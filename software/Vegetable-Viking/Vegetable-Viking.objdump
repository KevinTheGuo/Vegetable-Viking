
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00005790 memsz 0x00005790 flags r-x
    LOAD off    0x000067b0 vaddr 0x100057b0 paddr 0x1000721c align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c88 vaddr 0x10008c88 paddr 0x10008c88 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054d4  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  10005700  10005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  100057b0  1000721c  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10008c88  10008c88  00008c88  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000821c  2**0
                  CONTENTS
  7 .sdram        00000000  10008ddc  10008ddc  0000821c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000821c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000958  00000000  00000000  00008240  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016000  00000000  00000000  00008b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005def  00000000  00000000  0001eb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000662a  00000000  00000000  00024987  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000014e8  00000000  00000000  0002afb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002649  00000000  00000000  0002c49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000044ae  00000000  00000000  0002eae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00032f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000328  00000000  00000000  00032fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003584f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00035852  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003585e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003585f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00035860  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00035864  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00035868  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003586c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00035877  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00035882  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0003588d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00035898  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  000358b2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008ff29  00000000  00000000  00039cf9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10005700 l    d  .rodata	00000000 .rodata
100057b0 l    d  .rwdata	00000000 .rwdata
10008c88 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10008ddc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
100057b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10001f08 l     F .text	00000008 __fp_lock
10001f10 l     F .text	00000008 __fp_unlock
10001f24 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
10002fa8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100030d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100030fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10003204 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10003300 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100033e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100035c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1000720c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000384c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000399c l     F .text	00000038 alt_dev_reg
10006184 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003c78 l     F .text	00000204 altera_avalon_jtag_uart_irq
10003e7c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100045f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10004a90 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10004be8 l     F .text	00000050 alt_get_errno
10004c38 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008cb0 g     O .bss	00000004 alt_instruction_exception_handler
10002e74 g     F .text	00000054 _isatty_r
10003510 g     F .text	00000078 alt_main
10000460 g     F .text	000000b8 _puts_r
10008cdc g     O .bss	00000100 alt_irq
10002ec8 g     F .text	0000005c _lseek_r
1000721c g       *ABS*	00000000 __flash_rwdata_start
10008ddc g       *ABS*	00000000 __alt_heap_start
10002bf4 g     F .text	0000005c __sseek
1000226c g     F .text	00000010 __sinit
100020c4 g     F .text	00000078 __sfmoreglue
100035a8 g     F .text	00000020 __malloc_unlock
10001430 g     F .text	0000015c memmove
10002254 g     F .text	00000018 _cleanup
10005028 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002e1c g     F .text	00000058 _fstat_r
10008c94 g     O .bss	00000004 errno
10002b70 g     F .text	00000008 __seofread
10008c9c g     O .bss	00000004 alt_argv
1000f1e4 g       *ABS*	00000000 _gp
10006004 g     O .rwdata	00000180 alt_fd_list
10005048 g     F .text	00000090 alt_find_dev
100012f8 g     F .text	00000138 memcpy
10001f18 g     F .text	0000000c _cleanup_r
10004b70 g     F .text	00000078 alt_io_redirect
10005700 g       *ABS*	00000000 __DTOR_END__
10000518 g     F .text	00000014 puts
100052c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10004078 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003254 g     F .text	000000ac isatty
10008c90 g     O .bss	00000004 __malloc_top_pad
100005c4 g     F .text	000004a4 __sfvwrite_r
10001b2c g     F .text	00000054 _sbrk_r
10002f24 g     F .text	0000005c _read_r
10007204 g     O .rwdata	00000004 alt_max_fd
10002d08 g     F .text	00000100 _fclose_r
10001ed8 g     F .text	00000030 fflush
10008c8c g     O .bss	00000004 __malloc_max_sbrked_mem
10003434 g     F .text	000000dc lseek
100071e4 g     O .rwdata	00000004 _global_impure_ptr
1000158c g     F .text	000005a0 _realloc_r
10008ddc g       *ABS*	00000000 __bss_end
100049a0 g     F .text	000000f0 alt_iic_isr_register
10004f24 g     F .text	00000104 alt_tick
1000228c g     F .text	00000018 __fp_lock_all
10004954 g     F .text	0000004c alt_ic_irq_enabled
10004e8c g     F .text	00000098 alt_alarm_stop
10008ca4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10005fdc g     O .rwdata	00000028 alt_dev_null
100045dc g     F .text	0000001c alt_dcache_flush_all
1000721c g       *ABS*	00000000 __ram_rwdata_end
100071fc g     O .rwdata	00000008 alt_dev_list
1000389c g     F .text	00000100 write
100057b0 g       *ABS*	00000000 __ram_rodata_end
1000314c g     F .text	000000b8 fstat
10008ddc g       *ABS*	00000000 end
10003bb4 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10005700 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004284 g     F .text	00000218 altera_avalon_jtag_uart_write
1000227c g     F .text	00000004 __sfp_lock_acquire
10001210 g     F .text	000000e8 memchr
100023e0 g     F .text	000002f0 _free_r
10005538 g     F .text	00000194 __call_exitprocs
100071ec g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10008ca8 g     O .bss	00000004 _alt_tick_rate
10008cac g     O .bss	00000004 _alt_nticks
10003618 g     F .text	00000104 read
10003a08 g     F .text	00000048 alt_sys_init
10005424 g     F .text	00000114 __register_exitproc
10003f24 g     F .text	00000068 altera_avalon_jtag_uart_close
10002f80 g     F .text	00000028 .hidden __mulsi3
100057b0 g       *ABS*	00000000 __ram_rwdata_start
10005700 g       *ABS*	00000000 __ram_rodata_start
10008cb4 g     O .bss	00000028 __malloc_current_mallinfo
10003a50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100051ec g     F .text	000000d4 alt_get_fd
10002cb4 g     F .text	00000054 _close_r
100053a8 g     F .text	0000007c memcmp
10003b10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10008ddc g       *ABS*	00000000 __alt_stack_base
10003b60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10001b80 g     F .text	00000130 __swsetup_r
1000213c g     F .text	00000118 __sfp
10005bd4 g     O .rwdata	00000408 __malloc_av_
10002288 g     F .text	00000004 __sinit_lock_release
10002b1c g     F .text	00000054 __sread
100050d8 g     F .text	00000114 alt_find_file
10004648 g     F .text	000000a4 alt_dev_llist_insert
10003588 g     F .text	00000020 __malloc_lock
1000379c g     F .text	000000b0 sbrk
10001cb0 g     F .text	00000228 _fflush_r
10008c88 g       *ABS*	00000000 __bss_start
100029f8 g     F .text	00000124 memset
100003d4 g     F .text	0000008c main
10008ca0 g     O .bss	00000004 alt_envp
10008c88 g     O .bss	00000004 __malloc_max_total_mem
10003ab0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002c50 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10002e08 g     F .text	00000014 fclose
10000a68 g     F .text	000007a8 _malloc_r
10007208 g     O .rwdata	00000004 alt_errno
100026d0 g     F .text	000000b8 _fwalk
100022bc g     F .text	00000124 _malloc_trim_r
10005700 g       *ABS*	00000000 __CTOR_END__
10005700 g       *ABS*	00000000 __flash_rodata_start
10005700 g       *ABS*	00000000 __DTOR_LIST__
100039d4 g     F .text	00000034 alt_irq_init
1000371c g     F .text	00000080 alt_release_fd
1000535c g     F .text	00000014 atexit
10002c58 g     F .text	0000005c _write_r
100071e8 g     O .rwdata	00000004 _impure_ptr
10008c98 g     O .bss	00000004 alt_argc
10004748 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100022a4 g     F .text	00000018 __fp_unlock_all
100071f4 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100047c0 g     F .text	00000050 alt_ic_isr_register
1000721c g       *ABS*	00000000 _edata
10008ddc g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10003f8c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100048b0 g     F .text	000000a4 alt_ic_irq_disable
10002b78 g     F .text	0000007c __swrite
100071f0 g     O .rwdata	00000004 __malloc_trim_threshold
10005370 g     F .text	00000038 exit
10002788 g     F .text	000000b8 _fwalk_reent
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10002280 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100056cc g     F .text	00000034 _exit
1000449c g     F .text	00000140 alt_alarm_start
10002840 g     F .text	000001b8 __smakebuf_r
1000052c g     F .text	00000098 strlen
10004d2c g     F .text	00000160 open
100047a4 g     F .text	0000001c alt_icache_flush_all
10000268 g     F .text	0000016c FPGAcommunicator
10007210 g     O .rwdata	00000004 alt_priority_mask
10004810 g     F .text	000000a0 alt_ic_irq_enable
10007214 g     O .rwdata	00000008 alt_alarm_list
100046ec g     F .text	0000005c _do_ctors
10002ff8 g     F .text	000000d8 close
10003364 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
10002284 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a33704 	addi	r2,r2,-29476
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a33704 	addi	r2,r2,-29476
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6b317 	ldw	r2,-25908(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6b317 	ldw	r2,-25908(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
10000238:	d6bc7914 	ori	gp,gp,61924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10a32214 	ori	r2,r2,35976

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18e37714 	ori	r3,r3,36316

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	00033640 	call	10003364 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00035100 	call	10003510 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <FPGAcommunicator>:
#define to_sw_sig (char*) 0x00000030 // actual address here
//#define to_sw_port (char*) 0x00000030 // actual address here

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator(unsigned long* FPGAmessage)
{
10000268:	defffd04 	addi	sp,sp,-12
1000026c:	dfc00215 	stw	ra,8(sp)
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
10000278:	e13fff15 	stw	r4,-4(fp)
	*to_hw_sig = 2;	// 2 means we're starting communication
1000027c:	00801404 	movi	r2,80
10000280:	00c00084 	movi	r3,2
10000284:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000288:	00800804 	movi	r2,32
1000028c:	e0ffff17 	ldw	r3,-4(fp)
10000290:	18c00017 	ldw	r3,0(r3)
10000294:	10c00005 	stb	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10000298:	00803404 	movi	r2,208
1000029c:	e0ffff17 	ldw	r3,-4(fp)
100002a0:	18c00104 	addi	r3,r3,4
100002a4:	18c00017 	ldw	r3,0(r3)
100002a8:	10c00005 	stb	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
100002ac:	00803004 	movi	r2,192
100002b0:	e0ffff17 	ldw	r3,-4(fp)
100002b4:	18c00204 	addi	r3,r3,8
100002b8:	18c00017 	ldw	r3,0(r3)
100002bc:	10c00005 	stb	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
100002c0:	00802c04 	movi	r2,176
100002c4:	e0ffff17 	ldw	r3,-4(fp)
100002c8:	18c00304 	addi	r3,r3,12
100002cc:	18c00017 	ldw	r3,0(r3)
100002d0:	10c00005 	stb	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
100002d4:	00802804 	movi	r2,160
100002d8:	e0ffff17 	ldw	r3,-4(fp)
100002dc:	18c00404 	addi	r3,r3,16
100002e0:	18c00017 	ldw	r3,0(r3)
100002e4:	10c00005 	stb	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
100002e8:	00802404 	movi	r2,144
100002ec:	e0ffff17 	ldw	r3,-4(fp)
100002f0:	18c00504 	addi	r3,r3,20
100002f4:	18c00017 	ldw	r3,0(r3)
100002f8:	10c00005 	stb	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
100002fc:	00802004 	movi	r2,128
10000300:	e0ffff17 	ldw	r3,-4(fp)
10000304:	18c00604 	addi	r3,r3,24
10000308:	18c00017 	ldw	r3,0(r3)
1000030c:	10c00005 	stb	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10000310:	00801004 	movi	r2,64
10000314:	e0ffff17 	ldw	r3,-4(fp)
10000318:	18c00704 	addi	r3,r3,28
1000031c:	18c00017 	ldw	r3,0(r3)
10000320:	10c00005 	stb	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10000324:	00801c04 	movi	r2,112
10000328:	e0ffff17 	ldw	r3,-4(fp)
1000032c:	18c00804 	addi	r3,r3,32
10000330:	18c00017 	ldw	r3,0(r3)
10000334:	10c00005 	stb	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10000338:	00801804 	movi	r2,96
1000033c:	e0ffff17 	ldw	r3,-4(fp)
10000340:	18c00904 	addi	r3,r3,36
10000344:	18c00017 	ldw	r3,0(r3)
10000348:	10c00005 	stb	r3,0(r2)

	printf("got past putting it in\n");
1000034c:	01040034 	movhi	r4,4096
10000350:	2115c004 	addi	r4,r4,22272
10000354:	00005180 	call	10000518 <puts>

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000358:	0001883a 	nop
1000035c:	00800c04 	movi	r2,48
10000360:	10800003 	ldbu	r2,0(r2)
10000364:	10803fcc 	andi	r2,r2,255
10000368:	1080201c 	xori	r2,r2,128
1000036c:	10bfe004 	addi	r2,r2,-128
10000370:	10800098 	cmpnei	r2,r2,2
10000374:	103ff91e 	bne	r2,zero,1000035c <__alt_data_end+0xf800035c>

	*to_hw_sig = 1;		// now we are done putting in messages
10000378:	00801404 	movi	r2,80
1000037c:	00c00044 	movi	r3,1
10000380:	10c00005 	stb	r3,0(r2)

	printf("almost done\n");
10000384:	01040034 	movhi	r4,4096
10000388:	2115c604 	addi	r4,r4,22296
1000038c:	00005180 	call	10000518 <puts>

	while(*to_sw_sig != 0); // wait for response from hardware
10000390:	0001883a 	nop
10000394:	00800c04 	movi	r2,48
10000398:	10800003 	ldbu	r2,0(r2)
1000039c:	10803fcc 	andi	r2,r2,255
100003a0:	1080201c 	xori	r2,r2,128
100003a4:	10bfe004 	addi	r2,r2,-128
100003a8:	103ffa1e 	bne	r2,zero,10000394 <__alt_data_end+0xf8000394>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
100003ac:	00801404 	movi	r2,80
100003b0:	10000005 	stb	zero,0(r2)

	printf("message stuff done\n");
100003b4:	01040034 	movhi	r4,4096
100003b8:	2115c904 	addi	r4,r4,22308
100003bc:	00005180 	call	10000518 <puts>
}
100003c0:	e037883a 	mov	sp,fp
100003c4:	dfc00117 	ldw	ra,4(sp)
100003c8:	df000017 	ldw	fp,0(sp)
100003cc:	dec00204 	addi	sp,sp,8
100003d0:	f800283a 	ret

100003d4 <main>:

int main()
{
100003d4:	deffed04 	addi	sp,sp,-76
100003d8:	dfc01215 	stw	ra,72(sp)
100003dc:	df001115 	stw	fp,68(sp)
100003e0:	df001104 	addi	fp,sp,68
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<16; i++)
100003e4:	e03fef15 	stw	zero,-68(fp)
100003e8:	00000e06 	br	10000424 <main+0x50>
	{
		printf("Puttin in our message yo\n");
100003ec:	01040034 	movhi	r4,4096
100003f0:	2115ce04 	addi	r4,r4,22328
100003f4:	00005180 	call	10000518 <puts>
		FPGAmessage[i] = 9;
100003f8:	e0bfef17 	ldw	r2,-68(fp)
100003fc:	1085883a 	add	r2,r2,r2
10000400:	1085883a 	add	r2,r2,r2
10000404:	e0ffef04 	addi	r3,fp,-68
10000408:	1885883a 	add	r2,r3,r2
1000040c:	10800104 	addi	r2,r2,4
10000410:	00c00244 	movi	r3,9
10000414:	10c00015 	stw	r3,0(r2)
{
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<16; i++)
10000418:	e0bfef17 	ldw	r2,-68(fp)
1000041c:	10800044 	addi	r2,r2,1
10000420:	e0bfef15 	stw	r2,-68(fp)
10000424:	e0bfef17 	ldw	r2,-68(fp)
10000428:	10800410 	cmplti	r2,r2,16
1000042c:	103fef1e 	bne	r2,zero,100003ec <__alt_data_end+0xf80003ec>
	{
		printf("Puttin in our message yo\n");
		FPGAmessage[i] = 9;
	}

	printf("Now we doing our communicatin\n");
10000430:	01040034 	movhi	r4,4096
10000434:	2115d504 	addi	r4,r4,22356
10000438:	00005180 	call	10000518 <puts>
	FPGAcommunicator(FPGAmessage);
1000043c:	e0bff004 	addi	r2,fp,-64
10000440:	1009883a 	mov	r4,r2
10000444:	00002680 	call	10000268 <FPGAcommunicator>

	return 0;
10000448:	0005883a 	mov	r2,zero
}
1000044c:	e037883a 	mov	sp,fp
10000450:	dfc00117 	ldw	ra,4(sp)
10000454:	df000017 	ldw	fp,0(sp)
10000458:	dec00204 	addi	sp,sp,8
1000045c:	f800283a 	ret

10000460 <_puts_r>:
10000460:	defff604 	addi	sp,sp,-40
10000464:	dc000715 	stw	r16,28(sp)
10000468:	2021883a 	mov	r16,r4
1000046c:	2809883a 	mov	r4,r5
10000470:	dc400815 	stw	r17,32(sp)
10000474:	dfc00915 	stw	ra,36(sp)
10000478:	2823883a 	mov	r17,r5
1000047c:	000052c0 	call	1000052c <strlen>
10000480:	00c40034 	movhi	r3,4096
10000484:	18dc7a04 	addi	r3,r3,29160
10000488:	18c00017 	ldw	r3,0(r3)
1000048c:	11000044 	addi	r4,r2,1
10000490:	d8800115 	stw	r2,4(sp)
10000494:	18c00217 	ldw	r3,8(r3)
10000498:	01440034 	movhi	r5,4096
1000049c:	2955dd04 	addi	r5,r5,22388
100004a0:	1880030b 	ldhu	r2,12(r3)
100004a4:	d9400215 	stw	r5,8(sp)
100004a8:	d9000615 	stw	r4,24(sp)
100004ac:	01400044 	movi	r5,1
100004b0:	01000084 	movi	r4,2
100004b4:	d9000515 	stw	r4,20(sp)
100004b8:	dc400015 	stw	r17,0(sp)
100004bc:	d9400315 	stw	r5,12(sp)
100004c0:	dec00415 	stw	sp,16(sp)
100004c4:	1108000c 	andi	r4,r2,8192
100004c8:	2000061e 	bne	r4,zero,100004e4 <_puts_r+0x84>
100004cc:	19401917 	ldw	r5,100(r3)
100004d0:	0137ffc4 	movi	r4,-8193
100004d4:	10880014 	ori	r2,r2,8192
100004d8:	2908703a 	and	r4,r5,r4
100004dc:	1880030d 	sth	r2,12(r3)
100004e0:	19001915 	stw	r4,100(r3)
100004e4:	81400217 	ldw	r5,8(r16)
100004e8:	8009883a 	mov	r4,r16
100004ec:	d9800404 	addi	r6,sp,16
100004f0:	00005c40 	call	100005c4 <__sfvwrite_r>
100004f4:	1000061e 	bne	r2,zero,10000510 <_puts_r+0xb0>
100004f8:	00800284 	movi	r2,10
100004fc:	dfc00917 	ldw	ra,36(sp)
10000500:	dc400817 	ldw	r17,32(sp)
10000504:	dc000717 	ldw	r16,28(sp)
10000508:	dec00a04 	addi	sp,sp,40
1000050c:	f800283a 	ret
10000510:	00bfffc4 	movi	r2,-1
10000514:	003ff906 	br	100004fc <__alt_data_end+0xf80004fc>

10000518 <puts>:
10000518:	00840034 	movhi	r2,4096
1000051c:	109c7a04 	addi	r2,r2,29160
10000520:	200b883a 	mov	r5,r4
10000524:	11000017 	ldw	r4,0(r2)
10000528:	00004601 	jmpi	10000460 <_puts_r>

1000052c <strlen>:
1000052c:	208000cc 	andi	r2,r4,3
10000530:	10002026 	beq	r2,zero,100005b4 <strlen+0x88>
10000534:	20800007 	ldb	r2,0(r4)
10000538:	10002026 	beq	r2,zero,100005bc <strlen+0x90>
1000053c:	2005883a 	mov	r2,r4
10000540:	00000206 	br	1000054c <strlen+0x20>
10000544:	10c00007 	ldb	r3,0(r2)
10000548:	18001826 	beq	r3,zero,100005ac <strlen+0x80>
1000054c:	10800044 	addi	r2,r2,1
10000550:	10c000cc 	andi	r3,r2,3
10000554:	183ffb1e 	bne	r3,zero,10000544 <__alt_data_end+0xf8000544>
10000558:	10c00017 	ldw	r3,0(r2)
1000055c:	01ffbff4 	movhi	r7,65279
10000560:	39ffbfc4 	addi	r7,r7,-257
10000564:	00ca303a 	nor	r5,zero,r3
10000568:	01a02074 	movhi	r6,32897
1000056c:	19c7883a 	add	r3,r3,r7
10000570:	31a02004 	addi	r6,r6,-32640
10000574:	1946703a 	and	r3,r3,r5
10000578:	1986703a 	and	r3,r3,r6
1000057c:	1800091e 	bne	r3,zero,100005a4 <strlen+0x78>
10000580:	10800104 	addi	r2,r2,4
10000584:	10c00017 	ldw	r3,0(r2)
10000588:	19cb883a 	add	r5,r3,r7
1000058c:	00c6303a 	nor	r3,zero,r3
10000590:	28c6703a 	and	r3,r5,r3
10000594:	1986703a 	and	r3,r3,r6
10000598:	183ff926 	beq	r3,zero,10000580 <__alt_data_end+0xf8000580>
1000059c:	00000106 	br	100005a4 <strlen+0x78>
100005a0:	10800044 	addi	r2,r2,1
100005a4:	10c00007 	ldb	r3,0(r2)
100005a8:	183ffd1e 	bne	r3,zero,100005a0 <__alt_data_end+0xf80005a0>
100005ac:	1105c83a 	sub	r2,r2,r4
100005b0:	f800283a 	ret
100005b4:	2005883a 	mov	r2,r4
100005b8:	003fe706 	br	10000558 <__alt_data_end+0xf8000558>
100005bc:	0005883a 	mov	r2,zero
100005c0:	f800283a 	ret

100005c4 <__sfvwrite_r>:
100005c4:	30800217 	ldw	r2,8(r6)
100005c8:	10004526 	beq	r2,zero,100006e0 <__sfvwrite_r+0x11c>
100005cc:	28c0030b 	ldhu	r3,12(r5)
100005d0:	defff404 	addi	sp,sp,-48
100005d4:	dd400715 	stw	r21,28(sp)
100005d8:	dcc00515 	stw	r19,20(sp)
100005dc:	dc000215 	stw	r16,8(sp)
100005e0:	dfc00b15 	stw	ra,44(sp)
100005e4:	df000a15 	stw	fp,40(sp)
100005e8:	ddc00915 	stw	r23,36(sp)
100005ec:	dd800815 	stw	r22,32(sp)
100005f0:	dd000615 	stw	r20,24(sp)
100005f4:	dc800415 	stw	r18,16(sp)
100005f8:	dc400315 	stw	r17,12(sp)
100005fc:	1880020c 	andi	r2,r3,8
10000600:	2821883a 	mov	r16,r5
10000604:	202b883a 	mov	r21,r4
10000608:	3027883a 	mov	r19,r6
1000060c:	10002526 	beq	r2,zero,100006a4 <__sfvwrite_r+0xe0>
10000610:	28800417 	ldw	r2,16(r5)
10000614:	10002326 	beq	r2,zero,100006a4 <__sfvwrite_r+0xe0>
10000618:	1880008c 	andi	r2,r3,2
1000061c:	9c400017 	ldw	r17,0(r19)
10000620:	10003126 	beq	r2,zero,100006e8 <__sfvwrite_r+0x124>
10000624:	0029883a 	mov	r20,zero
10000628:	0025883a 	mov	r18,zero
1000062c:	05810004 	movi	r22,1024
10000630:	a00d883a 	mov	r6,r20
10000634:	a809883a 	mov	r4,r21
10000638:	90002526 	beq	r18,zero,100006d0 <__sfvwrite_r+0x10c>
1000063c:	900f883a 	mov	r7,r18
10000640:	81400717 	ldw	r5,28(r16)
10000644:	b480012e 	bgeu	r22,r18,1000064c <__sfvwrite_r+0x88>
10000648:	01c10004 	movi	r7,1024
1000064c:	80800917 	ldw	r2,36(r16)
10000650:	103ee83a 	callr	r2
10000654:	0080510e 	bge	zero,r2,1000079c <__sfvwrite_r+0x1d8>
10000658:	98c00217 	ldw	r3,8(r19)
1000065c:	a0a9883a 	add	r20,r20,r2
10000660:	90a5c83a 	sub	r18,r18,r2
10000664:	1885c83a 	sub	r2,r3,r2
10000668:	98800215 	stw	r2,8(r19)
1000066c:	103ff01e 	bne	r2,zero,10000630 <__alt_data_end+0xf8000630>
10000670:	0005883a 	mov	r2,zero
10000674:	dfc00b17 	ldw	ra,44(sp)
10000678:	df000a17 	ldw	fp,40(sp)
1000067c:	ddc00917 	ldw	r23,36(sp)
10000680:	dd800817 	ldw	r22,32(sp)
10000684:	dd400717 	ldw	r21,28(sp)
10000688:	dd000617 	ldw	r20,24(sp)
1000068c:	dcc00517 	ldw	r19,20(sp)
10000690:	dc800417 	ldw	r18,16(sp)
10000694:	dc400317 	ldw	r17,12(sp)
10000698:	dc000217 	ldw	r16,8(sp)
1000069c:	dec00c04 	addi	sp,sp,48
100006a0:	f800283a 	ret
100006a4:	a809883a 	mov	r4,r21
100006a8:	800b883a 	mov	r5,r16
100006ac:	0001b800 	call	10001b80 <__swsetup_r>
100006b0:	80c0030b 	ldhu	r3,12(r16)
100006b4:	103fd826 	beq	r2,zero,10000618 <__alt_data_end+0xf8000618>
100006b8:	18c01014 	ori	r3,r3,64
100006bc:	80c0030d 	sth	r3,12(r16)
100006c0:	00c00244 	movi	r3,9
100006c4:	00bfffc4 	movi	r2,-1
100006c8:	a8c00015 	stw	r3,0(r21)
100006cc:	003fe906 	br	10000674 <__alt_data_end+0xf8000674>
100006d0:	8d000017 	ldw	r20,0(r17)
100006d4:	8c800117 	ldw	r18,4(r17)
100006d8:	8c400204 	addi	r17,r17,8
100006dc:	003fd406 	br	10000630 <__alt_data_end+0xf8000630>
100006e0:	0005883a 	mov	r2,zero
100006e4:	f800283a 	ret
100006e8:	1880004c 	andi	r2,r3,1
100006ec:	1000301e 	bne	r2,zero,100007b0 <__sfvwrite_r+0x1ec>
100006f0:	002f883a 	mov	r23,zero
100006f4:	0025883a 	mov	r18,zero
100006f8:	90001c26 	beq	r18,zero,1000076c <__sfvwrite_r+0x1a8>
100006fc:	1880800c 	andi	r2,r3,512
10000700:	85000217 	ldw	r20,8(r16)
10000704:	10006c26 	beq	r2,zero,100008b8 <__sfvwrite_r+0x2f4>
10000708:	a02d883a 	mov	r22,r20
1000070c:	95008536 	bltu	r18,r20,10000924 <__sfvwrite_r+0x360>
10000710:	1881200c 	andi	r2,r3,1152
10000714:	10009d1e 	bne	r2,zero,1000098c <__sfvwrite_r+0x3c8>
10000718:	81000017 	ldw	r4,0(r16)
1000071c:	a039883a 	mov	fp,r20
10000720:	9029883a 	mov	r20,r18
10000724:	b80b883a 	mov	r5,r23
10000728:	b00d883a 	mov	r6,r22
1000072c:	00014300 	call	10001430 <memmove>
10000730:	80c00217 	ldw	r3,8(r16)
10000734:	81000017 	ldw	r4,0(r16)
10000738:	9005883a 	mov	r2,r18
1000073c:	1f39c83a 	sub	fp,r3,fp
10000740:	258f883a 	add	r7,r4,r22
10000744:	87000215 	stw	fp,8(r16)
10000748:	81c00015 	stw	r7,0(r16)
1000074c:	98c00217 	ldw	r3,8(r19)
10000750:	b8af883a 	add	r23,r23,r2
10000754:	90a5c83a 	sub	r18,r18,r2
10000758:	1d05c83a 	sub	r2,r3,r20
1000075c:	98800215 	stw	r2,8(r19)
10000760:	103fc326 	beq	r2,zero,10000670 <__alt_data_end+0xf8000670>
10000764:	80c0030b 	ldhu	r3,12(r16)
10000768:	903fe41e 	bne	r18,zero,100006fc <__alt_data_end+0xf80006fc>
1000076c:	8dc00017 	ldw	r23,0(r17)
10000770:	8c800117 	ldw	r18,4(r17)
10000774:	8c400204 	addi	r17,r17,8
10000778:	003fdf06 	br	100006f8 <__alt_data_end+0xf80006f8>
1000077c:	000158c0 	call	1000158c <_realloc_r>
10000780:	102d883a 	mov	r22,r2
10000784:	1000a01e 	bne	r2,zero,10000a08 <__sfvwrite_r+0x444>
10000788:	81400417 	ldw	r5,16(r16)
1000078c:	a809883a 	mov	r4,r21
10000790:	00023e00 	call	100023e0 <_free_r>
10000794:	00800304 	movi	r2,12
10000798:	a8800015 	stw	r2,0(r21)
1000079c:	80c0030b 	ldhu	r3,12(r16)
100007a0:	00bfffc4 	movi	r2,-1
100007a4:	18c01014 	ori	r3,r3,64
100007a8:	80c0030d 	sth	r3,12(r16)
100007ac:	003fb106 	br	10000674 <__alt_data_end+0xf8000674>
100007b0:	0029883a 	mov	r20,zero
100007b4:	0011883a 	mov	r8,zero
100007b8:	0039883a 	mov	fp,zero
100007bc:	0025883a 	mov	r18,zero
100007c0:	90001f26 	beq	r18,zero,10000840 <__sfvwrite_r+0x27c>
100007c4:	40006826 	beq	r8,zero,10000968 <__sfvwrite_r+0x3a4>
100007c8:	a02f883a 	mov	r23,r20
100007cc:	9500012e 	bgeu	r18,r20,100007d4 <__sfvwrite_r+0x210>
100007d0:	902f883a 	mov	r23,r18
100007d4:	81000017 	ldw	r4,0(r16)
100007d8:	80800417 	ldw	r2,16(r16)
100007dc:	b82d883a 	mov	r22,r23
100007e0:	81800217 	ldw	r6,8(r16)
100007e4:	81c00517 	ldw	r7,20(r16)
100007e8:	1100022e 	bgeu	r2,r4,100007f4 <__sfvwrite_r+0x230>
100007ec:	31c7883a 	add	r3,r6,r7
100007f0:	1dc01816 	blt	r3,r23,10000854 <__sfvwrite_r+0x290>
100007f4:	b9c03f16 	blt	r23,r7,100008f4 <__sfvwrite_r+0x330>
100007f8:	80800917 	ldw	r2,36(r16)
100007fc:	81400717 	ldw	r5,28(r16)
10000800:	a809883a 	mov	r4,r21
10000804:	da000115 	stw	r8,4(sp)
10000808:	e00d883a 	mov	r6,fp
1000080c:	103ee83a 	callr	r2
10000810:	102d883a 	mov	r22,r2
10000814:	da000117 	ldw	r8,4(sp)
10000818:	00bfe00e 	bge	zero,r2,1000079c <__alt_data_end+0xf800079c>
1000081c:	a5a9c83a 	sub	r20,r20,r22
10000820:	a0001f26 	beq	r20,zero,100008a0 <__sfvwrite_r+0x2dc>
10000824:	98800217 	ldw	r2,8(r19)
10000828:	e5b9883a 	add	fp,fp,r22
1000082c:	95a5c83a 	sub	r18,r18,r22
10000830:	15adc83a 	sub	r22,r2,r22
10000834:	9d800215 	stw	r22,8(r19)
10000838:	b03f8d26 	beq	r22,zero,10000670 <__alt_data_end+0xf8000670>
1000083c:	903fe11e 	bne	r18,zero,100007c4 <__alt_data_end+0xf80007c4>
10000840:	8f000017 	ldw	fp,0(r17)
10000844:	8c800117 	ldw	r18,4(r17)
10000848:	0011883a 	mov	r8,zero
1000084c:	8c400204 	addi	r17,r17,8
10000850:	003fdb06 	br	100007c0 <__alt_data_end+0xf80007c0>
10000854:	180d883a 	mov	r6,r3
10000858:	e00b883a 	mov	r5,fp
1000085c:	da000115 	stw	r8,4(sp)
10000860:	d8c00015 	stw	r3,0(sp)
10000864:	00014300 	call	10001430 <memmove>
10000868:	d8c00017 	ldw	r3,0(sp)
1000086c:	80800017 	ldw	r2,0(r16)
10000870:	a809883a 	mov	r4,r21
10000874:	800b883a 	mov	r5,r16
10000878:	10c5883a 	add	r2,r2,r3
1000087c:	80800015 	stw	r2,0(r16)
10000880:	d8c00015 	stw	r3,0(sp)
10000884:	0001cb00 	call	10001cb0 <_fflush_r>
10000888:	d8c00017 	ldw	r3,0(sp)
1000088c:	da000117 	ldw	r8,4(sp)
10000890:	103fc21e 	bne	r2,zero,1000079c <__alt_data_end+0xf800079c>
10000894:	182d883a 	mov	r22,r3
10000898:	a5a9c83a 	sub	r20,r20,r22
1000089c:	a03fe11e 	bne	r20,zero,10000824 <__alt_data_end+0xf8000824>
100008a0:	a809883a 	mov	r4,r21
100008a4:	800b883a 	mov	r5,r16
100008a8:	0001cb00 	call	10001cb0 <_fflush_r>
100008ac:	103fbb1e 	bne	r2,zero,1000079c <__alt_data_end+0xf800079c>
100008b0:	0011883a 	mov	r8,zero
100008b4:	003fdb06 	br	10000824 <__alt_data_end+0xf8000824>
100008b8:	81000017 	ldw	r4,0(r16)
100008bc:	80800417 	ldw	r2,16(r16)
100008c0:	1100012e 	bgeu	r2,r4,100008c8 <__sfvwrite_r+0x304>
100008c4:	a4805a36 	bltu	r20,r18,10000a30 <__sfvwrite_r+0x46c>
100008c8:	81c00517 	ldw	r7,20(r16)
100008cc:	91c01a36 	bltu	r18,r7,10000938 <__sfvwrite_r+0x374>
100008d0:	80800917 	ldw	r2,36(r16)
100008d4:	81400717 	ldw	r5,28(r16)
100008d8:	a809883a 	mov	r4,r21
100008dc:	b80d883a 	mov	r6,r23
100008e0:	103ee83a 	callr	r2
100008e4:	1029883a 	mov	r20,r2
100008e8:	00bfac0e 	bge	zero,r2,1000079c <__alt_data_end+0xf800079c>
100008ec:	a005883a 	mov	r2,r20
100008f0:	003f9606 	br	1000074c <__alt_data_end+0xf800074c>
100008f4:	b80d883a 	mov	r6,r23
100008f8:	e00b883a 	mov	r5,fp
100008fc:	da000115 	stw	r8,4(sp)
10000900:	00014300 	call	10001430 <memmove>
10000904:	80800217 	ldw	r2,8(r16)
10000908:	80c00017 	ldw	r3,0(r16)
1000090c:	da000117 	ldw	r8,4(sp)
10000910:	15c5c83a 	sub	r2,r2,r23
10000914:	1def883a 	add	r23,r3,r23
10000918:	80800215 	stw	r2,8(r16)
1000091c:	85c00015 	stw	r23,0(r16)
10000920:	003fbe06 	br	1000081c <__alt_data_end+0xf800081c>
10000924:	81000017 	ldw	r4,0(r16)
10000928:	9039883a 	mov	fp,r18
1000092c:	9029883a 	mov	r20,r18
10000930:	902d883a 	mov	r22,r18
10000934:	003f7b06 	br	10000724 <__alt_data_end+0xf8000724>
10000938:	b80b883a 	mov	r5,r23
1000093c:	900d883a 	mov	r6,r18
10000940:	00014300 	call	10001430 <memmove>
10000944:	80c00217 	ldw	r3,8(r16)
10000948:	80800017 	ldw	r2,0(r16)
1000094c:	9029883a 	mov	r20,r18
10000950:	1c87c83a 	sub	r3,r3,r18
10000954:	1485883a 	add	r2,r2,r18
10000958:	80800015 	stw	r2,0(r16)
1000095c:	80c00215 	stw	r3,8(r16)
10000960:	9005883a 	mov	r2,r18
10000964:	003f7906 	br	1000074c <__alt_data_end+0xf800074c>
10000968:	e009883a 	mov	r4,fp
1000096c:	01400284 	movi	r5,10
10000970:	900d883a 	mov	r6,r18
10000974:	00012100 	call	10001210 <memchr>
10000978:	10003826 	beq	r2,zero,10000a5c <__sfvwrite_r+0x498>
1000097c:	10800044 	addi	r2,r2,1
10000980:	1729c83a 	sub	r20,r2,fp
10000984:	02000044 	movi	r8,1
10000988:	003f8f06 	br	100007c8 <__alt_data_end+0xf80007c8>
1000098c:	80800517 	ldw	r2,20(r16)
10000990:	81400417 	ldw	r5,16(r16)
10000994:	87000017 	ldw	fp,0(r16)
10000998:	10a9883a 	add	r20,r2,r2
1000099c:	a085883a 	add	r2,r20,r2
100009a0:	1028d7fa 	srli	r20,r2,31
100009a4:	e179c83a 	sub	fp,fp,r5
100009a8:	e1000044 	addi	r4,fp,1
100009ac:	a085883a 	add	r2,r20,r2
100009b0:	1029d07a 	srai	r20,r2,1
100009b4:	2485883a 	add	r2,r4,r18
100009b8:	a00d883a 	mov	r6,r20
100009bc:	a080022e 	bgeu	r20,r2,100009c8 <__sfvwrite_r+0x404>
100009c0:	1029883a 	mov	r20,r2
100009c4:	100d883a 	mov	r6,r2
100009c8:	18c1000c 	andi	r3,r3,1024
100009cc:	a809883a 	mov	r4,r21
100009d0:	183f6a26 	beq	r3,zero,1000077c <__alt_data_end+0xf800077c>
100009d4:	300b883a 	mov	r5,r6
100009d8:	0000a680 	call	10000a68 <_malloc_r>
100009dc:	102d883a 	mov	r22,r2
100009e0:	103f6c26 	beq	r2,zero,10000794 <__alt_data_end+0xf8000794>
100009e4:	81400417 	ldw	r5,16(r16)
100009e8:	1009883a 	mov	r4,r2
100009ec:	e00d883a 	mov	r6,fp
100009f0:	00012f80 	call	100012f8 <memcpy>
100009f4:	8080030b 	ldhu	r2,12(r16)
100009f8:	00fedfc4 	movi	r3,-1153
100009fc:	10c4703a 	and	r2,r2,r3
10000a00:	10802014 	ori	r2,r2,128
10000a04:	8080030d 	sth	r2,12(r16)
10000a08:	b709883a 	add	r4,r22,fp
10000a0c:	a707c83a 	sub	r3,r20,fp
10000a10:	85800415 	stw	r22,16(r16)
10000a14:	85000515 	stw	r20,20(r16)
10000a18:	81000015 	stw	r4,0(r16)
10000a1c:	9039883a 	mov	fp,r18
10000a20:	80c00215 	stw	r3,8(r16)
10000a24:	9029883a 	mov	r20,r18
10000a28:	902d883a 	mov	r22,r18
10000a2c:	003f3d06 	br	10000724 <__alt_data_end+0xf8000724>
10000a30:	b80b883a 	mov	r5,r23
10000a34:	a00d883a 	mov	r6,r20
10000a38:	00014300 	call	10001430 <memmove>
10000a3c:	80800017 	ldw	r2,0(r16)
10000a40:	a809883a 	mov	r4,r21
10000a44:	800b883a 	mov	r5,r16
10000a48:	1505883a 	add	r2,r2,r20
10000a4c:	80800015 	stw	r2,0(r16)
10000a50:	0001cb00 	call	10001cb0 <_fflush_r>
10000a54:	103fa526 	beq	r2,zero,100008ec <__alt_data_end+0xf80008ec>
10000a58:	003f5006 	br	1000079c <__alt_data_end+0xf800079c>
10000a5c:	95000044 	addi	r20,r18,1
10000a60:	02000044 	movi	r8,1
10000a64:	003f5806 	br	100007c8 <__alt_data_end+0xf80007c8>

10000a68 <_malloc_r>:
10000a68:	defff504 	addi	sp,sp,-44
10000a6c:	dc800315 	stw	r18,12(sp)
10000a70:	dfc00a15 	stw	ra,40(sp)
10000a74:	df000915 	stw	fp,36(sp)
10000a78:	ddc00815 	stw	r23,32(sp)
10000a7c:	dd800715 	stw	r22,28(sp)
10000a80:	dd400615 	stw	r21,24(sp)
10000a84:	dd000515 	stw	r20,20(sp)
10000a88:	dcc00415 	stw	r19,16(sp)
10000a8c:	dc400215 	stw	r17,8(sp)
10000a90:	dc000115 	stw	r16,4(sp)
10000a94:	288002c4 	addi	r2,r5,11
10000a98:	00c00584 	movi	r3,22
10000a9c:	2025883a 	mov	r18,r4
10000aa0:	18802a2e 	bgeu	r3,r2,10000b4c <_malloc_r+0xe4>
10000aa4:	047ffe04 	movi	r17,-8
10000aa8:	1462703a 	and	r17,r2,r17
10000aac:	88009e16 	blt	r17,zero,10000d28 <_malloc_r+0x2c0>
10000ab0:	89409d36 	bltu	r17,r5,10000d28 <_malloc_r+0x2c0>
10000ab4:	00035880 	call	10003588 <__malloc_lock>
10000ab8:	00807dc4 	movi	r2,503
10000abc:	14402736 	bltu	r2,r17,10000b5c <_malloc_r+0xf4>
10000ac0:	8806d0fa 	srli	r3,r17,3
10000ac4:	04c40034 	movhi	r19,4096
10000ac8:	9cd6f504 	addi	r19,r19,23508
10000acc:	18c5883a 	add	r2,r3,r3
10000ad0:	1085883a 	add	r2,r2,r2
10000ad4:	1085883a 	add	r2,r2,r2
10000ad8:	9885883a 	add	r2,r19,r2
10000adc:	14000317 	ldw	r16,12(r2)
10000ae0:	80814a26 	beq	r16,r2,1000100c <_malloc_r+0x5a4>
10000ae4:	80c00117 	ldw	r3,4(r16)
10000ae8:	81000317 	ldw	r4,12(r16)
10000aec:	00bfff04 	movi	r2,-4
10000af0:	1884703a 	and	r2,r3,r2
10000af4:	81400217 	ldw	r5,8(r16)
10000af8:	8085883a 	add	r2,r16,r2
10000afc:	10c00117 	ldw	r3,4(r2)
10000b00:	29000315 	stw	r4,12(r5)
10000b04:	21400215 	stw	r5,8(r4)
10000b08:	18c00054 	ori	r3,r3,1
10000b0c:	10c00115 	stw	r3,4(r2)
10000b10:	9009883a 	mov	r4,r18
10000b14:	00035a80 	call	100035a8 <__malloc_unlock>
10000b18:	80800204 	addi	r2,r16,8
10000b1c:	dfc00a17 	ldw	ra,40(sp)
10000b20:	df000917 	ldw	fp,36(sp)
10000b24:	ddc00817 	ldw	r23,32(sp)
10000b28:	dd800717 	ldw	r22,28(sp)
10000b2c:	dd400617 	ldw	r21,24(sp)
10000b30:	dd000517 	ldw	r20,20(sp)
10000b34:	dcc00417 	ldw	r19,16(sp)
10000b38:	dc800317 	ldw	r18,12(sp)
10000b3c:	dc400217 	ldw	r17,8(sp)
10000b40:	dc000117 	ldw	r16,4(sp)
10000b44:	dec00b04 	addi	sp,sp,44
10000b48:	f800283a 	ret
10000b4c:	04400404 	movi	r17,16
10000b50:	89407536 	bltu	r17,r5,10000d28 <_malloc_r+0x2c0>
10000b54:	00035880 	call	10003588 <__malloc_lock>
10000b58:	003fd906 	br	10000ac0 <__alt_data_end+0xf8000ac0>
10000b5c:	8806d27a 	srli	r3,r17,9
10000b60:	18007526 	beq	r3,zero,10000d38 <_malloc_r+0x2d0>
10000b64:	00800104 	movi	r2,4
10000b68:	10c0ef36 	bltu	r2,r3,10000f28 <_malloc_r+0x4c0>
10000b6c:	8806d1ba 	srli	r3,r17,6
10000b70:	19c00e04 	addi	r7,r3,56
10000b74:	39cb883a 	add	r5,r7,r7
10000b78:	04c40034 	movhi	r19,4096
10000b7c:	294b883a 	add	r5,r5,r5
10000b80:	9cd6f504 	addi	r19,r19,23508
10000b84:	294b883a 	add	r5,r5,r5
10000b88:	994b883a 	add	r5,r19,r5
10000b8c:	2c000317 	ldw	r16,12(r5)
10000b90:	2c000e26 	beq	r5,r16,10000bcc <_malloc_r+0x164>
10000b94:	80800117 	ldw	r2,4(r16)
10000b98:	01bfff04 	movi	r6,-4
10000b9c:	010003c4 	movi	r4,15
10000ba0:	1184703a 	and	r2,r2,r6
10000ba4:	1447c83a 	sub	r3,r2,r17
10000ba8:	20c00716 	blt	r4,r3,10000bc8 <_malloc_r+0x160>
10000bac:	1800650e 	bge	r3,zero,10000d44 <_malloc_r+0x2dc>
10000bb0:	84000317 	ldw	r16,12(r16)
10000bb4:	2c000526 	beq	r5,r16,10000bcc <_malloc_r+0x164>
10000bb8:	80800117 	ldw	r2,4(r16)
10000bbc:	1184703a 	and	r2,r2,r6
10000bc0:	1447c83a 	sub	r3,r2,r17
10000bc4:	20fff90e 	bge	r4,r3,10000bac <__alt_data_end+0xf8000bac>
10000bc8:	39ffffc4 	addi	r7,r7,-1
10000bcc:	38c00044 	addi	r3,r7,1
10000bd0:	01840034 	movhi	r6,4096
10000bd4:	9c000417 	ldw	r16,16(r19)
10000bd8:	3196f504 	addi	r6,r6,23508
10000bdc:	32400204 	addi	r9,r6,8
10000be0:	82410326 	beq	r16,r9,10000ff0 <_malloc_r+0x588>
10000be4:	81000117 	ldw	r4,4(r16)
10000be8:	00bfff04 	movi	r2,-4
10000bec:	208e703a 	and	r7,r4,r2
10000bf0:	3c45c83a 	sub	r2,r7,r17
10000bf4:	010003c4 	movi	r4,15
10000bf8:	2080ee16 	blt	r4,r2,10000fb4 <_malloc_r+0x54c>
10000bfc:	32400515 	stw	r9,20(r6)
10000c00:	32400415 	stw	r9,16(r6)
10000c04:	1000510e 	bge	r2,zero,10000d4c <_malloc_r+0x2e4>
10000c08:	00807fc4 	movi	r2,511
10000c0c:	11c0ce36 	bltu	r2,r7,10000f48 <_malloc_r+0x4e0>
10000c10:	3808d0fa 	srli	r4,r7,3
10000c14:	01c00044 	movi	r7,1
10000c18:	30800117 	ldw	r2,4(r6)
10000c1c:	210b883a 	add	r5,r4,r4
10000c20:	294b883a 	add	r5,r5,r5
10000c24:	2009d0ba 	srai	r4,r4,2
10000c28:	294b883a 	add	r5,r5,r5
10000c2c:	298b883a 	add	r5,r5,r6
10000c30:	2a000217 	ldw	r8,8(r5)
10000c34:	3908983a 	sll	r4,r7,r4
10000c38:	81400315 	stw	r5,12(r16)
10000c3c:	82000215 	stw	r8,8(r16)
10000c40:	2088b03a 	or	r4,r4,r2
10000c44:	2c000215 	stw	r16,8(r5)
10000c48:	31000115 	stw	r4,4(r6)
10000c4c:	44000315 	stw	r16,12(r8)
10000c50:	1805d0ba 	srai	r2,r3,2
10000c54:	01400044 	movi	r5,1
10000c58:	288a983a 	sll	r5,r5,r2
10000c5c:	21404336 	bltu	r4,r5,10000d6c <_malloc_r+0x304>
10000c60:	2144703a 	and	r2,r4,r5
10000c64:	10000a1e 	bne	r2,zero,10000c90 <_malloc_r+0x228>
10000c68:	00bfff04 	movi	r2,-4
10000c6c:	294b883a 	add	r5,r5,r5
10000c70:	1886703a 	and	r3,r3,r2
10000c74:	2144703a 	and	r2,r4,r5
10000c78:	18c00104 	addi	r3,r3,4
10000c7c:	1000041e 	bne	r2,zero,10000c90 <_malloc_r+0x228>
10000c80:	294b883a 	add	r5,r5,r5
10000c84:	2144703a 	and	r2,r4,r5
10000c88:	18c00104 	addi	r3,r3,4
10000c8c:	103ffc26 	beq	r2,zero,10000c80 <__alt_data_end+0xf8000c80>
10000c90:	023fff04 	movi	r8,-4
10000c94:	01c003c4 	movi	r7,15
10000c98:	18c5883a 	add	r2,r3,r3
10000c9c:	1085883a 	add	r2,r2,r2
10000ca0:	1085883a 	add	r2,r2,r2
10000ca4:	9895883a 	add	r10,r19,r2
10000ca8:	52c00304 	addi	r11,r10,12
10000cac:	1819883a 	mov	r12,r3
10000cb0:	5c000017 	ldw	r16,0(r11)
10000cb4:	59bffd04 	addi	r6,r11,-12
10000cb8:	8180041e 	bne	r16,r6,10000ccc <_malloc_r+0x264>
10000cbc:	0000ce06 	br	10000ff8 <_malloc_r+0x590>
10000cc0:	2000d70e 	bge	r4,zero,10001020 <_malloc_r+0x5b8>
10000cc4:	84000317 	ldw	r16,12(r16)
10000cc8:	8180cb26 	beq	r16,r6,10000ff8 <_malloc_r+0x590>
10000ccc:	80800117 	ldw	r2,4(r16)
10000cd0:	1204703a 	and	r2,r2,r8
10000cd4:	1449c83a 	sub	r4,r2,r17
10000cd8:	393ff90e 	bge	r7,r4,10000cc0 <__alt_data_end+0xf8000cc0>
10000cdc:	80800317 	ldw	r2,12(r16)
10000ce0:	80c00217 	ldw	r3,8(r16)
10000ce4:	89400054 	ori	r5,r17,1
10000ce8:	81400115 	stw	r5,4(r16)
10000cec:	18800315 	stw	r2,12(r3)
10000cf0:	10c00215 	stw	r3,8(r2)
10000cf4:	8463883a 	add	r17,r16,r17
10000cf8:	9c400515 	stw	r17,20(r19)
10000cfc:	9c400415 	stw	r17,16(r19)
10000d00:	20800054 	ori	r2,r4,1
10000d04:	88800115 	stw	r2,4(r17)
10000d08:	8a400315 	stw	r9,12(r17)
10000d0c:	8a400215 	stw	r9,8(r17)
10000d10:	8923883a 	add	r17,r17,r4
10000d14:	89000015 	stw	r4,0(r17)
10000d18:	9009883a 	mov	r4,r18
10000d1c:	00035a80 	call	100035a8 <__malloc_unlock>
10000d20:	80800204 	addi	r2,r16,8
10000d24:	003f7d06 	br	10000b1c <__alt_data_end+0xf8000b1c>
10000d28:	00800304 	movi	r2,12
10000d2c:	90800015 	stw	r2,0(r18)
10000d30:	0005883a 	mov	r2,zero
10000d34:	003f7906 	br	10000b1c <__alt_data_end+0xf8000b1c>
10000d38:	01401f84 	movi	r5,126
10000d3c:	01c00fc4 	movi	r7,63
10000d40:	003f8d06 	br	10000b78 <__alt_data_end+0xf8000b78>
10000d44:	81000317 	ldw	r4,12(r16)
10000d48:	003f6a06 	br	10000af4 <__alt_data_end+0xf8000af4>
10000d4c:	81c5883a 	add	r2,r16,r7
10000d50:	10c00117 	ldw	r3,4(r2)
10000d54:	9009883a 	mov	r4,r18
10000d58:	18c00054 	ori	r3,r3,1
10000d5c:	10c00115 	stw	r3,4(r2)
10000d60:	00035a80 	call	100035a8 <__malloc_unlock>
10000d64:	80800204 	addi	r2,r16,8
10000d68:	003f6c06 	br	10000b1c <__alt_data_end+0xf8000b1c>
10000d6c:	9c000217 	ldw	r16,8(r19)
10000d70:	00bfff04 	movi	r2,-4
10000d74:	85800117 	ldw	r22,4(r16)
10000d78:	b0ac703a 	and	r22,r22,r2
10000d7c:	b4400336 	bltu	r22,r17,10000d8c <_malloc_r+0x324>
10000d80:	b445c83a 	sub	r2,r22,r17
10000d84:	00c003c4 	movi	r3,15
10000d88:	18805d16 	blt	r3,r2,10000f00 <_malloc_r+0x498>
10000d8c:	05c40034 	movhi	r23,4096
10000d90:	00840074 	movhi	r2,4097
10000d94:	bddc7b04 	addi	r23,r23,29164
10000d98:	10a32404 	addi	r2,r2,-29552
10000d9c:	15400017 	ldw	r21,0(r2)
10000da0:	b9000017 	ldw	r4,0(r23)
10000da4:	00ffffc4 	movi	r3,-1
10000da8:	858d883a 	add	r6,r16,r22
10000dac:	8d6b883a 	add	r21,r17,r21
10000db0:	20c0e426 	beq	r4,r3,10001144 <_malloc_r+0x6dc>
10000db4:	ad4403c4 	addi	r21,r21,4111
10000db8:	00fc0004 	movi	r3,-4096
10000dbc:	a8ea703a 	and	r21,r21,r3
10000dc0:	9009883a 	mov	r4,r18
10000dc4:	a80b883a 	mov	r5,r21
10000dc8:	d9800015 	stw	r6,0(sp)
10000dcc:	0001b2c0 	call	10001b2c <_sbrk_r>
10000dd0:	00ffffc4 	movi	r3,-1
10000dd4:	1029883a 	mov	r20,r2
10000dd8:	d9800017 	ldw	r6,0(sp)
10000ddc:	10c0a426 	beq	r2,r3,10001070 <_malloc_r+0x608>
10000de0:	1180a236 	bltu	r2,r6,1000106c <_malloc_r+0x604>
10000de4:	07040074 	movhi	fp,4097
10000de8:	e7232d04 	addi	fp,fp,-29516
10000dec:	e0c00017 	ldw	r3,0(fp)
10000df0:	a8c7883a 	add	r3,r21,r3
10000df4:	e0c00015 	stw	r3,0(fp)
10000df8:	3500da26 	beq	r6,r20,10001164 <_malloc_r+0x6fc>
10000dfc:	b9000017 	ldw	r4,0(r23)
10000e00:	00bfffc4 	movi	r2,-1
10000e04:	2080e426 	beq	r4,r2,10001198 <_malloc_r+0x730>
10000e08:	a185c83a 	sub	r2,r20,r6
10000e0c:	1885883a 	add	r2,r3,r2
10000e10:	e0800015 	stw	r2,0(fp)
10000e14:	a0c001cc 	andi	r3,r20,7
10000e18:	1800b526 	beq	r3,zero,100010f0 <_malloc_r+0x688>
10000e1c:	a0e9c83a 	sub	r20,r20,r3
10000e20:	00840204 	movi	r2,4104
10000e24:	a5000204 	addi	r20,r20,8
10000e28:	10c7c83a 	sub	r3,r2,r3
10000e2c:	a545883a 	add	r2,r20,r21
10000e30:	1083ffcc 	andi	r2,r2,4095
10000e34:	18abc83a 	sub	r21,r3,r2
10000e38:	9009883a 	mov	r4,r18
10000e3c:	a80b883a 	mov	r5,r21
10000e40:	0001b2c0 	call	10001b2c <_sbrk_r>
10000e44:	00ffffc4 	movi	r3,-1
10000e48:	10c0d026 	beq	r2,r3,1000118c <_malloc_r+0x724>
10000e4c:	1507c83a 	sub	r3,r2,r20
10000e50:	a8c7883a 	add	r3,r21,r3
10000e54:	18c00054 	ori	r3,r3,1
10000e58:	e0800017 	ldw	r2,0(fp)
10000e5c:	9d000215 	stw	r20,8(r19)
10000e60:	a0c00115 	stw	r3,4(r20)
10000e64:	a887883a 	add	r3,r21,r2
10000e68:	e0c00015 	stw	r3,0(fp)
10000e6c:	84c00e26 	beq	r16,r19,10000ea8 <_malloc_r+0x440>
10000e70:	018003c4 	movi	r6,15
10000e74:	3580a02e 	bgeu	r6,r22,100010f8 <_malloc_r+0x690>
10000e78:	81400117 	ldw	r5,4(r16)
10000e7c:	013ffe04 	movi	r4,-8
10000e80:	b0bffd04 	addi	r2,r22,-12
10000e84:	1104703a 	and	r2,r2,r4
10000e88:	2900004c 	andi	r4,r5,1
10000e8c:	1108b03a 	or	r4,r2,r4
10000e90:	81000115 	stw	r4,4(r16)
10000e94:	01400144 	movi	r5,5
10000e98:	8089883a 	add	r4,r16,r2
10000e9c:	21400115 	stw	r5,4(r4)
10000ea0:	21400215 	stw	r5,8(r4)
10000ea4:	3080c036 	bltu	r6,r2,100011a8 <_malloc_r+0x740>
10000ea8:	00840074 	movhi	r2,4097
10000eac:	10a32304 	addi	r2,r2,-29556
10000eb0:	11000017 	ldw	r4,0(r2)
10000eb4:	20c0012e 	bgeu	r4,r3,10000ebc <_malloc_r+0x454>
10000eb8:	10c00015 	stw	r3,0(r2)
10000ebc:	00840074 	movhi	r2,4097
10000ec0:	10a32204 	addi	r2,r2,-29560
10000ec4:	11000017 	ldw	r4,0(r2)
10000ec8:	9c000217 	ldw	r16,8(r19)
10000ecc:	20c0012e 	bgeu	r4,r3,10000ed4 <_malloc_r+0x46c>
10000ed0:	10c00015 	stw	r3,0(r2)
10000ed4:	80c00117 	ldw	r3,4(r16)
10000ed8:	00bfff04 	movi	r2,-4
10000edc:	1886703a 	and	r3,r3,r2
10000ee0:	1c45c83a 	sub	r2,r3,r17
10000ee4:	1c400236 	bltu	r3,r17,10000ef0 <_malloc_r+0x488>
10000ee8:	00c003c4 	movi	r3,15
10000eec:	18800416 	blt	r3,r2,10000f00 <_malloc_r+0x498>
10000ef0:	9009883a 	mov	r4,r18
10000ef4:	00035a80 	call	100035a8 <__malloc_unlock>
10000ef8:	0005883a 	mov	r2,zero
10000efc:	003f0706 	br	10000b1c <__alt_data_end+0xf8000b1c>
10000f00:	88c00054 	ori	r3,r17,1
10000f04:	80c00115 	stw	r3,4(r16)
10000f08:	8463883a 	add	r17,r16,r17
10000f0c:	10800054 	ori	r2,r2,1
10000f10:	9c400215 	stw	r17,8(r19)
10000f14:	88800115 	stw	r2,4(r17)
10000f18:	9009883a 	mov	r4,r18
10000f1c:	00035a80 	call	100035a8 <__malloc_unlock>
10000f20:	80800204 	addi	r2,r16,8
10000f24:	003efd06 	br	10000b1c <__alt_data_end+0xf8000b1c>
10000f28:	00800504 	movi	r2,20
10000f2c:	10c0482e 	bgeu	r2,r3,10001050 <_malloc_r+0x5e8>
10000f30:	00801504 	movi	r2,84
10000f34:	10c06836 	bltu	r2,r3,100010d8 <_malloc_r+0x670>
10000f38:	8806d33a 	srli	r3,r17,12
10000f3c:	19c01b84 	addi	r7,r3,110
10000f40:	39cb883a 	add	r5,r7,r7
10000f44:	003f0c06 	br	10000b78 <__alt_data_end+0xf8000b78>
10000f48:	3804d27a 	srli	r2,r7,9
10000f4c:	01000104 	movi	r4,4
10000f50:	2080422e 	bgeu	r4,r2,1000105c <_malloc_r+0x5f4>
10000f54:	01000504 	movi	r4,20
10000f58:	20807c36 	bltu	r4,r2,1000114c <_malloc_r+0x6e4>
10000f5c:	110016c4 	addi	r4,r2,91
10000f60:	210b883a 	add	r5,r4,r4
10000f64:	294b883a 	add	r5,r5,r5
10000f68:	294b883a 	add	r5,r5,r5
10000f6c:	994b883a 	add	r5,r19,r5
10000f70:	28800217 	ldw	r2,8(r5)
10000f74:	02040034 	movhi	r8,4096
10000f78:	4216f504 	addi	r8,r8,23508
10000f7c:	11406326 	beq	r2,r5,1000110c <_malloc_r+0x6a4>
10000f80:	01bfff04 	movi	r6,-4
10000f84:	11000117 	ldw	r4,4(r2)
10000f88:	2188703a 	and	r4,r4,r6
10000f8c:	3900022e 	bgeu	r7,r4,10000f98 <_malloc_r+0x530>
10000f90:	10800217 	ldw	r2,8(r2)
10000f94:	28bffb1e 	bne	r5,r2,10000f84 <__alt_data_end+0xf8000f84>
10000f98:	11800317 	ldw	r6,12(r2)
10000f9c:	99000117 	ldw	r4,4(r19)
10000fa0:	81800315 	stw	r6,12(r16)
10000fa4:	80800215 	stw	r2,8(r16)
10000fa8:	34000215 	stw	r16,8(r6)
10000fac:	14000315 	stw	r16,12(r2)
10000fb0:	003f2706 	br	10000c50 <__alt_data_end+0xf8000c50>
10000fb4:	88c00054 	ori	r3,r17,1
10000fb8:	80c00115 	stw	r3,4(r16)
10000fbc:	8463883a 	add	r17,r16,r17
10000fc0:	34400515 	stw	r17,20(r6)
10000fc4:	34400415 	stw	r17,16(r6)
10000fc8:	10c00054 	ori	r3,r2,1
10000fcc:	8a400315 	stw	r9,12(r17)
10000fd0:	8a400215 	stw	r9,8(r17)
10000fd4:	88c00115 	stw	r3,4(r17)
10000fd8:	88a3883a 	add	r17,r17,r2
10000fdc:	88800015 	stw	r2,0(r17)
10000fe0:	9009883a 	mov	r4,r18
10000fe4:	00035a80 	call	100035a8 <__malloc_unlock>
10000fe8:	80800204 	addi	r2,r16,8
10000fec:	003ecb06 	br	10000b1c <__alt_data_end+0xf8000b1c>
10000ff0:	31000117 	ldw	r4,4(r6)
10000ff4:	003f1606 	br	10000c50 <__alt_data_end+0xf8000c50>
10000ff8:	63000044 	addi	r12,r12,1
10000ffc:	608000cc 	andi	r2,r12,3
10001000:	5ac00204 	addi	r11,r11,8
10001004:	103f2a1e 	bne	r2,zero,10000cb0 <__alt_data_end+0xf8000cb0>
10001008:	00002106 	br	10001090 <_malloc_r+0x628>
1000100c:	80800204 	addi	r2,r16,8
10001010:	84000517 	ldw	r16,20(r16)
10001014:	143eb31e 	bne	r2,r16,10000ae4 <__alt_data_end+0xf8000ae4>
10001018:	18c00084 	addi	r3,r3,2
1000101c:	003eec06 	br	10000bd0 <__alt_data_end+0xf8000bd0>
10001020:	8085883a 	add	r2,r16,r2
10001024:	10c00117 	ldw	r3,4(r2)
10001028:	81000317 	ldw	r4,12(r16)
1000102c:	81400217 	ldw	r5,8(r16)
10001030:	18c00054 	ori	r3,r3,1
10001034:	10c00115 	stw	r3,4(r2)
10001038:	29000315 	stw	r4,12(r5)
1000103c:	21400215 	stw	r5,8(r4)
10001040:	9009883a 	mov	r4,r18
10001044:	00035a80 	call	100035a8 <__malloc_unlock>
10001048:	80800204 	addi	r2,r16,8
1000104c:	003eb306 	br	10000b1c <__alt_data_end+0xf8000b1c>
10001050:	19c016c4 	addi	r7,r3,91
10001054:	39cb883a 	add	r5,r7,r7
10001058:	003ec706 	br	10000b78 <__alt_data_end+0xf8000b78>
1000105c:	3804d1ba 	srli	r2,r7,6
10001060:	11000e04 	addi	r4,r2,56
10001064:	210b883a 	add	r5,r4,r4
10001068:	003fbe06 	br	10000f64 <__alt_data_end+0xf8000f64>
1000106c:	84ff5d26 	beq	r16,r19,10000de4 <__alt_data_end+0xf8000de4>
10001070:	9c000217 	ldw	r16,8(r19)
10001074:	00bfff04 	movi	r2,-4
10001078:	80c00117 	ldw	r3,4(r16)
1000107c:	1886703a 	and	r3,r3,r2
10001080:	003f9706 	br	10000ee0 <__alt_data_end+0xf8000ee0>
10001084:	52800017 	ldw	r10,0(r10)
10001088:	18ffffc4 	addi	r3,r3,-1
1000108c:	50805c1e 	bne	r10,r2,10001200 <_malloc_r+0x798>
10001090:	190000cc 	andi	r4,r3,3
10001094:	50bffe04 	addi	r2,r10,-8
10001098:	203ffa1e 	bne	r4,zero,10001084 <__alt_data_end+0xf8001084>
1000109c:	98800117 	ldw	r2,4(r19)
100010a0:	0146303a 	nor	r3,zero,r5
100010a4:	1884703a 	and	r2,r3,r2
100010a8:	98800115 	stw	r2,4(r19)
100010ac:	294b883a 	add	r5,r5,r5
100010b0:	117f2e36 	bltu	r2,r5,10000d6c <__alt_data_end+0xf8000d6c>
100010b4:	283f2d26 	beq	r5,zero,10000d6c <__alt_data_end+0xf8000d6c>
100010b8:	1146703a 	and	r3,r2,r5
100010bc:	1800521e 	bne	r3,zero,10001208 <_malloc_r+0x7a0>
100010c0:	6007883a 	mov	r3,r12
100010c4:	294b883a 	add	r5,r5,r5
100010c8:	1148703a 	and	r4,r2,r5
100010cc:	18c00104 	addi	r3,r3,4
100010d0:	203ffc26 	beq	r4,zero,100010c4 <__alt_data_end+0xf80010c4>
100010d4:	003ef006 	br	10000c98 <__alt_data_end+0xf8000c98>
100010d8:	00805504 	movi	r2,340
100010dc:	10c01336 	bltu	r2,r3,1000112c <_malloc_r+0x6c4>
100010e0:	8806d3fa 	srli	r3,r17,15
100010e4:	19c01dc4 	addi	r7,r3,119
100010e8:	39cb883a 	add	r5,r7,r7
100010ec:	003ea206 	br	10000b78 <__alt_data_end+0xf8000b78>
100010f0:	00c40004 	movi	r3,4096
100010f4:	003f4d06 	br	10000e2c <__alt_data_end+0xf8000e2c>
100010f8:	00800044 	movi	r2,1
100010fc:	a0800115 	stw	r2,4(r20)
10001100:	a021883a 	mov	r16,r20
10001104:	0007883a 	mov	r3,zero
10001108:	003f7506 	br	10000ee0 <__alt_data_end+0xf8000ee0>
1000110c:	200bd0ba 	srai	r5,r4,2
10001110:	01800044 	movi	r6,1
10001114:	41000117 	ldw	r4,4(r8)
10001118:	314a983a 	sll	r5,r6,r5
1000111c:	100d883a 	mov	r6,r2
10001120:	2908b03a 	or	r4,r5,r4
10001124:	41000115 	stw	r4,4(r8)
10001128:	003f9d06 	br	10000fa0 <__alt_data_end+0xf8000fa0>
1000112c:	00815504 	movi	r2,1364
10001130:	10c01336 	bltu	r2,r3,10001180 <_malloc_r+0x718>
10001134:	8806d4ba 	srli	r3,r17,18
10001138:	19c01f04 	addi	r7,r3,124
1000113c:	39cb883a 	add	r5,r7,r7
10001140:	003e8d06 	br	10000b78 <__alt_data_end+0xf8000b78>
10001144:	ad400404 	addi	r21,r21,16
10001148:	003f1d06 	br	10000dc0 <__alt_data_end+0xf8000dc0>
1000114c:	01001504 	movi	r4,84
10001150:	20801c36 	bltu	r4,r2,100011c4 <_malloc_r+0x75c>
10001154:	3804d33a 	srli	r2,r7,12
10001158:	11001b84 	addi	r4,r2,110
1000115c:	210b883a 	add	r5,r4,r4
10001160:	003f8006 	br	10000f64 <__alt_data_end+0xf8000f64>
10001164:	3083ffcc 	andi	r2,r6,4095
10001168:	103f241e 	bne	r2,zero,10000dfc <__alt_data_end+0xf8000dfc>
1000116c:	99000217 	ldw	r4,8(r19)
10001170:	ad85883a 	add	r2,r21,r22
10001174:	10800054 	ori	r2,r2,1
10001178:	20800115 	stw	r2,4(r4)
1000117c:	003f4a06 	br	10000ea8 <__alt_data_end+0xf8000ea8>
10001180:	01403f04 	movi	r5,252
10001184:	01c01f84 	movi	r7,126
10001188:	003e7b06 	br	10000b78 <__alt_data_end+0xf8000b78>
1000118c:	00c00044 	movi	r3,1
10001190:	002b883a 	mov	r21,zero
10001194:	003f3006 	br	10000e58 <__alt_data_end+0xf8000e58>
10001198:	00840034 	movhi	r2,4096
1000119c:	109c7b04 	addi	r2,r2,29164
100011a0:	15000015 	stw	r20,0(r2)
100011a4:	003f1b06 	br	10000e14 <__alt_data_end+0xf8000e14>
100011a8:	9009883a 	mov	r4,r18
100011ac:	81400204 	addi	r5,r16,8
100011b0:	00023e00 	call	100023e0 <_free_r>
100011b4:	00840074 	movhi	r2,4097
100011b8:	10a32d04 	addi	r2,r2,-29516
100011bc:	10c00017 	ldw	r3,0(r2)
100011c0:	003f3906 	br	10000ea8 <__alt_data_end+0xf8000ea8>
100011c4:	01005504 	movi	r4,340
100011c8:	20800436 	bltu	r4,r2,100011dc <_malloc_r+0x774>
100011cc:	3804d3fa 	srli	r2,r7,15
100011d0:	11001dc4 	addi	r4,r2,119
100011d4:	210b883a 	add	r5,r4,r4
100011d8:	003f6206 	br	10000f64 <__alt_data_end+0xf8000f64>
100011dc:	01015504 	movi	r4,1364
100011e0:	20800436 	bltu	r4,r2,100011f4 <_malloc_r+0x78c>
100011e4:	3804d4ba 	srli	r2,r7,18
100011e8:	11001f04 	addi	r4,r2,124
100011ec:	210b883a 	add	r5,r4,r4
100011f0:	003f5c06 	br	10000f64 <__alt_data_end+0xf8000f64>
100011f4:	01403f04 	movi	r5,252
100011f8:	01001f84 	movi	r4,126
100011fc:	003f5906 	br	10000f64 <__alt_data_end+0xf8000f64>
10001200:	98800117 	ldw	r2,4(r19)
10001204:	003fa906 	br	100010ac <__alt_data_end+0xf80010ac>
10001208:	6007883a 	mov	r3,r12
1000120c:	003ea206 	br	10000c98 <__alt_data_end+0xf8000c98>

10001210 <memchr>:
10001210:	208000cc 	andi	r2,r4,3
10001214:	280f883a 	mov	r7,r5
10001218:	10003526 	beq	r2,zero,100012f0 <memchr+0xe0>
1000121c:	30bfffc4 	addi	r2,r6,-1
10001220:	30001b26 	beq	r6,zero,10001290 <memchr+0x80>
10001224:	21800003 	ldbu	r6,0(r4)
10001228:	28c03fcc 	andi	r3,r5,255
1000122c:	30c01a26 	beq	r6,r3,10001298 <memchr+0x88>
10001230:	180d883a 	mov	r6,r3
10001234:	00000406 	br	10001248 <memchr+0x38>
10001238:	10001526 	beq	r2,zero,10001290 <memchr+0x80>
1000123c:	20c00003 	ldbu	r3,0(r4)
10001240:	10bfffc4 	addi	r2,r2,-1
10001244:	19801426 	beq	r3,r6,10001298 <memchr+0x88>
10001248:	21000044 	addi	r4,r4,1
1000124c:	20c000cc 	andi	r3,r4,3
10001250:	183ff91e 	bne	r3,zero,10001238 <__alt_data_end+0xf8001238>
10001254:	024000c4 	movi	r9,3
10001258:	48801136 	bltu	r9,r2,100012a0 <memchr+0x90>
1000125c:	10000c26 	beq	r2,zero,10001290 <memchr+0x80>
10001260:	20c00003 	ldbu	r3,0(r4)
10001264:	29403fcc 	andi	r5,r5,255
10001268:	19400b26 	beq	r3,r5,10001298 <memchr+0x88>
1000126c:	20c00044 	addi	r3,r4,1
10001270:	2085883a 	add	r2,r4,r2
10001274:	39803fcc 	andi	r6,r7,255
10001278:	00000306 	br	10001288 <memchr+0x78>
1000127c:	18c00044 	addi	r3,r3,1
10001280:	197fffc3 	ldbu	r5,-1(r3)
10001284:	29800426 	beq	r5,r6,10001298 <memchr+0x88>
10001288:	1809883a 	mov	r4,r3
1000128c:	18bffb1e 	bne	r3,r2,1000127c <__alt_data_end+0xf800127c>
10001290:	0005883a 	mov	r2,zero
10001294:	f800283a 	ret
10001298:	2005883a 	mov	r2,r4
1000129c:	f800283a 	ret
100012a0:	28c03fcc 	andi	r3,r5,255
100012a4:	1810923a 	slli	r8,r3,8
100012a8:	02ffbff4 	movhi	r11,65279
100012ac:	02a02074 	movhi	r10,32897
100012b0:	40c6b03a 	or	r3,r8,r3
100012b4:	1810943a 	slli	r8,r3,16
100012b8:	5affbfc4 	addi	r11,r11,-257
100012bc:	52a02004 	addi	r10,r10,-32640
100012c0:	40d0b03a 	or	r8,r8,r3
100012c4:	20c00017 	ldw	r3,0(r4)
100012c8:	40c6f03a 	xor	r3,r8,r3
100012cc:	1acd883a 	add	r6,r3,r11
100012d0:	00c6303a 	nor	r3,zero,r3
100012d4:	30c6703a 	and	r3,r6,r3
100012d8:	1a86703a 	and	r3,r3,r10
100012dc:	183fdf1e 	bne	r3,zero,1000125c <__alt_data_end+0xf800125c>
100012e0:	10bfff04 	addi	r2,r2,-4
100012e4:	21000104 	addi	r4,r4,4
100012e8:	48bff636 	bltu	r9,r2,100012c4 <__alt_data_end+0xf80012c4>
100012ec:	003fdb06 	br	1000125c <__alt_data_end+0xf800125c>
100012f0:	3005883a 	mov	r2,r6
100012f4:	003fd706 	br	10001254 <__alt_data_end+0xf8001254>

100012f8 <memcpy>:
100012f8:	deffff04 	addi	sp,sp,-4
100012fc:	dc000015 	stw	r16,0(sp)
10001300:	00c003c4 	movi	r3,15
10001304:	2005883a 	mov	r2,r4
10001308:	1980432e 	bgeu	r3,r6,10001418 <memcpy+0x120>
1000130c:	2146b03a 	or	r3,r4,r5
10001310:	18c000cc 	andi	r3,r3,3
10001314:	1800421e 	bne	r3,zero,10001420 <memcpy+0x128>
10001318:	343ffc04 	addi	r16,r6,-16
1000131c:	8020d13a 	srli	r16,r16,4
10001320:	28c00104 	addi	r3,r5,4
10001324:	23400104 	addi	r13,r4,4
10001328:	801e913a 	slli	r15,r16,4
1000132c:	2b000204 	addi	r12,r5,8
10001330:	22c00204 	addi	r11,r4,8
10001334:	7bc00504 	addi	r15,r15,20
10001338:	2a800304 	addi	r10,r5,12
1000133c:	22400304 	addi	r9,r4,12
10001340:	2bdf883a 	add	r15,r5,r15
10001344:	2811883a 	mov	r8,r5
10001348:	200f883a 	mov	r7,r4
1000134c:	41000017 	ldw	r4,0(r8)
10001350:	39c00404 	addi	r7,r7,16
10001354:	18c00404 	addi	r3,r3,16
10001358:	393ffc15 	stw	r4,-16(r7)
1000135c:	1bbffc17 	ldw	r14,-16(r3)
10001360:	6b400404 	addi	r13,r13,16
10001364:	5ac00404 	addi	r11,r11,16
10001368:	6bbffc15 	stw	r14,-16(r13)
1000136c:	63800017 	ldw	r14,0(r12)
10001370:	4a400404 	addi	r9,r9,16
10001374:	42000404 	addi	r8,r8,16
10001378:	5bbffc15 	stw	r14,-16(r11)
1000137c:	53800017 	ldw	r14,0(r10)
10001380:	63000404 	addi	r12,r12,16
10001384:	52800404 	addi	r10,r10,16
10001388:	4bbffc15 	stw	r14,-16(r9)
1000138c:	1bffef1e 	bne	r3,r15,1000134c <__alt_data_end+0xf800134c>
10001390:	81c00044 	addi	r7,r16,1
10001394:	380e913a 	slli	r7,r7,4
10001398:	310003cc 	andi	r4,r6,15
1000139c:	02c000c4 	movi	r11,3
100013a0:	11c7883a 	add	r3,r2,r7
100013a4:	29cb883a 	add	r5,r5,r7
100013a8:	59001f2e 	bgeu	r11,r4,10001428 <memcpy+0x130>
100013ac:	1813883a 	mov	r9,r3
100013b0:	2811883a 	mov	r8,r5
100013b4:	200f883a 	mov	r7,r4
100013b8:	42800017 	ldw	r10,0(r8)
100013bc:	4a400104 	addi	r9,r9,4
100013c0:	39ffff04 	addi	r7,r7,-4
100013c4:	4abfff15 	stw	r10,-4(r9)
100013c8:	42000104 	addi	r8,r8,4
100013cc:	59fffa36 	bltu	r11,r7,100013b8 <__alt_data_end+0xf80013b8>
100013d0:	213fff04 	addi	r4,r4,-4
100013d4:	2008d0ba 	srli	r4,r4,2
100013d8:	318000cc 	andi	r6,r6,3
100013dc:	21000044 	addi	r4,r4,1
100013e0:	2109883a 	add	r4,r4,r4
100013e4:	2109883a 	add	r4,r4,r4
100013e8:	1907883a 	add	r3,r3,r4
100013ec:	290b883a 	add	r5,r5,r4
100013f0:	30000626 	beq	r6,zero,1000140c <memcpy+0x114>
100013f4:	198d883a 	add	r6,r3,r6
100013f8:	29c00003 	ldbu	r7,0(r5)
100013fc:	18c00044 	addi	r3,r3,1
10001400:	29400044 	addi	r5,r5,1
10001404:	19ffffc5 	stb	r7,-1(r3)
10001408:	19bffb1e 	bne	r3,r6,100013f8 <__alt_data_end+0xf80013f8>
1000140c:	dc000017 	ldw	r16,0(sp)
10001410:	dec00104 	addi	sp,sp,4
10001414:	f800283a 	ret
10001418:	2007883a 	mov	r3,r4
1000141c:	003ff406 	br	100013f0 <__alt_data_end+0xf80013f0>
10001420:	2007883a 	mov	r3,r4
10001424:	003ff306 	br	100013f4 <__alt_data_end+0xf80013f4>
10001428:	200d883a 	mov	r6,r4
1000142c:	003ff006 	br	100013f0 <__alt_data_end+0xf80013f0>

10001430 <memmove>:
10001430:	2005883a 	mov	r2,r4
10001434:	29000b2e 	bgeu	r5,r4,10001464 <memmove+0x34>
10001438:	298f883a 	add	r7,r5,r6
1000143c:	21c0092e 	bgeu	r4,r7,10001464 <memmove+0x34>
10001440:	2187883a 	add	r3,r4,r6
10001444:	198bc83a 	sub	r5,r3,r6
10001448:	30004b26 	beq	r6,zero,10001578 <memmove+0x148>
1000144c:	39ffffc4 	addi	r7,r7,-1
10001450:	39000003 	ldbu	r4,0(r7)
10001454:	18ffffc4 	addi	r3,r3,-1
10001458:	19000005 	stb	r4,0(r3)
1000145c:	197ffb1e 	bne	r3,r5,1000144c <__alt_data_end+0xf800144c>
10001460:	f800283a 	ret
10001464:	00c003c4 	movi	r3,15
10001468:	1980412e 	bgeu	r3,r6,10001570 <memmove+0x140>
1000146c:	1146b03a 	or	r3,r2,r5
10001470:	18c000cc 	andi	r3,r3,3
10001474:	1800411e 	bne	r3,zero,1000157c <memmove+0x14c>
10001478:	33fffc04 	addi	r15,r6,-16
1000147c:	781ed13a 	srli	r15,r15,4
10001480:	28c00104 	addi	r3,r5,4
10001484:	13400104 	addi	r13,r2,4
10001488:	781c913a 	slli	r14,r15,4
1000148c:	2b000204 	addi	r12,r5,8
10001490:	12c00204 	addi	r11,r2,8
10001494:	73800504 	addi	r14,r14,20
10001498:	2a800304 	addi	r10,r5,12
1000149c:	12400304 	addi	r9,r2,12
100014a0:	2b9d883a 	add	r14,r5,r14
100014a4:	2811883a 	mov	r8,r5
100014a8:	100f883a 	mov	r7,r2
100014ac:	41000017 	ldw	r4,0(r8)
100014b0:	39c00404 	addi	r7,r7,16
100014b4:	18c00404 	addi	r3,r3,16
100014b8:	393ffc15 	stw	r4,-16(r7)
100014bc:	193ffc17 	ldw	r4,-16(r3)
100014c0:	6b400404 	addi	r13,r13,16
100014c4:	5ac00404 	addi	r11,r11,16
100014c8:	693ffc15 	stw	r4,-16(r13)
100014cc:	61000017 	ldw	r4,0(r12)
100014d0:	4a400404 	addi	r9,r9,16
100014d4:	42000404 	addi	r8,r8,16
100014d8:	593ffc15 	stw	r4,-16(r11)
100014dc:	51000017 	ldw	r4,0(r10)
100014e0:	63000404 	addi	r12,r12,16
100014e4:	52800404 	addi	r10,r10,16
100014e8:	493ffc15 	stw	r4,-16(r9)
100014ec:	1bbfef1e 	bne	r3,r14,100014ac <__alt_data_end+0xf80014ac>
100014f0:	79000044 	addi	r4,r15,1
100014f4:	2008913a 	slli	r4,r4,4
100014f8:	328003cc 	andi	r10,r6,15
100014fc:	02c000c4 	movi	r11,3
10001500:	1107883a 	add	r3,r2,r4
10001504:	290b883a 	add	r5,r5,r4
10001508:	5a801e2e 	bgeu	r11,r10,10001584 <memmove+0x154>
1000150c:	1813883a 	mov	r9,r3
10001510:	2811883a 	mov	r8,r5
10001514:	500f883a 	mov	r7,r10
10001518:	41000017 	ldw	r4,0(r8)
1000151c:	4a400104 	addi	r9,r9,4
10001520:	39ffff04 	addi	r7,r7,-4
10001524:	493fff15 	stw	r4,-4(r9)
10001528:	42000104 	addi	r8,r8,4
1000152c:	59fffa36 	bltu	r11,r7,10001518 <__alt_data_end+0xf8001518>
10001530:	513fff04 	addi	r4,r10,-4
10001534:	2008d0ba 	srli	r4,r4,2
10001538:	318000cc 	andi	r6,r6,3
1000153c:	21000044 	addi	r4,r4,1
10001540:	2109883a 	add	r4,r4,r4
10001544:	2109883a 	add	r4,r4,r4
10001548:	1907883a 	add	r3,r3,r4
1000154c:	290b883a 	add	r5,r5,r4
10001550:	30000926 	beq	r6,zero,10001578 <memmove+0x148>
10001554:	198d883a 	add	r6,r3,r6
10001558:	29c00003 	ldbu	r7,0(r5)
1000155c:	18c00044 	addi	r3,r3,1
10001560:	29400044 	addi	r5,r5,1
10001564:	19ffffc5 	stb	r7,-1(r3)
10001568:	19bffb1e 	bne	r3,r6,10001558 <__alt_data_end+0xf8001558>
1000156c:	f800283a 	ret
10001570:	1007883a 	mov	r3,r2
10001574:	003ff606 	br	10001550 <__alt_data_end+0xf8001550>
10001578:	f800283a 	ret
1000157c:	1007883a 	mov	r3,r2
10001580:	003ff406 	br	10001554 <__alt_data_end+0xf8001554>
10001584:	500d883a 	mov	r6,r10
10001588:	003ff106 	br	10001550 <__alt_data_end+0xf8001550>

1000158c <_realloc_r>:
1000158c:	defff604 	addi	sp,sp,-40
10001590:	dcc00315 	stw	r19,12(sp)
10001594:	dc400115 	stw	r17,4(sp)
10001598:	dfc00915 	stw	ra,36(sp)
1000159c:	df000815 	stw	fp,32(sp)
100015a0:	ddc00715 	stw	r23,28(sp)
100015a4:	dd800615 	stw	r22,24(sp)
100015a8:	dd400515 	stw	r21,20(sp)
100015ac:	dd000415 	stw	r20,16(sp)
100015b0:	dc800215 	stw	r18,8(sp)
100015b4:	dc000015 	stw	r16,0(sp)
100015b8:	2827883a 	mov	r19,r5
100015bc:	3023883a 	mov	r17,r6
100015c0:	2800bf26 	beq	r5,zero,100018c0 <_realloc_r+0x334>
100015c4:	2025883a 	mov	r18,r4
100015c8:	00035880 	call	10003588 <__malloc_lock>
100015cc:	98ffff17 	ldw	r3,-4(r19)
100015d0:	01bfff04 	movi	r6,-4
100015d4:	890002c4 	addi	r4,r17,11
100015d8:	01c00584 	movi	r7,22
100015dc:	9d7ffe04 	addi	r21,r19,-8
100015e0:	19a0703a 	and	r16,r3,r6
100015e4:	39003f2e 	bgeu	r7,r4,100016e4 <_realloc_r+0x158>
100015e8:	053ffe04 	movi	r20,-8
100015ec:	2528703a 	and	r20,r4,r20
100015f0:	a00f883a 	mov	r7,r20
100015f4:	a0008216 	blt	r20,zero,10001800 <_realloc_r+0x274>
100015f8:	a4408136 	bltu	r20,r17,10001800 <_realloc_r+0x274>
100015fc:	81c03c0e 	bge	r16,r7,100016f0 <_realloc_r+0x164>
10001600:	07040034 	movhi	fp,4096
10001604:	e716f504 	addi	fp,fp,23508
10001608:	e1000217 	ldw	r4,8(fp)
1000160c:	ac05883a 	add	r2,r21,r16
10001610:	2080bf26 	beq	r4,r2,10001910 <_realloc_r+0x384>
10001614:	11000117 	ldw	r4,4(r2)
10001618:	023fff84 	movi	r8,-2
1000161c:	2210703a 	and	r8,r4,r8
10001620:	1211883a 	add	r8,r2,r8
10001624:	41400117 	ldw	r5,4(r8)
10001628:	2940004c 	andi	r5,r5,1
1000162c:	28004a1e 	bne	r5,zero,10001758 <_realloc_r+0x1cc>
10001630:	017fff04 	movi	r5,-4
10001634:	2148703a 	and	r4,r4,r5
10001638:	2409883a 	add	r4,r4,r16
1000163c:	21c0ad0e 	bge	r4,r7,100018f4 <_realloc_r+0x368>
10001640:	18c0004c 	andi	r3,r3,1
10001644:	18007f1e 	bne	r3,zero,10001844 <_realloc_r+0x2b8>
10001648:	9dfffe17 	ldw	r23,-8(r19)
1000164c:	adefc83a 	sub	r23,r21,r23
10001650:	bd800117 	ldw	r22,4(r23)
10001654:	b14a703a 	and	r5,r22,r5
10001658:	216d883a 	add	r22,r4,r5
1000165c:	b1c04516 	blt	r22,r7,10001774 <_realloc_r+0x1e8>
10001660:	10c00317 	ldw	r3,12(r2)
10001664:	10800217 	ldw	r2,8(r2)
10001668:	81bfff04 	addi	r6,r16,-4
1000166c:	bc400204 	addi	r17,r23,8
10001670:	10c00315 	stw	r3,12(r2)
10001674:	18800215 	stw	r2,8(r3)
10001678:	b9400217 	ldw	r5,8(r23)
1000167c:	b8c00317 	ldw	r3,12(r23)
10001680:	00800904 	movi	r2,36
10001684:	28c00315 	stw	r3,12(r5)
10001688:	19400215 	stw	r5,8(r3)
1000168c:	1180ef36 	bltu	r2,r6,10001a4c <_realloc_r+0x4c0>
10001690:	008004c4 	movi	r2,19
10001694:	1180da2e 	bgeu	r2,r6,10001a00 <_realloc_r+0x474>
10001698:	98800017 	ldw	r2,0(r19)
1000169c:	b8800215 	stw	r2,8(r23)
100016a0:	98800117 	ldw	r2,4(r19)
100016a4:	b8800315 	stw	r2,12(r23)
100016a8:	008006c4 	movi	r2,27
100016ac:	1180fc2e 	bgeu	r2,r6,10001aa0 <_realloc_r+0x514>
100016b0:	98800217 	ldw	r2,8(r19)
100016b4:	b8800415 	stw	r2,16(r23)
100016b8:	98800317 	ldw	r2,12(r19)
100016bc:	b8800515 	stw	r2,20(r23)
100016c0:	00800904 	movi	r2,36
100016c4:	3080421e 	bne	r6,r2,100017d0 <_realloc_r+0x244>
100016c8:	98800417 	ldw	r2,16(r19)
100016cc:	9cc00604 	addi	r19,r19,24
100016d0:	b8c00804 	addi	r3,r23,32
100016d4:	b8800615 	stw	r2,24(r23)
100016d8:	98bfff17 	ldw	r2,-4(r19)
100016dc:	b8800715 	stw	r2,28(r23)
100016e0:	00003d06 	br	100017d8 <_realloc_r+0x24c>
100016e4:	01c00404 	movi	r7,16
100016e8:	3829883a 	mov	r20,r7
100016ec:	003fc206 	br	100015f8 <__alt_data_end+0xf80015f8>
100016f0:	9823883a 	mov	r17,r19
100016f4:	850fc83a 	sub	r7,r16,r20
100016f8:	008003c4 	movi	r2,15
100016fc:	18c0004c 	andi	r3,r3,1
10001700:	11c04336 	bltu	r2,r7,10001810 <_realloc_r+0x284>
10001704:	1c06b03a 	or	r3,r3,r16
10001708:	a8c00115 	stw	r3,4(r21)
1000170c:	ac21883a 	add	r16,r21,r16
10001710:	80c00117 	ldw	r3,4(r16)
10001714:	18c00054 	ori	r3,r3,1
10001718:	80c00115 	stw	r3,4(r16)
1000171c:	9009883a 	mov	r4,r18
10001720:	00035a80 	call	100035a8 <__malloc_unlock>
10001724:	8805883a 	mov	r2,r17
10001728:	dfc00917 	ldw	ra,36(sp)
1000172c:	df000817 	ldw	fp,32(sp)
10001730:	ddc00717 	ldw	r23,28(sp)
10001734:	dd800617 	ldw	r22,24(sp)
10001738:	dd400517 	ldw	r21,20(sp)
1000173c:	dd000417 	ldw	r20,16(sp)
10001740:	dcc00317 	ldw	r19,12(sp)
10001744:	dc800217 	ldw	r18,8(sp)
10001748:	dc400117 	ldw	r17,4(sp)
1000174c:	dc000017 	ldw	r16,0(sp)
10001750:	dec00a04 	addi	sp,sp,40
10001754:	f800283a 	ret
10001758:	18c0004c 	andi	r3,r3,1
1000175c:	1800391e 	bne	r3,zero,10001844 <_realloc_r+0x2b8>
10001760:	9dfffe17 	ldw	r23,-8(r19)
10001764:	00bfff04 	movi	r2,-4
10001768:	adefc83a 	sub	r23,r21,r23
1000176c:	b9400117 	ldw	r5,4(r23)
10001770:	288a703a 	and	r5,r5,r2
10001774:	2c2d883a 	add	r22,r5,r16
10001778:	b1c03216 	blt	r22,r7,10001844 <_realloc_r+0x2b8>
1000177c:	b8800317 	ldw	r2,12(r23)
10001780:	b8c00217 	ldw	r3,8(r23)
10001784:	81bfff04 	addi	r6,r16,-4
10001788:	01000904 	movi	r4,36
1000178c:	18800315 	stw	r2,12(r3)
10001790:	10c00215 	stw	r3,8(r2)
10001794:	bc400204 	addi	r17,r23,8
10001798:	2180ac36 	bltu	r4,r6,10001a4c <_realloc_r+0x4c0>
1000179c:	008004c4 	movi	r2,19
100017a0:	1180972e 	bgeu	r2,r6,10001a00 <_realloc_r+0x474>
100017a4:	98800017 	ldw	r2,0(r19)
100017a8:	b8800215 	stw	r2,8(r23)
100017ac:	98800117 	ldw	r2,4(r19)
100017b0:	b8800315 	stw	r2,12(r23)
100017b4:	008006c4 	movi	r2,27
100017b8:	1180b92e 	bgeu	r2,r6,10001aa0 <_realloc_r+0x514>
100017bc:	98800217 	ldw	r2,8(r19)
100017c0:	b8800415 	stw	r2,16(r23)
100017c4:	98800317 	ldw	r2,12(r19)
100017c8:	b8800515 	stw	r2,20(r23)
100017cc:	313fbe26 	beq	r6,r4,100016c8 <__alt_data_end+0xf80016c8>
100017d0:	b8c00604 	addi	r3,r23,24
100017d4:	9cc00404 	addi	r19,r19,16
100017d8:	98800017 	ldw	r2,0(r19)
100017dc:	b021883a 	mov	r16,r22
100017e0:	b82b883a 	mov	r21,r23
100017e4:	18800015 	stw	r2,0(r3)
100017e8:	98800117 	ldw	r2,4(r19)
100017ec:	18800115 	stw	r2,4(r3)
100017f0:	98800217 	ldw	r2,8(r19)
100017f4:	18800215 	stw	r2,8(r3)
100017f8:	b8c00117 	ldw	r3,4(r23)
100017fc:	003fbd06 	br	100016f4 <__alt_data_end+0xf80016f4>
10001800:	00800304 	movi	r2,12
10001804:	90800015 	stw	r2,0(r18)
10001808:	0005883a 	mov	r2,zero
1000180c:	003fc606 	br	10001728 <__alt_data_end+0xf8001728>
10001810:	1d06b03a 	or	r3,r3,r20
10001814:	ad0b883a 	add	r5,r21,r20
10001818:	a8c00115 	stw	r3,4(r21)
1000181c:	38800054 	ori	r2,r7,1
10001820:	28800115 	stw	r2,4(r5)
10001824:	29cf883a 	add	r7,r5,r7
10001828:	38800117 	ldw	r2,4(r7)
1000182c:	9009883a 	mov	r4,r18
10001830:	29400204 	addi	r5,r5,8
10001834:	10800054 	ori	r2,r2,1
10001838:	38800115 	stw	r2,4(r7)
1000183c:	00023e00 	call	100023e0 <_free_r>
10001840:	003fb606 	br	1000171c <__alt_data_end+0xf800171c>
10001844:	880b883a 	mov	r5,r17
10001848:	9009883a 	mov	r4,r18
1000184c:	0000a680 	call	10000a68 <_malloc_r>
10001850:	1023883a 	mov	r17,r2
10001854:	1000aa26 	beq	r2,zero,10001b00 <_realloc_r+0x574>
10001858:	98ffff17 	ldw	r3,-4(r19)
1000185c:	113ffe04 	addi	r4,r2,-8
10001860:	00bfff84 	movi	r2,-2
10001864:	1884703a 	and	r2,r3,r2
10001868:	a885883a 	add	r2,r21,r2
1000186c:	20808626 	beq	r4,r2,10001a88 <_realloc_r+0x4fc>
10001870:	81bfff04 	addi	r6,r16,-4
10001874:	00800904 	movi	r2,36
10001878:	11807036 	bltu	r2,r6,10001a3c <_realloc_r+0x4b0>
1000187c:	00c004c4 	movi	r3,19
10001880:	19805636 	bltu	r3,r6,100019dc <_realloc_r+0x450>
10001884:	8805883a 	mov	r2,r17
10001888:	9807883a 	mov	r3,r19
1000188c:	19000017 	ldw	r4,0(r3)
10001890:	11000015 	stw	r4,0(r2)
10001894:	19000117 	ldw	r4,4(r3)
10001898:	11000115 	stw	r4,4(r2)
1000189c:	18c00217 	ldw	r3,8(r3)
100018a0:	10c00215 	stw	r3,8(r2)
100018a4:	980b883a 	mov	r5,r19
100018a8:	9009883a 	mov	r4,r18
100018ac:	00023e00 	call	100023e0 <_free_r>
100018b0:	9009883a 	mov	r4,r18
100018b4:	00035a80 	call	100035a8 <__malloc_unlock>
100018b8:	8805883a 	mov	r2,r17
100018bc:	003f9a06 	br	10001728 <__alt_data_end+0xf8001728>
100018c0:	300b883a 	mov	r5,r6
100018c4:	dfc00917 	ldw	ra,36(sp)
100018c8:	df000817 	ldw	fp,32(sp)
100018cc:	ddc00717 	ldw	r23,28(sp)
100018d0:	dd800617 	ldw	r22,24(sp)
100018d4:	dd400517 	ldw	r21,20(sp)
100018d8:	dd000417 	ldw	r20,16(sp)
100018dc:	dcc00317 	ldw	r19,12(sp)
100018e0:	dc800217 	ldw	r18,8(sp)
100018e4:	dc400117 	ldw	r17,4(sp)
100018e8:	dc000017 	ldw	r16,0(sp)
100018ec:	dec00a04 	addi	sp,sp,40
100018f0:	0000a681 	jmpi	10000a68 <_malloc_r>
100018f4:	11400317 	ldw	r5,12(r2)
100018f8:	10800217 	ldw	r2,8(r2)
100018fc:	9823883a 	mov	r17,r19
10001900:	2021883a 	mov	r16,r4
10001904:	11400315 	stw	r5,12(r2)
10001908:	28800215 	stw	r2,8(r5)
1000190c:	003f7906 	br	100016f4 <__alt_data_end+0xf80016f4>
10001910:	21000117 	ldw	r4,4(r4)
10001914:	00bfff04 	movi	r2,-4
10001918:	a1800404 	addi	r6,r20,16
1000191c:	2088703a 	and	r4,r4,r2
10001920:	2409883a 	add	r4,r4,r16
10001924:	2180380e 	bge	r4,r6,10001a08 <_realloc_r+0x47c>
10001928:	18c0004c 	andi	r3,r3,1
1000192c:	183fc51e 	bne	r3,zero,10001844 <__alt_data_end+0xf8001844>
10001930:	9dfffe17 	ldw	r23,-8(r19)
10001934:	adefc83a 	sub	r23,r21,r23
10001938:	b9400117 	ldw	r5,4(r23)
1000193c:	288a703a 	and	r5,r5,r2
10001940:	216d883a 	add	r22,r4,r5
10001944:	b1bf8b16 	blt	r22,r6,10001774 <__alt_data_end+0xf8001774>
10001948:	b8800317 	ldw	r2,12(r23)
1000194c:	b8c00217 	ldw	r3,8(r23)
10001950:	81bfff04 	addi	r6,r16,-4
10001954:	01000904 	movi	r4,36
10001958:	18800315 	stw	r2,12(r3)
1000195c:	10c00215 	stw	r3,8(r2)
10001960:	bc400204 	addi	r17,r23,8
10001964:	21805a36 	bltu	r4,r6,10001ad0 <_realloc_r+0x544>
10001968:	008004c4 	movi	r2,19
1000196c:	1180562e 	bgeu	r2,r6,10001ac8 <_realloc_r+0x53c>
10001970:	98800017 	ldw	r2,0(r19)
10001974:	b8800215 	stw	r2,8(r23)
10001978:	98800117 	ldw	r2,4(r19)
1000197c:	b8800315 	stw	r2,12(r23)
10001980:	008006c4 	movi	r2,27
10001984:	11805636 	bltu	r2,r6,10001ae0 <_realloc_r+0x554>
10001988:	b8800404 	addi	r2,r23,16
1000198c:	9cc00204 	addi	r19,r19,8
10001990:	98c00017 	ldw	r3,0(r19)
10001994:	10c00015 	stw	r3,0(r2)
10001998:	98c00117 	ldw	r3,4(r19)
1000199c:	10c00115 	stw	r3,4(r2)
100019a0:	98c00217 	ldw	r3,8(r19)
100019a4:	10c00215 	stw	r3,8(r2)
100019a8:	bd07883a 	add	r3,r23,r20
100019ac:	b505c83a 	sub	r2,r22,r20
100019b0:	e0c00215 	stw	r3,8(fp)
100019b4:	10800054 	ori	r2,r2,1
100019b8:	18800115 	stw	r2,4(r3)
100019bc:	b8800117 	ldw	r2,4(r23)
100019c0:	9009883a 	mov	r4,r18
100019c4:	1080004c 	andi	r2,r2,1
100019c8:	a0a8b03a 	or	r20,r20,r2
100019cc:	bd000115 	stw	r20,4(r23)
100019d0:	00035a80 	call	100035a8 <__malloc_unlock>
100019d4:	8805883a 	mov	r2,r17
100019d8:	003f5306 	br	10001728 <__alt_data_end+0xf8001728>
100019dc:	98c00017 	ldw	r3,0(r19)
100019e0:	88c00015 	stw	r3,0(r17)
100019e4:	98c00117 	ldw	r3,4(r19)
100019e8:	88c00115 	stw	r3,4(r17)
100019ec:	00c006c4 	movi	r3,27
100019f0:	19801d36 	bltu	r3,r6,10001a68 <_realloc_r+0x4dc>
100019f4:	88800204 	addi	r2,r17,8
100019f8:	98c00204 	addi	r3,r19,8
100019fc:	003fa306 	br	1000188c <__alt_data_end+0xf800188c>
10001a00:	8807883a 	mov	r3,r17
10001a04:	003f7406 	br	100017d8 <__alt_data_end+0xf80017d8>
10001a08:	ad2b883a 	add	r21,r21,r20
10001a0c:	2505c83a 	sub	r2,r4,r20
10001a10:	e5400215 	stw	r21,8(fp)
10001a14:	10800054 	ori	r2,r2,1
10001a18:	a8800115 	stw	r2,4(r21)
10001a1c:	98bfff17 	ldw	r2,-4(r19)
10001a20:	9009883a 	mov	r4,r18
10001a24:	1080004c 	andi	r2,r2,1
10001a28:	a0a8b03a 	or	r20,r20,r2
10001a2c:	9d3fff15 	stw	r20,-4(r19)
10001a30:	00035a80 	call	100035a8 <__malloc_unlock>
10001a34:	9805883a 	mov	r2,r19
10001a38:	003f3b06 	br	10001728 <__alt_data_end+0xf8001728>
10001a3c:	8809883a 	mov	r4,r17
10001a40:	980b883a 	mov	r5,r19
10001a44:	00014300 	call	10001430 <memmove>
10001a48:	003f9606 	br	100018a4 <__alt_data_end+0xf80018a4>
10001a4c:	8809883a 	mov	r4,r17
10001a50:	980b883a 	mov	r5,r19
10001a54:	00014300 	call	10001430 <memmove>
10001a58:	b8c00117 	ldw	r3,4(r23)
10001a5c:	b021883a 	mov	r16,r22
10001a60:	b82b883a 	mov	r21,r23
10001a64:	003f2306 	br	100016f4 <__alt_data_end+0xf80016f4>
10001a68:	98c00217 	ldw	r3,8(r19)
10001a6c:	88c00215 	stw	r3,8(r17)
10001a70:	98c00317 	ldw	r3,12(r19)
10001a74:	88c00315 	stw	r3,12(r17)
10001a78:	30800c26 	beq	r6,r2,10001aac <_realloc_r+0x520>
10001a7c:	88800404 	addi	r2,r17,16
10001a80:	98c00404 	addi	r3,r19,16
10001a84:	003f8106 	br	1000188c <__alt_data_end+0xf800188c>
10001a88:	893fff17 	ldw	r4,-4(r17)
10001a8c:	00bfff04 	movi	r2,-4
10001a90:	9823883a 	mov	r17,r19
10001a94:	2084703a 	and	r2,r4,r2
10001a98:	80a1883a 	add	r16,r16,r2
10001a9c:	003f1506 	br	100016f4 <__alt_data_end+0xf80016f4>
10001aa0:	b8c00404 	addi	r3,r23,16
10001aa4:	9cc00204 	addi	r19,r19,8
10001aa8:	003f4b06 	br	100017d8 <__alt_data_end+0xf80017d8>
10001aac:	99000417 	ldw	r4,16(r19)
10001ab0:	88800604 	addi	r2,r17,24
10001ab4:	98c00604 	addi	r3,r19,24
10001ab8:	89000415 	stw	r4,16(r17)
10001abc:	99000517 	ldw	r4,20(r19)
10001ac0:	89000515 	stw	r4,20(r17)
10001ac4:	003f7106 	br	1000188c <__alt_data_end+0xf800188c>
10001ac8:	8805883a 	mov	r2,r17
10001acc:	003fb006 	br	10001990 <__alt_data_end+0xf8001990>
10001ad0:	8809883a 	mov	r4,r17
10001ad4:	980b883a 	mov	r5,r19
10001ad8:	00014300 	call	10001430 <memmove>
10001adc:	003fb206 	br	100019a8 <__alt_data_end+0xf80019a8>
10001ae0:	98800217 	ldw	r2,8(r19)
10001ae4:	b8800415 	stw	r2,16(r23)
10001ae8:	98800317 	ldw	r2,12(r19)
10001aec:	b8800515 	stw	r2,20(r23)
10001af0:	31000726 	beq	r6,r4,10001b10 <_realloc_r+0x584>
10001af4:	b8800604 	addi	r2,r23,24
10001af8:	9cc00404 	addi	r19,r19,16
10001afc:	003fa406 	br	10001990 <__alt_data_end+0xf8001990>
10001b00:	9009883a 	mov	r4,r18
10001b04:	00035a80 	call	100035a8 <__malloc_unlock>
10001b08:	0005883a 	mov	r2,zero
10001b0c:	003f0606 	br	10001728 <__alt_data_end+0xf8001728>
10001b10:	98c00417 	ldw	r3,16(r19)
10001b14:	9cc00604 	addi	r19,r19,24
10001b18:	b8800804 	addi	r2,r23,32
10001b1c:	b8c00615 	stw	r3,24(r23)
10001b20:	98ffff17 	ldw	r3,-4(r19)
10001b24:	b8c00715 	stw	r3,28(r23)
10001b28:	003f9906 	br	10001990 <__alt_data_end+0xf8001990>

10001b2c <_sbrk_r>:
10001b2c:	defffd04 	addi	sp,sp,-12
10001b30:	dc000015 	stw	r16,0(sp)
10001b34:	04040074 	movhi	r16,4097
10001b38:	dc400115 	stw	r17,4(sp)
10001b3c:	84232504 	addi	r16,r16,-29548
10001b40:	2023883a 	mov	r17,r4
10001b44:	2809883a 	mov	r4,r5
10001b48:	dfc00215 	stw	ra,8(sp)
10001b4c:	80000015 	stw	zero,0(r16)
10001b50:	000379c0 	call	1000379c <sbrk>
10001b54:	00ffffc4 	movi	r3,-1
10001b58:	10c00526 	beq	r2,r3,10001b70 <_sbrk_r+0x44>
10001b5c:	dfc00217 	ldw	ra,8(sp)
10001b60:	dc400117 	ldw	r17,4(sp)
10001b64:	dc000017 	ldw	r16,0(sp)
10001b68:	dec00304 	addi	sp,sp,12
10001b6c:	f800283a 	ret
10001b70:	80c00017 	ldw	r3,0(r16)
10001b74:	183ff926 	beq	r3,zero,10001b5c <__alt_data_end+0xf8001b5c>
10001b78:	88c00015 	stw	r3,0(r17)
10001b7c:	003ff706 	br	10001b5c <__alt_data_end+0xf8001b5c>

10001b80 <__swsetup_r>:
10001b80:	00840034 	movhi	r2,4096
10001b84:	defffd04 	addi	sp,sp,-12
10001b88:	109c7a04 	addi	r2,r2,29160
10001b8c:	dc400115 	stw	r17,4(sp)
10001b90:	2023883a 	mov	r17,r4
10001b94:	11000017 	ldw	r4,0(r2)
10001b98:	dc000015 	stw	r16,0(sp)
10001b9c:	dfc00215 	stw	ra,8(sp)
10001ba0:	2821883a 	mov	r16,r5
10001ba4:	20000226 	beq	r4,zero,10001bb0 <__swsetup_r+0x30>
10001ba8:	20c00e17 	ldw	r3,56(r4)
10001bac:	18002e26 	beq	r3,zero,10001c68 <__swsetup_r+0xe8>
10001bb0:	8080030b 	ldhu	r2,12(r16)
10001bb4:	10c0020c 	andi	r3,r2,8
10001bb8:	100d883a 	mov	r6,r2
10001bbc:	18000f26 	beq	r3,zero,10001bfc <__swsetup_r+0x7c>
10001bc0:	80c00417 	ldw	r3,16(r16)
10001bc4:	18001526 	beq	r3,zero,10001c1c <__swsetup_r+0x9c>
10001bc8:	1100004c 	andi	r4,r2,1
10001bcc:	20001c1e 	bne	r4,zero,10001c40 <__swsetup_r+0xc0>
10001bd0:	1080008c 	andi	r2,r2,2
10001bd4:	1000261e 	bne	r2,zero,10001c70 <__swsetup_r+0xf0>
10001bd8:	80800517 	ldw	r2,20(r16)
10001bdc:	80800215 	stw	r2,8(r16)
10001be0:	18001c26 	beq	r3,zero,10001c54 <__swsetup_r+0xd4>
10001be4:	0005883a 	mov	r2,zero
10001be8:	dfc00217 	ldw	ra,8(sp)
10001bec:	dc400117 	ldw	r17,4(sp)
10001bf0:	dc000017 	ldw	r16,0(sp)
10001bf4:	dec00304 	addi	sp,sp,12
10001bf8:	f800283a 	ret
10001bfc:	3080040c 	andi	r2,r6,16
10001c00:	10001726 	beq	r2,zero,10001c60 <__swsetup_r+0xe0>
10001c04:	3080010c 	andi	r2,r6,4
10001c08:	10001b1e 	bne	r2,zero,10001c78 <__swsetup_r+0xf8>
10001c0c:	80c00417 	ldw	r3,16(r16)
10001c10:	30800214 	ori	r2,r6,8
10001c14:	8080030d 	sth	r2,12(r16)
10001c18:	183feb1e 	bne	r3,zero,10001bc8 <__alt_data_end+0xf8001bc8>
10001c1c:	1140a00c 	andi	r5,r2,640
10001c20:	01008004 	movi	r4,512
10001c24:	293fe826 	beq	r5,r4,10001bc8 <__alt_data_end+0xf8001bc8>
10001c28:	8809883a 	mov	r4,r17
10001c2c:	800b883a 	mov	r5,r16
10001c30:	00028400 	call	10002840 <__smakebuf_r>
10001c34:	8080030b 	ldhu	r2,12(r16)
10001c38:	80c00417 	ldw	r3,16(r16)
10001c3c:	003fe206 	br	10001bc8 <__alt_data_end+0xf8001bc8>
10001c40:	80800517 	ldw	r2,20(r16)
10001c44:	80000215 	stw	zero,8(r16)
10001c48:	0085c83a 	sub	r2,zero,r2
10001c4c:	80800615 	stw	r2,24(r16)
10001c50:	183fe41e 	bne	r3,zero,10001be4 <__alt_data_end+0xf8001be4>
10001c54:	8080030b 	ldhu	r2,12(r16)
10001c58:	1080200c 	andi	r2,r2,128
10001c5c:	103fe226 	beq	r2,zero,10001be8 <__alt_data_end+0xf8001be8>
10001c60:	00bfffc4 	movi	r2,-1
10001c64:	003fe006 	br	10001be8 <__alt_data_end+0xf8001be8>
10001c68:	000226c0 	call	1000226c <__sinit>
10001c6c:	003fd006 	br	10001bb0 <__alt_data_end+0xf8001bb0>
10001c70:	0005883a 	mov	r2,zero
10001c74:	003fd906 	br	10001bdc <__alt_data_end+0xf8001bdc>
10001c78:	81400c17 	ldw	r5,48(r16)
10001c7c:	28000626 	beq	r5,zero,10001c98 <__swsetup_r+0x118>
10001c80:	80801004 	addi	r2,r16,64
10001c84:	28800326 	beq	r5,r2,10001c94 <__swsetup_r+0x114>
10001c88:	8809883a 	mov	r4,r17
10001c8c:	00023e00 	call	100023e0 <_free_r>
10001c90:	8180030b 	ldhu	r6,12(r16)
10001c94:	80000c15 	stw	zero,48(r16)
10001c98:	80c00417 	ldw	r3,16(r16)
10001c9c:	00bff6c4 	movi	r2,-37
10001ca0:	118c703a 	and	r6,r2,r6
10001ca4:	80000115 	stw	zero,4(r16)
10001ca8:	80c00015 	stw	r3,0(r16)
10001cac:	003fd806 	br	10001c10 <__alt_data_end+0xf8001c10>

10001cb0 <_fflush_r>:
10001cb0:	defffb04 	addi	sp,sp,-20
10001cb4:	dcc00315 	stw	r19,12(sp)
10001cb8:	dc000015 	stw	r16,0(sp)
10001cbc:	dfc00415 	stw	ra,16(sp)
10001cc0:	dc800215 	stw	r18,8(sp)
10001cc4:	dc400115 	stw	r17,4(sp)
10001cc8:	2027883a 	mov	r19,r4
10001ccc:	2821883a 	mov	r16,r5
10001cd0:	20000226 	beq	r4,zero,10001cdc <_fflush_r+0x2c>
10001cd4:	20800e17 	ldw	r2,56(r4)
10001cd8:	10005326 	beq	r2,zero,10001e28 <_fflush_r+0x178>
10001cdc:	8080030b 	ldhu	r2,12(r16)
10001ce0:	10ffffcc 	andi	r3,r2,65535
10001ce4:	18e0001c 	xori	r3,r3,32768
10001ce8:	18e00004 	addi	r3,r3,-32768
10001cec:	18002c26 	beq	r3,zero,10001da0 <_fflush_r+0xf0>
10001cf0:	10c0020c 	andi	r3,r2,8
10001cf4:	1800321e 	bne	r3,zero,10001dc0 <_fflush_r+0x110>
10001cf8:	80c00117 	ldw	r3,4(r16)
10001cfc:	10820014 	ori	r2,r2,2048
10001d00:	8080030d 	sth	r2,12(r16)
10001d04:	00c0570e 	bge	zero,r3,10001e64 <_fflush_r+0x1b4>
10001d08:	82000a17 	ldw	r8,40(r16)
10001d0c:	40002426 	beq	r8,zero,10001da0 <_fflush_r+0xf0>
10001d10:	9c400017 	ldw	r17,0(r19)
10001d14:	10c4000c 	andi	r3,r2,4096
10001d18:	98000015 	stw	zero,0(r19)
10001d1c:	18004626 	beq	r3,zero,10001e38 <_fflush_r+0x188>
10001d20:	81801417 	ldw	r6,80(r16)
10001d24:	10c0010c 	andi	r3,r2,4
10001d28:	18000626 	beq	r3,zero,10001d44 <_fflush_r+0x94>
10001d2c:	80c00117 	ldw	r3,4(r16)
10001d30:	80800c17 	ldw	r2,48(r16)
10001d34:	30cdc83a 	sub	r6,r6,r3
10001d38:	10000226 	beq	r2,zero,10001d44 <_fflush_r+0x94>
10001d3c:	80800f17 	ldw	r2,60(r16)
10001d40:	308dc83a 	sub	r6,r6,r2
10001d44:	81400717 	ldw	r5,28(r16)
10001d48:	9809883a 	mov	r4,r19
10001d4c:	000f883a 	mov	r7,zero
10001d50:	403ee83a 	callr	r8
10001d54:	00ffffc4 	movi	r3,-1
10001d58:	10c04526 	beq	r2,r3,10001e70 <_fflush_r+0x1c0>
10001d5c:	80c0030b 	ldhu	r3,12(r16)
10001d60:	81000417 	ldw	r4,16(r16)
10001d64:	80000115 	stw	zero,4(r16)
10001d68:	197dffcc 	andi	r5,r3,63487
10001d6c:	8140030d 	sth	r5,12(r16)
10001d70:	81000015 	stw	r4,0(r16)
10001d74:	18c4000c 	andi	r3,r3,4096
10001d78:	18000126 	beq	r3,zero,10001d80 <_fflush_r+0xd0>
10001d7c:	80801415 	stw	r2,80(r16)
10001d80:	81400c17 	ldw	r5,48(r16)
10001d84:	9c400015 	stw	r17,0(r19)
10001d88:	28000526 	beq	r5,zero,10001da0 <_fflush_r+0xf0>
10001d8c:	80801004 	addi	r2,r16,64
10001d90:	28800226 	beq	r5,r2,10001d9c <_fflush_r+0xec>
10001d94:	9809883a 	mov	r4,r19
10001d98:	00023e00 	call	100023e0 <_free_r>
10001d9c:	80000c15 	stw	zero,48(r16)
10001da0:	0005883a 	mov	r2,zero
10001da4:	dfc00417 	ldw	ra,16(sp)
10001da8:	dcc00317 	ldw	r19,12(sp)
10001dac:	dc800217 	ldw	r18,8(sp)
10001db0:	dc400117 	ldw	r17,4(sp)
10001db4:	dc000017 	ldw	r16,0(sp)
10001db8:	dec00504 	addi	sp,sp,20
10001dbc:	f800283a 	ret
10001dc0:	84800417 	ldw	r18,16(r16)
10001dc4:	903ff626 	beq	r18,zero,10001da0 <__alt_data_end+0xf8001da0>
10001dc8:	84400017 	ldw	r17,0(r16)
10001dcc:	108000cc 	andi	r2,r2,3
10001dd0:	84800015 	stw	r18,0(r16)
10001dd4:	8ca3c83a 	sub	r17,r17,r18
10001dd8:	10001526 	beq	r2,zero,10001e30 <_fflush_r+0x180>
10001ddc:	0005883a 	mov	r2,zero
10001de0:	80800215 	stw	r2,8(r16)
10001de4:	04400316 	blt	zero,r17,10001df4 <_fflush_r+0x144>
10001de8:	003fed06 	br	10001da0 <__alt_data_end+0xf8001da0>
10001dec:	90a5883a 	add	r18,r18,r2
10001df0:	047feb0e 	bge	zero,r17,10001da0 <__alt_data_end+0xf8001da0>
10001df4:	80800917 	ldw	r2,36(r16)
10001df8:	81400717 	ldw	r5,28(r16)
10001dfc:	880f883a 	mov	r7,r17
10001e00:	900d883a 	mov	r6,r18
10001e04:	9809883a 	mov	r4,r19
10001e08:	103ee83a 	callr	r2
10001e0c:	88a3c83a 	sub	r17,r17,r2
10001e10:	00bff616 	blt	zero,r2,10001dec <__alt_data_end+0xf8001dec>
10001e14:	80c0030b 	ldhu	r3,12(r16)
10001e18:	00bfffc4 	movi	r2,-1
10001e1c:	18c01014 	ori	r3,r3,64
10001e20:	80c0030d 	sth	r3,12(r16)
10001e24:	003fdf06 	br	10001da4 <__alt_data_end+0xf8001da4>
10001e28:	000226c0 	call	1000226c <__sinit>
10001e2c:	003fab06 	br	10001cdc <__alt_data_end+0xf8001cdc>
10001e30:	80800517 	ldw	r2,20(r16)
10001e34:	003fea06 	br	10001de0 <__alt_data_end+0xf8001de0>
10001e38:	81400717 	ldw	r5,28(r16)
10001e3c:	000d883a 	mov	r6,zero
10001e40:	9809883a 	mov	r4,r19
10001e44:	01c00044 	movi	r7,1
10001e48:	403ee83a 	callr	r8
10001e4c:	100d883a 	mov	r6,r2
10001e50:	00bfffc4 	movi	r2,-1
10001e54:	30801326 	beq	r6,r2,10001ea4 <_fflush_r+0x1f4>
10001e58:	8080030b 	ldhu	r2,12(r16)
10001e5c:	82000a17 	ldw	r8,40(r16)
10001e60:	003fb006 	br	10001d24 <__alt_data_end+0xf8001d24>
10001e64:	80c00f17 	ldw	r3,60(r16)
10001e68:	00ffa716 	blt	zero,r3,10001d08 <__alt_data_end+0xf8001d08>
10001e6c:	003fcc06 	br	10001da0 <__alt_data_end+0xf8001da0>
10001e70:	98c00017 	ldw	r3,0(r19)
10001e74:	183fb926 	beq	r3,zero,10001d5c <__alt_data_end+0xf8001d5c>
10001e78:	01000744 	movi	r4,29
10001e7c:	19000226 	beq	r3,r4,10001e88 <_fflush_r+0x1d8>
10001e80:	01000584 	movi	r4,22
10001e84:	1900101e 	bne	r3,r4,10001ec8 <_fflush_r+0x218>
10001e88:	8080030b 	ldhu	r2,12(r16)
10001e8c:	80c00417 	ldw	r3,16(r16)
10001e90:	80000115 	stw	zero,4(r16)
10001e94:	10bdffcc 	andi	r2,r2,63487
10001e98:	8080030d 	sth	r2,12(r16)
10001e9c:	80c00015 	stw	r3,0(r16)
10001ea0:	003fb706 	br	10001d80 <__alt_data_end+0xf8001d80>
10001ea4:	98800017 	ldw	r2,0(r19)
10001ea8:	103feb26 	beq	r2,zero,10001e58 <__alt_data_end+0xf8001e58>
10001eac:	00c00744 	movi	r3,29
10001eb0:	10c00226 	beq	r2,r3,10001ebc <_fflush_r+0x20c>
10001eb4:	00c00584 	movi	r3,22
10001eb8:	10ffd61e 	bne	r2,r3,10001e14 <__alt_data_end+0xf8001e14>
10001ebc:	9c400015 	stw	r17,0(r19)
10001ec0:	0005883a 	mov	r2,zero
10001ec4:	003fb706 	br	10001da4 <__alt_data_end+0xf8001da4>
10001ec8:	80c0030b 	ldhu	r3,12(r16)
10001ecc:	18c01014 	ori	r3,r3,64
10001ed0:	80c0030d 	sth	r3,12(r16)
10001ed4:	003fb306 	br	10001da4 <__alt_data_end+0xf8001da4>

10001ed8 <fflush>:
10001ed8:	20000526 	beq	r4,zero,10001ef0 <fflush+0x18>
10001edc:	00840034 	movhi	r2,4096
10001ee0:	109c7a04 	addi	r2,r2,29160
10001ee4:	200b883a 	mov	r5,r4
10001ee8:	11000017 	ldw	r4,0(r2)
10001eec:	0001cb01 	jmpi	10001cb0 <_fflush_r>
10001ef0:	00840034 	movhi	r2,4096
10001ef4:	109c7904 	addi	r2,r2,29156
10001ef8:	11000017 	ldw	r4,0(r2)
10001efc:	01440034 	movhi	r5,4096
10001f00:	29472c04 	addi	r5,r5,7344
10001f04:	00027881 	jmpi	10002788 <_fwalk_reent>

10001f08 <__fp_lock>:
10001f08:	0005883a 	mov	r2,zero
10001f0c:	f800283a 	ret

10001f10 <__fp_unlock>:
10001f10:	0005883a 	mov	r2,zero
10001f14:	f800283a 	ret

10001f18 <_cleanup_r>:
10001f18:	01440034 	movhi	r5,4096
10001f1c:	294b8204 	addi	r5,r5,11784
10001f20:	00026d01 	jmpi	100026d0 <_fwalk>

10001f24 <__sinit.part.1>:
10001f24:	defff604 	addi	sp,sp,-40
10001f28:	00c40034 	movhi	r3,4096
10001f2c:	dfc00915 	stw	ra,36(sp)
10001f30:	df000815 	stw	fp,32(sp)
10001f34:	ddc00715 	stw	r23,28(sp)
10001f38:	dd800615 	stw	r22,24(sp)
10001f3c:	dd400515 	stw	r21,20(sp)
10001f40:	dd000415 	stw	r20,16(sp)
10001f44:	dcc00315 	stw	r19,12(sp)
10001f48:	dc800215 	stw	r18,8(sp)
10001f4c:	dc400115 	stw	r17,4(sp)
10001f50:	dc000015 	stw	r16,0(sp)
10001f54:	18c7c604 	addi	r3,r3,7960
10001f58:	24000117 	ldw	r16,4(r4)
10001f5c:	20c00f15 	stw	r3,60(r4)
10001f60:	07000044 	movi	fp,1
10001f64:	00c000c4 	movi	r3,3
10001f68:	2080bb04 	addi	r2,r4,748
10001f6c:	20c0b915 	stw	r3,740(r4)
10001f70:	27000e15 	stw	fp,56(r4)
10001f74:	2080ba15 	stw	r2,744(r4)
10001f78:	2000b815 	stw	zero,736(r4)
10001f7c:	05c00204 	movi	r23,8
10001f80:	00800104 	movi	r2,4
10001f84:	2025883a 	mov	r18,r4
10001f88:	b80d883a 	mov	r6,r23
10001f8c:	81001704 	addi	r4,r16,92
10001f90:	000b883a 	mov	r5,zero
10001f94:	80000015 	stw	zero,0(r16)
10001f98:	80000115 	stw	zero,4(r16)
10001f9c:	80000215 	stw	zero,8(r16)
10001fa0:	8080030d 	sth	r2,12(r16)
10001fa4:	80001915 	stw	zero,100(r16)
10001fa8:	8000038d 	sth	zero,14(r16)
10001fac:	80000415 	stw	zero,16(r16)
10001fb0:	80000515 	stw	zero,20(r16)
10001fb4:	80000615 	stw	zero,24(r16)
10001fb8:	00029f80 	call	100029f8 <memset>
10001fbc:	05840034 	movhi	r22,4096
10001fc0:	94400217 	ldw	r17,8(r18)
10001fc4:	05440034 	movhi	r21,4096
10001fc8:	05040034 	movhi	r20,4096
10001fcc:	04c40034 	movhi	r19,4096
10001fd0:	b58ac704 	addi	r22,r22,11036
10001fd4:	ad4ade04 	addi	r21,r21,11128
10001fd8:	a50afd04 	addi	r20,r20,11252
10001fdc:	9ccb1404 	addi	r19,r19,11344
10001fe0:	85800815 	stw	r22,32(r16)
10001fe4:	85400915 	stw	r21,36(r16)
10001fe8:	85000a15 	stw	r20,40(r16)
10001fec:	84c00b15 	stw	r19,44(r16)
10001ff0:	84000715 	stw	r16,28(r16)
10001ff4:	00800284 	movi	r2,10
10001ff8:	89001704 	addi	r4,r17,92
10001ffc:	b80d883a 	mov	r6,r23
10002000:	000b883a 	mov	r5,zero
10002004:	88000015 	stw	zero,0(r17)
10002008:	88000115 	stw	zero,4(r17)
1000200c:	88000215 	stw	zero,8(r17)
10002010:	8880030d 	sth	r2,12(r17)
10002014:	88001915 	stw	zero,100(r17)
10002018:	8f00038d 	sth	fp,14(r17)
1000201c:	88000415 	stw	zero,16(r17)
10002020:	88000515 	stw	zero,20(r17)
10002024:	88000615 	stw	zero,24(r17)
10002028:	00029f80 	call	100029f8 <memset>
1000202c:	94000317 	ldw	r16,12(r18)
10002030:	00800484 	movi	r2,18
10002034:	8c400715 	stw	r17,28(r17)
10002038:	8d800815 	stw	r22,32(r17)
1000203c:	8d400915 	stw	r21,36(r17)
10002040:	8d000a15 	stw	r20,40(r17)
10002044:	8cc00b15 	stw	r19,44(r17)
10002048:	8080030d 	sth	r2,12(r16)
1000204c:	00800084 	movi	r2,2
10002050:	80000015 	stw	zero,0(r16)
10002054:	80000115 	stw	zero,4(r16)
10002058:	80000215 	stw	zero,8(r16)
1000205c:	80001915 	stw	zero,100(r16)
10002060:	8080038d 	sth	r2,14(r16)
10002064:	80000415 	stw	zero,16(r16)
10002068:	80000515 	stw	zero,20(r16)
1000206c:	80000615 	stw	zero,24(r16)
10002070:	81001704 	addi	r4,r16,92
10002074:	000b883a 	mov	r5,zero
10002078:	b80d883a 	mov	r6,r23
1000207c:	00029f80 	call	100029f8 <memset>
10002080:	84000715 	stw	r16,28(r16)
10002084:	85800815 	stw	r22,32(r16)
10002088:	85400915 	stw	r21,36(r16)
1000208c:	85000a15 	stw	r20,40(r16)
10002090:	84c00b15 	stw	r19,44(r16)
10002094:	dfc00917 	ldw	ra,36(sp)
10002098:	df000817 	ldw	fp,32(sp)
1000209c:	ddc00717 	ldw	r23,28(sp)
100020a0:	dd800617 	ldw	r22,24(sp)
100020a4:	dd400517 	ldw	r21,20(sp)
100020a8:	dd000417 	ldw	r20,16(sp)
100020ac:	dcc00317 	ldw	r19,12(sp)
100020b0:	dc800217 	ldw	r18,8(sp)
100020b4:	dc400117 	ldw	r17,4(sp)
100020b8:	dc000017 	ldw	r16,0(sp)
100020bc:	dec00a04 	addi	sp,sp,40
100020c0:	f800283a 	ret

100020c4 <__sfmoreglue>:
100020c4:	defffc04 	addi	sp,sp,-16
100020c8:	dc800215 	stw	r18,8(sp)
100020cc:	2825883a 	mov	r18,r5
100020d0:	dc000015 	stw	r16,0(sp)
100020d4:	01401a04 	movi	r5,104
100020d8:	2021883a 	mov	r16,r4
100020dc:	9009883a 	mov	r4,r18
100020e0:	dfc00315 	stw	ra,12(sp)
100020e4:	dc400115 	stw	r17,4(sp)
100020e8:	0002f800 	call	10002f80 <__mulsi3>
100020ec:	8009883a 	mov	r4,r16
100020f0:	11400304 	addi	r5,r2,12
100020f4:	1023883a 	mov	r17,r2
100020f8:	0000a680 	call	10000a68 <_malloc_r>
100020fc:	1021883a 	mov	r16,r2
10002100:	10000726 	beq	r2,zero,10002120 <__sfmoreglue+0x5c>
10002104:	11000304 	addi	r4,r2,12
10002108:	10000015 	stw	zero,0(r2)
1000210c:	14800115 	stw	r18,4(r2)
10002110:	11000215 	stw	r4,8(r2)
10002114:	000b883a 	mov	r5,zero
10002118:	880d883a 	mov	r6,r17
1000211c:	00029f80 	call	100029f8 <memset>
10002120:	8005883a 	mov	r2,r16
10002124:	dfc00317 	ldw	ra,12(sp)
10002128:	dc800217 	ldw	r18,8(sp)
1000212c:	dc400117 	ldw	r17,4(sp)
10002130:	dc000017 	ldw	r16,0(sp)
10002134:	dec00404 	addi	sp,sp,16
10002138:	f800283a 	ret

1000213c <__sfp>:
1000213c:	00840034 	movhi	r2,4096
10002140:	defffb04 	addi	sp,sp,-20
10002144:	109c7904 	addi	r2,r2,29156
10002148:	dc800215 	stw	r18,8(sp)
1000214c:	14800017 	ldw	r18,0(r2)
10002150:	dcc00315 	stw	r19,12(sp)
10002154:	dfc00415 	stw	ra,16(sp)
10002158:	90800e17 	ldw	r2,56(r18)
1000215c:	dc400115 	stw	r17,4(sp)
10002160:	dc000015 	stw	r16,0(sp)
10002164:	2027883a 	mov	r19,r4
10002168:	1000021e 	bne	r2,zero,10002174 <__sfp+0x38>
1000216c:	9009883a 	mov	r4,r18
10002170:	0001f240 	call	10001f24 <__sinit.part.1>
10002174:	9480b804 	addi	r18,r18,736
10002178:	047fffc4 	movi	r17,-1
1000217c:	91400117 	ldw	r5,4(r18)
10002180:	94000217 	ldw	r16,8(r18)
10002184:	297fffc4 	addi	r5,r5,-1
10002188:	28000a16 	blt	r5,zero,100021b4 <__sfp+0x78>
1000218c:	8080030f 	ldh	r2,12(r16)
10002190:	10000c26 	beq	r2,zero,100021c4 <__sfp+0x88>
10002194:	80c01d04 	addi	r3,r16,116
10002198:	00000206 	br	100021a4 <__sfp+0x68>
1000219c:	18bfe60f 	ldh	r2,-104(r3)
100021a0:	10000826 	beq	r2,zero,100021c4 <__sfp+0x88>
100021a4:	297fffc4 	addi	r5,r5,-1
100021a8:	1c3ffd04 	addi	r16,r3,-12
100021ac:	18c01a04 	addi	r3,r3,104
100021b0:	2c7ffa1e 	bne	r5,r17,1000219c <__alt_data_end+0xf800219c>
100021b4:	90800017 	ldw	r2,0(r18)
100021b8:	10001d26 	beq	r2,zero,10002230 <__sfp+0xf4>
100021bc:	1025883a 	mov	r18,r2
100021c0:	003fee06 	br	1000217c <__alt_data_end+0xf800217c>
100021c4:	00bfffc4 	movi	r2,-1
100021c8:	8080038d 	sth	r2,14(r16)
100021cc:	00800044 	movi	r2,1
100021d0:	8080030d 	sth	r2,12(r16)
100021d4:	80001915 	stw	zero,100(r16)
100021d8:	80000015 	stw	zero,0(r16)
100021dc:	80000215 	stw	zero,8(r16)
100021e0:	80000115 	stw	zero,4(r16)
100021e4:	80000415 	stw	zero,16(r16)
100021e8:	80000515 	stw	zero,20(r16)
100021ec:	80000615 	stw	zero,24(r16)
100021f0:	81001704 	addi	r4,r16,92
100021f4:	000b883a 	mov	r5,zero
100021f8:	01800204 	movi	r6,8
100021fc:	00029f80 	call	100029f8 <memset>
10002200:	8005883a 	mov	r2,r16
10002204:	80000c15 	stw	zero,48(r16)
10002208:	80000d15 	stw	zero,52(r16)
1000220c:	80001115 	stw	zero,68(r16)
10002210:	80001215 	stw	zero,72(r16)
10002214:	dfc00417 	ldw	ra,16(sp)
10002218:	dcc00317 	ldw	r19,12(sp)
1000221c:	dc800217 	ldw	r18,8(sp)
10002220:	dc400117 	ldw	r17,4(sp)
10002224:	dc000017 	ldw	r16,0(sp)
10002228:	dec00504 	addi	sp,sp,20
1000222c:	f800283a 	ret
10002230:	9809883a 	mov	r4,r19
10002234:	01400104 	movi	r5,4
10002238:	00020c40 	call	100020c4 <__sfmoreglue>
1000223c:	90800015 	stw	r2,0(r18)
10002240:	103fde1e 	bne	r2,zero,100021bc <__alt_data_end+0xf80021bc>
10002244:	00800304 	movi	r2,12
10002248:	98800015 	stw	r2,0(r19)
1000224c:	0005883a 	mov	r2,zero
10002250:	003ff006 	br	10002214 <__alt_data_end+0xf8002214>

10002254 <_cleanup>:
10002254:	00840034 	movhi	r2,4096
10002258:	109c7904 	addi	r2,r2,29156
1000225c:	11000017 	ldw	r4,0(r2)
10002260:	01440034 	movhi	r5,4096
10002264:	294b8204 	addi	r5,r5,11784
10002268:	00026d01 	jmpi	100026d0 <_fwalk>

1000226c <__sinit>:
1000226c:	20800e17 	ldw	r2,56(r4)
10002270:	10000126 	beq	r2,zero,10002278 <__sinit+0xc>
10002274:	f800283a 	ret
10002278:	0001f241 	jmpi	10001f24 <__sinit.part.1>

1000227c <__sfp_lock_acquire>:
1000227c:	f800283a 	ret

10002280 <__sfp_lock_release>:
10002280:	f800283a 	ret

10002284 <__sinit_lock_acquire>:
10002284:	f800283a 	ret

10002288 <__sinit_lock_release>:
10002288:	f800283a 	ret

1000228c <__fp_lock_all>:
1000228c:	00840034 	movhi	r2,4096
10002290:	109c7a04 	addi	r2,r2,29160
10002294:	11000017 	ldw	r4,0(r2)
10002298:	01440034 	movhi	r5,4096
1000229c:	2947c204 	addi	r5,r5,7944
100022a0:	00026d01 	jmpi	100026d0 <_fwalk>

100022a4 <__fp_unlock_all>:
100022a4:	00840034 	movhi	r2,4096
100022a8:	109c7a04 	addi	r2,r2,29160
100022ac:	11000017 	ldw	r4,0(r2)
100022b0:	01440034 	movhi	r5,4096
100022b4:	2947c404 	addi	r5,r5,7952
100022b8:	00026d01 	jmpi	100026d0 <_fwalk>

100022bc <_malloc_trim_r>:
100022bc:	defffb04 	addi	sp,sp,-20
100022c0:	dcc00315 	stw	r19,12(sp)
100022c4:	04c40034 	movhi	r19,4096
100022c8:	dc800215 	stw	r18,8(sp)
100022cc:	dc400115 	stw	r17,4(sp)
100022d0:	dc000015 	stw	r16,0(sp)
100022d4:	dfc00415 	stw	ra,16(sp)
100022d8:	2821883a 	mov	r16,r5
100022dc:	9cd6f504 	addi	r19,r19,23508
100022e0:	2025883a 	mov	r18,r4
100022e4:	00035880 	call	10003588 <__malloc_lock>
100022e8:	98800217 	ldw	r2,8(r19)
100022ec:	14400117 	ldw	r17,4(r2)
100022f0:	00bfff04 	movi	r2,-4
100022f4:	88a2703a 	and	r17,r17,r2
100022f8:	8c21c83a 	sub	r16,r17,r16
100022fc:	8403fbc4 	addi	r16,r16,4079
10002300:	8020d33a 	srli	r16,r16,12
10002304:	0083ffc4 	movi	r2,4095
10002308:	843fffc4 	addi	r16,r16,-1
1000230c:	8020933a 	slli	r16,r16,12
10002310:	1400060e 	bge	r2,r16,1000232c <_malloc_trim_r+0x70>
10002314:	9009883a 	mov	r4,r18
10002318:	000b883a 	mov	r5,zero
1000231c:	0001b2c0 	call	10001b2c <_sbrk_r>
10002320:	98c00217 	ldw	r3,8(r19)
10002324:	1c47883a 	add	r3,r3,r17
10002328:	10c00a26 	beq	r2,r3,10002354 <_malloc_trim_r+0x98>
1000232c:	9009883a 	mov	r4,r18
10002330:	00035a80 	call	100035a8 <__malloc_unlock>
10002334:	0005883a 	mov	r2,zero
10002338:	dfc00417 	ldw	ra,16(sp)
1000233c:	dcc00317 	ldw	r19,12(sp)
10002340:	dc800217 	ldw	r18,8(sp)
10002344:	dc400117 	ldw	r17,4(sp)
10002348:	dc000017 	ldw	r16,0(sp)
1000234c:	dec00504 	addi	sp,sp,20
10002350:	f800283a 	ret
10002354:	9009883a 	mov	r4,r18
10002358:	040bc83a 	sub	r5,zero,r16
1000235c:	0001b2c0 	call	10001b2c <_sbrk_r>
10002360:	00ffffc4 	movi	r3,-1
10002364:	10c00d26 	beq	r2,r3,1000239c <_malloc_trim_r+0xe0>
10002368:	00c40074 	movhi	r3,4097
1000236c:	18e32d04 	addi	r3,r3,-29516
10002370:	18800017 	ldw	r2,0(r3)
10002374:	99000217 	ldw	r4,8(r19)
10002378:	8c23c83a 	sub	r17,r17,r16
1000237c:	8c400054 	ori	r17,r17,1
10002380:	1421c83a 	sub	r16,r2,r16
10002384:	24400115 	stw	r17,4(r4)
10002388:	9009883a 	mov	r4,r18
1000238c:	1c000015 	stw	r16,0(r3)
10002390:	00035a80 	call	100035a8 <__malloc_unlock>
10002394:	00800044 	movi	r2,1
10002398:	003fe706 	br	10002338 <__alt_data_end+0xf8002338>
1000239c:	9009883a 	mov	r4,r18
100023a0:	000b883a 	mov	r5,zero
100023a4:	0001b2c0 	call	10001b2c <_sbrk_r>
100023a8:	99000217 	ldw	r4,8(r19)
100023ac:	014003c4 	movi	r5,15
100023b0:	1107c83a 	sub	r3,r2,r4
100023b4:	28ffdd0e 	bge	r5,r3,1000232c <__alt_data_end+0xf800232c>
100023b8:	01440034 	movhi	r5,4096
100023bc:	295c7b04 	addi	r5,r5,29164
100023c0:	29400017 	ldw	r5,0(r5)
100023c4:	18c00054 	ori	r3,r3,1
100023c8:	20c00115 	stw	r3,4(r4)
100023cc:	00c40074 	movhi	r3,4097
100023d0:	1145c83a 	sub	r2,r2,r5
100023d4:	18e32d04 	addi	r3,r3,-29516
100023d8:	18800015 	stw	r2,0(r3)
100023dc:	003fd306 	br	1000232c <__alt_data_end+0xf800232c>

100023e0 <_free_r>:
100023e0:	28004c26 	beq	r5,zero,10002514 <_free_r+0x134>
100023e4:	defffd04 	addi	sp,sp,-12
100023e8:	dc400115 	stw	r17,4(sp)
100023ec:	dc000015 	stw	r16,0(sp)
100023f0:	2023883a 	mov	r17,r4
100023f4:	2821883a 	mov	r16,r5
100023f8:	dfc00215 	stw	ra,8(sp)
100023fc:	00035880 	call	10003588 <__malloc_lock>
10002400:	813fff17 	ldw	r4,-4(r16)
10002404:	00bfff84 	movi	r2,-2
10002408:	02440034 	movhi	r9,4096
1000240c:	81bffe04 	addi	r6,r16,-8
10002410:	2084703a 	and	r2,r4,r2
10002414:	4a56f504 	addi	r9,r9,23508
10002418:	308b883a 	add	r5,r6,r2
1000241c:	2a000117 	ldw	r8,4(r5)
10002420:	49c00217 	ldw	r7,8(r9)
10002424:	00ffff04 	movi	r3,-4
10002428:	40c6703a 	and	r3,r8,r3
1000242c:	39405326 	beq	r7,r5,1000257c <_free_r+0x19c>
10002430:	28c00115 	stw	r3,4(r5)
10002434:	2100004c 	andi	r4,r4,1
10002438:	2000091e 	bne	r4,zero,10002460 <_free_r+0x80>
1000243c:	81fffe17 	ldw	r7,-8(r16)
10002440:	4a000204 	addi	r8,r9,8
10002444:	31cdc83a 	sub	r6,r6,r7
10002448:	31000217 	ldw	r4,8(r6)
1000244c:	11c5883a 	add	r2,r2,r7
10002450:	22006126 	beq	r4,r8,100025d8 <_free_r+0x1f8>
10002454:	31c00317 	ldw	r7,12(r6)
10002458:	21c00315 	stw	r7,12(r4)
1000245c:	39000215 	stw	r4,8(r7)
10002460:	28c9883a 	add	r4,r5,r3
10002464:	21c00117 	ldw	r7,4(r4)
10002468:	39c0004c 	andi	r7,r7,1
1000246c:	38000d1e 	bne	r7,zero,100024a4 <_free_r+0xc4>
10002470:	29000217 	ldw	r4,8(r5)
10002474:	10c5883a 	add	r2,r2,r3
10002478:	00c40034 	movhi	r3,4096
1000247c:	18d6f704 	addi	r3,r3,23516
10002480:	20c07526 	beq	r4,r3,10002658 <_free_r+0x278>
10002484:	29c00317 	ldw	r7,12(r5)
10002488:	11400054 	ori	r5,r2,1
1000248c:	3087883a 	add	r3,r6,r2
10002490:	21c00315 	stw	r7,12(r4)
10002494:	39000215 	stw	r4,8(r7)
10002498:	31400115 	stw	r5,4(r6)
1000249c:	18800015 	stw	r2,0(r3)
100024a0:	00000406 	br	100024b4 <_free_r+0xd4>
100024a4:	10c00054 	ori	r3,r2,1
100024a8:	30c00115 	stw	r3,4(r6)
100024ac:	3087883a 	add	r3,r6,r2
100024b0:	18800015 	stw	r2,0(r3)
100024b4:	00c07fc4 	movi	r3,511
100024b8:	18801736 	bltu	r3,r2,10002518 <_free_r+0x138>
100024bc:	1004d0fa 	srli	r2,r2,3
100024c0:	01400044 	movi	r5,1
100024c4:	49000117 	ldw	r4,4(r9)
100024c8:	1087883a 	add	r3,r2,r2
100024cc:	18c7883a 	add	r3,r3,r3
100024d0:	1005d0ba 	srai	r2,r2,2
100024d4:	18c7883a 	add	r3,r3,r3
100024d8:	1a47883a 	add	r3,r3,r9
100024dc:	19c00217 	ldw	r7,8(r3)
100024e0:	2884983a 	sll	r2,r5,r2
100024e4:	30c00315 	stw	r3,12(r6)
100024e8:	31c00215 	stw	r7,8(r6)
100024ec:	1104b03a 	or	r2,r2,r4
100024f0:	19800215 	stw	r6,8(r3)
100024f4:	48800115 	stw	r2,4(r9)
100024f8:	39800315 	stw	r6,12(r7)
100024fc:	8809883a 	mov	r4,r17
10002500:	dfc00217 	ldw	ra,8(sp)
10002504:	dc400117 	ldw	r17,4(sp)
10002508:	dc000017 	ldw	r16,0(sp)
1000250c:	dec00304 	addi	sp,sp,12
10002510:	00035a81 	jmpi	100035a8 <__malloc_unlock>
10002514:	f800283a 	ret
10002518:	1006d27a 	srli	r3,r2,9
1000251c:	01000104 	movi	r4,4
10002520:	20c04036 	bltu	r4,r3,10002624 <_free_r+0x244>
10002524:	1006d1ba 	srli	r3,r2,6
10002528:	19400e04 	addi	r5,r3,56
1000252c:	2947883a 	add	r3,r5,r5
10002530:	18c7883a 	add	r3,r3,r3
10002534:	18c7883a 	add	r3,r3,r3
10002538:	1a49883a 	add	r4,r3,r9
1000253c:	20c00217 	ldw	r3,8(r4)
10002540:	01c40034 	movhi	r7,4096
10002544:	39d6f504 	addi	r7,r7,23508
10002548:	19003b26 	beq	r3,r4,10002638 <_free_r+0x258>
1000254c:	01ffff04 	movi	r7,-4
10002550:	19400117 	ldw	r5,4(r3)
10002554:	29ca703a 	and	r5,r5,r7
10002558:	1140022e 	bgeu	r2,r5,10002564 <_free_r+0x184>
1000255c:	18c00217 	ldw	r3,8(r3)
10002560:	20fffb1e 	bne	r4,r3,10002550 <__alt_data_end+0xf8002550>
10002564:	18800317 	ldw	r2,12(r3)
10002568:	30800315 	stw	r2,12(r6)
1000256c:	30c00215 	stw	r3,8(r6)
10002570:	11800215 	stw	r6,8(r2)
10002574:	19800315 	stw	r6,12(r3)
10002578:	003fe006 	br	100024fc <__alt_data_end+0xf80024fc>
1000257c:	2100004c 	andi	r4,r4,1
10002580:	1885883a 	add	r2,r3,r2
10002584:	2000071e 	bne	r4,zero,100025a4 <_free_r+0x1c4>
10002588:	817ffe17 	ldw	r5,-8(r16)
1000258c:	314dc83a 	sub	r6,r6,r5
10002590:	30c00317 	ldw	r3,12(r6)
10002594:	31000217 	ldw	r4,8(r6)
10002598:	1145883a 	add	r2,r2,r5
1000259c:	20c00315 	stw	r3,12(r4)
100025a0:	19000215 	stw	r4,8(r3)
100025a4:	10c00054 	ori	r3,r2,1
100025a8:	30c00115 	stw	r3,4(r6)
100025ac:	00c40034 	movhi	r3,4096
100025b0:	18dc7c04 	addi	r3,r3,29168
100025b4:	18c00017 	ldw	r3,0(r3)
100025b8:	49800215 	stw	r6,8(r9)
100025bc:	10ffcf36 	bltu	r2,r3,100024fc <__alt_data_end+0xf80024fc>
100025c0:	00840074 	movhi	r2,4097
100025c4:	10a32404 	addi	r2,r2,-29552
100025c8:	11400017 	ldw	r5,0(r2)
100025cc:	8809883a 	mov	r4,r17
100025d0:	00022bc0 	call	100022bc <_malloc_trim_r>
100025d4:	003fc906 	br	100024fc <__alt_data_end+0xf80024fc>
100025d8:	28c9883a 	add	r4,r5,r3
100025dc:	21000117 	ldw	r4,4(r4)
100025e0:	2100004c 	andi	r4,r4,1
100025e4:	20000a1e 	bne	r4,zero,10002610 <_free_r+0x230>
100025e8:	29000317 	ldw	r4,12(r5)
100025ec:	29400217 	ldw	r5,8(r5)
100025f0:	10c5883a 	add	r2,r2,r3
100025f4:	10c00054 	ori	r3,r2,1
100025f8:	29000315 	stw	r4,12(r5)
100025fc:	21400215 	stw	r5,8(r4)
10002600:	30c00115 	stw	r3,4(r6)
10002604:	308d883a 	add	r6,r6,r2
10002608:	30800015 	stw	r2,0(r6)
1000260c:	003fbb06 	br	100024fc <__alt_data_end+0xf80024fc>
10002610:	10c00054 	ori	r3,r2,1
10002614:	30c00115 	stw	r3,4(r6)
10002618:	308d883a 	add	r6,r6,r2
1000261c:	30800015 	stw	r2,0(r6)
10002620:	003fb606 	br	100024fc <__alt_data_end+0xf80024fc>
10002624:	01000504 	movi	r4,20
10002628:	20c01436 	bltu	r4,r3,1000267c <_free_r+0x29c>
1000262c:	194016c4 	addi	r5,r3,91
10002630:	2947883a 	add	r3,r5,r5
10002634:	003fbe06 	br	10002530 <__alt_data_end+0xf8002530>
10002638:	280bd0ba 	srai	r5,r5,2
1000263c:	00800044 	movi	r2,1
10002640:	39000117 	ldw	r4,4(r7)
10002644:	114a983a 	sll	r5,r2,r5
10002648:	1805883a 	mov	r2,r3
1000264c:	2908b03a 	or	r4,r5,r4
10002650:	39000115 	stw	r4,4(r7)
10002654:	003fc406 	br	10002568 <__alt_data_end+0xf8002568>
10002658:	49800515 	stw	r6,20(r9)
1000265c:	49800415 	stw	r6,16(r9)
10002660:	10c00054 	ori	r3,r2,1
10002664:	31000315 	stw	r4,12(r6)
10002668:	31000215 	stw	r4,8(r6)
1000266c:	30c00115 	stw	r3,4(r6)
10002670:	308d883a 	add	r6,r6,r2
10002674:	30800015 	stw	r2,0(r6)
10002678:	003fa006 	br	100024fc <__alt_data_end+0xf80024fc>
1000267c:	01001504 	movi	r4,84
10002680:	20c00436 	bltu	r4,r3,10002694 <_free_r+0x2b4>
10002684:	1006d33a 	srli	r3,r2,12
10002688:	19401b84 	addi	r5,r3,110
1000268c:	2947883a 	add	r3,r5,r5
10002690:	003fa706 	br	10002530 <__alt_data_end+0xf8002530>
10002694:	01005504 	movi	r4,340
10002698:	20c00436 	bltu	r4,r3,100026ac <_free_r+0x2cc>
1000269c:	1006d3fa 	srli	r3,r2,15
100026a0:	19401dc4 	addi	r5,r3,119
100026a4:	2947883a 	add	r3,r5,r5
100026a8:	003fa106 	br	10002530 <__alt_data_end+0xf8002530>
100026ac:	01015504 	movi	r4,1364
100026b0:	20c00436 	bltu	r4,r3,100026c4 <_free_r+0x2e4>
100026b4:	1006d4ba 	srli	r3,r2,18
100026b8:	19401f04 	addi	r5,r3,124
100026bc:	2947883a 	add	r3,r5,r5
100026c0:	003f9b06 	br	10002530 <__alt_data_end+0xf8002530>
100026c4:	00c03f04 	movi	r3,252
100026c8:	01401f84 	movi	r5,126
100026cc:	003f9806 	br	10002530 <__alt_data_end+0xf8002530>

100026d0 <_fwalk>:
100026d0:	defff804 	addi	sp,sp,-32
100026d4:	dd400515 	stw	r21,20(sp)
100026d8:	2540b804 	addi	r21,r4,736
100026dc:	dd800615 	stw	r22,24(sp)
100026e0:	dd000415 	stw	r20,16(sp)
100026e4:	dfc00715 	stw	ra,28(sp)
100026e8:	dcc00315 	stw	r19,12(sp)
100026ec:	dc800215 	stw	r18,8(sp)
100026f0:	dc400115 	stw	r17,4(sp)
100026f4:	dc000015 	stw	r16,0(sp)
100026f8:	2829883a 	mov	r20,r5
100026fc:	002d883a 	mov	r22,zero
10002700:	000227c0 	call	1000227c <__sfp_lock_acquire>
10002704:	a8001426 	beq	r21,zero,10002758 <_fwalk+0x88>
10002708:	04ffffc4 	movi	r19,-1
1000270c:	ac400117 	ldw	r17,4(r21)
10002710:	ac800217 	ldw	r18,8(r21)
10002714:	8c7fffc4 	addi	r17,r17,-1
10002718:	88000d16 	blt	r17,zero,10002750 <_fwalk+0x80>
1000271c:	94000304 	addi	r16,r18,12
10002720:	94800384 	addi	r18,r18,14
10002724:	80c0000f 	ldh	r3,0(r16)
10002728:	8c7fffc4 	addi	r17,r17,-1
1000272c:	813ffd04 	addi	r4,r16,-12
10002730:	18000426 	beq	r3,zero,10002744 <_fwalk+0x74>
10002734:	90c0000f 	ldh	r3,0(r18)
10002738:	1cc00226 	beq	r3,r19,10002744 <_fwalk+0x74>
1000273c:	a03ee83a 	callr	r20
10002740:	b0acb03a 	or	r22,r22,r2
10002744:	84001a04 	addi	r16,r16,104
10002748:	94801a04 	addi	r18,r18,104
1000274c:	8cfff51e 	bne	r17,r19,10002724 <__alt_data_end+0xf8002724>
10002750:	ad400017 	ldw	r21,0(r21)
10002754:	a83fed1e 	bne	r21,zero,1000270c <__alt_data_end+0xf800270c>
10002758:	00022800 	call	10002280 <__sfp_lock_release>
1000275c:	b005883a 	mov	r2,r22
10002760:	dfc00717 	ldw	ra,28(sp)
10002764:	dd800617 	ldw	r22,24(sp)
10002768:	dd400517 	ldw	r21,20(sp)
1000276c:	dd000417 	ldw	r20,16(sp)
10002770:	dcc00317 	ldw	r19,12(sp)
10002774:	dc800217 	ldw	r18,8(sp)
10002778:	dc400117 	ldw	r17,4(sp)
1000277c:	dc000017 	ldw	r16,0(sp)
10002780:	dec00804 	addi	sp,sp,32
10002784:	f800283a 	ret

10002788 <_fwalk_reent>:
10002788:	defff804 	addi	sp,sp,-32
1000278c:	dd400515 	stw	r21,20(sp)
10002790:	2540b804 	addi	r21,r4,736
10002794:	dd800615 	stw	r22,24(sp)
10002798:	dd000415 	stw	r20,16(sp)
1000279c:	dcc00315 	stw	r19,12(sp)
100027a0:	dfc00715 	stw	ra,28(sp)
100027a4:	dc800215 	stw	r18,8(sp)
100027a8:	dc400115 	stw	r17,4(sp)
100027ac:	dc000015 	stw	r16,0(sp)
100027b0:	2027883a 	mov	r19,r4
100027b4:	2829883a 	mov	r20,r5
100027b8:	002d883a 	mov	r22,zero
100027bc:	000227c0 	call	1000227c <__sfp_lock_acquire>
100027c0:	a8001326 	beq	r21,zero,10002810 <_fwalk_reent+0x88>
100027c4:	04bfffc4 	movi	r18,-1
100027c8:	ac400117 	ldw	r17,4(r21)
100027cc:	ac000217 	ldw	r16,8(r21)
100027d0:	8c7fffc4 	addi	r17,r17,-1
100027d4:	88000c16 	blt	r17,zero,10002808 <_fwalk_reent+0x80>
100027d8:	84000304 	addi	r16,r16,12
100027dc:	80c0000f 	ldh	r3,0(r16)
100027e0:	8c7fffc4 	addi	r17,r17,-1
100027e4:	817ffd04 	addi	r5,r16,-12
100027e8:	18000526 	beq	r3,zero,10002800 <_fwalk_reent+0x78>
100027ec:	80c0008f 	ldh	r3,2(r16)
100027f0:	9809883a 	mov	r4,r19
100027f4:	1c800226 	beq	r3,r18,10002800 <_fwalk_reent+0x78>
100027f8:	a03ee83a 	callr	r20
100027fc:	b0acb03a 	or	r22,r22,r2
10002800:	84001a04 	addi	r16,r16,104
10002804:	8cbff51e 	bne	r17,r18,100027dc <__alt_data_end+0xf80027dc>
10002808:	ad400017 	ldw	r21,0(r21)
1000280c:	a83fee1e 	bne	r21,zero,100027c8 <__alt_data_end+0xf80027c8>
10002810:	00022800 	call	10002280 <__sfp_lock_release>
10002814:	b005883a 	mov	r2,r22
10002818:	dfc00717 	ldw	ra,28(sp)
1000281c:	dd800617 	ldw	r22,24(sp)
10002820:	dd400517 	ldw	r21,20(sp)
10002824:	dd000417 	ldw	r20,16(sp)
10002828:	dcc00317 	ldw	r19,12(sp)
1000282c:	dc800217 	ldw	r18,8(sp)
10002830:	dc400117 	ldw	r17,4(sp)
10002834:	dc000017 	ldw	r16,0(sp)
10002838:	dec00804 	addi	sp,sp,32
1000283c:	f800283a 	ret

10002840 <__smakebuf_r>:
10002840:	2880030b 	ldhu	r2,12(r5)
10002844:	10c0008c 	andi	r3,r2,2
10002848:	1800401e 	bne	r3,zero,1000294c <__smakebuf_r+0x10c>
1000284c:	deffec04 	addi	sp,sp,-80
10002850:	dc000f15 	stw	r16,60(sp)
10002854:	2821883a 	mov	r16,r5
10002858:	2940038f 	ldh	r5,14(r5)
1000285c:	dc401015 	stw	r17,64(sp)
10002860:	dfc01315 	stw	ra,76(sp)
10002864:	dcc01215 	stw	r19,72(sp)
10002868:	dc801115 	stw	r18,68(sp)
1000286c:	2023883a 	mov	r17,r4
10002870:	28001b16 	blt	r5,zero,100028e0 <__smakebuf_r+0xa0>
10002874:	d80d883a 	mov	r6,sp
10002878:	0002e1c0 	call	10002e1c <_fstat_r>
1000287c:	10001716 	blt	r2,zero,100028dc <__smakebuf_r+0x9c>
10002880:	d8800117 	ldw	r2,4(sp)
10002884:	00e00014 	movui	r3,32768
10002888:	10bc000c 	andi	r2,r2,61440
1000288c:	10c03726 	beq	r2,r3,1000296c <__smakebuf_r+0x12c>
10002890:	80c0030b 	ldhu	r3,12(r16)
10002894:	18c20014 	ori	r3,r3,2048
10002898:	80c0030d 	sth	r3,12(r16)
1000289c:	00c80004 	movi	r3,8192
100028a0:	10c03c1e 	bne	r2,r3,10002994 <__smakebuf_r+0x154>
100028a4:	8140038f 	ldh	r5,14(r16)
100028a8:	8809883a 	mov	r4,r17
100028ac:	0002e740 	call	10002e74 <_isatty_r>
100028b0:	10004e26 	beq	r2,zero,100029ec <__smakebuf_r+0x1ac>
100028b4:	8080030b 	ldhu	r2,12(r16)
100028b8:	04c00044 	movi	r19,1
100028bc:	80c010c4 	addi	r3,r16,67
100028c0:	14c4b03a 	or	r2,r2,r19
100028c4:	8080030d 	sth	r2,12(r16)
100028c8:	80c00015 	stw	r3,0(r16)
100028cc:	80c00415 	stw	r3,16(r16)
100028d0:	84c00515 	stw	r19,20(r16)
100028d4:	04810004 	movi	r18,1024
100028d8:	00000706 	br	100028f8 <__smakebuf_r+0xb8>
100028dc:	8080030b 	ldhu	r2,12(r16)
100028e0:	10c0200c 	andi	r3,r2,128
100028e4:	18001f1e 	bne	r3,zero,10002964 <__smakebuf_r+0x124>
100028e8:	04810004 	movi	r18,1024
100028ec:	10820014 	ori	r2,r2,2048
100028f0:	8080030d 	sth	r2,12(r16)
100028f4:	0027883a 	mov	r19,zero
100028f8:	8809883a 	mov	r4,r17
100028fc:	900b883a 	mov	r5,r18
10002900:	0000a680 	call	10000a68 <_malloc_r>
10002904:	10002e26 	beq	r2,zero,100029c0 <__smakebuf_r+0x180>
10002908:	80c0030b 	ldhu	r3,12(r16)
1000290c:	01040034 	movhi	r4,4096
10002910:	2107c604 	addi	r4,r4,7960
10002914:	89000f15 	stw	r4,60(r17)
10002918:	18c02014 	ori	r3,r3,128
1000291c:	80c0030d 	sth	r3,12(r16)
10002920:	80800015 	stw	r2,0(r16)
10002924:	80800415 	stw	r2,16(r16)
10002928:	84800515 	stw	r18,20(r16)
1000292c:	98001c1e 	bne	r19,zero,100029a0 <__smakebuf_r+0x160>
10002930:	dfc01317 	ldw	ra,76(sp)
10002934:	dcc01217 	ldw	r19,72(sp)
10002938:	dc801117 	ldw	r18,68(sp)
1000293c:	dc401017 	ldw	r17,64(sp)
10002940:	dc000f17 	ldw	r16,60(sp)
10002944:	dec01404 	addi	sp,sp,80
10002948:	f800283a 	ret
1000294c:	288010c4 	addi	r2,r5,67
10002950:	28800015 	stw	r2,0(r5)
10002954:	28800415 	stw	r2,16(r5)
10002958:	00800044 	movi	r2,1
1000295c:	28800515 	stw	r2,20(r5)
10002960:	f800283a 	ret
10002964:	04801004 	movi	r18,64
10002968:	003fe006 	br	100028ec <__alt_data_end+0xf80028ec>
1000296c:	81000a17 	ldw	r4,40(r16)
10002970:	00c40034 	movhi	r3,4096
10002974:	18cafd04 	addi	r3,r3,11252
10002978:	20ffc51e 	bne	r4,r3,10002890 <__alt_data_end+0xf8002890>
1000297c:	80c0030b 	ldhu	r3,12(r16)
10002980:	01010004 	movi	r4,1024
10002984:	81001315 	stw	r4,76(r16)
10002988:	1906b03a 	or	r3,r3,r4
1000298c:	80c0030d 	sth	r3,12(r16)
10002990:	003fc206 	br	1000289c <__alt_data_end+0xf800289c>
10002994:	0027883a 	mov	r19,zero
10002998:	04810004 	movi	r18,1024
1000299c:	003fd606 	br	100028f8 <__alt_data_end+0xf80028f8>
100029a0:	8140038f 	ldh	r5,14(r16)
100029a4:	8809883a 	mov	r4,r17
100029a8:	0002e740 	call	10002e74 <_isatty_r>
100029ac:	103fe026 	beq	r2,zero,10002930 <__alt_data_end+0xf8002930>
100029b0:	8080030b 	ldhu	r2,12(r16)
100029b4:	10800054 	ori	r2,r2,1
100029b8:	8080030d 	sth	r2,12(r16)
100029bc:	003fdc06 	br	10002930 <__alt_data_end+0xf8002930>
100029c0:	8080030b 	ldhu	r2,12(r16)
100029c4:	10c0800c 	andi	r3,r2,512
100029c8:	183fd91e 	bne	r3,zero,10002930 <__alt_data_end+0xf8002930>
100029cc:	10800094 	ori	r2,r2,2
100029d0:	80c010c4 	addi	r3,r16,67
100029d4:	8080030d 	sth	r2,12(r16)
100029d8:	00800044 	movi	r2,1
100029dc:	80c00015 	stw	r3,0(r16)
100029e0:	80c00415 	stw	r3,16(r16)
100029e4:	80800515 	stw	r2,20(r16)
100029e8:	003fd106 	br	10002930 <__alt_data_end+0xf8002930>
100029ec:	04c00044 	movi	r19,1
100029f0:	04810004 	movi	r18,1024
100029f4:	003fc006 	br	100028f8 <__alt_data_end+0xf80028f8>

100029f8 <memset>:
100029f8:	20c000cc 	andi	r3,r4,3
100029fc:	2005883a 	mov	r2,r4
10002a00:	18004326 	beq	r3,zero,10002b10 <memset+0x118>
10002a04:	31ffffc4 	addi	r7,r6,-1
10002a08:	30004026 	beq	r6,zero,10002b0c <memset+0x114>
10002a0c:	2813883a 	mov	r9,r5
10002a10:	200d883a 	mov	r6,r4
10002a14:	2007883a 	mov	r3,r4
10002a18:	00000406 	br	10002a2c <memset+0x34>
10002a1c:	3a3fffc4 	addi	r8,r7,-1
10002a20:	31800044 	addi	r6,r6,1
10002a24:	38003926 	beq	r7,zero,10002b0c <memset+0x114>
10002a28:	400f883a 	mov	r7,r8
10002a2c:	18c00044 	addi	r3,r3,1
10002a30:	32400005 	stb	r9,0(r6)
10002a34:	1a0000cc 	andi	r8,r3,3
10002a38:	403ff81e 	bne	r8,zero,10002a1c <__alt_data_end+0xf8002a1c>
10002a3c:	010000c4 	movi	r4,3
10002a40:	21c02d2e 	bgeu	r4,r7,10002af8 <memset+0x100>
10002a44:	29803fcc 	andi	r6,r5,255
10002a48:	3008923a 	slli	r4,r6,8
10002a4c:	218cb03a 	or	r6,r4,r6
10002a50:	3008943a 	slli	r4,r6,16
10002a54:	218cb03a 	or	r6,r4,r6
10002a58:	010003c4 	movi	r4,15
10002a5c:	21c0182e 	bgeu	r4,r7,10002ac0 <memset+0xc8>
10002a60:	3b3ffc04 	addi	r12,r7,-16
10002a64:	6018d13a 	srli	r12,r12,4
10002a68:	1a000104 	addi	r8,r3,4
10002a6c:	1ac00204 	addi	r11,r3,8
10002a70:	6008913a 	slli	r4,r12,4
10002a74:	1a800304 	addi	r10,r3,12
10002a78:	1813883a 	mov	r9,r3
10002a7c:	21000504 	addi	r4,r4,20
10002a80:	1909883a 	add	r4,r3,r4
10002a84:	49800015 	stw	r6,0(r9)
10002a88:	41800015 	stw	r6,0(r8)
10002a8c:	59800015 	stw	r6,0(r11)
10002a90:	51800015 	stw	r6,0(r10)
10002a94:	42000404 	addi	r8,r8,16
10002a98:	4a400404 	addi	r9,r9,16
10002a9c:	5ac00404 	addi	r11,r11,16
10002aa0:	52800404 	addi	r10,r10,16
10002aa4:	413ff71e 	bne	r8,r4,10002a84 <__alt_data_end+0xf8002a84>
10002aa8:	63000044 	addi	r12,r12,1
10002aac:	6018913a 	slli	r12,r12,4
10002ab0:	39c003cc 	andi	r7,r7,15
10002ab4:	010000c4 	movi	r4,3
10002ab8:	1b07883a 	add	r3,r3,r12
10002abc:	21c00e2e 	bgeu	r4,r7,10002af8 <memset+0x100>
10002ac0:	1813883a 	mov	r9,r3
10002ac4:	3811883a 	mov	r8,r7
10002ac8:	010000c4 	movi	r4,3
10002acc:	49800015 	stw	r6,0(r9)
10002ad0:	423fff04 	addi	r8,r8,-4
10002ad4:	4a400104 	addi	r9,r9,4
10002ad8:	223ffc36 	bltu	r4,r8,10002acc <__alt_data_end+0xf8002acc>
10002adc:	393fff04 	addi	r4,r7,-4
10002ae0:	2008d0ba 	srli	r4,r4,2
10002ae4:	39c000cc 	andi	r7,r7,3
10002ae8:	21000044 	addi	r4,r4,1
10002aec:	2109883a 	add	r4,r4,r4
10002af0:	2109883a 	add	r4,r4,r4
10002af4:	1907883a 	add	r3,r3,r4
10002af8:	38000426 	beq	r7,zero,10002b0c <memset+0x114>
10002afc:	19cf883a 	add	r7,r3,r7
10002b00:	19400005 	stb	r5,0(r3)
10002b04:	18c00044 	addi	r3,r3,1
10002b08:	19fffd1e 	bne	r3,r7,10002b00 <__alt_data_end+0xf8002b00>
10002b0c:	f800283a 	ret
10002b10:	2007883a 	mov	r3,r4
10002b14:	300f883a 	mov	r7,r6
10002b18:	003fc806 	br	10002a3c <__alt_data_end+0xf8002a3c>

10002b1c <__sread>:
10002b1c:	defffe04 	addi	sp,sp,-8
10002b20:	dc000015 	stw	r16,0(sp)
10002b24:	2821883a 	mov	r16,r5
10002b28:	2940038f 	ldh	r5,14(r5)
10002b2c:	dfc00115 	stw	ra,4(sp)
10002b30:	0002f240 	call	10002f24 <_read_r>
10002b34:	10000716 	blt	r2,zero,10002b54 <__sread+0x38>
10002b38:	80c01417 	ldw	r3,80(r16)
10002b3c:	1887883a 	add	r3,r3,r2
10002b40:	80c01415 	stw	r3,80(r16)
10002b44:	dfc00117 	ldw	ra,4(sp)
10002b48:	dc000017 	ldw	r16,0(sp)
10002b4c:	dec00204 	addi	sp,sp,8
10002b50:	f800283a 	ret
10002b54:	80c0030b 	ldhu	r3,12(r16)
10002b58:	18fbffcc 	andi	r3,r3,61439
10002b5c:	80c0030d 	sth	r3,12(r16)
10002b60:	dfc00117 	ldw	ra,4(sp)
10002b64:	dc000017 	ldw	r16,0(sp)
10002b68:	dec00204 	addi	sp,sp,8
10002b6c:	f800283a 	ret

10002b70 <__seofread>:
10002b70:	0005883a 	mov	r2,zero
10002b74:	f800283a 	ret

10002b78 <__swrite>:
10002b78:	2880030b 	ldhu	r2,12(r5)
10002b7c:	defffb04 	addi	sp,sp,-20
10002b80:	dcc00315 	stw	r19,12(sp)
10002b84:	dc800215 	stw	r18,8(sp)
10002b88:	dc400115 	stw	r17,4(sp)
10002b8c:	dc000015 	stw	r16,0(sp)
10002b90:	dfc00415 	stw	ra,16(sp)
10002b94:	10c0400c 	andi	r3,r2,256
10002b98:	2821883a 	mov	r16,r5
10002b9c:	2027883a 	mov	r19,r4
10002ba0:	3025883a 	mov	r18,r6
10002ba4:	3823883a 	mov	r17,r7
10002ba8:	18000526 	beq	r3,zero,10002bc0 <__swrite+0x48>
10002bac:	2940038f 	ldh	r5,14(r5)
10002bb0:	000d883a 	mov	r6,zero
10002bb4:	01c00084 	movi	r7,2
10002bb8:	0002ec80 	call	10002ec8 <_lseek_r>
10002bbc:	8080030b 	ldhu	r2,12(r16)
10002bc0:	8140038f 	ldh	r5,14(r16)
10002bc4:	10bbffcc 	andi	r2,r2,61439
10002bc8:	9809883a 	mov	r4,r19
10002bcc:	900d883a 	mov	r6,r18
10002bd0:	880f883a 	mov	r7,r17
10002bd4:	8080030d 	sth	r2,12(r16)
10002bd8:	dfc00417 	ldw	ra,16(sp)
10002bdc:	dcc00317 	ldw	r19,12(sp)
10002be0:	dc800217 	ldw	r18,8(sp)
10002be4:	dc400117 	ldw	r17,4(sp)
10002be8:	dc000017 	ldw	r16,0(sp)
10002bec:	dec00504 	addi	sp,sp,20
10002bf0:	0002c581 	jmpi	10002c58 <_write_r>

10002bf4 <__sseek>:
10002bf4:	defffe04 	addi	sp,sp,-8
10002bf8:	dc000015 	stw	r16,0(sp)
10002bfc:	2821883a 	mov	r16,r5
10002c00:	2940038f 	ldh	r5,14(r5)
10002c04:	dfc00115 	stw	ra,4(sp)
10002c08:	0002ec80 	call	10002ec8 <_lseek_r>
10002c0c:	00ffffc4 	movi	r3,-1
10002c10:	10c00826 	beq	r2,r3,10002c34 <__sseek+0x40>
10002c14:	80c0030b 	ldhu	r3,12(r16)
10002c18:	80801415 	stw	r2,80(r16)
10002c1c:	18c40014 	ori	r3,r3,4096
10002c20:	80c0030d 	sth	r3,12(r16)
10002c24:	dfc00117 	ldw	ra,4(sp)
10002c28:	dc000017 	ldw	r16,0(sp)
10002c2c:	dec00204 	addi	sp,sp,8
10002c30:	f800283a 	ret
10002c34:	80c0030b 	ldhu	r3,12(r16)
10002c38:	18fbffcc 	andi	r3,r3,61439
10002c3c:	80c0030d 	sth	r3,12(r16)
10002c40:	dfc00117 	ldw	ra,4(sp)
10002c44:	dc000017 	ldw	r16,0(sp)
10002c48:	dec00204 	addi	sp,sp,8
10002c4c:	f800283a 	ret

10002c50 <__sclose>:
10002c50:	2940038f 	ldh	r5,14(r5)
10002c54:	0002cb41 	jmpi	10002cb4 <_close_r>

10002c58 <_write_r>:
10002c58:	defffd04 	addi	sp,sp,-12
10002c5c:	dc000015 	stw	r16,0(sp)
10002c60:	04040074 	movhi	r16,4097
10002c64:	dc400115 	stw	r17,4(sp)
10002c68:	84232504 	addi	r16,r16,-29548
10002c6c:	2023883a 	mov	r17,r4
10002c70:	2809883a 	mov	r4,r5
10002c74:	300b883a 	mov	r5,r6
10002c78:	380d883a 	mov	r6,r7
10002c7c:	dfc00215 	stw	ra,8(sp)
10002c80:	80000015 	stw	zero,0(r16)
10002c84:	000389c0 	call	1000389c <write>
10002c88:	00ffffc4 	movi	r3,-1
10002c8c:	10c00526 	beq	r2,r3,10002ca4 <_write_r+0x4c>
10002c90:	dfc00217 	ldw	ra,8(sp)
10002c94:	dc400117 	ldw	r17,4(sp)
10002c98:	dc000017 	ldw	r16,0(sp)
10002c9c:	dec00304 	addi	sp,sp,12
10002ca0:	f800283a 	ret
10002ca4:	80c00017 	ldw	r3,0(r16)
10002ca8:	183ff926 	beq	r3,zero,10002c90 <__alt_data_end+0xf8002c90>
10002cac:	88c00015 	stw	r3,0(r17)
10002cb0:	003ff706 	br	10002c90 <__alt_data_end+0xf8002c90>

10002cb4 <_close_r>:
10002cb4:	defffd04 	addi	sp,sp,-12
10002cb8:	dc000015 	stw	r16,0(sp)
10002cbc:	04040074 	movhi	r16,4097
10002cc0:	dc400115 	stw	r17,4(sp)
10002cc4:	84232504 	addi	r16,r16,-29548
10002cc8:	2023883a 	mov	r17,r4
10002ccc:	2809883a 	mov	r4,r5
10002cd0:	dfc00215 	stw	ra,8(sp)
10002cd4:	80000015 	stw	zero,0(r16)
10002cd8:	0002ff80 	call	10002ff8 <close>
10002cdc:	00ffffc4 	movi	r3,-1
10002ce0:	10c00526 	beq	r2,r3,10002cf8 <_close_r+0x44>
10002ce4:	dfc00217 	ldw	ra,8(sp)
10002ce8:	dc400117 	ldw	r17,4(sp)
10002cec:	dc000017 	ldw	r16,0(sp)
10002cf0:	dec00304 	addi	sp,sp,12
10002cf4:	f800283a 	ret
10002cf8:	80c00017 	ldw	r3,0(r16)
10002cfc:	183ff926 	beq	r3,zero,10002ce4 <__alt_data_end+0xf8002ce4>
10002d00:	88c00015 	stw	r3,0(r17)
10002d04:	003ff706 	br	10002ce4 <__alt_data_end+0xf8002ce4>

10002d08 <_fclose_r>:
10002d08:	28003226 	beq	r5,zero,10002dd4 <_fclose_r+0xcc>
10002d0c:	defffc04 	addi	sp,sp,-16
10002d10:	dc400115 	stw	r17,4(sp)
10002d14:	2023883a 	mov	r17,r4
10002d18:	dc000015 	stw	r16,0(sp)
10002d1c:	dfc00315 	stw	ra,12(sp)
10002d20:	dc800215 	stw	r18,8(sp)
10002d24:	2821883a 	mov	r16,r5
10002d28:	000227c0 	call	1000227c <__sfp_lock_acquire>
10002d2c:	88000226 	beq	r17,zero,10002d38 <_fclose_r+0x30>
10002d30:	88800e17 	ldw	r2,56(r17)
10002d34:	10002926 	beq	r2,zero,10002ddc <_fclose_r+0xd4>
10002d38:	8080030f 	ldh	r2,12(r16)
10002d3c:	10002226 	beq	r2,zero,10002dc8 <_fclose_r+0xc0>
10002d40:	8809883a 	mov	r4,r17
10002d44:	800b883a 	mov	r5,r16
10002d48:	0001cb00 	call	10001cb0 <_fflush_r>
10002d4c:	1025883a 	mov	r18,r2
10002d50:	80800b17 	ldw	r2,44(r16)
10002d54:	10000426 	beq	r2,zero,10002d68 <_fclose_r+0x60>
10002d58:	81400717 	ldw	r5,28(r16)
10002d5c:	8809883a 	mov	r4,r17
10002d60:	103ee83a 	callr	r2
10002d64:	10002616 	blt	r2,zero,10002e00 <_fclose_r+0xf8>
10002d68:	8080030b 	ldhu	r2,12(r16)
10002d6c:	1080200c 	andi	r2,r2,128
10002d70:	10001f1e 	bne	r2,zero,10002df0 <_fclose_r+0xe8>
10002d74:	81400c17 	ldw	r5,48(r16)
10002d78:	28000526 	beq	r5,zero,10002d90 <_fclose_r+0x88>
10002d7c:	80801004 	addi	r2,r16,64
10002d80:	28800226 	beq	r5,r2,10002d8c <_fclose_r+0x84>
10002d84:	8809883a 	mov	r4,r17
10002d88:	00023e00 	call	100023e0 <_free_r>
10002d8c:	80000c15 	stw	zero,48(r16)
10002d90:	81401117 	ldw	r5,68(r16)
10002d94:	28000326 	beq	r5,zero,10002da4 <_fclose_r+0x9c>
10002d98:	8809883a 	mov	r4,r17
10002d9c:	00023e00 	call	100023e0 <_free_r>
10002da0:	80001115 	stw	zero,68(r16)
10002da4:	8000030d 	sth	zero,12(r16)
10002da8:	00022800 	call	10002280 <__sfp_lock_release>
10002dac:	9005883a 	mov	r2,r18
10002db0:	dfc00317 	ldw	ra,12(sp)
10002db4:	dc800217 	ldw	r18,8(sp)
10002db8:	dc400117 	ldw	r17,4(sp)
10002dbc:	dc000017 	ldw	r16,0(sp)
10002dc0:	dec00404 	addi	sp,sp,16
10002dc4:	f800283a 	ret
10002dc8:	00022800 	call	10002280 <__sfp_lock_release>
10002dcc:	0005883a 	mov	r2,zero
10002dd0:	003ff706 	br	10002db0 <__alt_data_end+0xf8002db0>
10002dd4:	0005883a 	mov	r2,zero
10002dd8:	f800283a 	ret
10002ddc:	8809883a 	mov	r4,r17
10002de0:	000226c0 	call	1000226c <__sinit>
10002de4:	8080030f 	ldh	r2,12(r16)
10002de8:	103fd51e 	bne	r2,zero,10002d40 <__alt_data_end+0xf8002d40>
10002dec:	003ff606 	br	10002dc8 <__alt_data_end+0xf8002dc8>
10002df0:	81400417 	ldw	r5,16(r16)
10002df4:	8809883a 	mov	r4,r17
10002df8:	00023e00 	call	100023e0 <_free_r>
10002dfc:	003fdd06 	br	10002d74 <__alt_data_end+0xf8002d74>
10002e00:	04bfffc4 	movi	r18,-1
10002e04:	003fd806 	br	10002d68 <__alt_data_end+0xf8002d68>

10002e08 <fclose>:
10002e08:	00840034 	movhi	r2,4096
10002e0c:	109c7a04 	addi	r2,r2,29160
10002e10:	200b883a 	mov	r5,r4
10002e14:	11000017 	ldw	r4,0(r2)
10002e18:	0002d081 	jmpi	10002d08 <_fclose_r>

10002e1c <_fstat_r>:
10002e1c:	defffd04 	addi	sp,sp,-12
10002e20:	dc000015 	stw	r16,0(sp)
10002e24:	04040074 	movhi	r16,4097
10002e28:	dc400115 	stw	r17,4(sp)
10002e2c:	84232504 	addi	r16,r16,-29548
10002e30:	2023883a 	mov	r17,r4
10002e34:	2809883a 	mov	r4,r5
10002e38:	300b883a 	mov	r5,r6
10002e3c:	dfc00215 	stw	ra,8(sp)
10002e40:	80000015 	stw	zero,0(r16)
10002e44:	000314c0 	call	1000314c <fstat>
10002e48:	00ffffc4 	movi	r3,-1
10002e4c:	10c00526 	beq	r2,r3,10002e64 <_fstat_r+0x48>
10002e50:	dfc00217 	ldw	ra,8(sp)
10002e54:	dc400117 	ldw	r17,4(sp)
10002e58:	dc000017 	ldw	r16,0(sp)
10002e5c:	dec00304 	addi	sp,sp,12
10002e60:	f800283a 	ret
10002e64:	80c00017 	ldw	r3,0(r16)
10002e68:	183ff926 	beq	r3,zero,10002e50 <__alt_data_end+0xf8002e50>
10002e6c:	88c00015 	stw	r3,0(r17)
10002e70:	003ff706 	br	10002e50 <__alt_data_end+0xf8002e50>

10002e74 <_isatty_r>:
10002e74:	defffd04 	addi	sp,sp,-12
10002e78:	dc000015 	stw	r16,0(sp)
10002e7c:	04040074 	movhi	r16,4097
10002e80:	dc400115 	stw	r17,4(sp)
10002e84:	84232504 	addi	r16,r16,-29548
10002e88:	2023883a 	mov	r17,r4
10002e8c:	2809883a 	mov	r4,r5
10002e90:	dfc00215 	stw	ra,8(sp)
10002e94:	80000015 	stw	zero,0(r16)
10002e98:	00032540 	call	10003254 <isatty>
10002e9c:	00ffffc4 	movi	r3,-1
10002ea0:	10c00526 	beq	r2,r3,10002eb8 <_isatty_r+0x44>
10002ea4:	dfc00217 	ldw	ra,8(sp)
10002ea8:	dc400117 	ldw	r17,4(sp)
10002eac:	dc000017 	ldw	r16,0(sp)
10002eb0:	dec00304 	addi	sp,sp,12
10002eb4:	f800283a 	ret
10002eb8:	80c00017 	ldw	r3,0(r16)
10002ebc:	183ff926 	beq	r3,zero,10002ea4 <__alt_data_end+0xf8002ea4>
10002ec0:	88c00015 	stw	r3,0(r17)
10002ec4:	003ff706 	br	10002ea4 <__alt_data_end+0xf8002ea4>

10002ec8 <_lseek_r>:
10002ec8:	defffd04 	addi	sp,sp,-12
10002ecc:	dc000015 	stw	r16,0(sp)
10002ed0:	04040074 	movhi	r16,4097
10002ed4:	dc400115 	stw	r17,4(sp)
10002ed8:	84232504 	addi	r16,r16,-29548
10002edc:	2023883a 	mov	r17,r4
10002ee0:	2809883a 	mov	r4,r5
10002ee4:	300b883a 	mov	r5,r6
10002ee8:	380d883a 	mov	r6,r7
10002eec:	dfc00215 	stw	ra,8(sp)
10002ef0:	80000015 	stw	zero,0(r16)
10002ef4:	00034340 	call	10003434 <lseek>
10002ef8:	00ffffc4 	movi	r3,-1
10002efc:	10c00526 	beq	r2,r3,10002f14 <_lseek_r+0x4c>
10002f00:	dfc00217 	ldw	ra,8(sp)
10002f04:	dc400117 	ldw	r17,4(sp)
10002f08:	dc000017 	ldw	r16,0(sp)
10002f0c:	dec00304 	addi	sp,sp,12
10002f10:	f800283a 	ret
10002f14:	80c00017 	ldw	r3,0(r16)
10002f18:	183ff926 	beq	r3,zero,10002f00 <__alt_data_end+0xf8002f00>
10002f1c:	88c00015 	stw	r3,0(r17)
10002f20:	003ff706 	br	10002f00 <__alt_data_end+0xf8002f00>

10002f24 <_read_r>:
10002f24:	defffd04 	addi	sp,sp,-12
10002f28:	dc000015 	stw	r16,0(sp)
10002f2c:	04040074 	movhi	r16,4097
10002f30:	dc400115 	stw	r17,4(sp)
10002f34:	84232504 	addi	r16,r16,-29548
10002f38:	2023883a 	mov	r17,r4
10002f3c:	2809883a 	mov	r4,r5
10002f40:	300b883a 	mov	r5,r6
10002f44:	380d883a 	mov	r6,r7
10002f48:	dfc00215 	stw	ra,8(sp)
10002f4c:	80000015 	stw	zero,0(r16)
10002f50:	00036180 	call	10003618 <read>
10002f54:	00ffffc4 	movi	r3,-1
10002f58:	10c00526 	beq	r2,r3,10002f70 <_read_r+0x4c>
10002f5c:	dfc00217 	ldw	ra,8(sp)
10002f60:	dc400117 	ldw	r17,4(sp)
10002f64:	dc000017 	ldw	r16,0(sp)
10002f68:	dec00304 	addi	sp,sp,12
10002f6c:	f800283a 	ret
10002f70:	80c00017 	ldw	r3,0(r16)
10002f74:	183ff926 	beq	r3,zero,10002f5c <__alt_data_end+0xf8002f5c>
10002f78:	88c00015 	stw	r3,0(r17)
10002f7c:	003ff706 	br	10002f5c <__alt_data_end+0xf8002f5c>

10002f80 <__mulsi3>:
10002f80:	0005883a 	mov	r2,zero
10002f84:	20000726 	beq	r4,zero,10002fa4 <__mulsi3+0x24>
10002f88:	20c0004c 	andi	r3,r4,1
10002f8c:	2008d07a 	srli	r4,r4,1
10002f90:	18000126 	beq	r3,zero,10002f98 <__mulsi3+0x18>
10002f94:	1145883a 	add	r2,r2,r5
10002f98:	294b883a 	add	r5,r5,r5
10002f9c:	203ffa1e 	bne	r4,zero,10002f88 <__alt_data_end+0xf8002f88>
10002fa0:	f800283a 	ret
10002fa4:	f800283a 	ret

10002fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002fa8:	defffe04 	addi	sp,sp,-8
10002fac:	dfc00115 	stw	ra,4(sp)
10002fb0:	df000015 	stw	fp,0(sp)
10002fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002fb8:	00840034 	movhi	r2,4096
10002fbc:	109c8204 	addi	r2,r2,29192
10002fc0:	10800017 	ldw	r2,0(r2)
10002fc4:	10000526 	beq	r2,zero,10002fdc <alt_get_errno+0x34>
10002fc8:	00840034 	movhi	r2,4096
10002fcc:	109c8204 	addi	r2,r2,29192
10002fd0:	10800017 	ldw	r2,0(r2)
10002fd4:	103ee83a 	callr	r2
10002fd8:	00000206 	br	10002fe4 <alt_get_errno+0x3c>
10002fdc:	00840074 	movhi	r2,4097
10002fe0:	10a32504 	addi	r2,r2,-29548
}
10002fe4:	e037883a 	mov	sp,fp
10002fe8:	dfc00117 	ldw	ra,4(sp)
10002fec:	df000017 	ldw	fp,0(sp)
10002ff0:	dec00204 	addi	sp,sp,8
10002ff4:	f800283a 	ret

10002ff8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10002ff8:	defffb04 	addi	sp,sp,-20
10002ffc:	dfc00415 	stw	ra,16(sp)
10003000:	df000315 	stw	fp,12(sp)
10003004:	df000304 	addi	fp,sp,12
10003008:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000300c:	e0bfff17 	ldw	r2,-4(fp)
10003010:	10000816 	blt	r2,zero,10003034 <close+0x3c>
10003014:	e13fff17 	ldw	r4,-4(fp)
10003018:	01400304 	movi	r5,12
1000301c:	0002f800 	call	10002f80 <__mulsi3>
10003020:	1007883a 	mov	r3,r2
10003024:	00840034 	movhi	r2,4096
10003028:	10980104 	addi	r2,r2,24580
1000302c:	1885883a 	add	r2,r3,r2
10003030:	00000106 	br	10003038 <close+0x40>
10003034:	0005883a 	mov	r2,zero
10003038:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000303c:	e0bffd17 	ldw	r2,-12(fp)
10003040:	10001926 	beq	r2,zero,100030a8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10003044:	e0bffd17 	ldw	r2,-12(fp)
10003048:	10800017 	ldw	r2,0(r2)
1000304c:	10800417 	ldw	r2,16(r2)
10003050:	10000626 	beq	r2,zero,1000306c <close+0x74>
10003054:	e0bffd17 	ldw	r2,-12(fp)
10003058:	10800017 	ldw	r2,0(r2)
1000305c:	10800417 	ldw	r2,16(r2)
10003060:	e13ffd17 	ldw	r4,-12(fp)
10003064:	103ee83a 	callr	r2
10003068:	00000106 	br	10003070 <close+0x78>
1000306c:	0005883a 	mov	r2,zero
10003070:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10003074:	e13fff17 	ldw	r4,-4(fp)
10003078:	000371c0 	call	1000371c <alt_release_fd>
    if (rval < 0)
1000307c:	e0bffe17 	ldw	r2,-8(fp)
10003080:	1000070e 	bge	r2,zero,100030a0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10003084:	0002fa80 	call	10002fa8 <alt_get_errno>
10003088:	1007883a 	mov	r3,r2
1000308c:	e0bffe17 	ldw	r2,-8(fp)
10003090:	0085c83a 	sub	r2,zero,r2
10003094:	18800015 	stw	r2,0(r3)
      return -1;
10003098:	00bfffc4 	movi	r2,-1
1000309c:	00000706 	br	100030bc <close+0xc4>
    }
    return 0;
100030a0:	0005883a 	mov	r2,zero
100030a4:	00000506 	br	100030bc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100030a8:	0002fa80 	call	10002fa8 <alt_get_errno>
100030ac:	1007883a 	mov	r3,r2
100030b0:	00801444 	movi	r2,81
100030b4:	18800015 	stw	r2,0(r3)
    return -1;
100030b8:	00bfffc4 	movi	r2,-1
  }
}
100030bc:	e037883a 	mov	sp,fp
100030c0:	dfc00117 	ldw	ra,4(sp)
100030c4:	df000017 	ldw	fp,0(sp)
100030c8:	dec00204 	addi	sp,sp,8
100030cc:	f800283a 	ret

100030d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100030d0:	defffc04 	addi	sp,sp,-16
100030d4:	df000315 	stw	fp,12(sp)
100030d8:	df000304 	addi	fp,sp,12
100030dc:	e13ffd15 	stw	r4,-12(fp)
100030e0:	e17ffe15 	stw	r5,-8(fp)
100030e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
100030e8:	e0bfff17 	ldw	r2,-4(fp)
}
100030ec:	e037883a 	mov	sp,fp
100030f0:	df000017 	ldw	fp,0(sp)
100030f4:	dec00104 	addi	sp,sp,4
100030f8:	f800283a 	ret

100030fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100030fc:	defffe04 	addi	sp,sp,-8
10003100:	dfc00115 	stw	ra,4(sp)
10003104:	df000015 	stw	fp,0(sp)
10003108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000310c:	00840034 	movhi	r2,4096
10003110:	109c8204 	addi	r2,r2,29192
10003114:	10800017 	ldw	r2,0(r2)
10003118:	10000526 	beq	r2,zero,10003130 <alt_get_errno+0x34>
1000311c:	00840034 	movhi	r2,4096
10003120:	109c8204 	addi	r2,r2,29192
10003124:	10800017 	ldw	r2,0(r2)
10003128:	103ee83a 	callr	r2
1000312c:	00000206 	br	10003138 <alt_get_errno+0x3c>
10003130:	00840074 	movhi	r2,4097
10003134:	10a32504 	addi	r2,r2,-29548
}
10003138:	e037883a 	mov	sp,fp
1000313c:	dfc00117 	ldw	ra,4(sp)
10003140:	df000017 	ldw	fp,0(sp)
10003144:	dec00204 	addi	sp,sp,8
10003148:	f800283a 	ret

1000314c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000314c:	defffb04 	addi	sp,sp,-20
10003150:	dfc00415 	stw	ra,16(sp)
10003154:	df000315 	stw	fp,12(sp)
10003158:	df000304 	addi	fp,sp,12
1000315c:	e13ffe15 	stw	r4,-8(fp)
10003160:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003164:	e0bffe17 	ldw	r2,-8(fp)
10003168:	10000816 	blt	r2,zero,1000318c <fstat+0x40>
1000316c:	e13ffe17 	ldw	r4,-8(fp)
10003170:	01400304 	movi	r5,12
10003174:	0002f800 	call	10002f80 <__mulsi3>
10003178:	1007883a 	mov	r3,r2
1000317c:	00840034 	movhi	r2,4096
10003180:	10980104 	addi	r2,r2,24580
10003184:	1885883a 	add	r2,r3,r2
10003188:	00000106 	br	10003190 <fstat+0x44>
1000318c:	0005883a 	mov	r2,zero
10003190:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10003194:	e0bffd17 	ldw	r2,-12(fp)
10003198:	10001026 	beq	r2,zero,100031dc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000319c:	e0bffd17 	ldw	r2,-12(fp)
100031a0:	10800017 	ldw	r2,0(r2)
100031a4:	10800817 	ldw	r2,32(r2)
100031a8:	10000726 	beq	r2,zero,100031c8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100031ac:	e0bffd17 	ldw	r2,-12(fp)
100031b0:	10800017 	ldw	r2,0(r2)
100031b4:	10800817 	ldw	r2,32(r2)
100031b8:	e13ffd17 	ldw	r4,-12(fp)
100031bc:	e17fff17 	ldw	r5,-4(fp)
100031c0:	103ee83a 	callr	r2
100031c4:	00000a06 	br	100031f0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100031c8:	e0bfff17 	ldw	r2,-4(fp)
100031cc:	00c80004 	movi	r3,8192
100031d0:	10c00115 	stw	r3,4(r2)
      return 0;
100031d4:	0005883a 	mov	r2,zero
100031d8:	00000506 	br	100031f0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100031dc:	00030fc0 	call	100030fc <alt_get_errno>
100031e0:	1007883a 	mov	r3,r2
100031e4:	00801444 	movi	r2,81
100031e8:	18800015 	stw	r2,0(r3)
    return -1;
100031ec:	00bfffc4 	movi	r2,-1
  }
}
100031f0:	e037883a 	mov	sp,fp
100031f4:	dfc00117 	ldw	ra,4(sp)
100031f8:	df000017 	ldw	fp,0(sp)
100031fc:	dec00204 	addi	sp,sp,8
10003200:	f800283a 	ret

10003204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003204:	defffe04 	addi	sp,sp,-8
10003208:	dfc00115 	stw	ra,4(sp)
1000320c:	df000015 	stw	fp,0(sp)
10003210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003214:	00840034 	movhi	r2,4096
10003218:	109c8204 	addi	r2,r2,29192
1000321c:	10800017 	ldw	r2,0(r2)
10003220:	10000526 	beq	r2,zero,10003238 <alt_get_errno+0x34>
10003224:	00840034 	movhi	r2,4096
10003228:	109c8204 	addi	r2,r2,29192
1000322c:	10800017 	ldw	r2,0(r2)
10003230:	103ee83a 	callr	r2
10003234:	00000206 	br	10003240 <alt_get_errno+0x3c>
10003238:	00840074 	movhi	r2,4097
1000323c:	10a32504 	addi	r2,r2,-29548
}
10003240:	e037883a 	mov	sp,fp
10003244:	dfc00117 	ldw	ra,4(sp)
10003248:	df000017 	ldw	fp,0(sp)
1000324c:	dec00204 	addi	sp,sp,8
10003250:	f800283a 	ret

10003254 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10003254:	deffed04 	addi	sp,sp,-76
10003258:	dfc01215 	stw	ra,72(sp)
1000325c:	df001115 	stw	fp,68(sp)
10003260:	df001104 	addi	fp,sp,68
10003264:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003268:	e0bfff17 	ldw	r2,-4(fp)
1000326c:	10000816 	blt	r2,zero,10003290 <isatty+0x3c>
10003270:	e13fff17 	ldw	r4,-4(fp)
10003274:	01400304 	movi	r5,12
10003278:	0002f800 	call	10002f80 <__mulsi3>
1000327c:	1007883a 	mov	r3,r2
10003280:	00840034 	movhi	r2,4096
10003284:	10980104 	addi	r2,r2,24580
10003288:	1885883a 	add	r2,r3,r2
1000328c:	00000106 	br	10003294 <isatty+0x40>
10003290:	0005883a 	mov	r2,zero
10003294:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10003298:	e0bfef17 	ldw	r2,-68(fp)
1000329c:	10000e26 	beq	r2,zero,100032d8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100032a0:	e0bfef17 	ldw	r2,-68(fp)
100032a4:	10800017 	ldw	r2,0(r2)
100032a8:	10800817 	ldw	r2,32(r2)
100032ac:	1000021e 	bne	r2,zero,100032b8 <isatty+0x64>
    {
      return 1;
100032b0:	00800044 	movi	r2,1
100032b4:	00000d06 	br	100032ec <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100032b8:	e0bff004 	addi	r2,fp,-64
100032bc:	e13fff17 	ldw	r4,-4(fp)
100032c0:	100b883a 	mov	r5,r2
100032c4:	000314c0 	call	1000314c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100032c8:	e0bff117 	ldw	r2,-60(fp)
100032cc:	10880020 	cmpeqi	r2,r2,8192
100032d0:	10803fcc 	andi	r2,r2,255
100032d4:	00000506 	br	100032ec <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100032d8:	00032040 	call	10003204 <alt_get_errno>
100032dc:	1007883a 	mov	r3,r2
100032e0:	00801444 	movi	r2,81
100032e4:	18800015 	stw	r2,0(r3)
    return 0;
100032e8:	0005883a 	mov	r2,zero
  }
}
100032ec:	e037883a 	mov	sp,fp
100032f0:	dfc00117 	ldw	ra,4(sp)
100032f4:	df000017 	ldw	fp,0(sp)
100032f8:	dec00204 	addi	sp,sp,8
100032fc:	f800283a 	ret

10003300 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10003300:	defffc04 	addi	sp,sp,-16
10003304:	df000315 	stw	fp,12(sp)
10003308:	df000304 	addi	fp,sp,12
1000330c:	e13ffd15 	stw	r4,-12(fp)
10003310:	e17ffe15 	stw	r5,-8(fp)
10003314:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10003318:	e0fffe17 	ldw	r3,-8(fp)
1000331c:	e0bffd17 	ldw	r2,-12(fp)
10003320:	18800c26 	beq	r3,r2,10003354 <alt_load_section+0x54>
  {
    while( to != end )
10003324:	00000806 	br	10003348 <alt_load_section+0x48>
    {
      *to++ = *from++;
10003328:	e0bffe17 	ldw	r2,-8(fp)
1000332c:	10c00104 	addi	r3,r2,4
10003330:	e0fffe15 	stw	r3,-8(fp)
10003334:	e0fffd17 	ldw	r3,-12(fp)
10003338:	19000104 	addi	r4,r3,4
1000333c:	e13ffd15 	stw	r4,-12(fp)
10003340:	18c00017 	ldw	r3,0(r3)
10003344:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003348:	e0fffe17 	ldw	r3,-8(fp)
1000334c:	e0bfff17 	ldw	r2,-4(fp)
10003350:	18bff51e 	bne	r3,r2,10003328 <__alt_data_end+0xf8003328>
    {
      *to++ = *from++;
    }
  }
}
10003354:	e037883a 	mov	sp,fp
10003358:	df000017 	ldw	fp,0(sp)
1000335c:	dec00104 	addi	sp,sp,4
10003360:	f800283a 	ret

10003364 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003364:	defffe04 	addi	sp,sp,-8
10003368:	dfc00115 	stw	ra,4(sp)
1000336c:	df000015 	stw	fp,0(sp)
10003370:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003374:	01040034 	movhi	r4,4096
10003378:	211c8704 	addi	r4,r4,29212
1000337c:	01440034 	movhi	r5,4096
10003380:	2955ec04 	addi	r5,r5,22448
10003384:	01840034 	movhi	r6,4096
10003388:	319c8704 	addi	r6,r6,29212
1000338c:	00033000 	call	10003300 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10003390:	01040034 	movhi	r4,4096
10003394:	21000804 	addi	r4,r4,32
10003398:	01440034 	movhi	r5,4096
1000339c:	29400804 	addi	r5,r5,32
100033a0:	01840034 	movhi	r6,4096
100033a4:	31808b04 	addi	r6,r6,556
100033a8:	00033000 	call	10003300 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100033ac:	01040034 	movhi	r4,4096
100033b0:	2115c004 	addi	r4,r4,22272
100033b4:	01440034 	movhi	r5,4096
100033b8:	2955c004 	addi	r5,r5,22272
100033bc:	01840034 	movhi	r6,4096
100033c0:	3195ec04 	addi	r6,r6,22448
100033c4:	00033000 	call	10003300 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100033c8:	00045dc0 	call	100045dc <alt_dcache_flush_all>
  alt_icache_flush_all();
100033cc:	00047a40 	call	100047a4 <alt_icache_flush_all>
}
100033d0:	e037883a 	mov	sp,fp
100033d4:	dfc00117 	ldw	ra,4(sp)
100033d8:	df000017 	ldw	fp,0(sp)
100033dc:	dec00204 	addi	sp,sp,8
100033e0:	f800283a 	ret

100033e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100033e4:	defffe04 	addi	sp,sp,-8
100033e8:	dfc00115 	stw	ra,4(sp)
100033ec:	df000015 	stw	fp,0(sp)
100033f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100033f4:	00840034 	movhi	r2,4096
100033f8:	109c8204 	addi	r2,r2,29192
100033fc:	10800017 	ldw	r2,0(r2)
10003400:	10000526 	beq	r2,zero,10003418 <alt_get_errno+0x34>
10003404:	00840034 	movhi	r2,4096
10003408:	109c8204 	addi	r2,r2,29192
1000340c:	10800017 	ldw	r2,0(r2)
10003410:	103ee83a 	callr	r2
10003414:	00000206 	br	10003420 <alt_get_errno+0x3c>
10003418:	00840074 	movhi	r2,4097
1000341c:	10a32504 	addi	r2,r2,-29548
}
10003420:	e037883a 	mov	sp,fp
10003424:	dfc00117 	ldw	ra,4(sp)
10003428:	df000017 	ldw	fp,0(sp)
1000342c:	dec00204 	addi	sp,sp,8
10003430:	f800283a 	ret

10003434 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10003434:	defff904 	addi	sp,sp,-28
10003438:	dfc00615 	stw	ra,24(sp)
1000343c:	df000515 	stw	fp,20(sp)
10003440:	df000504 	addi	fp,sp,20
10003444:	e13ffd15 	stw	r4,-12(fp)
10003448:	e17ffe15 	stw	r5,-8(fp)
1000344c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10003450:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003454:	e0bffd17 	ldw	r2,-12(fp)
10003458:	10000816 	blt	r2,zero,1000347c <lseek+0x48>
1000345c:	e13ffd17 	ldw	r4,-12(fp)
10003460:	01400304 	movi	r5,12
10003464:	0002f800 	call	10002f80 <__mulsi3>
10003468:	1007883a 	mov	r3,r2
1000346c:	00840034 	movhi	r2,4096
10003470:	10980104 	addi	r2,r2,24580
10003474:	1885883a 	add	r2,r3,r2
10003478:	00000106 	br	10003480 <lseek+0x4c>
1000347c:	0005883a 	mov	r2,zero
10003480:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10003484:	e0bffc17 	ldw	r2,-16(fp)
10003488:	10001026 	beq	r2,zero,100034cc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000348c:	e0bffc17 	ldw	r2,-16(fp)
10003490:	10800017 	ldw	r2,0(r2)
10003494:	10800717 	ldw	r2,28(r2)
10003498:	10000926 	beq	r2,zero,100034c0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000349c:	e0bffc17 	ldw	r2,-16(fp)
100034a0:	10800017 	ldw	r2,0(r2)
100034a4:	10800717 	ldw	r2,28(r2)
100034a8:	e13ffc17 	ldw	r4,-16(fp)
100034ac:	e17ffe17 	ldw	r5,-8(fp)
100034b0:	e1bfff17 	ldw	r6,-4(fp)
100034b4:	103ee83a 	callr	r2
100034b8:	e0bffb15 	stw	r2,-20(fp)
100034bc:	00000506 	br	100034d4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100034c0:	00bfde84 	movi	r2,-134
100034c4:	e0bffb15 	stw	r2,-20(fp)
100034c8:	00000206 	br	100034d4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100034cc:	00bfebc4 	movi	r2,-81
100034d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100034d4:	e0bffb17 	ldw	r2,-20(fp)
100034d8:	1000070e 	bge	r2,zero,100034f8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100034dc:	00033e40 	call	100033e4 <alt_get_errno>
100034e0:	1007883a 	mov	r3,r2
100034e4:	e0bffb17 	ldw	r2,-20(fp)
100034e8:	0085c83a 	sub	r2,zero,r2
100034ec:	18800015 	stw	r2,0(r3)
    rc = -1;
100034f0:	00bfffc4 	movi	r2,-1
100034f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100034f8:	e0bffb17 	ldw	r2,-20(fp)
}
100034fc:	e037883a 	mov	sp,fp
10003500:	dfc00117 	ldw	ra,4(sp)
10003504:	df000017 	ldw	fp,0(sp)
10003508:	dec00204 	addi	sp,sp,8
1000350c:	f800283a 	ret

10003510 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10003510:	defffd04 	addi	sp,sp,-12
10003514:	dfc00215 	stw	ra,8(sp)
10003518:	df000115 	stw	fp,4(sp)
1000351c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10003520:	0009883a 	mov	r4,zero
10003524:	00039d40 	call	100039d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10003528:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000352c:	0003a080 	call	10003a08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10003530:	01040034 	movhi	r4,4096
10003534:	2115e204 	addi	r4,r4,22408
10003538:	01440034 	movhi	r5,4096
1000353c:	2955e204 	addi	r5,r5,22408
10003540:	01840034 	movhi	r6,4096
10003544:	3195e204 	addi	r6,r6,22408
10003548:	0004b700 	call	10004b70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000354c:	00046ec0 	call	100046ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10003550:	01040034 	movhi	r4,4096
10003554:	2111d204 	addi	r4,r4,18248
10003558:	000535c0 	call	1000535c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000355c:	d126ad17 	ldw	r4,-25932(gp)
10003560:	d0e6ae17 	ldw	r3,-25928(gp)
10003564:	d0a6af17 	ldw	r2,-25924(gp)
10003568:	180b883a 	mov	r5,r3
1000356c:	100d883a 	mov	r6,r2
10003570:	00003d40 	call	100003d4 <main>
10003574:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003578:	01000044 	movi	r4,1
1000357c:	0002ff80 	call	10002ff8 <close>
  exit (result);
10003580:	e13fff17 	ldw	r4,-4(fp)
10003584:	00053700 	call	10005370 <exit>

10003588 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10003588:	defffe04 	addi	sp,sp,-8
1000358c:	df000115 	stw	fp,4(sp)
10003590:	df000104 	addi	fp,sp,4
10003594:	e13fff15 	stw	r4,-4(fp)
}
10003598:	e037883a 	mov	sp,fp
1000359c:	df000017 	ldw	fp,0(sp)
100035a0:	dec00104 	addi	sp,sp,4
100035a4:	f800283a 	ret

100035a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100035a8:	defffe04 	addi	sp,sp,-8
100035ac:	df000115 	stw	fp,4(sp)
100035b0:	df000104 	addi	fp,sp,4
100035b4:	e13fff15 	stw	r4,-4(fp)
}
100035b8:	e037883a 	mov	sp,fp
100035bc:	df000017 	ldw	fp,0(sp)
100035c0:	dec00104 	addi	sp,sp,4
100035c4:	f800283a 	ret

100035c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100035c8:	defffe04 	addi	sp,sp,-8
100035cc:	dfc00115 	stw	ra,4(sp)
100035d0:	df000015 	stw	fp,0(sp)
100035d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100035d8:	00840034 	movhi	r2,4096
100035dc:	109c8204 	addi	r2,r2,29192
100035e0:	10800017 	ldw	r2,0(r2)
100035e4:	10000526 	beq	r2,zero,100035fc <alt_get_errno+0x34>
100035e8:	00840034 	movhi	r2,4096
100035ec:	109c8204 	addi	r2,r2,29192
100035f0:	10800017 	ldw	r2,0(r2)
100035f4:	103ee83a 	callr	r2
100035f8:	00000206 	br	10003604 <alt_get_errno+0x3c>
100035fc:	00840074 	movhi	r2,4097
10003600:	10a32504 	addi	r2,r2,-29548
}
10003604:	e037883a 	mov	sp,fp
10003608:	dfc00117 	ldw	ra,4(sp)
1000360c:	df000017 	ldw	fp,0(sp)
10003610:	dec00204 	addi	sp,sp,8
10003614:	f800283a 	ret

10003618 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10003618:	defff904 	addi	sp,sp,-28
1000361c:	dfc00615 	stw	ra,24(sp)
10003620:	df000515 	stw	fp,20(sp)
10003624:	df000504 	addi	fp,sp,20
10003628:	e13ffd15 	stw	r4,-12(fp)
1000362c:	e17ffe15 	stw	r5,-8(fp)
10003630:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003634:	e0bffd17 	ldw	r2,-12(fp)
10003638:	10000816 	blt	r2,zero,1000365c <read+0x44>
1000363c:	e13ffd17 	ldw	r4,-12(fp)
10003640:	01400304 	movi	r5,12
10003644:	0002f800 	call	10002f80 <__mulsi3>
10003648:	1007883a 	mov	r3,r2
1000364c:	00840034 	movhi	r2,4096
10003650:	10980104 	addi	r2,r2,24580
10003654:	1885883a 	add	r2,r3,r2
10003658:	00000106 	br	10003660 <read+0x48>
1000365c:	0005883a 	mov	r2,zero
10003660:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10003664:	e0bffb17 	ldw	r2,-20(fp)
10003668:	10002226 	beq	r2,zero,100036f4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000366c:	e0bffb17 	ldw	r2,-20(fp)
10003670:	10800217 	ldw	r2,8(r2)
10003674:	108000cc 	andi	r2,r2,3
10003678:	10800060 	cmpeqi	r2,r2,1
1000367c:	1000181e 	bne	r2,zero,100036e0 <read+0xc8>
        (fd->dev->read))
10003680:	e0bffb17 	ldw	r2,-20(fp)
10003684:	10800017 	ldw	r2,0(r2)
10003688:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000368c:	10001426 	beq	r2,zero,100036e0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10003690:	e0bffb17 	ldw	r2,-20(fp)
10003694:	10800017 	ldw	r2,0(r2)
10003698:	10800517 	ldw	r2,20(r2)
1000369c:	e0ffff17 	ldw	r3,-4(fp)
100036a0:	e13ffb17 	ldw	r4,-20(fp)
100036a4:	e17ffe17 	ldw	r5,-8(fp)
100036a8:	180d883a 	mov	r6,r3
100036ac:	103ee83a 	callr	r2
100036b0:	e0bffc15 	stw	r2,-16(fp)
100036b4:	e0bffc17 	ldw	r2,-16(fp)
100036b8:	1000070e 	bge	r2,zero,100036d8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100036bc:	00035c80 	call	100035c8 <alt_get_errno>
100036c0:	1007883a 	mov	r3,r2
100036c4:	e0bffc17 	ldw	r2,-16(fp)
100036c8:	0085c83a 	sub	r2,zero,r2
100036cc:	18800015 	stw	r2,0(r3)
          return -1;
100036d0:	00bfffc4 	movi	r2,-1
100036d4:	00000c06 	br	10003708 <read+0xf0>
        }
        return rval;
100036d8:	e0bffc17 	ldw	r2,-16(fp)
100036dc:	00000a06 	br	10003708 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100036e0:	00035c80 	call	100035c8 <alt_get_errno>
100036e4:	1007883a 	mov	r3,r2
100036e8:	00800344 	movi	r2,13
100036ec:	18800015 	stw	r2,0(r3)
100036f0:	00000406 	br	10003704 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100036f4:	00035c80 	call	100035c8 <alt_get_errno>
100036f8:	1007883a 	mov	r3,r2
100036fc:	00801444 	movi	r2,81
10003700:	18800015 	stw	r2,0(r3)
  }
  return -1;
10003704:	00bfffc4 	movi	r2,-1
}
10003708:	e037883a 	mov	sp,fp
1000370c:	dfc00117 	ldw	ra,4(sp)
10003710:	df000017 	ldw	fp,0(sp)
10003714:	dec00204 	addi	sp,sp,8
10003718:	f800283a 	ret

1000371c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000371c:	defffc04 	addi	sp,sp,-16
10003720:	dfc00315 	stw	ra,12(sp)
10003724:	df000215 	stw	fp,8(sp)
10003728:	dc000115 	stw	r16,4(sp)
1000372c:	df000204 	addi	fp,sp,8
10003730:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10003734:	e0bffe17 	ldw	r2,-8(fp)
10003738:	108000d0 	cmplti	r2,r2,3
1000373c:	1000111e 	bne	r2,zero,10003784 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10003740:	04040034 	movhi	r16,4096
10003744:	84180104 	addi	r16,r16,24580
10003748:	e0bffe17 	ldw	r2,-8(fp)
1000374c:	1009883a 	mov	r4,r2
10003750:	01400304 	movi	r5,12
10003754:	0002f800 	call	10002f80 <__mulsi3>
10003758:	8085883a 	add	r2,r16,r2
1000375c:	10800204 	addi	r2,r2,8
10003760:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003764:	04040034 	movhi	r16,4096
10003768:	84180104 	addi	r16,r16,24580
1000376c:	e0bffe17 	ldw	r2,-8(fp)
10003770:	1009883a 	mov	r4,r2
10003774:	01400304 	movi	r5,12
10003778:	0002f800 	call	10002f80 <__mulsi3>
1000377c:	8085883a 	add	r2,r16,r2
10003780:	10000015 	stw	zero,0(r2)
  }
}
10003784:	e6ffff04 	addi	sp,fp,-4
10003788:	dfc00217 	ldw	ra,8(sp)
1000378c:	df000117 	ldw	fp,4(sp)
10003790:	dc000017 	ldw	r16,0(sp)
10003794:	dec00304 	addi	sp,sp,12
10003798:	f800283a 	ret

1000379c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000379c:	defff904 	addi	sp,sp,-28
100037a0:	df000615 	stw	fp,24(sp)
100037a4:	df000604 	addi	fp,sp,24
100037a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100037ac:	0005303a 	rdctl	r2,status
100037b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100037b4:	e0fffc17 	ldw	r3,-16(fp)
100037b8:	00bfff84 	movi	r2,-2
100037bc:	1884703a 	and	r2,r3,r2
100037c0:	1001703a 	wrctl	status,r2
  
  return context;
100037c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100037c8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100037cc:	d0a00a17 	ldw	r2,-32728(gp)
100037d0:	10c000c4 	addi	r3,r2,3
100037d4:	00bfff04 	movi	r2,-4
100037d8:	1884703a 	and	r2,r3,r2
100037dc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100037e0:	d0e00a17 	ldw	r3,-32728(gp)
100037e4:	e0bfff17 	ldw	r2,-4(fp)
100037e8:	1887883a 	add	r3,r3,r2
100037ec:	00860034 	movhi	r2,6144
100037f0:	10800004 	addi	r2,r2,0
100037f4:	10c0062e 	bgeu	r2,r3,10003810 <sbrk+0x74>
100037f8:	e0bffa17 	ldw	r2,-24(fp)
100037fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003800:	e0bffd17 	ldw	r2,-12(fp)
10003804:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10003808:	00bfffc4 	movi	r2,-1
1000380c:	00000b06 	br	1000383c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10003810:	d0a00a17 	ldw	r2,-32728(gp)
10003814:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10003818:	d0e00a17 	ldw	r3,-32728(gp)
1000381c:	e0bfff17 	ldw	r2,-4(fp)
10003820:	1885883a 	add	r2,r3,r2
10003824:	d0a00a15 	stw	r2,-32728(gp)
10003828:	e0bffa17 	ldw	r2,-24(fp)
1000382c:	e0bffe15 	stw	r2,-8(fp)
10003830:	e0bffe17 	ldw	r2,-8(fp)
10003834:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10003838:	e0bffb17 	ldw	r2,-20(fp)
} 
1000383c:	e037883a 	mov	sp,fp
10003840:	df000017 	ldw	fp,0(sp)
10003844:	dec00104 	addi	sp,sp,4
10003848:	f800283a 	ret

1000384c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000384c:	defffe04 	addi	sp,sp,-8
10003850:	dfc00115 	stw	ra,4(sp)
10003854:	df000015 	stw	fp,0(sp)
10003858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000385c:	00840034 	movhi	r2,4096
10003860:	109c8204 	addi	r2,r2,29192
10003864:	10800017 	ldw	r2,0(r2)
10003868:	10000526 	beq	r2,zero,10003880 <alt_get_errno+0x34>
1000386c:	00840034 	movhi	r2,4096
10003870:	109c8204 	addi	r2,r2,29192
10003874:	10800017 	ldw	r2,0(r2)
10003878:	103ee83a 	callr	r2
1000387c:	00000206 	br	10003888 <alt_get_errno+0x3c>
10003880:	00840074 	movhi	r2,4097
10003884:	10a32504 	addi	r2,r2,-29548
}
10003888:	e037883a 	mov	sp,fp
1000388c:	dfc00117 	ldw	ra,4(sp)
10003890:	df000017 	ldw	fp,0(sp)
10003894:	dec00204 	addi	sp,sp,8
10003898:	f800283a 	ret

1000389c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000389c:	defff904 	addi	sp,sp,-28
100038a0:	dfc00615 	stw	ra,24(sp)
100038a4:	df000515 	stw	fp,20(sp)
100038a8:	df000504 	addi	fp,sp,20
100038ac:	e13ffd15 	stw	r4,-12(fp)
100038b0:	e17ffe15 	stw	r5,-8(fp)
100038b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100038b8:	e0bffd17 	ldw	r2,-12(fp)
100038bc:	10000816 	blt	r2,zero,100038e0 <write+0x44>
100038c0:	e13ffd17 	ldw	r4,-12(fp)
100038c4:	01400304 	movi	r5,12
100038c8:	0002f800 	call	10002f80 <__mulsi3>
100038cc:	1007883a 	mov	r3,r2
100038d0:	00840034 	movhi	r2,4096
100038d4:	10980104 	addi	r2,r2,24580
100038d8:	1885883a 	add	r2,r3,r2
100038dc:	00000106 	br	100038e4 <write+0x48>
100038e0:	0005883a 	mov	r2,zero
100038e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100038e8:	e0bffb17 	ldw	r2,-20(fp)
100038ec:	10002126 	beq	r2,zero,10003974 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100038f0:	e0bffb17 	ldw	r2,-20(fp)
100038f4:	10800217 	ldw	r2,8(r2)
100038f8:	108000cc 	andi	r2,r2,3
100038fc:	10001826 	beq	r2,zero,10003960 <write+0xc4>
10003900:	e0bffb17 	ldw	r2,-20(fp)
10003904:	10800017 	ldw	r2,0(r2)
10003908:	10800617 	ldw	r2,24(r2)
1000390c:	10001426 	beq	r2,zero,10003960 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10003910:	e0bffb17 	ldw	r2,-20(fp)
10003914:	10800017 	ldw	r2,0(r2)
10003918:	10800617 	ldw	r2,24(r2)
1000391c:	e0ffff17 	ldw	r3,-4(fp)
10003920:	e13ffb17 	ldw	r4,-20(fp)
10003924:	e17ffe17 	ldw	r5,-8(fp)
10003928:	180d883a 	mov	r6,r3
1000392c:	103ee83a 	callr	r2
10003930:	e0bffc15 	stw	r2,-16(fp)
10003934:	e0bffc17 	ldw	r2,-16(fp)
10003938:	1000070e 	bge	r2,zero,10003958 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000393c:	000384c0 	call	1000384c <alt_get_errno>
10003940:	1007883a 	mov	r3,r2
10003944:	e0bffc17 	ldw	r2,-16(fp)
10003948:	0085c83a 	sub	r2,zero,r2
1000394c:	18800015 	stw	r2,0(r3)
        return -1;
10003950:	00bfffc4 	movi	r2,-1
10003954:	00000c06 	br	10003988 <write+0xec>
      }
      return rval;
10003958:	e0bffc17 	ldw	r2,-16(fp)
1000395c:	00000a06 	br	10003988 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10003960:	000384c0 	call	1000384c <alt_get_errno>
10003964:	1007883a 	mov	r3,r2
10003968:	00800344 	movi	r2,13
1000396c:	18800015 	stw	r2,0(r3)
10003970:	00000406 	br	10003984 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10003974:	000384c0 	call	1000384c <alt_get_errno>
10003978:	1007883a 	mov	r3,r2
1000397c:	00801444 	movi	r2,81
10003980:	18800015 	stw	r2,0(r3)
  }
  return -1;
10003984:	00bfffc4 	movi	r2,-1
}
10003988:	e037883a 	mov	sp,fp
1000398c:	dfc00117 	ldw	ra,4(sp)
10003990:	df000017 	ldw	fp,0(sp)
10003994:	dec00204 	addi	sp,sp,8
10003998:	f800283a 	ret

1000399c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000399c:	defffd04 	addi	sp,sp,-12
100039a0:	dfc00215 	stw	ra,8(sp)
100039a4:	df000115 	stw	fp,4(sp)
100039a8:	df000104 	addi	fp,sp,4
100039ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100039b0:	e13fff17 	ldw	r4,-4(fp)
100039b4:	01440034 	movhi	r5,4096
100039b8:	295c7f04 	addi	r5,r5,29180
100039bc:	00046480 	call	10004648 <alt_dev_llist_insert>
}
100039c0:	e037883a 	mov	sp,fp
100039c4:	dfc00117 	ldw	ra,4(sp)
100039c8:	df000017 	ldw	fp,0(sp)
100039cc:	dec00204 	addi	sp,sp,8
100039d0:	f800283a 	ret

100039d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100039d4:	defffd04 	addi	sp,sp,-12
100039d8:	dfc00215 	stw	ra,8(sp)
100039dc:	df000115 	stw	fp,4(sp)
100039e0:	df000104 	addi	fp,sp,4
100039e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
100039e8:	00050280 	call	10005028 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100039ec:	00800044 	movi	r2,1
100039f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100039f4:	e037883a 	mov	sp,fp
100039f8:	dfc00117 	ldw	ra,4(sp)
100039fc:	df000017 	ldw	fp,0(sp)
10003a00:	dec00204 	addi	sp,sp,8
10003a04:	f800283a 	ret

10003a08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10003a08:	defffe04 	addi	sp,sp,-8
10003a0c:	dfc00115 	stw	ra,4(sp)
10003a10:	df000015 	stw	fp,0(sp)
10003a14:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10003a18:	01040034 	movhi	r4,4096
10003a1c:	21186b04 	addi	r4,r4,25004
10003a20:	000b883a 	mov	r5,zero
10003a24:	01800144 	movi	r6,5
10003a28:	0003bb40 	call	10003bb4 <altera_avalon_jtag_uart_init>
10003a2c:	01040034 	movhi	r4,4096
10003a30:	21186104 	addi	r4,r4,24964
10003a34:	000399c0 	call	1000399c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10003a38:	0001883a 	nop
}
10003a3c:	e037883a 	mov	sp,fp
10003a40:	dfc00117 	ldw	ra,4(sp)
10003a44:	df000017 	ldw	fp,0(sp)
10003a48:	dec00204 	addi	sp,sp,8
10003a4c:	f800283a 	ret

10003a50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10003a50:	defffa04 	addi	sp,sp,-24
10003a54:	dfc00515 	stw	ra,20(sp)
10003a58:	df000415 	stw	fp,16(sp)
10003a5c:	df000404 	addi	fp,sp,16
10003a60:	e13ffd15 	stw	r4,-12(fp)
10003a64:	e17ffe15 	stw	r5,-8(fp)
10003a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003a6c:	e0bffd17 	ldw	r2,-12(fp)
10003a70:	10800017 	ldw	r2,0(r2)
10003a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10003a78:	e0bffc17 	ldw	r2,-16(fp)
10003a7c:	10c00a04 	addi	r3,r2,40
10003a80:	e0bffd17 	ldw	r2,-12(fp)
10003a84:	10800217 	ldw	r2,8(r2)
10003a88:	1809883a 	mov	r4,r3
10003a8c:	e17ffe17 	ldw	r5,-8(fp)
10003a90:	e1bfff17 	ldw	r6,-4(fp)
10003a94:	100f883a 	mov	r7,r2
10003a98:	00040780 	call	10004078 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10003a9c:	e037883a 	mov	sp,fp
10003aa0:	dfc00117 	ldw	ra,4(sp)
10003aa4:	df000017 	ldw	fp,0(sp)
10003aa8:	dec00204 	addi	sp,sp,8
10003aac:	f800283a 	ret

10003ab0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10003ab0:	defffa04 	addi	sp,sp,-24
10003ab4:	dfc00515 	stw	ra,20(sp)
10003ab8:	df000415 	stw	fp,16(sp)
10003abc:	df000404 	addi	fp,sp,16
10003ac0:	e13ffd15 	stw	r4,-12(fp)
10003ac4:	e17ffe15 	stw	r5,-8(fp)
10003ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003acc:	e0bffd17 	ldw	r2,-12(fp)
10003ad0:	10800017 	ldw	r2,0(r2)
10003ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10003ad8:	e0bffc17 	ldw	r2,-16(fp)
10003adc:	10c00a04 	addi	r3,r2,40
10003ae0:	e0bffd17 	ldw	r2,-12(fp)
10003ae4:	10800217 	ldw	r2,8(r2)
10003ae8:	1809883a 	mov	r4,r3
10003aec:	e17ffe17 	ldw	r5,-8(fp)
10003af0:	e1bfff17 	ldw	r6,-4(fp)
10003af4:	100f883a 	mov	r7,r2
10003af8:	00042840 	call	10004284 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10003afc:	e037883a 	mov	sp,fp
10003b00:	dfc00117 	ldw	ra,4(sp)
10003b04:	df000017 	ldw	fp,0(sp)
10003b08:	dec00204 	addi	sp,sp,8
10003b0c:	f800283a 	ret

10003b10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10003b10:	defffc04 	addi	sp,sp,-16
10003b14:	dfc00315 	stw	ra,12(sp)
10003b18:	df000215 	stw	fp,8(sp)
10003b1c:	df000204 	addi	fp,sp,8
10003b20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003b24:	e0bfff17 	ldw	r2,-4(fp)
10003b28:	10800017 	ldw	r2,0(r2)
10003b2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10003b30:	e0bffe17 	ldw	r2,-8(fp)
10003b34:	10c00a04 	addi	r3,r2,40
10003b38:	e0bfff17 	ldw	r2,-4(fp)
10003b3c:	10800217 	ldw	r2,8(r2)
10003b40:	1809883a 	mov	r4,r3
10003b44:	100b883a 	mov	r5,r2
10003b48:	0003f240 	call	10003f24 <altera_avalon_jtag_uart_close>
}
10003b4c:	e037883a 	mov	sp,fp
10003b50:	dfc00117 	ldw	ra,4(sp)
10003b54:	df000017 	ldw	fp,0(sp)
10003b58:	dec00204 	addi	sp,sp,8
10003b5c:	f800283a 	ret

10003b60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10003b60:	defffa04 	addi	sp,sp,-24
10003b64:	dfc00515 	stw	ra,20(sp)
10003b68:	df000415 	stw	fp,16(sp)
10003b6c:	df000404 	addi	fp,sp,16
10003b70:	e13ffd15 	stw	r4,-12(fp)
10003b74:	e17ffe15 	stw	r5,-8(fp)
10003b78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10003b7c:	e0bffd17 	ldw	r2,-12(fp)
10003b80:	10800017 	ldw	r2,0(r2)
10003b84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10003b88:	e0bffc17 	ldw	r2,-16(fp)
10003b8c:	10800a04 	addi	r2,r2,40
10003b90:	1009883a 	mov	r4,r2
10003b94:	e17ffe17 	ldw	r5,-8(fp)
10003b98:	e1bfff17 	ldw	r6,-4(fp)
10003b9c:	0003f8c0 	call	10003f8c <altera_avalon_jtag_uart_ioctl>
}
10003ba0:	e037883a 	mov	sp,fp
10003ba4:	dfc00117 	ldw	ra,4(sp)
10003ba8:	df000017 	ldw	fp,0(sp)
10003bac:	dec00204 	addi	sp,sp,8
10003bb0:	f800283a 	ret

10003bb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10003bb4:	defffa04 	addi	sp,sp,-24
10003bb8:	dfc00515 	stw	ra,20(sp)
10003bbc:	df000415 	stw	fp,16(sp)
10003bc0:	df000404 	addi	fp,sp,16
10003bc4:	e13ffd15 	stw	r4,-12(fp)
10003bc8:	e17ffe15 	stw	r5,-8(fp)
10003bcc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003bd0:	e0bffd17 	ldw	r2,-12(fp)
10003bd4:	00c00044 	movi	r3,1
10003bd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10003bdc:	e0bffd17 	ldw	r2,-12(fp)
10003be0:	10800017 	ldw	r2,0(r2)
10003be4:	10800104 	addi	r2,r2,4
10003be8:	1007883a 	mov	r3,r2
10003bec:	e0bffd17 	ldw	r2,-12(fp)
10003bf0:	10800817 	ldw	r2,32(r2)
10003bf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10003bf8:	e0fffe17 	ldw	r3,-8(fp)
10003bfc:	e0bfff17 	ldw	r2,-4(fp)
10003c00:	d8000015 	stw	zero,0(sp)
10003c04:	1809883a 	mov	r4,r3
10003c08:	100b883a 	mov	r5,r2
10003c0c:	01840034 	movhi	r6,4096
10003c10:	318f1e04 	addi	r6,r6,15480
10003c14:	e1fffd17 	ldw	r7,-12(fp)
10003c18:	00047c00 	call	100047c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10003c1c:	e0bffd17 	ldw	r2,-12(fp)
10003c20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10003c24:	e0bffd17 	ldw	r2,-12(fp)
10003c28:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10003c2c:	00840074 	movhi	r2,4097
10003c30:	10a32a04 	addi	r2,r2,-29528
10003c34:	10800017 	ldw	r2,0(r2)
10003c38:	1809883a 	mov	r4,r3
10003c3c:	100b883a 	mov	r5,r2
10003c40:	01840034 	movhi	r6,4096
10003c44:	318f9f04 	addi	r6,r6,15996
10003c48:	e1fffd17 	ldw	r7,-12(fp)
10003c4c:	000449c0 	call	1000449c <alt_alarm_start>
10003c50:	1000040e 	bge	r2,zero,10003c64 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003c54:	e0fffd17 	ldw	r3,-12(fp)
10003c58:	00a00034 	movhi	r2,32768
10003c5c:	10bfffc4 	addi	r2,r2,-1
10003c60:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003c64:	e037883a 	mov	sp,fp
10003c68:	dfc00117 	ldw	ra,4(sp)
10003c6c:	df000017 	ldw	fp,0(sp)
10003c70:	dec00204 	addi	sp,sp,8
10003c74:	f800283a 	ret

10003c78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003c78:	defff804 	addi	sp,sp,-32
10003c7c:	df000715 	stw	fp,28(sp)
10003c80:	df000704 	addi	fp,sp,28
10003c84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10003c88:	e0bfff17 	ldw	r2,-4(fp)
10003c8c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10003c90:	e0bffb17 	ldw	r2,-20(fp)
10003c94:	10800017 	ldw	r2,0(r2)
10003c98:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003c9c:	e0bffc17 	ldw	r2,-16(fp)
10003ca0:	10800104 	addi	r2,r2,4
10003ca4:	10800037 	ldwio	r2,0(r2)
10003ca8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10003cac:	e0bffd17 	ldw	r2,-12(fp)
10003cb0:	1080c00c 	andi	r2,r2,768
10003cb4:	1000011e 	bne	r2,zero,10003cbc <altera_avalon_jtag_uart_irq+0x44>
      break;
10003cb8:	00006c06 	br	10003e6c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10003cbc:	e0bffd17 	ldw	r2,-12(fp)
10003cc0:	1080400c 	andi	r2,r2,256
10003cc4:	10003426 	beq	r2,zero,10003d98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10003cc8:	00800074 	movhi	r2,1
10003ccc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003cd0:	e0bffb17 	ldw	r2,-20(fp)
10003cd4:	10800a17 	ldw	r2,40(r2)
10003cd8:	10800044 	addi	r2,r2,1
10003cdc:	1081ffcc 	andi	r2,r2,2047
10003ce0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10003ce4:	e0bffb17 	ldw	r2,-20(fp)
10003ce8:	10c00b17 	ldw	r3,44(r2)
10003cec:	e0bffe17 	ldw	r2,-8(fp)
10003cf0:	1880011e 	bne	r3,r2,10003cf8 <altera_avalon_jtag_uart_irq+0x80>
          break;
10003cf4:	00001606 	br	10003d50 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003cf8:	e0bffc17 	ldw	r2,-16(fp)
10003cfc:	10800037 	ldwio	r2,0(r2)
10003d00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003d04:	e0bff917 	ldw	r2,-28(fp)
10003d08:	10a0000c 	andi	r2,r2,32768
10003d0c:	1000011e 	bne	r2,zero,10003d14 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10003d10:	00000f06 	br	10003d50 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003d14:	e0bffb17 	ldw	r2,-20(fp)
10003d18:	10800a17 	ldw	r2,40(r2)
10003d1c:	e0fff917 	ldw	r3,-28(fp)
10003d20:	1809883a 	mov	r4,r3
10003d24:	e0fffb17 	ldw	r3,-20(fp)
10003d28:	1885883a 	add	r2,r3,r2
10003d2c:	10800e04 	addi	r2,r2,56
10003d30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003d34:	e0bffb17 	ldw	r2,-20(fp)
10003d38:	10800a17 	ldw	r2,40(r2)
10003d3c:	10800044 	addi	r2,r2,1
10003d40:	10c1ffcc 	andi	r3,r2,2047
10003d44:	e0bffb17 	ldw	r2,-20(fp)
10003d48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003d4c:	003fe006 	br	10003cd0 <__alt_data_end+0xf8003cd0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003d50:	e0bff917 	ldw	r2,-28(fp)
10003d54:	10bfffec 	andhi	r2,r2,65535
10003d58:	10000f26 	beq	r2,zero,10003d98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003d5c:	e0bffb17 	ldw	r2,-20(fp)
10003d60:	10c00817 	ldw	r3,32(r2)
10003d64:	00bfff84 	movi	r2,-2
10003d68:	1886703a 	and	r3,r3,r2
10003d6c:	e0bffb17 	ldw	r2,-20(fp)
10003d70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10003d74:	e0bffc17 	ldw	r2,-16(fp)
10003d78:	10800104 	addi	r2,r2,4
10003d7c:	1007883a 	mov	r3,r2
10003d80:	e0bffb17 	ldw	r2,-20(fp)
10003d84:	10800817 	ldw	r2,32(r2)
10003d88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003d8c:	e0bffc17 	ldw	r2,-16(fp)
10003d90:	10800104 	addi	r2,r2,4
10003d94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10003d98:	e0bffd17 	ldw	r2,-12(fp)
10003d9c:	1080800c 	andi	r2,r2,512
10003da0:	10003126 	beq	r2,zero,10003e68 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10003da4:	e0bffd17 	ldw	r2,-12(fp)
10003da8:	1004d43a 	srli	r2,r2,16
10003dac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10003db0:	00001406 	br	10003e04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10003db4:	e0bffc17 	ldw	r2,-16(fp)
10003db8:	e0fffb17 	ldw	r3,-20(fp)
10003dbc:	18c00d17 	ldw	r3,52(r3)
10003dc0:	e13ffb17 	ldw	r4,-20(fp)
10003dc4:	20c7883a 	add	r3,r4,r3
10003dc8:	18c20e04 	addi	r3,r3,2104
10003dcc:	18c00003 	ldbu	r3,0(r3)
10003dd0:	18c03fcc 	andi	r3,r3,255
10003dd4:	18c0201c 	xori	r3,r3,128
10003dd8:	18ffe004 	addi	r3,r3,-128
10003ddc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003de0:	e0bffb17 	ldw	r2,-20(fp)
10003de4:	10800d17 	ldw	r2,52(r2)
10003de8:	10800044 	addi	r2,r2,1
10003dec:	10c1ffcc 	andi	r3,r2,2047
10003df0:	e0bffb17 	ldw	r2,-20(fp)
10003df4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003df8:	e0bffa17 	ldw	r2,-24(fp)
10003dfc:	10bfffc4 	addi	r2,r2,-1
10003e00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10003e04:	e0bffa17 	ldw	r2,-24(fp)
10003e08:	10000526 	beq	r2,zero,10003e20 <altera_avalon_jtag_uart_irq+0x1a8>
10003e0c:	e0bffb17 	ldw	r2,-20(fp)
10003e10:	10c00d17 	ldw	r3,52(r2)
10003e14:	e0bffb17 	ldw	r2,-20(fp)
10003e18:	10800c17 	ldw	r2,48(r2)
10003e1c:	18bfe51e 	bne	r3,r2,10003db4 <__alt_data_end+0xf8003db4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003e20:	e0bffa17 	ldw	r2,-24(fp)
10003e24:	10001026 	beq	r2,zero,10003e68 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003e28:	e0bffb17 	ldw	r2,-20(fp)
10003e2c:	10c00817 	ldw	r3,32(r2)
10003e30:	00bfff44 	movi	r2,-3
10003e34:	1886703a 	and	r3,r3,r2
10003e38:	e0bffb17 	ldw	r2,-20(fp)
10003e3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003e40:	e0bffb17 	ldw	r2,-20(fp)
10003e44:	10800017 	ldw	r2,0(r2)
10003e48:	10800104 	addi	r2,r2,4
10003e4c:	1007883a 	mov	r3,r2
10003e50:	e0bffb17 	ldw	r2,-20(fp)
10003e54:	10800817 	ldw	r2,32(r2)
10003e58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003e5c:	e0bffc17 	ldw	r2,-16(fp)
10003e60:	10800104 	addi	r2,r2,4
10003e64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003e68:	003f8c06 	br	10003c9c <__alt_data_end+0xf8003c9c>
}
10003e6c:	e037883a 	mov	sp,fp
10003e70:	df000017 	ldw	fp,0(sp)
10003e74:	dec00104 	addi	sp,sp,4
10003e78:	f800283a 	ret

10003e7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10003e7c:	defff804 	addi	sp,sp,-32
10003e80:	df000715 	stw	fp,28(sp)
10003e84:	df000704 	addi	fp,sp,28
10003e88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10003e8c:	e0bffb17 	ldw	r2,-20(fp)
10003e90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10003e94:	e0bff917 	ldw	r2,-28(fp)
10003e98:	10800017 	ldw	r2,0(r2)
10003e9c:	10800104 	addi	r2,r2,4
10003ea0:	10800037 	ldwio	r2,0(r2)
10003ea4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10003ea8:	e0bffa17 	ldw	r2,-24(fp)
10003eac:	1081000c 	andi	r2,r2,1024
10003eb0:	10000b26 	beq	r2,zero,10003ee0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10003eb4:	e0bff917 	ldw	r2,-28(fp)
10003eb8:	10800017 	ldw	r2,0(r2)
10003ebc:	10800104 	addi	r2,r2,4
10003ec0:	1007883a 	mov	r3,r2
10003ec4:	e0bff917 	ldw	r2,-28(fp)
10003ec8:	10800817 	ldw	r2,32(r2)
10003ecc:	10810014 	ori	r2,r2,1024
10003ed0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10003ed4:	e0bff917 	ldw	r2,-28(fp)
10003ed8:	10000915 	stw	zero,36(r2)
10003edc:	00000a06 	br	10003f08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003ee0:	e0bff917 	ldw	r2,-28(fp)
10003ee4:	10c00917 	ldw	r3,36(r2)
10003ee8:	00a00034 	movhi	r2,32768
10003eec:	10bfff04 	addi	r2,r2,-4
10003ef0:	10c00536 	bltu	r2,r3,10003f08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10003ef4:	e0bff917 	ldw	r2,-28(fp)
10003ef8:	10800917 	ldw	r2,36(r2)
10003efc:	10c00044 	addi	r3,r2,1
10003f00:	e0bff917 	ldw	r2,-28(fp)
10003f04:	10c00915 	stw	r3,36(r2)
10003f08:	00840074 	movhi	r2,4097
10003f0c:	10a32a04 	addi	r2,r2,-29528
10003f10:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10003f14:	e037883a 	mov	sp,fp
10003f18:	df000017 	ldw	fp,0(sp)
10003f1c:	dec00104 	addi	sp,sp,4
10003f20:	f800283a 	ret

10003f24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10003f24:	defffd04 	addi	sp,sp,-12
10003f28:	df000215 	stw	fp,8(sp)
10003f2c:	df000204 	addi	fp,sp,8
10003f30:	e13ffe15 	stw	r4,-8(fp)
10003f34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003f38:	00000506 	br	10003f50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003f3c:	e0bfff17 	ldw	r2,-4(fp)
10003f40:	1090000c 	andi	r2,r2,16384
10003f44:	10000226 	beq	r2,zero,10003f50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003f48:	00bffd44 	movi	r2,-11
10003f4c:	00000b06 	br	10003f7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003f50:	e0bffe17 	ldw	r2,-8(fp)
10003f54:	10c00d17 	ldw	r3,52(r2)
10003f58:	e0bffe17 	ldw	r2,-8(fp)
10003f5c:	10800c17 	ldw	r2,48(r2)
10003f60:	18800526 	beq	r3,r2,10003f78 <altera_avalon_jtag_uart_close+0x54>
10003f64:	e0bffe17 	ldw	r2,-8(fp)
10003f68:	10c00917 	ldw	r3,36(r2)
10003f6c:	e0bffe17 	ldw	r2,-8(fp)
10003f70:	10800117 	ldw	r2,4(r2)
10003f74:	18bff136 	bltu	r3,r2,10003f3c <__alt_data_end+0xf8003f3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10003f78:	0005883a 	mov	r2,zero
}
10003f7c:	e037883a 	mov	sp,fp
10003f80:	df000017 	ldw	fp,0(sp)
10003f84:	dec00104 	addi	sp,sp,4
10003f88:	f800283a 	ret

10003f8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10003f8c:	defffa04 	addi	sp,sp,-24
10003f90:	df000515 	stw	fp,20(sp)
10003f94:	df000504 	addi	fp,sp,20
10003f98:	e13ffd15 	stw	r4,-12(fp)
10003f9c:	e17ffe15 	stw	r5,-8(fp)
10003fa0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10003fa4:	00bff9c4 	movi	r2,-25
10003fa8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10003fac:	e0bffe17 	ldw	r2,-8(fp)
10003fb0:	10da8060 	cmpeqi	r3,r2,27137
10003fb4:	1800031e 	bne	r3,zero,10003fc4 <altera_avalon_jtag_uart_ioctl+0x38>
10003fb8:	109a80a0 	cmpeqi	r2,r2,27138
10003fbc:	1000191e 	bne	r2,zero,10004024 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10003fc0:	00002806 	br	10004064 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10003fc4:	e0bffd17 	ldw	r2,-12(fp)
10003fc8:	10c00117 	ldw	r3,4(r2)
10003fcc:	00a00034 	movhi	r2,32768
10003fd0:	10bfffc4 	addi	r2,r2,-1
10003fd4:	18801226 	beq	r3,r2,10004020 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10003fd8:	e0bfff17 	ldw	r2,-4(fp)
10003fdc:	10800017 	ldw	r2,0(r2)
10003fe0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10003fe4:	e0bffc17 	ldw	r2,-16(fp)
10003fe8:	10800090 	cmplti	r2,r2,2
10003fec:	1000061e 	bne	r2,zero,10004008 <altera_avalon_jtag_uart_ioctl+0x7c>
10003ff0:	e0fffc17 	ldw	r3,-16(fp)
10003ff4:	00a00034 	movhi	r2,32768
10003ff8:	10bfffc4 	addi	r2,r2,-1
10003ffc:	18800226 	beq	r3,r2,10004008 <altera_avalon_jtag_uart_ioctl+0x7c>
10004000:	e0bffc17 	ldw	r2,-16(fp)
10004004:	00000206 	br	10004010 <altera_avalon_jtag_uart_ioctl+0x84>
10004008:	00a00034 	movhi	r2,32768
1000400c:	10bfff84 	addi	r2,r2,-2
10004010:	e0fffd17 	ldw	r3,-12(fp)
10004014:	18800115 	stw	r2,4(r3)
      rc = 0;
10004018:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000401c:	00001106 	br	10004064 <altera_avalon_jtag_uart_ioctl+0xd8>
10004020:	00001006 	br	10004064 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10004024:	e0bffd17 	ldw	r2,-12(fp)
10004028:	10c00117 	ldw	r3,4(r2)
1000402c:	00a00034 	movhi	r2,32768
10004030:	10bfffc4 	addi	r2,r2,-1
10004034:	18800a26 	beq	r3,r2,10004060 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10004038:	e0bffd17 	ldw	r2,-12(fp)
1000403c:	10c00917 	ldw	r3,36(r2)
10004040:	e0bffd17 	ldw	r2,-12(fp)
10004044:	10800117 	ldw	r2,4(r2)
10004048:	1885803a 	cmpltu	r2,r3,r2
1000404c:	10c03fcc 	andi	r3,r2,255
10004050:	e0bfff17 	ldw	r2,-4(fp)
10004054:	10c00015 	stw	r3,0(r2)
      rc = 0;
10004058:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000405c:	00000006 	br	10004060 <altera_avalon_jtag_uart_ioctl+0xd4>
10004060:	0001883a 	nop

  default:
    break;
  }

  return rc;
10004064:	e0bffb17 	ldw	r2,-20(fp)
}
10004068:	e037883a 	mov	sp,fp
1000406c:	df000017 	ldw	fp,0(sp)
10004070:	dec00104 	addi	sp,sp,4
10004074:	f800283a 	ret

10004078 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10004078:	defff304 	addi	sp,sp,-52
1000407c:	dfc00c15 	stw	ra,48(sp)
10004080:	df000b15 	stw	fp,44(sp)
10004084:	df000b04 	addi	fp,sp,44
10004088:	e13ffc15 	stw	r4,-16(fp)
1000408c:	e17ffd15 	stw	r5,-12(fp)
10004090:	e1bffe15 	stw	r6,-8(fp)
10004094:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10004098:	e0bffd17 	ldw	r2,-12(fp)
1000409c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100040a0:	00004906 	br	100041c8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100040a4:	e0bffc17 	ldw	r2,-16(fp)
100040a8:	10800a17 	ldw	r2,40(r2)
100040ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100040b0:	e0bffc17 	ldw	r2,-16(fp)
100040b4:	10800b17 	ldw	r2,44(r2)
100040b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100040bc:	e0fff717 	ldw	r3,-36(fp)
100040c0:	e0bff817 	ldw	r2,-32(fp)
100040c4:	18800536 	bltu	r3,r2,100040dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100040c8:	e0fff717 	ldw	r3,-36(fp)
100040cc:	e0bff817 	ldw	r2,-32(fp)
100040d0:	1885c83a 	sub	r2,r3,r2
100040d4:	e0bff615 	stw	r2,-40(fp)
100040d8:	00000406 	br	100040ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100040dc:	00c20004 	movi	r3,2048
100040e0:	e0bff817 	ldw	r2,-32(fp)
100040e4:	1885c83a 	sub	r2,r3,r2
100040e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100040ec:	e0bff617 	ldw	r2,-40(fp)
100040f0:	1000011e 	bne	r2,zero,100040f8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100040f4:	00001d06 	br	1000416c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
100040f8:	e0fffe17 	ldw	r3,-8(fp)
100040fc:	e0bff617 	ldw	r2,-40(fp)
10004100:	1880022e 	bgeu	r3,r2,1000410c <altera_avalon_jtag_uart_read+0x94>
        n = space;
10004104:	e0bffe17 	ldw	r2,-8(fp)
10004108:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000410c:	e0bff817 	ldw	r2,-32(fp)
10004110:	10800e04 	addi	r2,r2,56
10004114:	e0fffc17 	ldw	r3,-16(fp)
10004118:	1885883a 	add	r2,r3,r2
1000411c:	e13ff517 	ldw	r4,-44(fp)
10004120:	100b883a 	mov	r5,r2
10004124:	e1bff617 	ldw	r6,-40(fp)
10004128:	00012f80 	call	100012f8 <memcpy>
      ptr   += n;
1000412c:	e0fff517 	ldw	r3,-44(fp)
10004130:	e0bff617 	ldw	r2,-40(fp)
10004134:	1885883a 	add	r2,r3,r2
10004138:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000413c:	e0fffe17 	ldw	r3,-8(fp)
10004140:	e0bff617 	ldw	r2,-40(fp)
10004144:	1885c83a 	sub	r2,r3,r2
10004148:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000414c:	e0fff817 	ldw	r3,-32(fp)
10004150:	e0bff617 	ldw	r2,-40(fp)
10004154:	1885883a 	add	r2,r3,r2
10004158:	10c1ffcc 	andi	r3,r2,2047
1000415c:	e0bffc17 	ldw	r2,-16(fp)
10004160:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10004164:	e0bffe17 	ldw	r2,-8(fp)
10004168:	00bfce16 	blt	zero,r2,100040a4 <__alt_data_end+0xf80040a4>

    /* If we read any data then return it */
    if (ptr != buffer)
1000416c:	e0fff517 	ldw	r3,-44(fp)
10004170:	e0bffd17 	ldw	r2,-12(fp)
10004174:	18800126 	beq	r3,r2,1000417c <altera_avalon_jtag_uart_read+0x104>
      break;
10004178:	00001506 	br	100041d0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000417c:	e0bfff17 	ldw	r2,-4(fp)
10004180:	1090000c 	andi	r2,r2,16384
10004184:	10000126 	beq	r2,zero,1000418c <altera_avalon_jtag_uart_read+0x114>
      break;
10004188:	00001106 	br	100041d0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000418c:	0001883a 	nop
10004190:	e0bffc17 	ldw	r2,-16(fp)
10004194:	10c00a17 	ldw	r3,40(r2)
10004198:	e0bff717 	ldw	r2,-36(fp)
1000419c:	1880051e 	bne	r3,r2,100041b4 <altera_avalon_jtag_uart_read+0x13c>
100041a0:	e0bffc17 	ldw	r2,-16(fp)
100041a4:	10c00917 	ldw	r3,36(r2)
100041a8:	e0bffc17 	ldw	r2,-16(fp)
100041ac:	10800117 	ldw	r2,4(r2)
100041b0:	18bff736 	bltu	r3,r2,10004190 <__alt_data_end+0xf8004190>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100041b4:	e0bffc17 	ldw	r2,-16(fp)
100041b8:	10c00a17 	ldw	r3,40(r2)
100041bc:	e0bff717 	ldw	r2,-36(fp)
100041c0:	1880011e 	bne	r3,r2,100041c8 <altera_avalon_jtag_uart_read+0x150>
      break;
100041c4:	00000206 	br	100041d0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100041c8:	e0bffe17 	ldw	r2,-8(fp)
100041cc:	00bfb516 	blt	zero,r2,100040a4 <__alt_data_end+0xf80040a4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100041d0:	e0fff517 	ldw	r3,-44(fp)
100041d4:	e0bffd17 	ldw	r2,-12(fp)
100041d8:	18801826 	beq	r3,r2,1000423c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100041dc:	0005303a 	rdctl	r2,status
100041e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100041e4:	e0fffa17 	ldw	r3,-24(fp)
100041e8:	00bfff84 	movi	r2,-2
100041ec:	1884703a 	and	r2,r3,r2
100041f0:	1001703a 	wrctl	status,r2
  
  return context;
100041f4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100041f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100041fc:	e0bffc17 	ldw	r2,-16(fp)
10004200:	10800817 	ldw	r2,32(r2)
10004204:	10c00054 	ori	r3,r2,1
10004208:	e0bffc17 	ldw	r2,-16(fp)
1000420c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004210:	e0bffc17 	ldw	r2,-16(fp)
10004214:	10800017 	ldw	r2,0(r2)
10004218:	10800104 	addi	r2,r2,4
1000421c:	1007883a 	mov	r3,r2
10004220:	e0bffc17 	ldw	r2,-16(fp)
10004224:	10800817 	ldw	r2,32(r2)
10004228:	18800035 	stwio	r2,0(r3)
1000422c:	e0bff917 	ldw	r2,-28(fp)
10004230:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004234:	e0bffb17 	ldw	r2,-20(fp)
10004238:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000423c:	e0fff517 	ldw	r3,-44(fp)
10004240:	e0bffd17 	ldw	r2,-12(fp)
10004244:	18800426 	beq	r3,r2,10004258 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10004248:	e0fff517 	ldw	r3,-44(fp)
1000424c:	e0bffd17 	ldw	r2,-12(fp)
10004250:	1885c83a 	sub	r2,r3,r2
10004254:	00000606 	br	10004270 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10004258:	e0bfff17 	ldw	r2,-4(fp)
1000425c:	1090000c 	andi	r2,r2,16384
10004260:	10000226 	beq	r2,zero,1000426c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10004264:	00bffd44 	movi	r2,-11
10004268:	00000106 	br	10004270 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000426c:	00bffec4 	movi	r2,-5
}
10004270:	e037883a 	mov	sp,fp
10004274:	dfc00117 	ldw	ra,4(sp)
10004278:	df000017 	ldw	fp,0(sp)
1000427c:	dec00204 	addi	sp,sp,8
10004280:	f800283a 	ret

10004284 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10004284:	defff304 	addi	sp,sp,-52
10004288:	dfc00c15 	stw	ra,48(sp)
1000428c:	df000b15 	stw	fp,44(sp)
10004290:	df000b04 	addi	fp,sp,44
10004294:	e13ffc15 	stw	r4,-16(fp)
10004298:	e17ffd15 	stw	r5,-12(fp)
1000429c:	e1bffe15 	stw	r6,-8(fp)
100042a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100042a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100042a8:	e0bffd17 	ldw	r2,-12(fp)
100042ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100042b0:	00003806 	br	10004394 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100042b4:	e0bffc17 	ldw	r2,-16(fp)
100042b8:	10800c17 	ldw	r2,48(r2)
100042bc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100042c0:	e0bffc17 	ldw	r2,-16(fp)
100042c4:	10800d17 	ldw	r2,52(r2)
100042c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100042cc:	e0fff817 	ldw	r3,-32(fp)
100042d0:	e0bff517 	ldw	r2,-44(fp)
100042d4:	1880062e 	bgeu	r3,r2,100042f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100042d8:	e0fff517 	ldw	r3,-44(fp)
100042dc:	e0bff817 	ldw	r2,-32(fp)
100042e0:	1885c83a 	sub	r2,r3,r2
100042e4:	10bfffc4 	addi	r2,r2,-1
100042e8:	e0bff615 	stw	r2,-40(fp)
100042ec:	00000b06 	br	1000431c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100042f0:	e0bff517 	ldw	r2,-44(fp)
100042f4:	10000526 	beq	r2,zero,1000430c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100042f8:	00c20004 	movi	r3,2048
100042fc:	e0bff817 	ldw	r2,-32(fp)
10004300:	1885c83a 	sub	r2,r3,r2
10004304:	e0bff615 	stw	r2,-40(fp)
10004308:	00000406 	br	1000431c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000430c:	00c1ffc4 	movi	r3,2047
10004310:	e0bff817 	ldw	r2,-32(fp)
10004314:	1885c83a 	sub	r2,r3,r2
10004318:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000431c:	e0bff617 	ldw	r2,-40(fp)
10004320:	1000011e 	bne	r2,zero,10004328 <altera_avalon_jtag_uart_write+0xa4>
        break;
10004324:	00001d06 	br	1000439c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10004328:	e0fffe17 	ldw	r3,-8(fp)
1000432c:	e0bff617 	ldw	r2,-40(fp)
10004330:	1880022e 	bgeu	r3,r2,1000433c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10004334:	e0bffe17 	ldw	r2,-8(fp)
10004338:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000433c:	e0bff817 	ldw	r2,-32(fp)
10004340:	10820e04 	addi	r2,r2,2104
10004344:	e0fffc17 	ldw	r3,-16(fp)
10004348:	1885883a 	add	r2,r3,r2
1000434c:	1009883a 	mov	r4,r2
10004350:	e17ffd17 	ldw	r5,-12(fp)
10004354:	e1bff617 	ldw	r6,-40(fp)
10004358:	00012f80 	call	100012f8 <memcpy>
      ptr   += n;
1000435c:	e0fffd17 	ldw	r3,-12(fp)
10004360:	e0bff617 	ldw	r2,-40(fp)
10004364:	1885883a 	add	r2,r3,r2
10004368:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000436c:	e0fffe17 	ldw	r3,-8(fp)
10004370:	e0bff617 	ldw	r2,-40(fp)
10004374:	1885c83a 	sub	r2,r3,r2
10004378:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000437c:	e0fff817 	ldw	r3,-32(fp)
10004380:	e0bff617 	ldw	r2,-40(fp)
10004384:	1885883a 	add	r2,r3,r2
10004388:	10c1ffcc 	andi	r3,r2,2047
1000438c:	e0bffc17 	ldw	r2,-16(fp)
10004390:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004394:	e0bffe17 	ldw	r2,-8(fp)
10004398:	00bfc616 	blt	zero,r2,100042b4 <__alt_data_end+0xf80042b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000439c:	0005303a 	rdctl	r2,status
100043a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100043a4:	e0fffa17 	ldw	r3,-24(fp)
100043a8:	00bfff84 	movi	r2,-2
100043ac:	1884703a 	and	r2,r3,r2
100043b0:	1001703a 	wrctl	status,r2
  
  return context;
100043b4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100043b8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100043bc:	e0bffc17 	ldw	r2,-16(fp)
100043c0:	10800817 	ldw	r2,32(r2)
100043c4:	10c00094 	ori	r3,r2,2
100043c8:	e0bffc17 	ldw	r2,-16(fp)
100043cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100043d0:	e0bffc17 	ldw	r2,-16(fp)
100043d4:	10800017 	ldw	r2,0(r2)
100043d8:	10800104 	addi	r2,r2,4
100043dc:	1007883a 	mov	r3,r2
100043e0:	e0bffc17 	ldw	r2,-16(fp)
100043e4:	10800817 	ldw	r2,32(r2)
100043e8:	18800035 	stwio	r2,0(r3)
100043ec:	e0bff917 	ldw	r2,-28(fp)
100043f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100043f4:	e0bffb17 	ldw	r2,-20(fp)
100043f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100043fc:	e0bffe17 	ldw	r2,-8(fp)
10004400:	0080120e 	bge	zero,r2,1000444c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10004404:	e0bfff17 	ldw	r2,-4(fp)
10004408:	1090000c 	andi	r2,r2,16384
1000440c:	10000126 	beq	r2,zero,10004414 <altera_avalon_jtag_uart_write+0x190>
        break;
10004410:	00001006 	br	10004454 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10004414:	0001883a 	nop
10004418:	e0bffc17 	ldw	r2,-16(fp)
1000441c:	10c00d17 	ldw	r3,52(r2)
10004420:	e0bff517 	ldw	r2,-44(fp)
10004424:	1880051e 	bne	r3,r2,1000443c <altera_avalon_jtag_uart_write+0x1b8>
10004428:	e0bffc17 	ldw	r2,-16(fp)
1000442c:	10c00917 	ldw	r3,36(r2)
10004430:	e0bffc17 	ldw	r2,-16(fp)
10004434:	10800117 	ldw	r2,4(r2)
10004438:	18bff736 	bltu	r3,r2,10004418 <__alt_data_end+0xf8004418>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000443c:	e0bffc17 	ldw	r2,-16(fp)
10004440:	10800917 	ldw	r2,36(r2)
10004444:	10000126 	beq	r2,zero,1000444c <altera_avalon_jtag_uart_write+0x1c8>
         break;
10004448:	00000206 	br	10004454 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000444c:	e0bffe17 	ldw	r2,-8(fp)
10004450:	00bf9716 	blt	zero,r2,100042b0 <__alt_data_end+0xf80042b0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004454:	e0fffd17 	ldw	r3,-12(fp)
10004458:	e0bff717 	ldw	r2,-36(fp)
1000445c:	18800426 	beq	r3,r2,10004470 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10004460:	e0fffd17 	ldw	r3,-12(fp)
10004464:	e0bff717 	ldw	r2,-36(fp)
10004468:	1885c83a 	sub	r2,r3,r2
1000446c:	00000606 	br	10004488 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10004470:	e0bfff17 	ldw	r2,-4(fp)
10004474:	1090000c 	andi	r2,r2,16384
10004478:	10000226 	beq	r2,zero,10004484 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000447c:	00bffd44 	movi	r2,-11
10004480:	00000106 	br	10004488 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004484:	00bffec4 	movi	r2,-5
}
10004488:	e037883a 	mov	sp,fp
1000448c:	dfc00117 	ldw	ra,4(sp)
10004490:	df000017 	ldw	fp,0(sp)
10004494:	dec00204 	addi	sp,sp,8
10004498:	f800283a 	ret

1000449c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000449c:	defff504 	addi	sp,sp,-44
100044a0:	df000a15 	stw	fp,40(sp)
100044a4:	df000a04 	addi	fp,sp,40
100044a8:	e13ffc15 	stw	r4,-16(fp)
100044ac:	e17ffd15 	stw	r5,-12(fp)
100044b0:	e1bffe15 	stw	r6,-8(fp)
100044b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100044b8:	e03ff615 	stw	zero,-40(fp)
100044bc:	00840074 	movhi	r2,4097
100044c0:	10a32a04 	addi	r2,r2,-29528
100044c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100044c8:	10003f26 	beq	r2,zero,100045c8 <alt_alarm_start+0x12c>
  {
    if (alarm)
100044cc:	e0bffc17 	ldw	r2,-16(fp)
100044d0:	10003b26 	beq	r2,zero,100045c0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100044d4:	e0bffc17 	ldw	r2,-16(fp)
100044d8:	e0fffe17 	ldw	r3,-8(fp)
100044dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100044e0:	e0bffc17 	ldw	r2,-16(fp)
100044e4:	e0ffff17 	ldw	r3,-4(fp)
100044e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100044ec:	0005303a 	rdctl	r2,status
100044f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100044f4:	e0fff817 	ldw	r3,-32(fp)
100044f8:	00bfff84 	movi	r2,-2
100044fc:	1884703a 	and	r2,r3,r2
10004500:	1001703a 	wrctl	status,r2
  
  return context;
10004504:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10004508:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000450c:	00840074 	movhi	r2,4097
10004510:	10a32b04 	addi	r2,r2,-29524
10004514:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10004518:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000451c:	e0fffd17 	ldw	r3,-12(fp)
10004520:	e0bff617 	ldw	r2,-40(fp)
10004524:	1885883a 	add	r2,r3,r2
10004528:	10c00044 	addi	r3,r2,1
1000452c:	e0bffc17 	ldw	r2,-16(fp)
10004530:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10004534:	e0bffc17 	ldw	r2,-16(fp)
10004538:	10c00217 	ldw	r3,8(r2)
1000453c:	e0bff617 	ldw	r2,-40(fp)
10004540:	1880042e 	bgeu	r3,r2,10004554 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10004544:	e0bffc17 	ldw	r2,-16(fp)
10004548:	00c00044 	movi	r3,1
1000454c:	10c00405 	stb	r3,16(r2)
10004550:	00000206 	br	1000455c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10004554:	e0bffc17 	ldw	r2,-16(fp)
10004558:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000455c:	e0fffc17 	ldw	r3,-16(fp)
10004560:	00840034 	movhi	r2,4096
10004564:	109c8504 	addi	r2,r2,29204
10004568:	e0bff915 	stw	r2,-28(fp)
1000456c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004570:	e0bffa17 	ldw	r2,-24(fp)
10004574:	e0fff917 	ldw	r3,-28(fp)
10004578:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000457c:	e0bff917 	ldw	r2,-28(fp)
10004580:	10c00017 	ldw	r3,0(r2)
10004584:	e0bffa17 	ldw	r2,-24(fp)
10004588:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000458c:	e0bff917 	ldw	r2,-28(fp)
10004590:	10800017 	ldw	r2,0(r2)
10004594:	e0fffa17 	ldw	r3,-24(fp)
10004598:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000459c:	e0bff917 	ldw	r2,-28(fp)
100045a0:	e0fffa17 	ldw	r3,-24(fp)
100045a4:	10c00015 	stw	r3,0(r2)
100045a8:	e0bff717 	ldw	r2,-36(fp)
100045ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100045b0:	e0bffb17 	ldw	r2,-20(fp)
100045b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100045b8:	0005883a 	mov	r2,zero
100045bc:	00000306 	br	100045cc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100045c0:	00bffa84 	movi	r2,-22
100045c4:	00000106 	br	100045cc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100045c8:	00bfde84 	movi	r2,-134
  }
}
100045cc:	e037883a 	mov	sp,fp
100045d0:	df000017 	ldw	fp,0(sp)
100045d4:	dec00104 	addi	sp,sp,4
100045d8:	f800283a 	ret

100045dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100045dc:	deffff04 	addi	sp,sp,-4
100045e0:	df000015 	stw	fp,0(sp)
100045e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100045e8:	e037883a 	mov	sp,fp
100045ec:	df000017 	ldw	fp,0(sp)
100045f0:	dec00104 	addi	sp,sp,4
100045f4:	f800283a 	ret

100045f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100045f8:	defffe04 	addi	sp,sp,-8
100045fc:	dfc00115 	stw	ra,4(sp)
10004600:	df000015 	stw	fp,0(sp)
10004604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004608:	00840034 	movhi	r2,4096
1000460c:	109c8204 	addi	r2,r2,29192
10004610:	10800017 	ldw	r2,0(r2)
10004614:	10000526 	beq	r2,zero,1000462c <alt_get_errno+0x34>
10004618:	00840034 	movhi	r2,4096
1000461c:	109c8204 	addi	r2,r2,29192
10004620:	10800017 	ldw	r2,0(r2)
10004624:	103ee83a 	callr	r2
10004628:	00000206 	br	10004634 <alt_get_errno+0x3c>
1000462c:	00840074 	movhi	r2,4097
10004630:	10a32504 	addi	r2,r2,-29548
}
10004634:	e037883a 	mov	sp,fp
10004638:	dfc00117 	ldw	ra,4(sp)
1000463c:	df000017 	ldw	fp,0(sp)
10004640:	dec00204 	addi	sp,sp,8
10004644:	f800283a 	ret

10004648 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10004648:	defffa04 	addi	sp,sp,-24
1000464c:	dfc00515 	stw	ra,20(sp)
10004650:	df000415 	stw	fp,16(sp)
10004654:	df000404 	addi	fp,sp,16
10004658:	e13ffe15 	stw	r4,-8(fp)
1000465c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10004660:	e0bffe17 	ldw	r2,-8(fp)
10004664:	10000326 	beq	r2,zero,10004674 <alt_dev_llist_insert+0x2c>
10004668:	e0bffe17 	ldw	r2,-8(fp)
1000466c:	10800217 	ldw	r2,8(r2)
10004670:	1000061e 	bne	r2,zero,1000468c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10004674:	00045f80 	call	100045f8 <alt_get_errno>
10004678:	1007883a 	mov	r3,r2
1000467c:	00800584 	movi	r2,22
10004680:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10004684:	00bffa84 	movi	r2,-22
10004688:	00001306 	br	100046d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000468c:	e0bffe17 	ldw	r2,-8(fp)
10004690:	e0ffff17 	ldw	r3,-4(fp)
10004694:	e0fffc15 	stw	r3,-16(fp)
10004698:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000469c:	e0bffd17 	ldw	r2,-12(fp)
100046a0:	e0fffc17 	ldw	r3,-16(fp)
100046a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100046a8:	e0bffc17 	ldw	r2,-16(fp)
100046ac:	10c00017 	ldw	r3,0(r2)
100046b0:	e0bffd17 	ldw	r2,-12(fp)
100046b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100046b8:	e0bffc17 	ldw	r2,-16(fp)
100046bc:	10800017 	ldw	r2,0(r2)
100046c0:	e0fffd17 	ldw	r3,-12(fp)
100046c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100046c8:	e0bffc17 	ldw	r2,-16(fp)
100046cc:	e0fffd17 	ldw	r3,-12(fp)
100046d0:	10c00015 	stw	r3,0(r2)

  return 0;  
100046d4:	0005883a 	mov	r2,zero
}
100046d8:	e037883a 	mov	sp,fp
100046dc:	dfc00117 	ldw	ra,4(sp)
100046e0:	df000017 	ldw	fp,0(sp)
100046e4:	dec00204 	addi	sp,sp,8
100046e8:	f800283a 	ret

100046ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100046ec:	defffd04 	addi	sp,sp,-12
100046f0:	dfc00215 	stw	ra,8(sp)
100046f4:	df000115 	stw	fp,4(sp)
100046f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100046fc:	00840034 	movhi	r2,4096
10004700:	1095bf04 	addi	r2,r2,22268
10004704:	e0bfff15 	stw	r2,-4(fp)
10004708:	00000606 	br	10004724 <_do_ctors+0x38>
        (*ctor) (); 
1000470c:	e0bfff17 	ldw	r2,-4(fp)
10004710:	10800017 	ldw	r2,0(r2)
10004714:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004718:	e0bfff17 	ldw	r2,-4(fp)
1000471c:	10bfff04 	addi	r2,r2,-4
10004720:	e0bfff15 	stw	r2,-4(fp)
10004724:	e0ffff17 	ldw	r3,-4(fp)
10004728:	00840034 	movhi	r2,4096
1000472c:	1095c004 	addi	r2,r2,22272
10004730:	18bff62e 	bgeu	r3,r2,1000470c <__alt_data_end+0xf800470c>
        (*ctor) (); 
}
10004734:	e037883a 	mov	sp,fp
10004738:	dfc00117 	ldw	ra,4(sp)
1000473c:	df000017 	ldw	fp,0(sp)
10004740:	dec00204 	addi	sp,sp,8
10004744:	f800283a 	ret

10004748 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10004748:	defffd04 	addi	sp,sp,-12
1000474c:	dfc00215 	stw	ra,8(sp)
10004750:	df000115 	stw	fp,4(sp)
10004754:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004758:	00840034 	movhi	r2,4096
1000475c:	1095bf04 	addi	r2,r2,22268
10004760:	e0bfff15 	stw	r2,-4(fp)
10004764:	00000606 	br	10004780 <_do_dtors+0x38>
        (*dtor) (); 
10004768:	e0bfff17 	ldw	r2,-4(fp)
1000476c:	10800017 	ldw	r2,0(r2)
10004770:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004774:	e0bfff17 	ldw	r2,-4(fp)
10004778:	10bfff04 	addi	r2,r2,-4
1000477c:	e0bfff15 	stw	r2,-4(fp)
10004780:	e0ffff17 	ldw	r3,-4(fp)
10004784:	00840034 	movhi	r2,4096
10004788:	1095c004 	addi	r2,r2,22272
1000478c:	18bff62e 	bgeu	r3,r2,10004768 <__alt_data_end+0xf8004768>
        (*dtor) (); 
}
10004790:	e037883a 	mov	sp,fp
10004794:	dfc00117 	ldw	ra,4(sp)
10004798:	df000017 	ldw	fp,0(sp)
1000479c:	dec00204 	addi	sp,sp,8
100047a0:	f800283a 	ret

100047a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100047a4:	deffff04 	addi	sp,sp,-4
100047a8:	df000015 	stw	fp,0(sp)
100047ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100047b0:	e037883a 	mov	sp,fp
100047b4:	df000017 	ldw	fp,0(sp)
100047b8:	dec00104 	addi	sp,sp,4
100047bc:	f800283a 	ret

100047c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100047c0:	defff904 	addi	sp,sp,-28
100047c4:	dfc00615 	stw	ra,24(sp)
100047c8:	df000515 	stw	fp,20(sp)
100047cc:	df000504 	addi	fp,sp,20
100047d0:	e13ffc15 	stw	r4,-16(fp)
100047d4:	e17ffd15 	stw	r5,-12(fp)
100047d8:	e1bffe15 	stw	r6,-8(fp)
100047dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100047e0:	e0800217 	ldw	r2,8(fp)
100047e4:	d8800015 	stw	r2,0(sp)
100047e8:	e13ffc17 	ldw	r4,-16(fp)
100047ec:	e17ffd17 	ldw	r5,-12(fp)
100047f0:	e1bffe17 	ldw	r6,-8(fp)
100047f4:	e1ffff17 	ldw	r7,-4(fp)
100047f8:	00049a00 	call	100049a0 <alt_iic_isr_register>
}  
100047fc:	e037883a 	mov	sp,fp
10004800:	dfc00117 	ldw	ra,4(sp)
10004804:	df000017 	ldw	fp,0(sp)
10004808:	dec00204 	addi	sp,sp,8
1000480c:	f800283a 	ret

10004810 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10004810:	defff904 	addi	sp,sp,-28
10004814:	df000615 	stw	fp,24(sp)
10004818:	df000604 	addi	fp,sp,24
1000481c:	e13ffe15 	stw	r4,-8(fp)
10004820:	e17fff15 	stw	r5,-4(fp)
10004824:	e0bfff17 	ldw	r2,-4(fp)
10004828:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000482c:	0005303a 	rdctl	r2,status
10004830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004834:	e0fffb17 	ldw	r3,-20(fp)
10004838:	00bfff84 	movi	r2,-2
1000483c:	1884703a 	and	r2,r3,r2
10004840:	1001703a 	wrctl	status,r2
  
  return context;
10004844:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004848:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000484c:	e0bffa17 	ldw	r2,-24(fp)
10004850:	00c00044 	movi	r3,1
10004854:	1884983a 	sll	r2,r3,r2
10004858:	1007883a 	mov	r3,r2
1000485c:	00840074 	movhi	r2,4097
10004860:	10a32904 	addi	r2,r2,-29532
10004864:	10800017 	ldw	r2,0(r2)
10004868:	1886b03a 	or	r3,r3,r2
1000486c:	00840074 	movhi	r2,4097
10004870:	10a32904 	addi	r2,r2,-29532
10004874:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004878:	00840074 	movhi	r2,4097
1000487c:	10a32904 	addi	r2,r2,-29532
10004880:	10800017 	ldw	r2,0(r2)
10004884:	100170fa 	wrctl	ienable,r2
10004888:	e0bffc17 	ldw	r2,-16(fp)
1000488c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004890:	e0bffd17 	ldw	r2,-12(fp)
10004894:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10004898:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000489c:	0001883a 	nop
}
100048a0:	e037883a 	mov	sp,fp
100048a4:	df000017 	ldw	fp,0(sp)
100048a8:	dec00104 	addi	sp,sp,4
100048ac:	f800283a 	ret

100048b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100048b0:	defff904 	addi	sp,sp,-28
100048b4:	df000615 	stw	fp,24(sp)
100048b8:	df000604 	addi	fp,sp,24
100048bc:	e13ffe15 	stw	r4,-8(fp)
100048c0:	e17fff15 	stw	r5,-4(fp)
100048c4:	e0bfff17 	ldw	r2,-4(fp)
100048c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100048cc:	0005303a 	rdctl	r2,status
100048d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100048d4:	e0fffb17 	ldw	r3,-20(fp)
100048d8:	00bfff84 	movi	r2,-2
100048dc:	1884703a 	and	r2,r3,r2
100048e0:	1001703a 	wrctl	status,r2
  
  return context;
100048e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100048e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100048ec:	e0bffa17 	ldw	r2,-24(fp)
100048f0:	00c00044 	movi	r3,1
100048f4:	1884983a 	sll	r2,r3,r2
100048f8:	0084303a 	nor	r2,zero,r2
100048fc:	1007883a 	mov	r3,r2
10004900:	00840074 	movhi	r2,4097
10004904:	10a32904 	addi	r2,r2,-29532
10004908:	10800017 	ldw	r2,0(r2)
1000490c:	1886703a 	and	r3,r3,r2
10004910:	00840074 	movhi	r2,4097
10004914:	10a32904 	addi	r2,r2,-29532
10004918:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000491c:	00840074 	movhi	r2,4097
10004920:	10a32904 	addi	r2,r2,-29532
10004924:	10800017 	ldw	r2,0(r2)
10004928:	100170fa 	wrctl	ienable,r2
1000492c:	e0bffc17 	ldw	r2,-16(fp)
10004930:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004934:	e0bffd17 	ldw	r2,-12(fp)
10004938:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000493c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10004940:	0001883a 	nop
}
10004944:	e037883a 	mov	sp,fp
10004948:	df000017 	ldw	fp,0(sp)
1000494c:	dec00104 	addi	sp,sp,4
10004950:	f800283a 	ret

10004954 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10004954:	defffc04 	addi	sp,sp,-16
10004958:	df000315 	stw	fp,12(sp)
1000495c:	df000304 	addi	fp,sp,12
10004960:	e13ffe15 	stw	r4,-8(fp)
10004964:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10004968:	000530fa 	rdctl	r2,ienable
1000496c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10004970:	e0bfff17 	ldw	r2,-4(fp)
10004974:	00c00044 	movi	r3,1
10004978:	1884983a 	sll	r2,r3,r2
1000497c:	1007883a 	mov	r3,r2
10004980:	e0bffd17 	ldw	r2,-12(fp)
10004984:	1884703a 	and	r2,r3,r2
10004988:	1004c03a 	cmpne	r2,r2,zero
1000498c:	10803fcc 	andi	r2,r2,255
}
10004990:	e037883a 	mov	sp,fp
10004994:	df000017 	ldw	fp,0(sp)
10004998:	dec00104 	addi	sp,sp,4
1000499c:	f800283a 	ret

100049a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100049a0:	defff504 	addi	sp,sp,-44
100049a4:	dfc00a15 	stw	ra,40(sp)
100049a8:	df000915 	stw	fp,36(sp)
100049ac:	df000904 	addi	fp,sp,36
100049b0:	e13ffc15 	stw	r4,-16(fp)
100049b4:	e17ffd15 	stw	r5,-12(fp)
100049b8:	e1bffe15 	stw	r6,-8(fp)
100049bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100049c0:	00bffa84 	movi	r2,-22
100049c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100049c8:	e0bffd17 	ldw	r2,-12(fp)
100049cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100049d0:	e0bff817 	ldw	r2,-32(fp)
100049d4:	10800808 	cmpgei	r2,r2,32
100049d8:	1000271e 	bne	r2,zero,10004a78 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100049dc:	0005303a 	rdctl	r2,status
100049e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100049e4:	e0fffa17 	ldw	r3,-24(fp)
100049e8:	00bfff84 	movi	r2,-2
100049ec:	1884703a 	and	r2,r3,r2
100049f0:	1001703a 	wrctl	status,r2
  
  return context;
100049f4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100049f8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100049fc:	00840074 	movhi	r2,4097
10004a00:	10a33704 	addi	r2,r2,-29476
10004a04:	e0fff817 	ldw	r3,-32(fp)
10004a08:	180690fa 	slli	r3,r3,3
10004a0c:	10c5883a 	add	r2,r2,r3
10004a10:	e0fffe17 	ldw	r3,-8(fp)
10004a14:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10004a18:	00840074 	movhi	r2,4097
10004a1c:	10a33704 	addi	r2,r2,-29476
10004a20:	e0fff817 	ldw	r3,-32(fp)
10004a24:	180690fa 	slli	r3,r3,3
10004a28:	10c5883a 	add	r2,r2,r3
10004a2c:	10800104 	addi	r2,r2,4
10004a30:	e0ffff17 	ldw	r3,-4(fp)
10004a34:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10004a38:	e0bffe17 	ldw	r2,-8(fp)
10004a3c:	10000526 	beq	r2,zero,10004a54 <alt_iic_isr_register+0xb4>
10004a40:	e0bff817 	ldw	r2,-32(fp)
10004a44:	e13ffc17 	ldw	r4,-16(fp)
10004a48:	100b883a 	mov	r5,r2
10004a4c:	00048100 	call	10004810 <alt_ic_irq_enable>
10004a50:	00000406 	br	10004a64 <alt_iic_isr_register+0xc4>
10004a54:	e0bff817 	ldw	r2,-32(fp)
10004a58:	e13ffc17 	ldw	r4,-16(fp)
10004a5c:	100b883a 	mov	r5,r2
10004a60:	00048b00 	call	100048b0 <alt_ic_irq_disable>
10004a64:	e0bff715 	stw	r2,-36(fp)
10004a68:	e0bff917 	ldw	r2,-28(fp)
10004a6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004a70:	e0bffb17 	ldw	r2,-20(fp)
10004a74:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10004a78:	e0bff717 	ldw	r2,-36(fp)
}
10004a7c:	e037883a 	mov	sp,fp
10004a80:	dfc00117 	ldw	ra,4(sp)
10004a84:	df000017 	ldw	fp,0(sp)
10004a88:	dec00204 	addi	sp,sp,8
10004a8c:	f800283a 	ret

10004a90 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10004a90:	defff804 	addi	sp,sp,-32
10004a94:	dfc00715 	stw	ra,28(sp)
10004a98:	df000615 	stw	fp,24(sp)
10004a9c:	dc000515 	stw	r16,20(sp)
10004aa0:	df000604 	addi	fp,sp,24
10004aa4:	e13ffb15 	stw	r4,-20(fp)
10004aa8:	e17ffc15 	stw	r5,-16(fp)
10004aac:	e1bffd15 	stw	r6,-12(fp)
10004ab0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10004ab4:	e13ffc17 	ldw	r4,-16(fp)
10004ab8:	e17ffd17 	ldw	r5,-12(fp)
10004abc:	e1bffe17 	ldw	r6,-8(fp)
10004ac0:	0004d2c0 	call	10004d2c <open>
10004ac4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10004ac8:	e0bffa17 	ldw	r2,-24(fp)
10004acc:	10002216 	blt	r2,zero,10004b58 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10004ad0:	04040034 	movhi	r16,4096
10004ad4:	84180104 	addi	r16,r16,24580
10004ad8:	e0bffa17 	ldw	r2,-24(fp)
10004adc:	1009883a 	mov	r4,r2
10004ae0:	01400304 	movi	r5,12
10004ae4:	0002f800 	call	10002f80 <__mulsi3>
10004ae8:	8085883a 	add	r2,r16,r2
10004aec:	10c00017 	ldw	r3,0(r2)
10004af0:	e0bffb17 	ldw	r2,-20(fp)
10004af4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10004af8:	04040034 	movhi	r16,4096
10004afc:	84180104 	addi	r16,r16,24580
10004b00:	e0bffa17 	ldw	r2,-24(fp)
10004b04:	1009883a 	mov	r4,r2
10004b08:	01400304 	movi	r5,12
10004b0c:	0002f800 	call	10002f80 <__mulsi3>
10004b10:	8085883a 	add	r2,r16,r2
10004b14:	10800104 	addi	r2,r2,4
10004b18:	10c00017 	ldw	r3,0(r2)
10004b1c:	e0bffb17 	ldw	r2,-20(fp)
10004b20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10004b24:	04040034 	movhi	r16,4096
10004b28:	84180104 	addi	r16,r16,24580
10004b2c:	e0bffa17 	ldw	r2,-24(fp)
10004b30:	1009883a 	mov	r4,r2
10004b34:	01400304 	movi	r5,12
10004b38:	0002f800 	call	10002f80 <__mulsi3>
10004b3c:	8085883a 	add	r2,r16,r2
10004b40:	10800204 	addi	r2,r2,8
10004b44:	10c00017 	ldw	r3,0(r2)
10004b48:	e0bffb17 	ldw	r2,-20(fp)
10004b4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10004b50:	e13ffa17 	ldw	r4,-24(fp)
10004b54:	000371c0 	call	1000371c <alt_release_fd>
  }
} 
10004b58:	e6ffff04 	addi	sp,fp,-4
10004b5c:	dfc00217 	ldw	ra,8(sp)
10004b60:	df000117 	ldw	fp,4(sp)
10004b64:	dc000017 	ldw	r16,0(sp)
10004b68:	dec00304 	addi	sp,sp,12
10004b6c:	f800283a 	ret

10004b70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10004b70:	defffb04 	addi	sp,sp,-20
10004b74:	dfc00415 	stw	ra,16(sp)
10004b78:	df000315 	stw	fp,12(sp)
10004b7c:	df000304 	addi	fp,sp,12
10004b80:	e13ffd15 	stw	r4,-12(fp)
10004b84:	e17ffe15 	stw	r5,-8(fp)
10004b88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10004b8c:	01040034 	movhi	r4,4096
10004b90:	21180404 	addi	r4,r4,24592
10004b94:	e17ffd17 	ldw	r5,-12(fp)
10004b98:	01800044 	movi	r6,1
10004b9c:	01c07fc4 	movi	r7,511
10004ba0:	0004a900 	call	10004a90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004ba4:	01040034 	movhi	r4,4096
10004ba8:	21180104 	addi	r4,r4,24580
10004bac:	e17ffe17 	ldw	r5,-8(fp)
10004bb0:	000d883a 	mov	r6,zero
10004bb4:	01c07fc4 	movi	r7,511
10004bb8:	0004a900 	call	10004a90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10004bbc:	01040034 	movhi	r4,4096
10004bc0:	21180704 	addi	r4,r4,24604
10004bc4:	e17fff17 	ldw	r5,-4(fp)
10004bc8:	01800044 	movi	r6,1
10004bcc:	01c07fc4 	movi	r7,511
10004bd0:	0004a900 	call	10004a90 <alt_open_fd>
}  
10004bd4:	e037883a 	mov	sp,fp
10004bd8:	dfc00117 	ldw	ra,4(sp)
10004bdc:	df000017 	ldw	fp,0(sp)
10004be0:	dec00204 	addi	sp,sp,8
10004be4:	f800283a 	ret

10004be8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004be8:	defffe04 	addi	sp,sp,-8
10004bec:	dfc00115 	stw	ra,4(sp)
10004bf0:	df000015 	stw	fp,0(sp)
10004bf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004bf8:	00840034 	movhi	r2,4096
10004bfc:	109c8204 	addi	r2,r2,29192
10004c00:	10800017 	ldw	r2,0(r2)
10004c04:	10000526 	beq	r2,zero,10004c1c <alt_get_errno+0x34>
10004c08:	00840034 	movhi	r2,4096
10004c0c:	109c8204 	addi	r2,r2,29192
10004c10:	10800017 	ldw	r2,0(r2)
10004c14:	103ee83a 	callr	r2
10004c18:	00000206 	br	10004c24 <alt_get_errno+0x3c>
10004c1c:	00840074 	movhi	r2,4097
10004c20:	10a32504 	addi	r2,r2,-29548
}
10004c24:	e037883a 	mov	sp,fp
10004c28:	dfc00117 	ldw	ra,4(sp)
10004c2c:	df000017 	ldw	fp,0(sp)
10004c30:	dec00204 	addi	sp,sp,8
10004c34:	f800283a 	ret

10004c38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10004c38:	defffb04 	addi	sp,sp,-20
10004c3c:	dfc00415 	stw	ra,16(sp)
10004c40:	df000315 	stw	fp,12(sp)
10004c44:	dc000215 	stw	r16,8(sp)
10004c48:	df000304 	addi	fp,sp,12
10004c4c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10004c50:	e0bffe17 	ldw	r2,-8(fp)
10004c54:	10800217 	ldw	r2,8(r2)
10004c58:	10d00034 	orhi	r3,r2,16384
10004c5c:	e0bffe17 	ldw	r2,-8(fp)
10004c60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004c64:	e03ffd15 	stw	zero,-12(fp)
10004c68:	00002306 	br	10004cf8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004c6c:	04040034 	movhi	r16,4096
10004c70:	84180104 	addi	r16,r16,24580
10004c74:	e0bffd17 	ldw	r2,-12(fp)
10004c78:	1009883a 	mov	r4,r2
10004c7c:	01400304 	movi	r5,12
10004c80:	0002f800 	call	10002f80 <__mulsi3>
10004c84:	8085883a 	add	r2,r16,r2
10004c88:	10c00017 	ldw	r3,0(r2)
10004c8c:	e0bffe17 	ldw	r2,-8(fp)
10004c90:	10800017 	ldw	r2,0(r2)
10004c94:	1880151e 	bne	r3,r2,10004cec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004c98:	04040034 	movhi	r16,4096
10004c9c:	84180104 	addi	r16,r16,24580
10004ca0:	e0bffd17 	ldw	r2,-12(fp)
10004ca4:	1009883a 	mov	r4,r2
10004ca8:	01400304 	movi	r5,12
10004cac:	0002f800 	call	10002f80 <__mulsi3>
10004cb0:	8085883a 	add	r2,r16,r2
10004cb4:	10800204 	addi	r2,r2,8
10004cb8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004cbc:	10000b0e 	bge	r2,zero,10004cec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10004cc0:	e13ffd17 	ldw	r4,-12(fp)
10004cc4:	01400304 	movi	r5,12
10004cc8:	0002f800 	call	10002f80 <__mulsi3>
10004ccc:	1007883a 	mov	r3,r2
10004cd0:	00840034 	movhi	r2,4096
10004cd4:	10980104 	addi	r2,r2,24580
10004cd8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004cdc:	e0bffe17 	ldw	r2,-8(fp)
10004ce0:	18800226 	beq	r3,r2,10004cec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004ce4:	00bffcc4 	movi	r2,-13
10004ce8:	00000a06 	br	10004d14 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004cec:	e0bffd17 	ldw	r2,-12(fp)
10004cf0:	10800044 	addi	r2,r2,1
10004cf4:	e0bffd15 	stw	r2,-12(fp)
10004cf8:	00840034 	movhi	r2,4096
10004cfc:	109c8104 	addi	r2,r2,29188
10004d00:	10800017 	ldw	r2,0(r2)
10004d04:	1007883a 	mov	r3,r2
10004d08:	e0bffd17 	ldw	r2,-12(fp)
10004d0c:	18bfd72e 	bgeu	r3,r2,10004c6c <__alt_data_end+0xf8004c6c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004d10:	0005883a 	mov	r2,zero
}
10004d14:	e6ffff04 	addi	sp,fp,-4
10004d18:	dfc00217 	ldw	ra,8(sp)
10004d1c:	df000117 	ldw	fp,4(sp)
10004d20:	dc000017 	ldw	r16,0(sp)
10004d24:	dec00304 	addi	sp,sp,12
10004d28:	f800283a 	ret

10004d2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10004d2c:	defff604 	addi	sp,sp,-40
10004d30:	dfc00915 	stw	ra,36(sp)
10004d34:	df000815 	stw	fp,32(sp)
10004d38:	df000804 	addi	fp,sp,32
10004d3c:	e13ffd15 	stw	r4,-12(fp)
10004d40:	e17ffe15 	stw	r5,-8(fp)
10004d44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004d48:	00bfffc4 	movi	r2,-1
10004d4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004d50:	00bffb44 	movi	r2,-19
10004d54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004d58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10004d5c:	e13ffd17 	ldw	r4,-12(fp)
10004d60:	01440034 	movhi	r5,4096
10004d64:	295c7f04 	addi	r5,r5,29180
10004d68:	00050480 	call	10005048 <alt_find_dev>
10004d6c:	e0bff815 	stw	r2,-32(fp)
10004d70:	e0bff817 	ldw	r2,-32(fp)
10004d74:	1000051e 	bne	r2,zero,10004d8c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004d78:	e13ffd17 	ldw	r4,-12(fp)
10004d7c:	00050d80 	call	100050d8 <alt_find_file>
10004d80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004d84:	00800044 	movi	r2,1
10004d88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004d8c:	e0bff817 	ldw	r2,-32(fp)
10004d90:	10002b26 	beq	r2,zero,10004e40 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004d94:	e13ff817 	ldw	r4,-32(fp)
10004d98:	00051ec0 	call	100051ec <alt_get_fd>
10004d9c:	e0bff915 	stw	r2,-28(fp)
10004da0:	e0bff917 	ldw	r2,-28(fp)
10004da4:	1000030e 	bge	r2,zero,10004db4 <open+0x88>
    {
      status = index;
10004da8:	e0bff917 	ldw	r2,-28(fp)
10004dac:	e0bffa15 	stw	r2,-24(fp)
10004db0:	00002506 	br	10004e48 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10004db4:	e13ff917 	ldw	r4,-28(fp)
10004db8:	01400304 	movi	r5,12
10004dbc:	0002f800 	call	10002f80 <__mulsi3>
10004dc0:	1007883a 	mov	r3,r2
10004dc4:	00840034 	movhi	r2,4096
10004dc8:	10980104 	addi	r2,r2,24580
10004dcc:	1885883a 	add	r2,r3,r2
10004dd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004dd4:	e0fffe17 	ldw	r3,-8(fp)
10004dd8:	00900034 	movhi	r2,16384
10004ddc:	10bfffc4 	addi	r2,r2,-1
10004de0:	1886703a 	and	r3,r3,r2
10004de4:	e0bffc17 	ldw	r2,-16(fp)
10004de8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10004dec:	e0bffb17 	ldw	r2,-20(fp)
10004df0:	1000051e 	bne	r2,zero,10004e08 <open+0xdc>
10004df4:	e13ffc17 	ldw	r4,-16(fp)
10004df8:	0004c380 	call	10004c38 <alt_file_locked>
10004dfc:	e0bffa15 	stw	r2,-24(fp)
10004e00:	e0bffa17 	ldw	r2,-24(fp)
10004e04:	10001016 	blt	r2,zero,10004e48 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004e08:	e0bff817 	ldw	r2,-32(fp)
10004e0c:	10800317 	ldw	r2,12(r2)
10004e10:	10000826 	beq	r2,zero,10004e34 <open+0x108>
10004e14:	e0bff817 	ldw	r2,-32(fp)
10004e18:	10800317 	ldw	r2,12(r2)
10004e1c:	e13ffc17 	ldw	r4,-16(fp)
10004e20:	e17ffd17 	ldw	r5,-12(fp)
10004e24:	e1bffe17 	ldw	r6,-8(fp)
10004e28:	e1ffff17 	ldw	r7,-4(fp)
10004e2c:	103ee83a 	callr	r2
10004e30:	00000106 	br	10004e38 <open+0x10c>
10004e34:	0005883a 	mov	r2,zero
10004e38:	e0bffa15 	stw	r2,-24(fp)
10004e3c:	00000206 	br	10004e48 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004e40:	00bffb44 	movi	r2,-19
10004e44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10004e48:	e0bffa17 	ldw	r2,-24(fp)
10004e4c:	1000090e 	bge	r2,zero,10004e74 <open+0x148>
  {
    alt_release_fd (index);  
10004e50:	e13ff917 	ldw	r4,-28(fp)
10004e54:	000371c0 	call	1000371c <alt_release_fd>
    ALT_ERRNO = -status;
10004e58:	0004be80 	call	10004be8 <alt_get_errno>
10004e5c:	1007883a 	mov	r3,r2
10004e60:	e0bffa17 	ldw	r2,-24(fp)
10004e64:	0085c83a 	sub	r2,zero,r2
10004e68:	18800015 	stw	r2,0(r3)
    return -1;
10004e6c:	00bfffc4 	movi	r2,-1
10004e70:	00000106 	br	10004e78 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10004e74:	e0bff917 	ldw	r2,-28(fp)
}
10004e78:	e037883a 	mov	sp,fp
10004e7c:	dfc00117 	ldw	ra,4(sp)
10004e80:	df000017 	ldw	fp,0(sp)
10004e84:	dec00204 	addi	sp,sp,8
10004e88:	f800283a 	ret

10004e8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004e8c:	defffa04 	addi	sp,sp,-24
10004e90:	df000515 	stw	fp,20(sp)
10004e94:	df000504 	addi	fp,sp,20
10004e98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004e9c:	0005303a 	rdctl	r2,status
10004ea0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004ea4:	e0fffc17 	ldw	r3,-16(fp)
10004ea8:	00bfff84 	movi	r2,-2
10004eac:	1884703a 	and	r2,r3,r2
10004eb0:	1001703a 	wrctl	status,r2
  
  return context;
10004eb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004eb8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004ebc:	e0bfff17 	ldw	r2,-4(fp)
10004ec0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10004ec4:	e0bffd17 	ldw	r2,-12(fp)
10004ec8:	10800017 	ldw	r2,0(r2)
10004ecc:	e0fffd17 	ldw	r3,-12(fp)
10004ed0:	18c00117 	ldw	r3,4(r3)
10004ed4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004ed8:	e0bffd17 	ldw	r2,-12(fp)
10004edc:	10800117 	ldw	r2,4(r2)
10004ee0:	e0fffd17 	ldw	r3,-12(fp)
10004ee4:	18c00017 	ldw	r3,0(r3)
10004ee8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004eec:	e0bffd17 	ldw	r2,-12(fp)
10004ef0:	e0fffd17 	ldw	r3,-12(fp)
10004ef4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004ef8:	e0bffd17 	ldw	r2,-12(fp)
10004efc:	e0fffd17 	ldw	r3,-12(fp)
10004f00:	10c00015 	stw	r3,0(r2)
10004f04:	e0bffb17 	ldw	r2,-20(fp)
10004f08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004f0c:	e0bffe17 	ldw	r2,-8(fp)
10004f10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004f14:	e037883a 	mov	sp,fp
10004f18:	df000017 	ldw	fp,0(sp)
10004f1c:	dec00104 	addi	sp,sp,4
10004f20:	f800283a 	ret

10004f24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004f24:	defffb04 	addi	sp,sp,-20
10004f28:	dfc00415 	stw	ra,16(sp)
10004f2c:	df000315 	stw	fp,12(sp)
10004f30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10004f34:	d0a00c17 	ldw	r2,-32720(gp)
10004f38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004f3c:	d0a6b217 	ldw	r2,-25912(gp)
10004f40:	10800044 	addi	r2,r2,1
10004f44:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004f48:	00002e06 	br	10005004 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004f4c:	e0bffd17 	ldw	r2,-12(fp)
10004f50:	10800017 	ldw	r2,0(r2)
10004f54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004f58:	e0bffd17 	ldw	r2,-12(fp)
10004f5c:	10800403 	ldbu	r2,16(r2)
10004f60:	10803fcc 	andi	r2,r2,255
10004f64:	10000426 	beq	r2,zero,10004f78 <alt_tick+0x54>
10004f68:	d0a6b217 	ldw	r2,-25912(gp)
10004f6c:	1000021e 	bne	r2,zero,10004f78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004f70:	e0bffd17 	ldw	r2,-12(fp)
10004f74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004f78:	e0bffd17 	ldw	r2,-12(fp)
10004f7c:	10800217 	ldw	r2,8(r2)
10004f80:	d0e6b217 	ldw	r3,-25912(gp)
10004f84:	18801d36 	bltu	r3,r2,10004ffc <alt_tick+0xd8>
10004f88:	e0bffd17 	ldw	r2,-12(fp)
10004f8c:	10800403 	ldbu	r2,16(r2)
10004f90:	10803fcc 	andi	r2,r2,255
10004f94:	1000191e 	bne	r2,zero,10004ffc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004f98:	e0bffd17 	ldw	r2,-12(fp)
10004f9c:	10800317 	ldw	r2,12(r2)
10004fa0:	e0fffd17 	ldw	r3,-12(fp)
10004fa4:	18c00517 	ldw	r3,20(r3)
10004fa8:	1809883a 	mov	r4,r3
10004fac:	103ee83a 	callr	r2
10004fb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10004fb4:	e0bfff17 	ldw	r2,-4(fp)
10004fb8:	1000031e 	bne	r2,zero,10004fc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10004fbc:	e13ffd17 	ldw	r4,-12(fp)
10004fc0:	0004e8c0 	call	10004e8c <alt_alarm_stop>
10004fc4:	00000d06 	br	10004ffc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10004fc8:	e0bffd17 	ldw	r2,-12(fp)
10004fcc:	10c00217 	ldw	r3,8(r2)
10004fd0:	e0bfff17 	ldw	r2,-4(fp)
10004fd4:	1887883a 	add	r3,r3,r2
10004fd8:	e0bffd17 	ldw	r2,-12(fp)
10004fdc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10004fe0:	e0bffd17 	ldw	r2,-12(fp)
10004fe4:	10c00217 	ldw	r3,8(r2)
10004fe8:	d0a6b217 	ldw	r2,-25912(gp)
10004fec:	1880032e 	bgeu	r3,r2,10004ffc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10004ff0:	e0bffd17 	ldw	r2,-12(fp)
10004ff4:	00c00044 	movi	r3,1
10004ff8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10004ffc:	e0bffe17 	ldw	r2,-8(fp)
10005000:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005004:	e0fffd17 	ldw	r3,-12(fp)
10005008:	d0a00c04 	addi	r2,gp,-32720
1000500c:	18bfcf1e 	bne	r3,r2,10004f4c <__alt_data_end+0xf8004f4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10005010:	0001883a 	nop
}
10005014:	e037883a 	mov	sp,fp
10005018:	dfc00117 	ldw	ra,4(sp)
1000501c:	df000017 	ldw	fp,0(sp)
10005020:	dec00204 	addi	sp,sp,8
10005024:	f800283a 	ret

10005028 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10005028:	deffff04 	addi	sp,sp,-4
1000502c:	df000015 	stw	fp,0(sp)
10005030:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10005034:	000170fa 	wrctl	ienable,zero
}
10005038:	e037883a 	mov	sp,fp
1000503c:	df000017 	ldw	fp,0(sp)
10005040:	dec00104 	addi	sp,sp,4
10005044:	f800283a 	ret

10005048 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10005048:	defffa04 	addi	sp,sp,-24
1000504c:	dfc00515 	stw	ra,20(sp)
10005050:	df000415 	stw	fp,16(sp)
10005054:	df000404 	addi	fp,sp,16
10005058:	e13ffe15 	stw	r4,-8(fp)
1000505c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10005060:	e0bfff17 	ldw	r2,-4(fp)
10005064:	10800017 	ldw	r2,0(r2)
10005068:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000506c:	e13ffe17 	ldw	r4,-8(fp)
10005070:	000052c0 	call	1000052c <strlen>
10005074:	10800044 	addi	r2,r2,1
10005078:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000507c:	00000d06 	br	100050b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10005080:	e0bffc17 	ldw	r2,-16(fp)
10005084:	10c00217 	ldw	r3,8(r2)
10005088:	e0bffd17 	ldw	r2,-12(fp)
1000508c:	1809883a 	mov	r4,r3
10005090:	e17ffe17 	ldw	r5,-8(fp)
10005094:	100d883a 	mov	r6,r2
10005098:	00053a80 	call	100053a8 <memcmp>
1000509c:	1000021e 	bne	r2,zero,100050a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100050a0:	e0bffc17 	ldw	r2,-16(fp)
100050a4:	00000706 	br	100050c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100050a8:	e0bffc17 	ldw	r2,-16(fp)
100050ac:	10800017 	ldw	r2,0(r2)
100050b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100050b4:	e0fffc17 	ldw	r3,-16(fp)
100050b8:	e0bfff17 	ldw	r2,-4(fp)
100050bc:	18bff01e 	bne	r3,r2,10005080 <__alt_data_end+0xf8005080>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100050c0:	0005883a 	mov	r2,zero
}
100050c4:	e037883a 	mov	sp,fp
100050c8:	dfc00117 	ldw	ra,4(sp)
100050cc:	df000017 	ldw	fp,0(sp)
100050d0:	dec00204 	addi	sp,sp,8
100050d4:	f800283a 	ret

100050d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100050d8:	defffb04 	addi	sp,sp,-20
100050dc:	dfc00415 	stw	ra,16(sp)
100050e0:	df000315 	stw	fp,12(sp)
100050e4:	df000304 	addi	fp,sp,12
100050e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100050ec:	00840034 	movhi	r2,4096
100050f0:	109c7d04 	addi	r2,r2,29172
100050f4:	10800017 	ldw	r2,0(r2)
100050f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100050fc:	00003106 	br	100051c4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10005100:	e0bffd17 	ldw	r2,-12(fp)
10005104:	10800217 	ldw	r2,8(r2)
10005108:	1009883a 	mov	r4,r2
1000510c:	000052c0 	call	1000052c <strlen>
10005110:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10005114:	e0bffd17 	ldw	r2,-12(fp)
10005118:	10c00217 	ldw	r3,8(r2)
1000511c:	e0bffe17 	ldw	r2,-8(fp)
10005120:	10bfffc4 	addi	r2,r2,-1
10005124:	1885883a 	add	r2,r3,r2
10005128:	10800003 	ldbu	r2,0(r2)
1000512c:	10803fcc 	andi	r2,r2,255
10005130:	1080201c 	xori	r2,r2,128
10005134:	10bfe004 	addi	r2,r2,-128
10005138:	10800bd8 	cmpnei	r2,r2,47
1000513c:	1000031e 	bne	r2,zero,1000514c <alt_find_file+0x74>
    {
      len -= 1;
10005140:	e0bffe17 	ldw	r2,-8(fp)
10005144:	10bfffc4 	addi	r2,r2,-1
10005148:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000514c:	e0bffe17 	ldw	r2,-8(fp)
10005150:	e0ffff17 	ldw	r3,-4(fp)
10005154:	1885883a 	add	r2,r3,r2
10005158:	10800003 	ldbu	r2,0(r2)
1000515c:	10803fcc 	andi	r2,r2,255
10005160:	1080201c 	xori	r2,r2,128
10005164:	10bfe004 	addi	r2,r2,-128
10005168:	10800be0 	cmpeqi	r2,r2,47
1000516c:	1000081e 	bne	r2,zero,10005190 <alt_find_file+0xb8>
10005170:	e0bffe17 	ldw	r2,-8(fp)
10005174:	e0ffff17 	ldw	r3,-4(fp)
10005178:	1885883a 	add	r2,r3,r2
1000517c:	10800003 	ldbu	r2,0(r2)
10005180:	10803fcc 	andi	r2,r2,255
10005184:	1080201c 	xori	r2,r2,128
10005188:	10bfe004 	addi	r2,r2,-128
1000518c:	10000a1e 	bne	r2,zero,100051b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10005190:	e0bffd17 	ldw	r2,-12(fp)
10005194:	10c00217 	ldw	r3,8(r2)
10005198:	e0bffe17 	ldw	r2,-8(fp)
1000519c:	1809883a 	mov	r4,r3
100051a0:	e17fff17 	ldw	r5,-4(fp)
100051a4:	100d883a 	mov	r6,r2
100051a8:	00053a80 	call	100053a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100051ac:	1000021e 	bne	r2,zero,100051b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100051b0:	e0bffd17 	ldw	r2,-12(fp)
100051b4:	00000806 	br	100051d8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100051b8:	e0bffd17 	ldw	r2,-12(fp)
100051bc:	10800017 	ldw	r2,0(r2)
100051c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100051c4:	e0fffd17 	ldw	r3,-12(fp)
100051c8:	00840034 	movhi	r2,4096
100051cc:	109c7d04 	addi	r2,r2,29172
100051d0:	18bfcb1e 	bne	r3,r2,10005100 <__alt_data_end+0xf8005100>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100051d4:	0005883a 	mov	r2,zero
}
100051d8:	e037883a 	mov	sp,fp
100051dc:	dfc00117 	ldw	ra,4(sp)
100051e0:	df000017 	ldw	fp,0(sp)
100051e4:	dec00204 	addi	sp,sp,8
100051e8:	f800283a 	ret

100051ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100051ec:	defffa04 	addi	sp,sp,-24
100051f0:	dfc00515 	stw	ra,20(sp)
100051f4:	df000415 	stw	fp,16(sp)
100051f8:	dc000315 	stw	r16,12(sp)
100051fc:	df000404 	addi	fp,sp,16
10005200:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10005204:	00bffa04 	movi	r2,-24
10005208:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000520c:	e03ffc15 	stw	zero,-16(fp)
10005210:	00002106 	br	10005298 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10005214:	04040034 	movhi	r16,4096
10005218:	84180104 	addi	r16,r16,24580
1000521c:	e0bffc17 	ldw	r2,-16(fp)
10005220:	1009883a 	mov	r4,r2
10005224:	01400304 	movi	r5,12
10005228:	0002f800 	call	10002f80 <__mulsi3>
1000522c:	8085883a 	add	r2,r16,r2
10005230:	10800017 	ldw	r2,0(r2)
10005234:	1000151e 	bne	r2,zero,1000528c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10005238:	04040034 	movhi	r16,4096
1000523c:	84180104 	addi	r16,r16,24580
10005240:	e0bffc17 	ldw	r2,-16(fp)
10005244:	1009883a 	mov	r4,r2
10005248:	01400304 	movi	r5,12
1000524c:	0002f800 	call	10002f80 <__mulsi3>
10005250:	8085883a 	add	r2,r16,r2
10005254:	e0fffe17 	ldw	r3,-8(fp)
10005258:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000525c:	00840034 	movhi	r2,4096
10005260:	109c8104 	addi	r2,r2,29188
10005264:	10c00017 	ldw	r3,0(r2)
10005268:	e0bffc17 	ldw	r2,-16(fp)
1000526c:	1880040e 	bge	r3,r2,10005280 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10005270:	00840034 	movhi	r2,4096
10005274:	109c8104 	addi	r2,r2,29188
10005278:	e0fffc17 	ldw	r3,-16(fp)
1000527c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10005280:	e0bffc17 	ldw	r2,-16(fp)
10005284:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005288:	00000606 	br	100052a4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000528c:	e0bffc17 	ldw	r2,-16(fp)
10005290:	10800044 	addi	r2,r2,1
10005294:	e0bffc15 	stw	r2,-16(fp)
10005298:	e0bffc17 	ldw	r2,-16(fp)
1000529c:	10800810 	cmplti	r2,r2,32
100052a0:	103fdc1e 	bne	r2,zero,10005214 <__alt_data_end+0xf8005214>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100052a4:	e0bffd17 	ldw	r2,-12(fp)
}
100052a8:	e6ffff04 	addi	sp,fp,-4
100052ac:	dfc00217 	ldw	ra,8(sp)
100052b0:	df000117 	ldw	fp,4(sp)
100052b4:	dc000017 	ldw	r16,0(sp)
100052b8:	dec00304 	addi	sp,sp,12
100052bc:	f800283a 	ret

100052c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100052c0:	defffe04 	addi	sp,sp,-8
100052c4:	df000115 	stw	fp,4(sp)
100052c8:	df000104 	addi	fp,sp,4
100052cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100052d0:	e0bfff17 	ldw	r2,-4(fp)
100052d4:	10bffe84 	addi	r2,r2,-6
100052d8:	10c00428 	cmpgeui	r3,r2,16
100052dc:	18001a1e 	bne	r3,zero,10005348 <alt_exception_cause_generated_bad_addr+0x88>
100052e0:	100690ba 	slli	r3,r2,2
100052e4:	00840034 	movhi	r2,4096
100052e8:	1094be04 	addi	r2,r2,21240
100052ec:	1885883a 	add	r2,r3,r2
100052f0:	10800017 	ldw	r2,0(r2)
100052f4:	1000683a 	jmp	r2
100052f8:	10005338 	rdprs	zero,r2,332
100052fc:	10005338 	rdprs	zero,r2,332
10005300:	10005348 	cmpgei	zero,r2,333
10005304:	10005348 	cmpgei	zero,r2,333
10005308:	10005348 	cmpgei	zero,r2,333
1000530c:	10005338 	rdprs	zero,r2,332
10005310:	10005340 	call	11000534 <_gp+0xff1350>
10005314:	10005348 	cmpgei	zero,r2,333
10005318:	10005338 	rdprs	zero,r2,332
1000531c:	10005338 	rdprs	zero,r2,332
10005320:	10005348 	cmpgei	zero,r2,333
10005324:	10005338 	rdprs	zero,r2,332
10005328:	10005340 	call	11000534 <_gp+0xff1350>
1000532c:	10005348 	cmpgei	zero,r2,333
10005330:	10005348 	cmpgei	zero,r2,333
10005334:	10005338 	rdprs	zero,r2,332
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10005338:	00800044 	movi	r2,1
1000533c:	00000306 	br	1000534c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10005340:	0005883a 	mov	r2,zero
10005344:	00000106 	br	1000534c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10005348:	0005883a 	mov	r2,zero
  }
}
1000534c:	e037883a 	mov	sp,fp
10005350:	df000017 	ldw	fp,0(sp)
10005354:	dec00104 	addi	sp,sp,4
10005358:	f800283a 	ret

1000535c <atexit>:
1000535c:	200b883a 	mov	r5,r4
10005360:	000d883a 	mov	r6,zero
10005364:	0009883a 	mov	r4,zero
10005368:	000f883a 	mov	r7,zero
1000536c:	00054241 	jmpi	10005424 <__register_exitproc>

10005370 <exit>:
10005370:	defffe04 	addi	sp,sp,-8
10005374:	000b883a 	mov	r5,zero
10005378:	dc000015 	stw	r16,0(sp)
1000537c:	dfc00115 	stw	ra,4(sp)
10005380:	2021883a 	mov	r16,r4
10005384:	00055380 	call	10005538 <__call_exitprocs>
10005388:	00840034 	movhi	r2,4096
1000538c:	109c7904 	addi	r2,r2,29156
10005390:	11000017 	ldw	r4,0(r2)
10005394:	20800f17 	ldw	r2,60(r4)
10005398:	10000126 	beq	r2,zero,100053a0 <exit+0x30>
1000539c:	103ee83a 	callr	r2
100053a0:	8009883a 	mov	r4,r16
100053a4:	00056cc0 	call	100056cc <_exit>

100053a8 <memcmp>:
100053a8:	01c000c4 	movi	r7,3
100053ac:	3980192e 	bgeu	r7,r6,10005414 <memcmp+0x6c>
100053b0:	2144b03a 	or	r2,r4,r5
100053b4:	11c4703a 	and	r2,r2,r7
100053b8:	10000f26 	beq	r2,zero,100053f8 <memcmp+0x50>
100053bc:	20800003 	ldbu	r2,0(r4)
100053c0:	28c00003 	ldbu	r3,0(r5)
100053c4:	10c0151e 	bne	r2,r3,1000541c <memcmp+0x74>
100053c8:	31bfff84 	addi	r6,r6,-2
100053cc:	01ffffc4 	movi	r7,-1
100053d0:	00000406 	br	100053e4 <memcmp+0x3c>
100053d4:	20800003 	ldbu	r2,0(r4)
100053d8:	28c00003 	ldbu	r3,0(r5)
100053dc:	31bfffc4 	addi	r6,r6,-1
100053e0:	10c00e1e 	bne	r2,r3,1000541c <memcmp+0x74>
100053e4:	21000044 	addi	r4,r4,1
100053e8:	29400044 	addi	r5,r5,1
100053ec:	31fff91e 	bne	r6,r7,100053d4 <__alt_data_end+0xf80053d4>
100053f0:	0005883a 	mov	r2,zero
100053f4:	f800283a 	ret
100053f8:	20c00017 	ldw	r3,0(r4)
100053fc:	28800017 	ldw	r2,0(r5)
10005400:	1880041e 	bne	r3,r2,10005414 <memcmp+0x6c>
10005404:	31bfff04 	addi	r6,r6,-4
10005408:	21000104 	addi	r4,r4,4
1000540c:	29400104 	addi	r5,r5,4
10005410:	39bff936 	bltu	r7,r6,100053f8 <__alt_data_end+0xf80053f8>
10005414:	303fe91e 	bne	r6,zero,100053bc <__alt_data_end+0xf80053bc>
10005418:	003ff506 	br	100053f0 <__alt_data_end+0xf80053f0>
1000541c:	10c5c83a 	sub	r2,r2,r3
10005420:	f800283a 	ret

10005424 <__register_exitproc>:
10005424:	00840034 	movhi	r2,4096
10005428:	defffa04 	addi	sp,sp,-24
1000542c:	109c7904 	addi	r2,r2,29156
10005430:	dc000315 	stw	r16,12(sp)
10005434:	14000017 	ldw	r16,0(r2)
10005438:	dc400415 	stw	r17,16(sp)
1000543c:	dfc00515 	stw	ra,20(sp)
10005440:	80805217 	ldw	r2,328(r16)
10005444:	2023883a 	mov	r17,r4
10005448:	10003626 	beq	r2,zero,10005524 <__register_exitproc+0x100>
1000544c:	10c00117 	ldw	r3,4(r2)
10005450:	010007c4 	movi	r4,31
10005454:	20c00e16 	blt	r4,r3,10005490 <__register_exitproc+0x6c>
10005458:	1a400044 	addi	r9,r3,1
1000545c:	8800211e 	bne	r17,zero,100054e4 <__register_exitproc+0xc0>
10005460:	18c00084 	addi	r3,r3,2
10005464:	18c7883a 	add	r3,r3,r3
10005468:	18c7883a 	add	r3,r3,r3
1000546c:	12400115 	stw	r9,4(r2)
10005470:	10c7883a 	add	r3,r2,r3
10005474:	19400015 	stw	r5,0(r3)
10005478:	0005883a 	mov	r2,zero
1000547c:	dfc00517 	ldw	ra,20(sp)
10005480:	dc400417 	ldw	r17,16(sp)
10005484:	dc000317 	ldw	r16,12(sp)
10005488:	dec00604 	addi	sp,sp,24
1000548c:	f800283a 	ret
10005490:	00800034 	movhi	r2,0
10005494:	10800004 	addi	r2,r2,0
10005498:	10002526 	beq	r2,zero,10005530 <__register_exitproc+0x10c>
1000549c:	01006404 	movi	r4,400
100054a0:	d9400015 	stw	r5,0(sp)
100054a4:	d9800115 	stw	r6,4(sp)
100054a8:	d9c00215 	stw	r7,8(sp)
100054ac:	00000000 	call	10000000 <__alt_mem_sdram>
100054b0:	d9400017 	ldw	r5,0(sp)
100054b4:	d9800117 	ldw	r6,4(sp)
100054b8:	d9c00217 	ldw	r7,8(sp)
100054bc:	10001c26 	beq	r2,zero,10005530 <__register_exitproc+0x10c>
100054c0:	80c05217 	ldw	r3,328(r16)
100054c4:	10000115 	stw	zero,4(r2)
100054c8:	02400044 	movi	r9,1
100054cc:	10c00015 	stw	r3,0(r2)
100054d0:	80805215 	stw	r2,328(r16)
100054d4:	10006215 	stw	zero,392(r2)
100054d8:	10006315 	stw	zero,396(r2)
100054dc:	0007883a 	mov	r3,zero
100054e0:	883fdf26 	beq	r17,zero,10005460 <__alt_data_end+0xf8005460>
100054e4:	18d1883a 	add	r8,r3,r3
100054e8:	4211883a 	add	r8,r8,r8
100054ec:	1211883a 	add	r8,r2,r8
100054f0:	41802215 	stw	r6,136(r8)
100054f4:	01000044 	movi	r4,1
100054f8:	11806217 	ldw	r6,392(r2)
100054fc:	20c8983a 	sll	r4,r4,r3
10005500:	310cb03a 	or	r6,r6,r4
10005504:	11806215 	stw	r6,392(r2)
10005508:	41c04215 	stw	r7,264(r8)
1000550c:	01800084 	movi	r6,2
10005510:	89bfd31e 	bne	r17,r6,10005460 <__alt_data_end+0xf8005460>
10005514:	11806317 	ldw	r6,396(r2)
10005518:	3108b03a 	or	r4,r6,r4
1000551c:	11006315 	stw	r4,396(r2)
10005520:	003fcf06 	br	10005460 <__alt_data_end+0xf8005460>
10005524:	80805304 	addi	r2,r16,332
10005528:	80805215 	stw	r2,328(r16)
1000552c:	003fc706 	br	1000544c <__alt_data_end+0xf800544c>
10005530:	00bfffc4 	movi	r2,-1
10005534:	003fd106 	br	1000547c <__alt_data_end+0xf800547c>

10005538 <__call_exitprocs>:
10005538:	00840034 	movhi	r2,4096
1000553c:	109c7904 	addi	r2,r2,29156
10005540:	10800017 	ldw	r2,0(r2)
10005544:	defff404 	addi	sp,sp,-48
10005548:	dd800815 	stw	r22,32(sp)
1000554c:	d8800015 	stw	r2,0(sp)
10005550:	10805204 	addi	r2,r2,328
10005554:	dd000615 	stw	r20,24(sp)
10005558:	dc800415 	stw	r18,16(sp)
1000555c:	dfc00b15 	stw	ra,44(sp)
10005560:	df000a15 	stw	fp,40(sp)
10005564:	ddc00915 	stw	r23,36(sp)
10005568:	dd400715 	stw	r21,28(sp)
1000556c:	dcc00515 	stw	r19,20(sp)
10005570:	dc400315 	stw	r17,12(sp)
10005574:	dc000215 	stw	r16,8(sp)
10005578:	2025883a 	mov	r18,r4
1000557c:	2829883a 	mov	r20,r5
10005580:	d8800115 	stw	r2,4(sp)
10005584:	05bfffc4 	movi	r22,-1
10005588:	d8800017 	ldw	r2,0(sp)
1000558c:	14c05217 	ldw	r19,328(r2)
10005590:	98001d26 	beq	r19,zero,10005608 <__call_exitprocs+0xd0>
10005594:	dd400117 	ldw	r21,4(sp)
10005598:	98800117 	ldw	r2,4(r19)
1000559c:	173fffc4 	addi	fp,r2,-1
100055a0:	e0000d16 	blt	fp,zero,100055d8 <__call_exitprocs+0xa0>
100055a4:	14000044 	addi	r16,r2,1
100055a8:	8421883a 	add	r16,r16,r16
100055ac:	8421883a 	add	r16,r16,r16
100055b0:	84402004 	addi	r17,r16,128
100055b4:	9c63883a 	add	r17,r19,r17
100055b8:	9c21883a 	add	r16,r19,r16
100055bc:	a0001e26 	beq	r20,zero,10005638 <__call_exitprocs+0x100>
100055c0:	80804017 	ldw	r2,256(r16)
100055c4:	15001c26 	beq	r2,r20,10005638 <__call_exitprocs+0x100>
100055c8:	e73fffc4 	addi	fp,fp,-1
100055cc:	843fff04 	addi	r16,r16,-4
100055d0:	8c7fff04 	addi	r17,r17,-4
100055d4:	e5bff91e 	bne	fp,r22,100055bc <__alt_data_end+0xf80055bc>
100055d8:	00800034 	movhi	r2,0
100055dc:	10800004 	addi	r2,r2,0
100055e0:	10000926 	beq	r2,zero,10005608 <__call_exitprocs+0xd0>
100055e4:	98800117 	ldw	r2,4(r19)
100055e8:	1000311e 	bne	r2,zero,100056b0 <__call_exitprocs+0x178>
100055ec:	98800017 	ldw	r2,0(r19)
100055f0:	10003426 	beq	r2,zero,100056c4 <__call_exitprocs+0x18c>
100055f4:	9809883a 	mov	r4,r19
100055f8:	a8800015 	stw	r2,0(r21)
100055fc:	00000000 	call	10000000 <__alt_mem_sdram>
10005600:	acc00017 	ldw	r19,0(r21)
10005604:	983fe41e 	bne	r19,zero,10005598 <__alt_data_end+0xf8005598>
10005608:	dfc00b17 	ldw	ra,44(sp)
1000560c:	df000a17 	ldw	fp,40(sp)
10005610:	ddc00917 	ldw	r23,36(sp)
10005614:	dd800817 	ldw	r22,32(sp)
10005618:	dd400717 	ldw	r21,28(sp)
1000561c:	dd000617 	ldw	r20,24(sp)
10005620:	dcc00517 	ldw	r19,20(sp)
10005624:	dc800417 	ldw	r18,16(sp)
10005628:	dc400317 	ldw	r17,12(sp)
1000562c:	dc000217 	ldw	r16,8(sp)
10005630:	dec00c04 	addi	sp,sp,48
10005634:	f800283a 	ret
10005638:	98800117 	ldw	r2,4(r19)
1000563c:	80c00017 	ldw	r3,0(r16)
10005640:	10bfffc4 	addi	r2,r2,-1
10005644:	17001526 	beq	r2,fp,1000569c <__call_exitprocs+0x164>
10005648:	80000015 	stw	zero,0(r16)
1000564c:	183fde26 	beq	r3,zero,100055c8 <__alt_data_end+0xf80055c8>
10005650:	00800044 	movi	r2,1
10005654:	1708983a 	sll	r4,r2,fp
10005658:	98806217 	ldw	r2,392(r19)
1000565c:	9dc00117 	ldw	r23,4(r19)
10005660:	2084703a 	and	r2,r4,r2
10005664:	1000061e 	bne	r2,zero,10005680 <__call_exitprocs+0x148>
10005668:	183ee83a 	callr	r3
1000566c:	98800117 	ldw	r2,4(r19)
10005670:	15ffc51e 	bne	r2,r23,10005588 <__alt_data_end+0xf8005588>
10005674:	a8800017 	ldw	r2,0(r21)
10005678:	14ffd326 	beq	r2,r19,100055c8 <__alt_data_end+0xf80055c8>
1000567c:	003fc206 	br	10005588 <__alt_data_end+0xf8005588>
10005680:	98806317 	ldw	r2,396(r19)
10005684:	2084703a 	and	r2,r4,r2
10005688:	1000061e 	bne	r2,zero,100056a4 <__call_exitprocs+0x16c>
1000568c:	89400017 	ldw	r5,0(r17)
10005690:	9009883a 	mov	r4,r18
10005694:	183ee83a 	callr	r3
10005698:	003ff406 	br	1000566c <__alt_data_end+0xf800566c>
1000569c:	9f000115 	stw	fp,4(r19)
100056a0:	003fea06 	br	1000564c <__alt_data_end+0xf800564c>
100056a4:	89000017 	ldw	r4,0(r17)
100056a8:	183ee83a 	callr	r3
100056ac:	003fef06 	br	1000566c <__alt_data_end+0xf800566c>
100056b0:	98800017 	ldw	r2,0(r19)
100056b4:	982b883a 	mov	r21,r19
100056b8:	1027883a 	mov	r19,r2
100056bc:	983fb61e 	bne	r19,zero,10005598 <__alt_data_end+0xf8005598>
100056c0:	003fd106 	br	10005608 <__alt_data_end+0xf8005608>
100056c4:	0005883a 	mov	r2,zero
100056c8:	003ffa06 	br	100056b4 <__alt_data_end+0xf80056b4>

100056cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100056cc:	defffd04 	addi	sp,sp,-12
100056d0:	df000215 	stw	fp,8(sp)
100056d4:	df000204 	addi	fp,sp,8
100056d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100056dc:	0001883a 	nop
100056e0:	e0bfff17 	ldw	r2,-4(fp)
100056e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100056e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100056ec:	10000226 	beq	r2,zero,100056f8 <_exit+0x2c>
    ALT_SIM_FAIL();
100056f0:	002af070 	cmpltui	zero,zero,43969
100056f4:	00000106 	br	100056fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100056f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100056fc:	003fff06 	br	100056fc <__alt_data_end+0xf80056fc>
