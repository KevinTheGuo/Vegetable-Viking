
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00005984 memsz 0x00005984 flags r-x
    LOAD off    0x000069a4 vaddr 0x100059a4 paddr 0x10006ffc align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x00008654 vaddr 0x10008654 paddr 0x10008654 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005640  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  1000586c  1000586c  0000686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  100059a4  10006ffc  000069a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  10008654  10008654  00008654  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00007ffc  2**0
                  CONTENTS
  7 .sdram        00000000  100088b0  100088b0  00007ffc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007ffc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000710  00000000  00000000  00008020  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a170  00000000  00000000  00008730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035f7  00000000  00000000  000128a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003a3b  00000000  00000000  00015e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ee8  00000000  00000000  000198d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002141  00000000  00000000  0001a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005fe9  00000000  00000000  0001c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000228e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000008c0  00000000  00000000  000228f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002518e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00025191  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002519d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002519e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002519f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000251a3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000251a7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000251ab  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000251b6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000251c1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000251cc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  000251d7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  000251f1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00029638  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1000586c l    d  .rodata	00000000 .rodata
100059a4 l    d  .rwdata	00000000 .rwdata
10008654 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100088b0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002110 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
100059a4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
10003608 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10003764 l     F .text	00000038 alt_dev_reg
10005dc8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003a40 l     F .text	00000204 altera_avalon_jtag_uart_irq
10003c44 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
100043a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100044e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10004514 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100049ac l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10004b04 l     F .text	00000050 alt_get_errno
10004b54 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008688 g     O .bss	00000004 alt_instruction_exception_handler
10001258 g     F .text	00000068 convertDecimalToBinary
100036ec g     F .text	00000078 alt_main
100087b0 g     O .bss	00000100 alt_irq
10006ffc g       *ABS*	00000000 __flash_rwdata_start
10000b44 g     F .text	00000084 sliceEngine
100008b0 g     F .text	00000294 spawningEngine
10004fc4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000868c g     O .bss	00000004 errno
10008674 g     O .bss	00000004 alt_argv
1000efd0 g       *ABS*	00000000 _gp
10008654 g     O .bss	00000004 yCursor
10006e50 g     O .rwdata	00000180 alt_fd_list
10004fe4 g     F .text	00000090 alt_find_dev
100053c0 g     F .text	00000138 memcpy
10003458 g     F .text	000000d0 .hidden __floatsidf
10004a8c g     F .text	00000078 alt_io_redirect
10008658 g     O .bss	00000004 xCursor
1000586c g       *ABS*	00000000 __DTOR_END__
1000525c g     F .text	0000009c alt_exception_cause_generated_bad_addr
10003e40 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000222c g     F .text	00000008 .hidden __udivsi3
1000865c g     O .bss	00000004 cursorClicked
10006fe8 g     O .rwdata	00000004 alt_max_fd
10002264 g     F .text	0000089c .hidden __adddf3
10001af4 g     F .text	0000061c .hidden __umoddi3
10006fd0 g     O .rwdata	00000004 _global_impure_ptr
100088b0 g       *ABS*	00000000 __bss_end
100048bc g     F .text	000000f0 alt_iic_isr_register
10008690 g     O .bss	00000120 veggieObject
10004ec0 g     F .text	00000104 alt_tick
10008660 g     O .bss	00000004 cursorStreak
100014b4 g     F .text	00000640 .hidden __udivdi3
10004870 g     F .text	0000004c alt_ic_irq_enabled
10004e28 g     F .text	00000098 alt_alarm_stop
1000867c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10006e28 g     O .rwdata	00000028 alt_dev_null
10001184 g     F .text	000000d4 port2Unpackager
100044cc g     F .text	0000001c alt_dcache_flush_all
100033d0 g     F .text	00000088 .hidden __fixdfsi
10006ffc g       *ABS*	00000000 __ram_rwdata_end
10006fe0 g     O .rwdata	00000008 alt_dev_list
100059a4 g       *ABS*	00000000 __ram_rodata_end
10002234 g     F .text	00000008 .hidden __umodsi3
100088b0 g       *ABS*	00000000 end
10008664 g     O .bss	00000004 key1
1000397c g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1000586c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003528 g     F .text	00000064 .hidden __clzsi2
1000404c g     F .text	00000218 altera_avalon_jtag_uart_write
100056a4 g     F .text	00000194 __call_exitprocs
1000022c g     F .text	0000003c _start
10008680 g     O .bss	00000004 _alt_tick_rate
100035a4 g     F .text	00000064 rand
10008684 g     O .bss	00000004 _alt_nticks
100037d0 g     F .text	00000048 alt_sys_init
10005590 g     F .text	00000114 __register_exitproc
10003cec g     F .text	00000068 altera_avalon_jtag_uart_close
1000223c g     F .text	00000028 .hidden __mulsi3
100059a4 g       *ABS*	00000000 __ram_rwdata_start
1000586c g       *ABS*	00000000 __ram_rodata_start
10003818 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10005188 g     F .text	000000d4 alt_get_fd
10005344 g     F .text	0000007c memcmp
100038d8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100088b0 g       *ABS*	00000000 __alt_stack_base
10003928 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005074 g     F .text	00000114 alt_find_file
10004564 g     F .text	000000a4 alt_dev_llist_insert
10008654 g       *ABS*	00000000 __bss_start
10000268 g     F .text	00000274 main
10008678 g     O .bss	00000004 alt_envp
10003878 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000358c g     F .text	00000018 srand
100012c0 g     F .text	000000e8 convertBinaryToDecimal
10006fec g     O .rwdata	00000004 alt_errno
1000217c g     F .text	00000054 .hidden __divsi3
1000586c g       *ABS*	00000000 __CTOR_END__
1000586c g       *ABS*	00000000 __flash_rodata_start
1000586c g       *ABS*	00000000 __DTOR_LIST__
10008668 g     O .bss	00000004 key3
1000379c g     F .text	00000034 alt_irq_init
10004da8 g     F .text	00000080 alt_release_fd
1000586c g     O .rodata	00000100 .hidden __clz_tab
100052f8 g     F .text	00000014 atexit
10000d3c g     F .text	00000448 messagePackager
10006fd4 g     O .rwdata	00000004 _impure_ptr
10008670 g     O .bss	00000004 alt_argc
10004664 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10006fd8 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100046dc g     F .text	00000050 alt_ic_isr_register
10006ffc g       *ABS*	00000000 _edata
100088b0 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10003d54 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000866c g     O .bss	00000004 key2
100047cc g     F .text	000000a4 alt_ic_irq_disable
1000530c g     F .text	00000038 exit
100004dc g     F .text	000003d4 physicsEngine
100021d0 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
10005838 g     F .text	00000034 _exit
10004264 g     F .text	00000140 alt_alarm_start
100013a8 g     F .text	0000010c .hidden __muldi3
100054f8 g     F .text	00000098 strlen
10004c48 g     F .text	00000160 open
100046c0 g     F .text	0000001c alt_icache_flush_all
10000bc8 g     F .text	00000174 FPGAcommunicator
10006ff0 g     O .rwdata	00000004 alt_priority_mask
1000472c g     F .text	000000a0 alt_ic_irq_enable
10002b00 g     F .text	000008d0 .hidden __subdf3
10006ff4 g     O .rwdata	00000008 alt_alarm_list
10004608 g     F .text	0000005c _do_ctors
100043f4 g     F .text	000000d8 close
1000366c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a1ec04 	addi	r2,r2,-30800
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a1ec04 	addi	r2,r2,-30800
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a5ae17 	ldw	r2,-26952(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a5ae17 	ldw	r2,-26952(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
10000238:	d6bbf414 	ori	gp,gp,61392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10a19514 	ori	r2,r2,34388

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18e22c14 	ori	r3,r3,34992

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000366c0 	call	1000366c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00036ec0 	call	100036ec <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	000358c0 	call	1000358c <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a5a215 	stw	r2,-27000(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a5a115 	stw	r2,-27004(gp)
	port2Unpackager();
100002b8:	00011840 	call	10001184 <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<8; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	8421a404 	addi	r16,r16,-31088
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	000223c0 	call	1000223c <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	8421a404 	addi	r16,r16,-31088
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	000223c0 	call	1000223c <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	8421a404 	addi	r16,r16,-31088
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	000223c0 	call	1000223c <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	8421a404 	addi	r16,r16,-31088
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	000223c0 	call	1000223c <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	8421a404 	addi	r16,r16,-31088
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	000223c0 	call	1000223c <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	8421a404 	addi	r16,r16,-31088
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	000223c0 	call	1000223c <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	8421a404 	addi	r16,r16,-31088
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	000223c0 	call	1000223c <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<8; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800210 	cmplti	r2,r2,8
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	10a1a404 	addi	r2,r2,-31088
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	10a1a404 	addi	r2,r2,-31088
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	10a1a404 	addi	r2,r2,-31088
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	10a1a404 	addi	r2,r2,-31088
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10a1a404 	addi	r2,r2,-31088
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	10a1a404 	addi	r2,r2,-31088
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10a1a404 	addi	r2,r2,-31088
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	10a1a404 	addi	r2,r2,-31088
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
//		printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .02 seconds pass
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	e0bff817 	ldw	r2,-32(fp)
10000480:	1885c83a 	sub	r2,r3,r2
10000484:	108000b0 	cmpltui	r2,r2,2
10000488:	1000031e 	bne	r2,zero,10000498 <main+0x230>
		{
			physicsEngine();	// call our physics engine!
1000048c:	00004dc0 	call	100004dc <physicsEngine>
			lastPhysixed = elapsedTime;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000498:	e0fffe17 	ldw	r3,-8(fp)
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	1885c83a 	sub	r2,r3,r2
100004a4:	e0fffa17 	ldw	r3,-24(fp)
100004a8:	1880092e 	bgeu	r3,r2,100004d0 <main+0x268>
		{
			spawningEngine();	// call our spawning engine!
100004ac:	00008b00 	call	100008b0 <spawningEngine>
			lastSpawned = elapsedTime;
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 50) + 50;
100004b8:	00035a40 	call	100035a4 <rand>
100004bc:	1009883a 	mov	r4,r2
100004c0:	01400c84 	movi	r5,50
100004c4:	00021d00 	call	100021d0 <__modsi3>
100004c8:	10800c84 	addi	r2,r2,50
100004cc:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}
	port2Unpackager();	// keep unpacking our stuff!
100004d0:	00011840 	call	10001184 <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
100004d4:	0000bc80 	call	10000bc8 <FPGAcommunicator>
	}
100004d8:	003fe006 	br	1000045c <__alt_data_end+0xf800045c>

100004dc <physicsEngine>:
	return 0;
}

void physicsEngine()
{
100004dc:	defffa04 	addi	sp,sp,-24
100004e0:	dfc00515 	stw	ra,20(sp)
100004e4:	df000415 	stw	fp,16(sp)
100004e8:	dc800315 	stw	r18,12(sp)
100004ec:	dc400215 	stw	r17,8(sp)
100004f0:	dc000115 	stw	r16,4(sp)
100004f4:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<8; i++)	// update all our physics of all objects!
100004f8:	00800044 	movi	r2,1
100004fc:	e0bffc15 	stw	r2,-16(fp)
10000500:	0000df06 	br	10000880 <physicsEngine+0x3a4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000504:	04040074 	movhi	r16,4097
10000508:	8421a404 	addi	r16,r16,-31088
1000050c:	e0bffc17 	ldw	r2,-16(fp)
10000510:	1009883a 	mov	r4,r2
10000514:	01400904 	movi	r5,36
10000518:	000223c0 	call	1000223c <__mulsi3>
1000051c:	8085883a 	add	r2,r16,r2
10000520:	10800304 	addi	r2,r2,12
10000524:	10800017 	ldw	r2,0(r2)
10000528:	1000d226 	beq	r2,zero,10000874 <physicsEngine+0x398>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
1000052c:	04040074 	movhi	r16,4097
10000530:	8421a404 	addi	r16,r16,-31088
10000534:	e0bffc17 	ldw	r2,-16(fp)
10000538:	1009883a 	mov	r4,r2
1000053c:	01400904 	movi	r5,36
10000540:	000223c0 	call	1000223c <__mulsi3>
10000544:	8085883a 	add	r2,r16,r2
10000548:	10800017 	ldw	r2,0(r2)
1000054c:	1009883a 	mov	r4,r2
10000550:	00034580 	call	10003458 <__floatsidf>
10000554:	1023883a 	mov	r17,r2
10000558:	1825883a 	mov	r18,r3
1000055c:	04040074 	movhi	r16,4097
10000560:	8421a404 	addi	r16,r16,-31088
10000564:	e0bffc17 	ldw	r2,-16(fp)
10000568:	1009883a 	mov	r4,r2
1000056c:	01400904 	movi	r5,36
10000570:	000223c0 	call	1000223c <__mulsi3>
10000574:	8085883a 	add	r2,r16,r2
10000578:	11000504 	addi	r4,r2,20
1000057c:	20800017 	ldw	r2,0(r4)
10000580:	20c00117 	ldw	r3,4(r4)
10000584:	8809883a 	mov	r4,r17
10000588:	900b883a 	mov	r5,r18
1000058c:	100d883a 	mov	r6,r2
10000590:	180f883a 	mov	r7,r3
10000594:	00022640 	call	10002264 <__adddf3>
10000598:	1009883a 	mov	r4,r2
1000059c:	180b883a 	mov	r5,r3
100005a0:	2005883a 	mov	r2,r4
100005a4:	2807883a 	mov	r3,r5
100005a8:	1009883a 	mov	r4,r2
100005ac:	180b883a 	mov	r5,r3
100005b0:	00033d00 	call	100033d0 <__fixdfsi>
100005b4:	1023883a 	mov	r17,r2
100005b8:	04040074 	movhi	r16,4097
100005bc:	8421a404 	addi	r16,r16,-31088
100005c0:	e0bffc17 	ldw	r2,-16(fp)
100005c4:	1009883a 	mov	r4,r2
100005c8:	01400904 	movi	r5,36
100005cc:	000223c0 	call	1000223c <__mulsi3>
100005d0:	8085883a 	add	r2,r16,r2
100005d4:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
100005d8:	04040074 	movhi	r16,4097
100005dc:	8421a404 	addi	r16,r16,-31088
100005e0:	e0bffc17 	ldw	r2,-16(fp)
100005e4:	1009883a 	mov	r4,r2
100005e8:	01400904 	movi	r5,36
100005ec:	000223c0 	call	1000223c <__mulsi3>
100005f0:	8085883a 	add	r2,r16,r2
100005f4:	10800104 	addi	r2,r2,4
100005f8:	10800017 	ldw	r2,0(r2)
100005fc:	1009883a 	mov	r4,r2
10000600:	00034580 	call	10003458 <__floatsidf>
10000604:	1023883a 	mov	r17,r2
10000608:	1825883a 	mov	r18,r3
1000060c:	04040074 	movhi	r16,4097
10000610:	8421a404 	addi	r16,r16,-31088
10000614:	e0bffc17 	ldw	r2,-16(fp)
10000618:	1009883a 	mov	r4,r2
1000061c:	01400904 	movi	r5,36
10000620:	000223c0 	call	1000223c <__mulsi3>
10000624:	8085883a 	add	r2,r16,r2
10000628:	11000704 	addi	r4,r2,28
1000062c:	20800017 	ldw	r2,0(r4)
10000630:	20c00117 	ldw	r3,4(r4)
10000634:	8809883a 	mov	r4,r17
10000638:	900b883a 	mov	r5,r18
1000063c:	100d883a 	mov	r6,r2
10000640:	180f883a 	mov	r7,r3
10000644:	00022640 	call	10002264 <__adddf3>
10000648:	1009883a 	mov	r4,r2
1000064c:	180b883a 	mov	r5,r3
10000650:	2005883a 	mov	r2,r4
10000654:	2807883a 	mov	r3,r5
10000658:	1009883a 	mov	r4,r2
1000065c:	180b883a 	mov	r5,r3
10000660:	00033d00 	call	100033d0 <__fixdfsi>
10000664:	1023883a 	mov	r17,r2
10000668:	04040074 	movhi	r16,4097
1000066c:	8421a404 	addi	r16,r16,-31088
10000670:	e0bffc17 	ldw	r2,-16(fp)
10000674:	1009883a 	mov	r4,r2
10000678:	01400904 	movi	r5,36
1000067c:	000223c0 	call	1000223c <__mulsi3>
10000680:	8085883a 	add	r2,r16,r2
10000684:	10800104 	addi	r2,r2,4
10000688:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 5;
1000068c:	04040074 	movhi	r16,4097
10000690:	8421a404 	addi	r16,r16,-31088
10000694:	e0bffc17 	ldw	r2,-16(fp)
10000698:	1009883a 	mov	r4,r2
1000069c:	01400904 	movi	r5,36
100006a0:	000223c0 	call	1000223c <__mulsi3>
100006a4:	8085883a 	add	r2,r16,r2
100006a8:	11000704 	addi	r4,r2,28
100006ac:	20800017 	ldw	r2,0(r4)
100006b0:	20c00117 	ldw	r3,4(r4)
100006b4:	1009883a 	mov	r4,r2
100006b8:	180b883a 	mov	r5,r3
100006bc:	000d883a 	mov	r6,zero
100006c0:	01d00534 	movhi	r7,16404
100006c4:	0002b000 	call	10002b00 <__subdf3>
100006c8:	1009883a 	mov	r4,r2
100006cc:	180b883a 	mov	r5,r3
100006d0:	2021883a 	mov	r16,r4
100006d4:	2823883a 	mov	r17,r5
100006d8:	04840074 	movhi	r18,4097
100006dc:	94a1a404 	addi	r18,r18,-31088
100006e0:	e0bffc17 	ldw	r2,-16(fp)
100006e4:	1009883a 	mov	r4,r2
100006e8:	01400904 	movi	r5,36
100006ec:	000223c0 	call	1000223c <__mulsi3>
100006f0:	9085883a 	add	r2,r18,r2
100006f4:	10800704 	addi	r2,r2,28
100006f8:	14000015 	stw	r16,0(r2)
100006fc:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are below the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000700:	04040074 	movhi	r16,4097
10000704:	8421a404 	addi	r16,r16,-31088
10000708:	e0bffc17 	ldw	r2,-16(fp)
1000070c:	1009883a 	mov	r4,r2
10000710:	01400904 	movi	r5,36
10000714:	000223c0 	call	1000223c <__mulsi3>
10000718:	8085883a 	add	r2,r16,r2
1000071c:	10800104 	addi	r2,r2,4
10000720:	10800017 	ldw	r2,0(r2)
10000724:	10001316 	blt	r2,zero,10000774 <physicsEngine+0x298>
10000728:	04040074 	movhi	r16,4097
1000072c:	8421a404 	addi	r16,r16,-31088
10000730:	e0bffc17 	ldw	r2,-16(fp)
10000734:	1009883a 	mov	r4,r2
10000738:	01400904 	movi	r5,36
1000073c:	000223c0 	call	1000223c <__mulsi3>
10000740:	8085883a 	add	r2,r16,r2
10000744:	10800017 	ldw	r2,0(r2)
10000748:	10000a16 	blt	r2,zero,10000774 <physicsEngine+0x298>
1000074c:	04040074 	movhi	r16,4097
10000750:	8421a404 	addi	r16,r16,-31088
10000754:	e0bffc17 	ldw	r2,-16(fp)
10000758:	1009883a 	mov	r4,r2
1000075c:	01400904 	movi	r5,36
10000760:	000223c0 	call	1000223c <__mulsi3>
10000764:	8085883a 	add	r2,r16,r2
10000768:	10800017 	ldw	r2,0(r2)
1000076c:	1080a050 	cmplti	r2,r2,641
10000770:	1000401e 	bne	r2,zero,10000874 <physicsEngine+0x398>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000774:	04040074 	movhi	r16,4097
10000778:	8421a404 	addi	r16,r16,-31088
1000077c:	e0bffc17 	ldw	r2,-16(fp)
10000780:	1009883a 	mov	r4,r2
10000784:	01400904 	movi	r5,36
10000788:	000223c0 	call	1000223c <__mulsi3>
1000078c:	8085883a 	add	r2,r16,r2
10000790:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000794:	04040074 	movhi	r16,4097
10000798:	8421a404 	addi	r16,r16,-31088
1000079c:	e0bffc17 	ldw	r2,-16(fp)
100007a0:	1009883a 	mov	r4,r2
100007a4:	01400904 	movi	r5,36
100007a8:	000223c0 	call	1000223c <__mulsi3>
100007ac:	8085883a 	add	r2,r16,r2
100007b0:	10800104 	addi	r2,r2,4
100007b4:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
100007b8:	04040074 	movhi	r16,4097
100007bc:	8421a404 	addi	r16,r16,-31088
100007c0:	e0bffc17 	ldw	r2,-16(fp)
100007c4:	1009883a 	mov	r4,r2
100007c8:	01400904 	movi	r5,36
100007cc:	000223c0 	call	1000223c <__mulsi3>
100007d0:	8085883a 	add	r2,r16,r2
100007d4:	10800204 	addi	r2,r2,8
100007d8:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
100007dc:	04040074 	movhi	r16,4097
100007e0:	8421a404 	addi	r16,r16,-31088
100007e4:	e0bffc17 	ldw	r2,-16(fp)
100007e8:	1009883a 	mov	r4,r2
100007ec:	01400904 	movi	r5,36
100007f0:	000223c0 	call	1000223c <__mulsi3>
100007f4:	8085883a 	add	r2,r16,r2
100007f8:	10800304 	addi	r2,r2,12
100007fc:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000800:	04040074 	movhi	r16,4097
10000804:	8421a404 	addi	r16,r16,-31088
10000808:	e0bffc17 	ldw	r2,-16(fp)
1000080c:	1009883a 	mov	r4,r2
10000810:	01400904 	movi	r5,36
10000814:	000223c0 	call	1000223c <__mulsi3>
10000818:	8085883a 	add	r2,r16,r2
1000081c:	10800404 	addi	r2,r2,16
10000820:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000824:	04040074 	movhi	r16,4097
10000828:	8421a404 	addi	r16,r16,-31088
1000082c:	e0bffc17 	ldw	r2,-16(fp)
10000830:	1009883a 	mov	r4,r2
10000834:	01400904 	movi	r5,36
10000838:	000223c0 	call	1000223c <__mulsi3>
1000083c:	8085883a 	add	r2,r16,r2
10000840:	10800504 	addi	r2,r2,20
10000844:	10000015 	stw	zero,0(r2)
10000848:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
1000084c:	04040074 	movhi	r16,4097
10000850:	8421a404 	addi	r16,r16,-31088
10000854:	e0bffc17 	ldw	r2,-16(fp)
10000858:	1009883a 	mov	r4,r2
1000085c:	01400904 	movi	r5,36
10000860:	000223c0 	call	1000223c <__mulsi3>
10000864:	8085883a 	add	r2,r16,r2
10000868:	10800704 	addi	r2,r2,28
1000086c:	10000015 	stw	zero,0(r2)
10000870:	10000115 	stw	zero,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<8; i++)	// update all our physics of all objects!
10000874:	e0bffc17 	ldw	r2,-16(fp)
10000878:	10800044 	addi	r2,r2,1
1000087c:	e0bffc15 	stw	r2,-16(fp)
10000880:	e0bffc17 	ldw	r2,-16(fp)
10000884:	10800210 	cmplti	r2,r2,8
10000888:	103f1e1e 	bne	r2,zero,10000504 <__alt_data_end+0xf8000504>
				veggieObject[i].yVelocity = 0;
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
1000088c:	0001883a 	nop
}
10000890:	e6fffd04 	addi	sp,fp,-12
10000894:	dfc00417 	ldw	ra,16(sp)
10000898:	df000317 	ldw	fp,12(sp)
1000089c:	dc800217 	ldw	r18,8(sp)
100008a0:	dc400117 	ldw	r17,4(sp)
100008a4:	dc000017 	ldw	r16,0(sp)
100008a8:	dec00504 	addi	sp,sp,20
100008ac:	f800283a 	ret

100008b0 <spawningEngine>:

void spawningEngine()
{
100008b0:	defff504 	addi	sp,sp,-44
100008b4:	dfc00a15 	stw	ra,40(sp)
100008b8:	df000915 	stw	fp,36(sp)
100008bc:	dc400815 	stw	r17,32(sp)
100008c0:	dc000715 	stw	r16,28(sp)
100008c4:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<8; i++)	// let's go through our objects and see which ones are free
100008c8:	00800044 	movi	r2,1
100008cc:	e0bff715 	stw	r2,-36(fp)
100008d0:	00009206 	br	10000b1c <spawningEngine+0x26c>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
100008d4:	04040074 	movhi	r16,4097
100008d8:	8421a404 	addi	r16,r16,-31088
100008dc:	e0bff717 	ldw	r2,-36(fp)
100008e0:	1009883a 	mov	r4,r2
100008e4:	01400904 	movi	r5,36
100008e8:	000223c0 	call	1000223c <__mulsi3>
100008ec:	8085883a 	add	r2,r16,r2
100008f0:	10800304 	addi	r2,r2,12
100008f4:	10800017 	ldw	r2,0(r2)
100008f8:	1000851e 	bne	r2,zero,10000b10 <spawningEngine+0x260>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 540) + 50;
100008fc:	00035a40 	call	100035a4 <rand>
10000900:	1009883a 	mov	r4,r2
10000904:	01408704 	movi	r5,540
10000908:	00021d00 	call	100021d0 <__modsi3>
1000090c:	10800c84 	addi	r2,r2,50
10000910:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
10000914:	00035a40 	call	100035a4 <rand>
10000918:	1007883a 	mov	r3,r2
1000091c:	00a00034 	movhi	r2,32768
10000920:	108001c4 	addi	r2,r2,7
10000924:	1884703a 	and	r2,r3,r2
10000928:	1000040e 	bge	r2,zero,1000093c <spawningEngine+0x8c>
1000092c:	10bfffc4 	addi	r2,r2,-1
10000930:	00fffe04 	movi	r3,-8
10000934:	10c4b03a 	or	r2,r2,r3
10000938:	10800044 	addi	r2,r2,1
1000093c:	10800044 	addi	r2,r2,1
10000940:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 22) + 45;
10000944:	00035a40 	call	100035a4 <rand>
10000948:	1009883a 	mov	r4,r2
1000094c:	01400584 	movi	r5,22
10000950:	00021d00 	call	100021d0 <__modsi3>
10000954:	10800b44 	addi	r2,r2,45
10000958:	1009883a 	mov	r4,r2
1000095c:	00034580 	call	10003458 <__floatsidf>
10000960:	1009883a 	mov	r4,r2
10000964:	180b883a 	mov	r5,r3
10000968:	e13ffc15 	stw	r4,-16(fp)
1000096c:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 40) - 20;
10000970:	00035a40 	call	100035a4 <rand>
10000974:	1009883a 	mov	r4,r2
10000978:	01400a04 	movi	r5,40
1000097c:	00021d00 	call	100021d0 <__modsi3>
10000980:	10bffb04 	addi	r2,r2,-20
10000984:	1009883a 	mov	r4,r2
10000988:	00034580 	call	10003458 <__floatsidf>
1000098c:	1009883a 	mov	r4,r2
10000990:	180b883a 	mov	r5,r3
10000994:	e13ff815 	stw	r4,-32(fp)
10000998:	e17ff915 	stw	r5,-28(fp)

			if (randomX < 100)
1000099c:	e0bffa17 	ldw	r2,-24(fp)
100009a0:	10801928 	cmpgeui	r2,r2,100
100009a4:	10000b1e 	bne	r2,zero,100009d4 <spawningEngine+0x124>
			{
				randomSpeedX = (rand() % 40);
100009a8:	00035a40 	call	100035a4 <rand>
100009ac:	1009883a 	mov	r4,r2
100009b0:	01400a04 	movi	r5,40
100009b4:	00021d00 	call	100021d0 <__modsi3>
100009b8:	1009883a 	mov	r4,r2
100009bc:	00034580 	call	10003458 <__floatsidf>
100009c0:	1009883a 	mov	r4,r2
100009c4:	180b883a 	mov	r5,r3
100009c8:	e13ff815 	stw	r4,-32(fp)
100009cc:	e17ff915 	stw	r5,-28(fp)
100009d0:	00000e06 	br	10000a0c <spawningEngine+0x15c>
			}
			else if (randomX > 540)
100009d4:	e0bffa17 	ldw	r2,-24(fp)
100009d8:	10808770 	cmpltui	r2,r2,541
100009dc:	10000b1e 	bne	r2,zero,10000a0c <spawningEngine+0x15c>
			{
				randomSpeedX = (rand() % 40) - 40;
100009e0:	00035a40 	call	100035a4 <rand>
100009e4:	1009883a 	mov	r4,r2
100009e8:	01400a04 	movi	r5,40
100009ec:	00021d00 	call	100021d0 <__modsi3>
100009f0:	10bff604 	addi	r2,r2,-40
100009f4:	1009883a 	mov	r4,r2
100009f8:	00034580 	call	10003458 <__floatsidf>
100009fc:	1009883a 	mov	r4,r2
10000a00:	180b883a 	mov	r5,r3
10000a04:	e13ff815 	stw	r4,-32(fp)
10000a08:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000a0c:	e47ffa17 	ldw	r17,-24(fp)
10000a10:	04040074 	movhi	r16,4097
10000a14:	8421a404 	addi	r16,r16,-31088
10000a18:	e0bff717 	ldw	r2,-36(fp)
10000a1c:	1009883a 	mov	r4,r2
10000a20:	01400904 	movi	r5,36
10000a24:	000223c0 	call	1000223c <__mulsi3>
10000a28:	8085883a 	add	r2,r16,r2
10000a2c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000a30:	04040074 	movhi	r16,4097
10000a34:	8421a404 	addi	r16,r16,-31088
10000a38:	e0bff717 	ldw	r2,-36(fp)
10000a3c:	1009883a 	mov	r4,r2
10000a40:	01400904 	movi	r5,36
10000a44:	000223c0 	call	1000223c <__mulsi3>
10000a48:	8085883a 	add	r2,r16,r2
10000a4c:	10800104 	addi	r2,r2,4
10000a50:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000a54:	04040074 	movhi	r16,4097
10000a58:	8421a404 	addi	r16,r16,-31088
10000a5c:	e0bff717 	ldw	r2,-36(fp)
10000a60:	1009883a 	mov	r4,r2
10000a64:	01400904 	movi	r5,36
10000a68:	000223c0 	call	1000223c <__mulsi3>
10000a6c:	8085883a 	add	r2,r16,r2
10000a70:	10800204 	addi	r2,r2,8
10000a74:	e0fffb17 	ldw	r3,-20(fp)
10000a78:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
10000a7c:	04040074 	movhi	r16,4097
10000a80:	8421a404 	addi	r16,r16,-31088
10000a84:	e0bff717 	ldw	r2,-36(fp)
10000a88:	1009883a 	mov	r4,r2
10000a8c:	01400904 	movi	r5,36
10000a90:	000223c0 	call	1000223c <__mulsi3>
10000a94:	8085883a 	add	r2,r16,r2
10000a98:	10800304 	addi	r2,r2,12
10000a9c:	00c00044 	movi	r3,1
10000aa0:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10000aa4:	04040074 	movhi	r16,4097
10000aa8:	8421a404 	addi	r16,r16,-31088
10000aac:	e0bff717 	ldw	r2,-36(fp)
10000ab0:	1009883a 	mov	r4,r2
10000ab4:	01400904 	movi	r5,36
10000ab8:	000223c0 	call	1000223c <__mulsi3>
10000abc:	8085883a 	add	r2,r16,r2
10000ac0:	10800504 	addi	r2,r2,20
10000ac4:	e0fff817 	ldw	r3,-32(fp)
10000ac8:	10c00015 	stw	r3,0(r2)
10000acc:	e0fff917 	ldw	r3,-28(fp)
10000ad0:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000ad4:	04040074 	movhi	r16,4097
10000ad8:	8421a404 	addi	r16,r16,-31088
10000adc:	e0bff717 	ldw	r2,-36(fp)
10000ae0:	1009883a 	mov	r4,r2
10000ae4:	01400904 	movi	r5,36
10000ae8:	000223c0 	call	1000223c <__mulsi3>
10000aec:	8085883a 	add	r2,r16,r2
10000af0:	10800704 	addi	r2,r2,28
10000af4:	e0fffc17 	ldw	r3,-16(fp)
10000af8:	10c00015 	stw	r3,0(r2)
10000afc:	e0fffd17 	ldw	r3,-12(fp)
10000b00:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000b04:	00800a84 	movi	r2,42
10000b08:	e0bff715 	stw	r2,-36(fp)
			break;
10000b0c:	00000606 	br	10000b28 <spawningEngine+0x278>
}

void spawningEngine()
{
	int i;
	for(i=1; i<8; i++)	// let's go through our objects and see which ones are free
10000b10:	e0bff717 	ldw	r2,-36(fp)
10000b14:	10800044 	addi	r2,r2,1
10000b18:	e0bff715 	stw	r2,-36(fp)
10000b1c:	e0bff717 	ldw	r2,-36(fp)
10000b20:	10800210 	cmplti	r2,r2,8
10000b24:	103f6b1e 	bne	r2,zero,100008d4 <__alt_data_end+0xf80008d4>
			// now let's break
			i = 42;
			break;
		}
	}
}
10000b28:	e6fffe04 	addi	sp,fp,-8
10000b2c:	dfc00317 	ldw	ra,12(sp)
10000b30:	df000217 	ldw	fp,8(sp)
10000b34:	dc400117 	ldw	r17,4(sp)
10000b38:	dc000017 	ldw	r16,0(sp)
10000b3c:	dec00404 	addi	sp,sp,16
10000b40:	f800283a 	ret

10000b44 <sliceEngine>:

void sliceEngine()
{
10000b44:	defffc04 	addi	sp,sp,-16
10000b48:	dfc00315 	stw	ra,12(sp)
10000b4c:	df000215 	stw	fp,8(sp)
10000b50:	dc000115 	stw	r16,4(sp)
10000b54:	df000204 	addi	fp,sp,8
	int i;
	for(i=1; i<8; i++)	// let's go through our objects and see which ones collide
10000b58:	00800044 	movi	r2,1
10000b5c:	e0bffe15 	stw	r2,-8(fp)
10000b60:	00001006 	br	10000ba4 <sliceEngine+0x60>
	{
		if(veggieObject[i].objectState != 0)	// only if it exists
10000b64:	04040074 	movhi	r16,4097
10000b68:	8421a404 	addi	r16,r16,-31088
10000b6c:	e0bffe17 	ldw	r2,-8(fp)
10000b70:	1009883a 	mov	r4,r2
10000b74:	01400904 	movi	r5,36
10000b78:	000223c0 	call	1000223c <__mulsi3>
10000b7c:	8085883a 	add	r2,r16,r2
10000b80:	10800304 	addi	r2,r2,12
10000b84:	10800017 	ldw	r2,0(r2)
10000b88:	10000326 	beq	r2,zero,10000b98 <sliceEngine+0x54>
		{

			// now let's break
			i = 42;
10000b8c:	00800a84 	movi	r2,42
10000b90:	e0bffe15 	stw	r2,-8(fp)
			break;
10000b94:	00000606 	br	10000bb0 <sliceEngine+0x6c>
}

void sliceEngine()
{
	int i;
	for(i=1; i<8; i++)	// let's go through our objects and see which ones collide
10000b98:	e0bffe17 	ldw	r2,-8(fp)
10000b9c:	10800044 	addi	r2,r2,1
10000ba0:	e0bffe15 	stw	r2,-8(fp)
10000ba4:	e0bffe17 	ldw	r2,-8(fp)
10000ba8:	10800210 	cmplti	r2,r2,8
10000bac:	103fed1e 	bne	r2,zero,10000b64 <__alt_data_end+0xf8000b64>
			// now let's break
			i = 42;
			break;
		}
	}
}
10000bb0:	e6ffff04 	addi	sp,fp,-4
10000bb4:	dfc00217 	ldw	ra,8(sp)
10000bb8:	df000117 	ldw	fp,4(sp)
10000bbc:	dc000017 	ldw	r16,0(sp)
10000bc0:	dec00304 	addi	sp,sp,12
10000bc4:	f800283a 	ret

10000bc8 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000bc8:	deffe404 	addi	sp,sp,-112
10000bcc:	dfc01b15 	stw	ra,108(sp)
10000bd0:	df001a15 	stw	fp,104(sp)
10000bd4:	dc801915 	stw	r18,100(sp)
10000bd8:	dc401815 	stw	r17,96(sp)
10000bdc:	dc001715 	stw	r16,92(sp)
10000be0:	df001a04 	addi	fp,sp,104
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[8];

	// load all of our structs in
	int i;
	for (i=0; i<8; i++)
10000be4:	e03feb15 	stw	zero,-84(fp)
10000be8:	00002406 	br	10000c7c <FPGAcommunicator+0xb4>
	{
		unsigned long tempPackage = messagePackager(veggieObject[i]);
10000bec:	04840074 	movhi	r18,4097
10000bf0:	94a1a404 	addi	r18,r18,-31088
10000bf4:	e0bfeb17 	ldw	r2,-84(fp)
10000bf8:	1009883a 	mov	r4,r2
10000bfc:	01400904 	movi	r5,36
10000c00:	000223c0 	call	1000223c <__mulsi3>
10000c04:	9085883a 	add	r2,r18,r2
10000c08:	10c00417 	ldw	r3,16(r2)
10000c0c:	d8c00015 	stw	r3,0(sp)
10000c10:	10c00517 	ldw	r3,20(r2)
10000c14:	d8c00115 	stw	r3,4(sp)
10000c18:	10c00617 	ldw	r3,24(r2)
10000c1c:	d8c00215 	stw	r3,8(sp)
10000c20:	10c00717 	ldw	r3,28(r2)
10000c24:	d8c00315 	stw	r3,12(sp)
10000c28:	10c00817 	ldw	r3,32(r2)
10000c2c:	d8c00415 	stw	r3,16(sp)
10000c30:	11000017 	ldw	r4,0(r2)
10000c34:	11400117 	ldw	r5,4(r2)
10000c38:	11800217 	ldw	r6,8(r2)
10000c3c:	11c00317 	ldw	r7,12(r2)
10000c40:	0000d3c0 	call	10000d3c <messagePackager>
10000c44:	e0bfec15 	stw	r2,-80(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000c48:	e0bfec17 	ldw	r2,-80(fp)
10000c4c:	1021883a 	mov	r16,r2
10000c50:	0023883a 	mov	r17,zero
10000c54:	e0bfeb17 	ldw	r2,-84(fp)
10000c58:	100490fa 	slli	r2,r2,3
10000c5c:	e0ffeb04 	addi	r3,fp,-84
10000c60:	1885883a 	add	r2,r3,r2
10000c64:	10800204 	addi	r2,r2,8
10000c68:	14000015 	stw	r16,0(r2)
10000c6c:	14400115 	stw	r17,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[8];

	// load all of our structs in
	int i;
	for (i=0; i<8; i++)
10000c70:	e0bfeb17 	ldw	r2,-84(fp)
10000c74:	10800044 	addi	r2,r2,1
10000c78:	e0bfeb15 	stw	r2,-84(fp)
10000c7c:	e0bfeb17 	ldw	r2,-84(fp)
10000c80:	10800210 	cmplti	r2,r2,8
10000c84:	103fd91e 	bne	r2,zero,10000bec <__alt_data_end+0xf8000bec>
		FPGAmessage[i] = tempPackage;
	}
//	*to_hw_sig = 2;	// 2 means we're starting communication

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000c88:	01004004 	movi	r4,256
10000c8c:	e0bfed17 	ldw	r2,-76(fp)
10000c90:	e0ffee17 	ldw	r3,-72(fp)
10000c94:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000c98:	01003c04 	movi	r4,240
10000c9c:	e0bfef17 	ldw	r2,-68(fp)
10000ca0:	e0fff017 	ldw	r3,-64(fp)
10000ca4:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000ca8:	01003804 	movi	r4,224
10000cac:	e0bff117 	ldw	r2,-60(fp)
10000cb0:	e0fff217 	ldw	r3,-56(fp)
10000cb4:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000cb8:	01003404 	movi	r4,208
10000cbc:	e0bff317 	ldw	r2,-52(fp)
10000cc0:	e0fff417 	ldw	r3,-48(fp)
10000cc4:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000cc8:	01003004 	movi	r4,192
10000ccc:	e0bff517 	ldw	r2,-44(fp)
10000cd0:	e0fff617 	ldw	r3,-40(fp)
10000cd4:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000cd8:	01002c04 	movi	r4,176
10000cdc:	e0bff717 	ldw	r2,-36(fp)
10000ce0:	e0fff817 	ldw	r3,-32(fp)
10000ce4:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000ce8:	01002804 	movi	r4,160
10000cec:	e0bff917 	ldw	r2,-28(fp)
10000cf0:	e0fffa17 	ldw	r3,-24(fp)
10000cf4:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000cf8:	01001804 	movi	r4,96
10000cfc:	e0bffb17 	ldw	r2,-20(fp)
10000d00:	e0fffc17 	ldw	r3,-16(fp)
10000d04:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000d08:	01002404 	movi	r4,144
10000d0c:	e0bffd17 	ldw	r2,-12(fp)
10000d10:	e0fffe17 	ldw	r3,-8(fp)
10000d14:	20800015 	stw	r2,0(r4)

	while(*to_sw_sig != 0); // wait for response from hardware
	*to_hw_sig = 0;		// okay we're done now, going back to sleep

	printf("message stuff done\n");
*/	return;
10000d18:	0001883a 	nop
}
10000d1c:	e6fffd04 	addi	sp,fp,-12
10000d20:	dfc00417 	ldw	ra,16(sp)
10000d24:	df000317 	ldw	fp,12(sp)
10000d28:	dc800217 	ldw	r18,8(sp)
10000d2c:	dc400117 	ldw	r17,4(sp)
10000d30:	dc000017 	ldw	r16,0(sp)
10000d34:	dec00504 	addi	sp,sp,20
10000d38:	f800283a 	ret

10000d3c <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000d3c:	deffe304 	addi	sp,sp,-116
10000d40:	dfc01815 	stw	ra,96(sp)
10000d44:	df001715 	stw	fp,92(sp)
10000d48:	dc401615 	stw	r17,88(sp)
10000d4c:	dc001515 	stw	r16,84(sp)
10000d50:	df001704 	addi	fp,sp,92
10000d54:	e1000215 	stw	r4,8(fp)
10000d58:	e1400315 	stw	r5,12(fp)
10000d5c:	e1800415 	stw	r6,16(fp)
10000d60:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000d64:	e0800617 	ldw	r2,24(fp)
10000d68:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 100)		// impossible number for now
10000d6c:	e0bfeb17 	ldw	r2,-84(fp)
10000d70:	10801918 	cmpnei	r2,r2,100
10000d74:	1000601e 	bne	r2,zero,10000ef8 <messagePackager+0x1bc>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000d78:	e0800217 	ldw	r2,8(fp)
10000d7c:	e0bfec15 	stw	r2,-80(fp)
10000d80:	1005d7fa 	srai	r2,r2,31
10000d84:	e0bfed15 	stw	r2,-76(fp)
		tempTime = specifiedObject.yPosition;
10000d88:	e0800317 	ldw	r2,12(fp)
10000d8c:	e0bfee15 	stw	r2,-72(fp)
10000d90:	1005d7fa 	srai	r2,r2,31
10000d94:	e0bfef15 	stw	r2,-68(fp)
		tempStart = specifiedObject.objectType;
10000d98:	e0800417 	ldw	r2,16(fp)
10000d9c:	e0bff015 	stw	r2,-64(fp)
10000da0:	1005d7fa 	srai	r2,r2,31
10000da4:	e0bff115 	stw	r2,-60(fp)
		tempEnd = specifiedObject.objectState;
10000da8:	e0800517 	ldw	r2,20(fp)
10000dac:	e0bff215 	stw	r2,-56(fp)
10000db0:	1005d7fa 	srai	r2,r2,31
10000db4:	e0bff315 	stw	r2,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000db8:	e0bfec17 	ldw	r2,-80(fp)
10000dbc:	1009883a 	mov	r4,r2
10000dc0:	00012580 	call	10001258 <convertDecimalToBinary>
10000dc4:	e0bfec15 	stw	r2,-80(fp)
10000dc8:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000dcc:	e0bfee17 	ldw	r2,-72(fp)
10000dd0:	1009883a 	mov	r4,r2
10000dd4:	00012580 	call	10001258 <convertDecimalToBinary>
10000dd8:	e0bfee15 	stw	r2,-72(fp)
10000ddc:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000de0:	e0bff017 	ldw	r2,-64(fp)
10000de4:	1009883a 	mov	r4,r2
10000de8:	00012580 	call	10001258 <convertDecimalToBinary>
10000dec:	e0bff015 	stw	r2,-64(fp)
10000df0:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000df4:	e0bff217 	ldw	r2,-56(fp)
10000df8:	1009883a 	mov	r4,r2
10000dfc:	00012580 	call	10001258 <convertDecimalToBinary>
10000e00:	e0bff215 	stw	r2,-56(fp)
10000e04:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000e08:	00802674 	movhi	r2,153
10000e0c:	10a5a004 	addi	r2,r2,-27008
10000e10:	0007883a 	mov	r3,zero
10000e14:	e13fee17 	ldw	r4,-72(fp)
10000e18:	e17fef17 	ldw	r5,-68(fp)
10000e1c:	100d883a 	mov	r6,r2
10000e20:	180f883a 	mov	r7,r3
10000e24:	00013a80 	call	100013a8 <__muldi3>
10000e28:	1009883a 	mov	r4,r2
10000e2c:	180b883a 	mov	r5,r3
10000e30:	2021883a 	mov	r16,r4
10000e34:	2823883a 	mov	r17,r5
10000e38:	00841eb4 	movhi	r2,4218
10000e3c:	10900004 	addi	r2,r2,16384
10000e40:	00d6bcc4 	movi	r3,23283
10000e44:	e13ff017 	ldw	r4,-64(fp)
10000e48:	e17ff117 	ldw	r5,-60(fp)
10000e4c:	100d883a 	mov	r6,r2
10000e50:	180f883a 	mov	r7,r3
10000e54:	00013a80 	call	100013a8 <__muldi3>
10000e58:	100d883a 	mov	r6,r2
10000e5c:	180f883a 	mov	r7,r3
10000e60:	3009883a 	mov	r4,r6
10000e64:	380b883a 	mov	r5,r7
10000e68:	8105883a 	add	r2,r16,r4
10000e6c:	140d803a 	cmpltu	r6,r2,r16
10000e70:	8947883a 	add	r3,r17,r5
10000e74:	30c9883a 	add	r4,r6,r3
10000e78:	2007883a 	mov	r3,r4
10000e7c:	100d883a 	mov	r6,r2
10000e80:	180f883a 	mov	r7,r3
10000e84:	e13fec17 	ldw	r4,-80(fp)
10000e88:	e17fed17 	ldw	r5,-76(fp)
10000e8c:	3105883a 	add	r2,r6,r4
10000e90:	1191803a 	cmpltu	r8,r2,r6
10000e94:	3947883a 	add	r3,r7,r5
10000e98:	40c9883a 	add	r4,r8,r3
10000e9c:	2007883a 	mov	r3,r4
10000ea0:	1021883a 	mov	r16,r2
10000ea4:	1823883a 	mov	r17,r3
10000ea8:	009762b4 	movhi	r2,23946
10000eac:	00c058f4 	movhi	r3,355
10000eb0:	18d15e04 	addi	r3,r3,17784
10000eb4:	e13ff217 	ldw	r4,-56(fp)
10000eb8:	e17ff317 	ldw	r5,-52(fp)
10000ebc:	100d883a 	mov	r6,r2
10000ec0:	180f883a 	mov	r7,r3
10000ec4:	00013a80 	call	100013a8 <__muldi3>
10000ec8:	100d883a 	mov	r6,r2
10000ecc:	180f883a 	mov	r7,r3
10000ed0:	3009883a 	mov	r4,r6
10000ed4:	380b883a 	mov	r5,r7
10000ed8:	8105883a 	add	r2,r16,r4
10000edc:	140d803a 	cmpltu	r6,r2,r16
10000ee0:	8947883a 	add	r3,r17,r5
10000ee4:	30c9883a 	add	r4,r6,r3
10000ee8:	2007883a 	mov	r3,r4
10000eec:	e0bfe915 	stw	r2,-92(fp)
10000ef0:	e0ffea15 	stw	r3,-88(fp)
10000ef4:	00009606 	br	10001150 <messagePackager+0x414>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000ef8:	e0800217 	ldw	r2,8(fp)
10000efc:	e0bff415 	stw	r2,-48(fp)
10000f00:	1005d7fa 	srai	r2,r2,31
10000f04:	e0bff515 	stw	r2,-44(fp)
		tempY = specifiedObject.yPosition;
10000f08:	e0800317 	ldw	r2,12(fp)
10000f0c:	e0bff615 	stw	r2,-40(fp)
10000f10:	1005d7fa 	srai	r2,r2,31
10000f14:	e0bff715 	stw	r2,-36(fp)
		tempType = specifiedObject.objectType;
10000f18:	e0800417 	ldw	r2,16(fp)
10000f1c:	e0bff815 	stw	r2,-32(fp)
10000f20:	1005d7fa 	srai	r2,r2,31
10000f24:	e0bff915 	stw	r2,-28(fp)
		tempState = specifiedObject.objectState;
10000f28:	e0800517 	ldw	r2,20(fp)
10000f2c:	e0bffa15 	stw	r2,-24(fp)
10000f30:	1005d7fa 	srai	r2,r2,31
10000f34:	e0bffb15 	stw	r2,-20(fp)

		// invert Y cause murgle messed up
		tempY = 480 - tempY;
10000f38:	01007804 	movi	r4,480
10000f3c:	000b883a 	mov	r5,zero
10000f40:	e1bff617 	ldw	r6,-40(fp)
10000f44:	e1fff717 	ldw	r7,-36(fp)
10000f48:	2185c83a 	sub	r2,r4,r6
10000f4c:	2091803a 	cmpltu	r8,r4,r2
10000f50:	29c7c83a 	sub	r3,r5,r7
10000f54:	1a09c83a 	sub	r4,r3,r8
10000f58:	2007883a 	mov	r3,r4
10000f5c:	e0bff615 	stw	r2,-40(fp)
10000f60:	e0fff715 	stw	r3,-36(fp)

		// take X and Y and divide them by 5 to fit in our message
		tempX = tempX/5 - 1;
10000f64:	e0bff417 	ldw	r2,-48(fp)
10000f68:	e0fff517 	ldw	r3,-44(fp)
10000f6c:	01c00144 	movi	r7,5
10000f70:	0011883a 	mov	r8,zero
10000f74:	1009883a 	mov	r4,r2
10000f78:	180b883a 	mov	r5,r3
10000f7c:	380d883a 	mov	r6,r7
10000f80:	400f883a 	mov	r7,r8
10000f84:	00014b40 	call	100014b4 <__udivdi3>
10000f88:	1009883a 	mov	r4,r2
10000f8c:	180b883a 	mov	r5,r3
10000f90:	200d883a 	mov	r6,r4
10000f94:	280f883a 	mov	r7,r5
10000f98:	013fffc4 	movi	r4,-1
10000f9c:	017fffc4 	movi	r5,-1
10000fa0:	3105883a 	add	r2,r6,r4
10000fa4:	1191803a 	cmpltu	r8,r2,r6
10000fa8:	3947883a 	add	r3,r7,r5
10000fac:	40c9883a 	add	r4,r8,r3
10000fb0:	2007883a 	mov	r3,r4
10000fb4:	e0bff415 	stw	r2,-48(fp)
10000fb8:	e0fff515 	stw	r3,-44(fp)
		tempY = tempY/5 - 1;
10000fbc:	e0bff617 	ldw	r2,-40(fp)
10000fc0:	e0fff717 	ldw	r3,-36(fp)
10000fc4:	01c00144 	movi	r7,5
10000fc8:	0011883a 	mov	r8,zero
10000fcc:	1009883a 	mov	r4,r2
10000fd0:	180b883a 	mov	r5,r3
10000fd4:	380d883a 	mov	r6,r7
10000fd8:	400f883a 	mov	r7,r8
10000fdc:	00014b40 	call	100014b4 <__udivdi3>
10000fe0:	1009883a 	mov	r4,r2
10000fe4:	180b883a 	mov	r5,r3
10000fe8:	200d883a 	mov	r6,r4
10000fec:	280f883a 	mov	r7,r5
10000ff0:	013fffc4 	movi	r4,-1
10000ff4:	017fffc4 	movi	r5,-1
10000ff8:	3105883a 	add	r2,r6,r4
10000ffc:	1191803a 	cmpltu	r8,r2,r6
10001000:	3947883a 	add	r3,r7,r5
10001004:	40c9883a 	add	r4,r8,r3
10001008:	2007883a 	mov	r3,r4
1000100c:	e0bff615 	stw	r2,-40(fp)
10001010:	e0fff715 	stw	r3,-36(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
10001014:	e0bff417 	ldw	r2,-48(fp)
10001018:	1009883a 	mov	r4,r2
1000101c:	00012580 	call	10001258 <convertDecimalToBinary>
10001020:	e0bff415 	stw	r2,-48(fp)
10001024:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
10001028:	e0bff617 	ldw	r2,-40(fp)
1000102c:	1009883a 	mov	r4,r2
10001030:	00012580 	call	10001258 <convertDecimalToBinary>
10001034:	e0bff615 	stw	r2,-40(fp)
10001038:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
1000103c:	e0bff817 	ldw	r2,-32(fp)
10001040:	1009883a 	mov	r4,r2
10001044:	00012580 	call	10001258 <convertDecimalToBinary>
10001048:	e0bff815 	stw	r2,-32(fp)
1000104c:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
10001050:	e0bffa17 	ldw	r2,-24(fp)
10001054:	1009883a 	mov	r4,r2
10001058:	00012580 	call	10001258 <convertDecimalToBinary>
1000105c:	e0bffa15 	stw	r2,-24(fp)
10001060:	e03ffb15 	stw	zero,-20(fp)
		printf("tempY: %llu   ", tempY);
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/
		// now we append everything together!
		tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
10001064:	00802674 	movhi	r2,153
10001068:	10a5a004 	addi	r2,r2,-27008
1000106c:	0007883a 	mov	r3,zero
10001070:	e13ff617 	ldw	r4,-40(fp)
10001074:	e17ff717 	ldw	r5,-36(fp)
10001078:	100d883a 	mov	r6,r2
1000107c:	180f883a 	mov	r7,r3
10001080:	00013a80 	call	100013a8 <__muldi3>
10001084:	1009883a 	mov	r4,r2
10001088:	180b883a 	mov	r5,r3
1000108c:	2021883a 	mov	r16,r4
10001090:	2823883a 	mov	r17,r5
10001094:	00841eb4 	movhi	r2,4218
10001098:	10900004 	addi	r2,r2,16384
1000109c:	00d6bcc4 	movi	r3,23283
100010a0:	e13ff817 	ldw	r4,-32(fp)
100010a4:	e17ff917 	ldw	r5,-28(fp)
100010a8:	100d883a 	mov	r6,r2
100010ac:	180f883a 	mov	r7,r3
100010b0:	00013a80 	call	100013a8 <__muldi3>
100010b4:	100d883a 	mov	r6,r2
100010b8:	180f883a 	mov	r7,r3
100010bc:	3009883a 	mov	r4,r6
100010c0:	380b883a 	mov	r5,r7
100010c4:	8105883a 	add	r2,r16,r4
100010c8:	140d803a 	cmpltu	r6,r2,r16
100010cc:	8947883a 	add	r3,r17,r5
100010d0:	30c9883a 	add	r4,r6,r3
100010d4:	2007883a 	mov	r3,r4
100010d8:	100d883a 	mov	r6,r2
100010dc:	180f883a 	mov	r7,r3
100010e0:	e13ff417 	ldw	r4,-48(fp)
100010e4:	e17ff517 	ldw	r5,-44(fp)
100010e8:	3105883a 	add	r2,r6,r4
100010ec:	1191803a 	cmpltu	r8,r2,r6
100010f0:	3947883a 	add	r3,r7,r5
100010f4:	40c9883a 	add	r4,r8,r3
100010f8:	2007883a 	mov	r3,r4
100010fc:	1021883a 	mov	r16,r2
10001100:	1823883a 	mov	r17,r3
10001104:	009762b4 	movhi	r2,23946
10001108:	00c058f4 	movhi	r3,355
1000110c:	18d15e04 	addi	r3,r3,17784
10001110:	e13ffa17 	ldw	r4,-24(fp)
10001114:	e17ffb17 	ldw	r5,-20(fp)
10001118:	100d883a 	mov	r6,r2
1000111c:	180f883a 	mov	r7,r3
10001120:	00013a80 	call	100013a8 <__muldi3>
10001124:	100d883a 	mov	r6,r2
10001128:	180f883a 	mov	r7,r3
1000112c:	3009883a 	mov	r4,r6
10001130:	380b883a 	mov	r5,r7
10001134:	8105883a 	add	r2,r16,r4
10001138:	140d803a 	cmpltu	r6,r2,r16
1000113c:	8947883a 	add	r3,r17,r5
10001140:	30c9883a 	add	r4,r6,r3
10001144:	2007883a 	mov	r3,r4
10001148:	e0bfe915 	stw	r2,-92(fp)
1000114c:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001150:	e13fe917 	ldw	r4,-92(fp)
10001154:	e17fea17 	ldw	r5,-88(fp)
10001158:	00012c00 	call	100012c0 <convertBinaryToDecimal>
1000115c:	e0bffc15 	stw	r2,-16(fp)
10001160:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
10001164:	e0bffc17 	ldw	r2,-16(fp)
}
10001168:	e6fffe04 	addi	sp,fp,-8
1000116c:	dfc00317 	ldw	ra,12(sp)
10001170:	df000217 	ldw	fp,8(sp)
10001174:	dc400117 	ldw	r17,4(sp)
10001178:	dc000017 	ldw	r16,0(sp)
1000117c:	dec00804 	addi	sp,sp,32
10001180:	f800283a 	ret

10001184 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001184:	defff704 	addi	sp,sp,-36
10001188:	dfc00815 	stw	ra,32(sp)
1000118c:	df000715 	stw	fp,28(sp)
10001190:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001194:	00804404 	movi	r2,272
10001198:	10800003 	ldbu	r2,0(r2)
1000119c:	10803fcc 	andi	r2,r2,255
100011a0:	1080201c 	xori	r2,r2,128
100011a4:	10bfe004 	addi	r2,r2,-128
100011a8:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
100011ac:	e13ff917 	ldw	r4,-28(fp)
100011b0:	00012580 	call	10001258 <convertDecimalToBinary>
100011b4:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100011b8:	e03ffa15 	stw	zero,-24(fp)
100011bc:	00001406 	br	10001210 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
100011c0:	e0bff917 	ldw	r2,-28(fp)
100011c4:	1009883a 	mov	r4,r2
100011c8:	01400284 	movi	r5,10
100011cc:	00022340 	call	10002234 <__umodsi3>
100011d0:	1007883a 	mov	r3,r2
100011d4:	e0bffa17 	ldw	r2,-24(fp)
100011d8:	1085883a 	add	r2,r2,r2
100011dc:	1085883a 	add	r2,r2,r2
100011e0:	e13ff904 	addi	r4,fp,-28
100011e4:	2085883a 	add	r2,r4,r2
100011e8:	10800204 	addi	r2,r2,8
100011ec:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
100011f0:	e0bff917 	ldw	r2,-28(fp)
100011f4:	1009883a 	mov	r4,r2
100011f8:	01400284 	movi	r5,10
100011fc:	000222c0 	call	1000222c <__udivsi3>
10001200:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001204:	e0bffa17 	ldw	r2,-24(fp)
10001208:	10800044 	addi	r2,r2,1
1000120c:	e0bffa15 	stw	r2,-24(fp)
10001210:	e0bffa17 	ldw	r2,-24(fp)
10001214:	10800150 	cmplti	r2,r2,5
10001218:	103fe91e 	bne	r2,zero,100011c0 <__alt_data_end+0xf80011c0>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
1000121c:	e0bffd17 	ldw	r2,-12(fp)
10001220:	d0a5a515 	stw	r2,-26988(gp)
	key2 = unpackaged[3];
10001224:	e0bffe17 	ldw	r2,-8(fp)
10001228:	d0a5a715 	stw	r2,-26980(gp)
	key3 = unpackaged[4];
1000122c:	e0bfff17 	ldw	r2,-4(fp)
10001230:	d0a5a615 	stw	r2,-26984(gp)
	cursorStreak = unpackaged[0];
10001234:	e0bffb17 	ldw	r2,-20(fp)
10001238:	d0a5a415 	stw	r2,-26992(gp)
	cursorClicked = unpackaged[1];
1000123c:	e0bffc17 	ldw	r2,-16(fp)
10001240:	d0a5a315 	stw	r2,-26996(gp)
}
10001244:	e037883a 	mov	sp,fp
10001248:	dfc00117 	ldw	ra,4(sp)
1000124c:	df000017 	ldw	fp,0(sp)
10001250:	dec00204 	addi	sp,sp,8
10001254:	f800283a 	ret

10001258 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001258:	defffc04 	addi	sp,sp,-16
1000125c:	dfc00315 	stw	ra,12(sp)
10001260:	df000215 	stw	fp,8(sp)
10001264:	dc000115 	stw	r16,4(sp)
10001268:	df000204 	addi	fp,sp,8
1000126c:	e13ffe15 	stw	r4,-8(fp)
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
    */

    if (n == 0)
10001270:	e0bffe17 	ldw	r2,-8(fp)
10001274:	1000021e 	bne	r2,zero,10001280 <convertDecimalToBinary+0x28>
    {
        return 0;
10001278:	0005883a 	mov	r2,zero
1000127c:	00000a06 	br	100012a8 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001280:	e0bffe17 	ldw	r2,-8(fp)
10001284:	1400004c 	andi	r16,r2,1
10001288:	e0bffe17 	ldw	r2,-8(fp)
1000128c:	1004d07a 	srli	r2,r2,1
10001290:	1009883a 	mov	r4,r2
10001294:	00012580 	call	10001258 <convertDecimalToBinary>
10001298:	1009883a 	mov	r4,r2
1000129c:	01400284 	movi	r5,10
100012a0:	000223c0 	call	1000223c <__mulsi3>
100012a4:	8085883a 	add	r2,r16,r2
    }
}
100012a8:	e6ffff04 	addi	sp,fp,-4
100012ac:	dfc00217 	ldw	ra,8(sp)
100012b0:	df000117 	ldw	fp,4(sp)
100012b4:	dc000017 	ldw	r16,0(sp)
100012b8:	dec00304 	addi	sp,sp,12
100012bc:	f800283a 	ret

100012c0 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
100012c0:	defffa04 	addi	sp,sp,-24
100012c4:	dfc00515 	stw	ra,20(sp)
100012c8:	df000415 	stw	fp,16(sp)
100012cc:	df000404 	addi	fp,sp,16
100012d0:	e13ffe15 	stw	r4,-8(fp)
100012d4:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
100012d8:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
100012dc:	e03ffd15 	stw	zero,-12(fp)
100012e0:	00002706 	br	10001380 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
100012e4:	e0bffe17 	ldw	r2,-8(fp)
100012e8:	e0ffff17 	ldw	r3,-4(fp)
100012ec:	01c00284 	movi	r7,10
100012f0:	0011883a 	mov	r8,zero
100012f4:	1009883a 	mov	r4,r2
100012f8:	180b883a 	mov	r5,r3
100012fc:	380d883a 	mov	r6,r7
10001300:	400f883a 	mov	r7,r8
10001304:	0001af40 	call	10001af4 <__umoddi3>
10001308:	1009883a 	mov	r4,r2
1000130c:	180b883a 	mov	r5,r3
10001310:	2005883a 	mov	r2,r4
10001314:	2807883a 	mov	r3,r5
10001318:	11000058 	cmpnei	r4,r2,1
1000131c:	2000081e 	bne	r4,zero,10001340 <convertBinaryToDecimal+0x80>
10001320:	1800071e 	bne	r3,zero,10001340 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001324:	00c00044 	movi	r3,1
10001328:	e0bffd17 	ldw	r2,-12(fp)
1000132c:	1884983a 	sll	r2,r3,r2
10001330:	1007883a 	mov	r3,r2
10001334:	e0bffc17 	ldw	r2,-16(fp)
10001338:	10c5883a 	add	r2,r2,r3
1000133c:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001340:	e0bffe17 	ldw	r2,-8(fp)
10001344:	e0ffff17 	ldw	r3,-4(fp)
10001348:	01c00284 	movi	r7,10
1000134c:	0011883a 	mov	r8,zero
10001350:	1009883a 	mov	r4,r2
10001354:	180b883a 	mov	r5,r3
10001358:	380d883a 	mov	r6,r7
1000135c:	400f883a 	mov	r7,r8
10001360:	00014b40 	call	100014b4 <__udivdi3>
10001364:	1009883a 	mov	r4,r2
10001368:	180b883a 	mov	r5,r3
1000136c:	e13ffe15 	stw	r4,-8(fp)
10001370:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001374:	e0bffd17 	ldw	r2,-12(fp)
10001378:	10800044 	addi	r2,r2,1
1000137c:	e0bffd15 	stw	r2,-12(fp)
10001380:	e0bffe17 	ldw	r2,-8(fp)
10001384:	e0ffff17 	ldw	r3,-4(fp)
10001388:	10c4b03a 	or	r2,r2,r3
1000138c:	103fd51e 	bne	r2,zero,100012e4 <__alt_data_end+0xf80012e4>
            decimal += (1 << i);

        n /= 10;
    }

    return decimal;
10001390:	e0bffc17 	ldw	r2,-16(fp)
}
10001394:	e037883a 	mov	sp,fp
10001398:	dfc00117 	ldw	ra,4(sp)
1000139c:	df000017 	ldw	fp,0(sp)
100013a0:	dec00204 	addi	sp,sp,8
100013a4:	f800283a 	ret

100013a8 <__muldi3>:
100013a8:	defff604 	addi	sp,sp,-40
100013ac:	dd800615 	stw	r22,24(sp)
100013b0:	dd400515 	stw	r21,20(sp)
100013b4:	25bfffcc 	andi	r22,r4,65535
100013b8:	357fffcc 	andi	r21,r6,65535
100013bc:	dc400115 	stw	r17,4(sp)
100013c0:	2022d43a 	srli	r17,r4,16
100013c4:	dcc00315 	stw	r19,12(sp)
100013c8:	dc800215 	stw	r18,8(sp)
100013cc:	2027883a 	mov	r19,r4
100013d0:	2825883a 	mov	r18,r5
100013d4:	a809883a 	mov	r4,r21
100013d8:	b00b883a 	mov	r5,r22
100013dc:	dfc00915 	stw	ra,36(sp)
100013e0:	df000815 	stw	fp,32(sp)
100013e4:	ddc00715 	stw	r23,28(sp)
100013e8:	3839883a 	mov	fp,r7
100013ec:	302ed43a 	srli	r23,r6,16
100013f0:	dd000415 	stw	r20,16(sp)
100013f4:	dc000015 	stw	r16,0(sp)
100013f8:	3029883a 	mov	r20,r6
100013fc:	000223c0 	call	1000223c <__mulsi3>
10001400:	a809883a 	mov	r4,r21
10001404:	880b883a 	mov	r5,r17
10001408:	1021883a 	mov	r16,r2
1000140c:	000223c0 	call	1000223c <__mulsi3>
10001410:	880b883a 	mov	r5,r17
10001414:	b809883a 	mov	r4,r23
10001418:	102b883a 	mov	r21,r2
1000141c:	000223c0 	call	1000223c <__mulsi3>
10001420:	b809883a 	mov	r4,r23
10001424:	b00b883a 	mov	r5,r22
10001428:	1023883a 	mov	r17,r2
1000142c:	000223c0 	call	1000223c <__mulsi3>
10001430:	8012d43a 	srli	r9,r16,16
10001434:	a885883a 	add	r2,r21,r2
10001438:	1251883a 	add	r8,r2,r9
1000143c:	4540022e 	bgeu	r8,r21,10001448 <__muldi3+0xa0>
10001440:	00800074 	movhi	r2,1
10001444:	88a3883a 	add	r17,r17,r2
10001448:	4006d43a 	srli	r3,r8,16
1000144c:	4010943a 	slli	r8,r8,16
10001450:	9809883a 	mov	r4,r19
10001454:	e00b883a 	mov	r5,fp
10001458:	843fffcc 	andi	r16,r16,65535
1000145c:	88e3883a 	add	r17,r17,r3
10001460:	4421883a 	add	r16,r8,r16
10001464:	000223c0 	call	1000223c <__mulsi3>
10001468:	a009883a 	mov	r4,r20
1000146c:	900b883a 	mov	r5,r18
10001470:	1027883a 	mov	r19,r2
10001474:	000223c0 	call	1000223c <__mulsi3>
10001478:	9885883a 	add	r2,r19,r2
1000147c:	1447883a 	add	r3,r2,r17
10001480:	8005883a 	mov	r2,r16
10001484:	dfc00917 	ldw	ra,36(sp)
10001488:	df000817 	ldw	fp,32(sp)
1000148c:	ddc00717 	ldw	r23,28(sp)
10001490:	dd800617 	ldw	r22,24(sp)
10001494:	dd400517 	ldw	r21,20(sp)
10001498:	dd000417 	ldw	r20,16(sp)
1000149c:	dcc00317 	ldw	r19,12(sp)
100014a0:	dc800217 	ldw	r18,8(sp)
100014a4:	dc400117 	ldw	r17,4(sp)
100014a8:	dc000017 	ldw	r16,0(sp)
100014ac:	dec00a04 	addi	sp,sp,40
100014b0:	f800283a 	ret

100014b4 <__udivdi3>:
100014b4:	defff504 	addi	sp,sp,-44
100014b8:	dcc00415 	stw	r19,16(sp)
100014bc:	dc000115 	stw	r16,4(sp)
100014c0:	dfc00a15 	stw	ra,40(sp)
100014c4:	df000915 	stw	fp,36(sp)
100014c8:	ddc00815 	stw	r23,32(sp)
100014cc:	dd800715 	stw	r22,28(sp)
100014d0:	dd400615 	stw	r21,24(sp)
100014d4:	dd000515 	stw	r20,20(sp)
100014d8:	dc800315 	stw	r18,12(sp)
100014dc:	dc400215 	stw	r17,8(sp)
100014e0:	2027883a 	mov	r19,r4
100014e4:	2821883a 	mov	r16,r5
100014e8:	3800471e 	bne	r7,zero,10001608 <__udivdi3+0x154>
100014ec:	3025883a 	mov	r18,r6
100014f0:	2023883a 	mov	r17,r4
100014f4:	2980592e 	bgeu	r5,r6,1000165c <__udivdi3+0x1a8>
100014f8:	00bfffd4 	movui	r2,65535
100014fc:	2829883a 	mov	r20,r5
10001500:	1180b236 	bltu	r2,r6,100017cc <__udivdi3+0x318>
10001504:	00803fc4 	movi	r2,255
10001508:	1181622e 	bgeu	r2,r6,10001a94 <__udivdi3+0x5e0>
1000150c:	00800204 	movi	r2,8
10001510:	1007883a 	mov	r3,r2
10001514:	3084d83a 	srl	r2,r6,r2
10001518:	01040034 	movhi	r4,4096
1000151c:	21161b04 	addi	r4,r4,22636
10001520:	2085883a 	add	r2,r4,r2
10001524:	11000003 	ldbu	r4,0(r2)
10001528:	20c9883a 	add	r4,r4,r3
1000152c:	00c00804 	movi	r3,32
10001530:	1907c83a 	sub	r3,r3,r4
10001534:	18000526 	beq	r3,zero,1000154c <__udivdi3+0x98>
10001538:	80e0983a 	sll	r16,r16,r3
1000153c:	9908d83a 	srl	r4,r19,r4
10001540:	30e4983a 	sll	r18,r6,r3
10001544:	98e2983a 	sll	r17,r19,r3
10001548:	8128b03a 	or	r20,r16,r4
1000154c:	902ad43a 	srli	r21,r18,16
10001550:	a009883a 	mov	r4,r20
10001554:	95bfffcc 	andi	r22,r18,65535
10001558:	a80b883a 	mov	r5,r21
1000155c:	00022340 	call	10002234 <__umodsi3>
10001560:	a009883a 	mov	r4,r20
10001564:	a80b883a 	mov	r5,r21
10001568:	102f883a 	mov	r23,r2
1000156c:	000222c0 	call	1000222c <__udivsi3>
10001570:	1009883a 	mov	r4,r2
10001574:	b00b883a 	mov	r5,r22
10001578:	1021883a 	mov	r16,r2
1000157c:	000223c0 	call	1000223c <__mulsi3>
10001580:	b82e943a 	slli	r23,r23,16
10001584:	8808d43a 	srli	r4,r17,16
10001588:	b906b03a 	or	r3,r23,r4
1000158c:	1880052e 	bgeu	r3,r2,100015a4 <__udivdi3+0xf0>
10001590:	1c87883a 	add	r3,r3,r18
10001594:	813fffc4 	addi	r4,r16,-1
10001598:	1c800136 	bltu	r3,r18,100015a0 <__udivdi3+0xec>
1000159c:	18815236 	bltu	r3,r2,10001ae8 <__udivdi3+0x634>
100015a0:	2021883a 	mov	r16,r4
100015a4:	18a7c83a 	sub	r19,r3,r2
100015a8:	9809883a 	mov	r4,r19
100015ac:	a80b883a 	mov	r5,r21
100015b0:	00022340 	call	10002234 <__umodsi3>
100015b4:	1029883a 	mov	r20,r2
100015b8:	9809883a 	mov	r4,r19
100015bc:	a80b883a 	mov	r5,r21
100015c0:	a028943a 	slli	r20,r20,16
100015c4:	000222c0 	call	1000222c <__udivsi3>
100015c8:	1009883a 	mov	r4,r2
100015cc:	b00b883a 	mov	r5,r22
100015d0:	8c7fffcc 	andi	r17,r17,65535
100015d4:	1027883a 	mov	r19,r2
100015d8:	a462b03a 	or	r17,r20,r17
100015dc:	000223c0 	call	1000223c <__mulsi3>
100015e0:	8880052e 	bgeu	r17,r2,100015f8 <__udivdi3+0x144>
100015e4:	8ca3883a 	add	r17,r17,r18
100015e8:	98ffffc4 	addi	r3,r19,-1
100015ec:	8c811036 	bltu	r17,r18,10001a30 <__udivdi3+0x57c>
100015f0:	88810f2e 	bgeu	r17,r2,10001a30 <__udivdi3+0x57c>
100015f4:	9cffff84 	addi	r19,r19,-2
100015f8:	8020943a 	slli	r16,r16,16
100015fc:	0007883a 	mov	r3,zero
10001600:	9c04b03a 	or	r2,r19,r16
10001604:	00006006 	br	10001788 <__udivdi3+0x2d4>
10001608:	29c05d36 	bltu	r5,r7,10001780 <__udivdi3+0x2cc>
1000160c:	00bfffd4 	movui	r2,65535
10001610:	11c0692e 	bgeu	r2,r7,100017b8 <__udivdi3+0x304>
10001614:	00804034 	movhi	r2,256
10001618:	10bfffc4 	addi	r2,r2,-1
1000161c:	11c10e2e 	bgeu	r2,r7,10001a58 <__udivdi3+0x5a4>
10001620:	01400604 	movi	r5,24
10001624:	2811883a 	mov	r8,r5
10001628:	394ad83a 	srl	r5,r7,r5
1000162c:	00840034 	movhi	r2,4096
10001630:	10961b04 	addi	r2,r2,22636
10001634:	114b883a 	add	r5,r2,r5
10001638:	29400003 	ldbu	r5,0(r5)
1000163c:	00c00804 	movi	r3,32
10001640:	2a0b883a 	add	r5,r5,r8
10001644:	196fc83a 	sub	r23,r3,r5
10001648:	b8006b1e 	bne	r23,zero,100017f8 <__udivdi3+0x344>
1000164c:	3c011436 	bltu	r7,r16,10001aa0 <__udivdi3+0x5ec>
10001650:	9985403a 	cmpgeu	r2,r19,r6
10001654:	0007883a 	mov	r3,zero
10001658:	00004b06 	br	10001788 <__udivdi3+0x2d4>
1000165c:	3000041e 	bne	r6,zero,10001670 <__udivdi3+0x1bc>
10001660:	01000044 	movi	r4,1
10001664:	000b883a 	mov	r5,zero
10001668:	000222c0 	call	1000222c <__udivsi3>
1000166c:	1025883a 	mov	r18,r2
10001670:	00bfffd4 	movui	r2,65535
10001674:	14805b2e 	bgeu	r2,r18,100017e4 <__udivdi3+0x330>
10001678:	00804034 	movhi	r2,256
1000167c:	10bfffc4 	addi	r2,r2,-1
10001680:	1480fe2e 	bgeu	r2,r18,10001a7c <__udivdi3+0x5c8>
10001684:	00800604 	movi	r2,24
10001688:	1007883a 	mov	r3,r2
1000168c:	9084d83a 	srl	r2,r18,r2
10001690:	01040034 	movhi	r4,4096
10001694:	21161b04 	addi	r4,r4,22636
10001698:	2085883a 	add	r2,r4,r2
1000169c:	11800003 	ldbu	r6,0(r2)
100016a0:	01c00804 	movi	r7,32
100016a4:	30c7883a 	add	r3,r6,r3
100016a8:	38cfc83a 	sub	r7,r7,r3
100016ac:	3800a71e 	bne	r7,zero,1000194c <__udivdi3+0x498>
100016b0:	9028d43a 	srli	r20,r18,16
100016b4:	84a1c83a 	sub	r16,r16,r18
100016b8:	957fffcc 	andi	r21,r18,65535
100016bc:	00c00044 	movi	r3,1
100016c0:	8009883a 	mov	r4,r16
100016c4:	a00b883a 	mov	r5,r20
100016c8:	d8c00015 	stw	r3,0(sp)
100016cc:	00022340 	call	10002234 <__umodsi3>
100016d0:	8009883a 	mov	r4,r16
100016d4:	a00b883a 	mov	r5,r20
100016d8:	102d883a 	mov	r22,r2
100016dc:	000222c0 	call	1000222c <__udivsi3>
100016e0:	1009883a 	mov	r4,r2
100016e4:	a80b883a 	mov	r5,r21
100016e8:	1021883a 	mov	r16,r2
100016ec:	000223c0 	call	1000223c <__mulsi3>
100016f0:	b02c943a 	slli	r22,r22,16
100016f4:	880ed43a 	srli	r7,r17,16
100016f8:	d8c00017 	ldw	r3,0(sp)
100016fc:	b1ccb03a 	or	r6,r22,r7
10001700:	3080052e 	bgeu	r6,r2,10001718 <__udivdi3+0x264>
10001704:	348d883a 	add	r6,r6,r18
10001708:	813fffc4 	addi	r4,r16,-1
1000170c:	34800136 	bltu	r6,r18,10001714 <__udivdi3+0x260>
10001710:	3080f236 	bltu	r6,r2,10001adc <__udivdi3+0x628>
10001714:	2021883a 	mov	r16,r4
10001718:	30a7c83a 	sub	r19,r6,r2
1000171c:	9809883a 	mov	r4,r19
10001720:	a00b883a 	mov	r5,r20
10001724:	d8c00015 	stw	r3,0(sp)
10001728:	00022340 	call	10002234 <__umodsi3>
1000172c:	102d883a 	mov	r22,r2
10001730:	9809883a 	mov	r4,r19
10001734:	a00b883a 	mov	r5,r20
10001738:	b02c943a 	slli	r22,r22,16
1000173c:	000222c0 	call	1000222c <__udivsi3>
10001740:	1009883a 	mov	r4,r2
10001744:	a80b883a 	mov	r5,r21
10001748:	8c7fffcc 	andi	r17,r17,65535
1000174c:	1027883a 	mov	r19,r2
10001750:	b462b03a 	or	r17,r22,r17
10001754:	000223c0 	call	1000223c <__mulsi3>
10001758:	d8c00017 	ldw	r3,0(sp)
1000175c:	8880052e 	bgeu	r17,r2,10001774 <__udivdi3+0x2c0>
10001760:	8ca3883a 	add	r17,r17,r18
10001764:	993fffc4 	addi	r4,r19,-1
10001768:	8c80af36 	bltu	r17,r18,10001a28 <__udivdi3+0x574>
1000176c:	8880ae2e 	bgeu	r17,r2,10001a28 <__udivdi3+0x574>
10001770:	9cffff84 	addi	r19,r19,-2
10001774:	8020943a 	slli	r16,r16,16
10001778:	9c04b03a 	or	r2,r19,r16
1000177c:	00000206 	br	10001788 <__udivdi3+0x2d4>
10001780:	0007883a 	mov	r3,zero
10001784:	0005883a 	mov	r2,zero
10001788:	dfc00a17 	ldw	ra,40(sp)
1000178c:	df000917 	ldw	fp,36(sp)
10001790:	ddc00817 	ldw	r23,32(sp)
10001794:	dd800717 	ldw	r22,28(sp)
10001798:	dd400617 	ldw	r21,24(sp)
1000179c:	dd000517 	ldw	r20,20(sp)
100017a0:	dcc00417 	ldw	r19,16(sp)
100017a4:	dc800317 	ldw	r18,12(sp)
100017a8:	dc400217 	ldw	r17,8(sp)
100017ac:	dc000117 	ldw	r16,4(sp)
100017b0:	dec00b04 	addi	sp,sp,44
100017b4:	f800283a 	ret
100017b8:	00803fc4 	movi	r2,255
100017bc:	11c0a92e 	bgeu	r2,r7,10001a64 <__udivdi3+0x5b0>
100017c0:	01400204 	movi	r5,8
100017c4:	2811883a 	mov	r8,r5
100017c8:	003f9706 	br	10001628 <__alt_data_end+0xf8001628>
100017cc:	00804034 	movhi	r2,256
100017d0:	10bfffc4 	addi	r2,r2,-1
100017d4:	1180a62e 	bgeu	r2,r6,10001a70 <__udivdi3+0x5bc>
100017d8:	00800604 	movi	r2,24
100017dc:	1007883a 	mov	r3,r2
100017e0:	003f4c06 	br	10001514 <__alt_data_end+0xf8001514>
100017e4:	00803fc4 	movi	r2,255
100017e8:	1480a72e 	bgeu	r2,r18,10001a88 <__udivdi3+0x5d4>
100017ec:	00800204 	movi	r2,8
100017f0:	1007883a 	mov	r3,r2
100017f4:	003fa506 	br	1000168c <__alt_data_end+0xf800168c>
100017f8:	3178d83a 	srl	fp,r6,r5
100017fc:	3dce983a 	sll	r7,r7,r23
10001800:	8168d83a 	srl	r20,r16,r5
10001804:	9950d83a 	srl	r8,r19,r5
10001808:	3f38b03a 	or	fp,r7,fp
1000180c:	e024d43a 	srli	r18,fp,16
10001810:	85e0983a 	sll	r16,r16,r23
10001814:	a009883a 	mov	r4,r20
10001818:	900b883a 	mov	r5,r18
1000181c:	8220b03a 	or	r16,r16,r8
10001820:	35ea983a 	sll	r21,r6,r23
10001824:	00022340 	call	10002234 <__umodsi3>
10001828:	a009883a 	mov	r4,r20
1000182c:	900b883a 	mov	r5,r18
10001830:	1023883a 	mov	r17,r2
10001834:	e5bfffcc 	andi	r22,fp,65535
10001838:	000222c0 	call	1000222c <__udivsi3>
1000183c:	1009883a 	mov	r4,r2
10001840:	b00b883a 	mov	r5,r22
10001844:	1029883a 	mov	r20,r2
10001848:	000223c0 	call	1000223c <__mulsi3>
1000184c:	8806943a 	slli	r3,r17,16
10001850:	8014d43a 	srli	r10,r16,16
10001854:	1a92b03a 	or	r9,r3,r10
10001858:	4880042e 	bgeu	r9,r2,1000186c <__udivdi3+0x3b8>
1000185c:	4f13883a 	add	r9,r9,fp
10001860:	a0ffffc4 	addi	r3,r20,-1
10001864:	4f00952e 	bgeu	r9,fp,10001abc <__udivdi3+0x608>
10001868:	1829883a 	mov	r20,r3
1000186c:	48a3c83a 	sub	r17,r9,r2
10001870:	8809883a 	mov	r4,r17
10001874:	900b883a 	mov	r5,r18
10001878:	00022340 	call	10002234 <__umodsi3>
1000187c:	8809883a 	mov	r4,r17
10001880:	900b883a 	mov	r5,r18
10001884:	d8800015 	stw	r2,0(sp)
10001888:	000222c0 	call	1000222c <__udivsi3>
1000188c:	1009883a 	mov	r4,r2
10001890:	b00b883a 	mov	r5,r22
10001894:	1023883a 	mov	r17,r2
10001898:	000223c0 	call	1000223c <__mulsi3>
1000189c:	d8c00017 	ldw	r3,0(sp)
100018a0:	823fffcc 	andi	r8,r16,65535
100018a4:	1806943a 	slli	r3,r3,16
100018a8:	1a20b03a 	or	r16,r3,r8
100018ac:	8080042e 	bgeu	r16,r2,100018c0 <__udivdi3+0x40c>
100018b0:	8721883a 	add	r16,r16,fp
100018b4:	88ffffc4 	addi	r3,r17,-1
100018b8:	87007c2e 	bgeu	r16,fp,10001aac <__udivdi3+0x5f8>
100018bc:	1823883a 	mov	r17,r3
100018c0:	a028943a 	slli	r20,r20,16
100018c4:	acbfffcc 	andi	r18,r21,65535
100018c8:	900b883a 	mov	r5,r18
100018cc:	8d28b03a 	or	r20,r17,r20
100018d0:	a022d43a 	srli	r17,r20,16
100018d4:	a5bfffcc 	andi	r22,r20,65535
100018d8:	b009883a 	mov	r4,r22
100018dc:	a82ad43a 	srli	r21,r21,16
100018e0:	80a1c83a 	sub	r16,r16,r2
100018e4:	000223c0 	call	1000223c <__mulsi3>
100018e8:	8809883a 	mov	r4,r17
100018ec:	900b883a 	mov	r5,r18
100018f0:	1039883a 	mov	fp,r2
100018f4:	000223c0 	call	1000223c <__mulsi3>
100018f8:	8809883a 	mov	r4,r17
100018fc:	a80b883a 	mov	r5,r21
10001900:	1025883a 	mov	r18,r2
10001904:	000223c0 	call	1000223c <__mulsi3>
10001908:	b009883a 	mov	r4,r22
1000190c:	a80b883a 	mov	r5,r21
10001910:	1023883a 	mov	r17,r2
10001914:	000223c0 	call	1000223c <__mulsi3>
10001918:	e006d43a 	srli	r3,fp,16
1000191c:	9085883a 	add	r2,r18,r2
10001920:	10c7883a 	add	r3,r2,r3
10001924:	1c80022e 	bgeu	r3,r18,10001930 <__udivdi3+0x47c>
10001928:	00800074 	movhi	r2,1
1000192c:	88a3883a 	add	r17,r17,r2
10001930:	1808d43a 	srli	r4,r3,16
10001934:	8909883a 	add	r4,r17,r4
10001938:	81004436 	bltu	r16,r4,10001a4c <__udivdi3+0x598>
1000193c:	81003e26 	beq	r16,r4,10001a38 <__udivdi3+0x584>
10001940:	a005883a 	mov	r2,r20
10001944:	0007883a 	mov	r3,zero
10001948:	003f8f06 	br	10001788 <__alt_data_end+0xf8001788>
1000194c:	91e4983a 	sll	r18,r18,r7
10001950:	80eed83a 	srl	r23,r16,r3
10001954:	81cc983a 	sll	r6,r16,r7
10001958:	9028d43a 	srli	r20,r18,16
1000195c:	98c6d83a 	srl	r3,r19,r3
10001960:	b809883a 	mov	r4,r23
10001964:	a00b883a 	mov	r5,r20
10001968:	30ecb03a 	or	r22,r6,r3
1000196c:	99e2983a 	sll	r17,r19,r7
10001970:	00022340 	call	10002234 <__umodsi3>
10001974:	b809883a 	mov	r4,r23
10001978:	a00b883a 	mov	r5,r20
1000197c:	1021883a 	mov	r16,r2
10001980:	957fffcc 	andi	r21,r18,65535
10001984:	000222c0 	call	1000222c <__udivsi3>
10001988:	a80b883a 	mov	r5,r21
1000198c:	1009883a 	mov	r4,r2
10001990:	102f883a 	mov	r23,r2
10001994:	000223c0 	call	1000223c <__mulsi3>
10001998:	8020943a 	slli	r16,r16,16
1000199c:	b00ad43a 	srli	r5,r22,16
100019a0:	814cb03a 	or	r6,r16,r5
100019a4:	3080062e 	bgeu	r6,r2,100019c0 <__udivdi3+0x50c>
100019a8:	348d883a 	add	r6,r6,r18
100019ac:	b8ffffc4 	addi	r3,r23,-1
100019b0:	34804836 	bltu	r6,r18,10001ad4 <__udivdi3+0x620>
100019b4:	3080472e 	bgeu	r6,r2,10001ad4 <__udivdi3+0x620>
100019b8:	bdffff84 	addi	r23,r23,-2
100019bc:	348d883a 	add	r6,r6,r18
100019c0:	30a7c83a 	sub	r19,r6,r2
100019c4:	9809883a 	mov	r4,r19
100019c8:	a00b883a 	mov	r5,r20
100019cc:	00022340 	call	10002234 <__umodsi3>
100019d0:	9809883a 	mov	r4,r19
100019d4:	a00b883a 	mov	r5,r20
100019d8:	1039883a 	mov	fp,r2
100019dc:	000222c0 	call	1000222c <__udivsi3>
100019e0:	1009883a 	mov	r4,r2
100019e4:	a80b883a 	mov	r5,r21
100019e8:	e038943a 	slli	fp,fp,16
100019ec:	1027883a 	mov	r19,r2
100019f0:	000223c0 	call	1000223c <__mulsi3>
100019f4:	b1bfffcc 	andi	r6,r22,65535
100019f8:	e18cb03a 	or	r6,fp,r6
100019fc:	3080062e 	bgeu	r6,r2,10001a18 <__udivdi3+0x564>
10001a00:	348d883a 	add	r6,r6,r18
10001a04:	98ffffc4 	addi	r3,r19,-1
10001a08:	34803036 	bltu	r6,r18,10001acc <__udivdi3+0x618>
10001a0c:	30802f2e 	bgeu	r6,r2,10001acc <__udivdi3+0x618>
10001a10:	9cffff84 	addi	r19,r19,-2
10001a14:	348d883a 	add	r6,r6,r18
10001a18:	b82e943a 	slli	r23,r23,16
10001a1c:	30a1c83a 	sub	r16,r6,r2
10001a20:	9dc6b03a 	or	r3,r19,r23
10001a24:	003f2606 	br	100016c0 <__alt_data_end+0xf80016c0>
10001a28:	2027883a 	mov	r19,r4
10001a2c:	003f5106 	br	10001774 <__alt_data_end+0xf8001774>
10001a30:	1827883a 	mov	r19,r3
10001a34:	003ef006 	br	100015f8 <__alt_data_end+0xf80015f8>
10001a38:	1808943a 	slli	r4,r3,16
10001a3c:	9dc6983a 	sll	r3,r19,r23
10001a40:	e73fffcc 	andi	fp,fp,65535
10001a44:	2709883a 	add	r4,r4,fp
10001a48:	193fbd2e 	bgeu	r3,r4,10001940 <__alt_data_end+0xf8001940>
10001a4c:	a0bfffc4 	addi	r2,r20,-1
10001a50:	0007883a 	mov	r3,zero
10001a54:	003f4c06 	br	10001788 <__alt_data_end+0xf8001788>
10001a58:	01400404 	movi	r5,16
10001a5c:	2811883a 	mov	r8,r5
10001a60:	003ef106 	br	10001628 <__alt_data_end+0xf8001628>
10001a64:	000b883a 	mov	r5,zero
10001a68:	0011883a 	mov	r8,zero
10001a6c:	003eee06 	br	10001628 <__alt_data_end+0xf8001628>
10001a70:	00800404 	movi	r2,16
10001a74:	1007883a 	mov	r3,r2
10001a78:	003ea606 	br	10001514 <__alt_data_end+0xf8001514>
10001a7c:	00800404 	movi	r2,16
10001a80:	1007883a 	mov	r3,r2
10001a84:	003f0106 	br	1000168c <__alt_data_end+0xf800168c>
10001a88:	0005883a 	mov	r2,zero
10001a8c:	0007883a 	mov	r3,zero
10001a90:	003efe06 	br	1000168c <__alt_data_end+0xf800168c>
10001a94:	0005883a 	mov	r2,zero
10001a98:	0007883a 	mov	r3,zero
10001a9c:	003e9d06 	br	10001514 <__alt_data_end+0xf8001514>
10001aa0:	0007883a 	mov	r3,zero
10001aa4:	00800044 	movi	r2,1
10001aa8:	003f3706 	br	10001788 <__alt_data_end+0xf8001788>
10001aac:	80bf832e 	bgeu	r16,r2,100018bc <__alt_data_end+0xf80018bc>
10001ab0:	8c7fff84 	addi	r17,r17,-2
10001ab4:	8721883a 	add	r16,r16,fp
10001ab8:	003f8106 	br	100018c0 <__alt_data_end+0xf80018c0>
10001abc:	48bf6a2e 	bgeu	r9,r2,10001868 <__alt_data_end+0xf8001868>
10001ac0:	a53fff84 	addi	r20,r20,-2
10001ac4:	4f13883a 	add	r9,r9,fp
10001ac8:	003f6806 	br	1000186c <__alt_data_end+0xf800186c>
10001acc:	1827883a 	mov	r19,r3
10001ad0:	003fd106 	br	10001a18 <__alt_data_end+0xf8001a18>
10001ad4:	182f883a 	mov	r23,r3
10001ad8:	003fb906 	br	100019c0 <__alt_data_end+0xf80019c0>
10001adc:	843fff84 	addi	r16,r16,-2
10001ae0:	348d883a 	add	r6,r6,r18
10001ae4:	003f0c06 	br	10001718 <__alt_data_end+0xf8001718>
10001ae8:	843fff84 	addi	r16,r16,-2
10001aec:	1c87883a 	add	r3,r3,r18
10001af0:	003eac06 	br	100015a4 <__alt_data_end+0xf80015a4>

10001af4 <__umoddi3>:
10001af4:	defff404 	addi	sp,sp,-48
10001af8:	dd800815 	stw	r22,32(sp)
10001afc:	dc400315 	stw	r17,12(sp)
10001b00:	dc000215 	stw	r16,8(sp)
10001b04:	dfc00b15 	stw	ra,44(sp)
10001b08:	df000a15 	stw	fp,40(sp)
10001b0c:	ddc00915 	stw	r23,36(sp)
10001b10:	dd400715 	stw	r21,28(sp)
10001b14:	dd000615 	stw	r20,24(sp)
10001b18:	dcc00515 	stw	r19,20(sp)
10001b1c:	dc800415 	stw	r18,16(sp)
10001b20:	2021883a 	mov	r16,r4
10001b24:	2823883a 	mov	r17,r5
10001b28:	282d883a 	mov	r22,r5
10001b2c:	38003c1e 	bne	r7,zero,10001c20 <__umoddi3+0x12c>
10001b30:	3027883a 	mov	r19,r6
10001b34:	2029883a 	mov	r20,r4
10001b38:	2980522e 	bgeu	r5,r6,10001c84 <__umoddi3+0x190>
10001b3c:	00bfffd4 	movui	r2,65535
10001b40:	1180a436 	bltu	r2,r6,10001dd4 <__umoddi3+0x2e0>
10001b44:	00803fc4 	movi	r2,255
10001b48:	11815e2e 	bgeu	r2,r6,100020c4 <__umoddi3+0x5d0>
10001b4c:	01400204 	movi	r5,8
10001b50:	2805883a 	mov	r2,r5
10001b54:	314ad83a 	srl	r5,r6,r5
10001b58:	00c40034 	movhi	r3,4096
10001b5c:	18d61b04 	addi	r3,r3,22636
10001b60:	194b883a 	add	r5,r3,r5
10001b64:	29000003 	ldbu	r4,0(r5)
10001b68:	2089883a 	add	r4,r4,r2
10001b6c:	00800804 	movi	r2,32
10001b70:	1105c83a 	sub	r2,r2,r4
10001b74:	10010c26 	beq	r2,zero,10001fa8 <__umoddi3+0x4b4>
10001b78:	88a2983a 	sll	r17,r17,r2
10001b7c:	8108d83a 	srl	r4,r16,r4
10001b80:	30a6983a 	sll	r19,r6,r2
10001b84:	80a8983a 	sll	r20,r16,r2
10001b88:	1025883a 	mov	r18,r2
10001b8c:	892cb03a 	or	r22,r17,r4
10001b90:	9822d43a 	srli	r17,r19,16
10001b94:	b009883a 	mov	r4,r22
10001b98:	9d7fffcc 	andi	r21,r19,65535
10001b9c:	880b883a 	mov	r5,r17
10001ba0:	00022340 	call	10002234 <__umodsi3>
10001ba4:	b009883a 	mov	r4,r22
10001ba8:	880b883a 	mov	r5,r17
10001bac:	102f883a 	mov	r23,r2
10001bb0:	000222c0 	call	1000222c <__udivsi3>
10001bb4:	1009883a 	mov	r4,r2
10001bb8:	a80b883a 	mov	r5,r21
10001bbc:	000223c0 	call	1000223c <__mulsi3>
10001bc0:	b82e943a 	slli	r23,r23,16
10001bc4:	a008d43a 	srli	r4,r20,16
10001bc8:	b906b03a 	or	r3,r23,r4
10001bcc:	1880042e 	bgeu	r3,r2,10001be0 <__umoddi3+0xec>
10001bd0:	1cc7883a 	add	r3,r3,r19
10001bd4:	1cc00236 	bltu	r3,r19,10001be0 <__umoddi3+0xec>
10001bd8:	1880012e 	bgeu	r3,r2,10001be0 <__umoddi3+0xec>
10001bdc:	1cc7883a 	add	r3,r3,r19
10001be0:	18a1c83a 	sub	r16,r3,r2
10001be4:	8009883a 	mov	r4,r16
10001be8:	880b883a 	mov	r5,r17
10001bec:	00022340 	call	10002234 <__umodsi3>
10001bf0:	8009883a 	mov	r4,r16
10001bf4:	880b883a 	mov	r5,r17
10001bf8:	102d883a 	mov	r22,r2
10001bfc:	000222c0 	call	1000222c <__udivsi3>
10001c00:	1009883a 	mov	r4,r2
10001c04:	a80b883a 	mov	r5,r21
10001c08:	b02c943a 	slli	r22,r22,16
10001c0c:	000223c0 	call	1000223c <__mulsi3>
10001c10:	a13fffcc 	andi	r4,r20,65535
10001c14:	b106b03a 	or	r3,r22,r4
10001c18:	1880572e 	bgeu	r3,r2,10001d78 <__umoddi3+0x284>
10001c1c:	00005206 	br	10001d68 <__umoddi3+0x274>
10001c20:	29c05936 	bltu	r5,r7,10001d88 <__umoddi3+0x294>
10001c24:	00bfffd4 	movui	r2,65535
10001c28:	11c0652e 	bgeu	r2,r7,10001dc0 <__umoddi3+0x2cc>
10001c2c:	00804034 	movhi	r2,256
10001c30:	10bfffc4 	addi	r2,r2,-1
10001c34:	11c1172e 	bgeu	r2,r7,10002094 <__umoddi3+0x5a0>
10001c38:	01400604 	movi	r5,24
10001c3c:	282b883a 	mov	r21,r5
10001c40:	394ad83a 	srl	r5,r7,r5
10001c44:	00c40034 	movhi	r3,4096
10001c48:	18d61b04 	addi	r3,r3,22636
10001c4c:	194b883a 	add	r5,r3,r5
10001c50:	28800003 	ldbu	r2,0(r5)
10001c54:	00c00804 	movi	r3,32
10001c58:	156b883a 	add	r21,r2,r21
10001c5c:	1d69c83a 	sub	r20,r3,r21
10001c60:	a000671e 	bne	r20,zero,10001e00 <__umoddi3+0x30c>
10001c64:	3c400136 	bltu	r7,r17,10001c6c <__umoddi3+0x178>
10001c68:	81812336 	bltu	r16,r6,100020f8 <__umoddi3+0x604>
10001c6c:	8185c83a 	sub	r2,r16,r6
10001c70:	89e3c83a 	sub	r17,r17,r7
10001c74:	8087803a 	cmpltu	r3,r16,r2
10001c78:	88edc83a 	sub	r22,r17,r3
10001c7c:	b007883a 	mov	r3,r22
10001c80:	00004306 	br	10001d90 <__umoddi3+0x29c>
10001c84:	3000041e 	bne	r6,zero,10001c98 <__umoddi3+0x1a4>
10001c88:	01000044 	movi	r4,1
10001c8c:	000b883a 	mov	r5,zero
10001c90:	000222c0 	call	1000222c <__udivsi3>
10001c94:	1027883a 	mov	r19,r2
10001c98:	00bfffd4 	movui	r2,65535
10001c9c:	14c0532e 	bgeu	r2,r19,10001dec <__umoddi3+0x2f8>
10001ca0:	00804034 	movhi	r2,256
10001ca4:	10bfffc4 	addi	r2,r2,-1
10001ca8:	14c1032e 	bgeu	r2,r19,100020b8 <__umoddi3+0x5c4>
10001cac:	00800604 	movi	r2,24
10001cb0:	1007883a 	mov	r3,r2
10001cb4:	9884d83a 	srl	r2,r19,r2
10001cb8:	01040034 	movhi	r4,4096
10001cbc:	21161b04 	addi	r4,r4,22636
10001cc0:	2085883a 	add	r2,r4,r2
10001cc4:	11000003 	ldbu	r4,0(r2)
10001cc8:	00800804 	movi	r2,32
10001ccc:	20c7883a 	add	r3,r4,r3
10001cd0:	10c5c83a 	sub	r2,r2,r3
10001cd4:	1000b61e 	bne	r2,zero,10001fb0 <__umoddi3+0x4bc>
10001cd8:	982ad43a 	srli	r21,r19,16
10001cdc:	8ce3c83a 	sub	r17,r17,r19
10001ce0:	9dbfffcc 	andi	r22,r19,65535
10001ce4:	0025883a 	mov	r18,zero
10001ce8:	8809883a 	mov	r4,r17
10001cec:	a80b883a 	mov	r5,r21
10001cf0:	00022340 	call	10002234 <__umodsi3>
10001cf4:	8809883a 	mov	r4,r17
10001cf8:	a80b883a 	mov	r5,r21
10001cfc:	102f883a 	mov	r23,r2
10001d00:	000222c0 	call	1000222c <__udivsi3>
10001d04:	1009883a 	mov	r4,r2
10001d08:	b00b883a 	mov	r5,r22
10001d0c:	000223c0 	call	1000223c <__mulsi3>
10001d10:	b82e943a 	slli	r23,r23,16
10001d14:	a008d43a 	srli	r4,r20,16
10001d18:	b906b03a 	or	r3,r23,r4
10001d1c:	1880032e 	bgeu	r3,r2,10001d2c <__umoddi3+0x238>
10001d20:	1cc7883a 	add	r3,r3,r19
10001d24:	1cc00136 	bltu	r3,r19,10001d2c <__umoddi3+0x238>
10001d28:	1880f136 	bltu	r3,r2,100020f0 <__umoddi3+0x5fc>
10001d2c:	18a1c83a 	sub	r16,r3,r2
10001d30:	8009883a 	mov	r4,r16
10001d34:	a80b883a 	mov	r5,r21
10001d38:	00022340 	call	10002234 <__umodsi3>
10001d3c:	8009883a 	mov	r4,r16
10001d40:	a80b883a 	mov	r5,r21
10001d44:	1023883a 	mov	r17,r2
10001d48:	000222c0 	call	1000222c <__udivsi3>
10001d4c:	1009883a 	mov	r4,r2
10001d50:	b00b883a 	mov	r5,r22
10001d54:	8822943a 	slli	r17,r17,16
10001d58:	000223c0 	call	1000223c <__mulsi3>
10001d5c:	a13fffcc 	andi	r4,r20,65535
10001d60:	8906b03a 	or	r3,r17,r4
10001d64:	1880042e 	bgeu	r3,r2,10001d78 <__umoddi3+0x284>
10001d68:	1cc7883a 	add	r3,r3,r19
10001d6c:	1cc00236 	bltu	r3,r19,10001d78 <__umoddi3+0x284>
10001d70:	1880012e 	bgeu	r3,r2,10001d78 <__umoddi3+0x284>
10001d74:	1cc7883a 	add	r3,r3,r19
10001d78:	1887c83a 	sub	r3,r3,r2
10001d7c:	1c84d83a 	srl	r2,r3,r18
10001d80:	0007883a 	mov	r3,zero
10001d84:	00000206 	br	10001d90 <__umoddi3+0x29c>
10001d88:	2005883a 	mov	r2,r4
10001d8c:	2807883a 	mov	r3,r5
10001d90:	dfc00b17 	ldw	ra,44(sp)
10001d94:	df000a17 	ldw	fp,40(sp)
10001d98:	ddc00917 	ldw	r23,36(sp)
10001d9c:	dd800817 	ldw	r22,32(sp)
10001da0:	dd400717 	ldw	r21,28(sp)
10001da4:	dd000617 	ldw	r20,24(sp)
10001da8:	dcc00517 	ldw	r19,20(sp)
10001dac:	dc800417 	ldw	r18,16(sp)
10001db0:	dc400317 	ldw	r17,12(sp)
10001db4:	dc000217 	ldw	r16,8(sp)
10001db8:	dec00c04 	addi	sp,sp,48
10001dbc:	f800283a 	ret
10001dc0:	00803fc4 	movi	r2,255
10001dc4:	11c0b02e 	bgeu	r2,r7,10002088 <__umoddi3+0x594>
10001dc8:	01400204 	movi	r5,8
10001dcc:	282b883a 	mov	r21,r5
10001dd0:	003f9b06 	br	10001c40 <__alt_data_end+0xf8001c40>
10001dd4:	00804034 	movhi	r2,256
10001dd8:	10bfffc4 	addi	r2,r2,-1
10001ddc:	1180b02e 	bgeu	r2,r6,100020a0 <__umoddi3+0x5ac>
10001de0:	01400604 	movi	r5,24
10001de4:	2805883a 	mov	r2,r5
10001de8:	003f5a06 	br	10001b54 <__alt_data_end+0xf8001b54>
10001dec:	00803fc4 	movi	r2,255
10001df0:	14c0ae2e 	bgeu	r2,r19,100020ac <__umoddi3+0x5b8>
10001df4:	00800204 	movi	r2,8
10001df8:	1007883a 	mov	r3,r2
10001dfc:	003fad06 	br	10001cb4 <__alt_data_end+0xf8001cb4>
10001e00:	3d0a983a 	sll	r5,r7,r20
10001e04:	356cd83a 	srl	r22,r6,r21
10001e08:	8d78d83a 	srl	fp,r17,r21
10001e0c:	8d10983a 	sll	r8,r17,r20
10001e10:	2dacb03a 	or	r22,r5,r22
10001e14:	b02ed43a 	srli	r23,r22,16
10001e18:	8564d83a 	srl	r18,r16,r21
10001e1c:	e009883a 	mov	r4,fp
10001e20:	b80b883a 	mov	r5,r23
10001e24:	44a4b03a 	or	r18,r8,r18
10001e28:	3526983a 	sll	r19,r6,r20
10001e2c:	00022340 	call	10002234 <__umodsi3>
10001e30:	e009883a 	mov	r4,fp
10001e34:	b80b883a 	mov	r5,r23
10001e38:	b47fffcc 	andi	r17,r22,65535
10001e3c:	d8800015 	stw	r2,0(sp)
10001e40:	000222c0 	call	1000222c <__udivsi3>
10001e44:	1009883a 	mov	r4,r2
10001e48:	880b883a 	mov	r5,r17
10001e4c:	1039883a 	mov	fp,r2
10001e50:	000223c0 	call	1000223c <__mulsi3>
10001e54:	d9800017 	ldw	r6,0(sp)
10001e58:	9008d43a 	srli	r4,r18,16
10001e5c:	8520983a 	sll	r16,r16,r20
10001e60:	300c943a 	slli	r6,r6,16
10001e64:	3106b03a 	or	r3,r6,r4
10001e68:	1880042e 	bgeu	r3,r2,10001e7c <__umoddi3+0x388>
10001e6c:	1d87883a 	add	r3,r3,r22
10001e70:	e13fffc4 	addi	r4,fp,-1
10001e74:	1d809a2e 	bgeu	r3,r22,100020e0 <__umoddi3+0x5ec>
10001e78:	2039883a 	mov	fp,r4
10001e7c:	1887c83a 	sub	r3,r3,r2
10001e80:	1809883a 	mov	r4,r3
10001e84:	b80b883a 	mov	r5,r23
10001e88:	d8c00115 	stw	r3,4(sp)
10001e8c:	00022340 	call	10002234 <__umodsi3>
10001e90:	d8c00117 	ldw	r3,4(sp)
10001e94:	b80b883a 	mov	r5,r23
10001e98:	d8800015 	stw	r2,0(sp)
10001e9c:	1809883a 	mov	r4,r3
10001ea0:	000222c0 	call	1000222c <__udivsi3>
10001ea4:	880b883a 	mov	r5,r17
10001ea8:	1009883a 	mov	r4,r2
10001eac:	102f883a 	mov	r23,r2
10001eb0:	000223c0 	call	1000223c <__mulsi3>
10001eb4:	d9800017 	ldw	r6,0(sp)
10001eb8:	947fffcc 	andi	r17,r18,65535
10001ebc:	300c943a 	slli	r6,r6,16
10001ec0:	3464b03a 	or	r18,r6,r17
10001ec4:	9080042e 	bgeu	r18,r2,10001ed8 <__umoddi3+0x3e4>
10001ec8:	95a5883a 	add	r18,r18,r22
10001ecc:	b8ffffc4 	addi	r3,r23,-1
10001ed0:	95807f2e 	bgeu	r18,r22,100020d0 <__umoddi3+0x5dc>
10001ed4:	182f883a 	mov	r23,r3
10001ed8:	e038943a 	slli	fp,fp,16
10001edc:	980cd43a 	srli	r6,r19,16
10001ee0:	98ffffcc 	andi	r3,r19,65535
10001ee4:	bf38b03a 	or	fp,r23,fp
10001ee8:	e02ed43a 	srli	r23,fp,16
10001eec:	e73fffcc 	andi	fp,fp,65535
10001ef0:	180b883a 	mov	r5,r3
10001ef4:	e009883a 	mov	r4,fp
10001ef8:	d9800015 	stw	r6,0(sp)
10001efc:	d8c00115 	stw	r3,4(sp)
10001f00:	90a5c83a 	sub	r18,r18,r2
10001f04:	000223c0 	call	1000223c <__mulsi3>
10001f08:	d8c00117 	ldw	r3,4(sp)
10001f0c:	b809883a 	mov	r4,r23
10001f10:	1023883a 	mov	r17,r2
10001f14:	180b883a 	mov	r5,r3
10001f18:	000223c0 	call	1000223c <__mulsi3>
10001f1c:	d9800017 	ldw	r6,0(sp)
10001f20:	b809883a 	mov	r4,r23
10001f24:	d8800115 	stw	r2,4(sp)
10001f28:	300b883a 	mov	r5,r6
10001f2c:	302f883a 	mov	r23,r6
10001f30:	000223c0 	call	1000223c <__mulsi3>
10001f34:	e009883a 	mov	r4,fp
10001f38:	b80b883a 	mov	r5,r23
10001f3c:	d8800015 	stw	r2,0(sp)
10001f40:	000223c0 	call	1000223c <__mulsi3>
10001f44:	d8c00117 	ldw	r3,4(sp)
10001f48:	880cd43a 	srli	r6,r17,16
10001f4c:	d9c00017 	ldw	r7,0(sp)
10001f50:	1885883a 	add	r2,r3,r2
10001f54:	118d883a 	add	r6,r2,r6
10001f58:	30c0022e 	bgeu	r6,r3,10001f64 <__umoddi3+0x470>
10001f5c:	00800074 	movhi	r2,1
10001f60:	388f883a 	add	r7,r7,r2
10001f64:	3006d43a 	srli	r3,r6,16
10001f68:	300c943a 	slli	r6,r6,16
10001f6c:	8c7fffcc 	andi	r17,r17,65535
10001f70:	38c7883a 	add	r3,r7,r3
10001f74:	3463883a 	add	r17,r6,r17
10001f78:	90c03d36 	bltu	r18,r3,10002070 <__umoddi3+0x57c>
10001f7c:	90c06026 	beq	r18,r3,10002100 <__umoddi3+0x60c>
10001f80:	90c9c83a 	sub	r4,r18,r3
10001f84:	880f883a 	mov	r7,r17
10001f88:	81cfc83a 	sub	r7,r16,r7
10001f8c:	81c7803a 	cmpltu	r3,r16,r7
10001f90:	20c7c83a 	sub	r3,r4,r3
10001f94:	1d44983a 	sll	r2,r3,r21
10001f98:	3d0ed83a 	srl	r7,r7,r20
10001f9c:	1d06d83a 	srl	r3,r3,r20
10001fa0:	11c4b03a 	or	r2,r2,r7
10001fa4:	003f7a06 	br	10001d90 <__alt_data_end+0xf8001d90>
10001fa8:	0025883a 	mov	r18,zero
10001fac:	003ef806 	br	10001b90 <__alt_data_end+0xf8001b90>
10001fb0:	98a6983a 	sll	r19,r19,r2
10001fb4:	88e8d83a 	srl	r20,r17,r3
10001fb8:	80c6d83a 	srl	r3,r16,r3
10001fbc:	982ad43a 	srli	r21,r19,16
10001fc0:	88a2983a 	sll	r17,r17,r2
10001fc4:	a009883a 	mov	r4,r20
10001fc8:	a80b883a 	mov	r5,r21
10001fcc:	88eeb03a 	or	r23,r17,r3
10001fd0:	1025883a 	mov	r18,r2
10001fd4:	00022340 	call	10002234 <__umodsi3>
10001fd8:	a009883a 	mov	r4,r20
10001fdc:	a80b883a 	mov	r5,r21
10001fe0:	1023883a 	mov	r17,r2
10001fe4:	9dbfffcc 	andi	r22,r19,65535
10001fe8:	000222c0 	call	1000222c <__udivsi3>
10001fec:	1009883a 	mov	r4,r2
10001ff0:	b00b883a 	mov	r5,r22
10001ff4:	000223c0 	call	1000223c <__mulsi3>
10001ff8:	8822943a 	slli	r17,r17,16
10001ffc:	b808d43a 	srli	r4,r23,16
10002000:	84a8983a 	sll	r20,r16,r18
10002004:	8906b03a 	or	r3,r17,r4
10002008:	1880042e 	bgeu	r3,r2,1000201c <__umoddi3+0x528>
1000200c:	1cc7883a 	add	r3,r3,r19
10002010:	1cc00236 	bltu	r3,r19,1000201c <__umoddi3+0x528>
10002014:	1880012e 	bgeu	r3,r2,1000201c <__umoddi3+0x528>
10002018:	1cc7883a 	add	r3,r3,r19
1000201c:	18a1c83a 	sub	r16,r3,r2
10002020:	8009883a 	mov	r4,r16
10002024:	a80b883a 	mov	r5,r21
10002028:	00022340 	call	10002234 <__umodsi3>
1000202c:	8009883a 	mov	r4,r16
10002030:	a80b883a 	mov	r5,r21
10002034:	1039883a 	mov	fp,r2
10002038:	000222c0 	call	1000222c <__udivsi3>
1000203c:	1009883a 	mov	r4,r2
10002040:	b00b883a 	mov	r5,r22
10002044:	000223c0 	call	1000223c <__mulsi3>
10002048:	e006943a 	slli	r3,fp,16
1000204c:	b93fffcc 	andi	r4,r23,65535
10002050:	1906b03a 	or	r3,r3,r4
10002054:	1880042e 	bgeu	r3,r2,10002068 <__umoddi3+0x574>
10002058:	1cc7883a 	add	r3,r3,r19
1000205c:	1cc00236 	bltu	r3,r19,10002068 <__umoddi3+0x574>
10002060:	1880012e 	bgeu	r3,r2,10002068 <__umoddi3+0x574>
10002064:	1cc7883a 	add	r3,r3,r19
10002068:	18a3c83a 	sub	r17,r3,r2
1000206c:	003f1e06 	br	10001ce8 <__alt_data_end+0xf8001ce8>
10002070:	8ccfc83a 	sub	r7,r17,r19
10002074:	1d89c83a 	sub	r4,r3,r22
10002078:	89e3803a 	cmpltu	r17,r17,r7
1000207c:	2463c83a 	sub	r17,r4,r17
10002080:	9449c83a 	sub	r4,r18,r17
10002084:	003fc006 	br	10001f88 <__alt_data_end+0xf8001f88>
10002088:	000b883a 	mov	r5,zero
1000208c:	002b883a 	mov	r21,zero
10002090:	003eeb06 	br	10001c40 <__alt_data_end+0xf8001c40>
10002094:	01400404 	movi	r5,16
10002098:	282b883a 	mov	r21,r5
1000209c:	003ee806 	br	10001c40 <__alt_data_end+0xf8001c40>
100020a0:	01400404 	movi	r5,16
100020a4:	2805883a 	mov	r2,r5
100020a8:	003eaa06 	br	10001b54 <__alt_data_end+0xf8001b54>
100020ac:	0005883a 	mov	r2,zero
100020b0:	0007883a 	mov	r3,zero
100020b4:	003eff06 	br	10001cb4 <__alt_data_end+0xf8001cb4>
100020b8:	00800404 	movi	r2,16
100020bc:	1007883a 	mov	r3,r2
100020c0:	003efc06 	br	10001cb4 <__alt_data_end+0xf8001cb4>
100020c4:	000b883a 	mov	r5,zero
100020c8:	0005883a 	mov	r2,zero
100020cc:	003ea106 	br	10001b54 <__alt_data_end+0xf8001b54>
100020d0:	90bf802e 	bgeu	r18,r2,10001ed4 <__alt_data_end+0xf8001ed4>
100020d4:	bdffff84 	addi	r23,r23,-2
100020d8:	95a5883a 	add	r18,r18,r22
100020dc:	003f7e06 	br	10001ed8 <__alt_data_end+0xf8001ed8>
100020e0:	18bf652e 	bgeu	r3,r2,10001e78 <__alt_data_end+0xf8001e78>
100020e4:	e73fff84 	addi	fp,fp,-2
100020e8:	1d87883a 	add	r3,r3,r22
100020ec:	003f6306 	br	10001e7c <__alt_data_end+0xf8001e7c>
100020f0:	1cc7883a 	add	r3,r3,r19
100020f4:	003f0d06 	br	10001d2c <__alt_data_end+0xf8001d2c>
100020f8:	8005883a 	mov	r2,r16
100020fc:	003edf06 	br	10001c7c <__alt_data_end+0xf8001c7c>
10002100:	847fdb36 	bltu	r16,r17,10002070 <__alt_data_end+0xf8002070>
10002104:	880f883a 	mov	r7,r17
10002108:	0009883a 	mov	r4,zero
1000210c:	003f9e06 	br	10001f88 <__alt_data_end+0xf8001f88>

10002110 <udivmodsi4>:
10002110:	2900182e 	bgeu	r5,r4,10002174 <udivmodsi4+0x64>
10002114:	28001716 	blt	r5,zero,10002174 <udivmodsi4+0x64>
10002118:	00800804 	movi	r2,32
1000211c:	00c00044 	movi	r3,1
10002120:	00000206 	br	1000212c <udivmodsi4+0x1c>
10002124:	10001126 	beq	r2,zero,1000216c <udivmodsi4+0x5c>
10002128:	28000516 	blt	r5,zero,10002140 <udivmodsi4+0x30>
1000212c:	294b883a 	add	r5,r5,r5
10002130:	10bfffc4 	addi	r2,r2,-1
10002134:	18c7883a 	add	r3,r3,r3
10002138:	293ffa36 	bltu	r5,r4,10002124 <__alt_data_end+0xf8002124>
1000213c:	18000b26 	beq	r3,zero,1000216c <udivmodsi4+0x5c>
10002140:	0005883a 	mov	r2,zero
10002144:	21400236 	bltu	r4,r5,10002150 <udivmodsi4+0x40>
10002148:	2149c83a 	sub	r4,r4,r5
1000214c:	10c4b03a 	or	r2,r2,r3
10002150:	1806d07a 	srli	r3,r3,1
10002154:	280ad07a 	srli	r5,r5,1
10002158:	183ffa1e 	bne	r3,zero,10002144 <__alt_data_end+0xf8002144>
1000215c:	3000011e 	bne	r6,zero,10002164 <udivmodsi4+0x54>
10002160:	f800283a 	ret
10002164:	2005883a 	mov	r2,r4
10002168:	f800283a 	ret
1000216c:	0005883a 	mov	r2,zero
10002170:	003ffa06 	br	1000215c <__alt_data_end+0xf800215c>
10002174:	00c00044 	movi	r3,1
10002178:	003ff106 	br	10002140 <__alt_data_end+0xf8002140>

1000217c <__divsi3>:
1000217c:	defffe04 	addi	sp,sp,-8
10002180:	dfc00115 	stw	ra,4(sp)
10002184:	dc000015 	stw	r16,0(sp)
10002188:	20000b16 	blt	r4,zero,100021b8 <__divsi3+0x3c>
1000218c:	0021883a 	mov	r16,zero
10002190:	28000c16 	blt	r5,zero,100021c4 <__divsi3+0x48>
10002194:	000d883a 	mov	r6,zero
10002198:	00021100 	call	10002110 <udivmodsi4>
1000219c:	0407c83a 	sub	r3,zero,r16
100021a0:	1884f03a 	xor	r2,r3,r2
100021a4:	1405883a 	add	r2,r2,r16
100021a8:	dfc00117 	ldw	ra,4(sp)
100021ac:	dc000017 	ldw	r16,0(sp)
100021b0:	dec00204 	addi	sp,sp,8
100021b4:	f800283a 	ret
100021b8:	0109c83a 	sub	r4,zero,r4
100021bc:	04000044 	movi	r16,1
100021c0:	283ff40e 	bge	r5,zero,10002194 <__alt_data_end+0xf8002194>
100021c4:	014bc83a 	sub	r5,zero,r5
100021c8:	8400005c 	xori	r16,r16,1
100021cc:	003ff106 	br	10002194 <__alt_data_end+0xf8002194>

100021d0 <__modsi3>:
100021d0:	defffd04 	addi	sp,sp,-12
100021d4:	dfc00215 	stw	ra,8(sp)
100021d8:	dc400115 	stw	r17,4(sp)
100021dc:	dc000015 	stw	r16,0(sp)
100021e0:	20000c16 	blt	r4,zero,10002214 <__modsi3+0x44>
100021e4:	0023883a 	mov	r17,zero
100021e8:	0021883a 	mov	r16,zero
100021ec:	28000d16 	blt	r5,zero,10002224 <__modsi3+0x54>
100021f0:	01800044 	movi	r6,1
100021f4:	00021100 	call	10002110 <udivmodsi4>
100021f8:	1404f03a 	xor	r2,r2,r16
100021fc:	8885883a 	add	r2,r17,r2
10002200:	dfc00217 	ldw	ra,8(sp)
10002204:	dc400117 	ldw	r17,4(sp)
10002208:	dc000017 	ldw	r16,0(sp)
1000220c:	dec00304 	addi	sp,sp,12
10002210:	f800283a 	ret
10002214:	0109c83a 	sub	r4,zero,r4
10002218:	04400044 	movi	r17,1
1000221c:	043fffc4 	movi	r16,-1
10002220:	283ff30e 	bge	r5,zero,100021f0 <__alt_data_end+0xf80021f0>
10002224:	014bc83a 	sub	r5,zero,r5
10002228:	003ff106 	br	100021f0 <__alt_data_end+0xf80021f0>

1000222c <__udivsi3>:
1000222c:	000d883a 	mov	r6,zero
10002230:	00021101 	jmpi	10002110 <udivmodsi4>

10002234 <__umodsi3>:
10002234:	01800044 	movi	r6,1
10002238:	00021101 	jmpi	10002110 <udivmodsi4>

1000223c <__mulsi3>:
1000223c:	0005883a 	mov	r2,zero
10002240:	20000726 	beq	r4,zero,10002260 <__mulsi3+0x24>
10002244:	20c0004c 	andi	r3,r4,1
10002248:	2008d07a 	srli	r4,r4,1
1000224c:	18000126 	beq	r3,zero,10002254 <__mulsi3+0x18>
10002250:	1145883a 	add	r2,r2,r5
10002254:	294b883a 	add	r5,r5,r5
10002258:	203ffa1e 	bne	r4,zero,10002244 <__alt_data_end+0xf8002244>
1000225c:	f800283a 	ret
10002260:	f800283a 	ret

10002264 <__adddf3>:
10002264:	02000434 	movhi	r8,16
10002268:	423fffc4 	addi	r8,r8,-1
1000226c:	defffb04 	addi	sp,sp,-20
10002270:	2a12703a 	and	r9,r5,r8
10002274:	2806d7fa 	srli	r3,r5,31
10002278:	3a10703a 	and	r8,r7,r8
1000227c:	3804d53a 	srli	r2,r7,20
10002280:	3014d77a 	srli	r10,r6,29
10002284:	dc000015 	stw	r16,0(sp)
10002288:	481290fa 	slli	r9,r9,3
1000228c:	2820d53a 	srli	r16,r5,20
10002290:	401090fa 	slli	r8,r8,3
10002294:	200ad77a 	srli	r5,r4,29
10002298:	380ed7fa 	srli	r7,r7,31
1000229c:	dc800215 	stw	r18,8(sp)
100022a0:	dc400115 	stw	r17,4(sp)
100022a4:	dfc00415 	stw	ra,16(sp)
100022a8:	dcc00315 	stw	r19,12(sp)
100022ac:	1c803fcc 	andi	r18,r3,255
100022b0:	8401ffcc 	andi	r16,r16,2047
100022b4:	494ab03a 	or	r5,r9,r5
100022b8:	202290fa 	slli	r17,r4,3
100022bc:	1081ffcc 	andi	r2,r2,2047
100022c0:	4290b03a 	or	r8,r8,r10
100022c4:	300c90fa 	slli	r6,r6,3
100022c8:	91c07026 	beq	r18,r7,1000248c <__adddf3+0x228>
100022cc:	8087c83a 	sub	r3,r16,r2
100022d0:	00c0b30e 	bge	zero,r3,100025a0 <__adddf3+0x33c>
100022d4:	10002a1e 	bne	r2,zero,10002380 <__adddf3+0x11c>
100022d8:	4184b03a 	or	r2,r8,r6
100022dc:	1000991e 	bne	r2,zero,10002544 <__adddf3+0x2e0>
100022e0:	888001cc 	andi	r2,r17,7
100022e4:	10005b26 	beq	r2,zero,10002454 <__adddf3+0x1f0>
100022e8:	88c003cc 	andi	r3,r17,15
100022ec:	00800104 	movi	r2,4
100022f0:	18805826 	beq	r3,r2,10002454 <__adddf3+0x1f0>
100022f4:	89800104 	addi	r6,r17,4
100022f8:	3463803a 	cmpltu	r17,r6,r17
100022fc:	2c4b883a 	add	r5,r5,r17
10002300:	2880202c 	andhi	r2,r5,128
10002304:	9007883a 	mov	r3,r18
10002308:	3023883a 	mov	r17,r6
1000230c:	10005426 	beq	r2,zero,10002460 <__adddf3+0x1fc>
10002310:	84000044 	addi	r16,r16,1
10002314:	0081ffc4 	movi	r2,2047
10002318:	8080c126 	beq	r16,r2,10002620 <__adddf3+0x3bc>
1000231c:	013fe034 	movhi	r4,65408
10002320:	213fffc4 	addi	r4,r4,-1
10002324:	290a703a 	and	r5,r5,r4
10002328:	2804977a 	slli	r2,r5,29
1000232c:	280a927a 	slli	r5,r5,9
10002330:	8822d0fa 	srli	r17,r17,3
10002334:	8401ffcc 	andi	r16,r16,2047
10002338:	2808d33a 	srli	r4,r5,12
1000233c:	1444b03a 	or	r2,r2,r17
10002340:	8401ffcc 	andi	r16,r16,2047
10002344:	800a953a 	slli	r5,r16,20
10002348:	18c03fcc 	andi	r3,r3,255
1000234c:	04000434 	movhi	r16,16
10002350:	180697fa 	slli	r3,r3,31
10002354:	843fffc4 	addi	r16,r16,-1
10002358:	2420703a 	and	r16,r4,r16
1000235c:	8160b03a 	or	r16,r16,r5
10002360:	80c6b03a 	or	r3,r16,r3
10002364:	dfc00417 	ldw	ra,16(sp)
10002368:	dcc00317 	ldw	r19,12(sp)
1000236c:	dc800217 	ldw	r18,8(sp)
10002370:	dc400117 	ldw	r17,4(sp)
10002374:	dc000017 	ldw	r16,0(sp)
10002378:	dec00504 	addi	sp,sp,20
1000237c:	f800283a 	ret
10002380:	0081ffc4 	movi	r2,2047
10002384:	80bfd626 	beq	r16,r2,100022e0 <__alt_data_end+0xf80022e0>
10002388:	42002034 	orhi	r8,r8,128
1000238c:	00800e04 	movi	r2,56
10002390:	10c0a616 	blt	r2,r3,1000262c <__adddf3+0x3c8>
10002394:	008007c4 	movi	r2,31
10002398:	10c0c916 	blt	r2,r3,100026c0 <__adddf3+0x45c>
1000239c:	00800804 	movi	r2,32
100023a0:	10c5c83a 	sub	r2,r2,r3
100023a4:	408e983a 	sll	r7,r8,r2
100023a8:	30c8d83a 	srl	r4,r6,r3
100023ac:	3084983a 	sll	r2,r6,r2
100023b0:	40c6d83a 	srl	r3,r8,r3
100023b4:	390cb03a 	or	r6,r7,r4
100023b8:	1004c03a 	cmpne	r2,r2,zero
100023bc:	308cb03a 	or	r6,r6,r2
100023c0:	898dc83a 	sub	r6,r17,r6
100023c4:	89a3803a 	cmpltu	r17,r17,r6
100023c8:	28cbc83a 	sub	r5,r5,r3
100023cc:	2c4bc83a 	sub	r5,r5,r17
100023d0:	3023883a 	mov	r17,r6
100023d4:	2880202c 	andhi	r2,r5,128
100023d8:	10006d26 	beq	r2,zero,10002590 <__adddf3+0x32c>
100023dc:	04c02034 	movhi	r19,128
100023e0:	9cffffc4 	addi	r19,r19,-1
100023e4:	2ce6703a 	and	r19,r5,r19
100023e8:	98007e26 	beq	r19,zero,100025e4 <__adddf3+0x380>
100023ec:	9809883a 	mov	r4,r19
100023f0:	00035280 	call	10003528 <__clzsi2>
100023f4:	10fffe04 	addi	r3,r2,-8
100023f8:	010007c4 	movi	r4,31
100023fc:	20c07f16 	blt	r4,r3,100025fc <__adddf3+0x398>
10002400:	01400a04 	movi	r5,40
10002404:	2885c83a 	sub	r2,r5,r2
10002408:	888ad83a 	srl	r5,r17,r2
1000240c:	98e6983a 	sll	r19,r19,r3
10002410:	88e2983a 	sll	r17,r17,r3
10002414:	2ce6b03a 	or	r19,r5,r19
10002418:	1c007c16 	blt	r3,r16,1000260c <__adddf3+0x3a8>
1000241c:	1c21c83a 	sub	r16,r3,r16
10002420:	81400044 	addi	r5,r16,1
10002424:	00c007c4 	movi	r3,31
10002428:	19409816 	blt	r3,r5,1000268c <__adddf3+0x428>
1000242c:	1c21c83a 	sub	r16,r3,r16
10002430:	8c08983a 	sll	r4,r17,r16
10002434:	8946d83a 	srl	r3,r17,r5
10002438:	9c20983a 	sll	r16,r19,r16
1000243c:	2008c03a 	cmpne	r4,r4,zero
10002440:	994ad83a 	srl	r5,r19,r5
10002444:	1c06b03a 	or	r3,r3,r16
10002448:	1922b03a 	or	r17,r3,r4
1000244c:	0021883a 	mov	r16,zero
10002450:	003fa306 	br	100022e0 <__alt_data_end+0xf80022e0>
10002454:	2880202c 	andhi	r2,r5,128
10002458:	9007883a 	mov	r3,r18
1000245c:	103fac1e 	bne	r2,zero,10002310 <__alt_data_end+0xf8002310>
10002460:	2804977a 	slli	r2,r5,29
10002464:	8822d0fa 	srli	r17,r17,3
10002468:	0101ffc4 	movi	r4,2047
1000246c:	280ad0fa 	srli	r5,r5,3
10002470:	1444b03a 	or	r2,r2,r17
10002474:	81002c26 	beq	r16,r4,10002528 <__adddf3+0x2c4>
10002478:	8120703a 	and	r16,r16,r4
1000247c:	01000434 	movhi	r4,16
10002480:	213fffc4 	addi	r4,r4,-1
10002484:	2908703a 	and	r4,r5,r4
10002488:	003fad06 	br	10002340 <__alt_data_end+0xf8002340>
1000248c:	8089c83a 	sub	r4,r16,r2
10002490:	01006a0e 	bge	zero,r4,1000263c <__adddf3+0x3d8>
10002494:	10003326 	beq	r2,zero,10002564 <__adddf3+0x300>
10002498:	0081ffc4 	movi	r2,2047
1000249c:	80bf9026 	beq	r16,r2,100022e0 <__alt_data_end+0xf80022e0>
100024a0:	42002034 	orhi	r8,r8,128
100024a4:	00800e04 	movi	r2,56
100024a8:	1100b116 	blt	r2,r4,10002770 <__adddf3+0x50c>
100024ac:	008007c4 	movi	r2,31
100024b0:	1100e216 	blt	r2,r4,1000283c <__adddf3+0x5d8>
100024b4:	00800804 	movi	r2,32
100024b8:	1105c83a 	sub	r2,r2,r4
100024bc:	4092983a 	sll	r9,r8,r2
100024c0:	310ed83a 	srl	r7,r6,r4
100024c4:	3084983a 	sll	r2,r6,r2
100024c8:	4110d83a 	srl	r8,r8,r4
100024cc:	49ccb03a 	or	r6,r9,r7
100024d0:	1004c03a 	cmpne	r2,r2,zero
100024d4:	308cb03a 	or	r6,r6,r2
100024d8:	344d883a 	add	r6,r6,r17
100024dc:	3463803a 	cmpltu	r17,r6,r17
100024e0:	414b883a 	add	r5,r8,r5
100024e4:	2c4b883a 	add	r5,r5,r17
100024e8:	3023883a 	mov	r17,r6
100024ec:	2880202c 	andhi	r2,r5,128
100024f0:	10002726 	beq	r2,zero,10002590 <__adddf3+0x32c>
100024f4:	84000044 	addi	r16,r16,1
100024f8:	0081ffc4 	movi	r2,2047
100024fc:	8080ae26 	beq	r16,r2,100027b8 <__adddf3+0x554>
10002500:	00bfe034 	movhi	r2,65408
10002504:	10bfffc4 	addi	r2,r2,-1
10002508:	288a703a 	and	r5,r5,r2
1000250c:	880cd07a 	srli	r6,r17,1
10002510:	280897fa 	slli	r4,r5,31
10002514:	88c0004c 	andi	r3,r17,1
10002518:	30e2b03a 	or	r17,r6,r3
1000251c:	280ad07a 	srli	r5,r5,1
10002520:	8922b03a 	or	r17,r17,r4
10002524:	003f6e06 	br	100022e0 <__alt_data_end+0xf80022e0>
10002528:	1148b03a 	or	r4,r2,r5
1000252c:	20003c26 	beq	r4,zero,10002620 <__adddf3+0x3bc>
10002530:	29000234 	orhi	r4,r5,8
10002534:	01400434 	movhi	r5,16
10002538:	297fffc4 	addi	r5,r5,-1
1000253c:	2148703a 	and	r4,r4,r5
10002540:	003f7f06 	br	10002340 <__alt_data_end+0xf8002340>
10002544:	18ffffc4 	addi	r3,r3,-1
10002548:	18004d1e 	bne	r3,zero,10002680 <__adddf3+0x41c>
1000254c:	898dc83a 	sub	r6,r17,r6
10002550:	89a3803a 	cmpltu	r17,r17,r6
10002554:	2a0bc83a 	sub	r5,r5,r8
10002558:	2c4bc83a 	sub	r5,r5,r17
1000255c:	3023883a 	mov	r17,r6
10002560:	003f9c06 	br	100023d4 <__alt_data_end+0xf80023d4>
10002564:	4184b03a 	or	r2,r8,r6
10002568:	103f5d26 	beq	r2,zero,100022e0 <__alt_data_end+0xf80022e0>
1000256c:	213fffc4 	addi	r4,r4,-1
10002570:	203fd926 	beq	r4,zero,100024d8 <__alt_data_end+0xf80024d8>
10002574:	0081ffc4 	movi	r2,2047
10002578:	80bfca1e 	bne	r16,r2,100024a4 <__alt_data_end+0xf80024a4>
1000257c:	003f5806 	br	100022e0 <__alt_data_end+0xf80022e0>
10002580:	10c8b03a 	or	r4,r2,r3
10002584:	20008b26 	beq	r4,zero,100027b4 <__adddf3+0x550>
10002588:	100b883a 	mov	r5,r2
1000258c:	1823883a 	mov	r17,r3
10002590:	888001cc 	andi	r2,r17,7
10002594:	103f541e 	bne	r2,zero,100022e8 <__alt_data_end+0xf80022e8>
10002598:	9007883a 	mov	r3,r18
1000259c:	003fb006 	br	10002460 <__alt_data_end+0xf8002460>
100025a0:	1800531e 	bne	r3,zero,100026f0 <__adddf3+0x48c>
100025a4:	80800044 	addi	r2,r16,1
100025a8:	1081ffcc 	andi	r2,r2,2047
100025ac:	00c00044 	movi	r3,1
100025b0:	1880990e 	bge	r3,r2,10002818 <__adddf3+0x5b4>
100025b4:	8985c83a 	sub	r2,r17,r6
100025b8:	8887803a 	cmpltu	r3,r17,r2
100025bc:	2a27c83a 	sub	r19,r5,r8
100025c0:	98e7c83a 	sub	r19,r19,r3
100025c4:	98c0202c 	andhi	r3,r19,128
100025c8:	18006226 	beq	r3,zero,10002754 <__adddf3+0x4f0>
100025cc:	3463c83a 	sub	r17,r6,r17
100025d0:	4151c83a 	sub	r8,r8,r5
100025d4:	344d803a 	cmpltu	r6,r6,r17
100025d8:	41a7c83a 	sub	r19,r8,r6
100025dc:	3825883a 	mov	r18,r7
100025e0:	983f821e 	bne	r19,zero,100023ec <__alt_data_end+0xf80023ec>
100025e4:	8809883a 	mov	r4,r17
100025e8:	00035280 	call	10003528 <__clzsi2>
100025ec:	10800804 	addi	r2,r2,32
100025f0:	10fffe04 	addi	r3,r2,-8
100025f4:	010007c4 	movi	r4,31
100025f8:	20ff810e 	bge	r4,r3,10002400 <__alt_data_end+0xf8002400>
100025fc:	14fff604 	addi	r19,r2,-40
10002600:	8ce6983a 	sll	r19,r17,r19
10002604:	0023883a 	mov	r17,zero
10002608:	1c3f840e 	bge	r3,r16,1000241c <__alt_data_end+0xf800241c>
1000260c:	017fe034 	movhi	r5,65408
10002610:	297fffc4 	addi	r5,r5,-1
10002614:	80e1c83a 	sub	r16,r16,r3
10002618:	994a703a 	and	r5,r19,r5
1000261c:	003f3006 	br	100022e0 <__alt_data_end+0xf80022e0>
10002620:	0009883a 	mov	r4,zero
10002624:	0005883a 	mov	r2,zero
10002628:	003f4506 	br	10002340 <__alt_data_end+0xf8002340>
1000262c:	418cb03a 	or	r6,r8,r6
10002630:	300cc03a 	cmpne	r6,r6,zero
10002634:	0007883a 	mov	r3,zero
10002638:	003f6106 	br	100023c0 <__alt_data_end+0xf80023c0>
1000263c:	2000921e 	bne	r4,zero,10002888 <__adddf3+0x624>
10002640:	80800044 	addi	r2,r16,1
10002644:	11c1ffcc 	andi	r7,r2,2047
10002648:	01000044 	movi	r4,1
1000264c:	21c0610e 	bge	r4,r7,100027d4 <__adddf3+0x570>
10002650:	0101ffc4 	movi	r4,2047
10002654:	1100a326 	beq	r2,r4,100028e4 <__adddf3+0x680>
10002658:	344d883a 	add	r6,r6,r17
1000265c:	3463803a 	cmpltu	r17,r6,r17
10002660:	414b883a 	add	r5,r8,r5
10002664:	2c4b883a 	add	r5,r5,r17
10002668:	282297fa 	slli	r17,r5,31
1000266c:	300cd07a 	srli	r6,r6,1
10002670:	280ad07a 	srli	r5,r5,1
10002674:	1021883a 	mov	r16,r2
10002678:	89a2b03a 	or	r17,r17,r6
1000267c:	003f1806 	br	100022e0 <__alt_data_end+0xf80022e0>
10002680:	0081ffc4 	movi	r2,2047
10002684:	80bf411e 	bne	r16,r2,1000238c <__alt_data_end+0xf800238c>
10002688:	003f1506 	br	100022e0 <__alt_data_end+0xf80022e0>
1000268c:	80bff844 	addi	r2,r16,-31
10002690:	00c00804 	movi	r3,32
10002694:	9884d83a 	srl	r2,r19,r2
10002698:	28c04a26 	beq	r5,r3,100027c4 <__adddf3+0x560>
1000269c:	00c00fc4 	movi	r3,63
100026a0:	1c21c83a 	sub	r16,r3,r16
100026a4:	9c26983a 	sll	r19,r19,r16
100026a8:	9c62b03a 	or	r17,r19,r17
100026ac:	8822c03a 	cmpne	r17,r17,zero
100026b0:	88a2b03a 	or	r17,r17,r2
100026b4:	000b883a 	mov	r5,zero
100026b8:	0021883a 	mov	r16,zero
100026bc:	003fb406 	br	10002590 <__alt_data_end+0xf8002590>
100026c0:	18bff804 	addi	r2,r3,-32
100026c4:	01000804 	movi	r4,32
100026c8:	4084d83a 	srl	r2,r8,r2
100026cc:	19003f26 	beq	r3,r4,100027cc <__adddf3+0x568>
100026d0:	01001004 	movi	r4,64
100026d4:	20c7c83a 	sub	r3,r4,r3
100026d8:	40d0983a 	sll	r8,r8,r3
100026dc:	418cb03a 	or	r6,r8,r6
100026e0:	300cc03a 	cmpne	r6,r6,zero
100026e4:	308cb03a 	or	r6,r6,r2
100026e8:	0007883a 	mov	r3,zero
100026ec:	003f3406 	br	100023c0 <__alt_data_end+0xf80023c0>
100026f0:	80002326 	beq	r16,zero,10002780 <__adddf3+0x51c>
100026f4:	0101ffc4 	movi	r4,2047
100026f8:	11005e26 	beq	r2,r4,10002874 <__adddf3+0x610>
100026fc:	00c7c83a 	sub	r3,zero,r3
10002700:	29402034 	orhi	r5,r5,128
10002704:	01000e04 	movi	r4,56
10002708:	20c07216 	blt	r4,r3,100028d4 <__adddf3+0x670>
1000270c:	010007c4 	movi	r4,31
10002710:	20c0ce16 	blt	r4,r3,10002a4c <__adddf3+0x7e8>
10002714:	01000804 	movi	r4,32
10002718:	20c9c83a 	sub	r4,r4,r3
1000271c:	2914983a 	sll	r10,r5,r4
10002720:	88d2d83a 	srl	r9,r17,r3
10002724:	8908983a 	sll	r4,r17,r4
10002728:	28c6d83a 	srl	r3,r5,r3
1000272c:	5262b03a 	or	r17,r10,r9
10002730:	2008c03a 	cmpne	r4,r4,zero
10002734:	8922b03a 	or	r17,r17,r4
10002738:	3463c83a 	sub	r17,r6,r17
1000273c:	40c7c83a 	sub	r3,r8,r3
10002740:	344d803a 	cmpltu	r6,r6,r17
10002744:	198bc83a 	sub	r5,r3,r6
10002748:	1021883a 	mov	r16,r2
1000274c:	3825883a 	mov	r18,r7
10002750:	003f2006 	br	100023d4 <__alt_data_end+0xf80023d4>
10002754:	9886b03a 	or	r3,r19,r2
10002758:	1800141e 	bne	r3,zero,100027ac <__adddf3+0x548>
1000275c:	0007883a 	mov	r3,zero
10002760:	000b883a 	mov	r5,zero
10002764:	0023883a 	mov	r17,zero
10002768:	0021883a 	mov	r16,zero
1000276c:	003f3c06 	br	10002460 <__alt_data_end+0xf8002460>
10002770:	418cb03a 	or	r6,r8,r6
10002774:	300cc03a 	cmpne	r6,r6,zero
10002778:	0011883a 	mov	r8,zero
1000277c:	003f5606 	br	100024d8 <__alt_data_end+0xf80024d8>
10002780:	2c48b03a 	or	r4,r5,r17
10002784:	20003b26 	beq	r4,zero,10002874 <__adddf3+0x610>
10002788:	00c6303a 	nor	r3,zero,r3
1000278c:	1800371e 	bne	r3,zero,1000286c <__adddf3+0x608>
10002790:	3463c83a 	sub	r17,r6,r17
10002794:	414bc83a 	sub	r5,r8,r5
10002798:	344d803a 	cmpltu	r6,r6,r17
1000279c:	298bc83a 	sub	r5,r5,r6
100027a0:	1021883a 	mov	r16,r2
100027a4:	3825883a 	mov	r18,r7
100027a8:	003f0a06 	br	100023d4 <__alt_data_end+0xf80023d4>
100027ac:	1023883a 	mov	r17,r2
100027b0:	003f0d06 	br	100023e8 <__alt_data_end+0xf80023e8>
100027b4:	0007883a 	mov	r3,zero
100027b8:	000b883a 	mov	r5,zero
100027bc:	0023883a 	mov	r17,zero
100027c0:	003f2706 	br	10002460 <__alt_data_end+0xf8002460>
100027c4:	0027883a 	mov	r19,zero
100027c8:	003fb706 	br	100026a8 <__alt_data_end+0xf80026a8>
100027cc:	0011883a 	mov	r8,zero
100027d0:	003fc206 	br	100026dc <__alt_data_end+0xf80026dc>
100027d4:	2c44b03a 	or	r2,r5,r17
100027d8:	8000871e 	bne	r16,zero,100029f8 <__adddf3+0x794>
100027dc:	1000b126 	beq	r2,zero,10002aa4 <__adddf3+0x840>
100027e0:	4184b03a 	or	r2,r8,r6
100027e4:	103ebe26 	beq	r2,zero,100022e0 <__alt_data_end+0xf80022e0>
100027e8:	3445883a 	add	r2,r6,r17
100027ec:	1463803a 	cmpltu	r17,r2,r17
100027f0:	414b883a 	add	r5,r8,r5
100027f4:	2c4b883a 	add	r5,r5,r17
100027f8:	28c0202c 	andhi	r3,r5,128
100027fc:	1023883a 	mov	r17,r2
10002800:	183f6326 	beq	r3,zero,10002590 <__alt_data_end+0xf8002590>
10002804:	00bfe034 	movhi	r2,65408
10002808:	10bfffc4 	addi	r2,r2,-1
1000280c:	2021883a 	mov	r16,r4
10002810:	288a703a 	and	r5,r5,r2
10002814:	003eb206 	br	100022e0 <__alt_data_end+0xf80022e0>
10002818:	2c44b03a 	or	r2,r5,r17
1000281c:	8000251e 	bne	r16,zero,100028b4 <__adddf3+0x650>
10002820:	10004b1e 	bne	r2,zero,10002950 <__adddf3+0x6ec>
10002824:	4184b03a 	or	r2,r8,r6
10002828:	103fe226 	beq	r2,zero,100027b4 <__alt_data_end+0xf80027b4>
1000282c:	400b883a 	mov	r5,r8
10002830:	3023883a 	mov	r17,r6
10002834:	3825883a 	mov	r18,r7
10002838:	003ea906 	br	100022e0 <__alt_data_end+0xf80022e0>
1000283c:	20bff804 	addi	r2,r4,-32
10002840:	01c00804 	movi	r7,32
10002844:	4084d83a 	srl	r2,r8,r2
10002848:	21c07e26 	beq	r4,r7,10002a44 <__adddf3+0x7e0>
1000284c:	01c01004 	movi	r7,64
10002850:	3909c83a 	sub	r4,r7,r4
10002854:	4110983a 	sll	r8,r8,r4
10002858:	418cb03a 	or	r6,r8,r6
1000285c:	300cc03a 	cmpne	r6,r6,zero
10002860:	308cb03a 	or	r6,r6,r2
10002864:	0011883a 	mov	r8,zero
10002868:	003f1b06 	br	100024d8 <__alt_data_end+0xf80024d8>
1000286c:	0101ffc4 	movi	r4,2047
10002870:	113fa41e 	bne	r2,r4,10002704 <__alt_data_end+0xf8002704>
10002874:	400b883a 	mov	r5,r8
10002878:	3023883a 	mov	r17,r6
1000287c:	1021883a 	mov	r16,r2
10002880:	3825883a 	mov	r18,r7
10002884:	003e9606 	br	100022e0 <__alt_data_end+0xf80022e0>
10002888:	80001a1e 	bne	r16,zero,100028f4 <__adddf3+0x690>
1000288c:	2c4eb03a 	or	r7,r5,r17
10002890:	38005526 	beq	r7,zero,100029e8 <__adddf3+0x784>
10002894:	0108303a 	nor	r4,zero,r4
10002898:	2000511e 	bne	r4,zero,100029e0 <__adddf3+0x77c>
1000289c:	89a3883a 	add	r17,r17,r6
100028a0:	414b883a 	add	r5,r8,r5
100028a4:	898d803a 	cmpltu	r6,r17,r6
100028a8:	298b883a 	add	r5,r5,r6
100028ac:	1021883a 	mov	r16,r2
100028b0:	003f0e06 	br	100024ec <__alt_data_end+0xf80024ec>
100028b4:	1000341e 	bne	r2,zero,10002988 <__adddf3+0x724>
100028b8:	4184b03a 	or	r2,r8,r6
100028bc:	10006f26 	beq	r2,zero,10002a7c <__adddf3+0x818>
100028c0:	400b883a 	mov	r5,r8
100028c4:	3023883a 	mov	r17,r6
100028c8:	3825883a 	mov	r18,r7
100028cc:	0401ffc4 	movi	r16,2047
100028d0:	003e8306 	br	100022e0 <__alt_data_end+0xf80022e0>
100028d4:	2c62b03a 	or	r17,r5,r17
100028d8:	8822c03a 	cmpne	r17,r17,zero
100028dc:	0007883a 	mov	r3,zero
100028e0:	003f9506 	br	10002738 <__alt_data_end+0xf8002738>
100028e4:	1021883a 	mov	r16,r2
100028e8:	000b883a 	mov	r5,zero
100028ec:	0023883a 	mov	r17,zero
100028f0:	003edb06 	br	10002460 <__alt_data_end+0xf8002460>
100028f4:	01c1ffc4 	movi	r7,2047
100028f8:	11c03b26 	beq	r2,r7,100029e8 <__adddf3+0x784>
100028fc:	0109c83a 	sub	r4,zero,r4
10002900:	29402034 	orhi	r5,r5,128
10002904:	01c00e04 	movi	r7,56
10002908:	39006216 	blt	r7,r4,10002a94 <__adddf3+0x830>
1000290c:	01c007c4 	movi	r7,31
10002910:	39006b16 	blt	r7,r4,10002ac0 <__adddf3+0x85c>
10002914:	01c00804 	movi	r7,32
10002918:	390fc83a 	sub	r7,r7,r4
1000291c:	29d4983a 	sll	r10,r5,r7
10002920:	8912d83a 	srl	r9,r17,r4
10002924:	89ce983a 	sll	r7,r17,r7
10002928:	2908d83a 	srl	r4,r5,r4
1000292c:	5262b03a 	or	r17,r10,r9
10002930:	380ac03a 	cmpne	r5,r7,zero
10002934:	8962b03a 	or	r17,r17,r5
10002938:	89a3883a 	add	r17,r17,r6
1000293c:	2211883a 	add	r8,r4,r8
10002940:	898d803a 	cmpltu	r6,r17,r6
10002944:	418b883a 	add	r5,r8,r6
10002948:	1021883a 	mov	r16,r2
1000294c:	003ee706 	br	100024ec <__alt_data_end+0xf80024ec>
10002950:	4184b03a 	or	r2,r8,r6
10002954:	103e6226 	beq	r2,zero,100022e0 <__alt_data_end+0xf80022e0>
10002958:	8987c83a 	sub	r3,r17,r6
1000295c:	88c9803a 	cmpltu	r4,r17,r3
10002960:	2a05c83a 	sub	r2,r5,r8
10002964:	1105c83a 	sub	r2,r2,r4
10002968:	1100202c 	andhi	r4,r2,128
1000296c:	203f0426 	beq	r4,zero,10002580 <__alt_data_end+0xf8002580>
10002970:	3463c83a 	sub	r17,r6,r17
10002974:	414bc83a 	sub	r5,r8,r5
10002978:	344d803a 	cmpltu	r6,r6,r17
1000297c:	298bc83a 	sub	r5,r5,r6
10002980:	3825883a 	mov	r18,r7
10002984:	003e5606 	br	100022e0 <__alt_data_end+0xf80022e0>
10002988:	4184b03a 	or	r2,r8,r6
1000298c:	10002b26 	beq	r2,zero,10002a3c <__adddf3+0x7d8>
10002990:	2804d0fa 	srli	r2,r5,3
10002994:	8822d0fa 	srli	r17,r17,3
10002998:	280a977a 	slli	r5,r5,29
1000299c:	10c0022c 	andhi	r3,r2,8
100029a0:	2c62b03a 	or	r17,r5,r17
100029a4:	18000826 	beq	r3,zero,100029c8 <__adddf3+0x764>
100029a8:	4008d0fa 	srli	r4,r8,3
100029ac:	20c0022c 	andhi	r3,r4,8
100029b0:	1800051e 	bne	r3,zero,100029c8 <__adddf3+0x764>
100029b4:	300cd0fa 	srli	r6,r6,3
100029b8:	4010977a 	slli	r8,r8,29
100029bc:	2005883a 	mov	r2,r4
100029c0:	3825883a 	mov	r18,r7
100029c4:	41a2b03a 	or	r17,r8,r6
100029c8:	880ad77a 	srli	r5,r17,29
100029cc:	100490fa 	slli	r2,r2,3
100029d0:	882290fa 	slli	r17,r17,3
100029d4:	0401ffc4 	movi	r16,2047
100029d8:	288ab03a 	or	r5,r5,r2
100029dc:	003e4006 	br	100022e0 <__alt_data_end+0xf80022e0>
100029e0:	01c1ffc4 	movi	r7,2047
100029e4:	11ffc71e 	bne	r2,r7,10002904 <__alt_data_end+0xf8002904>
100029e8:	400b883a 	mov	r5,r8
100029ec:	3023883a 	mov	r17,r6
100029f0:	1021883a 	mov	r16,r2
100029f4:	003e3a06 	br	100022e0 <__alt_data_end+0xf80022e0>
100029f8:	10002d26 	beq	r2,zero,10002ab0 <__adddf3+0x84c>
100029fc:	4184b03a 	or	r2,r8,r6
10002a00:	10000e26 	beq	r2,zero,10002a3c <__adddf3+0x7d8>
10002a04:	2804d0fa 	srli	r2,r5,3
10002a08:	8822d0fa 	srli	r17,r17,3
10002a0c:	280a977a 	slli	r5,r5,29
10002a10:	10c0022c 	andhi	r3,r2,8
10002a14:	2c62b03a 	or	r17,r5,r17
10002a18:	183feb26 	beq	r3,zero,100029c8 <__alt_data_end+0xf80029c8>
10002a1c:	4008d0fa 	srli	r4,r8,3
10002a20:	20c0022c 	andhi	r3,r4,8
10002a24:	183fe81e 	bne	r3,zero,100029c8 <__alt_data_end+0xf80029c8>
10002a28:	300cd0fa 	srli	r6,r6,3
10002a2c:	4010977a 	slli	r8,r8,29
10002a30:	2005883a 	mov	r2,r4
10002a34:	41a2b03a 	or	r17,r8,r6
10002a38:	003fe306 	br	100029c8 <__alt_data_end+0xf80029c8>
10002a3c:	0401ffc4 	movi	r16,2047
10002a40:	003e2706 	br	100022e0 <__alt_data_end+0xf80022e0>
10002a44:	0011883a 	mov	r8,zero
10002a48:	003f8306 	br	10002858 <__alt_data_end+0xf8002858>
10002a4c:	193ff804 	addi	r4,r3,-32
10002a50:	02400804 	movi	r9,32
10002a54:	2908d83a 	srl	r4,r5,r4
10002a58:	1a402526 	beq	r3,r9,10002af0 <__adddf3+0x88c>
10002a5c:	02401004 	movi	r9,64
10002a60:	48c7c83a 	sub	r3,r9,r3
10002a64:	28ca983a 	sll	r5,r5,r3
10002a68:	2c62b03a 	or	r17,r5,r17
10002a6c:	8822c03a 	cmpne	r17,r17,zero
10002a70:	8922b03a 	or	r17,r17,r4
10002a74:	0007883a 	mov	r3,zero
10002a78:	003f2f06 	br	10002738 <__alt_data_end+0xf8002738>
10002a7c:	01402034 	movhi	r5,128
10002a80:	0007883a 	mov	r3,zero
10002a84:	297fffc4 	addi	r5,r5,-1
10002a88:	047ffe04 	movi	r17,-8
10002a8c:	0401ffc4 	movi	r16,2047
10002a90:	003e7306 	br	10002460 <__alt_data_end+0xf8002460>
10002a94:	2c62b03a 	or	r17,r5,r17
10002a98:	8822c03a 	cmpne	r17,r17,zero
10002a9c:	0009883a 	mov	r4,zero
10002aa0:	003fa506 	br	10002938 <__alt_data_end+0xf8002938>
10002aa4:	400b883a 	mov	r5,r8
10002aa8:	3023883a 	mov	r17,r6
10002aac:	003e0c06 	br	100022e0 <__alt_data_end+0xf80022e0>
10002ab0:	400b883a 	mov	r5,r8
10002ab4:	3023883a 	mov	r17,r6
10002ab8:	0401ffc4 	movi	r16,2047
10002abc:	003e0806 	br	100022e0 <__alt_data_end+0xf80022e0>
10002ac0:	21fff804 	addi	r7,r4,-32
10002ac4:	02400804 	movi	r9,32
10002ac8:	29ced83a 	srl	r7,r5,r7
10002acc:	22400a26 	beq	r4,r9,10002af8 <__adddf3+0x894>
10002ad0:	02401004 	movi	r9,64
10002ad4:	4909c83a 	sub	r4,r9,r4
10002ad8:	290a983a 	sll	r5,r5,r4
10002adc:	2c62b03a 	or	r17,r5,r17
10002ae0:	8822c03a 	cmpne	r17,r17,zero
10002ae4:	89e2b03a 	or	r17,r17,r7
10002ae8:	0009883a 	mov	r4,zero
10002aec:	003f9206 	br	10002938 <__alt_data_end+0xf8002938>
10002af0:	000b883a 	mov	r5,zero
10002af4:	003fdc06 	br	10002a68 <__alt_data_end+0xf8002a68>
10002af8:	000b883a 	mov	r5,zero
10002afc:	003ff706 	br	10002adc <__alt_data_end+0xf8002adc>

10002b00 <__subdf3>:
10002b00:	00c00434 	movhi	r3,16
10002b04:	18ffffc4 	addi	r3,r3,-1
10002b08:	defffb04 	addi	sp,sp,-20
10002b0c:	28d2703a 	and	r9,r5,r3
10002b10:	3814d53a 	srli	r10,r7,20
10002b14:	38c6703a 	and	r3,r7,r3
10002b18:	3004d77a 	srli	r2,r6,29
10002b1c:	dc800215 	stw	r18,8(sp)
10002b20:	dc000015 	stw	r16,0(sp)
10002b24:	2824d7fa 	srli	r18,r5,31
10002b28:	2820d53a 	srli	r16,r5,20
10002b2c:	481290fa 	slli	r9,r9,3
10002b30:	200ad77a 	srli	r5,r4,29
10002b34:	180690fa 	slli	r3,r3,3
10002b38:	dc400115 	stw	r17,4(sp)
10002b3c:	dfc00415 	stw	ra,16(sp)
10002b40:	202290fa 	slli	r17,r4,3
10002b44:	dcc00315 	stw	r19,12(sp)
10002b48:	5281ffcc 	andi	r10,r10,2047
10002b4c:	0101ffc4 	movi	r4,2047
10002b50:	9011883a 	mov	r8,r18
10002b54:	8401ffcc 	andi	r16,r16,2047
10002b58:	94803fcc 	andi	r18,r18,255
10002b5c:	494ab03a 	or	r5,r9,r5
10002b60:	380ed7fa 	srli	r7,r7,31
10002b64:	1886b03a 	or	r3,r3,r2
10002b68:	300c90fa 	slli	r6,r6,3
10002b6c:	51009026 	beq	r10,r4,10002db0 <__subdf3+0x2b0>
10002b70:	39c0005c 	xori	r7,r7,1
10002b74:	8285c83a 	sub	r2,r16,r10
10002b78:	91c06f26 	beq	r18,r7,10002d38 <__subdf3+0x238>
10002b7c:	0080b10e 	bge	zero,r2,10002e44 <__subdf3+0x344>
10002b80:	50002a1e 	bne	r10,zero,10002c2c <__subdf3+0x12c>
10002b84:	1988b03a 	or	r4,r3,r6
10002b88:	2000941e 	bne	r4,zero,10002ddc <__subdf3+0x2dc>
10002b8c:	888001cc 	andi	r2,r17,7
10002b90:	10005b26 	beq	r2,zero,10002d00 <__subdf3+0x200>
10002b94:	88c003cc 	andi	r3,r17,15
10002b98:	00800104 	movi	r2,4
10002b9c:	18805826 	beq	r3,r2,10002d00 <__subdf3+0x200>
10002ba0:	88c00104 	addi	r3,r17,4
10002ba4:	1c63803a 	cmpltu	r17,r3,r17
10002ba8:	2c4b883a 	add	r5,r5,r17
10002bac:	2880202c 	andhi	r2,r5,128
10002bb0:	9200004c 	andi	r8,r18,1
10002bb4:	1823883a 	mov	r17,r3
10002bb8:	10005426 	beq	r2,zero,10002d0c <__subdf3+0x20c>
10002bbc:	84000044 	addi	r16,r16,1
10002bc0:	0081ffc4 	movi	r2,2047
10002bc4:	8080bf26 	beq	r16,r2,10002ec4 <__subdf3+0x3c4>
10002bc8:	013fe034 	movhi	r4,65408
10002bcc:	213fffc4 	addi	r4,r4,-1
10002bd0:	290a703a 	and	r5,r5,r4
10002bd4:	2804977a 	slli	r2,r5,29
10002bd8:	280a927a 	slli	r5,r5,9
10002bdc:	8822d0fa 	srli	r17,r17,3
10002be0:	8401ffcc 	andi	r16,r16,2047
10002be4:	2808d33a 	srli	r4,r5,12
10002be8:	1444b03a 	or	r2,r2,r17
10002bec:	8401ffcc 	andi	r16,r16,2047
10002bf0:	800a953a 	slli	r5,r16,20
10002bf4:	40c03fcc 	andi	r3,r8,255
10002bf8:	04000434 	movhi	r16,16
10002bfc:	180697fa 	slli	r3,r3,31
10002c00:	843fffc4 	addi	r16,r16,-1
10002c04:	2420703a 	and	r16,r4,r16
10002c08:	8160b03a 	or	r16,r16,r5
10002c0c:	80c6b03a 	or	r3,r16,r3
10002c10:	dfc00417 	ldw	ra,16(sp)
10002c14:	dcc00317 	ldw	r19,12(sp)
10002c18:	dc800217 	ldw	r18,8(sp)
10002c1c:	dc400117 	ldw	r17,4(sp)
10002c20:	dc000017 	ldw	r16,0(sp)
10002c24:	dec00504 	addi	sp,sp,20
10002c28:	f800283a 	ret
10002c2c:	0101ffc4 	movi	r4,2047
10002c30:	813fd626 	beq	r16,r4,10002b8c <__alt_data_end+0xf8002b8c>
10002c34:	18c02034 	orhi	r3,r3,128
10002c38:	01000e04 	movi	r4,56
10002c3c:	2080a416 	blt	r4,r2,10002ed0 <__subdf3+0x3d0>
10002c40:	010007c4 	movi	r4,31
10002c44:	2080c716 	blt	r4,r2,10002f64 <__subdf3+0x464>
10002c48:	01000804 	movi	r4,32
10002c4c:	2089c83a 	sub	r4,r4,r2
10002c50:	1910983a 	sll	r8,r3,r4
10002c54:	308ed83a 	srl	r7,r6,r2
10002c58:	3108983a 	sll	r4,r6,r4
10002c5c:	1884d83a 	srl	r2,r3,r2
10002c60:	41ccb03a 	or	r6,r8,r7
10002c64:	2008c03a 	cmpne	r4,r4,zero
10002c68:	310cb03a 	or	r6,r6,r4
10002c6c:	898dc83a 	sub	r6,r17,r6
10002c70:	89a3803a 	cmpltu	r17,r17,r6
10002c74:	288bc83a 	sub	r5,r5,r2
10002c78:	2c4bc83a 	sub	r5,r5,r17
10002c7c:	3023883a 	mov	r17,r6
10002c80:	2880202c 	andhi	r2,r5,128
10002c84:	10006b26 	beq	r2,zero,10002e34 <__subdf3+0x334>
10002c88:	04c02034 	movhi	r19,128
10002c8c:	9cffffc4 	addi	r19,r19,-1
10002c90:	2ce6703a 	and	r19,r5,r19
10002c94:	98007c26 	beq	r19,zero,10002e88 <__subdf3+0x388>
10002c98:	9809883a 	mov	r4,r19
10002c9c:	00035280 	call	10003528 <__clzsi2>
10002ca0:	10fffe04 	addi	r3,r2,-8
10002ca4:	010007c4 	movi	r4,31
10002ca8:	20c07d16 	blt	r4,r3,10002ea0 <__subdf3+0x3a0>
10002cac:	01400a04 	movi	r5,40
10002cb0:	2885c83a 	sub	r2,r5,r2
10002cb4:	888ad83a 	srl	r5,r17,r2
10002cb8:	98e6983a 	sll	r19,r19,r3
10002cbc:	88e2983a 	sll	r17,r17,r3
10002cc0:	2ce6b03a 	or	r19,r5,r19
10002cc4:	1c007a16 	blt	r3,r16,10002eb0 <__subdf3+0x3b0>
10002cc8:	1c21c83a 	sub	r16,r3,r16
10002ccc:	81400044 	addi	r5,r16,1
10002cd0:	00c007c4 	movi	r3,31
10002cd4:	19409616 	blt	r3,r5,10002f30 <__subdf3+0x430>
10002cd8:	1c21c83a 	sub	r16,r3,r16
10002cdc:	8c08983a 	sll	r4,r17,r16
10002ce0:	8946d83a 	srl	r3,r17,r5
10002ce4:	9c20983a 	sll	r16,r19,r16
10002ce8:	2008c03a 	cmpne	r4,r4,zero
10002cec:	994ad83a 	srl	r5,r19,r5
10002cf0:	1c06b03a 	or	r3,r3,r16
10002cf4:	1922b03a 	or	r17,r3,r4
10002cf8:	0021883a 	mov	r16,zero
10002cfc:	003fa306 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002d00:	2880202c 	andhi	r2,r5,128
10002d04:	9200004c 	andi	r8,r18,1
10002d08:	103fac1e 	bne	r2,zero,10002bbc <__alt_data_end+0xf8002bbc>
10002d0c:	2804977a 	slli	r2,r5,29
10002d10:	8822d0fa 	srli	r17,r17,3
10002d14:	00c1ffc4 	movi	r3,2047
10002d18:	280ad0fa 	srli	r5,r5,3
10002d1c:	1444b03a 	or	r2,r2,r17
10002d20:	80c02726 	beq	r16,r3,10002dc0 <__subdf3+0x2c0>
10002d24:	01000434 	movhi	r4,16
10002d28:	213fffc4 	addi	r4,r4,-1
10002d2c:	80e0703a 	and	r16,r16,r3
10002d30:	2908703a 	and	r4,r5,r4
10002d34:	003fad06 	br	10002bec <__alt_data_end+0xf8002bec>
10002d38:	0080690e 	bge	zero,r2,10002ee0 <__subdf3+0x3e0>
10002d3c:	50002f26 	beq	r10,zero,10002dfc <__subdf3+0x2fc>
10002d40:	0101ffc4 	movi	r4,2047
10002d44:	813f9126 	beq	r16,r4,10002b8c <__alt_data_end+0xf8002b8c>
10002d48:	18c02034 	orhi	r3,r3,128
10002d4c:	01000e04 	movi	r4,56
10002d50:	2080b00e 	bge	r4,r2,10003014 <__subdf3+0x514>
10002d54:	198cb03a 	or	r6,r3,r6
10002d58:	300ec03a 	cmpne	r7,r6,zero
10002d5c:	0005883a 	mov	r2,zero
10002d60:	3c4f883a 	add	r7,r7,r17
10002d64:	3c63803a 	cmpltu	r17,r7,r17
10002d68:	114b883a 	add	r5,r2,r5
10002d6c:	2c4b883a 	add	r5,r5,r17
10002d70:	3823883a 	mov	r17,r7
10002d74:	2880202c 	andhi	r2,r5,128
10002d78:	10002e26 	beq	r2,zero,10002e34 <__subdf3+0x334>
10002d7c:	84000044 	addi	r16,r16,1
10002d80:	0081ffc4 	movi	r2,2047
10002d84:	8080de26 	beq	r16,r2,10003100 <__subdf3+0x600>
10002d88:	00bfe034 	movhi	r2,65408
10002d8c:	10bfffc4 	addi	r2,r2,-1
10002d90:	288a703a 	and	r5,r5,r2
10002d94:	880cd07a 	srli	r6,r17,1
10002d98:	280897fa 	slli	r4,r5,31
10002d9c:	88c0004c 	andi	r3,r17,1
10002da0:	30e2b03a 	or	r17,r6,r3
10002da4:	280ad07a 	srli	r5,r5,1
10002da8:	8922b03a 	or	r17,r17,r4
10002dac:	003f7706 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002db0:	1984b03a 	or	r2,r3,r6
10002db4:	103f6e26 	beq	r2,zero,10002b70 <__alt_data_end+0xf8002b70>
10002db8:	39c03fcc 	andi	r7,r7,255
10002dbc:	003f6d06 	br	10002b74 <__alt_data_end+0xf8002b74>
10002dc0:	1146b03a 	or	r3,r2,r5
10002dc4:	18003f26 	beq	r3,zero,10002ec4 <__subdf3+0x3c4>
10002dc8:	00c00434 	movhi	r3,16
10002dcc:	29000234 	orhi	r4,r5,8
10002dd0:	18ffffc4 	addi	r3,r3,-1
10002dd4:	20c8703a 	and	r4,r4,r3
10002dd8:	003f8406 	br	10002bec <__alt_data_end+0xf8002bec>
10002ddc:	10bfffc4 	addi	r2,r2,-1
10002de0:	1000501e 	bne	r2,zero,10002f24 <__subdf3+0x424>
10002de4:	898fc83a 	sub	r7,r17,r6
10002de8:	89e3803a 	cmpltu	r17,r17,r7
10002dec:	28cbc83a 	sub	r5,r5,r3
10002df0:	2c4bc83a 	sub	r5,r5,r17
10002df4:	3823883a 	mov	r17,r7
10002df8:	003fa106 	br	10002c80 <__alt_data_end+0xf8002c80>
10002dfc:	1988b03a 	or	r4,r3,r6
10002e00:	203f6226 	beq	r4,zero,10002b8c <__alt_data_end+0xf8002b8c>
10002e04:	10bfffc4 	addi	r2,r2,-1
10002e08:	10009b1e 	bne	r2,zero,10003078 <__subdf3+0x578>
10002e0c:	344d883a 	add	r6,r6,r17
10002e10:	3463803a 	cmpltu	r17,r6,r17
10002e14:	194b883a 	add	r5,r3,r5
10002e18:	2c4b883a 	add	r5,r5,r17
10002e1c:	3023883a 	mov	r17,r6
10002e20:	003fd406 	br	10002d74 <__alt_data_end+0xf8002d74>
10002e24:	1106b03a 	or	r3,r2,r4
10002e28:	1800b426 	beq	r3,zero,100030fc <__subdf3+0x5fc>
10002e2c:	100b883a 	mov	r5,r2
10002e30:	2023883a 	mov	r17,r4
10002e34:	888001cc 	andi	r2,r17,7
10002e38:	103f561e 	bne	r2,zero,10002b94 <__alt_data_end+0xf8002b94>
10002e3c:	9200004c 	andi	r8,r18,1
10002e40:	003fb206 	br	10002d0c <__alt_data_end+0xf8002d0c>
10002e44:	1000531e 	bne	r2,zero,10002f94 <__subdf3+0x494>
10002e48:	80800044 	addi	r2,r16,1
10002e4c:	1081ffcc 	andi	r2,r2,2047
10002e50:	01000044 	movi	r4,1
10002e54:	2080a00e 	bge	r4,r2,100030d8 <__subdf3+0x5d8>
10002e58:	8985c83a 	sub	r2,r17,r6
10002e5c:	8889803a 	cmpltu	r4,r17,r2
10002e60:	28e7c83a 	sub	r19,r5,r3
10002e64:	9927c83a 	sub	r19,r19,r4
10002e68:	9900202c 	andhi	r4,r19,128
10002e6c:	20006226 	beq	r4,zero,10002ff8 <__subdf3+0x4f8>
10002e70:	3463c83a 	sub	r17,r6,r17
10002e74:	194bc83a 	sub	r5,r3,r5
10002e78:	344d803a 	cmpltu	r6,r6,r17
10002e7c:	29a7c83a 	sub	r19,r5,r6
10002e80:	3825883a 	mov	r18,r7
10002e84:	983f841e 	bne	r19,zero,10002c98 <__alt_data_end+0xf8002c98>
10002e88:	8809883a 	mov	r4,r17
10002e8c:	00035280 	call	10003528 <__clzsi2>
10002e90:	10800804 	addi	r2,r2,32
10002e94:	10fffe04 	addi	r3,r2,-8
10002e98:	010007c4 	movi	r4,31
10002e9c:	20ff830e 	bge	r4,r3,10002cac <__alt_data_end+0xf8002cac>
10002ea0:	14fff604 	addi	r19,r2,-40
10002ea4:	8ce6983a 	sll	r19,r17,r19
10002ea8:	0023883a 	mov	r17,zero
10002eac:	1c3f860e 	bge	r3,r16,10002cc8 <__alt_data_end+0xf8002cc8>
10002eb0:	017fe034 	movhi	r5,65408
10002eb4:	297fffc4 	addi	r5,r5,-1
10002eb8:	80e1c83a 	sub	r16,r16,r3
10002ebc:	994a703a 	and	r5,r19,r5
10002ec0:	003f3206 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002ec4:	0009883a 	mov	r4,zero
10002ec8:	0005883a 	mov	r2,zero
10002ecc:	003f4706 	br	10002bec <__alt_data_end+0xf8002bec>
10002ed0:	198cb03a 	or	r6,r3,r6
10002ed4:	300cc03a 	cmpne	r6,r6,zero
10002ed8:	0005883a 	mov	r2,zero
10002edc:	003f6306 	br	10002c6c <__alt_data_end+0xf8002c6c>
10002ee0:	10009d1e 	bne	r2,zero,10003158 <__subdf3+0x658>
10002ee4:	81c00044 	addi	r7,r16,1
10002ee8:	3881ffcc 	andi	r2,r7,2047
10002eec:	02400044 	movi	r9,1
10002ef0:	4880680e 	bge	r9,r2,10003094 <__subdf3+0x594>
10002ef4:	0081ffc4 	movi	r2,2047
10002ef8:	3880ae26 	beq	r7,r2,100031b4 <__subdf3+0x6b4>
10002efc:	344d883a 	add	r6,r6,r17
10002f00:	3463803a 	cmpltu	r17,r6,r17
10002f04:	194b883a 	add	r5,r3,r5
10002f08:	2c4b883a 	add	r5,r5,r17
10002f0c:	282297fa 	slli	r17,r5,31
10002f10:	300cd07a 	srli	r6,r6,1
10002f14:	280ad07a 	srli	r5,r5,1
10002f18:	3821883a 	mov	r16,r7
10002f1c:	89a2b03a 	or	r17,r17,r6
10002f20:	003f1a06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002f24:	0101ffc4 	movi	r4,2047
10002f28:	813f431e 	bne	r16,r4,10002c38 <__alt_data_end+0xf8002c38>
10002f2c:	003f1706 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002f30:	80bff844 	addi	r2,r16,-31
10002f34:	00c00804 	movi	r3,32
10002f38:	9884d83a 	srl	r2,r19,r2
10002f3c:	28c05126 	beq	r5,r3,10003084 <__subdf3+0x584>
10002f40:	00c00fc4 	movi	r3,63
10002f44:	1c21c83a 	sub	r16,r3,r16
10002f48:	9c26983a 	sll	r19,r19,r16
10002f4c:	9c62b03a 	or	r17,r19,r17
10002f50:	8822c03a 	cmpne	r17,r17,zero
10002f54:	88a2b03a 	or	r17,r17,r2
10002f58:	000b883a 	mov	r5,zero
10002f5c:	0021883a 	mov	r16,zero
10002f60:	003fb406 	br	10002e34 <__alt_data_end+0xf8002e34>
10002f64:	113ff804 	addi	r4,r2,-32
10002f68:	01c00804 	movi	r7,32
10002f6c:	1908d83a 	srl	r4,r3,r4
10002f70:	11c04626 	beq	r2,r7,1000308c <__subdf3+0x58c>
10002f74:	01c01004 	movi	r7,64
10002f78:	3885c83a 	sub	r2,r7,r2
10002f7c:	1884983a 	sll	r2,r3,r2
10002f80:	118cb03a 	or	r6,r2,r6
10002f84:	300cc03a 	cmpne	r6,r6,zero
10002f88:	310cb03a 	or	r6,r6,r4
10002f8c:	0005883a 	mov	r2,zero
10002f90:	003f3606 	br	10002c6c <__alt_data_end+0xf8002c6c>
10002f94:	80002b26 	beq	r16,zero,10003044 <__subdf3+0x544>
10002f98:	0101ffc4 	movi	r4,2047
10002f9c:	51006926 	beq	r10,r4,10003144 <__subdf3+0x644>
10002fa0:	0085c83a 	sub	r2,zero,r2
10002fa4:	29402034 	orhi	r5,r5,128
10002fa8:	01000e04 	movi	r4,56
10002fac:	20807d16 	blt	r4,r2,100031a4 <__subdf3+0x6a4>
10002fb0:	010007c4 	movi	r4,31
10002fb4:	2080d916 	blt	r4,r2,1000331c <__subdf3+0x81c>
10002fb8:	01000804 	movi	r4,32
10002fbc:	2089c83a 	sub	r4,r4,r2
10002fc0:	2912983a 	sll	r9,r5,r4
10002fc4:	8890d83a 	srl	r8,r17,r2
10002fc8:	8908983a 	sll	r4,r17,r4
10002fcc:	2884d83a 	srl	r2,r5,r2
10002fd0:	4a22b03a 	or	r17,r9,r8
10002fd4:	2008c03a 	cmpne	r4,r4,zero
10002fd8:	8922b03a 	or	r17,r17,r4
10002fdc:	3463c83a 	sub	r17,r6,r17
10002fe0:	1885c83a 	sub	r2,r3,r2
10002fe4:	344d803a 	cmpltu	r6,r6,r17
10002fe8:	118bc83a 	sub	r5,r2,r6
10002fec:	5021883a 	mov	r16,r10
10002ff0:	3825883a 	mov	r18,r7
10002ff4:	003f2206 	br	10002c80 <__alt_data_end+0xf8002c80>
10002ff8:	9886b03a 	or	r3,r19,r2
10002ffc:	18001c1e 	bne	r3,zero,10003070 <__subdf3+0x570>
10003000:	0011883a 	mov	r8,zero
10003004:	000b883a 	mov	r5,zero
10003008:	0023883a 	mov	r17,zero
1000300c:	0021883a 	mov	r16,zero
10003010:	003f3e06 	br	10002d0c <__alt_data_end+0xf8002d0c>
10003014:	010007c4 	movi	r4,31
10003018:	20803c16 	blt	r4,r2,1000310c <__subdf3+0x60c>
1000301c:	01000804 	movi	r4,32
10003020:	2089c83a 	sub	r4,r4,r2
10003024:	1912983a 	sll	r9,r3,r4
10003028:	308ed83a 	srl	r7,r6,r2
1000302c:	3108983a 	sll	r4,r6,r4
10003030:	1884d83a 	srl	r2,r3,r2
10003034:	49ceb03a 	or	r7,r9,r7
10003038:	2008c03a 	cmpne	r4,r4,zero
1000303c:	390eb03a 	or	r7,r7,r4
10003040:	003f4706 	br	10002d60 <__alt_data_end+0xf8002d60>
10003044:	2c48b03a 	or	r4,r5,r17
10003048:	20003e26 	beq	r4,zero,10003144 <__subdf3+0x644>
1000304c:	0084303a 	nor	r2,zero,r2
10003050:	10003a1e 	bne	r2,zero,1000313c <__subdf3+0x63c>
10003054:	3463c83a 	sub	r17,r6,r17
10003058:	194bc83a 	sub	r5,r3,r5
1000305c:	344d803a 	cmpltu	r6,r6,r17
10003060:	298bc83a 	sub	r5,r5,r6
10003064:	5021883a 	mov	r16,r10
10003068:	3825883a 	mov	r18,r7
1000306c:	003f0406 	br	10002c80 <__alt_data_end+0xf8002c80>
10003070:	1023883a 	mov	r17,r2
10003074:	003f0706 	br	10002c94 <__alt_data_end+0xf8002c94>
10003078:	0101ffc4 	movi	r4,2047
1000307c:	813f331e 	bne	r16,r4,10002d4c <__alt_data_end+0xf8002d4c>
10003080:	003ec206 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003084:	0027883a 	mov	r19,zero
10003088:	003fb006 	br	10002f4c <__alt_data_end+0xf8002f4c>
1000308c:	0005883a 	mov	r2,zero
10003090:	003fbb06 	br	10002f80 <__alt_data_end+0xf8002f80>
10003094:	2c44b03a 	or	r2,r5,r17
10003098:	80008b1e 	bne	r16,zero,100032c8 <__subdf3+0x7c8>
1000309c:	1000b526 	beq	r2,zero,10003374 <__subdf3+0x874>
100030a0:	1984b03a 	or	r2,r3,r6
100030a4:	103eb926 	beq	r2,zero,10002b8c <__alt_data_end+0xf8002b8c>
100030a8:	3449883a 	add	r4,r6,r17
100030ac:	2463803a 	cmpltu	r17,r4,r17
100030b0:	194b883a 	add	r5,r3,r5
100030b4:	2c4b883a 	add	r5,r5,r17
100030b8:	2880202c 	andhi	r2,r5,128
100030bc:	2023883a 	mov	r17,r4
100030c0:	103f5c26 	beq	r2,zero,10002e34 <__alt_data_end+0xf8002e34>
100030c4:	00bfe034 	movhi	r2,65408
100030c8:	10bfffc4 	addi	r2,r2,-1
100030cc:	4821883a 	mov	r16,r9
100030d0:	288a703a 	and	r5,r5,r2
100030d4:	003ead06 	br	10002b8c <__alt_data_end+0xf8002b8c>
100030d8:	2c44b03a 	or	r2,r5,r17
100030dc:	8000291e 	bne	r16,zero,10003184 <__subdf3+0x684>
100030e0:	10004f1e 	bne	r2,zero,10003220 <__subdf3+0x720>
100030e4:	1984b03a 	or	r2,r3,r6
100030e8:	10000426 	beq	r2,zero,100030fc <__subdf3+0x5fc>
100030ec:	180b883a 	mov	r5,r3
100030f0:	3023883a 	mov	r17,r6
100030f4:	3825883a 	mov	r18,r7
100030f8:	003ea406 	br	10002b8c <__alt_data_end+0xf8002b8c>
100030fc:	0011883a 	mov	r8,zero
10003100:	000b883a 	mov	r5,zero
10003104:	0023883a 	mov	r17,zero
10003108:	003f0006 	br	10002d0c <__alt_data_end+0xf8002d0c>
1000310c:	11fff804 	addi	r7,r2,-32
10003110:	19c8d83a 	srl	r4,r3,r7
10003114:	01c00804 	movi	r7,32
10003118:	11c07e26 	beq	r2,r7,10003314 <__subdf3+0x814>
1000311c:	01c01004 	movi	r7,64
10003120:	3885c83a 	sub	r2,r7,r2
10003124:	1884983a 	sll	r2,r3,r2
10003128:	118cb03a 	or	r6,r2,r6
1000312c:	300ec03a 	cmpne	r7,r6,zero
10003130:	390eb03a 	or	r7,r7,r4
10003134:	0005883a 	mov	r2,zero
10003138:	003f0906 	br	10002d60 <__alt_data_end+0xf8002d60>
1000313c:	0101ffc4 	movi	r4,2047
10003140:	513f991e 	bne	r10,r4,10002fa8 <__alt_data_end+0xf8002fa8>
10003144:	180b883a 	mov	r5,r3
10003148:	3023883a 	mov	r17,r6
1000314c:	5021883a 	mov	r16,r10
10003150:	3825883a 	mov	r18,r7
10003154:	003e8d06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003158:	80001a1e 	bne	r16,zero,100031c4 <__subdf3+0x6c4>
1000315c:	2c48b03a 	or	r4,r5,r17
10003160:	20005526 	beq	r4,zero,100032b8 <__subdf3+0x7b8>
10003164:	0084303a 	nor	r2,zero,r2
10003168:	1000511e 	bne	r2,zero,100032b0 <__subdf3+0x7b0>
1000316c:	89a3883a 	add	r17,r17,r6
10003170:	194b883a 	add	r5,r3,r5
10003174:	898d803a 	cmpltu	r6,r17,r6
10003178:	298b883a 	add	r5,r5,r6
1000317c:	5021883a 	mov	r16,r10
10003180:	003efc06 	br	10002d74 <__alt_data_end+0xf8002d74>
10003184:	1000341e 	bne	r2,zero,10003258 <__subdf3+0x758>
10003188:	1984b03a 	or	r2,r3,r6
1000318c:	10006f26 	beq	r2,zero,1000334c <__subdf3+0x84c>
10003190:	180b883a 	mov	r5,r3
10003194:	3023883a 	mov	r17,r6
10003198:	3825883a 	mov	r18,r7
1000319c:	0401ffc4 	movi	r16,2047
100031a0:	003e7a06 	br	10002b8c <__alt_data_end+0xf8002b8c>
100031a4:	2c62b03a 	or	r17,r5,r17
100031a8:	8822c03a 	cmpne	r17,r17,zero
100031ac:	0005883a 	mov	r2,zero
100031b0:	003f8a06 	br	10002fdc <__alt_data_end+0xf8002fdc>
100031b4:	3821883a 	mov	r16,r7
100031b8:	000b883a 	mov	r5,zero
100031bc:	0023883a 	mov	r17,zero
100031c0:	003ed206 	br	10002d0c <__alt_data_end+0xf8002d0c>
100031c4:	0101ffc4 	movi	r4,2047
100031c8:	51003b26 	beq	r10,r4,100032b8 <__subdf3+0x7b8>
100031cc:	0085c83a 	sub	r2,zero,r2
100031d0:	29402034 	orhi	r5,r5,128
100031d4:	01000e04 	movi	r4,56
100031d8:	20806216 	blt	r4,r2,10003364 <__subdf3+0x864>
100031dc:	010007c4 	movi	r4,31
100031e0:	20806b16 	blt	r4,r2,10003390 <__subdf3+0x890>
100031e4:	01000804 	movi	r4,32
100031e8:	2089c83a 	sub	r4,r4,r2
100031ec:	2912983a 	sll	r9,r5,r4
100031f0:	888ed83a 	srl	r7,r17,r2
100031f4:	8908983a 	sll	r4,r17,r4
100031f8:	2884d83a 	srl	r2,r5,r2
100031fc:	49e2b03a 	or	r17,r9,r7
10003200:	2008c03a 	cmpne	r4,r4,zero
10003204:	8922b03a 	or	r17,r17,r4
10003208:	89a3883a 	add	r17,r17,r6
1000320c:	10c5883a 	add	r2,r2,r3
10003210:	898d803a 	cmpltu	r6,r17,r6
10003214:	118b883a 	add	r5,r2,r6
10003218:	5021883a 	mov	r16,r10
1000321c:	003ed506 	br	10002d74 <__alt_data_end+0xf8002d74>
10003220:	1984b03a 	or	r2,r3,r6
10003224:	103e5926 	beq	r2,zero,10002b8c <__alt_data_end+0xf8002b8c>
10003228:	8989c83a 	sub	r4,r17,r6
1000322c:	8911803a 	cmpltu	r8,r17,r4
10003230:	28c5c83a 	sub	r2,r5,r3
10003234:	1205c83a 	sub	r2,r2,r8
10003238:	1200202c 	andhi	r8,r2,128
1000323c:	403ef926 	beq	r8,zero,10002e24 <__alt_data_end+0xf8002e24>
10003240:	3463c83a 	sub	r17,r6,r17
10003244:	194bc83a 	sub	r5,r3,r5
10003248:	344d803a 	cmpltu	r6,r6,r17
1000324c:	298bc83a 	sub	r5,r5,r6
10003250:	3825883a 	mov	r18,r7
10003254:	003e4d06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003258:	1984b03a 	or	r2,r3,r6
1000325c:	10002b26 	beq	r2,zero,1000330c <__subdf3+0x80c>
10003260:	2808d0fa 	srli	r4,r5,3
10003264:	8822d0fa 	srli	r17,r17,3
10003268:	280a977a 	slli	r5,r5,29
1000326c:	2080022c 	andhi	r2,r4,8
10003270:	2c62b03a 	or	r17,r5,r17
10003274:	10000826 	beq	r2,zero,10003298 <__subdf3+0x798>
10003278:	1810d0fa 	srli	r8,r3,3
1000327c:	4080022c 	andhi	r2,r8,8
10003280:	1000051e 	bne	r2,zero,10003298 <__subdf3+0x798>
10003284:	300cd0fa 	srli	r6,r6,3
10003288:	1804977a 	slli	r2,r3,29
1000328c:	4009883a 	mov	r4,r8
10003290:	3825883a 	mov	r18,r7
10003294:	11a2b03a 	or	r17,r2,r6
10003298:	880ad77a 	srli	r5,r17,29
1000329c:	200890fa 	slli	r4,r4,3
100032a0:	882290fa 	slli	r17,r17,3
100032a4:	0401ffc4 	movi	r16,2047
100032a8:	290ab03a 	or	r5,r5,r4
100032ac:	003e3706 	br	10002b8c <__alt_data_end+0xf8002b8c>
100032b0:	0101ffc4 	movi	r4,2047
100032b4:	513fc71e 	bne	r10,r4,100031d4 <__alt_data_end+0xf80031d4>
100032b8:	180b883a 	mov	r5,r3
100032bc:	3023883a 	mov	r17,r6
100032c0:	5021883a 	mov	r16,r10
100032c4:	003e3106 	br	10002b8c <__alt_data_end+0xf8002b8c>
100032c8:	10002d26 	beq	r2,zero,10003380 <__subdf3+0x880>
100032cc:	1984b03a 	or	r2,r3,r6
100032d0:	10000e26 	beq	r2,zero,1000330c <__subdf3+0x80c>
100032d4:	2808d0fa 	srli	r4,r5,3
100032d8:	8822d0fa 	srli	r17,r17,3
100032dc:	280a977a 	slli	r5,r5,29
100032e0:	2080022c 	andhi	r2,r4,8
100032e4:	2c62b03a 	or	r17,r5,r17
100032e8:	103feb26 	beq	r2,zero,10003298 <__alt_data_end+0xf8003298>
100032ec:	180ed0fa 	srli	r7,r3,3
100032f0:	3880022c 	andhi	r2,r7,8
100032f4:	103fe81e 	bne	r2,zero,10003298 <__alt_data_end+0xf8003298>
100032f8:	300cd0fa 	srli	r6,r6,3
100032fc:	1804977a 	slli	r2,r3,29
10003300:	3809883a 	mov	r4,r7
10003304:	11a2b03a 	or	r17,r2,r6
10003308:	003fe306 	br	10003298 <__alt_data_end+0xf8003298>
1000330c:	0401ffc4 	movi	r16,2047
10003310:	003e1e06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003314:	0005883a 	mov	r2,zero
10003318:	003f8306 	br	10003128 <__alt_data_end+0xf8003128>
1000331c:	113ff804 	addi	r4,r2,-32
10003320:	02000804 	movi	r8,32
10003324:	2908d83a 	srl	r4,r5,r4
10003328:	12002526 	beq	r2,r8,100033c0 <__subdf3+0x8c0>
1000332c:	02001004 	movi	r8,64
10003330:	4085c83a 	sub	r2,r8,r2
10003334:	288a983a 	sll	r5,r5,r2
10003338:	2c62b03a 	or	r17,r5,r17
1000333c:	8822c03a 	cmpne	r17,r17,zero
10003340:	8922b03a 	or	r17,r17,r4
10003344:	0005883a 	mov	r2,zero
10003348:	003f2406 	br	10002fdc <__alt_data_end+0xf8002fdc>
1000334c:	01402034 	movhi	r5,128
10003350:	0011883a 	mov	r8,zero
10003354:	297fffc4 	addi	r5,r5,-1
10003358:	047ffe04 	movi	r17,-8
1000335c:	0401ffc4 	movi	r16,2047
10003360:	003e6a06 	br	10002d0c <__alt_data_end+0xf8002d0c>
10003364:	2c62b03a 	or	r17,r5,r17
10003368:	8822c03a 	cmpne	r17,r17,zero
1000336c:	0005883a 	mov	r2,zero
10003370:	003fa506 	br	10003208 <__alt_data_end+0xf8003208>
10003374:	180b883a 	mov	r5,r3
10003378:	3023883a 	mov	r17,r6
1000337c:	003e0306 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003380:	180b883a 	mov	r5,r3
10003384:	3023883a 	mov	r17,r6
10003388:	0401ffc4 	movi	r16,2047
1000338c:	003dff06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003390:	113ff804 	addi	r4,r2,-32
10003394:	01c00804 	movi	r7,32
10003398:	2908d83a 	srl	r4,r5,r4
1000339c:	11c00a26 	beq	r2,r7,100033c8 <__subdf3+0x8c8>
100033a0:	01c01004 	movi	r7,64
100033a4:	3885c83a 	sub	r2,r7,r2
100033a8:	288a983a 	sll	r5,r5,r2
100033ac:	2c62b03a 	or	r17,r5,r17
100033b0:	8822c03a 	cmpne	r17,r17,zero
100033b4:	8922b03a 	or	r17,r17,r4
100033b8:	0005883a 	mov	r2,zero
100033bc:	003f9206 	br	10003208 <__alt_data_end+0xf8003208>
100033c0:	000b883a 	mov	r5,zero
100033c4:	003fdc06 	br	10003338 <__alt_data_end+0xf8003338>
100033c8:	000b883a 	mov	r5,zero
100033cc:	003ff706 	br	100033ac <__alt_data_end+0xf80033ac>

100033d0 <__fixdfsi>:
100033d0:	2806d53a 	srli	r3,r5,20
100033d4:	00800434 	movhi	r2,16
100033d8:	10bfffc4 	addi	r2,r2,-1
100033dc:	18c1ffcc 	andi	r3,r3,2047
100033e0:	0180ff84 	movi	r6,1022
100033e4:	2884703a 	and	r2,r5,r2
100033e8:	280ad7fa 	srli	r5,r5,31
100033ec:	30c0130e 	bge	r6,r3,1000343c <__fixdfsi+0x6c>
100033f0:	01810744 	movi	r6,1053
100033f4:	30c00d16 	blt	r6,r3,1000342c <__fixdfsi+0x5c>
100033f8:	01810cc4 	movi	r6,1075
100033fc:	30cdc83a 	sub	r6,r6,r3
10003400:	01c007c4 	movi	r7,31
10003404:	10800434 	orhi	r2,r2,16
10003408:	39800e0e 	bge	r7,r6,10003444 <__fixdfsi+0x74>
1000340c:	010104c4 	movi	r4,1043
10003410:	20c7c83a 	sub	r3,r4,r3
10003414:	10c6d83a 	srl	r3,r2,r3
10003418:	29403fcc 	andi	r5,r5,255
1000341c:	0145c83a 	sub	r2,zero,r5
10003420:	1884f03a 	xor	r2,r3,r2
10003424:	1145883a 	add	r2,r2,r5
10003428:	f800283a 	ret
1000342c:	00a00034 	movhi	r2,32768
10003430:	10bfffc4 	addi	r2,r2,-1
10003434:	2885883a 	add	r2,r5,r2
10003438:	f800283a 	ret
1000343c:	0005883a 	mov	r2,zero
10003440:	f800283a 	ret
10003444:	18fefb44 	addi	r3,r3,-1043
10003448:	2188d83a 	srl	r4,r4,r6
1000344c:	10c6983a 	sll	r3,r2,r3
10003450:	20c6b03a 	or	r3,r4,r3
10003454:	003ff006 	br	10003418 <__alt_data_end+0xf8003418>

10003458 <__floatsidf>:
10003458:	defffd04 	addi	sp,sp,-12
1000345c:	dc400115 	stw	r17,4(sp)
10003460:	dfc00215 	stw	ra,8(sp)
10003464:	dc000015 	stw	r16,0(sp)
10003468:	2023883a 	mov	r17,r4
1000346c:	20001426 	beq	r4,zero,100034c0 <__floatsidf+0x68>
10003470:	2020d7fa 	srli	r16,r4,31
10003474:	80000126 	beq	r16,zero,1000347c <__floatsidf+0x24>
10003478:	0123c83a 	sub	r17,zero,r4
1000347c:	8809883a 	mov	r4,r17
10003480:	00035280 	call	10003528 <__clzsi2>
10003484:	01410784 	movi	r5,1054
10003488:	00c00284 	movi	r3,10
1000348c:	288bc83a 	sub	r5,r5,r2
10003490:	18801c16 	blt	r3,r2,10003504 <__floatsidf+0xac>
10003494:	00c002c4 	movi	r3,11
10003498:	1887c83a 	sub	r3,r3,r2
1000349c:	88c8d83a 	srl	r4,r17,r3
100034a0:	00c00434 	movhi	r3,16
100034a4:	18ffffc4 	addi	r3,r3,-1
100034a8:	10800544 	addi	r2,r2,21
100034ac:	20c8703a 	and	r4,r4,r3
100034b0:	8884983a 	sll	r2,r17,r2
100034b4:	28c1ffcc 	andi	r3,r5,2047
100034b8:	800d883a 	mov	r6,r16
100034bc:	00000406 	br	100034d0 <__floatsidf+0x78>
100034c0:	000d883a 	mov	r6,zero
100034c4:	0007883a 	mov	r3,zero
100034c8:	0009883a 	mov	r4,zero
100034cc:	0005883a 	mov	r2,zero
100034d0:	180a953a 	slli	r5,r3,20
100034d4:	31803fcc 	andi	r6,r6,255
100034d8:	00c00434 	movhi	r3,16
100034dc:	300c97fa 	slli	r6,r6,31
100034e0:	18ffffc4 	addi	r3,r3,-1
100034e4:	20c6703a 	and	r3,r4,r3
100034e8:	1946b03a 	or	r3,r3,r5
100034ec:	1986b03a 	or	r3,r3,r6
100034f0:	dfc00217 	ldw	ra,8(sp)
100034f4:	dc400117 	ldw	r17,4(sp)
100034f8:	dc000017 	ldw	r16,0(sp)
100034fc:	dec00304 	addi	sp,sp,12
10003500:	f800283a 	ret
10003504:	10fffd44 	addi	r3,r2,-11
10003508:	88c8983a 	sll	r4,r17,r3
1000350c:	00800434 	movhi	r2,16
10003510:	10bfffc4 	addi	r2,r2,-1
10003514:	2088703a 	and	r4,r4,r2
10003518:	28c1ffcc 	andi	r3,r5,2047
1000351c:	800d883a 	mov	r6,r16
10003520:	0005883a 	mov	r2,zero
10003524:	003fea06 	br	100034d0 <__alt_data_end+0xf80034d0>

10003528 <__clzsi2>:
10003528:	00bfffd4 	movui	r2,65535
1000352c:	11000b36 	bltu	r2,r4,1000355c <__clzsi2+0x34>
10003530:	00803fc4 	movi	r2,255
10003534:	1100122e 	bgeu	r2,r4,10003580 <__clzsi2+0x58>
10003538:	00c00204 	movi	r3,8
1000353c:	01400604 	movi	r5,24
10003540:	20c8d83a 	srl	r4,r4,r3
10003544:	00840034 	movhi	r2,4096
10003548:	10961b04 	addi	r2,r2,22636
1000354c:	1109883a 	add	r4,r2,r4
10003550:	20800003 	ldbu	r2,0(r4)
10003554:	2885c83a 	sub	r2,r5,r2
10003558:	f800283a 	ret
1000355c:	00804034 	movhi	r2,256
10003560:	10bfffc4 	addi	r2,r2,-1
10003564:	11000336 	bltu	r2,r4,10003574 <__clzsi2+0x4c>
10003568:	00c00404 	movi	r3,16
1000356c:	180b883a 	mov	r5,r3
10003570:	003ff306 	br	10003540 <__alt_data_end+0xf8003540>
10003574:	00c00604 	movi	r3,24
10003578:	01400204 	movi	r5,8
1000357c:	003ff006 	br	10003540 <__alt_data_end+0xf8003540>
10003580:	0007883a 	mov	r3,zero
10003584:	01400804 	movi	r5,32
10003588:	003fed06 	br	10003540 <__alt_data_end+0xf8003540>

1000358c <srand>:
1000358c:	00840034 	movhi	r2,4096
10003590:	109bf504 	addi	r2,r2,28628
10003594:	10800017 	ldw	r2,0(r2)
10003598:	11002915 	stw	r4,164(r2)
1000359c:	10002a15 	stw	zero,168(r2)
100035a0:	f800283a 	ret

100035a4 <rand>:
100035a4:	00840034 	movhi	r2,4096
100035a8:	defffe04 	addi	sp,sp,-8
100035ac:	109bf504 	addi	r2,r2,28628
100035b0:	dc000015 	stw	r16,0(sp)
100035b4:	14000017 	ldw	r16,0(r2)
100035b8:	dfc00115 	stw	ra,4(sp)
100035bc:	01932574 	movhi	r6,19605
100035c0:	81002917 	ldw	r4,164(r16)
100035c4:	81402a17 	ldw	r5,168(r16)
100035c8:	01d614b4 	movhi	r7,22610
100035cc:	319fcb44 	addi	r6,r6,32557
100035d0:	39fd0b44 	addi	r7,r7,-3027
100035d4:	00013a80 	call	100013a8 <__muldi3>
100035d8:	11000044 	addi	r4,r2,1
100035dc:	2085803a 	cmpltu	r2,r4,r2
100035e0:	10c7883a 	add	r3,r2,r3
100035e4:	00a00034 	movhi	r2,32768
100035e8:	10bfffc4 	addi	r2,r2,-1
100035ec:	1884703a 	and	r2,r3,r2
100035f0:	81002915 	stw	r4,164(r16)
100035f4:	80c02a15 	stw	r3,168(r16)
100035f8:	dfc00117 	ldw	ra,4(sp)
100035fc:	dc000017 	ldw	r16,0(sp)
10003600:	dec00204 	addi	sp,sp,8
10003604:	f800283a 	ret

10003608 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10003608:	defffc04 	addi	sp,sp,-16
1000360c:	df000315 	stw	fp,12(sp)
10003610:	df000304 	addi	fp,sp,12
10003614:	e13ffd15 	stw	r4,-12(fp)
10003618:	e17ffe15 	stw	r5,-8(fp)
1000361c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10003620:	e0fffe17 	ldw	r3,-8(fp)
10003624:	e0bffd17 	ldw	r2,-12(fp)
10003628:	18800c26 	beq	r3,r2,1000365c <alt_load_section+0x54>
  {
    while( to != end )
1000362c:	00000806 	br	10003650 <alt_load_section+0x48>
    {
      *to++ = *from++;
10003630:	e0bffe17 	ldw	r2,-8(fp)
10003634:	10c00104 	addi	r3,r2,4
10003638:	e0fffe15 	stw	r3,-8(fp)
1000363c:	e0fffd17 	ldw	r3,-12(fp)
10003640:	19000104 	addi	r4,r3,4
10003644:	e13ffd15 	stw	r4,-12(fp)
10003648:	18c00017 	ldw	r3,0(r3)
1000364c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003650:	e0fffe17 	ldw	r3,-8(fp)
10003654:	e0bfff17 	ldw	r2,-4(fp)
10003658:	18bff51e 	bne	r3,r2,10003630 <__alt_data_end+0xf8003630>
    {
      *to++ = *from++;
    }
  }
}
1000365c:	e037883a 	mov	sp,fp
10003660:	df000017 	ldw	fp,0(sp)
10003664:	dec00104 	addi	sp,sp,4
10003668:	f800283a 	ret

1000366c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000366c:	defffe04 	addi	sp,sp,-8
10003670:	dfc00115 	stw	ra,4(sp)
10003674:	df000015 	stw	fp,0(sp)
10003678:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000367c:	01040034 	movhi	r4,4096
10003680:	211bff04 	addi	r4,r4,28668
10003684:	01440034 	movhi	r5,4096
10003688:	29566904 	addi	r5,r5,22948
1000368c:	01840034 	movhi	r6,4096
10003690:	319bff04 	addi	r6,r6,28668
10003694:	00036080 	call	10003608 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10003698:	01040034 	movhi	r4,4096
1000369c:	21000804 	addi	r4,r4,32
100036a0:	01440034 	movhi	r5,4096
100036a4:	29400804 	addi	r5,r5,32
100036a8:	01840034 	movhi	r6,4096
100036ac:	31808b04 	addi	r6,r6,556
100036b0:	00036080 	call	10003608 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100036b4:	01040034 	movhi	r4,4096
100036b8:	21161b04 	addi	r4,r4,22636
100036bc:	01440034 	movhi	r5,4096
100036c0:	29561b04 	addi	r5,r5,22636
100036c4:	01840034 	movhi	r6,4096
100036c8:	31966904 	addi	r6,r6,22948
100036cc:	00036080 	call	10003608 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100036d0:	00044cc0 	call	100044cc <alt_dcache_flush_all>
  alt_icache_flush_all();
100036d4:	00046c00 	call	100046c0 <alt_icache_flush_all>
}
100036d8:	e037883a 	mov	sp,fp
100036dc:	dfc00117 	ldw	ra,4(sp)
100036e0:	df000017 	ldw	fp,0(sp)
100036e4:	dec00204 	addi	sp,sp,8
100036e8:	f800283a 	ret

100036ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100036ec:	defffd04 	addi	sp,sp,-12
100036f0:	dfc00215 	stw	ra,8(sp)
100036f4:	df000115 	stw	fp,4(sp)
100036f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100036fc:	0009883a 	mov	r4,zero
10003700:	000379c0 	call	1000379c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10003704:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10003708:	00037d00 	call	100037d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000370c:	01040034 	movhi	r4,4096
10003710:	21165c04 	addi	r4,r4,22896
10003714:	01440034 	movhi	r5,4096
10003718:	29565c04 	addi	r5,r5,22896
1000371c:	01840034 	movhi	r6,4096
10003720:	31965c04 	addi	r6,r6,22896
10003724:	0004a8c0 	call	10004a8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10003728:	00046080 	call	10004608 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000372c:	01040034 	movhi	r4,4096
10003730:	21119904 	addi	r4,r4,18020
10003734:	00052f80 	call	100052f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10003738:	d125a817 	ldw	r4,-26976(gp)
1000373c:	d0e5a917 	ldw	r3,-26972(gp)
10003740:	d0a5aa17 	ldw	r2,-26968(gp)
10003744:	180b883a 	mov	r5,r3
10003748:	100d883a 	mov	r6,r2
1000374c:	00002680 	call	10000268 <main>
10003750:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003754:	01000044 	movi	r4,1
10003758:	00043f40 	call	100043f4 <close>
  exit (result);
1000375c:	e13fff17 	ldw	r4,-4(fp)
10003760:	000530c0 	call	1000530c <exit>

10003764 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10003764:	defffd04 	addi	sp,sp,-12
10003768:	dfc00215 	stw	ra,8(sp)
1000376c:	df000115 	stw	fp,4(sp)
10003770:	df000104 	addi	fp,sp,4
10003774:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10003778:	e13fff17 	ldw	r4,-4(fp)
1000377c:	01440034 	movhi	r5,4096
10003780:	295bf804 	addi	r5,r5,28640
10003784:	00045640 	call	10004564 <alt_dev_llist_insert>
}
10003788:	e037883a 	mov	sp,fp
1000378c:	dfc00117 	ldw	ra,4(sp)
10003790:	df000017 	ldw	fp,0(sp)
10003794:	dec00204 	addi	sp,sp,8
10003798:	f800283a 	ret

1000379c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000379c:	defffd04 	addi	sp,sp,-12
100037a0:	dfc00215 	stw	ra,8(sp)
100037a4:	df000115 	stw	fp,4(sp)
100037a8:	df000104 	addi	fp,sp,4
100037ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
100037b0:	0004fc40 	call	10004fc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100037b4:	00800044 	movi	r2,1
100037b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100037bc:	e037883a 	mov	sp,fp
100037c0:	dfc00117 	ldw	ra,4(sp)
100037c4:	df000017 	ldw	fp,0(sp)
100037c8:	dec00204 	addi	sp,sp,8
100037cc:	f800283a 	ret

100037d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100037d0:	defffe04 	addi	sp,sp,-8
100037d4:	dfc00115 	stw	ra,4(sp)
100037d8:	df000015 	stw	fp,0(sp)
100037dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100037e0:	01040034 	movhi	r4,4096
100037e4:	21177c04 	addi	r4,r4,24048
100037e8:	000b883a 	mov	r5,zero
100037ec:	01800144 	movi	r6,5
100037f0:	000397c0 	call	1000397c <altera_avalon_jtag_uart_init>
100037f4:	01040034 	movhi	r4,4096
100037f8:	21177204 	addi	r4,r4,24008
100037fc:	00037640 	call	10003764 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10003800:	0001883a 	nop
}
10003804:	e037883a 	mov	sp,fp
10003808:	dfc00117 	ldw	ra,4(sp)
1000380c:	df000017 	ldw	fp,0(sp)
10003810:	dec00204 	addi	sp,sp,8
10003814:	f800283a 	ret

10003818 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10003818:	defffa04 	addi	sp,sp,-24
1000381c:	dfc00515 	stw	ra,20(sp)
10003820:	df000415 	stw	fp,16(sp)
10003824:	df000404 	addi	fp,sp,16
10003828:	e13ffd15 	stw	r4,-12(fp)
1000382c:	e17ffe15 	stw	r5,-8(fp)
10003830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003834:	e0bffd17 	ldw	r2,-12(fp)
10003838:	10800017 	ldw	r2,0(r2)
1000383c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10003840:	e0bffc17 	ldw	r2,-16(fp)
10003844:	10c00a04 	addi	r3,r2,40
10003848:	e0bffd17 	ldw	r2,-12(fp)
1000384c:	10800217 	ldw	r2,8(r2)
10003850:	1809883a 	mov	r4,r3
10003854:	e17ffe17 	ldw	r5,-8(fp)
10003858:	e1bfff17 	ldw	r6,-4(fp)
1000385c:	100f883a 	mov	r7,r2
10003860:	0003e400 	call	10003e40 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10003864:	e037883a 	mov	sp,fp
10003868:	dfc00117 	ldw	ra,4(sp)
1000386c:	df000017 	ldw	fp,0(sp)
10003870:	dec00204 	addi	sp,sp,8
10003874:	f800283a 	ret

10003878 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10003878:	defffa04 	addi	sp,sp,-24
1000387c:	dfc00515 	stw	ra,20(sp)
10003880:	df000415 	stw	fp,16(sp)
10003884:	df000404 	addi	fp,sp,16
10003888:	e13ffd15 	stw	r4,-12(fp)
1000388c:	e17ffe15 	stw	r5,-8(fp)
10003890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003894:	e0bffd17 	ldw	r2,-12(fp)
10003898:	10800017 	ldw	r2,0(r2)
1000389c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100038a0:	e0bffc17 	ldw	r2,-16(fp)
100038a4:	10c00a04 	addi	r3,r2,40
100038a8:	e0bffd17 	ldw	r2,-12(fp)
100038ac:	10800217 	ldw	r2,8(r2)
100038b0:	1809883a 	mov	r4,r3
100038b4:	e17ffe17 	ldw	r5,-8(fp)
100038b8:	e1bfff17 	ldw	r6,-4(fp)
100038bc:	100f883a 	mov	r7,r2
100038c0:	000404c0 	call	1000404c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100038c4:	e037883a 	mov	sp,fp
100038c8:	dfc00117 	ldw	ra,4(sp)
100038cc:	df000017 	ldw	fp,0(sp)
100038d0:	dec00204 	addi	sp,sp,8
100038d4:	f800283a 	ret

100038d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100038d8:	defffc04 	addi	sp,sp,-16
100038dc:	dfc00315 	stw	ra,12(sp)
100038e0:	df000215 	stw	fp,8(sp)
100038e4:	df000204 	addi	fp,sp,8
100038e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100038ec:	e0bfff17 	ldw	r2,-4(fp)
100038f0:	10800017 	ldw	r2,0(r2)
100038f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100038f8:	e0bffe17 	ldw	r2,-8(fp)
100038fc:	10c00a04 	addi	r3,r2,40
10003900:	e0bfff17 	ldw	r2,-4(fp)
10003904:	10800217 	ldw	r2,8(r2)
10003908:	1809883a 	mov	r4,r3
1000390c:	100b883a 	mov	r5,r2
10003910:	0003cec0 	call	10003cec <altera_avalon_jtag_uart_close>
}
10003914:	e037883a 	mov	sp,fp
10003918:	dfc00117 	ldw	ra,4(sp)
1000391c:	df000017 	ldw	fp,0(sp)
10003920:	dec00204 	addi	sp,sp,8
10003924:	f800283a 	ret

10003928 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10003928:	defffa04 	addi	sp,sp,-24
1000392c:	dfc00515 	stw	ra,20(sp)
10003930:	df000415 	stw	fp,16(sp)
10003934:	df000404 	addi	fp,sp,16
10003938:	e13ffd15 	stw	r4,-12(fp)
1000393c:	e17ffe15 	stw	r5,-8(fp)
10003940:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10003944:	e0bffd17 	ldw	r2,-12(fp)
10003948:	10800017 	ldw	r2,0(r2)
1000394c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10003950:	e0bffc17 	ldw	r2,-16(fp)
10003954:	10800a04 	addi	r2,r2,40
10003958:	1009883a 	mov	r4,r2
1000395c:	e17ffe17 	ldw	r5,-8(fp)
10003960:	e1bfff17 	ldw	r6,-4(fp)
10003964:	0003d540 	call	10003d54 <altera_avalon_jtag_uart_ioctl>
}
10003968:	e037883a 	mov	sp,fp
1000396c:	dfc00117 	ldw	ra,4(sp)
10003970:	df000017 	ldw	fp,0(sp)
10003974:	dec00204 	addi	sp,sp,8
10003978:	f800283a 	ret

1000397c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000397c:	defffa04 	addi	sp,sp,-24
10003980:	dfc00515 	stw	ra,20(sp)
10003984:	df000415 	stw	fp,16(sp)
10003988:	df000404 	addi	fp,sp,16
1000398c:	e13ffd15 	stw	r4,-12(fp)
10003990:	e17ffe15 	stw	r5,-8(fp)
10003994:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003998:	e0bffd17 	ldw	r2,-12(fp)
1000399c:	00c00044 	movi	r3,1
100039a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100039a4:	e0bffd17 	ldw	r2,-12(fp)
100039a8:	10800017 	ldw	r2,0(r2)
100039ac:	10800104 	addi	r2,r2,4
100039b0:	1007883a 	mov	r3,r2
100039b4:	e0bffd17 	ldw	r2,-12(fp)
100039b8:	10800817 	ldw	r2,32(r2)
100039bc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100039c0:	e0fffe17 	ldw	r3,-8(fp)
100039c4:	e0bfff17 	ldw	r2,-4(fp)
100039c8:	d8000015 	stw	zero,0(sp)
100039cc:	1809883a 	mov	r4,r3
100039d0:	100b883a 	mov	r5,r2
100039d4:	01840034 	movhi	r6,4096
100039d8:	318e9004 	addi	r6,r6,14912
100039dc:	e1fffd17 	ldw	r7,-12(fp)
100039e0:	00046dc0 	call	100046dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100039e4:	e0bffd17 	ldw	r2,-12(fp)
100039e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100039ec:	e0bffd17 	ldw	r2,-12(fp)
100039f0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100039f4:	00840074 	movhi	r2,4097
100039f8:	10a1a004 	addi	r2,r2,-31104
100039fc:	10800017 	ldw	r2,0(r2)
10003a00:	1809883a 	mov	r4,r3
10003a04:	100b883a 	mov	r5,r2
10003a08:	01840034 	movhi	r6,4096
10003a0c:	318f1104 	addi	r6,r6,15428
10003a10:	e1fffd17 	ldw	r7,-12(fp)
10003a14:	00042640 	call	10004264 <alt_alarm_start>
10003a18:	1000040e 	bge	r2,zero,10003a2c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003a1c:	e0fffd17 	ldw	r3,-12(fp)
10003a20:	00a00034 	movhi	r2,32768
10003a24:	10bfffc4 	addi	r2,r2,-1
10003a28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003a2c:	e037883a 	mov	sp,fp
10003a30:	dfc00117 	ldw	ra,4(sp)
10003a34:	df000017 	ldw	fp,0(sp)
10003a38:	dec00204 	addi	sp,sp,8
10003a3c:	f800283a 	ret

10003a40 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003a40:	defff804 	addi	sp,sp,-32
10003a44:	df000715 	stw	fp,28(sp)
10003a48:	df000704 	addi	fp,sp,28
10003a4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10003a50:	e0bfff17 	ldw	r2,-4(fp)
10003a54:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10003a58:	e0bffb17 	ldw	r2,-20(fp)
10003a5c:	10800017 	ldw	r2,0(r2)
10003a60:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003a64:	e0bffc17 	ldw	r2,-16(fp)
10003a68:	10800104 	addi	r2,r2,4
10003a6c:	10800037 	ldwio	r2,0(r2)
10003a70:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10003a74:	e0bffd17 	ldw	r2,-12(fp)
10003a78:	1080c00c 	andi	r2,r2,768
10003a7c:	1000011e 	bne	r2,zero,10003a84 <altera_avalon_jtag_uart_irq+0x44>
      break;
10003a80:	00006c06 	br	10003c34 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10003a84:	e0bffd17 	ldw	r2,-12(fp)
10003a88:	1080400c 	andi	r2,r2,256
10003a8c:	10003426 	beq	r2,zero,10003b60 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10003a90:	00800074 	movhi	r2,1
10003a94:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003a98:	e0bffb17 	ldw	r2,-20(fp)
10003a9c:	10800a17 	ldw	r2,40(r2)
10003aa0:	10800044 	addi	r2,r2,1
10003aa4:	1081ffcc 	andi	r2,r2,2047
10003aa8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10003aac:	e0bffb17 	ldw	r2,-20(fp)
10003ab0:	10c00b17 	ldw	r3,44(r2)
10003ab4:	e0bffe17 	ldw	r2,-8(fp)
10003ab8:	1880011e 	bne	r3,r2,10003ac0 <altera_avalon_jtag_uart_irq+0x80>
          break;
10003abc:	00001606 	br	10003b18 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003ac0:	e0bffc17 	ldw	r2,-16(fp)
10003ac4:	10800037 	ldwio	r2,0(r2)
10003ac8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003acc:	e0bff917 	ldw	r2,-28(fp)
10003ad0:	10a0000c 	andi	r2,r2,32768
10003ad4:	1000011e 	bne	r2,zero,10003adc <altera_avalon_jtag_uart_irq+0x9c>
          break;
10003ad8:	00000f06 	br	10003b18 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003adc:	e0bffb17 	ldw	r2,-20(fp)
10003ae0:	10800a17 	ldw	r2,40(r2)
10003ae4:	e0fff917 	ldw	r3,-28(fp)
10003ae8:	1809883a 	mov	r4,r3
10003aec:	e0fffb17 	ldw	r3,-20(fp)
10003af0:	1885883a 	add	r2,r3,r2
10003af4:	10800e04 	addi	r2,r2,56
10003af8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003afc:	e0bffb17 	ldw	r2,-20(fp)
10003b00:	10800a17 	ldw	r2,40(r2)
10003b04:	10800044 	addi	r2,r2,1
10003b08:	10c1ffcc 	andi	r3,r2,2047
10003b0c:	e0bffb17 	ldw	r2,-20(fp)
10003b10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003b14:	003fe006 	br	10003a98 <__alt_data_end+0xf8003a98>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003b18:	e0bff917 	ldw	r2,-28(fp)
10003b1c:	10bfffec 	andhi	r2,r2,65535
10003b20:	10000f26 	beq	r2,zero,10003b60 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003b24:	e0bffb17 	ldw	r2,-20(fp)
10003b28:	10c00817 	ldw	r3,32(r2)
10003b2c:	00bfff84 	movi	r2,-2
10003b30:	1886703a 	and	r3,r3,r2
10003b34:	e0bffb17 	ldw	r2,-20(fp)
10003b38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10003b3c:	e0bffc17 	ldw	r2,-16(fp)
10003b40:	10800104 	addi	r2,r2,4
10003b44:	1007883a 	mov	r3,r2
10003b48:	e0bffb17 	ldw	r2,-20(fp)
10003b4c:	10800817 	ldw	r2,32(r2)
10003b50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003b54:	e0bffc17 	ldw	r2,-16(fp)
10003b58:	10800104 	addi	r2,r2,4
10003b5c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10003b60:	e0bffd17 	ldw	r2,-12(fp)
10003b64:	1080800c 	andi	r2,r2,512
10003b68:	10003126 	beq	r2,zero,10003c30 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10003b6c:	e0bffd17 	ldw	r2,-12(fp)
10003b70:	1004d43a 	srli	r2,r2,16
10003b74:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10003b78:	00001406 	br	10003bcc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10003b7c:	e0bffc17 	ldw	r2,-16(fp)
10003b80:	e0fffb17 	ldw	r3,-20(fp)
10003b84:	18c00d17 	ldw	r3,52(r3)
10003b88:	e13ffb17 	ldw	r4,-20(fp)
10003b8c:	20c7883a 	add	r3,r4,r3
10003b90:	18c20e04 	addi	r3,r3,2104
10003b94:	18c00003 	ldbu	r3,0(r3)
10003b98:	18c03fcc 	andi	r3,r3,255
10003b9c:	18c0201c 	xori	r3,r3,128
10003ba0:	18ffe004 	addi	r3,r3,-128
10003ba4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003ba8:	e0bffb17 	ldw	r2,-20(fp)
10003bac:	10800d17 	ldw	r2,52(r2)
10003bb0:	10800044 	addi	r2,r2,1
10003bb4:	10c1ffcc 	andi	r3,r2,2047
10003bb8:	e0bffb17 	ldw	r2,-20(fp)
10003bbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003bc0:	e0bffa17 	ldw	r2,-24(fp)
10003bc4:	10bfffc4 	addi	r2,r2,-1
10003bc8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10003bcc:	e0bffa17 	ldw	r2,-24(fp)
10003bd0:	10000526 	beq	r2,zero,10003be8 <altera_avalon_jtag_uart_irq+0x1a8>
10003bd4:	e0bffb17 	ldw	r2,-20(fp)
10003bd8:	10c00d17 	ldw	r3,52(r2)
10003bdc:	e0bffb17 	ldw	r2,-20(fp)
10003be0:	10800c17 	ldw	r2,48(r2)
10003be4:	18bfe51e 	bne	r3,r2,10003b7c <__alt_data_end+0xf8003b7c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003be8:	e0bffa17 	ldw	r2,-24(fp)
10003bec:	10001026 	beq	r2,zero,10003c30 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003bf0:	e0bffb17 	ldw	r2,-20(fp)
10003bf4:	10c00817 	ldw	r3,32(r2)
10003bf8:	00bfff44 	movi	r2,-3
10003bfc:	1886703a 	and	r3,r3,r2
10003c00:	e0bffb17 	ldw	r2,-20(fp)
10003c04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003c08:	e0bffb17 	ldw	r2,-20(fp)
10003c0c:	10800017 	ldw	r2,0(r2)
10003c10:	10800104 	addi	r2,r2,4
10003c14:	1007883a 	mov	r3,r2
10003c18:	e0bffb17 	ldw	r2,-20(fp)
10003c1c:	10800817 	ldw	r2,32(r2)
10003c20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003c24:	e0bffc17 	ldw	r2,-16(fp)
10003c28:	10800104 	addi	r2,r2,4
10003c2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003c30:	003f8c06 	br	10003a64 <__alt_data_end+0xf8003a64>
}
10003c34:	e037883a 	mov	sp,fp
10003c38:	df000017 	ldw	fp,0(sp)
10003c3c:	dec00104 	addi	sp,sp,4
10003c40:	f800283a 	ret

10003c44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10003c44:	defff804 	addi	sp,sp,-32
10003c48:	df000715 	stw	fp,28(sp)
10003c4c:	df000704 	addi	fp,sp,28
10003c50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10003c54:	e0bffb17 	ldw	r2,-20(fp)
10003c58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10003c5c:	e0bff917 	ldw	r2,-28(fp)
10003c60:	10800017 	ldw	r2,0(r2)
10003c64:	10800104 	addi	r2,r2,4
10003c68:	10800037 	ldwio	r2,0(r2)
10003c6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10003c70:	e0bffa17 	ldw	r2,-24(fp)
10003c74:	1081000c 	andi	r2,r2,1024
10003c78:	10000b26 	beq	r2,zero,10003ca8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10003c7c:	e0bff917 	ldw	r2,-28(fp)
10003c80:	10800017 	ldw	r2,0(r2)
10003c84:	10800104 	addi	r2,r2,4
10003c88:	1007883a 	mov	r3,r2
10003c8c:	e0bff917 	ldw	r2,-28(fp)
10003c90:	10800817 	ldw	r2,32(r2)
10003c94:	10810014 	ori	r2,r2,1024
10003c98:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10003c9c:	e0bff917 	ldw	r2,-28(fp)
10003ca0:	10000915 	stw	zero,36(r2)
10003ca4:	00000a06 	br	10003cd0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003ca8:	e0bff917 	ldw	r2,-28(fp)
10003cac:	10c00917 	ldw	r3,36(r2)
10003cb0:	00a00034 	movhi	r2,32768
10003cb4:	10bfff04 	addi	r2,r2,-4
10003cb8:	10c00536 	bltu	r2,r3,10003cd0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10003cbc:	e0bff917 	ldw	r2,-28(fp)
10003cc0:	10800917 	ldw	r2,36(r2)
10003cc4:	10c00044 	addi	r3,r2,1
10003cc8:	e0bff917 	ldw	r2,-28(fp)
10003ccc:	10c00915 	stw	r3,36(r2)
10003cd0:	00840074 	movhi	r2,4097
10003cd4:	10a1a004 	addi	r2,r2,-31104
10003cd8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10003cdc:	e037883a 	mov	sp,fp
10003ce0:	df000017 	ldw	fp,0(sp)
10003ce4:	dec00104 	addi	sp,sp,4
10003ce8:	f800283a 	ret

10003cec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10003cec:	defffd04 	addi	sp,sp,-12
10003cf0:	df000215 	stw	fp,8(sp)
10003cf4:	df000204 	addi	fp,sp,8
10003cf8:	e13ffe15 	stw	r4,-8(fp)
10003cfc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003d00:	00000506 	br	10003d18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003d04:	e0bfff17 	ldw	r2,-4(fp)
10003d08:	1090000c 	andi	r2,r2,16384
10003d0c:	10000226 	beq	r2,zero,10003d18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003d10:	00bffd44 	movi	r2,-11
10003d14:	00000b06 	br	10003d44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003d18:	e0bffe17 	ldw	r2,-8(fp)
10003d1c:	10c00d17 	ldw	r3,52(r2)
10003d20:	e0bffe17 	ldw	r2,-8(fp)
10003d24:	10800c17 	ldw	r2,48(r2)
10003d28:	18800526 	beq	r3,r2,10003d40 <altera_avalon_jtag_uart_close+0x54>
10003d2c:	e0bffe17 	ldw	r2,-8(fp)
10003d30:	10c00917 	ldw	r3,36(r2)
10003d34:	e0bffe17 	ldw	r2,-8(fp)
10003d38:	10800117 	ldw	r2,4(r2)
10003d3c:	18bff136 	bltu	r3,r2,10003d04 <__alt_data_end+0xf8003d04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10003d40:	0005883a 	mov	r2,zero
}
10003d44:	e037883a 	mov	sp,fp
10003d48:	df000017 	ldw	fp,0(sp)
10003d4c:	dec00104 	addi	sp,sp,4
10003d50:	f800283a 	ret

10003d54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10003d54:	defffa04 	addi	sp,sp,-24
10003d58:	df000515 	stw	fp,20(sp)
10003d5c:	df000504 	addi	fp,sp,20
10003d60:	e13ffd15 	stw	r4,-12(fp)
10003d64:	e17ffe15 	stw	r5,-8(fp)
10003d68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10003d6c:	00bff9c4 	movi	r2,-25
10003d70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10003d74:	e0bffe17 	ldw	r2,-8(fp)
10003d78:	10da8060 	cmpeqi	r3,r2,27137
10003d7c:	1800031e 	bne	r3,zero,10003d8c <altera_avalon_jtag_uart_ioctl+0x38>
10003d80:	109a80a0 	cmpeqi	r2,r2,27138
10003d84:	1000191e 	bne	r2,zero,10003dec <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10003d88:	00002806 	br	10003e2c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10003d8c:	e0bffd17 	ldw	r2,-12(fp)
10003d90:	10c00117 	ldw	r3,4(r2)
10003d94:	00a00034 	movhi	r2,32768
10003d98:	10bfffc4 	addi	r2,r2,-1
10003d9c:	18801226 	beq	r3,r2,10003de8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10003da0:	e0bfff17 	ldw	r2,-4(fp)
10003da4:	10800017 	ldw	r2,0(r2)
10003da8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10003dac:	e0bffc17 	ldw	r2,-16(fp)
10003db0:	10800090 	cmplti	r2,r2,2
10003db4:	1000061e 	bne	r2,zero,10003dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
10003db8:	e0fffc17 	ldw	r3,-16(fp)
10003dbc:	00a00034 	movhi	r2,32768
10003dc0:	10bfffc4 	addi	r2,r2,-1
10003dc4:	18800226 	beq	r3,r2,10003dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
10003dc8:	e0bffc17 	ldw	r2,-16(fp)
10003dcc:	00000206 	br	10003dd8 <altera_avalon_jtag_uart_ioctl+0x84>
10003dd0:	00a00034 	movhi	r2,32768
10003dd4:	10bfff84 	addi	r2,r2,-2
10003dd8:	e0fffd17 	ldw	r3,-12(fp)
10003ddc:	18800115 	stw	r2,4(r3)
      rc = 0;
10003de0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003de4:	00001106 	br	10003e2c <altera_avalon_jtag_uart_ioctl+0xd8>
10003de8:	00001006 	br	10003e2c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10003dec:	e0bffd17 	ldw	r2,-12(fp)
10003df0:	10c00117 	ldw	r3,4(r2)
10003df4:	00a00034 	movhi	r2,32768
10003df8:	10bfffc4 	addi	r2,r2,-1
10003dfc:	18800a26 	beq	r3,r2,10003e28 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10003e00:	e0bffd17 	ldw	r2,-12(fp)
10003e04:	10c00917 	ldw	r3,36(r2)
10003e08:	e0bffd17 	ldw	r2,-12(fp)
10003e0c:	10800117 	ldw	r2,4(r2)
10003e10:	1885803a 	cmpltu	r2,r3,r2
10003e14:	10c03fcc 	andi	r3,r2,255
10003e18:	e0bfff17 	ldw	r2,-4(fp)
10003e1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10003e20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003e24:	00000006 	br	10003e28 <altera_avalon_jtag_uart_ioctl+0xd4>
10003e28:	0001883a 	nop

  default:
    break;
  }

  return rc;
10003e2c:	e0bffb17 	ldw	r2,-20(fp)
}
10003e30:	e037883a 	mov	sp,fp
10003e34:	df000017 	ldw	fp,0(sp)
10003e38:	dec00104 	addi	sp,sp,4
10003e3c:	f800283a 	ret

10003e40 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10003e40:	defff304 	addi	sp,sp,-52
10003e44:	dfc00c15 	stw	ra,48(sp)
10003e48:	df000b15 	stw	fp,44(sp)
10003e4c:	df000b04 	addi	fp,sp,44
10003e50:	e13ffc15 	stw	r4,-16(fp)
10003e54:	e17ffd15 	stw	r5,-12(fp)
10003e58:	e1bffe15 	stw	r6,-8(fp)
10003e5c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10003e60:	e0bffd17 	ldw	r2,-12(fp)
10003e64:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10003e68:	00004906 	br	10003f90 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10003e6c:	e0bffc17 	ldw	r2,-16(fp)
10003e70:	10800a17 	ldw	r2,40(r2)
10003e74:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10003e78:	e0bffc17 	ldw	r2,-16(fp)
10003e7c:	10800b17 	ldw	r2,44(r2)
10003e80:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10003e84:	e0fff717 	ldw	r3,-36(fp)
10003e88:	e0bff817 	ldw	r2,-32(fp)
10003e8c:	18800536 	bltu	r3,r2,10003ea4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10003e90:	e0fff717 	ldw	r3,-36(fp)
10003e94:	e0bff817 	ldw	r2,-32(fp)
10003e98:	1885c83a 	sub	r2,r3,r2
10003e9c:	e0bff615 	stw	r2,-40(fp)
10003ea0:	00000406 	br	10003eb4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10003ea4:	00c20004 	movi	r3,2048
10003ea8:	e0bff817 	ldw	r2,-32(fp)
10003eac:	1885c83a 	sub	r2,r3,r2
10003eb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10003eb4:	e0bff617 	ldw	r2,-40(fp)
10003eb8:	1000011e 	bne	r2,zero,10003ec0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10003ebc:	00001d06 	br	10003f34 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10003ec0:	e0fffe17 	ldw	r3,-8(fp)
10003ec4:	e0bff617 	ldw	r2,-40(fp)
10003ec8:	1880022e 	bgeu	r3,r2,10003ed4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10003ecc:	e0bffe17 	ldw	r2,-8(fp)
10003ed0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10003ed4:	e0bff817 	ldw	r2,-32(fp)
10003ed8:	10800e04 	addi	r2,r2,56
10003edc:	e0fffc17 	ldw	r3,-16(fp)
10003ee0:	1885883a 	add	r2,r3,r2
10003ee4:	e13ff517 	ldw	r4,-44(fp)
10003ee8:	100b883a 	mov	r5,r2
10003eec:	e1bff617 	ldw	r6,-40(fp)
10003ef0:	00053c00 	call	100053c0 <memcpy>
      ptr   += n;
10003ef4:	e0fff517 	ldw	r3,-44(fp)
10003ef8:	e0bff617 	ldw	r2,-40(fp)
10003efc:	1885883a 	add	r2,r3,r2
10003f00:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10003f04:	e0fffe17 	ldw	r3,-8(fp)
10003f08:	e0bff617 	ldw	r2,-40(fp)
10003f0c:	1885c83a 	sub	r2,r3,r2
10003f10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003f14:	e0fff817 	ldw	r3,-32(fp)
10003f18:	e0bff617 	ldw	r2,-40(fp)
10003f1c:	1885883a 	add	r2,r3,r2
10003f20:	10c1ffcc 	andi	r3,r2,2047
10003f24:	e0bffc17 	ldw	r2,-16(fp)
10003f28:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10003f2c:	e0bffe17 	ldw	r2,-8(fp)
10003f30:	00bfce16 	blt	zero,r2,10003e6c <__alt_data_end+0xf8003e6c>

    /* If we read any data then return it */
    if (ptr != buffer)
10003f34:	e0fff517 	ldw	r3,-44(fp)
10003f38:	e0bffd17 	ldw	r2,-12(fp)
10003f3c:	18800126 	beq	r3,r2,10003f44 <altera_avalon_jtag_uart_read+0x104>
      break;
10003f40:	00001506 	br	10003f98 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10003f44:	e0bfff17 	ldw	r2,-4(fp)
10003f48:	1090000c 	andi	r2,r2,16384
10003f4c:	10000126 	beq	r2,zero,10003f54 <altera_avalon_jtag_uart_read+0x114>
      break;
10003f50:	00001106 	br	10003f98 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10003f54:	0001883a 	nop
10003f58:	e0bffc17 	ldw	r2,-16(fp)
10003f5c:	10c00a17 	ldw	r3,40(r2)
10003f60:	e0bff717 	ldw	r2,-36(fp)
10003f64:	1880051e 	bne	r3,r2,10003f7c <altera_avalon_jtag_uart_read+0x13c>
10003f68:	e0bffc17 	ldw	r2,-16(fp)
10003f6c:	10c00917 	ldw	r3,36(r2)
10003f70:	e0bffc17 	ldw	r2,-16(fp)
10003f74:	10800117 	ldw	r2,4(r2)
10003f78:	18bff736 	bltu	r3,r2,10003f58 <__alt_data_end+0xf8003f58>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10003f7c:	e0bffc17 	ldw	r2,-16(fp)
10003f80:	10c00a17 	ldw	r3,40(r2)
10003f84:	e0bff717 	ldw	r2,-36(fp)
10003f88:	1880011e 	bne	r3,r2,10003f90 <altera_avalon_jtag_uart_read+0x150>
      break;
10003f8c:	00000206 	br	10003f98 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10003f90:	e0bffe17 	ldw	r2,-8(fp)
10003f94:	00bfb516 	blt	zero,r2,10003e6c <__alt_data_end+0xf8003e6c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10003f98:	e0fff517 	ldw	r3,-44(fp)
10003f9c:	e0bffd17 	ldw	r2,-12(fp)
10003fa0:	18801826 	beq	r3,r2,10004004 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003fa4:	0005303a 	rdctl	r2,status
10003fa8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003fac:	e0fffa17 	ldw	r3,-24(fp)
10003fb0:	00bfff84 	movi	r2,-2
10003fb4:	1884703a 	and	r2,r3,r2
10003fb8:	1001703a 	wrctl	status,r2
  
  return context;
10003fbc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10003fc0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003fc4:	e0bffc17 	ldw	r2,-16(fp)
10003fc8:	10800817 	ldw	r2,32(r2)
10003fcc:	10c00054 	ori	r3,r2,1
10003fd0:	e0bffc17 	ldw	r2,-16(fp)
10003fd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003fd8:	e0bffc17 	ldw	r2,-16(fp)
10003fdc:	10800017 	ldw	r2,0(r2)
10003fe0:	10800104 	addi	r2,r2,4
10003fe4:	1007883a 	mov	r3,r2
10003fe8:	e0bffc17 	ldw	r2,-16(fp)
10003fec:	10800817 	ldw	r2,32(r2)
10003ff0:	18800035 	stwio	r2,0(r3)
10003ff4:	e0bff917 	ldw	r2,-28(fp)
10003ff8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003ffc:	e0bffb17 	ldw	r2,-20(fp)
10004000:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10004004:	e0fff517 	ldw	r3,-44(fp)
10004008:	e0bffd17 	ldw	r2,-12(fp)
1000400c:	18800426 	beq	r3,r2,10004020 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10004010:	e0fff517 	ldw	r3,-44(fp)
10004014:	e0bffd17 	ldw	r2,-12(fp)
10004018:	1885c83a 	sub	r2,r3,r2
1000401c:	00000606 	br	10004038 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10004020:	e0bfff17 	ldw	r2,-4(fp)
10004024:	1090000c 	andi	r2,r2,16384
10004028:	10000226 	beq	r2,zero,10004034 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000402c:	00bffd44 	movi	r2,-11
10004030:	00000106 	br	10004038 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10004034:	00bffec4 	movi	r2,-5
}
10004038:	e037883a 	mov	sp,fp
1000403c:	dfc00117 	ldw	ra,4(sp)
10004040:	df000017 	ldw	fp,0(sp)
10004044:	dec00204 	addi	sp,sp,8
10004048:	f800283a 	ret

1000404c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000404c:	defff304 	addi	sp,sp,-52
10004050:	dfc00c15 	stw	ra,48(sp)
10004054:	df000b15 	stw	fp,44(sp)
10004058:	df000b04 	addi	fp,sp,44
1000405c:	e13ffc15 	stw	r4,-16(fp)
10004060:	e17ffd15 	stw	r5,-12(fp)
10004064:	e1bffe15 	stw	r6,-8(fp)
10004068:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000406c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10004070:	e0bffd17 	ldw	r2,-12(fp)
10004074:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004078:	00003806 	br	1000415c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000407c:	e0bffc17 	ldw	r2,-16(fp)
10004080:	10800c17 	ldw	r2,48(r2)
10004084:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10004088:	e0bffc17 	ldw	r2,-16(fp)
1000408c:	10800d17 	ldw	r2,52(r2)
10004090:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10004094:	e0fff817 	ldw	r3,-32(fp)
10004098:	e0bff517 	ldw	r2,-44(fp)
1000409c:	1880062e 	bgeu	r3,r2,100040b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100040a0:	e0fff517 	ldw	r3,-44(fp)
100040a4:	e0bff817 	ldw	r2,-32(fp)
100040a8:	1885c83a 	sub	r2,r3,r2
100040ac:	10bfffc4 	addi	r2,r2,-1
100040b0:	e0bff615 	stw	r2,-40(fp)
100040b4:	00000b06 	br	100040e4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100040b8:	e0bff517 	ldw	r2,-44(fp)
100040bc:	10000526 	beq	r2,zero,100040d4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100040c0:	00c20004 	movi	r3,2048
100040c4:	e0bff817 	ldw	r2,-32(fp)
100040c8:	1885c83a 	sub	r2,r3,r2
100040cc:	e0bff615 	stw	r2,-40(fp)
100040d0:	00000406 	br	100040e4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100040d4:	00c1ffc4 	movi	r3,2047
100040d8:	e0bff817 	ldw	r2,-32(fp)
100040dc:	1885c83a 	sub	r2,r3,r2
100040e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100040e4:	e0bff617 	ldw	r2,-40(fp)
100040e8:	1000011e 	bne	r2,zero,100040f0 <altera_avalon_jtag_uart_write+0xa4>
        break;
100040ec:	00001d06 	br	10004164 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100040f0:	e0fffe17 	ldw	r3,-8(fp)
100040f4:	e0bff617 	ldw	r2,-40(fp)
100040f8:	1880022e 	bgeu	r3,r2,10004104 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100040fc:	e0bffe17 	ldw	r2,-8(fp)
10004100:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10004104:	e0bff817 	ldw	r2,-32(fp)
10004108:	10820e04 	addi	r2,r2,2104
1000410c:	e0fffc17 	ldw	r3,-16(fp)
10004110:	1885883a 	add	r2,r3,r2
10004114:	1009883a 	mov	r4,r2
10004118:	e17ffd17 	ldw	r5,-12(fp)
1000411c:	e1bff617 	ldw	r6,-40(fp)
10004120:	00053c00 	call	100053c0 <memcpy>
      ptr   += n;
10004124:	e0fffd17 	ldw	r3,-12(fp)
10004128:	e0bff617 	ldw	r2,-40(fp)
1000412c:	1885883a 	add	r2,r3,r2
10004130:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004134:	e0fffe17 	ldw	r3,-8(fp)
10004138:	e0bff617 	ldw	r2,-40(fp)
1000413c:	1885c83a 	sub	r2,r3,r2
10004140:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004144:	e0fff817 	ldw	r3,-32(fp)
10004148:	e0bff617 	ldw	r2,-40(fp)
1000414c:	1885883a 	add	r2,r3,r2
10004150:	10c1ffcc 	andi	r3,r2,2047
10004154:	e0bffc17 	ldw	r2,-16(fp)
10004158:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000415c:	e0bffe17 	ldw	r2,-8(fp)
10004160:	00bfc616 	blt	zero,r2,1000407c <__alt_data_end+0xf800407c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004164:	0005303a 	rdctl	r2,status
10004168:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000416c:	e0fffa17 	ldw	r3,-24(fp)
10004170:	00bfff84 	movi	r2,-2
10004174:	1884703a 	and	r2,r3,r2
10004178:	1001703a 	wrctl	status,r2
  
  return context;
1000417c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10004180:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004184:	e0bffc17 	ldw	r2,-16(fp)
10004188:	10800817 	ldw	r2,32(r2)
1000418c:	10c00094 	ori	r3,r2,2
10004190:	e0bffc17 	ldw	r2,-16(fp)
10004194:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004198:	e0bffc17 	ldw	r2,-16(fp)
1000419c:	10800017 	ldw	r2,0(r2)
100041a0:	10800104 	addi	r2,r2,4
100041a4:	1007883a 	mov	r3,r2
100041a8:	e0bffc17 	ldw	r2,-16(fp)
100041ac:	10800817 	ldw	r2,32(r2)
100041b0:	18800035 	stwio	r2,0(r3)
100041b4:	e0bff917 	ldw	r2,-28(fp)
100041b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100041bc:	e0bffb17 	ldw	r2,-20(fp)
100041c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100041c4:	e0bffe17 	ldw	r2,-8(fp)
100041c8:	0080120e 	bge	zero,r2,10004214 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100041cc:	e0bfff17 	ldw	r2,-4(fp)
100041d0:	1090000c 	andi	r2,r2,16384
100041d4:	10000126 	beq	r2,zero,100041dc <altera_avalon_jtag_uart_write+0x190>
        break;
100041d8:	00001006 	br	1000421c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100041dc:	0001883a 	nop
100041e0:	e0bffc17 	ldw	r2,-16(fp)
100041e4:	10c00d17 	ldw	r3,52(r2)
100041e8:	e0bff517 	ldw	r2,-44(fp)
100041ec:	1880051e 	bne	r3,r2,10004204 <altera_avalon_jtag_uart_write+0x1b8>
100041f0:	e0bffc17 	ldw	r2,-16(fp)
100041f4:	10c00917 	ldw	r3,36(r2)
100041f8:	e0bffc17 	ldw	r2,-16(fp)
100041fc:	10800117 	ldw	r2,4(r2)
10004200:	18bff736 	bltu	r3,r2,100041e0 <__alt_data_end+0xf80041e0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10004204:	e0bffc17 	ldw	r2,-16(fp)
10004208:	10800917 	ldw	r2,36(r2)
1000420c:	10000126 	beq	r2,zero,10004214 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10004210:	00000206 	br	1000421c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10004214:	e0bffe17 	ldw	r2,-8(fp)
10004218:	00bf9716 	blt	zero,r2,10004078 <__alt_data_end+0xf8004078>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000421c:	e0fffd17 	ldw	r3,-12(fp)
10004220:	e0bff717 	ldw	r2,-36(fp)
10004224:	18800426 	beq	r3,r2,10004238 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10004228:	e0fffd17 	ldw	r3,-12(fp)
1000422c:	e0bff717 	ldw	r2,-36(fp)
10004230:	1885c83a 	sub	r2,r3,r2
10004234:	00000606 	br	10004250 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10004238:	e0bfff17 	ldw	r2,-4(fp)
1000423c:	1090000c 	andi	r2,r2,16384
10004240:	10000226 	beq	r2,zero,1000424c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10004244:	00bffd44 	movi	r2,-11
10004248:	00000106 	br	10004250 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000424c:	00bffec4 	movi	r2,-5
}
10004250:	e037883a 	mov	sp,fp
10004254:	dfc00117 	ldw	ra,4(sp)
10004258:	df000017 	ldw	fp,0(sp)
1000425c:	dec00204 	addi	sp,sp,8
10004260:	f800283a 	ret

10004264 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10004264:	defff504 	addi	sp,sp,-44
10004268:	df000a15 	stw	fp,40(sp)
1000426c:	df000a04 	addi	fp,sp,40
10004270:	e13ffc15 	stw	r4,-16(fp)
10004274:	e17ffd15 	stw	r5,-12(fp)
10004278:	e1bffe15 	stw	r6,-8(fp)
1000427c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10004280:	e03ff615 	stw	zero,-40(fp)
10004284:	00840074 	movhi	r2,4097
10004288:	10a1a004 	addi	r2,r2,-31104
1000428c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10004290:	10003f26 	beq	r2,zero,10004390 <alt_alarm_start+0x12c>
  {
    if (alarm)
10004294:	e0bffc17 	ldw	r2,-16(fp)
10004298:	10003b26 	beq	r2,zero,10004388 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000429c:	e0bffc17 	ldw	r2,-16(fp)
100042a0:	e0fffe17 	ldw	r3,-8(fp)
100042a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100042a8:	e0bffc17 	ldw	r2,-16(fp)
100042ac:	e0ffff17 	ldw	r3,-4(fp)
100042b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100042b4:	0005303a 	rdctl	r2,status
100042b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100042bc:	e0fff817 	ldw	r3,-32(fp)
100042c0:	00bfff84 	movi	r2,-2
100042c4:	1884703a 	and	r2,r3,r2
100042c8:	1001703a 	wrctl	status,r2
  
  return context;
100042cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100042d0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100042d4:	00840074 	movhi	r2,4097
100042d8:	10a1a104 	addi	r2,r2,-31100
100042dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100042e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100042e4:	e0fffd17 	ldw	r3,-12(fp)
100042e8:	e0bff617 	ldw	r2,-40(fp)
100042ec:	1885883a 	add	r2,r3,r2
100042f0:	10c00044 	addi	r3,r2,1
100042f4:	e0bffc17 	ldw	r2,-16(fp)
100042f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100042fc:	e0bffc17 	ldw	r2,-16(fp)
10004300:	10c00217 	ldw	r3,8(r2)
10004304:	e0bff617 	ldw	r2,-40(fp)
10004308:	1880042e 	bgeu	r3,r2,1000431c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000430c:	e0bffc17 	ldw	r2,-16(fp)
10004310:	00c00044 	movi	r3,1
10004314:	10c00405 	stb	r3,16(r2)
10004318:	00000206 	br	10004324 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000431c:	e0bffc17 	ldw	r2,-16(fp)
10004320:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10004324:	e0fffc17 	ldw	r3,-16(fp)
10004328:	00840034 	movhi	r2,4096
1000432c:	109bfd04 	addi	r2,r2,28660
10004330:	e0bff915 	stw	r2,-28(fp)
10004334:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004338:	e0bffa17 	ldw	r2,-24(fp)
1000433c:	e0fff917 	ldw	r3,-28(fp)
10004340:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004344:	e0bff917 	ldw	r2,-28(fp)
10004348:	10c00017 	ldw	r3,0(r2)
1000434c:	e0bffa17 	ldw	r2,-24(fp)
10004350:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004354:	e0bff917 	ldw	r2,-28(fp)
10004358:	10800017 	ldw	r2,0(r2)
1000435c:	e0fffa17 	ldw	r3,-24(fp)
10004360:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004364:	e0bff917 	ldw	r2,-28(fp)
10004368:	e0fffa17 	ldw	r3,-24(fp)
1000436c:	10c00015 	stw	r3,0(r2)
10004370:	e0bff717 	ldw	r2,-36(fp)
10004374:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004378:	e0bffb17 	ldw	r2,-20(fp)
1000437c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004380:	0005883a 	mov	r2,zero
10004384:	00000306 	br	10004394 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10004388:	00bffa84 	movi	r2,-22
1000438c:	00000106 	br	10004394 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10004390:	00bfde84 	movi	r2,-134
  }
}
10004394:	e037883a 	mov	sp,fp
10004398:	df000017 	ldw	fp,0(sp)
1000439c:	dec00104 	addi	sp,sp,4
100043a0:	f800283a 	ret

100043a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100043a4:	defffe04 	addi	sp,sp,-8
100043a8:	dfc00115 	stw	ra,4(sp)
100043ac:	df000015 	stw	fp,0(sp)
100043b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100043b4:	00840034 	movhi	r2,4096
100043b8:	109bfb04 	addi	r2,r2,28652
100043bc:	10800017 	ldw	r2,0(r2)
100043c0:	10000526 	beq	r2,zero,100043d8 <alt_get_errno+0x34>
100043c4:	00840034 	movhi	r2,4096
100043c8:	109bfb04 	addi	r2,r2,28652
100043cc:	10800017 	ldw	r2,0(r2)
100043d0:	103ee83a 	callr	r2
100043d4:	00000206 	br	100043e0 <alt_get_errno+0x3c>
100043d8:	00840074 	movhi	r2,4097
100043dc:	10a1a304 	addi	r2,r2,-31092
}
100043e0:	e037883a 	mov	sp,fp
100043e4:	dfc00117 	ldw	ra,4(sp)
100043e8:	df000017 	ldw	fp,0(sp)
100043ec:	dec00204 	addi	sp,sp,8
100043f0:	f800283a 	ret

100043f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100043f4:	defffb04 	addi	sp,sp,-20
100043f8:	dfc00415 	stw	ra,16(sp)
100043fc:	df000315 	stw	fp,12(sp)
10004400:	df000304 	addi	fp,sp,12
10004404:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10004408:	e0bfff17 	ldw	r2,-4(fp)
1000440c:	10000816 	blt	r2,zero,10004430 <close+0x3c>
10004410:	e13fff17 	ldw	r4,-4(fp)
10004414:	01400304 	movi	r5,12
10004418:	000223c0 	call	1000223c <__mulsi3>
1000441c:	1007883a 	mov	r3,r2
10004420:	00840034 	movhi	r2,4096
10004424:	109b9404 	addi	r2,r2,28240
10004428:	1885883a 	add	r2,r3,r2
1000442c:	00000106 	br	10004434 <close+0x40>
10004430:	0005883a 	mov	r2,zero
10004434:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10004438:	e0bffd17 	ldw	r2,-12(fp)
1000443c:	10001926 	beq	r2,zero,100044a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10004440:	e0bffd17 	ldw	r2,-12(fp)
10004444:	10800017 	ldw	r2,0(r2)
10004448:	10800417 	ldw	r2,16(r2)
1000444c:	10000626 	beq	r2,zero,10004468 <close+0x74>
10004450:	e0bffd17 	ldw	r2,-12(fp)
10004454:	10800017 	ldw	r2,0(r2)
10004458:	10800417 	ldw	r2,16(r2)
1000445c:	e13ffd17 	ldw	r4,-12(fp)
10004460:	103ee83a 	callr	r2
10004464:	00000106 	br	1000446c <close+0x78>
10004468:	0005883a 	mov	r2,zero
1000446c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10004470:	e13fff17 	ldw	r4,-4(fp)
10004474:	0004da80 	call	10004da8 <alt_release_fd>
    if (rval < 0)
10004478:	e0bffe17 	ldw	r2,-8(fp)
1000447c:	1000070e 	bge	r2,zero,1000449c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10004480:	00043a40 	call	100043a4 <alt_get_errno>
10004484:	1007883a 	mov	r3,r2
10004488:	e0bffe17 	ldw	r2,-8(fp)
1000448c:	0085c83a 	sub	r2,zero,r2
10004490:	18800015 	stw	r2,0(r3)
      return -1;
10004494:	00bfffc4 	movi	r2,-1
10004498:	00000706 	br	100044b8 <close+0xc4>
    }
    return 0;
1000449c:	0005883a 	mov	r2,zero
100044a0:	00000506 	br	100044b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100044a4:	00043a40 	call	100043a4 <alt_get_errno>
100044a8:	1007883a 	mov	r3,r2
100044ac:	00801444 	movi	r2,81
100044b0:	18800015 	stw	r2,0(r3)
    return -1;
100044b4:	00bfffc4 	movi	r2,-1
  }
}
100044b8:	e037883a 	mov	sp,fp
100044bc:	dfc00117 	ldw	ra,4(sp)
100044c0:	df000017 	ldw	fp,0(sp)
100044c4:	dec00204 	addi	sp,sp,8
100044c8:	f800283a 	ret

100044cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100044cc:	deffff04 	addi	sp,sp,-4
100044d0:	df000015 	stw	fp,0(sp)
100044d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100044d8:	e037883a 	mov	sp,fp
100044dc:	df000017 	ldw	fp,0(sp)
100044e0:	dec00104 	addi	sp,sp,4
100044e4:	f800283a 	ret

100044e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100044e8:	defffc04 	addi	sp,sp,-16
100044ec:	df000315 	stw	fp,12(sp)
100044f0:	df000304 	addi	fp,sp,12
100044f4:	e13ffd15 	stw	r4,-12(fp)
100044f8:	e17ffe15 	stw	r5,-8(fp)
100044fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
10004500:	e0bfff17 	ldw	r2,-4(fp)
}
10004504:	e037883a 	mov	sp,fp
10004508:	df000017 	ldw	fp,0(sp)
1000450c:	dec00104 	addi	sp,sp,4
10004510:	f800283a 	ret

10004514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004514:	defffe04 	addi	sp,sp,-8
10004518:	dfc00115 	stw	ra,4(sp)
1000451c:	df000015 	stw	fp,0(sp)
10004520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004524:	00840034 	movhi	r2,4096
10004528:	109bfb04 	addi	r2,r2,28652
1000452c:	10800017 	ldw	r2,0(r2)
10004530:	10000526 	beq	r2,zero,10004548 <alt_get_errno+0x34>
10004534:	00840034 	movhi	r2,4096
10004538:	109bfb04 	addi	r2,r2,28652
1000453c:	10800017 	ldw	r2,0(r2)
10004540:	103ee83a 	callr	r2
10004544:	00000206 	br	10004550 <alt_get_errno+0x3c>
10004548:	00840074 	movhi	r2,4097
1000454c:	10a1a304 	addi	r2,r2,-31092
}
10004550:	e037883a 	mov	sp,fp
10004554:	dfc00117 	ldw	ra,4(sp)
10004558:	df000017 	ldw	fp,0(sp)
1000455c:	dec00204 	addi	sp,sp,8
10004560:	f800283a 	ret

10004564 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10004564:	defffa04 	addi	sp,sp,-24
10004568:	dfc00515 	stw	ra,20(sp)
1000456c:	df000415 	stw	fp,16(sp)
10004570:	df000404 	addi	fp,sp,16
10004574:	e13ffe15 	stw	r4,-8(fp)
10004578:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000457c:	e0bffe17 	ldw	r2,-8(fp)
10004580:	10000326 	beq	r2,zero,10004590 <alt_dev_llist_insert+0x2c>
10004584:	e0bffe17 	ldw	r2,-8(fp)
10004588:	10800217 	ldw	r2,8(r2)
1000458c:	1000061e 	bne	r2,zero,100045a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10004590:	00045140 	call	10004514 <alt_get_errno>
10004594:	1007883a 	mov	r3,r2
10004598:	00800584 	movi	r2,22
1000459c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100045a0:	00bffa84 	movi	r2,-22
100045a4:	00001306 	br	100045f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100045a8:	e0bffe17 	ldw	r2,-8(fp)
100045ac:	e0ffff17 	ldw	r3,-4(fp)
100045b0:	e0fffc15 	stw	r3,-16(fp)
100045b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100045b8:	e0bffd17 	ldw	r2,-12(fp)
100045bc:	e0fffc17 	ldw	r3,-16(fp)
100045c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100045c4:	e0bffc17 	ldw	r2,-16(fp)
100045c8:	10c00017 	ldw	r3,0(r2)
100045cc:	e0bffd17 	ldw	r2,-12(fp)
100045d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100045d4:	e0bffc17 	ldw	r2,-16(fp)
100045d8:	10800017 	ldw	r2,0(r2)
100045dc:	e0fffd17 	ldw	r3,-12(fp)
100045e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100045e4:	e0bffc17 	ldw	r2,-16(fp)
100045e8:	e0fffd17 	ldw	r3,-12(fp)
100045ec:	10c00015 	stw	r3,0(r2)

  return 0;  
100045f0:	0005883a 	mov	r2,zero
}
100045f4:	e037883a 	mov	sp,fp
100045f8:	dfc00117 	ldw	ra,4(sp)
100045fc:	df000017 	ldw	fp,0(sp)
10004600:	dec00204 	addi	sp,sp,8
10004604:	f800283a 	ret

10004608 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10004608:	defffd04 	addi	sp,sp,-12
1000460c:	dfc00215 	stw	ra,8(sp)
10004610:	df000115 	stw	fp,4(sp)
10004614:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004618:	00840034 	movhi	r2,4096
1000461c:	10961a04 	addi	r2,r2,22632
10004620:	e0bfff15 	stw	r2,-4(fp)
10004624:	00000606 	br	10004640 <_do_ctors+0x38>
        (*ctor) (); 
10004628:	e0bfff17 	ldw	r2,-4(fp)
1000462c:	10800017 	ldw	r2,0(r2)
10004630:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004634:	e0bfff17 	ldw	r2,-4(fp)
10004638:	10bfff04 	addi	r2,r2,-4
1000463c:	e0bfff15 	stw	r2,-4(fp)
10004640:	e0ffff17 	ldw	r3,-4(fp)
10004644:	00840034 	movhi	r2,4096
10004648:	10961b04 	addi	r2,r2,22636
1000464c:	18bff62e 	bgeu	r3,r2,10004628 <__alt_data_end+0xf8004628>
        (*ctor) (); 
}
10004650:	e037883a 	mov	sp,fp
10004654:	dfc00117 	ldw	ra,4(sp)
10004658:	df000017 	ldw	fp,0(sp)
1000465c:	dec00204 	addi	sp,sp,8
10004660:	f800283a 	ret

10004664 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10004664:	defffd04 	addi	sp,sp,-12
10004668:	dfc00215 	stw	ra,8(sp)
1000466c:	df000115 	stw	fp,4(sp)
10004670:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004674:	00840034 	movhi	r2,4096
10004678:	10961a04 	addi	r2,r2,22632
1000467c:	e0bfff15 	stw	r2,-4(fp)
10004680:	00000606 	br	1000469c <_do_dtors+0x38>
        (*dtor) (); 
10004684:	e0bfff17 	ldw	r2,-4(fp)
10004688:	10800017 	ldw	r2,0(r2)
1000468c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004690:	e0bfff17 	ldw	r2,-4(fp)
10004694:	10bfff04 	addi	r2,r2,-4
10004698:	e0bfff15 	stw	r2,-4(fp)
1000469c:	e0ffff17 	ldw	r3,-4(fp)
100046a0:	00840034 	movhi	r2,4096
100046a4:	10961b04 	addi	r2,r2,22636
100046a8:	18bff62e 	bgeu	r3,r2,10004684 <__alt_data_end+0xf8004684>
        (*dtor) (); 
}
100046ac:	e037883a 	mov	sp,fp
100046b0:	dfc00117 	ldw	ra,4(sp)
100046b4:	df000017 	ldw	fp,0(sp)
100046b8:	dec00204 	addi	sp,sp,8
100046bc:	f800283a 	ret

100046c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100046c0:	deffff04 	addi	sp,sp,-4
100046c4:	df000015 	stw	fp,0(sp)
100046c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100046cc:	e037883a 	mov	sp,fp
100046d0:	df000017 	ldw	fp,0(sp)
100046d4:	dec00104 	addi	sp,sp,4
100046d8:	f800283a 	ret

100046dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100046dc:	defff904 	addi	sp,sp,-28
100046e0:	dfc00615 	stw	ra,24(sp)
100046e4:	df000515 	stw	fp,20(sp)
100046e8:	df000504 	addi	fp,sp,20
100046ec:	e13ffc15 	stw	r4,-16(fp)
100046f0:	e17ffd15 	stw	r5,-12(fp)
100046f4:	e1bffe15 	stw	r6,-8(fp)
100046f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100046fc:	e0800217 	ldw	r2,8(fp)
10004700:	d8800015 	stw	r2,0(sp)
10004704:	e13ffc17 	ldw	r4,-16(fp)
10004708:	e17ffd17 	ldw	r5,-12(fp)
1000470c:	e1bffe17 	ldw	r6,-8(fp)
10004710:	e1ffff17 	ldw	r7,-4(fp)
10004714:	00048bc0 	call	100048bc <alt_iic_isr_register>
}  
10004718:	e037883a 	mov	sp,fp
1000471c:	dfc00117 	ldw	ra,4(sp)
10004720:	df000017 	ldw	fp,0(sp)
10004724:	dec00204 	addi	sp,sp,8
10004728:	f800283a 	ret

1000472c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000472c:	defff904 	addi	sp,sp,-28
10004730:	df000615 	stw	fp,24(sp)
10004734:	df000604 	addi	fp,sp,24
10004738:	e13ffe15 	stw	r4,-8(fp)
1000473c:	e17fff15 	stw	r5,-4(fp)
10004740:	e0bfff17 	ldw	r2,-4(fp)
10004744:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004748:	0005303a 	rdctl	r2,status
1000474c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004750:	e0fffb17 	ldw	r3,-20(fp)
10004754:	00bfff84 	movi	r2,-2
10004758:	1884703a 	and	r2,r3,r2
1000475c:	1001703a 	wrctl	status,r2
  
  return context;
10004760:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004764:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10004768:	e0bffa17 	ldw	r2,-24(fp)
1000476c:	00c00044 	movi	r3,1
10004770:	1884983a 	sll	r2,r3,r2
10004774:	1007883a 	mov	r3,r2
10004778:	00840074 	movhi	r2,4097
1000477c:	10a19f04 	addi	r2,r2,-31108
10004780:	10800017 	ldw	r2,0(r2)
10004784:	1886b03a 	or	r3,r3,r2
10004788:	00840074 	movhi	r2,4097
1000478c:	10a19f04 	addi	r2,r2,-31108
10004790:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004794:	00840074 	movhi	r2,4097
10004798:	10a19f04 	addi	r2,r2,-31108
1000479c:	10800017 	ldw	r2,0(r2)
100047a0:	100170fa 	wrctl	ienable,r2
100047a4:	e0bffc17 	ldw	r2,-16(fp)
100047a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100047ac:	e0bffd17 	ldw	r2,-12(fp)
100047b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100047b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100047b8:	0001883a 	nop
}
100047bc:	e037883a 	mov	sp,fp
100047c0:	df000017 	ldw	fp,0(sp)
100047c4:	dec00104 	addi	sp,sp,4
100047c8:	f800283a 	ret

100047cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100047cc:	defff904 	addi	sp,sp,-28
100047d0:	df000615 	stw	fp,24(sp)
100047d4:	df000604 	addi	fp,sp,24
100047d8:	e13ffe15 	stw	r4,-8(fp)
100047dc:	e17fff15 	stw	r5,-4(fp)
100047e0:	e0bfff17 	ldw	r2,-4(fp)
100047e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100047e8:	0005303a 	rdctl	r2,status
100047ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100047f0:	e0fffb17 	ldw	r3,-20(fp)
100047f4:	00bfff84 	movi	r2,-2
100047f8:	1884703a 	and	r2,r3,r2
100047fc:	1001703a 	wrctl	status,r2
  
  return context;
10004800:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004804:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10004808:	e0bffa17 	ldw	r2,-24(fp)
1000480c:	00c00044 	movi	r3,1
10004810:	1884983a 	sll	r2,r3,r2
10004814:	0084303a 	nor	r2,zero,r2
10004818:	1007883a 	mov	r3,r2
1000481c:	00840074 	movhi	r2,4097
10004820:	10a19f04 	addi	r2,r2,-31108
10004824:	10800017 	ldw	r2,0(r2)
10004828:	1886703a 	and	r3,r3,r2
1000482c:	00840074 	movhi	r2,4097
10004830:	10a19f04 	addi	r2,r2,-31108
10004834:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004838:	00840074 	movhi	r2,4097
1000483c:	10a19f04 	addi	r2,r2,-31108
10004840:	10800017 	ldw	r2,0(r2)
10004844:	100170fa 	wrctl	ienable,r2
10004848:	e0bffc17 	ldw	r2,-16(fp)
1000484c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004850:	e0bffd17 	ldw	r2,-12(fp)
10004854:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10004858:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000485c:	0001883a 	nop
}
10004860:	e037883a 	mov	sp,fp
10004864:	df000017 	ldw	fp,0(sp)
10004868:	dec00104 	addi	sp,sp,4
1000486c:	f800283a 	ret

10004870 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10004870:	defffc04 	addi	sp,sp,-16
10004874:	df000315 	stw	fp,12(sp)
10004878:	df000304 	addi	fp,sp,12
1000487c:	e13ffe15 	stw	r4,-8(fp)
10004880:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10004884:	000530fa 	rdctl	r2,ienable
10004888:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000488c:	e0bfff17 	ldw	r2,-4(fp)
10004890:	00c00044 	movi	r3,1
10004894:	1884983a 	sll	r2,r3,r2
10004898:	1007883a 	mov	r3,r2
1000489c:	e0bffd17 	ldw	r2,-12(fp)
100048a0:	1884703a 	and	r2,r3,r2
100048a4:	1004c03a 	cmpne	r2,r2,zero
100048a8:	10803fcc 	andi	r2,r2,255
}
100048ac:	e037883a 	mov	sp,fp
100048b0:	df000017 	ldw	fp,0(sp)
100048b4:	dec00104 	addi	sp,sp,4
100048b8:	f800283a 	ret

100048bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100048bc:	defff504 	addi	sp,sp,-44
100048c0:	dfc00a15 	stw	ra,40(sp)
100048c4:	df000915 	stw	fp,36(sp)
100048c8:	df000904 	addi	fp,sp,36
100048cc:	e13ffc15 	stw	r4,-16(fp)
100048d0:	e17ffd15 	stw	r5,-12(fp)
100048d4:	e1bffe15 	stw	r6,-8(fp)
100048d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100048dc:	00bffa84 	movi	r2,-22
100048e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100048e4:	e0bffd17 	ldw	r2,-12(fp)
100048e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100048ec:	e0bff817 	ldw	r2,-32(fp)
100048f0:	10800808 	cmpgei	r2,r2,32
100048f4:	1000271e 	bne	r2,zero,10004994 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100048f8:	0005303a 	rdctl	r2,status
100048fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004900:	e0fffa17 	ldw	r3,-24(fp)
10004904:	00bfff84 	movi	r2,-2
10004908:	1884703a 	and	r2,r3,r2
1000490c:	1001703a 	wrctl	status,r2
  
  return context;
10004910:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10004914:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10004918:	00840074 	movhi	r2,4097
1000491c:	10a1ec04 	addi	r2,r2,-30800
10004920:	e0fff817 	ldw	r3,-32(fp)
10004924:	180690fa 	slli	r3,r3,3
10004928:	10c5883a 	add	r2,r2,r3
1000492c:	e0fffe17 	ldw	r3,-8(fp)
10004930:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10004934:	00840074 	movhi	r2,4097
10004938:	10a1ec04 	addi	r2,r2,-30800
1000493c:	e0fff817 	ldw	r3,-32(fp)
10004940:	180690fa 	slli	r3,r3,3
10004944:	10c5883a 	add	r2,r2,r3
10004948:	10800104 	addi	r2,r2,4
1000494c:	e0ffff17 	ldw	r3,-4(fp)
10004950:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10004954:	e0bffe17 	ldw	r2,-8(fp)
10004958:	10000526 	beq	r2,zero,10004970 <alt_iic_isr_register+0xb4>
1000495c:	e0bff817 	ldw	r2,-32(fp)
10004960:	e13ffc17 	ldw	r4,-16(fp)
10004964:	100b883a 	mov	r5,r2
10004968:	000472c0 	call	1000472c <alt_ic_irq_enable>
1000496c:	00000406 	br	10004980 <alt_iic_isr_register+0xc4>
10004970:	e0bff817 	ldw	r2,-32(fp)
10004974:	e13ffc17 	ldw	r4,-16(fp)
10004978:	100b883a 	mov	r5,r2
1000497c:	00047cc0 	call	100047cc <alt_ic_irq_disable>
10004980:	e0bff715 	stw	r2,-36(fp)
10004984:	e0bff917 	ldw	r2,-28(fp)
10004988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000498c:	e0bffb17 	ldw	r2,-20(fp)
10004990:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10004994:	e0bff717 	ldw	r2,-36(fp)
}
10004998:	e037883a 	mov	sp,fp
1000499c:	dfc00117 	ldw	ra,4(sp)
100049a0:	df000017 	ldw	fp,0(sp)
100049a4:	dec00204 	addi	sp,sp,8
100049a8:	f800283a 	ret

100049ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100049ac:	defff804 	addi	sp,sp,-32
100049b0:	dfc00715 	stw	ra,28(sp)
100049b4:	df000615 	stw	fp,24(sp)
100049b8:	dc000515 	stw	r16,20(sp)
100049bc:	df000604 	addi	fp,sp,24
100049c0:	e13ffb15 	stw	r4,-20(fp)
100049c4:	e17ffc15 	stw	r5,-16(fp)
100049c8:	e1bffd15 	stw	r6,-12(fp)
100049cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100049d0:	e13ffc17 	ldw	r4,-16(fp)
100049d4:	e17ffd17 	ldw	r5,-12(fp)
100049d8:	e1bffe17 	ldw	r6,-8(fp)
100049dc:	0004c480 	call	10004c48 <open>
100049e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100049e4:	e0bffa17 	ldw	r2,-24(fp)
100049e8:	10002216 	blt	r2,zero,10004a74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100049ec:	04040034 	movhi	r16,4096
100049f0:	841b9404 	addi	r16,r16,28240
100049f4:	e0bffa17 	ldw	r2,-24(fp)
100049f8:	1009883a 	mov	r4,r2
100049fc:	01400304 	movi	r5,12
10004a00:	000223c0 	call	1000223c <__mulsi3>
10004a04:	8085883a 	add	r2,r16,r2
10004a08:	10c00017 	ldw	r3,0(r2)
10004a0c:	e0bffb17 	ldw	r2,-20(fp)
10004a10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10004a14:	04040034 	movhi	r16,4096
10004a18:	841b9404 	addi	r16,r16,28240
10004a1c:	e0bffa17 	ldw	r2,-24(fp)
10004a20:	1009883a 	mov	r4,r2
10004a24:	01400304 	movi	r5,12
10004a28:	000223c0 	call	1000223c <__mulsi3>
10004a2c:	8085883a 	add	r2,r16,r2
10004a30:	10800104 	addi	r2,r2,4
10004a34:	10c00017 	ldw	r3,0(r2)
10004a38:	e0bffb17 	ldw	r2,-20(fp)
10004a3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10004a40:	04040034 	movhi	r16,4096
10004a44:	841b9404 	addi	r16,r16,28240
10004a48:	e0bffa17 	ldw	r2,-24(fp)
10004a4c:	1009883a 	mov	r4,r2
10004a50:	01400304 	movi	r5,12
10004a54:	000223c0 	call	1000223c <__mulsi3>
10004a58:	8085883a 	add	r2,r16,r2
10004a5c:	10800204 	addi	r2,r2,8
10004a60:	10c00017 	ldw	r3,0(r2)
10004a64:	e0bffb17 	ldw	r2,-20(fp)
10004a68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10004a6c:	e13ffa17 	ldw	r4,-24(fp)
10004a70:	0004da80 	call	10004da8 <alt_release_fd>
  }
} 
10004a74:	e6ffff04 	addi	sp,fp,-4
10004a78:	dfc00217 	ldw	ra,8(sp)
10004a7c:	df000117 	ldw	fp,4(sp)
10004a80:	dc000017 	ldw	r16,0(sp)
10004a84:	dec00304 	addi	sp,sp,12
10004a88:	f800283a 	ret

10004a8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10004a8c:	defffb04 	addi	sp,sp,-20
10004a90:	dfc00415 	stw	ra,16(sp)
10004a94:	df000315 	stw	fp,12(sp)
10004a98:	df000304 	addi	fp,sp,12
10004a9c:	e13ffd15 	stw	r4,-12(fp)
10004aa0:	e17ffe15 	stw	r5,-8(fp)
10004aa4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10004aa8:	01040034 	movhi	r4,4096
10004aac:	211b9704 	addi	r4,r4,28252
10004ab0:	e17ffd17 	ldw	r5,-12(fp)
10004ab4:	01800044 	movi	r6,1
10004ab8:	01c07fc4 	movi	r7,511
10004abc:	00049ac0 	call	100049ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004ac0:	01040034 	movhi	r4,4096
10004ac4:	211b9404 	addi	r4,r4,28240
10004ac8:	e17ffe17 	ldw	r5,-8(fp)
10004acc:	000d883a 	mov	r6,zero
10004ad0:	01c07fc4 	movi	r7,511
10004ad4:	00049ac0 	call	100049ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10004ad8:	01040034 	movhi	r4,4096
10004adc:	211b9a04 	addi	r4,r4,28264
10004ae0:	e17fff17 	ldw	r5,-4(fp)
10004ae4:	01800044 	movi	r6,1
10004ae8:	01c07fc4 	movi	r7,511
10004aec:	00049ac0 	call	100049ac <alt_open_fd>
}  
10004af0:	e037883a 	mov	sp,fp
10004af4:	dfc00117 	ldw	ra,4(sp)
10004af8:	df000017 	ldw	fp,0(sp)
10004afc:	dec00204 	addi	sp,sp,8
10004b00:	f800283a 	ret

10004b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004b04:	defffe04 	addi	sp,sp,-8
10004b08:	dfc00115 	stw	ra,4(sp)
10004b0c:	df000015 	stw	fp,0(sp)
10004b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004b14:	00840034 	movhi	r2,4096
10004b18:	109bfb04 	addi	r2,r2,28652
10004b1c:	10800017 	ldw	r2,0(r2)
10004b20:	10000526 	beq	r2,zero,10004b38 <alt_get_errno+0x34>
10004b24:	00840034 	movhi	r2,4096
10004b28:	109bfb04 	addi	r2,r2,28652
10004b2c:	10800017 	ldw	r2,0(r2)
10004b30:	103ee83a 	callr	r2
10004b34:	00000206 	br	10004b40 <alt_get_errno+0x3c>
10004b38:	00840074 	movhi	r2,4097
10004b3c:	10a1a304 	addi	r2,r2,-31092
}
10004b40:	e037883a 	mov	sp,fp
10004b44:	dfc00117 	ldw	ra,4(sp)
10004b48:	df000017 	ldw	fp,0(sp)
10004b4c:	dec00204 	addi	sp,sp,8
10004b50:	f800283a 	ret

10004b54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10004b54:	defffb04 	addi	sp,sp,-20
10004b58:	dfc00415 	stw	ra,16(sp)
10004b5c:	df000315 	stw	fp,12(sp)
10004b60:	dc000215 	stw	r16,8(sp)
10004b64:	df000304 	addi	fp,sp,12
10004b68:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10004b6c:	e0bffe17 	ldw	r2,-8(fp)
10004b70:	10800217 	ldw	r2,8(r2)
10004b74:	10d00034 	orhi	r3,r2,16384
10004b78:	e0bffe17 	ldw	r2,-8(fp)
10004b7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004b80:	e03ffd15 	stw	zero,-12(fp)
10004b84:	00002306 	br	10004c14 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004b88:	04040034 	movhi	r16,4096
10004b8c:	841b9404 	addi	r16,r16,28240
10004b90:	e0bffd17 	ldw	r2,-12(fp)
10004b94:	1009883a 	mov	r4,r2
10004b98:	01400304 	movi	r5,12
10004b9c:	000223c0 	call	1000223c <__mulsi3>
10004ba0:	8085883a 	add	r2,r16,r2
10004ba4:	10c00017 	ldw	r3,0(r2)
10004ba8:	e0bffe17 	ldw	r2,-8(fp)
10004bac:	10800017 	ldw	r2,0(r2)
10004bb0:	1880151e 	bne	r3,r2,10004c08 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004bb4:	04040034 	movhi	r16,4096
10004bb8:	841b9404 	addi	r16,r16,28240
10004bbc:	e0bffd17 	ldw	r2,-12(fp)
10004bc0:	1009883a 	mov	r4,r2
10004bc4:	01400304 	movi	r5,12
10004bc8:	000223c0 	call	1000223c <__mulsi3>
10004bcc:	8085883a 	add	r2,r16,r2
10004bd0:	10800204 	addi	r2,r2,8
10004bd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004bd8:	10000b0e 	bge	r2,zero,10004c08 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10004bdc:	e13ffd17 	ldw	r4,-12(fp)
10004be0:	01400304 	movi	r5,12
10004be4:	000223c0 	call	1000223c <__mulsi3>
10004be8:	1007883a 	mov	r3,r2
10004bec:	00840034 	movhi	r2,4096
10004bf0:	109b9404 	addi	r2,r2,28240
10004bf4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004bf8:	e0bffe17 	ldw	r2,-8(fp)
10004bfc:	18800226 	beq	r3,r2,10004c08 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004c00:	00bffcc4 	movi	r2,-13
10004c04:	00000a06 	br	10004c30 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004c08:	e0bffd17 	ldw	r2,-12(fp)
10004c0c:	10800044 	addi	r2,r2,1
10004c10:	e0bffd15 	stw	r2,-12(fp)
10004c14:	00840034 	movhi	r2,4096
10004c18:	109bfa04 	addi	r2,r2,28648
10004c1c:	10800017 	ldw	r2,0(r2)
10004c20:	1007883a 	mov	r3,r2
10004c24:	e0bffd17 	ldw	r2,-12(fp)
10004c28:	18bfd72e 	bgeu	r3,r2,10004b88 <__alt_data_end+0xf8004b88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004c2c:	0005883a 	mov	r2,zero
}
10004c30:	e6ffff04 	addi	sp,fp,-4
10004c34:	dfc00217 	ldw	ra,8(sp)
10004c38:	df000117 	ldw	fp,4(sp)
10004c3c:	dc000017 	ldw	r16,0(sp)
10004c40:	dec00304 	addi	sp,sp,12
10004c44:	f800283a 	ret

10004c48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10004c48:	defff604 	addi	sp,sp,-40
10004c4c:	dfc00915 	stw	ra,36(sp)
10004c50:	df000815 	stw	fp,32(sp)
10004c54:	df000804 	addi	fp,sp,32
10004c58:	e13ffd15 	stw	r4,-12(fp)
10004c5c:	e17ffe15 	stw	r5,-8(fp)
10004c60:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004c64:	00bfffc4 	movi	r2,-1
10004c68:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004c6c:	00bffb44 	movi	r2,-19
10004c70:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004c74:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10004c78:	e13ffd17 	ldw	r4,-12(fp)
10004c7c:	01440034 	movhi	r5,4096
10004c80:	295bf804 	addi	r5,r5,28640
10004c84:	0004fe40 	call	10004fe4 <alt_find_dev>
10004c88:	e0bff815 	stw	r2,-32(fp)
10004c8c:	e0bff817 	ldw	r2,-32(fp)
10004c90:	1000051e 	bne	r2,zero,10004ca8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004c94:	e13ffd17 	ldw	r4,-12(fp)
10004c98:	00050740 	call	10005074 <alt_find_file>
10004c9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004ca0:	00800044 	movi	r2,1
10004ca4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004ca8:	e0bff817 	ldw	r2,-32(fp)
10004cac:	10002b26 	beq	r2,zero,10004d5c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004cb0:	e13ff817 	ldw	r4,-32(fp)
10004cb4:	00051880 	call	10005188 <alt_get_fd>
10004cb8:	e0bff915 	stw	r2,-28(fp)
10004cbc:	e0bff917 	ldw	r2,-28(fp)
10004cc0:	1000030e 	bge	r2,zero,10004cd0 <open+0x88>
    {
      status = index;
10004cc4:	e0bff917 	ldw	r2,-28(fp)
10004cc8:	e0bffa15 	stw	r2,-24(fp)
10004ccc:	00002506 	br	10004d64 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10004cd0:	e13ff917 	ldw	r4,-28(fp)
10004cd4:	01400304 	movi	r5,12
10004cd8:	000223c0 	call	1000223c <__mulsi3>
10004cdc:	1007883a 	mov	r3,r2
10004ce0:	00840034 	movhi	r2,4096
10004ce4:	109b9404 	addi	r2,r2,28240
10004ce8:	1885883a 	add	r2,r3,r2
10004cec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004cf0:	e0fffe17 	ldw	r3,-8(fp)
10004cf4:	00900034 	movhi	r2,16384
10004cf8:	10bfffc4 	addi	r2,r2,-1
10004cfc:	1886703a 	and	r3,r3,r2
10004d00:	e0bffc17 	ldw	r2,-16(fp)
10004d04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10004d08:	e0bffb17 	ldw	r2,-20(fp)
10004d0c:	1000051e 	bne	r2,zero,10004d24 <open+0xdc>
10004d10:	e13ffc17 	ldw	r4,-16(fp)
10004d14:	0004b540 	call	10004b54 <alt_file_locked>
10004d18:	e0bffa15 	stw	r2,-24(fp)
10004d1c:	e0bffa17 	ldw	r2,-24(fp)
10004d20:	10001016 	blt	r2,zero,10004d64 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004d24:	e0bff817 	ldw	r2,-32(fp)
10004d28:	10800317 	ldw	r2,12(r2)
10004d2c:	10000826 	beq	r2,zero,10004d50 <open+0x108>
10004d30:	e0bff817 	ldw	r2,-32(fp)
10004d34:	10800317 	ldw	r2,12(r2)
10004d38:	e13ffc17 	ldw	r4,-16(fp)
10004d3c:	e17ffd17 	ldw	r5,-12(fp)
10004d40:	e1bffe17 	ldw	r6,-8(fp)
10004d44:	e1ffff17 	ldw	r7,-4(fp)
10004d48:	103ee83a 	callr	r2
10004d4c:	00000106 	br	10004d54 <open+0x10c>
10004d50:	0005883a 	mov	r2,zero
10004d54:	e0bffa15 	stw	r2,-24(fp)
10004d58:	00000206 	br	10004d64 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004d5c:	00bffb44 	movi	r2,-19
10004d60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10004d64:	e0bffa17 	ldw	r2,-24(fp)
10004d68:	1000090e 	bge	r2,zero,10004d90 <open+0x148>
  {
    alt_release_fd (index);  
10004d6c:	e13ff917 	ldw	r4,-28(fp)
10004d70:	0004da80 	call	10004da8 <alt_release_fd>
    ALT_ERRNO = -status;
10004d74:	0004b040 	call	10004b04 <alt_get_errno>
10004d78:	1007883a 	mov	r3,r2
10004d7c:	e0bffa17 	ldw	r2,-24(fp)
10004d80:	0085c83a 	sub	r2,zero,r2
10004d84:	18800015 	stw	r2,0(r3)
    return -1;
10004d88:	00bfffc4 	movi	r2,-1
10004d8c:	00000106 	br	10004d94 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10004d90:	e0bff917 	ldw	r2,-28(fp)
}
10004d94:	e037883a 	mov	sp,fp
10004d98:	dfc00117 	ldw	ra,4(sp)
10004d9c:	df000017 	ldw	fp,0(sp)
10004da0:	dec00204 	addi	sp,sp,8
10004da4:	f800283a 	ret

10004da8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10004da8:	defffc04 	addi	sp,sp,-16
10004dac:	dfc00315 	stw	ra,12(sp)
10004db0:	df000215 	stw	fp,8(sp)
10004db4:	dc000115 	stw	r16,4(sp)
10004db8:	df000204 	addi	fp,sp,8
10004dbc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10004dc0:	e0bffe17 	ldw	r2,-8(fp)
10004dc4:	108000d0 	cmplti	r2,r2,3
10004dc8:	1000111e 	bne	r2,zero,10004e10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10004dcc:	04040034 	movhi	r16,4096
10004dd0:	841b9404 	addi	r16,r16,28240
10004dd4:	e0bffe17 	ldw	r2,-8(fp)
10004dd8:	1009883a 	mov	r4,r2
10004ddc:	01400304 	movi	r5,12
10004de0:	000223c0 	call	1000223c <__mulsi3>
10004de4:	8085883a 	add	r2,r16,r2
10004de8:	10800204 	addi	r2,r2,8
10004dec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10004df0:	04040034 	movhi	r16,4096
10004df4:	841b9404 	addi	r16,r16,28240
10004df8:	e0bffe17 	ldw	r2,-8(fp)
10004dfc:	1009883a 	mov	r4,r2
10004e00:	01400304 	movi	r5,12
10004e04:	000223c0 	call	1000223c <__mulsi3>
10004e08:	8085883a 	add	r2,r16,r2
10004e0c:	10000015 	stw	zero,0(r2)
  }
}
10004e10:	e6ffff04 	addi	sp,fp,-4
10004e14:	dfc00217 	ldw	ra,8(sp)
10004e18:	df000117 	ldw	fp,4(sp)
10004e1c:	dc000017 	ldw	r16,0(sp)
10004e20:	dec00304 	addi	sp,sp,12
10004e24:	f800283a 	ret

10004e28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004e28:	defffa04 	addi	sp,sp,-24
10004e2c:	df000515 	stw	fp,20(sp)
10004e30:	df000504 	addi	fp,sp,20
10004e34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004e38:	0005303a 	rdctl	r2,status
10004e3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004e40:	e0fffc17 	ldw	r3,-16(fp)
10004e44:	00bfff84 	movi	r2,-2
10004e48:	1884703a 	and	r2,r3,r2
10004e4c:	1001703a 	wrctl	status,r2
  
  return context;
10004e50:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004e54:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004e58:	e0bfff17 	ldw	r2,-4(fp)
10004e5c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10004e60:	e0bffd17 	ldw	r2,-12(fp)
10004e64:	10800017 	ldw	r2,0(r2)
10004e68:	e0fffd17 	ldw	r3,-12(fp)
10004e6c:	18c00117 	ldw	r3,4(r3)
10004e70:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004e74:	e0bffd17 	ldw	r2,-12(fp)
10004e78:	10800117 	ldw	r2,4(r2)
10004e7c:	e0fffd17 	ldw	r3,-12(fp)
10004e80:	18c00017 	ldw	r3,0(r3)
10004e84:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004e88:	e0bffd17 	ldw	r2,-12(fp)
10004e8c:	e0fffd17 	ldw	r3,-12(fp)
10004e90:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004e94:	e0bffd17 	ldw	r2,-12(fp)
10004e98:	e0fffd17 	ldw	r3,-12(fp)
10004e9c:	10c00015 	stw	r3,0(r2)
10004ea0:	e0bffb17 	ldw	r2,-20(fp)
10004ea4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004ea8:	e0bffe17 	ldw	r2,-8(fp)
10004eac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004eb0:	e037883a 	mov	sp,fp
10004eb4:	df000017 	ldw	fp,0(sp)
10004eb8:	dec00104 	addi	sp,sp,4
10004ebc:	f800283a 	ret

10004ec0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004ec0:	defffb04 	addi	sp,sp,-20
10004ec4:	dfc00415 	stw	ra,16(sp)
10004ec8:	df000315 	stw	fp,12(sp)
10004ecc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10004ed0:	d0a00917 	ldw	r2,-32732(gp)
10004ed4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004ed8:	d0a5ad17 	ldw	r2,-26956(gp)
10004edc:	10800044 	addi	r2,r2,1
10004ee0:	d0a5ad15 	stw	r2,-26956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004ee4:	00002e06 	br	10004fa0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004ee8:	e0bffd17 	ldw	r2,-12(fp)
10004eec:	10800017 	ldw	r2,0(r2)
10004ef0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004ef4:	e0bffd17 	ldw	r2,-12(fp)
10004ef8:	10800403 	ldbu	r2,16(r2)
10004efc:	10803fcc 	andi	r2,r2,255
10004f00:	10000426 	beq	r2,zero,10004f14 <alt_tick+0x54>
10004f04:	d0a5ad17 	ldw	r2,-26956(gp)
10004f08:	1000021e 	bne	r2,zero,10004f14 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004f0c:	e0bffd17 	ldw	r2,-12(fp)
10004f10:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004f14:	e0bffd17 	ldw	r2,-12(fp)
10004f18:	10800217 	ldw	r2,8(r2)
10004f1c:	d0e5ad17 	ldw	r3,-26956(gp)
10004f20:	18801d36 	bltu	r3,r2,10004f98 <alt_tick+0xd8>
10004f24:	e0bffd17 	ldw	r2,-12(fp)
10004f28:	10800403 	ldbu	r2,16(r2)
10004f2c:	10803fcc 	andi	r2,r2,255
10004f30:	1000191e 	bne	r2,zero,10004f98 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004f34:	e0bffd17 	ldw	r2,-12(fp)
10004f38:	10800317 	ldw	r2,12(r2)
10004f3c:	e0fffd17 	ldw	r3,-12(fp)
10004f40:	18c00517 	ldw	r3,20(r3)
10004f44:	1809883a 	mov	r4,r3
10004f48:	103ee83a 	callr	r2
10004f4c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10004f50:	e0bfff17 	ldw	r2,-4(fp)
10004f54:	1000031e 	bne	r2,zero,10004f64 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10004f58:	e13ffd17 	ldw	r4,-12(fp)
10004f5c:	0004e280 	call	10004e28 <alt_alarm_stop>
10004f60:	00000d06 	br	10004f98 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10004f64:	e0bffd17 	ldw	r2,-12(fp)
10004f68:	10c00217 	ldw	r3,8(r2)
10004f6c:	e0bfff17 	ldw	r2,-4(fp)
10004f70:	1887883a 	add	r3,r3,r2
10004f74:	e0bffd17 	ldw	r2,-12(fp)
10004f78:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10004f7c:	e0bffd17 	ldw	r2,-12(fp)
10004f80:	10c00217 	ldw	r3,8(r2)
10004f84:	d0a5ad17 	ldw	r2,-26956(gp)
10004f88:	1880032e 	bgeu	r3,r2,10004f98 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10004f8c:	e0bffd17 	ldw	r2,-12(fp)
10004f90:	00c00044 	movi	r3,1
10004f94:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10004f98:	e0bffe17 	ldw	r2,-8(fp)
10004f9c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004fa0:	e0fffd17 	ldw	r3,-12(fp)
10004fa4:	d0a00904 	addi	r2,gp,-32732
10004fa8:	18bfcf1e 	bne	r3,r2,10004ee8 <__alt_data_end+0xf8004ee8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10004fac:	0001883a 	nop
}
10004fb0:	e037883a 	mov	sp,fp
10004fb4:	dfc00117 	ldw	ra,4(sp)
10004fb8:	df000017 	ldw	fp,0(sp)
10004fbc:	dec00204 	addi	sp,sp,8
10004fc0:	f800283a 	ret

10004fc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10004fc4:	deffff04 	addi	sp,sp,-4
10004fc8:	df000015 	stw	fp,0(sp)
10004fcc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10004fd0:	000170fa 	wrctl	ienable,zero
}
10004fd4:	e037883a 	mov	sp,fp
10004fd8:	df000017 	ldw	fp,0(sp)
10004fdc:	dec00104 	addi	sp,sp,4
10004fe0:	f800283a 	ret

10004fe4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10004fe4:	defffa04 	addi	sp,sp,-24
10004fe8:	dfc00515 	stw	ra,20(sp)
10004fec:	df000415 	stw	fp,16(sp)
10004ff0:	df000404 	addi	fp,sp,16
10004ff4:	e13ffe15 	stw	r4,-8(fp)
10004ff8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10004ffc:	e0bfff17 	ldw	r2,-4(fp)
10005000:	10800017 	ldw	r2,0(r2)
10005004:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10005008:	e13ffe17 	ldw	r4,-8(fp)
1000500c:	00054f80 	call	100054f8 <strlen>
10005010:	10800044 	addi	r2,r2,1
10005014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005018:	00000d06 	br	10005050 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000501c:	e0bffc17 	ldw	r2,-16(fp)
10005020:	10c00217 	ldw	r3,8(r2)
10005024:	e0bffd17 	ldw	r2,-12(fp)
10005028:	1809883a 	mov	r4,r3
1000502c:	e17ffe17 	ldw	r5,-8(fp)
10005030:	100d883a 	mov	r6,r2
10005034:	00053440 	call	10005344 <memcmp>
10005038:	1000021e 	bne	r2,zero,10005044 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000503c:	e0bffc17 	ldw	r2,-16(fp)
10005040:	00000706 	br	10005060 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10005044:	e0bffc17 	ldw	r2,-16(fp)
10005048:	10800017 	ldw	r2,0(r2)
1000504c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005050:	e0fffc17 	ldw	r3,-16(fp)
10005054:	e0bfff17 	ldw	r2,-4(fp)
10005058:	18bff01e 	bne	r3,r2,1000501c <__alt_data_end+0xf800501c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000505c:	0005883a 	mov	r2,zero
}
10005060:	e037883a 	mov	sp,fp
10005064:	dfc00117 	ldw	ra,4(sp)
10005068:	df000017 	ldw	fp,0(sp)
1000506c:	dec00204 	addi	sp,sp,8
10005070:	f800283a 	ret

10005074 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10005074:	defffb04 	addi	sp,sp,-20
10005078:	dfc00415 	stw	ra,16(sp)
1000507c:	df000315 	stw	fp,12(sp)
10005080:	df000304 	addi	fp,sp,12
10005084:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10005088:	00840034 	movhi	r2,4096
1000508c:	109bf604 	addi	r2,r2,28632
10005090:	10800017 	ldw	r2,0(r2)
10005094:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005098:	00003106 	br	10005160 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000509c:	e0bffd17 	ldw	r2,-12(fp)
100050a0:	10800217 	ldw	r2,8(r2)
100050a4:	1009883a 	mov	r4,r2
100050a8:	00054f80 	call	100054f8 <strlen>
100050ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100050b0:	e0bffd17 	ldw	r2,-12(fp)
100050b4:	10c00217 	ldw	r3,8(r2)
100050b8:	e0bffe17 	ldw	r2,-8(fp)
100050bc:	10bfffc4 	addi	r2,r2,-1
100050c0:	1885883a 	add	r2,r3,r2
100050c4:	10800003 	ldbu	r2,0(r2)
100050c8:	10803fcc 	andi	r2,r2,255
100050cc:	1080201c 	xori	r2,r2,128
100050d0:	10bfe004 	addi	r2,r2,-128
100050d4:	10800bd8 	cmpnei	r2,r2,47
100050d8:	1000031e 	bne	r2,zero,100050e8 <alt_find_file+0x74>
    {
      len -= 1;
100050dc:	e0bffe17 	ldw	r2,-8(fp)
100050e0:	10bfffc4 	addi	r2,r2,-1
100050e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100050e8:	e0bffe17 	ldw	r2,-8(fp)
100050ec:	e0ffff17 	ldw	r3,-4(fp)
100050f0:	1885883a 	add	r2,r3,r2
100050f4:	10800003 	ldbu	r2,0(r2)
100050f8:	10803fcc 	andi	r2,r2,255
100050fc:	1080201c 	xori	r2,r2,128
10005100:	10bfe004 	addi	r2,r2,-128
10005104:	10800be0 	cmpeqi	r2,r2,47
10005108:	1000081e 	bne	r2,zero,1000512c <alt_find_file+0xb8>
1000510c:	e0bffe17 	ldw	r2,-8(fp)
10005110:	e0ffff17 	ldw	r3,-4(fp)
10005114:	1885883a 	add	r2,r3,r2
10005118:	10800003 	ldbu	r2,0(r2)
1000511c:	10803fcc 	andi	r2,r2,255
10005120:	1080201c 	xori	r2,r2,128
10005124:	10bfe004 	addi	r2,r2,-128
10005128:	10000a1e 	bne	r2,zero,10005154 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000512c:	e0bffd17 	ldw	r2,-12(fp)
10005130:	10c00217 	ldw	r3,8(r2)
10005134:	e0bffe17 	ldw	r2,-8(fp)
10005138:	1809883a 	mov	r4,r3
1000513c:	e17fff17 	ldw	r5,-4(fp)
10005140:	100d883a 	mov	r6,r2
10005144:	00053440 	call	10005344 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005148:	1000021e 	bne	r2,zero,10005154 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000514c:	e0bffd17 	ldw	r2,-12(fp)
10005150:	00000806 	br	10005174 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10005154:	e0bffd17 	ldw	r2,-12(fp)
10005158:	10800017 	ldw	r2,0(r2)
1000515c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005160:	e0fffd17 	ldw	r3,-12(fp)
10005164:	00840034 	movhi	r2,4096
10005168:	109bf604 	addi	r2,r2,28632
1000516c:	18bfcb1e 	bne	r3,r2,1000509c <__alt_data_end+0xf800509c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10005170:	0005883a 	mov	r2,zero
}
10005174:	e037883a 	mov	sp,fp
10005178:	dfc00117 	ldw	ra,4(sp)
1000517c:	df000017 	ldw	fp,0(sp)
10005180:	dec00204 	addi	sp,sp,8
10005184:	f800283a 	ret

10005188 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10005188:	defffa04 	addi	sp,sp,-24
1000518c:	dfc00515 	stw	ra,20(sp)
10005190:	df000415 	stw	fp,16(sp)
10005194:	dc000315 	stw	r16,12(sp)
10005198:	df000404 	addi	fp,sp,16
1000519c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100051a0:	00bffa04 	movi	r2,-24
100051a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100051a8:	e03ffc15 	stw	zero,-16(fp)
100051ac:	00002106 	br	10005234 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100051b0:	04040034 	movhi	r16,4096
100051b4:	841b9404 	addi	r16,r16,28240
100051b8:	e0bffc17 	ldw	r2,-16(fp)
100051bc:	1009883a 	mov	r4,r2
100051c0:	01400304 	movi	r5,12
100051c4:	000223c0 	call	1000223c <__mulsi3>
100051c8:	8085883a 	add	r2,r16,r2
100051cc:	10800017 	ldw	r2,0(r2)
100051d0:	1000151e 	bne	r2,zero,10005228 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100051d4:	04040034 	movhi	r16,4096
100051d8:	841b9404 	addi	r16,r16,28240
100051dc:	e0bffc17 	ldw	r2,-16(fp)
100051e0:	1009883a 	mov	r4,r2
100051e4:	01400304 	movi	r5,12
100051e8:	000223c0 	call	1000223c <__mulsi3>
100051ec:	8085883a 	add	r2,r16,r2
100051f0:	e0fffe17 	ldw	r3,-8(fp)
100051f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100051f8:	00840034 	movhi	r2,4096
100051fc:	109bfa04 	addi	r2,r2,28648
10005200:	10c00017 	ldw	r3,0(r2)
10005204:	e0bffc17 	ldw	r2,-16(fp)
10005208:	1880040e 	bge	r3,r2,1000521c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000520c:	00840034 	movhi	r2,4096
10005210:	109bfa04 	addi	r2,r2,28648
10005214:	e0fffc17 	ldw	r3,-16(fp)
10005218:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000521c:	e0bffc17 	ldw	r2,-16(fp)
10005220:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005224:	00000606 	br	10005240 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005228:	e0bffc17 	ldw	r2,-16(fp)
1000522c:	10800044 	addi	r2,r2,1
10005230:	e0bffc15 	stw	r2,-16(fp)
10005234:	e0bffc17 	ldw	r2,-16(fp)
10005238:	10800810 	cmplti	r2,r2,32
1000523c:	103fdc1e 	bne	r2,zero,100051b0 <__alt_data_end+0xf80051b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10005240:	e0bffd17 	ldw	r2,-12(fp)
}
10005244:	e6ffff04 	addi	sp,fp,-4
10005248:	dfc00217 	ldw	ra,8(sp)
1000524c:	df000117 	ldw	fp,4(sp)
10005250:	dc000017 	ldw	r16,0(sp)
10005254:	dec00304 	addi	sp,sp,12
10005258:	f800283a 	ret

1000525c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000525c:	defffe04 	addi	sp,sp,-8
10005260:	df000115 	stw	fp,4(sp)
10005264:	df000104 	addi	fp,sp,4
10005268:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000526c:	e0bfff17 	ldw	r2,-4(fp)
10005270:	10bffe84 	addi	r2,r2,-6
10005274:	10c00428 	cmpgeui	r3,r2,16
10005278:	18001a1e 	bne	r3,zero,100052e4 <alt_exception_cause_generated_bad_addr+0x88>
1000527c:	100690ba 	slli	r3,r2,2
10005280:	00840034 	movhi	r2,4096
10005284:	1094a504 	addi	r2,r2,21140
10005288:	1885883a 	add	r2,r3,r2
1000528c:	10800017 	ldw	r2,0(r2)
10005290:	1000683a 	jmp	r2
10005294:	100052d4 	ori	zero,r2,331
10005298:	100052d4 	ori	zero,r2,331
1000529c:	100052e4 	muli	zero,r2,331
100052a0:	100052e4 	muli	zero,r2,331
100052a4:	100052e4 	muli	zero,r2,331
100052a8:	100052d4 	ori	zero,r2,331
100052ac:	100052dc 	xori	zero,r2,331
100052b0:	100052e4 	muli	zero,r2,331
100052b4:	100052d4 	ori	zero,r2,331
100052b8:	100052d4 	ori	zero,r2,331
100052bc:	100052e4 	muli	zero,r2,331
100052c0:	100052d4 	ori	zero,r2,331
100052c4:	100052dc 	xori	zero,r2,331
100052c8:	100052e4 	muli	zero,r2,331
100052cc:	100052e4 	muli	zero,r2,331
100052d0:	100052d4 	ori	zero,r2,331
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100052d4:	00800044 	movi	r2,1
100052d8:	00000306 	br	100052e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100052dc:	0005883a 	mov	r2,zero
100052e0:	00000106 	br	100052e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100052e4:	0005883a 	mov	r2,zero
  }
}
100052e8:	e037883a 	mov	sp,fp
100052ec:	df000017 	ldw	fp,0(sp)
100052f0:	dec00104 	addi	sp,sp,4
100052f4:	f800283a 	ret

100052f8 <atexit>:
100052f8:	200b883a 	mov	r5,r4
100052fc:	000d883a 	mov	r6,zero
10005300:	0009883a 	mov	r4,zero
10005304:	000f883a 	mov	r7,zero
10005308:	00055901 	jmpi	10005590 <__register_exitproc>

1000530c <exit>:
1000530c:	defffe04 	addi	sp,sp,-8
10005310:	000b883a 	mov	r5,zero
10005314:	dc000015 	stw	r16,0(sp)
10005318:	dfc00115 	stw	ra,4(sp)
1000531c:	2021883a 	mov	r16,r4
10005320:	00056a40 	call	100056a4 <__call_exitprocs>
10005324:	00840034 	movhi	r2,4096
10005328:	109bf404 	addi	r2,r2,28624
1000532c:	11000017 	ldw	r4,0(r2)
10005330:	20800f17 	ldw	r2,60(r4)
10005334:	10000126 	beq	r2,zero,1000533c <exit+0x30>
10005338:	103ee83a 	callr	r2
1000533c:	8009883a 	mov	r4,r16
10005340:	00058380 	call	10005838 <_exit>

10005344 <memcmp>:
10005344:	01c000c4 	movi	r7,3
10005348:	3980192e 	bgeu	r7,r6,100053b0 <memcmp+0x6c>
1000534c:	2144b03a 	or	r2,r4,r5
10005350:	11c4703a 	and	r2,r2,r7
10005354:	10000f26 	beq	r2,zero,10005394 <memcmp+0x50>
10005358:	20800003 	ldbu	r2,0(r4)
1000535c:	28c00003 	ldbu	r3,0(r5)
10005360:	10c0151e 	bne	r2,r3,100053b8 <memcmp+0x74>
10005364:	31bfff84 	addi	r6,r6,-2
10005368:	01ffffc4 	movi	r7,-1
1000536c:	00000406 	br	10005380 <memcmp+0x3c>
10005370:	20800003 	ldbu	r2,0(r4)
10005374:	28c00003 	ldbu	r3,0(r5)
10005378:	31bfffc4 	addi	r6,r6,-1
1000537c:	10c00e1e 	bne	r2,r3,100053b8 <memcmp+0x74>
10005380:	21000044 	addi	r4,r4,1
10005384:	29400044 	addi	r5,r5,1
10005388:	31fff91e 	bne	r6,r7,10005370 <__alt_data_end+0xf8005370>
1000538c:	0005883a 	mov	r2,zero
10005390:	f800283a 	ret
10005394:	20c00017 	ldw	r3,0(r4)
10005398:	28800017 	ldw	r2,0(r5)
1000539c:	1880041e 	bne	r3,r2,100053b0 <memcmp+0x6c>
100053a0:	31bfff04 	addi	r6,r6,-4
100053a4:	21000104 	addi	r4,r4,4
100053a8:	29400104 	addi	r5,r5,4
100053ac:	39bff936 	bltu	r7,r6,10005394 <__alt_data_end+0xf8005394>
100053b0:	303fe91e 	bne	r6,zero,10005358 <__alt_data_end+0xf8005358>
100053b4:	003ff506 	br	1000538c <__alt_data_end+0xf800538c>
100053b8:	10c5c83a 	sub	r2,r2,r3
100053bc:	f800283a 	ret

100053c0 <memcpy>:
100053c0:	deffff04 	addi	sp,sp,-4
100053c4:	dc000015 	stw	r16,0(sp)
100053c8:	00c003c4 	movi	r3,15
100053cc:	2005883a 	mov	r2,r4
100053d0:	1980432e 	bgeu	r3,r6,100054e0 <memcpy+0x120>
100053d4:	2146b03a 	or	r3,r4,r5
100053d8:	18c000cc 	andi	r3,r3,3
100053dc:	1800421e 	bne	r3,zero,100054e8 <memcpy+0x128>
100053e0:	343ffc04 	addi	r16,r6,-16
100053e4:	8020d13a 	srli	r16,r16,4
100053e8:	28c00104 	addi	r3,r5,4
100053ec:	23400104 	addi	r13,r4,4
100053f0:	801e913a 	slli	r15,r16,4
100053f4:	2b000204 	addi	r12,r5,8
100053f8:	22c00204 	addi	r11,r4,8
100053fc:	7bc00504 	addi	r15,r15,20
10005400:	2a800304 	addi	r10,r5,12
10005404:	22400304 	addi	r9,r4,12
10005408:	2bdf883a 	add	r15,r5,r15
1000540c:	2811883a 	mov	r8,r5
10005410:	200f883a 	mov	r7,r4
10005414:	41000017 	ldw	r4,0(r8)
10005418:	39c00404 	addi	r7,r7,16
1000541c:	18c00404 	addi	r3,r3,16
10005420:	393ffc15 	stw	r4,-16(r7)
10005424:	1bbffc17 	ldw	r14,-16(r3)
10005428:	6b400404 	addi	r13,r13,16
1000542c:	5ac00404 	addi	r11,r11,16
10005430:	6bbffc15 	stw	r14,-16(r13)
10005434:	63800017 	ldw	r14,0(r12)
10005438:	4a400404 	addi	r9,r9,16
1000543c:	42000404 	addi	r8,r8,16
10005440:	5bbffc15 	stw	r14,-16(r11)
10005444:	53800017 	ldw	r14,0(r10)
10005448:	63000404 	addi	r12,r12,16
1000544c:	52800404 	addi	r10,r10,16
10005450:	4bbffc15 	stw	r14,-16(r9)
10005454:	1bffef1e 	bne	r3,r15,10005414 <__alt_data_end+0xf8005414>
10005458:	81c00044 	addi	r7,r16,1
1000545c:	380e913a 	slli	r7,r7,4
10005460:	310003cc 	andi	r4,r6,15
10005464:	02c000c4 	movi	r11,3
10005468:	11c7883a 	add	r3,r2,r7
1000546c:	29cb883a 	add	r5,r5,r7
10005470:	59001f2e 	bgeu	r11,r4,100054f0 <memcpy+0x130>
10005474:	1813883a 	mov	r9,r3
10005478:	2811883a 	mov	r8,r5
1000547c:	200f883a 	mov	r7,r4
10005480:	42800017 	ldw	r10,0(r8)
10005484:	4a400104 	addi	r9,r9,4
10005488:	39ffff04 	addi	r7,r7,-4
1000548c:	4abfff15 	stw	r10,-4(r9)
10005490:	42000104 	addi	r8,r8,4
10005494:	59fffa36 	bltu	r11,r7,10005480 <__alt_data_end+0xf8005480>
10005498:	213fff04 	addi	r4,r4,-4
1000549c:	2008d0ba 	srli	r4,r4,2
100054a0:	318000cc 	andi	r6,r6,3
100054a4:	21000044 	addi	r4,r4,1
100054a8:	2109883a 	add	r4,r4,r4
100054ac:	2109883a 	add	r4,r4,r4
100054b0:	1907883a 	add	r3,r3,r4
100054b4:	290b883a 	add	r5,r5,r4
100054b8:	30000626 	beq	r6,zero,100054d4 <memcpy+0x114>
100054bc:	198d883a 	add	r6,r3,r6
100054c0:	29c00003 	ldbu	r7,0(r5)
100054c4:	18c00044 	addi	r3,r3,1
100054c8:	29400044 	addi	r5,r5,1
100054cc:	19ffffc5 	stb	r7,-1(r3)
100054d0:	19bffb1e 	bne	r3,r6,100054c0 <__alt_data_end+0xf80054c0>
100054d4:	dc000017 	ldw	r16,0(sp)
100054d8:	dec00104 	addi	sp,sp,4
100054dc:	f800283a 	ret
100054e0:	2007883a 	mov	r3,r4
100054e4:	003ff406 	br	100054b8 <__alt_data_end+0xf80054b8>
100054e8:	2007883a 	mov	r3,r4
100054ec:	003ff306 	br	100054bc <__alt_data_end+0xf80054bc>
100054f0:	200d883a 	mov	r6,r4
100054f4:	003ff006 	br	100054b8 <__alt_data_end+0xf80054b8>

100054f8 <strlen>:
100054f8:	208000cc 	andi	r2,r4,3
100054fc:	10002026 	beq	r2,zero,10005580 <strlen+0x88>
10005500:	20800007 	ldb	r2,0(r4)
10005504:	10002026 	beq	r2,zero,10005588 <strlen+0x90>
10005508:	2005883a 	mov	r2,r4
1000550c:	00000206 	br	10005518 <strlen+0x20>
10005510:	10c00007 	ldb	r3,0(r2)
10005514:	18001826 	beq	r3,zero,10005578 <strlen+0x80>
10005518:	10800044 	addi	r2,r2,1
1000551c:	10c000cc 	andi	r3,r2,3
10005520:	183ffb1e 	bne	r3,zero,10005510 <__alt_data_end+0xf8005510>
10005524:	10c00017 	ldw	r3,0(r2)
10005528:	01ffbff4 	movhi	r7,65279
1000552c:	39ffbfc4 	addi	r7,r7,-257
10005530:	00ca303a 	nor	r5,zero,r3
10005534:	01a02074 	movhi	r6,32897
10005538:	19c7883a 	add	r3,r3,r7
1000553c:	31a02004 	addi	r6,r6,-32640
10005540:	1946703a 	and	r3,r3,r5
10005544:	1986703a 	and	r3,r3,r6
10005548:	1800091e 	bne	r3,zero,10005570 <strlen+0x78>
1000554c:	10800104 	addi	r2,r2,4
10005550:	10c00017 	ldw	r3,0(r2)
10005554:	19cb883a 	add	r5,r3,r7
10005558:	00c6303a 	nor	r3,zero,r3
1000555c:	28c6703a 	and	r3,r5,r3
10005560:	1986703a 	and	r3,r3,r6
10005564:	183ff926 	beq	r3,zero,1000554c <__alt_data_end+0xf800554c>
10005568:	00000106 	br	10005570 <strlen+0x78>
1000556c:	10800044 	addi	r2,r2,1
10005570:	10c00007 	ldb	r3,0(r2)
10005574:	183ffd1e 	bne	r3,zero,1000556c <__alt_data_end+0xf800556c>
10005578:	1105c83a 	sub	r2,r2,r4
1000557c:	f800283a 	ret
10005580:	2005883a 	mov	r2,r4
10005584:	003fe706 	br	10005524 <__alt_data_end+0xf8005524>
10005588:	0005883a 	mov	r2,zero
1000558c:	f800283a 	ret

10005590 <__register_exitproc>:
10005590:	00840034 	movhi	r2,4096
10005594:	defffa04 	addi	sp,sp,-24
10005598:	109bf404 	addi	r2,r2,28624
1000559c:	dc000315 	stw	r16,12(sp)
100055a0:	14000017 	ldw	r16,0(r2)
100055a4:	dc400415 	stw	r17,16(sp)
100055a8:	dfc00515 	stw	ra,20(sp)
100055ac:	80805217 	ldw	r2,328(r16)
100055b0:	2023883a 	mov	r17,r4
100055b4:	10003626 	beq	r2,zero,10005690 <__register_exitproc+0x100>
100055b8:	10c00117 	ldw	r3,4(r2)
100055bc:	010007c4 	movi	r4,31
100055c0:	20c00e16 	blt	r4,r3,100055fc <__register_exitproc+0x6c>
100055c4:	1a400044 	addi	r9,r3,1
100055c8:	8800211e 	bne	r17,zero,10005650 <__register_exitproc+0xc0>
100055cc:	18c00084 	addi	r3,r3,2
100055d0:	18c7883a 	add	r3,r3,r3
100055d4:	18c7883a 	add	r3,r3,r3
100055d8:	12400115 	stw	r9,4(r2)
100055dc:	10c7883a 	add	r3,r2,r3
100055e0:	19400015 	stw	r5,0(r3)
100055e4:	0005883a 	mov	r2,zero
100055e8:	dfc00517 	ldw	ra,20(sp)
100055ec:	dc400417 	ldw	r17,16(sp)
100055f0:	dc000317 	ldw	r16,12(sp)
100055f4:	dec00604 	addi	sp,sp,24
100055f8:	f800283a 	ret
100055fc:	00800034 	movhi	r2,0
10005600:	10800004 	addi	r2,r2,0
10005604:	10002526 	beq	r2,zero,1000569c <__register_exitproc+0x10c>
10005608:	01006404 	movi	r4,400
1000560c:	d9400015 	stw	r5,0(sp)
10005610:	d9800115 	stw	r6,4(sp)
10005614:	d9c00215 	stw	r7,8(sp)
10005618:	00000000 	call	10000000 <__alt_mem_sdram>
1000561c:	d9400017 	ldw	r5,0(sp)
10005620:	d9800117 	ldw	r6,4(sp)
10005624:	d9c00217 	ldw	r7,8(sp)
10005628:	10001c26 	beq	r2,zero,1000569c <__register_exitproc+0x10c>
1000562c:	80c05217 	ldw	r3,328(r16)
10005630:	10000115 	stw	zero,4(r2)
10005634:	02400044 	movi	r9,1
10005638:	10c00015 	stw	r3,0(r2)
1000563c:	80805215 	stw	r2,328(r16)
10005640:	10006215 	stw	zero,392(r2)
10005644:	10006315 	stw	zero,396(r2)
10005648:	0007883a 	mov	r3,zero
1000564c:	883fdf26 	beq	r17,zero,100055cc <__alt_data_end+0xf80055cc>
10005650:	18d1883a 	add	r8,r3,r3
10005654:	4211883a 	add	r8,r8,r8
10005658:	1211883a 	add	r8,r2,r8
1000565c:	41802215 	stw	r6,136(r8)
10005660:	01000044 	movi	r4,1
10005664:	11806217 	ldw	r6,392(r2)
10005668:	20c8983a 	sll	r4,r4,r3
1000566c:	310cb03a 	or	r6,r6,r4
10005670:	11806215 	stw	r6,392(r2)
10005674:	41c04215 	stw	r7,264(r8)
10005678:	01800084 	movi	r6,2
1000567c:	89bfd31e 	bne	r17,r6,100055cc <__alt_data_end+0xf80055cc>
10005680:	11806317 	ldw	r6,396(r2)
10005684:	3108b03a 	or	r4,r6,r4
10005688:	11006315 	stw	r4,396(r2)
1000568c:	003fcf06 	br	100055cc <__alt_data_end+0xf80055cc>
10005690:	80805304 	addi	r2,r16,332
10005694:	80805215 	stw	r2,328(r16)
10005698:	003fc706 	br	100055b8 <__alt_data_end+0xf80055b8>
1000569c:	00bfffc4 	movi	r2,-1
100056a0:	003fd106 	br	100055e8 <__alt_data_end+0xf80055e8>

100056a4 <__call_exitprocs>:
100056a4:	00840034 	movhi	r2,4096
100056a8:	109bf404 	addi	r2,r2,28624
100056ac:	10800017 	ldw	r2,0(r2)
100056b0:	defff404 	addi	sp,sp,-48
100056b4:	dd800815 	stw	r22,32(sp)
100056b8:	d8800015 	stw	r2,0(sp)
100056bc:	10805204 	addi	r2,r2,328
100056c0:	dd000615 	stw	r20,24(sp)
100056c4:	dc800415 	stw	r18,16(sp)
100056c8:	dfc00b15 	stw	ra,44(sp)
100056cc:	df000a15 	stw	fp,40(sp)
100056d0:	ddc00915 	stw	r23,36(sp)
100056d4:	dd400715 	stw	r21,28(sp)
100056d8:	dcc00515 	stw	r19,20(sp)
100056dc:	dc400315 	stw	r17,12(sp)
100056e0:	dc000215 	stw	r16,8(sp)
100056e4:	2025883a 	mov	r18,r4
100056e8:	2829883a 	mov	r20,r5
100056ec:	d8800115 	stw	r2,4(sp)
100056f0:	05bfffc4 	movi	r22,-1
100056f4:	d8800017 	ldw	r2,0(sp)
100056f8:	14c05217 	ldw	r19,328(r2)
100056fc:	98001d26 	beq	r19,zero,10005774 <__call_exitprocs+0xd0>
10005700:	dd400117 	ldw	r21,4(sp)
10005704:	98800117 	ldw	r2,4(r19)
10005708:	173fffc4 	addi	fp,r2,-1
1000570c:	e0000d16 	blt	fp,zero,10005744 <__call_exitprocs+0xa0>
10005710:	14000044 	addi	r16,r2,1
10005714:	8421883a 	add	r16,r16,r16
10005718:	8421883a 	add	r16,r16,r16
1000571c:	84402004 	addi	r17,r16,128
10005720:	9c63883a 	add	r17,r19,r17
10005724:	9c21883a 	add	r16,r19,r16
10005728:	a0001e26 	beq	r20,zero,100057a4 <__call_exitprocs+0x100>
1000572c:	80804017 	ldw	r2,256(r16)
10005730:	15001c26 	beq	r2,r20,100057a4 <__call_exitprocs+0x100>
10005734:	e73fffc4 	addi	fp,fp,-1
10005738:	843fff04 	addi	r16,r16,-4
1000573c:	8c7fff04 	addi	r17,r17,-4
10005740:	e5bff91e 	bne	fp,r22,10005728 <__alt_data_end+0xf8005728>
10005744:	00800034 	movhi	r2,0
10005748:	10800004 	addi	r2,r2,0
1000574c:	10000926 	beq	r2,zero,10005774 <__call_exitprocs+0xd0>
10005750:	98800117 	ldw	r2,4(r19)
10005754:	1000311e 	bne	r2,zero,1000581c <__call_exitprocs+0x178>
10005758:	98800017 	ldw	r2,0(r19)
1000575c:	10003426 	beq	r2,zero,10005830 <__call_exitprocs+0x18c>
10005760:	9809883a 	mov	r4,r19
10005764:	a8800015 	stw	r2,0(r21)
10005768:	00000000 	call	10000000 <__alt_mem_sdram>
1000576c:	acc00017 	ldw	r19,0(r21)
10005770:	983fe41e 	bne	r19,zero,10005704 <__alt_data_end+0xf8005704>
10005774:	dfc00b17 	ldw	ra,44(sp)
10005778:	df000a17 	ldw	fp,40(sp)
1000577c:	ddc00917 	ldw	r23,36(sp)
10005780:	dd800817 	ldw	r22,32(sp)
10005784:	dd400717 	ldw	r21,28(sp)
10005788:	dd000617 	ldw	r20,24(sp)
1000578c:	dcc00517 	ldw	r19,20(sp)
10005790:	dc800417 	ldw	r18,16(sp)
10005794:	dc400317 	ldw	r17,12(sp)
10005798:	dc000217 	ldw	r16,8(sp)
1000579c:	dec00c04 	addi	sp,sp,48
100057a0:	f800283a 	ret
100057a4:	98800117 	ldw	r2,4(r19)
100057a8:	80c00017 	ldw	r3,0(r16)
100057ac:	10bfffc4 	addi	r2,r2,-1
100057b0:	17001526 	beq	r2,fp,10005808 <__call_exitprocs+0x164>
100057b4:	80000015 	stw	zero,0(r16)
100057b8:	183fde26 	beq	r3,zero,10005734 <__alt_data_end+0xf8005734>
100057bc:	00800044 	movi	r2,1
100057c0:	1708983a 	sll	r4,r2,fp
100057c4:	98806217 	ldw	r2,392(r19)
100057c8:	9dc00117 	ldw	r23,4(r19)
100057cc:	2084703a 	and	r2,r4,r2
100057d0:	1000061e 	bne	r2,zero,100057ec <__call_exitprocs+0x148>
100057d4:	183ee83a 	callr	r3
100057d8:	98800117 	ldw	r2,4(r19)
100057dc:	15ffc51e 	bne	r2,r23,100056f4 <__alt_data_end+0xf80056f4>
100057e0:	a8800017 	ldw	r2,0(r21)
100057e4:	14ffd326 	beq	r2,r19,10005734 <__alt_data_end+0xf8005734>
100057e8:	003fc206 	br	100056f4 <__alt_data_end+0xf80056f4>
100057ec:	98806317 	ldw	r2,396(r19)
100057f0:	2084703a 	and	r2,r4,r2
100057f4:	1000061e 	bne	r2,zero,10005810 <__call_exitprocs+0x16c>
100057f8:	89400017 	ldw	r5,0(r17)
100057fc:	9009883a 	mov	r4,r18
10005800:	183ee83a 	callr	r3
10005804:	003ff406 	br	100057d8 <__alt_data_end+0xf80057d8>
10005808:	9f000115 	stw	fp,4(r19)
1000580c:	003fea06 	br	100057b8 <__alt_data_end+0xf80057b8>
10005810:	89000017 	ldw	r4,0(r17)
10005814:	183ee83a 	callr	r3
10005818:	003fef06 	br	100057d8 <__alt_data_end+0xf80057d8>
1000581c:	98800017 	ldw	r2,0(r19)
10005820:	982b883a 	mov	r21,r19
10005824:	1027883a 	mov	r19,r2
10005828:	983fb61e 	bne	r19,zero,10005704 <__alt_data_end+0xf8005704>
1000582c:	003fd106 	br	10005774 <__alt_data_end+0xf8005774>
10005830:	0005883a 	mov	r2,zero
10005834:	003ffa06 	br	10005820 <__alt_data_end+0xf8005820>

10005838 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10005838:	defffd04 	addi	sp,sp,-12
1000583c:	df000215 	stw	fp,8(sp)
10005840:	df000204 	addi	fp,sp,8
10005844:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10005848:	0001883a 	nop
1000584c:	e0bfff17 	ldw	r2,-4(fp)
10005850:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10005854:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10005858:	10000226 	beq	r2,zero,10005864 <_exit+0x2c>
    ALT_SIM_FAIL();
1000585c:	002af070 	cmpltui	zero,zero,43969
10005860:	00000106 	br	10005868 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10005864:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10005868:	003fff06 	br	10005868 <__alt_data_end+0xf8005868>
