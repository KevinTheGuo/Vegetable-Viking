
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000113e0 memsz 0x000113e0 flags r-x
    LOAD off    0x00012400 vaddr 0x10011400 paddr 0x10012eec align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000149d8 vaddr 0x100149d8 paddr 0x100149d8 align 2**12
         filesz 0x00000000 memsz 0x000003dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010ec0  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000314  100110ec  100110ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011400  10012eec  00012400  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003dc  100149d8  100149d8  000149d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013eec  2**0
                  CONTENTS
  7 .sdram        00000000  10014db4  10014db4  00013eec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013eec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf0  00000000  00000000  00013f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000238b0  00000000  00000000  00014c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008eef  00000000  00000000  000384b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b0da  00000000  00000000  0004139f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002200  00000000  00000000  0004c47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003861  00000000  00000000  0004e67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016df0  00000000  00000000  00051edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00068cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013c0  00000000  00000000  00068ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d4e3  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d4e6  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d4f2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d4f3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d4f4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d4f8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d4fc  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d500  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d50b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d516  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d521  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006d52c  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0006d546  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  0007198d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
100110ec l    d  .rodata	00000000 .rodata
10011400 l    d  .rwdata	00000000 .rwdata
100149d8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014db4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002bd0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011246 l     O .rodata	00000010 zeroes.4181
10011256 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10006380 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007f28 l     F .text	00000008 __fp_lock
10007f30 l     F .text	00000008 __fp_unlock
10007f44 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011400 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10011844 l     O .rwdata	00000020 lc_ctype_charset
10011824 l     O .rwdata	00000020 lc_message_charset
10011864 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011288 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a96c l     F .text	000000fc __sprint_r.part.0
100113bc l     O .rodata	00000010 blanks.4125
100113ac l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e994 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000eabc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000eae8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ebf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ecec l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000edd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000efb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012edc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000f238 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f388 l     F .text	00000038 alt_dev_reg
10011e4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f664 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000f868 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ffe4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001047c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100105d4 l     F .text	00000050 alt_get_errno
10010624 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10014a48 g     O .bss	00000004 alt_instruction_exception_handler
10001e24 g     F .text	00000068 convertDecimalToBinary
1000a4b4 g     F .text	00000074 _mprec_log10
1000a5a0 g     F .text	0000008c __any_on
1000c83c g     F .text	00000054 _isatty_r
10011294 g     O .rodata	00000028 __mprec_tinytens
1000eefc g     F .text	00000078 alt_main
10014cb4 g     O .bss	00000100 alt_irq
1000c890 g     F .text	0000005c _lseek_r
10012eec g       *ABS*	00000000 __flash_rwdata_start
1000de40 g     F .text	00000084 .hidden __eqdf2
10014db4 g       *ABS*	00000000 __alt_heap_start
10004078 g     F .text	0000003c printf
1000d1b4 g     F .text	0000009c _wcrtomb_r
100149d8 g     O .bss	00000004 elapsedTime
100149dc g     O .bss	00000004 sameFruit
1000a7cc g     F .text	0000005c __sseek
1000828c g     F .text	00000010 __sinit
1000d044 g     F .text	00000154 __swbuf_r
10008860 g     F .text	0000007c _setlocale_r
100080e4 g     F .text	00000078 __sfmoreglue
1000ef94 g     F .text	00000020 __malloc_unlock
10000aec g     F .text	000005b4 spawningEngine
1000c8ec g     F .text	0000015c memmove
10008274 g     F .text	00000018 _cleanup
100095e4 g     F .text	000000a8 _Balloc
1000dec4 g     F .text	000000e0 .hidden __gtdf2
10010a14 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
100149e0 g     O .bss	00000004 lastPhysixed
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000c340 g     F .text	00000058 _fstat_r
10014a2c g     O .bss	00000004 errno
1000a748 g     F .text	00000008 __seofread
10014a34 g     O .bss	00000004 alt_argv
1001aeac g       *ABS*	00000000 _gp
100149e4 g     O .bss	00000004 yCursor
10011ccc g     O .rwdata	00000180 alt_fd_list
10010a34 g     F .text	00000090 alt_find_dev
10009388 g     F .text	00000138 memcpy
100010a0 g     F .text	0000048c slicingEngine
10007f38 g     F .text	0000000c _cleanup_r
10003f18 g     F .text	000000d0 .hidden __floatsidf
1001055c g     F .text	00000078 alt_io_redirect
1000dfa4 g     F .text	000000e0 .hidden __ltdf2
100149e8 g     O .bss	00000004 xCursor
100110ec g       *ABS*	00000000 __DTOR_END__
10010cac g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000a62c g     F .text	00000074 __fpclassifyd
1000a410 g     F .text	000000a4 __ratio
1000bea4 g     F .text	00000024 __vfiprintf_internal
1000fa64 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000404c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002cec g     F .text	00000008 .hidden __udivsi3
1000ec40 g     F .text	000000ac isatty
100112e4 g     O .rodata	000000c8 __mprec_tens
100088dc g     F .text	0000000c __locale_charset
10014a28 g     O .bss	00000004 __malloc_top_pad
10012eb4 g     O .rwdata	00000004 __mb_cur_max
1000890c g     F .text	0000000c _localeconv_r
1000c398 g     F .text	000004a4 __sfvwrite_r
10009a0c g     F .text	0000003c __i2b
1000a6a0 g     F .text	00000054 _sbrk_r
100149ec g     O .bss	00000004 cursorClicked
1000ca48 g     F .text	0000005c _read_r
10012ed4 g     O .rwdata	00000004 alt_max_fd
1000c050 g     F .text	00000100 _fclose_r
10007ef8 g     F .text	00000030 fflush
10014a24 g     O .bss	00000004 __malloc_max_sbrked_mem
10002d24 g     F .text	0000089c .hidden __adddf3
1000a1b8 g     F .text	0000011c __b2d
100025b4 g     F .text	0000061c .hidden __umoddi3
1000ee20 g     F .text	000000dc lseek
10012eac g     O .rwdata	00000004 _global_impure_ptr
1000caa4 g     F .text	000005a0 _realloc_r
10014db4 g       *ABS*	00000000 __bss_end
1001038c g     F .text	000000f0 alt_iic_isr_register
10014a74 g     O .bss	00000240 veggieObject
10010910 g     F .text	00000104 alt_tick
100149f0 g     O .bss	00000004 cursorStreak
10001f74 g     F .text	00000640 .hidden __udivdi3
1000c164 g     F .text	00000184 _fputwc_r
100112bc g     O .rodata	00000028 __mprec_bigtens
100097f0 g     F .text	00000104 __s2b
1000e8f0 g     F .text	000000a4 .hidden __floatunsidf
10009f60 g     F .text	00000060 __mcmp
100149f4 g     O .bss	00000004 lastSpawned
100082ac g     F .text	00000018 __fp_lock_all
10010340 g     F .text	0000004c alt_ic_irq_enabled
10010878 g     F .text	00000098 alt_alarm_stop
10000604 g     F .text	00000110 statusEngine
10014a3c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10011ca4 g     O .rwdata	00000028 alt_dev_null
10001d28 g     F .text	000000fc port2Unpackager
1000ffc8 g     F .text	0000001c alt_dcache_flush_all
100098f4 g     F .text	00000068 __hi0bits
10003e90 g     F .text	00000088 .hidden __fixdfsi
10012eec g       *ABS*	00000000 __ram_rwdata_end
10012ecc g     O .rwdata	00000008 alt_dev_list
1000f288 g     F .text	00000100 write
10011400 g       *ABS*	00000000 __ram_rodata_end
1000eb38 g     F .text	000000b8 fstat
1000dfa4 g     F .text	000000e0 .hidden __ledf2
100149f8 g     O .bss	00000004 lastDisintegrated
10009cd8 g     F .text	00000140 __pow5mult
1000aa80 g     F .text	00001424 ___vfiprintf_internal_r
10014a1c g     O .bss	00000004 __nlocale_changed
10002cf4 g     F .text	00000008 .hidden __umodsi3
10014db4 g       *ABS*	00000000 end
100149fc g     O .bss	00000004 key1
1000f5a0 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
100110ec g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003fe8 g     F .text	00000064 .hidden __clzsi2
1000fc70 g     F .text	00000218 altera_avalon_jtag_uart_write
1000829c g     F .text	00000004 __sfp_lock_acquire
100092a0 g     F .text	000000e8 memchr
10004130 g     F .text	000020fc ___vfprintf_internal_r
10008400 g     F .text	000002f0 _free_r
100088e8 g     F .text	00000010 __locale_mb_cur_max
10010f24 g     F .text	00000194 __call_exitprocs
10014a18 g     O .bss	00000004 __mlocale_changed
10012eb8 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10014a40 g     O .bss	00000004 _alt_tick_rate
100040cc g     F .text	00000064 rand
10009e18 g     F .text	00000148 __lshift
10014a44 g     O .bss	00000004 _alt_nticks
1000f004 g     F .text	00000104 read
1000f3f4 g     F .text	00000048 alt_sys_init
10010e10 g     F .text	00000114 __register_exitproc
10009a48 g     F .text	00000290 __multiply
1000f910 g     F .text	00000068 altera_avalon_jtag_uart_close
10002cfc g     F .text	00000028 .hidden __mulsi3
10011400 g       *ABS*	00000000 __ram_rwdata_start
100110ec g       *ABS*	00000000 __ram_rodata_start
10014a4c g     O .bss	00000028 __malloc_current_mallinfo
1000a2d4 g     F .text	0000013c __d2b
1000f43c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010bd8 g     F .text	000000d4 alt_get_fd
1000bf24 g     F .text	00000054 _close_r
10010d94 g     F .text	0000007c memcmp
1000f4fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014db4 g       *ABS*	00000000 __alt_stack_base
1000f54c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10006250 g     F .text	00000130 __swsetup_r
1000d4c0 g     F .text	00000980 .hidden __divdf3
1000815c g     F .text	00000118 __sfp
1000a528 g     F .text	00000078 __copybits
1001189c g     O .rwdata	00000408 __malloc_av_
100082a8 g     F .text	00000004 __sinit_lock_release
1000e084 g     F .text	0000086c .hidden __muldf3
1000a6f4 g     F .text	00000054 __sread
10010ac4 g     F .text	00000114 alt_find_file
10010034 g     F .text	000000a4 alt_dev_llist_insert
1000ef74 g     F .text	00000020 __malloc_lock
1000f188 g     F .text	000000b0 sbrk
10007cd0 g     F .text	00000228 _fflush_r
1000bf78 g     F .text	000000d8 _calloc_r
100149d8 g       *ABS*	00000000 __bss_start
100094c0 g     F .text	00000124 memset
10000268 g     F .text	0000039c main
10014a38 g     O .bss	00000004 alt_envp
10014a20 g     O .bss	00000004 __malloc_max_total_mem
1000f49c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000d198 g     F .text	0000001c __swbuf
100040b4 g     F .text	00000018 srand
10001e8c g     F .text	000000e8 convertBinaryToDecimal
1000a828 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c150 g     F .text	00000014 fclose
100065a8 g     F .text	00001728 _dtoa_r
10008af8 g     F .text	000007a8 _malloc_r
1000d328 g     F .text	00000030 __ascii_wctomb
10012ed8 g     O .rwdata	00000004 alt_errno
100086f0 g     F .text	000000b8 _fwalk
10002c3c g     F .text	00000054 .hidden __divsi3
100082dc g     F .text	00000124 _malloc_trim_r
100110ec g       *ABS*	00000000 __CTOR_END__
1000a830 g     F .text	000000a4 strcmp
100110ec g       *ABS*	00000000 __flash_rodata_start
100110ec g       *ABS*	00000000 __DTOR_LIST__
10014a00 g     O .bss	00000004 key3
1000de40 g     F .text	00000084 .hidden __nedf2
1000f3c0 g     F .text	00000034 alt_irq_init
1000f108 g     F .text	00000080 alt_release_fd
10011104 g     O .rodata	00000100 .hidden __clz_tab
10014a14 g     O .bss	00000004 _PathLocale
10010d48 g     F .text	00000014 atexit
10014a04 g     O .bss	00000004 nextSpawnTime
10001bcc g     F .text	0000015c messagePackager
1000bec8 g     F .text	0000005c _write_r
10008918 g     F .text	0000001c setlocale
10012eb0 g     O .rwdata	00000004 _impure_ptr
10014a30 g     O .bss	00000004 alt_argc
10010134 g     F .text	0000005c _do_dtors
10008904 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000a158 g     F .text	00000060 __ulp
100082c4 g     F .text	00000018 __fp_unlock_all
10012ec4 g     O .rwdata	00000008 alt_fs_list
1000152c g     F .text	00000208 disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008934 g     F .text	0000000c localeconv
100101ac g     F .text	00000050 alt_ic_isr_register
10012eec g       *ABS*	00000000 _edata
10014db4 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000f978 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10014a08 g     O .bss	00000004 key2
1001029c g     F .text	000000a4 alt_ic_irq_disable
1000a750 g     F .text	0000007c __swrite
10012ebc g     O .rwdata	00000004 __malloc_trim_threshold
100088f8 g     F .text	0000000c __locale_msgcharset
10010d5c g     F .text	00000038 exit
10014a0c g     O .bss	00000004 roundStart
100087a8 g     F .text	000000b8 _fwalk_reent
10009fc0 g     F .text	00000198 __mdiff
10000714 g     F .text	000003d8 physicsEngine
10002c90 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100082a0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100110b8 g     F .text	00000034 _exit
1000fe88 g     F .text	00000140 alt_alarm_start
1000d3b4 g     F .text	0000010c .hidden __muldi3
10008940 g     F .text	000001b8 __smakebuf_r
1000a8d4 g     F .text	00000098 strlen
10010718 g     F .text	00000160 open
1000dec4 g     F .text	000000e0 .hidden __gedf2
10012ec0 g     O .rwdata	00000004 __wctomb
1000aa68 g     F .text	00000018 __sprint_r
10010190 g     F .text	0000001c alt_icache_flush_all
10001734 g     F .text	00000498 FPGAcommunicator
10012ee0 g     O .rwdata	00000004 alt_priority_mask
10014a10 g     O .bss	00000004 comboFruit
100101fc g     F .text	000000a0 alt_ic_irq_enable
1000622c g     F .text	00000024 __vfprintf_internal
1000d358 g     F .text	0000005c _wctomb_r
100035c0 g     F .text	000008d0 .hidden __subdf3
1000995c g     F .text	000000b0 __lo0bits
10012ee4 g     O .rwdata	00000008 alt_alarm_list
100100d8 g     F .text	0000005c _do_ctors
1000d250 g     F .text	000000d8 wcrtomb
1000e9e4 g     F .text	000000d8 close
1000ed50 g     F .text	00000080 alt_load
1000c2e8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
100082a4 g     F .text	00000004 __sinit_lock_acquire
100096b4 g     F .text	0000013c __multadd
1000968c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10932d04 	addi	r2,r2,19636
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10932d04 	addi	r2,r2,19636
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e717 	ldw	r2,-25700(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e717 	ldw	r2,-25700(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6abab14 	ori	gp,gp,44716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10927614 	ori	r2,r2,18904

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d36d14 	ori	r3,r3,19892

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ed500 	call	1000ed50 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000eefc0 	call	1000eefc <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// can you even read

// our main function!!! this is where the magic happens
int main()
{
10000268:	defffa04 	addi	sp,sp,-24
1000026c:	dfc00515 	stw	ra,20(sp)
10000270:	df000415 	stw	fp,16(sp)
10000274:	dc000315 	stw	r16,12(sp)
10000278:	df000404 	addi	fp,sp,16
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00040b40 	call	100040b4 <srand>

	// assign these to 0 at start
	sameFruit = 0;
1000028c:	d026cc15 	stw	zero,-25808(gp)
	comboFruit = 0;
10000290:	d026d915 	stw	zero,-25756(gp)

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000294:	e03ffc15 	stw	zero,-16(fp)
10000298:	00004306 	br	100003a8 <main+0x140>
	{
		veggieObject[i].xPosition = 0;
1000029c:	04040074 	movhi	r16,4097
100002a0:	84129d04 	addi	r16,r16,19060
100002a4:	e0bffc17 	ldw	r2,-16(fp)
100002a8:	1009883a 	mov	r4,r2
100002ac:	01400904 	movi	r5,36
100002b0:	0002cfc0 	call	10002cfc <__mulsi3>
100002b4:	8085883a 	add	r2,r16,r2
100002b8:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002bc:	04040074 	movhi	r16,4097
100002c0:	84129d04 	addi	r16,r16,19060
100002c4:	e0bffc17 	ldw	r2,-16(fp)
100002c8:	1009883a 	mov	r4,r2
100002cc:	01400904 	movi	r5,36
100002d0:	0002cfc0 	call	10002cfc <__mulsi3>
100002d4:	8085883a 	add	r2,r16,r2
100002d8:	10800104 	addi	r2,r2,4
100002dc:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002e0:	04040074 	movhi	r16,4097
100002e4:	84129d04 	addi	r16,r16,19060
100002e8:	e0bffc17 	ldw	r2,-16(fp)
100002ec:	1009883a 	mov	r4,r2
100002f0:	01400904 	movi	r5,36
100002f4:	0002cfc0 	call	10002cfc <__mulsi3>
100002f8:	8085883a 	add	r2,r16,r2
100002fc:	10800204 	addi	r2,r2,8
10000300:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
10000304:	04040074 	movhi	r16,4097
10000308:	84129d04 	addi	r16,r16,19060
1000030c:	e0bffc17 	ldw	r2,-16(fp)
10000310:	1009883a 	mov	r4,r2
10000314:	01400904 	movi	r5,36
10000318:	0002cfc0 	call	10002cfc <__mulsi3>
1000031c:	8085883a 	add	r2,r16,r2
10000320:	10800304 	addi	r2,r2,12
10000324:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000328:	04040074 	movhi	r16,4097
1000032c:	84129d04 	addi	r16,r16,19060
10000330:	e0bffc17 	ldw	r2,-16(fp)
10000334:	1009883a 	mov	r4,r2
10000338:	01400904 	movi	r5,36
1000033c:	0002cfc0 	call	10002cfc <__mulsi3>
10000340:	8085883a 	add	r2,r16,r2
10000344:	10800404 	addi	r2,r2,16
10000348:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
1000034c:	04040074 	movhi	r16,4097
10000350:	84129d04 	addi	r16,r16,19060
10000354:	e0bffc17 	ldw	r2,-16(fp)
10000358:	1009883a 	mov	r4,r2
1000035c:	01400904 	movi	r5,36
10000360:	0002cfc0 	call	10002cfc <__mulsi3>
10000364:	8085883a 	add	r2,r16,r2
10000368:	10800504 	addi	r2,r2,20
1000036c:	10000015 	stw	zero,0(r2)
10000370:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	84129d04 	addi	r16,r16,19060
1000037c:	e0bffc17 	ldw	r2,-16(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	0002cfc0 	call	10002cfc <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800704 	addi	r2,r2,28
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
	sameFruit = 0;
	comboFruit = 0;

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
1000039c:	e0bffc17 	ldw	r2,-16(fp)
100003a0:	10800044 	addi	r2,r2,1
100003a4:	e0bffc15 	stw	r2,-16(fp)
100003a8:	e0bffc17 	ldw	r2,-16(fp)
100003ac:	10800410 	cmplti	r2,r2,16
100003b0:	103fba1e 	bne	r2,zero,1000029c <__alt_data_end+0xf800029c>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003b4:	00840074 	movhi	r2,4097
100003b8:	10929d04 	addi	r2,r2,19060
100003bc:	00c00044 	movi	r3,1
100003c0:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 0;
100003c4:	00840074 	movhi	r2,4097
100003c8:	10929d04 	addi	r2,r2,19060
100003cc:	10000015 	stw	zero,0(r2)
	veggieObject[0].yPosition = 0;
100003d0:	00840074 	movhi	r2,4097
100003d4:	10929d04 	addi	r2,r2,19060
100003d8:	10000115 	stw	zero,4(r2)
	veggieObject[0].objectType = 0;
100003dc:	00840074 	movhi	r2,4097
100003e0:	10929d04 	addi	r2,r2,19060
100003e4:	10000215 	stw	zero,8(r2)
	veggieObject[0].objectState = 7;
100003e8:	00840074 	movhi	r2,4097
100003ec:	10929d04 	addi	r2,r2,19060
100003f0:	00c001c4 	movi	r3,7
100003f4:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
100003f8:	00840074 	movhi	r2,4097
100003fc:	10929d04 	addi	r2,r2,19060
10000400:	00c00044 	movi	r3,1
10000404:	10c00415 	stw	r3,16(r2)

	// start out in the initial black menu
	// FIX THIS LATER
	cursorClicked = 1;
10000408:	00800044 	movi	r2,1
1000040c:	d0a6d015 	stw	r2,-25792(gp)
	veggieObject[0].objectState = 3;
10000410:	00840074 	movhi	r2,4097
10000414:	10929d04 	addi	r2,r2,19060
10000418:	00c000c4 	movi	r3,3
1000041c:	10c00315 	stw	r3,12(r2)


	while(cursorClicked == 0)
10000420:	00000206 	br	1000042c <main+0x1c4>
	{
		FPGAcommunicator();	// call this every time to update the FPGA
10000424:	00017340 	call	10001734 <FPGAcommunicator>
		port2Unpackager();	// just run our unpackager
10000428:	0001d280 	call	10001d28 <port2Unpackager>
	// FIX THIS LATER
	cursorClicked = 1;
	veggieObject[0].objectState = 3;


	while(cursorClicked == 0)
1000042c:	d0a6d017 	ldw	r2,-25792(gp)
10000430:	103ffc26 	beq	r2,zero,10000424 <__alt_data_end+0xf8000424>
		FPGAcommunicator();	// call this every time to update the FPGA
		port2Unpackager();	// just run our unpackager
	}

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
10000434:	00804804 	movi	r2,288
10000438:	10800017 	ldw	r2,0(r2)
1000043c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long processorTime = processorStart;
10000440:	e0bffd17 	ldw	r2,-12(fp)
10000444:	e0bffe15 	stw	r2,-8(fp)
	lastPhysixed = processorTime;
10000448:	e0bffe17 	ldw	r2,-8(fp)
1000044c:	d0a6cd15 	stw	r2,-25804(gp)
	lastSpawned = processorTime;
10000450:	e0bffe17 	ldw	r2,-8(fp)
10000454:	d0a6d215 	stw	r2,-25784(gp)
	nextSpawnTime = processorTime;
10000458:	e0bffe17 	ldw	r2,-8(fp)
1000045c:	d0a6d615 	stw	r2,-25768(gp)
	lastDisintegrated = processorTime;
10000460:	e0bffe17 	ldw	r2,-8(fp)
10000464:	d0a6d315 	stw	r2,-25780(gp)
	roundStart = 0;
10000468:	d026d815 	stw	zero,-25760(gp)
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
1000046c:	00806004 	movi	r2,384
10000470:	10800017 	ldw	r2,0(r2)
10000474:	d0a6cf15 	stw	r2,-25796(gp)
	yCursor = *to_sw_port4;
10000478:	00805c04 	movi	r2,368
1000047c:	10800017 	ldw	r2,0(r2)
10000480:	d0a6ce15 	stw	r2,-25800(gp)
	port2Unpackager();
10000484:	0001d280 	call	10001d28 <port2Unpackager>

	while(1)	// game while loop
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
10000488:	00804804 	movi	r2,288
1000048c:	10800017 	ldw	r2,0(r2)
10000490:	e0bffe15 	stw	r2,-8(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000494:	e0fffe17 	ldw	r3,-8(fp)
10000498:	e0bffd17 	ldw	r2,-12(fp)
1000049c:	1885c83a 	sub	r2,r3,r2
100004a0:	d0a6cb15 	stw	r2,-25812(gp)
		printf("elapsed time is %lu \n", elapsedTime);
100004a4:	d0a6cb17 	ldw	r2,-25812(gp)
100004a8:	01040074 	movhi	r4,4097
100004ac:	21043b04 	addi	r4,r4,4332
100004b0:	100b883a 	mov	r5,r2
100004b4:	00040780 	call	10004078 <printf>

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 5)	// greater than .05 seconds pass
100004b8:	d0e6cb17 	ldw	r3,-25812(gp)
100004bc:	d0a6cd17 	ldw	r2,-25804(gp)
100004c0:	1885c83a 	sub	r2,r3,r2
100004c4:	108001b0 	cmpltui	r2,r2,6
100004c8:	1000031e 	bne	r2,zero,100004d8 <main+0x270>
		{
			physicsEngine();	// call our physics engine!
100004cc:	00007140 	call	10000714 <physicsEngine>
			lastPhysixed = elapsedTime;
100004d0:	d0a6cb17 	ldw	r2,-25812(gp)
100004d4:	d0a6cd15 	stw	r2,-25804(gp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
100004d8:	d0e6cb17 	ldw	r3,-25812(gp)
100004dc:	d0a6d217 	ldw	r2,-25784(gp)
100004e0:	1885c83a 	sub	r2,r3,r2
100004e4:	d0e6d617 	ldw	r3,-25768(gp)
100004e8:	18803b2e 	bgeu	r3,r2,100005d8 <main+0x370>
		{
			// determine next spawn time based on level
			if(veggieObject[0].objectState == 1)	// easy mode spawn
100004ec:	00840074 	movhi	r2,4097
100004f0:	10929d04 	addi	r2,r2,19060
100004f4:	10800317 	ldw	r2,12(r2)
100004f8:	10800058 	cmpnei	r2,r2,1
100004fc:	10000d1e 	bne	r2,zero,10000534 <main+0x2cc>
			{
				spawningEngine(rand() % 5);
10000500:	00040cc0 	call	100040cc <rand>
10000504:	1009883a 	mov	r4,r2
10000508:	01400144 	movi	r5,5
1000050c:	0002c900 	call	10002c90 <__modsi3>
10000510:	1009883a 	mov	r4,r2
10000514:	0000aec0 	call	10000aec <spawningEngine>
				nextSpawnTime = (rand() % 50) + 150;
10000518:	00040cc0 	call	100040cc <rand>
1000051c:	1009883a 	mov	r4,r2
10000520:	01400c84 	movi	r5,50
10000524:	0002c900 	call	10002c90 <__modsi3>
10000528:	10802584 	addi	r2,r2,150
1000052c:	d0a6d615 	stw	r2,-25768(gp)
10000530:	00002606 	br	100005cc <main+0x364>
			}
			else if(veggieObject[0].objectState == 2)	// medium mode
10000534:	00840074 	movhi	r2,4097
10000538:	10929d04 	addi	r2,r2,19060
1000053c:	10800317 	ldw	r2,12(r2)
10000540:	10800098 	cmpnei	r2,r2,2
10000544:	10000d1e 	bne	r2,zero,1000057c <main+0x314>
			{
				spawningEngine(rand() % 7);
10000548:	00040cc0 	call	100040cc <rand>
1000054c:	1009883a 	mov	r4,r2
10000550:	014001c4 	movi	r5,7
10000554:	0002c900 	call	10002c90 <__modsi3>
10000558:	1009883a 	mov	r4,r2
1000055c:	0000aec0 	call	10000aec <spawningEngine>
				nextSpawnTime = (rand() % 75) + 100;
10000560:	00040cc0 	call	100040cc <rand>
10000564:	1009883a 	mov	r4,r2
10000568:	014012c4 	movi	r5,75
1000056c:	0002c900 	call	10002c90 <__modsi3>
10000570:	10801904 	addi	r2,r2,100
10000574:	d0a6d615 	stw	r2,-25768(gp)
10000578:	00001406 	br	100005cc <main+0x364>
			}
			else if(veggieObject[0].objectState == 3)	// easy mode spawn
1000057c:	00840074 	movhi	r2,4097
10000580:	10929d04 	addi	r2,r2,19060
10000584:	10800317 	ldw	r2,12(r2)
10000588:	108000d8 	cmpnei	r2,r2,3
1000058c:	10000d1e 	bne	r2,zero,100005c4 <main+0x35c>
			{
				spawningEngine(rand() % 9);
10000590:	00040cc0 	call	100040cc <rand>
10000594:	1009883a 	mov	r4,r2
10000598:	01400244 	movi	r5,9
1000059c:	0002c900 	call	10002c90 <__modsi3>
100005a0:	1009883a 	mov	r4,r2
100005a4:	0000aec0 	call	10000aec <spawningEngine>
				nextSpawnTime = (rand() % 100 + 50);		// hard mode
100005a8:	00040cc0 	call	100040cc <rand>
100005ac:	1009883a 	mov	r4,r2
100005b0:	01401904 	movi	r5,100
100005b4:	0002c900 	call	10002c90 <__modsi3>
100005b8:	10800c84 	addi	r2,r2,50
100005bc:	d0a6d615 	stw	r2,-25768(gp)
100005c0:	00000206 	br	100005cc <main+0x364>
			}
			else
			{
				nextSpawnTime = 200;	// we're in another state. check back soon!
100005c4:	00803204 	movi	r2,200
100005c8:	d0a6d615 	stw	r2,-25768(gp)
			}
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
			sameFruit = 0;	// reset this
100005cc:	d026cc15 	stw	zero,-25808(gp)
			lastSpawned = elapsedTime;
100005d0:	d0a6cb17 	ldw	r2,-25812(gp)
100005d4:	d0a6d215 	stw	r2,-25784(gp)
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .2 sec
100005d8:	d0e6cb17 	ldw	r3,-25812(gp)
100005dc:	d0a6d317 	ldw	r2,-25780(gp)
100005e0:	1885c83a 	sub	r2,r3,r2
100005e4:	10800570 	cmpltui	r2,r2,21
100005e8:	1000031e 	bne	r2,zero,100005f8 <main+0x390>
		{
			disintegrateEngine();	// call our spawning engine!
100005ec:	000152c0 	call	1000152c <disintegrateEngine>
			lastDisintegrated = elapsedTime;
100005f0:	d0a6cb17 	ldw	r2,-25812(gp)
100005f4:	d0a6d315 	stw	r2,-25780(gp)
		}
	port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
100005f8:	0001d280 	call	10001d28 <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
100005fc:	00017340 	call	10001734 <FPGAcommunicator>
	}
10000600:	003fa106 	br	10000488 <__alt_data_end+0xf8000488>

10000604 <statusEngine>:
	return 0;
}

void statusEngine()
{
10000604:	defffe04 	addi	sp,sp,-8
10000608:	dfc00115 	stw	ra,4(sp)
1000060c:	df000015 	stw	fp,0(sp)
10000610:	d839883a 	mov	fp,sp
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
10000614:	00840074 	movhi	r2,4097
10000618:	10929d04 	addi	r2,r2,19060
1000061c:	10800317 	ldw	r2,12(r2)
10000620:	0080100e 	bge	zero,r2,10000664 <statusEngine+0x60>
10000624:	00840074 	movhi	r2,4097
10000628:	10929d04 	addi	r2,r2,19060
1000062c:	10800317 	ldw	r2,12(r2)
10000630:	10800108 	cmpgei	r2,r2,4
10000634:	10000b1e 	bne	r2,zero,10000664 <statusEngine+0x60>
	{
		// this means we're currently playing a round
		veggieObject[0].yPosition = ((elapsedTime - roundStart)/100);	// timer
10000638:	d0e6cb17 	ldw	r3,-25812(gp)
1000063c:	d0a6d817 	ldw	r2,-25760(gp)
10000640:	1885c83a 	sub	r2,r3,r2
10000644:	1009883a 	mov	r4,r2
10000648:	01401904 	movi	r5,100
1000064c:	0002cec0 	call	10002cec <__udivsi3>
10000650:	1007883a 	mov	r3,r2
10000654:	00840074 	movhi	r2,4097
10000658:	10929d04 	addi	r2,r2,19060
1000065c:	10c00115 	stw	r3,4(r2)
10000660:	00002706 	br	10000700 <statusEngine+0xfc>
	}
	else if(((elapsedTime - roundStart)/100) > 60)	// check if our timer ended
10000664:	d0e6cb17 	ldw	r3,-25812(gp)
10000668:	d0a6d817 	ldw	r2,-25760(gp)
1000066c:	1885c83a 	sub	r2,r3,r2
10000670:	1085f530 	cmpltui	r2,r2,6100
10000674:	1000051e 	bne	r2,zero,1000068c <statusEngine+0x88>
	{
		veggieObject[0].objectState = 4;
10000678:	00840074 	movhi	r2,4097
1000067c:	10929d04 	addi	r2,r2,19060
10000680:	00c00104 	movi	r3,4
10000684:	10c00315 	stw	r3,12(r2)
10000688:	00001d06 	br	10000700 <statusEngine+0xfc>
	}
	else if(((veggieObject[0].objectState == 2) || (veggieObject[0].objectState == 3)) && (veggieObject[0].objectType <= 0))
1000068c:	00840074 	movhi	r2,4097
10000690:	10929d04 	addi	r2,r2,19060
10000694:	10800317 	ldw	r2,12(r2)
10000698:	108000a0 	cmpeqi	r2,r2,2
1000069c:	1000051e 	bne	r2,zero,100006b4 <statusEngine+0xb0>
100006a0:	00840074 	movhi	r2,4097
100006a4:	10929d04 	addi	r2,r2,19060
100006a8:	10800317 	ldw	r2,12(r2)
100006ac:	108000d8 	cmpnei	r2,r2,3
100006b0:	1000091e 	bne	r2,zero,100006d8 <statusEngine+0xd4>
100006b4:	00840074 	movhi	r2,4097
100006b8:	10929d04 	addi	r2,r2,19060
100006bc:	10800217 	ldw	r2,8(r2)
100006c0:	00800516 	blt	zero,r2,100006d8 <statusEngine+0xd4>
	{
		// this means we're game over :(
		veggieObject[0].objectState = 5;
100006c4:	00840074 	movhi	r2,4097
100006c8:	10929d04 	addi	r2,r2,19060
100006cc:	00c00144 	movi	r3,5
100006d0:	10c00315 	stw	r3,12(r2)
100006d4:	00000a06 	br	10000700 <statusEngine+0xfc>
	}
	else if(veggieObject[0].objectState == 0)	// check if we gotta reset
100006d8:	00840074 	movhi	r2,4097
100006dc:	10929d04 	addi	r2,r2,19060
100006e0:	10800317 	ldw	r2,12(r2)
100006e4:	1000061e 	bne	r2,zero,10000700 <statusEngine+0xfc>
	{
		veggieObject[0].xPosition = 0;
100006e8:	00840074 	movhi	r2,4097
100006ec:	10929d04 	addi	r2,r2,19060
100006f0:	10000015 	stw	zero,0(r2)
		veggieObject[0].yPosition = 0;
100006f4:	00840074 	movhi	r2,4097
100006f8:	10929d04 	addi	r2,r2,19060
100006fc:	10000115 	stw	zero,4(r2)
	}
}
10000700:	e037883a 	mov	sp,fp
10000704:	dfc00117 	ldw	ra,4(sp)
10000708:	df000017 	ldw	fp,0(sp)
1000070c:	dec00204 	addi	sp,sp,8
10000710:	f800283a 	ret

10000714 <physicsEngine>:

void physicsEngine()
{
10000714:	defffa04 	addi	sp,sp,-24
10000718:	dfc00515 	stw	ra,20(sp)
1000071c:	df000415 	stw	fp,16(sp)
10000720:	dc800315 	stw	r18,12(sp)
10000724:	dc400215 	stw	r17,8(sp)
10000728:	dc000115 	stw	r16,4(sp)
1000072c:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000730:	00800044 	movi	r2,1
10000734:	e0bffc15 	stw	r2,-16(fp)
10000738:	0000e006 	br	10000abc <physicsEngine+0x3a8>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
1000073c:	04040074 	movhi	r16,4097
10000740:	84129d04 	addi	r16,r16,19060
10000744:	e0bffc17 	ldw	r2,-16(fp)
10000748:	1009883a 	mov	r4,r2
1000074c:	01400904 	movi	r5,36
10000750:	0002cfc0 	call	10002cfc <__mulsi3>
10000754:	8085883a 	add	r2,r16,r2
10000758:	10800304 	addi	r2,r2,12
1000075c:	10800017 	ldw	r2,0(r2)
10000760:	1000d326 	beq	r2,zero,10000ab0 <physicsEngine+0x39c>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000764:	04040074 	movhi	r16,4097
10000768:	84129d04 	addi	r16,r16,19060
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	1009883a 	mov	r4,r2
10000774:	01400904 	movi	r5,36
10000778:	0002cfc0 	call	10002cfc <__mulsi3>
1000077c:	8085883a 	add	r2,r16,r2
10000780:	10800017 	ldw	r2,0(r2)
10000784:	1009883a 	mov	r4,r2
10000788:	0003f180 	call	10003f18 <__floatsidf>
1000078c:	1023883a 	mov	r17,r2
10000790:	1825883a 	mov	r18,r3
10000794:	04040074 	movhi	r16,4097
10000798:	84129d04 	addi	r16,r16,19060
1000079c:	e0bffc17 	ldw	r2,-16(fp)
100007a0:	1009883a 	mov	r4,r2
100007a4:	01400904 	movi	r5,36
100007a8:	0002cfc0 	call	10002cfc <__mulsi3>
100007ac:	8085883a 	add	r2,r16,r2
100007b0:	11000504 	addi	r4,r2,20
100007b4:	20800017 	ldw	r2,0(r4)
100007b8:	20c00117 	ldw	r3,4(r4)
100007bc:	8809883a 	mov	r4,r17
100007c0:	900b883a 	mov	r5,r18
100007c4:	100d883a 	mov	r6,r2
100007c8:	180f883a 	mov	r7,r3
100007cc:	0002d240 	call	10002d24 <__adddf3>
100007d0:	1009883a 	mov	r4,r2
100007d4:	180b883a 	mov	r5,r3
100007d8:	2005883a 	mov	r2,r4
100007dc:	2807883a 	mov	r3,r5
100007e0:	1009883a 	mov	r4,r2
100007e4:	180b883a 	mov	r5,r3
100007e8:	0003e900 	call	10003e90 <__fixdfsi>
100007ec:	1023883a 	mov	r17,r2
100007f0:	04040074 	movhi	r16,4097
100007f4:	84129d04 	addi	r16,r16,19060
100007f8:	e0bffc17 	ldw	r2,-16(fp)
100007fc:	1009883a 	mov	r4,r2
10000800:	01400904 	movi	r5,36
10000804:	0002cfc0 	call	10002cfc <__mulsi3>
10000808:	8085883a 	add	r2,r16,r2
1000080c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000810:	04040074 	movhi	r16,4097
10000814:	84129d04 	addi	r16,r16,19060
10000818:	e0bffc17 	ldw	r2,-16(fp)
1000081c:	1009883a 	mov	r4,r2
10000820:	01400904 	movi	r5,36
10000824:	0002cfc0 	call	10002cfc <__mulsi3>
10000828:	8085883a 	add	r2,r16,r2
1000082c:	10800104 	addi	r2,r2,4
10000830:	10800017 	ldw	r2,0(r2)
10000834:	1009883a 	mov	r4,r2
10000838:	0003f180 	call	10003f18 <__floatsidf>
1000083c:	1023883a 	mov	r17,r2
10000840:	1825883a 	mov	r18,r3
10000844:	04040074 	movhi	r16,4097
10000848:	84129d04 	addi	r16,r16,19060
1000084c:	e0bffc17 	ldw	r2,-16(fp)
10000850:	1009883a 	mov	r4,r2
10000854:	01400904 	movi	r5,36
10000858:	0002cfc0 	call	10002cfc <__mulsi3>
1000085c:	8085883a 	add	r2,r16,r2
10000860:	11000704 	addi	r4,r2,28
10000864:	20800017 	ldw	r2,0(r4)
10000868:	20c00117 	ldw	r3,4(r4)
1000086c:	8809883a 	mov	r4,r17
10000870:	900b883a 	mov	r5,r18
10000874:	100d883a 	mov	r6,r2
10000878:	180f883a 	mov	r7,r3
1000087c:	0002d240 	call	10002d24 <__adddf3>
10000880:	1009883a 	mov	r4,r2
10000884:	180b883a 	mov	r5,r3
10000888:	2005883a 	mov	r2,r4
1000088c:	2807883a 	mov	r3,r5
10000890:	1009883a 	mov	r4,r2
10000894:	180b883a 	mov	r5,r3
10000898:	0003e900 	call	10003e90 <__fixdfsi>
1000089c:	1023883a 	mov	r17,r2
100008a0:	04040074 	movhi	r16,4097
100008a4:	84129d04 	addi	r16,r16,19060
100008a8:	e0bffc17 	ldw	r2,-16(fp)
100008ac:	1009883a 	mov	r4,r2
100008b0:	01400904 	movi	r5,36
100008b4:	0002cfc0 	call	10002cfc <__mulsi3>
100008b8:	8085883a 	add	r2,r16,r2
100008bc:	10800104 	addi	r2,r2,4
100008c0:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
100008c4:	04040074 	movhi	r16,4097
100008c8:	84129d04 	addi	r16,r16,19060
100008cc:	e0bffc17 	ldw	r2,-16(fp)
100008d0:	1009883a 	mov	r4,r2
100008d4:	01400904 	movi	r5,36
100008d8:	0002cfc0 	call	10002cfc <__mulsi3>
100008dc:	8085883a 	add	r2,r16,r2
100008e0:	11000704 	addi	r4,r2,28
100008e4:	20800017 	ldw	r2,0(r4)
100008e8:	20c00117 	ldw	r3,4(r4)
100008ec:	1009883a 	mov	r4,r2
100008f0:	180b883a 	mov	r5,r3
100008f4:	000d883a 	mov	r6,zero
100008f8:	01cffc34 	movhi	r7,16368
100008fc:	00035c00 	call	100035c0 <__subdf3>
10000900:	1009883a 	mov	r4,r2
10000904:	180b883a 	mov	r5,r3
10000908:	2021883a 	mov	r16,r4
1000090c:	2823883a 	mov	r17,r5
10000910:	04840074 	movhi	r18,4097
10000914:	94929d04 	addi	r18,r18,19060
10000918:	e0bffc17 	ldw	r2,-16(fp)
1000091c:	1009883a 	mov	r4,r2
10000920:	01400904 	movi	r5,36
10000924:	0002cfc0 	call	10002cfc <__mulsi3>
10000928:	9085883a 	add	r2,r18,r2
1000092c:	10800704 	addi	r2,r2,28
10000930:	14000015 	stw	r16,0(r2)
10000934:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000938:	04040074 	movhi	r16,4097
1000093c:	84129d04 	addi	r16,r16,19060
10000940:	e0bffc17 	ldw	r2,-16(fp)
10000944:	1009883a 	mov	r4,r2
10000948:	01400904 	movi	r5,36
1000094c:	0002cfc0 	call	10002cfc <__mulsi3>
10000950:	8085883a 	add	r2,r16,r2
10000954:	10800104 	addi	r2,r2,4
10000958:	10800017 	ldw	r2,0(r2)
1000095c:	10001316 	blt	r2,zero,100009ac <physicsEngine+0x298>
10000960:	04040074 	movhi	r16,4097
10000964:	84129d04 	addi	r16,r16,19060
10000968:	e0bffc17 	ldw	r2,-16(fp)
1000096c:	1009883a 	mov	r4,r2
10000970:	01400904 	movi	r5,36
10000974:	0002cfc0 	call	10002cfc <__mulsi3>
10000978:	8085883a 	add	r2,r16,r2
1000097c:	10800017 	ldw	r2,0(r2)
10000980:	10000a16 	blt	r2,zero,100009ac <physicsEngine+0x298>
10000984:	04040074 	movhi	r16,4097
10000988:	84129d04 	addi	r16,r16,19060
1000098c:	e0bffc17 	ldw	r2,-16(fp)
10000990:	1009883a 	mov	r4,r2
10000994:	01400904 	movi	r5,36
10000998:	0002cfc0 	call	10002cfc <__mulsi3>
1000099c:	8085883a 	add	r2,r16,r2
100009a0:	10800017 	ldw	r2,0(r2)
100009a4:	1080a050 	cmplti	r2,r2,641
100009a8:	1000411e 	bne	r2,zero,10000ab0 <physicsEngine+0x39c>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
100009ac:	04040074 	movhi	r16,4097
100009b0:	84129d04 	addi	r16,r16,19060
100009b4:	e0bffc17 	ldw	r2,-16(fp)
100009b8:	1009883a 	mov	r4,r2
100009bc:	01400904 	movi	r5,36
100009c0:	0002cfc0 	call	10002cfc <__mulsi3>
100009c4:	8085883a 	add	r2,r16,r2
100009c8:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
100009cc:	04040074 	movhi	r16,4097
100009d0:	84129d04 	addi	r16,r16,19060
100009d4:	e0bffc17 	ldw	r2,-16(fp)
100009d8:	1009883a 	mov	r4,r2
100009dc:	01400904 	movi	r5,36
100009e0:	0002cfc0 	call	10002cfc <__mulsi3>
100009e4:	8085883a 	add	r2,r16,r2
100009e8:	10800104 	addi	r2,r2,4
100009ec:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
100009f0:	04040074 	movhi	r16,4097
100009f4:	84129d04 	addi	r16,r16,19060
100009f8:	e0bffc17 	ldw	r2,-16(fp)
100009fc:	1009883a 	mov	r4,r2
10000a00:	01400904 	movi	r5,36
10000a04:	0002cfc0 	call	10002cfc <__mulsi3>
10000a08:	8085883a 	add	r2,r16,r2
10000a0c:	10800204 	addi	r2,r2,8
10000a10:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000a14:	04040074 	movhi	r16,4097
10000a18:	84129d04 	addi	r16,r16,19060
10000a1c:	e0bffc17 	ldw	r2,-16(fp)
10000a20:	1009883a 	mov	r4,r2
10000a24:	01400904 	movi	r5,36
10000a28:	0002cfc0 	call	10002cfc <__mulsi3>
10000a2c:	8085883a 	add	r2,r16,r2
10000a30:	10800304 	addi	r2,r2,12
10000a34:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000a38:	04040074 	movhi	r16,4097
10000a3c:	84129d04 	addi	r16,r16,19060
10000a40:	e0bffc17 	ldw	r2,-16(fp)
10000a44:	1009883a 	mov	r4,r2
10000a48:	01400904 	movi	r5,36
10000a4c:	0002cfc0 	call	10002cfc <__mulsi3>
10000a50:	8085883a 	add	r2,r16,r2
10000a54:	10800504 	addi	r2,r2,20
10000a58:	10000015 	stw	zero,0(r2)
10000a5c:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000a60:	04040074 	movhi	r16,4097
10000a64:	84129d04 	addi	r16,r16,19060
10000a68:	e0bffc17 	ldw	r2,-16(fp)
10000a6c:	1009883a 	mov	r4,r2
10000a70:	01400904 	movi	r5,36
10000a74:	0002cfc0 	call	10002cfc <__mulsi3>
10000a78:	8085883a 	add	r2,r16,r2
10000a7c:	10800704 	addi	r2,r2,28
10000a80:	10000015 	stw	zero,0(r2)
10000a84:	10000115 	stw	zero,4(r2)

				// reduce score!
				if(i<14)
10000a88:	e0bffc17 	ldw	r2,-16(fp)
10000a8c:	10800388 	cmpgei	r2,r2,14
10000a90:	1000071e 	bne	r2,zero,10000ab0 <physicsEngine+0x39c>
				{
					veggieObject[0].xPosition = veggieObject[0].xPosition - 100;
10000a94:	00840074 	movhi	r2,4097
10000a98:	10929d04 	addi	r2,r2,19060
10000a9c:	10800017 	ldw	r2,0(r2)
10000aa0:	10ffe704 	addi	r3,r2,-100
10000aa4:	00840074 	movhi	r2,4097
10000aa8:	10929d04 	addi	r2,r2,19060
10000aac:	10c00015 	stw	r3,0(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000ab0:	e0bffc17 	ldw	r2,-16(fp)
10000ab4:	10800044 	addi	r2,r2,1
10000ab8:	e0bffc15 	stw	r2,-16(fp)
10000abc:	e0bffc17 	ldw	r2,-16(fp)
10000ac0:	10800410 	cmplti	r2,r2,16
10000ac4:	103f1d1e 	bne	r2,zero,1000073c <__alt_data_end+0xf800073c>
				}
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000ac8:	0001883a 	nop
}
10000acc:	e6fffd04 	addi	sp,fp,-12
10000ad0:	dfc00417 	ldw	ra,16(sp)
10000ad4:	df000317 	ldw	fp,12(sp)
10000ad8:	dc800217 	ldw	r18,8(sp)
10000adc:	dc400117 	ldw	r17,4(sp)
10000ae0:	dc000017 	ldw	r16,0(sp)
10000ae4:	dec00504 	addi	sp,sp,20
10000ae8:	f800283a 	ret

10000aec <spawningEngine>:

void spawningEngine(int pattern)
{
10000aec:	deffec04 	addi	sp,sp,-80
10000af0:	dfc01315 	stw	ra,76(sp)
10000af4:	df001215 	stw	fp,72(sp)
10000af8:	dc401115 	stw	r17,68(sp)
10000afc:	dc001015 	stw	r16,64(sp)
10000b00:	df001204 	addi	fp,sp,72
10000b04:	e13ffd15 	stw	r4,-12(fp)
	if(pattern == 0)	// one pattern will have us skip a spawn...caus whatev
10000b08:	e0bffd17 	ldw	r2,-12(fp)
10000b0c:	1000011e 	bne	r2,zero,10000b14 <spawningEngine+0x28>
	{
		return;
10000b10:	00015c06 	br	10001084 <spawningEngine+0x598>
	}
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
10000b14:	e0bffd17 	ldw	r2,-12(fp)
10000b18:	108001e0 	cmpeqi	r2,r2,7
10000b1c:	1000031e 	bne	r2,zero,10000b2c <spawningEngine+0x40>
10000b20:	e0bffd17 	ldw	r2,-12(fp)
10000b24:	10800258 	cmpnei	r2,r2,9
10000b28:	10008f1e 	bne	r2,zero,10000d68 <spawningEngine+0x27c>
	{
		if((rand() % 3) == 1)	// one last chance to not bomb this!
10000b2c:	00040cc0 	call	100040cc <rand>
10000b30:	1009883a 	mov	r4,r2
10000b34:	014000c4 	movi	r5,3
10000b38:	0002c900 	call	10002c90 <__modsi3>
10000b3c:	10800058 	cmpnei	r2,r2,1
10000b40:	1000891e 	bne	r2,zero,10000d68 <spawningEngine+0x27c>
		{
			int i;
			for(i=14;i<16;i++)
10000b44:	00800384 	movi	r2,14
10000b48:	e0bfee15 	stw	r2,-72(fp)
10000b4c:	00008306 	br	10000d5c <spawningEngine+0x270>
			{
				if(veggieObject[i].objectState == 0)	// if one doesn't exist, go!
10000b50:	04040074 	movhi	r16,4097
10000b54:	84129d04 	addi	r16,r16,19060
10000b58:	e0bfee17 	ldw	r2,-72(fp)
10000b5c:	1009883a 	mov	r4,r2
10000b60:	01400904 	movi	r5,36
10000b64:	0002cfc0 	call	10002cfc <__mulsi3>
10000b68:	8085883a 	add	r2,r16,r2
10000b6c:	10800304 	addi	r2,r2,12
10000b70:	10800017 	ldw	r2,0(r2)
10000b74:	1000761e 	bne	r2,zero,10000d50 <spawningEngine+0x264>
				{
					unsigned int randomX;	// x coordinate on bottom of screen
					double randomSpeedY, randomSpeedX;	// starting velocity

					// RANDOM GENERATION!!
					randomX = (rand() % 540) + 50;
10000b78:	00040cc0 	call	100040cc <rand>
10000b7c:	1009883a 	mov	r4,r2
10000b80:	01408704 	movi	r5,540
10000b84:	0002c900 	call	10002c90 <__modsi3>
10000b88:	10800c84 	addi	r2,r2,50
10000b8c:	e0bff615 	stw	r2,-40(fp)
					randomSpeedY = (rand() % 22) + 45;
10000b90:	00040cc0 	call	100040cc <rand>
10000b94:	1009883a 	mov	r4,r2
10000b98:	01400584 	movi	r5,22
10000b9c:	0002c900 	call	10002c90 <__modsi3>
10000ba0:	10800b44 	addi	r2,r2,45
10000ba4:	1009883a 	mov	r4,r2
10000ba8:	0003f180 	call	10003f18 <__floatsidf>
10000bac:	1009883a 	mov	r4,r2
10000bb0:	180b883a 	mov	r5,r3
10000bb4:	e13ff715 	stw	r4,-36(fp)
10000bb8:	e17ff815 	stw	r5,-32(fp)
					randomSpeedX = (rand() % 20) - 10;
10000bbc:	00040cc0 	call	100040cc <rand>
10000bc0:	1009883a 	mov	r4,r2
10000bc4:	01400504 	movi	r5,20
10000bc8:	0002c900 	call	10002c90 <__modsi3>
10000bcc:	10bffd84 	addi	r2,r2,-10
10000bd0:	1009883a 	mov	r4,r2
10000bd4:	0003f180 	call	10003f18 <__floatsidf>
10000bd8:	1009883a 	mov	r4,r2
10000bdc:	180b883a 	mov	r5,r3
10000be0:	e13fef15 	stw	r4,-68(fp)
10000be4:	e17ff015 	stw	r5,-64(fp)

					// make sure we aren't throwing them out the edges
					if (randomX < 100)
10000be8:	e0bff617 	ldw	r2,-40(fp)
10000bec:	10801928 	cmpgeui	r2,r2,100
10000bf0:	10000b1e 	bne	r2,zero,10000c20 <spawningEngine+0x134>
					{
						randomSpeedX = (rand() % 20);
10000bf4:	00040cc0 	call	100040cc <rand>
10000bf8:	1009883a 	mov	r4,r2
10000bfc:	01400504 	movi	r5,20
10000c00:	0002c900 	call	10002c90 <__modsi3>
10000c04:	1009883a 	mov	r4,r2
10000c08:	0003f180 	call	10003f18 <__floatsidf>
10000c0c:	1009883a 	mov	r4,r2
10000c10:	180b883a 	mov	r5,r3
10000c14:	e13fef15 	stw	r4,-68(fp)
10000c18:	e17ff015 	stw	r5,-64(fp)
10000c1c:	00000e06 	br	10000c58 <spawningEngine+0x16c>
					}
					else if (randomX > 540)
10000c20:	e0bff617 	ldw	r2,-40(fp)
10000c24:	10808770 	cmpltui	r2,r2,541
10000c28:	10000b1e 	bne	r2,zero,10000c58 <spawningEngine+0x16c>
					{
						randomSpeedX = (rand() % 20) - 20;
10000c2c:	00040cc0 	call	100040cc <rand>
10000c30:	1009883a 	mov	r4,r2
10000c34:	01400504 	movi	r5,20
10000c38:	0002c900 	call	10002c90 <__modsi3>
10000c3c:	10bffb04 	addi	r2,r2,-20
10000c40:	1009883a 	mov	r4,r2
10000c44:	0003f180 	call	10003f18 <__floatsidf>
10000c48:	1009883a 	mov	r4,r2
10000c4c:	180b883a 	mov	r5,r3
10000c50:	e13fef15 	stw	r4,-68(fp)
10000c54:	e17ff015 	stw	r5,-64(fp)
					}

					// now let's store these
					veggieObject[i].xPosition = randomX;
10000c58:	e47ff617 	ldw	r17,-40(fp)
10000c5c:	04040074 	movhi	r16,4097
10000c60:	84129d04 	addi	r16,r16,19060
10000c64:	e0bfee17 	ldw	r2,-72(fp)
10000c68:	1009883a 	mov	r4,r2
10000c6c:	01400904 	movi	r5,36
10000c70:	0002cfc0 	call	10002cfc <__mulsi3>
10000c74:	8085883a 	add	r2,r16,r2
10000c78:	14400015 	stw	r17,0(r2)
					veggieObject[i].yPosition = 0;
10000c7c:	04040074 	movhi	r16,4097
10000c80:	84129d04 	addi	r16,r16,19060
10000c84:	e0bfee17 	ldw	r2,-72(fp)
10000c88:	1009883a 	mov	r4,r2
10000c8c:	01400904 	movi	r5,36
10000c90:	0002cfc0 	call	10002cfc <__mulsi3>
10000c94:	8085883a 	add	r2,r16,r2
10000c98:	10800104 	addi	r2,r2,4
10000c9c:	10000015 	stw	zero,0(r2)
					veggieObject[i].objectType = 0;
10000ca0:	04040074 	movhi	r16,4097
10000ca4:	84129d04 	addi	r16,r16,19060
10000ca8:	e0bfee17 	ldw	r2,-72(fp)
10000cac:	1009883a 	mov	r4,r2
10000cb0:	01400904 	movi	r5,36
10000cb4:	0002cfc0 	call	10002cfc <__mulsi3>
10000cb8:	8085883a 	add	r2,r16,r2
10000cbc:	10800204 	addi	r2,r2,8
10000cc0:	10000015 	stw	zero,0(r2)
					veggieObject[i].xVelocity = randomSpeedX;
10000cc4:	04040074 	movhi	r16,4097
10000cc8:	84129d04 	addi	r16,r16,19060
10000ccc:	e0bfee17 	ldw	r2,-72(fp)
10000cd0:	1009883a 	mov	r4,r2
10000cd4:	01400904 	movi	r5,36
10000cd8:	0002cfc0 	call	10002cfc <__mulsi3>
10000cdc:	8085883a 	add	r2,r16,r2
10000ce0:	10800504 	addi	r2,r2,20
10000ce4:	e0ffef17 	ldw	r3,-68(fp)
10000ce8:	10c00015 	stw	r3,0(r2)
10000cec:	e0fff017 	ldw	r3,-64(fp)
10000cf0:	10c00115 	stw	r3,4(r2)
					veggieObject[i].yVelocity = randomSpeedY;
10000cf4:	04040074 	movhi	r16,4097
10000cf8:	84129d04 	addi	r16,r16,19060
10000cfc:	e0bfee17 	ldw	r2,-72(fp)
10000d00:	1009883a 	mov	r4,r2
10000d04:	01400904 	movi	r5,36
10000d08:	0002cfc0 	call	10002cfc <__mulsi3>
10000d0c:	8085883a 	add	r2,r16,r2
10000d10:	10800704 	addi	r2,r2,28
10000d14:	e0fff717 	ldw	r3,-36(fp)
10000d18:	10c00015 	stw	r3,0(r2)
10000d1c:	e0fff817 	ldw	r3,-32(fp)
10000d20:	10c00115 	stw	r3,4(r2)
					veggieObject[i].objectState = 1;	// reserve this slot
10000d24:	04040074 	movhi	r16,4097
10000d28:	84129d04 	addi	r16,r16,19060
10000d2c:	e0bfee17 	ldw	r2,-72(fp)
10000d30:	1009883a 	mov	r4,r2
10000d34:	01400904 	movi	r5,36
10000d38:	0002cfc0 	call	10002cfc <__mulsi3>
10000d3c:	8085883a 	add	r2,r16,r2
10000d40:	10800304 	addi	r2,r2,12
10000d44:	00c00044 	movi	r3,1
10000d48:	10c00015 	stw	r3,0(r2)

					return; // our evillness is done!!!
10000d4c:	0000cd06 	br	10001084 <spawningEngine+0x598>
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
	{
		if((rand() % 3) == 1)	// one last chance to not bomb this!
		{
			int i;
			for(i=14;i<16;i++)
10000d50:	e0bfee17 	ldw	r2,-72(fp)
10000d54:	10800044 	addi	r2,r2,1
10000d58:	e0bfee15 	stw	r2,-72(fp)
10000d5c:	e0bfee17 	ldw	r2,-72(fp)
10000d60:	10800410 	cmplti	r2,r2,16
10000d64:	103f7a1e 	bne	r2,zero,10000b50 <__alt_data_end+0xf8000b50>
				}
			}
		}
	}
	int i, j;
	for(j=1; j<14; j++)	// let's go through our veggies and see which ones are free
10000d68:	00800044 	movi	r2,1
10000d6c:	e0bff115 	stw	r2,-60(fp)
10000d70:	0000c006 	br	10001074 <spawningEngine+0x588>
	{
		i = (rand() % 15);	// put it in a random port for random veggies
10000d74:	00040cc0 	call	100040cc <rand>
10000d78:	1009883a 	mov	r4,r2
10000d7c:	014003c4 	movi	r5,15
10000d80:	0002c900 	call	10002c90 <__modsi3>
10000d84:	e0bff915 	stw	r2,-28(fp)
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000d88:	04040074 	movhi	r16,4097
10000d8c:	84129d04 	addi	r16,r16,19060
10000d90:	e0bff917 	ldw	r2,-28(fp)
10000d94:	1009883a 	mov	r4,r2
10000d98:	01400904 	movi	r5,36
10000d9c:	0002cfc0 	call	10002cfc <__mulsi3>
10000da0:	8085883a 	add	r2,r16,r2
10000da4:	10800304 	addi	r2,r2,12
10000da8:	10800017 	ldw	r2,0(r2)
10000dac:	1000ae1e 	bne	r2,zero,10001068 <spawningEngine+0x57c>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			int randomType;		// type of fruit that's spawned
			double randomSpeedY, randomSpeedX;	// starting velocity

			veggieObject[i].objectState = 1;	// reserve this slot
10000db0:	04040074 	movhi	r16,4097
10000db4:	84129d04 	addi	r16,r16,19060
10000db8:	e0bff917 	ldw	r2,-28(fp)
10000dbc:	1009883a 	mov	r4,r2
10000dc0:	01400904 	movi	r5,36
10000dc4:	0002cfc0 	call	10002cfc <__mulsi3>
10000dc8:	8085883a 	add	r2,r16,r2
10000dcc:	10800304 	addi	r2,r2,12
10000dd0:	00c00044 	movi	r3,1
10000dd4:	10c00015 	stw	r3,0(r2)

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	10800150 	cmplti	r2,r2,5
10000de0:	1000241e 	bne	r2,zero,10000e74 <spawningEngine+0x388>
			{
				if(((rand() % 2) == 1)&&(sameFruit == 0))
10000de4:	00040cc0 	call	100040cc <rand>
10000de8:	1007883a 	mov	r3,r2
10000dec:	00a00034 	movhi	r2,32768
10000df0:	10800044 	addi	r2,r2,1
10000df4:	1884703a 	and	r2,r3,r2
10000df8:	1000040e 	bge	r2,zero,10000e0c <spawningEngine+0x320>
10000dfc:	10bfffc4 	addi	r2,r2,-1
10000e00:	00ffff84 	movi	r3,-2
10000e04:	10c4b03a 	or	r2,r2,r3
10000e08:	10800044 	addi	r2,r2,1
10000e0c:	10800058 	cmpnei	r2,r2,1
10000e10:	10000d1e 	bne	r2,zero,10000e48 <spawningEngine+0x35c>
10000e14:	d0a6cc17 	ldw	r2,-25808(gp)
10000e18:	10000b1e 	bne	r2,zero,10000e48 <spawningEngine+0x35c>
				{
					sameFruit = (rand() % 8);
10000e1c:	00040cc0 	call	100040cc <rand>
10000e20:	1007883a 	mov	r3,r2
10000e24:	00a00034 	movhi	r2,32768
10000e28:	108001c4 	addi	r2,r2,7
10000e2c:	1884703a 	and	r2,r3,r2
10000e30:	1000040e 	bge	r2,zero,10000e44 <spawningEngine+0x358>
10000e34:	10bfffc4 	addi	r2,r2,-1
10000e38:	00fffe04 	movi	r3,-8
10000e3c:	10c4b03a 	or	r2,r2,r3
10000e40:	10800044 	addi	r2,r2,1
10000e44:	d0a6cc15 	stw	r2,-25808(gp)
				}
				int j;
				for(j=4; j<pattern; j++)
10000e48:	00800104 	movi	r2,4
10000e4c:	e0bff515 	stw	r2,-44(fp)
10000e50:	00000506 	br	10000e68 <spawningEngine+0x37c>
				{
					spawningEngine(1);	// call ourselves to spawn another!
10000e54:	01000044 	movi	r4,1
10000e58:	0000aec0 	call	10000aec <spawningEngine>
				if(((rand() % 2) == 1)&&(sameFruit == 0))
				{
					sameFruit = (rand() % 8);
				}
				int j;
				for(j=4; j<pattern; j++)
10000e5c:	e0bff517 	ldw	r2,-44(fp)
10000e60:	10800044 	addi	r2,r2,1
10000e64:	e0bff515 	stw	r2,-44(fp)
10000e68:	e0fff517 	ldw	r3,-44(fp)
10000e6c:	e0bffd17 	ldw	r2,-12(fp)
10000e70:	18bff816 	blt	r3,r2,10000e54 <__alt_data_end+0xf8000e54>
					spawningEngine(1);	// call ourselves to spawn another!
				}
			}

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10000e74:	00040cc0 	call	100040cc <rand>
10000e78:	1009883a 	mov	r4,r2
10000e7c:	01408704 	movi	r5,540
10000e80:	0002c900 	call	10002c90 <__modsi3>
10000e84:	10800c84 	addi	r2,r2,50
10000e88:	e0bffa15 	stw	r2,-24(fp)
			randomSpeedY = (rand() % 22) + 45;
10000e8c:	00040cc0 	call	100040cc <rand>
10000e90:	1009883a 	mov	r4,r2
10000e94:	01400584 	movi	r5,22
10000e98:	0002c900 	call	10002c90 <__modsi3>
10000e9c:	10800b44 	addi	r2,r2,45
10000ea0:	1009883a 	mov	r4,r2
10000ea4:	0003f180 	call	10003f18 <__floatsidf>
10000ea8:	1009883a 	mov	r4,r2
10000eac:	180b883a 	mov	r5,r3
10000eb0:	e13ffb15 	stw	r4,-20(fp)
10000eb4:	e17ffc15 	stw	r5,-16(fp)
			randomSpeedX = (rand() % 20) - 10;
10000eb8:	00040cc0 	call	100040cc <rand>
10000ebc:	1009883a 	mov	r4,r2
10000ec0:	01400504 	movi	r5,20
10000ec4:	0002c900 	call	10002c90 <__modsi3>
10000ec8:	10bffd84 	addi	r2,r2,-10
10000ecc:	1009883a 	mov	r4,r2
10000ed0:	0003f180 	call	10003f18 <__floatsidf>
10000ed4:	1009883a 	mov	r4,r2
10000ed8:	180b883a 	mov	r5,r3
10000edc:	e13ff315 	stw	r4,-52(fp)
10000ee0:	e17ff415 	stw	r5,-48(fp)

			// check if we are spawning samefruit
			if(sameFruit == 0)
10000ee4:	d0a6cc17 	ldw	r2,-25808(gp)
10000ee8:	10000c1e 	bne	r2,zero,10000f1c <spawningEngine+0x430>
			{
				randomType = (rand() % 8);
10000eec:	00040cc0 	call	100040cc <rand>
10000ef0:	1007883a 	mov	r3,r2
10000ef4:	00a00034 	movhi	r2,32768
10000ef8:	108001c4 	addi	r2,r2,7
10000efc:	1884703a 	and	r2,r3,r2
10000f00:	1000040e 	bge	r2,zero,10000f14 <spawningEngine+0x428>
10000f04:	10bfffc4 	addi	r2,r2,-1
10000f08:	00fffe04 	movi	r3,-8
10000f0c:	10c4b03a 	or	r2,r2,r3
10000f10:	10800044 	addi	r2,r2,1
10000f14:	e0bff215 	stw	r2,-56(fp)
10000f18:	00000206 	br	10000f24 <spawningEngine+0x438>
			}
			else
			{
				randomType = sameFruit;
10000f1c:	d0a6cc17 	ldw	r2,-25808(gp)
10000f20:	e0bff215 	stw	r2,-56(fp)
			}

			// make sure we aren't throwing them out the edges
			if (randomX < 100)
10000f24:	e0bffa17 	ldw	r2,-24(fp)
10000f28:	10801928 	cmpgeui	r2,r2,100
10000f2c:	10000b1e 	bne	r2,zero,10000f5c <spawningEngine+0x470>
			{
				randomSpeedX = (rand() % 20);
10000f30:	00040cc0 	call	100040cc <rand>
10000f34:	1009883a 	mov	r4,r2
10000f38:	01400504 	movi	r5,20
10000f3c:	0002c900 	call	10002c90 <__modsi3>
10000f40:	1009883a 	mov	r4,r2
10000f44:	0003f180 	call	10003f18 <__floatsidf>
10000f48:	1009883a 	mov	r4,r2
10000f4c:	180b883a 	mov	r5,r3
10000f50:	e13ff315 	stw	r4,-52(fp)
10000f54:	e17ff415 	stw	r5,-48(fp)
10000f58:	00000e06 	br	10000f94 <spawningEngine+0x4a8>
			}
			else if (randomX > 540)
10000f5c:	e0bffa17 	ldw	r2,-24(fp)
10000f60:	10808770 	cmpltui	r2,r2,541
10000f64:	10000b1e 	bne	r2,zero,10000f94 <spawningEngine+0x4a8>
			{
				randomSpeedX = (rand() % 20) - 20;
10000f68:	00040cc0 	call	100040cc <rand>
10000f6c:	1009883a 	mov	r4,r2
10000f70:	01400504 	movi	r5,20
10000f74:	0002c900 	call	10002c90 <__modsi3>
10000f78:	10bffb04 	addi	r2,r2,-20
10000f7c:	1009883a 	mov	r4,r2
10000f80:	0003f180 	call	10003f18 <__floatsidf>
10000f84:	1009883a 	mov	r4,r2
10000f88:	180b883a 	mov	r5,r3
10000f8c:	e13ff315 	stw	r4,-52(fp)
10000f90:	e17ff415 	stw	r5,-48(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000f94:	e47ffa17 	ldw	r17,-24(fp)
10000f98:	04040074 	movhi	r16,4097
10000f9c:	84129d04 	addi	r16,r16,19060
10000fa0:	e0bff917 	ldw	r2,-28(fp)
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	01400904 	movi	r5,36
10000fac:	0002cfc0 	call	10002cfc <__mulsi3>
10000fb0:	8085883a 	add	r2,r16,r2
10000fb4:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000fb8:	04040074 	movhi	r16,4097
10000fbc:	84129d04 	addi	r16,r16,19060
10000fc0:	e0bff917 	ldw	r2,-28(fp)
10000fc4:	1009883a 	mov	r4,r2
10000fc8:	01400904 	movi	r5,36
10000fcc:	0002cfc0 	call	10002cfc <__mulsi3>
10000fd0:	8085883a 	add	r2,r16,r2
10000fd4:	10800104 	addi	r2,r2,4
10000fd8:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000fdc:	04040074 	movhi	r16,4097
10000fe0:	84129d04 	addi	r16,r16,19060
10000fe4:	e0bff917 	ldw	r2,-28(fp)
10000fe8:	1009883a 	mov	r4,r2
10000fec:	01400904 	movi	r5,36
10000ff0:	0002cfc0 	call	10002cfc <__mulsi3>
10000ff4:	8085883a 	add	r2,r16,r2
10000ff8:	10800204 	addi	r2,r2,8
10000ffc:	e0fff217 	ldw	r3,-56(fp)
10001000:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10001004:	04040074 	movhi	r16,4097
10001008:	84129d04 	addi	r16,r16,19060
1000100c:	e0bff917 	ldw	r2,-28(fp)
10001010:	1009883a 	mov	r4,r2
10001014:	01400904 	movi	r5,36
10001018:	0002cfc0 	call	10002cfc <__mulsi3>
1000101c:	8085883a 	add	r2,r16,r2
10001020:	10800504 	addi	r2,r2,20
10001024:	e0fff317 	ldw	r3,-52(fp)
10001028:	10c00015 	stw	r3,0(r2)
1000102c:	e0fff417 	ldw	r3,-48(fp)
10001030:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10001034:	04040074 	movhi	r16,4097
10001038:	84129d04 	addi	r16,r16,19060
1000103c:	e0bff917 	ldw	r2,-28(fp)
10001040:	1009883a 	mov	r4,r2
10001044:	01400904 	movi	r5,36
10001048:	0002cfc0 	call	10002cfc <__mulsi3>
1000104c:	8085883a 	add	r2,r16,r2
10001050:	10800704 	addi	r2,r2,28
10001054:	e0fffb17 	ldw	r3,-20(fp)
10001058:	10c00015 	stw	r3,0(r2)
1000105c:	e0fffc17 	ldw	r3,-16(fp)
10001060:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
10001064:	00000706 	br	10001084 <spawningEngine+0x598>
				}
			}
		}
	}
	int i, j;
	for(j=1; j<14; j++)	// let's go through our veggies and see which ones are free
10001068:	e0bff117 	ldw	r2,-60(fp)
1000106c:	10800044 	addi	r2,r2,1
10001070:	e0bff115 	stw	r2,-60(fp)
10001074:	e0bff117 	ldw	r2,-60(fp)
10001078:	10800390 	cmplti	r2,r2,14
1000107c:	103f3d1e 	bne	r2,zero,10000d74 <__alt_data_end+0xf8000d74>
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
		}
	}
	return;
10001080:	0001883a 	nop
}
10001084:	e6fffe04 	addi	sp,fp,-8
10001088:	dfc00317 	ldw	ra,12(sp)
1000108c:	df000217 	ldw	fp,8(sp)
10001090:	dc400117 	ldw	r17,4(sp)
10001094:	dc000017 	ldw	r16,0(sp)
10001098:	dec00404 	addi	sp,sp,16
1000109c:	f800283a 	ret

100010a0 <slicingEngine>:

void slicingEngine()
{
100010a0:	defff704 	addi	sp,sp,-36
100010a4:	dfc00815 	stw	ra,32(sp)
100010a8:	df000715 	stw	fp,28(sp)
100010ac:	dc000615 	stw	r16,24(sp)
100010b0:	df000704 	addi	fp,sp,28
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
100010b4:	00840074 	movhi	r2,4097
100010b8:	10929d04 	addi	r2,r2,19060
100010bc:	10800317 	ldw	r2,12(r2)
100010c0:	1000471e 	bne	r2,zero,100011e0 <slicingEngine+0x140>
100010c4:	d0a6d117 	ldw	r2,-25788(gp)
100010c8:	10004526 	beq	r2,zero,100011e0 <slicingEngine+0x140>
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
100010cc:	d0a6cf17 	ldw	r2,-25796(gp)
100010d0:	10801e70 	cmpltui	r2,r2,121
100010d4:	1000131e 	bne	r2,zero,10001124 <slicingEngine+0x84>
100010d8:	d0a6cf17 	ldw	r2,-25796(gp)
100010dc:	10803c28 	cmpgeui	r2,r2,240
100010e0:	1000101e 	bne	r2,zero,10001124 <slicingEngine+0x84>
100010e4:	d0a6ce17 	ldw	r2,-25800(gp)
100010e8:	10801e70 	cmpltui	r2,r2,121
100010ec:	10000d1e 	bne	r2,zero,10001124 <slicingEngine+0x84>
100010f0:	d0a6ce17 	ldw	r2,-25800(gp)
100010f4:	10803c28 	cmpgeui	r2,r2,240
100010f8:	10000a1e 	bne	r2,zero,10001124 <slicingEngine+0x84>
		{
			veggieObject[0].objectState = 1;	// easy mode start
100010fc:	00840074 	movhi	r2,4097
10001100:	10929d04 	addi	r2,r2,19060
10001104:	00c00044 	movi	r3,1
10001108:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 0;		// where we're goin, we don't need lives
1000110c:	00840074 	movhi	r2,4097
10001110:	10929d04 	addi	r2,r2,19060
10001114:	10000215 	stw	zero,8(r2)
			roundStart = elapsedTime;
10001118:	d0a6cb17 	ldw	r2,-25812(gp)
1000111c:	d0a6d815 	stw	r2,-25760(gp)
10001120:	00002e06 	br	100011dc <slicingEngine+0x13c>
		}
		else if((xCursor>320)&&(xCursor<440)&&(yCursor>320)&&(yCursor<440))
10001124:	d0a6cf17 	ldw	r2,-25796(gp)
10001128:	10805070 	cmpltui	r2,r2,321
1000112c:	1000141e 	bne	r2,zero,10001180 <slicingEngine+0xe0>
10001130:	d0a6cf17 	ldw	r2,-25796(gp)
10001134:	10806e28 	cmpgeui	r2,r2,440
10001138:	1000111e 	bne	r2,zero,10001180 <slicingEngine+0xe0>
1000113c:	d0a6ce17 	ldw	r2,-25800(gp)
10001140:	10805070 	cmpltui	r2,r2,321
10001144:	10000e1e 	bne	r2,zero,10001180 <slicingEngine+0xe0>
10001148:	d0a6ce17 	ldw	r2,-25800(gp)
1000114c:	10806e28 	cmpgeui	r2,r2,440
10001150:	10000b1e 	bne	r2,zero,10001180 <slicingEngine+0xe0>
		{
			veggieObject[0].objectState = 2;	// medium mode start
10001154:	00840074 	movhi	r2,4097
10001158:	10929d04 	addi	r2,r2,19060
1000115c:	00c00084 	movi	r3,2
10001160:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 7;		// lots of lives for u!
10001164:	00840074 	movhi	r2,4097
10001168:	10929d04 	addi	r2,r2,19060
1000116c:	00c001c4 	movi	r3,7
10001170:	10c00215 	stw	r3,8(r2)
			roundStart = elapsedTime;
10001174:	d0a6cb17 	ldw	r2,-25812(gp)
10001178:	d0a6d815 	stw	r2,-25760(gp)
1000117c:	00001706 	br	100011dc <slicingEngine+0x13c>
		}
		else if((xCursor>450)&&(xCursor<570)&&(yCursor>150)&&(yCursor<270))
10001180:	d0a6cf17 	ldw	r2,-25796(gp)
10001184:	108070f0 	cmpltui	r2,r2,451
10001188:	1000141e 	bne	r2,zero,100011dc <slicingEngine+0x13c>
1000118c:	d0a6cf17 	ldw	r2,-25796(gp)
10001190:	10808ea8 	cmpgeui	r2,r2,570
10001194:	1000111e 	bne	r2,zero,100011dc <slicingEngine+0x13c>
10001198:	d0a6ce17 	ldw	r2,-25800(gp)
1000119c:	108025f0 	cmpltui	r2,r2,151
100011a0:	10000e1e 	bne	r2,zero,100011dc <slicingEngine+0x13c>
100011a4:	d0a6ce17 	ldw	r2,-25800(gp)
100011a8:	108043a8 	cmpgeui	r2,r2,270
100011ac:	10000b1e 	bne	r2,zero,100011dc <slicingEngine+0x13c>
		{
			veggieObject[0].objectState = 3;	// hard mode start
100011b0:	00840074 	movhi	r2,4097
100011b4:	10929d04 	addi	r2,r2,19060
100011b8:	00c000c4 	movi	r3,3
100011bc:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 3;		// ..good luck...you'll need it
100011c0:	00840074 	movhi	r2,4097
100011c4:	10929d04 	addi	r2,r2,19060
100011c8:	00c000c4 	movi	r3,3
100011cc:	10c00215 	stw	r3,8(r2)
			roundStart = elapsedTime;
100011d0:	d0a6cb17 	ldw	r2,-25812(gp)
100011d4:	d0a6d815 	stw	r2,-25760(gp)
{
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
100011d8:	0000cd06 	br	10001510 <slicingEngine+0x470>
100011dc:	0000cc06 	br	10001510 <slicingEngine+0x470>
			veggieObject[0].objectState = 3;	// hard mode start
			veggieObject[0].objectType = 3;		// ..good luck...you'll need it
			roundStart = elapsedTime;
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
100011e0:	00840074 	movhi	r2,4097
100011e4:	10929d04 	addi	r2,r2,19060
100011e8:	10800317 	ldw	r2,12(r2)
100011ec:	10800120 	cmpeqi	r2,r2,4
100011f0:	1000051e 	bne	r2,zero,10001208 <slicingEngine+0x168>
100011f4:	00840074 	movhi	r2,4097
100011f8:	10929d04 	addi	r2,r2,19060
100011fc:	10800317 	ldw	r2,12(r2)
10001200:	10800158 	cmpnei	r2,r2,5
10001204:	1000131e 	bne	r2,zero,10001254 <slicingEngine+0x1b4>
10001208:	d0a6d117 	ldw	r2,-25788(gp)
1000120c:	10001126 	beq	r2,zero,10001254 <slicingEngine+0x1b4>
	{
		// DO MORE MENU COLLISION
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
10001210:	d0a6cf17 	ldw	r2,-25796(gp)
10001214:	10801e70 	cmpltui	r2,r2,121
10001218:	10000d1e 	bne	r2,zero,10001250 <slicingEngine+0x1b0>
1000121c:	d0a6cf17 	ldw	r2,-25796(gp)
10001220:	10803c28 	cmpgeui	r2,r2,240
10001224:	10000a1e 	bne	r2,zero,10001250 <slicingEngine+0x1b0>
10001228:	d0a6ce17 	ldw	r2,-25800(gp)
1000122c:	10801e70 	cmpltui	r2,r2,121
10001230:	1000071e 	bne	r2,zero,10001250 <slicingEngine+0x1b0>
10001234:	d0a6ce17 	ldw	r2,-25800(gp)
10001238:	10803c28 	cmpgeui	r2,r2,240
1000123c:	1000041e 	bne	r2,zero,10001250 <slicingEngine+0x1b0>
		{
			veggieObject[0].objectState = 0;	// return to main menu
10001240:	00840074 	movhi	r2,4097
10001244:	10929d04 	addi	r2,r2,19060
10001248:	10000315 	stw	zero,12(r2)
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
	{
		// DO MORE MENU COLLISION
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
1000124c:	0000b006 	br	10001510 <slicingEngine+0x470>
10001250:	0000af06 	br	10001510 <slicingEngine+0x470>
		{
			veggieObject[0].objectState = 0;	// return to main menu
		}
	}
	else if(cursorStreak)	// if cursor has streak, we can cut!
10001254:	d0a6d117 	ldw	r2,-25788(gp)
10001258:	1000ad26 	beq	r2,zero,10001510 <slicingEngine+0x470>
	{
		int i;
		for(i=1; i<16; i++)	// let's go through our objects and see which ones collide
1000125c:	00800044 	movi	r2,1
10001260:	e0bff915 	stw	r2,-28(fp)
10001264:	0000a706 	br	10001504 <slicingEngine+0x464>
		{
			// only if it is in perfect state
			if(veggieObject[i].objectState == 1)
10001268:	04040074 	movhi	r16,4097
1000126c:	84129d04 	addi	r16,r16,19060
10001270:	e0bff917 	ldw	r2,-28(fp)
10001274:	1009883a 	mov	r4,r2
10001278:	01400904 	movi	r5,36
1000127c:	0002cfc0 	call	10002cfc <__mulsi3>
10001280:	8085883a 	add	r2,r16,r2
10001284:	10800304 	addi	r2,r2,12
10001288:	10800017 	ldw	r2,0(r2)
1000128c:	10800058 	cmpnei	r2,r2,1
10001290:	1000991e 	bne	r2,zero,100014f8 <slicingEngine+0x458>
			{
				// let's grab the vegetable coordinates
				int veggieX = veggieObject[i].xPosition;
10001294:	04040074 	movhi	r16,4097
10001298:	84129d04 	addi	r16,r16,19060
1000129c:	e0bff917 	ldw	r2,-28(fp)
100012a0:	1009883a 	mov	r4,r2
100012a4:	01400904 	movi	r5,36
100012a8:	0002cfc0 	call	10002cfc <__mulsi3>
100012ac:	8085883a 	add	r2,r16,r2
100012b0:	10800017 	ldw	r2,0(r2)
100012b4:	e0bffd15 	stw	r2,-12(fp)
				int veggieY = veggieObject[i].xPosition;
100012b8:	04040074 	movhi	r16,4097
100012bc:	84129d04 	addi	r16,r16,19060
100012c0:	e0bff917 	ldw	r2,-28(fp)
100012c4:	1009883a 	mov	r4,r2
100012c8:	01400904 	movi	r5,36
100012cc:	0002cfc0 	call	10002cfc <__mulsi3>
100012d0:	8085883a 	add	r2,r16,r2
100012d4:	10800017 	ldw	r2,0(r2)
100012d8:	e0bffe15 	stw	r2,-8(fp)

				// let's set our collision box
				int collideX, collideY;
				int offsetX = 10;
100012dc:	00800284 	movi	r2,10
100012e0:	e0bffc15 	stw	r2,-16(fp)
				if((veggieObject[i].objectType == 1)) //eggplant
100012e4:	04040074 	movhi	r16,4097
100012e8:	84129d04 	addi	r16,r16,19060
100012ec:	e0bff917 	ldw	r2,-28(fp)
100012f0:	1009883a 	mov	r4,r2
100012f4:	01400904 	movi	r5,36
100012f8:	0002cfc0 	call	10002cfc <__mulsi3>
100012fc:	8085883a 	add	r2,r16,r2
10001300:	10800204 	addi	r2,r2,8
10001304:	10800017 	ldw	r2,0(r2)
10001308:	10800058 	cmpnei	r2,r2,1
1000130c:	1000051e 	bne	r2,zero,10001324 <slicingEngine+0x284>
				{
					collideX = 45;
10001310:	00800b44 	movi	r2,45
10001314:	e0bffa15 	stw	r2,-24(fp)
					collideY = 85;
10001318:	00801544 	movi	r2,85
1000131c:	e0bffb15 	stw	r2,-20(fp)
10001320:	00003506 	br	100013f8 <slicingEngine+0x358>
				}
				else if((veggieObject[i].objectType == 2))	// potato
10001324:	04040074 	movhi	r16,4097
10001328:	84129d04 	addi	r16,r16,19060
1000132c:	e0bff917 	ldw	r2,-28(fp)
10001330:	1009883a 	mov	r4,r2
10001334:	01400904 	movi	r5,36
10001338:	0002cfc0 	call	10002cfc <__mulsi3>
1000133c:	8085883a 	add	r2,r16,r2
10001340:	10800204 	addi	r2,r2,8
10001344:	10800017 	ldw	r2,0(r2)
10001348:	10800098 	cmpnei	r2,r2,2
1000134c:	1000051e 	bne	r2,zero,10001364 <slicingEngine+0x2c4>
				{
					collideX = 45;
10001350:	00800b44 	movi	r2,45
10001354:	e0bffa15 	stw	r2,-24(fp)
					collideY = 80;
10001358:	00801404 	movi	r2,80
1000135c:	e0bffb15 	stw	r2,-20(fp)
10001360:	00002506 	br	100013f8 <slicingEngine+0x358>
				}
				else if((veggieObject[i].objectType == 3)) 	// carrot
10001364:	04040074 	movhi	r16,4097
10001368:	84129d04 	addi	r16,r16,19060
1000136c:	e0bff917 	ldw	r2,-28(fp)
10001370:	1009883a 	mov	r4,r2
10001374:	01400904 	movi	r5,36
10001378:	0002cfc0 	call	10002cfc <__mulsi3>
1000137c:	8085883a 	add	r2,r16,r2
10001380:	10800204 	addi	r2,r2,8
10001384:	10800017 	ldw	r2,0(r2)
10001388:	108000d8 	cmpnei	r2,r2,3
1000138c:	1000051e 	bne	r2,zero,100013a4 <slicingEngine+0x304>
				{
					collideX = 45;
10001390:	00800b44 	movi	r2,45
10001394:	e0bffa15 	stw	r2,-24(fp)
					collideY = 40;
10001398:	00800a04 	movi	r2,40
1000139c:	e0bffb15 	stw	r2,-20(fp)
100013a0:	00001506 	br	100013f8 <slicingEngine+0x358>
				}
				else if((veggieObject[i].objectType == 3))	// tomato
100013a4:	04040074 	movhi	r16,4097
100013a8:	84129d04 	addi	r16,r16,19060
100013ac:	e0bff917 	ldw	r2,-28(fp)
100013b0:	1009883a 	mov	r4,r2
100013b4:	01400904 	movi	r5,36
100013b8:	0002cfc0 	call	10002cfc <__mulsi3>
100013bc:	8085883a 	add	r2,r16,r2
100013c0:	10800204 	addi	r2,r2,8
100013c4:	10800017 	ldw	r2,0(r2)
100013c8:	108000d8 	cmpnei	r2,r2,3
100013cc:	1000051e 	bne	r2,zero,100013e4 <slicingEngine+0x344>
				{
					collideX = 40;
100013d0:	00800a04 	movi	r2,40
100013d4:	e0bffa15 	stw	r2,-24(fp)
					collideY = 40;
100013d8:	00800a04 	movi	r2,40
100013dc:	e0bffb15 	stw	r2,-20(fp)
100013e0:	00000506 	br	100013f8 <slicingEngine+0x358>
				}
				else	// broccoli, cabbage, radish, onion
				{
					offsetX = 0;
100013e4:	e03ffc15 	stw	zero,-16(fp)
					collideX = 64;
100013e8:	00801004 	movi	r2,64
100013ec:	e0bffa15 	stw	r2,-24(fp)
					collideY = 64;
100013f0:	00801004 	movi	r2,64
100013f4:	e0bffb15 	stw	r2,-20(fp)
				}

				// now let's check collision
				if(((veggieX+offsetX)<xCursor)&&((veggieX+collideX)>xCursor)&&(veggieY<yCursor)&&((veggieY+collideY)>yCursor))
100013f8:	e0fffd17 	ldw	r3,-12(fp)
100013fc:	e0bffc17 	ldw	r2,-16(fp)
10001400:	1885883a 	add	r2,r3,r2
10001404:	1007883a 	mov	r3,r2
10001408:	d0a6cf17 	ldw	r2,-25796(gp)
1000140c:	18803a2e 	bgeu	r3,r2,100014f8 <slicingEngine+0x458>
10001410:	e0fffd17 	ldw	r3,-12(fp)
10001414:	e0bffa17 	ldw	r2,-24(fp)
10001418:	1885883a 	add	r2,r3,r2
1000141c:	1007883a 	mov	r3,r2
10001420:	d0a6cf17 	ldw	r2,-25796(gp)
10001424:	10c0342e 	bgeu	r2,r3,100014f8 <slicingEngine+0x458>
10001428:	e0fffe17 	ldw	r3,-8(fp)
1000142c:	d0a6ce17 	ldw	r2,-25800(gp)
10001430:	1880312e 	bgeu	r3,r2,100014f8 <slicingEngine+0x458>
10001434:	e0fffe17 	ldw	r3,-8(fp)
10001438:	e0bffb17 	ldw	r2,-20(fp)
1000143c:	1885883a 	add	r2,r3,r2
10001440:	1007883a 	mov	r3,r2
10001444:	d0a6ce17 	ldw	r2,-25800(gp)
10001448:	10c02b2e 	bgeu	r2,r3,100014f8 <slicingEngine+0x458>
				{
					// this means we are in the 'hitbox'!! kill the fruit!
					veggieObject[i].objectState = 2;
1000144c:	04040074 	movhi	r16,4097
10001450:	84129d04 	addi	r16,r16,19060
10001454:	e0bff917 	ldw	r2,-28(fp)
10001458:	1009883a 	mov	r4,r2
1000145c:	01400904 	movi	r5,36
10001460:	0002cfc0 	call	10002cfc <__mulsi3>
10001464:	8085883a 	add	r2,r16,r2
10001468:	10800304 	addi	r2,r2,12
1000146c:	00c00084 	movi	r3,2
10001470:	10c00015 	stw	r3,0(r2)

					if(i<14)
10001474:	e0bff917 	ldw	r2,-28(fp)
10001478:	10800388 	cmpgei	r2,r2,14
1000147c:	10000f1e 	bne	r2,zero,100014bc <slicingEngine+0x41c>
					{
						comboFruit = comboFruit + 1;
10001480:	d0a6d917 	ldw	r2,-25756(gp)
10001484:	10800044 	addi	r2,r2,1
10001488:	d0a6d915 	stw	r2,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition + 10*comboFruit;
1000148c:	00840074 	movhi	r2,4097
10001490:	10929d04 	addi	r2,r2,19060
10001494:	14000017 	ldw	r16,0(r2)
10001498:	d0a6d917 	ldw	r2,-25756(gp)
1000149c:	1009883a 	mov	r4,r2
100014a0:	01400284 	movi	r5,10
100014a4:	0002cfc0 	call	10002cfc <__mulsi3>
100014a8:	8087883a 	add	r3,r16,r2
100014ac:	00840074 	movhi	r2,4097
100014b0:	10929d04 	addi	r2,r2,19060
100014b4:	10c00015 	stw	r3,0(r2)
100014b8:	00000f06 	br	100014f8 <slicingEngine+0x458>
					}
					else	// ITS A BOMB!!! OMGOGMGOMGG!!
					{
						veggieObject[0].objectType = veggieObject[0].objectType-1;
100014bc:	00840074 	movhi	r2,4097
100014c0:	10929d04 	addi	r2,r2,19060
100014c4:	10800217 	ldw	r2,8(r2)
100014c8:	10ffffc4 	addi	r3,r2,-1
100014cc:	00840074 	movhi	r2,4097
100014d0:	10929d04 	addi	r2,r2,19060
100014d4:	10c00215 	stw	r3,8(r2)
						comboFruit = 0;
100014d8:	d026d915 	stw	zero,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition - 1000;
100014dc:	00840074 	movhi	r2,4097
100014e0:	10929d04 	addi	r2,r2,19060
100014e4:	10800017 	ldw	r2,0(r2)
100014e8:	10ff0604 	addi	r3,r2,-1000
100014ec:	00840074 	movhi	r2,4097
100014f0:	10929d04 	addi	r2,r2,19060
100014f4:	10c00015 	stw	r3,0(r2)
		}
	}
	else if(cursorStreak)	// if cursor has streak, we can cut!
	{
		int i;
		for(i=1; i<16; i++)	// let's go through our objects and see which ones collide
100014f8:	e0bff917 	ldw	r2,-28(fp)
100014fc:	10800044 	addi	r2,r2,1
10001500:	e0bff915 	stw	r2,-28(fp)
10001504:	e0bff917 	ldw	r2,-28(fp)
10001508:	10800410 	cmplti	r2,r2,16
1000150c:	103f561e 	bne	r2,zero,10001268 <__alt_data_end+0xf8001268>

				}
			}
		}
	}
	return;
10001510:	0001883a 	nop
}
10001514:	e6ffff04 	addi	sp,fp,-4
10001518:	dfc00217 	ldw	ra,8(sp)
1000151c:	df000117 	ldw	fp,4(sp)
10001520:	dc000017 	ldw	r16,0(sp)
10001524:	dec00304 	addi	sp,sp,12
10001528:	f800283a 	ret

1000152c <disintegrateEngine>:

void disintegrateEngine()
{
1000152c:	defffc04 	addi	sp,sp,-16
10001530:	dfc00315 	stw	ra,12(sp)
10001534:	df000215 	stw	fp,8(sp)
10001538:	dc000115 	stw	r16,4(sp)
1000153c:	df000204 	addi	fp,sp,8
	int i;
	for(i=1; i<16; i++)	// let's go through our objects
10001540:	00800044 	movi	r2,1
10001544:	e0bffe15 	stw	r2,-8(fp)
10001548:	00007106 	br	10001710 <disintegrateEngine+0x1e4>
	{
		if(veggieObject[i].objectState == 2) // just been cut
1000154c:	04040074 	movhi	r16,4097
10001550:	84129d04 	addi	r16,r16,19060
10001554:	e0bffe17 	ldw	r2,-8(fp)
10001558:	1009883a 	mov	r4,r2
1000155c:	01400904 	movi	r5,36
10001560:	0002cfc0 	call	10002cfc <__mulsi3>
10001564:	8085883a 	add	r2,r16,r2
10001568:	10800304 	addi	r2,r2,12
1000156c:	10800017 	ldw	r2,0(r2)
10001570:	10800098 	cmpnei	r2,r2,2
10001574:	10000b1e 	bne	r2,zero,100015a4 <disintegrateEngine+0x78>
		{
			veggieObject[i].objectState = 3;
10001578:	04040074 	movhi	r16,4097
1000157c:	84129d04 	addi	r16,r16,19060
10001580:	e0bffe17 	ldw	r2,-8(fp)
10001584:	1009883a 	mov	r4,r2
10001588:	01400904 	movi	r5,36
1000158c:	0002cfc0 	call	10002cfc <__mulsi3>
10001590:	8085883a 	add	r2,r16,r2
10001594:	10800304 	addi	r2,r2,12
10001598:	00c000c4 	movi	r3,3
1000159c:	10c00015 	stw	r3,0(r2)
100015a0:	00005806 	br	10001704 <disintegrateEngine+0x1d8>
		}
		else if(veggieObject[i].objectState == 3) // midway through
100015a4:	04040074 	movhi	r16,4097
100015a8:	84129d04 	addi	r16,r16,19060
100015ac:	e0bffe17 	ldw	r2,-8(fp)
100015b0:	1009883a 	mov	r4,r2
100015b4:	01400904 	movi	r5,36
100015b8:	0002cfc0 	call	10002cfc <__mulsi3>
100015bc:	8085883a 	add	r2,r16,r2
100015c0:	10800304 	addi	r2,r2,12
100015c4:	10800017 	ldw	r2,0(r2)
100015c8:	108000d8 	cmpnei	r2,r2,3
100015cc:	10000b1e 	bne	r2,zero,100015fc <disintegrateEngine+0xd0>
		{
			veggieObject[i].objectState = 4;
100015d0:	04040074 	movhi	r16,4097
100015d4:	84129d04 	addi	r16,r16,19060
100015d8:	e0bffe17 	ldw	r2,-8(fp)
100015dc:	1009883a 	mov	r4,r2
100015e0:	01400904 	movi	r5,36
100015e4:	0002cfc0 	call	10002cfc <__mulsi3>
100015e8:	8085883a 	add	r2,r16,r2
100015ec:	10800304 	addi	r2,r2,12
100015f0:	00c00104 	movi	r3,4
100015f4:	10c00015 	stw	r3,0(r2)
100015f8:	00004206 	br	10001704 <disintegrateEngine+0x1d8>
		}
		else if(veggieObject[i].objectState == 4) // almost dedded
100015fc:	04040074 	movhi	r16,4097
10001600:	84129d04 	addi	r16,r16,19060
10001604:	e0bffe17 	ldw	r2,-8(fp)
10001608:	1009883a 	mov	r4,r2
1000160c:	01400904 	movi	r5,36
10001610:	0002cfc0 	call	10002cfc <__mulsi3>
10001614:	8085883a 	add	r2,r16,r2
10001618:	10800304 	addi	r2,r2,12
1000161c:	10800017 	ldw	r2,0(r2)
10001620:	10800118 	cmpnei	r2,r2,4
10001624:	1000371e 	bne	r2,zero,10001704 <disintegrateEngine+0x1d8>
		{
			veggieObject[i].xPosition = 0;		// gone!
10001628:	04040074 	movhi	r16,4097
1000162c:	84129d04 	addi	r16,r16,19060
10001630:	e0bffe17 	ldw	r2,-8(fp)
10001634:	1009883a 	mov	r4,r2
10001638:	01400904 	movi	r5,36
1000163c:	0002cfc0 	call	10002cfc <__mulsi3>
10001640:	8085883a 	add	r2,r16,r2
10001644:	10000015 	stw	zero,0(r2)
			veggieObject[i].yPosition = 0;
10001648:	04040074 	movhi	r16,4097
1000164c:	84129d04 	addi	r16,r16,19060
10001650:	e0bffe17 	ldw	r2,-8(fp)
10001654:	1009883a 	mov	r4,r2
10001658:	01400904 	movi	r5,36
1000165c:	0002cfc0 	call	10002cfc <__mulsi3>
10001660:	8085883a 	add	r2,r16,r2
10001664:	10800104 	addi	r2,r2,4
10001668:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = 0;
1000166c:	04040074 	movhi	r16,4097
10001670:	84129d04 	addi	r16,r16,19060
10001674:	e0bffe17 	ldw	r2,-8(fp)
10001678:	1009883a 	mov	r4,r2
1000167c:	01400904 	movi	r5,36
10001680:	0002cfc0 	call	10002cfc <__mulsi3>
10001684:	8085883a 	add	r2,r16,r2
10001688:	10800204 	addi	r2,r2,8
1000168c:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectState = 0;
10001690:	04040074 	movhi	r16,4097
10001694:	84129d04 	addi	r16,r16,19060
10001698:	e0bffe17 	ldw	r2,-8(fp)
1000169c:	1009883a 	mov	r4,r2
100016a0:	01400904 	movi	r5,36
100016a4:	0002cfc0 	call	10002cfc <__mulsi3>
100016a8:	8085883a 	add	r2,r16,r2
100016ac:	10800304 	addi	r2,r2,12
100016b0:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = 0;
100016b4:	04040074 	movhi	r16,4097
100016b8:	84129d04 	addi	r16,r16,19060
100016bc:	e0bffe17 	ldw	r2,-8(fp)
100016c0:	1009883a 	mov	r4,r2
100016c4:	01400904 	movi	r5,36
100016c8:	0002cfc0 	call	10002cfc <__mulsi3>
100016cc:	8085883a 	add	r2,r16,r2
100016d0:	10800504 	addi	r2,r2,20
100016d4:	10000015 	stw	zero,0(r2)
100016d8:	10000115 	stw	zero,4(r2)
			veggieObject[i].yVelocity = 0;
100016dc:	04040074 	movhi	r16,4097
100016e0:	84129d04 	addi	r16,r16,19060
100016e4:	e0bffe17 	ldw	r2,-8(fp)
100016e8:	1009883a 	mov	r4,r2
100016ec:	01400904 	movi	r5,36
100016f0:	0002cfc0 	call	10002cfc <__mulsi3>
100016f4:	8085883a 	add	r2,r16,r2
100016f8:	10800704 	addi	r2,r2,28
100016fc:	10000015 	stw	zero,0(r2)
10001700:	10000115 	stw	zero,4(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects
10001704:	e0bffe17 	ldw	r2,-8(fp)
10001708:	10800044 	addi	r2,r2,1
1000170c:	e0bffe15 	stw	r2,-8(fp)
10001710:	e0bffe17 	ldw	r2,-8(fp)
10001714:	10800410 	cmplti	r2,r2,16
10001718:	103f8c1e 	bne	r2,zero,1000154c <__alt_data_end+0xf800154c>
			veggieObject[i].objectState = 0;
			veggieObject[i].xVelocity = 0;
			veggieObject[i].yVelocity = 0;
		}
	}
}
1000171c:	e6ffff04 	addi	sp,fp,-4
10001720:	dfc00217 	ldw	ra,8(sp)
10001724:	df000117 	ldw	fp,4(sp)
10001728:	dc000017 	ldw	r16,0(sp)
1000172c:	dec00304 	addi	sp,sp,12
10001730:	f800283a 	ret

10001734 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10001734:	deffe704 	addi	sp,sp,-100
10001738:	dfc01815 	stw	ra,96(sp)
1000173c:	df001715 	stw	fp,92(sp)
10001740:	dc001615 	stw	r16,88(sp)
10001744:	df001704 	addi	fp,sp,92
	// start putting in our xcoords
	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10001748:	00801c04 	movi	r2,112
1000174c:	00c00044 	movi	r3,1
10001750:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].xPosition;
10001754:	00c04004 	movi	r3,256
10001758:	00840074 	movhi	r2,4097
1000175c:	10929d04 	addi	r2,r2,19060
10001760:	10800017 	ldw	r2,0(r2)
10001764:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].xPosition;
10001768:	00c03c04 	movi	r3,240
1000176c:	00840074 	movhi	r2,4097
10001770:	10929d04 	addi	r2,r2,19060
10001774:	10800917 	ldw	r2,36(r2)
10001778:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].xPosition;
1000177c:	00c03804 	movi	r3,224
10001780:	00840074 	movhi	r2,4097
10001784:	10929d04 	addi	r2,r2,19060
10001788:	10801217 	ldw	r2,72(r2)
1000178c:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].xPosition;
10001790:	00c03404 	movi	r3,208
10001794:	00840074 	movhi	r2,4097
10001798:	10929d04 	addi	r2,r2,19060
1000179c:	10801b17 	ldw	r2,108(r2)
100017a0:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].xPosition;
100017a4:	00c03004 	movi	r3,192
100017a8:	00840074 	movhi	r2,4097
100017ac:	10929d04 	addi	r2,r2,19060
100017b0:	10802417 	ldw	r2,144(r2)
100017b4:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].xPosition;
100017b8:	00c02c04 	movi	r3,176
100017bc:	00840074 	movhi	r2,4097
100017c0:	10929d04 	addi	r2,r2,19060
100017c4:	10802d17 	ldw	r2,180(r2)
100017c8:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].xPosition;
100017cc:	00c02804 	movi	r3,160
100017d0:	00840074 	movhi	r2,4097
100017d4:	10929d04 	addi	r2,r2,19060
100017d8:	10803617 	ldw	r2,216(r2)
100017dc:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].xPosition;
100017e0:	00c01804 	movi	r3,96
100017e4:	00840074 	movhi	r2,4097
100017e8:	10929d04 	addi	r2,r2,19060
100017ec:	10803f17 	ldw	r2,252(r2)
100017f0:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].xPosition;
100017f4:	00c02404 	movi	r3,144
100017f8:	00840074 	movhi	r2,4097
100017fc:	10929d04 	addi	r2,r2,19060
10001800:	10804817 	ldw	r2,288(r2)
10001804:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].xPosition;
10001808:	00c02004 	movi	r3,128
1000180c:	00840074 	movhi	r2,4097
10001810:	10929d04 	addi	r2,r2,19060
10001814:	10805117 	ldw	r2,324(r2)
10001818:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].xPosition;
1000181c:	00c01004 	movi	r3,64
10001820:	00840074 	movhi	r2,4097
10001824:	10929d04 	addi	r2,r2,19060
10001828:	10805a17 	ldw	r2,360(r2)
1000182c:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].xPosition;
10001830:	00c00c04 	movi	r3,48
10001834:	00840074 	movhi	r2,4097
10001838:	10929d04 	addi	r2,r2,19060
1000183c:	10806317 	ldw	r2,396(r2)
10001840:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].xPosition;
10001844:	00c00804 	movi	r3,32
10001848:	00840074 	movhi	r2,4097
1000184c:	10929d04 	addi	r2,r2,19060
10001850:	10806c17 	ldw	r2,432(r2)
10001854:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].xPosition;
10001858:	00c05804 	movi	r3,352
1000185c:	00840074 	movhi	r2,4097
10001860:	10929d04 	addi	r2,r2,19060
10001864:	10807517 	ldw	r2,468(r2)
10001868:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].xPosition;
1000186c:	00c05404 	movi	r3,336
10001870:	00840074 	movhi	r2,4097
10001874:	10929d04 	addi	r2,r2,19060
10001878:	10807e17 	ldw	r2,504(r2)
1000187c:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].xPosition;
10001880:	00c05004 	movi	r3,320
10001884:	00840074 	movhi	r2,4097
10001888:	10929d04 	addi	r2,r2,19060
1000188c:	10808717 	ldw	r2,540(r2)
10001890:	18800015 	stw	r2,0(r3)
	// wait for response
	while(*to_sw_sig != 1);
10001894:	0001883a 	nop
10001898:	00801404 	movi	r2,80
1000189c:	10800003 	ldbu	r2,0(r2)
100018a0:	10803fcc 	andi	r2,r2,255
100018a4:	1080201c 	xori	r2,r2,128
100018a8:	10bfe004 	addi	r2,r2,-128
100018ac:	10800058 	cmpnei	r2,r2,1
100018b0:	103ff91e 	bne	r2,zero,10001898 <__alt_data_end+0xf8001898>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
100018b4:	00801c04 	movi	r2,112
100018b8:	00c00084 	movi	r3,2
100018bc:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].yPosition;
100018c0:	00c04004 	movi	r3,256
100018c4:	00840074 	movhi	r2,4097
100018c8:	10929d04 	addi	r2,r2,19060
100018cc:	10800117 	ldw	r2,4(r2)
100018d0:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].yPosition;
100018d4:	00c03c04 	movi	r3,240
100018d8:	00840074 	movhi	r2,4097
100018dc:	10929d04 	addi	r2,r2,19060
100018e0:	10800a17 	ldw	r2,40(r2)
100018e4:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].yPosition;
100018e8:	00c03804 	movi	r3,224
100018ec:	00840074 	movhi	r2,4097
100018f0:	10929d04 	addi	r2,r2,19060
100018f4:	10801317 	ldw	r2,76(r2)
100018f8:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].yPosition;
100018fc:	00c03404 	movi	r3,208
10001900:	00840074 	movhi	r2,4097
10001904:	10929d04 	addi	r2,r2,19060
10001908:	10801c17 	ldw	r2,112(r2)
1000190c:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].yPosition;
10001910:	00c03004 	movi	r3,192
10001914:	00840074 	movhi	r2,4097
10001918:	10929d04 	addi	r2,r2,19060
1000191c:	10802517 	ldw	r2,148(r2)
10001920:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].yPosition;
10001924:	00c02c04 	movi	r3,176
10001928:	00840074 	movhi	r2,4097
1000192c:	10929d04 	addi	r2,r2,19060
10001930:	10802e17 	ldw	r2,184(r2)
10001934:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].yPosition;
10001938:	00c02804 	movi	r3,160
1000193c:	00840074 	movhi	r2,4097
10001940:	10929d04 	addi	r2,r2,19060
10001944:	10803717 	ldw	r2,220(r2)
10001948:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].yPosition;
1000194c:	00c01804 	movi	r3,96
10001950:	00840074 	movhi	r2,4097
10001954:	10929d04 	addi	r2,r2,19060
10001958:	10804017 	ldw	r2,256(r2)
1000195c:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].yPosition;
10001960:	00c02404 	movi	r3,144
10001964:	00840074 	movhi	r2,4097
10001968:	10929d04 	addi	r2,r2,19060
1000196c:	10804917 	ldw	r2,292(r2)
10001970:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].yPosition;
10001974:	00c02004 	movi	r3,128
10001978:	00840074 	movhi	r2,4097
1000197c:	10929d04 	addi	r2,r2,19060
10001980:	10805217 	ldw	r2,328(r2)
10001984:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].yPosition;
10001988:	00c01004 	movi	r3,64
1000198c:	00840074 	movhi	r2,4097
10001990:	10929d04 	addi	r2,r2,19060
10001994:	10805b17 	ldw	r2,364(r2)
10001998:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].yPosition;
1000199c:	00c00c04 	movi	r3,48
100019a0:	00840074 	movhi	r2,4097
100019a4:	10929d04 	addi	r2,r2,19060
100019a8:	10806417 	ldw	r2,400(r2)
100019ac:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].yPosition;
100019b0:	00c00804 	movi	r3,32
100019b4:	00840074 	movhi	r2,4097
100019b8:	10929d04 	addi	r2,r2,19060
100019bc:	10806d17 	ldw	r2,436(r2)
100019c0:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].yPosition;
100019c4:	00c05804 	movi	r3,352
100019c8:	00840074 	movhi	r2,4097
100019cc:	10929d04 	addi	r2,r2,19060
100019d0:	10807617 	ldw	r2,472(r2)
100019d4:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].yPosition;
100019d8:	00c05404 	movi	r3,336
100019dc:	00840074 	movhi	r2,4097
100019e0:	10929d04 	addi	r2,r2,19060
100019e4:	10807f17 	ldw	r2,508(r2)
100019e8:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].yPosition;
100019ec:	00c05004 	movi	r3,320
100019f0:	00840074 	movhi	r2,4097
100019f4:	10929d04 	addi	r2,r2,19060
100019f8:	10808817 	ldw	r2,544(r2)
100019fc:	18800015 	stw	r2,0(r3)
	// wait for confirmation
	while(*to_sw_sig != 2);
10001a00:	0001883a 	nop
10001a04:	00801404 	movi	r2,80
10001a08:	10800003 	ldbu	r2,0(r2)
10001a0c:	10803fcc 	andi	r2,r2,255
10001a10:	1080201c 	xori	r2,r2,128
10001a14:	10bfe004 	addi	r2,r2,-128
10001a18:	10800098 	cmpnei	r2,r2,2
10001a1c:	103ff91e 	bne	r2,zero,10001a04 <__alt_data_end+0xf8001a04>

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];
	int i;		// load all of our structs in
	for (i=0; i<16; i++)
10001a20:	e03fee15 	stw	zero,-72(fp)
10001a24:	00002206 	br	10001ab0 <FPGAcommunicator+0x37c>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
10001a28:	04040074 	movhi	r16,4097
10001a2c:	84129d04 	addi	r16,r16,19060
10001a30:	e0bfee17 	ldw	r2,-72(fp)
10001a34:	1009883a 	mov	r4,r2
10001a38:	01400904 	movi	r5,36
10001a3c:	0002cfc0 	call	10002cfc <__mulsi3>
10001a40:	8085883a 	add	r2,r16,r2
10001a44:	10c00417 	ldw	r3,16(r2)
10001a48:	d8c00015 	stw	r3,0(sp)
10001a4c:	10c00517 	ldw	r3,20(r2)
10001a50:	d8c00115 	stw	r3,4(sp)
10001a54:	10c00617 	ldw	r3,24(r2)
10001a58:	d8c00215 	stw	r3,8(sp)
10001a5c:	10c00717 	ldw	r3,28(r2)
10001a60:	d8c00315 	stw	r3,12(sp)
10001a64:	10c00817 	ldw	r3,32(r2)
10001a68:	d8c00415 	stw	r3,16(sp)
10001a6c:	11000017 	ldw	r4,0(r2)
10001a70:	11400117 	ldw	r5,4(r2)
10001a74:	11800217 	ldw	r6,8(r2)
10001a78:	11c00317 	ldw	r7,12(r2)
10001a7c:	0001bcc0 	call	10001bcc <messagePackager>
10001a80:	e0bfef15 	stw	r2,-68(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);
		FPGAmessage[i] = tempPackage;
10001a84:	e0bfee17 	ldw	r2,-72(fp)
10001a88:	1085883a 	add	r2,r2,r2
10001a8c:	1085883a 	add	r2,r2,r2
10001a90:	e0ffee04 	addi	r3,fp,-72
10001a94:	1885883a 	add	r2,r3,r2
10001a98:	10800204 	addi	r2,r2,8
10001a9c:	e0ffef17 	ldw	r3,-68(fp)
10001aa0:	10c00015 	stw	r3,0(r2)
	while(*to_sw_sig != 2);

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];
	int i;		// load all of our structs in
	for (i=0; i<16; i++)
10001aa4:	e0bfee17 	ldw	r2,-72(fp)
10001aa8:	10800044 	addi	r2,r2,1
10001aac:	e0bfee15 	stw	r2,-72(fp)
10001ab0:	e0bfee17 	ldw	r2,-72(fp)
10001ab4:	10800410 	cmplti	r2,r2,16
10001ab8:	103fdb1e 	bne	r2,zero,10001a28 <__alt_data_end+0xf8001a28>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
	//	printf("Our %dth message is %llu\n", i, tempPackage);
		FPGAmessage[i] = tempPackage;
	}
	*to_hw_sig = 3;		// our final sending
10001abc:	00801c04 	movi	r2,112
10001ac0:	00c000c4 	movi	r3,3
10001ac4:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001ac8:	00804004 	movi	r2,256
10001acc:	e0fff017 	ldw	r3,-64(fp)
10001ad0:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001ad4:	00803c04 	movi	r2,240
10001ad8:	e0fff117 	ldw	r3,-60(fp)
10001adc:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001ae0:	00803804 	movi	r2,224
10001ae4:	e0fff217 	ldw	r3,-56(fp)
10001ae8:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001aec:	00803404 	movi	r2,208
10001af0:	e0fff317 	ldw	r3,-52(fp)
10001af4:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10001af8:	00803004 	movi	r2,192
10001afc:	e0fff417 	ldw	r3,-48(fp)
10001b00:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001b04:	00802c04 	movi	r2,176
10001b08:	e0fff517 	ldw	r3,-44(fp)
10001b0c:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001b10:	00802804 	movi	r2,160
10001b14:	e0fff617 	ldw	r3,-40(fp)
10001b18:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001b1c:	00801804 	movi	r2,96
10001b20:	e0fff717 	ldw	r3,-36(fp)
10001b24:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10001b28:	00802404 	movi	r2,144
10001b2c:	e0fff817 	ldw	r3,-32(fp)
10001b30:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001b34:	00802004 	movi	r2,128
10001b38:	e0fff917 	ldw	r3,-28(fp)
10001b3c:	10c00015 	stw	r3,0(r2)
	*to_hw_port10 = FPGAmessage[10];
10001b40:	00801004 	movi	r2,64
10001b44:	e0fffa17 	ldw	r3,-24(fp)
10001b48:	10c00015 	stw	r3,0(r2)
	*to_hw_port11 = FPGAmessage[11];
10001b4c:	00800c04 	movi	r2,48
10001b50:	e0fffb17 	ldw	r3,-20(fp)
10001b54:	10c00015 	stw	r3,0(r2)
	*to_hw_port12 = FPGAmessage[12];
10001b58:	00800804 	movi	r2,32
10001b5c:	e0fffc17 	ldw	r3,-16(fp)
10001b60:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = FPGAmessage[13];
10001b64:	00805804 	movi	r2,352
10001b68:	e0fffd17 	ldw	r3,-12(fp)
10001b6c:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = FPGAmessage[14];
10001b70:	00805404 	movi	r2,336
10001b74:	e0fffe17 	ldw	r3,-8(fp)
10001b78:	10c00015 	stw	r3,0(r2)
	*to_hw_port15 = FPGAmessage[15];
10001b7c:	00805004 	movi	r2,320
10001b80:	e0ffff17 	ldw	r3,-4(fp)
10001b84:	10c00015 	stw	r3,0(r2)

	// last confirmation
	while(*to_sw_sig != 3);
10001b88:	0001883a 	nop
10001b8c:	00801404 	movi	r2,80
10001b90:	10800003 	ldbu	r2,0(r2)
10001b94:	10803fcc 	andi	r2,r2,255
10001b98:	1080201c 	xori	r2,r2,128
10001b9c:	10bfe004 	addi	r2,r2,-128
10001ba0:	108000d8 	cmpnei	r2,r2,3
10001ba4:	103ff91e 	bne	r2,zero,10001b8c <__alt_data_end+0xf8001b8c>
	*to_hw_sig = 0;
10001ba8:	00801c04 	movi	r2,112
10001bac:	10000005 	stb	zero,0(r2)

	return;
10001bb0:	0001883a 	nop
}
10001bb4:	e6ffff04 	addi	sp,fp,-4
10001bb8:	dfc00217 	ldw	ra,8(sp)
10001bbc:	df000117 	ldw	fp,4(sp)
10001bc0:	dc000017 	ldw	r16,0(sp)
10001bc4:	dec00304 	addi	sp,sp,12
10001bc8:	f800283a 	ret

10001bcc <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10001bcc:	deffee04 	addi	sp,sp,-72
10001bd0:	dfc00d15 	stw	ra,52(sp)
10001bd4:	df000c15 	stw	fp,48(sp)
10001bd8:	dc800b15 	stw	r18,44(sp)
10001bdc:	dc400a15 	stw	r17,40(sp)
10001be0:	dc000915 	stw	r16,36(sp)
10001be4:	df000c04 	addi	fp,sp,48
10001be8:	e1000215 	stw	r4,8(fp)
10001bec:	e1400315 	stw	r5,12(fp)
10001bf0:	e1800415 	stw	r6,16(fp)
10001bf4:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned int tempDecimal;
	unsigned long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10001bf8:	e0800617 	ldw	r2,24(fp)
10001bfc:	e0bff515 	stw	r2,-44(fp)

	if (packageType == 100)		// impossible number for now
10001c00:	e0bff517 	ldw	r2,-44(fp)
10001c04:	10801918 	cmpnei	r2,r2,100
10001c08:	1000261e 	bne	r2,zero,10001ca4 <messagePackager+0xd8>
	{
		// this means we are packaging our game package instead
		unsigned long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10001c0c:	e0800217 	ldw	r2,8(fp)
10001c10:	e0bff615 	stw	r2,-40(fp)
		tempTime = specifiedObject.yPosition;
10001c14:	e0800317 	ldw	r2,12(fp)
10001c18:	e0bff715 	stw	r2,-36(fp)
		tempStart = specifiedObject.objectType;
10001c1c:	e0800417 	ldw	r2,16(fp)
10001c20:	e0bff815 	stw	r2,-32(fp)
		tempEnd = specifiedObject.objectState;
10001c24:	e0800517 	ldw	r2,20(fp)
10001c28:	e0bff915 	stw	r2,-28(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10001c2c:	e13ff617 	ldw	r4,-40(fp)
10001c30:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001c34:	e0bff615 	stw	r2,-40(fp)
		tempTime = convertDecimalToBinary(tempTime);
10001c38:	e13ff717 	ldw	r4,-36(fp)
10001c3c:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001c40:	e0bff715 	stw	r2,-36(fp)
		tempStart = convertDecimalToBinary(tempStart);
10001c44:	e13ff817 	ldw	r4,-32(fp)
10001c48:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001c4c:	e0bff815 	stw	r2,-32(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10001c50:	e13ff917 	ldw	r4,-28(fp)
10001c54:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001c58:	e0bff915 	stw	r2,-28(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10001c5c:	e13ff717 	ldw	r4,-36(fp)
10001c60:	01402674 	movhi	r5,153
10001c64:	2965a004 	addi	r5,r5,-27008
10001c68:	0002cfc0 	call	10002cfc <__mulsi3>
10001c6c:	1025883a 	mov	r18,r2
10001c70:	e13ff817 	ldw	r4,-32(fp)
10001c74:	01441eb4 	movhi	r5,4218
10001c78:	29500004 	addi	r5,r5,16384
10001c7c:	0002cfc0 	call	10002cfc <__mulsi3>
10001c80:	9087883a 	add	r3,r18,r2
10001c84:	e0bff617 	ldw	r2,-40(fp)
10001c88:	18a5883a 	add	r18,r3,r2
10001c8c:	e13ff917 	ldw	r4,-28(fp)
10001c90:	015762b4 	movhi	r5,23946
10001c94:	0002cfc0 	call	10002cfc <__mulsi3>
10001c98:	9085883a 	add	r2,r18,r2
10001c9c:	e0bff415 	stw	r2,-48(fp)
10001ca0:	00001106 	br	10001ce8 <messagePackager+0x11c>
		unsigned long tempType, tempState;

		// grab our stuff from the struct
//		tempType = specifiedObject.objectType;
//		tempState = specifiedObject.objectState;
		tempType = 4;
10001ca4:	00800104 	movi	r2,4
10001ca8:	e0bffa15 	stw	r2,-24(fp)
		tempState = 7;
10001cac:	008001c4 	movi	r2,7
10001cb0:	e0bffb15 	stw	r2,-20(fp)

		// and convert stuff to binary!
		tempType = convertDecimalToBinary(tempType);
10001cb4:	e13ffa17 	ldw	r4,-24(fp)
10001cb8:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001cbc:	e0bffa15 	stw	r2,-24(fp)
		tempState = convertDecimalToBinary(tempState);
10001cc0:	e13ffb17 	ldw	r4,-20(fp)
10001cc4:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001cc8:	e0bffb15 	stw	r2,-20(fp)
		printf("tempY: %llu   ", tempY);
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/
		// now we append everything together!
		tempBinary = tempState + tempType*1000;
10001ccc:	e13ffa17 	ldw	r4,-24(fp)
10001cd0:	0140fa04 	movi	r5,1000
10001cd4:	0002cfc0 	call	10002cfc <__mulsi3>
10001cd8:	1007883a 	mov	r3,r2
10001cdc:	e0bffb17 	ldw	r2,-20(fp)
10001ce0:	1885883a 	add	r2,r3,r2
10001ce4:	e0bff415 	stw	r2,-48(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001ce8:	e0bff417 	ldw	r2,-48(fp)
10001cec:	1021883a 	mov	r16,r2
10001cf0:	0023883a 	mov	r17,zero
10001cf4:	8009883a 	mov	r4,r16
10001cf8:	880b883a 	mov	r5,r17
10001cfc:	0001e8c0 	call	10001e8c <convertBinaryToDecimal>
10001d00:	e0bffc15 	stw	r2,-16(fp)

	// and return it!
	return tempDecimal;
10001d04:	e0bffc17 	ldw	r2,-16(fp)
}
10001d08:	e6fffd04 	addi	sp,fp,-12
10001d0c:	dfc00417 	ldw	ra,16(sp)
10001d10:	df000317 	ldw	fp,12(sp)
10001d14:	dc800217 	ldw	r18,8(sp)
10001d18:	dc400117 	ldw	r17,4(sp)
10001d1c:	dc000017 	ldw	r16,0(sp)
10001d20:	dec00904 	addi	sp,sp,36
10001d24:	f800283a 	ret

10001d28 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001d28:	defff704 	addi	sp,sp,-36
10001d2c:	dfc00815 	stw	ra,32(sp)
10001d30:	df000715 	stw	fp,28(sp)
10001d34:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001d38:	00804404 	movi	r2,272
10001d3c:	10800003 	ldbu	r2,0(r2)
10001d40:	10803fcc 	andi	r2,r2,255
10001d44:	1080201c 	xori	r2,r2,128
10001d48:	10bfe004 	addi	r2,r2,-128
10001d4c:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001d50:	e13ff917 	ldw	r4,-28(fp)
10001d54:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001d58:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001d5c:	e03ffa15 	stw	zero,-24(fp)
10001d60:	00001406 	br	10001db4 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001d64:	e0bff917 	ldw	r2,-28(fp)
10001d68:	1009883a 	mov	r4,r2
10001d6c:	01400284 	movi	r5,10
10001d70:	0002cf40 	call	10002cf4 <__umodsi3>
10001d74:	1007883a 	mov	r3,r2
10001d78:	e0bffa17 	ldw	r2,-24(fp)
10001d7c:	1085883a 	add	r2,r2,r2
10001d80:	1085883a 	add	r2,r2,r2
10001d84:	e13ff904 	addi	r4,fp,-28
10001d88:	2085883a 	add	r2,r4,r2
10001d8c:	10800204 	addi	r2,r2,8
10001d90:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001d94:	e0bff917 	ldw	r2,-28(fp)
10001d98:	1009883a 	mov	r4,r2
10001d9c:	01400284 	movi	r5,10
10001da0:	0002cec0 	call	10002cec <__udivsi3>
10001da4:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001da8:	e0bffa17 	ldw	r2,-24(fp)
10001dac:	10800044 	addi	r2,r2,1
10001db0:	e0bffa15 	stw	r2,-24(fp)
10001db4:	e0bffa17 	ldw	r2,-24(fp)
10001db8:	10800150 	cmplti	r2,r2,5
10001dbc:	103fe91e 	bne	r2,zero,10001d64 <__alt_data_end+0xf8001d64>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001dc0:	e0bffd17 	ldw	r2,-12(fp)
10001dc4:	d0a6d415 	stw	r2,-25776(gp)
	key2 = unpackaged[3];
10001dc8:	e0bffe17 	ldw	r2,-8(fp)
10001dcc:	d0a6d715 	stw	r2,-25764(gp)
	key3 = unpackaged[4];
10001dd0:	e0bfff17 	ldw	r2,-4(fp)
10001dd4:	d0a6d515 	stw	r2,-25772(gp)
	cursorStreak = unpackaged[0];
10001dd8:	e0bffb17 	ldw	r2,-20(fp)
10001ddc:	d0a6d115 	stw	r2,-25788(gp)
	cursorClicked = unpackaged[1];
10001de0:	e0bffc17 	ldw	r2,-16(fp)
10001de4:	d0a6d015 	stw	r2,-25792(gp)
	xCursor = *to_sw_port3;
10001de8:	00806004 	movi	r2,384
10001dec:	10800017 	ldw	r2,0(r2)
10001df0:	d0a6cf15 	stw	r2,-25796(gp)
	yCursor = *to_sw_port4;
10001df4:	00805c04 	movi	r2,368
10001df8:	10800017 	ldw	r2,0(r2)
10001dfc:	d0a6ce15 	stw	r2,-25800(gp)

	if(cursorStreak == 0)	// reset combo if cursor no longer streaking
10001e00:	d0a6d117 	ldw	r2,-25788(gp)
10001e04:	1000011e 	bne	r2,zero,10001e0c <port2Unpackager+0xe4>
	{
		comboFruit = 0;
10001e08:	d026d915 	stw	zero,-25756(gp)
	}
	return;
10001e0c:	0001883a 	nop
}
10001e10:	e037883a 	mov	sp,fp
10001e14:	dfc00117 	ldw	ra,4(sp)
10001e18:	df000017 	ldw	fp,0(sp)
10001e1c:	dec00204 	addi	sp,sp,8
10001e20:	f800283a 	ret

10001e24 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001e24:	defffc04 	addi	sp,sp,-16
10001e28:	dfc00315 	stw	ra,12(sp)
10001e2c:	df000215 	stw	fp,8(sp)
10001e30:	dc000115 	stw	r16,4(sp)
10001e34:	df000204 	addi	fp,sp,8
10001e38:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
10001e3c:	e0bffe17 	ldw	r2,-8(fp)
10001e40:	1000021e 	bne	r2,zero,10001e4c <convertDecimalToBinary+0x28>
    {
        return 0;
10001e44:	0005883a 	mov	r2,zero
10001e48:	00000a06 	br	10001e74 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001e4c:	e0bffe17 	ldw	r2,-8(fp)
10001e50:	1400004c 	andi	r16,r2,1
10001e54:	e0bffe17 	ldw	r2,-8(fp)
10001e58:	1004d07a 	srli	r2,r2,1
10001e5c:	1009883a 	mov	r4,r2
10001e60:	0001e240 	call	10001e24 <convertDecimalToBinary>
10001e64:	1009883a 	mov	r4,r2
10001e68:	01400284 	movi	r5,10
10001e6c:	0002cfc0 	call	10002cfc <__mulsi3>
10001e70:	8085883a 	add	r2,r16,r2
    }
}
10001e74:	e6ffff04 	addi	sp,fp,-4
10001e78:	dfc00217 	ldw	ra,8(sp)
10001e7c:	df000117 	ldw	fp,4(sp)
10001e80:	dc000017 	ldw	r16,0(sp)
10001e84:	dec00304 	addi	sp,sp,12
10001e88:	f800283a 	ret

10001e8c <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001e8c:	defffa04 	addi	sp,sp,-24
10001e90:	dfc00515 	stw	ra,20(sp)
10001e94:	df000415 	stw	fp,16(sp)
10001e98:	df000404 	addi	fp,sp,16
10001e9c:	e13ffe15 	stw	r4,-8(fp)
10001ea0:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001ea4:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001ea8:	e03ffd15 	stw	zero,-12(fp)
10001eac:	00002706 	br	10001f4c <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
10001eb0:	e0bffe17 	ldw	r2,-8(fp)
10001eb4:	e0ffff17 	ldw	r3,-4(fp)
10001eb8:	01c00284 	movi	r7,10
10001ebc:	0011883a 	mov	r8,zero
10001ec0:	1009883a 	mov	r4,r2
10001ec4:	180b883a 	mov	r5,r3
10001ec8:	380d883a 	mov	r6,r7
10001ecc:	400f883a 	mov	r7,r8
10001ed0:	00025b40 	call	100025b4 <__umoddi3>
10001ed4:	1009883a 	mov	r4,r2
10001ed8:	180b883a 	mov	r5,r3
10001edc:	2005883a 	mov	r2,r4
10001ee0:	2807883a 	mov	r3,r5
10001ee4:	11000058 	cmpnei	r4,r2,1
10001ee8:	2000081e 	bne	r4,zero,10001f0c <convertBinaryToDecimal+0x80>
10001eec:	1800071e 	bne	r3,zero,10001f0c <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001ef0:	00c00044 	movi	r3,1
10001ef4:	e0bffd17 	ldw	r2,-12(fp)
10001ef8:	1884983a 	sll	r2,r3,r2
10001efc:	1007883a 	mov	r3,r2
10001f00:	e0bffc17 	ldw	r2,-16(fp)
10001f04:	10c5883a 	add	r2,r2,r3
10001f08:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001f0c:	e0bffe17 	ldw	r2,-8(fp)
10001f10:	e0ffff17 	ldw	r3,-4(fp)
10001f14:	01c00284 	movi	r7,10
10001f18:	0011883a 	mov	r8,zero
10001f1c:	1009883a 	mov	r4,r2
10001f20:	180b883a 	mov	r5,r3
10001f24:	380d883a 	mov	r6,r7
10001f28:	400f883a 	mov	r7,r8
10001f2c:	0001f740 	call	10001f74 <__udivdi3>
10001f30:	1009883a 	mov	r4,r2
10001f34:	180b883a 	mov	r5,r3
10001f38:	e13ffe15 	stw	r4,-8(fp)
10001f3c:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001f40:	e0bffd17 	ldw	r2,-12(fp)
10001f44:	10800044 	addi	r2,r2,1
10001f48:	e0bffd15 	stw	r2,-12(fp)
10001f4c:	e0bffe17 	ldw	r2,-8(fp)
10001f50:	e0ffff17 	ldw	r3,-4(fp)
10001f54:	10c4b03a 	or	r2,r2,r3
10001f58:	103fd51e 	bne	r2,zero,10001eb0 <__alt_data_end+0xf8001eb0>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
10001f5c:	e0bffc17 	ldw	r2,-16(fp)
}
10001f60:	e037883a 	mov	sp,fp
10001f64:	dfc00117 	ldw	ra,4(sp)
10001f68:	df000017 	ldw	fp,0(sp)
10001f6c:	dec00204 	addi	sp,sp,8
10001f70:	f800283a 	ret

10001f74 <__udivdi3>:
10001f74:	defff504 	addi	sp,sp,-44
10001f78:	dcc00415 	stw	r19,16(sp)
10001f7c:	dc000115 	stw	r16,4(sp)
10001f80:	dfc00a15 	stw	ra,40(sp)
10001f84:	df000915 	stw	fp,36(sp)
10001f88:	ddc00815 	stw	r23,32(sp)
10001f8c:	dd800715 	stw	r22,28(sp)
10001f90:	dd400615 	stw	r21,24(sp)
10001f94:	dd000515 	stw	r20,20(sp)
10001f98:	dc800315 	stw	r18,12(sp)
10001f9c:	dc400215 	stw	r17,8(sp)
10001fa0:	2027883a 	mov	r19,r4
10001fa4:	2821883a 	mov	r16,r5
10001fa8:	3800471e 	bne	r7,zero,100020c8 <__udivdi3+0x154>
10001fac:	3025883a 	mov	r18,r6
10001fb0:	2023883a 	mov	r17,r4
10001fb4:	2980592e 	bgeu	r5,r6,1000211c <__udivdi3+0x1a8>
10001fb8:	00bfffd4 	movui	r2,65535
10001fbc:	2829883a 	mov	r20,r5
10001fc0:	1180b236 	bltu	r2,r6,1000228c <__udivdi3+0x318>
10001fc4:	00803fc4 	movi	r2,255
10001fc8:	1181622e 	bgeu	r2,r6,10002554 <__udivdi3+0x5e0>
10001fcc:	00800204 	movi	r2,8
10001fd0:	1007883a 	mov	r3,r2
10001fd4:	3084d83a 	srl	r2,r6,r2
10001fd8:	01040074 	movhi	r4,4097
10001fdc:	21044104 	addi	r4,r4,4356
10001fe0:	2085883a 	add	r2,r4,r2
10001fe4:	11000003 	ldbu	r4,0(r2)
10001fe8:	20c9883a 	add	r4,r4,r3
10001fec:	00c00804 	movi	r3,32
10001ff0:	1907c83a 	sub	r3,r3,r4
10001ff4:	18000526 	beq	r3,zero,1000200c <__udivdi3+0x98>
10001ff8:	80e0983a 	sll	r16,r16,r3
10001ffc:	9908d83a 	srl	r4,r19,r4
10002000:	30e4983a 	sll	r18,r6,r3
10002004:	98e2983a 	sll	r17,r19,r3
10002008:	8128b03a 	or	r20,r16,r4
1000200c:	902ad43a 	srli	r21,r18,16
10002010:	a009883a 	mov	r4,r20
10002014:	95bfffcc 	andi	r22,r18,65535
10002018:	a80b883a 	mov	r5,r21
1000201c:	0002cf40 	call	10002cf4 <__umodsi3>
10002020:	a009883a 	mov	r4,r20
10002024:	a80b883a 	mov	r5,r21
10002028:	102f883a 	mov	r23,r2
1000202c:	0002cec0 	call	10002cec <__udivsi3>
10002030:	1009883a 	mov	r4,r2
10002034:	b00b883a 	mov	r5,r22
10002038:	1021883a 	mov	r16,r2
1000203c:	0002cfc0 	call	10002cfc <__mulsi3>
10002040:	b82e943a 	slli	r23,r23,16
10002044:	8808d43a 	srli	r4,r17,16
10002048:	b906b03a 	or	r3,r23,r4
1000204c:	1880052e 	bgeu	r3,r2,10002064 <__udivdi3+0xf0>
10002050:	1c87883a 	add	r3,r3,r18
10002054:	813fffc4 	addi	r4,r16,-1
10002058:	1c800136 	bltu	r3,r18,10002060 <__udivdi3+0xec>
1000205c:	18815236 	bltu	r3,r2,100025a8 <__udivdi3+0x634>
10002060:	2021883a 	mov	r16,r4
10002064:	18a7c83a 	sub	r19,r3,r2
10002068:	9809883a 	mov	r4,r19
1000206c:	a80b883a 	mov	r5,r21
10002070:	0002cf40 	call	10002cf4 <__umodsi3>
10002074:	1029883a 	mov	r20,r2
10002078:	9809883a 	mov	r4,r19
1000207c:	a80b883a 	mov	r5,r21
10002080:	a028943a 	slli	r20,r20,16
10002084:	0002cec0 	call	10002cec <__udivsi3>
10002088:	1009883a 	mov	r4,r2
1000208c:	b00b883a 	mov	r5,r22
10002090:	8c7fffcc 	andi	r17,r17,65535
10002094:	1027883a 	mov	r19,r2
10002098:	a462b03a 	or	r17,r20,r17
1000209c:	0002cfc0 	call	10002cfc <__mulsi3>
100020a0:	8880052e 	bgeu	r17,r2,100020b8 <__udivdi3+0x144>
100020a4:	8ca3883a 	add	r17,r17,r18
100020a8:	98ffffc4 	addi	r3,r19,-1
100020ac:	8c811036 	bltu	r17,r18,100024f0 <__udivdi3+0x57c>
100020b0:	88810f2e 	bgeu	r17,r2,100024f0 <__udivdi3+0x57c>
100020b4:	9cffff84 	addi	r19,r19,-2
100020b8:	8020943a 	slli	r16,r16,16
100020bc:	0007883a 	mov	r3,zero
100020c0:	9c04b03a 	or	r2,r19,r16
100020c4:	00006006 	br	10002248 <__udivdi3+0x2d4>
100020c8:	29c05d36 	bltu	r5,r7,10002240 <__udivdi3+0x2cc>
100020cc:	00bfffd4 	movui	r2,65535
100020d0:	11c0692e 	bgeu	r2,r7,10002278 <__udivdi3+0x304>
100020d4:	00804034 	movhi	r2,256
100020d8:	10bfffc4 	addi	r2,r2,-1
100020dc:	11c10e2e 	bgeu	r2,r7,10002518 <__udivdi3+0x5a4>
100020e0:	01400604 	movi	r5,24
100020e4:	2811883a 	mov	r8,r5
100020e8:	394ad83a 	srl	r5,r7,r5
100020ec:	00840074 	movhi	r2,4097
100020f0:	10844104 	addi	r2,r2,4356
100020f4:	114b883a 	add	r5,r2,r5
100020f8:	29400003 	ldbu	r5,0(r5)
100020fc:	00c00804 	movi	r3,32
10002100:	2a0b883a 	add	r5,r5,r8
10002104:	196fc83a 	sub	r23,r3,r5
10002108:	b8006b1e 	bne	r23,zero,100022b8 <__udivdi3+0x344>
1000210c:	3c011436 	bltu	r7,r16,10002560 <__udivdi3+0x5ec>
10002110:	9985403a 	cmpgeu	r2,r19,r6
10002114:	0007883a 	mov	r3,zero
10002118:	00004b06 	br	10002248 <__udivdi3+0x2d4>
1000211c:	3000041e 	bne	r6,zero,10002130 <__udivdi3+0x1bc>
10002120:	01000044 	movi	r4,1
10002124:	000b883a 	mov	r5,zero
10002128:	0002cec0 	call	10002cec <__udivsi3>
1000212c:	1025883a 	mov	r18,r2
10002130:	00bfffd4 	movui	r2,65535
10002134:	14805b2e 	bgeu	r2,r18,100022a4 <__udivdi3+0x330>
10002138:	00804034 	movhi	r2,256
1000213c:	10bfffc4 	addi	r2,r2,-1
10002140:	1480fe2e 	bgeu	r2,r18,1000253c <__udivdi3+0x5c8>
10002144:	00800604 	movi	r2,24
10002148:	1007883a 	mov	r3,r2
1000214c:	9084d83a 	srl	r2,r18,r2
10002150:	01040074 	movhi	r4,4097
10002154:	21044104 	addi	r4,r4,4356
10002158:	2085883a 	add	r2,r4,r2
1000215c:	11800003 	ldbu	r6,0(r2)
10002160:	01c00804 	movi	r7,32
10002164:	30c7883a 	add	r3,r6,r3
10002168:	38cfc83a 	sub	r7,r7,r3
1000216c:	3800a71e 	bne	r7,zero,1000240c <__udivdi3+0x498>
10002170:	9028d43a 	srli	r20,r18,16
10002174:	84a1c83a 	sub	r16,r16,r18
10002178:	957fffcc 	andi	r21,r18,65535
1000217c:	00c00044 	movi	r3,1
10002180:	8009883a 	mov	r4,r16
10002184:	a00b883a 	mov	r5,r20
10002188:	d8c00015 	stw	r3,0(sp)
1000218c:	0002cf40 	call	10002cf4 <__umodsi3>
10002190:	8009883a 	mov	r4,r16
10002194:	a00b883a 	mov	r5,r20
10002198:	102d883a 	mov	r22,r2
1000219c:	0002cec0 	call	10002cec <__udivsi3>
100021a0:	1009883a 	mov	r4,r2
100021a4:	a80b883a 	mov	r5,r21
100021a8:	1021883a 	mov	r16,r2
100021ac:	0002cfc0 	call	10002cfc <__mulsi3>
100021b0:	b02c943a 	slli	r22,r22,16
100021b4:	880ed43a 	srli	r7,r17,16
100021b8:	d8c00017 	ldw	r3,0(sp)
100021bc:	b1ccb03a 	or	r6,r22,r7
100021c0:	3080052e 	bgeu	r6,r2,100021d8 <__udivdi3+0x264>
100021c4:	348d883a 	add	r6,r6,r18
100021c8:	813fffc4 	addi	r4,r16,-1
100021cc:	34800136 	bltu	r6,r18,100021d4 <__udivdi3+0x260>
100021d0:	3080f236 	bltu	r6,r2,1000259c <__udivdi3+0x628>
100021d4:	2021883a 	mov	r16,r4
100021d8:	30a7c83a 	sub	r19,r6,r2
100021dc:	9809883a 	mov	r4,r19
100021e0:	a00b883a 	mov	r5,r20
100021e4:	d8c00015 	stw	r3,0(sp)
100021e8:	0002cf40 	call	10002cf4 <__umodsi3>
100021ec:	102d883a 	mov	r22,r2
100021f0:	9809883a 	mov	r4,r19
100021f4:	a00b883a 	mov	r5,r20
100021f8:	b02c943a 	slli	r22,r22,16
100021fc:	0002cec0 	call	10002cec <__udivsi3>
10002200:	1009883a 	mov	r4,r2
10002204:	a80b883a 	mov	r5,r21
10002208:	8c7fffcc 	andi	r17,r17,65535
1000220c:	1027883a 	mov	r19,r2
10002210:	b462b03a 	or	r17,r22,r17
10002214:	0002cfc0 	call	10002cfc <__mulsi3>
10002218:	d8c00017 	ldw	r3,0(sp)
1000221c:	8880052e 	bgeu	r17,r2,10002234 <__udivdi3+0x2c0>
10002220:	8ca3883a 	add	r17,r17,r18
10002224:	993fffc4 	addi	r4,r19,-1
10002228:	8c80af36 	bltu	r17,r18,100024e8 <__udivdi3+0x574>
1000222c:	8880ae2e 	bgeu	r17,r2,100024e8 <__udivdi3+0x574>
10002230:	9cffff84 	addi	r19,r19,-2
10002234:	8020943a 	slli	r16,r16,16
10002238:	9c04b03a 	or	r2,r19,r16
1000223c:	00000206 	br	10002248 <__udivdi3+0x2d4>
10002240:	0007883a 	mov	r3,zero
10002244:	0005883a 	mov	r2,zero
10002248:	dfc00a17 	ldw	ra,40(sp)
1000224c:	df000917 	ldw	fp,36(sp)
10002250:	ddc00817 	ldw	r23,32(sp)
10002254:	dd800717 	ldw	r22,28(sp)
10002258:	dd400617 	ldw	r21,24(sp)
1000225c:	dd000517 	ldw	r20,20(sp)
10002260:	dcc00417 	ldw	r19,16(sp)
10002264:	dc800317 	ldw	r18,12(sp)
10002268:	dc400217 	ldw	r17,8(sp)
1000226c:	dc000117 	ldw	r16,4(sp)
10002270:	dec00b04 	addi	sp,sp,44
10002274:	f800283a 	ret
10002278:	00803fc4 	movi	r2,255
1000227c:	11c0a92e 	bgeu	r2,r7,10002524 <__udivdi3+0x5b0>
10002280:	01400204 	movi	r5,8
10002284:	2811883a 	mov	r8,r5
10002288:	003f9706 	br	100020e8 <__alt_data_end+0xf80020e8>
1000228c:	00804034 	movhi	r2,256
10002290:	10bfffc4 	addi	r2,r2,-1
10002294:	1180a62e 	bgeu	r2,r6,10002530 <__udivdi3+0x5bc>
10002298:	00800604 	movi	r2,24
1000229c:	1007883a 	mov	r3,r2
100022a0:	003f4c06 	br	10001fd4 <__alt_data_end+0xf8001fd4>
100022a4:	00803fc4 	movi	r2,255
100022a8:	1480a72e 	bgeu	r2,r18,10002548 <__udivdi3+0x5d4>
100022ac:	00800204 	movi	r2,8
100022b0:	1007883a 	mov	r3,r2
100022b4:	003fa506 	br	1000214c <__alt_data_end+0xf800214c>
100022b8:	3178d83a 	srl	fp,r6,r5
100022bc:	3dce983a 	sll	r7,r7,r23
100022c0:	8168d83a 	srl	r20,r16,r5
100022c4:	9950d83a 	srl	r8,r19,r5
100022c8:	3f38b03a 	or	fp,r7,fp
100022cc:	e024d43a 	srli	r18,fp,16
100022d0:	85e0983a 	sll	r16,r16,r23
100022d4:	a009883a 	mov	r4,r20
100022d8:	900b883a 	mov	r5,r18
100022dc:	8220b03a 	or	r16,r16,r8
100022e0:	35ea983a 	sll	r21,r6,r23
100022e4:	0002cf40 	call	10002cf4 <__umodsi3>
100022e8:	a009883a 	mov	r4,r20
100022ec:	900b883a 	mov	r5,r18
100022f0:	1023883a 	mov	r17,r2
100022f4:	e5bfffcc 	andi	r22,fp,65535
100022f8:	0002cec0 	call	10002cec <__udivsi3>
100022fc:	1009883a 	mov	r4,r2
10002300:	b00b883a 	mov	r5,r22
10002304:	1029883a 	mov	r20,r2
10002308:	0002cfc0 	call	10002cfc <__mulsi3>
1000230c:	8806943a 	slli	r3,r17,16
10002310:	8014d43a 	srli	r10,r16,16
10002314:	1a92b03a 	or	r9,r3,r10
10002318:	4880042e 	bgeu	r9,r2,1000232c <__udivdi3+0x3b8>
1000231c:	4f13883a 	add	r9,r9,fp
10002320:	a0ffffc4 	addi	r3,r20,-1
10002324:	4f00952e 	bgeu	r9,fp,1000257c <__udivdi3+0x608>
10002328:	1829883a 	mov	r20,r3
1000232c:	48a3c83a 	sub	r17,r9,r2
10002330:	8809883a 	mov	r4,r17
10002334:	900b883a 	mov	r5,r18
10002338:	0002cf40 	call	10002cf4 <__umodsi3>
1000233c:	8809883a 	mov	r4,r17
10002340:	900b883a 	mov	r5,r18
10002344:	d8800015 	stw	r2,0(sp)
10002348:	0002cec0 	call	10002cec <__udivsi3>
1000234c:	1009883a 	mov	r4,r2
10002350:	b00b883a 	mov	r5,r22
10002354:	1023883a 	mov	r17,r2
10002358:	0002cfc0 	call	10002cfc <__mulsi3>
1000235c:	d8c00017 	ldw	r3,0(sp)
10002360:	823fffcc 	andi	r8,r16,65535
10002364:	1806943a 	slli	r3,r3,16
10002368:	1a20b03a 	or	r16,r3,r8
1000236c:	8080042e 	bgeu	r16,r2,10002380 <__udivdi3+0x40c>
10002370:	8721883a 	add	r16,r16,fp
10002374:	88ffffc4 	addi	r3,r17,-1
10002378:	87007c2e 	bgeu	r16,fp,1000256c <__udivdi3+0x5f8>
1000237c:	1823883a 	mov	r17,r3
10002380:	a028943a 	slli	r20,r20,16
10002384:	acbfffcc 	andi	r18,r21,65535
10002388:	900b883a 	mov	r5,r18
1000238c:	8d28b03a 	or	r20,r17,r20
10002390:	a022d43a 	srli	r17,r20,16
10002394:	a5bfffcc 	andi	r22,r20,65535
10002398:	b009883a 	mov	r4,r22
1000239c:	a82ad43a 	srli	r21,r21,16
100023a0:	80a1c83a 	sub	r16,r16,r2
100023a4:	0002cfc0 	call	10002cfc <__mulsi3>
100023a8:	8809883a 	mov	r4,r17
100023ac:	900b883a 	mov	r5,r18
100023b0:	1039883a 	mov	fp,r2
100023b4:	0002cfc0 	call	10002cfc <__mulsi3>
100023b8:	8809883a 	mov	r4,r17
100023bc:	a80b883a 	mov	r5,r21
100023c0:	1025883a 	mov	r18,r2
100023c4:	0002cfc0 	call	10002cfc <__mulsi3>
100023c8:	b009883a 	mov	r4,r22
100023cc:	a80b883a 	mov	r5,r21
100023d0:	1023883a 	mov	r17,r2
100023d4:	0002cfc0 	call	10002cfc <__mulsi3>
100023d8:	e006d43a 	srli	r3,fp,16
100023dc:	9085883a 	add	r2,r18,r2
100023e0:	10c7883a 	add	r3,r2,r3
100023e4:	1c80022e 	bgeu	r3,r18,100023f0 <__udivdi3+0x47c>
100023e8:	00800074 	movhi	r2,1
100023ec:	88a3883a 	add	r17,r17,r2
100023f0:	1808d43a 	srli	r4,r3,16
100023f4:	8909883a 	add	r4,r17,r4
100023f8:	81004436 	bltu	r16,r4,1000250c <__udivdi3+0x598>
100023fc:	81003e26 	beq	r16,r4,100024f8 <__udivdi3+0x584>
10002400:	a005883a 	mov	r2,r20
10002404:	0007883a 	mov	r3,zero
10002408:	003f8f06 	br	10002248 <__alt_data_end+0xf8002248>
1000240c:	91e4983a 	sll	r18,r18,r7
10002410:	80eed83a 	srl	r23,r16,r3
10002414:	81cc983a 	sll	r6,r16,r7
10002418:	9028d43a 	srli	r20,r18,16
1000241c:	98c6d83a 	srl	r3,r19,r3
10002420:	b809883a 	mov	r4,r23
10002424:	a00b883a 	mov	r5,r20
10002428:	30ecb03a 	or	r22,r6,r3
1000242c:	99e2983a 	sll	r17,r19,r7
10002430:	0002cf40 	call	10002cf4 <__umodsi3>
10002434:	b809883a 	mov	r4,r23
10002438:	a00b883a 	mov	r5,r20
1000243c:	1021883a 	mov	r16,r2
10002440:	957fffcc 	andi	r21,r18,65535
10002444:	0002cec0 	call	10002cec <__udivsi3>
10002448:	a80b883a 	mov	r5,r21
1000244c:	1009883a 	mov	r4,r2
10002450:	102f883a 	mov	r23,r2
10002454:	0002cfc0 	call	10002cfc <__mulsi3>
10002458:	8020943a 	slli	r16,r16,16
1000245c:	b00ad43a 	srli	r5,r22,16
10002460:	814cb03a 	or	r6,r16,r5
10002464:	3080062e 	bgeu	r6,r2,10002480 <__udivdi3+0x50c>
10002468:	348d883a 	add	r6,r6,r18
1000246c:	b8ffffc4 	addi	r3,r23,-1
10002470:	34804836 	bltu	r6,r18,10002594 <__udivdi3+0x620>
10002474:	3080472e 	bgeu	r6,r2,10002594 <__udivdi3+0x620>
10002478:	bdffff84 	addi	r23,r23,-2
1000247c:	348d883a 	add	r6,r6,r18
10002480:	30a7c83a 	sub	r19,r6,r2
10002484:	9809883a 	mov	r4,r19
10002488:	a00b883a 	mov	r5,r20
1000248c:	0002cf40 	call	10002cf4 <__umodsi3>
10002490:	9809883a 	mov	r4,r19
10002494:	a00b883a 	mov	r5,r20
10002498:	1039883a 	mov	fp,r2
1000249c:	0002cec0 	call	10002cec <__udivsi3>
100024a0:	1009883a 	mov	r4,r2
100024a4:	a80b883a 	mov	r5,r21
100024a8:	e038943a 	slli	fp,fp,16
100024ac:	1027883a 	mov	r19,r2
100024b0:	0002cfc0 	call	10002cfc <__mulsi3>
100024b4:	b1bfffcc 	andi	r6,r22,65535
100024b8:	e18cb03a 	or	r6,fp,r6
100024bc:	3080062e 	bgeu	r6,r2,100024d8 <__udivdi3+0x564>
100024c0:	348d883a 	add	r6,r6,r18
100024c4:	98ffffc4 	addi	r3,r19,-1
100024c8:	34803036 	bltu	r6,r18,1000258c <__udivdi3+0x618>
100024cc:	30802f2e 	bgeu	r6,r2,1000258c <__udivdi3+0x618>
100024d0:	9cffff84 	addi	r19,r19,-2
100024d4:	348d883a 	add	r6,r6,r18
100024d8:	b82e943a 	slli	r23,r23,16
100024dc:	30a1c83a 	sub	r16,r6,r2
100024e0:	9dc6b03a 	or	r3,r19,r23
100024e4:	003f2606 	br	10002180 <__alt_data_end+0xf8002180>
100024e8:	2027883a 	mov	r19,r4
100024ec:	003f5106 	br	10002234 <__alt_data_end+0xf8002234>
100024f0:	1827883a 	mov	r19,r3
100024f4:	003ef006 	br	100020b8 <__alt_data_end+0xf80020b8>
100024f8:	1808943a 	slli	r4,r3,16
100024fc:	9dc6983a 	sll	r3,r19,r23
10002500:	e73fffcc 	andi	fp,fp,65535
10002504:	2709883a 	add	r4,r4,fp
10002508:	193fbd2e 	bgeu	r3,r4,10002400 <__alt_data_end+0xf8002400>
1000250c:	a0bfffc4 	addi	r2,r20,-1
10002510:	0007883a 	mov	r3,zero
10002514:	003f4c06 	br	10002248 <__alt_data_end+0xf8002248>
10002518:	01400404 	movi	r5,16
1000251c:	2811883a 	mov	r8,r5
10002520:	003ef106 	br	100020e8 <__alt_data_end+0xf80020e8>
10002524:	000b883a 	mov	r5,zero
10002528:	0011883a 	mov	r8,zero
1000252c:	003eee06 	br	100020e8 <__alt_data_end+0xf80020e8>
10002530:	00800404 	movi	r2,16
10002534:	1007883a 	mov	r3,r2
10002538:	003ea606 	br	10001fd4 <__alt_data_end+0xf8001fd4>
1000253c:	00800404 	movi	r2,16
10002540:	1007883a 	mov	r3,r2
10002544:	003f0106 	br	1000214c <__alt_data_end+0xf800214c>
10002548:	0005883a 	mov	r2,zero
1000254c:	0007883a 	mov	r3,zero
10002550:	003efe06 	br	1000214c <__alt_data_end+0xf800214c>
10002554:	0005883a 	mov	r2,zero
10002558:	0007883a 	mov	r3,zero
1000255c:	003e9d06 	br	10001fd4 <__alt_data_end+0xf8001fd4>
10002560:	0007883a 	mov	r3,zero
10002564:	00800044 	movi	r2,1
10002568:	003f3706 	br	10002248 <__alt_data_end+0xf8002248>
1000256c:	80bf832e 	bgeu	r16,r2,1000237c <__alt_data_end+0xf800237c>
10002570:	8c7fff84 	addi	r17,r17,-2
10002574:	8721883a 	add	r16,r16,fp
10002578:	003f8106 	br	10002380 <__alt_data_end+0xf8002380>
1000257c:	48bf6a2e 	bgeu	r9,r2,10002328 <__alt_data_end+0xf8002328>
10002580:	a53fff84 	addi	r20,r20,-2
10002584:	4f13883a 	add	r9,r9,fp
10002588:	003f6806 	br	1000232c <__alt_data_end+0xf800232c>
1000258c:	1827883a 	mov	r19,r3
10002590:	003fd106 	br	100024d8 <__alt_data_end+0xf80024d8>
10002594:	182f883a 	mov	r23,r3
10002598:	003fb906 	br	10002480 <__alt_data_end+0xf8002480>
1000259c:	843fff84 	addi	r16,r16,-2
100025a0:	348d883a 	add	r6,r6,r18
100025a4:	003f0c06 	br	100021d8 <__alt_data_end+0xf80021d8>
100025a8:	843fff84 	addi	r16,r16,-2
100025ac:	1c87883a 	add	r3,r3,r18
100025b0:	003eac06 	br	10002064 <__alt_data_end+0xf8002064>

100025b4 <__umoddi3>:
100025b4:	defff404 	addi	sp,sp,-48
100025b8:	dd800815 	stw	r22,32(sp)
100025bc:	dc400315 	stw	r17,12(sp)
100025c0:	dc000215 	stw	r16,8(sp)
100025c4:	dfc00b15 	stw	ra,44(sp)
100025c8:	df000a15 	stw	fp,40(sp)
100025cc:	ddc00915 	stw	r23,36(sp)
100025d0:	dd400715 	stw	r21,28(sp)
100025d4:	dd000615 	stw	r20,24(sp)
100025d8:	dcc00515 	stw	r19,20(sp)
100025dc:	dc800415 	stw	r18,16(sp)
100025e0:	2021883a 	mov	r16,r4
100025e4:	2823883a 	mov	r17,r5
100025e8:	282d883a 	mov	r22,r5
100025ec:	38003c1e 	bne	r7,zero,100026e0 <__umoddi3+0x12c>
100025f0:	3027883a 	mov	r19,r6
100025f4:	2029883a 	mov	r20,r4
100025f8:	2980522e 	bgeu	r5,r6,10002744 <__umoddi3+0x190>
100025fc:	00bfffd4 	movui	r2,65535
10002600:	1180a436 	bltu	r2,r6,10002894 <__umoddi3+0x2e0>
10002604:	00803fc4 	movi	r2,255
10002608:	11815e2e 	bgeu	r2,r6,10002b84 <__umoddi3+0x5d0>
1000260c:	01400204 	movi	r5,8
10002610:	2805883a 	mov	r2,r5
10002614:	314ad83a 	srl	r5,r6,r5
10002618:	00c40074 	movhi	r3,4097
1000261c:	18c44104 	addi	r3,r3,4356
10002620:	194b883a 	add	r5,r3,r5
10002624:	29000003 	ldbu	r4,0(r5)
10002628:	2089883a 	add	r4,r4,r2
1000262c:	00800804 	movi	r2,32
10002630:	1105c83a 	sub	r2,r2,r4
10002634:	10010c26 	beq	r2,zero,10002a68 <__umoddi3+0x4b4>
10002638:	88a2983a 	sll	r17,r17,r2
1000263c:	8108d83a 	srl	r4,r16,r4
10002640:	30a6983a 	sll	r19,r6,r2
10002644:	80a8983a 	sll	r20,r16,r2
10002648:	1025883a 	mov	r18,r2
1000264c:	892cb03a 	or	r22,r17,r4
10002650:	9822d43a 	srli	r17,r19,16
10002654:	b009883a 	mov	r4,r22
10002658:	9d7fffcc 	andi	r21,r19,65535
1000265c:	880b883a 	mov	r5,r17
10002660:	0002cf40 	call	10002cf4 <__umodsi3>
10002664:	b009883a 	mov	r4,r22
10002668:	880b883a 	mov	r5,r17
1000266c:	102f883a 	mov	r23,r2
10002670:	0002cec0 	call	10002cec <__udivsi3>
10002674:	1009883a 	mov	r4,r2
10002678:	a80b883a 	mov	r5,r21
1000267c:	0002cfc0 	call	10002cfc <__mulsi3>
10002680:	b82e943a 	slli	r23,r23,16
10002684:	a008d43a 	srli	r4,r20,16
10002688:	b906b03a 	or	r3,r23,r4
1000268c:	1880042e 	bgeu	r3,r2,100026a0 <__umoddi3+0xec>
10002690:	1cc7883a 	add	r3,r3,r19
10002694:	1cc00236 	bltu	r3,r19,100026a0 <__umoddi3+0xec>
10002698:	1880012e 	bgeu	r3,r2,100026a0 <__umoddi3+0xec>
1000269c:	1cc7883a 	add	r3,r3,r19
100026a0:	18a1c83a 	sub	r16,r3,r2
100026a4:	8009883a 	mov	r4,r16
100026a8:	880b883a 	mov	r5,r17
100026ac:	0002cf40 	call	10002cf4 <__umodsi3>
100026b0:	8009883a 	mov	r4,r16
100026b4:	880b883a 	mov	r5,r17
100026b8:	102d883a 	mov	r22,r2
100026bc:	0002cec0 	call	10002cec <__udivsi3>
100026c0:	1009883a 	mov	r4,r2
100026c4:	a80b883a 	mov	r5,r21
100026c8:	b02c943a 	slli	r22,r22,16
100026cc:	0002cfc0 	call	10002cfc <__mulsi3>
100026d0:	a13fffcc 	andi	r4,r20,65535
100026d4:	b106b03a 	or	r3,r22,r4
100026d8:	1880572e 	bgeu	r3,r2,10002838 <__umoddi3+0x284>
100026dc:	00005206 	br	10002828 <__umoddi3+0x274>
100026e0:	29c05936 	bltu	r5,r7,10002848 <__umoddi3+0x294>
100026e4:	00bfffd4 	movui	r2,65535
100026e8:	11c0652e 	bgeu	r2,r7,10002880 <__umoddi3+0x2cc>
100026ec:	00804034 	movhi	r2,256
100026f0:	10bfffc4 	addi	r2,r2,-1
100026f4:	11c1172e 	bgeu	r2,r7,10002b54 <__umoddi3+0x5a0>
100026f8:	01400604 	movi	r5,24
100026fc:	282b883a 	mov	r21,r5
10002700:	394ad83a 	srl	r5,r7,r5
10002704:	00c40074 	movhi	r3,4097
10002708:	18c44104 	addi	r3,r3,4356
1000270c:	194b883a 	add	r5,r3,r5
10002710:	28800003 	ldbu	r2,0(r5)
10002714:	00c00804 	movi	r3,32
10002718:	156b883a 	add	r21,r2,r21
1000271c:	1d69c83a 	sub	r20,r3,r21
10002720:	a000671e 	bne	r20,zero,100028c0 <__umoddi3+0x30c>
10002724:	3c400136 	bltu	r7,r17,1000272c <__umoddi3+0x178>
10002728:	81812336 	bltu	r16,r6,10002bb8 <__umoddi3+0x604>
1000272c:	8185c83a 	sub	r2,r16,r6
10002730:	89e3c83a 	sub	r17,r17,r7
10002734:	8087803a 	cmpltu	r3,r16,r2
10002738:	88edc83a 	sub	r22,r17,r3
1000273c:	b007883a 	mov	r3,r22
10002740:	00004306 	br	10002850 <__umoddi3+0x29c>
10002744:	3000041e 	bne	r6,zero,10002758 <__umoddi3+0x1a4>
10002748:	01000044 	movi	r4,1
1000274c:	000b883a 	mov	r5,zero
10002750:	0002cec0 	call	10002cec <__udivsi3>
10002754:	1027883a 	mov	r19,r2
10002758:	00bfffd4 	movui	r2,65535
1000275c:	14c0532e 	bgeu	r2,r19,100028ac <__umoddi3+0x2f8>
10002760:	00804034 	movhi	r2,256
10002764:	10bfffc4 	addi	r2,r2,-1
10002768:	14c1032e 	bgeu	r2,r19,10002b78 <__umoddi3+0x5c4>
1000276c:	00800604 	movi	r2,24
10002770:	1007883a 	mov	r3,r2
10002774:	9884d83a 	srl	r2,r19,r2
10002778:	01040074 	movhi	r4,4097
1000277c:	21044104 	addi	r4,r4,4356
10002780:	2085883a 	add	r2,r4,r2
10002784:	11000003 	ldbu	r4,0(r2)
10002788:	00800804 	movi	r2,32
1000278c:	20c7883a 	add	r3,r4,r3
10002790:	10c5c83a 	sub	r2,r2,r3
10002794:	1000b61e 	bne	r2,zero,10002a70 <__umoddi3+0x4bc>
10002798:	982ad43a 	srli	r21,r19,16
1000279c:	8ce3c83a 	sub	r17,r17,r19
100027a0:	9dbfffcc 	andi	r22,r19,65535
100027a4:	0025883a 	mov	r18,zero
100027a8:	8809883a 	mov	r4,r17
100027ac:	a80b883a 	mov	r5,r21
100027b0:	0002cf40 	call	10002cf4 <__umodsi3>
100027b4:	8809883a 	mov	r4,r17
100027b8:	a80b883a 	mov	r5,r21
100027bc:	102f883a 	mov	r23,r2
100027c0:	0002cec0 	call	10002cec <__udivsi3>
100027c4:	1009883a 	mov	r4,r2
100027c8:	b00b883a 	mov	r5,r22
100027cc:	0002cfc0 	call	10002cfc <__mulsi3>
100027d0:	b82e943a 	slli	r23,r23,16
100027d4:	a008d43a 	srli	r4,r20,16
100027d8:	b906b03a 	or	r3,r23,r4
100027dc:	1880032e 	bgeu	r3,r2,100027ec <__umoddi3+0x238>
100027e0:	1cc7883a 	add	r3,r3,r19
100027e4:	1cc00136 	bltu	r3,r19,100027ec <__umoddi3+0x238>
100027e8:	1880f136 	bltu	r3,r2,10002bb0 <__umoddi3+0x5fc>
100027ec:	18a1c83a 	sub	r16,r3,r2
100027f0:	8009883a 	mov	r4,r16
100027f4:	a80b883a 	mov	r5,r21
100027f8:	0002cf40 	call	10002cf4 <__umodsi3>
100027fc:	8009883a 	mov	r4,r16
10002800:	a80b883a 	mov	r5,r21
10002804:	1023883a 	mov	r17,r2
10002808:	0002cec0 	call	10002cec <__udivsi3>
1000280c:	1009883a 	mov	r4,r2
10002810:	b00b883a 	mov	r5,r22
10002814:	8822943a 	slli	r17,r17,16
10002818:	0002cfc0 	call	10002cfc <__mulsi3>
1000281c:	a13fffcc 	andi	r4,r20,65535
10002820:	8906b03a 	or	r3,r17,r4
10002824:	1880042e 	bgeu	r3,r2,10002838 <__umoddi3+0x284>
10002828:	1cc7883a 	add	r3,r3,r19
1000282c:	1cc00236 	bltu	r3,r19,10002838 <__umoddi3+0x284>
10002830:	1880012e 	bgeu	r3,r2,10002838 <__umoddi3+0x284>
10002834:	1cc7883a 	add	r3,r3,r19
10002838:	1887c83a 	sub	r3,r3,r2
1000283c:	1c84d83a 	srl	r2,r3,r18
10002840:	0007883a 	mov	r3,zero
10002844:	00000206 	br	10002850 <__umoddi3+0x29c>
10002848:	2005883a 	mov	r2,r4
1000284c:	2807883a 	mov	r3,r5
10002850:	dfc00b17 	ldw	ra,44(sp)
10002854:	df000a17 	ldw	fp,40(sp)
10002858:	ddc00917 	ldw	r23,36(sp)
1000285c:	dd800817 	ldw	r22,32(sp)
10002860:	dd400717 	ldw	r21,28(sp)
10002864:	dd000617 	ldw	r20,24(sp)
10002868:	dcc00517 	ldw	r19,20(sp)
1000286c:	dc800417 	ldw	r18,16(sp)
10002870:	dc400317 	ldw	r17,12(sp)
10002874:	dc000217 	ldw	r16,8(sp)
10002878:	dec00c04 	addi	sp,sp,48
1000287c:	f800283a 	ret
10002880:	00803fc4 	movi	r2,255
10002884:	11c0b02e 	bgeu	r2,r7,10002b48 <__umoddi3+0x594>
10002888:	01400204 	movi	r5,8
1000288c:	282b883a 	mov	r21,r5
10002890:	003f9b06 	br	10002700 <__alt_data_end+0xf8002700>
10002894:	00804034 	movhi	r2,256
10002898:	10bfffc4 	addi	r2,r2,-1
1000289c:	1180b02e 	bgeu	r2,r6,10002b60 <__umoddi3+0x5ac>
100028a0:	01400604 	movi	r5,24
100028a4:	2805883a 	mov	r2,r5
100028a8:	003f5a06 	br	10002614 <__alt_data_end+0xf8002614>
100028ac:	00803fc4 	movi	r2,255
100028b0:	14c0ae2e 	bgeu	r2,r19,10002b6c <__umoddi3+0x5b8>
100028b4:	00800204 	movi	r2,8
100028b8:	1007883a 	mov	r3,r2
100028bc:	003fad06 	br	10002774 <__alt_data_end+0xf8002774>
100028c0:	3d0a983a 	sll	r5,r7,r20
100028c4:	356cd83a 	srl	r22,r6,r21
100028c8:	8d78d83a 	srl	fp,r17,r21
100028cc:	8d10983a 	sll	r8,r17,r20
100028d0:	2dacb03a 	or	r22,r5,r22
100028d4:	b02ed43a 	srli	r23,r22,16
100028d8:	8564d83a 	srl	r18,r16,r21
100028dc:	e009883a 	mov	r4,fp
100028e0:	b80b883a 	mov	r5,r23
100028e4:	44a4b03a 	or	r18,r8,r18
100028e8:	3526983a 	sll	r19,r6,r20
100028ec:	0002cf40 	call	10002cf4 <__umodsi3>
100028f0:	e009883a 	mov	r4,fp
100028f4:	b80b883a 	mov	r5,r23
100028f8:	b47fffcc 	andi	r17,r22,65535
100028fc:	d8800015 	stw	r2,0(sp)
10002900:	0002cec0 	call	10002cec <__udivsi3>
10002904:	1009883a 	mov	r4,r2
10002908:	880b883a 	mov	r5,r17
1000290c:	1039883a 	mov	fp,r2
10002910:	0002cfc0 	call	10002cfc <__mulsi3>
10002914:	d9800017 	ldw	r6,0(sp)
10002918:	9008d43a 	srli	r4,r18,16
1000291c:	8520983a 	sll	r16,r16,r20
10002920:	300c943a 	slli	r6,r6,16
10002924:	3106b03a 	or	r3,r6,r4
10002928:	1880042e 	bgeu	r3,r2,1000293c <__umoddi3+0x388>
1000292c:	1d87883a 	add	r3,r3,r22
10002930:	e13fffc4 	addi	r4,fp,-1
10002934:	1d809a2e 	bgeu	r3,r22,10002ba0 <__umoddi3+0x5ec>
10002938:	2039883a 	mov	fp,r4
1000293c:	1887c83a 	sub	r3,r3,r2
10002940:	1809883a 	mov	r4,r3
10002944:	b80b883a 	mov	r5,r23
10002948:	d8c00115 	stw	r3,4(sp)
1000294c:	0002cf40 	call	10002cf4 <__umodsi3>
10002950:	d8c00117 	ldw	r3,4(sp)
10002954:	b80b883a 	mov	r5,r23
10002958:	d8800015 	stw	r2,0(sp)
1000295c:	1809883a 	mov	r4,r3
10002960:	0002cec0 	call	10002cec <__udivsi3>
10002964:	880b883a 	mov	r5,r17
10002968:	1009883a 	mov	r4,r2
1000296c:	102f883a 	mov	r23,r2
10002970:	0002cfc0 	call	10002cfc <__mulsi3>
10002974:	d9800017 	ldw	r6,0(sp)
10002978:	947fffcc 	andi	r17,r18,65535
1000297c:	300c943a 	slli	r6,r6,16
10002980:	3464b03a 	or	r18,r6,r17
10002984:	9080042e 	bgeu	r18,r2,10002998 <__umoddi3+0x3e4>
10002988:	95a5883a 	add	r18,r18,r22
1000298c:	b8ffffc4 	addi	r3,r23,-1
10002990:	95807f2e 	bgeu	r18,r22,10002b90 <__umoddi3+0x5dc>
10002994:	182f883a 	mov	r23,r3
10002998:	e038943a 	slli	fp,fp,16
1000299c:	980cd43a 	srli	r6,r19,16
100029a0:	98ffffcc 	andi	r3,r19,65535
100029a4:	bf38b03a 	or	fp,r23,fp
100029a8:	e02ed43a 	srli	r23,fp,16
100029ac:	e73fffcc 	andi	fp,fp,65535
100029b0:	180b883a 	mov	r5,r3
100029b4:	e009883a 	mov	r4,fp
100029b8:	d9800015 	stw	r6,0(sp)
100029bc:	d8c00115 	stw	r3,4(sp)
100029c0:	90a5c83a 	sub	r18,r18,r2
100029c4:	0002cfc0 	call	10002cfc <__mulsi3>
100029c8:	d8c00117 	ldw	r3,4(sp)
100029cc:	b809883a 	mov	r4,r23
100029d0:	1023883a 	mov	r17,r2
100029d4:	180b883a 	mov	r5,r3
100029d8:	0002cfc0 	call	10002cfc <__mulsi3>
100029dc:	d9800017 	ldw	r6,0(sp)
100029e0:	b809883a 	mov	r4,r23
100029e4:	d8800115 	stw	r2,4(sp)
100029e8:	300b883a 	mov	r5,r6
100029ec:	302f883a 	mov	r23,r6
100029f0:	0002cfc0 	call	10002cfc <__mulsi3>
100029f4:	e009883a 	mov	r4,fp
100029f8:	b80b883a 	mov	r5,r23
100029fc:	d8800015 	stw	r2,0(sp)
10002a00:	0002cfc0 	call	10002cfc <__mulsi3>
10002a04:	d8c00117 	ldw	r3,4(sp)
10002a08:	880cd43a 	srli	r6,r17,16
10002a0c:	d9c00017 	ldw	r7,0(sp)
10002a10:	1885883a 	add	r2,r3,r2
10002a14:	118d883a 	add	r6,r2,r6
10002a18:	30c0022e 	bgeu	r6,r3,10002a24 <__umoddi3+0x470>
10002a1c:	00800074 	movhi	r2,1
10002a20:	388f883a 	add	r7,r7,r2
10002a24:	3006d43a 	srli	r3,r6,16
10002a28:	300c943a 	slli	r6,r6,16
10002a2c:	8c7fffcc 	andi	r17,r17,65535
10002a30:	38c7883a 	add	r3,r7,r3
10002a34:	3463883a 	add	r17,r6,r17
10002a38:	90c03d36 	bltu	r18,r3,10002b30 <__umoddi3+0x57c>
10002a3c:	90c06026 	beq	r18,r3,10002bc0 <__umoddi3+0x60c>
10002a40:	90c9c83a 	sub	r4,r18,r3
10002a44:	880f883a 	mov	r7,r17
10002a48:	81cfc83a 	sub	r7,r16,r7
10002a4c:	81c7803a 	cmpltu	r3,r16,r7
10002a50:	20c7c83a 	sub	r3,r4,r3
10002a54:	1d44983a 	sll	r2,r3,r21
10002a58:	3d0ed83a 	srl	r7,r7,r20
10002a5c:	1d06d83a 	srl	r3,r3,r20
10002a60:	11c4b03a 	or	r2,r2,r7
10002a64:	003f7a06 	br	10002850 <__alt_data_end+0xf8002850>
10002a68:	0025883a 	mov	r18,zero
10002a6c:	003ef806 	br	10002650 <__alt_data_end+0xf8002650>
10002a70:	98a6983a 	sll	r19,r19,r2
10002a74:	88e8d83a 	srl	r20,r17,r3
10002a78:	80c6d83a 	srl	r3,r16,r3
10002a7c:	982ad43a 	srli	r21,r19,16
10002a80:	88a2983a 	sll	r17,r17,r2
10002a84:	a009883a 	mov	r4,r20
10002a88:	a80b883a 	mov	r5,r21
10002a8c:	88eeb03a 	or	r23,r17,r3
10002a90:	1025883a 	mov	r18,r2
10002a94:	0002cf40 	call	10002cf4 <__umodsi3>
10002a98:	a009883a 	mov	r4,r20
10002a9c:	a80b883a 	mov	r5,r21
10002aa0:	1023883a 	mov	r17,r2
10002aa4:	9dbfffcc 	andi	r22,r19,65535
10002aa8:	0002cec0 	call	10002cec <__udivsi3>
10002aac:	1009883a 	mov	r4,r2
10002ab0:	b00b883a 	mov	r5,r22
10002ab4:	0002cfc0 	call	10002cfc <__mulsi3>
10002ab8:	8822943a 	slli	r17,r17,16
10002abc:	b808d43a 	srli	r4,r23,16
10002ac0:	84a8983a 	sll	r20,r16,r18
10002ac4:	8906b03a 	or	r3,r17,r4
10002ac8:	1880042e 	bgeu	r3,r2,10002adc <__umoddi3+0x528>
10002acc:	1cc7883a 	add	r3,r3,r19
10002ad0:	1cc00236 	bltu	r3,r19,10002adc <__umoddi3+0x528>
10002ad4:	1880012e 	bgeu	r3,r2,10002adc <__umoddi3+0x528>
10002ad8:	1cc7883a 	add	r3,r3,r19
10002adc:	18a1c83a 	sub	r16,r3,r2
10002ae0:	8009883a 	mov	r4,r16
10002ae4:	a80b883a 	mov	r5,r21
10002ae8:	0002cf40 	call	10002cf4 <__umodsi3>
10002aec:	8009883a 	mov	r4,r16
10002af0:	a80b883a 	mov	r5,r21
10002af4:	1039883a 	mov	fp,r2
10002af8:	0002cec0 	call	10002cec <__udivsi3>
10002afc:	1009883a 	mov	r4,r2
10002b00:	b00b883a 	mov	r5,r22
10002b04:	0002cfc0 	call	10002cfc <__mulsi3>
10002b08:	e006943a 	slli	r3,fp,16
10002b0c:	b93fffcc 	andi	r4,r23,65535
10002b10:	1906b03a 	or	r3,r3,r4
10002b14:	1880042e 	bgeu	r3,r2,10002b28 <__umoddi3+0x574>
10002b18:	1cc7883a 	add	r3,r3,r19
10002b1c:	1cc00236 	bltu	r3,r19,10002b28 <__umoddi3+0x574>
10002b20:	1880012e 	bgeu	r3,r2,10002b28 <__umoddi3+0x574>
10002b24:	1cc7883a 	add	r3,r3,r19
10002b28:	18a3c83a 	sub	r17,r3,r2
10002b2c:	003f1e06 	br	100027a8 <__alt_data_end+0xf80027a8>
10002b30:	8ccfc83a 	sub	r7,r17,r19
10002b34:	1d89c83a 	sub	r4,r3,r22
10002b38:	89e3803a 	cmpltu	r17,r17,r7
10002b3c:	2463c83a 	sub	r17,r4,r17
10002b40:	9449c83a 	sub	r4,r18,r17
10002b44:	003fc006 	br	10002a48 <__alt_data_end+0xf8002a48>
10002b48:	000b883a 	mov	r5,zero
10002b4c:	002b883a 	mov	r21,zero
10002b50:	003eeb06 	br	10002700 <__alt_data_end+0xf8002700>
10002b54:	01400404 	movi	r5,16
10002b58:	282b883a 	mov	r21,r5
10002b5c:	003ee806 	br	10002700 <__alt_data_end+0xf8002700>
10002b60:	01400404 	movi	r5,16
10002b64:	2805883a 	mov	r2,r5
10002b68:	003eaa06 	br	10002614 <__alt_data_end+0xf8002614>
10002b6c:	0005883a 	mov	r2,zero
10002b70:	0007883a 	mov	r3,zero
10002b74:	003eff06 	br	10002774 <__alt_data_end+0xf8002774>
10002b78:	00800404 	movi	r2,16
10002b7c:	1007883a 	mov	r3,r2
10002b80:	003efc06 	br	10002774 <__alt_data_end+0xf8002774>
10002b84:	000b883a 	mov	r5,zero
10002b88:	0005883a 	mov	r2,zero
10002b8c:	003ea106 	br	10002614 <__alt_data_end+0xf8002614>
10002b90:	90bf802e 	bgeu	r18,r2,10002994 <__alt_data_end+0xf8002994>
10002b94:	bdffff84 	addi	r23,r23,-2
10002b98:	95a5883a 	add	r18,r18,r22
10002b9c:	003f7e06 	br	10002998 <__alt_data_end+0xf8002998>
10002ba0:	18bf652e 	bgeu	r3,r2,10002938 <__alt_data_end+0xf8002938>
10002ba4:	e73fff84 	addi	fp,fp,-2
10002ba8:	1d87883a 	add	r3,r3,r22
10002bac:	003f6306 	br	1000293c <__alt_data_end+0xf800293c>
10002bb0:	1cc7883a 	add	r3,r3,r19
10002bb4:	003f0d06 	br	100027ec <__alt_data_end+0xf80027ec>
10002bb8:	8005883a 	mov	r2,r16
10002bbc:	003edf06 	br	1000273c <__alt_data_end+0xf800273c>
10002bc0:	847fdb36 	bltu	r16,r17,10002b30 <__alt_data_end+0xf8002b30>
10002bc4:	880f883a 	mov	r7,r17
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	003f9e06 	br	10002a48 <__alt_data_end+0xf8002a48>

10002bd0 <udivmodsi4>:
10002bd0:	2900182e 	bgeu	r5,r4,10002c34 <udivmodsi4+0x64>
10002bd4:	28001716 	blt	r5,zero,10002c34 <udivmodsi4+0x64>
10002bd8:	00800804 	movi	r2,32
10002bdc:	00c00044 	movi	r3,1
10002be0:	00000206 	br	10002bec <udivmodsi4+0x1c>
10002be4:	10001126 	beq	r2,zero,10002c2c <udivmodsi4+0x5c>
10002be8:	28000516 	blt	r5,zero,10002c00 <udivmodsi4+0x30>
10002bec:	294b883a 	add	r5,r5,r5
10002bf0:	10bfffc4 	addi	r2,r2,-1
10002bf4:	18c7883a 	add	r3,r3,r3
10002bf8:	293ffa36 	bltu	r5,r4,10002be4 <__alt_data_end+0xf8002be4>
10002bfc:	18000b26 	beq	r3,zero,10002c2c <udivmodsi4+0x5c>
10002c00:	0005883a 	mov	r2,zero
10002c04:	21400236 	bltu	r4,r5,10002c10 <udivmodsi4+0x40>
10002c08:	2149c83a 	sub	r4,r4,r5
10002c0c:	10c4b03a 	or	r2,r2,r3
10002c10:	1806d07a 	srli	r3,r3,1
10002c14:	280ad07a 	srli	r5,r5,1
10002c18:	183ffa1e 	bne	r3,zero,10002c04 <__alt_data_end+0xf8002c04>
10002c1c:	3000011e 	bne	r6,zero,10002c24 <udivmodsi4+0x54>
10002c20:	f800283a 	ret
10002c24:	2005883a 	mov	r2,r4
10002c28:	f800283a 	ret
10002c2c:	0005883a 	mov	r2,zero
10002c30:	003ffa06 	br	10002c1c <__alt_data_end+0xf8002c1c>
10002c34:	00c00044 	movi	r3,1
10002c38:	003ff106 	br	10002c00 <__alt_data_end+0xf8002c00>

10002c3c <__divsi3>:
10002c3c:	defffe04 	addi	sp,sp,-8
10002c40:	dfc00115 	stw	ra,4(sp)
10002c44:	dc000015 	stw	r16,0(sp)
10002c48:	20000b16 	blt	r4,zero,10002c78 <__divsi3+0x3c>
10002c4c:	0021883a 	mov	r16,zero
10002c50:	28000c16 	blt	r5,zero,10002c84 <__divsi3+0x48>
10002c54:	000d883a 	mov	r6,zero
10002c58:	0002bd00 	call	10002bd0 <udivmodsi4>
10002c5c:	0407c83a 	sub	r3,zero,r16
10002c60:	1884f03a 	xor	r2,r3,r2
10002c64:	1405883a 	add	r2,r2,r16
10002c68:	dfc00117 	ldw	ra,4(sp)
10002c6c:	dc000017 	ldw	r16,0(sp)
10002c70:	dec00204 	addi	sp,sp,8
10002c74:	f800283a 	ret
10002c78:	0109c83a 	sub	r4,zero,r4
10002c7c:	04000044 	movi	r16,1
10002c80:	283ff40e 	bge	r5,zero,10002c54 <__alt_data_end+0xf8002c54>
10002c84:	014bc83a 	sub	r5,zero,r5
10002c88:	8400005c 	xori	r16,r16,1
10002c8c:	003ff106 	br	10002c54 <__alt_data_end+0xf8002c54>

10002c90 <__modsi3>:
10002c90:	defffd04 	addi	sp,sp,-12
10002c94:	dfc00215 	stw	ra,8(sp)
10002c98:	dc400115 	stw	r17,4(sp)
10002c9c:	dc000015 	stw	r16,0(sp)
10002ca0:	20000c16 	blt	r4,zero,10002cd4 <__modsi3+0x44>
10002ca4:	0023883a 	mov	r17,zero
10002ca8:	0021883a 	mov	r16,zero
10002cac:	28000d16 	blt	r5,zero,10002ce4 <__modsi3+0x54>
10002cb0:	01800044 	movi	r6,1
10002cb4:	0002bd00 	call	10002bd0 <udivmodsi4>
10002cb8:	1404f03a 	xor	r2,r2,r16
10002cbc:	8885883a 	add	r2,r17,r2
10002cc0:	dfc00217 	ldw	ra,8(sp)
10002cc4:	dc400117 	ldw	r17,4(sp)
10002cc8:	dc000017 	ldw	r16,0(sp)
10002ccc:	dec00304 	addi	sp,sp,12
10002cd0:	f800283a 	ret
10002cd4:	0109c83a 	sub	r4,zero,r4
10002cd8:	04400044 	movi	r17,1
10002cdc:	043fffc4 	movi	r16,-1
10002ce0:	283ff30e 	bge	r5,zero,10002cb0 <__alt_data_end+0xf8002cb0>
10002ce4:	014bc83a 	sub	r5,zero,r5
10002ce8:	003ff106 	br	10002cb0 <__alt_data_end+0xf8002cb0>

10002cec <__udivsi3>:
10002cec:	000d883a 	mov	r6,zero
10002cf0:	0002bd01 	jmpi	10002bd0 <udivmodsi4>

10002cf4 <__umodsi3>:
10002cf4:	01800044 	movi	r6,1
10002cf8:	0002bd01 	jmpi	10002bd0 <udivmodsi4>

10002cfc <__mulsi3>:
10002cfc:	0005883a 	mov	r2,zero
10002d00:	20000726 	beq	r4,zero,10002d20 <__mulsi3+0x24>
10002d04:	20c0004c 	andi	r3,r4,1
10002d08:	2008d07a 	srli	r4,r4,1
10002d0c:	18000126 	beq	r3,zero,10002d14 <__mulsi3+0x18>
10002d10:	1145883a 	add	r2,r2,r5
10002d14:	294b883a 	add	r5,r5,r5
10002d18:	203ffa1e 	bne	r4,zero,10002d04 <__alt_data_end+0xf8002d04>
10002d1c:	f800283a 	ret
10002d20:	f800283a 	ret

10002d24 <__adddf3>:
10002d24:	02000434 	movhi	r8,16
10002d28:	423fffc4 	addi	r8,r8,-1
10002d2c:	defffb04 	addi	sp,sp,-20
10002d30:	2a12703a 	and	r9,r5,r8
10002d34:	2806d7fa 	srli	r3,r5,31
10002d38:	3a10703a 	and	r8,r7,r8
10002d3c:	3804d53a 	srli	r2,r7,20
10002d40:	3014d77a 	srli	r10,r6,29
10002d44:	dc000015 	stw	r16,0(sp)
10002d48:	481290fa 	slli	r9,r9,3
10002d4c:	2820d53a 	srli	r16,r5,20
10002d50:	401090fa 	slli	r8,r8,3
10002d54:	200ad77a 	srli	r5,r4,29
10002d58:	380ed7fa 	srli	r7,r7,31
10002d5c:	dc800215 	stw	r18,8(sp)
10002d60:	dc400115 	stw	r17,4(sp)
10002d64:	dfc00415 	stw	ra,16(sp)
10002d68:	dcc00315 	stw	r19,12(sp)
10002d6c:	1c803fcc 	andi	r18,r3,255
10002d70:	8401ffcc 	andi	r16,r16,2047
10002d74:	494ab03a 	or	r5,r9,r5
10002d78:	202290fa 	slli	r17,r4,3
10002d7c:	1081ffcc 	andi	r2,r2,2047
10002d80:	4290b03a 	or	r8,r8,r10
10002d84:	300c90fa 	slli	r6,r6,3
10002d88:	91c07026 	beq	r18,r7,10002f4c <__adddf3+0x228>
10002d8c:	8087c83a 	sub	r3,r16,r2
10002d90:	00c0b30e 	bge	zero,r3,10003060 <__adddf3+0x33c>
10002d94:	10002a1e 	bne	r2,zero,10002e40 <__adddf3+0x11c>
10002d98:	4184b03a 	or	r2,r8,r6
10002d9c:	1000991e 	bne	r2,zero,10003004 <__adddf3+0x2e0>
10002da0:	888001cc 	andi	r2,r17,7
10002da4:	10005b26 	beq	r2,zero,10002f14 <__adddf3+0x1f0>
10002da8:	88c003cc 	andi	r3,r17,15
10002dac:	00800104 	movi	r2,4
10002db0:	18805826 	beq	r3,r2,10002f14 <__adddf3+0x1f0>
10002db4:	89800104 	addi	r6,r17,4
10002db8:	3463803a 	cmpltu	r17,r6,r17
10002dbc:	2c4b883a 	add	r5,r5,r17
10002dc0:	2880202c 	andhi	r2,r5,128
10002dc4:	9007883a 	mov	r3,r18
10002dc8:	3023883a 	mov	r17,r6
10002dcc:	10005426 	beq	r2,zero,10002f20 <__adddf3+0x1fc>
10002dd0:	84000044 	addi	r16,r16,1
10002dd4:	0081ffc4 	movi	r2,2047
10002dd8:	8080c126 	beq	r16,r2,100030e0 <__adddf3+0x3bc>
10002ddc:	013fe034 	movhi	r4,65408
10002de0:	213fffc4 	addi	r4,r4,-1
10002de4:	290a703a 	and	r5,r5,r4
10002de8:	2804977a 	slli	r2,r5,29
10002dec:	280a927a 	slli	r5,r5,9
10002df0:	8822d0fa 	srli	r17,r17,3
10002df4:	8401ffcc 	andi	r16,r16,2047
10002df8:	2808d33a 	srli	r4,r5,12
10002dfc:	1444b03a 	or	r2,r2,r17
10002e00:	8401ffcc 	andi	r16,r16,2047
10002e04:	800a953a 	slli	r5,r16,20
10002e08:	18c03fcc 	andi	r3,r3,255
10002e0c:	04000434 	movhi	r16,16
10002e10:	180697fa 	slli	r3,r3,31
10002e14:	843fffc4 	addi	r16,r16,-1
10002e18:	2420703a 	and	r16,r4,r16
10002e1c:	8160b03a 	or	r16,r16,r5
10002e20:	80c6b03a 	or	r3,r16,r3
10002e24:	dfc00417 	ldw	ra,16(sp)
10002e28:	dcc00317 	ldw	r19,12(sp)
10002e2c:	dc800217 	ldw	r18,8(sp)
10002e30:	dc400117 	ldw	r17,4(sp)
10002e34:	dc000017 	ldw	r16,0(sp)
10002e38:	dec00504 	addi	sp,sp,20
10002e3c:	f800283a 	ret
10002e40:	0081ffc4 	movi	r2,2047
10002e44:	80bfd626 	beq	r16,r2,10002da0 <__alt_data_end+0xf8002da0>
10002e48:	42002034 	orhi	r8,r8,128
10002e4c:	00800e04 	movi	r2,56
10002e50:	10c0a616 	blt	r2,r3,100030ec <__adddf3+0x3c8>
10002e54:	008007c4 	movi	r2,31
10002e58:	10c0c916 	blt	r2,r3,10003180 <__adddf3+0x45c>
10002e5c:	00800804 	movi	r2,32
10002e60:	10c5c83a 	sub	r2,r2,r3
10002e64:	408e983a 	sll	r7,r8,r2
10002e68:	30c8d83a 	srl	r4,r6,r3
10002e6c:	3084983a 	sll	r2,r6,r2
10002e70:	40c6d83a 	srl	r3,r8,r3
10002e74:	390cb03a 	or	r6,r7,r4
10002e78:	1004c03a 	cmpne	r2,r2,zero
10002e7c:	308cb03a 	or	r6,r6,r2
10002e80:	898dc83a 	sub	r6,r17,r6
10002e84:	89a3803a 	cmpltu	r17,r17,r6
10002e88:	28cbc83a 	sub	r5,r5,r3
10002e8c:	2c4bc83a 	sub	r5,r5,r17
10002e90:	3023883a 	mov	r17,r6
10002e94:	2880202c 	andhi	r2,r5,128
10002e98:	10006d26 	beq	r2,zero,10003050 <__adddf3+0x32c>
10002e9c:	04c02034 	movhi	r19,128
10002ea0:	9cffffc4 	addi	r19,r19,-1
10002ea4:	2ce6703a 	and	r19,r5,r19
10002ea8:	98007e26 	beq	r19,zero,100030a4 <__adddf3+0x380>
10002eac:	9809883a 	mov	r4,r19
10002eb0:	0003fe80 	call	10003fe8 <__clzsi2>
10002eb4:	10fffe04 	addi	r3,r2,-8
10002eb8:	010007c4 	movi	r4,31
10002ebc:	20c07f16 	blt	r4,r3,100030bc <__adddf3+0x398>
10002ec0:	01400a04 	movi	r5,40
10002ec4:	2885c83a 	sub	r2,r5,r2
10002ec8:	888ad83a 	srl	r5,r17,r2
10002ecc:	98e6983a 	sll	r19,r19,r3
10002ed0:	88e2983a 	sll	r17,r17,r3
10002ed4:	2ce6b03a 	or	r19,r5,r19
10002ed8:	1c007c16 	blt	r3,r16,100030cc <__adddf3+0x3a8>
10002edc:	1c21c83a 	sub	r16,r3,r16
10002ee0:	81400044 	addi	r5,r16,1
10002ee4:	00c007c4 	movi	r3,31
10002ee8:	19409816 	blt	r3,r5,1000314c <__adddf3+0x428>
10002eec:	1c21c83a 	sub	r16,r3,r16
10002ef0:	8c08983a 	sll	r4,r17,r16
10002ef4:	8946d83a 	srl	r3,r17,r5
10002ef8:	9c20983a 	sll	r16,r19,r16
10002efc:	2008c03a 	cmpne	r4,r4,zero
10002f00:	994ad83a 	srl	r5,r19,r5
10002f04:	1c06b03a 	or	r3,r3,r16
10002f08:	1922b03a 	or	r17,r3,r4
10002f0c:	0021883a 	mov	r16,zero
10002f10:	003fa306 	br	10002da0 <__alt_data_end+0xf8002da0>
10002f14:	2880202c 	andhi	r2,r5,128
10002f18:	9007883a 	mov	r3,r18
10002f1c:	103fac1e 	bne	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
10002f20:	2804977a 	slli	r2,r5,29
10002f24:	8822d0fa 	srli	r17,r17,3
10002f28:	0101ffc4 	movi	r4,2047
10002f2c:	280ad0fa 	srli	r5,r5,3
10002f30:	1444b03a 	or	r2,r2,r17
10002f34:	81002c26 	beq	r16,r4,10002fe8 <__adddf3+0x2c4>
10002f38:	8120703a 	and	r16,r16,r4
10002f3c:	01000434 	movhi	r4,16
10002f40:	213fffc4 	addi	r4,r4,-1
10002f44:	2908703a 	and	r4,r5,r4
10002f48:	003fad06 	br	10002e00 <__alt_data_end+0xf8002e00>
10002f4c:	8089c83a 	sub	r4,r16,r2
10002f50:	01006a0e 	bge	zero,r4,100030fc <__adddf3+0x3d8>
10002f54:	10003326 	beq	r2,zero,10003024 <__adddf3+0x300>
10002f58:	0081ffc4 	movi	r2,2047
10002f5c:	80bf9026 	beq	r16,r2,10002da0 <__alt_data_end+0xf8002da0>
10002f60:	42002034 	orhi	r8,r8,128
10002f64:	00800e04 	movi	r2,56
10002f68:	1100b116 	blt	r2,r4,10003230 <__adddf3+0x50c>
10002f6c:	008007c4 	movi	r2,31
10002f70:	1100e216 	blt	r2,r4,100032fc <__adddf3+0x5d8>
10002f74:	00800804 	movi	r2,32
10002f78:	1105c83a 	sub	r2,r2,r4
10002f7c:	4092983a 	sll	r9,r8,r2
10002f80:	310ed83a 	srl	r7,r6,r4
10002f84:	3084983a 	sll	r2,r6,r2
10002f88:	4110d83a 	srl	r8,r8,r4
10002f8c:	49ccb03a 	or	r6,r9,r7
10002f90:	1004c03a 	cmpne	r2,r2,zero
10002f94:	308cb03a 	or	r6,r6,r2
10002f98:	344d883a 	add	r6,r6,r17
10002f9c:	3463803a 	cmpltu	r17,r6,r17
10002fa0:	414b883a 	add	r5,r8,r5
10002fa4:	2c4b883a 	add	r5,r5,r17
10002fa8:	3023883a 	mov	r17,r6
10002fac:	2880202c 	andhi	r2,r5,128
10002fb0:	10002726 	beq	r2,zero,10003050 <__adddf3+0x32c>
10002fb4:	84000044 	addi	r16,r16,1
10002fb8:	0081ffc4 	movi	r2,2047
10002fbc:	8080ae26 	beq	r16,r2,10003278 <__adddf3+0x554>
10002fc0:	00bfe034 	movhi	r2,65408
10002fc4:	10bfffc4 	addi	r2,r2,-1
10002fc8:	288a703a 	and	r5,r5,r2
10002fcc:	880cd07a 	srli	r6,r17,1
10002fd0:	280897fa 	slli	r4,r5,31
10002fd4:	88c0004c 	andi	r3,r17,1
10002fd8:	30e2b03a 	or	r17,r6,r3
10002fdc:	280ad07a 	srli	r5,r5,1
10002fe0:	8922b03a 	or	r17,r17,r4
10002fe4:	003f6e06 	br	10002da0 <__alt_data_end+0xf8002da0>
10002fe8:	1148b03a 	or	r4,r2,r5
10002fec:	20003c26 	beq	r4,zero,100030e0 <__adddf3+0x3bc>
10002ff0:	29000234 	orhi	r4,r5,8
10002ff4:	01400434 	movhi	r5,16
10002ff8:	297fffc4 	addi	r5,r5,-1
10002ffc:	2148703a 	and	r4,r4,r5
10003000:	003f7f06 	br	10002e00 <__alt_data_end+0xf8002e00>
10003004:	18ffffc4 	addi	r3,r3,-1
10003008:	18004d1e 	bne	r3,zero,10003140 <__adddf3+0x41c>
1000300c:	898dc83a 	sub	r6,r17,r6
10003010:	89a3803a 	cmpltu	r17,r17,r6
10003014:	2a0bc83a 	sub	r5,r5,r8
10003018:	2c4bc83a 	sub	r5,r5,r17
1000301c:	3023883a 	mov	r17,r6
10003020:	003f9c06 	br	10002e94 <__alt_data_end+0xf8002e94>
10003024:	4184b03a 	or	r2,r8,r6
10003028:	103f5d26 	beq	r2,zero,10002da0 <__alt_data_end+0xf8002da0>
1000302c:	213fffc4 	addi	r4,r4,-1
10003030:	203fd926 	beq	r4,zero,10002f98 <__alt_data_end+0xf8002f98>
10003034:	0081ffc4 	movi	r2,2047
10003038:	80bfca1e 	bne	r16,r2,10002f64 <__alt_data_end+0xf8002f64>
1000303c:	003f5806 	br	10002da0 <__alt_data_end+0xf8002da0>
10003040:	10c8b03a 	or	r4,r2,r3
10003044:	20008b26 	beq	r4,zero,10003274 <__adddf3+0x550>
10003048:	100b883a 	mov	r5,r2
1000304c:	1823883a 	mov	r17,r3
10003050:	888001cc 	andi	r2,r17,7
10003054:	103f541e 	bne	r2,zero,10002da8 <__alt_data_end+0xf8002da8>
10003058:	9007883a 	mov	r3,r18
1000305c:	003fb006 	br	10002f20 <__alt_data_end+0xf8002f20>
10003060:	1800531e 	bne	r3,zero,100031b0 <__adddf3+0x48c>
10003064:	80800044 	addi	r2,r16,1
10003068:	1081ffcc 	andi	r2,r2,2047
1000306c:	00c00044 	movi	r3,1
10003070:	1880990e 	bge	r3,r2,100032d8 <__adddf3+0x5b4>
10003074:	8985c83a 	sub	r2,r17,r6
10003078:	8887803a 	cmpltu	r3,r17,r2
1000307c:	2a27c83a 	sub	r19,r5,r8
10003080:	98e7c83a 	sub	r19,r19,r3
10003084:	98c0202c 	andhi	r3,r19,128
10003088:	18006226 	beq	r3,zero,10003214 <__adddf3+0x4f0>
1000308c:	3463c83a 	sub	r17,r6,r17
10003090:	4151c83a 	sub	r8,r8,r5
10003094:	344d803a 	cmpltu	r6,r6,r17
10003098:	41a7c83a 	sub	r19,r8,r6
1000309c:	3825883a 	mov	r18,r7
100030a0:	983f821e 	bne	r19,zero,10002eac <__alt_data_end+0xf8002eac>
100030a4:	8809883a 	mov	r4,r17
100030a8:	0003fe80 	call	10003fe8 <__clzsi2>
100030ac:	10800804 	addi	r2,r2,32
100030b0:	10fffe04 	addi	r3,r2,-8
100030b4:	010007c4 	movi	r4,31
100030b8:	20ff810e 	bge	r4,r3,10002ec0 <__alt_data_end+0xf8002ec0>
100030bc:	14fff604 	addi	r19,r2,-40
100030c0:	8ce6983a 	sll	r19,r17,r19
100030c4:	0023883a 	mov	r17,zero
100030c8:	1c3f840e 	bge	r3,r16,10002edc <__alt_data_end+0xf8002edc>
100030cc:	017fe034 	movhi	r5,65408
100030d0:	297fffc4 	addi	r5,r5,-1
100030d4:	80e1c83a 	sub	r16,r16,r3
100030d8:	994a703a 	and	r5,r19,r5
100030dc:	003f3006 	br	10002da0 <__alt_data_end+0xf8002da0>
100030e0:	0009883a 	mov	r4,zero
100030e4:	0005883a 	mov	r2,zero
100030e8:	003f4506 	br	10002e00 <__alt_data_end+0xf8002e00>
100030ec:	418cb03a 	or	r6,r8,r6
100030f0:	300cc03a 	cmpne	r6,r6,zero
100030f4:	0007883a 	mov	r3,zero
100030f8:	003f6106 	br	10002e80 <__alt_data_end+0xf8002e80>
100030fc:	2000921e 	bne	r4,zero,10003348 <__adddf3+0x624>
10003100:	80800044 	addi	r2,r16,1
10003104:	11c1ffcc 	andi	r7,r2,2047
10003108:	01000044 	movi	r4,1
1000310c:	21c0610e 	bge	r4,r7,10003294 <__adddf3+0x570>
10003110:	0101ffc4 	movi	r4,2047
10003114:	1100a326 	beq	r2,r4,100033a4 <__adddf3+0x680>
10003118:	344d883a 	add	r6,r6,r17
1000311c:	3463803a 	cmpltu	r17,r6,r17
10003120:	414b883a 	add	r5,r8,r5
10003124:	2c4b883a 	add	r5,r5,r17
10003128:	282297fa 	slli	r17,r5,31
1000312c:	300cd07a 	srli	r6,r6,1
10003130:	280ad07a 	srli	r5,r5,1
10003134:	1021883a 	mov	r16,r2
10003138:	89a2b03a 	or	r17,r17,r6
1000313c:	003f1806 	br	10002da0 <__alt_data_end+0xf8002da0>
10003140:	0081ffc4 	movi	r2,2047
10003144:	80bf411e 	bne	r16,r2,10002e4c <__alt_data_end+0xf8002e4c>
10003148:	003f1506 	br	10002da0 <__alt_data_end+0xf8002da0>
1000314c:	80bff844 	addi	r2,r16,-31
10003150:	00c00804 	movi	r3,32
10003154:	9884d83a 	srl	r2,r19,r2
10003158:	28c04a26 	beq	r5,r3,10003284 <__adddf3+0x560>
1000315c:	00c00fc4 	movi	r3,63
10003160:	1c21c83a 	sub	r16,r3,r16
10003164:	9c26983a 	sll	r19,r19,r16
10003168:	9c62b03a 	or	r17,r19,r17
1000316c:	8822c03a 	cmpne	r17,r17,zero
10003170:	88a2b03a 	or	r17,r17,r2
10003174:	000b883a 	mov	r5,zero
10003178:	0021883a 	mov	r16,zero
1000317c:	003fb406 	br	10003050 <__alt_data_end+0xf8003050>
10003180:	18bff804 	addi	r2,r3,-32
10003184:	01000804 	movi	r4,32
10003188:	4084d83a 	srl	r2,r8,r2
1000318c:	19003f26 	beq	r3,r4,1000328c <__adddf3+0x568>
10003190:	01001004 	movi	r4,64
10003194:	20c7c83a 	sub	r3,r4,r3
10003198:	40d0983a 	sll	r8,r8,r3
1000319c:	418cb03a 	or	r6,r8,r6
100031a0:	300cc03a 	cmpne	r6,r6,zero
100031a4:	308cb03a 	or	r6,r6,r2
100031a8:	0007883a 	mov	r3,zero
100031ac:	003f3406 	br	10002e80 <__alt_data_end+0xf8002e80>
100031b0:	80002326 	beq	r16,zero,10003240 <__adddf3+0x51c>
100031b4:	0101ffc4 	movi	r4,2047
100031b8:	11005e26 	beq	r2,r4,10003334 <__adddf3+0x610>
100031bc:	00c7c83a 	sub	r3,zero,r3
100031c0:	29402034 	orhi	r5,r5,128
100031c4:	01000e04 	movi	r4,56
100031c8:	20c07216 	blt	r4,r3,10003394 <__adddf3+0x670>
100031cc:	010007c4 	movi	r4,31
100031d0:	20c0ce16 	blt	r4,r3,1000350c <__adddf3+0x7e8>
100031d4:	01000804 	movi	r4,32
100031d8:	20c9c83a 	sub	r4,r4,r3
100031dc:	2914983a 	sll	r10,r5,r4
100031e0:	88d2d83a 	srl	r9,r17,r3
100031e4:	8908983a 	sll	r4,r17,r4
100031e8:	28c6d83a 	srl	r3,r5,r3
100031ec:	5262b03a 	or	r17,r10,r9
100031f0:	2008c03a 	cmpne	r4,r4,zero
100031f4:	8922b03a 	or	r17,r17,r4
100031f8:	3463c83a 	sub	r17,r6,r17
100031fc:	40c7c83a 	sub	r3,r8,r3
10003200:	344d803a 	cmpltu	r6,r6,r17
10003204:	198bc83a 	sub	r5,r3,r6
10003208:	1021883a 	mov	r16,r2
1000320c:	3825883a 	mov	r18,r7
10003210:	003f2006 	br	10002e94 <__alt_data_end+0xf8002e94>
10003214:	9886b03a 	or	r3,r19,r2
10003218:	1800141e 	bne	r3,zero,1000326c <__adddf3+0x548>
1000321c:	0007883a 	mov	r3,zero
10003220:	000b883a 	mov	r5,zero
10003224:	0023883a 	mov	r17,zero
10003228:	0021883a 	mov	r16,zero
1000322c:	003f3c06 	br	10002f20 <__alt_data_end+0xf8002f20>
10003230:	418cb03a 	or	r6,r8,r6
10003234:	300cc03a 	cmpne	r6,r6,zero
10003238:	0011883a 	mov	r8,zero
1000323c:	003f5606 	br	10002f98 <__alt_data_end+0xf8002f98>
10003240:	2c48b03a 	or	r4,r5,r17
10003244:	20003b26 	beq	r4,zero,10003334 <__adddf3+0x610>
10003248:	00c6303a 	nor	r3,zero,r3
1000324c:	1800371e 	bne	r3,zero,1000332c <__adddf3+0x608>
10003250:	3463c83a 	sub	r17,r6,r17
10003254:	414bc83a 	sub	r5,r8,r5
10003258:	344d803a 	cmpltu	r6,r6,r17
1000325c:	298bc83a 	sub	r5,r5,r6
10003260:	1021883a 	mov	r16,r2
10003264:	3825883a 	mov	r18,r7
10003268:	003f0a06 	br	10002e94 <__alt_data_end+0xf8002e94>
1000326c:	1023883a 	mov	r17,r2
10003270:	003f0d06 	br	10002ea8 <__alt_data_end+0xf8002ea8>
10003274:	0007883a 	mov	r3,zero
10003278:	000b883a 	mov	r5,zero
1000327c:	0023883a 	mov	r17,zero
10003280:	003f2706 	br	10002f20 <__alt_data_end+0xf8002f20>
10003284:	0027883a 	mov	r19,zero
10003288:	003fb706 	br	10003168 <__alt_data_end+0xf8003168>
1000328c:	0011883a 	mov	r8,zero
10003290:	003fc206 	br	1000319c <__alt_data_end+0xf800319c>
10003294:	2c44b03a 	or	r2,r5,r17
10003298:	8000871e 	bne	r16,zero,100034b8 <__adddf3+0x794>
1000329c:	1000b126 	beq	r2,zero,10003564 <__adddf3+0x840>
100032a0:	4184b03a 	or	r2,r8,r6
100032a4:	103ebe26 	beq	r2,zero,10002da0 <__alt_data_end+0xf8002da0>
100032a8:	3445883a 	add	r2,r6,r17
100032ac:	1463803a 	cmpltu	r17,r2,r17
100032b0:	414b883a 	add	r5,r8,r5
100032b4:	2c4b883a 	add	r5,r5,r17
100032b8:	28c0202c 	andhi	r3,r5,128
100032bc:	1023883a 	mov	r17,r2
100032c0:	183f6326 	beq	r3,zero,10003050 <__alt_data_end+0xf8003050>
100032c4:	00bfe034 	movhi	r2,65408
100032c8:	10bfffc4 	addi	r2,r2,-1
100032cc:	2021883a 	mov	r16,r4
100032d0:	288a703a 	and	r5,r5,r2
100032d4:	003eb206 	br	10002da0 <__alt_data_end+0xf8002da0>
100032d8:	2c44b03a 	or	r2,r5,r17
100032dc:	8000251e 	bne	r16,zero,10003374 <__adddf3+0x650>
100032e0:	10004b1e 	bne	r2,zero,10003410 <__adddf3+0x6ec>
100032e4:	4184b03a 	or	r2,r8,r6
100032e8:	103fe226 	beq	r2,zero,10003274 <__alt_data_end+0xf8003274>
100032ec:	400b883a 	mov	r5,r8
100032f0:	3023883a 	mov	r17,r6
100032f4:	3825883a 	mov	r18,r7
100032f8:	003ea906 	br	10002da0 <__alt_data_end+0xf8002da0>
100032fc:	20bff804 	addi	r2,r4,-32
10003300:	01c00804 	movi	r7,32
10003304:	4084d83a 	srl	r2,r8,r2
10003308:	21c07e26 	beq	r4,r7,10003504 <__adddf3+0x7e0>
1000330c:	01c01004 	movi	r7,64
10003310:	3909c83a 	sub	r4,r7,r4
10003314:	4110983a 	sll	r8,r8,r4
10003318:	418cb03a 	or	r6,r8,r6
1000331c:	300cc03a 	cmpne	r6,r6,zero
10003320:	308cb03a 	or	r6,r6,r2
10003324:	0011883a 	mov	r8,zero
10003328:	003f1b06 	br	10002f98 <__alt_data_end+0xf8002f98>
1000332c:	0101ffc4 	movi	r4,2047
10003330:	113fa41e 	bne	r2,r4,100031c4 <__alt_data_end+0xf80031c4>
10003334:	400b883a 	mov	r5,r8
10003338:	3023883a 	mov	r17,r6
1000333c:	1021883a 	mov	r16,r2
10003340:	3825883a 	mov	r18,r7
10003344:	003e9606 	br	10002da0 <__alt_data_end+0xf8002da0>
10003348:	80001a1e 	bne	r16,zero,100033b4 <__adddf3+0x690>
1000334c:	2c4eb03a 	or	r7,r5,r17
10003350:	38005526 	beq	r7,zero,100034a8 <__adddf3+0x784>
10003354:	0108303a 	nor	r4,zero,r4
10003358:	2000511e 	bne	r4,zero,100034a0 <__adddf3+0x77c>
1000335c:	89a3883a 	add	r17,r17,r6
10003360:	414b883a 	add	r5,r8,r5
10003364:	898d803a 	cmpltu	r6,r17,r6
10003368:	298b883a 	add	r5,r5,r6
1000336c:	1021883a 	mov	r16,r2
10003370:	003f0e06 	br	10002fac <__alt_data_end+0xf8002fac>
10003374:	1000341e 	bne	r2,zero,10003448 <__adddf3+0x724>
10003378:	4184b03a 	or	r2,r8,r6
1000337c:	10006f26 	beq	r2,zero,1000353c <__adddf3+0x818>
10003380:	400b883a 	mov	r5,r8
10003384:	3023883a 	mov	r17,r6
10003388:	3825883a 	mov	r18,r7
1000338c:	0401ffc4 	movi	r16,2047
10003390:	003e8306 	br	10002da0 <__alt_data_end+0xf8002da0>
10003394:	2c62b03a 	or	r17,r5,r17
10003398:	8822c03a 	cmpne	r17,r17,zero
1000339c:	0007883a 	mov	r3,zero
100033a0:	003f9506 	br	100031f8 <__alt_data_end+0xf80031f8>
100033a4:	1021883a 	mov	r16,r2
100033a8:	000b883a 	mov	r5,zero
100033ac:	0023883a 	mov	r17,zero
100033b0:	003edb06 	br	10002f20 <__alt_data_end+0xf8002f20>
100033b4:	01c1ffc4 	movi	r7,2047
100033b8:	11c03b26 	beq	r2,r7,100034a8 <__adddf3+0x784>
100033bc:	0109c83a 	sub	r4,zero,r4
100033c0:	29402034 	orhi	r5,r5,128
100033c4:	01c00e04 	movi	r7,56
100033c8:	39006216 	blt	r7,r4,10003554 <__adddf3+0x830>
100033cc:	01c007c4 	movi	r7,31
100033d0:	39006b16 	blt	r7,r4,10003580 <__adddf3+0x85c>
100033d4:	01c00804 	movi	r7,32
100033d8:	390fc83a 	sub	r7,r7,r4
100033dc:	29d4983a 	sll	r10,r5,r7
100033e0:	8912d83a 	srl	r9,r17,r4
100033e4:	89ce983a 	sll	r7,r17,r7
100033e8:	2908d83a 	srl	r4,r5,r4
100033ec:	5262b03a 	or	r17,r10,r9
100033f0:	380ac03a 	cmpne	r5,r7,zero
100033f4:	8962b03a 	or	r17,r17,r5
100033f8:	89a3883a 	add	r17,r17,r6
100033fc:	2211883a 	add	r8,r4,r8
10003400:	898d803a 	cmpltu	r6,r17,r6
10003404:	418b883a 	add	r5,r8,r6
10003408:	1021883a 	mov	r16,r2
1000340c:	003ee706 	br	10002fac <__alt_data_end+0xf8002fac>
10003410:	4184b03a 	or	r2,r8,r6
10003414:	103e6226 	beq	r2,zero,10002da0 <__alt_data_end+0xf8002da0>
10003418:	8987c83a 	sub	r3,r17,r6
1000341c:	88c9803a 	cmpltu	r4,r17,r3
10003420:	2a05c83a 	sub	r2,r5,r8
10003424:	1105c83a 	sub	r2,r2,r4
10003428:	1100202c 	andhi	r4,r2,128
1000342c:	203f0426 	beq	r4,zero,10003040 <__alt_data_end+0xf8003040>
10003430:	3463c83a 	sub	r17,r6,r17
10003434:	414bc83a 	sub	r5,r8,r5
10003438:	344d803a 	cmpltu	r6,r6,r17
1000343c:	298bc83a 	sub	r5,r5,r6
10003440:	3825883a 	mov	r18,r7
10003444:	003e5606 	br	10002da0 <__alt_data_end+0xf8002da0>
10003448:	4184b03a 	or	r2,r8,r6
1000344c:	10002b26 	beq	r2,zero,100034fc <__adddf3+0x7d8>
10003450:	2804d0fa 	srli	r2,r5,3
10003454:	8822d0fa 	srli	r17,r17,3
10003458:	280a977a 	slli	r5,r5,29
1000345c:	10c0022c 	andhi	r3,r2,8
10003460:	2c62b03a 	or	r17,r5,r17
10003464:	18000826 	beq	r3,zero,10003488 <__adddf3+0x764>
10003468:	4008d0fa 	srli	r4,r8,3
1000346c:	20c0022c 	andhi	r3,r4,8
10003470:	1800051e 	bne	r3,zero,10003488 <__adddf3+0x764>
10003474:	300cd0fa 	srli	r6,r6,3
10003478:	4010977a 	slli	r8,r8,29
1000347c:	2005883a 	mov	r2,r4
10003480:	3825883a 	mov	r18,r7
10003484:	41a2b03a 	or	r17,r8,r6
10003488:	880ad77a 	srli	r5,r17,29
1000348c:	100490fa 	slli	r2,r2,3
10003490:	882290fa 	slli	r17,r17,3
10003494:	0401ffc4 	movi	r16,2047
10003498:	288ab03a 	or	r5,r5,r2
1000349c:	003e4006 	br	10002da0 <__alt_data_end+0xf8002da0>
100034a0:	01c1ffc4 	movi	r7,2047
100034a4:	11ffc71e 	bne	r2,r7,100033c4 <__alt_data_end+0xf80033c4>
100034a8:	400b883a 	mov	r5,r8
100034ac:	3023883a 	mov	r17,r6
100034b0:	1021883a 	mov	r16,r2
100034b4:	003e3a06 	br	10002da0 <__alt_data_end+0xf8002da0>
100034b8:	10002d26 	beq	r2,zero,10003570 <__adddf3+0x84c>
100034bc:	4184b03a 	or	r2,r8,r6
100034c0:	10000e26 	beq	r2,zero,100034fc <__adddf3+0x7d8>
100034c4:	2804d0fa 	srli	r2,r5,3
100034c8:	8822d0fa 	srli	r17,r17,3
100034cc:	280a977a 	slli	r5,r5,29
100034d0:	10c0022c 	andhi	r3,r2,8
100034d4:	2c62b03a 	or	r17,r5,r17
100034d8:	183feb26 	beq	r3,zero,10003488 <__alt_data_end+0xf8003488>
100034dc:	4008d0fa 	srli	r4,r8,3
100034e0:	20c0022c 	andhi	r3,r4,8
100034e4:	183fe81e 	bne	r3,zero,10003488 <__alt_data_end+0xf8003488>
100034e8:	300cd0fa 	srli	r6,r6,3
100034ec:	4010977a 	slli	r8,r8,29
100034f0:	2005883a 	mov	r2,r4
100034f4:	41a2b03a 	or	r17,r8,r6
100034f8:	003fe306 	br	10003488 <__alt_data_end+0xf8003488>
100034fc:	0401ffc4 	movi	r16,2047
10003500:	003e2706 	br	10002da0 <__alt_data_end+0xf8002da0>
10003504:	0011883a 	mov	r8,zero
10003508:	003f8306 	br	10003318 <__alt_data_end+0xf8003318>
1000350c:	193ff804 	addi	r4,r3,-32
10003510:	02400804 	movi	r9,32
10003514:	2908d83a 	srl	r4,r5,r4
10003518:	1a402526 	beq	r3,r9,100035b0 <__adddf3+0x88c>
1000351c:	02401004 	movi	r9,64
10003520:	48c7c83a 	sub	r3,r9,r3
10003524:	28ca983a 	sll	r5,r5,r3
10003528:	2c62b03a 	or	r17,r5,r17
1000352c:	8822c03a 	cmpne	r17,r17,zero
10003530:	8922b03a 	or	r17,r17,r4
10003534:	0007883a 	mov	r3,zero
10003538:	003f2f06 	br	100031f8 <__alt_data_end+0xf80031f8>
1000353c:	01402034 	movhi	r5,128
10003540:	0007883a 	mov	r3,zero
10003544:	297fffc4 	addi	r5,r5,-1
10003548:	047ffe04 	movi	r17,-8
1000354c:	0401ffc4 	movi	r16,2047
10003550:	003e7306 	br	10002f20 <__alt_data_end+0xf8002f20>
10003554:	2c62b03a 	or	r17,r5,r17
10003558:	8822c03a 	cmpne	r17,r17,zero
1000355c:	0009883a 	mov	r4,zero
10003560:	003fa506 	br	100033f8 <__alt_data_end+0xf80033f8>
10003564:	400b883a 	mov	r5,r8
10003568:	3023883a 	mov	r17,r6
1000356c:	003e0c06 	br	10002da0 <__alt_data_end+0xf8002da0>
10003570:	400b883a 	mov	r5,r8
10003574:	3023883a 	mov	r17,r6
10003578:	0401ffc4 	movi	r16,2047
1000357c:	003e0806 	br	10002da0 <__alt_data_end+0xf8002da0>
10003580:	21fff804 	addi	r7,r4,-32
10003584:	02400804 	movi	r9,32
10003588:	29ced83a 	srl	r7,r5,r7
1000358c:	22400a26 	beq	r4,r9,100035b8 <__adddf3+0x894>
10003590:	02401004 	movi	r9,64
10003594:	4909c83a 	sub	r4,r9,r4
10003598:	290a983a 	sll	r5,r5,r4
1000359c:	2c62b03a 	or	r17,r5,r17
100035a0:	8822c03a 	cmpne	r17,r17,zero
100035a4:	89e2b03a 	or	r17,r17,r7
100035a8:	0009883a 	mov	r4,zero
100035ac:	003f9206 	br	100033f8 <__alt_data_end+0xf80033f8>
100035b0:	000b883a 	mov	r5,zero
100035b4:	003fdc06 	br	10003528 <__alt_data_end+0xf8003528>
100035b8:	000b883a 	mov	r5,zero
100035bc:	003ff706 	br	1000359c <__alt_data_end+0xf800359c>

100035c0 <__subdf3>:
100035c0:	00c00434 	movhi	r3,16
100035c4:	18ffffc4 	addi	r3,r3,-1
100035c8:	defffb04 	addi	sp,sp,-20
100035cc:	28d2703a 	and	r9,r5,r3
100035d0:	3814d53a 	srli	r10,r7,20
100035d4:	38c6703a 	and	r3,r7,r3
100035d8:	3004d77a 	srli	r2,r6,29
100035dc:	dc800215 	stw	r18,8(sp)
100035e0:	dc000015 	stw	r16,0(sp)
100035e4:	2824d7fa 	srli	r18,r5,31
100035e8:	2820d53a 	srli	r16,r5,20
100035ec:	481290fa 	slli	r9,r9,3
100035f0:	200ad77a 	srli	r5,r4,29
100035f4:	180690fa 	slli	r3,r3,3
100035f8:	dc400115 	stw	r17,4(sp)
100035fc:	dfc00415 	stw	ra,16(sp)
10003600:	202290fa 	slli	r17,r4,3
10003604:	dcc00315 	stw	r19,12(sp)
10003608:	5281ffcc 	andi	r10,r10,2047
1000360c:	0101ffc4 	movi	r4,2047
10003610:	9011883a 	mov	r8,r18
10003614:	8401ffcc 	andi	r16,r16,2047
10003618:	94803fcc 	andi	r18,r18,255
1000361c:	494ab03a 	or	r5,r9,r5
10003620:	380ed7fa 	srli	r7,r7,31
10003624:	1886b03a 	or	r3,r3,r2
10003628:	300c90fa 	slli	r6,r6,3
1000362c:	51009026 	beq	r10,r4,10003870 <__subdf3+0x2b0>
10003630:	39c0005c 	xori	r7,r7,1
10003634:	8285c83a 	sub	r2,r16,r10
10003638:	91c06f26 	beq	r18,r7,100037f8 <__subdf3+0x238>
1000363c:	0080b10e 	bge	zero,r2,10003904 <__subdf3+0x344>
10003640:	50002a1e 	bne	r10,zero,100036ec <__subdf3+0x12c>
10003644:	1988b03a 	or	r4,r3,r6
10003648:	2000941e 	bne	r4,zero,1000389c <__subdf3+0x2dc>
1000364c:	888001cc 	andi	r2,r17,7
10003650:	10005b26 	beq	r2,zero,100037c0 <__subdf3+0x200>
10003654:	88c003cc 	andi	r3,r17,15
10003658:	00800104 	movi	r2,4
1000365c:	18805826 	beq	r3,r2,100037c0 <__subdf3+0x200>
10003660:	88c00104 	addi	r3,r17,4
10003664:	1c63803a 	cmpltu	r17,r3,r17
10003668:	2c4b883a 	add	r5,r5,r17
1000366c:	2880202c 	andhi	r2,r5,128
10003670:	9200004c 	andi	r8,r18,1
10003674:	1823883a 	mov	r17,r3
10003678:	10005426 	beq	r2,zero,100037cc <__subdf3+0x20c>
1000367c:	84000044 	addi	r16,r16,1
10003680:	0081ffc4 	movi	r2,2047
10003684:	8080bf26 	beq	r16,r2,10003984 <__subdf3+0x3c4>
10003688:	013fe034 	movhi	r4,65408
1000368c:	213fffc4 	addi	r4,r4,-1
10003690:	290a703a 	and	r5,r5,r4
10003694:	2804977a 	slli	r2,r5,29
10003698:	280a927a 	slli	r5,r5,9
1000369c:	8822d0fa 	srli	r17,r17,3
100036a0:	8401ffcc 	andi	r16,r16,2047
100036a4:	2808d33a 	srli	r4,r5,12
100036a8:	1444b03a 	or	r2,r2,r17
100036ac:	8401ffcc 	andi	r16,r16,2047
100036b0:	800a953a 	slli	r5,r16,20
100036b4:	40c03fcc 	andi	r3,r8,255
100036b8:	04000434 	movhi	r16,16
100036bc:	180697fa 	slli	r3,r3,31
100036c0:	843fffc4 	addi	r16,r16,-1
100036c4:	2420703a 	and	r16,r4,r16
100036c8:	8160b03a 	or	r16,r16,r5
100036cc:	80c6b03a 	or	r3,r16,r3
100036d0:	dfc00417 	ldw	ra,16(sp)
100036d4:	dcc00317 	ldw	r19,12(sp)
100036d8:	dc800217 	ldw	r18,8(sp)
100036dc:	dc400117 	ldw	r17,4(sp)
100036e0:	dc000017 	ldw	r16,0(sp)
100036e4:	dec00504 	addi	sp,sp,20
100036e8:	f800283a 	ret
100036ec:	0101ffc4 	movi	r4,2047
100036f0:	813fd626 	beq	r16,r4,1000364c <__alt_data_end+0xf800364c>
100036f4:	18c02034 	orhi	r3,r3,128
100036f8:	01000e04 	movi	r4,56
100036fc:	2080a416 	blt	r4,r2,10003990 <__subdf3+0x3d0>
10003700:	010007c4 	movi	r4,31
10003704:	2080c716 	blt	r4,r2,10003a24 <__subdf3+0x464>
10003708:	01000804 	movi	r4,32
1000370c:	2089c83a 	sub	r4,r4,r2
10003710:	1910983a 	sll	r8,r3,r4
10003714:	308ed83a 	srl	r7,r6,r2
10003718:	3108983a 	sll	r4,r6,r4
1000371c:	1884d83a 	srl	r2,r3,r2
10003720:	41ccb03a 	or	r6,r8,r7
10003724:	2008c03a 	cmpne	r4,r4,zero
10003728:	310cb03a 	or	r6,r6,r4
1000372c:	898dc83a 	sub	r6,r17,r6
10003730:	89a3803a 	cmpltu	r17,r17,r6
10003734:	288bc83a 	sub	r5,r5,r2
10003738:	2c4bc83a 	sub	r5,r5,r17
1000373c:	3023883a 	mov	r17,r6
10003740:	2880202c 	andhi	r2,r5,128
10003744:	10006b26 	beq	r2,zero,100038f4 <__subdf3+0x334>
10003748:	04c02034 	movhi	r19,128
1000374c:	9cffffc4 	addi	r19,r19,-1
10003750:	2ce6703a 	and	r19,r5,r19
10003754:	98007c26 	beq	r19,zero,10003948 <__subdf3+0x388>
10003758:	9809883a 	mov	r4,r19
1000375c:	0003fe80 	call	10003fe8 <__clzsi2>
10003760:	10fffe04 	addi	r3,r2,-8
10003764:	010007c4 	movi	r4,31
10003768:	20c07d16 	blt	r4,r3,10003960 <__subdf3+0x3a0>
1000376c:	01400a04 	movi	r5,40
10003770:	2885c83a 	sub	r2,r5,r2
10003774:	888ad83a 	srl	r5,r17,r2
10003778:	98e6983a 	sll	r19,r19,r3
1000377c:	88e2983a 	sll	r17,r17,r3
10003780:	2ce6b03a 	or	r19,r5,r19
10003784:	1c007a16 	blt	r3,r16,10003970 <__subdf3+0x3b0>
10003788:	1c21c83a 	sub	r16,r3,r16
1000378c:	81400044 	addi	r5,r16,1
10003790:	00c007c4 	movi	r3,31
10003794:	19409616 	blt	r3,r5,100039f0 <__subdf3+0x430>
10003798:	1c21c83a 	sub	r16,r3,r16
1000379c:	8c08983a 	sll	r4,r17,r16
100037a0:	8946d83a 	srl	r3,r17,r5
100037a4:	9c20983a 	sll	r16,r19,r16
100037a8:	2008c03a 	cmpne	r4,r4,zero
100037ac:	994ad83a 	srl	r5,r19,r5
100037b0:	1c06b03a 	or	r3,r3,r16
100037b4:	1922b03a 	or	r17,r3,r4
100037b8:	0021883a 	mov	r16,zero
100037bc:	003fa306 	br	1000364c <__alt_data_end+0xf800364c>
100037c0:	2880202c 	andhi	r2,r5,128
100037c4:	9200004c 	andi	r8,r18,1
100037c8:	103fac1e 	bne	r2,zero,1000367c <__alt_data_end+0xf800367c>
100037cc:	2804977a 	slli	r2,r5,29
100037d0:	8822d0fa 	srli	r17,r17,3
100037d4:	00c1ffc4 	movi	r3,2047
100037d8:	280ad0fa 	srli	r5,r5,3
100037dc:	1444b03a 	or	r2,r2,r17
100037e0:	80c02726 	beq	r16,r3,10003880 <__subdf3+0x2c0>
100037e4:	01000434 	movhi	r4,16
100037e8:	213fffc4 	addi	r4,r4,-1
100037ec:	80e0703a 	and	r16,r16,r3
100037f0:	2908703a 	and	r4,r5,r4
100037f4:	003fad06 	br	100036ac <__alt_data_end+0xf80036ac>
100037f8:	0080690e 	bge	zero,r2,100039a0 <__subdf3+0x3e0>
100037fc:	50002f26 	beq	r10,zero,100038bc <__subdf3+0x2fc>
10003800:	0101ffc4 	movi	r4,2047
10003804:	813f9126 	beq	r16,r4,1000364c <__alt_data_end+0xf800364c>
10003808:	18c02034 	orhi	r3,r3,128
1000380c:	01000e04 	movi	r4,56
10003810:	2080b00e 	bge	r4,r2,10003ad4 <__subdf3+0x514>
10003814:	198cb03a 	or	r6,r3,r6
10003818:	300ec03a 	cmpne	r7,r6,zero
1000381c:	0005883a 	mov	r2,zero
10003820:	3c4f883a 	add	r7,r7,r17
10003824:	3c63803a 	cmpltu	r17,r7,r17
10003828:	114b883a 	add	r5,r2,r5
1000382c:	2c4b883a 	add	r5,r5,r17
10003830:	3823883a 	mov	r17,r7
10003834:	2880202c 	andhi	r2,r5,128
10003838:	10002e26 	beq	r2,zero,100038f4 <__subdf3+0x334>
1000383c:	84000044 	addi	r16,r16,1
10003840:	0081ffc4 	movi	r2,2047
10003844:	8080de26 	beq	r16,r2,10003bc0 <__subdf3+0x600>
10003848:	00bfe034 	movhi	r2,65408
1000384c:	10bfffc4 	addi	r2,r2,-1
10003850:	288a703a 	and	r5,r5,r2
10003854:	880cd07a 	srli	r6,r17,1
10003858:	280897fa 	slli	r4,r5,31
1000385c:	88c0004c 	andi	r3,r17,1
10003860:	30e2b03a 	or	r17,r6,r3
10003864:	280ad07a 	srli	r5,r5,1
10003868:	8922b03a 	or	r17,r17,r4
1000386c:	003f7706 	br	1000364c <__alt_data_end+0xf800364c>
10003870:	1984b03a 	or	r2,r3,r6
10003874:	103f6e26 	beq	r2,zero,10003630 <__alt_data_end+0xf8003630>
10003878:	39c03fcc 	andi	r7,r7,255
1000387c:	003f6d06 	br	10003634 <__alt_data_end+0xf8003634>
10003880:	1146b03a 	or	r3,r2,r5
10003884:	18003f26 	beq	r3,zero,10003984 <__subdf3+0x3c4>
10003888:	00c00434 	movhi	r3,16
1000388c:	29000234 	orhi	r4,r5,8
10003890:	18ffffc4 	addi	r3,r3,-1
10003894:	20c8703a 	and	r4,r4,r3
10003898:	003f8406 	br	100036ac <__alt_data_end+0xf80036ac>
1000389c:	10bfffc4 	addi	r2,r2,-1
100038a0:	1000501e 	bne	r2,zero,100039e4 <__subdf3+0x424>
100038a4:	898fc83a 	sub	r7,r17,r6
100038a8:	89e3803a 	cmpltu	r17,r17,r7
100038ac:	28cbc83a 	sub	r5,r5,r3
100038b0:	2c4bc83a 	sub	r5,r5,r17
100038b4:	3823883a 	mov	r17,r7
100038b8:	003fa106 	br	10003740 <__alt_data_end+0xf8003740>
100038bc:	1988b03a 	or	r4,r3,r6
100038c0:	203f6226 	beq	r4,zero,1000364c <__alt_data_end+0xf800364c>
100038c4:	10bfffc4 	addi	r2,r2,-1
100038c8:	10009b1e 	bne	r2,zero,10003b38 <__subdf3+0x578>
100038cc:	344d883a 	add	r6,r6,r17
100038d0:	3463803a 	cmpltu	r17,r6,r17
100038d4:	194b883a 	add	r5,r3,r5
100038d8:	2c4b883a 	add	r5,r5,r17
100038dc:	3023883a 	mov	r17,r6
100038e0:	003fd406 	br	10003834 <__alt_data_end+0xf8003834>
100038e4:	1106b03a 	or	r3,r2,r4
100038e8:	1800b426 	beq	r3,zero,10003bbc <__subdf3+0x5fc>
100038ec:	100b883a 	mov	r5,r2
100038f0:	2023883a 	mov	r17,r4
100038f4:	888001cc 	andi	r2,r17,7
100038f8:	103f561e 	bne	r2,zero,10003654 <__alt_data_end+0xf8003654>
100038fc:	9200004c 	andi	r8,r18,1
10003900:	003fb206 	br	100037cc <__alt_data_end+0xf80037cc>
10003904:	1000531e 	bne	r2,zero,10003a54 <__subdf3+0x494>
10003908:	80800044 	addi	r2,r16,1
1000390c:	1081ffcc 	andi	r2,r2,2047
10003910:	01000044 	movi	r4,1
10003914:	2080a00e 	bge	r4,r2,10003b98 <__subdf3+0x5d8>
10003918:	8985c83a 	sub	r2,r17,r6
1000391c:	8889803a 	cmpltu	r4,r17,r2
10003920:	28e7c83a 	sub	r19,r5,r3
10003924:	9927c83a 	sub	r19,r19,r4
10003928:	9900202c 	andhi	r4,r19,128
1000392c:	20006226 	beq	r4,zero,10003ab8 <__subdf3+0x4f8>
10003930:	3463c83a 	sub	r17,r6,r17
10003934:	194bc83a 	sub	r5,r3,r5
10003938:	344d803a 	cmpltu	r6,r6,r17
1000393c:	29a7c83a 	sub	r19,r5,r6
10003940:	3825883a 	mov	r18,r7
10003944:	983f841e 	bne	r19,zero,10003758 <__alt_data_end+0xf8003758>
10003948:	8809883a 	mov	r4,r17
1000394c:	0003fe80 	call	10003fe8 <__clzsi2>
10003950:	10800804 	addi	r2,r2,32
10003954:	10fffe04 	addi	r3,r2,-8
10003958:	010007c4 	movi	r4,31
1000395c:	20ff830e 	bge	r4,r3,1000376c <__alt_data_end+0xf800376c>
10003960:	14fff604 	addi	r19,r2,-40
10003964:	8ce6983a 	sll	r19,r17,r19
10003968:	0023883a 	mov	r17,zero
1000396c:	1c3f860e 	bge	r3,r16,10003788 <__alt_data_end+0xf8003788>
10003970:	017fe034 	movhi	r5,65408
10003974:	297fffc4 	addi	r5,r5,-1
10003978:	80e1c83a 	sub	r16,r16,r3
1000397c:	994a703a 	and	r5,r19,r5
10003980:	003f3206 	br	1000364c <__alt_data_end+0xf800364c>
10003984:	0009883a 	mov	r4,zero
10003988:	0005883a 	mov	r2,zero
1000398c:	003f4706 	br	100036ac <__alt_data_end+0xf80036ac>
10003990:	198cb03a 	or	r6,r3,r6
10003994:	300cc03a 	cmpne	r6,r6,zero
10003998:	0005883a 	mov	r2,zero
1000399c:	003f6306 	br	1000372c <__alt_data_end+0xf800372c>
100039a0:	10009d1e 	bne	r2,zero,10003c18 <__subdf3+0x658>
100039a4:	81c00044 	addi	r7,r16,1
100039a8:	3881ffcc 	andi	r2,r7,2047
100039ac:	02400044 	movi	r9,1
100039b0:	4880680e 	bge	r9,r2,10003b54 <__subdf3+0x594>
100039b4:	0081ffc4 	movi	r2,2047
100039b8:	3880ae26 	beq	r7,r2,10003c74 <__subdf3+0x6b4>
100039bc:	344d883a 	add	r6,r6,r17
100039c0:	3463803a 	cmpltu	r17,r6,r17
100039c4:	194b883a 	add	r5,r3,r5
100039c8:	2c4b883a 	add	r5,r5,r17
100039cc:	282297fa 	slli	r17,r5,31
100039d0:	300cd07a 	srli	r6,r6,1
100039d4:	280ad07a 	srli	r5,r5,1
100039d8:	3821883a 	mov	r16,r7
100039dc:	89a2b03a 	or	r17,r17,r6
100039e0:	003f1a06 	br	1000364c <__alt_data_end+0xf800364c>
100039e4:	0101ffc4 	movi	r4,2047
100039e8:	813f431e 	bne	r16,r4,100036f8 <__alt_data_end+0xf80036f8>
100039ec:	003f1706 	br	1000364c <__alt_data_end+0xf800364c>
100039f0:	80bff844 	addi	r2,r16,-31
100039f4:	00c00804 	movi	r3,32
100039f8:	9884d83a 	srl	r2,r19,r2
100039fc:	28c05126 	beq	r5,r3,10003b44 <__subdf3+0x584>
10003a00:	00c00fc4 	movi	r3,63
10003a04:	1c21c83a 	sub	r16,r3,r16
10003a08:	9c26983a 	sll	r19,r19,r16
10003a0c:	9c62b03a 	or	r17,r19,r17
10003a10:	8822c03a 	cmpne	r17,r17,zero
10003a14:	88a2b03a 	or	r17,r17,r2
10003a18:	000b883a 	mov	r5,zero
10003a1c:	0021883a 	mov	r16,zero
10003a20:	003fb406 	br	100038f4 <__alt_data_end+0xf80038f4>
10003a24:	113ff804 	addi	r4,r2,-32
10003a28:	01c00804 	movi	r7,32
10003a2c:	1908d83a 	srl	r4,r3,r4
10003a30:	11c04626 	beq	r2,r7,10003b4c <__subdf3+0x58c>
10003a34:	01c01004 	movi	r7,64
10003a38:	3885c83a 	sub	r2,r7,r2
10003a3c:	1884983a 	sll	r2,r3,r2
10003a40:	118cb03a 	or	r6,r2,r6
10003a44:	300cc03a 	cmpne	r6,r6,zero
10003a48:	310cb03a 	or	r6,r6,r4
10003a4c:	0005883a 	mov	r2,zero
10003a50:	003f3606 	br	1000372c <__alt_data_end+0xf800372c>
10003a54:	80002b26 	beq	r16,zero,10003b04 <__subdf3+0x544>
10003a58:	0101ffc4 	movi	r4,2047
10003a5c:	51006926 	beq	r10,r4,10003c04 <__subdf3+0x644>
10003a60:	0085c83a 	sub	r2,zero,r2
10003a64:	29402034 	orhi	r5,r5,128
10003a68:	01000e04 	movi	r4,56
10003a6c:	20807d16 	blt	r4,r2,10003c64 <__subdf3+0x6a4>
10003a70:	010007c4 	movi	r4,31
10003a74:	2080d916 	blt	r4,r2,10003ddc <__subdf3+0x81c>
10003a78:	01000804 	movi	r4,32
10003a7c:	2089c83a 	sub	r4,r4,r2
10003a80:	2912983a 	sll	r9,r5,r4
10003a84:	8890d83a 	srl	r8,r17,r2
10003a88:	8908983a 	sll	r4,r17,r4
10003a8c:	2884d83a 	srl	r2,r5,r2
10003a90:	4a22b03a 	or	r17,r9,r8
10003a94:	2008c03a 	cmpne	r4,r4,zero
10003a98:	8922b03a 	or	r17,r17,r4
10003a9c:	3463c83a 	sub	r17,r6,r17
10003aa0:	1885c83a 	sub	r2,r3,r2
10003aa4:	344d803a 	cmpltu	r6,r6,r17
10003aa8:	118bc83a 	sub	r5,r2,r6
10003aac:	5021883a 	mov	r16,r10
10003ab0:	3825883a 	mov	r18,r7
10003ab4:	003f2206 	br	10003740 <__alt_data_end+0xf8003740>
10003ab8:	9886b03a 	or	r3,r19,r2
10003abc:	18001c1e 	bne	r3,zero,10003b30 <__subdf3+0x570>
10003ac0:	0011883a 	mov	r8,zero
10003ac4:	000b883a 	mov	r5,zero
10003ac8:	0023883a 	mov	r17,zero
10003acc:	0021883a 	mov	r16,zero
10003ad0:	003f3e06 	br	100037cc <__alt_data_end+0xf80037cc>
10003ad4:	010007c4 	movi	r4,31
10003ad8:	20803c16 	blt	r4,r2,10003bcc <__subdf3+0x60c>
10003adc:	01000804 	movi	r4,32
10003ae0:	2089c83a 	sub	r4,r4,r2
10003ae4:	1912983a 	sll	r9,r3,r4
10003ae8:	308ed83a 	srl	r7,r6,r2
10003aec:	3108983a 	sll	r4,r6,r4
10003af0:	1884d83a 	srl	r2,r3,r2
10003af4:	49ceb03a 	or	r7,r9,r7
10003af8:	2008c03a 	cmpne	r4,r4,zero
10003afc:	390eb03a 	or	r7,r7,r4
10003b00:	003f4706 	br	10003820 <__alt_data_end+0xf8003820>
10003b04:	2c48b03a 	or	r4,r5,r17
10003b08:	20003e26 	beq	r4,zero,10003c04 <__subdf3+0x644>
10003b0c:	0084303a 	nor	r2,zero,r2
10003b10:	10003a1e 	bne	r2,zero,10003bfc <__subdf3+0x63c>
10003b14:	3463c83a 	sub	r17,r6,r17
10003b18:	194bc83a 	sub	r5,r3,r5
10003b1c:	344d803a 	cmpltu	r6,r6,r17
10003b20:	298bc83a 	sub	r5,r5,r6
10003b24:	5021883a 	mov	r16,r10
10003b28:	3825883a 	mov	r18,r7
10003b2c:	003f0406 	br	10003740 <__alt_data_end+0xf8003740>
10003b30:	1023883a 	mov	r17,r2
10003b34:	003f0706 	br	10003754 <__alt_data_end+0xf8003754>
10003b38:	0101ffc4 	movi	r4,2047
10003b3c:	813f331e 	bne	r16,r4,1000380c <__alt_data_end+0xf800380c>
10003b40:	003ec206 	br	1000364c <__alt_data_end+0xf800364c>
10003b44:	0027883a 	mov	r19,zero
10003b48:	003fb006 	br	10003a0c <__alt_data_end+0xf8003a0c>
10003b4c:	0005883a 	mov	r2,zero
10003b50:	003fbb06 	br	10003a40 <__alt_data_end+0xf8003a40>
10003b54:	2c44b03a 	or	r2,r5,r17
10003b58:	80008b1e 	bne	r16,zero,10003d88 <__subdf3+0x7c8>
10003b5c:	1000b526 	beq	r2,zero,10003e34 <__subdf3+0x874>
10003b60:	1984b03a 	or	r2,r3,r6
10003b64:	103eb926 	beq	r2,zero,1000364c <__alt_data_end+0xf800364c>
10003b68:	3449883a 	add	r4,r6,r17
10003b6c:	2463803a 	cmpltu	r17,r4,r17
10003b70:	194b883a 	add	r5,r3,r5
10003b74:	2c4b883a 	add	r5,r5,r17
10003b78:	2880202c 	andhi	r2,r5,128
10003b7c:	2023883a 	mov	r17,r4
10003b80:	103f5c26 	beq	r2,zero,100038f4 <__alt_data_end+0xf80038f4>
10003b84:	00bfe034 	movhi	r2,65408
10003b88:	10bfffc4 	addi	r2,r2,-1
10003b8c:	4821883a 	mov	r16,r9
10003b90:	288a703a 	and	r5,r5,r2
10003b94:	003ead06 	br	1000364c <__alt_data_end+0xf800364c>
10003b98:	2c44b03a 	or	r2,r5,r17
10003b9c:	8000291e 	bne	r16,zero,10003c44 <__subdf3+0x684>
10003ba0:	10004f1e 	bne	r2,zero,10003ce0 <__subdf3+0x720>
10003ba4:	1984b03a 	or	r2,r3,r6
10003ba8:	10000426 	beq	r2,zero,10003bbc <__subdf3+0x5fc>
10003bac:	180b883a 	mov	r5,r3
10003bb0:	3023883a 	mov	r17,r6
10003bb4:	3825883a 	mov	r18,r7
10003bb8:	003ea406 	br	1000364c <__alt_data_end+0xf800364c>
10003bbc:	0011883a 	mov	r8,zero
10003bc0:	000b883a 	mov	r5,zero
10003bc4:	0023883a 	mov	r17,zero
10003bc8:	003f0006 	br	100037cc <__alt_data_end+0xf80037cc>
10003bcc:	11fff804 	addi	r7,r2,-32
10003bd0:	19c8d83a 	srl	r4,r3,r7
10003bd4:	01c00804 	movi	r7,32
10003bd8:	11c07e26 	beq	r2,r7,10003dd4 <__subdf3+0x814>
10003bdc:	01c01004 	movi	r7,64
10003be0:	3885c83a 	sub	r2,r7,r2
10003be4:	1884983a 	sll	r2,r3,r2
10003be8:	118cb03a 	or	r6,r2,r6
10003bec:	300ec03a 	cmpne	r7,r6,zero
10003bf0:	390eb03a 	or	r7,r7,r4
10003bf4:	0005883a 	mov	r2,zero
10003bf8:	003f0906 	br	10003820 <__alt_data_end+0xf8003820>
10003bfc:	0101ffc4 	movi	r4,2047
10003c00:	513f991e 	bne	r10,r4,10003a68 <__alt_data_end+0xf8003a68>
10003c04:	180b883a 	mov	r5,r3
10003c08:	3023883a 	mov	r17,r6
10003c0c:	5021883a 	mov	r16,r10
10003c10:	3825883a 	mov	r18,r7
10003c14:	003e8d06 	br	1000364c <__alt_data_end+0xf800364c>
10003c18:	80001a1e 	bne	r16,zero,10003c84 <__subdf3+0x6c4>
10003c1c:	2c48b03a 	or	r4,r5,r17
10003c20:	20005526 	beq	r4,zero,10003d78 <__subdf3+0x7b8>
10003c24:	0084303a 	nor	r2,zero,r2
10003c28:	1000511e 	bne	r2,zero,10003d70 <__subdf3+0x7b0>
10003c2c:	89a3883a 	add	r17,r17,r6
10003c30:	194b883a 	add	r5,r3,r5
10003c34:	898d803a 	cmpltu	r6,r17,r6
10003c38:	298b883a 	add	r5,r5,r6
10003c3c:	5021883a 	mov	r16,r10
10003c40:	003efc06 	br	10003834 <__alt_data_end+0xf8003834>
10003c44:	1000341e 	bne	r2,zero,10003d18 <__subdf3+0x758>
10003c48:	1984b03a 	or	r2,r3,r6
10003c4c:	10006f26 	beq	r2,zero,10003e0c <__subdf3+0x84c>
10003c50:	180b883a 	mov	r5,r3
10003c54:	3023883a 	mov	r17,r6
10003c58:	3825883a 	mov	r18,r7
10003c5c:	0401ffc4 	movi	r16,2047
10003c60:	003e7a06 	br	1000364c <__alt_data_end+0xf800364c>
10003c64:	2c62b03a 	or	r17,r5,r17
10003c68:	8822c03a 	cmpne	r17,r17,zero
10003c6c:	0005883a 	mov	r2,zero
10003c70:	003f8a06 	br	10003a9c <__alt_data_end+0xf8003a9c>
10003c74:	3821883a 	mov	r16,r7
10003c78:	000b883a 	mov	r5,zero
10003c7c:	0023883a 	mov	r17,zero
10003c80:	003ed206 	br	100037cc <__alt_data_end+0xf80037cc>
10003c84:	0101ffc4 	movi	r4,2047
10003c88:	51003b26 	beq	r10,r4,10003d78 <__subdf3+0x7b8>
10003c8c:	0085c83a 	sub	r2,zero,r2
10003c90:	29402034 	orhi	r5,r5,128
10003c94:	01000e04 	movi	r4,56
10003c98:	20806216 	blt	r4,r2,10003e24 <__subdf3+0x864>
10003c9c:	010007c4 	movi	r4,31
10003ca0:	20806b16 	blt	r4,r2,10003e50 <__subdf3+0x890>
10003ca4:	01000804 	movi	r4,32
10003ca8:	2089c83a 	sub	r4,r4,r2
10003cac:	2912983a 	sll	r9,r5,r4
10003cb0:	888ed83a 	srl	r7,r17,r2
10003cb4:	8908983a 	sll	r4,r17,r4
10003cb8:	2884d83a 	srl	r2,r5,r2
10003cbc:	49e2b03a 	or	r17,r9,r7
10003cc0:	2008c03a 	cmpne	r4,r4,zero
10003cc4:	8922b03a 	or	r17,r17,r4
10003cc8:	89a3883a 	add	r17,r17,r6
10003ccc:	10c5883a 	add	r2,r2,r3
10003cd0:	898d803a 	cmpltu	r6,r17,r6
10003cd4:	118b883a 	add	r5,r2,r6
10003cd8:	5021883a 	mov	r16,r10
10003cdc:	003ed506 	br	10003834 <__alt_data_end+0xf8003834>
10003ce0:	1984b03a 	or	r2,r3,r6
10003ce4:	103e5926 	beq	r2,zero,1000364c <__alt_data_end+0xf800364c>
10003ce8:	8989c83a 	sub	r4,r17,r6
10003cec:	8911803a 	cmpltu	r8,r17,r4
10003cf0:	28c5c83a 	sub	r2,r5,r3
10003cf4:	1205c83a 	sub	r2,r2,r8
10003cf8:	1200202c 	andhi	r8,r2,128
10003cfc:	403ef926 	beq	r8,zero,100038e4 <__alt_data_end+0xf80038e4>
10003d00:	3463c83a 	sub	r17,r6,r17
10003d04:	194bc83a 	sub	r5,r3,r5
10003d08:	344d803a 	cmpltu	r6,r6,r17
10003d0c:	298bc83a 	sub	r5,r5,r6
10003d10:	3825883a 	mov	r18,r7
10003d14:	003e4d06 	br	1000364c <__alt_data_end+0xf800364c>
10003d18:	1984b03a 	or	r2,r3,r6
10003d1c:	10002b26 	beq	r2,zero,10003dcc <__subdf3+0x80c>
10003d20:	2808d0fa 	srli	r4,r5,3
10003d24:	8822d0fa 	srli	r17,r17,3
10003d28:	280a977a 	slli	r5,r5,29
10003d2c:	2080022c 	andhi	r2,r4,8
10003d30:	2c62b03a 	or	r17,r5,r17
10003d34:	10000826 	beq	r2,zero,10003d58 <__subdf3+0x798>
10003d38:	1810d0fa 	srli	r8,r3,3
10003d3c:	4080022c 	andhi	r2,r8,8
10003d40:	1000051e 	bne	r2,zero,10003d58 <__subdf3+0x798>
10003d44:	300cd0fa 	srli	r6,r6,3
10003d48:	1804977a 	slli	r2,r3,29
10003d4c:	4009883a 	mov	r4,r8
10003d50:	3825883a 	mov	r18,r7
10003d54:	11a2b03a 	or	r17,r2,r6
10003d58:	880ad77a 	srli	r5,r17,29
10003d5c:	200890fa 	slli	r4,r4,3
10003d60:	882290fa 	slli	r17,r17,3
10003d64:	0401ffc4 	movi	r16,2047
10003d68:	290ab03a 	or	r5,r5,r4
10003d6c:	003e3706 	br	1000364c <__alt_data_end+0xf800364c>
10003d70:	0101ffc4 	movi	r4,2047
10003d74:	513fc71e 	bne	r10,r4,10003c94 <__alt_data_end+0xf8003c94>
10003d78:	180b883a 	mov	r5,r3
10003d7c:	3023883a 	mov	r17,r6
10003d80:	5021883a 	mov	r16,r10
10003d84:	003e3106 	br	1000364c <__alt_data_end+0xf800364c>
10003d88:	10002d26 	beq	r2,zero,10003e40 <__subdf3+0x880>
10003d8c:	1984b03a 	or	r2,r3,r6
10003d90:	10000e26 	beq	r2,zero,10003dcc <__subdf3+0x80c>
10003d94:	2808d0fa 	srli	r4,r5,3
10003d98:	8822d0fa 	srli	r17,r17,3
10003d9c:	280a977a 	slli	r5,r5,29
10003da0:	2080022c 	andhi	r2,r4,8
10003da4:	2c62b03a 	or	r17,r5,r17
10003da8:	103feb26 	beq	r2,zero,10003d58 <__alt_data_end+0xf8003d58>
10003dac:	180ed0fa 	srli	r7,r3,3
10003db0:	3880022c 	andhi	r2,r7,8
10003db4:	103fe81e 	bne	r2,zero,10003d58 <__alt_data_end+0xf8003d58>
10003db8:	300cd0fa 	srli	r6,r6,3
10003dbc:	1804977a 	slli	r2,r3,29
10003dc0:	3809883a 	mov	r4,r7
10003dc4:	11a2b03a 	or	r17,r2,r6
10003dc8:	003fe306 	br	10003d58 <__alt_data_end+0xf8003d58>
10003dcc:	0401ffc4 	movi	r16,2047
10003dd0:	003e1e06 	br	1000364c <__alt_data_end+0xf800364c>
10003dd4:	0005883a 	mov	r2,zero
10003dd8:	003f8306 	br	10003be8 <__alt_data_end+0xf8003be8>
10003ddc:	113ff804 	addi	r4,r2,-32
10003de0:	02000804 	movi	r8,32
10003de4:	2908d83a 	srl	r4,r5,r4
10003de8:	12002526 	beq	r2,r8,10003e80 <__subdf3+0x8c0>
10003dec:	02001004 	movi	r8,64
10003df0:	4085c83a 	sub	r2,r8,r2
10003df4:	288a983a 	sll	r5,r5,r2
10003df8:	2c62b03a 	or	r17,r5,r17
10003dfc:	8822c03a 	cmpne	r17,r17,zero
10003e00:	8922b03a 	or	r17,r17,r4
10003e04:	0005883a 	mov	r2,zero
10003e08:	003f2406 	br	10003a9c <__alt_data_end+0xf8003a9c>
10003e0c:	01402034 	movhi	r5,128
10003e10:	0011883a 	mov	r8,zero
10003e14:	297fffc4 	addi	r5,r5,-1
10003e18:	047ffe04 	movi	r17,-8
10003e1c:	0401ffc4 	movi	r16,2047
10003e20:	003e6a06 	br	100037cc <__alt_data_end+0xf80037cc>
10003e24:	2c62b03a 	or	r17,r5,r17
10003e28:	8822c03a 	cmpne	r17,r17,zero
10003e2c:	0005883a 	mov	r2,zero
10003e30:	003fa506 	br	10003cc8 <__alt_data_end+0xf8003cc8>
10003e34:	180b883a 	mov	r5,r3
10003e38:	3023883a 	mov	r17,r6
10003e3c:	003e0306 	br	1000364c <__alt_data_end+0xf800364c>
10003e40:	180b883a 	mov	r5,r3
10003e44:	3023883a 	mov	r17,r6
10003e48:	0401ffc4 	movi	r16,2047
10003e4c:	003dff06 	br	1000364c <__alt_data_end+0xf800364c>
10003e50:	113ff804 	addi	r4,r2,-32
10003e54:	01c00804 	movi	r7,32
10003e58:	2908d83a 	srl	r4,r5,r4
10003e5c:	11c00a26 	beq	r2,r7,10003e88 <__subdf3+0x8c8>
10003e60:	01c01004 	movi	r7,64
10003e64:	3885c83a 	sub	r2,r7,r2
10003e68:	288a983a 	sll	r5,r5,r2
10003e6c:	2c62b03a 	or	r17,r5,r17
10003e70:	8822c03a 	cmpne	r17,r17,zero
10003e74:	8922b03a 	or	r17,r17,r4
10003e78:	0005883a 	mov	r2,zero
10003e7c:	003f9206 	br	10003cc8 <__alt_data_end+0xf8003cc8>
10003e80:	000b883a 	mov	r5,zero
10003e84:	003fdc06 	br	10003df8 <__alt_data_end+0xf8003df8>
10003e88:	000b883a 	mov	r5,zero
10003e8c:	003ff706 	br	10003e6c <__alt_data_end+0xf8003e6c>

10003e90 <__fixdfsi>:
10003e90:	2806d53a 	srli	r3,r5,20
10003e94:	00800434 	movhi	r2,16
10003e98:	10bfffc4 	addi	r2,r2,-1
10003e9c:	18c1ffcc 	andi	r3,r3,2047
10003ea0:	0180ff84 	movi	r6,1022
10003ea4:	2884703a 	and	r2,r5,r2
10003ea8:	280ad7fa 	srli	r5,r5,31
10003eac:	30c0130e 	bge	r6,r3,10003efc <__fixdfsi+0x6c>
10003eb0:	01810744 	movi	r6,1053
10003eb4:	30c00d16 	blt	r6,r3,10003eec <__fixdfsi+0x5c>
10003eb8:	01810cc4 	movi	r6,1075
10003ebc:	30cdc83a 	sub	r6,r6,r3
10003ec0:	01c007c4 	movi	r7,31
10003ec4:	10800434 	orhi	r2,r2,16
10003ec8:	39800e0e 	bge	r7,r6,10003f04 <__fixdfsi+0x74>
10003ecc:	010104c4 	movi	r4,1043
10003ed0:	20c7c83a 	sub	r3,r4,r3
10003ed4:	10c6d83a 	srl	r3,r2,r3
10003ed8:	29403fcc 	andi	r5,r5,255
10003edc:	0145c83a 	sub	r2,zero,r5
10003ee0:	1884f03a 	xor	r2,r3,r2
10003ee4:	1145883a 	add	r2,r2,r5
10003ee8:	f800283a 	ret
10003eec:	00a00034 	movhi	r2,32768
10003ef0:	10bfffc4 	addi	r2,r2,-1
10003ef4:	2885883a 	add	r2,r5,r2
10003ef8:	f800283a 	ret
10003efc:	0005883a 	mov	r2,zero
10003f00:	f800283a 	ret
10003f04:	18fefb44 	addi	r3,r3,-1043
10003f08:	2188d83a 	srl	r4,r4,r6
10003f0c:	10c6983a 	sll	r3,r2,r3
10003f10:	20c6b03a 	or	r3,r4,r3
10003f14:	003ff006 	br	10003ed8 <__alt_data_end+0xf8003ed8>

10003f18 <__floatsidf>:
10003f18:	defffd04 	addi	sp,sp,-12
10003f1c:	dc400115 	stw	r17,4(sp)
10003f20:	dfc00215 	stw	ra,8(sp)
10003f24:	dc000015 	stw	r16,0(sp)
10003f28:	2023883a 	mov	r17,r4
10003f2c:	20001426 	beq	r4,zero,10003f80 <__floatsidf+0x68>
10003f30:	2020d7fa 	srli	r16,r4,31
10003f34:	80000126 	beq	r16,zero,10003f3c <__floatsidf+0x24>
10003f38:	0123c83a 	sub	r17,zero,r4
10003f3c:	8809883a 	mov	r4,r17
10003f40:	0003fe80 	call	10003fe8 <__clzsi2>
10003f44:	01410784 	movi	r5,1054
10003f48:	00c00284 	movi	r3,10
10003f4c:	288bc83a 	sub	r5,r5,r2
10003f50:	18801c16 	blt	r3,r2,10003fc4 <__floatsidf+0xac>
10003f54:	00c002c4 	movi	r3,11
10003f58:	1887c83a 	sub	r3,r3,r2
10003f5c:	88c8d83a 	srl	r4,r17,r3
10003f60:	00c00434 	movhi	r3,16
10003f64:	18ffffc4 	addi	r3,r3,-1
10003f68:	10800544 	addi	r2,r2,21
10003f6c:	20c8703a 	and	r4,r4,r3
10003f70:	8884983a 	sll	r2,r17,r2
10003f74:	28c1ffcc 	andi	r3,r5,2047
10003f78:	800d883a 	mov	r6,r16
10003f7c:	00000406 	br	10003f90 <__floatsidf+0x78>
10003f80:	000d883a 	mov	r6,zero
10003f84:	0007883a 	mov	r3,zero
10003f88:	0009883a 	mov	r4,zero
10003f8c:	0005883a 	mov	r2,zero
10003f90:	180a953a 	slli	r5,r3,20
10003f94:	31803fcc 	andi	r6,r6,255
10003f98:	00c00434 	movhi	r3,16
10003f9c:	300c97fa 	slli	r6,r6,31
10003fa0:	18ffffc4 	addi	r3,r3,-1
10003fa4:	20c6703a 	and	r3,r4,r3
10003fa8:	1946b03a 	or	r3,r3,r5
10003fac:	1986b03a 	or	r3,r3,r6
10003fb0:	dfc00217 	ldw	ra,8(sp)
10003fb4:	dc400117 	ldw	r17,4(sp)
10003fb8:	dc000017 	ldw	r16,0(sp)
10003fbc:	dec00304 	addi	sp,sp,12
10003fc0:	f800283a 	ret
10003fc4:	10fffd44 	addi	r3,r2,-11
10003fc8:	88c8983a 	sll	r4,r17,r3
10003fcc:	00800434 	movhi	r2,16
10003fd0:	10bfffc4 	addi	r2,r2,-1
10003fd4:	2088703a 	and	r4,r4,r2
10003fd8:	28c1ffcc 	andi	r3,r5,2047
10003fdc:	800d883a 	mov	r6,r16
10003fe0:	0005883a 	mov	r2,zero
10003fe4:	003fea06 	br	10003f90 <__alt_data_end+0xf8003f90>

10003fe8 <__clzsi2>:
10003fe8:	00bfffd4 	movui	r2,65535
10003fec:	11000b36 	bltu	r2,r4,1000401c <__clzsi2+0x34>
10003ff0:	00803fc4 	movi	r2,255
10003ff4:	1100122e 	bgeu	r2,r4,10004040 <__clzsi2+0x58>
10003ff8:	00c00204 	movi	r3,8
10003ffc:	01400604 	movi	r5,24
10004000:	20c8d83a 	srl	r4,r4,r3
10004004:	00840074 	movhi	r2,4097
10004008:	10844104 	addi	r2,r2,4356
1000400c:	1109883a 	add	r4,r2,r4
10004010:	20800003 	ldbu	r2,0(r4)
10004014:	2885c83a 	sub	r2,r5,r2
10004018:	f800283a 	ret
1000401c:	00804034 	movhi	r2,256
10004020:	10bfffc4 	addi	r2,r2,-1
10004024:	11000336 	bltu	r2,r4,10004034 <__clzsi2+0x4c>
10004028:	00c00404 	movi	r3,16
1000402c:	180b883a 	mov	r5,r3
10004030:	003ff306 	br	10004000 <__alt_data_end+0xf8004000>
10004034:	00c00604 	movi	r3,24
10004038:	01400204 	movi	r5,8
1000403c:	003ff006 	br	10004000 <__alt_data_end+0xf8004000>
10004040:	0007883a 	mov	r3,zero
10004044:	01400804 	movi	r5,32
10004048:	003fed06 	br	10004000 <__alt_data_end+0xf8004000>

1000404c <_printf_r>:
1000404c:	defffd04 	addi	sp,sp,-12
10004050:	dfc00015 	stw	ra,0(sp)
10004054:	d9800115 	stw	r6,4(sp)
10004058:	d9c00215 	stw	r7,8(sp)
1000405c:	280d883a 	mov	r6,r5
10004060:	21400217 	ldw	r5,8(r4)
10004064:	d9c00104 	addi	r7,sp,4
10004068:	00041300 	call	10004130 <___vfprintf_internal_r>
1000406c:	dfc00017 	ldw	ra,0(sp)
10004070:	dec00304 	addi	sp,sp,12
10004074:	f800283a 	ret

10004078 <printf>:
10004078:	defffc04 	addi	sp,sp,-16
1000407c:	dfc00015 	stw	ra,0(sp)
10004080:	d9400115 	stw	r5,4(sp)
10004084:	d9800215 	stw	r6,8(sp)
10004088:	d9c00315 	stw	r7,12(sp)
1000408c:	00840074 	movhi	r2,4097
10004090:	108bac04 	addi	r2,r2,11952
10004094:	10800017 	ldw	r2,0(r2)
10004098:	200b883a 	mov	r5,r4
1000409c:	d9800104 	addi	r6,sp,4
100040a0:	11000217 	ldw	r4,8(r2)
100040a4:	000622c0 	call	1000622c <__vfprintf_internal>
100040a8:	dfc00017 	ldw	ra,0(sp)
100040ac:	dec00404 	addi	sp,sp,16
100040b0:	f800283a 	ret

100040b4 <srand>:
100040b4:	00840074 	movhi	r2,4097
100040b8:	108bac04 	addi	r2,r2,11952
100040bc:	10800017 	ldw	r2,0(r2)
100040c0:	11002915 	stw	r4,164(r2)
100040c4:	10002a15 	stw	zero,168(r2)
100040c8:	f800283a 	ret

100040cc <rand>:
100040cc:	00840074 	movhi	r2,4097
100040d0:	defffe04 	addi	sp,sp,-8
100040d4:	108bac04 	addi	r2,r2,11952
100040d8:	dc000015 	stw	r16,0(sp)
100040dc:	14000017 	ldw	r16,0(r2)
100040e0:	dfc00115 	stw	ra,4(sp)
100040e4:	01932574 	movhi	r6,19605
100040e8:	81002917 	ldw	r4,164(r16)
100040ec:	81402a17 	ldw	r5,168(r16)
100040f0:	01d614b4 	movhi	r7,22610
100040f4:	319fcb44 	addi	r6,r6,32557
100040f8:	39fd0b44 	addi	r7,r7,-3027
100040fc:	000d3b40 	call	1000d3b4 <__muldi3>
10004100:	11000044 	addi	r4,r2,1
10004104:	2085803a 	cmpltu	r2,r4,r2
10004108:	10c7883a 	add	r3,r2,r3
1000410c:	00a00034 	movhi	r2,32768
10004110:	10bfffc4 	addi	r2,r2,-1
10004114:	1884703a 	and	r2,r3,r2
10004118:	81002915 	stw	r4,164(r16)
1000411c:	80c02a15 	stw	r3,168(r16)
10004120:	dfc00117 	ldw	ra,4(sp)
10004124:	dc000017 	ldw	r16,0(sp)
10004128:	dec00204 	addi	sp,sp,8
1000412c:	f800283a 	ret

10004130 <___vfprintf_internal_r>:
10004130:	defeb604 	addi	sp,sp,-1320
10004134:	dfc14915 	stw	ra,1316(sp)
10004138:	ddc14715 	stw	r23,1308(sp)
1000413c:	dd814615 	stw	r22,1304(sp)
10004140:	202f883a 	mov	r23,r4
10004144:	282d883a 	mov	r22,r5
10004148:	d9812a15 	stw	r6,1192(sp)
1000414c:	d9c12d15 	stw	r7,1204(sp)
10004150:	df014815 	stw	fp,1312(sp)
10004154:	dd414515 	stw	r21,1300(sp)
10004158:	dd014415 	stw	r20,1296(sp)
1000415c:	dcc14315 	stw	r19,1292(sp)
10004160:	dc814215 	stw	r18,1288(sp)
10004164:	dc414115 	stw	r17,1284(sp)
10004168:	dc014015 	stw	r16,1280(sp)
1000416c:	000890c0 	call	1000890c <_localeconv_r>
10004170:	10800017 	ldw	r2,0(r2)
10004174:	1009883a 	mov	r4,r2
10004178:	d8813515 	stw	r2,1236(sp)
1000417c:	000a8d40 	call	1000a8d4 <strlen>
10004180:	d8813815 	stw	r2,1248(sp)
10004184:	b8000226 	beq	r23,zero,10004190 <___vfprintf_internal_r+0x60>
10004188:	b8800e17 	ldw	r2,56(r23)
1000418c:	10010526 	beq	r2,zero,100045a4 <___vfprintf_internal_r+0x474>
10004190:	b0c0030b 	ldhu	r3,12(r22)
10004194:	1908000c 	andi	r4,r3,8192
10004198:	1805883a 	mov	r2,r3
1000419c:	2000071e 	bne	r4,zero,100041bc <___vfprintf_internal_r+0x8c>
100041a0:	b1001917 	ldw	r4,100(r22)
100041a4:	18880014 	ori	r2,r3,8192
100041a8:	00f7ffc4 	movi	r3,-8193
100041ac:	20c8703a 	and	r4,r4,r3
100041b0:	b080030d 	sth	r2,12(r22)
100041b4:	1007883a 	mov	r3,r2
100041b8:	b1001915 	stw	r4,100(r22)
100041bc:	1100020c 	andi	r4,r2,8
100041c0:	2000a826 	beq	r4,zero,10004464 <___vfprintf_internal_r+0x334>
100041c4:	b1000417 	ldw	r4,16(r22)
100041c8:	2000a626 	beq	r4,zero,10004464 <___vfprintf_internal_r+0x334>
100041cc:	1080068c 	andi	r2,r2,26
100041d0:	01000284 	movi	r4,10
100041d4:	1100ac26 	beq	r2,r4,10004488 <___vfprintf_internal_r+0x358>
100041d8:	d8c10e04 	addi	r3,sp,1080
100041dc:	d9010dc4 	addi	r4,sp,1079
100041e0:	d9400404 	addi	r5,sp,16
100041e4:	05040074 	movhi	r20,4097
100041e8:	1905c83a 	sub	r2,r3,r4
100041ec:	a5049184 	addi	r20,r20,4678
100041f0:	d8c12815 	stw	r3,1184(sp)
100041f4:	d9012915 	stw	r4,1188(sp)
100041f8:	d9411e15 	stw	r5,1144(sp)
100041fc:	d8012015 	stw	zero,1152(sp)
10004200:	d8011f15 	stw	zero,1148(sp)
10004204:	d8013315 	stw	zero,1228(sp)
10004208:	d8013715 	stw	zero,1244(sp)
1000420c:	d8013915 	stw	zero,1252(sp)
10004210:	d8013b15 	stw	zero,1260(sp)
10004214:	d8013a15 	stw	zero,1256(sp)
10004218:	d8012f15 	stw	zero,1212(sp)
1000421c:	2811883a 	mov	r8,r5
10004220:	d8813c15 	stw	r2,1264(sp)
10004224:	d8c12a17 	ldw	r3,1192(sp)
10004228:	18800007 	ldb	r2,0(r3)
1000422c:	10021326 	beq	r2,zero,10004a7c <___vfprintf_internal_r+0x94c>
10004230:	00c00944 	movi	r3,37
10004234:	dc012a17 	ldw	r16,1192(sp)
10004238:	10c0021e 	bne	r2,r3,10004244 <___vfprintf_internal_r+0x114>
1000423c:	00001606 	br	10004298 <___vfprintf_internal_r+0x168>
10004240:	10c08526 	beq	r2,r3,10004458 <___vfprintf_internal_r+0x328>
10004244:	84000044 	addi	r16,r16,1
10004248:	80800007 	ldb	r2,0(r16)
1000424c:	103ffc1e 	bne	r2,zero,10004240 <__alt_data_end+0xf8004240>
10004250:	d9012a17 	ldw	r4,1192(sp)
10004254:	8123c83a 	sub	r17,r16,r4
10004258:	88000f26 	beq	r17,zero,10004298 <___vfprintf_internal_r+0x168>
1000425c:	d8812a17 	ldw	r2,1192(sp)
10004260:	d8c12017 	ldw	r3,1152(sp)
10004264:	44400115 	stw	r17,4(r8)
10004268:	40800015 	stw	r2,0(r8)
1000426c:	d8811f17 	ldw	r2,1148(sp)
10004270:	1c47883a 	add	r3,r3,r17
10004274:	d8c12015 	stw	r3,1152(sp)
10004278:	10800044 	addi	r2,r2,1
1000427c:	d8811f15 	stw	r2,1148(sp)
10004280:	00c001c4 	movi	r3,7
10004284:	1880b516 	blt	r3,r2,1000455c <___vfprintf_internal_r+0x42c>
10004288:	42000204 	addi	r8,r8,8
1000428c:	d8c12f17 	ldw	r3,1212(sp)
10004290:	1c47883a 	add	r3,r3,r17
10004294:	d8c12f15 	stw	r3,1212(sp)
10004298:	80800007 	ldb	r2,0(r16)
1000429c:	1000b626 	beq	r2,zero,10004578 <___vfprintf_internal_r+0x448>
100042a0:	80800044 	addi	r2,r16,1
100042a4:	84000047 	ldb	r16,1(r16)
100042a8:	0027883a 	mov	r19,zero
100042ac:	0039883a 	mov	fp,zero
100042b0:	dcc12b05 	stb	r19,1196(sp)
100042b4:	d8012785 	stb	zero,1182(sp)
100042b8:	027fffc4 	movi	r9,-1
100042bc:	d8012e15 	stw	zero,1208(sp)
100042c0:	04401604 	movi	r17,88
100042c4:	04800244 	movi	r18,9
100042c8:	da012a15 	stw	r8,1192(sp)
100042cc:	e027883a 	mov	r19,fp
100042d0:	17000044 	addi	fp,r2,1
100042d4:	80bff804 	addi	r2,r16,-32
100042d8:	88831236 	bltu	r17,r2,10004f24 <___vfprintf_internal_r+0xdf4>
100042dc:	100490ba 	slli	r2,r2,2
100042e0:	01040034 	movhi	r4,4096
100042e4:	2110bd04 	addi	r4,r4,17140
100042e8:	1105883a 	add	r2,r2,r4
100042ec:	10800017 	ldw	r2,0(r2)
100042f0:	1000683a 	jmp	r2
100042f4:	10004e40 	call	110004e4 <_gp+0xfe5638>
100042f8:	10004f24 	muli	zero,r2,316
100042fc:	10004f24 	muli	zero,r2,316
10004300:	10004e5c 	xori	zero,r2,313
10004304:	10004f24 	muli	zero,r2,316
10004308:	10004f24 	muli	zero,r2,316
1000430c:	10004f24 	muli	zero,r2,316
10004310:	10004f24 	muli	zero,r2,316
10004314:	10004f24 	muli	zero,r2,316
10004318:	10004f24 	muli	zero,r2,316
1000431c:	10004e6c 	andhi	zero,r2,313
10004320:	10004e94 	ori	zero,r2,314
10004324:	10004f24 	muli	zero,r2,316
10004328:	100045b0 	cmpltui	zero,r2,278
1000432c:	100045c0 	call	1100045c <_gp+0xfe55b0>
10004330:	10004f24 	muli	zero,r2,316
10004334:	10004610 	cmplti	zero,r2,280
10004338:	10004620 	cmpeqi	zero,r2,280
1000433c:	10004620 	cmpeqi	zero,r2,280
10004340:	10004620 	cmpeqi	zero,r2,280
10004344:	10004620 	cmpeqi	zero,r2,280
10004348:	10004620 	cmpeqi	zero,r2,280
1000434c:	10004620 	cmpeqi	zero,r2,280
10004350:	10004620 	cmpeqi	zero,r2,280
10004354:	10004620 	cmpeqi	zero,r2,280
10004358:	10004620 	cmpeqi	zero,r2,280
1000435c:	10004f24 	muli	zero,r2,316
10004360:	10004f24 	muli	zero,r2,316
10004364:	10004f24 	muli	zero,r2,316
10004368:	10004f24 	muli	zero,r2,316
1000436c:	10004f24 	muli	zero,r2,316
10004370:	10004f24 	muli	zero,r2,316
10004374:	10004f24 	muli	zero,r2,316
10004378:	10004f24 	muli	zero,r2,316
1000437c:	10004f24 	muli	zero,r2,316
10004380:	10004f24 	muli	zero,r2,316
10004384:	10004664 	muli	zero,r2,281
10004388:	10004a84 	addi	zero,r2,298
1000438c:	10004f24 	muli	zero,r2,316
10004390:	10004a84 	addi	zero,r2,298
10004394:	10004f24 	muli	zero,r2,316
10004398:	10004f24 	muli	zero,r2,316
1000439c:	10004f24 	muli	zero,r2,316
100043a0:	10004f24 	muli	zero,r2,316
100043a4:	10004b2c 	andhi	zero,r2,300
100043a8:	10004f24 	muli	zero,r2,316
100043ac:	10004f24 	muli	zero,r2,316
100043b0:	10004b3c 	xorhi	zero,r2,300
100043b4:	10004f24 	muli	zero,r2,316
100043b8:	10004f24 	muli	zero,r2,316
100043bc:	10004f24 	muli	zero,r2,316
100043c0:	10004f24 	muli	zero,r2,316
100043c4:	10004f24 	muli	zero,r2,316
100043c8:	10004b80 	call	110004b8 <_gp+0xfe560c>
100043cc:	10004f24 	muli	zero,r2,316
100043d0:	10004f24 	muli	zero,r2,316
100043d4:	10004bb8 	rdprs	zero,r2,302
100043d8:	10004f24 	muli	zero,r2,316
100043dc:	10004f24 	muli	zero,r2,316
100043e0:	10004f24 	muli	zero,r2,316
100043e4:	10004f24 	muli	zero,r2,316
100043e8:	10004f24 	muli	zero,r2,316
100043ec:	10004f24 	muli	zero,r2,316
100043f0:	10004f24 	muli	zero,r2,316
100043f4:	10004f24 	muli	zero,r2,316
100043f8:	10004f24 	muli	zero,r2,316
100043fc:	10004f24 	muli	zero,r2,316
10004400:	10004df4 	orhi	zero,r2,311
10004404:	10004da0 	cmpeqi	zero,r2,310
10004408:	10004a84 	addi	zero,r2,298
1000440c:	10004a84 	addi	zero,r2,298
10004410:	10004a84 	addi	zero,r2,298
10004414:	10004de4 	muli	zero,r2,311
10004418:	10004da0 	cmpeqi	zero,r2,310
1000441c:	10004f24 	muli	zero,r2,316
10004420:	10004f24 	muli	zero,r2,316
10004424:	10004cbc 	xorhi	zero,r2,306
10004428:	10004f24 	muli	zero,r2,316
1000442c:	10004cd4 	ori	zero,r2,307
10004430:	10004d14 	ori	zero,r2,308
10004434:	10004d54 	ori	zero,r2,309
10004438:	10004c20 	cmpeqi	zero,r2,304
1000443c:	10004f24 	muli	zero,r2,316
10004440:	10004ea8 	cmpgeui	zero,r2,314
10004444:	10004f24 	muli	zero,r2,316
10004448:	10004c30 	cmpltui	zero,r2,304
1000444c:	10004f24 	muli	zero,r2,316
10004450:	10004f24 	muli	zero,r2,316
10004454:	10004c70 	cmpltui	zero,r2,305
10004458:	d9412a17 	ldw	r5,1192(sp)
1000445c:	8163c83a 	sub	r17,r16,r5
10004460:	003f7d06 	br	10004258 <__alt_data_end+0xf8004258>
10004464:	b809883a 	mov	r4,r23
10004468:	b00b883a 	mov	r5,r22
1000446c:	00062500 	call	10006250 <__swsetup_r>
10004470:	10002d1e 	bne	r2,zero,10004528 <___vfprintf_internal_r+0x3f8>
10004474:	b0c0030b 	ldhu	r3,12(r22)
10004478:	01000284 	movi	r4,10
1000447c:	1805883a 	mov	r2,r3
10004480:	1080068c 	andi	r2,r2,26
10004484:	113f541e 	bne	r2,r4,100041d8 <__alt_data_end+0xf80041d8>
10004488:	b080038b 	ldhu	r2,14(r22)
1000448c:	113fffcc 	andi	r4,r2,65535
10004490:	2120001c 	xori	r4,r4,32768
10004494:	21200004 	addi	r4,r4,-32768
10004498:	203f4f16 	blt	r4,zero,100041d8 <__alt_data_end+0xf80041d8>
1000449c:	b2c01917 	ldw	r11,100(r22)
100044a0:	b2800717 	ldw	r10,28(r22)
100044a4:	b2400917 	ldw	r9,36(r22)
100044a8:	d9812a17 	ldw	r6,1192(sp)
100044ac:	d9c12d17 	ldw	r7,1204(sp)
100044b0:	02010004 	movi	r8,1024
100044b4:	18ffff4c 	andi	r3,r3,65533
100044b8:	d881078d 	sth	r2,1054(sp)
100044bc:	b809883a 	mov	r4,r23
100044c0:	d8800404 	addi	r2,sp,16
100044c4:	d9410404 	addi	r5,sp,1040
100044c8:	d8c1070d 	sth	r3,1052(sp)
100044cc:	dac11d15 	stw	r11,1140(sp)
100044d0:	da810b15 	stw	r10,1068(sp)
100044d4:	da410d15 	stw	r9,1076(sp)
100044d8:	d8810415 	stw	r2,1040(sp)
100044dc:	d8810815 	stw	r2,1056(sp)
100044e0:	da010615 	stw	r8,1048(sp)
100044e4:	da010915 	stw	r8,1060(sp)
100044e8:	d8010a15 	stw	zero,1064(sp)
100044ec:	00041300 	call	10004130 <___vfprintf_internal_r>
100044f0:	1021883a 	mov	r16,r2
100044f4:	10000416 	blt	r2,zero,10004508 <___vfprintf_internal_r+0x3d8>
100044f8:	b809883a 	mov	r4,r23
100044fc:	d9410404 	addi	r5,sp,1040
10004500:	0007cd00 	call	10007cd0 <_fflush_r>
10004504:	1007301e 	bne	r2,zero,100061c8 <___vfprintf_internal_r+0x2098>
10004508:	d881070b 	ldhu	r2,1052(sp)
1000450c:	1080100c 	andi	r2,r2,64
10004510:	10000326 	beq	r2,zero,10004520 <___vfprintf_internal_r+0x3f0>
10004514:	b080030b 	ldhu	r2,12(r22)
10004518:	10801014 	ori	r2,r2,64
1000451c:	b080030d 	sth	r2,12(r22)
10004520:	8005883a 	mov	r2,r16
10004524:	00000106 	br	1000452c <___vfprintf_internal_r+0x3fc>
10004528:	00bfffc4 	movi	r2,-1
1000452c:	dfc14917 	ldw	ra,1316(sp)
10004530:	df014817 	ldw	fp,1312(sp)
10004534:	ddc14717 	ldw	r23,1308(sp)
10004538:	dd814617 	ldw	r22,1304(sp)
1000453c:	dd414517 	ldw	r21,1300(sp)
10004540:	dd014417 	ldw	r20,1296(sp)
10004544:	dcc14317 	ldw	r19,1292(sp)
10004548:	dc814217 	ldw	r18,1288(sp)
1000454c:	dc414117 	ldw	r17,1284(sp)
10004550:	dc014017 	ldw	r16,1280(sp)
10004554:	dec14a04 	addi	sp,sp,1320
10004558:	f800283a 	ret
1000455c:	b809883a 	mov	r4,r23
10004560:	b00b883a 	mov	r5,r22
10004564:	d9811e04 	addi	r6,sp,1144
10004568:	000aa680 	call	1000aa68 <__sprint_r>
1000456c:	1000081e 	bne	r2,zero,10004590 <___vfprintf_internal_r+0x460>
10004570:	da000404 	addi	r8,sp,16
10004574:	003f4506 	br	1000428c <__alt_data_end+0xf800428c>
10004578:	d8812017 	ldw	r2,1152(sp)
1000457c:	10000426 	beq	r2,zero,10004590 <___vfprintf_internal_r+0x460>
10004580:	b809883a 	mov	r4,r23
10004584:	b00b883a 	mov	r5,r22
10004588:	d9811e04 	addi	r6,sp,1144
1000458c:	000aa680 	call	1000aa68 <__sprint_r>
10004590:	b080030b 	ldhu	r2,12(r22)
10004594:	1080100c 	andi	r2,r2,64
10004598:	103fe31e 	bne	r2,zero,10004528 <__alt_data_end+0xf8004528>
1000459c:	d8812f17 	ldw	r2,1212(sp)
100045a0:	003fe206 	br	1000452c <__alt_data_end+0xf800452c>
100045a4:	b809883a 	mov	r4,r23
100045a8:	000828c0 	call	1000828c <__sinit>
100045ac:	003ef806 	br	10004190 <__alt_data_end+0xf8004190>
100045b0:	e005883a 	mov	r2,fp
100045b4:	9cc00114 	ori	r19,r19,4
100045b8:	e4000007 	ldb	r16,0(fp)
100045bc:	003f4406 	br	100042d0 <__alt_data_end+0xf80042d0>
100045c0:	e4000007 	ldb	r16,0(fp)
100045c4:	01000a84 	movi	r4,42
100045c8:	e0800044 	addi	r2,fp,1
100045cc:	8106f626 	beq	r16,r4,100061a8 <___vfprintf_internal_r+0x2078>
100045d0:	857ff404 	addi	r21,r16,-48
100045d4:	1039883a 	mov	fp,r2
100045d8:	0013883a 	mov	r9,zero
100045dc:	957f3d36 	bltu	r18,r21,100042d4 <__alt_data_end+0xf80042d4>
100045e0:	0009883a 	mov	r4,zero
100045e4:	01400284 	movi	r5,10
100045e8:	0002cfc0 	call	10002cfc <__mulsi3>
100045ec:	e4000007 	ldb	r16,0(fp)
100045f0:	a889883a 	add	r4,r21,r2
100045f4:	e7000044 	addi	fp,fp,1
100045f8:	857ff404 	addi	r21,r16,-48
100045fc:	957ff92e 	bgeu	r18,r21,100045e4 <__alt_data_end+0xf80045e4>
10004600:	2013883a 	mov	r9,r4
10004604:	203f330e 	bge	r4,zero,100042d4 <__alt_data_end+0xf80042d4>
10004608:	027fffc4 	movi	r9,-1
1000460c:	003f3106 	br	100042d4 <__alt_data_end+0xf80042d4>
10004610:	9cc02014 	ori	r19,r19,128
10004614:	e005883a 	mov	r2,fp
10004618:	e4000007 	ldb	r16,0(fp)
1000461c:	003f2c06 	br	100042d0 <__alt_data_end+0xf80042d0>
10004620:	857ff404 	addi	r21,r16,-48
10004624:	d8012e15 	stw	zero,1208(sp)
10004628:	e021883a 	mov	r16,fp
1000462c:	0009883a 	mov	r4,zero
10004630:	da412c15 	stw	r9,1200(sp)
10004634:	01400284 	movi	r5,10
10004638:	0002cfc0 	call	10002cfc <__mulsi3>
1000463c:	81400007 	ldb	r5,0(r16)
10004640:	1549883a 	add	r4,r2,r21
10004644:	e7000044 	addi	fp,fp,1
10004648:	2d7ff404 	addi	r21,r5,-48
1000464c:	e021883a 	mov	r16,fp
10004650:	957ff82e 	bgeu	r18,r21,10004634 <__alt_data_end+0xf8004634>
10004654:	2821883a 	mov	r16,r5
10004658:	d9012e15 	stw	r4,1208(sp)
1000465c:	da412c17 	ldw	r9,1200(sp)
10004660:	003f1c06 	br	100042d4 <__alt_data_end+0xf80042d4>
10004664:	da012a17 	ldw	r8,1192(sp)
10004668:	df012a15 	stw	fp,1192(sp)
1000466c:	9839883a 	mov	fp,r19
10004670:	dcc12b03 	ldbu	r19,1196(sp)
10004674:	e7000414 	ori	fp,fp,16
10004678:	e080080c 	andi	r2,fp,32
1000467c:	dcc12785 	stb	r19,1182(sp)
10004680:	d8c12d17 	ldw	r3,1204(sp)
10004684:	1001ce26 	beq	r2,zero,10004dc0 <___vfprintf_internal_r+0xc90>
10004688:	d9012d17 	ldw	r4,1204(sp)
1000468c:	18800117 	ldw	r2,4(r3)
10004690:	1c800017 	ldw	r18,0(r3)
10004694:	21000204 	addi	r4,r4,8
10004698:	d9012d15 	stw	r4,1204(sp)
1000469c:	102b883a 	mov	r21,r2
100046a0:	10044916 	blt	r2,zero,100057c8 <___vfprintf_internal_r+0x1698>
100046a4:	dcc12783 	ldbu	r19,1182(sp)
100046a8:	da413215 	stw	r9,1224(sp)
100046ac:	00800044 	movi	r2,1
100046b0:	9546b03a 	or	r3,r18,r21
100046b4:	48000216 	blt	r9,zero,100046c0 <___vfprintf_internal_r+0x590>
100046b8:	013fdfc4 	movi	r4,-129
100046bc:	e138703a 	and	fp,fp,r4
100046c0:	1802251e 	bne	r3,zero,10004f58 <___vfprintf_internal_r+0xe28>
100046c4:	48031726 	beq	r9,zero,10005324 <___vfprintf_internal_r+0x11f4>
100046c8:	10803fcc 	andi	r2,r2,255
100046cc:	00c00044 	movi	r3,1
100046d0:	10c24526 	beq	r2,r3,10004fe8 <___vfprintf_internal_r+0xeb8>
100046d4:	00c00084 	movi	r3,2
100046d8:	10c33426 	beq	r2,r3,100053ac <___vfprintf_internal_r+0x127c>
100046dc:	d8c10e04 	addi	r3,sp,1080
100046e0:	9008d0fa 	srli	r4,r18,3
100046e4:	a80a977a 	slli	r5,r21,29
100046e8:	a82ad0fa 	srli	r21,r21,3
100046ec:	948001cc 	andi	r18,r18,7
100046f0:	90800c04 	addi	r2,r18,48
100046f4:	18ffffc4 	addi	r3,r3,-1
100046f8:	2924b03a 	or	r18,r5,r4
100046fc:	18800005 	stb	r2,0(r3)
10004700:	9548b03a 	or	r4,r18,r21
10004704:	203ff61e 	bne	r4,zero,100046e0 <__alt_data_end+0xf80046e0>
10004708:	e100004c 	andi	r4,fp,1
1000470c:	d8c13115 	stw	r3,1220(sp)
10004710:	20039a1e 	bne	r4,zero,1000557c <___vfprintf_internal_r+0x144c>
10004714:	d8812817 	ldw	r2,1184(sp)
10004718:	10e3c83a 	sub	r17,r2,r3
1000471c:	8805883a 	mov	r2,r17
10004720:	8a40010e 	bge	r17,r9,10004728 <___vfprintf_internal_r+0x5f8>
10004724:	4805883a 	mov	r2,r9
10004728:	d8812b15 	stw	r2,1196(sp)
1000472c:	d8013415 	stw	zero,1232(sp)
10004730:	98803fcc 	andi	r2,r19,255
10004734:	1080201c 	xori	r2,r2,128
10004738:	10bfe004 	addi	r2,r2,-128
1000473c:	10000326 	beq	r2,zero,1000474c <___vfprintf_internal_r+0x61c>
10004740:	d8c12b17 	ldw	r3,1196(sp)
10004744:	18c00044 	addi	r3,r3,1
10004748:	d8c12b15 	stw	r3,1196(sp)
1000474c:	e0c0008c 	andi	r3,fp,2
10004750:	d8c12c15 	stw	r3,1200(sp)
10004754:	18000326 	beq	r3,zero,10004764 <___vfprintf_internal_r+0x634>
10004758:	d8c12b17 	ldw	r3,1196(sp)
1000475c:	18c00084 	addi	r3,r3,2
10004760:	d8c12b15 	stw	r3,1196(sp)
10004764:	e0c0210c 	andi	r3,fp,132
10004768:	d8c13015 	stw	r3,1216(sp)
1000476c:	1801f81e 	bne	r3,zero,10004f50 <___vfprintf_internal_r+0xe20>
10004770:	d9012e17 	ldw	r4,1208(sp)
10004774:	d8c12b17 	ldw	r3,1196(sp)
10004778:	20ebc83a 	sub	r21,r4,r3
1000477c:	0541f40e 	bge	zero,r21,10004f50 <___vfprintf_internal_r+0xe20>
10004780:	02400404 	movi	r9,16
10004784:	d8c12017 	ldw	r3,1152(sp)
10004788:	d8811f17 	ldw	r2,1148(sp)
1000478c:	4d45750e 	bge	r9,r21,10005d64 <___vfprintf_internal_r+0x1c34>
10004790:	01440074 	movhi	r5,4097
10004794:	29449584 	addi	r5,r5,4694
10004798:	d9413615 	stw	r5,1240(sp)
1000479c:	4827883a 	mov	r19,r9
100047a0:	048001c4 	movi	r18,7
100047a4:	00000306 	br	100047b4 <___vfprintf_internal_r+0x684>
100047a8:	ad7ffc04 	addi	r21,r21,-16
100047ac:	42000204 	addi	r8,r8,8
100047b0:	9d40130e 	bge	r19,r21,10004800 <___vfprintf_internal_r+0x6d0>
100047b4:	01040074 	movhi	r4,4097
100047b8:	18c00404 	addi	r3,r3,16
100047bc:	10800044 	addi	r2,r2,1
100047c0:	21049584 	addi	r4,r4,4694
100047c4:	41000015 	stw	r4,0(r8)
100047c8:	44c00115 	stw	r19,4(r8)
100047cc:	d8c12015 	stw	r3,1152(sp)
100047d0:	d8811f15 	stw	r2,1148(sp)
100047d4:	90bff40e 	bge	r18,r2,100047a8 <__alt_data_end+0xf80047a8>
100047d8:	b809883a 	mov	r4,r23
100047dc:	b00b883a 	mov	r5,r22
100047e0:	d9811e04 	addi	r6,sp,1144
100047e4:	000aa680 	call	1000aa68 <__sprint_r>
100047e8:	103f691e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100047ec:	ad7ffc04 	addi	r21,r21,-16
100047f0:	d8c12017 	ldw	r3,1152(sp)
100047f4:	d8811f17 	ldw	r2,1148(sp)
100047f8:	da000404 	addi	r8,sp,16
100047fc:	9d7fed16 	blt	r19,r21,100047b4 <__alt_data_end+0xf80047b4>
10004800:	d9413617 	ldw	r5,1240(sp)
10004804:	a8c7883a 	add	r3,r21,r3
10004808:	10800044 	addi	r2,r2,1
1000480c:	41400015 	stw	r5,0(r8)
10004810:	45400115 	stw	r21,4(r8)
10004814:	d8c12015 	stw	r3,1152(sp)
10004818:	d8811f15 	stw	r2,1148(sp)
1000481c:	010001c4 	movi	r4,7
10004820:	20832b16 	blt	r4,r2,100054d0 <___vfprintf_internal_r+0x13a0>
10004824:	d8812787 	ldb	r2,1182(sp)
10004828:	42000204 	addi	r8,r8,8
1000482c:	10000c26 	beq	r2,zero,10004860 <___vfprintf_internal_r+0x730>
10004830:	d8811f17 	ldw	r2,1148(sp)
10004834:	d9012784 	addi	r4,sp,1182
10004838:	18c00044 	addi	r3,r3,1
1000483c:	10800044 	addi	r2,r2,1
10004840:	41000015 	stw	r4,0(r8)
10004844:	01000044 	movi	r4,1
10004848:	41000115 	stw	r4,4(r8)
1000484c:	d8c12015 	stw	r3,1152(sp)
10004850:	d8811f15 	stw	r2,1148(sp)
10004854:	010001c4 	movi	r4,7
10004858:	2082c416 	blt	r4,r2,1000536c <___vfprintf_internal_r+0x123c>
1000485c:	42000204 	addi	r8,r8,8
10004860:	d8812c17 	ldw	r2,1200(sp)
10004864:	10000c26 	beq	r2,zero,10004898 <___vfprintf_internal_r+0x768>
10004868:	d8811f17 	ldw	r2,1148(sp)
1000486c:	d9012704 	addi	r4,sp,1180
10004870:	18c00084 	addi	r3,r3,2
10004874:	10800044 	addi	r2,r2,1
10004878:	41000015 	stw	r4,0(r8)
1000487c:	01000084 	movi	r4,2
10004880:	41000115 	stw	r4,4(r8)
10004884:	d8c12015 	stw	r3,1152(sp)
10004888:	d8811f15 	stw	r2,1148(sp)
1000488c:	010001c4 	movi	r4,7
10004890:	2082be16 	blt	r4,r2,1000538c <___vfprintf_internal_r+0x125c>
10004894:	42000204 	addi	r8,r8,8
10004898:	d9013017 	ldw	r4,1216(sp)
1000489c:	00802004 	movi	r2,128
100048a0:	20822026 	beq	r4,r2,10005124 <___vfprintf_internal_r+0xff4>
100048a4:	d9413217 	ldw	r5,1224(sp)
100048a8:	2c67c83a 	sub	r19,r5,r17
100048ac:	04c0260e 	bge	zero,r19,10004948 <___vfprintf_internal_r+0x818>
100048b0:	05400404 	movi	r21,16
100048b4:	d8811f17 	ldw	r2,1148(sp)
100048b8:	acc4720e 	bge	r21,r19,10005a84 <___vfprintf_internal_r+0x1954>
100048bc:	01440074 	movhi	r5,4097
100048c0:	29449184 	addi	r5,r5,4678
100048c4:	d9412c15 	stw	r5,1200(sp)
100048c8:	048001c4 	movi	r18,7
100048cc:	00000306 	br	100048dc <___vfprintf_internal_r+0x7ac>
100048d0:	9cfffc04 	addi	r19,r19,-16
100048d4:	42000204 	addi	r8,r8,8
100048d8:	acc0110e 	bge	r21,r19,10004920 <___vfprintf_internal_r+0x7f0>
100048dc:	18c00404 	addi	r3,r3,16
100048e0:	10800044 	addi	r2,r2,1
100048e4:	45000015 	stw	r20,0(r8)
100048e8:	45400115 	stw	r21,4(r8)
100048ec:	d8c12015 	stw	r3,1152(sp)
100048f0:	d8811f15 	stw	r2,1148(sp)
100048f4:	90bff60e 	bge	r18,r2,100048d0 <__alt_data_end+0xf80048d0>
100048f8:	b809883a 	mov	r4,r23
100048fc:	b00b883a 	mov	r5,r22
10004900:	d9811e04 	addi	r6,sp,1144
10004904:	000aa680 	call	1000aa68 <__sprint_r>
10004908:	103f211e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
1000490c:	9cfffc04 	addi	r19,r19,-16
10004910:	d8c12017 	ldw	r3,1152(sp)
10004914:	d8811f17 	ldw	r2,1148(sp)
10004918:	da000404 	addi	r8,sp,16
1000491c:	acffef16 	blt	r21,r19,100048dc <__alt_data_end+0xf80048dc>
10004920:	d9012c17 	ldw	r4,1200(sp)
10004924:	1cc7883a 	add	r3,r3,r19
10004928:	10800044 	addi	r2,r2,1
1000492c:	41000015 	stw	r4,0(r8)
10004930:	44c00115 	stw	r19,4(r8)
10004934:	d8c12015 	stw	r3,1152(sp)
10004938:	d8811f15 	stw	r2,1148(sp)
1000493c:	010001c4 	movi	r4,7
10004940:	20828216 	blt	r4,r2,1000534c <___vfprintf_internal_r+0x121c>
10004944:	42000204 	addi	r8,r8,8
10004948:	e080400c 	andi	r2,fp,256
1000494c:	1001ac1e 	bne	r2,zero,10005000 <___vfprintf_internal_r+0xed0>
10004950:	d8811f17 	ldw	r2,1148(sp)
10004954:	d9413117 	ldw	r5,1220(sp)
10004958:	1c47883a 	add	r3,r3,r17
1000495c:	10800044 	addi	r2,r2,1
10004960:	41400015 	stw	r5,0(r8)
10004964:	44400115 	stw	r17,4(r8)
10004968:	d8c12015 	stw	r3,1152(sp)
1000496c:	d8811f15 	stw	r2,1148(sp)
10004970:	010001c4 	movi	r4,7
10004974:	20825d16 	blt	r4,r2,100052ec <___vfprintf_internal_r+0x11bc>
10004978:	42000204 	addi	r8,r8,8
1000497c:	e080010c 	andi	r2,fp,4
10004980:	10003126 	beq	r2,zero,10004a48 <___vfprintf_internal_r+0x918>
10004984:	d8812e17 	ldw	r2,1208(sp)
10004988:	d9012b17 	ldw	r4,1196(sp)
1000498c:	1121c83a 	sub	r16,r2,r4
10004990:	04002d0e 	bge	zero,r16,10004a48 <___vfprintf_internal_r+0x918>
10004994:	04400404 	movi	r17,16
10004998:	d8811f17 	ldw	r2,1148(sp)
1000499c:	8c05340e 	bge	r17,r16,10005e70 <___vfprintf_internal_r+0x1d40>
100049a0:	01040074 	movhi	r4,4097
100049a4:	21049584 	addi	r4,r4,4694
100049a8:	d9013615 	stw	r4,1240(sp)
100049ac:	048001c4 	movi	r18,7
100049b0:	00000306 	br	100049c0 <___vfprintf_internal_r+0x890>
100049b4:	843ffc04 	addi	r16,r16,-16
100049b8:	42000204 	addi	r8,r8,8
100049bc:	8c00130e 	bge	r17,r16,10004a0c <___vfprintf_internal_r+0x8dc>
100049c0:	01440074 	movhi	r5,4097
100049c4:	18c00404 	addi	r3,r3,16
100049c8:	10800044 	addi	r2,r2,1
100049cc:	29449584 	addi	r5,r5,4694
100049d0:	41400015 	stw	r5,0(r8)
100049d4:	44400115 	stw	r17,4(r8)
100049d8:	d8c12015 	stw	r3,1152(sp)
100049dc:	d8811f15 	stw	r2,1148(sp)
100049e0:	90bff40e 	bge	r18,r2,100049b4 <__alt_data_end+0xf80049b4>
100049e4:	b809883a 	mov	r4,r23
100049e8:	b00b883a 	mov	r5,r22
100049ec:	d9811e04 	addi	r6,sp,1144
100049f0:	000aa680 	call	1000aa68 <__sprint_r>
100049f4:	103ee61e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100049f8:	843ffc04 	addi	r16,r16,-16
100049fc:	d8c12017 	ldw	r3,1152(sp)
10004a00:	d8811f17 	ldw	r2,1148(sp)
10004a04:	da000404 	addi	r8,sp,16
10004a08:	8c3fed16 	blt	r17,r16,100049c0 <__alt_data_end+0xf80049c0>
10004a0c:	d9013617 	ldw	r4,1240(sp)
10004a10:	1c07883a 	add	r3,r3,r16
10004a14:	10800044 	addi	r2,r2,1
10004a18:	41000015 	stw	r4,0(r8)
10004a1c:	44000115 	stw	r16,4(r8)
10004a20:	d8c12015 	stw	r3,1152(sp)
10004a24:	d8811f15 	stw	r2,1148(sp)
10004a28:	010001c4 	movi	r4,7
10004a2c:	2080060e 	bge	r4,r2,10004a48 <___vfprintf_internal_r+0x918>
10004a30:	b809883a 	mov	r4,r23
10004a34:	b00b883a 	mov	r5,r22
10004a38:	d9811e04 	addi	r6,sp,1144
10004a3c:	000aa680 	call	1000aa68 <__sprint_r>
10004a40:	103ed31e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10004a44:	d8c12017 	ldw	r3,1152(sp)
10004a48:	df012b17 	ldw	fp,1196(sp)
10004a4c:	d9412e17 	ldw	r5,1208(sp)
10004a50:	e140010e 	bge	fp,r5,10004a58 <___vfprintf_internal_r+0x928>
10004a54:	2839883a 	mov	fp,r5
10004a58:	d8812f17 	ldw	r2,1212(sp)
10004a5c:	1705883a 	add	r2,r2,fp
10004a60:	d8812f15 	stw	r2,1212(sp)
10004a64:	1802291e 	bne	r3,zero,1000530c <___vfprintf_internal_r+0x11dc>
10004a68:	d8c12a17 	ldw	r3,1192(sp)
10004a6c:	d8011f15 	stw	zero,1148(sp)
10004a70:	da000404 	addi	r8,sp,16
10004a74:	18800007 	ldb	r2,0(r3)
10004a78:	103ded1e 	bne	r2,zero,10004230 <__alt_data_end+0xf8004230>
10004a7c:	dc012a17 	ldw	r16,1192(sp)
10004a80:	003e0506 	br	10004298 <__alt_data_end+0xf8004298>
10004a84:	d9012d17 	ldw	r4,1204(sp)
10004a88:	d9412d17 	ldw	r5,1204(sp)
10004a8c:	da012a17 	ldw	r8,1192(sp)
10004a90:	21000017 	ldw	r4,0(r4)
10004a94:	29400117 	ldw	r5,4(r5)
10004a98:	df012a15 	stw	fp,1192(sp)
10004a9c:	9839883a 	mov	fp,r19
10004aa0:	dcc12b03 	ldbu	r19,1196(sp)
10004aa4:	d9013715 	stw	r4,1244(sp)
10004aa8:	d9413915 	stw	r5,1252(sp)
10004aac:	da013f15 	stw	r8,1276(sp)
10004ab0:	da413e15 	stw	r9,1272(sp)
10004ab4:	dcc12785 	stb	r19,1182(sp)
10004ab8:	000a62c0 	call	1000a62c <__fpclassifyd>
10004abc:	d8c12d17 	ldw	r3,1204(sp)
10004ac0:	04400044 	movi	r17,1
10004ac4:	da013f17 	ldw	r8,1276(sp)
10004ac8:	1c800204 	addi	r18,r3,8
10004acc:	da413e17 	ldw	r9,1272(sp)
10004ad0:	d9013717 	ldw	r4,1244(sp)
10004ad4:	d9413917 	ldw	r5,1252(sp)
10004ad8:	1443451e 	bne	r2,r17,100057f0 <___vfprintf_internal_r+0x16c0>
10004adc:	000d883a 	mov	r6,zero
10004ae0:	000f883a 	mov	r7,zero
10004ae4:	000dfa40 	call	1000dfa4 <__ledf2>
10004ae8:	da013f17 	ldw	r8,1276(sp)
10004aec:	1004fe16 	blt	r2,zero,10005ee8 <___vfprintf_internal_r+0x1db8>
10004af0:	dcc12783 	ldbu	r19,1182(sp)
10004af4:	008011c4 	movi	r2,71
10004af8:	14045d0e 	bge	r2,r16,10005c70 <___vfprintf_internal_r+0x1b40>
10004afc:	01440074 	movhi	r5,4097
10004b00:	29448204 	addi	r5,r5,4616
10004b04:	d9413115 	stw	r5,1220(sp)
10004b08:	00c000c4 	movi	r3,3
10004b0c:	00bfdfc4 	movi	r2,-129
10004b10:	d8c12b15 	stw	r3,1196(sp)
10004b14:	e0b8703a 	and	fp,fp,r2
10004b18:	dc812d15 	stw	r18,1204(sp)
10004b1c:	1823883a 	mov	r17,r3
10004b20:	d8013215 	stw	zero,1224(sp)
10004b24:	d8013415 	stw	zero,1232(sp)
10004b28:	003f0106 	br	10004730 <__alt_data_end+0xf8004730>
10004b2c:	9cc00214 	ori	r19,r19,8
10004b30:	e005883a 	mov	r2,fp
10004b34:	e4000007 	ldb	r16,0(fp)
10004b38:	003de506 	br	100042d0 <__alt_data_end+0xf80042d0>
10004b3c:	da012a17 	ldw	r8,1192(sp)
10004b40:	df012a15 	stw	fp,1192(sp)
10004b44:	9f000414 	ori	fp,r19,16
10004b48:	e0c0080c 	andi	r3,fp,32
10004b4c:	d8812d17 	ldw	r2,1204(sp)
10004b50:	18007626 	beq	r3,zero,10004d2c <___vfprintf_internal_r+0xbfc>
10004b54:	d9412d17 	ldw	r5,1204(sp)
10004b58:	14800017 	ldw	r18,0(r2)
10004b5c:	15400117 	ldw	r21,4(r2)
10004b60:	29400204 	addi	r5,r5,8
10004b64:	d9412d15 	stw	r5,1204(sp)
10004b68:	0005883a 	mov	r2,zero
10004b6c:	9546b03a 	or	r3,r18,r21
10004b70:	d8012785 	stb	zero,1182(sp)
10004b74:	da413215 	stw	r9,1224(sp)
10004b78:	0027883a 	mov	r19,zero
10004b7c:	003ecd06 	br	100046b4 <__alt_data_end+0xf80046b4>
10004b80:	da012a17 	ldw	r8,1192(sp)
10004b84:	df012a15 	stw	fp,1192(sp)
10004b88:	9f000414 	ori	fp,r19,16
10004b8c:	e0c0080c 	andi	r3,fp,32
10004b90:	d8812d17 	ldw	r2,1204(sp)
10004b94:	18002c26 	beq	r3,zero,10004c48 <___vfprintf_internal_r+0xb18>
10004b98:	d9012d17 	ldw	r4,1204(sp)
10004b9c:	14800017 	ldw	r18,0(r2)
10004ba0:	15400117 	ldw	r21,4(r2)
10004ba4:	21000204 	addi	r4,r4,8
10004ba8:	d9012d15 	stw	r4,1204(sp)
10004bac:	00800044 	movi	r2,1
10004bb0:	9546b03a 	or	r3,r18,r21
10004bb4:	003fee06 	br	10004b70 <__alt_data_end+0xf8004b70>
10004bb8:	da012a17 	ldw	r8,1192(sp)
10004bbc:	df012a15 	stw	fp,1192(sp)
10004bc0:	9839883a 	mov	fp,r19
10004bc4:	dcc12b03 	ldbu	r19,1196(sp)
10004bc8:	01440074 	movhi	r5,4097
10004bcc:	29448504 	addi	r5,r5,4628
10004bd0:	dcc12785 	stb	r19,1182(sp)
10004bd4:	d9413b15 	stw	r5,1260(sp)
10004bd8:	e0c0080c 	andi	r3,fp,32
10004bdc:	d8812d17 	ldw	r2,1204(sp)
10004be0:	18002e26 	beq	r3,zero,10004c9c <___vfprintf_internal_r+0xb6c>
10004be4:	d9412d17 	ldw	r5,1204(sp)
10004be8:	14800017 	ldw	r18,0(r2)
10004bec:	15400117 	ldw	r21,4(r2)
10004bf0:	29400204 	addi	r5,r5,8
10004bf4:	d9412d15 	stw	r5,1204(sp)
10004bf8:	e080004c 	andi	r2,fp,1
10004bfc:	10025c26 	beq	r2,zero,10005570 <___vfprintf_internal_r+0x1440>
10004c00:	9546b03a 	or	r3,r18,r21
10004c04:	18038f26 	beq	r3,zero,10005a44 <___vfprintf_internal_r+0x1914>
10004c08:	00800c04 	movi	r2,48
10004c0c:	d8812705 	stb	r2,1180(sp)
10004c10:	dc012745 	stb	r16,1181(sp)
10004c14:	e7000094 	ori	fp,fp,2
10004c18:	00800084 	movi	r2,2
10004c1c:	003fd406 	br	10004b70 <__alt_data_end+0xf8004b70>
10004c20:	9cc00814 	ori	r19,r19,32
10004c24:	e005883a 	mov	r2,fp
10004c28:	e4000007 	ldb	r16,0(fp)
10004c2c:	003da806 	br	100042d0 <__alt_data_end+0xf80042d0>
10004c30:	da012a17 	ldw	r8,1192(sp)
10004c34:	df012a15 	stw	fp,1192(sp)
10004c38:	9839883a 	mov	fp,r19
10004c3c:	e0c0080c 	andi	r3,fp,32
10004c40:	d8812d17 	ldw	r2,1204(sp)
10004c44:	183fd41e 	bne	r3,zero,10004b98 <__alt_data_end+0xf8004b98>
10004c48:	e0c0040c 	andi	r3,fp,16
10004c4c:	18035f26 	beq	r3,zero,100059cc <___vfprintf_internal_r+0x189c>
10004c50:	d9412d17 	ldw	r5,1204(sp)
10004c54:	14800017 	ldw	r18,0(r2)
10004c58:	002b883a 	mov	r21,zero
10004c5c:	29400104 	addi	r5,r5,4
10004c60:	d9412d15 	stw	r5,1204(sp)
10004c64:	00800044 	movi	r2,1
10004c68:	9007883a 	mov	r3,r18
10004c6c:	003fc006 	br	10004b70 <__alt_data_end+0xf8004b70>
10004c70:	da012a17 	ldw	r8,1192(sp)
10004c74:	df012a15 	stw	fp,1192(sp)
10004c78:	9839883a 	mov	fp,r19
10004c7c:	dcc12b03 	ldbu	r19,1196(sp)
10004c80:	01040074 	movhi	r4,4097
10004c84:	21048a04 	addi	r4,r4,4648
10004c88:	d9013b15 	stw	r4,1260(sp)
10004c8c:	dcc12785 	stb	r19,1182(sp)
10004c90:	e0c0080c 	andi	r3,fp,32
10004c94:	d8812d17 	ldw	r2,1204(sp)
10004c98:	183fd21e 	bne	r3,zero,10004be4 <__alt_data_end+0xf8004be4>
10004c9c:	e0c0040c 	andi	r3,fp,16
10004ca0:	18035426 	beq	r3,zero,100059f4 <___vfprintf_internal_r+0x18c4>
10004ca4:	d8c12d17 	ldw	r3,1204(sp)
10004ca8:	14800017 	ldw	r18,0(r2)
10004cac:	002b883a 	mov	r21,zero
10004cb0:	18c00104 	addi	r3,r3,4
10004cb4:	d8c12d15 	stw	r3,1204(sp)
10004cb8:	003fcf06 	br	10004bf8 <__alt_data_end+0xf8004bf8>
10004cbc:	e4000007 	ldb	r16,0(fp)
10004cc0:	00801b04 	movi	r2,108
10004cc4:	8083f726 	beq	r16,r2,10005ca4 <___vfprintf_internal_r+0x1b74>
10004cc8:	9cc00414 	ori	r19,r19,16
10004ccc:	e005883a 	mov	r2,fp
10004cd0:	003d7f06 	br	100042d0 <__alt_data_end+0xf80042d0>
10004cd4:	da012a17 	ldw	r8,1192(sp)
10004cd8:	df012a15 	stw	fp,1192(sp)
10004cdc:	9839883a 	mov	fp,r19
10004ce0:	dcc12b03 	ldbu	r19,1196(sp)
10004ce4:	e080080c 	andi	r2,fp,32
10004ce8:	dcc12785 	stb	r19,1182(sp)
10004cec:	10032226 	beq	r2,zero,10005978 <___vfprintf_internal_r+0x1848>
10004cf0:	d9412d17 	ldw	r5,1204(sp)
10004cf4:	d9012f17 	ldw	r4,1212(sp)
10004cf8:	28800017 	ldw	r2,0(r5)
10004cfc:	2007d7fa 	srai	r3,r4,31
10004d00:	29400104 	addi	r5,r5,4
10004d04:	d9412d15 	stw	r5,1204(sp)
10004d08:	11000015 	stw	r4,0(r2)
10004d0c:	10c00115 	stw	r3,4(r2)
10004d10:	003d4406 	br	10004224 <__alt_data_end+0xf8004224>
10004d14:	da012a17 	ldw	r8,1192(sp)
10004d18:	df012a15 	stw	fp,1192(sp)
10004d1c:	9839883a 	mov	fp,r19
10004d20:	e0c0080c 	andi	r3,fp,32
10004d24:	d8812d17 	ldw	r2,1204(sp)
10004d28:	183f8a1e 	bne	r3,zero,10004b54 <__alt_data_end+0xf8004b54>
10004d2c:	e0c0040c 	andi	r3,fp,16
10004d30:	18031c26 	beq	r3,zero,100059a4 <___vfprintf_internal_r+0x1874>
10004d34:	14800017 	ldw	r18,0(r2)
10004d38:	d8812d17 	ldw	r2,1204(sp)
10004d3c:	002b883a 	mov	r21,zero
10004d40:	9007883a 	mov	r3,r18
10004d44:	10800104 	addi	r2,r2,4
10004d48:	d8812d15 	stw	r2,1204(sp)
10004d4c:	0005883a 	mov	r2,zero
10004d50:	003f8706 	br	10004b70 <__alt_data_end+0xf8004b70>
10004d54:	d9412d17 	ldw	r5,1204(sp)
10004d58:	00800c04 	movi	r2,48
10004d5c:	d8812705 	stb	r2,1180(sp)
10004d60:	2c800017 	ldw	r18,0(r5)
10004d64:	00801e04 	movi	r2,120
10004d68:	d8812745 	stb	r2,1181(sp)
10004d6c:	00840074 	movhi	r2,4097
10004d70:	10848a04 	addi	r2,r2,4648
10004d74:	29400104 	addi	r5,r5,4
10004d78:	da012a17 	ldw	r8,1192(sp)
10004d7c:	d8813b15 	stw	r2,1260(sp)
10004d80:	df012a15 	stw	fp,1192(sp)
10004d84:	002b883a 	mov	r21,zero
10004d88:	9f000094 	ori	fp,r19,2
10004d8c:	d9412d15 	stw	r5,1204(sp)
10004d90:	00800084 	movi	r2,2
10004d94:	04001e04 	movi	r16,120
10004d98:	9007883a 	mov	r3,r18
10004d9c:	003f7406 	br	10004b70 <__alt_data_end+0xf8004b70>
10004da0:	da012a17 	ldw	r8,1192(sp)
10004da4:	df012a15 	stw	fp,1192(sp)
10004da8:	9839883a 	mov	fp,r19
10004dac:	dcc12b03 	ldbu	r19,1196(sp)
10004db0:	e080080c 	andi	r2,fp,32
10004db4:	d8c12d17 	ldw	r3,1204(sp)
10004db8:	dcc12785 	stb	r19,1182(sp)
10004dbc:	103e321e 	bne	r2,zero,10004688 <__alt_data_end+0xf8004688>
10004dc0:	e080040c 	andi	r2,fp,16
10004dc4:	10031326 	beq	r2,zero,10005a14 <___vfprintf_internal_r+0x18e4>
10004dc8:	1c800017 	ldw	r18,0(r3)
10004dcc:	d9412d17 	ldw	r5,1204(sp)
10004dd0:	902bd7fa 	srai	r21,r18,31
10004dd4:	29400104 	addi	r5,r5,4
10004dd8:	d9412d15 	stw	r5,1204(sp)
10004ddc:	a805883a 	mov	r2,r21
10004de0:	003e2f06 	br	100046a0 <__alt_data_end+0xf80046a0>
10004de4:	9cc01014 	ori	r19,r19,64
10004de8:	e005883a 	mov	r2,fp
10004dec:	e4000007 	ldb	r16,0(fp)
10004df0:	003d3706 	br	100042d0 <__alt_data_end+0xf80042d0>
10004df4:	d8c12d17 	ldw	r3,1204(sp)
10004df8:	d9012d17 	ldw	r4,1204(sp)
10004dfc:	da012a17 	ldw	r8,1192(sp)
10004e00:	18800017 	ldw	r2,0(r3)
10004e04:	21000104 	addi	r4,r4,4
10004e08:	00c00044 	movi	r3,1
10004e0c:	df012a15 	stw	fp,1192(sp)
10004e10:	d8c12b15 	stw	r3,1196(sp)
10004e14:	9839883a 	mov	fp,r19
10004e18:	d8012785 	stb	zero,1182(sp)
10004e1c:	d8810405 	stb	r2,1040(sp)
10004e20:	d9012d15 	stw	r4,1204(sp)
10004e24:	1823883a 	mov	r17,r3
10004e28:	d8c10404 	addi	r3,sp,1040
10004e2c:	d8013215 	stw	zero,1224(sp)
10004e30:	d8013415 	stw	zero,1232(sp)
10004e34:	d8c13115 	stw	r3,1220(sp)
10004e38:	0005883a 	mov	r2,zero
10004e3c:	003e4306 	br	1000474c <__alt_data_end+0xf800474c>
10004e40:	d8812b07 	ldb	r2,1196(sp)
10004e44:	1002fc1e 	bne	r2,zero,10005a38 <___vfprintf_internal_r+0x1908>
10004e48:	00c00804 	movi	r3,32
10004e4c:	d8c12b05 	stb	r3,1196(sp)
10004e50:	e005883a 	mov	r2,fp
10004e54:	e4000007 	ldb	r16,0(fp)
10004e58:	003d1d06 	br	100042d0 <__alt_data_end+0xf80042d0>
10004e5c:	9cc00054 	ori	r19,r19,1
10004e60:	e005883a 	mov	r2,fp
10004e64:	e4000007 	ldb	r16,0(fp)
10004e68:	003d1906 	br	100042d0 <__alt_data_end+0xf80042d0>
10004e6c:	d9012d17 	ldw	r4,1204(sp)
10004e70:	d9412d17 	ldw	r5,1204(sp)
10004e74:	21000017 	ldw	r4,0(r4)
10004e78:	28c00104 	addi	r3,r5,4
10004e7c:	d9012e15 	stw	r4,1208(sp)
10004e80:	20038c16 	blt	r4,zero,10005cb4 <___vfprintf_internal_r+0x1b84>
10004e84:	d8c12d15 	stw	r3,1204(sp)
10004e88:	e005883a 	mov	r2,fp
10004e8c:	e4000007 	ldb	r16,0(fp)
10004e90:	003d0f06 	br	100042d0 <__alt_data_end+0xf80042d0>
10004e94:	00c00ac4 	movi	r3,43
10004e98:	d8c12b05 	stb	r3,1196(sp)
10004e9c:	e005883a 	mov	r2,fp
10004ea0:	e4000007 	ldb	r16,0(fp)
10004ea4:	003d0a06 	br	100042d0 <__alt_data_end+0xf80042d0>
10004ea8:	d8c12d17 	ldw	r3,1204(sp)
10004eac:	d9012d17 	ldw	r4,1204(sp)
10004eb0:	da012a17 	ldw	r8,1192(sp)
10004eb4:	18c00017 	ldw	r3,0(r3)
10004eb8:	df012a15 	stw	fp,1192(sp)
10004ebc:	d8012785 	stb	zero,1182(sp)
10004ec0:	d8c13115 	stw	r3,1220(sp)
10004ec4:	9839883a 	mov	fp,r19
10004ec8:	24800104 	addi	r18,r4,4
10004ecc:	1803f726 	beq	r3,zero,10005eac <___vfprintf_internal_r+0x1d7c>
10004ed0:	d9013117 	ldw	r4,1220(sp)
10004ed4:	48038916 	blt	r9,zero,10005cfc <___vfprintf_internal_r+0x1bcc>
10004ed8:	480d883a 	mov	r6,r9
10004edc:	000b883a 	mov	r5,zero
10004ee0:	da013f15 	stw	r8,1276(sp)
10004ee4:	da413e15 	stw	r9,1272(sp)
10004ee8:	00092a00 	call	100092a0 <memchr>
10004eec:	da013f17 	ldw	r8,1276(sp)
10004ef0:	da413e17 	ldw	r9,1272(sp)
10004ef4:	10045926 	beq	r2,zero,1000605c <___vfprintf_internal_r+0x1f2c>
10004ef8:	d8c13117 	ldw	r3,1220(sp)
10004efc:	10e3c83a 	sub	r17,r2,r3
10004f00:	4c433516 	blt	r9,r17,10005bd8 <___vfprintf_internal_r+0x1aa8>
10004f04:	8805883a 	mov	r2,r17
10004f08:	88038116 	blt	r17,zero,10005d10 <___vfprintf_internal_r+0x1be0>
10004f0c:	dcc12783 	ldbu	r19,1182(sp)
10004f10:	d8812b15 	stw	r2,1196(sp)
10004f14:	dc812d15 	stw	r18,1204(sp)
10004f18:	d8013215 	stw	zero,1224(sp)
10004f1c:	d8013415 	stw	zero,1232(sp)
10004f20:	003e0306 	br	10004730 <__alt_data_end+0xf8004730>
10004f24:	da012a17 	ldw	r8,1192(sp)
10004f28:	df012a15 	stw	fp,1192(sp)
10004f2c:	9839883a 	mov	fp,r19
10004f30:	dcc12b03 	ldbu	r19,1196(sp)
10004f34:	dcc12785 	stb	r19,1182(sp)
10004f38:	803d8f26 	beq	r16,zero,10004578 <__alt_data_end+0xf8004578>
10004f3c:	00c00044 	movi	r3,1
10004f40:	d8c12b15 	stw	r3,1196(sp)
10004f44:	dc010405 	stb	r16,1040(sp)
10004f48:	d8012785 	stb	zero,1182(sp)
10004f4c:	003fb506 	br	10004e24 <__alt_data_end+0xf8004e24>
10004f50:	d8c12017 	ldw	r3,1152(sp)
10004f54:	003e3506 	br	1000482c <__alt_data_end+0xf800482c>
10004f58:	10803fcc 	andi	r2,r2,255
10004f5c:	00c00044 	movi	r3,1
10004f60:	10fddc1e 	bne	r2,r3,100046d4 <__alt_data_end+0xf80046d4>
10004f64:	a800021e 	bne	r21,zero,10004f70 <___vfprintf_internal_r+0xe40>
10004f68:	00800244 	movi	r2,9
10004f6c:	14801e2e 	bgeu	r2,r18,10004fe8 <___vfprintf_internal_r+0xeb8>
10004f70:	dc012b15 	stw	r16,1196(sp)
10004f74:	dc410e04 	addi	r17,sp,1080
10004f78:	9021883a 	mov	r16,r18
10004f7c:	da012c15 	stw	r8,1200(sp)
10004f80:	a825883a 	mov	r18,r21
10004f84:	482b883a 	mov	r21,r9
10004f88:	8009883a 	mov	r4,r16
10004f8c:	900b883a 	mov	r5,r18
10004f90:	01800284 	movi	r6,10
10004f94:	000f883a 	mov	r7,zero
10004f98:	00025b40 	call	100025b4 <__umoddi3>
10004f9c:	10800c04 	addi	r2,r2,48
10004fa0:	8c7fffc4 	addi	r17,r17,-1
10004fa4:	8009883a 	mov	r4,r16
10004fa8:	900b883a 	mov	r5,r18
10004fac:	01800284 	movi	r6,10
10004fb0:	000f883a 	mov	r7,zero
10004fb4:	88800005 	stb	r2,0(r17)
10004fb8:	0001f740 	call	10001f74 <__udivdi3>
10004fbc:	1021883a 	mov	r16,r2
10004fc0:	10c4b03a 	or	r2,r2,r3
10004fc4:	1825883a 	mov	r18,r3
10004fc8:	103fef1e 	bne	r2,zero,10004f88 <__alt_data_end+0xf8004f88>
10004fcc:	d9012817 	ldw	r4,1184(sp)
10004fd0:	dc413115 	stw	r17,1220(sp)
10004fd4:	dc012b17 	ldw	r16,1196(sp)
10004fd8:	da012c17 	ldw	r8,1200(sp)
10004fdc:	a813883a 	mov	r9,r21
10004fe0:	2463c83a 	sub	r17,r4,r17
10004fe4:	003dcd06 	br	1000471c <__alt_data_end+0xf800471c>
10004fe8:	94800c04 	addi	r18,r18,48
10004fec:	d8c10dc4 	addi	r3,sp,1079
10004ff0:	dc810dc5 	stb	r18,1079(sp)
10004ff4:	dc413c17 	ldw	r17,1264(sp)
10004ff8:	d8c13115 	stw	r3,1220(sp)
10004ffc:	003dc706 	br	1000471c <__alt_data_end+0xf800471c>
10005000:	00801944 	movi	r2,101
10005004:	1400720e 	bge	r2,r16,100051d0 <___vfprintf_internal_r+0x10a0>
10005008:	d9013717 	ldw	r4,1244(sp)
1000500c:	d9413917 	ldw	r5,1252(sp)
10005010:	000d883a 	mov	r6,zero
10005014:	000f883a 	mov	r7,zero
10005018:	d8c13d15 	stw	r3,1268(sp)
1000501c:	da013f15 	stw	r8,1276(sp)
10005020:	000de400 	call	1000de40 <__eqdf2>
10005024:	d8c13d17 	ldw	r3,1268(sp)
10005028:	da013f17 	ldw	r8,1276(sp)
1000502c:	1000f41e 	bne	r2,zero,10005400 <___vfprintf_internal_r+0x12d0>
10005030:	d8811f17 	ldw	r2,1148(sp)
10005034:	01040074 	movhi	r4,4097
10005038:	21049104 	addi	r4,r4,4676
1000503c:	18c00044 	addi	r3,r3,1
10005040:	10800044 	addi	r2,r2,1
10005044:	41000015 	stw	r4,0(r8)
10005048:	01000044 	movi	r4,1
1000504c:	41000115 	stw	r4,4(r8)
10005050:	d8c12015 	stw	r3,1152(sp)
10005054:	d8811f15 	stw	r2,1148(sp)
10005058:	010001c4 	movi	r4,7
1000505c:	20828d16 	blt	r4,r2,10005a94 <___vfprintf_internal_r+0x1964>
10005060:	42000204 	addi	r8,r8,8
10005064:	d8812617 	ldw	r2,1176(sp)
10005068:	d9413317 	ldw	r5,1228(sp)
1000506c:	11400216 	blt	r2,r5,10005078 <___vfprintf_internal_r+0xf48>
10005070:	e080004c 	andi	r2,fp,1
10005074:	103e4126 	beq	r2,zero,1000497c <__alt_data_end+0xf800497c>
10005078:	d8813817 	ldw	r2,1248(sp)
1000507c:	d9013517 	ldw	r4,1236(sp)
10005080:	d9413817 	ldw	r5,1248(sp)
10005084:	1887883a 	add	r3,r3,r2
10005088:	d8811f17 	ldw	r2,1148(sp)
1000508c:	41000015 	stw	r4,0(r8)
10005090:	41400115 	stw	r5,4(r8)
10005094:	10800044 	addi	r2,r2,1
10005098:	d8c12015 	stw	r3,1152(sp)
1000509c:	d8811f15 	stw	r2,1148(sp)
100050a0:	010001c4 	movi	r4,7
100050a4:	20830916 	blt	r4,r2,10005ccc <___vfprintf_internal_r+0x1b9c>
100050a8:	42000204 	addi	r8,r8,8
100050ac:	d8813317 	ldw	r2,1228(sp)
100050b0:	143fffc4 	addi	r16,r2,-1
100050b4:	043e310e 	bge	zero,r16,1000497c <__alt_data_end+0xf800497c>
100050b8:	04400404 	movi	r17,16
100050bc:	d8811f17 	ldw	r2,1148(sp)
100050c0:	8c007e0e 	bge	r17,r16,100052bc <___vfprintf_internal_r+0x118c>
100050c4:	01440074 	movhi	r5,4097
100050c8:	29449184 	addi	r5,r5,4678
100050cc:	d9412c15 	stw	r5,1200(sp)
100050d0:	04c001c4 	movi	r19,7
100050d4:	00000306 	br	100050e4 <___vfprintf_internal_r+0xfb4>
100050d8:	42000204 	addi	r8,r8,8
100050dc:	843ffc04 	addi	r16,r16,-16
100050e0:	8c00790e 	bge	r17,r16,100052c8 <___vfprintf_internal_r+0x1198>
100050e4:	18c00404 	addi	r3,r3,16
100050e8:	10800044 	addi	r2,r2,1
100050ec:	45000015 	stw	r20,0(r8)
100050f0:	44400115 	stw	r17,4(r8)
100050f4:	d8c12015 	stw	r3,1152(sp)
100050f8:	d8811f15 	stw	r2,1148(sp)
100050fc:	98bff60e 	bge	r19,r2,100050d8 <__alt_data_end+0xf80050d8>
10005100:	b809883a 	mov	r4,r23
10005104:	b00b883a 	mov	r5,r22
10005108:	d9811e04 	addi	r6,sp,1144
1000510c:	000aa680 	call	1000aa68 <__sprint_r>
10005110:	103d1f1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005114:	d8c12017 	ldw	r3,1152(sp)
10005118:	d8811f17 	ldw	r2,1148(sp)
1000511c:	da000404 	addi	r8,sp,16
10005120:	003fee06 	br	100050dc <__alt_data_end+0xf80050dc>
10005124:	d9412e17 	ldw	r5,1208(sp)
10005128:	d8812b17 	ldw	r2,1196(sp)
1000512c:	28a7c83a 	sub	r19,r5,r2
10005130:	04fddc0e 	bge	zero,r19,100048a4 <__alt_data_end+0xf80048a4>
10005134:	05400404 	movi	r21,16
10005138:	d8811f17 	ldw	r2,1148(sp)
1000513c:	acc3870e 	bge	r21,r19,10005f5c <___vfprintf_internal_r+0x1e2c>
10005140:	01440074 	movhi	r5,4097
10005144:	29449184 	addi	r5,r5,4678
10005148:	d9412c15 	stw	r5,1200(sp)
1000514c:	048001c4 	movi	r18,7
10005150:	00000306 	br	10005160 <___vfprintf_internal_r+0x1030>
10005154:	9cfffc04 	addi	r19,r19,-16
10005158:	42000204 	addi	r8,r8,8
1000515c:	acc0110e 	bge	r21,r19,100051a4 <___vfprintf_internal_r+0x1074>
10005160:	18c00404 	addi	r3,r3,16
10005164:	10800044 	addi	r2,r2,1
10005168:	45000015 	stw	r20,0(r8)
1000516c:	45400115 	stw	r21,4(r8)
10005170:	d8c12015 	stw	r3,1152(sp)
10005174:	d8811f15 	stw	r2,1148(sp)
10005178:	90bff60e 	bge	r18,r2,10005154 <__alt_data_end+0xf8005154>
1000517c:	b809883a 	mov	r4,r23
10005180:	b00b883a 	mov	r5,r22
10005184:	d9811e04 	addi	r6,sp,1144
10005188:	000aa680 	call	1000aa68 <__sprint_r>
1000518c:	103d001e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005190:	9cfffc04 	addi	r19,r19,-16
10005194:	d8c12017 	ldw	r3,1152(sp)
10005198:	d8811f17 	ldw	r2,1148(sp)
1000519c:	da000404 	addi	r8,sp,16
100051a0:	acffef16 	blt	r21,r19,10005160 <__alt_data_end+0xf8005160>
100051a4:	d9012c17 	ldw	r4,1200(sp)
100051a8:	1cc7883a 	add	r3,r3,r19
100051ac:	10800044 	addi	r2,r2,1
100051b0:	41000015 	stw	r4,0(r8)
100051b4:	44c00115 	stw	r19,4(r8)
100051b8:	d8c12015 	stw	r3,1152(sp)
100051bc:	d8811f15 	stw	r2,1148(sp)
100051c0:	010001c4 	movi	r4,7
100051c4:	20817816 	blt	r4,r2,100057a8 <___vfprintf_internal_r+0x1678>
100051c8:	42000204 	addi	r8,r8,8
100051cc:	003db506 	br	100048a4 <__alt_data_end+0xf80048a4>
100051d0:	d9413317 	ldw	r5,1228(sp)
100051d4:	00800044 	movi	r2,1
100051d8:	18c00044 	addi	r3,r3,1
100051dc:	11413e0e 	bge	r2,r5,100056d8 <___vfprintf_internal_r+0x15a8>
100051e0:	dc011f17 	ldw	r16,1148(sp)
100051e4:	d8813117 	ldw	r2,1220(sp)
100051e8:	d8c12015 	stw	r3,1152(sp)
100051ec:	84000044 	addi	r16,r16,1
100051f0:	40800015 	stw	r2,0(r8)
100051f4:	00800044 	movi	r2,1
100051f8:	40800115 	stw	r2,4(r8)
100051fc:	dc011f15 	stw	r16,1148(sp)
10005200:	008001c4 	movi	r2,7
10005204:	14015616 	blt	r2,r16,10005760 <___vfprintf_internal_r+0x1630>
10005208:	42000204 	addi	r8,r8,8
1000520c:	d9013817 	ldw	r4,1248(sp)
10005210:	d9413517 	ldw	r5,1236(sp)
10005214:	84000044 	addi	r16,r16,1
10005218:	1907883a 	add	r3,r3,r4
1000521c:	41400015 	stw	r5,0(r8)
10005220:	41000115 	stw	r4,4(r8)
10005224:	d8c12015 	stw	r3,1152(sp)
10005228:	dc011f15 	stw	r16,1148(sp)
1000522c:	008001c4 	movi	r2,7
10005230:	14015416 	blt	r2,r16,10005784 <___vfprintf_internal_r+0x1654>
10005234:	44400204 	addi	r17,r8,8
10005238:	d9013717 	ldw	r4,1244(sp)
1000523c:	d9413917 	ldw	r5,1252(sp)
10005240:	000d883a 	mov	r6,zero
10005244:	000f883a 	mov	r7,zero
10005248:	d8c13d15 	stw	r3,1268(sp)
1000524c:	000de400 	call	1000de40 <__eqdf2>
10005250:	d8c13d17 	ldw	r3,1268(sp)
10005254:	1000a726 	beq	r2,zero,100054f4 <___vfprintf_internal_r+0x13c4>
10005258:	d9013317 	ldw	r4,1228(sp)
1000525c:	d9413117 	ldw	r5,1220(sp)
10005260:	84000044 	addi	r16,r16,1
10005264:	20bfffc4 	addi	r2,r4,-1
10005268:	1887883a 	add	r3,r3,r2
1000526c:	29000044 	addi	r4,r5,1
10005270:	88800115 	stw	r2,4(r17)
10005274:	89000015 	stw	r4,0(r17)
10005278:	d8c12015 	stw	r3,1152(sp)
1000527c:	dc011f15 	stw	r16,1148(sp)
10005280:	008001c4 	movi	r2,7
10005284:	14012d16 	blt	r2,r16,1000573c <___vfprintf_internal_r+0x160c>
10005288:	8c400204 	addi	r17,r17,8
1000528c:	d9413a17 	ldw	r5,1256(sp)
10005290:	dcc122c4 	addi	r19,sp,1163
10005294:	84000044 	addi	r16,r16,1
10005298:	28c7883a 	add	r3,r5,r3
1000529c:	8cc00015 	stw	r19,0(r17)
100052a0:	89400115 	stw	r5,4(r17)
100052a4:	d8c12015 	stw	r3,1152(sp)
100052a8:	dc011f15 	stw	r16,1148(sp)
100052ac:	008001c4 	movi	r2,7
100052b0:	14000e16 	blt	r2,r16,100052ec <___vfprintf_internal_r+0x11bc>
100052b4:	8a000204 	addi	r8,r17,8
100052b8:	003db006 	br	1000497c <__alt_data_end+0xf800497c>
100052bc:	01040074 	movhi	r4,4097
100052c0:	21049184 	addi	r4,r4,4678
100052c4:	d9012c15 	stw	r4,1200(sp)
100052c8:	d9012c17 	ldw	r4,1200(sp)
100052cc:	1c07883a 	add	r3,r3,r16
100052d0:	44000115 	stw	r16,4(r8)
100052d4:	41000015 	stw	r4,0(r8)
100052d8:	10800044 	addi	r2,r2,1
100052dc:	d8c12015 	stw	r3,1152(sp)
100052e0:	d8811f15 	stw	r2,1148(sp)
100052e4:	010001c4 	movi	r4,7
100052e8:	20bda30e 	bge	r4,r2,10004978 <__alt_data_end+0xf8004978>
100052ec:	b809883a 	mov	r4,r23
100052f0:	b00b883a 	mov	r5,r22
100052f4:	d9811e04 	addi	r6,sp,1144
100052f8:	000aa680 	call	1000aa68 <__sprint_r>
100052fc:	103ca41e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005300:	d8c12017 	ldw	r3,1152(sp)
10005304:	da000404 	addi	r8,sp,16
10005308:	003d9c06 	br	1000497c <__alt_data_end+0xf800497c>
1000530c:	b809883a 	mov	r4,r23
10005310:	b00b883a 	mov	r5,r22
10005314:	d9811e04 	addi	r6,sp,1144
10005318:	000aa680 	call	1000aa68 <__sprint_r>
1000531c:	103dd226 	beq	r2,zero,10004a68 <__alt_data_end+0xf8004a68>
10005320:	003c9b06 	br	10004590 <__alt_data_end+0xf8004590>
10005324:	10803fcc 	andi	r2,r2,255
10005328:	1000311e 	bne	r2,zero,100053f0 <___vfprintf_internal_r+0x12c0>
1000532c:	e080004c 	andi	r2,fp,1
10005330:	10002f26 	beq	r2,zero,100053f0 <___vfprintf_internal_r+0x12c0>
10005334:	00800c04 	movi	r2,48
10005338:	d8c10dc4 	addi	r3,sp,1079
1000533c:	d8810dc5 	stb	r2,1079(sp)
10005340:	dc413c17 	ldw	r17,1264(sp)
10005344:	d8c13115 	stw	r3,1220(sp)
10005348:	003cf406 	br	1000471c <__alt_data_end+0xf800471c>
1000534c:	b809883a 	mov	r4,r23
10005350:	b00b883a 	mov	r5,r22
10005354:	d9811e04 	addi	r6,sp,1144
10005358:	000aa680 	call	1000aa68 <__sprint_r>
1000535c:	103c8c1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005360:	d8c12017 	ldw	r3,1152(sp)
10005364:	da000404 	addi	r8,sp,16
10005368:	003d7706 	br	10004948 <__alt_data_end+0xf8004948>
1000536c:	b809883a 	mov	r4,r23
10005370:	b00b883a 	mov	r5,r22
10005374:	d9811e04 	addi	r6,sp,1144
10005378:	000aa680 	call	1000aa68 <__sprint_r>
1000537c:	103c841e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005380:	d8c12017 	ldw	r3,1152(sp)
10005384:	da000404 	addi	r8,sp,16
10005388:	003d3506 	br	10004860 <__alt_data_end+0xf8004860>
1000538c:	b809883a 	mov	r4,r23
10005390:	b00b883a 	mov	r5,r22
10005394:	d9811e04 	addi	r6,sp,1144
10005398:	000aa680 	call	1000aa68 <__sprint_r>
1000539c:	103c7c1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100053a0:	d8c12017 	ldw	r3,1152(sp)
100053a4:	da000404 	addi	r8,sp,16
100053a8:	003d3b06 	br	10004898 <__alt_data_end+0xf8004898>
100053ac:	d9413b17 	ldw	r5,1260(sp)
100053b0:	d8c10e04 	addi	r3,sp,1080
100053b4:	908003cc 	andi	r2,r18,15
100053b8:	a808973a 	slli	r4,r21,28
100053bc:	2885883a 	add	r2,r5,r2
100053c0:	9024d13a 	srli	r18,r18,4
100053c4:	10800003 	ldbu	r2,0(r2)
100053c8:	a82ad13a 	srli	r21,r21,4
100053cc:	18ffffc4 	addi	r3,r3,-1
100053d0:	24a4b03a 	or	r18,r4,r18
100053d4:	18800005 	stb	r2,0(r3)
100053d8:	9544b03a 	or	r2,r18,r21
100053dc:	103ff51e 	bne	r2,zero,100053b4 <__alt_data_end+0xf80053b4>
100053e0:	d9412817 	ldw	r5,1184(sp)
100053e4:	d8c13115 	stw	r3,1220(sp)
100053e8:	28e3c83a 	sub	r17,r5,r3
100053ec:	003ccb06 	br	1000471c <__alt_data_end+0xf800471c>
100053f0:	d8c10e04 	addi	r3,sp,1080
100053f4:	0023883a 	mov	r17,zero
100053f8:	d8c13115 	stw	r3,1220(sp)
100053fc:	003cc706 	br	1000471c <__alt_data_end+0xf800471c>
10005400:	dc012617 	ldw	r16,1176(sp)
10005404:	0401ab0e 	bge	zero,r16,10005ab4 <___vfprintf_internal_r+0x1984>
10005408:	d8813317 	ldw	r2,1228(sp)
1000540c:	d9413117 	ldw	r5,1220(sp)
10005410:	d9013417 	ldw	r4,1232(sp)
10005414:	1023883a 	mov	r17,r2
10005418:	28a1883a 	add	r16,r5,r2
1000541c:	2080010e 	bge	r4,r2,10005424 <___vfprintf_internal_r+0x12f4>
10005420:	2023883a 	mov	r17,r4
10005424:	04400b0e 	bge	zero,r17,10005454 <___vfprintf_internal_r+0x1324>
10005428:	d8811f17 	ldw	r2,1148(sp)
1000542c:	d9413117 	ldw	r5,1220(sp)
10005430:	1c47883a 	add	r3,r3,r17
10005434:	10800044 	addi	r2,r2,1
10005438:	41400015 	stw	r5,0(r8)
1000543c:	44400115 	stw	r17,4(r8)
10005440:	d8c12015 	stw	r3,1152(sp)
10005444:	d8811f15 	stw	r2,1148(sp)
10005448:	010001c4 	movi	r4,7
1000544c:	20826716 	blt	r4,r2,10005dec <___vfprintf_internal_r+0x1cbc>
10005450:	42000204 	addi	r8,r8,8
10005454:	88026316 	blt	r17,zero,10005de4 <___vfprintf_internal_r+0x1cb4>
10005458:	d8813417 	ldw	r2,1232(sp)
1000545c:	1463c83a 	sub	r17,r2,r17
10005460:	0440590e 	bge	zero,r17,100055c8 <___vfprintf_internal_r+0x1498>
10005464:	04c00404 	movi	r19,16
10005468:	d8811f17 	ldw	r2,1148(sp)
1000546c:	9c41770e 	bge	r19,r17,10005a4c <___vfprintf_internal_r+0x191c>
10005470:	01440074 	movhi	r5,4097
10005474:	29449184 	addi	r5,r5,4678
10005478:	d9412c15 	stw	r5,1200(sp)
1000547c:	054001c4 	movi	r21,7
10005480:	00000306 	br	10005490 <___vfprintf_internal_r+0x1360>
10005484:	42000204 	addi	r8,r8,8
10005488:	8c7ffc04 	addi	r17,r17,-16
1000548c:	9c41720e 	bge	r19,r17,10005a58 <___vfprintf_internal_r+0x1928>
10005490:	18c00404 	addi	r3,r3,16
10005494:	10800044 	addi	r2,r2,1
10005498:	45000015 	stw	r20,0(r8)
1000549c:	44c00115 	stw	r19,4(r8)
100054a0:	d8c12015 	stw	r3,1152(sp)
100054a4:	d8811f15 	stw	r2,1148(sp)
100054a8:	a8bff60e 	bge	r21,r2,10005484 <__alt_data_end+0xf8005484>
100054ac:	b809883a 	mov	r4,r23
100054b0:	b00b883a 	mov	r5,r22
100054b4:	d9811e04 	addi	r6,sp,1144
100054b8:	000aa680 	call	1000aa68 <__sprint_r>
100054bc:	103c341e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100054c0:	d8c12017 	ldw	r3,1152(sp)
100054c4:	d8811f17 	ldw	r2,1148(sp)
100054c8:	da000404 	addi	r8,sp,16
100054cc:	003fee06 	br	10005488 <__alt_data_end+0xf8005488>
100054d0:	b809883a 	mov	r4,r23
100054d4:	b00b883a 	mov	r5,r22
100054d8:	d9811e04 	addi	r6,sp,1144
100054dc:	000aa680 	call	1000aa68 <__sprint_r>
100054e0:	103c2b1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100054e4:	d8c12017 	ldw	r3,1152(sp)
100054e8:	d8812787 	ldb	r2,1182(sp)
100054ec:	da000404 	addi	r8,sp,16
100054f0:	003cce06 	br	1000482c <__alt_data_end+0xf800482c>
100054f4:	d8813317 	ldw	r2,1228(sp)
100054f8:	14ffffc4 	addi	r19,r2,-1
100054fc:	04ff630e 	bge	zero,r19,1000528c <__alt_data_end+0xf800528c>
10005500:	05400404 	movi	r21,16
10005504:	acc0810e 	bge	r21,r19,1000570c <___vfprintf_internal_r+0x15dc>
10005508:	01440074 	movhi	r5,4097
1000550c:	29449184 	addi	r5,r5,4678
10005510:	d9412c15 	stw	r5,1200(sp)
10005514:	01c001c4 	movi	r7,7
10005518:	00000306 	br	10005528 <___vfprintf_internal_r+0x13f8>
1000551c:	8c400204 	addi	r17,r17,8
10005520:	9cfffc04 	addi	r19,r19,-16
10005524:	acc07c0e 	bge	r21,r19,10005718 <___vfprintf_internal_r+0x15e8>
10005528:	18c00404 	addi	r3,r3,16
1000552c:	84000044 	addi	r16,r16,1
10005530:	8d000015 	stw	r20,0(r17)
10005534:	8d400115 	stw	r21,4(r17)
10005538:	d8c12015 	stw	r3,1152(sp)
1000553c:	dc011f15 	stw	r16,1148(sp)
10005540:	3c3ff60e 	bge	r7,r16,1000551c <__alt_data_end+0xf800551c>
10005544:	b809883a 	mov	r4,r23
10005548:	b00b883a 	mov	r5,r22
1000554c:	d9811e04 	addi	r6,sp,1144
10005550:	d9c13d15 	stw	r7,1268(sp)
10005554:	000aa680 	call	1000aa68 <__sprint_r>
10005558:	d9c13d17 	ldw	r7,1268(sp)
1000555c:	103c0c1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005560:	d8c12017 	ldw	r3,1152(sp)
10005564:	dc011f17 	ldw	r16,1148(sp)
10005568:	dc400404 	addi	r17,sp,16
1000556c:	003fec06 	br	10005520 <__alt_data_end+0xf8005520>
10005570:	00800084 	movi	r2,2
10005574:	9546b03a 	or	r3,r18,r21
10005578:	003d7d06 	br	10004b70 <__alt_data_end+0xf8004b70>
1000557c:	10803fcc 	andi	r2,r2,255
10005580:	1080201c 	xori	r2,r2,128
10005584:	10bfe004 	addi	r2,r2,-128
10005588:	01000c04 	movi	r4,48
1000558c:	1101d726 	beq	r2,r4,10005cec <___vfprintf_internal_r+0x1bbc>
10005590:	d9413117 	ldw	r5,1220(sp)
10005594:	d8812817 	ldw	r2,1184(sp)
10005598:	193fffc5 	stb	r4,-1(r3)
1000559c:	297fffc4 	addi	r5,r5,-1
100055a0:	d9413115 	stw	r5,1220(sp)
100055a4:	1163c83a 	sub	r17,r2,r5
100055a8:	003c5c06 	br	1000471c <__alt_data_end+0xf800471c>
100055ac:	b809883a 	mov	r4,r23
100055b0:	b00b883a 	mov	r5,r22
100055b4:	d9811e04 	addi	r6,sp,1144
100055b8:	000aa680 	call	1000aa68 <__sprint_r>
100055bc:	103bf41e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100055c0:	d8c12017 	ldw	r3,1152(sp)
100055c4:	da000404 	addi	r8,sp,16
100055c8:	d9413117 	ldw	r5,1220(sp)
100055cc:	d9013417 	ldw	r4,1232(sp)
100055d0:	d8812617 	ldw	r2,1176(sp)
100055d4:	2923883a 	add	r17,r5,r4
100055d8:	d9413317 	ldw	r5,1228(sp)
100055dc:	11400216 	blt	r2,r5,100055e8 <___vfprintf_internal_r+0x14b8>
100055e0:	e100004c 	andi	r4,fp,1
100055e4:	20000d26 	beq	r4,zero,1000561c <___vfprintf_internal_r+0x14ec>
100055e8:	d9013817 	ldw	r4,1248(sp)
100055ec:	d9413517 	ldw	r5,1236(sp)
100055f0:	1907883a 	add	r3,r3,r4
100055f4:	d9011f17 	ldw	r4,1148(sp)
100055f8:	41400015 	stw	r5,0(r8)
100055fc:	d9413817 	ldw	r5,1248(sp)
10005600:	21000044 	addi	r4,r4,1
10005604:	d8c12015 	stw	r3,1152(sp)
10005608:	41400115 	stw	r5,4(r8)
1000560c:	d9011f15 	stw	r4,1148(sp)
10005610:	014001c4 	movi	r5,7
10005614:	2901fd16 	blt	r5,r4,10005e0c <___vfprintf_internal_r+0x1cdc>
10005618:	42000204 	addi	r8,r8,8
1000561c:	d9013317 	ldw	r4,1228(sp)
10005620:	2085c83a 	sub	r2,r4,r2
10005624:	8449c83a 	sub	r4,r16,r17
10005628:	1021883a 	mov	r16,r2
1000562c:	2080010e 	bge	r4,r2,10005634 <___vfprintf_internal_r+0x1504>
10005630:	2021883a 	mov	r16,r4
10005634:	04000a0e 	bge	zero,r16,10005660 <___vfprintf_internal_r+0x1530>
10005638:	d9011f17 	ldw	r4,1148(sp)
1000563c:	1c07883a 	add	r3,r3,r16
10005640:	44400015 	stw	r17,0(r8)
10005644:	21000044 	addi	r4,r4,1
10005648:	44000115 	stw	r16,4(r8)
1000564c:	d8c12015 	stw	r3,1152(sp)
10005650:	d9011f15 	stw	r4,1148(sp)
10005654:	014001c4 	movi	r5,7
10005658:	29020916 	blt	r5,r4,10005e80 <___vfprintf_internal_r+0x1d50>
1000565c:	42000204 	addi	r8,r8,8
10005660:	80020116 	blt	r16,zero,10005e68 <___vfprintf_internal_r+0x1d38>
10005664:	1421c83a 	sub	r16,r2,r16
10005668:	043cc40e 	bge	zero,r16,1000497c <__alt_data_end+0xf800497c>
1000566c:	04400404 	movi	r17,16
10005670:	d8811f17 	ldw	r2,1148(sp)
10005674:	8c3f110e 	bge	r17,r16,100052bc <__alt_data_end+0xf80052bc>
10005678:	01440074 	movhi	r5,4097
1000567c:	29449184 	addi	r5,r5,4678
10005680:	d9412c15 	stw	r5,1200(sp)
10005684:	04c001c4 	movi	r19,7
10005688:	00000306 	br	10005698 <___vfprintf_internal_r+0x1568>
1000568c:	42000204 	addi	r8,r8,8
10005690:	843ffc04 	addi	r16,r16,-16
10005694:	8c3f0c0e 	bge	r17,r16,100052c8 <__alt_data_end+0xf80052c8>
10005698:	18c00404 	addi	r3,r3,16
1000569c:	10800044 	addi	r2,r2,1
100056a0:	45000015 	stw	r20,0(r8)
100056a4:	44400115 	stw	r17,4(r8)
100056a8:	d8c12015 	stw	r3,1152(sp)
100056ac:	d8811f15 	stw	r2,1148(sp)
100056b0:	98bff60e 	bge	r19,r2,1000568c <__alt_data_end+0xf800568c>
100056b4:	b809883a 	mov	r4,r23
100056b8:	b00b883a 	mov	r5,r22
100056bc:	d9811e04 	addi	r6,sp,1144
100056c0:	000aa680 	call	1000aa68 <__sprint_r>
100056c4:	103bb21e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100056c8:	d8c12017 	ldw	r3,1152(sp)
100056cc:	d8811f17 	ldw	r2,1148(sp)
100056d0:	da000404 	addi	r8,sp,16
100056d4:	003fee06 	br	10005690 <__alt_data_end+0xf8005690>
100056d8:	e088703a 	and	r4,fp,r2
100056dc:	203ec01e 	bne	r4,zero,100051e0 <__alt_data_end+0xf80051e0>
100056e0:	dc011f17 	ldw	r16,1148(sp)
100056e4:	d9013117 	ldw	r4,1220(sp)
100056e8:	40800115 	stw	r2,4(r8)
100056ec:	84000044 	addi	r16,r16,1
100056f0:	41000015 	stw	r4,0(r8)
100056f4:	d8c12015 	stw	r3,1152(sp)
100056f8:	dc011f15 	stw	r16,1148(sp)
100056fc:	008001c4 	movi	r2,7
10005700:	14000e16 	blt	r2,r16,1000573c <___vfprintf_internal_r+0x160c>
10005704:	44400204 	addi	r17,r8,8
10005708:	003ee006 	br	1000528c <__alt_data_end+0xf800528c>
1000570c:	01040074 	movhi	r4,4097
10005710:	21049184 	addi	r4,r4,4678
10005714:	d9012c15 	stw	r4,1200(sp)
10005718:	d8812c17 	ldw	r2,1200(sp)
1000571c:	1cc7883a 	add	r3,r3,r19
10005720:	84000044 	addi	r16,r16,1
10005724:	88800015 	stw	r2,0(r17)
10005728:	8cc00115 	stw	r19,4(r17)
1000572c:	d8c12015 	stw	r3,1152(sp)
10005730:	dc011f15 	stw	r16,1148(sp)
10005734:	008001c4 	movi	r2,7
10005738:	143ed30e 	bge	r2,r16,10005288 <__alt_data_end+0xf8005288>
1000573c:	b809883a 	mov	r4,r23
10005740:	b00b883a 	mov	r5,r22
10005744:	d9811e04 	addi	r6,sp,1144
10005748:	000aa680 	call	1000aa68 <__sprint_r>
1000574c:	103b901e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005750:	d8c12017 	ldw	r3,1152(sp)
10005754:	dc011f17 	ldw	r16,1148(sp)
10005758:	dc400404 	addi	r17,sp,16
1000575c:	003ecb06 	br	1000528c <__alt_data_end+0xf800528c>
10005760:	b809883a 	mov	r4,r23
10005764:	b00b883a 	mov	r5,r22
10005768:	d9811e04 	addi	r6,sp,1144
1000576c:	000aa680 	call	1000aa68 <__sprint_r>
10005770:	103b871e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005774:	d8c12017 	ldw	r3,1152(sp)
10005778:	dc011f17 	ldw	r16,1148(sp)
1000577c:	da000404 	addi	r8,sp,16
10005780:	003ea206 	br	1000520c <__alt_data_end+0xf800520c>
10005784:	b809883a 	mov	r4,r23
10005788:	b00b883a 	mov	r5,r22
1000578c:	d9811e04 	addi	r6,sp,1144
10005790:	000aa680 	call	1000aa68 <__sprint_r>
10005794:	103b7e1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005798:	d8c12017 	ldw	r3,1152(sp)
1000579c:	dc011f17 	ldw	r16,1148(sp)
100057a0:	dc400404 	addi	r17,sp,16
100057a4:	003ea406 	br	10005238 <__alt_data_end+0xf8005238>
100057a8:	b809883a 	mov	r4,r23
100057ac:	b00b883a 	mov	r5,r22
100057b0:	d9811e04 	addi	r6,sp,1144
100057b4:	000aa680 	call	1000aa68 <__sprint_r>
100057b8:	103b751e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
100057bc:	d8c12017 	ldw	r3,1152(sp)
100057c0:	da000404 	addi	r8,sp,16
100057c4:	003c3706 	br	100048a4 <__alt_data_end+0xf80048a4>
100057c8:	04a5c83a 	sub	r18,zero,r18
100057cc:	9004c03a 	cmpne	r2,r18,zero
100057d0:	056bc83a 	sub	r21,zero,r21
100057d4:	a8abc83a 	sub	r21,r21,r2
100057d8:	04c00b44 	movi	r19,45
100057dc:	dcc12785 	stb	r19,1182(sp)
100057e0:	da413215 	stw	r9,1224(sp)
100057e4:	00800044 	movi	r2,1
100057e8:	9546b03a 	or	r3,r18,r21
100057ec:	003bb106 	br	100046b4 <__alt_data_end+0xf80046b4>
100057f0:	da013f15 	stw	r8,1276(sp)
100057f4:	da413e15 	stw	r9,1272(sp)
100057f8:	000a62c0 	call	1000a62c <__fpclassifyd>
100057fc:	da013f17 	ldw	r8,1276(sp)
10005800:	da413e17 	ldw	r9,1272(sp)
10005804:	1000e526 	beq	r2,zero,10005b9c <___vfprintf_internal_r+0x1a6c>
10005808:	04fff7c4 	movi	r19,-33
1000580c:	00bfffc4 	movi	r2,-1
10005810:	84e6703a 	and	r19,r16,r19
10005814:	48822926 	beq	r9,r2,100060bc <___vfprintf_internal_r+0x1f8c>
10005818:	008011c4 	movi	r2,71
1000581c:	98821626 	beq	r19,r2,10006078 <___vfprintf_internal_r+0x1f48>
10005820:	d9013917 	ldw	r4,1252(sp)
10005824:	e0c04014 	ori	r3,fp,256
10005828:	d8c12d15 	stw	r3,1204(sp)
1000582c:	20021f16 	blt	r4,zero,100060ac <___vfprintf_internal_r+0x1f7c>
10005830:	dc413917 	ldw	r17,1252(sp)
10005834:	d8012b05 	stb	zero,1196(sp)
10005838:	00801984 	movi	r2,102
1000583c:	80814d26 	beq	r16,r2,10005d74 <___vfprintf_internal_r+0x1c44>
10005840:	00801184 	movi	r2,70
10005844:	80814b26 	beq	r16,r2,10005d74 <___vfprintf_internal_r+0x1c44>
10005848:	00801144 	movi	r2,69
1000584c:	98821d26 	beq	r19,r2,100060c4 <___vfprintf_internal_r+0x1f94>
10005850:	482b883a 	mov	r21,r9
10005854:	d8812604 	addi	r2,sp,1176
10005858:	d8800115 	stw	r2,4(sp)
1000585c:	d9413717 	ldw	r5,1244(sp)
10005860:	d8812504 	addi	r2,sp,1172
10005864:	d8800215 	stw	r2,8(sp)
10005868:	d8812104 	addi	r2,sp,1156
1000586c:	dd400015 	stw	r21,0(sp)
10005870:	d8800315 	stw	r2,12(sp)
10005874:	b809883a 	mov	r4,r23
10005878:	880d883a 	mov	r6,r17
1000587c:	01c00084 	movi	r7,2
10005880:	da013f15 	stw	r8,1276(sp)
10005884:	da413e15 	stw	r9,1272(sp)
10005888:	00065a80 	call	100065a8 <_dtoa_r>
1000588c:	d8813115 	stw	r2,1220(sp)
10005890:	008019c4 	movi	r2,103
10005894:	da013f17 	ldw	r8,1276(sp)
10005898:	da413e17 	ldw	r9,1272(sp)
1000589c:	80800226 	beq	r16,r2,100058a8 <___vfprintf_internal_r+0x1778>
100058a0:	008011c4 	movi	r2,71
100058a4:	8081451e 	bne	r16,r2,10005dbc <___vfprintf_internal_r+0x1c8c>
100058a8:	e080004c 	andi	r2,fp,1
100058ac:	10021e26 	beq	r2,zero,10006128 <___vfprintf_internal_r+0x1ff8>
100058b0:	d8c13117 	ldw	r3,1220(sp)
100058b4:	1d55883a 	add	r10,r3,r21
100058b8:	d9013717 	ldw	r4,1244(sp)
100058bc:	880b883a 	mov	r5,r17
100058c0:	000d883a 	mov	r6,zero
100058c4:	000f883a 	mov	r7,zero
100058c8:	da013f15 	stw	r8,1276(sp)
100058cc:	da413e15 	stw	r9,1272(sp)
100058d0:	da813d15 	stw	r10,1268(sp)
100058d4:	000de400 	call	1000de40 <__eqdf2>
100058d8:	da013f17 	ldw	r8,1276(sp)
100058dc:	da413e17 	ldw	r9,1272(sp)
100058e0:	da813d17 	ldw	r10,1268(sp)
100058e4:	1001a126 	beq	r2,zero,10005f6c <___vfprintf_internal_r+0x1e3c>
100058e8:	d8812117 	ldw	r2,1156(sp)
100058ec:	1280062e 	bgeu	r2,r10,10005908 <___vfprintf_internal_r+0x17d8>
100058f0:	01000c04 	movi	r4,48
100058f4:	10c00044 	addi	r3,r2,1
100058f8:	d8c12115 	stw	r3,1156(sp)
100058fc:	11000005 	stb	r4,0(r2)
10005900:	d8812117 	ldw	r2,1156(sp)
10005904:	12bffb36 	bltu	r2,r10,100058f4 <__alt_data_end+0xf80058f4>
10005908:	d8c13117 	ldw	r3,1220(sp)
1000590c:	10c5c83a 	sub	r2,r2,r3
10005910:	d8813315 	stw	r2,1228(sp)
10005914:	008011c4 	movi	r2,71
10005918:	98818926 	beq	r19,r2,10005f40 <___vfprintf_internal_r+0x1e10>
1000591c:	00801944 	movi	r2,101
10005920:	14023c0e 	bge	r2,r16,10006214 <___vfprintf_internal_r+0x20e4>
10005924:	d8c12617 	ldw	r3,1176(sp)
10005928:	00801984 	movi	r2,102
1000592c:	d8c13415 	stw	r3,1232(sp)
10005930:	8081ef26 	beq	r16,r2,100060f0 <___vfprintf_internal_r+0x1fc0>
10005934:	d8c13417 	ldw	r3,1232(sp)
10005938:	d9013317 	ldw	r4,1228(sp)
1000593c:	1901e316 	blt	r3,r4,100060cc <___vfprintf_internal_r+0x1f9c>
10005940:	e080004c 	andi	r2,fp,1
10005944:	1001f426 	beq	r2,zero,10006118 <___vfprintf_internal_r+0x1fe8>
10005948:	d8c13417 	ldw	r3,1232(sp)
1000594c:	1c400044 	addi	r17,r3,1
10005950:	8839883a 	mov	fp,r17
10005954:	8801e416 	blt	r17,zero,100060e8 <___vfprintf_internal_r+0x1fb8>
10005958:	dd412b07 	ldb	r21,1196(sp)
1000595c:	a801701e 	bne	r21,zero,10005f20 <___vfprintf_internal_r+0x1df0>
10005960:	df012b15 	stw	fp,1196(sp)
10005964:	dcc12783 	ldbu	r19,1182(sp)
10005968:	df012d17 	ldw	fp,1204(sp)
1000596c:	d8013215 	stw	zero,1224(sp)
10005970:	dc812d15 	stw	r18,1204(sp)
10005974:	003b6e06 	br	10004730 <__alt_data_end+0xf8004730>
10005978:	e080040c 	andi	r2,fp,16
1000597c:	1000b51e 	bne	r2,zero,10005c54 <___vfprintf_internal_r+0x1b24>
10005980:	e080100c 	andi	r2,fp,64
10005984:	10015b26 	beq	r2,zero,10005ef4 <___vfprintf_internal_r+0x1dc4>
10005988:	d9012d17 	ldw	r4,1204(sp)
1000598c:	d9412f17 	ldw	r5,1212(sp)
10005990:	20800017 	ldw	r2,0(r4)
10005994:	21000104 	addi	r4,r4,4
10005998:	d9012d15 	stw	r4,1204(sp)
1000599c:	1140000d 	sth	r5,0(r2)
100059a0:	003a2006 	br	10004224 <__alt_data_end+0xf8004224>
100059a4:	e0c0100c 	andi	r3,fp,64
100059a8:	1800a226 	beq	r3,zero,10005c34 <___vfprintf_internal_r+0x1b04>
100059ac:	d8c12d17 	ldw	r3,1204(sp)
100059b0:	1480000b 	ldhu	r18,0(r2)
100059b4:	002b883a 	mov	r21,zero
100059b8:	18c00104 	addi	r3,r3,4
100059bc:	d8c12d15 	stw	r3,1204(sp)
100059c0:	0005883a 	mov	r2,zero
100059c4:	9007883a 	mov	r3,r18
100059c8:	003c6906 	br	10004b70 <__alt_data_end+0xf8004b70>
100059cc:	e0c0100c 	andi	r3,fp,64
100059d0:	18009026 	beq	r3,zero,10005c14 <___vfprintf_internal_r+0x1ae4>
100059d4:	1480000b 	ldhu	r18,0(r2)
100059d8:	d8812d17 	ldw	r2,1204(sp)
100059dc:	002b883a 	mov	r21,zero
100059e0:	9007883a 	mov	r3,r18
100059e4:	10800104 	addi	r2,r2,4
100059e8:	d8812d15 	stw	r2,1204(sp)
100059ec:	00800044 	movi	r2,1
100059f0:	003c5f06 	br	10004b70 <__alt_data_end+0xf8004b70>
100059f4:	e0c0100c 	andi	r3,fp,64
100059f8:	18008026 	beq	r3,zero,10005bfc <___vfprintf_internal_r+0x1acc>
100059fc:	d9012d17 	ldw	r4,1204(sp)
10005a00:	1480000b 	ldhu	r18,0(r2)
10005a04:	002b883a 	mov	r21,zero
10005a08:	21000104 	addi	r4,r4,4
10005a0c:	d9012d15 	stw	r4,1204(sp)
10005a10:	003c7906 	br	10004bf8 <__alt_data_end+0xf8004bf8>
10005a14:	e080100c 	andi	r2,fp,64
10005a18:	10007126 	beq	r2,zero,10005be0 <___vfprintf_internal_r+0x1ab0>
10005a1c:	1c80000f 	ldh	r18,0(r3)
10005a20:	d8812d17 	ldw	r2,1204(sp)
10005a24:	902bd7fa 	srai	r21,r18,31
10005a28:	10800104 	addi	r2,r2,4
10005a2c:	d8812d15 	stw	r2,1204(sp)
10005a30:	a805883a 	mov	r2,r21
10005a34:	003b1a06 	br	100046a0 <__alt_data_end+0xf80046a0>
10005a38:	e4000007 	ldb	r16,0(fp)
10005a3c:	e005883a 	mov	r2,fp
10005a40:	003a2306 	br	100042d0 <__alt_data_end+0xf80042d0>
10005a44:	00800084 	movi	r2,2
10005a48:	003c4906 	br	10004b70 <__alt_data_end+0xf8004b70>
10005a4c:	01040074 	movhi	r4,4097
10005a50:	21049184 	addi	r4,r4,4678
10005a54:	d9012c15 	stw	r4,1200(sp)
10005a58:	d9012c17 	ldw	r4,1200(sp)
10005a5c:	1c47883a 	add	r3,r3,r17
10005a60:	10800044 	addi	r2,r2,1
10005a64:	41000015 	stw	r4,0(r8)
10005a68:	44400115 	stw	r17,4(r8)
10005a6c:	d8c12015 	stw	r3,1152(sp)
10005a70:	d8811f15 	stw	r2,1148(sp)
10005a74:	010001c4 	movi	r4,7
10005a78:	20becc16 	blt	r4,r2,100055ac <__alt_data_end+0xf80055ac>
10005a7c:	42000204 	addi	r8,r8,8
10005a80:	003ed106 	br	100055c8 <__alt_data_end+0xf80055c8>
10005a84:	01040074 	movhi	r4,4097
10005a88:	21049184 	addi	r4,r4,4678
10005a8c:	d9012c15 	stw	r4,1200(sp)
10005a90:	003ba306 	br	10004920 <__alt_data_end+0xf8004920>
10005a94:	b809883a 	mov	r4,r23
10005a98:	b00b883a 	mov	r5,r22
10005a9c:	d9811e04 	addi	r6,sp,1144
10005aa0:	000aa680 	call	1000aa68 <__sprint_r>
10005aa4:	103aba1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005aa8:	d8c12017 	ldw	r3,1152(sp)
10005aac:	da000404 	addi	r8,sp,16
10005ab0:	003d6c06 	br	10005064 <__alt_data_end+0xf8005064>
10005ab4:	d8811f17 	ldw	r2,1148(sp)
10005ab8:	01440074 	movhi	r5,4097
10005abc:	01000044 	movi	r4,1
10005ac0:	18c00044 	addi	r3,r3,1
10005ac4:	10800044 	addi	r2,r2,1
10005ac8:	29449104 	addi	r5,r5,4676
10005acc:	41000115 	stw	r4,4(r8)
10005ad0:	41400015 	stw	r5,0(r8)
10005ad4:	d8c12015 	stw	r3,1152(sp)
10005ad8:	d8811f15 	stw	r2,1148(sp)
10005adc:	010001c4 	movi	r4,7
10005ae0:	20806716 	blt	r4,r2,10005c80 <___vfprintf_internal_r+0x1b50>
10005ae4:	42000204 	addi	r8,r8,8
10005ae8:	8000041e 	bne	r16,zero,10005afc <___vfprintf_internal_r+0x19cc>
10005aec:	d8813317 	ldw	r2,1228(sp)
10005af0:	1000021e 	bne	r2,zero,10005afc <___vfprintf_internal_r+0x19cc>
10005af4:	e080004c 	andi	r2,fp,1
10005af8:	103ba026 	beq	r2,zero,1000497c <__alt_data_end+0xf800497c>
10005afc:	d9013817 	ldw	r4,1248(sp)
10005b00:	d8811f17 	ldw	r2,1148(sp)
10005b04:	d9413517 	ldw	r5,1236(sp)
10005b08:	1907883a 	add	r3,r3,r4
10005b0c:	10800044 	addi	r2,r2,1
10005b10:	41000115 	stw	r4,4(r8)
10005b14:	41400015 	stw	r5,0(r8)
10005b18:	d8c12015 	stw	r3,1152(sp)
10005b1c:	d8811f15 	stw	r2,1148(sp)
10005b20:	010001c4 	movi	r4,7
10005b24:	20815716 	blt	r4,r2,10006084 <___vfprintf_internal_r+0x1f54>
10005b28:	42000204 	addi	r8,r8,8
10005b2c:	0421c83a 	sub	r16,zero,r16
10005b30:	0400810e 	bge	zero,r16,10005d38 <___vfprintf_internal_r+0x1c08>
10005b34:	04400404 	movi	r17,16
10005b38:	8c00bd0e 	bge	r17,r16,10005e30 <___vfprintf_internal_r+0x1d00>
10005b3c:	01440074 	movhi	r5,4097
10005b40:	29449184 	addi	r5,r5,4678
10005b44:	d9412c15 	stw	r5,1200(sp)
10005b48:	04c001c4 	movi	r19,7
10005b4c:	00000306 	br	10005b5c <___vfprintf_internal_r+0x1a2c>
10005b50:	42000204 	addi	r8,r8,8
10005b54:	843ffc04 	addi	r16,r16,-16
10005b58:	8c00b80e 	bge	r17,r16,10005e3c <___vfprintf_internal_r+0x1d0c>
10005b5c:	18c00404 	addi	r3,r3,16
10005b60:	10800044 	addi	r2,r2,1
10005b64:	45000015 	stw	r20,0(r8)
10005b68:	44400115 	stw	r17,4(r8)
10005b6c:	d8c12015 	stw	r3,1152(sp)
10005b70:	d8811f15 	stw	r2,1148(sp)
10005b74:	98bff60e 	bge	r19,r2,10005b50 <__alt_data_end+0xf8005b50>
10005b78:	b809883a 	mov	r4,r23
10005b7c:	b00b883a 	mov	r5,r22
10005b80:	d9811e04 	addi	r6,sp,1144
10005b84:	000aa680 	call	1000aa68 <__sprint_r>
10005b88:	103a811e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005b8c:	d8c12017 	ldw	r3,1152(sp)
10005b90:	d8811f17 	ldw	r2,1148(sp)
10005b94:	da000404 	addi	r8,sp,16
10005b98:	003fee06 	br	10005b54 <__alt_data_end+0xf8005b54>
10005b9c:	008011c4 	movi	r2,71
10005ba0:	1400db16 	blt	r2,r16,10005f10 <___vfprintf_internal_r+0x1de0>
10005ba4:	01040074 	movhi	r4,4097
10005ba8:	21048304 	addi	r4,r4,4620
10005bac:	d9013115 	stw	r4,1220(sp)
10005bb0:	00c000c4 	movi	r3,3
10005bb4:	00bfdfc4 	movi	r2,-129
10005bb8:	d8c12b15 	stw	r3,1196(sp)
10005bbc:	e0b8703a 	and	fp,fp,r2
10005bc0:	dcc12783 	ldbu	r19,1182(sp)
10005bc4:	dc812d15 	stw	r18,1204(sp)
10005bc8:	1823883a 	mov	r17,r3
10005bcc:	d8013215 	stw	zero,1224(sp)
10005bd0:	d8013415 	stw	zero,1232(sp)
10005bd4:	003ad606 	br	10004730 <__alt_data_end+0xf8004730>
10005bd8:	4823883a 	mov	r17,r9
10005bdc:	003cc906 	br	10004f04 <__alt_data_end+0xf8004f04>
10005be0:	1c800017 	ldw	r18,0(r3)
10005be4:	d8c12d17 	ldw	r3,1204(sp)
10005be8:	902bd7fa 	srai	r21,r18,31
10005bec:	18c00104 	addi	r3,r3,4
10005bf0:	d8c12d15 	stw	r3,1204(sp)
10005bf4:	a805883a 	mov	r2,r21
10005bf8:	003aa906 	br	100046a0 <__alt_data_end+0xf80046a0>
10005bfc:	d9412d17 	ldw	r5,1204(sp)
10005c00:	14800017 	ldw	r18,0(r2)
10005c04:	002b883a 	mov	r21,zero
10005c08:	29400104 	addi	r5,r5,4
10005c0c:	d9412d15 	stw	r5,1204(sp)
10005c10:	003bf906 	br	10004bf8 <__alt_data_end+0xf8004bf8>
10005c14:	d8c12d17 	ldw	r3,1204(sp)
10005c18:	14800017 	ldw	r18,0(r2)
10005c1c:	002b883a 	mov	r21,zero
10005c20:	18c00104 	addi	r3,r3,4
10005c24:	d8c12d15 	stw	r3,1204(sp)
10005c28:	00800044 	movi	r2,1
10005c2c:	9007883a 	mov	r3,r18
10005c30:	003bcf06 	br	10004b70 <__alt_data_end+0xf8004b70>
10005c34:	d9012d17 	ldw	r4,1204(sp)
10005c38:	14800017 	ldw	r18,0(r2)
10005c3c:	002b883a 	mov	r21,zero
10005c40:	21000104 	addi	r4,r4,4
10005c44:	d9012d15 	stw	r4,1204(sp)
10005c48:	0005883a 	mov	r2,zero
10005c4c:	9007883a 	mov	r3,r18
10005c50:	003bc706 	br	10004b70 <__alt_data_end+0xf8004b70>
10005c54:	d9412d17 	ldw	r5,1204(sp)
10005c58:	d8c12f17 	ldw	r3,1212(sp)
10005c5c:	28800017 	ldw	r2,0(r5)
10005c60:	29400104 	addi	r5,r5,4
10005c64:	d9412d15 	stw	r5,1204(sp)
10005c68:	10c00015 	stw	r3,0(r2)
10005c6c:	00396d06 	br	10004224 <__alt_data_end+0xf8004224>
10005c70:	01040074 	movhi	r4,4097
10005c74:	21048104 	addi	r4,r4,4612
10005c78:	d9013115 	stw	r4,1220(sp)
10005c7c:	003ba206 	br	10004b08 <__alt_data_end+0xf8004b08>
10005c80:	b809883a 	mov	r4,r23
10005c84:	b00b883a 	mov	r5,r22
10005c88:	d9811e04 	addi	r6,sp,1144
10005c8c:	000aa680 	call	1000aa68 <__sprint_r>
10005c90:	103a3f1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005c94:	dc012617 	ldw	r16,1176(sp)
10005c98:	d8c12017 	ldw	r3,1152(sp)
10005c9c:	da000404 	addi	r8,sp,16
10005ca0:	003f9106 	br	10005ae8 <__alt_data_end+0xf8005ae8>
10005ca4:	e0800044 	addi	r2,fp,1
10005ca8:	9cc00814 	ori	r19,r19,32
10005cac:	e4000047 	ldb	r16,1(fp)
10005cb0:	00398706 	br	100042d0 <__alt_data_end+0xf80042d0>
10005cb4:	d8812e17 	ldw	r2,1208(sp)
10005cb8:	d8c12d15 	stw	r3,1204(sp)
10005cbc:	0085c83a 	sub	r2,zero,r2
10005cc0:	d8812e15 	stw	r2,1208(sp)
10005cc4:	e005883a 	mov	r2,fp
10005cc8:	003a3a06 	br	100045b4 <__alt_data_end+0xf80045b4>
10005ccc:	b809883a 	mov	r4,r23
10005cd0:	b00b883a 	mov	r5,r22
10005cd4:	d9811e04 	addi	r6,sp,1144
10005cd8:	000aa680 	call	1000aa68 <__sprint_r>
10005cdc:	103a2c1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005ce0:	d8c12017 	ldw	r3,1152(sp)
10005ce4:	da000404 	addi	r8,sp,16
10005ce8:	003cf006 	br	100050ac <__alt_data_end+0xf80050ac>
10005cec:	d8c12817 	ldw	r3,1184(sp)
10005cf0:	d9013117 	ldw	r4,1220(sp)
10005cf4:	1923c83a 	sub	r17,r3,r4
10005cf8:	003a8806 	br	1000471c <__alt_data_end+0xf800471c>
10005cfc:	da013f15 	stw	r8,1276(sp)
10005d00:	000a8d40 	call	1000a8d4 <strlen>
10005d04:	1023883a 	mov	r17,r2
10005d08:	da013f17 	ldw	r8,1276(sp)
10005d0c:	883c7f0e 	bge	r17,zero,10004f0c <__alt_data_end+0xf8004f0c>
10005d10:	0005883a 	mov	r2,zero
10005d14:	003c7d06 	br	10004f0c <__alt_data_end+0xf8004f0c>
10005d18:	b809883a 	mov	r4,r23
10005d1c:	b00b883a 	mov	r5,r22
10005d20:	d9811e04 	addi	r6,sp,1144
10005d24:	000aa680 	call	1000aa68 <__sprint_r>
10005d28:	103a191e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005d2c:	d8c12017 	ldw	r3,1152(sp)
10005d30:	d8811f17 	ldw	r2,1148(sp)
10005d34:	da000404 	addi	r8,sp,16
10005d38:	d9413317 	ldw	r5,1228(sp)
10005d3c:	d9013117 	ldw	r4,1220(sp)
10005d40:	10800044 	addi	r2,r2,1
10005d44:	28c7883a 	add	r3,r5,r3
10005d48:	41000015 	stw	r4,0(r8)
10005d4c:	41400115 	stw	r5,4(r8)
10005d50:	d8c12015 	stw	r3,1152(sp)
10005d54:	d8811f15 	stw	r2,1148(sp)
10005d58:	010001c4 	movi	r4,7
10005d5c:	20bb060e 	bge	r4,r2,10004978 <__alt_data_end+0xf8004978>
10005d60:	003d6206 	br	100052ec <__alt_data_end+0xf80052ec>
10005d64:	01040074 	movhi	r4,4097
10005d68:	21049584 	addi	r4,r4,4694
10005d6c:	d9013615 	stw	r4,1240(sp)
10005d70:	003aa306 	br	10004800 <__alt_data_end+0xf8004800>
10005d74:	d8812604 	addi	r2,sp,1176
10005d78:	d8800115 	stw	r2,4(sp)
10005d7c:	d9413717 	ldw	r5,1244(sp)
10005d80:	d8812504 	addi	r2,sp,1172
10005d84:	d8800215 	stw	r2,8(sp)
10005d88:	d8812104 	addi	r2,sp,1156
10005d8c:	da400015 	stw	r9,0(sp)
10005d90:	d8800315 	stw	r2,12(sp)
10005d94:	b809883a 	mov	r4,r23
10005d98:	880d883a 	mov	r6,r17
10005d9c:	01c000c4 	movi	r7,3
10005da0:	da013f15 	stw	r8,1276(sp)
10005da4:	da413e15 	stw	r9,1272(sp)
10005da8:	00065a80 	call	100065a8 <_dtoa_r>
10005dac:	da413e17 	ldw	r9,1272(sp)
10005db0:	da013f17 	ldw	r8,1276(sp)
10005db4:	d8813115 	stw	r2,1220(sp)
10005db8:	482b883a 	mov	r21,r9
10005dbc:	d8c13117 	ldw	r3,1220(sp)
10005dc0:	00801184 	movi	r2,70
10005dc4:	1d55883a 	add	r10,r3,r21
10005dc8:	98bebb1e 	bne	r19,r2,100058b8 <__alt_data_end+0xf80058b8>
10005dcc:	19000007 	ldb	r4,0(r3)
10005dd0:	00800c04 	movi	r2,48
10005dd4:	2080dd26 	beq	r4,r2,1000614c <___vfprintf_internal_r+0x201c>
10005dd8:	d8c12617 	ldw	r3,1176(sp)
10005ddc:	50d5883a 	add	r10,r10,r3
10005de0:	003eb506 	br	100058b8 <__alt_data_end+0xf80058b8>
10005de4:	0023883a 	mov	r17,zero
10005de8:	003d9b06 	br	10005458 <__alt_data_end+0xf8005458>
10005dec:	b809883a 	mov	r4,r23
10005df0:	b00b883a 	mov	r5,r22
10005df4:	d9811e04 	addi	r6,sp,1144
10005df8:	000aa680 	call	1000aa68 <__sprint_r>
10005dfc:	1039e41e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005e00:	d8c12017 	ldw	r3,1152(sp)
10005e04:	da000404 	addi	r8,sp,16
10005e08:	003d9206 	br	10005454 <__alt_data_end+0xf8005454>
10005e0c:	b809883a 	mov	r4,r23
10005e10:	b00b883a 	mov	r5,r22
10005e14:	d9811e04 	addi	r6,sp,1144
10005e18:	000aa680 	call	1000aa68 <__sprint_r>
10005e1c:	1039dc1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005e20:	d8812617 	ldw	r2,1176(sp)
10005e24:	d8c12017 	ldw	r3,1152(sp)
10005e28:	da000404 	addi	r8,sp,16
10005e2c:	003dfb06 	br	1000561c <__alt_data_end+0xf800561c>
10005e30:	01040074 	movhi	r4,4097
10005e34:	21049184 	addi	r4,r4,4678
10005e38:	d9012c15 	stw	r4,1200(sp)
10005e3c:	d9012c17 	ldw	r4,1200(sp)
10005e40:	1c07883a 	add	r3,r3,r16
10005e44:	10800044 	addi	r2,r2,1
10005e48:	41000015 	stw	r4,0(r8)
10005e4c:	44000115 	stw	r16,4(r8)
10005e50:	d8c12015 	stw	r3,1152(sp)
10005e54:	d8811f15 	stw	r2,1148(sp)
10005e58:	010001c4 	movi	r4,7
10005e5c:	20bfae16 	blt	r4,r2,10005d18 <__alt_data_end+0xf8005d18>
10005e60:	42000204 	addi	r8,r8,8
10005e64:	003fb406 	br	10005d38 <__alt_data_end+0xf8005d38>
10005e68:	0021883a 	mov	r16,zero
10005e6c:	003dfd06 	br	10005664 <__alt_data_end+0xf8005664>
10005e70:	01440074 	movhi	r5,4097
10005e74:	29449584 	addi	r5,r5,4694
10005e78:	d9413615 	stw	r5,1240(sp)
10005e7c:	003ae306 	br	10004a0c <__alt_data_end+0xf8004a0c>
10005e80:	b809883a 	mov	r4,r23
10005e84:	b00b883a 	mov	r5,r22
10005e88:	d9811e04 	addi	r6,sp,1144
10005e8c:	000aa680 	call	1000aa68 <__sprint_r>
10005e90:	1039bf1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10005e94:	d8812617 	ldw	r2,1176(sp)
10005e98:	d9413317 	ldw	r5,1228(sp)
10005e9c:	d8c12017 	ldw	r3,1152(sp)
10005ea0:	da000404 	addi	r8,sp,16
10005ea4:	2885c83a 	sub	r2,r5,r2
10005ea8:	003ded06 	br	10005660 <__alt_data_end+0xf8005660>
10005eac:	00800184 	movi	r2,6
10005eb0:	1240012e 	bgeu	r2,r9,10005eb8 <___vfprintf_internal_r+0x1d88>
10005eb4:	1013883a 	mov	r9,r2
10005eb8:	4823883a 	mov	r17,r9
10005ebc:	4805883a 	mov	r2,r9
10005ec0:	4800b216 	blt	r9,zero,1000618c <___vfprintf_internal_r+0x205c>
10005ec4:	01440074 	movhi	r5,4097
10005ec8:	29448f04 	addi	r5,r5,4668
10005ecc:	d8812b15 	stw	r2,1196(sp)
10005ed0:	dc812d15 	stw	r18,1204(sp)
10005ed4:	d8013215 	stw	zero,1224(sp)
10005ed8:	d8013415 	stw	zero,1232(sp)
10005edc:	d9413115 	stw	r5,1220(sp)
10005ee0:	0005883a 	mov	r2,zero
10005ee4:	003a1906 	br	1000474c <__alt_data_end+0xf800474c>
10005ee8:	04c00b44 	movi	r19,45
10005eec:	dcc12785 	stb	r19,1182(sp)
10005ef0:	003b0006 	br	10004af4 <__alt_data_end+0xf8004af4>
10005ef4:	d8c12d17 	ldw	r3,1204(sp)
10005ef8:	d9012f17 	ldw	r4,1212(sp)
10005efc:	18800017 	ldw	r2,0(r3)
10005f00:	18c00104 	addi	r3,r3,4
10005f04:	d8c12d15 	stw	r3,1204(sp)
10005f08:	11000015 	stw	r4,0(r2)
10005f0c:	0038c506 	br	10004224 <__alt_data_end+0xf8004224>
10005f10:	01440074 	movhi	r5,4097
10005f14:	29448404 	addi	r5,r5,4624
10005f18:	d9413115 	stw	r5,1220(sp)
10005f1c:	003f2406 	br	10005bb0 <__alt_data_end+0xf8005bb0>
10005f20:	00800b44 	movi	r2,45
10005f24:	d8812785 	stb	r2,1182(sp)
10005f28:	df012b15 	stw	fp,1196(sp)
10005f2c:	d8013215 	stw	zero,1224(sp)
10005f30:	df012d17 	ldw	fp,1204(sp)
10005f34:	00800b44 	movi	r2,45
10005f38:	dc812d15 	stw	r18,1204(sp)
10005f3c:	003a0006 	br	10004740 <__alt_data_end+0xf8004740>
10005f40:	d8c12617 	ldw	r3,1176(sp)
10005f44:	00bfff44 	movi	r2,-3
10005f48:	18800a16 	blt	r3,r2,10005f74 <___vfprintf_internal_r+0x1e44>
10005f4c:	48c00916 	blt	r9,r3,10005f74 <___vfprintf_internal_r+0x1e44>
10005f50:	d8c13415 	stw	r3,1232(sp)
10005f54:	040019c4 	movi	r16,103
10005f58:	003e7606 	br	10005934 <__alt_data_end+0xf8005934>
10005f5c:	01040074 	movhi	r4,4097
10005f60:	21049184 	addi	r4,r4,4678
10005f64:	d9012c15 	stw	r4,1200(sp)
10005f68:	003c8e06 	br	100051a4 <__alt_data_end+0xf80051a4>
10005f6c:	5005883a 	mov	r2,r10
10005f70:	003e6506 	br	10005908 <__alt_data_end+0xf8005908>
10005f74:	843fff84 	addi	r16,r16,-2
10005f78:	1d7fffc4 	addi	r21,r3,-1
10005f7c:	dd412615 	stw	r21,1176(sp)
10005f80:	dc0122c5 	stb	r16,1163(sp)
10005f84:	a8009216 	blt	r21,zero,100061d0 <___vfprintf_internal_r+0x20a0>
10005f88:	00800ac4 	movi	r2,43
10005f8c:	d8812305 	stb	r2,1164(sp)
10005f90:	00800244 	movi	r2,9
10005f94:	1540660e 	bge	r2,r21,10006130 <___vfprintf_internal_r+0x2000>
10005f98:	dcc122c4 	addi	r19,sp,1163
10005f9c:	dc012c15 	stw	r16,1200(sp)
10005fa0:	4023883a 	mov	r17,r8
10005fa4:	9821883a 	mov	r16,r19
10005fa8:	a809883a 	mov	r4,r21
10005fac:	01400284 	movi	r5,10
10005fb0:	0002c900 	call	10002c90 <__modsi3>
10005fb4:	10800c04 	addi	r2,r2,48
10005fb8:	843fffc4 	addi	r16,r16,-1
10005fbc:	a809883a 	mov	r4,r21
10005fc0:	01400284 	movi	r5,10
10005fc4:	80800005 	stb	r2,0(r16)
10005fc8:	0002c3c0 	call	10002c3c <__divsi3>
10005fcc:	01000244 	movi	r4,9
10005fd0:	102b883a 	mov	r21,r2
10005fd4:	20bff416 	blt	r4,r2,10005fa8 <__alt_data_end+0xf8005fa8>
10005fd8:	8811883a 	mov	r8,r17
10005fdc:	10800c04 	addi	r2,r2,48
10005fe0:	8023883a 	mov	r17,r16
10005fe4:	897fffc4 	addi	r5,r17,-1
10005fe8:	88bfffc5 	stb	r2,-1(r17)
10005fec:	dc012c17 	ldw	r16,1200(sp)
10005ff0:	2cc08a2e 	bgeu	r5,r19,1000621c <___vfprintf_internal_r+0x20ec>
10005ff4:	d9812384 	addi	r6,sp,1166
10005ff8:	344dc83a 	sub	r6,r6,r17
10005ffc:	d9012344 	addi	r4,sp,1165
10006000:	998d883a 	add	r6,r19,r6
10006004:	00000106 	br	1000600c <___vfprintf_internal_r+0x1edc>
10006008:	28800003 	ldbu	r2,0(r5)
1000600c:	20800005 	stb	r2,0(r4)
10006010:	21000044 	addi	r4,r4,1
10006014:	29400044 	addi	r5,r5,1
10006018:	21bffb1e 	bne	r4,r6,10006008 <__alt_data_end+0xf8006008>
1000601c:	d8812304 	addi	r2,sp,1164
10006020:	1445c83a 	sub	r2,r2,r17
10006024:	d9412344 	addi	r5,sp,1165
10006028:	2885883a 	add	r2,r5,r2
1000602c:	14e7c83a 	sub	r19,r2,r19
10006030:	d8813317 	ldw	r2,1228(sp)
10006034:	d8c13317 	ldw	r3,1228(sp)
10006038:	dcc13a15 	stw	r19,1256(sp)
1000603c:	14e3883a 	add	r17,r2,r19
10006040:	00800044 	movi	r2,1
10006044:	10c0550e 	bge	r2,r3,1000619c <___vfprintf_internal_r+0x206c>
10006048:	8c400044 	addi	r17,r17,1
1000604c:	8839883a 	mov	fp,r17
10006050:	88005016 	blt	r17,zero,10006194 <___vfprintf_internal_r+0x2064>
10006054:	d8013415 	stw	zero,1232(sp)
10006058:	003e3f06 	br	10005958 <__alt_data_end+0xf8005958>
1000605c:	da412b15 	stw	r9,1196(sp)
10006060:	dcc12783 	ldbu	r19,1182(sp)
10006064:	4823883a 	mov	r17,r9
10006068:	dc812d15 	stw	r18,1204(sp)
1000606c:	d8013215 	stw	zero,1224(sp)
10006070:	d8013415 	stw	zero,1232(sp)
10006074:	0039ae06 	br	10004730 <__alt_data_end+0xf8004730>
10006078:	483de91e 	bne	r9,zero,10005820 <__alt_data_end+0xf8005820>
1000607c:	8813883a 	mov	r9,r17
10006080:	003de706 	br	10005820 <__alt_data_end+0xf8005820>
10006084:	b809883a 	mov	r4,r23
10006088:	b00b883a 	mov	r5,r22
1000608c:	d9811e04 	addi	r6,sp,1144
10006090:	000aa680 	call	1000aa68 <__sprint_r>
10006094:	10393e1e 	bne	r2,zero,10004590 <__alt_data_end+0xf8004590>
10006098:	dc012617 	ldw	r16,1176(sp)
1000609c:	d8c12017 	ldw	r3,1152(sp)
100060a0:	d8811f17 	ldw	r2,1148(sp)
100060a4:	da000404 	addi	r8,sp,16
100060a8:	003ea006 	br	10005b2c <__alt_data_end+0xf8005b2c>
100060ac:	00c00b44 	movi	r3,45
100060b0:	2460003c 	xorhi	r17,r4,32768
100060b4:	d8c12b05 	stb	r3,1196(sp)
100060b8:	003ddf06 	br	10005838 <__alt_data_end+0xf8005838>
100060bc:	02400184 	movi	r9,6
100060c0:	003dd706 	br	10005820 <__alt_data_end+0xf8005820>
100060c4:	4d400044 	addi	r21,r9,1
100060c8:	003de206 	br	10005854 <__alt_data_end+0xf8005854>
100060cc:	d8c13417 	ldw	r3,1232(sp)
100060d0:	00c0490e 	bge	zero,r3,100061f8 <___vfprintf_internal_r+0x20c8>
100060d4:	04400044 	movi	r17,1
100060d8:	d9013317 	ldw	r4,1228(sp)
100060dc:	8923883a 	add	r17,r17,r4
100060e0:	8839883a 	mov	fp,r17
100060e4:	883e1c0e 	bge	r17,zero,10005958 <__alt_data_end+0xf8005958>
100060e8:	0039883a 	mov	fp,zero
100060ec:	003e1a06 	br	10005958 <__alt_data_end+0xf8005958>
100060f0:	00c03b0e 	bge	zero,r3,100061e0 <___vfprintf_internal_r+0x20b0>
100060f4:	4800021e 	bne	r9,zero,10006100 <___vfprintf_internal_r+0x1fd0>
100060f8:	e080004c 	andi	r2,fp,1
100060fc:	10000626 	beq	r2,zero,10006118 <___vfprintf_internal_r+0x1fe8>
10006100:	d8c13417 	ldw	r3,1232(sp)
10006104:	4a400044 	addi	r9,r9,1
10006108:	1a63883a 	add	r17,r3,r9
1000610c:	8839883a 	mov	fp,r17
10006110:	883e110e 	bge	r17,zero,10005958 <__alt_data_end+0xf8005958>
10006114:	003ff406 	br	100060e8 <__alt_data_end+0xf80060e8>
10006118:	1839883a 	mov	fp,r3
1000611c:	18004116 	blt	r3,zero,10006224 <___vfprintf_internal_r+0x20f4>
10006120:	dc413417 	ldw	r17,1232(sp)
10006124:	003e0c06 	br	10005958 <__alt_data_end+0xf8005958>
10006128:	d8812117 	ldw	r2,1156(sp)
1000612c:	003df606 	br	10005908 <__alt_data_end+0xf8005908>
10006130:	00800c04 	movi	r2,48
10006134:	a8c00c04 	addi	r3,r21,48
10006138:	d8812345 	stb	r2,1165(sp)
1000613c:	d8c12385 	stb	r3,1166(sp)
10006140:	d88123c4 	addi	r2,sp,1167
10006144:	dcc122c4 	addi	r19,sp,1163
10006148:	003fb806 	br	1000602c <__alt_data_end+0xf800602c>
1000614c:	d9013717 	ldw	r4,1244(sp)
10006150:	880b883a 	mov	r5,r17
10006154:	000d883a 	mov	r6,zero
10006158:	000f883a 	mov	r7,zero
1000615c:	da013f15 	stw	r8,1276(sp)
10006160:	da413e15 	stw	r9,1272(sp)
10006164:	da813d15 	stw	r10,1268(sp)
10006168:	000de400 	call	1000de40 <__eqdf2>
1000616c:	da013f17 	ldw	r8,1276(sp)
10006170:	da413e17 	ldw	r9,1272(sp)
10006174:	da813d17 	ldw	r10,1268(sp)
10006178:	103f1726 	beq	r2,zero,10005dd8 <__alt_data_end+0xf8005dd8>
1000617c:	00800044 	movi	r2,1
10006180:	1547c83a 	sub	r3,r2,r21
10006184:	d8c12615 	stw	r3,1176(sp)
10006188:	003f1406 	br	10005ddc <__alt_data_end+0xf8005ddc>
1000618c:	0005883a 	mov	r2,zero
10006190:	003f4c06 	br	10005ec4 <__alt_data_end+0xf8005ec4>
10006194:	0039883a 	mov	fp,zero
10006198:	003fae06 	br	10006054 <__alt_data_end+0xf8006054>
1000619c:	e084703a 	and	r2,fp,r2
100061a0:	103faa26 	beq	r2,zero,1000604c <__alt_data_end+0xf800604c>
100061a4:	003fa806 	br	10006048 <__alt_data_end+0xf8006048>
100061a8:	d9412d17 	ldw	r5,1204(sp)
100061ac:	2a400017 	ldw	r9,0(r5)
100061b0:	28c00104 	addi	r3,r5,4
100061b4:	d8c12d15 	stw	r3,1204(sp)
100061b8:	483ebc0e 	bge	r9,zero,10005cac <__alt_data_end+0xf8005cac>
100061bc:	027fffc4 	movi	r9,-1
100061c0:	e4000047 	ldb	r16,1(fp)
100061c4:	00384206 	br	100042d0 <__alt_data_end+0xf80042d0>
100061c8:	043fffc4 	movi	r16,-1
100061cc:	0038ce06 	br	10004508 <__alt_data_end+0xf8004508>
100061d0:	00800b44 	movi	r2,45
100061d4:	056bc83a 	sub	r21,zero,r21
100061d8:	d8812305 	stb	r2,1164(sp)
100061dc:	003f6c06 	br	10005f90 <__alt_data_end+0xf8005f90>
100061e0:	4800081e 	bne	r9,zero,10006204 <___vfprintf_internal_r+0x20d4>
100061e4:	e080004c 	andi	r2,fp,1
100061e8:	1000061e 	bne	r2,zero,10006204 <___vfprintf_internal_r+0x20d4>
100061ec:	07000044 	movi	fp,1
100061f0:	e023883a 	mov	r17,fp
100061f4:	003dd806 	br	10005958 <__alt_data_end+0xf8005958>
100061f8:	04400084 	movi	r17,2
100061fc:	88e3c83a 	sub	r17,r17,r3
10006200:	003fb506 	br	100060d8 <__alt_data_end+0xf80060d8>
10006204:	4c400084 	addi	r17,r9,2
10006208:	8839883a 	mov	fp,r17
1000620c:	883dd20e 	bge	r17,zero,10005958 <__alt_data_end+0xf8005958>
10006210:	003fb506 	br	100060e8 <__alt_data_end+0xf80060e8>
10006214:	d8c12617 	ldw	r3,1176(sp)
10006218:	003f5706 	br	10005f78 <__alt_data_end+0xf8005f78>
1000621c:	d8812344 	addi	r2,sp,1165
10006220:	003f8206 	br	1000602c <__alt_data_end+0xf800602c>
10006224:	0039883a 	mov	fp,zero
10006228:	003fbd06 	br	10006120 <__alt_data_end+0xf8006120>

1000622c <__vfprintf_internal>:
1000622c:	2007883a 	mov	r3,r4
10006230:	01040074 	movhi	r4,4097
10006234:	210bac04 	addi	r4,r4,11952
10006238:	21000017 	ldw	r4,0(r4)
1000623c:	2805883a 	mov	r2,r5
10006240:	300f883a 	mov	r7,r6
10006244:	180b883a 	mov	r5,r3
10006248:	100d883a 	mov	r6,r2
1000624c:	00041301 	jmpi	10004130 <___vfprintf_internal_r>

10006250 <__swsetup_r>:
10006250:	00840074 	movhi	r2,4097
10006254:	defffd04 	addi	sp,sp,-12
10006258:	108bac04 	addi	r2,r2,11952
1000625c:	dc400115 	stw	r17,4(sp)
10006260:	2023883a 	mov	r17,r4
10006264:	11000017 	ldw	r4,0(r2)
10006268:	dc000015 	stw	r16,0(sp)
1000626c:	dfc00215 	stw	ra,8(sp)
10006270:	2821883a 	mov	r16,r5
10006274:	20000226 	beq	r4,zero,10006280 <__swsetup_r+0x30>
10006278:	20c00e17 	ldw	r3,56(r4)
1000627c:	18002e26 	beq	r3,zero,10006338 <__swsetup_r+0xe8>
10006280:	8080030b 	ldhu	r2,12(r16)
10006284:	10c0020c 	andi	r3,r2,8
10006288:	100d883a 	mov	r6,r2
1000628c:	18000f26 	beq	r3,zero,100062cc <__swsetup_r+0x7c>
10006290:	80c00417 	ldw	r3,16(r16)
10006294:	18001526 	beq	r3,zero,100062ec <__swsetup_r+0x9c>
10006298:	1100004c 	andi	r4,r2,1
1000629c:	20001c1e 	bne	r4,zero,10006310 <__swsetup_r+0xc0>
100062a0:	1080008c 	andi	r2,r2,2
100062a4:	1000261e 	bne	r2,zero,10006340 <__swsetup_r+0xf0>
100062a8:	80800517 	ldw	r2,20(r16)
100062ac:	80800215 	stw	r2,8(r16)
100062b0:	18001c26 	beq	r3,zero,10006324 <__swsetup_r+0xd4>
100062b4:	0005883a 	mov	r2,zero
100062b8:	dfc00217 	ldw	ra,8(sp)
100062bc:	dc400117 	ldw	r17,4(sp)
100062c0:	dc000017 	ldw	r16,0(sp)
100062c4:	dec00304 	addi	sp,sp,12
100062c8:	f800283a 	ret
100062cc:	3080040c 	andi	r2,r6,16
100062d0:	10001726 	beq	r2,zero,10006330 <__swsetup_r+0xe0>
100062d4:	3080010c 	andi	r2,r6,4
100062d8:	10001b1e 	bne	r2,zero,10006348 <__swsetup_r+0xf8>
100062dc:	80c00417 	ldw	r3,16(r16)
100062e0:	30800214 	ori	r2,r6,8
100062e4:	8080030d 	sth	r2,12(r16)
100062e8:	183feb1e 	bne	r3,zero,10006298 <__alt_data_end+0xf8006298>
100062ec:	1140a00c 	andi	r5,r2,640
100062f0:	01008004 	movi	r4,512
100062f4:	293fe826 	beq	r5,r4,10006298 <__alt_data_end+0xf8006298>
100062f8:	8809883a 	mov	r4,r17
100062fc:	800b883a 	mov	r5,r16
10006300:	00089400 	call	10008940 <__smakebuf_r>
10006304:	8080030b 	ldhu	r2,12(r16)
10006308:	80c00417 	ldw	r3,16(r16)
1000630c:	003fe206 	br	10006298 <__alt_data_end+0xf8006298>
10006310:	80800517 	ldw	r2,20(r16)
10006314:	80000215 	stw	zero,8(r16)
10006318:	0085c83a 	sub	r2,zero,r2
1000631c:	80800615 	stw	r2,24(r16)
10006320:	183fe41e 	bne	r3,zero,100062b4 <__alt_data_end+0xf80062b4>
10006324:	8080030b 	ldhu	r2,12(r16)
10006328:	1080200c 	andi	r2,r2,128
1000632c:	103fe226 	beq	r2,zero,100062b8 <__alt_data_end+0xf80062b8>
10006330:	00bfffc4 	movi	r2,-1
10006334:	003fe006 	br	100062b8 <__alt_data_end+0xf80062b8>
10006338:	000828c0 	call	1000828c <__sinit>
1000633c:	003fd006 	br	10006280 <__alt_data_end+0xf8006280>
10006340:	0005883a 	mov	r2,zero
10006344:	003fd906 	br	100062ac <__alt_data_end+0xf80062ac>
10006348:	81400c17 	ldw	r5,48(r16)
1000634c:	28000626 	beq	r5,zero,10006368 <__swsetup_r+0x118>
10006350:	80801004 	addi	r2,r16,64
10006354:	28800326 	beq	r5,r2,10006364 <__swsetup_r+0x114>
10006358:	8809883a 	mov	r4,r17
1000635c:	00084000 	call	10008400 <_free_r>
10006360:	8180030b 	ldhu	r6,12(r16)
10006364:	80000c15 	stw	zero,48(r16)
10006368:	80c00417 	ldw	r3,16(r16)
1000636c:	00bff6c4 	movi	r2,-37
10006370:	118c703a 	and	r6,r2,r6
10006374:	80000115 	stw	zero,4(r16)
10006378:	80c00015 	stw	r3,0(r16)
1000637c:	003fd806 	br	100062e0 <__alt_data_end+0xf80062e0>

10006380 <quorem>:
10006380:	defff204 	addi	sp,sp,-56
10006384:	ddc00b15 	stw	r23,44(sp)
10006388:	20800417 	ldw	r2,16(r4)
1000638c:	2dc00417 	ldw	r23,16(r5)
10006390:	dfc00d15 	stw	ra,52(sp)
10006394:	df000c15 	stw	fp,48(sp)
10006398:	dd800a15 	stw	r22,40(sp)
1000639c:	dd400915 	stw	r21,36(sp)
100063a0:	dd000815 	stw	r20,32(sp)
100063a4:	dcc00715 	stw	r19,28(sp)
100063a8:	dc800615 	stw	r18,24(sp)
100063ac:	dc400515 	stw	r17,20(sp)
100063b0:	dc000415 	stw	r16,16(sp)
100063b4:	15c07a16 	blt	r2,r23,100065a0 <quorem+0x220>
100063b8:	bdffffc4 	addi	r23,r23,-1
100063bc:	bde9883a 	add	r20,r23,r23
100063c0:	28c00504 	addi	r3,r5,20
100063c4:	a529883a 	add	r20,r20,r20
100063c8:	1d39883a 	add	fp,r3,r20
100063cc:	24c00504 	addi	r19,r4,20
100063d0:	d9400215 	stw	r5,8(sp)
100063d4:	9d29883a 	add	r20,r19,r20
100063d8:	e1400017 	ldw	r5,0(fp)
100063dc:	d9000015 	stw	r4,0(sp)
100063e0:	a1000017 	ldw	r4,0(r20)
100063e4:	29400044 	addi	r5,r5,1
100063e8:	d8c00115 	stw	r3,4(sp)
100063ec:	dd000315 	stw	r20,12(sp)
100063f0:	0002cec0 	call	10002cec <__udivsi3>
100063f4:	1025883a 	mov	r18,r2
100063f8:	10003026 	beq	r2,zero,100064bc <quorem+0x13c>
100063fc:	dc400117 	ldw	r17,4(sp)
10006400:	9829883a 	mov	r20,r19
10006404:	002d883a 	mov	r22,zero
10006408:	0021883a 	mov	r16,zero
1000640c:	8d400017 	ldw	r21,0(r17)
10006410:	900b883a 	mov	r5,r18
10006414:	8c400104 	addi	r17,r17,4
10006418:	a93fffcc 	andi	r4,r21,65535
1000641c:	0002cfc0 	call	10002cfc <__mulsi3>
10006420:	a808d43a 	srli	r4,r21,16
10006424:	900b883a 	mov	r5,r18
10006428:	b0ad883a 	add	r22,r22,r2
1000642c:	0002cfc0 	call	10002cfc <__mulsi3>
10006430:	a1000017 	ldw	r4,0(r20)
10006434:	b00cd43a 	srli	r6,r22,16
10006438:	b0ffffcc 	andi	r3,r22,65535
1000643c:	217fffcc 	andi	r5,r4,65535
10006440:	2c21883a 	add	r16,r5,r16
10006444:	80c7c83a 	sub	r3,r16,r3
10006448:	2008d43a 	srli	r4,r4,16
1000644c:	3085883a 	add	r2,r6,r2
10006450:	1821d43a 	srai	r16,r3,16
10006454:	117fffcc 	andi	r5,r2,65535
10006458:	2149c83a 	sub	r4,r4,r5
1000645c:	2421883a 	add	r16,r4,r16
10006460:	8008943a 	slli	r4,r16,16
10006464:	18ffffcc 	andi	r3,r3,65535
10006468:	102cd43a 	srli	r22,r2,16
1000646c:	20c8b03a 	or	r4,r4,r3
10006470:	a1000015 	stw	r4,0(r20)
10006474:	8021d43a 	srai	r16,r16,16
10006478:	a5000104 	addi	r20,r20,4
1000647c:	e47fe32e 	bgeu	fp,r17,1000640c <__alt_data_end+0xf800640c>
10006480:	d8c00317 	ldw	r3,12(sp)
10006484:	18800017 	ldw	r2,0(r3)
10006488:	10000c1e 	bne	r2,zero,100064bc <quorem+0x13c>
1000648c:	18bfff04 	addi	r2,r3,-4
10006490:	9880082e 	bgeu	r19,r2,100064b4 <quorem+0x134>
10006494:	18ffff17 	ldw	r3,-4(r3)
10006498:	18000326 	beq	r3,zero,100064a8 <quorem+0x128>
1000649c:	00000506 	br	100064b4 <quorem+0x134>
100064a0:	10c00017 	ldw	r3,0(r2)
100064a4:	1800031e 	bne	r3,zero,100064b4 <quorem+0x134>
100064a8:	10bfff04 	addi	r2,r2,-4
100064ac:	bdffffc4 	addi	r23,r23,-1
100064b0:	98bffb36 	bltu	r19,r2,100064a0 <__alt_data_end+0xf80064a0>
100064b4:	d8c00017 	ldw	r3,0(sp)
100064b8:	1dc00415 	stw	r23,16(r3)
100064bc:	d9000017 	ldw	r4,0(sp)
100064c0:	d9400217 	ldw	r5,8(sp)
100064c4:	0009f600 	call	10009f60 <__mcmp>
100064c8:	10002816 	blt	r2,zero,1000656c <quorem+0x1ec>
100064cc:	dc400117 	ldw	r17,4(sp)
100064d0:	94800044 	addi	r18,r18,1
100064d4:	980d883a 	mov	r6,r19
100064d8:	0007883a 	mov	r3,zero
100064dc:	31000017 	ldw	r4,0(r6)
100064e0:	89400017 	ldw	r5,0(r17)
100064e4:	31800104 	addi	r6,r6,4
100064e8:	20bfffcc 	andi	r2,r4,65535
100064ec:	10c7883a 	add	r3,r2,r3
100064f0:	28bfffcc 	andi	r2,r5,65535
100064f4:	1885c83a 	sub	r2,r3,r2
100064f8:	280ad43a 	srli	r5,r5,16
100064fc:	2008d43a 	srli	r4,r4,16
10006500:	1007d43a 	srai	r3,r2,16
10006504:	10bfffcc 	andi	r2,r2,65535
10006508:	2149c83a 	sub	r4,r4,r5
1000650c:	20c9883a 	add	r4,r4,r3
10006510:	200a943a 	slli	r5,r4,16
10006514:	8c400104 	addi	r17,r17,4
10006518:	2007d43a 	srai	r3,r4,16
1000651c:	2884b03a 	or	r2,r5,r2
10006520:	30bfff15 	stw	r2,-4(r6)
10006524:	e47fed2e 	bgeu	fp,r17,100064dc <__alt_data_end+0xf80064dc>
10006528:	bdc5883a 	add	r2,r23,r23
1000652c:	1085883a 	add	r2,r2,r2
10006530:	9887883a 	add	r3,r19,r2
10006534:	18800017 	ldw	r2,0(r3)
10006538:	10000c1e 	bne	r2,zero,1000656c <quorem+0x1ec>
1000653c:	18bfff04 	addi	r2,r3,-4
10006540:	9880082e 	bgeu	r19,r2,10006564 <quorem+0x1e4>
10006544:	18ffff17 	ldw	r3,-4(r3)
10006548:	18000326 	beq	r3,zero,10006558 <quorem+0x1d8>
1000654c:	00000506 	br	10006564 <quorem+0x1e4>
10006550:	10c00017 	ldw	r3,0(r2)
10006554:	1800031e 	bne	r3,zero,10006564 <quorem+0x1e4>
10006558:	10bfff04 	addi	r2,r2,-4
1000655c:	bdffffc4 	addi	r23,r23,-1
10006560:	98bffb36 	bltu	r19,r2,10006550 <__alt_data_end+0xf8006550>
10006564:	d8c00017 	ldw	r3,0(sp)
10006568:	1dc00415 	stw	r23,16(r3)
1000656c:	9005883a 	mov	r2,r18
10006570:	dfc00d17 	ldw	ra,52(sp)
10006574:	df000c17 	ldw	fp,48(sp)
10006578:	ddc00b17 	ldw	r23,44(sp)
1000657c:	dd800a17 	ldw	r22,40(sp)
10006580:	dd400917 	ldw	r21,36(sp)
10006584:	dd000817 	ldw	r20,32(sp)
10006588:	dcc00717 	ldw	r19,28(sp)
1000658c:	dc800617 	ldw	r18,24(sp)
10006590:	dc400517 	ldw	r17,20(sp)
10006594:	dc000417 	ldw	r16,16(sp)
10006598:	dec00e04 	addi	sp,sp,56
1000659c:	f800283a 	ret
100065a0:	0005883a 	mov	r2,zero
100065a4:	003ff206 	br	10006570 <__alt_data_end+0xf8006570>

100065a8 <_dtoa_r>:
100065a8:	20801017 	ldw	r2,64(r4)
100065ac:	deffde04 	addi	sp,sp,-136
100065b0:	dd401d15 	stw	r21,116(sp)
100065b4:	dcc01b15 	stw	r19,108(sp)
100065b8:	dc801a15 	stw	r18,104(sp)
100065bc:	dc401915 	stw	r17,100(sp)
100065c0:	dc001815 	stw	r16,96(sp)
100065c4:	dfc02115 	stw	ra,132(sp)
100065c8:	df002015 	stw	fp,128(sp)
100065cc:	ddc01f15 	stw	r23,124(sp)
100065d0:	dd801e15 	stw	r22,120(sp)
100065d4:	dd001c15 	stw	r20,112(sp)
100065d8:	d9c00315 	stw	r7,12(sp)
100065dc:	2021883a 	mov	r16,r4
100065e0:	302b883a 	mov	r21,r6
100065e4:	2825883a 	mov	r18,r5
100065e8:	dc402417 	ldw	r17,144(sp)
100065ec:	3027883a 	mov	r19,r6
100065f0:	10000826 	beq	r2,zero,10006614 <_dtoa_r+0x6c>
100065f4:	21801117 	ldw	r6,68(r4)
100065f8:	00c00044 	movi	r3,1
100065fc:	100b883a 	mov	r5,r2
10006600:	1986983a 	sll	r3,r3,r6
10006604:	11800115 	stw	r6,4(r2)
10006608:	10c00215 	stw	r3,8(r2)
1000660c:	000968c0 	call	1000968c <_Bfree>
10006610:	80001015 	stw	zero,64(r16)
10006614:	a8002d16 	blt	r21,zero,100066cc <_dtoa_r+0x124>
10006618:	88000015 	stw	zero,0(r17)
1000661c:	a8dffc2c 	andhi	r3,r21,32752
10006620:	009ffc34 	movhi	r2,32752
10006624:	18801b26 	beq	r3,r2,10006694 <_dtoa_r+0xec>
10006628:	9009883a 	mov	r4,r18
1000662c:	980b883a 	mov	r5,r19
10006630:	000d883a 	mov	r6,zero
10006634:	000f883a 	mov	r7,zero
10006638:	000de400 	call	1000de40 <__eqdf2>
1000663c:	10002a1e 	bne	r2,zero,100066e8 <_dtoa_r+0x140>
10006640:	d8c02317 	ldw	r3,140(sp)
10006644:	d9002517 	ldw	r4,148(sp)
10006648:	00800044 	movi	r2,1
1000664c:	18800015 	stw	r2,0(r3)
10006650:	2001a226 	beq	r4,zero,10006cdc <_dtoa_r+0x734>
10006654:	00840074 	movhi	r2,4097
10006658:	10849144 	addi	r2,r2,4677
1000665c:	20800015 	stw	r2,0(r4)
10006660:	10bfffc4 	addi	r2,r2,-1
10006664:	dfc02117 	ldw	ra,132(sp)
10006668:	df002017 	ldw	fp,128(sp)
1000666c:	ddc01f17 	ldw	r23,124(sp)
10006670:	dd801e17 	ldw	r22,120(sp)
10006674:	dd401d17 	ldw	r21,116(sp)
10006678:	dd001c17 	ldw	r20,112(sp)
1000667c:	dcc01b17 	ldw	r19,108(sp)
10006680:	dc801a17 	ldw	r18,104(sp)
10006684:	dc401917 	ldw	r17,100(sp)
10006688:	dc001817 	ldw	r16,96(sp)
1000668c:	dec02204 	addi	sp,sp,136
10006690:	f800283a 	ret
10006694:	d8c02317 	ldw	r3,140(sp)
10006698:	0089c3c4 	movi	r2,9999
1000669c:	18800015 	stw	r2,0(r3)
100066a0:	90017c26 	beq	r18,zero,10006c94 <_dtoa_r+0x6ec>
100066a4:	00840074 	movhi	r2,4097
100066a8:	10849d04 	addi	r2,r2,4724
100066ac:	d9002517 	ldw	r4,148(sp)
100066b0:	203fec26 	beq	r4,zero,10006664 <__alt_data_end+0xf8006664>
100066b4:	10c000c7 	ldb	r3,3(r2)
100066b8:	18017d1e 	bne	r3,zero,10006cb0 <_dtoa_r+0x708>
100066bc:	10c000c4 	addi	r3,r2,3
100066c0:	d9802517 	ldw	r6,148(sp)
100066c4:	30c00015 	stw	r3,0(r6)
100066c8:	003fe606 	br	10006664 <__alt_data_end+0xf8006664>
100066cc:	04e00034 	movhi	r19,32768
100066d0:	9cffffc4 	addi	r19,r19,-1
100066d4:	00800044 	movi	r2,1
100066d8:	ace6703a 	and	r19,r21,r19
100066dc:	88800015 	stw	r2,0(r17)
100066e0:	982b883a 	mov	r21,r19
100066e4:	003fcd06 	br	1000661c <__alt_data_end+0xf800661c>
100066e8:	d8800204 	addi	r2,sp,8
100066ec:	a822d53a 	srli	r17,r21,20
100066f0:	d8800015 	stw	r2,0(sp)
100066f4:	8009883a 	mov	r4,r16
100066f8:	900b883a 	mov	r5,r18
100066fc:	980d883a 	mov	r6,r19
10006700:	d9c00104 	addi	r7,sp,4
10006704:	000a2d40 	call	1000a2d4 <__d2b>
10006708:	1039883a 	mov	fp,r2
1000670c:	88016a1e 	bne	r17,zero,10006cb8 <_dtoa_r+0x710>
10006710:	dd000217 	ldw	r20,8(sp)
10006714:	dc400117 	ldw	r17,4(sp)
10006718:	00befbc4 	movi	r2,-1041
1000671c:	a463883a 	add	r17,r20,r17
10006720:	8882ea16 	blt	r17,r2,100072cc <_dtoa_r+0xd24>
10006724:	00bf0384 	movi	r2,-1010
10006728:	1445c83a 	sub	r2,r2,r17
1000672c:	89010484 	addi	r4,r17,1042
10006730:	a8aa983a 	sll	r21,r21,r2
10006734:	9108d83a 	srl	r4,r18,r4
10006738:	a908b03a 	or	r4,r21,r4
1000673c:	000e8f00 	call	1000e8f0 <__floatunsidf>
10006740:	017f8434 	movhi	r5,65040
10006744:	01800044 	movi	r6,1
10006748:	1009883a 	mov	r4,r2
1000674c:	194b883a 	add	r5,r3,r5
10006750:	8c7fffc4 	addi	r17,r17,-1
10006754:	d9800f15 	stw	r6,60(sp)
10006758:	000d883a 	mov	r6,zero
1000675c:	01cffe34 	movhi	r7,16376
10006760:	00035c00 	call	100035c0 <__subdf3>
10006764:	0198dbf4 	movhi	r6,25455
10006768:	01cff4f4 	movhi	r7,16339
1000676c:	1009883a 	mov	r4,r2
10006770:	180b883a 	mov	r5,r3
10006774:	3190d844 	addi	r6,r6,17249
10006778:	39e1e9c4 	addi	r7,r7,-30809
1000677c:	000e0840 	call	1000e084 <__muldf3>
10006780:	01a2d874 	movhi	r6,35681
10006784:	01cff1f4 	movhi	r7,16327
10006788:	180b883a 	mov	r5,r3
1000678c:	31b22cc4 	addi	r6,r6,-14157
10006790:	39e28a04 	addi	r7,r7,-30168
10006794:	1009883a 	mov	r4,r2
10006798:	0002d240 	call	10002d24 <__adddf3>
1000679c:	8809883a 	mov	r4,r17
100067a0:	102d883a 	mov	r22,r2
100067a4:	182b883a 	mov	r21,r3
100067a8:	0003f180 	call	10003f18 <__floatsidf>
100067ac:	019427f4 	movhi	r6,20639
100067b0:	01cff4f4 	movhi	r7,16339
100067b4:	1009883a 	mov	r4,r2
100067b8:	180b883a 	mov	r5,r3
100067bc:	319e7ec4 	addi	r6,r6,31227
100067c0:	39d104c4 	addi	r7,r7,17427
100067c4:	000e0840 	call	1000e084 <__muldf3>
100067c8:	b009883a 	mov	r4,r22
100067cc:	a80b883a 	mov	r5,r21
100067d0:	100d883a 	mov	r6,r2
100067d4:	180f883a 	mov	r7,r3
100067d8:	0002d240 	call	10002d24 <__adddf3>
100067dc:	1009883a 	mov	r4,r2
100067e0:	180b883a 	mov	r5,r3
100067e4:	102d883a 	mov	r22,r2
100067e8:	182b883a 	mov	r21,r3
100067ec:	0003e900 	call	10003e90 <__fixdfsi>
100067f0:	b009883a 	mov	r4,r22
100067f4:	a80b883a 	mov	r5,r21
100067f8:	000d883a 	mov	r6,zero
100067fc:	000f883a 	mov	r7,zero
10006800:	d8800515 	stw	r2,20(sp)
10006804:	000dfa40 	call	1000dfa4 <__ledf2>
10006808:	10023116 	blt	r2,zero,100070d0 <_dtoa_r+0xb28>
1000680c:	d8c00517 	ldw	r3,20(sp)
10006810:	00800584 	movi	r2,22
10006814:	10c21f36 	bltu	r2,r3,10007094 <_dtoa_r+0xaec>
10006818:	180490fa 	slli	r2,r3,3
1000681c:	00c40074 	movhi	r3,4097
10006820:	18c4b904 	addi	r3,r3,4836
10006824:	1885883a 	add	r2,r3,r2
10006828:	11000017 	ldw	r4,0(r2)
1000682c:	11400117 	ldw	r5,4(r2)
10006830:	900d883a 	mov	r6,r18
10006834:	980f883a 	mov	r7,r19
10006838:	000dec40 	call	1000dec4 <__gedf2>
1000683c:	0082a70e 	bge	zero,r2,100072dc <_dtoa_r+0xd34>
10006840:	d9000517 	ldw	r4,20(sp)
10006844:	d8000c15 	stw	zero,48(sp)
10006848:	213fffc4 	addi	r4,r4,-1
1000684c:	d9000515 	stw	r4,20(sp)
10006850:	a463c83a 	sub	r17,r20,r17
10006854:	8dbfffc4 	addi	r22,r17,-1
10006858:	b0021916 	blt	r22,zero,100070c0 <_dtoa_r+0xb18>
1000685c:	d8000815 	stw	zero,32(sp)
10006860:	d8800517 	ldw	r2,20(sp)
10006864:	10020e16 	blt	r2,zero,100070a0 <_dtoa_r+0xaf8>
10006868:	b0ad883a 	add	r22,r22,r2
1000686c:	d8800a15 	stw	r2,40(sp)
10006870:	d8000915 	stw	zero,36(sp)
10006874:	d8c00317 	ldw	r3,12(sp)
10006878:	00800244 	movi	r2,9
1000687c:	10c11a36 	bltu	r2,r3,10006ce8 <_dtoa_r+0x740>
10006880:	00800144 	movi	r2,5
10006884:	10c4fc0e 	bge	r2,r3,10007c78 <_dtoa_r+0x16d0>
10006888:	18ffff04 	addi	r3,r3,-4
1000688c:	d8c00315 	stw	r3,12(sp)
10006890:	0029883a 	mov	r20,zero
10006894:	d9800317 	ldw	r6,12(sp)
10006898:	008000c4 	movi	r2,3
1000689c:	3083bd26 	beq	r6,r2,10007794 <_dtoa_r+0x11ec>
100068a0:	1183670e 	bge	r2,r6,10007640 <_dtoa_r+0x1098>
100068a4:	d8c00317 	ldw	r3,12(sp)
100068a8:	00800104 	movi	r2,4
100068ac:	1882e726 	beq	r3,r2,1000744c <_dtoa_r+0xea4>
100068b0:	00800144 	movi	r2,5
100068b4:	1884f21e 	bne	r3,r2,10007c80 <_dtoa_r+0x16d8>
100068b8:	00800044 	movi	r2,1
100068bc:	d8800b15 	stw	r2,44(sp)
100068c0:	d8c02217 	ldw	r3,136(sp)
100068c4:	d9000517 	ldw	r4,20(sp)
100068c8:	1907883a 	add	r3,r3,r4
100068cc:	19800044 	addi	r6,r3,1
100068d0:	d8c00d15 	stw	r3,52(sp)
100068d4:	d9800615 	stw	r6,24(sp)
100068d8:	0183c30e 	bge	zero,r6,100077e8 <_dtoa_r+0x1240>
100068dc:	d9800617 	ldw	r6,24(sp)
100068e0:	3023883a 	mov	r17,r6
100068e4:	80001115 	stw	zero,68(r16)
100068e8:	008005c4 	movi	r2,23
100068ec:	1184f62e 	bgeu	r2,r6,10007cc8 <_dtoa_r+0x1720>
100068f0:	00c00044 	movi	r3,1
100068f4:	00800104 	movi	r2,4
100068f8:	1085883a 	add	r2,r2,r2
100068fc:	11000504 	addi	r4,r2,20
10006900:	180b883a 	mov	r5,r3
10006904:	18c00044 	addi	r3,r3,1
10006908:	313ffb2e 	bgeu	r6,r4,100068f8 <__alt_data_end+0xf80068f8>
1000690c:	81401115 	stw	r5,68(r16)
10006910:	8009883a 	mov	r4,r16
10006914:	00095e40 	call	100095e4 <_Balloc>
10006918:	d8800715 	stw	r2,28(sp)
1000691c:	80801015 	stw	r2,64(r16)
10006920:	00800384 	movi	r2,14
10006924:	1440fd36 	bltu	r2,r17,10006d1c <_dtoa_r+0x774>
10006928:	a000fc26 	beq	r20,zero,10006d1c <_dtoa_r+0x774>
1000692c:	d8800517 	ldw	r2,20(sp)
10006930:	0083b90e 	bge	zero,r2,10007818 <_dtoa_r+0x1270>
10006934:	d8c00517 	ldw	r3,20(sp)
10006938:	108003cc 	andi	r2,r2,15
1000693c:	100490fa 	slli	r2,r2,3
10006940:	182fd13a 	srai	r23,r3,4
10006944:	00c40074 	movhi	r3,4097
10006948:	18c4b904 	addi	r3,r3,4836
1000694c:	1885883a 	add	r2,r3,r2
10006950:	b8c0040c 	andi	r3,r23,16
10006954:	12c00017 	ldw	r11,0(r2)
10006958:	12800117 	ldw	r10,4(r2)
1000695c:	18039726 	beq	r3,zero,100077bc <_dtoa_r+0x1214>
10006960:	00840074 	movhi	r2,4097
10006964:	1084af04 	addi	r2,r2,4796
10006968:	11800817 	ldw	r6,32(r2)
1000696c:	11c00917 	ldw	r7,36(r2)
10006970:	9009883a 	mov	r4,r18
10006974:	980b883a 	mov	r5,r19
10006978:	da801615 	stw	r10,88(sp)
1000697c:	dac01515 	stw	r11,84(sp)
10006980:	000d4c00 	call	1000d4c0 <__divdf3>
10006984:	da801617 	ldw	r10,88(sp)
10006988:	dac01517 	ldw	r11,84(sp)
1000698c:	bdc003cc 	andi	r23,r23,15
10006990:	044000c4 	movi	r17,3
10006994:	d8800e15 	stw	r2,56(sp)
10006998:	182b883a 	mov	r21,r3
1000699c:	b8001126 	beq	r23,zero,100069e4 <_dtoa_r+0x43c>
100069a0:	05040074 	movhi	r20,4097
100069a4:	a504af04 	addi	r20,r20,4796
100069a8:	5805883a 	mov	r2,r11
100069ac:	5007883a 	mov	r3,r10
100069b0:	b980004c 	andi	r6,r23,1
100069b4:	1009883a 	mov	r4,r2
100069b8:	b82fd07a 	srai	r23,r23,1
100069bc:	180b883a 	mov	r5,r3
100069c0:	30000426 	beq	r6,zero,100069d4 <_dtoa_r+0x42c>
100069c4:	a1800017 	ldw	r6,0(r20)
100069c8:	a1c00117 	ldw	r7,4(r20)
100069cc:	8c400044 	addi	r17,r17,1
100069d0:	000e0840 	call	1000e084 <__muldf3>
100069d4:	a5000204 	addi	r20,r20,8
100069d8:	b83ff51e 	bne	r23,zero,100069b0 <__alt_data_end+0xf80069b0>
100069dc:	1017883a 	mov	r11,r2
100069e0:	1815883a 	mov	r10,r3
100069e4:	d9000e17 	ldw	r4,56(sp)
100069e8:	a80b883a 	mov	r5,r21
100069ec:	580d883a 	mov	r6,r11
100069f0:	500f883a 	mov	r7,r10
100069f4:	000d4c00 	call	1000d4c0 <__divdf3>
100069f8:	1029883a 	mov	r20,r2
100069fc:	182b883a 	mov	r21,r3
10006a00:	d9800c17 	ldw	r6,48(sp)
10006a04:	30000626 	beq	r6,zero,10006a20 <_dtoa_r+0x478>
10006a08:	a009883a 	mov	r4,r20
10006a0c:	a80b883a 	mov	r5,r21
10006a10:	000d883a 	mov	r6,zero
10006a14:	01cffc34 	movhi	r7,16368
10006a18:	000dfa40 	call	1000dfa4 <__ledf2>
10006a1c:	10043216 	blt	r2,zero,10007ae8 <_dtoa_r+0x1540>
10006a20:	8809883a 	mov	r4,r17
10006a24:	0003f180 	call	10003f18 <__floatsidf>
10006a28:	1009883a 	mov	r4,r2
10006a2c:	180b883a 	mov	r5,r3
10006a30:	a00d883a 	mov	r6,r20
10006a34:	a80f883a 	mov	r7,r21
10006a38:	000e0840 	call	1000e084 <__muldf3>
10006a3c:	000d883a 	mov	r6,zero
10006a40:	1009883a 	mov	r4,r2
10006a44:	180b883a 	mov	r5,r3
10006a48:	01d00734 	movhi	r7,16412
10006a4c:	0002d240 	call	10002d24 <__adddf3>
10006a50:	1023883a 	mov	r17,r2
10006a54:	d9800617 	ldw	r6,24(sp)
10006a58:	00bf3034 	movhi	r2,64704
10006a5c:	1885883a 	add	r2,r3,r2
10006a60:	d8800e15 	stw	r2,56(sp)
10006a64:	30032e26 	beq	r6,zero,10007720 <_dtoa_r+0x1178>
10006a68:	d8c00517 	ldw	r3,20(sp)
10006a6c:	da800617 	ldw	r10,24(sp)
10006a70:	d8c01215 	stw	r3,72(sp)
10006a74:	d9000b17 	ldw	r4,44(sp)
10006a78:	2003b026 	beq	r4,zero,1000793c <_dtoa_r+0x1394>
10006a7c:	50bfffc4 	addi	r2,r10,-1
10006a80:	100490fa 	slli	r2,r2,3
10006a84:	00c40074 	movhi	r3,4097
10006a88:	18c4b904 	addi	r3,r3,4836
10006a8c:	1885883a 	add	r2,r3,r2
10006a90:	11800017 	ldw	r6,0(r2)
10006a94:	11c00117 	ldw	r7,4(r2)
10006a98:	d8800717 	ldw	r2,28(sp)
10006a9c:	0009883a 	mov	r4,zero
10006aa0:	014ff834 	movhi	r5,16352
10006aa4:	da801615 	stw	r10,88(sp)
10006aa8:	15c00044 	addi	r23,r2,1
10006aac:	000d4c00 	call	1000d4c0 <__divdf3>
10006ab0:	d9c00e17 	ldw	r7,56(sp)
10006ab4:	880d883a 	mov	r6,r17
10006ab8:	1009883a 	mov	r4,r2
10006abc:	180b883a 	mov	r5,r3
10006ac0:	00035c00 	call	100035c0 <__subdf3>
10006ac4:	a80b883a 	mov	r5,r21
10006ac8:	a009883a 	mov	r4,r20
10006acc:	d8c01015 	stw	r3,64(sp)
10006ad0:	d8800e15 	stw	r2,56(sp)
10006ad4:	0003e900 	call	10003e90 <__fixdfsi>
10006ad8:	1009883a 	mov	r4,r2
10006adc:	d8801715 	stw	r2,92(sp)
10006ae0:	0003f180 	call	10003f18 <__floatsidf>
10006ae4:	a009883a 	mov	r4,r20
10006ae8:	a80b883a 	mov	r5,r21
10006aec:	100d883a 	mov	r6,r2
10006af0:	180f883a 	mov	r7,r3
10006af4:	00035c00 	call	100035c0 <__subdf3>
10006af8:	da001717 	ldw	r8,92(sp)
10006afc:	1829883a 	mov	r20,r3
10006b00:	d8c00717 	ldw	r3,28(sp)
10006b04:	d9000e17 	ldw	r4,56(sp)
10006b08:	d9401017 	ldw	r5,64(sp)
10006b0c:	42000c04 	addi	r8,r8,48
10006b10:	1023883a 	mov	r17,r2
10006b14:	1a000005 	stb	r8,0(r3)
10006b18:	880d883a 	mov	r6,r17
10006b1c:	a00f883a 	mov	r7,r20
10006b20:	402b883a 	mov	r21,r8
10006b24:	000dec40 	call	1000dec4 <__gedf2>
10006b28:	00844516 	blt	zero,r2,10007c40 <_dtoa_r+0x1698>
10006b2c:	0009883a 	mov	r4,zero
10006b30:	014ffc34 	movhi	r5,16368
10006b34:	880d883a 	mov	r6,r17
10006b38:	a00f883a 	mov	r7,r20
10006b3c:	00035c00 	call	100035c0 <__subdf3>
10006b40:	d9000e17 	ldw	r4,56(sp)
10006b44:	d9401017 	ldw	r5,64(sp)
10006b48:	100d883a 	mov	r6,r2
10006b4c:	180f883a 	mov	r7,r3
10006b50:	000dec40 	call	1000dec4 <__gedf2>
10006b54:	da801617 	ldw	r10,88(sp)
10006b58:	00843616 	blt	zero,r2,10007c34 <_dtoa_r+0x168c>
10006b5c:	00800044 	movi	r2,1
10006b60:	12806e0e 	bge	r2,r10,10006d1c <_dtoa_r+0x774>
10006b64:	d9000717 	ldw	r4,28(sp)
10006b68:	dd801315 	stw	r22,76(sp)
10006b6c:	dc001115 	stw	r16,68(sp)
10006b70:	2295883a 	add	r10,r4,r10
10006b74:	dcc01415 	stw	r19,80(sp)
10006b78:	502d883a 	mov	r22,r10
10006b7c:	dcc01017 	ldw	r19,64(sp)
10006b80:	b821883a 	mov	r16,r23
10006b84:	dc801015 	stw	r18,64(sp)
10006b88:	dc800e17 	ldw	r18,56(sp)
10006b8c:	00000906 	br	10006bb4 <_dtoa_r+0x60c>
10006b90:	00035c00 	call	100035c0 <__subdf3>
10006b94:	1009883a 	mov	r4,r2
10006b98:	180b883a 	mov	r5,r3
10006b9c:	900d883a 	mov	r6,r18
10006ba0:	980f883a 	mov	r7,r19
10006ba4:	000dfa40 	call	1000dfa4 <__ledf2>
10006ba8:	10040e16 	blt	r2,zero,10007be4 <_dtoa_r+0x163c>
10006bac:	b821883a 	mov	r16,r23
10006bb0:	bd841026 	beq	r23,r22,10007bf4 <_dtoa_r+0x164c>
10006bb4:	9009883a 	mov	r4,r18
10006bb8:	980b883a 	mov	r5,r19
10006bbc:	000d883a 	mov	r6,zero
10006bc0:	01d00934 	movhi	r7,16420
10006bc4:	000e0840 	call	1000e084 <__muldf3>
10006bc8:	000d883a 	mov	r6,zero
10006bcc:	01d00934 	movhi	r7,16420
10006bd0:	8809883a 	mov	r4,r17
10006bd4:	a00b883a 	mov	r5,r20
10006bd8:	1025883a 	mov	r18,r2
10006bdc:	1827883a 	mov	r19,r3
10006be0:	000e0840 	call	1000e084 <__muldf3>
10006be4:	180b883a 	mov	r5,r3
10006be8:	1009883a 	mov	r4,r2
10006bec:	1823883a 	mov	r17,r3
10006bf0:	1029883a 	mov	r20,r2
10006bf4:	0003e900 	call	10003e90 <__fixdfsi>
10006bf8:	1009883a 	mov	r4,r2
10006bfc:	102b883a 	mov	r21,r2
10006c00:	0003f180 	call	10003f18 <__floatsidf>
10006c04:	a009883a 	mov	r4,r20
10006c08:	880b883a 	mov	r5,r17
10006c0c:	100d883a 	mov	r6,r2
10006c10:	180f883a 	mov	r7,r3
10006c14:	00035c00 	call	100035c0 <__subdf3>
10006c18:	ad400c04 	addi	r21,r21,48
10006c1c:	1009883a 	mov	r4,r2
10006c20:	180b883a 	mov	r5,r3
10006c24:	900d883a 	mov	r6,r18
10006c28:	980f883a 	mov	r7,r19
10006c2c:	85400005 	stb	r21,0(r16)
10006c30:	1023883a 	mov	r17,r2
10006c34:	1829883a 	mov	r20,r3
10006c38:	000dfa40 	call	1000dfa4 <__ledf2>
10006c3c:	bdc00044 	addi	r23,r23,1
10006c40:	0009883a 	mov	r4,zero
10006c44:	014ffc34 	movhi	r5,16368
10006c48:	880d883a 	mov	r6,r17
10006c4c:	a00f883a 	mov	r7,r20
10006c50:	103fcf0e 	bge	r2,zero,10006b90 <__alt_data_end+0xf8006b90>
10006c54:	d9801217 	ldw	r6,72(sp)
10006c58:	dc001117 	ldw	r16,68(sp)
10006c5c:	d9800515 	stw	r6,20(sp)
10006c60:	8009883a 	mov	r4,r16
10006c64:	e00b883a 	mov	r5,fp
10006c68:	000968c0 	call	1000968c <_Bfree>
10006c6c:	d8c00517 	ldw	r3,20(sp)
10006c70:	d9002317 	ldw	r4,140(sp)
10006c74:	d9802517 	ldw	r6,148(sp)
10006c78:	b8000005 	stb	zero,0(r23)
10006c7c:	18800044 	addi	r2,r3,1
10006c80:	20800015 	stw	r2,0(r4)
10006c84:	30027226 	beq	r6,zero,10007650 <_dtoa_r+0x10a8>
10006c88:	35c00015 	stw	r23,0(r6)
10006c8c:	d8800717 	ldw	r2,28(sp)
10006c90:	003e7406 	br	10006664 <__alt_data_end+0xf8006664>
10006c94:	00800434 	movhi	r2,16
10006c98:	10bfffc4 	addi	r2,r2,-1
10006c9c:	a8aa703a 	and	r21,r21,r2
10006ca0:	a83e801e 	bne	r21,zero,100066a4 <__alt_data_end+0xf80066a4>
10006ca4:	00840074 	movhi	r2,4097
10006ca8:	10849a04 	addi	r2,r2,4712
10006cac:	003e7f06 	br	100066ac <__alt_data_end+0xf80066ac>
10006cb0:	10c00204 	addi	r3,r2,8
10006cb4:	003e8206 	br	100066c0 <__alt_data_end+0xf80066c0>
10006cb8:	01400434 	movhi	r5,16
10006cbc:	297fffc4 	addi	r5,r5,-1
10006cc0:	994a703a 	and	r5,r19,r5
10006cc4:	9009883a 	mov	r4,r18
10006cc8:	8c7f0044 	addi	r17,r17,-1023
10006ccc:	294ffc34 	orhi	r5,r5,16368
10006cd0:	dd000217 	ldw	r20,8(sp)
10006cd4:	d8000f15 	stw	zero,60(sp)
10006cd8:	003e9f06 	br	10006758 <__alt_data_end+0xf8006758>
10006cdc:	00840074 	movhi	r2,4097
10006ce0:	10849104 	addi	r2,r2,4676
10006ce4:	003e5f06 	br	10006664 <__alt_data_end+0xf8006664>
10006ce8:	80001115 	stw	zero,68(r16)
10006cec:	8009883a 	mov	r4,r16
10006cf0:	000b883a 	mov	r5,zero
10006cf4:	00095e40 	call	100095e4 <_Balloc>
10006cf8:	01bfffc4 	movi	r6,-1
10006cfc:	d8800715 	stw	r2,28(sp)
10006d00:	80801015 	stw	r2,64(r16)
10006d04:	00800044 	movi	r2,1
10006d08:	d9800615 	stw	r6,24(sp)
10006d0c:	d8800b15 	stw	r2,44(sp)
10006d10:	d8002215 	stw	zero,136(sp)
10006d14:	d9800d15 	stw	r6,52(sp)
10006d18:	d8000315 	stw	zero,12(sp)
10006d1c:	d8800117 	ldw	r2,4(sp)
10006d20:	10008e16 	blt	r2,zero,10006f5c <_dtoa_r+0x9b4>
10006d24:	d9000517 	ldw	r4,20(sp)
10006d28:	00c00384 	movi	r3,14
10006d2c:	19008b16 	blt	r3,r4,10006f5c <_dtoa_r+0x9b4>
10006d30:	200490fa 	slli	r2,r4,3
10006d34:	00c40074 	movhi	r3,4097
10006d38:	d9802217 	ldw	r6,136(sp)
10006d3c:	18c4b904 	addi	r3,r3,4836
10006d40:	1885883a 	add	r2,r3,r2
10006d44:	14400017 	ldw	r17,0(r2)
10006d48:	15000117 	ldw	r20,4(r2)
10006d4c:	3001c716 	blt	r6,zero,1000746c <_dtoa_r+0xec4>
10006d50:	880d883a 	mov	r6,r17
10006d54:	a00f883a 	mov	r7,r20
10006d58:	9009883a 	mov	r4,r18
10006d5c:	980b883a 	mov	r5,r19
10006d60:	000d4c00 	call	1000d4c0 <__divdf3>
10006d64:	180b883a 	mov	r5,r3
10006d68:	1009883a 	mov	r4,r2
10006d6c:	0003e900 	call	10003e90 <__fixdfsi>
10006d70:	1009883a 	mov	r4,r2
10006d74:	102d883a 	mov	r22,r2
10006d78:	0003f180 	call	10003f18 <__floatsidf>
10006d7c:	1009883a 	mov	r4,r2
10006d80:	180b883a 	mov	r5,r3
10006d84:	880d883a 	mov	r6,r17
10006d88:	a00f883a 	mov	r7,r20
10006d8c:	000e0840 	call	1000e084 <__muldf3>
10006d90:	9009883a 	mov	r4,r18
10006d94:	980b883a 	mov	r5,r19
10006d98:	100d883a 	mov	r6,r2
10006d9c:	180f883a 	mov	r7,r3
10006da0:	00035c00 	call	100035c0 <__subdf3>
10006da4:	d9000717 	ldw	r4,28(sp)
10006da8:	d9800617 	ldw	r6,24(sp)
10006dac:	180b883a 	mov	r5,r3
10006db0:	b0c00c04 	addi	r3,r22,48
10006db4:	20c00005 	stb	r3,0(r4)
10006db8:	25c00044 	addi	r23,r4,1
10006dbc:	01000044 	movi	r4,1
10006dc0:	1011883a 	mov	r8,r2
10006dc4:	2807883a 	mov	r3,r5
10006dc8:	31003d26 	beq	r6,r4,10006ec0 <_dtoa_r+0x918>
10006dcc:	000d883a 	mov	r6,zero
10006dd0:	01d00934 	movhi	r7,16420
10006dd4:	1009883a 	mov	r4,r2
10006dd8:	000e0840 	call	1000e084 <__muldf3>
10006ddc:	1009883a 	mov	r4,r2
10006de0:	180b883a 	mov	r5,r3
10006de4:	000d883a 	mov	r6,zero
10006de8:	000f883a 	mov	r7,zero
10006dec:	1027883a 	mov	r19,r2
10006df0:	182b883a 	mov	r21,r3
10006df4:	000de400 	call	1000de40 <__eqdf2>
10006df8:	103f9926 	beq	r2,zero,10006c60 <__alt_data_end+0xf8006c60>
10006dfc:	d8c00617 	ldw	r3,24(sp)
10006e00:	d9000717 	ldw	r4,28(sp)
10006e04:	b825883a 	mov	r18,r23
10006e08:	18bfffc4 	addi	r2,r3,-1
10006e0c:	20ad883a 	add	r22,r4,r2
10006e10:	dc000315 	stw	r16,12(sp)
10006e14:	00000a06 	br	10006e40 <_dtoa_r+0x898>
10006e18:	000e0840 	call	1000e084 <__muldf3>
10006e1c:	1009883a 	mov	r4,r2
10006e20:	180b883a 	mov	r5,r3
10006e24:	000d883a 	mov	r6,zero
10006e28:	000f883a 	mov	r7,zero
10006e2c:	1027883a 	mov	r19,r2
10006e30:	182b883a 	mov	r21,r3
10006e34:	b825883a 	mov	r18,r23
10006e38:	000de400 	call	1000de40 <__eqdf2>
10006e3c:	10022626 	beq	r2,zero,100076d8 <_dtoa_r+0x1130>
10006e40:	880d883a 	mov	r6,r17
10006e44:	a00f883a 	mov	r7,r20
10006e48:	9809883a 	mov	r4,r19
10006e4c:	a80b883a 	mov	r5,r21
10006e50:	000d4c00 	call	1000d4c0 <__divdf3>
10006e54:	180b883a 	mov	r5,r3
10006e58:	1009883a 	mov	r4,r2
10006e5c:	0003e900 	call	10003e90 <__fixdfsi>
10006e60:	1009883a 	mov	r4,r2
10006e64:	1021883a 	mov	r16,r2
10006e68:	0003f180 	call	10003f18 <__floatsidf>
10006e6c:	1009883a 	mov	r4,r2
10006e70:	180b883a 	mov	r5,r3
10006e74:	880d883a 	mov	r6,r17
10006e78:	a00f883a 	mov	r7,r20
10006e7c:	000e0840 	call	1000e084 <__muldf3>
10006e80:	9809883a 	mov	r4,r19
10006e84:	a80b883a 	mov	r5,r21
10006e88:	100d883a 	mov	r6,r2
10006e8c:	180f883a 	mov	r7,r3
10006e90:	00035c00 	call	100035c0 <__subdf3>
10006e94:	82000c04 	addi	r8,r16,48
10006e98:	92000005 	stb	r8,0(r18)
10006e9c:	1009883a 	mov	r4,r2
10006ea0:	180b883a 	mov	r5,r3
10006ea4:	000d883a 	mov	r6,zero
10006ea8:	01d00934 	movhi	r7,16420
10006eac:	1011883a 	mov	r8,r2
10006eb0:	bdc00044 	addi	r23,r23,1
10006eb4:	95bfd81e 	bne	r18,r22,10006e18 <__alt_data_end+0xf8006e18>
10006eb8:	802d883a 	mov	r22,r16
10006ebc:	dc000317 	ldw	r16,12(sp)
10006ec0:	4009883a 	mov	r4,r8
10006ec4:	180b883a 	mov	r5,r3
10006ec8:	400d883a 	mov	r6,r8
10006ecc:	180f883a 	mov	r7,r3
10006ed0:	0002d240 	call	10002d24 <__adddf3>
10006ed4:	8809883a 	mov	r4,r17
10006ed8:	a00b883a 	mov	r5,r20
10006edc:	100d883a 	mov	r6,r2
10006ee0:	180f883a 	mov	r7,r3
10006ee4:	1027883a 	mov	r19,r2
10006ee8:	1825883a 	mov	r18,r3
10006eec:	000dfa40 	call	1000dfa4 <__ledf2>
10006ef0:	10000816 	blt	r2,zero,10006f14 <_dtoa_r+0x96c>
10006ef4:	8809883a 	mov	r4,r17
10006ef8:	a00b883a 	mov	r5,r20
10006efc:	980d883a 	mov	r6,r19
10006f00:	900f883a 	mov	r7,r18
10006f04:	000de400 	call	1000de40 <__eqdf2>
10006f08:	103f551e 	bne	r2,zero,10006c60 <__alt_data_end+0xf8006c60>
10006f0c:	b580004c 	andi	r22,r22,1
10006f10:	b03f5326 	beq	r22,zero,10006c60 <__alt_data_end+0xf8006c60>
10006f14:	bd7fffc3 	ldbu	r21,-1(r23)
10006f18:	b8bfffc4 	addi	r2,r23,-1
10006f1c:	1007883a 	mov	r3,r2
10006f20:	01400e44 	movi	r5,57
10006f24:	d9800717 	ldw	r6,28(sp)
10006f28:	00000506 	br	10006f40 <_dtoa_r+0x998>
10006f2c:	18ffffc4 	addi	r3,r3,-1
10006f30:	30825e26 	beq	r6,r2,100078ac <_dtoa_r+0x1304>
10006f34:	1d400003 	ldbu	r21,0(r3)
10006f38:	102f883a 	mov	r23,r2
10006f3c:	10bfffc4 	addi	r2,r2,-1
10006f40:	a9003fcc 	andi	r4,r21,255
10006f44:	2100201c 	xori	r4,r4,128
10006f48:	213fe004 	addi	r4,r4,-128
10006f4c:	217ff726 	beq	r4,r5,10006f2c <__alt_data_end+0xf8006f2c>
10006f50:	aa000044 	addi	r8,r21,1
10006f54:	12000005 	stb	r8,0(r2)
10006f58:	003f4106 	br	10006c60 <__alt_data_end+0xf8006c60>
10006f5c:	d8c00b17 	ldw	r3,44(sp)
10006f60:	18006726 	beq	r3,zero,10007100 <_dtoa_r+0xb58>
10006f64:	d9000317 	ldw	r4,12(sp)
10006f68:	00c00044 	movi	r3,1
10006f6c:	19016a0e 	bge	r3,r4,10007518 <_dtoa_r+0xf70>
10006f70:	d8800617 	ldw	r2,24(sp)
10006f74:	d8c00917 	ldw	r3,36(sp)
10006f78:	157fffc4 	addi	r21,r2,-1
10006f7c:	1d420716 	blt	r3,r21,1000779c <_dtoa_r+0x11f4>
10006f80:	1d6bc83a 	sub	r21,r3,r21
10006f84:	d8800617 	ldw	r2,24(sp)
10006f88:	1002c716 	blt	r2,zero,10007aa8 <_dtoa_r+0x1500>
10006f8c:	dd000817 	ldw	r20,32(sp)
10006f90:	d8800617 	ldw	r2,24(sp)
10006f94:	d9800817 	ldw	r6,32(sp)
10006f98:	8009883a 	mov	r4,r16
10006f9c:	01400044 	movi	r5,1
10006fa0:	308d883a 	add	r6,r6,r2
10006fa4:	d9800815 	stw	r6,32(sp)
10006fa8:	b0ad883a 	add	r22,r22,r2
10006fac:	0009a0c0 	call	10009a0c <__i2b>
10006fb0:	1023883a 	mov	r17,r2
10006fb4:	a0000826 	beq	r20,zero,10006fd8 <_dtoa_r+0xa30>
10006fb8:	0580070e 	bge	zero,r22,10006fd8 <_dtoa_r+0xa30>
10006fbc:	b005883a 	mov	r2,r22
10006fc0:	a5812016 	blt	r20,r22,10007444 <_dtoa_r+0xe9c>
10006fc4:	d8c00817 	ldw	r3,32(sp)
10006fc8:	a0a9c83a 	sub	r20,r20,r2
10006fcc:	b0adc83a 	sub	r22,r22,r2
10006fd0:	1887c83a 	sub	r3,r3,r2
10006fd4:	d8c00815 	stw	r3,32(sp)
10006fd8:	d9000917 	ldw	r4,36(sp)
10006fdc:	0100140e 	bge	zero,r4,10007030 <_dtoa_r+0xa88>
10006fe0:	d9800b17 	ldw	r6,44(sp)
10006fe4:	3001e526 	beq	r6,zero,1000777c <_dtoa_r+0x11d4>
10006fe8:	05400e0e 	bge	zero,r21,10007024 <_dtoa_r+0xa7c>
10006fec:	880b883a 	mov	r5,r17
10006ff0:	8009883a 	mov	r4,r16
10006ff4:	a80d883a 	mov	r6,r21
10006ff8:	0009cd80 	call	10009cd8 <__pow5mult>
10006ffc:	e00d883a 	mov	r6,fp
10007000:	8009883a 	mov	r4,r16
10007004:	100b883a 	mov	r5,r2
10007008:	1023883a 	mov	r17,r2
1000700c:	0009a480 	call	10009a48 <__multiply>
10007010:	102f883a 	mov	r23,r2
10007014:	e00b883a 	mov	r5,fp
10007018:	8009883a 	mov	r4,r16
1000701c:	000968c0 	call	1000968c <_Bfree>
10007020:	b839883a 	mov	fp,r23
10007024:	d8800917 	ldw	r2,36(sp)
10007028:	154dc83a 	sub	r6,r2,r21
1000702c:	3001281e 	bne	r6,zero,100074d0 <_dtoa_r+0xf28>
10007030:	05c00044 	movi	r23,1
10007034:	8009883a 	mov	r4,r16
10007038:	b80b883a 	mov	r5,r23
1000703c:	0009a0c0 	call	10009a0c <__i2b>
10007040:	d8c00a17 	ldw	r3,40(sp)
10007044:	102b883a 	mov	r21,r2
10007048:	00c0310e 	bge	zero,r3,10007110 <_dtoa_r+0xb68>
1000704c:	8009883a 	mov	r4,r16
10007050:	100b883a 	mov	r5,r2
10007054:	180d883a 	mov	r6,r3
10007058:	0009cd80 	call	10009cd8 <__pow5mult>
1000705c:	d9000317 	ldw	r4,12(sp)
10007060:	102b883a 	mov	r21,r2
10007064:	b9011f0e 	bge	r23,r4,100074e4 <_dtoa_r+0xf3c>
10007068:	0027883a 	mov	r19,zero
1000706c:	a8800417 	ldw	r2,16(r21)
10007070:	10800104 	addi	r2,r2,4
10007074:	1085883a 	add	r2,r2,r2
10007078:	1085883a 	add	r2,r2,r2
1000707c:	a885883a 	add	r2,r21,r2
10007080:	11000017 	ldw	r4,0(r2)
10007084:	00098f40 	call	100098f4 <__hi0bits>
10007088:	00c00804 	movi	r3,32
1000708c:	1885c83a 	sub	r2,r3,r2
10007090:	00002506 	br	10007128 <_dtoa_r+0xb80>
10007094:	01800044 	movi	r6,1
10007098:	d9800c15 	stw	r6,48(sp)
1000709c:	003dec06 	br	10006850 <__alt_data_end+0xf8006850>
100070a0:	d8c00817 	ldw	r3,32(sp)
100070a4:	d9000517 	ldw	r4,20(sp)
100070a8:	d8000a15 	stw	zero,40(sp)
100070ac:	1907c83a 	sub	r3,r3,r4
100070b0:	010dc83a 	sub	r6,zero,r4
100070b4:	d8c00815 	stw	r3,32(sp)
100070b8:	d9800915 	stw	r6,36(sp)
100070bc:	003ded06 	br	10006874 <__alt_data_end+0xf8006874>
100070c0:	05adc83a 	sub	r22,zero,r22
100070c4:	dd800815 	stw	r22,32(sp)
100070c8:	002d883a 	mov	r22,zero
100070cc:	003de406 	br	10006860 <__alt_data_end+0xf8006860>
100070d0:	d9000517 	ldw	r4,20(sp)
100070d4:	0003f180 	call	10003f18 <__floatsidf>
100070d8:	1009883a 	mov	r4,r2
100070dc:	180b883a 	mov	r5,r3
100070e0:	b00d883a 	mov	r6,r22
100070e4:	a80f883a 	mov	r7,r21
100070e8:	000de400 	call	1000de40 <__eqdf2>
100070ec:	103dc726 	beq	r2,zero,1000680c <__alt_data_end+0xf800680c>
100070f0:	d8800517 	ldw	r2,20(sp)
100070f4:	10bfffc4 	addi	r2,r2,-1
100070f8:	d8800515 	stw	r2,20(sp)
100070fc:	003dc306 	br	1000680c <__alt_data_end+0xf800680c>
10007100:	dd400917 	ldw	r21,36(sp)
10007104:	dd000817 	ldw	r20,32(sp)
10007108:	0023883a 	mov	r17,zero
1000710c:	003fa906 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007110:	d9800317 	ldw	r6,12(sp)
10007114:	b981670e 	bge	r23,r6,100076b4 <_dtoa_r+0x110c>
10007118:	0027883a 	mov	r19,zero
1000711c:	d8c00a17 	ldw	r3,40(sp)
10007120:	183fd21e 	bne	r3,zero,1000706c <__alt_data_end+0xf800706c>
10007124:	00800044 	movi	r2,1
10007128:	1585883a 	add	r2,r2,r22
1000712c:	108007cc 	andi	r2,r2,31
10007130:	10005f26 	beq	r2,zero,100072b0 <_dtoa_r+0xd08>
10007134:	00c00804 	movi	r3,32
10007138:	1887c83a 	sub	r3,r3,r2
1000713c:	01000104 	movi	r4,4
10007140:	20c2dd0e 	bge	r4,r3,10007cb8 <_dtoa_r+0x1710>
10007144:	d9000817 	ldw	r4,32(sp)
10007148:	00c00704 	movi	r3,28
1000714c:	1885c83a 	sub	r2,r3,r2
10007150:	2089883a 	add	r4,r4,r2
10007154:	d9000815 	stw	r4,32(sp)
10007158:	a0a9883a 	add	r20,r20,r2
1000715c:	b0ad883a 	add	r22,r22,r2
10007160:	d8800817 	ldw	r2,32(sp)
10007164:	0080050e 	bge	zero,r2,1000717c <_dtoa_r+0xbd4>
10007168:	e00b883a 	mov	r5,fp
1000716c:	8009883a 	mov	r4,r16
10007170:	100d883a 	mov	r6,r2
10007174:	0009e180 	call	10009e18 <__lshift>
10007178:	1039883a 	mov	fp,r2
1000717c:	0580050e 	bge	zero,r22,10007194 <_dtoa_r+0xbec>
10007180:	a80b883a 	mov	r5,r21
10007184:	8009883a 	mov	r4,r16
10007188:	b00d883a 	mov	r6,r22
1000718c:	0009e180 	call	10009e18 <__lshift>
10007190:	102b883a 	mov	r21,r2
10007194:	d8c00c17 	ldw	r3,48(sp)
10007198:	1801161e 	bne	r3,zero,100075f4 <_dtoa_r+0x104c>
1000719c:	d8c00617 	ldw	r3,24(sp)
100071a0:	00c12d0e 	bge	zero,r3,10007658 <_dtoa_r+0x10b0>
100071a4:	d8c00b17 	ldw	r3,44(sp)
100071a8:	1800571e 	bne	r3,zero,10007308 <_dtoa_r+0xd60>
100071ac:	dc800717 	ldw	r18,28(sp)
100071b0:	dcc00617 	ldw	r19,24(sp)
100071b4:	9029883a 	mov	r20,r18
100071b8:	00000206 	br	100071c4 <_dtoa_r+0xc1c>
100071bc:	00096b40 	call	100096b4 <__multadd>
100071c0:	1039883a 	mov	fp,r2
100071c4:	e009883a 	mov	r4,fp
100071c8:	a80b883a 	mov	r5,r21
100071cc:	00063800 	call	10006380 <quorem>
100071d0:	10800c04 	addi	r2,r2,48
100071d4:	90800005 	stb	r2,0(r18)
100071d8:	94800044 	addi	r18,r18,1
100071dc:	9507c83a 	sub	r3,r18,r20
100071e0:	8009883a 	mov	r4,r16
100071e4:	e00b883a 	mov	r5,fp
100071e8:	01800284 	movi	r6,10
100071ec:	000f883a 	mov	r7,zero
100071f0:	1cfff216 	blt	r3,r19,100071bc <__alt_data_end+0xf80071bc>
100071f4:	1011883a 	mov	r8,r2
100071f8:	d8800617 	ldw	r2,24(sp)
100071fc:	00822e0e 	bge	zero,r2,10007ab8 <_dtoa_r+0x1510>
10007200:	d9000717 	ldw	r4,28(sp)
10007204:	0025883a 	mov	r18,zero
10007208:	20af883a 	add	r23,r4,r2
1000720c:	e00b883a 	mov	r5,fp
10007210:	01800044 	movi	r6,1
10007214:	8009883a 	mov	r4,r16
10007218:	da001715 	stw	r8,92(sp)
1000721c:	0009e180 	call	10009e18 <__lshift>
10007220:	1009883a 	mov	r4,r2
10007224:	a80b883a 	mov	r5,r21
10007228:	1039883a 	mov	fp,r2
1000722c:	0009f600 	call	10009f60 <__mcmp>
10007230:	da001717 	ldw	r8,92(sp)
10007234:	00816e0e 	bge	zero,r2,100077f0 <_dtoa_r+0x1248>
10007238:	b93fffc3 	ldbu	r4,-1(r23)
1000723c:	b8bfffc4 	addi	r2,r23,-1
10007240:	1007883a 	mov	r3,r2
10007244:	01800e44 	movi	r6,57
10007248:	d9c00717 	ldw	r7,28(sp)
1000724c:	00000506 	br	10007264 <_dtoa_r+0xcbc>
10007250:	18ffffc4 	addi	r3,r3,-1
10007254:	38811926 	beq	r7,r2,100076bc <_dtoa_r+0x1114>
10007258:	19000003 	ldbu	r4,0(r3)
1000725c:	102f883a 	mov	r23,r2
10007260:	10bfffc4 	addi	r2,r2,-1
10007264:	21403fcc 	andi	r5,r4,255
10007268:	2940201c 	xori	r5,r5,128
1000726c:	297fe004 	addi	r5,r5,-128
10007270:	29bff726 	beq	r5,r6,10007250 <__alt_data_end+0xf8007250>
10007274:	21000044 	addi	r4,r4,1
10007278:	11000005 	stb	r4,0(r2)
1000727c:	8009883a 	mov	r4,r16
10007280:	a80b883a 	mov	r5,r21
10007284:	000968c0 	call	1000968c <_Bfree>
10007288:	883e7526 	beq	r17,zero,10006c60 <__alt_data_end+0xf8006c60>
1000728c:	90000426 	beq	r18,zero,100072a0 <_dtoa_r+0xcf8>
10007290:	94400326 	beq	r18,r17,100072a0 <_dtoa_r+0xcf8>
10007294:	8009883a 	mov	r4,r16
10007298:	900b883a 	mov	r5,r18
1000729c:	000968c0 	call	1000968c <_Bfree>
100072a0:	8009883a 	mov	r4,r16
100072a4:	880b883a 	mov	r5,r17
100072a8:	000968c0 	call	1000968c <_Bfree>
100072ac:	003e6c06 	br	10006c60 <__alt_data_end+0xf8006c60>
100072b0:	00800704 	movi	r2,28
100072b4:	d9800817 	ldw	r6,32(sp)
100072b8:	a0a9883a 	add	r20,r20,r2
100072bc:	b0ad883a 	add	r22,r22,r2
100072c0:	308d883a 	add	r6,r6,r2
100072c4:	d9800815 	stw	r6,32(sp)
100072c8:	003fa506 	br	10007160 <__alt_data_end+0xf8007160>
100072cc:	013efb84 	movi	r4,-1042
100072d0:	246bc83a 	sub	r21,r4,r17
100072d4:	9548983a 	sll	r4,r18,r21
100072d8:	003d1806 	br	1000673c <__alt_data_end+0xf800673c>
100072dc:	d8000c15 	stw	zero,48(sp)
100072e0:	003d5b06 	br	10006850 <__alt_data_end+0xf8006850>
100072e4:	880b883a 	mov	r5,r17
100072e8:	8009883a 	mov	r4,r16
100072ec:	01800284 	movi	r6,10
100072f0:	000f883a 	mov	r7,zero
100072f4:	00096b40 	call	100096b4 <__multadd>
100072f8:	1023883a 	mov	r17,r2
100072fc:	d8800d17 	ldw	r2,52(sp)
10007300:	0082550e 	bge	zero,r2,10007c58 <_dtoa_r+0x16b0>
10007304:	d8800615 	stw	r2,24(sp)
10007308:	0500050e 	bge	zero,r20,10007320 <_dtoa_r+0xd78>
1000730c:	880b883a 	mov	r5,r17
10007310:	8009883a 	mov	r4,r16
10007314:	a00d883a 	mov	r6,r20
10007318:	0009e180 	call	10009e18 <__lshift>
1000731c:	1023883a 	mov	r17,r2
10007320:	98016a1e 	bne	r19,zero,100078cc <_dtoa_r+0x1324>
10007324:	8829883a 	mov	r20,r17
10007328:	d9000617 	ldw	r4,24(sp)
1000732c:	dcc00717 	ldw	r19,28(sp)
10007330:	9480004c 	andi	r18,r18,1
10007334:	20bfffc4 	addi	r2,r4,-1
10007338:	9885883a 	add	r2,r19,r2
1000733c:	d8800415 	stw	r2,16(sp)
10007340:	dc800615 	stw	r18,24(sp)
10007344:	e009883a 	mov	r4,fp
10007348:	a80b883a 	mov	r5,r21
1000734c:	00063800 	call	10006380 <quorem>
10007350:	e009883a 	mov	r4,fp
10007354:	880b883a 	mov	r5,r17
10007358:	102f883a 	mov	r23,r2
1000735c:	0009f600 	call	10009f60 <__mcmp>
10007360:	8009883a 	mov	r4,r16
10007364:	a80b883a 	mov	r5,r21
10007368:	a00d883a 	mov	r6,r20
1000736c:	102d883a 	mov	r22,r2
10007370:	0009fc00 	call	10009fc0 <__mdiff>
10007374:	1007883a 	mov	r3,r2
10007378:	10800317 	ldw	r2,12(r2)
1000737c:	bc800c04 	addi	r18,r23,48
10007380:	1000971e 	bne	r2,zero,100075e0 <_dtoa_r+0x1038>
10007384:	180b883a 	mov	r5,r3
10007388:	e009883a 	mov	r4,fp
1000738c:	d8c01515 	stw	r3,84(sp)
10007390:	0009f600 	call	10009f60 <__mcmp>
10007394:	d8c01517 	ldw	r3,84(sp)
10007398:	8009883a 	mov	r4,r16
1000739c:	d8801515 	stw	r2,84(sp)
100073a0:	180b883a 	mov	r5,r3
100073a4:	000968c0 	call	1000968c <_Bfree>
100073a8:	d8801517 	ldw	r2,84(sp)
100073ac:	1000041e 	bne	r2,zero,100073c0 <_dtoa_r+0xe18>
100073b0:	d9800317 	ldw	r6,12(sp)
100073b4:	3000021e 	bne	r6,zero,100073c0 <_dtoa_r+0xe18>
100073b8:	d8c00617 	ldw	r3,24(sp)
100073bc:	18007626 	beq	r3,zero,10007598 <_dtoa_r+0xff0>
100073c0:	b0005b16 	blt	r22,zero,10007530 <_dtoa_r+0xf88>
100073c4:	b000041e 	bne	r22,zero,100073d8 <_dtoa_r+0xe30>
100073c8:	d9000317 	ldw	r4,12(sp)
100073cc:	2000021e 	bne	r4,zero,100073d8 <_dtoa_r+0xe30>
100073d0:	d8c00617 	ldw	r3,24(sp)
100073d4:	18005626 	beq	r3,zero,10007530 <_dtoa_r+0xf88>
100073d8:	00814d16 	blt	zero,r2,10007910 <_dtoa_r+0x1368>
100073dc:	d8c00417 	ldw	r3,16(sp)
100073e0:	9d800044 	addi	r22,r19,1
100073e4:	9c800005 	stb	r18,0(r19)
100073e8:	b02f883a 	mov	r23,r22
100073ec:	98c14c26 	beq	r19,r3,10007920 <_dtoa_r+0x1378>
100073f0:	e00b883a 	mov	r5,fp
100073f4:	8009883a 	mov	r4,r16
100073f8:	01800284 	movi	r6,10
100073fc:	000f883a 	mov	r7,zero
10007400:	00096b40 	call	100096b4 <__multadd>
10007404:	1039883a 	mov	fp,r2
10007408:	8d006d26 	beq	r17,r20,100075c0 <_dtoa_r+0x1018>
1000740c:	880b883a 	mov	r5,r17
10007410:	01800284 	movi	r6,10
10007414:	000f883a 	mov	r7,zero
10007418:	8009883a 	mov	r4,r16
1000741c:	00096b40 	call	100096b4 <__multadd>
10007420:	a00b883a 	mov	r5,r20
10007424:	8009883a 	mov	r4,r16
10007428:	01800284 	movi	r6,10
1000742c:	000f883a 	mov	r7,zero
10007430:	1023883a 	mov	r17,r2
10007434:	00096b40 	call	100096b4 <__multadd>
10007438:	1029883a 	mov	r20,r2
1000743c:	b027883a 	mov	r19,r22
10007440:	003fc006 	br	10007344 <__alt_data_end+0xf8007344>
10007444:	a005883a 	mov	r2,r20
10007448:	003ede06 	br	10006fc4 <__alt_data_end+0xf8006fc4>
1000744c:	01000044 	movi	r4,1
10007450:	d9000b15 	stw	r4,44(sp)
10007454:	d9802217 	ldw	r6,136(sp)
10007458:	0180dc0e 	bge	zero,r6,100077cc <_dtoa_r+0x1224>
1000745c:	3023883a 	mov	r17,r6
10007460:	d9800d15 	stw	r6,52(sp)
10007464:	d9800615 	stw	r6,24(sp)
10007468:	003d1e06 	br	100068e4 <__alt_data_end+0xf80068e4>
1000746c:	d8800617 	ldw	r2,24(sp)
10007470:	00be3716 	blt	zero,r2,10006d50 <__alt_data_end+0xf8006d50>
10007474:	1000be1e 	bne	r2,zero,10007770 <_dtoa_r+0x11c8>
10007478:	8809883a 	mov	r4,r17
1000747c:	a00b883a 	mov	r5,r20
10007480:	000d883a 	mov	r6,zero
10007484:	01d00534 	movhi	r7,16404
10007488:	000e0840 	call	1000e084 <__muldf3>
1000748c:	1009883a 	mov	r4,r2
10007490:	180b883a 	mov	r5,r3
10007494:	900d883a 	mov	r6,r18
10007498:	980f883a 	mov	r7,r19
1000749c:	000dec40 	call	1000dec4 <__gedf2>
100074a0:	002b883a 	mov	r21,zero
100074a4:	0023883a 	mov	r17,zero
100074a8:	10007a16 	blt	r2,zero,10007694 <_dtoa_r+0x10ec>
100074ac:	d9002217 	ldw	r4,136(sp)
100074b0:	ddc00717 	ldw	r23,28(sp)
100074b4:	0108303a 	nor	r4,zero,r4
100074b8:	d9000515 	stw	r4,20(sp)
100074bc:	8009883a 	mov	r4,r16
100074c0:	a80b883a 	mov	r5,r21
100074c4:	000968c0 	call	1000968c <_Bfree>
100074c8:	883f751e 	bne	r17,zero,100072a0 <__alt_data_end+0xf80072a0>
100074cc:	003de406 	br	10006c60 <__alt_data_end+0xf8006c60>
100074d0:	e00b883a 	mov	r5,fp
100074d4:	8009883a 	mov	r4,r16
100074d8:	0009cd80 	call	10009cd8 <__pow5mult>
100074dc:	1039883a 	mov	fp,r2
100074e0:	003ed306 	br	10007030 <__alt_data_end+0xf8007030>
100074e4:	903ee01e 	bne	r18,zero,10007068 <__alt_data_end+0xf8007068>
100074e8:	00800434 	movhi	r2,16
100074ec:	10bfffc4 	addi	r2,r2,-1
100074f0:	9884703a 	and	r2,r19,r2
100074f4:	103f081e 	bne	r2,zero,10007118 <__alt_data_end+0xf8007118>
100074f8:	9cdffc2c 	andhi	r19,r19,32752
100074fc:	983f0626 	beq	r19,zero,10007118 <__alt_data_end+0xf8007118>
10007500:	d8800817 	ldw	r2,32(sp)
10007504:	b5800044 	addi	r22,r22,1
10007508:	04c00044 	movi	r19,1
1000750c:	10800044 	addi	r2,r2,1
10007510:	d8800815 	stw	r2,32(sp)
10007514:	003f0106 	br	1000711c <__alt_data_end+0xf800711c>
10007518:	d9800f17 	ldw	r6,60(sp)
1000751c:	30016826 	beq	r6,zero,10007ac0 <_dtoa_r+0x1518>
10007520:	10810cc4 	addi	r2,r2,1075
10007524:	dd400917 	ldw	r21,36(sp)
10007528:	dd000817 	ldw	r20,32(sp)
1000752c:	003e9906 	br	10006f94 <__alt_data_end+0xf8006f94>
10007530:	9011883a 	mov	r8,r18
10007534:	4007883a 	mov	r3,r8
10007538:	e02d883a 	mov	r22,fp
1000753c:	0080100e 	bge	zero,r2,10007580 <_dtoa_r+0xfd8>
10007540:	01800044 	movi	r6,1
10007544:	8009883a 	mov	r4,r16
10007548:	e00b883a 	mov	r5,fp
1000754c:	da001515 	stw	r8,84(sp)
10007550:	da001715 	stw	r8,92(sp)
10007554:	0009e180 	call	10009e18 <__lshift>
10007558:	1009883a 	mov	r4,r2
1000755c:	a80b883a 	mov	r5,r21
10007560:	102d883a 	mov	r22,r2
10007564:	0009f600 	call	10009f60 <__mcmp>
10007568:	d8c01517 	ldw	r3,84(sp)
1000756c:	da001717 	ldw	r8,92(sp)
10007570:	0081a50e 	bge	zero,r2,10007c08 <_dtoa_r+0x1660>
10007574:	00800e44 	movi	r2,57
10007578:	40817b26 	beq	r8,r2,10007b68 <_dtoa_r+0x15c0>
1000757c:	40c00044 	addi	r3,r8,1
10007580:	8825883a 	mov	r18,r17
10007584:	9dc00044 	addi	r23,r19,1
10007588:	98c00005 	stb	r3,0(r19)
1000758c:	a023883a 	mov	r17,r20
10007590:	b039883a 	mov	fp,r22
10007594:	003f3906 	br	1000727c <__alt_data_end+0xf800727c>
10007598:	00800e44 	movi	r2,57
1000759c:	9011883a 	mov	r8,r18
100075a0:	90817226 	beq	r18,r2,10007b6c <_dtoa_r+0x15c4>
100075a4:	0580010e 	bge	zero,r22,100075ac <_dtoa_r+0x1004>
100075a8:	ba000c44 	addi	r8,r23,49
100075ac:	8825883a 	mov	r18,r17
100075b0:	9dc00044 	addi	r23,r19,1
100075b4:	9a000005 	stb	r8,0(r19)
100075b8:	a023883a 	mov	r17,r20
100075bc:	003f2f06 	br	1000727c <__alt_data_end+0xf800727c>
100075c0:	880b883a 	mov	r5,r17
100075c4:	8009883a 	mov	r4,r16
100075c8:	01800284 	movi	r6,10
100075cc:	000f883a 	mov	r7,zero
100075d0:	00096b40 	call	100096b4 <__multadd>
100075d4:	1023883a 	mov	r17,r2
100075d8:	1029883a 	mov	r20,r2
100075dc:	003f9706 	br	1000743c <__alt_data_end+0xf800743c>
100075e0:	8009883a 	mov	r4,r16
100075e4:	180b883a 	mov	r5,r3
100075e8:	000968c0 	call	1000968c <_Bfree>
100075ec:	00800044 	movi	r2,1
100075f0:	003f7306 	br	100073c0 <__alt_data_end+0xf80073c0>
100075f4:	e009883a 	mov	r4,fp
100075f8:	a80b883a 	mov	r5,r21
100075fc:	0009f600 	call	10009f60 <__mcmp>
10007600:	103ee60e 	bge	r2,zero,1000719c <__alt_data_end+0xf800719c>
10007604:	8009883a 	mov	r4,r16
10007608:	e00b883a 	mov	r5,fp
1000760c:	01800284 	movi	r6,10
10007610:	000f883a 	mov	r7,zero
10007614:	00096b40 	call	100096b4 <__multadd>
10007618:	d9000517 	ldw	r4,20(sp)
1000761c:	d9800b17 	ldw	r6,44(sp)
10007620:	1039883a 	mov	fp,r2
10007624:	213fffc4 	addi	r4,r4,-1
10007628:	d9000515 	stw	r4,20(sp)
1000762c:	303f2d1e 	bne	r6,zero,100072e4 <__alt_data_end+0xf80072e4>
10007630:	d9000d17 	ldw	r4,52(sp)
10007634:	0101780e 	bge	zero,r4,10007c18 <_dtoa_r+0x1670>
10007638:	d9000615 	stw	r4,24(sp)
1000763c:	003edb06 	br	100071ac <__alt_data_end+0xf80071ac>
10007640:	00800084 	movi	r2,2
10007644:	30818e1e 	bne	r6,r2,10007c80 <_dtoa_r+0x16d8>
10007648:	d8000b15 	stw	zero,44(sp)
1000764c:	003f8106 	br	10007454 <__alt_data_end+0xf8007454>
10007650:	d8800717 	ldw	r2,28(sp)
10007654:	003c0306 	br	10006664 <__alt_data_end+0xf8006664>
10007658:	d9000317 	ldw	r4,12(sp)
1000765c:	00800084 	movi	r2,2
10007660:	113ed00e 	bge	r2,r4,100071a4 <__alt_data_end+0xf80071a4>
10007664:	d8c00617 	ldw	r3,24(sp)
10007668:	183f901e 	bne	r3,zero,100074ac <__alt_data_end+0xf80074ac>
1000766c:	a80b883a 	mov	r5,r21
10007670:	8009883a 	mov	r4,r16
10007674:	01800144 	movi	r6,5
10007678:	000f883a 	mov	r7,zero
1000767c:	00096b40 	call	100096b4 <__multadd>
10007680:	e009883a 	mov	r4,fp
10007684:	100b883a 	mov	r5,r2
10007688:	102b883a 	mov	r21,r2
1000768c:	0009f600 	call	10009f60 <__mcmp>
10007690:	00bf860e 	bge	zero,r2,100074ac <__alt_data_end+0xf80074ac>
10007694:	d9800717 	ldw	r6,28(sp)
10007698:	00800c44 	movi	r2,49
1000769c:	30800005 	stb	r2,0(r6)
100076a0:	d8800517 	ldw	r2,20(sp)
100076a4:	35c00044 	addi	r23,r6,1
100076a8:	10800044 	addi	r2,r2,1
100076ac:	d8800515 	stw	r2,20(sp)
100076b0:	003f8206 	br	100074bc <__alt_data_end+0xf80074bc>
100076b4:	903e981e 	bne	r18,zero,10007118 <__alt_data_end+0xf8007118>
100076b8:	003f8b06 	br	100074e8 <__alt_data_end+0xf80074e8>
100076bc:	d9800517 	ldw	r6,20(sp)
100076c0:	d8c00717 	ldw	r3,28(sp)
100076c4:	00800c44 	movi	r2,49
100076c8:	31800044 	addi	r6,r6,1
100076cc:	d9800515 	stw	r6,20(sp)
100076d0:	18800005 	stb	r2,0(r3)
100076d4:	003ee906 	br	1000727c <__alt_data_end+0xf800727c>
100076d8:	dc000317 	ldw	r16,12(sp)
100076dc:	003d6006 	br	10006c60 <__alt_data_end+0xf8006c60>
100076e0:	8809883a 	mov	r4,r17
100076e4:	0003f180 	call	10003f18 <__floatsidf>
100076e8:	a009883a 	mov	r4,r20
100076ec:	a80b883a 	mov	r5,r21
100076f0:	100d883a 	mov	r6,r2
100076f4:	180f883a 	mov	r7,r3
100076f8:	000e0840 	call	1000e084 <__muldf3>
100076fc:	1009883a 	mov	r4,r2
10007700:	180b883a 	mov	r5,r3
10007704:	000d883a 	mov	r6,zero
10007708:	01d00734 	movhi	r7,16412
1000770c:	0002d240 	call	10002d24 <__adddf3>
10007710:	1023883a 	mov	r17,r2
10007714:	00bf3034 	movhi	r2,64704
10007718:	1885883a 	add	r2,r3,r2
1000771c:	d8800e15 	stw	r2,56(sp)
10007720:	a009883a 	mov	r4,r20
10007724:	a80b883a 	mov	r5,r21
10007728:	000d883a 	mov	r6,zero
1000772c:	01d00534 	movhi	r7,16404
10007730:	00035c00 	call	100035c0 <__subdf3>
10007734:	d9c00e17 	ldw	r7,56(sp)
10007738:	1009883a 	mov	r4,r2
1000773c:	180b883a 	mov	r5,r3
10007740:	880d883a 	mov	r6,r17
10007744:	102b883a 	mov	r21,r2
10007748:	1829883a 	mov	r20,r3
1000774c:	000dec40 	call	1000dec4 <__gedf2>
10007750:	00807716 	blt	zero,r2,10007930 <_dtoa_r+0x1388>
10007754:	d8800e17 	ldw	r2,56(sp)
10007758:	a809883a 	mov	r4,r21
1000775c:	a00b883a 	mov	r5,r20
10007760:	11e0003c 	xorhi	r7,r2,32768
10007764:	880d883a 	mov	r6,r17
10007768:	000dfa40 	call	1000dfa4 <__ledf2>
1000776c:	103d6b0e 	bge	r2,zero,10006d1c <__alt_data_end+0xf8006d1c>
10007770:	002b883a 	mov	r21,zero
10007774:	0023883a 	mov	r17,zero
10007778:	003f4c06 	br	100074ac <__alt_data_end+0xf80074ac>
1000777c:	d9800917 	ldw	r6,36(sp)
10007780:	e00b883a 	mov	r5,fp
10007784:	8009883a 	mov	r4,r16
10007788:	0009cd80 	call	10009cd8 <__pow5mult>
1000778c:	1039883a 	mov	fp,r2
10007790:	003e2706 	br	10007030 <__alt_data_end+0xf8007030>
10007794:	d8000b15 	stw	zero,44(sp)
10007798:	003c4906 	br	100068c0 <__alt_data_end+0xf80068c0>
1000779c:	d9000917 	ldw	r4,36(sp)
100077a0:	d9800a17 	ldw	r6,40(sp)
100077a4:	dd400915 	stw	r21,36(sp)
100077a8:	a905c83a 	sub	r2,r21,r4
100077ac:	308d883a 	add	r6,r6,r2
100077b0:	d9800a15 	stw	r6,40(sp)
100077b4:	002b883a 	mov	r21,zero
100077b8:	003df206 	br	10006f84 <__alt_data_end+0xf8006f84>
100077bc:	dc800e15 	stw	r18,56(sp)
100077c0:	982b883a 	mov	r21,r19
100077c4:	04400084 	movi	r17,2
100077c8:	003c7406 	br	1000699c <__alt_data_end+0xf800699c>
100077cc:	04400044 	movi	r17,1
100077d0:	dc400d15 	stw	r17,52(sp)
100077d4:	dc400615 	stw	r17,24(sp)
100077d8:	dc402215 	stw	r17,136(sp)
100077dc:	80001115 	stw	zero,68(r16)
100077e0:	000b883a 	mov	r5,zero
100077e4:	003c4a06 	br	10006910 <__alt_data_end+0xf8006910>
100077e8:	3023883a 	mov	r17,r6
100077ec:	003ffb06 	br	100077dc <__alt_data_end+0xf80077dc>
100077f0:	1000021e 	bne	r2,zero,100077fc <_dtoa_r+0x1254>
100077f4:	4200004c 	andi	r8,r8,1
100077f8:	403e8f1e 	bne	r8,zero,10007238 <__alt_data_end+0xf8007238>
100077fc:	01000c04 	movi	r4,48
10007800:	00000106 	br	10007808 <_dtoa_r+0x1260>
10007804:	102f883a 	mov	r23,r2
10007808:	b8bfffc4 	addi	r2,r23,-1
1000780c:	10c00007 	ldb	r3,0(r2)
10007810:	193ffc26 	beq	r3,r4,10007804 <__alt_data_end+0xf8007804>
10007814:	003e9906 	br	1000727c <__alt_data_end+0xf800727c>
10007818:	d9000517 	ldw	r4,20(sp)
1000781c:	012fc83a 	sub	r23,zero,r4
10007820:	b800ad26 	beq	r23,zero,10007ad8 <_dtoa_r+0x1530>
10007824:	b88003cc 	andi	r2,r23,15
10007828:	100490fa 	slli	r2,r2,3
1000782c:	00c40074 	movhi	r3,4097
10007830:	18c4b904 	addi	r3,r3,4836
10007834:	1885883a 	add	r2,r3,r2
10007838:	11800017 	ldw	r6,0(r2)
1000783c:	11c00117 	ldw	r7,4(r2)
10007840:	b82fd13a 	srai	r23,r23,4
10007844:	9009883a 	mov	r4,r18
10007848:	980b883a 	mov	r5,r19
1000784c:	000e0840 	call	1000e084 <__muldf3>
10007850:	1029883a 	mov	r20,r2
10007854:	182b883a 	mov	r21,r3
10007858:	b800f426 	beq	r23,zero,10007c2c <_dtoa_r+0x1684>
1000785c:	02040074 	movhi	r8,4097
10007860:	4204af04 	addi	r8,r8,4796
10007864:	8029883a 	mov	r20,r16
10007868:	04400084 	movi	r17,2
1000786c:	4021883a 	mov	r16,r8
10007870:	b980004c 	andi	r6,r23,1
10007874:	1009883a 	mov	r4,r2
10007878:	b82fd07a 	srai	r23,r23,1
1000787c:	180b883a 	mov	r5,r3
10007880:	30000426 	beq	r6,zero,10007894 <_dtoa_r+0x12ec>
10007884:	81800017 	ldw	r6,0(r16)
10007888:	81c00117 	ldw	r7,4(r16)
1000788c:	8c400044 	addi	r17,r17,1
10007890:	000e0840 	call	1000e084 <__muldf3>
10007894:	84000204 	addi	r16,r16,8
10007898:	b83ff51e 	bne	r23,zero,10007870 <__alt_data_end+0xf8007870>
1000789c:	a021883a 	mov	r16,r20
100078a0:	182b883a 	mov	r21,r3
100078a4:	1029883a 	mov	r20,r2
100078a8:	003c5506 	br	10006a00 <__alt_data_end+0xf8006a00>
100078ac:	d9800517 	ldw	r6,20(sp)
100078b0:	d9000717 	ldw	r4,28(sp)
100078b4:	00c00c04 	movi	r3,48
100078b8:	31800044 	addi	r6,r6,1
100078bc:	d9800515 	stw	r6,20(sp)
100078c0:	20c00005 	stb	r3,0(r4)
100078c4:	02000c44 	movi	r8,49
100078c8:	003da206 	br	10006f54 <__alt_data_end+0xf8006f54>
100078cc:	89400117 	ldw	r5,4(r17)
100078d0:	8009883a 	mov	r4,r16
100078d4:	00095e40 	call	100095e4 <_Balloc>
100078d8:	89800417 	ldw	r6,16(r17)
100078dc:	11000304 	addi	r4,r2,12
100078e0:	89400304 	addi	r5,r17,12
100078e4:	31800084 	addi	r6,r6,2
100078e8:	318d883a 	add	r6,r6,r6
100078ec:	318d883a 	add	r6,r6,r6
100078f0:	1027883a 	mov	r19,r2
100078f4:	00093880 	call	10009388 <memcpy>
100078f8:	8009883a 	mov	r4,r16
100078fc:	980b883a 	mov	r5,r19
10007900:	01800044 	movi	r6,1
10007904:	0009e180 	call	10009e18 <__lshift>
10007908:	1029883a 	mov	r20,r2
1000790c:	003e8606 	br	10007328 <__alt_data_end+0xf8007328>
10007910:	00800e44 	movi	r2,57
10007914:	90809526 	beq	r18,r2,10007b6c <_dtoa_r+0x15c4>
10007918:	92000044 	addi	r8,r18,1
1000791c:	003f2306 	br	100075ac <__alt_data_end+0xf80075ac>
10007920:	9011883a 	mov	r8,r18
10007924:	8825883a 	mov	r18,r17
10007928:	a023883a 	mov	r17,r20
1000792c:	003e3706 	br	1000720c <__alt_data_end+0xf800720c>
10007930:	002b883a 	mov	r21,zero
10007934:	0023883a 	mov	r17,zero
10007938:	003f5606 	br	10007694 <__alt_data_end+0xf8007694>
1000793c:	51bfffc4 	addi	r6,r10,-1
10007940:	300490fa 	slli	r2,r6,3
10007944:	00c40074 	movhi	r3,4097
10007948:	18c4b904 	addi	r3,r3,4836
1000794c:	1885883a 	add	r2,r3,r2
10007950:	d9c00e17 	ldw	r7,56(sp)
10007954:	11000017 	ldw	r4,0(r2)
10007958:	11400117 	ldw	r5,4(r2)
1000795c:	d8800717 	ldw	r2,28(sp)
10007960:	d9801015 	stw	r6,64(sp)
10007964:	880d883a 	mov	r6,r17
10007968:	da801615 	stw	r10,88(sp)
1000796c:	15c00044 	addi	r23,r2,1
10007970:	000e0840 	call	1000e084 <__muldf3>
10007974:	a80b883a 	mov	r5,r21
10007978:	a009883a 	mov	r4,r20
1000797c:	d8c01115 	stw	r3,68(sp)
10007980:	d8800e15 	stw	r2,56(sp)
10007984:	0003e900 	call	10003e90 <__fixdfsi>
10007988:	1009883a 	mov	r4,r2
1000798c:	1023883a 	mov	r17,r2
10007990:	0003f180 	call	10003f18 <__floatsidf>
10007994:	a009883a 	mov	r4,r20
10007998:	a80b883a 	mov	r5,r21
1000799c:	100d883a 	mov	r6,r2
100079a0:	180f883a 	mov	r7,r3
100079a4:	00035c00 	call	100035c0 <__subdf3>
100079a8:	1813883a 	mov	r9,r3
100079ac:	d8c00717 	ldw	r3,28(sp)
100079b0:	8c400c04 	addi	r17,r17,48
100079b4:	1011883a 	mov	r8,r2
100079b8:	1c400005 	stb	r17,0(r3)
100079bc:	da801617 	ldw	r10,88(sp)
100079c0:	00800044 	movi	r2,1
100079c4:	50802326 	beq	r10,r2,10007a54 <_dtoa_r+0x14ac>
100079c8:	d8800717 	ldw	r2,28(sp)
100079cc:	b82b883a 	mov	r21,r23
100079d0:	dc001315 	stw	r16,76(sp)
100079d4:	12a9883a 	add	r20,r2,r10
100079d8:	4807883a 	mov	r3,r9
100079dc:	4005883a 	mov	r2,r8
100079e0:	dc801415 	stw	r18,80(sp)
100079e4:	000d883a 	mov	r6,zero
100079e8:	01d00934 	movhi	r7,16420
100079ec:	1009883a 	mov	r4,r2
100079f0:	180b883a 	mov	r5,r3
100079f4:	000e0840 	call	1000e084 <__muldf3>
100079f8:	180b883a 	mov	r5,r3
100079fc:	1009883a 	mov	r4,r2
10007a00:	1821883a 	mov	r16,r3
10007a04:	1025883a 	mov	r18,r2
10007a08:	0003e900 	call	10003e90 <__fixdfsi>
10007a0c:	1009883a 	mov	r4,r2
10007a10:	1023883a 	mov	r17,r2
10007a14:	0003f180 	call	10003f18 <__floatsidf>
10007a18:	9009883a 	mov	r4,r18
10007a1c:	800b883a 	mov	r5,r16
10007a20:	100d883a 	mov	r6,r2
10007a24:	180f883a 	mov	r7,r3
10007a28:	8c400c04 	addi	r17,r17,48
10007a2c:	00035c00 	call	100035c0 <__subdf3>
10007a30:	ad400044 	addi	r21,r21,1
10007a34:	ac7fffc5 	stb	r17,-1(r21)
10007a38:	ad3fea1e 	bne	r21,r20,100079e4 <__alt_data_end+0xf80079e4>
10007a3c:	1813883a 	mov	r9,r3
10007a40:	d8c01017 	ldw	r3,64(sp)
10007a44:	dc001317 	ldw	r16,76(sp)
10007a48:	dc801417 	ldw	r18,80(sp)
10007a4c:	1011883a 	mov	r8,r2
10007a50:	b8ef883a 	add	r23,r23,r3
10007a54:	d9000e17 	ldw	r4,56(sp)
10007a58:	d9401117 	ldw	r5,68(sp)
10007a5c:	000d883a 	mov	r6,zero
10007a60:	01cff834 	movhi	r7,16352
10007a64:	da001715 	stw	r8,92(sp)
10007a68:	da401515 	stw	r9,84(sp)
10007a6c:	0002d240 	call	10002d24 <__adddf3>
10007a70:	da001717 	ldw	r8,92(sp)
10007a74:	da401517 	ldw	r9,84(sp)
10007a78:	1009883a 	mov	r4,r2
10007a7c:	400d883a 	mov	r6,r8
10007a80:	480f883a 	mov	r7,r9
10007a84:	180b883a 	mov	r5,r3
10007a88:	000dfa40 	call	1000dfa4 <__ledf2>
10007a8c:	da001717 	ldw	r8,92(sp)
10007a90:	da401517 	ldw	r9,84(sp)
10007a94:	10003b0e 	bge	r2,zero,10007b84 <_dtoa_r+0x15dc>
10007a98:	d9001217 	ldw	r4,72(sp)
10007a9c:	bd7fffc3 	ldbu	r21,-1(r23)
10007aa0:	d9000515 	stw	r4,20(sp)
10007aa4:	003d1c06 	br	10006f18 <__alt_data_end+0xf8006f18>
10007aa8:	d8c00817 	ldw	r3,32(sp)
10007aac:	18a9c83a 	sub	r20,r3,r2
10007ab0:	0005883a 	mov	r2,zero
10007ab4:	003d3706 	br	10006f94 <__alt_data_end+0xf8006f94>
10007ab8:	00800044 	movi	r2,1
10007abc:	003dd006 	br	10007200 <__alt_data_end+0xf8007200>
10007ac0:	d8c00217 	ldw	r3,8(sp)
10007ac4:	00800d84 	movi	r2,54
10007ac8:	dd400917 	ldw	r21,36(sp)
10007acc:	10c5c83a 	sub	r2,r2,r3
10007ad0:	dd000817 	ldw	r20,32(sp)
10007ad4:	003d2f06 	br	10006f94 <__alt_data_end+0xf8006f94>
10007ad8:	9029883a 	mov	r20,r18
10007adc:	982b883a 	mov	r21,r19
10007ae0:	04400084 	movi	r17,2
10007ae4:	003bc606 	br	10006a00 <__alt_data_end+0xf8006a00>
10007ae8:	d8800617 	ldw	r2,24(sp)
10007aec:	103efc26 	beq	r2,zero,100076e0 <__alt_data_end+0xf80076e0>
10007af0:	d8c00d17 	ldw	r3,52(sp)
10007af4:	00fc890e 	bge	zero,r3,10006d1c <__alt_data_end+0xf8006d1c>
10007af8:	a80b883a 	mov	r5,r21
10007afc:	a009883a 	mov	r4,r20
10007b00:	000d883a 	mov	r6,zero
10007b04:	01d00934 	movhi	r7,16420
10007b08:	000e0840 	call	1000e084 <__muldf3>
10007b0c:	89000044 	addi	r4,r17,1
10007b10:	1029883a 	mov	r20,r2
10007b14:	182b883a 	mov	r21,r3
10007b18:	0003f180 	call	10003f18 <__floatsidf>
10007b1c:	a009883a 	mov	r4,r20
10007b20:	a80b883a 	mov	r5,r21
10007b24:	100d883a 	mov	r6,r2
10007b28:	180f883a 	mov	r7,r3
10007b2c:	000e0840 	call	1000e084 <__muldf3>
10007b30:	1009883a 	mov	r4,r2
10007b34:	180b883a 	mov	r5,r3
10007b38:	000d883a 	mov	r6,zero
10007b3c:	01d00734 	movhi	r7,16412
10007b40:	0002d240 	call	10002d24 <__adddf3>
10007b44:	d9000517 	ldw	r4,20(sp)
10007b48:	1023883a 	mov	r17,r2
10007b4c:	00bf3034 	movhi	r2,64704
10007b50:	213fffc4 	addi	r4,r4,-1
10007b54:	1885883a 	add	r2,r3,r2
10007b58:	d9001215 	stw	r4,72(sp)
10007b5c:	d8800e15 	stw	r2,56(sp)
10007b60:	da800d17 	ldw	r10,52(sp)
10007b64:	003bc306 	br	10006a74 <__alt_data_end+0xf8006a74>
10007b68:	b039883a 	mov	fp,r22
10007b6c:	01000e44 	movi	r4,57
10007b70:	8825883a 	mov	r18,r17
10007b74:	9dc00044 	addi	r23,r19,1
10007b78:	99000005 	stb	r4,0(r19)
10007b7c:	a023883a 	mov	r17,r20
10007b80:	003dae06 	br	1000723c <__alt_data_end+0xf800723c>
10007b84:	d9800e17 	ldw	r6,56(sp)
10007b88:	d9c01117 	ldw	r7,68(sp)
10007b8c:	0009883a 	mov	r4,zero
10007b90:	014ff834 	movhi	r5,16352
10007b94:	da001715 	stw	r8,92(sp)
10007b98:	da401515 	stw	r9,84(sp)
10007b9c:	00035c00 	call	100035c0 <__subdf3>
10007ba0:	da001717 	ldw	r8,92(sp)
10007ba4:	da401517 	ldw	r9,84(sp)
10007ba8:	1009883a 	mov	r4,r2
10007bac:	180b883a 	mov	r5,r3
10007bb0:	400d883a 	mov	r6,r8
10007bb4:	480f883a 	mov	r7,r9
10007bb8:	000dec40 	call	1000dec4 <__gedf2>
10007bbc:	00bc570e 	bge	zero,r2,10006d1c <__alt_data_end+0xf8006d1c>
10007bc0:	01000c04 	movi	r4,48
10007bc4:	00000106 	br	10007bcc <_dtoa_r+0x1624>
10007bc8:	102f883a 	mov	r23,r2
10007bcc:	b8bfffc4 	addi	r2,r23,-1
10007bd0:	10c00007 	ldb	r3,0(r2)
10007bd4:	193ffc26 	beq	r3,r4,10007bc8 <__alt_data_end+0xf8007bc8>
10007bd8:	d9801217 	ldw	r6,72(sp)
10007bdc:	d9800515 	stw	r6,20(sp)
10007be0:	003c1f06 	br	10006c60 <__alt_data_end+0xf8006c60>
10007be4:	d8801217 	ldw	r2,72(sp)
10007be8:	dc001117 	ldw	r16,68(sp)
10007bec:	d8800515 	stw	r2,20(sp)
10007bf0:	003cc906 	br	10006f18 <__alt_data_end+0xf8006f18>
10007bf4:	dd801317 	ldw	r22,76(sp)
10007bf8:	dc001117 	ldw	r16,68(sp)
10007bfc:	dcc01417 	ldw	r19,80(sp)
10007c00:	dc801017 	ldw	r18,64(sp)
10007c04:	003c4506 	br	10006d1c <__alt_data_end+0xf8006d1c>
10007c08:	103e5d1e 	bne	r2,zero,10007580 <__alt_data_end+0xf8007580>
10007c0c:	4080004c 	andi	r2,r8,1
10007c10:	103e5b26 	beq	r2,zero,10007580 <__alt_data_end+0xf8007580>
10007c14:	003e5706 	br	10007574 <__alt_data_end+0xf8007574>
10007c18:	d8c00317 	ldw	r3,12(sp)
10007c1c:	00800084 	movi	r2,2
10007c20:	10c00a16 	blt	r2,r3,10007c4c <_dtoa_r+0x16a4>
10007c24:	d9000d17 	ldw	r4,52(sp)
10007c28:	003e8306 	br	10007638 <__alt_data_end+0xf8007638>
10007c2c:	04400084 	movi	r17,2
10007c30:	003b7306 	br	10006a00 <__alt_data_end+0xf8006a00>
10007c34:	d9801217 	ldw	r6,72(sp)
10007c38:	d9800515 	stw	r6,20(sp)
10007c3c:	003cb606 	br	10006f18 <__alt_data_end+0xf8006f18>
10007c40:	d9001217 	ldw	r4,72(sp)
10007c44:	d9000515 	stw	r4,20(sp)
10007c48:	003c0506 	br	10006c60 <__alt_data_end+0xf8006c60>
10007c4c:	d9800d17 	ldw	r6,52(sp)
10007c50:	d9800615 	stw	r6,24(sp)
10007c54:	003e8306 	br	10007664 <__alt_data_end+0xf8007664>
10007c58:	d9800317 	ldw	r6,12(sp)
10007c5c:	00800084 	movi	r2,2
10007c60:	11800216 	blt	r2,r6,10007c6c <_dtoa_r+0x16c4>
10007c64:	d8800d17 	ldw	r2,52(sp)
10007c68:	003da606 	br	10007304 <__alt_data_end+0xf8007304>
10007c6c:	d8800d17 	ldw	r2,52(sp)
10007c70:	d8800615 	stw	r2,24(sp)
10007c74:	003e7b06 	br	10007664 <__alt_data_end+0xf8007664>
10007c78:	05000044 	movi	r20,1
10007c7c:	003b0506 	br	10006894 <__alt_data_end+0xf8006894>
10007c80:	8009883a 	mov	r4,r16
10007c84:	80001115 	stw	zero,68(r16)
10007c88:	000b883a 	mov	r5,zero
10007c8c:	00095e40 	call	100095e4 <_Balloc>
10007c90:	d8800715 	stw	r2,28(sp)
10007c94:	d8c00717 	ldw	r3,28(sp)
10007c98:	00bfffc4 	movi	r2,-1
10007c9c:	01000044 	movi	r4,1
10007ca0:	d8800615 	stw	r2,24(sp)
10007ca4:	80c01015 	stw	r3,64(r16)
10007ca8:	d9000b15 	stw	r4,44(sp)
10007cac:	d8002215 	stw	zero,136(sp)
10007cb0:	d8800d15 	stw	r2,52(sp)
10007cb4:	003c1906 	br	10006d1c <__alt_data_end+0xf8006d1c>
10007cb8:	193d2926 	beq	r3,r4,10007160 <__alt_data_end+0xf8007160>
10007cbc:	00c00f04 	movi	r3,60
10007cc0:	1885c83a 	sub	r2,r3,r2
10007cc4:	003d7b06 	br	100072b4 <__alt_data_end+0xf80072b4>
10007cc8:	000b883a 	mov	r5,zero
10007ccc:	003b1006 	br	10006910 <__alt_data_end+0xf8006910>

10007cd0 <_fflush_r>:
10007cd0:	defffb04 	addi	sp,sp,-20
10007cd4:	dcc00315 	stw	r19,12(sp)
10007cd8:	dc000015 	stw	r16,0(sp)
10007cdc:	dfc00415 	stw	ra,16(sp)
10007ce0:	dc800215 	stw	r18,8(sp)
10007ce4:	dc400115 	stw	r17,4(sp)
10007ce8:	2027883a 	mov	r19,r4
10007cec:	2821883a 	mov	r16,r5
10007cf0:	20000226 	beq	r4,zero,10007cfc <_fflush_r+0x2c>
10007cf4:	20800e17 	ldw	r2,56(r4)
10007cf8:	10005326 	beq	r2,zero,10007e48 <_fflush_r+0x178>
10007cfc:	8080030b 	ldhu	r2,12(r16)
10007d00:	10ffffcc 	andi	r3,r2,65535
10007d04:	18e0001c 	xori	r3,r3,32768
10007d08:	18e00004 	addi	r3,r3,-32768
10007d0c:	18002c26 	beq	r3,zero,10007dc0 <_fflush_r+0xf0>
10007d10:	10c0020c 	andi	r3,r2,8
10007d14:	1800321e 	bne	r3,zero,10007de0 <_fflush_r+0x110>
10007d18:	80c00117 	ldw	r3,4(r16)
10007d1c:	10820014 	ori	r2,r2,2048
10007d20:	8080030d 	sth	r2,12(r16)
10007d24:	00c0570e 	bge	zero,r3,10007e84 <_fflush_r+0x1b4>
10007d28:	82000a17 	ldw	r8,40(r16)
10007d2c:	40002426 	beq	r8,zero,10007dc0 <_fflush_r+0xf0>
10007d30:	9c400017 	ldw	r17,0(r19)
10007d34:	10c4000c 	andi	r3,r2,4096
10007d38:	98000015 	stw	zero,0(r19)
10007d3c:	18004626 	beq	r3,zero,10007e58 <_fflush_r+0x188>
10007d40:	81801417 	ldw	r6,80(r16)
10007d44:	10c0010c 	andi	r3,r2,4
10007d48:	18000626 	beq	r3,zero,10007d64 <_fflush_r+0x94>
10007d4c:	80c00117 	ldw	r3,4(r16)
10007d50:	80800c17 	ldw	r2,48(r16)
10007d54:	30cdc83a 	sub	r6,r6,r3
10007d58:	10000226 	beq	r2,zero,10007d64 <_fflush_r+0x94>
10007d5c:	80800f17 	ldw	r2,60(r16)
10007d60:	308dc83a 	sub	r6,r6,r2
10007d64:	81400717 	ldw	r5,28(r16)
10007d68:	9809883a 	mov	r4,r19
10007d6c:	000f883a 	mov	r7,zero
10007d70:	403ee83a 	callr	r8
10007d74:	00ffffc4 	movi	r3,-1
10007d78:	10c04526 	beq	r2,r3,10007e90 <_fflush_r+0x1c0>
10007d7c:	80c0030b 	ldhu	r3,12(r16)
10007d80:	81000417 	ldw	r4,16(r16)
10007d84:	80000115 	stw	zero,4(r16)
10007d88:	197dffcc 	andi	r5,r3,63487
10007d8c:	8140030d 	sth	r5,12(r16)
10007d90:	81000015 	stw	r4,0(r16)
10007d94:	18c4000c 	andi	r3,r3,4096
10007d98:	18000126 	beq	r3,zero,10007da0 <_fflush_r+0xd0>
10007d9c:	80801415 	stw	r2,80(r16)
10007da0:	81400c17 	ldw	r5,48(r16)
10007da4:	9c400015 	stw	r17,0(r19)
10007da8:	28000526 	beq	r5,zero,10007dc0 <_fflush_r+0xf0>
10007dac:	80801004 	addi	r2,r16,64
10007db0:	28800226 	beq	r5,r2,10007dbc <_fflush_r+0xec>
10007db4:	9809883a 	mov	r4,r19
10007db8:	00084000 	call	10008400 <_free_r>
10007dbc:	80000c15 	stw	zero,48(r16)
10007dc0:	0005883a 	mov	r2,zero
10007dc4:	dfc00417 	ldw	ra,16(sp)
10007dc8:	dcc00317 	ldw	r19,12(sp)
10007dcc:	dc800217 	ldw	r18,8(sp)
10007dd0:	dc400117 	ldw	r17,4(sp)
10007dd4:	dc000017 	ldw	r16,0(sp)
10007dd8:	dec00504 	addi	sp,sp,20
10007ddc:	f800283a 	ret
10007de0:	84800417 	ldw	r18,16(r16)
10007de4:	903ff626 	beq	r18,zero,10007dc0 <__alt_data_end+0xf8007dc0>
10007de8:	84400017 	ldw	r17,0(r16)
10007dec:	108000cc 	andi	r2,r2,3
10007df0:	84800015 	stw	r18,0(r16)
10007df4:	8ca3c83a 	sub	r17,r17,r18
10007df8:	10001526 	beq	r2,zero,10007e50 <_fflush_r+0x180>
10007dfc:	0005883a 	mov	r2,zero
10007e00:	80800215 	stw	r2,8(r16)
10007e04:	04400316 	blt	zero,r17,10007e14 <_fflush_r+0x144>
10007e08:	003fed06 	br	10007dc0 <__alt_data_end+0xf8007dc0>
10007e0c:	90a5883a 	add	r18,r18,r2
10007e10:	047feb0e 	bge	zero,r17,10007dc0 <__alt_data_end+0xf8007dc0>
10007e14:	80800917 	ldw	r2,36(r16)
10007e18:	81400717 	ldw	r5,28(r16)
10007e1c:	880f883a 	mov	r7,r17
10007e20:	900d883a 	mov	r6,r18
10007e24:	9809883a 	mov	r4,r19
10007e28:	103ee83a 	callr	r2
10007e2c:	88a3c83a 	sub	r17,r17,r2
10007e30:	00bff616 	blt	zero,r2,10007e0c <__alt_data_end+0xf8007e0c>
10007e34:	80c0030b 	ldhu	r3,12(r16)
10007e38:	00bfffc4 	movi	r2,-1
10007e3c:	18c01014 	ori	r3,r3,64
10007e40:	80c0030d 	sth	r3,12(r16)
10007e44:	003fdf06 	br	10007dc4 <__alt_data_end+0xf8007dc4>
10007e48:	000828c0 	call	1000828c <__sinit>
10007e4c:	003fab06 	br	10007cfc <__alt_data_end+0xf8007cfc>
10007e50:	80800517 	ldw	r2,20(r16)
10007e54:	003fea06 	br	10007e00 <__alt_data_end+0xf8007e00>
10007e58:	81400717 	ldw	r5,28(r16)
10007e5c:	000d883a 	mov	r6,zero
10007e60:	9809883a 	mov	r4,r19
10007e64:	01c00044 	movi	r7,1
10007e68:	403ee83a 	callr	r8
10007e6c:	100d883a 	mov	r6,r2
10007e70:	00bfffc4 	movi	r2,-1
10007e74:	30801326 	beq	r6,r2,10007ec4 <_fflush_r+0x1f4>
10007e78:	8080030b 	ldhu	r2,12(r16)
10007e7c:	82000a17 	ldw	r8,40(r16)
10007e80:	003fb006 	br	10007d44 <__alt_data_end+0xf8007d44>
10007e84:	80c00f17 	ldw	r3,60(r16)
10007e88:	00ffa716 	blt	zero,r3,10007d28 <__alt_data_end+0xf8007d28>
10007e8c:	003fcc06 	br	10007dc0 <__alt_data_end+0xf8007dc0>
10007e90:	98c00017 	ldw	r3,0(r19)
10007e94:	183fb926 	beq	r3,zero,10007d7c <__alt_data_end+0xf8007d7c>
10007e98:	01000744 	movi	r4,29
10007e9c:	19000226 	beq	r3,r4,10007ea8 <_fflush_r+0x1d8>
10007ea0:	01000584 	movi	r4,22
10007ea4:	1900101e 	bne	r3,r4,10007ee8 <_fflush_r+0x218>
10007ea8:	8080030b 	ldhu	r2,12(r16)
10007eac:	80c00417 	ldw	r3,16(r16)
10007eb0:	80000115 	stw	zero,4(r16)
10007eb4:	10bdffcc 	andi	r2,r2,63487
10007eb8:	8080030d 	sth	r2,12(r16)
10007ebc:	80c00015 	stw	r3,0(r16)
10007ec0:	003fb706 	br	10007da0 <__alt_data_end+0xf8007da0>
10007ec4:	98800017 	ldw	r2,0(r19)
10007ec8:	103feb26 	beq	r2,zero,10007e78 <__alt_data_end+0xf8007e78>
10007ecc:	00c00744 	movi	r3,29
10007ed0:	10c00226 	beq	r2,r3,10007edc <_fflush_r+0x20c>
10007ed4:	00c00584 	movi	r3,22
10007ed8:	10ffd61e 	bne	r2,r3,10007e34 <__alt_data_end+0xf8007e34>
10007edc:	9c400015 	stw	r17,0(r19)
10007ee0:	0005883a 	mov	r2,zero
10007ee4:	003fb706 	br	10007dc4 <__alt_data_end+0xf8007dc4>
10007ee8:	80c0030b 	ldhu	r3,12(r16)
10007eec:	18c01014 	ori	r3,r3,64
10007ef0:	80c0030d 	sth	r3,12(r16)
10007ef4:	003fb306 	br	10007dc4 <__alt_data_end+0xf8007dc4>

10007ef8 <fflush>:
10007ef8:	20000526 	beq	r4,zero,10007f10 <fflush+0x18>
10007efc:	00840074 	movhi	r2,4097
10007f00:	108bac04 	addi	r2,r2,11952
10007f04:	200b883a 	mov	r5,r4
10007f08:	11000017 	ldw	r4,0(r2)
10007f0c:	0007cd01 	jmpi	10007cd0 <_fflush_r>
10007f10:	00840074 	movhi	r2,4097
10007f14:	108bab04 	addi	r2,r2,11948
10007f18:	11000017 	ldw	r4,0(r2)
10007f1c:	01440034 	movhi	r5,4096
10007f20:	295f3404 	addi	r5,r5,31952
10007f24:	00087a81 	jmpi	100087a8 <_fwalk_reent>

10007f28 <__fp_lock>:
10007f28:	0005883a 	mov	r2,zero
10007f2c:	f800283a 	ret

10007f30 <__fp_unlock>:
10007f30:	0005883a 	mov	r2,zero
10007f34:	f800283a 	ret

10007f38 <_cleanup_r>:
10007f38:	01440074 	movhi	r5,4097
10007f3c:	29705404 	addi	r5,r5,-16048
10007f40:	00086f01 	jmpi	100086f0 <_fwalk>

10007f44 <__sinit.part.1>:
10007f44:	defff604 	addi	sp,sp,-40
10007f48:	00c40034 	movhi	r3,4096
10007f4c:	dfc00915 	stw	ra,36(sp)
10007f50:	df000815 	stw	fp,32(sp)
10007f54:	ddc00715 	stw	r23,28(sp)
10007f58:	dd800615 	stw	r22,24(sp)
10007f5c:	dd400515 	stw	r21,20(sp)
10007f60:	dd000415 	stw	r20,16(sp)
10007f64:	dcc00315 	stw	r19,12(sp)
10007f68:	dc800215 	stw	r18,8(sp)
10007f6c:	dc400115 	stw	r17,4(sp)
10007f70:	dc000015 	stw	r16,0(sp)
10007f74:	18dfce04 	addi	r3,r3,32568
10007f78:	24000117 	ldw	r16,4(r4)
10007f7c:	20c00f15 	stw	r3,60(r4)
10007f80:	07000044 	movi	fp,1
10007f84:	00c000c4 	movi	r3,3
10007f88:	2080bb04 	addi	r2,r4,748
10007f8c:	20c0b915 	stw	r3,740(r4)
10007f90:	27000e15 	stw	fp,56(r4)
10007f94:	2080ba15 	stw	r2,744(r4)
10007f98:	2000b815 	stw	zero,736(r4)
10007f9c:	05c00204 	movi	r23,8
10007fa0:	00800104 	movi	r2,4
10007fa4:	2025883a 	mov	r18,r4
10007fa8:	b80d883a 	mov	r6,r23
10007fac:	81001704 	addi	r4,r16,92
10007fb0:	000b883a 	mov	r5,zero
10007fb4:	80000015 	stw	zero,0(r16)
10007fb8:	80000115 	stw	zero,4(r16)
10007fbc:	80000215 	stw	zero,8(r16)
10007fc0:	8080030d 	sth	r2,12(r16)
10007fc4:	80001915 	stw	zero,100(r16)
10007fc8:	8000038d 	sth	zero,14(r16)
10007fcc:	80000415 	stw	zero,16(r16)
10007fd0:	80000515 	stw	zero,20(r16)
10007fd4:	80000615 	stw	zero,24(r16)
10007fd8:	00094c00 	call	100094c0 <memset>
10007fdc:	05840074 	movhi	r22,4097
10007fe0:	94400217 	ldw	r17,8(r18)
10007fe4:	05440074 	movhi	r21,4097
10007fe8:	05040074 	movhi	r20,4097
10007fec:	04c40074 	movhi	r19,4097
10007ff0:	b5a9bd04 	addi	r22,r22,-22796
10007ff4:	ad69d404 	addi	r21,r21,-22704
10007ff8:	a529f304 	addi	r20,r20,-22580
10007ffc:	9cea0a04 	addi	r19,r19,-22488
10008000:	85800815 	stw	r22,32(r16)
10008004:	85400915 	stw	r21,36(r16)
10008008:	85000a15 	stw	r20,40(r16)
1000800c:	84c00b15 	stw	r19,44(r16)
10008010:	84000715 	stw	r16,28(r16)
10008014:	00800284 	movi	r2,10
10008018:	89001704 	addi	r4,r17,92
1000801c:	b80d883a 	mov	r6,r23
10008020:	000b883a 	mov	r5,zero
10008024:	88000015 	stw	zero,0(r17)
10008028:	88000115 	stw	zero,4(r17)
1000802c:	88000215 	stw	zero,8(r17)
10008030:	8880030d 	sth	r2,12(r17)
10008034:	88001915 	stw	zero,100(r17)
10008038:	8f00038d 	sth	fp,14(r17)
1000803c:	88000415 	stw	zero,16(r17)
10008040:	88000515 	stw	zero,20(r17)
10008044:	88000615 	stw	zero,24(r17)
10008048:	00094c00 	call	100094c0 <memset>
1000804c:	94000317 	ldw	r16,12(r18)
10008050:	00800484 	movi	r2,18
10008054:	8c400715 	stw	r17,28(r17)
10008058:	8d800815 	stw	r22,32(r17)
1000805c:	8d400915 	stw	r21,36(r17)
10008060:	8d000a15 	stw	r20,40(r17)
10008064:	8cc00b15 	stw	r19,44(r17)
10008068:	8080030d 	sth	r2,12(r16)
1000806c:	00800084 	movi	r2,2
10008070:	80000015 	stw	zero,0(r16)
10008074:	80000115 	stw	zero,4(r16)
10008078:	80000215 	stw	zero,8(r16)
1000807c:	80001915 	stw	zero,100(r16)
10008080:	8080038d 	sth	r2,14(r16)
10008084:	80000415 	stw	zero,16(r16)
10008088:	80000515 	stw	zero,20(r16)
1000808c:	80000615 	stw	zero,24(r16)
10008090:	81001704 	addi	r4,r16,92
10008094:	000b883a 	mov	r5,zero
10008098:	b80d883a 	mov	r6,r23
1000809c:	00094c00 	call	100094c0 <memset>
100080a0:	84000715 	stw	r16,28(r16)
100080a4:	85800815 	stw	r22,32(r16)
100080a8:	85400915 	stw	r21,36(r16)
100080ac:	85000a15 	stw	r20,40(r16)
100080b0:	84c00b15 	stw	r19,44(r16)
100080b4:	dfc00917 	ldw	ra,36(sp)
100080b8:	df000817 	ldw	fp,32(sp)
100080bc:	ddc00717 	ldw	r23,28(sp)
100080c0:	dd800617 	ldw	r22,24(sp)
100080c4:	dd400517 	ldw	r21,20(sp)
100080c8:	dd000417 	ldw	r20,16(sp)
100080cc:	dcc00317 	ldw	r19,12(sp)
100080d0:	dc800217 	ldw	r18,8(sp)
100080d4:	dc400117 	ldw	r17,4(sp)
100080d8:	dc000017 	ldw	r16,0(sp)
100080dc:	dec00a04 	addi	sp,sp,40
100080e0:	f800283a 	ret

100080e4 <__sfmoreglue>:
100080e4:	defffc04 	addi	sp,sp,-16
100080e8:	dc800215 	stw	r18,8(sp)
100080ec:	2825883a 	mov	r18,r5
100080f0:	dc000015 	stw	r16,0(sp)
100080f4:	01401a04 	movi	r5,104
100080f8:	2021883a 	mov	r16,r4
100080fc:	9009883a 	mov	r4,r18
10008100:	dfc00315 	stw	ra,12(sp)
10008104:	dc400115 	stw	r17,4(sp)
10008108:	0002cfc0 	call	10002cfc <__mulsi3>
1000810c:	8009883a 	mov	r4,r16
10008110:	11400304 	addi	r5,r2,12
10008114:	1023883a 	mov	r17,r2
10008118:	0008af80 	call	10008af8 <_malloc_r>
1000811c:	1021883a 	mov	r16,r2
10008120:	10000726 	beq	r2,zero,10008140 <__sfmoreglue+0x5c>
10008124:	11000304 	addi	r4,r2,12
10008128:	10000015 	stw	zero,0(r2)
1000812c:	14800115 	stw	r18,4(r2)
10008130:	11000215 	stw	r4,8(r2)
10008134:	000b883a 	mov	r5,zero
10008138:	880d883a 	mov	r6,r17
1000813c:	00094c00 	call	100094c0 <memset>
10008140:	8005883a 	mov	r2,r16
10008144:	dfc00317 	ldw	ra,12(sp)
10008148:	dc800217 	ldw	r18,8(sp)
1000814c:	dc400117 	ldw	r17,4(sp)
10008150:	dc000017 	ldw	r16,0(sp)
10008154:	dec00404 	addi	sp,sp,16
10008158:	f800283a 	ret

1000815c <__sfp>:
1000815c:	00840074 	movhi	r2,4097
10008160:	defffb04 	addi	sp,sp,-20
10008164:	108bab04 	addi	r2,r2,11948
10008168:	dc800215 	stw	r18,8(sp)
1000816c:	14800017 	ldw	r18,0(r2)
10008170:	dcc00315 	stw	r19,12(sp)
10008174:	dfc00415 	stw	ra,16(sp)
10008178:	90800e17 	ldw	r2,56(r18)
1000817c:	dc400115 	stw	r17,4(sp)
10008180:	dc000015 	stw	r16,0(sp)
10008184:	2027883a 	mov	r19,r4
10008188:	1000021e 	bne	r2,zero,10008194 <__sfp+0x38>
1000818c:	9009883a 	mov	r4,r18
10008190:	0007f440 	call	10007f44 <__sinit.part.1>
10008194:	9480b804 	addi	r18,r18,736
10008198:	047fffc4 	movi	r17,-1
1000819c:	91400117 	ldw	r5,4(r18)
100081a0:	94000217 	ldw	r16,8(r18)
100081a4:	297fffc4 	addi	r5,r5,-1
100081a8:	28000a16 	blt	r5,zero,100081d4 <__sfp+0x78>
100081ac:	8080030f 	ldh	r2,12(r16)
100081b0:	10000c26 	beq	r2,zero,100081e4 <__sfp+0x88>
100081b4:	80c01d04 	addi	r3,r16,116
100081b8:	00000206 	br	100081c4 <__sfp+0x68>
100081bc:	18bfe60f 	ldh	r2,-104(r3)
100081c0:	10000826 	beq	r2,zero,100081e4 <__sfp+0x88>
100081c4:	297fffc4 	addi	r5,r5,-1
100081c8:	1c3ffd04 	addi	r16,r3,-12
100081cc:	18c01a04 	addi	r3,r3,104
100081d0:	2c7ffa1e 	bne	r5,r17,100081bc <__alt_data_end+0xf80081bc>
100081d4:	90800017 	ldw	r2,0(r18)
100081d8:	10001d26 	beq	r2,zero,10008250 <__sfp+0xf4>
100081dc:	1025883a 	mov	r18,r2
100081e0:	003fee06 	br	1000819c <__alt_data_end+0xf800819c>
100081e4:	00bfffc4 	movi	r2,-1
100081e8:	8080038d 	sth	r2,14(r16)
100081ec:	00800044 	movi	r2,1
100081f0:	8080030d 	sth	r2,12(r16)
100081f4:	80001915 	stw	zero,100(r16)
100081f8:	80000015 	stw	zero,0(r16)
100081fc:	80000215 	stw	zero,8(r16)
10008200:	80000115 	stw	zero,4(r16)
10008204:	80000415 	stw	zero,16(r16)
10008208:	80000515 	stw	zero,20(r16)
1000820c:	80000615 	stw	zero,24(r16)
10008210:	81001704 	addi	r4,r16,92
10008214:	000b883a 	mov	r5,zero
10008218:	01800204 	movi	r6,8
1000821c:	00094c00 	call	100094c0 <memset>
10008220:	8005883a 	mov	r2,r16
10008224:	80000c15 	stw	zero,48(r16)
10008228:	80000d15 	stw	zero,52(r16)
1000822c:	80001115 	stw	zero,68(r16)
10008230:	80001215 	stw	zero,72(r16)
10008234:	dfc00417 	ldw	ra,16(sp)
10008238:	dcc00317 	ldw	r19,12(sp)
1000823c:	dc800217 	ldw	r18,8(sp)
10008240:	dc400117 	ldw	r17,4(sp)
10008244:	dc000017 	ldw	r16,0(sp)
10008248:	dec00504 	addi	sp,sp,20
1000824c:	f800283a 	ret
10008250:	9809883a 	mov	r4,r19
10008254:	01400104 	movi	r5,4
10008258:	00080e40 	call	100080e4 <__sfmoreglue>
1000825c:	90800015 	stw	r2,0(r18)
10008260:	103fde1e 	bne	r2,zero,100081dc <__alt_data_end+0xf80081dc>
10008264:	00800304 	movi	r2,12
10008268:	98800015 	stw	r2,0(r19)
1000826c:	0005883a 	mov	r2,zero
10008270:	003ff006 	br	10008234 <__alt_data_end+0xf8008234>

10008274 <_cleanup>:
10008274:	00840074 	movhi	r2,4097
10008278:	108bab04 	addi	r2,r2,11948
1000827c:	11000017 	ldw	r4,0(r2)
10008280:	01440074 	movhi	r5,4097
10008284:	29705404 	addi	r5,r5,-16048
10008288:	00086f01 	jmpi	100086f0 <_fwalk>

1000828c <__sinit>:
1000828c:	20800e17 	ldw	r2,56(r4)
10008290:	10000126 	beq	r2,zero,10008298 <__sinit+0xc>
10008294:	f800283a 	ret
10008298:	0007f441 	jmpi	10007f44 <__sinit.part.1>

1000829c <__sfp_lock_acquire>:
1000829c:	f800283a 	ret

100082a0 <__sfp_lock_release>:
100082a0:	f800283a 	ret

100082a4 <__sinit_lock_acquire>:
100082a4:	f800283a 	ret

100082a8 <__sinit_lock_release>:
100082a8:	f800283a 	ret

100082ac <__fp_lock_all>:
100082ac:	00840074 	movhi	r2,4097
100082b0:	108bac04 	addi	r2,r2,11952
100082b4:	11000017 	ldw	r4,0(r2)
100082b8:	01440034 	movhi	r5,4096
100082bc:	295fca04 	addi	r5,r5,32552
100082c0:	00086f01 	jmpi	100086f0 <_fwalk>

100082c4 <__fp_unlock_all>:
100082c4:	00840074 	movhi	r2,4097
100082c8:	108bac04 	addi	r2,r2,11952
100082cc:	11000017 	ldw	r4,0(r2)
100082d0:	01440034 	movhi	r5,4096
100082d4:	295fcc04 	addi	r5,r5,32560
100082d8:	00086f01 	jmpi	100086f0 <_fwalk>

100082dc <_malloc_trim_r>:
100082dc:	defffb04 	addi	sp,sp,-20
100082e0:	dcc00315 	stw	r19,12(sp)
100082e4:	04c40074 	movhi	r19,4097
100082e8:	dc800215 	stw	r18,8(sp)
100082ec:	dc400115 	stw	r17,4(sp)
100082f0:	dc000015 	stw	r16,0(sp)
100082f4:	dfc00415 	stw	ra,16(sp)
100082f8:	2821883a 	mov	r16,r5
100082fc:	9cc62704 	addi	r19,r19,6300
10008300:	2025883a 	mov	r18,r4
10008304:	000ef740 	call	1000ef74 <__malloc_lock>
10008308:	98800217 	ldw	r2,8(r19)
1000830c:	14400117 	ldw	r17,4(r2)
10008310:	00bfff04 	movi	r2,-4
10008314:	88a2703a 	and	r17,r17,r2
10008318:	8c21c83a 	sub	r16,r17,r16
1000831c:	8403fbc4 	addi	r16,r16,4079
10008320:	8020d33a 	srli	r16,r16,12
10008324:	0083ffc4 	movi	r2,4095
10008328:	843fffc4 	addi	r16,r16,-1
1000832c:	8020933a 	slli	r16,r16,12
10008330:	1400060e 	bge	r2,r16,1000834c <_malloc_trim_r+0x70>
10008334:	9009883a 	mov	r4,r18
10008338:	000b883a 	mov	r5,zero
1000833c:	000a6a00 	call	1000a6a0 <_sbrk_r>
10008340:	98c00217 	ldw	r3,8(r19)
10008344:	1c47883a 	add	r3,r3,r17
10008348:	10c00a26 	beq	r2,r3,10008374 <_malloc_trim_r+0x98>
1000834c:	9009883a 	mov	r4,r18
10008350:	000ef940 	call	1000ef94 <__malloc_unlock>
10008354:	0005883a 	mov	r2,zero
10008358:	dfc00417 	ldw	ra,16(sp)
1000835c:	dcc00317 	ldw	r19,12(sp)
10008360:	dc800217 	ldw	r18,8(sp)
10008364:	dc400117 	ldw	r17,4(sp)
10008368:	dc000017 	ldw	r16,0(sp)
1000836c:	dec00504 	addi	sp,sp,20
10008370:	f800283a 	ret
10008374:	9009883a 	mov	r4,r18
10008378:	040bc83a 	sub	r5,zero,r16
1000837c:	000a6a00 	call	1000a6a0 <_sbrk_r>
10008380:	00ffffc4 	movi	r3,-1
10008384:	10c00d26 	beq	r2,r3,100083bc <_malloc_trim_r+0xe0>
10008388:	00c40074 	movhi	r3,4097
1000838c:	18d29304 	addi	r3,r3,19020
10008390:	18800017 	ldw	r2,0(r3)
10008394:	99000217 	ldw	r4,8(r19)
10008398:	8c23c83a 	sub	r17,r17,r16
1000839c:	8c400054 	ori	r17,r17,1
100083a0:	1421c83a 	sub	r16,r2,r16
100083a4:	24400115 	stw	r17,4(r4)
100083a8:	9009883a 	mov	r4,r18
100083ac:	1c000015 	stw	r16,0(r3)
100083b0:	000ef940 	call	1000ef94 <__malloc_unlock>
100083b4:	00800044 	movi	r2,1
100083b8:	003fe706 	br	10008358 <__alt_data_end+0xf8008358>
100083bc:	9009883a 	mov	r4,r18
100083c0:	000b883a 	mov	r5,zero
100083c4:	000a6a00 	call	1000a6a0 <_sbrk_r>
100083c8:	99000217 	ldw	r4,8(r19)
100083cc:	014003c4 	movi	r5,15
100083d0:	1107c83a 	sub	r3,r2,r4
100083d4:	28ffdd0e 	bge	r5,r3,1000834c <__alt_data_end+0xf800834c>
100083d8:	01440074 	movhi	r5,4097
100083dc:	294bae04 	addi	r5,r5,11960
100083e0:	29400017 	ldw	r5,0(r5)
100083e4:	18c00054 	ori	r3,r3,1
100083e8:	20c00115 	stw	r3,4(r4)
100083ec:	00c40074 	movhi	r3,4097
100083f0:	1145c83a 	sub	r2,r2,r5
100083f4:	18d29304 	addi	r3,r3,19020
100083f8:	18800015 	stw	r2,0(r3)
100083fc:	003fd306 	br	1000834c <__alt_data_end+0xf800834c>

10008400 <_free_r>:
10008400:	28004c26 	beq	r5,zero,10008534 <_free_r+0x134>
10008404:	defffd04 	addi	sp,sp,-12
10008408:	dc400115 	stw	r17,4(sp)
1000840c:	dc000015 	stw	r16,0(sp)
10008410:	2023883a 	mov	r17,r4
10008414:	2821883a 	mov	r16,r5
10008418:	dfc00215 	stw	ra,8(sp)
1000841c:	000ef740 	call	1000ef74 <__malloc_lock>
10008420:	813fff17 	ldw	r4,-4(r16)
10008424:	00bfff84 	movi	r2,-2
10008428:	02440074 	movhi	r9,4097
1000842c:	81bffe04 	addi	r6,r16,-8
10008430:	2084703a 	and	r2,r4,r2
10008434:	4a462704 	addi	r9,r9,6300
10008438:	308b883a 	add	r5,r6,r2
1000843c:	2a000117 	ldw	r8,4(r5)
10008440:	49c00217 	ldw	r7,8(r9)
10008444:	00ffff04 	movi	r3,-4
10008448:	40c6703a 	and	r3,r8,r3
1000844c:	39405326 	beq	r7,r5,1000859c <_free_r+0x19c>
10008450:	28c00115 	stw	r3,4(r5)
10008454:	2100004c 	andi	r4,r4,1
10008458:	2000091e 	bne	r4,zero,10008480 <_free_r+0x80>
1000845c:	81fffe17 	ldw	r7,-8(r16)
10008460:	4a000204 	addi	r8,r9,8
10008464:	31cdc83a 	sub	r6,r6,r7
10008468:	31000217 	ldw	r4,8(r6)
1000846c:	11c5883a 	add	r2,r2,r7
10008470:	22006126 	beq	r4,r8,100085f8 <_free_r+0x1f8>
10008474:	31c00317 	ldw	r7,12(r6)
10008478:	21c00315 	stw	r7,12(r4)
1000847c:	39000215 	stw	r4,8(r7)
10008480:	28c9883a 	add	r4,r5,r3
10008484:	21c00117 	ldw	r7,4(r4)
10008488:	39c0004c 	andi	r7,r7,1
1000848c:	38000d1e 	bne	r7,zero,100084c4 <_free_r+0xc4>
10008490:	29000217 	ldw	r4,8(r5)
10008494:	10c5883a 	add	r2,r2,r3
10008498:	00c40074 	movhi	r3,4097
1000849c:	18c62904 	addi	r3,r3,6308
100084a0:	20c07526 	beq	r4,r3,10008678 <_free_r+0x278>
100084a4:	29c00317 	ldw	r7,12(r5)
100084a8:	11400054 	ori	r5,r2,1
100084ac:	3087883a 	add	r3,r6,r2
100084b0:	21c00315 	stw	r7,12(r4)
100084b4:	39000215 	stw	r4,8(r7)
100084b8:	31400115 	stw	r5,4(r6)
100084bc:	18800015 	stw	r2,0(r3)
100084c0:	00000406 	br	100084d4 <_free_r+0xd4>
100084c4:	10c00054 	ori	r3,r2,1
100084c8:	30c00115 	stw	r3,4(r6)
100084cc:	3087883a 	add	r3,r6,r2
100084d0:	18800015 	stw	r2,0(r3)
100084d4:	00c07fc4 	movi	r3,511
100084d8:	18801736 	bltu	r3,r2,10008538 <_free_r+0x138>
100084dc:	1004d0fa 	srli	r2,r2,3
100084e0:	01400044 	movi	r5,1
100084e4:	49000117 	ldw	r4,4(r9)
100084e8:	1087883a 	add	r3,r2,r2
100084ec:	18c7883a 	add	r3,r3,r3
100084f0:	1005d0ba 	srai	r2,r2,2
100084f4:	18c7883a 	add	r3,r3,r3
100084f8:	1a47883a 	add	r3,r3,r9
100084fc:	19c00217 	ldw	r7,8(r3)
10008500:	2884983a 	sll	r2,r5,r2
10008504:	30c00315 	stw	r3,12(r6)
10008508:	31c00215 	stw	r7,8(r6)
1000850c:	1104b03a 	or	r2,r2,r4
10008510:	19800215 	stw	r6,8(r3)
10008514:	48800115 	stw	r2,4(r9)
10008518:	39800315 	stw	r6,12(r7)
1000851c:	8809883a 	mov	r4,r17
10008520:	dfc00217 	ldw	ra,8(sp)
10008524:	dc400117 	ldw	r17,4(sp)
10008528:	dc000017 	ldw	r16,0(sp)
1000852c:	dec00304 	addi	sp,sp,12
10008530:	000ef941 	jmpi	1000ef94 <__malloc_unlock>
10008534:	f800283a 	ret
10008538:	1006d27a 	srli	r3,r2,9
1000853c:	01000104 	movi	r4,4
10008540:	20c04036 	bltu	r4,r3,10008644 <_free_r+0x244>
10008544:	1006d1ba 	srli	r3,r2,6
10008548:	19400e04 	addi	r5,r3,56
1000854c:	2947883a 	add	r3,r5,r5
10008550:	18c7883a 	add	r3,r3,r3
10008554:	18c7883a 	add	r3,r3,r3
10008558:	1a49883a 	add	r4,r3,r9
1000855c:	20c00217 	ldw	r3,8(r4)
10008560:	01c40074 	movhi	r7,4097
10008564:	39c62704 	addi	r7,r7,6300
10008568:	19003b26 	beq	r3,r4,10008658 <_free_r+0x258>
1000856c:	01ffff04 	movi	r7,-4
10008570:	19400117 	ldw	r5,4(r3)
10008574:	29ca703a 	and	r5,r5,r7
10008578:	1140022e 	bgeu	r2,r5,10008584 <_free_r+0x184>
1000857c:	18c00217 	ldw	r3,8(r3)
10008580:	20fffb1e 	bne	r4,r3,10008570 <__alt_data_end+0xf8008570>
10008584:	18800317 	ldw	r2,12(r3)
10008588:	30800315 	stw	r2,12(r6)
1000858c:	30c00215 	stw	r3,8(r6)
10008590:	11800215 	stw	r6,8(r2)
10008594:	19800315 	stw	r6,12(r3)
10008598:	003fe006 	br	1000851c <__alt_data_end+0xf800851c>
1000859c:	2100004c 	andi	r4,r4,1
100085a0:	1885883a 	add	r2,r3,r2
100085a4:	2000071e 	bne	r4,zero,100085c4 <_free_r+0x1c4>
100085a8:	817ffe17 	ldw	r5,-8(r16)
100085ac:	314dc83a 	sub	r6,r6,r5
100085b0:	30c00317 	ldw	r3,12(r6)
100085b4:	31000217 	ldw	r4,8(r6)
100085b8:	1145883a 	add	r2,r2,r5
100085bc:	20c00315 	stw	r3,12(r4)
100085c0:	19000215 	stw	r4,8(r3)
100085c4:	10c00054 	ori	r3,r2,1
100085c8:	30c00115 	stw	r3,4(r6)
100085cc:	00c40074 	movhi	r3,4097
100085d0:	18cbaf04 	addi	r3,r3,11964
100085d4:	18c00017 	ldw	r3,0(r3)
100085d8:	49800215 	stw	r6,8(r9)
100085dc:	10ffcf36 	bltu	r2,r3,1000851c <__alt_data_end+0xf800851c>
100085e0:	00840074 	movhi	r2,4097
100085e4:	10928a04 	addi	r2,r2,18984
100085e8:	11400017 	ldw	r5,0(r2)
100085ec:	8809883a 	mov	r4,r17
100085f0:	00082dc0 	call	100082dc <_malloc_trim_r>
100085f4:	003fc906 	br	1000851c <__alt_data_end+0xf800851c>
100085f8:	28c9883a 	add	r4,r5,r3
100085fc:	21000117 	ldw	r4,4(r4)
10008600:	2100004c 	andi	r4,r4,1
10008604:	20000a1e 	bne	r4,zero,10008630 <_free_r+0x230>
10008608:	29000317 	ldw	r4,12(r5)
1000860c:	29400217 	ldw	r5,8(r5)
10008610:	10c5883a 	add	r2,r2,r3
10008614:	10c00054 	ori	r3,r2,1
10008618:	29000315 	stw	r4,12(r5)
1000861c:	21400215 	stw	r5,8(r4)
10008620:	30c00115 	stw	r3,4(r6)
10008624:	308d883a 	add	r6,r6,r2
10008628:	30800015 	stw	r2,0(r6)
1000862c:	003fbb06 	br	1000851c <__alt_data_end+0xf800851c>
10008630:	10c00054 	ori	r3,r2,1
10008634:	30c00115 	stw	r3,4(r6)
10008638:	308d883a 	add	r6,r6,r2
1000863c:	30800015 	stw	r2,0(r6)
10008640:	003fb606 	br	1000851c <__alt_data_end+0xf800851c>
10008644:	01000504 	movi	r4,20
10008648:	20c01436 	bltu	r4,r3,1000869c <_free_r+0x29c>
1000864c:	194016c4 	addi	r5,r3,91
10008650:	2947883a 	add	r3,r5,r5
10008654:	003fbe06 	br	10008550 <__alt_data_end+0xf8008550>
10008658:	280bd0ba 	srai	r5,r5,2
1000865c:	00800044 	movi	r2,1
10008660:	39000117 	ldw	r4,4(r7)
10008664:	114a983a 	sll	r5,r2,r5
10008668:	1805883a 	mov	r2,r3
1000866c:	2908b03a 	or	r4,r5,r4
10008670:	39000115 	stw	r4,4(r7)
10008674:	003fc406 	br	10008588 <__alt_data_end+0xf8008588>
10008678:	49800515 	stw	r6,20(r9)
1000867c:	49800415 	stw	r6,16(r9)
10008680:	10c00054 	ori	r3,r2,1
10008684:	31000315 	stw	r4,12(r6)
10008688:	31000215 	stw	r4,8(r6)
1000868c:	30c00115 	stw	r3,4(r6)
10008690:	308d883a 	add	r6,r6,r2
10008694:	30800015 	stw	r2,0(r6)
10008698:	003fa006 	br	1000851c <__alt_data_end+0xf800851c>
1000869c:	01001504 	movi	r4,84
100086a0:	20c00436 	bltu	r4,r3,100086b4 <_free_r+0x2b4>
100086a4:	1006d33a 	srli	r3,r2,12
100086a8:	19401b84 	addi	r5,r3,110
100086ac:	2947883a 	add	r3,r5,r5
100086b0:	003fa706 	br	10008550 <__alt_data_end+0xf8008550>
100086b4:	01005504 	movi	r4,340
100086b8:	20c00436 	bltu	r4,r3,100086cc <_free_r+0x2cc>
100086bc:	1006d3fa 	srli	r3,r2,15
100086c0:	19401dc4 	addi	r5,r3,119
100086c4:	2947883a 	add	r3,r5,r5
100086c8:	003fa106 	br	10008550 <__alt_data_end+0xf8008550>
100086cc:	01015504 	movi	r4,1364
100086d0:	20c00436 	bltu	r4,r3,100086e4 <_free_r+0x2e4>
100086d4:	1006d4ba 	srli	r3,r2,18
100086d8:	19401f04 	addi	r5,r3,124
100086dc:	2947883a 	add	r3,r5,r5
100086e0:	003f9b06 	br	10008550 <__alt_data_end+0xf8008550>
100086e4:	00c03f04 	movi	r3,252
100086e8:	01401f84 	movi	r5,126
100086ec:	003f9806 	br	10008550 <__alt_data_end+0xf8008550>

100086f0 <_fwalk>:
100086f0:	defff804 	addi	sp,sp,-32
100086f4:	dd400515 	stw	r21,20(sp)
100086f8:	2540b804 	addi	r21,r4,736
100086fc:	dd800615 	stw	r22,24(sp)
10008700:	dd000415 	stw	r20,16(sp)
10008704:	dfc00715 	stw	ra,28(sp)
10008708:	dcc00315 	stw	r19,12(sp)
1000870c:	dc800215 	stw	r18,8(sp)
10008710:	dc400115 	stw	r17,4(sp)
10008714:	dc000015 	stw	r16,0(sp)
10008718:	2829883a 	mov	r20,r5
1000871c:	002d883a 	mov	r22,zero
10008720:	000829c0 	call	1000829c <__sfp_lock_acquire>
10008724:	a8001426 	beq	r21,zero,10008778 <_fwalk+0x88>
10008728:	04ffffc4 	movi	r19,-1
1000872c:	ac400117 	ldw	r17,4(r21)
10008730:	ac800217 	ldw	r18,8(r21)
10008734:	8c7fffc4 	addi	r17,r17,-1
10008738:	88000d16 	blt	r17,zero,10008770 <_fwalk+0x80>
1000873c:	94000304 	addi	r16,r18,12
10008740:	94800384 	addi	r18,r18,14
10008744:	80c0000f 	ldh	r3,0(r16)
10008748:	8c7fffc4 	addi	r17,r17,-1
1000874c:	813ffd04 	addi	r4,r16,-12
10008750:	18000426 	beq	r3,zero,10008764 <_fwalk+0x74>
10008754:	90c0000f 	ldh	r3,0(r18)
10008758:	1cc00226 	beq	r3,r19,10008764 <_fwalk+0x74>
1000875c:	a03ee83a 	callr	r20
10008760:	b0acb03a 	or	r22,r22,r2
10008764:	84001a04 	addi	r16,r16,104
10008768:	94801a04 	addi	r18,r18,104
1000876c:	8cfff51e 	bne	r17,r19,10008744 <__alt_data_end+0xf8008744>
10008770:	ad400017 	ldw	r21,0(r21)
10008774:	a83fed1e 	bne	r21,zero,1000872c <__alt_data_end+0xf800872c>
10008778:	00082a00 	call	100082a0 <__sfp_lock_release>
1000877c:	b005883a 	mov	r2,r22
10008780:	dfc00717 	ldw	ra,28(sp)
10008784:	dd800617 	ldw	r22,24(sp)
10008788:	dd400517 	ldw	r21,20(sp)
1000878c:	dd000417 	ldw	r20,16(sp)
10008790:	dcc00317 	ldw	r19,12(sp)
10008794:	dc800217 	ldw	r18,8(sp)
10008798:	dc400117 	ldw	r17,4(sp)
1000879c:	dc000017 	ldw	r16,0(sp)
100087a0:	dec00804 	addi	sp,sp,32
100087a4:	f800283a 	ret

100087a8 <_fwalk_reent>:
100087a8:	defff804 	addi	sp,sp,-32
100087ac:	dd400515 	stw	r21,20(sp)
100087b0:	2540b804 	addi	r21,r4,736
100087b4:	dd800615 	stw	r22,24(sp)
100087b8:	dd000415 	stw	r20,16(sp)
100087bc:	dcc00315 	stw	r19,12(sp)
100087c0:	dfc00715 	stw	ra,28(sp)
100087c4:	dc800215 	stw	r18,8(sp)
100087c8:	dc400115 	stw	r17,4(sp)
100087cc:	dc000015 	stw	r16,0(sp)
100087d0:	2027883a 	mov	r19,r4
100087d4:	2829883a 	mov	r20,r5
100087d8:	002d883a 	mov	r22,zero
100087dc:	000829c0 	call	1000829c <__sfp_lock_acquire>
100087e0:	a8001326 	beq	r21,zero,10008830 <_fwalk_reent+0x88>
100087e4:	04bfffc4 	movi	r18,-1
100087e8:	ac400117 	ldw	r17,4(r21)
100087ec:	ac000217 	ldw	r16,8(r21)
100087f0:	8c7fffc4 	addi	r17,r17,-1
100087f4:	88000c16 	blt	r17,zero,10008828 <_fwalk_reent+0x80>
100087f8:	84000304 	addi	r16,r16,12
100087fc:	80c0000f 	ldh	r3,0(r16)
10008800:	8c7fffc4 	addi	r17,r17,-1
10008804:	817ffd04 	addi	r5,r16,-12
10008808:	18000526 	beq	r3,zero,10008820 <_fwalk_reent+0x78>
1000880c:	80c0008f 	ldh	r3,2(r16)
10008810:	9809883a 	mov	r4,r19
10008814:	1c800226 	beq	r3,r18,10008820 <_fwalk_reent+0x78>
10008818:	a03ee83a 	callr	r20
1000881c:	b0acb03a 	or	r22,r22,r2
10008820:	84001a04 	addi	r16,r16,104
10008824:	8cbff51e 	bne	r17,r18,100087fc <__alt_data_end+0xf80087fc>
10008828:	ad400017 	ldw	r21,0(r21)
1000882c:	a83fee1e 	bne	r21,zero,100087e8 <__alt_data_end+0xf80087e8>
10008830:	00082a00 	call	100082a0 <__sfp_lock_release>
10008834:	b005883a 	mov	r2,r22
10008838:	dfc00717 	ldw	ra,28(sp)
1000883c:	dd800617 	ldw	r22,24(sp)
10008840:	dd400517 	ldw	r21,20(sp)
10008844:	dd000417 	ldw	r20,16(sp)
10008848:	dcc00317 	ldw	r19,12(sp)
1000884c:	dc800217 	ldw	r18,8(sp)
10008850:	dc400117 	ldw	r17,4(sp)
10008854:	dc000017 	ldw	r16,0(sp)
10008858:	dec00804 	addi	sp,sp,32
1000885c:	f800283a 	ret

10008860 <_setlocale_r>:
10008860:	30001b26 	beq	r6,zero,100088d0 <_setlocale_r+0x70>
10008864:	01440074 	movhi	r5,4097
10008868:	defffe04 	addi	sp,sp,-8
1000886c:	29449f04 	addi	r5,r5,4732
10008870:	3009883a 	mov	r4,r6
10008874:	dc000015 	stw	r16,0(sp)
10008878:	dfc00115 	stw	ra,4(sp)
1000887c:	3021883a 	mov	r16,r6
10008880:	000a8300 	call	1000a830 <strcmp>
10008884:	1000061e 	bne	r2,zero,100088a0 <_setlocale_r+0x40>
10008888:	00840074 	movhi	r2,4097
1000888c:	10849e04 	addi	r2,r2,4728
10008890:	dfc00117 	ldw	ra,4(sp)
10008894:	dc000017 	ldw	r16,0(sp)
10008898:	dec00204 	addi	sp,sp,8
1000889c:	f800283a 	ret
100088a0:	01440074 	movhi	r5,4097
100088a4:	29449e04 	addi	r5,r5,4728
100088a8:	8009883a 	mov	r4,r16
100088ac:	000a8300 	call	1000a830 <strcmp>
100088b0:	103ff526 	beq	r2,zero,10008888 <__alt_data_end+0xf8008888>
100088b4:	01440074 	movhi	r5,4097
100088b8:	29448904 	addi	r5,r5,4644
100088bc:	8009883a 	mov	r4,r16
100088c0:	000a8300 	call	1000a830 <strcmp>
100088c4:	103ff026 	beq	r2,zero,10008888 <__alt_data_end+0xf8008888>
100088c8:	0005883a 	mov	r2,zero
100088cc:	003ff006 	br	10008890 <__alt_data_end+0xf8008890>
100088d0:	00840074 	movhi	r2,4097
100088d4:	10849e04 	addi	r2,r2,4728
100088d8:	f800283a 	ret

100088dc <__locale_charset>:
100088dc:	00840074 	movhi	r2,4097
100088e0:	10861104 	addi	r2,r2,6212
100088e4:	f800283a 	ret

100088e8 <__locale_mb_cur_max>:
100088e8:	00840074 	movhi	r2,4097
100088ec:	108bad04 	addi	r2,r2,11956
100088f0:	10800017 	ldw	r2,0(r2)
100088f4:	f800283a 	ret

100088f8 <__locale_msgcharset>:
100088f8:	00840074 	movhi	r2,4097
100088fc:	10860904 	addi	r2,r2,6180
10008900:	f800283a 	ret

10008904 <__locale_cjk_lang>:
10008904:	0005883a 	mov	r2,zero
10008908:	f800283a 	ret

1000890c <_localeconv_r>:
1000890c:	00840074 	movhi	r2,4097
10008910:	10861904 	addi	r2,r2,6244
10008914:	f800283a 	ret

10008918 <setlocale>:
10008918:	00c40074 	movhi	r3,4097
1000891c:	18cbac04 	addi	r3,r3,11952
10008920:	2005883a 	mov	r2,r4
10008924:	19000017 	ldw	r4,0(r3)
10008928:	280d883a 	mov	r6,r5
1000892c:	100b883a 	mov	r5,r2
10008930:	00088601 	jmpi	10008860 <_setlocale_r>

10008934 <localeconv>:
10008934:	00840074 	movhi	r2,4097
10008938:	10861904 	addi	r2,r2,6244
1000893c:	f800283a 	ret

10008940 <__smakebuf_r>:
10008940:	2880030b 	ldhu	r2,12(r5)
10008944:	10c0008c 	andi	r3,r2,2
10008948:	1800401e 	bne	r3,zero,10008a4c <__smakebuf_r+0x10c>
1000894c:	deffec04 	addi	sp,sp,-80
10008950:	dc000f15 	stw	r16,60(sp)
10008954:	2821883a 	mov	r16,r5
10008958:	2940038f 	ldh	r5,14(r5)
1000895c:	dc401015 	stw	r17,64(sp)
10008960:	dfc01315 	stw	ra,76(sp)
10008964:	dcc01215 	stw	r19,72(sp)
10008968:	dc801115 	stw	r18,68(sp)
1000896c:	2023883a 	mov	r17,r4
10008970:	28001b16 	blt	r5,zero,100089e0 <__smakebuf_r+0xa0>
10008974:	d80d883a 	mov	r6,sp
10008978:	000c3400 	call	1000c340 <_fstat_r>
1000897c:	10001716 	blt	r2,zero,100089dc <__smakebuf_r+0x9c>
10008980:	d8800117 	ldw	r2,4(sp)
10008984:	00e00014 	movui	r3,32768
10008988:	10bc000c 	andi	r2,r2,61440
1000898c:	10c03726 	beq	r2,r3,10008a6c <__smakebuf_r+0x12c>
10008990:	80c0030b 	ldhu	r3,12(r16)
10008994:	18c20014 	ori	r3,r3,2048
10008998:	80c0030d 	sth	r3,12(r16)
1000899c:	00c80004 	movi	r3,8192
100089a0:	10c03c1e 	bne	r2,r3,10008a94 <__smakebuf_r+0x154>
100089a4:	8140038f 	ldh	r5,14(r16)
100089a8:	8809883a 	mov	r4,r17
100089ac:	000c83c0 	call	1000c83c <_isatty_r>
100089b0:	10004e26 	beq	r2,zero,10008aec <__smakebuf_r+0x1ac>
100089b4:	8080030b 	ldhu	r2,12(r16)
100089b8:	04c00044 	movi	r19,1
100089bc:	80c010c4 	addi	r3,r16,67
100089c0:	14c4b03a 	or	r2,r2,r19
100089c4:	8080030d 	sth	r2,12(r16)
100089c8:	80c00015 	stw	r3,0(r16)
100089cc:	80c00415 	stw	r3,16(r16)
100089d0:	84c00515 	stw	r19,20(r16)
100089d4:	04810004 	movi	r18,1024
100089d8:	00000706 	br	100089f8 <__smakebuf_r+0xb8>
100089dc:	8080030b 	ldhu	r2,12(r16)
100089e0:	10c0200c 	andi	r3,r2,128
100089e4:	18001f1e 	bne	r3,zero,10008a64 <__smakebuf_r+0x124>
100089e8:	04810004 	movi	r18,1024
100089ec:	10820014 	ori	r2,r2,2048
100089f0:	8080030d 	sth	r2,12(r16)
100089f4:	0027883a 	mov	r19,zero
100089f8:	8809883a 	mov	r4,r17
100089fc:	900b883a 	mov	r5,r18
10008a00:	0008af80 	call	10008af8 <_malloc_r>
10008a04:	10002e26 	beq	r2,zero,10008ac0 <__smakebuf_r+0x180>
10008a08:	80c0030b 	ldhu	r3,12(r16)
10008a0c:	01040034 	movhi	r4,4096
10008a10:	211fce04 	addi	r4,r4,32568
10008a14:	89000f15 	stw	r4,60(r17)
10008a18:	18c02014 	ori	r3,r3,128
10008a1c:	80c0030d 	sth	r3,12(r16)
10008a20:	80800015 	stw	r2,0(r16)
10008a24:	80800415 	stw	r2,16(r16)
10008a28:	84800515 	stw	r18,20(r16)
10008a2c:	98001c1e 	bne	r19,zero,10008aa0 <__smakebuf_r+0x160>
10008a30:	dfc01317 	ldw	ra,76(sp)
10008a34:	dcc01217 	ldw	r19,72(sp)
10008a38:	dc801117 	ldw	r18,68(sp)
10008a3c:	dc401017 	ldw	r17,64(sp)
10008a40:	dc000f17 	ldw	r16,60(sp)
10008a44:	dec01404 	addi	sp,sp,80
10008a48:	f800283a 	ret
10008a4c:	288010c4 	addi	r2,r5,67
10008a50:	28800015 	stw	r2,0(r5)
10008a54:	28800415 	stw	r2,16(r5)
10008a58:	00800044 	movi	r2,1
10008a5c:	28800515 	stw	r2,20(r5)
10008a60:	f800283a 	ret
10008a64:	04801004 	movi	r18,64
10008a68:	003fe006 	br	100089ec <__alt_data_end+0xf80089ec>
10008a6c:	81000a17 	ldw	r4,40(r16)
10008a70:	00c40074 	movhi	r3,4097
10008a74:	18e9f304 	addi	r3,r3,-22580
10008a78:	20ffc51e 	bne	r4,r3,10008990 <__alt_data_end+0xf8008990>
10008a7c:	80c0030b 	ldhu	r3,12(r16)
10008a80:	01010004 	movi	r4,1024
10008a84:	81001315 	stw	r4,76(r16)
10008a88:	1906b03a 	or	r3,r3,r4
10008a8c:	80c0030d 	sth	r3,12(r16)
10008a90:	003fc206 	br	1000899c <__alt_data_end+0xf800899c>
10008a94:	0027883a 	mov	r19,zero
10008a98:	04810004 	movi	r18,1024
10008a9c:	003fd606 	br	100089f8 <__alt_data_end+0xf80089f8>
10008aa0:	8140038f 	ldh	r5,14(r16)
10008aa4:	8809883a 	mov	r4,r17
10008aa8:	000c83c0 	call	1000c83c <_isatty_r>
10008aac:	103fe026 	beq	r2,zero,10008a30 <__alt_data_end+0xf8008a30>
10008ab0:	8080030b 	ldhu	r2,12(r16)
10008ab4:	10800054 	ori	r2,r2,1
10008ab8:	8080030d 	sth	r2,12(r16)
10008abc:	003fdc06 	br	10008a30 <__alt_data_end+0xf8008a30>
10008ac0:	8080030b 	ldhu	r2,12(r16)
10008ac4:	10c0800c 	andi	r3,r2,512
10008ac8:	183fd91e 	bne	r3,zero,10008a30 <__alt_data_end+0xf8008a30>
10008acc:	10800094 	ori	r2,r2,2
10008ad0:	80c010c4 	addi	r3,r16,67
10008ad4:	8080030d 	sth	r2,12(r16)
10008ad8:	00800044 	movi	r2,1
10008adc:	80c00015 	stw	r3,0(r16)
10008ae0:	80c00415 	stw	r3,16(r16)
10008ae4:	80800515 	stw	r2,20(r16)
10008ae8:	003fd106 	br	10008a30 <__alt_data_end+0xf8008a30>
10008aec:	04c00044 	movi	r19,1
10008af0:	04810004 	movi	r18,1024
10008af4:	003fc006 	br	100089f8 <__alt_data_end+0xf80089f8>

10008af8 <_malloc_r>:
10008af8:	defff504 	addi	sp,sp,-44
10008afc:	dc800315 	stw	r18,12(sp)
10008b00:	dfc00a15 	stw	ra,40(sp)
10008b04:	df000915 	stw	fp,36(sp)
10008b08:	ddc00815 	stw	r23,32(sp)
10008b0c:	dd800715 	stw	r22,28(sp)
10008b10:	dd400615 	stw	r21,24(sp)
10008b14:	dd000515 	stw	r20,20(sp)
10008b18:	dcc00415 	stw	r19,16(sp)
10008b1c:	dc400215 	stw	r17,8(sp)
10008b20:	dc000115 	stw	r16,4(sp)
10008b24:	288002c4 	addi	r2,r5,11
10008b28:	00c00584 	movi	r3,22
10008b2c:	2025883a 	mov	r18,r4
10008b30:	18802a2e 	bgeu	r3,r2,10008bdc <_malloc_r+0xe4>
10008b34:	047ffe04 	movi	r17,-8
10008b38:	1462703a 	and	r17,r2,r17
10008b3c:	88009e16 	blt	r17,zero,10008db8 <_malloc_r+0x2c0>
10008b40:	89409d36 	bltu	r17,r5,10008db8 <_malloc_r+0x2c0>
10008b44:	000ef740 	call	1000ef74 <__malloc_lock>
10008b48:	00807dc4 	movi	r2,503
10008b4c:	14402736 	bltu	r2,r17,10008bec <_malloc_r+0xf4>
10008b50:	8806d0fa 	srli	r3,r17,3
10008b54:	04c40074 	movhi	r19,4097
10008b58:	9cc62704 	addi	r19,r19,6300
10008b5c:	18c5883a 	add	r2,r3,r3
10008b60:	1085883a 	add	r2,r2,r2
10008b64:	1085883a 	add	r2,r2,r2
10008b68:	9885883a 	add	r2,r19,r2
10008b6c:	14000317 	ldw	r16,12(r2)
10008b70:	80814a26 	beq	r16,r2,1000909c <_malloc_r+0x5a4>
10008b74:	80c00117 	ldw	r3,4(r16)
10008b78:	81000317 	ldw	r4,12(r16)
10008b7c:	00bfff04 	movi	r2,-4
10008b80:	1884703a 	and	r2,r3,r2
10008b84:	81400217 	ldw	r5,8(r16)
10008b88:	8085883a 	add	r2,r16,r2
10008b8c:	10c00117 	ldw	r3,4(r2)
10008b90:	29000315 	stw	r4,12(r5)
10008b94:	21400215 	stw	r5,8(r4)
10008b98:	18c00054 	ori	r3,r3,1
10008b9c:	10c00115 	stw	r3,4(r2)
10008ba0:	9009883a 	mov	r4,r18
10008ba4:	000ef940 	call	1000ef94 <__malloc_unlock>
10008ba8:	80800204 	addi	r2,r16,8
10008bac:	dfc00a17 	ldw	ra,40(sp)
10008bb0:	df000917 	ldw	fp,36(sp)
10008bb4:	ddc00817 	ldw	r23,32(sp)
10008bb8:	dd800717 	ldw	r22,28(sp)
10008bbc:	dd400617 	ldw	r21,24(sp)
10008bc0:	dd000517 	ldw	r20,20(sp)
10008bc4:	dcc00417 	ldw	r19,16(sp)
10008bc8:	dc800317 	ldw	r18,12(sp)
10008bcc:	dc400217 	ldw	r17,8(sp)
10008bd0:	dc000117 	ldw	r16,4(sp)
10008bd4:	dec00b04 	addi	sp,sp,44
10008bd8:	f800283a 	ret
10008bdc:	04400404 	movi	r17,16
10008be0:	89407536 	bltu	r17,r5,10008db8 <_malloc_r+0x2c0>
10008be4:	000ef740 	call	1000ef74 <__malloc_lock>
10008be8:	003fd906 	br	10008b50 <__alt_data_end+0xf8008b50>
10008bec:	8806d27a 	srli	r3,r17,9
10008bf0:	18007526 	beq	r3,zero,10008dc8 <_malloc_r+0x2d0>
10008bf4:	00800104 	movi	r2,4
10008bf8:	10c0ef36 	bltu	r2,r3,10008fb8 <_malloc_r+0x4c0>
10008bfc:	8806d1ba 	srli	r3,r17,6
10008c00:	19c00e04 	addi	r7,r3,56
10008c04:	39cb883a 	add	r5,r7,r7
10008c08:	04c40074 	movhi	r19,4097
10008c0c:	294b883a 	add	r5,r5,r5
10008c10:	9cc62704 	addi	r19,r19,6300
10008c14:	294b883a 	add	r5,r5,r5
10008c18:	994b883a 	add	r5,r19,r5
10008c1c:	2c000317 	ldw	r16,12(r5)
10008c20:	2c000e26 	beq	r5,r16,10008c5c <_malloc_r+0x164>
10008c24:	80800117 	ldw	r2,4(r16)
10008c28:	01bfff04 	movi	r6,-4
10008c2c:	010003c4 	movi	r4,15
10008c30:	1184703a 	and	r2,r2,r6
10008c34:	1447c83a 	sub	r3,r2,r17
10008c38:	20c00716 	blt	r4,r3,10008c58 <_malloc_r+0x160>
10008c3c:	1800650e 	bge	r3,zero,10008dd4 <_malloc_r+0x2dc>
10008c40:	84000317 	ldw	r16,12(r16)
10008c44:	2c000526 	beq	r5,r16,10008c5c <_malloc_r+0x164>
10008c48:	80800117 	ldw	r2,4(r16)
10008c4c:	1184703a 	and	r2,r2,r6
10008c50:	1447c83a 	sub	r3,r2,r17
10008c54:	20fff90e 	bge	r4,r3,10008c3c <__alt_data_end+0xf8008c3c>
10008c58:	39ffffc4 	addi	r7,r7,-1
10008c5c:	38c00044 	addi	r3,r7,1
10008c60:	01840074 	movhi	r6,4097
10008c64:	9c000417 	ldw	r16,16(r19)
10008c68:	31862704 	addi	r6,r6,6300
10008c6c:	32400204 	addi	r9,r6,8
10008c70:	82410326 	beq	r16,r9,10009080 <_malloc_r+0x588>
10008c74:	81000117 	ldw	r4,4(r16)
10008c78:	00bfff04 	movi	r2,-4
10008c7c:	208e703a 	and	r7,r4,r2
10008c80:	3c45c83a 	sub	r2,r7,r17
10008c84:	010003c4 	movi	r4,15
10008c88:	2080ee16 	blt	r4,r2,10009044 <_malloc_r+0x54c>
10008c8c:	32400515 	stw	r9,20(r6)
10008c90:	32400415 	stw	r9,16(r6)
10008c94:	1000510e 	bge	r2,zero,10008ddc <_malloc_r+0x2e4>
10008c98:	00807fc4 	movi	r2,511
10008c9c:	11c0ce36 	bltu	r2,r7,10008fd8 <_malloc_r+0x4e0>
10008ca0:	3808d0fa 	srli	r4,r7,3
10008ca4:	01c00044 	movi	r7,1
10008ca8:	30800117 	ldw	r2,4(r6)
10008cac:	210b883a 	add	r5,r4,r4
10008cb0:	294b883a 	add	r5,r5,r5
10008cb4:	2009d0ba 	srai	r4,r4,2
10008cb8:	294b883a 	add	r5,r5,r5
10008cbc:	298b883a 	add	r5,r5,r6
10008cc0:	2a000217 	ldw	r8,8(r5)
10008cc4:	3908983a 	sll	r4,r7,r4
10008cc8:	81400315 	stw	r5,12(r16)
10008ccc:	82000215 	stw	r8,8(r16)
10008cd0:	2088b03a 	or	r4,r4,r2
10008cd4:	2c000215 	stw	r16,8(r5)
10008cd8:	31000115 	stw	r4,4(r6)
10008cdc:	44000315 	stw	r16,12(r8)
10008ce0:	1805d0ba 	srai	r2,r3,2
10008ce4:	01400044 	movi	r5,1
10008ce8:	288a983a 	sll	r5,r5,r2
10008cec:	21404336 	bltu	r4,r5,10008dfc <_malloc_r+0x304>
10008cf0:	2144703a 	and	r2,r4,r5
10008cf4:	10000a1e 	bne	r2,zero,10008d20 <_malloc_r+0x228>
10008cf8:	00bfff04 	movi	r2,-4
10008cfc:	294b883a 	add	r5,r5,r5
10008d00:	1886703a 	and	r3,r3,r2
10008d04:	2144703a 	and	r2,r4,r5
10008d08:	18c00104 	addi	r3,r3,4
10008d0c:	1000041e 	bne	r2,zero,10008d20 <_malloc_r+0x228>
10008d10:	294b883a 	add	r5,r5,r5
10008d14:	2144703a 	and	r2,r4,r5
10008d18:	18c00104 	addi	r3,r3,4
10008d1c:	103ffc26 	beq	r2,zero,10008d10 <__alt_data_end+0xf8008d10>
10008d20:	023fff04 	movi	r8,-4
10008d24:	01c003c4 	movi	r7,15
10008d28:	18c5883a 	add	r2,r3,r3
10008d2c:	1085883a 	add	r2,r2,r2
10008d30:	1085883a 	add	r2,r2,r2
10008d34:	9895883a 	add	r10,r19,r2
10008d38:	52c00304 	addi	r11,r10,12
10008d3c:	1819883a 	mov	r12,r3
10008d40:	5c000017 	ldw	r16,0(r11)
10008d44:	59bffd04 	addi	r6,r11,-12
10008d48:	8180041e 	bne	r16,r6,10008d5c <_malloc_r+0x264>
10008d4c:	0000ce06 	br	10009088 <_malloc_r+0x590>
10008d50:	2000d70e 	bge	r4,zero,100090b0 <_malloc_r+0x5b8>
10008d54:	84000317 	ldw	r16,12(r16)
10008d58:	8180cb26 	beq	r16,r6,10009088 <_malloc_r+0x590>
10008d5c:	80800117 	ldw	r2,4(r16)
10008d60:	1204703a 	and	r2,r2,r8
10008d64:	1449c83a 	sub	r4,r2,r17
10008d68:	393ff90e 	bge	r7,r4,10008d50 <__alt_data_end+0xf8008d50>
10008d6c:	80800317 	ldw	r2,12(r16)
10008d70:	80c00217 	ldw	r3,8(r16)
10008d74:	89400054 	ori	r5,r17,1
10008d78:	81400115 	stw	r5,4(r16)
10008d7c:	18800315 	stw	r2,12(r3)
10008d80:	10c00215 	stw	r3,8(r2)
10008d84:	8463883a 	add	r17,r16,r17
10008d88:	9c400515 	stw	r17,20(r19)
10008d8c:	9c400415 	stw	r17,16(r19)
10008d90:	20800054 	ori	r2,r4,1
10008d94:	88800115 	stw	r2,4(r17)
10008d98:	8a400315 	stw	r9,12(r17)
10008d9c:	8a400215 	stw	r9,8(r17)
10008da0:	8923883a 	add	r17,r17,r4
10008da4:	89000015 	stw	r4,0(r17)
10008da8:	9009883a 	mov	r4,r18
10008dac:	000ef940 	call	1000ef94 <__malloc_unlock>
10008db0:	80800204 	addi	r2,r16,8
10008db4:	003f7d06 	br	10008bac <__alt_data_end+0xf8008bac>
10008db8:	00800304 	movi	r2,12
10008dbc:	90800015 	stw	r2,0(r18)
10008dc0:	0005883a 	mov	r2,zero
10008dc4:	003f7906 	br	10008bac <__alt_data_end+0xf8008bac>
10008dc8:	01401f84 	movi	r5,126
10008dcc:	01c00fc4 	movi	r7,63
10008dd0:	003f8d06 	br	10008c08 <__alt_data_end+0xf8008c08>
10008dd4:	81000317 	ldw	r4,12(r16)
10008dd8:	003f6a06 	br	10008b84 <__alt_data_end+0xf8008b84>
10008ddc:	81c5883a 	add	r2,r16,r7
10008de0:	10c00117 	ldw	r3,4(r2)
10008de4:	9009883a 	mov	r4,r18
10008de8:	18c00054 	ori	r3,r3,1
10008dec:	10c00115 	stw	r3,4(r2)
10008df0:	000ef940 	call	1000ef94 <__malloc_unlock>
10008df4:	80800204 	addi	r2,r16,8
10008df8:	003f6c06 	br	10008bac <__alt_data_end+0xf8008bac>
10008dfc:	9c000217 	ldw	r16,8(r19)
10008e00:	00bfff04 	movi	r2,-4
10008e04:	85800117 	ldw	r22,4(r16)
10008e08:	b0ac703a 	and	r22,r22,r2
10008e0c:	b4400336 	bltu	r22,r17,10008e1c <_malloc_r+0x324>
10008e10:	b445c83a 	sub	r2,r22,r17
10008e14:	00c003c4 	movi	r3,15
10008e18:	18805d16 	blt	r3,r2,10008f90 <_malloc_r+0x498>
10008e1c:	05c40074 	movhi	r23,4097
10008e20:	00840074 	movhi	r2,4097
10008e24:	bdcbae04 	addi	r23,r23,11960
10008e28:	10928a04 	addi	r2,r2,18984
10008e2c:	15400017 	ldw	r21,0(r2)
10008e30:	b9000017 	ldw	r4,0(r23)
10008e34:	00ffffc4 	movi	r3,-1
10008e38:	858d883a 	add	r6,r16,r22
10008e3c:	8d6b883a 	add	r21,r17,r21
10008e40:	20c0e426 	beq	r4,r3,100091d4 <_malloc_r+0x6dc>
10008e44:	ad4403c4 	addi	r21,r21,4111
10008e48:	00fc0004 	movi	r3,-4096
10008e4c:	a8ea703a 	and	r21,r21,r3
10008e50:	9009883a 	mov	r4,r18
10008e54:	a80b883a 	mov	r5,r21
10008e58:	d9800015 	stw	r6,0(sp)
10008e5c:	000a6a00 	call	1000a6a0 <_sbrk_r>
10008e60:	00ffffc4 	movi	r3,-1
10008e64:	1029883a 	mov	r20,r2
10008e68:	d9800017 	ldw	r6,0(sp)
10008e6c:	10c0a426 	beq	r2,r3,10009100 <_malloc_r+0x608>
10008e70:	1180a236 	bltu	r2,r6,100090fc <_malloc_r+0x604>
10008e74:	07040074 	movhi	fp,4097
10008e78:	e7129304 	addi	fp,fp,19020
10008e7c:	e0c00017 	ldw	r3,0(fp)
10008e80:	a8c7883a 	add	r3,r21,r3
10008e84:	e0c00015 	stw	r3,0(fp)
10008e88:	3500da26 	beq	r6,r20,100091f4 <_malloc_r+0x6fc>
10008e8c:	b9000017 	ldw	r4,0(r23)
10008e90:	00bfffc4 	movi	r2,-1
10008e94:	2080e426 	beq	r4,r2,10009228 <_malloc_r+0x730>
10008e98:	a185c83a 	sub	r2,r20,r6
10008e9c:	1885883a 	add	r2,r3,r2
10008ea0:	e0800015 	stw	r2,0(fp)
10008ea4:	a0c001cc 	andi	r3,r20,7
10008ea8:	1800b526 	beq	r3,zero,10009180 <_malloc_r+0x688>
10008eac:	a0e9c83a 	sub	r20,r20,r3
10008eb0:	00840204 	movi	r2,4104
10008eb4:	a5000204 	addi	r20,r20,8
10008eb8:	10c7c83a 	sub	r3,r2,r3
10008ebc:	a545883a 	add	r2,r20,r21
10008ec0:	1083ffcc 	andi	r2,r2,4095
10008ec4:	18abc83a 	sub	r21,r3,r2
10008ec8:	9009883a 	mov	r4,r18
10008ecc:	a80b883a 	mov	r5,r21
10008ed0:	000a6a00 	call	1000a6a0 <_sbrk_r>
10008ed4:	00ffffc4 	movi	r3,-1
10008ed8:	10c0d026 	beq	r2,r3,1000921c <_malloc_r+0x724>
10008edc:	1507c83a 	sub	r3,r2,r20
10008ee0:	a8c7883a 	add	r3,r21,r3
10008ee4:	18c00054 	ori	r3,r3,1
10008ee8:	e0800017 	ldw	r2,0(fp)
10008eec:	9d000215 	stw	r20,8(r19)
10008ef0:	a0c00115 	stw	r3,4(r20)
10008ef4:	a887883a 	add	r3,r21,r2
10008ef8:	e0c00015 	stw	r3,0(fp)
10008efc:	84c00e26 	beq	r16,r19,10008f38 <_malloc_r+0x440>
10008f00:	018003c4 	movi	r6,15
10008f04:	3580a02e 	bgeu	r6,r22,10009188 <_malloc_r+0x690>
10008f08:	81400117 	ldw	r5,4(r16)
10008f0c:	013ffe04 	movi	r4,-8
10008f10:	b0bffd04 	addi	r2,r22,-12
10008f14:	1104703a 	and	r2,r2,r4
10008f18:	2900004c 	andi	r4,r5,1
10008f1c:	1108b03a 	or	r4,r2,r4
10008f20:	81000115 	stw	r4,4(r16)
10008f24:	01400144 	movi	r5,5
10008f28:	8089883a 	add	r4,r16,r2
10008f2c:	21400115 	stw	r5,4(r4)
10008f30:	21400215 	stw	r5,8(r4)
10008f34:	3080c036 	bltu	r6,r2,10009238 <_malloc_r+0x740>
10008f38:	00840074 	movhi	r2,4097
10008f3c:	10928904 	addi	r2,r2,18980
10008f40:	11000017 	ldw	r4,0(r2)
10008f44:	20c0012e 	bgeu	r4,r3,10008f4c <_malloc_r+0x454>
10008f48:	10c00015 	stw	r3,0(r2)
10008f4c:	00840074 	movhi	r2,4097
10008f50:	10928804 	addi	r2,r2,18976
10008f54:	11000017 	ldw	r4,0(r2)
10008f58:	9c000217 	ldw	r16,8(r19)
10008f5c:	20c0012e 	bgeu	r4,r3,10008f64 <_malloc_r+0x46c>
10008f60:	10c00015 	stw	r3,0(r2)
10008f64:	80c00117 	ldw	r3,4(r16)
10008f68:	00bfff04 	movi	r2,-4
10008f6c:	1886703a 	and	r3,r3,r2
10008f70:	1c45c83a 	sub	r2,r3,r17
10008f74:	1c400236 	bltu	r3,r17,10008f80 <_malloc_r+0x488>
10008f78:	00c003c4 	movi	r3,15
10008f7c:	18800416 	blt	r3,r2,10008f90 <_malloc_r+0x498>
10008f80:	9009883a 	mov	r4,r18
10008f84:	000ef940 	call	1000ef94 <__malloc_unlock>
10008f88:	0005883a 	mov	r2,zero
10008f8c:	003f0706 	br	10008bac <__alt_data_end+0xf8008bac>
10008f90:	88c00054 	ori	r3,r17,1
10008f94:	80c00115 	stw	r3,4(r16)
10008f98:	8463883a 	add	r17,r16,r17
10008f9c:	10800054 	ori	r2,r2,1
10008fa0:	9c400215 	stw	r17,8(r19)
10008fa4:	88800115 	stw	r2,4(r17)
10008fa8:	9009883a 	mov	r4,r18
10008fac:	000ef940 	call	1000ef94 <__malloc_unlock>
10008fb0:	80800204 	addi	r2,r16,8
10008fb4:	003efd06 	br	10008bac <__alt_data_end+0xf8008bac>
10008fb8:	00800504 	movi	r2,20
10008fbc:	10c0482e 	bgeu	r2,r3,100090e0 <_malloc_r+0x5e8>
10008fc0:	00801504 	movi	r2,84
10008fc4:	10c06836 	bltu	r2,r3,10009168 <_malloc_r+0x670>
10008fc8:	8806d33a 	srli	r3,r17,12
10008fcc:	19c01b84 	addi	r7,r3,110
10008fd0:	39cb883a 	add	r5,r7,r7
10008fd4:	003f0c06 	br	10008c08 <__alt_data_end+0xf8008c08>
10008fd8:	3804d27a 	srli	r2,r7,9
10008fdc:	01000104 	movi	r4,4
10008fe0:	2080422e 	bgeu	r4,r2,100090ec <_malloc_r+0x5f4>
10008fe4:	01000504 	movi	r4,20
10008fe8:	20807c36 	bltu	r4,r2,100091dc <_malloc_r+0x6e4>
10008fec:	110016c4 	addi	r4,r2,91
10008ff0:	210b883a 	add	r5,r4,r4
10008ff4:	294b883a 	add	r5,r5,r5
10008ff8:	294b883a 	add	r5,r5,r5
10008ffc:	994b883a 	add	r5,r19,r5
10009000:	28800217 	ldw	r2,8(r5)
10009004:	02040074 	movhi	r8,4097
10009008:	42062704 	addi	r8,r8,6300
1000900c:	11406326 	beq	r2,r5,1000919c <_malloc_r+0x6a4>
10009010:	01bfff04 	movi	r6,-4
10009014:	11000117 	ldw	r4,4(r2)
10009018:	2188703a 	and	r4,r4,r6
1000901c:	3900022e 	bgeu	r7,r4,10009028 <_malloc_r+0x530>
10009020:	10800217 	ldw	r2,8(r2)
10009024:	28bffb1e 	bne	r5,r2,10009014 <__alt_data_end+0xf8009014>
10009028:	11800317 	ldw	r6,12(r2)
1000902c:	99000117 	ldw	r4,4(r19)
10009030:	81800315 	stw	r6,12(r16)
10009034:	80800215 	stw	r2,8(r16)
10009038:	34000215 	stw	r16,8(r6)
1000903c:	14000315 	stw	r16,12(r2)
10009040:	003f2706 	br	10008ce0 <__alt_data_end+0xf8008ce0>
10009044:	88c00054 	ori	r3,r17,1
10009048:	80c00115 	stw	r3,4(r16)
1000904c:	8463883a 	add	r17,r16,r17
10009050:	34400515 	stw	r17,20(r6)
10009054:	34400415 	stw	r17,16(r6)
10009058:	10c00054 	ori	r3,r2,1
1000905c:	8a400315 	stw	r9,12(r17)
10009060:	8a400215 	stw	r9,8(r17)
10009064:	88c00115 	stw	r3,4(r17)
10009068:	88a3883a 	add	r17,r17,r2
1000906c:	88800015 	stw	r2,0(r17)
10009070:	9009883a 	mov	r4,r18
10009074:	000ef940 	call	1000ef94 <__malloc_unlock>
10009078:	80800204 	addi	r2,r16,8
1000907c:	003ecb06 	br	10008bac <__alt_data_end+0xf8008bac>
10009080:	31000117 	ldw	r4,4(r6)
10009084:	003f1606 	br	10008ce0 <__alt_data_end+0xf8008ce0>
10009088:	63000044 	addi	r12,r12,1
1000908c:	608000cc 	andi	r2,r12,3
10009090:	5ac00204 	addi	r11,r11,8
10009094:	103f2a1e 	bne	r2,zero,10008d40 <__alt_data_end+0xf8008d40>
10009098:	00002106 	br	10009120 <_malloc_r+0x628>
1000909c:	80800204 	addi	r2,r16,8
100090a0:	84000517 	ldw	r16,20(r16)
100090a4:	143eb31e 	bne	r2,r16,10008b74 <__alt_data_end+0xf8008b74>
100090a8:	18c00084 	addi	r3,r3,2
100090ac:	003eec06 	br	10008c60 <__alt_data_end+0xf8008c60>
100090b0:	8085883a 	add	r2,r16,r2
100090b4:	10c00117 	ldw	r3,4(r2)
100090b8:	81000317 	ldw	r4,12(r16)
100090bc:	81400217 	ldw	r5,8(r16)
100090c0:	18c00054 	ori	r3,r3,1
100090c4:	10c00115 	stw	r3,4(r2)
100090c8:	29000315 	stw	r4,12(r5)
100090cc:	21400215 	stw	r5,8(r4)
100090d0:	9009883a 	mov	r4,r18
100090d4:	000ef940 	call	1000ef94 <__malloc_unlock>
100090d8:	80800204 	addi	r2,r16,8
100090dc:	003eb306 	br	10008bac <__alt_data_end+0xf8008bac>
100090e0:	19c016c4 	addi	r7,r3,91
100090e4:	39cb883a 	add	r5,r7,r7
100090e8:	003ec706 	br	10008c08 <__alt_data_end+0xf8008c08>
100090ec:	3804d1ba 	srli	r2,r7,6
100090f0:	11000e04 	addi	r4,r2,56
100090f4:	210b883a 	add	r5,r4,r4
100090f8:	003fbe06 	br	10008ff4 <__alt_data_end+0xf8008ff4>
100090fc:	84ff5d26 	beq	r16,r19,10008e74 <__alt_data_end+0xf8008e74>
10009100:	9c000217 	ldw	r16,8(r19)
10009104:	00bfff04 	movi	r2,-4
10009108:	80c00117 	ldw	r3,4(r16)
1000910c:	1886703a 	and	r3,r3,r2
10009110:	003f9706 	br	10008f70 <__alt_data_end+0xf8008f70>
10009114:	52800017 	ldw	r10,0(r10)
10009118:	18ffffc4 	addi	r3,r3,-1
1000911c:	50805c1e 	bne	r10,r2,10009290 <_malloc_r+0x798>
10009120:	190000cc 	andi	r4,r3,3
10009124:	50bffe04 	addi	r2,r10,-8
10009128:	203ffa1e 	bne	r4,zero,10009114 <__alt_data_end+0xf8009114>
1000912c:	98800117 	ldw	r2,4(r19)
10009130:	0146303a 	nor	r3,zero,r5
10009134:	1884703a 	and	r2,r3,r2
10009138:	98800115 	stw	r2,4(r19)
1000913c:	294b883a 	add	r5,r5,r5
10009140:	117f2e36 	bltu	r2,r5,10008dfc <__alt_data_end+0xf8008dfc>
10009144:	283f2d26 	beq	r5,zero,10008dfc <__alt_data_end+0xf8008dfc>
10009148:	1146703a 	and	r3,r2,r5
1000914c:	1800521e 	bne	r3,zero,10009298 <_malloc_r+0x7a0>
10009150:	6007883a 	mov	r3,r12
10009154:	294b883a 	add	r5,r5,r5
10009158:	1148703a 	and	r4,r2,r5
1000915c:	18c00104 	addi	r3,r3,4
10009160:	203ffc26 	beq	r4,zero,10009154 <__alt_data_end+0xf8009154>
10009164:	003ef006 	br	10008d28 <__alt_data_end+0xf8008d28>
10009168:	00805504 	movi	r2,340
1000916c:	10c01336 	bltu	r2,r3,100091bc <_malloc_r+0x6c4>
10009170:	8806d3fa 	srli	r3,r17,15
10009174:	19c01dc4 	addi	r7,r3,119
10009178:	39cb883a 	add	r5,r7,r7
1000917c:	003ea206 	br	10008c08 <__alt_data_end+0xf8008c08>
10009180:	00c40004 	movi	r3,4096
10009184:	003f4d06 	br	10008ebc <__alt_data_end+0xf8008ebc>
10009188:	00800044 	movi	r2,1
1000918c:	a0800115 	stw	r2,4(r20)
10009190:	a021883a 	mov	r16,r20
10009194:	0007883a 	mov	r3,zero
10009198:	003f7506 	br	10008f70 <__alt_data_end+0xf8008f70>
1000919c:	200bd0ba 	srai	r5,r4,2
100091a0:	01800044 	movi	r6,1
100091a4:	41000117 	ldw	r4,4(r8)
100091a8:	314a983a 	sll	r5,r6,r5
100091ac:	100d883a 	mov	r6,r2
100091b0:	2908b03a 	or	r4,r5,r4
100091b4:	41000115 	stw	r4,4(r8)
100091b8:	003f9d06 	br	10009030 <__alt_data_end+0xf8009030>
100091bc:	00815504 	movi	r2,1364
100091c0:	10c01336 	bltu	r2,r3,10009210 <_malloc_r+0x718>
100091c4:	8806d4ba 	srli	r3,r17,18
100091c8:	19c01f04 	addi	r7,r3,124
100091cc:	39cb883a 	add	r5,r7,r7
100091d0:	003e8d06 	br	10008c08 <__alt_data_end+0xf8008c08>
100091d4:	ad400404 	addi	r21,r21,16
100091d8:	003f1d06 	br	10008e50 <__alt_data_end+0xf8008e50>
100091dc:	01001504 	movi	r4,84
100091e0:	20801c36 	bltu	r4,r2,10009254 <_malloc_r+0x75c>
100091e4:	3804d33a 	srli	r2,r7,12
100091e8:	11001b84 	addi	r4,r2,110
100091ec:	210b883a 	add	r5,r4,r4
100091f0:	003f8006 	br	10008ff4 <__alt_data_end+0xf8008ff4>
100091f4:	3083ffcc 	andi	r2,r6,4095
100091f8:	103f241e 	bne	r2,zero,10008e8c <__alt_data_end+0xf8008e8c>
100091fc:	99000217 	ldw	r4,8(r19)
10009200:	ad85883a 	add	r2,r21,r22
10009204:	10800054 	ori	r2,r2,1
10009208:	20800115 	stw	r2,4(r4)
1000920c:	003f4a06 	br	10008f38 <__alt_data_end+0xf8008f38>
10009210:	01403f04 	movi	r5,252
10009214:	01c01f84 	movi	r7,126
10009218:	003e7b06 	br	10008c08 <__alt_data_end+0xf8008c08>
1000921c:	00c00044 	movi	r3,1
10009220:	002b883a 	mov	r21,zero
10009224:	003f3006 	br	10008ee8 <__alt_data_end+0xf8008ee8>
10009228:	00840074 	movhi	r2,4097
1000922c:	108bae04 	addi	r2,r2,11960
10009230:	15000015 	stw	r20,0(r2)
10009234:	003f1b06 	br	10008ea4 <__alt_data_end+0xf8008ea4>
10009238:	9009883a 	mov	r4,r18
1000923c:	81400204 	addi	r5,r16,8
10009240:	00084000 	call	10008400 <_free_r>
10009244:	00840074 	movhi	r2,4097
10009248:	10929304 	addi	r2,r2,19020
1000924c:	10c00017 	ldw	r3,0(r2)
10009250:	003f3906 	br	10008f38 <__alt_data_end+0xf8008f38>
10009254:	01005504 	movi	r4,340
10009258:	20800436 	bltu	r4,r2,1000926c <_malloc_r+0x774>
1000925c:	3804d3fa 	srli	r2,r7,15
10009260:	11001dc4 	addi	r4,r2,119
10009264:	210b883a 	add	r5,r4,r4
10009268:	003f6206 	br	10008ff4 <__alt_data_end+0xf8008ff4>
1000926c:	01015504 	movi	r4,1364
10009270:	20800436 	bltu	r4,r2,10009284 <_malloc_r+0x78c>
10009274:	3804d4ba 	srli	r2,r7,18
10009278:	11001f04 	addi	r4,r2,124
1000927c:	210b883a 	add	r5,r4,r4
10009280:	003f5c06 	br	10008ff4 <__alt_data_end+0xf8008ff4>
10009284:	01403f04 	movi	r5,252
10009288:	01001f84 	movi	r4,126
1000928c:	003f5906 	br	10008ff4 <__alt_data_end+0xf8008ff4>
10009290:	98800117 	ldw	r2,4(r19)
10009294:	003fa906 	br	1000913c <__alt_data_end+0xf800913c>
10009298:	6007883a 	mov	r3,r12
1000929c:	003ea206 	br	10008d28 <__alt_data_end+0xf8008d28>

100092a0 <memchr>:
100092a0:	208000cc 	andi	r2,r4,3
100092a4:	280f883a 	mov	r7,r5
100092a8:	10003526 	beq	r2,zero,10009380 <memchr+0xe0>
100092ac:	30bfffc4 	addi	r2,r6,-1
100092b0:	30001b26 	beq	r6,zero,10009320 <memchr+0x80>
100092b4:	21800003 	ldbu	r6,0(r4)
100092b8:	28c03fcc 	andi	r3,r5,255
100092bc:	30c01a26 	beq	r6,r3,10009328 <memchr+0x88>
100092c0:	180d883a 	mov	r6,r3
100092c4:	00000406 	br	100092d8 <memchr+0x38>
100092c8:	10001526 	beq	r2,zero,10009320 <memchr+0x80>
100092cc:	20c00003 	ldbu	r3,0(r4)
100092d0:	10bfffc4 	addi	r2,r2,-1
100092d4:	19801426 	beq	r3,r6,10009328 <memchr+0x88>
100092d8:	21000044 	addi	r4,r4,1
100092dc:	20c000cc 	andi	r3,r4,3
100092e0:	183ff91e 	bne	r3,zero,100092c8 <__alt_data_end+0xf80092c8>
100092e4:	024000c4 	movi	r9,3
100092e8:	48801136 	bltu	r9,r2,10009330 <memchr+0x90>
100092ec:	10000c26 	beq	r2,zero,10009320 <memchr+0x80>
100092f0:	20c00003 	ldbu	r3,0(r4)
100092f4:	29403fcc 	andi	r5,r5,255
100092f8:	19400b26 	beq	r3,r5,10009328 <memchr+0x88>
100092fc:	20c00044 	addi	r3,r4,1
10009300:	2085883a 	add	r2,r4,r2
10009304:	39803fcc 	andi	r6,r7,255
10009308:	00000306 	br	10009318 <memchr+0x78>
1000930c:	18c00044 	addi	r3,r3,1
10009310:	197fffc3 	ldbu	r5,-1(r3)
10009314:	29800426 	beq	r5,r6,10009328 <memchr+0x88>
10009318:	1809883a 	mov	r4,r3
1000931c:	18bffb1e 	bne	r3,r2,1000930c <__alt_data_end+0xf800930c>
10009320:	0005883a 	mov	r2,zero
10009324:	f800283a 	ret
10009328:	2005883a 	mov	r2,r4
1000932c:	f800283a 	ret
10009330:	28c03fcc 	andi	r3,r5,255
10009334:	1810923a 	slli	r8,r3,8
10009338:	02ffbff4 	movhi	r11,65279
1000933c:	02a02074 	movhi	r10,32897
10009340:	40c6b03a 	or	r3,r8,r3
10009344:	1810943a 	slli	r8,r3,16
10009348:	5affbfc4 	addi	r11,r11,-257
1000934c:	52a02004 	addi	r10,r10,-32640
10009350:	40d0b03a 	or	r8,r8,r3
10009354:	20c00017 	ldw	r3,0(r4)
10009358:	40c6f03a 	xor	r3,r8,r3
1000935c:	1acd883a 	add	r6,r3,r11
10009360:	00c6303a 	nor	r3,zero,r3
10009364:	30c6703a 	and	r3,r6,r3
10009368:	1a86703a 	and	r3,r3,r10
1000936c:	183fdf1e 	bne	r3,zero,100092ec <__alt_data_end+0xf80092ec>
10009370:	10bfff04 	addi	r2,r2,-4
10009374:	21000104 	addi	r4,r4,4
10009378:	48bff636 	bltu	r9,r2,10009354 <__alt_data_end+0xf8009354>
1000937c:	003fdb06 	br	100092ec <__alt_data_end+0xf80092ec>
10009380:	3005883a 	mov	r2,r6
10009384:	003fd706 	br	100092e4 <__alt_data_end+0xf80092e4>

10009388 <memcpy>:
10009388:	deffff04 	addi	sp,sp,-4
1000938c:	dc000015 	stw	r16,0(sp)
10009390:	00c003c4 	movi	r3,15
10009394:	2005883a 	mov	r2,r4
10009398:	1980432e 	bgeu	r3,r6,100094a8 <memcpy+0x120>
1000939c:	2146b03a 	or	r3,r4,r5
100093a0:	18c000cc 	andi	r3,r3,3
100093a4:	1800421e 	bne	r3,zero,100094b0 <memcpy+0x128>
100093a8:	343ffc04 	addi	r16,r6,-16
100093ac:	8020d13a 	srli	r16,r16,4
100093b0:	28c00104 	addi	r3,r5,4
100093b4:	23400104 	addi	r13,r4,4
100093b8:	801e913a 	slli	r15,r16,4
100093bc:	2b000204 	addi	r12,r5,8
100093c0:	22c00204 	addi	r11,r4,8
100093c4:	7bc00504 	addi	r15,r15,20
100093c8:	2a800304 	addi	r10,r5,12
100093cc:	22400304 	addi	r9,r4,12
100093d0:	2bdf883a 	add	r15,r5,r15
100093d4:	2811883a 	mov	r8,r5
100093d8:	200f883a 	mov	r7,r4
100093dc:	41000017 	ldw	r4,0(r8)
100093e0:	39c00404 	addi	r7,r7,16
100093e4:	18c00404 	addi	r3,r3,16
100093e8:	393ffc15 	stw	r4,-16(r7)
100093ec:	1bbffc17 	ldw	r14,-16(r3)
100093f0:	6b400404 	addi	r13,r13,16
100093f4:	5ac00404 	addi	r11,r11,16
100093f8:	6bbffc15 	stw	r14,-16(r13)
100093fc:	63800017 	ldw	r14,0(r12)
10009400:	4a400404 	addi	r9,r9,16
10009404:	42000404 	addi	r8,r8,16
10009408:	5bbffc15 	stw	r14,-16(r11)
1000940c:	53800017 	ldw	r14,0(r10)
10009410:	63000404 	addi	r12,r12,16
10009414:	52800404 	addi	r10,r10,16
10009418:	4bbffc15 	stw	r14,-16(r9)
1000941c:	1bffef1e 	bne	r3,r15,100093dc <__alt_data_end+0xf80093dc>
10009420:	81c00044 	addi	r7,r16,1
10009424:	380e913a 	slli	r7,r7,4
10009428:	310003cc 	andi	r4,r6,15
1000942c:	02c000c4 	movi	r11,3
10009430:	11c7883a 	add	r3,r2,r7
10009434:	29cb883a 	add	r5,r5,r7
10009438:	59001f2e 	bgeu	r11,r4,100094b8 <memcpy+0x130>
1000943c:	1813883a 	mov	r9,r3
10009440:	2811883a 	mov	r8,r5
10009444:	200f883a 	mov	r7,r4
10009448:	42800017 	ldw	r10,0(r8)
1000944c:	4a400104 	addi	r9,r9,4
10009450:	39ffff04 	addi	r7,r7,-4
10009454:	4abfff15 	stw	r10,-4(r9)
10009458:	42000104 	addi	r8,r8,4
1000945c:	59fffa36 	bltu	r11,r7,10009448 <__alt_data_end+0xf8009448>
10009460:	213fff04 	addi	r4,r4,-4
10009464:	2008d0ba 	srli	r4,r4,2
10009468:	318000cc 	andi	r6,r6,3
1000946c:	21000044 	addi	r4,r4,1
10009470:	2109883a 	add	r4,r4,r4
10009474:	2109883a 	add	r4,r4,r4
10009478:	1907883a 	add	r3,r3,r4
1000947c:	290b883a 	add	r5,r5,r4
10009480:	30000626 	beq	r6,zero,1000949c <memcpy+0x114>
10009484:	198d883a 	add	r6,r3,r6
10009488:	29c00003 	ldbu	r7,0(r5)
1000948c:	18c00044 	addi	r3,r3,1
10009490:	29400044 	addi	r5,r5,1
10009494:	19ffffc5 	stb	r7,-1(r3)
10009498:	19bffb1e 	bne	r3,r6,10009488 <__alt_data_end+0xf8009488>
1000949c:	dc000017 	ldw	r16,0(sp)
100094a0:	dec00104 	addi	sp,sp,4
100094a4:	f800283a 	ret
100094a8:	2007883a 	mov	r3,r4
100094ac:	003ff406 	br	10009480 <__alt_data_end+0xf8009480>
100094b0:	2007883a 	mov	r3,r4
100094b4:	003ff306 	br	10009484 <__alt_data_end+0xf8009484>
100094b8:	200d883a 	mov	r6,r4
100094bc:	003ff006 	br	10009480 <__alt_data_end+0xf8009480>

100094c0 <memset>:
100094c0:	20c000cc 	andi	r3,r4,3
100094c4:	2005883a 	mov	r2,r4
100094c8:	18004326 	beq	r3,zero,100095d8 <memset+0x118>
100094cc:	31ffffc4 	addi	r7,r6,-1
100094d0:	30004026 	beq	r6,zero,100095d4 <memset+0x114>
100094d4:	2813883a 	mov	r9,r5
100094d8:	200d883a 	mov	r6,r4
100094dc:	2007883a 	mov	r3,r4
100094e0:	00000406 	br	100094f4 <memset+0x34>
100094e4:	3a3fffc4 	addi	r8,r7,-1
100094e8:	31800044 	addi	r6,r6,1
100094ec:	38003926 	beq	r7,zero,100095d4 <memset+0x114>
100094f0:	400f883a 	mov	r7,r8
100094f4:	18c00044 	addi	r3,r3,1
100094f8:	32400005 	stb	r9,0(r6)
100094fc:	1a0000cc 	andi	r8,r3,3
10009500:	403ff81e 	bne	r8,zero,100094e4 <__alt_data_end+0xf80094e4>
10009504:	010000c4 	movi	r4,3
10009508:	21c02d2e 	bgeu	r4,r7,100095c0 <memset+0x100>
1000950c:	29803fcc 	andi	r6,r5,255
10009510:	3008923a 	slli	r4,r6,8
10009514:	218cb03a 	or	r6,r4,r6
10009518:	3008943a 	slli	r4,r6,16
1000951c:	218cb03a 	or	r6,r4,r6
10009520:	010003c4 	movi	r4,15
10009524:	21c0182e 	bgeu	r4,r7,10009588 <memset+0xc8>
10009528:	3b3ffc04 	addi	r12,r7,-16
1000952c:	6018d13a 	srli	r12,r12,4
10009530:	1a000104 	addi	r8,r3,4
10009534:	1ac00204 	addi	r11,r3,8
10009538:	6008913a 	slli	r4,r12,4
1000953c:	1a800304 	addi	r10,r3,12
10009540:	1813883a 	mov	r9,r3
10009544:	21000504 	addi	r4,r4,20
10009548:	1909883a 	add	r4,r3,r4
1000954c:	49800015 	stw	r6,0(r9)
10009550:	41800015 	stw	r6,0(r8)
10009554:	59800015 	stw	r6,0(r11)
10009558:	51800015 	stw	r6,0(r10)
1000955c:	42000404 	addi	r8,r8,16
10009560:	4a400404 	addi	r9,r9,16
10009564:	5ac00404 	addi	r11,r11,16
10009568:	52800404 	addi	r10,r10,16
1000956c:	413ff71e 	bne	r8,r4,1000954c <__alt_data_end+0xf800954c>
10009570:	63000044 	addi	r12,r12,1
10009574:	6018913a 	slli	r12,r12,4
10009578:	39c003cc 	andi	r7,r7,15
1000957c:	010000c4 	movi	r4,3
10009580:	1b07883a 	add	r3,r3,r12
10009584:	21c00e2e 	bgeu	r4,r7,100095c0 <memset+0x100>
10009588:	1813883a 	mov	r9,r3
1000958c:	3811883a 	mov	r8,r7
10009590:	010000c4 	movi	r4,3
10009594:	49800015 	stw	r6,0(r9)
10009598:	423fff04 	addi	r8,r8,-4
1000959c:	4a400104 	addi	r9,r9,4
100095a0:	223ffc36 	bltu	r4,r8,10009594 <__alt_data_end+0xf8009594>
100095a4:	393fff04 	addi	r4,r7,-4
100095a8:	2008d0ba 	srli	r4,r4,2
100095ac:	39c000cc 	andi	r7,r7,3
100095b0:	21000044 	addi	r4,r4,1
100095b4:	2109883a 	add	r4,r4,r4
100095b8:	2109883a 	add	r4,r4,r4
100095bc:	1907883a 	add	r3,r3,r4
100095c0:	38000426 	beq	r7,zero,100095d4 <memset+0x114>
100095c4:	19cf883a 	add	r7,r3,r7
100095c8:	19400005 	stb	r5,0(r3)
100095cc:	18c00044 	addi	r3,r3,1
100095d0:	19fffd1e 	bne	r3,r7,100095c8 <__alt_data_end+0xf80095c8>
100095d4:	f800283a 	ret
100095d8:	2007883a 	mov	r3,r4
100095dc:	300f883a 	mov	r7,r6
100095e0:	003fc806 	br	10009504 <__alt_data_end+0xf8009504>

100095e4 <_Balloc>:
100095e4:	20801317 	ldw	r2,76(r4)
100095e8:	defffc04 	addi	sp,sp,-16
100095ec:	dc400115 	stw	r17,4(sp)
100095f0:	dc000015 	stw	r16,0(sp)
100095f4:	dfc00315 	stw	ra,12(sp)
100095f8:	dc800215 	stw	r18,8(sp)
100095fc:	2023883a 	mov	r17,r4
10009600:	2821883a 	mov	r16,r5
10009604:	10000f26 	beq	r2,zero,10009644 <_Balloc+0x60>
10009608:	8407883a 	add	r3,r16,r16
1000960c:	18c7883a 	add	r3,r3,r3
10009610:	10c7883a 	add	r3,r2,r3
10009614:	18800017 	ldw	r2,0(r3)
10009618:	10001126 	beq	r2,zero,10009660 <_Balloc+0x7c>
1000961c:	11000017 	ldw	r4,0(r2)
10009620:	19000015 	stw	r4,0(r3)
10009624:	10000415 	stw	zero,16(r2)
10009628:	10000315 	stw	zero,12(r2)
1000962c:	dfc00317 	ldw	ra,12(sp)
10009630:	dc800217 	ldw	r18,8(sp)
10009634:	dc400117 	ldw	r17,4(sp)
10009638:	dc000017 	ldw	r16,0(sp)
1000963c:	dec00404 	addi	sp,sp,16
10009640:	f800283a 	ret
10009644:	01400104 	movi	r5,4
10009648:	01800844 	movi	r6,33
1000964c:	000bf780 	call	1000bf78 <_calloc_r>
10009650:	88801315 	stw	r2,76(r17)
10009654:	103fec1e 	bne	r2,zero,10009608 <__alt_data_end+0xf8009608>
10009658:	0005883a 	mov	r2,zero
1000965c:	003ff306 	br	1000962c <__alt_data_end+0xf800962c>
10009660:	01400044 	movi	r5,1
10009664:	2c24983a 	sll	r18,r5,r16
10009668:	8809883a 	mov	r4,r17
1000966c:	91800144 	addi	r6,r18,5
10009670:	318d883a 	add	r6,r6,r6
10009674:	318d883a 	add	r6,r6,r6
10009678:	000bf780 	call	1000bf78 <_calloc_r>
1000967c:	103ff626 	beq	r2,zero,10009658 <__alt_data_end+0xf8009658>
10009680:	14000115 	stw	r16,4(r2)
10009684:	14800215 	stw	r18,8(r2)
10009688:	003fe606 	br	10009624 <__alt_data_end+0xf8009624>

1000968c <_Bfree>:
1000968c:	28000826 	beq	r5,zero,100096b0 <_Bfree+0x24>
10009690:	28c00117 	ldw	r3,4(r5)
10009694:	20801317 	ldw	r2,76(r4)
10009698:	18c7883a 	add	r3,r3,r3
1000969c:	18c7883a 	add	r3,r3,r3
100096a0:	10c5883a 	add	r2,r2,r3
100096a4:	10c00017 	ldw	r3,0(r2)
100096a8:	28c00015 	stw	r3,0(r5)
100096ac:	11400015 	stw	r5,0(r2)
100096b0:	f800283a 	ret

100096b4 <__multadd>:
100096b4:	defff704 	addi	sp,sp,-36
100096b8:	dc800215 	stw	r18,8(sp)
100096bc:	2c800417 	ldw	r18,16(r5)
100096c0:	ddc00715 	stw	r23,28(sp)
100096c4:	dd800615 	stw	r22,24(sp)
100096c8:	dd000415 	stw	r20,16(sp)
100096cc:	dcc00315 	stw	r19,12(sp)
100096d0:	dc400115 	stw	r17,4(sp)
100096d4:	dc000015 	stw	r16,0(sp)
100096d8:	dfc00815 	stw	ra,32(sp)
100096dc:	dd400515 	stw	r21,20(sp)
100096e0:	2827883a 	mov	r19,r5
100096e4:	2029883a 	mov	r20,r4
100096e8:	3023883a 	mov	r17,r6
100096ec:	3821883a 	mov	r16,r7
100096f0:	2d800504 	addi	r22,r5,20
100096f4:	002f883a 	mov	r23,zero
100096f8:	b5400017 	ldw	r21,0(r22)
100096fc:	880b883a 	mov	r5,r17
10009700:	bdc00044 	addi	r23,r23,1
10009704:	a93fffcc 	andi	r4,r21,65535
10009708:	0002cfc0 	call	10002cfc <__mulsi3>
1000970c:	1421883a 	add	r16,r2,r16
10009710:	a808d43a 	srli	r4,r21,16
10009714:	802ad43a 	srli	r21,r16,16
10009718:	880b883a 	mov	r5,r17
1000971c:	0002cfc0 	call	10002cfc <__mulsi3>
10009720:	a88f883a 	add	r7,r21,r2
10009724:	3804943a 	slli	r2,r7,16
10009728:	80ffffcc 	andi	r3,r16,65535
1000972c:	b5800104 	addi	r22,r22,4
10009730:	10c7883a 	add	r3,r2,r3
10009734:	b0ffff15 	stw	r3,-4(r22)
10009738:	3820d43a 	srli	r16,r7,16
1000973c:	bcbfee16 	blt	r23,r18,100096f8 <__alt_data_end+0xf80096f8>
10009740:	80000926 	beq	r16,zero,10009768 <__multadd+0xb4>
10009744:	98800217 	ldw	r2,8(r19)
10009748:	9080130e 	bge	r18,r2,10009798 <__multadd+0xe4>
1000974c:	90800144 	addi	r2,r18,5
10009750:	1085883a 	add	r2,r2,r2
10009754:	1085883a 	add	r2,r2,r2
10009758:	9885883a 	add	r2,r19,r2
1000975c:	14000015 	stw	r16,0(r2)
10009760:	94800044 	addi	r18,r18,1
10009764:	9c800415 	stw	r18,16(r19)
10009768:	9805883a 	mov	r2,r19
1000976c:	dfc00817 	ldw	ra,32(sp)
10009770:	ddc00717 	ldw	r23,28(sp)
10009774:	dd800617 	ldw	r22,24(sp)
10009778:	dd400517 	ldw	r21,20(sp)
1000977c:	dd000417 	ldw	r20,16(sp)
10009780:	dcc00317 	ldw	r19,12(sp)
10009784:	dc800217 	ldw	r18,8(sp)
10009788:	dc400117 	ldw	r17,4(sp)
1000978c:	dc000017 	ldw	r16,0(sp)
10009790:	dec00904 	addi	sp,sp,36
10009794:	f800283a 	ret
10009798:	99400117 	ldw	r5,4(r19)
1000979c:	a009883a 	mov	r4,r20
100097a0:	29400044 	addi	r5,r5,1
100097a4:	00095e40 	call	100095e4 <_Balloc>
100097a8:	99800417 	ldw	r6,16(r19)
100097ac:	99400304 	addi	r5,r19,12
100097b0:	11000304 	addi	r4,r2,12
100097b4:	31800084 	addi	r6,r6,2
100097b8:	318d883a 	add	r6,r6,r6
100097bc:	318d883a 	add	r6,r6,r6
100097c0:	1023883a 	mov	r17,r2
100097c4:	00093880 	call	10009388 <memcpy>
100097c8:	99000117 	ldw	r4,4(r19)
100097cc:	a0c01317 	ldw	r3,76(r20)
100097d0:	2109883a 	add	r4,r4,r4
100097d4:	2109883a 	add	r4,r4,r4
100097d8:	1907883a 	add	r3,r3,r4
100097dc:	18800017 	ldw	r2,0(r3)
100097e0:	98800015 	stw	r2,0(r19)
100097e4:	1cc00015 	stw	r19,0(r3)
100097e8:	8827883a 	mov	r19,r17
100097ec:	003fd706 	br	1000974c <__alt_data_end+0xf800974c>

100097f0 <__s2b>:
100097f0:	defff904 	addi	sp,sp,-28
100097f4:	dc400115 	stw	r17,4(sp)
100097f8:	dc000015 	stw	r16,0(sp)
100097fc:	2023883a 	mov	r17,r4
10009800:	2821883a 	mov	r16,r5
10009804:	39000204 	addi	r4,r7,8
10009808:	01400244 	movi	r5,9
1000980c:	dcc00315 	stw	r19,12(sp)
10009810:	dc800215 	stw	r18,8(sp)
10009814:	dfc00615 	stw	ra,24(sp)
10009818:	dd400515 	stw	r21,20(sp)
1000981c:	dd000415 	stw	r20,16(sp)
10009820:	3825883a 	mov	r18,r7
10009824:	3027883a 	mov	r19,r6
10009828:	0002c3c0 	call	10002c3c <__divsi3>
1000982c:	00c00044 	movi	r3,1
10009830:	000b883a 	mov	r5,zero
10009834:	1880030e 	bge	r3,r2,10009844 <__s2b+0x54>
10009838:	18c7883a 	add	r3,r3,r3
1000983c:	29400044 	addi	r5,r5,1
10009840:	18bffd16 	blt	r3,r2,10009838 <__alt_data_end+0xf8009838>
10009844:	8809883a 	mov	r4,r17
10009848:	00095e40 	call	100095e4 <_Balloc>
1000984c:	d8c00717 	ldw	r3,28(sp)
10009850:	10c00515 	stw	r3,20(r2)
10009854:	00c00044 	movi	r3,1
10009858:	10c00415 	stw	r3,16(r2)
1000985c:	00c00244 	movi	r3,9
10009860:	1cc0210e 	bge	r3,r19,100098e8 <__s2b+0xf8>
10009864:	80eb883a 	add	r21,r16,r3
10009868:	a829883a 	mov	r20,r21
1000986c:	84e1883a 	add	r16,r16,r19
10009870:	a1c00007 	ldb	r7,0(r20)
10009874:	8809883a 	mov	r4,r17
10009878:	a5000044 	addi	r20,r20,1
1000987c:	100b883a 	mov	r5,r2
10009880:	01800284 	movi	r6,10
10009884:	39fff404 	addi	r7,r7,-48
10009888:	00096b40 	call	100096b4 <__multadd>
1000988c:	a43ff81e 	bne	r20,r16,10009870 <__alt_data_end+0xf8009870>
10009890:	ace1883a 	add	r16,r21,r19
10009894:	843ffe04 	addi	r16,r16,-8
10009898:	9c800a0e 	bge	r19,r18,100098c4 <__s2b+0xd4>
1000989c:	94e5c83a 	sub	r18,r18,r19
100098a0:	84a5883a 	add	r18,r16,r18
100098a4:	81c00007 	ldb	r7,0(r16)
100098a8:	8809883a 	mov	r4,r17
100098ac:	84000044 	addi	r16,r16,1
100098b0:	100b883a 	mov	r5,r2
100098b4:	01800284 	movi	r6,10
100098b8:	39fff404 	addi	r7,r7,-48
100098bc:	00096b40 	call	100096b4 <__multadd>
100098c0:	84bff81e 	bne	r16,r18,100098a4 <__alt_data_end+0xf80098a4>
100098c4:	dfc00617 	ldw	ra,24(sp)
100098c8:	dd400517 	ldw	r21,20(sp)
100098cc:	dd000417 	ldw	r20,16(sp)
100098d0:	dcc00317 	ldw	r19,12(sp)
100098d4:	dc800217 	ldw	r18,8(sp)
100098d8:	dc400117 	ldw	r17,4(sp)
100098dc:	dc000017 	ldw	r16,0(sp)
100098e0:	dec00704 	addi	sp,sp,28
100098e4:	f800283a 	ret
100098e8:	84000284 	addi	r16,r16,10
100098ec:	1827883a 	mov	r19,r3
100098f0:	003fe906 	br	10009898 <__alt_data_end+0xf8009898>

100098f4 <__hi0bits>:
100098f4:	20bfffec 	andhi	r2,r4,65535
100098f8:	1000141e 	bne	r2,zero,1000994c <__hi0bits+0x58>
100098fc:	2008943a 	slli	r4,r4,16
10009900:	00800404 	movi	r2,16
10009904:	20ffc02c 	andhi	r3,r4,65280
10009908:	1800021e 	bne	r3,zero,10009914 <__hi0bits+0x20>
1000990c:	2008923a 	slli	r4,r4,8
10009910:	10800204 	addi	r2,r2,8
10009914:	20fc002c 	andhi	r3,r4,61440
10009918:	1800021e 	bne	r3,zero,10009924 <__hi0bits+0x30>
1000991c:	2008913a 	slli	r4,r4,4
10009920:	10800104 	addi	r2,r2,4
10009924:	20f0002c 	andhi	r3,r4,49152
10009928:	1800031e 	bne	r3,zero,10009938 <__hi0bits+0x44>
1000992c:	2109883a 	add	r4,r4,r4
10009930:	10800084 	addi	r2,r2,2
10009934:	2109883a 	add	r4,r4,r4
10009938:	20000316 	blt	r4,zero,10009948 <__hi0bits+0x54>
1000993c:	2110002c 	andhi	r4,r4,16384
10009940:	2000041e 	bne	r4,zero,10009954 <__hi0bits+0x60>
10009944:	00800804 	movi	r2,32
10009948:	f800283a 	ret
1000994c:	0005883a 	mov	r2,zero
10009950:	003fec06 	br	10009904 <__alt_data_end+0xf8009904>
10009954:	10800044 	addi	r2,r2,1
10009958:	f800283a 	ret

1000995c <__lo0bits>:
1000995c:	20c00017 	ldw	r3,0(r4)
10009960:	188001cc 	andi	r2,r3,7
10009964:	10000826 	beq	r2,zero,10009988 <__lo0bits+0x2c>
10009968:	1880004c 	andi	r2,r3,1
1000996c:	1000211e 	bne	r2,zero,100099f4 <__lo0bits+0x98>
10009970:	1880008c 	andi	r2,r3,2
10009974:	1000211e 	bne	r2,zero,100099fc <__lo0bits+0xa0>
10009978:	1806d0ba 	srli	r3,r3,2
1000997c:	00800084 	movi	r2,2
10009980:	20c00015 	stw	r3,0(r4)
10009984:	f800283a 	ret
10009988:	18bfffcc 	andi	r2,r3,65535
1000998c:	10001326 	beq	r2,zero,100099dc <__lo0bits+0x80>
10009990:	0005883a 	mov	r2,zero
10009994:	19403fcc 	andi	r5,r3,255
10009998:	2800021e 	bne	r5,zero,100099a4 <__lo0bits+0x48>
1000999c:	1806d23a 	srli	r3,r3,8
100099a0:	10800204 	addi	r2,r2,8
100099a4:	194003cc 	andi	r5,r3,15
100099a8:	2800021e 	bne	r5,zero,100099b4 <__lo0bits+0x58>
100099ac:	1806d13a 	srli	r3,r3,4
100099b0:	10800104 	addi	r2,r2,4
100099b4:	194000cc 	andi	r5,r3,3
100099b8:	2800021e 	bne	r5,zero,100099c4 <__lo0bits+0x68>
100099bc:	1806d0ba 	srli	r3,r3,2
100099c0:	10800084 	addi	r2,r2,2
100099c4:	1940004c 	andi	r5,r3,1
100099c8:	2800081e 	bne	r5,zero,100099ec <__lo0bits+0x90>
100099cc:	1806d07a 	srli	r3,r3,1
100099d0:	1800051e 	bne	r3,zero,100099e8 <__lo0bits+0x8c>
100099d4:	00800804 	movi	r2,32
100099d8:	f800283a 	ret
100099dc:	1806d43a 	srli	r3,r3,16
100099e0:	00800404 	movi	r2,16
100099e4:	003feb06 	br	10009994 <__alt_data_end+0xf8009994>
100099e8:	10800044 	addi	r2,r2,1
100099ec:	20c00015 	stw	r3,0(r4)
100099f0:	f800283a 	ret
100099f4:	0005883a 	mov	r2,zero
100099f8:	f800283a 	ret
100099fc:	1806d07a 	srli	r3,r3,1
10009a00:	00800044 	movi	r2,1
10009a04:	20c00015 	stw	r3,0(r4)
10009a08:	f800283a 	ret

10009a0c <__i2b>:
10009a0c:	defffd04 	addi	sp,sp,-12
10009a10:	dc000015 	stw	r16,0(sp)
10009a14:	04000044 	movi	r16,1
10009a18:	dc400115 	stw	r17,4(sp)
10009a1c:	2823883a 	mov	r17,r5
10009a20:	800b883a 	mov	r5,r16
10009a24:	dfc00215 	stw	ra,8(sp)
10009a28:	00095e40 	call	100095e4 <_Balloc>
10009a2c:	14400515 	stw	r17,20(r2)
10009a30:	14000415 	stw	r16,16(r2)
10009a34:	dfc00217 	ldw	ra,8(sp)
10009a38:	dc400117 	ldw	r17,4(sp)
10009a3c:	dc000017 	ldw	r16,0(sp)
10009a40:	dec00304 	addi	sp,sp,12
10009a44:	f800283a 	ret

10009a48 <__multiply>:
10009a48:	deffef04 	addi	sp,sp,-68
10009a4c:	dc400815 	stw	r17,32(sp)
10009a50:	dc000715 	stw	r16,28(sp)
10009a54:	2c400417 	ldw	r17,16(r5)
10009a58:	34000417 	ldw	r16,16(r6)
10009a5c:	dd800d15 	stw	r22,52(sp)
10009a60:	dc800915 	stw	r18,36(sp)
10009a64:	dfc01015 	stw	ra,64(sp)
10009a68:	df000f15 	stw	fp,60(sp)
10009a6c:	ddc00e15 	stw	r23,56(sp)
10009a70:	dd400c15 	stw	r21,48(sp)
10009a74:	dd000b15 	stw	r20,44(sp)
10009a78:	dcc00a15 	stw	r19,40(sp)
10009a7c:	2825883a 	mov	r18,r5
10009a80:	302d883a 	mov	r22,r6
10009a84:	8c009116 	blt	r17,r16,10009ccc <__multiply+0x284>
10009a88:	8005883a 	mov	r2,r16
10009a8c:	8821883a 	mov	r16,r17
10009a90:	1023883a 	mov	r17,r2
10009a94:	90800217 	ldw	r2,8(r18)
10009a98:	8447883a 	add	r3,r16,r17
10009a9c:	d8c00215 	stw	r3,8(sp)
10009aa0:	91400117 	ldw	r5,4(r18)
10009aa4:	10c0010e 	bge	r2,r3,10009aac <__multiply+0x64>
10009aa8:	29400044 	addi	r5,r5,1
10009aac:	00095e40 	call	100095e4 <_Balloc>
10009ab0:	d8c00217 	ldw	r3,8(sp)
10009ab4:	d8800615 	stw	r2,24(sp)
10009ab8:	18eb883a 	add	r21,r3,r3
10009abc:	ad6b883a 	add	r21,r21,r21
10009ac0:	10c00504 	addi	r3,r2,20
10009ac4:	1d6b883a 	add	r21,r3,r21
10009ac8:	d8c00115 	stw	r3,4(sp)
10009acc:	dd400315 	stw	r21,12(sp)
10009ad0:	1805883a 	mov	r2,r3
10009ad4:	1d40042e 	bgeu	r3,r21,10009ae8 <__multiply+0xa0>
10009ad8:	d8c00317 	ldw	r3,12(sp)
10009adc:	10000015 	stw	zero,0(r2)
10009ae0:	10800104 	addi	r2,r2,4
10009ae4:	10fffc36 	bltu	r2,r3,10009ad8 <__alt_data_end+0xf8009ad8>
10009ae8:	8c63883a 	add	r17,r17,r17
10009aec:	b5800504 	addi	r22,r22,20
10009af0:	8c63883a 	add	r17,r17,r17
10009af4:	94800504 	addi	r18,r18,20
10009af8:	8421883a 	add	r16,r16,r16
10009afc:	b463883a 	add	r17,r22,r17
10009b00:	8421883a 	add	r16,r16,r16
10009b04:	dd800015 	stw	r22,0(sp)
10009b08:	dc800415 	stw	r18,16(sp)
10009b0c:	dc400515 	stw	r17,20(sp)
10009b10:	9429883a 	add	r20,r18,r16
10009b14:	b4404f2e 	bgeu	r22,r17,10009c54 <__multiply+0x20c>
10009b18:	d8c00017 	ldw	r3,0(sp)
10009b1c:	1c800017 	ldw	r18,0(r3)
10009b20:	943fffcc 	andi	r16,r18,65535
10009b24:	80001e26 	beq	r16,zero,10009ba0 <__multiply+0x158>
10009b28:	dd800117 	ldw	r22,4(sp)
10009b2c:	dd400417 	ldw	r21,16(sp)
10009b30:	0025883a 	mov	r18,zero
10009b34:	adc00017 	ldw	r23,0(r21)
10009b38:	b4c00017 	ldw	r19,0(r22)
10009b3c:	800b883a 	mov	r5,r16
10009b40:	b93fffcc 	andi	r4,r23,65535
10009b44:	0002cfc0 	call	10002cfc <__mulsi3>
10009b48:	9c7fffcc 	andi	r17,r19,65535
10009b4c:	8885883a 	add	r2,r17,r2
10009b50:	b808d43a 	srli	r4,r23,16
10009b54:	14a3883a 	add	r17,r2,r18
10009b58:	9826d43a 	srli	r19,r19,16
10009b5c:	8824d43a 	srli	r18,r17,16
10009b60:	800b883a 	mov	r5,r16
10009b64:	0002cfc0 	call	10002cfc <__mulsi3>
10009b68:	9885883a 	add	r2,r19,r2
10009b6c:	14a7883a 	add	r19,r2,r18
10009b70:	88ffffcc 	andi	r3,r17,65535
10009b74:	9822943a 	slli	r17,r19,16
10009b78:	ad400104 	addi	r21,r21,4
10009b7c:	b005883a 	mov	r2,r22
10009b80:	88c6b03a 	or	r3,r17,r3
10009b84:	b0c00015 	stw	r3,0(r22)
10009b88:	9824d43a 	srli	r18,r19,16
10009b8c:	b5800104 	addi	r22,r22,4
10009b90:	ad3fe836 	bltu	r21,r20,10009b34 <__alt_data_end+0xf8009b34>
10009b94:	d8c00017 	ldw	r3,0(sp)
10009b98:	14800115 	stw	r18,4(r2)
10009b9c:	1c800017 	ldw	r18,0(r3)
10009ba0:	9024d43a 	srli	r18,r18,16
10009ba4:	90002226 	beq	r18,zero,10009c30 <__multiply+0x1e8>
10009ba8:	d8c00117 	ldw	r3,4(sp)
10009bac:	dd800417 	ldw	r22,16(sp)
10009bb0:	002f883a 	mov	r23,zero
10009bb4:	1f000017 	ldw	fp,0(r3)
10009bb8:	1823883a 	mov	r17,r3
10009bbc:	182b883a 	mov	r21,r3
10009bc0:	e021883a 	mov	r16,fp
10009bc4:	00000106 	br	10009bcc <__multiply+0x184>
10009bc8:	982b883a 	mov	r21,r19
10009bcc:	b100000b 	ldhu	r4,0(r22)
10009bd0:	8020d43a 	srli	r16,r16,16
10009bd4:	900b883a 	mov	r5,r18
10009bd8:	0002cfc0 	call	10002cfc <__mulsi3>
10009bdc:	1405883a 	add	r2,r2,r16
10009be0:	15ef883a 	add	r23,r2,r23
10009be4:	b804943a 	slli	r2,r23,16
10009be8:	e0ffffcc 	andi	r3,fp,65535
10009bec:	8c400104 	addi	r17,r17,4
10009bf0:	10c6b03a 	or	r3,r2,r3
10009bf4:	88ffff15 	stw	r3,-4(r17)
10009bf8:	b5800104 	addi	r22,r22,4
10009bfc:	b13fff17 	ldw	r4,-4(r22)
10009c00:	acc00104 	addi	r19,r21,4
10009c04:	900b883a 	mov	r5,r18
10009c08:	2008d43a 	srli	r4,r4,16
10009c0c:	9c000017 	ldw	r16,0(r19)
10009c10:	0002cfc0 	call	10002cfc <__mulsi3>
10009c14:	b806d43a 	srli	r3,r23,16
10009c18:	813fffcc 	andi	r4,r16,65535
10009c1c:	1105883a 	add	r2,r2,r4
10009c20:	10f9883a 	add	fp,r2,r3
10009c24:	e02ed43a 	srli	r23,fp,16
10009c28:	b53fe736 	bltu	r22,r20,10009bc8 <__alt_data_end+0xf8009bc8>
10009c2c:	af000115 	stw	fp,4(r21)
10009c30:	d8c00017 	ldw	r3,0(sp)
10009c34:	d9000517 	ldw	r4,20(sp)
10009c38:	18c00104 	addi	r3,r3,4
10009c3c:	d8c00015 	stw	r3,0(sp)
10009c40:	d8c00117 	ldw	r3,4(sp)
10009c44:	18c00104 	addi	r3,r3,4
10009c48:	d8c00115 	stw	r3,4(sp)
10009c4c:	d8c00017 	ldw	r3,0(sp)
10009c50:	193fb136 	bltu	r3,r4,10009b18 <__alt_data_end+0xf8009b18>
10009c54:	d8c00217 	ldw	r3,8(sp)
10009c58:	00c00c0e 	bge	zero,r3,10009c8c <__multiply+0x244>
10009c5c:	d8c00317 	ldw	r3,12(sp)
10009c60:	18bfff17 	ldw	r2,-4(r3)
10009c64:	1d7fff04 	addi	r21,r3,-4
10009c68:	10000326 	beq	r2,zero,10009c78 <__multiply+0x230>
10009c6c:	00000706 	br	10009c8c <__multiply+0x244>
10009c70:	a8800017 	ldw	r2,0(r21)
10009c74:	1000051e 	bne	r2,zero,10009c8c <__multiply+0x244>
10009c78:	d8c00217 	ldw	r3,8(sp)
10009c7c:	ad7fff04 	addi	r21,r21,-4
10009c80:	18ffffc4 	addi	r3,r3,-1
10009c84:	d8c00215 	stw	r3,8(sp)
10009c88:	183ff91e 	bne	r3,zero,10009c70 <__alt_data_end+0xf8009c70>
10009c8c:	d8c00617 	ldw	r3,24(sp)
10009c90:	d9000217 	ldw	r4,8(sp)
10009c94:	1805883a 	mov	r2,r3
10009c98:	19000415 	stw	r4,16(r3)
10009c9c:	dfc01017 	ldw	ra,64(sp)
10009ca0:	df000f17 	ldw	fp,60(sp)
10009ca4:	ddc00e17 	ldw	r23,56(sp)
10009ca8:	dd800d17 	ldw	r22,52(sp)
10009cac:	dd400c17 	ldw	r21,48(sp)
10009cb0:	dd000b17 	ldw	r20,44(sp)
10009cb4:	dcc00a17 	ldw	r19,40(sp)
10009cb8:	dc800917 	ldw	r18,36(sp)
10009cbc:	dc400817 	ldw	r17,32(sp)
10009cc0:	dc000717 	ldw	r16,28(sp)
10009cc4:	dec01104 	addi	sp,sp,68
10009cc8:	f800283a 	ret
10009ccc:	3025883a 	mov	r18,r6
10009cd0:	282d883a 	mov	r22,r5
10009cd4:	003f6f06 	br	10009a94 <__alt_data_end+0xf8009a94>

10009cd8 <__pow5mult>:
10009cd8:	defffa04 	addi	sp,sp,-24
10009cdc:	dcc00315 	stw	r19,12(sp)
10009ce0:	dc800215 	stw	r18,8(sp)
10009ce4:	dc000015 	stw	r16,0(sp)
10009ce8:	dfc00515 	stw	ra,20(sp)
10009cec:	dd000415 	stw	r20,16(sp)
10009cf0:	dc400115 	stw	r17,4(sp)
10009cf4:	308000cc 	andi	r2,r6,3
10009cf8:	3021883a 	mov	r16,r6
10009cfc:	2027883a 	mov	r19,r4
10009d00:	2825883a 	mov	r18,r5
10009d04:	10002e1e 	bne	r2,zero,10009dc0 <__pow5mult+0xe8>
10009d08:	8021d0ba 	srai	r16,r16,2
10009d0c:	80001a26 	beq	r16,zero,10009d78 <__pow5mult+0xa0>
10009d10:	9c401217 	ldw	r17,72(r19)
10009d14:	8800061e 	bne	r17,zero,10009d30 <__pow5mult+0x58>
10009d18:	00003406 	br	10009dec <__pow5mult+0x114>
10009d1c:	8021d07a 	srai	r16,r16,1
10009d20:	80001526 	beq	r16,zero,10009d78 <__pow5mult+0xa0>
10009d24:	88800017 	ldw	r2,0(r17)
10009d28:	10001c26 	beq	r2,zero,10009d9c <__pow5mult+0xc4>
10009d2c:	1023883a 	mov	r17,r2
10009d30:	80c0004c 	andi	r3,r16,1
10009d34:	183ff926 	beq	r3,zero,10009d1c <__alt_data_end+0xf8009d1c>
10009d38:	900b883a 	mov	r5,r18
10009d3c:	880d883a 	mov	r6,r17
10009d40:	9809883a 	mov	r4,r19
10009d44:	0009a480 	call	10009a48 <__multiply>
10009d48:	90001b26 	beq	r18,zero,10009db8 <__pow5mult+0xe0>
10009d4c:	91c00117 	ldw	r7,4(r18)
10009d50:	98c01317 	ldw	r3,76(r19)
10009d54:	8021d07a 	srai	r16,r16,1
10009d58:	39cf883a 	add	r7,r7,r7
10009d5c:	39cf883a 	add	r7,r7,r7
10009d60:	19c7883a 	add	r3,r3,r7
10009d64:	19000017 	ldw	r4,0(r3)
10009d68:	91000015 	stw	r4,0(r18)
10009d6c:	1c800015 	stw	r18,0(r3)
10009d70:	1025883a 	mov	r18,r2
10009d74:	803feb1e 	bne	r16,zero,10009d24 <__alt_data_end+0xf8009d24>
10009d78:	9005883a 	mov	r2,r18
10009d7c:	dfc00517 	ldw	ra,20(sp)
10009d80:	dd000417 	ldw	r20,16(sp)
10009d84:	dcc00317 	ldw	r19,12(sp)
10009d88:	dc800217 	ldw	r18,8(sp)
10009d8c:	dc400117 	ldw	r17,4(sp)
10009d90:	dc000017 	ldw	r16,0(sp)
10009d94:	dec00604 	addi	sp,sp,24
10009d98:	f800283a 	ret
10009d9c:	9809883a 	mov	r4,r19
10009da0:	880b883a 	mov	r5,r17
10009da4:	880d883a 	mov	r6,r17
10009da8:	0009a480 	call	10009a48 <__multiply>
10009dac:	88800015 	stw	r2,0(r17)
10009db0:	10000015 	stw	zero,0(r2)
10009db4:	003fdd06 	br	10009d2c <__alt_data_end+0xf8009d2c>
10009db8:	1025883a 	mov	r18,r2
10009dbc:	003fd706 	br	10009d1c <__alt_data_end+0xf8009d1c>
10009dc0:	10bfffc4 	addi	r2,r2,-1
10009dc4:	1085883a 	add	r2,r2,r2
10009dc8:	00c40074 	movhi	r3,4097
10009dcc:	18c4a204 	addi	r3,r3,4744
10009dd0:	1085883a 	add	r2,r2,r2
10009dd4:	1885883a 	add	r2,r3,r2
10009dd8:	11800017 	ldw	r6,0(r2)
10009ddc:	000f883a 	mov	r7,zero
10009de0:	00096b40 	call	100096b4 <__multadd>
10009de4:	1025883a 	mov	r18,r2
10009de8:	003fc706 	br	10009d08 <__alt_data_end+0xf8009d08>
10009dec:	05000044 	movi	r20,1
10009df0:	9809883a 	mov	r4,r19
10009df4:	a00b883a 	mov	r5,r20
10009df8:	00095e40 	call	100095e4 <_Balloc>
10009dfc:	1023883a 	mov	r17,r2
10009e00:	00809c44 	movi	r2,625
10009e04:	88800515 	stw	r2,20(r17)
10009e08:	8d000415 	stw	r20,16(r17)
10009e0c:	9c401215 	stw	r17,72(r19)
10009e10:	88000015 	stw	zero,0(r17)
10009e14:	003fc606 	br	10009d30 <__alt_data_end+0xf8009d30>

10009e18 <__lshift>:
10009e18:	defff904 	addi	sp,sp,-28
10009e1c:	dd000415 	stw	r20,16(sp)
10009e20:	dcc00315 	stw	r19,12(sp)
10009e24:	3029d17a 	srai	r20,r6,5
10009e28:	2cc00417 	ldw	r19,16(r5)
10009e2c:	28800217 	ldw	r2,8(r5)
10009e30:	dd400515 	stw	r21,20(sp)
10009e34:	a4e7883a 	add	r19,r20,r19
10009e38:	dc800215 	stw	r18,8(sp)
10009e3c:	dc400115 	stw	r17,4(sp)
10009e40:	dc000015 	stw	r16,0(sp)
10009e44:	dfc00615 	stw	ra,24(sp)
10009e48:	9c000044 	addi	r16,r19,1
10009e4c:	2823883a 	mov	r17,r5
10009e50:	302b883a 	mov	r21,r6
10009e54:	2025883a 	mov	r18,r4
10009e58:	29400117 	ldw	r5,4(r5)
10009e5c:	1400030e 	bge	r2,r16,10009e6c <__lshift+0x54>
10009e60:	1085883a 	add	r2,r2,r2
10009e64:	29400044 	addi	r5,r5,1
10009e68:	143ffd16 	blt	r2,r16,10009e60 <__alt_data_end+0xf8009e60>
10009e6c:	9009883a 	mov	r4,r18
10009e70:	00095e40 	call	100095e4 <_Balloc>
10009e74:	11c00504 	addi	r7,r2,20
10009e78:	0500090e 	bge	zero,r20,10009ea0 <__lshift+0x88>
10009e7c:	3811883a 	mov	r8,r7
10009e80:	0007883a 	mov	r3,zero
10009e84:	40000015 	stw	zero,0(r8)
10009e88:	18c00044 	addi	r3,r3,1
10009e8c:	42000104 	addi	r8,r8,4
10009e90:	1d3ffc1e 	bne	r3,r20,10009e84 <__alt_data_end+0xf8009e84>
10009e94:	18c7883a 	add	r3,r3,r3
10009e98:	18c7883a 	add	r3,r3,r3
10009e9c:	38cf883a 	add	r7,r7,r3
10009ea0:	89000417 	ldw	r4,16(r17)
10009ea4:	88c00504 	addi	r3,r17,20
10009ea8:	a98007cc 	andi	r6,r21,31
10009eac:	2109883a 	add	r4,r4,r4
10009eb0:	2109883a 	add	r4,r4,r4
10009eb4:	1909883a 	add	r4,r3,r4
10009eb8:	30002326 	beq	r6,zero,10009f48 <__lshift+0x130>
10009ebc:	01400804 	movi	r5,32
10009ec0:	298bc83a 	sub	r5,r5,r6
10009ec4:	0013883a 	mov	r9,zero
10009ec8:	1a000017 	ldw	r8,0(r3)
10009ecc:	3815883a 	mov	r10,r7
10009ed0:	39c00104 	addi	r7,r7,4
10009ed4:	4190983a 	sll	r8,r8,r6
10009ed8:	18c00104 	addi	r3,r3,4
10009edc:	4a10b03a 	or	r8,r9,r8
10009ee0:	3a3fff15 	stw	r8,-4(r7)
10009ee4:	1a3fff17 	ldw	r8,-4(r3)
10009ee8:	4152d83a 	srl	r9,r8,r5
10009eec:	193ff636 	bltu	r3,r4,10009ec8 <__alt_data_end+0xf8009ec8>
10009ef0:	52400115 	stw	r9,4(r10)
10009ef4:	48000126 	beq	r9,zero,10009efc <__lshift+0xe4>
10009ef8:	9c000084 	addi	r16,r19,2
10009efc:	89000117 	ldw	r4,4(r17)
10009f00:	90c01317 	ldw	r3,76(r18)
10009f04:	843fffc4 	addi	r16,r16,-1
10009f08:	2109883a 	add	r4,r4,r4
10009f0c:	2109883a 	add	r4,r4,r4
10009f10:	1907883a 	add	r3,r3,r4
10009f14:	19000017 	ldw	r4,0(r3)
10009f18:	14000415 	stw	r16,16(r2)
10009f1c:	89000015 	stw	r4,0(r17)
10009f20:	1c400015 	stw	r17,0(r3)
10009f24:	dfc00617 	ldw	ra,24(sp)
10009f28:	dd400517 	ldw	r21,20(sp)
10009f2c:	dd000417 	ldw	r20,16(sp)
10009f30:	dcc00317 	ldw	r19,12(sp)
10009f34:	dc800217 	ldw	r18,8(sp)
10009f38:	dc400117 	ldw	r17,4(sp)
10009f3c:	dc000017 	ldw	r16,0(sp)
10009f40:	dec00704 	addi	sp,sp,28
10009f44:	f800283a 	ret
10009f48:	19400017 	ldw	r5,0(r3)
10009f4c:	39c00104 	addi	r7,r7,4
10009f50:	18c00104 	addi	r3,r3,4
10009f54:	397fff15 	stw	r5,-4(r7)
10009f58:	193ffb36 	bltu	r3,r4,10009f48 <__alt_data_end+0xf8009f48>
10009f5c:	003fe706 	br	10009efc <__alt_data_end+0xf8009efc>

10009f60 <__mcmp>:
10009f60:	20800417 	ldw	r2,16(r4)
10009f64:	28c00417 	ldw	r3,16(r5)
10009f68:	10c5c83a 	sub	r2,r2,r3
10009f6c:	1000111e 	bne	r2,zero,10009fb4 <__mcmp+0x54>
10009f70:	18c7883a 	add	r3,r3,r3
10009f74:	18c7883a 	add	r3,r3,r3
10009f78:	21000504 	addi	r4,r4,20
10009f7c:	29400504 	addi	r5,r5,20
10009f80:	20c5883a 	add	r2,r4,r3
10009f84:	28cb883a 	add	r5,r5,r3
10009f88:	00000106 	br	10009f90 <__mcmp+0x30>
10009f8c:	20800a2e 	bgeu	r4,r2,10009fb8 <__mcmp+0x58>
10009f90:	10bfff04 	addi	r2,r2,-4
10009f94:	297fff04 	addi	r5,r5,-4
10009f98:	11800017 	ldw	r6,0(r2)
10009f9c:	28c00017 	ldw	r3,0(r5)
10009fa0:	30fffa26 	beq	r6,r3,10009f8c <__alt_data_end+0xf8009f8c>
10009fa4:	30c00236 	bltu	r6,r3,10009fb0 <__mcmp+0x50>
10009fa8:	00800044 	movi	r2,1
10009fac:	f800283a 	ret
10009fb0:	00bfffc4 	movi	r2,-1
10009fb4:	f800283a 	ret
10009fb8:	0005883a 	mov	r2,zero
10009fbc:	f800283a 	ret

10009fc0 <__mdiff>:
10009fc0:	defffb04 	addi	sp,sp,-20
10009fc4:	dc000015 	stw	r16,0(sp)
10009fc8:	2821883a 	mov	r16,r5
10009fcc:	dcc00315 	stw	r19,12(sp)
10009fd0:	300b883a 	mov	r5,r6
10009fd4:	2027883a 	mov	r19,r4
10009fd8:	8009883a 	mov	r4,r16
10009fdc:	dc800215 	stw	r18,8(sp)
10009fe0:	dfc00415 	stw	ra,16(sp)
10009fe4:	dc400115 	stw	r17,4(sp)
10009fe8:	3025883a 	mov	r18,r6
10009fec:	0009f600 	call	10009f60 <__mcmp>
10009ff0:	10005226 	beq	r2,zero,1000a13c <__mdiff+0x17c>
10009ff4:	10004c16 	blt	r2,zero,1000a128 <__mdiff+0x168>
10009ff8:	0023883a 	mov	r17,zero
10009ffc:	81400117 	ldw	r5,4(r16)
1000a000:	9809883a 	mov	r4,r19
1000a004:	00095e40 	call	100095e4 <_Balloc>
1000a008:	83400417 	ldw	r13,16(r16)
1000a00c:	93800417 	ldw	r14,16(r18)
1000a010:	81000504 	addi	r4,r16,20
1000a014:	6b59883a 	add	r12,r13,r13
1000a018:	739d883a 	add	r14,r14,r14
1000a01c:	6319883a 	add	r12,r12,r12
1000a020:	91800504 	addi	r6,r18,20
1000a024:	739d883a 	add	r14,r14,r14
1000a028:	14400315 	stw	r17,12(r2)
1000a02c:	2319883a 	add	r12,r4,r12
1000a030:	339d883a 	add	r14,r6,r14
1000a034:	12400504 	addi	r9,r2,20
1000a038:	0007883a 	mov	r3,zero
1000a03c:	22000017 	ldw	r8,0(r4)
1000a040:	32800017 	ldw	r10,0(r6)
1000a044:	4ac00104 	addi	r11,r9,4
1000a048:	41ffffcc 	andi	r7,r8,65535
1000a04c:	38c7883a 	add	r3,r7,r3
1000a050:	51ffffcc 	andi	r7,r10,65535
1000a054:	19cfc83a 	sub	r7,r3,r7
1000a058:	4010d43a 	srli	r8,r8,16
1000a05c:	5014d43a 	srli	r10,r10,16
1000a060:	3807d43a 	srai	r3,r7,16
1000a064:	39ffffcc 	andi	r7,r7,65535
1000a068:	4291c83a 	sub	r8,r8,r10
1000a06c:	40c7883a 	add	r3,r8,r3
1000a070:	1810943a 	slli	r8,r3,16
1000a074:	31800104 	addi	r6,r6,4
1000a078:	21000104 	addi	r4,r4,4
1000a07c:	41ceb03a 	or	r7,r8,r7
1000a080:	49c00015 	stw	r7,0(r9)
1000a084:	1807d43a 	srai	r3,r3,16
1000a088:	580b883a 	mov	r5,r11
1000a08c:	5813883a 	mov	r9,r11
1000a090:	33bfea36 	bltu	r6,r14,1000a03c <__alt_data_end+0xf800a03c>
1000a094:	2011883a 	mov	r8,r4
1000a098:	2300152e 	bgeu	r4,r12,1000a0f0 <__mdiff+0x130>
1000a09c:	21400017 	ldw	r5,0(r4)
1000a0a0:	4a400104 	addi	r9,r9,4
1000a0a4:	21000104 	addi	r4,r4,4
1000a0a8:	29ffffcc 	andi	r7,r5,65535
1000a0ac:	38c7883a 	add	r3,r7,r3
1000a0b0:	280ad43a 	srli	r5,r5,16
1000a0b4:	180dd43a 	srai	r6,r3,16
1000a0b8:	19ffffcc 	andi	r7,r3,65535
1000a0bc:	3147883a 	add	r3,r6,r5
1000a0c0:	180a943a 	slli	r5,r3,16
1000a0c4:	1807d43a 	srai	r3,r3,16
1000a0c8:	29ceb03a 	or	r7,r5,r7
1000a0cc:	49ffff15 	stw	r7,-4(r9)
1000a0d0:	233ff236 	bltu	r4,r12,1000a09c <__alt_data_end+0xf800a09c>
1000a0d4:	0206303a 	nor	r3,zero,r8
1000a0d8:	1b07883a 	add	r3,r3,r12
1000a0dc:	1806d0ba 	srli	r3,r3,2
1000a0e0:	18c00044 	addi	r3,r3,1
1000a0e4:	18c7883a 	add	r3,r3,r3
1000a0e8:	18c7883a 	add	r3,r3,r3
1000a0ec:	58cb883a 	add	r5,r11,r3
1000a0f0:	28ffff04 	addi	r3,r5,-4
1000a0f4:	3800041e 	bne	r7,zero,1000a108 <__mdiff+0x148>
1000a0f8:	18ffff04 	addi	r3,r3,-4
1000a0fc:	19000017 	ldw	r4,0(r3)
1000a100:	6b7fffc4 	addi	r13,r13,-1
1000a104:	203ffc26 	beq	r4,zero,1000a0f8 <__alt_data_end+0xf800a0f8>
1000a108:	13400415 	stw	r13,16(r2)
1000a10c:	dfc00417 	ldw	ra,16(sp)
1000a110:	dcc00317 	ldw	r19,12(sp)
1000a114:	dc800217 	ldw	r18,8(sp)
1000a118:	dc400117 	ldw	r17,4(sp)
1000a11c:	dc000017 	ldw	r16,0(sp)
1000a120:	dec00504 	addi	sp,sp,20
1000a124:	f800283a 	ret
1000a128:	8005883a 	mov	r2,r16
1000a12c:	04400044 	movi	r17,1
1000a130:	9021883a 	mov	r16,r18
1000a134:	1025883a 	mov	r18,r2
1000a138:	003fb006 	br	10009ffc <__alt_data_end+0xf8009ffc>
1000a13c:	9809883a 	mov	r4,r19
1000a140:	000b883a 	mov	r5,zero
1000a144:	00095e40 	call	100095e4 <_Balloc>
1000a148:	00c00044 	movi	r3,1
1000a14c:	10c00415 	stw	r3,16(r2)
1000a150:	10000515 	stw	zero,20(r2)
1000a154:	003fed06 	br	1000a10c <__alt_data_end+0xf800a10c>

1000a158 <__ulp>:
1000a158:	295ffc2c 	andhi	r5,r5,32752
1000a15c:	00bf3034 	movhi	r2,64704
1000a160:	2887883a 	add	r3,r5,r2
1000a164:	00c0020e 	bge	zero,r3,1000a170 <__ulp+0x18>
1000a168:	0005883a 	mov	r2,zero
1000a16c:	f800283a 	ret
1000a170:	00c7c83a 	sub	r3,zero,r3
1000a174:	180bd53a 	srai	r5,r3,20
1000a178:	008004c4 	movi	r2,19
1000a17c:	11400a0e 	bge	r2,r5,1000a1a8 <__ulp+0x50>
1000a180:	00800c84 	movi	r2,50
1000a184:	0007883a 	mov	r3,zero
1000a188:	11400516 	blt	r2,r5,1000a1a0 <__ulp+0x48>
1000a18c:	00800cc4 	movi	r2,51
1000a190:	114bc83a 	sub	r5,r2,r5
1000a194:	00800044 	movi	r2,1
1000a198:	1144983a 	sll	r2,r2,r5
1000a19c:	f800283a 	ret
1000a1a0:	00800044 	movi	r2,1
1000a1a4:	f800283a 	ret
1000a1a8:	00800234 	movhi	r2,8
1000a1ac:	1147d83a 	sra	r3,r2,r5
1000a1b0:	0005883a 	mov	r2,zero
1000a1b4:	f800283a 	ret

1000a1b8 <__b2d>:
1000a1b8:	defffa04 	addi	sp,sp,-24
1000a1bc:	dc000015 	stw	r16,0(sp)
1000a1c0:	24000417 	ldw	r16,16(r4)
1000a1c4:	dc400115 	stw	r17,4(sp)
1000a1c8:	24400504 	addi	r17,r4,20
1000a1cc:	8421883a 	add	r16,r16,r16
1000a1d0:	8421883a 	add	r16,r16,r16
1000a1d4:	8c21883a 	add	r16,r17,r16
1000a1d8:	dc800215 	stw	r18,8(sp)
1000a1dc:	84bfff17 	ldw	r18,-4(r16)
1000a1e0:	dd000415 	stw	r20,16(sp)
1000a1e4:	dcc00315 	stw	r19,12(sp)
1000a1e8:	9009883a 	mov	r4,r18
1000a1ec:	2829883a 	mov	r20,r5
1000a1f0:	dfc00515 	stw	ra,20(sp)
1000a1f4:	00098f40 	call	100098f4 <__hi0bits>
1000a1f8:	00c00804 	movi	r3,32
1000a1fc:	1887c83a 	sub	r3,r3,r2
1000a200:	a0c00015 	stw	r3,0(r20)
1000a204:	00c00284 	movi	r3,10
1000a208:	84ffff04 	addi	r19,r16,-4
1000a20c:	18801216 	blt	r3,r2,1000a258 <__b2d+0xa0>
1000a210:	014002c4 	movi	r5,11
1000a214:	2889c83a 	sub	r4,r5,r2
1000a218:	9106d83a 	srl	r3,r18,r4
1000a21c:	18cffc34 	orhi	r3,r3,16368
1000a220:	8cc0282e 	bgeu	r17,r19,1000a2c4 <__b2d+0x10c>
1000a224:	817ffe17 	ldw	r5,-8(r16)
1000a228:	290ad83a 	srl	r5,r5,r4
1000a22c:	10800544 	addi	r2,r2,21
1000a230:	9084983a 	sll	r2,r18,r2
1000a234:	2884b03a 	or	r2,r5,r2
1000a238:	dfc00517 	ldw	ra,20(sp)
1000a23c:	dd000417 	ldw	r20,16(sp)
1000a240:	dcc00317 	ldw	r19,12(sp)
1000a244:	dc800217 	ldw	r18,8(sp)
1000a248:	dc400117 	ldw	r17,4(sp)
1000a24c:	dc000017 	ldw	r16,0(sp)
1000a250:	dec00604 	addi	sp,sp,24
1000a254:	f800283a 	ret
1000a258:	113ffd44 	addi	r4,r2,-11
1000a25c:	8cc00f2e 	bgeu	r17,r19,1000a29c <__b2d+0xe4>
1000a260:	81bffe04 	addi	r6,r16,-8
1000a264:	817ffe17 	ldw	r5,-8(r16)
1000a268:	20001326 	beq	r4,zero,1000a2b8 <__b2d+0x100>
1000a26c:	00c00ac4 	movi	r3,43
1000a270:	1885c83a 	sub	r2,r3,r2
1000a274:	2886d83a 	srl	r3,r5,r2
1000a278:	9124983a 	sll	r18,r18,r4
1000a27c:	90e4b03a 	or	r18,r18,r3
1000a280:	90cffc34 	orhi	r3,r18,16368
1000a284:	8980112e 	bgeu	r17,r6,1000a2cc <__b2d+0x114>
1000a288:	81bffd17 	ldw	r6,-12(r16)
1000a28c:	308cd83a 	srl	r6,r6,r2
1000a290:	2904983a 	sll	r2,r5,r4
1000a294:	1184b03a 	or	r2,r2,r6
1000a298:	003fe706 	br	1000a238 <__alt_data_end+0xf800a238>
1000a29c:	20000526 	beq	r4,zero,1000a2b4 <__b2d+0xfc>
1000a2a0:	9124983a 	sll	r18,r18,r4
1000a2a4:	000d883a 	mov	r6,zero
1000a2a8:	000b883a 	mov	r5,zero
1000a2ac:	90cffc34 	orhi	r3,r18,16368
1000a2b0:	003ff706 	br	1000a290 <__alt_data_end+0xf800a290>
1000a2b4:	000b883a 	mov	r5,zero
1000a2b8:	90cffc34 	orhi	r3,r18,16368
1000a2bc:	2805883a 	mov	r2,r5
1000a2c0:	003fdd06 	br	1000a238 <__alt_data_end+0xf800a238>
1000a2c4:	000b883a 	mov	r5,zero
1000a2c8:	003fd806 	br	1000a22c <__alt_data_end+0xf800a22c>
1000a2cc:	000d883a 	mov	r6,zero
1000a2d0:	003fef06 	br	1000a290 <__alt_data_end+0xf800a290>

1000a2d4 <__d2b>:
1000a2d4:	defff704 	addi	sp,sp,-36
1000a2d8:	dc000215 	stw	r16,8(sp)
1000a2dc:	3021883a 	mov	r16,r6
1000a2e0:	dc400315 	stw	r17,12(sp)
1000a2e4:	8022907a 	slli	r17,r16,1
1000a2e8:	dd400715 	stw	r21,28(sp)
1000a2ec:	282b883a 	mov	r21,r5
1000a2f0:	01400044 	movi	r5,1
1000a2f4:	dd000615 	stw	r20,24(sp)
1000a2f8:	dcc00515 	stw	r19,20(sp)
1000a2fc:	dc800415 	stw	r18,16(sp)
1000a300:	dfc00815 	stw	ra,32(sp)
1000a304:	3829883a 	mov	r20,r7
1000a308:	dc800917 	ldw	r18,36(sp)
1000a30c:	8822d57a 	srli	r17,r17,21
1000a310:	00095e40 	call	100095e4 <_Balloc>
1000a314:	1027883a 	mov	r19,r2
1000a318:	00800434 	movhi	r2,16
1000a31c:	10bfffc4 	addi	r2,r2,-1
1000a320:	808c703a 	and	r6,r16,r2
1000a324:	88000126 	beq	r17,zero,1000a32c <__d2b+0x58>
1000a328:	31800434 	orhi	r6,r6,16
1000a32c:	d9800015 	stw	r6,0(sp)
1000a330:	a8001f26 	beq	r21,zero,1000a3b0 <__d2b+0xdc>
1000a334:	d9000104 	addi	r4,sp,4
1000a338:	dd400115 	stw	r21,4(sp)
1000a33c:	000995c0 	call	1000995c <__lo0bits>
1000a340:	d8c00017 	ldw	r3,0(sp)
1000a344:	1000291e 	bne	r2,zero,1000a3ec <__d2b+0x118>
1000a348:	d9000117 	ldw	r4,4(sp)
1000a34c:	99000515 	stw	r4,20(r19)
1000a350:	1820c03a 	cmpne	r16,r3,zero
1000a354:	84000044 	addi	r16,r16,1
1000a358:	98c00615 	stw	r3,24(r19)
1000a35c:	9c000415 	stw	r16,16(r19)
1000a360:	88001b1e 	bne	r17,zero,1000a3d0 <__d2b+0xfc>
1000a364:	800690ba 	slli	r3,r16,2
1000a368:	10bef384 	addi	r2,r2,-1074
1000a36c:	a0800015 	stw	r2,0(r20)
1000a370:	98c5883a 	add	r2,r19,r3
1000a374:	11000417 	ldw	r4,16(r2)
1000a378:	8020917a 	slli	r16,r16,5
1000a37c:	00098f40 	call	100098f4 <__hi0bits>
1000a380:	8085c83a 	sub	r2,r16,r2
1000a384:	90800015 	stw	r2,0(r18)
1000a388:	9805883a 	mov	r2,r19
1000a38c:	dfc00817 	ldw	ra,32(sp)
1000a390:	dd400717 	ldw	r21,28(sp)
1000a394:	dd000617 	ldw	r20,24(sp)
1000a398:	dcc00517 	ldw	r19,20(sp)
1000a39c:	dc800417 	ldw	r18,16(sp)
1000a3a0:	dc400317 	ldw	r17,12(sp)
1000a3a4:	dc000217 	ldw	r16,8(sp)
1000a3a8:	dec00904 	addi	sp,sp,36
1000a3ac:	f800283a 	ret
1000a3b0:	d809883a 	mov	r4,sp
1000a3b4:	000995c0 	call	1000995c <__lo0bits>
1000a3b8:	d8c00017 	ldw	r3,0(sp)
1000a3bc:	04000044 	movi	r16,1
1000a3c0:	9c000415 	stw	r16,16(r19)
1000a3c4:	98c00515 	stw	r3,20(r19)
1000a3c8:	10800804 	addi	r2,r2,32
1000a3cc:	883fe526 	beq	r17,zero,1000a364 <__alt_data_end+0xf800a364>
1000a3d0:	8c7ef344 	addi	r17,r17,-1075
1000a3d4:	88a3883a 	add	r17,r17,r2
1000a3d8:	00c00d44 	movi	r3,53
1000a3dc:	a4400015 	stw	r17,0(r20)
1000a3e0:	1885c83a 	sub	r2,r3,r2
1000a3e4:	90800015 	stw	r2,0(r18)
1000a3e8:	003fe706 	br	1000a388 <__alt_data_end+0xf800a388>
1000a3ec:	01000804 	movi	r4,32
1000a3f0:	2089c83a 	sub	r4,r4,r2
1000a3f4:	1908983a 	sll	r4,r3,r4
1000a3f8:	d9400117 	ldw	r5,4(sp)
1000a3fc:	1886d83a 	srl	r3,r3,r2
1000a400:	2148b03a 	or	r4,r4,r5
1000a404:	99000515 	stw	r4,20(r19)
1000a408:	d8c00015 	stw	r3,0(sp)
1000a40c:	003fd006 	br	1000a350 <__alt_data_end+0xf800a350>

1000a410 <__ratio>:
1000a410:	defff904 	addi	sp,sp,-28
1000a414:	dc400315 	stw	r17,12(sp)
1000a418:	2823883a 	mov	r17,r5
1000a41c:	d9400104 	addi	r5,sp,4
1000a420:	dfc00615 	stw	ra,24(sp)
1000a424:	dcc00515 	stw	r19,20(sp)
1000a428:	dc800415 	stw	r18,16(sp)
1000a42c:	2027883a 	mov	r19,r4
1000a430:	dc000215 	stw	r16,8(sp)
1000a434:	000a1b80 	call	1000a1b8 <__b2d>
1000a438:	8809883a 	mov	r4,r17
1000a43c:	d80b883a 	mov	r5,sp
1000a440:	1025883a 	mov	r18,r2
1000a444:	1821883a 	mov	r16,r3
1000a448:	000a1b80 	call	1000a1b8 <__b2d>
1000a44c:	8a400417 	ldw	r9,16(r17)
1000a450:	9a000417 	ldw	r8,16(r19)
1000a454:	100d883a 	mov	r6,r2
1000a458:	d8800017 	ldw	r2,0(sp)
1000a45c:	4251c83a 	sub	r8,r8,r9
1000a460:	4012917a 	slli	r9,r8,5
1000a464:	da000117 	ldw	r8,4(sp)
1000a468:	4091c83a 	sub	r8,r8,r2
1000a46c:	4251883a 	add	r8,r8,r9
1000a470:	02000d0e 	bge	zero,r8,1000a4a8 <__ratio+0x98>
1000a474:	4010953a 	slli	r8,r8,20
1000a478:	4421883a 	add	r16,r8,r16
1000a47c:	9009883a 	mov	r4,r18
1000a480:	800b883a 	mov	r5,r16
1000a484:	180f883a 	mov	r7,r3
1000a488:	000d4c00 	call	1000d4c0 <__divdf3>
1000a48c:	dfc00617 	ldw	ra,24(sp)
1000a490:	dcc00517 	ldw	r19,20(sp)
1000a494:	dc800417 	ldw	r18,16(sp)
1000a498:	dc400317 	ldw	r17,12(sp)
1000a49c:	dc000217 	ldw	r16,8(sp)
1000a4a0:	dec00704 	addi	sp,sp,28
1000a4a4:	f800283a 	ret
1000a4a8:	4010953a 	slli	r8,r8,20
1000a4ac:	1a07c83a 	sub	r3,r3,r8
1000a4b0:	003ff206 	br	1000a47c <__alt_data_end+0xf800a47c>

1000a4b4 <_mprec_log10>:
1000a4b4:	defffe04 	addi	sp,sp,-8
1000a4b8:	dc000015 	stw	r16,0(sp)
1000a4bc:	dfc00115 	stw	ra,4(sp)
1000a4c0:	008005c4 	movi	r2,23
1000a4c4:	2021883a 	mov	r16,r4
1000a4c8:	11000d0e 	bge	r2,r4,1000a500 <_mprec_log10+0x4c>
1000a4cc:	0005883a 	mov	r2,zero
1000a4d0:	00cffc34 	movhi	r3,16368
1000a4d4:	843fffc4 	addi	r16,r16,-1
1000a4d8:	1009883a 	mov	r4,r2
1000a4dc:	180b883a 	mov	r5,r3
1000a4e0:	000d883a 	mov	r6,zero
1000a4e4:	01d00934 	movhi	r7,16420
1000a4e8:	000e0840 	call	1000e084 <__muldf3>
1000a4ec:	803ff91e 	bne	r16,zero,1000a4d4 <__alt_data_end+0xf800a4d4>
1000a4f0:	dfc00117 	ldw	ra,4(sp)
1000a4f4:	dc000017 	ldw	r16,0(sp)
1000a4f8:	dec00204 	addi	sp,sp,8
1000a4fc:	f800283a 	ret
1000a500:	202090fa 	slli	r16,r4,3
1000a504:	00840074 	movhi	r2,4097
1000a508:	1084b904 	addi	r2,r2,4836
1000a50c:	1421883a 	add	r16,r2,r16
1000a510:	80800017 	ldw	r2,0(r16)
1000a514:	80c00117 	ldw	r3,4(r16)
1000a518:	dfc00117 	ldw	ra,4(sp)
1000a51c:	dc000017 	ldw	r16,0(sp)
1000a520:	dec00204 	addi	sp,sp,8
1000a524:	f800283a 	ret

1000a528 <__copybits>:
1000a528:	297fffc4 	addi	r5,r5,-1
1000a52c:	280fd17a 	srai	r7,r5,5
1000a530:	30c00417 	ldw	r3,16(r6)
1000a534:	30800504 	addi	r2,r6,20
1000a538:	39c00044 	addi	r7,r7,1
1000a53c:	18c7883a 	add	r3,r3,r3
1000a540:	39cf883a 	add	r7,r7,r7
1000a544:	18c7883a 	add	r3,r3,r3
1000a548:	39cf883a 	add	r7,r7,r7
1000a54c:	10c7883a 	add	r3,r2,r3
1000a550:	21cf883a 	add	r7,r4,r7
1000a554:	10c00d2e 	bgeu	r2,r3,1000a58c <__copybits+0x64>
1000a558:	200b883a 	mov	r5,r4
1000a55c:	12000017 	ldw	r8,0(r2)
1000a560:	29400104 	addi	r5,r5,4
1000a564:	10800104 	addi	r2,r2,4
1000a568:	2a3fff15 	stw	r8,-4(r5)
1000a56c:	10fffb36 	bltu	r2,r3,1000a55c <__alt_data_end+0xf800a55c>
1000a570:	1985c83a 	sub	r2,r3,r6
1000a574:	10bffac4 	addi	r2,r2,-21
1000a578:	1004d0ba 	srli	r2,r2,2
1000a57c:	10800044 	addi	r2,r2,1
1000a580:	1085883a 	add	r2,r2,r2
1000a584:	1085883a 	add	r2,r2,r2
1000a588:	2089883a 	add	r4,r4,r2
1000a58c:	21c0032e 	bgeu	r4,r7,1000a59c <__copybits+0x74>
1000a590:	20000015 	stw	zero,0(r4)
1000a594:	21000104 	addi	r4,r4,4
1000a598:	21fffd36 	bltu	r4,r7,1000a590 <__alt_data_end+0xf800a590>
1000a59c:	f800283a 	ret

1000a5a0 <__any_on>:
1000a5a0:	20c00417 	ldw	r3,16(r4)
1000a5a4:	2805d17a 	srai	r2,r5,5
1000a5a8:	21000504 	addi	r4,r4,20
1000a5ac:	18800d0e 	bge	r3,r2,1000a5e4 <__any_on+0x44>
1000a5b0:	18c7883a 	add	r3,r3,r3
1000a5b4:	18c7883a 	add	r3,r3,r3
1000a5b8:	20c7883a 	add	r3,r4,r3
1000a5bc:	20c0192e 	bgeu	r4,r3,1000a624 <__any_on+0x84>
1000a5c0:	18bfff17 	ldw	r2,-4(r3)
1000a5c4:	18ffff04 	addi	r3,r3,-4
1000a5c8:	1000041e 	bne	r2,zero,1000a5dc <__any_on+0x3c>
1000a5cc:	20c0142e 	bgeu	r4,r3,1000a620 <__any_on+0x80>
1000a5d0:	18ffff04 	addi	r3,r3,-4
1000a5d4:	19400017 	ldw	r5,0(r3)
1000a5d8:	283ffc26 	beq	r5,zero,1000a5cc <__alt_data_end+0xf800a5cc>
1000a5dc:	00800044 	movi	r2,1
1000a5e0:	f800283a 	ret
1000a5e4:	10c00a0e 	bge	r2,r3,1000a610 <__any_on+0x70>
1000a5e8:	1085883a 	add	r2,r2,r2
1000a5ec:	1085883a 	add	r2,r2,r2
1000a5f0:	294007cc 	andi	r5,r5,31
1000a5f4:	2087883a 	add	r3,r4,r2
1000a5f8:	283ff026 	beq	r5,zero,1000a5bc <__alt_data_end+0xf800a5bc>
1000a5fc:	19800017 	ldw	r6,0(r3)
1000a600:	3144d83a 	srl	r2,r6,r5
1000a604:	114a983a 	sll	r5,r2,r5
1000a608:	29bff41e 	bne	r5,r6,1000a5dc <__alt_data_end+0xf800a5dc>
1000a60c:	003feb06 	br	1000a5bc <__alt_data_end+0xf800a5bc>
1000a610:	1085883a 	add	r2,r2,r2
1000a614:	1085883a 	add	r2,r2,r2
1000a618:	2087883a 	add	r3,r4,r2
1000a61c:	003fe706 	br	1000a5bc <__alt_data_end+0xf800a5bc>
1000a620:	f800283a 	ret
1000a624:	0005883a 	mov	r2,zero
1000a628:	f800283a 	ret

1000a62c <__fpclassifyd>:
1000a62c:	00a00034 	movhi	r2,32768
1000a630:	10bfffc4 	addi	r2,r2,-1
1000a634:	2884703a 	and	r2,r5,r2
1000a638:	10000726 	beq	r2,zero,1000a658 <__fpclassifyd+0x2c>
1000a63c:	00fffc34 	movhi	r3,65520
1000a640:	019ff834 	movhi	r6,32736
1000a644:	28c7883a 	add	r3,r5,r3
1000a648:	31bfffc4 	addi	r6,r6,-1
1000a64c:	30c00536 	bltu	r6,r3,1000a664 <__fpclassifyd+0x38>
1000a650:	00800104 	movi	r2,4
1000a654:	f800283a 	ret
1000a658:	2000021e 	bne	r4,zero,1000a664 <__fpclassifyd+0x38>
1000a65c:	00800084 	movi	r2,2
1000a660:	f800283a 	ret
1000a664:	00dffc34 	movhi	r3,32752
1000a668:	019ff834 	movhi	r6,32736
1000a66c:	28cb883a 	add	r5,r5,r3
1000a670:	31bfffc4 	addi	r6,r6,-1
1000a674:	317ff62e 	bgeu	r6,r5,1000a650 <__alt_data_end+0xf800a650>
1000a678:	01400434 	movhi	r5,16
1000a67c:	297fffc4 	addi	r5,r5,-1
1000a680:	28800236 	bltu	r5,r2,1000a68c <__fpclassifyd+0x60>
1000a684:	008000c4 	movi	r2,3
1000a688:	f800283a 	ret
1000a68c:	10c00226 	beq	r2,r3,1000a698 <__fpclassifyd+0x6c>
1000a690:	0005883a 	mov	r2,zero
1000a694:	f800283a 	ret
1000a698:	2005003a 	cmpeq	r2,r4,zero
1000a69c:	f800283a 	ret

1000a6a0 <_sbrk_r>:
1000a6a0:	defffd04 	addi	sp,sp,-12
1000a6a4:	dc000015 	stw	r16,0(sp)
1000a6a8:	04040074 	movhi	r16,4097
1000a6ac:	dc400115 	stw	r17,4(sp)
1000a6b0:	84128b04 	addi	r16,r16,18988
1000a6b4:	2023883a 	mov	r17,r4
1000a6b8:	2809883a 	mov	r4,r5
1000a6bc:	dfc00215 	stw	ra,8(sp)
1000a6c0:	80000015 	stw	zero,0(r16)
1000a6c4:	000f1880 	call	1000f188 <sbrk>
1000a6c8:	00ffffc4 	movi	r3,-1
1000a6cc:	10c00526 	beq	r2,r3,1000a6e4 <_sbrk_r+0x44>
1000a6d0:	dfc00217 	ldw	ra,8(sp)
1000a6d4:	dc400117 	ldw	r17,4(sp)
1000a6d8:	dc000017 	ldw	r16,0(sp)
1000a6dc:	dec00304 	addi	sp,sp,12
1000a6e0:	f800283a 	ret
1000a6e4:	80c00017 	ldw	r3,0(r16)
1000a6e8:	183ff926 	beq	r3,zero,1000a6d0 <__alt_data_end+0xf800a6d0>
1000a6ec:	88c00015 	stw	r3,0(r17)
1000a6f0:	003ff706 	br	1000a6d0 <__alt_data_end+0xf800a6d0>

1000a6f4 <__sread>:
1000a6f4:	defffe04 	addi	sp,sp,-8
1000a6f8:	dc000015 	stw	r16,0(sp)
1000a6fc:	2821883a 	mov	r16,r5
1000a700:	2940038f 	ldh	r5,14(r5)
1000a704:	dfc00115 	stw	ra,4(sp)
1000a708:	000ca480 	call	1000ca48 <_read_r>
1000a70c:	10000716 	blt	r2,zero,1000a72c <__sread+0x38>
1000a710:	80c01417 	ldw	r3,80(r16)
1000a714:	1887883a 	add	r3,r3,r2
1000a718:	80c01415 	stw	r3,80(r16)
1000a71c:	dfc00117 	ldw	ra,4(sp)
1000a720:	dc000017 	ldw	r16,0(sp)
1000a724:	dec00204 	addi	sp,sp,8
1000a728:	f800283a 	ret
1000a72c:	80c0030b 	ldhu	r3,12(r16)
1000a730:	18fbffcc 	andi	r3,r3,61439
1000a734:	80c0030d 	sth	r3,12(r16)
1000a738:	dfc00117 	ldw	ra,4(sp)
1000a73c:	dc000017 	ldw	r16,0(sp)
1000a740:	dec00204 	addi	sp,sp,8
1000a744:	f800283a 	ret

1000a748 <__seofread>:
1000a748:	0005883a 	mov	r2,zero
1000a74c:	f800283a 	ret

1000a750 <__swrite>:
1000a750:	2880030b 	ldhu	r2,12(r5)
1000a754:	defffb04 	addi	sp,sp,-20
1000a758:	dcc00315 	stw	r19,12(sp)
1000a75c:	dc800215 	stw	r18,8(sp)
1000a760:	dc400115 	stw	r17,4(sp)
1000a764:	dc000015 	stw	r16,0(sp)
1000a768:	dfc00415 	stw	ra,16(sp)
1000a76c:	10c0400c 	andi	r3,r2,256
1000a770:	2821883a 	mov	r16,r5
1000a774:	2027883a 	mov	r19,r4
1000a778:	3025883a 	mov	r18,r6
1000a77c:	3823883a 	mov	r17,r7
1000a780:	18000526 	beq	r3,zero,1000a798 <__swrite+0x48>
1000a784:	2940038f 	ldh	r5,14(r5)
1000a788:	000d883a 	mov	r6,zero
1000a78c:	01c00084 	movi	r7,2
1000a790:	000c8900 	call	1000c890 <_lseek_r>
1000a794:	8080030b 	ldhu	r2,12(r16)
1000a798:	8140038f 	ldh	r5,14(r16)
1000a79c:	10bbffcc 	andi	r2,r2,61439
1000a7a0:	9809883a 	mov	r4,r19
1000a7a4:	900d883a 	mov	r6,r18
1000a7a8:	880f883a 	mov	r7,r17
1000a7ac:	8080030d 	sth	r2,12(r16)
1000a7b0:	dfc00417 	ldw	ra,16(sp)
1000a7b4:	dcc00317 	ldw	r19,12(sp)
1000a7b8:	dc800217 	ldw	r18,8(sp)
1000a7bc:	dc400117 	ldw	r17,4(sp)
1000a7c0:	dc000017 	ldw	r16,0(sp)
1000a7c4:	dec00504 	addi	sp,sp,20
1000a7c8:	000bec81 	jmpi	1000bec8 <_write_r>

1000a7cc <__sseek>:
1000a7cc:	defffe04 	addi	sp,sp,-8
1000a7d0:	dc000015 	stw	r16,0(sp)
1000a7d4:	2821883a 	mov	r16,r5
1000a7d8:	2940038f 	ldh	r5,14(r5)
1000a7dc:	dfc00115 	stw	ra,4(sp)
1000a7e0:	000c8900 	call	1000c890 <_lseek_r>
1000a7e4:	00ffffc4 	movi	r3,-1
1000a7e8:	10c00826 	beq	r2,r3,1000a80c <__sseek+0x40>
1000a7ec:	80c0030b 	ldhu	r3,12(r16)
1000a7f0:	80801415 	stw	r2,80(r16)
1000a7f4:	18c40014 	ori	r3,r3,4096
1000a7f8:	80c0030d 	sth	r3,12(r16)
1000a7fc:	dfc00117 	ldw	ra,4(sp)
1000a800:	dc000017 	ldw	r16,0(sp)
1000a804:	dec00204 	addi	sp,sp,8
1000a808:	f800283a 	ret
1000a80c:	80c0030b 	ldhu	r3,12(r16)
1000a810:	18fbffcc 	andi	r3,r3,61439
1000a814:	80c0030d 	sth	r3,12(r16)
1000a818:	dfc00117 	ldw	ra,4(sp)
1000a81c:	dc000017 	ldw	r16,0(sp)
1000a820:	dec00204 	addi	sp,sp,8
1000a824:	f800283a 	ret

1000a828 <__sclose>:
1000a828:	2940038f 	ldh	r5,14(r5)
1000a82c:	000bf241 	jmpi	1000bf24 <_close_r>

1000a830 <strcmp>:
1000a830:	2144b03a 	or	r2,r4,r5
1000a834:	108000cc 	andi	r2,r2,3
1000a838:	1000171e 	bne	r2,zero,1000a898 <strcmp+0x68>
1000a83c:	20800017 	ldw	r2,0(r4)
1000a840:	28c00017 	ldw	r3,0(r5)
1000a844:	10c0141e 	bne	r2,r3,1000a898 <strcmp+0x68>
1000a848:	027fbff4 	movhi	r9,65279
1000a84c:	4a7fbfc4 	addi	r9,r9,-257
1000a850:	0086303a 	nor	r3,zero,r2
1000a854:	02202074 	movhi	r8,32897
1000a858:	1245883a 	add	r2,r2,r9
1000a85c:	42202004 	addi	r8,r8,-32640
1000a860:	10c4703a 	and	r2,r2,r3
1000a864:	1204703a 	and	r2,r2,r8
1000a868:	10000226 	beq	r2,zero,1000a874 <strcmp+0x44>
1000a86c:	00001706 	br	1000a8cc <strcmp+0x9c>
1000a870:	1000161e 	bne	r2,zero,1000a8cc <strcmp+0x9c>
1000a874:	21000104 	addi	r4,r4,4
1000a878:	20c00017 	ldw	r3,0(r4)
1000a87c:	29400104 	addi	r5,r5,4
1000a880:	29800017 	ldw	r6,0(r5)
1000a884:	1a4f883a 	add	r7,r3,r9
1000a888:	00c4303a 	nor	r2,zero,r3
1000a88c:	3884703a 	and	r2,r7,r2
1000a890:	1204703a 	and	r2,r2,r8
1000a894:	19bff626 	beq	r3,r6,1000a870 <__alt_data_end+0xf800a870>
1000a898:	20800007 	ldb	r2,0(r4)
1000a89c:	1000051e 	bne	r2,zero,1000a8b4 <strcmp+0x84>
1000a8a0:	00000606 	br	1000a8bc <strcmp+0x8c>
1000a8a4:	21000044 	addi	r4,r4,1
1000a8a8:	20800007 	ldb	r2,0(r4)
1000a8ac:	29400044 	addi	r5,r5,1
1000a8b0:	10000226 	beq	r2,zero,1000a8bc <strcmp+0x8c>
1000a8b4:	28c00007 	ldb	r3,0(r5)
1000a8b8:	10fffa26 	beq	r2,r3,1000a8a4 <__alt_data_end+0xf800a8a4>
1000a8bc:	20800003 	ldbu	r2,0(r4)
1000a8c0:	28c00003 	ldbu	r3,0(r5)
1000a8c4:	10c5c83a 	sub	r2,r2,r3
1000a8c8:	f800283a 	ret
1000a8cc:	0005883a 	mov	r2,zero
1000a8d0:	f800283a 	ret

1000a8d4 <strlen>:
1000a8d4:	208000cc 	andi	r2,r4,3
1000a8d8:	10002026 	beq	r2,zero,1000a95c <strlen+0x88>
1000a8dc:	20800007 	ldb	r2,0(r4)
1000a8e0:	10002026 	beq	r2,zero,1000a964 <strlen+0x90>
1000a8e4:	2005883a 	mov	r2,r4
1000a8e8:	00000206 	br	1000a8f4 <strlen+0x20>
1000a8ec:	10c00007 	ldb	r3,0(r2)
1000a8f0:	18001826 	beq	r3,zero,1000a954 <strlen+0x80>
1000a8f4:	10800044 	addi	r2,r2,1
1000a8f8:	10c000cc 	andi	r3,r2,3
1000a8fc:	183ffb1e 	bne	r3,zero,1000a8ec <__alt_data_end+0xf800a8ec>
1000a900:	10c00017 	ldw	r3,0(r2)
1000a904:	01ffbff4 	movhi	r7,65279
1000a908:	39ffbfc4 	addi	r7,r7,-257
1000a90c:	00ca303a 	nor	r5,zero,r3
1000a910:	01a02074 	movhi	r6,32897
1000a914:	19c7883a 	add	r3,r3,r7
1000a918:	31a02004 	addi	r6,r6,-32640
1000a91c:	1946703a 	and	r3,r3,r5
1000a920:	1986703a 	and	r3,r3,r6
1000a924:	1800091e 	bne	r3,zero,1000a94c <strlen+0x78>
1000a928:	10800104 	addi	r2,r2,4
1000a92c:	10c00017 	ldw	r3,0(r2)
1000a930:	19cb883a 	add	r5,r3,r7
1000a934:	00c6303a 	nor	r3,zero,r3
1000a938:	28c6703a 	and	r3,r5,r3
1000a93c:	1986703a 	and	r3,r3,r6
1000a940:	183ff926 	beq	r3,zero,1000a928 <__alt_data_end+0xf800a928>
1000a944:	00000106 	br	1000a94c <strlen+0x78>
1000a948:	10800044 	addi	r2,r2,1
1000a94c:	10c00007 	ldb	r3,0(r2)
1000a950:	183ffd1e 	bne	r3,zero,1000a948 <__alt_data_end+0xf800a948>
1000a954:	1105c83a 	sub	r2,r2,r4
1000a958:	f800283a 	ret
1000a95c:	2005883a 	mov	r2,r4
1000a960:	003fe706 	br	1000a900 <__alt_data_end+0xf800a900>
1000a964:	0005883a 	mov	r2,zero
1000a968:	f800283a 	ret

1000a96c <__sprint_r.part.0>:
1000a96c:	28801917 	ldw	r2,100(r5)
1000a970:	defff604 	addi	sp,sp,-40
1000a974:	dd400515 	stw	r21,20(sp)
1000a978:	dcc00315 	stw	r19,12(sp)
1000a97c:	dfc00915 	stw	ra,36(sp)
1000a980:	df000815 	stw	fp,32(sp)
1000a984:	ddc00715 	stw	r23,28(sp)
1000a988:	dd800615 	stw	r22,24(sp)
1000a98c:	dd000415 	stw	r20,16(sp)
1000a990:	dc800215 	stw	r18,8(sp)
1000a994:	dc400115 	stw	r17,4(sp)
1000a998:	dc000015 	stw	r16,0(sp)
1000a99c:	1088000c 	andi	r2,r2,8192
1000a9a0:	2827883a 	mov	r19,r5
1000a9a4:	302b883a 	mov	r21,r6
1000a9a8:	10002d26 	beq	r2,zero,1000aa60 <__sprint_r.part.0+0xf4>
1000a9ac:	30800217 	ldw	r2,8(r6)
1000a9b0:	35800017 	ldw	r22,0(r6)
1000a9b4:	10002826 	beq	r2,zero,1000aa58 <__sprint_r.part.0+0xec>
1000a9b8:	2029883a 	mov	r20,r4
1000a9bc:	b5c00104 	addi	r23,r22,4
1000a9c0:	04bfffc4 	movi	r18,-1
1000a9c4:	bc400017 	ldw	r17,0(r23)
1000a9c8:	b4000017 	ldw	r16,0(r22)
1000a9cc:	0039883a 	mov	fp,zero
1000a9d0:	8822d0ba 	srli	r17,r17,2
1000a9d4:	04400316 	blt	zero,r17,1000a9e4 <__sprint_r.part.0+0x78>
1000a9d8:	00001706 	br	1000aa38 <__sprint_r.part.0+0xcc>
1000a9dc:	84000104 	addi	r16,r16,4
1000a9e0:	8f001526 	beq	r17,fp,1000aa38 <__sprint_r.part.0+0xcc>
1000a9e4:	81400017 	ldw	r5,0(r16)
1000a9e8:	a009883a 	mov	r4,r20
1000a9ec:	980d883a 	mov	r6,r19
1000a9f0:	000c1640 	call	1000c164 <_fputwc_r>
1000a9f4:	e7000044 	addi	fp,fp,1
1000a9f8:	14bff81e 	bne	r2,r18,1000a9dc <__alt_data_end+0xf800a9dc>
1000a9fc:	9005883a 	mov	r2,r18
1000aa00:	a8000215 	stw	zero,8(r21)
1000aa04:	a8000115 	stw	zero,4(r21)
1000aa08:	dfc00917 	ldw	ra,36(sp)
1000aa0c:	df000817 	ldw	fp,32(sp)
1000aa10:	ddc00717 	ldw	r23,28(sp)
1000aa14:	dd800617 	ldw	r22,24(sp)
1000aa18:	dd400517 	ldw	r21,20(sp)
1000aa1c:	dd000417 	ldw	r20,16(sp)
1000aa20:	dcc00317 	ldw	r19,12(sp)
1000aa24:	dc800217 	ldw	r18,8(sp)
1000aa28:	dc400117 	ldw	r17,4(sp)
1000aa2c:	dc000017 	ldw	r16,0(sp)
1000aa30:	dec00a04 	addi	sp,sp,40
1000aa34:	f800283a 	ret
1000aa38:	a8c00217 	ldw	r3,8(r21)
1000aa3c:	8c63883a 	add	r17,r17,r17
1000aa40:	8c63883a 	add	r17,r17,r17
1000aa44:	1c45c83a 	sub	r2,r3,r17
1000aa48:	a8800215 	stw	r2,8(r21)
1000aa4c:	b5800204 	addi	r22,r22,8
1000aa50:	bdc00204 	addi	r23,r23,8
1000aa54:	103fdb1e 	bne	r2,zero,1000a9c4 <__alt_data_end+0xf800a9c4>
1000aa58:	0005883a 	mov	r2,zero
1000aa5c:	003fe806 	br	1000aa00 <__alt_data_end+0xf800aa00>
1000aa60:	000c3980 	call	1000c398 <__sfvwrite_r>
1000aa64:	003fe606 	br	1000aa00 <__alt_data_end+0xf800aa00>

1000aa68 <__sprint_r>:
1000aa68:	30c00217 	ldw	r3,8(r6)
1000aa6c:	18000126 	beq	r3,zero,1000aa74 <__sprint_r+0xc>
1000aa70:	000a96c1 	jmpi	1000a96c <__sprint_r.part.0>
1000aa74:	30000115 	stw	zero,4(r6)
1000aa78:	0005883a 	mov	r2,zero
1000aa7c:	f800283a 	ret

1000aa80 <___vfiprintf_internal_r>:
1000aa80:	defeca04 	addi	sp,sp,-1240
1000aa84:	dcc12f15 	stw	r19,1212(sp)
1000aa88:	dfc13515 	stw	ra,1236(sp)
1000aa8c:	df013415 	stw	fp,1232(sp)
1000aa90:	ddc13315 	stw	r23,1228(sp)
1000aa94:	dd813215 	stw	r22,1224(sp)
1000aa98:	dd413115 	stw	r21,1220(sp)
1000aa9c:	dd013015 	stw	r20,1216(sp)
1000aaa0:	dc812e15 	stw	r18,1208(sp)
1000aaa4:	dc412d15 	stw	r17,1204(sp)
1000aaa8:	dc012c15 	stw	r16,1200(sp)
1000aaac:	d9012115 	stw	r4,1156(sp)
1000aab0:	d9412015 	stw	r5,1152(sp)
1000aab4:	d9c12315 	stw	r7,1164(sp)
1000aab8:	3027883a 	mov	r19,r6
1000aabc:	20000226 	beq	r4,zero,1000aac8 <___vfiprintf_internal_r+0x48>
1000aac0:	20800e17 	ldw	r2,56(r4)
1000aac4:	1000f726 	beq	r2,zero,1000aea4 <___vfiprintf_internal_r+0x424>
1000aac8:	d8812017 	ldw	r2,1152(sp)
1000aacc:	10c0030b 	ldhu	r3,12(r2)
1000aad0:	1908000c 	andi	r4,r3,8192
1000aad4:	1805883a 	mov	r2,r3
1000aad8:	2000081e 	bne	r4,zero,1000aafc <___vfiprintf_internal_r+0x7c>
1000aadc:	d9412017 	ldw	r5,1152(sp)
1000aae0:	18880014 	ori	r2,r3,8192
1000aae4:	00f7ffc4 	movi	r3,-8193
1000aae8:	29001917 	ldw	r4,100(r5)
1000aaec:	2880030d 	sth	r2,12(r5)
1000aaf0:	20c8703a 	and	r4,r4,r3
1000aaf4:	29001915 	stw	r4,100(r5)
1000aaf8:	1007883a 	mov	r3,r2
1000aafc:	1100020c 	andi	r4,r2,8
1000ab00:	2000a726 	beq	r4,zero,1000ada0 <___vfiprintf_internal_r+0x320>
1000ab04:	d9412017 	ldw	r5,1152(sp)
1000ab08:	29000417 	ldw	r4,16(r5)
1000ab0c:	2000a426 	beq	r4,zero,1000ada0 <___vfiprintf_internal_r+0x320>
1000ab10:	1080068c 	andi	r2,r2,26
1000ab14:	01000284 	movi	r4,10
1000ab18:	1100ab26 	beq	r2,r4,1000adc8 <___vfiprintf_internal_r+0x348>
1000ab1c:	d9010a04 	addi	r4,sp,1064
1000ab20:	d94109c4 	addi	r5,sp,1063
1000ab24:	07040074 	movhi	fp,4097
1000ab28:	04440074 	movhi	r17,4097
1000ab2c:	2145c83a 	sub	r2,r4,r5
1000ab30:	e704ef04 	addi	fp,fp,5052
1000ab34:	8c44eb04 	addi	r17,r17,5036
1000ab38:	d9011e15 	stw	r4,1144(sp)
1000ab3c:	d9411f15 	stw	r5,1148(sp)
1000ab40:	dec11a15 	stw	sp,1128(sp)
1000ab44:	d8011c15 	stw	zero,1136(sp)
1000ab48:	d8011b15 	stw	zero,1132(sp)
1000ab4c:	d8012715 	stw	zero,1180(sp)
1000ab50:	d8012515 	stw	zero,1172(sp)
1000ab54:	d811883a 	mov	r8,sp
1000ab58:	d8812815 	stw	r2,1184(sp)
1000ab5c:	982f883a 	mov	r23,r19
1000ab60:	b8800007 	ldb	r2,0(r23)
1000ab64:	1003b026 	beq	r2,zero,1000ba28 <___vfiprintf_internal_r+0xfa8>
1000ab68:	01000944 	movi	r4,37
1000ab6c:	1103ae26 	beq	r2,r4,1000ba28 <___vfiprintf_internal_r+0xfa8>
1000ab70:	b805883a 	mov	r2,r23
1000ab74:	00000106 	br	1000ab7c <___vfiprintf_internal_r+0xfc>
1000ab78:	19000326 	beq	r3,r4,1000ab88 <___vfiprintf_internal_r+0x108>
1000ab7c:	10800044 	addi	r2,r2,1
1000ab80:	10c00007 	ldb	r3,0(r2)
1000ab84:	183ffc1e 	bne	r3,zero,1000ab78 <__alt_data_end+0xf800ab78>
1000ab88:	15e1c83a 	sub	r16,r2,r23
1000ab8c:	1029883a 	mov	r20,r2
1000ab90:	80001026 	beq	r16,zero,1000abd4 <___vfiprintf_internal_r+0x154>
1000ab94:	d8c11c17 	ldw	r3,1136(sp)
1000ab98:	d8811b17 	ldw	r2,1132(sp)
1000ab9c:	45c00015 	stw	r23,0(r8)
1000aba0:	80c7883a 	add	r3,r16,r3
1000aba4:	10800044 	addi	r2,r2,1
1000aba8:	44000115 	stw	r16,4(r8)
1000abac:	d8c11c15 	stw	r3,1136(sp)
1000abb0:	d8811b15 	stw	r2,1132(sp)
1000abb4:	010001c4 	movi	r4,7
1000abb8:	2080740e 	bge	r4,r2,1000ad8c <___vfiprintf_internal_r+0x30c>
1000abbc:	1803a71e 	bne	r3,zero,1000ba5c <___vfiprintf_internal_r+0xfdc>
1000abc0:	d8c12517 	ldw	r3,1172(sp)
1000abc4:	d8011b15 	stw	zero,1132(sp)
1000abc8:	d811883a 	mov	r8,sp
1000abcc:	1c07883a 	add	r3,r3,r16
1000abd0:	d8c12515 	stw	r3,1172(sp)
1000abd4:	a0800007 	ldb	r2,0(r20)
1000abd8:	1002bf26 	beq	r2,zero,1000b6d8 <___vfiprintf_internal_r+0xc58>
1000abdc:	a5c00044 	addi	r23,r20,1
1000abe0:	a1800047 	ldb	r6,1(r20)
1000abe4:	d8011d85 	stb	zero,1142(sp)
1000abe8:	d8012205 	stb	zero,1160(sp)
1000abec:	043fffc4 	movi	r16,-1
1000abf0:	d8012415 	stw	zero,1168(sp)
1000abf4:	0025883a 	mov	r18,zero
1000abf8:	05001604 	movi	r20,88
1000abfc:	05400244 	movi	r21,9
1000ac00:	4027883a 	mov	r19,r8
1000ac04:	bdc00044 	addi	r23,r23,1
1000ac08:	30bff804 	addi	r2,r6,-32
1000ac0c:	a0825636 	bltu	r20,r2,1000b568 <___vfiprintf_internal_r+0xae8>
1000ac10:	100490ba 	slli	r2,r2,2
1000ac14:	01040074 	movhi	r4,4097
1000ac18:	212b0a04 	addi	r4,r4,-21464
1000ac1c:	1105883a 	add	r2,r2,r4
1000ac20:	10800017 	ldw	r2,0(r2)
1000ac24:	1000683a 	jmp	r2
1000ac28:	1000b4f8 	rdprs	zero,r2,723
1000ac2c:	1000b568 	cmpgeui	zero,r2,725
1000ac30:	1000b568 	cmpgeui	zero,r2,725
1000ac34:	1000b55c 	xori	zero,r2,725
1000ac38:	1000b568 	cmpgeui	zero,r2,725
1000ac3c:	1000b568 	cmpgeui	zero,r2,725
1000ac40:	1000b568 	cmpgeui	zero,r2,725
1000ac44:	1000b568 	cmpgeui	zero,r2,725
1000ac48:	1000b568 	cmpgeui	zero,r2,725
1000ac4c:	1000b568 	cmpgeui	zero,r2,725
1000ac50:	1000b2e8 	cmpgeui	zero,r2,715
1000ac54:	1000b510 	cmplti	zero,r2,724
1000ac58:	1000b568 	cmpgeui	zero,r2,725
1000ac5c:	1000aebc 	xorhi	zero,r2,698
1000ac60:	1000b30c 	andi	zero,r2,716
1000ac64:	1000b568 	cmpgeui	zero,r2,725
1000ac68:	1000aec8 	cmpgei	zero,r2,699
1000ac6c:	1000aed4 	ori	zero,r2,699
1000ac70:	1000aed4 	ori	zero,r2,699
1000ac74:	1000aed4 	ori	zero,r2,699
1000ac78:	1000aed4 	ori	zero,r2,699
1000ac7c:	1000aed4 	ori	zero,r2,699
1000ac80:	1000aed4 	ori	zero,r2,699
1000ac84:	1000aed4 	ori	zero,r2,699
1000ac88:	1000aed4 	ori	zero,r2,699
1000ac8c:	1000aed4 	ori	zero,r2,699
1000ac90:	1000b568 	cmpgeui	zero,r2,725
1000ac94:	1000b568 	cmpgeui	zero,r2,725
1000ac98:	1000b568 	cmpgeui	zero,r2,725
1000ac9c:	1000b568 	cmpgeui	zero,r2,725
1000aca0:	1000b568 	cmpgeui	zero,r2,725
1000aca4:	1000b568 	cmpgeui	zero,r2,725
1000aca8:	1000b568 	cmpgeui	zero,r2,725
1000acac:	1000b568 	cmpgeui	zero,r2,725
1000acb0:	1000b568 	cmpgeui	zero,r2,725
1000acb4:	1000b568 	cmpgeui	zero,r2,725
1000acb8:	1000af14 	ori	zero,r2,700
1000acbc:	1000b568 	cmpgeui	zero,r2,725
1000acc0:	1000b568 	cmpgeui	zero,r2,725
1000acc4:	1000b568 	cmpgeui	zero,r2,725
1000acc8:	1000b568 	cmpgeui	zero,r2,725
1000accc:	1000b568 	cmpgeui	zero,r2,725
1000acd0:	1000b568 	cmpgeui	zero,r2,725
1000acd4:	1000b568 	cmpgeui	zero,r2,725
1000acd8:	1000b568 	cmpgeui	zero,r2,725
1000acdc:	1000b568 	cmpgeui	zero,r2,725
1000ace0:	1000b568 	cmpgeui	zero,r2,725
1000ace4:	1000b204 	addi	zero,r2,712
1000ace8:	1000b568 	cmpgeui	zero,r2,725
1000acec:	1000b568 	cmpgeui	zero,r2,725
1000acf0:	1000b568 	cmpgeui	zero,r2,725
1000acf4:	1000b568 	cmpgeui	zero,r2,725
1000acf8:	1000b568 	cmpgeui	zero,r2,725
1000acfc:	1000b244 	addi	zero,r2,713
1000ad00:	1000b568 	cmpgeui	zero,r2,725
1000ad04:	1000b568 	cmpgeui	zero,r2,725
1000ad08:	1000b288 	cmpgei	zero,r2,714
1000ad0c:	1000b568 	cmpgeui	zero,r2,725
1000ad10:	1000b568 	cmpgeui	zero,r2,725
1000ad14:	1000b568 	cmpgeui	zero,r2,725
1000ad18:	1000b568 	cmpgeui	zero,r2,725
1000ad1c:	1000b568 	cmpgeui	zero,r2,725
1000ad20:	1000b568 	cmpgeui	zero,r2,725
1000ad24:	1000b568 	cmpgeui	zero,r2,725
1000ad28:	1000b568 	cmpgeui	zero,r2,725
1000ad2c:	1000b568 	cmpgeui	zero,r2,725
1000ad30:	1000b568 	cmpgeui	zero,r2,725
1000ad34:	1000b1d0 	cmplti	zero,r2,711
1000ad38:	1000b520 	cmpeqi	zero,r2,724
1000ad3c:	1000b568 	cmpgeui	zero,r2,725
1000ad40:	1000b568 	cmpgeui	zero,r2,725
1000ad44:	1000b568 	cmpgeui	zero,r2,725
1000ad48:	1000b35c 	xori	zero,r2,717
1000ad4c:	1000b520 	cmpeqi	zero,r2,724
1000ad50:	1000b568 	cmpgeui	zero,r2,725
1000ad54:	1000b568 	cmpgeui	zero,r2,725
1000ad58:	1000b274 	orhi	zero,r2,713
1000ad5c:	1000b568 	cmpgeui	zero,r2,725
1000ad60:	1000b4c0 	call	11000b4c <_gp+0xfe5ca0>
1000ad64:	1000b448 	cmpgei	zero,r2,721
1000ad68:	1000b47c 	xorhi	zero,r2,721
1000ad6c:	1000b368 	cmpgeui	zero,r2,717
1000ad70:	1000b568 	cmpgeui	zero,r2,725
1000ad74:	1000b374 	orhi	zero,r2,717
1000ad78:	1000b568 	cmpgeui	zero,r2,725
1000ad7c:	1000b3d0 	cmplti	zero,r2,719
1000ad80:	1000b568 	cmpgeui	zero,r2,725
1000ad84:	1000b568 	cmpgeui	zero,r2,725
1000ad88:	1000b404 	addi	zero,r2,720
1000ad8c:	42000204 	addi	r8,r8,8
1000ad90:	d8c12517 	ldw	r3,1172(sp)
1000ad94:	1c07883a 	add	r3,r3,r16
1000ad98:	d8c12515 	stw	r3,1172(sp)
1000ad9c:	003f8d06 	br	1000abd4 <__alt_data_end+0xf800abd4>
1000ada0:	d9012117 	ldw	r4,1156(sp)
1000ada4:	d9412017 	ldw	r5,1152(sp)
1000ada8:	00062500 	call	10006250 <__swsetup_r>
1000adac:	1000301e 	bne	r2,zero,1000ae70 <___vfiprintf_internal_r+0x3f0>
1000adb0:	d8812017 	ldw	r2,1152(sp)
1000adb4:	01000284 	movi	r4,10
1000adb8:	10c0030b 	ldhu	r3,12(r2)
1000adbc:	1805883a 	mov	r2,r3
1000adc0:	1080068c 	andi	r2,r2,26
1000adc4:	113f551e 	bne	r2,r4,1000ab1c <__alt_data_end+0xf800ab1c>
1000adc8:	d9012017 	ldw	r4,1152(sp)
1000adcc:	2080038b 	ldhu	r2,14(r4)
1000add0:	113fffcc 	andi	r4,r2,65535
1000add4:	2120001c 	xori	r4,r4,32768
1000add8:	21200004 	addi	r4,r4,-32768
1000addc:	203f4f16 	blt	r4,zero,1000ab1c <__alt_data_end+0xf800ab1c>
1000ade0:	d9412017 	ldw	r5,1152(sp)
1000ade4:	d9012117 	ldw	r4,1156(sp)
1000ade8:	d9c12317 	ldw	r7,1164(sp)
1000adec:	2b001917 	ldw	r12,100(r5)
1000adf0:	2ac00717 	ldw	r11,28(r5)
1000adf4:	2a800917 	ldw	r10,36(r5)
1000adf8:	02010004 	movi	r8,1024
1000adfc:	18ffff4c 	andi	r3,r3,65533
1000ae00:	da0b883a 	add	r5,sp,r8
1000ae04:	980d883a 	mov	r6,r19
1000ae08:	d8c1030d 	sth	r3,1036(sp)
1000ae0c:	db011915 	stw	r12,1124(sp)
1000ae10:	d881038d 	sth	r2,1038(sp)
1000ae14:	dac10715 	stw	r11,1052(sp)
1000ae18:	da810915 	stw	r10,1060(sp)
1000ae1c:	dec10015 	stw	sp,1024(sp)
1000ae20:	dec10415 	stw	sp,1040(sp)
1000ae24:	da010215 	stw	r8,1032(sp)
1000ae28:	da010515 	stw	r8,1044(sp)
1000ae2c:	d8010615 	stw	zero,1048(sp)
1000ae30:	000aa800 	call	1000aa80 <___vfiprintf_internal_r>
1000ae34:	1021883a 	mov	r16,r2
1000ae38:	10000416 	blt	r2,zero,1000ae4c <___vfiprintf_internal_r+0x3cc>
1000ae3c:	d9012117 	ldw	r4,1156(sp)
1000ae40:	d9410004 	addi	r5,sp,1024
1000ae44:	0007cd00 	call	10007cd0 <_fflush_r>
1000ae48:	10040f1e 	bne	r2,zero,1000be88 <___vfiprintf_internal_r+0x1408>
1000ae4c:	d881030b 	ldhu	r2,1036(sp)
1000ae50:	1080100c 	andi	r2,r2,64
1000ae54:	10000426 	beq	r2,zero,1000ae68 <___vfiprintf_internal_r+0x3e8>
1000ae58:	d8c12017 	ldw	r3,1152(sp)
1000ae5c:	1880030b 	ldhu	r2,12(r3)
1000ae60:	10801014 	ori	r2,r2,64
1000ae64:	1880030d 	sth	r2,12(r3)
1000ae68:	8005883a 	mov	r2,r16
1000ae6c:	00000106 	br	1000ae74 <___vfiprintf_internal_r+0x3f4>
1000ae70:	00bfffc4 	movi	r2,-1
1000ae74:	dfc13517 	ldw	ra,1236(sp)
1000ae78:	df013417 	ldw	fp,1232(sp)
1000ae7c:	ddc13317 	ldw	r23,1228(sp)
1000ae80:	dd813217 	ldw	r22,1224(sp)
1000ae84:	dd413117 	ldw	r21,1220(sp)
1000ae88:	dd013017 	ldw	r20,1216(sp)
1000ae8c:	dcc12f17 	ldw	r19,1212(sp)
1000ae90:	dc812e17 	ldw	r18,1208(sp)
1000ae94:	dc412d17 	ldw	r17,1204(sp)
1000ae98:	dc012c17 	ldw	r16,1200(sp)
1000ae9c:	dec13604 	addi	sp,sp,1240
1000aea0:	f800283a 	ret
1000aea4:	000828c0 	call	1000828c <__sinit>
1000aea8:	003f0706 	br	1000aac8 <__alt_data_end+0xf800aac8>
1000aeac:	d8c12417 	ldw	r3,1168(sp)
1000aeb0:	d8812315 	stw	r2,1164(sp)
1000aeb4:	00c7c83a 	sub	r3,zero,r3
1000aeb8:	d8c12415 	stw	r3,1168(sp)
1000aebc:	94800114 	ori	r18,r18,4
1000aec0:	b9800007 	ldb	r6,0(r23)
1000aec4:	003f4f06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000aec8:	94802014 	ori	r18,r18,128
1000aecc:	b9800007 	ldb	r6,0(r23)
1000aed0:	003f4c06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000aed4:	dc012615 	stw	r16,1176(sp)
1000aed8:	d8012415 	stw	zero,1168(sp)
1000aedc:	35bff404 	addi	r22,r6,-48
1000aee0:	0009883a 	mov	r4,zero
1000aee4:	b821883a 	mov	r16,r23
1000aee8:	01400284 	movi	r5,10
1000aeec:	0002cfc0 	call	10002cfc <__mulsi3>
1000aef0:	81800007 	ldb	r6,0(r16)
1000aef4:	1589883a 	add	r4,r2,r22
1000aef8:	bdc00044 	addi	r23,r23,1
1000aefc:	35bff404 	addi	r22,r6,-48
1000af00:	b821883a 	mov	r16,r23
1000af04:	adbff82e 	bgeu	r21,r22,1000aee8 <__alt_data_end+0xf800aee8>
1000af08:	d9012415 	stw	r4,1168(sp)
1000af0c:	dc012617 	ldw	r16,1176(sp)
1000af10:	003f3d06 	br	1000ac08 <__alt_data_end+0xf800ac08>
1000af14:	d8c12203 	ldbu	r3,1160(sp)
1000af18:	94800414 	ori	r18,r18,16
1000af1c:	9080080c 	andi	r2,r18,32
1000af20:	d8c11d85 	stb	r3,1142(sp)
1000af24:	9811883a 	mov	r8,r19
1000af28:	d8c12317 	ldw	r3,1164(sp)
1000af2c:	10018226 	beq	r2,zero,1000b538 <___vfiprintf_internal_r+0xab8>
1000af30:	d9012317 	ldw	r4,1164(sp)
1000af34:	18800117 	ldw	r2,4(r3)
1000af38:	1cc00017 	ldw	r19,0(r3)
1000af3c:	21000204 	addi	r4,r4,8
1000af40:	d9012315 	stw	r4,1164(sp)
1000af44:	102b883a 	mov	r21,r2
1000af48:	10030016 	blt	r2,zero,1000bb4c <___vfiprintf_internal_r+0x10cc>
1000af4c:	dd811d83 	ldbu	r22,1142(sp)
1000af50:	8029883a 	mov	r20,r16
1000af54:	00800044 	movi	r2,1
1000af58:	9d46b03a 	or	r3,r19,r21
1000af5c:	80000216 	blt	r16,zero,1000af68 <___vfiprintf_internal_r+0x4e8>
1000af60:	013fdfc4 	movi	r4,-129
1000af64:	9124703a 	and	r18,r18,r4
1000af68:	1801b41e 	bne	r3,zero,1000b63c <___vfiprintf_internal_r+0xbbc>
1000af6c:	80028126 	beq	r16,zero,1000b974 <___vfiprintf_internal_r+0xef4>
1000af70:	10803fcc 	andi	r2,r2,255
1000af74:	00c00044 	movi	r3,1
1000af78:	10c1d126 	beq	r2,r3,1000b6c0 <___vfiprintf_internal_r+0xc40>
1000af7c:	00c00084 	movi	r3,2
1000af80:	10c28626 	beq	r2,r3,1000b99c <___vfiprintf_internal_r+0xf1c>
1000af84:	d8c10a04 	addi	r3,sp,1064
1000af88:	9808d0fa 	srli	r4,r19,3
1000af8c:	a80a977a 	slli	r5,r21,29
1000af90:	a82ad0fa 	srli	r21,r21,3
1000af94:	9cc001cc 	andi	r19,r19,7
1000af98:	98800c04 	addi	r2,r19,48
1000af9c:	18ffffc4 	addi	r3,r3,-1
1000afa0:	2926b03a 	or	r19,r5,r4
1000afa4:	18800005 	stb	r2,0(r3)
1000afa8:	9d48b03a 	or	r4,r19,r21
1000afac:	203ff61e 	bne	r4,zero,1000af88 <__alt_data_end+0xf800af88>
1000afb0:	9100004c 	andi	r4,r18,1
1000afb4:	d8c12215 	stw	r3,1160(sp)
1000afb8:	2002b31e 	bne	r4,zero,1000ba88 <___vfiprintf_internal_r+0x1008>
1000afbc:	d9411e17 	ldw	r5,1144(sp)
1000afc0:	28e9c83a 	sub	r20,r5,r3
1000afc4:	a02b883a 	mov	r21,r20
1000afc8:	a400010e 	bge	r20,r16,1000afd0 <___vfiprintf_internal_r+0x550>
1000afcc:	802b883a 	mov	r21,r16
1000afd0:	b5803fcc 	andi	r22,r22,255
1000afd4:	b580201c 	xori	r22,r22,128
1000afd8:	b5bfe004 	addi	r22,r22,-128
1000afdc:	b0000126 	beq	r22,zero,1000afe4 <___vfiprintf_internal_r+0x564>
1000afe0:	ad400044 	addi	r21,r21,1
1000afe4:	9280008c 	andi	r10,r18,2
1000afe8:	50000126 	beq	r10,zero,1000aff0 <___vfiprintf_internal_r+0x570>
1000afec:	ad400084 	addi	r21,r21,2
1000aff0:	9580210c 	andi	r22,r18,132
1000aff4:	b001751e 	bne	r22,zero,1000b5cc <___vfiprintf_internal_r+0xb4c>
1000aff8:	d9012417 	ldw	r4,1168(sp)
1000affc:	2567c83a 	sub	r19,r4,r21
1000b000:	04c1720e 	bge	zero,r19,1000b5cc <___vfiprintf_internal_r+0xb4c>
1000b004:	01c00404 	movi	r7,16
1000b008:	d8c11c17 	ldw	r3,1136(sp)
1000b00c:	3cc36b0e 	bge	r7,r19,1000bdbc <___vfiprintf_internal_r+0x133c>
1000b010:	00840074 	movhi	r2,4097
1000b014:	1084ef04 	addi	r2,r2,5052
1000b018:	dc012915 	stw	r16,1188(sp)
1000b01c:	d9011b17 	ldw	r4,1132(sp)
1000b020:	9821883a 	mov	r16,r19
1000b024:	d8812615 	stw	r2,1176(sp)
1000b028:	030001c4 	movi	r12,7
1000b02c:	5027883a 	mov	r19,r10
1000b030:	00000506 	br	1000b048 <___vfiprintf_internal_r+0x5c8>
1000b034:	21400084 	addi	r5,r4,2
1000b038:	42000204 	addi	r8,r8,8
1000b03c:	1009883a 	mov	r4,r2
1000b040:	843ffc04 	addi	r16,r16,-16
1000b044:	3c000d0e 	bge	r7,r16,1000b07c <___vfiprintf_internal_r+0x5fc>
1000b048:	18c00404 	addi	r3,r3,16
1000b04c:	20800044 	addi	r2,r4,1
1000b050:	47000015 	stw	fp,0(r8)
1000b054:	41c00115 	stw	r7,4(r8)
1000b058:	d8c11c15 	stw	r3,1136(sp)
1000b05c:	d8811b15 	stw	r2,1132(sp)
1000b060:	60bff40e 	bge	r12,r2,1000b034 <__alt_data_end+0xf800b034>
1000b064:	18014b1e 	bne	r3,zero,1000b594 <___vfiprintf_internal_r+0xb14>
1000b068:	843ffc04 	addi	r16,r16,-16
1000b06c:	0009883a 	mov	r4,zero
1000b070:	01400044 	movi	r5,1
1000b074:	d811883a 	mov	r8,sp
1000b078:	3c3ff316 	blt	r7,r16,1000b048 <__alt_data_end+0xf800b048>
1000b07c:	9815883a 	mov	r10,r19
1000b080:	8027883a 	mov	r19,r16
1000b084:	dc012917 	ldw	r16,1188(sp)
1000b088:	d9012617 	ldw	r4,1176(sp)
1000b08c:	98c7883a 	add	r3,r19,r3
1000b090:	44c00115 	stw	r19,4(r8)
1000b094:	41000015 	stw	r4,0(r8)
1000b098:	d8c11c15 	stw	r3,1136(sp)
1000b09c:	d9411b15 	stw	r5,1132(sp)
1000b0a0:	008001c4 	movi	r2,7
1000b0a4:	11425116 	blt	r2,r5,1000b9ec <___vfiprintf_internal_r+0xf6c>
1000b0a8:	d9011d87 	ldb	r4,1142(sp)
1000b0ac:	42000204 	addi	r8,r8,8
1000b0b0:	28800044 	addi	r2,r5,1
1000b0b4:	20014a1e 	bne	r4,zero,1000b5e0 <___vfiprintf_internal_r+0xb60>
1000b0b8:	50000c26 	beq	r10,zero,1000b0ec <___vfiprintf_internal_r+0x66c>
1000b0bc:	d9011d04 	addi	r4,sp,1140
1000b0c0:	18c00084 	addi	r3,r3,2
1000b0c4:	41000015 	stw	r4,0(r8)
1000b0c8:	01000084 	movi	r4,2
1000b0cc:	41000115 	stw	r4,4(r8)
1000b0d0:	d8c11c15 	stw	r3,1136(sp)
1000b0d4:	d8811b15 	stw	r2,1132(sp)
1000b0d8:	010001c4 	movi	r4,7
1000b0dc:	20822016 	blt	r4,r2,1000b960 <___vfiprintf_internal_r+0xee0>
1000b0e0:	100b883a 	mov	r5,r2
1000b0e4:	42000204 	addi	r8,r8,8
1000b0e8:	10800044 	addi	r2,r2,1
1000b0ec:	01002004 	movi	r4,128
1000b0f0:	b101de26 	beq	r22,r4,1000b86c <___vfiprintf_internal_r+0xdec>
1000b0f4:	8521c83a 	sub	r16,r16,r20
1000b0f8:	0400230e 	bge	zero,r16,1000b188 <___vfiprintf_internal_r+0x708>
1000b0fc:	04c00404 	movi	r19,16
1000b100:	9c030d0e 	bge	r19,r16,1000bd38 <___vfiprintf_internal_r+0x12b8>
1000b104:	00840074 	movhi	r2,4097
1000b108:	1084eb04 	addi	r2,r2,5036
1000b10c:	d8812615 	stw	r2,1176(sp)
1000b110:	058001c4 	movi	r22,7
1000b114:	00000506 	br	1000b12c <___vfiprintf_internal_r+0x6ac>
1000b118:	28800084 	addi	r2,r5,2
1000b11c:	42000204 	addi	r8,r8,8
1000b120:	200b883a 	mov	r5,r4
1000b124:	843ffc04 	addi	r16,r16,-16
1000b128:	9c000d0e 	bge	r19,r16,1000b160 <___vfiprintf_internal_r+0x6e0>
1000b12c:	18c00404 	addi	r3,r3,16
1000b130:	29000044 	addi	r4,r5,1
1000b134:	44400015 	stw	r17,0(r8)
1000b138:	44c00115 	stw	r19,4(r8)
1000b13c:	d8c11c15 	stw	r3,1136(sp)
1000b140:	d9011b15 	stw	r4,1132(sp)
1000b144:	b13ff40e 	bge	r22,r4,1000b118 <__alt_data_end+0xf800b118>
1000b148:	1801321e 	bne	r3,zero,1000b614 <___vfiprintf_internal_r+0xb94>
1000b14c:	843ffc04 	addi	r16,r16,-16
1000b150:	000b883a 	mov	r5,zero
1000b154:	00800044 	movi	r2,1
1000b158:	d811883a 	mov	r8,sp
1000b15c:	9c3ff316 	blt	r19,r16,1000b12c <__alt_data_end+0xf800b12c>
1000b160:	d9012617 	ldw	r4,1176(sp)
1000b164:	1c07883a 	add	r3,r3,r16
1000b168:	44000115 	stw	r16,4(r8)
1000b16c:	41000015 	stw	r4,0(r8)
1000b170:	d8c11c15 	stw	r3,1136(sp)
1000b174:	d8811b15 	stw	r2,1132(sp)
1000b178:	010001c4 	movi	r4,7
1000b17c:	20816216 	blt	r4,r2,1000b708 <___vfiprintf_internal_r+0xc88>
1000b180:	42000204 	addi	r8,r8,8
1000b184:	10800044 	addi	r2,r2,1
1000b188:	d9012217 	ldw	r4,1160(sp)
1000b18c:	1d07883a 	add	r3,r3,r20
1000b190:	45000115 	stw	r20,4(r8)
1000b194:	41000015 	stw	r4,0(r8)
1000b198:	d8c11c15 	stw	r3,1136(sp)
1000b19c:	d8811b15 	stw	r2,1132(sp)
1000b1a0:	010001c4 	movi	r4,7
1000b1a4:	2081610e 	bge	r4,r2,1000b72c <___vfiprintf_internal_r+0xcac>
1000b1a8:	1802211e 	bne	r3,zero,1000ba30 <___vfiprintf_internal_r+0xfb0>
1000b1ac:	d8011b15 	stw	zero,1132(sp)
1000b1b0:	9480010c 	andi	r18,r18,4
1000b1b4:	9002171e 	bne	r18,zero,1000ba14 <___vfiprintf_internal_r+0xf94>
1000b1b8:	d9412417 	ldw	r5,1168(sp)
1000b1bc:	a9433716 	blt	r21,r5,1000be9c <___vfiprintf_internal_r+0x141c>
1000b1c0:	d8812517 	ldw	r2,1172(sp)
1000b1c4:	1545883a 	add	r2,r2,r21
1000b1c8:	d8812515 	stw	r2,1172(sp)
1000b1cc:	00019a06 	br	1000b838 <___vfiprintf_internal_r+0xdb8>
1000b1d0:	d8c12317 	ldw	r3,1164(sp)
1000b1d4:	05400044 	movi	r21,1
1000b1d8:	9811883a 	mov	r8,r19
1000b1dc:	18800017 	ldw	r2,0(r3)
1000b1e0:	18c00104 	addi	r3,r3,4
1000b1e4:	d8c12315 	stw	r3,1164(sp)
1000b1e8:	d8c10004 	addi	r3,sp,1024
1000b1ec:	d8011d85 	stb	zero,1142(sp)
1000b1f0:	d8810005 	stb	r2,1024(sp)
1000b1f4:	a829883a 	mov	r20,r21
1000b1f8:	d8c12215 	stw	r3,1160(sp)
1000b1fc:	0021883a 	mov	r16,zero
1000b200:	003f7806 	br	1000afe4 <__alt_data_end+0xf800afe4>
1000b204:	94800414 	ori	r18,r18,16
1000b208:	9080080c 	andi	r2,r18,32
1000b20c:	9811883a 	mov	r8,r19
1000b210:	10009026 	beq	r2,zero,1000b454 <___vfiprintf_internal_r+0x9d4>
1000b214:	d8812317 	ldw	r2,1164(sp)
1000b218:	d8c12317 	ldw	r3,1164(sp)
1000b21c:	14c00017 	ldw	r19,0(r2)
1000b220:	15400117 	ldw	r21,4(r2)
1000b224:	18c00204 	addi	r3,r3,8
1000b228:	d8c12315 	stw	r3,1164(sp)
1000b22c:	0005883a 	mov	r2,zero
1000b230:	9d46b03a 	or	r3,r19,r21
1000b234:	d8011d85 	stb	zero,1142(sp)
1000b238:	8029883a 	mov	r20,r16
1000b23c:	002d883a 	mov	r22,zero
1000b240:	003f4606 	br	1000af5c <__alt_data_end+0xf800af5c>
1000b244:	94800414 	ori	r18,r18,16
1000b248:	9080080c 	andi	r2,r18,32
1000b24c:	9811883a 	mov	r8,r19
1000b250:	10006226 	beq	r2,zero,1000b3dc <___vfiprintf_internal_r+0x95c>
1000b254:	d9012317 	ldw	r4,1164(sp)
1000b258:	00800044 	movi	r2,1
1000b25c:	24c00017 	ldw	r19,0(r4)
1000b260:	25400117 	ldw	r21,4(r4)
1000b264:	21000204 	addi	r4,r4,8
1000b268:	d9012315 	stw	r4,1164(sp)
1000b26c:	9d46b03a 	or	r3,r19,r21
1000b270:	003ff006 	br	1000b234 <__alt_data_end+0xf800b234>
1000b274:	b9800007 	ldb	r6,0(r23)
1000b278:	00801b04 	movi	r2,108
1000b27c:	3082b226 	beq	r6,r2,1000bd48 <___vfiprintf_internal_r+0x12c8>
1000b280:	94800414 	ori	r18,r18,16
1000b284:	003e5f06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b288:	d8c12203 	ldbu	r3,1160(sp)
1000b28c:	01040074 	movhi	r4,4097
1000b290:	21048504 	addi	r4,r4,4628
1000b294:	d8c11d85 	stb	r3,1142(sp)
1000b298:	d9012715 	stw	r4,1180(sp)
1000b29c:	90c0080c 	andi	r3,r18,32
1000b2a0:	9811883a 	mov	r8,r19
1000b2a4:	d8812317 	ldw	r2,1164(sp)
1000b2a8:	18005f26 	beq	r3,zero,1000b428 <___vfiprintf_internal_r+0x9a8>
1000b2ac:	d9012317 	ldw	r4,1164(sp)
1000b2b0:	14c00017 	ldw	r19,0(r2)
1000b2b4:	15400117 	ldw	r21,4(r2)
1000b2b8:	21000204 	addi	r4,r4,8
1000b2bc:	d9012315 	stw	r4,1164(sp)
1000b2c0:	9080004c 	andi	r2,r18,1
1000b2c4:	1001e226 	beq	r2,zero,1000ba50 <___vfiprintf_internal_r+0xfd0>
1000b2c8:	9d46b03a 	or	r3,r19,r21
1000b2cc:	18024e26 	beq	r3,zero,1000bc08 <___vfiprintf_internal_r+0x1188>
1000b2d0:	00800c04 	movi	r2,48
1000b2d4:	d8811d05 	stb	r2,1140(sp)
1000b2d8:	d9811d45 	stb	r6,1141(sp)
1000b2dc:	94800094 	ori	r18,r18,2
1000b2e0:	00800084 	movi	r2,2
1000b2e4:	003fd306 	br	1000b234 <__alt_data_end+0xf800b234>
1000b2e8:	d9012317 	ldw	r4,1164(sp)
1000b2ec:	d9412317 	ldw	r5,1164(sp)
1000b2f0:	21000017 	ldw	r4,0(r4)
1000b2f4:	28800104 	addi	r2,r5,4
1000b2f8:	d9012415 	stw	r4,1168(sp)
1000b2fc:	203eeb16 	blt	r4,zero,1000aeac <__alt_data_end+0xf800aeac>
1000b300:	d8812315 	stw	r2,1164(sp)
1000b304:	b9800007 	ldb	r6,0(r23)
1000b308:	003e3e06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b30c:	b9800007 	ldb	r6,0(r23)
1000b310:	01000a84 	movi	r4,42
1000b314:	b8800044 	addi	r2,r23,1
1000b318:	3102d226 	beq	r6,r4,1000be64 <___vfiprintf_internal_r+0x13e4>
1000b31c:	35bff404 	addi	r22,r6,-48
1000b320:	102f883a 	mov	r23,r2
1000b324:	0021883a 	mov	r16,zero
1000b328:	adbe3736 	bltu	r21,r22,1000ac08 <__alt_data_end+0xf800ac08>
1000b32c:	0009883a 	mov	r4,zero
1000b330:	01400284 	movi	r5,10
1000b334:	0002cfc0 	call	10002cfc <__mulsi3>
1000b338:	b9800007 	ldb	r6,0(r23)
1000b33c:	b089883a 	add	r4,r22,r2
1000b340:	bdc00044 	addi	r23,r23,1
1000b344:	35bff404 	addi	r22,r6,-48
1000b348:	adbff92e 	bgeu	r21,r22,1000b330 <__alt_data_end+0xf800b330>
1000b34c:	2021883a 	mov	r16,r4
1000b350:	203e2d0e 	bge	r4,zero,1000ac08 <__alt_data_end+0xf800ac08>
1000b354:	043fffc4 	movi	r16,-1
1000b358:	003e2b06 	br	1000ac08 <__alt_data_end+0xf800ac08>
1000b35c:	94801014 	ori	r18,r18,64
1000b360:	b9800007 	ldb	r6,0(r23)
1000b364:	003e2706 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b368:	94800814 	ori	r18,r18,32
1000b36c:	b9800007 	ldb	r6,0(r23)
1000b370:	003e2406 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b374:	d9412317 	ldw	r5,1164(sp)
1000b378:	d8812317 	ldw	r2,1164(sp)
1000b37c:	d8011d85 	stb	zero,1142(sp)
1000b380:	29400017 	ldw	r5,0(r5)
1000b384:	9811883a 	mov	r8,r19
1000b388:	14c00104 	addi	r19,r2,4
1000b38c:	d9412215 	stw	r5,1160(sp)
1000b390:	28029026 	beq	r5,zero,1000bdd4 <___vfiprintf_internal_r+0x1354>
1000b394:	d9012217 	ldw	r4,1160(sp)
1000b398:	80027616 	blt	r16,zero,1000bd74 <___vfiprintf_internal_r+0x12f4>
1000b39c:	000b883a 	mov	r5,zero
1000b3a0:	800d883a 	mov	r6,r16
1000b3a4:	da012a15 	stw	r8,1192(sp)
1000b3a8:	00092a00 	call	100092a0 <memchr>
1000b3ac:	da012a17 	ldw	r8,1192(sp)
1000b3b0:	1002a026 	beq	r2,zero,1000be34 <___vfiprintf_internal_r+0x13b4>
1000b3b4:	d8c12217 	ldw	r3,1160(sp)
1000b3b8:	10e9c83a 	sub	r20,r2,r3
1000b3bc:	85023816 	blt	r16,r20,1000bca0 <___vfiprintf_internal_r+0x1220>
1000b3c0:	dd811d83 	ldbu	r22,1142(sp)
1000b3c4:	dcc12315 	stw	r19,1164(sp)
1000b3c8:	0021883a 	mov	r16,zero
1000b3cc:	003efd06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b3d0:	9080080c 	andi	r2,r18,32
1000b3d4:	9811883a 	mov	r8,r19
1000b3d8:	103f9e1e 	bne	r2,zero,1000b254 <__alt_data_end+0xf800b254>
1000b3dc:	9080040c 	andi	r2,r18,16
1000b3e0:	10021726 	beq	r2,zero,1000bc40 <___vfiprintf_internal_r+0x11c0>
1000b3e4:	d9412317 	ldw	r5,1164(sp)
1000b3e8:	002b883a 	mov	r21,zero
1000b3ec:	00800044 	movi	r2,1
1000b3f0:	2cc00017 	ldw	r19,0(r5)
1000b3f4:	29400104 	addi	r5,r5,4
1000b3f8:	d9412315 	stw	r5,1164(sp)
1000b3fc:	9807883a 	mov	r3,r19
1000b400:	003f8c06 	br	1000b234 <__alt_data_end+0xf800b234>
1000b404:	d8c12203 	ldbu	r3,1160(sp)
1000b408:	01040074 	movhi	r4,4097
1000b40c:	21048a04 	addi	r4,r4,4648
1000b410:	d8c11d85 	stb	r3,1142(sp)
1000b414:	d9012715 	stw	r4,1180(sp)
1000b418:	90c0080c 	andi	r3,r18,32
1000b41c:	9811883a 	mov	r8,r19
1000b420:	d8812317 	ldw	r2,1164(sp)
1000b424:	183fa11e 	bne	r3,zero,1000b2ac <__alt_data_end+0xf800b2ac>
1000b428:	90c0040c 	andi	r3,r18,16
1000b42c:	1801e526 	beq	r3,zero,1000bbc4 <___vfiprintf_internal_r+0x1144>
1000b430:	d9412317 	ldw	r5,1164(sp)
1000b434:	14c00017 	ldw	r19,0(r2)
1000b438:	002b883a 	mov	r21,zero
1000b43c:	29400104 	addi	r5,r5,4
1000b440:	d9412315 	stw	r5,1164(sp)
1000b444:	003f9e06 	br	1000b2c0 <__alt_data_end+0xf800b2c0>
1000b448:	9080080c 	andi	r2,r18,32
1000b44c:	9811883a 	mov	r8,r19
1000b450:	103f701e 	bne	r2,zero,1000b214 <__alt_data_end+0xf800b214>
1000b454:	9080040c 	andi	r2,r18,16
1000b458:	1001ef26 	beq	r2,zero,1000bc18 <___vfiprintf_internal_r+0x1198>
1000b45c:	d9012317 	ldw	r4,1164(sp)
1000b460:	002b883a 	mov	r21,zero
1000b464:	0005883a 	mov	r2,zero
1000b468:	24c00017 	ldw	r19,0(r4)
1000b46c:	21000104 	addi	r4,r4,4
1000b470:	d9012315 	stw	r4,1164(sp)
1000b474:	9807883a 	mov	r3,r19
1000b478:	003f6e06 	br	1000b234 <__alt_data_end+0xf800b234>
1000b47c:	d8c12317 	ldw	r3,1164(sp)
1000b480:	9811883a 	mov	r8,r19
1000b484:	00800c04 	movi	r2,48
1000b488:	1cc00017 	ldw	r19,0(r3)
1000b48c:	01040074 	movhi	r4,4097
1000b490:	18c00104 	addi	r3,r3,4
1000b494:	d8811d05 	stb	r2,1140(sp)
1000b498:	21048a04 	addi	r4,r4,4648
1000b49c:	00801e04 	movi	r2,120
1000b4a0:	d8811d45 	stb	r2,1141(sp)
1000b4a4:	d8c12315 	stw	r3,1164(sp)
1000b4a8:	002b883a 	mov	r21,zero
1000b4ac:	94800094 	ori	r18,r18,2
1000b4b0:	d9012715 	stw	r4,1180(sp)
1000b4b4:	00800084 	movi	r2,2
1000b4b8:	9807883a 	mov	r3,r19
1000b4bc:	003f5d06 	br	1000b234 <__alt_data_end+0xf800b234>
1000b4c0:	d8c12203 	ldbu	r3,1160(sp)
1000b4c4:	9080080c 	andi	r2,r18,32
1000b4c8:	9811883a 	mov	r8,r19
1000b4cc:	d8c11d85 	stb	r3,1142(sp)
1000b4d0:	1001b126 	beq	r2,zero,1000bb98 <___vfiprintf_internal_r+0x1118>
1000b4d4:	d9012317 	ldw	r4,1164(sp)
1000b4d8:	d9412517 	ldw	r5,1172(sp)
1000b4dc:	20800017 	ldw	r2,0(r4)
1000b4e0:	2807d7fa 	srai	r3,r5,31
1000b4e4:	21000104 	addi	r4,r4,4
1000b4e8:	d9012315 	stw	r4,1164(sp)
1000b4ec:	11400015 	stw	r5,0(r2)
1000b4f0:	10c00115 	stw	r3,4(r2)
1000b4f4:	003d9a06 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000b4f8:	d8812207 	ldb	r2,1160(sp)
1000b4fc:	1001c41e 	bne	r2,zero,1000bc10 <___vfiprintf_internal_r+0x1190>
1000b500:	00c00804 	movi	r3,32
1000b504:	d8c12205 	stb	r3,1160(sp)
1000b508:	b9800007 	ldb	r6,0(r23)
1000b50c:	003dbd06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b510:	00c00ac4 	movi	r3,43
1000b514:	d8c12205 	stb	r3,1160(sp)
1000b518:	b9800007 	ldb	r6,0(r23)
1000b51c:	003db906 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b520:	d8c12203 	ldbu	r3,1160(sp)
1000b524:	9080080c 	andi	r2,r18,32
1000b528:	9811883a 	mov	r8,r19
1000b52c:	d8c11d85 	stb	r3,1142(sp)
1000b530:	d8c12317 	ldw	r3,1164(sp)
1000b534:	103e7e1e 	bne	r2,zero,1000af30 <__alt_data_end+0xf800af30>
1000b538:	9080040c 	andi	r2,r18,16
1000b53c:	1001a926 	beq	r2,zero,1000bbe4 <___vfiprintf_internal_r+0x1164>
1000b540:	1cc00017 	ldw	r19,0(r3)
1000b544:	d9412317 	ldw	r5,1164(sp)
1000b548:	982bd7fa 	srai	r21,r19,31
1000b54c:	29400104 	addi	r5,r5,4
1000b550:	d9412315 	stw	r5,1164(sp)
1000b554:	a805883a 	mov	r2,r21
1000b558:	003e7b06 	br	1000af48 <__alt_data_end+0xf800af48>
1000b55c:	94800054 	ori	r18,r18,1
1000b560:	b9800007 	ldb	r6,0(r23)
1000b564:	003da706 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000b568:	d8c12203 	ldbu	r3,1160(sp)
1000b56c:	9811883a 	mov	r8,r19
1000b570:	d8c11d85 	stb	r3,1142(sp)
1000b574:	30005826 	beq	r6,zero,1000b6d8 <___vfiprintf_internal_r+0xc58>
1000b578:	05400044 	movi	r21,1
1000b57c:	d8c10004 	addi	r3,sp,1024
1000b580:	d9810005 	stb	r6,1024(sp)
1000b584:	d8011d85 	stb	zero,1142(sp)
1000b588:	a829883a 	mov	r20,r21
1000b58c:	d8c12215 	stw	r3,1160(sp)
1000b590:	003f1a06 	br	1000b1fc <__alt_data_end+0xf800b1fc>
1000b594:	d9012117 	ldw	r4,1156(sp)
1000b598:	d9412017 	ldw	r5,1152(sp)
1000b59c:	d9811a04 	addi	r6,sp,1128
1000b5a0:	d9c12a15 	stw	r7,1192(sp)
1000b5a4:	db012b15 	stw	r12,1196(sp)
1000b5a8:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b5ac:	d9c12a17 	ldw	r7,1192(sp)
1000b5b0:	db012b17 	ldw	r12,1196(sp)
1000b5b4:	10004e1e 	bne	r2,zero,1000b6f0 <___vfiprintf_internal_r+0xc70>
1000b5b8:	d9011b17 	ldw	r4,1132(sp)
1000b5bc:	d8c11c17 	ldw	r3,1136(sp)
1000b5c0:	d811883a 	mov	r8,sp
1000b5c4:	21400044 	addi	r5,r4,1
1000b5c8:	003e9d06 	br	1000b040 <__alt_data_end+0xf800b040>
1000b5cc:	d9411b17 	ldw	r5,1132(sp)
1000b5d0:	d8c11c17 	ldw	r3,1136(sp)
1000b5d4:	28800044 	addi	r2,r5,1
1000b5d8:	d9011d87 	ldb	r4,1142(sp)
1000b5dc:	203eb626 	beq	r4,zero,1000b0b8 <__alt_data_end+0xf800b0b8>
1000b5e0:	01000044 	movi	r4,1
1000b5e4:	d9411d84 	addi	r5,sp,1142
1000b5e8:	1907883a 	add	r3,r3,r4
1000b5ec:	41400015 	stw	r5,0(r8)
1000b5f0:	41000115 	stw	r4,4(r8)
1000b5f4:	d8c11c15 	stw	r3,1136(sp)
1000b5f8:	d8811b15 	stw	r2,1132(sp)
1000b5fc:	014001c4 	movi	r5,7
1000b600:	2880ce16 	blt	r5,r2,1000b93c <___vfiprintf_internal_r+0xebc>
1000b604:	100b883a 	mov	r5,r2
1000b608:	42000204 	addi	r8,r8,8
1000b60c:	10800044 	addi	r2,r2,1
1000b610:	003ea906 	br	1000b0b8 <__alt_data_end+0xf800b0b8>
1000b614:	d9012117 	ldw	r4,1156(sp)
1000b618:	d9412017 	ldw	r5,1152(sp)
1000b61c:	d9811a04 	addi	r6,sp,1128
1000b620:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b624:	1000321e 	bne	r2,zero,1000b6f0 <___vfiprintf_internal_r+0xc70>
1000b628:	d9411b17 	ldw	r5,1132(sp)
1000b62c:	d8c11c17 	ldw	r3,1136(sp)
1000b630:	d811883a 	mov	r8,sp
1000b634:	28800044 	addi	r2,r5,1
1000b638:	003eba06 	br	1000b124 <__alt_data_end+0xf800b124>
1000b63c:	10803fcc 	andi	r2,r2,255
1000b640:	00c00044 	movi	r3,1
1000b644:	10fe4d1e 	bne	r2,r3,1000af7c <__alt_data_end+0xf800af7c>
1000b648:	a800021e 	bne	r21,zero,1000b654 <___vfiprintf_internal_r+0xbd4>
1000b64c:	00800244 	movi	r2,9
1000b650:	14c01b2e 	bgeu	r2,r19,1000b6c0 <___vfiprintf_internal_r+0xc40>
1000b654:	dc012215 	stw	r16,1160(sp)
1000b658:	dd010a04 	addi	r20,sp,1064
1000b65c:	a821883a 	mov	r16,r21
1000b660:	402b883a 	mov	r21,r8
1000b664:	9809883a 	mov	r4,r19
1000b668:	800b883a 	mov	r5,r16
1000b66c:	01800284 	movi	r6,10
1000b670:	000f883a 	mov	r7,zero
1000b674:	00025b40 	call	100025b4 <__umoddi3>
1000b678:	10800c04 	addi	r2,r2,48
1000b67c:	a53fffc4 	addi	r20,r20,-1
1000b680:	9809883a 	mov	r4,r19
1000b684:	800b883a 	mov	r5,r16
1000b688:	01800284 	movi	r6,10
1000b68c:	000f883a 	mov	r7,zero
1000b690:	a0800005 	stb	r2,0(r20)
1000b694:	0001f740 	call	10001f74 <__udivdi3>
1000b698:	1027883a 	mov	r19,r2
1000b69c:	10c4b03a 	or	r2,r2,r3
1000b6a0:	1821883a 	mov	r16,r3
1000b6a4:	103fef1e 	bne	r2,zero,1000b664 <__alt_data_end+0xf800b664>
1000b6a8:	d9011e17 	ldw	r4,1144(sp)
1000b6ac:	dc012217 	ldw	r16,1160(sp)
1000b6b0:	a811883a 	mov	r8,r21
1000b6b4:	dd012215 	stw	r20,1160(sp)
1000b6b8:	2529c83a 	sub	r20,r4,r20
1000b6bc:	003e4106 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b6c0:	9cc00c04 	addi	r19,r19,48
1000b6c4:	d8c109c4 	addi	r3,sp,1063
1000b6c8:	dcc109c5 	stb	r19,1063(sp)
1000b6cc:	dd012817 	ldw	r20,1184(sp)
1000b6d0:	d8c12215 	stw	r3,1160(sp)
1000b6d4:	003e3b06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b6d8:	d8811c17 	ldw	r2,1136(sp)
1000b6dc:	10000426 	beq	r2,zero,1000b6f0 <___vfiprintf_internal_r+0xc70>
1000b6e0:	d9012117 	ldw	r4,1156(sp)
1000b6e4:	d9412017 	ldw	r5,1152(sp)
1000b6e8:	d9811a04 	addi	r6,sp,1128
1000b6ec:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b6f0:	d9412017 	ldw	r5,1152(sp)
1000b6f4:	2880030b 	ldhu	r2,12(r5)
1000b6f8:	1080100c 	andi	r2,r2,64
1000b6fc:	103ddc1e 	bne	r2,zero,1000ae70 <__alt_data_end+0xf800ae70>
1000b700:	d8812517 	ldw	r2,1172(sp)
1000b704:	003ddb06 	br	1000ae74 <__alt_data_end+0xf800ae74>
1000b708:	1801061e 	bne	r3,zero,1000bb24 <___vfiprintf_internal_r+0x10a4>
1000b70c:	d8c12217 	ldw	r3,1160(sp)
1000b710:	00800044 	movi	r2,1
1000b714:	dd000115 	stw	r20,4(sp)
1000b718:	d8c00015 	stw	r3,0(sp)
1000b71c:	dd011c15 	stw	r20,1136(sp)
1000b720:	d8811b15 	stw	r2,1132(sp)
1000b724:	a007883a 	mov	r3,r20
1000b728:	d811883a 	mov	r8,sp
1000b72c:	42000204 	addi	r8,r8,8
1000b730:	9480010c 	andi	r18,r18,4
1000b734:	90003426 	beq	r18,zero,1000b808 <___vfiprintf_internal_r+0xd88>
1000b738:	d9412417 	ldw	r5,1168(sp)
1000b73c:	2d65c83a 	sub	r18,r5,r21
1000b740:	0480310e 	bge	zero,r18,1000b808 <___vfiprintf_internal_r+0xd88>
1000b744:	04000404 	movi	r16,16
1000b748:	8481ad0e 	bge	r16,r18,1000be00 <___vfiprintf_internal_r+0x1380>
1000b74c:	01440074 	movhi	r5,4097
1000b750:	2944ef04 	addi	r5,r5,5052
1000b754:	d9011b17 	ldw	r4,1132(sp)
1000b758:	d9412615 	stw	r5,1176(sp)
1000b75c:	04c001c4 	movi	r19,7
1000b760:	dd012117 	ldw	r20,1156(sp)
1000b764:	dd812017 	ldw	r22,1152(sp)
1000b768:	00000506 	br	1000b780 <___vfiprintf_internal_r+0xd00>
1000b76c:	21400084 	addi	r5,r4,2
1000b770:	42000204 	addi	r8,r8,8
1000b774:	1009883a 	mov	r4,r2
1000b778:	94bffc04 	addi	r18,r18,-16
1000b77c:	84800d0e 	bge	r16,r18,1000b7b4 <___vfiprintf_internal_r+0xd34>
1000b780:	18c00404 	addi	r3,r3,16
1000b784:	20800044 	addi	r2,r4,1
1000b788:	47000015 	stw	fp,0(r8)
1000b78c:	44000115 	stw	r16,4(r8)
1000b790:	d8c11c15 	stw	r3,1136(sp)
1000b794:	d8811b15 	stw	r2,1132(sp)
1000b798:	98bff40e 	bge	r19,r2,1000b76c <__alt_data_end+0xf800b76c>
1000b79c:	1800291e 	bne	r3,zero,1000b844 <___vfiprintf_internal_r+0xdc4>
1000b7a0:	94bffc04 	addi	r18,r18,-16
1000b7a4:	0009883a 	mov	r4,zero
1000b7a8:	01400044 	movi	r5,1
1000b7ac:	d811883a 	mov	r8,sp
1000b7b0:	84bff316 	blt	r16,r18,1000b780 <__alt_data_end+0xf800b780>
1000b7b4:	d8812617 	ldw	r2,1176(sp)
1000b7b8:	1c87883a 	add	r3,r3,r18
1000b7bc:	44800115 	stw	r18,4(r8)
1000b7c0:	40800015 	stw	r2,0(r8)
1000b7c4:	d8c11c15 	stw	r3,1136(sp)
1000b7c8:	d9411b15 	stw	r5,1132(sp)
1000b7cc:	008001c4 	movi	r2,7
1000b7d0:	11400d0e 	bge	r2,r5,1000b808 <___vfiprintf_internal_r+0xd88>
1000b7d4:	1800061e 	bne	r3,zero,1000b7f0 <___vfiprintf_internal_r+0xd70>
1000b7d8:	d8c12417 	ldw	r3,1168(sp)
1000b7dc:	a8c12e16 	blt	r21,r3,1000bc98 <___vfiprintf_internal_r+0x1218>
1000b7e0:	d9012517 	ldw	r4,1172(sp)
1000b7e4:	2549883a 	add	r4,r4,r21
1000b7e8:	d9012515 	stw	r4,1172(sp)
1000b7ec:	00001206 	br	1000b838 <___vfiprintf_internal_r+0xdb8>
1000b7f0:	d9012117 	ldw	r4,1156(sp)
1000b7f4:	d9412017 	ldw	r5,1152(sp)
1000b7f8:	d9811a04 	addi	r6,sp,1128
1000b7fc:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b800:	103fbb1e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b804:	d8c11c17 	ldw	r3,1136(sp)
1000b808:	d8812417 	ldw	r2,1168(sp)
1000b80c:	a880010e 	bge	r21,r2,1000b814 <___vfiprintf_internal_r+0xd94>
1000b810:	102b883a 	mov	r21,r2
1000b814:	d9012517 	ldw	r4,1172(sp)
1000b818:	2549883a 	add	r4,r4,r21
1000b81c:	d9012515 	stw	r4,1172(sp)
1000b820:	18000526 	beq	r3,zero,1000b838 <___vfiprintf_internal_r+0xdb8>
1000b824:	d9012117 	ldw	r4,1156(sp)
1000b828:	d9412017 	ldw	r5,1152(sp)
1000b82c:	d9811a04 	addi	r6,sp,1128
1000b830:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b834:	103fae1e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b838:	d8011b15 	stw	zero,1132(sp)
1000b83c:	d811883a 	mov	r8,sp
1000b840:	003cc706 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000b844:	a009883a 	mov	r4,r20
1000b848:	b00b883a 	mov	r5,r22
1000b84c:	d9811a04 	addi	r6,sp,1128
1000b850:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b854:	103fa61e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b858:	d9011b17 	ldw	r4,1132(sp)
1000b85c:	d8c11c17 	ldw	r3,1136(sp)
1000b860:	d811883a 	mov	r8,sp
1000b864:	21400044 	addi	r5,r4,1
1000b868:	003fc306 	br	1000b778 <__alt_data_end+0xf800b778>
1000b86c:	d9012417 	ldw	r4,1168(sp)
1000b870:	256dc83a 	sub	r22,r4,r21
1000b874:	05be1f0e 	bge	zero,r22,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b878:	04c00404 	movi	r19,16
1000b87c:	9d81720e 	bge	r19,r22,1000be48 <___vfiprintf_internal_r+0x13c8>
1000b880:	00840074 	movhi	r2,4097
1000b884:	1084eb04 	addi	r2,r2,5036
1000b888:	d8812615 	stw	r2,1176(sp)
1000b88c:	028001c4 	movi	r10,7
1000b890:	00000506 	br	1000b8a8 <___vfiprintf_internal_r+0xe28>
1000b894:	29000084 	addi	r4,r5,2
1000b898:	42000204 	addi	r8,r8,8
1000b89c:	100b883a 	mov	r5,r2
1000b8a0:	b5bffc04 	addi	r22,r22,-16
1000b8a4:	9d800d0e 	bge	r19,r22,1000b8dc <___vfiprintf_internal_r+0xe5c>
1000b8a8:	18c00404 	addi	r3,r3,16
1000b8ac:	28800044 	addi	r2,r5,1
1000b8b0:	44400015 	stw	r17,0(r8)
1000b8b4:	44c00115 	stw	r19,4(r8)
1000b8b8:	d8c11c15 	stw	r3,1136(sp)
1000b8bc:	d8811b15 	stw	r2,1132(sp)
1000b8c0:	50bff40e 	bge	r10,r2,1000b894 <__alt_data_end+0xf800b894>
1000b8c4:	1800111e 	bne	r3,zero,1000b90c <___vfiprintf_internal_r+0xe8c>
1000b8c8:	b5bffc04 	addi	r22,r22,-16
1000b8cc:	000b883a 	mov	r5,zero
1000b8d0:	01000044 	movi	r4,1
1000b8d4:	d811883a 	mov	r8,sp
1000b8d8:	9dbff316 	blt	r19,r22,1000b8a8 <__alt_data_end+0xf800b8a8>
1000b8dc:	d9412617 	ldw	r5,1176(sp)
1000b8e0:	1d87883a 	add	r3,r3,r22
1000b8e4:	45800115 	stw	r22,4(r8)
1000b8e8:	41400015 	stw	r5,0(r8)
1000b8ec:	d8c11c15 	stw	r3,1136(sp)
1000b8f0:	d9011b15 	stw	r4,1132(sp)
1000b8f4:	008001c4 	movi	r2,7
1000b8f8:	11008516 	blt	r2,r4,1000bb10 <___vfiprintf_internal_r+0x1090>
1000b8fc:	42000204 	addi	r8,r8,8
1000b900:	20800044 	addi	r2,r4,1
1000b904:	200b883a 	mov	r5,r4
1000b908:	003dfa06 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b90c:	d9012117 	ldw	r4,1156(sp)
1000b910:	d9412017 	ldw	r5,1152(sp)
1000b914:	d9811a04 	addi	r6,sp,1128
1000b918:	da812a15 	stw	r10,1192(sp)
1000b91c:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000b920:	da812a17 	ldw	r10,1192(sp)
1000b924:	103f721e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b928:	d9411b17 	ldw	r5,1132(sp)
1000b92c:	d8c11c17 	ldw	r3,1136(sp)
1000b930:	d811883a 	mov	r8,sp
1000b934:	29000044 	addi	r4,r5,1
1000b938:	003fd906 	br	1000b8a0 <__alt_data_end+0xf800b8a0>
1000b93c:	1800681e 	bne	r3,zero,1000bae0 <___vfiprintf_internal_r+0x1060>
1000b940:	50004d26 	beq	r10,zero,1000ba78 <___vfiprintf_internal_r+0xff8>
1000b944:	d8811d04 	addi	r2,sp,1140
1000b948:	00c00084 	movi	r3,2
1000b94c:	d8800015 	stw	r2,0(sp)
1000b950:	d8c00115 	stw	r3,4(sp)
1000b954:	2005883a 	mov	r2,r4
1000b958:	d811883a 	mov	r8,sp
1000b95c:	003de006 	br	1000b0e0 <__alt_data_end+0xf800b0e0>
1000b960:	1800551e 	bne	r3,zero,1000bab8 <___vfiprintf_internal_r+0x1038>
1000b964:	000b883a 	mov	r5,zero
1000b968:	00800044 	movi	r2,1
1000b96c:	d811883a 	mov	r8,sp
1000b970:	003dde06 	br	1000b0ec <__alt_data_end+0xf800b0ec>
1000b974:	10803fcc 	andi	r2,r2,255
1000b978:	1000191e 	bne	r2,zero,1000b9e0 <___vfiprintf_internal_r+0xf60>
1000b97c:	9080004c 	andi	r2,r18,1
1000b980:	10001726 	beq	r2,zero,1000b9e0 <___vfiprintf_internal_r+0xf60>
1000b984:	00800c04 	movi	r2,48
1000b988:	d8c109c4 	addi	r3,sp,1063
1000b98c:	d88109c5 	stb	r2,1063(sp)
1000b990:	dd012817 	ldw	r20,1184(sp)
1000b994:	d8c12215 	stw	r3,1160(sp)
1000b998:	003d8a06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b99c:	d9012717 	ldw	r4,1180(sp)
1000b9a0:	dd010a04 	addi	r20,sp,1064
1000b9a4:	988003cc 	andi	r2,r19,15
1000b9a8:	a806973a 	slli	r3,r21,28
1000b9ac:	2085883a 	add	r2,r4,r2
1000b9b0:	9826d13a 	srli	r19,r19,4
1000b9b4:	10800003 	ldbu	r2,0(r2)
1000b9b8:	a82ad13a 	srli	r21,r21,4
1000b9bc:	a53fffc4 	addi	r20,r20,-1
1000b9c0:	1ce6b03a 	or	r19,r3,r19
1000b9c4:	a0800005 	stb	r2,0(r20)
1000b9c8:	9d44b03a 	or	r2,r19,r21
1000b9cc:	103ff51e 	bne	r2,zero,1000b9a4 <__alt_data_end+0xf800b9a4>
1000b9d0:	d9411e17 	ldw	r5,1144(sp)
1000b9d4:	dd012215 	stw	r20,1160(sp)
1000b9d8:	2d29c83a 	sub	r20,r5,r20
1000b9dc:	003d7906 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b9e0:	d8c10a04 	addi	r3,sp,1064
1000b9e4:	d8c12215 	stw	r3,1160(sp)
1000b9e8:	003d7606 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b9ec:	18009e1e 	bne	r3,zero,1000bc68 <___vfiprintf_internal_r+0x11e8>
1000b9f0:	d8811d87 	ldb	r2,1142(sp)
1000b9f4:	10005f26 	beq	r2,zero,1000bb74 <___vfiprintf_internal_r+0x10f4>
1000b9f8:	00c00044 	movi	r3,1
1000b9fc:	d9011d84 	addi	r4,sp,1142
1000ba00:	1805883a 	mov	r2,r3
1000ba04:	d9000015 	stw	r4,0(sp)
1000ba08:	d8c00115 	stw	r3,4(sp)
1000ba0c:	d811883a 	mov	r8,sp
1000ba10:	003efc06 	br	1000b604 <__alt_data_end+0xf800b604>
1000ba14:	d9412417 	ldw	r5,1168(sp)
1000ba18:	d811883a 	mov	r8,sp
1000ba1c:	2d65c83a 	sub	r18,r5,r21
1000ba20:	04bf4816 	blt	zero,r18,1000b744 <__alt_data_end+0xf800b744>
1000ba24:	003f6c06 	br	1000b7d8 <__alt_data_end+0xf800b7d8>
1000ba28:	b829883a 	mov	r20,r23
1000ba2c:	003c6906 	br	1000abd4 <__alt_data_end+0xf800abd4>
1000ba30:	d9012117 	ldw	r4,1156(sp)
1000ba34:	d9412017 	ldw	r5,1152(sp)
1000ba38:	d9811a04 	addi	r6,sp,1128
1000ba3c:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000ba40:	103f2b1e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000ba44:	d8c11c17 	ldw	r3,1136(sp)
1000ba48:	d811883a 	mov	r8,sp
1000ba4c:	003f3806 	br	1000b730 <__alt_data_end+0xf800b730>
1000ba50:	00800084 	movi	r2,2
1000ba54:	9d46b03a 	or	r3,r19,r21
1000ba58:	003df606 	br	1000b234 <__alt_data_end+0xf800b234>
1000ba5c:	d9012117 	ldw	r4,1156(sp)
1000ba60:	d9412017 	ldw	r5,1152(sp)
1000ba64:	d9811a04 	addi	r6,sp,1128
1000ba68:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000ba6c:	103f201e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000ba70:	d811883a 	mov	r8,sp
1000ba74:	003cc606 	br	1000ad90 <__alt_data_end+0xf800ad90>
1000ba78:	000b883a 	mov	r5,zero
1000ba7c:	2005883a 	mov	r2,r4
1000ba80:	d811883a 	mov	r8,sp
1000ba84:	003d9906 	br	1000b0ec <__alt_data_end+0xf800b0ec>
1000ba88:	10803fcc 	andi	r2,r2,255
1000ba8c:	1080201c 	xori	r2,r2,128
1000ba90:	10bfe004 	addi	r2,r2,-128
1000ba94:	01000c04 	movi	r4,48
1000ba98:	1100b226 	beq	r2,r4,1000bd64 <___vfiprintf_internal_r+0x12e4>
1000ba9c:	d9412217 	ldw	r5,1160(sp)
1000baa0:	d8811e17 	ldw	r2,1144(sp)
1000baa4:	193fffc5 	stb	r4,-1(r3)
1000baa8:	297fffc4 	addi	r5,r5,-1
1000baac:	d9412215 	stw	r5,1160(sp)
1000bab0:	1169c83a 	sub	r20,r2,r5
1000bab4:	003d4306 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000bab8:	d9012117 	ldw	r4,1156(sp)
1000babc:	d9412017 	ldw	r5,1152(sp)
1000bac0:	d9811a04 	addi	r6,sp,1128
1000bac4:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000bac8:	103f091e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000bacc:	d9411b17 	ldw	r5,1132(sp)
1000bad0:	d8c11c17 	ldw	r3,1136(sp)
1000bad4:	d811883a 	mov	r8,sp
1000bad8:	28800044 	addi	r2,r5,1
1000badc:	003d8306 	br	1000b0ec <__alt_data_end+0xf800b0ec>
1000bae0:	d9012117 	ldw	r4,1156(sp)
1000bae4:	d9412017 	ldw	r5,1152(sp)
1000bae8:	d9811a04 	addi	r6,sp,1128
1000baec:	da812a15 	stw	r10,1192(sp)
1000baf0:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000baf4:	da812a17 	ldw	r10,1192(sp)
1000baf8:	103efd1e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000bafc:	d9411b17 	ldw	r5,1132(sp)
1000bb00:	d8c11c17 	ldw	r3,1136(sp)
1000bb04:	d811883a 	mov	r8,sp
1000bb08:	28800044 	addi	r2,r5,1
1000bb0c:	003d6a06 	br	1000b0b8 <__alt_data_end+0xf800b0b8>
1000bb10:	1800a01e 	bne	r3,zero,1000bd94 <___vfiprintf_internal_r+0x1314>
1000bb14:	000b883a 	mov	r5,zero
1000bb18:	00800044 	movi	r2,1
1000bb1c:	d811883a 	mov	r8,sp
1000bb20:	003d7406 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000bb24:	d9012117 	ldw	r4,1156(sp)
1000bb28:	d9412017 	ldw	r5,1152(sp)
1000bb2c:	d9811a04 	addi	r6,sp,1128
1000bb30:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000bb34:	103eee1e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000bb38:	d8811b17 	ldw	r2,1132(sp)
1000bb3c:	d8c11c17 	ldw	r3,1136(sp)
1000bb40:	d811883a 	mov	r8,sp
1000bb44:	10800044 	addi	r2,r2,1
1000bb48:	003d8f06 	br	1000b188 <__alt_data_end+0xf800b188>
1000bb4c:	04e7c83a 	sub	r19,zero,r19
1000bb50:	9804c03a 	cmpne	r2,r19,zero
1000bb54:	056bc83a 	sub	r21,zero,r21
1000bb58:	a8abc83a 	sub	r21,r21,r2
1000bb5c:	05800b44 	movi	r22,45
1000bb60:	dd811d85 	stb	r22,1142(sp)
1000bb64:	8029883a 	mov	r20,r16
1000bb68:	00800044 	movi	r2,1
1000bb6c:	9d46b03a 	or	r3,r19,r21
1000bb70:	003cfa06 	br	1000af5c <__alt_data_end+0xf800af5c>
1000bb74:	000b883a 	mov	r5,zero
1000bb78:	00800044 	movi	r2,1
1000bb7c:	d811883a 	mov	r8,sp
1000bb80:	503d5a26 	beq	r10,zero,1000b0ec <__alt_data_end+0xf800b0ec>
1000bb84:	00c00084 	movi	r3,2
1000bb88:	d9011d04 	addi	r4,sp,1140
1000bb8c:	d9000015 	stw	r4,0(sp)
1000bb90:	d8c00115 	stw	r3,4(sp)
1000bb94:	003d5206 	br	1000b0e0 <__alt_data_end+0xf800b0e0>
1000bb98:	9080040c 	andi	r2,r18,16
1000bb9c:	1000421e 	bne	r2,zero,1000bca8 <___vfiprintf_internal_r+0x1228>
1000bba0:	9480100c 	andi	r18,r18,64
1000bba4:	90009c26 	beq	r18,zero,1000be18 <___vfiprintf_internal_r+0x1398>
1000bba8:	d9412317 	ldw	r5,1164(sp)
1000bbac:	d8c12517 	ldw	r3,1172(sp)
1000bbb0:	28800017 	ldw	r2,0(r5)
1000bbb4:	29400104 	addi	r5,r5,4
1000bbb8:	d9412315 	stw	r5,1164(sp)
1000bbbc:	10c0000d 	sth	r3,0(r2)
1000bbc0:	003be706 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000bbc4:	90c0100c 	andi	r3,r18,64
1000bbc8:	18003e26 	beq	r3,zero,1000bcc4 <___vfiprintf_internal_r+0x1244>
1000bbcc:	d8c12317 	ldw	r3,1164(sp)
1000bbd0:	14c0000b 	ldhu	r19,0(r2)
1000bbd4:	002b883a 	mov	r21,zero
1000bbd8:	18c00104 	addi	r3,r3,4
1000bbdc:	d8c12315 	stw	r3,1164(sp)
1000bbe0:	003db706 	br	1000b2c0 <__alt_data_end+0xf800b2c0>
1000bbe4:	9080100c 	andi	r2,r18,64
1000bbe8:	10004c26 	beq	r2,zero,1000bd1c <___vfiprintf_internal_r+0x129c>
1000bbec:	1cc0000f 	ldh	r19,0(r3)
1000bbf0:	d8812317 	ldw	r2,1164(sp)
1000bbf4:	982bd7fa 	srai	r21,r19,31
1000bbf8:	10800104 	addi	r2,r2,4
1000bbfc:	d8812315 	stw	r2,1164(sp)
1000bc00:	a805883a 	mov	r2,r21
1000bc04:	003cd006 	br	1000af48 <__alt_data_end+0xf800af48>
1000bc08:	00800084 	movi	r2,2
1000bc0c:	003d8906 	br	1000b234 <__alt_data_end+0xf800b234>
1000bc10:	b9800007 	ldb	r6,0(r23)
1000bc14:	003bfb06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000bc18:	9080100c 	andi	r2,r18,64
1000bc1c:	10003726 	beq	r2,zero,1000bcfc <___vfiprintf_internal_r+0x127c>
1000bc20:	d9412317 	ldw	r5,1164(sp)
1000bc24:	002b883a 	mov	r21,zero
1000bc28:	0005883a 	mov	r2,zero
1000bc2c:	2cc0000b 	ldhu	r19,0(r5)
1000bc30:	29400104 	addi	r5,r5,4
1000bc34:	d9412315 	stw	r5,1164(sp)
1000bc38:	9807883a 	mov	r3,r19
1000bc3c:	003d7d06 	br	1000b234 <__alt_data_end+0xf800b234>
1000bc40:	9080100c 	andi	r2,r18,64
1000bc44:	10002526 	beq	r2,zero,1000bcdc <___vfiprintf_internal_r+0x125c>
1000bc48:	d8812317 	ldw	r2,1164(sp)
1000bc4c:	002b883a 	mov	r21,zero
1000bc50:	14c0000b 	ldhu	r19,0(r2)
1000bc54:	10800104 	addi	r2,r2,4
1000bc58:	d8812315 	stw	r2,1164(sp)
1000bc5c:	9807883a 	mov	r3,r19
1000bc60:	00800044 	movi	r2,1
1000bc64:	003d7306 	br	1000b234 <__alt_data_end+0xf800b234>
1000bc68:	d9012117 	ldw	r4,1156(sp)
1000bc6c:	d9412017 	ldw	r5,1152(sp)
1000bc70:	d9811a04 	addi	r6,sp,1128
1000bc74:	da812a15 	stw	r10,1192(sp)
1000bc78:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000bc7c:	da812a17 	ldw	r10,1192(sp)
1000bc80:	103e9b1e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000bc84:	d9411b17 	ldw	r5,1132(sp)
1000bc88:	d8c11c17 	ldw	r3,1136(sp)
1000bc8c:	d811883a 	mov	r8,sp
1000bc90:	28800044 	addi	r2,r5,1
1000bc94:	003e5006 	br	1000b5d8 <__alt_data_end+0xf800b5d8>
1000bc98:	182b883a 	mov	r21,r3
1000bc9c:	003ed006 	br	1000b7e0 <__alt_data_end+0xf800b7e0>
1000bca0:	8029883a 	mov	r20,r16
1000bca4:	003dc606 	br	1000b3c0 <__alt_data_end+0xf800b3c0>
1000bca8:	d8c12317 	ldw	r3,1164(sp)
1000bcac:	d9012517 	ldw	r4,1172(sp)
1000bcb0:	18800017 	ldw	r2,0(r3)
1000bcb4:	18c00104 	addi	r3,r3,4
1000bcb8:	d8c12315 	stw	r3,1164(sp)
1000bcbc:	11000015 	stw	r4,0(r2)
1000bcc0:	003ba706 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000bcc4:	d9012317 	ldw	r4,1164(sp)
1000bcc8:	14c00017 	ldw	r19,0(r2)
1000bccc:	002b883a 	mov	r21,zero
1000bcd0:	21000104 	addi	r4,r4,4
1000bcd4:	d9012315 	stw	r4,1164(sp)
1000bcd8:	003d7906 	br	1000b2c0 <__alt_data_end+0xf800b2c0>
1000bcdc:	d8c12317 	ldw	r3,1164(sp)
1000bce0:	002b883a 	mov	r21,zero
1000bce4:	00800044 	movi	r2,1
1000bce8:	1cc00017 	ldw	r19,0(r3)
1000bcec:	18c00104 	addi	r3,r3,4
1000bcf0:	d8c12315 	stw	r3,1164(sp)
1000bcf4:	9807883a 	mov	r3,r19
1000bcf8:	003d4e06 	br	1000b234 <__alt_data_end+0xf800b234>
1000bcfc:	d8812317 	ldw	r2,1164(sp)
1000bd00:	002b883a 	mov	r21,zero
1000bd04:	14c00017 	ldw	r19,0(r2)
1000bd08:	10800104 	addi	r2,r2,4
1000bd0c:	d8812315 	stw	r2,1164(sp)
1000bd10:	9807883a 	mov	r3,r19
1000bd14:	0005883a 	mov	r2,zero
1000bd18:	003d4606 	br	1000b234 <__alt_data_end+0xf800b234>
1000bd1c:	1cc00017 	ldw	r19,0(r3)
1000bd20:	d8c12317 	ldw	r3,1164(sp)
1000bd24:	982bd7fa 	srai	r21,r19,31
1000bd28:	18c00104 	addi	r3,r3,4
1000bd2c:	d8c12315 	stw	r3,1164(sp)
1000bd30:	a805883a 	mov	r2,r21
1000bd34:	003c8406 	br	1000af48 <__alt_data_end+0xf800af48>
1000bd38:	01040074 	movhi	r4,4097
1000bd3c:	2104eb04 	addi	r4,r4,5036
1000bd40:	d9012615 	stw	r4,1176(sp)
1000bd44:	003d0606 	br	1000b160 <__alt_data_end+0xf800b160>
1000bd48:	b9800043 	ldbu	r6,1(r23)
1000bd4c:	94800814 	ori	r18,r18,32
1000bd50:	bdc00044 	addi	r23,r23,1
1000bd54:	31803fcc 	andi	r6,r6,255
1000bd58:	3180201c 	xori	r6,r6,128
1000bd5c:	31bfe004 	addi	r6,r6,-128
1000bd60:	003ba806 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000bd64:	d8811e17 	ldw	r2,1144(sp)
1000bd68:	d8c12217 	ldw	r3,1160(sp)
1000bd6c:	10e9c83a 	sub	r20,r2,r3
1000bd70:	003c9406 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000bd74:	da012a15 	stw	r8,1192(sp)
1000bd78:	000a8d40 	call	1000a8d4 <strlen>
1000bd7c:	1029883a 	mov	r20,r2
1000bd80:	dd811d83 	ldbu	r22,1142(sp)
1000bd84:	dcc12315 	stw	r19,1164(sp)
1000bd88:	0021883a 	mov	r16,zero
1000bd8c:	da012a17 	ldw	r8,1192(sp)
1000bd90:	003c8c06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000bd94:	d9012117 	ldw	r4,1156(sp)
1000bd98:	d9412017 	ldw	r5,1152(sp)
1000bd9c:	d9811a04 	addi	r6,sp,1128
1000bda0:	000a96c0 	call	1000a96c <__sprint_r.part.0>
1000bda4:	103e521e 	bne	r2,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000bda8:	d9411b17 	ldw	r5,1132(sp)
1000bdac:	d8c11c17 	ldw	r3,1136(sp)
1000bdb0:	d811883a 	mov	r8,sp
1000bdb4:	28800044 	addi	r2,r5,1
1000bdb8:	003cce06 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000bdbc:	01440074 	movhi	r5,4097
1000bdc0:	2944ef04 	addi	r5,r5,5052
1000bdc4:	d9412615 	stw	r5,1176(sp)
1000bdc8:	d9411b17 	ldw	r5,1132(sp)
1000bdcc:	29400044 	addi	r5,r5,1
1000bdd0:	003cad06 	br	1000b088 <__alt_data_end+0xf800b088>
1000bdd4:	00800184 	movi	r2,6
1000bdd8:	1400012e 	bgeu	r2,r16,1000bde0 <___vfiprintf_internal_r+0x1360>
1000bddc:	1021883a 	mov	r16,r2
1000bde0:	8029883a 	mov	r20,r16
1000bde4:	802b883a 	mov	r21,r16
1000bde8:	80001c16 	blt	r16,zero,1000be5c <___vfiprintf_internal_r+0x13dc>
1000bdec:	00c40074 	movhi	r3,4097
1000bdf0:	18c48f04 	addi	r3,r3,4668
1000bdf4:	dcc12315 	stw	r19,1164(sp)
1000bdf8:	d8c12215 	stw	r3,1160(sp)
1000bdfc:	003cff06 	br	1000b1fc <__alt_data_end+0xf800b1fc>
1000be00:	d9411b17 	ldw	r5,1132(sp)
1000be04:	00840074 	movhi	r2,4097
1000be08:	1084ef04 	addi	r2,r2,5052
1000be0c:	d8812615 	stw	r2,1176(sp)
1000be10:	29400044 	addi	r5,r5,1
1000be14:	003e6706 	br	1000b7b4 <__alt_data_end+0xf800b7b4>
1000be18:	d9012317 	ldw	r4,1164(sp)
1000be1c:	d9412517 	ldw	r5,1172(sp)
1000be20:	20800017 	ldw	r2,0(r4)
1000be24:	21000104 	addi	r4,r4,4
1000be28:	d9012315 	stw	r4,1164(sp)
1000be2c:	11400015 	stw	r5,0(r2)
1000be30:	003b4b06 	br	1000ab60 <__alt_data_end+0xf800ab60>
1000be34:	8029883a 	mov	r20,r16
1000be38:	dd811d83 	ldbu	r22,1142(sp)
1000be3c:	dcc12315 	stw	r19,1164(sp)
1000be40:	0021883a 	mov	r16,zero
1000be44:	003c5f06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000be48:	01040074 	movhi	r4,4097
1000be4c:	2104eb04 	addi	r4,r4,5036
1000be50:	d9012615 	stw	r4,1176(sp)
1000be54:	1009883a 	mov	r4,r2
1000be58:	003ea006 	br	1000b8dc <__alt_data_end+0xf800b8dc>
1000be5c:	002b883a 	mov	r21,zero
1000be60:	003fe206 	br	1000bdec <__alt_data_end+0xf800bdec>
1000be64:	d9412317 	ldw	r5,1164(sp)
1000be68:	b807883a 	mov	r3,r23
1000be6c:	102f883a 	mov	r23,r2
1000be70:	2c000017 	ldw	r16,0(r5)
1000be74:	29000104 	addi	r4,r5,4
1000be78:	d9012315 	stw	r4,1164(sp)
1000be7c:	80000416 	blt	r16,zero,1000be90 <___vfiprintf_internal_r+0x1410>
1000be80:	19800047 	ldb	r6,1(r3)
1000be84:	003b5f06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000be88:	043fffc4 	movi	r16,-1
1000be8c:	003bef06 	br	1000ae4c <__alt_data_end+0xf800ae4c>
1000be90:	043fffc4 	movi	r16,-1
1000be94:	19800047 	ldb	r6,1(r3)
1000be98:	003b5a06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000be9c:	282b883a 	mov	r21,r5
1000bea0:	003cc706 	br	1000b1c0 <__alt_data_end+0xf800b1c0>

1000bea4 <__vfiprintf_internal>:
1000bea4:	2007883a 	mov	r3,r4
1000bea8:	01040074 	movhi	r4,4097
1000beac:	210bac04 	addi	r4,r4,11952
1000beb0:	21000017 	ldw	r4,0(r4)
1000beb4:	2805883a 	mov	r2,r5
1000beb8:	300f883a 	mov	r7,r6
1000bebc:	180b883a 	mov	r5,r3
1000bec0:	100d883a 	mov	r6,r2
1000bec4:	000aa801 	jmpi	1000aa80 <___vfiprintf_internal_r>

1000bec8 <_write_r>:
1000bec8:	defffd04 	addi	sp,sp,-12
1000becc:	dc000015 	stw	r16,0(sp)
1000bed0:	04040074 	movhi	r16,4097
1000bed4:	dc400115 	stw	r17,4(sp)
1000bed8:	84128b04 	addi	r16,r16,18988
1000bedc:	2023883a 	mov	r17,r4
1000bee0:	2809883a 	mov	r4,r5
1000bee4:	300b883a 	mov	r5,r6
1000bee8:	380d883a 	mov	r6,r7
1000beec:	dfc00215 	stw	ra,8(sp)
1000bef0:	80000015 	stw	zero,0(r16)
1000bef4:	000f2880 	call	1000f288 <write>
1000bef8:	00ffffc4 	movi	r3,-1
1000befc:	10c00526 	beq	r2,r3,1000bf14 <_write_r+0x4c>
1000bf00:	dfc00217 	ldw	ra,8(sp)
1000bf04:	dc400117 	ldw	r17,4(sp)
1000bf08:	dc000017 	ldw	r16,0(sp)
1000bf0c:	dec00304 	addi	sp,sp,12
1000bf10:	f800283a 	ret
1000bf14:	80c00017 	ldw	r3,0(r16)
1000bf18:	183ff926 	beq	r3,zero,1000bf00 <__alt_data_end+0xf800bf00>
1000bf1c:	88c00015 	stw	r3,0(r17)
1000bf20:	003ff706 	br	1000bf00 <__alt_data_end+0xf800bf00>

1000bf24 <_close_r>:
1000bf24:	defffd04 	addi	sp,sp,-12
1000bf28:	dc000015 	stw	r16,0(sp)
1000bf2c:	04040074 	movhi	r16,4097
1000bf30:	dc400115 	stw	r17,4(sp)
1000bf34:	84128b04 	addi	r16,r16,18988
1000bf38:	2023883a 	mov	r17,r4
1000bf3c:	2809883a 	mov	r4,r5
1000bf40:	dfc00215 	stw	ra,8(sp)
1000bf44:	80000015 	stw	zero,0(r16)
1000bf48:	000e9e40 	call	1000e9e4 <close>
1000bf4c:	00ffffc4 	movi	r3,-1
1000bf50:	10c00526 	beq	r2,r3,1000bf68 <_close_r+0x44>
1000bf54:	dfc00217 	ldw	ra,8(sp)
1000bf58:	dc400117 	ldw	r17,4(sp)
1000bf5c:	dc000017 	ldw	r16,0(sp)
1000bf60:	dec00304 	addi	sp,sp,12
1000bf64:	f800283a 	ret
1000bf68:	80c00017 	ldw	r3,0(r16)
1000bf6c:	183ff926 	beq	r3,zero,1000bf54 <__alt_data_end+0xf800bf54>
1000bf70:	88c00015 	stw	r3,0(r17)
1000bf74:	003ff706 	br	1000bf54 <__alt_data_end+0xf800bf54>

1000bf78 <_calloc_r>:
1000bf78:	defffe04 	addi	sp,sp,-8
1000bf7c:	dc000015 	stw	r16,0(sp)
1000bf80:	2021883a 	mov	r16,r4
1000bf84:	2809883a 	mov	r4,r5
1000bf88:	300b883a 	mov	r5,r6
1000bf8c:	dfc00115 	stw	ra,4(sp)
1000bf90:	0002cfc0 	call	10002cfc <__mulsi3>
1000bf94:	8009883a 	mov	r4,r16
1000bf98:	100b883a 	mov	r5,r2
1000bf9c:	0008af80 	call	10008af8 <_malloc_r>
1000bfa0:	1021883a 	mov	r16,r2
1000bfa4:	10002826 	beq	r2,zero,1000c048 <_calloc_r+0xd0>
1000bfa8:	11bfff17 	ldw	r6,-4(r2)
1000bfac:	00bfff04 	movi	r2,-4
1000bfb0:	00c00904 	movi	r3,36
1000bfb4:	308c703a 	and	r6,r6,r2
1000bfb8:	308d883a 	add	r6,r6,r2
1000bfbc:	19801436 	bltu	r3,r6,1000c010 <_calloc_r+0x98>
1000bfc0:	008004c4 	movi	r2,19
1000bfc4:	11800936 	bltu	r2,r6,1000bfec <_calloc_r+0x74>
1000bfc8:	8005883a 	mov	r2,r16
1000bfcc:	10000015 	stw	zero,0(r2)
1000bfd0:	10000115 	stw	zero,4(r2)
1000bfd4:	10000215 	stw	zero,8(r2)
1000bfd8:	8005883a 	mov	r2,r16
1000bfdc:	dfc00117 	ldw	ra,4(sp)
1000bfe0:	dc000017 	ldw	r16,0(sp)
1000bfe4:	dec00204 	addi	sp,sp,8
1000bfe8:	f800283a 	ret
1000bfec:	80000015 	stw	zero,0(r16)
1000bff0:	80000115 	stw	zero,4(r16)
1000bff4:	008006c4 	movi	r2,27
1000bff8:	11800d2e 	bgeu	r2,r6,1000c030 <_calloc_r+0xb8>
1000bffc:	80000215 	stw	zero,8(r16)
1000c000:	80000315 	stw	zero,12(r16)
1000c004:	30c00c26 	beq	r6,r3,1000c038 <_calloc_r+0xc0>
1000c008:	80800404 	addi	r2,r16,16
1000c00c:	003fef06 	br	1000bfcc <__alt_data_end+0xf800bfcc>
1000c010:	8009883a 	mov	r4,r16
1000c014:	000b883a 	mov	r5,zero
1000c018:	00094c00 	call	100094c0 <memset>
1000c01c:	8005883a 	mov	r2,r16
1000c020:	dfc00117 	ldw	ra,4(sp)
1000c024:	dc000017 	ldw	r16,0(sp)
1000c028:	dec00204 	addi	sp,sp,8
1000c02c:	f800283a 	ret
1000c030:	80800204 	addi	r2,r16,8
1000c034:	003fe506 	br	1000bfcc <__alt_data_end+0xf800bfcc>
1000c038:	80000415 	stw	zero,16(r16)
1000c03c:	80800604 	addi	r2,r16,24
1000c040:	80000515 	stw	zero,20(r16)
1000c044:	003fe106 	br	1000bfcc <__alt_data_end+0xf800bfcc>
1000c048:	0005883a 	mov	r2,zero
1000c04c:	003fe306 	br	1000bfdc <__alt_data_end+0xf800bfdc>

1000c050 <_fclose_r>:
1000c050:	28003226 	beq	r5,zero,1000c11c <_fclose_r+0xcc>
1000c054:	defffc04 	addi	sp,sp,-16
1000c058:	dc400115 	stw	r17,4(sp)
1000c05c:	2023883a 	mov	r17,r4
1000c060:	dc000015 	stw	r16,0(sp)
1000c064:	dfc00315 	stw	ra,12(sp)
1000c068:	dc800215 	stw	r18,8(sp)
1000c06c:	2821883a 	mov	r16,r5
1000c070:	000829c0 	call	1000829c <__sfp_lock_acquire>
1000c074:	88000226 	beq	r17,zero,1000c080 <_fclose_r+0x30>
1000c078:	88800e17 	ldw	r2,56(r17)
1000c07c:	10002926 	beq	r2,zero,1000c124 <_fclose_r+0xd4>
1000c080:	8080030f 	ldh	r2,12(r16)
1000c084:	10002226 	beq	r2,zero,1000c110 <_fclose_r+0xc0>
1000c088:	8809883a 	mov	r4,r17
1000c08c:	800b883a 	mov	r5,r16
1000c090:	0007cd00 	call	10007cd0 <_fflush_r>
1000c094:	1025883a 	mov	r18,r2
1000c098:	80800b17 	ldw	r2,44(r16)
1000c09c:	10000426 	beq	r2,zero,1000c0b0 <_fclose_r+0x60>
1000c0a0:	81400717 	ldw	r5,28(r16)
1000c0a4:	8809883a 	mov	r4,r17
1000c0a8:	103ee83a 	callr	r2
1000c0ac:	10002616 	blt	r2,zero,1000c148 <_fclose_r+0xf8>
1000c0b0:	8080030b 	ldhu	r2,12(r16)
1000c0b4:	1080200c 	andi	r2,r2,128
1000c0b8:	10001f1e 	bne	r2,zero,1000c138 <_fclose_r+0xe8>
1000c0bc:	81400c17 	ldw	r5,48(r16)
1000c0c0:	28000526 	beq	r5,zero,1000c0d8 <_fclose_r+0x88>
1000c0c4:	80801004 	addi	r2,r16,64
1000c0c8:	28800226 	beq	r5,r2,1000c0d4 <_fclose_r+0x84>
1000c0cc:	8809883a 	mov	r4,r17
1000c0d0:	00084000 	call	10008400 <_free_r>
1000c0d4:	80000c15 	stw	zero,48(r16)
1000c0d8:	81401117 	ldw	r5,68(r16)
1000c0dc:	28000326 	beq	r5,zero,1000c0ec <_fclose_r+0x9c>
1000c0e0:	8809883a 	mov	r4,r17
1000c0e4:	00084000 	call	10008400 <_free_r>
1000c0e8:	80001115 	stw	zero,68(r16)
1000c0ec:	8000030d 	sth	zero,12(r16)
1000c0f0:	00082a00 	call	100082a0 <__sfp_lock_release>
1000c0f4:	9005883a 	mov	r2,r18
1000c0f8:	dfc00317 	ldw	ra,12(sp)
1000c0fc:	dc800217 	ldw	r18,8(sp)
1000c100:	dc400117 	ldw	r17,4(sp)
1000c104:	dc000017 	ldw	r16,0(sp)
1000c108:	dec00404 	addi	sp,sp,16
1000c10c:	f800283a 	ret
1000c110:	00082a00 	call	100082a0 <__sfp_lock_release>
1000c114:	0005883a 	mov	r2,zero
1000c118:	003ff706 	br	1000c0f8 <__alt_data_end+0xf800c0f8>
1000c11c:	0005883a 	mov	r2,zero
1000c120:	f800283a 	ret
1000c124:	8809883a 	mov	r4,r17
1000c128:	000828c0 	call	1000828c <__sinit>
1000c12c:	8080030f 	ldh	r2,12(r16)
1000c130:	103fd51e 	bne	r2,zero,1000c088 <__alt_data_end+0xf800c088>
1000c134:	003ff606 	br	1000c110 <__alt_data_end+0xf800c110>
1000c138:	81400417 	ldw	r5,16(r16)
1000c13c:	8809883a 	mov	r4,r17
1000c140:	00084000 	call	10008400 <_free_r>
1000c144:	003fdd06 	br	1000c0bc <__alt_data_end+0xf800c0bc>
1000c148:	04bfffc4 	movi	r18,-1
1000c14c:	003fd806 	br	1000c0b0 <__alt_data_end+0xf800c0b0>

1000c150 <fclose>:
1000c150:	00840074 	movhi	r2,4097
1000c154:	108bac04 	addi	r2,r2,11952
1000c158:	200b883a 	mov	r5,r4
1000c15c:	11000017 	ldw	r4,0(r2)
1000c160:	000c0501 	jmpi	1000c050 <_fclose_r>

1000c164 <_fputwc_r>:
1000c164:	3080030b 	ldhu	r2,12(r6)
1000c168:	defff804 	addi	sp,sp,-32
1000c16c:	dcc00415 	stw	r19,16(sp)
1000c170:	dc800315 	stw	r18,12(sp)
1000c174:	dc000115 	stw	r16,4(sp)
1000c178:	dfc00715 	stw	ra,28(sp)
1000c17c:	dd400615 	stw	r21,24(sp)
1000c180:	dd000515 	stw	r20,20(sp)
1000c184:	dc400215 	stw	r17,8(sp)
1000c188:	10c8000c 	andi	r3,r2,8192
1000c18c:	3021883a 	mov	r16,r6
1000c190:	2027883a 	mov	r19,r4
1000c194:	2825883a 	mov	r18,r5
1000c198:	1800051e 	bne	r3,zero,1000c1b0 <_fputwc_r+0x4c>
1000c19c:	30c01917 	ldw	r3,100(r6)
1000c1a0:	10880014 	ori	r2,r2,8192
1000c1a4:	3080030d 	sth	r2,12(r6)
1000c1a8:	18880014 	ori	r2,r3,8192
1000c1ac:	30801915 	stw	r2,100(r6)
1000c1b0:	00088e80 	call	100088e8 <__locale_mb_cur_max>
1000c1b4:	00c00044 	movi	r3,1
1000c1b8:	10c03e26 	beq	r2,r3,1000c2b4 <_fputwc_r+0x150>
1000c1bc:	9809883a 	mov	r4,r19
1000c1c0:	d80b883a 	mov	r5,sp
1000c1c4:	900d883a 	mov	r6,r18
1000c1c8:	81c01704 	addi	r7,r16,92
1000c1cc:	000d1b40 	call	1000d1b4 <_wcrtomb_r>
1000c1d0:	1029883a 	mov	r20,r2
1000c1d4:	00bfffc4 	movi	r2,-1
1000c1d8:	a0802026 	beq	r20,r2,1000c25c <_fputwc_r+0xf8>
1000c1dc:	d9400003 	ldbu	r5,0(sp)
1000c1e0:	a0001c26 	beq	r20,zero,1000c254 <_fputwc_r+0xf0>
1000c1e4:	0023883a 	mov	r17,zero
1000c1e8:	05400284 	movi	r21,10
1000c1ec:	00000906 	br	1000c214 <_fputwc_r+0xb0>
1000c1f0:	80800017 	ldw	r2,0(r16)
1000c1f4:	11400005 	stb	r5,0(r2)
1000c1f8:	80c00017 	ldw	r3,0(r16)
1000c1fc:	18c00044 	addi	r3,r3,1
1000c200:	80c00015 	stw	r3,0(r16)
1000c204:	8c400044 	addi	r17,r17,1
1000c208:	dc45883a 	add	r2,sp,r17
1000c20c:	8d00112e 	bgeu	r17,r20,1000c254 <_fputwc_r+0xf0>
1000c210:	11400003 	ldbu	r5,0(r2)
1000c214:	80c00217 	ldw	r3,8(r16)
1000c218:	18ffffc4 	addi	r3,r3,-1
1000c21c:	80c00215 	stw	r3,8(r16)
1000c220:	183ff30e 	bge	r3,zero,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c224:	80800617 	ldw	r2,24(r16)
1000c228:	18801916 	blt	r3,r2,1000c290 <_fputwc_r+0x12c>
1000c22c:	80800017 	ldw	r2,0(r16)
1000c230:	11400005 	stb	r5,0(r2)
1000c234:	80800017 	ldw	r2,0(r16)
1000c238:	10c00003 	ldbu	r3,0(r2)
1000c23c:	10800044 	addi	r2,r2,1
1000c240:	1d402326 	beq	r3,r21,1000c2d0 <_fputwc_r+0x16c>
1000c244:	80800015 	stw	r2,0(r16)
1000c248:	8c400044 	addi	r17,r17,1
1000c24c:	dc45883a 	add	r2,sp,r17
1000c250:	8d3fef36 	bltu	r17,r20,1000c210 <__alt_data_end+0xf800c210>
1000c254:	9005883a 	mov	r2,r18
1000c258:	00000406 	br	1000c26c <_fputwc_r+0x108>
1000c25c:	80c0030b 	ldhu	r3,12(r16)
1000c260:	a005883a 	mov	r2,r20
1000c264:	18c01014 	ori	r3,r3,64
1000c268:	80c0030d 	sth	r3,12(r16)
1000c26c:	dfc00717 	ldw	ra,28(sp)
1000c270:	dd400617 	ldw	r21,24(sp)
1000c274:	dd000517 	ldw	r20,20(sp)
1000c278:	dcc00417 	ldw	r19,16(sp)
1000c27c:	dc800317 	ldw	r18,12(sp)
1000c280:	dc400217 	ldw	r17,8(sp)
1000c284:	dc000117 	ldw	r16,4(sp)
1000c288:	dec00804 	addi	sp,sp,32
1000c28c:	f800283a 	ret
1000c290:	9809883a 	mov	r4,r19
1000c294:	29403fcc 	andi	r5,r5,255
1000c298:	800d883a 	mov	r6,r16
1000c29c:	000d0440 	call	1000d044 <__swbuf_r>
1000c2a0:	10bfffe0 	cmpeqi	r2,r2,-1
1000c2a4:	10803fcc 	andi	r2,r2,255
1000c2a8:	103fd626 	beq	r2,zero,1000c204 <__alt_data_end+0xf800c204>
1000c2ac:	00bfffc4 	movi	r2,-1
1000c2b0:	003fee06 	br	1000c26c <__alt_data_end+0xf800c26c>
1000c2b4:	90ffffc4 	addi	r3,r18,-1
1000c2b8:	01003f84 	movi	r4,254
1000c2bc:	20ffbf36 	bltu	r4,r3,1000c1bc <__alt_data_end+0xf800c1bc>
1000c2c0:	900b883a 	mov	r5,r18
1000c2c4:	dc800005 	stb	r18,0(sp)
1000c2c8:	1029883a 	mov	r20,r2
1000c2cc:	003fc506 	br	1000c1e4 <__alt_data_end+0xf800c1e4>
1000c2d0:	9809883a 	mov	r4,r19
1000c2d4:	a80b883a 	mov	r5,r21
1000c2d8:	800d883a 	mov	r6,r16
1000c2dc:	000d0440 	call	1000d044 <__swbuf_r>
1000c2e0:	10bfffe0 	cmpeqi	r2,r2,-1
1000c2e4:	003fef06 	br	1000c2a4 <__alt_data_end+0xf800c2a4>

1000c2e8 <fputwc>:
1000c2e8:	defffc04 	addi	sp,sp,-16
1000c2ec:	dc000115 	stw	r16,4(sp)
1000c2f0:	04040074 	movhi	r16,4097
1000c2f4:	840bac04 	addi	r16,r16,11952
1000c2f8:	dc400215 	stw	r17,8(sp)
1000c2fc:	2023883a 	mov	r17,r4
1000c300:	81000017 	ldw	r4,0(r16)
1000c304:	dfc00315 	stw	ra,12(sp)
1000c308:	280d883a 	mov	r6,r5
1000c30c:	20000626 	beq	r4,zero,1000c328 <fputwc+0x40>
1000c310:	20800e17 	ldw	r2,56(r4)
1000c314:	1000041e 	bne	r2,zero,1000c328 <fputwc+0x40>
1000c318:	d9400015 	stw	r5,0(sp)
1000c31c:	000828c0 	call	1000828c <__sinit>
1000c320:	81000017 	ldw	r4,0(r16)
1000c324:	d9800017 	ldw	r6,0(sp)
1000c328:	880b883a 	mov	r5,r17
1000c32c:	dfc00317 	ldw	ra,12(sp)
1000c330:	dc400217 	ldw	r17,8(sp)
1000c334:	dc000117 	ldw	r16,4(sp)
1000c338:	dec00404 	addi	sp,sp,16
1000c33c:	000c1641 	jmpi	1000c164 <_fputwc_r>

1000c340 <_fstat_r>:
1000c340:	defffd04 	addi	sp,sp,-12
1000c344:	dc000015 	stw	r16,0(sp)
1000c348:	04040074 	movhi	r16,4097
1000c34c:	dc400115 	stw	r17,4(sp)
1000c350:	84128b04 	addi	r16,r16,18988
1000c354:	2023883a 	mov	r17,r4
1000c358:	2809883a 	mov	r4,r5
1000c35c:	300b883a 	mov	r5,r6
1000c360:	dfc00215 	stw	ra,8(sp)
1000c364:	80000015 	stw	zero,0(r16)
1000c368:	000eb380 	call	1000eb38 <fstat>
1000c36c:	00ffffc4 	movi	r3,-1
1000c370:	10c00526 	beq	r2,r3,1000c388 <_fstat_r+0x48>
1000c374:	dfc00217 	ldw	ra,8(sp)
1000c378:	dc400117 	ldw	r17,4(sp)
1000c37c:	dc000017 	ldw	r16,0(sp)
1000c380:	dec00304 	addi	sp,sp,12
1000c384:	f800283a 	ret
1000c388:	80c00017 	ldw	r3,0(r16)
1000c38c:	183ff926 	beq	r3,zero,1000c374 <__alt_data_end+0xf800c374>
1000c390:	88c00015 	stw	r3,0(r17)
1000c394:	003ff706 	br	1000c374 <__alt_data_end+0xf800c374>

1000c398 <__sfvwrite_r>:
1000c398:	30800217 	ldw	r2,8(r6)
1000c39c:	10004526 	beq	r2,zero,1000c4b4 <__sfvwrite_r+0x11c>
1000c3a0:	28c0030b 	ldhu	r3,12(r5)
1000c3a4:	defff404 	addi	sp,sp,-48
1000c3a8:	dd400715 	stw	r21,28(sp)
1000c3ac:	dcc00515 	stw	r19,20(sp)
1000c3b0:	dc000215 	stw	r16,8(sp)
1000c3b4:	dfc00b15 	stw	ra,44(sp)
1000c3b8:	df000a15 	stw	fp,40(sp)
1000c3bc:	ddc00915 	stw	r23,36(sp)
1000c3c0:	dd800815 	stw	r22,32(sp)
1000c3c4:	dd000615 	stw	r20,24(sp)
1000c3c8:	dc800415 	stw	r18,16(sp)
1000c3cc:	dc400315 	stw	r17,12(sp)
1000c3d0:	1880020c 	andi	r2,r3,8
1000c3d4:	2821883a 	mov	r16,r5
1000c3d8:	202b883a 	mov	r21,r4
1000c3dc:	3027883a 	mov	r19,r6
1000c3e0:	10002526 	beq	r2,zero,1000c478 <__sfvwrite_r+0xe0>
1000c3e4:	28800417 	ldw	r2,16(r5)
1000c3e8:	10002326 	beq	r2,zero,1000c478 <__sfvwrite_r+0xe0>
1000c3ec:	1880008c 	andi	r2,r3,2
1000c3f0:	9c400017 	ldw	r17,0(r19)
1000c3f4:	10003126 	beq	r2,zero,1000c4bc <__sfvwrite_r+0x124>
1000c3f8:	0029883a 	mov	r20,zero
1000c3fc:	0025883a 	mov	r18,zero
1000c400:	05810004 	movi	r22,1024
1000c404:	a00d883a 	mov	r6,r20
1000c408:	a809883a 	mov	r4,r21
1000c40c:	90002526 	beq	r18,zero,1000c4a4 <__sfvwrite_r+0x10c>
1000c410:	900f883a 	mov	r7,r18
1000c414:	81400717 	ldw	r5,28(r16)
1000c418:	b480012e 	bgeu	r22,r18,1000c420 <__sfvwrite_r+0x88>
1000c41c:	01c10004 	movi	r7,1024
1000c420:	80800917 	ldw	r2,36(r16)
1000c424:	103ee83a 	callr	r2
1000c428:	0080510e 	bge	zero,r2,1000c570 <__sfvwrite_r+0x1d8>
1000c42c:	98c00217 	ldw	r3,8(r19)
1000c430:	a0a9883a 	add	r20,r20,r2
1000c434:	90a5c83a 	sub	r18,r18,r2
1000c438:	1885c83a 	sub	r2,r3,r2
1000c43c:	98800215 	stw	r2,8(r19)
1000c440:	103ff01e 	bne	r2,zero,1000c404 <__alt_data_end+0xf800c404>
1000c444:	0005883a 	mov	r2,zero
1000c448:	dfc00b17 	ldw	ra,44(sp)
1000c44c:	df000a17 	ldw	fp,40(sp)
1000c450:	ddc00917 	ldw	r23,36(sp)
1000c454:	dd800817 	ldw	r22,32(sp)
1000c458:	dd400717 	ldw	r21,28(sp)
1000c45c:	dd000617 	ldw	r20,24(sp)
1000c460:	dcc00517 	ldw	r19,20(sp)
1000c464:	dc800417 	ldw	r18,16(sp)
1000c468:	dc400317 	ldw	r17,12(sp)
1000c46c:	dc000217 	ldw	r16,8(sp)
1000c470:	dec00c04 	addi	sp,sp,48
1000c474:	f800283a 	ret
1000c478:	a809883a 	mov	r4,r21
1000c47c:	800b883a 	mov	r5,r16
1000c480:	00062500 	call	10006250 <__swsetup_r>
1000c484:	80c0030b 	ldhu	r3,12(r16)
1000c488:	103fd826 	beq	r2,zero,1000c3ec <__alt_data_end+0xf800c3ec>
1000c48c:	18c01014 	ori	r3,r3,64
1000c490:	80c0030d 	sth	r3,12(r16)
1000c494:	00c00244 	movi	r3,9
1000c498:	00bfffc4 	movi	r2,-1
1000c49c:	a8c00015 	stw	r3,0(r21)
1000c4a0:	003fe906 	br	1000c448 <__alt_data_end+0xf800c448>
1000c4a4:	8d000017 	ldw	r20,0(r17)
1000c4a8:	8c800117 	ldw	r18,4(r17)
1000c4ac:	8c400204 	addi	r17,r17,8
1000c4b0:	003fd406 	br	1000c404 <__alt_data_end+0xf800c404>
1000c4b4:	0005883a 	mov	r2,zero
1000c4b8:	f800283a 	ret
1000c4bc:	1880004c 	andi	r2,r3,1
1000c4c0:	1000301e 	bne	r2,zero,1000c584 <__sfvwrite_r+0x1ec>
1000c4c4:	002f883a 	mov	r23,zero
1000c4c8:	0025883a 	mov	r18,zero
1000c4cc:	90001c26 	beq	r18,zero,1000c540 <__sfvwrite_r+0x1a8>
1000c4d0:	1880800c 	andi	r2,r3,512
1000c4d4:	85000217 	ldw	r20,8(r16)
1000c4d8:	10006c26 	beq	r2,zero,1000c68c <__sfvwrite_r+0x2f4>
1000c4dc:	a02d883a 	mov	r22,r20
1000c4e0:	95008536 	bltu	r18,r20,1000c6f8 <__sfvwrite_r+0x360>
1000c4e4:	1881200c 	andi	r2,r3,1152
1000c4e8:	10009d1e 	bne	r2,zero,1000c760 <__sfvwrite_r+0x3c8>
1000c4ec:	81000017 	ldw	r4,0(r16)
1000c4f0:	a039883a 	mov	fp,r20
1000c4f4:	9029883a 	mov	r20,r18
1000c4f8:	b80b883a 	mov	r5,r23
1000c4fc:	b00d883a 	mov	r6,r22
1000c500:	000c8ec0 	call	1000c8ec <memmove>
1000c504:	80c00217 	ldw	r3,8(r16)
1000c508:	81000017 	ldw	r4,0(r16)
1000c50c:	9005883a 	mov	r2,r18
1000c510:	1f39c83a 	sub	fp,r3,fp
1000c514:	258f883a 	add	r7,r4,r22
1000c518:	87000215 	stw	fp,8(r16)
1000c51c:	81c00015 	stw	r7,0(r16)
1000c520:	98c00217 	ldw	r3,8(r19)
1000c524:	b8af883a 	add	r23,r23,r2
1000c528:	90a5c83a 	sub	r18,r18,r2
1000c52c:	1d05c83a 	sub	r2,r3,r20
1000c530:	98800215 	stw	r2,8(r19)
1000c534:	103fc326 	beq	r2,zero,1000c444 <__alt_data_end+0xf800c444>
1000c538:	80c0030b 	ldhu	r3,12(r16)
1000c53c:	903fe41e 	bne	r18,zero,1000c4d0 <__alt_data_end+0xf800c4d0>
1000c540:	8dc00017 	ldw	r23,0(r17)
1000c544:	8c800117 	ldw	r18,4(r17)
1000c548:	8c400204 	addi	r17,r17,8
1000c54c:	003fdf06 	br	1000c4cc <__alt_data_end+0xf800c4cc>
1000c550:	000caa40 	call	1000caa4 <_realloc_r>
1000c554:	102d883a 	mov	r22,r2
1000c558:	1000a01e 	bne	r2,zero,1000c7dc <__sfvwrite_r+0x444>
1000c55c:	81400417 	ldw	r5,16(r16)
1000c560:	a809883a 	mov	r4,r21
1000c564:	00084000 	call	10008400 <_free_r>
1000c568:	00800304 	movi	r2,12
1000c56c:	a8800015 	stw	r2,0(r21)
1000c570:	80c0030b 	ldhu	r3,12(r16)
1000c574:	00bfffc4 	movi	r2,-1
1000c578:	18c01014 	ori	r3,r3,64
1000c57c:	80c0030d 	sth	r3,12(r16)
1000c580:	003fb106 	br	1000c448 <__alt_data_end+0xf800c448>
1000c584:	0029883a 	mov	r20,zero
1000c588:	0011883a 	mov	r8,zero
1000c58c:	0039883a 	mov	fp,zero
1000c590:	0025883a 	mov	r18,zero
1000c594:	90001f26 	beq	r18,zero,1000c614 <__sfvwrite_r+0x27c>
1000c598:	40006826 	beq	r8,zero,1000c73c <__sfvwrite_r+0x3a4>
1000c59c:	a02f883a 	mov	r23,r20
1000c5a0:	9500012e 	bgeu	r18,r20,1000c5a8 <__sfvwrite_r+0x210>
1000c5a4:	902f883a 	mov	r23,r18
1000c5a8:	81000017 	ldw	r4,0(r16)
1000c5ac:	80800417 	ldw	r2,16(r16)
1000c5b0:	b82d883a 	mov	r22,r23
1000c5b4:	81800217 	ldw	r6,8(r16)
1000c5b8:	81c00517 	ldw	r7,20(r16)
1000c5bc:	1100022e 	bgeu	r2,r4,1000c5c8 <__sfvwrite_r+0x230>
1000c5c0:	31c7883a 	add	r3,r6,r7
1000c5c4:	1dc01816 	blt	r3,r23,1000c628 <__sfvwrite_r+0x290>
1000c5c8:	b9c03f16 	blt	r23,r7,1000c6c8 <__sfvwrite_r+0x330>
1000c5cc:	80800917 	ldw	r2,36(r16)
1000c5d0:	81400717 	ldw	r5,28(r16)
1000c5d4:	a809883a 	mov	r4,r21
1000c5d8:	da000115 	stw	r8,4(sp)
1000c5dc:	e00d883a 	mov	r6,fp
1000c5e0:	103ee83a 	callr	r2
1000c5e4:	102d883a 	mov	r22,r2
1000c5e8:	da000117 	ldw	r8,4(sp)
1000c5ec:	00bfe00e 	bge	zero,r2,1000c570 <__alt_data_end+0xf800c570>
1000c5f0:	a5a9c83a 	sub	r20,r20,r22
1000c5f4:	a0001f26 	beq	r20,zero,1000c674 <__sfvwrite_r+0x2dc>
1000c5f8:	98800217 	ldw	r2,8(r19)
1000c5fc:	e5b9883a 	add	fp,fp,r22
1000c600:	95a5c83a 	sub	r18,r18,r22
1000c604:	15adc83a 	sub	r22,r2,r22
1000c608:	9d800215 	stw	r22,8(r19)
1000c60c:	b03f8d26 	beq	r22,zero,1000c444 <__alt_data_end+0xf800c444>
1000c610:	903fe11e 	bne	r18,zero,1000c598 <__alt_data_end+0xf800c598>
1000c614:	8f000017 	ldw	fp,0(r17)
1000c618:	8c800117 	ldw	r18,4(r17)
1000c61c:	0011883a 	mov	r8,zero
1000c620:	8c400204 	addi	r17,r17,8
1000c624:	003fdb06 	br	1000c594 <__alt_data_end+0xf800c594>
1000c628:	180d883a 	mov	r6,r3
1000c62c:	e00b883a 	mov	r5,fp
1000c630:	da000115 	stw	r8,4(sp)
1000c634:	d8c00015 	stw	r3,0(sp)
1000c638:	000c8ec0 	call	1000c8ec <memmove>
1000c63c:	d8c00017 	ldw	r3,0(sp)
1000c640:	80800017 	ldw	r2,0(r16)
1000c644:	a809883a 	mov	r4,r21
1000c648:	800b883a 	mov	r5,r16
1000c64c:	10c5883a 	add	r2,r2,r3
1000c650:	80800015 	stw	r2,0(r16)
1000c654:	d8c00015 	stw	r3,0(sp)
1000c658:	0007cd00 	call	10007cd0 <_fflush_r>
1000c65c:	d8c00017 	ldw	r3,0(sp)
1000c660:	da000117 	ldw	r8,4(sp)
1000c664:	103fc21e 	bne	r2,zero,1000c570 <__alt_data_end+0xf800c570>
1000c668:	182d883a 	mov	r22,r3
1000c66c:	a5a9c83a 	sub	r20,r20,r22
1000c670:	a03fe11e 	bne	r20,zero,1000c5f8 <__alt_data_end+0xf800c5f8>
1000c674:	a809883a 	mov	r4,r21
1000c678:	800b883a 	mov	r5,r16
1000c67c:	0007cd00 	call	10007cd0 <_fflush_r>
1000c680:	103fbb1e 	bne	r2,zero,1000c570 <__alt_data_end+0xf800c570>
1000c684:	0011883a 	mov	r8,zero
1000c688:	003fdb06 	br	1000c5f8 <__alt_data_end+0xf800c5f8>
1000c68c:	81000017 	ldw	r4,0(r16)
1000c690:	80800417 	ldw	r2,16(r16)
1000c694:	1100012e 	bgeu	r2,r4,1000c69c <__sfvwrite_r+0x304>
1000c698:	a4805a36 	bltu	r20,r18,1000c804 <__sfvwrite_r+0x46c>
1000c69c:	81c00517 	ldw	r7,20(r16)
1000c6a0:	91c01a36 	bltu	r18,r7,1000c70c <__sfvwrite_r+0x374>
1000c6a4:	80800917 	ldw	r2,36(r16)
1000c6a8:	81400717 	ldw	r5,28(r16)
1000c6ac:	a809883a 	mov	r4,r21
1000c6b0:	b80d883a 	mov	r6,r23
1000c6b4:	103ee83a 	callr	r2
1000c6b8:	1029883a 	mov	r20,r2
1000c6bc:	00bfac0e 	bge	zero,r2,1000c570 <__alt_data_end+0xf800c570>
1000c6c0:	a005883a 	mov	r2,r20
1000c6c4:	003f9606 	br	1000c520 <__alt_data_end+0xf800c520>
1000c6c8:	b80d883a 	mov	r6,r23
1000c6cc:	e00b883a 	mov	r5,fp
1000c6d0:	da000115 	stw	r8,4(sp)
1000c6d4:	000c8ec0 	call	1000c8ec <memmove>
1000c6d8:	80800217 	ldw	r2,8(r16)
1000c6dc:	80c00017 	ldw	r3,0(r16)
1000c6e0:	da000117 	ldw	r8,4(sp)
1000c6e4:	15c5c83a 	sub	r2,r2,r23
1000c6e8:	1def883a 	add	r23,r3,r23
1000c6ec:	80800215 	stw	r2,8(r16)
1000c6f0:	85c00015 	stw	r23,0(r16)
1000c6f4:	003fbe06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000c6f8:	81000017 	ldw	r4,0(r16)
1000c6fc:	9039883a 	mov	fp,r18
1000c700:	9029883a 	mov	r20,r18
1000c704:	902d883a 	mov	r22,r18
1000c708:	003f7b06 	br	1000c4f8 <__alt_data_end+0xf800c4f8>
1000c70c:	b80b883a 	mov	r5,r23
1000c710:	900d883a 	mov	r6,r18
1000c714:	000c8ec0 	call	1000c8ec <memmove>
1000c718:	80c00217 	ldw	r3,8(r16)
1000c71c:	80800017 	ldw	r2,0(r16)
1000c720:	9029883a 	mov	r20,r18
1000c724:	1c87c83a 	sub	r3,r3,r18
1000c728:	1485883a 	add	r2,r2,r18
1000c72c:	80800015 	stw	r2,0(r16)
1000c730:	80c00215 	stw	r3,8(r16)
1000c734:	9005883a 	mov	r2,r18
1000c738:	003f7906 	br	1000c520 <__alt_data_end+0xf800c520>
1000c73c:	e009883a 	mov	r4,fp
1000c740:	01400284 	movi	r5,10
1000c744:	900d883a 	mov	r6,r18
1000c748:	00092a00 	call	100092a0 <memchr>
1000c74c:	10003826 	beq	r2,zero,1000c830 <__sfvwrite_r+0x498>
1000c750:	10800044 	addi	r2,r2,1
1000c754:	1729c83a 	sub	r20,r2,fp
1000c758:	02000044 	movi	r8,1
1000c75c:	003f8f06 	br	1000c59c <__alt_data_end+0xf800c59c>
1000c760:	80800517 	ldw	r2,20(r16)
1000c764:	81400417 	ldw	r5,16(r16)
1000c768:	87000017 	ldw	fp,0(r16)
1000c76c:	10a9883a 	add	r20,r2,r2
1000c770:	a085883a 	add	r2,r20,r2
1000c774:	1028d7fa 	srli	r20,r2,31
1000c778:	e179c83a 	sub	fp,fp,r5
1000c77c:	e1000044 	addi	r4,fp,1
1000c780:	a085883a 	add	r2,r20,r2
1000c784:	1029d07a 	srai	r20,r2,1
1000c788:	2485883a 	add	r2,r4,r18
1000c78c:	a00d883a 	mov	r6,r20
1000c790:	a080022e 	bgeu	r20,r2,1000c79c <__sfvwrite_r+0x404>
1000c794:	1029883a 	mov	r20,r2
1000c798:	100d883a 	mov	r6,r2
1000c79c:	18c1000c 	andi	r3,r3,1024
1000c7a0:	a809883a 	mov	r4,r21
1000c7a4:	183f6a26 	beq	r3,zero,1000c550 <__alt_data_end+0xf800c550>
1000c7a8:	300b883a 	mov	r5,r6
1000c7ac:	0008af80 	call	10008af8 <_malloc_r>
1000c7b0:	102d883a 	mov	r22,r2
1000c7b4:	103f6c26 	beq	r2,zero,1000c568 <__alt_data_end+0xf800c568>
1000c7b8:	81400417 	ldw	r5,16(r16)
1000c7bc:	1009883a 	mov	r4,r2
1000c7c0:	e00d883a 	mov	r6,fp
1000c7c4:	00093880 	call	10009388 <memcpy>
1000c7c8:	8080030b 	ldhu	r2,12(r16)
1000c7cc:	00fedfc4 	movi	r3,-1153
1000c7d0:	10c4703a 	and	r2,r2,r3
1000c7d4:	10802014 	ori	r2,r2,128
1000c7d8:	8080030d 	sth	r2,12(r16)
1000c7dc:	b709883a 	add	r4,r22,fp
1000c7e0:	a707c83a 	sub	r3,r20,fp
1000c7e4:	85800415 	stw	r22,16(r16)
1000c7e8:	85000515 	stw	r20,20(r16)
1000c7ec:	81000015 	stw	r4,0(r16)
1000c7f0:	9039883a 	mov	fp,r18
1000c7f4:	80c00215 	stw	r3,8(r16)
1000c7f8:	9029883a 	mov	r20,r18
1000c7fc:	902d883a 	mov	r22,r18
1000c800:	003f3d06 	br	1000c4f8 <__alt_data_end+0xf800c4f8>
1000c804:	b80b883a 	mov	r5,r23
1000c808:	a00d883a 	mov	r6,r20
1000c80c:	000c8ec0 	call	1000c8ec <memmove>
1000c810:	80800017 	ldw	r2,0(r16)
1000c814:	a809883a 	mov	r4,r21
1000c818:	800b883a 	mov	r5,r16
1000c81c:	1505883a 	add	r2,r2,r20
1000c820:	80800015 	stw	r2,0(r16)
1000c824:	0007cd00 	call	10007cd0 <_fflush_r>
1000c828:	103fa526 	beq	r2,zero,1000c6c0 <__alt_data_end+0xf800c6c0>
1000c82c:	003f5006 	br	1000c570 <__alt_data_end+0xf800c570>
1000c830:	95000044 	addi	r20,r18,1
1000c834:	02000044 	movi	r8,1
1000c838:	003f5806 	br	1000c59c <__alt_data_end+0xf800c59c>

1000c83c <_isatty_r>:
1000c83c:	defffd04 	addi	sp,sp,-12
1000c840:	dc000015 	stw	r16,0(sp)
1000c844:	04040074 	movhi	r16,4097
1000c848:	dc400115 	stw	r17,4(sp)
1000c84c:	84128b04 	addi	r16,r16,18988
1000c850:	2023883a 	mov	r17,r4
1000c854:	2809883a 	mov	r4,r5
1000c858:	dfc00215 	stw	ra,8(sp)
1000c85c:	80000015 	stw	zero,0(r16)
1000c860:	000ec400 	call	1000ec40 <isatty>
1000c864:	00ffffc4 	movi	r3,-1
1000c868:	10c00526 	beq	r2,r3,1000c880 <_isatty_r+0x44>
1000c86c:	dfc00217 	ldw	ra,8(sp)
1000c870:	dc400117 	ldw	r17,4(sp)
1000c874:	dc000017 	ldw	r16,0(sp)
1000c878:	dec00304 	addi	sp,sp,12
1000c87c:	f800283a 	ret
1000c880:	80c00017 	ldw	r3,0(r16)
1000c884:	183ff926 	beq	r3,zero,1000c86c <__alt_data_end+0xf800c86c>
1000c888:	88c00015 	stw	r3,0(r17)
1000c88c:	003ff706 	br	1000c86c <__alt_data_end+0xf800c86c>

1000c890 <_lseek_r>:
1000c890:	defffd04 	addi	sp,sp,-12
1000c894:	dc000015 	stw	r16,0(sp)
1000c898:	04040074 	movhi	r16,4097
1000c89c:	dc400115 	stw	r17,4(sp)
1000c8a0:	84128b04 	addi	r16,r16,18988
1000c8a4:	2023883a 	mov	r17,r4
1000c8a8:	2809883a 	mov	r4,r5
1000c8ac:	300b883a 	mov	r5,r6
1000c8b0:	380d883a 	mov	r6,r7
1000c8b4:	dfc00215 	stw	ra,8(sp)
1000c8b8:	80000015 	stw	zero,0(r16)
1000c8bc:	000ee200 	call	1000ee20 <lseek>
1000c8c0:	00ffffc4 	movi	r3,-1
1000c8c4:	10c00526 	beq	r2,r3,1000c8dc <_lseek_r+0x4c>
1000c8c8:	dfc00217 	ldw	ra,8(sp)
1000c8cc:	dc400117 	ldw	r17,4(sp)
1000c8d0:	dc000017 	ldw	r16,0(sp)
1000c8d4:	dec00304 	addi	sp,sp,12
1000c8d8:	f800283a 	ret
1000c8dc:	80c00017 	ldw	r3,0(r16)
1000c8e0:	183ff926 	beq	r3,zero,1000c8c8 <__alt_data_end+0xf800c8c8>
1000c8e4:	88c00015 	stw	r3,0(r17)
1000c8e8:	003ff706 	br	1000c8c8 <__alt_data_end+0xf800c8c8>

1000c8ec <memmove>:
1000c8ec:	2005883a 	mov	r2,r4
1000c8f0:	29000b2e 	bgeu	r5,r4,1000c920 <memmove+0x34>
1000c8f4:	298f883a 	add	r7,r5,r6
1000c8f8:	21c0092e 	bgeu	r4,r7,1000c920 <memmove+0x34>
1000c8fc:	2187883a 	add	r3,r4,r6
1000c900:	198bc83a 	sub	r5,r3,r6
1000c904:	30004b26 	beq	r6,zero,1000ca34 <memmove+0x148>
1000c908:	39ffffc4 	addi	r7,r7,-1
1000c90c:	39000003 	ldbu	r4,0(r7)
1000c910:	18ffffc4 	addi	r3,r3,-1
1000c914:	19000005 	stb	r4,0(r3)
1000c918:	197ffb1e 	bne	r3,r5,1000c908 <__alt_data_end+0xf800c908>
1000c91c:	f800283a 	ret
1000c920:	00c003c4 	movi	r3,15
1000c924:	1980412e 	bgeu	r3,r6,1000ca2c <memmove+0x140>
1000c928:	1146b03a 	or	r3,r2,r5
1000c92c:	18c000cc 	andi	r3,r3,3
1000c930:	1800411e 	bne	r3,zero,1000ca38 <memmove+0x14c>
1000c934:	33fffc04 	addi	r15,r6,-16
1000c938:	781ed13a 	srli	r15,r15,4
1000c93c:	28c00104 	addi	r3,r5,4
1000c940:	13400104 	addi	r13,r2,4
1000c944:	781c913a 	slli	r14,r15,4
1000c948:	2b000204 	addi	r12,r5,8
1000c94c:	12c00204 	addi	r11,r2,8
1000c950:	73800504 	addi	r14,r14,20
1000c954:	2a800304 	addi	r10,r5,12
1000c958:	12400304 	addi	r9,r2,12
1000c95c:	2b9d883a 	add	r14,r5,r14
1000c960:	2811883a 	mov	r8,r5
1000c964:	100f883a 	mov	r7,r2
1000c968:	41000017 	ldw	r4,0(r8)
1000c96c:	39c00404 	addi	r7,r7,16
1000c970:	18c00404 	addi	r3,r3,16
1000c974:	393ffc15 	stw	r4,-16(r7)
1000c978:	193ffc17 	ldw	r4,-16(r3)
1000c97c:	6b400404 	addi	r13,r13,16
1000c980:	5ac00404 	addi	r11,r11,16
1000c984:	693ffc15 	stw	r4,-16(r13)
1000c988:	61000017 	ldw	r4,0(r12)
1000c98c:	4a400404 	addi	r9,r9,16
1000c990:	42000404 	addi	r8,r8,16
1000c994:	593ffc15 	stw	r4,-16(r11)
1000c998:	51000017 	ldw	r4,0(r10)
1000c99c:	63000404 	addi	r12,r12,16
1000c9a0:	52800404 	addi	r10,r10,16
1000c9a4:	493ffc15 	stw	r4,-16(r9)
1000c9a8:	1bbfef1e 	bne	r3,r14,1000c968 <__alt_data_end+0xf800c968>
1000c9ac:	79000044 	addi	r4,r15,1
1000c9b0:	2008913a 	slli	r4,r4,4
1000c9b4:	328003cc 	andi	r10,r6,15
1000c9b8:	02c000c4 	movi	r11,3
1000c9bc:	1107883a 	add	r3,r2,r4
1000c9c0:	290b883a 	add	r5,r5,r4
1000c9c4:	5a801e2e 	bgeu	r11,r10,1000ca40 <memmove+0x154>
1000c9c8:	1813883a 	mov	r9,r3
1000c9cc:	2811883a 	mov	r8,r5
1000c9d0:	500f883a 	mov	r7,r10
1000c9d4:	41000017 	ldw	r4,0(r8)
1000c9d8:	4a400104 	addi	r9,r9,4
1000c9dc:	39ffff04 	addi	r7,r7,-4
1000c9e0:	493fff15 	stw	r4,-4(r9)
1000c9e4:	42000104 	addi	r8,r8,4
1000c9e8:	59fffa36 	bltu	r11,r7,1000c9d4 <__alt_data_end+0xf800c9d4>
1000c9ec:	513fff04 	addi	r4,r10,-4
1000c9f0:	2008d0ba 	srli	r4,r4,2
1000c9f4:	318000cc 	andi	r6,r6,3
1000c9f8:	21000044 	addi	r4,r4,1
1000c9fc:	2109883a 	add	r4,r4,r4
1000ca00:	2109883a 	add	r4,r4,r4
1000ca04:	1907883a 	add	r3,r3,r4
1000ca08:	290b883a 	add	r5,r5,r4
1000ca0c:	30000926 	beq	r6,zero,1000ca34 <memmove+0x148>
1000ca10:	198d883a 	add	r6,r3,r6
1000ca14:	29c00003 	ldbu	r7,0(r5)
1000ca18:	18c00044 	addi	r3,r3,1
1000ca1c:	29400044 	addi	r5,r5,1
1000ca20:	19ffffc5 	stb	r7,-1(r3)
1000ca24:	19bffb1e 	bne	r3,r6,1000ca14 <__alt_data_end+0xf800ca14>
1000ca28:	f800283a 	ret
1000ca2c:	1007883a 	mov	r3,r2
1000ca30:	003ff606 	br	1000ca0c <__alt_data_end+0xf800ca0c>
1000ca34:	f800283a 	ret
1000ca38:	1007883a 	mov	r3,r2
1000ca3c:	003ff406 	br	1000ca10 <__alt_data_end+0xf800ca10>
1000ca40:	500d883a 	mov	r6,r10
1000ca44:	003ff106 	br	1000ca0c <__alt_data_end+0xf800ca0c>

1000ca48 <_read_r>:
1000ca48:	defffd04 	addi	sp,sp,-12
1000ca4c:	dc000015 	stw	r16,0(sp)
1000ca50:	04040074 	movhi	r16,4097
1000ca54:	dc400115 	stw	r17,4(sp)
1000ca58:	84128b04 	addi	r16,r16,18988
1000ca5c:	2023883a 	mov	r17,r4
1000ca60:	2809883a 	mov	r4,r5
1000ca64:	300b883a 	mov	r5,r6
1000ca68:	380d883a 	mov	r6,r7
1000ca6c:	dfc00215 	stw	ra,8(sp)
1000ca70:	80000015 	stw	zero,0(r16)
1000ca74:	000f0040 	call	1000f004 <read>
1000ca78:	00ffffc4 	movi	r3,-1
1000ca7c:	10c00526 	beq	r2,r3,1000ca94 <_read_r+0x4c>
1000ca80:	dfc00217 	ldw	ra,8(sp)
1000ca84:	dc400117 	ldw	r17,4(sp)
1000ca88:	dc000017 	ldw	r16,0(sp)
1000ca8c:	dec00304 	addi	sp,sp,12
1000ca90:	f800283a 	ret
1000ca94:	80c00017 	ldw	r3,0(r16)
1000ca98:	183ff926 	beq	r3,zero,1000ca80 <__alt_data_end+0xf800ca80>
1000ca9c:	88c00015 	stw	r3,0(r17)
1000caa0:	003ff706 	br	1000ca80 <__alt_data_end+0xf800ca80>

1000caa4 <_realloc_r>:
1000caa4:	defff604 	addi	sp,sp,-40
1000caa8:	dcc00315 	stw	r19,12(sp)
1000caac:	dc400115 	stw	r17,4(sp)
1000cab0:	dfc00915 	stw	ra,36(sp)
1000cab4:	df000815 	stw	fp,32(sp)
1000cab8:	ddc00715 	stw	r23,28(sp)
1000cabc:	dd800615 	stw	r22,24(sp)
1000cac0:	dd400515 	stw	r21,20(sp)
1000cac4:	dd000415 	stw	r20,16(sp)
1000cac8:	dc800215 	stw	r18,8(sp)
1000cacc:	dc000015 	stw	r16,0(sp)
1000cad0:	2827883a 	mov	r19,r5
1000cad4:	3023883a 	mov	r17,r6
1000cad8:	2800bf26 	beq	r5,zero,1000cdd8 <_realloc_r+0x334>
1000cadc:	2025883a 	mov	r18,r4
1000cae0:	000ef740 	call	1000ef74 <__malloc_lock>
1000cae4:	98ffff17 	ldw	r3,-4(r19)
1000cae8:	01bfff04 	movi	r6,-4
1000caec:	890002c4 	addi	r4,r17,11
1000caf0:	01c00584 	movi	r7,22
1000caf4:	9d7ffe04 	addi	r21,r19,-8
1000caf8:	19a0703a 	and	r16,r3,r6
1000cafc:	39003f2e 	bgeu	r7,r4,1000cbfc <_realloc_r+0x158>
1000cb00:	053ffe04 	movi	r20,-8
1000cb04:	2528703a 	and	r20,r4,r20
1000cb08:	a00f883a 	mov	r7,r20
1000cb0c:	a0008216 	blt	r20,zero,1000cd18 <_realloc_r+0x274>
1000cb10:	a4408136 	bltu	r20,r17,1000cd18 <_realloc_r+0x274>
1000cb14:	81c03c0e 	bge	r16,r7,1000cc08 <_realloc_r+0x164>
1000cb18:	07040074 	movhi	fp,4097
1000cb1c:	e7062704 	addi	fp,fp,6300
1000cb20:	e1000217 	ldw	r4,8(fp)
1000cb24:	ac05883a 	add	r2,r21,r16
1000cb28:	2080bf26 	beq	r4,r2,1000ce28 <_realloc_r+0x384>
1000cb2c:	11000117 	ldw	r4,4(r2)
1000cb30:	023fff84 	movi	r8,-2
1000cb34:	2210703a 	and	r8,r4,r8
1000cb38:	1211883a 	add	r8,r2,r8
1000cb3c:	41400117 	ldw	r5,4(r8)
1000cb40:	2940004c 	andi	r5,r5,1
1000cb44:	28004a1e 	bne	r5,zero,1000cc70 <_realloc_r+0x1cc>
1000cb48:	017fff04 	movi	r5,-4
1000cb4c:	2148703a 	and	r4,r4,r5
1000cb50:	2409883a 	add	r4,r4,r16
1000cb54:	21c0ad0e 	bge	r4,r7,1000ce0c <_realloc_r+0x368>
1000cb58:	18c0004c 	andi	r3,r3,1
1000cb5c:	18007f1e 	bne	r3,zero,1000cd5c <_realloc_r+0x2b8>
1000cb60:	9dfffe17 	ldw	r23,-8(r19)
1000cb64:	adefc83a 	sub	r23,r21,r23
1000cb68:	bd800117 	ldw	r22,4(r23)
1000cb6c:	b14a703a 	and	r5,r22,r5
1000cb70:	216d883a 	add	r22,r4,r5
1000cb74:	b1c04516 	blt	r22,r7,1000cc8c <_realloc_r+0x1e8>
1000cb78:	10c00317 	ldw	r3,12(r2)
1000cb7c:	10800217 	ldw	r2,8(r2)
1000cb80:	81bfff04 	addi	r6,r16,-4
1000cb84:	bc400204 	addi	r17,r23,8
1000cb88:	10c00315 	stw	r3,12(r2)
1000cb8c:	18800215 	stw	r2,8(r3)
1000cb90:	b9400217 	ldw	r5,8(r23)
1000cb94:	b8c00317 	ldw	r3,12(r23)
1000cb98:	00800904 	movi	r2,36
1000cb9c:	28c00315 	stw	r3,12(r5)
1000cba0:	19400215 	stw	r5,8(r3)
1000cba4:	1180ef36 	bltu	r2,r6,1000cf64 <_realloc_r+0x4c0>
1000cba8:	008004c4 	movi	r2,19
1000cbac:	1180da2e 	bgeu	r2,r6,1000cf18 <_realloc_r+0x474>
1000cbb0:	98800017 	ldw	r2,0(r19)
1000cbb4:	b8800215 	stw	r2,8(r23)
1000cbb8:	98800117 	ldw	r2,4(r19)
1000cbbc:	b8800315 	stw	r2,12(r23)
1000cbc0:	008006c4 	movi	r2,27
1000cbc4:	1180fc2e 	bgeu	r2,r6,1000cfb8 <_realloc_r+0x514>
1000cbc8:	98800217 	ldw	r2,8(r19)
1000cbcc:	b8800415 	stw	r2,16(r23)
1000cbd0:	98800317 	ldw	r2,12(r19)
1000cbd4:	b8800515 	stw	r2,20(r23)
1000cbd8:	00800904 	movi	r2,36
1000cbdc:	3080421e 	bne	r6,r2,1000cce8 <_realloc_r+0x244>
1000cbe0:	98800417 	ldw	r2,16(r19)
1000cbe4:	9cc00604 	addi	r19,r19,24
1000cbe8:	b8c00804 	addi	r3,r23,32
1000cbec:	b8800615 	stw	r2,24(r23)
1000cbf0:	98bfff17 	ldw	r2,-4(r19)
1000cbf4:	b8800715 	stw	r2,28(r23)
1000cbf8:	00003d06 	br	1000ccf0 <_realloc_r+0x24c>
1000cbfc:	01c00404 	movi	r7,16
1000cc00:	3829883a 	mov	r20,r7
1000cc04:	003fc206 	br	1000cb10 <__alt_data_end+0xf800cb10>
1000cc08:	9823883a 	mov	r17,r19
1000cc0c:	850fc83a 	sub	r7,r16,r20
1000cc10:	008003c4 	movi	r2,15
1000cc14:	18c0004c 	andi	r3,r3,1
1000cc18:	11c04336 	bltu	r2,r7,1000cd28 <_realloc_r+0x284>
1000cc1c:	1c06b03a 	or	r3,r3,r16
1000cc20:	a8c00115 	stw	r3,4(r21)
1000cc24:	ac21883a 	add	r16,r21,r16
1000cc28:	80c00117 	ldw	r3,4(r16)
1000cc2c:	18c00054 	ori	r3,r3,1
1000cc30:	80c00115 	stw	r3,4(r16)
1000cc34:	9009883a 	mov	r4,r18
1000cc38:	000ef940 	call	1000ef94 <__malloc_unlock>
1000cc3c:	8805883a 	mov	r2,r17
1000cc40:	dfc00917 	ldw	ra,36(sp)
1000cc44:	df000817 	ldw	fp,32(sp)
1000cc48:	ddc00717 	ldw	r23,28(sp)
1000cc4c:	dd800617 	ldw	r22,24(sp)
1000cc50:	dd400517 	ldw	r21,20(sp)
1000cc54:	dd000417 	ldw	r20,16(sp)
1000cc58:	dcc00317 	ldw	r19,12(sp)
1000cc5c:	dc800217 	ldw	r18,8(sp)
1000cc60:	dc400117 	ldw	r17,4(sp)
1000cc64:	dc000017 	ldw	r16,0(sp)
1000cc68:	dec00a04 	addi	sp,sp,40
1000cc6c:	f800283a 	ret
1000cc70:	18c0004c 	andi	r3,r3,1
1000cc74:	1800391e 	bne	r3,zero,1000cd5c <_realloc_r+0x2b8>
1000cc78:	9dfffe17 	ldw	r23,-8(r19)
1000cc7c:	00bfff04 	movi	r2,-4
1000cc80:	adefc83a 	sub	r23,r21,r23
1000cc84:	b9400117 	ldw	r5,4(r23)
1000cc88:	288a703a 	and	r5,r5,r2
1000cc8c:	2c2d883a 	add	r22,r5,r16
1000cc90:	b1c03216 	blt	r22,r7,1000cd5c <_realloc_r+0x2b8>
1000cc94:	b8800317 	ldw	r2,12(r23)
1000cc98:	b8c00217 	ldw	r3,8(r23)
1000cc9c:	81bfff04 	addi	r6,r16,-4
1000cca0:	01000904 	movi	r4,36
1000cca4:	18800315 	stw	r2,12(r3)
1000cca8:	10c00215 	stw	r3,8(r2)
1000ccac:	bc400204 	addi	r17,r23,8
1000ccb0:	2180ac36 	bltu	r4,r6,1000cf64 <_realloc_r+0x4c0>
1000ccb4:	008004c4 	movi	r2,19
1000ccb8:	1180972e 	bgeu	r2,r6,1000cf18 <_realloc_r+0x474>
1000ccbc:	98800017 	ldw	r2,0(r19)
1000ccc0:	b8800215 	stw	r2,8(r23)
1000ccc4:	98800117 	ldw	r2,4(r19)
1000ccc8:	b8800315 	stw	r2,12(r23)
1000cccc:	008006c4 	movi	r2,27
1000ccd0:	1180b92e 	bgeu	r2,r6,1000cfb8 <_realloc_r+0x514>
1000ccd4:	98800217 	ldw	r2,8(r19)
1000ccd8:	b8800415 	stw	r2,16(r23)
1000ccdc:	98800317 	ldw	r2,12(r19)
1000cce0:	b8800515 	stw	r2,20(r23)
1000cce4:	313fbe26 	beq	r6,r4,1000cbe0 <__alt_data_end+0xf800cbe0>
1000cce8:	b8c00604 	addi	r3,r23,24
1000ccec:	9cc00404 	addi	r19,r19,16
1000ccf0:	98800017 	ldw	r2,0(r19)
1000ccf4:	b021883a 	mov	r16,r22
1000ccf8:	b82b883a 	mov	r21,r23
1000ccfc:	18800015 	stw	r2,0(r3)
1000cd00:	98800117 	ldw	r2,4(r19)
1000cd04:	18800115 	stw	r2,4(r3)
1000cd08:	98800217 	ldw	r2,8(r19)
1000cd0c:	18800215 	stw	r2,8(r3)
1000cd10:	b8c00117 	ldw	r3,4(r23)
1000cd14:	003fbd06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cd18:	00800304 	movi	r2,12
1000cd1c:	90800015 	stw	r2,0(r18)
1000cd20:	0005883a 	mov	r2,zero
1000cd24:	003fc606 	br	1000cc40 <__alt_data_end+0xf800cc40>
1000cd28:	1d06b03a 	or	r3,r3,r20
1000cd2c:	ad0b883a 	add	r5,r21,r20
1000cd30:	a8c00115 	stw	r3,4(r21)
1000cd34:	38800054 	ori	r2,r7,1
1000cd38:	28800115 	stw	r2,4(r5)
1000cd3c:	29cf883a 	add	r7,r5,r7
1000cd40:	38800117 	ldw	r2,4(r7)
1000cd44:	9009883a 	mov	r4,r18
1000cd48:	29400204 	addi	r5,r5,8
1000cd4c:	10800054 	ori	r2,r2,1
1000cd50:	38800115 	stw	r2,4(r7)
1000cd54:	00084000 	call	10008400 <_free_r>
1000cd58:	003fb606 	br	1000cc34 <__alt_data_end+0xf800cc34>
1000cd5c:	880b883a 	mov	r5,r17
1000cd60:	9009883a 	mov	r4,r18
1000cd64:	0008af80 	call	10008af8 <_malloc_r>
1000cd68:	1023883a 	mov	r17,r2
1000cd6c:	1000aa26 	beq	r2,zero,1000d018 <_realloc_r+0x574>
1000cd70:	98ffff17 	ldw	r3,-4(r19)
1000cd74:	113ffe04 	addi	r4,r2,-8
1000cd78:	00bfff84 	movi	r2,-2
1000cd7c:	1884703a 	and	r2,r3,r2
1000cd80:	a885883a 	add	r2,r21,r2
1000cd84:	20808626 	beq	r4,r2,1000cfa0 <_realloc_r+0x4fc>
1000cd88:	81bfff04 	addi	r6,r16,-4
1000cd8c:	00800904 	movi	r2,36
1000cd90:	11807036 	bltu	r2,r6,1000cf54 <_realloc_r+0x4b0>
1000cd94:	00c004c4 	movi	r3,19
1000cd98:	19805636 	bltu	r3,r6,1000cef4 <_realloc_r+0x450>
1000cd9c:	8805883a 	mov	r2,r17
1000cda0:	9807883a 	mov	r3,r19
1000cda4:	19000017 	ldw	r4,0(r3)
1000cda8:	11000015 	stw	r4,0(r2)
1000cdac:	19000117 	ldw	r4,4(r3)
1000cdb0:	11000115 	stw	r4,4(r2)
1000cdb4:	18c00217 	ldw	r3,8(r3)
1000cdb8:	10c00215 	stw	r3,8(r2)
1000cdbc:	980b883a 	mov	r5,r19
1000cdc0:	9009883a 	mov	r4,r18
1000cdc4:	00084000 	call	10008400 <_free_r>
1000cdc8:	9009883a 	mov	r4,r18
1000cdcc:	000ef940 	call	1000ef94 <__malloc_unlock>
1000cdd0:	8805883a 	mov	r2,r17
1000cdd4:	003f9a06 	br	1000cc40 <__alt_data_end+0xf800cc40>
1000cdd8:	300b883a 	mov	r5,r6
1000cddc:	dfc00917 	ldw	ra,36(sp)
1000cde0:	df000817 	ldw	fp,32(sp)
1000cde4:	ddc00717 	ldw	r23,28(sp)
1000cde8:	dd800617 	ldw	r22,24(sp)
1000cdec:	dd400517 	ldw	r21,20(sp)
1000cdf0:	dd000417 	ldw	r20,16(sp)
1000cdf4:	dcc00317 	ldw	r19,12(sp)
1000cdf8:	dc800217 	ldw	r18,8(sp)
1000cdfc:	dc400117 	ldw	r17,4(sp)
1000ce00:	dc000017 	ldw	r16,0(sp)
1000ce04:	dec00a04 	addi	sp,sp,40
1000ce08:	0008af81 	jmpi	10008af8 <_malloc_r>
1000ce0c:	11400317 	ldw	r5,12(r2)
1000ce10:	10800217 	ldw	r2,8(r2)
1000ce14:	9823883a 	mov	r17,r19
1000ce18:	2021883a 	mov	r16,r4
1000ce1c:	11400315 	stw	r5,12(r2)
1000ce20:	28800215 	stw	r2,8(r5)
1000ce24:	003f7906 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000ce28:	21000117 	ldw	r4,4(r4)
1000ce2c:	00bfff04 	movi	r2,-4
1000ce30:	a1800404 	addi	r6,r20,16
1000ce34:	2088703a 	and	r4,r4,r2
1000ce38:	2409883a 	add	r4,r4,r16
1000ce3c:	2180380e 	bge	r4,r6,1000cf20 <_realloc_r+0x47c>
1000ce40:	18c0004c 	andi	r3,r3,1
1000ce44:	183fc51e 	bne	r3,zero,1000cd5c <__alt_data_end+0xf800cd5c>
1000ce48:	9dfffe17 	ldw	r23,-8(r19)
1000ce4c:	adefc83a 	sub	r23,r21,r23
1000ce50:	b9400117 	ldw	r5,4(r23)
1000ce54:	288a703a 	and	r5,r5,r2
1000ce58:	216d883a 	add	r22,r4,r5
1000ce5c:	b1bf8b16 	blt	r22,r6,1000cc8c <__alt_data_end+0xf800cc8c>
1000ce60:	b8800317 	ldw	r2,12(r23)
1000ce64:	b8c00217 	ldw	r3,8(r23)
1000ce68:	81bfff04 	addi	r6,r16,-4
1000ce6c:	01000904 	movi	r4,36
1000ce70:	18800315 	stw	r2,12(r3)
1000ce74:	10c00215 	stw	r3,8(r2)
1000ce78:	bc400204 	addi	r17,r23,8
1000ce7c:	21805a36 	bltu	r4,r6,1000cfe8 <_realloc_r+0x544>
1000ce80:	008004c4 	movi	r2,19
1000ce84:	1180562e 	bgeu	r2,r6,1000cfe0 <_realloc_r+0x53c>
1000ce88:	98800017 	ldw	r2,0(r19)
1000ce8c:	b8800215 	stw	r2,8(r23)
1000ce90:	98800117 	ldw	r2,4(r19)
1000ce94:	b8800315 	stw	r2,12(r23)
1000ce98:	008006c4 	movi	r2,27
1000ce9c:	11805636 	bltu	r2,r6,1000cff8 <_realloc_r+0x554>
1000cea0:	b8800404 	addi	r2,r23,16
1000cea4:	9cc00204 	addi	r19,r19,8
1000cea8:	98c00017 	ldw	r3,0(r19)
1000ceac:	10c00015 	stw	r3,0(r2)
1000ceb0:	98c00117 	ldw	r3,4(r19)
1000ceb4:	10c00115 	stw	r3,4(r2)
1000ceb8:	98c00217 	ldw	r3,8(r19)
1000cebc:	10c00215 	stw	r3,8(r2)
1000cec0:	bd07883a 	add	r3,r23,r20
1000cec4:	b505c83a 	sub	r2,r22,r20
1000cec8:	e0c00215 	stw	r3,8(fp)
1000cecc:	10800054 	ori	r2,r2,1
1000ced0:	18800115 	stw	r2,4(r3)
1000ced4:	b8800117 	ldw	r2,4(r23)
1000ced8:	9009883a 	mov	r4,r18
1000cedc:	1080004c 	andi	r2,r2,1
1000cee0:	a0a8b03a 	or	r20,r20,r2
1000cee4:	bd000115 	stw	r20,4(r23)
1000cee8:	000ef940 	call	1000ef94 <__malloc_unlock>
1000ceec:	8805883a 	mov	r2,r17
1000cef0:	003f5306 	br	1000cc40 <__alt_data_end+0xf800cc40>
1000cef4:	98c00017 	ldw	r3,0(r19)
1000cef8:	88c00015 	stw	r3,0(r17)
1000cefc:	98c00117 	ldw	r3,4(r19)
1000cf00:	88c00115 	stw	r3,4(r17)
1000cf04:	00c006c4 	movi	r3,27
1000cf08:	19801d36 	bltu	r3,r6,1000cf80 <_realloc_r+0x4dc>
1000cf0c:	88800204 	addi	r2,r17,8
1000cf10:	98c00204 	addi	r3,r19,8
1000cf14:	003fa306 	br	1000cda4 <__alt_data_end+0xf800cda4>
1000cf18:	8807883a 	mov	r3,r17
1000cf1c:	003f7406 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000cf20:	ad2b883a 	add	r21,r21,r20
1000cf24:	2505c83a 	sub	r2,r4,r20
1000cf28:	e5400215 	stw	r21,8(fp)
1000cf2c:	10800054 	ori	r2,r2,1
1000cf30:	a8800115 	stw	r2,4(r21)
1000cf34:	98bfff17 	ldw	r2,-4(r19)
1000cf38:	9009883a 	mov	r4,r18
1000cf3c:	1080004c 	andi	r2,r2,1
1000cf40:	a0a8b03a 	or	r20,r20,r2
1000cf44:	9d3fff15 	stw	r20,-4(r19)
1000cf48:	000ef940 	call	1000ef94 <__malloc_unlock>
1000cf4c:	9805883a 	mov	r2,r19
1000cf50:	003f3b06 	br	1000cc40 <__alt_data_end+0xf800cc40>
1000cf54:	8809883a 	mov	r4,r17
1000cf58:	980b883a 	mov	r5,r19
1000cf5c:	000c8ec0 	call	1000c8ec <memmove>
1000cf60:	003f9606 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000cf64:	8809883a 	mov	r4,r17
1000cf68:	980b883a 	mov	r5,r19
1000cf6c:	000c8ec0 	call	1000c8ec <memmove>
1000cf70:	b8c00117 	ldw	r3,4(r23)
1000cf74:	b021883a 	mov	r16,r22
1000cf78:	b82b883a 	mov	r21,r23
1000cf7c:	003f2306 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cf80:	98c00217 	ldw	r3,8(r19)
1000cf84:	88c00215 	stw	r3,8(r17)
1000cf88:	98c00317 	ldw	r3,12(r19)
1000cf8c:	88c00315 	stw	r3,12(r17)
1000cf90:	30800c26 	beq	r6,r2,1000cfc4 <_realloc_r+0x520>
1000cf94:	88800404 	addi	r2,r17,16
1000cf98:	98c00404 	addi	r3,r19,16
1000cf9c:	003f8106 	br	1000cda4 <__alt_data_end+0xf800cda4>
1000cfa0:	893fff17 	ldw	r4,-4(r17)
1000cfa4:	00bfff04 	movi	r2,-4
1000cfa8:	9823883a 	mov	r17,r19
1000cfac:	2084703a 	and	r2,r4,r2
1000cfb0:	80a1883a 	add	r16,r16,r2
1000cfb4:	003f1506 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cfb8:	b8c00404 	addi	r3,r23,16
1000cfbc:	9cc00204 	addi	r19,r19,8
1000cfc0:	003f4b06 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000cfc4:	99000417 	ldw	r4,16(r19)
1000cfc8:	88800604 	addi	r2,r17,24
1000cfcc:	98c00604 	addi	r3,r19,24
1000cfd0:	89000415 	stw	r4,16(r17)
1000cfd4:	99000517 	ldw	r4,20(r19)
1000cfd8:	89000515 	stw	r4,20(r17)
1000cfdc:	003f7106 	br	1000cda4 <__alt_data_end+0xf800cda4>
1000cfe0:	8805883a 	mov	r2,r17
1000cfe4:	003fb006 	br	1000cea8 <__alt_data_end+0xf800cea8>
1000cfe8:	8809883a 	mov	r4,r17
1000cfec:	980b883a 	mov	r5,r19
1000cff0:	000c8ec0 	call	1000c8ec <memmove>
1000cff4:	003fb206 	br	1000cec0 <__alt_data_end+0xf800cec0>
1000cff8:	98800217 	ldw	r2,8(r19)
1000cffc:	b8800415 	stw	r2,16(r23)
1000d000:	98800317 	ldw	r2,12(r19)
1000d004:	b8800515 	stw	r2,20(r23)
1000d008:	31000726 	beq	r6,r4,1000d028 <_realloc_r+0x584>
1000d00c:	b8800604 	addi	r2,r23,24
1000d010:	9cc00404 	addi	r19,r19,16
1000d014:	003fa406 	br	1000cea8 <__alt_data_end+0xf800cea8>
1000d018:	9009883a 	mov	r4,r18
1000d01c:	000ef940 	call	1000ef94 <__malloc_unlock>
1000d020:	0005883a 	mov	r2,zero
1000d024:	003f0606 	br	1000cc40 <__alt_data_end+0xf800cc40>
1000d028:	98c00417 	ldw	r3,16(r19)
1000d02c:	9cc00604 	addi	r19,r19,24
1000d030:	b8800804 	addi	r2,r23,32
1000d034:	b8c00615 	stw	r3,24(r23)
1000d038:	98ffff17 	ldw	r3,-4(r19)
1000d03c:	b8c00715 	stw	r3,28(r23)
1000d040:	003f9906 	br	1000cea8 <__alt_data_end+0xf800cea8>

1000d044 <__swbuf_r>:
1000d044:	defffc04 	addi	sp,sp,-16
1000d048:	dc800215 	stw	r18,8(sp)
1000d04c:	dc400115 	stw	r17,4(sp)
1000d050:	dc000015 	stw	r16,0(sp)
1000d054:	dfc00315 	stw	ra,12(sp)
1000d058:	2025883a 	mov	r18,r4
1000d05c:	2823883a 	mov	r17,r5
1000d060:	3021883a 	mov	r16,r6
1000d064:	20000226 	beq	r4,zero,1000d070 <__swbuf_r+0x2c>
1000d068:	20800e17 	ldw	r2,56(r4)
1000d06c:	10004126 	beq	r2,zero,1000d174 <__swbuf_r+0x130>
1000d070:	80c00617 	ldw	r3,24(r16)
1000d074:	8180030b 	ldhu	r6,12(r16)
1000d078:	80c00215 	stw	r3,8(r16)
1000d07c:	30c0020c 	andi	r3,r6,8
1000d080:	18003526 	beq	r3,zero,1000d158 <__swbuf_r+0x114>
1000d084:	80c00417 	ldw	r3,16(r16)
1000d088:	18003326 	beq	r3,zero,1000d158 <__swbuf_r+0x114>
1000d08c:	3088000c 	andi	r2,r6,8192
1000d090:	8c403fcc 	andi	r17,r17,255
1000d094:	10001726 	beq	r2,zero,1000d0f4 <__swbuf_r+0xb0>
1000d098:	80800017 	ldw	r2,0(r16)
1000d09c:	81000517 	ldw	r4,20(r16)
1000d0a0:	10c7c83a 	sub	r3,r2,r3
1000d0a4:	19001d0e 	bge	r3,r4,1000d11c <__swbuf_r+0xd8>
1000d0a8:	18c00044 	addi	r3,r3,1
1000d0ac:	81400217 	ldw	r5,8(r16)
1000d0b0:	11000044 	addi	r4,r2,1
1000d0b4:	81000015 	stw	r4,0(r16)
1000d0b8:	297fffc4 	addi	r5,r5,-1
1000d0bc:	81400215 	stw	r5,8(r16)
1000d0c0:	14400005 	stb	r17,0(r2)
1000d0c4:	80800517 	ldw	r2,20(r16)
1000d0c8:	10c01d26 	beq	r2,r3,1000d140 <__swbuf_r+0xfc>
1000d0cc:	8080030b 	ldhu	r2,12(r16)
1000d0d0:	1080004c 	andi	r2,r2,1
1000d0d4:	1000181e 	bne	r2,zero,1000d138 <__swbuf_r+0xf4>
1000d0d8:	8805883a 	mov	r2,r17
1000d0dc:	dfc00317 	ldw	ra,12(sp)
1000d0e0:	dc800217 	ldw	r18,8(sp)
1000d0e4:	dc400117 	ldw	r17,4(sp)
1000d0e8:	dc000017 	ldw	r16,0(sp)
1000d0ec:	dec00404 	addi	sp,sp,16
1000d0f0:	f800283a 	ret
1000d0f4:	81001917 	ldw	r4,100(r16)
1000d0f8:	00b7ffc4 	movi	r2,-8193
1000d0fc:	31880014 	ori	r6,r6,8192
1000d100:	2084703a 	and	r2,r4,r2
1000d104:	80801915 	stw	r2,100(r16)
1000d108:	80800017 	ldw	r2,0(r16)
1000d10c:	81000517 	ldw	r4,20(r16)
1000d110:	8180030d 	sth	r6,12(r16)
1000d114:	10c7c83a 	sub	r3,r2,r3
1000d118:	193fe316 	blt	r3,r4,1000d0a8 <__alt_data_end+0xf800d0a8>
1000d11c:	9009883a 	mov	r4,r18
1000d120:	800b883a 	mov	r5,r16
1000d124:	0007cd00 	call	10007cd0 <_fflush_r>
1000d128:	1000091e 	bne	r2,zero,1000d150 <__swbuf_r+0x10c>
1000d12c:	80800017 	ldw	r2,0(r16)
1000d130:	00c00044 	movi	r3,1
1000d134:	003fdd06 	br	1000d0ac <__alt_data_end+0xf800d0ac>
1000d138:	00800284 	movi	r2,10
1000d13c:	88bfe61e 	bne	r17,r2,1000d0d8 <__alt_data_end+0xf800d0d8>
1000d140:	9009883a 	mov	r4,r18
1000d144:	800b883a 	mov	r5,r16
1000d148:	0007cd00 	call	10007cd0 <_fflush_r>
1000d14c:	103fe226 	beq	r2,zero,1000d0d8 <__alt_data_end+0xf800d0d8>
1000d150:	00bfffc4 	movi	r2,-1
1000d154:	003fe106 	br	1000d0dc <__alt_data_end+0xf800d0dc>
1000d158:	9009883a 	mov	r4,r18
1000d15c:	800b883a 	mov	r5,r16
1000d160:	00062500 	call	10006250 <__swsetup_r>
1000d164:	1000051e 	bne	r2,zero,1000d17c <__swbuf_r+0x138>
1000d168:	8180030b 	ldhu	r6,12(r16)
1000d16c:	80c00417 	ldw	r3,16(r16)
1000d170:	003fc606 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d174:	000828c0 	call	1000828c <__sinit>
1000d178:	003fbd06 	br	1000d070 <__alt_data_end+0xf800d070>
1000d17c:	80c0030b 	ldhu	r3,12(r16)
1000d180:	00bfffc4 	movi	r2,-1
1000d184:	18c01014 	ori	r3,r3,64
1000d188:	80c0030d 	sth	r3,12(r16)
1000d18c:	00c00244 	movi	r3,9
1000d190:	90c00015 	stw	r3,0(r18)
1000d194:	003fd106 	br	1000d0dc <__alt_data_end+0xf800d0dc>

1000d198 <__swbuf>:
1000d198:	00c40074 	movhi	r3,4097
1000d19c:	18cbac04 	addi	r3,r3,11952
1000d1a0:	2005883a 	mov	r2,r4
1000d1a4:	19000017 	ldw	r4,0(r3)
1000d1a8:	280d883a 	mov	r6,r5
1000d1ac:	100b883a 	mov	r5,r2
1000d1b0:	000d0441 	jmpi	1000d044 <__swbuf_r>

1000d1b4 <_wcrtomb_r>:
1000d1b4:	defff604 	addi	sp,sp,-40
1000d1b8:	00840074 	movhi	r2,4097
1000d1bc:	dc800815 	stw	r18,32(sp)
1000d1c0:	dc400715 	stw	r17,28(sp)
1000d1c4:	dc000615 	stw	r16,24(sp)
1000d1c8:	108bb004 	addi	r2,r2,11968
1000d1cc:	dfc00915 	stw	ra,36(sp)
1000d1d0:	2021883a 	mov	r16,r4
1000d1d4:	3823883a 	mov	r17,r7
1000d1d8:	14800017 	ldw	r18,0(r2)
1000d1dc:	28001426 	beq	r5,zero,1000d230 <_wcrtomb_r+0x7c>
1000d1e0:	d9400415 	stw	r5,16(sp)
1000d1e4:	d9800515 	stw	r6,20(sp)
1000d1e8:	00088dc0 	call	100088dc <__locale_charset>
1000d1ec:	d9400417 	ldw	r5,16(sp)
1000d1f0:	d9800517 	ldw	r6,20(sp)
1000d1f4:	8009883a 	mov	r4,r16
1000d1f8:	dc400015 	stw	r17,0(sp)
1000d1fc:	100f883a 	mov	r7,r2
1000d200:	903ee83a 	callr	r18
1000d204:	00ffffc4 	movi	r3,-1
1000d208:	10c0031e 	bne	r2,r3,1000d218 <_wcrtomb_r+0x64>
1000d20c:	88000015 	stw	zero,0(r17)
1000d210:	00c02284 	movi	r3,138
1000d214:	80c00015 	stw	r3,0(r16)
1000d218:	dfc00917 	ldw	ra,36(sp)
1000d21c:	dc800817 	ldw	r18,32(sp)
1000d220:	dc400717 	ldw	r17,28(sp)
1000d224:	dc000617 	ldw	r16,24(sp)
1000d228:	dec00a04 	addi	sp,sp,40
1000d22c:	f800283a 	ret
1000d230:	00088dc0 	call	100088dc <__locale_charset>
1000d234:	8009883a 	mov	r4,r16
1000d238:	dc400015 	stw	r17,0(sp)
1000d23c:	d9400104 	addi	r5,sp,4
1000d240:	000d883a 	mov	r6,zero
1000d244:	100f883a 	mov	r7,r2
1000d248:	903ee83a 	callr	r18
1000d24c:	003fed06 	br	1000d204 <__alt_data_end+0xf800d204>

1000d250 <wcrtomb>:
1000d250:	defff504 	addi	sp,sp,-44
1000d254:	dc400515 	stw	r17,20(sp)
1000d258:	dc000415 	stw	r16,16(sp)
1000d25c:	dfc00a15 	stw	ra,40(sp)
1000d260:	dd400915 	stw	r21,36(sp)
1000d264:	dd000815 	stw	r20,32(sp)
1000d268:	dcc00715 	stw	r19,28(sp)
1000d26c:	dc800615 	stw	r18,24(sp)
1000d270:	2021883a 	mov	r16,r4
1000d274:	3023883a 	mov	r17,r6
1000d278:	20001d26 	beq	r4,zero,1000d2f0 <wcrtomb+0xa0>
1000d27c:	04840074 	movhi	r18,4097
1000d280:	948bac04 	addi	r18,r18,11952
1000d284:	00840074 	movhi	r2,4097
1000d288:	95400017 	ldw	r21,0(r18)
1000d28c:	108bb004 	addi	r2,r2,11968
1000d290:	15000017 	ldw	r20,0(r2)
1000d294:	2827883a 	mov	r19,r5
1000d298:	00088dc0 	call	100088dc <__locale_charset>
1000d29c:	a809883a 	mov	r4,r21
1000d2a0:	dc400015 	stw	r17,0(sp)
1000d2a4:	800b883a 	mov	r5,r16
1000d2a8:	980d883a 	mov	r6,r19
1000d2ac:	100f883a 	mov	r7,r2
1000d2b0:	a03ee83a 	callr	r20
1000d2b4:	00ffffc4 	movi	r3,-1
1000d2b8:	10c0041e 	bne	r2,r3,1000d2cc <wcrtomb+0x7c>
1000d2bc:	90c00017 	ldw	r3,0(r18)
1000d2c0:	01002284 	movi	r4,138
1000d2c4:	88000015 	stw	zero,0(r17)
1000d2c8:	19000015 	stw	r4,0(r3)
1000d2cc:	dfc00a17 	ldw	ra,40(sp)
1000d2d0:	dd400917 	ldw	r21,36(sp)
1000d2d4:	dd000817 	ldw	r20,32(sp)
1000d2d8:	dcc00717 	ldw	r19,28(sp)
1000d2dc:	dc800617 	ldw	r18,24(sp)
1000d2e0:	dc400517 	ldw	r17,20(sp)
1000d2e4:	dc000417 	ldw	r16,16(sp)
1000d2e8:	dec00b04 	addi	sp,sp,44
1000d2ec:	f800283a 	ret
1000d2f0:	04840074 	movhi	r18,4097
1000d2f4:	948bac04 	addi	r18,r18,11952
1000d2f8:	00840074 	movhi	r2,4097
1000d2fc:	94c00017 	ldw	r19,0(r18)
1000d300:	108bb004 	addi	r2,r2,11968
1000d304:	14000017 	ldw	r16,0(r2)
1000d308:	00088dc0 	call	100088dc <__locale_charset>
1000d30c:	9809883a 	mov	r4,r19
1000d310:	dc400015 	stw	r17,0(sp)
1000d314:	d9400104 	addi	r5,sp,4
1000d318:	000d883a 	mov	r6,zero
1000d31c:	100f883a 	mov	r7,r2
1000d320:	803ee83a 	callr	r16
1000d324:	003fe306 	br	1000d2b4 <__alt_data_end+0xf800d2b4>

1000d328 <__ascii_wctomb>:
1000d328:	28000526 	beq	r5,zero,1000d340 <__ascii_wctomb+0x18>
1000d32c:	00803fc4 	movi	r2,255
1000d330:	11800536 	bltu	r2,r6,1000d348 <__ascii_wctomb+0x20>
1000d334:	29800005 	stb	r6,0(r5)
1000d338:	00800044 	movi	r2,1
1000d33c:	f800283a 	ret
1000d340:	0005883a 	mov	r2,zero
1000d344:	f800283a 	ret
1000d348:	00802284 	movi	r2,138
1000d34c:	20800015 	stw	r2,0(r4)
1000d350:	00bfffc4 	movi	r2,-1
1000d354:	f800283a 	ret

1000d358 <_wctomb_r>:
1000d358:	00840074 	movhi	r2,4097
1000d35c:	defff904 	addi	sp,sp,-28
1000d360:	108bb004 	addi	r2,r2,11968
1000d364:	dfc00615 	stw	ra,24(sp)
1000d368:	dc400515 	stw	r17,20(sp)
1000d36c:	dc000415 	stw	r16,16(sp)
1000d370:	3823883a 	mov	r17,r7
1000d374:	14000017 	ldw	r16,0(r2)
1000d378:	d9000115 	stw	r4,4(sp)
1000d37c:	d9400215 	stw	r5,8(sp)
1000d380:	d9800315 	stw	r6,12(sp)
1000d384:	00088dc0 	call	100088dc <__locale_charset>
1000d388:	d9000117 	ldw	r4,4(sp)
1000d38c:	d9400217 	ldw	r5,8(sp)
1000d390:	d9800317 	ldw	r6,12(sp)
1000d394:	dc400015 	stw	r17,0(sp)
1000d398:	100f883a 	mov	r7,r2
1000d39c:	803ee83a 	callr	r16
1000d3a0:	dfc00617 	ldw	ra,24(sp)
1000d3a4:	dc400517 	ldw	r17,20(sp)
1000d3a8:	dc000417 	ldw	r16,16(sp)
1000d3ac:	dec00704 	addi	sp,sp,28
1000d3b0:	f800283a 	ret

1000d3b4 <__muldi3>:
1000d3b4:	defff604 	addi	sp,sp,-40
1000d3b8:	dd800615 	stw	r22,24(sp)
1000d3bc:	dd400515 	stw	r21,20(sp)
1000d3c0:	25bfffcc 	andi	r22,r4,65535
1000d3c4:	357fffcc 	andi	r21,r6,65535
1000d3c8:	dc400115 	stw	r17,4(sp)
1000d3cc:	2022d43a 	srli	r17,r4,16
1000d3d0:	dcc00315 	stw	r19,12(sp)
1000d3d4:	dc800215 	stw	r18,8(sp)
1000d3d8:	2027883a 	mov	r19,r4
1000d3dc:	2825883a 	mov	r18,r5
1000d3e0:	a809883a 	mov	r4,r21
1000d3e4:	b00b883a 	mov	r5,r22
1000d3e8:	dfc00915 	stw	ra,36(sp)
1000d3ec:	df000815 	stw	fp,32(sp)
1000d3f0:	ddc00715 	stw	r23,28(sp)
1000d3f4:	3839883a 	mov	fp,r7
1000d3f8:	302ed43a 	srli	r23,r6,16
1000d3fc:	dd000415 	stw	r20,16(sp)
1000d400:	dc000015 	stw	r16,0(sp)
1000d404:	3029883a 	mov	r20,r6
1000d408:	0002cfc0 	call	10002cfc <__mulsi3>
1000d40c:	a809883a 	mov	r4,r21
1000d410:	880b883a 	mov	r5,r17
1000d414:	1021883a 	mov	r16,r2
1000d418:	0002cfc0 	call	10002cfc <__mulsi3>
1000d41c:	880b883a 	mov	r5,r17
1000d420:	b809883a 	mov	r4,r23
1000d424:	102b883a 	mov	r21,r2
1000d428:	0002cfc0 	call	10002cfc <__mulsi3>
1000d42c:	b809883a 	mov	r4,r23
1000d430:	b00b883a 	mov	r5,r22
1000d434:	1023883a 	mov	r17,r2
1000d438:	0002cfc0 	call	10002cfc <__mulsi3>
1000d43c:	8012d43a 	srli	r9,r16,16
1000d440:	a885883a 	add	r2,r21,r2
1000d444:	1251883a 	add	r8,r2,r9
1000d448:	4540022e 	bgeu	r8,r21,1000d454 <__muldi3+0xa0>
1000d44c:	00800074 	movhi	r2,1
1000d450:	88a3883a 	add	r17,r17,r2
1000d454:	4006d43a 	srli	r3,r8,16
1000d458:	4010943a 	slli	r8,r8,16
1000d45c:	9809883a 	mov	r4,r19
1000d460:	e00b883a 	mov	r5,fp
1000d464:	843fffcc 	andi	r16,r16,65535
1000d468:	88e3883a 	add	r17,r17,r3
1000d46c:	4421883a 	add	r16,r8,r16
1000d470:	0002cfc0 	call	10002cfc <__mulsi3>
1000d474:	a009883a 	mov	r4,r20
1000d478:	900b883a 	mov	r5,r18
1000d47c:	1027883a 	mov	r19,r2
1000d480:	0002cfc0 	call	10002cfc <__mulsi3>
1000d484:	9885883a 	add	r2,r19,r2
1000d488:	1447883a 	add	r3,r2,r17
1000d48c:	8005883a 	mov	r2,r16
1000d490:	dfc00917 	ldw	ra,36(sp)
1000d494:	df000817 	ldw	fp,32(sp)
1000d498:	ddc00717 	ldw	r23,28(sp)
1000d49c:	dd800617 	ldw	r22,24(sp)
1000d4a0:	dd400517 	ldw	r21,20(sp)
1000d4a4:	dd000417 	ldw	r20,16(sp)
1000d4a8:	dcc00317 	ldw	r19,12(sp)
1000d4ac:	dc800217 	ldw	r18,8(sp)
1000d4b0:	dc400117 	ldw	r17,4(sp)
1000d4b4:	dc000017 	ldw	r16,0(sp)
1000d4b8:	dec00a04 	addi	sp,sp,40
1000d4bc:	f800283a 	ret

1000d4c0 <__divdf3>:
1000d4c0:	defff004 	addi	sp,sp,-64
1000d4c4:	dc800815 	stw	r18,32(sp)
1000d4c8:	2824d53a 	srli	r18,r5,20
1000d4cc:	dd800c15 	stw	r22,48(sp)
1000d4d0:	282cd7fa 	srli	r22,r5,31
1000d4d4:	dc000615 	stw	r16,24(sp)
1000d4d8:	04000434 	movhi	r16,16
1000d4dc:	df000e15 	stw	fp,56(sp)
1000d4e0:	dd000a15 	stw	r20,40(sp)
1000d4e4:	dcc00915 	stw	r19,36(sp)
1000d4e8:	dc400715 	stw	r17,28(sp)
1000d4ec:	843fffc4 	addi	r16,r16,-1
1000d4f0:	dfc00f15 	stw	ra,60(sp)
1000d4f4:	ddc00d15 	stw	r23,52(sp)
1000d4f8:	dd400b15 	stw	r21,44(sp)
1000d4fc:	9481ffcc 	andi	r18,r18,2047
1000d500:	2029883a 	mov	r20,r4
1000d504:	2027883a 	mov	r19,r4
1000d508:	2c22703a 	and	r17,r5,r16
1000d50c:	b7003fcc 	andi	fp,r22,255
1000d510:	90005e26 	beq	r18,zero,1000d68c <__divdf3+0x1cc>
1000d514:	0081ffc4 	movi	r2,2047
1000d518:	90803526 	beq	r18,r2,1000d5f0 <__divdf3+0x130>
1000d51c:	8c000434 	orhi	r16,r17,16
1000d520:	2004d77a 	srli	r2,r4,29
1000d524:	802090fa 	slli	r16,r16,3
1000d528:	202690fa 	slli	r19,r4,3
1000d52c:	94bf0044 	addi	r18,r18,-1023
1000d530:	80a2b03a 	or	r17,r16,r2
1000d534:	0029883a 	mov	r20,zero
1000d538:	0011883a 	mov	r8,zero
1000d53c:	380ad53a 	srli	r5,r7,20
1000d540:	382ed7fa 	srli	r23,r7,31
1000d544:	04000434 	movhi	r16,16
1000d548:	843fffc4 	addi	r16,r16,-1
1000d54c:	2941ffcc 	andi	r5,r5,2047
1000d550:	302b883a 	mov	r21,r6
1000d554:	3c20703a 	and	r16,r7,r16
1000d558:	ba403fcc 	andi	r9,r23,255
1000d55c:	28006726 	beq	r5,zero,1000d6fc <__divdf3+0x23c>
1000d560:	0081ffc4 	movi	r2,2047
1000d564:	28805f26 	beq	r5,r2,1000d6e4 <__divdf3+0x224>
1000d568:	84000434 	orhi	r16,r16,16
1000d56c:	3004d77a 	srli	r2,r6,29
1000d570:	802090fa 	slli	r16,r16,3
1000d574:	302a90fa 	slli	r21,r6,3
1000d578:	297f0044 	addi	r5,r5,-1023
1000d57c:	80a0b03a 	or	r16,r16,r2
1000d580:	000f883a 	mov	r7,zero
1000d584:	3d06b03a 	or	r3,r7,r20
1000d588:	180690ba 	slli	r3,r3,2
1000d58c:	00840074 	movhi	r2,4097
1000d590:	10b56c04 	addi	r2,r2,-10832
1000d594:	1885883a 	add	r2,r3,r2
1000d598:	10800017 	ldw	r2,0(r2)
1000d59c:	b5c8f03a 	xor	r4,r22,r23
1000d5a0:	200d883a 	mov	r6,r4
1000d5a4:	25003fcc 	andi	r20,r4,255
1000d5a8:	9165c83a 	sub	r18,r18,r5
1000d5ac:	1000683a 	jmp	r2
1000d5b0:	1000d7f8 	rdprs	zero,r2,863
1000d5b4:	1000d628 	cmpgeui	zero,r2,856
1000d5b8:	1000d7bc 	xorhi	zero,r2,862
1000d5bc:	1000d60c 	andi	zero,r2,856
1000d5c0:	1000d7bc 	xorhi	zero,r2,862
1000d5c4:	1000d790 	cmplti	zero,r2,862
1000d5c8:	1000d7bc 	xorhi	zero,r2,862
1000d5cc:	1000d60c 	andi	zero,r2,856
1000d5d0:	1000d628 	cmpgeui	zero,r2,856
1000d5d4:	1000d628 	cmpgeui	zero,r2,856
1000d5d8:	1000d790 	cmplti	zero,r2,862
1000d5dc:	1000d60c 	andi	zero,r2,856
1000d5e0:	1000d61c 	xori	zero,r2,856
1000d5e4:	1000d61c 	xori	zero,r2,856
1000d5e8:	1000d61c 	xori	zero,r2,856
1000d5ec:	1000d7cc 	andi	zero,r2,863
1000d5f0:	8904b03a 	or	r2,r17,r4
1000d5f4:	1000631e 	bne	r2,zero,1000d784 <__divdf3+0x2c4>
1000d5f8:	05000204 	movi	r20,8
1000d5fc:	0023883a 	mov	r17,zero
1000d600:	0027883a 	mov	r19,zero
1000d604:	02000084 	movi	r8,2
1000d608:	003fcc06 	br	1000d53c <__alt_data_end+0xf800d53c>
1000d60c:	8023883a 	mov	r17,r16
1000d610:	a827883a 	mov	r19,r21
1000d614:	4839883a 	mov	fp,r9
1000d618:	3811883a 	mov	r8,r7
1000d61c:	00800084 	movi	r2,2
1000d620:	4081531e 	bne	r8,r2,1000db70 <__divdf3+0x6b0>
1000d624:	e029883a 	mov	r20,fp
1000d628:	a180004c 	andi	r6,r20,1
1000d62c:	0201ffc4 	movi	r8,2047
1000d630:	000b883a 	mov	r5,zero
1000d634:	0027883a 	mov	r19,zero
1000d638:	4010953a 	slli	r8,r8,20
1000d63c:	30c03fcc 	andi	r3,r6,255
1000d640:	04000434 	movhi	r16,16
1000d644:	180697fa 	slli	r3,r3,31
1000d648:	843fffc4 	addi	r16,r16,-1
1000d64c:	2c20703a 	and	r16,r5,r16
1000d650:	8220b03a 	or	r16,r16,r8
1000d654:	80c6b03a 	or	r3,r16,r3
1000d658:	9805883a 	mov	r2,r19
1000d65c:	dfc00f17 	ldw	ra,60(sp)
1000d660:	df000e17 	ldw	fp,56(sp)
1000d664:	ddc00d17 	ldw	r23,52(sp)
1000d668:	dd800c17 	ldw	r22,48(sp)
1000d66c:	dd400b17 	ldw	r21,44(sp)
1000d670:	dd000a17 	ldw	r20,40(sp)
1000d674:	dcc00917 	ldw	r19,36(sp)
1000d678:	dc800817 	ldw	r18,32(sp)
1000d67c:	dc400717 	ldw	r17,28(sp)
1000d680:	dc000617 	ldw	r16,24(sp)
1000d684:	dec01004 	addi	sp,sp,64
1000d688:	f800283a 	ret
1000d68c:	8904b03a 	or	r2,r17,r4
1000d690:	10003726 	beq	r2,zero,1000d770 <__divdf3+0x2b0>
1000d694:	88014d26 	beq	r17,zero,1000dbcc <__divdf3+0x70c>
1000d698:	8809883a 	mov	r4,r17
1000d69c:	d9800215 	stw	r6,8(sp)
1000d6a0:	d9c00515 	stw	r7,20(sp)
1000d6a4:	0003fe80 	call	10003fe8 <__clzsi2>
1000d6a8:	d9800217 	ldw	r6,8(sp)
1000d6ac:	d9c00517 	ldw	r7,20(sp)
1000d6b0:	1007883a 	mov	r3,r2
1000d6b4:	01000a04 	movi	r4,40
1000d6b8:	1cfffe04 	addi	r19,r3,-8
1000d6bc:	20c9c83a 	sub	r4,r4,r3
1000d6c0:	8cca983a 	sll	r5,r17,r19
1000d6c4:	a108d83a 	srl	r4,r20,r4
1000d6c8:	a4e6983a 	sll	r19,r20,r19
1000d6cc:	2162b03a 	or	r17,r4,r5
1000d6d0:	04bf0344 	movi	r18,-1011
1000d6d4:	90e5c83a 	sub	r18,r18,r3
1000d6d8:	0029883a 	mov	r20,zero
1000d6dc:	0011883a 	mov	r8,zero
1000d6e0:	003f9606 	br	1000d53c <__alt_data_end+0xf800d53c>
1000d6e4:	8184b03a 	or	r2,r16,r6
1000d6e8:	10001f1e 	bne	r2,zero,1000d768 <__divdf3+0x2a8>
1000d6ec:	0021883a 	mov	r16,zero
1000d6f0:	002b883a 	mov	r21,zero
1000d6f4:	01c00084 	movi	r7,2
1000d6f8:	003fa206 	br	1000d584 <__alt_data_end+0xf800d584>
1000d6fc:	8184b03a 	or	r2,r16,r6
1000d700:	10001526 	beq	r2,zero,1000d758 <__divdf3+0x298>
1000d704:	80013d26 	beq	r16,zero,1000dbfc <__divdf3+0x73c>
1000d708:	8009883a 	mov	r4,r16
1000d70c:	d9800215 	stw	r6,8(sp)
1000d710:	da000315 	stw	r8,12(sp)
1000d714:	da400415 	stw	r9,16(sp)
1000d718:	0003fe80 	call	10003fe8 <__clzsi2>
1000d71c:	d9800217 	ldw	r6,8(sp)
1000d720:	da000317 	ldw	r8,12(sp)
1000d724:	da400417 	ldw	r9,16(sp)
1000d728:	1007883a 	mov	r3,r2
1000d72c:	01000a04 	movi	r4,40
1000d730:	1d7ffe04 	addi	r21,r3,-8
1000d734:	20c9c83a 	sub	r4,r4,r3
1000d738:	8560983a 	sll	r16,r16,r21
1000d73c:	3108d83a 	srl	r4,r6,r4
1000d740:	356a983a 	sll	r21,r6,r21
1000d744:	2420b03a 	or	r16,r4,r16
1000d748:	017f0344 	movi	r5,-1011
1000d74c:	28cbc83a 	sub	r5,r5,r3
1000d750:	000f883a 	mov	r7,zero
1000d754:	003f8b06 	br	1000d584 <__alt_data_end+0xf800d584>
1000d758:	0021883a 	mov	r16,zero
1000d75c:	002b883a 	mov	r21,zero
1000d760:	01c00044 	movi	r7,1
1000d764:	003f8706 	br	1000d584 <__alt_data_end+0xf800d584>
1000d768:	01c000c4 	movi	r7,3
1000d76c:	003f8506 	br	1000d584 <__alt_data_end+0xf800d584>
1000d770:	05000104 	movi	r20,4
1000d774:	0023883a 	mov	r17,zero
1000d778:	0027883a 	mov	r19,zero
1000d77c:	02000044 	movi	r8,1
1000d780:	003f6e06 	br	1000d53c <__alt_data_end+0xf800d53c>
1000d784:	05000304 	movi	r20,12
1000d788:	020000c4 	movi	r8,3
1000d78c:	003f6b06 	br	1000d53c <__alt_data_end+0xf800d53c>
1000d790:	01400434 	movhi	r5,16
1000d794:	000d883a 	mov	r6,zero
1000d798:	297fffc4 	addi	r5,r5,-1
1000d79c:	04ffffc4 	movi	r19,-1
1000d7a0:	0201ffc4 	movi	r8,2047
1000d7a4:	003fa406 	br	1000d638 <__alt_data_end+0xf800d638>
1000d7a8:	043f0084 	movi	r16,-1022
1000d7ac:	84a1c83a 	sub	r16,r16,r18
1000d7b0:	00800e04 	movi	r2,56
1000d7b4:	14014d0e 	bge	r2,r16,1000dcec <__divdf3+0x82c>
1000d7b8:	a180004c 	andi	r6,r20,1
1000d7bc:	0011883a 	mov	r8,zero
1000d7c0:	000b883a 	mov	r5,zero
1000d7c4:	0027883a 	mov	r19,zero
1000d7c8:	003f9b06 	br	1000d638 <__alt_data_end+0xf800d638>
1000d7cc:	8880022c 	andhi	r2,r17,8
1000d7d0:	1000f026 	beq	r2,zero,1000db94 <__divdf3+0x6d4>
1000d7d4:	8080022c 	andhi	r2,r16,8
1000d7d8:	1000ee1e 	bne	r2,zero,1000db94 <__divdf3+0x6d4>
1000d7dc:	00800434 	movhi	r2,16
1000d7e0:	81400234 	orhi	r5,r16,8
1000d7e4:	10bfffc4 	addi	r2,r2,-1
1000d7e8:	b80d883a 	mov	r6,r23
1000d7ec:	288a703a 	and	r5,r5,r2
1000d7f0:	a827883a 	mov	r19,r21
1000d7f4:	003fea06 	br	1000d7a0 <__alt_data_end+0xf800d7a0>
1000d7f8:	84411c36 	bltu	r16,r17,1000dc6c <__divdf3+0x7ac>
1000d7fc:	8c011a26 	beq	r17,r16,1000dc68 <__divdf3+0x7a8>
1000d800:	94bfffc4 	addi	r18,r18,-1
1000d804:	dcc00015 	stw	r19,0(sp)
1000d808:	8811883a 	mov	r8,r17
1000d80c:	002d883a 	mov	r22,zero
1000d810:	a80cd63a 	srli	r6,r21,24
1000d814:	8020923a 	slli	r16,r16,8
1000d818:	a82a923a 	slli	r21,r21,8
1000d81c:	4009883a 	mov	r4,r8
1000d820:	342eb03a 	or	r23,r6,r16
1000d824:	dd400115 	stw	r21,4(sp)
1000d828:	b82ad43a 	srli	r21,r23,16
1000d82c:	da000315 	stw	r8,12(sp)
1000d830:	bcffffcc 	andi	r19,r23,65535
1000d834:	a80b883a 	mov	r5,r21
1000d838:	0002cec0 	call	10002cec <__udivsi3>
1000d83c:	1009883a 	mov	r4,r2
1000d840:	980b883a 	mov	r5,r19
1000d844:	1023883a 	mov	r17,r2
1000d848:	0002cfc0 	call	10002cfc <__mulsi3>
1000d84c:	da000317 	ldw	r8,12(sp)
1000d850:	a80b883a 	mov	r5,r21
1000d854:	1039883a 	mov	fp,r2
1000d858:	4009883a 	mov	r4,r8
1000d85c:	0002cf40 	call	10002cf4 <__umodsi3>
1000d860:	d8c00017 	ldw	r3,0(sp)
1000d864:	1004943a 	slli	r2,r2,16
1000d868:	1810d43a 	srli	r8,r3,16
1000d86c:	120eb03a 	or	r7,r2,r8
1000d870:	3f00062e 	bgeu	r7,fp,1000d88c <__divdf3+0x3cc>
1000d874:	3dcf883a 	add	r7,r7,r23
1000d878:	88bfffc4 	addi	r2,r17,-1
1000d87c:	3dc10a36 	bltu	r7,r23,1000dca8 <__divdf3+0x7e8>
1000d880:	3f01092e 	bgeu	r7,fp,1000dca8 <__divdf3+0x7e8>
1000d884:	8c7fff84 	addi	r17,r17,-2
1000d888:	3dcf883a 	add	r7,r7,r23
1000d88c:	3f39c83a 	sub	fp,r7,fp
1000d890:	e009883a 	mov	r4,fp
1000d894:	a80b883a 	mov	r5,r21
1000d898:	0002cec0 	call	10002cec <__udivsi3>
1000d89c:	1009883a 	mov	r4,r2
1000d8a0:	980b883a 	mov	r5,r19
1000d8a4:	1021883a 	mov	r16,r2
1000d8a8:	0002cfc0 	call	10002cfc <__mulsi3>
1000d8ac:	e009883a 	mov	r4,fp
1000d8b0:	a80b883a 	mov	r5,r21
1000d8b4:	d8800315 	stw	r2,12(sp)
1000d8b8:	0002cf40 	call	10002cf4 <__umodsi3>
1000d8bc:	d9000017 	ldw	r4,0(sp)
1000d8c0:	1004943a 	slli	r2,r2,16
1000d8c4:	da000317 	ldw	r8,12(sp)
1000d8c8:	20ffffcc 	andi	r3,r4,65535
1000d8cc:	10ceb03a 	or	r7,r2,r3
1000d8d0:	3a00062e 	bgeu	r7,r8,1000d8ec <__divdf3+0x42c>
1000d8d4:	3dcf883a 	add	r7,r7,r23
1000d8d8:	80bfffc4 	addi	r2,r16,-1
1000d8dc:	3dc0f036 	bltu	r7,r23,1000dca0 <__divdf3+0x7e0>
1000d8e0:	3a00ef2e 	bgeu	r7,r8,1000dca0 <__divdf3+0x7e0>
1000d8e4:	843fff84 	addi	r16,r16,-2
1000d8e8:	3dcf883a 	add	r7,r7,r23
1000d8ec:	d8c00117 	ldw	r3,4(sp)
1000d8f0:	8822943a 	slli	r17,r17,16
1000d8f4:	3a0fc83a 	sub	r7,r7,r8
1000d8f8:	1806d43a 	srli	r3,r3,16
1000d8fc:	8462b03a 	or	r17,r16,r17
1000d900:	8affffcc 	andi	r11,r17,65535
1000d904:	d8c00015 	stw	r3,0(sp)
1000d908:	d8c00117 	ldw	r3,4(sp)
1000d90c:	8820d43a 	srli	r16,r17,16
1000d910:	5809883a 	mov	r4,r11
1000d914:	1f3fffcc 	andi	fp,r3,65535
1000d918:	e00b883a 	mov	r5,fp
1000d91c:	d9c00515 	stw	r7,20(sp)
1000d920:	dac00215 	stw	r11,8(sp)
1000d924:	0002cfc0 	call	10002cfc <__mulsi3>
1000d928:	8009883a 	mov	r4,r16
1000d92c:	e00b883a 	mov	r5,fp
1000d930:	d8800415 	stw	r2,16(sp)
1000d934:	0002cfc0 	call	10002cfc <__mulsi3>
1000d938:	d9400017 	ldw	r5,0(sp)
1000d93c:	8009883a 	mov	r4,r16
1000d940:	d8800315 	stw	r2,12(sp)
1000d944:	0002cfc0 	call	10002cfc <__mulsi3>
1000d948:	dac00217 	ldw	r11,8(sp)
1000d94c:	d9400017 	ldw	r5,0(sp)
1000d950:	d8800215 	stw	r2,8(sp)
1000d954:	5809883a 	mov	r4,r11
1000d958:	0002cfc0 	call	10002cfc <__mulsi3>
1000d95c:	da400417 	ldw	r9,16(sp)
1000d960:	da800317 	ldw	r10,12(sp)
1000d964:	d9c00517 	ldw	r7,20(sp)
1000d968:	480ad43a 	srli	r5,r9,16
1000d96c:	5085883a 	add	r2,r10,r2
1000d970:	db000217 	ldw	r12,8(sp)
1000d974:	1151883a 	add	r8,r2,r5
1000d978:	4280022e 	bgeu	r8,r10,1000d984 <__divdf3+0x4c4>
1000d97c:	00800074 	movhi	r2,1
1000d980:	6099883a 	add	r12,r12,r2
1000d984:	400ad43a 	srli	r5,r8,16
1000d988:	4010943a 	slli	r8,r8,16
1000d98c:	4c3fffcc 	andi	r16,r9,65535
1000d990:	6149883a 	add	r4,r12,r5
1000d994:	4411883a 	add	r8,r8,r16
1000d998:	3900a736 	bltu	r7,r4,1000dc38 <__divdf3+0x778>
1000d99c:	3900c426 	beq	r7,r4,1000dcb0 <__divdf3+0x7f0>
1000d9a0:	3909c83a 	sub	r4,r7,r4
1000d9a4:	b221c83a 	sub	r16,r22,r8
1000d9a8:	b42d803a 	cmpltu	r22,r22,r16
1000d9ac:	25adc83a 	sub	r22,r4,r22
1000d9b0:	b5c0c626 	beq	r22,r23,1000dccc <__divdf3+0x80c>
1000d9b4:	b009883a 	mov	r4,r22
1000d9b8:	a80b883a 	mov	r5,r21
1000d9bc:	0002cec0 	call	10002cec <__udivsi3>
1000d9c0:	1009883a 	mov	r4,r2
1000d9c4:	980b883a 	mov	r5,r19
1000d9c8:	d8800315 	stw	r2,12(sp)
1000d9cc:	0002cfc0 	call	10002cfc <__mulsi3>
1000d9d0:	a80b883a 	mov	r5,r21
1000d9d4:	b009883a 	mov	r4,r22
1000d9d8:	d8800415 	stw	r2,16(sp)
1000d9dc:	0002cf40 	call	10002cf4 <__umodsi3>
1000d9e0:	1004943a 	slli	r2,r2,16
1000d9e4:	800ed43a 	srli	r7,r16,16
1000d9e8:	da400417 	ldw	r9,16(sp)
1000d9ec:	da000317 	ldw	r8,12(sp)
1000d9f0:	11cab03a 	or	r5,r2,r7
1000d9f4:	2a40062e 	bgeu	r5,r9,1000da10 <__divdf3+0x550>
1000d9f8:	2dcb883a 	add	r5,r5,r23
1000d9fc:	40bfffc4 	addi	r2,r8,-1
1000da00:	2dc0b436 	bltu	r5,r23,1000dcd4 <__divdf3+0x814>
1000da04:	2a40b32e 	bgeu	r5,r9,1000dcd4 <__divdf3+0x814>
1000da08:	423fff84 	addi	r8,r8,-2
1000da0c:	2dcb883a 	add	r5,r5,r23
1000da10:	2a6dc83a 	sub	r22,r5,r9
1000da14:	b009883a 	mov	r4,r22
1000da18:	a80b883a 	mov	r5,r21
1000da1c:	da000315 	stw	r8,12(sp)
1000da20:	0002cec0 	call	10002cec <__udivsi3>
1000da24:	980b883a 	mov	r5,r19
1000da28:	1009883a 	mov	r4,r2
1000da2c:	d8800415 	stw	r2,16(sp)
1000da30:	0002cfc0 	call	10002cfc <__mulsi3>
1000da34:	b009883a 	mov	r4,r22
1000da38:	a80b883a 	mov	r5,r21
1000da3c:	1027883a 	mov	r19,r2
1000da40:	0002cf40 	call	10002cf4 <__umodsi3>
1000da44:	1004943a 	slli	r2,r2,16
1000da48:	843fffcc 	andi	r16,r16,65535
1000da4c:	da000317 	ldw	r8,12(sp)
1000da50:	140eb03a 	or	r7,r2,r16
1000da54:	da400417 	ldw	r9,16(sp)
1000da58:	3cc0062e 	bgeu	r7,r19,1000da74 <__divdf3+0x5b4>
1000da5c:	3dcf883a 	add	r7,r7,r23
1000da60:	48bfffc4 	addi	r2,r9,-1
1000da64:	3dc09d36 	bltu	r7,r23,1000dcdc <__divdf3+0x81c>
1000da68:	3cc09c2e 	bgeu	r7,r19,1000dcdc <__divdf3+0x81c>
1000da6c:	4a7fff84 	addi	r9,r9,-2
1000da70:	3dcf883a 	add	r7,r7,r23
1000da74:	4010943a 	slli	r8,r8,16
1000da78:	3cebc83a 	sub	r21,r7,r19
1000da7c:	e00b883a 	mov	r5,fp
1000da80:	4a26b03a 	or	r19,r9,r8
1000da84:	99ffffcc 	andi	r7,r19,65535
1000da88:	9820d43a 	srli	r16,r19,16
1000da8c:	3809883a 	mov	r4,r7
1000da90:	d9c00515 	stw	r7,20(sp)
1000da94:	0002cfc0 	call	10002cfc <__mulsi3>
1000da98:	8009883a 	mov	r4,r16
1000da9c:	e00b883a 	mov	r5,fp
1000daa0:	102d883a 	mov	r22,r2
1000daa4:	0002cfc0 	call	10002cfc <__mulsi3>
1000daa8:	d9400017 	ldw	r5,0(sp)
1000daac:	8009883a 	mov	r4,r16
1000dab0:	1039883a 	mov	fp,r2
1000dab4:	0002cfc0 	call	10002cfc <__mulsi3>
1000dab8:	d9c00517 	ldw	r7,20(sp)
1000dabc:	d9400017 	ldw	r5,0(sp)
1000dac0:	1021883a 	mov	r16,r2
1000dac4:	3809883a 	mov	r4,r7
1000dac8:	0002cfc0 	call	10002cfc <__mulsi3>
1000dacc:	b008d43a 	srli	r4,r22,16
1000dad0:	e085883a 	add	r2,fp,r2
1000dad4:	1109883a 	add	r4,r2,r4
1000dad8:	2700022e 	bgeu	r4,fp,1000dae4 <__divdf3+0x624>
1000dadc:	00800074 	movhi	r2,1
1000dae0:	80a1883a 	add	r16,r16,r2
1000dae4:	200ad43a 	srli	r5,r4,16
1000dae8:	2008943a 	slli	r4,r4,16
1000daec:	b5bfffcc 	andi	r22,r22,65535
1000daf0:	8145883a 	add	r2,r16,r5
1000daf4:	2589883a 	add	r4,r4,r22
1000daf8:	a8802c36 	bltu	r21,r2,1000dbac <__divdf3+0x6ec>
1000dafc:	a880a426 	beq	r21,r2,1000dd90 <__divdf3+0x8d0>
1000db00:	9cc00054 	ori	r19,r19,1
1000db04:	9200ffc4 	addi	r8,r18,1023
1000db08:	023f270e 	bge	zero,r8,1000d7a8 <__alt_data_end+0xf800d7a8>
1000db0c:	988001cc 	andi	r2,r19,7
1000db10:	10000726 	beq	r2,zero,1000db30 <__divdf3+0x670>
1000db14:	990003cc 	andi	r4,r19,15
1000db18:	00800104 	movi	r2,4
1000db1c:	20800426 	beq	r4,r2,1000db30 <__divdf3+0x670>
1000db20:	9885883a 	add	r2,r19,r2
1000db24:	14e7803a 	cmpltu	r19,r2,r19
1000db28:	8ce3883a 	add	r17,r17,r19
1000db2c:	1027883a 	mov	r19,r2
1000db30:	8880402c 	andhi	r2,r17,256
1000db34:	10000426 	beq	r2,zero,1000db48 <__divdf3+0x688>
1000db38:	00bfc034 	movhi	r2,65280
1000db3c:	10bfffc4 	addi	r2,r2,-1
1000db40:	92010004 	addi	r8,r18,1024
1000db44:	88a2703a 	and	r17,r17,r2
1000db48:	0081ff84 	movi	r2,2046
1000db4c:	123eb616 	blt	r2,r8,1000d628 <__alt_data_end+0xf800d628>
1000db50:	9826d0fa 	srli	r19,r19,3
1000db54:	8804977a 	slli	r2,r17,29
1000db58:	8820927a 	slli	r16,r17,9
1000db5c:	4201ffcc 	andi	r8,r8,2047
1000db60:	14e6b03a 	or	r19,r2,r19
1000db64:	800ad33a 	srli	r5,r16,12
1000db68:	a180004c 	andi	r6,r20,1
1000db6c:	003eb206 	br	1000d638 <__alt_data_end+0xf800d638>
1000db70:	008000c4 	movi	r2,3
1000db74:	4080ac26 	beq	r8,r2,1000de28 <__divdf3+0x968>
1000db78:	00800044 	movi	r2,1
1000db7c:	4080591e 	bne	r8,r2,1000dce4 <__divdf3+0x824>
1000db80:	e00d883a 	mov	r6,fp
1000db84:	0011883a 	mov	r8,zero
1000db88:	000b883a 	mov	r5,zero
1000db8c:	0027883a 	mov	r19,zero
1000db90:	003ea906 	br	1000d638 <__alt_data_end+0xf800d638>
1000db94:	00800434 	movhi	r2,16
1000db98:	89400234 	orhi	r5,r17,8
1000db9c:	10bfffc4 	addi	r2,r2,-1
1000dba0:	b00d883a 	mov	r6,r22
1000dba4:	288a703a 	and	r5,r5,r2
1000dba8:	003efd06 	br	1000d7a0 <__alt_data_end+0xf800d7a0>
1000dbac:	adcf883a 	add	r7,r21,r23
1000dbb0:	997fffc4 	addi	r5,r19,-1
1000dbb4:	3dc0412e 	bgeu	r7,r23,1000dcbc <__divdf3+0x7fc>
1000dbb8:	2827883a 	mov	r19,r5
1000dbbc:	38bfd01e 	bne	r7,r2,1000db00 <__alt_data_end+0xf800db00>
1000dbc0:	d8c00117 	ldw	r3,4(sp)
1000dbc4:	193fce1e 	bne	r3,r4,1000db00 <__alt_data_end+0xf800db00>
1000dbc8:	003fce06 	br	1000db04 <__alt_data_end+0xf800db04>
1000dbcc:	d9800215 	stw	r6,8(sp)
1000dbd0:	d9c00515 	stw	r7,20(sp)
1000dbd4:	0003fe80 	call	10003fe8 <__clzsi2>
1000dbd8:	10c00804 	addi	r3,r2,32
1000dbdc:	010009c4 	movi	r4,39
1000dbe0:	d9800217 	ldw	r6,8(sp)
1000dbe4:	d9c00517 	ldw	r7,20(sp)
1000dbe8:	20feb20e 	bge	r4,r3,1000d6b4 <__alt_data_end+0xf800d6b4>
1000dbec:	117ffe04 	addi	r5,r2,-8
1000dbf0:	a162983a 	sll	r17,r20,r5
1000dbf4:	0027883a 	mov	r19,zero
1000dbf8:	003eb506 	br	1000d6d0 <__alt_data_end+0xf800d6d0>
1000dbfc:	3009883a 	mov	r4,r6
1000dc00:	d9800215 	stw	r6,8(sp)
1000dc04:	da000315 	stw	r8,12(sp)
1000dc08:	da400415 	stw	r9,16(sp)
1000dc0c:	0003fe80 	call	10003fe8 <__clzsi2>
1000dc10:	10c00804 	addi	r3,r2,32
1000dc14:	010009c4 	movi	r4,39
1000dc18:	d9800217 	ldw	r6,8(sp)
1000dc1c:	da000317 	ldw	r8,12(sp)
1000dc20:	da400417 	ldw	r9,16(sp)
1000dc24:	20fec10e 	bge	r4,r3,1000d72c <__alt_data_end+0xf800d72c>
1000dc28:	10bffe04 	addi	r2,r2,-8
1000dc2c:	a8a0983a 	sll	r16,r21,r2
1000dc30:	002b883a 	mov	r21,zero
1000dc34:	003ec406 	br	1000d748 <__alt_data_end+0xf800d748>
1000dc38:	d8c00117 	ldw	r3,4(sp)
1000dc3c:	b0ed883a 	add	r22,r22,r3
1000dc40:	b0c5803a 	cmpltu	r2,r22,r3
1000dc44:	15c5883a 	add	r2,r2,r23
1000dc48:	11cf883a 	add	r7,r2,r7
1000dc4c:	88bfffc4 	addi	r2,r17,-1
1000dc50:	b9c00d2e 	bgeu	r23,r7,1000dc88 <__divdf3+0x7c8>
1000dc54:	39003f36 	bltu	r7,r4,1000dd54 <__divdf3+0x894>
1000dc58:	21c06a26 	beq	r4,r7,1000de04 <__divdf3+0x944>
1000dc5c:	3909c83a 	sub	r4,r7,r4
1000dc60:	1023883a 	mov	r17,r2
1000dc64:	003f4f06 	br	1000d9a4 <__alt_data_end+0xf800d9a4>
1000dc68:	9d7ee536 	bltu	r19,r21,1000d800 <__alt_data_end+0xf800d800>
1000dc6c:	982ed07a 	srli	r23,r19,1
1000dc70:	880497fa 	slli	r2,r17,31
1000dc74:	8810d07a 	srli	r8,r17,1
1000dc78:	982c97fa 	slli	r22,r19,31
1000dc7c:	b884b03a 	or	r2,r23,r2
1000dc80:	d8800015 	stw	r2,0(sp)
1000dc84:	003ee206 	br	1000d810 <__alt_data_end+0xf800d810>
1000dc88:	3dfff41e 	bne	r7,r23,1000dc5c <__alt_data_end+0xf800dc5c>
1000dc8c:	d8c00117 	ldw	r3,4(sp)
1000dc90:	b0fff02e 	bgeu	r22,r3,1000dc54 <__alt_data_end+0xf800dc54>
1000dc94:	b909c83a 	sub	r4,r23,r4
1000dc98:	1023883a 	mov	r17,r2
1000dc9c:	003f4106 	br	1000d9a4 <__alt_data_end+0xf800d9a4>
1000dca0:	1021883a 	mov	r16,r2
1000dca4:	003f1106 	br	1000d8ec <__alt_data_end+0xf800d8ec>
1000dca8:	1023883a 	mov	r17,r2
1000dcac:	003ef706 	br	1000d88c <__alt_data_end+0xf800d88c>
1000dcb0:	b23fe136 	bltu	r22,r8,1000dc38 <__alt_data_end+0xf800dc38>
1000dcb4:	0009883a 	mov	r4,zero
1000dcb8:	003f3a06 	br	1000d9a4 <__alt_data_end+0xf800d9a4>
1000dcbc:	38802c36 	bltu	r7,r2,1000dd70 <__divdf3+0x8b0>
1000dcc0:	11c05326 	beq	r2,r7,1000de10 <__divdf3+0x950>
1000dcc4:	2827883a 	mov	r19,r5
1000dcc8:	003f8d06 	br	1000db00 <__alt_data_end+0xf800db00>
1000dccc:	04ffffc4 	movi	r19,-1
1000dcd0:	003f8c06 	br	1000db04 <__alt_data_end+0xf800db04>
1000dcd4:	1011883a 	mov	r8,r2
1000dcd8:	003f4d06 	br	1000da10 <__alt_data_end+0xf800da10>
1000dcdc:	1013883a 	mov	r9,r2
1000dce0:	003f6406 	br	1000da74 <__alt_data_end+0xf800da74>
1000dce4:	e029883a 	mov	r20,fp
1000dce8:	003f8606 	br	1000db04 <__alt_data_end+0xf800db04>
1000dcec:	008007c4 	movi	r2,31
1000dcf0:	14002a16 	blt	r2,r16,1000dd9c <__divdf3+0x8dc>
1000dcf4:	91410784 	addi	r5,r18,1054
1000dcf8:	9c0cd83a 	srl	r6,r19,r16
1000dcfc:	8948983a 	sll	r4,r17,r5
1000dd00:	9944983a 	sll	r2,r19,r5
1000dd04:	8c20d83a 	srl	r16,r17,r16
1000dd08:	3108b03a 	or	r4,r6,r4
1000dd0c:	1004c03a 	cmpne	r2,r2,zero
1000dd10:	2084b03a 	or	r2,r4,r2
1000dd14:	110001cc 	andi	r4,r2,7
1000dd18:	20000726 	beq	r4,zero,1000dd38 <__divdf3+0x878>
1000dd1c:	114003cc 	andi	r5,r2,15
1000dd20:	01000104 	movi	r4,4
1000dd24:	29000426 	beq	r5,r4,1000dd38 <__divdf3+0x878>
1000dd28:	11000104 	addi	r4,r2,4
1000dd2c:	2085803a 	cmpltu	r2,r4,r2
1000dd30:	80a1883a 	add	r16,r16,r2
1000dd34:	2005883a 	mov	r2,r4
1000dd38:	8100202c 	andhi	r4,r16,128
1000dd3c:	20002d26 	beq	r4,zero,1000ddf4 <__divdf3+0x934>
1000dd40:	a180004c 	andi	r6,r20,1
1000dd44:	02000044 	movi	r8,1
1000dd48:	000b883a 	mov	r5,zero
1000dd4c:	0027883a 	mov	r19,zero
1000dd50:	003e3906 	br	1000d638 <__alt_data_end+0xf800d638>
1000dd54:	d8c00117 	ldw	r3,4(sp)
1000dd58:	8c7fff84 	addi	r17,r17,-2
1000dd5c:	b0ed883a 	add	r22,r22,r3
1000dd60:	b0c5803a 	cmpltu	r2,r22,r3
1000dd64:	15c5883a 	add	r2,r2,r23
1000dd68:	11cf883a 	add	r7,r2,r7
1000dd6c:	003f0c06 	br	1000d9a0 <__alt_data_end+0xf800d9a0>
1000dd70:	d8c00117 	ldw	r3,4(sp)
1000dd74:	997fff84 	addi	r5,r19,-2
1000dd78:	18d1883a 	add	r8,r3,r3
1000dd7c:	40c7803a 	cmpltu	r3,r8,r3
1000dd80:	1dcd883a 	add	r6,r3,r23
1000dd84:	398f883a 	add	r7,r7,r6
1000dd88:	da000115 	stw	r8,4(sp)
1000dd8c:	003f8a06 	br	1000dbb8 <__alt_data_end+0xf800dbb8>
1000dd90:	203f861e 	bne	r4,zero,1000dbac <__alt_data_end+0xf800dbac>
1000dd94:	d8000115 	stw	zero,4(sp)
1000dd98:	003f8906 	br	1000dbc0 <__alt_data_end+0xf800dbc0>
1000dd9c:	00bef884 	movi	r2,-1054
1000dda0:	1485c83a 	sub	r2,r2,r18
1000dda4:	01000804 	movi	r4,32
1000dda8:	8884d83a 	srl	r2,r17,r2
1000ddac:	81001c26 	beq	r16,r4,1000de20 <__divdf3+0x960>
1000ddb0:	91010f84 	addi	r4,r18,1086
1000ddb4:	8908983a 	sll	r4,r17,r4
1000ddb8:	24c8b03a 	or	r4,r4,r19
1000ddbc:	2008c03a 	cmpne	r4,r4,zero
1000ddc0:	2084b03a 	or	r2,r4,r2
1000ddc4:	140001cc 	andi	r16,r2,7
1000ddc8:	8000061e 	bne	r16,zero,1000dde4 <__divdf3+0x924>
1000ddcc:	000b883a 	mov	r5,zero
1000ddd0:	1004d0fa 	srli	r2,r2,3
1000ddd4:	a180004c 	andi	r6,r20,1
1000ddd8:	0011883a 	mov	r8,zero
1000dddc:	1426b03a 	or	r19,r2,r16
1000dde0:	003e1506 	br	1000d638 <__alt_data_end+0xf800d638>
1000dde4:	114003cc 	andi	r5,r2,15
1000dde8:	01000104 	movi	r4,4
1000ddec:	0021883a 	mov	r16,zero
1000ddf0:	293fcd1e 	bne	r5,r4,1000dd28 <__alt_data_end+0xf800dd28>
1000ddf4:	800a927a 	slli	r5,r16,9
1000ddf8:	8020977a 	slli	r16,r16,29
1000ddfc:	280ad33a 	srli	r5,r5,12
1000de00:	003ff306 	br	1000ddd0 <__alt_data_end+0xf800ddd0>
1000de04:	b23fd336 	bltu	r22,r8,1000dd54 <__alt_data_end+0xf800dd54>
1000de08:	1023883a 	mov	r17,r2
1000de0c:	003fa906 	br	1000dcb4 <__alt_data_end+0xf800dcb4>
1000de10:	d8c00117 	ldw	r3,4(sp)
1000de14:	193fd636 	bltu	r3,r4,1000dd70 <__alt_data_end+0xf800dd70>
1000de18:	2827883a 	mov	r19,r5
1000de1c:	003f6806 	br	1000dbc0 <__alt_data_end+0xf800dbc0>
1000de20:	0009883a 	mov	r4,zero
1000de24:	003fe406 	br	1000ddb8 <__alt_data_end+0xf800ddb8>
1000de28:	00800434 	movhi	r2,16
1000de2c:	89400234 	orhi	r5,r17,8
1000de30:	10bfffc4 	addi	r2,r2,-1
1000de34:	e00d883a 	mov	r6,fp
1000de38:	288a703a 	and	r5,r5,r2
1000de3c:	003e5806 	br	1000d7a0 <__alt_data_end+0xf800d7a0>

1000de40 <__eqdf2>:
1000de40:	2804d53a 	srli	r2,r5,20
1000de44:	3806d53a 	srli	r3,r7,20
1000de48:	02000434 	movhi	r8,16
1000de4c:	423fffc4 	addi	r8,r8,-1
1000de50:	1081ffcc 	andi	r2,r2,2047
1000de54:	0241ffc4 	movi	r9,2047
1000de58:	2a14703a 	and	r10,r5,r8
1000de5c:	18c1ffcc 	andi	r3,r3,2047
1000de60:	3a10703a 	and	r8,r7,r8
1000de64:	280ad7fa 	srli	r5,r5,31
1000de68:	380ed7fa 	srli	r7,r7,31
1000de6c:	12400f26 	beq	r2,r9,1000deac <__eqdf2+0x6c>
1000de70:	0241ffc4 	movi	r9,2047
1000de74:	1a400326 	beq	r3,r9,1000de84 <__eqdf2+0x44>
1000de78:	10c00526 	beq	r2,r3,1000de90 <__eqdf2+0x50>
1000de7c:	00800044 	movi	r2,1
1000de80:	f800283a 	ret
1000de84:	4192b03a 	or	r9,r8,r6
1000de88:	483ffc1e 	bne	r9,zero,1000de7c <__alt_data_end+0xf800de7c>
1000de8c:	10fffb1e 	bne	r2,r3,1000de7c <__alt_data_end+0xf800de7c>
1000de90:	523ffa1e 	bne	r10,r8,1000de7c <__alt_data_end+0xf800de7c>
1000de94:	21bff91e 	bne	r4,r6,1000de7c <__alt_data_end+0xf800de7c>
1000de98:	29c00826 	beq	r5,r7,1000debc <__eqdf2+0x7c>
1000de9c:	103ff71e 	bne	r2,zero,1000de7c <__alt_data_end+0xf800de7c>
1000dea0:	5104b03a 	or	r2,r10,r4
1000dea4:	1004c03a 	cmpne	r2,r2,zero
1000dea8:	f800283a 	ret
1000deac:	5112b03a 	or	r9,r10,r4
1000deb0:	483fef26 	beq	r9,zero,1000de70 <__alt_data_end+0xf800de70>
1000deb4:	00800044 	movi	r2,1
1000deb8:	f800283a 	ret
1000debc:	0005883a 	mov	r2,zero
1000dec0:	f800283a 	ret

1000dec4 <__gedf2>:
1000dec4:	2804d53a 	srli	r2,r5,20
1000dec8:	3806d53a 	srli	r3,r7,20
1000decc:	02000434 	movhi	r8,16
1000ded0:	423fffc4 	addi	r8,r8,-1
1000ded4:	0241ffc4 	movi	r9,2047
1000ded8:	1081ffcc 	andi	r2,r2,2047
1000dedc:	2a14703a 	and	r10,r5,r8
1000dee0:	1a46703a 	and	r3,r3,r9
1000dee4:	3a10703a 	and	r8,r7,r8
1000dee8:	280ad7fa 	srli	r5,r5,31
1000deec:	380ed7fa 	srli	r7,r7,31
1000def0:	12400b26 	beq	r2,r9,1000df20 <__gedf2+0x5c>
1000def4:	1a401626 	beq	r3,r9,1000df50 <__gedf2+0x8c>
1000def8:	10000c1e 	bne	r2,zero,1000df2c <__gedf2+0x68>
1000defc:	5112b03a 	or	r9,r10,r4
1000df00:	4813003a 	cmpeq	r9,r9,zero
1000df04:	4817883a 	mov	r11,r9
1000df08:	18000c1e 	bne	r3,zero,1000df3c <__gedf2+0x78>
1000df0c:	4198b03a 	or	r12,r8,r6
1000df10:	60000a1e 	bne	r12,zero,1000df3c <__gedf2+0x78>
1000df14:	48001326 	beq	r9,zero,1000df64 <__gedf2+0xa0>
1000df18:	0005883a 	mov	r2,zero
1000df1c:	f800283a 	ret
1000df20:	5112b03a 	or	r9,r10,r4
1000df24:	4800191e 	bne	r9,zero,1000df8c <__gedf2+0xc8>
1000df28:	18800926 	beq	r3,r2,1000df50 <__gedf2+0x8c>
1000df2c:	18000b1e 	bne	r3,zero,1000df5c <__gedf2+0x98>
1000df30:	4192b03a 	or	r9,r8,r6
1000df34:	0017883a 	mov	r11,zero
1000df38:	48000a26 	beq	r9,zero,1000df64 <__gedf2+0xa0>
1000df3c:	39c03fcc 	andi	r7,r7,255
1000df40:	58000726 	beq	r11,zero,1000df60 <__gedf2+0x9c>
1000df44:	3800081e 	bne	r7,zero,1000df68 <__gedf2+0xa4>
1000df48:	00bfffc4 	movi	r2,-1
1000df4c:	f800283a 	ret
1000df50:	4192b03a 	or	r9,r8,r6
1000df54:	48000d1e 	bne	r9,zero,1000df8c <__gedf2+0xc8>
1000df58:	103fe826 	beq	r2,zero,1000defc <__alt_data_end+0xf800defc>
1000df5c:	39c03fcc 	andi	r7,r7,255
1000df60:	29c00326 	beq	r5,r7,1000df70 <__gedf2+0xac>
1000df64:	283ff81e 	bne	r5,zero,1000df48 <__alt_data_end+0xf800df48>
1000df68:	00800044 	movi	r2,1
1000df6c:	f800283a 	ret
1000df70:	18bffc16 	blt	r3,r2,1000df64 <__alt_data_end+0xf800df64>
1000df74:	10c00316 	blt	r2,r3,1000df84 <__gedf2+0xc0>
1000df78:	42bffa36 	bltu	r8,r10,1000df64 <__alt_data_end+0xf800df64>
1000df7c:	52000526 	beq	r10,r8,1000df94 <__gedf2+0xd0>
1000df80:	523fe52e 	bgeu	r10,r8,1000df18 <__alt_data_end+0xf800df18>
1000df84:	283ff026 	beq	r5,zero,1000df48 <__alt_data_end+0xf800df48>
1000df88:	003ff706 	br	1000df68 <__alt_data_end+0xf800df68>
1000df8c:	00bfff84 	movi	r2,-2
1000df90:	f800283a 	ret
1000df94:	313ff336 	bltu	r6,r4,1000df64 <__alt_data_end+0xf800df64>
1000df98:	21bfdf2e 	bgeu	r4,r6,1000df18 <__alt_data_end+0xf800df18>
1000df9c:	283fea26 	beq	r5,zero,1000df48 <__alt_data_end+0xf800df48>
1000dfa0:	003ff106 	br	1000df68 <__alt_data_end+0xf800df68>

1000dfa4 <__ledf2>:
1000dfa4:	2804d53a 	srli	r2,r5,20
1000dfa8:	3810d53a 	srli	r8,r7,20
1000dfac:	00c00434 	movhi	r3,16
1000dfb0:	18ffffc4 	addi	r3,r3,-1
1000dfb4:	0241ffc4 	movi	r9,2047
1000dfb8:	1081ffcc 	andi	r2,r2,2047
1000dfbc:	28d4703a 	and	r10,r5,r3
1000dfc0:	4250703a 	and	r8,r8,r9
1000dfc4:	38c6703a 	and	r3,r7,r3
1000dfc8:	280ad7fa 	srli	r5,r5,31
1000dfcc:	380ed7fa 	srli	r7,r7,31
1000dfd0:	12400b26 	beq	r2,r9,1000e000 <__ledf2+0x5c>
1000dfd4:	42401926 	beq	r8,r9,1000e03c <__ledf2+0x98>
1000dfd8:	10000c1e 	bne	r2,zero,1000e00c <__ledf2+0x68>
1000dfdc:	5112b03a 	or	r9,r10,r4
1000dfe0:	4813003a 	cmpeq	r9,r9,zero
1000dfe4:	4817883a 	mov	r11,r9
1000dfe8:	40000f26 	beq	r8,zero,1000e028 <__ledf2+0x84>
1000dfec:	39c03fcc 	andi	r7,r7,255
1000dff0:	58001826 	beq	r11,zero,1000e054 <__ledf2+0xb0>
1000dff4:	38000a1e 	bne	r7,zero,1000e020 <__ledf2+0x7c>
1000dff8:	00bfffc4 	movi	r2,-1
1000dffc:	f800283a 	ret
1000e000:	5112b03a 	or	r9,r10,r4
1000e004:	48000f1e 	bne	r9,zero,1000e044 <__ledf2+0xa0>
1000e008:	40800c26 	beq	r8,r2,1000e03c <__ledf2+0x98>
1000e00c:	4000101e 	bne	r8,zero,1000e050 <__ledf2+0xac>
1000e010:	1992b03a 	or	r9,r3,r6
1000e014:	0017883a 	mov	r11,zero
1000e018:	483ff41e 	bne	r9,zero,1000dfec <__alt_data_end+0xf800dfec>
1000e01c:	283ff61e 	bne	r5,zero,1000dff8 <__alt_data_end+0xf800dff8>
1000e020:	00800044 	movi	r2,1
1000e024:	f800283a 	ret
1000e028:	1998b03a 	or	r12,r3,r6
1000e02c:	603fef1e 	bne	r12,zero,1000dfec <__alt_data_end+0xf800dfec>
1000e030:	483ffa26 	beq	r9,zero,1000e01c <__alt_data_end+0xf800e01c>
1000e034:	0005883a 	mov	r2,zero
1000e038:	f800283a 	ret
1000e03c:	1992b03a 	or	r9,r3,r6
1000e040:	48000226 	beq	r9,zero,1000e04c <__ledf2+0xa8>
1000e044:	00800084 	movi	r2,2
1000e048:	f800283a 	ret
1000e04c:	103fe326 	beq	r2,zero,1000dfdc <__alt_data_end+0xf800dfdc>
1000e050:	39c03fcc 	andi	r7,r7,255
1000e054:	29fff11e 	bne	r5,r7,1000e01c <__alt_data_end+0xf800e01c>
1000e058:	40bff016 	blt	r8,r2,1000e01c <__alt_data_end+0xf800e01c>
1000e05c:	12000316 	blt	r2,r8,1000e06c <__ledf2+0xc8>
1000e060:	1abfee36 	bltu	r3,r10,1000e01c <__alt_data_end+0xf800e01c>
1000e064:	50c00326 	beq	r10,r3,1000e074 <__ledf2+0xd0>
1000e068:	50fff22e 	bgeu	r10,r3,1000e034 <__alt_data_end+0xf800e034>
1000e06c:	283fe226 	beq	r5,zero,1000dff8 <__alt_data_end+0xf800dff8>
1000e070:	003feb06 	br	1000e020 <__alt_data_end+0xf800e020>
1000e074:	313fe936 	bltu	r6,r4,1000e01c <__alt_data_end+0xf800e01c>
1000e078:	21bfee2e 	bgeu	r4,r6,1000e034 <__alt_data_end+0xf800e034>
1000e07c:	283fde26 	beq	r5,zero,1000dff8 <__alt_data_end+0xf800dff8>
1000e080:	003fe706 	br	1000e020 <__alt_data_end+0xf800e020>

1000e084 <__muldf3>:
1000e084:	deffee04 	addi	sp,sp,-72
1000e088:	dd000c15 	stw	r20,48(sp)
1000e08c:	2828d53a 	srli	r20,r5,20
1000e090:	dd400d15 	stw	r21,52(sp)
1000e094:	282ad7fa 	srli	r21,r5,31
1000e098:	dc000815 	stw	r16,32(sp)
1000e09c:	04000434 	movhi	r16,16
1000e0a0:	ddc00f15 	stw	r23,60(sp)
1000e0a4:	dcc00b15 	stw	r19,44(sp)
1000e0a8:	dc800a15 	stw	r18,40(sp)
1000e0ac:	843fffc4 	addi	r16,r16,-1
1000e0b0:	dfc01115 	stw	ra,68(sp)
1000e0b4:	df001015 	stw	fp,64(sp)
1000e0b8:	dd800e15 	stw	r22,56(sp)
1000e0bc:	dc400915 	stw	r17,36(sp)
1000e0c0:	a501ffcc 	andi	r20,r20,2047
1000e0c4:	2025883a 	mov	r18,r4
1000e0c8:	202f883a 	mov	r23,r4
1000e0cc:	2c20703a 	and	r16,r5,r16
1000e0d0:	a827883a 	mov	r19,r21
1000e0d4:	aa403fcc 	andi	r9,r21,255
1000e0d8:	a0005926 	beq	r20,zero,1000e240 <__muldf3+0x1bc>
1000e0dc:	0081ffc4 	movi	r2,2047
1000e0e0:	a0803426 	beq	r20,r2,1000e1b4 <__muldf3+0x130>
1000e0e4:	84000434 	orhi	r16,r16,16
1000e0e8:	2004d77a 	srli	r2,r4,29
1000e0ec:	802090fa 	slli	r16,r16,3
1000e0f0:	202e90fa 	slli	r23,r4,3
1000e0f4:	a53f0044 	addi	r20,r20,-1023
1000e0f8:	80a0b03a 	or	r16,r16,r2
1000e0fc:	000b883a 	mov	r5,zero
1000e100:	0039883a 	mov	fp,zero
1000e104:	3806d53a 	srli	r3,r7,20
1000e108:	382cd7fa 	srli	r22,r7,31
1000e10c:	00800434 	movhi	r2,16
1000e110:	10bfffc4 	addi	r2,r2,-1
1000e114:	18c1ffcc 	andi	r3,r3,2047
1000e118:	3025883a 	mov	r18,r6
1000e11c:	38a2703a 	and	r17,r7,r2
1000e120:	b2803fcc 	andi	r10,r22,255
1000e124:	18006426 	beq	r3,zero,1000e2b8 <__muldf3+0x234>
1000e128:	0081ffc4 	movi	r2,2047
1000e12c:	18805c26 	beq	r3,r2,1000e2a0 <__muldf3+0x21c>
1000e130:	8c400434 	orhi	r17,r17,16
1000e134:	3004d77a 	srli	r2,r6,29
1000e138:	882290fa 	slli	r17,r17,3
1000e13c:	302490fa 	slli	r18,r6,3
1000e140:	18ff0044 	addi	r3,r3,-1023
1000e144:	88a2b03a 	or	r17,r17,r2
1000e148:	000f883a 	mov	r7,zero
1000e14c:	394ab03a 	or	r5,r7,r5
1000e150:	280a90ba 	slli	r5,r5,2
1000e154:	00840074 	movhi	r2,4097
1000e158:	10b85d04 	addi	r2,r2,-7820
1000e15c:	288b883a 	add	r5,r5,r2
1000e160:	28800017 	ldw	r2,0(r5)
1000e164:	a0c7883a 	add	r3,r20,r3
1000e168:	b54cf03a 	xor	r6,r22,r21
1000e16c:	1a000044 	addi	r8,r3,1
1000e170:	1000683a 	jmp	r2
1000e174:	1000e3b8 	rdprs	zero,r2,910
1000e178:	1000e3a4 	muli	zero,r2,910
1000e17c:	1000e3a4 	muli	zero,r2,910
1000e180:	1000e390 	cmplti	zero,r2,910
1000e184:	1000e1d0 	cmplti	zero,r2,903
1000e188:	1000e1d0 	cmplti	zero,r2,903
1000e18c:	1000e378 	rdprs	zero,r2,909
1000e190:	1000e390 	cmplti	zero,r2,910
1000e194:	1000e1d0 	cmplti	zero,r2,903
1000e198:	1000e378 	rdprs	zero,r2,909
1000e19c:	1000e1d0 	cmplti	zero,r2,903
1000e1a0:	1000e390 	cmplti	zero,r2,910
1000e1a4:	1000e1d4 	ori	zero,r2,903
1000e1a8:	1000e1d4 	ori	zero,r2,903
1000e1ac:	1000e1d4 	ori	zero,r2,903
1000e1b0:	1000e6f4 	orhi	zero,r2,923
1000e1b4:	8104b03a 	or	r2,r16,r4
1000e1b8:	10006c1e 	bne	r2,zero,1000e36c <__muldf3+0x2e8>
1000e1bc:	01400204 	movi	r5,8
1000e1c0:	0021883a 	mov	r16,zero
1000e1c4:	002f883a 	mov	r23,zero
1000e1c8:	07000084 	movi	fp,2
1000e1cc:	003fcd06 	br	1000e104 <__alt_data_end+0xf800e104>
1000e1d0:	3013883a 	mov	r9,r6
1000e1d4:	00800084 	movi	r2,2
1000e1d8:	e080501e 	bne	fp,r2,1000e31c <__muldf3+0x298>
1000e1dc:	4cc0004c 	andi	r19,r9,1
1000e1e0:	0101ffc4 	movi	r4,2047
1000e1e4:	0021883a 	mov	r16,zero
1000e1e8:	002f883a 	mov	r23,zero
1000e1ec:	2008953a 	slli	r4,r4,20
1000e1f0:	98c03fcc 	andi	r3,r19,255
1000e1f4:	04400434 	movhi	r17,16
1000e1f8:	8c7fffc4 	addi	r17,r17,-1
1000e1fc:	180697fa 	slli	r3,r3,31
1000e200:	8460703a 	and	r16,r16,r17
1000e204:	8120b03a 	or	r16,r16,r4
1000e208:	80c6b03a 	or	r3,r16,r3
1000e20c:	b805883a 	mov	r2,r23
1000e210:	dfc01117 	ldw	ra,68(sp)
1000e214:	df001017 	ldw	fp,64(sp)
1000e218:	ddc00f17 	ldw	r23,60(sp)
1000e21c:	dd800e17 	ldw	r22,56(sp)
1000e220:	dd400d17 	ldw	r21,52(sp)
1000e224:	dd000c17 	ldw	r20,48(sp)
1000e228:	dcc00b17 	ldw	r19,44(sp)
1000e22c:	dc800a17 	ldw	r18,40(sp)
1000e230:	dc400917 	ldw	r17,36(sp)
1000e234:	dc000817 	ldw	r16,32(sp)
1000e238:	dec01204 	addi	sp,sp,72
1000e23c:	f800283a 	ret
1000e240:	8104b03a 	or	r2,r16,r4
1000e244:	10004426 	beq	r2,zero,1000e358 <__muldf3+0x2d4>
1000e248:	80014b26 	beq	r16,zero,1000e778 <__muldf3+0x6f4>
1000e24c:	8009883a 	mov	r4,r16
1000e250:	d9800715 	stw	r6,28(sp)
1000e254:	d9c00215 	stw	r7,8(sp)
1000e258:	da400415 	stw	r9,16(sp)
1000e25c:	0003fe80 	call	10003fe8 <__clzsi2>
1000e260:	d9800717 	ldw	r6,28(sp)
1000e264:	d9c00217 	ldw	r7,8(sp)
1000e268:	da400417 	ldw	r9,16(sp)
1000e26c:	1007883a 	mov	r3,r2
1000e270:	01000a04 	movi	r4,40
1000e274:	1dfffe04 	addi	r23,r3,-8
1000e278:	20c9c83a 	sub	r4,r4,r3
1000e27c:	85e0983a 	sll	r16,r16,r23
1000e280:	9108d83a 	srl	r4,r18,r4
1000e284:	95ee983a 	sll	r23,r18,r23
1000e288:	2420b03a 	or	r16,r4,r16
1000e28c:	053f0344 	movi	r20,-1011
1000e290:	a0e9c83a 	sub	r20,r20,r3
1000e294:	000b883a 	mov	r5,zero
1000e298:	0039883a 	mov	fp,zero
1000e29c:	003f9906 	br	1000e104 <__alt_data_end+0xf800e104>
1000e2a0:	8984b03a 	or	r2,r17,r6
1000e2a4:	10002a1e 	bne	r2,zero,1000e350 <__muldf3+0x2cc>
1000e2a8:	0023883a 	mov	r17,zero
1000e2ac:	0025883a 	mov	r18,zero
1000e2b0:	01c00084 	movi	r7,2
1000e2b4:	003fa506 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e2b8:	8984b03a 	or	r2,r17,r6
1000e2bc:	10002026 	beq	r2,zero,1000e340 <__muldf3+0x2bc>
1000e2c0:	88011c26 	beq	r17,zero,1000e734 <__muldf3+0x6b0>
1000e2c4:	8809883a 	mov	r4,r17
1000e2c8:	d9400215 	stw	r5,8(sp)
1000e2cc:	d9800715 	stw	r6,28(sp)
1000e2d0:	da400415 	stw	r9,16(sp)
1000e2d4:	da800315 	stw	r10,12(sp)
1000e2d8:	0003fe80 	call	10003fe8 <__clzsi2>
1000e2dc:	d9400217 	ldw	r5,8(sp)
1000e2e0:	d9800717 	ldw	r6,28(sp)
1000e2e4:	da400417 	ldw	r9,16(sp)
1000e2e8:	da800317 	ldw	r10,12(sp)
1000e2ec:	1007883a 	mov	r3,r2
1000e2f0:	01000a04 	movi	r4,40
1000e2f4:	1cbffe04 	addi	r18,r3,-8
1000e2f8:	20c9c83a 	sub	r4,r4,r3
1000e2fc:	8ca2983a 	sll	r17,r17,r18
1000e300:	3108d83a 	srl	r4,r6,r4
1000e304:	34a4983a 	sll	r18,r6,r18
1000e308:	2462b03a 	or	r17,r4,r17
1000e30c:	00bf0344 	movi	r2,-1011
1000e310:	10c7c83a 	sub	r3,r2,r3
1000e314:	000f883a 	mov	r7,zero
1000e318:	003f8c06 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e31c:	008000c4 	movi	r2,3
1000e320:	e0816d26 	beq	fp,r2,1000e8d8 <__muldf3+0x854>
1000e324:	00800044 	movi	r2,1
1000e328:	e081321e 	bne	fp,r2,1000e7f4 <__muldf3+0x770>
1000e32c:	48a6703a 	and	r19,r9,r2
1000e330:	0009883a 	mov	r4,zero
1000e334:	0021883a 	mov	r16,zero
1000e338:	002f883a 	mov	r23,zero
1000e33c:	003fab06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e340:	0023883a 	mov	r17,zero
1000e344:	0025883a 	mov	r18,zero
1000e348:	01c00044 	movi	r7,1
1000e34c:	003f7f06 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e350:	01c000c4 	movi	r7,3
1000e354:	003f7d06 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e358:	01400104 	movi	r5,4
1000e35c:	0021883a 	mov	r16,zero
1000e360:	002f883a 	mov	r23,zero
1000e364:	07000044 	movi	fp,1
1000e368:	003f6606 	br	1000e104 <__alt_data_end+0xf800e104>
1000e36c:	01400304 	movi	r5,12
1000e370:	070000c4 	movi	fp,3
1000e374:	003f6306 	br	1000e104 <__alt_data_end+0xf800e104>
1000e378:	04000434 	movhi	r16,16
1000e37c:	0027883a 	mov	r19,zero
1000e380:	843fffc4 	addi	r16,r16,-1
1000e384:	05ffffc4 	movi	r23,-1
1000e388:	0101ffc4 	movi	r4,2047
1000e38c:	003f9706 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e390:	8821883a 	mov	r16,r17
1000e394:	902f883a 	mov	r23,r18
1000e398:	5013883a 	mov	r9,r10
1000e39c:	3839883a 	mov	fp,r7
1000e3a0:	003f8c06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e3a4:	8821883a 	mov	r16,r17
1000e3a8:	902f883a 	mov	r23,r18
1000e3ac:	3013883a 	mov	r9,r6
1000e3b0:	3839883a 	mov	fp,r7
1000e3b4:	003f8706 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e3b8:	b82ad43a 	srli	r21,r23,16
1000e3bc:	9038d43a 	srli	fp,r18,16
1000e3c0:	bdffffcc 	andi	r23,r23,65535
1000e3c4:	94bfffcc 	andi	r18,r18,65535
1000e3c8:	9009883a 	mov	r4,r18
1000e3cc:	b80b883a 	mov	r5,r23
1000e3d0:	d8c00515 	stw	r3,20(sp)
1000e3d4:	d9800715 	stw	r6,28(sp)
1000e3d8:	da000615 	stw	r8,24(sp)
1000e3dc:	0002cfc0 	call	10002cfc <__mulsi3>
1000e3e0:	9009883a 	mov	r4,r18
1000e3e4:	a80b883a 	mov	r5,r21
1000e3e8:	1029883a 	mov	r20,r2
1000e3ec:	0002cfc0 	call	10002cfc <__mulsi3>
1000e3f0:	e009883a 	mov	r4,fp
1000e3f4:	a80b883a 	mov	r5,r21
1000e3f8:	102d883a 	mov	r22,r2
1000e3fc:	0002cfc0 	call	10002cfc <__mulsi3>
1000e400:	e009883a 	mov	r4,fp
1000e404:	b80b883a 	mov	r5,r23
1000e408:	1027883a 	mov	r19,r2
1000e40c:	0002cfc0 	call	10002cfc <__mulsi3>
1000e410:	a008d43a 	srli	r4,r20,16
1000e414:	b085883a 	add	r2,r22,r2
1000e418:	d8c00517 	ldw	r3,20(sp)
1000e41c:	110f883a 	add	r7,r2,r4
1000e420:	d9800717 	ldw	r6,28(sp)
1000e424:	da000617 	ldw	r8,24(sp)
1000e428:	3d80022e 	bgeu	r7,r22,1000e434 <__muldf3+0x3b0>
1000e42c:	00800074 	movhi	r2,1
1000e430:	98a7883a 	add	r19,r19,r2
1000e434:	3804943a 	slli	r2,r7,16
1000e438:	380ed43a 	srli	r7,r7,16
1000e43c:	882cd43a 	srli	r22,r17,16
1000e440:	a53fffcc 	andi	r20,r20,65535
1000e444:	8c7fffcc 	andi	r17,r17,65535
1000e448:	1529883a 	add	r20,r2,r20
1000e44c:	8809883a 	mov	r4,r17
1000e450:	b80b883a 	mov	r5,r23
1000e454:	d8c00515 	stw	r3,20(sp)
1000e458:	d9800715 	stw	r6,28(sp)
1000e45c:	da000615 	stw	r8,24(sp)
1000e460:	d9c00015 	stw	r7,0(sp)
1000e464:	dd000115 	stw	r20,4(sp)
1000e468:	0002cfc0 	call	10002cfc <__mulsi3>
1000e46c:	a80b883a 	mov	r5,r21
1000e470:	8809883a 	mov	r4,r17
1000e474:	d8800415 	stw	r2,16(sp)
1000e478:	0002cfc0 	call	10002cfc <__mulsi3>
1000e47c:	a80b883a 	mov	r5,r21
1000e480:	b009883a 	mov	r4,r22
1000e484:	1029883a 	mov	r20,r2
1000e488:	0002cfc0 	call	10002cfc <__mulsi3>
1000e48c:	b009883a 	mov	r4,r22
1000e490:	b80b883a 	mov	r5,r23
1000e494:	102b883a 	mov	r21,r2
1000e498:	0002cfc0 	call	10002cfc <__mulsi3>
1000e49c:	da400417 	ldw	r9,16(sp)
1000e4a0:	a085883a 	add	r2,r20,r2
1000e4a4:	d8c00517 	ldw	r3,20(sp)
1000e4a8:	4808d43a 	srli	r4,r9,16
1000e4ac:	d9800717 	ldw	r6,28(sp)
1000e4b0:	da000617 	ldw	r8,24(sp)
1000e4b4:	1109883a 	add	r4,r2,r4
1000e4b8:	2500022e 	bgeu	r4,r20,1000e4c4 <__muldf3+0x440>
1000e4bc:	00800074 	movhi	r2,1
1000e4c0:	a8ab883a 	add	r21,r21,r2
1000e4c4:	200e943a 	slli	r7,r4,16
1000e4c8:	2004d43a 	srli	r2,r4,16
1000e4cc:	802ed43a 	srli	r23,r16,16
1000e4d0:	843fffcc 	andi	r16,r16,65535
1000e4d4:	4d3fffcc 	andi	r20,r9,65535
1000e4d8:	9009883a 	mov	r4,r18
1000e4dc:	800b883a 	mov	r5,r16
1000e4e0:	3d29883a 	add	r20,r7,r20
1000e4e4:	d8c00515 	stw	r3,20(sp)
1000e4e8:	d9800715 	stw	r6,28(sp)
1000e4ec:	da000615 	stw	r8,24(sp)
1000e4f0:	a8ab883a 	add	r21,r21,r2
1000e4f4:	0002cfc0 	call	10002cfc <__mulsi3>
1000e4f8:	9009883a 	mov	r4,r18
1000e4fc:	b80b883a 	mov	r5,r23
1000e500:	d8800315 	stw	r2,12(sp)
1000e504:	0002cfc0 	call	10002cfc <__mulsi3>
1000e508:	e009883a 	mov	r4,fp
1000e50c:	b80b883a 	mov	r5,r23
1000e510:	1025883a 	mov	r18,r2
1000e514:	0002cfc0 	call	10002cfc <__mulsi3>
1000e518:	e009883a 	mov	r4,fp
1000e51c:	800b883a 	mov	r5,r16
1000e520:	d8800215 	stw	r2,8(sp)
1000e524:	0002cfc0 	call	10002cfc <__mulsi3>
1000e528:	da800317 	ldw	r10,12(sp)
1000e52c:	d9400017 	ldw	r5,0(sp)
1000e530:	9085883a 	add	r2,r18,r2
1000e534:	5008d43a 	srli	r4,r10,16
1000e538:	a153883a 	add	r9,r20,r5
1000e53c:	d8c00517 	ldw	r3,20(sp)
1000e540:	1109883a 	add	r4,r2,r4
1000e544:	d9800717 	ldw	r6,28(sp)
1000e548:	da000617 	ldw	r8,24(sp)
1000e54c:	dac00217 	ldw	r11,8(sp)
1000e550:	2480022e 	bgeu	r4,r18,1000e55c <__muldf3+0x4d8>
1000e554:	00800074 	movhi	r2,1
1000e558:	5897883a 	add	r11,r11,r2
1000e55c:	200e943a 	slli	r7,r4,16
1000e560:	2038d43a 	srli	fp,r4,16
1000e564:	52bfffcc 	andi	r10,r10,65535
1000e568:	3a8f883a 	add	r7,r7,r10
1000e56c:	8809883a 	mov	r4,r17
1000e570:	800b883a 	mov	r5,r16
1000e574:	d8c00515 	stw	r3,20(sp)
1000e578:	d9800715 	stw	r6,28(sp)
1000e57c:	d9c00215 	stw	r7,8(sp)
1000e580:	da000615 	stw	r8,24(sp)
1000e584:	da400415 	stw	r9,16(sp)
1000e588:	5f39883a 	add	fp,r11,fp
1000e58c:	0002cfc0 	call	10002cfc <__mulsi3>
1000e590:	8809883a 	mov	r4,r17
1000e594:	b80b883a 	mov	r5,r23
1000e598:	1025883a 	mov	r18,r2
1000e59c:	0002cfc0 	call	10002cfc <__mulsi3>
1000e5a0:	b009883a 	mov	r4,r22
1000e5a4:	b80b883a 	mov	r5,r23
1000e5a8:	d8800315 	stw	r2,12(sp)
1000e5ac:	0002cfc0 	call	10002cfc <__mulsi3>
1000e5b0:	b009883a 	mov	r4,r22
1000e5b4:	800b883a 	mov	r5,r16
1000e5b8:	1023883a 	mov	r17,r2
1000e5bc:	0002cfc0 	call	10002cfc <__mulsi3>
1000e5c0:	da800317 	ldw	r10,12(sp)
1000e5c4:	9008d43a 	srli	r4,r18,16
1000e5c8:	d8c00517 	ldw	r3,20(sp)
1000e5cc:	5085883a 	add	r2,r10,r2
1000e5d0:	1109883a 	add	r4,r2,r4
1000e5d4:	d9800717 	ldw	r6,28(sp)
1000e5d8:	d9c00217 	ldw	r7,8(sp)
1000e5dc:	da000617 	ldw	r8,24(sp)
1000e5e0:	da400417 	ldw	r9,16(sp)
1000e5e4:	2280022e 	bgeu	r4,r10,1000e5f0 <__muldf3+0x56c>
1000e5e8:	00800074 	movhi	r2,1
1000e5ec:	88a3883a 	add	r17,r17,r2
1000e5f0:	2004943a 	slli	r2,r4,16
1000e5f4:	94bfffcc 	andi	r18,r18,65535
1000e5f8:	4ce7883a 	add	r19,r9,r19
1000e5fc:	14a5883a 	add	r18,r2,r18
1000e600:	9d29803a 	cmpltu	r20,r19,r20
1000e604:	9565883a 	add	r18,r18,r21
1000e608:	9505883a 	add	r2,r18,r20
1000e60c:	99e7883a 	add	r19,r19,r7
1000e610:	99cf803a 	cmpltu	r7,r19,r7
1000e614:	e08b883a 	add	r5,fp,r2
1000e618:	2008d43a 	srli	r4,r4,16
1000e61c:	29ef883a 	add	r23,r5,r7
1000e620:	1529803a 	cmpltu	r20,r2,r20
1000e624:	956b803a 	cmpltu	r21,r18,r21
1000e628:	b9cf803a 	cmpltu	r7,r23,r7
1000e62c:	a564b03a 	or	r18,r20,r21
1000e630:	2f39803a 	cmpltu	fp,r5,fp
1000e634:	9125883a 	add	r18,r18,r4
1000e638:	3f38b03a 	or	fp,r7,fp
1000e63c:	9725883a 	add	r18,r18,fp
1000e640:	9804927a 	slli	r2,r19,9
1000e644:	9463883a 	add	r17,r18,r17
1000e648:	d9000117 	ldw	r4,4(sp)
1000e64c:	b820d5fa 	srli	r16,r23,23
1000e650:	8822927a 	slli	r17,r17,9
1000e654:	9826d5fa 	srli	r19,r19,23
1000e658:	1104b03a 	or	r2,r2,r4
1000e65c:	b82e927a 	slli	r23,r23,9
1000e660:	1004c03a 	cmpne	r2,r2,zero
1000e664:	8c20b03a 	or	r16,r17,r16
1000e668:	14e6b03a 	or	r19,r2,r19
1000e66c:	8080402c 	andhi	r2,r16,256
1000e670:	9deeb03a 	or	r23,r19,r23
1000e674:	10000726 	beq	r2,zero,1000e694 <__muldf3+0x610>
1000e678:	b804d07a 	srli	r2,r23,1
1000e67c:	800697fa 	slli	r3,r16,31
1000e680:	bdc0004c 	andi	r23,r23,1
1000e684:	8020d07a 	srli	r16,r16,1
1000e688:	b8aeb03a 	or	r23,r23,r2
1000e68c:	b8eeb03a 	or	r23,r23,r3
1000e690:	4007883a 	mov	r3,r8
1000e694:	1900ffc4 	addi	r4,r3,1023
1000e698:	01004d0e 	bge	zero,r4,1000e7d0 <__muldf3+0x74c>
1000e69c:	b88001cc 	andi	r2,r23,7
1000e6a0:	10000726 	beq	r2,zero,1000e6c0 <__muldf3+0x63c>
1000e6a4:	b94003cc 	andi	r5,r23,15
1000e6a8:	00800104 	movi	r2,4
1000e6ac:	28800426 	beq	r5,r2,1000e6c0 <__muldf3+0x63c>
1000e6b0:	b885883a 	add	r2,r23,r2
1000e6b4:	15ef803a 	cmpltu	r23,r2,r23
1000e6b8:	85e1883a 	add	r16,r16,r23
1000e6bc:	102f883a 	mov	r23,r2
1000e6c0:	8080402c 	andhi	r2,r16,256
1000e6c4:	10000426 	beq	r2,zero,1000e6d8 <__muldf3+0x654>
1000e6c8:	00bfc034 	movhi	r2,65280
1000e6cc:	10bfffc4 	addi	r2,r2,-1
1000e6d0:	19010004 	addi	r4,r3,1024
1000e6d4:	80a0703a 	and	r16,r16,r2
1000e6d8:	0081ff84 	movi	r2,2046
1000e6dc:	1100340e 	bge	r2,r4,1000e7b0 <__muldf3+0x72c>
1000e6e0:	34c0004c 	andi	r19,r6,1
1000e6e4:	0101ffc4 	movi	r4,2047
1000e6e8:	0021883a 	mov	r16,zero
1000e6ec:	002f883a 	mov	r23,zero
1000e6f0:	003ebe06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e6f4:	8080022c 	andhi	r2,r16,8
1000e6f8:	10000926 	beq	r2,zero,1000e720 <__muldf3+0x69c>
1000e6fc:	8880022c 	andhi	r2,r17,8
1000e700:	1000071e 	bne	r2,zero,1000e720 <__muldf3+0x69c>
1000e704:	00800434 	movhi	r2,16
1000e708:	8c000234 	orhi	r16,r17,8
1000e70c:	10bfffc4 	addi	r2,r2,-1
1000e710:	b027883a 	mov	r19,r22
1000e714:	80a0703a 	and	r16,r16,r2
1000e718:	902f883a 	mov	r23,r18
1000e71c:	003f1a06 	br	1000e388 <__alt_data_end+0xf800e388>
1000e720:	00800434 	movhi	r2,16
1000e724:	84000234 	orhi	r16,r16,8
1000e728:	10bfffc4 	addi	r2,r2,-1
1000e72c:	80a0703a 	and	r16,r16,r2
1000e730:	003f1506 	br	1000e388 <__alt_data_end+0xf800e388>
1000e734:	3009883a 	mov	r4,r6
1000e738:	d9400215 	stw	r5,8(sp)
1000e73c:	d9800715 	stw	r6,28(sp)
1000e740:	da400415 	stw	r9,16(sp)
1000e744:	da800315 	stw	r10,12(sp)
1000e748:	0003fe80 	call	10003fe8 <__clzsi2>
1000e74c:	10c00804 	addi	r3,r2,32
1000e750:	010009c4 	movi	r4,39
1000e754:	d9400217 	ldw	r5,8(sp)
1000e758:	d9800717 	ldw	r6,28(sp)
1000e75c:	da400417 	ldw	r9,16(sp)
1000e760:	da800317 	ldw	r10,12(sp)
1000e764:	20fee20e 	bge	r4,r3,1000e2f0 <__alt_data_end+0xf800e2f0>
1000e768:	147ffe04 	addi	r17,r2,-8
1000e76c:	9462983a 	sll	r17,r18,r17
1000e770:	0025883a 	mov	r18,zero
1000e774:	003ee506 	br	1000e30c <__alt_data_end+0xf800e30c>
1000e778:	d9800715 	stw	r6,28(sp)
1000e77c:	d9c00215 	stw	r7,8(sp)
1000e780:	da400415 	stw	r9,16(sp)
1000e784:	0003fe80 	call	10003fe8 <__clzsi2>
1000e788:	10c00804 	addi	r3,r2,32
1000e78c:	010009c4 	movi	r4,39
1000e790:	d9800717 	ldw	r6,28(sp)
1000e794:	d9c00217 	ldw	r7,8(sp)
1000e798:	da400417 	ldw	r9,16(sp)
1000e79c:	20feb40e 	bge	r4,r3,1000e270 <__alt_data_end+0xf800e270>
1000e7a0:	143ffe04 	addi	r16,r2,-8
1000e7a4:	9420983a 	sll	r16,r18,r16
1000e7a8:	002f883a 	mov	r23,zero
1000e7ac:	003eb706 	br	1000e28c <__alt_data_end+0xf800e28c>
1000e7b0:	8004977a 	slli	r2,r16,29
1000e7b4:	b82ed0fa 	srli	r23,r23,3
1000e7b8:	8020927a 	slli	r16,r16,9
1000e7bc:	2101ffcc 	andi	r4,r4,2047
1000e7c0:	15eeb03a 	or	r23,r2,r23
1000e7c4:	8020d33a 	srli	r16,r16,12
1000e7c8:	34c0004c 	andi	r19,r6,1
1000e7cc:	003e8706 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e7d0:	00bf0084 	movi	r2,-1022
1000e7d4:	10c5c83a 	sub	r2,r2,r3
1000e7d8:	01000e04 	movi	r4,56
1000e7dc:	2080080e 	bge	r4,r2,1000e800 <__muldf3+0x77c>
1000e7e0:	34c0004c 	andi	r19,r6,1
1000e7e4:	0009883a 	mov	r4,zero
1000e7e8:	0021883a 	mov	r16,zero
1000e7ec:	002f883a 	mov	r23,zero
1000e7f0:	003e7e06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e7f4:	4007883a 	mov	r3,r8
1000e7f8:	480d883a 	mov	r6,r9
1000e7fc:	003fa506 	br	1000e694 <__alt_data_end+0xf800e694>
1000e800:	010007c4 	movi	r4,31
1000e804:	20801816 	blt	r4,r2,1000e868 <__muldf3+0x7e4>
1000e808:	18c10784 	addi	r3,r3,1054
1000e80c:	80c8983a 	sll	r4,r16,r3
1000e810:	b88ad83a 	srl	r5,r23,r2
1000e814:	b8c6983a 	sll	r3,r23,r3
1000e818:	80a0d83a 	srl	r16,r16,r2
1000e81c:	2908b03a 	or	r4,r5,r4
1000e820:	1804c03a 	cmpne	r2,r3,zero
1000e824:	2088b03a 	or	r4,r4,r2
1000e828:	208001cc 	andi	r2,r4,7
1000e82c:	10000726 	beq	r2,zero,1000e84c <__muldf3+0x7c8>
1000e830:	20c003cc 	andi	r3,r4,15
1000e834:	00800104 	movi	r2,4
1000e838:	18800426 	beq	r3,r2,1000e84c <__muldf3+0x7c8>
1000e83c:	20c00104 	addi	r3,r4,4
1000e840:	1905803a 	cmpltu	r2,r3,r4
1000e844:	80a1883a 	add	r16,r16,r2
1000e848:	1809883a 	mov	r4,r3
1000e84c:	8080202c 	andhi	r2,r16,128
1000e850:	10001b26 	beq	r2,zero,1000e8c0 <__muldf3+0x83c>
1000e854:	34c0004c 	andi	r19,r6,1
1000e858:	01000044 	movi	r4,1
1000e85c:	0021883a 	mov	r16,zero
1000e860:	002f883a 	mov	r23,zero
1000e864:	003e6106 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e868:	013ef884 	movi	r4,-1054
1000e86c:	20c9c83a 	sub	r4,r4,r3
1000e870:	01400804 	movi	r5,32
1000e874:	8108d83a 	srl	r4,r16,r4
1000e878:	11401526 	beq	r2,r5,1000e8d0 <__muldf3+0x84c>
1000e87c:	18c10f84 	addi	r3,r3,1086
1000e880:	80e0983a 	sll	r16,r16,r3
1000e884:	85eeb03a 	or	r23,r16,r23
1000e888:	b804c03a 	cmpne	r2,r23,zero
1000e88c:	1108b03a 	or	r4,r2,r4
1000e890:	20c001cc 	andi	r3,r4,7
1000e894:	1800061e 	bne	r3,zero,1000e8b0 <__muldf3+0x82c>
1000e898:	0021883a 	mov	r16,zero
1000e89c:	202ed0fa 	srli	r23,r4,3
1000e8a0:	34c0004c 	andi	r19,r6,1
1000e8a4:	0009883a 	mov	r4,zero
1000e8a8:	b8eeb03a 	or	r23,r23,r3
1000e8ac:	003e4f06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e8b0:	20c003cc 	andi	r3,r4,15
1000e8b4:	00800104 	movi	r2,4
1000e8b8:	0021883a 	mov	r16,zero
1000e8bc:	18bfdf1e 	bne	r3,r2,1000e83c <__alt_data_end+0xf800e83c>
1000e8c0:	8004927a 	slli	r2,r16,9
1000e8c4:	8006977a 	slli	r3,r16,29
1000e8c8:	1020d33a 	srli	r16,r2,12
1000e8cc:	003ff306 	br	1000e89c <__alt_data_end+0xf800e89c>
1000e8d0:	0021883a 	mov	r16,zero
1000e8d4:	003feb06 	br	1000e884 <__alt_data_end+0xf800e884>
1000e8d8:	00800434 	movhi	r2,16
1000e8dc:	84000234 	orhi	r16,r16,8
1000e8e0:	10bfffc4 	addi	r2,r2,-1
1000e8e4:	4cc0004c 	andi	r19,r9,1
1000e8e8:	80a0703a 	and	r16,r16,r2
1000e8ec:	003ea606 	br	1000e388 <__alt_data_end+0xf800e388>

1000e8f0 <__floatunsidf>:
1000e8f0:	defffe04 	addi	sp,sp,-8
1000e8f4:	dc000015 	stw	r16,0(sp)
1000e8f8:	dfc00115 	stw	ra,4(sp)
1000e8fc:	2021883a 	mov	r16,r4
1000e900:	20001026 	beq	r4,zero,1000e944 <__floatunsidf+0x54>
1000e904:	0003fe80 	call	10003fe8 <__clzsi2>
1000e908:	01410784 	movi	r5,1054
1000e90c:	100d883a 	mov	r6,r2
1000e910:	288bc83a 	sub	r5,r5,r2
1000e914:	00800284 	movi	r2,10
1000e918:	11801616 	blt	r2,r6,1000e974 <__floatunsidf+0x84>
1000e91c:	008002c4 	movi	r2,11
1000e920:	1185c83a 	sub	r2,r2,r6
1000e924:	8084d83a 	srl	r2,r16,r2
1000e928:	00c00434 	movhi	r3,16
1000e92c:	31c00544 	addi	r7,r6,21
1000e930:	18ffffc4 	addi	r3,r3,-1
1000e934:	81e0983a 	sll	r16,r16,r7
1000e938:	10cc703a 	and	r6,r2,r3
1000e93c:	2941ffcc 	andi	r5,r5,2047
1000e940:	00000206 	br	1000e94c <__floatunsidf+0x5c>
1000e944:	000b883a 	mov	r5,zero
1000e948:	000d883a 	mov	r6,zero
1000e94c:	280a953a 	slli	r5,r5,20
1000e950:	00c00434 	movhi	r3,16
1000e954:	18ffffc4 	addi	r3,r3,-1
1000e958:	30c6703a 	and	r3,r6,r3
1000e95c:	8005883a 	mov	r2,r16
1000e960:	1946b03a 	or	r3,r3,r5
1000e964:	dfc00117 	ldw	ra,4(sp)
1000e968:	dc000017 	ldw	r16,0(sp)
1000e96c:	dec00204 	addi	sp,sp,8
1000e970:	f800283a 	ret
1000e974:	31bffd44 	addi	r6,r6,-11
1000e978:	818c983a 	sll	r6,r16,r6
1000e97c:	00800434 	movhi	r2,16
1000e980:	10bfffc4 	addi	r2,r2,-1
1000e984:	2941ffcc 	andi	r5,r5,2047
1000e988:	0021883a 	mov	r16,zero
1000e98c:	308c703a 	and	r6,r6,r2
1000e990:	003fee06 	br	1000e94c <__alt_data_end+0xf800e94c>

1000e994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e994:	defffe04 	addi	sp,sp,-8
1000e998:	dfc00115 	stw	ra,4(sp)
1000e99c:	df000015 	stw	fp,0(sp)
1000e9a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e9a4:	00840074 	movhi	r2,4097
1000e9a8:	108bb604 	addi	r2,r2,11992
1000e9ac:	10800017 	ldw	r2,0(r2)
1000e9b0:	10000526 	beq	r2,zero,1000e9c8 <alt_get_errno+0x34>
1000e9b4:	00840074 	movhi	r2,4097
1000e9b8:	108bb604 	addi	r2,r2,11992
1000e9bc:	10800017 	ldw	r2,0(r2)
1000e9c0:	103ee83a 	callr	r2
1000e9c4:	00000206 	br	1000e9d0 <alt_get_errno+0x3c>
1000e9c8:	00840074 	movhi	r2,4097
1000e9cc:	10928b04 	addi	r2,r2,18988
}
1000e9d0:	e037883a 	mov	sp,fp
1000e9d4:	dfc00117 	ldw	ra,4(sp)
1000e9d8:	df000017 	ldw	fp,0(sp)
1000e9dc:	dec00204 	addi	sp,sp,8
1000e9e0:	f800283a 	ret

1000e9e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e9e4:	defffb04 	addi	sp,sp,-20
1000e9e8:	dfc00415 	stw	ra,16(sp)
1000e9ec:	df000315 	stw	fp,12(sp)
1000e9f0:	df000304 	addi	fp,sp,12
1000e9f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e9f8:	e0bfff17 	ldw	r2,-4(fp)
1000e9fc:	10000816 	blt	r2,zero,1000ea20 <close+0x3c>
1000ea00:	e13fff17 	ldw	r4,-4(fp)
1000ea04:	01400304 	movi	r5,12
1000ea08:	0002cfc0 	call	10002cfc <__mulsi3>
1000ea0c:	1007883a 	mov	r3,r2
1000ea10:	00840074 	movhi	r2,4097
1000ea14:	10873304 	addi	r2,r2,7372
1000ea18:	1885883a 	add	r2,r3,r2
1000ea1c:	00000106 	br	1000ea24 <close+0x40>
1000ea20:	0005883a 	mov	r2,zero
1000ea24:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000ea28:	e0bffd17 	ldw	r2,-12(fp)
1000ea2c:	10001926 	beq	r2,zero,1000ea94 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ea30:	e0bffd17 	ldw	r2,-12(fp)
1000ea34:	10800017 	ldw	r2,0(r2)
1000ea38:	10800417 	ldw	r2,16(r2)
1000ea3c:	10000626 	beq	r2,zero,1000ea58 <close+0x74>
1000ea40:	e0bffd17 	ldw	r2,-12(fp)
1000ea44:	10800017 	ldw	r2,0(r2)
1000ea48:	10800417 	ldw	r2,16(r2)
1000ea4c:	e13ffd17 	ldw	r4,-12(fp)
1000ea50:	103ee83a 	callr	r2
1000ea54:	00000106 	br	1000ea5c <close+0x78>
1000ea58:	0005883a 	mov	r2,zero
1000ea5c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000ea60:	e13fff17 	ldw	r4,-4(fp)
1000ea64:	000f1080 	call	1000f108 <alt_release_fd>
    if (rval < 0)
1000ea68:	e0bffe17 	ldw	r2,-8(fp)
1000ea6c:	1000070e 	bge	r2,zero,1000ea8c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ea70:	000e9940 	call	1000e994 <alt_get_errno>
1000ea74:	1007883a 	mov	r3,r2
1000ea78:	e0bffe17 	ldw	r2,-8(fp)
1000ea7c:	0085c83a 	sub	r2,zero,r2
1000ea80:	18800015 	stw	r2,0(r3)
      return -1;
1000ea84:	00bfffc4 	movi	r2,-1
1000ea88:	00000706 	br	1000eaa8 <close+0xc4>
    }
    return 0;
1000ea8c:	0005883a 	mov	r2,zero
1000ea90:	00000506 	br	1000eaa8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ea94:	000e9940 	call	1000e994 <alt_get_errno>
1000ea98:	1007883a 	mov	r3,r2
1000ea9c:	00801444 	movi	r2,81
1000eaa0:	18800015 	stw	r2,0(r3)
    return -1;
1000eaa4:	00bfffc4 	movi	r2,-1
  }
}
1000eaa8:	e037883a 	mov	sp,fp
1000eaac:	dfc00117 	ldw	ra,4(sp)
1000eab0:	df000017 	ldw	fp,0(sp)
1000eab4:	dec00204 	addi	sp,sp,8
1000eab8:	f800283a 	ret

1000eabc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000eabc:	defffc04 	addi	sp,sp,-16
1000eac0:	df000315 	stw	fp,12(sp)
1000eac4:	df000304 	addi	fp,sp,12
1000eac8:	e13ffd15 	stw	r4,-12(fp)
1000eacc:	e17ffe15 	stw	r5,-8(fp)
1000ead0:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ead4:	e0bfff17 	ldw	r2,-4(fp)
}
1000ead8:	e037883a 	mov	sp,fp
1000eadc:	df000017 	ldw	fp,0(sp)
1000eae0:	dec00104 	addi	sp,sp,4
1000eae4:	f800283a 	ret

1000eae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eae8:	defffe04 	addi	sp,sp,-8
1000eaec:	dfc00115 	stw	ra,4(sp)
1000eaf0:	df000015 	stw	fp,0(sp)
1000eaf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eaf8:	00840074 	movhi	r2,4097
1000eafc:	108bb604 	addi	r2,r2,11992
1000eb00:	10800017 	ldw	r2,0(r2)
1000eb04:	10000526 	beq	r2,zero,1000eb1c <alt_get_errno+0x34>
1000eb08:	00840074 	movhi	r2,4097
1000eb0c:	108bb604 	addi	r2,r2,11992
1000eb10:	10800017 	ldw	r2,0(r2)
1000eb14:	103ee83a 	callr	r2
1000eb18:	00000206 	br	1000eb24 <alt_get_errno+0x3c>
1000eb1c:	00840074 	movhi	r2,4097
1000eb20:	10928b04 	addi	r2,r2,18988
}
1000eb24:	e037883a 	mov	sp,fp
1000eb28:	dfc00117 	ldw	ra,4(sp)
1000eb2c:	df000017 	ldw	fp,0(sp)
1000eb30:	dec00204 	addi	sp,sp,8
1000eb34:	f800283a 	ret

1000eb38 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000eb38:	defffb04 	addi	sp,sp,-20
1000eb3c:	dfc00415 	stw	ra,16(sp)
1000eb40:	df000315 	stw	fp,12(sp)
1000eb44:	df000304 	addi	fp,sp,12
1000eb48:	e13ffe15 	stw	r4,-8(fp)
1000eb4c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eb50:	e0bffe17 	ldw	r2,-8(fp)
1000eb54:	10000816 	blt	r2,zero,1000eb78 <fstat+0x40>
1000eb58:	e13ffe17 	ldw	r4,-8(fp)
1000eb5c:	01400304 	movi	r5,12
1000eb60:	0002cfc0 	call	10002cfc <__mulsi3>
1000eb64:	1007883a 	mov	r3,r2
1000eb68:	00840074 	movhi	r2,4097
1000eb6c:	10873304 	addi	r2,r2,7372
1000eb70:	1885883a 	add	r2,r3,r2
1000eb74:	00000106 	br	1000eb7c <fstat+0x44>
1000eb78:	0005883a 	mov	r2,zero
1000eb7c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000eb80:	e0bffd17 	ldw	r2,-12(fp)
1000eb84:	10001026 	beq	r2,zero,1000ebc8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000eb88:	e0bffd17 	ldw	r2,-12(fp)
1000eb8c:	10800017 	ldw	r2,0(r2)
1000eb90:	10800817 	ldw	r2,32(r2)
1000eb94:	10000726 	beq	r2,zero,1000ebb4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000eb98:	e0bffd17 	ldw	r2,-12(fp)
1000eb9c:	10800017 	ldw	r2,0(r2)
1000eba0:	10800817 	ldw	r2,32(r2)
1000eba4:	e13ffd17 	ldw	r4,-12(fp)
1000eba8:	e17fff17 	ldw	r5,-4(fp)
1000ebac:	103ee83a 	callr	r2
1000ebb0:	00000a06 	br	1000ebdc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000ebb4:	e0bfff17 	ldw	r2,-4(fp)
1000ebb8:	00c80004 	movi	r3,8192
1000ebbc:	10c00115 	stw	r3,4(r2)
      return 0;
1000ebc0:	0005883a 	mov	r2,zero
1000ebc4:	00000506 	br	1000ebdc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ebc8:	000eae80 	call	1000eae8 <alt_get_errno>
1000ebcc:	1007883a 	mov	r3,r2
1000ebd0:	00801444 	movi	r2,81
1000ebd4:	18800015 	stw	r2,0(r3)
    return -1;
1000ebd8:	00bfffc4 	movi	r2,-1
  }
}
1000ebdc:	e037883a 	mov	sp,fp
1000ebe0:	dfc00117 	ldw	ra,4(sp)
1000ebe4:	df000017 	ldw	fp,0(sp)
1000ebe8:	dec00204 	addi	sp,sp,8
1000ebec:	f800283a 	ret

1000ebf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ebf0:	defffe04 	addi	sp,sp,-8
1000ebf4:	dfc00115 	stw	ra,4(sp)
1000ebf8:	df000015 	stw	fp,0(sp)
1000ebfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ec00:	00840074 	movhi	r2,4097
1000ec04:	108bb604 	addi	r2,r2,11992
1000ec08:	10800017 	ldw	r2,0(r2)
1000ec0c:	10000526 	beq	r2,zero,1000ec24 <alt_get_errno+0x34>
1000ec10:	00840074 	movhi	r2,4097
1000ec14:	108bb604 	addi	r2,r2,11992
1000ec18:	10800017 	ldw	r2,0(r2)
1000ec1c:	103ee83a 	callr	r2
1000ec20:	00000206 	br	1000ec2c <alt_get_errno+0x3c>
1000ec24:	00840074 	movhi	r2,4097
1000ec28:	10928b04 	addi	r2,r2,18988
}
1000ec2c:	e037883a 	mov	sp,fp
1000ec30:	dfc00117 	ldw	ra,4(sp)
1000ec34:	df000017 	ldw	fp,0(sp)
1000ec38:	dec00204 	addi	sp,sp,8
1000ec3c:	f800283a 	ret

1000ec40 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000ec40:	deffed04 	addi	sp,sp,-76
1000ec44:	dfc01215 	stw	ra,72(sp)
1000ec48:	df001115 	stw	fp,68(sp)
1000ec4c:	df001104 	addi	fp,sp,68
1000ec50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ec54:	e0bfff17 	ldw	r2,-4(fp)
1000ec58:	10000816 	blt	r2,zero,1000ec7c <isatty+0x3c>
1000ec5c:	e13fff17 	ldw	r4,-4(fp)
1000ec60:	01400304 	movi	r5,12
1000ec64:	0002cfc0 	call	10002cfc <__mulsi3>
1000ec68:	1007883a 	mov	r3,r2
1000ec6c:	00840074 	movhi	r2,4097
1000ec70:	10873304 	addi	r2,r2,7372
1000ec74:	1885883a 	add	r2,r3,r2
1000ec78:	00000106 	br	1000ec80 <isatty+0x40>
1000ec7c:	0005883a 	mov	r2,zero
1000ec80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ec84:	e0bfef17 	ldw	r2,-68(fp)
1000ec88:	10000e26 	beq	r2,zero,1000ecc4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ec8c:	e0bfef17 	ldw	r2,-68(fp)
1000ec90:	10800017 	ldw	r2,0(r2)
1000ec94:	10800817 	ldw	r2,32(r2)
1000ec98:	1000021e 	bne	r2,zero,1000eca4 <isatty+0x64>
    {
      return 1;
1000ec9c:	00800044 	movi	r2,1
1000eca0:	00000d06 	br	1000ecd8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000eca4:	e0bff004 	addi	r2,fp,-64
1000eca8:	e13fff17 	ldw	r4,-4(fp)
1000ecac:	100b883a 	mov	r5,r2
1000ecb0:	000eb380 	call	1000eb38 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ecb4:	e0bff117 	ldw	r2,-60(fp)
1000ecb8:	10880020 	cmpeqi	r2,r2,8192
1000ecbc:	10803fcc 	andi	r2,r2,255
1000ecc0:	00000506 	br	1000ecd8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ecc4:	000ebf00 	call	1000ebf0 <alt_get_errno>
1000ecc8:	1007883a 	mov	r3,r2
1000eccc:	00801444 	movi	r2,81
1000ecd0:	18800015 	stw	r2,0(r3)
    return 0;
1000ecd4:	0005883a 	mov	r2,zero
  }
}
1000ecd8:	e037883a 	mov	sp,fp
1000ecdc:	dfc00117 	ldw	ra,4(sp)
1000ece0:	df000017 	ldw	fp,0(sp)
1000ece4:	dec00204 	addi	sp,sp,8
1000ece8:	f800283a 	ret

1000ecec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ecec:	defffc04 	addi	sp,sp,-16
1000ecf0:	df000315 	stw	fp,12(sp)
1000ecf4:	df000304 	addi	fp,sp,12
1000ecf8:	e13ffd15 	stw	r4,-12(fp)
1000ecfc:	e17ffe15 	stw	r5,-8(fp)
1000ed00:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ed04:	e0fffe17 	ldw	r3,-8(fp)
1000ed08:	e0bffd17 	ldw	r2,-12(fp)
1000ed0c:	18800c26 	beq	r3,r2,1000ed40 <alt_load_section+0x54>
  {
    while( to != end )
1000ed10:	00000806 	br	1000ed34 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ed14:	e0bffe17 	ldw	r2,-8(fp)
1000ed18:	10c00104 	addi	r3,r2,4
1000ed1c:	e0fffe15 	stw	r3,-8(fp)
1000ed20:	e0fffd17 	ldw	r3,-12(fp)
1000ed24:	19000104 	addi	r4,r3,4
1000ed28:	e13ffd15 	stw	r4,-12(fp)
1000ed2c:	18c00017 	ldw	r3,0(r3)
1000ed30:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ed34:	e0fffe17 	ldw	r3,-8(fp)
1000ed38:	e0bfff17 	ldw	r2,-4(fp)
1000ed3c:	18bff51e 	bne	r3,r2,1000ed14 <__alt_data_end+0xf800ed14>
    {
      *to++ = *from++;
    }
  }
}
1000ed40:	e037883a 	mov	sp,fp
1000ed44:	df000017 	ldw	fp,0(sp)
1000ed48:	dec00104 	addi	sp,sp,4
1000ed4c:	f800283a 	ret

1000ed50 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ed50:	defffe04 	addi	sp,sp,-8
1000ed54:	dfc00115 	stw	ra,4(sp)
1000ed58:	df000015 	stw	fp,0(sp)
1000ed5c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ed60:	01040074 	movhi	r4,4097
1000ed64:	210bbb04 	addi	r4,r4,12012
1000ed68:	01440074 	movhi	r5,4097
1000ed6c:	29450004 	addi	r5,r5,5120
1000ed70:	01840074 	movhi	r6,4097
1000ed74:	318bbb04 	addi	r6,r6,12012
1000ed78:	000ecec0 	call	1000ecec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ed7c:	01040034 	movhi	r4,4096
1000ed80:	21000804 	addi	r4,r4,32
1000ed84:	01440034 	movhi	r5,4096
1000ed88:	29400804 	addi	r5,r5,32
1000ed8c:	01840034 	movhi	r6,4096
1000ed90:	31808b04 	addi	r6,r6,556
1000ed94:	000ecec0 	call	1000ecec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ed98:	01040074 	movhi	r4,4097
1000ed9c:	21043b04 	addi	r4,r4,4332
1000eda0:	01440074 	movhi	r5,4097
1000eda4:	29443b04 	addi	r5,r5,4332
1000eda8:	01840074 	movhi	r6,4097
1000edac:	31850004 	addi	r6,r6,5120
1000edb0:	000ecec0 	call	1000ecec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000edb4:	000ffc80 	call	1000ffc8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000edb8:	00101900 	call	10010190 <alt_icache_flush_all>
}
1000edbc:	e037883a 	mov	sp,fp
1000edc0:	dfc00117 	ldw	ra,4(sp)
1000edc4:	df000017 	ldw	fp,0(sp)
1000edc8:	dec00204 	addi	sp,sp,8
1000edcc:	f800283a 	ret

1000edd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000edd0:	defffe04 	addi	sp,sp,-8
1000edd4:	dfc00115 	stw	ra,4(sp)
1000edd8:	df000015 	stw	fp,0(sp)
1000eddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ede0:	00840074 	movhi	r2,4097
1000ede4:	108bb604 	addi	r2,r2,11992
1000ede8:	10800017 	ldw	r2,0(r2)
1000edec:	10000526 	beq	r2,zero,1000ee04 <alt_get_errno+0x34>
1000edf0:	00840074 	movhi	r2,4097
1000edf4:	108bb604 	addi	r2,r2,11992
1000edf8:	10800017 	ldw	r2,0(r2)
1000edfc:	103ee83a 	callr	r2
1000ee00:	00000206 	br	1000ee0c <alt_get_errno+0x3c>
1000ee04:	00840074 	movhi	r2,4097
1000ee08:	10928b04 	addi	r2,r2,18988
}
1000ee0c:	e037883a 	mov	sp,fp
1000ee10:	dfc00117 	ldw	ra,4(sp)
1000ee14:	df000017 	ldw	fp,0(sp)
1000ee18:	dec00204 	addi	sp,sp,8
1000ee1c:	f800283a 	ret

1000ee20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000ee20:	defff904 	addi	sp,sp,-28
1000ee24:	dfc00615 	stw	ra,24(sp)
1000ee28:	df000515 	stw	fp,20(sp)
1000ee2c:	df000504 	addi	fp,sp,20
1000ee30:	e13ffd15 	stw	r4,-12(fp)
1000ee34:	e17ffe15 	stw	r5,-8(fp)
1000ee38:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000ee3c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ee40:	e0bffd17 	ldw	r2,-12(fp)
1000ee44:	10000816 	blt	r2,zero,1000ee68 <lseek+0x48>
1000ee48:	e13ffd17 	ldw	r4,-12(fp)
1000ee4c:	01400304 	movi	r5,12
1000ee50:	0002cfc0 	call	10002cfc <__mulsi3>
1000ee54:	1007883a 	mov	r3,r2
1000ee58:	00840074 	movhi	r2,4097
1000ee5c:	10873304 	addi	r2,r2,7372
1000ee60:	1885883a 	add	r2,r3,r2
1000ee64:	00000106 	br	1000ee6c <lseek+0x4c>
1000ee68:	0005883a 	mov	r2,zero
1000ee6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000ee70:	e0bffc17 	ldw	r2,-16(fp)
1000ee74:	10001026 	beq	r2,zero,1000eeb8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000ee78:	e0bffc17 	ldw	r2,-16(fp)
1000ee7c:	10800017 	ldw	r2,0(r2)
1000ee80:	10800717 	ldw	r2,28(r2)
1000ee84:	10000926 	beq	r2,zero,1000eeac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000ee88:	e0bffc17 	ldw	r2,-16(fp)
1000ee8c:	10800017 	ldw	r2,0(r2)
1000ee90:	10800717 	ldw	r2,28(r2)
1000ee94:	e13ffc17 	ldw	r4,-16(fp)
1000ee98:	e17ffe17 	ldw	r5,-8(fp)
1000ee9c:	e1bfff17 	ldw	r6,-4(fp)
1000eea0:	103ee83a 	callr	r2
1000eea4:	e0bffb15 	stw	r2,-20(fp)
1000eea8:	00000506 	br	1000eec0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000eeac:	00bfde84 	movi	r2,-134
1000eeb0:	e0bffb15 	stw	r2,-20(fp)
1000eeb4:	00000206 	br	1000eec0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000eeb8:	00bfebc4 	movi	r2,-81
1000eebc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000eec0:	e0bffb17 	ldw	r2,-20(fp)
1000eec4:	1000070e 	bge	r2,zero,1000eee4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000eec8:	000edd00 	call	1000edd0 <alt_get_errno>
1000eecc:	1007883a 	mov	r3,r2
1000eed0:	e0bffb17 	ldw	r2,-20(fp)
1000eed4:	0085c83a 	sub	r2,zero,r2
1000eed8:	18800015 	stw	r2,0(r3)
    rc = -1;
1000eedc:	00bfffc4 	movi	r2,-1
1000eee0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000eee4:	e0bffb17 	ldw	r2,-20(fp)
}
1000eee8:	e037883a 	mov	sp,fp
1000eeec:	dfc00117 	ldw	ra,4(sp)
1000eef0:	df000017 	ldw	fp,0(sp)
1000eef4:	dec00204 	addi	sp,sp,8
1000eef8:	f800283a 	ret

1000eefc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000eefc:	defffd04 	addi	sp,sp,-12
1000ef00:	dfc00215 	stw	ra,8(sp)
1000ef04:	df000115 	stw	fp,4(sp)
1000ef08:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000ef0c:	0009883a 	mov	r4,zero
1000ef10:	000f3c00 	call	1000f3c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000ef14:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000ef18:	000f3f40 	call	1000f3f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000ef1c:	01040074 	movhi	r4,4097
1000ef20:	2104f604 	addi	r4,r4,5080
1000ef24:	01440074 	movhi	r5,4097
1000ef28:	2944f604 	addi	r5,r5,5080
1000ef2c:	01840074 	movhi	r6,4097
1000ef30:	3184f604 	addi	r6,r6,5080
1000ef34:	001055c0 	call	1001055c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000ef38:	00100d80 	call	100100d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000ef3c:	01040074 	movhi	r4,4097
1000ef40:	21004d04 	addi	r4,r4,308
1000ef44:	0010d480 	call	10010d48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000ef48:	d126e117 	ldw	r4,-25724(gp)
1000ef4c:	d0e6e217 	ldw	r3,-25720(gp)
1000ef50:	d0a6e317 	ldw	r2,-25716(gp)
1000ef54:	180b883a 	mov	r5,r3
1000ef58:	100d883a 	mov	r6,r2
1000ef5c:	00002680 	call	10000268 <main>
1000ef60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000ef64:	01000044 	movi	r4,1
1000ef68:	000e9e40 	call	1000e9e4 <close>
  exit (result);
1000ef6c:	e13fff17 	ldw	r4,-4(fp)
1000ef70:	0010d5c0 	call	10010d5c <exit>

1000ef74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ef74:	defffe04 	addi	sp,sp,-8
1000ef78:	df000115 	stw	fp,4(sp)
1000ef7c:	df000104 	addi	fp,sp,4
1000ef80:	e13fff15 	stw	r4,-4(fp)
}
1000ef84:	e037883a 	mov	sp,fp
1000ef88:	df000017 	ldw	fp,0(sp)
1000ef8c:	dec00104 	addi	sp,sp,4
1000ef90:	f800283a 	ret

1000ef94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000ef94:	defffe04 	addi	sp,sp,-8
1000ef98:	df000115 	stw	fp,4(sp)
1000ef9c:	df000104 	addi	fp,sp,4
1000efa0:	e13fff15 	stw	r4,-4(fp)
}
1000efa4:	e037883a 	mov	sp,fp
1000efa8:	df000017 	ldw	fp,0(sp)
1000efac:	dec00104 	addi	sp,sp,4
1000efb0:	f800283a 	ret

1000efb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000efb4:	defffe04 	addi	sp,sp,-8
1000efb8:	dfc00115 	stw	ra,4(sp)
1000efbc:	df000015 	stw	fp,0(sp)
1000efc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000efc4:	00840074 	movhi	r2,4097
1000efc8:	108bb604 	addi	r2,r2,11992
1000efcc:	10800017 	ldw	r2,0(r2)
1000efd0:	10000526 	beq	r2,zero,1000efe8 <alt_get_errno+0x34>
1000efd4:	00840074 	movhi	r2,4097
1000efd8:	108bb604 	addi	r2,r2,11992
1000efdc:	10800017 	ldw	r2,0(r2)
1000efe0:	103ee83a 	callr	r2
1000efe4:	00000206 	br	1000eff0 <alt_get_errno+0x3c>
1000efe8:	00840074 	movhi	r2,4097
1000efec:	10928b04 	addi	r2,r2,18988
}
1000eff0:	e037883a 	mov	sp,fp
1000eff4:	dfc00117 	ldw	ra,4(sp)
1000eff8:	df000017 	ldw	fp,0(sp)
1000effc:	dec00204 	addi	sp,sp,8
1000f000:	f800283a 	ret

1000f004 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f004:	defff904 	addi	sp,sp,-28
1000f008:	dfc00615 	stw	ra,24(sp)
1000f00c:	df000515 	stw	fp,20(sp)
1000f010:	df000504 	addi	fp,sp,20
1000f014:	e13ffd15 	stw	r4,-12(fp)
1000f018:	e17ffe15 	stw	r5,-8(fp)
1000f01c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f020:	e0bffd17 	ldw	r2,-12(fp)
1000f024:	10000816 	blt	r2,zero,1000f048 <read+0x44>
1000f028:	e13ffd17 	ldw	r4,-12(fp)
1000f02c:	01400304 	movi	r5,12
1000f030:	0002cfc0 	call	10002cfc <__mulsi3>
1000f034:	1007883a 	mov	r3,r2
1000f038:	00840074 	movhi	r2,4097
1000f03c:	10873304 	addi	r2,r2,7372
1000f040:	1885883a 	add	r2,r3,r2
1000f044:	00000106 	br	1000f04c <read+0x48>
1000f048:	0005883a 	mov	r2,zero
1000f04c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f050:	e0bffb17 	ldw	r2,-20(fp)
1000f054:	10002226 	beq	r2,zero,1000f0e0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f058:	e0bffb17 	ldw	r2,-20(fp)
1000f05c:	10800217 	ldw	r2,8(r2)
1000f060:	108000cc 	andi	r2,r2,3
1000f064:	10800060 	cmpeqi	r2,r2,1
1000f068:	1000181e 	bne	r2,zero,1000f0cc <read+0xc8>
        (fd->dev->read))
1000f06c:	e0bffb17 	ldw	r2,-20(fp)
1000f070:	10800017 	ldw	r2,0(r2)
1000f074:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f078:	10001426 	beq	r2,zero,1000f0cc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f07c:	e0bffb17 	ldw	r2,-20(fp)
1000f080:	10800017 	ldw	r2,0(r2)
1000f084:	10800517 	ldw	r2,20(r2)
1000f088:	e0ffff17 	ldw	r3,-4(fp)
1000f08c:	e13ffb17 	ldw	r4,-20(fp)
1000f090:	e17ffe17 	ldw	r5,-8(fp)
1000f094:	180d883a 	mov	r6,r3
1000f098:	103ee83a 	callr	r2
1000f09c:	e0bffc15 	stw	r2,-16(fp)
1000f0a0:	e0bffc17 	ldw	r2,-16(fp)
1000f0a4:	1000070e 	bge	r2,zero,1000f0c4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f0a8:	000efb40 	call	1000efb4 <alt_get_errno>
1000f0ac:	1007883a 	mov	r3,r2
1000f0b0:	e0bffc17 	ldw	r2,-16(fp)
1000f0b4:	0085c83a 	sub	r2,zero,r2
1000f0b8:	18800015 	stw	r2,0(r3)
          return -1;
1000f0bc:	00bfffc4 	movi	r2,-1
1000f0c0:	00000c06 	br	1000f0f4 <read+0xf0>
        }
        return rval;
1000f0c4:	e0bffc17 	ldw	r2,-16(fp)
1000f0c8:	00000a06 	br	1000f0f4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f0cc:	000efb40 	call	1000efb4 <alt_get_errno>
1000f0d0:	1007883a 	mov	r3,r2
1000f0d4:	00800344 	movi	r2,13
1000f0d8:	18800015 	stw	r2,0(r3)
1000f0dc:	00000406 	br	1000f0f0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f0e0:	000efb40 	call	1000efb4 <alt_get_errno>
1000f0e4:	1007883a 	mov	r3,r2
1000f0e8:	00801444 	movi	r2,81
1000f0ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f0f0:	00bfffc4 	movi	r2,-1
}
1000f0f4:	e037883a 	mov	sp,fp
1000f0f8:	dfc00117 	ldw	ra,4(sp)
1000f0fc:	df000017 	ldw	fp,0(sp)
1000f100:	dec00204 	addi	sp,sp,8
1000f104:	f800283a 	ret

1000f108 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f108:	defffc04 	addi	sp,sp,-16
1000f10c:	dfc00315 	stw	ra,12(sp)
1000f110:	df000215 	stw	fp,8(sp)
1000f114:	dc000115 	stw	r16,4(sp)
1000f118:	df000204 	addi	fp,sp,8
1000f11c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f120:	e0bffe17 	ldw	r2,-8(fp)
1000f124:	108000d0 	cmplti	r2,r2,3
1000f128:	1000111e 	bne	r2,zero,1000f170 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f12c:	04040074 	movhi	r16,4097
1000f130:	84073304 	addi	r16,r16,7372
1000f134:	e0bffe17 	ldw	r2,-8(fp)
1000f138:	1009883a 	mov	r4,r2
1000f13c:	01400304 	movi	r5,12
1000f140:	0002cfc0 	call	10002cfc <__mulsi3>
1000f144:	8085883a 	add	r2,r16,r2
1000f148:	10800204 	addi	r2,r2,8
1000f14c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f150:	04040074 	movhi	r16,4097
1000f154:	84073304 	addi	r16,r16,7372
1000f158:	e0bffe17 	ldw	r2,-8(fp)
1000f15c:	1009883a 	mov	r4,r2
1000f160:	01400304 	movi	r5,12
1000f164:	0002cfc0 	call	10002cfc <__mulsi3>
1000f168:	8085883a 	add	r2,r16,r2
1000f16c:	10000015 	stw	zero,0(r2)
  }
}
1000f170:	e6ffff04 	addi	sp,fp,-4
1000f174:	dfc00217 	ldw	ra,8(sp)
1000f178:	df000117 	ldw	fp,4(sp)
1000f17c:	dc000017 	ldw	r16,0(sp)
1000f180:	dec00304 	addi	sp,sp,12
1000f184:	f800283a 	ret

1000f188 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f188:	defff904 	addi	sp,sp,-28
1000f18c:	df000615 	stw	fp,24(sp)
1000f190:	df000604 	addi	fp,sp,24
1000f194:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f198:	0005303a 	rdctl	r2,status
1000f19c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f1a0:	e0fffc17 	ldw	r3,-16(fp)
1000f1a4:	00bfff84 	movi	r2,-2
1000f1a8:	1884703a 	and	r2,r3,r2
1000f1ac:	1001703a 	wrctl	status,r2
  
  return context;
1000f1b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f1b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f1b8:	d0a00c17 	ldw	r2,-32720(gp)
1000f1bc:	10c000c4 	addi	r3,r2,3
1000f1c0:	00bfff04 	movi	r2,-4
1000f1c4:	1884703a 	and	r2,r3,r2
1000f1c8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f1cc:	d0e00c17 	ldw	r3,-32720(gp)
1000f1d0:	e0bfff17 	ldw	r2,-4(fp)
1000f1d4:	1887883a 	add	r3,r3,r2
1000f1d8:	00860034 	movhi	r2,6144
1000f1dc:	10800004 	addi	r2,r2,0
1000f1e0:	10c0062e 	bgeu	r2,r3,1000f1fc <sbrk+0x74>
1000f1e4:	e0bffa17 	ldw	r2,-24(fp)
1000f1e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1ec:	e0bffd17 	ldw	r2,-12(fp)
1000f1f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f1f4:	00bfffc4 	movi	r2,-1
1000f1f8:	00000b06 	br	1000f228 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f1fc:	d0a00c17 	ldw	r2,-32720(gp)
1000f200:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f204:	d0e00c17 	ldw	r3,-32720(gp)
1000f208:	e0bfff17 	ldw	r2,-4(fp)
1000f20c:	1885883a 	add	r2,r3,r2
1000f210:	d0a00c15 	stw	r2,-32720(gp)
1000f214:	e0bffa17 	ldw	r2,-24(fp)
1000f218:	e0bffe15 	stw	r2,-8(fp)
1000f21c:	e0bffe17 	ldw	r2,-8(fp)
1000f220:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f224:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f228:	e037883a 	mov	sp,fp
1000f22c:	df000017 	ldw	fp,0(sp)
1000f230:	dec00104 	addi	sp,sp,4
1000f234:	f800283a 	ret

1000f238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f238:	defffe04 	addi	sp,sp,-8
1000f23c:	dfc00115 	stw	ra,4(sp)
1000f240:	df000015 	stw	fp,0(sp)
1000f244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f248:	00840074 	movhi	r2,4097
1000f24c:	108bb604 	addi	r2,r2,11992
1000f250:	10800017 	ldw	r2,0(r2)
1000f254:	10000526 	beq	r2,zero,1000f26c <alt_get_errno+0x34>
1000f258:	00840074 	movhi	r2,4097
1000f25c:	108bb604 	addi	r2,r2,11992
1000f260:	10800017 	ldw	r2,0(r2)
1000f264:	103ee83a 	callr	r2
1000f268:	00000206 	br	1000f274 <alt_get_errno+0x3c>
1000f26c:	00840074 	movhi	r2,4097
1000f270:	10928b04 	addi	r2,r2,18988
}
1000f274:	e037883a 	mov	sp,fp
1000f278:	dfc00117 	ldw	ra,4(sp)
1000f27c:	df000017 	ldw	fp,0(sp)
1000f280:	dec00204 	addi	sp,sp,8
1000f284:	f800283a 	ret

1000f288 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f288:	defff904 	addi	sp,sp,-28
1000f28c:	dfc00615 	stw	ra,24(sp)
1000f290:	df000515 	stw	fp,20(sp)
1000f294:	df000504 	addi	fp,sp,20
1000f298:	e13ffd15 	stw	r4,-12(fp)
1000f29c:	e17ffe15 	stw	r5,-8(fp)
1000f2a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f2a4:	e0bffd17 	ldw	r2,-12(fp)
1000f2a8:	10000816 	blt	r2,zero,1000f2cc <write+0x44>
1000f2ac:	e13ffd17 	ldw	r4,-12(fp)
1000f2b0:	01400304 	movi	r5,12
1000f2b4:	0002cfc0 	call	10002cfc <__mulsi3>
1000f2b8:	1007883a 	mov	r3,r2
1000f2bc:	00840074 	movhi	r2,4097
1000f2c0:	10873304 	addi	r2,r2,7372
1000f2c4:	1885883a 	add	r2,r3,r2
1000f2c8:	00000106 	br	1000f2d0 <write+0x48>
1000f2cc:	0005883a 	mov	r2,zero
1000f2d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f2d4:	e0bffb17 	ldw	r2,-20(fp)
1000f2d8:	10002126 	beq	r2,zero,1000f360 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f2dc:	e0bffb17 	ldw	r2,-20(fp)
1000f2e0:	10800217 	ldw	r2,8(r2)
1000f2e4:	108000cc 	andi	r2,r2,3
1000f2e8:	10001826 	beq	r2,zero,1000f34c <write+0xc4>
1000f2ec:	e0bffb17 	ldw	r2,-20(fp)
1000f2f0:	10800017 	ldw	r2,0(r2)
1000f2f4:	10800617 	ldw	r2,24(r2)
1000f2f8:	10001426 	beq	r2,zero,1000f34c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f2fc:	e0bffb17 	ldw	r2,-20(fp)
1000f300:	10800017 	ldw	r2,0(r2)
1000f304:	10800617 	ldw	r2,24(r2)
1000f308:	e0ffff17 	ldw	r3,-4(fp)
1000f30c:	e13ffb17 	ldw	r4,-20(fp)
1000f310:	e17ffe17 	ldw	r5,-8(fp)
1000f314:	180d883a 	mov	r6,r3
1000f318:	103ee83a 	callr	r2
1000f31c:	e0bffc15 	stw	r2,-16(fp)
1000f320:	e0bffc17 	ldw	r2,-16(fp)
1000f324:	1000070e 	bge	r2,zero,1000f344 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f328:	000f2380 	call	1000f238 <alt_get_errno>
1000f32c:	1007883a 	mov	r3,r2
1000f330:	e0bffc17 	ldw	r2,-16(fp)
1000f334:	0085c83a 	sub	r2,zero,r2
1000f338:	18800015 	stw	r2,0(r3)
        return -1;
1000f33c:	00bfffc4 	movi	r2,-1
1000f340:	00000c06 	br	1000f374 <write+0xec>
      }
      return rval;
1000f344:	e0bffc17 	ldw	r2,-16(fp)
1000f348:	00000a06 	br	1000f374 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f34c:	000f2380 	call	1000f238 <alt_get_errno>
1000f350:	1007883a 	mov	r3,r2
1000f354:	00800344 	movi	r2,13
1000f358:	18800015 	stw	r2,0(r3)
1000f35c:	00000406 	br	1000f370 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f360:	000f2380 	call	1000f238 <alt_get_errno>
1000f364:	1007883a 	mov	r3,r2
1000f368:	00801444 	movi	r2,81
1000f36c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f370:	00bfffc4 	movi	r2,-1
}
1000f374:	e037883a 	mov	sp,fp
1000f378:	dfc00117 	ldw	ra,4(sp)
1000f37c:	df000017 	ldw	fp,0(sp)
1000f380:	dec00204 	addi	sp,sp,8
1000f384:	f800283a 	ret

1000f388 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f388:	defffd04 	addi	sp,sp,-12
1000f38c:	dfc00215 	stw	ra,8(sp)
1000f390:	df000115 	stw	fp,4(sp)
1000f394:	df000104 	addi	fp,sp,4
1000f398:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f39c:	e13fff17 	ldw	r4,-4(fp)
1000f3a0:	01440074 	movhi	r5,4097
1000f3a4:	294bb304 	addi	r5,r5,11980
1000f3a8:	00100340 	call	10010034 <alt_dev_llist_insert>
}
1000f3ac:	e037883a 	mov	sp,fp
1000f3b0:	dfc00117 	ldw	ra,4(sp)
1000f3b4:	df000017 	ldw	fp,0(sp)
1000f3b8:	dec00204 	addi	sp,sp,8
1000f3bc:	f800283a 	ret

1000f3c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f3c0:	defffd04 	addi	sp,sp,-12
1000f3c4:	dfc00215 	stw	ra,8(sp)
1000f3c8:	df000115 	stw	fp,4(sp)
1000f3cc:	df000104 	addi	fp,sp,4
1000f3d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f3d4:	0010a140 	call	10010a14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f3d8:	00800044 	movi	r2,1
1000f3dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f3e0:	e037883a 	mov	sp,fp
1000f3e4:	dfc00117 	ldw	ra,4(sp)
1000f3e8:	df000017 	ldw	fp,0(sp)
1000f3ec:	dec00204 	addi	sp,sp,8
1000f3f0:	f800283a 	ret

1000f3f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f3f4:	defffe04 	addi	sp,sp,-8
1000f3f8:	dfc00115 	stw	ra,4(sp)
1000f3fc:	df000015 	stw	fp,0(sp)
1000f400:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f404:	01040074 	movhi	r4,4097
1000f408:	21079d04 	addi	r4,r4,7796
1000f40c:	000b883a 	mov	r5,zero
1000f410:	01800144 	movi	r6,5
1000f414:	000f5a00 	call	1000f5a0 <altera_avalon_jtag_uart_init>
1000f418:	01040074 	movhi	r4,4097
1000f41c:	21079304 	addi	r4,r4,7756
1000f420:	000f3880 	call	1000f388 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f424:	0001883a 	nop
}
1000f428:	e037883a 	mov	sp,fp
1000f42c:	dfc00117 	ldw	ra,4(sp)
1000f430:	df000017 	ldw	fp,0(sp)
1000f434:	dec00204 	addi	sp,sp,8
1000f438:	f800283a 	ret

1000f43c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f43c:	defffa04 	addi	sp,sp,-24
1000f440:	dfc00515 	stw	ra,20(sp)
1000f444:	df000415 	stw	fp,16(sp)
1000f448:	df000404 	addi	fp,sp,16
1000f44c:	e13ffd15 	stw	r4,-12(fp)
1000f450:	e17ffe15 	stw	r5,-8(fp)
1000f454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f458:	e0bffd17 	ldw	r2,-12(fp)
1000f45c:	10800017 	ldw	r2,0(r2)
1000f460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f464:	e0bffc17 	ldw	r2,-16(fp)
1000f468:	10c00a04 	addi	r3,r2,40
1000f46c:	e0bffd17 	ldw	r2,-12(fp)
1000f470:	10800217 	ldw	r2,8(r2)
1000f474:	1809883a 	mov	r4,r3
1000f478:	e17ffe17 	ldw	r5,-8(fp)
1000f47c:	e1bfff17 	ldw	r6,-4(fp)
1000f480:	100f883a 	mov	r7,r2
1000f484:	000fa640 	call	1000fa64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f488:	e037883a 	mov	sp,fp
1000f48c:	dfc00117 	ldw	ra,4(sp)
1000f490:	df000017 	ldw	fp,0(sp)
1000f494:	dec00204 	addi	sp,sp,8
1000f498:	f800283a 	ret

1000f49c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f49c:	defffa04 	addi	sp,sp,-24
1000f4a0:	dfc00515 	stw	ra,20(sp)
1000f4a4:	df000415 	stw	fp,16(sp)
1000f4a8:	df000404 	addi	fp,sp,16
1000f4ac:	e13ffd15 	stw	r4,-12(fp)
1000f4b0:	e17ffe15 	stw	r5,-8(fp)
1000f4b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f4b8:	e0bffd17 	ldw	r2,-12(fp)
1000f4bc:	10800017 	ldw	r2,0(r2)
1000f4c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f4c4:	e0bffc17 	ldw	r2,-16(fp)
1000f4c8:	10c00a04 	addi	r3,r2,40
1000f4cc:	e0bffd17 	ldw	r2,-12(fp)
1000f4d0:	10800217 	ldw	r2,8(r2)
1000f4d4:	1809883a 	mov	r4,r3
1000f4d8:	e17ffe17 	ldw	r5,-8(fp)
1000f4dc:	e1bfff17 	ldw	r6,-4(fp)
1000f4e0:	100f883a 	mov	r7,r2
1000f4e4:	000fc700 	call	1000fc70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f4e8:	e037883a 	mov	sp,fp
1000f4ec:	dfc00117 	ldw	ra,4(sp)
1000f4f0:	df000017 	ldw	fp,0(sp)
1000f4f4:	dec00204 	addi	sp,sp,8
1000f4f8:	f800283a 	ret

1000f4fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f4fc:	defffc04 	addi	sp,sp,-16
1000f500:	dfc00315 	stw	ra,12(sp)
1000f504:	df000215 	stw	fp,8(sp)
1000f508:	df000204 	addi	fp,sp,8
1000f50c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f510:	e0bfff17 	ldw	r2,-4(fp)
1000f514:	10800017 	ldw	r2,0(r2)
1000f518:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f51c:	e0bffe17 	ldw	r2,-8(fp)
1000f520:	10c00a04 	addi	r3,r2,40
1000f524:	e0bfff17 	ldw	r2,-4(fp)
1000f528:	10800217 	ldw	r2,8(r2)
1000f52c:	1809883a 	mov	r4,r3
1000f530:	100b883a 	mov	r5,r2
1000f534:	000f9100 	call	1000f910 <altera_avalon_jtag_uart_close>
}
1000f538:	e037883a 	mov	sp,fp
1000f53c:	dfc00117 	ldw	ra,4(sp)
1000f540:	df000017 	ldw	fp,0(sp)
1000f544:	dec00204 	addi	sp,sp,8
1000f548:	f800283a 	ret

1000f54c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f54c:	defffa04 	addi	sp,sp,-24
1000f550:	dfc00515 	stw	ra,20(sp)
1000f554:	df000415 	stw	fp,16(sp)
1000f558:	df000404 	addi	fp,sp,16
1000f55c:	e13ffd15 	stw	r4,-12(fp)
1000f560:	e17ffe15 	stw	r5,-8(fp)
1000f564:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f568:	e0bffd17 	ldw	r2,-12(fp)
1000f56c:	10800017 	ldw	r2,0(r2)
1000f570:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f574:	e0bffc17 	ldw	r2,-16(fp)
1000f578:	10800a04 	addi	r2,r2,40
1000f57c:	1009883a 	mov	r4,r2
1000f580:	e17ffe17 	ldw	r5,-8(fp)
1000f584:	e1bfff17 	ldw	r6,-4(fp)
1000f588:	000f9780 	call	1000f978 <altera_avalon_jtag_uart_ioctl>
}
1000f58c:	e037883a 	mov	sp,fp
1000f590:	dfc00117 	ldw	ra,4(sp)
1000f594:	df000017 	ldw	fp,0(sp)
1000f598:	dec00204 	addi	sp,sp,8
1000f59c:	f800283a 	ret

1000f5a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f5a0:	defffa04 	addi	sp,sp,-24
1000f5a4:	dfc00515 	stw	ra,20(sp)
1000f5a8:	df000415 	stw	fp,16(sp)
1000f5ac:	df000404 	addi	fp,sp,16
1000f5b0:	e13ffd15 	stw	r4,-12(fp)
1000f5b4:	e17ffe15 	stw	r5,-8(fp)
1000f5b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f5bc:	e0bffd17 	ldw	r2,-12(fp)
1000f5c0:	00c00044 	movi	r3,1
1000f5c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f5c8:	e0bffd17 	ldw	r2,-12(fp)
1000f5cc:	10800017 	ldw	r2,0(r2)
1000f5d0:	10800104 	addi	r2,r2,4
1000f5d4:	1007883a 	mov	r3,r2
1000f5d8:	e0bffd17 	ldw	r2,-12(fp)
1000f5dc:	10800817 	ldw	r2,32(r2)
1000f5e0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f5e4:	e0fffe17 	ldw	r3,-8(fp)
1000f5e8:	e0bfff17 	ldw	r2,-4(fp)
1000f5ec:	d8000015 	stw	zero,0(sp)
1000f5f0:	1809883a 	mov	r4,r3
1000f5f4:	100b883a 	mov	r5,r2
1000f5f8:	01840074 	movhi	r6,4097
1000f5fc:	31bd9904 	addi	r6,r6,-2460
1000f600:	e1fffd17 	ldw	r7,-12(fp)
1000f604:	00101ac0 	call	100101ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f608:	e0bffd17 	ldw	r2,-12(fp)
1000f60c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f610:	e0bffd17 	ldw	r2,-12(fp)
1000f614:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f618:	00840074 	movhi	r2,4097
1000f61c:	10929004 	addi	r2,r2,19008
1000f620:	10800017 	ldw	r2,0(r2)
1000f624:	1809883a 	mov	r4,r3
1000f628:	100b883a 	mov	r5,r2
1000f62c:	01840074 	movhi	r6,4097
1000f630:	31be1a04 	addi	r6,r6,-1944
1000f634:	e1fffd17 	ldw	r7,-12(fp)
1000f638:	000fe880 	call	1000fe88 <alt_alarm_start>
1000f63c:	1000040e 	bge	r2,zero,1000f650 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f640:	e0fffd17 	ldw	r3,-12(fp)
1000f644:	00a00034 	movhi	r2,32768
1000f648:	10bfffc4 	addi	r2,r2,-1
1000f64c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f650:	e037883a 	mov	sp,fp
1000f654:	dfc00117 	ldw	ra,4(sp)
1000f658:	df000017 	ldw	fp,0(sp)
1000f65c:	dec00204 	addi	sp,sp,8
1000f660:	f800283a 	ret

1000f664 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f664:	defff804 	addi	sp,sp,-32
1000f668:	df000715 	stw	fp,28(sp)
1000f66c:	df000704 	addi	fp,sp,28
1000f670:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f674:	e0bfff17 	ldw	r2,-4(fp)
1000f678:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f67c:	e0bffb17 	ldw	r2,-20(fp)
1000f680:	10800017 	ldw	r2,0(r2)
1000f684:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f688:	e0bffc17 	ldw	r2,-16(fp)
1000f68c:	10800104 	addi	r2,r2,4
1000f690:	10800037 	ldwio	r2,0(r2)
1000f694:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f698:	e0bffd17 	ldw	r2,-12(fp)
1000f69c:	1080c00c 	andi	r2,r2,768
1000f6a0:	1000011e 	bne	r2,zero,1000f6a8 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f6a4:	00006c06 	br	1000f858 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f6a8:	e0bffd17 	ldw	r2,-12(fp)
1000f6ac:	1080400c 	andi	r2,r2,256
1000f6b0:	10003426 	beq	r2,zero,1000f784 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f6b4:	00800074 	movhi	r2,1
1000f6b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f6bc:	e0bffb17 	ldw	r2,-20(fp)
1000f6c0:	10800a17 	ldw	r2,40(r2)
1000f6c4:	10800044 	addi	r2,r2,1
1000f6c8:	1081ffcc 	andi	r2,r2,2047
1000f6cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f6d0:	e0bffb17 	ldw	r2,-20(fp)
1000f6d4:	10c00b17 	ldw	r3,44(r2)
1000f6d8:	e0bffe17 	ldw	r2,-8(fp)
1000f6dc:	1880011e 	bne	r3,r2,1000f6e4 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f6e0:	00001606 	br	1000f73c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f6e4:	e0bffc17 	ldw	r2,-16(fp)
1000f6e8:	10800037 	ldwio	r2,0(r2)
1000f6ec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f6f0:	e0bff917 	ldw	r2,-28(fp)
1000f6f4:	10a0000c 	andi	r2,r2,32768
1000f6f8:	1000011e 	bne	r2,zero,1000f700 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f6fc:	00000f06 	br	1000f73c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f700:	e0bffb17 	ldw	r2,-20(fp)
1000f704:	10800a17 	ldw	r2,40(r2)
1000f708:	e0fff917 	ldw	r3,-28(fp)
1000f70c:	1809883a 	mov	r4,r3
1000f710:	e0fffb17 	ldw	r3,-20(fp)
1000f714:	1885883a 	add	r2,r3,r2
1000f718:	10800e04 	addi	r2,r2,56
1000f71c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f720:	e0bffb17 	ldw	r2,-20(fp)
1000f724:	10800a17 	ldw	r2,40(r2)
1000f728:	10800044 	addi	r2,r2,1
1000f72c:	10c1ffcc 	andi	r3,r2,2047
1000f730:	e0bffb17 	ldw	r2,-20(fp)
1000f734:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f738:	003fe006 	br	1000f6bc <__alt_data_end+0xf800f6bc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f73c:	e0bff917 	ldw	r2,-28(fp)
1000f740:	10bfffec 	andhi	r2,r2,65535
1000f744:	10000f26 	beq	r2,zero,1000f784 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f748:	e0bffb17 	ldw	r2,-20(fp)
1000f74c:	10c00817 	ldw	r3,32(r2)
1000f750:	00bfff84 	movi	r2,-2
1000f754:	1886703a 	and	r3,r3,r2
1000f758:	e0bffb17 	ldw	r2,-20(fp)
1000f75c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f760:	e0bffc17 	ldw	r2,-16(fp)
1000f764:	10800104 	addi	r2,r2,4
1000f768:	1007883a 	mov	r3,r2
1000f76c:	e0bffb17 	ldw	r2,-20(fp)
1000f770:	10800817 	ldw	r2,32(r2)
1000f774:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f778:	e0bffc17 	ldw	r2,-16(fp)
1000f77c:	10800104 	addi	r2,r2,4
1000f780:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f784:	e0bffd17 	ldw	r2,-12(fp)
1000f788:	1080800c 	andi	r2,r2,512
1000f78c:	10003126 	beq	r2,zero,1000f854 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f790:	e0bffd17 	ldw	r2,-12(fp)
1000f794:	1004d43a 	srli	r2,r2,16
1000f798:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f79c:	00001406 	br	1000f7f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f7a0:	e0bffc17 	ldw	r2,-16(fp)
1000f7a4:	e0fffb17 	ldw	r3,-20(fp)
1000f7a8:	18c00d17 	ldw	r3,52(r3)
1000f7ac:	e13ffb17 	ldw	r4,-20(fp)
1000f7b0:	20c7883a 	add	r3,r4,r3
1000f7b4:	18c20e04 	addi	r3,r3,2104
1000f7b8:	18c00003 	ldbu	r3,0(r3)
1000f7bc:	18c03fcc 	andi	r3,r3,255
1000f7c0:	18c0201c 	xori	r3,r3,128
1000f7c4:	18ffe004 	addi	r3,r3,-128
1000f7c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f7cc:	e0bffb17 	ldw	r2,-20(fp)
1000f7d0:	10800d17 	ldw	r2,52(r2)
1000f7d4:	10800044 	addi	r2,r2,1
1000f7d8:	10c1ffcc 	andi	r3,r2,2047
1000f7dc:	e0bffb17 	ldw	r2,-20(fp)
1000f7e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f7e4:	e0bffa17 	ldw	r2,-24(fp)
1000f7e8:	10bfffc4 	addi	r2,r2,-1
1000f7ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f7f0:	e0bffa17 	ldw	r2,-24(fp)
1000f7f4:	10000526 	beq	r2,zero,1000f80c <altera_avalon_jtag_uart_irq+0x1a8>
1000f7f8:	e0bffb17 	ldw	r2,-20(fp)
1000f7fc:	10c00d17 	ldw	r3,52(r2)
1000f800:	e0bffb17 	ldw	r2,-20(fp)
1000f804:	10800c17 	ldw	r2,48(r2)
1000f808:	18bfe51e 	bne	r3,r2,1000f7a0 <__alt_data_end+0xf800f7a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f80c:	e0bffa17 	ldw	r2,-24(fp)
1000f810:	10001026 	beq	r2,zero,1000f854 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f814:	e0bffb17 	ldw	r2,-20(fp)
1000f818:	10c00817 	ldw	r3,32(r2)
1000f81c:	00bfff44 	movi	r2,-3
1000f820:	1886703a 	and	r3,r3,r2
1000f824:	e0bffb17 	ldw	r2,-20(fp)
1000f828:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f82c:	e0bffb17 	ldw	r2,-20(fp)
1000f830:	10800017 	ldw	r2,0(r2)
1000f834:	10800104 	addi	r2,r2,4
1000f838:	1007883a 	mov	r3,r2
1000f83c:	e0bffb17 	ldw	r2,-20(fp)
1000f840:	10800817 	ldw	r2,32(r2)
1000f844:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f848:	e0bffc17 	ldw	r2,-16(fp)
1000f84c:	10800104 	addi	r2,r2,4
1000f850:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f854:	003f8c06 	br	1000f688 <__alt_data_end+0xf800f688>
}
1000f858:	e037883a 	mov	sp,fp
1000f85c:	df000017 	ldw	fp,0(sp)
1000f860:	dec00104 	addi	sp,sp,4
1000f864:	f800283a 	ret

1000f868 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f868:	defff804 	addi	sp,sp,-32
1000f86c:	df000715 	stw	fp,28(sp)
1000f870:	df000704 	addi	fp,sp,28
1000f874:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f878:	e0bffb17 	ldw	r2,-20(fp)
1000f87c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f880:	e0bff917 	ldw	r2,-28(fp)
1000f884:	10800017 	ldw	r2,0(r2)
1000f888:	10800104 	addi	r2,r2,4
1000f88c:	10800037 	ldwio	r2,0(r2)
1000f890:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f894:	e0bffa17 	ldw	r2,-24(fp)
1000f898:	1081000c 	andi	r2,r2,1024
1000f89c:	10000b26 	beq	r2,zero,1000f8cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f8a0:	e0bff917 	ldw	r2,-28(fp)
1000f8a4:	10800017 	ldw	r2,0(r2)
1000f8a8:	10800104 	addi	r2,r2,4
1000f8ac:	1007883a 	mov	r3,r2
1000f8b0:	e0bff917 	ldw	r2,-28(fp)
1000f8b4:	10800817 	ldw	r2,32(r2)
1000f8b8:	10810014 	ori	r2,r2,1024
1000f8bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f8c0:	e0bff917 	ldw	r2,-28(fp)
1000f8c4:	10000915 	stw	zero,36(r2)
1000f8c8:	00000a06 	br	1000f8f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f8cc:	e0bff917 	ldw	r2,-28(fp)
1000f8d0:	10c00917 	ldw	r3,36(r2)
1000f8d4:	00a00034 	movhi	r2,32768
1000f8d8:	10bfff04 	addi	r2,r2,-4
1000f8dc:	10c00536 	bltu	r2,r3,1000f8f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f8e0:	e0bff917 	ldw	r2,-28(fp)
1000f8e4:	10800917 	ldw	r2,36(r2)
1000f8e8:	10c00044 	addi	r3,r2,1
1000f8ec:	e0bff917 	ldw	r2,-28(fp)
1000f8f0:	10c00915 	stw	r3,36(r2)
1000f8f4:	00840074 	movhi	r2,4097
1000f8f8:	10929004 	addi	r2,r2,19008
1000f8fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f900:	e037883a 	mov	sp,fp
1000f904:	df000017 	ldw	fp,0(sp)
1000f908:	dec00104 	addi	sp,sp,4
1000f90c:	f800283a 	ret

1000f910 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f910:	defffd04 	addi	sp,sp,-12
1000f914:	df000215 	stw	fp,8(sp)
1000f918:	df000204 	addi	fp,sp,8
1000f91c:	e13ffe15 	stw	r4,-8(fp)
1000f920:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f924:	00000506 	br	1000f93c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f928:	e0bfff17 	ldw	r2,-4(fp)
1000f92c:	1090000c 	andi	r2,r2,16384
1000f930:	10000226 	beq	r2,zero,1000f93c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f934:	00bffd44 	movi	r2,-11
1000f938:	00000b06 	br	1000f968 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f93c:	e0bffe17 	ldw	r2,-8(fp)
1000f940:	10c00d17 	ldw	r3,52(r2)
1000f944:	e0bffe17 	ldw	r2,-8(fp)
1000f948:	10800c17 	ldw	r2,48(r2)
1000f94c:	18800526 	beq	r3,r2,1000f964 <altera_avalon_jtag_uart_close+0x54>
1000f950:	e0bffe17 	ldw	r2,-8(fp)
1000f954:	10c00917 	ldw	r3,36(r2)
1000f958:	e0bffe17 	ldw	r2,-8(fp)
1000f95c:	10800117 	ldw	r2,4(r2)
1000f960:	18bff136 	bltu	r3,r2,1000f928 <__alt_data_end+0xf800f928>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f964:	0005883a 	mov	r2,zero
}
1000f968:	e037883a 	mov	sp,fp
1000f96c:	df000017 	ldw	fp,0(sp)
1000f970:	dec00104 	addi	sp,sp,4
1000f974:	f800283a 	ret

1000f978 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f978:	defffa04 	addi	sp,sp,-24
1000f97c:	df000515 	stw	fp,20(sp)
1000f980:	df000504 	addi	fp,sp,20
1000f984:	e13ffd15 	stw	r4,-12(fp)
1000f988:	e17ffe15 	stw	r5,-8(fp)
1000f98c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f990:	00bff9c4 	movi	r2,-25
1000f994:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f998:	e0bffe17 	ldw	r2,-8(fp)
1000f99c:	10da8060 	cmpeqi	r3,r2,27137
1000f9a0:	1800031e 	bne	r3,zero,1000f9b0 <altera_avalon_jtag_uart_ioctl+0x38>
1000f9a4:	109a80a0 	cmpeqi	r2,r2,27138
1000f9a8:	1000191e 	bne	r2,zero,1000fa10 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000f9ac:	00002806 	br	1000fa50 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f9b0:	e0bffd17 	ldw	r2,-12(fp)
1000f9b4:	10c00117 	ldw	r3,4(r2)
1000f9b8:	00a00034 	movhi	r2,32768
1000f9bc:	10bfffc4 	addi	r2,r2,-1
1000f9c0:	18801226 	beq	r3,r2,1000fa0c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000f9c4:	e0bfff17 	ldw	r2,-4(fp)
1000f9c8:	10800017 	ldw	r2,0(r2)
1000f9cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f9d0:	e0bffc17 	ldw	r2,-16(fp)
1000f9d4:	10800090 	cmplti	r2,r2,2
1000f9d8:	1000061e 	bne	r2,zero,1000f9f4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f9dc:	e0fffc17 	ldw	r3,-16(fp)
1000f9e0:	00a00034 	movhi	r2,32768
1000f9e4:	10bfffc4 	addi	r2,r2,-1
1000f9e8:	18800226 	beq	r3,r2,1000f9f4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f9ec:	e0bffc17 	ldw	r2,-16(fp)
1000f9f0:	00000206 	br	1000f9fc <altera_avalon_jtag_uart_ioctl+0x84>
1000f9f4:	00a00034 	movhi	r2,32768
1000f9f8:	10bfff84 	addi	r2,r2,-2
1000f9fc:	e0fffd17 	ldw	r3,-12(fp)
1000fa00:	18800115 	stw	r2,4(r3)
      rc = 0;
1000fa04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fa08:	00001106 	br	1000fa50 <altera_avalon_jtag_uart_ioctl+0xd8>
1000fa0c:	00001006 	br	1000fa50 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000fa10:	e0bffd17 	ldw	r2,-12(fp)
1000fa14:	10c00117 	ldw	r3,4(r2)
1000fa18:	00a00034 	movhi	r2,32768
1000fa1c:	10bfffc4 	addi	r2,r2,-1
1000fa20:	18800a26 	beq	r3,r2,1000fa4c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fa24:	e0bffd17 	ldw	r2,-12(fp)
1000fa28:	10c00917 	ldw	r3,36(r2)
1000fa2c:	e0bffd17 	ldw	r2,-12(fp)
1000fa30:	10800117 	ldw	r2,4(r2)
1000fa34:	1885803a 	cmpltu	r2,r3,r2
1000fa38:	10c03fcc 	andi	r3,r2,255
1000fa3c:	e0bfff17 	ldw	r2,-4(fp)
1000fa40:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000fa44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fa48:	00000006 	br	1000fa4c <altera_avalon_jtag_uart_ioctl+0xd4>
1000fa4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fa50:	e0bffb17 	ldw	r2,-20(fp)
}
1000fa54:	e037883a 	mov	sp,fp
1000fa58:	df000017 	ldw	fp,0(sp)
1000fa5c:	dec00104 	addi	sp,sp,4
1000fa60:	f800283a 	ret

1000fa64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fa64:	defff304 	addi	sp,sp,-52
1000fa68:	dfc00c15 	stw	ra,48(sp)
1000fa6c:	df000b15 	stw	fp,44(sp)
1000fa70:	df000b04 	addi	fp,sp,44
1000fa74:	e13ffc15 	stw	r4,-16(fp)
1000fa78:	e17ffd15 	stw	r5,-12(fp)
1000fa7c:	e1bffe15 	stw	r6,-8(fp)
1000fa80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fa84:	e0bffd17 	ldw	r2,-12(fp)
1000fa88:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fa8c:	00004906 	br	1000fbb4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fa90:	e0bffc17 	ldw	r2,-16(fp)
1000fa94:	10800a17 	ldw	r2,40(r2)
1000fa98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fa9c:	e0bffc17 	ldw	r2,-16(fp)
1000faa0:	10800b17 	ldw	r2,44(r2)
1000faa4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000faa8:	e0fff717 	ldw	r3,-36(fp)
1000faac:	e0bff817 	ldw	r2,-32(fp)
1000fab0:	18800536 	bltu	r3,r2,1000fac8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fab4:	e0fff717 	ldw	r3,-36(fp)
1000fab8:	e0bff817 	ldw	r2,-32(fp)
1000fabc:	1885c83a 	sub	r2,r3,r2
1000fac0:	e0bff615 	stw	r2,-40(fp)
1000fac4:	00000406 	br	1000fad8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fac8:	00c20004 	movi	r3,2048
1000facc:	e0bff817 	ldw	r2,-32(fp)
1000fad0:	1885c83a 	sub	r2,r3,r2
1000fad4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fad8:	e0bff617 	ldw	r2,-40(fp)
1000fadc:	1000011e 	bne	r2,zero,1000fae4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000fae0:	00001d06 	br	1000fb58 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000fae4:	e0fffe17 	ldw	r3,-8(fp)
1000fae8:	e0bff617 	ldw	r2,-40(fp)
1000faec:	1880022e 	bgeu	r3,r2,1000faf8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000faf0:	e0bffe17 	ldw	r2,-8(fp)
1000faf4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000faf8:	e0bff817 	ldw	r2,-32(fp)
1000fafc:	10800e04 	addi	r2,r2,56
1000fb00:	e0fffc17 	ldw	r3,-16(fp)
1000fb04:	1885883a 	add	r2,r3,r2
1000fb08:	e13ff517 	ldw	r4,-44(fp)
1000fb0c:	100b883a 	mov	r5,r2
1000fb10:	e1bff617 	ldw	r6,-40(fp)
1000fb14:	00093880 	call	10009388 <memcpy>
      ptr   += n;
1000fb18:	e0fff517 	ldw	r3,-44(fp)
1000fb1c:	e0bff617 	ldw	r2,-40(fp)
1000fb20:	1885883a 	add	r2,r3,r2
1000fb24:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fb28:	e0fffe17 	ldw	r3,-8(fp)
1000fb2c:	e0bff617 	ldw	r2,-40(fp)
1000fb30:	1885c83a 	sub	r2,r3,r2
1000fb34:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fb38:	e0fff817 	ldw	r3,-32(fp)
1000fb3c:	e0bff617 	ldw	r2,-40(fp)
1000fb40:	1885883a 	add	r2,r3,r2
1000fb44:	10c1ffcc 	andi	r3,r2,2047
1000fb48:	e0bffc17 	ldw	r2,-16(fp)
1000fb4c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fb50:	e0bffe17 	ldw	r2,-8(fp)
1000fb54:	00bfce16 	blt	zero,r2,1000fa90 <__alt_data_end+0xf800fa90>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fb58:	e0fff517 	ldw	r3,-44(fp)
1000fb5c:	e0bffd17 	ldw	r2,-12(fp)
1000fb60:	18800126 	beq	r3,r2,1000fb68 <altera_avalon_jtag_uart_read+0x104>
      break;
1000fb64:	00001506 	br	1000fbbc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fb68:	e0bfff17 	ldw	r2,-4(fp)
1000fb6c:	1090000c 	andi	r2,r2,16384
1000fb70:	10000126 	beq	r2,zero,1000fb78 <altera_avalon_jtag_uart_read+0x114>
      break;
1000fb74:	00001106 	br	1000fbbc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fb78:	0001883a 	nop
1000fb7c:	e0bffc17 	ldw	r2,-16(fp)
1000fb80:	10c00a17 	ldw	r3,40(r2)
1000fb84:	e0bff717 	ldw	r2,-36(fp)
1000fb88:	1880051e 	bne	r3,r2,1000fba0 <altera_avalon_jtag_uart_read+0x13c>
1000fb8c:	e0bffc17 	ldw	r2,-16(fp)
1000fb90:	10c00917 	ldw	r3,36(r2)
1000fb94:	e0bffc17 	ldw	r2,-16(fp)
1000fb98:	10800117 	ldw	r2,4(r2)
1000fb9c:	18bff736 	bltu	r3,r2,1000fb7c <__alt_data_end+0xf800fb7c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fba0:	e0bffc17 	ldw	r2,-16(fp)
1000fba4:	10c00a17 	ldw	r3,40(r2)
1000fba8:	e0bff717 	ldw	r2,-36(fp)
1000fbac:	1880011e 	bne	r3,r2,1000fbb4 <altera_avalon_jtag_uart_read+0x150>
      break;
1000fbb0:	00000206 	br	1000fbbc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fbb4:	e0bffe17 	ldw	r2,-8(fp)
1000fbb8:	00bfb516 	blt	zero,r2,1000fa90 <__alt_data_end+0xf800fa90>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fbbc:	e0fff517 	ldw	r3,-44(fp)
1000fbc0:	e0bffd17 	ldw	r2,-12(fp)
1000fbc4:	18801826 	beq	r3,r2,1000fc28 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fbc8:	0005303a 	rdctl	r2,status
1000fbcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fbd0:	e0fffa17 	ldw	r3,-24(fp)
1000fbd4:	00bfff84 	movi	r2,-2
1000fbd8:	1884703a 	and	r2,r3,r2
1000fbdc:	1001703a 	wrctl	status,r2
  
  return context;
1000fbe0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fbe4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fbe8:	e0bffc17 	ldw	r2,-16(fp)
1000fbec:	10800817 	ldw	r2,32(r2)
1000fbf0:	10c00054 	ori	r3,r2,1
1000fbf4:	e0bffc17 	ldw	r2,-16(fp)
1000fbf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fbfc:	e0bffc17 	ldw	r2,-16(fp)
1000fc00:	10800017 	ldw	r2,0(r2)
1000fc04:	10800104 	addi	r2,r2,4
1000fc08:	1007883a 	mov	r3,r2
1000fc0c:	e0bffc17 	ldw	r2,-16(fp)
1000fc10:	10800817 	ldw	r2,32(r2)
1000fc14:	18800035 	stwio	r2,0(r3)
1000fc18:	e0bff917 	ldw	r2,-28(fp)
1000fc1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fc20:	e0bffb17 	ldw	r2,-20(fp)
1000fc24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fc28:	e0fff517 	ldw	r3,-44(fp)
1000fc2c:	e0bffd17 	ldw	r2,-12(fp)
1000fc30:	18800426 	beq	r3,r2,1000fc44 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000fc34:	e0fff517 	ldw	r3,-44(fp)
1000fc38:	e0bffd17 	ldw	r2,-12(fp)
1000fc3c:	1885c83a 	sub	r2,r3,r2
1000fc40:	00000606 	br	1000fc5c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000fc44:	e0bfff17 	ldw	r2,-4(fp)
1000fc48:	1090000c 	andi	r2,r2,16384
1000fc4c:	10000226 	beq	r2,zero,1000fc58 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000fc50:	00bffd44 	movi	r2,-11
1000fc54:	00000106 	br	1000fc5c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000fc58:	00bffec4 	movi	r2,-5
}
1000fc5c:	e037883a 	mov	sp,fp
1000fc60:	dfc00117 	ldw	ra,4(sp)
1000fc64:	df000017 	ldw	fp,0(sp)
1000fc68:	dec00204 	addi	sp,sp,8
1000fc6c:	f800283a 	ret

1000fc70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fc70:	defff304 	addi	sp,sp,-52
1000fc74:	dfc00c15 	stw	ra,48(sp)
1000fc78:	df000b15 	stw	fp,44(sp)
1000fc7c:	df000b04 	addi	fp,sp,44
1000fc80:	e13ffc15 	stw	r4,-16(fp)
1000fc84:	e17ffd15 	stw	r5,-12(fp)
1000fc88:	e1bffe15 	stw	r6,-8(fp)
1000fc8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fc90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fc94:	e0bffd17 	ldw	r2,-12(fp)
1000fc98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fc9c:	00003806 	br	1000fd80 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fca0:	e0bffc17 	ldw	r2,-16(fp)
1000fca4:	10800c17 	ldw	r2,48(r2)
1000fca8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fcac:	e0bffc17 	ldw	r2,-16(fp)
1000fcb0:	10800d17 	ldw	r2,52(r2)
1000fcb4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fcb8:	e0fff817 	ldw	r3,-32(fp)
1000fcbc:	e0bff517 	ldw	r2,-44(fp)
1000fcc0:	1880062e 	bgeu	r3,r2,1000fcdc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fcc4:	e0fff517 	ldw	r3,-44(fp)
1000fcc8:	e0bff817 	ldw	r2,-32(fp)
1000fccc:	1885c83a 	sub	r2,r3,r2
1000fcd0:	10bfffc4 	addi	r2,r2,-1
1000fcd4:	e0bff615 	stw	r2,-40(fp)
1000fcd8:	00000b06 	br	1000fd08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000fcdc:	e0bff517 	ldw	r2,-44(fp)
1000fce0:	10000526 	beq	r2,zero,1000fcf8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fce4:	00c20004 	movi	r3,2048
1000fce8:	e0bff817 	ldw	r2,-32(fp)
1000fcec:	1885c83a 	sub	r2,r3,r2
1000fcf0:	e0bff615 	stw	r2,-40(fp)
1000fcf4:	00000406 	br	1000fd08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fcf8:	00c1ffc4 	movi	r3,2047
1000fcfc:	e0bff817 	ldw	r2,-32(fp)
1000fd00:	1885c83a 	sub	r2,r3,r2
1000fd04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fd08:	e0bff617 	ldw	r2,-40(fp)
1000fd0c:	1000011e 	bne	r2,zero,1000fd14 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000fd10:	00001d06 	br	1000fd88 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000fd14:	e0fffe17 	ldw	r3,-8(fp)
1000fd18:	e0bff617 	ldw	r2,-40(fp)
1000fd1c:	1880022e 	bgeu	r3,r2,1000fd28 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000fd20:	e0bffe17 	ldw	r2,-8(fp)
1000fd24:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fd28:	e0bff817 	ldw	r2,-32(fp)
1000fd2c:	10820e04 	addi	r2,r2,2104
1000fd30:	e0fffc17 	ldw	r3,-16(fp)
1000fd34:	1885883a 	add	r2,r3,r2
1000fd38:	1009883a 	mov	r4,r2
1000fd3c:	e17ffd17 	ldw	r5,-12(fp)
1000fd40:	e1bff617 	ldw	r6,-40(fp)
1000fd44:	00093880 	call	10009388 <memcpy>
      ptr   += n;
1000fd48:	e0fffd17 	ldw	r3,-12(fp)
1000fd4c:	e0bff617 	ldw	r2,-40(fp)
1000fd50:	1885883a 	add	r2,r3,r2
1000fd54:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000fd58:	e0fffe17 	ldw	r3,-8(fp)
1000fd5c:	e0bff617 	ldw	r2,-40(fp)
1000fd60:	1885c83a 	sub	r2,r3,r2
1000fd64:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fd68:	e0fff817 	ldw	r3,-32(fp)
1000fd6c:	e0bff617 	ldw	r2,-40(fp)
1000fd70:	1885883a 	add	r2,r3,r2
1000fd74:	10c1ffcc 	andi	r3,r2,2047
1000fd78:	e0bffc17 	ldw	r2,-16(fp)
1000fd7c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fd80:	e0bffe17 	ldw	r2,-8(fp)
1000fd84:	00bfc616 	blt	zero,r2,1000fca0 <__alt_data_end+0xf800fca0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fd88:	0005303a 	rdctl	r2,status
1000fd8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fd90:	e0fffa17 	ldw	r3,-24(fp)
1000fd94:	00bfff84 	movi	r2,-2
1000fd98:	1884703a 	and	r2,r3,r2
1000fd9c:	1001703a 	wrctl	status,r2
  
  return context;
1000fda0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000fda4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fda8:	e0bffc17 	ldw	r2,-16(fp)
1000fdac:	10800817 	ldw	r2,32(r2)
1000fdb0:	10c00094 	ori	r3,r2,2
1000fdb4:	e0bffc17 	ldw	r2,-16(fp)
1000fdb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fdbc:	e0bffc17 	ldw	r2,-16(fp)
1000fdc0:	10800017 	ldw	r2,0(r2)
1000fdc4:	10800104 	addi	r2,r2,4
1000fdc8:	1007883a 	mov	r3,r2
1000fdcc:	e0bffc17 	ldw	r2,-16(fp)
1000fdd0:	10800817 	ldw	r2,32(r2)
1000fdd4:	18800035 	stwio	r2,0(r3)
1000fdd8:	e0bff917 	ldw	r2,-28(fp)
1000fddc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fde0:	e0bffb17 	ldw	r2,-20(fp)
1000fde4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000fde8:	e0bffe17 	ldw	r2,-8(fp)
1000fdec:	0080120e 	bge	zero,r2,1000fe38 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000fdf0:	e0bfff17 	ldw	r2,-4(fp)
1000fdf4:	1090000c 	andi	r2,r2,16384
1000fdf8:	10000126 	beq	r2,zero,1000fe00 <altera_avalon_jtag_uart_write+0x190>
        break;
1000fdfc:	00001006 	br	1000fe40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000fe00:	0001883a 	nop
1000fe04:	e0bffc17 	ldw	r2,-16(fp)
1000fe08:	10c00d17 	ldw	r3,52(r2)
1000fe0c:	e0bff517 	ldw	r2,-44(fp)
1000fe10:	1880051e 	bne	r3,r2,1000fe28 <altera_avalon_jtag_uart_write+0x1b8>
1000fe14:	e0bffc17 	ldw	r2,-16(fp)
1000fe18:	10c00917 	ldw	r3,36(r2)
1000fe1c:	e0bffc17 	ldw	r2,-16(fp)
1000fe20:	10800117 	ldw	r2,4(r2)
1000fe24:	18bff736 	bltu	r3,r2,1000fe04 <__alt_data_end+0xf800fe04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000fe28:	e0bffc17 	ldw	r2,-16(fp)
1000fe2c:	10800917 	ldw	r2,36(r2)
1000fe30:	10000126 	beq	r2,zero,1000fe38 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000fe34:	00000206 	br	1000fe40 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000fe38:	e0bffe17 	ldw	r2,-8(fp)
1000fe3c:	00bf9716 	blt	zero,r2,1000fc9c <__alt_data_end+0xf800fc9c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000fe40:	e0fffd17 	ldw	r3,-12(fp)
1000fe44:	e0bff717 	ldw	r2,-36(fp)
1000fe48:	18800426 	beq	r3,r2,1000fe5c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000fe4c:	e0fffd17 	ldw	r3,-12(fp)
1000fe50:	e0bff717 	ldw	r2,-36(fp)
1000fe54:	1885c83a 	sub	r2,r3,r2
1000fe58:	00000606 	br	1000fe74 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000fe5c:	e0bfff17 	ldw	r2,-4(fp)
1000fe60:	1090000c 	andi	r2,r2,16384
1000fe64:	10000226 	beq	r2,zero,1000fe70 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000fe68:	00bffd44 	movi	r2,-11
1000fe6c:	00000106 	br	1000fe74 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000fe70:	00bffec4 	movi	r2,-5
}
1000fe74:	e037883a 	mov	sp,fp
1000fe78:	dfc00117 	ldw	ra,4(sp)
1000fe7c:	df000017 	ldw	fp,0(sp)
1000fe80:	dec00204 	addi	sp,sp,8
1000fe84:	f800283a 	ret

1000fe88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000fe88:	defff504 	addi	sp,sp,-44
1000fe8c:	df000a15 	stw	fp,40(sp)
1000fe90:	df000a04 	addi	fp,sp,40
1000fe94:	e13ffc15 	stw	r4,-16(fp)
1000fe98:	e17ffd15 	stw	r5,-12(fp)
1000fe9c:	e1bffe15 	stw	r6,-8(fp)
1000fea0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000fea4:	e03ff615 	stw	zero,-40(fp)
1000fea8:	00840074 	movhi	r2,4097
1000feac:	10929004 	addi	r2,r2,19008
1000feb0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000feb4:	10003f26 	beq	r2,zero,1000ffb4 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000feb8:	e0bffc17 	ldw	r2,-16(fp)
1000febc:	10003b26 	beq	r2,zero,1000ffac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000fec0:	e0bffc17 	ldw	r2,-16(fp)
1000fec4:	e0fffe17 	ldw	r3,-8(fp)
1000fec8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000fecc:	e0bffc17 	ldw	r2,-16(fp)
1000fed0:	e0ffff17 	ldw	r3,-4(fp)
1000fed4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fed8:	0005303a 	rdctl	r2,status
1000fedc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fee0:	e0fff817 	ldw	r3,-32(fp)
1000fee4:	00bfff84 	movi	r2,-2
1000fee8:	1884703a 	and	r2,r3,r2
1000feec:	1001703a 	wrctl	status,r2
  
  return context;
1000fef0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000fef4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000fef8:	00840074 	movhi	r2,4097
1000fefc:	10929104 	addi	r2,r2,19012
1000ff00:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ff04:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ff08:	e0fffd17 	ldw	r3,-12(fp)
1000ff0c:	e0bff617 	ldw	r2,-40(fp)
1000ff10:	1885883a 	add	r2,r3,r2
1000ff14:	10c00044 	addi	r3,r2,1
1000ff18:	e0bffc17 	ldw	r2,-16(fp)
1000ff1c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ff20:	e0bffc17 	ldw	r2,-16(fp)
1000ff24:	10c00217 	ldw	r3,8(r2)
1000ff28:	e0bff617 	ldw	r2,-40(fp)
1000ff2c:	1880042e 	bgeu	r3,r2,1000ff40 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ff30:	e0bffc17 	ldw	r2,-16(fp)
1000ff34:	00c00044 	movi	r3,1
1000ff38:	10c00405 	stb	r3,16(r2)
1000ff3c:	00000206 	br	1000ff48 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ff40:	e0bffc17 	ldw	r2,-16(fp)
1000ff44:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000ff48:	e0fffc17 	ldw	r3,-16(fp)
1000ff4c:	00840074 	movhi	r2,4097
1000ff50:	108bb904 	addi	r2,r2,12004
1000ff54:	e0bff915 	stw	r2,-28(fp)
1000ff58:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ff5c:	e0bffa17 	ldw	r2,-24(fp)
1000ff60:	e0fff917 	ldw	r3,-28(fp)
1000ff64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ff68:	e0bff917 	ldw	r2,-28(fp)
1000ff6c:	10c00017 	ldw	r3,0(r2)
1000ff70:	e0bffa17 	ldw	r2,-24(fp)
1000ff74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ff78:	e0bff917 	ldw	r2,-28(fp)
1000ff7c:	10800017 	ldw	r2,0(r2)
1000ff80:	e0fffa17 	ldw	r3,-24(fp)
1000ff84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ff88:	e0bff917 	ldw	r2,-28(fp)
1000ff8c:	e0fffa17 	ldw	r3,-24(fp)
1000ff90:	10c00015 	stw	r3,0(r2)
1000ff94:	e0bff717 	ldw	r2,-36(fp)
1000ff98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ff9c:	e0bffb17 	ldw	r2,-20(fp)
1000ffa0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ffa4:	0005883a 	mov	r2,zero
1000ffa8:	00000306 	br	1000ffb8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ffac:	00bffa84 	movi	r2,-22
1000ffb0:	00000106 	br	1000ffb8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ffb4:	00bfde84 	movi	r2,-134
  }
}
1000ffb8:	e037883a 	mov	sp,fp
1000ffbc:	df000017 	ldw	fp,0(sp)
1000ffc0:	dec00104 	addi	sp,sp,4
1000ffc4:	f800283a 	ret

1000ffc8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ffc8:	deffff04 	addi	sp,sp,-4
1000ffcc:	df000015 	stw	fp,0(sp)
1000ffd0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ffd4:	e037883a 	mov	sp,fp
1000ffd8:	df000017 	ldw	fp,0(sp)
1000ffdc:	dec00104 	addi	sp,sp,4
1000ffe0:	f800283a 	ret

1000ffe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ffe4:	defffe04 	addi	sp,sp,-8
1000ffe8:	dfc00115 	stw	ra,4(sp)
1000ffec:	df000015 	stw	fp,0(sp)
1000fff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fff4:	00840074 	movhi	r2,4097
1000fff8:	108bb604 	addi	r2,r2,11992
1000fffc:	10800017 	ldw	r2,0(r2)
10010000:	10000526 	beq	r2,zero,10010018 <alt_get_errno+0x34>
10010004:	00840074 	movhi	r2,4097
10010008:	108bb604 	addi	r2,r2,11992
1001000c:	10800017 	ldw	r2,0(r2)
10010010:	103ee83a 	callr	r2
10010014:	00000206 	br	10010020 <alt_get_errno+0x3c>
10010018:	00840074 	movhi	r2,4097
1001001c:	10928b04 	addi	r2,r2,18988
}
10010020:	e037883a 	mov	sp,fp
10010024:	dfc00117 	ldw	ra,4(sp)
10010028:	df000017 	ldw	fp,0(sp)
1001002c:	dec00204 	addi	sp,sp,8
10010030:	f800283a 	ret

10010034 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010034:	defffa04 	addi	sp,sp,-24
10010038:	dfc00515 	stw	ra,20(sp)
1001003c:	df000415 	stw	fp,16(sp)
10010040:	df000404 	addi	fp,sp,16
10010044:	e13ffe15 	stw	r4,-8(fp)
10010048:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1001004c:	e0bffe17 	ldw	r2,-8(fp)
10010050:	10000326 	beq	r2,zero,10010060 <alt_dev_llist_insert+0x2c>
10010054:	e0bffe17 	ldw	r2,-8(fp)
10010058:	10800217 	ldw	r2,8(r2)
1001005c:	1000061e 	bne	r2,zero,10010078 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010060:	000ffe40 	call	1000ffe4 <alt_get_errno>
10010064:	1007883a 	mov	r3,r2
10010068:	00800584 	movi	r2,22
1001006c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010070:	00bffa84 	movi	r2,-22
10010074:	00001306 	br	100100c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010078:	e0bffe17 	ldw	r2,-8(fp)
1001007c:	e0ffff17 	ldw	r3,-4(fp)
10010080:	e0fffc15 	stw	r3,-16(fp)
10010084:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010088:	e0bffd17 	ldw	r2,-12(fp)
1001008c:	e0fffc17 	ldw	r3,-16(fp)
10010090:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010094:	e0bffc17 	ldw	r2,-16(fp)
10010098:	10c00017 	ldw	r3,0(r2)
1001009c:	e0bffd17 	ldw	r2,-12(fp)
100100a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100100a4:	e0bffc17 	ldw	r2,-16(fp)
100100a8:	10800017 	ldw	r2,0(r2)
100100ac:	e0fffd17 	ldw	r3,-12(fp)
100100b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100100b4:	e0bffc17 	ldw	r2,-16(fp)
100100b8:	e0fffd17 	ldw	r3,-12(fp)
100100bc:	10c00015 	stw	r3,0(r2)

  return 0;  
100100c0:	0005883a 	mov	r2,zero
}
100100c4:	e037883a 	mov	sp,fp
100100c8:	dfc00117 	ldw	ra,4(sp)
100100cc:	df000017 	ldw	fp,0(sp)
100100d0:	dec00204 	addi	sp,sp,8
100100d4:	f800283a 	ret

100100d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100100d8:	defffd04 	addi	sp,sp,-12
100100dc:	dfc00215 	stw	ra,8(sp)
100100e0:	df000115 	stw	fp,4(sp)
100100e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100100e8:	00840074 	movhi	r2,4097
100100ec:	10843a04 	addi	r2,r2,4328
100100f0:	e0bfff15 	stw	r2,-4(fp)
100100f4:	00000606 	br	10010110 <_do_ctors+0x38>
        (*ctor) (); 
100100f8:	e0bfff17 	ldw	r2,-4(fp)
100100fc:	10800017 	ldw	r2,0(r2)
10010100:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010104:	e0bfff17 	ldw	r2,-4(fp)
10010108:	10bfff04 	addi	r2,r2,-4
1001010c:	e0bfff15 	stw	r2,-4(fp)
10010110:	e0ffff17 	ldw	r3,-4(fp)
10010114:	00840074 	movhi	r2,4097
10010118:	10843b04 	addi	r2,r2,4332
1001011c:	18bff62e 	bgeu	r3,r2,100100f8 <__alt_data_end+0xf80100f8>
        (*ctor) (); 
}
10010120:	e037883a 	mov	sp,fp
10010124:	dfc00117 	ldw	ra,4(sp)
10010128:	df000017 	ldw	fp,0(sp)
1001012c:	dec00204 	addi	sp,sp,8
10010130:	f800283a 	ret

10010134 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010134:	defffd04 	addi	sp,sp,-12
10010138:	dfc00215 	stw	ra,8(sp)
1001013c:	df000115 	stw	fp,4(sp)
10010140:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010144:	00840074 	movhi	r2,4097
10010148:	10843a04 	addi	r2,r2,4328
1001014c:	e0bfff15 	stw	r2,-4(fp)
10010150:	00000606 	br	1001016c <_do_dtors+0x38>
        (*dtor) (); 
10010154:	e0bfff17 	ldw	r2,-4(fp)
10010158:	10800017 	ldw	r2,0(r2)
1001015c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010160:	e0bfff17 	ldw	r2,-4(fp)
10010164:	10bfff04 	addi	r2,r2,-4
10010168:	e0bfff15 	stw	r2,-4(fp)
1001016c:	e0ffff17 	ldw	r3,-4(fp)
10010170:	00840074 	movhi	r2,4097
10010174:	10843b04 	addi	r2,r2,4332
10010178:	18bff62e 	bgeu	r3,r2,10010154 <__alt_data_end+0xf8010154>
        (*dtor) (); 
}
1001017c:	e037883a 	mov	sp,fp
10010180:	dfc00117 	ldw	ra,4(sp)
10010184:	df000017 	ldw	fp,0(sp)
10010188:	dec00204 	addi	sp,sp,8
1001018c:	f800283a 	ret

10010190 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010190:	deffff04 	addi	sp,sp,-4
10010194:	df000015 	stw	fp,0(sp)
10010198:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001019c:	e037883a 	mov	sp,fp
100101a0:	df000017 	ldw	fp,0(sp)
100101a4:	dec00104 	addi	sp,sp,4
100101a8:	f800283a 	ret

100101ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100101ac:	defff904 	addi	sp,sp,-28
100101b0:	dfc00615 	stw	ra,24(sp)
100101b4:	df000515 	stw	fp,20(sp)
100101b8:	df000504 	addi	fp,sp,20
100101bc:	e13ffc15 	stw	r4,-16(fp)
100101c0:	e17ffd15 	stw	r5,-12(fp)
100101c4:	e1bffe15 	stw	r6,-8(fp)
100101c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100101cc:	e0800217 	ldw	r2,8(fp)
100101d0:	d8800015 	stw	r2,0(sp)
100101d4:	e13ffc17 	ldw	r4,-16(fp)
100101d8:	e17ffd17 	ldw	r5,-12(fp)
100101dc:	e1bffe17 	ldw	r6,-8(fp)
100101e0:	e1ffff17 	ldw	r7,-4(fp)
100101e4:	001038c0 	call	1001038c <alt_iic_isr_register>
}  
100101e8:	e037883a 	mov	sp,fp
100101ec:	dfc00117 	ldw	ra,4(sp)
100101f0:	df000017 	ldw	fp,0(sp)
100101f4:	dec00204 	addi	sp,sp,8
100101f8:	f800283a 	ret

100101fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100101fc:	defff904 	addi	sp,sp,-28
10010200:	df000615 	stw	fp,24(sp)
10010204:	df000604 	addi	fp,sp,24
10010208:	e13ffe15 	stw	r4,-8(fp)
1001020c:	e17fff15 	stw	r5,-4(fp)
10010210:	e0bfff17 	ldw	r2,-4(fp)
10010214:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010218:	0005303a 	rdctl	r2,status
1001021c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010220:	e0fffb17 	ldw	r3,-20(fp)
10010224:	00bfff84 	movi	r2,-2
10010228:	1884703a 	and	r2,r3,r2
1001022c:	1001703a 	wrctl	status,r2
  
  return context;
10010230:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010234:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010238:	e0bffa17 	ldw	r2,-24(fp)
1001023c:	00c00044 	movi	r3,1
10010240:	1884983a 	sll	r2,r3,r2
10010244:	1007883a 	mov	r3,r2
10010248:	00840074 	movhi	r2,4097
1001024c:	10928f04 	addi	r2,r2,19004
10010250:	10800017 	ldw	r2,0(r2)
10010254:	1886b03a 	or	r3,r3,r2
10010258:	00840074 	movhi	r2,4097
1001025c:	10928f04 	addi	r2,r2,19004
10010260:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010264:	00840074 	movhi	r2,4097
10010268:	10928f04 	addi	r2,r2,19004
1001026c:	10800017 	ldw	r2,0(r2)
10010270:	100170fa 	wrctl	ienable,r2
10010274:	e0bffc17 	ldw	r2,-16(fp)
10010278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001027c:	e0bffd17 	ldw	r2,-12(fp)
10010280:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010284:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010288:	0001883a 	nop
}
1001028c:	e037883a 	mov	sp,fp
10010290:	df000017 	ldw	fp,0(sp)
10010294:	dec00104 	addi	sp,sp,4
10010298:	f800283a 	ret

1001029c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1001029c:	defff904 	addi	sp,sp,-28
100102a0:	df000615 	stw	fp,24(sp)
100102a4:	df000604 	addi	fp,sp,24
100102a8:	e13ffe15 	stw	r4,-8(fp)
100102ac:	e17fff15 	stw	r5,-4(fp)
100102b0:	e0bfff17 	ldw	r2,-4(fp)
100102b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100102b8:	0005303a 	rdctl	r2,status
100102bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102c0:	e0fffb17 	ldw	r3,-20(fp)
100102c4:	00bfff84 	movi	r2,-2
100102c8:	1884703a 	and	r2,r3,r2
100102cc:	1001703a 	wrctl	status,r2
  
  return context;
100102d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100102d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100102d8:	e0bffa17 	ldw	r2,-24(fp)
100102dc:	00c00044 	movi	r3,1
100102e0:	1884983a 	sll	r2,r3,r2
100102e4:	0084303a 	nor	r2,zero,r2
100102e8:	1007883a 	mov	r3,r2
100102ec:	00840074 	movhi	r2,4097
100102f0:	10928f04 	addi	r2,r2,19004
100102f4:	10800017 	ldw	r2,0(r2)
100102f8:	1886703a 	and	r3,r3,r2
100102fc:	00840074 	movhi	r2,4097
10010300:	10928f04 	addi	r2,r2,19004
10010304:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010308:	00840074 	movhi	r2,4097
1001030c:	10928f04 	addi	r2,r2,19004
10010310:	10800017 	ldw	r2,0(r2)
10010314:	100170fa 	wrctl	ienable,r2
10010318:	e0bffc17 	ldw	r2,-16(fp)
1001031c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010320:	e0bffd17 	ldw	r2,-12(fp)
10010324:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010328:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1001032c:	0001883a 	nop
}
10010330:	e037883a 	mov	sp,fp
10010334:	df000017 	ldw	fp,0(sp)
10010338:	dec00104 	addi	sp,sp,4
1001033c:	f800283a 	ret

10010340 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010340:	defffc04 	addi	sp,sp,-16
10010344:	df000315 	stw	fp,12(sp)
10010348:	df000304 	addi	fp,sp,12
1001034c:	e13ffe15 	stw	r4,-8(fp)
10010350:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010354:	000530fa 	rdctl	r2,ienable
10010358:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001035c:	e0bfff17 	ldw	r2,-4(fp)
10010360:	00c00044 	movi	r3,1
10010364:	1884983a 	sll	r2,r3,r2
10010368:	1007883a 	mov	r3,r2
1001036c:	e0bffd17 	ldw	r2,-12(fp)
10010370:	1884703a 	and	r2,r3,r2
10010374:	1004c03a 	cmpne	r2,r2,zero
10010378:	10803fcc 	andi	r2,r2,255
}
1001037c:	e037883a 	mov	sp,fp
10010380:	df000017 	ldw	fp,0(sp)
10010384:	dec00104 	addi	sp,sp,4
10010388:	f800283a 	ret

1001038c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001038c:	defff504 	addi	sp,sp,-44
10010390:	dfc00a15 	stw	ra,40(sp)
10010394:	df000915 	stw	fp,36(sp)
10010398:	df000904 	addi	fp,sp,36
1001039c:	e13ffc15 	stw	r4,-16(fp)
100103a0:	e17ffd15 	stw	r5,-12(fp)
100103a4:	e1bffe15 	stw	r6,-8(fp)
100103a8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100103ac:	00bffa84 	movi	r2,-22
100103b0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100103b4:	e0bffd17 	ldw	r2,-12(fp)
100103b8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100103bc:	e0bff817 	ldw	r2,-32(fp)
100103c0:	10800808 	cmpgei	r2,r2,32
100103c4:	1000271e 	bne	r2,zero,10010464 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100103c8:	0005303a 	rdctl	r2,status
100103cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103d0:	e0fffa17 	ldw	r3,-24(fp)
100103d4:	00bfff84 	movi	r2,-2
100103d8:	1884703a 	and	r2,r3,r2
100103dc:	1001703a 	wrctl	status,r2
  
  return context;
100103e0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100103e4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100103e8:	00840074 	movhi	r2,4097
100103ec:	10932d04 	addi	r2,r2,19636
100103f0:	e0fff817 	ldw	r3,-32(fp)
100103f4:	180690fa 	slli	r3,r3,3
100103f8:	10c5883a 	add	r2,r2,r3
100103fc:	e0fffe17 	ldw	r3,-8(fp)
10010400:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010404:	00840074 	movhi	r2,4097
10010408:	10932d04 	addi	r2,r2,19636
1001040c:	e0fff817 	ldw	r3,-32(fp)
10010410:	180690fa 	slli	r3,r3,3
10010414:	10c5883a 	add	r2,r2,r3
10010418:	10800104 	addi	r2,r2,4
1001041c:	e0ffff17 	ldw	r3,-4(fp)
10010420:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010424:	e0bffe17 	ldw	r2,-8(fp)
10010428:	10000526 	beq	r2,zero,10010440 <alt_iic_isr_register+0xb4>
1001042c:	e0bff817 	ldw	r2,-32(fp)
10010430:	e13ffc17 	ldw	r4,-16(fp)
10010434:	100b883a 	mov	r5,r2
10010438:	00101fc0 	call	100101fc <alt_ic_irq_enable>
1001043c:	00000406 	br	10010450 <alt_iic_isr_register+0xc4>
10010440:	e0bff817 	ldw	r2,-32(fp)
10010444:	e13ffc17 	ldw	r4,-16(fp)
10010448:	100b883a 	mov	r5,r2
1001044c:	001029c0 	call	1001029c <alt_ic_irq_disable>
10010450:	e0bff715 	stw	r2,-36(fp)
10010454:	e0bff917 	ldw	r2,-28(fp)
10010458:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001045c:	e0bffb17 	ldw	r2,-20(fp)
10010460:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010464:	e0bff717 	ldw	r2,-36(fp)
}
10010468:	e037883a 	mov	sp,fp
1001046c:	dfc00117 	ldw	ra,4(sp)
10010470:	df000017 	ldw	fp,0(sp)
10010474:	dec00204 	addi	sp,sp,8
10010478:	f800283a 	ret

1001047c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001047c:	defff804 	addi	sp,sp,-32
10010480:	dfc00715 	stw	ra,28(sp)
10010484:	df000615 	stw	fp,24(sp)
10010488:	dc000515 	stw	r16,20(sp)
1001048c:	df000604 	addi	fp,sp,24
10010490:	e13ffb15 	stw	r4,-20(fp)
10010494:	e17ffc15 	stw	r5,-16(fp)
10010498:	e1bffd15 	stw	r6,-12(fp)
1001049c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100104a0:	e13ffc17 	ldw	r4,-16(fp)
100104a4:	e17ffd17 	ldw	r5,-12(fp)
100104a8:	e1bffe17 	ldw	r6,-8(fp)
100104ac:	00107180 	call	10010718 <open>
100104b0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100104b4:	e0bffa17 	ldw	r2,-24(fp)
100104b8:	10002216 	blt	r2,zero,10010544 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100104bc:	04040074 	movhi	r16,4097
100104c0:	84073304 	addi	r16,r16,7372
100104c4:	e0bffa17 	ldw	r2,-24(fp)
100104c8:	1009883a 	mov	r4,r2
100104cc:	01400304 	movi	r5,12
100104d0:	0002cfc0 	call	10002cfc <__mulsi3>
100104d4:	8085883a 	add	r2,r16,r2
100104d8:	10c00017 	ldw	r3,0(r2)
100104dc:	e0bffb17 	ldw	r2,-20(fp)
100104e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100104e4:	04040074 	movhi	r16,4097
100104e8:	84073304 	addi	r16,r16,7372
100104ec:	e0bffa17 	ldw	r2,-24(fp)
100104f0:	1009883a 	mov	r4,r2
100104f4:	01400304 	movi	r5,12
100104f8:	0002cfc0 	call	10002cfc <__mulsi3>
100104fc:	8085883a 	add	r2,r16,r2
10010500:	10800104 	addi	r2,r2,4
10010504:	10c00017 	ldw	r3,0(r2)
10010508:	e0bffb17 	ldw	r2,-20(fp)
1001050c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010510:	04040074 	movhi	r16,4097
10010514:	84073304 	addi	r16,r16,7372
10010518:	e0bffa17 	ldw	r2,-24(fp)
1001051c:	1009883a 	mov	r4,r2
10010520:	01400304 	movi	r5,12
10010524:	0002cfc0 	call	10002cfc <__mulsi3>
10010528:	8085883a 	add	r2,r16,r2
1001052c:	10800204 	addi	r2,r2,8
10010530:	10c00017 	ldw	r3,0(r2)
10010534:	e0bffb17 	ldw	r2,-20(fp)
10010538:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1001053c:	e13ffa17 	ldw	r4,-24(fp)
10010540:	000f1080 	call	1000f108 <alt_release_fd>
  }
} 
10010544:	e6ffff04 	addi	sp,fp,-4
10010548:	dfc00217 	ldw	ra,8(sp)
1001054c:	df000117 	ldw	fp,4(sp)
10010550:	dc000017 	ldw	r16,0(sp)
10010554:	dec00304 	addi	sp,sp,12
10010558:	f800283a 	ret

1001055c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001055c:	defffb04 	addi	sp,sp,-20
10010560:	dfc00415 	stw	ra,16(sp)
10010564:	df000315 	stw	fp,12(sp)
10010568:	df000304 	addi	fp,sp,12
1001056c:	e13ffd15 	stw	r4,-12(fp)
10010570:	e17ffe15 	stw	r5,-8(fp)
10010574:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010578:	01040074 	movhi	r4,4097
1001057c:	21073604 	addi	r4,r4,7384
10010580:	e17ffd17 	ldw	r5,-12(fp)
10010584:	01800044 	movi	r6,1
10010588:	01c07fc4 	movi	r7,511
1001058c:	001047c0 	call	1001047c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010590:	01040074 	movhi	r4,4097
10010594:	21073304 	addi	r4,r4,7372
10010598:	e17ffe17 	ldw	r5,-8(fp)
1001059c:	000d883a 	mov	r6,zero
100105a0:	01c07fc4 	movi	r7,511
100105a4:	001047c0 	call	1001047c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100105a8:	01040074 	movhi	r4,4097
100105ac:	21073904 	addi	r4,r4,7396
100105b0:	e17fff17 	ldw	r5,-4(fp)
100105b4:	01800044 	movi	r6,1
100105b8:	01c07fc4 	movi	r7,511
100105bc:	001047c0 	call	1001047c <alt_open_fd>
}  
100105c0:	e037883a 	mov	sp,fp
100105c4:	dfc00117 	ldw	ra,4(sp)
100105c8:	df000017 	ldw	fp,0(sp)
100105cc:	dec00204 	addi	sp,sp,8
100105d0:	f800283a 	ret

100105d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100105d4:	defffe04 	addi	sp,sp,-8
100105d8:	dfc00115 	stw	ra,4(sp)
100105dc:	df000015 	stw	fp,0(sp)
100105e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100105e4:	00840074 	movhi	r2,4097
100105e8:	108bb604 	addi	r2,r2,11992
100105ec:	10800017 	ldw	r2,0(r2)
100105f0:	10000526 	beq	r2,zero,10010608 <alt_get_errno+0x34>
100105f4:	00840074 	movhi	r2,4097
100105f8:	108bb604 	addi	r2,r2,11992
100105fc:	10800017 	ldw	r2,0(r2)
10010600:	103ee83a 	callr	r2
10010604:	00000206 	br	10010610 <alt_get_errno+0x3c>
10010608:	00840074 	movhi	r2,4097
1001060c:	10928b04 	addi	r2,r2,18988
}
10010610:	e037883a 	mov	sp,fp
10010614:	dfc00117 	ldw	ra,4(sp)
10010618:	df000017 	ldw	fp,0(sp)
1001061c:	dec00204 	addi	sp,sp,8
10010620:	f800283a 	ret

10010624 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010624:	defffb04 	addi	sp,sp,-20
10010628:	dfc00415 	stw	ra,16(sp)
1001062c:	df000315 	stw	fp,12(sp)
10010630:	dc000215 	stw	r16,8(sp)
10010634:	df000304 	addi	fp,sp,12
10010638:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1001063c:	e0bffe17 	ldw	r2,-8(fp)
10010640:	10800217 	ldw	r2,8(r2)
10010644:	10d00034 	orhi	r3,r2,16384
10010648:	e0bffe17 	ldw	r2,-8(fp)
1001064c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010650:	e03ffd15 	stw	zero,-12(fp)
10010654:	00002306 	br	100106e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010658:	04040074 	movhi	r16,4097
1001065c:	84073304 	addi	r16,r16,7372
10010660:	e0bffd17 	ldw	r2,-12(fp)
10010664:	1009883a 	mov	r4,r2
10010668:	01400304 	movi	r5,12
1001066c:	0002cfc0 	call	10002cfc <__mulsi3>
10010670:	8085883a 	add	r2,r16,r2
10010674:	10c00017 	ldw	r3,0(r2)
10010678:	e0bffe17 	ldw	r2,-8(fp)
1001067c:	10800017 	ldw	r2,0(r2)
10010680:	1880151e 	bne	r3,r2,100106d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010684:	04040074 	movhi	r16,4097
10010688:	84073304 	addi	r16,r16,7372
1001068c:	e0bffd17 	ldw	r2,-12(fp)
10010690:	1009883a 	mov	r4,r2
10010694:	01400304 	movi	r5,12
10010698:	0002cfc0 	call	10002cfc <__mulsi3>
1001069c:	8085883a 	add	r2,r16,r2
100106a0:	10800204 	addi	r2,r2,8
100106a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100106a8:	10000b0e 	bge	r2,zero,100106d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100106ac:	e13ffd17 	ldw	r4,-12(fp)
100106b0:	01400304 	movi	r5,12
100106b4:	0002cfc0 	call	10002cfc <__mulsi3>
100106b8:	1007883a 	mov	r3,r2
100106bc:	00840074 	movhi	r2,4097
100106c0:	10873304 	addi	r2,r2,7372
100106c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100106c8:	e0bffe17 	ldw	r2,-8(fp)
100106cc:	18800226 	beq	r3,r2,100106d8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100106d0:	00bffcc4 	movi	r2,-13
100106d4:	00000a06 	br	10010700 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100106d8:	e0bffd17 	ldw	r2,-12(fp)
100106dc:	10800044 	addi	r2,r2,1
100106e0:	e0bffd15 	stw	r2,-12(fp)
100106e4:	00840074 	movhi	r2,4097
100106e8:	108bb504 	addi	r2,r2,11988
100106ec:	10800017 	ldw	r2,0(r2)
100106f0:	1007883a 	mov	r3,r2
100106f4:	e0bffd17 	ldw	r2,-12(fp)
100106f8:	18bfd72e 	bgeu	r3,r2,10010658 <__alt_data_end+0xf8010658>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100106fc:	0005883a 	mov	r2,zero
}
10010700:	e6ffff04 	addi	sp,fp,-4
10010704:	dfc00217 	ldw	ra,8(sp)
10010708:	df000117 	ldw	fp,4(sp)
1001070c:	dc000017 	ldw	r16,0(sp)
10010710:	dec00304 	addi	sp,sp,12
10010714:	f800283a 	ret

10010718 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010718:	defff604 	addi	sp,sp,-40
1001071c:	dfc00915 	stw	ra,36(sp)
10010720:	df000815 	stw	fp,32(sp)
10010724:	df000804 	addi	fp,sp,32
10010728:	e13ffd15 	stw	r4,-12(fp)
1001072c:	e17ffe15 	stw	r5,-8(fp)
10010730:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010734:	00bfffc4 	movi	r2,-1
10010738:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1001073c:	00bffb44 	movi	r2,-19
10010740:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010744:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010748:	e13ffd17 	ldw	r4,-12(fp)
1001074c:	01440074 	movhi	r5,4097
10010750:	294bb304 	addi	r5,r5,11980
10010754:	0010a340 	call	10010a34 <alt_find_dev>
10010758:	e0bff815 	stw	r2,-32(fp)
1001075c:	e0bff817 	ldw	r2,-32(fp)
10010760:	1000051e 	bne	r2,zero,10010778 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010764:	e13ffd17 	ldw	r4,-12(fp)
10010768:	0010ac40 	call	10010ac4 <alt_find_file>
1001076c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010770:	00800044 	movi	r2,1
10010774:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010778:	e0bff817 	ldw	r2,-32(fp)
1001077c:	10002b26 	beq	r2,zero,1001082c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010780:	e13ff817 	ldw	r4,-32(fp)
10010784:	0010bd80 	call	10010bd8 <alt_get_fd>
10010788:	e0bff915 	stw	r2,-28(fp)
1001078c:	e0bff917 	ldw	r2,-28(fp)
10010790:	1000030e 	bge	r2,zero,100107a0 <open+0x88>
    {
      status = index;
10010794:	e0bff917 	ldw	r2,-28(fp)
10010798:	e0bffa15 	stw	r2,-24(fp)
1001079c:	00002506 	br	10010834 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100107a0:	e13ff917 	ldw	r4,-28(fp)
100107a4:	01400304 	movi	r5,12
100107a8:	0002cfc0 	call	10002cfc <__mulsi3>
100107ac:	1007883a 	mov	r3,r2
100107b0:	00840074 	movhi	r2,4097
100107b4:	10873304 	addi	r2,r2,7372
100107b8:	1885883a 	add	r2,r3,r2
100107bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100107c0:	e0fffe17 	ldw	r3,-8(fp)
100107c4:	00900034 	movhi	r2,16384
100107c8:	10bfffc4 	addi	r2,r2,-1
100107cc:	1886703a 	and	r3,r3,r2
100107d0:	e0bffc17 	ldw	r2,-16(fp)
100107d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100107d8:	e0bffb17 	ldw	r2,-20(fp)
100107dc:	1000051e 	bne	r2,zero,100107f4 <open+0xdc>
100107e0:	e13ffc17 	ldw	r4,-16(fp)
100107e4:	00106240 	call	10010624 <alt_file_locked>
100107e8:	e0bffa15 	stw	r2,-24(fp)
100107ec:	e0bffa17 	ldw	r2,-24(fp)
100107f0:	10001016 	blt	r2,zero,10010834 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100107f4:	e0bff817 	ldw	r2,-32(fp)
100107f8:	10800317 	ldw	r2,12(r2)
100107fc:	10000826 	beq	r2,zero,10010820 <open+0x108>
10010800:	e0bff817 	ldw	r2,-32(fp)
10010804:	10800317 	ldw	r2,12(r2)
10010808:	e13ffc17 	ldw	r4,-16(fp)
1001080c:	e17ffd17 	ldw	r5,-12(fp)
10010810:	e1bffe17 	ldw	r6,-8(fp)
10010814:	e1ffff17 	ldw	r7,-4(fp)
10010818:	103ee83a 	callr	r2
1001081c:	00000106 	br	10010824 <open+0x10c>
10010820:	0005883a 	mov	r2,zero
10010824:	e0bffa15 	stw	r2,-24(fp)
10010828:	00000206 	br	10010834 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1001082c:	00bffb44 	movi	r2,-19
10010830:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010834:	e0bffa17 	ldw	r2,-24(fp)
10010838:	1000090e 	bge	r2,zero,10010860 <open+0x148>
  {
    alt_release_fd (index);  
1001083c:	e13ff917 	ldw	r4,-28(fp)
10010840:	000f1080 	call	1000f108 <alt_release_fd>
    ALT_ERRNO = -status;
10010844:	00105d40 	call	100105d4 <alt_get_errno>
10010848:	1007883a 	mov	r3,r2
1001084c:	e0bffa17 	ldw	r2,-24(fp)
10010850:	0085c83a 	sub	r2,zero,r2
10010854:	18800015 	stw	r2,0(r3)
    return -1;
10010858:	00bfffc4 	movi	r2,-1
1001085c:	00000106 	br	10010864 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010860:	e0bff917 	ldw	r2,-28(fp)
}
10010864:	e037883a 	mov	sp,fp
10010868:	dfc00117 	ldw	ra,4(sp)
1001086c:	df000017 	ldw	fp,0(sp)
10010870:	dec00204 	addi	sp,sp,8
10010874:	f800283a 	ret

10010878 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010878:	defffa04 	addi	sp,sp,-24
1001087c:	df000515 	stw	fp,20(sp)
10010880:	df000504 	addi	fp,sp,20
10010884:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010888:	0005303a 	rdctl	r2,status
1001088c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010890:	e0fffc17 	ldw	r3,-16(fp)
10010894:	00bfff84 	movi	r2,-2
10010898:	1884703a 	and	r2,r3,r2
1001089c:	1001703a 	wrctl	status,r2
  
  return context;
100108a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100108a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100108a8:	e0bfff17 	ldw	r2,-4(fp)
100108ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100108b0:	e0bffd17 	ldw	r2,-12(fp)
100108b4:	10800017 	ldw	r2,0(r2)
100108b8:	e0fffd17 	ldw	r3,-12(fp)
100108bc:	18c00117 	ldw	r3,4(r3)
100108c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100108c4:	e0bffd17 	ldw	r2,-12(fp)
100108c8:	10800117 	ldw	r2,4(r2)
100108cc:	e0fffd17 	ldw	r3,-12(fp)
100108d0:	18c00017 	ldw	r3,0(r3)
100108d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100108d8:	e0bffd17 	ldw	r2,-12(fp)
100108dc:	e0fffd17 	ldw	r3,-12(fp)
100108e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100108e4:	e0bffd17 	ldw	r2,-12(fp)
100108e8:	e0fffd17 	ldw	r3,-12(fp)
100108ec:	10c00015 	stw	r3,0(r2)
100108f0:	e0bffb17 	ldw	r2,-20(fp)
100108f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100108f8:	e0bffe17 	ldw	r2,-8(fp)
100108fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010900:	e037883a 	mov	sp,fp
10010904:	df000017 	ldw	fp,0(sp)
10010908:	dec00104 	addi	sp,sp,4
1001090c:	f800283a 	ret

10010910 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010910:	defffb04 	addi	sp,sp,-20
10010914:	dfc00415 	stw	ra,16(sp)
10010918:	df000315 	stw	fp,12(sp)
1001091c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010920:	d0a00e17 	ldw	r2,-32712(gp)
10010924:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010928:	d0a6e617 	ldw	r2,-25704(gp)
1001092c:	10800044 	addi	r2,r2,1
10010930:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010934:	00002e06 	br	100109f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010938:	e0bffd17 	ldw	r2,-12(fp)
1001093c:	10800017 	ldw	r2,0(r2)
10010940:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010944:	e0bffd17 	ldw	r2,-12(fp)
10010948:	10800403 	ldbu	r2,16(r2)
1001094c:	10803fcc 	andi	r2,r2,255
10010950:	10000426 	beq	r2,zero,10010964 <alt_tick+0x54>
10010954:	d0a6e617 	ldw	r2,-25704(gp)
10010958:	1000021e 	bne	r2,zero,10010964 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001095c:	e0bffd17 	ldw	r2,-12(fp)
10010960:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010964:	e0bffd17 	ldw	r2,-12(fp)
10010968:	10800217 	ldw	r2,8(r2)
1001096c:	d0e6e617 	ldw	r3,-25704(gp)
10010970:	18801d36 	bltu	r3,r2,100109e8 <alt_tick+0xd8>
10010974:	e0bffd17 	ldw	r2,-12(fp)
10010978:	10800403 	ldbu	r2,16(r2)
1001097c:	10803fcc 	andi	r2,r2,255
10010980:	1000191e 	bne	r2,zero,100109e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010984:	e0bffd17 	ldw	r2,-12(fp)
10010988:	10800317 	ldw	r2,12(r2)
1001098c:	e0fffd17 	ldw	r3,-12(fp)
10010990:	18c00517 	ldw	r3,20(r3)
10010994:	1809883a 	mov	r4,r3
10010998:	103ee83a 	callr	r2
1001099c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100109a0:	e0bfff17 	ldw	r2,-4(fp)
100109a4:	1000031e 	bne	r2,zero,100109b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100109a8:	e13ffd17 	ldw	r4,-12(fp)
100109ac:	00108780 	call	10010878 <alt_alarm_stop>
100109b0:	00000d06 	br	100109e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100109b4:	e0bffd17 	ldw	r2,-12(fp)
100109b8:	10c00217 	ldw	r3,8(r2)
100109bc:	e0bfff17 	ldw	r2,-4(fp)
100109c0:	1887883a 	add	r3,r3,r2
100109c4:	e0bffd17 	ldw	r2,-12(fp)
100109c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100109cc:	e0bffd17 	ldw	r2,-12(fp)
100109d0:	10c00217 	ldw	r3,8(r2)
100109d4:	d0a6e617 	ldw	r2,-25704(gp)
100109d8:	1880032e 	bgeu	r3,r2,100109e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100109dc:	e0bffd17 	ldw	r2,-12(fp)
100109e0:	00c00044 	movi	r3,1
100109e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100109e8:	e0bffe17 	ldw	r2,-8(fp)
100109ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100109f0:	e0fffd17 	ldw	r3,-12(fp)
100109f4:	d0a00e04 	addi	r2,gp,-32712
100109f8:	18bfcf1e 	bne	r3,r2,10010938 <__alt_data_end+0xf8010938>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100109fc:	0001883a 	nop
}
10010a00:	e037883a 	mov	sp,fp
10010a04:	dfc00117 	ldw	ra,4(sp)
10010a08:	df000017 	ldw	fp,0(sp)
10010a0c:	dec00204 	addi	sp,sp,8
10010a10:	f800283a 	ret

10010a14 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010a14:	deffff04 	addi	sp,sp,-4
10010a18:	df000015 	stw	fp,0(sp)
10010a1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010a20:	000170fa 	wrctl	ienable,zero
}
10010a24:	e037883a 	mov	sp,fp
10010a28:	df000017 	ldw	fp,0(sp)
10010a2c:	dec00104 	addi	sp,sp,4
10010a30:	f800283a 	ret

10010a34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010a34:	defffa04 	addi	sp,sp,-24
10010a38:	dfc00515 	stw	ra,20(sp)
10010a3c:	df000415 	stw	fp,16(sp)
10010a40:	df000404 	addi	fp,sp,16
10010a44:	e13ffe15 	stw	r4,-8(fp)
10010a48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010a4c:	e0bfff17 	ldw	r2,-4(fp)
10010a50:	10800017 	ldw	r2,0(r2)
10010a54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010a58:	e13ffe17 	ldw	r4,-8(fp)
10010a5c:	000a8d40 	call	1000a8d4 <strlen>
10010a60:	10800044 	addi	r2,r2,1
10010a64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010a68:	00000d06 	br	10010aa0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010a6c:	e0bffc17 	ldw	r2,-16(fp)
10010a70:	10c00217 	ldw	r3,8(r2)
10010a74:	e0bffd17 	ldw	r2,-12(fp)
10010a78:	1809883a 	mov	r4,r3
10010a7c:	e17ffe17 	ldw	r5,-8(fp)
10010a80:	100d883a 	mov	r6,r2
10010a84:	0010d940 	call	10010d94 <memcmp>
10010a88:	1000021e 	bne	r2,zero,10010a94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010a8c:	e0bffc17 	ldw	r2,-16(fp)
10010a90:	00000706 	br	10010ab0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010a94:	e0bffc17 	ldw	r2,-16(fp)
10010a98:	10800017 	ldw	r2,0(r2)
10010a9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010aa0:	e0fffc17 	ldw	r3,-16(fp)
10010aa4:	e0bfff17 	ldw	r2,-4(fp)
10010aa8:	18bff01e 	bne	r3,r2,10010a6c <__alt_data_end+0xf8010a6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010aac:	0005883a 	mov	r2,zero
}
10010ab0:	e037883a 	mov	sp,fp
10010ab4:	dfc00117 	ldw	ra,4(sp)
10010ab8:	df000017 	ldw	fp,0(sp)
10010abc:	dec00204 	addi	sp,sp,8
10010ac0:	f800283a 	ret

10010ac4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010ac4:	defffb04 	addi	sp,sp,-20
10010ac8:	dfc00415 	stw	ra,16(sp)
10010acc:	df000315 	stw	fp,12(sp)
10010ad0:	df000304 	addi	fp,sp,12
10010ad4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010ad8:	00840074 	movhi	r2,4097
10010adc:	108bb104 	addi	r2,r2,11972
10010ae0:	10800017 	ldw	r2,0(r2)
10010ae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010ae8:	00003106 	br	10010bb0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010aec:	e0bffd17 	ldw	r2,-12(fp)
10010af0:	10800217 	ldw	r2,8(r2)
10010af4:	1009883a 	mov	r4,r2
10010af8:	000a8d40 	call	1000a8d4 <strlen>
10010afc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010b00:	e0bffd17 	ldw	r2,-12(fp)
10010b04:	10c00217 	ldw	r3,8(r2)
10010b08:	e0bffe17 	ldw	r2,-8(fp)
10010b0c:	10bfffc4 	addi	r2,r2,-1
10010b10:	1885883a 	add	r2,r3,r2
10010b14:	10800003 	ldbu	r2,0(r2)
10010b18:	10803fcc 	andi	r2,r2,255
10010b1c:	1080201c 	xori	r2,r2,128
10010b20:	10bfe004 	addi	r2,r2,-128
10010b24:	10800bd8 	cmpnei	r2,r2,47
10010b28:	1000031e 	bne	r2,zero,10010b38 <alt_find_file+0x74>
    {
      len -= 1;
10010b2c:	e0bffe17 	ldw	r2,-8(fp)
10010b30:	10bfffc4 	addi	r2,r2,-1
10010b34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010b38:	e0bffe17 	ldw	r2,-8(fp)
10010b3c:	e0ffff17 	ldw	r3,-4(fp)
10010b40:	1885883a 	add	r2,r3,r2
10010b44:	10800003 	ldbu	r2,0(r2)
10010b48:	10803fcc 	andi	r2,r2,255
10010b4c:	1080201c 	xori	r2,r2,128
10010b50:	10bfe004 	addi	r2,r2,-128
10010b54:	10800be0 	cmpeqi	r2,r2,47
10010b58:	1000081e 	bne	r2,zero,10010b7c <alt_find_file+0xb8>
10010b5c:	e0bffe17 	ldw	r2,-8(fp)
10010b60:	e0ffff17 	ldw	r3,-4(fp)
10010b64:	1885883a 	add	r2,r3,r2
10010b68:	10800003 	ldbu	r2,0(r2)
10010b6c:	10803fcc 	andi	r2,r2,255
10010b70:	1080201c 	xori	r2,r2,128
10010b74:	10bfe004 	addi	r2,r2,-128
10010b78:	10000a1e 	bne	r2,zero,10010ba4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010b7c:	e0bffd17 	ldw	r2,-12(fp)
10010b80:	10c00217 	ldw	r3,8(r2)
10010b84:	e0bffe17 	ldw	r2,-8(fp)
10010b88:	1809883a 	mov	r4,r3
10010b8c:	e17fff17 	ldw	r5,-4(fp)
10010b90:	100d883a 	mov	r6,r2
10010b94:	0010d940 	call	10010d94 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010b98:	1000021e 	bne	r2,zero,10010ba4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010b9c:	e0bffd17 	ldw	r2,-12(fp)
10010ba0:	00000806 	br	10010bc4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010ba4:	e0bffd17 	ldw	r2,-12(fp)
10010ba8:	10800017 	ldw	r2,0(r2)
10010bac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010bb0:	e0fffd17 	ldw	r3,-12(fp)
10010bb4:	00840074 	movhi	r2,4097
10010bb8:	108bb104 	addi	r2,r2,11972
10010bbc:	18bfcb1e 	bne	r3,r2,10010aec <__alt_data_end+0xf8010aec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010bc0:	0005883a 	mov	r2,zero
}
10010bc4:	e037883a 	mov	sp,fp
10010bc8:	dfc00117 	ldw	ra,4(sp)
10010bcc:	df000017 	ldw	fp,0(sp)
10010bd0:	dec00204 	addi	sp,sp,8
10010bd4:	f800283a 	ret

10010bd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010bd8:	defffa04 	addi	sp,sp,-24
10010bdc:	dfc00515 	stw	ra,20(sp)
10010be0:	df000415 	stw	fp,16(sp)
10010be4:	dc000315 	stw	r16,12(sp)
10010be8:	df000404 	addi	fp,sp,16
10010bec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010bf0:	00bffa04 	movi	r2,-24
10010bf4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010bf8:	e03ffc15 	stw	zero,-16(fp)
10010bfc:	00002106 	br	10010c84 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010c00:	04040074 	movhi	r16,4097
10010c04:	84073304 	addi	r16,r16,7372
10010c08:	e0bffc17 	ldw	r2,-16(fp)
10010c0c:	1009883a 	mov	r4,r2
10010c10:	01400304 	movi	r5,12
10010c14:	0002cfc0 	call	10002cfc <__mulsi3>
10010c18:	8085883a 	add	r2,r16,r2
10010c1c:	10800017 	ldw	r2,0(r2)
10010c20:	1000151e 	bne	r2,zero,10010c78 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010c24:	04040074 	movhi	r16,4097
10010c28:	84073304 	addi	r16,r16,7372
10010c2c:	e0bffc17 	ldw	r2,-16(fp)
10010c30:	1009883a 	mov	r4,r2
10010c34:	01400304 	movi	r5,12
10010c38:	0002cfc0 	call	10002cfc <__mulsi3>
10010c3c:	8085883a 	add	r2,r16,r2
10010c40:	e0fffe17 	ldw	r3,-8(fp)
10010c44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010c48:	00840074 	movhi	r2,4097
10010c4c:	108bb504 	addi	r2,r2,11988
10010c50:	10c00017 	ldw	r3,0(r2)
10010c54:	e0bffc17 	ldw	r2,-16(fp)
10010c58:	1880040e 	bge	r3,r2,10010c6c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010c5c:	00840074 	movhi	r2,4097
10010c60:	108bb504 	addi	r2,r2,11988
10010c64:	e0fffc17 	ldw	r3,-16(fp)
10010c68:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010c6c:	e0bffc17 	ldw	r2,-16(fp)
10010c70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010c74:	00000606 	br	10010c90 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010c78:	e0bffc17 	ldw	r2,-16(fp)
10010c7c:	10800044 	addi	r2,r2,1
10010c80:	e0bffc15 	stw	r2,-16(fp)
10010c84:	e0bffc17 	ldw	r2,-16(fp)
10010c88:	10800810 	cmplti	r2,r2,32
10010c8c:	103fdc1e 	bne	r2,zero,10010c00 <__alt_data_end+0xf8010c00>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010c90:	e0bffd17 	ldw	r2,-12(fp)
}
10010c94:	e6ffff04 	addi	sp,fp,-4
10010c98:	dfc00217 	ldw	ra,8(sp)
10010c9c:	df000117 	ldw	fp,4(sp)
10010ca0:	dc000017 	ldw	r16,0(sp)
10010ca4:	dec00304 	addi	sp,sp,12
10010ca8:	f800283a 	ret

10010cac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10010cac:	defffe04 	addi	sp,sp,-8
10010cb0:	df000115 	stw	fp,4(sp)
10010cb4:	df000104 	addi	fp,sp,4
10010cb8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10010cbc:	e0bfff17 	ldw	r2,-4(fp)
10010cc0:	10bffe84 	addi	r2,r2,-6
10010cc4:	10c00428 	cmpgeui	r3,r2,16
10010cc8:	18001a1e 	bne	r3,zero,10010d34 <alt_exception_cause_generated_bad_addr+0x88>
10010ccc:	100690ba 	slli	r3,r2,2
10010cd0:	00840074 	movhi	r2,4097
10010cd4:	10833904 	addi	r2,r2,3300
10010cd8:	1885883a 	add	r2,r3,r2
10010cdc:	10800017 	ldw	r2,0(r2)
10010ce0:	1000683a 	jmp	r2
10010ce4:	10010d24 	muli	zero,r2,1076
10010ce8:	10010d24 	muli	zero,r2,1076
10010cec:	10010d34 	orhi	zero,r2,1076
10010cf0:	10010d34 	orhi	zero,r2,1076
10010cf4:	10010d34 	orhi	zero,r2,1076
10010cf8:	10010d24 	muli	zero,r2,1076
10010cfc:	10010d2c 	andhi	zero,r2,1076
10010d00:	10010d34 	orhi	zero,r2,1076
10010d04:	10010d24 	muli	zero,r2,1076
10010d08:	10010d24 	muli	zero,r2,1076
10010d0c:	10010d34 	orhi	zero,r2,1076
10010d10:	10010d24 	muli	zero,r2,1076
10010d14:	10010d2c 	andhi	zero,r2,1076
10010d18:	10010d34 	orhi	zero,r2,1076
10010d1c:	10010d34 	orhi	zero,r2,1076
10010d20:	10010d24 	muli	zero,r2,1076
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010d24:	00800044 	movi	r2,1
10010d28:	00000306 	br	10010d38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010d2c:	0005883a 	mov	r2,zero
10010d30:	00000106 	br	10010d38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010d34:	0005883a 	mov	r2,zero
  }
}
10010d38:	e037883a 	mov	sp,fp
10010d3c:	df000017 	ldw	fp,0(sp)
10010d40:	dec00104 	addi	sp,sp,4
10010d44:	f800283a 	ret

10010d48 <atexit>:
10010d48:	200b883a 	mov	r5,r4
10010d4c:	000d883a 	mov	r6,zero
10010d50:	0009883a 	mov	r4,zero
10010d54:	000f883a 	mov	r7,zero
10010d58:	0010e101 	jmpi	10010e10 <__register_exitproc>

10010d5c <exit>:
10010d5c:	defffe04 	addi	sp,sp,-8
10010d60:	000b883a 	mov	r5,zero
10010d64:	dc000015 	stw	r16,0(sp)
10010d68:	dfc00115 	stw	ra,4(sp)
10010d6c:	2021883a 	mov	r16,r4
10010d70:	0010f240 	call	10010f24 <__call_exitprocs>
10010d74:	00840074 	movhi	r2,4097
10010d78:	108bab04 	addi	r2,r2,11948
10010d7c:	11000017 	ldw	r4,0(r2)
10010d80:	20800f17 	ldw	r2,60(r4)
10010d84:	10000126 	beq	r2,zero,10010d8c <exit+0x30>
10010d88:	103ee83a 	callr	r2
10010d8c:	8009883a 	mov	r4,r16
10010d90:	00110b80 	call	100110b8 <_exit>

10010d94 <memcmp>:
10010d94:	01c000c4 	movi	r7,3
10010d98:	3980192e 	bgeu	r7,r6,10010e00 <memcmp+0x6c>
10010d9c:	2144b03a 	or	r2,r4,r5
10010da0:	11c4703a 	and	r2,r2,r7
10010da4:	10000f26 	beq	r2,zero,10010de4 <memcmp+0x50>
10010da8:	20800003 	ldbu	r2,0(r4)
10010dac:	28c00003 	ldbu	r3,0(r5)
10010db0:	10c0151e 	bne	r2,r3,10010e08 <memcmp+0x74>
10010db4:	31bfff84 	addi	r6,r6,-2
10010db8:	01ffffc4 	movi	r7,-1
10010dbc:	00000406 	br	10010dd0 <memcmp+0x3c>
10010dc0:	20800003 	ldbu	r2,0(r4)
10010dc4:	28c00003 	ldbu	r3,0(r5)
10010dc8:	31bfffc4 	addi	r6,r6,-1
10010dcc:	10c00e1e 	bne	r2,r3,10010e08 <memcmp+0x74>
10010dd0:	21000044 	addi	r4,r4,1
10010dd4:	29400044 	addi	r5,r5,1
10010dd8:	31fff91e 	bne	r6,r7,10010dc0 <__alt_data_end+0xf8010dc0>
10010ddc:	0005883a 	mov	r2,zero
10010de0:	f800283a 	ret
10010de4:	20c00017 	ldw	r3,0(r4)
10010de8:	28800017 	ldw	r2,0(r5)
10010dec:	1880041e 	bne	r3,r2,10010e00 <memcmp+0x6c>
10010df0:	31bfff04 	addi	r6,r6,-4
10010df4:	21000104 	addi	r4,r4,4
10010df8:	29400104 	addi	r5,r5,4
10010dfc:	39bff936 	bltu	r7,r6,10010de4 <__alt_data_end+0xf8010de4>
10010e00:	303fe91e 	bne	r6,zero,10010da8 <__alt_data_end+0xf8010da8>
10010e04:	003ff506 	br	10010ddc <__alt_data_end+0xf8010ddc>
10010e08:	10c5c83a 	sub	r2,r2,r3
10010e0c:	f800283a 	ret

10010e10 <__register_exitproc>:
10010e10:	00840074 	movhi	r2,4097
10010e14:	defffa04 	addi	sp,sp,-24
10010e18:	108bab04 	addi	r2,r2,11948
10010e1c:	dc000315 	stw	r16,12(sp)
10010e20:	14000017 	ldw	r16,0(r2)
10010e24:	dc400415 	stw	r17,16(sp)
10010e28:	dfc00515 	stw	ra,20(sp)
10010e2c:	80805217 	ldw	r2,328(r16)
10010e30:	2023883a 	mov	r17,r4
10010e34:	10003626 	beq	r2,zero,10010f10 <__register_exitproc+0x100>
10010e38:	10c00117 	ldw	r3,4(r2)
10010e3c:	010007c4 	movi	r4,31
10010e40:	20c00e16 	blt	r4,r3,10010e7c <__register_exitproc+0x6c>
10010e44:	1a400044 	addi	r9,r3,1
10010e48:	8800211e 	bne	r17,zero,10010ed0 <__register_exitproc+0xc0>
10010e4c:	18c00084 	addi	r3,r3,2
10010e50:	18c7883a 	add	r3,r3,r3
10010e54:	18c7883a 	add	r3,r3,r3
10010e58:	12400115 	stw	r9,4(r2)
10010e5c:	10c7883a 	add	r3,r2,r3
10010e60:	19400015 	stw	r5,0(r3)
10010e64:	0005883a 	mov	r2,zero
10010e68:	dfc00517 	ldw	ra,20(sp)
10010e6c:	dc400417 	ldw	r17,16(sp)
10010e70:	dc000317 	ldw	r16,12(sp)
10010e74:	dec00604 	addi	sp,sp,24
10010e78:	f800283a 	ret
10010e7c:	00800034 	movhi	r2,0
10010e80:	10800004 	addi	r2,r2,0
10010e84:	10002526 	beq	r2,zero,10010f1c <__register_exitproc+0x10c>
10010e88:	01006404 	movi	r4,400
10010e8c:	d9400015 	stw	r5,0(sp)
10010e90:	d9800115 	stw	r6,4(sp)
10010e94:	d9c00215 	stw	r7,8(sp)
10010e98:	00000000 	call	10000000 <__reset>
10010e9c:	d9400017 	ldw	r5,0(sp)
10010ea0:	d9800117 	ldw	r6,4(sp)
10010ea4:	d9c00217 	ldw	r7,8(sp)
10010ea8:	10001c26 	beq	r2,zero,10010f1c <__register_exitproc+0x10c>
10010eac:	80c05217 	ldw	r3,328(r16)
10010eb0:	10000115 	stw	zero,4(r2)
10010eb4:	02400044 	movi	r9,1
10010eb8:	10c00015 	stw	r3,0(r2)
10010ebc:	80805215 	stw	r2,328(r16)
10010ec0:	10006215 	stw	zero,392(r2)
10010ec4:	10006315 	stw	zero,396(r2)
10010ec8:	0007883a 	mov	r3,zero
10010ecc:	883fdf26 	beq	r17,zero,10010e4c <__alt_data_end+0xf8010e4c>
10010ed0:	18d1883a 	add	r8,r3,r3
10010ed4:	4211883a 	add	r8,r8,r8
10010ed8:	1211883a 	add	r8,r2,r8
10010edc:	41802215 	stw	r6,136(r8)
10010ee0:	01000044 	movi	r4,1
10010ee4:	11806217 	ldw	r6,392(r2)
10010ee8:	20c8983a 	sll	r4,r4,r3
10010eec:	310cb03a 	or	r6,r6,r4
10010ef0:	11806215 	stw	r6,392(r2)
10010ef4:	41c04215 	stw	r7,264(r8)
10010ef8:	01800084 	movi	r6,2
10010efc:	89bfd31e 	bne	r17,r6,10010e4c <__alt_data_end+0xf8010e4c>
10010f00:	11806317 	ldw	r6,396(r2)
10010f04:	3108b03a 	or	r4,r6,r4
10010f08:	11006315 	stw	r4,396(r2)
10010f0c:	003fcf06 	br	10010e4c <__alt_data_end+0xf8010e4c>
10010f10:	80805304 	addi	r2,r16,332
10010f14:	80805215 	stw	r2,328(r16)
10010f18:	003fc706 	br	10010e38 <__alt_data_end+0xf8010e38>
10010f1c:	00bfffc4 	movi	r2,-1
10010f20:	003fd106 	br	10010e68 <__alt_data_end+0xf8010e68>

10010f24 <__call_exitprocs>:
10010f24:	00840074 	movhi	r2,4097
10010f28:	108bab04 	addi	r2,r2,11948
10010f2c:	10800017 	ldw	r2,0(r2)
10010f30:	defff404 	addi	sp,sp,-48
10010f34:	dd800815 	stw	r22,32(sp)
10010f38:	d8800015 	stw	r2,0(sp)
10010f3c:	10805204 	addi	r2,r2,328
10010f40:	dd000615 	stw	r20,24(sp)
10010f44:	dc800415 	stw	r18,16(sp)
10010f48:	dfc00b15 	stw	ra,44(sp)
10010f4c:	df000a15 	stw	fp,40(sp)
10010f50:	ddc00915 	stw	r23,36(sp)
10010f54:	dd400715 	stw	r21,28(sp)
10010f58:	dcc00515 	stw	r19,20(sp)
10010f5c:	dc400315 	stw	r17,12(sp)
10010f60:	dc000215 	stw	r16,8(sp)
10010f64:	2025883a 	mov	r18,r4
10010f68:	2829883a 	mov	r20,r5
10010f6c:	d8800115 	stw	r2,4(sp)
10010f70:	05bfffc4 	movi	r22,-1
10010f74:	d8800017 	ldw	r2,0(sp)
10010f78:	14c05217 	ldw	r19,328(r2)
10010f7c:	98001d26 	beq	r19,zero,10010ff4 <__call_exitprocs+0xd0>
10010f80:	dd400117 	ldw	r21,4(sp)
10010f84:	98800117 	ldw	r2,4(r19)
10010f88:	173fffc4 	addi	fp,r2,-1
10010f8c:	e0000d16 	blt	fp,zero,10010fc4 <__call_exitprocs+0xa0>
10010f90:	14000044 	addi	r16,r2,1
10010f94:	8421883a 	add	r16,r16,r16
10010f98:	8421883a 	add	r16,r16,r16
10010f9c:	84402004 	addi	r17,r16,128
10010fa0:	9c63883a 	add	r17,r19,r17
10010fa4:	9c21883a 	add	r16,r19,r16
10010fa8:	a0001e26 	beq	r20,zero,10011024 <__call_exitprocs+0x100>
10010fac:	80804017 	ldw	r2,256(r16)
10010fb0:	15001c26 	beq	r2,r20,10011024 <__call_exitprocs+0x100>
10010fb4:	e73fffc4 	addi	fp,fp,-1
10010fb8:	843fff04 	addi	r16,r16,-4
10010fbc:	8c7fff04 	addi	r17,r17,-4
10010fc0:	e5bff91e 	bne	fp,r22,10010fa8 <__alt_data_end+0xf8010fa8>
10010fc4:	00800034 	movhi	r2,0
10010fc8:	10800004 	addi	r2,r2,0
10010fcc:	10000926 	beq	r2,zero,10010ff4 <__call_exitprocs+0xd0>
10010fd0:	98800117 	ldw	r2,4(r19)
10010fd4:	1000311e 	bne	r2,zero,1001109c <__call_exitprocs+0x178>
10010fd8:	98800017 	ldw	r2,0(r19)
10010fdc:	10003426 	beq	r2,zero,100110b0 <__call_exitprocs+0x18c>
10010fe0:	9809883a 	mov	r4,r19
10010fe4:	a8800015 	stw	r2,0(r21)
10010fe8:	00000000 	call	10000000 <__reset>
10010fec:	acc00017 	ldw	r19,0(r21)
10010ff0:	983fe41e 	bne	r19,zero,10010f84 <__alt_data_end+0xf8010f84>
10010ff4:	dfc00b17 	ldw	ra,44(sp)
10010ff8:	df000a17 	ldw	fp,40(sp)
10010ffc:	ddc00917 	ldw	r23,36(sp)
10011000:	dd800817 	ldw	r22,32(sp)
10011004:	dd400717 	ldw	r21,28(sp)
10011008:	dd000617 	ldw	r20,24(sp)
1001100c:	dcc00517 	ldw	r19,20(sp)
10011010:	dc800417 	ldw	r18,16(sp)
10011014:	dc400317 	ldw	r17,12(sp)
10011018:	dc000217 	ldw	r16,8(sp)
1001101c:	dec00c04 	addi	sp,sp,48
10011020:	f800283a 	ret
10011024:	98800117 	ldw	r2,4(r19)
10011028:	80c00017 	ldw	r3,0(r16)
1001102c:	10bfffc4 	addi	r2,r2,-1
10011030:	17001526 	beq	r2,fp,10011088 <__call_exitprocs+0x164>
10011034:	80000015 	stw	zero,0(r16)
10011038:	183fde26 	beq	r3,zero,10010fb4 <__alt_data_end+0xf8010fb4>
1001103c:	00800044 	movi	r2,1
10011040:	1708983a 	sll	r4,r2,fp
10011044:	98806217 	ldw	r2,392(r19)
10011048:	9dc00117 	ldw	r23,4(r19)
1001104c:	2084703a 	and	r2,r4,r2
10011050:	1000061e 	bne	r2,zero,1001106c <__call_exitprocs+0x148>
10011054:	183ee83a 	callr	r3
10011058:	98800117 	ldw	r2,4(r19)
1001105c:	15ffc51e 	bne	r2,r23,10010f74 <__alt_data_end+0xf8010f74>
10011060:	a8800017 	ldw	r2,0(r21)
10011064:	14ffd326 	beq	r2,r19,10010fb4 <__alt_data_end+0xf8010fb4>
10011068:	003fc206 	br	10010f74 <__alt_data_end+0xf8010f74>
1001106c:	98806317 	ldw	r2,396(r19)
10011070:	2084703a 	and	r2,r4,r2
10011074:	1000061e 	bne	r2,zero,10011090 <__call_exitprocs+0x16c>
10011078:	89400017 	ldw	r5,0(r17)
1001107c:	9009883a 	mov	r4,r18
10011080:	183ee83a 	callr	r3
10011084:	003ff406 	br	10011058 <__alt_data_end+0xf8011058>
10011088:	9f000115 	stw	fp,4(r19)
1001108c:	003fea06 	br	10011038 <__alt_data_end+0xf8011038>
10011090:	89000017 	ldw	r4,0(r17)
10011094:	183ee83a 	callr	r3
10011098:	003fef06 	br	10011058 <__alt_data_end+0xf8011058>
1001109c:	98800017 	ldw	r2,0(r19)
100110a0:	982b883a 	mov	r21,r19
100110a4:	1027883a 	mov	r19,r2
100110a8:	983fb61e 	bne	r19,zero,10010f84 <__alt_data_end+0xf8010f84>
100110ac:	003fd106 	br	10010ff4 <__alt_data_end+0xf8010ff4>
100110b0:	0005883a 	mov	r2,zero
100110b4:	003ffa06 	br	100110a0 <__alt_data_end+0xf80110a0>

100110b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100110b8:	defffd04 	addi	sp,sp,-12
100110bc:	df000215 	stw	fp,8(sp)
100110c0:	df000204 	addi	fp,sp,8
100110c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100110c8:	0001883a 	nop
100110cc:	e0bfff17 	ldw	r2,-4(fp)
100110d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100110d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100110d8:	10000226 	beq	r2,zero,100110e4 <_exit+0x2c>
    ALT_SIM_FAIL();
100110dc:	002af070 	cmpltui	zero,zero,43969
100110e0:	00000106 	br	100110e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100110e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100110e8:	003fff06 	br	100110e8 <__alt_data_end+0xf80110e8>
