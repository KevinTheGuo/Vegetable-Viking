
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000f9d4 memsz 0x0000f9d4 flags r-x
    LOAD off    0x000109f4 vaddr 0x1000f9f4 paddr 0x100114e0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012fcc vaddr 0x10012fcc paddr 0x10012fcc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f438  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  1000f664  1000f664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1000f9f4  100114e0  000109f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10012fcc  10012fcc  00012fcc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000124e0  2**0
                  CONTENTS
  7 .sdram        00000000  1001312c  1001312c  000124e0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000124e0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cd0  00000000  00000000  00012508  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000233cd  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008de2  00000000  00000000  000365a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad47  00000000  00000000  0003f387  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002014  00000000  00000000  0004a0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003645  00000000  00000000  0004c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  0004f729  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00066478  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  00066488  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006a957  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006a95a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006a966  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006a967  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006a968  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006a96c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006a970  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006a974  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006a97f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006a98a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006a995  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006a9a0  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0006a9ba  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008ff29  00000000  00000000  0006ee01  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1000f664 l    d  .rodata	00000000 .rodata
1000f9f4 l    d  .rwdata	00000000 .rwdata
10012fcc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001312c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000f73a l     O .rodata	00000010 zeroes.4181
1000f74a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100029ec l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004594 l     F .text	00000008 __fp_lock
1000459c l     F .text	00000008 __fp_unlock
100045b0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1000f9f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1000fe38 l     O .rwdata	00000020 lc_ctype_charset
1000fe18 l     O .rwdata	00000020 lc_message_charset
1000fe58 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000f77c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007ae0 l     F .text	000000fc __sprint_r.part.0
1000f8b0 l     O .rodata	00000010 blanks.4125
1000f8a0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000a5e4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000cf0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d034 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d060 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d168 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000d264 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000d348 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000d52c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100114d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000d7b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000d900 l     F .text	00000038 alt_dev_reg
10010440 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000dbdc l     F .text	00000204 altera_avalon_jtag_uart_irq
1000dde0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000e55c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000e9f4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000eb4c l     F .text	00000050 alt_get_errno
1000eb9c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10013000 g     O .bss	00000004 alt_instruction_exception_handler
10007120 g     F .text	00000074 _mprec_log10
1000720c g     F .text	0000008c __any_on
1000950c g     F .text	00000054 _isatty_r
1000f788 g     O .rodata	00000028 __mprec_tinytens
1000d474 g     F .text	00000078 alt_main
10000638 g     F .text	000000b8 _puts_r
1001302c g     O .bss	00000100 alt_irq
10009560 g     F .text	0000005c _lseek_r
100114e0 g       *ABS*	00000000 __flash_rwdata_start
1000b92c g     F .text	00000084 .hidden __eqdf2
1001312c g       *ABS*	00000000 __alt_heap_start
100005fc g     F .text	0000003c printf
10009788 g     F .text	0000009c _wcrtomb_r
100079d8 g     F .text	0000005c __sseek
100048f8 g     F .text	00000010 __sinit
10009618 g     F .text	00000154 __swbuf_r
10005370 g     F .text	0000007c _setlocale_r
10004750 g     F .text	00000078 __sfmoreglue
1000d50c g     F .text	00000020 __malloc_unlock
10005fd0 g     F .text	0000015c memmove
100048e0 g     F .text	00000018 _cleanup
10006250 g     F .text	000000a8 _Balloc
1000b9b0 g     F .text	000000e0 .hidden __gtdf2
1000ef8c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100094b4 g     F .text	00000058 _fstat_r
10012fe4 g     O .bss	00000004 errno
10007954 g     F .text	00000008 __seofread
10012fec g     O .bss	00000004 alt_argv
100194a0 g       *ABS*	00000000 _gp
100102c0 g     O .rwdata	00000180 alt_fd_list
1000efac g     F .text	00000090 alt_find_dev
10005e98 g     F .text	00000138 memcpy
100045a4 g     F .text	0000000c _cleanup_r
1000cd34 g     F .text	000000d0 .hidden __floatsidf
1000ead4 g     F .text	00000078 alt_io_redirect
1000ba90 g     F .text	000000e0 .hidden __ltdf2
1000f664 g       *ABS*	00000000 __DTOR_END__
100006f0 g     F .text	00000014 puts
1000f224 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10007838 g     F .text	00000074 __fpclassifyd
1000707c g     F .text	000000a4 __ratio
10009018 g     F .text	00000024 __vfiprintf_internal
1000dfdc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100005d0 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000a700 g     F .text	00000008 .hidden __udivsi3
1000d1b8 g     F .text	000000ac isatty
1000f7d8 g     O .rodata	000000c8 __mprec_tens
100053ec g     F .text	0000000c __locale_charset
10012fe0 g     O .bss	00000004 __malloc_top_pad
100114a8 g     O .rwdata	00000004 __mb_cur_max
1000541c g     F .text	0000000c _localeconv_r
10006678 g     F .text	0000003c __i2b
10004d5c g     F .text	000004a4 __sfvwrite_r
100078ac g     F .text	00000054 _sbrk_r
100095bc g     F .text	0000005c _read_r
100114c8 g     O .rwdata	00000004 alt_max_fd
100091c4 g     F .text	00000100 _fclose_r
10004564 g     F .text	00000030 fflush
10012fdc g     O .bss	00000004 __malloc_max_sbrked_mem
1000a710 g     F .text	0000089c .hidden __adddf3
10006e24 g     F .text	0000011c __b2d
10009fc8 g     F .text	0000061c .hidden __umoddi3
1000d398 g     F .text	000000dc lseek
100114a0 g     O .rwdata	00000004 _global_impure_ptr
10007298 g     F .text	000005a0 _realloc_r
1001312c g       *ABS*	00000000 __bss_end
1000e904 g     F .text	000000f0 alt_iic_isr_register
1000ee88 g     F .text	00000104 alt_tick
10009988 g     F .text	00000640 .hidden __udivdi3
100092d8 g     F .text	00000184 _fputwc_r
1000f7b0 g     O .rodata	00000028 __mprec_bigtens
1000645c g     F .text	00000104 __s2b
1000ce04 g     F .text	000000a4 .hidden __floatunsidf
10006bcc g     F .text	00000060 __mcmp
10004918 g     F .text	00000018 __fp_lock_all
1000e8b8 g     F .text	0000004c alt_ic_irq_enabled
1000edf0 g     F .text	00000098 alt_alarm_stop
10012ff4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10010298 g     O .rwdata	00000028 alt_dev_null
1000e540 g     F .text	0000001c alt_dcache_flush_all
10006560 g     F .text	00000068 __hi0bits
1000ccac g     F .text	00000088 .hidden __fixdfsi
100114e0 g       *ABS*	00000000 __ram_rwdata_end
100114c0 g     O .rwdata	00000008 alt_dev_list
1000d800 g     F .text	00000100 write
1000f9f4 g       *ABS*	00000000 __ram_rodata_end
1000d0b0 g     F .text	000000b8 fstat
1000ba90 g     F .text	000000e0 .hidden __ledf2
10006944 g     F .text	00000140 __pow5mult
10007bf4 g     F .text	00001424 ___vfiprintf_internal_r
10012fd4 g     O .bss	00000004 __nlocale_changed
1000a708 g     F .text	00000008 .hidden __umodsi3
1001312c g       *ABS*	00000000 end
1000db18 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1000f664 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000cea8 g     F .text	00000064 .hidden __clzsi2
1000e1e8 g     F .text	00000218 altera_avalon_jtag_uart_write
10004908 g     F .text	00000004 __sfp_lock_acquire
10005db0 g     F .text	000000e8 memchr
1000079c g     F .text	000020fc ___vfprintf_internal_r
10004a6c g     F .text	000002f0 _free_r
100053f8 g     F .text	00000010 __locale_mb_cur_max
1000f49c g     F .text	00000194 __call_exitprocs
10012fd0 g     O .bss	00000004 __mlocale_changed
100114ac g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10012ff8 g     O .bss	00000004 _alt_tick_rate
10006a84 g     F .text	00000148 __lshift
10012ffc g     O .bss	00000004 _alt_nticks
1000d57c g     F .text	00000104 read
1000d96c g     F .text	00000048 alt_sys_init
1000f388 g     F .text	00000114 __register_exitproc
100066b4 g     F .text	00000290 __multiply
1000de88 g     F .text	00000068 altera_avalon_jtag_uart_close
100005a8 g     F .text	00000028 .hidden __mulsi3
1000f9f4 g       *ABS*	00000000 __ram_rwdata_start
1000f664 g       *ABS*	00000000 __ram_rodata_start
10013004 g     O .bss	00000028 __malloc_current_mallinfo
10006f40 g     F .text	0000013c __d2b
1000d9b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f150 g     F .text	000000d4 alt_get_fd
10009098 g     F .text	00000054 _close_r
1000f30c g     F .text	0000007c memcmp
1000da74 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001312c g       *ABS*	00000000 __alt_stack_base
1000dac4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100028bc g     F .text	00000130 __swsetup_r
1000afac g     F .text	00000980 .hidden __divdf3
100047c8 g     F .text	00000118 __sfp
10007194 g     F .text	00000078 __copybits
1000fe90 g     O .rwdata	00000408 __malloc_av_
10004914 g     F .text	00000004 __sinit_lock_release
1000bb70 g     F .text	0000086c .hidden __muldf3
10007900 g     F .text	00000054 __sread
1000f03c g     F .text	00000114 alt_find_file
1000e5ac g     F .text	000000a4 alt_dev_llist_insert
1000d4ec g     F .text	00000020 __malloc_lock
1000d700 g     F .text	000000b0 sbrk
1000433c g     F .text	00000228 _fflush_r
100090ec g     F .text	000000d8 _calloc_r
10012fcc g       *ABS*	00000000 __bss_start
1000612c g     F .text	00000124 memset
100003d4 g     F .text	000001d4 main
10012ff0 g     O .bss	00000004 alt_envp
10012fd8 g     O .bss	00000004 __malloc_max_total_mem
1000da14 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000976c g     F .text	0000001c __swbuf
10007a34 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100092c4 g     F .text	00000014 fclose
10002c14 g     F .text	00001728 _dtoa_r
10005608 g     F .text	000007a8 _malloc_r
100098fc g     F .text	00000030 __ascii_wctomb
100114cc g     O .rwdata	00000004 alt_errno
10005200 g     F .text	000000b8 _fwalk
1000a650 g     F .text	00000054 .hidden __divsi3
10004948 g     F .text	00000124 _malloc_trim_r
1000f664 g       *ABS*	00000000 __CTOR_END__
10007a3c g     F .text	000000a4 strcmp
1000f664 g       *ABS*	00000000 __flash_rodata_start
1000f664 g       *ABS*	00000000 __DTOR_LIST__
1000b92c g     F .text	00000084 .hidden __nedf2
1000d938 g     F .text	00000034 alt_irq_init
1000d680 g     F .text	00000080 alt_release_fd
1000f8c0 g     O .rodata	00000100 .hidden __clz_tab
10012fcc g     O .bss	00000004 _PathLocale
1000f2c0 g     F .text	00000014 atexit
1000903c g     F .text	0000005c _write_r
10005428 g     F .text	0000001c setlocale
100114a4 g     O .rwdata	00000004 _impure_ptr
10012fe8 g     O .bss	00000004 alt_argc
1000e6ac g     F .text	0000005c _do_dtors
10005414 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006dc4 g     F .text	00000060 __ulp
10004930 g     F .text	00000018 __fp_unlock_all
100114b8 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10005444 g     F .text	0000000c localeconv
1000e724 g     F .text	00000050 alt_ic_isr_register
100114e0 g       *ABS*	00000000 _edata
1001312c g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000def0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000e814 g     F .text	000000a4 alt_ic_irq_disable
1000795c g     F .text	0000007c __swrite
100114b0 g     O .rwdata	00000004 __malloc_trim_threshold
10005408 g     F .text	0000000c __locale_msgcharset
1000f2d4 g     F .text	00000038 exit
100052b8 g     F .text	000000b8 _fwalk_reent
10006c2c g     F .text	00000198 __mdiff
1000a6a4 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000490c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000f630 g     F .text	00000034 _exit
1000e400 g     F .text	00000140 alt_alarm_start
10005450 g     F .text	000001b8 __smakebuf_r
10000704 g     F .text	00000098 strlen
1000ec90 g     F .text	00000160 open
1000b9b0 g     F .text	000000e0 .hidden __gedf2
100114b4 g     O .rwdata	00000004 __wctomb
10007bdc g     F .text	00000018 __sprint_r
1000e708 g     F .text	0000001c alt_icache_flush_all
10000268 g     F .text	0000016c FPGAcommunicator
100114d4 g     O .rwdata	00000004 alt_priority_mask
1000e774 g     F .text	000000a0 alt_ic_irq_enable
10002898 g     F .text	00000024 __vfprintf_internal
1000992c g     F .text	0000005c _wctomb_r
1000c3dc g     F .text	000008d0 .hidden __subdf3
100065c8 g     F .text	000000b0 __lo0bits
100114d8 g     O .rwdata	00000008 alt_alarm_list
1000e650 g     F .text	0000005c _do_ctors
10009824 g     F .text	000000d8 wcrtomb
1000cf5c g     F .text	000000d8 close
1000d2c8 g     F .text	00000080 alt_load
1000945c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10004910 g     F .text	00000004 __sinit_lock_acquire
10006320 g     F .text	0000013c __multadd
100062f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	108c0b04 	addi	r2,r2,12332
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	108c0b04 	addi	r2,r2,12332
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6d817 	ldw	r2,-25760(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6d817 	ldw	r2,-25760(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6a52814 	ori	gp,gp,38048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	108bf314 	ori	r2,r2,12236

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18cc4b14 	ori	r3,r3,12588

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000d2c80 	call	1000d2c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000d4740 	call	1000d474 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <FPGAcommunicator>:
#define to_sw_sig (char*) 0x00000030 // actual address here
//#define to_sw_port (char*) 0x00000030 // actual address here

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator(unsigned long* FPGAmessage)
{
10000268:	defffd04 	addi	sp,sp,-12
1000026c:	dfc00215 	stw	ra,8(sp)
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
10000278:	e13fff15 	stw	r4,-4(fp)
	*to_hw_sig = 2;	// 2 means we're starting communication
1000027c:	00801404 	movi	r2,80
10000280:	00c00084 	movi	r3,2
10000284:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000288:	00800804 	movi	r2,32
1000028c:	e0ffff17 	ldw	r3,-4(fp)
10000290:	18c00017 	ldw	r3,0(r3)
10000294:	10c00005 	stb	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10000298:	00803404 	movi	r2,208
1000029c:	e0ffff17 	ldw	r3,-4(fp)
100002a0:	18c00104 	addi	r3,r3,4
100002a4:	18c00017 	ldw	r3,0(r3)
100002a8:	10c00005 	stb	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
100002ac:	00803004 	movi	r2,192
100002b0:	e0ffff17 	ldw	r3,-4(fp)
100002b4:	18c00204 	addi	r3,r3,8
100002b8:	18c00017 	ldw	r3,0(r3)
100002bc:	10c00005 	stb	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
100002c0:	00802c04 	movi	r2,176
100002c4:	e0ffff17 	ldw	r3,-4(fp)
100002c8:	18c00304 	addi	r3,r3,12
100002cc:	18c00017 	ldw	r3,0(r3)
100002d0:	10c00005 	stb	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
100002d4:	00802804 	movi	r2,160
100002d8:	e0ffff17 	ldw	r3,-4(fp)
100002dc:	18c00404 	addi	r3,r3,16
100002e0:	18c00017 	ldw	r3,0(r3)
100002e4:	10c00005 	stb	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
100002e8:	00802404 	movi	r2,144
100002ec:	e0ffff17 	ldw	r3,-4(fp)
100002f0:	18c00504 	addi	r3,r3,20
100002f4:	18c00017 	ldw	r3,0(r3)
100002f8:	10c00005 	stb	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
100002fc:	00802004 	movi	r2,128
10000300:	e0ffff17 	ldw	r3,-4(fp)
10000304:	18c00604 	addi	r3,r3,24
10000308:	18c00017 	ldw	r3,0(r3)
1000030c:	10c00005 	stb	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10000310:	00801004 	movi	r2,64
10000314:	e0ffff17 	ldw	r3,-4(fp)
10000318:	18c00704 	addi	r3,r3,28
1000031c:	18c00017 	ldw	r3,0(r3)
10000320:	10c00005 	stb	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10000324:	00801c04 	movi	r2,112
10000328:	e0ffff17 	ldw	r3,-4(fp)
1000032c:	18c00804 	addi	r3,r3,32
10000330:	18c00017 	ldw	r3,0(r3)
10000334:	10c00005 	stb	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10000338:	00801804 	movi	r2,96
1000033c:	e0ffff17 	ldw	r3,-4(fp)
10000340:	18c00904 	addi	r3,r3,36
10000344:	18c00017 	ldw	r3,0(r3)
10000348:	10c00005 	stb	r3,0(r2)

	printf("got past putting it in\n");
1000034c:	01040074 	movhi	r4,4097
10000350:	213d9904 	addi	r4,r4,-2460
10000354:	00006f00 	call	100006f0 <puts>

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000358:	0001883a 	nop
1000035c:	00800c04 	movi	r2,48
10000360:	10800003 	ldbu	r2,0(r2)
10000364:	10803fcc 	andi	r2,r2,255
10000368:	1080201c 	xori	r2,r2,128
1000036c:	10bfe004 	addi	r2,r2,-128
10000370:	10800098 	cmpnei	r2,r2,2
10000374:	103ff91e 	bne	r2,zero,1000035c <__alt_data_end+0xf800035c>

	*to_hw_sig = 1;		// now we are done putting in messages
10000378:	00801404 	movi	r2,80
1000037c:	00c00044 	movi	r3,1
10000380:	10c00005 	stb	r3,0(r2)

	printf("almost done\n");
10000384:	01040074 	movhi	r4,4097
10000388:	213d9f04 	addi	r4,r4,-2436
1000038c:	00006f00 	call	100006f0 <puts>

	while(*to_sw_sig != 0); // wait for response from hardware
10000390:	0001883a 	nop
10000394:	00800c04 	movi	r2,48
10000398:	10800003 	ldbu	r2,0(r2)
1000039c:	10803fcc 	andi	r2,r2,255
100003a0:	1080201c 	xori	r2,r2,128
100003a4:	10bfe004 	addi	r2,r2,-128
100003a8:	103ffa1e 	bne	r2,zero,10000394 <__alt_data_end+0xf8000394>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
100003ac:	00801404 	movi	r2,80
100003b0:	10000005 	stb	zero,0(r2)

	printf("message stuff done\n");
100003b4:	01040074 	movhi	r4,4097
100003b8:	213da204 	addi	r4,r4,-2424
100003bc:	00006f00 	call	100006f0 <puts>
}
100003c0:	e037883a 	mov	sp,fp
100003c4:	dfc00117 	ldw	ra,4(sp)
100003c8:	df000017 	ldw	fp,0(sp)
100003cc:	dec00204 	addi	sp,sp,8
100003d0:	f800283a 	ret

100003d4 <main>:

int main()
{
100003d4:	deff9504 	addi	sp,sp,-428
100003d8:	dfc06a15 	stw	ra,424(sp)
100003dc:	df006915 	stw	fp,420(sp)
100003e0:	dc406815 	stw	r17,416(sp)
100003e4:	dc006715 	stw	r16,412(sp)
100003e8:	df006904 	addi	fp,sp,420

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<16; i++)
100003ec:	e03f9715 	stw	zero,-420(fp)
100003f0:	00005c06 	br	10000564 <main+0x190>
	{
		printf("Puttin in our message yo\n");
100003f4:	01040074 	movhi	r4,4097
100003f8:	213da704 	addi	r4,r4,-2404
100003fc:	00006f00 	call	100006f0 <puts>

		unsigned long tempPackage, tempX, tempY, tempState, tempType, tempRot;
		tempX = gameObject[i].xPosition;
10000400:	e0bf9717 	ldw	r2,-420(fp)
10000404:	1009883a 	mov	r4,r2
10000408:	01400504 	movi	r5,20
1000040c:	00005a80 	call	100005a8 <__mulsi3>
10000410:	e0ff9704 	addi	r3,fp,-420
10000414:	1885883a 	add	r2,r3,r2
10000418:	10800704 	addi	r2,r2,28
1000041c:	10800017 	ldw	r2,0(r2)
10000420:	e0bf9815 	stw	r2,-416(fp)
		tempY = gameObject[i].yPosition;
10000424:	e0bf9717 	ldw	r2,-420(fp)
10000428:	1009883a 	mov	r4,r2
1000042c:	01400504 	movi	r5,20
10000430:	00005a80 	call	100005a8 <__mulsi3>
10000434:	e0ff9704 	addi	r3,fp,-420
10000438:	1885883a 	add	r2,r3,r2
1000043c:	10800804 	addi	r2,r2,32
10000440:	10800017 	ldw	r2,0(r2)
10000444:	e0bf9915 	stw	r2,-412(fp)
		tempState = gameObject[i].objectState;
10000448:	e0bf9717 	ldw	r2,-420(fp)
1000044c:	1009883a 	mov	r4,r2
10000450:	01400504 	movi	r5,20
10000454:	00005a80 	call	100005a8 <__mulsi3>
10000458:	e0ff9704 	addi	r3,fp,-420
1000045c:	1885883a 	add	r2,r3,r2
10000460:	10800904 	addi	r2,r2,36
10000464:	10800017 	ldw	r2,0(r2)
10000468:	e0bf9a15 	stw	r2,-408(fp)
		tempType = gameObject[i].objectType;
1000046c:	e0bf9717 	ldw	r2,-420(fp)
10000470:	1009883a 	mov	r4,r2
10000474:	01400504 	movi	r5,20
10000478:	00005a80 	call	100005a8 <__mulsi3>
1000047c:	e0ff9704 	addi	r3,fp,-420
10000480:	1885883a 	add	r2,r3,r2
10000484:	10800a04 	addi	r2,r2,40
10000488:	10800017 	ldw	r2,0(r2)
1000048c:	e0bf9b15 	stw	r2,-404(fp)
		tempRot = gameObject[i].objectRot;
10000490:	e0bf9717 	ldw	r2,-420(fp)
10000494:	1009883a 	mov	r4,r2
10000498:	01400504 	movi	r5,20
1000049c:	00005a80 	call	100005a8 <__mulsi3>
100004a0:	e0ff9704 	addi	r3,fp,-420
100004a4:	1885883a 	add	r2,r3,r2
100004a8:	10800b04 	addi	r2,r2,44
100004ac:	10800017 	ldw	r2,0(r2)
100004b0:	e0bf9c15 	stw	r2,-400(fp)

		tempPackage = tempY + 1000*tempX + 1000000*tempState + 10000000*tempState + 100000000*tempType + 100000000*tempRot;
100004b4:	e13f9817 	ldw	r4,-416(fp)
100004b8:	0140fa04 	movi	r5,1000
100004bc:	00005a80 	call	100005a8 <__mulsi3>
100004c0:	1021883a 	mov	r16,r2
100004c4:	e13f9a17 	ldw	r4,-408(fp)
100004c8:	014003f4 	movhi	r5,15
100004cc:	29509004 	addi	r5,r5,16960
100004d0:	00005a80 	call	100005a8 <__mulsi3>
100004d4:	8087883a 	add	r3,r16,r2
100004d8:	e0bf9917 	ldw	r2,-412(fp)
100004dc:	18a1883a 	add	r16,r3,r2
100004e0:	e13f9b17 	ldw	r4,-404(fp)
100004e4:	01417db4 	movhi	r5,1526
100004e8:	29784004 	addi	r5,r5,-7936
100004ec:	00005a80 	call	100005a8 <__mulsi3>
100004f0:	1023883a 	mov	r17,r2
100004f4:	e13f9a17 	ldw	r4,-408(fp)
100004f8:	01402674 	movhi	r5,153
100004fc:	2965a004 	addi	r5,r5,-27008
10000500:	00005a80 	call	100005a8 <__mulsi3>
10000504:	8885883a 	add	r2,r17,r2
10000508:	80a1883a 	add	r16,r16,r2
1000050c:	e13f9c17 	ldw	r4,-400(fp)
10000510:	01417db4 	movhi	r5,1526
10000514:	29784004 	addi	r5,r5,-7936
10000518:	00005a80 	call	100005a8 <__mulsi3>
1000051c:	8085883a 	add	r2,r16,r2
10000520:	e0bf9d15 	stw	r2,-396(fp)
		printf("Our %dth message is %lu\n", i, tempPackage);
10000524:	01040074 	movhi	r4,4097
10000528:	213dae04 	addi	r4,r4,-2376
1000052c:	e17f9717 	ldw	r5,-420(fp)
10000530:	e1bf9d17 	ldw	r6,-396(fp)
10000534:	00005fc0 	call	100005fc <printf>

		FPGAmessage[i] = tempPackage;
10000538:	e0bf9717 	ldw	r2,-420(fp)
1000053c:	1085883a 	add	r2,r2,r2
10000540:	1085883a 	add	r2,r2,r2
10000544:	e0ff9704 	addi	r3,fp,-420
10000548:	1885883a 	add	r2,r3,r2
1000054c:	10805704 	addi	r2,r2,348
10000550:	e0ff9d17 	ldw	r3,-396(fp)
10000554:	10c00015 	stw	r3,0(r2)

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<16; i++)
10000558:	e0bf9717 	ldw	r2,-420(fp)
1000055c:	10800044 	addi	r2,r2,1
10000560:	e0bf9715 	stw	r2,-420(fp)
10000564:	e0bf9717 	ldw	r2,-420(fp)
10000568:	10800410 	cmplti	r2,r2,16
1000056c:	103fa11e 	bne	r2,zero,100003f4 <__alt_data_end+0xf80003f4>
		printf("Our %dth message is %lu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
	}

	printf("Now we doing our communicatin\n");
10000570:	01040074 	movhi	r4,4097
10000574:	213db504 	addi	r4,r4,-2348
10000578:	00006f00 	call	100006f0 <puts>
	FPGAcommunicator(FPGAmessage);
1000057c:	e0bfee04 	addi	r2,fp,-72
10000580:	1009883a 	mov	r4,r2
10000584:	00002680 	call	10000268 <FPGAcommunicator>

	return 0;
10000588:	0005883a 	mov	r2,zero
}
1000058c:	e6fffe04 	addi	sp,fp,-8
10000590:	dfc00317 	ldw	ra,12(sp)
10000594:	df000217 	ldw	fp,8(sp)
10000598:	dc400117 	ldw	r17,4(sp)
1000059c:	dc000017 	ldw	r16,0(sp)
100005a0:	dec00404 	addi	sp,sp,16
100005a4:	f800283a 	ret

100005a8 <__mulsi3>:
100005a8:	0005883a 	mov	r2,zero
100005ac:	20000726 	beq	r4,zero,100005cc <__mulsi3+0x24>
100005b0:	20c0004c 	andi	r3,r4,1
100005b4:	2008d07a 	srli	r4,r4,1
100005b8:	18000126 	beq	r3,zero,100005c0 <__mulsi3+0x18>
100005bc:	1145883a 	add	r2,r2,r5
100005c0:	294b883a 	add	r5,r5,r5
100005c4:	203ffa1e 	bne	r4,zero,100005b0 <__alt_data_end+0xf80005b0>
100005c8:	f800283a 	ret
100005cc:	f800283a 	ret

100005d0 <_printf_r>:
100005d0:	defffd04 	addi	sp,sp,-12
100005d4:	dfc00015 	stw	ra,0(sp)
100005d8:	d9800115 	stw	r6,4(sp)
100005dc:	d9c00215 	stw	r7,8(sp)
100005e0:	280d883a 	mov	r6,r5
100005e4:	21400217 	ldw	r5,8(r4)
100005e8:	d9c00104 	addi	r7,sp,4
100005ec:	000079c0 	call	1000079c <___vfprintf_internal_r>
100005f0:	dfc00017 	ldw	ra,0(sp)
100005f4:	dec00304 	addi	sp,sp,12
100005f8:	f800283a 	ret

100005fc <printf>:
100005fc:	defffc04 	addi	sp,sp,-16
10000600:	dfc00015 	stw	ra,0(sp)
10000604:	d9400115 	stw	r5,4(sp)
10000608:	d9800215 	stw	r6,8(sp)
1000060c:	d9c00315 	stw	r7,12(sp)
10000610:	00840074 	movhi	r2,4097
10000614:	10852904 	addi	r2,r2,5284
10000618:	10800017 	ldw	r2,0(r2)
1000061c:	200b883a 	mov	r5,r4
10000620:	d9800104 	addi	r6,sp,4
10000624:	11000217 	ldw	r4,8(r2)
10000628:	00028980 	call	10002898 <__vfprintf_internal>
1000062c:	dfc00017 	ldw	ra,0(sp)
10000630:	dec00404 	addi	sp,sp,16
10000634:	f800283a 	ret

10000638 <_puts_r>:
10000638:	defff604 	addi	sp,sp,-40
1000063c:	dc000715 	stw	r16,28(sp)
10000640:	2021883a 	mov	r16,r4
10000644:	2809883a 	mov	r4,r5
10000648:	dc400815 	stw	r17,32(sp)
1000064c:	dfc00915 	stw	ra,36(sp)
10000650:	2823883a 	mov	r17,r5
10000654:	00007040 	call	10000704 <strlen>
10000658:	00c40074 	movhi	r3,4097
1000065c:	18c52904 	addi	r3,r3,5284
10000660:	18c00017 	ldw	r3,0(r3)
10000664:	11000044 	addi	r4,r2,1
10000668:	d8800115 	stw	r2,4(sp)
1000066c:	18c00217 	ldw	r3,8(r3)
10000670:	01440074 	movhi	r5,4097
10000674:	297dbd04 	addi	r5,r5,-2316
10000678:	1880030b 	ldhu	r2,12(r3)
1000067c:	d9400215 	stw	r5,8(sp)
10000680:	d9000615 	stw	r4,24(sp)
10000684:	01400044 	movi	r5,1
10000688:	01000084 	movi	r4,2
1000068c:	d9000515 	stw	r4,20(sp)
10000690:	dc400015 	stw	r17,0(sp)
10000694:	d9400315 	stw	r5,12(sp)
10000698:	dec00415 	stw	sp,16(sp)
1000069c:	1108000c 	andi	r4,r2,8192
100006a0:	2000061e 	bne	r4,zero,100006bc <_puts_r+0x84>
100006a4:	19401917 	ldw	r5,100(r3)
100006a8:	0137ffc4 	movi	r4,-8193
100006ac:	10880014 	ori	r2,r2,8192
100006b0:	2908703a 	and	r4,r5,r4
100006b4:	1880030d 	sth	r2,12(r3)
100006b8:	19001915 	stw	r4,100(r3)
100006bc:	81400217 	ldw	r5,8(r16)
100006c0:	8009883a 	mov	r4,r16
100006c4:	d9800404 	addi	r6,sp,16
100006c8:	0004d5c0 	call	10004d5c <__sfvwrite_r>
100006cc:	1000061e 	bne	r2,zero,100006e8 <_puts_r+0xb0>
100006d0:	00800284 	movi	r2,10
100006d4:	dfc00917 	ldw	ra,36(sp)
100006d8:	dc400817 	ldw	r17,32(sp)
100006dc:	dc000717 	ldw	r16,28(sp)
100006e0:	dec00a04 	addi	sp,sp,40
100006e4:	f800283a 	ret
100006e8:	00bfffc4 	movi	r2,-1
100006ec:	003ff906 	br	100006d4 <__alt_data_end+0xf80006d4>

100006f0 <puts>:
100006f0:	00840074 	movhi	r2,4097
100006f4:	10852904 	addi	r2,r2,5284
100006f8:	200b883a 	mov	r5,r4
100006fc:	11000017 	ldw	r4,0(r2)
10000700:	00006381 	jmpi	10000638 <_puts_r>

10000704 <strlen>:
10000704:	208000cc 	andi	r2,r4,3
10000708:	10002026 	beq	r2,zero,1000078c <strlen+0x88>
1000070c:	20800007 	ldb	r2,0(r4)
10000710:	10002026 	beq	r2,zero,10000794 <strlen+0x90>
10000714:	2005883a 	mov	r2,r4
10000718:	00000206 	br	10000724 <strlen+0x20>
1000071c:	10c00007 	ldb	r3,0(r2)
10000720:	18001826 	beq	r3,zero,10000784 <strlen+0x80>
10000724:	10800044 	addi	r2,r2,1
10000728:	10c000cc 	andi	r3,r2,3
1000072c:	183ffb1e 	bne	r3,zero,1000071c <__alt_data_end+0xf800071c>
10000730:	10c00017 	ldw	r3,0(r2)
10000734:	01ffbff4 	movhi	r7,65279
10000738:	39ffbfc4 	addi	r7,r7,-257
1000073c:	00ca303a 	nor	r5,zero,r3
10000740:	01a02074 	movhi	r6,32897
10000744:	19c7883a 	add	r3,r3,r7
10000748:	31a02004 	addi	r6,r6,-32640
1000074c:	1946703a 	and	r3,r3,r5
10000750:	1986703a 	and	r3,r3,r6
10000754:	1800091e 	bne	r3,zero,1000077c <strlen+0x78>
10000758:	10800104 	addi	r2,r2,4
1000075c:	10c00017 	ldw	r3,0(r2)
10000760:	19cb883a 	add	r5,r3,r7
10000764:	00c6303a 	nor	r3,zero,r3
10000768:	28c6703a 	and	r3,r5,r3
1000076c:	1986703a 	and	r3,r3,r6
10000770:	183ff926 	beq	r3,zero,10000758 <__alt_data_end+0xf8000758>
10000774:	00000106 	br	1000077c <strlen+0x78>
10000778:	10800044 	addi	r2,r2,1
1000077c:	10c00007 	ldb	r3,0(r2)
10000780:	183ffd1e 	bne	r3,zero,10000778 <__alt_data_end+0xf8000778>
10000784:	1105c83a 	sub	r2,r2,r4
10000788:	f800283a 	ret
1000078c:	2005883a 	mov	r2,r4
10000790:	003fe706 	br	10000730 <__alt_data_end+0xf8000730>
10000794:	0005883a 	mov	r2,zero
10000798:	f800283a 	ret

1000079c <___vfprintf_internal_r>:
1000079c:	defeb604 	addi	sp,sp,-1320
100007a0:	dfc14915 	stw	ra,1316(sp)
100007a4:	ddc14715 	stw	r23,1308(sp)
100007a8:	dd814615 	stw	r22,1304(sp)
100007ac:	202f883a 	mov	r23,r4
100007b0:	282d883a 	mov	r22,r5
100007b4:	d9812a15 	stw	r6,1192(sp)
100007b8:	d9c12d15 	stw	r7,1204(sp)
100007bc:	df014815 	stw	fp,1312(sp)
100007c0:	dd414515 	stw	r21,1300(sp)
100007c4:	dd014415 	stw	r20,1296(sp)
100007c8:	dcc14315 	stw	r19,1292(sp)
100007cc:	dc814215 	stw	r18,1288(sp)
100007d0:	dc414115 	stw	r17,1284(sp)
100007d4:	dc014015 	stw	r16,1280(sp)
100007d8:	000541c0 	call	1000541c <_localeconv_r>
100007dc:	10800017 	ldw	r2,0(r2)
100007e0:	1009883a 	mov	r4,r2
100007e4:	d8813515 	stw	r2,1236(sp)
100007e8:	00007040 	call	10000704 <strlen>
100007ec:	d8813815 	stw	r2,1248(sp)
100007f0:	b8000226 	beq	r23,zero,100007fc <___vfprintf_internal_r+0x60>
100007f4:	b8800e17 	ldw	r2,56(r23)
100007f8:	10010526 	beq	r2,zero,10000c10 <___vfprintf_internal_r+0x474>
100007fc:	b0c0030b 	ldhu	r3,12(r22)
10000800:	1908000c 	andi	r4,r3,8192
10000804:	1805883a 	mov	r2,r3
10000808:	2000071e 	bne	r4,zero,10000828 <___vfprintf_internal_r+0x8c>
1000080c:	b1001917 	ldw	r4,100(r22)
10000810:	18880014 	ori	r2,r3,8192
10000814:	00f7ffc4 	movi	r3,-8193
10000818:	20c8703a 	and	r4,r4,r3
1000081c:	b080030d 	sth	r2,12(r22)
10000820:	1007883a 	mov	r3,r2
10000824:	b1001915 	stw	r4,100(r22)
10000828:	1100020c 	andi	r4,r2,8
1000082c:	2000a826 	beq	r4,zero,10000ad0 <___vfprintf_internal_r+0x334>
10000830:	b1000417 	ldw	r4,16(r22)
10000834:	2000a626 	beq	r4,zero,10000ad0 <___vfprintf_internal_r+0x334>
10000838:	1080068c 	andi	r2,r2,26
1000083c:	01000284 	movi	r4,10
10000840:	1100ac26 	beq	r2,r4,10000af4 <___vfprintf_internal_r+0x358>
10000844:	d8c10e04 	addi	r3,sp,1080
10000848:	d9010dc4 	addi	r4,sp,1079
1000084c:	d9400404 	addi	r5,sp,16
10000850:	05040074 	movhi	r20,4097
10000854:	1905c83a 	sub	r2,r3,r4
10000858:	a53dce84 	addi	r20,r20,-2246
1000085c:	d8c12815 	stw	r3,1184(sp)
10000860:	d9012915 	stw	r4,1188(sp)
10000864:	d9411e15 	stw	r5,1144(sp)
10000868:	d8012015 	stw	zero,1152(sp)
1000086c:	d8011f15 	stw	zero,1148(sp)
10000870:	d8013315 	stw	zero,1228(sp)
10000874:	d8013715 	stw	zero,1244(sp)
10000878:	d8013915 	stw	zero,1252(sp)
1000087c:	d8013b15 	stw	zero,1260(sp)
10000880:	d8013a15 	stw	zero,1256(sp)
10000884:	d8012f15 	stw	zero,1212(sp)
10000888:	2811883a 	mov	r8,r5
1000088c:	d8813c15 	stw	r2,1264(sp)
10000890:	d8c12a17 	ldw	r3,1192(sp)
10000894:	18800007 	ldb	r2,0(r3)
10000898:	10021326 	beq	r2,zero,100010e8 <___vfprintf_internal_r+0x94c>
1000089c:	00c00944 	movi	r3,37
100008a0:	dc012a17 	ldw	r16,1192(sp)
100008a4:	10c0021e 	bne	r2,r3,100008b0 <___vfprintf_internal_r+0x114>
100008a8:	00001606 	br	10000904 <___vfprintf_internal_r+0x168>
100008ac:	10c08526 	beq	r2,r3,10000ac4 <___vfprintf_internal_r+0x328>
100008b0:	84000044 	addi	r16,r16,1
100008b4:	80800007 	ldb	r2,0(r16)
100008b8:	103ffc1e 	bne	r2,zero,100008ac <__alt_data_end+0xf80008ac>
100008bc:	d9012a17 	ldw	r4,1192(sp)
100008c0:	8123c83a 	sub	r17,r16,r4
100008c4:	88000f26 	beq	r17,zero,10000904 <___vfprintf_internal_r+0x168>
100008c8:	d8812a17 	ldw	r2,1192(sp)
100008cc:	d8c12017 	ldw	r3,1152(sp)
100008d0:	44400115 	stw	r17,4(r8)
100008d4:	40800015 	stw	r2,0(r8)
100008d8:	d8811f17 	ldw	r2,1148(sp)
100008dc:	1c47883a 	add	r3,r3,r17
100008e0:	d8c12015 	stw	r3,1152(sp)
100008e4:	10800044 	addi	r2,r2,1
100008e8:	d8811f15 	stw	r2,1148(sp)
100008ec:	00c001c4 	movi	r3,7
100008f0:	1880b516 	blt	r3,r2,10000bc8 <___vfprintf_internal_r+0x42c>
100008f4:	42000204 	addi	r8,r8,8
100008f8:	d8c12f17 	ldw	r3,1212(sp)
100008fc:	1c47883a 	add	r3,r3,r17
10000900:	d8c12f15 	stw	r3,1212(sp)
10000904:	80800007 	ldb	r2,0(r16)
10000908:	1000b626 	beq	r2,zero,10000be4 <___vfprintf_internal_r+0x448>
1000090c:	80800044 	addi	r2,r16,1
10000910:	84000047 	ldb	r16,1(r16)
10000914:	0027883a 	mov	r19,zero
10000918:	0039883a 	mov	fp,zero
1000091c:	dcc12b05 	stb	r19,1196(sp)
10000920:	d8012785 	stb	zero,1182(sp)
10000924:	027fffc4 	movi	r9,-1
10000928:	d8012e15 	stw	zero,1208(sp)
1000092c:	04401604 	movi	r17,88
10000930:	04800244 	movi	r18,9
10000934:	da012a15 	stw	r8,1192(sp)
10000938:	e027883a 	mov	r19,fp
1000093c:	17000044 	addi	fp,r2,1
10000940:	80bff804 	addi	r2,r16,-32
10000944:	88831236 	bltu	r17,r2,10001590 <___vfprintf_internal_r+0xdf4>
10000948:	100490ba 	slli	r2,r2,2
1000094c:	01040034 	movhi	r4,4096
10000950:	21025804 	addi	r4,r4,2400
10000954:	1105883a 	add	r2,r2,r4
10000958:	10800017 	ldw	r2,0(r2)
1000095c:	1000683a 	jmp	r2
10000960:	100014ac 	andhi	zero,r2,82
10000964:	10001590 	cmplti	zero,r2,86
10000968:	10001590 	cmplti	zero,r2,86
1000096c:	100014c8 	cmpgei	zero,r2,83
10000970:	10001590 	cmplti	zero,r2,86
10000974:	10001590 	cmplti	zero,r2,86
10000978:	10001590 	cmplti	zero,r2,86
1000097c:	10001590 	cmplti	zero,r2,86
10000980:	10001590 	cmplti	zero,r2,86
10000984:	10001590 	cmplti	zero,r2,86
10000988:	100014d8 	cmpnei	zero,r2,83
1000098c:	10001500 	call	11000150 <_gp+0xfe6cb0>
10000990:	10001590 	cmplti	zero,r2,86
10000994:	10000c1c 	xori	zero,r2,48
10000998:	10000c2c 	andhi	zero,r2,48
1000099c:	10001590 	cmplti	zero,r2,86
100009a0:	10000c7c 	xorhi	zero,r2,49
100009a4:	10000c8c 	andi	zero,r2,50
100009a8:	10000c8c 	andi	zero,r2,50
100009ac:	10000c8c 	andi	zero,r2,50
100009b0:	10000c8c 	andi	zero,r2,50
100009b4:	10000c8c 	andi	zero,r2,50
100009b8:	10000c8c 	andi	zero,r2,50
100009bc:	10000c8c 	andi	zero,r2,50
100009c0:	10000c8c 	andi	zero,r2,50
100009c4:	10000c8c 	andi	zero,r2,50
100009c8:	10001590 	cmplti	zero,r2,86
100009cc:	10001590 	cmplti	zero,r2,86
100009d0:	10001590 	cmplti	zero,r2,86
100009d4:	10001590 	cmplti	zero,r2,86
100009d8:	10001590 	cmplti	zero,r2,86
100009dc:	10001590 	cmplti	zero,r2,86
100009e0:	10001590 	cmplti	zero,r2,86
100009e4:	10001590 	cmplti	zero,r2,86
100009e8:	10001590 	cmplti	zero,r2,86
100009ec:	10001590 	cmplti	zero,r2,86
100009f0:	10000cd0 	cmplti	zero,r2,51
100009f4:	100010f0 	cmpltui	zero,r2,67
100009f8:	10001590 	cmplti	zero,r2,86
100009fc:	100010f0 	cmpltui	zero,r2,67
10000a00:	10001590 	cmplti	zero,r2,86
10000a04:	10001590 	cmplti	zero,r2,86
10000a08:	10001590 	cmplti	zero,r2,86
10000a0c:	10001590 	cmplti	zero,r2,86
10000a10:	10001198 	cmpnei	zero,r2,70
10000a14:	10001590 	cmplti	zero,r2,86
10000a18:	10001590 	cmplti	zero,r2,86
10000a1c:	100011a8 	cmpgeui	zero,r2,70
10000a20:	10001590 	cmplti	zero,r2,86
10000a24:	10001590 	cmplti	zero,r2,86
10000a28:	10001590 	cmplti	zero,r2,86
10000a2c:	10001590 	cmplti	zero,r2,86
10000a30:	10001590 	cmplti	zero,r2,86
10000a34:	100011ec 	andhi	zero,r2,71
10000a38:	10001590 	cmplti	zero,r2,86
10000a3c:	10001590 	cmplti	zero,r2,86
10000a40:	10001224 	muli	zero,r2,72
10000a44:	10001590 	cmplti	zero,r2,86
10000a48:	10001590 	cmplti	zero,r2,86
10000a4c:	10001590 	cmplti	zero,r2,86
10000a50:	10001590 	cmplti	zero,r2,86
10000a54:	10001590 	cmplti	zero,r2,86
10000a58:	10001590 	cmplti	zero,r2,86
10000a5c:	10001590 	cmplti	zero,r2,86
10000a60:	10001590 	cmplti	zero,r2,86
10000a64:	10001590 	cmplti	zero,r2,86
10000a68:	10001590 	cmplti	zero,r2,86
10000a6c:	10001460 	cmpeqi	zero,r2,81
10000a70:	1000140c 	andi	zero,r2,80
10000a74:	100010f0 	cmpltui	zero,r2,67
10000a78:	100010f0 	cmpltui	zero,r2,67
10000a7c:	100010f0 	cmpltui	zero,r2,67
10000a80:	10001450 	cmplti	zero,r2,81
10000a84:	1000140c 	andi	zero,r2,80
10000a88:	10001590 	cmplti	zero,r2,86
10000a8c:	10001590 	cmplti	zero,r2,86
10000a90:	10001328 	cmpgeui	zero,r2,76
10000a94:	10001590 	cmplti	zero,r2,86
10000a98:	10001340 	call	11000134 <_gp+0xfe6c94>
10000a9c:	10001380 	call	11000138 <_gp+0xfe6c98>
10000aa0:	100013c0 	call	1100013c <_gp+0xfe6c9c>
10000aa4:	1000128c 	andi	zero,r2,74
10000aa8:	10001590 	cmplti	zero,r2,86
10000aac:	10001514 	ori	zero,r2,84
10000ab0:	10001590 	cmplti	zero,r2,86
10000ab4:	1000129c 	xori	zero,r2,74
10000ab8:	10001590 	cmplti	zero,r2,86
10000abc:	10001590 	cmplti	zero,r2,86
10000ac0:	100012dc 	xori	zero,r2,75
10000ac4:	d9412a17 	ldw	r5,1192(sp)
10000ac8:	8163c83a 	sub	r17,r16,r5
10000acc:	003f7d06 	br	100008c4 <__alt_data_end+0xf80008c4>
10000ad0:	b809883a 	mov	r4,r23
10000ad4:	b00b883a 	mov	r5,r22
10000ad8:	00028bc0 	call	100028bc <__swsetup_r>
10000adc:	10002d1e 	bne	r2,zero,10000b94 <___vfprintf_internal_r+0x3f8>
10000ae0:	b0c0030b 	ldhu	r3,12(r22)
10000ae4:	01000284 	movi	r4,10
10000ae8:	1805883a 	mov	r2,r3
10000aec:	1080068c 	andi	r2,r2,26
10000af0:	113f541e 	bne	r2,r4,10000844 <__alt_data_end+0xf8000844>
10000af4:	b080038b 	ldhu	r2,14(r22)
10000af8:	113fffcc 	andi	r4,r2,65535
10000afc:	2120001c 	xori	r4,r4,32768
10000b00:	21200004 	addi	r4,r4,-32768
10000b04:	203f4f16 	blt	r4,zero,10000844 <__alt_data_end+0xf8000844>
10000b08:	b2c01917 	ldw	r11,100(r22)
10000b0c:	b2800717 	ldw	r10,28(r22)
10000b10:	b2400917 	ldw	r9,36(r22)
10000b14:	d9812a17 	ldw	r6,1192(sp)
10000b18:	d9c12d17 	ldw	r7,1204(sp)
10000b1c:	02010004 	movi	r8,1024
10000b20:	18ffff4c 	andi	r3,r3,65533
10000b24:	d881078d 	sth	r2,1054(sp)
10000b28:	b809883a 	mov	r4,r23
10000b2c:	d8800404 	addi	r2,sp,16
10000b30:	d9410404 	addi	r5,sp,1040
10000b34:	d8c1070d 	sth	r3,1052(sp)
10000b38:	dac11d15 	stw	r11,1140(sp)
10000b3c:	da810b15 	stw	r10,1068(sp)
10000b40:	da410d15 	stw	r9,1076(sp)
10000b44:	d8810415 	stw	r2,1040(sp)
10000b48:	d8810815 	stw	r2,1056(sp)
10000b4c:	da010615 	stw	r8,1048(sp)
10000b50:	da010915 	stw	r8,1060(sp)
10000b54:	d8010a15 	stw	zero,1064(sp)
10000b58:	000079c0 	call	1000079c <___vfprintf_internal_r>
10000b5c:	1021883a 	mov	r16,r2
10000b60:	10000416 	blt	r2,zero,10000b74 <___vfprintf_internal_r+0x3d8>
10000b64:	b809883a 	mov	r4,r23
10000b68:	d9410404 	addi	r5,sp,1040
10000b6c:	000433c0 	call	1000433c <_fflush_r>
10000b70:	1007301e 	bne	r2,zero,10002834 <___vfprintf_internal_r+0x2098>
10000b74:	d881070b 	ldhu	r2,1052(sp)
10000b78:	1080100c 	andi	r2,r2,64
10000b7c:	10000326 	beq	r2,zero,10000b8c <___vfprintf_internal_r+0x3f0>
10000b80:	b080030b 	ldhu	r2,12(r22)
10000b84:	10801014 	ori	r2,r2,64
10000b88:	b080030d 	sth	r2,12(r22)
10000b8c:	8005883a 	mov	r2,r16
10000b90:	00000106 	br	10000b98 <___vfprintf_internal_r+0x3fc>
10000b94:	00bfffc4 	movi	r2,-1
10000b98:	dfc14917 	ldw	ra,1316(sp)
10000b9c:	df014817 	ldw	fp,1312(sp)
10000ba0:	ddc14717 	ldw	r23,1308(sp)
10000ba4:	dd814617 	ldw	r22,1304(sp)
10000ba8:	dd414517 	ldw	r21,1300(sp)
10000bac:	dd014417 	ldw	r20,1296(sp)
10000bb0:	dcc14317 	ldw	r19,1292(sp)
10000bb4:	dc814217 	ldw	r18,1288(sp)
10000bb8:	dc414117 	ldw	r17,1284(sp)
10000bbc:	dc014017 	ldw	r16,1280(sp)
10000bc0:	dec14a04 	addi	sp,sp,1320
10000bc4:	f800283a 	ret
10000bc8:	b809883a 	mov	r4,r23
10000bcc:	b00b883a 	mov	r5,r22
10000bd0:	d9811e04 	addi	r6,sp,1144
10000bd4:	0007bdc0 	call	10007bdc <__sprint_r>
10000bd8:	1000081e 	bne	r2,zero,10000bfc <___vfprintf_internal_r+0x460>
10000bdc:	da000404 	addi	r8,sp,16
10000be0:	003f4506 	br	100008f8 <__alt_data_end+0xf80008f8>
10000be4:	d8812017 	ldw	r2,1152(sp)
10000be8:	10000426 	beq	r2,zero,10000bfc <___vfprintf_internal_r+0x460>
10000bec:	b809883a 	mov	r4,r23
10000bf0:	b00b883a 	mov	r5,r22
10000bf4:	d9811e04 	addi	r6,sp,1144
10000bf8:	0007bdc0 	call	10007bdc <__sprint_r>
10000bfc:	b080030b 	ldhu	r2,12(r22)
10000c00:	1080100c 	andi	r2,r2,64
10000c04:	103fe31e 	bne	r2,zero,10000b94 <__alt_data_end+0xf8000b94>
10000c08:	d8812f17 	ldw	r2,1212(sp)
10000c0c:	003fe206 	br	10000b98 <__alt_data_end+0xf8000b98>
10000c10:	b809883a 	mov	r4,r23
10000c14:	00048f80 	call	100048f8 <__sinit>
10000c18:	003ef806 	br	100007fc <__alt_data_end+0xf80007fc>
10000c1c:	e005883a 	mov	r2,fp
10000c20:	9cc00114 	ori	r19,r19,4
10000c24:	e4000007 	ldb	r16,0(fp)
10000c28:	003f4406 	br	1000093c <__alt_data_end+0xf800093c>
10000c2c:	e4000007 	ldb	r16,0(fp)
10000c30:	01000a84 	movi	r4,42
10000c34:	e0800044 	addi	r2,fp,1
10000c38:	8106f626 	beq	r16,r4,10002814 <___vfprintf_internal_r+0x2078>
10000c3c:	857ff404 	addi	r21,r16,-48
10000c40:	1039883a 	mov	fp,r2
10000c44:	0013883a 	mov	r9,zero
10000c48:	957f3d36 	bltu	r18,r21,10000940 <__alt_data_end+0xf8000940>
10000c4c:	0009883a 	mov	r4,zero
10000c50:	01400284 	movi	r5,10
10000c54:	00005a80 	call	100005a8 <__mulsi3>
10000c58:	e4000007 	ldb	r16,0(fp)
10000c5c:	a889883a 	add	r4,r21,r2
10000c60:	e7000044 	addi	fp,fp,1
10000c64:	857ff404 	addi	r21,r16,-48
10000c68:	957ff92e 	bgeu	r18,r21,10000c50 <__alt_data_end+0xf8000c50>
10000c6c:	2013883a 	mov	r9,r4
10000c70:	203f330e 	bge	r4,zero,10000940 <__alt_data_end+0xf8000940>
10000c74:	027fffc4 	movi	r9,-1
10000c78:	003f3106 	br	10000940 <__alt_data_end+0xf8000940>
10000c7c:	9cc02014 	ori	r19,r19,128
10000c80:	e005883a 	mov	r2,fp
10000c84:	e4000007 	ldb	r16,0(fp)
10000c88:	003f2c06 	br	1000093c <__alt_data_end+0xf800093c>
10000c8c:	857ff404 	addi	r21,r16,-48
10000c90:	d8012e15 	stw	zero,1208(sp)
10000c94:	e021883a 	mov	r16,fp
10000c98:	0009883a 	mov	r4,zero
10000c9c:	da412c15 	stw	r9,1200(sp)
10000ca0:	01400284 	movi	r5,10
10000ca4:	00005a80 	call	100005a8 <__mulsi3>
10000ca8:	81400007 	ldb	r5,0(r16)
10000cac:	1549883a 	add	r4,r2,r21
10000cb0:	e7000044 	addi	fp,fp,1
10000cb4:	2d7ff404 	addi	r21,r5,-48
10000cb8:	e021883a 	mov	r16,fp
10000cbc:	957ff82e 	bgeu	r18,r21,10000ca0 <__alt_data_end+0xf8000ca0>
10000cc0:	2821883a 	mov	r16,r5
10000cc4:	d9012e15 	stw	r4,1208(sp)
10000cc8:	da412c17 	ldw	r9,1200(sp)
10000ccc:	003f1c06 	br	10000940 <__alt_data_end+0xf8000940>
10000cd0:	da012a17 	ldw	r8,1192(sp)
10000cd4:	df012a15 	stw	fp,1192(sp)
10000cd8:	9839883a 	mov	fp,r19
10000cdc:	dcc12b03 	ldbu	r19,1196(sp)
10000ce0:	e7000414 	ori	fp,fp,16
10000ce4:	e080080c 	andi	r2,fp,32
10000ce8:	dcc12785 	stb	r19,1182(sp)
10000cec:	d8c12d17 	ldw	r3,1204(sp)
10000cf0:	1001ce26 	beq	r2,zero,1000142c <___vfprintf_internal_r+0xc90>
10000cf4:	d9012d17 	ldw	r4,1204(sp)
10000cf8:	18800117 	ldw	r2,4(r3)
10000cfc:	1c800017 	ldw	r18,0(r3)
10000d00:	21000204 	addi	r4,r4,8
10000d04:	d9012d15 	stw	r4,1204(sp)
10000d08:	102b883a 	mov	r21,r2
10000d0c:	10044916 	blt	r2,zero,10001e34 <___vfprintf_internal_r+0x1698>
10000d10:	dcc12783 	ldbu	r19,1182(sp)
10000d14:	da413215 	stw	r9,1224(sp)
10000d18:	00800044 	movi	r2,1
10000d1c:	9546b03a 	or	r3,r18,r21
10000d20:	48000216 	blt	r9,zero,10000d2c <___vfprintf_internal_r+0x590>
10000d24:	013fdfc4 	movi	r4,-129
10000d28:	e138703a 	and	fp,fp,r4
10000d2c:	1802251e 	bne	r3,zero,100015c4 <___vfprintf_internal_r+0xe28>
10000d30:	48031726 	beq	r9,zero,10001990 <___vfprintf_internal_r+0x11f4>
10000d34:	10803fcc 	andi	r2,r2,255
10000d38:	00c00044 	movi	r3,1
10000d3c:	10c24526 	beq	r2,r3,10001654 <___vfprintf_internal_r+0xeb8>
10000d40:	00c00084 	movi	r3,2
10000d44:	10c33426 	beq	r2,r3,10001a18 <___vfprintf_internal_r+0x127c>
10000d48:	d8c10e04 	addi	r3,sp,1080
10000d4c:	9008d0fa 	srli	r4,r18,3
10000d50:	a80a977a 	slli	r5,r21,29
10000d54:	a82ad0fa 	srli	r21,r21,3
10000d58:	948001cc 	andi	r18,r18,7
10000d5c:	90800c04 	addi	r2,r18,48
10000d60:	18ffffc4 	addi	r3,r3,-1
10000d64:	2924b03a 	or	r18,r5,r4
10000d68:	18800005 	stb	r2,0(r3)
10000d6c:	9548b03a 	or	r4,r18,r21
10000d70:	203ff61e 	bne	r4,zero,10000d4c <__alt_data_end+0xf8000d4c>
10000d74:	e100004c 	andi	r4,fp,1
10000d78:	d8c13115 	stw	r3,1220(sp)
10000d7c:	20039a1e 	bne	r4,zero,10001be8 <___vfprintf_internal_r+0x144c>
10000d80:	d8812817 	ldw	r2,1184(sp)
10000d84:	10e3c83a 	sub	r17,r2,r3
10000d88:	8805883a 	mov	r2,r17
10000d8c:	8a40010e 	bge	r17,r9,10000d94 <___vfprintf_internal_r+0x5f8>
10000d90:	4805883a 	mov	r2,r9
10000d94:	d8812b15 	stw	r2,1196(sp)
10000d98:	d8013415 	stw	zero,1232(sp)
10000d9c:	98803fcc 	andi	r2,r19,255
10000da0:	1080201c 	xori	r2,r2,128
10000da4:	10bfe004 	addi	r2,r2,-128
10000da8:	10000326 	beq	r2,zero,10000db8 <___vfprintf_internal_r+0x61c>
10000dac:	d8c12b17 	ldw	r3,1196(sp)
10000db0:	18c00044 	addi	r3,r3,1
10000db4:	d8c12b15 	stw	r3,1196(sp)
10000db8:	e0c0008c 	andi	r3,fp,2
10000dbc:	d8c12c15 	stw	r3,1200(sp)
10000dc0:	18000326 	beq	r3,zero,10000dd0 <___vfprintf_internal_r+0x634>
10000dc4:	d8c12b17 	ldw	r3,1196(sp)
10000dc8:	18c00084 	addi	r3,r3,2
10000dcc:	d8c12b15 	stw	r3,1196(sp)
10000dd0:	e0c0210c 	andi	r3,fp,132
10000dd4:	d8c13015 	stw	r3,1216(sp)
10000dd8:	1801f81e 	bne	r3,zero,100015bc <___vfprintf_internal_r+0xe20>
10000ddc:	d9012e17 	ldw	r4,1208(sp)
10000de0:	d8c12b17 	ldw	r3,1196(sp)
10000de4:	20ebc83a 	sub	r21,r4,r3
10000de8:	0541f40e 	bge	zero,r21,100015bc <___vfprintf_internal_r+0xe20>
10000dec:	02400404 	movi	r9,16
10000df0:	d8c12017 	ldw	r3,1152(sp)
10000df4:	d8811f17 	ldw	r2,1148(sp)
10000df8:	4d45750e 	bge	r9,r21,100023d0 <___vfprintf_internal_r+0x1c34>
10000dfc:	01440074 	movhi	r5,4097
10000e00:	297dd284 	addi	r5,r5,-2230
10000e04:	d9413615 	stw	r5,1240(sp)
10000e08:	4827883a 	mov	r19,r9
10000e0c:	048001c4 	movi	r18,7
10000e10:	00000306 	br	10000e20 <___vfprintf_internal_r+0x684>
10000e14:	ad7ffc04 	addi	r21,r21,-16
10000e18:	42000204 	addi	r8,r8,8
10000e1c:	9d40130e 	bge	r19,r21,10000e6c <___vfprintf_internal_r+0x6d0>
10000e20:	01040074 	movhi	r4,4097
10000e24:	18c00404 	addi	r3,r3,16
10000e28:	10800044 	addi	r2,r2,1
10000e2c:	213dd284 	addi	r4,r4,-2230
10000e30:	41000015 	stw	r4,0(r8)
10000e34:	44c00115 	stw	r19,4(r8)
10000e38:	d8c12015 	stw	r3,1152(sp)
10000e3c:	d8811f15 	stw	r2,1148(sp)
10000e40:	90bff40e 	bge	r18,r2,10000e14 <__alt_data_end+0xf8000e14>
10000e44:	b809883a 	mov	r4,r23
10000e48:	b00b883a 	mov	r5,r22
10000e4c:	d9811e04 	addi	r6,sp,1144
10000e50:	0007bdc0 	call	10007bdc <__sprint_r>
10000e54:	103f691e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10000e58:	ad7ffc04 	addi	r21,r21,-16
10000e5c:	d8c12017 	ldw	r3,1152(sp)
10000e60:	d8811f17 	ldw	r2,1148(sp)
10000e64:	da000404 	addi	r8,sp,16
10000e68:	9d7fed16 	blt	r19,r21,10000e20 <__alt_data_end+0xf8000e20>
10000e6c:	d9413617 	ldw	r5,1240(sp)
10000e70:	a8c7883a 	add	r3,r21,r3
10000e74:	10800044 	addi	r2,r2,1
10000e78:	41400015 	stw	r5,0(r8)
10000e7c:	45400115 	stw	r21,4(r8)
10000e80:	d8c12015 	stw	r3,1152(sp)
10000e84:	d8811f15 	stw	r2,1148(sp)
10000e88:	010001c4 	movi	r4,7
10000e8c:	20832b16 	blt	r4,r2,10001b3c <___vfprintf_internal_r+0x13a0>
10000e90:	d8812787 	ldb	r2,1182(sp)
10000e94:	42000204 	addi	r8,r8,8
10000e98:	10000c26 	beq	r2,zero,10000ecc <___vfprintf_internal_r+0x730>
10000e9c:	d8811f17 	ldw	r2,1148(sp)
10000ea0:	d9012784 	addi	r4,sp,1182
10000ea4:	18c00044 	addi	r3,r3,1
10000ea8:	10800044 	addi	r2,r2,1
10000eac:	41000015 	stw	r4,0(r8)
10000eb0:	01000044 	movi	r4,1
10000eb4:	41000115 	stw	r4,4(r8)
10000eb8:	d8c12015 	stw	r3,1152(sp)
10000ebc:	d8811f15 	stw	r2,1148(sp)
10000ec0:	010001c4 	movi	r4,7
10000ec4:	2082c416 	blt	r4,r2,100019d8 <___vfprintf_internal_r+0x123c>
10000ec8:	42000204 	addi	r8,r8,8
10000ecc:	d8812c17 	ldw	r2,1200(sp)
10000ed0:	10000c26 	beq	r2,zero,10000f04 <___vfprintf_internal_r+0x768>
10000ed4:	d8811f17 	ldw	r2,1148(sp)
10000ed8:	d9012704 	addi	r4,sp,1180
10000edc:	18c00084 	addi	r3,r3,2
10000ee0:	10800044 	addi	r2,r2,1
10000ee4:	41000015 	stw	r4,0(r8)
10000ee8:	01000084 	movi	r4,2
10000eec:	41000115 	stw	r4,4(r8)
10000ef0:	d8c12015 	stw	r3,1152(sp)
10000ef4:	d8811f15 	stw	r2,1148(sp)
10000ef8:	010001c4 	movi	r4,7
10000efc:	2082be16 	blt	r4,r2,100019f8 <___vfprintf_internal_r+0x125c>
10000f00:	42000204 	addi	r8,r8,8
10000f04:	d9013017 	ldw	r4,1216(sp)
10000f08:	00802004 	movi	r2,128
10000f0c:	20822026 	beq	r4,r2,10001790 <___vfprintf_internal_r+0xff4>
10000f10:	d9413217 	ldw	r5,1224(sp)
10000f14:	2c67c83a 	sub	r19,r5,r17
10000f18:	04c0260e 	bge	zero,r19,10000fb4 <___vfprintf_internal_r+0x818>
10000f1c:	05400404 	movi	r21,16
10000f20:	d8811f17 	ldw	r2,1148(sp)
10000f24:	acc4720e 	bge	r21,r19,100020f0 <___vfprintf_internal_r+0x1954>
10000f28:	01440074 	movhi	r5,4097
10000f2c:	297dce84 	addi	r5,r5,-2246
10000f30:	d9412c15 	stw	r5,1200(sp)
10000f34:	048001c4 	movi	r18,7
10000f38:	00000306 	br	10000f48 <___vfprintf_internal_r+0x7ac>
10000f3c:	9cfffc04 	addi	r19,r19,-16
10000f40:	42000204 	addi	r8,r8,8
10000f44:	acc0110e 	bge	r21,r19,10000f8c <___vfprintf_internal_r+0x7f0>
10000f48:	18c00404 	addi	r3,r3,16
10000f4c:	10800044 	addi	r2,r2,1
10000f50:	45000015 	stw	r20,0(r8)
10000f54:	45400115 	stw	r21,4(r8)
10000f58:	d8c12015 	stw	r3,1152(sp)
10000f5c:	d8811f15 	stw	r2,1148(sp)
10000f60:	90bff60e 	bge	r18,r2,10000f3c <__alt_data_end+0xf8000f3c>
10000f64:	b809883a 	mov	r4,r23
10000f68:	b00b883a 	mov	r5,r22
10000f6c:	d9811e04 	addi	r6,sp,1144
10000f70:	0007bdc0 	call	10007bdc <__sprint_r>
10000f74:	103f211e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10000f78:	9cfffc04 	addi	r19,r19,-16
10000f7c:	d8c12017 	ldw	r3,1152(sp)
10000f80:	d8811f17 	ldw	r2,1148(sp)
10000f84:	da000404 	addi	r8,sp,16
10000f88:	acffef16 	blt	r21,r19,10000f48 <__alt_data_end+0xf8000f48>
10000f8c:	d9012c17 	ldw	r4,1200(sp)
10000f90:	1cc7883a 	add	r3,r3,r19
10000f94:	10800044 	addi	r2,r2,1
10000f98:	41000015 	stw	r4,0(r8)
10000f9c:	44c00115 	stw	r19,4(r8)
10000fa0:	d8c12015 	stw	r3,1152(sp)
10000fa4:	d8811f15 	stw	r2,1148(sp)
10000fa8:	010001c4 	movi	r4,7
10000fac:	20828216 	blt	r4,r2,100019b8 <___vfprintf_internal_r+0x121c>
10000fb0:	42000204 	addi	r8,r8,8
10000fb4:	e080400c 	andi	r2,fp,256
10000fb8:	1001ac1e 	bne	r2,zero,1000166c <___vfprintf_internal_r+0xed0>
10000fbc:	d8811f17 	ldw	r2,1148(sp)
10000fc0:	d9413117 	ldw	r5,1220(sp)
10000fc4:	1c47883a 	add	r3,r3,r17
10000fc8:	10800044 	addi	r2,r2,1
10000fcc:	41400015 	stw	r5,0(r8)
10000fd0:	44400115 	stw	r17,4(r8)
10000fd4:	d8c12015 	stw	r3,1152(sp)
10000fd8:	d8811f15 	stw	r2,1148(sp)
10000fdc:	010001c4 	movi	r4,7
10000fe0:	20825d16 	blt	r4,r2,10001958 <___vfprintf_internal_r+0x11bc>
10000fe4:	42000204 	addi	r8,r8,8
10000fe8:	e080010c 	andi	r2,fp,4
10000fec:	10003126 	beq	r2,zero,100010b4 <___vfprintf_internal_r+0x918>
10000ff0:	d8812e17 	ldw	r2,1208(sp)
10000ff4:	d9012b17 	ldw	r4,1196(sp)
10000ff8:	1121c83a 	sub	r16,r2,r4
10000ffc:	04002d0e 	bge	zero,r16,100010b4 <___vfprintf_internal_r+0x918>
10001000:	04400404 	movi	r17,16
10001004:	d8811f17 	ldw	r2,1148(sp)
10001008:	8c05340e 	bge	r17,r16,100024dc <___vfprintf_internal_r+0x1d40>
1000100c:	01040074 	movhi	r4,4097
10001010:	213dd284 	addi	r4,r4,-2230
10001014:	d9013615 	stw	r4,1240(sp)
10001018:	048001c4 	movi	r18,7
1000101c:	00000306 	br	1000102c <___vfprintf_internal_r+0x890>
10001020:	843ffc04 	addi	r16,r16,-16
10001024:	42000204 	addi	r8,r8,8
10001028:	8c00130e 	bge	r17,r16,10001078 <___vfprintf_internal_r+0x8dc>
1000102c:	01440074 	movhi	r5,4097
10001030:	18c00404 	addi	r3,r3,16
10001034:	10800044 	addi	r2,r2,1
10001038:	297dd284 	addi	r5,r5,-2230
1000103c:	41400015 	stw	r5,0(r8)
10001040:	44400115 	stw	r17,4(r8)
10001044:	d8c12015 	stw	r3,1152(sp)
10001048:	d8811f15 	stw	r2,1148(sp)
1000104c:	90bff40e 	bge	r18,r2,10001020 <__alt_data_end+0xf8001020>
10001050:	b809883a 	mov	r4,r23
10001054:	b00b883a 	mov	r5,r22
10001058:	d9811e04 	addi	r6,sp,1144
1000105c:	0007bdc0 	call	10007bdc <__sprint_r>
10001060:	103ee61e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001064:	843ffc04 	addi	r16,r16,-16
10001068:	d8c12017 	ldw	r3,1152(sp)
1000106c:	d8811f17 	ldw	r2,1148(sp)
10001070:	da000404 	addi	r8,sp,16
10001074:	8c3fed16 	blt	r17,r16,1000102c <__alt_data_end+0xf800102c>
10001078:	d9013617 	ldw	r4,1240(sp)
1000107c:	1c07883a 	add	r3,r3,r16
10001080:	10800044 	addi	r2,r2,1
10001084:	41000015 	stw	r4,0(r8)
10001088:	44000115 	stw	r16,4(r8)
1000108c:	d8c12015 	stw	r3,1152(sp)
10001090:	d8811f15 	stw	r2,1148(sp)
10001094:	010001c4 	movi	r4,7
10001098:	2080060e 	bge	r4,r2,100010b4 <___vfprintf_internal_r+0x918>
1000109c:	b809883a 	mov	r4,r23
100010a0:	b00b883a 	mov	r5,r22
100010a4:	d9811e04 	addi	r6,sp,1144
100010a8:	0007bdc0 	call	10007bdc <__sprint_r>
100010ac:	103ed31e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
100010b0:	d8c12017 	ldw	r3,1152(sp)
100010b4:	df012b17 	ldw	fp,1196(sp)
100010b8:	d9412e17 	ldw	r5,1208(sp)
100010bc:	e140010e 	bge	fp,r5,100010c4 <___vfprintf_internal_r+0x928>
100010c0:	2839883a 	mov	fp,r5
100010c4:	d8812f17 	ldw	r2,1212(sp)
100010c8:	1705883a 	add	r2,r2,fp
100010cc:	d8812f15 	stw	r2,1212(sp)
100010d0:	1802291e 	bne	r3,zero,10001978 <___vfprintf_internal_r+0x11dc>
100010d4:	d8c12a17 	ldw	r3,1192(sp)
100010d8:	d8011f15 	stw	zero,1148(sp)
100010dc:	da000404 	addi	r8,sp,16
100010e0:	18800007 	ldb	r2,0(r3)
100010e4:	103ded1e 	bne	r2,zero,1000089c <__alt_data_end+0xf800089c>
100010e8:	dc012a17 	ldw	r16,1192(sp)
100010ec:	003e0506 	br	10000904 <__alt_data_end+0xf8000904>
100010f0:	d9012d17 	ldw	r4,1204(sp)
100010f4:	d9412d17 	ldw	r5,1204(sp)
100010f8:	da012a17 	ldw	r8,1192(sp)
100010fc:	21000017 	ldw	r4,0(r4)
10001100:	29400117 	ldw	r5,4(r5)
10001104:	df012a15 	stw	fp,1192(sp)
10001108:	9839883a 	mov	fp,r19
1000110c:	dcc12b03 	ldbu	r19,1196(sp)
10001110:	d9013715 	stw	r4,1244(sp)
10001114:	d9413915 	stw	r5,1252(sp)
10001118:	da013f15 	stw	r8,1276(sp)
1000111c:	da413e15 	stw	r9,1272(sp)
10001120:	dcc12785 	stb	r19,1182(sp)
10001124:	00078380 	call	10007838 <__fpclassifyd>
10001128:	d8c12d17 	ldw	r3,1204(sp)
1000112c:	04400044 	movi	r17,1
10001130:	da013f17 	ldw	r8,1276(sp)
10001134:	1c800204 	addi	r18,r3,8
10001138:	da413e17 	ldw	r9,1272(sp)
1000113c:	d9013717 	ldw	r4,1244(sp)
10001140:	d9413917 	ldw	r5,1252(sp)
10001144:	1443451e 	bne	r2,r17,10001e5c <___vfprintf_internal_r+0x16c0>
10001148:	000d883a 	mov	r6,zero
1000114c:	000f883a 	mov	r7,zero
10001150:	000ba900 	call	1000ba90 <__ledf2>
10001154:	da013f17 	ldw	r8,1276(sp)
10001158:	1004fe16 	blt	r2,zero,10002554 <___vfprintf_internal_r+0x1db8>
1000115c:	dcc12783 	ldbu	r19,1182(sp)
10001160:	008011c4 	movi	r2,71
10001164:	14045d0e 	bge	r2,r16,100022dc <___vfprintf_internal_r+0x1b40>
10001168:	01440074 	movhi	r5,4097
1000116c:	297dbf04 	addi	r5,r5,-2308
10001170:	d9413115 	stw	r5,1220(sp)
10001174:	00c000c4 	movi	r3,3
10001178:	00bfdfc4 	movi	r2,-129
1000117c:	d8c12b15 	stw	r3,1196(sp)
10001180:	e0b8703a 	and	fp,fp,r2
10001184:	dc812d15 	stw	r18,1204(sp)
10001188:	1823883a 	mov	r17,r3
1000118c:	d8013215 	stw	zero,1224(sp)
10001190:	d8013415 	stw	zero,1232(sp)
10001194:	003f0106 	br	10000d9c <__alt_data_end+0xf8000d9c>
10001198:	9cc00214 	ori	r19,r19,8
1000119c:	e005883a 	mov	r2,fp
100011a0:	e4000007 	ldb	r16,0(fp)
100011a4:	003de506 	br	1000093c <__alt_data_end+0xf800093c>
100011a8:	da012a17 	ldw	r8,1192(sp)
100011ac:	df012a15 	stw	fp,1192(sp)
100011b0:	9f000414 	ori	fp,r19,16
100011b4:	e0c0080c 	andi	r3,fp,32
100011b8:	d8812d17 	ldw	r2,1204(sp)
100011bc:	18007626 	beq	r3,zero,10001398 <___vfprintf_internal_r+0xbfc>
100011c0:	d9412d17 	ldw	r5,1204(sp)
100011c4:	14800017 	ldw	r18,0(r2)
100011c8:	15400117 	ldw	r21,4(r2)
100011cc:	29400204 	addi	r5,r5,8
100011d0:	d9412d15 	stw	r5,1204(sp)
100011d4:	0005883a 	mov	r2,zero
100011d8:	9546b03a 	or	r3,r18,r21
100011dc:	d8012785 	stb	zero,1182(sp)
100011e0:	da413215 	stw	r9,1224(sp)
100011e4:	0027883a 	mov	r19,zero
100011e8:	003ecd06 	br	10000d20 <__alt_data_end+0xf8000d20>
100011ec:	da012a17 	ldw	r8,1192(sp)
100011f0:	df012a15 	stw	fp,1192(sp)
100011f4:	9f000414 	ori	fp,r19,16
100011f8:	e0c0080c 	andi	r3,fp,32
100011fc:	d8812d17 	ldw	r2,1204(sp)
10001200:	18002c26 	beq	r3,zero,100012b4 <___vfprintf_internal_r+0xb18>
10001204:	d9012d17 	ldw	r4,1204(sp)
10001208:	14800017 	ldw	r18,0(r2)
1000120c:	15400117 	ldw	r21,4(r2)
10001210:	21000204 	addi	r4,r4,8
10001214:	d9012d15 	stw	r4,1204(sp)
10001218:	00800044 	movi	r2,1
1000121c:	9546b03a 	or	r3,r18,r21
10001220:	003fee06 	br	100011dc <__alt_data_end+0xf80011dc>
10001224:	da012a17 	ldw	r8,1192(sp)
10001228:	df012a15 	stw	fp,1192(sp)
1000122c:	9839883a 	mov	fp,r19
10001230:	dcc12b03 	ldbu	r19,1196(sp)
10001234:	01440074 	movhi	r5,4097
10001238:	297dc204 	addi	r5,r5,-2296
1000123c:	dcc12785 	stb	r19,1182(sp)
10001240:	d9413b15 	stw	r5,1260(sp)
10001244:	e0c0080c 	andi	r3,fp,32
10001248:	d8812d17 	ldw	r2,1204(sp)
1000124c:	18002e26 	beq	r3,zero,10001308 <___vfprintf_internal_r+0xb6c>
10001250:	d9412d17 	ldw	r5,1204(sp)
10001254:	14800017 	ldw	r18,0(r2)
10001258:	15400117 	ldw	r21,4(r2)
1000125c:	29400204 	addi	r5,r5,8
10001260:	d9412d15 	stw	r5,1204(sp)
10001264:	e080004c 	andi	r2,fp,1
10001268:	10025c26 	beq	r2,zero,10001bdc <___vfprintf_internal_r+0x1440>
1000126c:	9546b03a 	or	r3,r18,r21
10001270:	18038f26 	beq	r3,zero,100020b0 <___vfprintf_internal_r+0x1914>
10001274:	00800c04 	movi	r2,48
10001278:	d8812705 	stb	r2,1180(sp)
1000127c:	dc012745 	stb	r16,1181(sp)
10001280:	e7000094 	ori	fp,fp,2
10001284:	00800084 	movi	r2,2
10001288:	003fd406 	br	100011dc <__alt_data_end+0xf80011dc>
1000128c:	9cc00814 	ori	r19,r19,32
10001290:	e005883a 	mov	r2,fp
10001294:	e4000007 	ldb	r16,0(fp)
10001298:	003da806 	br	1000093c <__alt_data_end+0xf800093c>
1000129c:	da012a17 	ldw	r8,1192(sp)
100012a0:	df012a15 	stw	fp,1192(sp)
100012a4:	9839883a 	mov	fp,r19
100012a8:	e0c0080c 	andi	r3,fp,32
100012ac:	d8812d17 	ldw	r2,1204(sp)
100012b0:	183fd41e 	bne	r3,zero,10001204 <__alt_data_end+0xf8001204>
100012b4:	e0c0040c 	andi	r3,fp,16
100012b8:	18035f26 	beq	r3,zero,10002038 <___vfprintf_internal_r+0x189c>
100012bc:	d9412d17 	ldw	r5,1204(sp)
100012c0:	14800017 	ldw	r18,0(r2)
100012c4:	002b883a 	mov	r21,zero
100012c8:	29400104 	addi	r5,r5,4
100012cc:	d9412d15 	stw	r5,1204(sp)
100012d0:	00800044 	movi	r2,1
100012d4:	9007883a 	mov	r3,r18
100012d8:	003fc006 	br	100011dc <__alt_data_end+0xf80011dc>
100012dc:	da012a17 	ldw	r8,1192(sp)
100012e0:	df012a15 	stw	fp,1192(sp)
100012e4:	9839883a 	mov	fp,r19
100012e8:	dcc12b03 	ldbu	r19,1196(sp)
100012ec:	01040074 	movhi	r4,4097
100012f0:	213dc704 	addi	r4,r4,-2276
100012f4:	d9013b15 	stw	r4,1260(sp)
100012f8:	dcc12785 	stb	r19,1182(sp)
100012fc:	e0c0080c 	andi	r3,fp,32
10001300:	d8812d17 	ldw	r2,1204(sp)
10001304:	183fd21e 	bne	r3,zero,10001250 <__alt_data_end+0xf8001250>
10001308:	e0c0040c 	andi	r3,fp,16
1000130c:	18035426 	beq	r3,zero,10002060 <___vfprintf_internal_r+0x18c4>
10001310:	d8c12d17 	ldw	r3,1204(sp)
10001314:	14800017 	ldw	r18,0(r2)
10001318:	002b883a 	mov	r21,zero
1000131c:	18c00104 	addi	r3,r3,4
10001320:	d8c12d15 	stw	r3,1204(sp)
10001324:	003fcf06 	br	10001264 <__alt_data_end+0xf8001264>
10001328:	e4000007 	ldb	r16,0(fp)
1000132c:	00801b04 	movi	r2,108
10001330:	8083f726 	beq	r16,r2,10002310 <___vfprintf_internal_r+0x1b74>
10001334:	9cc00414 	ori	r19,r19,16
10001338:	e005883a 	mov	r2,fp
1000133c:	003d7f06 	br	1000093c <__alt_data_end+0xf800093c>
10001340:	da012a17 	ldw	r8,1192(sp)
10001344:	df012a15 	stw	fp,1192(sp)
10001348:	9839883a 	mov	fp,r19
1000134c:	dcc12b03 	ldbu	r19,1196(sp)
10001350:	e080080c 	andi	r2,fp,32
10001354:	dcc12785 	stb	r19,1182(sp)
10001358:	10032226 	beq	r2,zero,10001fe4 <___vfprintf_internal_r+0x1848>
1000135c:	d9412d17 	ldw	r5,1204(sp)
10001360:	d9012f17 	ldw	r4,1212(sp)
10001364:	28800017 	ldw	r2,0(r5)
10001368:	2007d7fa 	srai	r3,r4,31
1000136c:	29400104 	addi	r5,r5,4
10001370:	d9412d15 	stw	r5,1204(sp)
10001374:	11000015 	stw	r4,0(r2)
10001378:	10c00115 	stw	r3,4(r2)
1000137c:	003d4406 	br	10000890 <__alt_data_end+0xf8000890>
10001380:	da012a17 	ldw	r8,1192(sp)
10001384:	df012a15 	stw	fp,1192(sp)
10001388:	9839883a 	mov	fp,r19
1000138c:	e0c0080c 	andi	r3,fp,32
10001390:	d8812d17 	ldw	r2,1204(sp)
10001394:	183f8a1e 	bne	r3,zero,100011c0 <__alt_data_end+0xf80011c0>
10001398:	e0c0040c 	andi	r3,fp,16
1000139c:	18031c26 	beq	r3,zero,10002010 <___vfprintf_internal_r+0x1874>
100013a0:	14800017 	ldw	r18,0(r2)
100013a4:	d8812d17 	ldw	r2,1204(sp)
100013a8:	002b883a 	mov	r21,zero
100013ac:	9007883a 	mov	r3,r18
100013b0:	10800104 	addi	r2,r2,4
100013b4:	d8812d15 	stw	r2,1204(sp)
100013b8:	0005883a 	mov	r2,zero
100013bc:	003f8706 	br	100011dc <__alt_data_end+0xf80011dc>
100013c0:	d9412d17 	ldw	r5,1204(sp)
100013c4:	00800c04 	movi	r2,48
100013c8:	d8812705 	stb	r2,1180(sp)
100013cc:	2c800017 	ldw	r18,0(r5)
100013d0:	00801e04 	movi	r2,120
100013d4:	d8812745 	stb	r2,1181(sp)
100013d8:	00840074 	movhi	r2,4097
100013dc:	10bdc704 	addi	r2,r2,-2276
100013e0:	29400104 	addi	r5,r5,4
100013e4:	da012a17 	ldw	r8,1192(sp)
100013e8:	d8813b15 	stw	r2,1260(sp)
100013ec:	df012a15 	stw	fp,1192(sp)
100013f0:	002b883a 	mov	r21,zero
100013f4:	9f000094 	ori	fp,r19,2
100013f8:	d9412d15 	stw	r5,1204(sp)
100013fc:	00800084 	movi	r2,2
10001400:	04001e04 	movi	r16,120
10001404:	9007883a 	mov	r3,r18
10001408:	003f7406 	br	100011dc <__alt_data_end+0xf80011dc>
1000140c:	da012a17 	ldw	r8,1192(sp)
10001410:	df012a15 	stw	fp,1192(sp)
10001414:	9839883a 	mov	fp,r19
10001418:	dcc12b03 	ldbu	r19,1196(sp)
1000141c:	e080080c 	andi	r2,fp,32
10001420:	d8c12d17 	ldw	r3,1204(sp)
10001424:	dcc12785 	stb	r19,1182(sp)
10001428:	103e321e 	bne	r2,zero,10000cf4 <__alt_data_end+0xf8000cf4>
1000142c:	e080040c 	andi	r2,fp,16
10001430:	10031326 	beq	r2,zero,10002080 <___vfprintf_internal_r+0x18e4>
10001434:	1c800017 	ldw	r18,0(r3)
10001438:	d9412d17 	ldw	r5,1204(sp)
1000143c:	902bd7fa 	srai	r21,r18,31
10001440:	29400104 	addi	r5,r5,4
10001444:	d9412d15 	stw	r5,1204(sp)
10001448:	a805883a 	mov	r2,r21
1000144c:	003e2f06 	br	10000d0c <__alt_data_end+0xf8000d0c>
10001450:	9cc01014 	ori	r19,r19,64
10001454:	e005883a 	mov	r2,fp
10001458:	e4000007 	ldb	r16,0(fp)
1000145c:	003d3706 	br	1000093c <__alt_data_end+0xf800093c>
10001460:	d8c12d17 	ldw	r3,1204(sp)
10001464:	d9012d17 	ldw	r4,1204(sp)
10001468:	da012a17 	ldw	r8,1192(sp)
1000146c:	18800017 	ldw	r2,0(r3)
10001470:	21000104 	addi	r4,r4,4
10001474:	00c00044 	movi	r3,1
10001478:	df012a15 	stw	fp,1192(sp)
1000147c:	d8c12b15 	stw	r3,1196(sp)
10001480:	9839883a 	mov	fp,r19
10001484:	d8012785 	stb	zero,1182(sp)
10001488:	d8810405 	stb	r2,1040(sp)
1000148c:	d9012d15 	stw	r4,1204(sp)
10001490:	1823883a 	mov	r17,r3
10001494:	d8c10404 	addi	r3,sp,1040
10001498:	d8013215 	stw	zero,1224(sp)
1000149c:	d8013415 	stw	zero,1232(sp)
100014a0:	d8c13115 	stw	r3,1220(sp)
100014a4:	0005883a 	mov	r2,zero
100014a8:	003e4306 	br	10000db8 <__alt_data_end+0xf8000db8>
100014ac:	d8812b07 	ldb	r2,1196(sp)
100014b0:	1002fc1e 	bne	r2,zero,100020a4 <___vfprintf_internal_r+0x1908>
100014b4:	00c00804 	movi	r3,32
100014b8:	d8c12b05 	stb	r3,1196(sp)
100014bc:	e005883a 	mov	r2,fp
100014c0:	e4000007 	ldb	r16,0(fp)
100014c4:	003d1d06 	br	1000093c <__alt_data_end+0xf800093c>
100014c8:	9cc00054 	ori	r19,r19,1
100014cc:	e005883a 	mov	r2,fp
100014d0:	e4000007 	ldb	r16,0(fp)
100014d4:	003d1906 	br	1000093c <__alt_data_end+0xf800093c>
100014d8:	d9012d17 	ldw	r4,1204(sp)
100014dc:	d9412d17 	ldw	r5,1204(sp)
100014e0:	21000017 	ldw	r4,0(r4)
100014e4:	28c00104 	addi	r3,r5,4
100014e8:	d9012e15 	stw	r4,1208(sp)
100014ec:	20038c16 	blt	r4,zero,10002320 <___vfprintf_internal_r+0x1b84>
100014f0:	d8c12d15 	stw	r3,1204(sp)
100014f4:	e005883a 	mov	r2,fp
100014f8:	e4000007 	ldb	r16,0(fp)
100014fc:	003d0f06 	br	1000093c <__alt_data_end+0xf800093c>
10001500:	00c00ac4 	movi	r3,43
10001504:	d8c12b05 	stb	r3,1196(sp)
10001508:	e005883a 	mov	r2,fp
1000150c:	e4000007 	ldb	r16,0(fp)
10001510:	003d0a06 	br	1000093c <__alt_data_end+0xf800093c>
10001514:	d8c12d17 	ldw	r3,1204(sp)
10001518:	d9012d17 	ldw	r4,1204(sp)
1000151c:	da012a17 	ldw	r8,1192(sp)
10001520:	18c00017 	ldw	r3,0(r3)
10001524:	df012a15 	stw	fp,1192(sp)
10001528:	d8012785 	stb	zero,1182(sp)
1000152c:	d8c13115 	stw	r3,1220(sp)
10001530:	9839883a 	mov	fp,r19
10001534:	24800104 	addi	r18,r4,4
10001538:	1803f726 	beq	r3,zero,10002518 <___vfprintf_internal_r+0x1d7c>
1000153c:	d9013117 	ldw	r4,1220(sp)
10001540:	48038916 	blt	r9,zero,10002368 <___vfprintf_internal_r+0x1bcc>
10001544:	480d883a 	mov	r6,r9
10001548:	000b883a 	mov	r5,zero
1000154c:	da013f15 	stw	r8,1276(sp)
10001550:	da413e15 	stw	r9,1272(sp)
10001554:	0005db00 	call	10005db0 <memchr>
10001558:	da013f17 	ldw	r8,1276(sp)
1000155c:	da413e17 	ldw	r9,1272(sp)
10001560:	10045926 	beq	r2,zero,100026c8 <___vfprintf_internal_r+0x1f2c>
10001564:	d8c13117 	ldw	r3,1220(sp)
10001568:	10e3c83a 	sub	r17,r2,r3
1000156c:	4c433516 	blt	r9,r17,10002244 <___vfprintf_internal_r+0x1aa8>
10001570:	8805883a 	mov	r2,r17
10001574:	88038116 	blt	r17,zero,1000237c <___vfprintf_internal_r+0x1be0>
10001578:	dcc12783 	ldbu	r19,1182(sp)
1000157c:	d8812b15 	stw	r2,1196(sp)
10001580:	dc812d15 	stw	r18,1204(sp)
10001584:	d8013215 	stw	zero,1224(sp)
10001588:	d8013415 	stw	zero,1232(sp)
1000158c:	003e0306 	br	10000d9c <__alt_data_end+0xf8000d9c>
10001590:	da012a17 	ldw	r8,1192(sp)
10001594:	df012a15 	stw	fp,1192(sp)
10001598:	9839883a 	mov	fp,r19
1000159c:	dcc12b03 	ldbu	r19,1196(sp)
100015a0:	dcc12785 	stb	r19,1182(sp)
100015a4:	803d8f26 	beq	r16,zero,10000be4 <__alt_data_end+0xf8000be4>
100015a8:	00c00044 	movi	r3,1
100015ac:	d8c12b15 	stw	r3,1196(sp)
100015b0:	dc010405 	stb	r16,1040(sp)
100015b4:	d8012785 	stb	zero,1182(sp)
100015b8:	003fb506 	br	10001490 <__alt_data_end+0xf8001490>
100015bc:	d8c12017 	ldw	r3,1152(sp)
100015c0:	003e3506 	br	10000e98 <__alt_data_end+0xf8000e98>
100015c4:	10803fcc 	andi	r2,r2,255
100015c8:	00c00044 	movi	r3,1
100015cc:	10fddc1e 	bne	r2,r3,10000d40 <__alt_data_end+0xf8000d40>
100015d0:	a800021e 	bne	r21,zero,100015dc <___vfprintf_internal_r+0xe40>
100015d4:	00800244 	movi	r2,9
100015d8:	14801e2e 	bgeu	r2,r18,10001654 <___vfprintf_internal_r+0xeb8>
100015dc:	dc012b15 	stw	r16,1196(sp)
100015e0:	dc410e04 	addi	r17,sp,1080
100015e4:	9021883a 	mov	r16,r18
100015e8:	da012c15 	stw	r8,1200(sp)
100015ec:	a825883a 	mov	r18,r21
100015f0:	482b883a 	mov	r21,r9
100015f4:	8009883a 	mov	r4,r16
100015f8:	900b883a 	mov	r5,r18
100015fc:	01800284 	movi	r6,10
10001600:	000f883a 	mov	r7,zero
10001604:	0009fc80 	call	10009fc8 <__umoddi3>
10001608:	10800c04 	addi	r2,r2,48
1000160c:	8c7fffc4 	addi	r17,r17,-1
10001610:	8009883a 	mov	r4,r16
10001614:	900b883a 	mov	r5,r18
10001618:	01800284 	movi	r6,10
1000161c:	000f883a 	mov	r7,zero
10001620:	88800005 	stb	r2,0(r17)
10001624:	00099880 	call	10009988 <__udivdi3>
10001628:	1021883a 	mov	r16,r2
1000162c:	10c4b03a 	or	r2,r2,r3
10001630:	1825883a 	mov	r18,r3
10001634:	103fef1e 	bne	r2,zero,100015f4 <__alt_data_end+0xf80015f4>
10001638:	d9012817 	ldw	r4,1184(sp)
1000163c:	dc413115 	stw	r17,1220(sp)
10001640:	dc012b17 	ldw	r16,1196(sp)
10001644:	da012c17 	ldw	r8,1200(sp)
10001648:	a813883a 	mov	r9,r21
1000164c:	2463c83a 	sub	r17,r4,r17
10001650:	003dcd06 	br	10000d88 <__alt_data_end+0xf8000d88>
10001654:	94800c04 	addi	r18,r18,48
10001658:	d8c10dc4 	addi	r3,sp,1079
1000165c:	dc810dc5 	stb	r18,1079(sp)
10001660:	dc413c17 	ldw	r17,1264(sp)
10001664:	d8c13115 	stw	r3,1220(sp)
10001668:	003dc706 	br	10000d88 <__alt_data_end+0xf8000d88>
1000166c:	00801944 	movi	r2,101
10001670:	1400720e 	bge	r2,r16,1000183c <___vfprintf_internal_r+0x10a0>
10001674:	d9013717 	ldw	r4,1244(sp)
10001678:	d9413917 	ldw	r5,1252(sp)
1000167c:	000d883a 	mov	r6,zero
10001680:	000f883a 	mov	r7,zero
10001684:	d8c13d15 	stw	r3,1268(sp)
10001688:	da013f15 	stw	r8,1276(sp)
1000168c:	000b92c0 	call	1000b92c <__eqdf2>
10001690:	d8c13d17 	ldw	r3,1268(sp)
10001694:	da013f17 	ldw	r8,1276(sp)
10001698:	1000f41e 	bne	r2,zero,10001a6c <___vfprintf_internal_r+0x12d0>
1000169c:	d8811f17 	ldw	r2,1148(sp)
100016a0:	01040074 	movhi	r4,4097
100016a4:	213dce04 	addi	r4,r4,-2248
100016a8:	18c00044 	addi	r3,r3,1
100016ac:	10800044 	addi	r2,r2,1
100016b0:	41000015 	stw	r4,0(r8)
100016b4:	01000044 	movi	r4,1
100016b8:	41000115 	stw	r4,4(r8)
100016bc:	d8c12015 	stw	r3,1152(sp)
100016c0:	d8811f15 	stw	r2,1148(sp)
100016c4:	010001c4 	movi	r4,7
100016c8:	20828d16 	blt	r4,r2,10002100 <___vfprintf_internal_r+0x1964>
100016cc:	42000204 	addi	r8,r8,8
100016d0:	d8812617 	ldw	r2,1176(sp)
100016d4:	d9413317 	ldw	r5,1228(sp)
100016d8:	11400216 	blt	r2,r5,100016e4 <___vfprintf_internal_r+0xf48>
100016dc:	e080004c 	andi	r2,fp,1
100016e0:	103e4126 	beq	r2,zero,10000fe8 <__alt_data_end+0xf8000fe8>
100016e4:	d8813817 	ldw	r2,1248(sp)
100016e8:	d9013517 	ldw	r4,1236(sp)
100016ec:	d9413817 	ldw	r5,1248(sp)
100016f0:	1887883a 	add	r3,r3,r2
100016f4:	d8811f17 	ldw	r2,1148(sp)
100016f8:	41000015 	stw	r4,0(r8)
100016fc:	41400115 	stw	r5,4(r8)
10001700:	10800044 	addi	r2,r2,1
10001704:	d8c12015 	stw	r3,1152(sp)
10001708:	d8811f15 	stw	r2,1148(sp)
1000170c:	010001c4 	movi	r4,7
10001710:	20830916 	blt	r4,r2,10002338 <___vfprintf_internal_r+0x1b9c>
10001714:	42000204 	addi	r8,r8,8
10001718:	d8813317 	ldw	r2,1228(sp)
1000171c:	143fffc4 	addi	r16,r2,-1
10001720:	043e310e 	bge	zero,r16,10000fe8 <__alt_data_end+0xf8000fe8>
10001724:	04400404 	movi	r17,16
10001728:	d8811f17 	ldw	r2,1148(sp)
1000172c:	8c007e0e 	bge	r17,r16,10001928 <___vfprintf_internal_r+0x118c>
10001730:	01440074 	movhi	r5,4097
10001734:	297dce84 	addi	r5,r5,-2246
10001738:	d9412c15 	stw	r5,1200(sp)
1000173c:	04c001c4 	movi	r19,7
10001740:	00000306 	br	10001750 <___vfprintf_internal_r+0xfb4>
10001744:	42000204 	addi	r8,r8,8
10001748:	843ffc04 	addi	r16,r16,-16
1000174c:	8c00790e 	bge	r17,r16,10001934 <___vfprintf_internal_r+0x1198>
10001750:	18c00404 	addi	r3,r3,16
10001754:	10800044 	addi	r2,r2,1
10001758:	45000015 	stw	r20,0(r8)
1000175c:	44400115 	stw	r17,4(r8)
10001760:	d8c12015 	stw	r3,1152(sp)
10001764:	d8811f15 	stw	r2,1148(sp)
10001768:	98bff60e 	bge	r19,r2,10001744 <__alt_data_end+0xf8001744>
1000176c:	b809883a 	mov	r4,r23
10001770:	b00b883a 	mov	r5,r22
10001774:	d9811e04 	addi	r6,sp,1144
10001778:	0007bdc0 	call	10007bdc <__sprint_r>
1000177c:	103d1f1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001780:	d8c12017 	ldw	r3,1152(sp)
10001784:	d8811f17 	ldw	r2,1148(sp)
10001788:	da000404 	addi	r8,sp,16
1000178c:	003fee06 	br	10001748 <__alt_data_end+0xf8001748>
10001790:	d9412e17 	ldw	r5,1208(sp)
10001794:	d8812b17 	ldw	r2,1196(sp)
10001798:	28a7c83a 	sub	r19,r5,r2
1000179c:	04fddc0e 	bge	zero,r19,10000f10 <__alt_data_end+0xf8000f10>
100017a0:	05400404 	movi	r21,16
100017a4:	d8811f17 	ldw	r2,1148(sp)
100017a8:	acc3870e 	bge	r21,r19,100025c8 <___vfprintf_internal_r+0x1e2c>
100017ac:	01440074 	movhi	r5,4097
100017b0:	297dce84 	addi	r5,r5,-2246
100017b4:	d9412c15 	stw	r5,1200(sp)
100017b8:	048001c4 	movi	r18,7
100017bc:	00000306 	br	100017cc <___vfprintf_internal_r+0x1030>
100017c0:	9cfffc04 	addi	r19,r19,-16
100017c4:	42000204 	addi	r8,r8,8
100017c8:	acc0110e 	bge	r21,r19,10001810 <___vfprintf_internal_r+0x1074>
100017cc:	18c00404 	addi	r3,r3,16
100017d0:	10800044 	addi	r2,r2,1
100017d4:	45000015 	stw	r20,0(r8)
100017d8:	45400115 	stw	r21,4(r8)
100017dc:	d8c12015 	stw	r3,1152(sp)
100017e0:	d8811f15 	stw	r2,1148(sp)
100017e4:	90bff60e 	bge	r18,r2,100017c0 <__alt_data_end+0xf80017c0>
100017e8:	b809883a 	mov	r4,r23
100017ec:	b00b883a 	mov	r5,r22
100017f0:	d9811e04 	addi	r6,sp,1144
100017f4:	0007bdc0 	call	10007bdc <__sprint_r>
100017f8:	103d001e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
100017fc:	9cfffc04 	addi	r19,r19,-16
10001800:	d8c12017 	ldw	r3,1152(sp)
10001804:	d8811f17 	ldw	r2,1148(sp)
10001808:	da000404 	addi	r8,sp,16
1000180c:	acffef16 	blt	r21,r19,100017cc <__alt_data_end+0xf80017cc>
10001810:	d9012c17 	ldw	r4,1200(sp)
10001814:	1cc7883a 	add	r3,r3,r19
10001818:	10800044 	addi	r2,r2,1
1000181c:	41000015 	stw	r4,0(r8)
10001820:	44c00115 	stw	r19,4(r8)
10001824:	d8c12015 	stw	r3,1152(sp)
10001828:	d8811f15 	stw	r2,1148(sp)
1000182c:	010001c4 	movi	r4,7
10001830:	20817816 	blt	r4,r2,10001e14 <___vfprintf_internal_r+0x1678>
10001834:	42000204 	addi	r8,r8,8
10001838:	003db506 	br	10000f10 <__alt_data_end+0xf8000f10>
1000183c:	d9413317 	ldw	r5,1228(sp)
10001840:	00800044 	movi	r2,1
10001844:	18c00044 	addi	r3,r3,1
10001848:	11413e0e 	bge	r2,r5,10001d44 <___vfprintf_internal_r+0x15a8>
1000184c:	dc011f17 	ldw	r16,1148(sp)
10001850:	d8813117 	ldw	r2,1220(sp)
10001854:	d8c12015 	stw	r3,1152(sp)
10001858:	84000044 	addi	r16,r16,1
1000185c:	40800015 	stw	r2,0(r8)
10001860:	00800044 	movi	r2,1
10001864:	40800115 	stw	r2,4(r8)
10001868:	dc011f15 	stw	r16,1148(sp)
1000186c:	008001c4 	movi	r2,7
10001870:	14015616 	blt	r2,r16,10001dcc <___vfprintf_internal_r+0x1630>
10001874:	42000204 	addi	r8,r8,8
10001878:	d9013817 	ldw	r4,1248(sp)
1000187c:	d9413517 	ldw	r5,1236(sp)
10001880:	84000044 	addi	r16,r16,1
10001884:	1907883a 	add	r3,r3,r4
10001888:	41400015 	stw	r5,0(r8)
1000188c:	41000115 	stw	r4,4(r8)
10001890:	d8c12015 	stw	r3,1152(sp)
10001894:	dc011f15 	stw	r16,1148(sp)
10001898:	008001c4 	movi	r2,7
1000189c:	14015416 	blt	r2,r16,10001df0 <___vfprintf_internal_r+0x1654>
100018a0:	44400204 	addi	r17,r8,8
100018a4:	d9013717 	ldw	r4,1244(sp)
100018a8:	d9413917 	ldw	r5,1252(sp)
100018ac:	000d883a 	mov	r6,zero
100018b0:	000f883a 	mov	r7,zero
100018b4:	d8c13d15 	stw	r3,1268(sp)
100018b8:	000b92c0 	call	1000b92c <__eqdf2>
100018bc:	d8c13d17 	ldw	r3,1268(sp)
100018c0:	1000a726 	beq	r2,zero,10001b60 <___vfprintf_internal_r+0x13c4>
100018c4:	d9013317 	ldw	r4,1228(sp)
100018c8:	d9413117 	ldw	r5,1220(sp)
100018cc:	84000044 	addi	r16,r16,1
100018d0:	20bfffc4 	addi	r2,r4,-1
100018d4:	1887883a 	add	r3,r3,r2
100018d8:	29000044 	addi	r4,r5,1
100018dc:	88800115 	stw	r2,4(r17)
100018e0:	89000015 	stw	r4,0(r17)
100018e4:	d8c12015 	stw	r3,1152(sp)
100018e8:	dc011f15 	stw	r16,1148(sp)
100018ec:	008001c4 	movi	r2,7
100018f0:	14012d16 	blt	r2,r16,10001da8 <___vfprintf_internal_r+0x160c>
100018f4:	8c400204 	addi	r17,r17,8
100018f8:	d9413a17 	ldw	r5,1256(sp)
100018fc:	dcc122c4 	addi	r19,sp,1163
10001900:	84000044 	addi	r16,r16,1
10001904:	28c7883a 	add	r3,r5,r3
10001908:	8cc00015 	stw	r19,0(r17)
1000190c:	89400115 	stw	r5,4(r17)
10001910:	d8c12015 	stw	r3,1152(sp)
10001914:	dc011f15 	stw	r16,1148(sp)
10001918:	008001c4 	movi	r2,7
1000191c:	14000e16 	blt	r2,r16,10001958 <___vfprintf_internal_r+0x11bc>
10001920:	8a000204 	addi	r8,r17,8
10001924:	003db006 	br	10000fe8 <__alt_data_end+0xf8000fe8>
10001928:	01040074 	movhi	r4,4097
1000192c:	213dce84 	addi	r4,r4,-2246
10001930:	d9012c15 	stw	r4,1200(sp)
10001934:	d9012c17 	ldw	r4,1200(sp)
10001938:	1c07883a 	add	r3,r3,r16
1000193c:	44000115 	stw	r16,4(r8)
10001940:	41000015 	stw	r4,0(r8)
10001944:	10800044 	addi	r2,r2,1
10001948:	d8c12015 	stw	r3,1152(sp)
1000194c:	d8811f15 	stw	r2,1148(sp)
10001950:	010001c4 	movi	r4,7
10001954:	20bda30e 	bge	r4,r2,10000fe4 <__alt_data_end+0xf8000fe4>
10001958:	b809883a 	mov	r4,r23
1000195c:	b00b883a 	mov	r5,r22
10001960:	d9811e04 	addi	r6,sp,1144
10001964:	0007bdc0 	call	10007bdc <__sprint_r>
10001968:	103ca41e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
1000196c:	d8c12017 	ldw	r3,1152(sp)
10001970:	da000404 	addi	r8,sp,16
10001974:	003d9c06 	br	10000fe8 <__alt_data_end+0xf8000fe8>
10001978:	b809883a 	mov	r4,r23
1000197c:	b00b883a 	mov	r5,r22
10001980:	d9811e04 	addi	r6,sp,1144
10001984:	0007bdc0 	call	10007bdc <__sprint_r>
10001988:	103dd226 	beq	r2,zero,100010d4 <__alt_data_end+0xf80010d4>
1000198c:	003c9b06 	br	10000bfc <__alt_data_end+0xf8000bfc>
10001990:	10803fcc 	andi	r2,r2,255
10001994:	1000311e 	bne	r2,zero,10001a5c <___vfprintf_internal_r+0x12c0>
10001998:	e080004c 	andi	r2,fp,1
1000199c:	10002f26 	beq	r2,zero,10001a5c <___vfprintf_internal_r+0x12c0>
100019a0:	00800c04 	movi	r2,48
100019a4:	d8c10dc4 	addi	r3,sp,1079
100019a8:	d8810dc5 	stb	r2,1079(sp)
100019ac:	dc413c17 	ldw	r17,1264(sp)
100019b0:	d8c13115 	stw	r3,1220(sp)
100019b4:	003cf406 	br	10000d88 <__alt_data_end+0xf8000d88>
100019b8:	b809883a 	mov	r4,r23
100019bc:	b00b883a 	mov	r5,r22
100019c0:	d9811e04 	addi	r6,sp,1144
100019c4:	0007bdc0 	call	10007bdc <__sprint_r>
100019c8:	103c8c1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
100019cc:	d8c12017 	ldw	r3,1152(sp)
100019d0:	da000404 	addi	r8,sp,16
100019d4:	003d7706 	br	10000fb4 <__alt_data_end+0xf8000fb4>
100019d8:	b809883a 	mov	r4,r23
100019dc:	b00b883a 	mov	r5,r22
100019e0:	d9811e04 	addi	r6,sp,1144
100019e4:	0007bdc0 	call	10007bdc <__sprint_r>
100019e8:	103c841e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
100019ec:	d8c12017 	ldw	r3,1152(sp)
100019f0:	da000404 	addi	r8,sp,16
100019f4:	003d3506 	br	10000ecc <__alt_data_end+0xf8000ecc>
100019f8:	b809883a 	mov	r4,r23
100019fc:	b00b883a 	mov	r5,r22
10001a00:	d9811e04 	addi	r6,sp,1144
10001a04:	0007bdc0 	call	10007bdc <__sprint_r>
10001a08:	103c7c1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001a0c:	d8c12017 	ldw	r3,1152(sp)
10001a10:	da000404 	addi	r8,sp,16
10001a14:	003d3b06 	br	10000f04 <__alt_data_end+0xf8000f04>
10001a18:	d9413b17 	ldw	r5,1260(sp)
10001a1c:	d8c10e04 	addi	r3,sp,1080
10001a20:	908003cc 	andi	r2,r18,15
10001a24:	a808973a 	slli	r4,r21,28
10001a28:	2885883a 	add	r2,r5,r2
10001a2c:	9024d13a 	srli	r18,r18,4
10001a30:	10800003 	ldbu	r2,0(r2)
10001a34:	a82ad13a 	srli	r21,r21,4
10001a38:	18ffffc4 	addi	r3,r3,-1
10001a3c:	24a4b03a 	or	r18,r4,r18
10001a40:	18800005 	stb	r2,0(r3)
10001a44:	9544b03a 	or	r2,r18,r21
10001a48:	103ff51e 	bne	r2,zero,10001a20 <__alt_data_end+0xf8001a20>
10001a4c:	d9412817 	ldw	r5,1184(sp)
10001a50:	d8c13115 	stw	r3,1220(sp)
10001a54:	28e3c83a 	sub	r17,r5,r3
10001a58:	003ccb06 	br	10000d88 <__alt_data_end+0xf8000d88>
10001a5c:	d8c10e04 	addi	r3,sp,1080
10001a60:	0023883a 	mov	r17,zero
10001a64:	d8c13115 	stw	r3,1220(sp)
10001a68:	003cc706 	br	10000d88 <__alt_data_end+0xf8000d88>
10001a6c:	dc012617 	ldw	r16,1176(sp)
10001a70:	0401ab0e 	bge	zero,r16,10002120 <___vfprintf_internal_r+0x1984>
10001a74:	d8813317 	ldw	r2,1228(sp)
10001a78:	d9413117 	ldw	r5,1220(sp)
10001a7c:	d9013417 	ldw	r4,1232(sp)
10001a80:	1023883a 	mov	r17,r2
10001a84:	28a1883a 	add	r16,r5,r2
10001a88:	2080010e 	bge	r4,r2,10001a90 <___vfprintf_internal_r+0x12f4>
10001a8c:	2023883a 	mov	r17,r4
10001a90:	04400b0e 	bge	zero,r17,10001ac0 <___vfprintf_internal_r+0x1324>
10001a94:	d8811f17 	ldw	r2,1148(sp)
10001a98:	d9413117 	ldw	r5,1220(sp)
10001a9c:	1c47883a 	add	r3,r3,r17
10001aa0:	10800044 	addi	r2,r2,1
10001aa4:	41400015 	stw	r5,0(r8)
10001aa8:	44400115 	stw	r17,4(r8)
10001aac:	d8c12015 	stw	r3,1152(sp)
10001ab0:	d8811f15 	stw	r2,1148(sp)
10001ab4:	010001c4 	movi	r4,7
10001ab8:	20826716 	blt	r4,r2,10002458 <___vfprintf_internal_r+0x1cbc>
10001abc:	42000204 	addi	r8,r8,8
10001ac0:	88026316 	blt	r17,zero,10002450 <___vfprintf_internal_r+0x1cb4>
10001ac4:	d8813417 	ldw	r2,1232(sp)
10001ac8:	1463c83a 	sub	r17,r2,r17
10001acc:	0440590e 	bge	zero,r17,10001c34 <___vfprintf_internal_r+0x1498>
10001ad0:	04c00404 	movi	r19,16
10001ad4:	d8811f17 	ldw	r2,1148(sp)
10001ad8:	9c41770e 	bge	r19,r17,100020b8 <___vfprintf_internal_r+0x191c>
10001adc:	01440074 	movhi	r5,4097
10001ae0:	297dce84 	addi	r5,r5,-2246
10001ae4:	d9412c15 	stw	r5,1200(sp)
10001ae8:	054001c4 	movi	r21,7
10001aec:	00000306 	br	10001afc <___vfprintf_internal_r+0x1360>
10001af0:	42000204 	addi	r8,r8,8
10001af4:	8c7ffc04 	addi	r17,r17,-16
10001af8:	9c41720e 	bge	r19,r17,100020c4 <___vfprintf_internal_r+0x1928>
10001afc:	18c00404 	addi	r3,r3,16
10001b00:	10800044 	addi	r2,r2,1
10001b04:	45000015 	stw	r20,0(r8)
10001b08:	44c00115 	stw	r19,4(r8)
10001b0c:	d8c12015 	stw	r3,1152(sp)
10001b10:	d8811f15 	stw	r2,1148(sp)
10001b14:	a8bff60e 	bge	r21,r2,10001af0 <__alt_data_end+0xf8001af0>
10001b18:	b809883a 	mov	r4,r23
10001b1c:	b00b883a 	mov	r5,r22
10001b20:	d9811e04 	addi	r6,sp,1144
10001b24:	0007bdc0 	call	10007bdc <__sprint_r>
10001b28:	103c341e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001b2c:	d8c12017 	ldw	r3,1152(sp)
10001b30:	d8811f17 	ldw	r2,1148(sp)
10001b34:	da000404 	addi	r8,sp,16
10001b38:	003fee06 	br	10001af4 <__alt_data_end+0xf8001af4>
10001b3c:	b809883a 	mov	r4,r23
10001b40:	b00b883a 	mov	r5,r22
10001b44:	d9811e04 	addi	r6,sp,1144
10001b48:	0007bdc0 	call	10007bdc <__sprint_r>
10001b4c:	103c2b1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001b50:	d8c12017 	ldw	r3,1152(sp)
10001b54:	d8812787 	ldb	r2,1182(sp)
10001b58:	da000404 	addi	r8,sp,16
10001b5c:	003cce06 	br	10000e98 <__alt_data_end+0xf8000e98>
10001b60:	d8813317 	ldw	r2,1228(sp)
10001b64:	14ffffc4 	addi	r19,r2,-1
10001b68:	04ff630e 	bge	zero,r19,100018f8 <__alt_data_end+0xf80018f8>
10001b6c:	05400404 	movi	r21,16
10001b70:	acc0810e 	bge	r21,r19,10001d78 <___vfprintf_internal_r+0x15dc>
10001b74:	01440074 	movhi	r5,4097
10001b78:	297dce84 	addi	r5,r5,-2246
10001b7c:	d9412c15 	stw	r5,1200(sp)
10001b80:	01c001c4 	movi	r7,7
10001b84:	00000306 	br	10001b94 <___vfprintf_internal_r+0x13f8>
10001b88:	8c400204 	addi	r17,r17,8
10001b8c:	9cfffc04 	addi	r19,r19,-16
10001b90:	acc07c0e 	bge	r21,r19,10001d84 <___vfprintf_internal_r+0x15e8>
10001b94:	18c00404 	addi	r3,r3,16
10001b98:	84000044 	addi	r16,r16,1
10001b9c:	8d000015 	stw	r20,0(r17)
10001ba0:	8d400115 	stw	r21,4(r17)
10001ba4:	d8c12015 	stw	r3,1152(sp)
10001ba8:	dc011f15 	stw	r16,1148(sp)
10001bac:	3c3ff60e 	bge	r7,r16,10001b88 <__alt_data_end+0xf8001b88>
10001bb0:	b809883a 	mov	r4,r23
10001bb4:	b00b883a 	mov	r5,r22
10001bb8:	d9811e04 	addi	r6,sp,1144
10001bbc:	d9c13d15 	stw	r7,1268(sp)
10001bc0:	0007bdc0 	call	10007bdc <__sprint_r>
10001bc4:	d9c13d17 	ldw	r7,1268(sp)
10001bc8:	103c0c1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001bcc:	d8c12017 	ldw	r3,1152(sp)
10001bd0:	dc011f17 	ldw	r16,1148(sp)
10001bd4:	dc400404 	addi	r17,sp,16
10001bd8:	003fec06 	br	10001b8c <__alt_data_end+0xf8001b8c>
10001bdc:	00800084 	movi	r2,2
10001be0:	9546b03a 	or	r3,r18,r21
10001be4:	003d7d06 	br	100011dc <__alt_data_end+0xf80011dc>
10001be8:	10803fcc 	andi	r2,r2,255
10001bec:	1080201c 	xori	r2,r2,128
10001bf0:	10bfe004 	addi	r2,r2,-128
10001bf4:	01000c04 	movi	r4,48
10001bf8:	1101d726 	beq	r2,r4,10002358 <___vfprintf_internal_r+0x1bbc>
10001bfc:	d9413117 	ldw	r5,1220(sp)
10001c00:	d8812817 	ldw	r2,1184(sp)
10001c04:	193fffc5 	stb	r4,-1(r3)
10001c08:	297fffc4 	addi	r5,r5,-1
10001c0c:	d9413115 	stw	r5,1220(sp)
10001c10:	1163c83a 	sub	r17,r2,r5
10001c14:	003c5c06 	br	10000d88 <__alt_data_end+0xf8000d88>
10001c18:	b809883a 	mov	r4,r23
10001c1c:	b00b883a 	mov	r5,r22
10001c20:	d9811e04 	addi	r6,sp,1144
10001c24:	0007bdc0 	call	10007bdc <__sprint_r>
10001c28:	103bf41e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001c2c:	d8c12017 	ldw	r3,1152(sp)
10001c30:	da000404 	addi	r8,sp,16
10001c34:	d9413117 	ldw	r5,1220(sp)
10001c38:	d9013417 	ldw	r4,1232(sp)
10001c3c:	d8812617 	ldw	r2,1176(sp)
10001c40:	2923883a 	add	r17,r5,r4
10001c44:	d9413317 	ldw	r5,1228(sp)
10001c48:	11400216 	blt	r2,r5,10001c54 <___vfprintf_internal_r+0x14b8>
10001c4c:	e100004c 	andi	r4,fp,1
10001c50:	20000d26 	beq	r4,zero,10001c88 <___vfprintf_internal_r+0x14ec>
10001c54:	d9013817 	ldw	r4,1248(sp)
10001c58:	d9413517 	ldw	r5,1236(sp)
10001c5c:	1907883a 	add	r3,r3,r4
10001c60:	d9011f17 	ldw	r4,1148(sp)
10001c64:	41400015 	stw	r5,0(r8)
10001c68:	d9413817 	ldw	r5,1248(sp)
10001c6c:	21000044 	addi	r4,r4,1
10001c70:	d8c12015 	stw	r3,1152(sp)
10001c74:	41400115 	stw	r5,4(r8)
10001c78:	d9011f15 	stw	r4,1148(sp)
10001c7c:	014001c4 	movi	r5,7
10001c80:	2901fd16 	blt	r5,r4,10002478 <___vfprintf_internal_r+0x1cdc>
10001c84:	42000204 	addi	r8,r8,8
10001c88:	d9013317 	ldw	r4,1228(sp)
10001c8c:	2085c83a 	sub	r2,r4,r2
10001c90:	8449c83a 	sub	r4,r16,r17
10001c94:	1021883a 	mov	r16,r2
10001c98:	2080010e 	bge	r4,r2,10001ca0 <___vfprintf_internal_r+0x1504>
10001c9c:	2021883a 	mov	r16,r4
10001ca0:	04000a0e 	bge	zero,r16,10001ccc <___vfprintf_internal_r+0x1530>
10001ca4:	d9011f17 	ldw	r4,1148(sp)
10001ca8:	1c07883a 	add	r3,r3,r16
10001cac:	44400015 	stw	r17,0(r8)
10001cb0:	21000044 	addi	r4,r4,1
10001cb4:	44000115 	stw	r16,4(r8)
10001cb8:	d8c12015 	stw	r3,1152(sp)
10001cbc:	d9011f15 	stw	r4,1148(sp)
10001cc0:	014001c4 	movi	r5,7
10001cc4:	29020916 	blt	r5,r4,100024ec <___vfprintf_internal_r+0x1d50>
10001cc8:	42000204 	addi	r8,r8,8
10001ccc:	80020116 	blt	r16,zero,100024d4 <___vfprintf_internal_r+0x1d38>
10001cd0:	1421c83a 	sub	r16,r2,r16
10001cd4:	043cc40e 	bge	zero,r16,10000fe8 <__alt_data_end+0xf8000fe8>
10001cd8:	04400404 	movi	r17,16
10001cdc:	d8811f17 	ldw	r2,1148(sp)
10001ce0:	8c3f110e 	bge	r17,r16,10001928 <__alt_data_end+0xf8001928>
10001ce4:	01440074 	movhi	r5,4097
10001ce8:	297dce84 	addi	r5,r5,-2246
10001cec:	d9412c15 	stw	r5,1200(sp)
10001cf0:	04c001c4 	movi	r19,7
10001cf4:	00000306 	br	10001d04 <___vfprintf_internal_r+0x1568>
10001cf8:	42000204 	addi	r8,r8,8
10001cfc:	843ffc04 	addi	r16,r16,-16
10001d00:	8c3f0c0e 	bge	r17,r16,10001934 <__alt_data_end+0xf8001934>
10001d04:	18c00404 	addi	r3,r3,16
10001d08:	10800044 	addi	r2,r2,1
10001d0c:	45000015 	stw	r20,0(r8)
10001d10:	44400115 	stw	r17,4(r8)
10001d14:	d8c12015 	stw	r3,1152(sp)
10001d18:	d8811f15 	stw	r2,1148(sp)
10001d1c:	98bff60e 	bge	r19,r2,10001cf8 <__alt_data_end+0xf8001cf8>
10001d20:	b809883a 	mov	r4,r23
10001d24:	b00b883a 	mov	r5,r22
10001d28:	d9811e04 	addi	r6,sp,1144
10001d2c:	0007bdc0 	call	10007bdc <__sprint_r>
10001d30:	103bb21e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001d34:	d8c12017 	ldw	r3,1152(sp)
10001d38:	d8811f17 	ldw	r2,1148(sp)
10001d3c:	da000404 	addi	r8,sp,16
10001d40:	003fee06 	br	10001cfc <__alt_data_end+0xf8001cfc>
10001d44:	e088703a 	and	r4,fp,r2
10001d48:	203ec01e 	bne	r4,zero,1000184c <__alt_data_end+0xf800184c>
10001d4c:	dc011f17 	ldw	r16,1148(sp)
10001d50:	d9013117 	ldw	r4,1220(sp)
10001d54:	40800115 	stw	r2,4(r8)
10001d58:	84000044 	addi	r16,r16,1
10001d5c:	41000015 	stw	r4,0(r8)
10001d60:	d8c12015 	stw	r3,1152(sp)
10001d64:	dc011f15 	stw	r16,1148(sp)
10001d68:	008001c4 	movi	r2,7
10001d6c:	14000e16 	blt	r2,r16,10001da8 <___vfprintf_internal_r+0x160c>
10001d70:	44400204 	addi	r17,r8,8
10001d74:	003ee006 	br	100018f8 <__alt_data_end+0xf80018f8>
10001d78:	01040074 	movhi	r4,4097
10001d7c:	213dce84 	addi	r4,r4,-2246
10001d80:	d9012c15 	stw	r4,1200(sp)
10001d84:	d8812c17 	ldw	r2,1200(sp)
10001d88:	1cc7883a 	add	r3,r3,r19
10001d8c:	84000044 	addi	r16,r16,1
10001d90:	88800015 	stw	r2,0(r17)
10001d94:	8cc00115 	stw	r19,4(r17)
10001d98:	d8c12015 	stw	r3,1152(sp)
10001d9c:	dc011f15 	stw	r16,1148(sp)
10001da0:	008001c4 	movi	r2,7
10001da4:	143ed30e 	bge	r2,r16,100018f4 <__alt_data_end+0xf80018f4>
10001da8:	b809883a 	mov	r4,r23
10001dac:	b00b883a 	mov	r5,r22
10001db0:	d9811e04 	addi	r6,sp,1144
10001db4:	0007bdc0 	call	10007bdc <__sprint_r>
10001db8:	103b901e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001dbc:	d8c12017 	ldw	r3,1152(sp)
10001dc0:	dc011f17 	ldw	r16,1148(sp)
10001dc4:	dc400404 	addi	r17,sp,16
10001dc8:	003ecb06 	br	100018f8 <__alt_data_end+0xf80018f8>
10001dcc:	b809883a 	mov	r4,r23
10001dd0:	b00b883a 	mov	r5,r22
10001dd4:	d9811e04 	addi	r6,sp,1144
10001dd8:	0007bdc0 	call	10007bdc <__sprint_r>
10001ddc:	103b871e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001de0:	d8c12017 	ldw	r3,1152(sp)
10001de4:	dc011f17 	ldw	r16,1148(sp)
10001de8:	da000404 	addi	r8,sp,16
10001dec:	003ea206 	br	10001878 <__alt_data_end+0xf8001878>
10001df0:	b809883a 	mov	r4,r23
10001df4:	b00b883a 	mov	r5,r22
10001df8:	d9811e04 	addi	r6,sp,1144
10001dfc:	0007bdc0 	call	10007bdc <__sprint_r>
10001e00:	103b7e1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001e04:	d8c12017 	ldw	r3,1152(sp)
10001e08:	dc011f17 	ldw	r16,1148(sp)
10001e0c:	dc400404 	addi	r17,sp,16
10001e10:	003ea406 	br	100018a4 <__alt_data_end+0xf80018a4>
10001e14:	b809883a 	mov	r4,r23
10001e18:	b00b883a 	mov	r5,r22
10001e1c:	d9811e04 	addi	r6,sp,1144
10001e20:	0007bdc0 	call	10007bdc <__sprint_r>
10001e24:	103b751e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10001e28:	d8c12017 	ldw	r3,1152(sp)
10001e2c:	da000404 	addi	r8,sp,16
10001e30:	003c3706 	br	10000f10 <__alt_data_end+0xf8000f10>
10001e34:	04a5c83a 	sub	r18,zero,r18
10001e38:	9004c03a 	cmpne	r2,r18,zero
10001e3c:	056bc83a 	sub	r21,zero,r21
10001e40:	a8abc83a 	sub	r21,r21,r2
10001e44:	04c00b44 	movi	r19,45
10001e48:	dcc12785 	stb	r19,1182(sp)
10001e4c:	da413215 	stw	r9,1224(sp)
10001e50:	00800044 	movi	r2,1
10001e54:	9546b03a 	or	r3,r18,r21
10001e58:	003bb106 	br	10000d20 <__alt_data_end+0xf8000d20>
10001e5c:	da013f15 	stw	r8,1276(sp)
10001e60:	da413e15 	stw	r9,1272(sp)
10001e64:	00078380 	call	10007838 <__fpclassifyd>
10001e68:	da013f17 	ldw	r8,1276(sp)
10001e6c:	da413e17 	ldw	r9,1272(sp)
10001e70:	1000e526 	beq	r2,zero,10002208 <___vfprintf_internal_r+0x1a6c>
10001e74:	04fff7c4 	movi	r19,-33
10001e78:	00bfffc4 	movi	r2,-1
10001e7c:	84e6703a 	and	r19,r16,r19
10001e80:	48822926 	beq	r9,r2,10002728 <___vfprintf_internal_r+0x1f8c>
10001e84:	008011c4 	movi	r2,71
10001e88:	98821626 	beq	r19,r2,100026e4 <___vfprintf_internal_r+0x1f48>
10001e8c:	d9013917 	ldw	r4,1252(sp)
10001e90:	e0c04014 	ori	r3,fp,256
10001e94:	d8c12d15 	stw	r3,1204(sp)
10001e98:	20021f16 	blt	r4,zero,10002718 <___vfprintf_internal_r+0x1f7c>
10001e9c:	dc413917 	ldw	r17,1252(sp)
10001ea0:	d8012b05 	stb	zero,1196(sp)
10001ea4:	00801984 	movi	r2,102
10001ea8:	80814d26 	beq	r16,r2,100023e0 <___vfprintf_internal_r+0x1c44>
10001eac:	00801184 	movi	r2,70
10001eb0:	80814b26 	beq	r16,r2,100023e0 <___vfprintf_internal_r+0x1c44>
10001eb4:	00801144 	movi	r2,69
10001eb8:	98821d26 	beq	r19,r2,10002730 <___vfprintf_internal_r+0x1f94>
10001ebc:	482b883a 	mov	r21,r9
10001ec0:	d8812604 	addi	r2,sp,1176
10001ec4:	d8800115 	stw	r2,4(sp)
10001ec8:	d9413717 	ldw	r5,1244(sp)
10001ecc:	d8812504 	addi	r2,sp,1172
10001ed0:	d8800215 	stw	r2,8(sp)
10001ed4:	d8812104 	addi	r2,sp,1156
10001ed8:	dd400015 	stw	r21,0(sp)
10001edc:	d8800315 	stw	r2,12(sp)
10001ee0:	b809883a 	mov	r4,r23
10001ee4:	880d883a 	mov	r6,r17
10001ee8:	01c00084 	movi	r7,2
10001eec:	da013f15 	stw	r8,1276(sp)
10001ef0:	da413e15 	stw	r9,1272(sp)
10001ef4:	0002c140 	call	10002c14 <_dtoa_r>
10001ef8:	d8813115 	stw	r2,1220(sp)
10001efc:	008019c4 	movi	r2,103
10001f00:	da013f17 	ldw	r8,1276(sp)
10001f04:	da413e17 	ldw	r9,1272(sp)
10001f08:	80800226 	beq	r16,r2,10001f14 <___vfprintf_internal_r+0x1778>
10001f0c:	008011c4 	movi	r2,71
10001f10:	8081451e 	bne	r16,r2,10002428 <___vfprintf_internal_r+0x1c8c>
10001f14:	e080004c 	andi	r2,fp,1
10001f18:	10021e26 	beq	r2,zero,10002794 <___vfprintf_internal_r+0x1ff8>
10001f1c:	d8c13117 	ldw	r3,1220(sp)
10001f20:	1d55883a 	add	r10,r3,r21
10001f24:	d9013717 	ldw	r4,1244(sp)
10001f28:	880b883a 	mov	r5,r17
10001f2c:	000d883a 	mov	r6,zero
10001f30:	000f883a 	mov	r7,zero
10001f34:	da013f15 	stw	r8,1276(sp)
10001f38:	da413e15 	stw	r9,1272(sp)
10001f3c:	da813d15 	stw	r10,1268(sp)
10001f40:	000b92c0 	call	1000b92c <__eqdf2>
10001f44:	da013f17 	ldw	r8,1276(sp)
10001f48:	da413e17 	ldw	r9,1272(sp)
10001f4c:	da813d17 	ldw	r10,1268(sp)
10001f50:	1001a126 	beq	r2,zero,100025d8 <___vfprintf_internal_r+0x1e3c>
10001f54:	d8812117 	ldw	r2,1156(sp)
10001f58:	1280062e 	bgeu	r2,r10,10001f74 <___vfprintf_internal_r+0x17d8>
10001f5c:	01000c04 	movi	r4,48
10001f60:	10c00044 	addi	r3,r2,1
10001f64:	d8c12115 	stw	r3,1156(sp)
10001f68:	11000005 	stb	r4,0(r2)
10001f6c:	d8812117 	ldw	r2,1156(sp)
10001f70:	12bffb36 	bltu	r2,r10,10001f60 <__alt_data_end+0xf8001f60>
10001f74:	d8c13117 	ldw	r3,1220(sp)
10001f78:	10c5c83a 	sub	r2,r2,r3
10001f7c:	d8813315 	stw	r2,1228(sp)
10001f80:	008011c4 	movi	r2,71
10001f84:	98818926 	beq	r19,r2,100025ac <___vfprintf_internal_r+0x1e10>
10001f88:	00801944 	movi	r2,101
10001f8c:	14023c0e 	bge	r2,r16,10002880 <___vfprintf_internal_r+0x20e4>
10001f90:	d8c12617 	ldw	r3,1176(sp)
10001f94:	00801984 	movi	r2,102
10001f98:	d8c13415 	stw	r3,1232(sp)
10001f9c:	8081ef26 	beq	r16,r2,1000275c <___vfprintf_internal_r+0x1fc0>
10001fa0:	d8c13417 	ldw	r3,1232(sp)
10001fa4:	d9013317 	ldw	r4,1228(sp)
10001fa8:	1901e316 	blt	r3,r4,10002738 <___vfprintf_internal_r+0x1f9c>
10001fac:	e080004c 	andi	r2,fp,1
10001fb0:	1001f426 	beq	r2,zero,10002784 <___vfprintf_internal_r+0x1fe8>
10001fb4:	d8c13417 	ldw	r3,1232(sp)
10001fb8:	1c400044 	addi	r17,r3,1
10001fbc:	8839883a 	mov	fp,r17
10001fc0:	8801e416 	blt	r17,zero,10002754 <___vfprintf_internal_r+0x1fb8>
10001fc4:	dd412b07 	ldb	r21,1196(sp)
10001fc8:	a801701e 	bne	r21,zero,1000258c <___vfprintf_internal_r+0x1df0>
10001fcc:	df012b15 	stw	fp,1196(sp)
10001fd0:	dcc12783 	ldbu	r19,1182(sp)
10001fd4:	df012d17 	ldw	fp,1204(sp)
10001fd8:	d8013215 	stw	zero,1224(sp)
10001fdc:	dc812d15 	stw	r18,1204(sp)
10001fe0:	003b6e06 	br	10000d9c <__alt_data_end+0xf8000d9c>
10001fe4:	e080040c 	andi	r2,fp,16
10001fe8:	1000b51e 	bne	r2,zero,100022c0 <___vfprintf_internal_r+0x1b24>
10001fec:	e080100c 	andi	r2,fp,64
10001ff0:	10015b26 	beq	r2,zero,10002560 <___vfprintf_internal_r+0x1dc4>
10001ff4:	d9012d17 	ldw	r4,1204(sp)
10001ff8:	d9412f17 	ldw	r5,1212(sp)
10001ffc:	20800017 	ldw	r2,0(r4)
10002000:	21000104 	addi	r4,r4,4
10002004:	d9012d15 	stw	r4,1204(sp)
10002008:	1140000d 	sth	r5,0(r2)
1000200c:	003a2006 	br	10000890 <__alt_data_end+0xf8000890>
10002010:	e0c0100c 	andi	r3,fp,64
10002014:	1800a226 	beq	r3,zero,100022a0 <___vfprintf_internal_r+0x1b04>
10002018:	d8c12d17 	ldw	r3,1204(sp)
1000201c:	1480000b 	ldhu	r18,0(r2)
10002020:	002b883a 	mov	r21,zero
10002024:	18c00104 	addi	r3,r3,4
10002028:	d8c12d15 	stw	r3,1204(sp)
1000202c:	0005883a 	mov	r2,zero
10002030:	9007883a 	mov	r3,r18
10002034:	003c6906 	br	100011dc <__alt_data_end+0xf80011dc>
10002038:	e0c0100c 	andi	r3,fp,64
1000203c:	18009026 	beq	r3,zero,10002280 <___vfprintf_internal_r+0x1ae4>
10002040:	1480000b 	ldhu	r18,0(r2)
10002044:	d8812d17 	ldw	r2,1204(sp)
10002048:	002b883a 	mov	r21,zero
1000204c:	9007883a 	mov	r3,r18
10002050:	10800104 	addi	r2,r2,4
10002054:	d8812d15 	stw	r2,1204(sp)
10002058:	00800044 	movi	r2,1
1000205c:	003c5f06 	br	100011dc <__alt_data_end+0xf80011dc>
10002060:	e0c0100c 	andi	r3,fp,64
10002064:	18008026 	beq	r3,zero,10002268 <___vfprintf_internal_r+0x1acc>
10002068:	d9012d17 	ldw	r4,1204(sp)
1000206c:	1480000b 	ldhu	r18,0(r2)
10002070:	002b883a 	mov	r21,zero
10002074:	21000104 	addi	r4,r4,4
10002078:	d9012d15 	stw	r4,1204(sp)
1000207c:	003c7906 	br	10001264 <__alt_data_end+0xf8001264>
10002080:	e080100c 	andi	r2,fp,64
10002084:	10007126 	beq	r2,zero,1000224c <___vfprintf_internal_r+0x1ab0>
10002088:	1c80000f 	ldh	r18,0(r3)
1000208c:	d8812d17 	ldw	r2,1204(sp)
10002090:	902bd7fa 	srai	r21,r18,31
10002094:	10800104 	addi	r2,r2,4
10002098:	d8812d15 	stw	r2,1204(sp)
1000209c:	a805883a 	mov	r2,r21
100020a0:	003b1a06 	br	10000d0c <__alt_data_end+0xf8000d0c>
100020a4:	e4000007 	ldb	r16,0(fp)
100020a8:	e005883a 	mov	r2,fp
100020ac:	003a2306 	br	1000093c <__alt_data_end+0xf800093c>
100020b0:	00800084 	movi	r2,2
100020b4:	003c4906 	br	100011dc <__alt_data_end+0xf80011dc>
100020b8:	01040074 	movhi	r4,4097
100020bc:	213dce84 	addi	r4,r4,-2246
100020c0:	d9012c15 	stw	r4,1200(sp)
100020c4:	d9012c17 	ldw	r4,1200(sp)
100020c8:	1c47883a 	add	r3,r3,r17
100020cc:	10800044 	addi	r2,r2,1
100020d0:	41000015 	stw	r4,0(r8)
100020d4:	44400115 	stw	r17,4(r8)
100020d8:	d8c12015 	stw	r3,1152(sp)
100020dc:	d8811f15 	stw	r2,1148(sp)
100020e0:	010001c4 	movi	r4,7
100020e4:	20becc16 	blt	r4,r2,10001c18 <__alt_data_end+0xf8001c18>
100020e8:	42000204 	addi	r8,r8,8
100020ec:	003ed106 	br	10001c34 <__alt_data_end+0xf8001c34>
100020f0:	01040074 	movhi	r4,4097
100020f4:	213dce84 	addi	r4,r4,-2246
100020f8:	d9012c15 	stw	r4,1200(sp)
100020fc:	003ba306 	br	10000f8c <__alt_data_end+0xf8000f8c>
10002100:	b809883a 	mov	r4,r23
10002104:	b00b883a 	mov	r5,r22
10002108:	d9811e04 	addi	r6,sp,1144
1000210c:	0007bdc0 	call	10007bdc <__sprint_r>
10002110:	103aba1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10002114:	d8c12017 	ldw	r3,1152(sp)
10002118:	da000404 	addi	r8,sp,16
1000211c:	003d6c06 	br	100016d0 <__alt_data_end+0xf80016d0>
10002120:	d8811f17 	ldw	r2,1148(sp)
10002124:	01440074 	movhi	r5,4097
10002128:	01000044 	movi	r4,1
1000212c:	18c00044 	addi	r3,r3,1
10002130:	10800044 	addi	r2,r2,1
10002134:	297dce04 	addi	r5,r5,-2248
10002138:	41000115 	stw	r4,4(r8)
1000213c:	41400015 	stw	r5,0(r8)
10002140:	d8c12015 	stw	r3,1152(sp)
10002144:	d8811f15 	stw	r2,1148(sp)
10002148:	010001c4 	movi	r4,7
1000214c:	20806716 	blt	r4,r2,100022ec <___vfprintf_internal_r+0x1b50>
10002150:	42000204 	addi	r8,r8,8
10002154:	8000041e 	bne	r16,zero,10002168 <___vfprintf_internal_r+0x19cc>
10002158:	d8813317 	ldw	r2,1228(sp)
1000215c:	1000021e 	bne	r2,zero,10002168 <___vfprintf_internal_r+0x19cc>
10002160:	e080004c 	andi	r2,fp,1
10002164:	103ba026 	beq	r2,zero,10000fe8 <__alt_data_end+0xf8000fe8>
10002168:	d9013817 	ldw	r4,1248(sp)
1000216c:	d8811f17 	ldw	r2,1148(sp)
10002170:	d9413517 	ldw	r5,1236(sp)
10002174:	1907883a 	add	r3,r3,r4
10002178:	10800044 	addi	r2,r2,1
1000217c:	41000115 	stw	r4,4(r8)
10002180:	41400015 	stw	r5,0(r8)
10002184:	d8c12015 	stw	r3,1152(sp)
10002188:	d8811f15 	stw	r2,1148(sp)
1000218c:	010001c4 	movi	r4,7
10002190:	20815716 	blt	r4,r2,100026f0 <___vfprintf_internal_r+0x1f54>
10002194:	42000204 	addi	r8,r8,8
10002198:	0421c83a 	sub	r16,zero,r16
1000219c:	0400810e 	bge	zero,r16,100023a4 <___vfprintf_internal_r+0x1c08>
100021a0:	04400404 	movi	r17,16
100021a4:	8c00bd0e 	bge	r17,r16,1000249c <___vfprintf_internal_r+0x1d00>
100021a8:	01440074 	movhi	r5,4097
100021ac:	297dce84 	addi	r5,r5,-2246
100021b0:	d9412c15 	stw	r5,1200(sp)
100021b4:	04c001c4 	movi	r19,7
100021b8:	00000306 	br	100021c8 <___vfprintf_internal_r+0x1a2c>
100021bc:	42000204 	addi	r8,r8,8
100021c0:	843ffc04 	addi	r16,r16,-16
100021c4:	8c00b80e 	bge	r17,r16,100024a8 <___vfprintf_internal_r+0x1d0c>
100021c8:	18c00404 	addi	r3,r3,16
100021cc:	10800044 	addi	r2,r2,1
100021d0:	45000015 	stw	r20,0(r8)
100021d4:	44400115 	stw	r17,4(r8)
100021d8:	d8c12015 	stw	r3,1152(sp)
100021dc:	d8811f15 	stw	r2,1148(sp)
100021e0:	98bff60e 	bge	r19,r2,100021bc <__alt_data_end+0xf80021bc>
100021e4:	b809883a 	mov	r4,r23
100021e8:	b00b883a 	mov	r5,r22
100021ec:	d9811e04 	addi	r6,sp,1144
100021f0:	0007bdc0 	call	10007bdc <__sprint_r>
100021f4:	103a811e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
100021f8:	d8c12017 	ldw	r3,1152(sp)
100021fc:	d8811f17 	ldw	r2,1148(sp)
10002200:	da000404 	addi	r8,sp,16
10002204:	003fee06 	br	100021c0 <__alt_data_end+0xf80021c0>
10002208:	008011c4 	movi	r2,71
1000220c:	1400db16 	blt	r2,r16,1000257c <___vfprintf_internal_r+0x1de0>
10002210:	01040074 	movhi	r4,4097
10002214:	213dc004 	addi	r4,r4,-2304
10002218:	d9013115 	stw	r4,1220(sp)
1000221c:	00c000c4 	movi	r3,3
10002220:	00bfdfc4 	movi	r2,-129
10002224:	d8c12b15 	stw	r3,1196(sp)
10002228:	e0b8703a 	and	fp,fp,r2
1000222c:	dcc12783 	ldbu	r19,1182(sp)
10002230:	dc812d15 	stw	r18,1204(sp)
10002234:	1823883a 	mov	r17,r3
10002238:	d8013215 	stw	zero,1224(sp)
1000223c:	d8013415 	stw	zero,1232(sp)
10002240:	003ad606 	br	10000d9c <__alt_data_end+0xf8000d9c>
10002244:	4823883a 	mov	r17,r9
10002248:	003cc906 	br	10001570 <__alt_data_end+0xf8001570>
1000224c:	1c800017 	ldw	r18,0(r3)
10002250:	d8c12d17 	ldw	r3,1204(sp)
10002254:	902bd7fa 	srai	r21,r18,31
10002258:	18c00104 	addi	r3,r3,4
1000225c:	d8c12d15 	stw	r3,1204(sp)
10002260:	a805883a 	mov	r2,r21
10002264:	003aa906 	br	10000d0c <__alt_data_end+0xf8000d0c>
10002268:	d9412d17 	ldw	r5,1204(sp)
1000226c:	14800017 	ldw	r18,0(r2)
10002270:	002b883a 	mov	r21,zero
10002274:	29400104 	addi	r5,r5,4
10002278:	d9412d15 	stw	r5,1204(sp)
1000227c:	003bf906 	br	10001264 <__alt_data_end+0xf8001264>
10002280:	d8c12d17 	ldw	r3,1204(sp)
10002284:	14800017 	ldw	r18,0(r2)
10002288:	002b883a 	mov	r21,zero
1000228c:	18c00104 	addi	r3,r3,4
10002290:	d8c12d15 	stw	r3,1204(sp)
10002294:	00800044 	movi	r2,1
10002298:	9007883a 	mov	r3,r18
1000229c:	003bcf06 	br	100011dc <__alt_data_end+0xf80011dc>
100022a0:	d9012d17 	ldw	r4,1204(sp)
100022a4:	14800017 	ldw	r18,0(r2)
100022a8:	002b883a 	mov	r21,zero
100022ac:	21000104 	addi	r4,r4,4
100022b0:	d9012d15 	stw	r4,1204(sp)
100022b4:	0005883a 	mov	r2,zero
100022b8:	9007883a 	mov	r3,r18
100022bc:	003bc706 	br	100011dc <__alt_data_end+0xf80011dc>
100022c0:	d9412d17 	ldw	r5,1204(sp)
100022c4:	d8c12f17 	ldw	r3,1212(sp)
100022c8:	28800017 	ldw	r2,0(r5)
100022cc:	29400104 	addi	r5,r5,4
100022d0:	d9412d15 	stw	r5,1204(sp)
100022d4:	10c00015 	stw	r3,0(r2)
100022d8:	00396d06 	br	10000890 <__alt_data_end+0xf8000890>
100022dc:	01040074 	movhi	r4,4097
100022e0:	213dbe04 	addi	r4,r4,-2312
100022e4:	d9013115 	stw	r4,1220(sp)
100022e8:	003ba206 	br	10001174 <__alt_data_end+0xf8001174>
100022ec:	b809883a 	mov	r4,r23
100022f0:	b00b883a 	mov	r5,r22
100022f4:	d9811e04 	addi	r6,sp,1144
100022f8:	0007bdc0 	call	10007bdc <__sprint_r>
100022fc:	103a3f1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10002300:	dc012617 	ldw	r16,1176(sp)
10002304:	d8c12017 	ldw	r3,1152(sp)
10002308:	da000404 	addi	r8,sp,16
1000230c:	003f9106 	br	10002154 <__alt_data_end+0xf8002154>
10002310:	e0800044 	addi	r2,fp,1
10002314:	9cc00814 	ori	r19,r19,32
10002318:	e4000047 	ldb	r16,1(fp)
1000231c:	00398706 	br	1000093c <__alt_data_end+0xf800093c>
10002320:	d8812e17 	ldw	r2,1208(sp)
10002324:	d8c12d15 	stw	r3,1204(sp)
10002328:	0085c83a 	sub	r2,zero,r2
1000232c:	d8812e15 	stw	r2,1208(sp)
10002330:	e005883a 	mov	r2,fp
10002334:	003a3a06 	br	10000c20 <__alt_data_end+0xf8000c20>
10002338:	b809883a 	mov	r4,r23
1000233c:	b00b883a 	mov	r5,r22
10002340:	d9811e04 	addi	r6,sp,1144
10002344:	0007bdc0 	call	10007bdc <__sprint_r>
10002348:	103a2c1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
1000234c:	d8c12017 	ldw	r3,1152(sp)
10002350:	da000404 	addi	r8,sp,16
10002354:	003cf006 	br	10001718 <__alt_data_end+0xf8001718>
10002358:	d8c12817 	ldw	r3,1184(sp)
1000235c:	d9013117 	ldw	r4,1220(sp)
10002360:	1923c83a 	sub	r17,r3,r4
10002364:	003a8806 	br	10000d88 <__alt_data_end+0xf8000d88>
10002368:	da013f15 	stw	r8,1276(sp)
1000236c:	00007040 	call	10000704 <strlen>
10002370:	1023883a 	mov	r17,r2
10002374:	da013f17 	ldw	r8,1276(sp)
10002378:	883c7f0e 	bge	r17,zero,10001578 <__alt_data_end+0xf8001578>
1000237c:	0005883a 	mov	r2,zero
10002380:	003c7d06 	br	10001578 <__alt_data_end+0xf8001578>
10002384:	b809883a 	mov	r4,r23
10002388:	b00b883a 	mov	r5,r22
1000238c:	d9811e04 	addi	r6,sp,1144
10002390:	0007bdc0 	call	10007bdc <__sprint_r>
10002394:	103a191e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10002398:	d8c12017 	ldw	r3,1152(sp)
1000239c:	d8811f17 	ldw	r2,1148(sp)
100023a0:	da000404 	addi	r8,sp,16
100023a4:	d9413317 	ldw	r5,1228(sp)
100023a8:	d9013117 	ldw	r4,1220(sp)
100023ac:	10800044 	addi	r2,r2,1
100023b0:	28c7883a 	add	r3,r5,r3
100023b4:	41000015 	stw	r4,0(r8)
100023b8:	41400115 	stw	r5,4(r8)
100023bc:	d8c12015 	stw	r3,1152(sp)
100023c0:	d8811f15 	stw	r2,1148(sp)
100023c4:	010001c4 	movi	r4,7
100023c8:	20bb060e 	bge	r4,r2,10000fe4 <__alt_data_end+0xf8000fe4>
100023cc:	003d6206 	br	10001958 <__alt_data_end+0xf8001958>
100023d0:	01040074 	movhi	r4,4097
100023d4:	213dd284 	addi	r4,r4,-2230
100023d8:	d9013615 	stw	r4,1240(sp)
100023dc:	003aa306 	br	10000e6c <__alt_data_end+0xf8000e6c>
100023e0:	d8812604 	addi	r2,sp,1176
100023e4:	d8800115 	stw	r2,4(sp)
100023e8:	d9413717 	ldw	r5,1244(sp)
100023ec:	d8812504 	addi	r2,sp,1172
100023f0:	d8800215 	stw	r2,8(sp)
100023f4:	d8812104 	addi	r2,sp,1156
100023f8:	da400015 	stw	r9,0(sp)
100023fc:	d8800315 	stw	r2,12(sp)
10002400:	b809883a 	mov	r4,r23
10002404:	880d883a 	mov	r6,r17
10002408:	01c000c4 	movi	r7,3
1000240c:	da013f15 	stw	r8,1276(sp)
10002410:	da413e15 	stw	r9,1272(sp)
10002414:	0002c140 	call	10002c14 <_dtoa_r>
10002418:	da413e17 	ldw	r9,1272(sp)
1000241c:	da013f17 	ldw	r8,1276(sp)
10002420:	d8813115 	stw	r2,1220(sp)
10002424:	482b883a 	mov	r21,r9
10002428:	d8c13117 	ldw	r3,1220(sp)
1000242c:	00801184 	movi	r2,70
10002430:	1d55883a 	add	r10,r3,r21
10002434:	98bebb1e 	bne	r19,r2,10001f24 <__alt_data_end+0xf8001f24>
10002438:	19000007 	ldb	r4,0(r3)
1000243c:	00800c04 	movi	r2,48
10002440:	2080dd26 	beq	r4,r2,100027b8 <___vfprintf_internal_r+0x201c>
10002444:	d8c12617 	ldw	r3,1176(sp)
10002448:	50d5883a 	add	r10,r10,r3
1000244c:	003eb506 	br	10001f24 <__alt_data_end+0xf8001f24>
10002450:	0023883a 	mov	r17,zero
10002454:	003d9b06 	br	10001ac4 <__alt_data_end+0xf8001ac4>
10002458:	b809883a 	mov	r4,r23
1000245c:	b00b883a 	mov	r5,r22
10002460:	d9811e04 	addi	r6,sp,1144
10002464:	0007bdc0 	call	10007bdc <__sprint_r>
10002468:	1039e41e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
1000246c:	d8c12017 	ldw	r3,1152(sp)
10002470:	da000404 	addi	r8,sp,16
10002474:	003d9206 	br	10001ac0 <__alt_data_end+0xf8001ac0>
10002478:	b809883a 	mov	r4,r23
1000247c:	b00b883a 	mov	r5,r22
10002480:	d9811e04 	addi	r6,sp,1144
10002484:	0007bdc0 	call	10007bdc <__sprint_r>
10002488:	1039dc1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
1000248c:	d8812617 	ldw	r2,1176(sp)
10002490:	d8c12017 	ldw	r3,1152(sp)
10002494:	da000404 	addi	r8,sp,16
10002498:	003dfb06 	br	10001c88 <__alt_data_end+0xf8001c88>
1000249c:	01040074 	movhi	r4,4097
100024a0:	213dce84 	addi	r4,r4,-2246
100024a4:	d9012c15 	stw	r4,1200(sp)
100024a8:	d9012c17 	ldw	r4,1200(sp)
100024ac:	1c07883a 	add	r3,r3,r16
100024b0:	10800044 	addi	r2,r2,1
100024b4:	41000015 	stw	r4,0(r8)
100024b8:	44000115 	stw	r16,4(r8)
100024bc:	d8c12015 	stw	r3,1152(sp)
100024c0:	d8811f15 	stw	r2,1148(sp)
100024c4:	010001c4 	movi	r4,7
100024c8:	20bfae16 	blt	r4,r2,10002384 <__alt_data_end+0xf8002384>
100024cc:	42000204 	addi	r8,r8,8
100024d0:	003fb406 	br	100023a4 <__alt_data_end+0xf80023a4>
100024d4:	0021883a 	mov	r16,zero
100024d8:	003dfd06 	br	10001cd0 <__alt_data_end+0xf8001cd0>
100024dc:	01440074 	movhi	r5,4097
100024e0:	297dd284 	addi	r5,r5,-2230
100024e4:	d9413615 	stw	r5,1240(sp)
100024e8:	003ae306 	br	10001078 <__alt_data_end+0xf8001078>
100024ec:	b809883a 	mov	r4,r23
100024f0:	b00b883a 	mov	r5,r22
100024f4:	d9811e04 	addi	r6,sp,1144
100024f8:	0007bdc0 	call	10007bdc <__sprint_r>
100024fc:	1039bf1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10002500:	d8812617 	ldw	r2,1176(sp)
10002504:	d9413317 	ldw	r5,1228(sp)
10002508:	d8c12017 	ldw	r3,1152(sp)
1000250c:	da000404 	addi	r8,sp,16
10002510:	2885c83a 	sub	r2,r5,r2
10002514:	003ded06 	br	10001ccc <__alt_data_end+0xf8001ccc>
10002518:	00800184 	movi	r2,6
1000251c:	1240012e 	bgeu	r2,r9,10002524 <___vfprintf_internal_r+0x1d88>
10002520:	1013883a 	mov	r9,r2
10002524:	4823883a 	mov	r17,r9
10002528:	4805883a 	mov	r2,r9
1000252c:	4800b216 	blt	r9,zero,100027f8 <___vfprintf_internal_r+0x205c>
10002530:	01440074 	movhi	r5,4097
10002534:	297dcc04 	addi	r5,r5,-2256
10002538:	d8812b15 	stw	r2,1196(sp)
1000253c:	dc812d15 	stw	r18,1204(sp)
10002540:	d8013215 	stw	zero,1224(sp)
10002544:	d8013415 	stw	zero,1232(sp)
10002548:	d9413115 	stw	r5,1220(sp)
1000254c:	0005883a 	mov	r2,zero
10002550:	003a1906 	br	10000db8 <__alt_data_end+0xf8000db8>
10002554:	04c00b44 	movi	r19,45
10002558:	dcc12785 	stb	r19,1182(sp)
1000255c:	003b0006 	br	10001160 <__alt_data_end+0xf8001160>
10002560:	d8c12d17 	ldw	r3,1204(sp)
10002564:	d9012f17 	ldw	r4,1212(sp)
10002568:	18800017 	ldw	r2,0(r3)
1000256c:	18c00104 	addi	r3,r3,4
10002570:	d8c12d15 	stw	r3,1204(sp)
10002574:	11000015 	stw	r4,0(r2)
10002578:	0038c506 	br	10000890 <__alt_data_end+0xf8000890>
1000257c:	01440074 	movhi	r5,4097
10002580:	297dc104 	addi	r5,r5,-2300
10002584:	d9413115 	stw	r5,1220(sp)
10002588:	003f2406 	br	1000221c <__alt_data_end+0xf800221c>
1000258c:	00800b44 	movi	r2,45
10002590:	d8812785 	stb	r2,1182(sp)
10002594:	df012b15 	stw	fp,1196(sp)
10002598:	d8013215 	stw	zero,1224(sp)
1000259c:	df012d17 	ldw	fp,1204(sp)
100025a0:	00800b44 	movi	r2,45
100025a4:	dc812d15 	stw	r18,1204(sp)
100025a8:	003a0006 	br	10000dac <__alt_data_end+0xf8000dac>
100025ac:	d8c12617 	ldw	r3,1176(sp)
100025b0:	00bfff44 	movi	r2,-3
100025b4:	18800a16 	blt	r3,r2,100025e0 <___vfprintf_internal_r+0x1e44>
100025b8:	48c00916 	blt	r9,r3,100025e0 <___vfprintf_internal_r+0x1e44>
100025bc:	d8c13415 	stw	r3,1232(sp)
100025c0:	040019c4 	movi	r16,103
100025c4:	003e7606 	br	10001fa0 <__alt_data_end+0xf8001fa0>
100025c8:	01040074 	movhi	r4,4097
100025cc:	213dce84 	addi	r4,r4,-2246
100025d0:	d9012c15 	stw	r4,1200(sp)
100025d4:	003c8e06 	br	10001810 <__alt_data_end+0xf8001810>
100025d8:	5005883a 	mov	r2,r10
100025dc:	003e6506 	br	10001f74 <__alt_data_end+0xf8001f74>
100025e0:	843fff84 	addi	r16,r16,-2
100025e4:	1d7fffc4 	addi	r21,r3,-1
100025e8:	dd412615 	stw	r21,1176(sp)
100025ec:	dc0122c5 	stb	r16,1163(sp)
100025f0:	a8009216 	blt	r21,zero,1000283c <___vfprintf_internal_r+0x20a0>
100025f4:	00800ac4 	movi	r2,43
100025f8:	d8812305 	stb	r2,1164(sp)
100025fc:	00800244 	movi	r2,9
10002600:	1540660e 	bge	r2,r21,1000279c <___vfprintf_internal_r+0x2000>
10002604:	dcc122c4 	addi	r19,sp,1163
10002608:	dc012c15 	stw	r16,1200(sp)
1000260c:	4023883a 	mov	r17,r8
10002610:	9821883a 	mov	r16,r19
10002614:	a809883a 	mov	r4,r21
10002618:	01400284 	movi	r5,10
1000261c:	000a6a40 	call	1000a6a4 <__modsi3>
10002620:	10800c04 	addi	r2,r2,48
10002624:	843fffc4 	addi	r16,r16,-1
10002628:	a809883a 	mov	r4,r21
1000262c:	01400284 	movi	r5,10
10002630:	80800005 	stb	r2,0(r16)
10002634:	000a6500 	call	1000a650 <__divsi3>
10002638:	01000244 	movi	r4,9
1000263c:	102b883a 	mov	r21,r2
10002640:	20bff416 	blt	r4,r2,10002614 <__alt_data_end+0xf8002614>
10002644:	8811883a 	mov	r8,r17
10002648:	10800c04 	addi	r2,r2,48
1000264c:	8023883a 	mov	r17,r16
10002650:	897fffc4 	addi	r5,r17,-1
10002654:	88bfffc5 	stb	r2,-1(r17)
10002658:	dc012c17 	ldw	r16,1200(sp)
1000265c:	2cc08a2e 	bgeu	r5,r19,10002888 <___vfprintf_internal_r+0x20ec>
10002660:	d9812384 	addi	r6,sp,1166
10002664:	344dc83a 	sub	r6,r6,r17
10002668:	d9012344 	addi	r4,sp,1165
1000266c:	998d883a 	add	r6,r19,r6
10002670:	00000106 	br	10002678 <___vfprintf_internal_r+0x1edc>
10002674:	28800003 	ldbu	r2,0(r5)
10002678:	20800005 	stb	r2,0(r4)
1000267c:	21000044 	addi	r4,r4,1
10002680:	29400044 	addi	r5,r5,1
10002684:	21bffb1e 	bne	r4,r6,10002674 <__alt_data_end+0xf8002674>
10002688:	d8812304 	addi	r2,sp,1164
1000268c:	1445c83a 	sub	r2,r2,r17
10002690:	d9412344 	addi	r5,sp,1165
10002694:	2885883a 	add	r2,r5,r2
10002698:	14e7c83a 	sub	r19,r2,r19
1000269c:	d8813317 	ldw	r2,1228(sp)
100026a0:	d8c13317 	ldw	r3,1228(sp)
100026a4:	dcc13a15 	stw	r19,1256(sp)
100026a8:	14e3883a 	add	r17,r2,r19
100026ac:	00800044 	movi	r2,1
100026b0:	10c0550e 	bge	r2,r3,10002808 <___vfprintf_internal_r+0x206c>
100026b4:	8c400044 	addi	r17,r17,1
100026b8:	8839883a 	mov	fp,r17
100026bc:	88005016 	blt	r17,zero,10002800 <___vfprintf_internal_r+0x2064>
100026c0:	d8013415 	stw	zero,1232(sp)
100026c4:	003e3f06 	br	10001fc4 <__alt_data_end+0xf8001fc4>
100026c8:	da412b15 	stw	r9,1196(sp)
100026cc:	dcc12783 	ldbu	r19,1182(sp)
100026d0:	4823883a 	mov	r17,r9
100026d4:	dc812d15 	stw	r18,1204(sp)
100026d8:	d8013215 	stw	zero,1224(sp)
100026dc:	d8013415 	stw	zero,1232(sp)
100026e0:	0039ae06 	br	10000d9c <__alt_data_end+0xf8000d9c>
100026e4:	483de91e 	bne	r9,zero,10001e8c <__alt_data_end+0xf8001e8c>
100026e8:	8813883a 	mov	r9,r17
100026ec:	003de706 	br	10001e8c <__alt_data_end+0xf8001e8c>
100026f0:	b809883a 	mov	r4,r23
100026f4:	b00b883a 	mov	r5,r22
100026f8:	d9811e04 	addi	r6,sp,1144
100026fc:	0007bdc0 	call	10007bdc <__sprint_r>
10002700:	10393e1e 	bne	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10002704:	dc012617 	ldw	r16,1176(sp)
10002708:	d8c12017 	ldw	r3,1152(sp)
1000270c:	d8811f17 	ldw	r2,1148(sp)
10002710:	da000404 	addi	r8,sp,16
10002714:	003ea006 	br	10002198 <__alt_data_end+0xf8002198>
10002718:	00c00b44 	movi	r3,45
1000271c:	2460003c 	xorhi	r17,r4,32768
10002720:	d8c12b05 	stb	r3,1196(sp)
10002724:	003ddf06 	br	10001ea4 <__alt_data_end+0xf8001ea4>
10002728:	02400184 	movi	r9,6
1000272c:	003dd706 	br	10001e8c <__alt_data_end+0xf8001e8c>
10002730:	4d400044 	addi	r21,r9,1
10002734:	003de206 	br	10001ec0 <__alt_data_end+0xf8001ec0>
10002738:	d8c13417 	ldw	r3,1232(sp)
1000273c:	00c0490e 	bge	zero,r3,10002864 <___vfprintf_internal_r+0x20c8>
10002740:	04400044 	movi	r17,1
10002744:	d9013317 	ldw	r4,1228(sp)
10002748:	8923883a 	add	r17,r17,r4
1000274c:	8839883a 	mov	fp,r17
10002750:	883e1c0e 	bge	r17,zero,10001fc4 <__alt_data_end+0xf8001fc4>
10002754:	0039883a 	mov	fp,zero
10002758:	003e1a06 	br	10001fc4 <__alt_data_end+0xf8001fc4>
1000275c:	00c03b0e 	bge	zero,r3,1000284c <___vfprintf_internal_r+0x20b0>
10002760:	4800021e 	bne	r9,zero,1000276c <___vfprintf_internal_r+0x1fd0>
10002764:	e080004c 	andi	r2,fp,1
10002768:	10000626 	beq	r2,zero,10002784 <___vfprintf_internal_r+0x1fe8>
1000276c:	d8c13417 	ldw	r3,1232(sp)
10002770:	4a400044 	addi	r9,r9,1
10002774:	1a63883a 	add	r17,r3,r9
10002778:	8839883a 	mov	fp,r17
1000277c:	883e110e 	bge	r17,zero,10001fc4 <__alt_data_end+0xf8001fc4>
10002780:	003ff406 	br	10002754 <__alt_data_end+0xf8002754>
10002784:	1839883a 	mov	fp,r3
10002788:	18004116 	blt	r3,zero,10002890 <___vfprintf_internal_r+0x20f4>
1000278c:	dc413417 	ldw	r17,1232(sp)
10002790:	003e0c06 	br	10001fc4 <__alt_data_end+0xf8001fc4>
10002794:	d8812117 	ldw	r2,1156(sp)
10002798:	003df606 	br	10001f74 <__alt_data_end+0xf8001f74>
1000279c:	00800c04 	movi	r2,48
100027a0:	a8c00c04 	addi	r3,r21,48
100027a4:	d8812345 	stb	r2,1165(sp)
100027a8:	d8c12385 	stb	r3,1166(sp)
100027ac:	d88123c4 	addi	r2,sp,1167
100027b0:	dcc122c4 	addi	r19,sp,1163
100027b4:	003fb806 	br	10002698 <__alt_data_end+0xf8002698>
100027b8:	d9013717 	ldw	r4,1244(sp)
100027bc:	880b883a 	mov	r5,r17
100027c0:	000d883a 	mov	r6,zero
100027c4:	000f883a 	mov	r7,zero
100027c8:	da013f15 	stw	r8,1276(sp)
100027cc:	da413e15 	stw	r9,1272(sp)
100027d0:	da813d15 	stw	r10,1268(sp)
100027d4:	000b92c0 	call	1000b92c <__eqdf2>
100027d8:	da013f17 	ldw	r8,1276(sp)
100027dc:	da413e17 	ldw	r9,1272(sp)
100027e0:	da813d17 	ldw	r10,1268(sp)
100027e4:	103f1726 	beq	r2,zero,10002444 <__alt_data_end+0xf8002444>
100027e8:	00800044 	movi	r2,1
100027ec:	1547c83a 	sub	r3,r2,r21
100027f0:	d8c12615 	stw	r3,1176(sp)
100027f4:	003f1406 	br	10002448 <__alt_data_end+0xf8002448>
100027f8:	0005883a 	mov	r2,zero
100027fc:	003f4c06 	br	10002530 <__alt_data_end+0xf8002530>
10002800:	0039883a 	mov	fp,zero
10002804:	003fae06 	br	100026c0 <__alt_data_end+0xf80026c0>
10002808:	e084703a 	and	r2,fp,r2
1000280c:	103faa26 	beq	r2,zero,100026b8 <__alt_data_end+0xf80026b8>
10002810:	003fa806 	br	100026b4 <__alt_data_end+0xf80026b4>
10002814:	d9412d17 	ldw	r5,1204(sp)
10002818:	2a400017 	ldw	r9,0(r5)
1000281c:	28c00104 	addi	r3,r5,4
10002820:	d8c12d15 	stw	r3,1204(sp)
10002824:	483ebc0e 	bge	r9,zero,10002318 <__alt_data_end+0xf8002318>
10002828:	027fffc4 	movi	r9,-1
1000282c:	e4000047 	ldb	r16,1(fp)
10002830:	00384206 	br	1000093c <__alt_data_end+0xf800093c>
10002834:	043fffc4 	movi	r16,-1
10002838:	0038ce06 	br	10000b74 <__alt_data_end+0xf8000b74>
1000283c:	00800b44 	movi	r2,45
10002840:	056bc83a 	sub	r21,zero,r21
10002844:	d8812305 	stb	r2,1164(sp)
10002848:	003f6c06 	br	100025fc <__alt_data_end+0xf80025fc>
1000284c:	4800081e 	bne	r9,zero,10002870 <___vfprintf_internal_r+0x20d4>
10002850:	e080004c 	andi	r2,fp,1
10002854:	1000061e 	bne	r2,zero,10002870 <___vfprintf_internal_r+0x20d4>
10002858:	07000044 	movi	fp,1
1000285c:	e023883a 	mov	r17,fp
10002860:	003dd806 	br	10001fc4 <__alt_data_end+0xf8001fc4>
10002864:	04400084 	movi	r17,2
10002868:	88e3c83a 	sub	r17,r17,r3
1000286c:	003fb506 	br	10002744 <__alt_data_end+0xf8002744>
10002870:	4c400084 	addi	r17,r9,2
10002874:	8839883a 	mov	fp,r17
10002878:	883dd20e 	bge	r17,zero,10001fc4 <__alt_data_end+0xf8001fc4>
1000287c:	003fb506 	br	10002754 <__alt_data_end+0xf8002754>
10002880:	d8c12617 	ldw	r3,1176(sp)
10002884:	003f5706 	br	100025e4 <__alt_data_end+0xf80025e4>
10002888:	d8812344 	addi	r2,sp,1165
1000288c:	003f8206 	br	10002698 <__alt_data_end+0xf8002698>
10002890:	0039883a 	mov	fp,zero
10002894:	003fbd06 	br	1000278c <__alt_data_end+0xf800278c>

10002898 <__vfprintf_internal>:
10002898:	2007883a 	mov	r3,r4
1000289c:	01040074 	movhi	r4,4097
100028a0:	21052904 	addi	r4,r4,5284
100028a4:	21000017 	ldw	r4,0(r4)
100028a8:	2805883a 	mov	r2,r5
100028ac:	300f883a 	mov	r7,r6
100028b0:	180b883a 	mov	r5,r3
100028b4:	100d883a 	mov	r6,r2
100028b8:	000079c1 	jmpi	1000079c <___vfprintf_internal_r>

100028bc <__swsetup_r>:
100028bc:	00840074 	movhi	r2,4097
100028c0:	defffd04 	addi	sp,sp,-12
100028c4:	10852904 	addi	r2,r2,5284
100028c8:	dc400115 	stw	r17,4(sp)
100028cc:	2023883a 	mov	r17,r4
100028d0:	11000017 	ldw	r4,0(r2)
100028d4:	dc000015 	stw	r16,0(sp)
100028d8:	dfc00215 	stw	ra,8(sp)
100028dc:	2821883a 	mov	r16,r5
100028e0:	20000226 	beq	r4,zero,100028ec <__swsetup_r+0x30>
100028e4:	20c00e17 	ldw	r3,56(r4)
100028e8:	18002e26 	beq	r3,zero,100029a4 <__swsetup_r+0xe8>
100028ec:	8080030b 	ldhu	r2,12(r16)
100028f0:	10c0020c 	andi	r3,r2,8
100028f4:	100d883a 	mov	r6,r2
100028f8:	18000f26 	beq	r3,zero,10002938 <__swsetup_r+0x7c>
100028fc:	80c00417 	ldw	r3,16(r16)
10002900:	18001526 	beq	r3,zero,10002958 <__swsetup_r+0x9c>
10002904:	1100004c 	andi	r4,r2,1
10002908:	20001c1e 	bne	r4,zero,1000297c <__swsetup_r+0xc0>
1000290c:	1080008c 	andi	r2,r2,2
10002910:	1000261e 	bne	r2,zero,100029ac <__swsetup_r+0xf0>
10002914:	80800517 	ldw	r2,20(r16)
10002918:	80800215 	stw	r2,8(r16)
1000291c:	18001c26 	beq	r3,zero,10002990 <__swsetup_r+0xd4>
10002920:	0005883a 	mov	r2,zero
10002924:	dfc00217 	ldw	ra,8(sp)
10002928:	dc400117 	ldw	r17,4(sp)
1000292c:	dc000017 	ldw	r16,0(sp)
10002930:	dec00304 	addi	sp,sp,12
10002934:	f800283a 	ret
10002938:	3080040c 	andi	r2,r6,16
1000293c:	10001726 	beq	r2,zero,1000299c <__swsetup_r+0xe0>
10002940:	3080010c 	andi	r2,r6,4
10002944:	10001b1e 	bne	r2,zero,100029b4 <__swsetup_r+0xf8>
10002948:	80c00417 	ldw	r3,16(r16)
1000294c:	30800214 	ori	r2,r6,8
10002950:	8080030d 	sth	r2,12(r16)
10002954:	183feb1e 	bne	r3,zero,10002904 <__alt_data_end+0xf8002904>
10002958:	1140a00c 	andi	r5,r2,640
1000295c:	01008004 	movi	r4,512
10002960:	293fe826 	beq	r5,r4,10002904 <__alt_data_end+0xf8002904>
10002964:	8809883a 	mov	r4,r17
10002968:	800b883a 	mov	r5,r16
1000296c:	00054500 	call	10005450 <__smakebuf_r>
10002970:	8080030b 	ldhu	r2,12(r16)
10002974:	80c00417 	ldw	r3,16(r16)
10002978:	003fe206 	br	10002904 <__alt_data_end+0xf8002904>
1000297c:	80800517 	ldw	r2,20(r16)
10002980:	80000215 	stw	zero,8(r16)
10002984:	0085c83a 	sub	r2,zero,r2
10002988:	80800615 	stw	r2,24(r16)
1000298c:	183fe41e 	bne	r3,zero,10002920 <__alt_data_end+0xf8002920>
10002990:	8080030b 	ldhu	r2,12(r16)
10002994:	1080200c 	andi	r2,r2,128
10002998:	103fe226 	beq	r2,zero,10002924 <__alt_data_end+0xf8002924>
1000299c:	00bfffc4 	movi	r2,-1
100029a0:	003fe006 	br	10002924 <__alt_data_end+0xf8002924>
100029a4:	00048f80 	call	100048f8 <__sinit>
100029a8:	003fd006 	br	100028ec <__alt_data_end+0xf80028ec>
100029ac:	0005883a 	mov	r2,zero
100029b0:	003fd906 	br	10002918 <__alt_data_end+0xf8002918>
100029b4:	81400c17 	ldw	r5,48(r16)
100029b8:	28000626 	beq	r5,zero,100029d4 <__swsetup_r+0x118>
100029bc:	80801004 	addi	r2,r16,64
100029c0:	28800326 	beq	r5,r2,100029d0 <__swsetup_r+0x114>
100029c4:	8809883a 	mov	r4,r17
100029c8:	0004a6c0 	call	10004a6c <_free_r>
100029cc:	8180030b 	ldhu	r6,12(r16)
100029d0:	80000c15 	stw	zero,48(r16)
100029d4:	80c00417 	ldw	r3,16(r16)
100029d8:	00bff6c4 	movi	r2,-37
100029dc:	118c703a 	and	r6,r2,r6
100029e0:	80000115 	stw	zero,4(r16)
100029e4:	80c00015 	stw	r3,0(r16)
100029e8:	003fd806 	br	1000294c <__alt_data_end+0xf800294c>

100029ec <quorem>:
100029ec:	defff204 	addi	sp,sp,-56
100029f0:	ddc00b15 	stw	r23,44(sp)
100029f4:	20800417 	ldw	r2,16(r4)
100029f8:	2dc00417 	ldw	r23,16(r5)
100029fc:	dfc00d15 	stw	ra,52(sp)
10002a00:	df000c15 	stw	fp,48(sp)
10002a04:	dd800a15 	stw	r22,40(sp)
10002a08:	dd400915 	stw	r21,36(sp)
10002a0c:	dd000815 	stw	r20,32(sp)
10002a10:	dcc00715 	stw	r19,28(sp)
10002a14:	dc800615 	stw	r18,24(sp)
10002a18:	dc400515 	stw	r17,20(sp)
10002a1c:	dc000415 	stw	r16,16(sp)
10002a20:	15c07a16 	blt	r2,r23,10002c0c <quorem+0x220>
10002a24:	bdffffc4 	addi	r23,r23,-1
10002a28:	bde9883a 	add	r20,r23,r23
10002a2c:	28c00504 	addi	r3,r5,20
10002a30:	a529883a 	add	r20,r20,r20
10002a34:	1d39883a 	add	fp,r3,r20
10002a38:	24c00504 	addi	r19,r4,20
10002a3c:	d9400215 	stw	r5,8(sp)
10002a40:	9d29883a 	add	r20,r19,r20
10002a44:	e1400017 	ldw	r5,0(fp)
10002a48:	d9000015 	stw	r4,0(sp)
10002a4c:	a1000017 	ldw	r4,0(r20)
10002a50:	29400044 	addi	r5,r5,1
10002a54:	d8c00115 	stw	r3,4(sp)
10002a58:	dd000315 	stw	r20,12(sp)
10002a5c:	000a7000 	call	1000a700 <__udivsi3>
10002a60:	1025883a 	mov	r18,r2
10002a64:	10003026 	beq	r2,zero,10002b28 <quorem+0x13c>
10002a68:	dc400117 	ldw	r17,4(sp)
10002a6c:	9829883a 	mov	r20,r19
10002a70:	002d883a 	mov	r22,zero
10002a74:	0021883a 	mov	r16,zero
10002a78:	8d400017 	ldw	r21,0(r17)
10002a7c:	900b883a 	mov	r5,r18
10002a80:	8c400104 	addi	r17,r17,4
10002a84:	a93fffcc 	andi	r4,r21,65535
10002a88:	00005a80 	call	100005a8 <__mulsi3>
10002a8c:	a808d43a 	srli	r4,r21,16
10002a90:	900b883a 	mov	r5,r18
10002a94:	b0ad883a 	add	r22,r22,r2
10002a98:	00005a80 	call	100005a8 <__mulsi3>
10002a9c:	a1000017 	ldw	r4,0(r20)
10002aa0:	b00cd43a 	srli	r6,r22,16
10002aa4:	b0ffffcc 	andi	r3,r22,65535
10002aa8:	217fffcc 	andi	r5,r4,65535
10002aac:	2c21883a 	add	r16,r5,r16
10002ab0:	80c7c83a 	sub	r3,r16,r3
10002ab4:	2008d43a 	srli	r4,r4,16
10002ab8:	3085883a 	add	r2,r6,r2
10002abc:	1821d43a 	srai	r16,r3,16
10002ac0:	117fffcc 	andi	r5,r2,65535
10002ac4:	2149c83a 	sub	r4,r4,r5
10002ac8:	2421883a 	add	r16,r4,r16
10002acc:	8008943a 	slli	r4,r16,16
10002ad0:	18ffffcc 	andi	r3,r3,65535
10002ad4:	102cd43a 	srli	r22,r2,16
10002ad8:	20c8b03a 	or	r4,r4,r3
10002adc:	a1000015 	stw	r4,0(r20)
10002ae0:	8021d43a 	srai	r16,r16,16
10002ae4:	a5000104 	addi	r20,r20,4
10002ae8:	e47fe32e 	bgeu	fp,r17,10002a78 <__alt_data_end+0xf8002a78>
10002aec:	d8c00317 	ldw	r3,12(sp)
10002af0:	18800017 	ldw	r2,0(r3)
10002af4:	10000c1e 	bne	r2,zero,10002b28 <quorem+0x13c>
10002af8:	18bfff04 	addi	r2,r3,-4
10002afc:	9880082e 	bgeu	r19,r2,10002b20 <quorem+0x134>
10002b00:	18ffff17 	ldw	r3,-4(r3)
10002b04:	18000326 	beq	r3,zero,10002b14 <quorem+0x128>
10002b08:	00000506 	br	10002b20 <quorem+0x134>
10002b0c:	10c00017 	ldw	r3,0(r2)
10002b10:	1800031e 	bne	r3,zero,10002b20 <quorem+0x134>
10002b14:	10bfff04 	addi	r2,r2,-4
10002b18:	bdffffc4 	addi	r23,r23,-1
10002b1c:	98bffb36 	bltu	r19,r2,10002b0c <__alt_data_end+0xf8002b0c>
10002b20:	d8c00017 	ldw	r3,0(sp)
10002b24:	1dc00415 	stw	r23,16(r3)
10002b28:	d9000017 	ldw	r4,0(sp)
10002b2c:	d9400217 	ldw	r5,8(sp)
10002b30:	0006bcc0 	call	10006bcc <__mcmp>
10002b34:	10002816 	blt	r2,zero,10002bd8 <quorem+0x1ec>
10002b38:	dc400117 	ldw	r17,4(sp)
10002b3c:	94800044 	addi	r18,r18,1
10002b40:	980d883a 	mov	r6,r19
10002b44:	0007883a 	mov	r3,zero
10002b48:	31000017 	ldw	r4,0(r6)
10002b4c:	89400017 	ldw	r5,0(r17)
10002b50:	31800104 	addi	r6,r6,4
10002b54:	20bfffcc 	andi	r2,r4,65535
10002b58:	10c7883a 	add	r3,r2,r3
10002b5c:	28bfffcc 	andi	r2,r5,65535
10002b60:	1885c83a 	sub	r2,r3,r2
10002b64:	280ad43a 	srli	r5,r5,16
10002b68:	2008d43a 	srli	r4,r4,16
10002b6c:	1007d43a 	srai	r3,r2,16
10002b70:	10bfffcc 	andi	r2,r2,65535
10002b74:	2149c83a 	sub	r4,r4,r5
10002b78:	20c9883a 	add	r4,r4,r3
10002b7c:	200a943a 	slli	r5,r4,16
10002b80:	8c400104 	addi	r17,r17,4
10002b84:	2007d43a 	srai	r3,r4,16
10002b88:	2884b03a 	or	r2,r5,r2
10002b8c:	30bfff15 	stw	r2,-4(r6)
10002b90:	e47fed2e 	bgeu	fp,r17,10002b48 <__alt_data_end+0xf8002b48>
10002b94:	bdc5883a 	add	r2,r23,r23
10002b98:	1085883a 	add	r2,r2,r2
10002b9c:	9887883a 	add	r3,r19,r2
10002ba0:	18800017 	ldw	r2,0(r3)
10002ba4:	10000c1e 	bne	r2,zero,10002bd8 <quorem+0x1ec>
10002ba8:	18bfff04 	addi	r2,r3,-4
10002bac:	9880082e 	bgeu	r19,r2,10002bd0 <quorem+0x1e4>
10002bb0:	18ffff17 	ldw	r3,-4(r3)
10002bb4:	18000326 	beq	r3,zero,10002bc4 <quorem+0x1d8>
10002bb8:	00000506 	br	10002bd0 <quorem+0x1e4>
10002bbc:	10c00017 	ldw	r3,0(r2)
10002bc0:	1800031e 	bne	r3,zero,10002bd0 <quorem+0x1e4>
10002bc4:	10bfff04 	addi	r2,r2,-4
10002bc8:	bdffffc4 	addi	r23,r23,-1
10002bcc:	98bffb36 	bltu	r19,r2,10002bbc <__alt_data_end+0xf8002bbc>
10002bd0:	d8c00017 	ldw	r3,0(sp)
10002bd4:	1dc00415 	stw	r23,16(r3)
10002bd8:	9005883a 	mov	r2,r18
10002bdc:	dfc00d17 	ldw	ra,52(sp)
10002be0:	df000c17 	ldw	fp,48(sp)
10002be4:	ddc00b17 	ldw	r23,44(sp)
10002be8:	dd800a17 	ldw	r22,40(sp)
10002bec:	dd400917 	ldw	r21,36(sp)
10002bf0:	dd000817 	ldw	r20,32(sp)
10002bf4:	dcc00717 	ldw	r19,28(sp)
10002bf8:	dc800617 	ldw	r18,24(sp)
10002bfc:	dc400517 	ldw	r17,20(sp)
10002c00:	dc000417 	ldw	r16,16(sp)
10002c04:	dec00e04 	addi	sp,sp,56
10002c08:	f800283a 	ret
10002c0c:	0005883a 	mov	r2,zero
10002c10:	003ff206 	br	10002bdc <__alt_data_end+0xf8002bdc>

10002c14 <_dtoa_r>:
10002c14:	20801017 	ldw	r2,64(r4)
10002c18:	deffde04 	addi	sp,sp,-136
10002c1c:	dd401d15 	stw	r21,116(sp)
10002c20:	dcc01b15 	stw	r19,108(sp)
10002c24:	dc801a15 	stw	r18,104(sp)
10002c28:	dc401915 	stw	r17,100(sp)
10002c2c:	dc001815 	stw	r16,96(sp)
10002c30:	dfc02115 	stw	ra,132(sp)
10002c34:	df002015 	stw	fp,128(sp)
10002c38:	ddc01f15 	stw	r23,124(sp)
10002c3c:	dd801e15 	stw	r22,120(sp)
10002c40:	dd001c15 	stw	r20,112(sp)
10002c44:	d9c00315 	stw	r7,12(sp)
10002c48:	2021883a 	mov	r16,r4
10002c4c:	302b883a 	mov	r21,r6
10002c50:	2825883a 	mov	r18,r5
10002c54:	dc402417 	ldw	r17,144(sp)
10002c58:	3027883a 	mov	r19,r6
10002c5c:	10000826 	beq	r2,zero,10002c80 <_dtoa_r+0x6c>
10002c60:	21801117 	ldw	r6,68(r4)
10002c64:	00c00044 	movi	r3,1
10002c68:	100b883a 	mov	r5,r2
10002c6c:	1986983a 	sll	r3,r3,r6
10002c70:	11800115 	stw	r6,4(r2)
10002c74:	10c00215 	stw	r3,8(r2)
10002c78:	00062f80 	call	100062f8 <_Bfree>
10002c7c:	80001015 	stw	zero,64(r16)
10002c80:	a8002d16 	blt	r21,zero,10002d38 <_dtoa_r+0x124>
10002c84:	88000015 	stw	zero,0(r17)
10002c88:	a8dffc2c 	andhi	r3,r21,32752
10002c8c:	009ffc34 	movhi	r2,32752
10002c90:	18801b26 	beq	r3,r2,10002d00 <_dtoa_r+0xec>
10002c94:	9009883a 	mov	r4,r18
10002c98:	980b883a 	mov	r5,r19
10002c9c:	000d883a 	mov	r6,zero
10002ca0:	000f883a 	mov	r7,zero
10002ca4:	000b92c0 	call	1000b92c <__eqdf2>
10002ca8:	10002a1e 	bne	r2,zero,10002d54 <_dtoa_r+0x140>
10002cac:	d8c02317 	ldw	r3,140(sp)
10002cb0:	d9002517 	ldw	r4,148(sp)
10002cb4:	00800044 	movi	r2,1
10002cb8:	18800015 	stw	r2,0(r3)
10002cbc:	2001a226 	beq	r4,zero,10003348 <_dtoa_r+0x734>
10002cc0:	00840074 	movhi	r2,4097
10002cc4:	10bdce44 	addi	r2,r2,-2247
10002cc8:	20800015 	stw	r2,0(r4)
10002ccc:	10bfffc4 	addi	r2,r2,-1
10002cd0:	dfc02117 	ldw	ra,132(sp)
10002cd4:	df002017 	ldw	fp,128(sp)
10002cd8:	ddc01f17 	ldw	r23,124(sp)
10002cdc:	dd801e17 	ldw	r22,120(sp)
10002ce0:	dd401d17 	ldw	r21,116(sp)
10002ce4:	dd001c17 	ldw	r20,112(sp)
10002ce8:	dcc01b17 	ldw	r19,108(sp)
10002cec:	dc801a17 	ldw	r18,104(sp)
10002cf0:	dc401917 	ldw	r17,100(sp)
10002cf4:	dc001817 	ldw	r16,96(sp)
10002cf8:	dec02204 	addi	sp,sp,136
10002cfc:	f800283a 	ret
10002d00:	d8c02317 	ldw	r3,140(sp)
10002d04:	0089c3c4 	movi	r2,9999
10002d08:	18800015 	stw	r2,0(r3)
10002d0c:	90017c26 	beq	r18,zero,10003300 <_dtoa_r+0x6ec>
10002d10:	00840074 	movhi	r2,4097
10002d14:	10bdda04 	addi	r2,r2,-2200
10002d18:	d9002517 	ldw	r4,148(sp)
10002d1c:	203fec26 	beq	r4,zero,10002cd0 <__alt_data_end+0xf8002cd0>
10002d20:	10c000c7 	ldb	r3,3(r2)
10002d24:	18017d1e 	bne	r3,zero,1000331c <_dtoa_r+0x708>
10002d28:	10c000c4 	addi	r3,r2,3
10002d2c:	d9802517 	ldw	r6,148(sp)
10002d30:	30c00015 	stw	r3,0(r6)
10002d34:	003fe606 	br	10002cd0 <__alt_data_end+0xf8002cd0>
10002d38:	04e00034 	movhi	r19,32768
10002d3c:	9cffffc4 	addi	r19,r19,-1
10002d40:	00800044 	movi	r2,1
10002d44:	ace6703a 	and	r19,r21,r19
10002d48:	88800015 	stw	r2,0(r17)
10002d4c:	982b883a 	mov	r21,r19
10002d50:	003fcd06 	br	10002c88 <__alt_data_end+0xf8002c88>
10002d54:	d8800204 	addi	r2,sp,8
10002d58:	a822d53a 	srli	r17,r21,20
10002d5c:	d8800015 	stw	r2,0(sp)
10002d60:	8009883a 	mov	r4,r16
10002d64:	900b883a 	mov	r5,r18
10002d68:	980d883a 	mov	r6,r19
10002d6c:	d9c00104 	addi	r7,sp,4
10002d70:	0006f400 	call	10006f40 <__d2b>
10002d74:	1039883a 	mov	fp,r2
10002d78:	88016a1e 	bne	r17,zero,10003324 <_dtoa_r+0x710>
10002d7c:	dd000217 	ldw	r20,8(sp)
10002d80:	dc400117 	ldw	r17,4(sp)
10002d84:	00befbc4 	movi	r2,-1041
10002d88:	a463883a 	add	r17,r20,r17
10002d8c:	8882ea16 	blt	r17,r2,10003938 <_dtoa_r+0xd24>
10002d90:	00bf0384 	movi	r2,-1010
10002d94:	1445c83a 	sub	r2,r2,r17
10002d98:	89010484 	addi	r4,r17,1042
10002d9c:	a8aa983a 	sll	r21,r21,r2
10002da0:	9108d83a 	srl	r4,r18,r4
10002da4:	a908b03a 	or	r4,r21,r4
10002da8:	000ce040 	call	1000ce04 <__floatunsidf>
10002dac:	017f8434 	movhi	r5,65040
10002db0:	01800044 	movi	r6,1
10002db4:	1009883a 	mov	r4,r2
10002db8:	194b883a 	add	r5,r3,r5
10002dbc:	8c7fffc4 	addi	r17,r17,-1
10002dc0:	d9800f15 	stw	r6,60(sp)
10002dc4:	000d883a 	mov	r6,zero
10002dc8:	01cffe34 	movhi	r7,16376
10002dcc:	000c3dc0 	call	1000c3dc <__subdf3>
10002dd0:	0198dbf4 	movhi	r6,25455
10002dd4:	01cff4f4 	movhi	r7,16339
10002dd8:	1009883a 	mov	r4,r2
10002ddc:	180b883a 	mov	r5,r3
10002de0:	3190d844 	addi	r6,r6,17249
10002de4:	39e1e9c4 	addi	r7,r7,-30809
10002de8:	000bb700 	call	1000bb70 <__muldf3>
10002dec:	01a2d874 	movhi	r6,35681
10002df0:	01cff1f4 	movhi	r7,16327
10002df4:	180b883a 	mov	r5,r3
10002df8:	31b22cc4 	addi	r6,r6,-14157
10002dfc:	39e28a04 	addi	r7,r7,-30168
10002e00:	1009883a 	mov	r4,r2
10002e04:	000a7100 	call	1000a710 <__adddf3>
10002e08:	8809883a 	mov	r4,r17
10002e0c:	102d883a 	mov	r22,r2
10002e10:	182b883a 	mov	r21,r3
10002e14:	000cd340 	call	1000cd34 <__floatsidf>
10002e18:	019427f4 	movhi	r6,20639
10002e1c:	01cff4f4 	movhi	r7,16339
10002e20:	1009883a 	mov	r4,r2
10002e24:	180b883a 	mov	r5,r3
10002e28:	319e7ec4 	addi	r6,r6,31227
10002e2c:	39d104c4 	addi	r7,r7,17427
10002e30:	000bb700 	call	1000bb70 <__muldf3>
10002e34:	b009883a 	mov	r4,r22
10002e38:	a80b883a 	mov	r5,r21
10002e3c:	100d883a 	mov	r6,r2
10002e40:	180f883a 	mov	r7,r3
10002e44:	000a7100 	call	1000a710 <__adddf3>
10002e48:	1009883a 	mov	r4,r2
10002e4c:	180b883a 	mov	r5,r3
10002e50:	102d883a 	mov	r22,r2
10002e54:	182b883a 	mov	r21,r3
10002e58:	000ccac0 	call	1000ccac <__fixdfsi>
10002e5c:	b009883a 	mov	r4,r22
10002e60:	a80b883a 	mov	r5,r21
10002e64:	000d883a 	mov	r6,zero
10002e68:	000f883a 	mov	r7,zero
10002e6c:	d8800515 	stw	r2,20(sp)
10002e70:	000ba900 	call	1000ba90 <__ledf2>
10002e74:	10023116 	blt	r2,zero,1000373c <_dtoa_r+0xb28>
10002e78:	d8c00517 	ldw	r3,20(sp)
10002e7c:	00800584 	movi	r2,22
10002e80:	10c21f36 	bltu	r2,r3,10003700 <_dtoa_r+0xaec>
10002e84:	180490fa 	slli	r2,r3,3
10002e88:	00c40074 	movhi	r3,4097
10002e8c:	18fdf604 	addi	r3,r3,-2088
10002e90:	1885883a 	add	r2,r3,r2
10002e94:	11000017 	ldw	r4,0(r2)
10002e98:	11400117 	ldw	r5,4(r2)
10002e9c:	900d883a 	mov	r6,r18
10002ea0:	980f883a 	mov	r7,r19
10002ea4:	000b9b00 	call	1000b9b0 <__gedf2>
10002ea8:	0082a70e 	bge	zero,r2,10003948 <_dtoa_r+0xd34>
10002eac:	d9000517 	ldw	r4,20(sp)
10002eb0:	d8000c15 	stw	zero,48(sp)
10002eb4:	213fffc4 	addi	r4,r4,-1
10002eb8:	d9000515 	stw	r4,20(sp)
10002ebc:	a463c83a 	sub	r17,r20,r17
10002ec0:	8dbfffc4 	addi	r22,r17,-1
10002ec4:	b0021916 	blt	r22,zero,1000372c <_dtoa_r+0xb18>
10002ec8:	d8000815 	stw	zero,32(sp)
10002ecc:	d8800517 	ldw	r2,20(sp)
10002ed0:	10020e16 	blt	r2,zero,1000370c <_dtoa_r+0xaf8>
10002ed4:	b0ad883a 	add	r22,r22,r2
10002ed8:	d8800a15 	stw	r2,40(sp)
10002edc:	d8000915 	stw	zero,36(sp)
10002ee0:	d8c00317 	ldw	r3,12(sp)
10002ee4:	00800244 	movi	r2,9
10002ee8:	10c11a36 	bltu	r2,r3,10003354 <_dtoa_r+0x740>
10002eec:	00800144 	movi	r2,5
10002ef0:	10c4fc0e 	bge	r2,r3,100042e4 <_dtoa_r+0x16d0>
10002ef4:	18ffff04 	addi	r3,r3,-4
10002ef8:	d8c00315 	stw	r3,12(sp)
10002efc:	0029883a 	mov	r20,zero
10002f00:	d9800317 	ldw	r6,12(sp)
10002f04:	008000c4 	movi	r2,3
10002f08:	3083bd26 	beq	r6,r2,10003e00 <_dtoa_r+0x11ec>
10002f0c:	1183670e 	bge	r2,r6,10003cac <_dtoa_r+0x1098>
10002f10:	d8c00317 	ldw	r3,12(sp)
10002f14:	00800104 	movi	r2,4
10002f18:	1882e726 	beq	r3,r2,10003ab8 <_dtoa_r+0xea4>
10002f1c:	00800144 	movi	r2,5
10002f20:	1884f21e 	bne	r3,r2,100042ec <_dtoa_r+0x16d8>
10002f24:	00800044 	movi	r2,1
10002f28:	d8800b15 	stw	r2,44(sp)
10002f2c:	d8c02217 	ldw	r3,136(sp)
10002f30:	d9000517 	ldw	r4,20(sp)
10002f34:	1907883a 	add	r3,r3,r4
10002f38:	19800044 	addi	r6,r3,1
10002f3c:	d8c00d15 	stw	r3,52(sp)
10002f40:	d9800615 	stw	r6,24(sp)
10002f44:	0183c30e 	bge	zero,r6,10003e54 <_dtoa_r+0x1240>
10002f48:	d9800617 	ldw	r6,24(sp)
10002f4c:	3023883a 	mov	r17,r6
10002f50:	80001115 	stw	zero,68(r16)
10002f54:	008005c4 	movi	r2,23
10002f58:	1184f62e 	bgeu	r2,r6,10004334 <_dtoa_r+0x1720>
10002f5c:	00c00044 	movi	r3,1
10002f60:	00800104 	movi	r2,4
10002f64:	1085883a 	add	r2,r2,r2
10002f68:	11000504 	addi	r4,r2,20
10002f6c:	180b883a 	mov	r5,r3
10002f70:	18c00044 	addi	r3,r3,1
10002f74:	313ffb2e 	bgeu	r6,r4,10002f64 <__alt_data_end+0xf8002f64>
10002f78:	81401115 	stw	r5,68(r16)
10002f7c:	8009883a 	mov	r4,r16
10002f80:	00062500 	call	10006250 <_Balloc>
10002f84:	d8800715 	stw	r2,28(sp)
10002f88:	80801015 	stw	r2,64(r16)
10002f8c:	00800384 	movi	r2,14
10002f90:	1440fd36 	bltu	r2,r17,10003388 <_dtoa_r+0x774>
10002f94:	a000fc26 	beq	r20,zero,10003388 <_dtoa_r+0x774>
10002f98:	d8800517 	ldw	r2,20(sp)
10002f9c:	0083b90e 	bge	zero,r2,10003e84 <_dtoa_r+0x1270>
10002fa0:	d8c00517 	ldw	r3,20(sp)
10002fa4:	108003cc 	andi	r2,r2,15
10002fa8:	100490fa 	slli	r2,r2,3
10002fac:	182fd13a 	srai	r23,r3,4
10002fb0:	00c40074 	movhi	r3,4097
10002fb4:	18fdf604 	addi	r3,r3,-2088
10002fb8:	1885883a 	add	r2,r3,r2
10002fbc:	b8c0040c 	andi	r3,r23,16
10002fc0:	12c00017 	ldw	r11,0(r2)
10002fc4:	12800117 	ldw	r10,4(r2)
10002fc8:	18039726 	beq	r3,zero,10003e28 <_dtoa_r+0x1214>
10002fcc:	00840074 	movhi	r2,4097
10002fd0:	10bdec04 	addi	r2,r2,-2128
10002fd4:	11800817 	ldw	r6,32(r2)
10002fd8:	11c00917 	ldw	r7,36(r2)
10002fdc:	9009883a 	mov	r4,r18
10002fe0:	980b883a 	mov	r5,r19
10002fe4:	da801615 	stw	r10,88(sp)
10002fe8:	dac01515 	stw	r11,84(sp)
10002fec:	000afac0 	call	1000afac <__divdf3>
10002ff0:	da801617 	ldw	r10,88(sp)
10002ff4:	dac01517 	ldw	r11,84(sp)
10002ff8:	bdc003cc 	andi	r23,r23,15
10002ffc:	044000c4 	movi	r17,3
10003000:	d8800e15 	stw	r2,56(sp)
10003004:	182b883a 	mov	r21,r3
10003008:	b8001126 	beq	r23,zero,10003050 <_dtoa_r+0x43c>
1000300c:	05040074 	movhi	r20,4097
10003010:	a53dec04 	addi	r20,r20,-2128
10003014:	5805883a 	mov	r2,r11
10003018:	5007883a 	mov	r3,r10
1000301c:	b980004c 	andi	r6,r23,1
10003020:	1009883a 	mov	r4,r2
10003024:	b82fd07a 	srai	r23,r23,1
10003028:	180b883a 	mov	r5,r3
1000302c:	30000426 	beq	r6,zero,10003040 <_dtoa_r+0x42c>
10003030:	a1800017 	ldw	r6,0(r20)
10003034:	a1c00117 	ldw	r7,4(r20)
10003038:	8c400044 	addi	r17,r17,1
1000303c:	000bb700 	call	1000bb70 <__muldf3>
10003040:	a5000204 	addi	r20,r20,8
10003044:	b83ff51e 	bne	r23,zero,1000301c <__alt_data_end+0xf800301c>
10003048:	1017883a 	mov	r11,r2
1000304c:	1815883a 	mov	r10,r3
10003050:	d9000e17 	ldw	r4,56(sp)
10003054:	a80b883a 	mov	r5,r21
10003058:	580d883a 	mov	r6,r11
1000305c:	500f883a 	mov	r7,r10
10003060:	000afac0 	call	1000afac <__divdf3>
10003064:	1029883a 	mov	r20,r2
10003068:	182b883a 	mov	r21,r3
1000306c:	d9800c17 	ldw	r6,48(sp)
10003070:	30000626 	beq	r6,zero,1000308c <_dtoa_r+0x478>
10003074:	a009883a 	mov	r4,r20
10003078:	a80b883a 	mov	r5,r21
1000307c:	000d883a 	mov	r6,zero
10003080:	01cffc34 	movhi	r7,16368
10003084:	000ba900 	call	1000ba90 <__ledf2>
10003088:	10043216 	blt	r2,zero,10004154 <_dtoa_r+0x1540>
1000308c:	8809883a 	mov	r4,r17
10003090:	000cd340 	call	1000cd34 <__floatsidf>
10003094:	1009883a 	mov	r4,r2
10003098:	180b883a 	mov	r5,r3
1000309c:	a00d883a 	mov	r6,r20
100030a0:	a80f883a 	mov	r7,r21
100030a4:	000bb700 	call	1000bb70 <__muldf3>
100030a8:	000d883a 	mov	r6,zero
100030ac:	1009883a 	mov	r4,r2
100030b0:	180b883a 	mov	r5,r3
100030b4:	01d00734 	movhi	r7,16412
100030b8:	000a7100 	call	1000a710 <__adddf3>
100030bc:	1023883a 	mov	r17,r2
100030c0:	d9800617 	ldw	r6,24(sp)
100030c4:	00bf3034 	movhi	r2,64704
100030c8:	1885883a 	add	r2,r3,r2
100030cc:	d8800e15 	stw	r2,56(sp)
100030d0:	30032e26 	beq	r6,zero,10003d8c <_dtoa_r+0x1178>
100030d4:	d8c00517 	ldw	r3,20(sp)
100030d8:	da800617 	ldw	r10,24(sp)
100030dc:	d8c01215 	stw	r3,72(sp)
100030e0:	d9000b17 	ldw	r4,44(sp)
100030e4:	2003b026 	beq	r4,zero,10003fa8 <_dtoa_r+0x1394>
100030e8:	50bfffc4 	addi	r2,r10,-1
100030ec:	100490fa 	slli	r2,r2,3
100030f0:	00c40074 	movhi	r3,4097
100030f4:	18fdf604 	addi	r3,r3,-2088
100030f8:	1885883a 	add	r2,r3,r2
100030fc:	11800017 	ldw	r6,0(r2)
10003100:	11c00117 	ldw	r7,4(r2)
10003104:	d8800717 	ldw	r2,28(sp)
10003108:	0009883a 	mov	r4,zero
1000310c:	014ff834 	movhi	r5,16352
10003110:	da801615 	stw	r10,88(sp)
10003114:	15c00044 	addi	r23,r2,1
10003118:	000afac0 	call	1000afac <__divdf3>
1000311c:	d9c00e17 	ldw	r7,56(sp)
10003120:	880d883a 	mov	r6,r17
10003124:	1009883a 	mov	r4,r2
10003128:	180b883a 	mov	r5,r3
1000312c:	000c3dc0 	call	1000c3dc <__subdf3>
10003130:	a80b883a 	mov	r5,r21
10003134:	a009883a 	mov	r4,r20
10003138:	d8c01015 	stw	r3,64(sp)
1000313c:	d8800e15 	stw	r2,56(sp)
10003140:	000ccac0 	call	1000ccac <__fixdfsi>
10003144:	1009883a 	mov	r4,r2
10003148:	d8801715 	stw	r2,92(sp)
1000314c:	000cd340 	call	1000cd34 <__floatsidf>
10003150:	a009883a 	mov	r4,r20
10003154:	a80b883a 	mov	r5,r21
10003158:	100d883a 	mov	r6,r2
1000315c:	180f883a 	mov	r7,r3
10003160:	000c3dc0 	call	1000c3dc <__subdf3>
10003164:	da001717 	ldw	r8,92(sp)
10003168:	1829883a 	mov	r20,r3
1000316c:	d8c00717 	ldw	r3,28(sp)
10003170:	d9000e17 	ldw	r4,56(sp)
10003174:	d9401017 	ldw	r5,64(sp)
10003178:	42000c04 	addi	r8,r8,48
1000317c:	1023883a 	mov	r17,r2
10003180:	1a000005 	stb	r8,0(r3)
10003184:	880d883a 	mov	r6,r17
10003188:	a00f883a 	mov	r7,r20
1000318c:	402b883a 	mov	r21,r8
10003190:	000b9b00 	call	1000b9b0 <__gedf2>
10003194:	00844516 	blt	zero,r2,100042ac <_dtoa_r+0x1698>
10003198:	0009883a 	mov	r4,zero
1000319c:	014ffc34 	movhi	r5,16368
100031a0:	880d883a 	mov	r6,r17
100031a4:	a00f883a 	mov	r7,r20
100031a8:	000c3dc0 	call	1000c3dc <__subdf3>
100031ac:	d9000e17 	ldw	r4,56(sp)
100031b0:	d9401017 	ldw	r5,64(sp)
100031b4:	100d883a 	mov	r6,r2
100031b8:	180f883a 	mov	r7,r3
100031bc:	000b9b00 	call	1000b9b0 <__gedf2>
100031c0:	da801617 	ldw	r10,88(sp)
100031c4:	00843616 	blt	zero,r2,100042a0 <_dtoa_r+0x168c>
100031c8:	00800044 	movi	r2,1
100031cc:	12806e0e 	bge	r2,r10,10003388 <_dtoa_r+0x774>
100031d0:	d9000717 	ldw	r4,28(sp)
100031d4:	dd801315 	stw	r22,76(sp)
100031d8:	dc001115 	stw	r16,68(sp)
100031dc:	2295883a 	add	r10,r4,r10
100031e0:	dcc01415 	stw	r19,80(sp)
100031e4:	502d883a 	mov	r22,r10
100031e8:	dcc01017 	ldw	r19,64(sp)
100031ec:	b821883a 	mov	r16,r23
100031f0:	dc801015 	stw	r18,64(sp)
100031f4:	dc800e17 	ldw	r18,56(sp)
100031f8:	00000906 	br	10003220 <_dtoa_r+0x60c>
100031fc:	000c3dc0 	call	1000c3dc <__subdf3>
10003200:	1009883a 	mov	r4,r2
10003204:	180b883a 	mov	r5,r3
10003208:	900d883a 	mov	r6,r18
1000320c:	980f883a 	mov	r7,r19
10003210:	000ba900 	call	1000ba90 <__ledf2>
10003214:	10040e16 	blt	r2,zero,10004250 <_dtoa_r+0x163c>
10003218:	b821883a 	mov	r16,r23
1000321c:	bd841026 	beq	r23,r22,10004260 <_dtoa_r+0x164c>
10003220:	9009883a 	mov	r4,r18
10003224:	980b883a 	mov	r5,r19
10003228:	000d883a 	mov	r6,zero
1000322c:	01d00934 	movhi	r7,16420
10003230:	000bb700 	call	1000bb70 <__muldf3>
10003234:	000d883a 	mov	r6,zero
10003238:	01d00934 	movhi	r7,16420
1000323c:	8809883a 	mov	r4,r17
10003240:	a00b883a 	mov	r5,r20
10003244:	1025883a 	mov	r18,r2
10003248:	1827883a 	mov	r19,r3
1000324c:	000bb700 	call	1000bb70 <__muldf3>
10003250:	180b883a 	mov	r5,r3
10003254:	1009883a 	mov	r4,r2
10003258:	1823883a 	mov	r17,r3
1000325c:	1029883a 	mov	r20,r2
10003260:	000ccac0 	call	1000ccac <__fixdfsi>
10003264:	1009883a 	mov	r4,r2
10003268:	102b883a 	mov	r21,r2
1000326c:	000cd340 	call	1000cd34 <__floatsidf>
10003270:	a009883a 	mov	r4,r20
10003274:	880b883a 	mov	r5,r17
10003278:	100d883a 	mov	r6,r2
1000327c:	180f883a 	mov	r7,r3
10003280:	000c3dc0 	call	1000c3dc <__subdf3>
10003284:	ad400c04 	addi	r21,r21,48
10003288:	1009883a 	mov	r4,r2
1000328c:	180b883a 	mov	r5,r3
10003290:	900d883a 	mov	r6,r18
10003294:	980f883a 	mov	r7,r19
10003298:	85400005 	stb	r21,0(r16)
1000329c:	1023883a 	mov	r17,r2
100032a0:	1829883a 	mov	r20,r3
100032a4:	000ba900 	call	1000ba90 <__ledf2>
100032a8:	bdc00044 	addi	r23,r23,1
100032ac:	0009883a 	mov	r4,zero
100032b0:	014ffc34 	movhi	r5,16368
100032b4:	880d883a 	mov	r6,r17
100032b8:	a00f883a 	mov	r7,r20
100032bc:	103fcf0e 	bge	r2,zero,100031fc <__alt_data_end+0xf80031fc>
100032c0:	d9801217 	ldw	r6,72(sp)
100032c4:	dc001117 	ldw	r16,68(sp)
100032c8:	d9800515 	stw	r6,20(sp)
100032cc:	8009883a 	mov	r4,r16
100032d0:	e00b883a 	mov	r5,fp
100032d4:	00062f80 	call	100062f8 <_Bfree>
100032d8:	d8c00517 	ldw	r3,20(sp)
100032dc:	d9002317 	ldw	r4,140(sp)
100032e0:	d9802517 	ldw	r6,148(sp)
100032e4:	b8000005 	stb	zero,0(r23)
100032e8:	18800044 	addi	r2,r3,1
100032ec:	20800015 	stw	r2,0(r4)
100032f0:	30027226 	beq	r6,zero,10003cbc <_dtoa_r+0x10a8>
100032f4:	35c00015 	stw	r23,0(r6)
100032f8:	d8800717 	ldw	r2,28(sp)
100032fc:	003e7406 	br	10002cd0 <__alt_data_end+0xf8002cd0>
10003300:	00800434 	movhi	r2,16
10003304:	10bfffc4 	addi	r2,r2,-1
10003308:	a8aa703a 	and	r21,r21,r2
1000330c:	a83e801e 	bne	r21,zero,10002d10 <__alt_data_end+0xf8002d10>
10003310:	00840074 	movhi	r2,4097
10003314:	10bdd704 	addi	r2,r2,-2212
10003318:	003e7f06 	br	10002d18 <__alt_data_end+0xf8002d18>
1000331c:	10c00204 	addi	r3,r2,8
10003320:	003e8206 	br	10002d2c <__alt_data_end+0xf8002d2c>
10003324:	01400434 	movhi	r5,16
10003328:	297fffc4 	addi	r5,r5,-1
1000332c:	994a703a 	and	r5,r19,r5
10003330:	9009883a 	mov	r4,r18
10003334:	8c7f0044 	addi	r17,r17,-1023
10003338:	294ffc34 	orhi	r5,r5,16368
1000333c:	dd000217 	ldw	r20,8(sp)
10003340:	d8000f15 	stw	zero,60(sp)
10003344:	003e9f06 	br	10002dc4 <__alt_data_end+0xf8002dc4>
10003348:	00840074 	movhi	r2,4097
1000334c:	10bdce04 	addi	r2,r2,-2248
10003350:	003e5f06 	br	10002cd0 <__alt_data_end+0xf8002cd0>
10003354:	80001115 	stw	zero,68(r16)
10003358:	8009883a 	mov	r4,r16
1000335c:	000b883a 	mov	r5,zero
10003360:	00062500 	call	10006250 <_Balloc>
10003364:	01bfffc4 	movi	r6,-1
10003368:	d8800715 	stw	r2,28(sp)
1000336c:	80801015 	stw	r2,64(r16)
10003370:	00800044 	movi	r2,1
10003374:	d9800615 	stw	r6,24(sp)
10003378:	d8800b15 	stw	r2,44(sp)
1000337c:	d8002215 	stw	zero,136(sp)
10003380:	d9800d15 	stw	r6,52(sp)
10003384:	d8000315 	stw	zero,12(sp)
10003388:	d8800117 	ldw	r2,4(sp)
1000338c:	10008e16 	blt	r2,zero,100035c8 <_dtoa_r+0x9b4>
10003390:	d9000517 	ldw	r4,20(sp)
10003394:	00c00384 	movi	r3,14
10003398:	19008b16 	blt	r3,r4,100035c8 <_dtoa_r+0x9b4>
1000339c:	200490fa 	slli	r2,r4,3
100033a0:	00c40074 	movhi	r3,4097
100033a4:	d9802217 	ldw	r6,136(sp)
100033a8:	18fdf604 	addi	r3,r3,-2088
100033ac:	1885883a 	add	r2,r3,r2
100033b0:	14400017 	ldw	r17,0(r2)
100033b4:	15000117 	ldw	r20,4(r2)
100033b8:	3001c716 	blt	r6,zero,10003ad8 <_dtoa_r+0xec4>
100033bc:	880d883a 	mov	r6,r17
100033c0:	a00f883a 	mov	r7,r20
100033c4:	9009883a 	mov	r4,r18
100033c8:	980b883a 	mov	r5,r19
100033cc:	000afac0 	call	1000afac <__divdf3>
100033d0:	180b883a 	mov	r5,r3
100033d4:	1009883a 	mov	r4,r2
100033d8:	000ccac0 	call	1000ccac <__fixdfsi>
100033dc:	1009883a 	mov	r4,r2
100033e0:	102d883a 	mov	r22,r2
100033e4:	000cd340 	call	1000cd34 <__floatsidf>
100033e8:	1009883a 	mov	r4,r2
100033ec:	180b883a 	mov	r5,r3
100033f0:	880d883a 	mov	r6,r17
100033f4:	a00f883a 	mov	r7,r20
100033f8:	000bb700 	call	1000bb70 <__muldf3>
100033fc:	9009883a 	mov	r4,r18
10003400:	980b883a 	mov	r5,r19
10003404:	100d883a 	mov	r6,r2
10003408:	180f883a 	mov	r7,r3
1000340c:	000c3dc0 	call	1000c3dc <__subdf3>
10003410:	d9000717 	ldw	r4,28(sp)
10003414:	d9800617 	ldw	r6,24(sp)
10003418:	180b883a 	mov	r5,r3
1000341c:	b0c00c04 	addi	r3,r22,48
10003420:	20c00005 	stb	r3,0(r4)
10003424:	25c00044 	addi	r23,r4,1
10003428:	01000044 	movi	r4,1
1000342c:	1011883a 	mov	r8,r2
10003430:	2807883a 	mov	r3,r5
10003434:	31003d26 	beq	r6,r4,1000352c <_dtoa_r+0x918>
10003438:	000d883a 	mov	r6,zero
1000343c:	01d00934 	movhi	r7,16420
10003440:	1009883a 	mov	r4,r2
10003444:	000bb700 	call	1000bb70 <__muldf3>
10003448:	1009883a 	mov	r4,r2
1000344c:	180b883a 	mov	r5,r3
10003450:	000d883a 	mov	r6,zero
10003454:	000f883a 	mov	r7,zero
10003458:	1027883a 	mov	r19,r2
1000345c:	182b883a 	mov	r21,r3
10003460:	000b92c0 	call	1000b92c <__eqdf2>
10003464:	103f9926 	beq	r2,zero,100032cc <__alt_data_end+0xf80032cc>
10003468:	d8c00617 	ldw	r3,24(sp)
1000346c:	d9000717 	ldw	r4,28(sp)
10003470:	b825883a 	mov	r18,r23
10003474:	18bfffc4 	addi	r2,r3,-1
10003478:	20ad883a 	add	r22,r4,r2
1000347c:	dc000315 	stw	r16,12(sp)
10003480:	00000a06 	br	100034ac <_dtoa_r+0x898>
10003484:	000bb700 	call	1000bb70 <__muldf3>
10003488:	1009883a 	mov	r4,r2
1000348c:	180b883a 	mov	r5,r3
10003490:	000d883a 	mov	r6,zero
10003494:	000f883a 	mov	r7,zero
10003498:	1027883a 	mov	r19,r2
1000349c:	182b883a 	mov	r21,r3
100034a0:	b825883a 	mov	r18,r23
100034a4:	000b92c0 	call	1000b92c <__eqdf2>
100034a8:	10022626 	beq	r2,zero,10003d44 <_dtoa_r+0x1130>
100034ac:	880d883a 	mov	r6,r17
100034b0:	a00f883a 	mov	r7,r20
100034b4:	9809883a 	mov	r4,r19
100034b8:	a80b883a 	mov	r5,r21
100034bc:	000afac0 	call	1000afac <__divdf3>
100034c0:	180b883a 	mov	r5,r3
100034c4:	1009883a 	mov	r4,r2
100034c8:	000ccac0 	call	1000ccac <__fixdfsi>
100034cc:	1009883a 	mov	r4,r2
100034d0:	1021883a 	mov	r16,r2
100034d4:	000cd340 	call	1000cd34 <__floatsidf>
100034d8:	1009883a 	mov	r4,r2
100034dc:	180b883a 	mov	r5,r3
100034e0:	880d883a 	mov	r6,r17
100034e4:	a00f883a 	mov	r7,r20
100034e8:	000bb700 	call	1000bb70 <__muldf3>
100034ec:	9809883a 	mov	r4,r19
100034f0:	a80b883a 	mov	r5,r21
100034f4:	100d883a 	mov	r6,r2
100034f8:	180f883a 	mov	r7,r3
100034fc:	000c3dc0 	call	1000c3dc <__subdf3>
10003500:	82000c04 	addi	r8,r16,48
10003504:	92000005 	stb	r8,0(r18)
10003508:	1009883a 	mov	r4,r2
1000350c:	180b883a 	mov	r5,r3
10003510:	000d883a 	mov	r6,zero
10003514:	01d00934 	movhi	r7,16420
10003518:	1011883a 	mov	r8,r2
1000351c:	bdc00044 	addi	r23,r23,1
10003520:	95bfd81e 	bne	r18,r22,10003484 <__alt_data_end+0xf8003484>
10003524:	802d883a 	mov	r22,r16
10003528:	dc000317 	ldw	r16,12(sp)
1000352c:	4009883a 	mov	r4,r8
10003530:	180b883a 	mov	r5,r3
10003534:	400d883a 	mov	r6,r8
10003538:	180f883a 	mov	r7,r3
1000353c:	000a7100 	call	1000a710 <__adddf3>
10003540:	8809883a 	mov	r4,r17
10003544:	a00b883a 	mov	r5,r20
10003548:	100d883a 	mov	r6,r2
1000354c:	180f883a 	mov	r7,r3
10003550:	1027883a 	mov	r19,r2
10003554:	1825883a 	mov	r18,r3
10003558:	000ba900 	call	1000ba90 <__ledf2>
1000355c:	10000816 	blt	r2,zero,10003580 <_dtoa_r+0x96c>
10003560:	8809883a 	mov	r4,r17
10003564:	a00b883a 	mov	r5,r20
10003568:	980d883a 	mov	r6,r19
1000356c:	900f883a 	mov	r7,r18
10003570:	000b92c0 	call	1000b92c <__eqdf2>
10003574:	103f551e 	bne	r2,zero,100032cc <__alt_data_end+0xf80032cc>
10003578:	b580004c 	andi	r22,r22,1
1000357c:	b03f5326 	beq	r22,zero,100032cc <__alt_data_end+0xf80032cc>
10003580:	bd7fffc3 	ldbu	r21,-1(r23)
10003584:	b8bfffc4 	addi	r2,r23,-1
10003588:	1007883a 	mov	r3,r2
1000358c:	01400e44 	movi	r5,57
10003590:	d9800717 	ldw	r6,28(sp)
10003594:	00000506 	br	100035ac <_dtoa_r+0x998>
10003598:	18ffffc4 	addi	r3,r3,-1
1000359c:	30825e26 	beq	r6,r2,10003f18 <_dtoa_r+0x1304>
100035a0:	1d400003 	ldbu	r21,0(r3)
100035a4:	102f883a 	mov	r23,r2
100035a8:	10bfffc4 	addi	r2,r2,-1
100035ac:	a9003fcc 	andi	r4,r21,255
100035b0:	2100201c 	xori	r4,r4,128
100035b4:	213fe004 	addi	r4,r4,-128
100035b8:	217ff726 	beq	r4,r5,10003598 <__alt_data_end+0xf8003598>
100035bc:	aa000044 	addi	r8,r21,1
100035c0:	12000005 	stb	r8,0(r2)
100035c4:	003f4106 	br	100032cc <__alt_data_end+0xf80032cc>
100035c8:	d8c00b17 	ldw	r3,44(sp)
100035cc:	18006726 	beq	r3,zero,1000376c <_dtoa_r+0xb58>
100035d0:	d9000317 	ldw	r4,12(sp)
100035d4:	00c00044 	movi	r3,1
100035d8:	19016a0e 	bge	r3,r4,10003b84 <_dtoa_r+0xf70>
100035dc:	d8800617 	ldw	r2,24(sp)
100035e0:	d8c00917 	ldw	r3,36(sp)
100035e4:	157fffc4 	addi	r21,r2,-1
100035e8:	1d420716 	blt	r3,r21,10003e08 <_dtoa_r+0x11f4>
100035ec:	1d6bc83a 	sub	r21,r3,r21
100035f0:	d8800617 	ldw	r2,24(sp)
100035f4:	1002c716 	blt	r2,zero,10004114 <_dtoa_r+0x1500>
100035f8:	dd000817 	ldw	r20,32(sp)
100035fc:	d8800617 	ldw	r2,24(sp)
10003600:	d9800817 	ldw	r6,32(sp)
10003604:	8009883a 	mov	r4,r16
10003608:	01400044 	movi	r5,1
1000360c:	308d883a 	add	r6,r6,r2
10003610:	d9800815 	stw	r6,32(sp)
10003614:	b0ad883a 	add	r22,r22,r2
10003618:	00066780 	call	10006678 <__i2b>
1000361c:	1023883a 	mov	r17,r2
10003620:	a0000826 	beq	r20,zero,10003644 <_dtoa_r+0xa30>
10003624:	0580070e 	bge	zero,r22,10003644 <_dtoa_r+0xa30>
10003628:	b005883a 	mov	r2,r22
1000362c:	a5812016 	blt	r20,r22,10003ab0 <_dtoa_r+0xe9c>
10003630:	d8c00817 	ldw	r3,32(sp)
10003634:	a0a9c83a 	sub	r20,r20,r2
10003638:	b0adc83a 	sub	r22,r22,r2
1000363c:	1887c83a 	sub	r3,r3,r2
10003640:	d8c00815 	stw	r3,32(sp)
10003644:	d9000917 	ldw	r4,36(sp)
10003648:	0100140e 	bge	zero,r4,1000369c <_dtoa_r+0xa88>
1000364c:	d9800b17 	ldw	r6,44(sp)
10003650:	3001e526 	beq	r6,zero,10003de8 <_dtoa_r+0x11d4>
10003654:	05400e0e 	bge	zero,r21,10003690 <_dtoa_r+0xa7c>
10003658:	880b883a 	mov	r5,r17
1000365c:	8009883a 	mov	r4,r16
10003660:	a80d883a 	mov	r6,r21
10003664:	00069440 	call	10006944 <__pow5mult>
10003668:	e00d883a 	mov	r6,fp
1000366c:	8009883a 	mov	r4,r16
10003670:	100b883a 	mov	r5,r2
10003674:	1023883a 	mov	r17,r2
10003678:	00066b40 	call	100066b4 <__multiply>
1000367c:	102f883a 	mov	r23,r2
10003680:	e00b883a 	mov	r5,fp
10003684:	8009883a 	mov	r4,r16
10003688:	00062f80 	call	100062f8 <_Bfree>
1000368c:	b839883a 	mov	fp,r23
10003690:	d8800917 	ldw	r2,36(sp)
10003694:	154dc83a 	sub	r6,r2,r21
10003698:	3001281e 	bne	r6,zero,10003b3c <_dtoa_r+0xf28>
1000369c:	05c00044 	movi	r23,1
100036a0:	8009883a 	mov	r4,r16
100036a4:	b80b883a 	mov	r5,r23
100036a8:	00066780 	call	10006678 <__i2b>
100036ac:	d8c00a17 	ldw	r3,40(sp)
100036b0:	102b883a 	mov	r21,r2
100036b4:	00c0310e 	bge	zero,r3,1000377c <_dtoa_r+0xb68>
100036b8:	8009883a 	mov	r4,r16
100036bc:	100b883a 	mov	r5,r2
100036c0:	180d883a 	mov	r6,r3
100036c4:	00069440 	call	10006944 <__pow5mult>
100036c8:	d9000317 	ldw	r4,12(sp)
100036cc:	102b883a 	mov	r21,r2
100036d0:	b9011f0e 	bge	r23,r4,10003b50 <_dtoa_r+0xf3c>
100036d4:	0027883a 	mov	r19,zero
100036d8:	a8800417 	ldw	r2,16(r21)
100036dc:	10800104 	addi	r2,r2,4
100036e0:	1085883a 	add	r2,r2,r2
100036e4:	1085883a 	add	r2,r2,r2
100036e8:	a885883a 	add	r2,r21,r2
100036ec:	11000017 	ldw	r4,0(r2)
100036f0:	00065600 	call	10006560 <__hi0bits>
100036f4:	00c00804 	movi	r3,32
100036f8:	1885c83a 	sub	r2,r3,r2
100036fc:	00002506 	br	10003794 <_dtoa_r+0xb80>
10003700:	01800044 	movi	r6,1
10003704:	d9800c15 	stw	r6,48(sp)
10003708:	003dec06 	br	10002ebc <__alt_data_end+0xf8002ebc>
1000370c:	d8c00817 	ldw	r3,32(sp)
10003710:	d9000517 	ldw	r4,20(sp)
10003714:	d8000a15 	stw	zero,40(sp)
10003718:	1907c83a 	sub	r3,r3,r4
1000371c:	010dc83a 	sub	r6,zero,r4
10003720:	d8c00815 	stw	r3,32(sp)
10003724:	d9800915 	stw	r6,36(sp)
10003728:	003ded06 	br	10002ee0 <__alt_data_end+0xf8002ee0>
1000372c:	05adc83a 	sub	r22,zero,r22
10003730:	dd800815 	stw	r22,32(sp)
10003734:	002d883a 	mov	r22,zero
10003738:	003de406 	br	10002ecc <__alt_data_end+0xf8002ecc>
1000373c:	d9000517 	ldw	r4,20(sp)
10003740:	000cd340 	call	1000cd34 <__floatsidf>
10003744:	1009883a 	mov	r4,r2
10003748:	180b883a 	mov	r5,r3
1000374c:	b00d883a 	mov	r6,r22
10003750:	a80f883a 	mov	r7,r21
10003754:	000b92c0 	call	1000b92c <__eqdf2>
10003758:	103dc726 	beq	r2,zero,10002e78 <__alt_data_end+0xf8002e78>
1000375c:	d8800517 	ldw	r2,20(sp)
10003760:	10bfffc4 	addi	r2,r2,-1
10003764:	d8800515 	stw	r2,20(sp)
10003768:	003dc306 	br	10002e78 <__alt_data_end+0xf8002e78>
1000376c:	dd400917 	ldw	r21,36(sp)
10003770:	dd000817 	ldw	r20,32(sp)
10003774:	0023883a 	mov	r17,zero
10003778:	003fa906 	br	10003620 <__alt_data_end+0xf8003620>
1000377c:	d9800317 	ldw	r6,12(sp)
10003780:	b981670e 	bge	r23,r6,10003d20 <_dtoa_r+0x110c>
10003784:	0027883a 	mov	r19,zero
10003788:	d8c00a17 	ldw	r3,40(sp)
1000378c:	183fd21e 	bne	r3,zero,100036d8 <__alt_data_end+0xf80036d8>
10003790:	00800044 	movi	r2,1
10003794:	1585883a 	add	r2,r2,r22
10003798:	108007cc 	andi	r2,r2,31
1000379c:	10005f26 	beq	r2,zero,1000391c <_dtoa_r+0xd08>
100037a0:	00c00804 	movi	r3,32
100037a4:	1887c83a 	sub	r3,r3,r2
100037a8:	01000104 	movi	r4,4
100037ac:	20c2dd0e 	bge	r4,r3,10004324 <_dtoa_r+0x1710>
100037b0:	d9000817 	ldw	r4,32(sp)
100037b4:	00c00704 	movi	r3,28
100037b8:	1885c83a 	sub	r2,r3,r2
100037bc:	2089883a 	add	r4,r4,r2
100037c0:	d9000815 	stw	r4,32(sp)
100037c4:	a0a9883a 	add	r20,r20,r2
100037c8:	b0ad883a 	add	r22,r22,r2
100037cc:	d8800817 	ldw	r2,32(sp)
100037d0:	0080050e 	bge	zero,r2,100037e8 <_dtoa_r+0xbd4>
100037d4:	e00b883a 	mov	r5,fp
100037d8:	8009883a 	mov	r4,r16
100037dc:	100d883a 	mov	r6,r2
100037e0:	0006a840 	call	10006a84 <__lshift>
100037e4:	1039883a 	mov	fp,r2
100037e8:	0580050e 	bge	zero,r22,10003800 <_dtoa_r+0xbec>
100037ec:	a80b883a 	mov	r5,r21
100037f0:	8009883a 	mov	r4,r16
100037f4:	b00d883a 	mov	r6,r22
100037f8:	0006a840 	call	10006a84 <__lshift>
100037fc:	102b883a 	mov	r21,r2
10003800:	d8c00c17 	ldw	r3,48(sp)
10003804:	1801161e 	bne	r3,zero,10003c60 <_dtoa_r+0x104c>
10003808:	d8c00617 	ldw	r3,24(sp)
1000380c:	00c12d0e 	bge	zero,r3,10003cc4 <_dtoa_r+0x10b0>
10003810:	d8c00b17 	ldw	r3,44(sp)
10003814:	1800571e 	bne	r3,zero,10003974 <_dtoa_r+0xd60>
10003818:	dc800717 	ldw	r18,28(sp)
1000381c:	dcc00617 	ldw	r19,24(sp)
10003820:	9029883a 	mov	r20,r18
10003824:	00000206 	br	10003830 <_dtoa_r+0xc1c>
10003828:	00063200 	call	10006320 <__multadd>
1000382c:	1039883a 	mov	fp,r2
10003830:	e009883a 	mov	r4,fp
10003834:	a80b883a 	mov	r5,r21
10003838:	00029ec0 	call	100029ec <quorem>
1000383c:	10800c04 	addi	r2,r2,48
10003840:	90800005 	stb	r2,0(r18)
10003844:	94800044 	addi	r18,r18,1
10003848:	9507c83a 	sub	r3,r18,r20
1000384c:	8009883a 	mov	r4,r16
10003850:	e00b883a 	mov	r5,fp
10003854:	01800284 	movi	r6,10
10003858:	000f883a 	mov	r7,zero
1000385c:	1cfff216 	blt	r3,r19,10003828 <__alt_data_end+0xf8003828>
10003860:	1011883a 	mov	r8,r2
10003864:	d8800617 	ldw	r2,24(sp)
10003868:	00822e0e 	bge	zero,r2,10004124 <_dtoa_r+0x1510>
1000386c:	d9000717 	ldw	r4,28(sp)
10003870:	0025883a 	mov	r18,zero
10003874:	20af883a 	add	r23,r4,r2
10003878:	e00b883a 	mov	r5,fp
1000387c:	01800044 	movi	r6,1
10003880:	8009883a 	mov	r4,r16
10003884:	da001715 	stw	r8,92(sp)
10003888:	0006a840 	call	10006a84 <__lshift>
1000388c:	1009883a 	mov	r4,r2
10003890:	a80b883a 	mov	r5,r21
10003894:	1039883a 	mov	fp,r2
10003898:	0006bcc0 	call	10006bcc <__mcmp>
1000389c:	da001717 	ldw	r8,92(sp)
100038a0:	00816e0e 	bge	zero,r2,10003e5c <_dtoa_r+0x1248>
100038a4:	b93fffc3 	ldbu	r4,-1(r23)
100038a8:	b8bfffc4 	addi	r2,r23,-1
100038ac:	1007883a 	mov	r3,r2
100038b0:	01800e44 	movi	r6,57
100038b4:	d9c00717 	ldw	r7,28(sp)
100038b8:	00000506 	br	100038d0 <_dtoa_r+0xcbc>
100038bc:	18ffffc4 	addi	r3,r3,-1
100038c0:	38811926 	beq	r7,r2,10003d28 <_dtoa_r+0x1114>
100038c4:	19000003 	ldbu	r4,0(r3)
100038c8:	102f883a 	mov	r23,r2
100038cc:	10bfffc4 	addi	r2,r2,-1
100038d0:	21403fcc 	andi	r5,r4,255
100038d4:	2940201c 	xori	r5,r5,128
100038d8:	297fe004 	addi	r5,r5,-128
100038dc:	29bff726 	beq	r5,r6,100038bc <__alt_data_end+0xf80038bc>
100038e0:	21000044 	addi	r4,r4,1
100038e4:	11000005 	stb	r4,0(r2)
100038e8:	8009883a 	mov	r4,r16
100038ec:	a80b883a 	mov	r5,r21
100038f0:	00062f80 	call	100062f8 <_Bfree>
100038f4:	883e7526 	beq	r17,zero,100032cc <__alt_data_end+0xf80032cc>
100038f8:	90000426 	beq	r18,zero,1000390c <_dtoa_r+0xcf8>
100038fc:	94400326 	beq	r18,r17,1000390c <_dtoa_r+0xcf8>
10003900:	8009883a 	mov	r4,r16
10003904:	900b883a 	mov	r5,r18
10003908:	00062f80 	call	100062f8 <_Bfree>
1000390c:	8009883a 	mov	r4,r16
10003910:	880b883a 	mov	r5,r17
10003914:	00062f80 	call	100062f8 <_Bfree>
10003918:	003e6c06 	br	100032cc <__alt_data_end+0xf80032cc>
1000391c:	00800704 	movi	r2,28
10003920:	d9800817 	ldw	r6,32(sp)
10003924:	a0a9883a 	add	r20,r20,r2
10003928:	b0ad883a 	add	r22,r22,r2
1000392c:	308d883a 	add	r6,r6,r2
10003930:	d9800815 	stw	r6,32(sp)
10003934:	003fa506 	br	100037cc <__alt_data_end+0xf80037cc>
10003938:	013efb84 	movi	r4,-1042
1000393c:	246bc83a 	sub	r21,r4,r17
10003940:	9548983a 	sll	r4,r18,r21
10003944:	003d1806 	br	10002da8 <__alt_data_end+0xf8002da8>
10003948:	d8000c15 	stw	zero,48(sp)
1000394c:	003d5b06 	br	10002ebc <__alt_data_end+0xf8002ebc>
10003950:	880b883a 	mov	r5,r17
10003954:	8009883a 	mov	r4,r16
10003958:	01800284 	movi	r6,10
1000395c:	000f883a 	mov	r7,zero
10003960:	00063200 	call	10006320 <__multadd>
10003964:	1023883a 	mov	r17,r2
10003968:	d8800d17 	ldw	r2,52(sp)
1000396c:	0082550e 	bge	zero,r2,100042c4 <_dtoa_r+0x16b0>
10003970:	d8800615 	stw	r2,24(sp)
10003974:	0500050e 	bge	zero,r20,1000398c <_dtoa_r+0xd78>
10003978:	880b883a 	mov	r5,r17
1000397c:	8009883a 	mov	r4,r16
10003980:	a00d883a 	mov	r6,r20
10003984:	0006a840 	call	10006a84 <__lshift>
10003988:	1023883a 	mov	r17,r2
1000398c:	98016a1e 	bne	r19,zero,10003f38 <_dtoa_r+0x1324>
10003990:	8829883a 	mov	r20,r17
10003994:	d9000617 	ldw	r4,24(sp)
10003998:	dcc00717 	ldw	r19,28(sp)
1000399c:	9480004c 	andi	r18,r18,1
100039a0:	20bfffc4 	addi	r2,r4,-1
100039a4:	9885883a 	add	r2,r19,r2
100039a8:	d8800415 	stw	r2,16(sp)
100039ac:	dc800615 	stw	r18,24(sp)
100039b0:	e009883a 	mov	r4,fp
100039b4:	a80b883a 	mov	r5,r21
100039b8:	00029ec0 	call	100029ec <quorem>
100039bc:	e009883a 	mov	r4,fp
100039c0:	880b883a 	mov	r5,r17
100039c4:	102f883a 	mov	r23,r2
100039c8:	0006bcc0 	call	10006bcc <__mcmp>
100039cc:	8009883a 	mov	r4,r16
100039d0:	a80b883a 	mov	r5,r21
100039d4:	a00d883a 	mov	r6,r20
100039d8:	102d883a 	mov	r22,r2
100039dc:	0006c2c0 	call	10006c2c <__mdiff>
100039e0:	1007883a 	mov	r3,r2
100039e4:	10800317 	ldw	r2,12(r2)
100039e8:	bc800c04 	addi	r18,r23,48
100039ec:	1000971e 	bne	r2,zero,10003c4c <_dtoa_r+0x1038>
100039f0:	180b883a 	mov	r5,r3
100039f4:	e009883a 	mov	r4,fp
100039f8:	d8c01515 	stw	r3,84(sp)
100039fc:	0006bcc0 	call	10006bcc <__mcmp>
10003a00:	d8c01517 	ldw	r3,84(sp)
10003a04:	8009883a 	mov	r4,r16
10003a08:	d8801515 	stw	r2,84(sp)
10003a0c:	180b883a 	mov	r5,r3
10003a10:	00062f80 	call	100062f8 <_Bfree>
10003a14:	d8801517 	ldw	r2,84(sp)
10003a18:	1000041e 	bne	r2,zero,10003a2c <_dtoa_r+0xe18>
10003a1c:	d9800317 	ldw	r6,12(sp)
10003a20:	3000021e 	bne	r6,zero,10003a2c <_dtoa_r+0xe18>
10003a24:	d8c00617 	ldw	r3,24(sp)
10003a28:	18007626 	beq	r3,zero,10003c04 <_dtoa_r+0xff0>
10003a2c:	b0005b16 	blt	r22,zero,10003b9c <_dtoa_r+0xf88>
10003a30:	b000041e 	bne	r22,zero,10003a44 <_dtoa_r+0xe30>
10003a34:	d9000317 	ldw	r4,12(sp)
10003a38:	2000021e 	bne	r4,zero,10003a44 <_dtoa_r+0xe30>
10003a3c:	d8c00617 	ldw	r3,24(sp)
10003a40:	18005626 	beq	r3,zero,10003b9c <_dtoa_r+0xf88>
10003a44:	00814d16 	blt	zero,r2,10003f7c <_dtoa_r+0x1368>
10003a48:	d8c00417 	ldw	r3,16(sp)
10003a4c:	9d800044 	addi	r22,r19,1
10003a50:	9c800005 	stb	r18,0(r19)
10003a54:	b02f883a 	mov	r23,r22
10003a58:	98c14c26 	beq	r19,r3,10003f8c <_dtoa_r+0x1378>
10003a5c:	e00b883a 	mov	r5,fp
10003a60:	8009883a 	mov	r4,r16
10003a64:	01800284 	movi	r6,10
10003a68:	000f883a 	mov	r7,zero
10003a6c:	00063200 	call	10006320 <__multadd>
10003a70:	1039883a 	mov	fp,r2
10003a74:	8d006d26 	beq	r17,r20,10003c2c <_dtoa_r+0x1018>
10003a78:	880b883a 	mov	r5,r17
10003a7c:	01800284 	movi	r6,10
10003a80:	000f883a 	mov	r7,zero
10003a84:	8009883a 	mov	r4,r16
10003a88:	00063200 	call	10006320 <__multadd>
10003a8c:	a00b883a 	mov	r5,r20
10003a90:	8009883a 	mov	r4,r16
10003a94:	01800284 	movi	r6,10
10003a98:	000f883a 	mov	r7,zero
10003a9c:	1023883a 	mov	r17,r2
10003aa0:	00063200 	call	10006320 <__multadd>
10003aa4:	1029883a 	mov	r20,r2
10003aa8:	b027883a 	mov	r19,r22
10003aac:	003fc006 	br	100039b0 <__alt_data_end+0xf80039b0>
10003ab0:	a005883a 	mov	r2,r20
10003ab4:	003ede06 	br	10003630 <__alt_data_end+0xf8003630>
10003ab8:	01000044 	movi	r4,1
10003abc:	d9000b15 	stw	r4,44(sp)
10003ac0:	d9802217 	ldw	r6,136(sp)
10003ac4:	0180dc0e 	bge	zero,r6,10003e38 <_dtoa_r+0x1224>
10003ac8:	3023883a 	mov	r17,r6
10003acc:	d9800d15 	stw	r6,52(sp)
10003ad0:	d9800615 	stw	r6,24(sp)
10003ad4:	003d1e06 	br	10002f50 <__alt_data_end+0xf8002f50>
10003ad8:	d8800617 	ldw	r2,24(sp)
10003adc:	00be3716 	blt	zero,r2,100033bc <__alt_data_end+0xf80033bc>
10003ae0:	1000be1e 	bne	r2,zero,10003ddc <_dtoa_r+0x11c8>
10003ae4:	8809883a 	mov	r4,r17
10003ae8:	a00b883a 	mov	r5,r20
10003aec:	000d883a 	mov	r6,zero
10003af0:	01d00534 	movhi	r7,16404
10003af4:	000bb700 	call	1000bb70 <__muldf3>
10003af8:	1009883a 	mov	r4,r2
10003afc:	180b883a 	mov	r5,r3
10003b00:	900d883a 	mov	r6,r18
10003b04:	980f883a 	mov	r7,r19
10003b08:	000b9b00 	call	1000b9b0 <__gedf2>
10003b0c:	002b883a 	mov	r21,zero
10003b10:	0023883a 	mov	r17,zero
10003b14:	10007a16 	blt	r2,zero,10003d00 <_dtoa_r+0x10ec>
10003b18:	d9002217 	ldw	r4,136(sp)
10003b1c:	ddc00717 	ldw	r23,28(sp)
10003b20:	0108303a 	nor	r4,zero,r4
10003b24:	d9000515 	stw	r4,20(sp)
10003b28:	8009883a 	mov	r4,r16
10003b2c:	a80b883a 	mov	r5,r21
10003b30:	00062f80 	call	100062f8 <_Bfree>
10003b34:	883f751e 	bne	r17,zero,1000390c <__alt_data_end+0xf800390c>
10003b38:	003de406 	br	100032cc <__alt_data_end+0xf80032cc>
10003b3c:	e00b883a 	mov	r5,fp
10003b40:	8009883a 	mov	r4,r16
10003b44:	00069440 	call	10006944 <__pow5mult>
10003b48:	1039883a 	mov	fp,r2
10003b4c:	003ed306 	br	1000369c <__alt_data_end+0xf800369c>
10003b50:	903ee01e 	bne	r18,zero,100036d4 <__alt_data_end+0xf80036d4>
10003b54:	00800434 	movhi	r2,16
10003b58:	10bfffc4 	addi	r2,r2,-1
10003b5c:	9884703a 	and	r2,r19,r2
10003b60:	103f081e 	bne	r2,zero,10003784 <__alt_data_end+0xf8003784>
10003b64:	9cdffc2c 	andhi	r19,r19,32752
10003b68:	983f0626 	beq	r19,zero,10003784 <__alt_data_end+0xf8003784>
10003b6c:	d8800817 	ldw	r2,32(sp)
10003b70:	b5800044 	addi	r22,r22,1
10003b74:	04c00044 	movi	r19,1
10003b78:	10800044 	addi	r2,r2,1
10003b7c:	d8800815 	stw	r2,32(sp)
10003b80:	003f0106 	br	10003788 <__alt_data_end+0xf8003788>
10003b84:	d9800f17 	ldw	r6,60(sp)
10003b88:	30016826 	beq	r6,zero,1000412c <_dtoa_r+0x1518>
10003b8c:	10810cc4 	addi	r2,r2,1075
10003b90:	dd400917 	ldw	r21,36(sp)
10003b94:	dd000817 	ldw	r20,32(sp)
10003b98:	003e9906 	br	10003600 <__alt_data_end+0xf8003600>
10003b9c:	9011883a 	mov	r8,r18
10003ba0:	4007883a 	mov	r3,r8
10003ba4:	e02d883a 	mov	r22,fp
10003ba8:	0080100e 	bge	zero,r2,10003bec <_dtoa_r+0xfd8>
10003bac:	01800044 	movi	r6,1
10003bb0:	8009883a 	mov	r4,r16
10003bb4:	e00b883a 	mov	r5,fp
10003bb8:	da001515 	stw	r8,84(sp)
10003bbc:	da001715 	stw	r8,92(sp)
10003bc0:	0006a840 	call	10006a84 <__lshift>
10003bc4:	1009883a 	mov	r4,r2
10003bc8:	a80b883a 	mov	r5,r21
10003bcc:	102d883a 	mov	r22,r2
10003bd0:	0006bcc0 	call	10006bcc <__mcmp>
10003bd4:	d8c01517 	ldw	r3,84(sp)
10003bd8:	da001717 	ldw	r8,92(sp)
10003bdc:	0081a50e 	bge	zero,r2,10004274 <_dtoa_r+0x1660>
10003be0:	00800e44 	movi	r2,57
10003be4:	40817b26 	beq	r8,r2,100041d4 <_dtoa_r+0x15c0>
10003be8:	40c00044 	addi	r3,r8,1
10003bec:	8825883a 	mov	r18,r17
10003bf0:	9dc00044 	addi	r23,r19,1
10003bf4:	98c00005 	stb	r3,0(r19)
10003bf8:	a023883a 	mov	r17,r20
10003bfc:	b039883a 	mov	fp,r22
10003c00:	003f3906 	br	100038e8 <__alt_data_end+0xf80038e8>
10003c04:	00800e44 	movi	r2,57
10003c08:	9011883a 	mov	r8,r18
10003c0c:	90817226 	beq	r18,r2,100041d8 <_dtoa_r+0x15c4>
10003c10:	0580010e 	bge	zero,r22,10003c18 <_dtoa_r+0x1004>
10003c14:	ba000c44 	addi	r8,r23,49
10003c18:	8825883a 	mov	r18,r17
10003c1c:	9dc00044 	addi	r23,r19,1
10003c20:	9a000005 	stb	r8,0(r19)
10003c24:	a023883a 	mov	r17,r20
10003c28:	003f2f06 	br	100038e8 <__alt_data_end+0xf80038e8>
10003c2c:	880b883a 	mov	r5,r17
10003c30:	8009883a 	mov	r4,r16
10003c34:	01800284 	movi	r6,10
10003c38:	000f883a 	mov	r7,zero
10003c3c:	00063200 	call	10006320 <__multadd>
10003c40:	1023883a 	mov	r17,r2
10003c44:	1029883a 	mov	r20,r2
10003c48:	003f9706 	br	10003aa8 <__alt_data_end+0xf8003aa8>
10003c4c:	8009883a 	mov	r4,r16
10003c50:	180b883a 	mov	r5,r3
10003c54:	00062f80 	call	100062f8 <_Bfree>
10003c58:	00800044 	movi	r2,1
10003c5c:	003f7306 	br	10003a2c <__alt_data_end+0xf8003a2c>
10003c60:	e009883a 	mov	r4,fp
10003c64:	a80b883a 	mov	r5,r21
10003c68:	0006bcc0 	call	10006bcc <__mcmp>
10003c6c:	103ee60e 	bge	r2,zero,10003808 <__alt_data_end+0xf8003808>
10003c70:	8009883a 	mov	r4,r16
10003c74:	e00b883a 	mov	r5,fp
10003c78:	01800284 	movi	r6,10
10003c7c:	000f883a 	mov	r7,zero
10003c80:	00063200 	call	10006320 <__multadd>
10003c84:	d9000517 	ldw	r4,20(sp)
10003c88:	d9800b17 	ldw	r6,44(sp)
10003c8c:	1039883a 	mov	fp,r2
10003c90:	213fffc4 	addi	r4,r4,-1
10003c94:	d9000515 	stw	r4,20(sp)
10003c98:	303f2d1e 	bne	r6,zero,10003950 <__alt_data_end+0xf8003950>
10003c9c:	d9000d17 	ldw	r4,52(sp)
10003ca0:	0101780e 	bge	zero,r4,10004284 <_dtoa_r+0x1670>
10003ca4:	d9000615 	stw	r4,24(sp)
10003ca8:	003edb06 	br	10003818 <__alt_data_end+0xf8003818>
10003cac:	00800084 	movi	r2,2
10003cb0:	30818e1e 	bne	r6,r2,100042ec <_dtoa_r+0x16d8>
10003cb4:	d8000b15 	stw	zero,44(sp)
10003cb8:	003f8106 	br	10003ac0 <__alt_data_end+0xf8003ac0>
10003cbc:	d8800717 	ldw	r2,28(sp)
10003cc0:	003c0306 	br	10002cd0 <__alt_data_end+0xf8002cd0>
10003cc4:	d9000317 	ldw	r4,12(sp)
10003cc8:	00800084 	movi	r2,2
10003ccc:	113ed00e 	bge	r2,r4,10003810 <__alt_data_end+0xf8003810>
10003cd0:	d8c00617 	ldw	r3,24(sp)
10003cd4:	183f901e 	bne	r3,zero,10003b18 <__alt_data_end+0xf8003b18>
10003cd8:	a80b883a 	mov	r5,r21
10003cdc:	8009883a 	mov	r4,r16
10003ce0:	01800144 	movi	r6,5
10003ce4:	000f883a 	mov	r7,zero
10003ce8:	00063200 	call	10006320 <__multadd>
10003cec:	e009883a 	mov	r4,fp
10003cf0:	100b883a 	mov	r5,r2
10003cf4:	102b883a 	mov	r21,r2
10003cf8:	0006bcc0 	call	10006bcc <__mcmp>
10003cfc:	00bf860e 	bge	zero,r2,10003b18 <__alt_data_end+0xf8003b18>
10003d00:	d9800717 	ldw	r6,28(sp)
10003d04:	00800c44 	movi	r2,49
10003d08:	30800005 	stb	r2,0(r6)
10003d0c:	d8800517 	ldw	r2,20(sp)
10003d10:	35c00044 	addi	r23,r6,1
10003d14:	10800044 	addi	r2,r2,1
10003d18:	d8800515 	stw	r2,20(sp)
10003d1c:	003f8206 	br	10003b28 <__alt_data_end+0xf8003b28>
10003d20:	903e981e 	bne	r18,zero,10003784 <__alt_data_end+0xf8003784>
10003d24:	003f8b06 	br	10003b54 <__alt_data_end+0xf8003b54>
10003d28:	d9800517 	ldw	r6,20(sp)
10003d2c:	d8c00717 	ldw	r3,28(sp)
10003d30:	00800c44 	movi	r2,49
10003d34:	31800044 	addi	r6,r6,1
10003d38:	d9800515 	stw	r6,20(sp)
10003d3c:	18800005 	stb	r2,0(r3)
10003d40:	003ee906 	br	100038e8 <__alt_data_end+0xf80038e8>
10003d44:	dc000317 	ldw	r16,12(sp)
10003d48:	003d6006 	br	100032cc <__alt_data_end+0xf80032cc>
10003d4c:	8809883a 	mov	r4,r17
10003d50:	000cd340 	call	1000cd34 <__floatsidf>
10003d54:	a009883a 	mov	r4,r20
10003d58:	a80b883a 	mov	r5,r21
10003d5c:	100d883a 	mov	r6,r2
10003d60:	180f883a 	mov	r7,r3
10003d64:	000bb700 	call	1000bb70 <__muldf3>
10003d68:	1009883a 	mov	r4,r2
10003d6c:	180b883a 	mov	r5,r3
10003d70:	000d883a 	mov	r6,zero
10003d74:	01d00734 	movhi	r7,16412
10003d78:	000a7100 	call	1000a710 <__adddf3>
10003d7c:	1023883a 	mov	r17,r2
10003d80:	00bf3034 	movhi	r2,64704
10003d84:	1885883a 	add	r2,r3,r2
10003d88:	d8800e15 	stw	r2,56(sp)
10003d8c:	a009883a 	mov	r4,r20
10003d90:	a80b883a 	mov	r5,r21
10003d94:	000d883a 	mov	r6,zero
10003d98:	01d00534 	movhi	r7,16404
10003d9c:	000c3dc0 	call	1000c3dc <__subdf3>
10003da0:	d9c00e17 	ldw	r7,56(sp)
10003da4:	1009883a 	mov	r4,r2
10003da8:	180b883a 	mov	r5,r3
10003dac:	880d883a 	mov	r6,r17
10003db0:	102b883a 	mov	r21,r2
10003db4:	1829883a 	mov	r20,r3
10003db8:	000b9b00 	call	1000b9b0 <__gedf2>
10003dbc:	00807716 	blt	zero,r2,10003f9c <_dtoa_r+0x1388>
10003dc0:	d8800e17 	ldw	r2,56(sp)
10003dc4:	a809883a 	mov	r4,r21
10003dc8:	a00b883a 	mov	r5,r20
10003dcc:	11e0003c 	xorhi	r7,r2,32768
10003dd0:	880d883a 	mov	r6,r17
10003dd4:	000ba900 	call	1000ba90 <__ledf2>
10003dd8:	103d6b0e 	bge	r2,zero,10003388 <__alt_data_end+0xf8003388>
10003ddc:	002b883a 	mov	r21,zero
10003de0:	0023883a 	mov	r17,zero
10003de4:	003f4c06 	br	10003b18 <__alt_data_end+0xf8003b18>
10003de8:	d9800917 	ldw	r6,36(sp)
10003dec:	e00b883a 	mov	r5,fp
10003df0:	8009883a 	mov	r4,r16
10003df4:	00069440 	call	10006944 <__pow5mult>
10003df8:	1039883a 	mov	fp,r2
10003dfc:	003e2706 	br	1000369c <__alt_data_end+0xf800369c>
10003e00:	d8000b15 	stw	zero,44(sp)
10003e04:	003c4906 	br	10002f2c <__alt_data_end+0xf8002f2c>
10003e08:	d9000917 	ldw	r4,36(sp)
10003e0c:	d9800a17 	ldw	r6,40(sp)
10003e10:	dd400915 	stw	r21,36(sp)
10003e14:	a905c83a 	sub	r2,r21,r4
10003e18:	308d883a 	add	r6,r6,r2
10003e1c:	d9800a15 	stw	r6,40(sp)
10003e20:	002b883a 	mov	r21,zero
10003e24:	003df206 	br	100035f0 <__alt_data_end+0xf80035f0>
10003e28:	dc800e15 	stw	r18,56(sp)
10003e2c:	982b883a 	mov	r21,r19
10003e30:	04400084 	movi	r17,2
10003e34:	003c7406 	br	10003008 <__alt_data_end+0xf8003008>
10003e38:	04400044 	movi	r17,1
10003e3c:	dc400d15 	stw	r17,52(sp)
10003e40:	dc400615 	stw	r17,24(sp)
10003e44:	dc402215 	stw	r17,136(sp)
10003e48:	80001115 	stw	zero,68(r16)
10003e4c:	000b883a 	mov	r5,zero
10003e50:	003c4a06 	br	10002f7c <__alt_data_end+0xf8002f7c>
10003e54:	3023883a 	mov	r17,r6
10003e58:	003ffb06 	br	10003e48 <__alt_data_end+0xf8003e48>
10003e5c:	1000021e 	bne	r2,zero,10003e68 <_dtoa_r+0x1254>
10003e60:	4200004c 	andi	r8,r8,1
10003e64:	403e8f1e 	bne	r8,zero,100038a4 <__alt_data_end+0xf80038a4>
10003e68:	01000c04 	movi	r4,48
10003e6c:	00000106 	br	10003e74 <_dtoa_r+0x1260>
10003e70:	102f883a 	mov	r23,r2
10003e74:	b8bfffc4 	addi	r2,r23,-1
10003e78:	10c00007 	ldb	r3,0(r2)
10003e7c:	193ffc26 	beq	r3,r4,10003e70 <__alt_data_end+0xf8003e70>
10003e80:	003e9906 	br	100038e8 <__alt_data_end+0xf80038e8>
10003e84:	d9000517 	ldw	r4,20(sp)
10003e88:	012fc83a 	sub	r23,zero,r4
10003e8c:	b800ad26 	beq	r23,zero,10004144 <_dtoa_r+0x1530>
10003e90:	b88003cc 	andi	r2,r23,15
10003e94:	100490fa 	slli	r2,r2,3
10003e98:	00c40074 	movhi	r3,4097
10003e9c:	18fdf604 	addi	r3,r3,-2088
10003ea0:	1885883a 	add	r2,r3,r2
10003ea4:	11800017 	ldw	r6,0(r2)
10003ea8:	11c00117 	ldw	r7,4(r2)
10003eac:	b82fd13a 	srai	r23,r23,4
10003eb0:	9009883a 	mov	r4,r18
10003eb4:	980b883a 	mov	r5,r19
10003eb8:	000bb700 	call	1000bb70 <__muldf3>
10003ebc:	1029883a 	mov	r20,r2
10003ec0:	182b883a 	mov	r21,r3
10003ec4:	b800f426 	beq	r23,zero,10004298 <_dtoa_r+0x1684>
10003ec8:	02040074 	movhi	r8,4097
10003ecc:	423dec04 	addi	r8,r8,-2128
10003ed0:	8029883a 	mov	r20,r16
10003ed4:	04400084 	movi	r17,2
10003ed8:	4021883a 	mov	r16,r8
10003edc:	b980004c 	andi	r6,r23,1
10003ee0:	1009883a 	mov	r4,r2
10003ee4:	b82fd07a 	srai	r23,r23,1
10003ee8:	180b883a 	mov	r5,r3
10003eec:	30000426 	beq	r6,zero,10003f00 <_dtoa_r+0x12ec>
10003ef0:	81800017 	ldw	r6,0(r16)
10003ef4:	81c00117 	ldw	r7,4(r16)
10003ef8:	8c400044 	addi	r17,r17,1
10003efc:	000bb700 	call	1000bb70 <__muldf3>
10003f00:	84000204 	addi	r16,r16,8
10003f04:	b83ff51e 	bne	r23,zero,10003edc <__alt_data_end+0xf8003edc>
10003f08:	a021883a 	mov	r16,r20
10003f0c:	182b883a 	mov	r21,r3
10003f10:	1029883a 	mov	r20,r2
10003f14:	003c5506 	br	1000306c <__alt_data_end+0xf800306c>
10003f18:	d9800517 	ldw	r6,20(sp)
10003f1c:	d9000717 	ldw	r4,28(sp)
10003f20:	00c00c04 	movi	r3,48
10003f24:	31800044 	addi	r6,r6,1
10003f28:	d9800515 	stw	r6,20(sp)
10003f2c:	20c00005 	stb	r3,0(r4)
10003f30:	02000c44 	movi	r8,49
10003f34:	003da206 	br	100035c0 <__alt_data_end+0xf80035c0>
10003f38:	89400117 	ldw	r5,4(r17)
10003f3c:	8009883a 	mov	r4,r16
10003f40:	00062500 	call	10006250 <_Balloc>
10003f44:	89800417 	ldw	r6,16(r17)
10003f48:	11000304 	addi	r4,r2,12
10003f4c:	89400304 	addi	r5,r17,12
10003f50:	31800084 	addi	r6,r6,2
10003f54:	318d883a 	add	r6,r6,r6
10003f58:	318d883a 	add	r6,r6,r6
10003f5c:	1027883a 	mov	r19,r2
10003f60:	0005e980 	call	10005e98 <memcpy>
10003f64:	8009883a 	mov	r4,r16
10003f68:	980b883a 	mov	r5,r19
10003f6c:	01800044 	movi	r6,1
10003f70:	0006a840 	call	10006a84 <__lshift>
10003f74:	1029883a 	mov	r20,r2
10003f78:	003e8606 	br	10003994 <__alt_data_end+0xf8003994>
10003f7c:	00800e44 	movi	r2,57
10003f80:	90809526 	beq	r18,r2,100041d8 <_dtoa_r+0x15c4>
10003f84:	92000044 	addi	r8,r18,1
10003f88:	003f2306 	br	10003c18 <__alt_data_end+0xf8003c18>
10003f8c:	9011883a 	mov	r8,r18
10003f90:	8825883a 	mov	r18,r17
10003f94:	a023883a 	mov	r17,r20
10003f98:	003e3706 	br	10003878 <__alt_data_end+0xf8003878>
10003f9c:	002b883a 	mov	r21,zero
10003fa0:	0023883a 	mov	r17,zero
10003fa4:	003f5606 	br	10003d00 <__alt_data_end+0xf8003d00>
10003fa8:	51bfffc4 	addi	r6,r10,-1
10003fac:	300490fa 	slli	r2,r6,3
10003fb0:	00c40074 	movhi	r3,4097
10003fb4:	18fdf604 	addi	r3,r3,-2088
10003fb8:	1885883a 	add	r2,r3,r2
10003fbc:	d9c00e17 	ldw	r7,56(sp)
10003fc0:	11000017 	ldw	r4,0(r2)
10003fc4:	11400117 	ldw	r5,4(r2)
10003fc8:	d8800717 	ldw	r2,28(sp)
10003fcc:	d9801015 	stw	r6,64(sp)
10003fd0:	880d883a 	mov	r6,r17
10003fd4:	da801615 	stw	r10,88(sp)
10003fd8:	15c00044 	addi	r23,r2,1
10003fdc:	000bb700 	call	1000bb70 <__muldf3>
10003fe0:	a80b883a 	mov	r5,r21
10003fe4:	a009883a 	mov	r4,r20
10003fe8:	d8c01115 	stw	r3,68(sp)
10003fec:	d8800e15 	stw	r2,56(sp)
10003ff0:	000ccac0 	call	1000ccac <__fixdfsi>
10003ff4:	1009883a 	mov	r4,r2
10003ff8:	1023883a 	mov	r17,r2
10003ffc:	000cd340 	call	1000cd34 <__floatsidf>
10004000:	a009883a 	mov	r4,r20
10004004:	a80b883a 	mov	r5,r21
10004008:	100d883a 	mov	r6,r2
1000400c:	180f883a 	mov	r7,r3
10004010:	000c3dc0 	call	1000c3dc <__subdf3>
10004014:	1813883a 	mov	r9,r3
10004018:	d8c00717 	ldw	r3,28(sp)
1000401c:	8c400c04 	addi	r17,r17,48
10004020:	1011883a 	mov	r8,r2
10004024:	1c400005 	stb	r17,0(r3)
10004028:	da801617 	ldw	r10,88(sp)
1000402c:	00800044 	movi	r2,1
10004030:	50802326 	beq	r10,r2,100040c0 <_dtoa_r+0x14ac>
10004034:	d8800717 	ldw	r2,28(sp)
10004038:	b82b883a 	mov	r21,r23
1000403c:	dc001315 	stw	r16,76(sp)
10004040:	12a9883a 	add	r20,r2,r10
10004044:	4807883a 	mov	r3,r9
10004048:	4005883a 	mov	r2,r8
1000404c:	dc801415 	stw	r18,80(sp)
10004050:	000d883a 	mov	r6,zero
10004054:	01d00934 	movhi	r7,16420
10004058:	1009883a 	mov	r4,r2
1000405c:	180b883a 	mov	r5,r3
10004060:	000bb700 	call	1000bb70 <__muldf3>
10004064:	180b883a 	mov	r5,r3
10004068:	1009883a 	mov	r4,r2
1000406c:	1821883a 	mov	r16,r3
10004070:	1025883a 	mov	r18,r2
10004074:	000ccac0 	call	1000ccac <__fixdfsi>
10004078:	1009883a 	mov	r4,r2
1000407c:	1023883a 	mov	r17,r2
10004080:	000cd340 	call	1000cd34 <__floatsidf>
10004084:	9009883a 	mov	r4,r18
10004088:	800b883a 	mov	r5,r16
1000408c:	100d883a 	mov	r6,r2
10004090:	180f883a 	mov	r7,r3
10004094:	8c400c04 	addi	r17,r17,48
10004098:	000c3dc0 	call	1000c3dc <__subdf3>
1000409c:	ad400044 	addi	r21,r21,1
100040a0:	ac7fffc5 	stb	r17,-1(r21)
100040a4:	ad3fea1e 	bne	r21,r20,10004050 <__alt_data_end+0xf8004050>
100040a8:	1813883a 	mov	r9,r3
100040ac:	d8c01017 	ldw	r3,64(sp)
100040b0:	dc001317 	ldw	r16,76(sp)
100040b4:	dc801417 	ldw	r18,80(sp)
100040b8:	1011883a 	mov	r8,r2
100040bc:	b8ef883a 	add	r23,r23,r3
100040c0:	d9000e17 	ldw	r4,56(sp)
100040c4:	d9401117 	ldw	r5,68(sp)
100040c8:	000d883a 	mov	r6,zero
100040cc:	01cff834 	movhi	r7,16352
100040d0:	da001715 	stw	r8,92(sp)
100040d4:	da401515 	stw	r9,84(sp)
100040d8:	000a7100 	call	1000a710 <__adddf3>
100040dc:	da001717 	ldw	r8,92(sp)
100040e0:	da401517 	ldw	r9,84(sp)
100040e4:	1009883a 	mov	r4,r2
100040e8:	400d883a 	mov	r6,r8
100040ec:	480f883a 	mov	r7,r9
100040f0:	180b883a 	mov	r5,r3
100040f4:	000ba900 	call	1000ba90 <__ledf2>
100040f8:	da001717 	ldw	r8,92(sp)
100040fc:	da401517 	ldw	r9,84(sp)
10004100:	10003b0e 	bge	r2,zero,100041f0 <_dtoa_r+0x15dc>
10004104:	d9001217 	ldw	r4,72(sp)
10004108:	bd7fffc3 	ldbu	r21,-1(r23)
1000410c:	d9000515 	stw	r4,20(sp)
10004110:	003d1c06 	br	10003584 <__alt_data_end+0xf8003584>
10004114:	d8c00817 	ldw	r3,32(sp)
10004118:	18a9c83a 	sub	r20,r3,r2
1000411c:	0005883a 	mov	r2,zero
10004120:	003d3706 	br	10003600 <__alt_data_end+0xf8003600>
10004124:	00800044 	movi	r2,1
10004128:	003dd006 	br	1000386c <__alt_data_end+0xf800386c>
1000412c:	d8c00217 	ldw	r3,8(sp)
10004130:	00800d84 	movi	r2,54
10004134:	dd400917 	ldw	r21,36(sp)
10004138:	10c5c83a 	sub	r2,r2,r3
1000413c:	dd000817 	ldw	r20,32(sp)
10004140:	003d2f06 	br	10003600 <__alt_data_end+0xf8003600>
10004144:	9029883a 	mov	r20,r18
10004148:	982b883a 	mov	r21,r19
1000414c:	04400084 	movi	r17,2
10004150:	003bc606 	br	1000306c <__alt_data_end+0xf800306c>
10004154:	d8800617 	ldw	r2,24(sp)
10004158:	103efc26 	beq	r2,zero,10003d4c <__alt_data_end+0xf8003d4c>
1000415c:	d8c00d17 	ldw	r3,52(sp)
10004160:	00fc890e 	bge	zero,r3,10003388 <__alt_data_end+0xf8003388>
10004164:	a80b883a 	mov	r5,r21
10004168:	a009883a 	mov	r4,r20
1000416c:	000d883a 	mov	r6,zero
10004170:	01d00934 	movhi	r7,16420
10004174:	000bb700 	call	1000bb70 <__muldf3>
10004178:	89000044 	addi	r4,r17,1
1000417c:	1029883a 	mov	r20,r2
10004180:	182b883a 	mov	r21,r3
10004184:	000cd340 	call	1000cd34 <__floatsidf>
10004188:	a009883a 	mov	r4,r20
1000418c:	a80b883a 	mov	r5,r21
10004190:	100d883a 	mov	r6,r2
10004194:	180f883a 	mov	r7,r3
10004198:	000bb700 	call	1000bb70 <__muldf3>
1000419c:	1009883a 	mov	r4,r2
100041a0:	180b883a 	mov	r5,r3
100041a4:	000d883a 	mov	r6,zero
100041a8:	01d00734 	movhi	r7,16412
100041ac:	000a7100 	call	1000a710 <__adddf3>
100041b0:	d9000517 	ldw	r4,20(sp)
100041b4:	1023883a 	mov	r17,r2
100041b8:	00bf3034 	movhi	r2,64704
100041bc:	213fffc4 	addi	r4,r4,-1
100041c0:	1885883a 	add	r2,r3,r2
100041c4:	d9001215 	stw	r4,72(sp)
100041c8:	d8800e15 	stw	r2,56(sp)
100041cc:	da800d17 	ldw	r10,52(sp)
100041d0:	003bc306 	br	100030e0 <__alt_data_end+0xf80030e0>
100041d4:	b039883a 	mov	fp,r22
100041d8:	01000e44 	movi	r4,57
100041dc:	8825883a 	mov	r18,r17
100041e0:	9dc00044 	addi	r23,r19,1
100041e4:	99000005 	stb	r4,0(r19)
100041e8:	a023883a 	mov	r17,r20
100041ec:	003dae06 	br	100038a8 <__alt_data_end+0xf80038a8>
100041f0:	d9800e17 	ldw	r6,56(sp)
100041f4:	d9c01117 	ldw	r7,68(sp)
100041f8:	0009883a 	mov	r4,zero
100041fc:	014ff834 	movhi	r5,16352
10004200:	da001715 	stw	r8,92(sp)
10004204:	da401515 	stw	r9,84(sp)
10004208:	000c3dc0 	call	1000c3dc <__subdf3>
1000420c:	da001717 	ldw	r8,92(sp)
10004210:	da401517 	ldw	r9,84(sp)
10004214:	1009883a 	mov	r4,r2
10004218:	180b883a 	mov	r5,r3
1000421c:	400d883a 	mov	r6,r8
10004220:	480f883a 	mov	r7,r9
10004224:	000b9b00 	call	1000b9b0 <__gedf2>
10004228:	00bc570e 	bge	zero,r2,10003388 <__alt_data_end+0xf8003388>
1000422c:	01000c04 	movi	r4,48
10004230:	00000106 	br	10004238 <_dtoa_r+0x1624>
10004234:	102f883a 	mov	r23,r2
10004238:	b8bfffc4 	addi	r2,r23,-1
1000423c:	10c00007 	ldb	r3,0(r2)
10004240:	193ffc26 	beq	r3,r4,10004234 <__alt_data_end+0xf8004234>
10004244:	d9801217 	ldw	r6,72(sp)
10004248:	d9800515 	stw	r6,20(sp)
1000424c:	003c1f06 	br	100032cc <__alt_data_end+0xf80032cc>
10004250:	d8801217 	ldw	r2,72(sp)
10004254:	dc001117 	ldw	r16,68(sp)
10004258:	d8800515 	stw	r2,20(sp)
1000425c:	003cc906 	br	10003584 <__alt_data_end+0xf8003584>
10004260:	dd801317 	ldw	r22,76(sp)
10004264:	dc001117 	ldw	r16,68(sp)
10004268:	dcc01417 	ldw	r19,80(sp)
1000426c:	dc801017 	ldw	r18,64(sp)
10004270:	003c4506 	br	10003388 <__alt_data_end+0xf8003388>
10004274:	103e5d1e 	bne	r2,zero,10003bec <__alt_data_end+0xf8003bec>
10004278:	4080004c 	andi	r2,r8,1
1000427c:	103e5b26 	beq	r2,zero,10003bec <__alt_data_end+0xf8003bec>
10004280:	003e5706 	br	10003be0 <__alt_data_end+0xf8003be0>
10004284:	d8c00317 	ldw	r3,12(sp)
10004288:	00800084 	movi	r2,2
1000428c:	10c00a16 	blt	r2,r3,100042b8 <_dtoa_r+0x16a4>
10004290:	d9000d17 	ldw	r4,52(sp)
10004294:	003e8306 	br	10003ca4 <__alt_data_end+0xf8003ca4>
10004298:	04400084 	movi	r17,2
1000429c:	003b7306 	br	1000306c <__alt_data_end+0xf800306c>
100042a0:	d9801217 	ldw	r6,72(sp)
100042a4:	d9800515 	stw	r6,20(sp)
100042a8:	003cb606 	br	10003584 <__alt_data_end+0xf8003584>
100042ac:	d9001217 	ldw	r4,72(sp)
100042b0:	d9000515 	stw	r4,20(sp)
100042b4:	003c0506 	br	100032cc <__alt_data_end+0xf80032cc>
100042b8:	d9800d17 	ldw	r6,52(sp)
100042bc:	d9800615 	stw	r6,24(sp)
100042c0:	003e8306 	br	10003cd0 <__alt_data_end+0xf8003cd0>
100042c4:	d9800317 	ldw	r6,12(sp)
100042c8:	00800084 	movi	r2,2
100042cc:	11800216 	blt	r2,r6,100042d8 <_dtoa_r+0x16c4>
100042d0:	d8800d17 	ldw	r2,52(sp)
100042d4:	003da606 	br	10003970 <__alt_data_end+0xf8003970>
100042d8:	d8800d17 	ldw	r2,52(sp)
100042dc:	d8800615 	stw	r2,24(sp)
100042e0:	003e7b06 	br	10003cd0 <__alt_data_end+0xf8003cd0>
100042e4:	05000044 	movi	r20,1
100042e8:	003b0506 	br	10002f00 <__alt_data_end+0xf8002f00>
100042ec:	8009883a 	mov	r4,r16
100042f0:	80001115 	stw	zero,68(r16)
100042f4:	000b883a 	mov	r5,zero
100042f8:	00062500 	call	10006250 <_Balloc>
100042fc:	d8800715 	stw	r2,28(sp)
10004300:	d8c00717 	ldw	r3,28(sp)
10004304:	00bfffc4 	movi	r2,-1
10004308:	01000044 	movi	r4,1
1000430c:	d8800615 	stw	r2,24(sp)
10004310:	80c01015 	stw	r3,64(r16)
10004314:	d9000b15 	stw	r4,44(sp)
10004318:	d8002215 	stw	zero,136(sp)
1000431c:	d8800d15 	stw	r2,52(sp)
10004320:	003c1906 	br	10003388 <__alt_data_end+0xf8003388>
10004324:	193d2926 	beq	r3,r4,100037cc <__alt_data_end+0xf80037cc>
10004328:	00c00f04 	movi	r3,60
1000432c:	1885c83a 	sub	r2,r3,r2
10004330:	003d7b06 	br	10003920 <__alt_data_end+0xf8003920>
10004334:	000b883a 	mov	r5,zero
10004338:	003b1006 	br	10002f7c <__alt_data_end+0xf8002f7c>

1000433c <_fflush_r>:
1000433c:	defffb04 	addi	sp,sp,-20
10004340:	dcc00315 	stw	r19,12(sp)
10004344:	dc000015 	stw	r16,0(sp)
10004348:	dfc00415 	stw	ra,16(sp)
1000434c:	dc800215 	stw	r18,8(sp)
10004350:	dc400115 	stw	r17,4(sp)
10004354:	2027883a 	mov	r19,r4
10004358:	2821883a 	mov	r16,r5
1000435c:	20000226 	beq	r4,zero,10004368 <_fflush_r+0x2c>
10004360:	20800e17 	ldw	r2,56(r4)
10004364:	10005326 	beq	r2,zero,100044b4 <_fflush_r+0x178>
10004368:	8080030b 	ldhu	r2,12(r16)
1000436c:	10ffffcc 	andi	r3,r2,65535
10004370:	18e0001c 	xori	r3,r3,32768
10004374:	18e00004 	addi	r3,r3,-32768
10004378:	18002c26 	beq	r3,zero,1000442c <_fflush_r+0xf0>
1000437c:	10c0020c 	andi	r3,r2,8
10004380:	1800321e 	bne	r3,zero,1000444c <_fflush_r+0x110>
10004384:	80c00117 	ldw	r3,4(r16)
10004388:	10820014 	ori	r2,r2,2048
1000438c:	8080030d 	sth	r2,12(r16)
10004390:	00c0570e 	bge	zero,r3,100044f0 <_fflush_r+0x1b4>
10004394:	82000a17 	ldw	r8,40(r16)
10004398:	40002426 	beq	r8,zero,1000442c <_fflush_r+0xf0>
1000439c:	9c400017 	ldw	r17,0(r19)
100043a0:	10c4000c 	andi	r3,r2,4096
100043a4:	98000015 	stw	zero,0(r19)
100043a8:	18004626 	beq	r3,zero,100044c4 <_fflush_r+0x188>
100043ac:	81801417 	ldw	r6,80(r16)
100043b0:	10c0010c 	andi	r3,r2,4
100043b4:	18000626 	beq	r3,zero,100043d0 <_fflush_r+0x94>
100043b8:	80c00117 	ldw	r3,4(r16)
100043bc:	80800c17 	ldw	r2,48(r16)
100043c0:	30cdc83a 	sub	r6,r6,r3
100043c4:	10000226 	beq	r2,zero,100043d0 <_fflush_r+0x94>
100043c8:	80800f17 	ldw	r2,60(r16)
100043cc:	308dc83a 	sub	r6,r6,r2
100043d0:	81400717 	ldw	r5,28(r16)
100043d4:	9809883a 	mov	r4,r19
100043d8:	000f883a 	mov	r7,zero
100043dc:	403ee83a 	callr	r8
100043e0:	00ffffc4 	movi	r3,-1
100043e4:	10c04526 	beq	r2,r3,100044fc <_fflush_r+0x1c0>
100043e8:	80c0030b 	ldhu	r3,12(r16)
100043ec:	81000417 	ldw	r4,16(r16)
100043f0:	80000115 	stw	zero,4(r16)
100043f4:	197dffcc 	andi	r5,r3,63487
100043f8:	8140030d 	sth	r5,12(r16)
100043fc:	81000015 	stw	r4,0(r16)
10004400:	18c4000c 	andi	r3,r3,4096
10004404:	18000126 	beq	r3,zero,1000440c <_fflush_r+0xd0>
10004408:	80801415 	stw	r2,80(r16)
1000440c:	81400c17 	ldw	r5,48(r16)
10004410:	9c400015 	stw	r17,0(r19)
10004414:	28000526 	beq	r5,zero,1000442c <_fflush_r+0xf0>
10004418:	80801004 	addi	r2,r16,64
1000441c:	28800226 	beq	r5,r2,10004428 <_fflush_r+0xec>
10004420:	9809883a 	mov	r4,r19
10004424:	0004a6c0 	call	10004a6c <_free_r>
10004428:	80000c15 	stw	zero,48(r16)
1000442c:	0005883a 	mov	r2,zero
10004430:	dfc00417 	ldw	ra,16(sp)
10004434:	dcc00317 	ldw	r19,12(sp)
10004438:	dc800217 	ldw	r18,8(sp)
1000443c:	dc400117 	ldw	r17,4(sp)
10004440:	dc000017 	ldw	r16,0(sp)
10004444:	dec00504 	addi	sp,sp,20
10004448:	f800283a 	ret
1000444c:	84800417 	ldw	r18,16(r16)
10004450:	903ff626 	beq	r18,zero,1000442c <__alt_data_end+0xf800442c>
10004454:	84400017 	ldw	r17,0(r16)
10004458:	108000cc 	andi	r2,r2,3
1000445c:	84800015 	stw	r18,0(r16)
10004460:	8ca3c83a 	sub	r17,r17,r18
10004464:	10001526 	beq	r2,zero,100044bc <_fflush_r+0x180>
10004468:	0005883a 	mov	r2,zero
1000446c:	80800215 	stw	r2,8(r16)
10004470:	04400316 	blt	zero,r17,10004480 <_fflush_r+0x144>
10004474:	003fed06 	br	1000442c <__alt_data_end+0xf800442c>
10004478:	90a5883a 	add	r18,r18,r2
1000447c:	047feb0e 	bge	zero,r17,1000442c <__alt_data_end+0xf800442c>
10004480:	80800917 	ldw	r2,36(r16)
10004484:	81400717 	ldw	r5,28(r16)
10004488:	880f883a 	mov	r7,r17
1000448c:	900d883a 	mov	r6,r18
10004490:	9809883a 	mov	r4,r19
10004494:	103ee83a 	callr	r2
10004498:	88a3c83a 	sub	r17,r17,r2
1000449c:	00bff616 	blt	zero,r2,10004478 <__alt_data_end+0xf8004478>
100044a0:	80c0030b 	ldhu	r3,12(r16)
100044a4:	00bfffc4 	movi	r2,-1
100044a8:	18c01014 	ori	r3,r3,64
100044ac:	80c0030d 	sth	r3,12(r16)
100044b0:	003fdf06 	br	10004430 <__alt_data_end+0xf8004430>
100044b4:	00048f80 	call	100048f8 <__sinit>
100044b8:	003fab06 	br	10004368 <__alt_data_end+0xf8004368>
100044bc:	80800517 	ldw	r2,20(r16)
100044c0:	003fea06 	br	1000446c <__alt_data_end+0xf800446c>
100044c4:	81400717 	ldw	r5,28(r16)
100044c8:	000d883a 	mov	r6,zero
100044cc:	9809883a 	mov	r4,r19
100044d0:	01c00044 	movi	r7,1
100044d4:	403ee83a 	callr	r8
100044d8:	100d883a 	mov	r6,r2
100044dc:	00bfffc4 	movi	r2,-1
100044e0:	30801326 	beq	r6,r2,10004530 <_fflush_r+0x1f4>
100044e4:	8080030b 	ldhu	r2,12(r16)
100044e8:	82000a17 	ldw	r8,40(r16)
100044ec:	003fb006 	br	100043b0 <__alt_data_end+0xf80043b0>
100044f0:	80c00f17 	ldw	r3,60(r16)
100044f4:	00ffa716 	blt	zero,r3,10004394 <__alt_data_end+0xf8004394>
100044f8:	003fcc06 	br	1000442c <__alt_data_end+0xf800442c>
100044fc:	98c00017 	ldw	r3,0(r19)
10004500:	183fb926 	beq	r3,zero,100043e8 <__alt_data_end+0xf80043e8>
10004504:	01000744 	movi	r4,29
10004508:	19000226 	beq	r3,r4,10004514 <_fflush_r+0x1d8>
1000450c:	01000584 	movi	r4,22
10004510:	1900101e 	bne	r3,r4,10004554 <_fflush_r+0x218>
10004514:	8080030b 	ldhu	r2,12(r16)
10004518:	80c00417 	ldw	r3,16(r16)
1000451c:	80000115 	stw	zero,4(r16)
10004520:	10bdffcc 	andi	r2,r2,63487
10004524:	8080030d 	sth	r2,12(r16)
10004528:	80c00015 	stw	r3,0(r16)
1000452c:	003fb706 	br	1000440c <__alt_data_end+0xf800440c>
10004530:	98800017 	ldw	r2,0(r19)
10004534:	103feb26 	beq	r2,zero,100044e4 <__alt_data_end+0xf80044e4>
10004538:	00c00744 	movi	r3,29
1000453c:	10c00226 	beq	r2,r3,10004548 <_fflush_r+0x20c>
10004540:	00c00584 	movi	r3,22
10004544:	10ffd61e 	bne	r2,r3,100044a0 <__alt_data_end+0xf80044a0>
10004548:	9c400015 	stw	r17,0(r19)
1000454c:	0005883a 	mov	r2,zero
10004550:	003fb706 	br	10004430 <__alt_data_end+0xf8004430>
10004554:	80c0030b 	ldhu	r3,12(r16)
10004558:	18c01014 	ori	r3,r3,64
1000455c:	80c0030d 	sth	r3,12(r16)
10004560:	003fb306 	br	10004430 <__alt_data_end+0xf8004430>

10004564 <fflush>:
10004564:	20000526 	beq	r4,zero,1000457c <fflush+0x18>
10004568:	00840074 	movhi	r2,4097
1000456c:	10852904 	addi	r2,r2,5284
10004570:	200b883a 	mov	r5,r4
10004574:	11000017 	ldw	r4,0(r2)
10004578:	000433c1 	jmpi	1000433c <_fflush_r>
1000457c:	00840074 	movhi	r2,4097
10004580:	10852804 	addi	r2,r2,5280
10004584:	11000017 	ldw	r4,0(r2)
10004588:	01440034 	movhi	r5,4096
1000458c:	2950cf04 	addi	r5,r5,17212
10004590:	00052b81 	jmpi	100052b8 <_fwalk_reent>

10004594 <__fp_lock>:
10004594:	0005883a 	mov	r2,zero
10004598:	f800283a 	ret

1000459c <__fp_unlock>:
1000459c:	0005883a 	mov	r2,zero
100045a0:	f800283a 	ret

100045a4 <_cleanup_r>:
100045a4:	01440074 	movhi	r5,4097
100045a8:	2964b104 	addi	r5,r5,-27964
100045ac:	00052001 	jmpi	10005200 <_fwalk>

100045b0 <__sinit.part.1>:
100045b0:	defff604 	addi	sp,sp,-40
100045b4:	00c40034 	movhi	r3,4096
100045b8:	dfc00915 	stw	ra,36(sp)
100045bc:	df000815 	stw	fp,32(sp)
100045c0:	ddc00715 	stw	r23,28(sp)
100045c4:	dd800615 	stw	r22,24(sp)
100045c8:	dd400515 	stw	r21,20(sp)
100045cc:	dd000415 	stw	r20,16(sp)
100045d0:	dcc00315 	stw	r19,12(sp)
100045d4:	dc800215 	stw	r18,8(sp)
100045d8:	dc400115 	stw	r17,4(sp)
100045dc:	dc000015 	stw	r16,0(sp)
100045e0:	18d16904 	addi	r3,r3,17828
100045e4:	24000117 	ldw	r16,4(r4)
100045e8:	20c00f15 	stw	r3,60(r4)
100045ec:	07000044 	movi	fp,1
100045f0:	00c000c4 	movi	r3,3
100045f4:	2080bb04 	addi	r2,r4,748
100045f8:	20c0b915 	stw	r3,740(r4)
100045fc:	27000e15 	stw	fp,56(r4)
10004600:	2080ba15 	stw	r2,744(r4)
10004604:	2000b815 	stw	zero,736(r4)
10004608:	05c00204 	movi	r23,8
1000460c:	00800104 	movi	r2,4
10004610:	2025883a 	mov	r18,r4
10004614:	b80d883a 	mov	r6,r23
10004618:	81001704 	addi	r4,r16,92
1000461c:	000b883a 	mov	r5,zero
10004620:	80000015 	stw	zero,0(r16)
10004624:	80000115 	stw	zero,4(r16)
10004628:	80000215 	stw	zero,8(r16)
1000462c:	8080030d 	sth	r2,12(r16)
10004630:	80001915 	stw	zero,100(r16)
10004634:	8000038d 	sth	zero,14(r16)
10004638:	80000415 	stw	zero,16(r16)
1000463c:	80000515 	stw	zero,20(r16)
10004640:	80000615 	stw	zero,24(r16)
10004644:	000612c0 	call	1000612c <memset>
10004648:	05840034 	movhi	r22,4096
1000464c:	94400217 	ldw	r17,8(r18)
10004650:	05440034 	movhi	r21,4096
10004654:	05040034 	movhi	r20,4096
10004658:	04c40034 	movhi	r19,4096
1000465c:	b59e4004 	addi	r22,r22,30976
10004660:	ad5e5704 	addi	r21,r21,31068
10004664:	a51e7604 	addi	r20,r20,31192
10004668:	9cde8d04 	addi	r19,r19,31284
1000466c:	85800815 	stw	r22,32(r16)
10004670:	85400915 	stw	r21,36(r16)
10004674:	85000a15 	stw	r20,40(r16)
10004678:	84c00b15 	stw	r19,44(r16)
1000467c:	84000715 	stw	r16,28(r16)
10004680:	00800284 	movi	r2,10
10004684:	89001704 	addi	r4,r17,92
10004688:	b80d883a 	mov	r6,r23
1000468c:	000b883a 	mov	r5,zero
10004690:	88000015 	stw	zero,0(r17)
10004694:	88000115 	stw	zero,4(r17)
10004698:	88000215 	stw	zero,8(r17)
1000469c:	8880030d 	sth	r2,12(r17)
100046a0:	88001915 	stw	zero,100(r17)
100046a4:	8f00038d 	sth	fp,14(r17)
100046a8:	88000415 	stw	zero,16(r17)
100046ac:	88000515 	stw	zero,20(r17)
100046b0:	88000615 	stw	zero,24(r17)
100046b4:	000612c0 	call	1000612c <memset>
100046b8:	94000317 	ldw	r16,12(r18)
100046bc:	00800484 	movi	r2,18
100046c0:	8c400715 	stw	r17,28(r17)
100046c4:	8d800815 	stw	r22,32(r17)
100046c8:	8d400915 	stw	r21,36(r17)
100046cc:	8d000a15 	stw	r20,40(r17)
100046d0:	8cc00b15 	stw	r19,44(r17)
100046d4:	8080030d 	sth	r2,12(r16)
100046d8:	00800084 	movi	r2,2
100046dc:	80000015 	stw	zero,0(r16)
100046e0:	80000115 	stw	zero,4(r16)
100046e4:	80000215 	stw	zero,8(r16)
100046e8:	80001915 	stw	zero,100(r16)
100046ec:	8080038d 	sth	r2,14(r16)
100046f0:	80000415 	stw	zero,16(r16)
100046f4:	80000515 	stw	zero,20(r16)
100046f8:	80000615 	stw	zero,24(r16)
100046fc:	81001704 	addi	r4,r16,92
10004700:	000b883a 	mov	r5,zero
10004704:	b80d883a 	mov	r6,r23
10004708:	000612c0 	call	1000612c <memset>
1000470c:	84000715 	stw	r16,28(r16)
10004710:	85800815 	stw	r22,32(r16)
10004714:	85400915 	stw	r21,36(r16)
10004718:	85000a15 	stw	r20,40(r16)
1000471c:	84c00b15 	stw	r19,44(r16)
10004720:	dfc00917 	ldw	ra,36(sp)
10004724:	df000817 	ldw	fp,32(sp)
10004728:	ddc00717 	ldw	r23,28(sp)
1000472c:	dd800617 	ldw	r22,24(sp)
10004730:	dd400517 	ldw	r21,20(sp)
10004734:	dd000417 	ldw	r20,16(sp)
10004738:	dcc00317 	ldw	r19,12(sp)
1000473c:	dc800217 	ldw	r18,8(sp)
10004740:	dc400117 	ldw	r17,4(sp)
10004744:	dc000017 	ldw	r16,0(sp)
10004748:	dec00a04 	addi	sp,sp,40
1000474c:	f800283a 	ret

10004750 <__sfmoreglue>:
10004750:	defffc04 	addi	sp,sp,-16
10004754:	dc800215 	stw	r18,8(sp)
10004758:	2825883a 	mov	r18,r5
1000475c:	dc000015 	stw	r16,0(sp)
10004760:	01401a04 	movi	r5,104
10004764:	2021883a 	mov	r16,r4
10004768:	9009883a 	mov	r4,r18
1000476c:	dfc00315 	stw	ra,12(sp)
10004770:	dc400115 	stw	r17,4(sp)
10004774:	00005a80 	call	100005a8 <__mulsi3>
10004778:	8009883a 	mov	r4,r16
1000477c:	11400304 	addi	r5,r2,12
10004780:	1023883a 	mov	r17,r2
10004784:	00056080 	call	10005608 <_malloc_r>
10004788:	1021883a 	mov	r16,r2
1000478c:	10000726 	beq	r2,zero,100047ac <__sfmoreglue+0x5c>
10004790:	11000304 	addi	r4,r2,12
10004794:	10000015 	stw	zero,0(r2)
10004798:	14800115 	stw	r18,4(r2)
1000479c:	11000215 	stw	r4,8(r2)
100047a0:	000b883a 	mov	r5,zero
100047a4:	880d883a 	mov	r6,r17
100047a8:	000612c0 	call	1000612c <memset>
100047ac:	8005883a 	mov	r2,r16
100047b0:	dfc00317 	ldw	ra,12(sp)
100047b4:	dc800217 	ldw	r18,8(sp)
100047b8:	dc400117 	ldw	r17,4(sp)
100047bc:	dc000017 	ldw	r16,0(sp)
100047c0:	dec00404 	addi	sp,sp,16
100047c4:	f800283a 	ret

100047c8 <__sfp>:
100047c8:	00840074 	movhi	r2,4097
100047cc:	defffb04 	addi	sp,sp,-20
100047d0:	10852804 	addi	r2,r2,5280
100047d4:	dc800215 	stw	r18,8(sp)
100047d8:	14800017 	ldw	r18,0(r2)
100047dc:	dcc00315 	stw	r19,12(sp)
100047e0:	dfc00415 	stw	ra,16(sp)
100047e4:	90800e17 	ldw	r2,56(r18)
100047e8:	dc400115 	stw	r17,4(sp)
100047ec:	dc000015 	stw	r16,0(sp)
100047f0:	2027883a 	mov	r19,r4
100047f4:	1000021e 	bne	r2,zero,10004800 <__sfp+0x38>
100047f8:	9009883a 	mov	r4,r18
100047fc:	00045b00 	call	100045b0 <__sinit.part.1>
10004800:	9480b804 	addi	r18,r18,736
10004804:	047fffc4 	movi	r17,-1
10004808:	91400117 	ldw	r5,4(r18)
1000480c:	94000217 	ldw	r16,8(r18)
10004810:	297fffc4 	addi	r5,r5,-1
10004814:	28000a16 	blt	r5,zero,10004840 <__sfp+0x78>
10004818:	8080030f 	ldh	r2,12(r16)
1000481c:	10000c26 	beq	r2,zero,10004850 <__sfp+0x88>
10004820:	80c01d04 	addi	r3,r16,116
10004824:	00000206 	br	10004830 <__sfp+0x68>
10004828:	18bfe60f 	ldh	r2,-104(r3)
1000482c:	10000826 	beq	r2,zero,10004850 <__sfp+0x88>
10004830:	297fffc4 	addi	r5,r5,-1
10004834:	1c3ffd04 	addi	r16,r3,-12
10004838:	18c01a04 	addi	r3,r3,104
1000483c:	2c7ffa1e 	bne	r5,r17,10004828 <__alt_data_end+0xf8004828>
10004840:	90800017 	ldw	r2,0(r18)
10004844:	10001d26 	beq	r2,zero,100048bc <__sfp+0xf4>
10004848:	1025883a 	mov	r18,r2
1000484c:	003fee06 	br	10004808 <__alt_data_end+0xf8004808>
10004850:	00bfffc4 	movi	r2,-1
10004854:	8080038d 	sth	r2,14(r16)
10004858:	00800044 	movi	r2,1
1000485c:	8080030d 	sth	r2,12(r16)
10004860:	80001915 	stw	zero,100(r16)
10004864:	80000015 	stw	zero,0(r16)
10004868:	80000215 	stw	zero,8(r16)
1000486c:	80000115 	stw	zero,4(r16)
10004870:	80000415 	stw	zero,16(r16)
10004874:	80000515 	stw	zero,20(r16)
10004878:	80000615 	stw	zero,24(r16)
1000487c:	81001704 	addi	r4,r16,92
10004880:	000b883a 	mov	r5,zero
10004884:	01800204 	movi	r6,8
10004888:	000612c0 	call	1000612c <memset>
1000488c:	8005883a 	mov	r2,r16
10004890:	80000c15 	stw	zero,48(r16)
10004894:	80000d15 	stw	zero,52(r16)
10004898:	80001115 	stw	zero,68(r16)
1000489c:	80001215 	stw	zero,72(r16)
100048a0:	dfc00417 	ldw	ra,16(sp)
100048a4:	dcc00317 	ldw	r19,12(sp)
100048a8:	dc800217 	ldw	r18,8(sp)
100048ac:	dc400117 	ldw	r17,4(sp)
100048b0:	dc000017 	ldw	r16,0(sp)
100048b4:	dec00504 	addi	sp,sp,20
100048b8:	f800283a 	ret
100048bc:	9809883a 	mov	r4,r19
100048c0:	01400104 	movi	r5,4
100048c4:	00047500 	call	10004750 <__sfmoreglue>
100048c8:	90800015 	stw	r2,0(r18)
100048cc:	103fde1e 	bne	r2,zero,10004848 <__alt_data_end+0xf8004848>
100048d0:	00800304 	movi	r2,12
100048d4:	98800015 	stw	r2,0(r19)
100048d8:	0005883a 	mov	r2,zero
100048dc:	003ff006 	br	100048a0 <__alt_data_end+0xf80048a0>

100048e0 <_cleanup>:
100048e0:	00840074 	movhi	r2,4097
100048e4:	10852804 	addi	r2,r2,5280
100048e8:	11000017 	ldw	r4,0(r2)
100048ec:	01440074 	movhi	r5,4097
100048f0:	2964b104 	addi	r5,r5,-27964
100048f4:	00052001 	jmpi	10005200 <_fwalk>

100048f8 <__sinit>:
100048f8:	20800e17 	ldw	r2,56(r4)
100048fc:	10000126 	beq	r2,zero,10004904 <__sinit+0xc>
10004900:	f800283a 	ret
10004904:	00045b01 	jmpi	100045b0 <__sinit.part.1>

10004908 <__sfp_lock_acquire>:
10004908:	f800283a 	ret

1000490c <__sfp_lock_release>:
1000490c:	f800283a 	ret

10004910 <__sinit_lock_acquire>:
10004910:	f800283a 	ret

10004914 <__sinit_lock_release>:
10004914:	f800283a 	ret

10004918 <__fp_lock_all>:
10004918:	00840074 	movhi	r2,4097
1000491c:	10852904 	addi	r2,r2,5284
10004920:	11000017 	ldw	r4,0(r2)
10004924:	01440034 	movhi	r5,4096
10004928:	29516504 	addi	r5,r5,17812
1000492c:	00052001 	jmpi	10005200 <_fwalk>

10004930 <__fp_unlock_all>:
10004930:	00840074 	movhi	r2,4097
10004934:	10852904 	addi	r2,r2,5284
10004938:	11000017 	ldw	r4,0(r2)
1000493c:	01440034 	movhi	r5,4096
10004940:	29516704 	addi	r5,r5,17820
10004944:	00052001 	jmpi	10005200 <_fwalk>

10004948 <_malloc_trim_r>:
10004948:	defffb04 	addi	sp,sp,-20
1000494c:	dcc00315 	stw	r19,12(sp)
10004950:	04c40074 	movhi	r19,4097
10004954:	dc800215 	stw	r18,8(sp)
10004958:	dc400115 	stw	r17,4(sp)
1000495c:	dc000015 	stw	r16,0(sp)
10004960:	dfc00415 	stw	ra,16(sp)
10004964:	2821883a 	mov	r16,r5
10004968:	9cffa404 	addi	r19,r19,-368
1000496c:	2025883a 	mov	r18,r4
10004970:	000d4ec0 	call	1000d4ec <__malloc_lock>
10004974:	98800217 	ldw	r2,8(r19)
10004978:	14400117 	ldw	r17,4(r2)
1000497c:	00bfff04 	movi	r2,-4
10004980:	88a2703a 	and	r17,r17,r2
10004984:	8c21c83a 	sub	r16,r17,r16
10004988:	8403fbc4 	addi	r16,r16,4079
1000498c:	8020d33a 	srli	r16,r16,12
10004990:	0083ffc4 	movi	r2,4095
10004994:	843fffc4 	addi	r16,r16,-1
10004998:	8020933a 	slli	r16,r16,12
1000499c:	1400060e 	bge	r2,r16,100049b8 <_malloc_trim_r+0x70>
100049a0:	9009883a 	mov	r4,r18
100049a4:	000b883a 	mov	r5,zero
100049a8:	00078ac0 	call	100078ac <_sbrk_r>
100049ac:	98c00217 	ldw	r3,8(r19)
100049b0:	1c47883a 	add	r3,r3,r17
100049b4:	10c00a26 	beq	r2,r3,100049e0 <_malloc_trim_r+0x98>
100049b8:	9009883a 	mov	r4,r18
100049bc:	000d50c0 	call	1000d50c <__malloc_unlock>
100049c0:	0005883a 	mov	r2,zero
100049c4:	dfc00417 	ldw	ra,16(sp)
100049c8:	dcc00317 	ldw	r19,12(sp)
100049cc:	dc800217 	ldw	r18,8(sp)
100049d0:	dc400117 	ldw	r17,4(sp)
100049d4:	dc000017 	ldw	r16,0(sp)
100049d8:	dec00504 	addi	sp,sp,20
100049dc:	f800283a 	ret
100049e0:	9009883a 	mov	r4,r18
100049e4:	040bc83a 	sub	r5,zero,r16
100049e8:	00078ac0 	call	100078ac <_sbrk_r>
100049ec:	00ffffc4 	movi	r3,-1
100049f0:	10c00d26 	beq	r2,r3,10004a28 <_malloc_trim_r+0xe0>
100049f4:	00c40074 	movhi	r3,4097
100049f8:	18cc0104 	addi	r3,r3,12292
100049fc:	18800017 	ldw	r2,0(r3)
10004a00:	99000217 	ldw	r4,8(r19)
10004a04:	8c23c83a 	sub	r17,r17,r16
10004a08:	8c400054 	ori	r17,r17,1
10004a0c:	1421c83a 	sub	r16,r2,r16
10004a10:	24400115 	stw	r17,4(r4)
10004a14:	9009883a 	mov	r4,r18
10004a18:	1c000015 	stw	r16,0(r3)
10004a1c:	000d50c0 	call	1000d50c <__malloc_unlock>
10004a20:	00800044 	movi	r2,1
10004a24:	003fe706 	br	100049c4 <__alt_data_end+0xf80049c4>
10004a28:	9009883a 	mov	r4,r18
10004a2c:	000b883a 	mov	r5,zero
10004a30:	00078ac0 	call	100078ac <_sbrk_r>
10004a34:	99000217 	ldw	r4,8(r19)
10004a38:	014003c4 	movi	r5,15
10004a3c:	1107c83a 	sub	r3,r2,r4
10004a40:	28ffdd0e 	bge	r5,r3,100049b8 <__alt_data_end+0xf80049b8>
10004a44:	01440074 	movhi	r5,4097
10004a48:	29452b04 	addi	r5,r5,5292
10004a4c:	29400017 	ldw	r5,0(r5)
10004a50:	18c00054 	ori	r3,r3,1
10004a54:	20c00115 	stw	r3,4(r4)
10004a58:	00c40074 	movhi	r3,4097
10004a5c:	1145c83a 	sub	r2,r2,r5
10004a60:	18cc0104 	addi	r3,r3,12292
10004a64:	18800015 	stw	r2,0(r3)
10004a68:	003fd306 	br	100049b8 <__alt_data_end+0xf80049b8>

10004a6c <_free_r>:
10004a6c:	28004c26 	beq	r5,zero,10004ba0 <_free_r+0x134>
10004a70:	defffd04 	addi	sp,sp,-12
10004a74:	dc400115 	stw	r17,4(sp)
10004a78:	dc000015 	stw	r16,0(sp)
10004a7c:	2023883a 	mov	r17,r4
10004a80:	2821883a 	mov	r16,r5
10004a84:	dfc00215 	stw	ra,8(sp)
10004a88:	000d4ec0 	call	1000d4ec <__malloc_lock>
10004a8c:	813fff17 	ldw	r4,-4(r16)
10004a90:	00bfff84 	movi	r2,-2
10004a94:	02440074 	movhi	r9,4097
10004a98:	81bffe04 	addi	r6,r16,-8
10004a9c:	2084703a 	and	r2,r4,r2
10004aa0:	4a7fa404 	addi	r9,r9,-368
10004aa4:	308b883a 	add	r5,r6,r2
10004aa8:	2a000117 	ldw	r8,4(r5)
10004aac:	49c00217 	ldw	r7,8(r9)
10004ab0:	00ffff04 	movi	r3,-4
10004ab4:	40c6703a 	and	r3,r8,r3
10004ab8:	39405326 	beq	r7,r5,10004c08 <_free_r+0x19c>
10004abc:	28c00115 	stw	r3,4(r5)
10004ac0:	2100004c 	andi	r4,r4,1
10004ac4:	2000091e 	bne	r4,zero,10004aec <_free_r+0x80>
10004ac8:	81fffe17 	ldw	r7,-8(r16)
10004acc:	4a000204 	addi	r8,r9,8
10004ad0:	31cdc83a 	sub	r6,r6,r7
10004ad4:	31000217 	ldw	r4,8(r6)
10004ad8:	11c5883a 	add	r2,r2,r7
10004adc:	22006126 	beq	r4,r8,10004c64 <_free_r+0x1f8>
10004ae0:	31c00317 	ldw	r7,12(r6)
10004ae4:	21c00315 	stw	r7,12(r4)
10004ae8:	39000215 	stw	r4,8(r7)
10004aec:	28c9883a 	add	r4,r5,r3
10004af0:	21c00117 	ldw	r7,4(r4)
10004af4:	39c0004c 	andi	r7,r7,1
10004af8:	38000d1e 	bne	r7,zero,10004b30 <_free_r+0xc4>
10004afc:	29000217 	ldw	r4,8(r5)
10004b00:	10c5883a 	add	r2,r2,r3
10004b04:	00c40074 	movhi	r3,4097
10004b08:	18ffa604 	addi	r3,r3,-360
10004b0c:	20c07526 	beq	r4,r3,10004ce4 <_free_r+0x278>
10004b10:	29c00317 	ldw	r7,12(r5)
10004b14:	11400054 	ori	r5,r2,1
10004b18:	3087883a 	add	r3,r6,r2
10004b1c:	21c00315 	stw	r7,12(r4)
10004b20:	39000215 	stw	r4,8(r7)
10004b24:	31400115 	stw	r5,4(r6)
10004b28:	18800015 	stw	r2,0(r3)
10004b2c:	00000406 	br	10004b40 <_free_r+0xd4>
10004b30:	10c00054 	ori	r3,r2,1
10004b34:	30c00115 	stw	r3,4(r6)
10004b38:	3087883a 	add	r3,r6,r2
10004b3c:	18800015 	stw	r2,0(r3)
10004b40:	00c07fc4 	movi	r3,511
10004b44:	18801736 	bltu	r3,r2,10004ba4 <_free_r+0x138>
10004b48:	1004d0fa 	srli	r2,r2,3
10004b4c:	01400044 	movi	r5,1
10004b50:	49000117 	ldw	r4,4(r9)
10004b54:	1087883a 	add	r3,r2,r2
10004b58:	18c7883a 	add	r3,r3,r3
10004b5c:	1005d0ba 	srai	r2,r2,2
10004b60:	18c7883a 	add	r3,r3,r3
10004b64:	1a47883a 	add	r3,r3,r9
10004b68:	19c00217 	ldw	r7,8(r3)
10004b6c:	2884983a 	sll	r2,r5,r2
10004b70:	30c00315 	stw	r3,12(r6)
10004b74:	31c00215 	stw	r7,8(r6)
10004b78:	1104b03a 	or	r2,r2,r4
10004b7c:	19800215 	stw	r6,8(r3)
10004b80:	48800115 	stw	r2,4(r9)
10004b84:	39800315 	stw	r6,12(r7)
10004b88:	8809883a 	mov	r4,r17
10004b8c:	dfc00217 	ldw	ra,8(sp)
10004b90:	dc400117 	ldw	r17,4(sp)
10004b94:	dc000017 	ldw	r16,0(sp)
10004b98:	dec00304 	addi	sp,sp,12
10004b9c:	000d50c1 	jmpi	1000d50c <__malloc_unlock>
10004ba0:	f800283a 	ret
10004ba4:	1006d27a 	srli	r3,r2,9
10004ba8:	01000104 	movi	r4,4
10004bac:	20c04036 	bltu	r4,r3,10004cb0 <_free_r+0x244>
10004bb0:	1006d1ba 	srli	r3,r2,6
10004bb4:	19400e04 	addi	r5,r3,56
10004bb8:	2947883a 	add	r3,r5,r5
10004bbc:	18c7883a 	add	r3,r3,r3
10004bc0:	18c7883a 	add	r3,r3,r3
10004bc4:	1a49883a 	add	r4,r3,r9
10004bc8:	20c00217 	ldw	r3,8(r4)
10004bcc:	01c40074 	movhi	r7,4097
10004bd0:	39ffa404 	addi	r7,r7,-368
10004bd4:	19003b26 	beq	r3,r4,10004cc4 <_free_r+0x258>
10004bd8:	01ffff04 	movi	r7,-4
10004bdc:	19400117 	ldw	r5,4(r3)
10004be0:	29ca703a 	and	r5,r5,r7
10004be4:	1140022e 	bgeu	r2,r5,10004bf0 <_free_r+0x184>
10004be8:	18c00217 	ldw	r3,8(r3)
10004bec:	20fffb1e 	bne	r4,r3,10004bdc <__alt_data_end+0xf8004bdc>
10004bf0:	18800317 	ldw	r2,12(r3)
10004bf4:	30800315 	stw	r2,12(r6)
10004bf8:	30c00215 	stw	r3,8(r6)
10004bfc:	11800215 	stw	r6,8(r2)
10004c00:	19800315 	stw	r6,12(r3)
10004c04:	003fe006 	br	10004b88 <__alt_data_end+0xf8004b88>
10004c08:	2100004c 	andi	r4,r4,1
10004c0c:	1885883a 	add	r2,r3,r2
10004c10:	2000071e 	bne	r4,zero,10004c30 <_free_r+0x1c4>
10004c14:	817ffe17 	ldw	r5,-8(r16)
10004c18:	314dc83a 	sub	r6,r6,r5
10004c1c:	30c00317 	ldw	r3,12(r6)
10004c20:	31000217 	ldw	r4,8(r6)
10004c24:	1145883a 	add	r2,r2,r5
10004c28:	20c00315 	stw	r3,12(r4)
10004c2c:	19000215 	stw	r4,8(r3)
10004c30:	10c00054 	ori	r3,r2,1
10004c34:	30c00115 	stw	r3,4(r6)
10004c38:	00c40074 	movhi	r3,4097
10004c3c:	18c52c04 	addi	r3,r3,5296
10004c40:	18c00017 	ldw	r3,0(r3)
10004c44:	49800215 	stw	r6,8(r9)
10004c48:	10ffcf36 	bltu	r2,r3,10004b88 <__alt_data_end+0xf8004b88>
10004c4c:	00840074 	movhi	r2,4097
10004c50:	108bf804 	addi	r2,r2,12256
10004c54:	11400017 	ldw	r5,0(r2)
10004c58:	8809883a 	mov	r4,r17
10004c5c:	00049480 	call	10004948 <_malloc_trim_r>
10004c60:	003fc906 	br	10004b88 <__alt_data_end+0xf8004b88>
10004c64:	28c9883a 	add	r4,r5,r3
10004c68:	21000117 	ldw	r4,4(r4)
10004c6c:	2100004c 	andi	r4,r4,1
10004c70:	20000a1e 	bne	r4,zero,10004c9c <_free_r+0x230>
10004c74:	29000317 	ldw	r4,12(r5)
10004c78:	29400217 	ldw	r5,8(r5)
10004c7c:	10c5883a 	add	r2,r2,r3
10004c80:	10c00054 	ori	r3,r2,1
10004c84:	29000315 	stw	r4,12(r5)
10004c88:	21400215 	stw	r5,8(r4)
10004c8c:	30c00115 	stw	r3,4(r6)
10004c90:	308d883a 	add	r6,r6,r2
10004c94:	30800015 	stw	r2,0(r6)
10004c98:	003fbb06 	br	10004b88 <__alt_data_end+0xf8004b88>
10004c9c:	10c00054 	ori	r3,r2,1
10004ca0:	30c00115 	stw	r3,4(r6)
10004ca4:	308d883a 	add	r6,r6,r2
10004ca8:	30800015 	stw	r2,0(r6)
10004cac:	003fb606 	br	10004b88 <__alt_data_end+0xf8004b88>
10004cb0:	01000504 	movi	r4,20
10004cb4:	20c01436 	bltu	r4,r3,10004d08 <_free_r+0x29c>
10004cb8:	194016c4 	addi	r5,r3,91
10004cbc:	2947883a 	add	r3,r5,r5
10004cc0:	003fbe06 	br	10004bbc <__alt_data_end+0xf8004bbc>
10004cc4:	280bd0ba 	srai	r5,r5,2
10004cc8:	00800044 	movi	r2,1
10004ccc:	39000117 	ldw	r4,4(r7)
10004cd0:	114a983a 	sll	r5,r2,r5
10004cd4:	1805883a 	mov	r2,r3
10004cd8:	2908b03a 	or	r4,r5,r4
10004cdc:	39000115 	stw	r4,4(r7)
10004ce0:	003fc406 	br	10004bf4 <__alt_data_end+0xf8004bf4>
10004ce4:	49800515 	stw	r6,20(r9)
10004ce8:	49800415 	stw	r6,16(r9)
10004cec:	10c00054 	ori	r3,r2,1
10004cf0:	31000315 	stw	r4,12(r6)
10004cf4:	31000215 	stw	r4,8(r6)
10004cf8:	30c00115 	stw	r3,4(r6)
10004cfc:	308d883a 	add	r6,r6,r2
10004d00:	30800015 	stw	r2,0(r6)
10004d04:	003fa006 	br	10004b88 <__alt_data_end+0xf8004b88>
10004d08:	01001504 	movi	r4,84
10004d0c:	20c00436 	bltu	r4,r3,10004d20 <_free_r+0x2b4>
10004d10:	1006d33a 	srli	r3,r2,12
10004d14:	19401b84 	addi	r5,r3,110
10004d18:	2947883a 	add	r3,r5,r5
10004d1c:	003fa706 	br	10004bbc <__alt_data_end+0xf8004bbc>
10004d20:	01005504 	movi	r4,340
10004d24:	20c00436 	bltu	r4,r3,10004d38 <_free_r+0x2cc>
10004d28:	1006d3fa 	srli	r3,r2,15
10004d2c:	19401dc4 	addi	r5,r3,119
10004d30:	2947883a 	add	r3,r5,r5
10004d34:	003fa106 	br	10004bbc <__alt_data_end+0xf8004bbc>
10004d38:	01015504 	movi	r4,1364
10004d3c:	20c00436 	bltu	r4,r3,10004d50 <_free_r+0x2e4>
10004d40:	1006d4ba 	srli	r3,r2,18
10004d44:	19401f04 	addi	r5,r3,124
10004d48:	2947883a 	add	r3,r5,r5
10004d4c:	003f9b06 	br	10004bbc <__alt_data_end+0xf8004bbc>
10004d50:	00c03f04 	movi	r3,252
10004d54:	01401f84 	movi	r5,126
10004d58:	003f9806 	br	10004bbc <__alt_data_end+0xf8004bbc>

10004d5c <__sfvwrite_r>:
10004d5c:	30800217 	ldw	r2,8(r6)
10004d60:	10004526 	beq	r2,zero,10004e78 <__sfvwrite_r+0x11c>
10004d64:	28c0030b 	ldhu	r3,12(r5)
10004d68:	defff404 	addi	sp,sp,-48
10004d6c:	dd400715 	stw	r21,28(sp)
10004d70:	dcc00515 	stw	r19,20(sp)
10004d74:	dc000215 	stw	r16,8(sp)
10004d78:	dfc00b15 	stw	ra,44(sp)
10004d7c:	df000a15 	stw	fp,40(sp)
10004d80:	ddc00915 	stw	r23,36(sp)
10004d84:	dd800815 	stw	r22,32(sp)
10004d88:	dd000615 	stw	r20,24(sp)
10004d8c:	dc800415 	stw	r18,16(sp)
10004d90:	dc400315 	stw	r17,12(sp)
10004d94:	1880020c 	andi	r2,r3,8
10004d98:	2821883a 	mov	r16,r5
10004d9c:	202b883a 	mov	r21,r4
10004da0:	3027883a 	mov	r19,r6
10004da4:	10002526 	beq	r2,zero,10004e3c <__sfvwrite_r+0xe0>
10004da8:	28800417 	ldw	r2,16(r5)
10004dac:	10002326 	beq	r2,zero,10004e3c <__sfvwrite_r+0xe0>
10004db0:	1880008c 	andi	r2,r3,2
10004db4:	9c400017 	ldw	r17,0(r19)
10004db8:	10003126 	beq	r2,zero,10004e80 <__sfvwrite_r+0x124>
10004dbc:	0029883a 	mov	r20,zero
10004dc0:	0025883a 	mov	r18,zero
10004dc4:	05810004 	movi	r22,1024
10004dc8:	a00d883a 	mov	r6,r20
10004dcc:	a809883a 	mov	r4,r21
10004dd0:	90002526 	beq	r18,zero,10004e68 <__sfvwrite_r+0x10c>
10004dd4:	900f883a 	mov	r7,r18
10004dd8:	81400717 	ldw	r5,28(r16)
10004ddc:	b480012e 	bgeu	r22,r18,10004de4 <__sfvwrite_r+0x88>
10004de0:	01c10004 	movi	r7,1024
10004de4:	80800917 	ldw	r2,36(r16)
10004de8:	103ee83a 	callr	r2
10004dec:	0080510e 	bge	zero,r2,10004f34 <__sfvwrite_r+0x1d8>
10004df0:	98c00217 	ldw	r3,8(r19)
10004df4:	a0a9883a 	add	r20,r20,r2
10004df8:	90a5c83a 	sub	r18,r18,r2
10004dfc:	1885c83a 	sub	r2,r3,r2
10004e00:	98800215 	stw	r2,8(r19)
10004e04:	103ff01e 	bne	r2,zero,10004dc8 <__alt_data_end+0xf8004dc8>
10004e08:	0005883a 	mov	r2,zero
10004e0c:	dfc00b17 	ldw	ra,44(sp)
10004e10:	df000a17 	ldw	fp,40(sp)
10004e14:	ddc00917 	ldw	r23,36(sp)
10004e18:	dd800817 	ldw	r22,32(sp)
10004e1c:	dd400717 	ldw	r21,28(sp)
10004e20:	dd000617 	ldw	r20,24(sp)
10004e24:	dcc00517 	ldw	r19,20(sp)
10004e28:	dc800417 	ldw	r18,16(sp)
10004e2c:	dc400317 	ldw	r17,12(sp)
10004e30:	dc000217 	ldw	r16,8(sp)
10004e34:	dec00c04 	addi	sp,sp,48
10004e38:	f800283a 	ret
10004e3c:	a809883a 	mov	r4,r21
10004e40:	800b883a 	mov	r5,r16
10004e44:	00028bc0 	call	100028bc <__swsetup_r>
10004e48:	80c0030b 	ldhu	r3,12(r16)
10004e4c:	103fd826 	beq	r2,zero,10004db0 <__alt_data_end+0xf8004db0>
10004e50:	18c01014 	ori	r3,r3,64
10004e54:	80c0030d 	sth	r3,12(r16)
10004e58:	00c00244 	movi	r3,9
10004e5c:	00bfffc4 	movi	r2,-1
10004e60:	a8c00015 	stw	r3,0(r21)
10004e64:	003fe906 	br	10004e0c <__alt_data_end+0xf8004e0c>
10004e68:	8d000017 	ldw	r20,0(r17)
10004e6c:	8c800117 	ldw	r18,4(r17)
10004e70:	8c400204 	addi	r17,r17,8
10004e74:	003fd406 	br	10004dc8 <__alt_data_end+0xf8004dc8>
10004e78:	0005883a 	mov	r2,zero
10004e7c:	f800283a 	ret
10004e80:	1880004c 	andi	r2,r3,1
10004e84:	1000301e 	bne	r2,zero,10004f48 <__sfvwrite_r+0x1ec>
10004e88:	002f883a 	mov	r23,zero
10004e8c:	0025883a 	mov	r18,zero
10004e90:	90001c26 	beq	r18,zero,10004f04 <__sfvwrite_r+0x1a8>
10004e94:	1880800c 	andi	r2,r3,512
10004e98:	85000217 	ldw	r20,8(r16)
10004e9c:	10006c26 	beq	r2,zero,10005050 <__sfvwrite_r+0x2f4>
10004ea0:	a02d883a 	mov	r22,r20
10004ea4:	95008536 	bltu	r18,r20,100050bc <__sfvwrite_r+0x360>
10004ea8:	1881200c 	andi	r2,r3,1152
10004eac:	10009d1e 	bne	r2,zero,10005124 <__sfvwrite_r+0x3c8>
10004eb0:	81000017 	ldw	r4,0(r16)
10004eb4:	a039883a 	mov	fp,r20
10004eb8:	9029883a 	mov	r20,r18
10004ebc:	b80b883a 	mov	r5,r23
10004ec0:	b00d883a 	mov	r6,r22
10004ec4:	0005fd00 	call	10005fd0 <memmove>
10004ec8:	80c00217 	ldw	r3,8(r16)
10004ecc:	81000017 	ldw	r4,0(r16)
10004ed0:	9005883a 	mov	r2,r18
10004ed4:	1f39c83a 	sub	fp,r3,fp
10004ed8:	258f883a 	add	r7,r4,r22
10004edc:	87000215 	stw	fp,8(r16)
10004ee0:	81c00015 	stw	r7,0(r16)
10004ee4:	98c00217 	ldw	r3,8(r19)
10004ee8:	b8af883a 	add	r23,r23,r2
10004eec:	90a5c83a 	sub	r18,r18,r2
10004ef0:	1d05c83a 	sub	r2,r3,r20
10004ef4:	98800215 	stw	r2,8(r19)
10004ef8:	103fc326 	beq	r2,zero,10004e08 <__alt_data_end+0xf8004e08>
10004efc:	80c0030b 	ldhu	r3,12(r16)
10004f00:	903fe41e 	bne	r18,zero,10004e94 <__alt_data_end+0xf8004e94>
10004f04:	8dc00017 	ldw	r23,0(r17)
10004f08:	8c800117 	ldw	r18,4(r17)
10004f0c:	8c400204 	addi	r17,r17,8
10004f10:	003fdf06 	br	10004e90 <__alt_data_end+0xf8004e90>
10004f14:	00072980 	call	10007298 <_realloc_r>
10004f18:	102d883a 	mov	r22,r2
10004f1c:	1000a01e 	bne	r2,zero,100051a0 <__sfvwrite_r+0x444>
10004f20:	81400417 	ldw	r5,16(r16)
10004f24:	a809883a 	mov	r4,r21
10004f28:	0004a6c0 	call	10004a6c <_free_r>
10004f2c:	00800304 	movi	r2,12
10004f30:	a8800015 	stw	r2,0(r21)
10004f34:	80c0030b 	ldhu	r3,12(r16)
10004f38:	00bfffc4 	movi	r2,-1
10004f3c:	18c01014 	ori	r3,r3,64
10004f40:	80c0030d 	sth	r3,12(r16)
10004f44:	003fb106 	br	10004e0c <__alt_data_end+0xf8004e0c>
10004f48:	0029883a 	mov	r20,zero
10004f4c:	0011883a 	mov	r8,zero
10004f50:	0039883a 	mov	fp,zero
10004f54:	0025883a 	mov	r18,zero
10004f58:	90001f26 	beq	r18,zero,10004fd8 <__sfvwrite_r+0x27c>
10004f5c:	40006826 	beq	r8,zero,10005100 <__sfvwrite_r+0x3a4>
10004f60:	a02f883a 	mov	r23,r20
10004f64:	9500012e 	bgeu	r18,r20,10004f6c <__sfvwrite_r+0x210>
10004f68:	902f883a 	mov	r23,r18
10004f6c:	81000017 	ldw	r4,0(r16)
10004f70:	80800417 	ldw	r2,16(r16)
10004f74:	b82d883a 	mov	r22,r23
10004f78:	81800217 	ldw	r6,8(r16)
10004f7c:	81c00517 	ldw	r7,20(r16)
10004f80:	1100022e 	bgeu	r2,r4,10004f8c <__sfvwrite_r+0x230>
10004f84:	31c7883a 	add	r3,r6,r7
10004f88:	1dc01816 	blt	r3,r23,10004fec <__sfvwrite_r+0x290>
10004f8c:	b9c03f16 	blt	r23,r7,1000508c <__sfvwrite_r+0x330>
10004f90:	80800917 	ldw	r2,36(r16)
10004f94:	81400717 	ldw	r5,28(r16)
10004f98:	a809883a 	mov	r4,r21
10004f9c:	da000115 	stw	r8,4(sp)
10004fa0:	e00d883a 	mov	r6,fp
10004fa4:	103ee83a 	callr	r2
10004fa8:	102d883a 	mov	r22,r2
10004fac:	da000117 	ldw	r8,4(sp)
10004fb0:	00bfe00e 	bge	zero,r2,10004f34 <__alt_data_end+0xf8004f34>
10004fb4:	a5a9c83a 	sub	r20,r20,r22
10004fb8:	a0001f26 	beq	r20,zero,10005038 <__sfvwrite_r+0x2dc>
10004fbc:	98800217 	ldw	r2,8(r19)
10004fc0:	e5b9883a 	add	fp,fp,r22
10004fc4:	95a5c83a 	sub	r18,r18,r22
10004fc8:	15adc83a 	sub	r22,r2,r22
10004fcc:	9d800215 	stw	r22,8(r19)
10004fd0:	b03f8d26 	beq	r22,zero,10004e08 <__alt_data_end+0xf8004e08>
10004fd4:	903fe11e 	bne	r18,zero,10004f5c <__alt_data_end+0xf8004f5c>
10004fd8:	8f000017 	ldw	fp,0(r17)
10004fdc:	8c800117 	ldw	r18,4(r17)
10004fe0:	0011883a 	mov	r8,zero
10004fe4:	8c400204 	addi	r17,r17,8
10004fe8:	003fdb06 	br	10004f58 <__alt_data_end+0xf8004f58>
10004fec:	180d883a 	mov	r6,r3
10004ff0:	e00b883a 	mov	r5,fp
10004ff4:	da000115 	stw	r8,4(sp)
10004ff8:	d8c00015 	stw	r3,0(sp)
10004ffc:	0005fd00 	call	10005fd0 <memmove>
10005000:	d8c00017 	ldw	r3,0(sp)
10005004:	80800017 	ldw	r2,0(r16)
10005008:	a809883a 	mov	r4,r21
1000500c:	800b883a 	mov	r5,r16
10005010:	10c5883a 	add	r2,r2,r3
10005014:	80800015 	stw	r2,0(r16)
10005018:	d8c00015 	stw	r3,0(sp)
1000501c:	000433c0 	call	1000433c <_fflush_r>
10005020:	d8c00017 	ldw	r3,0(sp)
10005024:	da000117 	ldw	r8,4(sp)
10005028:	103fc21e 	bne	r2,zero,10004f34 <__alt_data_end+0xf8004f34>
1000502c:	182d883a 	mov	r22,r3
10005030:	a5a9c83a 	sub	r20,r20,r22
10005034:	a03fe11e 	bne	r20,zero,10004fbc <__alt_data_end+0xf8004fbc>
10005038:	a809883a 	mov	r4,r21
1000503c:	800b883a 	mov	r5,r16
10005040:	000433c0 	call	1000433c <_fflush_r>
10005044:	103fbb1e 	bne	r2,zero,10004f34 <__alt_data_end+0xf8004f34>
10005048:	0011883a 	mov	r8,zero
1000504c:	003fdb06 	br	10004fbc <__alt_data_end+0xf8004fbc>
10005050:	81000017 	ldw	r4,0(r16)
10005054:	80800417 	ldw	r2,16(r16)
10005058:	1100012e 	bgeu	r2,r4,10005060 <__sfvwrite_r+0x304>
1000505c:	a4805a36 	bltu	r20,r18,100051c8 <__sfvwrite_r+0x46c>
10005060:	81c00517 	ldw	r7,20(r16)
10005064:	91c01a36 	bltu	r18,r7,100050d0 <__sfvwrite_r+0x374>
10005068:	80800917 	ldw	r2,36(r16)
1000506c:	81400717 	ldw	r5,28(r16)
10005070:	a809883a 	mov	r4,r21
10005074:	b80d883a 	mov	r6,r23
10005078:	103ee83a 	callr	r2
1000507c:	1029883a 	mov	r20,r2
10005080:	00bfac0e 	bge	zero,r2,10004f34 <__alt_data_end+0xf8004f34>
10005084:	a005883a 	mov	r2,r20
10005088:	003f9606 	br	10004ee4 <__alt_data_end+0xf8004ee4>
1000508c:	b80d883a 	mov	r6,r23
10005090:	e00b883a 	mov	r5,fp
10005094:	da000115 	stw	r8,4(sp)
10005098:	0005fd00 	call	10005fd0 <memmove>
1000509c:	80800217 	ldw	r2,8(r16)
100050a0:	80c00017 	ldw	r3,0(r16)
100050a4:	da000117 	ldw	r8,4(sp)
100050a8:	15c5c83a 	sub	r2,r2,r23
100050ac:	1def883a 	add	r23,r3,r23
100050b0:	80800215 	stw	r2,8(r16)
100050b4:	85c00015 	stw	r23,0(r16)
100050b8:	003fbe06 	br	10004fb4 <__alt_data_end+0xf8004fb4>
100050bc:	81000017 	ldw	r4,0(r16)
100050c0:	9039883a 	mov	fp,r18
100050c4:	9029883a 	mov	r20,r18
100050c8:	902d883a 	mov	r22,r18
100050cc:	003f7b06 	br	10004ebc <__alt_data_end+0xf8004ebc>
100050d0:	b80b883a 	mov	r5,r23
100050d4:	900d883a 	mov	r6,r18
100050d8:	0005fd00 	call	10005fd0 <memmove>
100050dc:	80c00217 	ldw	r3,8(r16)
100050e0:	80800017 	ldw	r2,0(r16)
100050e4:	9029883a 	mov	r20,r18
100050e8:	1c87c83a 	sub	r3,r3,r18
100050ec:	1485883a 	add	r2,r2,r18
100050f0:	80800015 	stw	r2,0(r16)
100050f4:	80c00215 	stw	r3,8(r16)
100050f8:	9005883a 	mov	r2,r18
100050fc:	003f7906 	br	10004ee4 <__alt_data_end+0xf8004ee4>
10005100:	e009883a 	mov	r4,fp
10005104:	01400284 	movi	r5,10
10005108:	900d883a 	mov	r6,r18
1000510c:	0005db00 	call	10005db0 <memchr>
10005110:	10003826 	beq	r2,zero,100051f4 <__sfvwrite_r+0x498>
10005114:	10800044 	addi	r2,r2,1
10005118:	1729c83a 	sub	r20,r2,fp
1000511c:	02000044 	movi	r8,1
10005120:	003f8f06 	br	10004f60 <__alt_data_end+0xf8004f60>
10005124:	80800517 	ldw	r2,20(r16)
10005128:	81400417 	ldw	r5,16(r16)
1000512c:	87000017 	ldw	fp,0(r16)
10005130:	10a9883a 	add	r20,r2,r2
10005134:	a085883a 	add	r2,r20,r2
10005138:	1028d7fa 	srli	r20,r2,31
1000513c:	e179c83a 	sub	fp,fp,r5
10005140:	e1000044 	addi	r4,fp,1
10005144:	a085883a 	add	r2,r20,r2
10005148:	1029d07a 	srai	r20,r2,1
1000514c:	2485883a 	add	r2,r4,r18
10005150:	a00d883a 	mov	r6,r20
10005154:	a080022e 	bgeu	r20,r2,10005160 <__sfvwrite_r+0x404>
10005158:	1029883a 	mov	r20,r2
1000515c:	100d883a 	mov	r6,r2
10005160:	18c1000c 	andi	r3,r3,1024
10005164:	a809883a 	mov	r4,r21
10005168:	183f6a26 	beq	r3,zero,10004f14 <__alt_data_end+0xf8004f14>
1000516c:	300b883a 	mov	r5,r6
10005170:	00056080 	call	10005608 <_malloc_r>
10005174:	102d883a 	mov	r22,r2
10005178:	103f6c26 	beq	r2,zero,10004f2c <__alt_data_end+0xf8004f2c>
1000517c:	81400417 	ldw	r5,16(r16)
10005180:	1009883a 	mov	r4,r2
10005184:	e00d883a 	mov	r6,fp
10005188:	0005e980 	call	10005e98 <memcpy>
1000518c:	8080030b 	ldhu	r2,12(r16)
10005190:	00fedfc4 	movi	r3,-1153
10005194:	10c4703a 	and	r2,r2,r3
10005198:	10802014 	ori	r2,r2,128
1000519c:	8080030d 	sth	r2,12(r16)
100051a0:	b709883a 	add	r4,r22,fp
100051a4:	a707c83a 	sub	r3,r20,fp
100051a8:	85800415 	stw	r22,16(r16)
100051ac:	85000515 	stw	r20,20(r16)
100051b0:	81000015 	stw	r4,0(r16)
100051b4:	9039883a 	mov	fp,r18
100051b8:	80c00215 	stw	r3,8(r16)
100051bc:	9029883a 	mov	r20,r18
100051c0:	902d883a 	mov	r22,r18
100051c4:	003f3d06 	br	10004ebc <__alt_data_end+0xf8004ebc>
100051c8:	b80b883a 	mov	r5,r23
100051cc:	a00d883a 	mov	r6,r20
100051d0:	0005fd00 	call	10005fd0 <memmove>
100051d4:	80800017 	ldw	r2,0(r16)
100051d8:	a809883a 	mov	r4,r21
100051dc:	800b883a 	mov	r5,r16
100051e0:	1505883a 	add	r2,r2,r20
100051e4:	80800015 	stw	r2,0(r16)
100051e8:	000433c0 	call	1000433c <_fflush_r>
100051ec:	103fa526 	beq	r2,zero,10005084 <__alt_data_end+0xf8005084>
100051f0:	003f5006 	br	10004f34 <__alt_data_end+0xf8004f34>
100051f4:	95000044 	addi	r20,r18,1
100051f8:	02000044 	movi	r8,1
100051fc:	003f5806 	br	10004f60 <__alt_data_end+0xf8004f60>

10005200 <_fwalk>:
10005200:	defff804 	addi	sp,sp,-32
10005204:	dd400515 	stw	r21,20(sp)
10005208:	2540b804 	addi	r21,r4,736
1000520c:	dd800615 	stw	r22,24(sp)
10005210:	dd000415 	stw	r20,16(sp)
10005214:	dfc00715 	stw	ra,28(sp)
10005218:	dcc00315 	stw	r19,12(sp)
1000521c:	dc800215 	stw	r18,8(sp)
10005220:	dc400115 	stw	r17,4(sp)
10005224:	dc000015 	stw	r16,0(sp)
10005228:	2829883a 	mov	r20,r5
1000522c:	002d883a 	mov	r22,zero
10005230:	00049080 	call	10004908 <__sfp_lock_acquire>
10005234:	a8001426 	beq	r21,zero,10005288 <_fwalk+0x88>
10005238:	04ffffc4 	movi	r19,-1
1000523c:	ac400117 	ldw	r17,4(r21)
10005240:	ac800217 	ldw	r18,8(r21)
10005244:	8c7fffc4 	addi	r17,r17,-1
10005248:	88000d16 	blt	r17,zero,10005280 <_fwalk+0x80>
1000524c:	94000304 	addi	r16,r18,12
10005250:	94800384 	addi	r18,r18,14
10005254:	80c0000f 	ldh	r3,0(r16)
10005258:	8c7fffc4 	addi	r17,r17,-1
1000525c:	813ffd04 	addi	r4,r16,-12
10005260:	18000426 	beq	r3,zero,10005274 <_fwalk+0x74>
10005264:	90c0000f 	ldh	r3,0(r18)
10005268:	1cc00226 	beq	r3,r19,10005274 <_fwalk+0x74>
1000526c:	a03ee83a 	callr	r20
10005270:	b0acb03a 	or	r22,r22,r2
10005274:	84001a04 	addi	r16,r16,104
10005278:	94801a04 	addi	r18,r18,104
1000527c:	8cfff51e 	bne	r17,r19,10005254 <__alt_data_end+0xf8005254>
10005280:	ad400017 	ldw	r21,0(r21)
10005284:	a83fed1e 	bne	r21,zero,1000523c <__alt_data_end+0xf800523c>
10005288:	000490c0 	call	1000490c <__sfp_lock_release>
1000528c:	b005883a 	mov	r2,r22
10005290:	dfc00717 	ldw	ra,28(sp)
10005294:	dd800617 	ldw	r22,24(sp)
10005298:	dd400517 	ldw	r21,20(sp)
1000529c:	dd000417 	ldw	r20,16(sp)
100052a0:	dcc00317 	ldw	r19,12(sp)
100052a4:	dc800217 	ldw	r18,8(sp)
100052a8:	dc400117 	ldw	r17,4(sp)
100052ac:	dc000017 	ldw	r16,0(sp)
100052b0:	dec00804 	addi	sp,sp,32
100052b4:	f800283a 	ret

100052b8 <_fwalk_reent>:
100052b8:	defff804 	addi	sp,sp,-32
100052bc:	dd400515 	stw	r21,20(sp)
100052c0:	2540b804 	addi	r21,r4,736
100052c4:	dd800615 	stw	r22,24(sp)
100052c8:	dd000415 	stw	r20,16(sp)
100052cc:	dcc00315 	stw	r19,12(sp)
100052d0:	dfc00715 	stw	ra,28(sp)
100052d4:	dc800215 	stw	r18,8(sp)
100052d8:	dc400115 	stw	r17,4(sp)
100052dc:	dc000015 	stw	r16,0(sp)
100052e0:	2027883a 	mov	r19,r4
100052e4:	2829883a 	mov	r20,r5
100052e8:	002d883a 	mov	r22,zero
100052ec:	00049080 	call	10004908 <__sfp_lock_acquire>
100052f0:	a8001326 	beq	r21,zero,10005340 <_fwalk_reent+0x88>
100052f4:	04bfffc4 	movi	r18,-1
100052f8:	ac400117 	ldw	r17,4(r21)
100052fc:	ac000217 	ldw	r16,8(r21)
10005300:	8c7fffc4 	addi	r17,r17,-1
10005304:	88000c16 	blt	r17,zero,10005338 <_fwalk_reent+0x80>
10005308:	84000304 	addi	r16,r16,12
1000530c:	80c0000f 	ldh	r3,0(r16)
10005310:	8c7fffc4 	addi	r17,r17,-1
10005314:	817ffd04 	addi	r5,r16,-12
10005318:	18000526 	beq	r3,zero,10005330 <_fwalk_reent+0x78>
1000531c:	80c0008f 	ldh	r3,2(r16)
10005320:	9809883a 	mov	r4,r19
10005324:	1c800226 	beq	r3,r18,10005330 <_fwalk_reent+0x78>
10005328:	a03ee83a 	callr	r20
1000532c:	b0acb03a 	or	r22,r22,r2
10005330:	84001a04 	addi	r16,r16,104
10005334:	8cbff51e 	bne	r17,r18,1000530c <__alt_data_end+0xf800530c>
10005338:	ad400017 	ldw	r21,0(r21)
1000533c:	a83fee1e 	bne	r21,zero,100052f8 <__alt_data_end+0xf80052f8>
10005340:	000490c0 	call	1000490c <__sfp_lock_release>
10005344:	b005883a 	mov	r2,r22
10005348:	dfc00717 	ldw	ra,28(sp)
1000534c:	dd800617 	ldw	r22,24(sp)
10005350:	dd400517 	ldw	r21,20(sp)
10005354:	dd000417 	ldw	r20,16(sp)
10005358:	dcc00317 	ldw	r19,12(sp)
1000535c:	dc800217 	ldw	r18,8(sp)
10005360:	dc400117 	ldw	r17,4(sp)
10005364:	dc000017 	ldw	r16,0(sp)
10005368:	dec00804 	addi	sp,sp,32
1000536c:	f800283a 	ret

10005370 <_setlocale_r>:
10005370:	30001b26 	beq	r6,zero,100053e0 <_setlocale_r+0x70>
10005374:	01440074 	movhi	r5,4097
10005378:	defffe04 	addi	sp,sp,-8
1000537c:	297ddc04 	addi	r5,r5,-2192
10005380:	3009883a 	mov	r4,r6
10005384:	dc000015 	stw	r16,0(sp)
10005388:	dfc00115 	stw	ra,4(sp)
1000538c:	3021883a 	mov	r16,r6
10005390:	0007a3c0 	call	10007a3c <strcmp>
10005394:	1000061e 	bne	r2,zero,100053b0 <_setlocale_r+0x40>
10005398:	00840074 	movhi	r2,4097
1000539c:	10bddb04 	addi	r2,r2,-2196
100053a0:	dfc00117 	ldw	ra,4(sp)
100053a4:	dc000017 	ldw	r16,0(sp)
100053a8:	dec00204 	addi	sp,sp,8
100053ac:	f800283a 	ret
100053b0:	01440074 	movhi	r5,4097
100053b4:	297ddb04 	addi	r5,r5,-2196
100053b8:	8009883a 	mov	r4,r16
100053bc:	0007a3c0 	call	10007a3c <strcmp>
100053c0:	103ff526 	beq	r2,zero,10005398 <__alt_data_end+0xf8005398>
100053c4:	01440074 	movhi	r5,4097
100053c8:	297dc604 	addi	r5,r5,-2280
100053cc:	8009883a 	mov	r4,r16
100053d0:	0007a3c0 	call	10007a3c <strcmp>
100053d4:	103ff026 	beq	r2,zero,10005398 <__alt_data_end+0xf8005398>
100053d8:	0005883a 	mov	r2,zero
100053dc:	003ff006 	br	100053a0 <__alt_data_end+0xf80053a0>
100053e0:	00840074 	movhi	r2,4097
100053e4:	10bddb04 	addi	r2,r2,-2196
100053e8:	f800283a 	ret

100053ec <__locale_charset>:
100053ec:	00840074 	movhi	r2,4097
100053f0:	10bf8e04 	addi	r2,r2,-456
100053f4:	f800283a 	ret

100053f8 <__locale_mb_cur_max>:
100053f8:	00840074 	movhi	r2,4097
100053fc:	10852a04 	addi	r2,r2,5288
10005400:	10800017 	ldw	r2,0(r2)
10005404:	f800283a 	ret

10005408 <__locale_msgcharset>:
10005408:	00840074 	movhi	r2,4097
1000540c:	10bf8604 	addi	r2,r2,-488
10005410:	f800283a 	ret

10005414 <__locale_cjk_lang>:
10005414:	0005883a 	mov	r2,zero
10005418:	f800283a 	ret

1000541c <_localeconv_r>:
1000541c:	00840074 	movhi	r2,4097
10005420:	10bf9604 	addi	r2,r2,-424
10005424:	f800283a 	ret

10005428 <setlocale>:
10005428:	00c40074 	movhi	r3,4097
1000542c:	18c52904 	addi	r3,r3,5284
10005430:	2005883a 	mov	r2,r4
10005434:	19000017 	ldw	r4,0(r3)
10005438:	280d883a 	mov	r6,r5
1000543c:	100b883a 	mov	r5,r2
10005440:	00053701 	jmpi	10005370 <_setlocale_r>

10005444 <localeconv>:
10005444:	00840074 	movhi	r2,4097
10005448:	10bf9604 	addi	r2,r2,-424
1000544c:	f800283a 	ret

10005450 <__smakebuf_r>:
10005450:	2880030b 	ldhu	r2,12(r5)
10005454:	10c0008c 	andi	r3,r2,2
10005458:	1800401e 	bne	r3,zero,1000555c <__smakebuf_r+0x10c>
1000545c:	deffec04 	addi	sp,sp,-80
10005460:	dc000f15 	stw	r16,60(sp)
10005464:	2821883a 	mov	r16,r5
10005468:	2940038f 	ldh	r5,14(r5)
1000546c:	dc401015 	stw	r17,64(sp)
10005470:	dfc01315 	stw	ra,76(sp)
10005474:	dcc01215 	stw	r19,72(sp)
10005478:	dc801115 	stw	r18,68(sp)
1000547c:	2023883a 	mov	r17,r4
10005480:	28001b16 	blt	r5,zero,100054f0 <__smakebuf_r+0xa0>
10005484:	d80d883a 	mov	r6,sp
10005488:	00094b40 	call	100094b4 <_fstat_r>
1000548c:	10001716 	blt	r2,zero,100054ec <__smakebuf_r+0x9c>
10005490:	d8800117 	ldw	r2,4(sp)
10005494:	00e00014 	movui	r3,32768
10005498:	10bc000c 	andi	r2,r2,61440
1000549c:	10c03726 	beq	r2,r3,1000557c <__smakebuf_r+0x12c>
100054a0:	80c0030b 	ldhu	r3,12(r16)
100054a4:	18c20014 	ori	r3,r3,2048
100054a8:	80c0030d 	sth	r3,12(r16)
100054ac:	00c80004 	movi	r3,8192
100054b0:	10c03c1e 	bne	r2,r3,100055a4 <__smakebuf_r+0x154>
100054b4:	8140038f 	ldh	r5,14(r16)
100054b8:	8809883a 	mov	r4,r17
100054bc:	000950c0 	call	1000950c <_isatty_r>
100054c0:	10004e26 	beq	r2,zero,100055fc <__smakebuf_r+0x1ac>
100054c4:	8080030b 	ldhu	r2,12(r16)
100054c8:	04c00044 	movi	r19,1
100054cc:	80c010c4 	addi	r3,r16,67
100054d0:	14c4b03a 	or	r2,r2,r19
100054d4:	8080030d 	sth	r2,12(r16)
100054d8:	80c00015 	stw	r3,0(r16)
100054dc:	80c00415 	stw	r3,16(r16)
100054e0:	84c00515 	stw	r19,20(r16)
100054e4:	04810004 	movi	r18,1024
100054e8:	00000706 	br	10005508 <__smakebuf_r+0xb8>
100054ec:	8080030b 	ldhu	r2,12(r16)
100054f0:	10c0200c 	andi	r3,r2,128
100054f4:	18001f1e 	bne	r3,zero,10005574 <__smakebuf_r+0x124>
100054f8:	04810004 	movi	r18,1024
100054fc:	10820014 	ori	r2,r2,2048
10005500:	8080030d 	sth	r2,12(r16)
10005504:	0027883a 	mov	r19,zero
10005508:	8809883a 	mov	r4,r17
1000550c:	900b883a 	mov	r5,r18
10005510:	00056080 	call	10005608 <_malloc_r>
10005514:	10002e26 	beq	r2,zero,100055d0 <__smakebuf_r+0x180>
10005518:	80c0030b 	ldhu	r3,12(r16)
1000551c:	01040034 	movhi	r4,4096
10005520:	21116904 	addi	r4,r4,17828
10005524:	89000f15 	stw	r4,60(r17)
10005528:	18c02014 	ori	r3,r3,128
1000552c:	80c0030d 	sth	r3,12(r16)
10005530:	80800015 	stw	r2,0(r16)
10005534:	80800415 	stw	r2,16(r16)
10005538:	84800515 	stw	r18,20(r16)
1000553c:	98001c1e 	bne	r19,zero,100055b0 <__smakebuf_r+0x160>
10005540:	dfc01317 	ldw	ra,76(sp)
10005544:	dcc01217 	ldw	r19,72(sp)
10005548:	dc801117 	ldw	r18,68(sp)
1000554c:	dc401017 	ldw	r17,64(sp)
10005550:	dc000f17 	ldw	r16,60(sp)
10005554:	dec01404 	addi	sp,sp,80
10005558:	f800283a 	ret
1000555c:	288010c4 	addi	r2,r5,67
10005560:	28800015 	stw	r2,0(r5)
10005564:	28800415 	stw	r2,16(r5)
10005568:	00800044 	movi	r2,1
1000556c:	28800515 	stw	r2,20(r5)
10005570:	f800283a 	ret
10005574:	04801004 	movi	r18,64
10005578:	003fe006 	br	100054fc <__alt_data_end+0xf80054fc>
1000557c:	81000a17 	ldw	r4,40(r16)
10005580:	00c40034 	movhi	r3,4096
10005584:	18de7604 	addi	r3,r3,31192
10005588:	20ffc51e 	bne	r4,r3,100054a0 <__alt_data_end+0xf80054a0>
1000558c:	80c0030b 	ldhu	r3,12(r16)
10005590:	01010004 	movi	r4,1024
10005594:	81001315 	stw	r4,76(r16)
10005598:	1906b03a 	or	r3,r3,r4
1000559c:	80c0030d 	sth	r3,12(r16)
100055a0:	003fc206 	br	100054ac <__alt_data_end+0xf80054ac>
100055a4:	0027883a 	mov	r19,zero
100055a8:	04810004 	movi	r18,1024
100055ac:	003fd606 	br	10005508 <__alt_data_end+0xf8005508>
100055b0:	8140038f 	ldh	r5,14(r16)
100055b4:	8809883a 	mov	r4,r17
100055b8:	000950c0 	call	1000950c <_isatty_r>
100055bc:	103fe026 	beq	r2,zero,10005540 <__alt_data_end+0xf8005540>
100055c0:	8080030b 	ldhu	r2,12(r16)
100055c4:	10800054 	ori	r2,r2,1
100055c8:	8080030d 	sth	r2,12(r16)
100055cc:	003fdc06 	br	10005540 <__alt_data_end+0xf8005540>
100055d0:	8080030b 	ldhu	r2,12(r16)
100055d4:	10c0800c 	andi	r3,r2,512
100055d8:	183fd91e 	bne	r3,zero,10005540 <__alt_data_end+0xf8005540>
100055dc:	10800094 	ori	r2,r2,2
100055e0:	80c010c4 	addi	r3,r16,67
100055e4:	8080030d 	sth	r2,12(r16)
100055e8:	00800044 	movi	r2,1
100055ec:	80c00015 	stw	r3,0(r16)
100055f0:	80c00415 	stw	r3,16(r16)
100055f4:	80800515 	stw	r2,20(r16)
100055f8:	003fd106 	br	10005540 <__alt_data_end+0xf8005540>
100055fc:	04c00044 	movi	r19,1
10005600:	04810004 	movi	r18,1024
10005604:	003fc006 	br	10005508 <__alt_data_end+0xf8005508>

10005608 <_malloc_r>:
10005608:	defff504 	addi	sp,sp,-44
1000560c:	dc800315 	stw	r18,12(sp)
10005610:	dfc00a15 	stw	ra,40(sp)
10005614:	df000915 	stw	fp,36(sp)
10005618:	ddc00815 	stw	r23,32(sp)
1000561c:	dd800715 	stw	r22,28(sp)
10005620:	dd400615 	stw	r21,24(sp)
10005624:	dd000515 	stw	r20,20(sp)
10005628:	dcc00415 	stw	r19,16(sp)
1000562c:	dc400215 	stw	r17,8(sp)
10005630:	dc000115 	stw	r16,4(sp)
10005634:	288002c4 	addi	r2,r5,11
10005638:	00c00584 	movi	r3,22
1000563c:	2025883a 	mov	r18,r4
10005640:	18802a2e 	bgeu	r3,r2,100056ec <_malloc_r+0xe4>
10005644:	047ffe04 	movi	r17,-8
10005648:	1462703a 	and	r17,r2,r17
1000564c:	88009e16 	blt	r17,zero,100058c8 <_malloc_r+0x2c0>
10005650:	89409d36 	bltu	r17,r5,100058c8 <_malloc_r+0x2c0>
10005654:	000d4ec0 	call	1000d4ec <__malloc_lock>
10005658:	00807dc4 	movi	r2,503
1000565c:	14402736 	bltu	r2,r17,100056fc <_malloc_r+0xf4>
10005660:	8806d0fa 	srli	r3,r17,3
10005664:	04c40074 	movhi	r19,4097
10005668:	9cffa404 	addi	r19,r19,-368
1000566c:	18c5883a 	add	r2,r3,r3
10005670:	1085883a 	add	r2,r2,r2
10005674:	1085883a 	add	r2,r2,r2
10005678:	9885883a 	add	r2,r19,r2
1000567c:	14000317 	ldw	r16,12(r2)
10005680:	80814a26 	beq	r16,r2,10005bac <_malloc_r+0x5a4>
10005684:	80c00117 	ldw	r3,4(r16)
10005688:	81000317 	ldw	r4,12(r16)
1000568c:	00bfff04 	movi	r2,-4
10005690:	1884703a 	and	r2,r3,r2
10005694:	81400217 	ldw	r5,8(r16)
10005698:	8085883a 	add	r2,r16,r2
1000569c:	10c00117 	ldw	r3,4(r2)
100056a0:	29000315 	stw	r4,12(r5)
100056a4:	21400215 	stw	r5,8(r4)
100056a8:	18c00054 	ori	r3,r3,1
100056ac:	10c00115 	stw	r3,4(r2)
100056b0:	9009883a 	mov	r4,r18
100056b4:	000d50c0 	call	1000d50c <__malloc_unlock>
100056b8:	80800204 	addi	r2,r16,8
100056bc:	dfc00a17 	ldw	ra,40(sp)
100056c0:	df000917 	ldw	fp,36(sp)
100056c4:	ddc00817 	ldw	r23,32(sp)
100056c8:	dd800717 	ldw	r22,28(sp)
100056cc:	dd400617 	ldw	r21,24(sp)
100056d0:	dd000517 	ldw	r20,20(sp)
100056d4:	dcc00417 	ldw	r19,16(sp)
100056d8:	dc800317 	ldw	r18,12(sp)
100056dc:	dc400217 	ldw	r17,8(sp)
100056e0:	dc000117 	ldw	r16,4(sp)
100056e4:	dec00b04 	addi	sp,sp,44
100056e8:	f800283a 	ret
100056ec:	04400404 	movi	r17,16
100056f0:	89407536 	bltu	r17,r5,100058c8 <_malloc_r+0x2c0>
100056f4:	000d4ec0 	call	1000d4ec <__malloc_lock>
100056f8:	003fd906 	br	10005660 <__alt_data_end+0xf8005660>
100056fc:	8806d27a 	srli	r3,r17,9
10005700:	18007526 	beq	r3,zero,100058d8 <_malloc_r+0x2d0>
10005704:	00800104 	movi	r2,4
10005708:	10c0ef36 	bltu	r2,r3,10005ac8 <_malloc_r+0x4c0>
1000570c:	8806d1ba 	srli	r3,r17,6
10005710:	19c00e04 	addi	r7,r3,56
10005714:	39cb883a 	add	r5,r7,r7
10005718:	04c40074 	movhi	r19,4097
1000571c:	294b883a 	add	r5,r5,r5
10005720:	9cffa404 	addi	r19,r19,-368
10005724:	294b883a 	add	r5,r5,r5
10005728:	994b883a 	add	r5,r19,r5
1000572c:	2c000317 	ldw	r16,12(r5)
10005730:	2c000e26 	beq	r5,r16,1000576c <_malloc_r+0x164>
10005734:	80800117 	ldw	r2,4(r16)
10005738:	01bfff04 	movi	r6,-4
1000573c:	010003c4 	movi	r4,15
10005740:	1184703a 	and	r2,r2,r6
10005744:	1447c83a 	sub	r3,r2,r17
10005748:	20c00716 	blt	r4,r3,10005768 <_malloc_r+0x160>
1000574c:	1800650e 	bge	r3,zero,100058e4 <_malloc_r+0x2dc>
10005750:	84000317 	ldw	r16,12(r16)
10005754:	2c000526 	beq	r5,r16,1000576c <_malloc_r+0x164>
10005758:	80800117 	ldw	r2,4(r16)
1000575c:	1184703a 	and	r2,r2,r6
10005760:	1447c83a 	sub	r3,r2,r17
10005764:	20fff90e 	bge	r4,r3,1000574c <__alt_data_end+0xf800574c>
10005768:	39ffffc4 	addi	r7,r7,-1
1000576c:	38c00044 	addi	r3,r7,1
10005770:	01840074 	movhi	r6,4097
10005774:	9c000417 	ldw	r16,16(r19)
10005778:	31bfa404 	addi	r6,r6,-368
1000577c:	32400204 	addi	r9,r6,8
10005780:	82410326 	beq	r16,r9,10005b90 <_malloc_r+0x588>
10005784:	81000117 	ldw	r4,4(r16)
10005788:	00bfff04 	movi	r2,-4
1000578c:	208e703a 	and	r7,r4,r2
10005790:	3c45c83a 	sub	r2,r7,r17
10005794:	010003c4 	movi	r4,15
10005798:	2080ee16 	blt	r4,r2,10005b54 <_malloc_r+0x54c>
1000579c:	32400515 	stw	r9,20(r6)
100057a0:	32400415 	stw	r9,16(r6)
100057a4:	1000510e 	bge	r2,zero,100058ec <_malloc_r+0x2e4>
100057a8:	00807fc4 	movi	r2,511
100057ac:	11c0ce36 	bltu	r2,r7,10005ae8 <_malloc_r+0x4e0>
100057b0:	3808d0fa 	srli	r4,r7,3
100057b4:	01c00044 	movi	r7,1
100057b8:	30800117 	ldw	r2,4(r6)
100057bc:	210b883a 	add	r5,r4,r4
100057c0:	294b883a 	add	r5,r5,r5
100057c4:	2009d0ba 	srai	r4,r4,2
100057c8:	294b883a 	add	r5,r5,r5
100057cc:	298b883a 	add	r5,r5,r6
100057d0:	2a000217 	ldw	r8,8(r5)
100057d4:	3908983a 	sll	r4,r7,r4
100057d8:	81400315 	stw	r5,12(r16)
100057dc:	82000215 	stw	r8,8(r16)
100057e0:	2088b03a 	or	r4,r4,r2
100057e4:	2c000215 	stw	r16,8(r5)
100057e8:	31000115 	stw	r4,4(r6)
100057ec:	44000315 	stw	r16,12(r8)
100057f0:	1805d0ba 	srai	r2,r3,2
100057f4:	01400044 	movi	r5,1
100057f8:	288a983a 	sll	r5,r5,r2
100057fc:	21404336 	bltu	r4,r5,1000590c <_malloc_r+0x304>
10005800:	2144703a 	and	r2,r4,r5
10005804:	10000a1e 	bne	r2,zero,10005830 <_malloc_r+0x228>
10005808:	00bfff04 	movi	r2,-4
1000580c:	294b883a 	add	r5,r5,r5
10005810:	1886703a 	and	r3,r3,r2
10005814:	2144703a 	and	r2,r4,r5
10005818:	18c00104 	addi	r3,r3,4
1000581c:	1000041e 	bne	r2,zero,10005830 <_malloc_r+0x228>
10005820:	294b883a 	add	r5,r5,r5
10005824:	2144703a 	and	r2,r4,r5
10005828:	18c00104 	addi	r3,r3,4
1000582c:	103ffc26 	beq	r2,zero,10005820 <__alt_data_end+0xf8005820>
10005830:	023fff04 	movi	r8,-4
10005834:	01c003c4 	movi	r7,15
10005838:	18c5883a 	add	r2,r3,r3
1000583c:	1085883a 	add	r2,r2,r2
10005840:	1085883a 	add	r2,r2,r2
10005844:	9895883a 	add	r10,r19,r2
10005848:	52c00304 	addi	r11,r10,12
1000584c:	1819883a 	mov	r12,r3
10005850:	5c000017 	ldw	r16,0(r11)
10005854:	59bffd04 	addi	r6,r11,-12
10005858:	8180041e 	bne	r16,r6,1000586c <_malloc_r+0x264>
1000585c:	0000ce06 	br	10005b98 <_malloc_r+0x590>
10005860:	2000d70e 	bge	r4,zero,10005bc0 <_malloc_r+0x5b8>
10005864:	84000317 	ldw	r16,12(r16)
10005868:	8180cb26 	beq	r16,r6,10005b98 <_malloc_r+0x590>
1000586c:	80800117 	ldw	r2,4(r16)
10005870:	1204703a 	and	r2,r2,r8
10005874:	1449c83a 	sub	r4,r2,r17
10005878:	393ff90e 	bge	r7,r4,10005860 <__alt_data_end+0xf8005860>
1000587c:	80800317 	ldw	r2,12(r16)
10005880:	80c00217 	ldw	r3,8(r16)
10005884:	89400054 	ori	r5,r17,1
10005888:	81400115 	stw	r5,4(r16)
1000588c:	18800315 	stw	r2,12(r3)
10005890:	10c00215 	stw	r3,8(r2)
10005894:	8463883a 	add	r17,r16,r17
10005898:	9c400515 	stw	r17,20(r19)
1000589c:	9c400415 	stw	r17,16(r19)
100058a0:	20800054 	ori	r2,r4,1
100058a4:	88800115 	stw	r2,4(r17)
100058a8:	8a400315 	stw	r9,12(r17)
100058ac:	8a400215 	stw	r9,8(r17)
100058b0:	8923883a 	add	r17,r17,r4
100058b4:	89000015 	stw	r4,0(r17)
100058b8:	9009883a 	mov	r4,r18
100058bc:	000d50c0 	call	1000d50c <__malloc_unlock>
100058c0:	80800204 	addi	r2,r16,8
100058c4:	003f7d06 	br	100056bc <__alt_data_end+0xf80056bc>
100058c8:	00800304 	movi	r2,12
100058cc:	90800015 	stw	r2,0(r18)
100058d0:	0005883a 	mov	r2,zero
100058d4:	003f7906 	br	100056bc <__alt_data_end+0xf80056bc>
100058d8:	01401f84 	movi	r5,126
100058dc:	01c00fc4 	movi	r7,63
100058e0:	003f8d06 	br	10005718 <__alt_data_end+0xf8005718>
100058e4:	81000317 	ldw	r4,12(r16)
100058e8:	003f6a06 	br	10005694 <__alt_data_end+0xf8005694>
100058ec:	81c5883a 	add	r2,r16,r7
100058f0:	10c00117 	ldw	r3,4(r2)
100058f4:	9009883a 	mov	r4,r18
100058f8:	18c00054 	ori	r3,r3,1
100058fc:	10c00115 	stw	r3,4(r2)
10005900:	000d50c0 	call	1000d50c <__malloc_unlock>
10005904:	80800204 	addi	r2,r16,8
10005908:	003f6c06 	br	100056bc <__alt_data_end+0xf80056bc>
1000590c:	9c000217 	ldw	r16,8(r19)
10005910:	00bfff04 	movi	r2,-4
10005914:	85800117 	ldw	r22,4(r16)
10005918:	b0ac703a 	and	r22,r22,r2
1000591c:	b4400336 	bltu	r22,r17,1000592c <_malloc_r+0x324>
10005920:	b445c83a 	sub	r2,r22,r17
10005924:	00c003c4 	movi	r3,15
10005928:	18805d16 	blt	r3,r2,10005aa0 <_malloc_r+0x498>
1000592c:	05c40074 	movhi	r23,4097
10005930:	00840074 	movhi	r2,4097
10005934:	bdc52b04 	addi	r23,r23,5292
10005938:	108bf804 	addi	r2,r2,12256
1000593c:	15400017 	ldw	r21,0(r2)
10005940:	b9000017 	ldw	r4,0(r23)
10005944:	00ffffc4 	movi	r3,-1
10005948:	858d883a 	add	r6,r16,r22
1000594c:	8d6b883a 	add	r21,r17,r21
10005950:	20c0e426 	beq	r4,r3,10005ce4 <_malloc_r+0x6dc>
10005954:	ad4403c4 	addi	r21,r21,4111
10005958:	00fc0004 	movi	r3,-4096
1000595c:	a8ea703a 	and	r21,r21,r3
10005960:	9009883a 	mov	r4,r18
10005964:	a80b883a 	mov	r5,r21
10005968:	d9800015 	stw	r6,0(sp)
1000596c:	00078ac0 	call	100078ac <_sbrk_r>
10005970:	00ffffc4 	movi	r3,-1
10005974:	1029883a 	mov	r20,r2
10005978:	d9800017 	ldw	r6,0(sp)
1000597c:	10c0a426 	beq	r2,r3,10005c10 <_malloc_r+0x608>
10005980:	1180a236 	bltu	r2,r6,10005c0c <_malloc_r+0x604>
10005984:	07040074 	movhi	fp,4097
10005988:	e70c0104 	addi	fp,fp,12292
1000598c:	e0c00017 	ldw	r3,0(fp)
10005990:	a8c7883a 	add	r3,r21,r3
10005994:	e0c00015 	stw	r3,0(fp)
10005998:	3500da26 	beq	r6,r20,10005d04 <_malloc_r+0x6fc>
1000599c:	b9000017 	ldw	r4,0(r23)
100059a0:	00bfffc4 	movi	r2,-1
100059a4:	2080e426 	beq	r4,r2,10005d38 <_malloc_r+0x730>
100059a8:	a185c83a 	sub	r2,r20,r6
100059ac:	1885883a 	add	r2,r3,r2
100059b0:	e0800015 	stw	r2,0(fp)
100059b4:	a0c001cc 	andi	r3,r20,7
100059b8:	1800b526 	beq	r3,zero,10005c90 <_malloc_r+0x688>
100059bc:	a0e9c83a 	sub	r20,r20,r3
100059c0:	00840204 	movi	r2,4104
100059c4:	a5000204 	addi	r20,r20,8
100059c8:	10c7c83a 	sub	r3,r2,r3
100059cc:	a545883a 	add	r2,r20,r21
100059d0:	1083ffcc 	andi	r2,r2,4095
100059d4:	18abc83a 	sub	r21,r3,r2
100059d8:	9009883a 	mov	r4,r18
100059dc:	a80b883a 	mov	r5,r21
100059e0:	00078ac0 	call	100078ac <_sbrk_r>
100059e4:	00ffffc4 	movi	r3,-1
100059e8:	10c0d026 	beq	r2,r3,10005d2c <_malloc_r+0x724>
100059ec:	1507c83a 	sub	r3,r2,r20
100059f0:	a8c7883a 	add	r3,r21,r3
100059f4:	18c00054 	ori	r3,r3,1
100059f8:	e0800017 	ldw	r2,0(fp)
100059fc:	9d000215 	stw	r20,8(r19)
10005a00:	a0c00115 	stw	r3,4(r20)
10005a04:	a887883a 	add	r3,r21,r2
10005a08:	e0c00015 	stw	r3,0(fp)
10005a0c:	84c00e26 	beq	r16,r19,10005a48 <_malloc_r+0x440>
10005a10:	018003c4 	movi	r6,15
10005a14:	3580a02e 	bgeu	r6,r22,10005c98 <_malloc_r+0x690>
10005a18:	81400117 	ldw	r5,4(r16)
10005a1c:	013ffe04 	movi	r4,-8
10005a20:	b0bffd04 	addi	r2,r22,-12
10005a24:	1104703a 	and	r2,r2,r4
10005a28:	2900004c 	andi	r4,r5,1
10005a2c:	1108b03a 	or	r4,r2,r4
10005a30:	81000115 	stw	r4,4(r16)
10005a34:	01400144 	movi	r5,5
10005a38:	8089883a 	add	r4,r16,r2
10005a3c:	21400115 	stw	r5,4(r4)
10005a40:	21400215 	stw	r5,8(r4)
10005a44:	3080c036 	bltu	r6,r2,10005d48 <_malloc_r+0x740>
10005a48:	00840074 	movhi	r2,4097
10005a4c:	108bf704 	addi	r2,r2,12252
10005a50:	11000017 	ldw	r4,0(r2)
10005a54:	20c0012e 	bgeu	r4,r3,10005a5c <_malloc_r+0x454>
10005a58:	10c00015 	stw	r3,0(r2)
10005a5c:	00840074 	movhi	r2,4097
10005a60:	108bf604 	addi	r2,r2,12248
10005a64:	11000017 	ldw	r4,0(r2)
10005a68:	9c000217 	ldw	r16,8(r19)
10005a6c:	20c0012e 	bgeu	r4,r3,10005a74 <_malloc_r+0x46c>
10005a70:	10c00015 	stw	r3,0(r2)
10005a74:	80c00117 	ldw	r3,4(r16)
10005a78:	00bfff04 	movi	r2,-4
10005a7c:	1886703a 	and	r3,r3,r2
10005a80:	1c45c83a 	sub	r2,r3,r17
10005a84:	1c400236 	bltu	r3,r17,10005a90 <_malloc_r+0x488>
10005a88:	00c003c4 	movi	r3,15
10005a8c:	18800416 	blt	r3,r2,10005aa0 <_malloc_r+0x498>
10005a90:	9009883a 	mov	r4,r18
10005a94:	000d50c0 	call	1000d50c <__malloc_unlock>
10005a98:	0005883a 	mov	r2,zero
10005a9c:	003f0706 	br	100056bc <__alt_data_end+0xf80056bc>
10005aa0:	88c00054 	ori	r3,r17,1
10005aa4:	80c00115 	stw	r3,4(r16)
10005aa8:	8463883a 	add	r17,r16,r17
10005aac:	10800054 	ori	r2,r2,1
10005ab0:	9c400215 	stw	r17,8(r19)
10005ab4:	88800115 	stw	r2,4(r17)
10005ab8:	9009883a 	mov	r4,r18
10005abc:	000d50c0 	call	1000d50c <__malloc_unlock>
10005ac0:	80800204 	addi	r2,r16,8
10005ac4:	003efd06 	br	100056bc <__alt_data_end+0xf80056bc>
10005ac8:	00800504 	movi	r2,20
10005acc:	10c0482e 	bgeu	r2,r3,10005bf0 <_malloc_r+0x5e8>
10005ad0:	00801504 	movi	r2,84
10005ad4:	10c06836 	bltu	r2,r3,10005c78 <_malloc_r+0x670>
10005ad8:	8806d33a 	srli	r3,r17,12
10005adc:	19c01b84 	addi	r7,r3,110
10005ae0:	39cb883a 	add	r5,r7,r7
10005ae4:	003f0c06 	br	10005718 <__alt_data_end+0xf8005718>
10005ae8:	3804d27a 	srli	r2,r7,9
10005aec:	01000104 	movi	r4,4
10005af0:	2080422e 	bgeu	r4,r2,10005bfc <_malloc_r+0x5f4>
10005af4:	01000504 	movi	r4,20
10005af8:	20807c36 	bltu	r4,r2,10005cec <_malloc_r+0x6e4>
10005afc:	110016c4 	addi	r4,r2,91
10005b00:	210b883a 	add	r5,r4,r4
10005b04:	294b883a 	add	r5,r5,r5
10005b08:	294b883a 	add	r5,r5,r5
10005b0c:	994b883a 	add	r5,r19,r5
10005b10:	28800217 	ldw	r2,8(r5)
10005b14:	02040074 	movhi	r8,4097
10005b18:	423fa404 	addi	r8,r8,-368
10005b1c:	11406326 	beq	r2,r5,10005cac <_malloc_r+0x6a4>
10005b20:	01bfff04 	movi	r6,-4
10005b24:	11000117 	ldw	r4,4(r2)
10005b28:	2188703a 	and	r4,r4,r6
10005b2c:	3900022e 	bgeu	r7,r4,10005b38 <_malloc_r+0x530>
10005b30:	10800217 	ldw	r2,8(r2)
10005b34:	28bffb1e 	bne	r5,r2,10005b24 <__alt_data_end+0xf8005b24>
10005b38:	11800317 	ldw	r6,12(r2)
10005b3c:	99000117 	ldw	r4,4(r19)
10005b40:	81800315 	stw	r6,12(r16)
10005b44:	80800215 	stw	r2,8(r16)
10005b48:	34000215 	stw	r16,8(r6)
10005b4c:	14000315 	stw	r16,12(r2)
10005b50:	003f2706 	br	100057f0 <__alt_data_end+0xf80057f0>
10005b54:	88c00054 	ori	r3,r17,1
10005b58:	80c00115 	stw	r3,4(r16)
10005b5c:	8463883a 	add	r17,r16,r17
10005b60:	34400515 	stw	r17,20(r6)
10005b64:	34400415 	stw	r17,16(r6)
10005b68:	10c00054 	ori	r3,r2,1
10005b6c:	8a400315 	stw	r9,12(r17)
10005b70:	8a400215 	stw	r9,8(r17)
10005b74:	88c00115 	stw	r3,4(r17)
10005b78:	88a3883a 	add	r17,r17,r2
10005b7c:	88800015 	stw	r2,0(r17)
10005b80:	9009883a 	mov	r4,r18
10005b84:	000d50c0 	call	1000d50c <__malloc_unlock>
10005b88:	80800204 	addi	r2,r16,8
10005b8c:	003ecb06 	br	100056bc <__alt_data_end+0xf80056bc>
10005b90:	31000117 	ldw	r4,4(r6)
10005b94:	003f1606 	br	100057f0 <__alt_data_end+0xf80057f0>
10005b98:	63000044 	addi	r12,r12,1
10005b9c:	608000cc 	andi	r2,r12,3
10005ba0:	5ac00204 	addi	r11,r11,8
10005ba4:	103f2a1e 	bne	r2,zero,10005850 <__alt_data_end+0xf8005850>
10005ba8:	00002106 	br	10005c30 <_malloc_r+0x628>
10005bac:	80800204 	addi	r2,r16,8
10005bb0:	84000517 	ldw	r16,20(r16)
10005bb4:	143eb31e 	bne	r2,r16,10005684 <__alt_data_end+0xf8005684>
10005bb8:	18c00084 	addi	r3,r3,2
10005bbc:	003eec06 	br	10005770 <__alt_data_end+0xf8005770>
10005bc0:	8085883a 	add	r2,r16,r2
10005bc4:	10c00117 	ldw	r3,4(r2)
10005bc8:	81000317 	ldw	r4,12(r16)
10005bcc:	81400217 	ldw	r5,8(r16)
10005bd0:	18c00054 	ori	r3,r3,1
10005bd4:	10c00115 	stw	r3,4(r2)
10005bd8:	29000315 	stw	r4,12(r5)
10005bdc:	21400215 	stw	r5,8(r4)
10005be0:	9009883a 	mov	r4,r18
10005be4:	000d50c0 	call	1000d50c <__malloc_unlock>
10005be8:	80800204 	addi	r2,r16,8
10005bec:	003eb306 	br	100056bc <__alt_data_end+0xf80056bc>
10005bf0:	19c016c4 	addi	r7,r3,91
10005bf4:	39cb883a 	add	r5,r7,r7
10005bf8:	003ec706 	br	10005718 <__alt_data_end+0xf8005718>
10005bfc:	3804d1ba 	srli	r2,r7,6
10005c00:	11000e04 	addi	r4,r2,56
10005c04:	210b883a 	add	r5,r4,r4
10005c08:	003fbe06 	br	10005b04 <__alt_data_end+0xf8005b04>
10005c0c:	84ff5d26 	beq	r16,r19,10005984 <__alt_data_end+0xf8005984>
10005c10:	9c000217 	ldw	r16,8(r19)
10005c14:	00bfff04 	movi	r2,-4
10005c18:	80c00117 	ldw	r3,4(r16)
10005c1c:	1886703a 	and	r3,r3,r2
10005c20:	003f9706 	br	10005a80 <__alt_data_end+0xf8005a80>
10005c24:	52800017 	ldw	r10,0(r10)
10005c28:	18ffffc4 	addi	r3,r3,-1
10005c2c:	50805c1e 	bne	r10,r2,10005da0 <_malloc_r+0x798>
10005c30:	190000cc 	andi	r4,r3,3
10005c34:	50bffe04 	addi	r2,r10,-8
10005c38:	203ffa1e 	bne	r4,zero,10005c24 <__alt_data_end+0xf8005c24>
10005c3c:	98800117 	ldw	r2,4(r19)
10005c40:	0146303a 	nor	r3,zero,r5
10005c44:	1884703a 	and	r2,r3,r2
10005c48:	98800115 	stw	r2,4(r19)
10005c4c:	294b883a 	add	r5,r5,r5
10005c50:	117f2e36 	bltu	r2,r5,1000590c <__alt_data_end+0xf800590c>
10005c54:	283f2d26 	beq	r5,zero,1000590c <__alt_data_end+0xf800590c>
10005c58:	1146703a 	and	r3,r2,r5
10005c5c:	1800521e 	bne	r3,zero,10005da8 <_malloc_r+0x7a0>
10005c60:	6007883a 	mov	r3,r12
10005c64:	294b883a 	add	r5,r5,r5
10005c68:	1148703a 	and	r4,r2,r5
10005c6c:	18c00104 	addi	r3,r3,4
10005c70:	203ffc26 	beq	r4,zero,10005c64 <__alt_data_end+0xf8005c64>
10005c74:	003ef006 	br	10005838 <__alt_data_end+0xf8005838>
10005c78:	00805504 	movi	r2,340
10005c7c:	10c01336 	bltu	r2,r3,10005ccc <_malloc_r+0x6c4>
10005c80:	8806d3fa 	srli	r3,r17,15
10005c84:	19c01dc4 	addi	r7,r3,119
10005c88:	39cb883a 	add	r5,r7,r7
10005c8c:	003ea206 	br	10005718 <__alt_data_end+0xf8005718>
10005c90:	00c40004 	movi	r3,4096
10005c94:	003f4d06 	br	100059cc <__alt_data_end+0xf80059cc>
10005c98:	00800044 	movi	r2,1
10005c9c:	a0800115 	stw	r2,4(r20)
10005ca0:	a021883a 	mov	r16,r20
10005ca4:	0007883a 	mov	r3,zero
10005ca8:	003f7506 	br	10005a80 <__alt_data_end+0xf8005a80>
10005cac:	200bd0ba 	srai	r5,r4,2
10005cb0:	01800044 	movi	r6,1
10005cb4:	41000117 	ldw	r4,4(r8)
10005cb8:	314a983a 	sll	r5,r6,r5
10005cbc:	100d883a 	mov	r6,r2
10005cc0:	2908b03a 	or	r4,r5,r4
10005cc4:	41000115 	stw	r4,4(r8)
10005cc8:	003f9d06 	br	10005b40 <__alt_data_end+0xf8005b40>
10005ccc:	00815504 	movi	r2,1364
10005cd0:	10c01336 	bltu	r2,r3,10005d20 <_malloc_r+0x718>
10005cd4:	8806d4ba 	srli	r3,r17,18
10005cd8:	19c01f04 	addi	r7,r3,124
10005cdc:	39cb883a 	add	r5,r7,r7
10005ce0:	003e8d06 	br	10005718 <__alt_data_end+0xf8005718>
10005ce4:	ad400404 	addi	r21,r21,16
10005ce8:	003f1d06 	br	10005960 <__alt_data_end+0xf8005960>
10005cec:	01001504 	movi	r4,84
10005cf0:	20801c36 	bltu	r4,r2,10005d64 <_malloc_r+0x75c>
10005cf4:	3804d33a 	srli	r2,r7,12
10005cf8:	11001b84 	addi	r4,r2,110
10005cfc:	210b883a 	add	r5,r4,r4
10005d00:	003f8006 	br	10005b04 <__alt_data_end+0xf8005b04>
10005d04:	3083ffcc 	andi	r2,r6,4095
10005d08:	103f241e 	bne	r2,zero,1000599c <__alt_data_end+0xf800599c>
10005d0c:	99000217 	ldw	r4,8(r19)
10005d10:	ad85883a 	add	r2,r21,r22
10005d14:	10800054 	ori	r2,r2,1
10005d18:	20800115 	stw	r2,4(r4)
10005d1c:	003f4a06 	br	10005a48 <__alt_data_end+0xf8005a48>
10005d20:	01403f04 	movi	r5,252
10005d24:	01c01f84 	movi	r7,126
10005d28:	003e7b06 	br	10005718 <__alt_data_end+0xf8005718>
10005d2c:	00c00044 	movi	r3,1
10005d30:	002b883a 	mov	r21,zero
10005d34:	003f3006 	br	100059f8 <__alt_data_end+0xf80059f8>
10005d38:	00840074 	movhi	r2,4097
10005d3c:	10852b04 	addi	r2,r2,5292
10005d40:	15000015 	stw	r20,0(r2)
10005d44:	003f1b06 	br	100059b4 <__alt_data_end+0xf80059b4>
10005d48:	9009883a 	mov	r4,r18
10005d4c:	81400204 	addi	r5,r16,8
10005d50:	0004a6c0 	call	10004a6c <_free_r>
10005d54:	00840074 	movhi	r2,4097
10005d58:	108c0104 	addi	r2,r2,12292
10005d5c:	10c00017 	ldw	r3,0(r2)
10005d60:	003f3906 	br	10005a48 <__alt_data_end+0xf8005a48>
10005d64:	01005504 	movi	r4,340
10005d68:	20800436 	bltu	r4,r2,10005d7c <_malloc_r+0x774>
10005d6c:	3804d3fa 	srli	r2,r7,15
10005d70:	11001dc4 	addi	r4,r2,119
10005d74:	210b883a 	add	r5,r4,r4
10005d78:	003f6206 	br	10005b04 <__alt_data_end+0xf8005b04>
10005d7c:	01015504 	movi	r4,1364
10005d80:	20800436 	bltu	r4,r2,10005d94 <_malloc_r+0x78c>
10005d84:	3804d4ba 	srli	r2,r7,18
10005d88:	11001f04 	addi	r4,r2,124
10005d8c:	210b883a 	add	r5,r4,r4
10005d90:	003f5c06 	br	10005b04 <__alt_data_end+0xf8005b04>
10005d94:	01403f04 	movi	r5,252
10005d98:	01001f84 	movi	r4,126
10005d9c:	003f5906 	br	10005b04 <__alt_data_end+0xf8005b04>
10005da0:	98800117 	ldw	r2,4(r19)
10005da4:	003fa906 	br	10005c4c <__alt_data_end+0xf8005c4c>
10005da8:	6007883a 	mov	r3,r12
10005dac:	003ea206 	br	10005838 <__alt_data_end+0xf8005838>

10005db0 <memchr>:
10005db0:	208000cc 	andi	r2,r4,3
10005db4:	280f883a 	mov	r7,r5
10005db8:	10003526 	beq	r2,zero,10005e90 <memchr+0xe0>
10005dbc:	30bfffc4 	addi	r2,r6,-1
10005dc0:	30001b26 	beq	r6,zero,10005e30 <memchr+0x80>
10005dc4:	21800003 	ldbu	r6,0(r4)
10005dc8:	28c03fcc 	andi	r3,r5,255
10005dcc:	30c01a26 	beq	r6,r3,10005e38 <memchr+0x88>
10005dd0:	180d883a 	mov	r6,r3
10005dd4:	00000406 	br	10005de8 <memchr+0x38>
10005dd8:	10001526 	beq	r2,zero,10005e30 <memchr+0x80>
10005ddc:	20c00003 	ldbu	r3,0(r4)
10005de0:	10bfffc4 	addi	r2,r2,-1
10005de4:	19801426 	beq	r3,r6,10005e38 <memchr+0x88>
10005de8:	21000044 	addi	r4,r4,1
10005dec:	20c000cc 	andi	r3,r4,3
10005df0:	183ff91e 	bne	r3,zero,10005dd8 <__alt_data_end+0xf8005dd8>
10005df4:	024000c4 	movi	r9,3
10005df8:	48801136 	bltu	r9,r2,10005e40 <memchr+0x90>
10005dfc:	10000c26 	beq	r2,zero,10005e30 <memchr+0x80>
10005e00:	20c00003 	ldbu	r3,0(r4)
10005e04:	29403fcc 	andi	r5,r5,255
10005e08:	19400b26 	beq	r3,r5,10005e38 <memchr+0x88>
10005e0c:	20c00044 	addi	r3,r4,1
10005e10:	2085883a 	add	r2,r4,r2
10005e14:	39803fcc 	andi	r6,r7,255
10005e18:	00000306 	br	10005e28 <memchr+0x78>
10005e1c:	18c00044 	addi	r3,r3,1
10005e20:	197fffc3 	ldbu	r5,-1(r3)
10005e24:	29800426 	beq	r5,r6,10005e38 <memchr+0x88>
10005e28:	1809883a 	mov	r4,r3
10005e2c:	18bffb1e 	bne	r3,r2,10005e1c <__alt_data_end+0xf8005e1c>
10005e30:	0005883a 	mov	r2,zero
10005e34:	f800283a 	ret
10005e38:	2005883a 	mov	r2,r4
10005e3c:	f800283a 	ret
10005e40:	28c03fcc 	andi	r3,r5,255
10005e44:	1810923a 	slli	r8,r3,8
10005e48:	02ffbff4 	movhi	r11,65279
10005e4c:	02a02074 	movhi	r10,32897
10005e50:	40c6b03a 	or	r3,r8,r3
10005e54:	1810943a 	slli	r8,r3,16
10005e58:	5affbfc4 	addi	r11,r11,-257
10005e5c:	52a02004 	addi	r10,r10,-32640
10005e60:	40d0b03a 	or	r8,r8,r3
10005e64:	20c00017 	ldw	r3,0(r4)
10005e68:	40c6f03a 	xor	r3,r8,r3
10005e6c:	1acd883a 	add	r6,r3,r11
10005e70:	00c6303a 	nor	r3,zero,r3
10005e74:	30c6703a 	and	r3,r6,r3
10005e78:	1a86703a 	and	r3,r3,r10
10005e7c:	183fdf1e 	bne	r3,zero,10005dfc <__alt_data_end+0xf8005dfc>
10005e80:	10bfff04 	addi	r2,r2,-4
10005e84:	21000104 	addi	r4,r4,4
10005e88:	48bff636 	bltu	r9,r2,10005e64 <__alt_data_end+0xf8005e64>
10005e8c:	003fdb06 	br	10005dfc <__alt_data_end+0xf8005dfc>
10005e90:	3005883a 	mov	r2,r6
10005e94:	003fd706 	br	10005df4 <__alt_data_end+0xf8005df4>

10005e98 <memcpy>:
10005e98:	deffff04 	addi	sp,sp,-4
10005e9c:	dc000015 	stw	r16,0(sp)
10005ea0:	00c003c4 	movi	r3,15
10005ea4:	2005883a 	mov	r2,r4
10005ea8:	1980432e 	bgeu	r3,r6,10005fb8 <memcpy+0x120>
10005eac:	2146b03a 	or	r3,r4,r5
10005eb0:	18c000cc 	andi	r3,r3,3
10005eb4:	1800421e 	bne	r3,zero,10005fc0 <memcpy+0x128>
10005eb8:	343ffc04 	addi	r16,r6,-16
10005ebc:	8020d13a 	srli	r16,r16,4
10005ec0:	28c00104 	addi	r3,r5,4
10005ec4:	23400104 	addi	r13,r4,4
10005ec8:	801e913a 	slli	r15,r16,4
10005ecc:	2b000204 	addi	r12,r5,8
10005ed0:	22c00204 	addi	r11,r4,8
10005ed4:	7bc00504 	addi	r15,r15,20
10005ed8:	2a800304 	addi	r10,r5,12
10005edc:	22400304 	addi	r9,r4,12
10005ee0:	2bdf883a 	add	r15,r5,r15
10005ee4:	2811883a 	mov	r8,r5
10005ee8:	200f883a 	mov	r7,r4
10005eec:	41000017 	ldw	r4,0(r8)
10005ef0:	39c00404 	addi	r7,r7,16
10005ef4:	18c00404 	addi	r3,r3,16
10005ef8:	393ffc15 	stw	r4,-16(r7)
10005efc:	1bbffc17 	ldw	r14,-16(r3)
10005f00:	6b400404 	addi	r13,r13,16
10005f04:	5ac00404 	addi	r11,r11,16
10005f08:	6bbffc15 	stw	r14,-16(r13)
10005f0c:	63800017 	ldw	r14,0(r12)
10005f10:	4a400404 	addi	r9,r9,16
10005f14:	42000404 	addi	r8,r8,16
10005f18:	5bbffc15 	stw	r14,-16(r11)
10005f1c:	53800017 	ldw	r14,0(r10)
10005f20:	63000404 	addi	r12,r12,16
10005f24:	52800404 	addi	r10,r10,16
10005f28:	4bbffc15 	stw	r14,-16(r9)
10005f2c:	1bffef1e 	bne	r3,r15,10005eec <__alt_data_end+0xf8005eec>
10005f30:	81c00044 	addi	r7,r16,1
10005f34:	380e913a 	slli	r7,r7,4
10005f38:	310003cc 	andi	r4,r6,15
10005f3c:	02c000c4 	movi	r11,3
10005f40:	11c7883a 	add	r3,r2,r7
10005f44:	29cb883a 	add	r5,r5,r7
10005f48:	59001f2e 	bgeu	r11,r4,10005fc8 <memcpy+0x130>
10005f4c:	1813883a 	mov	r9,r3
10005f50:	2811883a 	mov	r8,r5
10005f54:	200f883a 	mov	r7,r4
10005f58:	42800017 	ldw	r10,0(r8)
10005f5c:	4a400104 	addi	r9,r9,4
10005f60:	39ffff04 	addi	r7,r7,-4
10005f64:	4abfff15 	stw	r10,-4(r9)
10005f68:	42000104 	addi	r8,r8,4
10005f6c:	59fffa36 	bltu	r11,r7,10005f58 <__alt_data_end+0xf8005f58>
10005f70:	213fff04 	addi	r4,r4,-4
10005f74:	2008d0ba 	srli	r4,r4,2
10005f78:	318000cc 	andi	r6,r6,3
10005f7c:	21000044 	addi	r4,r4,1
10005f80:	2109883a 	add	r4,r4,r4
10005f84:	2109883a 	add	r4,r4,r4
10005f88:	1907883a 	add	r3,r3,r4
10005f8c:	290b883a 	add	r5,r5,r4
10005f90:	30000626 	beq	r6,zero,10005fac <memcpy+0x114>
10005f94:	198d883a 	add	r6,r3,r6
10005f98:	29c00003 	ldbu	r7,0(r5)
10005f9c:	18c00044 	addi	r3,r3,1
10005fa0:	29400044 	addi	r5,r5,1
10005fa4:	19ffffc5 	stb	r7,-1(r3)
10005fa8:	19bffb1e 	bne	r3,r6,10005f98 <__alt_data_end+0xf8005f98>
10005fac:	dc000017 	ldw	r16,0(sp)
10005fb0:	dec00104 	addi	sp,sp,4
10005fb4:	f800283a 	ret
10005fb8:	2007883a 	mov	r3,r4
10005fbc:	003ff406 	br	10005f90 <__alt_data_end+0xf8005f90>
10005fc0:	2007883a 	mov	r3,r4
10005fc4:	003ff306 	br	10005f94 <__alt_data_end+0xf8005f94>
10005fc8:	200d883a 	mov	r6,r4
10005fcc:	003ff006 	br	10005f90 <__alt_data_end+0xf8005f90>

10005fd0 <memmove>:
10005fd0:	2005883a 	mov	r2,r4
10005fd4:	29000b2e 	bgeu	r5,r4,10006004 <memmove+0x34>
10005fd8:	298f883a 	add	r7,r5,r6
10005fdc:	21c0092e 	bgeu	r4,r7,10006004 <memmove+0x34>
10005fe0:	2187883a 	add	r3,r4,r6
10005fe4:	198bc83a 	sub	r5,r3,r6
10005fe8:	30004b26 	beq	r6,zero,10006118 <memmove+0x148>
10005fec:	39ffffc4 	addi	r7,r7,-1
10005ff0:	39000003 	ldbu	r4,0(r7)
10005ff4:	18ffffc4 	addi	r3,r3,-1
10005ff8:	19000005 	stb	r4,0(r3)
10005ffc:	197ffb1e 	bne	r3,r5,10005fec <__alt_data_end+0xf8005fec>
10006000:	f800283a 	ret
10006004:	00c003c4 	movi	r3,15
10006008:	1980412e 	bgeu	r3,r6,10006110 <memmove+0x140>
1000600c:	1146b03a 	or	r3,r2,r5
10006010:	18c000cc 	andi	r3,r3,3
10006014:	1800411e 	bne	r3,zero,1000611c <memmove+0x14c>
10006018:	33fffc04 	addi	r15,r6,-16
1000601c:	781ed13a 	srli	r15,r15,4
10006020:	28c00104 	addi	r3,r5,4
10006024:	13400104 	addi	r13,r2,4
10006028:	781c913a 	slli	r14,r15,4
1000602c:	2b000204 	addi	r12,r5,8
10006030:	12c00204 	addi	r11,r2,8
10006034:	73800504 	addi	r14,r14,20
10006038:	2a800304 	addi	r10,r5,12
1000603c:	12400304 	addi	r9,r2,12
10006040:	2b9d883a 	add	r14,r5,r14
10006044:	2811883a 	mov	r8,r5
10006048:	100f883a 	mov	r7,r2
1000604c:	41000017 	ldw	r4,0(r8)
10006050:	39c00404 	addi	r7,r7,16
10006054:	18c00404 	addi	r3,r3,16
10006058:	393ffc15 	stw	r4,-16(r7)
1000605c:	193ffc17 	ldw	r4,-16(r3)
10006060:	6b400404 	addi	r13,r13,16
10006064:	5ac00404 	addi	r11,r11,16
10006068:	693ffc15 	stw	r4,-16(r13)
1000606c:	61000017 	ldw	r4,0(r12)
10006070:	4a400404 	addi	r9,r9,16
10006074:	42000404 	addi	r8,r8,16
10006078:	593ffc15 	stw	r4,-16(r11)
1000607c:	51000017 	ldw	r4,0(r10)
10006080:	63000404 	addi	r12,r12,16
10006084:	52800404 	addi	r10,r10,16
10006088:	493ffc15 	stw	r4,-16(r9)
1000608c:	1bbfef1e 	bne	r3,r14,1000604c <__alt_data_end+0xf800604c>
10006090:	79000044 	addi	r4,r15,1
10006094:	2008913a 	slli	r4,r4,4
10006098:	328003cc 	andi	r10,r6,15
1000609c:	02c000c4 	movi	r11,3
100060a0:	1107883a 	add	r3,r2,r4
100060a4:	290b883a 	add	r5,r5,r4
100060a8:	5a801e2e 	bgeu	r11,r10,10006124 <memmove+0x154>
100060ac:	1813883a 	mov	r9,r3
100060b0:	2811883a 	mov	r8,r5
100060b4:	500f883a 	mov	r7,r10
100060b8:	41000017 	ldw	r4,0(r8)
100060bc:	4a400104 	addi	r9,r9,4
100060c0:	39ffff04 	addi	r7,r7,-4
100060c4:	493fff15 	stw	r4,-4(r9)
100060c8:	42000104 	addi	r8,r8,4
100060cc:	59fffa36 	bltu	r11,r7,100060b8 <__alt_data_end+0xf80060b8>
100060d0:	513fff04 	addi	r4,r10,-4
100060d4:	2008d0ba 	srli	r4,r4,2
100060d8:	318000cc 	andi	r6,r6,3
100060dc:	21000044 	addi	r4,r4,1
100060e0:	2109883a 	add	r4,r4,r4
100060e4:	2109883a 	add	r4,r4,r4
100060e8:	1907883a 	add	r3,r3,r4
100060ec:	290b883a 	add	r5,r5,r4
100060f0:	30000926 	beq	r6,zero,10006118 <memmove+0x148>
100060f4:	198d883a 	add	r6,r3,r6
100060f8:	29c00003 	ldbu	r7,0(r5)
100060fc:	18c00044 	addi	r3,r3,1
10006100:	29400044 	addi	r5,r5,1
10006104:	19ffffc5 	stb	r7,-1(r3)
10006108:	19bffb1e 	bne	r3,r6,100060f8 <__alt_data_end+0xf80060f8>
1000610c:	f800283a 	ret
10006110:	1007883a 	mov	r3,r2
10006114:	003ff606 	br	100060f0 <__alt_data_end+0xf80060f0>
10006118:	f800283a 	ret
1000611c:	1007883a 	mov	r3,r2
10006120:	003ff406 	br	100060f4 <__alt_data_end+0xf80060f4>
10006124:	500d883a 	mov	r6,r10
10006128:	003ff106 	br	100060f0 <__alt_data_end+0xf80060f0>

1000612c <memset>:
1000612c:	20c000cc 	andi	r3,r4,3
10006130:	2005883a 	mov	r2,r4
10006134:	18004326 	beq	r3,zero,10006244 <memset+0x118>
10006138:	31ffffc4 	addi	r7,r6,-1
1000613c:	30004026 	beq	r6,zero,10006240 <memset+0x114>
10006140:	2813883a 	mov	r9,r5
10006144:	200d883a 	mov	r6,r4
10006148:	2007883a 	mov	r3,r4
1000614c:	00000406 	br	10006160 <memset+0x34>
10006150:	3a3fffc4 	addi	r8,r7,-1
10006154:	31800044 	addi	r6,r6,1
10006158:	38003926 	beq	r7,zero,10006240 <memset+0x114>
1000615c:	400f883a 	mov	r7,r8
10006160:	18c00044 	addi	r3,r3,1
10006164:	32400005 	stb	r9,0(r6)
10006168:	1a0000cc 	andi	r8,r3,3
1000616c:	403ff81e 	bne	r8,zero,10006150 <__alt_data_end+0xf8006150>
10006170:	010000c4 	movi	r4,3
10006174:	21c02d2e 	bgeu	r4,r7,1000622c <memset+0x100>
10006178:	29803fcc 	andi	r6,r5,255
1000617c:	3008923a 	slli	r4,r6,8
10006180:	218cb03a 	or	r6,r4,r6
10006184:	3008943a 	slli	r4,r6,16
10006188:	218cb03a 	or	r6,r4,r6
1000618c:	010003c4 	movi	r4,15
10006190:	21c0182e 	bgeu	r4,r7,100061f4 <memset+0xc8>
10006194:	3b3ffc04 	addi	r12,r7,-16
10006198:	6018d13a 	srli	r12,r12,4
1000619c:	1a000104 	addi	r8,r3,4
100061a0:	1ac00204 	addi	r11,r3,8
100061a4:	6008913a 	slli	r4,r12,4
100061a8:	1a800304 	addi	r10,r3,12
100061ac:	1813883a 	mov	r9,r3
100061b0:	21000504 	addi	r4,r4,20
100061b4:	1909883a 	add	r4,r3,r4
100061b8:	49800015 	stw	r6,0(r9)
100061bc:	41800015 	stw	r6,0(r8)
100061c0:	59800015 	stw	r6,0(r11)
100061c4:	51800015 	stw	r6,0(r10)
100061c8:	42000404 	addi	r8,r8,16
100061cc:	4a400404 	addi	r9,r9,16
100061d0:	5ac00404 	addi	r11,r11,16
100061d4:	52800404 	addi	r10,r10,16
100061d8:	413ff71e 	bne	r8,r4,100061b8 <__alt_data_end+0xf80061b8>
100061dc:	63000044 	addi	r12,r12,1
100061e0:	6018913a 	slli	r12,r12,4
100061e4:	39c003cc 	andi	r7,r7,15
100061e8:	010000c4 	movi	r4,3
100061ec:	1b07883a 	add	r3,r3,r12
100061f0:	21c00e2e 	bgeu	r4,r7,1000622c <memset+0x100>
100061f4:	1813883a 	mov	r9,r3
100061f8:	3811883a 	mov	r8,r7
100061fc:	010000c4 	movi	r4,3
10006200:	49800015 	stw	r6,0(r9)
10006204:	423fff04 	addi	r8,r8,-4
10006208:	4a400104 	addi	r9,r9,4
1000620c:	223ffc36 	bltu	r4,r8,10006200 <__alt_data_end+0xf8006200>
10006210:	393fff04 	addi	r4,r7,-4
10006214:	2008d0ba 	srli	r4,r4,2
10006218:	39c000cc 	andi	r7,r7,3
1000621c:	21000044 	addi	r4,r4,1
10006220:	2109883a 	add	r4,r4,r4
10006224:	2109883a 	add	r4,r4,r4
10006228:	1907883a 	add	r3,r3,r4
1000622c:	38000426 	beq	r7,zero,10006240 <memset+0x114>
10006230:	19cf883a 	add	r7,r3,r7
10006234:	19400005 	stb	r5,0(r3)
10006238:	18c00044 	addi	r3,r3,1
1000623c:	19fffd1e 	bne	r3,r7,10006234 <__alt_data_end+0xf8006234>
10006240:	f800283a 	ret
10006244:	2007883a 	mov	r3,r4
10006248:	300f883a 	mov	r7,r6
1000624c:	003fc806 	br	10006170 <__alt_data_end+0xf8006170>

10006250 <_Balloc>:
10006250:	20801317 	ldw	r2,76(r4)
10006254:	defffc04 	addi	sp,sp,-16
10006258:	dc400115 	stw	r17,4(sp)
1000625c:	dc000015 	stw	r16,0(sp)
10006260:	dfc00315 	stw	ra,12(sp)
10006264:	dc800215 	stw	r18,8(sp)
10006268:	2023883a 	mov	r17,r4
1000626c:	2821883a 	mov	r16,r5
10006270:	10000f26 	beq	r2,zero,100062b0 <_Balloc+0x60>
10006274:	8407883a 	add	r3,r16,r16
10006278:	18c7883a 	add	r3,r3,r3
1000627c:	10c7883a 	add	r3,r2,r3
10006280:	18800017 	ldw	r2,0(r3)
10006284:	10001126 	beq	r2,zero,100062cc <_Balloc+0x7c>
10006288:	11000017 	ldw	r4,0(r2)
1000628c:	19000015 	stw	r4,0(r3)
10006290:	10000415 	stw	zero,16(r2)
10006294:	10000315 	stw	zero,12(r2)
10006298:	dfc00317 	ldw	ra,12(sp)
1000629c:	dc800217 	ldw	r18,8(sp)
100062a0:	dc400117 	ldw	r17,4(sp)
100062a4:	dc000017 	ldw	r16,0(sp)
100062a8:	dec00404 	addi	sp,sp,16
100062ac:	f800283a 	ret
100062b0:	01400104 	movi	r5,4
100062b4:	01800844 	movi	r6,33
100062b8:	00090ec0 	call	100090ec <_calloc_r>
100062bc:	88801315 	stw	r2,76(r17)
100062c0:	103fec1e 	bne	r2,zero,10006274 <__alt_data_end+0xf8006274>
100062c4:	0005883a 	mov	r2,zero
100062c8:	003ff306 	br	10006298 <__alt_data_end+0xf8006298>
100062cc:	01400044 	movi	r5,1
100062d0:	2c24983a 	sll	r18,r5,r16
100062d4:	8809883a 	mov	r4,r17
100062d8:	91800144 	addi	r6,r18,5
100062dc:	318d883a 	add	r6,r6,r6
100062e0:	318d883a 	add	r6,r6,r6
100062e4:	00090ec0 	call	100090ec <_calloc_r>
100062e8:	103ff626 	beq	r2,zero,100062c4 <__alt_data_end+0xf80062c4>
100062ec:	14000115 	stw	r16,4(r2)
100062f0:	14800215 	stw	r18,8(r2)
100062f4:	003fe606 	br	10006290 <__alt_data_end+0xf8006290>

100062f8 <_Bfree>:
100062f8:	28000826 	beq	r5,zero,1000631c <_Bfree+0x24>
100062fc:	28c00117 	ldw	r3,4(r5)
10006300:	20801317 	ldw	r2,76(r4)
10006304:	18c7883a 	add	r3,r3,r3
10006308:	18c7883a 	add	r3,r3,r3
1000630c:	10c5883a 	add	r2,r2,r3
10006310:	10c00017 	ldw	r3,0(r2)
10006314:	28c00015 	stw	r3,0(r5)
10006318:	11400015 	stw	r5,0(r2)
1000631c:	f800283a 	ret

10006320 <__multadd>:
10006320:	defff704 	addi	sp,sp,-36
10006324:	dc800215 	stw	r18,8(sp)
10006328:	2c800417 	ldw	r18,16(r5)
1000632c:	ddc00715 	stw	r23,28(sp)
10006330:	dd800615 	stw	r22,24(sp)
10006334:	dd000415 	stw	r20,16(sp)
10006338:	dcc00315 	stw	r19,12(sp)
1000633c:	dc400115 	stw	r17,4(sp)
10006340:	dc000015 	stw	r16,0(sp)
10006344:	dfc00815 	stw	ra,32(sp)
10006348:	dd400515 	stw	r21,20(sp)
1000634c:	2827883a 	mov	r19,r5
10006350:	2029883a 	mov	r20,r4
10006354:	3023883a 	mov	r17,r6
10006358:	3821883a 	mov	r16,r7
1000635c:	2d800504 	addi	r22,r5,20
10006360:	002f883a 	mov	r23,zero
10006364:	b5400017 	ldw	r21,0(r22)
10006368:	880b883a 	mov	r5,r17
1000636c:	bdc00044 	addi	r23,r23,1
10006370:	a93fffcc 	andi	r4,r21,65535
10006374:	00005a80 	call	100005a8 <__mulsi3>
10006378:	1421883a 	add	r16,r2,r16
1000637c:	a808d43a 	srli	r4,r21,16
10006380:	802ad43a 	srli	r21,r16,16
10006384:	880b883a 	mov	r5,r17
10006388:	00005a80 	call	100005a8 <__mulsi3>
1000638c:	a88f883a 	add	r7,r21,r2
10006390:	3804943a 	slli	r2,r7,16
10006394:	80ffffcc 	andi	r3,r16,65535
10006398:	b5800104 	addi	r22,r22,4
1000639c:	10c7883a 	add	r3,r2,r3
100063a0:	b0ffff15 	stw	r3,-4(r22)
100063a4:	3820d43a 	srli	r16,r7,16
100063a8:	bcbfee16 	blt	r23,r18,10006364 <__alt_data_end+0xf8006364>
100063ac:	80000926 	beq	r16,zero,100063d4 <__multadd+0xb4>
100063b0:	98800217 	ldw	r2,8(r19)
100063b4:	9080130e 	bge	r18,r2,10006404 <__multadd+0xe4>
100063b8:	90800144 	addi	r2,r18,5
100063bc:	1085883a 	add	r2,r2,r2
100063c0:	1085883a 	add	r2,r2,r2
100063c4:	9885883a 	add	r2,r19,r2
100063c8:	14000015 	stw	r16,0(r2)
100063cc:	94800044 	addi	r18,r18,1
100063d0:	9c800415 	stw	r18,16(r19)
100063d4:	9805883a 	mov	r2,r19
100063d8:	dfc00817 	ldw	ra,32(sp)
100063dc:	ddc00717 	ldw	r23,28(sp)
100063e0:	dd800617 	ldw	r22,24(sp)
100063e4:	dd400517 	ldw	r21,20(sp)
100063e8:	dd000417 	ldw	r20,16(sp)
100063ec:	dcc00317 	ldw	r19,12(sp)
100063f0:	dc800217 	ldw	r18,8(sp)
100063f4:	dc400117 	ldw	r17,4(sp)
100063f8:	dc000017 	ldw	r16,0(sp)
100063fc:	dec00904 	addi	sp,sp,36
10006400:	f800283a 	ret
10006404:	99400117 	ldw	r5,4(r19)
10006408:	a009883a 	mov	r4,r20
1000640c:	29400044 	addi	r5,r5,1
10006410:	00062500 	call	10006250 <_Balloc>
10006414:	99800417 	ldw	r6,16(r19)
10006418:	99400304 	addi	r5,r19,12
1000641c:	11000304 	addi	r4,r2,12
10006420:	31800084 	addi	r6,r6,2
10006424:	318d883a 	add	r6,r6,r6
10006428:	318d883a 	add	r6,r6,r6
1000642c:	1023883a 	mov	r17,r2
10006430:	0005e980 	call	10005e98 <memcpy>
10006434:	99000117 	ldw	r4,4(r19)
10006438:	a0c01317 	ldw	r3,76(r20)
1000643c:	2109883a 	add	r4,r4,r4
10006440:	2109883a 	add	r4,r4,r4
10006444:	1907883a 	add	r3,r3,r4
10006448:	18800017 	ldw	r2,0(r3)
1000644c:	98800015 	stw	r2,0(r19)
10006450:	1cc00015 	stw	r19,0(r3)
10006454:	8827883a 	mov	r19,r17
10006458:	003fd706 	br	100063b8 <__alt_data_end+0xf80063b8>

1000645c <__s2b>:
1000645c:	defff904 	addi	sp,sp,-28
10006460:	dc400115 	stw	r17,4(sp)
10006464:	dc000015 	stw	r16,0(sp)
10006468:	2023883a 	mov	r17,r4
1000646c:	2821883a 	mov	r16,r5
10006470:	39000204 	addi	r4,r7,8
10006474:	01400244 	movi	r5,9
10006478:	dcc00315 	stw	r19,12(sp)
1000647c:	dc800215 	stw	r18,8(sp)
10006480:	dfc00615 	stw	ra,24(sp)
10006484:	dd400515 	stw	r21,20(sp)
10006488:	dd000415 	stw	r20,16(sp)
1000648c:	3825883a 	mov	r18,r7
10006490:	3027883a 	mov	r19,r6
10006494:	000a6500 	call	1000a650 <__divsi3>
10006498:	00c00044 	movi	r3,1
1000649c:	000b883a 	mov	r5,zero
100064a0:	1880030e 	bge	r3,r2,100064b0 <__s2b+0x54>
100064a4:	18c7883a 	add	r3,r3,r3
100064a8:	29400044 	addi	r5,r5,1
100064ac:	18bffd16 	blt	r3,r2,100064a4 <__alt_data_end+0xf80064a4>
100064b0:	8809883a 	mov	r4,r17
100064b4:	00062500 	call	10006250 <_Balloc>
100064b8:	d8c00717 	ldw	r3,28(sp)
100064bc:	10c00515 	stw	r3,20(r2)
100064c0:	00c00044 	movi	r3,1
100064c4:	10c00415 	stw	r3,16(r2)
100064c8:	00c00244 	movi	r3,9
100064cc:	1cc0210e 	bge	r3,r19,10006554 <__s2b+0xf8>
100064d0:	80eb883a 	add	r21,r16,r3
100064d4:	a829883a 	mov	r20,r21
100064d8:	84e1883a 	add	r16,r16,r19
100064dc:	a1c00007 	ldb	r7,0(r20)
100064e0:	8809883a 	mov	r4,r17
100064e4:	a5000044 	addi	r20,r20,1
100064e8:	100b883a 	mov	r5,r2
100064ec:	01800284 	movi	r6,10
100064f0:	39fff404 	addi	r7,r7,-48
100064f4:	00063200 	call	10006320 <__multadd>
100064f8:	a43ff81e 	bne	r20,r16,100064dc <__alt_data_end+0xf80064dc>
100064fc:	ace1883a 	add	r16,r21,r19
10006500:	843ffe04 	addi	r16,r16,-8
10006504:	9c800a0e 	bge	r19,r18,10006530 <__s2b+0xd4>
10006508:	94e5c83a 	sub	r18,r18,r19
1000650c:	84a5883a 	add	r18,r16,r18
10006510:	81c00007 	ldb	r7,0(r16)
10006514:	8809883a 	mov	r4,r17
10006518:	84000044 	addi	r16,r16,1
1000651c:	100b883a 	mov	r5,r2
10006520:	01800284 	movi	r6,10
10006524:	39fff404 	addi	r7,r7,-48
10006528:	00063200 	call	10006320 <__multadd>
1000652c:	84bff81e 	bne	r16,r18,10006510 <__alt_data_end+0xf8006510>
10006530:	dfc00617 	ldw	ra,24(sp)
10006534:	dd400517 	ldw	r21,20(sp)
10006538:	dd000417 	ldw	r20,16(sp)
1000653c:	dcc00317 	ldw	r19,12(sp)
10006540:	dc800217 	ldw	r18,8(sp)
10006544:	dc400117 	ldw	r17,4(sp)
10006548:	dc000017 	ldw	r16,0(sp)
1000654c:	dec00704 	addi	sp,sp,28
10006550:	f800283a 	ret
10006554:	84000284 	addi	r16,r16,10
10006558:	1827883a 	mov	r19,r3
1000655c:	003fe906 	br	10006504 <__alt_data_end+0xf8006504>

10006560 <__hi0bits>:
10006560:	20bfffec 	andhi	r2,r4,65535
10006564:	1000141e 	bne	r2,zero,100065b8 <__hi0bits+0x58>
10006568:	2008943a 	slli	r4,r4,16
1000656c:	00800404 	movi	r2,16
10006570:	20ffc02c 	andhi	r3,r4,65280
10006574:	1800021e 	bne	r3,zero,10006580 <__hi0bits+0x20>
10006578:	2008923a 	slli	r4,r4,8
1000657c:	10800204 	addi	r2,r2,8
10006580:	20fc002c 	andhi	r3,r4,61440
10006584:	1800021e 	bne	r3,zero,10006590 <__hi0bits+0x30>
10006588:	2008913a 	slli	r4,r4,4
1000658c:	10800104 	addi	r2,r2,4
10006590:	20f0002c 	andhi	r3,r4,49152
10006594:	1800031e 	bne	r3,zero,100065a4 <__hi0bits+0x44>
10006598:	2109883a 	add	r4,r4,r4
1000659c:	10800084 	addi	r2,r2,2
100065a0:	2109883a 	add	r4,r4,r4
100065a4:	20000316 	blt	r4,zero,100065b4 <__hi0bits+0x54>
100065a8:	2110002c 	andhi	r4,r4,16384
100065ac:	2000041e 	bne	r4,zero,100065c0 <__hi0bits+0x60>
100065b0:	00800804 	movi	r2,32
100065b4:	f800283a 	ret
100065b8:	0005883a 	mov	r2,zero
100065bc:	003fec06 	br	10006570 <__alt_data_end+0xf8006570>
100065c0:	10800044 	addi	r2,r2,1
100065c4:	f800283a 	ret

100065c8 <__lo0bits>:
100065c8:	20c00017 	ldw	r3,0(r4)
100065cc:	188001cc 	andi	r2,r3,7
100065d0:	10000826 	beq	r2,zero,100065f4 <__lo0bits+0x2c>
100065d4:	1880004c 	andi	r2,r3,1
100065d8:	1000211e 	bne	r2,zero,10006660 <__lo0bits+0x98>
100065dc:	1880008c 	andi	r2,r3,2
100065e0:	1000211e 	bne	r2,zero,10006668 <__lo0bits+0xa0>
100065e4:	1806d0ba 	srli	r3,r3,2
100065e8:	00800084 	movi	r2,2
100065ec:	20c00015 	stw	r3,0(r4)
100065f0:	f800283a 	ret
100065f4:	18bfffcc 	andi	r2,r3,65535
100065f8:	10001326 	beq	r2,zero,10006648 <__lo0bits+0x80>
100065fc:	0005883a 	mov	r2,zero
10006600:	19403fcc 	andi	r5,r3,255
10006604:	2800021e 	bne	r5,zero,10006610 <__lo0bits+0x48>
10006608:	1806d23a 	srli	r3,r3,8
1000660c:	10800204 	addi	r2,r2,8
10006610:	194003cc 	andi	r5,r3,15
10006614:	2800021e 	bne	r5,zero,10006620 <__lo0bits+0x58>
10006618:	1806d13a 	srli	r3,r3,4
1000661c:	10800104 	addi	r2,r2,4
10006620:	194000cc 	andi	r5,r3,3
10006624:	2800021e 	bne	r5,zero,10006630 <__lo0bits+0x68>
10006628:	1806d0ba 	srli	r3,r3,2
1000662c:	10800084 	addi	r2,r2,2
10006630:	1940004c 	andi	r5,r3,1
10006634:	2800081e 	bne	r5,zero,10006658 <__lo0bits+0x90>
10006638:	1806d07a 	srli	r3,r3,1
1000663c:	1800051e 	bne	r3,zero,10006654 <__lo0bits+0x8c>
10006640:	00800804 	movi	r2,32
10006644:	f800283a 	ret
10006648:	1806d43a 	srli	r3,r3,16
1000664c:	00800404 	movi	r2,16
10006650:	003feb06 	br	10006600 <__alt_data_end+0xf8006600>
10006654:	10800044 	addi	r2,r2,1
10006658:	20c00015 	stw	r3,0(r4)
1000665c:	f800283a 	ret
10006660:	0005883a 	mov	r2,zero
10006664:	f800283a 	ret
10006668:	1806d07a 	srli	r3,r3,1
1000666c:	00800044 	movi	r2,1
10006670:	20c00015 	stw	r3,0(r4)
10006674:	f800283a 	ret

10006678 <__i2b>:
10006678:	defffd04 	addi	sp,sp,-12
1000667c:	dc000015 	stw	r16,0(sp)
10006680:	04000044 	movi	r16,1
10006684:	dc400115 	stw	r17,4(sp)
10006688:	2823883a 	mov	r17,r5
1000668c:	800b883a 	mov	r5,r16
10006690:	dfc00215 	stw	ra,8(sp)
10006694:	00062500 	call	10006250 <_Balloc>
10006698:	14400515 	stw	r17,20(r2)
1000669c:	14000415 	stw	r16,16(r2)
100066a0:	dfc00217 	ldw	ra,8(sp)
100066a4:	dc400117 	ldw	r17,4(sp)
100066a8:	dc000017 	ldw	r16,0(sp)
100066ac:	dec00304 	addi	sp,sp,12
100066b0:	f800283a 	ret

100066b4 <__multiply>:
100066b4:	deffef04 	addi	sp,sp,-68
100066b8:	dc400815 	stw	r17,32(sp)
100066bc:	dc000715 	stw	r16,28(sp)
100066c0:	2c400417 	ldw	r17,16(r5)
100066c4:	34000417 	ldw	r16,16(r6)
100066c8:	dd800d15 	stw	r22,52(sp)
100066cc:	dc800915 	stw	r18,36(sp)
100066d0:	dfc01015 	stw	ra,64(sp)
100066d4:	df000f15 	stw	fp,60(sp)
100066d8:	ddc00e15 	stw	r23,56(sp)
100066dc:	dd400c15 	stw	r21,48(sp)
100066e0:	dd000b15 	stw	r20,44(sp)
100066e4:	dcc00a15 	stw	r19,40(sp)
100066e8:	2825883a 	mov	r18,r5
100066ec:	302d883a 	mov	r22,r6
100066f0:	8c009116 	blt	r17,r16,10006938 <__multiply+0x284>
100066f4:	8005883a 	mov	r2,r16
100066f8:	8821883a 	mov	r16,r17
100066fc:	1023883a 	mov	r17,r2
10006700:	90800217 	ldw	r2,8(r18)
10006704:	8447883a 	add	r3,r16,r17
10006708:	d8c00215 	stw	r3,8(sp)
1000670c:	91400117 	ldw	r5,4(r18)
10006710:	10c0010e 	bge	r2,r3,10006718 <__multiply+0x64>
10006714:	29400044 	addi	r5,r5,1
10006718:	00062500 	call	10006250 <_Balloc>
1000671c:	d8c00217 	ldw	r3,8(sp)
10006720:	d8800615 	stw	r2,24(sp)
10006724:	18eb883a 	add	r21,r3,r3
10006728:	ad6b883a 	add	r21,r21,r21
1000672c:	10c00504 	addi	r3,r2,20
10006730:	1d6b883a 	add	r21,r3,r21
10006734:	d8c00115 	stw	r3,4(sp)
10006738:	dd400315 	stw	r21,12(sp)
1000673c:	1805883a 	mov	r2,r3
10006740:	1d40042e 	bgeu	r3,r21,10006754 <__multiply+0xa0>
10006744:	d8c00317 	ldw	r3,12(sp)
10006748:	10000015 	stw	zero,0(r2)
1000674c:	10800104 	addi	r2,r2,4
10006750:	10fffc36 	bltu	r2,r3,10006744 <__alt_data_end+0xf8006744>
10006754:	8c63883a 	add	r17,r17,r17
10006758:	b5800504 	addi	r22,r22,20
1000675c:	8c63883a 	add	r17,r17,r17
10006760:	94800504 	addi	r18,r18,20
10006764:	8421883a 	add	r16,r16,r16
10006768:	b463883a 	add	r17,r22,r17
1000676c:	8421883a 	add	r16,r16,r16
10006770:	dd800015 	stw	r22,0(sp)
10006774:	dc800415 	stw	r18,16(sp)
10006778:	dc400515 	stw	r17,20(sp)
1000677c:	9429883a 	add	r20,r18,r16
10006780:	b4404f2e 	bgeu	r22,r17,100068c0 <__multiply+0x20c>
10006784:	d8c00017 	ldw	r3,0(sp)
10006788:	1c800017 	ldw	r18,0(r3)
1000678c:	943fffcc 	andi	r16,r18,65535
10006790:	80001e26 	beq	r16,zero,1000680c <__multiply+0x158>
10006794:	dd800117 	ldw	r22,4(sp)
10006798:	dd400417 	ldw	r21,16(sp)
1000679c:	0025883a 	mov	r18,zero
100067a0:	adc00017 	ldw	r23,0(r21)
100067a4:	b4c00017 	ldw	r19,0(r22)
100067a8:	800b883a 	mov	r5,r16
100067ac:	b93fffcc 	andi	r4,r23,65535
100067b0:	00005a80 	call	100005a8 <__mulsi3>
100067b4:	9c7fffcc 	andi	r17,r19,65535
100067b8:	8885883a 	add	r2,r17,r2
100067bc:	b808d43a 	srli	r4,r23,16
100067c0:	14a3883a 	add	r17,r2,r18
100067c4:	9826d43a 	srli	r19,r19,16
100067c8:	8824d43a 	srli	r18,r17,16
100067cc:	800b883a 	mov	r5,r16
100067d0:	00005a80 	call	100005a8 <__mulsi3>
100067d4:	9885883a 	add	r2,r19,r2
100067d8:	14a7883a 	add	r19,r2,r18
100067dc:	88ffffcc 	andi	r3,r17,65535
100067e0:	9822943a 	slli	r17,r19,16
100067e4:	ad400104 	addi	r21,r21,4
100067e8:	b005883a 	mov	r2,r22
100067ec:	88c6b03a 	or	r3,r17,r3
100067f0:	b0c00015 	stw	r3,0(r22)
100067f4:	9824d43a 	srli	r18,r19,16
100067f8:	b5800104 	addi	r22,r22,4
100067fc:	ad3fe836 	bltu	r21,r20,100067a0 <__alt_data_end+0xf80067a0>
10006800:	d8c00017 	ldw	r3,0(sp)
10006804:	14800115 	stw	r18,4(r2)
10006808:	1c800017 	ldw	r18,0(r3)
1000680c:	9024d43a 	srli	r18,r18,16
10006810:	90002226 	beq	r18,zero,1000689c <__multiply+0x1e8>
10006814:	d8c00117 	ldw	r3,4(sp)
10006818:	dd800417 	ldw	r22,16(sp)
1000681c:	002f883a 	mov	r23,zero
10006820:	1f000017 	ldw	fp,0(r3)
10006824:	1823883a 	mov	r17,r3
10006828:	182b883a 	mov	r21,r3
1000682c:	e021883a 	mov	r16,fp
10006830:	00000106 	br	10006838 <__multiply+0x184>
10006834:	982b883a 	mov	r21,r19
10006838:	b100000b 	ldhu	r4,0(r22)
1000683c:	8020d43a 	srli	r16,r16,16
10006840:	900b883a 	mov	r5,r18
10006844:	00005a80 	call	100005a8 <__mulsi3>
10006848:	1405883a 	add	r2,r2,r16
1000684c:	15ef883a 	add	r23,r2,r23
10006850:	b804943a 	slli	r2,r23,16
10006854:	e0ffffcc 	andi	r3,fp,65535
10006858:	8c400104 	addi	r17,r17,4
1000685c:	10c6b03a 	or	r3,r2,r3
10006860:	88ffff15 	stw	r3,-4(r17)
10006864:	b5800104 	addi	r22,r22,4
10006868:	b13fff17 	ldw	r4,-4(r22)
1000686c:	acc00104 	addi	r19,r21,4
10006870:	900b883a 	mov	r5,r18
10006874:	2008d43a 	srli	r4,r4,16
10006878:	9c000017 	ldw	r16,0(r19)
1000687c:	00005a80 	call	100005a8 <__mulsi3>
10006880:	b806d43a 	srli	r3,r23,16
10006884:	813fffcc 	andi	r4,r16,65535
10006888:	1105883a 	add	r2,r2,r4
1000688c:	10f9883a 	add	fp,r2,r3
10006890:	e02ed43a 	srli	r23,fp,16
10006894:	b53fe736 	bltu	r22,r20,10006834 <__alt_data_end+0xf8006834>
10006898:	af000115 	stw	fp,4(r21)
1000689c:	d8c00017 	ldw	r3,0(sp)
100068a0:	d9000517 	ldw	r4,20(sp)
100068a4:	18c00104 	addi	r3,r3,4
100068a8:	d8c00015 	stw	r3,0(sp)
100068ac:	d8c00117 	ldw	r3,4(sp)
100068b0:	18c00104 	addi	r3,r3,4
100068b4:	d8c00115 	stw	r3,4(sp)
100068b8:	d8c00017 	ldw	r3,0(sp)
100068bc:	193fb136 	bltu	r3,r4,10006784 <__alt_data_end+0xf8006784>
100068c0:	d8c00217 	ldw	r3,8(sp)
100068c4:	00c00c0e 	bge	zero,r3,100068f8 <__multiply+0x244>
100068c8:	d8c00317 	ldw	r3,12(sp)
100068cc:	18bfff17 	ldw	r2,-4(r3)
100068d0:	1d7fff04 	addi	r21,r3,-4
100068d4:	10000326 	beq	r2,zero,100068e4 <__multiply+0x230>
100068d8:	00000706 	br	100068f8 <__multiply+0x244>
100068dc:	a8800017 	ldw	r2,0(r21)
100068e0:	1000051e 	bne	r2,zero,100068f8 <__multiply+0x244>
100068e4:	d8c00217 	ldw	r3,8(sp)
100068e8:	ad7fff04 	addi	r21,r21,-4
100068ec:	18ffffc4 	addi	r3,r3,-1
100068f0:	d8c00215 	stw	r3,8(sp)
100068f4:	183ff91e 	bne	r3,zero,100068dc <__alt_data_end+0xf80068dc>
100068f8:	d8c00617 	ldw	r3,24(sp)
100068fc:	d9000217 	ldw	r4,8(sp)
10006900:	1805883a 	mov	r2,r3
10006904:	19000415 	stw	r4,16(r3)
10006908:	dfc01017 	ldw	ra,64(sp)
1000690c:	df000f17 	ldw	fp,60(sp)
10006910:	ddc00e17 	ldw	r23,56(sp)
10006914:	dd800d17 	ldw	r22,52(sp)
10006918:	dd400c17 	ldw	r21,48(sp)
1000691c:	dd000b17 	ldw	r20,44(sp)
10006920:	dcc00a17 	ldw	r19,40(sp)
10006924:	dc800917 	ldw	r18,36(sp)
10006928:	dc400817 	ldw	r17,32(sp)
1000692c:	dc000717 	ldw	r16,28(sp)
10006930:	dec01104 	addi	sp,sp,68
10006934:	f800283a 	ret
10006938:	3025883a 	mov	r18,r6
1000693c:	282d883a 	mov	r22,r5
10006940:	003f6f06 	br	10006700 <__alt_data_end+0xf8006700>

10006944 <__pow5mult>:
10006944:	defffa04 	addi	sp,sp,-24
10006948:	dcc00315 	stw	r19,12(sp)
1000694c:	dc800215 	stw	r18,8(sp)
10006950:	dc000015 	stw	r16,0(sp)
10006954:	dfc00515 	stw	ra,20(sp)
10006958:	dd000415 	stw	r20,16(sp)
1000695c:	dc400115 	stw	r17,4(sp)
10006960:	308000cc 	andi	r2,r6,3
10006964:	3021883a 	mov	r16,r6
10006968:	2027883a 	mov	r19,r4
1000696c:	2825883a 	mov	r18,r5
10006970:	10002e1e 	bne	r2,zero,10006a2c <__pow5mult+0xe8>
10006974:	8021d0ba 	srai	r16,r16,2
10006978:	80001a26 	beq	r16,zero,100069e4 <__pow5mult+0xa0>
1000697c:	9c401217 	ldw	r17,72(r19)
10006980:	8800061e 	bne	r17,zero,1000699c <__pow5mult+0x58>
10006984:	00003406 	br	10006a58 <__pow5mult+0x114>
10006988:	8021d07a 	srai	r16,r16,1
1000698c:	80001526 	beq	r16,zero,100069e4 <__pow5mult+0xa0>
10006990:	88800017 	ldw	r2,0(r17)
10006994:	10001c26 	beq	r2,zero,10006a08 <__pow5mult+0xc4>
10006998:	1023883a 	mov	r17,r2
1000699c:	80c0004c 	andi	r3,r16,1
100069a0:	183ff926 	beq	r3,zero,10006988 <__alt_data_end+0xf8006988>
100069a4:	900b883a 	mov	r5,r18
100069a8:	880d883a 	mov	r6,r17
100069ac:	9809883a 	mov	r4,r19
100069b0:	00066b40 	call	100066b4 <__multiply>
100069b4:	90001b26 	beq	r18,zero,10006a24 <__pow5mult+0xe0>
100069b8:	91c00117 	ldw	r7,4(r18)
100069bc:	98c01317 	ldw	r3,76(r19)
100069c0:	8021d07a 	srai	r16,r16,1
100069c4:	39cf883a 	add	r7,r7,r7
100069c8:	39cf883a 	add	r7,r7,r7
100069cc:	19c7883a 	add	r3,r3,r7
100069d0:	19000017 	ldw	r4,0(r3)
100069d4:	91000015 	stw	r4,0(r18)
100069d8:	1c800015 	stw	r18,0(r3)
100069dc:	1025883a 	mov	r18,r2
100069e0:	803feb1e 	bne	r16,zero,10006990 <__alt_data_end+0xf8006990>
100069e4:	9005883a 	mov	r2,r18
100069e8:	dfc00517 	ldw	ra,20(sp)
100069ec:	dd000417 	ldw	r20,16(sp)
100069f0:	dcc00317 	ldw	r19,12(sp)
100069f4:	dc800217 	ldw	r18,8(sp)
100069f8:	dc400117 	ldw	r17,4(sp)
100069fc:	dc000017 	ldw	r16,0(sp)
10006a00:	dec00604 	addi	sp,sp,24
10006a04:	f800283a 	ret
10006a08:	9809883a 	mov	r4,r19
10006a0c:	880b883a 	mov	r5,r17
10006a10:	880d883a 	mov	r6,r17
10006a14:	00066b40 	call	100066b4 <__multiply>
10006a18:	88800015 	stw	r2,0(r17)
10006a1c:	10000015 	stw	zero,0(r2)
10006a20:	003fdd06 	br	10006998 <__alt_data_end+0xf8006998>
10006a24:	1025883a 	mov	r18,r2
10006a28:	003fd706 	br	10006988 <__alt_data_end+0xf8006988>
10006a2c:	10bfffc4 	addi	r2,r2,-1
10006a30:	1085883a 	add	r2,r2,r2
10006a34:	00c40074 	movhi	r3,4097
10006a38:	18fddf04 	addi	r3,r3,-2180
10006a3c:	1085883a 	add	r2,r2,r2
10006a40:	1885883a 	add	r2,r3,r2
10006a44:	11800017 	ldw	r6,0(r2)
10006a48:	000f883a 	mov	r7,zero
10006a4c:	00063200 	call	10006320 <__multadd>
10006a50:	1025883a 	mov	r18,r2
10006a54:	003fc706 	br	10006974 <__alt_data_end+0xf8006974>
10006a58:	05000044 	movi	r20,1
10006a5c:	9809883a 	mov	r4,r19
10006a60:	a00b883a 	mov	r5,r20
10006a64:	00062500 	call	10006250 <_Balloc>
10006a68:	1023883a 	mov	r17,r2
10006a6c:	00809c44 	movi	r2,625
10006a70:	88800515 	stw	r2,20(r17)
10006a74:	8d000415 	stw	r20,16(r17)
10006a78:	9c401215 	stw	r17,72(r19)
10006a7c:	88000015 	stw	zero,0(r17)
10006a80:	003fc606 	br	1000699c <__alt_data_end+0xf800699c>

10006a84 <__lshift>:
10006a84:	defff904 	addi	sp,sp,-28
10006a88:	dd000415 	stw	r20,16(sp)
10006a8c:	dcc00315 	stw	r19,12(sp)
10006a90:	3029d17a 	srai	r20,r6,5
10006a94:	2cc00417 	ldw	r19,16(r5)
10006a98:	28800217 	ldw	r2,8(r5)
10006a9c:	dd400515 	stw	r21,20(sp)
10006aa0:	a4e7883a 	add	r19,r20,r19
10006aa4:	dc800215 	stw	r18,8(sp)
10006aa8:	dc400115 	stw	r17,4(sp)
10006aac:	dc000015 	stw	r16,0(sp)
10006ab0:	dfc00615 	stw	ra,24(sp)
10006ab4:	9c000044 	addi	r16,r19,1
10006ab8:	2823883a 	mov	r17,r5
10006abc:	302b883a 	mov	r21,r6
10006ac0:	2025883a 	mov	r18,r4
10006ac4:	29400117 	ldw	r5,4(r5)
10006ac8:	1400030e 	bge	r2,r16,10006ad8 <__lshift+0x54>
10006acc:	1085883a 	add	r2,r2,r2
10006ad0:	29400044 	addi	r5,r5,1
10006ad4:	143ffd16 	blt	r2,r16,10006acc <__alt_data_end+0xf8006acc>
10006ad8:	9009883a 	mov	r4,r18
10006adc:	00062500 	call	10006250 <_Balloc>
10006ae0:	11c00504 	addi	r7,r2,20
10006ae4:	0500090e 	bge	zero,r20,10006b0c <__lshift+0x88>
10006ae8:	3811883a 	mov	r8,r7
10006aec:	0007883a 	mov	r3,zero
10006af0:	40000015 	stw	zero,0(r8)
10006af4:	18c00044 	addi	r3,r3,1
10006af8:	42000104 	addi	r8,r8,4
10006afc:	1d3ffc1e 	bne	r3,r20,10006af0 <__alt_data_end+0xf8006af0>
10006b00:	18c7883a 	add	r3,r3,r3
10006b04:	18c7883a 	add	r3,r3,r3
10006b08:	38cf883a 	add	r7,r7,r3
10006b0c:	89000417 	ldw	r4,16(r17)
10006b10:	88c00504 	addi	r3,r17,20
10006b14:	a98007cc 	andi	r6,r21,31
10006b18:	2109883a 	add	r4,r4,r4
10006b1c:	2109883a 	add	r4,r4,r4
10006b20:	1909883a 	add	r4,r3,r4
10006b24:	30002326 	beq	r6,zero,10006bb4 <__lshift+0x130>
10006b28:	01400804 	movi	r5,32
10006b2c:	298bc83a 	sub	r5,r5,r6
10006b30:	0013883a 	mov	r9,zero
10006b34:	1a000017 	ldw	r8,0(r3)
10006b38:	3815883a 	mov	r10,r7
10006b3c:	39c00104 	addi	r7,r7,4
10006b40:	4190983a 	sll	r8,r8,r6
10006b44:	18c00104 	addi	r3,r3,4
10006b48:	4a10b03a 	or	r8,r9,r8
10006b4c:	3a3fff15 	stw	r8,-4(r7)
10006b50:	1a3fff17 	ldw	r8,-4(r3)
10006b54:	4152d83a 	srl	r9,r8,r5
10006b58:	193ff636 	bltu	r3,r4,10006b34 <__alt_data_end+0xf8006b34>
10006b5c:	52400115 	stw	r9,4(r10)
10006b60:	48000126 	beq	r9,zero,10006b68 <__lshift+0xe4>
10006b64:	9c000084 	addi	r16,r19,2
10006b68:	89000117 	ldw	r4,4(r17)
10006b6c:	90c01317 	ldw	r3,76(r18)
10006b70:	843fffc4 	addi	r16,r16,-1
10006b74:	2109883a 	add	r4,r4,r4
10006b78:	2109883a 	add	r4,r4,r4
10006b7c:	1907883a 	add	r3,r3,r4
10006b80:	19000017 	ldw	r4,0(r3)
10006b84:	14000415 	stw	r16,16(r2)
10006b88:	89000015 	stw	r4,0(r17)
10006b8c:	1c400015 	stw	r17,0(r3)
10006b90:	dfc00617 	ldw	ra,24(sp)
10006b94:	dd400517 	ldw	r21,20(sp)
10006b98:	dd000417 	ldw	r20,16(sp)
10006b9c:	dcc00317 	ldw	r19,12(sp)
10006ba0:	dc800217 	ldw	r18,8(sp)
10006ba4:	dc400117 	ldw	r17,4(sp)
10006ba8:	dc000017 	ldw	r16,0(sp)
10006bac:	dec00704 	addi	sp,sp,28
10006bb0:	f800283a 	ret
10006bb4:	19400017 	ldw	r5,0(r3)
10006bb8:	39c00104 	addi	r7,r7,4
10006bbc:	18c00104 	addi	r3,r3,4
10006bc0:	397fff15 	stw	r5,-4(r7)
10006bc4:	193ffb36 	bltu	r3,r4,10006bb4 <__alt_data_end+0xf8006bb4>
10006bc8:	003fe706 	br	10006b68 <__alt_data_end+0xf8006b68>

10006bcc <__mcmp>:
10006bcc:	20800417 	ldw	r2,16(r4)
10006bd0:	28c00417 	ldw	r3,16(r5)
10006bd4:	10c5c83a 	sub	r2,r2,r3
10006bd8:	1000111e 	bne	r2,zero,10006c20 <__mcmp+0x54>
10006bdc:	18c7883a 	add	r3,r3,r3
10006be0:	18c7883a 	add	r3,r3,r3
10006be4:	21000504 	addi	r4,r4,20
10006be8:	29400504 	addi	r5,r5,20
10006bec:	20c5883a 	add	r2,r4,r3
10006bf0:	28cb883a 	add	r5,r5,r3
10006bf4:	00000106 	br	10006bfc <__mcmp+0x30>
10006bf8:	20800a2e 	bgeu	r4,r2,10006c24 <__mcmp+0x58>
10006bfc:	10bfff04 	addi	r2,r2,-4
10006c00:	297fff04 	addi	r5,r5,-4
10006c04:	11800017 	ldw	r6,0(r2)
10006c08:	28c00017 	ldw	r3,0(r5)
10006c0c:	30fffa26 	beq	r6,r3,10006bf8 <__alt_data_end+0xf8006bf8>
10006c10:	30c00236 	bltu	r6,r3,10006c1c <__mcmp+0x50>
10006c14:	00800044 	movi	r2,1
10006c18:	f800283a 	ret
10006c1c:	00bfffc4 	movi	r2,-1
10006c20:	f800283a 	ret
10006c24:	0005883a 	mov	r2,zero
10006c28:	f800283a 	ret

10006c2c <__mdiff>:
10006c2c:	defffb04 	addi	sp,sp,-20
10006c30:	dc000015 	stw	r16,0(sp)
10006c34:	2821883a 	mov	r16,r5
10006c38:	dcc00315 	stw	r19,12(sp)
10006c3c:	300b883a 	mov	r5,r6
10006c40:	2027883a 	mov	r19,r4
10006c44:	8009883a 	mov	r4,r16
10006c48:	dc800215 	stw	r18,8(sp)
10006c4c:	dfc00415 	stw	ra,16(sp)
10006c50:	dc400115 	stw	r17,4(sp)
10006c54:	3025883a 	mov	r18,r6
10006c58:	0006bcc0 	call	10006bcc <__mcmp>
10006c5c:	10005226 	beq	r2,zero,10006da8 <__mdiff+0x17c>
10006c60:	10004c16 	blt	r2,zero,10006d94 <__mdiff+0x168>
10006c64:	0023883a 	mov	r17,zero
10006c68:	81400117 	ldw	r5,4(r16)
10006c6c:	9809883a 	mov	r4,r19
10006c70:	00062500 	call	10006250 <_Balloc>
10006c74:	83400417 	ldw	r13,16(r16)
10006c78:	93800417 	ldw	r14,16(r18)
10006c7c:	81000504 	addi	r4,r16,20
10006c80:	6b59883a 	add	r12,r13,r13
10006c84:	739d883a 	add	r14,r14,r14
10006c88:	6319883a 	add	r12,r12,r12
10006c8c:	91800504 	addi	r6,r18,20
10006c90:	739d883a 	add	r14,r14,r14
10006c94:	14400315 	stw	r17,12(r2)
10006c98:	2319883a 	add	r12,r4,r12
10006c9c:	339d883a 	add	r14,r6,r14
10006ca0:	12400504 	addi	r9,r2,20
10006ca4:	0007883a 	mov	r3,zero
10006ca8:	22000017 	ldw	r8,0(r4)
10006cac:	32800017 	ldw	r10,0(r6)
10006cb0:	4ac00104 	addi	r11,r9,4
10006cb4:	41ffffcc 	andi	r7,r8,65535
10006cb8:	38c7883a 	add	r3,r7,r3
10006cbc:	51ffffcc 	andi	r7,r10,65535
10006cc0:	19cfc83a 	sub	r7,r3,r7
10006cc4:	4010d43a 	srli	r8,r8,16
10006cc8:	5014d43a 	srli	r10,r10,16
10006ccc:	3807d43a 	srai	r3,r7,16
10006cd0:	39ffffcc 	andi	r7,r7,65535
10006cd4:	4291c83a 	sub	r8,r8,r10
10006cd8:	40c7883a 	add	r3,r8,r3
10006cdc:	1810943a 	slli	r8,r3,16
10006ce0:	31800104 	addi	r6,r6,4
10006ce4:	21000104 	addi	r4,r4,4
10006ce8:	41ceb03a 	or	r7,r8,r7
10006cec:	49c00015 	stw	r7,0(r9)
10006cf0:	1807d43a 	srai	r3,r3,16
10006cf4:	580b883a 	mov	r5,r11
10006cf8:	5813883a 	mov	r9,r11
10006cfc:	33bfea36 	bltu	r6,r14,10006ca8 <__alt_data_end+0xf8006ca8>
10006d00:	2011883a 	mov	r8,r4
10006d04:	2300152e 	bgeu	r4,r12,10006d5c <__mdiff+0x130>
10006d08:	21400017 	ldw	r5,0(r4)
10006d0c:	4a400104 	addi	r9,r9,4
10006d10:	21000104 	addi	r4,r4,4
10006d14:	29ffffcc 	andi	r7,r5,65535
10006d18:	38c7883a 	add	r3,r7,r3
10006d1c:	280ad43a 	srli	r5,r5,16
10006d20:	180dd43a 	srai	r6,r3,16
10006d24:	19ffffcc 	andi	r7,r3,65535
10006d28:	3147883a 	add	r3,r6,r5
10006d2c:	180a943a 	slli	r5,r3,16
10006d30:	1807d43a 	srai	r3,r3,16
10006d34:	29ceb03a 	or	r7,r5,r7
10006d38:	49ffff15 	stw	r7,-4(r9)
10006d3c:	233ff236 	bltu	r4,r12,10006d08 <__alt_data_end+0xf8006d08>
10006d40:	0206303a 	nor	r3,zero,r8
10006d44:	1b07883a 	add	r3,r3,r12
10006d48:	1806d0ba 	srli	r3,r3,2
10006d4c:	18c00044 	addi	r3,r3,1
10006d50:	18c7883a 	add	r3,r3,r3
10006d54:	18c7883a 	add	r3,r3,r3
10006d58:	58cb883a 	add	r5,r11,r3
10006d5c:	28ffff04 	addi	r3,r5,-4
10006d60:	3800041e 	bne	r7,zero,10006d74 <__mdiff+0x148>
10006d64:	18ffff04 	addi	r3,r3,-4
10006d68:	19000017 	ldw	r4,0(r3)
10006d6c:	6b7fffc4 	addi	r13,r13,-1
10006d70:	203ffc26 	beq	r4,zero,10006d64 <__alt_data_end+0xf8006d64>
10006d74:	13400415 	stw	r13,16(r2)
10006d78:	dfc00417 	ldw	ra,16(sp)
10006d7c:	dcc00317 	ldw	r19,12(sp)
10006d80:	dc800217 	ldw	r18,8(sp)
10006d84:	dc400117 	ldw	r17,4(sp)
10006d88:	dc000017 	ldw	r16,0(sp)
10006d8c:	dec00504 	addi	sp,sp,20
10006d90:	f800283a 	ret
10006d94:	8005883a 	mov	r2,r16
10006d98:	04400044 	movi	r17,1
10006d9c:	9021883a 	mov	r16,r18
10006da0:	1025883a 	mov	r18,r2
10006da4:	003fb006 	br	10006c68 <__alt_data_end+0xf8006c68>
10006da8:	9809883a 	mov	r4,r19
10006dac:	000b883a 	mov	r5,zero
10006db0:	00062500 	call	10006250 <_Balloc>
10006db4:	00c00044 	movi	r3,1
10006db8:	10c00415 	stw	r3,16(r2)
10006dbc:	10000515 	stw	zero,20(r2)
10006dc0:	003fed06 	br	10006d78 <__alt_data_end+0xf8006d78>

10006dc4 <__ulp>:
10006dc4:	295ffc2c 	andhi	r5,r5,32752
10006dc8:	00bf3034 	movhi	r2,64704
10006dcc:	2887883a 	add	r3,r5,r2
10006dd0:	00c0020e 	bge	zero,r3,10006ddc <__ulp+0x18>
10006dd4:	0005883a 	mov	r2,zero
10006dd8:	f800283a 	ret
10006ddc:	00c7c83a 	sub	r3,zero,r3
10006de0:	180bd53a 	srai	r5,r3,20
10006de4:	008004c4 	movi	r2,19
10006de8:	11400a0e 	bge	r2,r5,10006e14 <__ulp+0x50>
10006dec:	00800c84 	movi	r2,50
10006df0:	0007883a 	mov	r3,zero
10006df4:	11400516 	blt	r2,r5,10006e0c <__ulp+0x48>
10006df8:	00800cc4 	movi	r2,51
10006dfc:	114bc83a 	sub	r5,r2,r5
10006e00:	00800044 	movi	r2,1
10006e04:	1144983a 	sll	r2,r2,r5
10006e08:	f800283a 	ret
10006e0c:	00800044 	movi	r2,1
10006e10:	f800283a 	ret
10006e14:	00800234 	movhi	r2,8
10006e18:	1147d83a 	sra	r3,r2,r5
10006e1c:	0005883a 	mov	r2,zero
10006e20:	f800283a 	ret

10006e24 <__b2d>:
10006e24:	defffa04 	addi	sp,sp,-24
10006e28:	dc000015 	stw	r16,0(sp)
10006e2c:	24000417 	ldw	r16,16(r4)
10006e30:	dc400115 	stw	r17,4(sp)
10006e34:	24400504 	addi	r17,r4,20
10006e38:	8421883a 	add	r16,r16,r16
10006e3c:	8421883a 	add	r16,r16,r16
10006e40:	8c21883a 	add	r16,r17,r16
10006e44:	dc800215 	stw	r18,8(sp)
10006e48:	84bfff17 	ldw	r18,-4(r16)
10006e4c:	dd000415 	stw	r20,16(sp)
10006e50:	dcc00315 	stw	r19,12(sp)
10006e54:	9009883a 	mov	r4,r18
10006e58:	2829883a 	mov	r20,r5
10006e5c:	dfc00515 	stw	ra,20(sp)
10006e60:	00065600 	call	10006560 <__hi0bits>
10006e64:	00c00804 	movi	r3,32
10006e68:	1887c83a 	sub	r3,r3,r2
10006e6c:	a0c00015 	stw	r3,0(r20)
10006e70:	00c00284 	movi	r3,10
10006e74:	84ffff04 	addi	r19,r16,-4
10006e78:	18801216 	blt	r3,r2,10006ec4 <__b2d+0xa0>
10006e7c:	014002c4 	movi	r5,11
10006e80:	2889c83a 	sub	r4,r5,r2
10006e84:	9106d83a 	srl	r3,r18,r4
10006e88:	18cffc34 	orhi	r3,r3,16368
10006e8c:	8cc0282e 	bgeu	r17,r19,10006f30 <__b2d+0x10c>
10006e90:	817ffe17 	ldw	r5,-8(r16)
10006e94:	290ad83a 	srl	r5,r5,r4
10006e98:	10800544 	addi	r2,r2,21
10006e9c:	9084983a 	sll	r2,r18,r2
10006ea0:	2884b03a 	or	r2,r5,r2
10006ea4:	dfc00517 	ldw	ra,20(sp)
10006ea8:	dd000417 	ldw	r20,16(sp)
10006eac:	dcc00317 	ldw	r19,12(sp)
10006eb0:	dc800217 	ldw	r18,8(sp)
10006eb4:	dc400117 	ldw	r17,4(sp)
10006eb8:	dc000017 	ldw	r16,0(sp)
10006ebc:	dec00604 	addi	sp,sp,24
10006ec0:	f800283a 	ret
10006ec4:	113ffd44 	addi	r4,r2,-11
10006ec8:	8cc00f2e 	bgeu	r17,r19,10006f08 <__b2d+0xe4>
10006ecc:	81bffe04 	addi	r6,r16,-8
10006ed0:	817ffe17 	ldw	r5,-8(r16)
10006ed4:	20001326 	beq	r4,zero,10006f24 <__b2d+0x100>
10006ed8:	00c00ac4 	movi	r3,43
10006edc:	1885c83a 	sub	r2,r3,r2
10006ee0:	2886d83a 	srl	r3,r5,r2
10006ee4:	9124983a 	sll	r18,r18,r4
10006ee8:	90e4b03a 	or	r18,r18,r3
10006eec:	90cffc34 	orhi	r3,r18,16368
10006ef0:	8980112e 	bgeu	r17,r6,10006f38 <__b2d+0x114>
10006ef4:	81bffd17 	ldw	r6,-12(r16)
10006ef8:	308cd83a 	srl	r6,r6,r2
10006efc:	2904983a 	sll	r2,r5,r4
10006f00:	1184b03a 	or	r2,r2,r6
10006f04:	003fe706 	br	10006ea4 <__alt_data_end+0xf8006ea4>
10006f08:	20000526 	beq	r4,zero,10006f20 <__b2d+0xfc>
10006f0c:	9124983a 	sll	r18,r18,r4
10006f10:	000d883a 	mov	r6,zero
10006f14:	000b883a 	mov	r5,zero
10006f18:	90cffc34 	orhi	r3,r18,16368
10006f1c:	003ff706 	br	10006efc <__alt_data_end+0xf8006efc>
10006f20:	000b883a 	mov	r5,zero
10006f24:	90cffc34 	orhi	r3,r18,16368
10006f28:	2805883a 	mov	r2,r5
10006f2c:	003fdd06 	br	10006ea4 <__alt_data_end+0xf8006ea4>
10006f30:	000b883a 	mov	r5,zero
10006f34:	003fd806 	br	10006e98 <__alt_data_end+0xf8006e98>
10006f38:	000d883a 	mov	r6,zero
10006f3c:	003fef06 	br	10006efc <__alt_data_end+0xf8006efc>

10006f40 <__d2b>:
10006f40:	defff704 	addi	sp,sp,-36
10006f44:	dc000215 	stw	r16,8(sp)
10006f48:	3021883a 	mov	r16,r6
10006f4c:	dc400315 	stw	r17,12(sp)
10006f50:	8022907a 	slli	r17,r16,1
10006f54:	dd400715 	stw	r21,28(sp)
10006f58:	282b883a 	mov	r21,r5
10006f5c:	01400044 	movi	r5,1
10006f60:	dd000615 	stw	r20,24(sp)
10006f64:	dcc00515 	stw	r19,20(sp)
10006f68:	dc800415 	stw	r18,16(sp)
10006f6c:	dfc00815 	stw	ra,32(sp)
10006f70:	3829883a 	mov	r20,r7
10006f74:	dc800917 	ldw	r18,36(sp)
10006f78:	8822d57a 	srli	r17,r17,21
10006f7c:	00062500 	call	10006250 <_Balloc>
10006f80:	1027883a 	mov	r19,r2
10006f84:	00800434 	movhi	r2,16
10006f88:	10bfffc4 	addi	r2,r2,-1
10006f8c:	808c703a 	and	r6,r16,r2
10006f90:	88000126 	beq	r17,zero,10006f98 <__d2b+0x58>
10006f94:	31800434 	orhi	r6,r6,16
10006f98:	d9800015 	stw	r6,0(sp)
10006f9c:	a8001f26 	beq	r21,zero,1000701c <__d2b+0xdc>
10006fa0:	d9000104 	addi	r4,sp,4
10006fa4:	dd400115 	stw	r21,4(sp)
10006fa8:	00065c80 	call	100065c8 <__lo0bits>
10006fac:	d8c00017 	ldw	r3,0(sp)
10006fb0:	1000291e 	bne	r2,zero,10007058 <__d2b+0x118>
10006fb4:	d9000117 	ldw	r4,4(sp)
10006fb8:	99000515 	stw	r4,20(r19)
10006fbc:	1820c03a 	cmpne	r16,r3,zero
10006fc0:	84000044 	addi	r16,r16,1
10006fc4:	98c00615 	stw	r3,24(r19)
10006fc8:	9c000415 	stw	r16,16(r19)
10006fcc:	88001b1e 	bne	r17,zero,1000703c <__d2b+0xfc>
10006fd0:	800690ba 	slli	r3,r16,2
10006fd4:	10bef384 	addi	r2,r2,-1074
10006fd8:	a0800015 	stw	r2,0(r20)
10006fdc:	98c5883a 	add	r2,r19,r3
10006fe0:	11000417 	ldw	r4,16(r2)
10006fe4:	8020917a 	slli	r16,r16,5
10006fe8:	00065600 	call	10006560 <__hi0bits>
10006fec:	8085c83a 	sub	r2,r16,r2
10006ff0:	90800015 	stw	r2,0(r18)
10006ff4:	9805883a 	mov	r2,r19
10006ff8:	dfc00817 	ldw	ra,32(sp)
10006ffc:	dd400717 	ldw	r21,28(sp)
10007000:	dd000617 	ldw	r20,24(sp)
10007004:	dcc00517 	ldw	r19,20(sp)
10007008:	dc800417 	ldw	r18,16(sp)
1000700c:	dc400317 	ldw	r17,12(sp)
10007010:	dc000217 	ldw	r16,8(sp)
10007014:	dec00904 	addi	sp,sp,36
10007018:	f800283a 	ret
1000701c:	d809883a 	mov	r4,sp
10007020:	00065c80 	call	100065c8 <__lo0bits>
10007024:	d8c00017 	ldw	r3,0(sp)
10007028:	04000044 	movi	r16,1
1000702c:	9c000415 	stw	r16,16(r19)
10007030:	98c00515 	stw	r3,20(r19)
10007034:	10800804 	addi	r2,r2,32
10007038:	883fe526 	beq	r17,zero,10006fd0 <__alt_data_end+0xf8006fd0>
1000703c:	8c7ef344 	addi	r17,r17,-1075
10007040:	88a3883a 	add	r17,r17,r2
10007044:	00c00d44 	movi	r3,53
10007048:	a4400015 	stw	r17,0(r20)
1000704c:	1885c83a 	sub	r2,r3,r2
10007050:	90800015 	stw	r2,0(r18)
10007054:	003fe706 	br	10006ff4 <__alt_data_end+0xf8006ff4>
10007058:	01000804 	movi	r4,32
1000705c:	2089c83a 	sub	r4,r4,r2
10007060:	1908983a 	sll	r4,r3,r4
10007064:	d9400117 	ldw	r5,4(sp)
10007068:	1886d83a 	srl	r3,r3,r2
1000706c:	2148b03a 	or	r4,r4,r5
10007070:	99000515 	stw	r4,20(r19)
10007074:	d8c00015 	stw	r3,0(sp)
10007078:	003fd006 	br	10006fbc <__alt_data_end+0xf8006fbc>

1000707c <__ratio>:
1000707c:	defff904 	addi	sp,sp,-28
10007080:	dc400315 	stw	r17,12(sp)
10007084:	2823883a 	mov	r17,r5
10007088:	d9400104 	addi	r5,sp,4
1000708c:	dfc00615 	stw	ra,24(sp)
10007090:	dcc00515 	stw	r19,20(sp)
10007094:	dc800415 	stw	r18,16(sp)
10007098:	2027883a 	mov	r19,r4
1000709c:	dc000215 	stw	r16,8(sp)
100070a0:	0006e240 	call	10006e24 <__b2d>
100070a4:	8809883a 	mov	r4,r17
100070a8:	d80b883a 	mov	r5,sp
100070ac:	1025883a 	mov	r18,r2
100070b0:	1821883a 	mov	r16,r3
100070b4:	0006e240 	call	10006e24 <__b2d>
100070b8:	8a400417 	ldw	r9,16(r17)
100070bc:	9a000417 	ldw	r8,16(r19)
100070c0:	100d883a 	mov	r6,r2
100070c4:	d8800017 	ldw	r2,0(sp)
100070c8:	4251c83a 	sub	r8,r8,r9
100070cc:	4012917a 	slli	r9,r8,5
100070d0:	da000117 	ldw	r8,4(sp)
100070d4:	4091c83a 	sub	r8,r8,r2
100070d8:	4251883a 	add	r8,r8,r9
100070dc:	02000d0e 	bge	zero,r8,10007114 <__ratio+0x98>
100070e0:	4010953a 	slli	r8,r8,20
100070e4:	4421883a 	add	r16,r8,r16
100070e8:	9009883a 	mov	r4,r18
100070ec:	800b883a 	mov	r5,r16
100070f0:	180f883a 	mov	r7,r3
100070f4:	000afac0 	call	1000afac <__divdf3>
100070f8:	dfc00617 	ldw	ra,24(sp)
100070fc:	dcc00517 	ldw	r19,20(sp)
10007100:	dc800417 	ldw	r18,16(sp)
10007104:	dc400317 	ldw	r17,12(sp)
10007108:	dc000217 	ldw	r16,8(sp)
1000710c:	dec00704 	addi	sp,sp,28
10007110:	f800283a 	ret
10007114:	4010953a 	slli	r8,r8,20
10007118:	1a07c83a 	sub	r3,r3,r8
1000711c:	003ff206 	br	100070e8 <__alt_data_end+0xf80070e8>

10007120 <_mprec_log10>:
10007120:	defffe04 	addi	sp,sp,-8
10007124:	dc000015 	stw	r16,0(sp)
10007128:	dfc00115 	stw	ra,4(sp)
1000712c:	008005c4 	movi	r2,23
10007130:	2021883a 	mov	r16,r4
10007134:	11000d0e 	bge	r2,r4,1000716c <_mprec_log10+0x4c>
10007138:	0005883a 	mov	r2,zero
1000713c:	00cffc34 	movhi	r3,16368
10007140:	843fffc4 	addi	r16,r16,-1
10007144:	1009883a 	mov	r4,r2
10007148:	180b883a 	mov	r5,r3
1000714c:	000d883a 	mov	r6,zero
10007150:	01d00934 	movhi	r7,16420
10007154:	000bb700 	call	1000bb70 <__muldf3>
10007158:	803ff91e 	bne	r16,zero,10007140 <__alt_data_end+0xf8007140>
1000715c:	dfc00117 	ldw	ra,4(sp)
10007160:	dc000017 	ldw	r16,0(sp)
10007164:	dec00204 	addi	sp,sp,8
10007168:	f800283a 	ret
1000716c:	202090fa 	slli	r16,r4,3
10007170:	00840074 	movhi	r2,4097
10007174:	10bdf604 	addi	r2,r2,-2088
10007178:	1421883a 	add	r16,r2,r16
1000717c:	80800017 	ldw	r2,0(r16)
10007180:	80c00117 	ldw	r3,4(r16)
10007184:	dfc00117 	ldw	ra,4(sp)
10007188:	dc000017 	ldw	r16,0(sp)
1000718c:	dec00204 	addi	sp,sp,8
10007190:	f800283a 	ret

10007194 <__copybits>:
10007194:	297fffc4 	addi	r5,r5,-1
10007198:	280fd17a 	srai	r7,r5,5
1000719c:	30c00417 	ldw	r3,16(r6)
100071a0:	30800504 	addi	r2,r6,20
100071a4:	39c00044 	addi	r7,r7,1
100071a8:	18c7883a 	add	r3,r3,r3
100071ac:	39cf883a 	add	r7,r7,r7
100071b0:	18c7883a 	add	r3,r3,r3
100071b4:	39cf883a 	add	r7,r7,r7
100071b8:	10c7883a 	add	r3,r2,r3
100071bc:	21cf883a 	add	r7,r4,r7
100071c0:	10c00d2e 	bgeu	r2,r3,100071f8 <__copybits+0x64>
100071c4:	200b883a 	mov	r5,r4
100071c8:	12000017 	ldw	r8,0(r2)
100071cc:	29400104 	addi	r5,r5,4
100071d0:	10800104 	addi	r2,r2,4
100071d4:	2a3fff15 	stw	r8,-4(r5)
100071d8:	10fffb36 	bltu	r2,r3,100071c8 <__alt_data_end+0xf80071c8>
100071dc:	1985c83a 	sub	r2,r3,r6
100071e0:	10bffac4 	addi	r2,r2,-21
100071e4:	1004d0ba 	srli	r2,r2,2
100071e8:	10800044 	addi	r2,r2,1
100071ec:	1085883a 	add	r2,r2,r2
100071f0:	1085883a 	add	r2,r2,r2
100071f4:	2089883a 	add	r4,r4,r2
100071f8:	21c0032e 	bgeu	r4,r7,10007208 <__copybits+0x74>
100071fc:	20000015 	stw	zero,0(r4)
10007200:	21000104 	addi	r4,r4,4
10007204:	21fffd36 	bltu	r4,r7,100071fc <__alt_data_end+0xf80071fc>
10007208:	f800283a 	ret

1000720c <__any_on>:
1000720c:	20c00417 	ldw	r3,16(r4)
10007210:	2805d17a 	srai	r2,r5,5
10007214:	21000504 	addi	r4,r4,20
10007218:	18800d0e 	bge	r3,r2,10007250 <__any_on+0x44>
1000721c:	18c7883a 	add	r3,r3,r3
10007220:	18c7883a 	add	r3,r3,r3
10007224:	20c7883a 	add	r3,r4,r3
10007228:	20c0192e 	bgeu	r4,r3,10007290 <__any_on+0x84>
1000722c:	18bfff17 	ldw	r2,-4(r3)
10007230:	18ffff04 	addi	r3,r3,-4
10007234:	1000041e 	bne	r2,zero,10007248 <__any_on+0x3c>
10007238:	20c0142e 	bgeu	r4,r3,1000728c <__any_on+0x80>
1000723c:	18ffff04 	addi	r3,r3,-4
10007240:	19400017 	ldw	r5,0(r3)
10007244:	283ffc26 	beq	r5,zero,10007238 <__alt_data_end+0xf8007238>
10007248:	00800044 	movi	r2,1
1000724c:	f800283a 	ret
10007250:	10c00a0e 	bge	r2,r3,1000727c <__any_on+0x70>
10007254:	1085883a 	add	r2,r2,r2
10007258:	1085883a 	add	r2,r2,r2
1000725c:	294007cc 	andi	r5,r5,31
10007260:	2087883a 	add	r3,r4,r2
10007264:	283ff026 	beq	r5,zero,10007228 <__alt_data_end+0xf8007228>
10007268:	19800017 	ldw	r6,0(r3)
1000726c:	3144d83a 	srl	r2,r6,r5
10007270:	114a983a 	sll	r5,r2,r5
10007274:	29bff41e 	bne	r5,r6,10007248 <__alt_data_end+0xf8007248>
10007278:	003feb06 	br	10007228 <__alt_data_end+0xf8007228>
1000727c:	1085883a 	add	r2,r2,r2
10007280:	1085883a 	add	r2,r2,r2
10007284:	2087883a 	add	r3,r4,r2
10007288:	003fe706 	br	10007228 <__alt_data_end+0xf8007228>
1000728c:	f800283a 	ret
10007290:	0005883a 	mov	r2,zero
10007294:	f800283a 	ret

10007298 <_realloc_r>:
10007298:	defff604 	addi	sp,sp,-40
1000729c:	dcc00315 	stw	r19,12(sp)
100072a0:	dc400115 	stw	r17,4(sp)
100072a4:	dfc00915 	stw	ra,36(sp)
100072a8:	df000815 	stw	fp,32(sp)
100072ac:	ddc00715 	stw	r23,28(sp)
100072b0:	dd800615 	stw	r22,24(sp)
100072b4:	dd400515 	stw	r21,20(sp)
100072b8:	dd000415 	stw	r20,16(sp)
100072bc:	dc800215 	stw	r18,8(sp)
100072c0:	dc000015 	stw	r16,0(sp)
100072c4:	2827883a 	mov	r19,r5
100072c8:	3023883a 	mov	r17,r6
100072cc:	2800bf26 	beq	r5,zero,100075cc <_realloc_r+0x334>
100072d0:	2025883a 	mov	r18,r4
100072d4:	000d4ec0 	call	1000d4ec <__malloc_lock>
100072d8:	98ffff17 	ldw	r3,-4(r19)
100072dc:	01bfff04 	movi	r6,-4
100072e0:	890002c4 	addi	r4,r17,11
100072e4:	01c00584 	movi	r7,22
100072e8:	9d7ffe04 	addi	r21,r19,-8
100072ec:	19a0703a 	and	r16,r3,r6
100072f0:	39003f2e 	bgeu	r7,r4,100073f0 <_realloc_r+0x158>
100072f4:	053ffe04 	movi	r20,-8
100072f8:	2528703a 	and	r20,r4,r20
100072fc:	a00f883a 	mov	r7,r20
10007300:	a0008216 	blt	r20,zero,1000750c <_realloc_r+0x274>
10007304:	a4408136 	bltu	r20,r17,1000750c <_realloc_r+0x274>
10007308:	81c03c0e 	bge	r16,r7,100073fc <_realloc_r+0x164>
1000730c:	07040074 	movhi	fp,4097
10007310:	e73fa404 	addi	fp,fp,-368
10007314:	e1000217 	ldw	r4,8(fp)
10007318:	ac05883a 	add	r2,r21,r16
1000731c:	2080bf26 	beq	r4,r2,1000761c <_realloc_r+0x384>
10007320:	11000117 	ldw	r4,4(r2)
10007324:	023fff84 	movi	r8,-2
10007328:	2210703a 	and	r8,r4,r8
1000732c:	1211883a 	add	r8,r2,r8
10007330:	41400117 	ldw	r5,4(r8)
10007334:	2940004c 	andi	r5,r5,1
10007338:	28004a1e 	bne	r5,zero,10007464 <_realloc_r+0x1cc>
1000733c:	017fff04 	movi	r5,-4
10007340:	2148703a 	and	r4,r4,r5
10007344:	2409883a 	add	r4,r4,r16
10007348:	21c0ad0e 	bge	r4,r7,10007600 <_realloc_r+0x368>
1000734c:	18c0004c 	andi	r3,r3,1
10007350:	18007f1e 	bne	r3,zero,10007550 <_realloc_r+0x2b8>
10007354:	9dfffe17 	ldw	r23,-8(r19)
10007358:	adefc83a 	sub	r23,r21,r23
1000735c:	bd800117 	ldw	r22,4(r23)
10007360:	b14a703a 	and	r5,r22,r5
10007364:	216d883a 	add	r22,r4,r5
10007368:	b1c04516 	blt	r22,r7,10007480 <_realloc_r+0x1e8>
1000736c:	10c00317 	ldw	r3,12(r2)
10007370:	10800217 	ldw	r2,8(r2)
10007374:	81bfff04 	addi	r6,r16,-4
10007378:	bc400204 	addi	r17,r23,8
1000737c:	10c00315 	stw	r3,12(r2)
10007380:	18800215 	stw	r2,8(r3)
10007384:	b9400217 	ldw	r5,8(r23)
10007388:	b8c00317 	ldw	r3,12(r23)
1000738c:	00800904 	movi	r2,36
10007390:	28c00315 	stw	r3,12(r5)
10007394:	19400215 	stw	r5,8(r3)
10007398:	1180ef36 	bltu	r2,r6,10007758 <_realloc_r+0x4c0>
1000739c:	008004c4 	movi	r2,19
100073a0:	1180da2e 	bgeu	r2,r6,1000770c <_realloc_r+0x474>
100073a4:	98800017 	ldw	r2,0(r19)
100073a8:	b8800215 	stw	r2,8(r23)
100073ac:	98800117 	ldw	r2,4(r19)
100073b0:	b8800315 	stw	r2,12(r23)
100073b4:	008006c4 	movi	r2,27
100073b8:	1180fc2e 	bgeu	r2,r6,100077ac <_realloc_r+0x514>
100073bc:	98800217 	ldw	r2,8(r19)
100073c0:	b8800415 	stw	r2,16(r23)
100073c4:	98800317 	ldw	r2,12(r19)
100073c8:	b8800515 	stw	r2,20(r23)
100073cc:	00800904 	movi	r2,36
100073d0:	3080421e 	bne	r6,r2,100074dc <_realloc_r+0x244>
100073d4:	98800417 	ldw	r2,16(r19)
100073d8:	9cc00604 	addi	r19,r19,24
100073dc:	b8c00804 	addi	r3,r23,32
100073e0:	b8800615 	stw	r2,24(r23)
100073e4:	98bfff17 	ldw	r2,-4(r19)
100073e8:	b8800715 	stw	r2,28(r23)
100073ec:	00003d06 	br	100074e4 <_realloc_r+0x24c>
100073f0:	01c00404 	movi	r7,16
100073f4:	3829883a 	mov	r20,r7
100073f8:	003fc206 	br	10007304 <__alt_data_end+0xf8007304>
100073fc:	9823883a 	mov	r17,r19
10007400:	850fc83a 	sub	r7,r16,r20
10007404:	008003c4 	movi	r2,15
10007408:	18c0004c 	andi	r3,r3,1
1000740c:	11c04336 	bltu	r2,r7,1000751c <_realloc_r+0x284>
10007410:	1c06b03a 	or	r3,r3,r16
10007414:	a8c00115 	stw	r3,4(r21)
10007418:	ac21883a 	add	r16,r21,r16
1000741c:	80c00117 	ldw	r3,4(r16)
10007420:	18c00054 	ori	r3,r3,1
10007424:	80c00115 	stw	r3,4(r16)
10007428:	9009883a 	mov	r4,r18
1000742c:	000d50c0 	call	1000d50c <__malloc_unlock>
10007430:	8805883a 	mov	r2,r17
10007434:	dfc00917 	ldw	ra,36(sp)
10007438:	df000817 	ldw	fp,32(sp)
1000743c:	ddc00717 	ldw	r23,28(sp)
10007440:	dd800617 	ldw	r22,24(sp)
10007444:	dd400517 	ldw	r21,20(sp)
10007448:	dd000417 	ldw	r20,16(sp)
1000744c:	dcc00317 	ldw	r19,12(sp)
10007450:	dc800217 	ldw	r18,8(sp)
10007454:	dc400117 	ldw	r17,4(sp)
10007458:	dc000017 	ldw	r16,0(sp)
1000745c:	dec00a04 	addi	sp,sp,40
10007460:	f800283a 	ret
10007464:	18c0004c 	andi	r3,r3,1
10007468:	1800391e 	bne	r3,zero,10007550 <_realloc_r+0x2b8>
1000746c:	9dfffe17 	ldw	r23,-8(r19)
10007470:	00bfff04 	movi	r2,-4
10007474:	adefc83a 	sub	r23,r21,r23
10007478:	b9400117 	ldw	r5,4(r23)
1000747c:	288a703a 	and	r5,r5,r2
10007480:	2c2d883a 	add	r22,r5,r16
10007484:	b1c03216 	blt	r22,r7,10007550 <_realloc_r+0x2b8>
10007488:	b8800317 	ldw	r2,12(r23)
1000748c:	b8c00217 	ldw	r3,8(r23)
10007490:	81bfff04 	addi	r6,r16,-4
10007494:	01000904 	movi	r4,36
10007498:	18800315 	stw	r2,12(r3)
1000749c:	10c00215 	stw	r3,8(r2)
100074a0:	bc400204 	addi	r17,r23,8
100074a4:	2180ac36 	bltu	r4,r6,10007758 <_realloc_r+0x4c0>
100074a8:	008004c4 	movi	r2,19
100074ac:	1180972e 	bgeu	r2,r6,1000770c <_realloc_r+0x474>
100074b0:	98800017 	ldw	r2,0(r19)
100074b4:	b8800215 	stw	r2,8(r23)
100074b8:	98800117 	ldw	r2,4(r19)
100074bc:	b8800315 	stw	r2,12(r23)
100074c0:	008006c4 	movi	r2,27
100074c4:	1180b92e 	bgeu	r2,r6,100077ac <_realloc_r+0x514>
100074c8:	98800217 	ldw	r2,8(r19)
100074cc:	b8800415 	stw	r2,16(r23)
100074d0:	98800317 	ldw	r2,12(r19)
100074d4:	b8800515 	stw	r2,20(r23)
100074d8:	313fbe26 	beq	r6,r4,100073d4 <__alt_data_end+0xf80073d4>
100074dc:	b8c00604 	addi	r3,r23,24
100074e0:	9cc00404 	addi	r19,r19,16
100074e4:	98800017 	ldw	r2,0(r19)
100074e8:	b021883a 	mov	r16,r22
100074ec:	b82b883a 	mov	r21,r23
100074f0:	18800015 	stw	r2,0(r3)
100074f4:	98800117 	ldw	r2,4(r19)
100074f8:	18800115 	stw	r2,4(r3)
100074fc:	98800217 	ldw	r2,8(r19)
10007500:	18800215 	stw	r2,8(r3)
10007504:	b8c00117 	ldw	r3,4(r23)
10007508:	003fbd06 	br	10007400 <__alt_data_end+0xf8007400>
1000750c:	00800304 	movi	r2,12
10007510:	90800015 	stw	r2,0(r18)
10007514:	0005883a 	mov	r2,zero
10007518:	003fc606 	br	10007434 <__alt_data_end+0xf8007434>
1000751c:	1d06b03a 	or	r3,r3,r20
10007520:	ad0b883a 	add	r5,r21,r20
10007524:	a8c00115 	stw	r3,4(r21)
10007528:	38800054 	ori	r2,r7,1
1000752c:	28800115 	stw	r2,4(r5)
10007530:	29cf883a 	add	r7,r5,r7
10007534:	38800117 	ldw	r2,4(r7)
10007538:	9009883a 	mov	r4,r18
1000753c:	29400204 	addi	r5,r5,8
10007540:	10800054 	ori	r2,r2,1
10007544:	38800115 	stw	r2,4(r7)
10007548:	0004a6c0 	call	10004a6c <_free_r>
1000754c:	003fb606 	br	10007428 <__alt_data_end+0xf8007428>
10007550:	880b883a 	mov	r5,r17
10007554:	9009883a 	mov	r4,r18
10007558:	00056080 	call	10005608 <_malloc_r>
1000755c:	1023883a 	mov	r17,r2
10007560:	1000aa26 	beq	r2,zero,1000780c <_realloc_r+0x574>
10007564:	98ffff17 	ldw	r3,-4(r19)
10007568:	113ffe04 	addi	r4,r2,-8
1000756c:	00bfff84 	movi	r2,-2
10007570:	1884703a 	and	r2,r3,r2
10007574:	a885883a 	add	r2,r21,r2
10007578:	20808626 	beq	r4,r2,10007794 <_realloc_r+0x4fc>
1000757c:	81bfff04 	addi	r6,r16,-4
10007580:	00800904 	movi	r2,36
10007584:	11807036 	bltu	r2,r6,10007748 <_realloc_r+0x4b0>
10007588:	00c004c4 	movi	r3,19
1000758c:	19805636 	bltu	r3,r6,100076e8 <_realloc_r+0x450>
10007590:	8805883a 	mov	r2,r17
10007594:	9807883a 	mov	r3,r19
10007598:	19000017 	ldw	r4,0(r3)
1000759c:	11000015 	stw	r4,0(r2)
100075a0:	19000117 	ldw	r4,4(r3)
100075a4:	11000115 	stw	r4,4(r2)
100075a8:	18c00217 	ldw	r3,8(r3)
100075ac:	10c00215 	stw	r3,8(r2)
100075b0:	980b883a 	mov	r5,r19
100075b4:	9009883a 	mov	r4,r18
100075b8:	0004a6c0 	call	10004a6c <_free_r>
100075bc:	9009883a 	mov	r4,r18
100075c0:	000d50c0 	call	1000d50c <__malloc_unlock>
100075c4:	8805883a 	mov	r2,r17
100075c8:	003f9a06 	br	10007434 <__alt_data_end+0xf8007434>
100075cc:	300b883a 	mov	r5,r6
100075d0:	dfc00917 	ldw	ra,36(sp)
100075d4:	df000817 	ldw	fp,32(sp)
100075d8:	ddc00717 	ldw	r23,28(sp)
100075dc:	dd800617 	ldw	r22,24(sp)
100075e0:	dd400517 	ldw	r21,20(sp)
100075e4:	dd000417 	ldw	r20,16(sp)
100075e8:	dcc00317 	ldw	r19,12(sp)
100075ec:	dc800217 	ldw	r18,8(sp)
100075f0:	dc400117 	ldw	r17,4(sp)
100075f4:	dc000017 	ldw	r16,0(sp)
100075f8:	dec00a04 	addi	sp,sp,40
100075fc:	00056081 	jmpi	10005608 <_malloc_r>
10007600:	11400317 	ldw	r5,12(r2)
10007604:	10800217 	ldw	r2,8(r2)
10007608:	9823883a 	mov	r17,r19
1000760c:	2021883a 	mov	r16,r4
10007610:	11400315 	stw	r5,12(r2)
10007614:	28800215 	stw	r2,8(r5)
10007618:	003f7906 	br	10007400 <__alt_data_end+0xf8007400>
1000761c:	21000117 	ldw	r4,4(r4)
10007620:	00bfff04 	movi	r2,-4
10007624:	a1800404 	addi	r6,r20,16
10007628:	2088703a 	and	r4,r4,r2
1000762c:	2409883a 	add	r4,r4,r16
10007630:	2180380e 	bge	r4,r6,10007714 <_realloc_r+0x47c>
10007634:	18c0004c 	andi	r3,r3,1
10007638:	183fc51e 	bne	r3,zero,10007550 <__alt_data_end+0xf8007550>
1000763c:	9dfffe17 	ldw	r23,-8(r19)
10007640:	adefc83a 	sub	r23,r21,r23
10007644:	b9400117 	ldw	r5,4(r23)
10007648:	288a703a 	and	r5,r5,r2
1000764c:	216d883a 	add	r22,r4,r5
10007650:	b1bf8b16 	blt	r22,r6,10007480 <__alt_data_end+0xf8007480>
10007654:	b8800317 	ldw	r2,12(r23)
10007658:	b8c00217 	ldw	r3,8(r23)
1000765c:	81bfff04 	addi	r6,r16,-4
10007660:	01000904 	movi	r4,36
10007664:	18800315 	stw	r2,12(r3)
10007668:	10c00215 	stw	r3,8(r2)
1000766c:	bc400204 	addi	r17,r23,8
10007670:	21805a36 	bltu	r4,r6,100077dc <_realloc_r+0x544>
10007674:	008004c4 	movi	r2,19
10007678:	1180562e 	bgeu	r2,r6,100077d4 <_realloc_r+0x53c>
1000767c:	98800017 	ldw	r2,0(r19)
10007680:	b8800215 	stw	r2,8(r23)
10007684:	98800117 	ldw	r2,4(r19)
10007688:	b8800315 	stw	r2,12(r23)
1000768c:	008006c4 	movi	r2,27
10007690:	11805636 	bltu	r2,r6,100077ec <_realloc_r+0x554>
10007694:	b8800404 	addi	r2,r23,16
10007698:	9cc00204 	addi	r19,r19,8
1000769c:	98c00017 	ldw	r3,0(r19)
100076a0:	10c00015 	stw	r3,0(r2)
100076a4:	98c00117 	ldw	r3,4(r19)
100076a8:	10c00115 	stw	r3,4(r2)
100076ac:	98c00217 	ldw	r3,8(r19)
100076b0:	10c00215 	stw	r3,8(r2)
100076b4:	bd07883a 	add	r3,r23,r20
100076b8:	b505c83a 	sub	r2,r22,r20
100076bc:	e0c00215 	stw	r3,8(fp)
100076c0:	10800054 	ori	r2,r2,1
100076c4:	18800115 	stw	r2,4(r3)
100076c8:	b8800117 	ldw	r2,4(r23)
100076cc:	9009883a 	mov	r4,r18
100076d0:	1080004c 	andi	r2,r2,1
100076d4:	a0a8b03a 	or	r20,r20,r2
100076d8:	bd000115 	stw	r20,4(r23)
100076dc:	000d50c0 	call	1000d50c <__malloc_unlock>
100076e0:	8805883a 	mov	r2,r17
100076e4:	003f5306 	br	10007434 <__alt_data_end+0xf8007434>
100076e8:	98c00017 	ldw	r3,0(r19)
100076ec:	88c00015 	stw	r3,0(r17)
100076f0:	98c00117 	ldw	r3,4(r19)
100076f4:	88c00115 	stw	r3,4(r17)
100076f8:	00c006c4 	movi	r3,27
100076fc:	19801d36 	bltu	r3,r6,10007774 <_realloc_r+0x4dc>
10007700:	88800204 	addi	r2,r17,8
10007704:	98c00204 	addi	r3,r19,8
10007708:	003fa306 	br	10007598 <__alt_data_end+0xf8007598>
1000770c:	8807883a 	mov	r3,r17
10007710:	003f7406 	br	100074e4 <__alt_data_end+0xf80074e4>
10007714:	ad2b883a 	add	r21,r21,r20
10007718:	2505c83a 	sub	r2,r4,r20
1000771c:	e5400215 	stw	r21,8(fp)
10007720:	10800054 	ori	r2,r2,1
10007724:	a8800115 	stw	r2,4(r21)
10007728:	98bfff17 	ldw	r2,-4(r19)
1000772c:	9009883a 	mov	r4,r18
10007730:	1080004c 	andi	r2,r2,1
10007734:	a0a8b03a 	or	r20,r20,r2
10007738:	9d3fff15 	stw	r20,-4(r19)
1000773c:	000d50c0 	call	1000d50c <__malloc_unlock>
10007740:	9805883a 	mov	r2,r19
10007744:	003f3b06 	br	10007434 <__alt_data_end+0xf8007434>
10007748:	8809883a 	mov	r4,r17
1000774c:	980b883a 	mov	r5,r19
10007750:	0005fd00 	call	10005fd0 <memmove>
10007754:	003f9606 	br	100075b0 <__alt_data_end+0xf80075b0>
10007758:	8809883a 	mov	r4,r17
1000775c:	980b883a 	mov	r5,r19
10007760:	0005fd00 	call	10005fd0 <memmove>
10007764:	b8c00117 	ldw	r3,4(r23)
10007768:	b021883a 	mov	r16,r22
1000776c:	b82b883a 	mov	r21,r23
10007770:	003f2306 	br	10007400 <__alt_data_end+0xf8007400>
10007774:	98c00217 	ldw	r3,8(r19)
10007778:	88c00215 	stw	r3,8(r17)
1000777c:	98c00317 	ldw	r3,12(r19)
10007780:	88c00315 	stw	r3,12(r17)
10007784:	30800c26 	beq	r6,r2,100077b8 <_realloc_r+0x520>
10007788:	88800404 	addi	r2,r17,16
1000778c:	98c00404 	addi	r3,r19,16
10007790:	003f8106 	br	10007598 <__alt_data_end+0xf8007598>
10007794:	893fff17 	ldw	r4,-4(r17)
10007798:	00bfff04 	movi	r2,-4
1000779c:	9823883a 	mov	r17,r19
100077a0:	2084703a 	and	r2,r4,r2
100077a4:	80a1883a 	add	r16,r16,r2
100077a8:	003f1506 	br	10007400 <__alt_data_end+0xf8007400>
100077ac:	b8c00404 	addi	r3,r23,16
100077b0:	9cc00204 	addi	r19,r19,8
100077b4:	003f4b06 	br	100074e4 <__alt_data_end+0xf80074e4>
100077b8:	99000417 	ldw	r4,16(r19)
100077bc:	88800604 	addi	r2,r17,24
100077c0:	98c00604 	addi	r3,r19,24
100077c4:	89000415 	stw	r4,16(r17)
100077c8:	99000517 	ldw	r4,20(r19)
100077cc:	89000515 	stw	r4,20(r17)
100077d0:	003f7106 	br	10007598 <__alt_data_end+0xf8007598>
100077d4:	8805883a 	mov	r2,r17
100077d8:	003fb006 	br	1000769c <__alt_data_end+0xf800769c>
100077dc:	8809883a 	mov	r4,r17
100077e0:	980b883a 	mov	r5,r19
100077e4:	0005fd00 	call	10005fd0 <memmove>
100077e8:	003fb206 	br	100076b4 <__alt_data_end+0xf80076b4>
100077ec:	98800217 	ldw	r2,8(r19)
100077f0:	b8800415 	stw	r2,16(r23)
100077f4:	98800317 	ldw	r2,12(r19)
100077f8:	b8800515 	stw	r2,20(r23)
100077fc:	31000726 	beq	r6,r4,1000781c <_realloc_r+0x584>
10007800:	b8800604 	addi	r2,r23,24
10007804:	9cc00404 	addi	r19,r19,16
10007808:	003fa406 	br	1000769c <__alt_data_end+0xf800769c>
1000780c:	9009883a 	mov	r4,r18
10007810:	000d50c0 	call	1000d50c <__malloc_unlock>
10007814:	0005883a 	mov	r2,zero
10007818:	003f0606 	br	10007434 <__alt_data_end+0xf8007434>
1000781c:	98c00417 	ldw	r3,16(r19)
10007820:	9cc00604 	addi	r19,r19,24
10007824:	b8800804 	addi	r2,r23,32
10007828:	b8c00615 	stw	r3,24(r23)
1000782c:	98ffff17 	ldw	r3,-4(r19)
10007830:	b8c00715 	stw	r3,28(r23)
10007834:	003f9906 	br	1000769c <__alt_data_end+0xf800769c>

10007838 <__fpclassifyd>:
10007838:	00a00034 	movhi	r2,32768
1000783c:	10bfffc4 	addi	r2,r2,-1
10007840:	2884703a 	and	r2,r5,r2
10007844:	10000726 	beq	r2,zero,10007864 <__fpclassifyd+0x2c>
10007848:	00fffc34 	movhi	r3,65520
1000784c:	019ff834 	movhi	r6,32736
10007850:	28c7883a 	add	r3,r5,r3
10007854:	31bfffc4 	addi	r6,r6,-1
10007858:	30c00536 	bltu	r6,r3,10007870 <__fpclassifyd+0x38>
1000785c:	00800104 	movi	r2,4
10007860:	f800283a 	ret
10007864:	2000021e 	bne	r4,zero,10007870 <__fpclassifyd+0x38>
10007868:	00800084 	movi	r2,2
1000786c:	f800283a 	ret
10007870:	00dffc34 	movhi	r3,32752
10007874:	019ff834 	movhi	r6,32736
10007878:	28cb883a 	add	r5,r5,r3
1000787c:	31bfffc4 	addi	r6,r6,-1
10007880:	317ff62e 	bgeu	r6,r5,1000785c <__alt_data_end+0xf800785c>
10007884:	01400434 	movhi	r5,16
10007888:	297fffc4 	addi	r5,r5,-1
1000788c:	28800236 	bltu	r5,r2,10007898 <__fpclassifyd+0x60>
10007890:	008000c4 	movi	r2,3
10007894:	f800283a 	ret
10007898:	10c00226 	beq	r2,r3,100078a4 <__fpclassifyd+0x6c>
1000789c:	0005883a 	mov	r2,zero
100078a0:	f800283a 	ret
100078a4:	2005003a 	cmpeq	r2,r4,zero
100078a8:	f800283a 	ret

100078ac <_sbrk_r>:
100078ac:	defffd04 	addi	sp,sp,-12
100078b0:	dc000015 	stw	r16,0(sp)
100078b4:	04040074 	movhi	r16,4097
100078b8:	dc400115 	stw	r17,4(sp)
100078bc:	840bf904 	addi	r16,r16,12260
100078c0:	2023883a 	mov	r17,r4
100078c4:	2809883a 	mov	r4,r5
100078c8:	dfc00215 	stw	ra,8(sp)
100078cc:	80000015 	stw	zero,0(r16)
100078d0:	000d7000 	call	1000d700 <sbrk>
100078d4:	00ffffc4 	movi	r3,-1
100078d8:	10c00526 	beq	r2,r3,100078f0 <_sbrk_r+0x44>
100078dc:	dfc00217 	ldw	ra,8(sp)
100078e0:	dc400117 	ldw	r17,4(sp)
100078e4:	dc000017 	ldw	r16,0(sp)
100078e8:	dec00304 	addi	sp,sp,12
100078ec:	f800283a 	ret
100078f0:	80c00017 	ldw	r3,0(r16)
100078f4:	183ff926 	beq	r3,zero,100078dc <__alt_data_end+0xf80078dc>
100078f8:	88c00015 	stw	r3,0(r17)
100078fc:	003ff706 	br	100078dc <__alt_data_end+0xf80078dc>

10007900 <__sread>:
10007900:	defffe04 	addi	sp,sp,-8
10007904:	dc000015 	stw	r16,0(sp)
10007908:	2821883a 	mov	r16,r5
1000790c:	2940038f 	ldh	r5,14(r5)
10007910:	dfc00115 	stw	ra,4(sp)
10007914:	00095bc0 	call	100095bc <_read_r>
10007918:	10000716 	blt	r2,zero,10007938 <__sread+0x38>
1000791c:	80c01417 	ldw	r3,80(r16)
10007920:	1887883a 	add	r3,r3,r2
10007924:	80c01415 	stw	r3,80(r16)
10007928:	dfc00117 	ldw	ra,4(sp)
1000792c:	dc000017 	ldw	r16,0(sp)
10007930:	dec00204 	addi	sp,sp,8
10007934:	f800283a 	ret
10007938:	80c0030b 	ldhu	r3,12(r16)
1000793c:	18fbffcc 	andi	r3,r3,61439
10007940:	80c0030d 	sth	r3,12(r16)
10007944:	dfc00117 	ldw	ra,4(sp)
10007948:	dc000017 	ldw	r16,0(sp)
1000794c:	dec00204 	addi	sp,sp,8
10007950:	f800283a 	ret

10007954 <__seofread>:
10007954:	0005883a 	mov	r2,zero
10007958:	f800283a 	ret

1000795c <__swrite>:
1000795c:	2880030b 	ldhu	r2,12(r5)
10007960:	defffb04 	addi	sp,sp,-20
10007964:	dcc00315 	stw	r19,12(sp)
10007968:	dc800215 	stw	r18,8(sp)
1000796c:	dc400115 	stw	r17,4(sp)
10007970:	dc000015 	stw	r16,0(sp)
10007974:	dfc00415 	stw	ra,16(sp)
10007978:	10c0400c 	andi	r3,r2,256
1000797c:	2821883a 	mov	r16,r5
10007980:	2027883a 	mov	r19,r4
10007984:	3025883a 	mov	r18,r6
10007988:	3823883a 	mov	r17,r7
1000798c:	18000526 	beq	r3,zero,100079a4 <__swrite+0x48>
10007990:	2940038f 	ldh	r5,14(r5)
10007994:	000d883a 	mov	r6,zero
10007998:	01c00084 	movi	r7,2
1000799c:	00095600 	call	10009560 <_lseek_r>
100079a0:	8080030b 	ldhu	r2,12(r16)
100079a4:	8140038f 	ldh	r5,14(r16)
100079a8:	10bbffcc 	andi	r2,r2,61439
100079ac:	9809883a 	mov	r4,r19
100079b0:	900d883a 	mov	r6,r18
100079b4:	880f883a 	mov	r7,r17
100079b8:	8080030d 	sth	r2,12(r16)
100079bc:	dfc00417 	ldw	ra,16(sp)
100079c0:	dcc00317 	ldw	r19,12(sp)
100079c4:	dc800217 	ldw	r18,8(sp)
100079c8:	dc400117 	ldw	r17,4(sp)
100079cc:	dc000017 	ldw	r16,0(sp)
100079d0:	dec00504 	addi	sp,sp,20
100079d4:	000903c1 	jmpi	1000903c <_write_r>

100079d8 <__sseek>:
100079d8:	defffe04 	addi	sp,sp,-8
100079dc:	dc000015 	stw	r16,0(sp)
100079e0:	2821883a 	mov	r16,r5
100079e4:	2940038f 	ldh	r5,14(r5)
100079e8:	dfc00115 	stw	ra,4(sp)
100079ec:	00095600 	call	10009560 <_lseek_r>
100079f0:	00ffffc4 	movi	r3,-1
100079f4:	10c00826 	beq	r2,r3,10007a18 <__sseek+0x40>
100079f8:	80c0030b 	ldhu	r3,12(r16)
100079fc:	80801415 	stw	r2,80(r16)
10007a00:	18c40014 	ori	r3,r3,4096
10007a04:	80c0030d 	sth	r3,12(r16)
10007a08:	dfc00117 	ldw	ra,4(sp)
10007a0c:	dc000017 	ldw	r16,0(sp)
10007a10:	dec00204 	addi	sp,sp,8
10007a14:	f800283a 	ret
10007a18:	80c0030b 	ldhu	r3,12(r16)
10007a1c:	18fbffcc 	andi	r3,r3,61439
10007a20:	80c0030d 	sth	r3,12(r16)
10007a24:	dfc00117 	ldw	ra,4(sp)
10007a28:	dc000017 	ldw	r16,0(sp)
10007a2c:	dec00204 	addi	sp,sp,8
10007a30:	f800283a 	ret

10007a34 <__sclose>:
10007a34:	2940038f 	ldh	r5,14(r5)
10007a38:	00090981 	jmpi	10009098 <_close_r>

10007a3c <strcmp>:
10007a3c:	2144b03a 	or	r2,r4,r5
10007a40:	108000cc 	andi	r2,r2,3
10007a44:	1000171e 	bne	r2,zero,10007aa4 <strcmp+0x68>
10007a48:	20800017 	ldw	r2,0(r4)
10007a4c:	28c00017 	ldw	r3,0(r5)
10007a50:	10c0141e 	bne	r2,r3,10007aa4 <strcmp+0x68>
10007a54:	027fbff4 	movhi	r9,65279
10007a58:	4a7fbfc4 	addi	r9,r9,-257
10007a5c:	0086303a 	nor	r3,zero,r2
10007a60:	02202074 	movhi	r8,32897
10007a64:	1245883a 	add	r2,r2,r9
10007a68:	42202004 	addi	r8,r8,-32640
10007a6c:	10c4703a 	and	r2,r2,r3
10007a70:	1204703a 	and	r2,r2,r8
10007a74:	10000226 	beq	r2,zero,10007a80 <strcmp+0x44>
10007a78:	00001706 	br	10007ad8 <strcmp+0x9c>
10007a7c:	1000161e 	bne	r2,zero,10007ad8 <strcmp+0x9c>
10007a80:	21000104 	addi	r4,r4,4
10007a84:	20c00017 	ldw	r3,0(r4)
10007a88:	29400104 	addi	r5,r5,4
10007a8c:	29800017 	ldw	r6,0(r5)
10007a90:	1a4f883a 	add	r7,r3,r9
10007a94:	00c4303a 	nor	r2,zero,r3
10007a98:	3884703a 	and	r2,r7,r2
10007a9c:	1204703a 	and	r2,r2,r8
10007aa0:	19bff626 	beq	r3,r6,10007a7c <__alt_data_end+0xf8007a7c>
10007aa4:	20800007 	ldb	r2,0(r4)
10007aa8:	1000051e 	bne	r2,zero,10007ac0 <strcmp+0x84>
10007aac:	00000606 	br	10007ac8 <strcmp+0x8c>
10007ab0:	21000044 	addi	r4,r4,1
10007ab4:	20800007 	ldb	r2,0(r4)
10007ab8:	29400044 	addi	r5,r5,1
10007abc:	10000226 	beq	r2,zero,10007ac8 <strcmp+0x8c>
10007ac0:	28c00007 	ldb	r3,0(r5)
10007ac4:	10fffa26 	beq	r2,r3,10007ab0 <__alt_data_end+0xf8007ab0>
10007ac8:	20800003 	ldbu	r2,0(r4)
10007acc:	28c00003 	ldbu	r3,0(r5)
10007ad0:	10c5c83a 	sub	r2,r2,r3
10007ad4:	f800283a 	ret
10007ad8:	0005883a 	mov	r2,zero
10007adc:	f800283a 	ret

10007ae0 <__sprint_r.part.0>:
10007ae0:	28801917 	ldw	r2,100(r5)
10007ae4:	defff604 	addi	sp,sp,-40
10007ae8:	dd400515 	stw	r21,20(sp)
10007aec:	dcc00315 	stw	r19,12(sp)
10007af0:	dfc00915 	stw	ra,36(sp)
10007af4:	df000815 	stw	fp,32(sp)
10007af8:	ddc00715 	stw	r23,28(sp)
10007afc:	dd800615 	stw	r22,24(sp)
10007b00:	dd000415 	stw	r20,16(sp)
10007b04:	dc800215 	stw	r18,8(sp)
10007b08:	dc400115 	stw	r17,4(sp)
10007b0c:	dc000015 	stw	r16,0(sp)
10007b10:	1088000c 	andi	r2,r2,8192
10007b14:	2827883a 	mov	r19,r5
10007b18:	302b883a 	mov	r21,r6
10007b1c:	10002d26 	beq	r2,zero,10007bd4 <__sprint_r.part.0+0xf4>
10007b20:	30800217 	ldw	r2,8(r6)
10007b24:	35800017 	ldw	r22,0(r6)
10007b28:	10002826 	beq	r2,zero,10007bcc <__sprint_r.part.0+0xec>
10007b2c:	2029883a 	mov	r20,r4
10007b30:	b5c00104 	addi	r23,r22,4
10007b34:	04bfffc4 	movi	r18,-1
10007b38:	bc400017 	ldw	r17,0(r23)
10007b3c:	b4000017 	ldw	r16,0(r22)
10007b40:	0039883a 	mov	fp,zero
10007b44:	8822d0ba 	srli	r17,r17,2
10007b48:	04400316 	blt	zero,r17,10007b58 <__sprint_r.part.0+0x78>
10007b4c:	00001706 	br	10007bac <__sprint_r.part.0+0xcc>
10007b50:	84000104 	addi	r16,r16,4
10007b54:	8f001526 	beq	r17,fp,10007bac <__sprint_r.part.0+0xcc>
10007b58:	81400017 	ldw	r5,0(r16)
10007b5c:	a009883a 	mov	r4,r20
10007b60:	980d883a 	mov	r6,r19
10007b64:	00092d80 	call	100092d8 <_fputwc_r>
10007b68:	e7000044 	addi	fp,fp,1
10007b6c:	14bff81e 	bne	r2,r18,10007b50 <__alt_data_end+0xf8007b50>
10007b70:	9005883a 	mov	r2,r18
10007b74:	a8000215 	stw	zero,8(r21)
10007b78:	a8000115 	stw	zero,4(r21)
10007b7c:	dfc00917 	ldw	ra,36(sp)
10007b80:	df000817 	ldw	fp,32(sp)
10007b84:	ddc00717 	ldw	r23,28(sp)
10007b88:	dd800617 	ldw	r22,24(sp)
10007b8c:	dd400517 	ldw	r21,20(sp)
10007b90:	dd000417 	ldw	r20,16(sp)
10007b94:	dcc00317 	ldw	r19,12(sp)
10007b98:	dc800217 	ldw	r18,8(sp)
10007b9c:	dc400117 	ldw	r17,4(sp)
10007ba0:	dc000017 	ldw	r16,0(sp)
10007ba4:	dec00a04 	addi	sp,sp,40
10007ba8:	f800283a 	ret
10007bac:	a8c00217 	ldw	r3,8(r21)
10007bb0:	8c63883a 	add	r17,r17,r17
10007bb4:	8c63883a 	add	r17,r17,r17
10007bb8:	1c45c83a 	sub	r2,r3,r17
10007bbc:	a8800215 	stw	r2,8(r21)
10007bc0:	b5800204 	addi	r22,r22,8
10007bc4:	bdc00204 	addi	r23,r23,8
10007bc8:	103fdb1e 	bne	r2,zero,10007b38 <__alt_data_end+0xf8007b38>
10007bcc:	0005883a 	mov	r2,zero
10007bd0:	003fe806 	br	10007b74 <__alt_data_end+0xf8007b74>
10007bd4:	0004d5c0 	call	10004d5c <__sfvwrite_r>
10007bd8:	003fe606 	br	10007b74 <__alt_data_end+0xf8007b74>

10007bdc <__sprint_r>:
10007bdc:	30c00217 	ldw	r3,8(r6)
10007be0:	18000126 	beq	r3,zero,10007be8 <__sprint_r+0xc>
10007be4:	0007ae01 	jmpi	10007ae0 <__sprint_r.part.0>
10007be8:	30000115 	stw	zero,4(r6)
10007bec:	0005883a 	mov	r2,zero
10007bf0:	f800283a 	ret

10007bf4 <___vfiprintf_internal_r>:
10007bf4:	defeca04 	addi	sp,sp,-1240
10007bf8:	dcc12f15 	stw	r19,1212(sp)
10007bfc:	dfc13515 	stw	ra,1236(sp)
10007c00:	df013415 	stw	fp,1232(sp)
10007c04:	ddc13315 	stw	r23,1228(sp)
10007c08:	dd813215 	stw	r22,1224(sp)
10007c0c:	dd413115 	stw	r21,1220(sp)
10007c10:	dd013015 	stw	r20,1216(sp)
10007c14:	dc812e15 	stw	r18,1208(sp)
10007c18:	dc412d15 	stw	r17,1204(sp)
10007c1c:	dc012c15 	stw	r16,1200(sp)
10007c20:	d9012115 	stw	r4,1156(sp)
10007c24:	d9412015 	stw	r5,1152(sp)
10007c28:	d9c12315 	stw	r7,1164(sp)
10007c2c:	3027883a 	mov	r19,r6
10007c30:	20000226 	beq	r4,zero,10007c3c <___vfiprintf_internal_r+0x48>
10007c34:	20800e17 	ldw	r2,56(r4)
10007c38:	1000f726 	beq	r2,zero,10008018 <___vfiprintf_internal_r+0x424>
10007c3c:	d8812017 	ldw	r2,1152(sp)
10007c40:	10c0030b 	ldhu	r3,12(r2)
10007c44:	1908000c 	andi	r4,r3,8192
10007c48:	1805883a 	mov	r2,r3
10007c4c:	2000081e 	bne	r4,zero,10007c70 <___vfiprintf_internal_r+0x7c>
10007c50:	d9412017 	ldw	r5,1152(sp)
10007c54:	18880014 	ori	r2,r3,8192
10007c58:	00f7ffc4 	movi	r3,-8193
10007c5c:	29001917 	ldw	r4,100(r5)
10007c60:	2880030d 	sth	r2,12(r5)
10007c64:	20c8703a 	and	r4,r4,r3
10007c68:	29001915 	stw	r4,100(r5)
10007c6c:	1007883a 	mov	r3,r2
10007c70:	1100020c 	andi	r4,r2,8
10007c74:	2000a726 	beq	r4,zero,10007f14 <___vfiprintf_internal_r+0x320>
10007c78:	d9412017 	ldw	r5,1152(sp)
10007c7c:	29000417 	ldw	r4,16(r5)
10007c80:	2000a426 	beq	r4,zero,10007f14 <___vfiprintf_internal_r+0x320>
10007c84:	1080068c 	andi	r2,r2,26
10007c88:	01000284 	movi	r4,10
10007c8c:	1100ab26 	beq	r2,r4,10007f3c <___vfiprintf_internal_r+0x348>
10007c90:	d9010a04 	addi	r4,sp,1064
10007c94:	d94109c4 	addi	r5,sp,1063
10007c98:	07040074 	movhi	fp,4097
10007c9c:	04440074 	movhi	r17,4097
10007ca0:	2145c83a 	sub	r2,r4,r5
10007ca4:	e73e2c04 	addi	fp,fp,-1872
10007ca8:	8c7e2804 	addi	r17,r17,-1888
10007cac:	d9011e15 	stw	r4,1144(sp)
10007cb0:	d9411f15 	stw	r5,1148(sp)
10007cb4:	dec11a15 	stw	sp,1128(sp)
10007cb8:	d8011c15 	stw	zero,1136(sp)
10007cbc:	d8011b15 	stw	zero,1132(sp)
10007cc0:	d8012715 	stw	zero,1180(sp)
10007cc4:	d8012515 	stw	zero,1172(sp)
10007cc8:	d811883a 	mov	r8,sp
10007ccc:	d8812815 	stw	r2,1184(sp)
10007cd0:	982f883a 	mov	r23,r19
10007cd4:	b8800007 	ldb	r2,0(r23)
10007cd8:	1003b026 	beq	r2,zero,10008b9c <___vfiprintf_internal_r+0xfa8>
10007cdc:	01000944 	movi	r4,37
10007ce0:	1103ae26 	beq	r2,r4,10008b9c <___vfiprintf_internal_r+0xfa8>
10007ce4:	b805883a 	mov	r2,r23
10007ce8:	00000106 	br	10007cf0 <___vfiprintf_internal_r+0xfc>
10007cec:	19000326 	beq	r3,r4,10007cfc <___vfiprintf_internal_r+0x108>
10007cf0:	10800044 	addi	r2,r2,1
10007cf4:	10c00007 	ldb	r3,0(r2)
10007cf8:	183ffc1e 	bne	r3,zero,10007cec <__alt_data_end+0xf8007cec>
10007cfc:	15e1c83a 	sub	r16,r2,r23
10007d00:	1029883a 	mov	r20,r2
10007d04:	80001026 	beq	r16,zero,10007d48 <___vfiprintf_internal_r+0x154>
10007d08:	d8c11c17 	ldw	r3,1136(sp)
10007d0c:	d8811b17 	ldw	r2,1132(sp)
10007d10:	45c00015 	stw	r23,0(r8)
10007d14:	80c7883a 	add	r3,r16,r3
10007d18:	10800044 	addi	r2,r2,1
10007d1c:	44000115 	stw	r16,4(r8)
10007d20:	d8c11c15 	stw	r3,1136(sp)
10007d24:	d8811b15 	stw	r2,1132(sp)
10007d28:	010001c4 	movi	r4,7
10007d2c:	2080740e 	bge	r4,r2,10007f00 <___vfiprintf_internal_r+0x30c>
10007d30:	1803a71e 	bne	r3,zero,10008bd0 <___vfiprintf_internal_r+0xfdc>
10007d34:	d8c12517 	ldw	r3,1172(sp)
10007d38:	d8011b15 	stw	zero,1132(sp)
10007d3c:	d811883a 	mov	r8,sp
10007d40:	1c07883a 	add	r3,r3,r16
10007d44:	d8c12515 	stw	r3,1172(sp)
10007d48:	a0800007 	ldb	r2,0(r20)
10007d4c:	1002bf26 	beq	r2,zero,1000884c <___vfiprintf_internal_r+0xc58>
10007d50:	a5c00044 	addi	r23,r20,1
10007d54:	a1800047 	ldb	r6,1(r20)
10007d58:	d8011d85 	stb	zero,1142(sp)
10007d5c:	d8012205 	stb	zero,1160(sp)
10007d60:	043fffc4 	movi	r16,-1
10007d64:	d8012415 	stw	zero,1168(sp)
10007d68:	0025883a 	mov	r18,zero
10007d6c:	05001604 	movi	r20,88
10007d70:	05400244 	movi	r21,9
10007d74:	4027883a 	mov	r19,r8
10007d78:	bdc00044 	addi	r23,r23,1
10007d7c:	30bff804 	addi	r2,r6,-32
10007d80:	a0825636 	bltu	r20,r2,100086dc <___vfiprintf_internal_r+0xae8>
10007d84:	100490ba 	slli	r2,r2,2
10007d88:	01040034 	movhi	r4,4096
10007d8c:	211f6704 	addi	r4,r4,32156
10007d90:	1105883a 	add	r2,r2,r4
10007d94:	10800017 	ldw	r2,0(r2)
10007d98:	1000683a 	jmp	r2
10007d9c:	1000866c 	andhi	zero,r2,537
10007da0:	100086dc 	xori	zero,r2,539
10007da4:	100086dc 	xori	zero,r2,539
10007da8:	100086d0 	cmplti	zero,r2,539
10007dac:	100086dc 	xori	zero,r2,539
10007db0:	100086dc 	xori	zero,r2,539
10007db4:	100086dc 	xori	zero,r2,539
10007db8:	100086dc 	xori	zero,r2,539
10007dbc:	100086dc 	xori	zero,r2,539
10007dc0:	100086dc 	xori	zero,r2,539
10007dc4:	1000845c 	xori	zero,r2,529
10007dc8:	10008684 	addi	zero,r2,538
10007dcc:	100086dc 	xori	zero,r2,539
10007dd0:	10008030 	cmpltui	zero,r2,512
10007dd4:	10008480 	call	11000848 <_gp+0xfe73a8>
10007dd8:	100086dc 	xori	zero,r2,539
10007ddc:	1000803c 	xorhi	zero,r2,512
10007de0:	10008048 	cmpgei	zero,r2,513
10007de4:	10008048 	cmpgei	zero,r2,513
10007de8:	10008048 	cmpgei	zero,r2,513
10007dec:	10008048 	cmpgei	zero,r2,513
10007df0:	10008048 	cmpgei	zero,r2,513
10007df4:	10008048 	cmpgei	zero,r2,513
10007df8:	10008048 	cmpgei	zero,r2,513
10007dfc:	10008048 	cmpgei	zero,r2,513
10007e00:	10008048 	cmpgei	zero,r2,513
10007e04:	100086dc 	xori	zero,r2,539
10007e08:	100086dc 	xori	zero,r2,539
10007e0c:	100086dc 	xori	zero,r2,539
10007e10:	100086dc 	xori	zero,r2,539
10007e14:	100086dc 	xori	zero,r2,539
10007e18:	100086dc 	xori	zero,r2,539
10007e1c:	100086dc 	xori	zero,r2,539
10007e20:	100086dc 	xori	zero,r2,539
10007e24:	100086dc 	xori	zero,r2,539
10007e28:	100086dc 	xori	zero,r2,539
10007e2c:	10008088 	cmpgei	zero,r2,514
10007e30:	100086dc 	xori	zero,r2,539
10007e34:	100086dc 	xori	zero,r2,539
10007e38:	100086dc 	xori	zero,r2,539
10007e3c:	100086dc 	xori	zero,r2,539
10007e40:	100086dc 	xori	zero,r2,539
10007e44:	100086dc 	xori	zero,r2,539
10007e48:	100086dc 	xori	zero,r2,539
10007e4c:	100086dc 	xori	zero,r2,539
10007e50:	100086dc 	xori	zero,r2,539
10007e54:	100086dc 	xori	zero,r2,539
10007e58:	10008378 	rdprs	zero,r2,525
10007e5c:	100086dc 	xori	zero,r2,539
10007e60:	100086dc 	xori	zero,r2,539
10007e64:	100086dc 	xori	zero,r2,539
10007e68:	100086dc 	xori	zero,r2,539
10007e6c:	100086dc 	xori	zero,r2,539
10007e70:	100083b8 	rdprs	zero,r2,526
10007e74:	100086dc 	xori	zero,r2,539
10007e78:	100086dc 	xori	zero,r2,539
10007e7c:	100083fc 	xorhi	zero,r2,527
10007e80:	100086dc 	xori	zero,r2,539
10007e84:	100086dc 	xori	zero,r2,539
10007e88:	100086dc 	xori	zero,r2,539
10007e8c:	100086dc 	xori	zero,r2,539
10007e90:	100086dc 	xori	zero,r2,539
10007e94:	100086dc 	xori	zero,r2,539
10007e98:	100086dc 	xori	zero,r2,539
10007e9c:	100086dc 	xori	zero,r2,539
10007ea0:	100086dc 	xori	zero,r2,539
10007ea4:	100086dc 	xori	zero,r2,539
10007ea8:	10008344 	addi	zero,r2,525
10007eac:	10008694 	ori	zero,r2,538
10007eb0:	100086dc 	xori	zero,r2,539
10007eb4:	100086dc 	xori	zero,r2,539
10007eb8:	100086dc 	xori	zero,r2,539
10007ebc:	100084d0 	cmplti	zero,r2,531
10007ec0:	10008694 	ori	zero,r2,538
10007ec4:	100086dc 	xori	zero,r2,539
10007ec8:	100086dc 	xori	zero,r2,539
10007ecc:	100083e8 	cmpgeui	zero,r2,527
10007ed0:	100086dc 	xori	zero,r2,539
10007ed4:	10008634 	orhi	zero,r2,536
10007ed8:	100085bc 	xorhi	zero,r2,534
10007edc:	100085f0 	cmpltui	zero,r2,535
10007ee0:	100084dc 	xori	zero,r2,531
10007ee4:	100086dc 	xori	zero,r2,539
10007ee8:	100084e8 	cmpgeui	zero,r2,531
10007eec:	100086dc 	xori	zero,r2,539
10007ef0:	10008544 	addi	zero,r2,533
10007ef4:	100086dc 	xori	zero,r2,539
10007ef8:	100086dc 	xori	zero,r2,539
10007efc:	10008578 	rdprs	zero,r2,533
10007f00:	42000204 	addi	r8,r8,8
10007f04:	d8c12517 	ldw	r3,1172(sp)
10007f08:	1c07883a 	add	r3,r3,r16
10007f0c:	d8c12515 	stw	r3,1172(sp)
10007f10:	003f8d06 	br	10007d48 <__alt_data_end+0xf8007d48>
10007f14:	d9012117 	ldw	r4,1156(sp)
10007f18:	d9412017 	ldw	r5,1152(sp)
10007f1c:	00028bc0 	call	100028bc <__swsetup_r>
10007f20:	1000301e 	bne	r2,zero,10007fe4 <___vfiprintf_internal_r+0x3f0>
10007f24:	d8812017 	ldw	r2,1152(sp)
10007f28:	01000284 	movi	r4,10
10007f2c:	10c0030b 	ldhu	r3,12(r2)
10007f30:	1805883a 	mov	r2,r3
10007f34:	1080068c 	andi	r2,r2,26
10007f38:	113f551e 	bne	r2,r4,10007c90 <__alt_data_end+0xf8007c90>
10007f3c:	d9012017 	ldw	r4,1152(sp)
10007f40:	2080038b 	ldhu	r2,14(r4)
10007f44:	113fffcc 	andi	r4,r2,65535
10007f48:	2120001c 	xori	r4,r4,32768
10007f4c:	21200004 	addi	r4,r4,-32768
10007f50:	203f4f16 	blt	r4,zero,10007c90 <__alt_data_end+0xf8007c90>
10007f54:	d9412017 	ldw	r5,1152(sp)
10007f58:	d9012117 	ldw	r4,1156(sp)
10007f5c:	d9c12317 	ldw	r7,1164(sp)
10007f60:	2b001917 	ldw	r12,100(r5)
10007f64:	2ac00717 	ldw	r11,28(r5)
10007f68:	2a800917 	ldw	r10,36(r5)
10007f6c:	02010004 	movi	r8,1024
10007f70:	18ffff4c 	andi	r3,r3,65533
10007f74:	da0b883a 	add	r5,sp,r8
10007f78:	980d883a 	mov	r6,r19
10007f7c:	d8c1030d 	sth	r3,1036(sp)
10007f80:	db011915 	stw	r12,1124(sp)
10007f84:	d881038d 	sth	r2,1038(sp)
10007f88:	dac10715 	stw	r11,1052(sp)
10007f8c:	da810915 	stw	r10,1060(sp)
10007f90:	dec10015 	stw	sp,1024(sp)
10007f94:	dec10415 	stw	sp,1040(sp)
10007f98:	da010215 	stw	r8,1032(sp)
10007f9c:	da010515 	stw	r8,1044(sp)
10007fa0:	d8010615 	stw	zero,1048(sp)
10007fa4:	0007bf40 	call	10007bf4 <___vfiprintf_internal_r>
10007fa8:	1021883a 	mov	r16,r2
10007fac:	10000416 	blt	r2,zero,10007fc0 <___vfiprintf_internal_r+0x3cc>
10007fb0:	d9012117 	ldw	r4,1156(sp)
10007fb4:	d9410004 	addi	r5,sp,1024
10007fb8:	000433c0 	call	1000433c <_fflush_r>
10007fbc:	10040f1e 	bne	r2,zero,10008ffc <___vfiprintf_internal_r+0x1408>
10007fc0:	d881030b 	ldhu	r2,1036(sp)
10007fc4:	1080100c 	andi	r2,r2,64
10007fc8:	10000426 	beq	r2,zero,10007fdc <___vfiprintf_internal_r+0x3e8>
10007fcc:	d8c12017 	ldw	r3,1152(sp)
10007fd0:	1880030b 	ldhu	r2,12(r3)
10007fd4:	10801014 	ori	r2,r2,64
10007fd8:	1880030d 	sth	r2,12(r3)
10007fdc:	8005883a 	mov	r2,r16
10007fe0:	00000106 	br	10007fe8 <___vfiprintf_internal_r+0x3f4>
10007fe4:	00bfffc4 	movi	r2,-1
10007fe8:	dfc13517 	ldw	ra,1236(sp)
10007fec:	df013417 	ldw	fp,1232(sp)
10007ff0:	ddc13317 	ldw	r23,1228(sp)
10007ff4:	dd813217 	ldw	r22,1224(sp)
10007ff8:	dd413117 	ldw	r21,1220(sp)
10007ffc:	dd013017 	ldw	r20,1216(sp)
10008000:	dcc12f17 	ldw	r19,1212(sp)
10008004:	dc812e17 	ldw	r18,1208(sp)
10008008:	dc412d17 	ldw	r17,1204(sp)
1000800c:	dc012c17 	ldw	r16,1200(sp)
10008010:	dec13604 	addi	sp,sp,1240
10008014:	f800283a 	ret
10008018:	00048f80 	call	100048f8 <__sinit>
1000801c:	003f0706 	br	10007c3c <__alt_data_end+0xf8007c3c>
10008020:	d8c12417 	ldw	r3,1168(sp)
10008024:	d8812315 	stw	r2,1164(sp)
10008028:	00c7c83a 	sub	r3,zero,r3
1000802c:	d8c12415 	stw	r3,1168(sp)
10008030:	94800114 	ori	r18,r18,4
10008034:	b9800007 	ldb	r6,0(r23)
10008038:	003f4f06 	br	10007d78 <__alt_data_end+0xf8007d78>
1000803c:	94802014 	ori	r18,r18,128
10008040:	b9800007 	ldb	r6,0(r23)
10008044:	003f4c06 	br	10007d78 <__alt_data_end+0xf8007d78>
10008048:	dc012615 	stw	r16,1176(sp)
1000804c:	d8012415 	stw	zero,1168(sp)
10008050:	35bff404 	addi	r22,r6,-48
10008054:	0009883a 	mov	r4,zero
10008058:	b821883a 	mov	r16,r23
1000805c:	01400284 	movi	r5,10
10008060:	00005a80 	call	100005a8 <__mulsi3>
10008064:	81800007 	ldb	r6,0(r16)
10008068:	1589883a 	add	r4,r2,r22
1000806c:	bdc00044 	addi	r23,r23,1
10008070:	35bff404 	addi	r22,r6,-48
10008074:	b821883a 	mov	r16,r23
10008078:	adbff82e 	bgeu	r21,r22,1000805c <__alt_data_end+0xf800805c>
1000807c:	d9012415 	stw	r4,1168(sp)
10008080:	dc012617 	ldw	r16,1176(sp)
10008084:	003f3d06 	br	10007d7c <__alt_data_end+0xf8007d7c>
10008088:	d8c12203 	ldbu	r3,1160(sp)
1000808c:	94800414 	ori	r18,r18,16
10008090:	9080080c 	andi	r2,r18,32
10008094:	d8c11d85 	stb	r3,1142(sp)
10008098:	9811883a 	mov	r8,r19
1000809c:	d8c12317 	ldw	r3,1164(sp)
100080a0:	10018226 	beq	r2,zero,100086ac <___vfiprintf_internal_r+0xab8>
100080a4:	d9012317 	ldw	r4,1164(sp)
100080a8:	18800117 	ldw	r2,4(r3)
100080ac:	1cc00017 	ldw	r19,0(r3)
100080b0:	21000204 	addi	r4,r4,8
100080b4:	d9012315 	stw	r4,1164(sp)
100080b8:	102b883a 	mov	r21,r2
100080bc:	10030016 	blt	r2,zero,10008cc0 <___vfiprintf_internal_r+0x10cc>
100080c0:	dd811d83 	ldbu	r22,1142(sp)
100080c4:	8029883a 	mov	r20,r16
100080c8:	00800044 	movi	r2,1
100080cc:	9d46b03a 	or	r3,r19,r21
100080d0:	80000216 	blt	r16,zero,100080dc <___vfiprintf_internal_r+0x4e8>
100080d4:	013fdfc4 	movi	r4,-129
100080d8:	9124703a 	and	r18,r18,r4
100080dc:	1801b41e 	bne	r3,zero,100087b0 <___vfiprintf_internal_r+0xbbc>
100080e0:	80028126 	beq	r16,zero,10008ae8 <___vfiprintf_internal_r+0xef4>
100080e4:	10803fcc 	andi	r2,r2,255
100080e8:	00c00044 	movi	r3,1
100080ec:	10c1d126 	beq	r2,r3,10008834 <___vfiprintf_internal_r+0xc40>
100080f0:	00c00084 	movi	r3,2
100080f4:	10c28626 	beq	r2,r3,10008b10 <___vfiprintf_internal_r+0xf1c>
100080f8:	d8c10a04 	addi	r3,sp,1064
100080fc:	9808d0fa 	srli	r4,r19,3
10008100:	a80a977a 	slli	r5,r21,29
10008104:	a82ad0fa 	srli	r21,r21,3
10008108:	9cc001cc 	andi	r19,r19,7
1000810c:	98800c04 	addi	r2,r19,48
10008110:	18ffffc4 	addi	r3,r3,-1
10008114:	2926b03a 	or	r19,r5,r4
10008118:	18800005 	stb	r2,0(r3)
1000811c:	9d48b03a 	or	r4,r19,r21
10008120:	203ff61e 	bne	r4,zero,100080fc <__alt_data_end+0xf80080fc>
10008124:	9100004c 	andi	r4,r18,1
10008128:	d8c12215 	stw	r3,1160(sp)
1000812c:	2002b31e 	bne	r4,zero,10008bfc <___vfiprintf_internal_r+0x1008>
10008130:	d9411e17 	ldw	r5,1144(sp)
10008134:	28e9c83a 	sub	r20,r5,r3
10008138:	a02b883a 	mov	r21,r20
1000813c:	a400010e 	bge	r20,r16,10008144 <___vfiprintf_internal_r+0x550>
10008140:	802b883a 	mov	r21,r16
10008144:	b5803fcc 	andi	r22,r22,255
10008148:	b580201c 	xori	r22,r22,128
1000814c:	b5bfe004 	addi	r22,r22,-128
10008150:	b0000126 	beq	r22,zero,10008158 <___vfiprintf_internal_r+0x564>
10008154:	ad400044 	addi	r21,r21,1
10008158:	9280008c 	andi	r10,r18,2
1000815c:	50000126 	beq	r10,zero,10008164 <___vfiprintf_internal_r+0x570>
10008160:	ad400084 	addi	r21,r21,2
10008164:	9580210c 	andi	r22,r18,132
10008168:	b001751e 	bne	r22,zero,10008740 <___vfiprintf_internal_r+0xb4c>
1000816c:	d9012417 	ldw	r4,1168(sp)
10008170:	2567c83a 	sub	r19,r4,r21
10008174:	04c1720e 	bge	zero,r19,10008740 <___vfiprintf_internal_r+0xb4c>
10008178:	01c00404 	movi	r7,16
1000817c:	d8c11c17 	ldw	r3,1136(sp)
10008180:	3cc36b0e 	bge	r7,r19,10008f30 <___vfiprintf_internal_r+0x133c>
10008184:	00840074 	movhi	r2,4097
10008188:	10be2c04 	addi	r2,r2,-1872
1000818c:	dc012915 	stw	r16,1188(sp)
10008190:	d9011b17 	ldw	r4,1132(sp)
10008194:	9821883a 	mov	r16,r19
10008198:	d8812615 	stw	r2,1176(sp)
1000819c:	030001c4 	movi	r12,7
100081a0:	5027883a 	mov	r19,r10
100081a4:	00000506 	br	100081bc <___vfiprintf_internal_r+0x5c8>
100081a8:	21400084 	addi	r5,r4,2
100081ac:	42000204 	addi	r8,r8,8
100081b0:	1009883a 	mov	r4,r2
100081b4:	843ffc04 	addi	r16,r16,-16
100081b8:	3c000d0e 	bge	r7,r16,100081f0 <___vfiprintf_internal_r+0x5fc>
100081bc:	18c00404 	addi	r3,r3,16
100081c0:	20800044 	addi	r2,r4,1
100081c4:	47000015 	stw	fp,0(r8)
100081c8:	41c00115 	stw	r7,4(r8)
100081cc:	d8c11c15 	stw	r3,1136(sp)
100081d0:	d8811b15 	stw	r2,1132(sp)
100081d4:	60bff40e 	bge	r12,r2,100081a8 <__alt_data_end+0xf80081a8>
100081d8:	18014b1e 	bne	r3,zero,10008708 <___vfiprintf_internal_r+0xb14>
100081dc:	843ffc04 	addi	r16,r16,-16
100081e0:	0009883a 	mov	r4,zero
100081e4:	01400044 	movi	r5,1
100081e8:	d811883a 	mov	r8,sp
100081ec:	3c3ff316 	blt	r7,r16,100081bc <__alt_data_end+0xf80081bc>
100081f0:	9815883a 	mov	r10,r19
100081f4:	8027883a 	mov	r19,r16
100081f8:	dc012917 	ldw	r16,1188(sp)
100081fc:	d9012617 	ldw	r4,1176(sp)
10008200:	98c7883a 	add	r3,r19,r3
10008204:	44c00115 	stw	r19,4(r8)
10008208:	41000015 	stw	r4,0(r8)
1000820c:	d8c11c15 	stw	r3,1136(sp)
10008210:	d9411b15 	stw	r5,1132(sp)
10008214:	008001c4 	movi	r2,7
10008218:	11425116 	blt	r2,r5,10008b60 <___vfiprintf_internal_r+0xf6c>
1000821c:	d9011d87 	ldb	r4,1142(sp)
10008220:	42000204 	addi	r8,r8,8
10008224:	28800044 	addi	r2,r5,1
10008228:	20014a1e 	bne	r4,zero,10008754 <___vfiprintf_internal_r+0xb60>
1000822c:	50000c26 	beq	r10,zero,10008260 <___vfiprintf_internal_r+0x66c>
10008230:	d9011d04 	addi	r4,sp,1140
10008234:	18c00084 	addi	r3,r3,2
10008238:	41000015 	stw	r4,0(r8)
1000823c:	01000084 	movi	r4,2
10008240:	41000115 	stw	r4,4(r8)
10008244:	d8c11c15 	stw	r3,1136(sp)
10008248:	d8811b15 	stw	r2,1132(sp)
1000824c:	010001c4 	movi	r4,7
10008250:	20822016 	blt	r4,r2,10008ad4 <___vfiprintf_internal_r+0xee0>
10008254:	100b883a 	mov	r5,r2
10008258:	42000204 	addi	r8,r8,8
1000825c:	10800044 	addi	r2,r2,1
10008260:	01002004 	movi	r4,128
10008264:	b101de26 	beq	r22,r4,100089e0 <___vfiprintf_internal_r+0xdec>
10008268:	8521c83a 	sub	r16,r16,r20
1000826c:	0400230e 	bge	zero,r16,100082fc <___vfiprintf_internal_r+0x708>
10008270:	04c00404 	movi	r19,16
10008274:	9c030d0e 	bge	r19,r16,10008eac <___vfiprintf_internal_r+0x12b8>
10008278:	00840074 	movhi	r2,4097
1000827c:	10be2804 	addi	r2,r2,-1888
10008280:	d8812615 	stw	r2,1176(sp)
10008284:	058001c4 	movi	r22,7
10008288:	00000506 	br	100082a0 <___vfiprintf_internal_r+0x6ac>
1000828c:	28800084 	addi	r2,r5,2
10008290:	42000204 	addi	r8,r8,8
10008294:	200b883a 	mov	r5,r4
10008298:	843ffc04 	addi	r16,r16,-16
1000829c:	9c000d0e 	bge	r19,r16,100082d4 <___vfiprintf_internal_r+0x6e0>
100082a0:	18c00404 	addi	r3,r3,16
100082a4:	29000044 	addi	r4,r5,1
100082a8:	44400015 	stw	r17,0(r8)
100082ac:	44c00115 	stw	r19,4(r8)
100082b0:	d8c11c15 	stw	r3,1136(sp)
100082b4:	d9011b15 	stw	r4,1132(sp)
100082b8:	b13ff40e 	bge	r22,r4,1000828c <__alt_data_end+0xf800828c>
100082bc:	1801321e 	bne	r3,zero,10008788 <___vfiprintf_internal_r+0xb94>
100082c0:	843ffc04 	addi	r16,r16,-16
100082c4:	000b883a 	mov	r5,zero
100082c8:	00800044 	movi	r2,1
100082cc:	d811883a 	mov	r8,sp
100082d0:	9c3ff316 	blt	r19,r16,100082a0 <__alt_data_end+0xf80082a0>
100082d4:	d9012617 	ldw	r4,1176(sp)
100082d8:	1c07883a 	add	r3,r3,r16
100082dc:	44000115 	stw	r16,4(r8)
100082e0:	41000015 	stw	r4,0(r8)
100082e4:	d8c11c15 	stw	r3,1136(sp)
100082e8:	d8811b15 	stw	r2,1132(sp)
100082ec:	010001c4 	movi	r4,7
100082f0:	20816216 	blt	r4,r2,1000887c <___vfiprintf_internal_r+0xc88>
100082f4:	42000204 	addi	r8,r8,8
100082f8:	10800044 	addi	r2,r2,1
100082fc:	d9012217 	ldw	r4,1160(sp)
10008300:	1d07883a 	add	r3,r3,r20
10008304:	45000115 	stw	r20,4(r8)
10008308:	41000015 	stw	r4,0(r8)
1000830c:	d8c11c15 	stw	r3,1136(sp)
10008310:	d8811b15 	stw	r2,1132(sp)
10008314:	010001c4 	movi	r4,7
10008318:	2081610e 	bge	r4,r2,100088a0 <___vfiprintf_internal_r+0xcac>
1000831c:	1802211e 	bne	r3,zero,10008ba4 <___vfiprintf_internal_r+0xfb0>
10008320:	d8011b15 	stw	zero,1132(sp)
10008324:	9480010c 	andi	r18,r18,4
10008328:	9002171e 	bne	r18,zero,10008b88 <___vfiprintf_internal_r+0xf94>
1000832c:	d9412417 	ldw	r5,1168(sp)
10008330:	a9433716 	blt	r21,r5,10009010 <___vfiprintf_internal_r+0x141c>
10008334:	d8812517 	ldw	r2,1172(sp)
10008338:	1545883a 	add	r2,r2,r21
1000833c:	d8812515 	stw	r2,1172(sp)
10008340:	00019a06 	br	100089ac <___vfiprintf_internal_r+0xdb8>
10008344:	d8c12317 	ldw	r3,1164(sp)
10008348:	05400044 	movi	r21,1
1000834c:	9811883a 	mov	r8,r19
10008350:	18800017 	ldw	r2,0(r3)
10008354:	18c00104 	addi	r3,r3,4
10008358:	d8c12315 	stw	r3,1164(sp)
1000835c:	d8c10004 	addi	r3,sp,1024
10008360:	d8011d85 	stb	zero,1142(sp)
10008364:	d8810005 	stb	r2,1024(sp)
10008368:	a829883a 	mov	r20,r21
1000836c:	d8c12215 	stw	r3,1160(sp)
10008370:	0021883a 	mov	r16,zero
10008374:	003f7806 	br	10008158 <__alt_data_end+0xf8008158>
10008378:	94800414 	ori	r18,r18,16
1000837c:	9080080c 	andi	r2,r18,32
10008380:	9811883a 	mov	r8,r19
10008384:	10009026 	beq	r2,zero,100085c8 <___vfiprintf_internal_r+0x9d4>
10008388:	d8812317 	ldw	r2,1164(sp)
1000838c:	d8c12317 	ldw	r3,1164(sp)
10008390:	14c00017 	ldw	r19,0(r2)
10008394:	15400117 	ldw	r21,4(r2)
10008398:	18c00204 	addi	r3,r3,8
1000839c:	d8c12315 	stw	r3,1164(sp)
100083a0:	0005883a 	mov	r2,zero
100083a4:	9d46b03a 	or	r3,r19,r21
100083a8:	d8011d85 	stb	zero,1142(sp)
100083ac:	8029883a 	mov	r20,r16
100083b0:	002d883a 	mov	r22,zero
100083b4:	003f4606 	br	100080d0 <__alt_data_end+0xf80080d0>
100083b8:	94800414 	ori	r18,r18,16
100083bc:	9080080c 	andi	r2,r18,32
100083c0:	9811883a 	mov	r8,r19
100083c4:	10006226 	beq	r2,zero,10008550 <___vfiprintf_internal_r+0x95c>
100083c8:	d9012317 	ldw	r4,1164(sp)
100083cc:	00800044 	movi	r2,1
100083d0:	24c00017 	ldw	r19,0(r4)
100083d4:	25400117 	ldw	r21,4(r4)
100083d8:	21000204 	addi	r4,r4,8
100083dc:	d9012315 	stw	r4,1164(sp)
100083e0:	9d46b03a 	or	r3,r19,r21
100083e4:	003ff006 	br	100083a8 <__alt_data_end+0xf80083a8>
100083e8:	b9800007 	ldb	r6,0(r23)
100083ec:	00801b04 	movi	r2,108
100083f0:	3082b226 	beq	r6,r2,10008ebc <___vfiprintf_internal_r+0x12c8>
100083f4:	94800414 	ori	r18,r18,16
100083f8:	003e5f06 	br	10007d78 <__alt_data_end+0xf8007d78>
100083fc:	d8c12203 	ldbu	r3,1160(sp)
10008400:	01040074 	movhi	r4,4097
10008404:	213dc204 	addi	r4,r4,-2296
10008408:	d8c11d85 	stb	r3,1142(sp)
1000840c:	d9012715 	stw	r4,1180(sp)
10008410:	90c0080c 	andi	r3,r18,32
10008414:	9811883a 	mov	r8,r19
10008418:	d8812317 	ldw	r2,1164(sp)
1000841c:	18005f26 	beq	r3,zero,1000859c <___vfiprintf_internal_r+0x9a8>
10008420:	d9012317 	ldw	r4,1164(sp)
10008424:	14c00017 	ldw	r19,0(r2)
10008428:	15400117 	ldw	r21,4(r2)
1000842c:	21000204 	addi	r4,r4,8
10008430:	d9012315 	stw	r4,1164(sp)
10008434:	9080004c 	andi	r2,r18,1
10008438:	1001e226 	beq	r2,zero,10008bc4 <___vfiprintf_internal_r+0xfd0>
1000843c:	9d46b03a 	or	r3,r19,r21
10008440:	18024e26 	beq	r3,zero,10008d7c <___vfiprintf_internal_r+0x1188>
10008444:	00800c04 	movi	r2,48
10008448:	d8811d05 	stb	r2,1140(sp)
1000844c:	d9811d45 	stb	r6,1141(sp)
10008450:	94800094 	ori	r18,r18,2
10008454:	00800084 	movi	r2,2
10008458:	003fd306 	br	100083a8 <__alt_data_end+0xf80083a8>
1000845c:	d9012317 	ldw	r4,1164(sp)
10008460:	d9412317 	ldw	r5,1164(sp)
10008464:	21000017 	ldw	r4,0(r4)
10008468:	28800104 	addi	r2,r5,4
1000846c:	d9012415 	stw	r4,1168(sp)
10008470:	203eeb16 	blt	r4,zero,10008020 <__alt_data_end+0xf8008020>
10008474:	d8812315 	stw	r2,1164(sp)
10008478:	b9800007 	ldb	r6,0(r23)
1000847c:	003e3e06 	br	10007d78 <__alt_data_end+0xf8007d78>
10008480:	b9800007 	ldb	r6,0(r23)
10008484:	01000a84 	movi	r4,42
10008488:	b8800044 	addi	r2,r23,1
1000848c:	3102d226 	beq	r6,r4,10008fd8 <___vfiprintf_internal_r+0x13e4>
10008490:	35bff404 	addi	r22,r6,-48
10008494:	102f883a 	mov	r23,r2
10008498:	0021883a 	mov	r16,zero
1000849c:	adbe3736 	bltu	r21,r22,10007d7c <__alt_data_end+0xf8007d7c>
100084a0:	0009883a 	mov	r4,zero
100084a4:	01400284 	movi	r5,10
100084a8:	00005a80 	call	100005a8 <__mulsi3>
100084ac:	b9800007 	ldb	r6,0(r23)
100084b0:	b089883a 	add	r4,r22,r2
100084b4:	bdc00044 	addi	r23,r23,1
100084b8:	35bff404 	addi	r22,r6,-48
100084bc:	adbff92e 	bgeu	r21,r22,100084a4 <__alt_data_end+0xf80084a4>
100084c0:	2021883a 	mov	r16,r4
100084c4:	203e2d0e 	bge	r4,zero,10007d7c <__alt_data_end+0xf8007d7c>
100084c8:	043fffc4 	movi	r16,-1
100084cc:	003e2b06 	br	10007d7c <__alt_data_end+0xf8007d7c>
100084d0:	94801014 	ori	r18,r18,64
100084d4:	b9800007 	ldb	r6,0(r23)
100084d8:	003e2706 	br	10007d78 <__alt_data_end+0xf8007d78>
100084dc:	94800814 	ori	r18,r18,32
100084e0:	b9800007 	ldb	r6,0(r23)
100084e4:	003e2406 	br	10007d78 <__alt_data_end+0xf8007d78>
100084e8:	d9412317 	ldw	r5,1164(sp)
100084ec:	d8812317 	ldw	r2,1164(sp)
100084f0:	d8011d85 	stb	zero,1142(sp)
100084f4:	29400017 	ldw	r5,0(r5)
100084f8:	9811883a 	mov	r8,r19
100084fc:	14c00104 	addi	r19,r2,4
10008500:	d9412215 	stw	r5,1160(sp)
10008504:	28029026 	beq	r5,zero,10008f48 <___vfiprintf_internal_r+0x1354>
10008508:	d9012217 	ldw	r4,1160(sp)
1000850c:	80027616 	blt	r16,zero,10008ee8 <___vfiprintf_internal_r+0x12f4>
10008510:	000b883a 	mov	r5,zero
10008514:	800d883a 	mov	r6,r16
10008518:	da012a15 	stw	r8,1192(sp)
1000851c:	0005db00 	call	10005db0 <memchr>
10008520:	da012a17 	ldw	r8,1192(sp)
10008524:	1002a026 	beq	r2,zero,10008fa8 <___vfiprintf_internal_r+0x13b4>
10008528:	d8c12217 	ldw	r3,1160(sp)
1000852c:	10e9c83a 	sub	r20,r2,r3
10008530:	85023816 	blt	r16,r20,10008e14 <___vfiprintf_internal_r+0x1220>
10008534:	dd811d83 	ldbu	r22,1142(sp)
10008538:	dcc12315 	stw	r19,1164(sp)
1000853c:	0021883a 	mov	r16,zero
10008540:	003efd06 	br	10008138 <__alt_data_end+0xf8008138>
10008544:	9080080c 	andi	r2,r18,32
10008548:	9811883a 	mov	r8,r19
1000854c:	103f9e1e 	bne	r2,zero,100083c8 <__alt_data_end+0xf80083c8>
10008550:	9080040c 	andi	r2,r18,16
10008554:	10021726 	beq	r2,zero,10008db4 <___vfiprintf_internal_r+0x11c0>
10008558:	d9412317 	ldw	r5,1164(sp)
1000855c:	002b883a 	mov	r21,zero
10008560:	00800044 	movi	r2,1
10008564:	2cc00017 	ldw	r19,0(r5)
10008568:	29400104 	addi	r5,r5,4
1000856c:	d9412315 	stw	r5,1164(sp)
10008570:	9807883a 	mov	r3,r19
10008574:	003f8c06 	br	100083a8 <__alt_data_end+0xf80083a8>
10008578:	d8c12203 	ldbu	r3,1160(sp)
1000857c:	01040074 	movhi	r4,4097
10008580:	213dc704 	addi	r4,r4,-2276
10008584:	d8c11d85 	stb	r3,1142(sp)
10008588:	d9012715 	stw	r4,1180(sp)
1000858c:	90c0080c 	andi	r3,r18,32
10008590:	9811883a 	mov	r8,r19
10008594:	d8812317 	ldw	r2,1164(sp)
10008598:	183fa11e 	bne	r3,zero,10008420 <__alt_data_end+0xf8008420>
1000859c:	90c0040c 	andi	r3,r18,16
100085a0:	1801e526 	beq	r3,zero,10008d38 <___vfiprintf_internal_r+0x1144>
100085a4:	d9412317 	ldw	r5,1164(sp)
100085a8:	14c00017 	ldw	r19,0(r2)
100085ac:	002b883a 	mov	r21,zero
100085b0:	29400104 	addi	r5,r5,4
100085b4:	d9412315 	stw	r5,1164(sp)
100085b8:	003f9e06 	br	10008434 <__alt_data_end+0xf8008434>
100085bc:	9080080c 	andi	r2,r18,32
100085c0:	9811883a 	mov	r8,r19
100085c4:	103f701e 	bne	r2,zero,10008388 <__alt_data_end+0xf8008388>
100085c8:	9080040c 	andi	r2,r18,16
100085cc:	1001ef26 	beq	r2,zero,10008d8c <___vfiprintf_internal_r+0x1198>
100085d0:	d9012317 	ldw	r4,1164(sp)
100085d4:	002b883a 	mov	r21,zero
100085d8:	0005883a 	mov	r2,zero
100085dc:	24c00017 	ldw	r19,0(r4)
100085e0:	21000104 	addi	r4,r4,4
100085e4:	d9012315 	stw	r4,1164(sp)
100085e8:	9807883a 	mov	r3,r19
100085ec:	003f6e06 	br	100083a8 <__alt_data_end+0xf80083a8>
100085f0:	d8c12317 	ldw	r3,1164(sp)
100085f4:	9811883a 	mov	r8,r19
100085f8:	00800c04 	movi	r2,48
100085fc:	1cc00017 	ldw	r19,0(r3)
10008600:	01040074 	movhi	r4,4097
10008604:	18c00104 	addi	r3,r3,4
10008608:	d8811d05 	stb	r2,1140(sp)
1000860c:	213dc704 	addi	r4,r4,-2276
10008610:	00801e04 	movi	r2,120
10008614:	d8811d45 	stb	r2,1141(sp)
10008618:	d8c12315 	stw	r3,1164(sp)
1000861c:	002b883a 	mov	r21,zero
10008620:	94800094 	ori	r18,r18,2
10008624:	d9012715 	stw	r4,1180(sp)
10008628:	00800084 	movi	r2,2
1000862c:	9807883a 	mov	r3,r19
10008630:	003f5d06 	br	100083a8 <__alt_data_end+0xf80083a8>
10008634:	d8c12203 	ldbu	r3,1160(sp)
10008638:	9080080c 	andi	r2,r18,32
1000863c:	9811883a 	mov	r8,r19
10008640:	d8c11d85 	stb	r3,1142(sp)
10008644:	1001b126 	beq	r2,zero,10008d0c <___vfiprintf_internal_r+0x1118>
10008648:	d9012317 	ldw	r4,1164(sp)
1000864c:	d9412517 	ldw	r5,1172(sp)
10008650:	20800017 	ldw	r2,0(r4)
10008654:	2807d7fa 	srai	r3,r5,31
10008658:	21000104 	addi	r4,r4,4
1000865c:	d9012315 	stw	r4,1164(sp)
10008660:	11400015 	stw	r5,0(r2)
10008664:	10c00115 	stw	r3,4(r2)
10008668:	003d9a06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
1000866c:	d8812207 	ldb	r2,1160(sp)
10008670:	1001c41e 	bne	r2,zero,10008d84 <___vfiprintf_internal_r+0x1190>
10008674:	00c00804 	movi	r3,32
10008678:	d8c12205 	stb	r3,1160(sp)
1000867c:	b9800007 	ldb	r6,0(r23)
10008680:	003dbd06 	br	10007d78 <__alt_data_end+0xf8007d78>
10008684:	00c00ac4 	movi	r3,43
10008688:	d8c12205 	stb	r3,1160(sp)
1000868c:	b9800007 	ldb	r6,0(r23)
10008690:	003db906 	br	10007d78 <__alt_data_end+0xf8007d78>
10008694:	d8c12203 	ldbu	r3,1160(sp)
10008698:	9080080c 	andi	r2,r18,32
1000869c:	9811883a 	mov	r8,r19
100086a0:	d8c11d85 	stb	r3,1142(sp)
100086a4:	d8c12317 	ldw	r3,1164(sp)
100086a8:	103e7e1e 	bne	r2,zero,100080a4 <__alt_data_end+0xf80080a4>
100086ac:	9080040c 	andi	r2,r18,16
100086b0:	1001a926 	beq	r2,zero,10008d58 <___vfiprintf_internal_r+0x1164>
100086b4:	1cc00017 	ldw	r19,0(r3)
100086b8:	d9412317 	ldw	r5,1164(sp)
100086bc:	982bd7fa 	srai	r21,r19,31
100086c0:	29400104 	addi	r5,r5,4
100086c4:	d9412315 	stw	r5,1164(sp)
100086c8:	a805883a 	mov	r2,r21
100086cc:	003e7b06 	br	100080bc <__alt_data_end+0xf80080bc>
100086d0:	94800054 	ori	r18,r18,1
100086d4:	b9800007 	ldb	r6,0(r23)
100086d8:	003da706 	br	10007d78 <__alt_data_end+0xf8007d78>
100086dc:	d8c12203 	ldbu	r3,1160(sp)
100086e0:	9811883a 	mov	r8,r19
100086e4:	d8c11d85 	stb	r3,1142(sp)
100086e8:	30005826 	beq	r6,zero,1000884c <___vfiprintf_internal_r+0xc58>
100086ec:	05400044 	movi	r21,1
100086f0:	d8c10004 	addi	r3,sp,1024
100086f4:	d9810005 	stb	r6,1024(sp)
100086f8:	d8011d85 	stb	zero,1142(sp)
100086fc:	a829883a 	mov	r20,r21
10008700:	d8c12215 	stw	r3,1160(sp)
10008704:	003f1a06 	br	10008370 <__alt_data_end+0xf8008370>
10008708:	d9012117 	ldw	r4,1156(sp)
1000870c:	d9412017 	ldw	r5,1152(sp)
10008710:	d9811a04 	addi	r6,sp,1128
10008714:	d9c12a15 	stw	r7,1192(sp)
10008718:	db012b15 	stw	r12,1196(sp)
1000871c:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008720:	d9c12a17 	ldw	r7,1192(sp)
10008724:	db012b17 	ldw	r12,1196(sp)
10008728:	10004e1e 	bne	r2,zero,10008864 <___vfiprintf_internal_r+0xc70>
1000872c:	d9011b17 	ldw	r4,1132(sp)
10008730:	d8c11c17 	ldw	r3,1136(sp)
10008734:	d811883a 	mov	r8,sp
10008738:	21400044 	addi	r5,r4,1
1000873c:	003e9d06 	br	100081b4 <__alt_data_end+0xf80081b4>
10008740:	d9411b17 	ldw	r5,1132(sp)
10008744:	d8c11c17 	ldw	r3,1136(sp)
10008748:	28800044 	addi	r2,r5,1
1000874c:	d9011d87 	ldb	r4,1142(sp)
10008750:	203eb626 	beq	r4,zero,1000822c <__alt_data_end+0xf800822c>
10008754:	01000044 	movi	r4,1
10008758:	d9411d84 	addi	r5,sp,1142
1000875c:	1907883a 	add	r3,r3,r4
10008760:	41400015 	stw	r5,0(r8)
10008764:	41000115 	stw	r4,4(r8)
10008768:	d8c11c15 	stw	r3,1136(sp)
1000876c:	d8811b15 	stw	r2,1132(sp)
10008770:	014001c4 	movi	r5,7
10008774:	2880ce16 	blt	r5,r2,10008ab0 <___vfiprintf_internal_r+0xebc>
10008778:	100b883a 	mov	r5,r2
1000877c:	42000204 	addi	r8,r8,8
10008780:	10800044 	addi	r2,r2,1
10008784:	003ea906 	br	1000822c <__alt_data_end+0xf800822c>
10008788:	d9012117 	ldw	r4,1156(sp)
1000878c:	d9412017 	ldw	r5,1152(sp)
10008790:	d9811a04 	addi	r6,sp,1128
10008794:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008798:	1000321e 	bne	r2,zero,10008864 <___vfiprintf_internal_r+0xc70>
1000879c:	d9411b17 	ldw	r5,1132(sp)
100087a0:	d8c11c17 	ldw	r3,1136(sp)
100087a4:	d811883a 	mov	r8,sp
100087a8:	28800044 	addi	r2,r5,1
100087ac:	003eba06 	br	10008298 <__alt_data_end+0xf8008298>
100087b0:	10803fcc 	andi	r2,r2,255
100087b4:	00c00044 	movi	r3,1
100087b8:	10fe4d1e 	bne	r2,r3,100080f0 <__alt_data_end+0xf80080f0>
100087bc:	a800021e 	bne	r21,zero,100087c8 <___vfiprintf_internal_r+0xbd4>
100087c0:	00800244 	movi	r2,9
100087c4:	14c01b2e 	bgeu	r2,r19,10008834 <___vfiprintf_internal_r+0xc40>
100087c8:	dc012215 	stw	r16,1160(sp)
100087cc:	dd010a04 	addi	r20,sp,1064
100087d0:	a821883a 	mov	r16,r21
100087d4:	402b883a 	mov	r21,r8
100087d8:	9809883a 	mov	r4,r19
100087dc:	800b883a 	mov	r5,r16
100087e0:	01800284 	movi	r6,10
100087e4:	000f883a 	mov	r7,zero
100087e8:	0009fc80 	call	10009fc8 <__umoddi3>
100087ec:	10800c04 	addi	r2,r2,48
100087f0:	a53fffc4 	addi	r20,r20,-1
100087f4:	9809883a 	mov	r4,r19
100087f8:	800b883a 	mov	r5,r16
100087fc:	01800284 	movi	r6,10
10008800:	000f883a 	mov	r7,zero
10008804:	a0800005 	stb	r2,0(r20)
10008808:	00099880 	call	10009988 <__udivdi3>
1000880c:	1027883a 	mov	r19,r2
10008810:	10c4b03a 	or	r2,r2,r3
10008814:	1821883a 	mov	r16,r3
10008818:	103fef1e 	bne	r2,zero,100087d8 <__alt_data_end+0xf80087d8>
1000881c:	d9011e17 	ldw	r4,1144(sp)
10008820:	dc012217 	ldw	r16,1160(sp)
10008824:	a811883a 	mov	r8,r21
10008828:	dd012215 	stw	r20,1160(sp)
1000882c:	2529c83a 	sub	r20,r4,r20
10008830:	003e4106 	br	10008138 <__alt_data_end+0xf8008138>
10008834:	9cc00c04 	addi	r19,r19,48
10008838:	d8c109c4 	addi	r3,sp,1063
1000883c:	dcc109c5 	stb	r19,1063(sp)
10008840:	dd012817 	ldw	r20,1184(sp)
10008844:	d8c12215 	stw	r3,1160(sp)
10008848:	003e3b06 	br	10008138 <__alt_data_end+0xf8008138>
1000884c:	d8811c17 	ldw	r2,1136(sp)
10008850:	10000426 	beq	r2,zero,10008864 <___vfiprintf_internal_r+0xc70>
10008854:	d9012117 	ldw	r4,1156(sp)
10008858:	d9412017 	ldw	r5,1152(sp)
1000885c:	d9811a04 	addi	r6,sp,1128
10008860:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008864:	d9412017 	ldw	r5,1152(sp)
10008868:	2880030b 	ldhu	r2,12(r5)
1000886c:	1080100c 	andi	r2,r2,64
10008870:	103ddc1e 	bne	r2,zero,10007fe4 <__alt_data_end+0xf8007fe4>
10008874:	d8812517 	ldw	r2,1172(sp)
10008878:	003ddb06 	br	10007fe8 <__alt_data_end+0xf8007fe8>
1000887c:	1801061e 	bne	r3,zero,10008c98 <___vfiprintf_internal_r+0x10a4>
10008880:	d8c12217 	ldw	r3,1160(sp)
10008884:	00800044 	movi	r2,1
10008888:	dd000115 	stw	r20,4(sp)
1000888c:	d8c00015 	stw	r3,0(sp)
10008890:	dd011c15 	stw	r20,1136(sp)
10008894:	d8811b15 	stw	r2,1132(sp)
10008898:	a007883a 	mov	r3,r20
1000889c:	d811883a 	mov	r8,sp
100088a0:	42000204 	addi	r8,r8,8
100088a4:	9480010c 	andi	r18,r18,4
100088a8:	90003426 	beq	r18,zero,1000897c <___vfiprintf_internal_r+0xd88>
100088ac:	d9412417 	ldw	r5,1168(sp)
100088b0:	2d65c83a 	sub	r18,r5,r21
100088b4:	0480310e 	bge	zero,r18,1000897c <___vfiprintf_internal_r+0xd88>
100088b8:	04000404 	movi	r16,16
100088bc:	8481ad0e 	bge	r16,r18,10008f74 <___vfiprintf_internal_r+0x1380>
100088c0:	01440074 	movhi	r5,4097
100088c4:	297e2c04 	addi	r5,r5,-1872
100088c8:	d9011b17 	ldw	r4,1132(sp)
100088cc:	d9412615 	stw	r5,1176(sp)
100088d0:	04c001c4 	movi	r19,7
100088d4:	dd012117 	ldw	r20,1156(sp)
100088d8:	dd812017 	ldw	r22,1152(sp)
100088dc:	00000506 	br	100088f4 <___vfiprintf_internal_r+0xd00>
100088e0:	21400084 	addi	r5,r4,2
100088e4:	42000204 	addi	r8,r8,8
100088e8:	1009883a 	mov	r4,r2
100088ec:	94bffc04 	addi	r18,r18,-16
100088f0:	84800d0e 	bge	r16,r18,10008928 <___vfiprintf_internal_r+0xd34>
100088f4:	18c00404 	addi	r3,r3,16
100088f8:	20800044 	addi	r2,r4,1
100088fc:	47000015 	stw	fp,0(r8)
10008900:	44000115 	stw	r16,4(r8)
10008904:	d8c11c15 	stw	r3,1136(sp)
10008908:	d8811b15 	stw	r2,1132(sp)
1000890c:	98bff40e 	bge	r19,r2,100088e0 <__alt_data_end+0xf80088e0>
10008910:	1800291e 	bne	r3,zero,100089b8 <___vfiprintf_internal_r+0xdc4>
10008914:	94bffc04 	addi	r18,r18,-16
10008918:	0009883a 	mov	r4,zero
1000891c:	01400044 	movi	r5,1
10008920:	d811883a 	mov	r8,sp
10008924:	84bff316 	blt	r16,r18,100088f4 <__alt_data_end+0xf80088f4>
10008928:	d8812617 	ldw	r2,1176(sp)
1000892c:	1c87883a 	add	r3,r3,r18
10008930:	44800115 	stw	r18,4(r8)
10008934:	40800015 	stw	r2,0(r8)
10008938:	d8c11c15 	stw	r3,1136(sp)
1000893c:	d9411b15 	stw	r5,1132(sp)
10008940:	008001c4 	movi	r2,7
10008944:	11400d0e 	bge	r2,r5,1000897c <___vfiprintf_internal_r+0xd88>
10008948:	1800061e 	bne	r3,zero,10008964 <___vfiprintf_internal_r+0xd70>
1000894c:	d8c12417 	ldw	r3,1168(sp)
10008950:	a8c12e16 	blt	r21,r3,10008e0c <___vfiprintf_internal_r+0x1218>
10008954:	d9012517 	ldw	r4,1172(sp)
10008958:	2549883a 	add	r4,r4,r21
1000895c:	d9012515 	stw	r4,1172(sp)
10008960:	00001206 	br	100089ac <___vfiprintf_internal_r+0xdb8>
10008964:	d9012117 	ldw	r4,1156(sp)
10008968:	d9412017 	ldw	r5,1152(sp)
1000896c:	d9811a04 	addi	r6,sp,1128
10008970:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008974:	103fbb1e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008978:	d8c11c17 	ldw	r3,1136(sp)
1000897c:	d8812417 	ldw	r2,1168(sp)
10008980:	a880010e 	bge	r21,r2,10008988 <___vfiprintf_internal_r+0xd94>
10008984:	102b883a 	mov	r21,r2
10008988:	d9012517 	ldw	r4,1172(sp)
1000898c:	2549883a 	add	r4,r4,r21
10008990:	d9012515 	stw	r4,1172(sp)
10008994:	18000526 	beq	r3,zero,100089ac <___vfiprintf_internal_r+0xdb8>
10008998:	d9012117 	ldw	r4,1156(sp)
1000899c:	d9412017 	ldw	r5,1152(sp)
100089a0:	d9811a04 	addi	r6,sp,1128
100089a4:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
100089a8:	103fae1e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
100089ac:	d8011b15 	stw	zero,1132(sp)
100089b0:	d811883a 	mov	r8,sp
100089b4:	003cc706 	br	10007cd4 <__alt_data_end+0xf8007cd4>
100089b8:	a009883a 	mov	r4,r20
100089bc:	b00b883a 	mov	r5,r22
100089c0:	d9811a04 	addi	r6,sp,1128
100089c4:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
100089c8:	103fa61e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
100089cc:	d9011b17 	ldw	r4,1132(sp)
100089d0:	d8c11c17 	ldw	r3,1136(sp)
100089d4:	d811883a 	mov	r8,sp
100089d8:	21400044 	addi	r5,r4,1
100089dc:	003fc306 	br	100088ec <__alt_data_end+0xf80088ec>
100089e0:	d9012417 	ldw	r4,1168(sp)
100089e4:	256dc83a 	sub	r22,r4,r21
100089e8:	05be1f0e 	bge	zero,r22,10008268 <__alt_data_end+0xf8008268>
100089ec:	04c00404 	movi	r19,16
100089f0:	9d81720e 	bge	r19,r22,10008fbc <___vfiprintf_internal_r+0x13c8>
100089f4:	00840074 	movhi	r2,4097
100089f8:	10be2804 	addi	r2,r2,-1888
100089fc:	d8812615 	stw	r2,1176(sp)
10008a00:	028001c4 	movi	r10,7
10008a04:	00000506 	br	10008a1c <___vfiprintf_internal_r+0xe28>
10008a08:	29000084 	addi	r4,r5,2
10008a0c:	42000204 	addi	r8,r8,8
10008a10:	100b883a 	mov	r5,r2
10008a14:	b5bffc04 	addi	r22,r22,-16
10008a18:	9d800d0e 	bge	r19,r22,10008a50 <___vfiprintf_internal_r+0xe5c>
10008a1c:	18c00404 	addi	r3,r3,16
10008a20:	28800044 	addi	r2,r5,1
10008a24:	44400015 	stw	r17,0(r8)
10008a28:	44c00115 	stw	r19,4(r8)
10008a2c:	d8c11c15 	stw	r3,1136(sp)
10008a30:	d8811b15 	stw	r2,1132(sp)
10008a34:	50bff40e 	bge	r10,r2,10008a08 <__alt_data_end+0xf8008a08>
10008a38:	1800111e 	bne	r3,zero,10008a80 <___vfiprintf_internal_r+0xe8c>
10008a3c:	b5bffc04 	addi	r22,r22,-16
10008a40:	000b883a 	mov	r5,zero
10008a44:	01000044 	movi	r4,1
10008a48:	d811883a 	mov	r8,sp
10008a4c:	9dbff316 	blt	r19,r22,10008a1c <__alt_data_end+0xf8008a1c>
10008a50:	d9412617 	ldw	r5,1176(sp)
10008a54:	1d87883a 	add	r3,r3,r22
10008a58:	45800115 	stw	r22,4(r8)
10008a5c:	41400015 	stw	r5,0(r8)
10008a60:	d8c11c15 	stw	r3,1136(sp)
10008a64:	d9011b15 	stw	r4,1132(sp)
10008a68:	008001c4 	movi	r2,7
10008a6c:	11008516 	blt	r2,r4,10008c84 <___vfiprintf_internal_r+0x1090>
10008a70:	42000204 	addi	r8,r8,8
10008a74:	20800044 	addi	r2,r4,1
10008a78:	200b883a 	mov	r5,r4
10008a7c:	003dfa06 	br	10008268 <__alt_data_end+0xf8008268>
10008a80:	d9012117 	ldw	r4,1156(sp)
10008a84:	d9412017 	ldw	r5,1152(sp)
10008a88:	d9811a04 	addi	r6,sp,1128
10008a8c:	da812a15 	stw	r10,1192(sp)
10008a90:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008a94:	da812a17 	ldw	r10,1192(sp)
10008a98:	103f721e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008a9c:	d9411b17 	ldw	r5,1132(sp)
10008aa0:	d8c11c17 	ldw	r3,1136(sp)
10008aa4:	d811883a 	mov	r8,sp
10008aa8:	29000044 	addi	r4,r5,1
10008aac:	003fd906 	br	10008a14 <__alt_data_end+0xf8008a14>
10008ab0:	1800681e 	bne	r3,zero,10008c54 <___vfiprintf_internal_r+0x1060>
10008ab4:	50004d26 	beq	r10,zero,10008bec <___vfiprintf_internal_r+0xff8>
10008ab8:	d8811d04 	addi	r2,sp,1140
10008abc:	00c00084 	movi	r3,2
10008ac0:	d8800015 	stw	r2,0(sp)
10008ac4:	d8c00115 	stw	r3,4(sp)
10008ac8:	2005883a 	mov	r2,r4
10008acc:	d811883a 	mov	r8,sp
10008ad0:	003de006 	br	10008254 <__alt_data_end+0xf8008254>
10008ad4:	1800551e 	bne	r3,zero,10008c2c <___vfiprintf_internal_r+0x1038>
10008ad8:	000b883a 	mov	r5,zero
10008adc:	00800044 	movi	r2,1
10008ae0:	d811883a 	mov	r8,sp
10008ae4:	003dde06 	br	10008260 <__alt_data_end+0xf8008260>
10008ae8:	10803fcc 	andi	r2,r2,255
10008aec:	1000191e 	bne	r2,zero,10008b54 <___vfiprintf_internal_r+0xf60>
10008af0:	9080004c 	andi	r2,r18,1
10008af4:	10001726 	beq	r2,zero,10008b54 <___vfiprintf_internal_r+0xf60>
10008af8:	00800c04 	movi	r2,48
10008afc:	d8c109c4 	addi	r3,sp,1063
10008b00:	d88109c5 	stb	r2,1063(sp)
10008b04:	dd012817 	ldw	r20,1184(sp)
10008b08:	d8c12215 	stw	r3,1160(sp)
10008b0c:	003d8a06 	br	10008138 <__alt_data_end+0xf8008138>
10008b10:	d9012717 	ldw	r4,1180(sp)
10008b14:	dd010a04 	addi	r20,sp,1064
10008b18:	988003cc 	andi	r2,r19,15
10008b1c:	a806973a 	slli	r3,r21,28
10008b20:	2085883a 	add	r2,r4,r2
10008b24:	9826d13a 	srli	r19,r19,4
10008b28:	10800003 	ldbu	r2,0(r2)
10008b2c:	a82ad13a 	srli	r21,r21,4
10008b30:	a53fffc4 	addi	r20,r20,-1
10008b34:	1ce6b03a 	or	r19,r3,r19
10008b38:	a0800005 	stb	r2,0(r20)
10008b3c:	9d44b03a 	or	r2,r19,r21
10008b40:	103ff51e 	bne	r2,zero,10008b18 <__alt_data_end+0xf8008b18>
10008b44:	d9411e17 	ldw	r5,1144(sp)
10008b48:	dd012215 	stw	r20,1160(sp)
10008b4c:	2d29c83a 	sub	r20,r5,r20
10008b50:	003d7906 	br	10008138 <__alt_data_end+0xf8008138>
10008b54:	d8c10a04 	addi	r3,sp,1064
10008b58:	d8c12215 	stw	r3,1160(sp)
10008b5c:	003d7606 	br	10008138 <__alt_data_end+0xf8008138>
10008b60:	18009e1e 	bne	r3,zero,10008ddc <___vfiprintf_internal_r+0x11e8>
10008b64:	d8811d87 	ldb	r2,1142(sp)
10008b68:	10005f26 	beq	r2,zero,10008ce8 <___vfiprintf_internal_r+0x10f4>
10008b6c:	00c00044 	movi	r3,1
10008b70:	d9011d84 	addi	r4,sp,1142
10008b74:	1805883a 	mov	r2,r3
10008b78:	d9000015 	stw	r4,0(sp)
10008b7c:	d8c00115 	stw	r3,4(sp)
10008b80:	d811883a 	mov	r8,sp
10008b84:	003efc06 	br	10008778 <__alt_data_end+0xf8008778>
10008b88:	d9412417 	ldw	r5,1168(sp)
10008b8c:	d811883a 	mov	r8,sp
10008b90:	2d65c83a 	sub	r18,r5,r21
10008b94:	04bf4816 	blt	zero,r18,100088b8 <__alt_data_end+0xf80088b8>
10008b98:	003f6c06 	br	1000894c <__alt_data_end+0xf800894c>
10008b9c:	b829883a 	mov	r20,r23
10008ba0:	003c6906 	br	10007d48 <__alt_data_end+0xf8007d48>
10008ba4:	d9012117 	ldw	r4,1156(sp)
10008ba8:	d9412017 	ldw	r5,1152(sp)
10008bac:	d9811a04 	addi	r6,sp,1128
10008bb0:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008bb4:	103f2b1e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008bb8:	d8c11c17 	ldw	r3,1136(sp)
10008bbc:	d811883a 	mov	r8,sp
10008bc0:	003f3806 	br	100088a4 <__alt_data_end+0xf80088a4>
10008bc4:	00800084 	movi	r2,2
10008bc8:	9d46b03a 	or	r3,r19,r21
10008bcc:	003df606 	br	100083a8 <__alt_data_end+0xf80083a8>
10008bd0:	d9012117 	ldw	r4,1156(sp)
10008bd4:	d9412017 	ldw	r5,1152(sp)
10008bd8:	d9811a04 	addi	r6,sp,1128
10008bdc:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008be0:	103f201e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008be4:	d811883a 	mov	r8,sp
10008be8:	003cc606 	br	10007f04 <__alt_data_end+0xf8007f04>
10008bec:	000b883a 	mov	r5,zero
10008bf0:	2005883a 	mov	r2,r4
10008bf4:	d811883a 	mov	r8,sp
10008bf8:	003d9906 	br	10008260 <__alt_data_end+0xf8008260>
10008bfc:	10803fcc 	andi	r2,r2,255
10008c00:	1080201c 	xori	r2,r2,128
10008c04:	10bfe004 	addi	r2,r2,-128
10008c08:	01000c04 	movi	r4,48
10008c0c:	1100b226 	beq	r2,r4,10008ed8 <___vfiprintf_internal_r+0x12e4>
10008c10:	d9412217 	ldw	r5,1160(sp)
10008c14:	d8811e17 	ldw	r2,1144(sp)
10008c18:	193fffc5 	stb	r4,-1(r3)
10008c1c:	297fffc4 	addi	r5,r5,-1
10008c20:	d9412215 	stw	r5,1160(sp)
10008c24:	1169c83a 	sub	r20,r2,r5
10008c28:	003d4306 	br	10008138 <__alt_data_end+0xf8008138>
10008c2c:	d9012117 	ldw	r4,1156(sp)
10008c30:	d9412017 	ldw	r5,1152(sp)
10008c34:	d9811a04 	addi	r6,sp,1128
10008c38:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008c3c:	103f091e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008c40:	d9411b17 	ldw	r5,1132(sp)
10008c44:	d8c11c17 	ldw	r3,1136(sp)
10008c48:	d811883a 	mov	r8,sp
10008c4c:	28800044 	addi	r2,r5,1
10008c50:	003d8306 	br	10008260 <__alt_data_end+0xf8008260>
10008c54:	d9012117 	ldw	r4,1156(sp)
10008c58:	d9412017 	ldw	r5,1152(sp)
10008c5c:	d9811a04 	addi	r6,sp,1128
10008c60:	da812a15 	stw	r10,1192(sp)
10008c64:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008c68:	da812a17 	ldw	r10,1192(sp)
10008c6c:	103efd1e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008c70:	d9411b17 	ldw	r5,1132(sp)
10008c74:	d8c11c17 	ldw	r3,1136(sp)
10008c78:	d811883a 	mov	r8,sp
10008c7c:	28800044 	addi	r2,r5,1
10008c80:	003d6a06 	br	1000822c <__alt_data_end+0xf800822c>
10008c84:	1800a01e 	bne	r3,zero,10008f08 <___vfiprintf_internal_r+0x1314>
10008c88:	000b883a 	mov	r5,zero
10008c8c:	00800044 	movi	r2,1
10008c90:	d811883a 	mov	r8,sp
10008c94:	003d7406 	br	10008268 <__alt_data_end+0xf8008268>
10008c98:	d9012117 	ldw	r4,1156(sp)
10008c9c:	d9412017 	ldw	r5,1152(sp)
10008ca0:	d9811a04 	addi	r6,sp,1128
10008ca4:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008ca8:	103eee1e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008cac:	d8811b17 	ldw	r2,1132(sp)
10008cb0:	d8c11c17 	ldw	r3,1136(sp)
10008cb4:	d811883a 	mov	r8,sp
10008cb8:	10800044 	addi	r2,r2,1
10008cbc:	003d8f06 	br	100082fc <__alt_data_end+0xf80082fc>
10008cc0:	04e7c83a 	sub	r19,zero,r19
10008cc4:	9804c03a 	cmpne	r2,r19,zero
10008cc8:	056bc83a 	sub	r21,zero,r21
10008ccc:	a8abc83a 	sub	r21,r21,r2
10008cd0:	05800b44 	movi	r22,45
10008cd4:	dd811d85 	stb	r22,1142(sp)
10008cd8:	8029883a 	mov	r20,r16
10008cdc:	00800044 	movi	r2,1
10008ce0:	9d46b03a 	or	r3,r19,r21
10008ce4:	003cfa06 	br	100080d0 <__alt_data_end+0xf80080d0>
10008ce8:	000b883a 	mov	r5,zero
10008cec:	00800044 	movi	r2,1
10008cf0:	d811883a 	mov	r8,sp
10008cf4:	503d5a26 	beq	r10,zero,10008260 <__alt_data_end+0xf8008260>
10008cf8:	00c00084 	movi	r3,2
10008cfc:	d9011d04 	addi	r4,sp,1140
10008d00:	d9000015 	stw	r4,0(sp)
10008d04:	d8c00115 	stw	r3,4(sp)
10008d08:	003d5206 	br	10008254 <__alt_data_end+0xf8008254>
10008d0c:	9080040c 	andi	r2,r18,16
10008d10:	1000421e 	bne	r2,zero,10008e1c <___vfiprintf_internal_r+0x1228>
10008d14:	9480100c 	andi	r18,r18,64
10008d18:	90009c26 	beq	r18,zero,10008f8c <___vfiprintf_internal_r+0x1398>
10008d1c:	d9412317 	ldw	r5,1164(sp)
10008d20:	d8c12517 	ldw	r3,1172(sp)
10008d24:	28800017 	ldw	r2,0(r5)
10008d28:	29400104 	addi	r5,r5,4
10008d2c:	d9412315 	stw	r5,1164(sp)
10008d30:	10c0000d 	sth	r3,0(r2)
10008d34:	003be706 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10008d38:	90c0100c 	andi	r3,r18,64
10008d3c:	18003e26 	beq	r3,zero,10008e38 <___vfiprintf_internal_r+0x1244>
10008d40:	d8c12317 	ldw	r3,1164(sp)
10008d44:	14c0000b 	ldhu	r19,0(r2)
10008d48:	002b883a 	mov	r21,zero
10008d4c:	18c00104 	addi	r3,r3,4
10008d50:	d8c12315 	stw	r3,1164(sp)
10008d54:	003db706 	br	10008434 <__alt_data_end+0xf8008434>
10008d58:	9080100c 	andi	r2,r18,64
10008d5c:	10004c26 	beq	r2,zero,10008e90 <___vfiprintf_internal_r+0x129c>
10008d60:	1cc0000f 	ldh	r19,0(r3)
10008d64:	d8812317 	ldw	r2,1164(sp)
10008d68:	982bd7fa 	srai	r21,r19,31
10008d6c:	10800104 	addi	r2,r2,4
10008d70:	d8812315 	stw	r2,1164(sp)
10008d74:	a805883a 	mov	r2,r21
10008d78:	003cd006 	br	100080bc <__alt_data_end+0xf80080bc>
10008d7c:	00800084 	movi	r2,2
10008d80:	003d8906 	br	100083a8 <__alt_data_end+0xf80083a8>
10008d84:	b9800007 	ldb	r6,0(r23)
10008d88:	003bfb06 	br	10007d78 <__alt_data_end+0xf8007d78>
10008d8c:	9080100c 	andi	r2,r18,64
10008d90:	10003726 	beq	r2,zero,10008e70 <___vfiprintf_internal_r+0x127c>
10008d94:	d9412317 	ldw	r5,1164(sp)
10008d98:	002b883a 	mov	r21,zero
10008d9c:	0005883a 	mov	r2,zero
10008da0:	2cc0000b 	ldhu	r19,0(r5)
10008da4:	29400104 	addi	r5,r5,4
10008da8:	d9412315 	stw	r5,1164(sp)
10008dac:	9807883a 	mov	r3,r19
10008db0:	003d7d06 	br	100083a8 <__alt_data_end+0xf80083a8>
10008db4:	9080100c 	andi	r2,r18,64
10008db8:	10002526 	beq	r2,zero,10008e50 <___vfiprintf_internal_r+0x125c>
10008dbc:	d8812317 	ldw	r2,1164(sp)
10008dc0:	002b883a 	mov	r21,zero
10008dc4:	14c0000b 	ldhu	r19,0(r2)
10008dc8:	10800104 	addi	r2,r2,4
10008dcc:	d8812315 	stw	r2,1164(sp)
10008dd0:	9807883a 	mov	r3,r19
10008dd4:	00800044 	movi	r2,1
10008dd8:	003d7306 	br	100083a8 <__alt_data_end+0xf80083a8>
10008ddc:	d9012117 	ldw	r4,1156(sp)
10008de0:	d9412017 	ldw	r5,1152(sp)
10008de4:	d9811a04 	addi	r6,sp,1128
10008de8:	da812a15 	stw	r10,1192(sp)
10008dec:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008df0:	da812a17 	ldw	r10,1192(sp)
10008df4:	103e9b1e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008df8:	d9411b17 	ldw	r5,1132(sp)
10008dfc:	d8c11c17 	ldw	r3,1136(sp)
10008e00:	d811883a 	mov	r8,sp
10008e04:	28800044 	addi	r2,r5,1
10008e08:	003e5006 	br	1000874c <__alt_data_end+0xf800874c>
10008e0c:	182b883a 	mov	r21,r3
10008e10:	003ed006 	br	10008954 <__alt_data_end+0xf8008954>
10008e14:	8029883a 	mov	r20,r16
10008e18:	003dc606 	br	10008534 <__alt_data_end+0xf8008534>
10008e1c:	d8c12317 	ldw	r3,1164(sp)
10008e20:	d9012517 	ldw	r4,1172(sp)
10008e24:	18800017 	ldw	r2,0(r3)
10008e28:	18c00104 	addi	r3,r3,4
10008e2c:	d8c12315 	stw	r3,1164(sp)
10008e30:	11000015 	stw	r4,0(r2)
10008e34:	003ba706 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10008e38:	d9012317 	ldw	r4,1164(sp)
10008e3c:	14c00017 	ldw	r19,0(r2)
10008e40:	002b883a 	mov	r21,zero
10008e44:	21000104 	addi	r4,r4,4
10008e48:	d9012315 	stw	r4,1164(sp)
10008e4c:	003d7906 	br	10008434 <__alt_data_end+0xf8008434>
10008e50:	d8c12317 	ldw	r3,1164(sp)
10008e54:	002b883a 	mov	r21,zero
10008e58:	00800044 	movi	r2,1
10008e5c:	1cc00017 	ldw	r19,0(r3)
10008e60:	18c00104 	addi	r3,r3,4
10008e64:	d8c12315 	stw	r3,1164(sp)
10008e68:	9807883a 	mov	r3,r19
10008e6c:	003d4e06 	br	100083a8 <__alt_data_end+0xf80083a8>
10008e70:	d8812317 	ldw	r2,1164(sp)
10008e74:	002b883a 	mov	r21,zero
10008e78:	14c00017 	ldw	r19,0(r2)
10008e7c:	10800104 	addi	r2,r2,4
10008e80:	d8812315 	stw	r2,1164(sp)
10008e84:	9807883a 	mov	r3,r19
10008e88:	0005883a 	mov	r2,zero
10008e8c:	003d4606 	br	100083a8 <__alt_data_end+0xf80083a8>
10008e90:	1cc00017 	ldw	r19,0(r3)
10008e94:	d8c12317 	ldw	r3,1164(sp)
10008e98:	982bd7fa 	srai	r21,r19,31
10008e9c:	18c00104 	addi	r3,r3,4
10008ea0:	d8c12315 	stw	r3,1164(sp)
10008ea4:	a805883a 	mov	r2,r21
10008ea8:	003c8406 	br	100080bc <__alt_data_end+0xf80080bc>
10008eac:	01040074 	movhi	r4,4097
10008eb0:	213e2804 	addi	r4,r4,-1888
10008eb4:	d9012615 	stw	r4,1176(sp)
10008eb8:	003d0606 	br	100082d4 <__alt_data_end+0xf80082d4>
10008ebc:	b9800043 	ldbu	r6,1(r23)
10008ec0:	94800814 	ori	r18,r18,32
10008ec4:	bdc00044 	addi	r23,r23,1
10008ec8:	31803fcc 	andi	r6,r6,255
10008ecc:	3180201c 	xori	r6,r6,128
10008ed0:	31bfe004 	addi	r6,r6,-128
10008ed4:	003ba806 	br	10007d78 <__alt_data_end+0xf8007d78>
10008ed8:	d8811e17 	ldw	r2,1144(sp)
10008edc:	d8c12217 	ldw	r3,1160(sp)
10008ee0:	10e9c83a 	sub	r20,r2,r3
10008ee4:	003c9406 	br	10008138 <__alt_data_end+0xf8008138>
10008ee8:	da012a15 	stw	r8,1192(sp)
10008eec:	00007040 	call	10000704 <strlen>
10008ef0:	1029883a 	mov	r20,r2
10008ef4:	dd811d83 	ldbu	r22,1142(sp)
10008ef8:	dcc12315 	stw	r19,1164(sp)
10008efc:	0021883a 	mov	r16,zero
10008f00:	da012a17 	ldw	r8,1192(sp)
10008f04:	003c8c06 	br	10008138 <__alt_data_end+0xf8008138>
10008f08:	d9012117 	ldw	r4,1156(sp)
10008f0c:	d9412017 	ldw	r5,1152(sp)
10008f10:	d9811a04 	addi	r6,sp,1128
10008f14:	0007ae00 	call	10007ae0 <__sprint_r.part.0>
10008f18:	103e521e 	bne	r2,zero,10008864 <__alt_data_end+0xf8008864>
10008f1c:	d9411b17 	ldw	r5,1132(sp)
10008f20:	d8c11c17 	ldw	r3,1136(sp)
10008f24:	d811883a 	mov	r8,sp
10008f28:	28800044 	addi	r2,r5,1
10008f2c:	003cce06 	br	10008268 <__alt_data_end+0xf8008268>
10008f30:	01440074 	movhi	r5,4097
10008f34:	297e2c04 	addi	r5,r5,-1872
10008f38:	d9412615 	stw	r5,1176(sp)
10008f3c:	d9411b17 	ldw	r5,1132(sp)
10008f40:	29400044 	addi	r5,r5,1
10008f44:	003cad06 	br	100081fc <__alt_data_end+0xf80081fc>
10008f48:	00800184 	movi	r2,6
10008f4c:	1400012e 	bgeu	r2,r16,10008f54 <___vfiprintf_internal_r+0x1360>
10008f50:	1021883a 	mov	r16,r2
10008f54:	8029883a 	mov	r20,r16
10008f58:	802b883a 	mov	r21,r16
10008f5c:	80001c16 	blt	r16,zero,10008fd0 <___vfiprintf_internal_r+0x13dc>
10008f60:	00c40074 	movhi	r3,4097
10008f64:	18fdcc04 	addi	r3,r3,-2256
10008f68:	dcc12315 	stw	r19,1164(sp)
10008f6c:	d8c12215 	stw	r3,1160(sp)
10008f70:	003cff06 	br	10008370 <__alt_data_end+0xf8008370>
10008f74:	d9411b17 	ldw	r5,1132(sp)
10008f78:	00840074 	movhi	r2,4097
10008f7c:	10be2c04 	addi	r2,r2,-1872
10008f80:	d8812615 	stw	r2,1176(sp)
10008f84:	29400044 	addi	r5,r5,1
10008f88:	003e6706 	br	10008928 <__alt_data_end+0xf8008928>
10008f8c:	d9012317 	ldw	r4,1164(sp)
10008f90:	d9412517 	ldw	r5,1172(sp)
10008f94:	20800017 	ldw	r2,0(r4)
10008f98:	21000104 	addi	r4,r4,4
10008f9c:	d9012315 	stw	r4,1164(sp)
10008fa0:	11400015 	stw	r5,0(r2)
10008fa4:	003b4b06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10008fa8:	8029883a 	mov	r20,r16
10008fac:	dd811d83 	ldbu	r22,1142(sp)
10008fb0:	dcc12315 	stw	r19,1164(sp)
10008fb4:	0021883a 	mov	r16,zero
10008fb8:	003c5f06 	br	10008138 <__alt_data_end+0xf8008138>
10008fbc:	01040074 	movhi	r4,4097
10008fc0:	213e2804 	addi	r4,r4,-1888
10008fc4:	d9012615 	stw	r4,1176(sp)
10008fc8:	1009883a 	mov	r4,r2
10008fcc:	003ea006 	br	10008a50 <__alt_data_end+0xf8008a50>
10008fd0:	002b883a 	mov	r21,zero
10008fd4:	003fe206 	br	10008f60 <__alt_data_end+0xf8008f60>
10008fd8:	d9412317 	ldw	r5,1164(sp)
10008fdc:	b807883a 	mov	r3,r23
10008fe0:	102f883a 	mov	r23,r2
10008fe4:	2c000017 	ldw	r16,0(r5)
10008fe8:	29000104 	addi	r4,r5,4
10008fec:	d9012315 	stw	r4,1164(sp)
10008ff0:	80000416 	blt	r16,zero,10009004 <___vfiprintf_internal_r+0x1410>
10008ff4:	19800047 	ldb	r6,1(r3)
10008ff8:	003b5f06 	br	10007d78 <__alt_data_end+0xf8007d78>
10008ffc:	043fffc4 	movi	r16,-1
10009000:	003bef06 	br	10007fc0 <__alt_data_end+0xf8007fc0>
10009004:	043fffc4 	movi	r16,-1
10009008:	19800047 	ldb	r6,1(r3)
1000900c:	003b5a06 	br	10007d78 <__alt_data_end+0xf8007d78>
10009010:	282b883a 	mov	r21,r5
10009014:	003cc706 	br	10008334 <__alt_data_end+0xf8008334>

10009018 <__vfiprintf_internal>:
10009018:	2007883a 	mov	r3,r4
1000901c:	01040074 	movhi	r4,4097
10009020:	21052904 	addi	r4,r4,5284
10009024:	21000017 	ldw	r4,0(r4)
10009028:	2805883a 	mov	r2,r5
1000902c:	300f883a 	mov	r7,r6
10009030:	180b883a 	mov	r5,r3
10009034:	100d883a 	mov	r6,r2
10009038:	0007bf41 	jmpi	10007bf4 <___vfiprintf_internal_r>

1000903c <_write_r>:
1000903c:	defffd04 	addi	sp,sp,-12
10009040:	dc000015 	stw	r16,0(sp)
10009044:	04040074 	movhi	r16,4097
10009048:	dc400115 	stw	r17,4(sp)
1000904c:	840bf904 	addi	r16,r16,12260
10009050:	2023883a 	mov	r17,r4
10009054:	2809883a 	mov	r4,r5
10009058:	300b883a 	mov	r5,r6
1000905c:	380d883a 	mov	r6,r7
10009060:	dfc00215 	stw	ra,8(sp)
10009064:	80000015 	stw	zero,0(r16)
10009068:	000d8000 	call	1000d800 <write>
1000906c:	00ffffc4 	movi	r3,-1
10009070:	10c00526 	beq	r2,r3,10009088 <_write_r+0x4c>
10009074:	dfc00217 	ldw	ra,8(sp)
10009078:	dc400117 	ldw	r17,4(sp)
1000907c:	dc000017 	ldw	r16,0(sp)
10009080:	dec00304 	addi	sp,sp,12
10009084:	f800283a 	ret
10009088:	80c00017 	ldw	r3,0(r16)
1000908c:	183ff926 	beq	r3,zero,10009074 <__alt_data_end+0xf8009074>
10009090:	88c00015 	stw	r3,0(r17)
10009094:	003ff706 	br	10009074 <__alt_data_end+0xf8009074>

10009098 <_close_r>:
10009098:	defffd04 	addi	sp,sp,-12
1000909c:	dc000015 	stw	r16,0(sp)
100090a0:	04040074 	movhi	r16,4097
100090a4:	dc400115 	stw	r17,4(sp)
100090a8:	840bf904 	addi	r16,r16,12260
100090ac:	2023883a 	mov	r17,r4
100090b0:	2809883a 	mov	r4,r5
100090b4:	dfc00215 	stw	ra,8(sp)
100090b8:	80000015 	stw	zero,0(r16)
100090bc:	000cf5c0 	call	1000cf5c <close>
100090c0:	00ffffc4 	movi	r3,-1
100090c4:	10c00526 	beq	r2,r3,100090dc <_close_r+0x44>
100090c8:	dfc00217 	ldw	ra,8(sp)
100090cc:	dc400117 	ldw	r17,4(sp)
100090d0:	dc000017 	ldw	r16,0(sp)
100090d4:	dec00304 	addi	sp,sp,12
100090d8:	f800283a 	ret
100090dc:	80c00017 	ldw	r3,0(r16)
100090e0:	183ff926 	beq	r3,zero,100090c8 <__alt_data_end+0xf80090c8>
100090e4:	88c00015 	stw	r3,0(r17)
100090e8:	003ff706 	br	100090c8 <__alt_data_end+0xf80090c8>

100090ec <_calloc_r>:
100090ec:	defffe04 	addi	sp,sp,-8
100090f0:	dc000015 	stw	r16,0(sp)
100090f4:	2021883a 	mov	r16,r4
100090f8:	2809883a 	mov	r4,r5
100090fc:	300b883a 	mov	r5,r6
10009100:	dfc00115 	stw	ra,4(sp)
10009104:	00005a80 	call	100005a8 <__mulsi3>
10009108:	8009883a 	mov	r4,r16
1000910c:	100b883a 	mov	r5,r2
10009110:	00056080 	call	10005608 <_malloc_r>
10009114:	1021883a 	mov	r16,r2
10009118:	10002826 	beq	r2,zero,100091bc <_calloc_r+0xd0>
1000911c:	11bfff17 	ldw	r6,-4(r2)
10009120:	00bfff04 	movi	r2,-4
10009124:	00c00904 	movi	r3,36
10009128:	308c703a 	and	r6,r6,r2
1000912c:	308d883a 	add	r6,r6,r2
10009130:	19801436 	bltu	r3,r6,10009184 <_calloc_r+0x98>
10009134:	008004c4 	movi	r2,19
10009138:	11800936 	bltu	r2,r6,10009160 <_calloc_r+0x74>
1000913c:	8005883a 	mov	r2,r16
10009140:	10000015 	stw	zero,0(r2)
10009144:	10000115 	stw	zero,4(r2)
10009148:	10000215 	stw	zero,8(r2)
1000914c:	8005883a 	mov	r2,r16
10009150:	dfc00117 	ldw	ra,4(sp)
10009154:	dc000017 	ldw	r16,0(sp)
10009158:	dec00204 	addi	sp,sp,8
1000915c:	f800283a 	ret
10009160:	80000015 	stw	zero,0(r16)
10009164:	80000115 	stw	zero,4(r16)
10009168:	008006c4 	movi	r2,27
1000916c:	11800d2e 	bgeu	r2,r6,100091a4 <_calloc_r+0xb8>
10009170:	80000215 	stw	zero,8(r16)
10009174:	80000315 	stw	zero,12(r16)
10009178:	30c00c26 	beq	r6,r3,100091ac <_calloc_r+0xc0>
1000917c:	80800404 	addi	r2,r16,16
10009180:	003fef06 	br	10009140 <__alt_data_end+0xf8009140>
10009184:	8009883a 	mov	r4,r16
10009188:	000b883a 	mov	r5,zero
1000918c:	000612c0 	call	1000612c <memset>
10009190:	8005883a 	mov	r2,r16
10009194:	dfc00117 	ldw	ra,4(sp)
10009198:	dc000017 	ldw	r16,0(sp)
1000919c:	dec00204 	addi	sp,sp,8
100091a0:	f800283a 	ret
100091a4:	80800204 	addi	r2,r16,8
100091a8:	003fe506 	br	10009140 <__alt_data_end+0xf8009140>
100091ac:	80000415 	stw	zero,16(r16)
100091b0:	80800604 	addi	r2,r16,24
100091b4:	80000515 	stw	zero,20(r16)
100091b8:	003fe106 	br	10009140 <__alt_data_end+0xf8009140>
100091bc:	0005883a 	mov	r2,zero
100091c0:	003fe306 	br	10009150 <__alt_data_end+0xf8009150>

100091c4 <_fclose_r>:
100091c4:	28003226 	beq	r5,zero,10009290 <_fclose_r+0xcc>
100091c8:	defffc04 	addi	sp,sp,-16
100091cc:	dc400115 	stw	r17,4(sp)
100091d0:	2023883a 	mov	r17,r4
100091d4:	dc000015 	stw	r16,0(sp)
100091d8:	dfc00315 	stw	ra,12(sp)
100091dc:	dc800215 	stw	r18,8(sp)
100091e0:	2821883a 	mov	r16,r5
100091e4:	00049080 	call	10004908 <__sfp_lock_acquire>
100091e8:	88000226 	beq	r17,zero,100091f4 <_fclose_r+0x30>
100091ec:	88800e17 	ldw	r2,56(r17)
100091f0:	10002926 	beq	r2,zero,10009298 <_fclose_r+0xd4>
100091f4:	8080030f 	ldh	r2,12(r16)
100091f8:	10002226 	beq	r2,zero,10009284 <_fclose_r+0xc0>
100091fc:	8809883a 	mov	r4,r17
10009200:	800b883a 	mov	r5,r16
10009204:	000433c0 	call	1000433c <_fflush_r>
10009208:	1025883a 	mov	r18,r2
1000920c:	80800b17 	ldw	r2,44(r16)
10009210:	10000426 	beq	r2,zero,10009224 <_fclose_r+0x60>
10009214:	81400717 	ldw	r5,28(r16)
10009218:	8809883a 	mov	r4,r17
1000921c:	103ee83a 	callr	r2
10009220:	10002616 	blt	r2,zero,100092bc <_fclose_r+0xf8>
10009224:	8080030b 	ldhu	r2,12(r16)
10009228:	1080200c 	andi	r2,r2,128
1000922c:	10001f1e 	bne	r2,zero,100092ac <_fclose_r+0xe8>
10009230:	81400c17 	ldw	r5,48(r16)
10009234:	28000526 	beq	r5,zero,1000924c <_fclose_r+0x88>
10009238:	80801004 	addi	r2,r16,64
1000923c:	28800226 	beq	r5,r2,10009248 <_fclose_r+0x84>
10009240:	8809883a 	mov	r4,r17
10009244:	0004a6c0 	call	10004a6c <_free_r>
10009248:	80000c15 	stw	zero,48(r16)
1000924c:	81401117 	ldw	r5,68(r16)
10009250:	28000326 	beq	r5,zero,10009260 <_fclose_r+0x9c>
10009254:	8809883a 	mov	r4,r17
10009258:	0004a6c0 	call	10004a6c <_free_r>
1000925c:	80001115 	stw	zero,68(r16)
10009260:	8000030d 	sth	zero,12(r16)
10009264:	000490c0 	call	1000490c <__sfp_lock_release>
10009268:	9005883a 	mov	r2,r18
1000926c:	dfc00317 	ldw	ra,12(sp)
10009270:	dc800217 	ldw	r18,8(sp)
10009274:	dc400117 	ldw	r17,4(sp)
10009278:	dc000017 	ldw	r16,0(sp)
1000927c:	dec00404 	addi	sp,sp,16
10009280:	f800283a 	ret
10009284:	000490c0 	call	1000490c <__sfp_lock_release>
10009288:	0005883a 	mov	r2,zero
1000928c:	003ff706 	br	1000926c <__alt_data_end+0xf800926c>
10009290:	0005883a 	mov	r2,zero
10009294:	f800283a 	ret
10009298:	8809883a 	mov	r4,r17
1000929c:	00048f80 	call	100048f8 <__sinit>
100092a0:	8080030f 	ldh	r2,12(r16)
100092a4:	103fd51e 	bne	r2,zero,100091fc <__alt_data_end+0xf80091fc>
100092a8:	003ff606 	br	10009284 <__alt_data_end+0xf8009284>
100092ac:	81400417 	ldw	r5,16(r16)
100092b0:	8809883a 	mov	r4,r17
100092b4:	0004a6c0 	call	10004a6c <_free_r>
100092b8:	003fdd06 	br	10009230 <__alt_data_end+0xf8009230>
100092bc:	04bfffc4 	movi	r18,-1
100092c0:	003fd806 	br	10009224 <__alt_data_end+0xf8009224>

100092c4 <fclose>:
100092c4:	00840074 	movhi	r2,4097
100092c8:	10852904 	addi	r2,r2,5284
100092cc:	200b883a 	mov	r5,r4
100092d0:	11000017 	ldw	r4,0(r2)
100092d4:	00091c41 	jmpi	100091c4 <_fclose_r>

100092d8 <_fputwc_r>:
100092d8:	3080030b 	ldhu	r2,12(r6)
100092dc:	defff804 	addi	sp,sp,-32
100092e0:	dcc00415 	stw	r19,16(sp)
100092e4:	dc800315 	stw	r18,12(sp)
100092e8:	dc000115 	stw	r16,4(sp)
100092ec:	dfc00715 	stw	ra,28(sp)
100092f0:	dd400615 	stw	r21,24(sp)
100092f4:	dd000515 	stw	r20,20(sp)
100092f8:	dc400215 	stw	r17,8(sp)
100092fc:	10c8000c 	andi	r3,r2,8192
10009300:	3021883a 	mov	r16,r6
10009304:	2027883a 	mov	r19,r4
10009308:	2825883a 	mov	r18,r5
1000930c:	1800051e 	bne	r3,zero,10009324 <_fputwc_r+0x4c>
10009310:	30c01917 	ldw	r3,100(r6)
10009314:	10880014 	ori	r2,r2,8192
10009318:	3080030d 	sth	r2,12(r6)
1000931c:	18880014 	ori	r2,r3,8192
10009320:	30801915 	stw	r2,100(r6)
10009324:	00053f80 	call	100053f8 <__locale_mb_cur_max>
10009328:	00c00044 	movi	r3,1
1000932c:	10c03e26 	beq	r2,r3,10009428 <_fputwc_r+0x150>
10009330:	9809883a 	mov	r4,r19
10009334:	d80b883a 	mov	r5,sp
10009338:	900d883a 	mov	r6,r18
1000933c:	81c01704 	addi	r7,r16,92
10009340:	00097880 	call	10009788 <_wcrtomb_r>
10009344:	1029883a 	mov	r20,r2
10009348:	00bfffc4 	movi	r2,-1
1000934c:	a0802026 	beq	r20,r2,100093d0 <_fputwc_r+0xf8>
10009350:	d9400003 	ldbu	r5,0(sp)
10009354:	a0001c26 	beq	r20,zero,100093c8 <_fputwc_r+0xf0>
10009358:	0023883a 	mov	r17,zero
1000935c:	05400284 	movi	r21,10
10009360:	00000906 	br	10009388 <_fputwc_r+0xb0>
10009364:	80800017 	ldw	r2,0(r16)
10009368:	11400005 	stb	r5,0(r2)
1000936c:	80c00017 	ldw	r3,0(r16)
10009370:	18c00044 	addi	r3,r3,1
10009374:	80c00015 	stw	r3,0(r16)
10009378:	8c400044 	addi	r17,r17,1
1000937c:	dc45883a 	add	r2,sp,r17
10009380:	8d00112e 	bgeu	r17,r20,100093c8 <_fputwc_r+0xf0>
10009384:	11400003 	ldbu	r5,0(r2)
10009388:	80c00217 	ldw	r3,8(r16)
1000938c:	18ffffc4 	addi	r3,r3,-1
10009390:	80c00215 	stw	r3,8(r16)
10009394:	183ff30e 	bge	r3,zero,10009364 <__alt_data_end+0xf8009364>
10009398:	80800617 	ldw	r2,24(r16)
1000939c:	18801916 	blt	r3,r2,10009404 <_fputwc_r+0x12c>
100093a0:	80800017 	ldw	r2,0(r16)
100093a4:	11400005 	stb	r5,0(r2)
100093a8:	80800017 	ldw	r2,0(r16)
100093ac:	10c00003 	ldbu	r3,0(r2)
100093b0:	10800044 	addi	r2,r2,1
100093b4:	1d402326 	beq	r3,r21,10009444 <_fputwc_r+0x16c>
100093b8:	80800015 	stw	r2,0(r16)
100093bc:	8c400044 	addi	r17,r17,1
100093c0:	dc45883a 	add	r2,sp,r17
100093c4:	8d3fef36 	bltu	r17,r20,10009384 <__alt_data_end+0xf8009384>
100093c8:	9005883a 	mov	r2,r18
100093cc:	00000406 	br	100093e0 <_fputwc_r+0x108>
100093d0:	80c0030b 	ldhu	r3,12(r16)
100093d4:	a005883a 	mov	r2,r20
100093d8:	18c01014 	ori	r3,r3,64
100093dc:	80c0030d 	sth	r3,12(r16)
100093e0:	dfc00717 	ldw	ra,28(sp)
100093e4:	dd400617 	ldw	r21,24(sp)
100093e8:	dd000517 	ldw	r20,20(sp)
100093ec:	dcc00417 	ldw	r19,16(sp)
100093f0:	dc800317 	ldw	r18,12(sp)
100093f4:	dc400217 	ldw	r17,8(sp)
100093f8:	dc000117 	ldw	r16,4(sp)
100093fc:	dec00804 	addi	sp,sp,32
10009400:	f800283a 	ret
10009404:	9809883a 	mov	r4,r19
10009408:	29403fcc 	andi	r5,r5,255
1000940c:	800d883a 	mov	r6,r16
10009410:	00096180 	call	10009618 <__swbuf_r>
10009414:	10bfffe0 	cmpeqi	r2,r2,-1
10009418:	10803fcc 	andi	r2,r2,255
1000941c:	103fd626 	beq	r2,zero,10009378 <__alt_data_end+0xf8009378>
10009420:	00bfffc4 	movi	r2,-1
10009424:	003fee06 	br	100093e0 <__alt_data_end+0xf80093e0>
10009428:	90ffffc4 	addi	r3,r18,-1
1000942c:	01003f84 	movi	r4,254
10009430:	20ffbf36 	bltu	r4,r3,10009330 <__alt_data_end+0xf8009330>
10009434:	900b883a 	mov	r5,r18
10009438:	dc800005 	stb	r18,0(sp)
1000943c:	1029883a 	mov	r20,r2
10009440:	003fc506 	br	10009358 <__alt_data_end+0xf8009358>
10009444:	9809883a 	mov	r4,r19
10009448:	a80b883a 	mov	r5,r21
1000944c:	800d883a 	mov	r6,r16
10009450:	00096180 	call	10009618 <__swbuf_r>
10009454:	10bfffe0 	cmpeqi	r2,r2,-1
10009458:	003fef06 	br	10009418 <__alt_data_end+0xf8009418>

1000945c <fputwc>:
1000945c:	defffc04 	addi	sp,sp,-16
10009460:	dc000115 	stw	r16,4(sp)
10009464:	04040074 	movhi	r16,4097
10009468:	84052904 	addi	r16,r16,5284
1000946c:	dc400215 	stw	r17,8(sp)
10009470:	2023883a 	mov	r17,r4
10009474:	81000017 	ldw	r4,0(r16)
10009478:	dfc00315 	stw	ra,12(sp)
1000947c:	280d883a 	mov	r6,r5
10009480:	20000626 	beq	r4,zero,1000949c <fputwc+0x40>
10009484:	20800e17 	ldw	r2,56(r4)
10009488:	1000041e 	bne	r2,zero,1000949c <fputwc+0x40>
1000948c:	d9400015 	stw	r5,0(sp)
10009490:	00048f80 	call	100048f8 <__sinit>
10009494:	81000017 	ldw	r4,0(r16)
10009498:	d9800017 	ldw	r6,0(sp)
1000949c:	880b883a 	mov	r5,r17
100094a0:	dfc00317 	ldw	ra,12(sp)
100094a4:	dc400217 	ldw	r17,8(sp)
100094a8:	dc000117 	ldw	r16,4(sp)
100094ac:	dec00404 	addi	sp,sp,16
100094b0:	00092d81 	jmpi	100092d8 <_fputwc_r>

100094b4 <_fstat_r>:
100094b4:	defffd04 	addi	sp,sp,-12
100094b8:	dc000015 	stw	r16,0(sp)
100094bc:	04040074 	movhi	r16,4097
100094c0:	dc400115 	stw	r17,4(sp)
100094c4:	840bf904 	addi	r16,r16,12260
100094c8:	2023883a 	mov	r17,r4
100094cc:	2809883a 	mov	r4,r5
100094d0:	300b883a 	mov	r5,r6
100094d4:	dfc00215 	stw	ra,8(sp)
100094d8:	80000015 	stw	zero,0(r16)
100094dc:	000d0b00 	call	1000d0b0 <fstat>
100094e0:	00ffffc4 	movi	r3,-1
100094e4:	10c00526 	beq	r2,r3,100094fc <_fstat_r+0x48>
100094e8:	dfc00217 	ldw	ra,8(sp)
100094ec:	dc400117 	ldw	r17,4(sp)
100094f0:	dc000017 	ldw	r16,0(sp)
100094f4:	dec00304 	addi	sp,sp,12
100094f8:	f800283a 	ret
100094fc:	80c00017 	ldw	r3,0(r16)
10009500:	183ff926 	beq	r3,zero,100094e8 <__alt_data_end+0xf80094e8>
10009504:	88c00015 	stw	r3,0(r17)
10009508:	003ff706 	br	100094e8 <__alt_data_end+0xf80094e8>

1000950c <_isatty_r>:
1000950c:	defffd04 	addi	sp,sp,-12
10009510:	dc000015 	stw	r16,0(sp)
10009514:	04040074 	movhi	r16,4097
10009518:	dc400115 	stw	r17,4(sp)
1000951c:	840bf904 	addi	r16,r16,12260
10009520:	2023883a 	mov	r17,r4
10009524:	2809883a 	mov	r4,r5
10009528:	dfc00215 	stw	ra,8(sp)
1000952c:	80000015 	stw	zero,0(r16)
10009530:	000d1b80 	call	1000d1b8 <isatty>
10009534:	00ffffc4 	movi	r3,-1
10009538:	10c00526 	beq	r2,r3,10009550 <_isatty_r+0x44>
1000953c:	dfc00217 	ldw	ra,8(sp)
10009540:	dc400117 	ldw	r17,4(sp)
10009544:	dc000017 	ldw	r16,0(sp)
10009548:	dec00304 	addi	sp,sp,12
1000954c:	f800283a 	ret
10009550:	80c00017 	ldw	r3,0(r16)
10009554:	183ff926 	beq	r3,zero,1000953c <__alt_data_end+0xf800953c>
10009558:	88c00015 	stw	r3,0(r17)
1000955c:	003ff706 	br	1000953c <__alt_data_end+0xf800953c>

10009560 <_lseek_r>:
10009560:	defffd04 	addi	sp,sp,-12
10009564:	dc000015 	stw	r16,0(sp)
10009568:	04040074 	movhi	r16,4097
1000956c:	dc400115 	stw	r17,4(sp)
10009570:	840bf904 	addi	r16,r16,12260
10009574:	2023883a 	mov	r17,r4
10009578:	2809883a 	mov	r4,r5
1000957c:	300b883a 	mov	r5,r6
10009580:	380d883a 	mov	r6,r7
10009584:	dfc00215 	stw	ra,8(sp)
10009588:	80000015 	stw	zero,0(r16)
1000958c:	000d3980 	call	1000d398 <lseek>
10009590:	00ffffc4 	movi	r3,-1
10009594:	10c00526 	beq	r2,r3,100095ac <_lseek_r+0x4c>
10009598:	dfc00217 	ldw	ra,8(sp)
1000959c:	dc400117 	ldw	r17,4(sp)
100095a0:	dc000017 	ldw	r16,0(sp)
100095a4:	dec00304 	addi	sp,sp,12
100095a8:	f800283a 	ret
100095ac:	80c00017 	ldw	r3,0(r16)
100095b0:	183ff926 	beq	r3,zero,10009598 <__alt_data_end+0xf8009598>
100095b4:	88c00015 	stw	r3,0(r17)
100095b8:	003ff706 	br	10009598 <__alt_data_end+0xf8009598>

100095bc <_read_r>:
100095bc:	defffd04 	addi	sp,sp,-12
100095c0:	dc000015 	stw	r16,0(sp)
100095c4:	04040074 	movhi	r16,4097
100095c8:	dc400115 	stw	r17,4(sp)
100095cc:	840bf904 	addi	r16,r16,12260
100095d0:	2023883a 	mov	r17,r4
100095d4:	2809883a 	mov	r4,r5
100095d8:	300b883a 	mov	r5,r6
100095dc:	380d883a 	mov	r6,r7
100095e0:	dfc00215 	stw	ra,8(sp)
100095e4:	80000015 	stw	zero,0(r16)
100095e8:	000d57c0 	call	1000d57c <read>
100095ec:	00ffffc4 	movi	r3,-1
100095f0:	10c00526 	beq	r2,r3,10009608 <_read_r+0x4c>
100095f4:	dfc00217 	ldw	ra,8(sp)
100095f8:	dc400117 	ldw	r17,4(sp)
100095fc:	dc000017 	ldw	r16,0(sp)
10009600:	dec00304 	addi	sp,sp,12
10009604:	f800283a 	ret
10009608:	80c00017 	ldw	r3,0(r16)
1000960c:	183ff926 	beq	r3,zero,100095f4 <__alt_data_end+0xf80095f4>
10009610:	88c00015 	stw	r3,0(r17)
10009614:	003ff706 	br	100095f4 <__alt_data_end+0xf80095f4>

10009618 <__swbuf_r>:
10009618:	defffc04 	addi	sp,sp,-16
1000961c:	dc800215 	stw	r18,8(sp)
10009620:	dc400115 	stw	r17,4(sp)
10009624:	dc000015 	stw	r16,0(sp)
10009628:	dfc00315 	stw	ra,12(sp)
1000962c:	2025883a 	mov	r18,r4
10009630:	2823883a 	mov	r17,r5
10009634:	3021883a 	mov	r16,r6
10009638:	20000226 	beq	r4,zero,10009644 <__swbuf_r+0x2c>
1000963c:	20800e17 	ldw	r2,56(r4)
10009640:	10004126 	beq	r2,zero,10009748 <__swbuf_r+0x130>
10009644:	80c00617 	ldw	r3,24(r16)
10009648:	8180030b 	ldhu	r6,12(r16)
1000964c:	80c00215 	stw	r3,8(r16)
10009650:	30c0020c 	andi	r3,r6,8
10009654:	18003526 	beq	r3,zero,1000972c <__swbuf_r+0x114>
10009658:	80c00417 	ldw	r3,16(r16)
1000965c:	18003326 	beq	r3,zero,1000972c <__swbuf_r+0x114>
10009660:	3088000c 	andi	r2,r6,8192
10009664:	8c403fcc 	andi	r17,r17,255
10009668:	10001726 	beq	r2,zero,100096c8 <__swbuf_r+0xb0>
1000966c:	80800017 	ldw	r2,0(r16)
10009670:	81000517 	ldw	r4,20(r16)
10009674:	10c7c83a 	sub	r3,r2,r3
10009678:	19001d0e 	bge	r3,r4,100096f0 <__swbuf_r+0xd8>
1000967c:	18c00044 	addi	r3,r3,1
10009680:	81400217 	ldw	r5,8(r16)
10009684:	11000044 	addi	r4,r2,1
10009688:	81000015 	stw	r4,0(r16)
1000968c:	297fffc4 	addi	r5,r5,-1
10009690:	81400215 	stw	r5,8(r16)
10009694:	14400005 	stb	r17,0(r2)
10009698:	80800517 	ldw	r2,20(r16)
1000969c:	10c01d26 	beq	r2,r3,10009714 <__swbuf_r+0xfc>
100096a0:	8080030b 	ldhu	r2,12(r16)
100096a4:	1080004c 	andi	r2,r2,1
100096a8:	1000181e 	bne	r2,zero,1000970c <__swbuf_r+0xf4>
100096ac:	8805883a 	mov	r2,r17
100096b0:	dfc00317 	ldw	ra,12(sp)
100096b4:	dc800217 	ldw	r18,8(sp)
100096b8:	dc400117 	ldw	r17,4(sp)
100096bc:	dc000017 	ldw	r16,0(sp)
100096c0:	dec00404 	addi	sp,sp,16
100096c4:	f800283a 	ret
100096c8:	81001917 	ldw	r4,100(r16)
100096cc:	00b7ffc4 	movi	r2,-8193
100096d0:	31880014 	ori	r6,r6,8192
100096d4:	2084703a 	and	r2,r4,r2
100096d8:	80801915 	stw	r2,100(r16)
100096dc:	80800017 	ldw	r2,0(r16)
100096e0:	81000517 	ldw	r4,20(r16)
100096e4:	8180030d 	sth	r6,12(r16)
100096e8:	10c7c83a 	sub	r3,r2,r3
100096ec:	193fe316 	blt	r3,r4,1000967c <__alt_data_end+0xf800967c>
100096f0:	9009883a 	mov	r4,r18
100096f4:	800b883a 	mov	r5,r16
100096f8:	000433c0 	call	1000433c <_fflush_r>
100096fc:	1000091e 	bne	r2,zero,10009724 <__swbuf_r+0x10c>
10009700:	80800017 	ldw	r2,0(r16)
10009704:	00c00044 	movi	r3,1
10009708:	003fdd06 	br	10009680 <__alt_data_end+0xf8009680>
1000970c:	00800284 	movi	r2,10
10009710:	88bfe61e 	bne	r17,r2,100096ac <__alt_data_end+0xf80096ac>
10009714:	9009883a 	mov	r4,r18
10009718:	800b883a 	mov	r5,r16
1000971c:	000433c0 	call	1000433c <_fflush_r>
10009720:	103fe226 	beq	r2,zero,100096ac <__alt_data_end+0xf80096ac>
10009724:	00bfffc4 	movi	r2,-1
10009728:	003fe106 	br	100096b0 <__alt_data_end+0xf80096b0>
1000972c:	9009883a 	mov	r4,r18
10009730:	800b883a 	mov	r5,r16
10009734:	00028bc0 	call	100028bc <__swsetup_r>
10009738:	1000051e 	bne	r2,zero,10009750 <__swbuf_r+0x138>
1000973c:	8180030b 	ldhu	r6,12(r16)
10009740:	80c00417 	ldw	r3,16(r16)
10009744:	003fc606 	br	10009660 <__alt_data_end+0xf8009660>
10009748:	00048f80 	call	100048f8 <__sinit>
1000974c:	003fbd06 	br	10009644 <__alt_data_end+0xf8009644>
10009750:	80c0030b 	ldhu	r3,12(r16)
10009754:	00bfffc4 	movi	r2,-1
10009758:	18c01014 	ori	r3,r3,64
1000975c:	80c0030d 	sth	r3,12(r16)
10009760:	00c00244 	movi	r3,9
10009764:	90c00015 	stw	r3,0(r18)
10009768:	003fd106 	br	100096b0 <__alt_data_end+0xf80096b0>

1000976c <__swbuf>:
1000976c:	00c40074 	movhi	r3,4097
10009770:	18c52904 	addi	r3,r3,5284
10009774:	2005883a 	mov	r2,r4
10009778:	19000017 	ldw	r4,0(r3)
1000977c:	280d883a 	mov	r6,r5
10009780:	100b883a 	mov	r5,r2
10009784:	00096181 	jmpi	10009618 <__swbuf_r>

10009788 <_wcrtomb_r>:
10009788:	defff604 	addi	sp,sp,-40
1000978c:	00840074 	movhi	r2,4097
10009790:	dc800815 	stw	r18,32(sp)
10009794:	dc400715 	stw	r17,28(sp)
10009798:	dc000615 	stw	r16,24(sp)
1000979c:	10852d04 	addi	r2,r2,5300
100097a0:	dfc00915 	stw	ra,36(sp)
100097a4:	2021883a 	mov	r16,r4
100097a8:	3823883a 	mov	r17,r7
100097ac:	14800017 	ldw	r18,0(r2)
100097b0:	28001426 	beq	r5,zero,10009804 <_wcrtomb_r+0x7c>
100097b4:	d9400415 	stw	r5,16(sp)
100097b8:	d9800515 	stw	r6,20(sp)
100097bc:	00053ec0 	call	100053ec <__locale_charset>
100097c0:	d9400417 	ldw	r5,16(sp)
100097c4:	d9800517 	ldw	r6,20(sp)
100097c8:	8009883a 	mov	r4,r16
100097cc:	dc400015 	stw	r17,0(sp)
100097d0:	100f883a 	mov	r7,r2
100097d4:	903ee83a 	callr	r18
100097d8:	00ffffc4 	movi	r3,-1
100097dc:	10c0031e 	bne	r2,r3,100097ec <_wcrtomb_r+0x64>
100097e0:	88000015 	stw	zero,0(r17)
100097e4:	00c02284 	movi	r3,138
100097e8:	80c00015 	stw	r3,0(r16)
100097ec:	dfc00917 	ldw	ra,36(sp)
100097f0:	dc800817 	ldw	r18,32(sp)
100097f4:	dc400717 	ldw	r17,28(sp)
100097f8:	dc000617 	ldw	r16,24(sp)
100097fc:	dec00a04 	addi	sp,sp,40
10009800:	f800283a 	ret
10009804:	00053ec0 	call	100053ec <__locale_charset>
10009808:	8009883a 	mov	r4,r16
1000980c:	dc400015 	stw	r17,0(sp)
10009810:	d9400104 	addi	r5,sp,4
10009814:	000d883a 	mov	r6,zero
10009818:	100f883a 	mov	r7,r2
1000981c:	903ee83a 	callr	r18
10009820:	003fed06 	br	100097d8 <__alt_data_end+0xf80097d8>

10009824 <wcrtomb>:
10009824:	defff504 	addi	sp,sp,-44
10009828:	dc400515 	stw	r17,20(sp)
1000982c:	dc000415 	stw	r16,16(sp)
10009830:	dfc00a15 	stw	ra,40(sp)
10009834:	dd400915 	stw	r21,36(sp)
10009838:	dd000815 	stw	r20,32(sp)
1000983c:	dcc00715 	stw	r19,28(sp)
10009840:	dc800615 	stw	r18,24(sp)
10009844:	2021883a 	mov	r16,r4
10009848:	3023883a 	mov	r17,r6
1000984c:	20001d26 	beq	r4,zero,100098c4 <wcrtomb+0xa0>
10009850:	04840074 	movhi	r18,4097
10009854:	94852904 	addi	r18,r18,5284
10009858:	00840074 	movhi	r2,4097
1000985c:	95400017 	ldw	r21,0(r18)
10009860:	10852d04 	addi	r2,r2,5300
10009864:	15000017 	ldw	r20,0(r2)
10009868:	2827883a 	mov	r19,r5
1000986c:	00053ec0 	call	100053ec <__locale_charset>
10009870:	a809883a 	mov	r4,r21
10009874:	dc400015 	stw	r17,0(sp)
10009878:	800b883a 	mov	r5,r16
1000987c:	980d883a 	mov	r6,r19
10009880:	100f883a 	mov	r7,r2
10009884:	a03ee83a 	callr	r20
10009888:	00ffffc4 	movi	r3,-1
1000988c:	10c0041e 	bne	r2,r3,100098a0 <wcrtomb+0x7c>
10009890:	90c00017 	ldw	r3,0(r18)
10009894:	01002284 	movi	r4,138
10009898:	88000015 	stw	zero,0(r17)
1000989c:	19000015 	stw	r4,0(r3)
100098a0:	dfc00a17 	ldw	ra,40(sp)
100098a4:	dd400917 	ldw	r21,36(sp)
100098a8:	dd000817 	ldw	r20,32(sp)
100098ac:	dcc00717 	ldw	r19,28(sp)
100098b0:	dc800617 	ldw	r18,24(sp)
100098b4:	dc400517 	ldw	r17,20(sp)
100098b8:	dc000417 	ldw	r16,16(sp)
100098bc:	dec00b04 	addi	sp,sp,44
100098c0:	f800283a 	ret
100098c4:	04840074 	movhi	r18,4097
100098c8:	94852904 	addi	r18,r18,5284
100098cc:	00840074 	movhi	r2,4097
100098d0:	94c00017 	ldw	r19,0(r18)
100098d4:	10852d04 	addi	r2,r2,5300
100098d8:	14000017 	ldw	r16,0(r2)
100098dc:	00053ec0 	call	100053ec <__locale_charset>
100098e0:	9809883a 	mov	r4,r19
100098e4:	dc400015 	stw	r17,0(sp)
100098e8:	d9400104 	addi	r5,sp,4
100098ec:	000d883a 	mov	r6,zero
100098f0:	100f883a 	mov	r7,r2
100098f4:	803ee83a 	callr	r16
100098f8:	003fe306 	br	10009888 <__alt_data_end+0xf8009888>

100098fc <__ascii_wctomb>:
100098fc:	28000526 	beq	r5,zero,10009914 <__ascii_wctomb+0x18>
10009900:	00803fc4 	movi	r2,255
10009904:	11800536 	bltu	r2,r6,1000991c <__ascii_wctomb+0x20>
10009908:	29800005 	stb	r6,0(r5)
1000990c:	00800044 	movi	r2,1
10009910:	f800283a 	ret
10009914:	0005883a 	mov	r2,zero
10009918:	f800283a 	ret
1000991c:	00802284 	movi	r2,138
10009920:	20800015 	stw	r2,0(r4)
10009924:	00bfffc4 	movi	r2,-1
10009928:	f800283a 	ret

1000992c <_wctomb_r>:
1000992c:	00840074 	movhi	r2,4097
10009930:	defff904 	addi	sp,sp,-28
10009934:	10852d04 	addi	r2,r2,5300
10009938:	dfc00615 	stw	ra,24(sp)
1000993c:	dc400515 	stw	r17,20(sp)
10009940:	dc000415 	stw	r16,16(sp)
10009944:	3823883a 	mov	r17,r7
10009948:	14000017 	ldw	r16,0(r2)
1000994c:	d9000115 	stw	r4,4(sp)
10009950:	d9400215 	stw	r5,8(sp)
10009954:	d9800315 	stw	r6,12(sp)
10009958:	00053ec0 	call	100053ec <__locale_charset>
1000995c:	d9000117 	ldw	r4,4(sp)
10009960:	d9400217 	ldw	r5,8(sp)
10009964:	d9800317 	ldw	r6,12(sp)
10009968:	dc400015 	stw	r17,0(sp)
1000996c:	100f883a 	mov	r7,r2
10009970:	803ee83a 	callr	r16
10009974:	dfc00617 	ldw	ra,24(sp)
10009978:	dc400517 	ldw	r17,20(sp)
1000997c:	dc000417 	ldw	r16,16(sp)
10009980:	dec00704 	addi	sp,sp,28
10009984:	f800283a 	ret

10009988 <__udivdi3>:
10009988:	defff504 	addi	sp,sp,-44
1000998c:	dcc00415 	stw	r19,16(sp)
10009990:	dc000115 	stw	r16,4(sp)
10009994:	dfc00a15 	stw	ra,40(sp)
10009998:	df000915 	stw	fp,36(sp)
1000999c:	ddc00815 	stw	r23,32(sp)
100099a0:	dd800715 	stw	r22,28(sp)
100099a4:	dd400615 	stw	r21,24(sp)
100099a8:	dd000515 	stw	r20,20(sp)
100099ac:	dc800315 	stw	r18,12(sp)
100099b0:	dc400215 	stw	r17,8(sp)
100099b4:	2027883a 	mov	r19,r4
100099b8:	2821883a 	mov	r16,r5
100099bc:	3800471e 	bne	r7,zero,10009adc <__udivdi3+0x154>
100099c0:	3025883a 	mov	r18,r6
100099c4:	2023883a 	mov	r17,r4
100099c8:	2980592e 	bgeu	r5,r6,10009b30 <__udivdi3+0x1a8>
100099cc:	00bfffd4 	movui	r2,65535
100099d0:	2829883a 	mov	r20,r5
100099d4:	1180b236 	bltu	r2,r6,10009ca0 <__udivdi3+0x318>
100099d8:	00803fc4 	movi	r2,255
100099dc:	1181622e 	bgeu	r2,r6,10009f68 <__udivdi3+0x5e0>
100099e0:	00800204 	movi	r2,8
100099e4:	1007883a 	mov	r3,r2
100099e8:	3084d83a 	srl	r2,r6,r2
100099ec:	01040074 	movhi	r4,4097
100099f0:	213e3004 	addi	r4,r4,-1856
100099f4:	2085883a 	add	r2,r4,r2
100099f8:	11000003 	ldbu	r4,0(r2)
100099fc:	20c9883a 	add	r4,r4,r3
10009a00:	00c00804 	movi	r3,32
10009a04:	1907c83a 	sub	r3,r3,r4
10009a08:	18000526 	beq	r3,zero,10009a20 <__udivdi3+0x98>
10009a0c:	80e0983a 	sll	r16,r16,r3
10009a10:	9908d83a 	srl	r4,r19,r4
10009a14:	30e4983a 	sll	r18,r6,r3
10009a18:	98e2983a 	sll	r17,r19,r3
10009a1c:	8128b03a 	or	r20,r16,r4
10009a20:	902ad43a 	srli	r21,r18,16
10009a24:	a009883a 	mov	r4,r20
10009a28:	95bfffcc 	andi	r22,r18,65535
10009a2c:	a80b883a 	mov	r5,r21
10009a30:	000a7080 	call	1000a708 <__umodsi3>
10009a34:	a009883a 	mov	r4,r20
10009a38:	a80b883a 	mov	r5,r21
10009a3c:	102f883a 	mov	r23,r2
10009a40:	000a7000 	call	1000a700 <__udivsi3>
10009a44:	1009883a 	mov	r4,r2
10009a48:	b00b883a 	mov	r5,r22
10009a4c:	1021883a 	mov	r16,r2
10009a50:	00005a80 	call	100005a8 <__mulsi3>
10009a54:	b82e943a 	slli	r23,r23,16
10009a58:	8808d43a 	srli	r4,r17,16
10009a5c:	b906b03a 	or	r3,r23,r4
10009a60:	1880052e 	bgeu	r3,r2,10009a78 <__udivdi3+0xf0>
10009a64:	1c87883a 	add	r3,r3,r18
10009a68:	813fffc4 	addi	r4,r16,-1
10009a6c:	1c800136 	bltu	r3,r18,10009a74 <__udivdi3+0xec>
10009a70:	18815236 	bltu	r3,r2,10009fbc <__udivdi3+0x634>
10009a74:	2021883a 	mov	r16,r4
10009a78:	18a7c83a 	sub	r19,r3,r2
10009a7c:	9809883a 	mov	r4,r19
10009a80:	a80b883a 	mov	r5,r21
10009a84:	000a7080 	call	1000a708 <__umodsi3>
10009a88:	1029883a 	mov	r20,r2
10009a8c:	9809883a 	mov	r4,r19
10009a90:	a80b883a 	mov	r5,r21
10009a94:	a028943a 	slli	r20,r20,16
10009a98:	000a7000 	call	1000a700 <__udivsi3>
10009a9c:	1009883a 	mov	r4,r2
10009aa0:	b00b883a 	mov	r5,r22
10009aa4:	8c7fffcc 	andi	r17,r17,65535
10009aa8:	1027883a 	mov	r19,r2
10009aac:	a462b03a 	or	r17,r20,r17
10009ab0:	00005a80 	call	100005a8 <__mulsi3>
10009ab4:	8880052e 	bgeu	r17,r2,10009acc <__udivdi3+0x144>
10009ab8:	8ca3883a 	add	r17,r17,r18
10009abc:	98ffffc4 	addi	r3,r19,-1
10009ac0:	8c811036 	bltu	r17,r18,10009f04 <__udivdi3+0x57c>
10009ac4:	88810f2e 	bgeu	r17,r2,10009f04 <__udivdi3+0x57c>
10009ac8:	9cffff84 	addi	r19,r19,-2
10009acc:	8020943a 	slli	r16,r16,16
10009ad0:	0007883a 	mov	r3,zero
10009ad4:	9c04b03a 	or	r2,r19,r16
10009ad8:	00006006 	br	10009c5c <__udivdi3+0x2d4>
10009adc:	29c05d36 	bltu	r5,r7,10009c54 <__udivdi3+0x2cc>
10009ae0:	00bfffd4 	movui	r2,65535
10009ae4:	11c0692e 	bgeu	r2,r7,10009c8c <__udivdi3+0x304>
10009ae8:	00804034 	movhi	r2,256
10009aec:	10bfffc4 	addi	r2,r2,-1
10009af0:	11c10e2e 	bgeu	r2,r7,10009f2c <__udivdi3+0x5a4>
10009af4:	01400604 	movi	r5,24
10009af8:	2811883a 	mov	r8,r5
10009afc:	394ad83a 	srl	r5,r7,r5
10009b00:	00840074 	movhi	r2,4097
10009b04:	10be3004 	addi	r2,r2,-1856
10009b08:	114b883a 	add	r5,r2,r5
10009b0c:	29400003 	ldbu	r5,0(r5)
10009b10:	00c00804 	movi	r3,32
10009b14:	2a0b883a 	add	r5,r5,r8
10009b18:	196fc83a 	sub	r23,r3,r5
10009b1c:	b8006b1e 	bne	r23,zero,10009ccc <__udivdi3+0x344>
10009b20:	3c011436 	bltu	r7,r16,10009f74 <__udivdi3+0x5ec>
10009b24:	9985403a 	cmpgeu	r2,r19,r6
10009b28:	0007883a 	mov	r3,zero
10009b2c:	00004b06 	br	10009c5c <__udivdi3+0x2d4>
10009b30:	3000041e 	bne	r6,zero,10009b44 <__udivdi3+0x1bc>
10009b34:	01000044 	movi	r4,1
10009b38:	000b883a 	mov	r5,zero
10009b3c:	000a7000 	call	1000a700 <__udivsi3>
10009b40:	1025883a 	mov	r18,r2
10009b44:	00bfffd4 	movui	r2,65535
10009b48:	14805b2e 	bgeu	r2,r18,10009cb8 <__udivdi3+0x330>
10009b4c:	00804034 	movhi	r2,256
10009b50:	10bfffc4 	addi	r2,r2,-1
10009b54:	1480fe2e 	bgeu	r2,r18,10009f50 <__udivdi3+0x5c8>
10009b58:	00800604 	movi	r2,24
10009b5c:	1007883a 	mov	r3,r2
10009b60:	9084d83a 	srl	r2,r18,r2
10009b64:	01040074 	movhi	r4,4097
10009b68:	213e3004 	addi	r4,r4,-1856
10009b6c:	2085883a 	add	r2,r4,r2
10009b70:	11800003 	ldbu	r6,0(r2)
10009b74:	01c00804 	movi	r7,32
10009b78:	30c7883a 	add	r3,r6,r3
10009b7c:	38cfc83a 	sub	r7,r7,r3
10009b80:	3800a71e 	bne	r7,zero,10009e20 <__udivdi3+0x498>
10009b84:	9028d43a 	srli	r20,r18,16
10009b88:	84a1c83a 	sub	r16,r16,r18
10009b8c:	957fffcc 	andi	r21,r18,65535
10009b90:	00c00044 	movi	r3,1
10009b94:	8009883a 	mov	r4,r16
10009b98:	a00b883a 	mov	r5,r20
10009b9c:	d8c00015 	stw	r3,0(sp)
10009ba0:	000a7080 	call	1000a708 <__umodsi3>
10009ba4:	8009883a 	mov	r4,r16
10009ba8:	a00b883a 	mov	r5,r20
10009bac:	102d883a 	mov	r22,r2
10009bb0:	000a7000 	call	1000a700 <__udivsi3>
10009bb4:	1009883a 	mov	r4,r2
10009bb8:	a80b883a 	mov	r5,r21
10009bbc:	1021883a 	mov	r16,r2
10009bc0:	00005a80 	call	100005a8 <__mulsi3>
10009bc4:	b02c943a 	slli	r22,r22,16
10009bc8:	880ed43a 	srli	r7,r17,16
10009bcc:	d8c00017 	ldw	r3,0(sp)
10009bd0:	b1ccb03a 	or	r6,r22,r7
10009bd4:	3080052e 	bgeu	r6,r2,10009bec <__udivdi3+0x264>
10009bd8:	348d883a 	add	r6,r6,r18
10009bdc:	813fffc4 	addi	r4,r16,-1
10009be0:	34800136 	bltu	r6,r18,10009be8 <__udivdi3+0x260>
10009be4:	3080f236 	bltu	r6,r2,10009fb0 <__udivdi3+0x628>
10009be8:	2021883a 	mov	r16,r4
10009bec:	30a7c83a 	sub	r19,r6,r2
10009bf0:	9809883a 	mov	r4,r19
10009bf4:	a00b883a 	mov	r5,r20
10009bf8:	d8c00015 	stw	r3,0(sp)
10009bfc:	000a7080 	call	1000a708 <__umodsi3>
10009c00:	102d883a 	mov	r22,r2
10009c04:	9809883a 	mov	r4,r19
10009c08:	a00b883a 	mov	r5,r20
10009c0c:	b02c943a 	slli	r22,r22,16
10009c10:	000a7000 	call	1000a700 <__udivsi3>
10009c14:	1009883a 	mov	r4,r2
10009c18:	a80b883a 	mov	r5,r21
10009c1c:	8c7fffcc 	andi	r17,r17,65535
10009c20:	1027883a 	mov	r19,r2
10009c24:	b462b03a 	or	r17,r22,r17
10009c28:	00005a80 	call	100005a8 <__mulsi3>
10009c2c:	d8c00017 	ldw	r3,0(sp)
10009c30:	8880052e 	bgeu	r17,r2,10009c48 <__udivdi3+0x2c0>
10009c34:	8ca3883a 	add	r17,r17,r18
10009c38:	993fffc4 	addi	r4,r19,-1
10009c3c:	8c80af36 	bltu	r17,r18,10009efc <__udivdi3+0x574>
10009c40:	8880ae2e 	bgeu	r17,r2,10009efc <__udivdi3+0x574>
10009c44:	9cffff84 	addi	r19,r19,-2
10009c48:	8020943a 	slli	r16,r16,16
10009c4c:	9c04b03a 	or	r2,r19,r16
10009c50:	00000206 	br	10009c5c <__udivdi3+0x2d4>
10009c54:	0007883a 	mov	r3,zero
10009c58:	0005883a 	mov	r2,zero
10009c5c:	dfc00a17 	ldw	ra,40(sp)
10009c60:	df000917 	ldw	fp,36(sp)
10009c64:	ddc00817 	ldw	r23,32(sp)
10009c68:	dd800717 	ldw	r22,28(sp)
10009c6c:	dd400617 	ldw	r21,24(sp)
10009c70:	dd000517 	ldw	r20,20(sp)
10009c74:	dcc00417 	ldw	r19,16(sp)
10009c78:	dc800317 	ldw	r18,12(sp)
10009c7c:	dc400217 	ldw	r17,8(sp)
10009c80:	dc000117 	ldw	r16,4(sp)
10009c84:	dec00b04 	addi	sp,sp,44
10009c88:	f800283a 	ret
10009c8c:	00803fc4 	movi	r2,255
10009c90:	11c0a92e 	bgeu	r2,r7,10009f38 <__udivdi3+0x5b0>
10009c94:	01400204 	movi	r5,8
10009c98:	2811883a 	mov	r8,r5
10009c9c:	003f9706 	br	10009afc <__alt_data_end+0xf8009afc>
10009ca0:	00804034 	movhi	r2,256
10009ca4:	10bfffc4 	addi	r2,r2,-1
10009ca8:	1180a62e 	bgeu	r2,r6,10009f44 <__udivdi3+0x5bc>
10009cac:	00800604 	movi	r2,24
10009cb0:	1007883a 	mov	r3,r2
10009cb4:	003f4c06 	br	100099e8 <__alt_data_end+0xf80099e8>
10009cb8:	00803fc4 	movi	r2,255
10009cbc:	1480a72e 	bgeu	r2,r18,10009f5c <__udivdi3+0x5d4>
10009cc0:	00800204 	movi	r2,8
10009cc4:	1007883a 	mov	r3,r2
10009cc8:	003fa506 	br	10009b60 <__alt_data_end+0xf8009b60>
10009ccc:	3178d83a 	srl	fp,r6,r5
10009cd0:	3dce983a 	sll	r7,r7,r23
10009cd4:	8168d83a 	srl	r20,r16,r5
10009cd8:	9950d83a 	srl	r8,r19,r5
10009cdc:	3f38b03a 	or	fp,r7,fp
10009ce0:	e024d43a 	srli	r18,fp,16
10009ce4:	85e0983a 	sll	r16,r16,r23
10009ce8:	a009883a 	mov	r4,r20
10009cec:	900b883a 	mov	r5,r18
10009cf0:	8220b03a 	or	r16,r16,r8
10009cf4:	35ea983a 	sll	r21,r6,r23
10009cf8:	000a7080 	call	1000a708 <__umodsi3>
10009cfc:	a009883a 	mov	r4,r20
10009d00:	900b883a 	mov	r5,r18
10009d04:	1023883a 	mov	r17,r2
10009d08:	e5bfffcc 	andi	r22,fp,65535
10009d0c:	000a7000 	call	1000a700 <__udivsi3>
10009d10:	1009883a 	mov	r4,r2
10009d14:	b00b883a 	mov	r5,r22
10009d18:	1029883a 	mov	r20,r2
10009d1c:	00005a80 	call	100005a8 <__mulsi3>
10009d20:	8806943a 	slli	r3,r17,16
10009d24:	8014d43a 	srli	r10,r16,16
10009d28:	1a92b03a 	or	r9,r3,r10
10009d2c:	4880042e 	bgeu	r9,r2,10009d40 <__udivdi3+0x3b8>
10009d30:	4f13883a 	add	r9,r9,fp
10009d34:	a0ffffc4 	addi	r3,r20,-1
10009d38:	4f00952e 	bgeu	r9,fp,10009f90 <__udivdi3+0x608>
10009d3c:	1829883a 	mov	r20,r3
10009d40:	48a3c83a 	sub	r17,r9,r2
10009d44:	8809883a 	mov	r4,r17
10009d48:	900b883a 	mov	r5,r18
10009d4c:	000a7080 	call	1000a708 <__umodsi3>
10009d50:	8809883a 	mov	r4,r17
10009d54:	900b883a 	mov	r5,r18
10009d58:	d8800015 	stw	r2,0(sp)
10009d5c:	000a7000 	call	1000a700 <__udivsi3>
10009d60:	1009883a 	mov	r4,r2
10009d64:	b00b883a 	mov	r5,r22
10009d68:	1023883a 	mov	r17,r2
10009d6c:	00005a80 	call	100005a8 <__mulsi3>
10009d70:	d8c00017 	ldw	r3,0(sp)
10009d74:	823fffcc 	andi	r8,r16,65535
10009d78:	1806943a 	slli	r3,r3,16
10009d7c:	1a20b03a 	or	r16,r3,r8
10009d80:	8080042e 	bgeu	r16,r2,10009d94 <__udivdi3+0x40c>
10009d84:	8721883a 	add	r16,r16,fp
10009d88:	88ffffc4 	addi	r3,r17,-1
10009d8c:	87007c2e 	bgeu	r16,fp,10009f80 <__udivdi3+0x5f8>
10009d90:	1823883a 	mov	r17,r3
10009d94:	a028943a 	slli	r20,r20,16
10009d98:	acbfffcc 	andi	r18,r21,65535
10009d9c:	900b883a 	mov	r5,r18
10009da0:	8d28b03a 	or	r20,r17,r20
10009da4:	a022d43a 	srli	r17,r20,16
10009da8:	a5bfffcc 	andi	r22,r20,65535
10009dac:	b009883a 	mov	r4,r22
10009db0:	a82ad43a 	srli	r21,r21,16
10009db4:	80a1c83a 	sub	r16,r16,r2
10009db8:	00005a80 	call	100005a8 <__mulsi3>
10009dbc:	8809883a 	mov	r4,r17
10009dc0:	900b883a 	mov	r5,r18
10009dc4:	1039883a 	mov	fp,r2
10009dc8:	00005a80 	call	100005a8 <__mulsi3>
10009dcc:	8809883a 	mov	r4,r17
10009dd0:	a80b883a 	mov	r5,r21
10009dd4:	1025883a 	mov	r18,r2
10009dd8:	00005a80 	call	100005a8 <__mulsi3>
10009ddc:	b009883a 	mov	r4,r22
10009de0:	a80b883a 	mov	r5,r21
10009de4:	1023883a 	mov	r17,r2
10009de8:	00005a80 	call	100005a8 <__mulsi3>
10009dec:	e006d43a 	srli	r3,fp,16
10009df0:	9085883a 	add	r2,r18,r2
10009df4:	10c7883a 	add	r3,r2,r3
10009df8:	1c80022e 	bgeu	r3,r18,10009e04 <__udivdi3+0x47c>
10009dfc:	00800074 	movhi	r2,1
10009e00:	88a3883a 	add	r17,r17,r2
10009e04:	1808d43a 	srli	r4,r3,16
10009e08:	8909883a 	add	r4,r17,r4
10009e0c:	81004436 	bltu	r16,r4,10009f20 <__udivdi3+0x598>
10009e10:	81003e26 	beq	r16,r4,10009f0c <__udivdi3+0x584>
10009e14:	a005883a 	mov	r2,r20
10009e18:	0007883a 	mov	r3,zero
10009e1c:	003f8f06 	br	10009c5c <__alt_data_end+0xf8009c5c>
10009e20:	91e4983a 	sll	r18,r18,r7
10009e24:	80eed83a 	srl	r23,r16,r3
10009e28:	81cc983a 	sll	r6,r16,r7
10009e2c:	9028d43a 	srli	r20,r18,16
10009e30:	98c6d83a 	srl	r3,r19,r3
10009e34:	b809883a 	mov	r4,r23
10009e38:	a00b883a 	mov	r5,r20
10009e3c:	30ecb03a 	or	r22,r6,r3
10009e40:	99e2983a 	sll	r17,r19,r7
10009e44:	000a7080 	call	1000a708 <__umodsi3>
10009e48:	b809883a 	mov	r4,r23
10009e4c:	a00b883a 	mov	r5,r20
10009e50:	1021883a 	mov	r16,r2
10009e54:	957fffcc 	andi	r21,r18,65535
10009e58:	000a7000 	call	1000a700 <__udivsi3>
10009e5c:	a80b883a 	mov	r5,r21
10009e60:	1009883a 	mov	r4,r2
10009e64:	102f883a 	mov	r23,r2
10009e68:	00005a80 	call	100005a8 <__mulsi3>
10009e6c:	8020943a 	slli	r16,r16,16
10009e70:	b00ad43a 	srli	r5,r22,16
10009e74:	814cb03a 	or	r6,r16,r5
10009e78:	3080062e 	bgeu	r6,r2,10009e94 <__udivdi3+0x50c>
10009e7c:	348d883a 	add	r6,r6,r18
10009e80:	b8ffffc4 	addi	r3,r23,-1
10009e84:	34804836 	bltu	r6,r18,10009fa8 <__udivdi3+0x620>
10009e88:	3080472e 	bgeu	r6,r2,10009fa8 <__udivdi3+0x620>
10009e8c:	bdffff84 	addi	r23,r23,-2
10009e90:	348d883a 	add	r6,r6,r18
10009e94:	30a7c83a 	sub	r19,r6,r2
10009e98:	9809883a 	mov	r4,r19
10009e9c:	a00b883a 	mov	r5,r20
10009ea0:	000a7080 	call	1000a708 <__umodsi3>
10009ea4:	9809883a 	mov	r4,r19
10009ea8:	a00b883a 	mov	r5,r20
10009eac:	1039883a 	mov	fp,r2
10009eb0:	000a7000 	call	1000a700 <__udivsi3>
10009eb4:	1009883a 	mov	r4,r2
10009eb8:	a80b883a 	mov	r5,r21
10009ebc:	e038943a 	slli	fp,fp,16
10009ec0:	1027883a 	mov	r19,r2
10009ec4:	00005a80 	call	100005a8 <__mulsi3>
10009ec8:	b1bfffcc 	andi	r6,r22,65535
10009ecc:	e18cb03a 	or	r6,fp,r6
10009ed0:	3080062e 	bgeu	r6,r2,10009eec <__udivdi3+0x564>
10009ed4:	348d883a 	add	r6,r6,r18
10009ed8:	98ffffc4 	addi	r3,r19,-1
10009edc:	34803036 	bltu	r6,r18,10009fa0 <__udivdi3+0x618>
10009ee0:	30802f2e 	bgeu	r6,r2,10009fa0 <__udivdi3+0x618>
10009ee4:	9cffff84 	addi	r19,r19,-2
10009ee8:	348d883a 	add	r6,r6,r18
10009eec:	b82e943a 	slli	r23,r23,16
10009ef0:	30a1c83a 	sub	r16,r6,r2
10009ef4:	9dc6b03a 	or	r3,r19,r23
10009ef8:	003f2606 	br	10009b94 <__alt_data_end+0xf8009b94>
10009efc:	2027883a 	mov	r19,r4
10009f00:	003f5106 	br	10009c48 <__alt_data_end+0xf8009c48>
10009f04:	1827883a 	mov	r19,r3
10009f08:	003ef006 	br	10009acc <__alt_data_end+0xf8009acc>
10009f0c:	1808943a 	slli	r4,r3,16
10009f10:	9dc6983a 	sll	r3,r19,r23
10009f14:	e73fffcc 	andi	fp,fp,65535
10009f18:	2709883a 	add	r4,r4,fp
10009f1c:	193fbd2e 	bgeu	r3,r4,10009e14 <__alt_data_end+0xf8009e14>
10009f20:	a0bfffc4 	addi	r2,r20,-1
10009f24:	0007883a 	mov	r3,zero
10009f28:	003f4c06 	br	10009c5c <__alt_data_end+0xf8009c5c>
10009f2c:	01400404 	movi	r5,16
10009f30:	2811883a 	mov	r8,r5
10009f34:	003ef106 	br	10009afc <__alt_data_end+0xf8009afc>
10009f38:	000b883a 	mov	r5,zero
10009f3c:	0011883a 	mov	r8,zero
10009f40:	003eee06 	br	10009afc <__alt_data_end+0xf8009afc>
10009f44:	00800404 	movi	r2,16
10009f48:	1007883a 	mov	r3,r2
10009f4c:	003ea606 	br	100099e8 <__alt_data_end+0xf80099e8>
10009f50:	00800404 	movi	r2,16
10009f54:	1007883a 	mov	r3,r2
10009f58:	003f0106 	br	10009b60 <__alt_data_end+0xf8009b60>
10009f5c:	0005883a 	mov	r2,zero
10009f60:	0007883a 	mov	r3,zero
10009f64:	003efe06 	br	10009b60 <__alt_data_end+0xf8009b60>
10009f68:	0005883a 	mov	r2,zero
10009f6c:	0007883a 	mov	r3,zero
10009f70:	003e9d06 	br	100099e8 <__alt_data_end+0xf80099e8>
10009f74:	0007883a 	mov	r3,zero
10009f78:	00800044 	movi	r2,1
10009f7c:	003f3706 	br	10009c5c <__alt_data_end+0xf8009c5c>
10009f80:	80bf832e 	bgeu	r16,r2,10009d90 <__alt_data_end+0xf8009d90>
10009f84:	8c7fff84 	addi	r17,r17,-2
10009f88:	8721883a 	add	r16,r16,fp
10009f8c:	003f8106 	br	10009d94 <__alt_data_end+0xf8009d94>
10009f90:	48bf6a2e 	bgeu	r9,r2,10009d3c <__alt_data_end+0xf8009d3c>
10009f94:	a53fff84 	addi	r20,r20,-2
10009f98:	4f13883a 	add	r9,r9,fp
10009f9c:	003f6806 	br	10009d40 <__alt_data_end+0xf8009d40>
10009fa0:	1827883a 	mov	r19,r3
10009fa4:	003fd106 	br	10009eec <__alt_data_end+0xf8009eec>
10009fa8:	182f883a 	mov	r23,r3
10009fac:	003fb906 	br	10009e94 <__alt_data_end+0xf8009e94>
10009fb0:	843fff84 	addi	r16,r16,-2
10009fb4:	348d883a 	add	r6,r6,r18
10009fb8:	003f0c06 	br	10009bec <__alt_data_end+0xf8009bec>
10009fbc:	843fff84 	addi	r16,r16,-2
10009fc0:	1c87883a 	add	r3,r3,r18
10009fc4:	003eac06 	br	10009a78 <__alt_data_end+0xf8009a78>

10009fc8 <__umoddi3>:
10009fc8:	defff404 	addi	sp,sp,-48
10009fcc:	dd800815 	stw	r22,32(sp)
10009fd0:	dc400315 	stw	r17,12(sp)
10009fd4:	dc000215 	stw	r16,8(sp)
10009fd8:	dfc00b15 	stw	ra,44(sp)
10009fdc:	df000a15 	stw	fp,40(sp)
10009fe0:	ddc00915 	stw	r23,36(sp)
10009fe4:	dd400715 	stw	r21,28(sp)
10009fe8:	dd000615 	stw	r20,24(sp)
10009fec:	dcc00515 	stw	r19,20(sp)
10009ff0:	dc800415 	stw	r18,16(sp)
10009ff4:	2021883a 	mov	r16,r4
10009ff8:	2823883a 	mov	r17,r5
10009ffc:	282d883a 	mov	r22,r5
1000a000:	38003c1e 	bne	r7,zero,1000a0f4 <__umoddi3+0x12c>
1000a004:	3027883a 	mov	r19,r6
1000a008:	2029883a 	mov	r20,r4
1000a00c:	2980522e 	bgeu	r5,r6,1000a158 <__umoddi3+0x190>
1000a010:	00bfffd4 	movui	r2,65535
1000a014:	1180a436 	bltu	r2,r6,1000a2a8 <__umoddi3+0x2e0>
1000a018:	00803fc4 	movi	r2,255
1000a01c:	11815e2e 	bgeu	r2,r6,1000a598 <__umoddi3+0x5d0>
1000a020:	01400204 	movi	r5,8
1000a024:	2805883a 	mov	r2,r5
1000a028:	314ad83a 	srl	r5,r6,r5
1000a02c:	00c40074 	movhi	r3,4097
1000a030:	18fe3004 	addi	r3,r3,-1856
1000a034:	194b883a 	add	r5,r3,r5
1000a038:	29000003 	ldbu	r4,0(r5)
1000a03c:	2089883a 	add	r4,r4,r2
1000a040:	00800804 	movi	r2,32
1000a044:	1105c83a 	sub	r2,r2,r4
1000a048:	10010c26 	beq	r2,zero,1000a47c <__umoddi3+0x4b4>
1000a04c:	88a2983a 	sll	r17,r17,r2
1000a050:	8108d83a 	srl	r4,r16,r4
1000a054:	30a6983a 	sll	r19,r6,r2
1000a058:	80a8983a 	sll	r20,r16,r2
1000a05c:	1025883a 	mov	r18,r2
1000a060:	892cb03a 	or	r22,r17,r4
1000a064:	9822d43a 	srli	r17,r19,16
1000a068:	b009883a 	mov	r4,r22
1000a06c:	9d7fffcc 	andi	r21,r19,65535
1000a070:	880b883a 	mov	r5,r17
1000a074:	000a7080 	call	1000a708 <__umodsi3>
1000a078:	b009883a 	mov	r4,r22
1000a07c:	880b883a 	mov	r5,r17
1000a080:	102f883a 	mov	r23,r2
1000a084:	000a7000 	call	1000a700 <__udivsi3>
1000a088:	1009883a 	mov	r4,r2
1000a08c:	a80b883a 	mov	r5,r21
1000a090:	00005a80 	call	100005a8 <__mulsi3>
1000a094:	b82e943a 	slli	r23,r23,16
1000a098:	a008d43a 	srli	r4,r20,16
1000a09c:	b906b03a 	or	r3,r23,r4
1000a0a0:	1880042e 	bgeu	r3,r2,1000a0b4 <__umoddi3+0xec>
1000a0a4:	1cc7883a 	add	r3,r3,r19
1000a0a8:	1cc00236 	bltu	r3,r19,1000a0b4 <__umoddi3+0xec>
1000a0ac:	1880012e 	bgeu	r3,r2,1000a0b4 <__umoddi3+0xec>
1000a0b0:	1cc7883a 	add	r3,r3,r19
1000a0b4:	18a1c83a 	sub	r16,r3,r2
1000a0b8:	8009883a 	mov	r4,r16
1000a0bc:	880b883a 	mov	r5,r17
1000a0c0:	000a7080 	call	1000a708 <__umodsi3>
1000a0c4:	8009883a 	mov	r4,r16
1000a0c8:	880b883a 	mov	r5,r17
1000a0cc:	102d883a 	mov	r22,r2
1000a0d0:	000a7000 	call	1000a700 <__udivsi3>
1000a0d4:	1009883a 	mov	r4,r2
1000a0d8:	a80b883a 	mov	r5,r21
1000a0dc:	b02c943a 	slli	r22,r22,16
1000a0e0:	00005a80 	call	100005a8 <__mulsi3>
1000a0e4:	a13fffcc 	andi	r4,r20,65535
1000a0e8:	b106b03a 	or	r3,r22,r4
1000a0ec:	1880572e 	bgeu	r3,r2,1000a24c <__umoddi3+0x284>
1000a0f0:	00005206 	br	1000a23c <__umoddi3+0x274>
1000a0f4:	29c05936 	bltu	r5,r7,1000a25c <__umoddi3+0x294>
1000a0f8:	00bfffd4 	movui	r2,65535
1000a0fc:	11c0652e 	bgeu	r2,r7,1000a294 <__umoddi3+0x2cc>
1000a100:	00804034 	movhi	r2,256
1000a104:	10bfffc4 	addi	r2,r2,-1
1000a108:	11c1172e 	bgeu	r2,r7,1000a568 <__umoddi3+0x5a0>
1000a10c:	01400604 	movi	r5,24
1000a110:	282b883a 	mov	r21,r5
1000a114:	394ad83a 	srl	r5,r7,r5
1000a118:	00c40074 	movhi	r3,4097
1000a11c:	18fe3004 	addi	r3,r3,-1856
1000a120:	194b883a 	add	r5,r3,r5
1000a124:	28800003 	ldbu	r2,0(r5)
1000a128:	00c00804 	movi	r3,32
1000a12c:	156b883a 	add	r21,r2,r21
1000a130:	1d69c83a 	sub	r20,r3,r21
1000a134:	a000671e 	bne	r20,zero,1000a2d4 <__umoddi3+0x30c>
1000a138:	3c400136 	bltu	r7,r17,1000a140 <__umoddi3+0x178>
1000a13c:	81812336 	bltu	r16,r6,1000a5cc <__umoddi3+0x604>
1000a140:	8185c83a 	sub	r2,r16,r6
1000a144:	89e3c83a 	sub	r17,r17,r7
1000a148:	8087803a 	cmpltu	r3,r16,r2
1000a14c:	88edc83a 	sub	r22,r17,r3
1000a150:	b007883a 	mov	r3,r22
1000a154:	00004306 	br	1000a264 <__umoddi3+0x29c>
1000a158:	3000041e 	bne	r6,zero,1000a16c <__umoddi3+0x1a4>
1000a15c:	01000044 	movi	r4,1
1000a160:	000b883a 	mov	r5,zero
1000a164:	000a7000 	call	1000a700 <__udivsi3>
1000a168:	1027883a 	mov	r19,r2
1000a16c:	00bfffd4 	movui	r2,65535
1000a170:	14c0532e 	bgeu	r2,r19,1000a2c0 <__umoddi3+0x2f8>
1000a174:	00804034 	movhi	r2,256
1000a178:	10bfffc4 	addi	r2,r2,-1
1000a17c:	14c1032e 	bgeu	r2,r19,1000a58c <__umoddi3+0x5c4>
1000a180:	00800604 	movi	r2,24
1000a184:	1007883a 	mov	r3,r2
1000a188:	9884d83a 	srl	r2,r19,r2
1000a18c:	01040074 	movhi	r4,4097
1000a190:	213e3004 	addi	r4,r4,-1856
1000a194:	2085883a 	add	r2,r4,r2
1000a198:	11000003 	ldbu	r4,0(r2)
1000a19c:	00800804 	movi	r2,32
1000a1a0:	20c7883a 	add	r3,r4,r3
1000a1a4:	10c5c83a 	sub	r2,r2,r3
1000a1a8:	1000b61e 	bne	r2,zero,1000a484 <__umoddi3+0x4bc>
1000a1ac:	982ad43a 	srli	r21,r19,16
1000a1b0:	8ce3c83a 	sub	r17,r17,r19
1000a1b4:	9dbfffcc 	andi	r22,r19,65535
1000a1b8:	0025883a 	mov	r18,zero
1000a1bc:	8809883a 	mov	r4,r17
1000a1c0:	a80b883a 	mov	r5,r21
1000a1c4:	000a7080 	call	1000a708 <__umodsi3>
1000a1c8:	8809883a 	mov	r4,r17
1000a1cc:	a80b883a 	mov	r5,r21
1000a1d0:	102f883a 	mov	r23,r2
1000a1d4:	000a7000 	call	1000a700 <__udivsi3>
1000a1d8:	1009883a 	mov	r4,r2
1000a1dc:	b00b883a 	mov	r5,r22
1000a1e0:	00005a80 	call	100005a8 <__mulsi3>
1000a1e4:	b82e943a 	slli	r23,r23,16
1000a1e8:	a008d43a 	srli	r4,r20,16
1000a1ec:	b906b03a 	or	r3,r23,r4
1000a1f0:	1880032e 	bgeu	r3,r2,1000a200 <__umoddi3+0x238>
1000a1f4:	1cc7883a 	add	r3,r3,r19
1000a1f8:	1cc00136 	bltu	r3,r19,1000a200 <__umoddi3+0x238>
1000a1fc:	1880f136 	bltu	r3,r2,1000a5c4 <__umoddi3+0x5fc>
1000a200:	18a1c83a 	sub	r16,r3,r2
1000a204:	8009883a 	mov	r4,r16
1000a208:	a80b883a 	mov	r5,r21
1000a20c:	000a7080 	call	1000a708 <__umodsi3>
1000a210:	8009883a 	mov	r4,r16
1000a214:	a80b883a 	mov	r5,r21
1000a218:	1023883a 	mov	r17,r2
1000a21c:	000a7000 	call	1000a700 <__udivsi3>
1000a220:	1009883a 	mov	r4,r2
1000a224:	b00b883a 	mov	r5,r22
1000a228:	8822943a 	slli	r17,r17,16
1000a22c:	00005a80 	call	100005a8 <__mulsi3>
1000a230:	a13fffcc 	andi	r4,r20,65535
1000a234:	8906b03a 	or	r3,r17,r4
1000a238:	1880042e 	bgeu	r3,r2,1000a24c <__umoddi3+0x284>
1000a23c:	1cc7883a 	add	r3,r3,r19
1000a240:	1cc00236 	bltu	r3,r19,1000a24c <__umoddi3+0x284>
1000a244:	1880012e 	bgeu	r3,r2,1000a24c <__umoddi3+0x284>
1000a248:	1cc7883a 	add	r3,r3,r19
1000a24c:	1887c83a 	sub	r3,r3,r2
1000a250:	1c84d83a 	srl	r2,r3,r18
1000a254:	0007883a 	mov	r3,zero
1000a258:	00000206 	br	1000a264 <__umoddi3+0x29c>
1000a25c:	2005883a 	mov	r2,r4
1000a260:	2807883a 	mov	r3,r5
1000a264:	dfc00b17 	ldw	ra,44(sp)
1000a268:	df000a17 	ldw	fp,40(sp)
1000a26c:	ddc00917 	ldw	r23,36(sp)
1000a270:	dd800817 	ldw	r22,32(sp)
1000a274:	dd400717 	ldw	r21,28(sp)
1000a278:	dd000617 	ldw	r20,24(sp)
1000a27c:	dcc00517 	ldw	r19,20(sp)
1000a280:	dc800417 	ldw	r18,16(sp)
1000a284:	dc400317 	ldw	r17,12(sp)
1000a288:	dc000217 	ldw	r16,8(sp)
1000a28c:	dec00c04 	addi	sp,sp,48
1000a290:	f800283a 	ret
1000a294:	00803fc4 	movi	r2,255
1000a298:	11c0b02e 	bgeu	r2,r7,1000a55c <__umoddi3+0x594>
1000a29c:	01400204 	movi	r5,8
1000a2a0:	282b883a 	mov	r21,r5
1000a2a4:	003f9b06 	br	1000a114 <__alt_data_end+0xf800a114>
1000a2a8:	00804034 	movhi	r2,256
1000a2ac:	10bfffc4 	addi	r2,r2,-1
1000a2b0:	1180b02e 	bgeu	r2,r6,1000a574 <__umoddi3+0x5ac>
1000a2b4:	01400604 	movi	r5,24
1000a2b8:	2805883a 	mov	r2,r5
1000a2bc:	003f5a06 	br	1000a028 <__alt_data_end+0xf800a028>
1000a2c0:	00803fc4 	movi	r2,255
1000a2c4:	14c0ae2e 	bgeu	r2,r19,1000a580 <__umoddi3+0x5b8>
1000a2c8:	00800204 	movi	r2,8
1000a2cc:	1007883a 	mov	r3,r2
1000a2d0:	003fad06 	br	1000a188 <__alt_data_end+0xf800a188>
1000a2d4:	3d0a983a 	sll	r5,r7,r20
1000a2d8:	356cd83a 	srl	r22,r6,r21
1000a2dc:	8d78d83a 	srl	fp,r17,r21
1000a2e0:	8d10983a 	sll	r8,r17,r20
1000a2e4:	2dacb03a 	or	r22,r5,r22
1000a2e8:	b02ed43a 	srli	r23,r22,16
1000a2ec:	8564d83a 	srl	r18,r16,r21
1000a2f0:	e009883a 	mov	r4,fp
1000a2f4:	b80b883a 	mov	r5,r23
1000a2f8:	44a4b03a 	or	r18,r8,r18
1000a2fc:	3526983a 	sll	r19,r6,r20
1000a300:	000a7080 	call	1000a708 <__umodsi3>
1000a304:	e009883a 	mov	r4,fp
1000a308:	b80b883a 	mov	r5,r23
1000a30c:	b47fffcc 	andi	r17,r22,65535
1000a310:	d8800015 	stw	r2,0(sp)
1000a314:	000a7000 	call	1000a700 <__udivsi3>
1000a318:	1009883a 	mov	r4,r2
1000a31c:	880b883a 	mov	r5,r17
1000a320:	1039883a 	mov	fp,r2
1000a324:	00005a80 	call	100005a8 <__mulsi3>
1000a328:	d9800017 	ldw	r6,0(sp)
1000a32c:	9008d43a 	srli	r4,r18,16
1000a330:	8520983a 	sll	r16,r16,r20
1000a334:	300c943a 	slli	r6,r6,16
1000a338:	3106b03a 	or	r3,r6,r4
1000a33c:	1880042e 	bgeu	r3,r2,1000a350 <__umoddi3+0x388>
1000a340:	1d87883a 	add	r3,r3,r22
1000a344:	e13fffc4 	addi	r4,fp,-1
1000a348:	1d809a2e 	bgeu	r3,r22,1000a5b4 <__umoddi3+0x5ec>
1000a34c:	2039883a 	mov	fp,r4
1000a350:	1887c83a 	sub	r3,r3,r2
1000a354:	1809883a 	mov	r4,r3
1000a358:	b80b883a 	mov	r5,r23
1000a35c:	d8c00115 	stw	r3,4(sp)
1000a360:	000a7080 	call	1000a708 <__umodsi3>
1000a364:	d8c00117 	ldw	r3,4(sp)
1000a368:	b80b883a 	mov	r5,r23
1000a36c:	d8800015 	stw	r2,0(sp)
1000a370:	1809883a 	mov	r4,r3
1000a374:	000a7000 	call	1000a700 <__udivsi3>
1000a378:	880b883a 	mov	r5,r17
1000a37c:	1009883a 	mov	r4,r2
1000a380:	102f883a 	mov	r23,r2
1000a384:	00005a80 	call	100005a8 <__mulsi3>
1000a388:	d9800017 	ldw	r6,0(sp)
1000a38c:	947fffcc 	andi	r17,r18,65535
1000a390:	300c943a 	slli	r6,r6,16
1000a394:	3464b03a 	or	r18,r6,r17
1000a398:	9080042e 	bgeu	r18,r2,1000a3ac <__umoddi3+0x3e4>
1000a39c:	95a5883a 	add	r18,r18,r22
1000a3a0:	b8ffffc4 	addi	r3,r23,-1
1000a3a4:	95807f2e 	bgeu	r18,r22,1000a5a4 <__umoddi3+0x5dc>
1000a3a8:	182f883a 	mov	r23,r3
1000a3ac:	e038943a 	slli	fp,fp,16
1000a3b0:	980cd43a 	srli	r6,r19,16
1000a3b4:	98ffffcc 	andi	r3,r19,65535
1000a3b8:	bf38b03a 	or	fp,r23,fp
1000a3bc:	e02ed43a 	srli	r23,fp,16
1000a3c0:	e73fffcc 	andi	fp,fp,65535
1000a3c4:	180b883a 	mov	r5,r3
1000a3c8:	e009883a 	mov	r4,fp
1000a3cc:	d9800015 	stw	r6,0(sp)
1000a3d0:	d8c00115 	stw	r3,4(sp)
1000a3d4:	90a5c83a 	sub	r18,r18,r2
1000a3d8:	00005a80 	call	100005a8 <__mulsi3>
1000a3dc:	d8c00117 	ldw	r3,4(sp)
1000a3e0:	b809883a 	mov	r4,r23
1000a3e4:	1023883a 	mov	r17,r2
1000a3e8:	180b883a 	mov	r5,r3
1000a3ec:	00005a80 	call	100005a8 <__mulsi3>
1000a3f0:	d9800017 	ldw	r6,0(sp)
1000a3f4:	b809883a 	mov	r4,r23
1000a3f8:	d8800115 	stw	r2,4(sp)
1000a3fc:	300b883a 	mov	r5,r6
1000a400:	302f883a 	mov	r23,r6
1000a404:	00005a80 	call	100005a8 <__mulsi3>
1000a408:	e009883a 	mov	r4,fp
1000a40c:	b80b883a 	mov	r5,r23
1000a410:	d8800015 	stw	r2,0(sp)
1000a414:	00005a80 	call	100005a8 <__mulsi3>
1000a418:	d8c00117 	ldw	r3,4(sp)
1000a41c:	880cd43a 	srli	r6,r17,16
1000a420:	d9c00017 	ldw	r7,0(sp)
1000a424:	1885883a 	add	r2,r3,r2
1000a428:	118d883a 	add	r6,r2,r6
1000a42c:	30c0022e 	bgeu	r6,r3,1000a438 <__umoddi3+0x470>
1000a430:	00800074 	movhi	r2,1
1000a434:	388f883a 	add	r7,r7,r2
1000a438:	3006d43a 	srli	r3,r6,16
1000a43c:	300c943a 	slli	r6,r6,16
1000a440:	8c7fffcc 	andi	r17,r17,65535
1000a444:	38c7883a 	add	r3,r7,r3
1000a448:	3463883a 	add	r17,r6,r17
1000a44c:	90c03d36 	bltu	r18,r3,1000a544 <__umoddi3+0x57c>
1000a450:	90c06026 	beq	r18,r3,1000a5d4 <__umoddi3+0x60c>
1000a454:	90c9c83a 	sub	r4,r18,r3
1000a458:	880f883a 	mov	r7,r17
1000a45c:	81cfc83a 	sub	r7,r16,r7
1000a460:	81c7803a 	cmpltu	r3,r16,r7
1000a464:	20c7c83a 	sub	r3,r4,r3
1000a468:	1d44983a 	sll	r2,r3,r21
1000a46c:	3d0ed83a 	srl	r7,r7,r20
1000a470:	1d06d83a 	srl	r3,r3,r20
1000a474:	11c4b03a 	or	r2,r2,r7
1000a478:	003f7a06 	br	1000a264 <__alt_data_end+0xf800a264>
1000a47c:	0025883a 	mov	r18,zero
1000a480:	003ef806 	br	1000a064 <__alt_data_end+0xf800a064>
1000a484:	98a6983a 	sll	r19,r19,r2
1000a488:	88e8d83a 	srl	r20,r17,r3
1000a48c:	80c6d83a 	srl	r3,r16,r3
1000a490:	982ad43a 	srli	r21,r19,16
1000a494:	88a2983a 	sll	r17,r17,r2
1000a498:	a009883a 	mov	r4,r20
1000a49c:	a80b883a 	mov	r5,r21
1000a4a0:	88eeb03a 	or	r23,r17,r3
1000a4a4:	1025883a 	mov	r18,r2
1000a4a8:	000a7080 	call	1000a708 <__umodsi3>
1000a4ac:	a009883a 	mov	r4,r20
1000a4b0:	a80b883a 	mov	r5,r21
1000a4b4:	1023883a 	mov	r17,r2
1000a4b8:	9dbfffcc 	andi	r22,r19,65535
1000a4bc:	000a7000 	call	1000a700 <__udivsi3>
1000a4c0:	1009883a 	mov	r4,r2
1000a4c4:	b00b883a 	mov	r5,r22
1000a4c8:	00005a80 	call	100005a8 <__mulsi3>
1000a4cc:	8822943a 	slli	r17,r17,16
1000a4d0:	b808d43a 	srli	r4,r23,16
1000a4d4:	84a8983a 	sll	r20,r16,r18
1000a4d8:	8906b03a 	or	r3,r17,r4
1000a4dc:	1880042e 	bgeu	r3,r2,1000a4f0 <__umoddi3+0x528>
1000a4e0:	1cc7883a 	add	r3,r3,r19
1000a4e4:	1cc00236 	bltu	r3,r19,1000a4f0 <__umoddi3+0x528>
1000a4e8:	1880012e 	bgeu	r3,r2,1000a4f0 <__umoddi3+0x528>
1000a4ec:	1cc7883a 	add	r3,r3,r19
1000a4f0:	18a1c83a 	sub	r16,r3,r2
1000a4f4:	8009883a 	mov	r4,r16
1000a4f8:	a80b883a 	mov	r5,r21
1000a4fc:	000a7080 	call	1000a708 <__umodsi3>
1000a500:	8009883a 	mov	r4,r16
1000a504:	a80b883a 	mov	r5,r21
1000a508:	1039883a 	mov	fp,r2
1000a50c:	000a7000 	call	1000a700 <__udivsi3>
1000a510:	1009883a 	mov	r4,r2
1000a514:	b00b883a 	mov	r5,r22
1000a518:	00005a80 	call	100005a8 <__mulsi3>
1000a51c:	e006943a 	slli	r3,fp,16
1000a520:	b93fffcc 	andi	r4,r23,65535
1000a524:	1906b03a 	or	r3,r3,r4
1000a528:	1880042e 	bgeu	r3,r2,1000a53c <__umoddi3+0x574>
1000a52c:	1cc7883a 	add	r3,r3,r19
1000a530:	1cc00236 	bltu	r3,r19,1000a53c <__umoddi3+0x574>
1000a534:	1880012e 	bgeu	r3,r2,1000a53c <__umoddi3+0x574>
1000a538:	1cc7883a 	add	r3,r3,r19
1000a53c:	18a3c83a 	sub	r17,r3,r2
1000a540:	003f1e06 	br	1000a1bc <__alt_data_end+0xf800a1bc>
1000a544:	8ccfc83a 	sub	r7,r17,r19
1000a548:	1d89c83a 	sub	r4,r3,r22
1000a54c:	89e3803a 	cmpltu	r17,r17,r7
1000a550:	2463c83a 	sub	r17,r4,r17
1000a554:	9449c83a 	sub	r4,r18,r17
1000a558:	003fc006 	br	1000a45c <__alt_data_end+0xf800a45c>
1000a55c:	000b883a 	mov	r5,zero
1000a560:	002b883a 	mov	r21,zero
1000a564:	003eeb06 	br	1000a114 <__alt_data_end+0xf800a114>
1000a568:	01400404 	movi	r5,16
1000a56c:	282b883a 	mov	r21,r5
1000a570:	003ee806 	br	1000a114 <__alt_data_end+0xf800a114>
1000a574:	01400404 	movi	r5,16
1000a578:	2805883a 	mov	r2,r5
1000a57c:	003eaa06 	br	1000a028 <__alt_data_end+0xf800a028>
1000a580:	0005883a 	mov	r2,zero
1000a584:	0007883a 	mov	r3,zero
1000a588:	003eff06 	br	1000a188 <__alt_data_end+0xf800a188>
1000a58c:	00800404 	movi	r2,16
1000a590:	1007883a 	mov	r3,r2
1000a594:	003efc06 	br	1000a188 <__alt_data_end+0xf800a188>
1000a598:	000b883a 	mov	r5,zero
1000a59c:	0005883a 	mov	r2,zero
1000a5a0:	003ea106 	br	1000a028 <__alt_data_end+0xf800a028>
1000a5a4:	90bf802e 	bgeu	r18,r2,1000a3a8 <__alt_data_end+0xf800a3a8>
1000a5a8:	bdffff84 	addi	r23,r23,-2
1000a5ac:	95a5883a 	add	r18,r18,r22
1000a5b0:	003f7e06 	br	1000a3ac <__alt_data_end+0xf800a3ac>
1000a5b4:	18bf652e 	bgeu	r3,r2,1000a34c <__alt_data_end+0xf800a34c>
1000a5b8:	e73fff84 	addi	fp,fp,-2
1000a5bc:	1d87883a 	add	r3,r3,r22
1000a5c0:	003f6306 	br	1000a350 <__alt_data_end+0xf800a350>
1000a5c4:	1cc7883a 	add	r3,r3,r19
1000a5c8:	003f0d06 	br	1000a200 <__alt_data_end+0xf800a200>
1000a5cc:	8005883a 	mov	r2,r16
1000a5d0:	003edf06 	br	1000a150 <__alt_data_end+0xf800a150>
1000a5d4:	847fdb36 	bltu	r16,r17,1000a544 <__alt_data_end+0xf800a544>
1000a5d8:	880f883a 	mov	r7,r17
1000a5dc:	0009883a 	mov	r4,zero
1000a5e0:	003f9e06 	br	1000a45c <__alt_data_end+0xf800a45c>

1000a5e4 <udivmodsi4>:
1000a5e4:	2900182e 	bgeu	r5,r4,1000a648 <udivmodsi4+0x64>
1000a5e8:	28001716 	blt	r5,zero,1000a648 <udivmodsi4+0x64>
1000a5ec:	00800804 	movi	r2,32
1000a5f0:	00c00044 	movi	r3,1
1000a5f4:	00000206 	br	1000a600 <udivmodsi4+0x1c>
1000a5f8:	10001126 	beq	r2,zero,1000a640 <udivmodsi4+0x5c>
1000a5fc:	28000516 	blt	r5,zero,1000a614 <udivmodsi4+0x30>
1000a600:	294b883a 	add	r5,r5,r5
1000a604:	10bfffc4 	addi	r2,r2,-1
1000a608:	18c7883a 	add	r3,r3,r3
1000a60c:	293ffa36 	bltu	r5,r4,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a610:	18000b26 	beq	r3,zero,1000a640 <udivmodsi4+0x5c>
1000a614:	0005883a 	mov	r2,zero
1000a618:	21400236 	bltu	r4,r5,1000a624 <udivmodsi4+0x40>
1000a61c:	2149c83a 	sub	r4,r4,r5
1000a620:	10c4b03a 	or	r2,r2,r3
1000a624:	1806d07a 	srli	r3,r3,1
1000a628:	280ad07a 	srli	r5,r5,1
1000a62c:	183ffa1e 	bne	r3,zero,1000a618 <__alt_data_end+0xf800a618>
1000a630:	3000011e 	bne	r6,zero,1000a638 <udivmodsi4+0x54>
1000a634:	f800283a 	ret
1000a638:	2005883a 	mov	r2,r4
1000a63c:	f800283a 	ret
1000a640:	0005883a 	mov	r2,zero
1000a644:	003ffa06 	br	1000a630 <__alt_data_end+0xf800a630>
1000a648:	00c00044 	movi	r3,1
1000a64c:	003ff106 	br	1000a614 <__alt_data_end+0xf800a614>

1000a650 <__divsi3>:
1000a650:	defffe04 	addi	sp,sp,-8
1000a654:	dfc00115 	stw	ra,4(sp)
1000a658:	dc000015 	stw	r16,0(sp)
1000a65c:	20000b16 	blt	r4,zero,1000a68c <__divsi3+0x3c>
1000a660:	0021883a 	mov	r16,zero
1000a664:	28000c16 	blt	r5,zero,1000a698 <__divsi3+0x48>
1000a668:	000d883a 	mov	r6,zero
1000a66c:	000a5e40 	call	1000a5e4 <udivmodsi4>
1000a670:	0407c83a 	sub	r3,zero,r16
1000a674:	1884f03a 	xor	r2,r3,r2
1000a678:	1405883a 	add	r2,r2,r16
1000a67c:	dfc00117 	ldw	ra,4(sp)
1000a680:	dc000017 	ldw	r16,0(sp)
1000a684:	dec00204 	addi	sp,sp,8
1000a688:	f800283a 	ret
1000a68c:	0109c83a 	sub	r4,zero,r4
1000a690:	04000044 	movi	r16,1
1000a694:	283ff40e 	bge	r5,zero,1000a668 <__alt_data_end+0xf800a668>
1000a698:	014bc83a 	sub	r5,zero,r5
1000a69c:	8400005c 	xori	r16,r16,1
1000a6a0:	003ff106 	br	1000a668 <__alt_data_end+0xf800a668>

1000a6a4 <__modsi3>:
1000a6a4:	defffd04 	addi	sp,sp,-12
1000a6a8:	dfc00215 	stw	ra,8(sp)
1000a6ac:	dc400115 	stw	r17,4(sp)
1000a6b0:	dc000015 	stw	r16,0(sp)
1000a6b4:	20000c16 	blt	r4,zero,1000a6e8 <__modsi3+0x44>
1000a6b8:	0023883a 	mov	r17,zero
1000a6bc:	0021883a 	mov	r16,zero
1000a6c0:	28000d16 	blt	r5,zero,1000a6f8 <__modsi3+0x54>
1000a6c4:	01800044 	movi	r6,1
1000a6c8:	000a5e40 	call	1000a5e4 <udivmodsi4>
1000a6cc:	1404f03a 	xor	r2,r2,r16
1000a6d0:	8885883a 	add	r2,r17,r2
1000a6d4:	dfc00217 	ldw	ra,8(sp)
1000a6d8:	dc400117 	ldw	r17,4(sp)
1000a6dc:	dc000017 	ldw	r16,0(sp)
1000a6e0:	dec00304 	addi	sp,sp,12
1000a6e4:	f800283a 	ret
1000a6e8:	0109c83a 	sub	r4,zero,r4
1000a6ec:	04400044 	movi	r17,1
1000a6f0:	043fffc4 	movi	r16,-1
1000a6f4:	283ff30e 	bge	r5,zero,1000a6c4 <__alt_data_end+0xf800a6c4>
1000a6f8:	014bc83a 	sub	r5,zero,r5
1000a6fc:	003ff106 	br	1000a6c4 <__alt_data_end+0xf800a6c4>

1000a700 <__udivsi3>:
1000a700:	000d883a 	mov	r6,zero
1000a704:	000a5e41 	jmpi	1000a5e4 <udivmodsi4>

1000a708 <__umodsi3>:
1000a708:	01800044 	movi	r6,1
1000a70c:	000a5e41 	jmpi	1000a5e4 <udivmodsi4>

1000a710 <__adddf3>:
1000a710:	02000434 	movhi	r8,16
1000a714:	423fffc4 	addi	r8,r8,-1
1000a718:	defffb04 	addi	sp,sp,-20
1000a71c:	2a12703a 	and	r9,r5,r8
1000a720:	2806d7fa 	srli	r3,r5,31
1000a724:	3a10703a 	and	r8,r7,r8
1000a728:	3804d53a 	srli	r2,r7,20
1000a72c:	3014d77a 	srli	r10,r6,29
1000a730:	dc000015 	stw	r16,0(sp)
1000a734:	481290fa 	slli	r9,r9,3
1000a738:	2820d53a 	srli	r16,r5,20
1000a73c:	401090fa 	slli	r8,r8,3
1000a740:	200ad77a 	srli	r5,r4,29
1000a744:	380ed7fa 	srli	r7,r7,31
1000a748:	dc800215 	stw	r18,8(sp)
1000a74c:	dc400115 	stw	r17,4(sp)
1000a750:	dfc00415 	stw	ra,16(sp)
1000a754:	dcc00315 	stw	r19,12(sp)
1000a758:	1c803fcc 	andi	r18,r3,255
1000a75c:	8401ffcc 	andi	r16,r16,2047
1000a760:	494ab03a 	or	r5,r9,r5
1000a764:	202290fa 	slli	r17,r4,3
1000a768:	1081ffcc 	andi	r2,r2,2047
1000a76c:	4290b03a 	or	r8,r8,r10
1000a770:	300c90fa 	slli	r6,r6,3
1000a774:	91c07026 	beq	r18,r7,1000a938 <__adddf3+0x228>
1000a778:	8087c83a 	sub	r3,r16,r2
1000a77c:	00c0b30e 	bge	zero,r3,1000aa4c <__adddf3+0x33c>
1000a780:	10002a1e 	bne	r2,zero,1000a82c <__adddf3+0x11c>
1000a784:	4184b03a 	or	r2,r8,r6
1000a788:	1000991e 	bne	r2,zero,1000a9f0 <__adddf3+0x2e0>
1000a78c:	888001cc 	andi	r2,r17,7
1000a790:	10005b26 	beq	r2,zero,1000a900 <__adddf3+0x1f0>
1000a794:	88c003cc 	andi	r3,r17,15
1000a798:	00800104 	movi	r2,4
1000a79c:	18805826 	beq	r3,r2,1000a900 <__adddf3+0x1f0>
1000a7a0:	89800104 	addi	r6,r17,4
1000a7a4:	3463803a 	cmpltu	r17,r6,r17
1000a7a8:	2c4b883a 	add	r5,r5,r17
1000a7ac:	2880202c 	andhi	r2,r5,128
1000a7b0:	9007883a 	mov	r3,r18
1000a7b4:	3023883a 	mov	r17,r6
1000a7b8:	10005426 	beq	r2,zero,1000a90c <__adddf3+0x1fc>
1000a7bc:	84000044 	addi	r16,r16,1
1000a7c0:	0081ffc4 	movi	r2,2047
1000a7c4:	8080c126 	beq	r16,r2,1000aacc <__adddf3+0x3bc>
1000a7c8:	013fe034 	movhi	r4,65408
1000a7cc:	213fffc4 	addi	r4,r4,-1
1000a7d0:	290a703a 	and	r5,r5,r4
1000a7d4:	2804977a 	slli	r2,r5,29
1000a7d8:	280a927a 	slli	r5,r5,9
1000a7dc:	8822d0fa 	srli	r17,r17,3
1000a7e0:	8401ffcc 	andi	r16,r16,2047
1000a7e4:	2808d33a 	srli	r4,r5,12
1000a7e8:	1444b03a 	or	r2,r2,r17
1000a7ec:	8401ffcc 	andi	r16,r16,2047
1000a7f0:	800a953a 	slli	r5,r16,20
1000a7f4:	18c03fcc 	andi	r3,r3,255
1000a7f8:	04000434 	movhi	r16,16
1000a7fc:	180697fa 	slli	r3,r3,31
1000a800:	843fffc4 	addi	r16,r16,-1
1000a804:	2420703a 	and	r16,r4,r16
1000a808:	8160b03a 	or	r16,r16,r5
1000a80c:	80c6b03a 	or	r3,r16,r3
1000a810:	dfc00417 	ldw	ra,16(sp)
1000a814:	dcc00317 	ldw	r19,12(sp)
1000a818:	dc800217 	ldw	r18,8(sp)
1000a81c:	dc400117 	ldw	r17,4(sp)
1000a820:	dc000017 	ldw	r16,0(sp)
1000a824:	dec00504 	addi	sp,sp,20
1000a828:	f800283a 	ret
1000a82c:	0081ffc4 	movi	r2,2047
1000a830:	80bfd626 	beq	r16,r2,1000a78c <__alt_data_end+0xf800a78c>
1000a834:	42002034 	orhi	r8,r8,128
1000a838:	00800e04 	movi	r2,56
1000a83c:	10c0a616 	blt	r2,r3,1000aad8 <__adddf3+0x3c8>
1000a840:	008007c4 	movi	r2,31
1000a844:	10c0c916 	blt	r2,r3,1000ab6c <__adddf3+0x45c>
1000a848:	00800804 	movi	r2,32
1000a84c:	10c5c83a 	sub	r2,r2,r3
1000a850:	408e983a 	sll	r7,r8,r2
1000a854:	30c8d83a 	srl	r4,r6,r3
1000a858:	3084983a 	sll	r2,r6,r2
1000a85c:	40c6d83a 	srl	r3,r8,r3
1000a860:	390cb03a 	or	r6,r7,r4
1000a864:	1004c03a 	cmpne	r2,r2,zero
1000a868:	308cb03a 	or	r6,r6,r2
1000a86c:	898dc83a 	sub	r6,r17,r6
1000a870:	89a3803a 	cmpltu	r17,r17,r6
1000a874:	28cbc83a 	sub	r5,r5,r3
1000a878:	2c4bc83a 	sub	r5,r5,r17
1000a87c:	3023883a 	mov	r17,r6
1000a880:	2880202c 	andhi	r2,r5,128
1000a884:	10006d26 	beq	r2,zero,1000aa3c <__adddf3+0x32c>
1000a888:	04c02034 	movhi	r19,128
1000a88c:	9cffffc4 	addi	r19,r19,-1
1000a890:	2ce6703a 	and	r19,r5,r19
1000a894:	98007e26 	beq	r19,zero,1000aa90 <__adddf3+0x380>
1000a898:	9809883a 	mov	r4,r19
1000a89c:	000cea80 	call	1000cea8 <__clzsi2>
1000a8a0:	10fffe04 	addi	r3,r2,-8
1000a8a4:	010007c4 	movi	r4,31
1000a8a8:	20c07f16 	blt	r4,r3,1000aaa8 <__adddf3+0x398>
1000a8ac:	01400a04 	movi	r5,40
1000a8b0:	2885c83a 	sub	r2,r5,r2
1000a8b4:	888ad83a 	srl	r5,r17,r2
1000a8b8:	98e6983a 	sll	r19,r19,r3
1000a8bc:	88e2983a 	sll	r17,r17,r3
1000a8c0:	2ce6b03a 	or	r19,r5,r19
1000a8c4:	1c007c16 	blt	r3,r16,1000aab8 <__adddf3+0x3a8>
1000a8c8:	1c21c83a 	sub	r16,r3,r16
1000a8cc:	81400044 	addi	r5,r16,1
1000a8d0:	00c007c4 	movi	r3,31
1000a8d4:	19409816 	blt	r3,r5,1000ab38 <__adddf3+0x428>
1000a8d8:	1c21c83a 	sub	r16,r3,r16
1000a8dc:	8c08983a 	sll	r4,r17,r16
1000a8e0:	8946d83a 	srl	r3,r17,r5
1000a8e4:	9c20983a 	sll	r16,r19,r16
1000a8e8:	2008c03a 	cmpne	r4,r4,zero
1000a8ec:	994ad83a 	srl	r5,r19,r5
1000a8f0:	1c06b03a 	or	r3,r3,r16
1000a8f4:	1922b03a 	or	r17,r3,r4
1000a8f8:	0021883a 	mov	r16,zero
1000a8fc:	003fa306 	br	1000a78c <__alt_data_end+0xf800a78c>
1000a900:	2880202c 	andhi	r2,r5,128
1000a904:	9007883a 	mov	r3,r18
1000a908:	103fac1e 	bne	r2,zero,1000a7bc <__alt_data_end+0xf800a7bc>
1000a90c:	2804977a 	slli	r2,r5,29
1000a910:	8822d0fa 	srli	r17,r17,3
1000a914:	0101ffc4 	movi	r4,2047
1000a918:	280ad0fa 	srli	r5,r5,3
1000a91c:	1444b03a 	or	r2,r2,r17
1000a920:	81002c26 	beq	r16,r4,1000a9d4 <__adddf3+0x2c4>
1000a924:	8120703a 	and	r16,r16,r4
1000a928:	01000434 	movhi	r4,16
1000a92c:	213fffc4 	addi	r4,r4,-1
1000a930:	2908703a 	and	r4,r5,r4
1000a934:	003fad06 	br	1000a7ec <__alt_data_end+0xf800a7ec>
1000a938:	8089c83a 	sub	r4,r16,r2
1000a93c:	01006a0e 	bge	zero,r4,1000aae8 <__adddf3+0x3d8>
1000a940:	10003326 	beq	r2,zero,1000aa10 <__adddf3+0x300>
1000a944:	0081ffc4 	movi	r2,2047
1000a948:	80bf9026 	beq	r16,r2,1000a78c <__alt_data_end+0xf800a78c>
1000a94c:	42002034 	orhi	r8,r8,128
1000a950:	00800e04 	movi	r2,56
1000a954:	1100b116 	blt	r2,r4,1000ac1c <__adddf3+0x50c>
1000a958:	008007c4 	movi	r2,31
1000a95c:	1100e216 	blt	r2,r4,1000ace8 <__adddf3+0x5d8>
1000a960:	00800804 	movi	r2,32
1000a964:	1105c83a 	sub	r2,r2,r4
1000a968:	4092983a 	sll	r9,r8,r2
1000a96c:	310ed83a 	srl	r7,r6,r4
1000a970:	3084983a 	sll	r2,r6,r2
1000a974:	4110d83a 	srl	r8,r8,r4
1000a978:	49ccb03a 	or	r6,r9,r7
1000a97c:	1004c03a 	cmpne	r2,r2,zero
1000a980:	308cb03a 	or	r6,r6,r2
1000a984:	344d883a 	add	r6,r6,r17
1000a988:	3463803a 	cmpltu	r17,r6,r17
1000a98c:	414b883a 	add	r5,r8,r5
1000a990:	2c4b883a 	add	r5,r5,r17
1000a994:	3023883a 	mov	r17,r6
1000a998:	2880202c 	andhi	r2,r5,128
1000a99c:	10002726 	beq	r2,zero,1000aa3c <__adddf3+0x32c>
1000a9a0:	84000044 	addi	r16,r16,1
1000a9a4:	0081ffc4 	movi	r2,2047
1000a9a8:	8080ae26 	beq	r16,r2,1000ac64 <__adddf3+0x554>
1000a9ac:	00bfe034 	movhi	r2,65408
1000a9b0:	10bfffc4 	addi	r2,r2,-1
1000a9b4:	288a703a 	and	r5,r5,r2
1000a9b8:	880cd07a 	srli	r6,r17,1
1000a9bc:	280897fa 	slli	r4,r5,31
1000a9c0:	88c0004c 	andi	r3,r17,1
1000a9c4:	30e2b03a 	or	r17,r6,r3
1000a9c8:	280ad07a 	srli	r5,r5,1
1000a9cc:	8922b03a 	or	r17,r17,r4
1000a9d0:	003f6e06 	br	1000a78c <__alt_data_end+0xf800a78c>
1000a9d4:	1148b03a 	or	r4,r2,r5
1000a9d8:	20003c26 	beq	r4,zero,1000aacc <__adddf3+0x3bc>
1000a9dc:	29000234 	orhi	r4,r5,8
1000a9e0:	01400434 	movhi	r5,16
1000a9e4:	297fffc4 	addi	r5,r5,-1
1000a9e8:	2148703a 	and	r4,r4,r5
1000a9ec:	003f7f06 	br	1000a7ec <__alt_data_end+0xf800a7ec>
1000a9f0:	18ffffc4 	addi	r3,r3,-1
1000a9f4:	18004d1e 	bne	r3,zero,1000ab2c <__adddf3+0x41c>
1000a9f8:	898dc83a 	sub	r6,r17,r6
1000a9fc:	89a3803a 	cmpltu	r17,r17,r6
1000aa00:	2a0bc83a 	sub	r5,r5,r8
1000aa04:	2c4bc83a 	sub	r5,r5,r17
1000aa08:	3023883a 	mov	r17,r6
1000aa0c:	003f9c06 	br	1000a880 <__alt_data_end+0xf800a880>
1000aa10:	4184b03a 	or	r2,r8,r6
1000aa14:	103f5d26 	beq	r2,zero,1000a78c <__alt_data_end+0xf800a78c>
1000aa18:	213fffc4 	addi	r4,r4,-1
1000aa1c:	203fd926 	beq	r4,zero,1000a984 <__alt_data_end+0xf800a984>
1000aa20:	0081ffc4 	movi	r2,2047
1000aa24:	80bfca1e 	bne	r16,r2,1000a950 <__alt_data_end+0xf800a950>
1000aa28:	003f5806 	br	1000a78c <__alt_data_end+0xf800a78c>
1000aa2c:	10c8b03a 	or	r4,r2,r3
1000aa30:	20008b26 	beq	r4,zero,1000ac60 <__adddf3+0x550>
1000aa34:	100b883a 	mov	r5,r2
1000aa38:	1823883a 	mov	r17,r3
1000aa3c:	888001cc 	andi	r2,r17,7
1000aa40:	103f541e 	bne	r2,zero,1000a794 <__alt_data_end+0xf800a794>
1000aa44:	9007883a 	mov	r3,r18
1000aa48:	003fb006 	br	1000a90c <__alt_data_end+0xf800a90c>
1000aa4c:	1800531e 	bne	r3,zero,1000ab9c <__adddf3+0x48c>
1000aa50:	80800044 	addi	r2,r16,1
1000aa54:	1081ffcc 	andi	r2,r2,2047
1000aa58:	00c00044 	movi	r3,1
1000aa5c:	1880990e 	bge	r3,r2,1000acc4 <__adddf3+0x5b4>
1000aa60:	8985c83a 	sub	r2,r17,r6
1000aa64:	8887803a 	cmpltu	r3,r17,r2
1000aa68:	2a27c83a 	sub	r19,r5,r8
1000aa6c:	98e7c83a 	sub	r19,r19,r3
1000aa70:	98c0202c 	andhi	r3,r19,128
1000aa74:	18006226 	beq	r3,zero,1000ac00 <__adddf3+0x4f0>
1000aa78:	3463c83a 	sub	r17,r6,r17
1000aa7c:	4151c83a 	sub	r8,r8,r5
1000aa80:	344d803a 	cmpltu	r6,r6,r17
1000aa84:	41a7c83a 	sub	r19,r8,r6
1000aa88:	3825883a 	mov	r18,r7
1000aa8c:	983f821e 	bne	r19,zero,1000a898 <__alt_data_end+0xf800a898>
1000aa90:	8809883a 	mov	r4,r17
1000aa94:	000cea80 	call	1000cea8 <__clzsi2>
1000aa98:	10800804 	addi	r2,r2,32
1000aa9c:	10fffe04 	addi	r3,r2,-8
1000aaa0:	010007c4 	movi	r4,31
1000aaa4:	20ff810e 	bge	r4,r3,1000a8ac <__alt_data_end+0xf800a8ac>
1000aaa8:	14fff604 	addi	r19,r2,-40
1000aaac:	8ce6983a 	sll	r19,r17,r19
1000aab0:	0023883a 	mov	r17,zero
1000aab4:	1c3f840e 	bge	r3,r16,1000a8c8 <__alt_data_end+0xf800a8c8>
1000aab8:	017fe034 	movhi	r5,65408
1000aabc:	297fffc4 	addi	r5,r5,-1
1000aac0:	80e1c83a 	sub	r16,r16,r3
1000aac4:	994a703a 	and	r5,r19,r5
1000aac8:	003f3006 	br	1000a78c <__alt_data_end+0xf800a78c>
1000aacc:	0009883a 	mov	r4,zero
1000aad0:	0005883a 	mov	r2,zero
1000aad4:	003f4506 	br	1000a7ec <__alt_data_end+0xf800a7ec>
1000aad8:	418cb03a 	or	r6,r8,r6
1000aadc:	300cc03a 	cmpne	r6,r6,zero
1000aae0:	0007883a 	mov	r3,zero
1000aae4:	003f6106 	br	1000a86c <__alt_data_end+0xf800a86c>
1000aae8:	2000921e 	bne	r4,zero,1000ad34 <__adddf3+0x624>
1000aaec:	80800044 	addi	r2,r16,1
1000aaf0:	11c1ffcc 	andi	r7,r2,2047
1000aaf4:	01000044 	movi	r4,1
1000aaf8:	21c0610e 	bge	r4,r7,1000ac80 <__adddf3+0x570>
1000aafc:	0101ffc4 	movi	r4,2047
1000ab00:	1100a326 	beq	r2,r4,1000ad90 <__adddf3+0x680>
1000ab04:	344d883a 	add	r6,r6,r17
1000ab08:	3463803a 	cmpltu	r17,r6,r17
1000ab0c:	414b883a 	add	r5,r8,r5
1000ab10:	2c4b883a 	add	r5,r5,r17
1000ab14:	282297fa 	slli	r17,r5,31
1000ab18:	300cd07a 	srli	r6,r6,1
1000ab1c:	280ad07a 	srli	r5,r5,1
1000ab20:	1021883a 	mov	r16,r2
1000ab24:	89a2b03a 	or	r17,r17,r6
1000ab28:	003f1806 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ab2c:	0081ffc4 	movi	r2,2047
1000ab30:	80bf411e 	bne	r16,r2,1000a838 <__alt_data_end+0xf800a838>
1000ab34:	003f1506 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ab38:	80bff844 	addi	r2,r16,-31
1000ab3c:	00c00804 	movi	r3,32
1000ab40:	9884d83a 	srl	r2,r19,r2
1000ab44:	28c04a26 	beq	r5,r3,1000ac70 <__adddf3+0x560>
1000ab48:	00c00fc4 	movi	r3,63
1000ab4c:	1c21c83a 	sub	r16,r3,r16
1000ab50:	9c26983a 	sll	r19,r19,r16
1000ab54:	9c62b03a 	or	r17,r19,r17
1000ab58:	8822c03a 	cmpne	r17,r17,zero
1000ab5c:	88a2b03a 	or	r17,r17,r2
1000ab60:	000b883a 	mov	r5,zero
1000ab64:	0021883a 	mov	r16,zero
1000ab68:	003fb406 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000ab6c:	18bff804 	addi	r2,r3,-32
1000ab70:	01000804 	movi	r4,32
1000ab74:	4084d83a 	srl	r2,r8,r2
1000ab78:	19003f26 	beq	r3,r4,1000ac78 <__adddf3+0x568>
1000ab7c:	01001004 	movi	r4,64
1000ab80:	20c7c83a 	sub	r3,r4,r3
1000ab84:	40d0983a 	sll	r8,r8,r3
1000ab88:	418cb03a 	or	r6,r8,r6
1000ab8c:	300cc03a 	cmpne	r6,r6,zero
1000ab90:	308cb03a 	or	r6,r6,r2
1000ab94:	0007883a 	mov	r3,zero
1000ab98:	003f3406 	br	1000a86c <__alt_data_end+0xf800a86c>
1000ab9c:	80002326 	beq	r16,zero,1000ac2c <__adddf3+0x51c>
1000aba0:	0101ffc4 	movi	r4,2047
1000aba4:	11005e26 	beq	r2,r4,1000ad20 <__adddf3+0x610>
1000aba8:	00c7c83a 	sub	r3,zero,r3
1000abac:	29402034 	orhi	r5,r5,128
1000abb0:	01000e04 	movi	r4,56
1000abb4:	20c07216 	blt	r4,r3,1000ad80 <__adddf3+0x670>
1000abb8:	010007c4 	movi	r4,31
1000abbc:	20c0ce16 	blt	r4,r3,1000aef8 <__adddf3+0x7e8>
1000abc0:	01000804 	movi	r4,32
1000abc4:	20c9c83a 	sub	r4,r4,r3
1000abc8:	2914983a 	sll	r10,r5,r4
1000abcc:	88d2d83a 	srl	r9,r17,r3
1000abd0:	8908983a 	sll	r4,r17,r4
1000abd4:	28c6d83a 	srl	r3,r5,r3
1000abd8:	5262b03a 	or	r17,r10,r9
1000abdc:	2008c03a 	cmpne	r4,r4,zero
1000abe0:	8922b03a 	or	r17,r17,r4
1000abe4:	3463c83a 	sub	r17,r6,r17
1000abe8:	40c7c83a 	sub	r3,r8,r3
1000abec:	344d803a 	cmpltu	r6,r6,r17
1000abf0:	198bc83a 	sub	r5,r3,r6
1000abf4:	1021883a 	mov	r16,r2
1000abf8:	3825883a 	mov	r18,r7
1000abfc:	003f2006 	br	1000a880 <__alt_data_end+0xf800a880>
1000ac00:	9886b03a 	or	r3,r19,r2
1000ac04:	1800141e 	bne	r3,zero,1000ac58 <__adddf3+0x548>
1000ac08:	0007883a 	mov	r3,zero
1000ac0c:	000b883a 	mov	r5,zero
1000ac10:	0023883a 	mov	r17,zero
1000ac14:	0021883a 	mov	r16,zero
1000ac18:	003f3c06 	br	1000a90c <__alt_data_end+0xf800a90c>
1000ac1c:	418cb03a 	or	r6,r8,r6
1000ac20:	300cc03a 	cmpne	r6,r6,zero
1000ac24:	0011883a 	mov	r8,zero
1000ac28:	003f5606 	br	1000a984 <__alt_data_end+0xf800a984>
1000ac2c:	2c48b03a 	or	r4,r5,r17
1000ac30:	20003b26 	beq	r4,zero,1000ad20 <__adddf3+0x610>
1000ac34:	00c6303a 	nor	r3,zero,r3
1000ac38:	1800371e 	bne	r3,zero,1000ad18 <__adddf3+0x608>
1000ac3c:	3463c83a 	sub	r17,r6,r17
1000ac40:	414bc83a 	sub	r5,r8,r5
1000ac44:	344d803a 	cmpltu	r6,r6,r17
1000ac48:	298bc83a 	sub	r5,r5,r6
1000ac4c:	1021883a 	mov	r16,r2
1000ac50:	3825883a 	mov	r18,r7
1000ac54:	003f0a06 	br	1000a880 <__alt_data_end+0xf800a880>
1000ac58:	1023883a 	mov	r17,r2
1000ac5c:	003f0d06 	br	1000a894 <__alt_data_end+0xf800a894>
1000ac60:	0007883a 	mov	r3,zero
1000ac64:	000b883a 	mov	r5,zero
1000ac68:	0023883a 	mov	r17,zero
1000ac6c:	003f2706 	br	1000a90c <__alt_data_end+0xf800a90c>
1000ac70:	0027883a 	mov	r19,zero
1000ac74:	003fb706 	br	1000ab54 <__alt_data_end+0xf800ab54>
1000ac78:	0011883a 	mov	r8,zero
1000ac7c:	003fc206 	br	1000ab88 <__alt_data_end+0xf800ab88>
1000ac80:	2c44b03a 	or	r2,r5,r17
1000ac84:	8000871e 	bne	r16,zero,1000aea4 <__adddf3+0x794>
1000ac88:	1000b126 	beq	r2,zero,1000af50 <__adddf3+0x840>
1000ac8c:	4184b03a 	or	r2,r8,r6
1000ac90:	103ebe26 	beq	r2,zero,1000a78c <__alt_data_end+0xf800a78c>
1000ac94:	3445883a 	add	r2,r6,r17
1000ac98:	1463803a 	cmpltu	r17,r2,r17
1000ac9c:	414b883a 	add	r5,r8,r5
1000aca0:	2c4b883a 	add	r5,r5,r17
1000aca4:	28c0202c 	andhi	r3,r5,128
1000aca8:	1023883a 	mov	r17,r2
1000acac:	183f6326 	beq	r3,zero,1000aa3c <__alt_data_end+0xf800aa3c>
1000acb0:	00bfe034 	movhi	r2,65408
1000acb4:	10bfffc4 	addi	r2,r2,-1
1000acb8:	2021883a 	mov	r16,r4
1000acbc:	288a703a 	and	r5,r5,r2
1000acc0:	003eb206 	br	1000a78c <__alt_data_end+0xf800a78c>
1000acc4:	2c44b03a 	or	r2,r5,r17
1000acc8:	8000251e 	bne	r16,zero,1000ad60 <__adddf3+0x650>
1000accc:	10004b1e 	bne	r2,zero,1000adfc <__adddf3+0x6ec>
1000acd0:	4184b03a 	or	r2,r8,r6
1000acd4:	103fe226 	beq	r2,zero,1000ac60 <__alt_data_end+0xf800ac60>
1000acd8:	400b883a 	mov	r5,r8
1000acdc:	3023883a 	mov	r17,r6
1000ace0:	3825883a 	mov	r18,r7
1000ace4:	003ea906 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ace8:	20bff804 	addi	r2,r4,-32
1000acec:	01c00804 	movi	r7,32
1000acf0:	4084d83a 	srl	r2,r8,r2
1000acf4:	21c07e26 	beq	r4,r7,1000aef0 <__adddf3+0x7e0>
1000acf8:	01c01004 	movi	r7,64
1000acfc:	3909c83a 	sub	r4,r7,r4
1000ad00:	4110983a 	sll	r8,r8,r4
1000ad04:	418cb03a 	or	r6,r8,r6
1000ad08:	300cc03a 	cmpne	r6,r6,zero
1000ad0c:	308cb03a 	or	r6,r6,r2
1000ad10:	0011883a 	mov	r8,zero
1000ad14:	003f1b06 	br	1000a984 <__alt_data_end+0xf800a984>
1000ad18:	0101ffc4 	movi	r4,2047
1000ad1c:	113fa41e 	bne	r2,r4,1000abb0 <__alt_data_end+0xf800abb0>
1000ad20:	400b883a 	mov	r5,r8
1000ad24:	3023883a 	mov	r17,r6
1000ad28:	1021883a 	mov	r16,r2
1000ad2c:	3825883a 	mov	r18,r7
1000ad30:	003e9606 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ad34:	80001a1e 	bne	r16,zero,1000ada0 <__adddf3+0x690>
1000ad38:	2c4eb03a 	or	r7,r5,r17
1000ad3c:	38005526 	beq	r7,zero,1000ae94 <__adddf3+0x784>
1000ad40:	0108303a 	nor	r4,zero,r4
1000ad44:	2000511e 	bne	r4,zero,1000ae8c <__adddf3+0x77c>
1000ad48:	89a3883a 	add	r17,r17,r6
1000ad4c:	414b883a 	add	r5,r8,r5
1000ad50:	898d803a 	cmpltu	r6,r17,r6
1000ad54:	298b883a 	add	r5,r5,r6
1000ad58:	1021883a 	mov	r16,r2
1000ad5c:	003f0e06 	br	1000a998 <__alt_data_end+0xf800a998>
1000ad60:	1000341e 	bne	r2,zero,1000ae34 <__adddf3+0x724>
1000ad64:	4184b03a 	or	r2,r8,r6
1000ad68:	10006f26 	beq	r2,zero,1000af28 <__adddf3+0x818>
1000ad6c:	400b883a 	mov	r5,r8
1000ad70:	3023883a 	mov	r17,r6
1000ad74:	3825883a 	mov	r18,r7
1000ad78:	0401ffc4 	movi	r16,2047
1000ad7c:	003e8306 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ad80:	2c62b03a 	or	r17,r5,r17
1000ad84:	8822c03a 	cmpne	r17,r17,zero
1000ad88:	0007883a 	mov	r3,zero
1000ad8c:	003f9506 	br	1000abe4 <__alt_data_end+0xf800abe4>
1000ad90:	1021883a 	mov	r16,r2
1000ad94:	000b883a 	mov	r5,zero
1000ad98:	0023883a 	mov	r17,zero
1000ad9c:	003edb06 	br	1000a90c <__alt_data_end+0xf800a90c>
1000ada0:	01c1ffc4 	movi	r7,2047
1000ada4:	11c03b26 	beq	r2,r7,1000ae94 <__adddf3+0x784>
1000ada8:	0109c83a 	sub	r4,zero,r4
1000adac:	29402034 	orhi	r5,r5,128
1000adb0:	01c00e04 	movi	r7,56
1000adb4:	39006216 	blt	r7,r4,1000af40 <__adddf3+0x830>
1000adb8:	01c007c4 	movi	r7,31
1000adbc:	39006b16 	blt	r7,r4,1000af6c <__adddf3+0x85c>
1000adc0:	01c00804 	movi	r7,32
1000adc4:	390fc83a 	sub	r7,r7,r4
1000adc8:	29d4983a 	sll	r10,r5,r7
1000adcc:	8912d83a 	srl	r9,r17,r4
1000add0:	89ce983a 	sll	r7,r17,r7
1000add4:	2908d83a 	srl	r4,r5,r4
1000add8:	5262b03a 	or	r17,r10,r9
1000addc:	380ac03a 	cmpne	r5,r7,zero
1000ade0:	8962b03a 	or	r17,r17,r5
1000ade4:	89a3883a 	add	r17,r17,r6
1000ade8:	2211883a 	add	r8,r4,r8
1000adec:	898d803a 	cmpltu	r6,r17,r6
1000adf0:	418b883a 	add	r5,r8,r6
1000adf4:	1021883a 	mov	r16,r2
1000adf8:	003ee706 	br	1000a998 <__alt_data_end+0xf800a998>
1000adfc:	4184b03a 	or	r2,r8,r6
1000ae00:	103e6226 	beq	r2,zero,1000a78c <__alt_data_end+0xf800a78c>
1000ae04:	8987c83a 	sub	r3,r17,r6
1000ae08:	88c9803a 	cmpltu	r4,r17,r3
1000ae0c:	2a05c83a 	sub	r2,r5,r8
1000ae10:	1105c83a 	sub	r2,r2,r4
1000ae14:	1100202c 	andhi	r4,r2,128
1000ae18:	203f0426 	beq	r4,zero,1000aa2c <__alt_data_end+0xf800aa2c>
1000ae1c:	3463c83a 	sub	r17,r6,r17
1000ae20:	414bc83a 	sub	r5,r8,r5
1000ae24:	344d803a 	cmpltu	r6,r6,r17
1000ae28:	298bc83a 	sub	r5,r5,r6
1000ae2c:	3825883a 	mov	r18,r7
1000ae30:	003e5606 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ae34:	4184b03a 	or	r2,r8,r6
1000ae38:	10002b26 	beq	r2,zero,1000aee8 <__adddf3+0x7d8>
1000ae3c:	2804d0fa 	srli	r2,r5,3
1000ae40:	8822d0fa 	srli	r17,r17,3
1000ae44:	280a977a 	slli	r5,r5,29
1000ae48:	10c0022c 	andhi	r3,r2,8
1000ae4c:	2c62b03a 	or	r17,r5,r17
1000ae50:	18000826 	beq	r3,zero,1000ae74 <__adddf3+0x764>
1000ae54:	4008d0fa 	srli	r4,r8,3
1000ae58:	20c0022c 	andhi	r3,r4,8
1000ae5c:	1800051e 	bne	r3,zero,1000ae74 <__adddf3+0x764>
1000ae60:	300cd0fa 	srli	r6,r6,3
1000ae64:	4010977a 	slli	r8,r8,29
1000ae68:	2005883a 	mov	r2,r4
1000ae6c:	3825883a 	mov	r18,r7
1000ae70:	41a2b03a 	or	r17,r8,r6
1000ae74:	880ad77a 	srli	r5,r17,29
1000ae78:	100490fa 	slli	r2,r2,3
1000ae7c:	882290fa 	slli	r17,r17,3
1000ae80:	0401ffc4 	movi	r16,2047
1000ae84:	288ab03a 	or	r5,r5,r2
1000ae88:	003e4006 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ae8c:	01c1ffc4 	movi	r7,2047
1000ae90:	11ffc71e 	bne	r2,r7,1000adb0 <__alt_data_end+0xf800adb0>
1000ae94:	400b883a 	mov	r5,r8
1000ae98:	3023883a 	mov	r17,r6
1000ae9c:	1021883a 	mov	r16,r2
1000aea0:	003e3a06 	br	1000a78c <__alt_data_end+0xf800a78c>
1000aea4:	10002d26 	beq	r2,zero,1000af5c <__adddf3+0x84c>
1000aea8:	4184b03a 	or	r2,r8,r6
1000aeac:	10000e26 	beq	r2,zero,1000aee8 <__adddf3+0x7d8>
1000aeb0:	2804d0fa 	srli	r2,r5,3
1000aeb4:	8822d0fa 	srli	r17,r17,3
1000aeb8:	280a977a 	slli	r5,r5,29
1000aebc:	10c0022c 	andhi	r3,r2,8
1000aec0:	2c62b03a 	or	r17,r5,r17
1000aec4:	183feb26 	beq	r3,zero,1000ae74 <__alt_data_end+0xf800ae74>
1000aec8:	4008d0fa 	srli	r4,r8,3
1000aecc:	20c0022c 	andhi	r3,r4,8
1000aed0:	183fe81e 	bne	r3,zero,1000ae74 <__alt_data_end+0xf800ae74>
1000aed4:	300cd0fa 	srli	r6,r6,3
1000aed8:	4010977a 	slli	r8,r8,29
1000aedc:	2005883a 	mov	r2,r4
1000aee0:	41a2b03a 	or	r17,r8,r6
1000aee4:	003fe306 	br	1000ae74 <__alt_data_end+0xf800ae74>
1000aee8:	0401ffc4 	movi	r16,2047
1000aeec:	003e2706 	br	1000a78c <__alt_data_end+0xf800a78c>
1000aef0:	0011883a 	mov	r8,zero
1000aef4:	003f8306 	br	1000ad04 <__alt_data_end+0xf800ad04>
1000aef8:	193ff804 	addi	r4,r3,-32
1000aefc:	02400804 	movi	r9,32
1000af00:	2908d83a 	srl	r4,r5,r4
1000af04:	1a402526 	beq	r3,r9,1000af9c <__adddf3+0x88c>
1000af08:	02401004 	movi	r9,64
1000af0c:	48c7c83a 	sub	r3,r9,r3
1000af10:	28ca983a 	sll	r5,r5,r3
1000af14:	2c62b03a 	or	r17,r5,r17
1000af18:	8822c03a 	cmpne	r17,r17,zero
1000af1c:	8922b03a 	or	r17,r17,r4
1000af20:	0007883a 	mov	r3,zero
1000af24:	003f2f06 	br	1000abe4 <__alt_data_end+0xf800abe4>
1000af28:	01402034 	movhi	r5,128
1000af2c:	0007883a 	mov	r3,zero
1000af30:	297fffc4 	addi	r5,r5,-1
1000af34:	047ffe04 	movi	r17,-8
1000af38:	0401ffc4 	movi	r16,2047
1000af3c:	003e7306 	br	1000a90c <__alt_data_end+0xf800a90c>
1000af40:	2c62b03a 	or	r17,r5,r17
1000af44:	8822c03a 	cmpne	r17,r17,zero
1000af48:	0009883a 	mov	r4,zero
1000af4c:	003fa506 	br	1000ade4 <__alt_data_end+0xf800ade4>
1000af50:	400b883a 	mov	r5,r8
1000af54:	3023883a 	mov	r17,r6
1000af58:	003e0c06 	br	1000a78c <__alt_data_end+0xf800a78c>
1000af5c:	400b883a 	mov	r5,r8
1000af60:	3023883a 	mov	r17,r6
1000af64:	0401ffc4 	movi	r16,2047
1000af68:	003e0806 	br	1000a78c <__alt_data_end+0xf800a78c>
1000af6c:	21fff804 	addi	r7,r4,-32
1000af70:	02400804 	movi	r9,32
1000af74:	29ced83a 	srl	r7,r5,r7
1000af78:	22400a26 	beq	r4,r9,1000afa4 <__adddf3+0x894>
1000af7c:	02401004 	movi	r9,64
1000af80:	4909c83a 	sub	r4,r9,r4
1000af84:	290a983a 	sll	r5,r5,r4
1000af88:	2c62b03a 	or	r17,r5,r17
1000af8c:	8822c03a 	cmpne	r17,r17,zero
1000af90:	89e2b03a 	or	r17,r17,r7
1000af94:	0009883a 	mov	r4,zero
1000af98:	003f9206 	br	1000ade4 <__alt_data_end+0xf800ade4>
1000af9c:	000b883a 	mov	r5,zero
1000afa0:	003fdc06 	br	1000af14 <__alt_data_end+0xf800af14>
1000afa4:	000b883a 	mov	r5,zero
1000afa8:	003ff706 	br	1000af88 <__alt_data_end+0xf800af88>

1000afac <__divdf3>:
1000afac:	defff004 	addi	sp,sp,-64
1000afb0:	dc800815 	stw	r18,32(sp)
1000afb4:	2824d53a 	srli	r18,r5,20
1000afb8:	dd800c15 	stw	r22,48(sp)
1000afbc:	282cd7fa 	srli	r22,r5,31
1000afc0:	dc000615 	stw	r16,24(sp)
1000afc4:	04000434 	movhi	r16,16
1000afc8:	df000e15 	stw	fp,56(sp)
1000afcc:	dd000a15 	stw	r20,40(sp)
1000afd0:	dcc00915 	stw	r19,36(sp)
1000afd4:	dc400715 	stw	r17,28(sp)
1000afd8:	843fffc4 	addi	r16,r16,-1
1000afdc:	dfc00f15 	stw	ra,60(sp)
1000afe0:	ddc00d15 	stw	r23,52(sp)
1000afe4:	dd400b15 	stw	r21,44(sp)
1000afe8:	9481ffcc 	andi	r18,r18,2047
1000afec:	2029883a 	mov	r20,r4
1000aff0:	2027883a 	mov	r19,r4
1000aff4:	2c22703a 	and	r17,r5,r16
1000aff8:	b7003fcc 	andi	fp,r22,255
1000affc:	90005e26 	beq	r18,zero,1000b178 <__divdf3+0x1cc>
1000b000:	0081ffc4 	movi	r2,2047
1000b004:	90803526 	beq	r18,r2,1000b0dc <__divdf3+0x130>
1000b008:	8c000434 	orhi	r16,r17,16
1000b00c:	2004d77a 	srli	r2,r4,29
1000b010:	802090fa 	slli	r16,r16,3
1000b014:	202690fa 	slli	r19,r4,3
1000b018:	94bf0044 	addi	r18,r18,-1023
1000b01c:	80a2b03a 	or	r17,r16,r2
1000b020:	0029883a 	mov	r20,zero
1000b024:	0011883a 	mov	r8,zero
1000b028:	380ad53a 	srli	r5,r7,20
1000b02c:	382ed7fa 	srli	r23,r7,31
1000b030:	04000434 	movhi	r16,16
1000b034:	843fffc4 	addi	r16,r16,-1
1000b038:	2941ffcc 	andi	r5,r5,2047
1000b03c:	302b883a 	mov	r21,r6
1000b040:	3c20703a 	and	r16,r7,r16
1000b044:	ba403fcc 	andi	r9,r23,255
1000b048:	28006726 	beq	r5,zero,1000b1e8 <__divdf3+0x23c>
1000b04c:	0081ffc4 	movi	r2,2047
1000b050:	28805f26 	beq	r5,r2,1000b1d0 <__divdf3+0x224>
1000b054:	84000434 	orhi	r16,r16,16
1000b058:	3004d77a 	srli	r2,r6,29
1000b05c:	802090fa 	slli	r16,r16,3
1000b060:	302a90fa 	slli	r21,r6,3
1000b064:	297f0044 	addi	r5,r5,-1023
1000b068:	80a0b03a 	or	r16,r16,r2
1000b06c:	000f883a 	mov	r7,zero
1000b070:	3d06b03a 	or	r3,r7,r20
1000b074:	180690ba 	slli	r3,r3,2
1000b078:	00840074 	movhi	r2,4097
1000b07c:	10ac2704 	addi	r2,r2,-20324
1000b080:	1885883a 	add	r2,r3,r2
1000b084:	10800017 	ldw	r2,0(r2)
1000b088:	b5c8f03a 	xor	r4,r22,r23
1000b08c:	200d883a 	mov	r6,r4
1000b090:	25003fcc 	andi	r20,r4,255
1000b094:	9165c83a 	sub	r18,r18,r5
1000b098:	1000683a 	jmp	r2
1000b09c:	1000b2e4 	muli	zero,r2,715
1000b0a0:	1000b114 	ori	zero,r2,708
1000b0a4:	1000b2a8 	cmpgeui	zero,r2,714
1000b0a8:	1000b0f8 	rdprs	zero,r2,707
1000b0ac:	1000b2a8 	cmpgeui	zero,r2,714
1000b0b0:	1000b27c 	xorhi	zero,r2,713
1000b0b4:	1000b2a8 	cmpgeui	zero,r2,714
1000b0b8:	1000b0f8 	rdprs	zero,r2,707
1000b0bc:	1000b114 	ori	zero,r2,708
1000b0c0:	1000b114 	ori	zero,r2,708
1000b0c4:	1000b27c 	xorhi	zero,r2,713
1000b0c8:	1000b0f8 	rdprs	zero,r2,707
1000b0cc:	1000b108 	cmpgei	zero,r2,708
1000b0d0:	1000b108 	cmpgei	zero,r2,708
1000b0d4:	1000b108 	cmpgei	zero,r2,708
1000b0d8:	1000b2b8 	rdprs	zero,r2,714
1000b0dc:	8904b03a 	or	r2,r17,r4
1000b0e0:	1000631e 	bne	r2,zero,1000b270 <__divdf3+0x2c4>
1000b0e4:	05000204 	movi	r20,8
1000b0e8:	0023883a 	mov	r17,zero
1000b0ec:	0027883a 	mov	r19,zero
1000b0f0:	02000084 	movi	r8,2
1000b0f4:	003fcc06 	br	1000b028 <__alt_data_end+0xf800b028>
1000b0f8:	8023883a 	mov	r17,r16
1000b0fc:	a827883a 	mov	r19,r21
1000b100:	4839883a 	mov	fp,r9
1000b104:	3811883a 	mov	r8,r7
1000b108:	00800084 	movi	r2,2
1000b10c:	4081531e 	bne	r8,r2,1000b65c <__divdf3+0x6b0>
1000b110:	e029883a 	mov	r20,fp
1000b114:	a180004c 	andi	r6,r20,1
1000b118:	0201ffc4 	movi	r8,2047
1000b11c:	000b883a 	mov	r5,zero
1000b120:	0027883a 	mov	r19,zero
1000b124:	4010953a 	slli	r8,r8,20
1000b128:	30c03fcc 	andi	r3,r6,255
1000b12c:	04000434 	movhi	r16,16
1000b130:	180697fa 	slli	r3,r3,31
1000b134:	843fffc4 	addi	r16,r16,-1
1000b138:	2c20703a 	and	r16,r5,r16
1000b13c:	8220b03a 	or	r16,r16,r8
1000b140:	80c6b03a 	or	r3,r16,r3
1000b144:	9805883a 	mov	r2,r19
1000b148:	dfc00f17 	ldw	ra,60(sp)
1000b14c:	df000e17 	ldw	fp,56(sp)
1000b150:	ddc00d17 	ldw	r23,52(sp)
1000b154:	dd800c17 	ldw	r22,48(sp)
1000b158:	dd400b17 	ldw	r21,44(sp)
1000b15c:	dd000a17 	ldw	r20,40(sp)
1000b160:	dcc00917 	ldw	r19,36(sp)
1000b164:	dc800817 	ldw	r18,32(sp)
1000b168:	dc400717 	ldw	r17,28(sp)
1000b16c:	dc000617 	ldw	r16,24(sp)
1000b170:	dec01004 	addi	sp,sp,64
1000b174:	f800283a 	ret
1000b178:	8904b03a 	or	r2,r17,r4
1000b17c:	10003726 	beq	r2,zero,1000b25c <__divdf3+0x2b0>
1000b180:	88014d26 	beq	r17,zero,1000b6b8 <__divdf3+0x70c>
1000b184:	8809883a 	mov	r4,r17
1000b188:	d9800215 	stw	r6,8(sp)
1000b18c:	d9c00515 	stw	r7,20(sp)
1000b190:	000cea80 	call	1000cea8 <__clzsi2>
1000b194:	d9800217 	ldw	r6,8(sp)
1000b198:	d9c00517 	ldw	r7,20(sp)
1000b19c:	1007883a 	mov	r3,r2
1000b1a0:	01000a04 	movi	r4,40
1000b1a4:	1cfffe04 	addi	r19,r3,-8
1000b1a8:	20c9c83a 	sub	r4,r4,r3
1000b1ac:	8cca983a 	sll	r5,r17,r19
1000b1b0:	a108d83a 	srl	r4,r20,r4
1000b1b4:	a4e6983a 	sll	r19,r20,r19
1000b1b8:	2162b03a 	or	r17,r4,r5
1000b1bc:	04bf0344 	movi	r18,-1011
1000b1c0:	90e5c83a 	sub	r18,r18,r3
1000b1c4:	0029883a 	mov	r20,zero
1000b1c8:	0011883a 	mov	r8,zero
1000b1cc:	003f9606 	br	1000b028 <__alt_data_end+0xf800b028>
1000b1d0:	8184b03a 	or	r2,r16,r6
1000b1d4:	10001f1e 	bne	r2,zero,1000b254 <__divdf3+0x2a8>
1000b1d8:	0021883a 	mov	r16,zero
1000b1dc:	002b883a 	mov	r21,zero
1000b1e0:	01c00084 	movi	r7,2
1000b1e4:	003fa206 	br	1000b070 <__alt_data_end+0xf800b070>
1000b1e8:	8184b03a 	or	r2,r16,r6
1000b1ec:	10001526 	beq	r2,zero,1000b244 <__divdf3+0x298>
1000b1f0:	80013d26 	beq	r16,zero,1000b6e8 <__divdf3+0x73c>
1000b1f4:	8009883a 	mov	r4,r16
1000b1f8:	d9800215 	stw	r6,8(sp)
1000b1fc:	da000315 	stw	r8,12(sp)
1000b200:	da400415 	stw	r9,16(sp)
1000b204:	000cea80 	call	1000cea8 <__clzsi2>
1000b208:	d9800217 	ldw	r6,8(sp)
1000b20c:	da000317 	ldw	r8,12(sp)
1000b210:	da400417 	ldw	r9,16(sp)
1000b214:	1007883a 	mov	r3,r2
1000b218:	01000a04 	movi	r4,40
1000b21c:	1d7ffe04 	addi	r21,r3,-8
1000b220:	20c9c83a 	sub	r4,r4,r3
1000b224:	8560983a 	sll	r16,r16,r21
1000b228:	3108d83a 	srl	r4,r6,r4
1000b22c:	356a983a 	sll	r21,r6,r21
1000b230:	2420b03a 	or	r16,r4,r16
1000b234:	017f0344 	movi	r5,-1011
1000b238:	28cbc83a 	sub	r5,r5,r3
1000b23c:	000f883a 	mov	r7,zero
1000b240:	003f8b06 	br	1000b070 <__alt_data_end+0xf800b070>
1000b244:	0021883a 	mov	r16,zero
1000b248:	002b883a 	mov	r21,zero
1000b24c:	01c00044 	movi	r7,1
1000b250:	003f8706 	br	1000b070 <__alt_data_end+0xf800b070>
1000b254:	01c000c4 	movi	r7,3
1000b258:	003f8506 	br	1000b070 <__alt_data_end+0xf800b070>
1000b25c:	05000104 	movi	r20,4
1000b260:	0023883a 	mov	r17,zero
1000b264:	0027883a 	mov	r19,zero
1000b268:	02000044 	movi	r8,1
1000b26c:	003f6e06 	br	1000b028 <__alt_data_end+0xf800b028>
1000b270:	05000304 	movi	r20,12
1000b274:	020000c4 	movi	r8,3
1000b278:	003f6b06 	br	1000b028 <__alt_data_end+0xf800b028>
1000b27c:	01400434 	movhi	r5,16
1000b280:	000d883a 	mov	r6,zero
1000b284:	297fffc4 	addi	r5,r5,-1
1000b288:	04ffffc4 	movi	r19,-1
1000b28c:	0201ffc4 	movi	r8,2047
1000b290:	003fa406 	br	1000b124 <__alt_data_end+0xf800b124>
1000b294:	043f0084 	movi	r16,-1022
1000b298:	84a1c83a 	sub	r16,r16,r18
1000b29c:	00800e04 	movi	r2,56
1000b2a0:	14014d0e 	bge	r2,r16,1000b7d8 <__divdf3+0x82c>
1000b2a4:	a180004c 	andi	r6,r20,1
1000b2a8:	0011883a 	mov	r8,zero
1000b2ac:	000b883a 	mov	r5,zero
1000b2b0:	0027883a 	mov	r19,zero
1000b2b4:	003f9b06 	br	1000b124 <__alt_data_end+0xf800b124>
1000b2b8:	8880022c 	andhi	r2,r17,8
1000b2bc:	1000f026 	beq	r2,zero,1000b680 <__divdf3+0x6d4>
1000b2c0:	8080022c 	andhi	r2,r16,8
1000b2c4:	1000ee1e 	bne	r2,zero,1000b680 <__divdf3+0x6d4>
1000b2c8:	00800434 	movhi	r2,16
1000b2cc:	81400234 	orhi	r5,r16,8
1000b2d0:	10bfffc4 	addi	r2,r2,-1
1000b2d4:	b80d883a 	mov	r6,r23
1000b2d8:	288a703a 	and	r5,r5,r2
1000b2dc:	a827883a 	mov	r19,r21
1000b2e0:	003fea06 	br	1000b28c <__alt_data_end+0xf800b28c>
1000b2e4:	84411c36 	bltu	r16,r17,1000b758 <__divdf3+0x7ac>
1000b2e8:	8c011a26 	beq	r17,r16,1000b754 <__divdf3+0x7a8>
1000b2ec:	94bfffc4 	addi	r18,r18,-1
1000b2f0:	dcc00015 	stw	r19,0(sp)
1000b2f4:	8811883a 	mov	r8,r17
1000b2f8:	002d883a 	mov	r22,zero
1000b2fc:	a80cd63a 	srli	r6,r21,24
1000b300:	8020923a 	slli	r16,r16,8
1000b304:	a82a923a 	slli	r21,r21,8
1000b308:	4009883a 	mov	r4,r8
1000b30c:	342eb03a 	or	r23,r6,r16
1000b310:	dd400115 	stw	r21,4(sp)
1000b314:	b82ad43a 	srli	r21,r23,16
1000b318:	da000315 	stw	r8,12(sp)
1000b31c:	bcffffcc 	andi	r19,r23,65535
1000b320:	a80b883a 	mov	r5,r21
1000b324:	000a7000 	call	1000a700 <__udivsi3>
1000b328:	1009883a 	mov	r4,r2
1000b32c:	980b883a 	mov	r5,r19
1000b330:	1023883a 	mov	r17,r2
1000b334:	00005a80 	call	100005a8 <__mulsi3>
1000b338:	da000317 	ldw	r8,12(sp)
1000b33c:	a80b883a 	mov	r5,r21
1000b340:	1039883a 	mov	fp,r2
1000b344:	4009883a 	mov	r4,r8
1000b348:	000a7080 	call	1000a708 <__umodsi3>
1000b34c:	d8c00017 	ldw	r3,0(sp)
1000b350:	1004943a 	slli	r2,r2,16
1000b354:	1810d43a 	srli	r8,r3,16
1000b358:	120eb03a 	or	r7,r2,r8
1000b35c:	3f00062e 	bgeu	r7,fp,1000b378 <__divdf3+0x3cc>
1000b360:	3dcf883a 	add	r7,r7,r23
1000b364:	88bfffc4 	addi	r2,r17,-1
1000b368:	3dc10a36 	bltu	r7,r23,1000b794 <__divdf3+0x7e8>
1000b36c:	3f01092e 	bgeu	r7,fp,1000b794 <__divdf3+0x7e8>
1000b370:	8c7fff84 	addi	r17,r17,-2
1000b374:	3dcf883a 	add	r7,r7,r23
1000b378:	3f39c83a 	sub	fp,r7,fp
1000b37c:	e009883a 	mov	r4,fp
1000b380:	a80b883a 	mov	r5,r21
1000b384:	000a7000 	call	1000a700 <__udivsi3>
1000b388:	1009883a 	mov	r4,r2
1000b38c:	980b883a 	mov	r5,r19
1000b390:	1021883a 	mov	r16,r2
1000b394:	00005a80 	call	100005a8 <__mulsi3>
1000b398:	e009883a 	mov	r4,fp
1000b39c:	a80b883a 	mov	r5,r21
1000b3a0:	d8800315 	stw	r2,12(sp)
1000b3a4:	000a7080 	call	1000a708 <__umodsi3>
1000b3a8:	d9000017 	ldw	r4,0(sp)
1000b3ac:	1004943a 	slli	r2,r2,16
1000b3b0:	da000317 	ldw	r8,12(sp)
1000b3b4:	20ffffcc 	andi	r3,r4,65535
1000b3b8:	10ceb03a 	or	r7,r2,r3
1000b3bc:	3a00062e 	bgeu	r7,r8,1000b3d8 <__divdf3+0x42c>
1000b3c0:	3dcf883a 	add	r7,r7,r23
1000b3c4:	80bfffc4 	addi	r2,r16,-1
1000b3c8:	3dc0f036 	bltu	r7,r23,1000b78c <__divdf3+0x7e0>
1000b3cc:	3a00ef2e 	bgeu	r7,r8,1000b78c <__divdf3+0x7e0>
1000b3d0:	843fff84 	addi	r16,r16,-2
1000b3d4:	3dcf883a 	add	r7,r7,r23
1000b3d8:	d8c00117 	ldw	r3,4(sp)
1000b3dc:	8822943a 	slli	r17,r17,16
1000b3e0:	3a0fc83a 	sub	r7,r7,r8
1000b3e4:	1806d43a 	srli	r3,r3,16
1000b3e8:	8462b03a 	or	r17,r16,r17
1000b3ec:	8affffcc 	andi	r11,r17,65535
1000b3f0:	d8c00015 	stw	r3,0(sp)
1000b3f4:	d8c00117 	ldw	r3,4(sp)
1000b3f8:	8820d43a 	srli	r16,r17,16
1000b3fc:	5809883a 	mov	r4,r11
1000b400:	1f3fffcc 	andi	fp,r3,65535
1000b404:	e00b883a 	mov	r5,fp
1000b408:	d9c00515 	stw	r7,20(sp)
1000b40c:	dac00215 	stw	r11,8(sp)
1000b410:	00005a80 	call	100005a8 <__mulsi3>
1000b414:	8009883a 	mov	r4,r16
1000b418:	e00b883a 	mov	r5,fp
1000b41c:	d8800415 	stw	r2,16(sp)
1000b420:	00005a80 	call	100005a8 <__mulsi3>
1000b424:	d9400017 	ldw	r5,0(sp)
1000b428:	8009883a 	mov	r4,r16
1000b42c:	d8800315 	stw	r2,12(sp)
1000b430:	00005a80 	call	100005a8 <__mulsi3>
1000b434:	dac00217 	ldw	r11,8(sp)
1000b438:	d9400017 	ldw	r5,0(sp)
1000b43c:	d8800215 	stw	r2,8(sp)
1000b440:	5809883a 	mov	r4,r11
1000b444:	00005a80 	call	100005a8 <__mulsi3>
1000b448:	da400417 	ldw	r9,16(sp)
1000b44c:	da800317 	ldw	r10,12(sp)
1000b450:	d9c00517 	ldw	r7,20(sp)
1000b454:	480ad43a 	srli	r5,r9,16
1000b458:	5085883a 	add	r2,r10,r2
1000b45c:	db000217 	ldw	r12,8(sp)
1000b460:	1151883a 	add	r8,r2,r5
1000b464:	4280022e 	bgeu	r8,r10,1000b470 <__divdf3+0x4c4>
1000b468:	00800074 	movhi	r2,1
1000b46c:	6099883a 	add	r12,r12,r2
1000b470:	400ad43a 	srli	r5,r8,16
1000b474:	4010943a 	slli	r8,r8,16
1000b478:	4c3fffcc 	andi	r16,r9,65535
1000b47c:	6149883a 	add	r4,r12,r5
1000b480:	4411883a 	add	r8,r8,r16
1000b484:	3900a736 	bltu	r7,r4,1000b724 <__divdf3+0x778>
1000b488:	3900c426 	beq	r7,r4,1000b79c <__divdf3+0x7f0>
1000b48c:	3909c83a 	sub	r4,r7,r4
1000b490:	b221c83a 	sub	r16,r22,r8
1000b494:	b42d803a 	cmpltu	r22,r22,r16
1000b498:	25adc83a 	sub	r22,r4,r22
1000b49c:	b5c0c626 	beq	r22,r23,1000b7b8 <__divdf3+0x80c>
1000b4a0:	b009883a 	mov	r4,r22
1000b4a4:	a80b883a 	mov	r5,r21
1000b4a8:	000a7000 	call	1000a700 <__udivsi3>
1000b4ac:	1009883a 	mov	r4,r2
1000b4b0:	980b883a 	mov	r5,r19
1000b4b4:	d8800315 	stw	r2,12(sp)
1000b4b8:	00005a80 	call	100005a8 <__mulsi3>
1000b4bc:	a80b883a 	mov	r5,r21
1000b4c0:	b009883a 	mov	r4,r22
1000b4c4:	d8800415 	stw	r2,16(sp)
1000b4c8:	000a7080 	call	1000a708 <__umodsi3>
1000b4cc:	1004943a 	slli	r2,r2,16
1000b4d0:	800ed43a 	srli	r7,r16,16
1000b4d4:	da400417 	ldw	r9,16(sp)
1000b4d8:	da000317 	ldw	r8,12(sp)
1000b4dc:	11cab03a 	or	r5,r2,r7
1000b4e0:	2a40062e 	bgeu	r5,r9,1000b4fc <__divdf3+0x550>
1000b4e4:	2dcb883a 	add	r5,r5,r23
1000b4e8:	40bfffc4 	addi	r2,r8,-1
1000b4ec:	2dc0b436 	bltu	r5,r23,1000b7c0 <__divdf3+0x814>
1000b4f0:	2a40b32e 	bgeu	r5,r9,1000b7c0 <__divdf3+0x814>
1000b4f4:	423fff84 	addi	r8,r8,-2
1000b4f8:	2dcb883a 	add	r5,r5,r23
1000b4fc:	2a6dc83a 	sub	r22,r5,r9
1000b500:	b009883a 	mov	r4,r22
1000b504:	a80b883a 	mov	r5,r21
1000b508:	da000315 	stw	r8,12(sp)
1000b50c:	000a7000 	call	1000a700 <__udivsi3>
1000b510:	980b883a 	mov	r5,r19
1000b514:	1009883a 	mov	r4,r2
1000b518:	d8800415 	stw	r2,16(sp)
1000b51c:	00005a80 	call	100005a8 <__mulsi3>
1000b520:	b009883a 	mov	r4,r22
1000b524:	a80b883a 	mov	r5,r21
1000b528:	1027883a 	mov	r19,r2
1000b52c:	000a7080 	call	1000a708 <__umodsi3>
1000b530:	1004943a 	slli	r2,r2,16
1000b534:	843fffcc 	andi	r16,r16,65535
1000b538:	da000317 	ldw	r8,12(sp)
1000b53c:	140eb03a 	or	r7,r2,r16
1000b540:	da400417 	ldw	r9,16(sp)
1000b544:	3cc0062e 	bgeu	r7,r19,1000b560 <__divdf3+0x5b4>
1000b548:	3dcf883a 	add	r7,r7,r23
1000b54c:	48bfffc4 	addi	r2,r9,-1
1000b550:	3dc09d36 	bltu	r7,r23,1000b7c8 <__divdf3+0x81c>
1000b554:	3cc09c2e 	bgeu	r7,r19,1000b7c8 <__divdf3+0x81c>
1000b558:	4a7fff84 	addi	r9,r9,-2
1000b55c:	3dcf883a 	add	r7,r7,r23
1000b560:	4010943a 	slli	r8,r8,16
1000b564:	3cebc83a 	sub	r21,r7,r19
1000b568:	e00b883a 	mov	r5,fp
1000b56c:	4a26b03a 	or	r19,r9,r8
1000b570:	99ffffcc 	andi	r7,r19,65535
1000b574:	9820d43a 	srli	r16,r19,16
1000b578:	3809883a 	mov	r4,r7
1000b57c:	d9c00515 	stw	r7,20(sp)
1000b580:	00005a80 	call	100005a8 <__mulsi3>
1000b584:	8009883a 	mov	r4,r16
1000b588:	e00b883a 	mov	r5,fp
1000b58c:	102d883a 	mov	r22,r2
1000b590:	00005a80 	call	100005a8 <__mulsi3>
1000b594:	d9400017 	ldw	r5,0(sp)
1000b598:	8009883a 	mov	r4,r16
1000b59c:	1039883a 	mov	fp,r2
1000b5a0:	00005a80 	call	100005a8 <__mulsi3>
1000b5a4:	d9c00517 	ldw	r7,20(sp)
1000b5a8:	d9400017 	ldw	r5,0(sp)
1000b5ac:	1021883a 	mov	r16,r2
1000b5b0:	3809883a 	mov	r4,r7
1000b5b4:	00005a80 	call	100005a8 <__mulsi3>
1000b5b8:	b008d43a 	srli	r4,r22,16
1000b5bc:	e085883a 	add	r2,fp,r2
1000b5c0:	1109883a 	add	r4,r2,r4
1000b5c4:	2700022e 	bgeu	r4,fp,1000b5d0 <__divdf3+0x624>
1000b5c8:	00800074 	movhi	r2,1
1000b5cc:	80a1883a 	add	r16,r16,r2
1000b5d0:	200ad43a 	srli	r5,r4,16
1000b5d4:	2008943a 	slli	r4,r4,16
1000b5d8:	b5bfffcc 	andi	r22,r22,65535
1000b5dc:	8145883a 	add	r2,r16,r5
1000b5e0:	2589883a 	add	r4,r4,r22
1000b5e4:	a8802c36 	bltu	r21,r2,1000b698 <__divdf3+0x6ec>
1000b5e8:	a880a426 	beq	r21,r2,1000b87c <__divdf3+0x8d0>
1000b5ec:	9cc00054 	ori	r19,r19,1
1000b5f0:	9200ffc4 	addi	r8,r18,1023
1000b5f4:	023f270e 	bge	zero,r8,1000b294 <__alt_data_end+0xf800b294>
1000b5f8:	988001cc 	andi	r2,r19,7
1000b5fc:	10000726 	beq	r2,zero,1000b61c <__divdf3+0x670>
1000b600:	990003cc 	andi	r4,r19,15
1000b604:	00800104 	movi	r2,4
1000b608:	20800426 	beq	r4,r2,1000b61c <__divdf3+0x670>
1000b60c:	9885883a 	add	r2,r19,r2
1000b610:	14e7803a 	cmpltu	r19,r2,r19
1000b614:	8ce3883a 	add	r17,r17,r19
1000b618:	1027883a 	mov	r19,r2
1000b61c:	8880402c 	andhi	r2,r17,256
1000b620:	10000426 	beq	r2,zero,1000b634 <__divdf3+0x688>
1000b624:	00bfc034 	movhi	r2,65280
1000b628:	10bfffc4 	addi	r2,r2,-1
1000b62c:	92010004 	addi	r8,r18,1024
1000b630:	88a2703a 	and	r17,r17,r2
1000b634:	0081ff84 	movi	r2,2046
1000b638:	123eb616 	blt	r2,r8,1000b114 <__alt_data_end+0xf800b114>
1000b63c:	9826d0fa 	srli	r19,r19,3
1000b640:	8804977a 	slli	r2,r17,29
1000b644:	8820927a 	slli	r16,r17,9
1000b648:	4201ffcc 	andi	r8,r8,2047
1000b64c:	14e6b03a 	or	r19,r2,r19
1000b650:	800ad33a 	srli	r5,r16,12
1000b654:	a180004c 	andi	r6,r20,1
1000b658:	003eb206 	br	1000b124 <__alt_data_end+0xf800b124>
1000b65c:	008000c4 	movi	r2,3
1000b660:	4080ac26 	beq	r8,r2,1000b914 <__divdf3+0x968>
1000b664:	00800044 	movi	r2,1
1000b668:	4080591e 	bne	r8,r2,1000b7d0 <__divdf3+0x824>
1000b66c:	e00d883a 	mov	r6,fp
1000b670:	0011883a 	mov	r8,zero
1000b674:	000b883a 	mov	r5,zero
1000b678:	0027883a 	mov	r19,zero
1000b67c:	003ea906 	br	1000b124 <__alt_data_end+0xf800b124>
1000b680:	00800434 	movhi	r2,16
1000b684:	89400234 	orhi	r5,r17,8
1000b688:	10bfffc4 	addi	r2,r2,-1
1000b68c:	b00d883a 	mov	r6,r22
1000b690:	288a703a 	and	r5,r5,r2
1000b694:	003efd06 	br	1000b28c <__alt_data_end+0xf800b28c>
1000b698:	adcf883a 	add	r7,r21,r23
1000b69c:	997fffc4 	addi	r5,r19,-1
1000b6a0:	3dc0412e 	bgeu	r7,r23,1000b7a8 <__divdf3+0x7fc>
1000b6a4:	2827883a 	mov	r19,r5
1000b6a8:	38bfd01e 	bne	r7,r2,1000b5ec <__alt_data_end+0xf800b5ec>
1000b6ac:	d8c00117 	ldw	r3,4(sp)
1000b6b0:	193fce1e 	bne	r3,r4,1000b5ec <__alt_data_end+0xf800b5ec>
1000b6b4:	003fce06 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000b6b8:	d9800215 	stw	r6,8(sp)
1000b6bc:	d9c00515 	stw	r7,20(sp)
1000b6c0:	000cea80 	call	1000cea8 <__clzsi2>
1000b6c4:	10c00804 	addi	r3,r2,32
1000b6c8:	010009c4 	movi	r4,39
1000b6cc:	d9800217 	ldw	r6,8(sp)
1000b6d0:	d9c00517 	ldw	r7,20(sp)
1000b6d4:	20feb20e 	bge	r4,r3,1000b1a0 <__alt_data_end+0xf800b1a0>
1000b6d8:	117ffe04 	addi	r5,r2,-8
1000b6dc:	a162983a 	sll	r17,r20,r5
1000b6e0:	0027883a 	mov	r19,zero
1000b6e4:	003eb506 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b6e8:	3009883a 	mov	r4,r6
1000b6ec:	d9800215 	stw	r6,8(sp)
1000b6f0:	da000315 	stw	r8,12(sp)
1000b6f4:	da400415 	stw	r9,16(sp)
1000b6f8:	000cea80 	call	1000cea8 <__clzsi2>
1000b6fc:	10c00804 	addi	r3,r2,32
1000b700:	010009c4 	movi	r4,39
1000b704:	d9800217 	ldw	r6,8(sp)
1000b708:	da000317 	ldw	r8,12(sp)
1000b70c:	da400417 	ldw	r9,16(sp)
1000b710:	20fec10e 	bge	r4,r3,1000b218 <__alt_data_end+0xf800b218>
1000b714:	10bffe04 	addi	r2,r2,-8
1000b718:	a8a0983a 	sll	r16,r21,r2
1000b71c:	002b883a 	mov	r21,zero
1000b720:	003ec406 	br	1000b234 <__alt_data_end+0xf800b234>
1000b724:	d8c00117 	ldw	r3,4(sp)
1000b728:	b0ed883a 	add	r22,r22,r3
1000b72c:	b0c5803a 	cmpltu	r2,r22,r3
1000b730:	15c5883a 	add	r2,r2,r23
1000b734:	11cf883a 	add	r7,r2,r7
1000b738:	88bfffc4 	addi	r2,r17,-1
1000b73c:	b9c00d2e 	bgeu	r23,r7,1000b774 <__divdf3+0x7c8>
1000b740:	39003f36 	bltu	r7,r4,1000b840 <__divdf3+0x894>
1000b744:	21c06a26 	beq	r4,r7,1000b8f0 <__divdf3+0x944>
1000b748:	3909c83a 	sub	r4,r7,r4
1000b74c:	1023883a 	mov	r17,r2
1000b750:	003f4f06 	br	1000b490 <__alt_data_end+0xf800b490>
1000b754:	9d7ee536 	bltu	r19,r21,1000b2ec <__alt_data_end+0xf800b2ec>
1000b758:	982ed07a 	srli	r23,r19,1
1000b75c:	880497fa 	slli	r2,r17,31
1000b760:	8810d07a 	srli	r8,r17,1
1000b764:	982c97fa 	slli	r22,r19,31
1000b768:	b884b03a 	or	r2,r23,r2
1000b76c:	d8800015 	stw	r2,0(sp)
1000b770:	003ee206 	br	1000b2fc <__alt_data_end+0xf800b2fc>
1000b774:	3dfff41e 	bne	r7,r23,1000b748 <__alt_data_end+0xf800b748>
1000b778:	d8c00117 	ldw	r3,4(sp)
1000b77c:	b0fff02e 	bgeu	r22,r3,1000b740 <__alt_data_end+0xf800b740>
1000b780:	b909c83a 	sub	r4,r23,r4
1000b784:	1023883a 	mov	r17,r2
1000b788:	003f4106 	br	1000b490 <__alt_data_end+0xf800b490>
1000b78c:	1021883a 	mov	r16,r2
1000b790:	003f1106 	br	1000b3d8 <__alt_data_end+0xf800b3d8>
1000b794:	1023883a 	mov	r17,r2
1000b798:	003ef706 	br	1000b378 <__alt_data_end+0xf800b378>
1000b79c:	b23fe136 	bltu	r22,r8,1000b724 <__alt_data_end+0xf800b724>
1000b7a0:	0009883a 	mov	r4,zero
1000b7a4:	003f3a06 	br	1000b490 <__alt_data_end+0xf800b490>
1000b7a8:	38802c36 	bltu	r7,r2,1000b85c <__divdf3+0x8b0>
1000b7ac:	11c05326 	beq	r2,r7,1000b8fc <__divdf3+0x950>
1000b7b0:	2827883a 	mov	r19,r5
1000b7b4:	003f8d06 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000b7b8:	04ffffc4 	movi	r19,-1
1000b7bc:	003f8c06 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000b7c0:	1011883a 	mov	r8,r2
1000b7c4:	003f4d06 	br	1000b4fc <__alt_data_end+0xf800b4fc>
1000b7c8:	1013883a 	mov	r9,r2
1000b7cc:	003f6406 	br	1000b560 <__alt_data_end+0xf800b560>
1000b7d0:	e029883a 	mov	r20,fp
1000b7d4:	003f8606 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000b7d8:	008007c4 	movi	r2,31
1000b7dc:	14002a16 	blt	r2,r16,1000b888 <__divdf3+0x8dc>
1000b7e0:	91410784 	addi	r5,r18,1054
1000b7e4:	9c0cd83a 	srl	r6,r19,r16
1000b7e8:	8948983a 	sll	r4,r17,r5
1000b7ec:	9944983a 	sll	r2,r19,r5
1000b7f0:	8c20d83a 	srl	r16,r17,r16
1000b7f4:	3108b03a 	or	r4,r6,r4
1000b7f8:	1004c03a 	cmpne	r2,r2,zero
1000b7fc:	2084b03a 	or	r2,r4,r2
1000b800:	110001cc 	andi	r4,r2,7
1000b804:	20000726 	beq	r4,zero,1000b824 <__divdf3+0x878>
1000b808:	114003cc 	andi	r5,r2,15
1000b80c:	01000104 	movi	r4,4
1000b810:	29000426 	beq	r5,r4,1000b824 <__divdf3+0x878>
1000b814:	11000104 	addi	r4,r2,4
1000b818:	2085803a 	cmpltu	r2,r4,r2
1000b81c:	80a1883a 	add	r16,r16,r2
1000b820:	2005883a 	mov	r2,r4
1000b824:	8100202c 	andhi	r4,r16,128
1000b828:	20002d26 	beq	r4,zero,1000b8e0 <__divdf3+0x934>
1000b82c:	a180004c 	andi	r6,r20,1
1000b830:	02000044 	movi	r8,1
1000b834:	000b883a 	mov	r5,zero
1000b838:	0027883a 	mov	r19,zero
1000b83c:	003e3906 	br	1000b124 <__alt_data_end+0xf800b124>
1000b840:	d8c00117 	ldw	r3,4(sp)
1000b844:	8c7fff84 	addi	r17,r17,-2
1000b848:	b0ed883a 	add	r22,r22,r3
1000b84c:	b0c5803a 	cmpltu	r2,r22,r3
1000b850:	15c5883a 	add	r2,r2,r23
1000b854:	11cf883a 	add	r7,r2,r7
1000b858:	003f0c06 	br	1000b48c <__alt_data_end+0xf800b48c>
1000b85c:	d8c00117 	ldw	r3,4(sp)
1000b860:	997fff84 	addi	r5,r19,-2
1000b864:	18d1883a 	add	r8,r3,r3
1000b868:	40c7803a 	cmpltu	r3,r8,r3
1000b86c:	1dcd883a 	add	r6,r3,r23
1000b870:	398f883a 	add	r7,r7,r6
1000b874:	da000115 	stw	r8,4(sp)
1000b878:	003f8a06 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000b87c:	203f861e 	bne	r4,zero,1000b698 <__alt_data_end+0xf800b698>
1000b880:	d8000115 	stw	zero,4(sp)
1000b884:	003f8906 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000b888:	00bef884 	movi	r2,-1054
1000b88c:	1485c83a 	sub	r2,r2,r18
1000b890:	01000804 	movi	r4,32
1000b894:	8884d83a 	srl	r2,r17,r2
1000b898:	81001c26 	beq	r16,r4,1000b90c <__divdf3+0x960>
1000b89c:	91010f84 	addi	r4,r18,1086
1000b8a0:	8908983a 	sll	r4,r17,r4
1000b8a4:	24c8b03a 	or	r4,r4,r19
1000b8a8:	2008c03a 	cmpne	r4,r4,zero
1000b8ac:	2084b03a 	or	r2,r4,r2
1000b8b0:	140001cc 	andi	r16,r2,7
1000b8b4:	8000061e 	bne	r16,zero,1000b8d0 <__divdf3+0x924>
1000b8b8:	000b883a 	mov	r5,zero
1000b8bc:	1004d0fa 	srli	r2,r2,3
1000b8c0:	a180004c 	andi	r6,r20,1
1000b8c4:	0011883a 	mov	r8,zero
1000b8c8:	1426b03a 	or	r19,r2,r16
1000b8cc:	003e1506 	br	1000b124 <__alt_data_end+0xf800b124>
1000b8d0:	114003cc 	andi	r5,r2,15
1000b8d4:	01000104 	movi	r4,4
1000b8d8:	0021883a 	mov	r16,zero
1000b8dc:	293fcd1e 	bne	r5,r4,1000b814 <__alt_data_end+0xf800b814>
1000b8e0:	800a927a 	slli	r5,r16,9
1000b8e4:	8020977a 	slli	r16,r16,29
1000b8e8:	280ad33a 	srli	r5,r5,12
1000b8ec:	003ff306 	br	1000b8bc <__alt_data_end+0xf800b8bc>
1000b8f0:	b23fd336 	bltu	r22,r8,1000b840 <__alt_data_end+0xf800b840>
1000b8f4:	1023883a 	mov	r17,r2
1000b8f8:	003fa906 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000b8fc:	d8c00117 	ldw	r3,4(sp)
1000b900:	193fd636 	bltu	r3,r4,1000b85c <__alt_data_end+0xf800b85c>
1000b904:	2827883a 	mov	r19,r5
1000b908:	003f6806 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000b90c:	0009883a 	mov	r4,zero
1000b910:	003fe406 	br	1000b8a4 <__alt_data_end+0xf800b8a4>
1000b914:	00800434 	movhi	r2,16
1000b918:	89400234 	orhi	r5,r17,8
1000b91c:	10bfffc4 	addi	r2,r2,-1
1000b920:	e00d883a 	mov	r6,fp
1000b924:	288a703a 	and	r5,r5,r2
1000b928:	003e5806 	br	1000b28c <__alt_data_end+0xf800b28c>

1000b92c <__eqdf2>:
1000b92c:	2804d53a 	srli	r2,r5,20
1000b930:	3806d53a 	srli	r3,r7,20
1000b934:	02000434 	movhi	r8,16
1000b938:	423fffc4 	addi	r8,r8,-1
1000b93c:	1081ffcc 	andi	r2,r2,2047
1000b940:	0241ffc4 	movi	r9,2047
1000b944:	2a14703a 	and	r10,r5,r8
1000b948:	18c1ffcc 	andi	r3,r3,2047
1000b94c:	3a10703a 	and	r8,r7,r8
1000b950:	280ad7fa 	srli	r5,r5,31
1000b954:	380ed7fa 	srli	r7,r7,31
1000b958:	12400f26 	beq	r2,r9,1000b998 <__eqdf2+0x6c>
1000b95c:	0241ffc4 	movi	r9,2047
1000b960:	1a400326 	beq	r3,r9,1000b970 <__eqdf2+0x44>
1000b964:	10c00526 	beq	r2,r3,1000b97c <__eqdf2+0x50>
1000b968:	00800044 	movi	r2,1
1000b96c:	f800283a 	ret
1000b970:	4192b03a 	or	r9,r8,r6
1000b974:	483ffc1e 	bne	r9,zero,1000b968 <__alt_data_end+0xf800b968>
1000b978:	10fffb1e 	bne	r2,r3,1000b968 <__alt_data_end+0xf800b968>
1000b97c:	523ffa1e 	bne	r10,r8,1000b968 <__alt_data_end+0xf800b968>
1000b980:	21bff91e 	bne	r4,r6,1000b968 <__alt_data_end+0xf800b968>
1000b984:	29c00826 	beq	r5,r7,1000b9a8 <__eqdf2+0x7c>
1000b988:	103ff71e 	bne	r2,zero,1000b968 <__alt_data_end+0xf800b968>
1000b98c:	5104b03a 	or	r2,r10,r4
1000b990:	1004c03a 	cmpne	r2,r2,zero
1000b994:	f800283a 	ret
1000b998:	5112b03a 	or	r9,r10,r4
1000b99c:	483fef26 	beq	r9,zero,1000b95c <__alt_data_end+0xf800b95c>
1000b9a0:	00800044 	movi	r2,1
1000b9a4:	f800283a 	ret
1000b9a8:	0005883a 	mov	r2,zero
1000b9ac:	f800283a 	ret

1000b9b0 <__gedf2>:
1000b9b0:	2804d53a 	srli	r2,r5,20
1000b9b4:	3806d53a 	srli	r3,r7,20
1000b9b8:	02000434 	movhi	r8,16
1000b9bc:	423fffc4 	addi	r8,r8,-1
1000b9c0:	0241ffc4 	movi	r9,2047
1000b9c4:	1081ffcc 	andi	r2,r2,2047
1000b9c8:	2a14703a 	and	r10,r5,r8
1000b9cc:	1a46703a 	and	r3,r3,r9
1000b9d0:	3a10703a 	and	r8,r7,r8
1000b9d4:	280ad7fa 	srli	r5,r5,31
1000b9d8:	380ed7fa 	srli	r7,r7,31
1000b9dc:	12400b26 	beq	r2,r9,1000ba0c <__gedf2+0x5c>
1000b9e0:	1a401626 	beq	r3,r9,1000ba3c <__gedf2+0x8c>
1000b9e4:	10000c1e 	bne	r2,zero,1000ba18 <__gedf2+0x68>
1000b9e8:	5112b03a 	or	r9,r10,r4
1000b9ec:	4813003a 	cmpeq	r9,r9,zero
1000b9f0:	4817883a 	mov	r11,r9
1000b9f4:	18000c1e 	bne	r3,zero,1000ba28 <__gedf2+0x78>
1000b9f8:	4198b03a 	or	r12,r8,r6
1000b9fc:	60000a1e 	bne	r12,zero,1000ba28 <__gedf2+0x78>
1000ba00:	48001326 	beq	r9,zero,1000ba50 <__gedf2+0xa0>
1000ba04:	0005883a 	mov	r2,zero
1000ba08:	f800283a 	ret
1000ba0c:	5112b03a 	or	r9,r10,r4
1000ba10:	4800191e 	bne	r9,zero,1000ba78 <__gedf2+0xc8>
1000ba14:	18800926 	beq	r3,r2,1000ba3c <__gedf2+0x8c>
1000ba18:	18000b1e 	bne	r3,zero,1000ba48 <__gedf2+0x98>
1000ba1c:	4192b03a 	or	r9,r8,r6
1000ba20:	0017883a 	mov	r11,zero
1000ba24:	48000a26 	beq	r9,zero,1000ba50 <__gedf2+0xa0>
1000ba28:	39c03fcc 	andi	r7,r7,255
1000ba2c:	58000726 	beq	r11,zero,1000ba4c <__gedf2+0x9c>
1000ba30:	3800081e 	bne	r7,zero,1000ba54 <__gedf2+0xa4>
1000ba34:	00bfffc4 	movi	r2,-1
1000ba38:	f800283a 	ret
1000ba3c:	4192b03a 	or	r9,r8,r6
1000ba40:	48000d1e 	bne	r9,zero,1000ba78 <__gedf2+0xc8>
1000ba44:	103fe826 	beq	r2,zero,1000b9e8 <__alt_data_end+0xf800b9e8>
1000ba48:	39c03fcc 	andi	r7,r7,255
1000ba4c:	29c00326 	beq	r5,r7,1000ba5c <__gedf2+0xac>
1000ba50:	283ff81e 	bne	r5,zero,1000ba34 <__alt_data_end+0xf800ba34>
1000ba54:	00800044 	movi	r2,1
1000ba58:	f800283a 	ret
1000ba5c:	18bffc16 	blt	r3,r2,1000ba50 <__alt_data_end+0xf800ba50>
1000ba60:	10c00316 	blt	r2,r3,1000ba70 <__gedf2+0xc0>
1000ba64:	42bffa36 	bltu	r8,r10,1000ba50 <__alt_data_end+0xf800ba50>
1000ba68:	52000526 	beq	r10,r8,1000ba80 <__gedf2+0xd0>
1000ba6c:	523fe52e 	bgeu	r10,r8,1000ba04 <__alt_data_end+0xf800ba04>
1000ba70:	283ff026 	beq	r5,zero,1000ba34 <__alt_data_end+0xf800ba34>
1000ba74:	003ff706 	br	1000ba54 <__alt_data_end+0xf800ba54>
1000ba78:	00bfff84 	movi	r2,-2
1000ba7c:	f800283a 	ret
1000ba80:	313ff336 	bltu	r6,r4,1000ba50 <__alt_data_end+0xf800ba50>
1000ba84:	21bfdf2e 	bgeu	r4,r6,1000ba04 <__alt_data_end+0xf800ba04>
1000ba88:	283fea26 	beq	r5,zero,1000ba34 <__alt_data_end+0xf800ba34>
1000ba8c:	003ff106 	br	1000ba54 <__alt_data_end+0xf800ba54>

1000ba90 <__ledf2>:
1000ba90:	2804d53a 	srli	r2,r5,20
1000ba94:	3810d53a 	srli	r8,r7,20
1000ba98:	00c00434 	movhi	r3,16
1000ba9c:	18ffffc4 	addi	r3,r3,-1
1000baa0:	0241ffc4 	movi	r9,2047
1000baa4:	1081ffcc 	andi	r2,r2,2047
1000baa8:	28d4703a 	and	r10,r5,r3
1000baac:	4250703a 	and	r8,r8,r9
1000bab0:	38c6703a 	and	r3,r7,r3
1000bab4:	280ad7fa 	srli	r5,r5,31
1000bab8:	380ed7fa 	srli	r7,r7,31
1000babc:	12400b26 	beq	r2,r9,1000baec <__ledf2+0x5c>
1000bac0:	42401926 	beq	r8,r9,1000bb28 <__ledf2+0x98>
1000bac4:	10000c1e 	bne	r2,zero,1000baf8 <__ledf2+0x68>
1000bac8:	5112b03a 	or	r9,r10,r4
1000bacc:	4813003a 	cmpeq	r9,r9,zero
1000bad0:	4817883a 	mov	r11,r9
1000bad4:	40000f26 	beq	r8,zero,1000bb14 <__ledf2+0x84>
1000bad8:	39c03fcc 	andi	r7,r7,255
1000badc:	58001826 	beq	r11,zero,1000bb40 <__ledf2+0xb0>
1000bae0:	38000a1e 	bne	r7,zero,1000bb0c <__ledf2+0x7c>
1000bae4:	00bfffc4 	movi	r2,-1
1000bae8:	f800283a 	ret
1000baec:	5112b03a 	or	r9,r10,r4
1000baf0:	48000f1e 	bne	r9,zero,1000bb30 <__ledf2+0xa0>
1000baf4:	40800c26 	beq	r8,r2,1000bb28 <__ledf2+0x98>
1000baf8:	4000101e 	bne	r8,zero,1000bb3c <__ledf2+0xac>
1000bafc:	1992b03a 	or	r9,r3,r6
1000bb00:	0017883a 	mov	r11,zero
1000bb04:	483ff41e 	bne	r9,zero,1000bad8 <__alt_data_end+0xf800bad8>
1000bb08:	283ff61e 	bne	r5,zero,1000bae4 <__alt_data_end+0xf800bae4>
1000bb0c:	00800044 	movi	r2,1
1000bb10:	f800283a 	ret
1000bb14:	1998b03a 	or	r12,r3,r6
1000bb18:	603fef1e 	bne	r12,zero,1000bad8 <__alt_data_end+0xf800bad8>
1000bb1c:	483ffa26 	beq	r9,zero,1000bb08 <__alt_data_end+0xf800bb08>
1000bb20:	0005883a 	mov	r2,zero
1000bb24:	f800283a 	ret
1000bb28:	1992b03a 	or	r9,r3,r6
1000bb2c:	48000226 	beq	r9,zero,1000bb38 <__ledf2+0xa8>
1000bb30:	00800084 	movi	r2,2
1000bb34:	f800283a 	ret
1000bb38:	103fe326 	beq	r2,zero,1000bac8 <__alt_data_end+0xf800bac8>
1000bb3c:	39c03fcc 	andi	r7,r7,255
1000bb40:	29fff11e 	bne	r5,r7,1000bb08 <__alt_data_end+0xf800bb08>
1000bb44:	40bff016 	blt	r8,r2,1000bb08 <__alt_data_end+0xf800bb08>
1000bb48:	12000316 	blt	r2,r8,1000bb58 <__ledf2+0xc8>
1000bb4c:	1abfee36 	bltu	r3,r10,1000bb08 <__alt_data_end+0xf800bb08>
1000bb50:	50c00326 	beq	r10,r3,1000bb60 <__ledf2+0xd0>
1000bb54:	50fff22e 	bgeu	r10,r3,1000bb20 <__alt_data_end+0xf800bb20>
1000bb58:	283fe226 	beq	r5,zero,1000bae4 <__alt_data_end+0xf800bae4>
1000bb5c:	003feb06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000bb60:	313fe936 	bltu	r6,r4,1000bb08 <__alt_data_end+0xf800bb08>
1000bb64:	21bfee2e 	bgeu	r4,r6,1000bb20 <__alt_data_end+0xf800bb20>
1000bb68:	283fde26 	beq	r5,zero,1000bae4 <__alt_data_end+0xf800bae4>
1000bb6c:	003fe706 	br	1000bb0c <__alt_data_end+0xf800bb0c>

1000bb70 <__muldf3>:
1000bb70:	deffee04 	addi	sp,sp,-72
1000bb74:	dd000c15 	stw	r20,48(sp)
1000bb78:	2828d53a 	srli	r20,r5,20
1000bb7c:	dd400d15 	stw	r21,52(sp)
1000bb80:	282ad7fa 	srli	r21,r5,31
1000bb84:	dc000815 	stw	r16,32(sp)
1000bb88:	04000434 	movhi	r16,16
1000bb8c:	ddc00f15 	stw	r23,60(sp)
1000bb90:	dcc00b15 	stw	r19,44(sp)
1000bb94:	dc800a15 	stw	r18,40(sp)
1000bb98:	843fffc4 	addi	r16,r16,-1
1000bb9c:	dfc01115 	stw	ra,68(sp)
1000bba0:	df001015 	stw	fp,64(sp)
1000bba4:	dd800e15 	stw	r22,56(sp)
1000bba8:	dc400915 	stw	r17,36(sp)
1000bbac:	a501ffcc 	andi	r20,r20,2047
1000bbb0:	2025883a 	mov	r18,r4
1000bbb4:	202f883a 	mov	r23,r4
1000bbb8:	2c20703a 	and	r16,r5,r16
1000bbbc:	a827883a 	mov	r19,r21
1000bbc0:	aa403fcc 	andi	r9,r21,255
1000bbc4:	a0005926 	beq	r20,zero,1000bd2c <__muldf3+0x1bc>
1000bbc8:	0081ffc4 	movi	r2,2047
1000bbcc:	a0803426 	beq	r20,r2,1000bca0 <__muldf3+0x130>
1000bbd0:	84000434 	orhi	r16,r16,16
1000bbd4:	2004d77a 	srli	r2,r4,29
1000bbd8:	802090fa 	slli	r16,r16,3
1000bbdc:	202e90fa 	slli	r23,r4,3
1000bbe0:	a53f0044 	addi	r20,r20,-1023
1000bbe4:	80a0b03a 	or	r16,r16,r2
1000bbe8:	000b883a 	mov	r5,zero
1000bbec:	0039883a 	mov	fp,zero
1000bbf0:	3806d53a 	srli	r3,r7,20
1000bbf4:	382cd7fa 	srli	r22,r7,31
1000bbf8:	00800434 	movhi	r2,16
1000bbfc:	10bfffc4 	addi	r2,r2,-1
1000bc00:	18c1ffcc 	andi	r3,r3,2047
1000bc04:	3025883a 	mov	r18,r6
1000bc08:	38a2703a 	and	r17,r7,r2
1000bc0c:	b2803fcc 	andi	r10,r22,255
1000bc10:	18006426 	beq	r3,zero,1000bda4 <__muldf3+0x234>
1000bc14:	0081ffc4 	movi	r2,2047
1000bc18:	18805c26 	beq	r3,r2,1000bd8c <__muldf3+0x21c>
1000bc1c:	8c400434 	orhi	r17,r17,16
1000bc20:	3004d77a 	srli	r2,r6,29
1000bc24:	882290fa 	slli	r17,r17,3
1000bc28:	302490fa 	slli	r18,r6,3
1000bc2c:	18ff0044 	addi	r3,r3,-1023
1000bc30:	88a2b03a 	or	r17,r17,r2
1000bc34:	000f883a 	mov	r7,zero
1000bc38:	394ab03a 	or	r5,r7,r5
1000bc3c:	280a90ba 	slli	r5,r5,2
1000bc40:	00840074 	movhi	r2,4097
1000bc44:	10af1804 	addi	r2,r2,-17312
1000bc48:	288b883a 	add	r5,r5,r2
1000bc4c:	28800017 	ldw	r2,0(r5)
1000bc50:	a0c7883a 	add	r3,r20,r3
1000bc54:	b54cf03a 	xor	r6,r22,r21
1000bc58:	1a000044 	addi	r8,r3,1
1000bc5c:	1000683a 	jmp	r2
1000bc60:	1000bea4 	muli	zero,r2,762
1000bc64:	1000be90 	cmplti	zero,r2,762
1000bc68:	1000be90 	cmplti	zero,r2,762
1000bc6c:	1000be7c 	xorhi	zero,r2,761
1000bc70:	1000bcbc 	xorhi	zero,r2,754
1000bc74:	1000bcbc 	xorhi	zero,r2,754
1000bc78:	1000be64 	muli	zero,r2,761
1000bc7c:	1000be7c 	xorhi	zero,r2,761
1000bc80:	1000bcbc 	xorhi	zero,r2,754
1000bc84:	1000be64 	muli	zero,r2,761
1000bc88:	1000bcbc 	xorhi	zero,r2,754
1000bc8c:	1000be7c 	xorhi	zero,r2,761
1000bc90:	1000bcc0 	call	11000bcc <_gp+0xfe772c>
1000bc94:	1000bcc0 	call	11000bcc <_gp+0xfe772c>
1000bc98:	1000bcc0 	call	11000bcc <_gp+0xfe772c>
1000bc9c:	1000c1e0 	cmpeqi	zero,r2,775
1000bca0:	8104b03a 	or	r2,r16,r4
1000bca4:	10006c1e 	bne	r2,zero,1000be58 <__muldf3+0x2e8>
1000bca8:	01400204 	movi	r5,8
1000bcac:	0021883a 	mov	r16,zero
1000bcb0:	002f883a 	mov	r23,zero
1000bcb4:	07000084 	movi	fp,2
1000bcb8:	003fcd06 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000bcbc:	3013883a 	mov	r9,r6
1000bcc0:	00800084 	movi	r2,2
1000bcc4:	e080501e 	bne	fp,r2,1000be08 <__muldf3+0x298>
1000bcc8:	4cc0004c 	andi	r19,r9,1
1000bccc:	0101ffc4 	movi	r4,2047
1000bcd0:	0021883a 	mov	r16,zero
1000bcd4:	002f883a 	mov	r23,zero
1000bcd8:	2008953a 	slli	r4,r4,20
1000bcdc:	98c03fcc 	andi	r3,r19,255
1000bce0:	04400434 	movhi	r17,16
1000bce4:	8c7fffc4 	addi	r17,r17,-1
1000bce8:	180697fa 	slli	r3,r3,31
1000bcec:	8460703a 	and	r16,r16,r17
1000bcf0:	8120b03a 	or	r16,r16,r4
1000bcf4:	80c6b03a 	or	r3,r16,r3
1000bcf8:	b805883a 	mov	r2,r23
1000bcfc:	dfc01117 	ldw	ra,68(sp)
1000bd00:	df001017 	ldw	fp,64(sp)
1000bd04:	ddc00f17 	ldw	r23,60(sp)
1000bd08:	dd800e17 	ldw	r22,56(sp)
1000bd0c:	dd400d17 	ldw	r21,52(sp)
1000bd10:	dd000c17 	ldw	r20,48(sp)
1000bd14:	dcc00b17 	ldw	r19,44(sp)
1000bd18:	dc800a17 	ldw	r18,40(sp)
1000bd1c:	dc400917 	ldw	r17,36(sp)
1000bd20:	dc000817 	ldw	r16,32(sp)
1000bd24:	dec01204 	addi	sp,sp,72
1000bd28:	f800283a 	ret
1000bd2c:	8104b03a 	or	r2,r16,r4
1000bd30:	10004426 	beq	r2,zero,1000be44 <__muldf3+0x2d4>
1000bd34:	80014b26 	beq	r16,zero,1000c264 <__muldf3+0x6f4>
1000bd38:	8009883a 	mov	r4,r16
1000bd3c:	d9800715 	stw	r6,28(sp)
1000bd40:	d9c00215 	stw	r7,8(sp)
1000bd44:	da400415 	stw	r9,16(sp)
1000bd48:	000cea80 	call	1000cea8 <__clzsi2>
1000bd4c:	d9800717 	ldw	r6,28(sp)
1000bd50:	d9c00217 	ldw	r7,8(sp)
1000bd54:	da400417 	ldw	r9,16(sp)
1000bd58:	1007883a 	mov	r3,r2
1000bd5c:	01000a04 	movi	r4,40
1000bd60:	1dfffe04 	addi	r23,r3,-8
1000bd64:	20c9c83a 	sub	r4,r4,r3
1000bd68:	85e0983a 	sll	r16,r16,r23
1000bd6c:	9108d83a 	srl	r4,r18,r4
1000bd70:	95ee983a 	sll	r23,r18,r23
1000bd74:	2420b03a 	or	r16,r4,r16
1000bd78:	053f0344 	movi	r20,-1011
1000bd7c:	a0e9c83a 	sub	r20,r20,r3
1000bd80:	000b883a 	mov	r5,zero
1000bd84:	0039883a 	mov	fp,zero
1000bd88:	003f9906 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000bd8c:	8984b03a 	or	r2,r17,r6
1000bd90:	10002a1e 	bne	r2,zero,1000be3c <__muldf3+0x2cc>
1000bd94:	0023883a 	mov	r17,zero
1000bd98:	0025883a 	mov	r18,zero
1000bd9c:	01c00084 	movi	r7,2
1000bda0:	003fa506 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000bda4:	8984b03a 	or	r2,r17,r6
1000bda8:	10002026 	beq	r2,zero,1000be2c <__muldf3+0x2bc>
1000bdac:	88011c26 	beq	r17,zero,1000c220 <__muldf3+0x6b0>
1000bdb0:	8809883a 	mov	r4,r17
1000bdb4:	d9400215 	stw	r5,8(sp)
1000bdb8:	d9800715 	stw	r6,28(sp)
1000bdbc:	da400415 	stw	r9,16(sp)
1000bdc0:	da800315 	stw	r10,12(sp)
1000bdc4:	000cea80 	call	1000cea8 <__clzsi2>
1000bdc8:	d9400217 	ldw	r5,8(sp)
1000bdcc:	d9800717 	ldw	r6,28(sp)
1000bdd0:	da400417 	ldw	r9,16(sp)
1000bdd4:	da800317 	ldw	r10,12(sp)
1000bdd8:	1007883a 	mov	r3,r2
1000bddc:	01000a04 	movi	r4,40
1000bde0:	1cbffe04 	addi	r18,r3,-8
1000bde4:	20c9c83a 	sub	r4,r4,r3
1000bde8:	8ca2983a 	sll	r17,r17,r18
1000bdec:	3108d83a 	srl	r4,r6,r4
1000bdf0:	34a4983a 	sll	r18,r6,r18
1000bdf4:	2462b03a 	or	r17,r4,r17
1000bdf8:	00bf0344 	movi	r2,-1011
1000bdfc:	10c7c83a 	sub	r3,r2,r3
1000be00:	000f883a 	mov	r7,zero
1000be04:	003f8c06 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000be08:	008000c4 	movi	r2,3
1000be0c:	e0816d26 	beq	fp,r2,1000c3c4 <__muldf3+0x854>
1000be10:	00800044 	movi	r2,1
1000be14:	e081321e 	bne	fp,r2,1000c2e0 <__muldf3+0x770>
1000be18:	48a6703a 	and	r19,r9,r2
1000be1c:	0009883a 	mov	r4,zero
1000be20:	0021883a 	mov	r16,zero
1000be24:	002f883a 	mov	r23,zero
1000be28:	003fab06 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000be2c:	0023883a 	mov	r17,zero
1000be30:	0025883a 	mov	r18,zero
1000be34:	01c00044 	movi	r7,1
1000be38:	003f7f06 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000be3c:	01c000c4 	movi	r7,3
1000be40:	003f7d06 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000be44:	01400104 	movi	r5,4
1000be48:	0021883a 	mov	r16,zero
1000be4c:	002f883a 	mov	r23,zero
1000be50:	07000044 	movi	fp,1
1000be54:	003f6606 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000be58:	01400304 	movi	r5,12
1000be5c:	070000c4 	movi	fp,3
1000be60:	003f6306 	br	1000bbf0 <__alt_data_end+0xf800bbf0>
1000be64:	04000434 	movhi	r16,16
1000be68:	0027883a 	mov	r19,zero
1000be6c:	843fffc4 	addi	r16,r16,-1
1000be70:	05ffffc4 	movi	r23,-1
1000be74:	0101ffc4 	movi	r4,2047
1000be78:	003f9706 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000be7c:	8821883a 	mov	r16,r17
1000be80:	902f883a 	mov	r23,r18
1000be84:	5013883a 	mov	r9,r10
1000be88:	3839883a 	mov	fp,r7
1000be8c:	003f8c06 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000be90:	8821883a 	mov	r16,r17
1000be94:	902f883a 	mov	r23,r18
1000be98:	3013883a 	mov	r9,r6
1000be9c:	3839883a 	mov	fp,r7
1000bea0:	003f8706 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000bea4:	b82ad43a 	srli	r21,r23,16
1000bea8:	9038d43a 	srli	fp,r18,16
1000beac:	bdffffcc 	andi	r23,r23,65535
1000beb0:	94bfffcc 	andi	r18,r18,65535
1000beb4:	9009883a 	mov	r4,r18
1000beb8:	b80b883a 	mov	r5,r23
1000bebc:	d8c00515 	stw	r3,20(sp)
1000bec0:	d9800715 	stw	r6,28(sp)
1000bec4:	da000615 	stw	r8,24(sp)
1000bec8:	00005a80 	call	100005a8 <__mulsi3>
1000becc:	9009883a 	mov	r4,r18
1000bed0:	a80b883a 	mov	r5,r21
1000bed4:	1029883a 	mov	r20,r2
1000bed8:	00005a80 	call	100005a8 <__mulsi3>
1000bedc:	e009883a 	mov	r4,fp
1000bee0:	a80b883a 	mov	r5,r21
1000bee4:	102d883a 	mov	r22,r2
1000bee8:	00005a80 	call	100005a8 <__mulsi3>
1000beec:	e009883a 	mov	r4,fp
1000bef0:	b80b883a 	mov	r5,r23
1000bef4:	1027883a 	mov	r19,r2
1000bef8:	00005a80 	call	100005a8 <__mulsi3>
1000befc:	a008d43a 	srli	r4,r20,16
1000bf00:	b085883a 	add	r2,r22,r2
1000bf04:	d8c00517 	ldw	r3,20(sp)
1000bf08:	110f883a 	add	r7,r2,r4
1000bf0c:	d9800717 	ldw	r6,28(sp)
1000bf10:	da000617 	ldw	r8,24(sp)
1000bf14:	3d80022e 	bgeu	r7,r22,1000bf20 <__muldf3+0x3b0>
1000bf18:	00800074 	movhi	r2,1
1000bf1c:	98a7883a 	add	r19,r19,r2
1000bf20:	3804943a 	slli	r2,r7,16
1000bf24:	380ed43a 	srli	r7,r7,16
1000bf28:	882cd43a 	srli	r22,r17,16
1000bf2c:	a53fffcc 	andi	r20,r20,65535
1000bf30:	8c7fffcc 	andi	r17,r17,65535
1000bf34:	1529883a 	add	r20,r2,r20
1000bf38:	8809883a 	mov	r4,r17
1000bf3c:	b80b883a 	mov	r5,r23
1000bf40:	d8c00515 	stw	r3,20(sp)
1000bf44:	d9800715 	stw	r6,28(sp)
1000bf48:	da000615 	stw	r8,24(sp)
1000bf4c:	d9c00015 	stw	r7,0(sp)
1000bf50:	dd000115 	stw	r20,4(sp)
1000bf54:	00005a80 	call	100005a8 <__mulsi3>
1000bf58:	a80b883a 	mov	r5,r21
1000bf5c:	8809883a 	mov	r4,r17
1000bf60:	d8800415 	stw	r2,16(sp)
1000bf64:	00005a80 	call	100005a8 <__mulsi3>
1000bf68:	a80b883a 	mov	r5,r21
1000bf6c:	b009883a 	mov	r4,r22
1000bf70:	1029883a 	mov	r20,r2
1000bf74:	00005a80 	call	100005a8 <__mulsi3>
1000bf78:	b009883a 	mov	r4,r22
1000bf7c:	b80b883a 	mov	r5,r23
1000bf80:	102b883a 	mov	r21,r2
1000bf84:	00005a80 	call	100005a8 <__mulsi3>
1000bf88:	da400417 	ldw	r9,16(sp)
1000bf8c:	a085883a 	add	r2,r20,r2
1000bf90:	d8c00517 	ldw	r3,20(sp)
1000bf94:	4808d43a 	srli	r4,r9,16
1000bf98:	d9800717 	ldw	r6,28(sp)
1000bf9c:	da000617 	ldw	r8,24(sp)
1000bfa0:	1109883a 	add	r4,r2,r4
1000bfa4:	2500022e 	bgeu	r4,r20,1000bfb0 <__muldf3+0x440>
1000bfa8:	00800074 	movhi	r2,1
1000bfac:	a8ab883a 	add	r21,r21,r2
1000bfb0:	200e943a 	slli	r7,r4,16
1000bfb4:	2004d43a 	srli	r2,r4,16
1000bfb8:	802ed43a 	srli	r23,r16,16
1000bfbc:	843fffcc 	andi	r16,r16,65535
1000bfc0:	4d3fffcc 	andi	r20,r9,65535
1000bfc4:	9009883a 	mov	r4,r18
1000bfc8:	800b883a 	mov	r5,r16
1000bfcc:	3d29883a 	add	r20,r7,r20
1000bfd0:	d8c00515 	stw	r3,20(sp)
1000bfd4:	d9800715 	stw	r6,28(sp)
1000bfd8:	da000615 	stw	r8,24(sp)
1000bfdc:	a8ab883a 	add	r21,r21,r2
1000bfe0:	00005a80 	call	100005a8 <__mulsi3>
1000bfe4:	9009883a 	mov	r4,r18
1000bfe8:	b80b883a 	mov	r5,r23
1000bfec:	d8800315 	stw	r2,12(sp)
1000bff0:	00005a80 	call	100005a8 <__mulsi3>
1000bff4:	e009883a 	mov	r4,fp
1000bff8:	b80b883a 	mov	r5,r23
1000bffc:	1025883a 	mov	r18,r2
1000c000:	00005a80 	call	100005a8 <__mulsi3>
1000c004:	e009883a 	mov	r4,fp
1000c008:	800b883a 	mov	r5,r16
1000c00c:	d8800215 	stw	r2,8(sp)
1000c010:	00005a80 	call	100005a8 <__mulsi3>
1000c014:	da800317 	ldw	r10,12(sp)
1000c018:	d9400017 	ldw	r5,0(sp)
1000c01c:	9085883a 	add	r2,r18,r2
1000c020:	5008d43a 	srli	r4,r10,16
1000c024:	a153883a 	add	r9,r20,r5
1000c028:	d8c00517 	ldw	r3,20(sp)
1000c02c:	1109883a 	add	r4,r2,r4
1000c030:	d9800717 	ldw	r6,28(sp)
1000c034:	da000617 	ldw	r8,24(sp)
1000c038:	dac00217 	ldw	r11,8(sp)
1000c03c:	2480022e 	bgeu	r4,r18,1000c048 <__muldf3+0x4d8>
1000c040:	00800074 	movhi	r2,1
1000c044:	5897883a 	add	r11,r11,r2
1000c048:	200e943a 	slli	r7,r4,16
1000c04c:	2038d43a 	srli	fp,r4,16
1000c050:	52bfffcc 	andi	r10,r10,65535
1000c054:	3a8f883a 	add	r7,r7,r10
1000c058:	8809883a 	mov	r4,r17
1000c05c:	800b883a 	mov	r5,r16
1000c060:	d8c00515 	stw	r3,20(sp)
1000c064:	d9800715 	stw	r6,28(sp)
1000c068:	d9c00215 	stw	r7,8(sp)
1000c06c:	da000615 	stw	r8,24(sp)
1000c070:	da400415 	stw	r9,16(sp)
1000c074:	5f39883a 	add	fp,r11,fp
1000c078:	00005a80 	call	100005a8 <__mulsi3>
1000c07c:	8809883a 	mov	r4,r17
1000c080:	b80b883a 	mov	r5,r23
1000c084:	1025883a 	mov	r18,r2
1000c088:	00005a80 	call	100005a8 <__mulsi3>
1000c08c:	b009883a 	mov	r4,r22
1000c090:	b80b883a 	mov	r5,r23
1000c094:	d8800315 	stw	r2,12(sp)
1000c098:	00005a80 	call	100005a8 <__mulsi3>
1000c09c:	b009883a 	mov	r4,r22
1000c0a0:	800b883a 	mov	r5,r16
1000c0a4:	1023883a 	mov	r17,r2
1000c0a8:	00005a80 	call	100005a8 <__mulsi3>
1000c0ac:	da800317 	ldw	r10,12(sp)
1000c0b0:	9008d43a 	srli	r4,r18,16
1000c0b4:	d8c00517 	ldw	r3,20(sp)
1000c0b8:	5085883a 	add	r2,r10,r2
1000c0bc:	1109883a 	add	r4,r2,r4
1000c0c0:	d9800717 	ldw	r6,28(sp)
1000c0c4:	d9c00217 	ldw	r7,8(sp)
1000c0c8:	da000617 	ldw	r8,24(sp)
1000c0cc:	da400417 	ldw	r9,16(sp)
1000c0d0:	2280022e 	bgeu	r4,r10,1000c0dc <__muldf3+0x56c>
1000c0d4:	00800074 	movhi	r2,1
1000c0d8:	88a3883a 	add	r17,r17,r2
1000c0dc:	2004943a 	slli	r2,r4,16
1000c0e0:	94bfffcc 	andi	r18,r18,65535
1000c0e4:	4ce7883a 	add	r19,r9,r19
1000c0e8:	14a5883a 	add	r18,r2,r18
1000c0ec:	9d29803a 	cmpltu	r20,r19,r20
1000c0f0:	9565883a 	add	r18,r18,r21
1000c0f4:	9505883a 	add	r2,r18,r20
1000c0f8:	99e7883a 	add	r19,r19,r7
1000c0fc:	99cf803a 	cmpltu	r7,r19,r7
1000c100:	e08b883a 	add	r5,fp,r2
1000c104:	2008d43a 	srli	r4,r4,16
1000c108:	29ef883a 	add	r23,r5,r7
1000c10c:	1529803a 	cmpltu	r20,r2,r20
1000c110:	956b803a 	cmpltu	r21,r18,r21
1000c114:	b9cf803a 	cmpltu	r7,r23,r7
1000c118:	a564b03a 	or	r18,r20,r21
1000c11c:	2f39803a 	cmpltu	fp,r5,fp
1000c120:	9125883a 	add	r18,r18,r4
1000c124:	3f38b03a 	or	fp,r7,fp
1000c128:	9725883a 	add	r18,r18,fp
1000c12c:	9804927a 	slli	r2,r19,9
1000c130:	9463883a 	add	r17,r18,r17
1000c134:	d9000117 	ldw	r4,4(sp)
1000c138:	b820d5fa 	srli	r16,r23,23
1000c13c:	8822927a 	slli	r17,r17,9
1000c140:	9826d5fa 	srli	r19,r19,23
1000c144:	1104b03a 	or	r2,r2,r4
1000c148:	b82e927a 	slli	r23,r23,9
1000c14c:	1004c03a 	cmpne	r2,r2,zero
1000c150:	8c20b03a 	or	r16,r17,r16
1000c154:	14e6b03a 	or	r19,r2,r19
1000c158:	8080402c 	andhi	r2,r16,256
1000c15c:	9deeb03a 	or	r23,r19,r23
1000c160:	10000726 	beq	r2,zero,1000c180 <__muldf3+0x610>
1000c164:	b804d07a 	srli	r2,r23,1
1000c168:	800697fa 	slli	r3,r16,31
1000c16c:	bdc0004c 	andi	r23,r23,1
1000c170:	8020d07a 	srli	r16,r16,1
1000c174:	b8aeb03a 	or	r23,r23,r2
1000c178:	b8eeb03a 	or	r23,r23,r3
1000c17c:	4007883a 	mov	r3,r8
1000c180:	1900ffc4 	addi	r4,r3,1023
1000c184:	01004d0e 	bge	zero,r4,1000c2bc <__muldf3+0x74c>
1000c188:	b88001cc 	andi	r2,r23,7
1000c18c:	10000726 	beq	r2,zero,1000c1ac <__muldf3+0x63c>
1000c190:	b94003cc 	andi	r5,r23,15
1000c194:	00800104 	movi	r2,4
1000c198:	28800426 	beq	r5,r2,1000c1ac <__muldf3+0x63c>
1000c19c:	b885883a 	add	r2,r23,r2
1000c1a0:	15ef803a 	cmpltu	r23,r2,r23
1000c1a4:	85e1883a 	add	r16,r16,r23
1000c1a8:	102f883a 	mov	r23,r2
1000c1ac:	8080402c 	andhi	r2,r16,256
1000c1b0:	10000426 	beq	r2,zero,1000c1c4 <__muldf3+0x654>
1000c1b4:	00bfc034 	movhi	r2,65280
1000c1b8:	10bfffc4 	addi	r2,r2,-1
1000c1bc:	19010004 	addi	r4,r3,1024
1000c1c0:	80a0703a 	and	r16,r16,r2
1000c1c4:	0081ff84 	movi	r2,2046
1000c1c8:	1100340e 	bge	r2,r4,1000c29c <__muldf3+0x72c>
1000c1cc:	34c0004c 	andi	r19,r6,1
1000c1d0:	0101ffc4 	movi	r4,2047
1000c1d4:	0021883a 	mov	r16,zero
1000c1d8:	002f883a 	mov	r23,zero
1000c1dc:	003ebe06 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c1e0:	8080022c 	andhi	r2,r16,8
1000c1e4:	10000926 	beq	r2,zero,1000c20c <__muldf3+0x69c>
1000c1e8:	8880022c 	andhi	r2,r17,8
1000c1ec:	1000071e 	bne	r2,zero,1000c20c <__muldf3+0x69c>
1000c1f0:	00800434 	movhi	r2,16
1000c1f4:	8c000234 	orhi	r16,r17,8
1000c1f8:	10bfffc4 	addi	r2,r2,-1
1000c1fc:	b027883a 	mov	r19,r22
1000c200:	80a0703a 	and	r16,r16,r2
1000c204:	902f883a 	mov	r23,r18
1000c208:	003f1a06 	br	1000be74 <__alt_data_end+0xf800be74>
1000c20c:	00800434 	movhi	r2,16
1000c210:	84000234 	orhi	r16,r16,8
1000c214:	10bfffc4 	addi	r2,r2,-1
1000c218:	80a0703a 	and	r16,r16,r2
1000c21c:	003f1506 	br	1000be74 <__alt_data_end+0xf800be74>
1000c220:	3009883a 	mov	r4,r6
1000c224:	d9400215 	stw	r5,8(sp)
1000c228:	d9800715 	stw	r6,28(sp)
1000c22c:	da400415 	stw	r9,16(sp)
1000c230:	da800315 	stw	r10,12(sp)
1000c234:	000cea80 	call	1000cea8 <__clzsi2>
1000c238:	10c00804 	addi	r3,r2,32
1000c23c:	010009c4 	movi	r4,39
1000c240:	d9400217 	ldw	r5,8(sp)
1000c244:	d9800717 	ldw	r6,28(sp)
1000c248:	da400417 	ldw	r9,16(sp)
1000c24c:	da800317 	ldw	r10,12(sp)
1000c250:	20fee20e 	bge	r4,r3,1000bddc <__alt_data_end+0xf800bddc>
1000c254:	147ffe04 	addi	r17,r2,-8
1000c258:	9462983a 	sll	r17,r18,r17
1000c25c:	0025883a 	mov	r18,zero
1000c260:	003ee506 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000c264:	d9800715 	stw	r6,28(sp)
1000c268:	d9c00215 	stw	r7,8(sp)
1000c26c:	da400415 	stw	r9,16(sp)
1000c270:	000cea80 	call	1000cea8 <__clzsi2>
1000c274:	10c00804 	addi	r3,r2,32
1000c278:	010009c4 	movi	r4,39
1000c27c:	d9800717 	ldw	r6,28(sp)
1000c280:	d9c00217 	ldw	r7,8(sp)
1000c284:	da400417 	ldw	r9,16(sp)
1000c288:	20feb40e 	bge	r4,r3,1000bd5c <__alt_data_end+0xf800bd5c>
1000c28c:	143ffe04 	addi	r16,r2,-8
1000c290:	9420983a 	sll	r16,r18,r16
1000c294:	002f883a 	mov	r23,zero
1000c298:	003eb706 	br	1000bd78 <__alt_data_end+0xf800bd78>
1000c29c:	8004977a 	slli	r2,r16,29
1000c2a0:	b82ed0fa 	srli	r23,r23,3
1000c2a4:	8020927a 	slli	r16,r16,9
1000c2a8:	2101ffcc 	andi	r4,r4,2047
1000c2ac:	15eeb03a 	or	r23,r2,r23
1000c2b0:	8020d33a 	srli	r16,r16,12
1000c2b4:	34c0004c 	andi	r19,r6,1
1000c2b8:	003e8706 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c2bc:	00bf0084 	movi	r2,-1022
1000c2c0:	10c5c83a 	sub	r2,r2,r3
1000c2c4:	01000e04 	movi	r4,56
1000c2c8:	2080080e 	bge	r4,r2,1000c2ec <__muldf3+0x77c>
1000c2cc:	34c0004c 	andi	r19,r6,1
1000c2d0:	0009883a 	mov	r4,zero
1000c2d4:	0021883a 	mov	r16,zero
1000c2d8:	002f883a 	mov	r23,zero
1000c2dc:	003e7e06 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c2e0:	4007883a 	mov	r3,r8
1000c2e4:	480d883a 	mov	r6,r9
1000c2e8:	003fa506 	br	1000c180 <__alt_data_end+0xf800c180>
1000c2ec:	010007c4 	movi	r4,31
1000c2f0:	20801816 	blt	r4,r2,1000c354 <__muldf3+0x7e4>
1000c2f4:	18c10784 	addi	r3,r3,1054
1000c2f8:	80c8983a 	sll	r4,r16,r3
1000c2fc:	b88ad83a 	srl	r5,r23,r2
1000c300:	b8c6983a 	sll	r3,r23,r3
1000c304:	80a0d83a 	srl	r16,r16,r2
1000c308:	2908b03a 	or	r4,r5,r4
1000c30c:	1804c03a 	cmpne	r2,r3,zero
1000c310:	2088b03a 	or	r4,r4,r2
1000c314:	208001cc 	andi	r2,r4,7
1000c318:	10000726 	beq	r2,zero,1000c338 <__muldf3+0x7c8>
1000c31c:	20c003cc 	andi	r3,r4,15
1000c320:	00800104 	movi	r2,4
1000c324:	18800426 	beq	r3,r2,1000c338 <__muldf3+0x7c8>
1000c328:	20c00104 	addi	r3,r4,4
1000c32c:	1905803a 	cmpltu	r2,r3,r4
1000c330:	80a1883a 	add	r16,r16,r2
1000c334:	1809883a 	mov	r4,r3
1000c338:	8080202c 	andhi	r2,r16,128
1000c33c:	10001b26 	beq	r2,zero,1000c3ac <__muldf3+0x83c>
1000c340:	34c0004c 	andi	r19,r6,1
1000c344:	01000044 	movi	r4,1
1000c348:	0021883a 	mov	r16,zero
1000c34c:	002f883a 	mov	r23,zero
1000c350:	003e6106 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c354:	013ef884 	movi	r4,-1054
1000c358:	20c9c83a 	sub	r4,r4,r3
1000c35c:	01400804 	movi	r5,32
1000c360:	8108d83a 	srl	r4,r16,r4
1000c364:	11401526 	beq	r2,r5,1000c3bc <__muldf3+0x84c>
1000c368:	18c10f84 	addi	r3,r3,1086
1000c36c:	80e0983a 	sll	r16,r16,r3
1000c370:	85eeb03a 	or	r23,r16,r23
1000c374:	b804c03a 	cmpne	r2,r23,zero
1000c378:	1108b03a 	or	r4,r2,r4
1000c37c:	20c001cc 	andi	r3,r4,7
1000c380:	1800061e 	bne	r3,zero,1000c39c <__muldf3+0x82c>
1000c384:	0021883a 	mov	r16,zero
1000c388:	202ed0fa 	srli	r23,r4,3
1000c38c:	34c0004c 	andi	r19,r6,1
1000c390:	0009883a 	mov	r4,zero
1000c394:	b8eeb03a 	or	r23,r23,r3
1000c398:	003e4f06 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c39c:	20c003cc 	andi	r3,r4,15
1000c3a0:	00800104 	movi	r2,4
1000c3a4:	0021883a 	mov	r16,zero
1000c3a8:	18bfdf1e 	bne	r3,r2,1000c328 <__alt_data_end+0xf800c328>
1000c3ac:	8004927a 	slli	r2,r16,9
1000c3b0:	8006977a 	slli	r3,r16,29
1000c3b4:	1020d33a 	srli	r16,r2,12
1000c3b8:	003ff306 	br	1000c388 <__alt_data_end+0xf800c388>
1000c3bc:	0021883a 	mov	r16,zero
1000c3c0:	003feb06 	br	1000c370 <__alt_data_end+0xf800c370>
1000c3c4:	00800434 	movhi	r2,16
1000c3c8:	84000234 	orhi	r16,r16,8
1000c3cc:	10bfffc4 	addi	r2,r2,-1
1000c3d0:	4cc0004c 	andi	r19,r9,1
1000c3d4:	80a0703a 	and	r16,r16,r2
1000c3d8:	003ea606 	br	1000be74 <__alt_data_end+0xf800be74>

1000c3dc <__subdf3>:
1000c3dc:	00c00434 	movhi	r3,16
1000c3e0:	18ffffc4 	addi	r3,r3,-1
1000c3e4:	defffb04 	addi	sp,sp,-20
1000c3e8:	28d2703a 	and	r9,r5,r3
1000c3ec:	3814d53a 	srli	r10,r7,20
1000c3f0:	38c6703a 	and	r3,r7,r3
1000c3f4:	3004d77a 	srli	r2,r6,29
1000c3f8:	dc800215 	stw	r18,8(sp)
1000c3fc:	dc000015 	stw	r16,0(sp)
1000c400:	2824d7fa 	srli	r18,r5,31
1000c404:	2820d53a 	srli	r16,r5,20
1000c408:	481290fa 	slli	r9,r9,3
1000c40c:	200ad77a 	srli	r5,r4,29
1000c410:	180690fa 	slli	r3,r3,3
1000c414:	dc400115 	stw	r17,4(sp)
1000c418:	dfc00415 	stw	ra,16(sp)
1000c41c:	202290fa 	slli	r17,r4,3
1000c420:	dcc00315 	stw	r19,12(sp)
1000c424:	5281ffcc 	andi	r10,r10,2047
1000c428:	0101ffc4 	movi	r4,2047
1000c42c:	9011883a 	mov	r8,r18
1000c430:	8401ffcc 	andi	r16,r16,2047
1000c434:	94803fcc 	andi	r18,r18,255
1000c438:	494ab03a 	or	r5,r9,r5
1000c43c:	380ed7fa 	srli	r7,r7,31
1000c440:	1886b03a 	or	r3,r3,r2
1000c444:	300c90fa 	slli	r6,r6,3
1000c448:	51009026 	beq	r10,r4,1000c68c <__subdf3+0x2b0>
1000c44c:	39c0005c 	xori	r7,r7,1
1000c450:	8285c83a 	sub	r2,r16,r10
1000c454:	91c06f26 	beq	r18,r7,1000c614 <__subdf3+0x238>
1000c458:	0080b10e 	bge	zero,r2,1000c720 <__subdf3+0x344>
1000c45c:	50002a1e 	bne	r10,zero,1000c508 <__subdf3+0x12c>
1000c460:	1988b03a 	or	r4,r3,r6
1000c464:	2000941e 	bne	r4,zero,1000c6b8 <__subdf3+0x2dc>
1000c468:	888001cc 	andi	r2,r17,7
1000c46c:	10005b26 	beq	r2,zero,1000c5dc <__subdf3+0x200>
1000c470:	88c003cc 	andi	r3,r17,15
1000c474:	00800104 	movi	r2,4
1000c478:	18805826 	beq	r3,r2,1000c5dc <__subdf3+0x200>
1000c47c:	88c00104 	addi	r3,r17,4
1000c480:	1c63803a 	cmpltu	r17,r3,r17
1000c484:	2c4b883a 	add	r5,r5,r17
1000c488:	2880202c 	andhi	r2,r5,128
1000c48c:	9200004c 	andi	r8,r18,1
1000c490:	1823883a 	mov	r17,r3
1000c494:	10005426 	beq	r2,zero,1000c5e8 <__subdf3+0x20c>
1000c498:	84000044 	addi	r16,r16,1
1000c49c:	0081ffc4 	movi	r2,2047
1000c4a0:	8080bf26 	beq	r16,r2,1000c7a0 <__subdf3+0x3c4>
1000c4a4:	013fe034 	movhi	r4,65408
1000c4a8:	213fffc4 	addi	r4,r4,-1
1000c4ac:	290a703a 	and	r5,r5,r4
1000c4b0:	2804977a 	slli	r2,r5,29
1000c4b4:	280a927a 	slli	r5,r5,9
1000c4b8:	8822d0fa 	srli	r17,r17,3
1000c4bc:	8401ffcc 	andi	r16,r16,2047
1000c4c0:	2808d33a 	srli	r4,r5,12
1000c4c4:	1444b03a 	or	r2,r2,r17
1000c4c8:	8401ffcc 	andi	r16,r16,2047
1000c4cc:	800a953a 	slli	r5,r16,20
1000c4d0:	40c03fcc 	andi	r3,r8,255
1000c4d4:	04000434 	movhi	r16,16
1000c4d8:	180697fa 	slli	r3,r3,31
1000c4dc:	843fffc4 	addi	r16,r16,-1
1000c4e0:	2420703a 	and	r16,r4,r16
1000c4e4:	8160b03a 	or	r16,r16,r5
1000c4e8:	80c6b03a 	or	r3,r16,r3
1000c4ec:	dfc00417 	ldw	ra,16(sp)
1000c4f0:	dcc00317 	ldw	r19,12(sp)
1000c4f4:	dc800217 	ldw	r18,8(sp)
1000c4f8:	dc400117 	ldw	r17,4(sp)
1000c4fc:	dc000017 	ldw	r16,0(sp)
1000c500:	dec00504 	addi	sp,sp,20
1000c504:	f800283a 	ret
1000c508:	0101ffc4 	movi	r4,2047
1000c50c:	813fd626 	beq	r16,r4,1000c468 <__alt_data_end+0xf800c468>
1000c510:	18c02034 	orhi	r3,r3,128
1000c514:	01000e04 	movi	r4,56
1000c518:	2080a416 	blt	r4,r2,1000c7ac <__subdf3+0x3d0>
1000c51c:	010007c4 	movi	r4,31
1000c520:	2080c716 	blt	r4,r2,1000c840 <__subdf3+0x464>
1000c524:	01000804 	movi	r4,32
1000c528:	2089c83a 	sub	r4,r4,r2
1000c52c:	1910983a 	sll	r8,r3,r4
1000c530:	308ed83a 	srl	r7,r6,r2
1000c534:	3108983a 	sll	r4,r6,r4
1000c538:	1884d83a 	srl	r2,r3,r2
1000c53c:	41ccb03a 	or	r6,r8,r7
1000c540:	2008c03a 	cmpne	r4,r4,zero
1000c544:	310cb03a 	or	r6,r6,r4
1000c548:	898dc83a 	sub	r6,r17,r6
1000c54c:	89a3803a 	cmpltu	r17,r17,r6
1000c550:	288bc83a 	sub	r5,r5,r2
1000c554:	2c4bc83a 	sub	r5,r5,r17
1000c558:	3023883a 	mov	r17,r6
1000c55c:	2880202c 	andhi	r2,r5,128
1000c560:	10006b26 	beq	r2,zero,1000c710 <__subdf3+0x334>
1000c564:	04c02034 	movhi	r19,128
1000c568:	9cffffc4 	addi	r19,r19,-1
1000c56c:	2ce6703a 	and	r19,r5,r19
1000c570:	98007c26 	beq	r19,zero,1000c764 <__subdf3+0x388>
1000c574:	9809883a 	mov	r4,r19
1000c578:	000cea80 	call	1000cea8 <__clzsi2>
1000c57c:	10fffe04 	addi	r3,r2,-8
1000c580:	010007c4 	movi	r4,31
1000c584:	20c07d16 	blt	r4,r3,1000c77c <__subdf3+0x3a0>
1000c588:	01400a04 	movi	r5,40
1000c58c:	2885c83a 	sub	r2,r5,r2
1000c590:	888ad83a 	srl	r5,r17,r2
1000c594:	98e6983a 	sll	r19,r19,r3
1000c598:	88e2983a 	sll	r17,r17,r3
1000c59c:	2ce6b03a 	or	r19,r5,r19
1000c5a0:	1c007a16 	blt	r3,r16,1000c78c <__subdf3+0x3b0>
1000c5a4:	1c21c83a 	sub	r16,r3,r16
1000c5a8:	81400044 	addi	r5,r16,1
1000c5ac:	00c007c4 	movi	r3,31
1000c5b0:	19409616 	blt	r3,r5,1000c80c <__subdf3+0x430>
1000c5b4:	1c21c83a 	sub	r16,r3,r16
1000c5b8:	8c08983a 	sll	r4,r17,r16
1000c5bc:	8946d83a 	srl	r3,r17,r5
1000c5c0:	9c20983a 	sll	r16,r19,r16
1000c5c4:	2008c03a 	cmpne	r4,r4,zero
1000c5c8:	994ad83a 	srl	r5,r19,r5
1000c5cc:	1c06b03a 	or	r3,r3,r16
1000c5d0:	1922b03a 	or	r17,r3,r4
1000c5d4:	0021883a 	mov	r16,zero
1000c5d8:	003fa306 	br	1000c468 <__alt_data_end+0xf800c468>
1000c5dc:	2880202c 	andhi	r2,r5,128
1000c5e0:	9200004c 	andi	r8,r18,1
1000c5e4:	103fac1e 	bne	r2,zero,1000c498 <__alt_data_end+0xf800c498>
1000c5e8:	2804977a 	slli	r2,r5,29
1000c5ec:	8822d0fa 	srli	r17,r17,3
1000c5f0:	00c1ffc4 	movi	r3,2047
1000c5f4:	280ad0fa 	srli	r5,r5,3
1000c5f8:	1444b03a 	or	r2,r2,r17
1000c5fc:	80c02726 	beq	r16,r3,1000c69c <__subdf3+0x2c0>
1000c600:	01000434 	movhi	r4,16
1000c604:	213fffc4 	addi	r4,r4,-1
1000c608:	80e0703a 	and	r16,r16,r3
1000c60c:	2908703a 	and	r4,r5,r4
1000c610:	003fad06 	br	1000c4c8 <__alt_data_end+0xf800c4c8>
1000c614:	0080690e 	bge	zero,r2,1000c7bc <__subdf3+0x3e0>
1000c618:	50002f26 	beq	r10,zero,1000c6d8 <__subdf3+0x2fc>
1000c61c:	0101ffc4 	movi	r4,2047
1000c620:	813f9126 	beq	r16,r4,1000c468 <__alt_data_end+0xf800c468>
1000c624:	18c02034 	orhi	r3,r3,128
1000c628:	01000e04 	movi	r4,56
1000c62c:	2080b00e 	bge	r4,r2,1000c8f0 <__subdf3+0x514>
1000c630:	198cb03a 	or	r6,r3,r6
1000c634:	300ec03a 	cmpne	r7,r6,zero
1000c638:	0005883a 	mov	r2,zero
1000c63c:	3c4f883a 	add	r7,r7,r17
1000c640:	3c63803a 	cmpltu	r17,r7,r17
1000c644:	114b883a 	add	r5,r2,r5
1000c648:	2c4b883a 	add	r5,r5,r17
1000c64c:	3823883a 	mov	r17,r7
1000c650:	2880202c 	andhi	r2,r5,128
1000c654:	10002e26 	beq	r2,zero,1000c710 <__subdf3+0x334>
1000c658:	84000044 	addi	r16,r16,1
1000c65c:	0081ffc4 	movi	r2,2047
1000c660:	8080de26 	beq	r16,r2,1000c9dc <__subdf3+0x600>
1000c664:	00bfe034 	movhi	r2,65408
1000c668:	10bfffc4 	addi	r2,r2,-1
1000c66c:	288a703a 	and	r5,r5,r2
1000c670:	880cd07a 	srli	r6,r17,1
1000c674:	280897fa 	slli	r4,r5,31
1000c678:	88c0004c 	andi	r3,r17,1
1000c67c:	30e2b03a 	or	r17,r6,r3
1000c680:	280ad07a 	srli	r5,r5,1
1000c684:	8922b03a 	or	r17,r17,r4
1000c688:	003f7706 	br	1000c468 <__alt_data_end+0xf800c468>
1000c68c:	1984b03a 	or	r2,r3,r6
1000c690:	103f6e26 	beq	r2,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c694:	39c03fcc 	andi	r7,r7,255
1000c698:	003f6d06 	br	1000c450 <__alt_data_end+0xf800c450>
1000c69c:	1146b03a 	or	r3,r2,r5
1000c6a0:	18003f26 	beq	r3,zero,1000c7a0 <__subdf3+0x3c4>
1000c6a4:	00c00434 	movhi	r3,16
1000c6a8:	29000234 	orhi	r4,r5,8
1000c6ac:	18ffffc4 	addi	r3,r3,-1
1000c6b0:	20c8703a 	and	r4,r4,r3
1000c6b4:	003f8406 	br	1000c4c8 <__alt_data_end+0xf800c4c8>
1000c6b8:	10bfffc4 	addi	r2,r2,-1
1000c6bc:	1000501e 	bne	r2,zero,1000c800 <__subdf3+0x424>
1000c6c0:	898fc83a 	sub	r7,r17,r6
1000c6c4:	89e3803a 	cmpltu	r17,r17,r7
1000c6c8:	28cbc83a 	sub	r5,r5,r3
1000c6cc:	2c4bc83a 	sub	r5,r5,r17
1000c6d0:	3823883a 	mov	r17,r7
1000c6d4:	003fa106 	br	1000c55c <__alt_data_end+0xf800c55c>
1000c6d8:	1988b03a 	or	r4,r3,r6
1000c6dc:	203f6226 	beq	r4,zero,1000c468 <__alt_data_end+0xf800c468>
1000c6e0:	10bfffc4 	addi	r2,r2,-1
1000c6e4:	10009b1e 	bne	r2,zero,1000c954 <__subdf3+0x578>
1000c6e8:	344d883a 	add	r6,r6,r17
1000c6ec:	3463803a 	cmpltu	r17,r6,r17
1000c6f0:	194b883a 	add	r5,r3,r5
1000c6f4:	2c4b883a 	add	r5,r5,r17
1000c6f8:	3023883a 	mov	r17,r6
1000c6fc:	003fd406 	br	1000c650 <__alt_data_end+0xf800c650>
1000c700:	1106b03a 	or	r3,r2,r4
1000c704:	1800b426 	beq	r3,zero,1000c9d8 <__subdf3+0x5fc>
1000c708:	100b883a 	mov	r5,r2
1000c70c:	2023883a 	mov	r17,r4
1000c710:	888001cc 	andi	r2,r17,7
1000c714:	103f561e 	bne	r2,zero,1000c470 <__alt_data_end+0xf800c470>
1000c718:	9200004c 	andi	r8,r18,1
1000c71c:	003fb206 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000c720:	1000531e 	bne	r2,zero,1000c870 <__subdf3+0x494>
1000c724:	80800044 	addi	r2,r16,1
1000c728:	1081ffcc 	andi	r2,r2,2047
1000c72c:	01000044 	movi	r4,1
1000c730:	2080a00e 	bge	r4,r2,1000c9b4 <__subdf3+0x5d8>
1000c734:	8985c83a 	sub	r2,r17,r6
1000c738:	8889803a 	cmpltu	r4,r17,r2
1000c73c:	28e7c83a 	sub	r19,r5,r3
1000c740:	9927c83a 	sub	r19,r19,r4
1000c744:	9900202c 	andhi	r4,r19,128
1000c748:	20006226 	beq	r4,zero,1000c8d4 <__subdf3+0x4f8>
1000c74c:	3463c83a 	sub	r17,r6,r17
1000c750:	194bc83a 	sub	r5,r3,r5
1000c754:	344d803a 	cmpltu	r6,r6,r17
1000c758:	29a7c83a 	sub	r19,r5,r6
1000c75c:	3825883a 	mov	r18,r7
1000c760:	983f841e 	bne	r19,zero,1000c574 <__alt_data_end+0xf800c574>
1000c764:	8809883a 	mov	r4,r17
1000c768:	000cea80 	call	1000cea8 <__clzsi2>
1000c76c:	10800804 	addi	r2,r2,32
1000c770:	10fffe04 	addi	r3,r2,-8
1000c774:	010007c4 	movi	r4,31
1000c778:	20ff830e 	bge	r4,r3,1000c588 <__alt_data_end+0xf800c588>
1000c77c:	14fff604 	addi	r19,r2,-40
1000c780:	8ce6983a 	sll	r19,r17,r19
1000c784:	0023883a 	mov	r17,zero
1000c788:	1c3f860e 	bge	r3,r16,1000c5a4 <__alt_data_end+0xf800c5a4>
1000c78c:	017fe034 	movhi	r5,65408
1000c790:	297fffc4 	addi	r5,r5,-1
1000c794:	80e1c83a 	sub	r16,r16,r3
1000c798:	994a703a 	and	r5,r19,r5
1000c79c:	003f3206 	br	1000c468 <__alt_data_end+0xf800c468>
1000c7a0:	0009883a 	mov	r4,zero
1000c7a4:	0005883a 	mov	r2,zero
1000c7a8:	003f4706 	br	1000c4c8 <__alt_data_end+0xf800c4c8>
1000c7ac:	198cb03a 	or	r6,r3,r6
1000c7b0:	300cc03a 	cmpne	r6,r6,zero
1000c7b4:	0005883a 	mov	r2,zero
1000c7b8:	003f6306 	br	1000c548 <__alt_data_end+0xf800c548>
1000c7bc:	10009d1e 	bne	r2,zero,1000ca34 <__subdf3+0x658>
1000c7c0:	81c00044 	addi	r7,r16,1
1000c7c4:	3881ffcc 	andi	r2,r7,2047
1000c7c8:	02400044 	movi	r9,1
1000c7cc:	4880680e 	bge	r9,r2,1000c970 <__subdf3+0x594>
1000c7d0:	0081ffc4 	movi	r2,2047
1000c7d4:	3880ae26 	beq	r7,r2,1000ca90 <__subdf3+0x6b4>
1000c7d8:	344d883a 	add	r6,r6,r17
1000c7dc:	3463803a 	cmpltu	r17,r6,r17
1000c7e0:	194b883a 	add	r5,r3,r5
1000c7e4:	2c4b883a 	add	r5,r5,r17
1000c7e8:	282297fa 	slli	r17,r5,31
1000c7ec:	300cd07a 	srli	r6,r6,1
1000c7f0:	280ad07a 	srli	r5,r5,1
1000c7f4:	3821883a 	mov	r16,r7
1000c7f8:	89a2b03a 	or	r17,r17,r6
1000c7fc:	003f1a06 	br	1000c468 <__alt_data_end+0xf800c468>
1000c800:	0101ffc4 	movi	r4,2047
1000c804:	813f431e 	bne	r16,r4,1000c514 <__alt_data_end+0xf800c514>
1000c808:	003f1706 	br	1000c468 <__alt_data_end+0xf800c468>
1000c80c:	80bff844 	addi	r2,r16,-31
1000c810:	00c00804 	movi	r3,32
1000c814:	9884d83a 	srl	r2,r19,r2
1000c818:	28c05126 	beq	r5,r3,1000c960 <__subdf3+0x584>
1000c81c:	00c00fc4 	movi	r3,63
1000c820:	1c21c83a 	sub	r16,r3,r16
1000c824:	9c26983a 	sll	r19,r19,r16
1000c828:	9c62b03a 	or	r17,r19,r17
1000c82c:	8822c03a 	cmpne	r17,r17,zero
1000c830:	88a2b03a 	or	r17,r17,r2
1000c834:	000b883a 	mov	r5,zero
1000c838:	0021883a 	mov	r16,zero
1000c83c:	003fb406 	br	1000c710 <__alt_data_end+0xf800c710>
1000c840:	113ff804 	addi	r4,r2,-32
1000c844:	01c00804 	movi	r7,32
1000c848:	1908d83a 	srl	r4,r3,r4
1000c84c:	11c04626 	beq	r2,r7,1000c968 <__subdf3+0x58c>
1000c850:	01c01004 	movi	r7,64
1000c854:	3885c83a 	sub	r2,r7,r2
1000c858:	1884983a 	sll	r2,r3,r2
1000c85c:	118cb03a 	or	r6,r2,r6
1000c860:	300cc03a 	cmpne	r6,r6,zero
1000c864:	310cb03a 	or	r6,r6,r4
1000c868:	0005883a 	mov	r2,zero
1000c86c:	003f3606 	br	1000c548 <__alt_data_end+0xf800c548>
1000c870:	80002b26 	beq	r16,zero,1000c920 <__subdf3+0x544>
1000c874:	0101ffc4 	movi	r4,2047
1000c878:	51006926 	beq	r10,r4,1000ca20 <__subdf3+0x644>
1000c87c:	0085c83a 	sub	r2,zero,r2
1000c880:	29402034 	orhi	r5,r5,128
1000c884:	01000e04 	movi	r4,56
1000c888:	20807d16 	blt	r4,r2,1000ca80 <__subdf3+0x6a4>
1000c88c:	010007c4 	movi	r4,31
1000c890:	2080d916 	blt	r4,r2,1000cbf8 <__subdf3+0x81c>
1000c894:	01000804 	movi	r4,32
1000c898:	2089c83a 	sub	r4,r4,r2
1000c89c:	2912983a 	sll	r9,r5,r4
1000c8a0:	8890d83a 	srl	r8,r17,r2
1000c8a4:	8908983a 	sll	r4,r17,r4
1000c8a8:	2884d83a 	srl	r2,r5,r2
1000c8ac:	4a22b03a 	or	r17,r9,r8
1000c8b0:	2008c03a 	cmpne	r4,r4,zero
1000c8b4:	8922b03a 	or	r17,r17,r4
1000c8b8:	3463c83a 	sub	r17,r6,r17
1000c8bc:	1885c83a 	sub	r2,r3,r2
1000c8c0:	344d803a 	cmpltu	r6,r6,r17
1000c8c4:	118bc83a 	sub	r5,r2,r6
1000c8c8:	5021883a 	mov	r16,r10
1000c8cc:	3825883a 	mov	r18,r7
1000c8d0:	003f2206 	br	1000c55c <__alt_data_end+0xf800c55c>
1000c8d4:	9886b03a 	or	r3,r19,r2
1000c8d8:	18001c1e 	bne	r3,zero,1000c94c <__subdf3+0x570>
1000c8dc:	0011883a 	mov	r8,zero
1000c8e0:	000b883a 	mov	r5,zero
1000c8e4:	0023883a 	mov	r17,zero
1000c8e8:	0021883a 	mov	r16,zero
1000c8ec:	003f3e06 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000c8f0:	010007c4 	movi	r4,31
1000c8f4:	20803c16 	blt	r4,r2,1000c9e8 <__subdf3+0x60c>
1000c8f8:	01000804 	movi	r4,32
1000c8fc:	2089c83a 	sub	r4,r4,r2
1000c900:	1912983a 	sll	r9,r3,r4
1000c904:	308ed83a 	srl	r7,r6,r2
1000c908:	3108983a 	sll	r4,r6,r4
1000c90c:	1884d83a 	srl	r2,r3,r2
1000c910:	49ceb03a 	or	r7,r9,r7
1000c914:	2008c03a 	cmpne	r4,r4,zero
1000c918:	390eb03a 	or	r7,r7,r4
1000c91c:	003f4706 	br	1000c63c <__alt_data_end+0xf800c63c>
1000c920:	2c48b03a 	or	r4,r5,r17
1000c924:	20003e26 	beq	r4,zero,1000ca20 <__subdf3+0x644>
1000c928:	0084303a 	nor	r2,zero,r2
1000c92c:	10003a1e 	bne	r2,zero,1000ca18 <__subdf3+0x63c>
1000c930:	3463c83a 	sub	r17,r6,r17
1000c934:	194bc83a 	sub	r5,r3,r5
1000c938:	344d803a 	cmpltu	r6,r6,r17
1000c93c:	298bc83a 	sub	r5,r5,r6
1000c940:	5021883a 	mov	r16,r10
1000c944:	3825883a 	mov	r18,r7
1000c948:	003f0406 	br	1000c55c <__alt_data_end+0xf800c55c>
1000c94c:	1023883a 	mov	r17,r2
1000c950:	003f0706 	br	1000c570 <__alt_data_end+0xf800c570>
1000c954:	0101ffc4 	movi	r4,2047
1000c958:	813f331e 	bne	r16,r4,1000c628 <__alt_data_end+0xf800c628>
1000c95c:	003ec206 	br	1000c468 <__alt_data_end+0xf800c468>
1000c960:	0027883a 	mov	r19,zero
1000c964:	003fb006 	br	1000c828 <__alt_data_end+0xf800c828>
1000c968:	0005883a 	mov	r2,zero
1000c96c:	003fbb06 	br	1000c85c <__alt_data_end+0xf800c85c>
1000c970:	2c44b03a 	or	r2,r5,r17
1000c974:	80008b1e 	bne	r16,zero,1000cba4 <__subdf3+0x7c8>
1000c978:	1000b526 	beq	r2,zero,1000cc50 <__subdf3+0x874>
1000c97c:	1984b03a 	or	r2,r3,r6
1000c980:	103eb926 	beq	r2,zero,1000c468 <__alt_data_end+0xf800c468>
1000c984:	3449883a 	add	r4,r6,r17
1000c988:	2463803a 	cmpltu	r17,r4,r17
1000c98c:	194b883a 	add	r5,r3,r5
1000c990:	2c4b883a 	add	r5,r5,r17
1000c994:	2880202c 	andhi	r2,r5,128
1000c998:	2023883a 	mov	r17,r4
1000c99c:	103f5c26 	beq	r2,zero,1000c710 <__alt_data_end+0xf800c710>
1000c9a0:	00bfe034 	movhi	r2,65408
1000c9a4:	10bfffc4 	addi	r2,r2,-1
1000c9a8:	4821883a 	mov	r16,r9
1000c9ac:	288a703a 	and	r5,r5,r2
1000c9b0:	003ead06 	br	1000c468 <__alt_data_end+0xf800c468>
1000c9b4:	2c44b03a 	or	r2,r5,r17
1000c9b8:	8000291e 	bne	r16,zero,1000ca60 <__subdf3+0x684>
1000c9bc:	10004f1e 	bne	r2,zero,1000cafc <__subdf3+0x720>
1000c9c0:	1984b03a 	or	r2,r3,r6
1000c9c4:	10000426 	beq	r2,zero,1000c9d8 <__subdf3+0x5fc>
1000c9c8:	180b883a 	mov	r5,r3
1000c9cc:	3023883a 	mov	r17,r6
1000c9d0:	3825883a 	mov	r18,r7
1000c9d4:	003ea406 	br	1000c468 <__alt_data_end+0xf800c468>
1000c9d8:	0011883a 	mov	r8,zero
1000c9dc:	000b883a 	mov	r5,zero
1000c9e0:	0023883a 	mov	r17,zero
1000c9e4:	003f0006 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000c9e8:	11fff804 	addi	r7,r2,-32
1000c9ec:	19c8d83a 	srl	r4,r3,r7
1000c9f0:	01c00804 	movi	r7,32
1000c9f4:	11c07e26 	beq	r2,r7,1000cbf0 <__subdf3+0x814>
1000c9f8:	01c01004 	movi	r7,64
1000c9fc:	3885c83a 	sub	r2,r7,r2
1000ca00:	1884983a 	sll	r2,r3,r2
1000ca04:	118cb03a 	or	r6,r2,r6
1000ca08:	300ec03a 	cmpne	r7,r6,zero
1000ca0c:	390eb03a 	or	r7,r7,r4
1000ca10:	0005883a 	mov	r2,zero
1000ca14:	003f0906 	br	1000c63c <__alt_data_end+0xf800c63c>
1000ca18:	0101ffc4 	movi	r4,2047
1000ca1c:	513f991e 	bne	r10,r4,1000c884 <__alt_data_end+0xf800c884>
1000ca20:	180b883a 	mov	r5,r3
1000ca24:	3023883a 	mov	r17,r6
1000ca28:	5021883a 	mov	r16,r10
1000ca2c:	3825883a 	mov	r18,r7
1000ca30:	003e8d06 	br	1000c468 <__alt_data_end+0xf800c468>
1000ca34:	80001a1e 	bne	r16,zero,1000caa0 <__subdf3+0x6c4>
1000ca38:	2c48b03a 	or	r4,r5,r17
1000ca3c:	20005526 	beq	r4,zero,1000cb94 <__subdf3+0x7b8>
1000ca40:	0084303a 	nor	r2,zero,r2
1000ca44:	1000511e 	bne	r2,zero,1000cb8c <__subdf3+0x7b0>
1000ca48:	89a3883a 	add	r17,r17,r6
1000ca4c:	194b883a 	add	r5,r3,r5
1000ca50:	898d803a 	cmpltu	r6,r17,r6
1000ca54:	298b883a 	add	r5,r5,r6
1000ca58:	5021883a 	mov	r16,r10
1000ca5c:	003efc06 	br	1000c650 <__alt_data_end+0xf800c650>
1000ca60:	1000341e 	bne	r2,zero,1000cb34 <__subdf3+0x758>
1000ca64:	1984b03a 	or	r2,r3,r6
1000ca68:	10006f26 	beq	r2,zero,1000cc28 <__subdf3+0x84c>
1000ca6c:	180b883a 	mov	r5,r3
1000ca70:	3023883a 	mov	r17,r6
1000ca74:	3825883a 	mov	r18,r7
1000ca78:	0401ffc4 	movi	r16,2047
1000ca7c:	003e7a06 	br	1000c468 <__alt_data_end+0xf800c468>
1000ca80:	2c62b03a 	or	r17,r5,r17
1000ca84:	8822c03a 	cmpne	r17,r17,zero
1000ca88:	0005883a 	mov	r2,zero
1000ca8c:	003f8a06 	br	1000c8b8 <__alt_data_end+0xf800c8b8>
1000ca90:	3821883a 	mov	r16,r7
1000ca94:	000b883a 	mov	r5,zero
1000ca98:	0023883a 	mov	r17,zero
1000ca9c:	003ed206 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000caa0:	0101ffc4 	movi	r4,2047
1000caa4:	51003b26 	beq	r10,r4,1000cb94 <__subdf3+0x7b8>
1000caa8:	0085c83a 	sub	r2,zero,r2
1000caac:	29402034 	orhi	r5,r5,128
1000cab0:	01000e04 	movi	r4,56
1000cab4:	20806216 	blt	r4,r2,1000cc40 <__subdf3+0x864>
1000cab8:	010007c4 	movi	r4,31
1000cabc:	20806b16 	blt	r4,r2,1000cc6c <__subdf3+0x890>
1000cac0:	01000804 	movi	r4,32
1000cac4:	2089c83a 	sub	r4,r4,r2
1000cac8:	2912983a 	sll	r9,r5,r4
1000cacc:	888ed83a 	srl	r7,r17,r2
1000cad0:	8908983a 	sll	r4,r17,r4
1000cad4:	2884d83a 	srl	r2,r5,r2
1000cad8:	49e2b03a 	or	r17,r9,r7
1000cadc:	2008c03a 	cmpne	r4,r4,zero
1000cae0:	8922b03a 	or	r17,r17,r4
1000cae4:	89a3883a 	add	r17,r17,r6
1000cae8:	10c5883a 	add	r2,r2,r3
1000caec:	898d803a 	cmpltu	r6,r17,r6
1000caf0:	118b883a 	add	r5,r2,r6
1000caf4:	5021883a 	mov	r16,r10
1000caf8:	003ed506 	br	1000c650 <__alt_data_end+0xf800c650>
1000cafc:	1984b03a 	or	r2,r3,r6
1000cb00:	103e5926 	beq	r2,zero,1000c468 <__alt_data_end+0xf800c468>
1000cb04:	8989c83a 	sub	r4,r17,r6
1000cb08:	8911803a 	cmpltu	r8,r17,r4
1000cb0c:	28c5c83a 	sub	r2,r5,r3
1000cb10:	1205c83a 	sub	r2,r2,r8
1000cb14:	1200202c 	andhi	r8,r2,128
1000cb18:	403ef926 	beq	r8,zero,1000c700 <__alt_data_end+0xf800c700>
1000cb1c:	3463c83a 	sub	r17,r6,r17
1000cb20:	194bc83a 	sub	r5,r3,r5
1000cb24:	344d803a 	cmpltu	r6,r6,r17
1000cb28:	298bc83a 	sub	r5,r5,r6
1000cb2c:	3825883a 	mov	r18,r7
1000cb30:	003e4d06 	br	1000c468 <__alt_data_end+0xf800c468>
1000cb34:	1984b03a 	or	r2,r3,r6
1000cb38:	10002b26 	beq	r2,zero,1000cbe8 <__subdf3+0x80c>
1000cb3c:	2808d0fa 	srli	r4,r5,3
1000cb40:	8822d0fa 	srli	r17,r17,3
1000cb44:	280a977a 	slli	r5,r5,29
1000cb48:	2080022c 	andhi	r2,r4,8
1000cb4c:	2c62b03a 	or	r17,r5,r17
1000cb50:	10000826 	beq	r2,zero,1000cb74 <__subdf3+0x798>
1000cb54:	1810d0fa 	srli	r8,r3,3
1000cb58:	4080022c 	andhi	r2,r8,8
1000cb5c:	1000051e 	bne	r2,zero,1000cb74 <__subdf3+0x798>
1000cb60:	300cd0fa 	srli	r6,r6,3
1000cb64:	1804977a 	slli	r2,r3,29
1000cb68:	4009883a 	mov	r4,r8
1000cb6c:	3825883a 	mov	r18,r7
1000cb70:	11a2b03a 	or	r17,r2,r6
1000cb74:	880ad77a 	srli	r5,r17,29
1000cb78:	200890fa 	slli	r4,r4,3
1000cb7c:	882290fa 	slli	r17,r17,3
1000cb80:	0401ffc4 	movi	r16,2047
1000cb84:	290ab03a 	or	r5,r5,r4
1000cb88:	003e3706 	br	1000c468 <__alt_data_end+0xf800c468>
1000cb8c:	0101ffc4 	movi	r4,2047
1000cb90:	513fc71e 	bne	r10,r4,1000cab0 <__alt_data_end+0xf800cab0>
1000cb94:	180b883a 	mov	r5,r3
1000cb98:	3023883a 	mov	r17,r6
1000cb9c:	5021883a 	mov	r16,r10
1000cba0:	003e3106 	br	1000c468 <__alt_data_end+0xf800c468>
1000cba4:	10002d26 	beq	r2,zero,1000cc5c <__subdf3+0x880>
1000cba8:	1984b03a 	or	r2,r3,r6
1000cbac:	10000e26 	beq	r2,zero,1000cbe8 <__subdf3+0x80c>
1000cbb0:	2808d0fa 	srli	r4,r5,3
1000cbb4:	8822d0fa 	srli	r17,r17,3
1000cbb8:	280a977a 	slli	r5,r5,29
1000cbbc:	2080022c 	andhi	r2,r4,8
1000cbc0:	2c62b03a 	or	r17,r5,r17
1000cbc4:	103feb26 	beq	r2,zero,1000cb74 <__alt_data_end+0xf800cb74>
1000cbc8:	180ed0fa 	srli	r7,r3,3
1000cbcc:	3880022c 	andhi	r2,r7,8
1000cbd0:	103fe81e 	bne	r2,zero,1000cb74 <__alt_data_end+0xf800cb74>
1000cbd4:	300cd0fa 	srli	r6,r6,3
1000cbd8:	1804977a 	slli	r2,r3,29
1000cbdc:	3809883a 	mov	r4,r7
1000cbe0:	11a2b03a 	or	r17,r2,r6
1000cbe4:	003fe306 	br	1000cb74 <__alt_data_end+0xf800cb74>
1000cbe8:	0401ffc4 	movi	r16,2047
1000cbec:	003e1e06 	br	1000c468 <__alt_data_end+0xf800c468>
1000cbf0:	0005883a 	mov	r2,zero
1000cbf4:	003f8306 	br	1000ca04 <__alt_data_end+0xf800ca04>
1000cbf8:	113ff804 	addi	r4,r2,-32
1000cbfc:	02000804 	movi	r8,32
1000cc00:	2908d83a 	srl	r4,r5,r4
1000cc04:	12002526 	beq	r2,r8,1000cc9c <__subdf3+0x8c0>
1000cc08:	02001004 	movi	r8,64
1000cc0c:	4085c83a 	sub	r2,r8,r2
1000cc10:	288a983a 	sll	r5,r5,r2
1000cc14:	2c62b03a 	or	r17,r5,r17
1000cc18:	8822c03a 	cmpne	r17,r17,zero
1000cc1c:	8922b03a 	or	r17,r17,r4
1000cc20:	0005883a 	mov	r2,zero
1000cc24:	003f2406 	br	1000c8b8 <__alt_data_end+0xf800c8b8>
1000cc28:	01402034 	movhi	r5,128
1000cc2c:	0011883a 	mov	r8,zero
1000cc30:	297fffc4 	addi	r5,r5,-1
1000cc34:	047ffe04 	movi	r17,-8
1000cc38:	0401ffc4 	movi	r16,2047
1000cc3c:	003e6a06 	br	1000c5e8 <__alt_data_end+0xf800c5e8>
1000cc40:	2c62b03a 	or	r17,r5,r17
1000cc44:	8822c03a 	cmpne	r17,r17,zero
1000cc48:	0005883a 	mov	r2,zero
1000cc4c:	003fa506 	br	1000cae4 <__alt_data_end+0xf800cae4>
1000cc50:	180b883a 	mov	r5,r3
1000cc54:	3023883a 	mov	r17,r6
1000cc58:	003e0306 	br	1000c468 <__alt_data_end+0xf800c468>
1000cc5c:	180b883a 	mov	r5,r3
1000cc60:	3023883a 	mov	r17,r6
1000cc64:	0401ffc4 	movi	r16,2047
1000cc68:	003dff06 	br	1000c468 <__alt_data_end+0xf800c468>
1000cc6c:	113ff804 	addi	r4,r2,-32
1000cc70:	01c00804 	movi	r7,32
1000cc74:	2908d83a 	srl	r4,r5,r4
1000cc78:	11c00a26 	beq	r2,r7,1000cca4 <__subdf3+0x8c8>
1000cc7c:	01c01004 	movi	r7,64
1000cc80:	3885c83a 	sub	r2,r7,r2
1000cc84:	288a983a 	sll	r5,r5,r2
1000cc88:	2c62b03a 	or	r17,r5,r17
1000cc8c:	8822c03a 	cmpne	r17,r17,zero
1000cc90:	8922b03a 	or	r17,r17,r4
1000cc94:	0005883a 	mov	r2,zero
1000cc98:	003f9206 	br	1000cae4 <__alt_data_end+0xf800cae4>
1000cc9c:	000b883a 	mov	r5,zero
1000cca0:	003fdc06 	br	1000cc14 <__alt_data_end+0xf800cc14>
1000cca4:	000b883a 	mov	r5,zero
1000cca8:	003ff706 	br	1000cc88 <__alt_data_end+0xf800cc88>

1000ccac <__fixdfsi>:
1000ccac:	2806d53a 	srli	r3,r5,20
1000ccb0:	00800434 	movhi	r2,16
1000ccb4:	10bfffc4 	addi	r2,r2,-1
1000ccb8:	18c1ffcc 	andi	r3,r3,2047
1000ccbc:	0180ff84 	movi	r6,1022
1000ccc0:	2884703a 	and	r2,r5,r2
1000ccc4:	280ad7fa 	srli	r5,r5,31
1000ccc8:	30c0130e 	bge	r6,r3,1000cd18 <__fixdfsi+0x6c>
1000cccc:	01810744 	movi	r6,1053
1000ccd0:	30c00d16 	blt	r6,r3,1000cd08 <__fixdfsi+0x5c>
1000ccd4:	01810cc4 	movi	r6,1075
1000ccd8:	30cdc83a 	sub	r6,r6,r3
1000ccdc:	01c007c4 	movi	r7,31
1000cce0:	10800434 	orhi	r2,r2,16
1000cce4:	39800e0e 	bge	r7,r6,1000cd20 <__fixdfsi+0x74>
1000cce8:	010104c4 	movi	r4,1043
1000ccec:	20c7c83a 	sub	r3,r4,r3
1000ccf0:	10c6d83a 	srl	r3,r2,r3
1000ccf4:	29403fcc 	andi	r5,r5,255
1000ccf8:	0145c83a 	sub	r2,zero,r5
1000ccfc:	1884f03a 	xor	r2,r3,r2
1000cd00:	1145883a 	add	r2,r2,r5
1000cd04:	f800283a 	ret
1000cd08:	00a00034 	movhi	r2,32768
1000cd0c:	10bfffc4 	addi	r2,r2,-1
1000cd10:	2885883a 	add	r2,r5,r2
1000cd14:	f800283a 	ret
1000cd18:	0005883a 	mov	r2,zero
1000cd1c:	f800283a 	ret
1000cd20:	18fefb44 	addi	r3,r3,-1043
1000cd24:	2188d83a 	srl	r4,r4,r6
1000cd28:	10c6983a 	sll	r3,r2,r3
1000cd2c:	20c6b03a 	or	r3,r4,r3
1000cd30:	003ff006 	br	1000ccf4 <__alt_data_end+0xf800ccf4>

1000cd34 <__floatsidf>:
1000cd34:	defffd04 	addi	sp,sp,-12
1000cd38:	dc400115 	stw	r17,4(sp)
1000cd3c:	dfc00215 	stw	ra,8(sp)
1000cd40:	dc000015 	stw	r16,0(sp)
1000cd44:	2023883a 	mov	r17,r4
1000cd48:	20001426 	beq	r4,zero,1000cd9c <__floatsidf+0x68>
1000cd4c:	2020d7fa 	srli	r16,r4,31
1000cd50:	80000126 	beq	r16,zero,1000cd58 <__floatsidf+0x24>
1000cd54:	0123c83a 	sub	r17,zero,r4
1000cd58:	8809883a 	mov	r4,r17
1000cd5c:	000cea80 	call	1000cea8 <__clzsi2>
1000cd60:	01410784 	movi	r5,1054
1000cd64:	00c00284 	movi	r3,10
1000cd68:	288bc83a 	sub	r5,r5,r2
1000cd6c:	18801c16 	blt	r3,r2,1000cde0 <__floatsidf+0xac>
1000cd70:	00c002c4 	movi	r3,11
1000cd74:	1887c83a 	sub	r3,r3,r2
1000cd78:	88c8d83a 	srl	r4,r17,r3
1000cd7c:	00c00434 	movhi	r3,16
1000cd80:	18ffffc4 	addi	r3,r3,-1
1000cd84:	10800544 	addi	r2,r2,21
1000cd88:	20c8703a 	and	r4,r4,r3
1000cd8c:	8884983a 	sll	r2,r17,r2
1000cd90:	28c1ffcc 	andi	r3,r5,2047
1000cd94:	800d883a 	mov	r6,r16
1000cd98:	00000406 	br	1000cdac <__floatsidf+0x78>
1000cd9c:	000d883a 	mov	r6,zero
1000cda0:	0007883a 	mov	r3,zero
1000cda4:	0009883a 	mov	r4,zero
1000cda8:	0005883a 	mov	r2,zero
1000cdac:	180a953a 	slli	r5,r3,20
1000cdb0:	31803fcc 	andi	r6,r6,255
1000cdb4:	00c00434 	movhi	r3,16
1000cdb8:	300c97fa 	slli	r6,r6,31
1000cdbc:	18ffffc4 	addi	r3,r3,-1
1000cdc0:	20c6703a 	and	r3,r4,r3
1000cdc4:	1946b03a 	or	r3,r3,r5
1000cdc8:	1986b03a 	or	r3,r3,r6
1000cdcc:	dfc00217 	ldw	ra,8(sp)
1000cdd0:	dc400117 	ldw	r17,4(sp)
1000cdd4:	dc000017 	ldw	r16,0(sp)
1000cdd8:	dec00304 	addi	sp,sp,12
1000cddc:	f800283a 	ret
1000cde0:	10fffd44 	addi	r3,r2,-11
1000cde4:	88c8983a 	sll	r4,r17,r3
1000cde8:	00800434 	movhi	r2,16
1000cdec:	10bfffc4 	addi	r2,r2,-1
1000cdf0:	2088703a 	and	r4,r4,r2
1000cdf4:	28c1ffcc 	andi	r3,r5,2047
1000cdf8:	800d883a 	mov	r6,r16
1000cdfc:	0005883a 	mov	r2,zero
1000ce00:	003fea06 	br	1000cdac <__alt_data_end+0xf800cdac>

1000ce04 <__floatunsidf>:
1000ce04:	defffe04 	addi	sp,sp,-8
1000ce08:	dc000015 	stw	r16,0(sp)
1000ce0c:	dfc00115 	stw	ra,4(sp)
1000ce10:	2021883a 	mov	r16,r4
1000ce14:	20001026 	beq	r4,zero,1000ce58 <__floatunsidf+0x54>
1000ce18:	000cea80 	call	1000cea8 <__clzsi2>
1000ce1c:	01410784 	movi	r5,1054
1000ce20:	100d883a 	mov	r6,r2
1000ce24:	288bc83a 	sub	r5,r5,r2
1000ce28:	00800284 	movi	r2,10
1000ce2c:	11801616 	blt	r2,r6,1000ce88 <__floatunsidf+0x84>
1000ce30:	008002c4 	movi	r2,11
1000ce34:	1185c83a 	sub	r2,r2,r6
1000ce38:	8084d83a 	srl	r2,r16,r2
1000ce3c:	00c00434 	movhi	r3,16
1000ce40:	31c00544 	addi	r7,r6,21
1000ce44:	18ffffc4 	addi	r3,r3,-1
1000ce48:	81e0983a 	sll	r16,r16,r7
1000ce4c:	10cc703a 	and	r6,r2,r3
1000ce50:	2941ffcc 	andi	r5,r5,2047
1000ce54:	00000206 	br	1000ce60 <__floatunsidf+0x5c>
1000ce58:	000b883a 	mov	r5,zero
1000ce5c:	000d883a 	mov	r6,zero
1000ce60:	280a953a 	slli	r5,r5,20
1000ce64:	00c00434 	movhi	r3,16
1000ce68:	18ffffc4 	addi	r3,r3,-1
1000ce6c:	30c6703a 	and	r3,r6,r3
1000ce70:	8005883a 	mov	r2,r16
1000ce74:	1946b03a 	or	r3,r3,r5
1000ce78:	dfc00117 	ldw	ra,4(sp)
1000ce7c:	dc000017 	ldw	r16,0(sp)
1000ce80:	dec00204 	addi	sp,sp,8
1000ce84:	f800283a 	ret
1000ce88:	31bffd44 	addi	r6,r6,-11
1000ce8c:	818c983a 	sll	r6,r16,r6
1000ce90:	00800434 	movhi	r2,16
1000ce94:	10bfffc4 	addi	r2,r2,-1
1000ce98:	2941ffcc 	andi	r5,r5,2047
1000ce9c:	0021883a 	mov	r16,zero
1000cea0:	308c703a 	and	r6,r6,r2
1000cea4:	003fee06 	br	1000ce60 <__alt_data_end+0xf800ce60>

1000cea8 <__clzsi2>:
1000cea8:	00bfffd4 	movui	r2,65535
1000ceac:	11000b36 	bltu	r2,r4,1000cedc <__clzsi2+0x34>
1000ceb0:	00803fc4 	movi	r2,255
1000ceb4:	1100122e 	bgeu	r2,r4,1000cf00 <__clzsi2+0x58>
1000ceb8:	00c00204 	movi	r3,8
1000cebc:	01400604 	movi	r5,24
1000cec0:	20c8d83a 	srl	r4,r4,r3
1000cec4:	00840074 	movhi	r2,4097
1000cec8:	10be3004 	addi	r2,r2,-1856
1000cecc:	1109883a 	add	r4,r2,r4
1000ced0:	20800003 	ldbu	r2,0(r4)
1000ced4:	2885c83a 	sub	r2,r5,r2
1000ced8:	f800283a 	ret
1000cedc:	00804034 	movhi	r2,256
1000cee0:	10bfffc4 	addi	r2,r2,-1
1000cee4:	11000336 	bltu	r2,r4,1000cef4 <__clzsi2+0x4c>
1000cee8:	00c00404 	movi	r3,16
1000ceec:	180b883a 	mov	r5,r3
1000cef0:	003ff306 	br	1000cec0 <__alt_data_end+0xf800cec0>
1000cef4:	00c00604 	movi	r3,24
1000cef8:	01400204 	movi	r5,8
1000cefc:	003ff006 	br	1000cec0 <__alt_data_end+0xf800cec0>
1000cf00:	0007883a 	mov	r3,zero
1000cf04:	01400804 	movi	r5,32
1000cf08:	003fed06 	br	1000cec0 <__alt_data_end+0xf800cec0>

1000cf0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000cf0c:	defffe04 	addi	sp,sp,-8
1000cf10:	dfc00115 	stw	ra,4(sp)
1000cf14:	df000015 	stw	fp,0(sp)
1000cf18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000cf1c:	00840074 	movhi	r2,4097
1000cf20:	10853304 	addi	r2,r2,5324
1000cf24:	10800017 	ldw	r2,0(r2)
1000cf28:	10000526 	beq	r2,zero,1000cf40 <alt_get_errno+0x34>
1000cf2c:	00840074 	movhi	r2,4097
1000cf30:	10853304 	addi	r2,r2,5324
1000cf34:	10800017 	ldw	r2,0(r2)
1000cf38:	103ee83a 	callr	r2
1000cf3c:	00000206 	br	1000cf48 <alt_get_errno+0x3c>
1000cf40:	00840074 	movhi	r2,4097
1000cf44:	108bf904 	addi	r2,r2,12260
}
1000cf48:	e037883a 	mov	sp,fp
1000cf4c:	dfc00117 	ldw	ra,4(sp)
1000cf50:	df000017 	ldw	fp,0(sp)
1000cf54:	dec00204 	addi	sp,sp,8
1000cf58:	f800283a 	ret

1000cf5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000cf5c:	defffb04 	addi	sp,sp,-20
1000cf60:	dfc00415 	stw	ra,16(sp)
1000cf64:	df000315 	stw	fp,12(sp)
1000cf68:	df000304 	addi	fp,sp,12
1000cf6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000cf70:	e0bfff17 	ldw	r2,-4(fp)
1000cf74:	10000816 	blt	r2,zero,1000cf98 <close+0x3c>
1000cf78:	e13fff17 	ldw	r4,-4(fp)
1000cf7c:	01400304 	movi	r5,12
1000cf80:	00005a80 	call	100005a8 <__mulsi3>
1000cf84:	1007883a 	mov	r3,r2
1000cf88:	00840074 	movhi	r2,4097
1000cf8c:	1080b004 	addi	r2,r2,704
1000cf90:	1885883a 	add	r2,r3,r2
1000cf94:	00000106 	br	1000cf9c <close+0x40>
1000cf98:	0005883a 	mov	r2,zero
1000cf9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000cfa0:	e0bffd17 	ldw	r2,-12(fp)
1000cfa4:	10001926 	beq	r2,zero,1000d00c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000cfa8:	e0bffd17 	ldw	r2,-12(fp)
1000cfac:	10800017 	ldw	r2,0(r2)
1000cfb0:	10800417 	ldw	r2,16(r2)
1000cfb4:	10000626 	beq	r2,zero,1000cfd0 <close+0x74>
1000cfb8:	e0bffd17 	ldw	r2,-12(fp)
1000cfbc:	10800017 	ldw	r2,0(r2)
1000cfc0:	10800417 	ldw	r2,16(r2)
1000cfc4:	e13ffd17 	ldw	r4,-12(fp)
1000cfc8:	103ee83a 	callr	r2
1000cfcc:	00000106 	br	1000cfd4 <close+0x78>
1000cfd0:	0005883a 	mov	r2,zero
1000cfd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000cfd8:	e13fff17 	ldw	r4,-4(fp)
1000cfdc:	000d6800 	call	1000d680 <alt_release_fd>
    if (rval < 0)
1000cfe0:	e0bffe17 	ldw	r2,-8(fp)
1000cfe4:	1000070e 	bge	r2,zero,1000d004 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000cfe8:	000cf0c0 	call	1000cf0c <alt_get_errno>
1000cfec:	1007883a 	mov	r3,r2
1000cff0:	e0bffe17 	ldw	r2,-8(fp)
1000cff4:	0085c83a 	sub	r2,zero,r2
1000cff8:	18800015 	stw	r2,0(r3)
      return -1;
1000cffc:	00bfffc4 	movi	r2,-1
1000d000:	00000706 	br	1000d020 <close+0xc4>
    }
    return 0;
1000d004:	0005883a 	mov	r2,zero
1000d008:	00000506 	br	1000d020 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d00c:	000cf0c0 	call	1000cf0c <alt_get_errno>
1000d010:	1007883a 	mov	r3,r2
1000d014:	00801444 	movi	r2,81
1000d018:	18800015 	stw	r2,0(r3)
    return -1;
1000d01c:	00bfffc4 	movi	r2,-1
  }
}
1000d020:	e037883a 	mov	sp,fp
1000d024:	dfc00117 	ldw	ra,4(sp)
1000d028:	df000017 	ldw	fp,0(sp)
1000d02c:	dec00204 	addi	sp,sp,8
1000d030:	f800283a 	ret

1000d034 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d034:	defffc04 	addi	sp,sp,-16
1000d038:	df000315 	stw	fp,12(sp)
1000d03c:	df000304 	addi	fp,sp,12
1000d040:	e13ffd15 	stw	r4,-12(fp)
1000d044:	e17ffe15 	stw	r5,-8(fp)
1000d048:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d04c:	e0bfff17 	ldw	r2,-4(fp)
}
1000d050:	e037883a 	mov	sp,fp
1000d054:	df000017 	ldw	fp,0(sp)
1000d058:	dec00104 	addi	sp,sp,4
1000d05c:	f800283a 	ret

1000d060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d060:	defffe04 	addi	sp,sp,-8
1000d064:	dfc00115 	stw	ra,4(sp)
1000d068:	df000015 	stw	fp,0(sp)
1000d06c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d070:	00840074 	movhi	r2,4097
1000d074:	10853304 	addi	r2,r2,5324
1000d078:	10800017 	ldw	r2,0(r2)
1000d07c:	10000526 	beq	r2,zero,1000d094 <alt_get_errno+0x34>
1000d080:	00840074 	movhi	r2,4097
1000d084:	10853304 	addi	r2,r2,5324
1000d088:	10800017 	ldw	r2,0(r2)
1000d08c:	103ee83a 	callr	r2
1000d090:	00000206 	br	1000d09c <alt_get_errno+0x3c>
1000d094:	00840074 	movhi	r2,4097
1000d098:	108bf904 	addi	r2,r2,12260
}
1000d09c:	e037883a 	mov	sp,fp
1000d0a0:	dfc00117 	ldw	ra,4(sp)
1000d0a4:	df000017 	ldw	fp,0(sp)
1000d0a8:	dec00204 	addi	sp,sp,8
1000d0ac:	f800283a 	ret

1000d0b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d0b0:	defffb04 	addi	sp,sp,-20
1000d0b4:	dfc00415 	stw	ra,16(sp)
1000d0b8:	df000315 	stw	fp,12(sp)
1000d0bc:	df000304 	addi	fp,sp,12
1000d0c0:	e13ffe15 	stw	r4,-8(fp)
1000d0c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d0c8:	e0bffe17 	ldw	r2,-8(fp)
1000d0cc:	10000816 	blt	r2,zero,1000d0f0 <fstat+0x40>
1000d0d0:	e13ffe17 	ldw	r4,-8(fp)
1000d0d4:	01400304 	movi	r5,12
1000d0d8:	00005a80 	call	100005a8 <__mulsi3>
1000d0dc:	1007883a 	mov	r3,r2
1000d0e0:	00840074 	movhi	r2,4097
1000d0e4:	1080b004 	addi	r2,r2,704
1000d0e8:	1885883a 	add	r2,r3,r2
1000d0ec:	00000106 	br	1000d0f4 <fstat+0x44>
1000d0f0:	0005883a 	mov	r2,zero
1000d0f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d0f8:	e0bffd17 	ldw	r2,-12(fp)
1000d0fc:	10001026 	beq	r2,zero,1000d140 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d100:	e0bffd17 	ldw	r2,-12(fp)
1000d104:	10800017 	ldw	r2,0(r2)
1000d108:	10800817 	ldw	r2,32(r2)
1000d10c:	10000726 	beq	r2,zero,1000d12c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000d110:	e0bffd17 	ldw	r2,-12(fp)
1000d114:	10800017 	ldw	r2,0(r2)
1000d118:	10800817 	ldw	r2,32(r2)
1000d11c:	e13ffd17 	ldw	r4,-12(fp)
1000d120:	e17fff17 	ldw	r5,-4(fp)
1000d124:	103ee83a 	callr	r2
1000d128:	00000a06 	br	1000d154 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d12c:	e0bfff17 	ldw	r2,-4(fp)
1000d130:	00c80004 	movi	r3,8192
1000d134:	10c00115 	stw	r3,4(r2)
      return 0;
1000d138:	0005883a 	mov	r2,zero
1000d13c:	00000506 	br	1000d154 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d140:	000d0600 	call	1000d060 <alt_get_errno>
1000d144:	1007883a 	mov	r3,r2
1000d148:	00801444 	movi	r2,81
1000d14c:	18800015 	stw	r2,0(r3)
    return -1;
1000d150:	00bfffc4 	movi	r2,-1
  }
}
1000d154:	e037883a 	mov	sp,fp
1000d158:	dfc00117 	ldw	ra,4(sp)
1000d15c:	df000017 	ldw	fp,0(sp)
1000d160:	dec00204 	addi	sp,sp,8
1000d164:	f800283a 	ret

1000d168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d168:	defffe04 	addi	sp,sp,-8
1000d16c:	dfc00115 	stw	ra,4(sp)
1000d170:	df000015 	stw	fp,0(sp)
1000d174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d178:	00840074 	movhi	r2,4097
1000d17c:	10853304 	addi	r2,r2,5324
1000d180:	10800017 	ldw	r2,0(r2)
1000d184:	10000526 	beq	r2,zero,1000d19c <alt_get_errno+0x34>
1000d188:	00840074 	movhi	r2,4097
1000d18c:	10853304 	addi	r2,r2,5324
1000d190:	10800017 	ldw	r2,0(r2)
1000d194:	103ee83a 	callr	r2
1000d198:	00000206 	br	1000d1a4 <alt_get_errno+0x3c>
1000d19c:	00840074 	movhi	r2,4097
1000d1a0:	108bf904 	addi	r2,r2,12260
}
1000d1a4:	e037883a 	mov	sp,fp
1000d1a8:	dfc00117 	ldw	ra,4(sp)
1000d1ac:	df000017 	ldw	fp,0(sp)
1000d1b0:	dec00204 	addi	sp,sp,8
1000d1b4:	f800283a 	ret

1000d1b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d1b8:	deffed04 	addi	sp,sp,-76
1000d1bc:	dfc01215 	stw	ra,72(sp)
1000d1c0:	df001115 	stw	fp,68(sp)
1000d1c4:	df001104 	addi	fp,sp,68
1000d1c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d1cc:	e0bfff17 	ldw	r2,-4(fp)
1000d1d0:	10000816 	blt	r2,zero,1000d1f4 <isatty+0x3c>
1000d1d4:	e13fff17 	ldw	r4,-4(fp)
1000d1d8:	01400304 	movi	r5,12
1000d1dc:	00005a80 	call	100005a8 <__mulsi3>
1000d1e0:	1007883a 	mov	r3,r2
1000d1e4:	00840074 	movhi	r2,4097
1000d1e8:	1080b004 	addi	r2,r2,704
1000d1ec:	1885883a 	add	r2,r3,r2
1000d1f0:	00000106 	br	1000d1f8 <isatty+0x40>
1000d1f4:	0005883a 	mov	r2,zero
1000d1f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000d1fc:	e0bfef17 	ldw	r2,-68(fp)
1000d200:	10000e26 	beq	r2,zero,1000d23c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000d204:	e0bfef17 	ldw	r2,-68(fp)
1000d208:	10800017 	ldw	r2,0(r2)
1000d20c:	10800817 	ldw	r2,32(r2)
1000d210:	1000021e 	bne	r2,zero,1000d21c <isatty+0x64>
    {
      return 1;
1000d214:	00800044 	movi	r2,1
1000d218:	00000d06 	br	1000d250 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000d21c:	e0bff004 	addi	r2,fp,-64
1000d220:	e13fff17 	ldw	r4,-4(fp)
1000d224:	100b883a 	mov	r5,r2
1000d228:	000d0b00 	call	1000d0b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000d22c:	e0bff117 	ldw	r2,-60(fp)
1000d230:	10880020 	cmpeqi	r2,r2,8192
1000d234:	10803fcc 	andi	r2,r2,255
1000d238:	00000506 	br	1000d250 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d23c:	000d1680 	call	1000d168 <alt_get_errno>
1000d240:	1007883a 	mov	r3,r2
1000d244:	00801444 	movi	r2,81
1000d248:	18800015 	stw	r2,0(r3)
    return 0;
1000d24c:	0005883a 	mov	r2,zero
  }
}
1000d250:	e037883a 	mov	sp,fp
1000d254:	dfc00117 	ldw	ra,4(sp)
1000d258:	df000017 	ldw	fp,0(sp)
1000d25c:	dec00204 	addi	sp,sp,8
1000d260:	f800283a 	ret

1000d264 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000d264:	defffc04 	addi	sp,sp,-16
1000d268:	df000315 	stw	fp,12(sp)
1000d26c:	df000304 	addi	fp,sp,12
1000d270:	e13ffd15 	stw	r4,-12(fp)
1000d274:	e17ffe15 	stw	r5,-8(fp)
1000d278:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000d27c:	e0fffe17 	ldw	r3,-8(fp)
1000d280:	e0bffd17 	ldw	r2,-12(fp)
1000d284:	18800c26 	beq	r3,r2,1000d2b8 <alt_load_section+0x54>
  {
    while( to != end )
1000d288:	00000806 	br	1000d2ac <alt_load_section+0x48>
    {
      *to++ = *from++;
1000d28c:	e0bffe17 	ldw	r2,-8(fp)
1000d290:	10c00104 	addi	r3,r2,4
1000d294:	e0fffe15 	stw	r3,-8(fp)
1000d298:	e0fffd17 	ldw	r3,-12(fp)
1000d29c:	19000104 	addi	r4,r3,4
1000d2a0:	e13ffd15 	stw	r4,-12(fp)
1000d2a4:	18c00017 	ldw	r3,0(r3)
1000d2a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000d2ac:	e0fffe17 	ldw	r3,-8(fp)
1000d2b0:	e0bfff17 	ldw	r2,-4(fp)
1000d2b4:	18bff51e 	bne	r3,r2,1000d28c <__alt_data_end+0xf800d28c>
    {
      *to++ = *from++;
    }
  }
}
1000d2b8:	e037883a 	mov	sp,fp
1000d2bc:	df000017 	ldw	fp,0(sp)
1000d2c0:	dec00104 	addi	sp,sp,4
1000d2c4:	f800283a 	ret

1000d2c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000d2c8:	defffe04 	addi	sp,sp,-8
1000d2cc:	dfc00115 	stw	ra,4(sp)
1000d2d0:	df000015 	stw	fp,0(sp)
1000d2d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000d2d8:	01040074 	movhi	r4,4097
1000d2dc:	21053804 	addi	r4,r4,5344
1000d2e0:	01440074 	movhi	r5,4097
1000d2e4:	297e7d04 	addi	r5,r5,-1548
1000d2e8:	01840074 	movhi	r6,4097
1000d2ec:	31853804 	addi	r6,r6,5344
1000d2f0:	000d2640 	call	1000d264 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000d2f4:	01040034 	movhi	r4,4096
1000d2f8:	21000804 	addi	r4,r4,32
1000d2fc:	01440034 	movhi	r5,4096
1000d300:	29400804 	addi	r5,r5,32
1000d304:	01840034 	movhi	r6,4096
1000d308:	31808b04 	addi	r6,r6,556
1000d30c:	000d2640 	call	1000d264 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000d310:	01040074 	movhi	r4,4097
1000d314:	213d9904 	addi	r4,r4,-2460
1000d318:	01440074 	movhi	r5,4097
1000d31c:	297d9904 	addi	r5,r5,-2460
1000d320:	01840074 	movhi	r6,4097
1000d324:	31be7d04 	addi	r6,r6,-1548
1000d328:	000d2640 	call	1000d264 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000d32c:	000e5400 	call	1000e540 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000d330:	000e7080 	call	1000e708 <alt_icache_flush_all>
}
1000d334:	e037883a 	mov	sp,fp
1000d338:	dfc00117 	ldw	ra,4(sp)
1000d33c:	df000017 	ldw	fp,0(sp)
1000d340:	dec00204 	addi	sp,sp,8
1000d344:	f800283a 	ret

1000d348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d348:	defffe04 	addi	sp,sp,-8
1000d34c:	dfc00115 	stw	ra,4(sp)
1000d350:	df000015 	stw	fp,0(sp)
1000d354:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d358:	00840074 	movhi	r2,4097
1000d35c:	10853304 	addi	r2,r2,5324
1000d360:	10800017 	ldw	r2,0(r2)
1000d364:	10000526 	beq	r2,zero,1000d37c <alt_get_errno+0x34>
1000d368:	00840074 	movhi	r2,4097
1000d36c:	10853304 	addi	r2,r2,5324
1000d370:	10800017 	ldw	r2,0(r2)
1000d374:	103ee83a 	callr	r2
1000d378:	00000206 	br	1000d384 <alt_get_errno+0x3c>
1000d37c:	00840074 	movhi	r2,4097
1000d380:	108bf904 	addi	r2,r2,12260
}
1000d384:	e037883a 	mov	sp,fp
1000d388:	dfc00117 	ldw	ra,4(sp)
1000d38c:	df000017 	ldw	fp,0(sp)
1000d390:	dec00204 	addi	sp,sp,8
1000d394:	f800283a 	ret

1000d398 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000d398:	defff904 	addi	sp,sp,-28
1000d39c:	dfc00615 	stw	ra,24(sp)
1000d3a0:	df000515 	stw	fp,20(sp)
1000d3a4:	df000504 	addi	fp,sp,20
1000d3a8:	e13ffd15 	stw	r4,-12(fp)
1000d3ac:	e17ffe15 	stw	r5,-8(fp)
1000d3b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000d3b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d3b8:	e0bffd17 	ldw	r2,-12(fp)
1000d3bc:	10000816 	blt	r2,zero,1000d3e0 <lseek+0x48>
1000d3c0:	e13ffd17 	ldw	r4,-12(fp)
1000d3c4:	01400304 	movi	r5,12
1000d3c8:	00005a80 	call	100005a8 <__mulsi3>
1000d3cc:	1007883a 	mov	r3,r2
1000d3d0:	00840074 	movhi	r2,4097
1000d3d4:	1080b004 	addi	r2,r2,704
1000d3d8:	1885883a 	add	r2,r3,r2
1000d3dc:	00000106 	br	1000d3e4 <lseek+0x4c>
1000d3e0:	0005883a 	mov	r2,zero
1000d3e4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000d3e8:	e0bffc17 	ldw	r2,-16(fp)
1000d3ec:	10001026 	beq	r2,zero,1000d430 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000d3f0:	e0bffc17 	ldw	r2,-16(fp)
1000d3f4:	10800017 	ldw	r2,0(r2)
1000d3f8:	10800717 	ldw	r2,28(r2)
1000d3fc:	10000926 	beq	r2,zero,1000d424 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000d400:	e0bffc17 	ldw	r2,-16(fp)
1000d404:	10800017 	ldw	r2,0(r2)
1000d408:	10800717 	ldw	r2,28(r2)
1000d40c:	e13ffc17 	ldw	r4,-16(fp)
1000d410:	e17ffe17 	ldw	r5,-8(fp)
1000d414:	e1bfff17 	ldw	r6,-4(fp)
1000d418:	103ee83a 	callr	r2
1000d41c:	e0bffb15 	stw	r2,-20(fp)
1000d420:	00000506 	br	1000d438 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000d424:	00bfde84 	movi	r2,-134
1000d428:	e0bffb15 	stw	r2,-20(fp)
1000d42c:	00000206 	br	1000d438 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000d430:	00bfebc4 	movi	r2,-81
1000d434:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000d438:	e0bffb17 	ldw	r2,-20(fp)
1000d43c:	1000070e 	bge	r2,zero,1000d45c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000d440:	000d3480 	call	1000d348 <alt_get_errno>
1000d444:	1007883a 	mov	r3,r2
1000d448:	e0bffb17 	ldw	r2,-20(fp)
1000d44c:	0085c83a 	sub	r2,zero,r2
1000d450:	18800015 	stw	r2,0(r3)
    rc = -1;
1000d454:	00bfffc4 	movi	r2,-1
1000d458:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000d45c:	e0bffb17 	ldw	r2,-20(fp)
}
1000d460:	e037883a 	mov	sp,fp
1000d464:	dfc00117 	ldw	ra,4(sp)
1000d468:	df000017 	ldw	fp,0(sp)
1000d46c:	dec00204 	addi	sp,sp,8
1000d470:	f800283a 	ret

1000d474 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000d474:	defffd04 	addi	sp,sp,-12
1000d478:	dfc00215 	stw	ra,8(sp)
1000d47c:	df000115 	stw	fp,4(sp)
1000d480:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000d484:	0009883a 	mov	r4,zero
1000d488:	000d9380 	call	1000d938 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000d48c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000d490:	000d96c0 	call	1000d96c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000d494:	01040074 	movhi	r4,4097
1000d498:	213e7304 	addi	r4,r4,-1588
1000d49c:	01440074 	movhi	r5,4097
1000d4a0:	297e7304 	addi	r5,r5,-1588
1000d4a4:	01840074 	movhi	r6,4097
1000d4a8:	31be7304 	addi	r6,r6,-1588
1000d4ac:	000ead40 	call	1000ead4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000d4b0:	000e6500 	call	1000e650 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000d4b4:	01040074 	movhi	r4,4097
1000d4b8:	2139ab04 	addi	r4,r4,-6484
1000d4bc:	000f2c00 	call	1000f2c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000d4c0:	d126d217 	ldw	r4,-25784(gp)
1000d4c4:	d0e6d317 	ldw	r3,-25780(gp)
1000d4c8:	d0a6d417 	ldw	r2,-25776(gp)
1000d4cc:	180b883a 	mov	r5,r3
1000d4d0:	100d883a 	mov	r6,r2
1000d4d4:	00003d40 	call	100003d4 <main>
1000d4d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000d4dc:	01000044 	movi	r4,1
1000d4e0:	000cf5c0 	call	1000cf5c <close>
  exit (result);
1000d4e4:	e13fff17 	ldw	r4,-4(fp)
1000d4e8:	000f2d40 	call	1000f2d4 <exit>

1000d4ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000d4ec:	defffe04 	addi	sp,sp,-8
1000d4f0:	df000115 	stw	fp,4(sp)
1000d4f4:	df000104 	addi	fp,sp,4
1000d4f8:	e13fff15 	stw	r4,-4(fp)
}
1000d4fc:	e037883a 	mov	sp,fp
1000d500:	df000017 	ldw	fp,0(sp)
1000d504:	dec00104 	addi	sp,sp,4
1000d508:	f800283a 	ret

1000d50c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000d50c:	defffe04 	addi	sp,sp,-8
1000d510:	df000115 	stw	fp,4(sp)
1000d514:	df000104 	addi	fp,sp,4
1000d518:	e13fff15 	stw	r4,-4(fp)
}
1000d51c:	e037883a 	mov	sp,fp
1000d520:	df000017 	ldw	fp,0(sp)
1000d524:	dec00104 	addi	sp,sp,4
1000d528:	f800283a 	ret

1000d52c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d52c:	defffe04 	addi	sp,sp,-8
1000d530:	dfc00115 	stw	ra,4(sp)
1000d534:	df000015 	stw	fp,0(sp)
1000d538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d53c:	00840074 	movhi	r2,4097
1000d540:	10853304 	addi	r2,r2,5324
1000d544:	10800017 	ldw	r2,0(r2)
1000d548:	10000526 	beq	r2,zero,1000d560 <alt_get_errno+0x34>
1000d54c:	00840074 	movhi	r2,4097
1000d550:	10853304 	addi	r2,r2,5324
1000d554:	10800017 	ldw	r2,0(r2)
1000d558:	103ee83a 	callr	r2
1000d55c:	00000206 	br	1000d568 <alt_get_errno+0x3c>
1000d560:	00840074 	movhi	r2,4097
1000d564:	108bf904 	addi	r2,r2,12260
}
1000d568:	e037883a 	mov	sp,fp
1000d56c:	dfc00117 	ldw	ra,4(sp)
1000d570:	df000017 	ldw	fp,0(sp)
1000d574:	dec00204 	addi	sp,sp,8
1000d578:	f800283a 	ret

1000d57c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000d57c:	defff904 	addi	sp,sp,-28
1000d580:	dfc00615 	stw	ra,24(sp)
1000d584:	df000515 	stw	fp,20(sp)
1000d588:	df000504 	addi	fp,sp,20
1000d58c:	e13ffd15 	stw	r4,-12(fp)
1000d590:	e17ffe15 	stw	r5,-8(fp)
1000d594:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d598:	e0bffd17 	ldw	r2,-12(fp)
1000d59c:	10000816 	blt	r2,zero,1000d5c0 <read+0x44>
1000d5a0:	e13ffd17 	ldw	r4,-12(fp)
1000d5a4:	01400304 	movi	r5,12
1000d5a8:	00005a80 	call	100005a8 <__mulsi3>
1000d5ac:	1007883a 	mov	r3,r2
1000d5b0:	00840074 	movhi	r2,4097
1000d5b4:	1080b004 	addi	r2,r2,704
1000d5b8:	1885883a 	add	r2,r3,r2
1000d5bc:	00000106 	br	1000d5c4 <read+0x48>
1000d5c0:	0005883a 	mov	r2,zero
1000d5c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d5c8:	e0bffb17 	ldw	r2,-20(fp)
1000d5cc:	10002226 	beq	r2,zero,1000d658 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d5d0:	e0bffb17 	ldw	r2,-20(fp)
1000d5d4:	10800217 	ldw	r2,8(r2)
1000d5d8:	108000cc 	andi	r2,r2,3
1000d5dc:	10800060 	cmpeqi	r2,r2,1
1000d5e0:	1000181e 	bne	r2,zero,1000d644 <read+0xc8>
        (fd->dev->read))
1000d5e4:	e0bffb17 	ldw	r2,-20(fp)
1000d5e8:	10800017 	ldw	r2,0(r2)
1000d5ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d5f0:	10001426 	beq	r2,zero,1000d644 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000d5f4:	e0bffb17 	ldw	r2,-20(fp)
1000d5f8:	10800017 	ldw	r2,0(r2)
1000d5fc:	10800517 	ldw	r2,20(r2)
1000d600:	e0ffff17 	ldw	r3,-4(fp)
1000d604:	e13ffb17 	ldw	r4,-20(fp)
1000d608:	e17ffe17 	ldw	r5,-8(fp)
1000d60c:	180d883a 	mov	r6,r3
1000d610:	103ee83a 	callr	r2
1000d614:	e0bffc15 	stw	r2,-16(fp)
1000d618:	e0bffc17 	ldw	r2,-16(fp)
1000d61c:	1000070e 	bge	r2,zero,1000d63c <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000d620:	000d52c0 	call	1000d52c <alt_get_errno>
1000d624:	1007883a 	mov	r3,r2
1000d628:	e0bffc17 	ldw	r2,-16(fp)
1000d62c:	0085c83a 	sub	r2,zero,r2
1000d630:	18800015 	stw	r2,0(r3)
          return -1;
1000d634:	00bfffc4 	movi	r2,-1
1000d638:	00000c06 	br	1000d66c <read+0xf0>
        }
        return rval;
1000d63c:	e0bffc17 	ldw	r2,-16(fp)
1000d640:	00000a06 	br	1000d66c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000d644:	000d52c0 	call	1000d52c <alt_get_errno>
1000d648:	1007883a 	mov	r3,r2
1000d64c:	00800344 	movi	r2,13
1000d650:	18800015 	stw	r2,0(r3)
1000d654:	00000406 	br	1000d668 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000d658:	000d52c0 	call	1000d52c <alt_get_errno>
1000d65c:	1007883a 	mov	r3,r2
1000d660:	00801444 	movi	r2,81
1000d664:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d668:	00bfffc4 	movi	r2,-1
}
1000d66c:	e037883a 	mov	sp,fp
1000d670:	dfc00117 	ldw	ra,4(sp)
1000d674:	df000017 	ldw	fp,0(sp)
1000d678:	dec00204 	addi	sp,sp,8
1000d67c:	f800283a 	ret

1000d680 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000d680:	defffc04 	addi	sp,sp,-16
1000d684:	dfc00315 	stw	ra,12(sp)
1000d688:	df000215 	stw	fp,8(sp)
1000d68c:	dc000115 	stw	r16,4(sp)
1000d690:	df000204 	addi	fp,sp,8
1000d694:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000d698:	e0bffe17 	ldw	r2,-8(fp)
1000d69c:	108000d0 	cmplti	r2,r2,3
1000d6a0:	1000111e 	bne	r2,zero,1000d6e8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000d6a4:	04040074 	movhi	r16,4097
1000d6a8:	8400b004 	addi	r16,r16,704
1000d6ac:	e0bffe17 	ldw	r2,-8(fp)
1000d6b0:	1009883a 	mov	r4,r2
1000d6b4:	01400304 	movi	r5,12
1000d6b8:	00005a80 	call	100005a8 <__mulsi3>
1000d6bc:	8085883a 	add	r2,r16,r2
1000d6c0:	10800204 	addi	r2,r2,8
1000d6c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000d6c8:	04040074 	movhi	r16,4097
1000d6cc:	8400b004 	addi	r16,r16,704
1000d6d0:	e0bffe17 	ldw	r2,-8(fp)
1000d6d4:	1009883a 	mov	r4,r2
1000d6d8:	01400304 	movi	r5,12
1000d6dc:	00005a80 	call	100005a8 <__mulsi3>
1000d6e0:	8085883a 	add	r2,r16,r2
1000d6e4:	10000015 	stw	zero,0(r2)
  }
}
1000d6e8:	e6ffff04 	addi	sp,fp,-4
1000d6ec:	dfc00217 	ldw	ra,8(sp)
1000d6f0:	df000117 	ldw	fp,4(sp)
1000d6f4:	dc000017 	ldw	r16,0(sp)
1000d6f8:	dec00304 	addi	sp,sp,12
1000d6fc:	f800283a 	ret

1000d700 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000d700:	defff904 	addi	sp,sp,-28
1000d704:	df000615 	stw	fp,24(sp)
1000d708:	df000604 	addi	fp,sp,24
1000d70c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d710:	0005303a 	rdctl	r2,status
1000d714:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d718:	e0fffc17 	ldw	r3,-16(fp)
1000d71c:	00bfff84 	movi	r2,-2
1000d720:	1884703a 	and	r2,r3,r2
1000d724:	1001703a 	wrctl	status,r2
  
  return context;
1000d728:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000d72c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000d730:	d0a00c17 	ldw	r2,-32720(gp)
1000d734:	10c000c4 	addi	r3,r2,3
1000d738:	00bfff04 	movi	r2,-4
1000d73c:	1884703a 	and	r2,r3,r2
1000d740:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000d744:	d0e00c17 	ldw	r3,-32720(gp)
1000d748:	e0bfff17 	ldw	r2,-4(fp)
1000d74c:	1887883a 	add	r3,r3,r2
1000d750:	00860034 	movhi	r2,6144
1000d754:	10800004 	addi	r2,r2,0
1000d758:	10c0062e 	bgeu	r2,r3,1000d774 <sbrk+0x74>
1000d75c:	e0bffa17 	ldw	r2,-24(fp)
1000d760:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d764:	e0bffd17 	ldw	r2,-12(fp)
1000d768:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000d76c:	00bfffc4 	movi	r2,-1
1000d770:	00000b06 	br	1000d7a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000d774:	d0a00c17 	ldw	r2,-32720(gp)
1000d778:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000d77c:	d0e00c17 	ldw	r3,-32720(gp)
1000d780:	e0bfff17 	ldw	r2,-4(fp)
1000d784:	1885883a 	add	r2,r3,r2
1000d788:	d0a00c15 	stw	r2,-32720(gp)
1000d78c:	e0bffa17 	ldw	r2,-24(fp)
1000d790:	e0bffe15 	stw	r2,-8(fp)
1000d794:	e0bffe17 	ldw	r2,-8(fp)
1000d798:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000d79c:	e0bffb17 	ldw	r2,-20(fp)
} 
1000d7a0:	e037883a 	mov	sp,fp
1000d7a4:	df000017 	ldw	fp,0(sp)
1000d7a8:	dec00104 	addi	sp,sp,4
1000d7ac:	f800283a 	ret

1000d7b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d7b0:	defffe04 	addi	sp,sp,-8
1000d7b4:	dfc00115 	stw	ra,4(sp)
1000d7b8:	df000015 	stw	fp,0(sp)
1000d7bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d7c0:	00840074 	movhi	r2,4097
1000d7c4:	10853304 	addi	r2,r2,5324
1000d7c8:	10800017 	ldw	r2,0(r2)
1000d7cc:	10000526 	beq	r2,zero,1000d7e4 <alt_get_errno+0x34>
1000d7d0:	00840074 	movhi	r2,4097
1000d7d4:	10853304 	addi	r2,r2,5324
1000d7d8:	10800017 	ldw	r2,0(r2)
1000d7dc:	103ee83a 	callr	r2
1000d7e0:	00000206 	br	1000d7ec <alt_get_errno+0x3c>
1000d7e4:	00840074 	movhi	r2,4097
1000d7e8:	108bf904 	addi	r2,r2,12260
}
1000d7ec:	e037883a 	mov	sp,fp
1000d7f0:	dfc00117 	ldw	ra,4(sp)
1000d7f4:	df000017 	ldw	fp,0(sp)
1000d7f8:	dec00204 	addi	sp,sp,8
1000d7fc:	f800283a 	ret

1000d800 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000d800:	defff904 	addi	sp,sp,-28
1000d804:	dfc00615 	stw	ra,24(sp)
1000d808:	df000515 	stw	fp,20(sp)
1000d80c:	df000504 	addi	fp,sp,20
1000d810:	e13ffd15 	stw	r4,-12(fp)
1000d814:	e17ffe15 	stw	r5,-8(fp)
1000d818:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d81c:	e0bffd17 	ldw	r2,-12(fp)
1000d820:	10000816 	blt	r2,zero,1000d844 <write+0x44>
1000d824:	e13ffd17 	ldw	r4,-12(fp)
1000d828:	01400304 	movi	r5,12
1000d82c:	00005a80 	call	100005a8 <__mulsi3>
1000d830:	1007883a 	mov	r3,r2
1000d834:	00840074 	movhi	r2,4097
1000d838:	1080b004 	addi	r2,r2,704
1000d83c:	1885883a 	add	r2,r3,r2
1000d840:	00000106 	br	1000d848 <write+0x48>
1000d844:	0005883a 	mov	r2,zero
1000d848:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d84c:	e0bffb17 	ldw	r2,-20(fp)
1000d850:	10002126 	beq	r2,zero,1000d8d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000d854:	e0bffb17 	ldw	r2,-20(fp)
1000d858:	10800217 	ldw	r2,8(r2)
1000d85c:	108000cc 	andi	r2,r2,3
1000d860:	10001826 	beq	r2,zero,1000d8c4 <write+0xc4>
1000d864:	e0bffb17 	ldw	r2,-20(fp)
1000d868:	10800017 	ldw	r2,0(r2)
1000d86c:	10800617 	ldw	r2,24(r2)
1000d870:	10001426 	beq	r2,zero,1000d8c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000d874:	e0bffb17 	ldw	r2,-20(fp)
1000d878:	10800017 	ldw	r2,0(r2)
1000d87c:	10800617 	ldw	r2,24(r2)
1000d880:	e0ffff17 	ldw	r3,-4(fp)
1000d884:	e13ffb17 	ldw	r4,-20(fp)
1000d888:	e17ffe17 	ldw	r5,-8(fp)
1000d88c:	180d883a 	mov	r6,r3
1000d890:	103ee83a 	callr	r2
1000d894:	e0bffc15 	stw	r2,-16(fp)
1000d898:	e0bffc17 	ldw	r2,-16(fp)
1000d89c:	1000070e 	bge	r2,zero,1000d8bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000d8a0:	000d7b00 	call	1000d7b0 <alt_get_errno>
1000d8a4:	1007883a 	mov	r3,r2
1000d8a8:	e0bffc17 	ldw	r2,-16(fp)
1000d8ac:	0085c83a 	sub	r2,zero,r2
1000d8b0:	18800015 	stw	r2,0(r3)
        return -1;
1000d8b4:	00bfffc4 	movi	r2,-1
1000d8b8:	00000c06 	br	1000d8ec <write+0xec>
      }
      return rval;
1000d8bc:	e0bffc17 	ldw	r2,-16(fp)
1000d8c0:	00000a06 	br	1000d8ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000d8c4:	000d7b00 	call	1000d7b0 <alt_get_errno>
1000d8c8:	1007883a 	mov	r3,r2
1000d8cc:	00800344 	movi	r2,13
1000d8d0:	18800015 	stw	r2,0(r3)
1000d8d4:	00000406 	br	1000d8e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000d8d8:	000d7b00 	call	1000d7b0 <alt_get_errno>
1000d8dc:	1007883a 	mov	r3,r2
1000d8e0:	00801444 	movi	r2,81
1000d8e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d8e8:	00bfffc4 	movi	r2,-1
}
1000d8ec:	e037883a 	mov	sp,fp
1000d8f0:	dfc00117 	ldw	ra,4(sp)
1000d8f4:	df000017 	ldw	fp,0(sp)
1000d8f8:	dec00204 	addi	sp,sp,8
1000d8fc:	f800283a 	ret

1000d900 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000d900:	defffd04 	addi	sp,sp,-12
1000d904:	dfc00215 	stw	ra,8(sp)
1000d908:	df000115 	stw	fp,4(sp)
1000d90c:	df000104 	addi	fp,sp,4
1000d910:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000d914:	e13fff17 	ldw	r4,-4(fp)
1000d918:	01440074 	movhi	r5,4097
1000d91c:	29453004 	addi	r5,r5,5312
1000d920:	000e5ac0 	call	1000e5ac <alt_dev_llist_insert>
}
1000d924:	e037883a 	mov	sp,fp
1000d928:	dfc00117 	ldw	ra,4(sp)
1000d92c:	df000017 	ldw	fp,0(sp)
1000d930:	dec00204 	addi	sp,sp,8
1000d934:	f800283a 	ret

1000d938 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000d938:	defffd04 	addi	sp,sp,-12
1000d93c:	dfc00215 	stw	ra,8(sp)
1000d940:	df000115 	stw	fp,4(sp)
1000d944:	df000104 	addi	fp,sp,4
1000d948:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000d94c:	000ef8c0 	call	1000ef8c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000d950:	00800044 	movi	r2,1
1000d954:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000d958:	e037883a 	mov	sp,fp
1000d95c:	dfc00117 	ldw	ra,4(sp)
1000d960:	df000017 	ldw	fp,0(sp)
1000d964:	dec00204 	addi	sp,sp,8
1000d968:	f800283a 	ret

1000d96c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000d96c:	defffe04 	addi	sp,sp,-8
1000d970:	dfc00115 	stw	ra,4(sp)
1000d974:	df000015 	stw	fp,0(sp)
1000d978:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000d97c:	01040074 	movhi	r4,4097
1000d980:	21011a04 	addi	r4,r4,1128
1000d984:	000b883a 	mov	r5,zero
1000d988:	01800144 	movi	r6,5
1000d98c:	000db180 	call	1000db18 <altera_avalon_jtag_uart_init>
1000d990:	01040074 	movhi	r4,4097
1000d994:	21011004 	addi	r4,r4,1088
1000d998:	000d9000 	call	1000d900 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000d99c:	0001883a 	nop
}
1000d9a0:	e037883a 	mov	sp,fp
1000d9a4:	dfc00117 	ldw	ra,4(sp)
1000d9a8:	df000017 	ldw	fp,0(sp)
1000d9ac:	dec00204 	addi	sp,sp,8
1000d9b0:	f800283a 	ret

1000d9b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000d9b4:	defffa04 	addi	sp,sp,-24
1000d9b8:	dfc00515 	stw	ra,20(sp)
1000d9bc:	df000415 	stw	fp,16(sp)
1000d9c0:	df000404 	addi	fp,sp,16
1000d9c4:	e13ffd15 	stw	r4,-12(fp)
1000d9c8:	e17ffe15 	stw	r5,-8(fp)
1000d9cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000d9d0:	e0bffd17 	ldw	r2,-12(fp)
1000d9d4:	10800017 	ldw	r2,0(r2)
1000d9d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000d9dc:	e0bffc17 	ldw	r2,-16(fp)
1000d9e0:	10c00a04 	addi	r3,r2,40
1000d9e4:	e0bffd17 	ldw	r2,-12(fp)
1000d9e8:	10800217 	ldw	r2,8(r2)
1000d9ec:	1809883a 	mov	r4,r3
1000d9f0:	e17ffe17 	ldw	r5,-8(fp)
1000d9f4:	e1bfff17 	ldw	r6,-4(fp)
1000d9f8:	100f883a 	mov	r7,r2
1000d9fc:	000dfdc0 	call	1000dfdc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000da00:	e037883a 	mov	sp,fp
1000da04:	dfc00117 	ldw	ra,4(sp)
1000da08:	df000017 	ldw	fp,0(sp)
1000da0c:	dec00204 	addi	sp,sp,8
1000da10:	f800283a 	ret

1000da14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000da14:	defffa04 	addi	sp,sp,-24
1000da18:	dfc00515 	stw	ra,20(sp)
1000da1c:	df000415 	stw	fp,16(sp)
1000da20:	df000404 	addi	fp,sp,16
1000da24:	e13ffd15 	stw	r4,-12(fp)
1000da28:	e17ffe15 	stw	r5,-8(fp)
1000da2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000da30:	e0bffd17 	ldw	r2,-12(fp)
1000da34:	10800017 	ldw	r2,0(r2)
1000da38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000da3c:	e0bffc17 	ldw	r2,-16(fp)
1000da40:	10c00a04 	addi	r3,r2,40
1000da44:	e0bffd17 	ldw	r2,-12(fp)
1000da48:	10800217 	ldw	r2,8(r2)
1000da4c:	1809883a 	mov	r4,r3
1000da50:	e17ffe17 	ldw	r5,-8(fp)
1000da54:	e1bfff17 	ldw	r6,-4(fp)
1000da58:	100f883a 	mov	r7,r2
1000da5c:	000e1e80 	call	1000e1e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000da60:	e037883a 	mov	sp,fp
1000da64:	dfc00117 	ldw	ra,4(sp)
1000da68:	df000017 	ldw	fp,0(sp)
1000da6c:	dec00204 	addi	sp,sp,8
1000da70:	f800283a 	ret

1000da74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000da74:	defffc04 	addi	sp,sp,-16
1000da78:	dfc00315 	stw	ra,12(sp)
1000da7c:	df000215 	stw	fp,8(sp)
1000da80:	df000204 	addi	fp,sp,8
1000da84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000da88:	e0bfff17 	ldw	r2,-4(fp)
1000da8c:	10800017 	ldw	r2,0(r2)
1000da90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000da94:	e0bffe17 	ldw	r2,-8(fp)
1000da98:	10c00a04 	addi	r3,r2,40
1000da9c:	e0bfff17 	ldw	r2,-4(fp)
1000daa0:	10800217 	ldw	r2,8(r2)
1000daa4:	1809883a 	mov	r4,r3
1000daa8:	100b883a 	mov	r5,r2
1000daac:	000de880 	call	1000de88 <altera_avalon_jtag_uart_close>
}
1000dab0:	e037883a 	mov	sp,fp
1000dab4:	dfc00117 	ldw	ra,4(sp)
1000dab8:	df000017 	ldw	fp,0(sp)
1000dabc:	dec00204 	addi	sp,sp,8
1000dac0:	f800283a 	ret

1000dac4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000dac4:	defffa04 	addi	sp,sp,-24
1000dac8:	dfc00515 	stw	ra,20(sp)
1000dacc:	df000415 	stw	fp,16(sp)
1000dad0:	df000404 	addi	fp,sp,16
1000dad4:	e13ffd15 	stw	r4,-12(fp)
1000dad8:	e17ffe15 	stw	r5,-8(fp)
1000dadc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000dae0:	e0bffd17 	ldw	r2,-12(fp)
1000dae4:	10800017 	ldw	r2,0(r2)
1000dae8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000daec:	e0bffc17 	ldw	r2,-16(fp)
1000daf0:	10800a04 	addi	r2,r2,40
1000daf4:	1009883a 	mov	r4,r2
1000daf8:	e17ffe17 	ldw	r5,-8(fp)
1000dafc:	e1bfff17 	ldw	r6,-4(fp)
1000db00:	000def00 	call	1000def0 <altera_avalon_jtag_uart_ioctl>
}
1000db04:	e037883a 	mov	sp,fp
1000db08:	dfc00117 	ldw	ra,4(sp)
1000db0c:	df000017 	ldw	fp,0(sp)
1000db10:	dec00204 	addi	sp,sp,8
1000db14:	f800283a 	ret

1000db18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000db18:	defffa04 	addi	sp,sp,-24
1000db1c:	dfc00515 	stw	ra,20(sp)
1000db20:	df000415 	stw	fp,16(sp)
1000db24:	df000404 	addi	fp,sp,16
1000db28:	e13ffd15 	stw	r4,-12(fp)
1000db2c:	e17ffe15 	stw	r5,-8(fp)
1000db30:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000db34:	e0bffd17 	ldw	r2,-12(fp)
1000db38:	00c00044 	movi	r3,1
1000db3c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000db40:	e0bffd17 	ldw	r2,-12(fp)
1000db44:	10800017 	ldw	r2,0(r2)
1000db48:	10800104 	addi	r2,r2,4
1000db4c:	1007883a 	mov	r3,r2
1000db50:	e0bffd17 	ldw	r2,-12(fp)
1000db54:	10800817 	ldw	r2,32(r2)
1000db58:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000db5c:	e0fffe17 	ldw	r3,-8(fp)
1000db60:	e0bfff17 	ldw	r2,-4(fp)
1000db64:	d8000015 	stw	zero,0(sp)
1000db68:	1809883a 	mov	r4,r3
1000db6c:	100b883a 	mov	r5,r2
1000db70:	01840074 	movhi	r6,4097
1000db74:	31b6f704 	addi	r6,r6,-9252
1000db78:	e1fffd17 	ldw	r7,-12(fp)
1000db7c:	000e7240 	call	1000e724 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000db80:	e0bffd17 	ldw	r2,-12(fp)
1000db84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000db88:	e0bffd17 	ldw	r2,-12(fp)
1000db8c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000db90:	00840074 	movhi	r2,4097
1000db94:	108bfe04 	addi	r2,r2,12280
1000db98:	10800017 	ldw	r2,0(r2)
1000db9c:	1809883a 	mov	r4,r3
1000dba0:	100b883a 	mov	r5,r2
1000dba4:	01840074 	movhi	r6,4097
1000dba8:	31b77804 	addi	r6,r6,-8736
1000dbac:	e1fffd17 	ldw	r7,-12(fp)
1000dbb0:	000e4000 	call	1000e400 <alt_alarm_start>
1000dbb4:	1000040e 	bge	r2,zero,1000dbc8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000dbb8:	e0fffd17 	ldw	r3,-12(fp)
1000dbbc:	00a00034 	movhi	r2,32768
1000dbc0:	10bfffc4 	addi	r2,r2,-1
1000dbc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000dbc8:	e037883a 	mov	sp,fp
1000dbcc:	dfc00117 	ldw	ra,4(sp)
1000dbd0:	df000017 	ldw	fp,0(sp)
1000dbd4:	dec00204 	addi	sp,sp,8
1000dbd8:	f800283a 	ret

1000dbdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000dbdc:	defff804 	addi	sp,sp,-32
1000dbe0:	df000715 	stw	fp,28(sp)
1000dbe4:	df000704 	addi	fp,sp,28
1000dbe8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000dbec:	e0bfff17 	ldw	r2,-4(fp)
1000dbf0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000dbf4:	e0bffb17 	ldw	r2,-20(fp)
1000dbf8:	10800017 	ldw	r2,0(r2)
1000dbfc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000dc00:	e0bffc17 	ldw	r2,-16(fp)
1000dc04:	10800104 	addi	r2,r2,4
1000dc08:	10800037 	ldwio	r2,0(r2)
1000dc0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000dc10:	e0bffd17 	ldw	r2,-12(fp)
1000dc14:	1080c00c 	andi	r2,r2,768
1000dc18:	1000011e 	bne	r2,zero,1000dc20 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000dc1c:	00006c06 	br	1000ddd0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000dc20:	e0bffd17 	ldw	r2,-12(fp)
1000dc24:	1080400c 	andi	r2,r2,256
1000dc28:	10003426 	beq	r2,zero,1000dcfc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000dc2c:	00800074 	movhi	r2,1
1000dc30:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000dc34:	e0bffb17 	ldw	r2,-20(fp)
1000dc38:	10800a17 	ldw	r2,40(r2)
1000dc3c:	10800044 	addi	r2,r2,1
1000dc40:	1081ffcc 	andi	r2,r2,2047
1000dc44:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000dc48:	e0bffb17 	ldw	r2,-20(fp)
1000dc4c:	10c00b17 	ldw	r3,44(r2)
1000dc50:	e0bffe17 	ldw	r2,-8(fp)
1000dc54:	1880011e 	bne	r3,r2,1000dc5c <altera_avalon_jtag_uart_irq+0x80>
          break;
1000dc58:	00001606 	br	1000dcb4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000dc5c:	e0bffc17 	ldw	r2,-16(fp)
1000dc60:	10800037 	ldwio	r2,0(r2)
1000dc64:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000dc68:	e0bff917 	ldw	r2,-28(fp)
1000dc6c:	10a0000c 	andi	r2,r2,32768
1000dc70:	1000011e 	bne	r2,zero,1000dc78 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000dc74:	00000f06 	br	1000dcb4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000dc78:	e0bffb17 	ldw	r2,-20(fp)
1000dc7c:	10800a17 	ldw	r2,40(r2)
1000dc80:	e0fff917 	ldw	r3,-28(fp)
1000dc84:	1809883a 	mov	r4,r3
1000dc88:	e0fffb17 	ldw	r3,-20(fp)
1000dc8c:	1885883a 	add	r2,r3,r2
1000dc90:	10800e04 	addi	r2,r2,56
1000dc94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000dc98:	e0bffb17 	ldw	r2,-20(fp)
1000dc9c:	10800a17 	ldw	r2,40(r2)
1000dca0:	10800044 	addi	r2,r2,1
1000dca4:	10c1ffcc 	andi	r3,r2,2047
1000dca8:	e0bffb17 	ldw	r2,-20(fp)
1000dcac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000dcb0:	003fe006 	br	1000dc34 <__alt_data_end+0xf800dc34>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000dcb4:	e0bff917 	ldw	r2,-28(fp)
1000dcb8:	10bfffec 	andhi	r2,r2,65535
1000dcbc:	10000f26 	beq	r2,zero,1000dcfc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000dcc0:	e0bffb17 	ldw	r2,-20(fp)
1000dcc4:	10c00817 	ldw	r3,32(r2)
1000dcc8:	00bfff84 	movi	r2,-2
1000dccc:	1886703a 	and	r3,r3,r2
1000dcd0:	e0bffb17 	ldw	r2,-20(fp)
1000dcd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000dcd8:	e0bffc17 	ldw	r2,-16(fp)
1000dcdc:	10800104 	addi	r2,r2,4
1000dce0:	1007883a 	mov	r3,r2
1000dce4:	e0bffb17 	ldw	r2,-20(fp)
1000dce8:	10800817 	ldw	r2,32(r2)
1000dcec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000dcf0:	e0bffc17 	ldw	r2,-16(fp)
1000dcf4:	10800104 	addi	r2,r2,4
1000dcf8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000dcfc:	e0bffd17 	ldw	r2,-12(fp)
1000dd00:	1080800c 	andi	r2,r2,512
1000dd04:	10003126 	beq	r2,zero,1000ddcc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000dd08:	e0bffd17 	ldw	r2,-12(fp)
1000dd0c:	1004d43a 	srli	r2,r2,16
1000dd10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000dd14:	00001406 	br	1000dd68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000dd18:	e0bffc17 	ldw	r2,-16(fp)
1000dd1c:	e0fffb17 	ldw	r3,-20(fp)
1000dd20:	18c00d17 	ldw	r3,52(r3)
1000dd24:	e13ffb17 	ldw	r4,-20(fp)
1000dd28:	20c7883a 	add	r3,r4,r3
1000dd2c:	18c20e04 	addi	r3,r3,2104
1000dd30:	18c00003 	ldbu	r3,0(r3)
1000dd34:	18c03fcc 	andi	r3,r3,255
1000dd38:	18c0201c 	xori	r3,r3,128
1000dd3c:	18ffe004 	addi	r3,r3,-128
1000dd40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000dd44:	e0bffb17 	ldw	r2,-20(fp)
1000dd48:	10800d17 	ldw	r2,52(r2)
1000dd4c:	10800044 	addi	r2,r2,1
1000dd50:	10c1ffcc 	andi	r3,r2,2047
1000dd54:	e0bffb17 	ldw	r2,-20(fp)
1000dd58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000dd5c:	e0bffa17 	ldw	r2,-24(fp)
1000dd60:	10bfffc4 	addi	r2,r2,-1
1000dd64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000dd68:	e0bffa17 	ldw	r2,-24(fp)
1000dd6c:	10000526 	beq	r2,zero,1000dd84 <altera_avalon_jtag_uart_irq+0x1a8>
1000dd70:	e0bffb17 	ldw	r2,-20(fp)
1000dd74:	10c00d17 	ldw	r3,52(r2)
1000dd78:	e0bffb17 	ldw	r2,-20(fp)
1000dd7c:	10800c17 	ldw	r2,48(r2)
1000dd80:	18bfe51e 	bne	r3,r2,1000dd18 <__alt_data_end+0xf800dd18>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000dd84:	e0bffa17 	ldw	r2,-24(fp)
1000dd88:	10001026 	beq	r2,zero,1000ddcc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000dd8c:	e0bffb17 	ldw	r2,-20(fp)
1000dd90:	10c00817 	ldw	r3,32(r2)
1000dd94:	00bfff44 	movi	r2,-3
1000dd98:	1886703a 	and	r3,r3,r2
1000dd9c:	e0bffb17 	ldw	r2,-20(fp)
1000dda0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000dda4:	e0bffb17 	ldw	r2,-20(fp)
1000dda8:	10800017 	ldw	r2,0(r2)
1000ddac:	10800104 	addi	r2,r2,4
1000ddb0:	1007883a 	mov	r3,r2
1000ddb4:	e0bffb17 	ldw	r2,-20(fp)
1000ddb8:	10800817 	ldw	r2,32(r2)
1000ddbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ddc0:	e0bffc17 	ldw	r2,-16(fp)
1000ddc4:	10800104 	addi	r2,r2,4
1000ddc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000ddcc:	003f8c06 	br	1000dc00 <__alt_data_end+0xf800dc00>
}
1000ddd0:	e037883a 	mov	sp,fp
1000ddd4:	df000017 	ldw	fp,0(sp)
1000ddd8:	dec00104 	addi	sp,sp,4
1000dddc:	f800283a 	ret

1000dde0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000dde0:	defff804 	addi	sp,sp,-32
1000dde4:	df000715 	stw	fp,28(sp)
1000dde8:	df000704 	addi	fp,sp,28
1000ddec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000ddf0:	e0bffb17 	ldw	r2,-20(fp)
1000ddf4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000ddf8:	e0bff917 	ldw	r2,-28(fp)
1000ddfc:	10800017 	ldw	r2,0(r2)
1000de00:	10800104 	addi	r2,r2,4
1000de04:	10800037 	ldwio	r2,0(r2)
1000de08:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000de0c:	e0bffa17 	ldw	r2,-24(fp)
1000de10:	1081000c 	andi	r2,r2,1024
1000de14:	10000b26 	beq	r2,zero,1000de44 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000de18:	e0bff917 	ldw	r2,-28(fp)
1000de1c:	10800017 	ldw	r2,0(r2)
1000de20:	10800104 	addi	r2,r2,4
1000de24:	1007883a 	mov	r3,r2
1000de28:	e0bff917 	ldw	r2,-28(fp)
1000de2c:	10800817 	ldw	r2,32(r2)
1000de30:	10810014 	ori	r2,r2,1024
1000de34:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000de38:	e0bff917 	ldw	r2,-28(fp)
1000de3c:	10000915 	stw	zero,36(r2)
1000de40:	00000a06 	br	1000de6c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000de44:	e0bff917 	ldw	r2,-28(fp)
1000de48:	10c00917 	ldw	r3,36(r2)
1000de4c:	00a00034 	movhi	r2,32768
1000de50:	10bfff04 	addi	r2,r2,-4
1000de54:	10c00536 	bltu	r2,r3,1000de6c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000de58:	e0bff917 	ldw	r2,-28(fp)
1000de5c:	10800917 	ldw	r2,36(r2)
1000de60:	10c00044 	addi	r3,r2,1
1000de64:	e0bff917 	ldw	r2,-28(fp)
1000de68:	10c00915 	stw	r3,36(r2)
1000de6c:	00840074 	movhi	r2,4097
1000de70:	108bfe04 	addi	r2,r2,12280
1000de74:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000de78:	e037883a 	mov	sp,fp
1000de7c:	df000017 	ldw	fp,0(sp)
1000de80:	dec00104 	addi	sp,sp,4
1000de84:	f800283a 	ret

1000de88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000de88:	defffd04 	addi	sp,sp,-12
1000de8c:	df000215 	stw	fp,8(sp)
1000de90:	df000204 	addi	fp,sp,8
1000de94:	e13ffe15 	stw	r4,-8(fp)
1000de98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000de9c:	00000506 	br	1000deb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000dea0:	e0bfff17 	ldw	r2,-4(fp)
1000dea4:	1090000c 	andi	r2,r2,16384
1000dea8:	10000226 	beq	r2,zero,1000deb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000deac:	00bffd44 	movi	r2,-11
1000deb0:	00000b06 	br	1000dee0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000deb4:	e0bffe17 	ldw	r2,-8(fp)
1000deb8:	10c00d17 	ldw	r3,52(r2)
1000debc:	e0bffe17 	ldw	r2,-8(fp)
1000dec0:	10800c17 	ldw	r2,48(r2)
1000dec4:	18800526 	beq	r3,r2,1000dedc <altera_avalon_jtag_uart_close+0x54>
1000dec8:	e0bffe17 	ldw	r2,-8(fp)
1000decc:	10c00917 	ldw	r3,36(r2)
1000ded0:	e0bffe17 	ldw	r2,-8(fp)
1000ded4:	10800117 	ldw	r2,4(r2)
1000ded8:	18bff136 	bltu	r3,r2,1000dea0 <__alt_data_end+0xf800dea0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000dedc:	0005883a 	mov	r2,zero
}
1000dee0:	e037883a 	mov	sp,fp
1000dee4:	df000017 	ldw	fp,0(sp)
1000dee8:	dec00104 	addi	sp,sp,4
1000deec:	f800283a 	ret

1000def0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000def0:	defffa04 	addi	sp,sp,-24
1000def4:	df000515 	stw	fp,20(sp)
1000def8:	df000504 	addi	fp,sp,20
1000defc:	e13ffd15 	stw	r4,-12(fp)
1000df00:	e17ffe15 	stw	r5,-8(fp)
1000df04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000df08:	00bff9c4 	movi	r2,-25
1000df0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000df10:	e0bffe17 	ldw	r2,-8(fp)
1000df14:	10da8060 	cmpeqi	r3,r2,27137
1000df18:	1800031e 	bne	r3,zero,1000df28 <altera_avalon_jtag_uart_ioctl+0x38>
1000df1c:	109a80a0 	cmpeqi	r2,r2,27138
1000df20:	1000191e 	bne	r2,zero,1000df88 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000df24:	00002806 	br	1000dfc8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000df28:	e0bffd17 	ldw	r2,-12(fp)
1000df2c:	10c00117 	ldw	r3,4(r2)
1000df30:	00a00034 	movhi	r2,32768
1000df34:	10bfffc4 	addi	r2,r2,-1
1000df38:	18801226 	beq	r3,r2,1000df84 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000df3c:	e0bfff17 	ldw	r2,-4(fp)
1000df40:	10800017 	ldw	r2,0(r2)
1000df44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000df48:	e0bffc17 	ldw	r2,-16(fp)
1000df4c:	10800090 	cmplti	r2,r2,2
1000df50:	1000061e 	bne	r2,zero,1000df6c <altera_avalon_jtag_uart_ioctl+0x7c>
1000df54:	e0fffc17 	ldw	r3,-16(fp)
1000df58:	00a00034 	movhi	r2,32768
1000df5c:	10bfffc4 	addi	r2,r2,-1
1000df60:	18800226 	beq	r3,r2,1000df6c <altera_avalon_jtag_uart_ioctl+0x7c>
1000df64:	e0bffc17 	ldw	r2,-16(fp)
1000df68:	00000206 	br	1000df74 <altera_avalon_jtag_uart_ioctl+0x84>
1000df6c:	00a00034 	movhi	r2,32768
1000df70:	10bfff84 	addi	r2,r2,-2
1000df74:	e0fffd17 	ldw	r3,-12(fp)
1000df78:	18800115 	stw	r2,4(r3)
      rc = 0;
1000df7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000df80:	00001106 	br	1000dfc8 <altera_avalon_jtag_uart_ioctl+0xd8>
1000df84:	00001006 	br	1000dfc8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000df88:	e0bffd17 	ldw	r2,-12(fp)
1000df8c:	10c00117 	ldw	r3,4(r2)
1000df90:	00a00034 	movhi	r2,32768
1000df94:	10bfffc4 	addi	r2,r2,-1
1000df98:	18800a26 	beq	r3,r2,1000dfc4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000df9c:	e0bffd17 	ldw	r2,-12(fp)
1000dfa0:	10c00917 	ldw	r3,36(r2)
1000dfa4:	e0bffd17 	ldw	r2,-12(fp)
1000dfa8:	10800117 	ldw	r2,4(r2)
1000dfac:	1885803a 	cmpltu	r2,r3,r2
1000dfb0:	10c03fcc 	andi	r3,r2,255
1000dfb4:	e0bfff17 	ldw	r2,-4(fp)
1000dfb8:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000dfbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000dfc0:	00000006 	br	1000dfc4 <altera_avalon_jtag_uart_ioctl+0xd4>
1000dfc4:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000dfc8:	e0bffb17 	ldw	r2,-20(fp)
}
1000dfcc:	e037883a 	mov	sp,fp
1000dfd0:	df000017 	ldw	fp,0(sp)
1000dfd4:	dec00104 	addi	sp,sp,4
1000dfd8:	f800283a 	ret

1000dfdc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000dfdc:	defff304 	addi	sp,sp,-52
1000dfe0:	dfc00c15 	stw	ra,48(sp)
1000dfe4:	df000b15 	stw	fp,44(sp)
1000dfe8:	df000b04 	addi	fp,sp,44
1000dfec:	e13ffc15 	stw	r4,-16(fp)
1000dff0:	e17ffd15 	stw	r5,-12(fp)
1000dff4:	e1bffe15 	stw	r6,-8(fp)
1000dff8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000dffc:	e0bffd17 	ldw	r2,-12(fp)
1000e000:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e004:	00004906 	br	1000e12c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e008:	e0bffc17 	ldw	r2,-16(fp)
1000e00c:	10800a17 	ldw	r2,40(r2)
1000e010:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e014:	e0bffc17 	ldw	r2,-16(fp)
1000e018:	10800b17 	ldw	r2,44(r2)
1000e01c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e020:	e0fff717 	ldw	r3,-36(fp)
1000e024:	e0bff817 	ldw	r2,-32(fp)
1000e028:	18800536 	bltu	r3,r2,1000e040 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e02c:	e0fff717 	ldw	r3,-36(fp)
1000e030:	e0bff817 	ldw	r2,-32(fp)
1000e034:	1885c83a 	sub	r2,r3,r2
1000e038:	e0bff615 	stw	r2,-40(fp)
1000e03c:	00000406 	br	1000e050 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e040:	00c20004 	movi	r3,2048
1000e044:	e0bff817 	ldw	r2,-32(fp)
1000e048:	1885c83a 	sub	r2,r3,r2
1000e04c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e050:	e0bff617 	ldw	r2,-40(fp)
1000e054:	1000011e 	bne	r2,zero,1000e05c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e058:	00001d06 	br	1000e0d0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e05c:	e0fffe17 	ldw	r3,-8(fp)
1000e060:	e0bff617 	ldw	r2,-40(fp)
1000e064:	1880022e 	bgeu	r3,r2,1000e070 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e068:	e0bffe17 	ldw	r2,-8(fp)
1000e06c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e070:	e0bff817 	ldw	r2,-32(fp)
1000e074:	10800e04 	addi	r2,r2,56
1000e078:	e0fffc17 	ldw	r3,-16(fp)
1000e07c:	1885883a 	add	r2,r3,r2
1000e080:	e13ff517 	ldw	r4,-44(fp)
1000e084:	100b883a 	mov	r5,r2
1000e088:	e1bff617 	ldw	r6,-40(fp)
1000e08c:	0005e980 	call	10005e98 <memcpy>
      ptr   += n;
1000e090:	e0fff517 	ldw	r3,-44(fp)
1000e094:	e0bff617 	ldw	r2,-40(fp)
1000e098:	1885883a 	add	r2,r3,r2
1000e09c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e0a0:	e0fffe17 	ldw	r3,-8(fp)
1000e0a4:	e0bff617 	ldw	r2,-40(fp)
1000e0a8:	1885c83a 	sub	r2,r3,r2
1000e0ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e0b0:	e0fff817 	ldw	r3,-32(fp)
1000e0b4:	e0bff617 	ldw	r2,-40(fp)
1000e0b8:	1885883a 	add	r2,r3,r2
1000e0bc:	10c1ffcc 	andi	r3,r2,2047
1000e0c0:	e0bffc17 	ldw	r2,-16(fp)
1000e0c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e0c8:	e0bffe17 	ldw	r2,-8(fp)
1000e0cc:	00bfce16 	blt	zero,r2,1000e008 <__alt_data_end+0xf800e008>

    /* If we read any data then return it */
    if (ptr != buffer)
1000e0d0:	e0fff517 	ldw	r3,-44(fp)
1000e0d4:	e0bffd17 	ldw	r2,-12(fp)
1000e0d8:	18800126 	beq	r3,r2,1000e0e0 <altera_avalon_jtag_uart_read+0x104>
      break;
1000e0dc:	00001506 	br	1000e134 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e0e0:	e0bfff17 	ldw	r2,-4(fp)
1000e0e4:	1090000c 	andi	r2,r2,16384
1000e0e8:	10000126 	beq	r2,zero,1000e0f0 <altera_avalon_jtag_uart_read+0x114>
      break;
1000e0ec:	00001106 	br	1000e134 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e0f0:	0001883a 	nop
1000e0f4:	e0bffc17 	ldw	r2,-16(fp)
1000e0f8:	10c00a17 	ldw	r3,40(r2)
1000e0fc:	e0bff717 	ldw	r2,-36(fp)
1000e100:	1880051e 	bne	r3,r2,1000e118 <altera_avalon_jtag_uart_read+0x13c>
1000e104:	e0bffc17 	ldw	r2,-16(fp)
1000e108:	10c00917 	ldw	r3,36(r2)
1000e10c:	e0bffc17 	ldw	r2,-16(fp)
1000e110:	10800117 	ldw	r2,4(r2)
1000e114:	18bff736 	bltu	r3,r2,1000e0f4 <__alt_data_end+0xf800e0f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e118:	e0bffc17 	ldw	r2,-16(fp)
1000e11c:	10c00a17 	ldw	r3,40(r2)
1000e120:	e0bff717 	ldw	r2,-36(fp)
1000e124:	1880011e 	bne	r3,r2,1000e12c <altera_avalon_jtag_uart_read+0x150>
      break;
1000e128:	00000206 	br	1000e134 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e12c:	e0bffe17 	ldw	r2,-8(fp)
1000e130:	00bfb516 	blt	zero,r2,1000e008 <__alt_data_end+0xf800e008>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e134:	e0fff517 	ldw	r3,-44(fp)
1000e138:	e0bffd17 	ldw	r2,-12(fp)
1000e13c:	18801826 	beq	r3,r2,1000e1a0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e140:	0005303a 	rdctl	r2,status
1000e144:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e148:	e0fffa17 	ldw	r3,-24(fp)
1000e14c:	00bfff84 	movi	r2,-2
1000e150:	1884703a 	and	r2,r3,r2
1000e154:	1001703a 	wrctl	status,r2
  
  return context;
1000e158:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e15c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e160:	e0bffc17 	ldw	r2,-16(fp)
1000e164:	10800817 	ldw	r2,32(r2)
1000e168:	10c00054 	ori	r3,r2,1
1000e16c:	e0bffc17 	ldw	r2,-16(fp)
1000e170:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e174:	e0bffc17 	ldw	r2,-16(fp)
1000e178:	10800017 	ldw	r2,0(r2)
1000e17c:	10800104 	addi	r2,r2,4
1000e180:	1007883a 	mov	r3,r2
1000e184:	e0bffc17 	ldw	r2,-16(fp)
1000e188:	10800817 	ldw	r2,32(r2)
1000e18c:	18800035 	stwio	r2,0(r3)
1000e190:	e0bff917 	ldw	r2,-28(fp)
1000e194:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e198:	e0bffb17 	ldw	r2,-20(fp)
1000e19c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e1a0:	e0fff517 	ldw	r3,-44(fp)
1000e1a4:	e0bffd17 	ldw	r2,-12(fp)
1000e1a8:	18800426 	beq	r3,r2,1000e1bc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000e1ac:	e0fff517 	ldw	r3,-44(fp)
1000e1b0:	e0bffd17 	ldw	r2,-12(fp)
1000e1b4:	1885c83a 	sub	r2,r3,r2
1000e1b8:	00000606 	br	1000e1d4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000e1bc:	e0bfff17 	ldw	r2,-4(fp)
1000e1c0:	1090000c 	andi	r2,r2,16384
1000e1c4:	10000226 	beq	r2,zero,1000e1d0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000e1c8:	00bffd44 	movi	r2,-11
1000e1cc:	00000106 	br	1000e1d4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000e1d0:	00bffec4 	movi	r2,-5
}
1000e1d4:	e037883a 	mov	sp,fp
1000e1d8:	dfc00117 	ldw	ra,4(sp)
1000e1dc:	df000017 	ldw	fp,0(sp)
1000e1e0:	dec00204 	addi	sp,sp,8
1000e1e4:	f800283a 	ret

1000e1e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e1e8:	defff304 	addi	sp,sp,-52
1000e1ec:	dfc00c15 	stw	ra,48(sp)
1000e1f0:	df000b15 	stw	fp,44(sp)
1000e1f4:	df000b04 	addi	fp,sp,44
1000e1f8:	e13ffc15 	stw	r4,-16(fp)
1000e1fc:	e17ffd15 	stw	r5,-12(fp)
1000e200:	e1bffe15 	stw	r6,-8(fp)
1000e204:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000e208:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000e20c:	e0bffd17 	ldw	r2,-12(fp)
1000e210:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e214:	00003806 	br	1000e2f8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000e218:	e0bffc17 	ldw	r2,-16(fp)
1000e21c:	10800c17 	ldw	r2,48(r2)
1000e220:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000e224:	e0bffc17 	ldw	r2,-16(fp)
1000e228:	10800d17 	ldw	r2,52(r2)
1000e22c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000e230:	e0fff817 	ldw	r3,-32(fp)
1000e234:	e0bff517 	ldw	r2,-44(fp)
1000e238:	1880062e 	bgeu	r3,r2,1000e254 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000e23c:	e0fff517 	ldw	r3,-44(fp)
1000e240:	e0bff817 	ldw	r2,-32(fp)
1000e244:	1885c83a 	sub	r2,r3,r2
1000e248:	10bfffc4 	addi	r2,r2,-1
1000e24c:	e0bff615 	stw	r2,-40(fp)
1000e250:	00000b06 	br	1000e280 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000e254:	e0bff517 	ldw	r2,-44(fp)
1000e258:	10000526 	beq	r2,zero,1000e270 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000e25c:	00c20004 	movi	r3,2048
1000e260:	e0bff817 	ldw	r2,-32(fp)
1000e264:	1885c83a 	sub	r2,r3,r2
1000e268:	e0bff615 	stw	r2,-40(fp)
1000e26c:	00000406 	br	1000e280 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000e270:	00c1ffc4 	movi	r3,2047
1000e274:	e0bff817 	ldw	r2,-32(fp)
1000e278:	1885c83a 	sub	r2,r3,r2
1000e27c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e280:	e0bff617 	ldw	r2,-40(fp)
1000e284:	1000011e 	bne	r2,zero,1000e28c <altera_avalon_jtag_uart_write+0xa4>
        break;
1000e288:	00001d06 	br	1000e300 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000e28c:	e0fffe17 	ldw	r3,-8(fp)
1000e290:	e0bff617 	ldw	r2,-40(fp)
1000e294:	1880022e 	bgeu	r3,r2,1000e2a0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000e298:	e0bffe17 	ldw	r2,-8(fp)
1000e29c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000e2a0:	e0bff817 	ldw	r2,-32(fp)
1000e2a4:	10820e04 	addi	r2,r2,2104
1000e2a8:	e0fffc17 	ldw	r3,-16(fp)
1000e2ac:	1885883a 	add	r2,r3,r2
1000e2b0:	1009883a 	mov	r4,r2
1000e2b4:	e17ffd17 	ldw	r5,-12(fp)
1000e2b8:	e1bff617 	ldw	r6,-40(fp)
1000e2bc:	0005e980 	call	10005e98 <memcpy>
      ptr   += n;
1000e2c0:	e0fffd17 	ldw	r3,-12(fp)
1000e2c4:	e0bff617 	ldw	r2,-40(fp)
1000e2c8:	1885883a 	add	r2,r3,r2
1000e2cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000e2d0:	e0fffe17 	ldw	r3,-8(fp)
1000e2d4:	e0bff617 	ldw	r2,-40(fp)
1000e2d8:	1885c83a 	sub	r2,r3,r2
1000e2dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e2e0:	e0fff817 	ldw	r3,-32(fp)
1000e2e4:	e0bff617 	ldw	r2,-40(fp)
1000e2e8:	1885883a 	add	r2,r3,r2
1000e2ec:	10c1ffcc 	andi	r3,r2,2047
1000e2f0:	e0bffc17 	ldw	r2,-16(fp)
1000e2f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e2f8:	e0bffe17 	ldw	r2,-8(fp)
1000e2fc:	00bfc616 	blt	zero,r2,1000e218 <__alt_data_end+0xf800e218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e300:	0005303a 	rdctl	r2,status
1000e304:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e308:	e0fffa17 	ldw	r3,-24(fp)
1000e30c:	00bfff84 	movi	r2,-2
1000e310:	1884703a 	and	r2,r3,r2
1000e314:	1001703a 	wrctl	status,r2
  
  return context;
1000e318:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000e31c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e320:	e0bffc17 	ldw	r2,-16(fp)
1000e324:	10800817 	ldw	r2,32(r2)
1000e328:	10c00094 	ori	r3,r2,2
1000e32c:	e0bffc17 	ldw	r2,-16(fp)
1000e330:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e334:	e0bffc17 	ldw	r2,-16(fp)
1000e338:	10800017 	ldw	r2,0(r2)
1000e33c:	10800104 	addi	r2,r2,4
1000e340:	1007883a 	mov	r3,r2
1000e344:	e0bffc17 	ldw	r2,-16(fp)
1000e348:	10800817 	ldw	r2,32(r2)
1000e34c:	18800035 	stwio	r2,0(r3)
1000e350:	e0bff917 	ldw	r2,-28(fp)
1000e354:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e358:	e0bffb17 	ldw	r2,-20(fp)
1000e35c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000e360:	e0bffe17 	ldw	r2,-8(fp)
1000e364:	0080120e 	bge	zero,r2,1000e3b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000e368:	e0bfff17 	ldw	r2,-4(fp)
1000e36c:	1090000c 	andi	r2,r2,16384
1000e370:	10000126 	beq	r2,zero,1000e378 <altera_avalon_jtag_uart_write+0x190>
        break;
1000e374:	00001006 	br	1000e3b8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000e378:	0001883a 	nop
1000e37c:	e0bffc17 	ldw	r2,-16(fp)
1000e380:	10c00d17 	ldw	r3,52(r2)
1000e384:	e0bff517 	ldw	r2,-44(fp)
1000e388:	1880051e 	bne	r3,r2,1000e3a0 <altera_avalon_jtag_uart_write+0x1b8>
1000e38c:	e0bffc17 	ldw	r2,-16(fp)
1000e390:	10c00917 	ldw	r3,36(r2)
1000e394:	e0bffc17 	ldw	r2,-16(fp)
1000e398:	10800117 	ldw	r2,4(r2)
1000e39c:	18bff736 	bltu	r3,r2,1000e37c <__alt_data_end+0xf800e37c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000e3a0:	e0bffc17 	ldw	r2,-16(fp)
1000e3a4:	10800917 	ldw	r2,36(r2)
1000e3a8:	10000126 	beq	r2,zero,1000e3b0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000e3ac:	00000206 	br	1000e3b8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000e3b0:	e0bffe17 	ldw	r2,-8(fp)
1000e3b4:	00bf9716 	blt	zero,r2,1000e214 <__alt_data_end+0xf800e214>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000e3b8:	e0fffd17 	ldw	r3,-12(fp)
1000e3bc:	e0bff717 	ldw	r2,-36(fp)
1000e3c0:	18800426 	beq	r3,r2,1000e3d4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000e3c4:	e0fffd17 	ldw	r3,-12(fp)
1000e3c8:	e0bff717 	ldw	r2,-36(fp)
1000e3cc:	1885c83a 	sub	r2,r3,r2
1000e3d0:	00000606 	br	1000e3ec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000e3d4:	e0bfff17 	ldw	r2,-4(fp)
1000e3d8:	1090000c 	andi	r2,r2,16384
1000e3dc:	10000226 	beq	r2,zero,1000e3e8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000e3e0:	00bffd44 	movi	r2,-11
1000e3e4:	00000106 	br	1000e3ec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000e3e8:	00bffec4 	movi	r2,-5
}
1000e3ec:	e037883a 	mov	sp,fp
1000e3f0:	dfc00117 	ldw	ra,4(sp)
1000e3f4:	df000017 	ldw	fp,0(sp)
1000e3f8:	dec00204 	addi	sp,sp,8
1000e3fc:	f800283a 	ret

1000e400 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000e400:	defff504 	addi	sp,sp,-44
1000e404:	df000a15 	stw	fp,40(sp)
1000e408:	df000a04 	addi	fp,sp,40
1000e40c:	e13ffc15 	stw	r4,-16(fp)
1000e410:	e17ffd15 	stw	r5,-12(fp)
1000e414:	e1bffe15 	stw	r6,-8(fp)
1000e418:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000e41c:	e03ff615 	stw	zero,-40(fp)
1000e420:	00840074 	movhi	r2,4097
1000e424:	108bfe04 	addi	r2,r2,12280
1000e428:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000e42c:	10003f26 	beq	r2,zero,1000e52c <alt_alarm_start+0x12c>
  {
    if (alarm)
1000e430:	e0bffc17 	ldw	r2,-16(fp)
1000e434:	10003b26 	beq	r2,zero,1000e524 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000e438:	e0bffc17 	ldw	r2,-16(fp)
1000e43c:	e0fffe17 	ldw	r3,-8(fp)
1000e440:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000e444:	e0bffc17 	ldw	r2,-16(fp)
1000e448:	e0ffff17 	ldw	r3,-4(fp)
1000e44c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e450:	0005303a 	rdctl	r2,status
1000e454:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e458:	e0fff817 	ldw	r3,-32(fp)
1000e45c:	00bfff84 	movi	r2,-2
1000e460:	1884703a 	and	r2,r3,r2
1000e464:	1001703a 	wrctl	status,r2
  
  return context;
1000e468:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000e46c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000e470:	00840074 	movhi	r2,4097
1000e474:	108bff04 	addi	r2,r2,12284
1000e478:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000e47c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000e480:	e0fffd17 	ldw	r3,-12(fp)
1000e484:	e0bff617 	ldw	r2,-40(fp)
1000e488:	1885883a 	add	r2,r3,r2
1000e48c:	10c00044 	addi	r3,r2,1
1000e490:	e0bffc17 	ldw	r2,-16(fp)
1000e494:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000e498:	e0bffc17 	ldw	r2,-16(fp)
1000e49c:	10c00217 	ldw	r3,8(r2)
1000e4a0:	e0bff617 	ldw	r2,-40(fp)
1000e4a4:	1880042e 	bgeu	r3,r2,1000e4b8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000e4a8:	e0bffc17 	ldw	r2,-16(fp)
1000e4ac:	00c00044 	movi	r3,1
1000e4b0:	10c00405 	stb	r3,16(r2)
1000e4b4:	00000206 	br	1000e4c0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000e4b8:	e0bffc17 	ldw	r2,-16(fp)
1000e4bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000e4c0:	e0fffc17 	ldw	r3,-16(fp)
1000e4c4:	00840074 	movhi	r2,4097
1000e4c8:	10853604 	addi	r2,r2,5336
1000e4cc:	e0bff915 	stw	r2,-28(fp)
1000e4d0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e4d4:	e0bffa17 	ldw	r2,-24(fp)
1000e4d8:	e0fff917 	ldw	r3,-28(fp)
1000e4dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e4e0:	e0bff917 	ldw	r2,-28(fp)
1000e4e4:	10c00017 	ldw	r3,0(r2)
1000e4e8:	e0bffa17 	ldw	r2,-24(fp)
1000e4ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e4f0:	e0bff917 	ldw	r2,-28(fp)
1000e4f4:	10800017 	ldw	r2,0(r2)
1000e4f8:	e0fffa17 	ldw	r3,-24(fp)
1000e4fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e500:	e0bff917 	ldw	r2,-28(fp)
1000e504:	e0fffa17 	ldw	r3,-24(fp)
1000e508:	10c00015 	stw	r3,0(r2)
1000e50c:	e0bff717 	ldw	r2,-36(fp)
1000e510:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e514:	e0bffb17 	ldw	r2,-20(fp)
1000e518:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000e51c:	0005883a 	mov	r2,zero
1000e520:	00000306 	br	1000e530 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000e524:	00bffa84 	movi	r2,-22
1000e528:	00000106 	br	1000e530 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000e52c:	00bfde84 	movi	r2,-134
  }
}
1000e530:	e037883a 	mov	sp,fp
1000e534:	df000017 	ldw	fp,0(sp)
1000e538:	dec00104 	addi	sp,sp,4
1000e53c:	f800283a 	ret

1000e540 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000e540:	deffff04 	addi	sp,sp,-4
1000e544:	df000015 	stw	fp,0(sp)
1000e548:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000e54c:	e037883a 	mov	sp,fp
1000e550:	df000017 	ldw	fp,0(sp)
1000e554:	dec00104 	addi	sp,sp,4
1000e558:	f800283a 	ret

1000e55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e55c:	defffe04 	addi	sp,sp,-8
1000e560:	dfc00115 	stw	ra,4(sp)
1000e564:	df000015 	stw	fp,0(sp)
1000e568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e56c:	00840074 	movhi	r2,4097
1000e570:	10853304 	addi	r2,r2,5324
1000e574:	10800017 	ldw	r2,0(r2)
1000e578:	10000526 	beq	r2,zero,1000e590 <alt_get_errno+0x34>
1000e57c:	00840074 	movhi	r2,4097
1000e580:	10853304 	addi	r2,r2,5324
1000e584:	10800017 	ldw	r2,0(r2)
1000e588:	103ee83a 	callr	r2
1000e58c:	00000206 	br	1000e598 <alt_get_errno+0x3c>
1000e590:	00840074 	movhi	r2,4097
1000e594:	108bf904 	addi	r2,r2,12260
}
1000e598:	e037883a 	mov	sp,fp
1000e59c:	dfc00117 	ldw	ra,4(sp)
1000e5a0:	df000017 	ldw	fp,0(sp)
1000e5a4:	dec00204 	addi	sp,sp,8
1000e5a8:	f800283a 	ret

1000e5ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000e5ac:	defffa04 	addi	sp,sp,-24
1000e5b0:	dfc00515 	stw	ra,20(sp)
1000e5b4:	df000415 	stw	fp,16(sp)
1000e5b8:	df000404 	addi	fp,sp,16
1000e5bc:	e13ffe15 	stw	r4,-8(fp)
1000e5c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000e5c4:	e0bffe17 	ldw	r2,-8(fp)
1000e5c8:	10000326 	beq	r2,zero,1000e5d8 <alt_dev_llist_insert+0x2c>
1000e5cc:	e0bffe17 	ldw	r2,-8(fp)
1000e5d0:	10800217 	ldw	r2,8(r2)
1000e5d4:	1000061e 	bne	r2,zero,1000e5f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000e5d8:	000e55c0 	call	1000e55c <alt_get_errno>
1000e5dc:	1007883a 	mov	r3,r2
1000e5e0:	00800584 	movi	r2,22
1000e5e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000e5e8:	00bffa84 	movi	r2,-22
1000e5ec:	00001306 	br	1000e63c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000e5f0:	e0bffe17 	ldw	r2,-8(fp)
1000e5f4:	e0ffff17 	ldw	r3,-4(fp)
1000e5f8:	e0fffc15 	stw	r3,-16(fp)
1000e5fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e600:	e0bffd17 	ldw	r2,-12(fp)
1000e604:	e0fffc17 	ldw	r3,-16(fp)
1000e608:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e60c:	e0bffc17 	ldw	r2,-16(fp)
1000e610:	10c00017 	ldw	r3,0(r2)
1000e614:	e0bffd17 	ldw	r2,-12(fp)
1000e618:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e61c:	e0bffc17 	ldw	r2,-16(fp)
1000e620:	10800017 	ldw	r2,0(r2)
1000e624:	e0fffd17 	ldw	r3,-12(fp)
1000e628:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e62c:	e0bffc17 	ldw	r2,-16(fp)
1000e630:	e0fffd17 	ldw	r3,-12(fp)
1000e634:	10c00015 	stw	r3,0(r2)

  return 0;  
1000e638:	0005883a 	mov	r2,zero
}
1000e63c:	e037883a 	mov	sp,fp
1000e640:	dfc00117 	ldw	ra,4(sp)
1000e644:	df000017 	ldw	fp,0(sp)
1000e648:	dec00204 	addi	sp,sp,8
1000e64c:	f800283a 	ret

1000e650 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000e650:	defffd04 	addi	sp,sp,-12
1000e654:	dfc00215 	stw	ra,8(sp)
1000e658:	df000115 	stw	fp,4(sp)
1000e65c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000e660:	00840074 	movhi	r2,4097
1000e664:	10bd9804 	addi	r2,r2,-2464
1000e668:	e0bfff15 	stw	r2,-4(fp)
1000e66c:	00000606 	br	1000e688 <_do_ctors+0x38>
        (*ctor) (); 
1000e670:	e0bfff17 	ldw	r2,-4(fp)
1000e674:	10800017 	ldw	r2,0(r2)
1000e678:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000e67c:	e0bfff17 	ldw	r2,-4(fp)
1000e680:	10bfff04 	addi	r2,r2,-4
1000e684:	e0bfff15 	stw	r2,-4(fp)
1000e688:	e0ffff17 	ldw	r3,-4(fp)
1000e68c:	00840074 	movhi	r2,4097
1000e690:	10bd9904 	addi	r2,r2,-2460
1000e694:	18bff62e 	bgeu	r3,r2,1000e670 <__alt_data_end+0xf800e670>
        (*ctor) (); 
}
1000e698:	e037883a 	mov	sp,fp
1000e69c:	dfc00117 	ldw	ra,4(sp)
1000e6a0:	df000017 	ldw	fp,0(sp)
1000e6a4:	dec00204 	addi	sp,sp,8
1000e6a8:	f800283a 	ret

1000e6ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000e6ac:	defffd04 	addi	sp,sp,-12
1000e6b0:	dfc00215 	stw	ra,8(sp)
1000e6b4:	df000115 	stw	fp,4(sp)
1000e6b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000e6bc:	00840074 	movhi	r2,4097
1000e6c0:	10bd9804 	addi	r2,r2,-2464
1000e6c4:	e0bfff15 	stw	r2,-4(fp)
1000e6c8:	00000606 	br	1000e6e4 <_do_dtors+0x38>
        (*dtor) (); 
1000e6cc:	e0bfff17 	ldw	r2,-4(fp)
1000e6d0:	10800017 	ldw	r2,0(r2)
1000e6d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000e6d8:	e0bfff17 	ldw	r2,-4(fp)
1000e6dc:	10bfff04 	addi	r2,r2,-4
1000e6e0:	e0bfff15 	stw	r2,-4(fp)
1000e6e4:	e0ffff17 	ldw	r3,-4(fp)
1000e6e8:	00840074 	movhi	r2,4097
1000e6ec:	10bd9904 	addi	r2,r2,-2460
1000e6f0:	18bff62e 	bgeu	r3,r2,1000e6cc <__alt_data_end+0xf800e6cc>
        (*dtor) (); 
}
1000e6f4:	e037883a 	mov	sp,fp
1000e6f8:	dfc00117 	ldw	ra,4(sp)
1000e6fc:	df000017 	ldw	fp,0(sp)
1000e700:	dec00204 	addi	sp,sp,8
1000e704:	f800283a 	ret

1000e708 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000e708:	deffff04 	addi	sp,sp,-4
1000e70c:	df000015 	stw	fp,0(sp)
1000e710:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000e714:	e037883a 	mov	sp,fp
1000e718:	df000017 	ldw	fp,0(sp)
1000e71c:	dec00104 	addi	sp,sp,4
1000e720:	f800283a 	ret

1000e724 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000e724:	defff904 	addi	sp,sp,-28
1000e728:	dfc00615 	stw	ra,24(sp)
1000e72c:	df000515 	stw	fp,20(sp)
1000e730:	df000504 	addi	fp,sp,20
1000e734:	e13ffc15 	stw	r4,-16(fp)
1000e738:	e17ffd15 	stw	r5,-12(fp)
1000e73c:	e1bffe15 	stw	r6,-8(fp)
1000e740:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000e744:	e0800217 	ldw	r2,8(fp)
1000e748:	d8800015 	stw	r2,0(sp)
1000e74c:	e13ffc17 	ldw	r4,-16(fp)
1000e750:	e17ffd17 	ldw	r5,-12(fp)
1000e754:	e1bffe17 	ldw	r6,-8(fp)
1000e758:	e1ffff17 	ldw	r7,-4(fp)
1000e75c:	000e9040 	call	1000e904 <alt_iic_isr_register>
}  
1000e760:	e037883a 	mov	sp,fp
1000e764:	dfc00117 	ldw	ra,4(sp)
1000e768:	df000017 	ldw	fp,0(sp)
1000e76c:	dec00204 	addi	sp,sp,8
1000e770:	f800283a 	ret

1000e774 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000e774:	defff904 	addi	sp,sp,-28
1000e778:	df000615 	stw	fp,24(sp)
1000e77c:	df000604 	addi	fp,sp,24
1000e780:	e13ffe15 	stw	r4,-8(fp)
1000e784:	e17fff15 	stw	r5,-4(fp)
1000e788:	e0bfff17 	ldw	r2,-4(fp)
1000e78c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e790:	0005303a 	rdctl	r2,status
1000e794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e798:	e0fffb17 	ldw	r3,-20(fp)
1000e79c:	00bfff84 	movi	r2,-2
1000e7a0:	1884703a 	and	r2,r3,r2
1000e7a4:	1001703a 	wrctl	status,r2
  
  return context;
1000e7a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000e7ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000e7b0:	e0bffa17 	ldw	r2,-24(fp)
1000e7b4:	00c00044 	movi	r3,1
1000e7b8:	1884983a 	sll	r2,r3,r2
1000e7bc:	1007883a 	mov	r3,r2
1000e7c0:	00840074 	movhi	r2,4097
1000e7c4:	108bfd04 	addi	r2,r2,12276
1000e7c8:	10800017 	ldw	r2,0(r2)
1000e7cc:	1886b03a 	or	r3,r3,r2
1000e7d0:	00840074 	movhi	r2,4097
1000e7d4:	108bfd04 	addi	r2,r2,12276
1000e7d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000e7dc:	00840074 	movhi	r2,4097
1000e7e0:	108bfd04 	addi	r2,r2,12276
1000e7e4:	10800017 	ldw	r2,0(r2)
1000e7e8:	100170fa 	wrctl	ienable,r2
1000e7ec:	e0bffc17 	ldw	r2,-16(fp)
1000e7f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e7f4:	e0bffd17 	ldw	r2,-12(fp)
1000e7f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000e7fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000e800:	0001883a 	nop
}
1000e804:	e037883a 	mov	sp,fp
1000e808:	df000017 	ldw	fp,0(sp)
1000e80c:	dec00104 	addi	sp,sp,4
1000e810:	f800283a 	ret

1000e814 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000e814:	defff904 	addi	sp,sp,-28
1000e818:	df000615 	stw	fp,24(sp)
1000e81c:	df000604 	addi	fp,sp,24
1000e820:	e13ffe15 	stw	r4,-8(fp)
1000e824:	e17fff15 	stw	r5,-4(fp)
1000e828:	e0bfff17 	ldw	r2,-4(fp)
1000e82c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e830:	0005303a 	rdctl	r2,status
1000e834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e838:	e0fffb17 	ldw	r3,-20(fp)
1000e83c:	00bfff84 	movi	r2,-2
1000e840:	1884703a 	and	r2,r3,r2
1000e844:	1001703a 	wrctl	status,r2
  
  return context;
1000e848:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000e84c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000e850:	e0bffa17 	ldw	r2,-24(fp)
1000e854:	00c00044 	movi	r3,1
1000e858:	1884983a 	sll	r2,r3,r2
1000e85c:	0084303a 	nor	r2,zero,r2
1000e860:	1007883a 	mov	r3,r2
1000e864:	00840074 	movhi	r2,4097
1000e868:	108bfd04 	addi	r2,r2,12276
1000e86c:	10800017 	ldw	r2,0(r2)
1000e870:	1886703a 	and	r3,r3,r2
1000e874:	00840074 	movhi	r2,4097
1000e878:	108bfd04 	addi	r2,r2,12276
1000e87c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000e880:	00840074 	movhi	r2,4097
1000e884:	108bfd04 	addi	r2,r2,12276
1000e888:	10800017 	ldw	r2,0(r2)
1000e88c:	100170fa 	wrctl	ienable,r2
1000e890:	e0bffc17 	ldw	r2,-16(fp)
1000e894:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e898:	e0bffd17 	ldw	r2,-12(fp)
1000e89c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000e8a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000e8a4:	0001883a 	nop
}
1000e8a8:	e037883a 	mov	sp,fp
1000e8ac:	df000017 	ldw	fp,0(sp)
1000e8b0:	dec00104 	addi	sp,sp,4
1000e8b4:	f800283a 	ret

1000e8b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000e8b8:	defffc04 	addi	sp,sp,-16
1000e8bc:	df000315 	stw	fp,12(sp)
1000e8c0:	df000304 	addi	fp,sp,12
1000e8c4:	e13ffe15 	stw	r4,-8(fp)
1000e8c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000e8cc:	000530fa 	rdctl	r2,ienable
1000e8d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000e8d4:	e0bfff17 	ldw	r2,-4(fp)
1000e8d8:	00c00044 	movi	r3,1
1000e8dc:	1884983a 	sll	r2,r3,r2
1000e8e0:	1007883a 	mov	r3,r2
1000e8e4:	e0bffd17 	ldw	r2,-12(fp)
1000e8e8:	1884703a 	and	r2,r3,r2
1000e8ec:	1004c03a 	cmpne	r2,r2,zero
1000e8f0:	10803fcc 	andi	r2,r2,255
}
1000e8f4:	e037883a 	mov	sp,fp
1000e8f8:	df000017 	ldw	fp,0(sp)
1000e8fc:	dec00104 	addi	sp,sp,4
1000e900:	f800283a 	ret

1000e904 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000e904:	defff504 	addi	sp,sp,-44
1000e908:	dfc00a15 	stw	ra,40(sp)
1000e90c:	df000915 	stw	fp,36(sp)
1000e910:	df000904 	addi	fp,sp,36
1000e914:	e13ffc15 	stw	r4,-16(fp)
1000e918:	e17ffd15 	stw	r5,-12(fp)
1000e91c:	e1bffe15 	stw	r6,-8(fp)
1000e920:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000e924:	00bffa84 	movi	r2,-22
1000e928:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000e92c:	e0bffd17 	ldw	r2,-12(fp)
1000e930:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000e934:	e0bff817 	ldw	r2,-32(fp)
1000e938:	10800808 	cmpgei	r2,r2,32
1000e93c:	1000271e 	bne	r2,zero,1000e9dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e940:	0005303a 	rdctl	r2,status
1000e944:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e948:	e0fffa17 	ldw	r3,-24(fp)
1000e94c:	00bfff84 	movi	r2,-2
1000e950:	1884703a 	and	r2,r3,r2
1000e954:	1001703a 	wrctl	status,r2
  
  return context;
1000e958:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000e95c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000e960:	00840074 	movhi	r2,4097
1000e964:	108c0b04 	addi	r2,r2,12332
1000e968:	e0fff817 	ldw	r3,-32(fp)
1000e96c:	180690fa 	slli	r3,r3,3
1000e970:	10c5883a 	add	r2,r2,r3
1000e974:	e0fffe17 	ldw	r3,-8(fp)
1000e978:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000e97c:	00840074 	movhi	r2,4097
1000e980:	108c0b04 	addi	r2,r2,12332
1000e984:	e0fff817 	ldw	r3,-32(fp)
1000e988:	180690fa 	slli	r3,r3,3
1000e98c:	10c5883a 	add	r2,r2,r3
1000e990:	10800104 	addi	r2,r2,4
1000e994:	e0ffff17 	ldw	r3,-4(fp)
1000e998:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000e99c:	e0bffe17 	ldw	r2,-8(fp)
1000e9a0:	10000526 	beq	r2,zero,1000e9b8 <alt_iic_isr_register+0xb4>
1000e9a4:	e0bff817 	ldw	r2,-32(fp)
1000e9a8:	e13ffc17 	ldw	r4,-16(fp)
1000e9ac:	100b883a 	mov	r5,r2
1000e9b0:	000e7740 	call	1000e774 <alt_ic_irq_enable>
1000e9b4:	00000406 	br	1000e9c8 <alt_iic_isr_register+0xc4>
1000e9b8:	e0bff817 	ldw	r2,-32(fp)
1000e9bc:	e13ffc17 	ldw	r4,-16(fp)
1000e9c0:	100b883a 	mov	r5,r2
1000e9c4:	000e8140 	call	1000e814 <alt_ic_irq_disable>
1000e9c8:	e0bff715 	stw	r2,-36(fp)
1000e9cc:	e0bff917 	ldw	r2,-28(fp)
1000e9d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e9d4:	e0bffb17 	ldw	r2,-20(fp)
1000e9d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000e9dc:	e0bff717 	ldw	r2,-36(fp)
}
1000e9e0:	e037883a 	mov	sp,fp
1000e9e4:	dfc00117 	ldw	ra,4(sp)
1000e9e8:	df000017 	ldw	fp,0(sp)
1000e9ec:	dec00204 	addi	sp,sp,8
1000e9f0:	f800283a 	ret

1000e9f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000e9f4:	defff804 	addi	sp,sp,-32
1000e9f8:	dfc00715 	stw	ra,28(sp)
1000e9fc:	df000615 	stw	fp,24(sp)
1000ea00:	dc000515 	stw	r16,20(sp)
1000ea04:	df000604 	addi	fp,sp,24
1000ea08:	e13ffb15 	stw	r4,-20(fp)
1000ea0c:	e17ffc15 	stw	r5,-16(fp)
1000ea10:	e1bffd15 	stw	r6,-12(fp)
1000ea14:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000ea18:	e13ffc17 	ldw	r4,-16(fp)
1000ea1c:	e17ffd17 	ldw	r5,-12(fp)
1000ea20:	e1bffe17 	ldw	r6,-8(fp)
1000ea24:	000ec900 	call	1000ec90 <open>
1000ea28:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000ea2c:	e0bffa17 	ldw	r2,-24(fp)
1000ea30:	10002216 	blt	r2,zero,1000eabc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000ea34:	04040074 	movhi	r16,4097
1000ea38:	8400b004 	addi	r16,r16,704
1000ea3c:	e0bffa17 	ldw	r2,-24(fp)
1000ea40:	1009883a 	mov	r4,r2
1000ea44:	01400304 	movi	r5,12
1000ea48:	00005a80 	call	100005a8 <__mulsi3>
1000ea4c:	8085883a 	add	r2,r16,r2
1000ea50:	10c00017 	ldw	r3,0(r2)
1000ea54:	e0bffb17 	ldw	r2,-20(fp)
1000ea58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000ea5c:	04040074 	movhi	r16,4097
1000ea60:	8400b004 	addi	r16,r16,704
1000ea64:	e0bffa17 	ldw	r2,-24(fp)
1000ea68:	1009883a 	mov	r4,r2
1000ea6c:	01400304 	movi	r5,12
1000ea70:	00005a80 	call	100005a8 <__mulsi3>
1000ea74:	8085883a 	add	r2,r16,r2
1000ea78:	10800104 	addi	r2,r2,4
1000ea7c:	10c00017 	ldw	r3,0(r2)
1000ea80:	e0bffb17 	ldw	r2,-20(fp)
1000ea84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000ea88:	04040074 	movhi	r16,4097
1000ea8c:	8400b004 	addi	r16,r16,704
1000ea90:	e0bffa17 	ldw	r2,-24(fp)
1000ea94:	1009883a 	mov	r4,r2
1000ea98:	01400304 	movi	r5,12
1000ea9c:	00005a80 	call	100005a8 <__mulsi3>
1000eaa0:	8085883a 	add	r2,r16,r2
1000eaa4:	10800204 	addi	r2,r2,8
1000eaa8:	10c00017 	ldw	r3,0(r2)
1000eaac:	e0bffb17 	ldw	r2,-20(fp)
1000eab0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000eab4:	e13ffa17 	ldw	r4,-24(fp)
1000eab8:	000d6800 	call	1000d680 <alt_release_fd>
  }
} 
1000eabc:	e6ffff04 	addi	sp,fp,-4
1000eac0:	dfc00217 	ldw	ra,8(sp)
1000eac4:	df000117 	ldw	fp,4(sp)
1000eac8:	dc000017 	ldw	r16,0(sp)
1000eacc:	dec00304 	addi	sp,sp,12
1000ead0:	f800283a 	ret

1000ead4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000ead4:	defffb04 	addi	sp,sp,-20
1000ead8:	dfc00415 	stw	ra,16(sp)
1000eadc:	df000315 	stw	fp,12(sp)
1000eae0:	df000304 	addi	fp,sp,12
1000eae4:	e13ffd15 	stw	r4,-12(fp)
1000eae8:	e17ffe15 	stw	r5,-8(fp)
1000eaec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000eaf0:	01040074 	movhi	r4,4097
1000eaf4:	2100b304 	addi	r4,r4,716
1000eaf8:	e17ffd17 	ldw	r5,-12(fp)
1000eafc:	01800044 	movi	r6,1
1000eb00:	01c07fc4 	movi	r7,511
1000eb04:	000e9f40 	call	1000e9f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000eb08:	01040074 	movhi	r4,4097
1000eb0c:	2100b004 	addi	r4,r4,704
1000eb10:	e17ffe17 	ldw	r5,-8(fp)
1000eb14:	000d883a 	mov	r6,zero
1000eb18:	01c07fc4 	movi	r7,511
1000eb1c:	000e9f40 	call	1000e9f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000eb20:	01040074 	movhi	r4,4097
1000eb24:	2100b604 	addi	r4,r4,728
1000eb28:	e17fff17 	ldw	r5,-4(fp)
1000eb2c:	01800044 	movi	r6,1
1000eb30:	01c07fc4 	movi	r7,511
1000eb34:	000e9f40 	call	1000e9f4 <alt_open_fd>
}  
1000eb38:	e037883a 	mov	sp,fp
1000eb3c:	dfc00117 	ldw	ra,4(sp)
1000eb40:	df000017 	ldw	fp,0(sp)
1000eb44:	dec00204 	addi	sp,sp,8
1000eb48:	f800283a 	ret

1000eb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eb4c:	defffe04 	addi	sp,sp,-8
1000eb50:	dfc00115 	stw	ra,4(sp)
1000eb54:	df000015 	stw	fp,0(sp)
1000eb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eb5c:	00840074 	movhi	r2,4097
1000eb60:	10853304 	addi	r2,r2,5324
1000eb64:	10800017 	ldw	r2,0(r2)
1000eb68:	10000526 	beq	r2,zero,1000eb80 <alt_get_errno+0x34>
1000eb6c:	00840074 	movhi	r2,4097
1000eb70:	10853304 	addi	r2,r2,5324
1000eb74:	10800017 	ldw	r2,0(r2)
1000eb78:	103ee83a 	callr	r2
1000eb7c:	00000206 	br	1000eb88 <alt_get_errno+0x3c>
1000eb80:	00840074 	movhi	r2,4097
1000eb84:	108bf904 	addi	r2,r2,12260
}
1000eb88:	e037883a 	mov	sp,fp
1000eb8c:	dfc00117 	ldw	ra,4(sp)
1000eb90:	df000017 	ldw	fp,0(sp)
1000eb94:	dec00204 	addi	sp,sp,8
1000eb98:	f800283a 	ret

1000eb9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000eb9c:	defffb04 	addi	sp,sp,-20
1000eba0:	dfc00415 	stw	ra,16(sp)
1000eba4:	df000315 	stw	fp,12(sp)
1000eba8:	dc000215 	stw	r16,8(sp)
1000ebac:	df000304 	addi	fp,sp,12
1000ebb0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000ebb4:	e0bffe17 	ldw	r2,-8(fp)
1000ebb8:	10800217 	ldw	r2,8(r2)
1000ebbc:	10d00034 	orhi	r3,r2,16384
1000ebc0:	e0bffe17 	ldw	r2,-8(fp)
1000ebc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000ebc8:	e03ffd15 	stw	zero,-12(fp)
1000ebcc:	00002306 	br	1000ec5c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000ebd0:	04040074 	movhi	r16,4097
1000ebd4:	8400b004 	addi	r16,r16,704
1000ebd8:	e0bffd17 	ldw	r2,-12(fp)
1000ebdc:	1009883a 	mov	r4,r2
1000ebe0:	01400304 	movi	r5,12
1000ebe4:	00005a80 	call	100005a8 <__mulsi3>
1000ebe8:	8085883a 	add	r2,r16,r2
1000ebec:	10c00017 	ldw	r3,0(r2)
1000ebf0:	e0bffe17 	ldw	r2,-8(fp)
1000ebf4:	10800017 	ldw	r2,0(r2)
1000ebf8:	1880151e 	bne	r3,r2,1000ec50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000ebfc:	04040074 	movhi	r16,4097
1000ec00:	8400b004 	addi	r16,r16,704
1000ec04:	e0bffd17 	ldw	r2,-12(fp)
1000ec08:	1009883a 	mov	r4,r2
1000ec0c:	01400304 	movi	r5,12
1000ec10:	00005a80 	call	100005a8 <__mulsi3>
1000ec14:	8085883a 	add	r2,r16,r2
1000ec18:	10800204 	addi	r2,r2,8
1000ec1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000ec20:	10000b0e 	bge	r2,zero,1000ec50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000ec24:	e13ffd17 	ldw	r4,-12(fp)
1000ec28:	01400304 	movi	r5,12
1000ec2c:	00005a80 	call	100005a8 <__mulsi3>
1000ec30:	1007883a 	mov	r3,r2
1000ec34:	00840074 	movhi	r2,4097
1000ec38:	1080b004 	addi	r2,r2,704
1000ec3c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000ec40:	e0bffe17 	ldw	r2,-8(fp)
1000ec44:	18800226 	beq	r3,r2,1000ec50 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000ec48:	00bffcc4 	movi	r2,-13
1000ec4c:	00000a06 	br	1000ec78 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000ec50:	e0bffd17 	ldw	r2,-12(fp)
1000ec54:	10800044 	addi	r2,r2,1
1000ec58:	e0bffd15 	stw	r2,-12(fp)
1000ec5c:	00840074 	movhi	r2,4097
1000ec60:	10853204 	addi	r2,r2,5320
1000ec64:	10800017 	ldw	r2,0(r2)
1000ec68:	1007883a 	mov	r3,r2
1000ec6c:	e0bffd17 	ldw	r2,-12(fp)
1000ec70:	18bfd72e 	bgeu	r3,r2,1000ebd0 <__alt_data_end+0xf800ebd0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000ec74:	0005883a 	mov	r2,zero
}
1000ec78:	e6ffff04 	addi	sp,fp,-4
1000ec7c:	dfc00217 	ldw	ra,8(sp)
1000ec80:	df000117 	ldw	fp,4(sp)
1000ec84:	dc000017 	ldw	r16,0(sp)
1000ec88:	dec00304 	addi	sp,sp,12
1000ec8c:	f800283a 	ret

1000ec90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000ec90:	defff604 	addi	sp,sp,-40
1000ec94:	dfc00915 	stw	ra,36(sp)
1000ec98:	df000815 	stw	fp,32(sp)
1000ec9c:	df000804 	addi	fp,sp,32
1000eca0:	e13ffd15 	stw	r4,-12(fp)
1000eca4:	e17ffe15 	stw	r5,-8(fp)
1000eca8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000ecac:	00bfffc4 	movi	r2,-1
1000ecb0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000ecb4:	00bffb44 	movi	r2,-19
1000ecb8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000ecbc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000ecc0:	e13ffd17 	ldw	r4,-12(fp)
1000ecc4:	01440074 	movhi	r5,4097
1000ecc8:	29453004 	addi	r5,r5,5312
1000eccc:	000efac0 	call	1000efac <alt_find_dev>
1000ecd0:	e0bff815 	stw	r2,-32(fp)
1000ecd4:	e0bff817 	ldw	r2,-32(fp)
1000ecd8:	1000051e 	bne	r2,zero,1000ecf0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000ecdc:	e13ffd17 	ldw	r4,-12(fp)
1000ece0:	000f03c0 	call	1000f03c <alt_find_file>
1000ece4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000ece8:	00800044 	movi	r2,1
1000ecec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000ecf0:	e0bff817 	ldw	r2,-32(fp)
1000ecf4:	10002b26 	beq	r2,zero,1000eda4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000ecf8:	e13ff817 	ldw	r4,-32(fp)
1000ecfc:	000f1500 	call	1000f150 <alt_get_fd>
1000ed00:	e0bff915 	stw	r2,-28(fp)
1000ed04:	e0bff917 	ldw	r2,-28(fp)
1000ed08:	1000030e 	bge	r2,zero,1000ed18 <open+0x88>
    {
      status = index;
1000ed0c:	e0bff917 	ldw	r2,-28(fp)
1000ed10:	e0bffa15 	stw	r2,-24(fp)
1000ed14:	00002506 	br	1000edac <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000ed18:	e13ff917 	ldw	r4,-28(fp)
1000ed1c:	01400304 	movi	r5,12
1000ed20:	00005a80 	call	100005a8 <__mulsi3>
1000ed24:	1007883a 	mov	r3,r2
1000ed28:	00840074 	movhi	r2,4097
1000ed2c:	1080b004 	addi	r2,r2,704
1000ed30:	1885883a 	add	r2,r3,r2
1000ed34:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000ed38:	e0fffe17 	ldw	r3,-8(fp)
1000ed3c:	00900034 	movhi	r2,16384
1000ed40:	10bfffc4 	addi	r2,r2,-1
1000ed44:	1886703a 	and	r3,r3,r2
1000ed48:	e0bffc17 	ldw	r2,-16(fp)
1000ed4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000ed50:	e0bffb17 	ldw	r2,-20(fp)
1000ed54:	1000051e 	bne	r2,zero,1000ed6c <open+0xdc>
1000ed58:	e13ffc17 	ldw	r4,-16(fp)
1000ed5c:	000eb9c0 	call	1000eb9c <alt_file_locked>
1000ed60:	e0bffa15 	stw	r2,-24(fp)
1000ed64:	e0bffa17 	ldw	r2,-24(fp)
1000ed68:	10001016 	blt	r2,zero,1000edac <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000ed6c:	e0bff817 	ldw	r2,-32(fp)
1000ed70:	10800317 	ldw	r2,12(r2)
1000ed74:	10000826 	beq	r2,zero,1000ed98 <open+0x108>
1000ed78:	e0bff817 	ldw	r2,-32(fp)
1000ed7c:	10800317 	ldw	r2,12(r2)
1000ed80:	e13ffc17 	ldw	r4,-16(fp)
1000ed84:	e17ffd17 	ldw	r5,-12(fp)
1000ed88:	e1bffe17 	ldw	r6,-8(fp)
1000ed8c:	e1ffff17 	ldw	r7,-4(fp)
1000ed90:	103ee83a 	callr	r2
1000ed94:	00000106 	br	1000ed9c <open+0x10c>
1000ed98:	0005883a 	mov	r2,zero
1000ed9c:	e0bffa15 	stw	r2,-24(fp)
1000eda0:	00000206 	br	1000edac <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000eda4:	00bffb44 	movi	r2,-19
1000eda8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000edac:	e0bffa17 	ldw	r2,-24(fp)
1000edb0:	1000090e 	bge	r2,zero,1000edd8 <open+0x148>
  {
    alt_release_fd (index);  
1000edb4:	e13ff917 	ldw	r4,-28(fp)
1000edb8:	000d6800 	call	1000d680 <alt_release_fd>
    ALT_ERRNO = -status;
1000edbc:	000eb4c0 	call	1000eb4c <alt_get_errno>
1000edc0:	1007883a 	mov	r3,r2
1000edc4:	e0bffa17 	ldw	r2,-24(fp)
1000edc8:	0085c83a 	sub	r2,zero,r2
1000edcc:	18800015 	stw	r2,0(r3)
    return -1;
1000edd0:	00bfffc4 	movi	r2,-1
1000edd4:	00000106 	br	1000eddc <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000edd8:	e0bff917 	ldw	r2,-28(fp)
}
1000eddc:	e037883a 	mov	sp,fp
1000ede0:	dfc00117 	ldw	ra,4(sp)
1000ede4:	df000017 	ldw	fp,0(sp)
1000ede8:	dec00204 	addi	sp,sp,8
1000edec:	f800283a 	ret

1000edf0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000edf0:	defffa04 	addi	sp,sp,-24
1000edf4:	df000515 	stw	fp,20(sp)
1000edf8:	df000504 	addi	fp,sp,20
1000edfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ee00:	0005303a 	rdctl	r2,status
1000ee04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ee08:	e0fffc17 	ldw	r3,-16(fp)
1000ee0c:	00bfff84 	movi	r2,-2
1000ee10:	1884703a 	and	r2,r3,r2
1000ee14:	1001703a 	wrctl	status,r2
  
  return context;
1000ee18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000ee1c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000ee20:	e0bfff17 	ldw	r2,-4(fp)
1000ee24:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000ee28:	e0bffd17 	ldw	r2,-12(fp)
1000ee2c:	10800017 	ldw	r2,0(r2)
1000ee30:	e0fffd17 	ldw	r3,-12(fp)
1000ee34:	18c00117 	ldw	r3,4(r3)
1000ee38:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000ee3c:	e0bffd17 	ldw	r2,-12(fp)
1000ee40:	10800117 	ldw	r2,4(r2)
1000ee44:	e0fffd17 	ldw	r3,-12(fp)
1000ee48:	18c00017 	ldw	r3,0(r3)
1000ee4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000ee50:	e0bffd17 	ldw	r2,-12(fp)
1000ee54:	e0fffd17 	ldw	r3,-12(fp)
1000ee58:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000ee5c:	e0bffd17 	ldw	r2,-12(fp)
1000ee60:	e0fffd17 	ldw	r3,-12(fp)
1000ee64:	10c00015 	stw	r3,0(r2)
1000ee68:	e0bffb17 	ldw	r2,-20(fp)
1000ee6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ee70:	e0bffe17 	ldw	r2,-8(fp)
1000ee74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000ee78:	e037883a 	mov	sp,fp
1000ee7c:	df000017 	ldw	fp,0(sp)
1000ee80:	dec00104 	addi	sp,sp,4
1000ee84:	f800283a 	ret

1000ee88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000ee88:	defffb04 	addi	sp,sp,-20
1000ee8c:	dfc00415 	stw	ra,16(sp)
1000ee90:	df000315 	stw	fp,12(sp)
1000ee94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000ee98:	d0a00e17 	ldw	r2,-32712(gp)
1000ee9c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000eea0:	d0a6d717 	ldw	r2,-25764(gp)
1000eea4:	10800044 	addi	r2,r2,1
1000eea8:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000eeac:	00002e06 	br	1000ef68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000eeb0:	e0bffd17 	ldw	r2,-12(fp)
1000eeb4:	10800017 	ldw	r2,0(r2)
1000eeb8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000eebc:	e0bffd17 	ldw	r2,-12(fp)
1000eec0:	10800403 	ldbu	r2,16(r2)
1000eec4:	10803fcc 	andi	r2,r2,255
1000eec8:	10000426 	beq	r2,zero,1000eedc <alt_tick+0x54>
1000eecc:	d0a6d717 	ldw	r2,-25764(gp)
1000eed0:	1000021e 	bne	r2,zero,1000eedc <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000eed4:	e0bffd17 	ldw	r2,-12(fp)
1000eed8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000eedc:	e0bffd17 	ldw	r2,-12(fp)
1000eee0:	10800217 	ldw	r2,8(r2)
1000eee4:	d0e6d717 	ldw	r3,-25764(gp)
1000eee8:	18801d36 	bltu	r3,r2,1000ef60 <alt_tick+0xd8>
1000eeec:	e0bffd17 	ldw	r2,-12(fp)
1000eef0:	10800403 	ldbu	r2,16(r2)
1000eef4:	10803fcc 	andi	r2,r2,255
1000eef8:	1000191e 	bne	r2,zero,1000ef60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000eefc:	e0bffd17 	ldw	r2,-12(fp)
1000ef00:	10800317 	ldw	r2,12(r2)
1000ef04:	e0fffd17 	ldw	r3,-12(fp)
1000ef08:	18c00517 	ldw	r3,20(r3)
1000ef0c:	1809883a 	mov	r4,r3
1000ef10:	103ee83a 	callr	r2
1000ef14:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000ef18:	e0bfff17 	ldw	r2,-4(fp)
1000ef1c:	1000031e 	bne	r2,zero,1000ef2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000ef20:	e13ffd17 	ldw	r4,-12(fp)
1000ef24:	000edf00 	call	1000edf0 <alt_alarm_stop>
1000ef28:	00000d06 	br	1000ef60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000ef2c:	e0bffd17 	ldw	r2,-12(fp)
1000ef30:	10c00217 	ldw	r3,8(r2)
1000ef34:	e0bfff17 	ldw	r2,-4(fp)
1000ef38:	1887883a 	add	r3,r3,r2
1000ef3c:	e0bffd17 	ldw	r2,-12(fp)
1000ef40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000ef44:	e0bffd17 	ldw	r2,-12(fp)
1000ef48:	10c00217 	ldw	r3,8(r2)
1000ef4c:	d0a6d717 	ldw	r2,-25764(gp)
1000ef50:	1880032e 	bgeu	r3,r2,1000ef60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000ef54:	e0bffd17 	ldw	r2,-12(fp)
1000ef58:	00c00044 	movi	r3,1
1000ef5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000ef60:	e0bffe17 	ldw	r2,-8(fp)
1000ef64:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000ef68:	e0fffd17 	ldw	r3,-12(fp)
1000ef6c:	d0a00e04 	addi	r2,gp,-32712
1000ef70:	18bfcf1e 	bne	r3,r2,1000eeb0 <__alt_data_end+0xf800eeb0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000ef74:	0001883a 	nop
}
1000ef78:	e037883a 	mov	sp,fp
1000ef7c:	dfc00117 	ldw	ra,4(sp)
1000ef80:	df000017 	ldw	fp,0(sp)
1000ef84:	dec00204 	addi	sp,sp,8
1000ef88:	f800283a 	ret

1000ef8c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000ef8c:	deffff04 	addi	sp,sp,-4
1000ef90:	df000015 	stw	fp,0(sp)
1000ef94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000ef98:	000170fa 	wrctl	ienable,zero
}
1000ef9c:	e037883a 	mov	sp,fp
1000efa0:	df000017 	ldw	fp,0(sp)
1000efa4:	dec00104 	addi	sp,sp,4
1000efa8:	f800283a 	ret

1000efac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000efac:	defffa04 	addi	sp,sp,-24
1000efb0:	dfc00515 	stw	ra,20(sp)
1000efb4:	df000415 	stw	fp,16(sp)
1000efb8:	df000404 	addi	fp,sp,16
1000efbc:	e13ffe15 	stw	r4,-8(fp)
1000efc0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000efc4:	e0bfff17 	ldw	r2,-4(fp)
1000efc8:	10800017 	ldw	r2,0(r2)
1000efcc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000efd0:	e13ffe17 	ldw	r4,-8(fp)
1000efd4:	00007040 	call	10000704 <strlen>
1000efd8:	10800044 	addi	r2,r2,1
1000efdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000efe0:	00000d06 	br	1000f018 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000efe4:	e0bffc17 	ldw	r2,-16(fp)
1000efe8:	10c00217 	ldw	r3,8(r2)
1000efec:	e0bffd17 	ldw	r2,-12(fp)
1000eff0:	1809883a 	mov	r4,r3
1000eff4:	e17ffe17 	ldw	r5,-8(fp)
1000eff8:	100d883a 	mov	r6,r2
1000effc:	000f30c0 	call	1000f30c <memcmp>
1000f000:	1000021e 	bne	r2,zero,1000f00c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000f004:	e0bffc17 	ldw	r2,-16(fp)
1000f008:	00000706 	br	1000f028 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000f00c:	e0bffc17 	ldw	r2,-16(fp)
1000f010:	10800017 	ldw	r2,0(r2)
1000f014:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f018:	e0fffc17 	ldw	r3,-16(fp)
1000f01c:	e0bfff17 	ldw	r2,-4(fp)
1000f020:	18bff01e 	bne	r3,r2,1000efe4 <__alt_data_end+0xf800efe4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000f024:	0005883a 	mov	r2,zero
}
1000f028:	e037883a 	mov	sp,fp
1000f02c:	dfc00117 	ldw	ra,4(sp)
1000f030:	df000017 	ldw	fp,0(sp)
1000f034:	dec00204 	addi	sp,sp,8
1000f038:	f800283a 	ret

1000f03c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f03c:	defffb04 	addi	sp,sp,-20
1000f040:	dfc00415 	stw	ra,16(sp)
1000f044:	df000315 	stw	fp,12(sp)
1000f048:	df000304 	addi	fp,sp,12
1000f04c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f050:	00840074 	movhi	r2,4097
1000f054:	10852e04 	addi	r2,r2,5304
1000f058:	10800017 	ldw	r2,0(r2)
1000f05c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f060:	00003106 	br	1000f128 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f064:	e0bffd17 	ldw	r2,-12(fp)
1000f068:	10800217 	ldw	r2,8(r2)
1000f06c:	1009883a 	mov	r4,r2
1000f070:	00007040 	call	10000704 <strlen>
1000f074:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f078:	e0bffd17 	ldw	r2,-12(fp)
1000f07c:	10c00217 	ldw	r3,8(r2)
1000f080:	e0bffe17 	ldw	r2,-8(fp)
1000f084:	10bfffc4 	addi	r2,r2,-1
1000f088:	1885883a 	add	r2,r3,r2
1000f08c:	10800003 	ldbu	r2,0(r2)
1000f090:	10803fcc 	andi	r2,r2,255
1000f094:	1080201c 	xori	r2,r2,128
1000f098:	10bfe004 	addi	r2,r2,-128
1000f09c:	10800bd8 	cmpnei	r2,r2,47
1000f0a0:	1000031e 	bne	r2,zero,1000f0b0 <alt_find_file+0x74>
    {
      len -= 1;
1000f0a4:	e0bffe17 	ldw	r2,-8(fp)
1000f0a8:	10bfffc4 	addi	r2,r2,-1
1000f0ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f0b0:	e0bffe17 	ldw	r2,-8(fp)
1000f0b4:	e0ffff17 	ldw	r3,-4(fp)
1000f0b8:	1885883a 	add	r2,r3,r2
1000f0bc:	10800003 	ldbu	r2,0(r2)
1000f0c0:	10803fcc 	andi	r2,r2,255
1000f0c4:	1080201c 	xori	r2,r2,128
1000f0c8:	10bfe004 	addi	r2,r2,-128
1000f0cc:	10800be0 	cmpeqi	r2,r2,47
1000f0d0:	1000081e 	bne	r2,zero,1000f0f4 <alt_find_file+0xb8>
1000f0d4:	e0bffe17 	ldw	r2,-8(fp)
1000f0d8:	e0ffff17 	ldw	r3,-4(fp)
1000f0dc:	1885883a 	add	r2,r3,r2
1000f0e0:	10800003 	ldbu	r2,0(r2)
1000f0e4:	10803fcc 	andi	r2,r2,255
1000f0e8:	1080201c 	xori	r2,r2,128
1000f0ec:	10bfe004 	addi	r2,r2,-128
1000f0f0:	10000a1e 	bne	r2,zero,1000f11c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f0f4:	e0bffd17 	ldw	r2,-12(fp)
1000f0f8:	10c00217 	ldw	r3,8(r2)
1000f0fc:	e0bffe17 	ldw	r2,-8(fp)
1000f100:	1809883a 	mov	r4,r3
1000f104:	e17fff17 	ldw	r5,-4(fp)
1000f108:	100d883a 	mov	r6,r2
1000f10c:	000f30c0 	call	1000f30c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f110:	1000021e 	bne	r2,zero,1000f11c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f114:	e0bffd17 	ldw	r2,-12(fp)
1000f118:	00000806 	br	1000f13c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f11c:	e0bffd17 	ldw	r2,-12(fp)
1000f120:	10800017 	ldw	r2,0(r2)
1000f124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f128:	e0fffd17 	ldw	r3,-12(fp)
1000f12c:	00840074 	movhi	r2,4097
1000f130:	10852e04 	addi	r2,r2,5304
1000f134:	18bfcb1e 	bne	r3,r2,1000f064 <__alt_data_end+0xf800f064>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f138:	0005883a 	mov	r2,zero
}
1000f13c:	e037883a 	mov	sp,fp
1000f140:	dfc00117 	ldw	ra,4(sp)
1000f144:	df000017 	ldw	fp,0(sp)
1000f148:	dec00204 	addi	sp,sp,8
1000f14c:	f800283a 	ret

1000f150 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f150:	defffa04 	addi	sp,sp,-24
1000f154:	dfc00515 	stw	ra,20(sp)
1000f158:	df000415 	stw	fp,16(sp)
1000f15c:	dc000315 	stw	r16,12(sp)
1000f160:	df000404 	addi	fp,sp,16
1000f164:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f168:	00bffa04 	movi	r2,-24
1000f16c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f170:	e03ffc15 	stw	zero,-16(fp)
1000f174:	00002106 	br	1000f1fc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f178:	04040074 	movhi	r16,4097
1000f17c:	8400b004 	addi	r16,r16,704
1000f180:	e0bffc17 	ldw	r2,-16(fp)
1000f184:	1009883a 	mov	r4,r2
1000f188:	01400304 	movi	r5,12
1000f18c:	00005a80 	call	100005a8 <__mulsi3>
1000f190:	8085883a 	add	r2,r16,r2
1000f194:	10800017 	ldw	r2,0(r2)
1000f198:	1000151e 	bne	r2,zero,1000f1f0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000f19c:	04040074 	movhi	r16,4097
1000f1a0:	8400b004 	addi	r16,r16,704
1000f1a4:	e0bffc17 	ldw	r2,-16(fp)
1000f1a8:	1009883a 	mov	r4,r2
1000f1ac:	01400304 	movi	r5,12
1000f1b0:	00005a80 	call	100005a8 <__mulsi3>
1000f1b4:	8085883a 	add	r2,r16,r2
1000f1b8:	e0fffe17 	ldw	r3,-8(fp)
1000f1bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f1c0:	00840074 	movhi	r2,4097
1000f1c4:	10853204 	addi	r2,r2,5320
1000f1c8:	10c00017 	ldw	r3,0(r2)
1000f1cc:	e0bffc17 	ldw	r2,-16(fp)
1000f1d0:	1880040e 	bge	r3,r2,1000f1e4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000f1d4:	00840074 	movhi	r2,4097
1000f1d8:	10853204 	addi	r2,r2,5320
1000f1dc:	e0fffc17 	ldw	r3,-16(fp)
1000f1e0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000f1e4:	e0bffc17 	ldw	r2,-16(fp)
1000f1e8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000f1ec:	00000606 	br	1000f208 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f1f0:	e0bffc17 	ldw	r2,-16(fp)
1000f1f4:	10800044 	addi	r2,r2,1
1000f1f8:	e0bffc15 	stw	r2,-16(fp)
1000f1fc:	e0bffc17 	ldw	r2,-16(fp)
1000f200:	10800810 	cmplti	r2,r2,32
1000f204:	103fdc1e 	bne	r2,zero,1000f178 <__alt_data_end+0xf800f178>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f208:	e0bffd17 	ldw	r2,-12(fp)
}
1000f20c:	e6ffff04 	addi	sp,fp,-4
1000f210:	dfc00217 	ldw	ra,8(sp)
1000f214:	df000117 	ldw	fp,4(sp)
1000f218:	dc000017 	ldw	r16,0(sp)
1000f21c:	dec00304 	addi	sp,sp,12
1000f220:	f800283a 	ret

1000f224 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000f224:	defffe04 	addi	sp,sp,-8
1000f228:	df000115 	stw	fp,4(sp)
1000f22c:	df000104 	addi	fp,sp,4
1000f230:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000f234:	e0bfff17 	ldw	r2,-4(fp)
1000f238:	10bffe84 	addi	r2,r2,-6
1000f23c:	10c00428 	cmpgeui	r3,r2,16
1000f240:	18001a1e 	bne	r3,zero,1000f2ac <alt_exception_cause_generated_bad_addr+0x88>
1000f244:	100690ba 	slli	r3,r2,2
1000f248:	00840074 	movhi	r2,4097
1000f24c:	10bc9704 	addi	r2,r2,-3492
1000f250:	1885883a 	add	r2,r3,r2
1000f254:	10800017 	ldw	r2,0(r2)
1000f258:	1000683a 	jmp	r2
1000f25c:	1000f29c 	xori	zero,r2,970
1000f260:	1000f29c 	xori	zero,r2,970
1000f264:	1000f2ac 	andhi	zero,r2,970
1000f268:	1000f2ac 	andhi	zero,r2,970
1000f26c:	1000f2ac 	andhi	zero,r2,970
1000f270:	1000f29c 	xori	zero,r2,970
1000f274:	1000f2a4 	muli	zero,r2,970
1000f278:	1000f2ac 	andhi	zero,r2,970
1000f27c:	1000f29c 	xori	zero,r2,970
1000f280:	1000f29c 	xori	zero,r2,970
1000f284:	1000f2ac 	andhi	zero,r2,970
1000f288:	1000f29c 	xori	zero,r2,970
1000f28c:	1000f2a4 	muli	zero,r2,970
1000f290:	1000f2ac 	andhi	zero,r2,970
1000f294:	1000f2ac 	andhi	zero,r2,970
1000f298:	1000f29c 	xori	zero,r2,970
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000f29c:	00800044 	movi	r2,1
1000f2a0:	00000306 	br	1000f2b0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000f2a4:	0005883a 	mov	r2,zero
1000f2a8:	00000106 	br	1000f2b0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000f2ac:	0005883a 	mov	r2,zero
  }
}
1000f2b0:	e037883a 	mov	sp,fp
1000f2b4:	df000017 	ldw	fp,0(sp)
1000f2b8:	dec00104 	addi	sp,sp,4
1000f2bc:	f800283a 	ret

1000f2c0 <atexit>:
1000f2c0:	200b883a 	mov	r5,r4
1000f2c4:	000d883a 	mov	r6,zero
1000f2c8:	0009883a 	mov	r4,zero
1000f2cc:	000f883a 	mov	r7,zero
1000f2d0:	000f3881 	jmpi	1000f388 <__register_exitproc>

1000f2d4 <exit>:
1000f2d4:	defffe04 	addi	sp,sp,-8
1000f2d8:	000b883a 	mov	r5,zero
1000f2dc:	dc000015 	stw	r16,0(sp)
1000f2e0:	dfc00115 	stw	ra,4(sp)
1000f2e4:	2021883a 	mov	r16,r4
1000f2e8:	000f49c0 	call	1000f49c <__call_exitprocs>
1000f2ec:	00840074 	movhi	r2,4097
1000f2f0:	10852804 	addi	r2,r2,5280
1000f2f4:	11000017 	ldw	r4,0(r2)
1000f2f8:	20800f17 	ldw	r2,60(r4)
1000f2fc:	10000126 	beq	r2,zero,1000f304 <exit+0x30>
1000f300:	103ee83a 	callr	r2
1000f304:	8009883a 	mov	r4,r16
1000f308:	000f6300 	call	1000f630 <_exit>

1000f30c <memcmp>:
1000f30c:	01c000c4 	movi	r7,3
1000f310:	3980192e 	bgeu	r7,r6,1000f378 <memcmp+0x6c>
1000f314:	2144b03a 	or	r2,r4,r5
1000f318:	11c4703a 	and	r2,r2,r7
1000f31c:	10000f26 	beq	r2,zero,1000f35c <memcmp+0x50>
1000f320:	20800003 	ldbu	r2,0(r4)
1000f324:	28c00003 	ldbu	r3,0(r5)
1000f328:	10c0151e 	bne	r2,r3,1000f380 <memcmp+0x74>
1000f32c:	31bfff84 	addi	r6,r6,-2
1000f330:	01ffffc4 	movi	r7,-1
1000f334:	00000406 	br	1000f348 <memcmp+0x3c>
1000f338:	20800003 	ldbu	r2,0(r4)
1000f33c:	28c00003 	ldbu	r3,0(r5)
1000f340:	31bfffc4 	addi	r6,r6,-1
1000f344:	10c00e1e 	bne	r2,r3,1000f380 <memcmp+0x74>
1000f348:	21000044 	addi	r4,r4,1
1000f34c:	29400044 	addi	r5,r5,1
1000f350:	31fff91e 	bne	r6,r7,1000f338 <__alt_data_end+0xf800f338>
1000f354:	0005883a 	mov	r2,zero
1000f358:	f800283a 	ret
1000f35c:	20c00017 	ldw	r3,0(r4)
1000f360:	28800017 	ldw	r2,0(r5)
1000f364:	1880041e 	bne	r3,r2,1000f378 <memcmp+0x6c>
1000f368:	31bfff04 	addi	r6,r6,-4
1000f36c:	21000104 	addi	r4,r4,4
1000f370:	29400104 	addi	r5,r5,4
1000f374:	39bff936 	bltu	r7,r6,1000f35c <__alt_data_end+0xf800f35c>
1000f378:	303fe91e 	bne	r6,zero,1000f320 <__alt_data_end+0xf800f320>
1000f37c:	003ff506 	br	1000f354 <__alt_data_end+0xf800f354>
1000f380:	10c5c83a 	sub	r2,r2,r3
1000f384:	f800283a 	ret

1000f388 <__register_exitproc>:
1000f388:	00840074 	movhi	r2,4097
1000f38c:	defffa04 	addi	sp,sp,-24
1000f390:	10852804 	addi	r2,r2,5280
1000f394:	dc000315 	stw	r16,12(sp)
1000f398:	14000017 	ldw	r16,0(r2)
1000f39c:	dc400415 	stw	r17,16(sp)
1000f3a0:	dfc00515 	stw	ra,20(sp)
1000f3a4:	80805217 	ldw	r2,328(r16)
1000f3a8:	2023883a 	mov	r17,r4
1000f3ac:	10003626 	beq	r2,zero,1000f488 <__register_exitproc+0x100>
1000f3b0:	10c00117 	ldw	r3,4(r2)
1000f3b4:	010007c4 	movi	r4,31
1000f3b8:	20c00e16 	blt	r4,r3,1000f3f4 <__register_exitproc+0x6c>
1000f3bc:	1a400044 	addi	r9,r3,1
1000f3c0:	8800211e 	bne	r17,zero,1000f448 <__register_exitproc+0xc0>
1000f3c4:	18c00084 	addi	r3,r3,2
1000f3c8:	18c7883a 	add	r3,r3,r3
1000f3cc:	18c7883a 	add	r3,r3,r3
1000f3d0:	12400115 	stw	r9,4(r2)
1000f3d4:	10c7883a 	add	r3,r2,r3
1000f3d8:	19400015 	stw	r5,0(r3)
1000f3dc:	0005883a 	mov	r2,zero
1000f3e0:	dfc00517 	ldw	ra,20(sp)
1000f3e4:	dc400417 	ldw	r17,16(sp)
1000f3e8:	dc000317 	ldw	r16,12(sp)
1000f3ec:	dec00604 	addi	sp,sp,24
1000f3f0:	f800283a 	ret
1000f3f4:	00800034 	movhi	r2,0
1000f3f8:	10800004 	addi	r2,r2,0
1000f3fc:	10002526 	beq	r2,zero,1000f494 <__register_exitproc+0x10c>
1000f400:	01006404 	movi	r4,400
1000f404:	d9400015 	stw	r5,0(sp)
1000f408:	d9800115 	stw	r6,4(sp)
1000f40c:	d9c00215 	stw	r7,8(sp)
1000f410:	00000000 	call	10000000 <__reset>
1000f414:	d9400017 	ldw	r5,0(sp)
1000f418:	d9800117 	ldw	r6,4(sp)
1000f41c:	d9c00217 	ldw	r7,8(sp)
1000f420:	10001c26 	beq	r2,zero,1000f494 <__register_exitproc+0x10c>
1000f424:	80c05217 	ldw	r3,328(r16)
1000f428:	10000115 	stw	zero,4(r2)
1000f42c:	02400044 	movi	r9,1
1000f430:	10c00015 	stw	r3,0(r2)
1000f434:	80805215 	stw	r2,328(r16)
1000f438:	10006215 	stw	zero,392(r2)
1000f43c:	10006315 	stw	zero,396(r2)
1000f440:	0007883a 	mov	r3,zero
1000f444:	883fdf26 	beq	r17,zero,1000f3c4 <__alt_data_end+0xf800f3c4>
1000f448:	18d1883a 	add	r8,r3,r3
1000f44c:	4211883a 	add	r8,r8,r8
1000f450:	1211883a 	add	r8,r2,r8
1000f454:	41802215 	stw	r6,136(r8)
1000f458:	01000044 	movi	r4,1
1000f45c:	11806217 	ldw	r6,392(r2)
1000f460:	20c8983a 	sll	r4,r4,r3
1000f464:	310cb03a 	or	r6,r6,r4
1000f468:	11806215 	stw	r6,392(r2)
1000f46c:	41c04215 	stw	r7,264(r8)
1000f470:	01800084 	movi	r6,2
1000f474:	89bfd31e 	bne	r17,r6,1000f3c4 <__alt_data_end+0xf800f3c4>
1000f478:	11806317 	ldw	r6,396(r2)
1000f47c:	3108b03a 	or	r4,r6,r4
1000f480:	11006315 	stw	r4,396(r2)
1000f484:	003fcf06 	br	1000f3c4 <__alt_data_end+0xf800f3c4>
1000f488:	80805304 	addi	r2,r16,332
1000f48c:	80805215 	stw	r2,328(r16)
1000f490:	003fc706 	br	1000f3b0 <__alt_data_end+0xf800f3b0>
1000f494:	00bfffc4 	movi	r2,-1
1000f498:	003fd106 	br	1000f3e0 <__alt_data_end+0xf800f3e0>

1000f49c <__call_exitprocs>:
1000f49c:	00840074 	movhi	r2,4097
1000f4a0:	10852804 	addi	r2,r2,5280
1000f4a4:	10800017 	ldw	r2,0(r2)
1000f4a8:	defff404 	addi	sp,sp,-48
1000f4ac:	dd800815 	stw	r22,32(sp)
1000f4b0:	d8800015 	stw	r2,0(sp)
1000f4b4:	10805204 	addi	r2,r2,328
1000f4b8:	dd000615 	stw	r20,24(sp)
1000f4bc:	dc800415 	stw	r18,16(sp)
1000f4c0:	dfc00b15 	stw	ra,44(sp)
1000f4c4:	df000a15 	stw	fp,40(sp)
1000f4c8:	ddc00915 	stw	r23,36(sp)
1000f4cc:	dd400715 	stw	r21,28(sp)
1000f4d0:	dcc00515 	stw	r19,20(sp)
1000f4d4:	dc400315 	stw	r17,12(sp)
1000f4d8:	dc000215 	stw	r16,8(sp)
1000f4dc:	2025883a 	mov	r18,r4
1000f4e0:	2829883a 	mov	r20,r5
1000f4e4:	d8800115 	stw	r2,4(sp)
1000f4e8:	05bfffc4 	movi	r22,-1
1000f4ec:	d8800017 	ldw	r2,0(sp)
1000f4f0:	14c05217 	ldw	r19,328(r2)
1000f4f4:	98001d26 	beq	r19,zero,1000f56c <__call_exitprocs+0xd0>
1000f4f8:	dd400117 	ldw	r21,4(sp)
1000f4fc:	98800117 	ldw	r2,4(r19)
1000f500:	173fffc4 	addi	fp,r2,-1
1000f504:	e0000d16 	blt	fp,zero,1000f53c <__call_exitprocs+0xa0>
1000f508:	14000044 	addi	r16,r2,1
1000f50c:	8421883a 	add	r16,r16,r16
1000f510:	8421883a 	add	r16,r16,r16
1000f514:	84402004 	addi	r17,r16,128
1000f518:	9c63883a 	add	r17,r19,r17
1000f51c:	9c21883a 	add	r16,r19,r16
1000f520:	a0001e26 	beq	r20,zero,1000f59c <__call_exitprocs+0x100>
1000f524:	80804017 	ldw	r2,256(r16)
1000f528:	15001c26 	beq	r2,r20,1000f59c <__call_exitprocs+0x100>
1000f52c:	e73fffc4 	addi	fp,fp,-1
1000f530:	843fff04 	addi	r16,r16,-4
1000f534:	8c7fff04 	addi	r17,r17,-4
1000f538:	e5bff91e 	bne	fp,r22,1000f520 <__alt_data_end+0xf800f520>
1000f53c:	00800034 	movhi	r2,0
1000f540:	10800004 	addi	r2,r2,0
1000f544:	10000926 	beq	r2,zero,1000f56c <__call_exitprocs+0xd0>
1000f548:	98800117 	ldw	r2,4(r19)
1000f54c:	1000311e 	bne	r2,zero,1000f614 <__call_exitprocs+0x178>
1000f550:	98800017 	ldw	r2,0(r19)
1000f554:	10003426 	beq	r2,zero,1000f628 <__call_exitprocs+0x18c>
1000f558:	9809883a 	mov	r4,r19
1000f55c:	a8800015 	stw	r2,0(r21)
1000f560:	00000000 	call	10000000 <__reset>
1000f564:	acc00017 	ldw	r19,0(r21)
1000f568:	983fe41e 	bne	r19,zero,1000f4fc <__alt_data_end+0xf800f4fc>
1000f56c:	dfc00b17 	ldw	ra,44(sp)
1000f570:	df000a17 	ldw	fp,40(sp)
1000f574:	ddc00917 	ldw	r23,36(sp)
1000f578:	dd800817 	ldw	r22,32(sp)
1000f57c:	dd400717 	ldw	r21,28(sp)
1000f580:	dd000617 	ldw	r20,24(sp)
1000f584:	dcc00517 	ldw	r19,20(sp)
1000f588:	dc800417 	ldw	r18,16(sp)
1000f58c:	dc400317 	ldw	r17,12(sp)
1000f590:	dc000217 	ldw	r16,8(sp)
1000f594:	dec00c04 	addi	sp,sp,48
1000f598:	f800283a 	ret
1000f59c:	98800117 	ldw	r2,4(r19)
1000f5a0:	80c00017 	ldw	r3,0(r16)
1000f5a4:	10bfffc4 	addi	r2,r2,-1
1000f5a8:	17001526 	beq	r2,fp,1000f600 <__call_exitprocs+0x164>
1000f5ac:	80000015 	stw	zero,0(r16)
1000f5b0:	183fde26 	beq	r3,zero,1000f52c <__alt_data_end+0xf800f52c>
1000f5b4:	00800044 	movi	r2,1
1000f5b8:	1708983a 	sll	r4,r2,fp
1000f5bc:	98806217 	ldw	r2,392(r19)
1000f5c0:	9dc00117 	ldw	r23,4(r19)
1000f5c4:	2084703a 	and	r2,r4,r2
1000f5c8:	1000061e 	bne	r2,zero,1000f5e4 <__call_exitprocs+0x148>
1000f5cc:	183ee83a 	callr	r3
1000f5d0:	98800117 	ldw	r2,4(r19)
1000f5d4:	15ffc51e 	bne	r2,r23,1000f4ec <__alt_data_end+0xf800f4ec>
1000f5d8:	a8800017 	ldw	r2,0(r21)
1000f5dc:	14ffd326 	beq	r2,r19,1000f52c <__alt_data_end+0xf800f52c>
1000f5e0:	003fc206 	br	1000f4ec <__alt_data_end+0xf800f4ec>
1000f5e4:	98806317 	ldw	r2,396(r19)
1000f5e8:	2084703a 	and	r2,r4,r2
1000f5ec:	1000061e 	bne	r2,zero,1000f608 <__call_exitprocs+0x16c>
1000f5f0:	89400017 	ldw	r5,0(r17)
1000f5f4:	9009883a 	mov	r4,r18
1000f5f8:	183ee83a 	callr	r3
1000f5fc:	003ff406 	br	1000f5d0 <__alt_data_end+0xf800f5d0>
1000f600:	9f000115 	stw	fp,4(r19)
1000f604:	003fea06 	br	1000f5b0 <__alt_data_end+0xf800f5b0>
1000f608:	89000017 	ldw	r4,0(r17)
1000f60c:	183ee83a 	callr	r3
1000f610:	003fef06 	br	1000f5d0 <__alt_data_end+0xf800f5d0>
1000f614:	98800017 	ldw	r2,0(r19)
1000f618:	982b883a 	mov	r21,r19
1000f61c:	1027883a 	mov	r19,r2
1000f620:	983fb61e 	bne	r19,zero,1000f4fc <__alt_data_end+0xf800f4fc>
1000f624:	003fd106 	br	1000f56c <__alt_data_end+0xf800f56c>
1000f628:	0005883a 	mov	r2,zero
1000f62c:	003ffa06 	br	1000f618 <__alt_data_end+0xf800f618>

1000f630 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000f630:	defffd04 	addi	sp,sp,-12
1000f634:	df000215 	stw	fp,8(sp)
1000f638:	df000204 	addi	fp,sp,8
1000f63c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000f640:	0001883a 	nop
1000f644:	e0bfff17 	ldw	r2,-4(fp)
1000f648:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000f64c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000f650:	10000226 	beq	r2,zero,1000f65c <_exit+0x2c>
    ALT_SIM_FAIL();
1000f654:	002af070 	cmpltui	zero,zero,43969
1000f658:	00000106 	br	1000f660 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000f65c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000f660:	003fff06 	br	1000f660 <__alt_data_end+0xf800f660>
