
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00008c78 memsz 0x00008c78 flags r-x
    LOAD off    0x00009c98 vaddr 0x10008c98 paddr 0x1000a2f4 align 2**12
         filesz 0x0000165c memsz 0x0000165c flags rw-
    LOAD off    0x0000b950 vaddr 0x1000b950 paddr 0x1000b950 align 2**12
         filesz 0x00000000 memsz 0x0000037c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000088ec  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  10008b18  10008b18  00009b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000165c  10008c98  1000a2f4  00009c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000037c  1000b950  1000b950  0000b950  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000b2f4  2**0
                  CONTENTS
  7 .sdram        00000000  1000bccc  1000bccc  0000b2f4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b2f4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000988  00000000  00000000  0000b318  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000d33d  00000000  00000000  0000bca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004873  00000000  00000000  00018fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000056b1  00000000  00000000  0001d850  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000012cc  00000000  00000000  00022f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029c1  00000000  00000000  000241d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000b2af  00000000  00000000  00026b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00031e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000e28  00000000  00000000  00031e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000350ab  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000350ae  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000350ba  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000350bb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000350bc  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000350c0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000350c4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000350c8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000350d3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000350de  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000350e9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  000350f4  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0003510e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00039555  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10008b18 l    d  .rodata	00000000 .rodata
10008c98 l    d  .rwdata	00000000 .rwdata
1000b950 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1000bccc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
10008b40 l     O .rodata	00000010 bp
10008b20 l     O .rodata	00000010 dp_l
10008b30 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
10008b50 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003ed8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
10008c98 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 alt_load.c
100068b4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10006a10 l     F .text	00000038 alt_dev_reg
100090bc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10006cec l     F .text	00000204 altera_avalon_jtag_uart_irq
10006ef0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
10007650 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10007794 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100077c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10007c58 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10007db0 l     F .text	00000050 alt_get_errno
10007e00 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000b984 g     O .bss	00000004 alt_instruction_exception_handler
10001240 g     F .text	000000bc convertDecimalToBinary
10006998 g     F .text	00000078 alt_main
1000bbcc g     O .bss	00000100 alt_irq
10002c78 g     F .text	00000014 fabs
1000a2f4 g       *ABS*	00000000 __flash_rwdata_start
10005248 g     F .text	00000084 .hidden __eqdf2
100004dc g     F .text	000002ac spawningEngine
100052cc g     F .text	000000e0 .hidden __gtdf2
10008270 g     F .text	00000020 altera_nios2_gen2_irq_init
10006828 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b988 g     O .bss	00000004 errno
1000b970 g     O .bss	00000004 alt_argv
100122c4 g       *ABS*	00000000 _gp
1000b950 g     O .bss	00000004 yCursor
1000a144 g     O .rwdata	00000180 alt_fd_list
10008290 g     F .text	00000090 alt_find_dev
1000866c g     F .text	00000138 memcpy
10006650 g     F .text	000000d0 .hidden __floatsidf
10007d38 g     F .text	00000078 alt_io_redirect
100053ac g     F .text	000000e0 .hidden __ltdf2
1000b954 g     O .bss	00000004 xCursor
10008b18 g       *ABS*	00000000 __DTOR_END__
10008508 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002ca8 g     F .text	00000074 __fpclassifyd
100070ec g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003ff4 g     F .text	00000008 .hidden __udivsi3
10003208 g     F .text	00000074 .hidden __fixunsdfsi
1000b958 g     O .bss	00000004 cursorClicked
1000a2e0 g     O .rwdata	00000004 alt_max_fd
1000402c g     F .text	0000089c .hidden __adddf3
100038bc g     F .text	0000061c .hidden __umoddi3
1000a2c4 g     O .rwdata	00000004 __fdlib_version
1000a2c8 g     O .rwdata	00000004 _global_impure_ptr
1000bccc g       *ABS*	00000000 __bss_end
10007b68 g     F .text	000000f0 alt_iic_isr_register
1000b98c g     O .bss	00000240 veggieObject
1000816c g     F .text	00000104 alt_tick
1000b95c g     O .bss	00000004 cursorStreak
1000327c g     F .text	00000640 .hidden __udivdi3
10006720 g     F .text	000000a4 .hidden __floatunsidf
10007b1c g     F .text	0000004c alt_ic_irq_enabled
100080d4 g     F .text	00000098 alt_alarm_stop
1000b978 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
1000a11c g     O .rwdata	00000028 alt_dev_null
1000116c g     F .text	000000d4 port2Unpackager
10002d30 g     F .text	000001e4 rint
10007778 g     F .text	0000001c alt_dcache_flush_all
100065c8 g     F .text	00000088 .hidden __fixdfsi
1000a2f4 g       *ABS*	00000000 __ram_rwdata_end
1000a2d8 g     O .rwdata	00000008 alt_dev_list
10008c98 g       *ABS*	00000000 __ram_rodata_end
100053ac g     F .text	000000e0 .hidden __ledf2
10003ffc g     F .text	00000008 .hidden __umodsi3
1000bccc g       *ABS*	00000000 end
1000b960 g     O .bss	00000004 key1
10006c28 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10008b18 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100067c4 g     F .text	00000064 .hidden __clzsi2
100072f8 g     F .text	00000218 altera_avalon_jtag_uart_write
10008950 g     F .text	00000194 __call_exitprocs
1000022c g     F .text	0000003c _start
1000b97c g     O .bss	00000004 _alt_tick_rate
10006850 g     F .text	00000064 rand
1000b980 g     O .bss	00000004 _alt_nticks
10006a7c g     F .text	00000048 alt_sys_init
1000883c g     F .text	00000114 __register_exitproc
10001918 g     F .text	000010cc __ieee754_pow
10006f98 g     F .text	00000068 altera_avalon_jtag_uart_close
10001474 g     F .text	000004a4 pow
10004004 g     F .text	00000028 .hidden __mulsi3
10008c98 g       *ABS*	00000000 __ram_rwdata_start
10008b18 g       *ABS*	00000000 __ram_rodata_start
10006ac4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10008434 g     F .text	000000d4 alt_get_fd
100085f0 g     F .text	0000007c memcmp
10006b84 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000bccc g       *ABS*	00000000 __alt_stack_base
10006bd4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100048c8 g     F .text	00000980 .hidden __divdf3
1000548c g     F .text	0000086c .hidden __muldf3
10008320 g     F .text	00000114 alt_find_file
10007810 g     F .text	000000a4 alt_dev_llist_insert
1000b950 g       *ABS*	00000000 __bss_start
10000268 g     F .text	00000274 main
1000b974 g     O .bss	00000004 alt_envp
10006b24 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10006838 g     F .text	00000018 srand
100012fc g     F .text	00000178 convertBinaryToDecimal
10002d1c g     F .text	00000008 matherr
1000a2e4 g     O .rwdata	00000004 alt_errno
10003f44 g     F .text	00000054 .hidden __divsi3
10008b18 g       *ABS*	00000000 __CTOR_END__
10002c8c g     F .text	0000001c finite
10008b18 g       *ABS*	00000000 __flash_rodata_start
10008b18 g       *ABS*	00000000 __DTOR_LIST__
1000b964 g     O .bss	00000004 key3
100030e0 g     F .text	0000001c copysign
10005248 g     F .text	00000084 .hidden __nedf2
10006a48 g     F .text	00000034 alt_irq_init
10008054 g     F .text	00000080 alt_release_fd
10008b60 g     O .rodata	00000100 .hidden __clz_tab
100085a4 g     F .text	00000014 atexit
10000d50 g     F .text	0000041c messagePackager
1000a2cc g     O .rwdata	00000004 _impure_ptr
1000b96c g     O .bss	00000004 alt_argc
10002f14 g     F .text	000001cc scalbn
10007910 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000a2d0 g     O .rwdata	00000008 alt_fs_list
10002d24 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
100029e4 g     F .text	00000294 __ieee754_sqrt
10007988 g     F .text	00000050 alt_ic_isr_register
1000a2f4 g       *ABS*	00000000 _edata
1000bccc g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10007000 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000b968 g     O .bss	00000004 key2
10007a78 g     F .text	000000a4 alt_ic_irq_disable
100085b8 g     F .text	00000038 exit
10000788 g     F .text	000003d4 physicsEngine
10003f98 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
10008ae4 g     F .text	00000034 _exit
10007510 g     F .text	00000140 alt_alarm_start
100030fc g     F .text	0000010c .hidden __muldi3
100087a4 g     F .text	00000098 strlen
10007ef4 g     F .text	00000160 open
100052cc g     F .text	000000e0 .hidden __gedf2
1000796c g     F .text	0000001c alt_icache_flush_all
10000b5c g     F .text	000001f4 FPGAcommunicator
1000a2e8 g     O .rwdata	00000004 alt_priority_mask
100079d8 g     F .text	000000a0 alt_ic_irq_enable
10005cf8 g     F .text	000008d0 .hidden __subdf3
1000a2ec g     O .rwdata	00000008 alt_alarm_list
100078b4 g     F .text	0000005c _do_ctors
100076a0 g     F .text	000000d8 close
10006918 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10aef304 	addi	r2,r2,-17460
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10aef304 	addi	r2,r2,-17460
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a5b017 	ldw	r2,-26944(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a5b017 	ldw	r2,-26944(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d688b114 	ori	gp,gp,8900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10ae5414 	ori	r2,r2,47440

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18ef3314 	ori	r3,r3,48332

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	00069180 	call	10006918 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00069980 	call	10006998 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00068380 	call	10006838 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a5a415 	stw	r2,-26992(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a5a315 	stw	r2,-26996(gp)
	port2Unpackager();
100002b8:	000116c0 	call	1000116c <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	842e6304 	addi	r16,r16,-18036
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	00040040 	call	10004004 <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	842e6304 	addi	r16,r16,-18036
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00040040 	call	10004004 <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	842e6304 	addi	r16,r16,-18036
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	00040040 	call	10004004 <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	842e6304 	addi	r16,r16,-18036
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	00040040 	call	10004004 <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	842e6304 	addi	r16,r16,-18036
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	00040040 	call	10004004 <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	842e6304 	addi	r16,r16,-18036
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	00040040 	call	10004004 <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	842e6304 	addi	r16,r16,-18036
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	00040040 	call	10004004 <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800410 	cmplti	r2,r2,16
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	10ae6304 	addi	r2,r2,-18036
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	10ae6304 	addi	r2,r2,-18036
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	10ae6304 	addi	r2,r2,-18036
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	10ae6304 	addi	r2,r2,-18036
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10ae6304 	addi	r2,r2,-18036
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	10ae6304 	addi	r2,r2,-18036
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10ae6304 	addi	r2,r2,-18036
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	10ae6304 	addi	r2,r2,-18036
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
	//	printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
	//	printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .1 seconds pass
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	e0bff817 	ldw	r2,-32(fp)
10000480:	1885c83a 	sub	r2,r3,r2
10000484:	108000b0 	cmpltui	r2,r2,2
10000488:	1000031e 	bne	r2,zero,10000498 <main+0x230>
		{
			physicsEngine();	// call our physics engine!
1000048c:	00007880 	call	10000788 <physicsEngine>
			lastPhysixed = elapsedTime;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000498:	e0fffe17 	ldw	r3,-8(fp)
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	1885c83a 	sub	r2,r3,r2
100004a4:	e0fffa17 	ldw	r3,-24(fp)
100004a8:	1880092e 	bgeu	r3,r2,100004d0 <main+0x268>
		{
			spawningEngine();	// call our spawning engine!
100004ac:	00004dc0 	call	100004dc <spawningEngine>
			lastSpawned = elapsedTime;
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 60) + 20;
100004b8:	00068500 	call	10006850 <rand>
100004bc:	1009883a 	mov	r4,r2
100004c0:	01400f04 	movi	r5,60
100004c4:	0003f980 	call	10003f98 <__modsi3>
100004c8:	10800504 	addi	r2,r2,20
100004cc:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}

	port2Unpackager();	// keep unpacking our stuff!
100004d0:	000116c0 	call	1000116c <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
100004d4:	0000b5c0 	call	10000b5c <FPGAcommunicator>
	}
100004d8:	003fe006 	br	1000045c <__alt_data_end+0xf800045c>

100004dc <spawningEngine>:
	return 0;
}

void spawningEngine()
{
100004dc:	defff504 	addi	sp,sp,-44
100004e0:	dfc00a15 	stw	ra,40(sp)
100004e4:	df000915 	stw	fp,36(sp)
100004e8:	dc400815 	stw	r17,32(sp)
100004ec:	dc000715 	stw	r16,28(sp)
100004f0:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
100004f4:	00800044 	movi	r2,1
100004f8:	e0bff715 	stw	r2,-36(fp)
100004fc:	00009806 	br	10000760 <spawningEngine+0x284>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000500:	04040074 	movhi	r16,4097
10000504:	842e6304 	addi	r16,r16,-18036
10000508:	e0bff717 	ldw	r2,-36(fp)
1000050c:	1009883a 	mov	r4,r2
10000510:	01400904 	movi	r5,36
10000514:	00040040 	call	10004004 <__mulsi3>
10000518:	8085883a 	add	r2,r16,r2
1000051c:	10800304 	addi	r2,r2,12
10000520:	10800017 	ldw	r2,0(r2)
10000524:	10008b1e 	bne	r2,zero,10000754 <spawningEngine+0x278>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 104) + 14;
10000528:	00068500 	call	10006850 <rand>
1000052c:	1009883a 	mov	r4,r2
10000530:	01401a04 	movi	r5,104
10000534:	0003f980 	call	10003f98 <__modsi3>
10000538:	10800384 	addi	r2,r2,14
1000053c:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
10000540:	00068500 	call	10006850 <rand>
10000544:	1007883a 	mov	r3,r2
10000548:	00a00034 	movhi	r2,32768
1000054c:	108001c4 	addi	r2,r2,7
10000550:	1884703a 	and	r2,r3,r2
10000554:	1000040e 	bge	r2,zero,10000568 <spawningEngine+0x8c>
10000558:	10bfffc4 	addi	r2,r2,-1
1000055c:	00fffe04 	movi	r3,-8
10000560:	10c4b03a 	or	r2,r2,r3
10000564:	10800044 	addi	r2,r2,1
10000568:	10800044 	addi	r2,r2,1
1000056c:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 30) + 30;
10000570:	00068500 	call	10006850 <rand>
10000574:	1009883a 	mov	r4,r2
10000578:	01400784 	movi	r5,30
1000057c:	0003f980 	call	10003f98 <__modsi3>
10000580:	10800784 	addi	r2,r2,30
10000584:	1009883a 	mov	r4,r2
10000588:	00066500 	call	10006650 <__floatsidf>
1000058c:	1009883a 	mov	r4,r2
10000590:	180b883a 	mov	r5,r3
10000594:	e13ffc15 	stw	r4,-16(fp)
10000598:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 15) - 7.5;
1000059c:	00068500 	call	10006850 <rand>
100005a0:	1009883a 	mov	r4,r2
100005a4:	014003c4 	movi	r5,15
100005a8:	0003f980 	call	10003f98 <__modsi3>
100005ac:	1009883a 	mov	r4,r2
100005b0:	00066500 	call	10006650 <__floatsidf>
100005b4:	100b883a 	mov	r5,r2
100005b8:	180d883a 	mov	r6,r3
100005bc:	2809883a 	mov	r4,r5
100005c0:	300b883a 	mov	r5,r6
100005c4:	000d883a 	mov	r6,zero
100005c8:	01d007b4 	movhi	r7,16414
100005cc:	0005cf80 	call	10005cf8 <__subdf3>
100005d0:	1009883a 	mov	r4,r2
100005d4:	180b883a 	mov	r5,r3
100005d8:	e13ff815 	stw	r4,-32(fp)
100005dc:	e17ff915 	stw	r5,-28(fp)

			if (randomX > 80)
100005e0:	e0bffa17 	ldw	r2,-24(fp)
100005e4:	10801470 	cmpltui	r2,r2,81
100005e8:	10000b1e 	bne	r2,zero,10000618 <spawningEngine+0x13c>
			{
				randomSpeedX = (rand() % 15);
100005ec:	00068500 	call	10006850 <rand>
100005f0:	1009883a 	mov	r4,r2
100005f4:	014003c4 	movi	r5,15
100005f8:	0003f980 	call	10003f98 <__modsi3>
100005fc:	1009883a 	mov	r4,r2
10000600:	00066500 	call	10006650 <__floatsidf>
10000604:	1009883a 	mov	r4,r2
10000608:	180b883a 	mov	r5,r3
1000060c:	e13ff815 	stw	r4,-32(fp)
10000610:	e17ff915 	stw	r5,-28(fp)
10000614:	00000e06 	br	10000650 <spawningEngine+0x174>
			}
			else if (randomX < 40)
10000618:	e0bffa17 	ldw	r2,-24(fp)
1000061c:	10800a28 	cmpgeui	r2,r2,40
10000620:	10000b1e 	bne	r2,zero,10000650 <spawningEngine+0x174>
			{
				randomSpeedX = (rand() % 15) - 15;
10000624:	00068500 	call	10006850 <rand>
10000628:	1009883a 	mov	r4,r2
1000062c:	014003c4 	movi	r5,15
10000630:	0003f980 	call	10003f98 <__modsi3>
10000634:	10bffc44 	addi	r2,r2,-15
10000638:	1009883a 	mov	r4,r2
1000063c:	00066500 	call	10006650 <__floatsidf>
10000640:	1009883a 	mov	r4,r2
10000644:	180b883a 	mov	r5,r3
10000648:	e13ff815 	stw	r4,-32(fp)
1000064c:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000650:	e47ffa17 	ldw	r17,-24(fp)
10000654:	04040074 	movhi	r16,4097
10000658:	842e6304 	addi	r16,r16,-18036
1000065c:	e0bff717 	ldw	r2,-36(fp)
10000660:	1009883a 	mov	r4,r2
10000664:	01400904 	movi	r5,36
10000668:	00040040 	call	10004004 <__mulsi3>
1000066c:	8085883a 	add	r2,r16,r2
10000670:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000674:	04040074 	movhi	r16,4097
10000678:	842e6304 	addi	r16,r16,-18036
1000067c:	e0bff717 	ldw	r2,-36(fp)
10000680:	1009883a 	mov	r4,r2
10000684:	01400904 	movi	r5,36
10000688:	00040040 	call	10004004 <__mulsi3>
1000068c:	8085883a 	add	r2,r16,r2
10000690:	10800104 	addi	r2,r2,4
10000694:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000698:	04040074 	movhi	r16,4097
1000069c:	842e6304 	addi	r16,r16,-18036
100006a0:	e0bff717 	ldw	r2,-36(fp)
100006a4:	1009883a 	mov	r4,r2
100006a8:	01400904 	movi	r5,36
100006ac:	00040040 	call	10004004 <__mulsi3>
100006b0:	8085883a 	add	r2,r16,r2
100006b4:	10800204 	addi	r2,r2,8
100006b8:	e0fffb17 	ldw	r3,-20(fp)
100006bc:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
100006c0:	04040074 	movhi	r16,4097
100006c4:	842e6304 	addi	r16,r16,-18036
100006c8:	e0bff717 	ldw	r2,-36(fp)
100006cc:	1009883a 	mov	r4,r2
100006d0:	01400904 	movi	r5,36
100006d4:	00040040 	call	10004004 <__mulsi3>
100006d8:	8085883a 	add	r2,r16,r2
100006dc:	10800304 	addi	r2,r2,12
100006e0:	00c00044 	movi	r3,1
100006e4:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
100006e8:	04040074 	movhi	r16,4097
100006ec:	842e6304 	addi	r16,r16,-18036
100006f0:	e0bff717 	ldw	r2,-36(fp)
100006f4:	1009883a 	mov	r4,r2
100006f8:	01400904 	movi	r5,36
100006fc:	00040040 	call	10004004 <__mulsi3>
10000700:	8085883a 	add	r2,r16,r2
10000704:	10800504 	addi	r2,r2,20
10000708:	e0fff817 	ldw	r3,-32(fp)
1000070c:	10c00015 	stw	r3,0(r2)
10000710:	e0fff917 	ldw	r3,-28(fp)
10000714:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000718:	04040074 	movhi	r16,4097
1000071c:	842e6304 	addi	r16,r16,-18036
10000720:	e0bff717 	ldw	r2,-36(fp)
10000724:	1009883a 	mov	r4,r2
10000728:	01400904 	movi	r5,36
1000072c:	00040040 	call	10004004 <__mulsi3>
10000730:	8085883a 	add	r2,r16,r2
10000734:	10800704 	addi	r2,r2,28
10000738:	e0fffc17 	ldw	r3,-16(fp)
1000073c:	10c00015 	stw	r3,0(r2)
10000740:	e0fffd17 	ldw	r3,-12(fp)
10000744:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000748:	00800a84 	movi	r2,42
1000074c:	e0bff715 	stw	r2,-36(fp)
			break;
10000750:	00000606 	br	1000076c <spawningEngine+0x290>
}

void spawningEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000754:	e0bff717 	ldw	r2,-36(fp)
10000758:	10800044 	addi	r2,r2,1
1000075c:	e0bff715 	stw	r2,-36(fp)
10000760:	e0bff717 	ldw	r2,-36(fp)
10000764:	10800410 	cmplti	r2,r2,16
10000768:	103f651e 	bne	r2,zero,10000500 <__alt_data_end+0xf8000500>
			// now let's break
			i = 42;
			break;
		}
	}
}
1000076c:	e6fffe04 	addi	sp,fp,-8
10000770:	dfc00317 	ldw	ra,12(sp)
10000774:	df000217 	ldw	fp,8(sp)
10000778:	dc400117 	ldw	r17,4(sp)
1000077c:	dc000017 	ldw	r16,0(sp)
10000780:	dec00404 	addi	sp,sp,16
10000784:	f800283a 	ret

10000788 <physicsEngine>:

void physicsEngine()
{
10000788:	defffa04 	addi	sp,sp,-24
1000078c:	dfc00515 	stw	ra,20(sp)
10000790:	df000415 	stw	fp,16(sp)
10000794:	dc800315 	stw	r18,12(sp)
10000798:	dc400215 	stw	r17,8(sp)
1000079c:	dc000115 	stw	r16,4(sp)
100007a0:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100007a4:	00800044 	movi	r2,1
100007a8:	e0bffc15 	stw	r2,-16(fp)
100007ac:	0000df06 	br	10000b2c <physicsEngine+0x3a4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
100007b0:	04040074 	movhi	r16,4097
100007b4:	842e6304 	addi	r16,r16,-18036
100007b8:	e0bffc17 	ldw	r2,-16(fp)
100007bc:	1009883a 	mov	r4,r2
100007c0:	01400904 	movi	r5,36
100007c4:	00040040 	call	10004004 <__mulsi3>
100007c8:	8085883a 	add	r2,r16,r2
100007cc:	10800304 	addi	r2,r2,12
100007d0:	10800017 	ldw	r2,0(r2)
100007d4:	1000d226 	beq	r2,zero,10000b20 <physicsEngine+0x398>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
100007d8:	04040074 	movhi	r16,4097
100007dc:	842e6304 	addi	r16,r16,-18036
100007e0:	e0bffc17 	ldw	r2,-16(fp)
100007e4:	1009883a 	mov	r4,r2
100007e8:	01400904 	movi	r5,36
100007ec:	00040040 	call	10004004 <__mulsi3>
100007f0:	8085883a 	add	r2,r16,r2
100007f4:	10800017 	ldw	r2,0(r2)
100007f8:	1009883a 	mov	r4,r2
100007fc:	00066500 	call	10006650 <__floatsidf>
10000800:	1023883a 	mov	r17,r2
10000804:	1825883a 	mov	r18,r3
10000808:	04040074 	movhi	r16,4097
1000080c:	842e6304 	addi	r16,r16,-18036
10000810:	e0bffc17 	ldw	r2,-16(fp)
10000814:	1009883a 	mov	r4,r2
10000818:	01400904 	movi	r5,36
1000081c:	00040040 	call	10004004 <__mulsi3>
10000820:	8085883a 	add	r2,r16,r2
10000824:	11000504 	addi	r4,r2,20
10000828:	20800017 	ldw	r2,0(r4)
1000082c:	20c00117 	ldw	r3,4(r4)
10000830:	8809883a 	mov	r4,r17
10000834:	900b883a 	mov	r5,r18
10000838:	100d883a 	mov	r6,r2
1000083c:	180f883a 	mov	r7,r3
10000840:	000402c0 	call	1000402c <__adddf3>
10000844:	1009883a 	mov	r4,r2
10000848:	180b883a 	mov	r5,r3
1000084c:	2005883a 	mov	r2,r4
10000850:	2807883a 	mov	r3,r5
10000854:	1009883a 	mov	r4,r2
10000858:	180b883a 	mov	r5,r3
1000085c:	00065c80 	call	100065c8 <__fixdfsi>
10000860:	1023883a 	mov	r17,r2
10000864:	04040074 	movhi	r16,4097
10000868:	842e6304 	addi	r16,r16,-18036
1000086c:	e0bffc17 	ldw	r2,-16(fp)
10000870:	1009883a 	mov	r4,r2
10000874:	01400904 	movi	r5,36
10000878:	00040040 	call	10004004 <__mulsi3>
1000087c:	8085883a 	add	r2,r16,r2
10000880:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000884:	04040074 	movhi	r16,4097
10000888:	842e6304 	addi	r16,r16,-18036
1000088c:	e0bffc17 	ldw	r2,-16(fp)
10000890:	1009883a 	mov	r4,r2
10000894:	01400904 	movi	r5,36
10000898:	00040040 	call	10004004 <__mulsi3>
1000089c:	8085883a 	add	r2,r16,r2
100008a0:	10800104 	addi	r2,r2,4
100008a4:	10800017 	ldw	r2,0(r2)
100008a8:	1009883a 	mov	r4,r2
100008ac:	00066500 	call	10006650 <__floatsidf>
100008b0:	1023883a 	mov	r17,r2
100008b4:	1825883a 	mov	r18,r3
100008b8:	04040074 	movhi	r16,4097
100008bc:	842e6304 	addi	r16,r16,-18036
100008c0:	e0bffc17 	ldw	r2,-16(fp)
100008c4:	1009883a 	mov	r4,r2
100008c8:	01400904 	movi	r5,36
100008cc:	00040040 	call	10004004 <__mulsi3>
100008d0:	8085883a 	add	r2,r16,r2
100008d4:	11000704 	addi	r4,r2,28
100008d8:	20800017 	ldw	r2,0(r4)
100008dc:	20c00117 	ldw	r3,4(r4)
100008e0:	8809883a 	mov	r4,r17
100008e4:	900b883a 	mov	r5,r18
100008e8:	100d883a 	mov	r6,r2
100008ec:	180f883a 	mov	r7,r3
100008f0:	000402c0 	call	1000402c <__adddf3>
100008f4:	1009883a 	mov	r4,r2
100008f8:	180b883a 	mov	r5,r3
100008fc:	2005883a 	mov	r2,r4
10000900:	2807883a 	mov	r3,r5
10000904:	1009883a 	mov	r4,r2
10000908:	180b883a 	mov	r5,r3
1000090c:	00065c80 	call	100065c8 <__fixdfsi>
10000910:	1023883a 	mov	r17,r2
10000914:	04040074 	movhi	r16,4097
10000918:	842e6304 	addi	r16,r16,-18036
1000091c:	e0bffc17 	ldw	r2,-16(fp)
10000920:	1009883a 	mov	r4,r2
10000924:	01400904 	movi	r5,36
10000928:	00040040 	call	10004004 <__mulsi3>
1000092c:	8085883a 	add	r2,r16,r2
10000930:	10800104 	addi	r2,r2,4
10000934:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 3;
10000938:	04040074 	movhi	r16,4097
1000093c:	842e6304 	addi	r16,r16,-18036
10000940:	e0bffc17 	ldw	r2,-16(fp)
10000944:	1009883a 	mov	r4,r2
10000948:	01400904 	movi	r5,36
1000094c:	00040040 	call	10004004 <__mulsi3>
10000950:	8085883a 	add	r2,r16,r2
10000954:	11000704 	addi	r4,r2,28
10000958:	20800017 	ldw	r2,0(r4)
1000095c:	20c00117 	ldw	r3,4(r4)
10000960:	1009883a 	mov	r4,r2
10000964:	180b883a 	mov	r5,r3
10000968:	000d883a 	mov	r6,zero
1000096c:	01d00234 	movhi	r7,16392
10000970:	0005cf80 	call	10005cf8 <__subdf3>
10000974:	1009883a 	mov	r4,r2
10000978:	180b883a 	mov	r5,r3
1000097c:	2021883a 	mov	r16,r4
10000980:	2823883a 	mov	r17,r5
10000984:	04840074 	movhi	r18,4097
10000988:	94ae6304 	addi	r18,r18,-18036
1000098c:	e0bffc17 	ldw	r2,-16(fp)
10000990:	1009883a 	mov	r4,r2
10000994:	01400904 	movi	r5,36
10000998:	00040040 	call	10004004 <__mulsi3>
1000099c:	9085883a 	add	r2,r18,r2
100009a0:	10800704 	addi	r2,r2,28
100009a4:	14000015 	stw	r16,0(r2)
100009a8:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are below the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
100009ac:	04040074 	movhi	r16,4097
100009b0:	842e6304 	addi	r16,r16,-18036
100009b4:	e0bffc17 	ldw	r2,-16(fp)
100009b8:	1009883a 	mov	r4,r2
100009bc:	01400904 	movi	r5,36
100009c0:	00040040 	call	10004004 <__mulsi3>
100009c4:	8085883a 	add	r2,r16,r2
100009c8:	10800104 	addi	r2,r2,4
100009cc:	10800017 	ldw	r2,0(r2)
100009d0:	10001316 	blt	r2,zero,10000a20 <physicsEngine+0x298>
100009d4:	04040074 	movhi	r16,4097
100009d8:	842e6304 	addi	r16,r16,-18036
100009dc:	e0bffc17 	ldw	r2,-16(fp)
100009e0:	1009883a 	mov	r4,r2
100009e4:	01400904 	movi	r5,36
100009e8:	00040040 	call	10004004 <__mulsi3>
100009ec:	8085883a 	add	r2,r16,r2
100009f0:	10800017 	ldw	r2,0(r2)
100009f4:	10000a16 	blt	r2,zero,10000a20 <physicsEngine+0x298>
100009f8:	04040074 	movhi	r16,4097
100009fc:	842e6304 	addi	r16,r16,-18036
10000a00:	e0bffc17 	ldw	r2,-16(fp)
10000a04:	1009883a 	mov	r4,r2
10000a08:	01400904 	movi	r5,36
10000a0c:	00040040 	call	10004004 <__mulsi3>
10000a10:	8085883a 	add	r2,r16,r2
10000a14:	10800017 	ldw	r2,0(r2)
10000a18:	1080a050 	cmplti	r2,r2,641
10000a1c:	1000401e 	bne	r2,zero,10000b20 <physicsEngine+0x398>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000a20:	04040074 	movhi	r16,4097
10000a24:	842e6304 	addi	r16,r16,-18036
10000a28:	e0bffc17 	ldw	r2,-16(fp)
10000a2c:	1009883a 	mov	r4,r2
10000a30:	01400904 	movi	r5,36
10000a34:	00040040 	call	10004004 <__mulsi3>
10000a38:	8085883a 	add	r2,r16,r2
10000a3c:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000a40:	04040074 	movhi	r16,4097
10000a44:	842e6304 	addi	r16,r16,-18036
10000a48:	e0bffc17 	ldw	r2,-16(fp)
10000a4c:	1009883a 	mov	r4,r2
10000a50:	01400904 	movi	r5,36
10000a54:	00040040 	call	10004004 <__mulsi3>
10000a58:	8085883a 	add	r2,r16,r2
10000a5c:	10800104 	addi	r2,r2,4
10000a60:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000a64:	04040074 	movhi	r16,4097
10000a68:	842e6304 	addi	r16,r16,-18036
10000a6c:	e0bffc17 	ldw	r2,-16(fp)
10000a70:	1009883a 	mov	r4,r2
10000a74:	01400904 	movi	r5,36
10000a78:	00040040 	call	10004004 <__mulsi3>
10000a7c:	8085883a 	add	r2,r16,r2
10000a80:	10800204 	addi	r2,r2,8
10000a84:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000a88:	04040074 	movhi	r16,4097
10000a8c:	842e6304 	addi	r16,r16,-18036
10000a90:	e0bffc17 	ldw	r2,-16(fp)
10000a94:	1009883a 	mov	r4,r2
10000a98:	01400904 	movi	r5,36
10000a9c:	00040040 	call	10004004 <__mulsi3>
10000aa0:	8085883a 	add	r2,r16,r2
10000aa4:	10800304 	addi	r2,r2,12
10000aa8:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000aac:	04040074 	movhi	r16,4097
10000ab0:	842e6304 	addi	r16,r16,-18036
10000ab4:	e0bffc17 	ldw	r2,-16(fp)
10000ab8:	1009883a 	mov	r4,r2
10000abc:	01400904 	movi	r5,36
10000ac0:	00040040 	call	10004004 <__mulsi3>
10000ac4:	8085883a 	add	r2,r16,r2
10000ac8:	10800404 	addi	r2,r2,16
10000acc:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000ad0:	04040074 	movhi	r16,4097
10000ad4:	842e6304 	addi	r16,r16,-18036
10000ad8:	e0bffc17 	ldw	r2,-16(fp)
10000adc:	1009883a 	mov	r4,r2
10000ae0:	01400904 	movi	r5,36
10000ae4:	00040040 	call	10004004 <__mulsi3>
10000ae8:	8085883a 	add	r2,r16,r2
10000aec:	10800504 	addi	r2,r2,20
10000af0:	10000015 	stw	zero,0(r2)
10000af4:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000af8:	04040074 	movhi	r16,4097
10000afc:	842e6304 	addi	r16,r16,-18036
10000b00:	e0bffc17 	ldw	r2,-16(fp)
10000b04:	1009883a 	mov	r4,r2
10000b08:	01400904 	movi	r5,36
10000b0c:	00040040 	call	10004004 <__mulsi3>
10000b10:	8085883a 	add	r2,r16,r2
10000b14:	10800704 	addi	r2,r2,28
10000b18:	10000015 	stw	zero,0(r2)
10000b1c:	10000115 	stw	zero,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000b20:	e0bffc17 	ldw	r2,-16(fp)
10000b24:	10800044 	addi	r2,r2,1
10000b28:	e0bffc15 	stw	r2,-16(fp)
10000b2c:	e0bffc17 	ldw	r2,-16(fp)
10000b30:	10800410 	cmplti	r2,r2,16
10000b34:	103f1e1e 	bne	r2,zero,100007b0 <__alt_data_end+0xf80007b0>
				veggieObject[i].yVelocity = 0;
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000b38:	0001883a 	nop
}
10000b3c:	e6fffd04 	addi	sp,fp,-12
10000b40:	dfc00417 	ldw	ra,16(sp)
10000b44:	df000317 	ldw	fp,12(sp)
10000b48:	dc800217 	ldw	r18,8(sp)
10000b4c:	dc400117 	ldw	r17,4(sp)
10000b50:	dc000017 	ldw	r16,0(sp)
10000b54:	dec00504 	addi	sp,sp,20
10000b58:	f800283a 	ret

10000b5c <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000b5c:	deffd504 	addi	sp,sp,-172
10000b60:	dfc02a15 	stw	ra,168(sp)
10000b64:	df002915 	stw	fp,164(sp)
10000b68:	dc002815 	stw	r16,160(sp)
10000b6c:	df002904 	addi	fp,sp,164
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000b70:	e03fdc15 	stw	zero,-144(fp)
10000b74:	00002406 	br	10000c08 <FPGAcommunicator+0xac>
	{
		unsigned long long tempPackage = messagePackager(veggieObject[i]);
10000b78:	04040074 	movhi	r16,4097
10000b7c:	842e6304 	addi	r16,r16,-18036
10000b80:	e0bfdc17 	ldw	r2,-144(fp)
10000b84:	1009883a 	mov	r4,r2
10000b88:	01400904 	movi	r5,36
10000b8c:	00040040 	call	10004004 <__mulsi3>
10000b90:	8085883a 	add	r2,r16,r2
10000b94:	10c00417 	ldw	r3,16(r2)
10000b98:	d8c00015 	stw	r3,0(sp)
10000b9c:	10c00517 	ldw	r3,20(r2)
10000ba0:	d8c00115 	stw	r3,4(sp)
10000ba4:	10c00617 	ldw	r3,24(r2)
10000ba8:	d8c00215 	stw	r3,8(sp)
10000bac:	10c00717 	ldw	r3,28(r2)
10000bb0:	d8c00315 	stw	r3,12(sp)
10000bb4:	10c00817 	ldw	r3,32(r2)
10000bb8:	d8c00415 	stw	r3,16(sp)
10000bbc:	11000017 	ldw	r4,0(r2)
10000bc0:	11400117 	ldw	r5,4(r2)
10000bc4:	11800217 	ldw	r6,8(r2)
10000bc8:	11c00317 	ldw	r7,12(r2)
10000bcc:	0000d500 	call	10000d50 <messagePackager>
10000bd0:	e0bfdd15 	stw	r2,-140(fp)
10000bd4:	e03fde15 	stw	zero,-136(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000bd8:	e0bfdc17 	ldw	r2,-144(fp)
10000bdc:	100490fa 	slli	r2,r2,3
10000be0:	e0ffdc04 	addi	r3,fp,-144
10000be4:	1885883a 	add	r2,r3,r2
10000be8:	10800304 	addi	r2,r2,12
10000bec:	e0ffdd17 	ldw	r3,-140(fp)
10000bf0:	10c00015 	stw	r3,0(r2)
10000bf4:	e0ffde17 	ldw	r3,-136(fp)
10000bf8:	10c00115 	stw	r3,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000bfc:	e0bfdc17 	ldw	r2,-144(fp)
10000c00:	10800044 	addi	r2,r2,1
10000c04:	e0bfdc15 	stw	r2,-144(fp)
10000c08:	e0bfdc17 	ldw	r2,-144(fp)
10000c0c:	10800410 	cmplti	r2,r2,16
10000c10:	103fd91e 	bne	r2,zero,10000b78 <__alt_data_end+0xf8000b78>

		FPGAmessage[i] = tempPackage;
	}


	*to_hw_sig = 2;	// 2 means we're starting communication
10000c14:	00801c04 	movi	r2,112
10000c18:	00c00084 	movi	r3,2
10000c1c:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000c20:	01004004 	movi	r4,256
10000c24:	e0bfdf17 	ldw	r2,-132(fp)
10000c28:	e0ffe017 	ldw	r3,-128(fp)
10000c2c:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000c30:	01003c04 	movi	r4,240
10000c34:	e0bfe117 	ldw	r2,-124(fp)
10000c38:	e0ffe217 	ldw	r3,-120(fp)
10000c3c:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000c40:	01003804 	movi	r4,224
10000c44:	e0bfe317 	ldw	r2,-116(fp)
10000c48:	e0ffe417 	ldw	r3,-112(fp)
10000c4c:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000c50:	01003404 	movi	r4,208
10000c54:	e0bfe517 	ldw	r2,-108(fp)
10000c58:	e0ffe617 	ldw	r3,-104(fp)
10000c5c:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000c60:	01003004 	movi	r4,192
10000c64:	e0bfe717 	ldw	r2,-100(fp)
10000c68:	e0ffe817 	ldw	r3,-96(fp)
10000c6c:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000c70:	01002c04 	movi	r4,176
10000c74:	e0bfe917 	ldw	r2,-92(fp)
10000c78:	e0ffea17 	ldw	r3,-88(fp)
10000c7c:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000c80:	01002804 	movi	r4,160
10000c84:	e0bfeb17 	ldw	r2,-84(fp)
10000c88:	e0ffec17 	ldw	r3,-80(fp)
10000c8c:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000c90:	01001804 	movi	r4,96
10000c94:	e0bfed17 	ldw	r2,-76(fp)
10000c98:	e0ffee17 	ldw	r3,-72(fp)
10000c9c:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000ca0:	01002404 	movi	r4,144
10000ca4:	e0bfef17 	ldw	r2,-68(fp)
10000ca8:	e0fff017 	ldw	r3,-64(fp)
10000cac:	20800015 	stw	r2,0(r4)
	*to_hw_port9 = FPGAmessage[9];
10000cb0:	01002004 	movi	r4,128
10000cb4:	e0bff117 	ldw	r2,-60(fp)
10000cb8:	e0fff217 	ldw	r3,-56(fp)
10000cbc:	20800015 	stw	r2,0(r4)
	*to_hw_port10 = FPGAmessage[10];
10000cc0:	01001004 	movi	r4,64
10000cc4:	e0bff317 	ldw	r2,-52(fp)
10000cc8:	e0fff417 	ldw	r3,-48(fp)
10000ccc:	20800015 	stw	r2,0(r4)
	*to_hw_port11 = FPGAmessage[11];
10000cd0:	01000c04 	movi	r4,48
10000cd4:	e0bff517 	ldw	r2,-44(fp)
10000cd8:	e0fff617 	ldw	r3,-40(fp)
10000cdc:	20800015 	stw	r2,0(r4)
	*to_hw_port12 = FPGAmessage[12];
10000ce0:	01000804 	movi	r4,32
10000ce4:	e0bff717 	ldw	r2,-36(fp)
10000ce8:	e0fff817 	ldw	r3,-32(fp)
10000cec:	20800015 	stw	r2,0(r4)
	*to_hw_port13 = FPGAmessage[13];
10000cf0:	01005804 	movi	r4,352
10000cf4:	e0bff917 	ldw	r2,-28(fp)
10000cf8:	e0fffa17 	ldw	r3,-24(fp)
10000cfc:	20800015 	stw	r2,0(r4)
	*to_hw_port14 = FPGAmessage[14];
10000d00:	01005404 	movi	r4,336
10000d04:	e0bffb17 	ldw	r2,-20(fp)
10000d08:	e0fffc17 	ldw	r3,-16(fp)
10000d0c:	20800015 	stw	r2,0(r4)
	*to_hw_port15 = FPGAmessage[15];
10000d10:	01005004 	movi	r4,320
10000d14:	e0bffd17 	ldw	r2,-12(fp)
10000d18:	e0fffe17 	ldw	r3,-8(fp)
10000d1c:	20800015 	stw	r2,0(r4)
//	printf("FPGAmessage 11 is %llu \n", FPGAmessage[11]);

// actually didnt need this tbh :p
//	while(*to_sw_sig != 2);	// wait for FPGA to wake up

	*to_hw_sig = 1;		// now we are done putting in messages
10000d20:	00801c04 	movi	r2,112
10000d24:	00c00044 	movi	r3,1
10000d28:	10c00005 	stb	r3,0(r2)

//	while(*to_sw_sig != 0); // wait for response from hardware
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000d2c:	00801c04 	movi	r2,112
10000d30:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000d34:	0001883a 	nop
}
10000d38:	e6ffff04 	addi	sp,fp,-4
10000d3c:	dfc00217 	ldw	ra,8(sp)
10000d40:	df000117 	ldw	fp,4(sp)
10000d44:	dc000017 	ldw	r16,0(sp)
10000d48:	dec00304 	addi	sp,sp,12
10000d4c:	f800283a 	ret

10000d50 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000d50:	deffe304 	addi	sp,sp,-116
10000d54:	dfc01815 	stw	ra,96(sp)
10000d58:	df001715 	stw	fp,92(sp)
10000d5c:	dc401615 	stw	r17,88(sp)
10000d60:	dc001515 	stw	r16,84(sp)
10000d64:	df001704 	addi	fp,sp,92
10000d68:	e1000215 	stw	r4,8(fp)
10000d6c:	e1400315 	stw	r5,12(fp)
10000d70:	e1800415 	stw	r6,16(fp)
10000d74:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000d78:	e0800617 	ldw	r2,24(fp)
10000d7c:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 1)
10000d80:	e0bfeb17 	ldw	r2,-84(fp)
10000d84:	10800058 	cmpnei	r2,r2,1
10000d88:	1000601e 	bne	r2,zero,10000f0c <messagePackager+0x1bc>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000d8c:	e0800217 	ldw	r2,8(fp)
10000d90:	e0bfec15 	stw	r2,-80(fp)
10000d94:	1005d7fa 	srai	r2,r2,31
10000d98:	e0bfed15 	stw	r2,-76(fp)
		tempTime = specifiedObject.yPosition;
10000d9c:	e0800317 	ldw	r2,12(fp)
10000da0:	e0bfee15 	stw	r2,-72(fp)
10000da4:	1005d7fa 	srai	r2,r2,31
10000da8:	e0bfef15 	stw	r2,-68(fp)
		tempStart = specifiedObject.objectType;
10000dac:	e0800417 	ldw	r2,16(fp)
10000db0:	e0bff015 	stw	r2,-64(fp)
10000db4:	1005d7fa 	srai	r2,r2,31
10000db8:	e0bff115 	stw	r2,-60(fp)
		tempEnd = specifiedObject.objectState;
10000dbc:	e0800517 	ldw	r2,20(fp)
10000dc0:	e0bff215 	stw	r2,-56(fp)
10000dc4:	1005d7fa 	srai	r2,r2,31
10000dc8:	e0bff315 	stw	r2,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000dcc:	e0bfec17 	ldw	r2,-80(fp)
10000dd0:	1009883a 	mov	r4,r2
10000dd4:	00012400 	call	10001240 <convertDecimalToBinary>
10000dd8:	e0bfec15 	stw	r2,-80(fp)
10000ddc:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000de0:	e0bfee17 	ldw	r2,-72(fp)
10000de4:	1009883a 	mov	r4,r2
10000de8:	00012400 	call	10001240 <convertDecimalToBinary>
10000dec:	e0bfee15 	stw	r2,-72(fp)
10000df0:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000df4:	e0bff017 	ldw	r2,-64(fp)
10000df8:	1009883a 	mov	r4,r2
10000dfc:	00012400 	call	10001240 <convertDecimalToBinary>
10000e00:	e0bff015 	stw	r2,-64(fp)
10000e04:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000e08:	e0bff217 	ldw	r2,-56(fp)
10000e0c:	1009883a 	mov	r4,r2
10000e10:	00012400 	call	10001240 <convertDecimalToBinary>
10000e14:	e0bff215 	stw	r2,-56(fp)
10000e18:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000e1c:	00802674 	movhi	r2,153
10000e20:	10a5a004 	addi	r2,r2,-27008
10000e24:	0007883a 	mov	r3,zero
10000e28:	e13fee17 	ldw	r4,-72(fp)
10000e2c:	e17fef17 	ldw	r5,-68(fp)
10000e30:	100d883a 	mov	r6,r2
10000e34:	180f883a 	mov	r7,r3
10000e38:	00030fc0 	call	100030fc <__muldi3>
10000e3c:	1009883a 	mov	r4,r2
10000e40:	180b883a 	mov	r5,r3
10000e44:	2021883a 	mov	r16,r4
10000e48:	2823883a 	mov	r17,r5
10000e4c:	00841eb4 	movhi	r2,4218
10000e50:	10900004 	addi	r2,r2,16384
10000e54:	00d6bcc4 	movi	r3,23283
10000e58:	e13ff017 	ldw	r4,-64(fp)
10000e5c:	e17ff117 	ldw	r5,-60(fp)
10000e60:	100d883a 	mov	r6,r2
10000e64:	180f883a 	mov	r7,r3
10000e68:	00030fc0 	call	100030fc <__muldi3>
10000e6c:	100d883a 	mov	r6,r2
10000e70:	180f883a 	mov	r7,r3
10000e74:	3009883a 	mov	r4,r6
10000e78:	380b883a 	mov	r5,r7
10000e7c:	8105883a 	add	r2,r16,r4
10000e80:	140d803a 	cmpltu	r6,r2,r16
10000e84:	8947883a 	add	r3,r17,r5
10000e88:	30c9883a 	add	r4,r6,r3
10000e8c:	2007883a 	mov	r3,r4
10000e90:	100d883a 	mov	r6,r2
10000e94:	180f883a 	mov	r7,r3
10000e98:	e13fec17 	ldw	r4,-80(fp)
10000e9c:	e17fed17 	ldw	r5,-76(fp)
10000ea0:	3105883a 	add	r2,r6,r4
10000ea4:	1191803a 	cmpltu	r8,r2,r6
10000ea8:	3947883a 	add	r3,r7,r5
10000eac:	40c9883a 	add	r4,r8,r3
10000eb0:	2007883a 	mov	r3,r4
10000eb4:	1021883a 	mov	r16,r2
10000eb8:	1823883a 	mov	r17,r3
10000ebc:	009762b4 	movhi	r2,23946
10000ec0:	00c058f4 	movhi	r3,355
10000ec4:	18d15e04 	addi	r3,r3,17784
10000ec8:	e13ff217 	ldw	r4,-56(fp)
10000ecc:	e17ff317 	ldw	r5,-52(fp)
10000ed0:	100d883a 	mov	r6,r2
10000ed4:	180f883a 	mov	r7,r3
10000ed8:	00030fc0 	call	100030fc <__muldi3>
10000edc:	100d883a 	mov	r6,r2
10000ee0:	180f883a 	mov	r7,r3
10000ee4:	3009883a 	mov	r4,r6
10000ee8:	380b883a 	mov	r5,r7
10000eec:	8105883a 	add	r2,r16,r4
10000ef0:	140d803a 	cmpltu	r6,r2,r16
10000ef4:	8947883a 	add	r3,r17,r5
10000ef8:	30c9883a 	add	r4,r6,r3
10000efc:	2007883a 	mov	r3,r4
10000f00:	e0bfe915 	stw	r2,-92(fp)
10000f04:	e0ffea15 	stw	r3,-88(fp)
10000f08:	00008b06 	br	10001138 <messagePackager+0x3e8>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000f0c:	e0800217 	ldw	r2,8(fp)
10000f10:	e0bff415 	stw	r2,-48(fp)
10000f14:	1005d7fa 	srai	r2,r2,31
10000f18:	e0bff515 	stw	r2,-44(fp)
		tempY = specifiedObject.yPosition;
10000f1c:	e0800317 	ldw	r2,12(fp)
10000f20:	e0bff615 	stw	r2,-40(fp)
10000f24:	1005d7fa 	srai	r2,r2,31
10000f28:	e0bff715 	stw	r2,-36(fp)
		tempType = specifiedObject.objectType;
10000f2c:	e0800417 	ldw	r2,16(fp)
10000f30:	e0bff815 	stw	r2,-32(fp)
10000f34:	1005d7fa 	srai	r2,r2,31
10000f38:	e0bff915 	stw	r2,-28(fp)
		tempState = specifiedObject.objectState;
10000f3c:	e0800517 	ldw	r2,20(fp)
10000f40:	e0bffa15 	stw	r2,-24(fp)
10000f44:	1005d7fa 	srai	r2,r2,31
10000f48:	e0bffb15 	stw	r2,-20(fp)

		// take X and Y and divide them by 5 to fit in our message
		tempX = tempX/5 - 1;
10000f4c:	e0bff417 	ldw	r2,-48(fp)
10000f50:	e0fff517 	ldw	r3,-44(fp)
10000f54:	01c00144 	movi	r7,5
10000f58:	0011883a 	mov	r8,zero
10000f5c:	1009883a 	mov	r4,r2
10000f60:	180b883a 	mov	r5,r3
10000f64:	380d883a 	mov	r6,r7
10000f68:	400f883a 	mov	r7,r8
10000f6c:	000327c0 	call	1000327c <__udivdi3>
10000f70:	1009883a 	mov	r4,r2
10000f74:	180b883a 	mov	r5,r3
10000f78:	200d883a 	mov	r6,r4
10000f7c:	280f883a 	mov	r7,r5
10000f80:	013fffc4 	movi	r4,-1
10000f84:	017fffc4 	movi	r5,-1
10000f88:	3105883a 	add	r2,r6,r4
10000f8c:	1191803a 	cmpltu	r8,r2,r6
10000f90:	3947883a 	add	r3,r7,r5
10000f94:	40c9883a 	add	r4,r8,r3
10000f98:	2007883a 	mov	r3,r4
10000f9c:	e0bff415 	stw	r2,-48(fp)
10000fa0:	e0fff515 	stw	r3,-44(fp)
		tempY = tempY/5 - 1;
10000fa4:	e0bff617 	ldw	r2,-40(fp)
10000fa8:	e0fff717 	ldw	r3,-36(fp)
10000fac:	01c00144 	movi	r7,5
10000fb0:	0011883a 	mov	r8,zero
10000fb4:	1009883a 	mov	r4,r2
10000fb8:	180b883a 	mov	r5,r3
10000fbc:	380d883a 	mov	r6,r7
10000fc0:	400f883a 	mov	r7,r8
10000fc4:	000327c0 	call	1000327c <__udivdi3>
10000fc8:	1009883a 	mov	r4,r2
10000fcc:	180b883a 	mov	r5,r3
10000fd0:	200d883a 	mov	r6,r4
10000fd4:	280f883a 	mov	r7,r5
10000fd8:	013fffc4 	movi	r4,-1
10000fdc:	017fffc4 	movi	r5,-1
10000fe0:	3105883a 	add	r2,r6,r4
10000fe4:	1191803a 	cmpltu	r8,r2,r6
10000fe8:	3947883a 	add	r3,r7,r5
10000fec:	40c9883a 	add	r4,r8,r3
10000ff0:	2007883a 	mov	r3,r4
10000ff4:	e0bff615 	stw	r2,-40(fp)
10000ff8:	e0fff715 	stw	r3,-36(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
10000ffc:	e0bff417 	ldw	r2,-48(fp)
10001000:	1009883a 	mov	r4,r2
10001004:	00012400 	call	10001240 <convertDecimalToBinary>
10001008:	e0bff415 	stw	r2,-48(fp)
1000100c:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
10001010:	e0bff617 	ldw	r2,-40(fp)
10001014:	1009883a 	mov	r4,r2
10001018:	00012400 	call	10001240 <convertDecimalToBinary>
1000101c:	e0bff615 	stw	r2,-40(fp)
10001020:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
10001024:	e0bff817 	ldw	r2,-32(fp)
10001028:	1009883a 	mov	r4,r2
1000102c:	00012400 	call	10001240 <convertDecimalToBinary>
10001030:	e0bff815 	stw	r2,-32(fp)
10001034:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
10001038:	e0bffa17 	ldw	r2,-24(fp)
1000103c:	1009883a 	mov	r4,r2
10001040:	00012400 	call	10001240 <convertDecimalToBinary>
10001044:	e0bffa15 	stw	r2,-24(fp)
10001048:	e03ffb15 	stw	zero,-20(fp)
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/

		// now we append everything together!
		tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
1000104c:	00802674 	movhi	r2,153
10001050:	10a5a004 	addi	r2,r2,-27008
10001054:	0007883a 	mov	r3,zero
10001058:	e13ff617 	ldw	r4,-40(fp)
1000105c:	e17ff717 	ldw	r5,-36(fp)
10001060:	100d883a 	mov	r6,r2
10001064:	180f883a 	mov	r7,r3
10001068:	00030fc0 	call	100030fc <__muldi3>
1000106c:	1009883a 	mov	r4,r2
10001070:	180b883a 	mov	r5,r3
10001074:	2021883a 	mov	r16,r4
10001078:	2823883a 	mov	r17,r5
1000107c:	00841eb4 	movhi	r2,4218
10001080:	10900004 	addi	r2,r2,16384
10001084:	00d6bcc4 	movi	r3,23283
10001088:	e13ff817 	ldw	r4,-32(fp)
1000108c:	e17ff917 	ldw	r5,-28(fp)
10001090:	100d883a 	mov	r6,r2
10001094:	180f883a 	mov	r7,r3
10001098:	00030fc0 	call	100030fc <__muldi3>
1000109c:	100d883a 	mov	r6,r2
100010a0:	180f883a 	mov	r7,r3
100010a4:	3009883a 	mov	r4,r6
100010a8:	380b883a 	mov	r5,r7
100010ac:	8105883a 	add	r2,r16,r4
100010b0:	140d803a 	cmpltu	r6,r2,r16
100010b4:	8947883a 	add	r3,r17,r5
100010b8:	30c9883a 	add	r4,r6,r3
100010bc:	2007883a 	mov	r3,r4
100010c0:	100d883a 	mov	r6,r2
100010c4:	180f883a 	mov	r7,r3
100010c8:	e13ff417 	ldw	r4,-48(fp)
100010cc:	e17ff517 	ldw	r5,-44(fp)
100010d0:	3105883a 	add	r2,r6,r4
100010d4:	1191803a 	cmpltu	r8,r2,r6
100010d8:	3947883a 	add	r3,r7,r5
100010dc:	40c9883a 	add	r4,r8,r3
100010e0:	2007883a 	mov	r3,r4
100010e4:	1021883a 	mov	r16,r2
100010e8:	1823883a 	mov	r17,r3
100010ec:	009762b4 	movhi	r2,23946
100010f0:	00c058f4 	movhi	r3,355
100010f4:	18d15e04 	addi	r3,r3,17784
100010f8:	e13ffa17 	ldw	r4,-24(fp)
100010fc:	e17ffb17 	ldw	r5,-20(fp)
10001100:	100d883a 	mov	r6,r2
10001104:	180f883a 	mov	r7,r3
10001108:	00030fc0 	call	100030fc <__muldi3>
1000110c:	100d883a 	mov	r6,r2
10001110:	180f883a 	mov	r7,r3
10001114:	3009883a 	mov	r4,r6
10001118:	380b883a 	mov	r5,r7
1000111c:	8105883a 	add	r2,r16,r4
10001120:	140d803a 	cmpltu	r6,r2,r16
10001124:	8947883a 	add	r3,r17,r5
10001128:	30c9883a 	add	r4,r6,r3
1000112c:	2007883a 	mov	r3,r4
10001130:	e0bfe915 	stw	r2,-92(fp)
10001134:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001138:	e13fe917 	ldw	r4,-92(fp)
1000113c:	e17fea17 	ldw	r5,-88(fp)
10001140:	00012fc0 	call	100012fc <convertBinaryToDecimal>
10001144:	e0bffc15 	stw	r2,-16(fp)
10001148:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
1000114c:	e0bffc17 	ldw	r2,-16(fp)
}
10001150:	e6fffe04 	addi	sp,fp,-8
10001154:	dfc00317 	ldw	ra,12(sp)
10001158:	df000217 	ldw	fp,8(sp)
1000115c:	dc400117 	ldw	r17,4(sp)
10001160:	dc000017 	ldw	r16,0(sp)
10001164:	dec00804 	addi	sp,sp,32
10001168:	f800283a 	ret

1000116c <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
1000116c:	defff704 	addi	sp,sp,-36
10001170:	dfc00815 	stw	ra,32(sp)
10001174:	df000715 	stw	fp,28(sp)
10001178:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
1000117c:	00804404 	movi	r2,272
10001180:	10800003 	ldbu	r2,0(r2)
10001184:	10803fcc 	andi	r2,r2,255
10001188:	1080201c 	xori	r2,r2,128
1000118c:	10bfe004 	addi	r2,r2,-128
10001190:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001194:	e13ff917 	ldw	r4,-28(fp)
10001198:	00012400 	call	10001240 <convertDecimalToBinary>
1000119c:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100011a0:	e03ffa15 	stw	zero,-24(fp)
100011a4:	00001406 	br	100011f8 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
100011a8:	e0bff917 	ldw	r2,-28(fp)
100011ac:	1009883a 	mov	r4,r2
100011b0:	01400284 	movi	r5,10
100011b4:	0003ffc0 	call	10003ffc <__umodsi3>
100011b8:	1007883a 	mov	r3,r2
100011bc:	e0bffa17 	ldw	r2,-24(fp)
100011c0:	1085883a 	add	r2,r2,r2
100011c4:	1085883a 	add	r2,r2,r2
100011c8:	e13ff904 	addi	r4,fp,-28
100011cc:	2085883a 	add	r2,r4,r2
100011d0:	10800204 	addi	r2,r2,8
100011d4:	10c00015 	stw	r3,0(r2)

		port2 /= 10;
100011d8:	e0bff917 	ldw	r2,-28(fp)
100011dc:	1009883a 	mov	r4,r2
100011e0:	01400284 	movi	r5,10
100011e4:	0003ff40 	call	10003ff4 <__udivsi3>
100011e8:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100011ec:	e0bffa17 	ldw	r2,-24(fp)
100011f0:	10800044 	addi	r2,r2,1
100011f4:	e0bffa15 	stw	r2,-24(fp)
100011f8:	e0bffa17 	ldw	r2,-24(fp)
100011fc:	10800150 	cmplti	r2,r2,5
10001200:	103fe91e 	bne	r2,zero,100011a8 <__alt_data_end+0xf80011a8>

		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001204:	e0bffd17 	ldw	r2,-12(fp)
10001208:	d0a5a715 	stw	r2,-26980(gp)
	key2 = unpackaged[3];
1000120c:	e0bffe17 	ldw	r2,-8(fp)
10001210:	d0a5a915 	stw	r2,-26972(gp)
	key3 = unpackaged[4];
10001214:	e0bfff17 	ldw	r2,-4(fp)
10001218:	d0a5a815 	stw	r2,-26976(gp)
	cursorStreak = unpackaged[0];
1000121c:	e0bffb17 	ldw	r2,-20(fp)
10001220:	d0a5a615 	stw	r2,-26984(gp)
	cursorClicked = unpackaged[1];
10001224:	e0bffc17 	ldw	r2,-16(fp)
10001228:	d0a5a515 	stw	r2,-26988(gp)
	if(cursorClicked)
	{
		printf("clicked!");
	}
*/
}
1000122c:	e037883a 	mov	sp,fp
10001230:	dfc00117 	ldw	ra,4(sp)
10001234:	df000017 	ldw	fp,0(sp)
10001238:	dec00204 	addi	sp,sp,8
1000123c:	f800283a 	ret

10001240 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001240:	defff704 	addi	sp,sp,-36
10001244:	dfc00815 	stw	ra,32(sp)
10001248:	df000715 	stw	fp,28(sp)
1000124c:	dc400615 	stw	r17,24(sp)
10001250:	dc000515 	stw	r16,20(sp)
10001254:	df000704 	addi	fp,sp,28
10001258:	e13ffd15 	stw	r4,-12(fp)
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
1000125c:	e03ff915 	stw	zero,-28(fp)
10001260:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
10001264:	00800044 	movi	r2,1
10001268:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
1000126c:	00001906 	br	100012d4 <convertDecimalToBinary+0x94>
    {
        remainder = n%2;
10001270:	e0bffd17 	ldw	r2,-12(fp)
10001274:	1080004c 	andi	r2,r2,1
10001278:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
1000127c:	e0bffd17 	ldw	r2,-12(fp)
10001280:	1004d07a 	srli	r2,r2,1
10001284:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
10001288:	e13ffc17 	ldw	r4,-16(fp)
1000128c:	e17ffb17 	ldw	r5,-20(fp)
10001290:	00040040 	call	10004004 <__mulsi3>
10001294:	1021883a 	mov	r16,r2
10001298:	1005d7fa 	srai	r2,r2,31
1000129c:	1023883a 	mov	r17,r2
100012a0:	e13ff917 	ldw	r4,-28(fp)
100012a4:	e17ffa17 	ldw	r5,-24(fp)
100012a8:	2405883a 	add	r2,r4,r16
100012ac:	110d803a 	cmpltu	r6,r2,r4
100012b0:	2c47883a 	add	r3,r5,r17
100012b4:	30c9883a 	add	r4,r6,r3
100012b8:	2007883a 	mov	r3,r4
100012bc:	e0bff915 	stw	r2,-28(fp)
100012c0:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
100012c4:	e13ffb17 	ldw	r4,-20(fp)
100012c8:	01400284 	movi	r5,10
100012cc:	00040040 	call	10004004 <__mulsi3>
100012d0:	e0bffb15 	stw	r2,-20(fp)
{
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
100012d4:	e0bffd17 	ldw	r2,-12(fp)
100012d8:	103fe51e 	bne	r2,zero,10001270 <__alt_data_end+0xf8001270>
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
100012dc:	e0bff917 	ldw	r2,-28(fp)
}
100012e0:	e6fffe04 	addi	sp,fp,-8
100012e4:	dfc00317 	ldw	ra,12(sp)
100012e8:	df000217 	ldw	fp,8(sp)
100012ec:	dc400117 	ldw	r17,4(sp)
100012f0:	dc000017 	ldw	r16,0(sp)
100012f4:	dec00404 	addi	sp,sp,16
100012f8:	f800283a 	ret

100012fc <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
100012fc:	defff704 	addi	sp,sp,-36
10001300:	dfc00815 	stw	ra,32(sp)
10001304:	df000715 	stw	fp,28(sp)
10001308:	dc400615 	stw	r17,24(sp)
1000130c:	dc000515 	stw	r16,20(sp)
10001310:	df000704 	addi	fp,sp,28
10001314:	e13ffc15 	stw	r4,-16(fp)
10001318:	e17ffd15 	stw	r5,-12(fp)
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
1000131c:	e03ff915 	stw	zero,-28(fp)
10001320:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
10001324:	00004706 	br	10001444 <convertBinaryToDecimal+0x148>
    {
        remainder = n%10;
10001328:	e0bffc17 	ldw	r2,-16(fp)
1000132c:	e0fffd17 	ldw	r3,-12(fp)
10001330:	01c00284 	movi	r7,10
10001334:	0011883a 	mov	r8,zero
10001338:	1009883a 	mov	r4,r2
1000133c:	180b883a 	mov	r5,r3
10001340:	380d883a 	mov	r6,r7
10001344:	400f883a 	mov	r7,r8
10001348:	00038bc0 	call	100038bc <__umoddi3>
1000134c:	1009883a 	mov	r4,r2
10001350:	180b883a 	mov	r5,r3
10001354:	2005883a 	mov	r2,r4
10001358:	2807883a 	mov	r3,r5
1000135c:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
10001360:	e0bffc17 	ldw	r2,-16(fp)
10001364:	e0fffd17 	ldw	r3,-12(fp)
10001368:	01c00284 	movi	r7,10
1000136c:	0011883a 	mov	r8,zero
10001370:	1009883a 	mov	r4,r2
10001374:	180b883a 	mov	r5,r3
10001378:	380d883a 	mov	r6,r7
1000137c:	400f883a 	mov	r7,r8
10001380:	000327c0 	call	1000327c <__udivdi3>
10001384:	1009883a 	mov	r4,r2
10001388:	180b883a 	mov	r5,r3
1000138c:	e13ffc15 	stw	r4,-16(fp)
10001390:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
10001394:	e13ffb17 	ldw	r4,-20(fp)
10001398:	00067200 	call	10006720 <__floatunsidf>
1000139c:	1021883a 	mov	r16,r2
100013a0:	1823883a 	mov	r17,r3
100013a4:	e13ffa17 	ldw	r4,-24(fp)
100013a8:	00067200 	call	10006720 <__floatunsidf>
100013ac:	100f883a 	mov	r7,r2
100013b0:	1811883a 	mov	r8,r3
100013b4:	0009883a 	mov	r4,zero
100013b8:	01500034 	movhi	r5,16384
100013bc:	380d883a 	mov	r6,r7
100013c0:	400f883a 	mov	r7,r8
100013c4:	00014740 	call	10001474 <pow>
100013c8:	100f883a 	mov	r7,r2
100013cc:	1811883a 	mov	r8,r3
100013d0:	8009883a 	mov	r4,r16
100013d4:	880b883a 	mov	r5,r17
100013d8:	380d883a 	mov	r6,r7
100013dc:	400f883a 	mov	r7,r8
100013e0:	000548c0 	call	1000548c <__muldf3>
100013e4:	1009883a 	mov	r4,r2
100013e8:	180b883a 	mov	r5,r3
100013ec:	2021883a 	mov	r16,r4
100013f0:	2823883a 	mov	r17,r5
100013f4:	e13ff917 	ldw	r4,-28(fp)
100013f8:	00067200 	call	10006720 <__floatunsidf>
100013fc:	100b883a 	mov	r5,r2
10001400:	180d883a 	mov	r6,r3
10001404:	2809883a 	mov	r4,r5
10001408:	300b883a 	mov	r5,r6
1000140c:	800d883a 	mov	r6,r16
10001410:	880f883a 	mov	r7,r17
10001414:	000402c0 	call	1000402c <__adddf3>
10001418:	1009883a 	mov	r4,r2
1000141c:	180b883a 	mov	r5,r3
10001420:	2005883a 	mov	r2,r4
10001424:	2807883a 	mov	r3,r5
10001428:	1009883a 	mov	r4,r2
1000142c:	180b883a 	mov	r5,r3
10001430:	00032080 	call	10003208 <__fixunsdfsi>
10001434:	e0bff915 	stw	r2,-28(fp)
        ++i;
10001438:	e0bffa17 	ldw	r2,-24(fp)
1000143c:	10800044 	addi	r2,r2,1
10001440:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
    while (n!=0)
10001444:	e0bffc17 	ldw	r2,-16(fp)
10001448:	e0fffd17 	ldw	r3,-12(fp)
1000144c:	10c4b03a 	or	r2,r2,r3
10001450:	103fb51e 	bne	r2,zero,10001328 <__alt_data_end+0xf8001328>
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
  //  printf("decimal output: %lu\n", decimalNumber);
    return decimalNumber;
10001454:	e0bff917 	ldw	r2,-28(fp)
}
10001458:	e6fffe04 	addi	sp,fp,-8
1000145c:	dfc00317 	ldw	ra,12(sp)
10001460:	df000217 	ldw	fp,8(sp)
10001464:	dc400117 	ldw	r17,4(sp)
10001468:	dc000017 	ldw	r16,0(sp)
1000146c:	dec00404 	addi	sp,sp,16
10001470:	f800283a 	ret

10001474 <pow>:
10001474:	deffee04 	addi	sp,sp,-72
10001478:	dc800b15 	stw	r18,44(sp)
1000147c:	04840074 	movhi	r18,4097
10001480:	ddc01015 	stw	r23,64(sp)
10001484:	dd800f15 	stw	r22,60(sp)
10001488:	dd400e15 	stw	r21,56(sp)
1000148c:	dd000d15 	stw	r20,52(sp)
10001490:	dcc00c15 	stw	r19,48(sp)
10001494:	dc400a15 	stw	r17,40(sp)
10001498:	dc000915 	stw	r16,36(sp)
1000149c:	dfc01115 	stw	ra,68(sp)
100014a0:	94a8b104 	addi	r18,r18,-23868
100014a4:	202f883a 	mov	r23,r4
100014a8:	282d883a 	mov	r22,r5
100014ac:	302b883a 	mov	r21,r6
100014b0:	3829883a 	mov	r20,r7
100014b4:	00019180 	call	10001918 <__ieee754_pow>
100014b8:	1023883a 	mov	r17,r2
100014bc:	90800017 	ldw	r2,0(r18)
100014c0:	04ffffc4 	movi	r19,-1
100014c4:	1821883a 	mov	r16,r3
100014c8:	14c00426 	beq	r2,r19,100014dc <pow+0x68>
100014cc:	a809883a 	mov	r4,r21
100014d0:	a00b883a 	mov	r5,r20
100014d4:	0002ca80 	call	10002ca8 <__fpclassifyd>
100014d8:	10000d1e 	bne	r2,zero,10001510 <pow+0x9c>
100014dc:	8805883a 	mov	r2,r17
100014e0:	8007883a 	mov	r3,r16
100014e4:	dfc01117 	ldw	ra,68(sp)
100014e8:	ddc01017 	ldw	r23,64(sp)
100014ec:	dd800f17 	ldw	r22,60(sp)
100014f0:	dd400e17 	ldw	r21,56(sp)
100014f4:	dd000d17 	ldw	r20,52(sp)
100014f8:	dcc00c17 	ldw	r19,48(sp)
100014fc:	dc800b17 	ldw	r18,44(sp)
10001500:	dc400a17 	ldw	r17,40(sp)
10001504:	dc000917 	ldw	r16,36(sp)
10001508:	dec01204 	addi	sp,sp,72
1000150c:	f800283a 	ret
10001510:	b809883a 	mov	r4,r23
10001514:	b00b883a 	mov	r5,r22
10001518:	0002ca80 	call	10002ca8 <__fpclassifyd>
1000151c:	1000221e 	bne	r2,zero,100015a8 <pow+0x134>
10001520:	a809883a 	mov	r4,r21
10001524:	a00b883a 	mov	r5,r20
10001528:	000d883a 	mov	r6,zero
1000152c:	000f883a 	mov	r7,zero
10001530:	00052480 	call	10005248 <__eqdf2>
10001534:	103fe91e 	bne	r2,zero,100014dc <__alt_data_end+0xf80014dc>
10001538:	00c00044 	movi	r3,1
1000153c:	d8c00015 	stw	r3,0(sp)
10001540:	00c40074 	movhi	r3,4097
10001544:	18e2c604 	addi	r3,r3,-29928
10001548:	90800017 	ldw	r2,0(r18)
1000154c:	d8c00115 	stw	r3,4(sp)
10001550:	00cffc34 	movhi	r3,16368
10001554:	d8000815 	stw	zero,32(sp)
10001558:	ddc00215 	stw	r23,8(sp)
1000155c:	dd800315 	stw	r22,12(sp)
10001560:	dd400415 	stw	r21,16(sp)
10001564:	dd000515 	stw	r20,20(sp)
10001568:	d8000615 	stw	zero,24(sp)
1000156c:	d8c00715 	stw	r3,28(sp)
10001570:	14c00a26 	beq	r2,r19,1000159c <pow+0x128>
10001574:	00c00084 	movi	r3,2
10001578:	10c00826 	beq	r2,r3,1000159c <pow+0x128>
1000157c:	d809883a 	mov	r4,sp
10001580:	0002d1c0 	call	10002d1c <matherr>
10001584:	10006b26 	beq	r2,zero,10001734 <pow+0x2c0>
10001588:	d8800817 	ldw	r2,32(sp)
1000158c:	10000326 	beq	r2,zero,1000159c <pow+0x128>
10001590:	00068280 	call	10006828 <__errno>
10001594:	d8c00817 	ldw	r3,32(sp)
10001598:	10c00015 	stw	r3,0(r2)
1000159c:	d8800617 	ldw	r2,24(sp)
100015a0:	d8c00717 	ldw	r3,28(sp)
100015a4:	003fcf06 	br	100014e4 <__alt_data_end+0xf80014e4>
100015a8:	b809883a 	mov	r4,r23
100015ac:	b00b883a 	mov	r5,r22
100015b0:	000d883a 	mov	r6,zero
100015b4:	000f883a 	mov	r7,zero
100015b8:	00052480 	call	10005248 <__eqdf2>
100015bc:	1000171e 	bne	r2,zero,1000161c <pow+0x1a8>
100015c0:	a809883a 	mov	r4,r21
100015c4:	a00b883a 	mov	r5,r20
100015c8:	000d883a 	mov	r6,zero
100015cc:	000f883a 	mov	r7,zero
100015d0:	00052480 	call	10005248 <__eqdf2>
100015d4:	1000381e 	bne	r2,zero,100016b8 <pow+0x244>
100015d8:	00c00044 	movi	r3,1
100015dc:	d8c00015 	stw	r3,0(sp)
100015e0:	90800017 	ldw	r2,0(r18)
100015e4:	00c40074 	movhi	r3,4097
100015e8:	18e2c604 	addi	r3,r3,-29928
100015ec:	d8c00115 	stw	r3,4(sp)
100015f0:	d8000815 	stw	zero,32(sp)
100015f4:	ddc00215 	stw	r23,8(sp)
100015f8:	dd800315 	stw	r22,12(sp)
100015fc:	dd400415 	stw	r21,16(sp)
10001600:	dd000515 	stw	r20,20(sp)
10001604:	d8000615 	stw	zero,24(sp)
10001608:	d8000715 	stw	zero,28(sp)
1000160c:	103fdb26 	beq	r2,zero,1000157c <__alt_data_end+0xf800157c>
10001610:	008ffc34 	movhi	r2,16368
10001614:	d8800715 	stw	r2,28(sp)
10001618:	003fe006 	br	1000159c <__alt_data_end+0xf800159c>
1000161c:	8809883a 	mov	r4,r17
10001620:	800b883a 	mov	r5,r16
10001624:	0002c8c0 	call	10002c8c <finite>
10001628:	10004626 	beq	r2,zero,10001744 <pow+0x2d0>
1000162c:	8809883a 	mov	r4,r17
10001630:	800b883a 	mov	r5,r16
10001634:	000d883a 	mov	r6,zero
10001638:	000f883a 	mov	r7,zero
1000163c:	00052480 	call	10005248 <__eqdf2>
10001640:	103fa61e 	bne	r2,zero,100014dc <__alt_data_end+0xf80014dc>
10001644:	b809883a 	mov	r4,r23
10001648:	b00b883a 	mov	r5,r22
1000164c:	0002c8c0 	call	10002c8c <finite>
10001650:	103fa226 	beq	r2,zero,100014dc <__alt_data_end+0xf80014dc>
10001654:	a809883a 	mov	r4,r21
10001658:	a00b883a 	mov	r5,r20
1000165c:	0002c8c0 	call	10002c8c <finite>
10001660:	103f9e26 	beq	r2,zero,100014dc <__alt_data_end+0xf80014dc>
10001664:	00800104 	movi	r2,4
10001668:	d8800015 	stw	r2,0(sp)
1000166c:	90c00017 	ldw	r3,0(r18)
10001670:	00840074 	movhi	r2,4097
10001674:	10a2c604 	addi	r2,r2,-29928
10001678:	d8800115 	stw	r2,4(sp)
1000167c:	d8000815 	stw	zero,32(sp)
10001680:	ddc00215 	stw	r23,8(sp)
10001684:	dd800315 	stw	r22,12(sp)
10001688:	dd400415 	stw	r21,16(sp)
1000168c:	dd000515 	stw	r20,20(sp)
10001690:	d8000615 	stw	zero,24(sp)
10001694:	d8000715 	stw	zero,28(sp)
10001698:	00800084 	movi	r2,2
1000169c:	18806126 	beq	r3,r2,10001824 <pow+0x3b0>
100016a0:	d809883a 	mov	r4,sp
100016a4:	0002d1c0 	call	10002d1c <matherr>
100016a8:	10005e26 	beq	r2,zero,10001824 <pow+0x3b0>
100016ac:	d8800817 	ldw	r2,32(sp)
100016b0:	103fba26 	beq	r2,zero,1000159c <__alt_data_end+0xf800159c>
100016b4:	003fb606 	br	10001590 <__alt_data_end+0xf8001590>
100016b8:	a809883a 	mov	r4,r21
100016bc:	a00b883a 	mov	r5,r20
100016c0:	0002c8c0 	call	10002c8c <finite>
100016c4:	103f8526 	beq	r2,zero,100014dc <__alt_data_end+0xf80014dc>
100016c8:	a809883a 	mov	r4,r21
100016cc:	a00b883a 	mov	r5,r20
100016d0:	000d883a 	mov	r6,zero
100016d4:	000f883a 	mov	r7,zero
100016d8:	00053ac0 	call	100053ac <__ledf2>
100016dc:	103f7f0e 	bge	r2,zero,100014dc <__alt_data_end+0xf80014dc>
100016e0:	00c00044 	movi	r3,1
100016e4:	d8c00015 	stw	r3,0(sp)
100016e8:	90800017 	ldw	r2,0(r18)
100016ec:	00c40074 	movhi	r3,4097
100016f0:	18e2c604 	addi	r3,r3,-29928
100016f4:	d8c00115 	stw	r3,4(sp)
100016f8:	d8000815 	stw	zero,32(sp)
100016fc:	ddc00215 	stw	r23,8(sp)
10001700:	dd800315 	stw	r22,12(sp)
10001704:	dd400415 	stw	r21,16(sp)
10001708:	dd000515 	stw	r20,20(sp)
1000170c:	d8000615 	stw	zero,24(sp)
10001710:	10002526 	beq	r2,zero,100017a8 <pow+0x334>
10001714:	00fffc34 	movhi	r3,65520
10001718:	d8c00715 	stw	r3,28(sp)
1000171c:	00c00084 	movi	r3,2
10001720:	10c0221e 	bne	r2,r3,100017ac <pow+0x338>
10001724:	00068280 	call	10006828 <__errno>
10001728:	00c00844 	movi	r3,33
1000172c:	10c00015 	stw	r3,0(r2)
10001730:	003fde06 	br	100016ac <__alt_data_end+0xf80016ac>
10001734:	00068280 	call	10006828 <__errno>
10001738:	00c00844 	movi	r3,33
1000173c:	10c00015 	stw	r3,0(r2)
10001740:	003f9106 	br	10001588 <__alt_data_end+0xf8001588>
10001744:	b809883a 	mov	r4,r23
10001748:	b00b883a 	mov	r5,r22
1000174c:	0002c8c0 	call	10002c8c <finite>
10001750:	103fb626 	beq	r2,zero,1000162c <__alt_data_end+0xf800162c>
10001754:	a809883a 	mov	r4,r21
10001758:	a00b883a 	mov	r5,r20
1000175c:	0002c8c0 	call	10002c8c <finite>
10001760:	103fb226 	beq	r2,zero,1000162c <__alt_data_end+0xf800162c>
10001764:	8809883a 	mov	r4,r17
10001768:	800b883a 	mov	r5,r16
1000176c:	0002ca80 	call	10002ca8 <__fpclassifyd>
10001770:	1000121e 	bne	r2,zero,100017bc <pow+0x348>
10001774:	00800044 	movi	r2,1
10001778:	d8800015 	stw	r2,0(sp)
1000177c:	94000017 	ldw	r16,0(r18)
10001780:	00840074 	movhi	r2,4097
10001784:	10a2c604 	addi	r2,r2,-29928
10001788:	d8800115 	stw	r2,4(sp)
1000178c:	d8000815 	stw	zero,32(sp)
10001790:	ddc00215 	stw	r23,8(sp)
10001794:	dd800315 	stw	r22,12(sp)
10001798:	dd400415 	stw	r21,16(sp)
1000179c:	dd000515 	stw	r20,20(sp)
100017a0:	8000241e 	bne	r16,zero,10001834 <pow+0x3c0>
100017a4:	d8000615 	stw	zero,24(sp)
100017a8:	d8000715 	stw	zero,28(sp)
100017ac:	d809883a 	mov	r4,sp
100017b0:	0002d1c0 	call	10002d1c <matherr>
100017b4:	103fbd1e 	bne	r2,zero,100016ac <__alt_data_end+0xf80016ac>
100017b8:	003fda06 	br	10001724 <__alt_data_end+0xf8001724>
100017bc:	00c000c4 	movi	r3,3
100017c0:	d8c00015 	stw	r3,0(sp)
100017c4:	90800017 	ldw	r2,0(r18)
100017c8:	00c40074 	movhi	r3,4097
100017cc:	18e2c604 	addi	r3,r3,-29928
100017d0:	d8c00115 	stw	r3,4(sp)
100017d4:	d8000815 	stw	zero,32(sp)
100017d8:	ddc00215 	stw	r23,8(sp)
100017dc:	dd800315 	stw	r22,12(sp)
100017e0:	dd400415 	stw	r21,16(sp)
100017e4:	dd000515 	stw	r20,20(sp)
100017e8:	b809883a 	mov	r4,r23
100017ec:	b00b883a 	mov	r5,r22
100017f0:	000d883a 	mov	r6,zero
100017f4:	000f883a 	mov	r7,zero
100017f8:	1000181e 	bne	r2,zero,1000185c <pow+0x3e8>
100017fc:	00b80034 	movhi	r2,57344
10001800:	d8800615 	stw	r2,24(sp)
10001804:	0091fc34 	movhi	r2,18416
10001808:	10bfffc4 	addi	r2,r2,-1
1000180c:	d8800715 	stw	r2,28(sp)
10001810:	00053ac0 	call	100053ac <__ledf2>
10001814:	10002a16 	blt	r2,zero,100018c0 <pow+0x44c>
10001818:	90c00017 	ldw	r3,0(r18)
1000181c:	00800084 	movi	r2,2
10001820:	18bf9f1e 	bne	r3,r2,100016a0 <__alt_data_end+0xf80016a0>
10001824:	00068280 	call	10006828 <__errno>
10001828:	00c00884 	movi	r3,34
1000182c:	10c00015 	stw	r3,0(r2)
10001830:	003f9e06 	br	100016ac <__alt_data_end+0xf80016ac>
10001834:	0009883a 	mov	r4,zero
10001838:	000b883a 	mov	r5,zero
1000183c:	000d883a 	mov	r6,zero
10001840:	000f883a 	mov	r7,zero
10001844:	00048c80 	call	100048c8 <__divdf3>
10001848:	d8800615 	stw	r2,24(sp)
1000184c:	d8c00715 	stw	r3,28(sp)
10001850:	00800084 	movi	r2,2
10001854:	80bfb326 	beq	r16,r2,10001724 <__alt_data_end+0xf8001724>
10001858:	003fd406 	br	100017ac <__alt_data_end+0xf80017ac>
1000185c:	009ffc34 	movhi	r2,32752
10001860:	d8000615 	stw	zero,24(sp)
10001864:	d8800715 	stw	r2,28(sp)
10001868:	00053ac0 	call	100053ac <__ledf2>
1000186c:	103fea0e 	bge	r2,zero,10001818 <__alt_data_end+0xf8001818>
10001870:	000d883a 	mov	r6,zero
10001874:	01cff834 	movhi	r7,16352
10001878:	a809883a 	mov	r4,r21
1000187c:	a00b883a 	mov	r5,r20
10001880:	000548c0 	call	1000548c <__muldf3>
10001884:	1009883a 	mov	r4,r2
10001888:	180b883a 	mov	r5,r3
1000188c:	1023883a 	mov	r17,r2
10001890:	1821883a 	mov	r16,r3
10001894:	0002d300 	call	10002d30 <rint>
10001898:	1009883a 	mov	r4,r2
1000189c:	180b883a 	mov	r5,r3
100018a0:	880d883a 	mov	r6,r17
100018a4:	800f883a 	mov	r7,r16
100018a8:	00052480 	call	10005248 <__eqdf2>
100018ac:	103fda26 	beq	r2,zero,10001818 <__alt_data_end+0xf8001818>
100018b0:	00bffc34 	movhi	r2,65520
100018b4:	d8000615 	stw	zero,24(sp)
100018b8:	d8800715 	stw	r2,28(sp)
100018bc:	003fd606 	br	10001818 <__alt_data_end+0xf8001818>
100018c0:	000d883a 	mov	r6,zero
100018c4:	01cff834 	movhi	r7,16352
100018c8:	a809883a 	mov	r4,r21
100018cc:	a00b883a 	mov	r5,r20
100018d0:	000548c0 	call	1000548c <__muldf3>
100018d4:	1009883a 	mov	r4,r2
100018d8:	180b883a 	mov	r5,r3
100018dc:	1023883a 	mov	r17,r2
100018e0:	1821883a 	mov	r16,r3
100018e4:	0002d300 	call	10002d30 <rint>
100018e8:	1009883a 	mov	r4,r2
100018ec:	180b883a 	mov	r5,r3
100018f0:	880d883a 	mov	r6,r17
100018f4:	800f883a 	mov	r7,r16
100018f8:	00052480 	call	10005248 <__eqdf2>
100018fc:	103fc626 	beq	r2,zero,10001818 <__alt_data_end+0xf8001818>
10001900:	00b80034 	movhi	r2,57344
10001904:	d8800615 	stw	r2,24(sp)
10001908:	00b1fc34 	movhi	r2,51184
1000190c:	10bfffc4 	addi	r2,r2,-1
10001910:	d8800715 	stw	r2,28(sp)
10001914:	003fc006 	br	10001818 <__alt_data_end+0xf8001818>

10001918 <__ieee754_pow>:
10001918:	00a00034 	movhi	r2,32768
1000191c:	deffec04 	addi	sp,sp,-80
10001920:	10bfffc4 	addi	r2,r2,-1
10001924:	dc400b15 	stw	r17,44(sp)
10001928:	38a2703a 	and	r17,r7,r2
1000192c:	dfc01315 	stw	ra,76(sp)
10001930:	df001215 	stw	fp,72(sp)
10001934:	ddc01115 	stw	r23,68(sp)
10001938:	dd801015 	stw	r22,64(sp)
1000193c:	dd400f15 	stw	r21,60(sp)
10001940:	dd000e15 	stw	r20,56(sp)
10001944:	dcc00d15 	stw	r19,52(sp)
10001948:	dc800c15 	stw	r18,48(sp)
1000194c:	dc000a15 	stw	r16,40(sp)
10001950:	8986b03a 	or	r3,r17,r6
10001954:	18002a26 	beq	r3,zero,10001a00 <__ieee754_pow+0xe8>
10001958:	28a4703a 	and	r18,r5,r2
1000195c:	009ffc34 	movhi	r2,32752
10001960:	14802316 	blt	r2,r18,100019f0 <__ieee754_pow+0xd8>
10001964:	90802126 	beq	r18,r2,100019ec <__ieee754_pow+0xd4>
10001968:	14402116 	blt	r2,r17,100019f0 <__ieee754_pow+0xd8>
1000196c:	009ffc34 	movhi	r2,32752
10001970:	88807326 	beq	r17,r2,10001b40 <__ieee754_pow+0x228>
10001974:	2827883a 	mov	r19,r5
10001978:	2021883a 	mov	r16,r4
1000197c:	302b883a 	mov	r21,r6
10001980:	382f883a 	mov	r23,r7
10001984:	28007016 	blt	r5,zero,10001b48 <__ieee754_pow+0x230>
10001988:	0039883a 	mov	fp,zero
1000198c:	a8003a1e 	bne	r21,zero,10001a78 <__ieee754_pow+0x160>
10001990:	009ffc34 	movhi	r2,32752
10001994:	88807e26 	beq	r17,r2,10001b90 <__ieee754_pow+0x278>
10001998:	008ffc34 	movhi	r2,16368
1000199c:	88805426 	beq	r17,r2,10001af0 <__ieee754_pow+0x1d8>
100019a0:	00900034 	movhi	r2,16384
100019a4:	b8834926 	beq	r23,r2,100026cc <__ieee754_pow+0xdb4>
100019a8:	008ff834 	movhi	r2,16352
100019ac:	b880321e 	bne	r23,r2,10001a78 <__ieee754_pow+0x160>
100019b0:	98003116 	blt	r19,zero,10001a78 <__ieee754_pow+0x160>
100019b4:	8009883a 	mov	r4,r16
100019b8:	980b883a 	mov	r5,r19
100019bc:	dfc01317 	ldw	ra,76(sp)
100019c0:	df001217 	ldw	fp,72(sp)
100019c4:	ddc01117 	ldw	r23,68(sp)
100019c8:	dd801017 	ldw	r22,64(sp)
100019cc:	dd400f17 	ldw	r21,60(sp)
100019d0:	dd000e17 	ldw	r20,56(sp)
100019d4:	dcc00d17 	ldw	r19,52(sp)
100019d8:	dc800c17 	ldw	r18,48(sp)
100019dc:	dc400b17 	ldw	r17,44(sp)
100019e0:	dc000a17 	ldw	r16,40(sp)
100019e4:	dec01404 	addi	sp,sp,80
100019e8:	00029e41 	jmpi	100029e4 <__ieee754_sqrt>
100019ec:	20001226 	beq	r4,zero,10001a38 <__ieee754_pow+0x120>
100019f0:	00b00434 	movhi	r2,49168
100019f4:	9085883a 	add	r2,r18,r2
100019f8:	1108b03a 	or	r4,r2,r4
100019fc:	20000f1e 	bne	r4,zero,10001a3c <__ieee754_pow+0x124>
10001a00:	0005883a 	mov	r2,zero
10001a04:	00cffc34 	movhi	r3,16368
10001a08:	dfc01317 	ldw	ra,76(sp)
10001a0c:	df001217 	ldw	fp,72(sp)
10001a10:	ddc01117 	ldw	r23,68(sp)
10001a14:	dd801017 	ldw	r22,64(sp)
10001a18:	dd400f17 	ldw	r21,60(sp)
10001a1c:	dd000e17 	ldw	r20,56(sp)
10001a20:	dcc00d17 	ldw	r19,52(sp)
10001a24:	dc800c17 	ldw	r18,48(sp)
10001a28:	dc400b17 	ldw	r17,44(sp)
10001a2c:	dc000a17 	ldw	r16,40(sp)
10001a30:	dec01404 	addi	sp,sp,80
10001a34:	f800283a 	ret
10001a38:	947fcc0e 	bge	r18,r17,1000196c <__alt_data_end+0xf800196c>
10001a3c:	01040074 	movhi	r4,4097
10001a40:	2122c704 	addi	r4,r4,-29924
10001a44:	dfc01317 	ldw	ra,76(sp)
10001a48:	df001217 	ldw	fp,72(sp)
10001a4c:	ddc01117 	ldw	r23,68(sp)
10001a50:	dd801017 	ldw	r22,64(sp)
10001a54:	dd400f17 	ldw	r21,60(sp)
10001a58:	dd000e17 	ldw	r20,56(sp)
10001a5c:	dcc00d17 	ldw	r19,52(sp)
10001a60:	dc800c17 	ldw	r18,48(sp)
10001a64:	dc400b17 	ldw	r17,44(sp)
10001a68:	dc000a17 	ldw	r16,40(sp)
10001a6c:	dec01404 	addi	sp,sp,80
10001a70:	0002d241 	jmpi	10002d24 <nan>
10001a74:	0039883a 	mov	fp,zero
10001a78:	8009883a 	mov	r4,r16
10001a7c:	980b883a 	mov	r5,r19
10001a80:	0002c780 	call	10002c78 <fabs>
10001a84:	102d883a 	mov	r22,r2
10001a88:	80000f26 	beq	r16,zero,10001ac8 <__ieee754_pow+0x1b0>
10001a8c:	9816d7fa 	srli	r11,r19,31
10001a90:	5affffc4 	addi	r11,r11,-1
10001a94:	e2c4b03a 	or	r2,fp,r11
10001a98:	10004a26 	beq	r2,zero,10001bc4 <__ieee754_pow+0x2ac>
10001a9c:	00907834 	movhi	r2,16864
10001aa0:	1440530e 	bge	r2,r17,10001bf0 <__ieee754_pow+0x2d8>
10001aa4:	0090fc34 	movhi	r2,17392
10001aa8:	14433e0e 	bge	r2,r17,100027a4 <__ieee754_pow+0xe8c>
10001aac:	008ffc34 	movhi	r2,16368
10001ab0:	10bfffc4 	addi	r2,r2,-1
10001ab4:	14801916 	blt	r2,r18,10001b1c <__ieee754_pow+0x204>
10001ab8:	b8001916 	blt	r23,zero,10001b20 <__ieee754_pow+0x208>
10001abc:	0005883a 	mov	r2,zero
10001ac0:	0007883a 	mov	r3,zero
10001ac4:	003fd006 	br	10001a08 <__alt_data_end+0xf8001a08>
10001ac8:	90000526 	beq	r18,zero,10001ae0 <__ieee754_pow+0x1c8>
10001acc:	00900034 	movhi	r2,16384
10001ad0:	10bfffc4 	addi	r2,r2,-1
10001ad4:	9884703a 	and	r2,r19,r2
10001ad8:	010ffc34 	movhi	r4,16368
10001adc:	113feb1e 	bne	r2,r4,10001a8c <__alt_data_end+0xf8001a8c>
10001ae0:	b8000716 	blt	r23,zero,10001b00 <__ieee754_pow+0x1e8>
10001ae4:	9802f216 	blt	r19,zero,100026b0 <__ieee754_pow+0xd98>
10001ae8:	b005883a 	mov	r2,r22
10001aec:	003fc606 	br	10001a08 <__alt_data_end+0xf8001a08>
10001af0:	b8038816 	blt	r23,zero,10002914 <__ieee754_pow+0xffc>
10001af4:	8005883a 	mov	r2,r16
10001af8:	9807883a 	mov	r3,r19
10001afc:	003fc206 	br	10001a08 <__alt_data_end+0xf8001a08>
10001b00:	b00d883a 	mov	r6,r22
10001b04:	0009883a 	mov	r4,zero
10001b08:	014ffc34 	movhi	r5,16368
10001b0c:	180f883a 	mov	r7,r3
10001b10:	00048c80 	call	100048c8 <__divdf3>
10001b14:	102d883a 	mov	r22,r2
10001b18:	003ff206 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001b1c:	05ffe70e 	bge	zero,r23,10001abc <__alt_data_end+0xf8001abc>
10001b20:	01220034 	movhi	r4,34816
10001b24:	015f8e34 	movhi	r5,32312
10001b28:	211d6704 	addi	r4,r4,30108
10001b2c:	29790f04 	addi	r5,r5,-7108
10001b30:	200d883a 	mov	r6,r4
10001b34:	280f883a 	mov	r7,r5
10001b38:	000548c0 	call	1000548c <__muldf3>
10001b3c:	003fb206 	br	10001a08 <__alt_data_end+0xf8001a08>
10001b40:	303f8c26 	beq	r6,zero,10001974 <__alt_data_end+0xf8001974>
10001b44:	003faa06 	br	100019f0 <__alt_data_end+0xf80019f0>
10001b48:	0090d034 	movhi	r2,17216
10001b4c:	10bfffc4 	addi	r2,r2,-1
10001b50:	14401a16 	blt	r2,r17,10001bbc <__ieee754_pow+0x2a4>
10001b54:	008ffc34 	movhi	r2,16368
10001b58:	10bfffc4 	addi	r2,r2,-1
10001b5c:	147f8a0e 	bge	r2,r17,10001988 <__alt_data_end+0xf8001988>
10001b60:	8809d53a 	srai	r4,r17,20
10001b64:	00c104c4 	movi	r3,1043
10001b68:	1903840e 	bge	r3,r4,1000297c <__ieee754_pow+0x1064>
10001b6c:	00810cc4 	movi	r2,1075
10001b70:	1105c83a 	sub	r2,r2,r4
10001b74:	3086d83a 	srl	r3,r6,r2
10001b78:	1884983a 	sll	r2,r3,r2
10001b7c:	11bf821e 	bne	r2,r6,10001988 <__alt_data_end+0xf8001988>
10001b80:	18c0004c 	andi	r3,r3,1
10001b84:	02800084 	movi	r10,2
10001b88:	50f9c83a 	sub	fp,r10,r3
10001b8c:	003f7f06 	br	1000198c <__alt_data_end+0xf800198c>
10001b90:	01300434 	movhi	r4,49168
10001b94:	9109883a 	add	r4,r18,r4
10001b98:	2408b03a 	or	r4,r4,r16
10001b9c:	203f9826 	beq	r4,zero,10001a00 <__alt_data_end+0xf8001a00>
10001ba0:	008ffc34 	movhi	r2,16368
10001ba4:	10bfffc4 	addi	r2,r2,-1
10001ba8:	1482f50e 	bge	r2,r18,10002780 <__ieee754_pow+0xe68>
10001bac:	b83fc316 	blt	r23,zero,10001abc <__alt_data_end+0xf8001abc>
10001bb0:	0005883a 	mov	r2,zero
10001bb4:	b807883a 	mov	r3,r23
10001bb8:	003f9306 	br	10001a08 <__alt_data_end+0xf8001a08>
10001bbc:	07000084 	movi	fp,2
10001bc0:	003f7206 	br	1000198c <__alt_data_end+0xf800198c>
10001bc4:	8009883a 	mov	r4,r16
10001bc8:	980b883a 	mov	r5,r19
10001bcc:	200d883a 	mov	r6,r4
10001bd0:	280f883a 	mov	r7,r5
10001bd4:	0005cf80 	call	10005cf8 <__subdf3>
10001bd8:	1009883a 	mov	r4,r2
10001bdc:	180b883a 	mov	r5,r3
10001be0:	100d883a 	mov	r6,r2
10001be4:	180f883a 	mov	r7,r3
10001be8:	00048c80 	call	100048c8 <__divdf3>
10001bec:	003f8606 	br	10001a08 <__alt_data_end+0xf8001a08>
10001bf0:	00800434 	movhi	r2,16
10001bf4:	10bfffc4 	addi	r2,r2,-1
10001bf8:	1482e816 	blt	r2,r18,1000279c <__ieee754_pow+0xe84>
10001bfc:	b009883a 	mov	r4,r22
10001c00:	180b883a 	mov	r5,r3
10001c04:	000d883a 	mov	r6,zero
10001c08:	01d0d034 	movhi	r7,17216
10001c0c:	dac00915 	stw	r11,36(sp)
10001c10:	000548c0 	call	1000548c <__muldf3>
10001c14:	dac00917 	ldw	r11,36(sp)
10001c18:	102d883a 	mov	r22,r2
10001c1c:	1825883a 	mov	r18,r3
10001c20:	013ff2c4 	movi	r4,-53
10001c24:	9007d53a 	srai	r3,r18,20
10001c28:	00800434 	movhi	r2,16
10001c2c:	10bfffc4 	addi	r2,r2,-1
10001c30:	18ff0044 	addi	r3,r3,-1023
10001c34:	1911883a 	add	r8,r3,r4
10001c38:	00c00134 	movhi	r3,4
10001c3c:	9084703a 	and	r2,r18,r2
10001c40:	18e62384 	addi	r3,r3,-26482
10001c44:	14cffc34 	orhi	r19,r2,16368
10001c48:	1882d10e 	bge	r3,r2,10002790 <__ieee754_pow+0xe78>
10001c4c:	00c00334 	movhi	r3,12
10001c50:	18ed9e44 	addi	r3,r3,-18823
10001c54:	1883550e 	bge	r3,r2,100029ac <__ieee754_pow+0x1094>
10001c58:	00bffc34 	movhi	r2,65520
10001c5c:	42000044 	addi	r8,r8,1
10001c60:	98a7883a 	add	r19,r19,r2
10001c64:	0021883a 	mov	r16,zero
10001c68:	0019883a 	mov	r12,zero
10001c6c:	601890fa 	slli	r12,r12,3
10001c70:	00840074 	movhi	r2,4097
10001c74:	10a2d004 	addi	r2,r2,-29888
10001c78:	1305883a 	add	r2,r2,r12
10001c7c:	13400017 	ldw	r13,0(r2)
10001c80:	12800117 	ldw	r10,4(r2)
10001c84:	b009883a 	mov	r4,r22
10001c88:	980b883a 	mov	r5,r19
10001c8c:	680d883a 	mov	r6,r13
10001c90:	500f883a 	mov	r7,r10
10001c94:	da000815 	stw	r8,32(sp)
10001c98:	dac00915 	stw	r11,36(sp)
10001c9c:	db000715 	stw	r12,28(sp)
10001ca0:	da800315 	stw	r10,12(sp)
10001ca4:	db400415 	stw	r13,16(sp)
10001ca8:	0005cf80 	call	10005cf8 <__subdf3>
10001cac:	da800317 	ldw	r10,12(sp)
10001cb0:	db400417 	ldw	r13,16(sp)
10001cb4:	b009883a 	mov	r4,r22
10001cb8:	500f883a 	mov	r7,r10
10001cbc:	680d883a 	mov	r6,r13
10001cc0:	980b883a 	mov	r5,r19
10001cc4:	1829883a 	mov	r20,r3
10001cc8:	d8800015 	stw	r2,0(sp)
10001ccc:	000402c0 	call	1000402c <__adddf3>
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	014ffc34 	movhi	r5,16368
10001cd8:	100d883a 	mov	r6,r2
10001cdc:	180f883a 	mov	r7,r3
10001ce0:	00048c80 	call	100048c8 <__divdf3>
10001ce4:	d9000017 	ldw	r4,0(sp)
10001ce8:	a00b883a 	mov	r5,r20
10001cec:	100d883a 	mov	r6,r2
10001cf0:	180f883a 	mov	r7,r3
10001cf4:	d8c00615 	stw	r3,24(sp)
10001cf8:	d8800515 	stw	r2,20(sp)
10001cfc:	000548c0 	call	1000548c <__muldf3>
10001d00:	1025883a 	mov	r18,r2
10001d04:	9805d07a 	srai	r2,r19,1
10001d08:	1823883a 	mov	r17,r3
10001d0c:	880b883a 	mov	r5,r17
10001d10:	10c80034 	orhi	r3,r2,8192
10001d14:	00800234 	movhi	r2,8
10001d18:	1885883a 	add	r2,r3,r2
10001d1c:	1421883a 	add	r16,r2,r16
10001d20:	800f883a 	mov	r7,r16
10001d24:	0009883a 	mov	r4,zero
10001d28:	000d883a 	mov	r6,zero
10001d2c:	000548c0 	call	1000548c <__muldf3>
10001d30:	d9000017 	ldw	r4,0(sp)
10001d34:	a00b883a 	mov	r5,r20
10001d38:	100d883a 	mov	r6,r2
10001d3c:	180f883a 	mov	r7,r3
10001d40:	0005cf80 	call	10005cf8 <__subdf3>
10001d44:	da800317 	ldw	r10,12(sp)
10001d48:	db400417 	ldw	r13,16(sp)
10001d4c:	800b883a 	mov	r5,r16
10001d50:	500f883a 	mov	r7,r10
10001d54:	680d883a 	mov	r6,r13
10001d58:	0009883a 	mov	r4,zero
10001d5c:	1829883a 	mov	r20,r3
10001d60:	d8800315 	stw	r2,12(sp)
10001d64:	0005cf80 	call	10005cf8 <__subdf3>
10001d68:	b009883a 	mov	r4,r22
10001d6c:	980b883a 	mov	r5,r19
10001d70:	100d883a 	mov	r6,r2
10001d74:	180f883a 	mov	r7,r3
10001d78:	0005cf80 	call	10005cf8 <__subdf3>
10001d7c:	880b883a 	mov	r5,r17
10001d80:	0009883a 	mov	r4,zero
10001d84:	100d883a 	mov	r6,r2
10001d88:	180f883a 	mov	r7,r3
10001d8c:	000548c0 	call	1000548c <__muldf3>
10001d90:	da400317 	ldw	r9,12(sp)
10001d94:	a00b883a 	mov	r5,r20
10001d98:	100d883a 	mov	r6,r2
10001d9c:	4809883a 	mov	r4,r9
10001da0:	180f883a 	mov	r7,r3
10001da4:	0005cf80 	call	10005cf8 <__subdf3>
10001da8:	dbc00517 	ldw	r15,20(sp)
10001dac:	db800617 	ldw	r14,24(sp)
10001db0:	1009883a 	mov	r4,r2
10001db4:	780d883a 	mov	r6,r15
10001db8:	700f883a 	mov	r7,r14
10001dbc:	180b883a 	mov	r5,r3
10001dc0:	000548c0 	call	1000548c <__muldf3>
10001dc4:	9009883a 	mov	r4,r18
10001dc8:	880b883a 	mov	r5,r17
10001dcc:	900d883a 	mov	r6,r18
10001dd0:	880f883a 	mov	r7,r17
10001dd4:	182d883a 	mov	r22,r3
10001dd8:	d8800015 	stw	r2,0(sp)
10001ddc:	000548c0 	call	1000548c <__muldf3>
10001de0:	1009883a 	mov	r4,r2
10001de4:	180b883a 	mov	r5,r3
10001de8:	100d883a 	mov	r6,r2
10001dec:	180f883a 	mov	r7,r3
10001df0:	1027883a 	mov	r19,r2
10001df4:	1821883a 	mov	r16,r3
10001df8:	000548c0 	call	1000548c <__muldf3>
10001dfc:	01929174 	movhi	r6,19013
10001e00:	01cff2b4 	movhi	r7,16330
10001e04:	9809883a 	mov	r4,r19
10001e08:	800b883a 	mov	r5,r16
10001e0c:	3193bbc4 	addi	r6,r6,20207
10001e10:	39df8a04 	addi	r7,r7,32296
10001e14:	1829883a 	mov	r20,r3
10001e18:	d8800315 	stw	r2,12(sp)
10001e1c:	000548c0 	call	1000548c <__muldf3>
10001e20:	01a4f2b4 	movhi	r6,37834
10001e24:	01cff3b4 	movhi	r7,16334
10001e28:	1009883a 	mov	r4,r2
10001e2c:	180b883a 	mov	r5,r3
10001e30:	31b6d944 	addi	r6,r6,-9371
10001e34:	39e19284 	addi	r7,r7,-31158
10001e38:	000402c0 	call	1000402c <__adddf3>
10001e3c:	980d883a 	mov	r6,r19
10001e40:	800f883a 	mov	r7,r16
10001e44:	1009883a 	mov	r4,r2
10001e48:	180b883a 	mov	r5,r3
10001e4c:	000548c0 	call	1000548c <__muldf3>
10001e50:	01aa4774 	movhi	r6,43293
10001e54:	01cff474 	movhi	r7,16337
10001e58:	1009883a 	mov	r4,r2
10001e5c:	180b883a 	mov	r5,r3
10001e60:	31904044 	addi	r6,r6,16641
10001e64:	39dd1804 	addi	r7,r7,29792
10001e68:	000402c0 	call	1000402c <__adddf3>
10001e6c:	980d883a 	mov	r6,r19
10001e70:	800f883a 	mov	r7,r16
10001e74:	1009883a 	mov	r4,r2
10001e78:	180b883a 	mov	r5,r3
10001e7c:	000548c0 	call	1000548c <__muldf3>
10001e80:	019463f4 	movhi	r6,20879
10001e84:	01cff574 	movhi	r7,16341
10001e88:	1009883a 	mov	r4,r2
10001e8c:	180b883a 	mov	r5,r3
10001e90:	31899344 	addi	r6,r6,9805
10001e94:	39d55544 	addi	r7,r7,21845
10001e98:	000402c0 	call	1000402c <__adddf3>
10001e9c:	980d883a 	mov	r6,r19
10001ea0:	800f883a 	mov	r7,r16
10001ea4:	1009883a 	mov	r4,r2
10001ea8:	180b883a 	mov	r5,r3
10001eac:	000548c0 	call	1000548c <__muldf3>
10001eb0:	01b6dc34 	movhi	r6,56176
10001eb4:	01cff6f4 	movhi	r7,16347
10001eb8:	1009883a 	mov	r4,r2
10001ebc:	180b883a 	mov	r5,r3
10001ec0:	31aaffc4 	addi	r6,r6,-21505
10001ec4:	39db6d84 	addi	r7,r7,28086
10001ec8:	000402c0 	call	1000402c <__adddf3>
10001ecc:	980d883a 	mov	r6,r19
10001ed0:	800f883a 	mov	r7,r16
10001ed4:	1009883a 	mov	r4,r2
10001ed8:	180b883a 	mov	r5,r3
10001edc:	000548c0 	call	1000548c <__muldf3>
10001ee0:	018cccf4 	movhi	r6,13107
10001ee4:	01cff8f4 	movhi	r7,16355
10001ee8:	1009883a 	mov	r4,r2
10001eec:	180b883a 	mov	r5,r3
10001ef0:	318cc0c4 	addi	r6,r6,13059
10001ef4:	39ccccc4 	addi	r7,r7,13107
10001ef8:	000402c0 	call	1000402c <__adddf3>
10001efc:	da400317 	ldw	r9,12(sp)
10001f00:	a00b883a 	mov	r5,r20
10001f04:	100d883a 	mov	r6,r2
10001f08:	4809883a 	mov	r4,r9
10001f0c:	180f883a 	mov	r7,r3
10001f10:	000548c0 	call	1000548c <__muldf3>
10001f14:	880b883a 	mov	r5,r17
10001f18:	900d883a 	mov	r6,r18
10001f1c:	880f883a 	mov	r7,r17
10001f20:	0009883a 	mov	r4,zero
10001f24:	1027883a 	mov	r19,r2
10001f28:	1821883a 	mov	r16,r3
10001f2c:	000402c0 	call	1000402c <__adddf3>
10001f30:	d9800017 	ldw	r6,0(sp)
10001f34:	b00f883a 	mov	r7,r22
10001f38:	1009883a 	mov	r4,r2
10001f3c:	180b883a 	mov	r5,r3
10001f40:	000548c0 	call	1000548c <__muldf3>
10001f44:	980d883a 	mov	r6,r19
10001f48:	800f883a 	mov	r7,r16
10001f4c:	1009883a 	mov	r4,r2
10001f50:	180b883a 	mov	r5,r3
10001f54:	000402c0 	call	1000402c <__adddf3>
10001f58:	880f883a 	mov	r7,r17
10001f5c:	880b883a 	mov	r5,r17
10001f60:	000d883a 	mov	r6,zero
10001f64:	0009883a 	mov	r4,zero
10001f68:	1029883a 	mov	r20,r2
10001f6c:	1827883a 	mov	r19,r3
10001f70:	000548c0 	call	1000548c <__muldf3>
10001f74:	1009883a 	mov	r4,r2
10001f78:	180b883a 	mov	r5,r3
10001f7c:	000d883a 	mov	r6,zero
10001f80:	01d00234 	movhi	r7,16392
10001f84:	d8c00615 	stw	r3,24(sp)
10001f88:	d8800515 	stw	r2,20(sp)
10001f8c:	000402c0 	call	1000402c <__adddf3>
10001f90:	a00d883a 	mov	r6,r20
10001f94:	980f883a 	mov	r7,r19
10001f98:	1009883a 	mov	r4,r2
10001f9c:	180b883a 	mov	r5,r3
10001fa0:	000402c0 	call	1000402c <__adddf3>
10001fa4:	880b883a 	mov	r5,r17
10001fa8:	000d883a 	mov	r6,zero
10001fac:	180f883a 	mov	r7,r3
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	1821883a 	mov	r16,r3
10001fb8:	000548c0 	call	1000548c <__muldf3>
10001fbc:	d9000017 	ldw	r4,0(sp)
10001fc0:	b00b883a 	mov	r5,r22
10001fc4:	800f883a 	mov	r7,r16
10001fc8:	000d883a 	mov	r6,zero
10001fcc:	d8800115 	stw	r2,4(sp)
10001fd0:	d8c00215 	stw	r3,8(sp)
10001fd4:	000548c0 	call	1000548c <__muldf3>
10001fd8:	800b883a 	mov	r5,r16
10001fdc:	0009883a 	mov	r4,zero
10001fe0:	000d883a 	mov	r6,zero
10001fe4:	01d00234 	movhi	r7,16392
10001fe8:	182d883a 	mov	r22,r3
10001fec:	d8800315 	stw	r2,12(sp)
10001ff0:	0005cf80 	call	10005cf8 <__subdf3>
10001ff4:	dbc00517 	ldw	r15,20(sp)
10001ff8:	db800617 	ldw	r14,24(sp)
10001ffc:	1009883a 	mov	r4,r2
10002000:	780d883a 	mov	r6,r15
10002004:	700f883a 	mov	r7,r14
10002008:	180b883a 	mov	r5,r3
1000200c:	0005cf80 	call	10005cf8 <__subdf3>
10002010:	a009883a 	mov	r4,r20
10002014:	980b883a 	mov	r5,r19
10002018:	100d883a 	mov	r6,r2
1000201c:	180f883a 	mov	r7,r3
10002020:	0005cf80 	call	10005cf8 <__subdf3>
10002024:	900d883a 	mov	r6,r18
10002028:	880f883a 	mov	r7,r17
1000202c:	1009883a 	mov	r4,r2
10002030:	180b883a 	mov	r5,r3
10002034:	000548c0 	call	1000548c <__muldf3>
10002038:	da400317 	ldw	r9,12(sp)
1000203c:	b00b883a 	mov	r5,r22
10002040:	100d883a 	mov	r6,r2
10002044:	4809883a 	mov	r4,r9
10002048:	180f883a 	mov	r7,r3
1000204c:	000402c0 	call	1000402c <__adddf3>
10002050:	d9000117 	ldw	r4,4(sp)
10002054:	d9400217 	ldw	r5,8(sp)
10002058:	100d883a 	mov	r6,r2
1000205c:	180f883a 	mov	r7,r3
10002060:	102d883a 	mov	r22,r2
10002064:	1825883a 	mov	r18,r3
10002068:	000402c0 	call	1000402c <__adddf3>
1000206c:	01cffbf4 	movhi	r7,16367
10002070:	39f1c244 	addi	r7,r7,-14583
10002074:	0009883a 	mov	r4,zero
10002078:	180b883a 	mov	r5,r3
1000207c:	01b80034 	movhi	r6,57344
10002080:	1823883a 	mov	r17,r3
10002084:	000548c0 	call	1000548c <__muldf3>
10002088:	018516f4 	movhi	r6,5211
1000208c:	01ef8fb4 	movhi	r7,48702
10002090:	880b883a 	mov	r5,r17
10002094:	31807d44 	addi	r6,r6,501
10002098:	39cbf804 	addi	r7,r7,12256
1000209c:	0009883a 	mov	r4,zero
100020a0:	1029883a 	mov	r20,r2
100020a4:	1827883a 	mov	r19,r3
100020a8:	000548c0 	call	1000548c <__muldf3>
100020ac:	d9800117 	ldw	r6,4(sp)
100020b0:	d9c00217 	ldw	r7,8(sp)
100020b4:	880b883a 	mov	r5,r17
100020b8:	0009883a 	mov	r4,zero
100020bc:	1821883a 	mov	r16,r3
100020c0:	d8800415 	stw	r2,16(sp)
100020c4:	0005cf80 	call	10005cf8 <__subdf3>
100020c8:	b009883a 	mov	r4,r22
100020cc:	900b883a 	mov	r5,r18
100020d0:	100d883a 	mov	r6,r2
100020d4:	180f883a 	mov	r7,r3
100020d8:	0005cf80 	call	10005cf8 <__subdf3>
100020dc:	01b70eb4 	movhi	r6,56378
100020e0:	01cffbf4 	movhi	r7,16367
100020e4:	1009883a 	mov	r4,r2
100020e8:	180b883a 	mov	r5,r3
100020ec:	3180ff44 	addi	r6,r6,1021
100020f0:	39f1c244 	addi	r7,r7,-14583
100020f4:	000548c0 	call	1000548c <__muldf3>
100020f8:	db400417 	ldw	r13,16(sp)
100020fc:	800b883a 	mov	r5,r16
10002100:	100d883a 	mov	r6,r2
10002104:	6809883a 	mov	r4,r13
10002108:	180f883a 	mov	r7,r3
1000210c:	000402c0 	call	1000402c <__adddf3>
10002110:	db000717 	ldw	r12,28(sp)
10002114:	1009883a 	mov	r4,r2
10002118:	00840074 	movhi	r2,4097
1000211c:	10a2c804 	addi	r2,r2,-29920
10002120:	1305883a 	add	r2,r2,r12
10002124:	11800017 	ldw	r6,0(r2)
10002128:	11c00117 	ldw	r7,4(r2)
1000212c:	180b883a 	mov	r5,r3
10002130:	000402c0 	call	1000402c <__adddf3>
10002134:	da000817 	ldw	r8,32(sp)
10002138:	1025883a 	mov	r18,r2
1000213c:	1823883a 	mov	r17,r3
10002140:	4009883a 	mov	r4,r8
10002144:	00066500 	call	10006650 <__floatsidf>
10002148:	db000717 	ldw	r12,28(sp)
1000214c:	d8800115 	stw	r2,4(sp)
10002150:	00840074 	movhi	r2,4097
10002154:	10a2cc04 	addi	r2,r2,-29904
10002158:	1319883a 	add	r12,r2,r12
1000215c:	65800017 	ldw	r22,0(r12)
10002160:	63000117 	ldw	r12,4(r12)
10002164:	a009883a 	mov	r4,r20
10002168:	980b883a 	mov	r5,r19
1000216c:	900d883a 	mov	r6,r18
10002170:	880f883a 	mov	r7,r17
10002174:	db000015 	stw	r12,0(sp)
10002178:	d8c00215 	stw	r3,8(sp)
1000217c:	000402c0 	call	1000402c <__adddf3>
10002180:	d9c00017 	ldw	r7,0(sp)
10002184:	1009883a 	mov	r4,r2
10002188:	180b883a 	mov	r5,r3
1000218c:	b00d883a 	mov	r6,r22
10002190:	000402c0 	call	1000402c <__adddf3>
10002194:	d9800117 	ldw	r6,4(sp)
10002198:	d9c00217 	ldw	r7,8(sp)
1000219c:	1009883a 	mov	r4,r2
100021a0:	180b883a 	mov	r5,r3
100021a4:	000402c0 	call	1000402c <__adddf3>
100021a8:	d9800117 	ldw	r6,4(sp)
100021ac:	d9c00217 	ldw	r7,8(sp)
100021b0:	0009883a 	mov	r4,zero
100021b4:	180b883a 	mov	r5,r3
100021b8:	1821883a 	mov	r16,r3
100021bc:	0005cf80 	call	10005cf8 <__subdf3>
100021c0:	d9c00017 	ldw	r7,0(sp)
100021c4:	1009883a 	mov	r4,r2
100021c8:	180b883a 	mov	r5,r3
100021cc:	b00d883a 	mov	r6,r22
100021d0:	0005cf80 	call	10005cf8 <__subdf3>
100021d4:	1009883a 	mov	r4,r2
100021d8:	180b883a 	mov	r5,r3
100021dc:	a00d883a 	mov	r6,r20
100021e0:	980f883a 	mov	r7,r19
100021e4:	0005cf80 	call	10005cf8 <__subdf3>
100021e8:	9009883a 	mov	r4,r18
100021ec:	880b883a 	mov	r5,r17
100021f0:	100d883a 	mov	r6,r2
100021f4:	180f883a 	mov	r7,r3
100021f8:	0005cf80 	call	10005cf8 <__subdf3>
100021fc:	dac00917 	ldw	r11,36(sp)
10002200:	e2bfffc4 	addi	r10,fp,-1
10002204:	1027883a 	mov	r19,r2
10002208:	52d6b03a 	or	r11,r10,r11
1000220c:	1823883a 	mov	r17,r3
10002210:	5801591e 	bne	r11,zero,10002778 <__ieee754_pow+0xe60>
10002214:	04affc34 	movhi	r18,49136
10002218:	b80f883a 	mov	r7,r23
1000221c:	a809883a 	mov	r4,r21
10002220:	b80b883a 	mov	r5,r23
10002224:	000d883a 	mov	r6,zero
10002228:	0005cf80 	call	10005cf8 <__subdf3>
1000222c:	1009883a 	mov	r4,r2
10002230:	180b883a 	mov	r5,r3
10002234:	000d883a 	mov	r6,zero
10002238:	800f883a 	mov	r7,r16
1000223c:	000548c0 	call	1000548c <__muldf3>
10002240:	a809883a 	mov	r4,r21
10002244:	b80b883a 	mov	r5,r23
10002248:	980d883a 	mov	r6,r19
1000224c:	880f883a 	mov	r7,r17
10002250:	102d883a 	mov	r22,r2
10002254:	1829883a 	mov	r20,r3
10002258:	000548c0 	call	1000548c <__muldf3>
1000225c:	b009883a 	mov	r4,r22
10002260:	a00b883a 	mov	r5,r20
10002264:	100d883a 	mov	r6,r2
10002268:	180f883a 	mov	r7,r3
1000226c:	000402c0 	call	1000402c <__adddf3>
10002270:	b80b883a 	mov	r5,r23
10002274:	0009883a 	mov	r4,zero
10002278:	000d883a 	mov	r6,zero
1000227c:	800f883a 	mov	r7,r16
10002280:	1027883a 	mov	r19,r2
10002284:	1823883a 	mov	r17,r3
10002288:	000548c0 	call	1000548c <__muldf3>
1000228c:	9809883a 	mov	r4,r19
10002290:	880b883a 	mov	r5,r17
10002294:	100d883a 	mov	r6,r2
10002298:	180f883a 	mov	r7,r3
1000229c:	102d883a 	mov	r22,r2
100022a0:	182b883a 	mov	r21,r3
100022a4:	000402c0 	call	1000402c <__adddf3>
100022a8:	102f883a 	mov	r23,r2
100022ac:	00902434 	movhi	r2,16528
100022b0:	10bfffc4 	addi	r2,r2,-1
100022b4:	1829883a 	mov	r20,r3
100022b8:	b013883a 	mov	r9,r22
100022bc:	a811883a 	mov	r8,r21
100022c0:	10c1080e 	bge	r2,r3,100026e4 <__ieee754_pow+0xdcc>
100022c4:	00efdc34 	movhi	r3,49008
100022c8:	a0c7883a 	add	r3,r20,r3
100022cc:	1dc6b03a 	or	r3,r3,r23
100022d0:	1801961e 	bne	r3,zero,1000292c <__ieee754_pow+0x1014>
100022d4:	01994b34 	movhi	r6,25900
100022d8:	01cf25f4 	movhi	r7,15511
100022dc:	31a0bf84 	addi	r6,r6,-32002
100022e0:	39c551c4 	addi	r7,r7,5447
100022e4:	9809883a 	mov	r4,r19
100022e8:	880b883a 	mov	r5,r17
100022ec:	000402c0 	call	1000402c <__adddf3>
100022f0:	b809883a 	mov	r4,r23
100022f4:	a00b883a 	mov	r5,r20
100022f8:	b00d883a 	mov	r6,r22
100022fc:	a80f883a 	mov	r7,r21
10002300:	1039883a 	mov	fp,r2
10002304:	1821883a 	mov	r16,r3
10002308:	0005cf80 	call	10005cf8 <__subdf3>
1000230c:	e009883a 	mov	r4,fp
10002310:	800b883a 	mov	r5,r16
10002314:	100d883a 	mov	r6,r2
10002318:	180f883a 	mov	r7,r3
1000231c:	00052cc0 	call	100052cc <__gedf2>
10002320:	00818216 	blt	zero,r2,1000292c <__ieee754_pow+0x1014>
10002324:	a021883a 	mov	r16,r20
10002328:	8011d53a 	srai	r8,r16,20
1000232c:	00800434 	movhi	r2,16
10002330:	a02ed7fa 	srli	r23,r20,31
10002334:	423f0084 	addi	r8,r8,-1022
10002338:	1211d83a 	sra	r8,r2,r8
1000233c:	00c00434 	movhi	r3,16
10002340:	18ffffc4 	addi	r3,r3,-1
10002344:	4529883a 	add	r20,r8,r20
10002348:	a00a907a 	slli	r5,r20,1
1000234c:	a0c4703a 	and	r2,r20,r3
10002350:	10800434 	orhi	r2,r2,16
10002354:	280ad57a 	srli	r5,r5,21
10002358:	05cdc83a 	sub	r6,zero,r23
1000235c:	b009883a 	mov	r4,r22
10002360:	29ff0044 	addi	r7,r5,-1023
10002364:	19c7d83a 	sra	r3,r3,r7
10002368:	01c104c4 	movi	r7,1043
1000236c:	394bc83a 	sub	r5,r7,r5
10002370:	1145d83a 	sra	r2,r2,r5
10002374:	00ce303a 	nor	r7,zero,r3
10002378:	3d0e703a 	and	r7,r7,r20
1000237c:	1184f03a 	xor	r2,r2,r6
10002380:	a80b883a 	mov	r5,r21
10002384:	000d883a 	mov	r6,zero
10002388:	15ef883a 	add	r23,r2,r23
1000238c:	ddc00115 	stw	r23,4(sp)
10002390:	0005cf80 	call	10005cf8 <__subdf3>
10002394:	9809883a 	mov	r4,r19
10002398:	880b883a 	mov	r5,r17
1000239c:	100d883a 	mov	r6,r2
100023a0:	180f883a 	mov	r7,r3
100023a4:	d8c00815 	stw	r3,32(sp)
100023a8:	d8800315 	stw	r2,12(sp)
100023ac:	000402c0 	call	1000402c <__adddf3>
100023b0:	d8800117 	ldw	r2,4(sp)
100023b4:	da000817 	ldw	r8,32(sp)
100023b8:	da400317 	ldw	r9,12(sp)
100023bc:	1004953a 	slli	r2,r2,20
100023c0:	1829883a 	mov	r20,r3
100023c4:	d8800015 	stw	r2,0(sp)
100023c8:	01cff9b4 	movhi	r7,16358
100023cc:	a00b883a 	mov	r5,r20
100023d0:	39cb90c4 	addi	r7,r7,11843
100023d4:	0009883a 	mov	r4,zero
100023d8:	000d883a 	mov	r6,zero
100023dc:	da000815 	stw	r8,32(sp)
100023e0:	da400315 	stw	r9,12(sp)
100023e4:	000548c0 	call	1000548c <__muldf3>
100023e8:	da400317 	ldw	r9,12(sp)
100023ec:	da000817 	ldw	r8,32(sp)
100023f0:	a00b883a 	mov	r5,r20
100023f4:	480d883a 	mov	r6,r9
100023f8:	400f883a 	mov	r7,r8
100023fc:	0009883a 	mov	r4,zero
10002400:	1039883a 	mov	fp,r2
10002404:	182d883a 	mov	r22,r3
10002408:	0005cf80 	call	10005cf8 <__subdf3>
1000240c:	9809883a 	mov	r4,r19
10002410:	880b883a 	mov	r5,r17
10002414:	100d883a 	mov	r6,r2
10002418:	180f883a 	mov	r7,r3
1000241c:	0005cf80 	call	10005cf8 <__subdf3>
10002420:	01bfbeb4 	movhi	r6,65274
10002424:	01cff9b4 	movhi	r7,16358
10002428:	1009883a 	mov	r4,r2
1000242c:	180b883a 	mov	r5,r3
10002430:	318e7bc4 	addi	r6,r6,14831
10002434:	39cb9084 	addi	r7,r7,11842
10002438:	000548c0 	call	1000548c <__muldf3>
1000243c:	01832a34 	movhi	r6,3240
10002440:	01ef8834 	movhi	r7,48672
10002444:	a00b883a 	mov	r5,r20
10002448:	319b0e44 	addi	r6,r6,27705
1000244c:	39d71844 	addi	r7,r7,23649
10002450:	0009883a 	mov	r4,zero
10002454:	1023883a 	mov	r17,r2
10002458:	1821883a 	mov	r16,r3
1000245c:	000548c0 	call	1000548c <__muldf3>
10002460:	8809883a 	mov	r4,r17
10002464:	800b883a 	mov	r5,r16
10002468:	100d883a 	mov	r6,r2
1000246c:	180f883a 	mov	r7,r3
10002470:	000402c0 	call	1000402c <__adddf3>
10002474:	e009883a 	mov	r4,fp
10002478:	b00b883a 	mov	r5,r22
1000247c:	100d883a 	mov	r6,r2
10002480:	180f883a 	mov	r7,r3
10002484:	1029883a 	mov	r20,r2
10002488:	1827883a 	mov	r19,r3
1000248c:	000402c0 	call	1000402c <__adddf3>
10002490:	e00d883a 	mov	r6,fp
10002494:	b00f883a 	mov	r7,r22
10002498:	1009883a 	mov	r4,r2
1000249c:	180b883a 	mov	r5,r3
100024a0:	1023883a 	mov	r17,r2
100024a4:	1821883a 	mov	r16,r3
100024a8:	0005cf80 	call	10005cf8 <__subdf3>
100024ac:	a009883a 	mov	r4,r20
100024b0:	980b883a 	mov	r5,r19
100024b4:	100d883a 	mov	r6,r2
100024b8:	180f883a 	mov	r7,r3
100024bc:	0005cf80 	call	10005cf8 <__subdf3>
100024c0:	8809883a 	mov	r4,r17
100024c4:	800b883a 	mov	r5,r16
100024c8:	880d883a 	mov	r6,r17
100024cc:	800f883a 	mov	r7,r16
100024d0:	1039883a 	mov	fp,r2
100024d4:	182d883a 	mov	r22,r3
100024d8:	000548c0 	call	1000548c <__muldf3>
100024dc:	019caff4 	movhi	r6,29375
100024e0:	01cf99b4 	movhi	r7,15974
100024e4:	1009883a 	mov	r4,r2
100024e8:	180b883a 	mov	r5,r3
100024ec:	31a93404 	addi	r6,r6,-23344
100024f0:	39cdda44 	addi	r7,r7,14185
100024f4:	1029883a 	mov	r20,r2
100024f8:	1827883a 	mov	r19,r3
100024fc:	000548c0 	call	1000548c <__muldf3>
10002500:	01b174b4 	movhi	r6,50642
10002504:	01cfaf34 	movhi	r7,16060
10002508:	1009883a 	mov	r4,r2
1000250c:	180b883a 	mov	r5,r3
10002510:	319afc44 	addi	r6,r6,27633
10002514:	39ef5044 	addi	r7,r7,-17087
10002518:	0005cf80 	call	10005cf8 <__subdf3>
1000251c:	a00d883a 	mov	r6,r20
10002520:	980f883a 	mov	r7,r19
10002524:	1009883a 	mov	r4,r2
10002528:	180b883a 	mov	r5,r3
1000252c:	000548c0 	call	1000548c <__muldf3>
10002530:	01abc9b4 	movhi	r6,44838
10002534:	01cfc474 	movhi	r7,16145
10002538:	1009883a 	mov	r4,r2
1000253c:	180b883a 	mov	r5,r3
10002540:	31b78b04 	addi	r6,r6,-8660
10002544:	39d59a84 	addi	r7,r7,22122
10002548:	000402c0 	call	1000402c <__adddf3>
1000254c:	a00d883a 	mov	r6,r20
10002550:	980f883a 	mov	r7,r19
10002554:	1009883a 	mov	r4,r2
10002558:	180b883a 	mov	r5,r3
1000255c:	000548c0 	call	1000548c <__muldf3>
10002560:	0185aff4 	movhi	r6,5823
10002564:	01cfd9f4 	movhi	r7,16231
10002568:	1009883a 	mov	r4,r2
1000256c:	180b883a 	mov	r5,r3
10002570:	31af64c4 	addi	r6,r6,-17005
10002574:	39f05b04 	addi	r7,r7,-16020
10002578:	0005cf80 	call	10005cf8 <__subdf3>
1000257c:	a00d883a 	mov	r6,r20
10002580:	980f883a 	mov	r7,r19
10002584:	1009883a 	mov	r4,r2
10002588:	180b883a 	mov	r5,r3
1000258c:	000548c0 	call	1000548c <__muldf3>
10002590:	01955574 	movhi	r6,21845
10002594:	01cff174 	movhi	r7,16325
10002598:	1009883a 	mov	r4,r2
1000259c:	180b883a 	mov	r5,r3
100025a0:	31954f84 	addi	r6,r6,21822
100025a4:	39d55544 	addi	r7,r7,21845
100025a8:	000402c0 	call	1000402c <__adddf3>
100025ac:	a00d883a 	mov	r6,r20
100025b0:	980f883a 	mov	r7,r19
100025b4:	1009883a 	mov	r4,r2
100025b8:	180b883a 	mov	r5,r3
100025bc:	000548c0 	call	1000548c <__muldf3>
100025c0:	8809883a 	mov	r4,r17
100025c4:	800b883a 	mov	r5,r16
100025c8:	100d883a 	mov	r6,r2
100025cc:	180f883a 	mov	r7,r3
100025d0:	0005cf80 	call	10005cf8 <__subdf3>
100025d4:	8809883a 	mov	r4,r17
100025d8:	800b883a 	mov	r5,r16
100025dc:	100d883a 	mov	r6,r2
100025e0:	180f883a 	mov	r7,r3
100025e4:	1029883a 	mov	r20,r2
100025e8:	1827883a 	mov	r19,r3
100025ec:	000548c0 	call	1000548c <__muldf3>
100025f0:	a009883a 	mov	r4,r20
100025f4:	980b883a 	mov	r5,r19
100025f8:	000d883a 	mov	r6,zero
100025fc:	01d00034 	movhi	r7,16384
10002600:	102b883a 	mov	r21,r2
10002604:	182f883a 	mov	r23,r3
10002608:	0005cf80 	call	10005cf8 <__subdf3>
1000260c:	a809883a 	mov	r4,r21
10002610:	b80b883a 	mov	r5,r23
10002614:	100d883a 	mov	r6,r2
10002618:	180f883a 	mov	r7,r3
1000261c:	00048c80 	call	100048c8 <__divdf3>
10002620:	8809883a 	mov	r4,r17
10002624:	800b883a 	mov	r5,r16
10002628:	e00d883a 	mov	r6,fp
1000262c:	b00f883a 	mov	r7,r22
10002630:	1029883a 	mov	r20,r2
10002634:	1827883a 	mov	r19,r3
10002638:	000548c0 	call	1000548c <__muldf3>
1000263c:	1009883a 	mov	r4,r2
10002640:	180b883a 	mov	r5,r3
10002644:	e00d883a 	mov	r6,fp
10002648:	b00f883a 	mov	r7,r22
1000264c:	000402c0 	call	1000402c <__adddf3>
10002650:	a009883a 	mov	r4,r20
10002654:	980b883a 	mov	r5,r19
10002658:	100d883a 	mov	r6,r2
1000265c:	180f883a 	mov	r7,r3
10002660:	0005cf80 	call	10005cf8 <__subdf3>
10002664:	1009883a 	mov	r4,r2
10002668:	180b883a 	mov	r5,r3
1000266c:	880d883a 	mov	r6,r17
10002670:	800f883a 	mov	r7,r16
10002674:	0005cf80 	call	10005cf8 <__subdf3>
10002678:	0009883a 	mov	r4,zero
1000267c:	180f883a 	mov	r7,r3
10002680:	014ffc34 	movhi	r5,16368
10002684:	100d883a 	mov	r6,r2
10002688:	0005cf80 	call	10005cf8 <__subdf3>
1000268c:	d9000017 	ldw	r4,0(sp)
10002690:	190f883a 	add	r7,r3,r4
10002694:	3809d53a 	srai	r4,r7,20
10002698:	0100c70e 	bge	zero,r4,100029b8 <__ieee754_pow+0x10a0>
1000269c:	100d883a 	mov	r6,r2
100026a0:	0009883a 	mov	r4,zero
100026a4:	900b883a 	mov	r5,r18
100026a8:	000548c0 	call	1000548c <__muldf3>
100026ac:	003cd606 	br	10001a08 <__alt_data_end+0xf8001a08>
100026b0:	00b00434 	movhi	r2,49168
100026b4:	9085883a 	add	r2,r18,r2
100026b8:	e084b03a 	or	r2,fp,r2
100026bc:	1000aa1e 	bne	r2,zero,10002968 <__ieee754_pow+0x1050>
100026c0:	b009883a 	mov	r4,r22
100026c4:	180b883a 	mov	r5,r3
100026c8:	003d4006 	br	10001bcc <__alt_data_end+0xf8001bcc>
100026cc:	8009883a 	mov	r4,r16
100026d0:	980b883a 	mov	r5,r19
100026d4:	800d883a 	mov	r6,r16
100026d8:	980f883a 	mov	r7,r19
100026dc:	000548c0 	call	1000548c <__muldf3>
100026e0:	003cc906 	br	10001a08 <__alt_data_end+0xf8001a08>
100026e4:	04200034 	movhi	r16,32768
100026e8:	843fffc4 	addi	r16,r16,-1
100026ec:	00902474 	movhi	r2,16529
100026f0:	1c20703a 	and	r16,r3,r16
100026f4:	10b2ffc4 	addi	r2,r2,-13313
100026f8:	1400a70e 	bge	r2,r16,10002998 <__ieee754_pow+0x1080>
100026fc:	008fdbf4 	movhi	r2,16239
10002700:	108d0004 	addi	r2,r2,13312
10002704:	1885883a 	add	r2,r3,r2
10002708:	15c4b03a 	or	r2,r2,r23
1000270c:	10000b1e 	bne	r2,zero,1000273c <__ieee754_pow+0xe24>
10002710:	b809883a 	mov	r4,r23
10002714:	180b883a 	mov	r5,r3
10002718:	b00d883a 	mov	r6,r22
1000271c:	a80f883a 	mov	r7,r21
10002720:	0005cf80 	call	10005cf8 <__subdf3>
10002724:	9809883a 	mov	r4,r19
10002728:	880b883a 	mov	r5,r17
1000272c:	100d883a 	mov	r6,r2
10002730:	180f883a 	mov	r7,r3
10002734:	00053ac0 	call	100053ac <__ledf2>
10002738:	00befb16 	blt	zero,r2,10002328 <__alt_data_end+0xf8002328>
1000273c:	01b0be74 	movhi	r6,49913
10002740:	01c06974 	movhi	r7,421
10002744:	900b883a 	mov	r5,r18
10002748:	31bcd644 	addi	r6,r6,-3239
1000274c:	39db87c4 	addi	r7,r7,28191
10002750:	0009883a 	mov	r4,zero
10002754:	000548c0 	call	1000548c <__muldf3>
10002758:	01b0be74 	movhi	r6,49913
1000275c:	01c06974 	movhi	r7,421
10002760:	1009883a 	mov	r4,r2
10002764:	180b883a 	mov	r5,r3
10002768:	31bcd644 	addi	r6,r6,-3239
1000276c:	39db87c4 	addi	r7,r7,28191
10002770:	000548c0 	call	1000548c <__muldf3>
10002774:	003ca406 	br	10001a08 <__alt_data_end+0xf8001a08>
10002778:	048ffc34 	movhi	r18,16368
1000277c:	003ea606 	br	10002218 <__alt_data_end+0xf8002218>
10002780:	b83cce0e 	bge	r23,zero,10001abc <__alt_data_end+0xf8001abc>
10002784:	0005883a 	mov	r2,zero
10002788:	b8e0003c 	xorhi	r3,r23,32768
1000278c:	003c9e06 	br	10001a08 <__alt_data_end+0xf8001a08>
10002790:	0021883a 	mov	r16,zero
10002794:	0019883a 	mov	r12,zero
10002798:	003d3406 	br	10001c6c <__alt_data_end+0xf8001c6c>
1000279c:	0009883a 	mov	r4,zero
100027a0:	003d2006 	br	10001c24 <__alt_data_end+0xf8001c24>
100027a4:	008ffc34 	movhi	r2,16368
100027a8:	10bfff84 	addi	r2,r2,-2
100027ac:	14bcc20e 	bge	r2,r18,10001ab8 <__alt_data_end+0xf8001ab8>
100027b0:	01cffc34 	movhi	r7,16368
100027b4:	3cbcd916 	blt	r7,r18,10001b1c <__alt_data_end+0xf8001b1c>
100027b8:	b009883a 	mov	r4,r22
100027bc:	000d883a 	mov	r6,zero
100027c0:	180b883a 	mov	r5,r3
100027c4:	dac00915 	stw	r11,36(sp)
100027c8:	0005cf80 	call	10005cf8 <__subdf3>
100027cc:	01cffdf4 	movhi	r7,16375
100027d0:	1009883a 	mov	r4,r2
100027d4:	180b883a 	mov	r5,r3
100027d8:	39c551c4 	addi	r7,r7,5447
100027dc:	01980034 	movhi	r6,24576
100027e0:	1023883a 	mov	r17,r2
100027e4:	1821883a 	mov	r16,r3
100027e8:	000548c0 	call	1000548c <__muldf3>
100027ec:	01be17b4 	movhi	r6,63582
100027f0:	01cf9574 	movhi	r7,15957
100027f4:	8809883a 	mov	r4,r17
100027f8:	800b883a 	mov	r5,r16
100027fc:	31b7d104 	addi	r6,r6,-8380
10002800:	39eb82c4 	addi	r7,r7,-20981
10002804:	1027883a 	mov	r19,r2
10002808:	1825883a 	mov	r18,r3
1000280c:	000548c0 	call	1000548c <__muldf3>
10002810:	8809883a 	mov	r4,r17
10002814:	800b883a 	mov	r5,r16
10002818:	880d883a 	mov	r6,r17
1000281c:	800f883a 	mov	r7,r16
10002820:	1829883a 	mov	r20,r3
10002824:	d8800815 	stw	r2,32(sp)
10002828:	000548c0 	call	1000548c <__muldf3>
1000282c:	8809883a 	mov	r4,r17
10002830:	800b883a 	mov	r5,r16
10002834:	000d883a 	mov	r6,zero
10002838:	01cff434 	movhi	r7,16336
1000283c:	182d883a 	mov	r22,r3
10002840:	d8800315 	stw	r2,12(sp)
10002844:	000548c0 	call	1000548c <__muldf3>
10002848:	01155574 	movhi	r4,21845
1000284c:	014ff574 	movhi	r5,16341
10002850:	21155544 	addi	r4,r4,21845
10002854:	29555544 	addi	r5,r5,21845
10002858:	100d883a 	mov	r6,r2
1000285c:	180f883a 	mov	r7,r3
10002860:	0005cf80 	call	10005cf8 <__subdf3>
10002864:	880d883a 	mov	r6,r17
10002868:	800f883a 	mov	r7,r16
1000286c:	1009883a 	mov	r4,r2
10002870:	180b883a 	mov	r5,r3
10002874:	000548c0 	call	1000548c <__muldf3>
10002878:	0009883a 	mov	r4,zero
1000287c:	014ff834 	movhi	r5,16352
10002880:	100d883a 	mov	r6,r2
10002884:	180f883a 	mov	r7,r3
10002888:	0005cf80 	call	10005cf8 <__subdf3>
1000288c:	da400317 	ldw	r9,12(sp)
10002890:	b00b883a 	mov	r5,r22
10002894:	100d883a 	mov	r6,r2
10002898:	4809883a 	mov	r4,r9
1000289c:	180f883a 	mov	r7,r3
100028a0:	000548c0 	call	1000548c <__muldf3>
100028a4:	01994b34 	movhi	r6,25900
100028a8:	01cffdf4 	movhi	r7,16375
100028ac:	1009883a 	mov	r4,r2
100028b0:	180b883a 	mov	r5,r3
100028b4:	31a0bf84 	addi	r6,r6,-32002
100028b8:	39c551c4 	addi	r7,r7,5447
100028bc:	000548c0 	call	1000548c <__muldf3>
100028c0:	da000817 	ldw	r8,32(sp)
100028c4:	a00b883a 	mov	r5,r20
100028c8:	100d883a 	mov	r6,r2
100028cc:	4009883a 	mov	r4,r8
100028d0:	180f883a 	mov	r7,r3
100028d4:	0005cf80 	call	10005cf8 <__subdf3>
100028d8:	9809883a 	mov	r4,r19
100028dc:	900b883a 	mov	r5,r18
100028e0:	100d883a 	mov	r6,r2
100028e4:	180f883a 	mov	r7,r3
100028e8:	1029883a 	mov	r20,r2
100028ec:	1823883a 	mov	r17,r3
100028f0:	000402c0 	call	1000402c <__adddf3>
100028f4:	0009883a 	mov	r4,zero
100028f8:	180b883a 	mov	r5,r3
100028fc:	980d883a 	mov	r6,r19
10002900:	900f883a 	mov	r7,r18
10002904:	1821883a 	mov	r16,r3
10002908:	0005cf80 	call	10005cf8 <__subdf3>
1000290c:	a009883a 	mov	r4,r20
10002910:	003e3606 	br	100021ec <__alt_data_end+0xf80021ec>
10002914:	0009883a 	mov	r4,zero
10002918:	880b883a 	mov	r5,r17
1000291c:	800d883a 	mov	r6,r16
10002920:	980f883a 	mov	r7,r19
10002924:	00048c80 	call	100048c8 <__divdf3>
10002928:	003c3706 	br	10001a08 <__alt_data_end+0xf8001a08>
1000292c:	01a20034 	movhi	r6,34816
10002930:	01df8e34 	movhi	r7,32312
10002934:	900b883a 	mov	r5,r18
10002938:	319d6704 	addi	r6,r6,30108
1000293c:	39f90f04 	addi	r7,r7,-7108
10002940:	0009883a 	mov	r4,zero
10002944:	000548c0 	call	1000548c <__muldf3>
10002948:	01a20034 	movhi	r6,34816
1000294c:	01df8e34 	movhi	r7,32312
10002950:	1009883a 	mov	r4,r2
10002954:	180b883a 	mov	r5,r3
10002958:	319d6704 	addi	r6,r6,30108
1000295c:	39f90f04 	addi	r7,r7,-7108
10002960:	000548c0 	call	1000548c <__muldf3>
10002964:	003c2806 	br	10001a08 <__alt_data_end+0xf8001a08>
10002968:	00800044 	movi	r2,1
1000296c:	e0bc5e1e 	bne	fp,r2,10001ae8 <__alt_data_end+0xf8001ae8>
10002970:	18e0003c 	xorhi	r3,r3,32768
10002974:	b005883a 	mov	r2,r22
10002978:	003c2306 	br	10001a08 <__alt_data_end+0xf8001a08>
1000297c:	303c3d1e 	bne	r6,zero,10001a74 <__alt_data_end+0xf8001a74>
10002980:	1907c83a 	sub	r3,r3,r4
10002984:	88c5d83a 	sra	r2,r17,r3
10002988:	10c6983a 	sll	r3,r2,r3
1000298c:	1c401126 	beq	r3,r17,100029d4 <__ieee754_pow+0x10bc>
10002990:	0039883a 	mov	fp,zero
10002994:	003c0006 	br	10001998 <__alt_data_end+0xf8001998>
10002998:	008ff834 	movhi	r2,16352
1000299c:	143e6216 	blt	r2,r16,10002328 <__alt_data_end+0xf8002328>
100029a0:	d8000015 	stw	zero,0(sp)
100029a4:	d8000115 	stw	zero,4(sp)
100029a8:	003e8706 	br	100023c8 <__alt_data_end+0xf80023c8>
100029ac:	04000134 	movhi	r16,4
100029b0:	03000044 	movi	r12,1
100029b4:	003cad06 	br	10001c6c <__alt_data_end+0xf8001c6c>
100029b8:	d9800117 	ldw	r6,4(sp)
100029bc:	1009883a 	mov	r4,r2
100029c0:	180b883a 	mov	r5,r3
100029c4:	0002f140 	call	10002f14 <scalbn>
100029c8:	100d883a 	mov	r6,r2
100029cc:	180f883a 	mov	r7,r3
100029d0:	003f3306 	br	100026a0 <__alt_data_end+0xf80026a0>
100029d4:	1080004c 	andi	r2,r2,1
100029d8:	02800084 	movi	r10,2
100029dc:	50b9c83a 	sub	fp,r10,r2
100029e0:	003bed06 	br	10001998 <__alt_data_end+0xf8001998>

100029e4 <__ieee754_sqrt>:
100029e4:	defffd04 	addi	sp,sp,-12
100029e8:	dc400115 	stw	r17,4(sp)
100029ec:	dc000015 	stw	r16,0(sp)
100029f0:	dfc00215 	stw	ra,8(sp)
100029f4:	28dffc2c 	andhi	r3,r5,32752
100029f8:	009ffc34 	movhi	r2,32752
100029fc:	2821883a 	mov	r16,r5
10002a00:	2023883a 	mov	r17,r4
10002a04:	18807c26 	beq	r3,r2,10002bf8 <__ieee754_sqrt+0x214>
10002a08:	2011883a 	mov	r8,r4
10002a0c:	01405f0e 	bge	zero,r5,10002b8c <__ieee754_sqrt+0x1a8>
10002a10:	2815d53a 	srai	r10,r5,20
10002a14:	50006a26 	beq	r10,zero,10002bc0 <__ieee754_sqrt+0x1dc>
10002a18:	00800434 	movhi	r2,16
10002a1c:	52bf0044 	addi	r10,r10,-1023
10002a20:	10bfffc4 	addi	r2,r2,-1
10002a24:	8084703a 	and	r2,r16,r2
10002a28:	50c0004c 	andi	r3,r10,1
10002a2c:	10800434 	orhi	r2,r2,16
10002a30:	18004f1e 	bne	r3,zero,10002b70 <__ieee754_sqrt+0x18c>
10002a34:	4006d7fa 	srli	r3,r8,31
10002a38:	5015d07a 	srai	r10,r10,1
10002a3c:	1085883a 	add	r2,r2,r2
10002a40:	10c5883a 	add	r2,r2,r3
10002a44:	01800584 	movi	r6,22
10002a48:	4207883a 	add	r3,r8,r8
10002a4c:	0013883a 	mov	r9,zero
10002a50:	000b883a 	mov	r5,zero
10002a54:	01000834 	movhi	r4,32
10002a58:	290f883a 	add	r7,r5,r4
10002a5c:	1810d7fa 	srli	r8,r3,31
10002a60:	31bfffc4 	addi	r6,r6,-1
10002a64:	11c00316 	blt	r2,r7,10002a74 <__ieee754_sqrt+0x90>
10002a68:	11c5c83a 	sub	r2,r2,r7
10002a6c:	390b883a 	add	r5,r7,r4
10002a70:	4913883a 	add	r9,r9,r4
10002a74:	1085883a 	add	r2,r2,r2
10002a78:	1205883a 	add	r2,r2,r8
10002a7c:	18c7883a 	add	r3,r3,r3
10002a80:	2008d07a 	srli	r4,r4,1
10002a84:	303ff41e 	bne	r6,zero,10002a58 <__alt_data_end+0xf8002a58>
10002a88:	01200034 	movhi	r4,32768
10002a8c:	01c00804 	movi	r7,32
10002a90:	0011883a 	mov	r8,zero
10002a94:	0017883a 	mov	r11,zero
10002a98:	201b883a 	mov	r13,r4
10002a9c:	00000806 	br	10002ac0 <__ieee754_sqrt+0xdc>
10002aa0:	11401726 	beq	r2,r5,10002b00 <__ieee754_sqrt+0x11c>
10002aa4:	180cd7fa 	srli	r6,r3,31
10002aa8:	1085883a 	add	r2,r2,r2
10002aac:	39ffffc4 	addi	r7,r7,-1
10002ab0:	1185883a 	add	r2,r2,r6
10002ab4:	18c7883a 	add	r3,r3,r3
10002ab8:	2008d07a 	srli	r4,r4,1
10002abc:	38001726 	beq	r7,zero,10002b1c <__ieee754_sqrt+0x138>
10002ac0:	590d883a 	add	r6,r11,r4
10002ac4:	28bff60e 	bge	r5,r2,10002aa0 <__alt_data_end+0xf8002aa0>
10002ac8:	3320002c 	andhi	r12,r6,32768
10002acc:	3117883a 	add	r11,r6,r4
10002ad0:	63400826 	beq	r12,r13,10002af4 <__ieee754_sqrt+0x110>
10002ad4:	2819883a 	mov	r12,r5
10002ad8:	1145c83a 	sub	r2,r2,r5
10002adc:	1980012e 	bgeu	r3,r6,10002ae4 <__ieee754_sqrt+0x100>
10002ae0:	10bfffc4 	addi	r2,r2,-1
10002ae4:	1987c83a 	sub	r3,r3,r6
10002ae8:	4111883a 	add	r8,r8,r4
10002aec:	600b883a 	mov	r5,r12
10002af0:	003fec06 	br	10002aa4 <__alt_data_end+0xf8002aa4>
10002af4:	583ff716 	blt	r11,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10002af8:	2b000044 	addi	r12,r5,1
10002afc:	003ff606 	br	10002ad8 <__alt_data_end+0xf8002ad8>
10002b00:	19801936 	bltu	r3,r6,10002b68 <__ieee754_sqrt+0x184>
10002b04:	3320002c 	andhi	r12,r6,32768
10002b08:	3117883a 	add	r11,r6,r4
10002b0c:	63404626 	beq	r12,r13,10002c28 <__ieee754_sqrt+0x244>
10002b10:	1019883a 	mov	r12,r2
10002b14:	0005883a 	mov	r2,zero
10002b18:	003ff206 	br	10002ae4 <__alt_data_end+0xf8002ae4>
10002b1c:	10c4b03a 	or	r2,r2,r3
10002b20:	10000426 	beq	r2,zero,10002b34 <__ieee754_sqrt+0x150>
10002b24:	00bfffc4 	movi	r2,-1
10002b28:	40804326 	beq	r8,r2,10002c38 <__ieee754_sqrt+0x254>
10002b2c:	4080004c 	andi	r2,r8,1
10002b30:	1211883a 	add	r8,r2,r8
10002b34:	4004d07a 	srli	r2,r8,1
10002b38:	4807d07a 	srai	r3,r9,1
10002b3c:	010ff834 	movhi	r4,16352
10002b40:	4a40004c 	andi	r9,r9,1
10002b44:	1909883a 	add	r4,r3,r4
10002b48:	48000e1e 	bne	r9,zero,10002b84 <__ieee754_sqrt+0x1a0>
10002b4c:	5006953a 	slli	r3,r10,20
10002b50:	1907883a 	add	r3,r3,r4
10002b54:	dfc00217 	ldw	ra,8(sp)
10002b58:	dc400117 	ldw	r17,4(sp)
10002b5c:	dc000017 	ldw	r16,0(sp)
10002b60:	dec00304 	addi	sp,sp,12
10002b64:	f800283a 	ret
10002b68:	100b883a 	mov	r5,r2
10002b6c:	003fcd06 	br	10002aa4 <__alt_data_end+0xf8002aa4>
10002b70:	4006d7fa 	srli	r3,r8,31
10002b74:	1085883a 	add	r2,r2,r2
10002b78:	4211883a 	add	r8,r8,r8
10002b7c:	10c5883a 	add	r2,r2,r3
10002b80:	003fac06 	br	10002a34 <__alt_data_end+0xf8002a34>
10002b84:	10a00034 	orhi	r2,r2,32768
10002b88:	003ff006 	br	10002b4c <__alt_data_end+0xf8002b4c>
10002b8c:	00a00034 	movhi	r2,32768
10002b90:	10bfffc4 	addi	r2,r2,-1
10002b94:	2884703a 	and	r2,r5,r2
10002b98:	1104b03a 	or	r2,r2,r4
10002b9c:	10001f26 	beq	r2,zero,10002c1c <__ieee754_sqrt+0x238>
10002ba0:	28002c1e 	bne	r5,zero,10002c54 <__ieee754_sqrt+0x270>
10002ba4:	0015883a 	mov	r10,zero
10002ba8:	4020d2fa 	srli	r16,r8,11
10002bac:	52bffac4 	addi	r10,r10,-21
10002bb0:	4010957a 	slli	r8,r8,21
10002bb4:	803ffc26 	beq	r16,zero,10002ba8 <__alt_data_end+0xf8002ba8>
10002bb8:	8080042c 	andhi	r2,r16,16
10002bbc:	1000211e 	bne	r2,zero,10002c44 <__ieee754_sqrt+0x260>
10002bc0:	0005883a 	mov	r2,zero
10002bc4:	8421883a 	add	r16,r16,r16
10002bc8:	80c0042c 	andhi	r3,r16,16
10002bcc:	10800044 	addi	r2,r2,1
10002bd0:	183ffc26 	beq	r3,zero,10002bc4 <__alt_data_end+0xf8002bc4>
10002bd4:	01000044 	movi	r4,1
10002bd8:	00c00804 	movi	r3,32
10002bdc:	2089c83a 	sub	r4,r4,r2
10002be0:	1887c83a 	sub	r3,r3,r2
10002be4:	40c6d83a 	srl	r3,r8,r3
10002be8:	5115883a 	add	r10,r10,r4
10002bec:	4090983a 	sll	r8,r8,r2
10002bf0:	80e0b03a 	or	r16,r16,r3
10002bf4:	003f8806 	br	10002a18 <__alt_data_end+0xf8002a18>
10002bf8:	200d883a 	mov	r6,r4
10002bfc:	280f883a 	mov	r7,r5
10002c00:	000548c0 	call	1000548c <__muldf3>
10002c04:	1009883a 	mov	r4,r2
10002c08:	180b883a 	mov	r5,r3
10002c0c:	880d883a 	mov	r6,r17
10002c10:	800f883a 	mov	r7,r16
10002c14:	000402c0 	call	1000402c <__adddf3>
10002c18:	003fce06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002c1c:	2005883a 	mov	r2,r4
10002c20:	2807883a 	mov	r3,r5
10002c24:	003fcb06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002c28:	583fb30e 	bge	r11,zero,10002af8 <__alt_data_end+0xf8002af8>
10002c2c:	0005883a 	mov	r2,zero
10002c30:	2819883a 	mov	r12,r5
10002c34:	003fab06 	br	10002ae4 <__alt_data_end+0xf8002ae4>
10002c38:	4a400044 	addi	r9,r9,1
10002c3c:	0005883a 	mov	r2,zero
10002c40:	003fbd06 	br	10002b38 <__alt_data_end+0xf8002b38>
10002c44:	00c00804 	movi	r3,32
10002c48:	01000044 	movi	r4,1
10002c4c:	0005883a 	mov	r2,zero
10002c50:	003fe406 	br	10002be4 <__alt_data_end+0xf8002be4>
10002c54:	200d883a 	mov	r6,r4
10002c58:	280f883a 	mov	r7,r5
10002c5c:	0005cf80 	call	10005cf8 <__subdf3>
10002c60:	1009883a 	mov	r4,r2
10002c64:	180b883a 	mov	r5,r3
10002c68:	100d883a 	mov	r6,r2
10002c6c:	180f883a 	mov	r7,r3
10002c70:	00048c80 	call	100048c8 <__divdf3>
10002c74:	003fb706 	br	10002b54 <__alt_data_end+0xf8002b54>

10002c78 <fabs>:
10002c78:	00e00034 	movhi	r3,32768
10002c7c:	18ffffc4 	addi	r3,r3,-1
10002c80:	2005883a 	mov	r2,r4
10002c84:	28c6703a 	and	r3,r5,r3
10002c88:	f800283a 	ret

10002c8c <finite>:
10002c8c:	00a00034 	movhi	r2,32768
10002c90:	10bfffc4 	addi	r2,r2,-1
10002c94:	288a703a 	and	r5,r5,r2
10002c98:	00e00434 	movhi	r3,32784
10002c9c:	28c5883a 	add	r2,r5,r3
10002ca0:	1004d7fa 	srli	r2,r2,31
10002ca4:	f800283a 	ret

10002ca8 <__fpclassifyd>:
10002ca8:	00a00034 	movhi	r2,32768
10002cac:	10bfffc4 	addi	r2,r2,-1
10002cb0:	2884703a 	and	r2,r5,r2
10002cb4:	10000726 	beq	r2,zero,10002cd4 <__fpclassifyd+0x2c>
10002cb8:	00fffc34 	movhi	r3,65520
10002cbc:	019ff834 	movhi	r6,32736
10002cc0:	28c7883a 	add	r3,r5,r3
10002cc4:	31bfffc4 	addi	r6,r6,-1
10002cc8:	30c00536 	bltu	r6,r3,10002ce0 <__fpclassifyd+0x38>
10002ccc:	00800104 	movi	r2,4
10002cd0:	f800283a 	ret
10002cd4:	2000021e 	bne	r4,zero,10002ce0 <__fpclassifyd+0x38>
10002cd8:	00800084 	movi	r2,2
10002cdc:	f800283a 	ret
10002ce0:	00dffc34 	movhi	r3,32752
10002ce4:	019ff834 	movhi	r6,32736
10002ce8:	28cb883a 	add	r5,r5,r3
10002cec:	31bfffc4 	addi	r6,r6,-1
10002cf0:	317ff62e 	bgeu	r6,r5,10002ccc <__alt_data_end+0xf8002ccc>
10002cf4:	01400434 	movhi	r5,16
10002cf8:	297fffc4 	addi	r5,r5,-1
10002cfc:	28800236 	bltu	r5,r2,10002d08 <__fpclassifyd+0x60>
10002d00:	008000c4 	movi	r2,3
10002d04:	f800283a 	ret
10002d08:	10c00226 	beq	r2,r3,10002d14 <__fpclassifyd+0x6c>
10002d0c:	0005883a 	mov	r2,zero
10002d10:	f800283a 	ret
10002d14:	2005003a 	cmpeq	r2,r4,zero
10002d18:	f800283a 	ret

10002d1c <matherr>:
10002d1c:	0005883a 	mov	r2,zero
10002d20:	f800283a 	ret

10002d24 <nan>:
10002d24:	0005883a 	mov	r2,zero
10002d28:	00dffe34 	movhi	r3,32760
10002d2c:	f800283a 	ret

10002d30 <rint>:
10002d30:	2813d53a 	srai	r9,r5,20
10002d34:	defff904 	addi	sp,sp,-28
10002d38:	dc400315 	stw	r17,12(sp)
10002d3c:	4a41ffcc 	andi	r9,r9,2047
10002d40:	dfc00615 	stw	ra,24(sp)
10002d44:	dcc00515 	stw	r19,20(sp)
10002d48:	dc800415 	stw	r18,16(sp)
10002d4c:	dc000215 	stw	r16,8(sp)
10002d50:	02c004c4 	movi	r11,19
10002d54:	4abf0044 	addi	r10,r9,-1023
10002d58:	2811883a 	mov	r8,r5
10002d5c:	2005883a 	mov	r2,r4
10002d60:	280f883a 	mov	r7,r5
10002d64:	200d883a 	mov	r6,r4
10002d68:	2822d7fa 	srli	r17,r5,31
10002d6c:	5a801316 	blt	r11,r10,10002dbc <rint+0x8c>
10002d70:	50003c16 	blt	r10,zero,10002e64 <rint+0x134>
10002d74:	00c00434 	movhi	r3,16
10002d78:	18ffffc4 	addi	r3,r3,-1
10002d7c:	1a87d83a 	sra	r3,r3,r10
10002d80:	1948703a 	and	r4,r3,r5
10002d84:	2088b03a 	or	r4,r4,r2
10002d88:	20001026 	beq	r4,zero,10002dcc <rint+0x9c>
10002d8c:	1804d07a 	srli	r2,r3,1
10002d90:	1146703a 	and	r3,r2,r5
10002d94:	198cb03a 	or	r6,r3,r6
10002d98:	30005526 	beq	r6,zero,10002ef0 <rint+0x1c0>
10002d9c:	52c05b26 	beq	r10,r11,10002f0c <rint+0x1dc>
10002da0:	000d883a 	mov	r6,zero
10002da4:	00c00134 	movhi	r3,4
10002da8:	1a87d83a 	sra	r3,r3,r10
10002dac:	0084303a 	nor	r2,zero,r2
10002db0:	1210703a 	and	r8,r2,r8
10002db4:	40ceb03a 	or	r7,r8,r3
10002db8:	00001906 	br	10002e20 <rint+0xf0>
10002dbc:	00c00cc4 	movi	r3,51
10002dc0:	1a800a0e 	bge	r3,r10,10002dec <rint+0xbc>
10002dc4:	00c10004 	movi	r3,1024
10002dc8:	50c04d26 	beq	r10,r3,10002f00 <rint+0x1d0>
10002dcc:	3807883a 	mov	r3,r7
10002dd0:	dfc00617 	ldw	ra,24(sp)
10002dd4:	dcc00517 	ldw	r19,20(sp)
10002dd8:	dc800417 	ldw	r18,16(sp)
10002ddc:	dc400317 	ldw	r17,12(sp)
10002de0:	dc000217 	ldw	r16,8(sp)
10002de4:	dec00704 	addi	sp,sp,28
10002de8:	f800283a 	ret
10002dec:	4a7efb44 	addi	r9,r9,-1043
10002df0:	00ffffc4 	movi	r3,-1
10002df4:	1a46d83a 	srl	r3,r3,r9
10002df8:	1908703a 	and	r4,r3,r4
10002dfc:	20003e26 	beq	r4,zero,10002ef8 <rint+0x1c8>
10002e00:	1806d07a 	srli	r3,r3,1
10002e04:	1884703a 	and	r2,r3,r2
10002e08:	10000526 	beq	r2,zero,10002e20 <rint+0xf0>
10002e0c:	00900034 	movhi	r2,16384
10002e10:	1253d83a 	sra	r9,r2,r9
10002e14:	00c6303a 	nor	r3,zero,r3
10002e18:	198c703a 	and	r6,r3,r6
10002e1c:	324cb03a 	or	r6,r6,r9
10002e20:	882290fa 	slli	r17,r17,3
10002e24:	00c40074 	movhi	r3,4097
10002e28:	18e2d404 	addi	r3,r3,-29872
10002e2c:	1c63883a 	add	r17,r3,r17
10002e30:	8c800017 	ldw	r18,0(r17)
10002e34:	8c000117 	ldw	r16,4(r17)
10002e38:	9009883a 	mov	r4,r18
10002e3c:	800b883a 	mov	r5,r16
10002e40:	000402c0 	call	1000402c <__adddf3>
10002e44:	d8800015 	stw	r2,0(sp)
10002e48:	d8c00115 	stw	r3,4(sp)
10002e4c:	d9000017 	ldw	r4,0(sp)
10002e50:	d9400117 	ldw	r5,4(sp)
10002e54:	900d883a 	mov	r6,r18
10002e58:	800f883a 	mov	r7,r16
10002e5c:	0005cf80 	call	10005cf8 <__subdf3>
10002e60:	003fdb06 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10002e64:	04200034 	movhi	r16,32768
10002e68:	843fffc4 	addi	r16,r16,-1
10002e6c:	2c06703a 	and	r3,r5,r16
10002e70:	1906b03a 	or	r3,r3,r4
10002e74:	18002026 	beq	r3,zero,10002ef8 <rint+0x1c8>
10002e78:	00c00434 	movhi	r3,16
10002e7c:	18ffffc4 	addi	r3,r3,-1
10002e80:	28c6703a 	and	r3,r5,r3
10002e84:	1886b03a 	or	r3,r3,r2
10002e88:	880890fa 	slli	r4,r17,3
10002e8c:	00d3c83a 	sub	r9,zero,r3
10002e90:	48d2b03a 	or	r9,r9,r3
10002e94:	00c40074 	movhi	r3,4097
10002e98:	18e2d404 	addi	r3,r3,-29872
10002e9c:	1907883a 	add	r3,r3,r4
10002ea0:	4812d33a 	srli	r9,r9,12
10002ea4:	1cc00017 	ldw	r19,0(r3)
10002ea8:	1c800117 	ldw	r18,4(r3)
10002eac:	4a40022c 	andhi	r9,r9,8
10002eb0:	29ffffac 	andhi	r7,r5,65534
10002eb4:	49ceb03a 	or	r7,r9,r7
10002eb8:	9809883a 	mov	r4,r19
10002ebc:	900b883a 	mov	r5,r18
10002ec0:	000402c0 	call	1000402c <__adddf3>
10002ec4:	d8800015 	stw	r2,0(sp)
10002ec8:	d8c00115 	stw	r3,4(sp)
10002ecc:	d9000017 	ldw	r4,0(sp)
10002ed0:	d9400117 	ldw	r5,4(sp)
10002ed4:	980d883a 	mov	r6,r19
10002ed8:	900f883a 	mov	r7,r18
10002edc:	0005cf80 	call	10005cf8 <__subdf3>
10002ee0:	881097fa 	slli	r8,r17,31
10002ee4:	1c06703a 	and	r3,r3,r16
10002ee8:	40c6b03a 	or	r3,r8,r3
10002eec:	003fb806 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10002ef0:	000d883a 	mov	r6,zero
10002ef4:	003fca06 	br	10002e20 <__alt_data_end+0xf8002e20>
10002ef8:	4007883a 	mov	r3,r8
10002efc:	003fb406 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10002f00:	200d883a 	mov	r6,r4
10002f04:	000402c0 	call	1000402c <__adddf3>
10002f08:	003fb106 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10002f0c:	01a00034 	movhi	r6,32768
10002f10:	003fa406 	br	10002da4 <__alt_data_end+0xf8002da4>

10002f14 <scalbn>:
10002f14:	2a1ffc2c 	andhi	r8,r5,32752
10002f18:	4011d53a 	srai	r8,r8,20
10002f1c:	defffe04 	addi	sp,sp,-8
10002f20:	dc000015 	stw	r16,0(sp)
10002f24:	dfc00115 	stw	ra,4(sp)
10002f28:	280f883a 	mov	r7,r5
10002f2c:	2015883a 	mov	r10,r4
10002f30:	3021883a 	mov	r16,r6
10002f34:	4000251e 	bne	r8,zero,10002fcc <scalbn+0xb8>
10002f38:	00a00034 	movhi	r2,32768
10002f3c:	10bfffc4 	addi	r2,r2,-1
10002f40:	2884703a 	and	r2,r5,r2
10002f44:	1104b03a 	or	r2,r2,r4
10002f48:	10003126 	beq	r2,zero,10003010 <scalbn+0xfc>
10002f4c:	01d0d434 	movhi	r7,17232
10002f50:	000d883a 	mov	r6,zero
10002f54:	000548c0 	call	1000548c <__muldf3>
10002f58:	013ffff4 	movhi	r4,65535
10002f5c:	210f2c04 	addi	r4,r4,15536
10002f60:	1015883a 	mov	r10,r2
10002f64:	180f883a 	mov	r7,r3
10002f68:	81002f16 	blt	r16,r4,10003028 <scalbn+0x114>
10002f6c:	1a5ffc2c 	andhi	r9,r3,32752
10002f70:	4813d53a 	srai	r9,r9,20
10002f74:	0081ff84 	movi	r2,2046
10002f78:	180d883a 	mov	r6,r3
10002f7c:	4a3ff284 	addi	r8,r9,-54
10002f80:	4411883a 	add	r8,r8,r16
10002f84:	1200170e 	bge	r2,r8,10002fe4 <scalbn+0xd0>
10002f88:	01220034 	movhi	r4,34816
10002f8c:	015f8e34 	movhi	r5,32312
10002f90:	500d883a 	mov	r6,r10
10002f94:	211d6704 	addi	r4,r4,30108
10002f98:	29790f04 	addi	r5,r5,-7108
10002f9c:	00030e00 	call	100030e0 <copysign>
10002fa0:	01a20034 	movhi	r6,34816
10002fa4:	01df8e34 	movhi	r7,32312
10002fa8:	1009883a 	mov	r4,r2
10002fac:	180b883a 	mov	r5,r3
10002fb0:	319d6704 	addi	r6,r6,30108
10002fb4:	39f90f04 	addi	r7,r7,-7108
10002fb8:	000548c0 	call	1000548c <__muldf3>
10002fbc:	dfc00117 	ldw	ra,4(sp)
10002fc0:	dc000017 	ldw	r16,0(sp)
10002fc4:	dec00204 	addi	sp,sp,8
10002fc8:	f800283a 	ret
10002fcc:	0081ffc4 	movi	r2,2047
10002fd0:	280d883a 	mov	r6,r5
10002fd4:	40803126 	beq	r8,r2,1000309c <scalbn+0x188>
10002fd8:	4411883a 	add	r8,r8,r16
10002fdc:	0081ff84 	movi	r2,2046
10002fe0:	123fe916 	blt	r2,r8,10002f88 <__alt_data_end+0xf8002f88>
10002fe4:	02001b0e 	bge	zero,r8,10003054 <scalbn+0x140>
10002fe8:	4010953a 	slli	r8,r8,20
10002fec:	00e00434 	movhi	r3,32784
10002ff0:	18ffffc4 	addi	r3,r3,-1
10002ff4:	30ce703a 	and	r7,r6,r3
10002ff8:	5005883a 	mov	r2,r10
10002ffc:	41c6b03a 	or	r3,r8,r7
10003000:	dfc00117 	ldw	ra,4(sp)
10003004:	dc000017 	ldw	r16,0(sp)
10003008:	dec00204 	addi	sp,sp,8
1000300c:	f800283a 	ret
10003010:	2005883a 	mov	r2,r4
10003014:	2807883a 	mov	r3,r5
10003018:	dfc00117 	ldw	ra,4(sp)
1000301c:	dc000017 	ldw	r16,0(sp)
10003020:	dec00204 	addi	sp,sp,8
10003024:	f800283a 	ret
10003028:	01b0be74 	movhi	r6,49913
1000302c:	01c06974 	movhi	r7,421
10003030:	31bcd644 	addi	r6,r6,-3239
10003034:	39db87c4 	addi	r7,r7,28191
10003038:	1009883a 	mov	r4,r2
1000303c:	180b883a 	mov	r5,r3
10003040:	000548c0 	call	1000548c <__muldf3>
10003044:	dfc00117 	ldw	ra,4(sp)
10003048:	dc000017 	ldw	r16,0(sp)
1000304c:	dec00204 	addi	sp,sp,8
10003050:	f800283a 	ret
10003054:	00bff2c4 	movi	r2,-53
10003058:	4080160e 	bge	r8,r2,100030b4 <scalbn+0x1a0>
1000305c:	00b0d414 	movui	r2,50000
10003060:	143fc916 	blt	r2,r16,10002f88 <__alt_data_end+0xf8002f88>
10003064:	0130be74 	movhi	r4,49913
10003068:	01406974 	movhi	r5,421
1000306c:	500d883a 	mov	r6,r10
10003070:	213cd644 	addi	r4,r4,-3239
10003074:	295b87c4 	addi	r5,r5,28191
10003078:	00030e00 	call	100030e0 <copysign>
1000307c:	01b0be74 	movhi	r6,49913
10003080:	01c06974 	movhi	r7,421
10003084:	1009883a 	mov	r4,r2
10003088:	180b883a 	mov	r5,r3
1000308c:	31bcd644 	addi	r6,r6,-3239
10003090:	39db87c4 	addi	r7,r7,28191
10003094:	000548c0 	call	1000548c <__muldf3>
10003098:	003fd906 	br	10003000 <__alt_data_end+0xf8003000>
1000309c:	200d883a 	mov	r6,r4
100030a0:	000402c0 	call	1000402c <__adddf3>
100030a4:	dfc00117 	ldw	ra,4(sp)
100030a8:	dc000017 	ldw	r16,0(sp)
100030ac:	dec00204 	addi	sp,sp,8
100030b0:	f800283a 	ret
100030b4:	42000d84 	addi	r8,r8,54
100030b8:	4012953a 	slli	r9,r8,20
100030bc:	01e00434 	movhi	r7,32784
100030c0:	39ffffc4 	addi	r7,r7,-1
100030c4:	31ca703a 	and	r5,r6,r7
100030c8:	5009883a 	mov	r4,r10
100030cc:	494ab03a 	or	r5,r9,r5
100030d0:	000d883a 	mov	r6,zero
100030d4:	01cf2434 	movhi	r7,15504
100030d8:	000548c0 	call	1000548c <__muldf3>
100030dc:	003fc806 	br	10003000 <__alt_data_end+0xf8003000>

100030e0 <copysign>:
100030e0:	2005883a 	mov	r2,r4
100030e4:	01200034 	movhi	r4,32768
100030e8:	213fffc4 	addi	r4,r4,-1
100030ec:	38e0002c 	andhi	r3,r7,32768
100030f0:	290a703a 	and	r5,r5,r4
100030f4:	1946b03a 	or	r3,r3,r5
100030f8:	f800283a 	ret

100030fc <__muldi3>:
100030fc:	defff604 	addi	sp,sp,-40
10003100:	dd800615 	stw	r22,24(sp)
10003104:	dd400515 	stw	r21,20(sp)
10003108:	25bfffcc 	andi	r22,r4,65535
1000310c:	357fffcc 	andi	r21,r6,65535
10003110:	dc400115 	stw	r17,4(sp)
10003114:	2022d43a 	srli	r17,r4,16
10003118:	dcc00315 	stw	r19,12(sp)
1000311c:	dc800215 	stw	r18,8(sp)
10003120:	2027883a 	mov	r19,r4
10003124:	2825883a 	mov	r18,r5
10003128:	a809883a 	mov	r4,r21
1000312c:	b00b883a 	mov	r5,r22
10003130:	dfc00915 	stw	ra,36(sp)
10003134:	df000815 	stw	fp,32(sp)
10003138:	ddc00715 	stw	r23,28(sp)
1000313c:	3839883a 	mov	fp,r7
10003140:	302ed43a 	srli	r23,r6,16
10003144:	dd000415 	stw	r20,16(sp)
10003148:	dc000015 	stw	r16,0(sp)
1000314c:	3029883a 	mov	r20,r6
10003150:	00040040 	call	10004004 <__mulsi3>
10003154:	a809883a 	mov	r4,r21
10003158:	880b883a 	mov	r5,r17
1000315c:	1021883a 	mov	r16,r2
10003160:	00040040 	call	10004004 <__mulsi3>
10003164:	880b883a 	mov	r5,r17
10003168:	b809883a 	mov	r4,r23
1000316c:	102b883a 	mov	r21,r2
10003170:	00040040 	call	10004004 <__mulsi3>
10003174:	b809883a 	mov	r4,r23
10003178:	b00b883a 	mov	r5,r22
1000317c:	1023883a 	mov	r17,r2
10003180:	00040040 	call	10004004 <__mulsi3>
10003184:	8012d43a 	srli	r9,r16,16
10003188:	a885883a 	add	r2,r21,r2
1000318c:	1251883a 	add	r8,r2,r9
10003190:	4540022e 	bgeu	r8,r21,1000319c <__muldi3+0xa0>
10003194:	00800074 	movhi	r2,1
10003198:	88a3883a 	add	r17,r17,r2
1000319c:	4006d43a 	srli	r3,r8,16
100031a0:	4010943a 	slli	r8,r8,16
100031a4:	9809883a 	mov	r4,r19
100031a8:	e00b883a 	mov	r5,fp
100031ac:	843fffcc 	andi	r16,r16,65535
100031b0:	88e3883a 	add	r17,r17,r3
100031b4:	4421883a 	add	r16,r8,r16
100031b8:	00040040 	call	10004004 <__mulsi3>
100031bc:	a009883a 	mov	r4,r20
100031c0:	900b883a 	mov	r5,r18
100031c4:	1027883a 	mov	r19,r2
100031c8:	00040040 	call	10004004 <__mulsi3>
100031cc:	9885883a 	add	r2,r19,r2
100031d0:	1447883a 	add	r3,r2,r17
100031d4:	8005883a 	mov	r2,r16
100031d8:	dfc00917 	ldw	ra,36(sp)
100031dc:	df000817 	ldw	fp,32(sp)
100031e0:	ddc00717 	ldw	r23,28(sp)
100031e4:	dd800617 	ldw	r22,24(sp)
100031e8:	dd400517 	ldw	r21,20(sp)
100031ec:	dd000417 	ldw	r20,16(sp)
100031f0:	dcc00317 	ldw	r19,12(sp)
100031f4:	dc800217 	ldw	r18,8(sp)
100031f8:	dc400117 	ldw	r17,4(sp)
100031fc:	dc000017 	ldw	r16,0(sp)
10003200:	dec00a04 	addi	sp,sp,40
10003204:	f800283a 	ret

10003208 <__fixunsdfsi>:
10003208:	defffd04 	addi	sp,sp,-12
1000320c:	000d883a 	mov	r6,zero
10003210:	01d07834 	movhi	r7,16864
10003214:	dc400115 	stw	r17,4(sp)
10003218:	dc000015 	stw	r16,0(sp)
1000321c:	dfc00215 	stw	ra,8(sp)
10003220:	2023883a 	mov	r17,r4
10003224:	2821883a 	mov	r16,r5
10003228:	00052cc0 	call	100052cc <__gedf2>
1000322c:	1000080e 	bge	r2,zero,10003250 <__fixunsdfsi+0x48>
10003230:	8809883a 	mov	r4,r17
10003234:	800b883a 	mov	r5,r16
10003238:	00065c80 	call	100065c8 <__fixdfsi>
1000323c:	dfc00217 	ldw	ra,8(sp)
10003240:	dc400117 	ldw	r17,4(sp)
10003244:	dc000017 	ldw	r16,0(sp)
10003248:	dec00304 	addi	sp,sp,12
1000324c:	f800283a 	ret
10003250:	000d883a 	mov	r6,zero
10003254:	01d07834 	movhi	r7,16864
10003258:	8809883a 	mov	r4,r17
1000325c:	800b883a 	mov	r5,r16
10003260:	0005cf80 	call	10005cf8 <__subdf3>
10003264:	180b883a 	mov	r5,r3
10003268:	1009883a 	mov	r4,r2
1000326c:	00065c80 	call	100065c8 <__fixdfsi>
10003270:	00e00034 	movhi	r3,32768
10003274:	10c5883a 	add	r2,r2,r3
10003278:	003ff006 	br	1000323c <__alt_data_end+0xf800323c>

1000327c <__udivdi3>:
1000327c:	defff504 	addi	sp,sp,-44
10003280:	dcc00415 	stw	r19,16(sp)
10003284:	dc000115 	stw	r16,4(sp)
10003288:	dfc00a15 	stw	ra,40(sp)
1000328c:	df000915 	stw	fp,36(sp)
10003290:	ddc00815 	stw	r23,32(sp)
10003294:	dd800715 	stw	r22,28(sp)
10003298:	dd400615 	stw	r21,24(sp)
1000329c:	dd000515 	stw	r20,20(sp)
100032a0:	dc800315 	stw	r18,12(sp)
100032a4:	dc400215 	stw	r17,8(sp)
100032a8:	2027883a 	mov	r19,r4
100032ac:	2821883a 	mov	r16,r5
100032b0:	3800471e 	bne	r7,zero,100033d0 <__udivdi3+0x154>
100032b4:	3025883a 	mov	r18,r6
100032b8:	2023883a 	mov	r17,r4
100032bc:	2980592e 	bgeu	r5,r6,10003424 <__udivdi3+0x1a8>
100032c0:	00bfffd4 	movui	r2,65535
100032c4:	2829883a 	mov	r20,r5
100032c8:	1180b236 	bltu	r2,r6,10003594 <__udivdi3+0x318>
100032cc:	00803fc4 	movi	r2,255
100032d0:	1181622e 	bgeu	r2,r6,1000385c <__udivdi3+0x5e0>
100032d4:	00800204 	movi	r2,8
100032d8:	1007883a 	mov	r3,r2
100032dc:	3084d83a 	srl	r2,r6,r2
100032e0:	01040074 	movhi	r4,4097
100032e4:	2122d804 	addi	r4,r4,-29856
100032e8:	2085883a 	add	r2,r4,r2
100032ec:	11000003 	ldbu	r4,0(r2)
100032f0:	20c9883a 	add	r4,r4,r3
100032f4:	00c00804 	movi	r3,32
100032f8:	1907c83a 	sub	r3,r3,r4
100032fc:	18000526 	beq	r3,zero,10003314 <__udivdi3+0x98>
10003300:	80e0983a 	sll	r16,r16,r3
10003304:	9908d83a 	srl	r4,r19,r4
10003308:	30e4983a 	sll	r18,r6,r3
1000330c:	98e2983a 	sll	r17,r19,r3
10003310:	8128b03a 	or	r20,r16,r4
10003314:	902ad43a 	srli	r21,r18,16
10003318:	a009883a 	mov	r4,r20
1000331c:	95bfffcc 	andi	r22,r18,65535
10003320:	a80b883a 	mov	r5,r21
10003324:	0003ffc0 	call	10003ffc <__umodsi3>
10003328:	a009883a 	mov	r4,r20
1000332c:	a80b883a 	mov	r5,r21
10003330:	102f883a 	mov	r23,r2
10003334:	0003ff40 	call	10003ff4 <__udivsi3>
10003338:	1009883a 	mov	r4,r2
1000333c:	b00b883a 	mov	r5,r22
10003340:	1021883a 	mov	r16,r2
10003344:	00040040 	call	10004004 <__mulsi3>
10003348:	b82e943a 	slli	r23,r23,16
1000334c:	8808d43a 	srli	r4,r17,16
10003350:	b906b03a 	or	r3,r23,r4
10003354:	1880052e 	bgeu	r3,r2,1000336c <__udivdi3+0xf0>
10003358:	1c87883a 	add	r3,r3,r18
1000335c:	813fffc4 	addi	r4,r16,-1
10003360:	1c800136 	bltu	r3,r18,10003368 <__udivdi3+0xec>
10003364:	18815236 	bltu	r3,r2,100038b0 <__udivdi3+0x634>
10003368:	2021883a 	mov	r16,r4
1000336c:	18a7c83a 	sub	r19,r3,r2
10003370:	9809883a 	mov	r4,r19
10003374:	a80b883a 	mov	r5,r21
10003378:	0003ffc0 	call	10003ffc <__umodsi3>
1000337c:	1029883a 	mov	r20,r2
10003380:	9809883a 	mov	r4,r19
10003384:	a80b883a 	mov	r5,r21
10003388:	a028943a 	slli	r20,r20,16
1000338c:	0003ff40 	call	10003ff4 <__udivsi3>
10003390:	1009883a 	mov	r4,r2
10003394:	b00b883a 	mov	r5,r22
10003398:	8c7fffcc 	andi	r17,r17,65535
1000339c:	1027883a 	mov	r19,r2
100033a0:	a462b03a 	or	r17,r20,r17
100033a4:	00040040 	call	10004004 <__mulsi3>
100033a8:	8880052e 	bgeu	r17,r2,100033c0 <__udivdi3+0x144>
100033ac:	8ca3883a 	add	r17,r17,r18
100033b0:	98ffffc4 	addi	r3,r19,-1
100033b4:	8c811036 	bltu	r17,r18,100037f8 <__udivdi3+0x57c>
100033b8:	88810f2e 	bgeu	r17,r2,100037f8 <__udivdi3+0x57c>
100033bc:	9cffff84 	addi	r19,r19,-2
100033c0:	8020943a 	slli	r16,r16,16
100033c4:	0007883a 	mov	r3,zero
100033c8:	9c04b03a 	or	r2,r19,r16
100033cc:	00006006 	br	10003550 <__udivdi3+0x2d4>
100033d0:	29c05d36 	bltu	r5,r7,10003548 <__udivdi3+0x2cc>
100033d4:	00bfffd4 	movui	r2,65535
100033d8:	11c0692e 	bgeu	r2,r7,10003580 <__udivdi3+0x304>
100033dc:	00804034 	movhi	r2,256
100033e0:	10bfffc4 	addi	r2,r2,-1
100033e4:	11c10e2e 	bgeu	r2,r7,10003820 <__udivdi3+0x5a4>
100033e8:	01400604 	movi	r5,24
100033ec:	2811883a 	mov	r8,r5
100033f0:	394ad83a 	srl	r5,r7,r5
100033f4:	00840074 	movhi	r2,4097
100033f8:	10a2d804 	addi	r2,r2,-29856
100033fc:	114b883a 	add	r5,r2,r5
10003400:	29400003 	ldbu	r5,0(r5)
10003404:	00c00804 	movi	r3,32
10003408:	2a0b883a 	add	r5,r5,r8
1000340c:	196fc83a 	sub	r23,r3,r5
10003410:	b8006b1e 	bne	r23,zero,100035c0 <__udivdi3+0x344>
10003414:	3c011436 	bltu	r7,r16,10003868 <__udivdi3+0x5ec>
10003418:	9985403a 	cmpgeu	r2,r19,r6
1000341c:	0007883a 	mov	r3,zero
10003420:	00004b06 	br	10003550 <__udivdi3+0x2d4>
10003424:	3000041e 	bne	r6,zero,10003438 <__udivdi3+0x1bc>
10003428:	01000044 	movi	r4,1
1000342c:	000b883a 	mov	r5,zero
10003430:	0003ff40 	call	10003ff4 <__udivsi3>
10003434:	1025883a 	mov	r18,r2
10003438:	00bfffd4 	movui	r2,65535
1000343c:	14805b2e 	bgeu	r2,r18,100035ac <__udivdi3+0x330>
10003440:	00804034 	movhi	r2,256
10003444:	10bfffc4 	addi	r2,r2,-1
10003448:	1480fe2e 	bgeu	r2,r18,10003844 <__udivdi3+0x5c8>
1000344c:	00800604 	movi	r2,24
10003450:	1007883a 	mov	r3,r2
10003454:	9084d83a 	srl	r2,r18,r2
10003458:	01040074 	movhi	r4,4097
1000345c:	2122d804 	addi	r4,r4,-29856
10003460:	2085883a 	add	r2,r4,r2
10003464:	11800003 	ldbu	r6,0(r2)
10003468:	01c00804 	movi	r7,32
1000346c:	30c7883a 	add	r3,r6,r3
10003470:	38cfc83a 	sub	r7,r7,r3
10003474:	3800a71e 	bne	r7,zero,10003714 <__udivdi3+0x498>
10003478:	9028d43a 	srli	r20,r18,16
1000347c:	84a1c83a 	sub	r16,r16,r18
10003480:	957fffcc 	andi	r21,r18,65535
10003484:	00c00044 	movi	r3,1
10003488:	8009883a 	mov	r4,r16
1000348c:	a00b883a 	mov	r5,r20
10003490:	d8c00015 	stw	r3,0(sp)
10003494:	0003ffc0 	call	10003ffc <__umodsi3>
10003498:	8009883a 	mov	r4,r16
1000349c:	a00b883a 	mov	r5,r20
100034a0:	102d883a 	mov	r22,r2
100034a4:	0003ff40 	call	10003ff4 <__udivsi3>
100034a8:	1009883a 	mov	r4,r2
100034ac:	a80b883a 	mov	r5,r21
100034b0:	1021883a 	mov	r16,r2
100034b4:	00040040 	call	10004004 <__mulsi3>
100034b8:	b02c943a 	slli	r22,r22,16
100034bc:	880ed43a 	srli	r7,r17,16
100034c0:	d8c00017 	ldw	r3,0(sp)
100034c4:	b1ccb03a 	or	r6,r22,r7
100034c8:	3080052e 	bgeu	r6,r2,100034e0 <__udivdi3+0x264>
100034cc:	348d883a 	add	r6,r6,r18
100034d0:	813fffc4 	addi	r4,r16,-1
100034d4:	34800136 	bltu	r6,r18,100034dc <__udivdi3+0x260>
100034d8:	3080f236 	bltu	r6,r2,100038a4 <__udivdi3+0x628>
100034dc:	2021883a 	mov	r16,r4
100034e0:	30a7c83a 	sub	r19,r6,r2
100034e4:	9809883a 	mov	r4,r19
100034e8:	a00b883a 	mov	r5,r20
100034ec:	d8c00015 	stw	r3,0(sp)
100034f0:	0003ffc0 	call	10003ffc <__umodsi3>
100034f4:	102d883a 	mov	r22,r2
100034f8:	9809883a 	mov	r4,r19
100034fc:	a00b883a 	mov	r5,r20
10003500:	b02c943a 	slli	r22,r22,16
10003504:	0003ff40 	call	10003ff4 <__udivsi3>
10003508:	1009883a 	mov	r4,r2
1000350c:	a80b883a 	mov	r5,r21
10003510:	8c7fffcc 	andi	r17,r17,65535
10003514:	1027883a 	mov	r19,r2
10003518:	b462b03a 	or	r17,r22,r17
1000351c:	00040040 	call	10004004 <__mulsi3>
10003520:	d8c00017 	ldw	r3,0(sp)
10003524:	8880052e 	bgeu	r17,r2,1000353c <__udivdi3+0x2c0>
10003528:	8ca3883a 	add	r17,r17,r18
1000352c:	993fffc4 	addi	r4,r19,-1
10003530:	8c80af36 	bltu	r17,r18,100037f0 <__udivdi3+0x574>
10003534:	8880ae2e 	bgeu	r17,r2,100037f0 <__udivdi3+0x574>
10003538:	9cffff84 	addi	r19,r19,-2
1000353c:	8020943a 	slli	r16,r16,16
10003540:	9c04b03a 	or	r2,r19,r16
10003544:	00000206 	br	10003550 <__udivdi3+0x2d4>
10003548:	0007883a 	mov	r3,zero
1000354c:	0005883a 	mov	r2,zero
10003550:	dfc00a17 	ldw	ra,40(sp)
10003554:	df000917 	ldw	fp,36(sp)
10003558:	ddc00817 	ldw	r23,32(sp)
1000355c:	dd800717 	ldw	r22,28(sp)
10003560:	dd400617 	ldw	r21,24(sp)
10003564:	dd000517 	ldw	r20,20(sp)
10003568:	dcc00417 	ldw	r19,16(sp)
1000356c:	dc800317 	ldw	r18,12(sp)
10003570:	dc400217 	ldw	r17,8(sp)
10003574:	dc000117 	ldw	r16,4(sp)
10003578:	dec00b04 	addi	sp,sp,44
1000357c:	f800283a 	ret
10003580:	00803fc4 	movi	r2,255
10003584:	11c0a92e 	bgeu	r2,r7,1000382c <__udivdi3+0x5b0>
10003588:	01400204 	movi	r5,8
1000358c:	2811883a 	mov	r8,r5
10003590:	003f9706 	br	100033f0 <__alt_data_end+0xf80033f0>
10003594:	00804034 	movhi	r2,256
10003598:	10bfffc4 	addi	r2,r2,-1
1000359c:	1180a62e 	bgeu	r2,r6,10003838 <__udivdi3+0x5bc>
100035a0:	00800604 	movi	r2,24
100035a4:	1007883a 	mov	r3,r2
100035a8:	003f4c06 	br	100032dc <__alt_data_end+0xf80032dc>
100035ac:	00803fc4 	movi	r2,255
100035b0:	1480a72e 	bgeu	r2,r18,10003850 <__udivdi3+0x5d4>
100035b4:	00800204 	movi	r2,8
100035b8:	1007883a 	mov	r3,r2
100035bc:	003fa506 	br	10003454 <__alt_data_end+0xf8003454>
100035c0:	3178d83a 	srl	fp,r6,r5
100035c4:	3dce983a 	sll	r7,r7,r23
100035c8:	8168d83a 	srl	r20,r16,r5
100035cc:	9950d83a 	srl	r8,r19,r5
100035d0:	3f38b03a 	or	fp,r7,fp
100035d4:	e024d43a 	srli	r18,fp,16
100035d8:	85e0983a 	sll	r16,r16,r23
100035dc:	a009883a 	mov	r4,r20
100035e0:	900b883a 	mov	r5,r18
100035e4:	8220b03a 	or	r16,r16,r8
100035e8:	35ea983a 	sll	r21,r6,r23
100035ec:	0003ffc0 	call	10003ffc <__umodsi3>
100035f0:	a009883a 	mov	r4,r20
100035f4:	900b883a 	mov	r5,r18
100035f8:	1023883a 	mov	r17,r2
100035fc:	e5bfffcc 	andi	r22,fp,65535
10003600:	0003ff40 	call	10003ff4 <__udivsi3>
10003604:	1009883a 	mov	r4,r2
10003608:	b00b883a 	mov	r5,r22
1000360c:	1029883a 	mov	r20,r2
10003610:	00040040 	call	10004004 <__mulsi3>
10003614:	8806943a 	slli	r3,r17,16
10003618:	8014d43a 	srli	r10,r16,16
1000361c:	1a92b03a 	or	r9,r3,r10
10003620:	4880042e 	bgeu	r9,r2,10003634 <__udivdi3+0x3b8>
10003624:	4f13883a 	add	r9,r9,fp
10003628:	a0ffffc4 	addi	r3,r20,-1
1000362c:	4f00952e 	bgeu	r9,fp,10003884 <__udivdi3+0x608>
10003630:	1829883a 	mov	r20,r3
10003634:	48a3c83a 	sub	r17,r9,r2
10003638:	8809883a 	mov	r4,r17
1000363c:	900b883a 	mov	r5,r18
10003640:	0003ffc0 	call	10003ffc <__umodsi3>
10003644:	8809883a 	mov	r4,r17
10003648:	900b883a 	mov	r5,r18
1000364c:	d8800015 	stw	r2,0(sp)
10003650:	0003ff40 	call	10003ff4 <__udivsi3>
10003654:	1009883a 	mov	r4,r2
10003658:	b00b883a 	mov	r5,r22
1000365c:	1023883a 	mov	r17,r2
10003660:	00040040 	call	10004004 <__mulsi3>
10003664:	d8c00017 	ldw	r3,0(sp)
10003668:	823fffcc 	andi	r8,r16,65535
1000366c:	1806943a 	slli	r3,r3,16
10003670:	1a20b03a 	or	r16,r3,r8
10003674:	8080042e 	bgeu	r16,r2,10003688 <__udivdi3+0x40c>
10003678:	8721883a 	add	r16,r16,fp
1000367c:	88ffffc4 	addi	r3,r17,-1
10003680:	87007c2e 	bgeu	r16,fp,10003874 <__udivdi3+0x5f8>
10003684:	1823883a 	mov	r17,r3
10003688:	a028943a 	slli	r20,r20,16
1000368c:	acbfffcc 	andi	r18,r21,65535
10003690:	900b883a 	mov	r5,r18
10003694:	8d28b03a 	or	r20,r17,r20
10003698:	a022d43a 	srli	r17,r20,16
1000369c:	a5bfffcc 	andi	r22,r20,65535
100036a0:	b009883a 	mov	r4,r22
100036a4:	a82ad43a 	srli	r21,r21,16
100036a8:	80a1c83a 	sub	r16,r16,r2
100036ac:	00040040 	call	10004004 <__mulsi3>
100036b0:	8809883a 	mov	r4,r17
100036b4:	900b883a 	mov	r5,r18
100036b8:	1039883a 	mov	fp,r2
100036bc:	00040040 	call	10004004 <__mulsi3>
100036c0:	8809883a 	mov	r4,r17
100036c4:	a80b883a 	mov	r5,r21
100036c8:	1025883a 	mov	r18,r2
100036cc:	00040040 	call	10004004 <__mulsi3>
100036d0:	b009883a 	mov	r4,r22
100036d4:	a80b883a 	mov	r5,r21
100036d8:	1023883a 	mov	r17,r2
100036dc:	00040040 	call	10004004 <__mulsi3>
100036e0:	e006d43a 	srli	r3,fp,16
100036e4:	9085883a 	add	r2,r18,r2
100036e8:	10c7883a 	add	r3,r2,r3
100036ec:	1c80022e 	bgeu	r3,r18,100036f8 <__udivdi3+0x47c>
100036f0:	00800074 	movhi	r2,1
100036f4:	88a3883a 	add	r17,r17,r2
100036f8:	1808d43a 	srli	r4,r3,16
100036fc:	8909883a 	add	r4,r17,r4
10003700:	81004436 	bltu	r16,r4,10003814 <__udivdi3+0x598>
10003704:	81003e26 	beq	r16,r4,10003800 <__udivdi3+0x584>
10003708:	a005883a 	mov	r2,r20
1000370c:	0007883a 	mov	r3,zero
10003710:	003f8f06 	br	10003550 <__alt_data_end+0xf8003550>
10003714:	91e4983a 	sll	r18,r18,r7
10003718:	80eed83a 	srl	r23,r16,r3
1000371c:	81cc983a 	sll	r6,r16,r7
10003720:	9028d43a 	srli	r20,r18,16
10003724:	98c6d83a 	srl	r3,r19,r3
10003728:	b809883a 	mov	r4,r23
1000372c:	a00b883a 	mov	r5,r20
10003730:	30ecb03a 	or	r22,r6,r3
10003734:	99e2983a 	sll	r17,r19,r7
10003738:	0003ffc0 	call	10003ffc <__umodsi3>
1000373c:	b809883a 	mov	r4,r23
10003740:	a00b883a 	mov	r5,r20
10003744:	1021883a 	mov	r16,r2
10003748:	957fffcc 	andi	r21,r18,65535
1000374c:	0003ff40 	call	10003ff4 <__udivsi3>
10003750:	a80b883a 	mov	r5,r21
10003754:	1009883a 	mov	r4,r2
10003758:	102f883a 	mov	r23,r2
1000375c:	00040040 	call	10004004 <__mulsi3>
10003760:	8020943a 	slli	r16,r16,16
10003764:	b00ad43a 	srli	r5,r22,16
10003768:	814cb03a 	or	r6,r16,r5
1000376c:	3080062e 	bgeu	r6,r2,10003788 <__udivdi3+0x50c>
10003770:	348d883a 	add	r6,r6,r18
10003774:	b8ffffc4 	addi	r3,r23,-1
10003778:	34804836 	bltu	r6,r18,1000389c <__udivdi3+0x620>
1000377c:	3080472e 	bgeu	r6,r2,1000389c <__udivdi3+0x620>
10003780:	bdffff84 	addi	r23,r23,-2
10003784:	348d883a 	add	r6,r6,r18
10003788:	30a7c83a 	sub	r19,r6,r2
1000378c:	9809883a 	mov	r4,r19
10003790:	a00b883a 	mov	r5,r20
10003794:	0003ffc0 	call	10003ffc <__umodsi3>
10003798:	9809883a 	mov	r4,r19
1000379c:	a00b883a 	mov	r5,r20
100037a0:	1039883a 	mov	fp,r2
100037a4:	0003ff40 	call	10003ff4 <__udivsi3>
100037a8:	1009883a 	mov	r4,r2
100037ac:	a80b883a 	mov	r5,r21
100037b0:	e038943a 	slli	fp,fp,16
100037b4:	1027883a 	mov	r19,r2
100037b8:	00040040 	call	10004004 <__mulsi3>
100037bc:	b1bfffcc 	andi	r6,r22,65535
100037c0:	e18cb03a 	or	r6,fp,r6
100037c4:	3080062e 	bgeu	r6,r2,100037e0 <__udivdi3+0x564>
100037c8:	348d883a 	add	r6,r6,r18
100037cc:	98ffffc4 	addi	r3,r19,-1
100037d0:	34803036 	bltu	r6,r18,10003894 <__udivdi3+0x618>
100037d4:	30802f2e 	bgeu	r6,r2,10003894 <__udivdi3+0x618>
100037d8:	9cffff84 	addi	r19,r19,-2
100037dc:	348d883a 	add	r6,r6,r18
100037e0:	b82e943a 	slli	r23,r23,16
100037e4:	30a1c83a 	sub	r16,r6,r2
100037e8:	9dc6b03a 	or	r3,r19,r23
100037ec:	003f2606 	br	10003488 <__alt_data_end+0xf8003488>
100037f0:	2027883a 	mov	r19,r4
100037f4:	003f5106 	br	1000353c <__alt_data_end+0xf800353c>
100037f8:	1827883a 	mov	r19,r3
100037fc:	003ef006 	br	100033c0 <__alt_data_end+0xf80033c0>
10003800:	1808943a 	slli	r4,r3,16
10003804:	9dc6983a 	sll	r3,r19,r23
10003808:	e73fffcc 	andi	fp,fp,65535
1000380c:	2709883a 	add	r4,r4,fp
10003810:	193fbd2e 	bgeu	r3,r4,10003708 <__alt_data_end+0xf8003708>
10003814:	a0bfffc4 	addi	r2,r20,-1
10003818:	0007883a 	mov	r3,zero
1000381c:	003f4c06 	br	10003550 <__alt_data_end+0xf8003550>
10003820:	01400404 	movi	r5,16
10003824:	2811883a 	mov	r8,r5
10003828:	003ef106 	br	100033f0 <__alt_data_end+0xf80033f0>
1000382c:	000b883a 	mov	r5,zero
10003830:	0011883a 	mov	r8,zero
10003834:	003eee06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003838:	00800404 	movi	r2,16
1000383c:	1007883a 	mov	r3,r2
10003840:	003ea606 	br	100032dc <__alt_data_end+0xf80032dc>
10003844:	00800404 	movi	r2,16
10003848:	1007883a 	mov	r3,r2
1000384c:	003f0106 	br	10003454 <__alt_data_end+0xf8003454>
10003850:	0005883a 	mov	r2,zero
10003854:	0007883a 	mov	r3,zero
10003858:	003efe06 	br	10003454 <__alt_data_end+0xf8003454>
1000385c:	0005883a 	mov	r2,zero
10003860:	0007883a 	mov	r3,zero
10003864:	003e9d06 	br	100032dc <__alt_data_end+0xf80032dc>
10003868:	0007883a 	mov	r3,zero
1000386c:	00800044 	movi	r2,1
10003870:	003f3706 	br	10003550 <__alt_data_end+0xf8003550>
10003874:	80bf832e 	bgeu	r16,r2,10003684 <__alt_data_end+0xf8003684>
10003878:	8c7fff84 	addi	r17,r17,-2
1000387c:	8721883a 	add	r16,r16,fp
10003880:	003f8106 	br	10003688 <__alt_data_end+0xf8003688>
10003884:	48bf6a2e 	bgeu	r9,r2,10003630 <__alt_data_end+0xf8003630>
10003888:	a53fff84 	addi	r20,r20,-2
1000388c:	4f13883a 	add	r9,r9,fp
10003890:	003f6806 	br	10003634 <__alt_data_end+0xf8003634>
10003894:	1827883a 	mov	r19,r3
10003898:	003fd106 	br	100037e0 <__alt_data_end+0xf80037e0>
1000389c:	182f883a 	mov	r23,r3
100038a0:	003fb906 	br	10003788 <__alt_data_end+0xf8003788>
100038a4:	843fff84 	addi	r16,r16,-2
100038a8:	348d883a 	add	r6,r6,r18
100038ac:	003f0c06 	br	100034e0 <__alt_data_end+0xf80034e0>
100038b0:	843fff84 	addi	r16,r16,-2
100038b4:	1c87883a 	add	r3,r3,r18
100038b8:	003eac06 	br	1000336c <__alt_data_end+0xf800336c>

100038bc <__umoddi3>:
100038bc:	defff404 	addi	sp,sp,-48
100038c0:	dd800815 	stw	r22,32(sp)
100038c4:	dc400315 	stw	r17,12(sp)
100038c8:	dc000215 	stw	r16,8(sp)
100038cc:	dfc00b15 	stw	ra,44(sp)
100038d0:	df000a15 	stw	fp,40(sp)
100038d4:	ddc00915 	stw	r23,36(sp)
100038d8:	dd400715 	stw	r21,28(sp)
100038dc:	dd000615 	stw	r20,24(sp)
100038e0:	dcc00515 	stw	r19,20(sp)
100038e4:	dc800415 	stw	r18,16(sp)
100038e8:	2021883a 	mov	r16,r4
100038ec:	2823883a 	mov	r17,r5
100038f0:	282d883a 	mov	r22,r5
100038f4:	38003c1e 	bne	r7,zero,100039e8 <__umoddi3+0x12c>
100038f8:	3027883a 	mov	r19,r6
100038fc:	2029883a 	mov	r20,r4
10003900:	2980522e 	bgeu	r5,r6,10003a4c <__umoddi3+0x190>
10003904:	00bfffd4 	movui	r2,65535
10003908:	1180a436 	bltu	r2,r6,10003b9c <__umoddi3+0x2e0>
1000390c:	00803fc4 	movi	r2,255
10003910:	11815e2e 	bgeu	r2,r6,10003e8c <__umoddi3+0x5d0>
10003914:	01400204 	movi	r5,8
10003918:	2805883a 	mov	r2,r5
1000391c:	314ad83a 	srl	r5,r6,r5
10003920:	00c40074 	movhi	r3,4097
10003924:	18e2d804 	addi	r3,r3,-29856
10003928:	194b883a 	add	r5,r3,r5
1000392c:	29000003 	ldbu	r4,0(r5)
10003930:	2089883a 	add	r4,r4,r2
10003934:	00800804 	movi	r2,32
10003938:	1105c83a 	sub	r2,r2,r4
1000393c:	10010c26 	beq	r2,zero,10003d70 <__umoddi3+0x4b4>
10003940:	88a2983a 	sll	r17,r17,r2
10003944:	8108d83a 	srl	r4,r16,r4
10003948:	30a6983a 	sll	r19,r6,r2
1000394c:	80a8983a 	sll	r20,r16,r2
10003950:	1025883a 	mov	r18,r2
10003954:	892cb03a 	or	r22,r17,r4
10003958:	9822d43a 	srli	r17,r19,16
1000395c:	b009883a 	mov	r4,r22
10003960:	9d7fffcc 	andi	r21,r19,65535
10003964:	880b883a 	mov	r5,r17
10003968:	0003ffc0 	call	10003ffc <__umodsi3>
1000396c:	b009883a 	mov	r4,r22
10003970:	880b883a 	mov	r5,r17
10003974:	102f883a 	mov	r23,r2
10003978:	0003ff40 	call	10003ff4 <__udivsi3>
1000397c:	1009883a 	mov	r4,r2
10003980:	a80b883a 	mov	r5,r21
10003984:	00040040 	call	10004004 <__mulsi3>
10003988:	b82e943a 	slli	r23,r23,16
1000398c:	a008d43a 	srli	r4,r20,16
10003990:	b906b03a 	or	r3,r23,r4
10003994:	1880042e 	bgeu	r3,r2,100039a8 <__umoddi3+0xec>
10003998:	1cc7883a 	add	r3,r3,r19
1000399c:	1cc00236 	bltu	r3,r19,100039a8 <__umoddi3+0xec>
100039a0:	1880012e 	bgeu	r3,r2,100039a8 <__umoddi3+0xec>
100039a4:	1cc7883a 	add	r3,r3,r19
100039a8:	18a1c83a 	sub	r16,r3,r2
100039ac:	8009883a 	mov	r4,r16
100039b0:	880b883a 	mov	r5,r17
100039b4:	0003ffc0 	call	10003ffc <__umodsi3>
100039b8:	8009883a 	mov	r4,r16
100039bc:	880b883a 	mov	r5,r17
100039c0:	102d883a 	mov	r22,r2
100039c4:	0003ff40 	call	10003ff4 <__udivsi3>
100039c8:	1009883a 	mov	r4,r2
100039cc:	a80b883a 	mov	r5,r21
100039d0:	b02c943a 	slli	r22,r22,16
100039d4:	00040040 	call	10004004 <__mulsi3>
100039d8:	a13fffcc 	andi	r4,r20,65535
100039dc:	b106b03a 	or	r3,r22,r4
100039e0:	1880572e 	bgeu	r3,r2,10003b40 <__umoddi3+0x284>
100039e4:	00005206 	br	10003b30 <__umoddi3+0x274>
100039e8:	29c05936 	bltu	r5,r7,10003b50 <__umoddi3+0x294>
100039ec:	00bfffd4 	movui	r2,65535
100039f0:	11c0652e 	bgeu	r2,r7,10003b88 <__umoddi3+0x2cc>
100039f4:	00804034 	movhi	r2,256
100039f8:	10bfffc4 	addi	r2,r2,-1
100039fc:	11c1172e 	bgeu	r2,r7,10003e5c <__umoddi3+0x5a0>
10003a00:	01400604 	movi	r5,24
10003a04:	282b883a 	mov	r21,r5
10003a08:	394ad83a 	srl	r5,r7,r5
10003a0c:	00c40074 	movhi	r3,4097
10003a10:	18e2d804 	addi	r3,r3,-29856
10003a14:	194b883a 	add	r5,r3,r5
10003a18:	28800003 	ldbu	r2,0(r5)
10003a1c:	00c00804 	movi	r3,32
10003a20:	156b883a 	add	r21,r2,r21
10003a24:	1d69c83a 	sub	r20,r3,r21
10003a28:	a000671e 	bne	r20,zero,10003bc8 <__umoddi3+0x30c>
10003a2c:	3c400136 	bltu	r7,r17,10003a34 <__umoddi3+0x178>
10003a30:	81812336 	bltu	r16,r6,10003ec0 <__umoddi3+0x604>
10003a34:	8185c83a 	sub	r2,r16,r6
10003a38:	89e3c83a 	sub	r17,r17,r7
10003a3c:	8087803a 	cmpltu	r3,r16,r2
10003a40:	88edc83a 	sub	r22,r17,r3
10003a44:	b007883a 	mov	r3,r22
10003a48:	00004306 	br	10003b58 <__umoddi3+0x29c>
10003a4c:	3000041e 	bne	r6,zero,10003a60 <__umoddi3+0x1a4>
10003a50:	01000044 	movi	r4,1
10003a54:	000b883a 	mov	r5,zero
10003a58:	0003ff40 	call	10003ff4 <__udivsi3>
10003a5c:	1027883a 	mov	r19,r2
10003a60:	00bfffd4 	movui	r2,65535
10003a64:	14c0532e 	bgeu	r2,r19,10003bb4 <__umoddi3+0x2f8>
10003a68:	00804034 	movhi	r2,256
10003a6c:	10bfffc4 	addi	r2,r2,-1
10003a70:	14c1032e 	bgeu	r2,r19,10003e80 <__umoddi3+0x5c4>
10003a74:	00800604 	movi	r2,24
10003a78:	1007883a 	mov	r3,r2
10003a7c:	9884d83a 	srl	r2,r19,r2
10003a80:	01040074 	movhi	r4,4097
10003a84:	2122d804 	addi	r4,r4,-29856
10003a88:	2085883a 	add	r2,r4,r2
10003a8c:	11000003 	ldbu	r4,0(r2)
10003a90:	00800804 	movi	r2,32
10003a94:	20c7883a 	add	r3,r4,r3
10003a98:	10c5c83a 	sub	r2,r2,r3
10003a9c:	1000b61e 	bne	r2,zero,10003d78 <__umoddi3+0x4bc>
10003aa0:	982ad43a 	srli	r21,r19,16
10003aa4:	8ce3c83a 	sub	r17,r17,r19
10003aa8:	9dbfffcc 	andi	r22,r19,65535
10003aac:	0025883a 	mov	r18,zero
10003ab0:	8809883a 	mov	r4,r17
10003ab4:	a80b883a 	mov	r5,r21
10003ab8:	0003ffc0 	call	10003ffc <__umodsi3>
10003abc:	8809883a 	mov	r4,r17
10003ac0:	a80b883a 	mov	r5,r21
10003ac4:	102f883a 	mov	r23,r2
10003ac8:	0003ff40 	call	10003ff4 <__udivsi3>
10003acc:	1009883a 	mov	r4,r2
10003ad0:	b00b883a 	mov	r5,r22
10003ad4:	00040040 	call	10004004 <__mulsi3>
10003ad8:	b82e943a 	slli	r23,r23,16
10003adc:	a008d43a 	srli	r4,r20,16
10003ae0:	b906b03a 	or	r3,r23,r4
10003ae4:	1880032e 	bgeu	r3,r2,10003af4 <__umoddi3+0x238>
10003ae8:	1cc7883a 	add	r3,r3,r19
10003aec:	1cc00136 	bltu	r3,r19,10003af4 <__umoddi3+0x238>
10003af0:	1880f136 	bltu	r3,r2,10003eb8 <__umoddi3+0x5fc>
10003af4:	18a1c83a 	sub	r16,r3,r2
10003af8:	8009883a 	mov	r4,r16
10003afc:	a80b883a 	mov	r5,r21
10003b00:	0003ffc0 	call	10003ffc <__umodsi3>
10003b04:	8009883a 	mov	r4,r16
10003b08:	a80b883a 	mov	r5,r21
10003b0c:	1023883a 	mov	r17,r2
10003b10:	0003ff40 	call	10003ff4 <__udivsi3>
10003b14:	1009883a 	mov	r4,r2
10003b18:	b00b883a 	mov	r5,r22
10003b1c:	8822943a 	slli	r17,r17,16
10003b20:	00040040 	call	10004004 <__mulsi3>
10003b24:	a13fffcc 	andi	r4,r20,65535
10003b28:	8906b03a 	or	r3,r17,r4
10003b2c:	1880042e 	bgeu	r3,r2,10003b40 <__umoddi3+0x284>
10003b30:	1cc7883a 	add	r3,r3,r19
10003b34:	1cc00236 	bltu	r3,r19,10003b40 <__umoddi3+0x284>
10003b38:	1880012e 	bgeu	r3,r2,10003b40 <__umoddi3+0x284>
10003b3c:	1cc7883a 	add	r3,r3,r19
10003b40:	1887c83a 	sub	r3,r3,r2
10003b44:	1c84d83a 	srl	r2,r3,r18
10003b48:	0007883a 	mov	r3,zero
10003b4c:	00000206 	br	10003b58 <__umoddi3+0x29c>
10003b50:	2005883a 	mov	r2,r4
10003b54:	2807883a 	mov	r3,r5
10003b58:	dfc00b17 	ldw	ra,44(sp)
10003b5c:	df000a17 	ldw	fp,40(sp)
10003b60:	ddc00917 	ldw	r23,36(sp)
10003b64:	dd800817 	ldw	r22,32(sp)
10003b68:	dd400717 	ldw	r21,28(sp)
10003b6c:	dd000617 	ldw	r20,24(sp)
10003b70:	dcc00517 	ldw	r19,20(sp)
10003b74:	dc800417 	ldw	r18,16(sp)
10003b78:	dc400317 	ldw	r17,12(sp)
10003b7c:	dc000217 	ldw	r16,8(sp)
10003b80:	dec00c04 	addi	sp,sp,48
10003b84:	f800283a 	ret
10003b88:	00803fc4 	movi	r2,255
10003b8c:	11c0b02e 	bgeu	r2,r7,10003e50 <__umoddi3+0x594>
10003b90:	01400204 	movi	r5,8
10003b94:	282b883a 	mov	r21,r5
10003b98:	003f9b06 	br	10003a08 <__alt_data_end+0xf8003a08>
10003b9c:	00804034 	movhi	r2,256
10003ba0:	10bfffc4 	addi	r2,r2,-1
10003ba4:	1180b02e 	bgeu	r2,r6,10003e68 <__umoddi3+0x5ac>
10003ba8:	01400604 	movi	r5,24
10003bac:	2805883a 	mov	r2,r5
10003bb0:	003f5a06 	br	1000391c <__alt_data_end+0xf800391c>
10003bb4:	00803fc4 	movi	r2,255
10003bb8:	14c0ae2e 	bgeu	r2,r19,10003e74 <__umoddi3+0x5b8>
10003bbc:	00800204 	movi	r2,8
10003bc0:	1007883a 	mov	r3,r2
10003bc4:	003fad06 	br	10003a7c <__alt_data_end+0xf8003a7c>
10003bc8:	3d0a983a 	sll	r5,r7,r20
10003bcc:	356cd83a 	srl	r22,r6,r21
10003bd0:	8d78d83a 	srl	fp,r17,r21
10003bd4:	8d10983a 	sll	r8,r17,r20
10003bd8:	2dacb03a 	or	r22,r5,r22
10003bdc:	b02ed43a 	srli	r23,r22,16
10003be0:	8564d83a 	srl	r18,r16,r21
10003be4:	e009883a 	mov	r4,fp
10003be8:	b80b883a 	mov	r5,r23
10003bec:	44a4b03a 	or	r18,r8,r18
10003bf0:	3526983a 	sll	r19,r6,r20
10003bf4:	0003ffc0 	call	10003ffc <__umodsi3>
10003bf8:	e009883a 	mov	r4,fp
10003bfc:	b80b883a 	mov	r5,r23
10003c00:	b47fffcc 	andi	r17,r22,65535
10003c04:	d8800015 	stw	r2,0(sp)
10003c08:	0003ff40 	call	10003ff4 <__udivsi3>
10003c0c:	1009883a 	mov	r4,r2
10003c10:	880b883a 	mov	r5,r17
10003c14:	1039883a 	mov	fp,r2
10003c18:	00040040 	call	10004004 <__mulsi3>
10003c1c:	d9800017 	ldw	r6,0(sp)
10003c20:	9008d43a 	srli	r4,r18,16
10003c24:	8520983a 	sll	r16,r16,r20
10003c28:	300c943a 	slli	r6,r6,16
10003c2c:	3106b03a 	or	r3,r6,r4
10003c30:	1880042e 	bgeu	r3,r2,10003c44 <__umoddi3+0x388>
10003c34:	1d87883a 	add	r3,r3,r22
10003c38:	e13fffc4 	addi	r4,fp,-1
10003c3c:	1d809a2e 	bgeu	r3,r22,10003ea8 <__umoddi3+0x5ec>
10003c40:	2039883a 	mov	fp,r4
10003c44:	1887c83a 	sub	r3,r3,r2
10003c48:	1809883a 	mov	r4,r3
10003c4c:	b80b883a 	mov	r5,r23
10003c50:	d8c00115 	stw	r3,4(sp)
10003c54:	0003ffc0 	call	10003ffc <__umodsi3>
10003c58:	d8c00117 	ldw	r3,4(sp)
10003c5c:	b80b883a 	mov	r5,r23
10003c60:	d8800015 	stw	r2,0(sp)
10003c64:	1809883a 	mov	r4,r3
10003c68:	0003ff40 	call	10003ff4 <__udivsi3>
10003c6c:	880b883a 	mov	r5,r17
10003c70:	1009883a 	mov	r4,r2
10003c74:	102f883a 	mov	r23,r2
10003c78:	00040040 	call	10004004 <__mulsi3>
10003c7c:	d9800017 	ldw	r6,0(sp)
10003c80:	947fffcc 	andi	r17,r18,65535
10003c84:	300c943a 	slli	r6,r6,16
10003c88:	3464b03a 	or	r18,r6,r17
10003c8c:	9080042e 	bgeu	r18,r2,10003ca0 <__umoddi3+0x3e4>
10003c90:	95a5883a 	add	r18,r18,r22
10003c94:	b8ffffc4 	addi	r3,r23,-1
10003c98:	95807f2e 	bgeu	r18,r22,10003e98 <__umoddi3+0x5dc>
10003c9c:	182f883a 	mov	r23,r3
10003ca0:	e038943a 	slli	fp,fp,16
10003ca4:	980cd43a 	srli	r6,r19,16
10003ca8:	98ffffcc 	andi	r3,r19,65535
10003cac:	bf38b03a 	or	fp,r23,fp
10003cb0:	e02ed43a 	srli	r23,fp,16
10003cb4:	e73fffcc 	andi	fp,fp,65535
10003cb8:	180b883a 	mov	r5,r3
10003cbc:	e009883a 	mov	r4,fp
10003cc0:	d9800015 	stw	r6,0(sp)
10003cc4:	d8c00115 	stw	r3,4(sp)
10003cc8:	90a5c83a 	sub	r18,r18,r2
10003ccc:	00040040 	call	10004004 <__mulsi3>
10003cd0:	d8c00117 	ldw	r3,4(sp)
10003cd4:	b809883a 	mov	r4,r23
10003cd8:	1023883a 	mov	r17,r2
10003cdc:	180b883a 	mov	r5,r3
10003ce0:	00040040 	call	10004004 <__mulsi3>
10003ce4:	d9800017 	ldw	r6,0(sp)
10003ce8:	b809883a 	mov	r4,r23
10003cec:	d8800115 	stw	r2,4(sp)
10003cf0:	300b883a 	mov	r5,r6
10003cf4:	302f883a 	mov	r23,r6
10003cf8:	00040040 	call	10004004 <__mulsi3>
10003cfc:	e009883a 	mov	r4,fp
10003d00:	b80b883a 	mov	r5,r23
10003d04:	d8800015 	stw	r2,0(sp)
10003d08:	00040040 	call	10004004 <__mulsi3>
10003d0c:	d8c00117 	ldw	r3,4(sp)
10003d10:	880cd43a 	srli	r6,r17,16
10003d14:	d9c00017 	ldw	r7,0(sp)
10003d18:	1885883a 	add	r2,r3,r2
10003d1c:	118d883a 	add	r6,r2,r6
10003d20:	30c0022e 	bgeu	r6,r3,10003d2c <__umoddi3+0x470>
10003d24:	00800074 	movhi	r2,1
10003d28:	388f883a 	add	r7,r7,r2
10003d2c:	3006d43a 	srli	r3,r6,16
10003d30:	300c943a 	slli	r6,r6,16
10003d34:	8c7fffcc 	andi	r17,r17,65535
10003d38:	38c7883a 	add	r3,r7,r3
10003d3c:	3463883a 	add	r17,r6,r17
10003d40:	90c03d36 	bltu	r18,r3,10003e38 <__umoddi3+0x57c>
10003d44:	90c06026 	beq	r18,r3,10003ec8 <__umoddi3+0x60c>
10003d48:	90c9c83a 	sub	r4,r18,r3
10003d4c:	880f883a 	mov	r7,r17
10003d50:	81cfc83a 	sub	r7,r16,r7
10003d54:	81c7803a 	cmpltu	r3,r16,r7
10003d58:	20c7c83a 	sub	r3,r4,r3
10003d5c:	1d44983a 	sll	r2,r3,r21
10003d60:	3d0ed83a 	srl	r7,r7,r20
10003d64:	1d06d83a 	srl	r3,r3,r20
10003d68:	11c4b03a 	or	r2,r2,r7
10003d6c:	003f7a06 	br	10003b58 <__alt_data_end+0xf8003b58>
10003d70:	0025883a 	mov	r18,zero
10003d74:	003ef806 	br	10003958 <__alt_data_end+0xf8003958>
10003d78:	98a6983a 	sll	r19,r19,r2
10003d7c:	88e8d83a 	srl	r20,r17,r3
10003d80:	80c6d83a 	srl	r3,r16,r3
10003d84:	982ad43a 	srli	r21,r19,16
10003d88:	88a2983a 	sll	r17,r17,r2
10003d8c:	a009883a 	mov	r4,r20
10003d90:	a80b883a 	mov	r5,r21
10003d94:	88eeb03a 	or	r23,r17,r3
10003d98:	1025883a 	mov	r18,r2
10003d9c:	0003ffc0 	call	10003ffc <__umodsi3>
10003da0:	a009883a 	mov	r4,r20
10003da4:	a80b883a 	mov	r5,r21
10003da8:	1023883a 	mov	r17,r2
10003dac:	9dbfffcc 	andi	r22,r19,65535
10003db0:	0003ff40 	call	10003ff4 <__udivsi3>
10003db4:	1009883a 	mov	r4,r2
10003db8:	b00b883a 	mov	r5,r22
10003dbc:	00040040 	call	10004004 <__mulsi3>
10003dc0:	8822943a 	slli	r17,r17,16
10003dc4:	b808d43a 	srli	r4,r23,16
10003dc8:	84a8983a 	sll	r20,r16,r18
10003dcc:	8906b03a 	or	r3,r17,r4
10003dd0:	1880042e 	bgeu	r3,r2,10003de4 <__umoddi3+0x528>
10003dd4:	1cc7883a 	add	r3,r3,r19
10003dd8:	1cc00236 	bltu	r3,r19,10003de4 <__umoddi3+0x528>
10003ddc:	1880012e 	bgeu	r3,r2,10003de4 <__umoddi3+0x528>
10003de0:	1cc7883a 	add	r3,r3,r19
10003de4:	18a1c83a 	sub	r16,r3,r2
10003de8:	8009883a 	mov	r4,r16
10003dec:	a80b883a 	mov	r5,r21
10003df0:	0003ffc0 	call	10003ffc <__umodsi3>
10003df4:	8009883a 	mov	r4,r16
10003df8:	a80b883a 	mov	r5,r21
10003dfc:	1039883a 	mov	fp,r2
10003e00:	0003ff40 	call	10003ff4 <__udivsi3>
10003e04:	1009883a 	mov	r4,r2
10003e08:	b00b883a 	mov	r5,r22
10003e0c:	00040040 	call	10004004 <__mulsi3>
10003e10:	e006943a 	slli	r3,fp,16
10003e14:	b93fffcc 	andi	r4,r23,65535
10003e18:	1906b03a 	or	r3,r3,r4
10003e1c:	1880042e 	bgeu	r3,r2,10003e30 <__umoddi3+0x574>
10003e20:	1cc7883a 	add	r3,r3,r19
10003e24:	1cc00236 	bltu	r3,r19,10003e30 <__umoddi3+0x574>
10003e28:	1880012e 	bgeu	r3,r2,10003e30 <__umoddi3+0x574>
10003e2c:	1cc7883a 	add	r3,r3,r19
10003e30:	18a3c83a 	sub	r17,r3,r2
10003e34:	003f1e06 	br	10003ab0 <__alt_data_end+0xf8003ab0>
10003e38:	8ccfc83a 	sub	r7,r17,r19
10003e3c:	1d89c83a 	sub	r4,r3,r22
10003e40:	89e3803a 	cmpltu	r17,r17,r7
10003e44:	2463c83a 	sub	r17,r4,r17
10003e48:	9449c83a 	sub	r4,r18,r17
10003e4c:	003fc006 	br	10003d50 <__alt_data_end+0xf8003d50>
10003e50:	000b883a 	mov	r5,zero
10003e54:	002b883a 	mov	r21,zero
10003e58:	003eeb06 	br	10003a08 <__alt_data_end+0xf8003a08>
10003e5c:	01400404 	movi	r5,16
10003e60:	282b883a 	mov	r21,r5
10003e64:	003ee806 	br	10003a08 <__alt_data_end+0xf8003a08>
10003e68:	01400404 	movi	r5,16
10003e6c:	2805883a 	mov	r2,r5
10003e70:	003eaa06 	br	1000391c <__alt_data_end+0xf800391c>
10003e74:	0005883a 	mov	r2,zero
10003e78:	0007883a 	mov	r3,zero
10003e7c:	003eff06 	br	10003a7c <__alt_data_end+0xf8003a7c>
10003e80:	00800404 	movi	r2,16
10003e84:	1007883a 	mov	r3,r2
10003e88:	003efc06 	br	10003a7c <__alt_data_end+0xf8003a7c>
10003e8c:	000b883a 	mov	r5,zero
10003e90:	0005883a 	mov	r2,zero
10003e94:	003ea106 	br	1000391c <__alt_data_end+0xf800391c>
10003e98:	90bf802e 	bgeu	r18,r2,10003c9c <__alt_data_end+0xf8003c9c>
10003e9c:	bdffff84 	addi	r23,r23,-2
10003ea0:	95a5883a 	add	r18,r18,r22
10003ea4:	003f7e06 	br	10003ca0 <__alt_data_end+0xf8003ca0>
10003ea8:	18bf652e 	bgeu	r3,r2,10003c40 <__alt_data_end+0xf8003c40>
10003eac:	e73fff84 	addi	fp,fp,-2
10003eb0:	1d87883a 	add	r3,r3,r22
10003eb4:	003f6306 	br	10003c44 <__alt_data_end+0xf8003c44>
10003eb8:	1cc7883a 	add	r3,r3,r19
10003ebc:	003f0d06 	br	10003af4 <__alt_data_end+0xf8003af4>
10003ec0:	8005883a 	mov	r2,r16
10003ec4:	003edf06 	br	10003a44 <__alt_data_end+0xf8003a44>
10003ec8:	847fdb36 	bltu	r16,r17,10003e38 <__alt_data_end+0xf8003e38>
10003ecc:	880f883a 	mov	r7,r17
10003ed0:	0009883a 	mov	r4,zero
10003ed4:	003f9e06 	br	10003d50 <__alt_data_end+0xf8003d50>

10003ed8 <udivmodsi4>:
10003ed8:	2900182e 	bgeu	r5,r4,10003f3c <udivmodsi4+0x64>
10003edc:	28001716 	blt	r5,zero,10003f3c <udivmodsi4+0x64>
10003ee0:	00800804 	movi	r2,32
10003ee4:	00c00044 	movi	r3,1
10003ee8:	00000206 	br	10003ef4 <udivmodsi4+0x1c>
10003eec:	10001126 	beq	r2,zero,10003f34 <udivmodsi4+0x5c>
10003ef0:	28000516 	blt	r5,zero,10003f08 <udivmodsi4+0x30>
10003ef4:	294b883a 	add	r5,r5,r5
10003ef8:	10bfffc4 	addi	r2,r2,-1
10003efc:	18c7883a 	add	r3,r3,r3
10003f00:	293ffa36 	bltu	r5,r4,10003eec <__alt_data_end+0xf8003eec>
10003f04:	18000b26 	beq	r3,zero,10003f34 <udivmodsi4+0x5c>
10003f08:	0005883a 	mov	r2,zero
10003f0c:	21400236 	bltu	r4,r5,10003f18 <udivmodsi4+0x40>
10003f10:	2149c83a 	sub	r4,r4,r5
10003f14:	10c4b03a 	or	r2,r2,r3
10003f18:	1806d07a 	srli	r3,r3,1
10003f1c:	280ad07a 	srli	r5,r5,1
10003f20:	183ffa1e 	bne	r3,zero,10003f0c <__alt_data_end+0xf8003f0c>
10003f24:	3000011e 	bne	r6,zero,10003f2c <udivmodsi4+0x54>
10003f28:	f800283a 	ret
10003f2c:	2005883a 	mov	r2,r4
10003f30:	f800283a 	ret
10003f34:	0005883a 	mov	r2,zero
10003f38:	003ffa06 	br	10003f24 <__alt_data_end+0xf8003f24>
10003f3c:	00c00044 	movi	r3,1
10003f40:	003ff106 	br	10003f08 <__alt_data_end+0xf8003f08>

10003f44 <__divsi3>:
10003f44:	defffe04 	addi	sp,sp,-8
10003f48:	dfc00115 	stw	ra,4(sp)
10003f4c:	dc000015 	stw	r16,0(sp)
10003f50:	20000b16 	blt	r4,zero,10003f80 <__divsi3+0x3c>
10003f54:	0021883a 	mov	r16,zero
10003f58:	28000c16 	blt	r5,zero,10003f8c <__divsi3+0x48>
10003f5c:	000d883a 	mov	r6,zero
10003f60:	0003ed80 	call	10003ed8 <udivmodsi4>
10003f64:	0407c83a 	sub	r3,zero,r16
10003f68:	1884f03a 	xor	r2,r3,r2
10003f6c:	1405883a 	add	r2,r2,r16
10003f70:	dfc00117 	ldw	ra,4(sp)
10003f74:	dc000017 	ldw	r16,0(sp)
10003f78:	dec00204 	addi	sp,sp,8
10003f7c:	f800283a 	ret
10003f80:	0109c83a 	sub	r4,zero,r4
10003f84:	04000044 	movi	r16,1
10003f88:	283ff40e 	bge	r5,zero,10003f5c <__alt_data_end+0xf8003f5c>
10003f8c:	014bc83a 	sub	r5,zero,r5
10003f90:	8400005c 	xori	r16,r16,1
10003f94:	003ff106 	br	10003f5c <__alt_data_end+0xf8003f5c>

10003f98 <__modsi3>:
10003f98:	defffd04 	addi	sp,sp,-12
10003f9c:	dfc00215 	stw	ra,8(sp)
10003fa0:	dc400115 	stw	r17,4(sp)
10003fa4:	dc000015 	stw	r16,0(sp)
10003fa8:	20000c16 	blt	r4,zero,10003fdc <__modsi3+0x44>
10003fac:	0023883a 	mov	r17,zero
10003fb0:	0021883a 	mov	r16,zero
10003fb4:	28000d16 	blt	r5,zero,10003fec <__modsi3+0x54>
10003fb8:	01800044 	movi	r6,1
10003fbc:	0003ed80 	call	10003ed8 <udivmodsi4>
10003fc0:	1404f03a 	xor	r2,r2,r16
10003fc4:	8885883a 	add	r2,r17,r2
10003fc8:	dfc00217 	ldw	ra,8(sp)
10003fcc:	dc400117 	ldw	r17,4(sp)
10003fd0:	dc000017 	ldw	r16,0(sp)
10003fd4:	dec00304 	addi	sp,sp,12
10003fd8:	f800283a 	ret
10003fdc:	0109c83a 	sub	r4,zero,r4
10003fe0:	04400044 	movi	r17,1
10003fe4:	043fffc4 	movi	r16,-1
10003fe8:	283ff30e 	bge	r5,zero,10003fb8 <__alt_data_end+0xf8003fb8>
10003fec:	014bc83a 	sub	r5,zero,r5
10003ff0:	003ff106 	br	10003fb8 <__alt_data_end+0xf8003fb8>

10003ff4 <__udivsi3>:
10003ff4:	000d883a 	mov	r6,zero
10003ff8:	0003ed81 	jmpi	10003ed8 <udivmodsi4>

10003ffc <__umodsi3>:
10003ffc:	01800044 	movi	r6,1
10004000:	0003ed81 	jmpi	10003ed8 <udivmodsi4>

10004004 <__mulsi3>:
10004004:	0005883a 	mov	r2,zero
10004008:	20000726 	beq	r4,zero,10004028 <__mulsi3+0x24>
1000400c:	20c0004c 	andi	r3,r4,1
10004010:	2008d07a 	srli	r4,r4,1
10004014:	18000126 	beq	r3,zero,1000401c <__mulsi3+0x18>
10004018:	1145883a 	add	r2,r2,r5
1000401c:	294b883a 	add	r5,r5,r5
10004020:	203ffa1e 	bne	r4,zero,1000400c <__alt_data_end+0xf800400c>
10004024:	f800283a 	ret
10004028:	f800283a 	ret

1000402c <__adddf3>:
1000402c:	02000434 	movhi	r8,16
10004030:	423fffc4 	addi	r8,r8,-1
10004034:	defffb04 	addi	sp,sp,-20
10004038:	2a12703a 	and	r9,r5,r8
1000403c:	2806d7fa 	srli	r3,r5,31
10004040:	3a10703a 	and	r8,r7,r8
10004044:	3804d53a 	srli	r2,r7,20
10004048:	3014d77a 	srli	r10,r6,29
1000404c:	dc000015 	stw	r16,0(sp)
10004050:	481290fa 	slli	r9,r9,3
10004054:	2820d53a 	srli	r16,r5,20
10004058:	401090fa 	slli	r8,r8,3
1000405c:	200ad77a 	srli	r5,r4,29
10004060:	380ed7fa 	srli	r7,r7,31
10004064:	dc800215 	stw	r18,8(sp)
10004068:	dc400115 	stw	r17,4(sp)
1000406c:	dfc00415 	stw	ra,16(sp)
10004070:	dcc00315 	stw	r19,12(sp)
10004074:	1c803fcc 	andi	r18,r3,255
10004078:	8401ffcc 	andi	r16,r16,2047
1000407c:	494ab03a 	or	r5,r9,r5
10004080:	202290fa 	slli	r17,r4,3
10004084:	1081ffcc 	andi	r2,r2,2047
10004088:	4290b03a 	or	r8,r8,r10
1000408c:	300c90fa 	slli	r6,r6,3
10004090:	91c07026 	beq	r18,r7,10004254 <__adddf3+0x228>
10004094:	8087c83a 	sub	r3,r16,r2
10004098:	00c0b30e 	bge	zero,r3,10004368 <__adddf3+0x33c>
1000409c:	10002a1e 	bne	r2,zero,10004148 <__adddf3+0x11c>
100040a0:	4184b03a 	or	r2,r8,r6
100040a4:	1000991e 	bne	r2,zero,1000430c <__adddf3+0x2e0>
100040a8:	888001cc 	andi	r2,r17,7
100040ac:	10005b26 	beq	r2,zero,1000421c <__adddf3+0x1f0>
100040b0:	88c003cc 	andi	r3,r17,15
100040b4:	00800104 	movi	r2,4
100040b8:	18805826 	beq	r3,r2,1000421c <__adddf3+0x1f0>
100040bc:	89800104 	addi	r6,r17,4
100040c0:	3463803a 	cmpltu	r17,r6,r17
100040c4:	2c4b883a 	add	r5,r5,r17
100040c8:	2880202c 	andhi	r2,r5,128
100040cc:	9007883a 	mov	r3,r18
100040d0:	3023883a 	mov	r17,r6
100040d4:	10005426 	beq	r2,zero,10004228 <__adddf3+0x1fc>
100040d8:	84000044 	addi	r16,r16,1
100040dc:	0081ffc4 	movi	r2,2047
100040e0:	8080c126 	beq	r16,r2,100043e8 <__adddf3+0x3bc>
100040e4:	013fe034 	movhi	r4,65408
100040e8:	213fffc4 	addi	r4,r4,-1
100040ec:	290a703a 	and	r5,r5,r4
100040f0:	2804977a 	slli	r2,r5,29
100040f4:	280a927a 	slli	r5,r5,9
100040f8:	8822d0fa 	srli	r17,r17,3
100040fc:	8401ffcc 	andi	r16,r16,2047
10004100:	2808d33a 	srli	r4,r5,12
10004104:	1444b03a 	or	r2,r2,r17
10004108:	8401ffcc 	andi	r16,r16,2047
1000410c:	800a953a 	slli	r5,r16,20
10004110:	18c03fcc 	andi	r3,r3,255
10004114:	04000434 	movhi	r16,16
10004118:	180697fa 	slli	r3,r3,31
1000411c:	843fffc4 	addi	r16,r16,-1
10004120:	2420703a 	and	r16,r4,r16
10004124:	8160b03a 	or	r16,r16,r5
10004128:	80c6b03a 	or	r3,r16,r3
1000412c:	dfc00417 	ldw	ra,16(sp)
10004130:	dcc00317 	ldw	r19,12(sp)
10004134:	dc800217 	ldw	r18,8(sp)
10004138:	dc400117 	ldw	r17,4(sp)
1000413c:	dc000017 	ldw	r16,0(sp)
10004140:	dec00504 	addi	sp,sp,20
10004144:	f800283a 	ret
10004148:	0081ffc4 	movi	r2,2047
1000414c:	80bfd626 	beq	r16,r2,100040a8 <__alt_data_end+0xf80040a8>
10004150:	42002034 	orhi	r8,r8,128
10004154:	00800e04 	movi	r2,56
10004158:	10c0a616 	blt	r2,r3,100043f4 <__adddf3+0x3c8>
1000415c:	008007c4 	movi	r2,31
10004160:	10c0c916 	blt	r2,r3,10004488 <__adddf3+0x45c>
10004164:	00800804 	movi	r2,32
10004168:	10c5c83a 	sub	r2,r2,r3
1000416c:	408e983a 	sll	r7,r8,r2
10004170:	30c8d83a 	srl	r4,r6,r3
10004174:	3084983a 	sll	r2,r6,r2
10004178:	40c6d83a 	srl	r3,r8,r3
1000417c:	390cb03a 	or	r6,r7,r4
10004180:	1004c03a 	cmpne	r2,r2,zero
10004184:	308cb03a 	or	r6,r6,r2
10004188:	898dc83a 	sub	r6,r17,r6
1000418c:	89a3803a 	cmpltu	r17,r17,r6
10004190:	28cbc83a 	sub	r5,r5,r3
10004194:	2c4bc83a 	sub	r5,r5,r17
10004198:	3023883a 	mov	r17,r6
1000419c:	2880202c 	andhi	r2,r5,128
100041a0:	10006d26 	beq	r2,zero,10004358 <__adddf3+0x32c>
100041a4:	04c02034 	movhi	r19,128
100041a8:	9cffffc4 	addi	r19,r19,-1
100041ac:	2ce6703a 	and	r19,r5,r19
100041b0:	98007e26 	beq	r19,zero,100043ac <__adddf3+0x380>
100041b4:	9809883a 	mov	r4,r19
100041b8:	00067c40 	call	100067c4 <__clzsi2>
100041bc:	10fffe04 	addi	r3,r2,-8
100041c0:	010007c4 	movi	r4,31
100041c4:	20c07f16 	blt	r4,r3,100043c4 <__adddf3+0x398>
100041c8:	01400a04 	movi	r5,40
100041cc:	2885c83a 	sub	r2,r5,r2
100041d0:	888ad83a 	srl	r5,r17,r2
100041d4:	98e6983a 	sll	r19,r19,r3
100041d8:	88e2983a 	sll	r17,r17,r3
100041dc:	2ce6b03a 	or	r19,r5,r19
100041e0:	1c007c16 	blt	r3,r16,100043d4 <__adddf3+0x3a8>
100041e4:	1c21c83a 	sub	r16,r3,r16
100041e8:	81400044 	addi	r5,r16,1
100041ec:	00c007c4 	movi	r3,31
100041f0:	19409816 	blt	r3,r5,10004454 <__adddf3+0x428>
100041f4:	1c21c83a 	sub	r16,r3,r16
100041f8:	8c08983a 	sll	r4,r17,r16
100041fc:	8946d83a 	srl	r3,r17,r5
10004200:	9c20983a 	sll	r16,r19,r16
10004204:	2008c03a 	cmpne	r4,r4,zero
10004208:	994ad83a 	srl	r5,r19,r5
1000420c:	1c06b03a 	or	r3,r3,r16
10004210:	1922b03a 	or	r17,r3,r4
10004214:	0021883a 	mov	r16,zero
10004218:	003fa306 	br	100040a8 <__alt_data_end+0xf80040a8>
1000421c:	2880202c 	andhi	r2,r5,128
10004220:	9007883a 	mov	r3,r18
10004224:	103fac1e 	bne	r2,zero,100040d8 <__alt_data_end+0xf80040d8>
10004228:	2804977a 	slli	r2,r5,29
1000422c:	8822d0fa 	srli	r17,r17,3
10004230:	0101ffc4 	movi	r4,2047
10004234:	280ad0fa 	srli	r5,r5,3
10004238:	1444b03a 	or	r2,r2,r17
1000423c:	81002c26 	beq	r16,r4,100042f0 <__adddf3+0x2c4>
10004240:	8120703a 	and	r16,r16,r4
10004244:	01000434 	movhi	r4,16
10004248:	213fffc4 	addi	r4,r4,-1
1000424c:	2908703a 	and	r4,r5,r4
10004250:	003fad06 	br	10004108 <__alt_data_end+0xf8004108>
10004254:	8089c83a 	sub	r4,r16,r2
10004258:	01006a0e 	bge	zero,r4,10004404 <__adddf3+0x3d8>
1000425c:	10003326 	beq	r2,zero,1000432c <__adddf3+0x300>
10004260:	0081ffc4 	movi	r2,2047
10004264:	80bf9026 	beq	r16,r2,100040a8 <__alt_data_end+0xf80040a8>
10004268:	42002034 	orhi	r8,r8,128
1000426c:	00800e04 	movi	r2,56
10004270:	1100b116 	blt	r2,r4,10004538 <__adddf3+0x50c>
10004274:	008007c4 	movi	r2,31
10004278:	1100e216 	blt	r2,r4,10004604 <__adddf3+0x5d8>
1000427c:	00800804 	movi	r2,32
10004280:	1105c83a 	sub	r2,r2,r4
10004284:	4092983a 	sll	r9,r8,r2
10004288:	310ed83a 	srl	r7,r6,r4
1000428c:	3084983a 	sll	r2,r6,r2
10004290:	4110d83a 	srl	r8,r8,r4
10004294:	49ccb03a 	or	r6,r9,r7
10004298:	1004c03a 	cmpne	r2,r2,zero
1000429c:	308cb03a 	or	r6,r6,r2
100042a0:	344d883a 	add	r6,r6,r17
100042a4:	3463803a 	cmpltu	r17,r6,r17
100042a8:	414b883a 	add	r5,r8,r5
100042ac:	2c4b883a 	add	r5,r5,r17
100042b0:	3023883a 	mov	r17,r6
100042b4:	2880202c 	andhi	r2,r5,128
100042b8:	10002726 	beq	r2,zero,10004358 <__adddf3+0x32c>
100042bc:	84000044 	addi	r16,r16,1
100042c0:	0081ffc4 	movi	r2,2047
100042c4:	8080ae26 	beq	r16,r2,10004580 <__adddf3+0x554>
100042c8:	00bfe034 	movhi	r2,65408
100042cc:	10bfffc4 	addi	r2,r2,-1
100042d0:	288a703a 	and	r5,r5,r2
100042d4:	880cd07a 	srli	r6,r17,1
100042d8:	280897fa 	slli	r4,r5,31
100042dc:	88c0004c 	andi	r3,r17,1
100042e0:	30e2b03a 	or	r17,r6,r3
100042e4:	280ad07a 	srli	r5,r5,1
100042e8:	8922b03a 	or	r17,r17,r4
100042ec:	003f6e06 	br	100040a8 <__alt_data_end+0xf80040a8>
100042f0:	1148b03a 	or	r4,r2,r5
100042f4:	20003c26 	beq	r4,zero,100043e8 <__adddf3+0x3bc>
100042f8:	29000234 	orhi	r4,r5,8
100042fc:	01400434 	movhi	r5,16
10004300:	297fffc4 	addi	r5,r5,-1
10004304:	2148703a 	and	r4,r4,r5
10004308:	003f7f06 	br	10004108 <__alt_data_end+0xf8004108>
1000430c:	18ffffc4 	addi	r3,r3,-1
10004310:	18004d1e 	bne	r3,zero,10004448 <__adddf3+0x41c>
10004314:	898dc83a 	sub	r6,r17,r6
10004318:	89a3803a 	cmpltu	r17,r17,r6
1000431c:	2a0bc83a 	sub	r5,r5,r8
10004320:	2c4bc83a 	sub	r5,r5,r17
10004324:	3023883a 	mov	r17,r6
10004328:	003f9c06 	br	1000419c <__alt_data_end+0xf800419c>
1000432c:	4184b03a 	or	r2,r8,r6
10004330:	103f5d26 	beq	r2,zero,100040a8 <__alt_data_end+0xf80040a8>
10004334:	213fffc4 	addi	r4,r4,-1
10004338:	203fd926 	beq	r4,zero,100042a0 <__alt_data_end+0xf80042a0>
1000433c:	0081ffc4 	movi	r2,2047
10004340:	80bfca1e 	bne	r16,r2,1000426c <__alt_data_end+0xf800426c>
10004344:	003f5806 	br	100040a8 <__alt_data_end+0xf80040a8>
10004348:	10c8b03a 	or	r4,r2,r3
1000434c:	20008b26 	beq	r4,zero,1000457c <__adddf3+0x550>
10004350:	100b883a 	mov	r5,r2
10004354:	1823883a 	mov	r17,r3
10004358:	888001cc 	andi	r2,r17,7
1000435c:	103f541e 	bne	r2,zero,100040b0 <__alt_data_end+0xf80040b0>
10004360:	9007883a 	mov	r3,r18
10004364:	003fb006 	br	10004228 <__alt_data_end+0xf8004228>
10004368:	1800531e 	bne	r3,zero,100044b8 <__adddf3+0x48c>
1000436c:	80800044 	addi	r2,r16,1
10004370:	1081ffcc 	andi	r2,r2,2047
10004374:	00c00044 	movi	r3,1
10004378:	1880990e 	bge	r3,r2,100045e0 <__adddf3+0x5b4>
1000437c:	8985c83a 	sub	r2,r17,r6
10004380:	8887803a 	cmpltu	r3,r17,r2
10004384:	2a27c83a 	sub	r19,r5,r8
10004388:	98e7c83a 	sub	r19,r19,r3
1000438c:	98c0202c 	andhi	r3,r19,128
10004390:	18006226 	beq	r3,zero,1000451c <__adddf3+0x4f0>
10004394:	3463c83a 	sub	r17,r6,r17
10004398:	4151c83a 	sub	r8,r8,r5
1000439c:	344d803a 	cmpltu	r6,r6,r17
100043a0:	41a7c83a 	sub	r19,r8,r6
100043a4:	3825883a 	mov	r18,r7
100043a8:	983f821e 	bne	r19,zero,100041b4 <__alt_data_end+0xf80041b4>
100043ac:	8809883a 	mov	r4,r17
100043b0:	00067c40 	call	100067c4 <__clzsi2>
100043b4:	10800804 	addi	r2,r2,32
100043b8:	10fffe04 	addi	r3,r2,-8
100043bc:	010007c4 	movi	r4,31
100043c0:	20ff810e 	bge	r4,r3,100041c8 <__alt_data_end+0xf80041c8>
100043c4:	14fff604 	addi	r19,r2,-40
100043c8:	8ce6983a 	sll	r19,r17,r19
100043cc:	0023883a 	mov	r17,zero
100043d0:	1c3f840e 	bge	r3,r16,100041e4 <__alt_data_end+0xf80041e4>
100043d4:	017fe034 	movhi	r5,65408
100043d8:	297fffc4 	addi	r5,r5,-1
100043dc:	80e1c83a 	sub	r16,r16,r3
100043e0:	994a703a 	and	r5,r19,r5
100043e4:	003f3006 	br	100040a8 <__alt_data_end+0xf80040a8>
100043e8:	0009883a 	mov	r4,zero
100043ec:	0005883a 	mov	r2,zero
100043f0:	003f4506 	br	10004108 <__alt_data_end+0xf8004108>
100043f4:	418cb03a 	or	r6,r8,r6
100043f8:	300cc03a 	cmpne	r6,r6,zero
100043fc:	0007883a 	mov	r3,zero
10004400:	003f6106 	br	10004188 <__alt_data_end+0xf8004188>
10004404:	2000921e 	bne	r4,zero,10004650 <__adddf3+0x624>
10004408:	80800044 	addi	r2,r16,1
1000440c:	11c1ffcc 	andi	r7,r2,2047
10004410:	01000044 	movi	r4,1
10004414:	21c0610e 	bge	r4,r7,1000459c <__adddf3+0x570>
10004418:	0101ffc4 	movi	r4,2047
1000441c:	1100a326 	beq	r2,r4,100046ac <__adddf3+0x680>
10004420:	344d883a 	add	r6,r6,r17
10004424:	3463803a 	cmpltu	r17,r6,r17
10004428:	414b883a 	add	r5,r8,r5
1000442c:	2c4b883a 	add	r5,r5,r17
10004430:	282297fa 	slli	r17,r5,31
10004434:	300cd07a 	srli	r6,r6,1
10004438:	280ad07a 	srli	r5,r5,1
1000443c:	1021883a 	mov	r16,r2
10004440:	89a2b03a 	or	r17,r17,r6
10004444:	003f1806 	br	100040a8 <__alt_data_end+0xf80040a8>
10004448:	0081ffc4 	movi	r2,2047
1000444c:	80bf411e 	bne	r16,r2,10004154 <__alt_data_end+0xf8004154>
10004450:	003f1506 	br	100040a8 <__alt_data_end+0xf80040a8>
10004454:	80bff844 	addi	r2,r16,-31
10004458:	00c00804 	movi	r3,32
1000445c:	9884d83a 	srl	r2,r19,r2
10004460:	28c04a26 	beq	r5,r3,1000458c <__adddf3+0x560>
10004464:	00c00fc4 	movi	r3,63
10004468:	1c21c83a 	sub	r16,r3,r16
1000446c:	9c26983a 	sll	r19,r19,r16
10004470:	9c62b03a 	or	r17,r19,r17
10004474:	8822c03a 	cmpne	r17,r17,zero
10004478:	88a2b03a 	or	r17,r17,r2
1000447c:	000b883a 	mov	r5,zero
10004480:	0021883a 	mov	r16,zero
10004484:	003fb406 	br	10004358 <__alt_data_end+0xf8004358>
10004488:	18bff804 	addi	r2,r3,-32
1000448c:	01000804 	movi	r4,32
10004490:	4084d83a 	srl	r2,r8,r2
10004494:	19003f26 	beq	r3,r4,10004594 <__adddf3+0x568>
10004498:	01001004 	movi	r4,64
1000449c:	20c7c83a 	sub	r3,r4,r3
100044a0:	40d0983a 	sll	r8,r8,r3
100044a4:	418cb03a 	or	r6,r8,r6
100044a8:	300cc03a 	cmpne	r6,r6,zero
100044ac:	308cb03a 	or	r6,r6,r2
100044b0:	0007883a 	mov	r3,zero
100044b4:	003f3406 	br	10004188 <__alt_data_end+0xf8004188>
100044b8:	80002326 	beq	r16,zero,10004548 <__adddf3+0x51c>
100044bc:	0101ffc4 	movi	r4,2047
100044c0:	11005e26 	beq	r2,r4,1000463c <__adddf3+0x610>
100044c4:	00c7c83a 	sub	r3,zero,r3
100044c8:	29402034 	orhi	r5,r5,128
100044cc:	01000e04 	movi	r4,56
100044d0:	20c07216 	blt	r4,r3,1000469c <__adddf3+0x670>
100044d4:	010007c4 	movi	r4,31
100044d8:	20c0ce16 	blt	r4,r3,10004814 <__adddf3+0x7e8>
100044dc:	01000804 	movi	r4,32
100044e0:	20c9c83a 	sub	r4,r4,r3
100044e4:	2914983a 	sll	r10,r5,r4
100044e8:	88d2d83a 	srl	r9,r17,r3
100044ec:	8908983a 	sll	r4,r17,r4
100044f0:	28c6d83a 	srl	r3,r5,r3
100044f4:	5262b03a 	or	r17,r10,r9
100044f8:	2008c03a 	cmpne	r4,r4,zero
100044fc:	8922b03a 	or	r17,r17,r4
10004500:	3463c83a 	sub	r17,r6,r17
10004504:	40c7c83a 	sub	r3,r8,r3
10004508:	344d803a 	cmpltu	r6,r6,r17
1000450c:	198bc83a 	sub	r5,r3,r6
10004510:	1021883a 	mov	r16,r2
10004514:	3825883a 	mov	r18,r7
10004518:	003f2006 	br	1000419c <__alt_data_end+0xf800419c>
1000451c:	9886b03a 	or	r3,r19,r2
10004520:	1800141e 	bne	r3,zero,10004574 <__adddf3+0x548>
10004524:	0007883a 	mov	r3,zero
10004528:	000b883a 	mov	r5,zero
1000452c:	0023883a 	mov	r17,zero
10004530:	0021883a 	mov	r16,zero
10004534:	003f3c06 	br	10004228 <__alt_data_end+0xf8004228>
10004538:	418cb03a 	or	r6,r8,r6
1000453c:	300cc03a 	cmpne	r6,r6,zero
10004540:	0011883a 	mov	r8,zero
10004544:	003f5606 	br	100042a0 <__alt_data_end+0xf80042a0>
10004548:	2c48b03a 	or	r4,r5,r17
1000454c:	20003b26 	beq	r4,zero,1000463c <__adddf3+0x610>
10004550:	00c6303a 	nor	r3,zero,r3
10004554:	1800371e 	bne	r3,zero,10004634 <__adddf3+0x608>
10004558:	3463c83a 	sub	r17,r6,r17
1000455c:	414bc83a 	sub	r5,r8,r5
10004560:	344d803a 	cmpltu	r6,r6,r17
10004564:	298bc83a 	sub	r5,r5,r6
10004568:	1021883a 	mov	r16,r2
1000456c:	3825883a 	mov	r18,r7
10004570:	003f0a06 	br	1000419c <__alt_data_end+0xf800419c>
10004574:	1023883a 	mov	r17,r2
10004578:	003f0d06 	br	100041b0 <__alt_data_end+0xf80041b0>
1000457c:	0007883a 	mov	r3,zero
10004580:	000b883a 	mov	r5,zero
10004584:	0023883a 	mov	r17,zero
10004588:	003f2706 	br	10004228 <__alt_data_end+0xf8004228>
1000458c:	0027883a 	mov	r19,zero
10004590:	003fb706 	br	10004470 <__alt_data_end+0xf8004470>
10004594:	0011883a 	mov	r8,zero
10004598:	003fc206 	br	100044a4 <__alt_data_end+0xf80044a4>
1000459c:	2c44b03a 	or	r2,r5,r17
100045a0:	8000871e 	bne	r16,zero,100047c0 <__adddf3+0x794>
100045a4:	1000b126 	beq	r2,zero,1000486c <__adddf3+0x840>
100045a8:	4184b03a 	or	r2,r8,r6
100045ac:	103ebe26 	beq	r2,zero,100040a8 <__alt_data_end+0xf80040a8>
100045b0:	3445883a 	add	r2,r6,r17
100045b4:	1463803a 	cmpltu	r17,r2,r17
100045b8:	414b883a 	add	r5,r8,r5
100045bc:	2c4b883a 	add	r5,r5,r17
100045c0:	28c0202c 	andhi	r3,r5,128
100045c4:	1023883a 	mov	r17,r2
100045c8:	183f6326 	beq	r3,zero,10004358 <__alt_data_end+0xf8004358>
100045cc:	00bfe034 	movhi	r2,65408
100045d0:	10bfffc4 	addi	r2,r2,-1
100045d4:	2021883a 	mov	r16,r4
100045d8:	288a703a 	and	r5,r5,r2
100045dc:	003eb206 	br	100040a8 <__alt_data_end+0xf80040a8>
100045e0:	2c44b03a 	or	r2,r5,r17
100045e4:	8000251e 	bne	r16,zero,1000467c <__adddf3+0x650>
100045e8:	10004b1e 	bne	r2,zero,10004718 <__adddf3+0x6ec>
100045ec:	4184b03a 	or	r2,r8,r6
100045f0:	103fe226 	beq	r2,zero,1000457c <__alt_data_end+0xf800457c>
100045f4:	400b883a 	mov	r5,r8
100045f8:	3023883a 	mov	r17,r6
100045fc:	3825883a 	mov	r18,r7
10004600:	003ea906 	br	100040a8 <__alt_data_end+0xf80040a8>
10004604:	20bff804 	addi	r2,r4,-32
10004608:	01c00804 	movi	r7,32
1000460c:	4084d83a 	srl	r2,r8,r2
10004610:	21c07e26 	beq	r4,r7,1000480c <__adddf3+0x7e0>
10004614:	01c01004 	movi	r7,64
10004618:	3909c83a 	sub	r4,r7,r4
1000461c:	4110983a 	sll	r8,r8,r4
10004620:	418cb03a 	or	r6,r8,r6
10004624:	300cc03a 	cmpne	r6,r6,zero
10004628:	308cb03a 	or	r6,r6,r2
1000462c:	0011883a 	mov	r8,zero
10004630:	003f1b06 	br	100042a0 <__alt_data_end+0xf80042a0>
10004634:	0101ffc4 	movi	r4,2047
10004638:	113fa41e 	bne	r2,r4,100044cc <__alt_data_end+0xf80044cc>
1000463c:	400b883a 	mov	r5,r8
10004640:	3023883a 	mov	r17,r6
10004644:	1021883a 	mov	r16,r2
10004648:	3825883a 	mov	r18,r7
1000464c:	003e9606 	br	100040a8 <__alt_data_end+0xf80040a8>
10004650:	80001a1e 	bne	r16,zero,100046bc <__adddf3+0x690>
10004654:	2c4eb03a 	or	r7,r5,r17
10004658:	38005526 	beq	r7,zero,100047b0 <__adddf3+0x784>
1000465c:	0108303a 	nor	r4,zero,r4
10004660:	2000511e 	bne	r4,zero,100047a8 <__adddf3+0x77c>
10004664:	89a3883a 	add	r17,r17,r6
10004668:	414b883a 	add	r5,r8,r5
1000466c:	898d803a 	cmpltu	r6,r17,r6
10004670:	298b883a 	add	r5,r5,r6
10004674:	1021883a 	mov	r16,r2
10004678:	003f0e06 	br	100042b4 <__alt_data_end+0xf80042b4>
1000467c:	1000341e 	bne	r2,zero,10004750 <__adddf3+0x724>
10004680:	4184b03a 	or	r2,r8,r6
10004684:	10006f26 	beq	r2,zero,10004844 <__adddf3+0x818>
10004688:	400b883a 	mov	r5,r8
1000468c:	3023883a 	mov	r17,r6
10004690:	3825883a 	mov	r18,r7
10004694:	0401ffc4 	movi	r16,2047
10004698:	003e8306 	br	100040a8 <__alt_data_end+0xf80040a8>
1000469c:	2c62b03a 	or	r17,r5,r17
100046a0:	8822c03a 	cmpne	r17,r17,zero
100046a4:	0007883a 	mov	r3,zero
100046a8:	003f9506 	br	10004500 <__alt_data_end+0xf8004500>
100046ac:	1021883a 	mov	r16,r2
100046b0:	000b883a 	mov	r5,zero
100046b4:	0023883a 	mov	r17,zero
100046b8:	003edb06 	br	10004228 <__alt_data_end+0xf8004228>
100046bc:	01c1ffc4 	movi	r7,2047
100046c0:	11c03b26 	beq	r2,r7,100047b0 <__adddf3+0x784>
100046c4:	0109c83a 	sub	r4,zero,r4
100046c8:	29402034 	orhi	r5,r5,128
100046cc:	01c00e04 	movi	r7,56
100046d0:	39006216 	blt	r7,r4,1000485c <__adddf3+0x830>
100046d4:	01c007c4 	movi	r7,31
100046d8:	39006b16 	blt	r7,r4,10004888 <__adddf3+0x85c>
100046dc:	01c00804 	movi	r7,32
100046e0:	390fc83a 	sub	r7,r7,r4
100046e4:	29d4983a 	sll	r10,r5,r7
100046e8:	8912d83a 	srl	r9,r17,r4
100046ec:	89ce983a 	sll	r7,r17,r7
100046f0:	2908d83a 	srl	r4,r5,r4
100046f4:	5262b03a 	or	r17,r10,r9
100046f8:	380ac03a 	cmpne	r5,r7,zero
100046fc:	8962b03a 	or	r17,r17,r5
10004700:	89a3883a 	add	r17,r17,r6
10004704:	2211883a 	add	r8,r4,r8
10004708:	898d803a 	cmpltu	r6,r17,r6
1000470c:	418b883a 	add	r5,r8,r6
10004710:	1021883a 	mov	r16,r2
10004714:	003ee706 	br	100042b4 <__alt_data_end+0xf80042b4>
10004718:	4184b03a 	or	r2,r8,r6
1000471c:	103e6226 	beq	r2,zero,100040a8 <__alt_data_end+0xf80040a8>
10004720:	8987c83a 	sub	r3,r17,r6
10004724:	88c9803a 	cmpltu	r4,r17,r3
10004728:	2a05c83a 	sub	r2,r5,r8
1000472c:	1105c83a 	sub	r2,r2,r4
10004730:	1100202c 	andhi	r4,r2,128
10004734:	203f0426 	beq	r4,zero,10004348 <__alt_data_end+0xf8004348>
10004738:	3463c83a 	sub	r17,r6,r17
1000473c:	414bc83a 	sub	r5,r8,r5
10004740:	344d803a 	cmpltu	r6,r6,r17
10004744:	298bc83a 	sub	r5,r5,r6
10004748:	3825883a 	mov	r18,r7
1000474c:	003e5606 	br	100040a8 <__alt_data_end+0xf80040a8>
10004750:	4184b03a 	or	r2,r8,r6
10004754:	10002b26 	beq	r2,zero,10004804 <__adddf3+0x7d8>
10004758:	2804d0fa 	srli	r2,r5,3
1000475c:	8822d0fa 	srli	r17,r17,3
10004760:	280a977a 	slli	r5,r5,29
10004764:	10c0022c 	andhi	r3,r2,8
10004768:	2c62b03a 	or	r17,r5,r17
1000476c:	18000826 	beq	r3,zero,10004790 <__adddf3+0x764>
10004770:	4008d0fa 	srli	r4,r8,3
10004774:	20c0022c 	andhi	r3,r4,8
10004778:	1800051e 	bne	r3,zero,10004790 <__adddf3+0x764>
1000477c:	300cd0fa 	srli	r6,r6,3
10004780:	4010977a 	slli	r8,r8,29
10004784:	2005883a 	mov	r2,r4
10004788:	3825883a 	mov	r18,r7
1000478c:	41a2b03a 	or	r17,r8,r6
10004790:	880ad77a 	srli	r5,r17,29
10004794:	100490fa 	slli	r2,r2,3
10004798:	882290fa 	slli	r17,r17,3
1000479c:	0401ffc4 	movi	r16,2047
100047a0:	288ab03a 	or	r5,r5,r2
100047a4:	003e4006 	br	100040a8 <__alt_data_end+0xf80040a8>
100047a8:	01c1ffc4 	movi	r7,2047
100047ac:	11ffc71e 	bne	r2,r7,100046cc <__alt_data_end+0xf80046cc>
100047b0:	400b883a 	mov	r5,r8
100047b4:	3023883a 	mov	r17,r6
100047b8:	1021883a 	mov	r16,r2
100047bc:	003e3a06 	br	100040a8 <__alt_data_end+0xf80040a8>
100047c0:	10002d26 	beq	r2,zero,10004878 <__adddf3+0x84c>
100047c4:	4184b03a 	or	r2,r8,r6
100047c8:	10000e26 	beq	r2,zero,10004804 <__adddf3+0x7d8>
100047cc:	2804d0fa 	srli	r2,r5,3
100047d0:	8822d0fa 	srli	r17,r17,3
100047d4:	280a977a 	slli	r5,r5,29
100047d8:	10c0022c 	andhi	r3,r2,8
100047dc:	2c62b03a 	or	r17,r5,r17
100047e0:	183feb26 	beq	r3,zero,10004790 <__alt_data_end+0xf8004790>
100047e4:	4008d0fa 	srli	r4,r8,3
100047e8:	20c0022c 	andhi	r3,r4,8
100047ec:	183fe81e 	bne	r3,zero,10004790 <__alt_data_end+0xf8004790>
100047f0:	300cd0fa 	srli	r6,r6,3
100047f4:	4010977a 	slli	r8,r8,29
100047f8:	2005883a 	mov	r2,r4
100047fc:	41a2b03a 	or	r17,r8,r6
10004800:	003fe306 	br	10004790 <__alt_data_end+0xf8004790>
10004804:	0401ffc4 	movi	r16,2047
10004808:	003e2706 	br	100040a8 <__alt_data_end+0xf80040a8>
1000480c:	0011883a 	mov	r8,zero
10004810:	003f8306 	br	10004620 <__alt_data_end+0xf8004620>
10004814:	193ff804 	addi	r4,r3,-32
10004818:	02400804 	movi	r9,32
1000481c:	2908d83a 	srl	r4,r5,r4
10004820:	1a402526 	beq	r3,r9,100048b8 <__adddf3+0x88c>
10004824:	02401004 	movi	r9,64
10004828:	48c7c83a 	sub	r3,r9,r3
1000482c:	28ca983a 	sll	r5,r5,r3
10004830:	2c62b03a 	or	r17,r5,r17
10004834:	8822c03a 	cmpne	r17,r17,zero
10004838:	8922b03a 	or	r17,r17,r4
1000483c:	0007883a 	mov	r3,zero
10004840:	003f2f06 	br	10004500 <__alt_data_end+0xf8004500>
10004844:	01402034 	movhi	r5,128
10004848:	0007883a 	mov	r3,zero
1000484c:	297fffc4 	addi	r5,r5,-1
10004850:	047ffe04 	movi	r17,-8
10004854:	0401ffc4 	movi	r16,2047
10004858:	003e7306 	br	10004228 <__alt_data_end+0xf8004228>
1000485c:	2c62b03a 	or	r17,r5,r17
10004860:	8822c03a 	cmpne	r17,r17,zero
10004864:	0009883a 	mov	r4,zero
10004868:	003fa506 	br	10004700 <__alt_data_end+0xf8004700>
1000486c:	400b883a 	mov	r5,r8
10004870:	3023883a 	mov	r17,r6
10004874:	003e0c06 	br	100040a8 <__alt_data_end+0xf80040a8>
10004878:	400b883a 	mov	r5,r8
1000487c:	3023883a 	mov	r17,r6
10004880:	0401ffc4 	movi	r16,2047
10004884:	003e0806 	br	100040a8 <__alt_data_end+0xf80040a8>
10004888:	21fff804 	addi	r7,r4,-32
1000488c:	02400804 	movi	r9,32
10004890:	29ced83a 	srl	r7,r5,r7
10004894:	22400a26 	beq	r4,r9,100048c0 <__adddf3+0x894>
10004898:	02401004 	movi	r9,64
1000489c:	4909c83a 	sub	r4,r9,r4
100048a0:	290a983a 	sll	r5,r5,r4
100048a4:	2c62b03a 	or	r17,r5,r17
100048a8:	8822c03a 	cmpne	r17,r17,zero
100048ac:	89e2b03a 	or	r17,r17,r7
100048b0:	0009883a 	mov	r4,zero
100048b4:	003f9206 	br	10004700 <__alt_data_end+0xf8004700>
100048b8:	000b883a 	mov	r5,zero
100048bc:	003fdc06 	br	10004830 <__alt_data_end+0xf8004830>
100048c0:	000b883a 	mov	r5,zero
100048c4:	003ff706 	br	100048a4 <__alt_data_end+0xf80048a4>

100048c8 <__divdf3>:
100048c8:	defff004 	addi	sp,sp,-64
100048cc:	dc800815 	stw	r18,32(sp)
100048d0:	2824d53a 	srli	r18,r5,20
100048d4:	dd800c15 	stw	r22,48(sp)
100048d8:	282cd7fa 	srli	r22,r5,31
100048dc:	dc000615 	stw	r16,24(sp)
100048e0:	04000434 	movhi	r16,16
100048e4:	df000e15 	stw	fp,56(sp)
100048e8:	dd000a15 	stw	r20,40(sp)
100048ec:	dcc00915 	stw	r19,36(sp)
100048f0:	dc400715 	stw	r17,28(sp)
100048f4:	843fffc4 	addi	r16,r16,-1
100048f8:	dfc00f15 	stw	ra,60(sp)
100048fc:	ddc00d15 	stw	r23,52(sp)
10004900:	dd400b15 	stw	r21,44(sp)
10004904:	9481ffcc 	andi	r18,r18,2047
10004908:	2029883a 	mov	r20,r4
1000490c:	2027883a 	mov	r19,r4
10004910:	2c22703a 	and	r17,r5,r16
10004914:	b7003fcc 	andi	fp,r22,255
10004918:	90005e26 	beq	r18,zero,10004a94 <__divdf3+0x1cc>
1000491c:	0081ffc4 	movi	r2,2047
10004920:	90803526 	beq	r18,r2,100049f8 <__divdf3+0x130>
10004924:	8c000434 	orhi	r16,r17,16
10004928:	2004d77a 	srli	r2,r4,29
1000492c:	802090fa 	slli	r16,r16,3
10004930:	202690fa 	slli	r19,r4,3
10004934:	94bf0044 	addi	r18,r18,-1023
10004938:	80a2b03a 	or	r17,r16,r2
1000493c:	0029883a 	mov	r20,zero
10004940:	0011883a 	mov	r8,zero
10004944:	380ad53a 	srli	r5,r7,20
10004948:	382ed7fa 	srli	r23,r7,31
1000494c:	04000434 	movhi	r16,16
10004950:	843fffc4 	addi	r16,r16,-1
10004954:	2941ffcc 	andi	r5,r5,2047
10004958:	302b883a 	mov	r21,r6
1000495c:	3c20703a 	and	r16,r7,r16
10004960:	ba403fcc 	andi	r9,r23,255
10004964:	28006726 	beq	r5,zero,10004b04 <__divdf3+0x23c>
10004968:	0081ffc4 	movi	r2,2047
1000496c:	28805f26 	beq	r5,r2,10004aec <__divdf3+0x224>
10004970:	84000434 	orhi	r16,r16,16
10004974:	3004d77a 	srli	r2,r6,29
10004978:	802090fa 	slli	r16,r16,3
1000497c:	302a90fa 	slli	r21,r6,3
10004980:	297f0044 	addi	r5,r5,-1023
10004984:	80a0b03a 	or	r16,r16,r2
10004988:	000f883a 	mov	r7,zero
1000498c:	3d06b03a 	or	r3,r7,r20
10004990:	180690ba 	slli	r3,r3,2
10004994:	00840034 	movhi	r2,4096
10004998:	10926e04 	addi	r2,r2,18872
1000499c:	1885883a 	add	r2,r3,r2
100049a0:	10800017 	ldw	r2,0(r2)
100049a4:	b5c8f03a 	xor	r4,r22,r23
100049a8:	200d883a 	mov	r6,r4
100049ac:	25003fcc 	andi	r20,r4,255
100049b0:	9165c83a 	sub	r18,r18,r5
100049b4:	1000683a 	jmp	r2
100049b8:	10004c00 	call	110004c0 <_gp+0xfee1fc>
100049bc:	10004a30 	cmpltui	zero,r2,296
100049c0:	10004bc4 	addi	zero,r2,303
100049c4:	10004a14 	ori	zero,r2,296
100049c8:	10004bc4 	addi	zero,r2,303
100049cc:	10004b98 	cmpnei	zero,r2,302
100049d0:	10004bc4 	addi	zero,r2,303
100049d4:	10004a14 	ori	zero,r2,296
100049d8:	10004a30 	cmpltui	zero,r2,296
100049dc:	10004a30 	cmpltui	zero,r2,296
100049e0:	10004b98 	cmpnei	zero,r2,302
100049e4:	10004a14 	ori	zero,r2,296
100049e8:	10004a24 	muli	zero,r2,296
100049ec:	10004a24 	muli	zero,r2,296
100049f0:	10004a24 	muli	zero,r2,296
100049f4:	10004bd4 	ori	zero,r2,303
100049f8:	8904b03a 	or	r2,r17,r4
100049fc:	1000631e 	bne	r2,zero,10004b8c <__divdf3+0x2c4>
10004a00:	05000204 	movi	r20,8
10004a04:	0023883a 	mov	r17,zero
10004a08:	0027883a 	mov	r19,zero
10004a0c:	02000084 	movi	r8,2
10004a10:	003fcc06 	br	10004944 <__alt_data_end+0xf8004944>
10004a14:	8023883a 	mov	r17,r16
10004a18:	a827883a 	mov	r19,r21
10004a1c:	4839883a 	mov	fp,r9
10004a20:	3811883a 	mov	r8,r7
10004a24:	00800084 	movi	r2,2
10004a28:	4081531e 	bne	r8,r2,10004f78 <__divdf3+0x6b0>
10004a2c:	e029883a 	mov	r20,fp
10004a30:	a180004c 	andi	r6,r20,1
10004a34:	0201ffc4 	movi	r8,2047
10004a38:	000b883a 	mov	r5,zero
10004a3c:	0027883a 	mov	r19,zero
10004a40:	4010953a 	slli	r8,r8,20
10004a44:	30c03fcc 	andi	r3,r6,255
10004a48:	04000434 	movhi	r16,16
10004a4c:	180697fa 	slli	r3,r3,31
10004a50:	843fffc4 	addi	r16,r16,-1
10004a54:	2c20703a 	and	r16,r5,r16
10004a58:	8220b03a 	or	r16,r16,r8
10004a5c:	80c6b03a 	or	r3,r16,r3
10004a60:	9805883a 	mov	r2,r19
10004a64:	dfc00f17 	ldw	ra,60(sp)
10004a68:	df000e17 	ldw	fp,56(sp)
10004a6c:	ddc00d17 	ldw	r23,52(sp)
10004a70:	dd800c17 	ldw	r22,48(sp)
10004a74:	dd400b17 	ldw	r21,44(sp)
10004a78:	dd000a17 	ldw	r20,40(sp)
10004a7c:	dcc00917 	ldw	r19,36(sp)
10004a80:	dc800817 	ldw	r18,32(sp)
10004a84:	dc400717 	ldw	r17,28(sp)
10004a88:	dc000617 	ldw	r16,24(sp)
10004a8c:	dec01004 	addi	sp,sp,64
10004a90:	f800283a 	ret
10004a94:	8904b03a 	or	r2,r17,r4
10004a98:	10003726 	beq	r2,zero,10004b78 <__divdf3+0x2b0>
10004a9c:	88014d26 	beq	r17,zero,10004fd4 <__divdf3+0x70c>
10004aa0:	8809883a 	mov	r4,r17
10004aa4:	d9800215 	stw	r6,8(sp)
10004aa8:	d9c00515 	stw	r7,20(sp)
10004aac:	00067c40 	call	100067c4 <__clzsi2>
10004ab0:	d9800217 	ldw	r6,8(sp)
10004ab4:	d9c00517 	ldw	r7,20(sp)
10004ab8:	1007883a 	mov	r3,r2
10004abc:	01000a04 	movi	r4,40
10004ac0:	1cfffe04 	addi	r19,r3,-8
10004ac4:	20c9c83a 	sub	r4,r4,r3
10004ac8:	8cca983a 	sll	r5,r17,r19
10004acc:	a108d83a 	srl	r4,r20,r4
10004ad0:	a4e6983a 	sll	r19,r20,r19
10004ad4:	2162b03a 	or	r17,r4,r5
10004ad8:	04bf0344 	movi	r18,-1011
10004adc:	90e5c83a 	sub	r18,r18,r3
10004ae0:	0029883a 	mov	r20,zero
10004ae4:	0011883a 	mov	r8,zero
10004ae8:	003f9606 	br	10004944 <__alt_data_end+0xf8004944>
10004aec:	8184b03a 	or	r2,r16,r6
10004af0:	10001f1e 	bne	r2,zero,10004b70 <__divdf3+0x2a8>
10004af4:	0021883a 	mov	r16,zero
10004af8:	002b883a 	mov	r21,zero
10004afc:	01c00084 	movi	r7,2
10004b00:	003fa206 	br	1000498c <__alt_data_end+0xf800498c>
10004b04:	8184b03a 	or	r2,r16,r6
10004b08:	10001526 	beq	r2,zero,10004b60 <__divdf3+0x298>
10004b0c:	80013d26 	beq	r16,zero,10005004 <__divdf3+0x73c>
10004b10:	8009883a 	mov	r4,r16
10004b14:	d9800215 	stw	r6,8(sp)
10004b18:	da000315 	stw	r8,12(sp)
10004b1c:	da400415 	stw	r9,16(sp)
10004b20:	00067c40 	call	100067c4 <__clzsi2>
10004b24:	d9800217 	ldw	r6,8(sp)
10004b28:	da000317 	ldw	r8,12(sp)
10004b2c:	da400417 	ldw	r9,16(sp)
10004b30:	1007883a 	mov	r3,r2
10004b34:	01000a04 	movi	r4,40
10004b38:	1d7ffe04 	addi	r21,r3,-8
10004b3c:	20c9c83a 	sub	r4,r4,r3
10004b40:	8560983a 	sll	r16,r16,r21
10004b44:	3108d83a 	srl	r4,r6,r4
10004b48:	356a983a 	sll	r21,r6,r21
10004b4c:	2420b03a 	or	r16,r4,r16
10004b50:	017f0344 	movi	r5,-1011
10004b54:	28cbc83a 	sub	r5,r5,r3
10004b58:	000f883a 	mov	r7,zero
10004b5c:	003f8b06 	br	1000498c <__alt_data_end+0xf800498c>
10004b60:	0021883a 	mov	r16,zero
10004b64:	002b883a 	mov	r21,zero
10004b68:	01c00044 	movi	r7,1
10004b6c:	003f8706 	br	1000498c <__alt_data_end+0xf800498c>
10004b70:	01c000c4 	movi	r7,3
10004b74:	003f8506 	br	1000498c <__alt_data_end+0xf800498c>
10004b78:	05000104 	movi	r20,4
10004b7c:	0023883a 	mov	r17,zero
10004b80:	0027883a 	mov	r19,zero
10004b84:	02000044 	movi	r8,1
10004b88:	003f6e06 	br	10004944 <__alt_data_end+0xf8004944>
10004b8c:	05000304 	movi	r20,12
10004b90:	020000c4 	movi	r8,3
10004b94:	003f6b06 	br	10004944 <__alt_data_end+0xf8004944>
10004b98:	01400434 	movhi	r5,16
10004b9c:	000d883a 	mov	r6,zero
10004ba0:	297fffc4 	addi	r5,r5,-1
10004ba4:	04ffffc4 	movi	r19,-1
10004ba8:	0201ffc4 	movi	r8,2047
10004bac:	003fa406 	br	10004a40 <__alt_data_end+0xf8004a40>
10004bb0:	043f0084 	movi	r16,-1022
10004bb4:	84a1c83a 	sub	r16,r16,r18
10004bb8:	00800e04 	movi	r2,56
10004bbc:	14014d0e 	bge	r2,r16,100050f4 <__divdf3+0x82c>
10004bc0:	a180004c 	andi	r6,r20,1
10004bc4:	0011883a 	mov	r8,zero
10004bc8:	000b883a 	mov	r5,zero
10004bcc:	0027883a 	mov	r19,zero
10004bd0:	003f9b06 	br	10004a40 <__alt_data_end+0xf8004a40>
10004bd4:	8880022c 	andhi	r2,r17,8
10004bd8:	1000f026 	beq	r2,zero,10004f9c <__divdf3+0x6d4>
10004bdc:	8080022c 	andhi	r2,r16,8
10004be0:	1000ee1e 	bne	r2,zero,10004f9c <__divdf3+0x6d4>
10004be4:	00800434 	movhi	r2,16
10004be8:	81400234 	orhi	r5,r16,8
10004bec:	10bfffc4 	addi	r2,r2,-1
10004bf0:	b80d883a 	mov	r6,r23
10004bf4:	288a703a 	and	r5,r5,r2
10004bf8:	a827883a 	mov	r19,r21
10004bfc:	003fea06 	br	10004ba8 <__alt_data_end+0xf8004ba8>
10004c00:	84411c36 	bltu	r16,r17,10005074 <__divdf3+0x7ac>
10004c04:	8c011a26 	beq	r17,r16,10005070 <__divdf3+0x7a8>
10004c08:	94bfffc4 	addi	r18,r18,-1
10004c0c:	dcc00015 	stw	r19,0(sp)
10004c10:	8811883a 	mov	r8,r17
10004c14:	002d883a 	mov	r22,zero
10004c18:	a80cd63a 	srli	r6,r21,24
10004c1c:	8020923a 	slli	r16,r16,8
10004c20:	a82a923a 	slli	r21,r21,8
10004c24:	4009883a 	mov	r4,r8
10004c28:	342eb03a 	or	r23,r6,r16
10004c2c:	dd400115 	stw	r21,4(sp)
10004c30:	b82ad43a 	srli	r21,r23,16
10004c34:	da000315 	stw	r8,12(sp)
10004c38:	bcffffcc 	andi	r19,r23,65535
10004c3c:	a80b883a 	mov	r5,r21
10004c40:	0003ff40 	call	10003ff4 <__udivsi3>
10004c44:	1009883a 	mov	r4,r2
10004c48:	980b883a 	mov	r5,r19
10004c4c:	1023883a 	mov	r17,r2
10004c50:	00040040 	call	10004004 <__mulsi3>
10004c54:	da000317 	ldw	r8,12(sp)
10004c58:	a80b883a 	mov	r5,r21
10004c5c:	1039883a 	mov	fp,r2
10004c60:	4009883a 	mov	r4,r8
10004c64:	0003ffc0 	call	10003ffc <__umodsi3>
10004c68:	d8c00017 	ldw	r3,0(sp)
10004c6c:	1004943a 	slli	r2,r2,16
10004c70:	1810d43a 	srli	r8,r3,16
10004c74:	120eb03a 	or	r7,r2,r8
10004c78:	3f00062e 	bgeu	r7,fp,10004c94 <__divdf3+0x3cc>
10004c7c:	3dcf883a 	add	r7,r7,r23
10004c80:	88bfffc4 	addi	r2,r17,-1
10004c84:	3dc10a36 	bltu	r7,r23,100050b0 <__divdf3+0x7e8>
10004c88:	3f01092e 	bgeu	r7,fp,100050b0 <__divdf3+0x7e8>
10004c8c:	8c7fff84 	addi	r17,r17,-2
10004c90:	3dcf883a 	add	r7,r7,r23
10004c94:	3f39c83a 	sub	fp,r7,fp
10004c98:	e009883a 	mov	r4,fp
10004c9c:	a80b883a 	mov	r5,r21
10004ca0:	0003ff40 	call	10003ff4 <__udivsi3>
10004ca4:	1009883a 	mov	r4,r2
10004ca8:	980b883a 	mov	r5,r19
10004cac:	1021883a 	mov	r16,r2
10004cb0:	00040040 	call	10004004 <__mulsi3>
10004cb4:	e009883a 	mov	r4,fp
10004cb8:	a80b883a 	mov	r5,r21
10004cbc:	d8800315 	stw	r2,12(sp)
10004cc0:	0003ffc0 	call	10003ffc <__umodsi3>
10004cc4:	d9000017 	ldw	r4,0(sp)
10004cc8:	1004943a 	slli	r2,r2,16
10004ccc:	da000317 	ldw	r8,12(sp)
10004cd0:	20ffffcc 	andi	r3,r4,65535
10004cd4:	10ceb03a 	or	r7,r2,r3
10004cd8:	3a00062e 	bgeu	r7,r8,10004cf4 <__divdf3+0x42c>
10004cdc:	3dcf883a 	add	r7,r7,r23
10004ce0:	80bfffc4 	addi	r2,r16,-1
10004ce4:	3dc0f036 	bltu	r7,r23,100050a8 <__divdf3+0x7e0>
10004ce8:	3a00ef2e 	bgeu	r7,r8,100050a8 <__divdf3+0x7e0>
10004cec:	843fff84 	addi	r16,r16,-2
10004cf0:	3dcf883a 	add	r7,r7,r23
10004cf4:	d8c00117 	ldw	r3,4(sp)
10004cf8:	8822943a 	slli	r17,r17,16
10004cfc:	3a0fc83a 	sub	r7,r7,r8
10004d00:	1806d43a 	srli	r3,r3,16
10004d04:	8462b03a 	or	r17,r16,r17
10004d08:	8affffcc 	andi	r11,r17,65535
10004d0c:	d8c00015 	stw	r3,0(sp)
10004d10:	d8c00117 	ldw	r3,4(sp)
10004d14:	8820d43a 	srli	r16,r17,16
10004d18:	5809883a 	mov	r4,r11
10004d1c:	1f3fffcc 	andi	fp,r3,65535
10004d20:	e00b883a 	mov	r5,fp
10004d24:	d9c00515 	stw	r7,20(sp)
10004d28:	dac00215 	stw	r11,8(sp)
10004d2c:	00040040 	call	10004004 <__mulsi3>
10004d30:	8009883a 	mov	r4,r16
10004d34:	e00b883a 	mov	r5,fp
10004d38:	d8800415 	stw	r2,16(sp)
10004d3c:	00040040 	call	10004004 <__mulsi3>
10004d40:	d9400017 	ldw	r5,0(sp)
10004d44:	8009883a 	mov	r4,r16
10004d48:	d8800315 	stw	r2,12(sp)
10004d4c:	00040040 	call	10004004 <__mulsi3>
10004d50:	dac00217 	ldw	r11,8(sp)
10004d54:	d9400017 	ldw	r5,0(sp)
10004d58:	d8800215 	stw	r2,8(sp)
10004d5c:	5809883a 	mov	r4,r11
10004d60:	00040040 	call	10004004 <__mulsi3>
10004d64:	da400417 	ldw	r9,16(sp)
10004d68:	da800317 	ldw	r10,12(sp)
10004d6c:	d9c00517 	ldw	r7,20(sp)
10004d70:	480ad43a 	srli	r5,r9,16
10004d74:	5085883a 	add	r2,r10,r2
10004d78:	db000217 	ldw	r12,8(sp)
10004d7c:	1151883a 	add	r8,r2,r5
10004d80:	4280022e 	bgeu	r8,r10,10004d8c <__divdf3+0x4c4>
10004d84:	00800074 	movhi	r2,1
10004d88:	6099883a 	add	r12,r12,r2
10004d8c:	400ad43a 	srli	r5,r8,16
10004d90:	4010943a 	slli	r8,r8,16
10004d94:	4c3fffcc 	andi	r16,r9,65535
10004d98:	6149883a 	add	r4,r12,r5
10004d9c:	4411883a 	add	r8,r8,r16
10004da0:	3900a736 	bltu	r7,r4,10005040 <__divdf3+0x778>
10004da4:	3900c426 	beq	r7,r4,100050b8 <__divdf3+0x7f0>
10004da8:	3909c83a 	sub	r4,r7,r4
10004dac:	b221c83a 	sub	r16,r22,r8
10004db0:	b42d803a 	cmpltu	r22,r22,r16
10004db4:	25adc83a 	sub	r22,r4,r22
10004db8:	b5c0c626 	beq	r22,r23,100050d4 <__divdf3+0x80c>
10004dbc:	b009883a 	mov	r4,r22
10004dc0:	a80b883a 	mov	r5,r21
10004dc4:	0003ff40 	call	10003ff4 <__udivsi3>
10004dc8:	1009883a 	mov	r4,r2
10004dcc:	980b883a 	mov	r5,r19
10004dd0:	d8800315 	stw	r2,12(sp)
10004dd4:	00040040 	call	10004004 <__mulsi3>
10004dd8:	a80b883a 	mov	r5,r21
10004ddc:	b009883a 	mov	r4,r22
10004de0:	d8800415 	stw	r2,16(sp)
10004de4:	0003ffc0 	call	10003ffc <__umodsi3>
10004de8:	1004943a 	slli	r2,r2,16
10004dec:	800ed43a 	srli	r7,r16,16
10004df0:	da400417 	ldw	r9,16(sp)
10004df4:	da000317 	ldw	r8,12(sp)
10004df8:	11cab03a 	or	r5,r2,r7
10004dfc:	2a40062e 	bgeu	r5,r9,10004e18 <__divdf3+0x550>
10004e00:	2dcb883a 	add	r5,r5,r23
10004e04:	40bfffc4 	addi	r2,r8,-1
10004e08:	2dc0b436 	bltu	r5,r23,100050dc <__divdf3+0x814>
10004e0c:	2a40b32e 	bgeu	r5,r9,100050dc <__divdf3+0x814>
10004e10:	423fff84 	addi	r8,r8,-2
10004e14:	2dcb883a 	add	r5,r5,r23
10004e18:	2a6dc83a 	sub	r22,r5,r9
10004e1c:	b009883a 	mov	r4,r22
10004e20:	a80b883a 	mov	r5,r21
10004e24:	da000315 	stw	r8,12(sp)
10004e28:	0003ff40 	call	10003ff4 <__udivsi3>
10004e2c:	980b883a 	mov	r5,r19
10004e30:	1009883a 	mov	r4,r2
10004e34:	d8800415 	stw	r2,16(sp)
10004e38:	00040040 	call	10004004 <__mulsi3>
10004e3c:	b009883a 	mov	r4,r22
10004e40:	a80b883a 	mov	r5,r21
10004e44:	1027883a 	mov	r19,r2
10004e48:	0003ffc0 	call	10003ffc <__umodsi3>
10004e4c:	1004943a 	slli	r2,r2,16
10004e50:	843fffcc 	andi	r16,r16,65535
10004e54:	da000317 	ldw	r8,12(sp)
10004e58:	140eb03a 	or	r7,r2,r16
10004e5c:	da400417 	ldw	r9,16(sp)
10004e60:	3cc0062e 	bgeu	r7,r19,10004e7c <__divdf3+0x5b4>
10004e64:	3dcf883a 	add	r7,r7,r23
10004e68:	48bfffc4 	addi	r2,r9,-1
10004e6c:	3dc09d36 	bltu	r7,r23,100050e4 <__divdf3+0x81c>
10004e70:	3cc09c2e 	bgeu	r7,r19,100050e4 <__divdf3+0x81c>
10004e74:	4a7fff84 	addi	r9,r9,-2
10004e78:	3dcf883a 	add	r7,r7,r23
10004e7c:	4010943a 	slli	r8,r8,16
10004e80:	3cebc83a 	sub	r21,r7,r19
10004e84:	e00b883a 	mov	r5,fp
10004e88:	4a26b03a 	or	r19,r9,r8
10004e8c:	99ffffcc 	andi	r7,r19,65535
10004e90:	9820d43a 	srli	r16,r19,16
10004e94:	3809883a 	mov	r4,r7
10004e98:	d9c00515 	stw	r7,20(sp)
10004e9c:	00040040 	call	10004004 <__mulsi3>
10004ea0:	8009883a 	mov	r4,r16
10004ea4:	e00b883a 	mov	r5,fp
10004ea8:	102d883a 	mov	r22,r2
10004eac:	00040040 	call	10004004 <__mulsi3>
10004eb0:	d9400017 	ldw	r5,0(sp)
10004eb4:	8009883a 	mov	r4,r16
10004eb8:	1039883a 	mov	fp,r2
10004ebc:	00040040 	call	10004004 <__mulsi3>
10004ec0:	d9c00517 	ldw	r7,20(sp)
10004ec4:	d9400017 	ldw	r5,0(sp)
10004ec8:	1021883a 	mov	r16,r2
10004ecc:	3809883a 	mov	r4,r7
10004ed0:	00040040 	call	10004004 <__mulsi3>
10004ed4:	b008d43a 	srli	r4,r22,16
10004ed8:	e085883a 	add	r2,fp,r2
10004edc:	1109883a 	add	r4,r2,r4
10004ee0:	2700022e 	bgeu	r4,fp,10004eec <__divdf3+0x624>
10004ee4:	00800074 	movhi	r2,1
10004ee8:	80a1883a 	add	r16,r16,r2
10004eec:	200ad43a 	srli	r5,r4,16
10004ef0:	2008943a 	slli	r4,r4,16
10004ef4:	b5bfffcc 	andi	r22,r22,65535
10004ef8:	8145883a 	add	r2,r16,r5
10004efc:	2589883a 	add	r4,r4,r22
10004f00:	a8802c36 	bltu	r21,r2,10004fb4 <__divdf3+0x6ec>
10004f04:	a880a426 	beq	r21,r2,10005198 <__divdf3+0x8d0>
10004f08:	9cc00054 	ori	r19,r19,1
10004f0c:	9200ffc4 	addi	r8,r18,1023
10004f10:	023f270e 	bge	zero,r8,10004bb0 <__alt_data_end+0xf8004bb0>
10004f14:	988001cc 	andi	r2,r19,7
10004f18:	10000726 	beq	r2,zero,10004f38 <__divdf3+0x670>
10004f1c:	990003cc 	andi	r4,r19,15
10004f20:	00800104 	movi	r2,4
10004f24:	20800426 	beq	r4,r2,10004f38 <__divdf3+0x670>
10004f28:	9885883a 	add	r2,r19,r2
10004f2c:	14e7803a 	cmpltu	r19,r2,r19
10004f30:	8ce3883a 	add	r17,r17,r19
10004f34:	1027883a 	mov	r19,r2
10004f38:	8880402c 	andhi	r2,r17,256
10004f3c:	10000426 	beq	r2,zero,10004f50 <__divdf3+0x688>
10004f40:	00bfc034 	movhi	r2,65280
10004f44:	10bfffc4 	addi	r2,r2,-1
10004f48:	92010004 	addi	r8,r18,1024
10004f4c:	88a2703a 	and	r17,r17,r2
10004f50:	0081ff84 	movi	r2,2046
10004f54:	123eb616 	blt	r2,r8,10004a30 <__alt_data_end+0xf8004a30>
10004f58:	9826d0fa 	srli	r19,r19,3
10004f5c:	8804977a 	slli	r2,r17,29
10004f60:	8820927a 	slli	r16,r17,9
10004f64:	4201ffcc 	andi	r8,r8,2047
10004f68:	14e6b03a 	or	r19,r2,r19
10004f6c:	800ad33a 	srli	r5,r16,12
10004f70:	a180004c 	andi	r6,r20,1
10004f74:	003eb206 	br	10004a40 <__alt_data_end+0xf8004a40>
10004f78:	008000c4 	movi	r2,3
10004f7c:	4080ac26 	beq	r8,r2,10005230 <__divdf3+0x968>
10004f80:	00800044 	movi	r2,1
10004f84:	4080591e 	bne	r8,r2,100050ec <__divdf3+0x824>
10004f88:	e00d883a 	mov	r6,fp
10004f8c:	0011883a 	mov	r8,zero
10004f90:	000b883a 	mov	r5,zero
10004f94:	0027883a 	mov	r19,zero
10004f98:	003ea906 	br	10004a40 <__alt_data_end+0xf8004a40>
10004f9c:	00800434 	movhi	r2,16
10004fa0:	89400234 	orhi	r5,r17,8
10004fa4:	10bfffc4 	addi	r2,r2,-1
10004fa8:	b00d883a 	mov	r6,r22
10004fac:	288a703a 	and	r5,r5,r2
10004fb0:	003efd06 	br	10004ba8 <__alt_data_end+0xf8004ba8>
10004fb4:	adcf883a 	add	r7,r21,r23
10004fb8:	997fffc4 	addi	r5,r19,-1
10004fbc:	3dc0412e 	bgeu	r7,r23,100050c4 <__divdf3+0x7fc>
10004fc0:	2827883a 	mov	r19,r5
10004fc4:	38bfd01e 	bne	r7,r2,10004f08 <__alt_data_end+0xf8004f08>
10004fc8:	d8c00117 	ldw	r3,4(sp)
10004fcc:	193fce1e 	bne	r3,r4,10004f08 <__alt_data_end+0xf8004f08>
10004fd0:	003fce06 	br	10004f0c <__alt_data_end+0xf8004f0c>
10004fd4:	d9800215 	stw	r6,8(sp)
10004fd8:	d9c00515 	stw	r7,20(sp)
10004fdc:	00067c40 	call	100067c4 <__clzsi2>
10004fe0:	10c00804 	addi	r3,r2,32
10004fe4:	010009c4 	movi	r4,39
10004fe8:	d9800217 	ldw	r6,8(sp)
10004fec:	d9c00517 	ldw	r7,20(sp)
10004ff0:	20feb20e 	bge	r4,r3,10004abc <__alt_data_end+0xf8004abc>
10004ff4:	117ffe04 	addi	r5,r2,-8
10004ff8:	a162983a 	sll	r17,r20,r5
10004ffc:	0027883a 	mov	r19,zero
10005000:	003eb506 	br	10004ad8 <__alt_data_end+0xf8004ad8>
10005004:	3009883a 	mov	r4,r6
10005008:	d9800215 	stw	r6,8(sp)
1000500c:	da000315 	stw	r8,12(sp)
10005010:	da400415 	stw	r9,16(sp)
10005014:	00067c40 	call	100067c4 <__clzsi2>
10005018:	10c00804 	addi	r3,r2,32
1000501c:	010009c4 	movi	r4,39
10005020:	d9800217 	ldw	r6,8(sp)
10005024:	da000317 	ldw	r8,12(sp)
10005028:	da400417 	ldw	r9,16(sp)
1000502c:	20fec10e 	bge	r4,r3,10004b34 <__alt_data_end+0xf8004b34>
10005030:	10bffe04 	addi	r2,r2,-8
10005034:	a8a0983a 	sll	r16,r21,r2
10005038:	002b883a 	mov	r21,zero
1000503c:	003ec406 	br	10004b50 <__alt_data_end+0xf8004b50>
10005040:	d8c00117 	ldw	r3,4(sp)
10005044:	b0ed883a 	add	r22,r22,r3
10005048:	b0c5803a 	cmpltu	r2,r22,r3
1000504c:	15c5883a 	add	r2,r2,r23
10005050:	11cf883a 	add	r7,r2,r7
10005054:	88bfffc4 	addi	r2,r17,-1
10005058:	b9c00d2e 	bgeu	r23,r7,10005090 <__divdf3+0x7c8>
1000505c:	39003f36 	bltu	r7,r4,1000515c <__divdf3+0x894>
10005060:	21c06a26 	beq	r4,r7,1000520c <__divdf3+0x944>
10005064:	3909c83a 	sub	r4,r7,r4
10005068:	1023883a 	mov	r17,r2
1000506c:	003f4f06 	br	10004dac <__alt_data_end+0xf8004dac>
10005070:	9d7ee536 	bltu	r19,r21,10004c08 <__alt_data_end+0xf8004c08>
10005074:	982ed07a 	srli	r23,r19,1
10005078:	880497fa 	slli	r2,r17,31
1000507c:	8810d07a 	srli	r8,r17,1
10005080:	982c97fa 	slli	r22,r19,31
10005084:	b884b03a 	or	r2,r23,r2
10005088:	d8800015 	stw	r2,0(sp)
1000508c:	003ee206 	br	10004c18 <__alt_data_end+0xf8004c18>
10005090:	3dfff41e 	bne	r7,r23,10005064 <__alt_data_end+0xf8005064>
10005094:	d8c00117 	ldw	r3,4(sp)
10005098:	b0fff02e 	bgeu	r22,r3,1000505c <__alt_data_end+0xf800505c>
1000509c:	b909c83a 	sub	r4,r23,r4
100050a0:	1023883a 	mov	r17,r2
100050a4:	003f4106 	br	10004dac <__alt_data_end+0xf8004dac>
100050a8:	1021883a 	mov	r16,r2
100050ac:	003f1106 	br	10004cf4 <__alt_data_end+0xf8004cf4>
100050b0:	1023883a 	mov	r17,r2
100050b4:	003ef706 	br	10004c94 <__alt_data_end+0xf8004c94>
100050b8:	b23fe136 	bltu	r22,r8,10005040 <__alt_data_end+0xf8005040>
100050bc:	0009883a 	mov	r4,zero
100050c0:	003f3a06 	br	10004dac <__alt_data_end+0xf8004dac>
100050c4:	38802c36 	bltu	r7,r2,10005178 <__divdf3+0x8b0>
100050c8:	11c05326 	beq	r2,r7,10005218 <__divdf3+0x950>
100050cc:	2827883a 	mov	r19,r5
100050d0:	003f8d06 	br	10004f08 <__alt_data_end+0xf8004f08>
100050d4:	04ffffc4 	movi	r19,-1
100050d8:	003f8c06 	br	10004f0c <__alt_data_end+0xf8004f0c>
100050dc:	1011883a 	mov	r8,r2
100050e0:	003f4d06 	br	10004e18 <__alt_data_end+0xf8004e18>
100050e4:	1013883a 	mov	r9,r2
100050e8:	003f6406 	br	10004e7c <__alt_data_end+0xf8004e7c>
100050ec:	e029883a 	mov	r20,fp
100050f0:	003f8606 	br	10004f0c <__alt_data_end+0xf8004f0c>
100050f4:	008007c4 	movi	r2,31
100050f8:	14002a16 	blt	r2,r16,100051a4 <__divdf3+0x8dc>
100050fc:	91410784 	addi	r5,r18,1054
10005100:	9c0cd83a 	srl	r6,r19,r16
10005104:	8948983a 	sll	r4,r17,r5
10005108:	9944983a 	sll	r2,r19,r5
1000510c:	8c20d83a 	srl	r16,r17,r16
10005110:	3108b03a 	or	r4,r6,r4
10005114:	1004c03a 	cmpne	r2,r2,zero
10005118:	2084b03a 	or	r2,r4,r2
1000511c:	110001cc 	andi	r4,r2,7
10005120:	20000726 	beq	r4,zero,10005140 <__divdf3+0x878>
10005124:	114003cc 	andi	r5,r2,15
10005128:	01000104 	movi	r4,4
1000512c:	29000426 	beq	r5,r4,10005140 <__divdf3+0x878>
10005130:	11000104 	addi	r4,r2,4
10005134:	2085803a 	cmpltu	r2,r4,r2
10005138:	80a1883a 	add	r16,r16,r2
1000513c:	2005883a 	mov	r2,r4
10005140:	8100202c 	andhi	r4,r16,128
10005144:	20002d26 	beq	r4,zero,100051fc <__divdf3+0x934>
10005148:	a180004c 	andi	r6,r20,1
1000514c:	02000044 	movi	r8,1
10005150:	000b883a 	mov	r5,zero
10005154:	0027883a 	mov	r19,zero
10005158:	003e3906 	br	10004a40 <__alt_data_end+0xf8004a40>
1000515c:	d8c00117 	ldw	r3,4(sp)
10005160:	8c7fff84 	addi	r17,r17,-2
10005164:	b0ed883a 	add	r22,r22,r3
10005168:	b0c5803a 	cmpltu	r2,r22,r3
1000516c:	15c5883a 	add	r2,r2,r23
10005170:	11cf883a 	add	r7,r2,r7
10005174:	003f0c06 	br	10004da8 <__alt_data_end+0xf8004da8>
10005178:	d8c00117 	ldw	r3,4(sp)
1000517c:	997fff84 	addi	r5,r19,-2
10005180:	18d1883a 	add	r8,r3,r3
10005184:	40c7803a 	cmpltu	r3,r8,r3
10005188:	1dcd883a 	add	r6,r3,r23
1000518c:	398f883a 	add	r7,r7,r6
10005190:	da000115 	stw	r8,4(sp)
10005194:	003f8a06 	br	10004fc0 <__alt_data_end+0xf8004fc0>
10005198:	203f861e 	bne	r4,zero,10004fb4 <__alt_data_end+0xf8004fb4>
1000519c:	d8000115 	stw	zero,4(sp)
100051a0:	003f8906 	br	10004fc8 <__alt_data_end+0xf8004fc8>
100051a4:	00bef884 	movi	r2,-1054
100051a8:	1485c83a 	sub	r2,r2,r18
100051ac:	01000804 	movi	r4,32
100051b0:	8884d83a 	srl	r2,r17,r2
100051b4:	81001c26 	beq	r16,r4,10005228 <__divdf3+0x960>
100051b8:	91010f84 	addi	r4,r18,1086
100051bc:	8908983a 	sll	r4,r17,r4
100051c0:	24c8b03a 	or	r4,r4,r19
100051c4:	2008c03a 	cmpne	r4,r4,zero
100051c8:	2084b03a 	or	r2,r4,r2
100051cc:	140001cc 	andi	r16,r2,7
100051d0:	8000061e 	bne	r16,zero,100051ec <__divdf3+0x924>
100051d4:	000b883a 	mov	r5,zero
100051d8:	1004d0fa 	srli	r2,r2,3
100051dc:	a180004c 	andi	r6,r20,1
100051e0:	0011883a 	mov	r8,zero
100051e4:	1426b03a 	or	r19,r2,r16
100051e8:	003e1506 	br	10004a40 <__alt_data_end+0xf8004a40>
100051ec:	114003cc 	andi	r5,r2,15
100051f0:	01000104 	movi	r4,4
100051f4:	0021883a 	mov	r16,zero
100051f8:	293fcd1e 	bne	r5,r4,10005130 <__alt_data_end+0xf8005130>
100051fc:	800a927a 	slli	r5,r16,9
10005200:	8020977a 	slli	r16,r16,29
10005204:	280ad33a 	srli	r5,r5,12
10005208:	003ff306 	br	100051d8 <__alt_data_end+0xf80051d8>
1000520c:	b23fd336 	bltu	r22,r8,1000515c <__alt_data_end+0xf800515c>
10005210:	1023883a 	mov	r17,r2
10005214:	003fa906 	br	100050bc <__alt_data_end+0xf80050bc>
10005218:	d8c00117 	ldw	r3,4(sp)
1000521c:	193fd636 	bltu	r3,r4,10005178 <__alt_data_end+0xf8005178>
10005220:	2827883a 	mov	r19,r5
10005224:	003f6806 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10005228:	0009883a 	mov	r4,zero
1000522c:	003fe406 	br	100051c0 <__alt_data_end+0xf80051c0>
10005230:	00800434 	movhi	r2,16
10005234:	89400234 	orhi	r5,r17,8
10005238:	10bfffc4 	addi	r2,r2,-1
1000523c:	e00d883a 	mov	r6,fp
10005240:	288a703a 	and	r5,r5,r2
10005244:	003e5806 	br	10004ba8 <__alt_data_end+0xf8004ba8>

10005248 <__eqdf2>:
10005248:	2804d53a 	srli	r2,r5,20
1000524c:	3806d53a 	srli	r3,r7,20
10005250:	02000434 	movhi	r8,16
10005254:	423fffc4 	addi	r8,r8,-1
10005258:	1081ffcc 	andi	r2,r2,2047
1000525c:	0241ffc4 	movi	r9,2047
10005260:	2a14703a 	and	r10,r5,r8
10005264:	18c1ffcc 	andi	r3,r3,2047
10005268:	3a10703a 	and	r8,r7,r8
1000526c:	280ad7fa 	srli	r5,r5,31
10005270:	380ed7fa 	srli	r7,r7,31
10005274:	12400f26 	beq	r2,r9,100052b4 <__eqdf2+0x6c>
10005278:	0241ffc4 	movi	r9,2047
1000527c:	1a400326 	beq	r3,r9,1000528c <__eqdf2+0x44>
10005280:	10c00526 	beq	r2,r3,10005298 <__eqdf2+0x50>
10005284:	00800044 	movi	r2,1
10005288:	f800283a 	ret
1000528c:	4192b03a 	or	r9,r8,r6
10005290:	483ffc1e 	bne	r9,zero,10005284 <__alt_data_end+0xf8005284>
10005294:	10fffb1e 	bne	r2,r3,10005284 <__alt_data_end+0xf8005284>
10005298:	523ffa1e 	bne	r10,r8,10005284 <__alt_data_end+0xf8005284>
1000529c:	21bff91e 	bne	r4,r6,10005284 <__alt_data_end+0xf8005284>
100052a0:	29c00826 	beq	r5,r7,100052c4 <__eqdf2+0x7c>
100052a4:	103ff71e 	bne	r2,zero,10005284 <__alt_data_end+0xf8005284>
100052a8:	5104b03a 	or	r2,r10,r4
100052ac:	1004c03a 	cmpne	r2,r2,zero
100052b0:	f800283a 	ret
100052b4:	5112b03a 	or	r9,r10,r4
100052b8:	483fef26 	beq	r9,zero,10005278 <__alt_data_end+0xf8005278>
100052bc:	00800044 	movi	r2,1
100052c0:	f800283a 	ret
100052c4:	0005883a 	mov	r2,zero
100052c8:	f800283a 	ret

100052cc <__gedf2>:
100052cc:	2804d53a 	srli	r2,r5,20
100052d0:	3806d53a 	srli	r3,r7,20
100052d4:	02000434 	movhi	r8,16
100052d8:	423fffc4 	addi	r8,r8,-1
100052dc:	0241ffc4 	movi	r9,2047
100052e0:	1081ffcc 	andi	r2,r2,2047
100052e4:	2a14703a 	and	r10,r5,r8
100052e8:	1a46703a 	and	r3,r3,r9
100052ec:	3a10703a 	and	r8,r7,r8
100052f0:	280ad7fa 	srli	r5,r5,31
100052f4:	380ed7fa 	srli	r7,r7,31
100052f8:	12400b26 	beq	r2,r9,10005328 <__gedf2+0x5c>
100052fc:	1a401626 	beq	r3,r9,10005358 <__gedf2+0x8c>
10005300:	10000c1e 	bne	r2,zero,10005334 <__gedf2+0x68>
10005304:	5112b03a 	or	r9,r10,r4
10005308:	4813003a 	cmpeq	r9,r9,zero
1000530c:	4817883a 	mov	r11,r9
10005310:	18000c1e 	bne	r3,zero,10005344 <__gedf2+0x78>
10005314:	4198b03a 	or	r12,r8,r6
10005318:	60000a1e 	bne	r12,zero,10005344 <__gedf2+0x78>
1000531c:	48001326 	beq	r9,zero,1000536c <__gedf2+0xa0>
10005320:	0005883a 	mov	r2,zero
10005324:	f800283a 	ret
10005328:	5112b03a 	or	r9,r10,r4
1000532c:	4800191e 	bne	r9,zero,10005394 <__gedf2+0xc8>
10005330:	18800926 	beq	r3,r2,10005358 <__gedf2+0x8c>
10005334:	18000b1e 	bne	r3,zero,10005364 <__gedf2+0x98>
10005338:	4192b03a 	or	r9,r8,r6
1000533c:	0017883a 	mov	r11,zero
10005340:	48000a26 	beq	r9,zero,1000536c <__gedf2+0xa0>
10005344:	39c03fcc 	andi	r7,r7,255
10005348:	58000726 	beq	r11,zero,10005368 <__gedf2+0x9c>
1000534c:	3800081e 	bne	r7,zero,10005370 <__gedf2+0xa4>
10005350:	00bfffc4 	movi	r2,-1
10005354:	f800283a 	ret
10005358:	4192b03a 	or	r9,r8,r6
1000535c:	48000d1e 	bne	r9,zero,10005394 <__gedf2+0xc8>
10005360:	103fe826 	beq	r2,zero,10005304 <__alt_data_end+0xf8005304>
10005364:	39c03fcc 	andi	r7,r7,255
10005368:	29c00326 	beq	r5,r7,10005378 <__gedf2+0xac>
1000536c:	283ff81e 	bne	r5,zero,10005350 <__alt_data_end+0xf8005350>
10005370:	00800044 	movi	r2,1
10005374:	f800283a 	ret
10005378:	18bffc16 	blt	r3,r2,1000536c <__alt_data_end+0xf800536c>
1000537c:	10c00316 	blt	r2,r3,1000538c <__gedf2+0xc0>
10005380:	42bffa36 	bltu	r8,r10,1000536c <__alt_data_end+0xf800536c>
10005384:	52000526 	beq	r10,r8,1000539c <__gedf2+0xd0>
10005388:	523fe52e 	bgeu	r10,r8,10005320 <__alt_data_end+0xf8005320>
1000538c:	283ff026 	beq	r5,zero,10005350 <__alt_data_end+0xf8005350>
10005390:	003ff706 	br	10005370 <__alt_data_end+0xf8005370>
10005394:	00bfff84 	movi	r2,-2
10005398:	f800283a 	ret
1000539c:	313ff336 	bltu	r6,r4,1000536c <__alt_data_end+0xf800536c>
100053a0:	21bfdf2e 	bgeu	r4,r6,10005320 <__alt_data_end+0xf8005320>
100053a4:	283fea26 	beq	r5,zero,10005350 <__alt_data_end+0xf8005350>
100053a8:	003ff106 	br	10005370 <__alt_data_end+0xf8005370>

100053ac <__ledf2>:
100053ac:	2804d53a 	srli	r2,r5,20
100053b0:	3810d53a 	srli	r8,r7,20
100053b4:	00c00434 	movhi	r3,16
100053b8:	18ffffc4 	addi	r3,r3,-1
100053bc:	0241ffc4 	movi	r9,2047
100053c0:	1081ffcc 	andi	r2,r2,2047
100053c4:	28d4703a 	and	r10,r5,r3
100053c8:	4250703a 	and	r8,r8,r9
100053cc:	38c6703a 	and	r3,r7,r3
100053d0:	280ad7fa 	srli	r5,r5,31
100053d4:	380ed7fa 	srli	r7,r7,31
100053d8:	12400b26 	beq	r2,r9,10005408 <__ledf2+0x5c>
100053dc:	42401926 	beq	r8,r9,10005444 <__ledf2+0x98>
100053e0:	10000c1e 	bne	r2,zero,10005414 <__ledf2+0x68>
100053e4:	5112b03a 	or	r9,r10,r4
100053e8:	4813003a 	cmpeq	r9,r9,zero
100053ec:	4817883a 	mov	r11,r9
100053f0:	40000f26 	beq	r8,zero,10005430 <__ledf2+0x84>
100053f4:	39c03fcc 	andi	r7,r7,255
100053f8:	58001826 	beq	r11,zero,1000545c <__ledf2+0xb0>
100053fc:	38000a1e 	bne	r7,zero,10005428 <__ledf2+0x7c>
10005400:	00bfffc4 	movi	r2,-1
10005404:	f800283a 	ret
10005408:	5112b03a 	or	r9,r10,r4
1000540c:	48000f1e 	bne	r9,zero,1000544c <__ledf2+0xa0>
10005410:	40800c26 	beq	r8,r2,10005444 <__ledf2+0x98>
10005414:	4000101e 	bne	r8,zero,10005458 <__ledf2+0xac>
10005418:	1992b03a 	or	r9,r3,r6
1000541c:	0017883a 	mov	r11,zero
10005420:	483ff41e 	bne	r9,zero,100053f4 <__alt_data_end+0xf80053f4>
10005424:	283ff61e 	bne	r5,zero,10005400 <__alt_data_end+0xf8005400>
10005428:	00800044 	movi	r2,1
1000542c:	f800283a 	ret
10005430:	1998b03a 	or	r12,r3,r6
10005434:	603fef1e 	bne	r12,zero,100053f4 <__alt_data_end+0xf80053f4>
10005438:	483ffa26 	beq	r9,zero,10005424 <__alt_data_end+0xf8005424>
1000543c:	0005883a 	mov	r2,zero
10005440:	f800283a 	ret
10005444:	1992b03a 	or	r9,r3,r6
10005448:	48000226 	beq	r9,zero,10005454 <__ledf2+0xa8>
1000544c:	00800084 	movi	r2,2
10005450:	f800283a 	ret
10005454:	103fe326 	beq	r2,zero,100053e4 <__alt_data_end+0xf80053e4>
10005458:	39c03fcc 	andi	r7,r7,255
1000545c:	29fff11e 	bne	r5,r7,10005424 <__alt_data_end+0xf8005424>
10005460:	40bff016 	blt	r8,r2,10005424 <__alt_data_end+0xf8005424>
10005464:	12000316 	blt	r2,r8,10005474 <__ledf2+0xc8>
10005468:	1abfee36 	bltu	r3,r10,10005424 <__alt_data_end+0xf8005424>
1000546c:	50c00326 	beq	r10,r3,1000547c <__ledf2+0xd0>
10005470:	50fff22e 	bgeu	r10,r3,1000543c <__alt_data_end+0xf800543c>
10005474:	283fe226 	beq	r5,zero,10005400 <__alt_data_end+0xf8005400>
10005478:	003feb06 	br	10005428 <__alt_data_end+0xf8005428>
1000547c:	313fe936 	bltu	r6,r4,10005424 <__alt_data_end+0xf8005424>
10005480:	21bfee2e 	bgeu	r4,r6,1000543c <__alt_data_end+0xf800543c>
10005484:	283fde26 	beq	r5,zero,10005400 <__alt_data_end+0xf8005400>
10005488:	003fe706 	br	10005428 <__alt_data_end+0xf8005428>

1000548c <__muldf3>:
1000548c:	deffee04 	addi	sp,sp,-72
10005490:	dd000c15 	stw	r20,48(sp)
10005494:	2828d53a 	srli	r20,r5,20
10005498:	dd400d15 	stw	r21,52(sp)
1000549c:	282ad7fa 	srli	r21,r5,31
100054a0:	dc000815 	stw	r16,32(sp)
100054a4:	04000434 	movhi	r16,16
100054a8:	ddc00f15 	stw	r23,60(sp)
100054ac:	dcc00b15 	stw	r19,44(sp)
100054b0:	dc800a15 	stw	r18,40(sp)
100054b4:	843fffc4 	addi	r16,r16,-1
100054b8:	dfc01115 	stw	ra,68(sp)
100054bc:	df001015 	stw	fp,64(sp)
100054c0:	dd800e15 	stw	r22,56(sp)
100054c4:	dc400915 	stw	r17,36(sp)
100054c8:	a501ffcc 	andi	r20,r20,2047
100054cc:	2025883a 	mov	r18,r4
100054d0:	202f883a 	mov	r23,r4
100054d4:	2c20703a 	and	r16,r5,r16
100054d8:	a827883a 	mov	r19,r21
100054dc:	aa403fcc 	andi	r9,r21,255
100054e0:	a0005926 	beq	r20,zero,10005648 <__muldf3+0x1bc>
100054e4:	0081ffc4 	movi	r2,2047
100054e8:	a0803426 	beq	r20,r2,100055bc <__muldf3+0x130>
100054ec:	84000434 	orhi	r16,r16,16
100054f0:	2004d77a 	srli	r2,r4,29
100054f4:	802090fa 	slli	r16,r16,3
100054f8:	202e90fa 	slli	r23,r4,3
100054fc:	a53f0044 	addi	r20,r20,-1023
10005500:	80a0b03a 	or	r16,r16,r2
10005504:	000b883a 	mov	r5,zero
10005508:	0039883a 	mov	fp,zero
1000550c:	3806d53a 	srli	r3,r7,20
10005510:	382cd7fa 	srli	r22,r7,31
10005514:	00800434 	movhi	r2,16
10005518:	10bfffc4 	addi	r2,r2,-1
1000551c:	18c1ffcc 	andi	r3,r3,2047
10005520:	3025883a 	mov	r18,r6
10005524:	38a2703a 	and	r17,r7,r2
10005528:	b2803fcc 	andi	r10,r22,255
1000552c:	18006426 	beq	r3,zero,100056c0 <__muldf3+0x234>
10005530:	0081ffc4 	movi	r2,2047
10005534:	18805c26 	beq	r3,r2,100056a8 <__muldf3+0x21c>
10005538:	8c400434 	orhi	r17,r17,16
1000553c:	3004d77a 	srli	r2,r6,29
10005540:	882290fa 	slli	r17,r17,3
10005544:	302490fa 	slli	r18,r6,3
10005548:	18ff0044 	addi	r3,r3,-1023
1000554c:	88a2b03a 	or	r17,r17,r2
10005550:	000f883a 	mov	r7,zero
10005554:	394ab03a 	or	r5,r7,r5
10005558:	280a90ba 	slli	r5,r5,2
1000555c:	00840034 	movhi	r2,4096
10005560:	10955f04 	addi	r2,r2,21884
10005564:	288b883a 	add	r5,r5,r2
10005568:	28800017 	ldw	r2,0(r5)
1000556c:	a0c7883a 	add	r3,r20,r3
10005570:	b54cf03a 	xor	r6,r22,r21
10005574:	1a000044 	addi	r8,r3,1
10005578:	1000683a 	jmp	r2
1000557c:	100057c0 	call	1100057c <_gp+0xfee2b8>
10005580:	100057ac 	andhi	zero,r2,350
10005584:	100057ac 	andhi	zero,r2,350
10005588:	10005798 	cmpnei	zero,r2,350
1000558c:	100055d8 	cmpnei	zero,r2,343
10005590:	100055d8 	cmpnei	zero,r2,343
10005594:	10005780 	call	11000578 <_gp+0xfee2b4>
10005598:	10005798 	cmpnei	zero,r2,350
1000559c:	100055d8 	cmpnei	zero,r2,343
100055a0:	10005780 	call	11000578 <_gp+0xfee2b4>
100055a4:	100055d8 	cmpnei	zero,r2,343
100055a8:	10005798 	cmpnei	zero,r2,350
100055ac:	100055dc 	xori	zero,r2,343
100055b0:	100055dc 	xori	zero,r2,343
100055b4:	100055dc 	xori	zero,r2,343
100055b8:	10005afc 	xorhi	zero,r2,363
100055bc:	8104b03a 	or	r2,r16,r4
100055c0:	10006c1e 	bne	r2,zero,10005774 <__muldf3+0x2e8>
100055c4:	01400204 	movi	r5,8
100055c8:	0021883a 	mov	r16,zero
100055cc:	002f883a 	mov	r23,zero
100055d0:	07000084 	movi	fp,2
100055d4:	003fcd06 	br	1000550c <__alt_data_end+0xf800550c>
100055d8:	3013883a 	mov	r9,r6
100055dc:	00800084 	movi	r2,2
100055e0:	e080501e 	bne	fp,r2,10005724 <__muldf3+0x298>
100055e4:	4cc0004c 	andi	r19,r9,1
100055e8:	0101ffc4 	movi	r4,2047
100055ec:	0021883a 	mov	r16,zero
100055f0:	002f883a 	mov	r23,zero
100055f4:	2008953a 	slli	r4,r4,20
100055f8:	98c03fcc 	andi	r3,r19,255
100055fc:	04400434 	movhi	r17,16
10005600:	8c7fffc4 	addi	r17,r17,-1
10005604:	180697fa 	slli	r3,r3,31
10005608:	8460703a 	and	r16,r16,r17
1000560c:	8120b03a 	or	r16,r16,r4
10005610:	80c6b03a 	or	r3,r16,r3
10005614:	b805883a 	mov	r2,r23
10005618:	dfc01117 	ldw	ra,68(sp)
1000561c:	df001017 	ldw	fp,64(sp)
10005620:	ddc00f17 	ldw	r23,60(sp)
10005624:	dd800e17 	ldw	r22,56(sp)
10005628:	dd400d17 	ldw	r21,52(sp)
1000562c:	dd000c17 	ldw	r20,48(sp)
10005630:	dcc00b17 	ldw	r19,44(sp)
10005634:	dc800a17 	ldw	r18,40(sp)
10005638:	dc400917 	ldw	r17,36(sp)
1000563c:	dc000817 	ldw	r16,32(sp)
10005640:	dec01204 	addi	sp,sp,72
10005644:	f800283a 	ret
10005648:	8104b03a 	or	r2,r16,r4
1000564c:	10004426 	beq	r2,zero,10005760 <__muldf3+0x2d4>
10005650:	80014b26 	beq	r16,zero,10005b80 <__muldf3+0x6f4>
10005654:	8009883a 	mov	r4,r16
10005658:	d9800715 	stw	r6,28(sp)
1000565c:	d9c00215 	stw	r7,8(sp)
10005660:	da400415 	stw	r9,16(sp)
10005664:	00067c40 	call	100067c4 <__clzsi2>
10005668:	d9800717 	ldw	r6,28(sp)
1000566c:	d9c00217 	ldw	r7,8(sp)
10005670:	da400417 	ldw	r9,16(sp)
10005674:	1007883a 	mov	r3,r2
10005678:	01000a04 	movi	r4,40
1000567c:	1dfffe04 	addi	r23,r3,-8
10005680:	20c9c83a 	sub	r4,r4,r3
10005684:	85e0983a 	sll	r16,r16,r23
10005688:	9108d83a 	srl	r4,r18,r4
1000568c:	95ee983a 	sll	r23,r18,r23
10005690:	2420b03a 	or	r16,r4,r16
10005694:	053f0344 	movi	r20,-1011
10005698:	a0e9c83a 	sub	r20,r20,r3
1000569c:	000b883a 	mov	r5,zero
100056a0:	0039883a 	mov	fp,zero
100056a4:	003f9906 	br	1000550c <__alt_data_end+0xf800550c>
100056a8:	8984b03a 	or	r2,r17,r6
100056ac:	10002a1e 	bne	r2,zero,10005758 <__muldf3+0x2cc>
100056b0:	0023883a 	mov	r17,zero
100056b4:	0025883a 	mov	r18,zero
100056b8:	01c00084 	movi	r7,2
100056bc:	003fa506 	br	10005554 <__alt_data_end+0xf8005554>
100056c0:	8984b03a 	or	r2,r17,r6
100056c4:	10002026 	beq	r2,zero,10005748 <__muldf3+0x2bc>
100056c8:	88011c26 	beq	r17,zero,10005b3c <__muldf3+0x6b0>
100056cc:	8809883a 	mov	r4,r17
100056d0:	d9400215 	stw	r5,8(sp)
100056d4:	d9800715 	stw	r6,28(sp)
100056d8:	da400415 	stw	r9,16(sp)
100056dc:	da800315 	stw	r10,12(sp)
100056e0:	00067c40 	call	100067c4 <__clzsi2>
100056e4:	d9400217 	ldw	r5,8(sp)
100056e8:	d9800717 	ldw	r6,28(sp)
100056ec:	da400417 	ldw	r9,16(sp)
100056f0:	da800317 	ldw	r10,12(sp)
100056f4:	1007883a 	mov	r3,r2
100056f8:	01000a04 	movi	r4,40
100056fc:	1cbffe04 	addi	r18,r3,-8
10005700:	20c9c83a 	sub	r4,r4,r3
10005704:	8ca2983a 	sll	r17,r17,r18
10005708:	3108d83a 	srl	r4,r6,r4
1000570c:	34a4983a 	sll	r18,r6,r18
10005710:	2462b03a 	or	r17,r4,r17
10005714:	00bf0344 	movi	r2,-1011
10005718:	10c7c83a 	sub	r3,r2,r3
1000571c:	000f883a 	mov	r7,zero
10005720:	003f8c06 	br	10005554 <__alt_data_end+0xf8005554>
10005724:	008000c4 	movi	r2,3
10005728:	e0816d26 	beq	fp,r2,10005ce0 <__muldf3+0x854>
1000572c:	00800044 	movi	r2,1
10005730:	e081321e 	bne	fp,r2,10005bfc <__muldf3+0x770>
10005734:	48a6703a 	and	r19,r9,r2
10005738:	0009883a 	mov	r4,zero
1000573c:	0021883a 	mov	r16,zero
10005740:	002f883a 	mov	r23,zero
10005744:	003fab06 	br	100055f4 <__alt_data_end+0xf80055f4>
10005748:	0023883a 	mov	r17,zero
1000574c:	0025883a 	mov	r18,zero
10005750:	01c00044 	movi	r7,1
10005754:	003f7f06 	br	10005554 <__alt_data_end+0xf8005554>
10005758:	01c000c4 	movi	r7,3
1000575c:	003f7d06 	br	10005554 <__alt_data_end+0xf8005554>
10005760:	01400104 	movi	r5,4
10005764:	0021883a 	mov	r16,zero
10005768:	002f883a 	mov	r23,zero
1000576c:	07000044 	movi	fp,1
10005770:	003f6606 	br	1000550c <__alt_data_end+0xf800550c>
10005774:	01400304 	movi	r5,12
10005778:	070000c4 	movi	fp,3
1000577c:	003f6306 	br	1000550c <__alt_data_end+0xf800550c>
10005780:	04000434 	movhi	r16,16
10005784:	0027883a 	mov	r19,zero
10005788:	843fffc4 	addi	r16,r16,-1
1000578c:	05ffffc4 	movi	r23,-1
10005790:	0101ffc4 	movi	r4,2047
10005794:	003f9706 	br	100055f4 <__alt_data_end+0xf80055f4>
10005798:	8821883a 	mov	r16,r17
1000579c:	902f883a 	mov	r23,r18
100057a0:	5013883a 	mov	r9,r10
100057a4:	3839883a 	mov	fp,r7
100057a8:	003f8c06 	br	100055dc <__alt_data_end+0xf80055dc>
100057ac:	8821883a 	mov	r16,r17
100057b0:	902f883a 	mov	r23,r18
100057b4:	3013883a 	mov	r9,r6
100057b8:	3839883a 	mov	fp,r7
100057bc:	003f8706 	br	100055dc <__alt_data_end+0xf80055dc>
100057c0:	b82ad43a 	srli	r21,r23,16
100057c4:	9038d43a 	srli	fp,r18,16
100057c8:	bdffffcc 	andi	r23,r23,65535
100057cc:	94bfffcc 	andi	r18,r18,65535
100057d0:	9009883a 	mov	r4,r18
100057d4:	b80b883a 	mov	r5,r23
100057d8:	d8c00515 	stw	r3,20(sp)
100057dc:	d9800715 	stw	r6,28(sp)
100057e0:	da000615 	stw	r8,24(sp)
100057e4:	00040040 	call	10004004 <__mulsi3>
100057e8:	9009883a 	mov	r4,r18
100057ec:	a80b883a 	mov	r5,r21
100057f0:	1029883a 	mov	r20,r2
100057f4:	00040040 	call	10004004 <__mulsi3>
100057f8:	e009883a 	mov	r4,fp
100057fc:	a80b883a 	mov	r5,r21
10005800:	102d883a 	mov	r22,r2
10005804:	00040040 	call	10004004 <__mulsi3>
10005808:	e009883a 	mov	r4,fp
1000580c:	b80b883a 	mov	r5,r23
10005810:	1027883a 	mov	r19,r2
10005814:	00040040 	call	10004004 <__mulsi3>
10005818:	a008d43a 	srli	r4,r20,16
1000581c:	b085883a 	add	r2,r22,r2
10005820:	d8c00517 	ldw	r3,20(sp)
10005824:	110f883a 	add	r7,r2,r4
10005828:	d9800717 	ldw	r6,28(sp)
1000582c:	da000617 	ldw	r8,24(sp)
10005830:	3d80022e 	bgeu	r7,r22,1000583c <__muldf3+0x3b0>
10005834:	00800074 	movhi	r2,1
10005838:	98a7883a 	add	r19,r19,r2
1000583c:	3804943a 	slli	r2,r7,16
10005840:	380ed43a 	srli	r7,r7,16
10005844:	882cd43a 	srli	r22,r17,16
10005848:	a53fffcc 	andi	r20,r20,65535
1000584c:	8c7fffcc 	andi	r17,r17,65535
10005850:	1529883a 	add	r20,r2,r20
10005854:	8809883a 	mov	r4,r17
10005858:	b80b883a 	mov	r5,r23
1000585c:	d8c00515 	stw	r3,20(sp)
10005860:	d9800715 	stw	r6,28(sp)
10005864:	da000615 	stw	r8,24(sp)
10005868:	d9c00015 	stw	r7,0(sp)
1000586c:	dd000115 	stw	r20,4(sp)
10005870:	00040040 	call	10004004 <__mulsi3>
10005874:	a80b883a 	mov	r5,r21
10005878:	8809883a 	mov	r4,r17
1000587c:	d8800415 	stw	r2,16(sp)
10005880:	00040040 	call	10004004 <__mulsi3>
10005884:	a80b883a 	mov	r5,r21
10005888:	b009883a 	mov	r4,r22
1000588c:	1029883a 	mov	r20,r2
10005890:	00040040 	call	10004004 <__mulsi3>
10005894:	b009883a 	mov	r4,r22
10005898:	b80b883a 	mov	r5,r23
1000589c:	102b883a 	mov	r21,r2
100058a0:	00040040 	call	10004004 <__mulsi3>
100058a4:	da400417 	ldw	r9,16(sp)
100058a8:	a085883a 	add	r2,r20,r2
100058ac:	d8c00517 	ldw	r3,20(sp)
100058b0:	4808d43a 	srli	r4,r9,16
100058b4:	d9800717 	ldw	r6,28(sp)
100058b8:	da000617 	ldw	r8,24(sp)
100058bc:	1109883a 	add	r4,r2,r4
100058c0:	2500022e 	bgeu	r4,r20,100058cc <__muldf3+0x440>
100058c4:	00800074 	movhi	r2,1
100058c8:	a8ab883a 	add	r21,r21,r2
100058cc:	200e943a 	slli	r7,r4,16
100058d0:	2004d43a 	srli	r2,r4,16
100058d4:	802ed43a 	srli	r23,r16,16
100058d8:	843fffcc 	andi	r16,r16,65535
100058dc:	4d3fffcc 	andi	r20,r9,65535
100058e0:	9009883a 	mov	r4,r18
100058e4:	800b883a 	mov	r5,r16
100058e8:	3d29883a 	add	r20,r7,r20
100058ec:	d8c00515 	stw	r3,20(sp)
100058f0:	d9800715 	stw	r6,28(sp)
100058f4:	da000615 	stw	r8,24(sp)
100058f8:	a8ab883a 	add	r21,r21,r2
100058fc:	00040040 	call	10004004 <__mulsi3>
10005900:	9009883a 	mov	r4,r18
10005904:	b80b883a 	mov	r5,r23
10005908:	d8800315 	stw	r2,12(sp)
1000590c:	00040040 	call	10004004 <__mulsi3>
10005910:	e009883a 	mov	r4,fp
10005914:	b80b883a 	mov	r5,r23
10005918:	1025883a 	mov	r18,r2
1000591c:	00040040 	call	10004004 <__mulsi3>
10005920:	e009883a 	mov	r4,fp
10005924:	800b883a 	mov	r5,r16
10005928:	d8800215 	stw	r2,8(sp)
1000592c:	00040040 	call	10004004 <__mulsi3>
10005930:	da800317 	ldw	r10,12(sp)
10005934:	d9400017 	ldw	r5,0(sp)
10005938:	9085883a 	add	r2,r18,r2
1000593c:	5008d43a 	srli	r4,r10,16
10005940:	a153883a 	add	r9,r20,r5
10005944:	d8c00517 	ldw	r3,20(sp)
10005948:	1109883a 	add	r4,r2,r4
1000594c:	d9800717 	ldw	r6,28(sp)
10005950:	da000617 	ldw	r8,24(sp)
10005954:	dac00217 	ldw	r11,8(sp)
10005958:	2480022e 	bgeu	r4,r18,10005964 <__muldf3+0x4d8>
1000595c:	00800074 	movhi	r2,1
10005960:	5897883a 	add	r11,r11,r2
10005964:	200e943a 	slli	r7,r4,16
10005968:	2038d43a 	srli	fp,r4,16
1000596c:	52bfffcc 	andi	r10,r10,65535
10005970:	3a8f883a 	add	r7,r7,r10
10005974:	8809883a 	mov	r4,r17
10005978:	800b883a 	mov	r5,r16
1000597c:	d8c00515 	stw	r3,20(sp)
10005980:	d9800715 	stw	r6,28(sp)
10005984:	d9c00215 	stw	r7,8(sp)
10005988:	da000615 	stw	r8,24(sp)
1000598c:	da400415 	stw	r9,16(sp)
10005990:	5f39883a 	add	fp,r11,fp
10005994:	00040040 	call	10004004 <__mulsi3>
10005998:	8809883a 	mov	r4,r17
1000599c:	b80b883a 	mov	r5,r23
100059a0:	1025883a 	mov	r18,r2
100059a4:	00040040 	call	10004004 <__mulsi3>
100059a8:	b009883a 	mov	r4,r22
100059ac:	b80b883a 	mov	r5,r23
100059b0:	d8800315 	stw	r2,12(sp)
100059b4:	00040040 	call	10004004 <__mulsi3>
100059b8:	b009883a 	mov	r4,r22
100059bc:	800b883a 	mov	r5,r16
100059c0:	1023883a 	mov	r17,r2
100059c4:	00040040 	call	10004004 <__mulsi3>
100059c8:	da800317 	ldw	r10,12(sp)
100059cc:	9008d43a 	srli	r4,r18,16
100059d0:	d8c00517 	ldw	r3,20(sp)
100059d4:	5085883a 	add	r2,r10,r2
100059d8:	1109883a 	add	r4,r2,r4
100059dc:	d9800717 	ldw	r6,28(sp)
100059e0:	d9c00217 	ldw	r7,8(sp)
100059e4:	da000617 	ldw	r8,24(sp)
100059e8:	da400417 	ldw	r9,16(sp)
100059ec:	2280022e 	bgeu	r4,r10,100059f8 <__muldf3+0x56c>
100059f0:	00800074 	movhi	r2,1
100059f4:	88a3883a 	add	r17,r17,r2
100059f8:	2004943a 	slli	r2,r4,16
100059fc:	94bfffcc 	andi	r18,r18,65535
10005a00:	4ce7883a 	add	r19,r9,r19
10005a04:	14a5883a 	add	r18,r2,r18
10005a08:	9d29803a 	cmpltu	r20,r19,r20
10005a0c:	9565883a 	add	r18,r18,r21
10005a10:	9505883a 	add	r2,r18,r20
10005a14:	99e7883a 	add	r19,r19,r7
10005a18:	99cf803a 	cmpltu	r7,r19,r7
10005a1c:	e08b883a 	add	r5,fp,r2
10005a20:	2008d43a 	srli	r4,r4,16
10005a24:	29ef883a 	add	r23,r5,r7
10005a28:	1529803a 	cmpltu	r20,r2,r20
10005a2c:	956b803a 	cmpltu	r21,r18,r21
10005a30:	b9cf803a 	cmpltu	r7,r23,r7
10005a34:	a564b03a 	or	r18,r20,r21
10005a38:	2f39803a 	cmpltu	fp,r5,fp
10005a3c:	9125883a 	add	r18,r18,r4
10005a40:	3f38b03a 	or	fp,r7,fp
10005a44:	9725883a 	add	r18,r18,fp
10005a48:	9804927a 	slli	r2,r19,9
10005a4c:	9463883a 	add	r17,r18,r17
10005a50:	d9000117 	ldw	r4,4(sp)
10005a54:	b820d5fa 	srli	r16,r23,23
10005a58:	8822927a 	slli	r17,r17,9
10005a5c:	9826d5fa 	srli	r19,r19,23
10005a60:	1104b03a 	or	r2,r2,r4
10005a64:	b82e927a 	slli	r23,r23,9
10005a68:	1004c03a 	cmpne	r2,r2,zero
10005a6c:	8c20b03a 	or	r16,r17,r16
10005a70:	14e6b03a 	or	r19,r2,r19
10005a74:	8080402c 	andhi	r2,r16,256
10005a78:	9deeb03a 	or	r23,r19,r23
10005a7c:	10000726 	beq	r2,zero,10005a9c <__muldf3+0x610>
10005a80:	b804d07a 	srli	r2,r23,1
10005a84:	800697fa 	slli	r3,r16,31
10005a88:	bdc0004c 	andi	r23,r23,1
10005a8c:	8020d07a 	srli	r16,r16,1
10005a90:	b8aeb03a 	or	r23,r23,r2
10005a94:	b8eeb03a 	or	r23,r23,r3
10005a98:	4007883a 	mov	r3,r8
10005a9c:	1900ffc4 	addi	r4,r3,1023
10005aa0:	01004d0e 	bge	zero,r4,10005bd8 <__muldf3+0x74c>
10005aa4:	b88001cc 	andi	r2,r23,7
10005aa8:	10000726 	beq	r2,zero,10005ac8 <__muldf3+0x63c>
10005aac:	b94003cc 	andi	r5,r23,15
10005ab0:	00800104 	movi	r2,4
10005ab4:	28800426 	beq	r5,r2,10005ac8 <__muldf3+0x63c>
10005ab8:	b885883a 	add	r2,r23,r2
10005abc:	15ef803a 	cmpltu	r23,r2,r23
10005ac0:	85e1883a 	add	r16,r16,r23
10005ac4:	102f883a 	mov	r23,r2
10005ac8:	8080402c 	andhi	r2,r16,256
10005acc:	10000426 	beq	r2,zero,10005ae0 <__muldf3+0x654>
10005ad0:	00bfc034 	movhi	r2,65280
10005ad4:	10bfffc4 	addi	r2,r2,-1
10005ad8:	19010004 	addi	r4,r3,1024
10005adc:	80a0703a 	and	r16,r16,r2
10005ae0:	0081ff84 	movi	r2,2046
10005ae4:	1100340e 	bge	r2,r4,10005bb8 <__muldf3+0x72c>
10005ae8:	34c0004c 	andi	r19,r6,1
10005aec:	0101ffc4 	movi	r4,2047
10005af0:	0021883a 	mov	r16,zero
10005af4:	002f883a 	mov	r23,zero
10005af8:	003ebe06 	br	100055f4 <__alt_data_end+0xf80055f4>
10005afc:	8080022c 	andhi	r2,r16,8
10005b00:	10000926 	beq	r2,zero,10005b28 <__muldf3+0x69c>
10005b04:	8880022c 	andhi	r2,r17,8
10005b08:	1000071e 	bne	r2,zero,10005b28 <__muldf3+0x69c>
10005b0c:	00800434 	movhi	r2,16
10005b10:	8c000234 	orhi	r16,r17,8
10005b14:	10bfffc4 	addi	r2,r2,-1
10005b18:	b027883a 	mov	r19,r22
10005b1c:	80a0703a 	and	r16,r16,r2
10005b20:	902f883a 	mov	r23,r18
10005b24:	003f1a06 	br	10005790 <__alt_data_end+0xf8005790>
10005b28:	00800434 	movhi	r2,16
10005b2c:	84000234 	orhi	r16,r16,8
10005b30:	10bfffc4 	addi	r2,r2,-1
10005b34:	80a0703a 	and	r16,r16,r2
10005b38:	003f1506 	br	10005790 <__alt_data_end+0xf8005790>
10005b3c:	3009883a 	mov	r4,r6
10005b40:	d9400215 	stw	r5,8(sp)
10005b44:	d9800715 	stw	r6,28(sp)
10005b48:	da400415 	stw	r9,16(sp)
10005b4c:	da800315 	stw	r10,12(sp)
10005b50:	00067c40 	call	100067c4 <__clzsi2>
10005b54:	10c00804 	addi	r3,r2,32
10005b58:	010009c4 	movi	r4,39
10005b5c:	d9400217 	ldw	r5,8(sp)
10005b60:	d9800717 	ldw	r6,28(sp)
10005b64:	da400417 	ldw	r9,16(sp)
10005b68:	da800317 	ldw	r10,12(sp)
10005b6c:	20fee20e 	bge	r4,r3,100056f8 <__alt_data_end+0xf80056f8>
10005b70:	147ffe04 	addi	r17,r2,-8
10005b74:	9462983a 	sll	r17,r18,r17
10005b78:	0025883a 	mov	r18,zero
10005b7c:	003ee506 	br	10005714 <__alt_data_end+0xf8005714>
10005b80:	d9800715 	stw	r6,28(sp)
10005b84:	d9c00215 	stw	r7,8(sp)
10005b88:	da400415 	stw	r9,16(sp)
10005b8c:	00067c40 	call	100067c4 <__clzsi2>
10005b90:	10c00804 	addi	r3,r2,32
10005b94:	010009c4 	movi	r4,39
10005b98:	d9800717 	ldw	r6,28(sp)
10005b9c:	d9c00217 	ldw	r7,8(sp)
10005ba0:	da400417 	ldw	r9,16(sp)
10005ba4:	20feb40e 	bge	r4,r3,10005678 <__alt_data_end+0xf8005678>
10005ba8:	143ffe04 	addi	r16,r2,-8
10005bac:	9420983a 	sll	r16,r18,r16
10005bb0:	002f883a 	mov	r23,zero
10005bb4:	003eb706 	br	10005694 <__alt_data_end+0xf8005694>
10005bb8:	8004977a 	slli	r2,r16,29
10005bbc:	b82ed0fa 	srli	r23,r23,3
10005bc0:	8020927a 	slli	r16,r16,9
10005bc4:	2101ffcc 	andi	r4,r4,2047
10005bc8:	15eeb03a 	or	r23,r2,r23
10005bcc:	8020d33a 	srli	r16,r16,12
10005bd0:	34c0004c 	andi	r19,r6,1
10005bd4:	003e8706 	br	100055f4 <__alt_data_end+0xf80055f4>
10005bd8:	00bf0084 	movi	r2,-1022
10005bdc:	10c5c83a 	sub	r2,r2,r3
10005be0:	01000e04 	movi	r4,56
10005be4:	2080080e 	bge	r4,r2,10005c08 <__muldf3+0x77c>
10005be8:	34c0004c 	andi	r19,r6,1
10005bec:	0009883a 	mov	r4,zero
10005bf0:	0021883a 	mov	r16,zero
10005bf4:	002f883a 	mov	r23,zero
10005bf8:	003e7e06 	br	100055f4 <__alt_data_end+0xf80055f4>
10005bfc:	4007883a 	mov	r3,r8
10005c00:	480d883a 	mov	r6,r9
10005c04:	003fa506 	br	10005a9c <__alt_data_end+0xf8005a9c>
10005c08:	010007c4 	movi	r4,31
10005c0c:	20801816 	blt	r4,r2,10005c70 <__muldf3+0x7e4>
10005c10:	18c10784 	addi	r3,r3,1054
10005c14:	80c8983a 	sll	r4,r16,r3
10005c18:	b88ad83a 	srl	r5,r23,r2
10005c1c:	b8c6983a 	sll	r3,r23,r3
10005c20:	80a0d83a 	srl	r16,r16,r2
10005c24:	2908b03a 	or	r4,r5,r4
10005c28:	1804c03a 	cmpne	r2,r3,zero
10005c2c:	2088b03a 	or	r4,r4,r2
10005c30:	208001cc 	andi	r2,r4,7
10005c34:	10000726 	beq	r2,zero,10005c54 <__muldf3+0x7c8>
10005c38:	20c003cc 	andi	r3,r4,15
10005c3c:	00800104 	movi	r2,4
10005c40:	18800426 	beq	r3,r2,10005c54 <__muldf3+0x7c8>
10005c44:	20c00104 	addi	r3,r4,4
10005c48:	1905803a 	cmpltu	r2,r3,r4
10005c4c:	80a1883a 	add	r16,r16,r2
10005c50:	1809883a 	mov	r4,r3
10005c54:	8080202c 	andhi	r2,r16,128
10005c58:	10001b26 	beq	r2,zero,10005cc8 <__muldf3+0x83c>
10005c5c:	34c0004c 	andi	r19,r6,1
10005c60:	01000044 	movi	r4,1
10005c64:	0021883a 	mov	r16,zero
10005c68:	002f883a 	mov	r23,zero
10005c6c:	003e6106 	br	100055f4 <__alt_data_end+0xf80055f4>
10005c70:	013ef884 	movi	r4,-1054
10005c74:	20c9c83a 	sub	r4,r4,r3
10005c78:	01400804 	movi	r5,32
10005c7c:	8108d83a 	srl	r4,r16,r4
10005c80:	11401526 	beq	r2,r5,10005cd8 <__muldf3+0x84c>
10005c84:	18c10f84 	addi	r3,r3,1086
10005c88:	80e0983a 	sll	r16,r16,r3
10005c8c:	85eeb03a 	or	r23,r16,r23
10005c90:	b804c03a 	cmpne	r2,r23,zero
10005c94:	1108b03a 	or	r4,r2,r4
10005c98:	20c001cc 	andi	r3,r4,7
10005c9c:	1800061e 	bne	r3,zero,10005cb8 <__muldf3+0x82c>
10005ca0:	0021883a 	mov	r16,zero
10005ca4:	202ed0fa 	srli	r23,r4,3
10005ca8:	34c0004c 	andi	r19,r6,1
10005cac:	0009883a 	mov	r4,zero
10005cb0:	b8eeb03a 	or	r23,r23,r3
10005cb4:	003e4f06 	br	100055f4 <__alt_data_end+0xf80055f4>
10005cb8:	20c003cc 	andi	r3,r4,15
10005cbc:	00800104 	movi	r2,4
10005cc0:	0021883a 	mov	r16,zero
10005cc4:	18bfdf1e 	bne	r3,r2,10005c44 <__alt_data_end+0xf8005c44>
10005cc8:	8004927a 	slli	r2,r16,9
10005ccc:	8006977a 	slli	r3,r16,29
10005cd0:	1020d33a 	srli	r16,r2,12
10005cd4:	003ff306 	br	10005ca4 <__alt_data_end+0xf8005ca4>
10005cd8:	0021883a 	mov	r16,zero
10005cdc:	003feb06 	br	10005c8c <__alt_data_end+0xf8005c8c>
10005ce0:	00800434 	movhi	r2,16
10005ce4:	84000234 	orhi	r16,r16,8
10005ce8:	10bfffc4 	addi	r2,r2,-1
10005cec:	4cc0004c 	andi	r19,r9,1
10005cf0:	80a0703a 	and	r16,r16,r2
10005cf4:	003ea606 	br	10005790 <__alt_data_end+0xf8005790>

10005cf8 <__subdf3>:
10005cf8:	00c00434 	movhi	r3,16
10005cfc:	18ffffc4 	addi	r3,r3,-1
10005d00:	defffb04 	addi	sp,sp,-20
10005d04:	28d2703a 	and	r9,r5,r3
10005d08:	3814d53a 	srli	r10,r7,20
10005d0c:	38c6703a 	and	r3,r7,r3
10005d10:	3004d77a 	srli	r2,r6,29
10005d14:	dc800215 	stw	r18,8(sp)
10005d18:	dc000015 	stw	r16,0(sp)
10005d1c:	2824d7fa 	srli	r18,r5,31
10005d20:	2820d53a 	srli	r16,r5,20
10005d24:	481290fa 	slli	r9,r9,3
10005d28:	200ad77a 	srli	r5,r4,29
10005d2c:	180690fa 	slli	r3,r3,3
10005d30:	dc400115 	stw	r17,4(sp)
10005d34:	dfc00415 	stw	ra,16(sp)
10005d38:	202290fa 	slli	r17,r4,3
10005d3c:	dcc00315 	stw	r19,12(sp)
10005d40:	5281ffcc 	andi	r10,r10,2047
10005d44:	0101ffc4 	movi	r4,2047
10005d48:	9011883a 	mov	r8,r18
10005d4c:	8401ffcc 	andi	r16,r16,2047
10005d50:	94803fcc 	andi	r18,r18,255
10005d54:	494ab03a 	or	r5,r9,r5
10005d58:	380ed7fa 	srli	r7,r7,31
10005d5c:	1886b03a 	or	r3,r3,r2
10005d60:	300c90fa 	slli	r6,r6,3
10005d64:	51009026 	beq	r10,r4,10005fa8 <__subdf3+0x2b0>
10005d68:	39c0005c 	xori	r7,r7,1
10005d6c:	8285c83a 	sub	r2,r16,r10
10005d70:	91c06f26 	beq	r18,r7,10005f30 <__subdf3+0x238>
10005d74:	0080b10e 	bge	zero,r2,1000603c <__subdf3+0x344>
10005d78:	50002a1e 	bne	r10,zero,10005e24 <__subdf3+0x12c>
10005d7c:	1988b03a 	or	r4,r3,r6
10005d80:	2000941e 	bne	r4,zero,10005fd4 <__subdf3+0x2dc>
10005d84:	888001cc 	andi	r2,r17,7
10005d88:	10005b26 	beq	r2,zero,10005ef8 <__subdf3+0x200>
10005d8c:	88c003cc 	andi	r3,r17,15
10005d90:	00800104 	movi	r2,4
10005d94:	18805826 	beq	r3,r2,10005ef8 <__subdf3+0x200>
10005d98:	88c00104 	addi	r3,r17,4
10005d9c:	1c63803a 	cmpltu	r17,r3,r17
10005da0:	2c4b883a 	add	r5,r5,r17
10005da4:	2880202c 	andhi	r2,r5,128
10005da8:	9200004c 	andi	r8,r18,1
10005dac:	1823883a 	mov	r17,r3
10005db0:	10005426 	beq	r2,zero,10005f04 <__subdf3+0x20c>
10005db4:	84000044 	addi	r16,r16,1
10005db8:	0081ffc4 	movi	r2,2047
10005dbc:	8080bf26 	beq	r16,r2,100060bc <__subdf3+0x3c4>
10005dc0:	013fe034 	movhi	r4,65408
10005dc4:	213fffc4 	addi	r4,r4,-1
10005dc8:	290a703a 	and	r5,r5,r4
10005dcc:	2804977a 	slli	r2,r5,29
10005dd0:	280a927a 	slli	r5,r5,9
10005dd4:	8822d0fa 	srli	r17,r17,3
10005dd8:	8401ffcc 	andi	r16,r16,2047
10005ddc:	2808d33a 	srli	r4,r5,12
10005de0:	1444b03a 	or	r2,r2,r17
10005de4:	8401ffcc 	andi	r16,r16,2047
10005de8:	800a953a 	slli	r5,r16,20
10005dec:	40c03fcc 	andi	r3,r8,255
10005df0:	04000434 	movhi	r16,16
10005df4:	180697fa 	slli	r3,r3,31
10005df8:	843fffc4 	addi	r16,r16,-1
10005dfc:	2420703a 	and	r16,r4,r16
10005e00:	8160b03a 	or	r16,r16,r5
10005e04:	80c6b03a 	or	r3,r16,r3
10005e08:	dfc00417 	ldw	ra,16(sp)
10005e0c:	dcc00317 	ldw	r19,12(sp)
10005e10:	dc800217 	ldw	r18,8(sp)
10005e14:	dc400117 	ldw	r17,4(sp)
10005e18:	dc000017 	ldw	r16,0(sp)
10005e1c:	dec00504 	addi	sp,sp,20
10005e20:	f800283a 	ret
10005e24:	0101ffc4 	movi	r4,2047
10005e28:	813fd626 	beq	r16,r4,10005d84 <__alt_data_end+0xf8005d84>
10005e2c:	18c02034 	orhi	r3,r3,128
10005e30:	01000e04 	movi	r4,56
10005e34:	2080a416 	blt	r4,r2,100060c8 <__subdf3+0x3d0>
10005e38:	010007c4 	movi	r4,31
10005e3c:	2080c716 	blt	r4,r2,1000615c <__subdf3+0x464>
10005e40:	01000804 	movi	r4,32
10005e44:	2089c83a 	sub	r4,r4,r2
10005e48:	1910983a 	sll	r8,r3,r4
10005e4c:	308ed83a 	srl	r7,r6,r2
10005e50:	3108983a 	sll	r4,r6,r4
10005e54:	1884d83a 	srl	r2,r3,r2
10005e58:	41ccb03a 	or	r6,r8,r7
10005e5c:	2008c03a 	cmpne	r4,r4,zero
10005e60:	310cb03a 	or	r6,r6,r4
10005e64:	898dc83a 	sub	r6,r17,r6
10005e68:	89a3803a 	cmpltu	r17,r17,r6
10005e6c:	288bc83a 	sub	r5,r5,r2
10005e70:	2c4bc83a 	sub	r5,r5,r17
10005e74:	3023883a 	mov	r17,r6
10005e78:	2880202c 	andhi	r2,r5,128
10005e7c:	10006b26 	beq	r2,zero,1000602c <__subdf3+0x334>
10005e80:	04c02034 	movhi	r19,128
10005e84:	9cffffc4 	addi	r19,r19,-1
10005e88:	2ce6703a 	and	r19,r5,r19
10005e8c:	98007c26 	beq	r19,zero,10006080 <__subdf3+0x388>
10005e90:	9809883a 	mov	r4,r19
10005e94:	00067c40 	call	100067c4 <__clzsi2>
10005e98:	10fffe04 	addi	r3,r2,-8
10005e9c:	010007c4 	movi	r4,31
10005ea0:	20c07d16 	blt	r4,r3,10006098 <__subdf3+0x3a0>
10005ea4:	01400a04 	movi	r5,40
10005ea8:	2885c83a 	sub	r2,r5,r2
10005eac:	888ad83a 	srl	r5,r17,r2
10005eb0:	98e6983a 	sll	r19,r19,r3
10005eb4:	88e2983a 	sll	r17,r17,r3
10005eb8:	2ce6b03a 	or	r19,r5,r19
10005ebc:	1c007a16 	blt	r3,r16,100060a8 <__subdf3+0x3b0>
10005ec0:	1c21c83a 	sub	r16,r3,r16
10005ec4:	81400044 	addi	r5,r16,1
10005ec8:	00c007c4 	movi	r3,31
10005ecc:	19409616 	blt	r3,r5,10006128 <__subdf3+0x430>
10005ed0:	1c21c83a 	sub	r16,r3,r16
10005ed4:	8c08983a 	sll	r4,r17,r16
10005ed8:	8946d83a 	srl	r3,r17,r5
10005edc:	9c20983a 	sll	r16,r19,r16
10005ee0:	2008c03a 	cmpne	r4,r4,zero
10005ee4:	994ad83a 	srl	r5,r19,r5
10005ee8:	1c06b03a 	or	r3,r3,r16
10005eec:	1922b03a 	or	r17,r3,r4
10005ef0:	0021883a 	mov	r16,zero
10005ef4:	003fa306 	br	10005d84 <__alt_data_end+0xf8005d84>
10005ef8:	2880202c 	andhi	r2,r5,128
10005efc:	9200004c 	andi	r8,r18,1
10005f00:	103fac1e 	bne	r2,zero,10005db4 <__alt_data_end+0xf8005db4>
10005f04:	2804977a 	slli	r2,r5,29
10005f08:	8822d0fa 	srli	r17,r17,3
10005f0c:	00c1ffc4 	movi	r3,2047
10005f10:	280ad0fa 	srli	r5,r5,3
10005f14:	1444b03a 	or	r2,r2,r17
10005f18:	80c02726 	beq	r16,r3,10005fb8 <__subdf3+0x2c0>
10005f1c:	01000434 	movhi	r4,16
10005f20:	213fffc4 	addi	r4,r4,-1
10005f24:	80e0703a 	and	r16,r16,r3
10005f28:	2908703a 	and	r4,r5,r4
10005f2c:	003fad06 	br	10005de4 <__alt_data_end+0xf8005de4>
10005f30:	0080690e 	bge	zero,r2,100060d8 <__subdf3+0x3e0>
10005f34:	50002f26 	beq	r10,zero,10005ff4 <__subdf3+0x2fc>
10005f38:	0101ffc4 	movi	r4,2047
10005f3c:	813f9126 	beq	r16,r4,10005d84 <__alt_data_end+0xf8005d84>
10005f40:	18c02034 	orhi	r3,r3,128
10005f44:	01000e04 	movi	r4,56
10005f48:	2080b00e 	bge	r4,r2,1000620c <__subdf3+0x514>
10005f4c:	198cb03a 	or	r6,r3,r6
10005f50:	300ec03a 	cmpne	r7,r6,zero
10005f54:	0005883a 	mov	r2,zero
10005f58:	3c4f883a 	add	r7,r7,r17
10005f5c:	3c63803a 	cmpltu	r17,r7,r17
10005f60:	114b883a 	add	r5,r2,r5
10005f64:	2c4b883a 	add	r5,r5,r17
10005f68:	3823883a 	mov	r17,r7
10005f6c:	2880202c 	andhi	r2,r5,128
10005f70:	10002e26 	beq	r2,zero,1000602c <__subdf3+0x334>
10005f74:	84000044 	addi	r16,r16,1
10005f78:	0081ffc4 	movi	r2,2047
10005f7c:	8080de26 	beq	r16,r2,100062f8 <__subdf3+0x600>
10005f80:	00bfe034 	movhi	r2,65408
10005f84:	10bfffc4 	addi	r2,r2,-1
10005f88:	288a703a 	and	r5,r5,r2
10005f8c:	880cd07a 	srli	r6,r17,1
10005f90:	280897fa 	slli	r4,r5,31
10005f94:	88c0004c 	andi	r3,r17,1
10005f98:	30e2b03a 	or	r17,r6,r3
10005f9c:	280ad07a 	srli	r5,r5,1
10005fa0:	8922b03a 	or	r17,r17,r4
10005fa4:	003f7706 	br	10005d84 <__alt_data_end+0xf8005d84>
10005fa8:	1984b03a 	or	r2,r3,r6
10005fac:	103f6e26 	beq	r2,zero,10005d68 <__alt_data_end+0xf8005d68>
10005fb0:	39c03fcc 	andi	r7,r7,255
10005fb4:	003f6d06 	br	10005d6c <__alt_data_end+0xf8005d6c>
10005fb8:	1146b03a 	or	r3,r2,r5
10005fbc:	18003f26 	beq	r3,zero,100060bc <__subdf3+0x3c4>
10005fc0:	00c00434 	movhi	r3,16
10005fc4:	29000234 	orhi	r4,r5,8
10005fc8:	18ffffc4 	addi	r3,r3,-1
10005fcc:	20c8703a 	and	r4,r4,r3
10005fd0:	003f8406 	br	10005de4 <__alt_data_end+0xf8005de4>
10005fd4:	10bfffc4 	addi	r2,r2,-1
10005fd8:	1000501e 	bne	r2,zero,1000611c <__subdf3+0x424>
10005fdc:	898fc83a 	sub	r7,r17,r6
10005fe0:	89e3803a 	cmpltu	r17,r17,r7
10005fe4:	28cbc83a 	sub	r5,r5,r3
10005fe8:	2c4bc83a 	sub	r5,r5,r17
10005fec:	3823883a 	mov	r17,r7
10005ff0:	003fa106 	br	10005e78 <__alt_data_end+0xf8005e78>
10005ff4:	1988b03a 	or	r4,r3,r6
10005ff8:	203f6226 	beq	r4,zero,10005d84 <__alt_data_end+0xf8005d84>
10005ffc:	10bfffc4 	addi	r2,r2,-1
10006000:	10009b1e 	bne	r2,zero,10006270 <__subdf3+0x578>
10006004:	344d883a 	add	r6,r6,r17
10006008:	3463803a 	cmpltu	r17,r6,r17
1000600c:	194b883a 	add	r5,r3,r5
10006010:	2c4b883a 	add	r5,r5,r17
10006014:	3023883a 	mov	r17,r6
10006018:	003fd406 	br	10005f6c <__alt_data_end+0xf8005f6c>
1000601c:	1106b03a 	or	r3,r2,r4
10006020:	1800b426 	beq	r3,zero,100062f4 <__subdf3+0x5fc>
10006024:	100b883a 	mov	r5,r2
10006028:	2023883a 	mov	r17,r4
1000602c:	888001cc 	andi	r2,r17,7
10006030:	103f561e 	bne	r2,zero,10005d8c <__alt_data_end+0xf8005d8c>
10006034:	9200004c 	andi	r8,r18,1
10006038:	003fb206 	br	10005f04 <__alt_data_end+0xf8005f04>
1000603c:	1000531e 	bne	r2,zero,1000618c <__subdf3+0x494>
10006040:	80800044 	addi	r2,r16,1
10006044:	1081ffcc 	andi	r2,r2,2047
10006048:	01000044 	movi	r4,1
1000604c:	2080a00e 	bge	r4,r2,100062d0 <__subdf3+0x5d8>
10006050:	8985c83a 	sub	r2,r17,r6
10006054:	8889803a 	cmpltu	r4,r17,r2
10006058:	28e7c83a 	sub	r19,r5,r3
1000605c:	9927c83a 	sub	r19,r19,r4
10006060:	9900202c 	andhi	r4,r19,128
10006064:	20006226 	beq	r4,zero,100061f0 <__subdf3+0x4f8>
10006068:	3463c83a 	sub	r17,r6,r17
1000606c:	194bc83a 	sub	r5,r3,r5
10006070:	344d803a 	cmpltu	r6,r6,r17
10006074:	29a7c83a 	sub	r19,r5,r6
10006078:	3825883a 	mov	r18,r7
1000607c:	983f841e 	bne	r19,zero,10005e90 <__alt_data_end+0xf8005e90>
10006080:	8809883a 	mov	r4,r17
10006084:	00067c40 	call	100067c4 <__clzsi2>
10006088:	10800804 	addi	r2,r2,32
1000608c:	10fffe04 	addi	r3,r2,-8
10006090:	010007c4 	movi	r4,31
10006094:	20ff830e 	bge	r4,r3,10005ea4 <__alt_data_end+0xf8005ea4>
10006098:	14fff604 	addi	r19,r2,-40
1000609c:	8ce6983a 	sll	r19,r17,r19
100060a0:	0023883a 	mov	r17,zero
100060a4:	1c3f860e 	bge	r3,r16,10005ec0 <__alt_data_end+0xf8005ec0>
100060a8:	017fe034 	movhi	r5,65408
100060ac:	297fffc4 	addi	r5,r5,-1
100060b0:	80e1c83a 	sub	r16,r16,r3
100060b4:	994a703a 	and	r5,r19,r5
100060b8:	003f3206 	br	10005d84 <__alt_data_end+0xf8005d84>
100060bc:	0009883a 	mov	r4,zero
100060c0:	0005883a 	mov	r2,zero
100060c4:	003f4706 	br	10005de4 <__alt_data_end+0xf8005de4>
100060c8:	198cb03a 	or	r6,r3,r6
100060cc:	300cc03a 	cmpne	r6,r6,zero
100060d0:	0005883a 	mov	r2,zero
100060d4:	003f6306 	br	10005e64 <__alt_data_end+0xf8005e64>
100060d8:	10009d1e 	bne	r2,zero,10006350 <__subdf3+0x658>
100060dc:	81c00044 	addi	r7,r16,1
100060e0:	3881ffcc 	andi	r2,r7,2047
100060e4:	02400044 	movi	r9,1
100060e8:	4880680e 	bge	r9,r2,1000628c <__subdf3+0x594>
100060ec:	0081ffc4 	movi	r2,2047
100060f0:	3880ae26 	beq	r7,r2,100063ac <__subdf3+0x6b4>
100060f4:	344d883a 	add	r6,r6,r17
100060f8:	3463803a 	cmpltu	r17,r6,r17
100060fc:	194b883a 	add	r5,r3,r5
10006100:	2c4b883a 	add	r5,r5,r17
10006104:	282297fa 	slli	r17,r5,31
10006108:	300cd07a 	srli	r6,r6,1
1000610c:	280ad07a 	srli	r5,r5,1
10006110:	3821883a 	mov	r16,r7
10006114:	89a2b03a 	or	r17,r17,r6
10006118:	003f1a06 	br	10005d84 <__alt_data_end+0xf8005d84>
1000611c:	0101ffc4 	movi	r4,2047
10006120:	813f431e 	bne	r16,r4,10005e30 <__alt_data_end+0xf8005e30>
10006124:	003f1706 	br	10005d84 <__alt_data_end+0xf8005d84>
10006128:	80bff844 	addi	r2,r16,-31
1000612c:	00c00804 	movi	r3,32
10006130:	9884d83a 	srl	r2,r19,r2
10006134:	28c05126 	beq	r5,r3,1000627c <__subdf3+0x584>
10006138:	00c00fc4 	movi	r3,63
1000613c:	1c21c83a 	sub	r16,r3,r16
10006140:	9c26983a 	sll	r19,r19,r16
10006144:	9c62b03a 	or	r17,r19,r17
10006148:	8822c03a 	cmpne	r17,r17,zero
1000614c:	88a2b03a 	or	r17,r17,r2
10006150:	000b883a 	mov	r5,zero
10006154:	0021883a 	mov	r16,zero
10006158:	003fb406 	br	1000602c <__alt_data_end+0xf800602c>
1000615c:	113ff804 	addi	r4,r2,-32
10006160:	01c00804 	movi	r7,32
10006164:	1908d83a 	srl	r4,r3,r4
10006168:	11c04626 	beq	r2,r7,10006284 <__subdf3+0x58c>
1000616c:	01c01004 	movi	r7,64
10006170:	3885c83a 	sub	r2,r7,r2
10006174:	1884983a 	sll	r2,r3,r2
10006178:	118cb03a 	or	r6,r2,r6
1000617c:	300cc03a 	cmpne	r6,r6,zero
10006180:	310cb03a 	or	r6,r6,r4
10006184:	0005883a 	mov	r2,zero
10006188:	003f3606 	br	10005e64 <__alt_data_end+0xf8005e64>
1000618c:	80002b26 	beq	r16,zero,1000623c <__subdf3+0x544>
10006190:	0101ffc4 	movi	r4,2047
10006194:	51006926 	beq	r10,r4,1000633c <__subdf3+0x644>
10006198:	0085c83a 	sub	r2,zero,r2
1000619c:	29402034 	orhi	r5,r5,128
100061a0:	01000e04 	movi	r4,56
100061a4:	20807d16 	blt	r4,r2,1000639c <__subdf3+0x6a4>
100061a8:	010007c4 	movi	r4,31
100061ac:	2080d916 	blt	r4,r2,10006514 <__subdf3+0x81c>
100061b0:	01000804 	movi	r4,32
100061b4:	2089c83a 	sub	r4,r4,r2
100061b8:	2912983a 	sll	r9,r5,r4
100061bc:	8890d83a 	srl	r8,r17,r2
100061c0:	8908983a 	sll	r4,r17,r4
100061c4:	2884d83a 	srl	r2,r5,r2
100061c8:	4a22b03a 	or	r17,r9,r8
100061cc:	2008c03a 	cmpne	r4,r4,zero
100061d0:	8922b03a 	or	r17,r17,r4
100061d4:	3463c83a 	sub	r17,r6,r17
100061d8:	1885c83a 	sub	r2,r3,r2
100061dc:	344d803a 	cmpltu	r6,r6,r17
100061e0:	118bc83a 	sub	r5,r2,r6
100061e4:	5021883a 	mov	r16,r10
100061e8:	3825883a 	mov	r18,r7
100061ec:	003f2206 	br	10005e78 <__alt_data_end+0xf8005e78>
100061f0:	9886b03a 	or	r3,r19,r2
100061f4:	18001c1e 	bne	r3,zero,10006268 <__subdf3+0x570>
100061f8:	0011883a 	mov	r8,zero
100061fc:	000b883a 	mov	r5,zero
10006200:	0023883a 	mov	r17,zero
10006204:	0021883a 	mov	r16,zero
10006208:	003f3e06 	br	10005f04 <__alt_data_end+0xf8005f04>
1000620c:	010007c4 	movi	r4,31
10006210:	20803c16 	blt	r4,r2,10006304 <__subdf3+0x60c>
10006214:	01000804 	movi	r4,32
10006218:	2089c83a 	sub	r4,r4,r2
1000621c:	1912983a 	sll	r9,r3,r4
10006220:	308ed83a 	srl	r7,r6,r2
10006224:	3108983a 	sll	r4,r6,r4
10006228:	1884d83a 	srl	r2,r3,r2
1000622c:	49ceb03a 	or	r7,r9,r7
10006230:	2008c03a 	cmpne	r4,r4,zero
10006234:	390eb03a 	or	r7,r7,r4
10006238:	003f4706 	br	10005f58 <__alt_data_end+0xf8005f58>
1000623c:	2c48b03a 	or	r4,r5,r17
10006240:	20003e26 	beq	r4,zero,1000633c <__subdf3+0x644>
10006244:	0084303a 	nor	r2,zero,r2
10006248:	10003a1e 	bne	r2,zero,10006334 <__subdf3+0x63c>
1000624c:	3463c83a 	sub	r17,r6,r17
10006250:	194bc83a 	sub	r5,r3,r5
10006254:	344d803a 	cmpltu	r6,r6,r17
10006258:	298bc83a 	sub	r5,r5,r6
1000625c:	5021883a 	mov	r16,r10
10006260:	3825883a 	mov	r18,r7
10006264:	003f0406 	br	10005e78 <__alt_data_end+0xf8005e78>
10006268:	1023883a 	mov	r17,r2
1000626c:	003f0706 	br	10005e8c <__alt_data_end+0xf8005e8c>
10006270:	0101ffc4 	movi	r4,2047
10006274:	813f331e 	bne	r16,r4,10005f44 <__alt_data_end+0xf8005f44>
10006278:	003ec206 	br	10005d84 <__alt_data_end+0xf8005d84>
1000627c:	0027883a 	mov	r19,zero
10006280:	003fb006 	br	10006144 <__alt_data_end+0xf8006144>
10006284:	0005883a 	mov	r2,zero
10006288:	003fbb06 	br	10006178 <__alt_data_end+0xf8006178>
1000628c:	2c44b03a 	or	r2,r5,r17
10006290:	80008b1e 	bne	r16,zero,100064c0 <__subdf3+0x7c8>
10006294:	1000b526 	beq	r2,zero,1000656c <__subdf3+0x874>
10006298:	1984b03a 	or	r2,r3,r6
1000629c:	103eb926 	beq	r2,zero,10005d84 <__alt_data_end+0xf8005d84>
100062a0:	3449883a 	add	r4,r6,r17
100062a4:	2463803a 	cmpltu	r17,r4,r17
100062a8:	194b883a 	add	r5,r3,r5
100062ac:	2c4b883a 	add	r5,r5,r17
100062b0:	2880202c 	andhi	r2,r5,128
100062b4:	2023883a 	mov	r17,r4
100062b8:	103f5c26 	beq	r2,zero,1000602c <__alt_data_end+0xf800602c>
100062bc:	00bfe034 	movhi	r2,65408
100062c0:	10bfffc4 	addi	r2,r2,-1
100062c4:	4821883a 	mov	r16,r9
100062c8:	288a703a 	and	r5,r5,r2
100062cc:	003ead06 	br	10005d84 <__alt_data_end+0xf8005d84>
100062d0:	2c44b03a 	or	r2,r5,r17
100062d4:	8000291e 	bne	r16,zero,1000637c <__subdf3+0x684>
100062d8:	10004f1e 	bne	r2,zero,10006418 <__subdf3+0x720>
100062dc:	1984b03a 	or	r2,r3,r6
100062e0:	10000426 	beq	r2,zero,100062f4 <__subdf3+0x5fc>
100062e4:	180b883a 	mov	r5,r3
100062e8:	3023883a 	mov	r17,r6
100062ec:	3825883a 	mov	r18,r7
100062f0:	003ea406 	br	10005d84 <__alt_data_end+0xf8005d84>
100062f4:	0011883a 	mov	r8,zero
100062f8:	000b883a 	mov	r5,zero
100062fc:	0023883a 	mov	r17,zero
10006300:	003f0006 	br	10005f04 <__alt_data_end+0xf8005f04>
10006304:	11fff804 	addi	r7,r2,-32
10006308:	19c8d83a 	srl	r4,r3,r7
1000630c:	01c00804 	movi	r7,32
10006310:	11c07e26 	beq	r2,r7,1000650c <__subdf3+0x814>
10006314:	01c01004 	movi	r7,64
10006318:	3885c83a 	sub	r2,r7,r2
1000631c:	1884983a 	sll	r2,r3,r2
10006320:	118cb03a 	or	r6,r2,r6
10006324:	300ec03a 	cmpne	r7,r6,zero
10006328:	390eb03a 	or	r7,r7,r4
1000632c:	0005883a 	mov	r2,zero
10006330:	003f0906 	br	10005f58 <__alt_data_end+0xf8005f58>
10006334:	0101ffc4 	movi	r4,2047
10006338:	513f991e 	bne	r10,r4,100061a0 <__alt_data_end+0xf80061a0>
1000633c:	180b883a 	mov	r5,r3
10006340:	3023883a 	mov	r17,r6
10006344:	5021883a 	mov	r16,r10
10006348:	3825883a 	mov	r18,r7
1000634c:	003e8d06 	br	10005d84 <__alt_data_end+0xf8005d84>
10006350:	80001a1e 	bne	r16,zero,100063bc <__subdf3+0x6c4>
10006354:	2c48b03a 	or	r4,r5,r17
10006358:	20005526 	beq	r4,zero,100064b0 <__subdf3+0x7b8>
1000635c:	0084303a 	nor	r2,zero,r2
10006360:	1000511e 	bne	r2,zero,100064a8 <__subdf3+0x7b0>
10006364:	89a3883a 	add	r17,r17,r6
10006368:	194b883a 	add	r5,r3,r5
1000636c:	898d803a 	cmpltu	r6,r17,r6
10006370:	298b883a 	add	r5,r5,r6
10006374:	5021883a 	mov	r16,r10
10006378:	003efc06 	br	10005f6c <__alt_data_end+0xf8005f6c>
1000637c:	1000341e 	bne	r2,zero,10006450 <__subdf3+0x758>
10006380:	1984b03a 	or	r2,r3,r6
10006384:	10006f26 	beq	r2,zero,10006544 <__subdf3+0x84c>
10006388:	180b883a 	mov	r5,r3
1000638c:	3023883a 	mov	r17,r6
10006390:	3825883a 	mov	r18,r7
10006394:	0401ffc4 	movi	r16,2047
10006398:	003e7a06 	br	10005d84 <__alt_data_end+0xf8005d84>
1000639c:	2c62b03a 	or	r17,r5,r17
100063a0:	8822c03a 	cmpne	r17,r17,zero
100063a4:	0005883a 	mov	r2,zero
100063a8:	003f8a06 	br	100061d4 <__alt_data_end+0xf80061d4>
100063ac:	3821883a 	mov	r16,r7
100063b0:	000b883a 	mov	r5,zero
100063b4:	0023883a 	mov	r17,zero
100063b8:	003ed206 	br	10005f04 <__alt_data_end+0xf8005f04>
100063bc:	0101ffc4 	movi	r4,2047
100063c0:	51003b26 	beq	r10,r4,100064b0 <__subdf3+0x7b8>
100063c4:	0085c83a 	sub	r2,zero,r2
100063c8:	29402034 	orhi	r5,r5,128
100063cc:	01000e04 	movi	r4,56
100063d0:	20806216 	blt	r4,r2,1000655c <__subdf3+0x864>
100063d4:	010007c4 	movi	r4,31
100063d8:	20806b16 	blt	r4,r2,10006588 <__subdf3+0x890>
100063dc:	01000804 	movi	r4,32
100063e0:	2089c83a 	sub	r4,r4,r2
100063e4:	2912983a 	sll	r9,r5,r4
100063e8:	888ed83a 	srl	r7,r17,r2
100063ec:	8908983a 	sll	r4,r17,r4
100063f0:	2884d83a 	srl	r2,r5,r2
100063f4:	49e2b03a 	or	r17,r9,r7
100063f8:	2008c03a 	cmpne	r4,r4,zero
100063fc:	8922b03a 	or	r17,r17,r4
10006400:	89a3883a 	add	r17,r17,r6
10006404:	10c5883a 	add	r2,r2,r3
10006408:	898d803a 	cmpltu	r6,r17,r6
1000640c:	118b883a 	add	r5,r2,r6
10006410:	5021883a 	mov	r16,r10
10006414:	003ed506 	br	10005f6c <__alt_data_end+0xf8005f6c>
10006418:	1984b03a 	or	r2,r3,r6
1000641c:	103e5926 	beq	r2,zero,10005d84 <__alt_data_end+0xf8005d84>
10006420:	8989c83a 	sub	r4,r17,r6
10006424:	8911803a 	cmpltu	r8,r17,r4
10006428:	28c5c83a 	sub	r2,r5,r3
1000642c:	1205c83a 	sub	r2,r2,r8
10006430:	1200202c 	andhi	r8,r2,128
10006434:	403ef926 	beq	r8,zero,1000601c <__alt_data_end+0xf800601c>
10006438:	3463c83a 	sub	r17,r6,r17
1000643c:	194bc83a 	sub	r5,r3,r5
10006440:	344d803a 	cmpltu	r6,r6,r17
10006444:	298bc83a 	sub	r5,r5,r6
10006448:	3825883a 	mov	r18,r7
1000644c:	003e4d06 	br	10005d84 <__alt_data_end+0xf8005d84>
10006450:	1984b03a 	or	r2,r3,r6
10006454:	10002b26 	beq	r2,zero,10006504 <__subdf3+0x80c>
10006458:	2808d0fa 	srli	r4,r5,3
1000645c:	8822d0fa 	srli	r17,r17,3
10006460:	280a977a 	slli	r5,r5,29
10006464:	2080022c 	andhi	r2,r4,8
10006468:	2c62b03a 	or	r17,r5,r17
1000646c:	10000826 	beq	r2,zero,10006490 <__subdf3+0x798>
10006470:	1810d0fa 	srli	r8,r3,3
10006474:	4080022c 	andhi	r2,r8,8
10006478:	1000051e 	bne	r2,zero,10006490 <__subdf3+0x798>
1000647c:	300cd0fa 	srli	r6,r6,3
10006480:	1804977a 	slli	r2,r3,29
10006484:	4009883a 	mov	r4,r8
10006488:	3825883a 	mov	r18,r7
1000648c:	11a2b03a 	or	r17,r2,r6
10006490:	880ad77a 	srli	r5,r17,29
10006494:	200890fa 	slli	r4,r4,3
10006498:	882290fa 	slli	r17,r17,3
1000649c:	0401ffc4 	movi	r16,2047
100064a0:	290ab03a 	or	r5,r5,r4
100064a4:	003e3706 	br	10005d84 <__alt_data_end+0xf8005d84>
100064a8:	0101ffc4 	movi	r4,2047
100064ac:	513fc71e 	bne	r10,r4,100063cc <__alt_data_end+0xf80063cc>
100064b0:	180b883a 	mov	r5,r3
100064b4:	3023883a 	mov	r17,r6
100064b8:	5021883a 	mov	r16,r10
100064bc:	003e3106 	br	10005d84 <__alt_data_end+0xf8005d84>
100064c0:	10002d26 	beq	r2,zero,10006578 <__subdf3+0x880>
100064c4:	1984b03a 	or	r2,r3,r6
100064c8:	10000e26 	beq	r2,zero,10006504 <__subdf3+0x80c>
100064cc:	2808d0fa 	srli	r4,r5,3
100064d0:	8822d0fa 	srli	r17,r17,3
100064d4:	280a977a 	slli	r5,r5,29
100064d8:	2080022c 	andhi	r2,r4,8
100064dc:	2c62b03a 	or	r17,r5,r17
100064e0:	103feb26 	beq	r2,zero,10006490 <__alt_data_end+0xf8006490>
100064e4:	180ed0fa 	srli	r7,r3,3
100064e8:	3880022c 	andhi	r2,r7,8
100064ec:	103fe81e 	bne	r2,zero,10006490 <__alt_data_end+0xf8006490>
100064f0:	300cd0fa 	srli	r6,r6,3
100064f4:	1804977a 	slli	r2,r3,29
100064f8:	3809883a 	mov	r4,r7
100064fc:	11a2b03a 	or	r17,r2,r6
10006500:	003fe306 	br	10006490 <__alt_data_end+0xf8006490>
10006504:	0401ffc4 	movi	r16,2047
10006508:	003e1e06 	br	10005d84 <__alt_data_end+0xf8005d84>
1000650c:	0005883a 	mov	r2,zero
10006510:	003f8306 	br	10006320 <__alt_data_end+0xf8006320>
10006514:	113ff804 	addi	r4,r2,-32
10006518:	02000804 	movi	r8,32
1000651c:	2908d83a 	srl	r4,r5,r4
10006520:	12002526 	beq	r2,r8,100065b8 <__subdf3+0x8c0>
10006524:	02001004 	movi	r8,64
10006528:	4085c83a 	sub	r2,r8,r2
1000652c:	288a983a 	sll	r5,r5,r2
10006530:	2c62b03a 	or	r17,r5,r17
10006534:	8822c03a 	cmpne	r17,r17,zero
10006538:	8922b03a 	or	r17,r17,r4
1000653c:	0005883a 	mov	r2,zero
10006540:	003f2406 	br	100061d4 <__alt_data_end+0xf80061d4>
10006544:	01402034 	movhi	r5,128
10006548:	0011883a 	mov	r8,zero
1000654c:	297fffc4 	addi	r5,r5,-1
10006550:	047ffe04 	movi	r17,-8
10006554:	0401ffc4 	movi	r16,2047
10006558:	003e6a06 	br	10005f04 <__alt_data_end+0xf8005f04>
1000655c:	2c62b03a 	or	r17,r5,r17
10006560:	8822c03a 	cmpne	r17,r17,zero
10006564:	0005883a 	mov	r2,zero
10006568:	003fa506 	br	10006400 <__alt_data_end+0xf8006400>
1000656c:	180b883a 	mov	r5,r3
10006570:	3023883a 	mov	r17,r6
10006574:	003e0306 	br	10005d84 <__alt_data_end+0xf8005d84>
10006578:	180b883a 	mov	r5,r3
1000657c:	3023883a 	mov	r17,r6
10006580:	0401ffc4 	movi	r16,2047
10006584:	003dff06 	br	10005d84 <__alt_data_end+0xf8005d84>
10006588:	113ff804 	addi	r4,r2,-32
1000658c:	01c00804 	movi	r7,32
10006590:	2908d83a 	srl	r4,r5,r4
10006594:	11c00a26 	beq	r2,r7,100065c0 <__subdf3+0x8c8>
10006598:	01c01004 	movi	r7,64
1000659c:	3885c83a 	sub	r2,r7,r2
100065a0:	288a983a 	sll	r5,r5,r2
100065a4:	2c62b03a 	or	r17,r5,r17
100065a8:	8822c03a 	cmpne	r17,r17,zero
100065ac:	8922b03a 	or	r17,r17,r4
100065b0:	0005883a 	mov	r2,zero
100065b4:	003f9206 	br	10006400 <__alt_data_end+0xf8006400>
100065b8:	000b883a 	mov	r5,zero
100065bc:	003fdc06 	br	10006530 <__alt_data_end+0xf8006530>
100065c0:	000b883a 	mov	r5,zero
100065c4:	003ff706 	br	100065a4 <__alt_data_end+0xf80065a4>

100065c8 <__fixdfsi>:
100065c8:	2806d53a 	srli	r3,r5,20
100065cc:	00800434 	movhi	r2,16
100065d0:	10bfffc4 	addi	r2,r2,-1
100065d4:	18c1ffcc 	andi	r3,r3,2047
100065d8:	0180ff84 	movi	r6,1022
100065dc:	2884703a 	and	r2,r5,r2
100065e0:	280ad7fa 	srli	r5,r5,31
100065e4:	30c0130e 	bge	r6,r3,10006634 <__fixdfsi+0x6c>
100065e8:	01810744 	movi	r6,1053
100065ec:	30c00d16 	blt	r6,r3,10006624 <__fixdfsi+0x5c>
100065f0:	01810cc4 	movi	r6,1075
100065f4:	30cdc83a 	sub	r6,r6,r3
100065f8:	01c007c4 	movi	r7,31
100065fc:	10800434 	orhi	r2,r2,16
10006600:	39800e0e 	bge	r7,r6,1000663c <__fixdfsi+0x74>
10006604:	010104c4 	movi	r4,1043
10006608:	20c7c83a 	sub	r3,r4,r3
1000660c:	10c6d83a 	srl	r3,r2,r3
10006610:	29403fcc 	andi	r5,r5,255
10006614:	0145c83a 	sub	r2,zero,r5
10006618:	1884f03a 	xor	r2,r3,r2
1000661c:	1145883a 	add	r2,r2,r5
10006620:	f800283a 	ret
10006624:	00a00034 	movhi	r2,32768
10006628:	10bfffc4 	addi	r2,r2,-1
1000662c:	2885883a 	add	r2,r5,r2
10006630:	f800283a 	ret
10006634:	0005883a 	mov	r2,zero
10006638:	f800283a 	ret
1000663c:	18fefb44 	addi	r3,r3,-1043
10006640:	2188d83a 	srl	r4,r4,r6
10006644:	10c6983a 	sll	r3,r2,r3
10006648:	20c6b03a 	or	r3,r4,r3
1000664c:	003ff006 	br	10006610 <__alt_data_end+0xf8006610>

10006650 <__floatsidf>:
10006650:	defffd04 	addi	sp,sp,-12
10006654:	dc400115 	stw	r17,4(sp)
10006658:	dfc00215 	stw	ra,8(sp)
1000665c:	dc000015 	stw	r16,0(sp)
10006660:	2023883a 	mov	r17,r4
10006664:	20001426 	beq	r4,zero,100066b8 <__floatsidf+0x68>
10006668:	2020d7fa 	srli	r16,r4,31
1000666c:	80000126 	beq	r16,zero,10006674 <__floatsidf+0x24>
10006670:	0123c83a 	sub	r17,zero,r4
10006674:	8809883a 	mov	r4,r17
10006678:	00067c40 	call	100067c4 <__clzsi2>
1000667c:	01410784 	movi	r5,1054
10006680:	00c00284 	movi	r3,10
10006684:	288bc83a 	sub	r5,r5,r2
10006688:	18801c16 	blt	r3,r2,100066fc <__floatsidf+0xac>
1000668c:	00c002c4 	movi	r3,11
10006690:	1887c83a 	sub	r3,r3,r2
10006694:	88c8d83a 	srl	r4,r17,r3
10006698:	00c00434 	movhi	r3,16
1000669c:	18ffffc4 	addi	r3,r3,-1
100066a0:	10800544 	addi	r2,r2,21
100066a4:	20c8703a 	and	r4,r4,r3
100066a8:	8884983a 	sll	r2,r17,r2
100066ac:	28c1ffcc 	andi	r3,r5,2047
100066b0:	800d883a 	mov	r6,r16
100066b4:	00000406 	br	100066c8 <__floatsidf+0x78>
100066b8:	000d883a 	mov	r6,zero
100066bc:	0007883a 	mov	r3,zero
100066c0:	0009883a 	mov	r4,zero
100066c4:	0005883a 	mov	r2,zero
100066c8:	180a953a 	slli	r5,r3,20
100066cc:	31803fcc 	andi	r6,r6,255
100066d0:	00c00434 	movhi	r3,16
100066d4:	300c97fa 	slli	r6,r6,31
100066d8:	18ffffc4 	addi	r3,r3,-1
100066dc:	20c6703a 	and	r3,r4,r3
100066e0:	1946b03a 	or	r3,r3,r5
100066e4:	1986b03a 	or	r3,r3,r6
100066e8:	dfc00217 	ldw	ra,8(sp)
100066ec:	dc400117 	ldw	r17,4(sp)
100066f0:	dc000017 	ldw	r16,0(sp)
100066f4:	dec00304 	addi	sp,sp,12
100066f8:	f800283a 	ret
100066fc:	10fffd44 	addi	r3,r2,-11
10006700:	88c8983a 	sll	r4,r17,r3
10006704:	00800434 	movhi	r2,16
10006708:	10bfffc4 	addi	r2,r2,-1
1000670c:	2088703a 	and	r4,r4,r2
10006710:	28c1ffcc 	andi	r3,r5,2047
10006714:	800d883a 	mov	r6,r16
10006718:	0005883a 	mov	r2,zero
1000671c:	003fea06 	br	100066c8 <__alt_data_end+0xf80066c8>

10006720 <__floatunsidf>:
10006720:	defffe04 	addi	sp,sp,-8
10006724:	dc000015 	stw	r16,0(sp)
10006728:	dfc00115 	stw	ra,4(sp)
1000672c:	2021883a 	mov	r16,r4
10006730:	20001026 	beq	r4,zero,10006774 <__floatunsidf+0x54>
10006734:	00067c40 	call	100067c4 <__clzsi2>
10006738:	01410784 	movi	r5,1054
1000673c:	100d883a 	mov	r6,r2
10006740:	288bc83a 	sub	r5,r5,r2
10006744:	00800284 	movi	r2,10
10006748:	11801616 	blt	r2,r6,100067a4 <__floatunsidf+0x84>
1000674c:	008002c4 	movi	r2,11
10006750:	1185c83a 	sub	r2,r2,r6
10006754:	8084d83a 	srl	r2,r16,r2
10006758:	00c00434 	movhi	r3,16
1000675c:	31c00544 	addi	r7,r6,21
10006760:	18ffffc4 	addi	r3,r3,-1
10006764:	81e0983a 	sll	r16,r16,r7
10006768:	10cc703a 	and	r6,r2,r3
1000676c:	2941ffcc 	andi	r5,r5,2047
10006770:	00000206 	br	1000677c <__floatunsidf+0x5c>
10006774:	000b883a 	mov	r5,zero
10006778:	000d883a 	mov	r6,zero
1000677c:	280a953a 	slli	r5,r5,20
10006780:	00c00434 	movhi	r3,16
10006784:	18ffffc4 	addi	r3,r3,-1
10006788:	30c6703a 	and	r3,r6,r3
1000678c:	8005883a 	mov	r2,r16
10006790:	1946b03a 	or	r3,r3,r5
10006794:	dfc00117 	ldw	ra,4(sp)
10006798:	dc000017 	ldw	r16,0(sp)
1000679c:	dec00204 	addi	sp,sp,8
100067a0:	f800283a 	ret
100067a4:	31bffd44 	addi	r6,r6,-11
100067a8:	818c983a 	sll	r6,r16,r6
100067ac:	00800434 	movhi	r2,16
100067b0:	10bfffc4 	addi	r2,r2,-1
100067b4:	2941ffcc 	andi	r5,r5,2047
100067b8:	0021883a 	mov	r16,zero
100067bc:	308c703a 	and	r6,r6,r2
100067c0:	003fee06 	br	1000677c <__alt_data_end+0xf800677c>

100067c4 <__clzsi2>:
100067c4:	00bfffd4 	movui	r2,65535
100067c8:	11000b36 	bltu	r2,r4,100067f8 <__clzsi2+0x34>
100067cc:	00803fc4 	movi	r2,255
100067d0:	1100122e 	bgeu	r2,r4,1000681c <__clzsi2+0x58>
100067d4:	00c00204 	movi	r3,8
100067d8:	01400604 	movi	r5,24
100067dc:	20c8d83a 	srl	r4,r4,r3
100067e0:	00840074 	movhi	r2,4097
100067e4:	10a2d804 	addi	r2,r2,-29856
100067e8:	1109883a 	add	r4,r2,r4
100067ec:	20800003 	ldbu	r2,0(r4)
100067f0:	2885c83a 	sub	r2,r5,r2
100067f4:	f800283a 	ret
100067f8:	00804034 	movhi	r2,256
100067fc:	10bfffc4 	addi	r2,r2,-1
10006800:	11000336 	bltu	r2,r4,10006810 <__clzsi2+0x4c>
10006804:	00c00404 	movi	r3,16
10006808:	180b883a 	mov	r5,r3
1000680c:	003ff306 	br	100067dc <__alt_data_end+0xf80067dc>
10006810:	00c00604 	movi	r3,24
10006814:	01400204 	movi	r5,8
10006818:	003ff006 	br	100067dc <__alt_data_end+0xf80067dc>
1000681c:	0007883a 	mov	r3,zero
10006820:	01400804 	movi	r5,32
10006824:	003fed06 	br	100067dc <__alt_data_end+0xf80067dc>

10006828 <__errno>:
10006828:	00840074 	movhi	r2,4097
1000682c:	10a8b304 	addi	r2,r2,-23860
10006830:	10800017 	ldw	r2,0(r2)
10006834:	f800283a 	ret

10006838 <srand>:
10006838:	00840074 	movhi	r2,4097
1000683c:	10a8b304 	addi	r2,r2,-23860
10006840:	10800017 	ldw	r2,0(r2)
10006844:	11002915 	stw	r4,164(r2)
10006848:	10002a15 	stw	zero,168(r2)
1000684c:	f800283a 	ret

10006850 <rand>:
10006850:	00840074 	movhi	r2,4097
10006854:	defffe04 	addi	sp,sp,-8
10006858:	10a8b304 	addi	r2,r2,-23860
1000685c:	dc000015 	stw	r16,0(sp)
10006860:	14000017 	ldw	r16,0(r2)
10006864:	dfc00115 	stw	ra,4(sp)
10006868:	01932574 	movhi	r6,19605
1000686c:	81002917 	ldw	r4,164(r16)
10006870:	81402a17 	ldw	r5,168(r16)
10006874:	01d614b4 	movhi	r7,22610
10006878:	319fcb44 	addi	r6,r6,32557
1000687c:	39fd0b44 	addi	r7,r7,-3027
10006880:	00030fc0 	call	100030fc <__muldi3>
10006884:	11000044 	addi	r4,r2,1
10006888:	2085803a 	cmpltu	r2,r4,r2
1000688c:	10c7883a 	add	r3,r2,r3
10006890:	00a00034 	movhi	r2,32768
10006894:	10bfffc4 	addi	r2,r2,-1
10006898:	1884703a 	and	r2,r3,r2
1000689c:	81002915 	stw	r4,164(r16)
100068a0:	80c02a15 	stw	r3,168(r16)
100068a4:	dfc00117 	ldw	ra,4(sp)
100068a8:	dc000017 	ldw	r16,0(sp)
100068ac:	dec00204 	addi	sp,sp,8
100068b0:	f800283a 	ret

100068b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100068b4:	defffc04 	addi	sp,sp,-16
100068b8:	df000315 	stw	fp,12(sp)
100068bc:	df000304 	addi	fp,sp,12
100068c0:	e13ffd15 	stw	r4,-12(fp)
100068c4:	e17ffe15 	stw	r5,-8(fp)
100068c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100068cc:	e0fffe17 	ldw	r3,-8(fp)
100068d0:	e0bffd17 	ldw	r2,-12(fp)
100068d4:	18800c26 	beq	r3,r2,10006908 <alt_load_section+0x54>
  {
    while( to != end )
100068d8:	00000806 	br	100068fc <alt_load_section+0x48>
    {
      *to++ = *from++;
100068dc:	e0bffe17 	ldw	r2,-8(fp)
100068e0:	10c00104 	addi	r3,r2,4
100068e4:	e0fffe15 	stw	r3,-8(fp)
100068e8:	e0fffd17 	ldw	r3,-12(fp)
100068ec:	19000104 	addi	r4,r3,4
100068f0:	e13ffd15 	stw	r4,-12(fp)
100068f4:	18c00017 	ldw	r3,0(r3)
100068f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100068fc:	e0fffe17 	ldw	r3,-8(fp)
10006900:	e0bfff17 	ldw	r2,-4(fp)
10006904:	18bff51e 	bne	r3,r2,100068dc <__alt_data_end+0xf80068dc>
    {
      *to++ = *from++;
    }
  }
}
10006908:	e037883a 	mov	sp,fp
1000690c:	df000017 	ldw	fp,0(sp)
10006910:	dec00104 	addi	sp,sp,4
10006914:	f800283a 	ret

10006918 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10006918:	defffe04 	addi	sp,sp,-8
1000691c:	dfc00115 	stw	ra,4(sp)
10006920:	df000015 	stw	fp,0(sp)
10006924:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10006928:	01040074 	movhi	r4,4097
1000692c:	2128bd04 	addi	r4,r4,-23820
10006930:	01440074 	movhi	r5,4097
10006934:	29632604 	addi	r5,r5,-29544
10006938:	01840074 	movhi	r6,4097
1000693c:	31a8bd04 	addi	r6,r6,-23820
10006940:	00068b40 	call	100068b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10006944:	01040034 	movhi	r4,4096
10006948:	21000804 	addi	r4,r4,32
1000694c:	01440034 	movhi	r5,4096
10006950:	29400804 	addi	r5,r5,32
10006954:	01840034 	movhi	r6,4096
10006958:	31808b04 	addi	r6,r6,556
1000695c:	00068b40 	call	100068b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10006960:	01040074 	movhi	r4,4097
10006964:	2122c604 	addi	r4,r4,-29928
10006968:	01440074 	movhi	r5,4097
1000696c:	2962c604 	addi	r5,r5,-29928
10006970:	01840074 	movhi	r6,4097
10006974:	31a32604 	addi	r6,r6,-29544
10006978:	00068b40 	call	100068b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000697c:	00077780 	call	10007778 <alt_dcache_flush_all>
  alt_icache_flush_all();
10006980:	000796c0 	call	1000796c <alt_icache_flush_all>
}
10006984:	e037883a 	mov	sp,fp
10006988:	dfc00117 	ldw	ra,4(sp)
1000698c:	df000017 	ldw	fp,0(sp)
10006990:	dec00204 	addi	sp,sp,8
10006994:	f800283a 	ret

10006998 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10006998:	defffd04 	addi	sp,sp,-12
1000699c:	dfc00215 	stw	ra,8(sp)
100069a0:	df000115 	stw	fp,4(sp)
100069a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100069a8:	0009883a 	mov	r4,zero
100069ac:	0006a480 	call	10006a48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100069b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100069b4:	0006a7c0 	call	10006a7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100069b8:	01040074 	movhi	r4,4097
100069bc:	21231904 	addi	r4,r4,-29596
100069c0:	01440074 	movhi	r5,4097
100069c4:	29631904 	addi	r5,r5,-29596
100069c8:	01840074 	movhi	r6,4097
100069cc:	31a31904 	addi	r6,r6,-29596
100069d0:	0007d380 	call	10007d38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100069d4:	00078b40 	call	100078b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100069d8:	01040034 	movhi	r4,4096
100069dc:	211e4404 	addi	r4,r4,30992
100069e0:	00085a40 	call	100085a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100069e4:	d125aa17 	ldw	r4,-26968(gp)
100069e8:	d0e5ab17 	ldw	r3,-26964(gp)
100069ec:	d0a5ac17 	ldw	r2,-26960(gp)
100069f0:	180b883a 	mov	r5,r3
100069f4:	100d883a 	mov	r6,r2
100069f8:	00002680 	call	10000268 <main>
100069fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10006a00:	01000044 	movi	r4,1
10006a04:	00076a00 	call	100076a0 <close>
  exit (result);
10006a08:	e13fff17 	ldw	r4,-4(fp)
10006a0c:	00085b80 	call	100085b8 <exit>

10006a10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10006a10:	defffd04 	addi	sp,sp,-12
10006a14:	dfc00215 	stw	ra,8(sp)
10006a18:	df000115 	stw	fp,4(sp)
10006a1c:	df000104 	addi	fp,sp,4
10006a20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10006a24:	e13fff17 	ldw	r4,-4(fp)
10006a28:	01440074 	movhi	r5,4097
10006a2c:	2968b604 	addi	r5,r5,-23848
10006a30:	00078100 	call	10007810 <alt_dev_llist_insert>
}
10006a34:	e037883a 	mov	sp,fp
10006a38:	dfc00117 	ldw	ra,4(sp)
10006a3c:	df000017 	ldw	fp,0(sp)
10006a40:	dec00204 	addi	sp,sp,8
10006a44:	f800283a 	ret

10006a48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10006a48:	defffd04 	addi	sp,sp,-12
10006a4c:	dfc00215 	stw	ra,8(sp)
10006a50:	df000115 	stw	fp,4(sp)
10006a54:	df000104 	addi	fp,sp,4
10006a58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10006a5c:	00082700 	call	10008270 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10006a60:	00800044 	movi	r2,1
10006a64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10006a68:	e037883a 	mov	sp,fp
10006a6c:	dfc00117 	ldw	ra,4(sp)
10006a70:	df000017 	ldw	fp,0(sp)
10006a74:	dec00204 	addi	sp,sp,8
10006a78:	f800283a 	ret

10006a7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10006a7c:	defffe04 	addi	sp,sp,-8
10006a80:	dfc00115 	stw	ra,4(sp)
10006a84:	df000015 	stw	fp,0(sp)
10006a88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10006a8c:	01040074 	movhi	r4,4097
10006a90:	21243904 	addi	r4,r4,-28444
10006a94:	000b883a 	mov	r5,zero
10006a98:	01800144 	movi	r6,5
10006a9c:	0006c280 	call	10006c28 <altera_avalon_jtag_uart_init>
10006aa0:	01040074 	movhi	r4,4097
10006aa4:	21242f04 	addi	r4,r4,-28484
10006aa8:	0006a100 	call	10006a10 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10006aac:	0001883a 	nop
}
10006ab0:	e037883a 	mov	sp,fp
10006ab4:	dfc00117 	ldw	ra,4(sp)
10006ab8:	df000017 	ldw	fp,0(sp)
10006abc:	dec00204 	addi	sp,sp,8
10006ac0:	f800283a 	ret

10006ac4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10006ac4:	defffa04 	addi	sp,sp,-24
10006ac8:	dfc00515 	stw	ra,20(sp)
10006acc:	df000415 	stw	fp,16(sp)
10006ad0:	df000404 	addi	fp,sp,16
10006ad4:	e13ffd15 	stw	r4,-12(fp)
10006ad8:	e17ffe15 	stw	r5,-8(fp)
10006adc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10006ae0:	e0bffd17 	ldw	r2,-12(fp)
10006ae4:	10800017 	ldw	r2,0(r2)
10006ae8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10006aec:	e0bffc17 	ldw	r2,-16(fp)
10006af0:	10c00a04 	addi	r3,r2,40
10006af4:	e0bffd17 	ldw	r2,-12(fp)
10006af8:	10800217 	ldw	r2,8(r2)
10006afc:	1809883a 	mov	r4,r3
10006b00:	e17ffe17 	ldw	r5,-8(fp)
10006b04:	e1bfff17 	ldw	r6,-4(fp)
10006b08:	100f883a 	mov	r7,r2
10006b0c:	00070ec0 	call	100070ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10006b10:	e037883a 	mov	sp,fp
10006b14:	dfc00117 	ldw	ra,4(sp)
10006b18:	df000017 	ldw	fp,0(sp)
10006b1c:	dec00204 	addi	sp,sp,8
10006b20:	f800283a 	ret

10006b24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10006b24:	defffa04 	addi	sp,sp,-24
10006b28:	dfc00515 	stw	ra,20(sp)
10006b2c:	df000415 	stw	fp,16(sp)
10006b30:	df000404 	addi	fp,sp,16
10006b34:	e13ffd15 	stw	r4,-12(fp)
10006b38:	e17ffe15 	stw	r5,-8(fp)
10006b3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10006b40:	e0bffd17 	ldw	r2,-12(fp)
10006b44:	10800017 	ldw	r2,0(r2)
10006b48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10006b4c:	e0bffc17 	ldw	r2,-16(fp)
10006b50:	10c00a04 	addi	r3,r2,40
10006b54:	e0bffd17 	ldw	r2,-12(fp)
10006b58:	10800217 	ldw	r2,8(r2)
10006b5c:	1809883a 	mov	r4,r3
10006b60:	e17ffe17 	ldw	r5,-8(fp)
10006b64:	e1bfff17 	ldw	r6,-4(fp)
10006b68:	100f883a 	mov	r7,r2
10006b6c:	00072f80 	call	100072f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10006b70:	e037883a 	mov	sp,fp
10006b74:	dfc00117 	ldw	ra,4(sp)
10006b78:	df000017 	ldw	fp,0(sp)
10006b7c:	dec00204 	addi	sp,sp,8
10006b80:	f800283a 	ret

10006b84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10006b84:	defffc04 	addi	sp,sp,-16
10006b88:	dfc00315 	stw	ra,12(sp)
10006b8c:	df000215 	stw	fp,8(sp)
10006b90:	df000204 	addi	fp,sp,8
10006b94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10006b98:	e0bfff17 	ldw	r2,-4(fp)
10006b9c:	10800017 	ldw	r2,0(r2)
10006ba0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10006ba4:	e0bffe17 	ldw	r2,-8(fp)
10006ba8:	10c00a04 	addi	r3,r2,40
10006bac:	e0bfff17 	ldw	r2,-4(fp)
10006bb0:	10800217 	ldw	r2,8(r2)
10006bb4:	1809883a 	mov	r4,r3
10006bb8:	100b883a 	mov	r5,r2
10006bbc:	0006f980 	call	10006f98 <altera_avalon_jtag_uart_close>
}
10006bc0:	e037883a 	mov	sp,fp
10006bc4:	dfc00117 	ldw	ra,4(sp)
10006bc8:	df000017 	ldw	fp,0(sp)
10006bcc:	dec00204 	addi	sp,sp,8
10006bd0:	f800283a 	ret

10006bd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10006bd4:	defffa04 	addi	sp,sp,-24
10006bd8:	dfc00515 	stw	ra,20(sp)
10006bdc:	df000415 	stw	fp,16(sp)
10006be0:	df000404 	addi	fp,sp,16
10006be4:	e13ffd15 	stw	r4,-12(fp)
10006be8:	e17ffe15 	stw	r5,-8(fp)
10006bec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10006bf0:	e0bffd17 	ldw	r2,-12(fp)
10006bf4:	10800017 	ldw	r2,0(r2)
10006bf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10006bfc:	e0bffc17 	ldw	r2,-16(fp)
10006c00:	10800a04 	addi	r2,r2,40
10006c04:	1009883a 	mov	r4,r2
10006c08:	e17ffe17 	ldw	r5,-8(fp)
10006c0c:	e1bfff17 	ldw	r6,-4(fp)
10006c10:	00070000 	call	10007000 <altera_avalon_jtag_uart_ioctl>
}
10006c14:	e037883a 	mov	sp,fp
10006c18:	dfc00117 	ldw	ra,4(sp)
10006c1c:	df000017 	ldw	fp,0(sp)
10006c20:	dec00204 	addi	sp,sp,8
10006c24:	f800283a 	ret

10006c28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10006c28:	defffa04 	addi	sp,sp,-24
10006c2c:	dfc00515 	stw	ra,20(sp)
10006c30:	df000415 	stw	fp,16(sp)
10006c34:	df000404 	addi	fp,sp,16
10006c38:	e13ffd15 	stw	r4,-12(fp)
10006c3c:	e17ffe15 	stw	r5,-8(fp)
10006c40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10006c44:	e0bffd17 	ldw	r2,-12(fp)
10006c48:	00c00044 	movi	r3,1
10006c4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10006c50:	e0bffd17 	ldw	r2,-12(fp)
10006c54:	10800017 	ldw	r2,0(r2)
10006c58:	10800104 	addi	r2,r2,4
10006c5c:	1007883a 	mov	r3,r2
10006c60:	e0bffd17 	ldw	r2,-12(fp)
10006c64:	10800817 	ldw	r2,32(r2)
10006c68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10006c6c:	e0fffe17 	ldw	r3,-8(fp)
10006c70:	e0bfff17 	ldw	r2,-4(fp)
10006c74:	d8000015 	stw	zero,0(sp)
10006c78:	1809883a 	mov	r4,r3
10006c7c:	100b883a 	mov	r5,r2
10006c80:	01840034 	movhi	r6,4096
10006c84:	319b3b04 	addi	r6,r6,27884
10006c88:	e1fffd17 	ldw	r7,-12(fp)
10006c8c:	00079880 	call	10007988 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10006c90:	e0bffd17 	ldw	r2,-12(fp)
10006c94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10006c98:	e0bffd17 	ldw	r2,-12(fp)
10006c9c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10006ca0:	00840074 	movhi	r2,4097
10006ca4:	10ae5f04 	addi	r2,r2,-18052
10006ca8:	10800017 	ldw	r2,0(r2)
10006cac:	1809883a 	mov	r4,r3
10006cb0:	100b883a 	mov	r5,r2
10006cb4:	01840034 	movhi	r6,4096
10006cb8:	319bbc04 	addi	r6,r6,28400
10006cbc:	e1fffd17 	ldw	r7,-12(fp)
10006cc0:	00075100 	call	10007510 <alt_alarm_start>
10006cc4:	1000040e 	bge	r2,zero,10006cd8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10006cc8:	e0fffd17 	ldw	r3,-12(fp)
10006ccc:	00a00034 	movhi	r2,32768
10006cd0:	10bfffc4 	addi	r2,r2,-1
10006cd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10006cd8:	e037883a 	mov	sp,fp
10006cdc:	dfc00117 	ldw	ra,4(sp)
10006ce0:	df000017 	ldw	fp,0(sp)
10006ce4:	dec00204 	addi	sp,sp,8
10006ce8:	f800283a 	ret

10006cec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10006cec:	defff804 	addi	sp,sp,-32
10006cf0:	df000715 	stw	fp,28(sp)
10006cf4:	df000704 	addi	fp,sp,28
10006cf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10006cfc:	e0bfff17 	ldw	r2,-4(fp)
10006d00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10006d04:	e0bffb17 	ldw	r2,-20(fp)
10006d08:	10800017 	ldw	r2,0(r2)
10006d0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10006d10:	e0bffc17 	ldw	r2,-16(fp)
10006d14:	10800104 	addi	r2,r2,4
10006d18:	10800037 	ldwio	r2,0(r2)
10006d1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10006d20:	e0bffd17 	ldw	r2,-12(fp)
10006d24:	1080c00c 	andi	r2,r2,768
10006d28:	1000011e 	bne	r2,zero,10006d30 <altera_avalon_jtag_uart_irq+0x44>
      break;
10006d2c:	00006c06 	br	10006ee0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10006d30:	e0bffd17 	ldw	r2,-12(fp)
10006d34:	1080400c 	andi	r2,r2,256
10006d38:	10003426 	beq	r2,zero,10006e0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10006d3c:	00800074 	movhi	r2,1
10006d40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10006d44:	e0bffb17 	ldw	r2,-20(fp)
10006d48:	10800a17 	ldw	r2,40(r2)
10006d4c:	10800044 	addi	r2,r2,1
10006d50:	1081ffcc 	andi	r2,r2,2047
10006d54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10006d58:	e0bffb17 	ldw	r2,-20(fp)
10006d5c:	10c00b17 	ldw	r3,44(r2)
10006d60:	e0bffe17 	ldw	r2,-8(fp)
10006d64:	1880011e 	bne	r3,r2,10006d6c <altera_avalon_jtag_uart_irq+0x80>
          break;
10006d68:	00001606 	br	10006dc4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10006d6c:	e0bffc17 	ldw	r2,-16(fp)
10006d70:	10800037 	ldwio	r2,0(r2)
10006d74:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10006d78:	e0bff917 	ldw	r2,-28(fp)
10006d7c:	10a0000c 	andi	r2,r2,32768
10006d80:	1000011e 	bne	r2,zero,10006d88 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10006d84:	00000f06 	br	10006dc4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10006d88:	e0bffb17 	ldw	r2,-20(fp)
10006d8c:	10800a17 	ldw	r2,40(r2)
10006d90:	e0fff917 	ldw	r3,-28(fp)
10006d94:	1809883a 	mov	r4,r3
10006d98:	e0fffb17 	ldw	r3,-20(fp)
10006d9c:	1885883a 	add	r2,r3,r2
10006da0:	10800e04 	addi	r2,r2,56
10006da4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10006da8:	e0bffb17 	ldw	r2,-20(fp)
10006dac:	10800a17 	ldw	r2,40(r2)
10006db0:	10800044 	addi	r2,r2,1
10006db4:	10c1ffcc 	andi	r3,r2,2047
10006db8:	e0bffb17 	ldw	r2,-20(fp)
10006dbc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10006dc0:	003fe006 	br	10006d44 <__alt_data_end+0xf8006d44>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10006dc4:	e0bff917 	ldw	r2,-28(fp)
10006dc8:	10bfffec 	andhi	r2,r2,65535
10006dcc:	10000f26 	beq	r2,zero,10006e0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10006dd0:	e0bffb17 	ldw	r2,-20(fp)
10006dd4:	10c00817 	ldw	r3,32(r2)
10006dd8:	00bfff84 	movi	r2,-2
10006ddc:	1886703a 	and	r3,r3,r2
10006de0:	e0bffb17 	ldw	r2,-20(fp)
10006de4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10006de8:	e0bffc17 	ldw	r2,-16(fp)
10006dec:	10800104 	addi	r2,r2,4
10006df0:	1007883a 	mov	r3,r2
10006df4:	e0bffb17 	ldw	r2,-20(fp)
10006df8:	10800817 	ldw	r2,32(r2)
10006dfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10006e00:	e0bffc17 	ldw	r2,-16(fp)
10006e04:	10800104 	addi	r2,r2,4
10006e08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10006e0c:	e0bffd17 	ldw	r2,-12(fp)
10006e10:	1080800c 	andi	r2,r2,512
10006e14:	10003126 	beq	r2,zero,10006edc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10006e18:	e0bffd17 	ldw	r2,-12(fp)
10006e1c:	1004d43a 	srli	r2,r2,16
10006e20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10006e24:	00001406 	br	10006e78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10006e28:	e0bffc17 	ldw	r2,-16(fp)
10006e2c:	e0fffb17 	ldw	r3,-20(fp)
10006e30:	18c00d17 	ldw	r3,52(r3)
10006e34:	e13ffb17 	ldw	r4,-20(fp)
10006e38:	20c7883a 	add	r3,r4,r3
10006e3c:	18c20e04 	addi	r3,r3,2104
10006e40:	18c00003 	ldbu	r3,0(r3)
10006e44:	18c03fcc 	andi	r3,r3,255
10006e48:	18c0201c 	xori	r3,r3,128
10006e4c:	18ffe004 	addi	r3,r3,-128
10006e50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10006e54:	e0bffb17 	ldw	r2,-20(fp)
10006e58:	10800d17 	ldw	r2,52(r2)
10006e5c:	10800044 	addi	r2,r2,1
10006e60:	10c1ffcc 	andi	r3,r2,2047
10006e64:	e0bffb17 	ldw	r2,-20(fp)
10006e68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10006e6c:	e0bffa17 	ldw	r2,-24(fp)
10006e70:	10bfffc4 	addi	r2,r2,-1
10006e74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10006e78:	e0bffa17 	ldw	r2,-24(fp)
10006e7c:	10000526 	beq	r2,zero,10006e94 <altera_avalon_jtag_uart_irq+0x1a8>
10006e80:	e0bffb17 	ldw	r2,-20(fp)
10006e84:	10c00d17 	ldw	r3,52(r2)
10006e88:	e0bffb17 	ldw	r2,-20(fp)
10006e8c:	10800c17 	ldw	r2,48(r2)
10006e90:	18bfe51e 	bne	r3,r2,10006e28 <__alt_data_end+0xf8006e28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10006e94:	e0bffa17 	ldw	r2,-24(fp)
10006e98:	10001026 	beq	r2,zero,10006edc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10006e9c:	e0bffb17 	ldw	r2,-20(fp)
10006ea0:	10c00817 	ldw	r3,32(r2)
10006ea4:	00bfff44 	movi	r2,-3
10006ea8:	1886703a 	and	r3,r3,r2
10006eac:	e0bffb17 	ldw	r2,-20(fp)
10006eb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10006eb4:	e0bffb17 	ldw	r2,-20(fp)
10006eb8:	10800017 	ldw	r2,0(r2)
10006ebc:	10800104 	addi	r2,r2,4
10006ec0:	1007883a 	mov	r3,r2
10006ec4:	e0bffb17 	ldw	r2,-20(fp)
10006ec8:	10800817 	ldw	r2,32(r2)
10006ecc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10006ed0:	e0bffc17 	ldw	r2,-16(fp)
10006ed4:	10800104 	addi	r2,r2,4
10006ed8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10006edc:	003f8c06 	br	10006d10 <__alt_data_end+0xf8006d10>
}
10006ee0:	e037883a 	mov	sp,fp
10006ee4:	df000017 	ldw	fp,0(sp)
10006ee8:	dec00104 	addi	sp,sp,4
10006eec:	f800283a 	ret

10006ef0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10006ef0:	defff804 	addi	sp,sp,-32
10006ef4:	df000715 	stw	fp,28(sp)
10006ef8:	df000704 	addi	fp,sp,28
10006efc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10006f00:	e0bffb17 	ldw	r2,-20(fp)
10006f04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10006f08:	e0bff917 	ldw	r2,-28(fp)
10006f0c:	10800017 	ldw	r2,0(r2)
10006f10:	10800104 	addi	r2,r2,4
10006f14:	10800037 	ldwio	r2,0(r2)
10006f18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10006f1c:	e0bffa17 	ldw	r2,-24(fp)
10006f20:	1081000c 	andi	r2,r2,1024
10006f24:	10000b26 	beq	r2,zero,10006f54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10006f28:	e0bff917 	ldw	r2,-28(fp)
10006f2c:	10800017 	ldw	r2,0(r2)
10006f30:	10800104 	addi	r2,r2,4
10006f34:	1007883a 	mov	r3,r2
10006f38:	e0bff917 	ldw	r2,-28(fp)
10006f3c:	10800817 	ldw	r2,32(r2)
10006f40:	10810014 	ori	r2,r2,1024
10006f44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10006f48:	e0bff917 	ldw	r2,-28(fp)
10006f4c:	10000915 	stw	zero,36(r2)
10006f50:	00000a06 	br	10006f7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10006f54:	e0bff917 	ldw	r2,-28(fp)
10006f58:	10c00917 	ldw	r3,36(r2)
10006f5c:	00a00034 	movhi	r2,32768
10006f60:	10bfff04 	addi	r2,r2,-4
10006f64:	10c00536 	bltu	r2,r3,10006f7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10006f68:	e0bff917 	ldw	r2,-28(fp)
10006f6c:	10800917 	ldw	r2,36(r2)
10006f70:	10c00044 	addi	r3,r2,1
10006f74:	e0bff917 	ldw	r2,-28(fp)
10006f78:	10c00915 	stw	r3,36(r2)
10006f7c:	00840074 	movhi	r2,4097
10006f80:	10ae5f04 	addi	r2,r2,-18052
10006f84:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10006f88:	e037883a 	mov	sp,fp
10006f8c:	df000017 	ldw	fp,0(sp)
10006f90:	dec00104 	addi	sp,sp,4
10006f94:	f800283a 	ret

10006f98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10006f98:	defffd04 	addi	sp,sp,-12
10006f9c:	df000215 	stw	fp,8(sp)
10006fa0:	df000204 	addi	fp,sp,8
10006fa4:	e13ffe15 	stw	r4,-8(fp)
10006fa8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10006fac:	00000506 	br	10006fc4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10006fb0:	e0bfff17 	ldw	r2,-4(fp)
10006fb4:	1090000c 	andi	r2,r2,16384
10006fb8:	10000226 	beq	r2,zero,10006fc4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10006fbc:	00bffd44 	movi	r2,-11
10006fc0:	00000b06 	br	10006ff0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10006fc4:	e0bffe17 	ldw	r2,-8(fp)
10006fc8:	10c00d17 	ldw	r3,52(r2)
10006fcc:	e0bffe17 	ldw	r2,-8(fp)
10006fd0:	10800c17 	ldw	r2,48(r2)
10006fd4:	18800526 	beq	r3,r2,10006fec <altera_avalon_jtag_uart_close+0x54>
10006fd8:	e0bffe17 	ldw	r2,-8(fp)
10006fdc:	10c00917 	ldw	r3,36(r2)
10006fe0:	e0bffe17 	ldw	r2,-8(fp)
10006fe4:	10800117 	ldw	r2,4(r2)
10006fe8:	18bff136 	bltu	r3,r2,10006fb0 <__alt_data_end+0xf8006fb0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10006fec:	0005883a 	mov	r2,zero
}
10006ff0:	e037883a 	mov	sp,fp
10006ff4:	df000017 	ldw	fp,0(sp)
10006ff8:	dec00104 	addi	sp,sp,4
10006ffc:	f800283a 	ret

10007000 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10007000:	defffa04 	addi	sp,sp,-24
10007004:	df000515 	stw	fp,20(sp)
10007008:	df000504 	addi	fp,sp,20
1000700c:	e13ffd15 	stw	r4,-12(fp)
10007010:	e17ffe15 	stw	r5,-8(fp)
10007014:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10007018:	00bff9c4 	movi	r2,-25
1000701c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10007020:	e0bffe17 	ldw	r2,-8(fp)
10007024:	10da8060 	cmpeqi	r3,r2,27137
10007028:	1800031e 	bne	r3,zero,10007038 <altera_avalon_jtag_uart_ioctl+0x38>
1000702c:	109a80a0 	cmpeqi	r2,r2,27138
10007030:	1000191e 	bne	r2,zero,10007098 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10007034:	00002806 	br	100070d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10007038:	e0bffd17 	ldw	r2,-12(fp)
1000703c:	10c00117 	ldw	r3,4(r2)
10007040:	00a00034 	movhi	r2,32768
10007044:	10bfffc4 	addi	r2,r2,-1
10007048:	18801226 	beq	r3,r2,10007094 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000704c:	e0bfff17 	ldw	r2,-4(fp)
10007050:	10800017 	ldw	r2,0(r2)
10007054:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10007058:	e0bffc17 	ldw	r2,-16(fp)
1000705c:	10800090 	cmplti	r2,r2,2
10007060:	1000061e 	bne	r2,zero,1000707c <altera_avalon_jtag_uart_ioctl+0x7c>
10007064:	e0fffc17 	ldw	r3,-16(fp)
10007068:	00a00034 	movhi	r2,32768
1000706c:	10bfffc4 	addi	r2,r2,-1
10007070:	18800226 	beq	r3,r2,1000707c <altera_avalon_jtag_uart_ioctl+0x7c>
10007074:	e0bffc17 	ldw	r2,-16(fp)
10007078:	00000206 	br	10007084 <altera_avalon_jtag_uart_ioctl+0x84>
1000707c:	00a00034 	movhi	r2,32768
10007080:	10bfff84 	addi	r2,r2,-2
10007084:	e0fffd17 	ldw	r3,-12(fp)
10007088:	18800115 	stw	r2,4(r3)
      rc = 0;
1000708c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10007090:	00001106 	br	100070d8 <altera_avalon_jtag_uart_ioctl+0xd8>
10007094:	00001006 	br	100070d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10007098:	e0bffd17 	ldw	r2,-12(fp)
1000709c:	10c00117 	ldw	r3,4(r2)
100070a0:	00a00034 	movhi	r2,32768
100070a4:	10bfffc4 	addi	r2,r2,-1
100070a8:	18800a26 	beq	r3,r2,100070d4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100070ac:	e0bffd17 	ldw	r2,-12(fp)
100070b0:	10c00917 	ldw	r3,36(r2)
100070b4:	e0bffd17 	ldw	r2,-12(fp)
100070b8:	10800117 	ldw	r2,4(r2)
100070bc:	1885803a 	cmpltu	r2,r3,r2
100070c0:	10c03fcc 	andi	r3,r2,255
100070c4:	e0bfff17 	ldw	r2,-4(fp)
100070c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100070cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100070d0:	00000006 	br	100070d4 <altera_avalon_jtag_uart_ioctl+0xd4>
100070d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
100070d8:	e0bffb17 	ldw	r2,-20(fp)
}
100070dc:	e037883a 	mov	sp,fp
100070e0:	df000017 	ldw	fp,0(sp)
100070e4:	dec00104 	addi	sp,sp,4
100070e8:	f800283a 	ret

100070ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100070ec:	defff304 	addi	sp,sp,-52
100070f0:	dfc00c15 	stw	ra,48(sp)
100070f4:	df000b15 	stw	fp,44(sp)
100070f8:	df000b04 	addi	fp,sp,44
100070fc:	e13ffc15 	stw	r4,-16(fp)
10007100:	e17ffd15 	stw	r5,-12(fp)
10007104:	e1bffe15 	stw	r6,-8(fp)
10007108:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000710c:	e0bffd17 	ldw	r2,-12(fp)
10007110:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10007114:	00004906 	br	1000723c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10007118:	e0bffc17 	ldw	r2,-16(fp)
1000711c:	10800a17 	ldw	r2,40(r2)
10007120:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10007124:	e0bffc17 	ldw	r2,-16(fp)
10007128:	10800b17 	ldw	r2,44(r2)
1000712c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10007130:	e0fff717 	ldw	r3,-36(fp)
10007134:	e0bff817 	ldw	r2,-32(fp)
10007138:	18800536 	bltu	r3,r2,10007150 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000713c:	e0fff717 	ldw	r3,-36(fp)
10007140:	e0bff817 	ldw	r2,-32(fp)
10007144:	1885c83a 	sub	r2,r3,r2
10007148:	e0bff615 	stw	r2,-40(fp)
1000714c:	00000406 	br	10007160 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10007150:	00c20004 	movi	r3,2048
10007154:	e0bff817 	ldw	r2,-32(fp)
10007158:	1885c83a 	sub	r2,r3,r2
1000715c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10007160:	e0bff617 	ldw	r2,-40(fp)
10007164:	1000011e 	bne	r2,zero,1000716c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10007168:	00001d06 	br	100071e0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000716c:	e0fffe17 	ldw	r3,-8(fp)
10007170:	e0bff617 	ldw	r2,-40(fp)
10007174:	1880022e 	bgeu	r3,r2,10007180 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10007178:	e0bffe17 	ldw	r2,-8(fp)
1000717c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10007180:	e0bff817 	ldw	r2,-32(fp)
10007184:	10800e04 	addi	r2,r2,56
10007188:	e0fffc17 	ldw	r3,-16(fp)
1000718c:	1885883a 	add	r2,r3,r2
10007190:	e13ff517 	ldw	r4,-44(fp)
10007194:	100b883a 	mov	r5,r2
10007198:	e1bff617 	ldw	r6,-40(fp)
1000719c:	000866c0 	call	1000866c <memcpy>
      ptr   += n;
100071a0:	e0fff517 	ldw	r3,-44(fp)
100071a4:	e0bff617 	ldw	r2,-40(fp)
100071a8:	1885883a 	add	r2,r3,r2
100071ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100071b0:	e0fffe17 	ldw	r3,-8(fp)
100071b4:	e0bff617 	ldw	r2,-40(fp)
100071b8:	1885c83a 	sub	r2,r3,r2
100071bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100071c0:	e0fff817 	ldw	r3,-32(fp)
100071c4:	e0bff617 	ldw	r2,-40(fp)
100071c8:	1885883a 	add	r2,r3,r2
100071cc:	10c1ffcc 	andi	r3,r2,2047
100071d0:	e0bffc17 	ldw	r2,-16(fp)
100071d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100071d8:	e0bffe17 	ldw	r2,-8(fp)
100071dc:	00bfce16 	blt	zero,r2,10007118 <__alt_data_end+0xf8007118>

    /* If we read any data then return it */
    if (ptr != buffer)
100071e0:	e0fff517 	ldw	r3,-44(fp)
100071e4:	e0bffd17 	ldw	r2,-12(fp)
100071e8:	18800126 	beq	r3,r2,100071f0 <altera_avalon_jtag_uart_read+0x104>
      break;
100071ec:	00001506 	br	10007244 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100071f0:	e0bfff17 	ldw	r2,-4(fp)
100071f4:	1090000c 	andi	r2,r2,16384
100071f8:	10000126 	beq	r2,zero,10007200 <altera_avalon_jtag_uart_read+0x114>
      break;
100071fc:	00001106 	br	10007244 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10007200:	0001883a 	nop
10007204:	e0bffc17 	ldw	r2,-16(fp)
10007208:	10c00a17 	ldw	r3,40(r2)
1000720c:	e0bff717 	ldw	r2,-36(fp)
10007210:	1880051e 	bne	r3,r2,10007228 <altera_avalon_jtag_uart_read+0x13c>
10007214:	e0bffc17 	ldw	r2,-16(fp)
10007218:	10c00917 	ldw	r3,36(r2)
1000721c:	e0bffc17 	ldw	r2,-16(fp)
10007220:	10800117 	ldw	r2,4(r2)
10007224:	18bff736 	bltu	r3,r2,10007204 <__alt_data_end+0xf8007204>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10007228:	e0bffc17 	ldw	r2,-16(fp)
1000722c:	10c00a17 	ldw	r3,40(r2)
10007230:	e0bff717 	ldw	r2,-36(fp)
10007234:	1880011e 	bne	r3,r2,1000723c <altera_avalon_jtag_uart_read+0x150>
      break;
10007238:	00000206 	br	10007244 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000723c:	e0bffe17 	ldw	r2,-8(fp)
10007240:	00bfb516 	blt	zero,r2,10007118 <__alt_data_end+0xf8007118>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10007244:	e0fff517 	ldw	r3,-44(fp)
10007248:	e0bffd17 	ldw	r2,-12(fp)
1000724c:	18801826 	beq	r3,r2,100072b0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007250:	0005303a 	rdctl	r2,status
10007254:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007258:	e0fffa17 	ldw	r3,-24(fp)
1000725c:	00bfff84 	movi	r2,-2
10007260:	1884703a 	and	r2,r3,r2
10007264:	1001703a 	wrctl	status,r2
  
  return context;
10007268:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000726c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10007270:	e0bffc17 	ldw	r2,-16(fp)
10007274:	10800817 	ldw	r2,32(r2)
10007278:	10c00054 	ori	r3,r2,1
1000727c:	e0bffc17 	ldw	r2,-16(fp)
10007280:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10007284:	e0bffc17 	ldw	r2,-16(fp)
10007288:	10800017 	ldw	r2,0(r2)
1000728c:	10800104 	addi	r2,r2,4
10007290:	1007883a 	mov	r3,r2
10007294:	e0bffc17 	ldw	r2,-16(fp)
10007298:	10800817 	ldw	r2,32(r2)
1000729c:	18800035 	stwio	r2,0(r3)
100072a0:	e0bff917 	ldw	r2,-28(fp)
100072a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100072a8:	e0bffb17 	ldw	r2,-20(fp)
100072ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100072b0:	e0fff517 	ldw	r3,-44(fp)
100072b4:	e0bffd17 	ldw	r2,-12(fp)
100072b8:	18800426 	beq	r3,r2,100072cc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100072bc:	e0fff517 	ldw	r3,-44(fp)
100072c0:	e0bffd17 	ldw	r2,-12(fp)
100072c4:	1885c83a 	sub	r2,r3,r2
100072c8:	00000606 	br	100072e4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
100072cc:	e0bfff17 	ldw	r2,-4(fp)
100072d0:	1090000c 	andi	r2,r2,16384
100072d4:	10000226 	beq	r2,zero,100072e0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
100072d8:	00bffd44 	movi	r2,-11
100072dc:	00000106 	br	100072e4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
100072e0:	00bffec4 	movi	r2,-5
}
100072e4:	e037883a 	mov	sp,fp
100072e8:	dfc00117 	ldw	ra,4(sp)
100072ec:	df000017 	ldw	fp,0(sp)
100072f0:	dec00204 	addi	sp,sp,8
100072f4:	f800283a 	ret

100072f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100072f8:	defff304 	addi	sp,sp,-52
100072fc:	dfc00c15 	stw	ra,48(sp)
10007300:	df000b15 	stw	fp,44(sp)
10007304:	df000b04 	addi	fp,sp,44
10007308:	e13ffc15 	stw	r4,-16(fp)
1000730c:	e17ffd15 	stw	r5,-12(fp)
10007310:	e1bffe15 	stw	r6,-8(fp)
10007314:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10007318:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000731c:	e0bffd17 	ldw	r2,-12(fp)
10007320:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10007324:	00003806 	br	10007408 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10007328:	e0bffc17 	ldw	r2,-16(fp)
1000732c:	10800c17 	ldw	r2,48(r2)
10007330:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10007334:	e0bffc17 	ldw	r2,-16(fp)
10007338:	10800d17 	ldw	r2,52(r2)
1000733c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10007340:	e0fff817 	ldw	r3,-32(fp)
10007344:	e0bff517 	ldw	r2,-44(fp)
10007348:	1880062e 	bgeu	r3,r2,10007364 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000734c:	e0fff517 	ldw	r3,-44(fp)
10007350:	e0bff817 	ldw	r2,-32(fp)
10007354:	1885c83a 	sub	r2,r3,r2
10007358:	10bfffc4 	addi	r2,r2,-1
1000735c:	e0bff615 	stw	r2,-40(fp)
10007360:	00000b06 	br	10007390 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10007364:	e0bff517 	ldw	r2,-44(fp)
10007368:	10000526 	beq	r2,zero,10007380 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000736c:	00c20004 	movi	r3,2048
10007370:	e0bff817 	ldw	r2,-32(fp)
10007374:	1885c83a 	sub	r2,r3,r2
10007378:	e0bff615 	stw	r2,-40(fp)
1000737c:	00000406 	br	10007390 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10007380:	00c1ffc4 	movi	r3,2047
10007384:	e0bff817 	ldw	r2,-32(fp)
10007388:	1885c83a 	sub	r2,r3,r2
1000738c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10007390:	e0bff617 	ldw	r2,-40(fp)
10007394:	1000011e 	bne	r2,zero,1000739c <altera_avalon_jtag_uart_write+0xa4>
        break;
10007398:	00001d06 	br	10007410 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000739c:	e0fffe17 	ldw	r3,-8(fp)
100073a0:	e0bff617 	ldw	r2,-40(fp)
100073a4:	1880022e 	bgeu	r3,r2,100073b0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100073a8:	e0bffe17 	ldw	r2,-8(fp)
100073ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100073b0:	e0bff817 	ldw	r2,-32(fp)
100073b4:	10820e04 	addi	r2,r2,2104
100073b8:	e0fffc17 	ldw	r3,-16(fp)
100073bc:	1885883a 	add	r2,r3,r2
100073c0:	1009883a 	mov	r4,r2
100073c4:	e17ffd17 	ldw	r5,-12(fp)
100073c8:	e1bff617 	ldw	r6,-40(fp)
100073cc:	000866c0 	call	1000866c <memcpy>
      ptr   += n;
100073d0:	e0fffd17 	ldw	r3,-12(fp)
100073d4:	e0bff617 	ldw	r2,-40(fp)
100073d8:	1885883a 	add	r2,r3,r2
100073dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100073e0:	e0fffe17 	ldw	r3,-8(fp)
100073e4:	e0bff617 	ldw	r2,-40(fp)
100073e8:	1885c83a 	sub	r2,r3,r2
100073ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100073f0:	e0fff817 	ldw	r3,-32(fp)
100073f4:	e0bff617 	ldw	r2,-40(fp)
100073f8:	1885883a 	add	r2,r3,r2
100073fc:	10c1ffcc 	andi	r3,r2,2047
10007400:	e0bffc17 	ldw	r2,-16(fp)
10007404:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10007408:	e0bffe17 	ldw	r2,-8(fp)
1000740c:	00bfc616 	blt	zero,r2,10007328 <__alt_data_end+0xf8007328>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007410:	0005303a 	rdctl	r2,status
10007414:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007418:	e0fffa17 	ldw	r3,-24(fp)
1000741c:	00bfff84 	movi	r2,-2
10007420:	1884703a 	and	r2,r3,r2
10007424:	1001703a 	wrctl	status,r2
  
  return context;
10007428:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000742c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10007430:	e0bffc17 	ldw	r2,-16(fp)
10007434:	10800817 	ldw	r2,32(r2)
10007438:	10c00094 	ori	r3,r2,2
1000743c:	e0bffc17 	ldw	r2,-16(fp)
10007440:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10007444:	e0bffc17 	ldw	r2,-16(fp)
10007448:	10800017 	ldw	r2,0(r2)
1000744c:	10800104 	addi	r2,r2,4
10007450:	1007883a 	mov	r3,r2
10007454:	e0bffc17 	ldw	r2,-16(fp)
10007458:	10800817 	ldw	r2,32(r2)
1000745c:	18800035 	stwio	r2,0(r3)
10007460:	e0bff917 	ldw	r2,-28(fp)
10007464:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007468:	e0bffb17 	ldw	r2,-20(fp)
1000746c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10007470:	e0bffe17 	ldw	r2,-8(fp)
10007474:	0080120e 	bge	zero,r2,100074c0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10007478:	e0bfff17 	ldw	r2,-4(fp)
1000747c:	1090000c 	andi	r2,r2,16384
10007480:	10000126 	beq	r2,zero,10007488 <altera_avalon_jtag_uart_write+0x190>
        break;
10007484:	00001006 	br	100074c8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10007488:	0001883a 	nop
1000748c:	e0bffc17 	ldw	r2,-16(fp)
10007490:	10c00d17 	ldw	r3,52(r2)
10007494:	e0bff517 	ldw	r2,-44(fp)
10007498:	1880051e 	bne	r3,r2,100074b0 <altera_avalon_jtag_uart_write+0x1b8>
1000749c:	e0bffc17 	ldw	r2,-16(fp)
100074a0:	10c00917 	ldw	r3,36(r2)
100074a4:	e0bffc17 	ldw	r2,-16(fp)
100074a8:	10800117 	ldw	r2,4(r2)
100074ac:	18bff736 	bltu	r3,r2,1000748c <__alt_data_end+0xf800748c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100074b0:	e0bffc17 	ldw	r2,-16(fp)
100074b4:	10800917 	ldw	r2,36(r2)
100074b8:	10000126 	beq	r2,zero,100074c0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100074bc:	00000206 	br	100074c8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100074c0:	e0bffe17 	ldw	r2,-8(fp)
100074c4:	00bf9716 	blt	zero,r2,10007324 <__alt_data_end+0xf8007324>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100074c8:	e0fffd17 	ldw	r3,-12(fp)
100074cc:	e0bff717 	ldw	r2,-36(fp)
100074d0:	18800426 	beq	r3,r2,100074e4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
100074d4:	e0fffd17 	ldw	r3,-12(fp)
100074d8:	e0bff717 	ldw	r2,-36(fp)
100074dc:	1885c83a 	sub	r2,r3,r2
100074e0:	00000606 	br	100074fc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100074e4:	e0bfff17 	ldw	r2,-4(fp)
100074e8:	1090000c 	andi	r2,r2,16384
100074ec:	10000226 	beq	r2,zero,100074f8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100074f0:	00bffd44 	movi	r2,-11
100074f4:	00000106 	br	100074fc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100074f8:	00bffec4 	movi	r2,-5
}
100074fc:	e037883a 	mov	sp,fp
10007500:	dfc00117 	ldw	ra,4(sp)
10007504:	df000017 	ldw	fp,0(sp)
10007508:	dec00204 	addi	sp,sp,8
1000750c:	f800283a 	ret

10007510 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10007510:	defff504 	addi	sp,sp,-44
10007514:	df000a15 	stw	fp,40(sp)
10007518:	df000a04 	addi	fp,sp,40
1000751c:	e13ffc15 	stw	r4,-16(fp)
10007520:	e17ffd15 	stw	r5,-12(fp)
10007524:	e1bffe15 	stw	r6,-8(fp)
10007528:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000752c:	e03ff615 	stw	zero,-40(fp)
10007530:	00840074 	movhi	r2,4097
10007534:	10ae5f04 	addi	r2,r2,-18052
10007538:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000753c:	10003f26 	beq	r2,zero,1000763c <alt_alarm_start+0x12c>
  {
    if (alarm)
10007540:	e0bffc17 	ldw	r2,-16(fp)
10007544:	10003b26 	beq	r2,zero,10007634 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10007548:	e0bffc17 	ldw	r2,-16(fp)
1000754c:	e0fffe17 	ldw	r3,-8(fp)
10007550:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10007554:	e0bffc17 	ldw	r2,-16(fp)
10007558:	e0ffff17 	ldw	r3,-4(fp)
1000755c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007560:	0005303a 	rdctl	r2,status
10007564:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007568:	e0fff817 	ldw	r3,-32(fp)
1000756c:	00bfff84 	movi	r2,-2
10007570:	1884703a 	and	r2,r3,r2
10007574:	1001703a 	wrctl	status,r2
  
  return context;
10007578:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000757c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10007580:	00840074 	movhi	r2,4097
10007584:	10ae6004 	addi	r2,r2,-18048
10007588:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000758c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10007590:	e0fffd17 	ldw	r3,-12(fp)
10007594:	e0bff617 	ldw	r2,-40(fp)
10007598:	1885883a 	add	r2,r3,r2
1000759c:	10c00044 	addi	r3,r2,1
100075a0:	e0bffc17 	ldw	r2,-16(fp)
100075a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100075a8:	e0bffc17 	ldw	r2,-16(fp)
100075ac:	10c00217 	ldw	r3,8(r2)
100075b0:	e0bff617 	ldw	r2,-40(fp)
100075b4:	1880042e 	bgeu	r3,r2,100075c8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100075b8:	e0bffc17 	ldw	r2,-16(fp)
100075bc:	00c00044 	movi	r3,1
100075c0:	10c00405 	stb	r3,16(r2)
100075c4:	00000206 	br	100075d0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100075c8:	e0bffc17 	ldw	r2,-16(fp)
100075cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100075d0:	e0fffc17 	ldw	r3,-16(fp)
100075d4:	00840074 	movhi	r2,4097
100075d8:	10a8bb04 	addi	r2,r2,-23828
100075dc:	e0bff915 	stw	r2,-28(fp)
100075e0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100075e4:	e0bffa17 	ldw	r2,-24(fp)
100075e8:	e0fff917 	ldw	r3,-28(fp)
100075ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100075f0:	e0bff917 	ldw	r2,-28(fp)
100075f4:	10c00017 	ldw	r3,0(r2)
100075f8:	e0bffa17 	ldw	r2,-24(fp)
100075fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10007600:	e0bff917 	ldw	r2,-28(fp)
10007604:	10800017 	ldw	r2,0(r2)
10007608:	e0fffa17 	ldw	r3,-24(fp)
1000760c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10007610:	e0bff917 	ldw	r2,-28(fp)
10007614:	e0fffa17 	ldw	r3,-24(fp)
10007618:	10c00015 	stw	r3,0(r2)
1000761c:	e0bff717 	ldw	r2,-36(fp)
10007620:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007624:	e0bffb17 	ldw	r2,-20(fp)
10007628:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000762c:	0005883a 	mov	r2,zero
10007630:	00000306 	br	10007640 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10007634:	00bffa84 	movi	r2,-22
10007638:	00000106 	br	10007640 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000763c:	00bfde84 	movi	r2,-134
  }
}
10007640:	e037883a 	mov	sp,fp
10007644:	df000017 	ldw	fp,0(sp)
10007648:	dec00104 	addi	sp,sp,4
1000764c:	f800283a 	ret

10007650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007650:	defffe04 	addi	sp,sp,-8
10007654:	dfc00115 	stw	ra,4(sp)
10007658:	df000015 	stw	fp,0(sp)
1000765c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007660:	00840074 	movhi	r2,4097
10007664:	10a8b904 	addi	r2,r2,-23836
10007668:	10800017 	ldw	r2,0(r2)
1000766c:	10000526 	beq	r2,zero,10007684 <alt_get_errno+0x34>
10007670:	00840074 	movhi	r2,4097
10007674:	10a8b904 	addi	r2,r2,-23836
10007678:	10800017 	ldw	r2,0(r2)
1000767c:	103ee83a 	callr	r2
10007680:	00000206 	br	1000768c <alt_get_errno+0x3c>
10007684:	00840074 	movhi	r2,4097
10007688:	10ae6204 	addi	r2,r2,-18040
}
1000768c:	e037883a 	mov	sp,fp
10007690:	dfc00117 	ldw	ra,4(sp)
10007694:	df000017 	ldw	fp,0(sp)
10007698:	dec00204 	addi	sp,sp,8
1000769c:	f800283a 	ret

100076a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100076a0:	defffb04 	addi	sp,sp,-20
100076a4:	dfc00415 	stw	ra,16(sp)
100076a8:	df000315 	stw	fp,12(sp)
100076ac:	df000304 	addi	fp,sp,12
100076b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100076b4:	e0bfff17 	ldw	r2,-4(fp)
100076b8:	10000816 	blt	r2,zero,100076dc <close+0x3c>
100076bc:	e13fff17 	ldw	r4,-4(fp)
100076c0:	01400304 	movi	r5,12
100076c4:	00040040 	call	10004004 <__mulsi3>
100076c8:	1007883a 	mov	r3,r2
100076cc:	00840074 	movhi	r2,4097
100076d0:	10a85104 	addi	r2,r2,-24252
100076d4:	1885883a 	add	r2,r3,r2
100076d8:	00000106 	br	100076e0 <close+0x40>
100076dc:	0005883a 	mov	r2,zero
100076e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100076e4:	e0bffd17 	ldw	r2,-12(fp)
100076e8:	10001926 	beq	r2,zero,10007750 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100076ec:	e0bffd17 	ldw	r2,-12(fp)
100076f0:	10800017 	ldw	r2,0(r2)
100076f4:	10800417 	ldw	r2,16(r2)
100076f8:	10000626 	beq	r2,zero,10007714 <close+0x74>
100076fc:	e0bffd17 	ldw	r2,-12(fp)
10007700:	10800017 	ldw	r2,0(r2)
10007704:	10800417 	ldw	r2,16(r2)
10007708:	e13ffd17 	ldw	r4,-12(fp)
1000770c:	103ee83a 	callr	r2
10007710:	00000106 	br	10007718 <close+0x78>
10007714:	0005883a 	mov	r2,zero
10007718:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000771c:	e13fff17 	ldw	r4,-4(fp)
10007720:	00080540 	call	10008054 <alt_release_fd>
    if (rval < 0)
10007724:	e0bffe17 	ldw	r2,-8(fp)
10007728:	1000070e 	bge	r2,zero,10007748 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000772c:	00076500 	call	10007650 <alt_get_errno>
10007730:	1007883a 	mov	r3,r2
10007734:	e0bffe17 	ldw	r2,-8(fp)
10007738:	0085c83a 	sub	r2,zero,r2
1000773c:	18800015 	stw	r2,0(r3)
      return -1;
10007740:	00bfffc4 	movi	r2,-1
10007744:	00000706 	br	10007764 <close+0xc4>
    }
    return 0;
10007748:	0005883a 	mov	r2,zero
1000774c:	00000506 	br	10007764 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10007750:	00076500 	call	10007650 <alt_get_errno>
10007754:	1007883a 	mov	r3,r2
10007758:	00801444 	movi	r2,81
1000775c:	18800015 	stw	r2,0(r3)
    return -1;
10007760:	00bfffc4 	movi	r2,-1
  }
}
10007764:	e037883a 	mov	sp,fp
10007768:	dfc00117 	ldw	ra,4(sp)
1000776c:	df000017 	ldw	fp,0(sp)
10007770:	dec00204 	addi	sp,sp,8
10007774:	f800283a 	ret

10007778 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10007778:	deffff04 	addi	sp,sp,-4
1000777c:	df000015 	stw	fp,0(sp)
10007780:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10007784:	e037883a 	mov	sp,fp
10007788:	df000017 	ldw	fp,0(sp)
1000778c:	dec00104 	addi	sp,sp,4
10007790:	f800283a 	ret

10007794 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10007794:	defffc04 	addi	sp,sp,-16
10007798:	df000315 	stw	fp,12(sp)
1000779c:	df000304 	addi	fp,sp,12
100077a0:	e13ffd15 	stw	r4,-12(fp)
100077a4:	e17ffe15 	stw	r5,-8(fp)
100077a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
100077ac:	e0bfff17 	ldw	r2,-4(fp)
}
100077b0:	e037883a 	mov	sp,fp
100077b4:	df000017 	ldw	fp,0(sp)
100077b8:	dec00104 	addi	sp,sp,4
100077bc:	f800283a 	ret

100077c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100077c0:	defffe04 	addi	sp,sp,-8
100077c4:	dfc00115 	stw	ra,4(sp)
100077c8:	df000015 	stw	fp,0(sp)
100077cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100077d0:	00840074 	movhi	r2,4097
100077d4:	10a8b904 	addi	r2,r2,-23836
100077d8:	10800017 	ldw	r2,0(r2)
100077dc:	10000526 	beq	r2,zero,100077f4 <alt_get_errno+0x34>
100077e0:	00840074 	movhi	r2,4097
100077e4:	10a8b904 	addi	r2,r2,-23836
100077e8:	10800017 	ldw	r2,0(r2)
100077ec:	103ee83a 	callr	r2
100077f0:	00000206 	br	100077fc <alt_get_errno+0x3c>
100077f4:	00840074 	movhi	r2,4097
100077f8:	10ae6204 	addi	r2,r2,-18040
}
100077fc:	e037883a 	mov	sp,fp
10007800:	dfc00117 	ldw	ra,4(sp)
10007804:	df000017 	ldw	fp,0(sp)
10007808:	dec00204 	addi	sp,sp,8
1000780c:	f800283a 	ret

10007810 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10007810:	defffa04 	addi	sp,sp,-24
10007814:	dfc00515 	stw	ra,20(sp)
10007818:	df000415 	stw	fp,16(sp)
1000781c:	df000404 	addi	fp,sp,16
10007820:	e13ffe15 	stw	r4,-8(fp)
10007824:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10007828:	e0bffe17 	ldw	r2,-8(fp)
1000782c:	10000326 	beq	r2,zero,1000783c <alt_dev_llist_insert+0x2c>
10007830:	e0bffe17 	ldw	r2,-8(fp)
10007834:	10800217 	ldw	r2,8(r2)
10007838:	1000061e 	bne	r2,zero,10007854 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000783c:	00077c00 	call	100077c0 <alt_get_errno>
10007840:	1007883a 	mov	r3,r2
10007844:	00800584 	movi	r2,22
10007848:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000784c:	00bffa84 	movi	r2,-22
10007850:	00001306 	br	100078a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10007854:	e0bffe17 	ldw	r2,-8(fp)
10007858:	e0ffff17 	ldw	r3,-4(fp)
1000785c:	e0fffc15 	stw	r3,-16(fp)
10007860:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10007864:	e0bffd17 	ldw	r2,-12(fp)
10007868:	e0fffc17 	ldw	r3,-16(fp)
1000786c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10007870:	e0bffc17 	ldw	r2,-16(fp)
10007874:	10c00017 	ldw	r3,0(r2)
10007878:	e0bffd17 	ldw	r2,-12(fp)
1000787c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10007880:	e0bffc17 	ldw	r2,-16(fp)
10007884:	10800017 	ldw	r2,0(r2)
10007888:	e0fffd17 	ldw	r3,-12(fp)
1000788c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10007890:	e0bffc17 	ldw	r2,-16(fp)
10007894:	e0fffd17 	ldw	r3,-12(fp)
10007898:	10c00015 	stw	r3,0(r2)

  return 0;  
1000789c:	0005883a 	mov	r2,zero
}
100078a0:	e037883a 	mov	sp,fp
100078a4:	dfc00117 	ldw	ra,4(sp)
100078a8:	df000017 	ldw	fp,0(sp)
100078ac:	dec00204 	addi	sp,sp,8
100078b0:	f800283a 	ret

100078b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100078b4:	defffd04 	addi	sp,sp,-12
100078b8:	dfc00215 	stw	ra,8(sp)
100078bc:	df000115 	stw	fp,4(sp)
100078c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100078c4:	00840074 	movhi	r2,4097
100078c8:	10a2c504 	addi	r2,r2,-29932
100078cc:	e0bfff15 	stw	r2,-4(fp)
100078d0:	00000606 	br	100078ec <_do_ctors+0x38>
        (*ctor) (); 
100078d4:	e0bfff17 	ldw	r2,-4(fp)
100078d8:	10800017 	ldw	r2,0(r2)
100078dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100078e0:	e0bfff17 	ldw	r2,-4(fp)
100078e4:	10bfff04 	addi	r2,r2,-4
100078e8:	e0bfff15 	stw	r2,-4(fp)
100078ec:	e0ffff17 	ldw	r3,-4(fp)
100078f0:	00840074 	movhi	r2,4097
100078f4:	10a2c604 	addi	r2,r2,-29928
100078f8:	18bff62e 	bgeu	r3,r2,100078d4 <__alt_data_end+0xf80078d4>
        (*ctor) (); 
}
100078fc:	e037883a 	mov	sp,fp
10007900:	dfc00117 	ldw	ra,4(sp)
10007904:	df000017 	ldw	fp,0(sp)
10007908:	dec00204 	addi	sp,sp,8
1000790c:	f800283a 	ret

10007910 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10007910:	defffd04 	addi	sp,sp,-12
10007914:	dfc00215 	stw	ra,8(sp)
10007918:	df000115 	stw	fp,4(sp)
1000791c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10007920:	00840074 	movhi	r2,4097
10007924:	10a2c504 	addi	r2,r2,-29932
10007928:	e0bfff15 	stw	r2,-4(fp)
1000792c:	00000606 	br	10007948 <_do_dtors+0x38>
        (*dtor) (); 
10007930:	e0bfff17 	ldw	r2,-4(fp)
10007934:	10800017 	ldw	r2,0(r2)
10007938:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000793c:	e0bfff17 	ldw	r2,-4(fp)
10007940:	10bfff04 	addi	r2,r2,-4
10007944:	e0bfff15 	stw	r2,-4(fp)
10007948:	e0ffff17 	ldw	r3,-4(fp)
1000794c:	00840074 	movhi	r2,4097
10007950:	10a2c604 	addi	r2,r2,-29928
10007954:	18bff62e 	bgeu	r3,r2,10007930 <__alt_data_end+0xf8007930>
        (*dtor) (); 
}
10007958:	e037883a 	mov	sp,fp
1000795c:	dfc00117 	ldw	ra,4(sp)
10007960:	df000017 	ldw	fp,0(sp)
10007964:	dec00204 	addi	sp,sp,8
10007968:	f800283a 	ret

1000796c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000796c:	deffff04 	addi	sp,sp,-4
10007970:	df000015 	stw	fp,0(sp)
10007974:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10007978:	e037883a 	mov	sp,fp
1000797c:	df000017 	ldw	fp,0(sp)
10007980:	dec00104 	addi	sp,sp,4
10007984:	f800283a 	ret

10007988 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10007988:	defff904 	addi	sp,sp,-28
1000798c:	dfc00615 	stw	ra,24(sp)
10007990:	df000515 	stw	fp,20(sp)
10007994:	df000504 	addi	fp,sp,20
10007998:	e13ffc15 	stw	r4,-16(fp)
1000799c:	e17ffd15 	stw	r5,-12(fp)
100079a0:	e1bffe15 	stw	r6,-8(fp)
100079a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100079a8:	e0800217 	ldw	r2,8(fp)
100079ac:	d8800015 	stw	r2,0(sp)
100079b0:	e13ffc17 	ldw	r4,-16(fp)
100079b4:	e17ffd17 	ldw	r5,-12(fp)
100079b8:	e1bffe17 	ldw	r6,-8(fp)
100079bc:	e1ffff17 	ldw	r7,-4(fp)
100079c0:	0007b680 	call	10007b68 <alt_iic_isr_register>
}  
100079c4:	e037883a 	mov	sp,fp
100079c8:	dfc00117 	ldw	ra,4(sp)
100079cc:	df000017 	ldw	fp,0(sp)
100079d0:	dec00204 	addi	sp,sp,8
100079d4:	f800283a 	ret

100079d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100079d8:	defff904 	addi	sp,sp,-28
100079dc:	df000615 	stw	fp,24(sp)
100079e0:	df000604 	addi	fp,sp,24
100079e4:	e13ffe15 	stw	r4,-8(fp)
100079e8:	e17fff15 	stw	r5,-4(fp)
100079ec:	e0bfff17 	ldw	r2,-4(fp)
100079f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100079f4:	0005303a 	rdctl	r2,status
100079f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100079fc:	e0fffb17 	ldw	r3,-20(fp)
10007a00:	00bfff84 	movi	r2,-2
10007a04:	1884703a 	and	r2,r3,r2
10007a08:	1001703a 	wrctl	status,r2
  
  return context;
10007a0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10007a10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10007a14:	e0bffa17 	ldw	r2,-24(fp)
10007a18:	00c00044 	movi	r3,1
10007a1c:	1884983a 	sll	r2,r3,r2
10007a20:	1007883a 	mov	r3,r2
10007a24:	00840074 	movhi	r2,4097
10007a28:	10ae5e04 	addi	r2,r2,-18056
10007a2c:	10800017 	ldw	r2,0(r2)
10007a30:	1886b03a 	or	r3,r3,r2
10007a34:	00840074 	movhi	r2,4097
10007a38:	10ae5e04 	addi	r2,r2,-18056
10007a3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10007a40:	00840074 	movhi	r2,4097
10007a44:	10ae5e04 	addi	r2,r2,-18056
10007a48:	10800017 	ldw	r2,0(r2)
10007a4c:	100170fa 	wrctl	ienable,r2
10007a50:	e0bffc17 	ldw	r2,-16(fp)
10007a54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007a58:	e0bffd17 	ldw	r2,-12(fp)
10007a5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10007a60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10007a64:	0001883a 	nop
}
10007a68:	e037883a 	mov	sp,fp
10007a6c:	df000017 	ldw	fp,0(sp)
10007a70:	dec00104 	addi	sp,sp,4
10007a74:	f800283a 	ret

10007a78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10007a78:	defff904 	addi	sp,sp,-28
10007a7c:	df000615 	stw	fp,24(sp)
10007a80:	df000604 	addi	fp,sp,24
10007a84:	e13ffe15 	stw	r4,-8(fp)
10007a88:	e17fff15 	stw	r5,-4(fp)
10007a8c:	e0bfff17 	ldw	r2,-4(fp)
10007a90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007a94:	0005303a 	rdctl	r2,status
10007a98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007a9c:	e0fffb17 	ldw	r3,-20(fp)
10007aa0:	00bfff84 	movi	r2,-2
10007aa4:	1884703a 	and	r2,r3,r2
10007aa8:	1001703a 	wrctl	status,r2
  
  return context;
10007aac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10007ab0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10007ab4:	e0bffa17 	ldw	r2,-24(fp)
10007ab8:	00c00044 	movi	r3,1
10007abc:	1884983a 	sll	r2,r3,r2
10007ac0:	0084303a 	nor	r2,zero,r2
10007ac4:	1007883a 	mov	r3,r2
10007ac8:	00840074 	movhi	r2,4097
10007acc:	10ae5e04 	addi	r2,r2,-18056
10007ad0:	10800017 	ldw	r2,0(r2)
10007ad4:	1886703a 	and	r3,r3,r2
10007ad8:	00840074 	movhi	r2,4097
10007adc:	10ae5e04 	addi	r2,r2,-18056
10007ae0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10007ae4:	00840074 	movhi	r2,4097
10007ae8:	10ae5e04 	addi	r2,r2,-18056
10007aec:	10800017 	ldw	r2,0(r2)
10007af0:	100170fa 	wrctl	ienable,r2
10007af4:	e0bffc17 	ldw	r2,-16(fp)
10007af8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007afc:	e0bffd17 	ldw	r2,-12(fp)
10007b00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10007b04:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10007b08:	0001883a 	nop
}
10007b0c:	e037883a 	mov	sp,fp
10007b10:	df000017 	ldw	fp,0(sp)
10007b14:	dec00104 	addi	sp,sp,4
10007b18:	f800283a 	ret

10007b1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10007b1c:	defffc04 	addi	sp,sp,-16
10007b20:	df000315 	stw	fp,12(sp)
10007b24:	df000304 	addi	fp,sp,12
10007b28:	e13ffe15 	stw	r4,-8(fp)
10007b2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10007b30:	000530fa 	rdctl	r2,ienable
10007b34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10007b38:	e0bfff17 	ldw	r2,-4(fp)
10007b3c:	00c00044 	movi	r3,1
10007b40:	1884983a 	sll	r2,r3,r2
10007b44:	1007883a 	mov	r3,r2
10007b48:	e0bffd17 	ldw	r2,-12(fp)
10007b4c:	1884703a 	and	r2,r3,r2
10007b50:	1004c03a 	cmpne	r2,r2,zero
10007b54:	10803fcc 	andi	r2,r2,255
}
10007b58:	e037883a 	mov	sp,fp
10007b5c:	df000017 	ldw	fp,0(sp)
10007b60:	dec00104 	addi	sp,sp,4
10007b64:	f800283a 	ret

10007b68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10007b68:	defff504 	addi	sp,sp,-44
10007b6c:	dfc00a15 	stw	ra,40(sp)
10007b70:	df000915 	stw	fp,36(sp)
10007b74:	df000904 	addi	fp,sp,36
10007b78:	e13ffc15 	stw	r4,-16(fp)
10007b7c:	e17ffd15 	stw	r5,-12(fp)
10007b80:	e1bffe15 	stw	r6,-8(fp)
10007b84:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10007b88:	00bffa84 	movi	r2,-22
10007b8c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10007b90:	e0bffd17 	ldw	r2,-12(fp)
10007b94:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10007b98:	e0bff817 	ldw	r2,-32(fp)
10007b9c:	10800808 	cmpgei	r2,r2,32
10007ba0:	1000271e 	bne	r2,zero,10007c40 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007ba4:	0005303a 	rdctl	r2,status
10007ba8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007bac:	e0fffa17 	ldw	r3,-24(fp)
10007bb0:	00bfff84 	movi	r2,-2
10007bb4:	1884703a 	and	r2,r3,r2
10007bb8:	1001703a 	wrctl	status,r2
  
  return context;
10007bbc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10007bc0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10007bc4:	00840074 	movhi	r2,4097
10007bc8:	10aef304 	addi	r2,r2,-17460
10007bcc:	e0fff817 	ldw	r3,-32(fp)
10007bd0:	180690fa 	slli	r3,r3,3
10007bd4:	10c5883a 	add	r2,r2,r3
10007bd8:	e0fffe17 	ldw	r3,-8(fp)
10007bdc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10007be0:	00840074 	movhi	r2,4097
10007be4:	10aef304 	addi	r2,r2,-17460
10007be8:	e0fff817 	ldw	r3,-32(fp)
10007bec:	180690fa 	slli	r3,r3,3
10007bf0:	10c5883a 	add	r2,r2,r3
10007bf4:	10800104 	addi	r2,r2,4
10007bf8:	e0ffff17 	ldw	r3,-4(fp)
10007bfc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10007c00:	e0bffe17 	ldw	r2,-8(fp)
10007c04:	10000526 	beq	r2,zero,10007c1c <alt_iic_isr_register+0xb4>
10007c08:	e0bff817 	ldw	r2,-32(fp)
10007c0c:	e13ffc17 	ldw	r4,-16(fp)
10007c10:	100b883a 	mov	r5,r2
10007c14:	00079d80 	call	100079d8 <alt_ic_irq_enable>
10007c18:	00000406 	br	10007c2c <alt_iic_isr_register+0xc4>
10007c1c:	e0bff817 	ldw	r2,-32(fp)
10007c20:	e13ffc17 	ldw	r4,-16(fp)
10007c24:	100b883a 	mov	r5,r2
10007c28:	0007a780 	call	10007a78 <alt_ic_irq_disable>
10007c2c:	e0bff715 	stw	r2,-36(fp)
10007c30:	e0bff917 	ldw	r2,-28(fp)
10007c34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007c38:	e0bffb17 	ldw	r2,-20(fp)
10007c3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10007c40:	e0bff717 	ldw	r2,-36(fp)
}
10007c44:	e037883a 	mov	sp,fp
10007c48:	dfc00117 	ldw	ra,4(sp)
10007c4c:	df000017 	ldw	fp,0(sp)
10007c50:	dec00204 	addi	sp,sp,8
10007c54:	f800283a 	ret

10007c58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10007c58:	defff804 	addi	sp,sp,-32
10007c5c:	dfc00715 	stw	ra,28(sp)
10007c60:	df000615 	stw	fp,24(sp)
10007c64:	dc000515 	stw	r16,20(sp)
10007c68:	df000604 	addi	fp,sp,24
10007c6c:	e13ffb15 	stw	r4,-20(fp)
10007c70:	e17ffc15 	stw	r5,-16(fp)
10007c74:	e1bffd15 	stw	r6,-12(fp)
10007c78:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10007c7c:	e13ffc17 	ldw	r4,-16(fp)
10007c80:	e17ffd17 	ldw	r5,-12(fp)
10007c84:	e1bffe17 	ldw	r6,-8(fp)
10007c88:	0007ef40 	call	10007ef4 <open>
10007c8c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10007c90:	e0bffa17 	ldw	r2,-24(fp)
10007c94:	10002216 	blt	r2,zero,10007d20 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10007c98:	04040074 	movhi	r16,4097
10007c9c:	84285104 	addi	r16,r16,-24252
10007ca0:	e0bffa17 	ldw	r2,-24(fp)
10007ca4:	1009883a 	mov	r4,r2
10007ca8:	01400304 	movi	r5,12
10007cac:	00040040 	call	10004004 <__mulsi3>
10007cb0:	8085883a 	add	r2,r16,r2
10007cb4:	10c00017 	ldw	r3,0(r2)
10007cb8:	e0bffb17 	ldw	r2,-20(fp)
10007cbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10007cc0:	04040074 	movhi	r16,4097
10007cc4:	84285104 	addi	r16,r16,-24252
10007cc8:	e0bffa17 	ldw	r2,-24(fp)
10007ccc:	1009883a 	mov	r4,r2
10007cd0:	01400304 	movi	r5,12
10007cd4:	00040040 	call	10004004 <__mulsi3>
10007cd8:	8085883a 	add	r2,r16,r2
10007cdc:	10800104 	addi	r2,r2,4
10007ce0:	10c00017 	ldw	r3,0(r2)
10007ce4:	e0bffb17 	ldw	r2,-20(fp)
10007ce8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10007cec:	04040074 	movhi	r16,4097
10007cf0:	84285104 	addi	r16,r16,-24252
10007cf4:	e0bffa17 	ldw	r2,-24(fp)
10007cf8:	1009883a 	mov	r4,r2
10007cfc:	01400304 	movi	r5,12
10007d00:	00040040 	call	10004004 <__mulsi3>
10007d04:	8085883a 	add	r2,r16,r2
10007d08:	10800204 	addi	r2,r2,8
10007d0c:	10c00017 	ldw	r3,0(r2)
10007d10:	e0bffb17 	ldw	r2,-20(fp)
10007d14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10007d18:	e13ffa17 	ldw	r4,-24(fp)
10007d1c:	00080540 	call	10008054 <alt_release_fd>
  }
} 
10007d20:	e6ffff04 	addi	sp,fp,-4
10007d24:	dfc00217 	ldw	ra,8(sp)
10007d28:	df000117 	ldw	fp,4(sp)
10007d2c:	dc000017 	ldw	r16,0(sp)
10007d30:	dec00304 	addi	sp,sp,12
10007d34:	f800283a 	ret

10007d38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10007d38:	defffb04 	addi	sp,sp,-20
10007d3c:	dfc00415 	stw	ra,16(sp)
10007d40:	df000315 	stw	fp,12(sp)
10007d44:	df000304 	addi	fp,sp,12
10007d48:	e13ffd15 	stw	r4,-12(fp)
10007d4c:	e17ffe15 	stw	r5,-8(fp)
10007d50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10007d54:	01040074 	movhi	r4,4097
10007d58:	21285404 	addi	r4,r4,-24240
10007d5c:	e17ffd17 	ldw	r5,-12(fp)
10007d60:	01800044 	movi	r6,1
10007d64:	01c07fc4 	movi	r7,511
10007d68:	0007c580 	call	10007c58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10007d6c:	01040074 	movhi	r4,4097
10007d70:	21285104 	addi	r4,r4,-24252
10007d74:	e17ffe17 	ldw	r5,-8(fp)
10007d78:	000d883a 	mov	r6,zero
10007d7c:	01c07fc4 	movi	r7,511
10007d80:	0007c580 	call	10007c58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10007d84:	01040074 	movhi	r4,4097
10007d88:	21285704 	addi	r4,r4,-24228
10007d8c:	e17fff17 	ldw	r5,-4(fp)
10007d90:	01800044 	movi	r6,1
10007d94:	01c07fc4 	movi	r7,511
10007d98:	0007c580 	call	10007c58 <alt_open_fd>
}  
10007d9c:	e037883a 	mov	sp,fp
10007da0:	dfc00117 	ldw	ra,4(sp)
10007da4:	df000017 	ldw	fp,0(sp)
10007da8:	dec00204 	addi	sp,sp,8
10007dac:	f800283a 	ret

10007db0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007db0:	defffe04 	addi	sp,sp,-8
10007db4:	dfc00115 	stw	ra,4(sp)
10007db8:	df000015 	stw	fp,0(sp)
10007dbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007dc0:	00840074 	movhi	r2,4097
10007dc4:	10a8b904 	addi	r2,r2,-23836
10007dc8:	10800017 	ldw	r2,0(r2)
10007dcc:	10000526 	beq	r2,zero,10007de4 <alt_get_errno+0x34>
10007dd0:	00840074 	movhi	r2,4097
10007dd4:	10a8b904 	addi	r2,r2,-23836
10007dd8:	10800017 	ldw	r2,0(r2)
10007ddc:	103ee83a 	callr	r2
10007de0:	00000206 	br	10007dec <alt_get_errno+0x3c>
10007de4:	00840074 	movhi	r2,4097
10007de8:	10ae6204 	addi	r2,r2,-18040
}
10007dec:	e037883a 	mov	sp,fp
10007df0:	dfc00117 	ldw	ra,4(sp)
10007df4:	df000017 	ldw	fp,0(sp)
10007df8:	dec00204 	addi	sp,sp,8
10007dfc:	f800283a 	ret

10007e00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10007e00:	defffb04 	addi	sp,sp,-20
10007e04:	dfc00415 	stw	ra,16(sp)
10007e08:	df000315 	stw	fp,12(sp)
10007e0c:	dc000215 	stw	r16,8(sp)
10007e10:	df000304 	addi	fp,sp,12
10007e14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10007e18:	e0bffe17 	ldw	r2,-8(fp)
10007e1c:	10800217 	ldw	r2,8(r2)
10007e20:	10d00034 	orhi	r3,r2,16384
10007e24:	e0bffe17 	ldw	r2,-8(fp)
10007e28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10007e2c:	e03ffd15 	stw	zero,-12(fp)
10007e30:	00002306 	br	10007ec0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10007e34:	04040074 	movhi	r16,4097
10007e38:	84285104 	addi	r16,r16,-24252
10007e3c:	e0bffd17 	ldw	r2,-12(fp)
10007e40:	1009883a 	mov	r4,r2
10007e44:	01400304 	movi	r5,12
10007e48:	00040040 	call	10004004 <__mulsi3>
10007e4c:	8085883a 	add	r2,r16,r2
10007e50:	10c00017 	ldw	r3,0(r2)
10007e54:	e0bffe17 	ldw	r2,-8(fp)
10007e58:	10800017 	ldw	r2,0(r2)
10007e5c:	1880151e 	bne	r3,r2,10007eb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10007e60:	04040074 	movhi	r16,4097
10007e64:	84285104 	addi	r16,r16,-24252
10007e68:	e0bffd17 	ldw	r2,-12(fp)
10007e6c:	1009883a 	mov	r4,r2
10007e70:	01400304 	movi	r5,12
10007e74:	00040040 	call	10004004 <__mulsi3>
10007e78:	8085883a 	add	r2,r16,r2
10007e7c:	10800204 	addi	r2,r2,8
10007e80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10007e84:	10000b0e 	bge	r2,zero,10007eb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10007e88:	e13ffd17 	ldw	r4,-12(fp)
10007e8c:	01400304 	movi	r5,12
10007e90:	00040040 	call	10004004 <__mulsi3>
10007e94:	1007883a 	mov	r3,r2
10007e98:	00840074 	movhi	r2,4097
10007e9c:	10a85104 	addi	r2,r2,-24252
10007ea0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10007ea4:	e0bffe17 	ldw	r2,-8(fp)
10007ea8:	18800226 	beq	r3,r2,10007eb4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10007eac:	00bffcc4 	movi	r2,-13
10007eb0:	00000a06 	br	10007edc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10007eb4:	e0bffd17 	ldw	r2,-12(fp)
10007eb8:	10800044 	addi	r2,r2,1
10007ebc:	e0bffd15 	stw	r2,-12(fp)
10007ec0:	00840074 	movhi	r2,4097
10007ec4:	10a8b804 	addi	r2,r2,-23840
10007ec8:	10800017 	ldw	r2,0(r2)
10007ecc:	1007883a 	mov	r3,r2
10007ed0:	e0bffd17 	ldw	r2,-12(fp)
10007ed4:	18bfd72e 	bgeu	r3,r2,10007e34 <__alt_data_end+0xf8007e34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10007ed8:	0005883a 	mov	r2,zero
}
10007edc:	e6ffff04 	addi	sp,fp,-4
10007ee0:	dfc00217 	ldw	ra,8(sp)
10007ee4:	df000117 	ldw	fp,4(sp)
10007ee8:	dc000017 	ldw	r16,0(sp)
10007eec:	dec00304 	addi	sp,sp,12
10007ef0:	f800283a 	ret

10007ef4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10007ef4:	defff604 	addi	sp,sp,-40
10007ef8:	dfc00915 	stw	ra,36(sp)
10007efc:	df000815 	stw	fp,32(sp)
10007f00:	df000804 	addi	fp,sp,32
10007f04:	e13ffd15 	stw	r4,-12(fp)
10007f08:	e17ffe15 	stw	r5,-8(fp)
10007f0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10007f10:	00bfffc4 	movi	r2,-1
10007f14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10007f18:	00bffb44 	movi	r2,-19
10007f1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10007f20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10007f24:	e13ffd17 	ldw	r4,-12(fp)
10007f28:	01440074 	movhi	r5,4097
10007f2c:	2968b604 	addi	r5,r5,-23848
10007f30:	00082900 	call	10008290 <alt_find_dev>
10007f34:	e0bff815 	stw	r2,-32(fp)
10007f38:	e0bff817 	ldw	r2,-32(fp)
10007f3c:	1000051e 	bne	r2,zero,10007f54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10007f40:	e13ffd17 	ldw	r4,-12(fp)
10007f44:	00083200 	call	10008320 <alt_find_file>
10007f48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10007f4c:	00800044 	movi	r2,1
10007f50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10007f54:	e0bff817 	ldw	r2,-32(fp)
10007f58:	10002b26 	beq	r2,zero,10008008 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10007f5c:	e13ff817 	ldw	r4,-32(fp)
10007f60:	00084340 	call	10008434 <alt_get_fd>
10007f64:	e0bff915 	stw	r2,-28(fp)
10007f68:	e0bff917 	ldw	r2,-28(fp)
10007f6c:	1000030e 	bge	r2,zero,10007f7c <open+0x88>
    {
      status = index;
10007f70:	e0bff917 	ldw	r2,-28(fp)
10007f74:	e0bffa15 	stw	r2,-24(fp)
10007f78:	00002506 	br	10008010 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10007f7c:	e13ff917 	ldw	r4,-28(fp)
10007f80:	01400304 	movi	r5,12
10007f84:	00040040 	call	10004004 <__mulsi3>
10007f88:	1007883a 	mov	r3,r2
10007f8c:	00840074 	movhi	r2,4097
10007f90:	10a85104 	addi	r2,r2,-24252
10007f94:	1885883a 	add	r2,r3,r2
10007f98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10007f9c:	e0fffe17 	ldw	r3,-8(fp)
10007fa0:	00900034 	movhi	r2,16384
10007fa4:	10bfffc4 	addi	r2,r2,-1
10007fa8:	1886703a 	and	r3,r3,r2
10007fac:	e0bffc17 	ldw	r2,-16(fp)
10007fb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10007fb4:	e0bffb17 	ldw	r2,-20(fp)
10007fb8:	1000051e 	bne	r2,zero,10007fd0 <open+0xdc>
10007fbc:	e13ffc17 	ldw	r4,-16(fp)
10007fc0:	0007e000 	call	10007e00 <alt_file_locked>
10007fc4:	e0bffa15 	stw	r2,-24(fp)
10007fc8:	e0bffa17 	ldw	r2,-24(fp)
10007fcc:	10001016 	blt	r2,zero,10008010 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10007fd0:	e0bff817 	ldw	r2,-32(fp)
10007fd4:	10800317 	ldw	r2,12(r2)
10007fd8:	10000826 	beq	r2,zero,10007ffc <open+0x108>
10007fdc:	e0bff817 	ldw	r2,-32(fp)
10007fe0:	10800317 	ldw	r2,12(r2)
10007fe4:	e13ffc17 	ldw	r4,-16(fp)
10007fe8:	e17ffd17 	ldw	r5,-12(fp)
10007fec:	e1bffe17 	ldw	r6,-8(fp)
10007ff0:	e1ffff17 	ldw	r7,-4(fp)
10007ff4:	103ee83a 	callr	r2
10007ff8:	00000106 	br	10008000 <open+0x10c>
10007ffc:	0005883a 	mov	r2,zero
10008000:	e0bffa15 	stw	r2,-24(fp)
10008004:	00000206 	br	10008010 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10008008:	00bffb44 	movi	r2,-19
1000800c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10008010:	e0bffa17 	ldw	r2,-24(fp)
10008014:	1000090e 	bge	r2,zero,1000803c <open+0x148>
  {
    alt_release_fd (index);  
10008018:	e13ff917 	ldw	r4,-28(fp)
1000801c:	00080540 	call	10008054 <alt_release_fd>
    ALT_ERRNO = -status;
10008020:	0007db00 	call	10007db0 <alt_get_errno>
10008024:	1007883a 	mov	r3,r2
10008028:	e0bffa17 	ldw	r2,-24(fp)
1000802c:	0085c83a 	sub	r2,zero,r2
10008030:	18800015 	stw	r2,0(r3)
    return -1;
10008034:	00bfffc4 	movi	r2,-1
10008038:	00000106 	br	10008040 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000803c:	e0bff917 	ldw	r2,-28(fp)
}
10008040:	e037883a 	mov	sp,fp
10008044:	dfc00117 	ldw	ra,4(sp)
10008048:	df000017 	ldw	fp,0(sp)
1000804c:	dec00204 	addi	sp,sp,8
10008050:	f800283a 	ret

10008054 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10008054:	defffc04 	addi	sp,sp,-16
10008058:	dfc00315 	stw	ra,12(sp)
1000805c:	df000215 	stw	fp,8(sp)
10008060:	dc000115 	stw	r16,4(sp)
10008064:	df000204 	addi	fp,sp,8
10008068:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000806c:	e0bffe17 	ldw	r2,-8(fp)
10008070:	108000d0 	cmplti	r2,r2,3
10008074:	1000111e 	bne	r2,zero,100080bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10008078:	04040074 	movhi	r16,4097
1000807c:	84285104 	addi	r16,r16,-24252
10008080:	e0bffe17 	ldw	r2,-8(fp)
10008084:	1009883a 	mov	r4,r2
10008088:	01400304 	movi	r5,12
1000808c:	00040040 	call	10004004 <__mulsi3>
10008090:	8085883a 	add	r2,r16,r2
10008094:	10800204 	addi	r2,r2,8
10008098:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000809c:	04040074 	movhi	r16,4097
100080a0:	84285104 	addi	r16,r16,-24252
100080a4:	e0bffe17 	ldw	r2,-8(fp)
100080a8:	1009883a 	mov	r4,r2
100080ac:	01400304 	movi	r5,12
100080b0:	00040040 	call	10004004 <__mulsi3>
100080b4:	8085883a 	add	r2,r16,r2
100080b8:	10000015 	stw	zero,0(r2)
  }
}
100080bc:	e6ffff04 	addi	sp,fp,-4
100080c0:	dfc00217 	ldw	ra,8(sp)
100080c4:	df000117 	ldw	fp,4(sp)
100080c8:	dc000017 	ldw	r16,0(sp)
100080cc:	dec00304 	addi	sp,sp,12
100080d0:	f800283a 	ret

100080d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100080d4:	defffa04 	addi	sp,sp,-24
100080d8:	df000515 	stw	fp,20(sp)
100080dc:	df000504 	addi	fp,sp,20
100080e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100080e4:	0005303a 	rdctl	r2,status
100080e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100080ec:	e0fffc17 	ldw	r3,-16(fp)
100080f0:	00bfff84 	movi	r2,-2
100080f4:	1884703a 	and	r2,r3,r2
100080f8:	1001703a 	wrctl	status,r2
  
  return context;
100080fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10008100:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10008104:	e0bfff17 	ldw	r2,-4(fp)
10008108:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000810c:	e0bffd17 	ldw	r2,-12(fp)
10008110:	10800017 	ldw	r2,0(r2)
10008114:	e0fffd17 	ldw	r3,-12(fp)
10008118:	18c00117 	ldw	r3,4(r3)
1000811c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10008120:	e0bffd17 	ldw	r2,-12(fp)
10008124:	10800117 	ldw	r2,4(r2)
10008128:	e0fffd17 	ldw	r3,-12(fp)
1000812c:	18c00017 	ldw	r3,0(r3)
10008130:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10008134:	e0bffd17 	ldw	r2,-12(fp)
10008138:	e0fffd17 	ldw	r3,-12(fp)
1000813c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10008140:	e0bffd17 	ldw	r2,-12(fp)
10008144:	e0fffd17 	ldw	r3,-12(fp)
10008148:	10c00015 	stw	r3,0(r2)
1000814c:	e0bffb17 	ldw	r2,-20(fp)
10008150:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10008154:	e0bffe17 	ldw	r2,-8(fp)
10008158:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000815c:	e037883a 	mov	sp,fp
10008160:	df000017 	ldw	fp,0(sp)
10008164:	dec00104 	addi	sp,sp,4
10008168:	f800283a 	ret

1000816c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000816c:	defffb04 	addi	sp,sp,-20
10008170:	dfc00415 	stw	ra,16(sp)
10008174:	df000315 	stw	fp,12(sp)
10008178:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000817c:	d0a00a17 	ldw	r2,-32728(gp)
10008180:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10008184:	d0a5af17 	ldw	r2,-26948(gp)
10008188:	10800044 	addi	r2,r2,1
1000818c:	d0a5af15 	stw	r2,-26948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10008190:	00002e06 	br	1000824c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10008194:	e0bffd17 	ldw	r2,-12(fp)
10008198:	10800017 	ldw	r2,0(r2)
1000819c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100081a0:	e0bffd17 	ldw	r2,-12(fp)
100081a4:	10800403 	ldbu	r2,16(r2)
100081a8:	10803fcc 	andi	r2,r2,255
100081ac:	10000426 	beq	r2,zero,100081c0 <alt_tick+0x54>
100081b0:	d0a5af17 	ldw	r2,-26948(gp)
100081b4:	1000021e 	bne	r2,zero,100081c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100081b8:	e0bffd17 	ldw	r2,-12(fp)
100081bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100081c0:	e0bffd17 	ldw	r2,-12(fp)
100081c4:	10800217 	ldw	r2,8(r2)
100081c8:	d0e5af17 	ldw	r3,-26948(gp)
100081cc:	18801d36 	bltu	r3,r2,10008244 <alt_tick+0xd8>
100081d0:	e0bffd17 	ldw	r2,-12(fp)
100081d4:	10800403 	ldbu	r2,16(r2)
100081d8:	10803fcc 	andi	r2,r2,255
100081dc:	1000191e 	bne	r2,zero,10008244 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100081e0:	e0bffd17 	ldw	r2,-12(fp)
100081e4:	10800317 	ldw	r2,12(r2)
100081e8:	e0fffd17 	ldw	r3,-12(fp)
100081ec:	18c00517 	ldw	r3,20(r3)
100081f0:	1809883a 	mov	r4,r3
100081f4:	103ee83a 	callr	r2
100081f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100081fc:	e0bfff17 	ldw	r2,-4(fp)
10008200:	1000031e 	bne	r2,zero,10008210 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10008204:	e13ffd17 	ldw	r4,-12(fp)
10008208:	00080d40 	call	100080d4 <alt_alarm_stop>
1000820c:	00000d06 	br	10008244 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10008210:	e0bffd17 	ldw	r2,-12(fp)
10008214:	10c00217 	ldw	r3,8(r2)
10008218:	e0bfff17 	ldw	r2,-4(fp)
1000821c:	1887883a 	add	r3,r3,r2
10008220:	e0bffd17 	ldw	r2,-12(fp)
10008224:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10008228:	e0bffd17 	ldw	r2,-12(fp)
1000822c:	10c00217 	ldw	r3,8(r2)
10008230:	d0a5af17 	ldw	r2,-26948(gp)
10008234:	1880032e 	bgeu	r3,r2,10008244 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10008238:	e0bffd17 	ldw	r2,-12(fp)
1000823c:	00c00044 	movi	r3,1
10008240:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10008244:	e0bffe17 	ldw	r2,-8(fp)
10008248:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000824c:	e0fffd17 	ldw	r3,-12(fp)
10008250:	d0a00a04 	addi	r2,gp,-32728
10008254:	18bfcf1e 	bne	r3,r2,10008194 <__alt_data_end+0xf8008194>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10008258:	0001883a 	nop
}
1000825c:	e037883a 	mov	sp,fp
10008260:	dfc00117 	ldw	ra,4(sp)
10008264:	df000017 	ldw	fp,0(sp)
10008268:	dec00204 	addi	sp,sp,8
1000826c:	f800283a 	ret

10008270 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10008270:	deffff04 	addi	sp,sp,-4
10008274:	df000015 	stw	fp,0(sp)
10008278:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000827c:	000170fa 	wrctl	ienable,zero
}
10008280:	e037883a 	mov	sp,fp
10008284:	df000017 	ldw	fp,0(sp)
10008288:	dec00104 	addi	sp,sp,4
1000828c:	f800283a 	ret

10008290 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10008290:	defffa04 	addi	sp,sp,-24
10008294:	dfc00515 	stw	ra,20(sp)
10008298:	df000415 	stw	fp,16(sp)
1000829c:	df000404 	addi	fp,sp,16
100082a0:	e13ffe15 	stw	r4,-8(fp)
100082a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100082a8:	e0bfff17 	ldw	r2,-4(fp)
100082ac:	10800017 	ldw	r2,0(r2)
100082b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100082b4:	e13ffe17 	ldw	r4,-8(fp)
100082b8:	00087a40 	call	100087a4 <strlen>
100082bc:	10800044 	addi	r2,r2,1
100082c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100082c4:	00000d06 	br	100082fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100082c8:	e0bffc17 	ldw	r2,-16(fp)
100082cc:	10c00217 	ldw	r3,8(r2)
100082d0:	e0bffd17 	ldw	r2,-12(fp)
100082d4:	1809883a 	mov	r4,r3
100082d8:	e17ffe17 	ldw	r5,-8(fp)
100082dc:	100d883a 	mov	r6,r2
100082e0:	00085f00 	call	100085f0 <memcmp>
100082e4:	1000021e 	bne	r2,zero,100082f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100082e8:	e0bffc17 	ldw	r2,-16(fp)
100082ec:	00000706 	br	1000830c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100082f0:	e0bffc17 	ldw	r2,-16(fp)
100082f4:	10800017 	ldw	r2,0(r2)
100082f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100082fc:	e0fffc17 	ldw	r3,-16(fp)
10008300:	e0bfff17 	ldw	r2,-4(fp)
10008304:	18bff01e 	bne	r3,r2,100082c8 <__alt_data_end+0xf80082c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10008308:	0005883a 	mov	r2,zero
}
1000830c:	e037883a 	mov	sp,fp
10008310:	dfc00117 	ldw	ra,4(sp)
10008314:	df000017 	ldw	fp,0(sp)
10008318:	dec00204 	addi	sp,sp,8
1000831c:	f800283a 	ret

10008320 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10008320:	defffb04 	addi	sp,sp,-20
10008324:	dfc00415 	stw	ra,16(sp)
10008328:	df000315 	stw	fp,12(sp)
1000832c:	df000304 	addi	fp,sp,12
10008330:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10008334:	00840074 	movhi	r2,4097
10008338:	10a8b404 	addi	r2,r2,-23856
1000833c:	10800017 	ldw	r2,0(r2)
10008340:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10008344:	00003106 	br	1000840c <alt_find_file+0xec>
  {
    len = strlen(next->name);
10008348:	e0bffd17 	ldw	r2,-12(fp)
1000834c:	10800217 	ldw	r2,8(r2)
10008350:	1009883a 	mov	r4,r2
10008354:	00087a40 	call	100087a4 <strlen>
10008358:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000835c:	e0bffd17 	ldw	r2,-12(fp)
10008360:	10c00217 	ldw	r3,8(r2)
10008364:	e0bffe17 	ldw	r2,-8(fp)
10008368:	10bfffc4 	addi	r2,r2,-1
1000836c:	1885883a 	add	r2,r3,r2
10008370:	10800003 	ldbu	r2,0(r2)
10008374:	10803fcc 	andi	r2,r2,255
10008378:	1080201c 	xori	r2,r2,128
1000837c:	10bfe004 	addi	r2,r2,-128
10008380:	10800bd8 	cmpnei	r2,r2,47
10008384:	1000031e 	bne	r2,zero,10008394 <alt_find_file+0x74>
    {
      len -= 1;
10008388:	e0bffe17 	ldw	r2,-8(fp)
1000838c:	10bfffc4 	addi	r2,r2,-1
10008390:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10008394:	e0bffe17 	ldw	r2,-8(fp)
10008398:	e0ffff17 	ldw	r3,-4(fp)
1000839c:	1885883a 	add	r2,r3,r2
100083a0:	10800003 	ldbu	r2,0(r2)
100083a4:	10803fcc 	andi	r2,r2,255
100083a8:	1080201c 	xori	r2,r2,128
100083ac:	10bfe004 	addi	r2,r2,-128
100083b0:	10800be0 	cmpeqi	r2,r2,47
100083b4:	1000081e 	bne	r2,zero,100083d8 <alt_find_file+0xb8>
100083b8:	e0bffe17 	ldw	r2,-8(fp)
100083bc:	e0ffff17 	ldw	r3,-4(fp)
100083c0:	1885883a 	add	r2,r3,r2
100083c4:	10800003 	ldbu	r2,0(r2)
100083c8:	10803fcc 	andi	r2,r2,255
100083cc:	1080201c 	xori	r2,r2,128
100083d0:	10bfe004 	addi	r2,r2,-128
100083d4:	10000a1e 	bne	r2,zero,10008400 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100083d8:	e0bffd17 	ldw	r2,-12(fp)
100083dc:	10c00217 	ldw	r3,8(r2)
100083e0:	e0bffe17 	ldw	r2,-8(fp)
100083e4:	1809883a 	mov	r4,r3
100083e8:	e17fff17 	ldw	r5,-4(fp)
100083ec:	100d883a 	mov	r6,r2
100083f0:	00085f00 	call	100085f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100083f4:	1000021e 	bne	r2,zero,10008400 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100083f8:	e0bffd17 	ldw	r2,-12(fp)
100083fc:	00000806 	br	10008420 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10008400:	e0bffd17 	ldw	r2,-12(fp)
10008404:	10800017 	ldw	r2,0(r2)
10008408:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000840c:	e0fffd17 	ldw	r3,-12(fp)
10008410:	00840074 	movhi	r2,4097
10008414:	10a8b404 	addi	r2,r2,-23856
10008418:	18bfcb1e 	bne	r3,r2,10008348 <__alt_data_end+0xf8008348>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000841c:	0005883a 	mov	r2,zero
}
10008420:	e037883a 	mov	sp,fp
10008424:	dfc00117 	ldw	ra,4(sp)
10008428:	df000017 	ldw	fp,0(sp)
1000842c:	dec00204 	addi	sp,sp,8
10008430:	f800283a 	ret

10008434 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10008434:	defffa04 	addi	sp,sp,-24
10008438:	dfc00515 	stw	ra,20(sp)
1000843c:	df000415 	stw	fp,16(sp)
10008440:	dc000315 	stw	r16,12(sp)
10008444:	df000404 	addi	fp,sp,16
10008448:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000844c:	00bffa04 	movi	r2,-24
10008450:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10008454:	e03ffc15 	stw	zero,-16(fp)
10008458:	00002106 	br	100084e0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000845c:	04040074 	movhi	r16,4097
10008460:	84285104 	addi	r16,r16,-24252
10008464:	e0bffc17 	ldw	r2,-16(fp)
10008468:	1009883a 	mov	r4,r2
1000846c:	01400304 	movi	r5,12
10008470:	00040040 	call	10004004 <__mulsi3>
10008474:	8085883a 	add	r2,r16,r2
10008478:	10800017 	ldw	r2,0(r2)
1000847c:	1000151e 	bne	r2,zero,100084d4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10008480:	04040074 	movhi	r16,4097
10008484:	84285104 	addi	r16,r16,-24252
10008488:	e0bffc17 	ldw	r2,-16(fp)
1000848c:	1009883a 	mov	r4,r2
10008490:	01400304 	movi	r5,12
10008494:	00040040 	call	10004004 <__mulsi3>
10008498:	8085883a 	add	r2,r16,r2
1000849c:	e0fffe17 	ldw	r3,-8(fp)
100084a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100084a4:	00840074 	movhi	r2,4097
100084a8:	10a8b804 	addi	r2,r2,-23840
100084ac:	10c00017 	ldw	r3,0(r2)
100084b0:	e0bffc17 	ldw	r2,-16(fp)
100084b4:	1880040e 	bge	r3,r2,100084c8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
100084b8:	00840074 	movhi	r2,4097
100084bc:	10a8b804 	addi	r2,r2,-23840
100084c0:	e0fffc17 	ldw	r3,-16(fp)
100084c4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100084c8:	e0bffc17 	ldw	r2,-16(fp)
100084cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100084d0:	00000606 	br	100084ec <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100084d4:	e0bffc17 	ldw	r2,-16(fp)
100084d8:	10800044 	addi	r2,r2,1
100084dc:	e0bffc15 	stw	r2,-16(fp)
100084e0:	e0bffc17 	ldw	r2,-16(fp)
100084e4:	10800810 	cmplti	r2,r2,32
100084e8:	103fdc1e 	bne	r2,zero,1000845c <__alt_data_end+0xf800845c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100084ec:	e0bffd17 	ldw	r2,-12(fp)
}
100084f0:	e6ffff04 	addi	sp,fp,-4
100084f4:	dfc00217 	ldw	ra,8(sp)
100084f8:	df000117 	ldw	fp,4(sp)
100084fc:	dc000017 	ldw	r16,0(sp)
10008500:	dec00304 	addi	sp,sp,12
10008504:	f800283a 	ret

10008508 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10008508:	defffe04 	addi	sp,sp,-8
1000850c:	df000115 	stw	fp,4(sp)
10008510:	df000104 	addi	fp,sp,4
10008514:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10008518:	e0bfff17 	ldw	r2,-4(fp)
1000851c:	10bffe84 	addi	r2,r2,-6
10008520:	10c00428 	cmpgeui	r3,r2,16
10008524:	18001a1e 	bne	r3,zero,10008590 <alt_exception_cause_generated_bad_addr+0x88>
10008528:	100690ba 	slli	r3,r2,2
1000852c:	00840074 	movhi	r2,4097
10008530:	10a15004 	addi	r2,r2,-31424
10008534:	1885883a 	add	r2,r3,r2
10008538:	10800017 	ldw	r2,0(r2)
1000853c:	1000683a 	jmp	r2
10008540:	10008580 	call	11000858 <_gp+0xfee594>
10008544:	10008580 	call	11000858 <_gp+0xfee594>
10008548:	10008590 	cmplti	zero,r2,534
1000854c:	10008590 	cmplti	zero,r2,534
10008550:	10008590 	cmplti	zero,r2,534
10008554:	10008580 	call	11000858 <_gp+0xfee594>
10008558:	10008588 	cmpgei	zero,r2,534
1000855c:	10008590 	cmplti	zero,r2,534
10008560:	10008580 	call	11000858 <_gp+0xfee594>
10008564:	10008580 	call	11000858 <_gp+0xfee594>
10008568:	10008590 	cmplti	zero,r2,534
1000856c:	10008580 	call	11000858 <_gp+0xfee594>
10008570:	10008588 	cmpgei	zero,r2,534
10008574:	10008590 	cmplti	zero,r2,534
10008578:	10008590 	cmplti	zero,r2,534
1000857c:	10008580 	call	11000858 <_gp+0xfee594>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10008580:	00800044 	movi	r2,1
10008584:	00000306 	br	10008594 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10008588:	0005883a 	mov	r2,zero
1000858c:	00000106 	br	10008594 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10008590:	0005883a 	mov	r2,zero
  }
}
10008594:	e037883a 	mov	sp,fp
10008598:	df000017 	ldw	fp,0(sp)
1000859c:	dec00104 	addi	sp,sp,4
100085a0:	f800283a 	ret

100085a4 <atexit>:
100085a4:	200b883a 	mov	r5,r4
100085a8:	000d883a 	mov	r6,zero
100085ac:	0009883a 	mov	r4,zero
100085b0:	000f883a 	mov	r7,zero
100085b4:	000883c1 	jmpi	1000883c <__register_exitproc>

100085b8 <exit>:
100085b8:	defffe04 	addi	sp,sp,-8
100085bc:	000b883a 	mov	r5,zero
100085c0:	dc000015 	stw	r16,0(sp)
100085c4:	dfc00115 	stw	ra,4(sp)
100085c8:	2021883a 	mov	r16,r4
100085cc:	00089500 	call	10008950 <__call_exitprocs>
100085d0:	00840074 	movhi	r2,4097
100085d4:	10a8b204 	addi	r2,r2,-23864
100085d8:	11000017 	ldw	r4,0(r2)
100085dc:	20800f17 	ldw	r2,60(r4)
100085e0:	10000126 	beq	r2,zero,100085e8 <exit+0x30>
100085e4:	103ee83a 	callr	r2
100085e8:	8009883a 	mov	r4,r16
100085ec:	0008ae40 	call	10008ae4 <_exit>

100085f0 <memcmp>:
100085f0:	01c000c4 	movi	r7,3
100085f4:	3980192e 	bgeu	r7,r6,1000865c <memcmp+0x6c>
100085f8:	2144b03a 	or	r2,r4,r5
100085fc:	11c4703a 	and	r2,r2,r7
10008600:	10000f26 	beq	r2,zero,10008640 <memcmp+0x50>
10008604:	20800003 	ldbu	r2,0(r4)
10008608:	28c00003 	ldbu	r3,0(r5)
1000860c:	10c0151e 	bne	r2,r3,10008664 <memcmp+0x74>
10008610:	31bfff84 	addi	r6,r6,-2
10008614:	01ffffc4 	movi	r7,-1
10008618:	00000406 	br	1000862c <memcmp+0x3c>
1000861c:	20800003 	ldbu	r2,0(r4)
10008620:	28c00003 	ldbu	r3,0(r5)
10008624:	31bfffc4 	addi	r6,r6,-1
10008628:	10c00e1e 	bne	r2,r3,10008664 <memcmp+0x74>
1000862c:	21000044 	addi	r4,r4,1
10008630:	29400044 	addi	r5,r5,1
10008634:	31fff91e 	bne	r6,r7,1000861c <__alt_data_end+0xf800861c>
10008638:	0005883a 	mov	r2,zero
1000863c:	f800283a 	ret
10008640:	20c00017 	ldw	r3,0(r4)
10008644:	28800017 	ldw	r2,0(r5)
10008648:	1880041e 	bne	r3,r2,1000865c <memcmp+0x6c>
1000864c:	31bfff04 	addi	r6,r6,-4
10008650:	21000104 	addi	r4,r4,4
10008654:	29400104 	addi	r5,r5,4
10008658:	39bff936 	bltu	r7,r6,10008640 <__alt_data_end+0xf8008640>
1000865c:	303fe91e 	bne	r6,zero,10008604 <__alt_data_end+0xf8008604>
10008660:	003ff506 	br	10008638 <__alt_data_end+0xf8008638>
10008664:	10c5c83a 	sub	r2,r2,r3
10008668:	f800283a 	ret

1000866c <memcpy>:
1000866c:	deffff04 	addi	sp,sp,-4
10008670:	dc000015 	stw	r16,0(sp)
10008674:	00c003c4 	movi	r3,15
10008678:	2005883a 	mov	r2,r4
1000867c:	1980432e 	bgeu	r3,r6,1000878c <memcpy+0x120>
10008680:	2146b03a 	or	r3,r4,r5
10008684:	18c000cc 	andi	r3,r3,3
10008688:	1800421e 	bne	r3,zero,10008794 <memcpy+0x128>
1000868c:	343ffc04 	addi	r16,r6,-16
10008690:	8020d13a 	srli	r16,r16,4
10008694:	28c00104 	addi	r3,r5,4
10008698:	23400104 	addi	r13,r4,4
1000869c:	801e913a 	slli	r15,r16,4
100086a0:	2b000204 	addi	r12,r5,8
100086a4:	22c00204 	addi	r11,r4,8
100086a8:	7bc00504 	addi	r15,r15,20
100086ac:	2a800304 	addi	r10,r5,12
100086b0:	22400304 	addi	r9,r4,12
100086b4:	2bdf883a 	add	r15,r5,r15
100086b8:	2811883a 	mov	r8,r5
100086bc:	200f883a 	mov	r7,r4
100086c0:	41000017 	ldw	r4,0(r8)
100086c4:	39c00404 	addi	r7,r7,16
100086c8:	18c00404 	addi	r3,r3,16
100086cc:	393ffc15 	stw	r4,-16(r7)
100086d0:	1bbffc17 	ldw	r14,-16(r3)
100086d4:	6b400404 	addi	r13,r13,16
100086d8:	5ac00404 	addi	r11,r11,16
100086dc:	6bbffc15 	stw	r14,-16(r13)
100086e0:	63800017 	ldw	r14,0(r12)
100086e4:	4a400404 	addi	r9,r9,16
100086e8:	42000404 	addi	r8,r8,16
100086ec:	5bbffc15 	stw	r14,-16(r11)
100086f0:	53800017 	ldw	r14,0(r10)
100086f4:	63000404 	addi	r12,r12,16
100086f8:	52800404 	addi	r10,r10,16
100086fc:	4bbffc15 	stw	r14,-16(r9)
10008700:	1bffef1e 	bne	r3,r15,100086c0 <__alt_data_end+0xf80086c0>
10008704:	81c00044 	addi	r7,r16,1
10008708:	380e913a 	slli	r7,r7,4
1000870c:	310003cc 	andi	r4,r6,15
10008710:	02c000c4 	movi	r11,3
10008714:	11c7883a 	add	r3,r2,r7
10008718:	29cb883a 	add	r5,r5,r7
1000871c:	59001f2e 	bgeu	r11,r4,1000879c <memcpy+0x130>
10008720:	1813883a 	mov	r9,r3
10008724:	2811883a 	mov	r8,r5
10008728:	200f883a 	mov	r7,r4
1000872c:	42800017 	ldw	r10,0(r8)
10008730:	4a400104 	addi	r9,r9,4
10008734:	39ffff04 	addi	r7,r7,-4
10008738:	4abfff15 	stw	r10,-4(r9)
1000873c:	42000104 	addi	r8,r8,4
10008740:	59fffa36 	bltu	r11,r7,1000872c <__alt_data_end+0xf800872c>
10008744:	213fff04 	addi	r4,r4,-4
10008748:	2008d0ba 	srli	r4,r4,2
1000874c:	318000cc 	andi	r6,r6,3
10008750:	21000044 	addi	r4,r4,1
10008754:	2109883a 	add	r4,r4,r4
10008758:	2109883a 	add	r4,r4,r4
1000875c:	1907883a 	add	r3,r3,r4
10008760:	290b883a 	add	r5,r5,r4
10008764:	30000626 	beq	r6,zero,10008780 <memcpy+0x114>
10008768:	198d883a 	add	r6,r3,r6
1000876c:	29c00003 	ldbu	r7,0(r5)
10008770:	18c00044 	addi	r3,r3,1
10008774:	29400044 	addi	r5,r5,1
10008778:	19ffffc5 	stb	r7,-1(r3)
1000877c:	19bffb1e 	bne	r3,r6,1000876c <__alt_data_end+0xf800876c>
10008780:	dc000017 	ldw	r16,0(sp)
10008784:	dec00104 	addi	sp,sp,4
10008788:	f800283a 	ret
1000878c:	2007883a 	mov	r3,r4
10008790:	003ff406 	br	10008764 <__alt_data_end+0xf8008764>
10008794:	2007883a 	mov	r3,r4
10008798:	003ff306 	br	10008768 <__alt_data_end+0xf8008768>
1000879c:	200d883a 	mov	r6,r4
100087a0:	003ff006 	br	10008764 <__alt_data_end+0xf8008764>

100087a4 <strlen>:
100087a4:	208000cc 	andi	r2,r4,3
100087a8:	10002026 	beq	r2,zero,1000882c <strlen+0x88>
100087ac:	20800007 	ldb	r2,0(r4)
100087b0:	10002026 	beq	r2,zero,10008834 <strlen+0x90>
100087b4:	2005883a 	mov	r2,r4
100087b8:	00000206 	br	100087c4 <strlen+0x20>
100087bc:	10c00007 	ldb	r3,0(r2)
100087c0:	18001826 	beq	r3,zero,10008824 <strlen+0x80>
100087c4:	10800044 	addi	r2,r2,1
100087c8:	10c000cc 	andi	r3,r2,3
100087cc:	183ffb1e 	bne	r3,zero,100087bc <__alt_data_end+0xf80087bc>
100087d0:	10c00017 	ldw	r3,0(r2)
100087d4:	01ffbff4 	movhi	r7,65279
100087d8:	39ffbfc4 	addi	r7,r7,-257
100087dc:	00ca303a 	nor	r5,zero,r3
100087e0:	01a02074 	movhi	r6,32897
100087e4:	19c7883a 	add	r3,r3,r7
100087e8:	31a02004 	addi	r6,r6,-32640
100087ec:	1946703a 	and	r3,r3,r5
100087f0:	1986703a 	and	r3,r3,r6
100087f4:	1800091e 	bne	r3,zero,1000881c <strlen+0x78>
100087f8:	10800104 	addi	r2,r2,4
100087fc:	10c00017 	ldw	r3,0(r2)
10008800:	19cb883a 	add	r5,r3,r7
10008804:	00c6303a 	nor	r3,zero,r3
10008808:	28c6703a 	and	r3,r5,r3
1000880c:	1986703a 	and	r3,r3,r6
10008810:	183ff926 	beq	r3,zero,100087f8 <__alt_data_end+0xf80087f8>
10008814:	00000106 	br	1000881c <strlen+0x78>
10008818:	10800044 	addi	r2,r2,1
1000881c:	10c00007 	ldb	r3,0(r2)
10008820:	183ffd1e 	bne	r3,zero,10008818 <__alt_data_end+0xf8008818>
10008824:	1105c83a 	sub	r2,r2,r4
10008828:	f800283a 	ret
1000882c:	2005883a 	mov	r2,r4
10008830:	003fe706 	br	100087d0 <__alt_data_end+0xf80087d0>
10008834:	0005883a 	mov	r2,zero
10008838:	f800283a 	ret

1000883c <__register_exitproc>:
1000883c:	00840074 	movhi	r2,4097
10008840:	defffa04 	addi	sp,sp,-24
10008844:	10a8b204 	addi	r2,r2,-23864
10008848:	dc000315 	stw	r16,12(sp)
1000884c:	14000017 	ldw	r16,0(r2)
10008850:	dc400415 	stw	r17,16(sp)
10008854:	dfc00515 	stw	ra,20(sp)
10008858:	80805217 	ldw	r2,328(r16)
1000885c:	2023883a 	mov	r17,r4
10008860:	10003626 	beq	r2,zero,1000893c <__register_exitproc+0x100>
10008864:	10c00117 	ldw	r3,4(r2)
10008868:	010007c4 	movi	r4,31
1000886c:	20c00e16 	blt	r4,r3,100088a8 <__register_exitproc+0x6c>
10008870:	1a400044 	addi	r9,r3,1
10008874:	8800211e 	bne	r17,zero,100088fc <__register_exitproc+0xc0>
10008878:	18c00084 	addi	r3,r3,2
1000887c:	18c7883a 	add	r3,r3,r3
10008880:	18c7883a 	add	r3,r3,r3
10008884:	12400115 	stw	r9,4(r2)
10008888:	10c7883a 	add	r3,r2,r3
1000888c:	19400015 	stw	r5,0(r3)
10008890:	0005883a 	mov	r2,zero
10008894:	dfc00517 	ldw	ra,20(sp)
10008898:	dc400417 	ldw	r17,16(sp)
1000889c:	dc000317 	ldw	r16,12(sp)
100088a0:	dec00604 	addi	sp,sp,24
100088a4:	f800283a 	ret
100088a8:	00800034 	movhi	r2,0
100088ac:	10800004 	addi	r2,r2,0
100088b0:	10002526 	beq	r2,zero,10008948 <__register_exitproc+0x10c>
100088b4:	01006404 	movi	r4,400
100088b8:	d9400015 	stw	r5,0(sp)
100088bc:	d9800115 	stw	r6,4(sp)
100088c0:	d9c00215 	stw	r7,8(sp)
100088c4:	00000000 	call	10000000 <__alt_mem_sdram>
100088c8:	d9400017 	ldw	r5,0(sp)
100088cc:	d9800117 	ldw	r6,4(sp)
100088d0:	d9c00217 	ldw	r7,8(sp)
100088d4:	10001c26 	beq	r2,zero,10008948 <__register_exitproc+0x10c>
100088d8:	80c05217 	ldw	r3,328(r16)
100088dc:	10000115 	stw	zero,4(r2)
100088e0:	02400044 	movi	r9,1
100088e4:	10c00015 	stw	r3,0(r2)
100088e8:	80805215 	stw	r2,328(r16)
100088ec:	10006215 	stw	zero,392(r2)
100088f0:	10006315 	stw	zero,396(r2)
100088f4:	0007883a 	mov	r3,zero
100088f8:	883fdf26 	beq	r17,zero,10008878 <__alt_data_end+0xf8008878>
100088fc:	18d1883a 	add	r8,r3,r3
10008900:	4211883a 	add	r8,r8,r8
10008904:	1211883a 	add	r8,r2,r8
10008908:	41802215 	stw	r6,136(r8)
1000890c:	01000044 	movi	r4,1
10008910:	11806217 	ldw	r6,392(r2)
10008914:	20c8983a 	sll	r4,r4,r3
10008918:	310cb03a 	or	r6,r6,r4
1000891c:	11806215 	stw	r6,392(r2)
10008920:	41c04215 	stw	r7,264(r8)
10008924:	01800084 	movi	r6,2
10008928:	89bfd31e 	bne	r17,r6,10008878 <__alt_data_end+0xf8008878>
1000892c:	11806317 	ldw	r6,396(r2)
10008930:	3108b03a 	or	r4,r6,r4
10008934:	11006315 	stw	r4,396(r2)
10008938:	003fcf06 	br	10008878 <__alt_data_end+0xf8008878>
1000893c:	80805304 	addi	r2,r16,332
10008940:	80805215 	stw	r2,328(r16)
10008944:	003fc706 	br	10008864 <__alt_data_end+0xf8008864>
10008948:	00bfffc4 	movi	r2,-1
1000894c:	003fd106 	br	10008894 <__alt_data_end+0xf8008894>

10008950 <__call_exitprocs>:
10008950:	00840074 	movhi	r2,4097
10008954:	10a8b204 	addi	r2,r2,-23864
10008958:	10800017 	ldw	r2,0(r2)
1000895c:	defff404 	addi	sp,sp,-48
10008960:	dd800815 	stw	r22,32(sp)
10008964:	d8800015 	stw	r2,0(sp)
10008968:	10805204 	addi	r2,r2,328
1000896c:	dd000615 	stw	r20,24(sp)
10008970:	dc800415 	stw	r18,16(sp)
10008974:	dfc00b15 	stw	ra,44(sp)
10008978:	df000a15 	stw	fp,40(sp)
1000897c:	ddc00915 	stw	r23,36(sp)
10008980:	dd400715 	stw	r21,28(sp)
10008984:	dcc00515 	stw	r19,20(sp)
10008988:	dc400315 	stw	r17,12(sp)
1000898c:	dc000215 	stw	r16,8(sp)
10008990:	2025883a 	mov	r18,r4
10008994:	2829883a 	mov	r20,r5
10008998:	d8800115 	stw	r2,4(sp)
1000899c:	05bfffc4 	movi	r22,-1
100089a0:	d8800017 	ldw	r2,0(sp)
100089a4:	14c05217 	ldw	r19,328(r2)
100089a8:	98001d26 	beq	r19,zero,10008a20 <__call_exitprocs+0xd0>
100089ac:	dd400117 	ldw	r21,4(sp)
100089b0:	98800117 	ldw	r2,4(r19)
100089b4:	173fffc4 	addi	fp,r2,-1
100089b8:	e0000d16 	blt	fp,zero,100089f0 <__call_exitprocs+0xa0>
100089bc:	14000044 	addi	r16,r2,1
100089c0:	8421883a 	add	r16,r16,r16
100089c4:	8421883a 	add	r16,r16,r16
100089c8:	84402004 	addi	r17,r16,128
100089cc:	9c63883a 	add	r17,r19,r17
100089d0:	9c21883a 	add	r16,r19,r16
100089d4:	a0001e26 	beq	r20,zero,10008a50 <__call_exitprocs+0x100>
100089d8:	80804017 	ldw	r2,256(r16)
100089dc:	15001c26 	beq	r2,r20,10008a50 <__call_exitprocs+0x100>
100089e0:	e73fffc4 	addi	fp,fp,-1
100089e4:	843fff04 	addi	r16,r16,-4
100089e8:	8c7fff04 	addi	r17,r17,-4
100089ec:	e5bff91e 	bne	fp,r22,100089d4 <__alt_data_end+0xf80089d4>
100089f0:	00800034 	movhi	r2,0
100089f4:	10800004 	addi	r2,r2,0
100089f8:	10000926 	beq	r2,zero,10008a20 <__call_exitprocs+0xd0>
100089fc:	98800117 	ldw	r2,4(r19)
10008a00:	1000311e 	bne	r2,zero,10008ac8 <__call_exitprocs+0x178>
10008a04:	98800017 	ldw	r2,0(r19)
10008a08:	10003426 	beq	r2,zero,10008adc <__call_exitprocs+0x18c>
10008a0c:	9809883a 	mov	r4,r19
10008a10:	a8800015 	stw	r2,0(r21)
10008a14:	00000000 	call	10000000 <__alt_mem_sdram>
10008a18:	acc00017 	ldw	r19,0(r21)
10008a1c:	983fe41e 	bne	r19,zero,100089b0 <__alt_data_end+0xf80089b0>
10008a20:	dfc00b17 	ldw	ra,44(sp)
10008a24:	df000a17 	ldw	fp,40(sp)
10008a28:	ddc00917 	ldw	r23,36(sp)
10008a2c:	dd800817 	ldw	r22,32(sp)
10008a30:	dd400717 	ldw	r21,28(sp)
10008a34:	dd000617 	ldw	r20,24(sp)
10008a38:	dcc00517 	ldw	r19,20(sp)
10008a3c:	dc800417 	ldw	r18,16(sp)
10008a40:	dc400317 	ldw	r17,12(sp)
10008a44:	dc000217 	ldw	r16,8(sp)
10008a48:	dec00c04 	addi	sp,sp,48
10008a4c:	f800283a 	ret
10008a50:	98800117 	ldw	r2,4(r19)
10008a54:	80c00017 	ldw	r3,0(r16)
10008a58:	10bfffc4 	addi	r2,r2,-1
10008a5c:	17001526 	beq	r2,fp,10008ab4 <__call_exitprocs+0x164>
10008a60:	80000015 	stw	zero,0(r16)
10008a64:	183fde26 	beq	r3,zero,100089e0 <__alt_data_end+0xf80089e0>
10008a68:	00800044 	movi	r2,1
10008a6c:	1708983a 	sll	r4,r2,fp
10008a70:	98806217 	ldw	r2,392(r19)
10008a74:	9dc00117 	ldw	r23,4(r19)
10008a78:	2084703a 	and	r2,r4,r2
10008a7c:	1000061e 	bne	r2,zero,10008a98 <__call_exitprocs+0x148>
10008a80:	183ee83a 	callr	r3
10008a84:	98800117 	ldw	r2,4(r19)
10008a88:	15ffc51e 	bne	r2,r23,100089a0 <__alt_data_end+0xf80089a0>
10008a8c:	a8800017 	ldw	r2,0(r21)
10008a90:	14ffd326 	beq	r2,r19,100089e0 <__alt_data_end+0xf80089e0>
10008a94:	003fc206 	br	100089a0 <__alt_data_end+0xf80089a0>
10008a98:	98806317 	ldw	r2,396(r19)
10008a9c:	2084703a 	and	r2,r4,r2
10008aa0:	1000061e 	bne	r2,zero,10008abc <__call_exitprocs+0x16c>
10008aa4:	89400017 	ldw	r5,0(r17)
10008aa8:	9009883a 	mov	r4,r18
10008aac:	183ee83a 	callr	r3
10008ab0:	003ff406 	br	10008a84 <__alt_data_end+0xf8008a84>
10008ab4:	9f000115 	stw	fp,4(r19)
10008ab8:	003fea06 	br	10008a64 <__alt_data_end+0xf8008a64>
10008abc:	89000017 	ldw	r4,0(r17)
10008ac0:	183ee83a 	callr	r3
10008ac4:	003fef06 	br	10008a84 <__alt_data_end+0xf8008a84>
10008ac8:	98800017 	ldw	r2,0(r19)
10008acc:	982b883a 	mov	r21,r19
10008ad0:	1027883a 	mov	r19,r2
10008ad4:	983fb61e 	bne	r19,zero,100089b0 <__alt_data_end+0xf80089b0>
10008ad8:	003fd106 	br	10008a20 <__alt_data_end+0xf8008a20>
10008adc:	0005883a 	mov	r2,zero
10008ae0:	003ffa06 	br	10008acc <__alt_data_end+0xf8008acc>

10008ae4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10008ae4:	defffd04 	addi	sp,sp,-12
10008ae8:	df000215 	stw	fp,8(sp)
10008aec:	df000204 	addi	fp,sp,8
10008af0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10008af4:	0001883a 	nop
10008af8:	e0bfff17 	ldw	r2,-4(fp)
10008afc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10008b00:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10008b04:	10000226 	beq	r2,zero,10008b10 <_exit+0x2c>
    ALT_SIM_FAIL();
10008b08:	002af070 	cmpltui	zero,zero,43969
10008b0c:	00000106 	br	10008b14 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10008b10:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10008b14:	003fff06 	br	10008b14 <__alt_data_end+0xf8008b14>
