
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00006544 memsz 0x00006544 flags r-x
    LOAD off    0x00007564 vaddr 0x10006564 paddr 0x10007bbc align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x00009214 vaddr 0x10009214 paddr 0x10009214 align 2**12
         filesz 0x00000000 memsz 0x0000039c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006200  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  1000642c  1000642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  10006564  10007bbc  00007564  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000039c  10009214  10009214  00009214  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00008bbc  2**0
                  CONTENTS
  7 .sdram        00000000  100095b0  100095b0  00008bbc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008bbc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000710  00000000  00000000  00008be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a2b3  00000000  00000000  000092f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003627  00000000  00000000  000135a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003c30  00000000  00000000  00016bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000f40  00000000  00000000  0001a7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000021bb  00000000  00000000  0001b73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005fe9  00000000  00000000  0001d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000238e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000008c0  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000262ad  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000262b0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000262bc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000262bd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000262be  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000262c2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000262c6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000262ca  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000262d5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000262e0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000262eb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  000262f6  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00026310  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  0002a757  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1000642c l    d  .rodata	00000000 .rodata
10006564 l    d  .rwdata	00000000 .rwdata
10009214 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100095b0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002bc4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
10006564 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
100041c8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10004324 l     F .text	00000038 alt_dev_reg
10006988 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10004600 l     F .text	00000204 altera_avalon_jtag_uart_irq
10004804 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
10004f64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100050a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100050d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000556c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100056c4 l     F .text	00000050 alt_get_errno
10005714 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10009268 g     O .bss	00000004 alt_instruction_exception_handler
10001e18 g     F .text	00000068 convertDecimalToBinary
100042ac g     F .text	00000078 alt_main
100094b0 g     O .bss	00000100 alt_irq
10007bbc g       *ABS*	00000000 __flash_rwdata_start
10009214 g     O .bss	00000004 elapsedTime
10009218 g     O .bss	00000004 sameFruit
10000b20 g     F .text	000005a0 spawningEngine
10005b84 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
1000921c g     O .bss	00000004 lastPhysixed
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000926c g     O .bss	00000004 errno
10009254 g     O .bss	00000004 alt_argv
1000fb90 g       *ABS*	00000000 _gp
10009220 g     O .bss	00000004 yCursor
10007a10 g     O .rwdata	00000180 alt_fd_list
10005ba4 g     F .text	00000090 alt_find_dev
10005f80 g     F .text	00000138 memcpy
100010c0 g     F .text	00000460 slicingEngine
10003f0c g     F .text	000000d0 .hidden __floatsidf
1000564c g     F .text	00000078 alt_io_redirect
10009224 g     O .bss	00000004 xCursor
1000642c g       *ABS*	00000000 __DTOR_END__
10005e1c g     F .text	0000009c alt_exception_cause_generated_bad_addr
10004a00 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002ce0 g     F .text	00000008 .hidden __udivsi3
10009228 g     O .bss	00000004 cursorClicked
10007ba8 g     O .rwdata	00000004 alt_max_fd
10002d18 g     F .text	0000089c .hidden __adddf3
100025a8 g     F .text	0000061c .hidden __umoddi3
10007b90 g     O .rwdata	00000004 _global_impure_ptr
100095b0 g       *ABS*	00000000 __bss_end
1000547c g     F .text	000000f0 alt_iic_isr_register
10009270 g     O .bss	00000240 veggieObject
10005a80 g     F .text	00000104 alt_tick
1000922c g     O .bss	00000004 cursorStreak
10001f68 g     F .text	00000640 .hidden __udivdi3
10009230 g     O .bss	00000004 lastSpawned
10005430 g     F .text	0000004c alt_ic_irq_enabled
100059e8 g     F .text	00000098 alt_alarm_stop
10000638 g     F .text	00000110 statusEngine
1000925c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
100079e8 g     O .rwdata	00000028 alt_dev_null
10001d1c g     F .text	000000fc port2Unpackager
1000508c g     F .text	0000001c alt_dcache_flush_all
10003e84 g     F .text	00000088 .hidden __fixdfsi
10007bbc g       *ABS*	00000000 __ram_rwdata_end
10007ba0 g     O .rwdata	00000008 alt_dev_list
10006564 g       *ABS*	00000000 __ram_rodata_end
10009234 g     O .bss	00000004 lastDisintegrated
10002ce8 g     F .text	00000008 .hidden __umodsi3
100095b0 g       *ABS*	00000000 end
10009238 g     O .bss	00000004 key1
1000453c g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1000642c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003fdc g     F .text	00000064 .hidden __clzsi2
10004c0c g     F .text	00000218 altera_avalon_jtag_uart_write
10006264 g     F .text	00000194 __call_exitprocs
1000022c g     F .text	0000003c _start
10009260 g     O .bss	00000004 _alt_tick_rate
10004058 g     F .text	00000064 rand
10009264 g     O .bss	00000004 _alt_nticks
10004390 g     F .text	00000048 alt_sys_init
10006150 g     F .text	00000114 __register_exitproc
100048ac g     F .text	00000068 altera_avalon_jtag_uart_close
10002cf0 g     F .text	00000028 .hidden __mulsi3
10006564 g       *ABS*	00000000 __ram_rwdata_start
1000642c g       *ABS*	00000000 __ram_rodata_start
100043d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10005d48 g     F .text	000000d4 alt_get_fd
10005f04 g     F .text	0000007c memcmp
10004498 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100095b0 g       *ABS*	00000000 __alt_stack_base
100044e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005c34 g     F .text	00000114 alt_find_file
10005124 g     F .text	000000a4 alt_dev_llist_insert
10009214 g       *ABS*	00000000 __bss_start
10000268 g     F .text	000003d0 main
10009258 g     O .bss	00000004 alt_envp
10004438 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10004040 g     F .text	00000018 srand
10001e80 g     F .text	000000e8 convertBinaryToDecimal
10007bac g     O .rwdata	00000004 alt_errno
10002c30 g     F .text	00000054 .hidden __divsi3
1000642c g       *ABS*	00000000 __CTOR_END__
1000642c g       *ABS*	00000000 __flash_rodata_start
1000642c g       *ABS*	00000000 __DTOR_LIST__
1000923c g     O .bss	00000004 key3
1000435c g     F .text	00000034 alt_irq_init
10005968 g     F .text	00000080 alt_release_fd
1000642c g     O .rodata	00000100 .hidden __clz_tab
10005eb8 g     F .text	00000014 atexit
10009240 g     O .bss	00000004 nextSpawnTime
10001bc0 g     F .text	0000015c messagePackager
10007b94 g     O .rwdata	00000004 _impure_ptr
10009250 g     O .bss	00000004 alt_argc
10005224 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10007b98 g     O .rwdata	00000008 alt_fs_list
10001520 g     F .text	00000208 disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000529c g     F .text	00000050 alt_ic_isr_register
10007bbc g       *ABS*	00000000 _edata
100095b0 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10004914 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10009244 g     O .bss	00000004 key2
1000538c g     F .text	000000a4 alt_ic_irq_disable
10005ecc g     F .text	00000038 exit
10009248 g     O .bss	00000004 roundStart
10000748 g     F .text	000003d8 physicsEngine
10002c84 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
100063f8 g     F .text	00000034 _exit
10004e24 g     F .text	00000140 alt_alarm_start
100040bc g     F .text	0000010c .hidden __muldi3
100060b8 g     F .text	00000098 strlen
10005808 g     F .text	00000160 open
10005280 g     F .text	0000001c alt_icache_flush_all
10001728 g     F .text	00000498 FPGAcommunicator
10007bb0 g     O .rwdata	00000004 alt_priority_mask
1000924c g     O .bss	00000004 comboFruit
100052ec g     F .text	000000a0 alt_ic_irq_enable
100035b4 g     F .text	000008d0 .hidden __subdf3
10007bb4 g     O .rwdata	00000008 alt_alarm_list
100051c8 g     F .text	0000005c _do_ctors
10004fb4 g     F .text	000000d8 close
1000422c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a52c04 	addi	r2,r2,-27472
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a52c04 	addi	r2,r2,-27472
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a5b617 	ldw	r2,-26920(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a5b617 	ldw	r2,-26920(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
10000238:	d6bee414 	ori	gp,gp,64400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10a48514 	ori	r2,r2,37396

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18e56c14 	ori	r3,r3,38320

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000422c0 	call	1000422c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00042ac0 	call	100042ac <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// can you even read

// our main function!!! this is where the magic happens
int main()
{
10000268:	defffa04 	addi	sp,sp,-24
1000026c:	dfc00515 	stw	ra,20(sp)
10000270:	df000415 	stw	fp,16(sp)
10000274:	dc000315 	stw	r16,12(sp)
10000278:	df000404 	addi	fp,sp,16
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00040400 	call	10004040 <srand>

	// assign these to 0 at start
	sameFruit = 0;
1000028c:	d025a215 	stw	zero,-27000(gp)
	comboFruit = 0;
10000290:	d025af15 	stw	zero,-26948(gp)

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000294:	e03ffc15 	stw	zero,-16(fp)
10000298:	00004306 	br	100003a8 <main+0x140>
	{
		veggieObject[i].xPosition = 0;
1000029c:	04040074 	movhi	r16,4097
100002a0:	84249c04 	addi	r16,r16,-28048
100002a4:	e0bffc17 	ldw	r2,-16(fp)
100002a8:	1009883a 	mov	r4,r2
100002ac:	01400904 	movi	r5,36
100002b0:	0002cf00 	call	10002cf0 <__mulsi3>
100002b4:	8085883a 	add	r2,r16,r2
100002b8:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002bc:	04040074 	movhi	r16,4097
100002c0:	84249c04 	addi	r16,r16,-28048
100002c4:	e0bffc17 	ldw	r2,-16(fp)
100002c8:	1009883a 	mov	r4,r2
100002cc:	01400904 	movi	r5,36
100002d0:	0002cf00 	call	10002cf0 <__mulsi3>
100002d4:	8085883a 	add	r2,r16,r2
100002d8:	10800104 	addi	r2,r2,4
100002dc:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002e0:	04040074 	movhi	r16,4097
100002e4:	84249c04 	addi	r16,r16,-28048
100002e8:	e0bffc17 	ldw	r2,-16(fp)
100002ec:	1009883a 	mov	r4,r2
100002f0:	01400904 	movi	r5,36
100002f4:	0002cf00 	call	10002cf0 <__mulsi3>
100002f8:	8085883a 	add	r2,r16,r2
100002fc:	10800204 	addi	r2,r2,8
10000300:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
10000304:	04040074 	movhi	r16,4097
10000308:	84249c04 	addi	r16,r16,-28048
1000030c:	e0bffc17 	ldw	r2,-16(fp)
10000310:	1009883a 	mov	r4,r2
10000314:	01400904 	movi	r5,36
10000318:	0002cf00 	call	10002cf0 <__mulsi3>
1000031c:	8085883a 	add	r2,r16,r2
10000320:	10800304 	addi	r2,r2,12
10000324:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000328:	04040074 	movhi	r16,4097
1000032c:	84249c04 	addi	r16,r16,-28048
10000330:	e0bffc17 	ldw	r2,-16(fp)
10000334:	1009883a 	mov	r4,r2
10000338:	01400904 	movi	r5,36
1000033c:	0002cf00 	call	10002cf0 <__mulsi3>
10000340:	8085883a 	add	r2,r16,r2
10000344:	10800404 	addi	r2,r2,16
10000348:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
1000034c:	04040074 	movhi	r16,4097
10000350:	84249c04 	addi	r16,r16,-28048
10000354:	e0bffc17 	ldw	r2,-16(fp)
10000358:	1009883a 	mov	r4,r2
1000035c:	01400904 	movi	r5,36
10000360:	0002cf00 	call	10002cf0 <__mulsi3>
10000364:	8085883a 	add	r2,r16,r2
10000368:	10800504 	addi	r2,r2,20
1000036c:	10000015 	stw	zero,0(r2)
10000370:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	84249c04 	addi	r16,r16,-28048
1000037c:	e0bffc17 	ldw	r2,-16(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	0002cf00 	call	10002cf0 <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800704 	addi	r2,r2,28
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
	sameFruit = 0;
	comboFruit = 0;

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
1000039c:	e0bffc17 	ldw	r2,-16(fp)
100003a0:	10800044 	addi	r2,r2,1
100003a4:	e0bffc15 	stw	r2,-16(fp)
100003a8:	e0bffc17 	ldw	r2,-16(fp)
100003ac:	10800410 	cmplti	r2,r2,16
100003b0:	103fba1e 	bne	r2,zero,1000029c <__alt_data_end+0xf800029c>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003b4:	00840074 	movhi	r2,4097
100003b8:	10a49c04 	addi	r2,r2,-28048
100003bc:	00c00044 	movi	r3,1
100003c0:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 0;
100003c4:	00840074 	movhi	r2,4097
100003c8:	10a49c04 	addi	r2,r2,-28048
100003cc:	10000015 	stw	zero,0(r2)
	veggieObject[0].yPosition = 0;
100003d0:	00840074 	movhi	r2,4097
100003d4:	10a49c04 	addi	r2,r2,-28048
100003d8:	10000115 	stw	zero,4(r2)
	veggieObject[0].objectType = 0;
100003dc:	00840074 	movhi	r2,4097
100003e0:	10a49c04 	addi	r2,r2,-28048
100003e4:	10000215 	stw	zero,8(r2)
	veggieObject[0].objectState = 7;
100003e8:	00840074 	movhi	r2,4097
100003ec:	10a49c04 	addi	r2,r2,-28048
100003f0:	00c001c4 	movi	r3,7
100003f4:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
100003f8:	00840074 	movhi	r2,4097
100003fc:	10a49c04 	addi	r2,r2,-28048
10000400:	00c00044 	movi	r3,1
10000404:	10c00415 	stw	r3,16(r2)

	// start out in the initial black menu
	while(cursorClicked == 0)
10000408:	00000206 	br	10000414 <main+0x1ac>
	{
		FPGAcommunicator();	// call this every time to update the FPGA
1000040c:	00017280 	call	10001728 <FPGAcommunicator>
		port2Unpackager();	// just run our unpackager
10000410:	0001d1c0 	call	10001d1c <port2Unpackager>
	veggieObject[0].objectType = 0;
	veggieObject[0].objectState = 7;
	veggieObject[0].packageType = 1;

	// start out in the initial black menu
	while(cursorClicked == 0)
10000414:	d0a5a617 	ldw	r2,-26984(gp)
10000418:	103ffc26 	beq	r2,zero,1000040c <__alt_data_end+0xf800040c>
		FPGAcommunicator();	// call this every time to update the FPGA
		port2Unpackager();	// just run our unpackager
	}

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000041c:	00804804 	movi	r2,288
10000420:	10800017 	ldw	r2,0(r2)
10000424:	e0bffd15 	stw	r2,-12(fp)
	unsigned long processorTime = processorStart;
10000428:	e0bffd17 	ldw	r2,-12(fp)
1000042c:	e0bffe15 	stw	r2,-8(fp)
	lastPhysixed = processorTime;
10000430:	e0bffe17 	ldw	r2,-8(fp)
10000434:	d0a5a315 	stw	r2,-26996(gp)
	lastSpawned = processorTime;
10000438:	e0bffe17 	ldw	r2,-8(fp)
1000043c:	d0a5a815 	stw	r2,-26976(gp)
	nextSpawnTime = processorTime;
10000440:	e0bffe17 	ldw	r2,-8(fp)
10000444:	d0a5ac15 	stw	r2,-26960(gp)
	lastDisintegrated = processorTime;
10000448:	e0bffe17 	ldw	r2,-8(fp)
1000044c:	d0a5a915 	stw	r2,-26972(gp)
	roundStart = 0;
10000450:	d025ae15 	stw	zero,-26952(gp)
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
10000454:	00806004 	movi	r2,384
10000458:	10800017 	ldw	r2,0(r2)
1000045c:	d0a5a515 	stw	r2,-26988(gp)
	yCursor = *to_sw_port4;
10000460:	00805c04 	movi	r2,368
10000464:	10800017 	ldw	r2,0(r2)
10000468:	d0a5a415 	stw	r2,-26992(gp)
	port2Unpackager();
1000046c:	0001d1c0 	call	10001d1c <port2Unpackager>

	while(1)	// game while loop
	{
		if(veggieObject[0].objectState == 0)	// DEBUG THinGY
10000470:	00840074 	movhi	r2,4097
10000474:	10a49c04 	addi	r2,r2,-28048
10000478:	10800317 	ldw	r2,12(r2)
1000047c:	1000141e 	bne	r2,zero,100004d0 <main+0x268>
		{
			if(key1)
10000480:	d0a5aa17 	ldw	r2,-26968(gp)
10000484:	10000526 	beq	r2,zero,1000049c <main+0x234>
			{
				veggieObject[0].objectState = 1;	// easy mode
10000488:	00840074 	movhi	r2,4097
1000048c:	10a49c04 	addi	r2,r2,-28048
10000490:	00c00044 	movi	r3,1
10000494:	10c00315 	stw	r3,12(r2)
10000498:	00000d06 	br	100004d0 <main+0x268>
			}
			else if(key2)
1000049c:	d0a5ad17 	ldw	r2,-26956(gp)
100004a0:	10000526 	beq	r2,zero,100004b8 <main+0x250>
			{
				veggieObject[0].objectState = 2;	// medium mode
100004a4:	00840074 	movhi	r2,4097
100004a8:	10a49c04 	addi	r2,r2,-28048
100004ac:	00c00084 	movi	r3,2
100004b0:	10c00315 	stw	r3,12(r2)
100004b4:	00000606 	br	100004d0 <main+0x268>
			}
			else if(key3)
100004b8:	d0a5ab17 	ldw	r2,-26964(gp)
100004bc:	10000426 	beq	r2,zero,100004d0 <main+0x268>
			{
				veggieObject[0].objectState = 3;	// hard mode
100004c0:	00840074 	movhi	r2,4097
100004c4:	10a49c04 	addi	r2,r2,-28048
100004c8:	00c000c4 	movi	r3,3
100004cc:	10c00315 	stw	r3,12(r2)
			}
		}

		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
100004d0:	00804804 	movi	r2,288
100004d4:	10800017 	ldw	r2,0(r2)
100004d8:	e0bffe15 	stw	r2,-8(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
100004dc:	e0fffe17 	ldw	r3,-8(fp)
100004e0:	e0bffd17 	ldw	r2,-12(fp)
100004e4:	1885c83a 	sub	r2,r3,r2
100004e8:	d0a5a115 	stw	r2,-27004(gp)
//		printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 5)	// greater than .05 seconds pass
100004ec:	d0e5a117 	ldw	r3,-27004(gp)
100004f0:	d0a5a317 	ldw	r2,-26996(gp)
100004f4:	1885c83a 	sub	r2,r3,r2
100004f8:	108001b0 	cmpltui	r2,r2,6
100004fc:	1000031e 	bne	r2,zero,1000050c <main+0x2a4>
		{
			physicsEngine();	// call our physics engine!
10000500:	00007480 	call	10000748 <physicsEngine>
			lastPhysixed = elapsedTime;
10000504:	d0a5a117 	ldw	r2,-27004(gp)
10000508:	d0a5a315 	stw	r2,-26996(gp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
1000050c:	d0e5a117 	ldw	r3,-27004(gp)
10000510:	d0a5a817 	ldw	r2,-26976(gp)
10000514:	1885c83a 	sub	r2,r3,r2
10000518:	d0e5ac17 	ldw	r3,-26960(gp)
1000051c:	18803b2e 	bgeu	r3,r2,1000060c <main+0x3a4>
		{
			// determine next spawn time based on level
			if(veggieObject[0].objectState == 1)	// easy mode spawn
10000520:	00840074 	movhi	r2,4097
10000524:	10a49c04 	addi	r2,r2,-28048
10000528:	10800317 	ldw	r2,12(r2)
1000052c:	10800058 	cmpnei	r2,r2,1
10000530:	10000d1e 	bne	r2,zero,10000568 <main+0x300>
			{
				spawningEngine(rand() % 5);
10000534:	00040580 	call	10004058 <rand>
10000538:	1009883a 	mov	r4,r2
1000053c:	01400144 	movi	r5,5
10000540:	0002c840 	call	10002c84 <__modsi3>
10000544:	1009883a 	mov	r4,r2
10000548:	0000b200 	call	10000b20 <spawningEngine>
				nextSpawnTime = (rand() % 50) + 150;
1000054c:	00040580 	call	10004058 <rand>
10000550:	1009883a 	mov	r4,r2
10000554:	01400c84 	movi	r5,50
10000558:	0002c840 	call	10002c84 <__modsi3>
1000055c:	10802584 	addi	r2,r2,150
10000560:	d0a5ac15 	stw	r2,-26960(gp)
10000564:	00002606 	br	10000600 <main+0x398>
			}
			else if(veggieObject[0].objectState == 2)	// medium mode
10000568:	00840074 	movhi	r2,4097
1000056c:	10a49c04 	addi	r2,r2,-28048
10000570:	10800317 	ldw	r2,12(r2)
10000574:	10800098 	cmpnei	r2,r2,2
10000578:	10000d1e 	bne	r2,zero,100005b0 <main+0x348>
			{
				spawningEngine(rand() % 7);
1000057c:	00040580 	call	10004058 <rand>
10000580:	1009883a 	mov	r4,r2
10000584:	014001c4 	movi	r5,7
10000588:	0002c840 	call	10002c84 <__modsi3>
1000058c:	1009883a 	mov	r4,r2
10000590:	0000b200 	call	10000b20 <spawningEngine>
				nextSpawnTime = (rand() % 75) + 100;
10000594:	00040580 	call	10004058 <rand>
10000598:	1009883a 	mov	r4,r2
1000059c:	014012c4 	movi	r5,75
100005a0:	0002c840 	call	10002c84 <__modsi3>
100005a4:	10801904 	addi	r2,r2,100
100005a8:	d0a5ac15 	stw	r2,-26960(gp)
100005ac:	00001406 	br	10000600 <main+0x398>
			}
			else if(veggieObject[0].objectState == 3)	// easy mode spawn
100005b0:	00840074 	movhi	r2,4097
100005b4:	10a49c04 	addi	r2,r2,-28048
100005b8:	10800317 	ldw	r2,12(r2)
100005bc:	108000d8 	cmpnei	r2,r2,3
100005c0:	10000d1e 	bne	r2,zero,100005f8 <main+0x390>
			{
				spawningEngine(rand() % 9);
100005c4:	00040580 	call	10004058 <rand>
100005c8:	1009883a 	mov	r4,r2
100005cc:	01400244 	movi	r5,9
100005d0:	0002c840 	call	10002c84 <__modsi3>
100005d4:	1009883a 	mov	r4,r2
100005d8:	0000b200 	call	10000b20 <spawningEngine>
				nextSpawnTime = (rand() % 100 + 50);		// hard mode
100005dc:	00040580 	call	10004058 <rand>
100005e0:	1009883a 	mov	r4,r2
100005e4:	01401904 	movi	r5,100
100005e8:	0002c840 	call	10002c84 <__modsi3>
100005ec:	10800c84 	addi	r2,r2,50
100005f0:	d0a5ac15 	stw	r2,-26960(gp)
100005f4:	00000206 	br	10000600 <main+0x398>
			}
			else
			{
				nextSpawnTime = 200;	// we're in another state. check occasionally
100005f8:	00803204 	movi	r2,200
100005fc:	d0a5ac15 	stw	r2,-26960(gp)
			}
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
			sameFruit = 0;	// reset this
10000600:	d025a215 	stw	zero,-27000(gp)
			lastSpawned = elapsedTime;
10000604:	d0a5a117 	ldw	r2,-27004(gp)
10000608:	d0a5a815 	stw	r2,-26976(gp)
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .2 sec
1000060c:	d0e5a117 	ldw	r3,-27004(gp)
10000610:	d0a5a917 	ldw	r2,-26972(gp)
10000614:	1885c83a 	sub	r2,r3,r2
10000618:	10800570 	cmpltui	r2,r2,21
1000061c:	1000031e 	bne	r2,zero,1000062c <main+0x3c4>
		{
			disintegrateEngine();	// call our spawning engine!
10000620:	00015200 	call	10001520 <disintegrateEngine>
			lastDisintegrated = elapsedTime;
10000624:	d0a5a117 	ldw	r2,-27004(gp)
10000628:	d0a5a915 	stw	r2,-26972(gp)
		}
	port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
1000062c:	0001d1c0 	call	10001d1c <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
10000630:	00017280 	call	10001728 <FPGAcommunicator>
	}
10000634:	003f8e06 	br	10000470 <__alt_data_end+0xf8000470>

10000638 <statusEngine>:
	return 0;
}

void statusEngine()
{
10000638:	defffe04 	addi	sp,sp,-8
1000063c:	dfc00115 	stw	ra,4(sp)
10000640:	df000015 	stw	fp,0(sp)
10000644:	d839883a 	mov	fp,sp
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
10000648:	00840074 	movhi	r2,4097
1000064c:	10a49c04 	addi	r2,r2,-28048
10000650:	10800317 	ldw	r2,12(r2)
10000654:	0080100e 	bge	zero,r2,10000698 <statusEngine+0x60>
10000658:	00840074 	movhi	r2,4097
1000065c:	10a49c04 	addi	r2,r2,-28048
10000660:	10800317 	ldw	r2,12(r2)
10000664:	10800108 	cmpgei	r2,r2,4
10000668:	10000b1e 	bne	r2,zero,10000698 <statusEngine+0x60>
	{
		// this means we're currently playing a round
		veggieObject[0].yPosition = ((elapsedTime - roundStart)/100);	// timer
1000066c:	d0e5a117 	ldw	r3,-27004(gp)
10000670:	d0a5ae17 	ldw	r2,-26952(gp)
10000674:	1885c83a 	sub	r2,r3,r2
10000678:	1009883a 	mov	r4,r2
1000067c:	01401904 	movi	r5,100
10000680:	0002ce00 	call	10002ce0 <__udivsi3>
10000684:	1007883a 	mov	r3,r2
10000688:	00840074 	movhi	r2,4097
1000068c:	10a49c04 	addi	r2,r2,-28048
10000690:	10c00115 	stw	r3,4(r2)
10000694:	00002706 	br	10000734 <statusEngine+0xfc>

	}
	else if(((elapsedTime - roundStart)/100) > 60)	// check if our timer ended
10000698:	d0e5a117 	ldw	r3,-27004(gp)
1000069c:	d0a5ae17 	ldw	r2,-26952(gp)
100006a0:	1885c83a 	sub	r2,r3,r2
100006a4:	1085f530 	cmpltui	r2,r2,6100
100006a8:	1000051e 	bne	r2,zero,100006c0 <statusEngine+0x88>
	{
		veggieObject[0].objectState = 4;
100006ac:	00840074 	movhi	r2,4097
100006b0:	10a49c04 	addi	r2,r2,-28048
100006b4:	00c00104 	movi	r3,4
100006b8:	10c00315 	stw	r3,12(r2)
100006bc:	00001d06 	br	10000734 <statusEngine+0xfc>
	}
	else if(((veggieObject[0].objectState == 2) || (veggieObject[0].objectState == 3)) && (veggieObject[0].objectType <= 0))
100006c0:	00840074 	movhi	r2,4097
100006c4:	10a49c04 	addi	r2,r2,-28048
100006c8:	10800317 	ldw	r2,12(r2)
100006cc:	108000a0 	cmpeqi	r2,r2,2
100006d0:	1000051e 	bne	r2,zero,100006e8 <statusEngine+0xb0>
100006d4:	00840074 	movhi	r2,4097
100006d8:	10a49c04 	addi	r2,r2,-28048
100006dc:	10800317 	ldw	r2,12(r2)
100006e0:	108000d8 	cmpnei	r2,r2,3
100006e4:	1000091e 	bne	r2,zero,1000070c <statusEngine+0xd4>
100006e8:	00840074 	movhi	r2,4097
100006ec:	10a49c04 	addi	r2,r2,-28048
100006f0:	10800217 	ldw	r2,8(r2)
100006f4:	00800516 	blt	zero,r2,1000070c <statusEngine+0xd4>
	{
		// this means we're game over :(
		veggieObject[0].objectState = 5;
100006f8:	00840074 	movhi	r2,4097
100006fc:	10a49c04 	addi	r2,r2,-28048
10000700:	00c00144 	movi	r3,5
10000704:	10c00315 	stw	r3,12(r2)
10000708:	00000a06 	br	10000734 <statusEngine+0xfc>
	}
	else if(veggieObject[0].objectState == 0)	// check if we gotta reset
1000070c:	00840074 	movhi	r2,4097
10000710:	10a49c04 	addi	r2,r2,-28048
10000714:	10800317 	ldw	r2,12(r2)
10000718:	1000061e 	bne	r2,zero,10000734 <statusEngine+0xfc>
	{
		veggieObject[0].xPosition = 0;
1000071c:	00840074 	movhi	r2,4097
10000720:	10a49c04 	addi	r2,r2,-28048
10000724:	10000015 	stw	zero,0(r2)
		veggieObject[0].yPosition = 0;
10000728:	00840074 	movhi	r2,4097
1000072c:	10a49c04 	addi	r2,r2,-28048
10000730:	10000115 	stw	zero,4(r2)
	}
}
10000734:	e037883a 	mov	sp,fp
10000738:	dfc00117 	ldw	ra,4(sp)
1000073c:	df000017 	ldw	fp,0(sp)
10000740:	dec00204 	addi	sp,sp,8
10000744:	f800283a 	ret

10000748 <physicsEngine>:

void physicsEngine()
{
10000748:	defffa04 	addi	sp,sp,-24
1000074c:	dfc00515 	stw	ra,20(sp)
10000750:	df000415 	stw	fp,16(sp)
10000754:	dc800315 	stw	r18,12(sp)
10000758:	dc400215 	stw	r17,8(sp)
1000075c:	dc000115 	stw	r16,4(sp)
10000760:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000764:	00800044 	movi	r2,1
10000768:	e0bffc15 	stw	r2,-16(fp)
1000076c:	0000e006 	br	10000af0 <physicsEngine+0x3a8>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000770:	04040074 	movhi	r16,4097
10000774:	84249c04 	addi	r16,r16,-28048
10000778:	e0bffc17 	ldw	r2,-16(fp)
1000077c:	1009883a 	mov	r4,r2
10000780:	01400904 	movi	r5,36
10000784:	0002cf00 	call	10002cf0 <__mulsi3>
10000788:	8085883a 	add	r2,r16,r2
1000078c:	10800304 	addi	r2,r2,12
10000790:	10800017 	ldw	r2,0(r2)
10000794:	1000d326 	beq	r2,zero,10000ae4 <physicsEngine+0x39c>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000798:	04040074 	movhi	r16,4097
1000079c:	84249c04 	addi	r16,r16,-28048
100007a0:	e0bffc17 	ldw	r2,-16(fp)
100007a4:	1009883a 	mov	r4,r2
100007a8:	01400904 	movi	r5,36
100007ac:	0002cf00 	call	10002cf0 <__mulsi3>
100007b0:	8085883a 	add	r2,r16,r2
100007b4:	10800017 	ldw	r2,0(r2)
100007b8:	1009883a 	mov	r4,r2
100007bc:	0003f0c0 	call	10003f0c <__floatsidf>
100007c0:	1023883a 	mov	r17,r2
100007c4:	1825883a 	mov	r18,r3
100007c8:	04040074 	movhi	r16,4097
100007cc:	84249c04 	addi	r16,r16,-28048
100007d0:	e0bffc17 	ldw	r2,-16(fp)
100007d4:	1009883a 	mov	r4,r2
100007d8:	01400904 	movi	r5,36
100007dc:	0002cf00 	call	10002cf0 <__mulsi3>
100007e0:	8085883a 	add	r2,r16,r2
100007e4:	11000504 	addi	r4,r2,20
100007e8:	20800017 	ldw	r2,0(r4)
100007ec:	20c00117 	ldw	r3,4(r4)
100007f0:	8809883a 	mov	r4,r17
100007f4:	900b883a 	mov	r5,r18
100007f8:	100d883a 	mov	r6,r2
100007fc:	180f883a 	mov	r7,r3
10000800:	0002d180 	call	10002d18 <__adddf3>
10000804:	1009883a 	mov	r4,r2
10000808:	180b883a 	mov	r5,r3
1000080c:	2005883a 	mov	r2,r4
10000810:	2807883a 	mov	r3,r5
10000814:	1009883a 	mov	r4,r2
10000818:	180b883a 	mov	r5,r3
1000081c:	0003e840 	call	10003e84 <__fixdfsi>
10000820:	1023883a 	mov	r17,r2
10000824:	04040074 	movhi	r16,4097
10000828:	84249c04 	addi	r16,r16,-28048
1000082c:	e0bffc17 	ldw	r2,-16(fp)
10000830:	1009883a 	mov	r4,r2
10000834:	01400904 	movi	r5,36
10000838:	0002cf00 	call	10002cf0 <__mulsi3>
1000083c:	8085883a 	add	r2,r16,r2
10000840:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000844:	04040074 	movhi	r16,4097
10000848:	84249c04 	addi	r16,r16,-28048
1000084c:	e0bffc17 	ldw	r2,-16(fp)
10000850:	1009883a 	mov	r4,r2
10000854:	01400904 	movi	r5,36
10000858:	0002cf00 	call	10002cf0 <__mulsi3>
1000085c:	8085883a 	add	r2,r16,r2
10000860:	10800104 	addi	r2,r2,4
10000864:	10800017 	ldw	r2,0(r2)
10000868:	1009883a 	mov	r4,r2
1000086c:	0003f0c0 	call	10003f0c <__floatsidf>
10000870:	1023883a 	mov	r17,r2
10000874:	1825883a 	mov	r18,r3
10000878:	04040074 	movhi	r16,4097
1000087c:	84249c04 	addi	r16,r16,-28048
10000880:	e0bffc17 	ldw	r2,-16(fp)
10000884:	1009883a 	mov	r4,r2
10000888:	01400904 	movi	r5,36
1000088c:	0002cf00 	call	10002cf0 <__mulsi3>
10000890:	8085883a 	add	r2,r16,r2
10000894:	11000704 	addi	r4,r2,28
10000898:	20800017 	ldw	r2,0(r4)
1000089c:	20c00117 	ldw	r3,4(r4)
100008a0:	8809883a 	mov	r4,r17
100008a4:	900b883a 	mov	r5,r18
100008a8:	100d883a 	mov	r6,r2
100008ac:	180f883a 	mov	r7,r3
100008b0:	0002d180 	call	10002d18 <__adddf3>
100008b4:	1009883a 	mov	r4,r2
100008b8:	180b883a 	mov	r5,r3
100008bc:	2005883a 	mov	r2,r4
100008c0:	2807883a 	mov	r3,r5
100008c4:	1009883a 	mov	r4,r2
100008c8:	180b883a 	mov	r5,r3
100008cc:	0003e840 	call	10003e84 <__fixdfsi>
100008d0:	1023883a 	mov	r17,r2
100008d4:	04040074 	movhi	r16,4097
100008d8:	84249c04 	addi	r16,r16,-28048
100008dc:	e0bffc17 	ldw	r2,-16(fp)
100008e0:	1009883a 	mov	r4,r2
100008e4:	01400904 	movi	r5,36
100008e8:	0002cf00 	call	10002cf0 <__mulsi3>
100008ec:	8085883a 	add	r2,r16,r2
100008f0:	10800104 	addi	r2,r2,4
100008f4:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 5;
100008f8:	04040074 	movhi	r16,4097
100008fc:	84249c04 	addi	r16,r16,-28048
10000900:	e0bffc17 	ldw	r2,-16(fp)
10000904:	1009883a 	mov	r4,r2
10000908:	01400904 	movi	r5,36
1000090c:	0002cf00 	call	10002cf0 <__mulsi3>
10000910:	8085883a 	add	r2,r16,r2
10000914:	11000704 	addi	r4,r2,28
10000918:	20800017 	ldw	r2,0(r4)
1000091c:	20c00117 	ldw	r3,4(r4)
10000920:	1009883a 	mov	r4,r2
10000924:	180b883a 	mov	r5,r3
10000928:	000d883a 	mov	r6,zero
1000092c:	01d00534 	movhi	r7,16404
10000930:	00035b40 	call	100035b4 <__subdf3>
10000934:	1009883a 	mov	r4,r2
10000938:	180b883a 	mov	r5,r3
1000093c:	2021883a 	mov	r16,r4
10000940:	2823883a 	mov	r17,r5
10000944:	04840074 	movhi	r18,4097
10000948:	94a49c04 	addi	r18,r18,-28048
1000094c:	e0bffc17 	ldw	r2,-16(fp)
10000950:	1009883a 	mov	r4,r2
10000954:	01400904 	movi	r5,36
10000958:	0002cf00 	call	10002cf0 <__mulsi3>
1000095c:	9085883a 	add	r2,r18,r2
10000960:	10800704 	addi	r2,r2,28
10000964:	14000015 	stw	r16,0(r2)
10000968:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
1000096c:	04040074 	movhi	r16,4097
10000970:	84249c04 	addi	r16,r16,-28048
10000974:	e0bffc17 	ldw	r2,-16(fp)
10000978:	1009883a 	mov	r4,r2
1000097c:	01400904 	movi	r5,36
10000980:	0002cf00 	call	10002cf0 <__mulsi3>
10000984:	8085883a 	add	r2,r16,r2
10000988:	10800104 	addi	r2,r2,4
1000098c:	10800017 	ldw	r2,0(r2)
10000990:	10001316 	blt	r2,zero,100009e0 <physicsEngine+0x298>
10000994:	04040074 	movhi	r16,4097
10000998:	84249c04 	addi	r16,r16,-28048
1000099c:	e0bffc17 	ldw	r2,-16(fp)
100009a0:	1009883a 	mov	r4,r2
100009a4:	01400904 	movi	r5,36
100009a8:	0002cf00 	call	10002cf0 <__mulsi3>
100009ac:	8085883a 	add	r2,r16,r2
100009b0:	10800017 	ldw	r2,0(r2)
100009b4:	10000a16 	blt	r2,zero,100009e0 <physicsEngine+0x298>
100009b8:	04040074 	movhi	r16,4097
100009bc:	84249c04 	addi	r16,r16,-28048
100009c0:	e0bffc17 	ldw	r2,-16(fp)
100009c4:	1009883a 	mov	r4,r2
100009c8:	01400904 	movi	r5,36
100009cc:	0002cf00 	call	10002cf0 <__mulsi3>
100009d0:	8085883a 	add	r2,r16,r2
100009d4:	10800017 	ldw	r2,0(r2)
100009d8:	1080a050 	cmplti	r2,r2,641
100009dc:	1000411e 	bne	r2,zero,10000ae4 <physicsEngine+0x39c>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
100009e0:	04040074 	movhi	r16,4097
100009e4:	84249c04 	addi	r16,r16,-28048
100009e8:	e0bffc17 	ldw	r2,-16(fp)
100009ec:	1009883a 	mov	r4,r2
100009f0:	01400904 	movi	r5,36
100009f4:	0002cf00 	call	10002cf0 <__mulsi3>
100009f8:	8085883a 	add	r2,r16,r2
100009fc:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000a00:	04040074 	movhi	r16,4097
10000a04:	84249c04 	addi	r16,r16,-28048
10000a08:	e0bffc17 	ldw	r2,-16(fp)
10000a0c:	1009883a 	mov	r4,r2
10000a10:	01400904 	movi	r5,36
10000a14:	0002cf00 	call	10002cf0 <__mulsi3>
10000a18:	8085883a 	add	r2,r16,r2
10000a1c:	10800104 	addi	r2,r2,4
10000a20:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000a24:	04040074 	movhi	r16,4097
10000a28:	84249c04 	addi	r16,r16,-28048
10000a2c:	e0bffc17 	ldw	r2,-16(fp)
10000a30:	1009883a 	mov	r4,r2
10000a34:	01400904 	movi	r5,36
10000a38:	0002cf00 	call	10002cf0 <__mulsi3>
10000a3c:	8085883a 	add	r2,r16,r2
10000a40:	10800204 	addi	r2,r2,8
10000a44:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000a48:	04040074 	movhi	r16,4097
10000a4c:	84249c04 	addi	r16,r16,-28048
10000a50:	e0bffc17 	ldw	r2,-16(fp)
10000a54:	1009883a 	mov	r4,r2
10000a58:	01400904 	movi	r5,36
10000a5c:	0002cf00 	call	10002cf0 <__mulsi3>
10000a60:	8085883a 	add	r2,r16,r2
10000a64:	10800304 	addi	r2,r2,12
10000a68:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000a6c:	04040074 	movhi	r16,4097
10000a70:	84249c04 	addi	r16,r16,-28048
10000a74:	e0bffc17 	ldw	r2,-16(fp)
10000a78:	1009883a 	mov	r4,r2
10000a7c:	01400904 	movi	r5,36
10000a80:	0002cf00 	call	10002cf0 <__mulsi3>
10000a84:	8085883a 	add	r2,r16,r2
10000a88:	10800504 	addi	r2,r2,20
10000a8c:	10000015 	stw	zero,0(r2)
10000a90:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000a94:	04040074 	movhi	r16,4097
10000a98:	84249c04 	addi	r16,r16,-28048
10000a9c:	e0bffc17 	ldw	r2,-16(fp)
10000aa0:	1009883a 	mov	r4,r2
10000aa4:	01400904 	movi	r5,36
10000aa8:	0002cf00 	call	10002cf0 <__mulsi3>
10000aac:	8085883a 	add	r2,r16,r2
10000ab0:	10800704 	addi	r2,r2,28
10000ab4:	10000015 	stw	zero,0(r2)
10000ab8:	10000115 	stw	zero,4(r2)

				// reduce score!
				if(i<14)
10000abc:	e0bffc17 	ldw	r2,-16(fp)
10000ac0:	10800388 	cmpgei	r2,r2,14
10000ac4:	1000071e 	bne	r2,zero,10000ae4 <physicsEngine+0x39c>
				{
					veggieObject[0].xPosition = veggieObject[0].xPosition - 100;
10000ac8:	00840074 	movhi	r2,4097
10000acc:	10a49c04 	addi	r2,r2,-28048
10000ad0:	10800017 	ldw	r2,0(r2)
10000ad4:	10ffe704 	addi	r3,r2,-100
10000ad8:	00840074 	movhi	r2,4097
10000adc:	10a49c04 	addi	r2,r2,-28048
10000ae0:	10c00015 	stw	r3,0(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000ae4:	e0bffc17 	ldw	r2,-16(fp)
10000ae8:	10800044 	addi	r2,r2,1
10000aec:	e0bffc15 	stw	r2,-16(fp)
10000af0:	e0bffc17 	ldw	r2,-16(fp)
10000af4:	10800410 	cmplti	r2,r2,16
10000af8:	103f1d1e 	bne	r2,zero,10000770 <__alt_data_end+0xf8000770>
				}
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000afc:	0001883a 	nop
}
10000b00:	e6fffd04 	addi	sp,fp,-12
10000b04:	dfc00417 	ldw	ra,16(sp)
10000b08:	df000317 	ldw	fp,12(sp)
10000b0c:	dc800217 	ldw	r18,8(sp)
10000b10:	dc400117 	ldw	r17,4(sp)
10000b14:	dc000017 	ldw	r16,0(sp)
10000b18:	dec00504 	addi	sp,sp,20
10000b1c:	f800283a 	ret

10000b20 <spawningEngine>:

void spawningEngine(int pattern)
{
10000b20:	deffed04 	addi	sp,sp,-76
10000b24:	dfc01215 	stw	ra,72(sp)
10000b28:	df001115 	stw	fp,68(sp)
10000b2c:	dc401015 	stw	r17,64(sp)
10000b30:	dc000f15 	stw	r16,60(sp)
10000b34:	df001104 	addi	fp,sp,68
10000b38:	e13ffd15 	stw	r4,-12(fp)
	if(pattern == 0)	// one pattern will have us skip a spawn...caus whatev
10000b3c:	e0bffd17 	ldw	r2,-12(fp)
10000b40:	1000011e 	bne	r2,zero,10000b48 <spawningEngine+0x28>
	{
		return;
10000b44:	00015706 	br	100010a4 <spawningEngine+0x584>
	}
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
10000b48:	e0bffd17 	ldw	r2,-12(fp)
10000b4c:	108001e0 	cmpeqi	r2,r2,7
10000b50:	1000031e 	bne	r2,zero,10000b60 <spawningEngine+0x40>
10000b54:	e0bffd17 	ldw	r2,-12(fp)
10000b58:	10800258 	cmpnei	r2,r2,9
10000b5c:	10008f1e 	bne	r2,zero,10000d9c <spawningEngine+0x27c>
	{
		if((rand() % 3) == 1)	// one last chance to not bomb this!
10000b60:	00040580 	call	10004058 <rand>
10000b64:	1009883a 	mov	r4,r2
10000b68:	014000c4 	movi	r5,3
10000b6c:	0002c840 	call	10002c84 <__modsi3>
10000b70:	10800058 	cmpnei	r2,r2,1
10000b74:	1000891e 	bne	r2,zero,10000d9c <spawningEngine+0x27c>
		{
			int i;
			for(i=14;i<16;i++)
10000b78:	00800384 	movi	r2,14
10000b7c:	e0bfef15 	stw	r2,-68(fp)
10000b80:	00008306 	br	10000d90 <spawningEngine+0x270>
			{
				if(veggieObject[i].objectState == 0)	// if one doesn't exist, go!
10000b84:	04040074 	movhi	r16,4097
10000b88:	84249c04 	addi	r16,r16,-28048
10000b8c:	e0bfef17 	ldw	r2,-68(fp)
10000b90:	1009883a 	mov	r4,r2
10000b94:	01400904 	movi	r5,36
10000b98:	0002cf00 	call	10002cf0 <__mulsi3>
10000b9c:	8085883a 	add	r2,r16,r2
10000ba0:	10800304 	addi	r2,r2,12
10000ba4:	10800017 	ldw	r2,0(r2)
10000ba8:	1000761e 	bne	r2,zero,10000d84 <spawningEngine+0x264>
				{
					unsigned int randomX;	// x coordinate on bottom of screen
					double randomSpeedY, randomSpeedX;	// starting velocity

					// RANDOM GENERATION!!
					randomX = (rand() % 540) + 50;
10000bac:	00040580 	call	10004058 <rand>
10000bb0:	1009883a 	mov	r4,r2
10000bb4:	01408704 	movi	r5,540
10000bb8:	0002c840 	call	10002c84 <__modsi3>
10000bbc:	10800c84 	addi	r2,r2,50
10000bc0:	e0bff715 	stw	r2,-36(fp)
					randomSpeedY = (rand() % 22) + 45;
10000bc4:	00040580 	call	10004058 <rand>
10000bc8:	1009883a 	mov	r4,r2
10000bcc:	01400584 	movi	r5,22
10000bd0:	0002c840 	call	10002c84 <__modsi3>
10000bd4:	10800b44 	addi	r2,r2,45
10000bd8:	1009883a 	mov	r4,r2
10000bdc:	0003f0c0 	call	10003f0c <__floatsidf>
10000be0:	1009883a 	mov	r4,r2
10000be4:	180b883a 	mov	r5,r3
10000be8:	e13ff815 	stw	r4,-32(fp)
10000bec:	e17ff915 	stw	r5,-28(fp)
					randomSpeedX = (rand() % 40) - 20;
10000bf0:	00040580 	call	10004058 <rand>
10000bf4:	1009883a 	mov	r4,r2
10000bf8:	01400a04 	movi	r5,40
10000bfc:	0002c840 	call	10002c84 <__modsi3>
10000c00:	10bffb04 	addi	r2,r2,-20
10000c04:	1009883a 	mov	r4,r2
10000c08:	0003f0c0 	call	10003f0c <__floatsidf>
10000c0c:	1009883a 	mov	r4,r2
10000c10:	180b883a 	mov	r5,r3
10000c14:	e13ff015 	stw	r4,-64(fp)
10000c18:	e17ff115 	stw	r5,-60(fp)

					// make sure we aren't throwing them out the edges
					if (randomX < 100)
10000c1c:	e0bff717 	ldw	r2,-36(fp)
10000c20:	10801928 	cmpgeui	r2,r2,100
10000c24:	10000b1e 	bne	r2,zero,10000c54 <spawningEngine+0x134>
					{
						randomSpeedX = (rand() % 40);
10000c28:	00040580 	call	10004058 <rand>
10000c2c:	1009883a 	mov	r4,r2
10000c30:	01400a04 	movi	r5,40
10000c34:	0002c840 	call	10002c84 <__modsi3>
10000c38:	1009883a 	mov	r4,r2
10000c3c:	0003f0c0 	call	10003f0c <__floatsidf>
10000c40:	1009883a 	mov	r4,r2
10000c44:	180b883a 	mov	r5,r3
10000c48:	e13ff015 	stw	r4,-64(fp)
10000c4c:	e17ff115 	stw	r5,-60(fp)
10000c50:	00000e06 	br	10000c8c <spawningEngine+0x16c>
					}
					else if (randomX > 540)
10000c54:	e0bff717 	ldw	r2,-36(fp)
10000c58:	10808770 	cmpltui	r2,r2,541
10000c5c:	10000b1e 	bne	r2,zero,10000c8c <spawningEngine+0x16c>
					{
						randomSpeedX = (rand() % 40) - 40;
10000c60:	00040580 	call	10004058 <rand>
10000c64:	1009883a 	mov	r4,r2
10000c68:	01400a04 	movi	r5,40
10000c6c:	0002c840 	call	10002c84 <__modsi3>
10000c70:	10bff604 	addi	r2,r2,-40
10000c74:	1009883a 	mov	r4,r2
10000c78:	0003f0c0 	call	10003f0c <__floatsidf>
10000c7c:	1009883a 	mov	r4,r2
10000c80:	180b883a 	mov	r5,r3
10000c84:	e13ff015 	stw	r4,-64(fp)
10000c88:	e17ff115 	stw	r5,-60(fp)
					}

					// now let's store these
					veggieObject[i].xPosition = randomX;
10000c8c:	e47ff717 	ldw	r17,-36(fp)
10000c90:	04040074 	movhi	r16,4097
10000c94:	84249c04 	addi	r16,r16,-28048
10000c98:	e0bfef17 	ldw	r2,-68(fp)
10000c9c:	1009883a 	mov	r4,r2
10000ca0:	01400904 	movi	r5,36
10000ca4:	0002cf00 	call	10002cf0 <__mulsi3>
10000ca8:	8085883a 	add	r2,r16,r2
10000cac:	14400015 	stw	r17,0(r2)
					veggieObject[i].yPosition = 0;
10000cb0:	04040074 	movhi	r16,4097
10000cb4:	84249c04 	addi	r16,r16,-28048
10000cb8:	e0bfef17 	ldw	r2,-68(fp)
10000cbc:	1009883a 	mov	r4,r2
10000cc0:	01400904 	movi	r5,36
10000cc4:	0002cf00 	call	10002cf0 <__mulsi3>
10000cc8:	8085883a 	add	r2,r16,r2
10000ccc:	10800104 	addi	r2,r2,4
10000cd0:	10000015 	stw	zero,0(r2)
					veggieObject[i].objectType = 0;
10000cd4:	04040074 	movhi	r16,4097
10000cd8:	84249c04 	addi	r16,r16,-28048
10000cdc:	e0bfef17 	ldw	r2,-68(fp)
10000ce0:	1009883a 	mov	r4,r2
10000ce4:	01400904 	movi	r5,36
10000ce8:	0002cf00 	call	10002cf0 <__mulsi3>
10000cec:	8085883a 	add	r2,r16,r2
10000cf0:	10800204 	addi	r2,r2,8
10000cf4:	10000015 	stw	zero,0(r2)
					veggieObject[i].xVelocity = randomSpeedX;
10000cf8:	04040074 	movhi	r16,4097
10000cfc:	84249c04 	addi	r16,r16,-28048
10000d00:	e0bfef17 	ldw	r2,-68(fp)
10000d04:	1009883a 	mov	r4,r2
10000d08:	01400904 	movi	r5,36
10000d0c:	0002cf00 	call	10002cf0 <__mulsi3>
10000d10:	8085883a 	add	r2,r16,r2
10000d14:	10800504 	addi	r2,r2,20
10000d18:	e0fff017 	ldw	r3,-64(fp)
10000d1c:	10c00015 	stw	r3,0(r2)
10000d20:	e0fff117 	ldw	r3,-60(fp)
10000d24:	10c00115 	stw	r3,4(r2)
					veggieObject[i].yVelocity = randomSpeedY;
10000d28:	04040074 	movhi	r16,4097
10000d2c:	84249c04 	addi	r16,r16,-28048
10000d30:	e0bfef17 	ldw	r2,-68(fp)
10000d34:	1009883a 	mov	r4,r2
10000d38:	01400904 	movi	r5,36
10000d3c:	0002cf00 	call	10002cf0 <__mulsi3>
10000d40:	8085883a 	add	r2,r16,r2
10000d44:	10800704 	addi	r2,r2,28
10000d48:	e0fff817 	ldw	r3,-32(fp)
10000d4c:	10c00015 	stw	r3,0(r2)
10000d50:	e0fff917 	ldw	r3,-28(fp)
10000d54:	10c00115 	stw	r3,4(r2)
					veggieObject[i].objectState = 1;	// reserve this slot
10000d58:	04040074 	movhi	r16,4097
10000d5c:	84249c04 	addi	r16,r16,-28048
10000d60:	e0bfef17 	ldw	r2,-68(fp)
10000d64:	1009883a 	mov	r4,r2
10000d68:	01400904 	movi	r5,36
10000d6c:	0002cf00 	call	10002cf0 <__mulsi3>
10000d70:	8085883a 	add	r2,r16,r2
10000d74:	10800304 	addi	r2,r2,12
10000d78:	00c00044 	movi	r3,1
10000d7c:	10c00015 	stw	r3,0(r2)

					return; // our evillness is done!!!
10000d80:	0000c806 	br	100010a4 <spawningEngine+0x584>
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
	{
		if((rand() % 3) == 1)	// one last chance to not bomb this!
		{
			int i;
			for(i=14;i<16;i++)
10000d84:	e0bfef17 	ldw	r2,-68(fp)
10000d88:	10800044 	addi	r2,r2,1
10000d8c:	e0bfef15 	stw	r2,-68(fp)
10000d90:	e0bfef17 	ldw	r2,-68(fp)
10000d94:	10800410 	cmplti	r2,r2,16
10000d98:	103f7a1e 	bne	r2,zero,10000b84 <__alt_data_end+0xf8000b84>
				}
			}
		}
	}
	int i;
	for(i=1; i<14; i++)	// let's go through our veggies and see which ones are free
10000d9c:	00800044 	movi	r2,1
10000da0:	e0bff215 	stw	r2,-56(fp)
10000da4:	0000bb06 	br	10001094 <spawningEngine+0x574>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000da8:	04040074 	movhi	r16,4097
10000dac:	84249c04 	addi	r16,r16,-28048
10000db0:	e0bff217 	ldw	r2,-56(fp)
10000db4:	1009883a 	mov	r4,r2
10000db8:	01400904 	movi	r5,36
10000dbc:	0002cf00 	call	10002cf0 <__mulsi3>
10000dc0:	8085883a 	add	r2,r16,r2
10000dc4:	10800304 	addi	r2,r2,12
10000dc8:	10800017 	ldw	r2,0(r2)
10000dcc:	1000ae1e 	bne	r2,zero,10001088 <spawningEngine+0x568>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			int randomType;		// type of fruit that's spawned
			double randomSpeedY, randomSpeedX;	// starting velocity

			veggieObject[i].objectState = 1;	// reserve this slot
10000dd0:	04040074 	movhi	r16,4097
10000dd4:	84249c04 	addi	r16,r16,-28048
10000dd8:	e0bff217 	ldw	r2,-56(fp)
10000ddc:	1009883a 	mov	r4,r2
10000de0:	01400904 	movi	r5,36
10000de4:	0002cf00 	call	10002cf0 <__mulsi3>
10000de8:	8085883a 	add	r2,r16,r2
10000dec:	10800304 	addi	r2,r2,12
10000df0:	00c00044 	movi	r3,1
10000df4:	10c00015 	stw	r3,0(r2)

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
10000df8:	e0bffd17 	ldw	r2,-12(fp)
10000dfc:	10800150 	cmplti	r2,r2,5
10000e00:	1000241e 	bne	r2,zero,10000e94 <spawningEngine+0x374>
			{
				if(((rand() % 2) == 1)&&(sameFruit == 0))
10000e04:	00040580 	call	10004058 <rand>
10000e08:	1007883a 	mov	r3,r2
10000e0c:	00a00034 	movhi	r2,32768
10000e10:	10800044 	addi	r2,r2,1
10000e14:	1884703a 	and	r2,r3,r2
10000e18:	1000040e 	bge	r2,zero,10000e2c <spawningEngine+0x30c>
10000e1c:	10bfffc4 	addi	r2,r2,-1
10000e20:	00ffff84 	movi	r3,-2
10000e24:	10c4b03a 	or	r2,r2,r3
10000e28:	10800044 	addi	r2,r2,1
10000e2c:	10800058 	cmpnei	r2,r2,1
10000e30:	10000d1e 	bne	r2,zero,10000e68 <spawningEngine+0x348>
10000e34:	d0a5a217 	ldw	r2,-27000(gp)
10000e38:	10000b1e 	bne	r2,zero,10000e68 <spawningEngine+0x348>
				{
					sameFruit = (rand() % 8);
10000e3c:	00040580 	call	10004058 <rand>
10000e40:	1007883a 	mov	r3,r2
10000e44:	00a00034 	movhi	r2,32768
10000e48:	108001c4 	addi	r2,r2,7
10000e4c:	1884703a 	and	r2,r3,r2
10000e50:	1000040e 	bge	r2,zero,10000e64 <spawningEngine+0x344>
10000e54:	10bfffc4 	addi	r2,r2,-1
10000e58:	00fffe04 	movi	r3,-8
10000e5c:	10c4b03a 	or	r2,r2,r3
10000e60:	10800044 	addi	r2,r2,1
10000e64:	d0a5a215 	stw	r2,-27000(gp)
				}
				int j;
				for(j=4; j<pattern; j++)
10000e68:	00800104 	movi	r2,4
10000e6c:	e0bff615 	stw	r2,-40(fp)
10000e70:	00000506 	br	10000e88 <spawningEngine+0x368>
				{
					spawningEngine(1);	// call ourselves to spawn another!
10000e74:	01000044 	movi	r4,1
10000e78:	0000b200 	call	10000b20 <spawningEngine>
				if(((rand() % 2) == 1)&&(sameFruit == 0))
				{
					sameFruit = (rand() % 8);
				}
				int j;
				for(j=4; j<pattern; j++)
10000e7c:	e0bff617 	ldw	r2,-40(fp)
10000e80:	10800044 	addi	r2,r2,1
10000e84:	e0bff615 	stw	r2,-40(fp)
10000e88:	e0fff617 	ldw	r3,-40(fp)
10000e8c:	e0bffd17 	ldw	r2,-12(fp)
10000e90:	18bff816 	blt	r3,r2,10000e74 <__alt_data_end+0xf8000e74>
					spawningEngine(1);	// call ourselves to spawn another!
				}
			}

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10000e94:	00040580 	call	10004058 <rand>
10000e98:	1009883a 	mov	r4,r2
10000e9c:	01408704 	movi	r5,540
10000ea0:	0002c840 	call	10002c84 <__modsi3>
10000ea4:	10800c84 	addi	r2,r2,50
10000ea8:	e0bffa15 	stw	r2,-24(fp)
			randomSpeedY = (rand() % 22) + 45;
10000eac:	00040580 	call	10004058 <rand>
10000eb0:	1009883a 	mov	r4,r2
10000eb4:	01400584 	movi	r5,22
10000eb8:	0002c840 	call	10002c84 <__modsi3>
10000ebc:	10800b44 	addi	r2,r2,45
10000ec0:	1009883a 	mov	r4,r2
10000ec4:	0003f0c0 	call	10003f0c <__floatsidf>
10000ec8:	1009883a 	mov	r4,r2
10000ecc:	180b883a 	mov	r5,r3
10000ed0:	e13ffb15 	stw	r4,-20(fp)
10000ed4:	e17ffc15 	stw	r5,-16(fp)
			randomSpeedX = (rand() % 40) - 20;
10000ed8:	00040580 	call	10004058 <rand>
10000edc:	1009883a 	mov	r4,r2
10000ee0:	01400a04 	movi	r5,40
10000ee4:	0002c840 	call	10002c84 <__modsi3>
10000ee8:	10bffb04 	addi	r2,r2,-20
10000eec:	1009883a 	mov	r4,r2
10000ef0:	0003f0c0 	call	10003f0c <__floatsidf>
10000ef4:	1009883a 	mov	r4,r2
10000ef8:	180b883a 	mov	r5,r3
10000efc:	e13ff415 	stw	r4,-48(fp)
10000f00:	e17ff515 	stw	r5,-44(fp)

			// check if we are spawning samefruit
			if(sameFruit == 0)
10000f04:	d0a5a217 	ldw	r2,-27000(gp)
10000f08:	10000c1e 	bne	r2,zero,10000f3c <spawningEngine+0x41c>
			{
				randomType = (rand() % 8);
10000f0c:	00040580 	call	10004058 <rand>
10000f10:	1007883a 	mov	r3,r2
10000f14:	00a00034 	movhi	r2,32768
10000f18:	108001c4 	addi	r2,r2,7
10000f1c:	1884703a 	and	r2,r3,r2
10000f20:	1000040e 	bge	r2,zero,10000f34 <spawningEngine+0x414>
10000f24:	10bfffc4 	addi	r2,r2,-1
10000f28:	00fffe04 	movi	r3,-8
10000f2c:	10c4b03a 	or	r2,r2,r3
10000f30:	10800044 	addi	r2,r2,1
10000f34:	e0bff315 	stw	r2,-52(fp)
10000f38:	00000206 	br	10000f44 <spawningEngine+0x424>
			}
			else
			{
				randomType = sameFruit;
10000f3c:	d0a5a217 	ldw	r2,-27000(gp)
10000f40:	e0bff315 	stw	r2,-52(fp)
			}

			// make sure we aren't throwing them out the edges
			if (randomX < 100)
10000f44:	e0bffa17 	ldw	r2,-24(fp)
10000f48:	10801928 	cmpgeui	r2,r2,100
10000f4c:	10000b1e 	bne	r2,zero,10000f7c <spawningEngine+0x45c>
			{
				randomSpeedX = (rand() % 40);
10000f50:	00040580 	call	10004058 <rand>
10000f54:	1009883a 	mov	r4,r2
10000f58:	01400a04 	movi	r5,40
10000f5c:	0002c840 	call	10002c84 <__modsi3>
10000f60:	1009883a 	mov	r4,r2
10000f64:	0003f0c0 	call	10003f0c <__floatsidf>
10000f68:	1009883a 	mov	r4,r2
10000f6c:	180b883a 	mov	r5,r3
10000f70:	e13ff415 	stw	r4,-48(fp)
10000f74:	e17ff515 	stw	r5,-44(fp)
10000f78:	00000e06 	br	10000fb4 <spawningEngine+0x494>
			}
			else if (randomX > 540)
10000f7c:	e0bffa17 	ldw	r2,-24(fp)
10000f80:	10808770 	cmpltui	r2,r2,541
10000f84:	10000b1e 	bne	r2,zero,10000fb4 <spawningEngine+0x494>
			{
				randomSpeedX = (rand() % 40) - 40;
10000f88:	00040580 	call	10004058 <rand>
10000f8c:	1009883a 	mov	r4,r2
10000f90:	01400a04 	movi	r5,40
10000f94:	0002c840 	call	10002c84 <__modsi3>
10000f98:	10bff604 	addi	r2,r2,-40
10000f9c:	1009883a 	mov	r4,r2
10000fa0:	0003f0c0 	call	10003f0c <__floatsidf>
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	180b883a 	mov	r5,r3
10000fac:	e13ff415 	stw	r4,-48(fp)
10000fb0:	e17ff515 	stw	r5,-44(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000fb4:	e47ffa17 	ldw	r17,-24(fp)
10000fb8:	04040074 	movhi	r16,4097
10000fbc:	84249c04 	addi	r16,r16,-28048
10000fc0:	e0bff217 	ldw	r2,-56(fp)
10000fc4:	1009883a 	mov	r4,r2
10000fc8:	01400904 	movi	r5,36
10000fcc:	0002cf00 	call	10002cf0 <__mulsi3>
10000fd0:	8085883a 	add	r2,r16,r2
10000fd4:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000fd8:	04040074 	movhi	r16,4097
10000fdc:	84249c04 	addi	r16,r16,-28048
10000fe0:	e0bff217 	ldw	r2,-56(fp)
10000fe4:	1009883a 	mov	r4,r2
10000fe8:	01400904 	movi	r5,36
10000fec:	0002cf00 	call	10002cf0 <__mulsi3>
10000ff0:	8085883a 	add	r2,r16,r2
10000ff4:	10800104 	addi	r2,r2,4
10000ff8:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000ffc:	04040074 	movhi	r16,4097
10001000:	84249c04 	addi	r16,r16,-28048
10001004:	e0bff217 	ldw	r2,-56(fp)
10001008:	1009883a 	mov	r4,r2
1000100c:	01400904 	movi	r5,36
10001010:	0002cf00 	call	10002cf0 <__mulsi3>
10001014:	8085883a 	add	r2,r16,r2
10001018:	10800204 	addi	r2,r2,8
1000101c:	e0fff317 	ldw	r3,-52(fp)
10001020:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10001024:	04040074 	movhi	r16,4097
10001028:	84249c04 	addi	r16,r16,-28048
1000102c:	e0bff217 	ldw	r2,-56(fp)
10001030:	1009883a 	mov	r4,r2
10001034:	01400904 	movi	r5,36
10001038:	0002cf00 	call	10002cf0 <__mulsi3>
1000103c:	8085883a 	add	r2,r16,r2
10001040:	10800504 	addi	r2,r2,20
10001044:	e0fff417 	ldw	r3,-48(fp)
10001048:	10c00015 	stw	r3,0(r2)
1000104c:	e0fff517 	ldw	r3,-44(fp)
10001050:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10001054:	04040074 	movhi	r16,4097
10001058:	84249c04 	addi	r16,r16,-28048
1000105c:	e0bff217 	ldw	r2,-56(fp)
10001060:	1009883a 	mov	r4,r2
10001064:	01400904 	movi	r5,36
10001068:	0002cf00 	call	10002cf0 <__mulsi3>
1000106c:	8085883a 	add	r2,r16,r2
10001070:	10800704 	addi	r2,r2,28
10001074:	e0fffb17 	ldw	r3,-20(fp)
10001078:	10c00015 	stw	r3,0(r2)
1000107c:	e0fffc17 	ldw	r3,-16(fp)
10001080:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			return;
10001084:	00000706 	br	100010a4 <spawningEngine+0x584>
				}
			}
		}
	}
	int i;
	for(i=1; i<14; i++)	// let's go through our veggies and see which ones are free
10001088:	e0bff217 	ldw	r2,-56(fp)
1000108c:	10800044 	addi	r2,r2,1
10001090:	e0bff215 	stw	r2,-56(fp)
10001094:	e0bff217 	ldw	r2,-56(fp)
10001098:	10800390 	cmplti	r2,r2,14
1000109c:	103f421e 	bne	r2,zero,10000da8 <__alt_data_end+0xf8000da8>
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			return;
		}
	}
	return;
100010a0:	0001883a 	nop
}
100010a4:	e6fffe04 	addi	sp,fp,-8
100010a8:	dfc00317 	ldw	ra,12(sp)
100010ac:	df000217 	ldw	fp,8(sp)
100010b0:	dc400117 	ldw	r17,4(sp)
100010b4:	dc000017 	ldw	r16,0(sp)
100010b8:	dec00404 	addi	sp,sp,16
100010bc:	f800283a 	ret

100010c0 <slicingEngine>:

void slicingEngine()
{
100010c0:	defff704 	addi	sp,sp,-36
100010c4:	dfc00815 	stw	ra,32(sp)
100010c8:	df000715 	stw	fp,28(sp)
100010cc:	dc000615 	stw	r16,24(sp)
100010d0:	df000704 	addi	fp,sp,28
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
100010d4:	00840074 	movhi	r2,4097
100010d8:	10a49c04 	addi	r2,r2,-28048
100010dc:	10800317 	ldw	r2,12(r2)
100010e0:	10003c1e 	bne	r2,zero,100011d4 <slicingEngine+0x114>
100010e4:	d0a5a717 	ldw	r2,-26980(gp)
100010e8:	10003a26 	beq	r2,zero,100011d4 <slicingEngine+0x114>
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
100010ec:	d0a5a517 	ldw	r2,-26988(gp)
100010f0:	10801e70 	cmpltui	r2,r2,121
100010f4:	1000101e 	bne	r2,zero,10001138 <slicingEngine+0x78>
100010f8:	d0a5a517 	ldw	r2,-26988(gp)
100010fc:	10803c28 	cmpgeui	r2,r2,240
10001100:	10000d1e 	bne	r2,zero,10001138 <slicingEngine+0x78>
10001104:	d0a5a417 	ldw	r2,-26992(gp)
10001108:	10801e70 	cmpltui	r2,r2,121
1000110c:	10000a1e 	bne	r2,zero,10001138 <slicingEngine+0x78>
10001110:	d0a5a417 	ldw	r2,-26992(gp)
10001114:	10803c28 	cmpgeui	r2,r2,240
10001118:	1000071e 	bne	r2,zero,10001138 <slicingEngine+0x78>
		{
			veggieObject[0].objectState = 1;	// easy mode start
1000111c:	00840074 	movhi	r2,4097
10001120:	10a49c04 	addi	r2,r2,-28048
10001124:	00c00044 	movi	r3,1
10001128:	10c00315 	stw	r3,12(r2)
			roundStart = elapsedTime;
1000112c:	d0a5a117 	ldw	r2,-27004(gp)
10001130:	d0a5ae15 	stw	r2,-26952(gp)
10001134:	00002606 	br	100011d0 <slicingEngine+0x110>
		}
		else if((xCursor>320)&&(xCursor<440)&&(yCursor>320)&&(yCursor<440))
10001138:	d0a5a517 	ldw	r2,-26988(gp)
1000113c:	10805070 	cmpltui	r2,r2,321
10001140:	1000101e 	bne	r2,zero,10001184 <slicingEngine+0xc4>
10001144:	d0a5a517 	ldw	r2,-26988(gp)
10001148:	10806e28 	cmpgeui	r2,r2,440
1000114c:	10000d1e 	bne	r2,zero,10001184 <slicingEngine+0xc4>
10001150:	d0a5a417 	ldw	r2,-26992(gp)
10001154:	10805070 	cmpltui	r2,r2,321
10001158:	10000a1e 	bne	r2,zero,10001184 <slicingEngine+0xc4>
1000115c:	d0a5a417 	ldw	r2,-26992(gp)
10001160:	10806e28 	cmpgeui	r2,r2,440
10001164:	1000071e 	bne	r2,zero,10001184 <slicingEngine+0xc4>
		{
			veggieObject[0].objectState = 2;	// medium mode start
10001168:	00840074 	movhi	r2,4097
1000116c:	10a49c04 	addi	r2,r2,-28048
10001170:	00c00084 	movi	r3,2
10001174:	10c00315 	stw	r3,12(r2)
			roundStart = elapsedTime;
10001178:	d0a5a117 	ldw	r2,-27004(gp)
1000117c:	d0a5ae15 	stw	r2,-26952(gp)
10001180:	00001306 	br	100011d0 <slicingEngine+0x110>
		}
		else if((xCursor>450)&&(xCursor<570)&&(yCursor>150)&&(yCursor<270))
10001184:	d0a5a517 	ldw	r2,-26988(gp)
10001188:	108070f0 	cmpltui	r2,r2,451
1000118c:	1000101e 	bne	r2,zero,100011d0 <slicingEngine+0x110>
10001190:	d0a5a517 	ldw	r2,-26988(gp)
10001194:	10808ea8 	cmpgeui	r2,r2,570
10001198:	10000d1e 	bne	r2,zero,100011d0 <slicingEngine+0x110>
1000119c:	d0a5a417 	ldw	r2,-26992(gp)
100011a0:	108025f0 	cmpltui	r2,r2,151
100011a4:	10000a1e 	bne	r2,zero,100011d0 <slicingEngine+0x110>
100011a8:	d0a5a417 	ldw	r2,-26992(gp)
100011ac:	108043a8 	cmpgeui	r2,r2,270
100011b0:	1000071e 	bne	r2,zero,100011d0 <slicingEngine+0x110>
		{
			veggieObject[0].objectState = 3;	// hard mode start
100011b4:	00840074 	movhi	r2,4097
100011b8:	10a49c04 	addi	r2,r2,-28048
100011bc:	00c000c4 	movi	r3,3
100011c0:	10c00315 	stw	r3,12(r2)
			roundStart = elapsedTime;
100011c4:	d0a5a117 	ldw	r2,-27004(gp)
100011c8:	d0a5ae15 	stw	r2,-26952(gp)
{
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
100011cc:	0000cd06 	br	10001504 <slicingEngine+0x444>
100011d0:	0000cc06 	br	10001504 <slicingEngine+0x444>
		{
			veggieObject[0].objectState = 3;	// hard mode start
			roundStart = elapsedTime;
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
100011d4:	00840074 	movhi	r2,4097
100011d8:	10a49c04 	addi	r2,r2,-28048
100011dc:	10800317 	ldw	r2,12(r2)
100011e0:	10800120 	cmpeqi	r2,r2,4
100011e4:	1000051e 	bne	r2,zero,100011fc <slicingEngine+0x13c>
100011e8:	00840074 	movhi	r2,4097
100011ec:	10a49c04 	addi	r2,r2,-28048
100011f0:	10800317 	ldw	r2,12(r2)
100011f4:	10800158 	cmpnei	r2,r2,5
100011f8:	1000131e 	bne	r2,zero,10001248 <slicingEngine+0x188>
100011fc:	d0a5a717 	ldw	r2,-26980(gp)
10001200:	10001126 	beq	r2,zero,10001248 <slicingEngine+0x188>
	{
		// DO MORE MENU COLLISION
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
10001204:	d0a5a517 	ldw	r2,-26988(gp)
10001208:	10801e70 	cmpltui	r2,r2,121
1000120c:	10000d1e 	bne	r2,zero,10001244 <slicingEngine+0x184>
10001210:	d0a5a517 	ldw	r2,-26988(gp)
10001214:	10803c28 	cmpgeui	r2,r2,240
10001218:	10000a1e 	bne	r2,zero,10001244 <slicingEngine+0x184>
1000121c:	d0a5a417 	ldw	r2,-26992(gp)
10001220:	10801e70 	cmpltui	r2,r2,121
10001224:	1000071e 	bne	r2,zero,10001244 <slicingEngine+0x184>
10001228:	d0a5a417 	ldw	r2,-26992(gp)
1000122c:	10803c28 	cmpgeui	r2,r2,240
10001230:	1000041e 	bne	r2,zero,10001244 <slicingEngine+0x184>
		{
			veggieObject[0].objectState = 0;	// return to main menu
10001234:	00840074 	movhi	r2,4097
10001238:	10a49c04 	addi	r2,r2,-28048
1000123c:	10000315 	stw	zero,12(r2)
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
	{
		// DO MORE MENU COLLISION
		if((xCursor>120)&&(xCursor<240)&&(yCursor>120)&&(yCursor<240))
10001240:	0000b006 	br	10001504 <slicingEngine+0x444>
10001244:	0000af06 	br	10001504 <slicingEngine+0x444>
		{
			veggieObject[0].objectState = 0;	// return to main menu
		}
	}
	else if(cursorStreak)	// if cursor has streak, we can cut!
10001248:	d0a5a717 	ldw	r2,-26980(gp)
1000124c:	1000ad26 	beq	r2,zero,10001504 <slicingEngine+0x444>
	{
		int i;
		for(i=1; i<16; i++)	// let's go through our objects and see which ones collide
10001250:	00800044 	movi	r2,1
10001254:	e0bff915 	stw	r2,-28(fp)
10001258:	0000a706 	br	100014f8 <slicingEngine+0x438>
		{
			// only if it is in perfect state
			if(veggieObject[i].objectState == 1)
1000125c:	04040074 	movhi	r16,4097
10001260:	84249c04 	addi	r16,r16,-28048
10001264:	e0bff917 	ldw	r2,-28(fp)
10001268:	1009883a 	mov	r4,r2
1000126c:	01400904 	movi	r5,36
10001270:	0002cf00 	call	10002cf0 <__mulsi3>
10001274:	8085883a 	add	r2,r16,r2
10001278:	10800304 	addi	r2,r2,12
1000127c:	10800017 	ldw	r2,0(r2)
10001280:	10800058 	cmpnei	r2,r2,1
10001284:	1000991e 	bne	r2,zero,100014ec <slicingEngine+0x42c>
			{
				// let's grab the vegetable coordinates
				int veggieX = veggieObject[i].xPosition;
10001288:	04040074 	movhi	r16,4097
1000128c:	84249c04 	addi	r16,r16,-28048
10001290:	e0bff917 	ldw	r2,-28(fp)
10001294:	1009883a 	mov	r4,r2
10001298:	01400904 	movi	r5,36
1000129c:	0002cf00 	call	10002cf0 <__mulsi3>
100012a0:	8085883a 	add	r2,r16,r2
100012a4:	10800017 	ldw	r2,0(r2)
100012a8:	e0bffd15 	stw	r2,-12(fp)
				int veggieY = veggieObject[i].xPosition;
100012ac:	04040074 	movhi	r16,4097
100012b0:	84249c04 	addi	r16,r16,-28048
100012b4:	e0bff917 	ldw	r2,-28(fp)
100012b8:	1009883a 	mov	r4,r2
100012bc:	01400904 	movi	r5,36
100012c0:	0002cf00 	call	10002cf0 <__mulsi3>
100012c4:	8085883a 	add	r2,r16,r2
100012c8:	10800017 	ldw	r2,0(r2)
100012cc:	e0bffe15 	stw	r2,-8(fp)

				// let's set our collision box
				int collideX, collideY;
				int offsetX = 10;
100012d0:	00800284 	movi	r2,10
100012d4:	e0bffc15 	stw	r2,-16(fp)
				if((veggieObject[i].objectType == 1)) //eggplant
100012d8:	04040074 	movhi	r16,4097
100012dc:	84249c04 	addi	r16,r16,-28048
100012e0:	e0bff917 	ldw	r2,-28(fp)
100012e4:	1009883a 	mov	r4,r2
100012e8:	01400904 	movi	r5,36
100012ec:	0002cf00 	call	10002cf0 <__mulsi3>
100012f0:	8085883a 	add	r2,r16,r2
100012f4:	10800204 	addi	r2,r2,8
100012f8:	10800017 	ldw	r2,0(r2)
100012fc:	10800058 	cmpnei	r2,r2,1
10001300:	1000051e 	bne	r2,zero,10001318 <slicingEngine+0x258>
				{
					collideX = 45;
10001304:	00800b44 	movi	r2,45
10001308:	e0bffa15 	stw	r2,-24(fp)
					collideY = 85;
1000130c:	00801544 	movi	r2,85
10001310:	e0bffb15 	stw	r2,-20(fp)
10001314:	00003506 	br	100013ec <slicingEngine+0x32c>
				}
				else if((veggieObject[i].objectType == 2))	// potato
10001318:	04040074 	movhi	r16,4097
1000131c:	84249c04 	addi	r16,r16,-28048
10001320:	e0bff917 	ldw	r2,-28(fp)
10001324:	1009883a 	mov	r4,r2
10001328:	01400904 	movi	r5,36
1000132c:	0002cf00 	call	10002cf0 <__mulsi3>
10001330:	8085883a 	add	r2,r16,r2
10001334:	10800204 	addi	r2,r2,8
10001338:	10800017 	ldw	r2,0(r2)
1000133c:	10800098 	cmpnei	r2,r2,2
10001340:	1000051e 	bne	r2,zero,10001358 <slicingEngine+0x298>
				{
					collideX = 45;
10001344:	00800b44 	movi	r2,45
10001348:	e0bffa15 	stw	r2,-24(fp)
					collideY = 80;
1000134c:	00801404 	movi	r2,80
10001350:	e0bffb15 	stw	r2,-20(fp)
10001354:	00002506 	br	100013ec <slicingEngine+0x32c>
				}
				else if((veggieObject[i].objectType == 3)) 	// carrot
10001358:	04040074 	movhi	r16,4097
1000135c:	84249c04 	addi	r16,r16,-28048
10001360:	e0bff917 	ldw	r2,-28(fp)
10001364:	1009883a 	mov	r4,r2
10001368:	01400904 	movi	r5,36
1000136c:	0002cf00 	call	10002cf0 <__mulsi3>
10001370:	8085883a 	add	r2,r16,r2
10001374:	10800204 	addi	r2,r2,8
10001378:	10800017 	ldw	r2,0(r2)
1000137c:	108000d8 	cmpnei	r2,r2,3
10001380:	1000051e 	bne	r2,zero,10001398 <slicingEngine+0x2d8>
				{
					collideX = 45;
10001384:	00800b44 	movi	r2,45
10001388:	e0bffa15 	stw	r2,-24(fp)
					collideY = 40;
1000138c:	00800a04 	movi	r2,40
10001390:	e0bffb15 	stw	r2,-20(fp)
10001394:	00001506 	br	100013ec <slicingEngine+0x32c>
				}
				else if((veggieObject[i].objectType == 3))	// tomato
10001398:	04040074 	movhi	r16,4097
1000139c:	84249c04 	addi	r16,r16,-28048
100013a0:	e0bff917 	ldw	r2,-28(fp)
100013a4:	1009883a 	mov	r4,r2
100013a8:	01400904 	movi	r5,36
100013ac:	0002cf00 	call	10002cf0 <__mulsi3>
100013b0:	8085883a 	add	r2,r16,r2
100013b4:	10800204 	addi	r2,r2,8
100013b8:	10800017 	ldw	r2,0(r2)
100013bc:	108000d8 	cmpnei	r2,r2,3
100013c0:	1000051e 	bne	r2,zero,100013d8 <slicingEngine+0x318>
				{
					collideX = 40;
100013c4:	00800a04 	movi	r2,40
100013c8:	e0bffa15 	stw	r2,-24(fp)
					collideY = 40;
100013cc:	00800a04 	movi	r2,40
100013d0:	e0bffb15 	stw	r2,-20(fp)
100013d4:	00000506 	br	100013ec <slicingEngine+0x32c>
				}
				else	// broccoli, cabbage, radish, onion
				{
					offsetX = 0;
100013d8:	e03ffc15 	stw	zero,-16(fp)
					collideX = 64;
100013dc:	00801004 	movi	r2,64
100013e0:	e0bffa15 	stw	r2,-24(fp)
					collideY = 64;
100013e4:	00801004 	movi	r2,64
100013e8:	e0bffb15 	stw	r2,-20(fp)
				}

				// now let's check collision
				if(((veggieX+offsetX)<xCursor)&&((veggieX+collideX)>xCursor)&&(veggieY<yCursor)&&((veggieY+collideY)>yCursor))
100013ec:	e0fffd17 	ldw	r3,-12(fp)
100013f0:	e0bffc17 	ldw	r2,-16(fp)
100013f4:	1885883a 	add	r2,r3,r2
100013f8:	1007883a 	mov	r3,r2
100013fc:	d0a5a517 	ldw	r2,-26988(gp)
10001400:	18803a2e 	bgeu	r3,r2,100014ec <slicingEngine+0x42c>
10001404:	e0fffd17 	ldw	r3,-12(fp)
10001408:	e0bffa17 	ldw	r2,-24(fp)
1000140c:	1885883a 	add	r2,r3,r2
10001410:	1007883a 	mov	r3,r2
10001414:	d0a5a517 	ldw	r2,-26988(gp)
10001418:	10c0342e 	bgeu	r2,r3,100014ec <slicingEngine+0x42c>
1000141c:	e0fffe17 	ldw	r3,-8(fp)
10001420:	d0a5a417 	ldw	r2,-26992(gp)
10001424:	1880312e 	bgeu	r3,r2,100014ec <slicingEngine+0x42c>
10001428:	e0fffe17 	ldw	r3,-8(fp)
1000142c:	e0bffb17 	ldw	r2,-20(fp)
10001430:	1885883a 	add	r2,r3,r2
10001434:	1007883a 	mov	r3,r2
10001438:	d0a5a417 	ldw	r2,-26992(gp)
1000143c:	10c02b2e 	bgeu	r2,r3,100014ec <slicingEngine+0x42c>
				{
					// this means we are in the 'hitbox'!! kill the fruit!
					veggieObject[i].objectState = 2;
10001440:	04040074 	movhi	r16,4097
10001444:	84249c04 	addi	r16,r16,-28048
10001448:	e0bff917 	ldw	r2,-28(fp)
1000144c:	1009883a 	mov	r4,r2
10001450:	01400904 	movi	r5,36
10001454:	0002cf00 	call	10002cf0 <__mulsi3>
10001458:	8085883a 	add	r2,r16,r2
1000145c:	10800304 	addi	r2,r2,12
10001460:	00c00084 	movi	r3,2
10001464:	10c00015 	stw	r3,0(r2)

					if(i<14)
10001468:	e0bff917 	ldw	r2,-28(fp)
1000146c:	10800388 	cmpgei	r2,r2,14
10001470:	10000f1e 	bne	r2,zero,100014b0 <slicingEngine+0x3f0>
					{
						comboFruit = comboFruit + 1;
10001474:	d0a5af17 	ldw	r2,-26948(gp)
10001478:	10800044 	addi	r2,r2,1
1000147c:	d0a5af15 	stw	r2,-26948(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition + 10*comboFruit;
10001480:	00840074 	movhi	r2,4097
10001484:	10a49c04 	addi	r2,r2,-28048
10001488:	14000017 	ldw	r16,0(r2)
1000148c:	d0a5af17 	ldw	r2,-26948(gp)
10001490:	1009883a 	mov	r4,r2
10001494:	01400284 	movi	r5,10
10001498:	0002cf00 	call	10002cf0 <__mulsi3>
1000149c:	8087883a 	add	r3,r16,r2
100014a0:	00840074 	movhi	r2,4097
100014a4:	10a49c04 	addi	r2,r2,-28048
100014a8:	10c00015 	stw	r3,0(r2)
100014ac:	00000f06 	br	100014ec <slicingEngine+0x42c>
					}
					else	// ITS A BOMB!!! OMGOGMGOMGG!!
					{
						veggieObject[0].objectType = veggieObject[0].objectType-1;
100014b0:	00840074 	movhi	r2,4097
100014b4:	10a49c04 	addi	r2,r2,-28048
100014b8:	10800217 	ldw	r2,8(r2)
100014bc:	10ffffc4 	addi	r3,r2,-1
100014c0:	00840074 	movhi	r2,4097
100014c4:	10a49c04 	addi	r2,r2,-28048
100014c8:	10c00215 	stw	r3,8(r2)
						comboFruit = 0;
100014cc:	d025af15 	stw	zero,-26948(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition - 1000;
100014d0:	00840074 	movhi	r2,4097
100014d4:	10a49c04 	addi	r2,r2,-28048
100014d8:	10800017 	ldw	r2,0(r2)
100014dc:	10ff0604 	addi	r3,r2,-1000
100014e0:	00840074 	movhi	r2,4097
100014e4:	10a49c04 	addi	r2,r2,-28048
100014e8:	10c00015 	stw	r3,0(r2)
		}
	}
	else if(cursorStreak)	// if cursor has streak, we can cut!
	{
		int i;
		for(i=1; i<16; i++)	// let's go through our objects and see which ones collide
100014ec:	e0bff917 	ldw	r2,-28(fp)
100014f0:	10800044 	addi	r2,r2,1
100014f4:	e0bff915 	stw	r2,-28(fp)
100014f8:	e0bff917 	ldw	r2,-28(fp)
100014fc:	10800410 	cmplti	r2,r2,16
10001500:	103f561e 	bne	r2,zero,1000125c <__alt_data_end+0xf800125c>

				}
			}
		}
	}
	return;
10001504:	0001883a 	nop
}
10001508:	e6ffff04 	addi	sp,fp,-4
1000150c:	dfc00217 	ldw	ra,8(sp)
10001510:	df000117 	ldw	fp,4(sp)
10001514:	dc000017 	ldw	r16,0(sp)
10001518:	dec00304 	addi	sp,sp,12
1000151c:	f800283a 	ret

10001520 <disintegrateEngine>:

void disintegrateEngine()
{
10001520:	defffc04 	addi	sp,sp,-16
10001524:	dfc00315 	stw	ra,12(sp)
10001528:	df000215 	stw	fp,8(sp)
1000152c:	dc000115 	stw	r16,4(sp)
10001530:	df000204 	addi	fp,sp,8
	int i;
	for(i=1; i<16; i++)	// let's go through our objects
10001534:	00800044 	movi	r2,1
10001538:	e0bffe15 	stw	r2,-8(fp)
1000153c:	00007106 	br	10001704 <disintegrateEngine+0x1e4>
	{
		if(veggieObject[i].objectState == 2) // just been cut
10001540:	04040074 	movhi	r16,4097
10001544:	84249c04 	addi	r16,r16,-28048
10001548:	e0bffe17 	ldw	r2,-8(fp)
1000154c:	1009883a 	mov	r4,r2
10001550:	01400904 	movi	r5,36
10001554:	0002cf00 	call	10002cf0 <__mulsi3>
10001558:	8085883a 	add	r2,r16,r2
1000155c:	10800304 	addi	r2,r2,12
10001560:	10800017 	ldw	r2,0(r2)
10001564:	10800098 	cmpnei	r2,r2,2
10001568:	10000b1e 	bne	r2,zero,10001598 <disintegrateEngine+0x78>
		{
			veggieObject[i].objectState = 3;
1000156c:	04040074 	movhi	r16,4097
10001570:	84249c04 	addi	r16,r16,-28048
10001574:	e0bffe17 	ldw	r2,-8(fp)
10001578:	1009883a 	mov	r4,r2
1000157c:	01400904 	movi	r5,36
10001580:	0002cf00 	call	10002cf0 <__mulsi3>
10001584:	8085883a 	add	r2,r16,r2
10001588:	10800304 	addi	r2,r2,12
1000158c:	00c000c4 	movi	r3,3
10001590:	10c00015 	stw	r3,0(r2)
10001594:	00005806 	br	100016f8 <disintegrateEngine+0x1d8>
		}
		else if(veggieObject[i].objectState == 3) // midway through
10001598:	04040074 	movhi	r16,4097
1000159c:	84249c04 	addi	r16,r16,-28048
100015a0:	e0bffe17 	ldw	r2,-8(fp)
100015a4:	1009883a 	mov	r4,r2
100015a8:	01400904 	movi	r5,36
100015ac:	0002cf00 	call	10002cf0 <__mulsi3>
100015b0:	8085883a 	add	r2,r16,r2
100015b4:	10800304 	addi	r2,r2,12
100015b8:	10800017 	ldw	r2,0(r2)
100015bc:	108000d8 	cmpnei	r2,r2,3
100015c0:	10000b1e 	bne	r2,zero,100015f0 <disintegrateEngine+0xd0>
		{
			veggieObject[i].objectState = 4;
100015c4:	04040074 	movhi	r16,4097
100015c8:	84249c04 	addi	r16,r16,-28048
100015cc:	e0bffe17 	ldw	r2,-8(fp)
100015d0:	1009883a 	mov	r4,r2
100015d4:	01400904 	movi	r5,36
100015d8:	0002cf00 	call	10002cf0 <__mulsi3>
100015dc:	8085883a 	add	r2,r16,r2
100015e0:	10800304 	addi	r2,r2,12
100015e4:	00c00104 	movi	r3,4
100015e8:	10c00015 	stw	r3,0(r2)
100015ec:	00004206 	br	100016f8 <disintegrateEngine+0x1d8>
		}
		else if(veggieObject[i].objectState == 4) // almost dedded
100015f0:	04040074 	movhi	r16,4097
100015f4:	84249c04 	addi	r16,r16,-28048
100015f8:	e0bffe17 	ldw	r2,-8(fp)
100015fc:	1009883a 	mov	r4,r2
10001600:	01400904 	movi	r5,36
10001604:	0002cf00 	call	10002cf0 <__mulsi3>
10001608:	8085883a 	add	r2,r16,r2
1000160c:	10800304 	addi	r2,r2,12
10001610:	10800017 	ldw	r2,0(r2)
10001614:	10800118 	cmpnei	r2,r2,4
10001618:	1000371e 	bne	r2,zero,100016f8 <disintegrateEngine+0x1d8>
		{
			veggieObject[i].xPosition = 0;		// gone!
1000161c:	04040074 	movhi	r16,4097
10001620:	84249c04 	addi	r16,r16,-28048
10001624:	e0bffe17 	ldw	r2,-8(fp)
10001628:	1009883a 	mov	r4,r2
1000162c:	01400904 	movi	r5,36
10001630:	0002cf00 	call	10002cf0 <__mulsi3>
10001634:	8085883a 	add	r2,r16,r2
10001638:	10000015 	stw	zero,0(r2)
			veggieObject[i].yPosition = 0;
1000163c:	04040074 	movhi	r16,4097
10001640:	84249c04 	addi	r16,r16,-28048
10001644:	e0bffe17 	ldw	r2,-8(fp)
10001648:	1009883a 	mov	r4,r2
1000164c:	01400904 	movi	r5,36
10001650:	0002cf00 	call	10002cf0 <__mulsi3>
10001654:	8085883a 	add	r2,r16,r2
10001658:	10800104 	addi	r2,r2,4
1000165c:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = 0;
10001660:	04040074 	movhi	r16,4097
10001664:	84249c04 	addi	r16,r16,-28048
10001668:	e0bffe17 	ldw	r2,-8(fp)
1000166c:	1009883a 	mov	r4,r2
10001670:	01400904 	movi	r5,36
10001674:	0002cf00 	call	10002cf0 <__mulsi3>
10001678:	8085883a 	add	r2,r16,r2
1000167c:	10800204 	addi	r2,r2,8
10001680:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectState = 0;
10001684:	04040074 	movhi	r16,4097
10001688:	84249c04 	addi	r16,r16,-28048
1000168c:	e0bffe17 	ldw	r2,-8(fp)
10001690:	1009883a 	mov	r4,r2
10001694:	01400904 	movi	r5,36
10001698:	0002cf00 	call	10002cf0 <__mulsi3>
1000169c:	8085883a 	add	r2,r16,r2
100016a0:	10800304 	addi	r2,r2,12
100016a4:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = 0;
100016a8:	04040074 	movhi	r16,4097
100016ac:	84249c04 	addi	r16,r16,-28048
100016b0:	e0bffe17 	ldw	r2,-8(fp)
100016b4:	1009883a 	mov	r4,r2
100016b8:	01400904 	movi	r5,36
100016bc:	0002cf00 	call	10002cf0 <__mulsi3>
100016c0:	8085883a 	add	r2,r16,r2
100016c4:	10800504 	addi	r2,r2,20
100016c8:	10000015 	stw	zero,0(r2)
100016cc:	10000115 	stw	zero,4(r2)
			veggieObject[i].yVelocity = 0;
100016d0:	04040074 	movhi	r16,4097
100016d4:	84249c04 	addi	r16,r16,-28048
100016d8:	e0bffe17 	ldw	r2,-8(fp)
100016dc:	1009883a 	mov	r4,r2
100016e0:	01400904 	movi	r5,36
100016e4:	0002cf00 	call	10002cf0 <__mulsi3>
100016e8:	8085883a 	add	r2,r16,r2
100016ec:	10800704 	addi	r2,r2,28
100016f0:	10000015 	stw	zero,0(r2)
100016f4:	10000115 	stw	zero,4(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects
100016f8:	e0bffe17 	ldw	r2,-8(fp)
100016fc:	10800044 	addi	r2,r2,1
10001700:	e0bffe15 	stw	r2,-8(fp)
10001704:	e0bffe17 	ldw	r2,-8(fp)
10001708:	10800410 	cmplti	r2,r2,16
1000170c:	103f8c1e 	bne	r2,zero,10001540 <__alt_data_end+0xf8001540>
			veggieObject[i].objectState = 0;
			veggieObject[i].xVelocity = 0;
			veggieObject[i].yVelocity = 0;
		}
	}
}
10001710:	e6ffff04 	addi	sp,fp,-4
10001714:	dfc00217 	ldw	ra,8(sp)
10001718:	df000117 	ldw	fp,4(sp)
1000171c:	dc000017 	ldw	r16,0(sp)
10001720:	dec00304 	addi	sp,sp,12
10001724:	f800283a 	ret

10001728 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10001728:	deffe704 	addi	sp,sp,-100
1000172c:	dfc01815 	stw	ra,96(sp)
10001730:	df001715 	stw	fp,92(sp)
10001734:	dc001615 	stw	r16,88(sp)
10001738:	df001704 	addi	fp,sp,92
	// start putting in our xcoords
	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
1000173c:	00801c04 	movi	r2,112
10001740:	00c00044 	movi	r3,1
10001744:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].xPosition;
10001748:	00c04004 	movi	r3,256
1000174c:	00840074 	movhi	r2,4097
10001750:	10a49c04 	addi	r2,r2,-28048
10001754:	10800017 	ldw	r2,0(r2)
10001758:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].xPosition;
1000175c:	00c03c04 	movi	r3,240
10001760:	00840074 	movhi	r2,4097
10001764:	10a49c04 	addi	r2,r2,-28048
10001768:	10800917 	ldw	r2,36(r2)
1000176c:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].xPosition;
10001770:	00c03804 	movi	r3,224
10001774:	00840074 	movhi	r2,4097
10001778:	10a49c04 	addi	r2,r2,-28048
1000177c:	10801217 	ldw	r2,72(r2)
10001780:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].xPosition;
10001784:	00c03404 	movi	r3,208
10001788:	00840074 	movhi	r2,4097
1000178c:	10a49c04 	addi	r2,r2,-28048
10001790:	10801b17 	ldw	r2,108(r2)
10001794:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].xPosition;
10001798:	00c03004 	movi	r3,192
1000179c:	00840074 	movhi	r2,4097
100017a0:	10a49c04 	addi	r2,r2,-28048
100017a4:	10802417 	ldw	r2,144(r2)
100017a8:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].xPosition;
100017ac:	00c02c04 	movi	r3,176
100017b0:	00840074 	movhi	r2,4097
100017b4:	10a49c04 	addi	r2,r2,-28048
100017b8:	10802d17 	ldw	r2,180(r2)
100017bc:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].xPosition;
100017c0:	00c02804 	movi	r3,160
100017c4:	00840074 	movhi	r2,4097
100017c8:	10a49c04 	addi	r2,r2,-28048
100017cc:	10803617 	ldw	r2,216(r2)
100017d0:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].xPosition;
100017d4:	00c01804 	movi	r3,96
100017d8:	00840074 	movhi	r2,4097
100017dc:	10a49c04 	addi	r2,r2,-28048
100017e0:	10803f17 	ldw	r2,252(r2)
100017e4:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].xPosition;
100017e8:	00c02404 	movi	r3,144
100017ec:	00840074 	movhi	r2,4097
100017f0:	10a49c04 	addi	r2,r2,-28048
100017f4:	10804817 	ldw	r2,288(r2)
100017f8:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].xPosition;
100017fc:	00c02004 	movi	r3,128
10001800:	00840074 	movhi	r2,4097
10001804:	10a49c04 	addi	r2,r2,-28048
10001808:	10805117 	ldw	r2,324(r2)
1000180c:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].xPosition;
10001810:	00c01004 	movi	r3,64
10001814:	00840074 	movhi	r2,4097
10001818:	10a49c04 	addi	r2,r2,-28048
1000181c:	10805a17 	ldw	r2,360(r2)
10001820:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].xPosition;
10001824:	00c00c04 	movi	r3,48
10001828:	00840074 	movhi	r2,4097
1000182c:	10a49c04 	addi	r2,r2,-28048
10001830:	10806317 	ldw	r2,396(r2)
10001834:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].xPosition;
10001838:	00c00804 	movi	r3,32
1000183c:	00840074 	movhi	r2,4097
10001840:	10a49c04 	addi	r2,r2,-28048
10001844:	10806c17 	ldw	r2,432(r2)
10001848:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].xPosition;
1000184c:	00c05804 	movi	r3,352
10001850:	00840074 	movhi	r2,4097
10001854:	10a49c04 	addi	r2,r2,-28048
10001858:	10807517 	ldw	r2,468(r2)
1000185c:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].xPosition;
10001860:	00c05404 	movi	r3,336
10001864:	00840074 	movhi	r2,4097
10001868:	10a49c04 	addi	r2,r2,-28048
1000186c:	10807e17 	ldw	r2,504(r2)
10001870:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].xPosition;
10001874:	00c05004 	movi	r3,320
10001878:	00840074 	movhi	r2,4097
1000187c:	10a49c04 	addi	r2,r2,-28048
10001880:	10808717 	ldw	r2,540(r2)
10001884:	18800015 	stw	r2,0(r3)
	// wait for response
	while(*to_sw_sig != 1);
10001888:	0001883a 	nop
1000188c:	00801404 	movi	r2,80
10001890:	10800003 	ldbu	r2,0(r2)
10001894:	10803fcc 	andi	r2,r2,255
10001898:	1080201c 	xori	r2,r2,128
1000189c:	10bfe004 	addi	r2,r2,-128
100018a0:	10800058 	cmpnei	r2,r2,1
100018a4:	103ff91e 	bne	r2,zero,1000188c <__alt_data_end+0xf800188c>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
100018a8:	00801c04 	movi	r2,112
100018ac:	00c00084 	movi	r3,2
100018b0:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].yPosition;
100018b4:	00c04004 	movi	r3,256
100018b8:	00840074 	movhi	r2,4097
100018bc:	10a49c04 	addi	r2,r2,-28048
100018c0:	10800117 	ldw	r2,4(r2)
100018c4:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].yPosition;
100018c8:	00c03c04 	movi	r3,240
100018cc:	00840074 	movhi	r2,4097
100018d0:	10a49c04 	addi	r2,r2,-28048
100018d4:	10800a17 	ldw	r2,40(r2)
100018d8:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].yPosition;
100018dc:	00c03804 	movi	r3,224
100018e0:	00840074 	movhi	r2,4097
100018e4:	10a49c04 	addi	r2,r2,-28048
100018e8:	10801317 	ldw	r2,76(r2)
100018ec:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].yPosition;
100018f0:	00c03404 	movi	r3,208
100018f4:	00840074 	movhi	r2,4097
100018f8:	10a49c04 	addi	r2,r2,-28048
100018fc:	10801c17 	ldw	r2,112(r2)
10001900:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].yPosition;
10001904:	00c03004 	movi	r3,192
10001908:	00840074 	movhi	r2,4097
1000190c:	10a49c04 	addi	r2,r2,-28048
10001910:	10802517 	ldw	r2,148(r2)
10001914:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].yPosition;
10001918:	00c02c04 	movi	r3,176
1000191c:	00840074 	movhi	r2,4097
10001920:	10a49c04 	addi	r2,r2,-28048
10001924:	10802e17 	ldw	r2,184(r2)
10001928:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].yPosition;
1000192c:	00c02804 	movi	r3,160
10001930:	00840074 	movhi	r2,4097
10001934:	10a49c04 	addi	r2,r2,-28048
10001938:	10803717 	ldw	r2,220(r2)
1000193c:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].yPosition;
10001940:	00c01804 	movi	r3,96
10001944:	00840074 	movhi	r2,4097
10001948:	10a49c04 	addi	r2,r2,-28048
1000194c:	10804017 	ldw	r2,256(r2)
10001950:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].yPosition;
10001954:	00c02404 	movi	r3,144
10001958:	00840074 	movhi	r2,4097
1000195c:	10a49c04 	addi	r2,r2,-28048
10001960:	10804917 	ldw	r2,292(r2)
10001964:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].yPosition;
10001968:	00c02004 	movi	r3,128
1000196c:	00840074 	movhi	r2,4097
10001970:	10a49c04 	addi	r2,r2,-28048
10001974:	10805217 	ldw	r2,328(r2)
10001978:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].yPosition;
1000197c:	00c01004 	movi	r3,64
10001980:	00840074 	movhi	r2,4097
10001984:	10a49c04 	addi	r2,r2,-28048
10001988:	10805b17 	ldw	r2,364(r2)
1000198c:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].yPosition;
10001990:	00c00c04 	movi	r3,48
10001994:	00840074 	movhi	r2,4097
10001998:	10a49c04 	addi	r2,r2,-28048
1000199c:	10806417 	ldw	r2,400(r2)
100019a0:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].yPosition;
100019a4:	00c00804 	movi	r3,32
100019a8:	00840074 	movhi	r2,4097
100019ac:	10a49c04 	addi	r2,r2,-28048
100019b0:	10806d17 	ldw	r2,436(r2)
100019b4:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].yPosition;
100019b8:	00c05804 	movi	r3,352
100019bc:	00840074 	movhi	r2,4097
100019c0:	10a49c04 	addi	r2,r2,-28048
100019c4:	10807617 	ldw	r2,472(r2)
100019c8:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].yPosition;
100019cc:	00c05404 	movi	r3,336
100019d0:	00840074 	movhi	r2,4097
100019d4:	10a49c04 	addi	r2,r2,-28048
100019d8:	10807f17 	ldw	r2,508(r2)
100019dc:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].yPosition;
100019e0:	00c05004 	movi	r3,320
100019e4:	00840074 	movhi	r2,4097
100019e8:	10a49c04 	addi	r2,r2,-28048
100019ec:	10808817 	ldw	r2,544(r2)
100019f0:	18800015 	stw	r2,0(r3)
	// wait for confirmation
	while(*to_sw_sig != 2);
100019f4:	0001883a 	nop
100019f8:	00801404 	movi	r2,80
100019fc:	10800003 	ldbu	r2,0(r2)
10001a00:	10803fcc 	andi	r2,r2,255
10001a04:	1080201c 	xori	r2,r2,128
10001a08:	10bfe004 	addi	r2,r2,-128
10001a0c:	10800098 	cmpnei	r2,r2,2
10001a10:	103ff91e 	bne	r2,zero,100019f8 <__alt_data_end+0xf80019f8>

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];
	int i;		// load all of our structs in
	for (i=0; i<16; i++)
10001a14:	e03fee15 	stw	zero,-72(fp)
10001a18:	00002206 	br	10001aa4 <FPGAcommunicator+0x37c>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
10001a1c:	04040074 	movhi	r16,4097
10001a20:	84249c04 	addi	r16,r16,-28048
10001a24:	e0bfee17 	ldw	r2,-72(fp)
10001a28:	1009883a 	mov	r4,r2
10001a2c:	01400904 	movi	r5,36
10001a30:	0002cf00 	call	10002cf0 <__mulsi3>
10001a34:	8085883a 	add	r2,r16,r2
10001a38:	10c00417 	ldw	r3,16(r2)
10001a3c:	d8c00015 	stw	r3,0(sp)
10001a40:	10c00517 	ldw	r3,20(r2)
10001a44:	d8c00115 	stw	r3,4(sp)
10001a48:	10c00617 	ldw	r3,24(r2)
10001a4c:	d8c00215 	stw	r3,8(sp)
10001a50:	10c00717 	ldw	r3,28(r2)
10001a54:	d8c00315 	stw	r3,12(sp)
10001a58:	10c00817 	ldw	r3,32(r2)
10001a5c:	d8c00415 	stw	r3,16(sp)
10001a60:	11000017 	ldw	r4,0(r2)
10001a64:	11400117 	ldw	r5,4(r2)
10001a68:	11800217 	ldw	r6,8(r2)
10001a6c:	11c00317 	ldw	r7,12(r2)
10001a70:	0001bc00 	call	10001bc0 <messagePackager>
10001a74:	e0bfef15 	stw	r2,-68(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);
		FPGAmessage[i] = tempPackage;
10001a78:	e0bfee17 	ldw	r2,-72(fp)
10001a7c:	1085883a 	add	r2,r2,r2
10001a80:	1085883a 	add	r2,r2,r2
10001a84:	e0ffee04 	addi	r3,fp,-72
10001a88:	1885883a 	add	r2,r3,r2
10001a8c:	10800204 	addi	r2,r2,8
10001a90:	e0ffef17 	ldw	r3,-68(fp)
10001a94:	10c00015 	stw	r3,0(r2)
	while(*to_sw_sig != 2);

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];
	int i;		// load all of our structs in
	for (i=0; i<16; i++)
10001a98:	e0bfee17 	ldw	r2,-72(fp)
10001a9c:	10800044 	addi	r2,r2,1
10001aa0:	e0bfee15 	stw	r2,-72(fp)
10001aa4:	e0bfee17 	ldw	r2,-72(fp)
10001aa8:	10800410 	cmplti	r2,r2,16
10001aac:	103fdb1e 	bne	r2,zero,10001a1c <__alt_data_end+0xf8001a1c>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
	//	printf("Our %dth message is %llu\n", i, tempPackage);
		FPGAmessage[i] = tempPackage;
	}
	*to_hw_sig = 3;		// our final sending
10001ab0:	00801c04 	movi	r2,112
10001ab4:	00c000c4 	movi	r3,3
10001ab8:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001abc:	00804004 	movi	r2,256
10001ac0:	e0fff017 	ldw	r3,-64(fp)
10001ac4:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001ac8:	00803c04 	movi	r2,240
10001acc:	e0fff117 	ldw	r3,-60(fp)
10001ad0:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001ad4:	00803804 	movi	r2,224
10001ad8:	e0fff217 	ldw	r3,-56(fp)
10001adc:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001ae0:	00803404 	movi	r2,208
10001ae4:	e0fff317 	ldw	r3,-52(fp)
10001ae8:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10001aec:	00803004 	movi	r2,192
10001af0:	e0fff417 	ldw	r3,-48(fp)
10001af4:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001af8:	00802c04 	movi	r2,176
10001afc:	e0fff517 	ldw	r3,-44(fp)
10001b00:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001b04:	00802804 	movi	r2,160
10001b08:	e0fff617 	ldw	r3,-40(fp)
10001b0c:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001b10:	00801804 	movi	r2,96
10001b14:	e0fff717 	ldw	r3,-36(fp)
10001b18:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10001b1c:	00802404 	movi	r2,144
10001b20:	e0fff817 	ldw	r3,-32(fp)
10001b24:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001b28:	00802004 	movi	r2,128
10001b2c:	e0fff917 	ldw	r3,-28(fp)
10001b30:	10c00015 	stw	r3,0(r2)
	*to_hw_port10 = FPGAmessage[10];
10001b34:	00801004 	movi	r2,64
10001b38:	e0fffa17 	ldw	r3,-24(fp)
10001b3c:	10c00015 	stw	r3,0(r2)
	*to_hw_port11 = FPGAmessage[11];
10001b40:	00800c04 	movi	r2,48
10001b44:	e0fffb17 	ldw	r3,-20(fp)
10001b48:	10c00015 	stw	r3,0(r2)
	*to_hw_port12 = FPGAmessage[12];
10001b4c:	00800804 	movi	r2,32
10001b50:	e0fffc17 	ldw	r3,-16(fp)
10001b54:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = FPGAmessage[13];
10001b58:	00805804 	movi	r2,352
10001b5c:	e0fffd17 	ldw	r3,-12(fp)
10001b60:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = FPGAmessage[14];
10001b64:	00805404 	movi	r2,336
10001b68:	e0fffe17 	ldw	r3,-8(fp)
10001b6c:	10c00015 	stw	r3,0(r2)
	*to_hw_port15 = FPGAmessage[15];
10001b70:	00805004 	movi	r2,320
10001b74:	e0ffff17 	ldw	r3,-4(fp)
10001b78:	10c00015 	stw	r3,0(r2)

	// last confirmation
	while(*to_sw_sig != 3);
10001b7c:	0001883a 	nop
10001b80:	00801404 	movi	r2,80
10001b84:	10800003 	ldbu	r2,0(r2)
10001b88:	10803fcc 	andi	r2,r2,255
10001b8c:	1080201c 	xori	r2,r2,128
10001b90:	10bfe004 	addi	r2,r2,-128
10001b94:	108000d8 	cmpnei	r2,r2,3
10001b98:	103ff91e 	bne	r2,zero,10001b80 <__alt_data_end+0xf8001b80>
	*to_hw_sig = 0;
10001b9c:	00801c04 	movi	r2,112
10001ba0:	10000005 	stb	zero,0(r2)

	return;
10001ba4:	0001883a 	nop
}
10001ba8:	e6ffff04 	addi	sp,fp,-4
10001bac:	dfc00217 	ldw	ra,8(sp)
10001bb0:	df000117 	ldw	fp,4(sp)
10001bb4:	dc000017 	ldw	r16,0(sp)
10001bb8:	dec00304 	addi	sp,sp,12
10001bbc:	f800283a 	ret

10001bc0 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10001bc0:	deffee04 	addi	sp,sp,-72
10001bc4:	dfc00d15 	stw	ra,52(sp)
10001bc8:	df000c15 	stw	fp,48(sp)
10001bcc:	dc800b15 	stw	r18,44(sp)
10001bd0:	dc400a15 	stw	r17,40(sp)
10001bd4:	dc000915 	stw	r16,36(sp)
10001bd8:	df000c04 	addi	fp,sp,48
10001bdc:	e1000215 	stw	r4,8(fp)
10001be0:	e1400315 	stw	r5,12(fp)
10001be4:	e1800415 	stw	r6,16(fp)
10001be8:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned int tempDecimal;
	unsigned long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10001bec:	e0800617 	ldw	r2,24(fp)
10001bf0:	e0bff515 	stw	r2,-44(fp)

	if (packageType == 100)		// impossible number for now
10001bf4:	e0bff517 	ldw	r2,-44(fp)
10001bf8:	10801918 	cmpnei	r2,r2,100
10001bfc:	1000261e 	bne	r2,zero,10001c98 <messagePackager+0xd8>
	{
		// this means we are packaging our game package instead
		unsigned long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10001c00:	e0800217 	ldw	r2,8(fp)
10001c04:	e0bff615 	stw	r2,-40(fp)
		tempTime = specifiedObject.yPosition;
10001c08:	e0800317 	ldw	r2,12(fp)
10001c0c:	e0bff715 	stw	r2,-36(fp)
		tempStart = specifiedObject.objectType;
10001c10:	e0800417 	ldw	r2,16(fp)
10001c14:	e0bff815 	stw	r2,-32(fp)
		tempEnd = specifiedObject.objectState;
10001c18:	e0800517 	ldw	r2,20(fp)
10001c1c:	e0bff915 	stw	r2,-28(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10001c20:	e13ff617 	ldw	r4,-40(fp)
10001c24:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001c28:	e0bff615 	stw	r2,-40(fp)
		tempTime = convertDecimalToBinary(tempTime);
10001c2c:	e13ff717 	ldw	r4,-36(fp)
10001c30:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001c34:	e0bff715 	stw	r2,-36(fp)
		tempStart = convertDecimalToBinary(tempStart);
10001c38:	e13ff817 	ldw	r4,-32(fp)
10001c3c:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001c40:	e0bff815 	stw	r2,-32(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10001c44:	e13ff917 	ldw	r4,-28(fp)
10001c48:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001c4c:	e0bff915 	stw	r2,-28(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10001c50:	e13ff717 	ldw	r4,-36(fp)
10001c54:	01402674 	movhi	r5,153
10001c58:	2965a004 	addi	r5,r5,-27008
10001c5c:	0002cf00 	call	10002cf0 <__mulsi3>
10001c60:	1025883a 	mov	r18,r2
10001c64:	e13ff817 	ldw	r4,-32(fp)
10001c68:	01441eb4 	movhi	r5,4218
10001c6c:	29500004 	addi	r5,r5,16384
10001c70:	0002cf00 	call	10002cf0 <__mulsi3>
10001c74:	9087883a 	add	r3,r18,r2
10001c78:	e0bff617 	ldw	r2,-40(fp)
10001c7c:	18a5883a 	add	r18,r3,r2
10001c80:	e13ff917 	ldw	r4,-28(fp)
10001c84:	015762b4 	movhi	r5,23946
10001c88:	0002cf00 	call	10002cf0 <__mulsi3>
10001c8c:	9085883a 	add	r2,r18,r2
10001c90:	e0bff415 	stw	r2,-48(fp)
10001c94:	00001106 	br	10001cdc <messagePackager+0x11c>
		unsigned long tempType, tempState;

		// grab our stuff from the struct
//		tempType = specifiedObject.objectType;
//		tempState = specifiedObject.objectState;
		tempType = 4;
10001c98:	00800104 	movi	r2,4
10001c9c:	e0bffa15 	stw	r2,-24(fp)
		tempState = 7;
10001ca0:	008001c4 	movi	r2,7
10001ca4:	e0bffb15 	stw	r2,-20(fp)

		// and convert stuff to binary!
		tempType = convertDecimalToBinary(tempType);
10001ca8:	e13ffa17 	ldw	r4,-24(fp)
10001cac:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001cb0:	e0bffa15 	stw	r2,-24(fp)
		tempState = convertDecimalToBinary(tempState);
10001cb4:	e13ffb17 	ldw	r4,-20(fp)
10001cb8:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001cbc:	e0bffb15 	stw	r2,-20(fp)
		printf("tempY: %llu   ", tempY);
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/
		// now we append everything together!
		tempBinary = tempState + tempType*1000;
10001cc0:	e13ffa17 	ldw	r4,-24(fp)
10001cc4:	0140fa04 	movi	r5,1000
10001cc8:	0002cf00 	call	10002cf0 <__mulsi3>
10001ccc:	1007883a 	mov	r3,r2
10001cd0:	e0bffb17 	ldw	r2,-20(fp)
10001cd4:	1885883a 	add	r2,r3,r2
10001cd8:	e0bff415 	stw	r2,-48(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001cdc:	e0bff417 	ldw	r2,-48(fp)
10001ce0:	1021883a 	mov	r16,r2
10001ce4:	0023883a 	mov	r17,zero
10001ce8:	8009883a 	mov	r4,r16
10001cec:	880b883a 	mov	r5,r17
10001cf0:	0001e800 	call	10001e80 <convertBinaryToDecimal>
10001cf4:	e0bffc15 	stw	r2,-16(fp)

	// and return it!
	return tempDecimal;
10001cf8:	e0bffc17 	ldw	r2,-16(fp)
}
10001cfc:	e6fffd04 	addi	sp,fp,-12
10001d00:	dfc00417 	ldw	ra,16(sp)
10001d04:	df000317 	ldw	fp,12(sp)
10001d08:	dc800217 	ldw	r18,8(sp)
10001d0c:	dc400117 	ldw	r17,4(sp)
10001d10:	dc000017 	ldw	r16,0(sp)
10001d14:	dec00904 	addi	sp,sp,36
10001d18:	f800283a 	ret

10001d1c <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001d1c:	defff704 	addi	sp,sp,-36
10001d20:	dfc00815 	stw	ra,32(sp)
10001d24:	df000715 	stw	fp,28(sp)
10001d28:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001d2c:	00804404 	movi	r2,272
10001d30:	10800003 	ldbu	r2,0(r2)
10001d34:	10803fcc 	andi	r2,r2,255
10001d38:	1080201c 	xori	r2,r2,128
10001d3c:	10bfe004 	addi	r2,r2,-128
10001d40:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001d44:	e13ff917 	ldw	r4,-28(fp)
10001d48:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001d4c:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001d50:	e03ffa15 	stw	zero,-24(fp)
10001d54:	00001406 	br	10001da8 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001d58:	e0bff917 	ldw	r2,-28(fp)
10001d5c:	1009883a 	mov	r4,r2
10001d60:	01400284 	movi	r5,10
10001d64:	0002ce80 	call	10002ce8 <__umodsi3>
10001d68:	1007883a 	mov	r3,r2
10001d6c:	e0bffa17 	ldw	r2,-24(fp)
10001d70:	1085883a 	add	r2,r2,r2
10001d74:	1085883a 	add	r2,r2,r2
10001d78:	e13ff904 	addi	r4,fp,-28
10001d7c:	2085883a 	add	r2,r4,r2
10001d80:	10800204 	addi	r2,r2,8
10001d84:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001d88:	e0bff917 	ldw	r2,-28(fp)
10001d8c:	1009883a 	mov	r4,r2
10001d90:	01400284 	movi	r5,10
10001d94:	0002ce00 	call	10002ce0 <__udivsi3>
10001d98:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001d9c:	e0bffa17 	ldw	r2,-24(fp)
10001da0:	10800044 	addi	r2,r2,1
10001da4:	e0bffa15 	stw	r2,-24(fp)
10001da8:	e0bffa17 	ldw	r2,-24(fp)
10001dac:	10800150 	cmplti	r2,r2,5
10001db0:	103fe91e 	bne	r2,zero,10001d58 <__alt_data_end+0xf8001d58>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001db4:	e0bffd17 	ldw	r2,-12(fp)
10001db8:	d0a5aa15 	stw	r2,-26968(gp)
	key2 = unpackaged[3];
10001dbc:	e0bffe17 	ldw	r2,-8(fp)
10001dc0:	d0a5ad15 	stw	r2,-26956(gp)
	key3 = unpackaged[4];
10001dc4:	e0bfff17 	ldw	r2,-4(fp)
10001dc8:	d0a5ab15 	stw	r2,-26964(gp)
	cursorStreak = unpackaged[0];
10001dcc:	e0bffb17 	ldw	r2,-20(fp)
10001dd0:	d0a5a715 	stw	r2,-26980(gp)
	cursorClicked = unpackaged[1];
10001dd4:	e0bffc17 	ldw	r2,-16(fp)
10001dd8:	d0a5a615 	stw	r2,-26984(gp)
	xCursor = *to_sw_port3;
10001ddc:	00806004 	movi	r2,384
10001de0:	10800017 	ldw	r2,0(r2)
10001de4:	d0a5a515 	stw	r2,-26988(gp)
	yCursor = *to_sw_port4;
10001de8:	00805c04 	movi	r2,368
10001dec:	10800017 	ldw	r2,0(r2)
10001df0:	d0a5a415 	stw	r2,-26992(gp)

	if(cursorStreak == 0)	// reset combo if cursor no longer streaking
10001df4:	d0a5a717 	ldw	r2,-26980(gp)
10001df8:	1000011e 	bne	r2,zero,10001e00 <port2Unpackager+0xe4>
	{
		comboFruit = 0;
10001dfc:	d025af15 	stw	zero,-26948(gp)
	}
	return;
10001e00:	0001883a 	nop
}
10001e04:	e037883a 	mov	sp,fp
10001e08:	dfc00117 	ldw	ra,4(sp)
10001e0c:	df000017 	ldw	fp,0(sp)
10001e10:	dec00204 	addi	sp,sp,8
10001e14:	f800283a 	ret

10001e18 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001e18:	defffc04 	addi	sp,sp,-16
10001e1c:	dfc00315 	stw	ra,12(sp)
10001e20:	df000215 	stw	fp,8(sp)
10001e24:	dc000115 	stw	r16,4(sp)
10001e28:	df000204 	addi	fp,sp,8
10001e2c:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
10001e30:	e0bffe17 	ldw	r2,-8(fp)
10001e34:	1000021e 	bne	r2,zero,10001e40 <convertDecimalToBinary+0x28>
    {
        return 0;
10001e38:	0005883a 	mov	r2,zero
10001e3c:	00000a06 	br	10001e68 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001e40:	e0bffe17 	ldw	r2,-8(fp)
10001e44:	1400004c 	andi	r16,r2,1
10001e48:	e0bffe17 	ldw	r2,-8(fp)
10001e4c:	1004d07a 	srli	r2,r2,1
10001e50:	1009883a 	mov	r4,r2
10001e54:	0001e180 	call	10001e18 <convertDecimalToBinary>
10001e58:	1009883a 	mov	r4,r2
10001e5c:	01400284 	movi	r5,10
10001e60:	0002cf00 	call	10002cf0 <__mulsi3>
10001e64:	8085883a 	add	r2,r16,r2
    }
}
10001e68:	e6ffff04 	addi	sp,fp,-4
10001e6c:	dfc00217 	ldw	ra,8(sp)
10001e70:	df000117 	ldw	fp,4(sp)
10001e74:	dc000017 	ldw	r16,0(sp)
10001e78:	dec00304 	addi	sp,sp,12
10001e7c:	f800283a 	ret

10001e80 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001e80:	defffa04 	addi	sp,sp,-24
10001e84:	dfc00515 	stw	ra,20(sp)
10001e88:	df000415 	stw	fp,16(sp)
10001e8c:	df000404 	addi	fp,sp,16
10001e90:	e13ffe15 	stw	r4,-8(fp)
10001e94:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001e98:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001e9c:	e03ffd15 	stw	zero,-12(fp)
10001ea0:	00002706 	br	10001f40 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
10001ea4:	e0bffe17 	ldw	r2,-8(fp)
10001ea8:	e0ffff17 	ldw	r3,-4(fp)
10001eac:	01c00284 	movi	r7,10
10001eb0:	0011883a 	mov	r8,zero
10001eb4:	1009883a 	mov	r4,r2
10001eb8:	180b883a 	mov	r5,r3
10001ebc:	380d883a 	mov	r6,r7
10001ec0:	400f883a 	mov	r7,r8
10001ec4:	00025a80 	call	100025a8 <__umoddi3>
10001ec8:	1009883a 	mov	r4,r2
10001ecc:	180b883a 	mov	r5,r3
10001ed0:	2005883a 	mov	r2,r4
10001ed4:	2807883a 	mov	r3,r5
10001ed8:	11000058 	cmpnei	r4,r2,1
10001edc:	2000081e 	bne	r4,zero,10001f00 <convertBinaryToDecimal+0x80>
10001ee0:	1800071e 	bne	r3,zero,10001f00 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001ee4:	00c00044 	movi	r3,1
10001ee8:	e0bffd17 	ldw	r2,-12(fp)
10001eec:	1884983a 	sll	r2,r3,r2
10001ef0:	1007883a 	mov	r3,r2
10001ef4:	e0bffc17 	ldw	r2,-16(fp)
10001ef8:	10c5883a 	add	r2,r2,r3
10001efc:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001f00:	e0bffe17 	ldw	r2,-8(fp)
10001f04:	e0ffff17 	ldw	r3,-4(fp)
10001f08:	01c00284 	movi	r7,10
10001f0c:	0011883a 	mov	r8,zero
10001f10:	1009883a 	mov	r4,r2
10001f14:	180b883a 	mov	r5,r3
10001f18:	380d883a 	mov	r6,r7
10001f1c:	400f883a 	mov	r7,r8
10001f20:	0001f680 	call	10001f68 <__udivdi3>
10001f24:	1009883a 	mov	r4,r2
10001f28:	180b883a 	mov	r5,r3
10001f2c:	e13ffe15 	stw	r4,-8(fp)
10001f30:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001f34:	e0bffd17 	ldw	r2,-12(fp)
10001f38:	10800044 	addi	r2,r2,1
10001f3c:	e0bffd15 	stw	r2,-12(fp)
10001f40:	e0bffe17 	ldw	r2,-8(fp)
10001f44:	e0ffff17 	ldw	r3,-4(fp)
10001f48:	10c4b03a 	or	r2,r2,r3
10001f4c:	103fd51e 	bne	r2,zero,10001ea4 <__alt_data_end+0xf8001ea4>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
10001f50:	e0bffc17 	ldw	r2,-16(fp)
}
10001f54:	e037883a 	mov	sp,fp
10001f58:	dfc00117 	ldw	ra,4(sp)
10001f5c:	df000017 	ldw	fp,0(sp)
10001f60:	dec00204 	addi	sp,sp,8
10001f64:	f800283a 	ret

10001f68 <__udivdi3>:
10001f68:	defff504 	addi	sp,sp,-44
10001f6c:	dcc00415 	stw	r19,16(sp)
10001f70:	dc000115 	stw	r16,4(sp)
10001f74:	dfc00a15 	stw	ra,40(sp)
10001f78:	df000915 	stw	fp,36(sp)
10001f7c:	ddc00815 	stw	r23,32(sp)
10001f80:	dd800715 	stw	r22,28(sp)
10001f84:	dd400615 	stw	r21,24(sp)
10001f88:	dd000515 	stw	r20,20(sp)
10001f8c:	dc800315 	stw	r18,12(sp)
10001f90:	dc400215 	stw	r17,8(sp)
10001f94:	2027883a 	mov	r19,r4
10001f98:	2821883a 	mov	r16,r5
10001f9c:	3800471e 	bne	r7,zero,100020bc <__udivdi3+0x154>
10001fa0:	3025883a 	mov	r18,r6
10001fa4:	2023883a 	mov	r17,r4
10001fa8:	2980592e 	bgeu	r5,r6,10002110 <__udivdi3+0x1a8>
10001fac:	00bfffd4 	movui	r2,65535
10001fb0:	2829883a 	mov	r20,r5
10001fb4:	1180b236 	bltu	r2,r6,10002280 <__udivdi3+0x318>
10001fb8:	00803fc4 	movi	r2,255
10001fbc:	1181622e 	bgeu	r2,r6,10002548 <__udivdi3+0x5e0>
10001fc0:	00800204 	movi	r2,8
10001fc4:	1007883a 	mov	r3,r2
10001fc8:	3084d83a 	srl	r2,r6,r2
10001fcc:	01040034 	movhi	r4,4096
10001fd0:	21190b04 	addi	r4,r4,25644
10001fd4:	2085883a 	add	r2,r4,r2
10001fd8:	11000003 	ldbu	r4,0(r2)
10001fdc:	20c9883a 	add	r4,r4,r3
10001fe0:	00c00804 	movi	r3,32
10001fe4:	1907c83a 	sub	r3,r3,r4
10001fe8:	18000526 	beq	r3,zero,10002000 <__udivdi3+0x98>
10001fec:	80e0983a 	sll	r16,r16,r3
10001ff0:	9908d83a 	srl	r4,r19,r4
10001ff4:	30e4983a 	sll	r18,r6,r3
10001ff8:	98e2983a 	sll	r17,r19,r3
10001ffc:	8128b03a 	or	r20,r16,r4
10002000:	902ad43a 	srli	r21,r18,16
10002004:	a009883a 	mov	r4,r20
10002008:	95bfffcc 	andi	r22,r18,65535
1000200c:	a80b883a 	mov	r5,r21
10002010:	0002ce80 	call	10002ce8 <__umodsi3>
10002014:	a009883a 	mov	r4,r20
10002018:	a80b883a 	mov	r5,r21
1000201c:	102f883a 	mov	r23,r2
10002020:	0002ce00 	call	10002ce0 <__udivsi3>
10002024:	1009883a 	mov	r4,r2
10002028:	b00b883a 	mov	r5,r22
1000202c:	1021883a 	mov	r16,r2
10002030:	0002cf00 	call	10002cf0 <__mulsi3>
10002034:	b82e943a 	slli	r23,r23,16
10002038:	8808d43a 	srli	r4,r17,16
1000203c:	b906b03a 	or	r3,r23,r4
10002040:	1880052e 	bgeu	r3,r2,10002058 <__udivdi3+0xf0>
10002044:	1c87883a 	add	r3,r3,r18
10002048:	813fffc4 	addi	r4,r16,-1
1000204c:	1c800136 	bltu	r3,r18,10002054 <__udivdi3+0xec>
10002050:	18815236 	bltu	r3,r2,1000259c <__udivdi3+0x634>
10002054:	2021883a 	mov	r16,r4
10002058:	18a7c83a 	sub	r19,r3,r2
1000205c:	9809883a 	mov	r4,r19
10002060:	a80b883a 	mov	r5,r21
10002064:	0002ce80 	call	10002ce8 <__umodsi3>
10002068:	1029883a 	mov	r20,r2
1000206c:	9809883a 	mov	r4,r19
10002070:	a80b883a 	mov	r5,r21
10002074:	a028943a 	slli	r20,r20,16
10002078:	0002ce00 	call	10002ce0 <__udivsi3>
1000207c:	1009883a 	mov	r4,r2
10002080:	b00b883a 	mov	r5,r22
10002084:	8c7fffcc 	andi	r17,r17,65535
10002088:	1027883a 	mov	r19,r2
1000208c:	a462b03a 	or	r17,r20,r17
10002090:	0002cf00 	call	10002cf0 <__mulsi3>
10002094:	8880052e 	bgeu	r17,r2,100020ac <__udivdi3+0x144>
10002098:	8ca3883a 	add	r17,r17,r18
1000209c:	98ffffc4 	addi	r3,r19,-1
100020a0:	8c811036 	bltu	r17,r18,100024e4 <__udivdi3+0x57c>
100020a4:	88810f2e 	bgeu	r17,r2,100024e4 <__udivdi3+0x57c>
100020a8:	9cffff84 	addi	r19,r19,-2
100020ac:	8020943a 	slli	r16,r16,16
100020b0:	0007883a 	mov	r3,zero
100020b4:	9c04b03a 	or	r2,r19,r16
100020b8:	00006006 	br	1000223c <__udivdi3+0x2d4>
100020bc:	29c05d36 	bltu	r5,r7,10002234 <__udivdi3+0x2cc>
100020c0:	00bfffd4 	movui	r2,65535
100020c4:	11c0692e 	bgeu	r2,r7,1000226c <__udivdi3+0x304>
100020c8:	00804034 	movhi	r2,256
100020cc:	10bfffc4 	addi	r2,r2,-1
100020d0:	11c10e2e 	bgeu	r2,r7,1000250c <__udivdi3+0x5a4>
100020d4:	01400604 	movi	r5,24
100020d8:	2811883a 	mov	r8,r5
100020dc:	394ad83a 	srl	r5,r7,r5
100020e0:	00840034 	movhi	r2,4096
100020e4:	10990b04 	addi	r2,r2,25644
100020e8:	114b883a 	add	r5,r2,r5
100020ec:	29400003 	ldbu	r5,0(r5)
100020f0:	00c00804 	movi	r3,32
100020f4:	2a0b883a 	add	r5,r5,r8
100020f8:	196fc83a 	sub	r23,r3,r5
100020fc:	b8006b1e 	bne	r23,zero,100022ac <__udivdi3+0x344>
10002100:	3c011436 	bltu	r7,r16,10002554 <__udivdi3+0x5ec>
10002104:	9985403a 	cmpgeu	r2,r19,r6
10002108:	0007883a 	mov	r3,zero
1000210c:	00004b06 	br	1000223c <__udivdi3+0x2d4>
10002110:	3000041e 	bne	r6,zero,10002124 <__udivdi3+0x1bc>
10002114:	01000044 	movi	r4,1
10002118:	000b883a 	mov	r5,zero
1000211c:	0002ce00 	call	10002ce0 <__udivsi3>
10002120:	1025883a 	mov	r18,r2
10002124:	00bfffd4 	movui	r2,65535
10002128:	14805b2e 	bgeu	r2,r18,10002298 <__udivdi3+0x330>
1000212c:	00804034 	movhi	r2,256
10002130:	10bfffc4 	addi	r2,r2,-1
10002134:	1480fe2e 	bgeu	r2,r18,10002530 <__udivdi3+0x5c8>
10002138:	00800604 	movi	r2,24
1000213c:	1007883a 	mov	r3,r2
10002140:	9084d83a 	srl	r2,r18,r2
10002144:	01040034 	movhi	r4,4096
10002148:	21190b04 	addi	r4,r4,25644
1000214c:	2085883a 	add	r2,r4,r2
10002150:	11800003 	ldbu	r6,0(r2)
10002154:	01c00804 	movi	r7,32
10002158:	30c7883a 	add	r3,r6,r3
1000215c:	38cfc83a 	sub	r7,r7,r3
10002160:	3800a71e 	bne	r7,zero,10002400 <__udivdi3+0x498>
10002164:	9028d43a 	srli	r20,r18,16
10002168:	84a1c83a 	sub	r16,r16,r18
1000216c:	957fffcc 	andi	r21,r18,65535
10002170:	00c00044 	movi	r3,1
10002174:	8009883a 	mov	r4,r16
10002178:	a00b883a 	mov	r5,r20
1000217c:	d8c00015 	stw	r3,0(sp)
10002180:	0002ce80 	call	10002ce8 <__umodsi3>
10002184:	8009883a 	mov	r4,r16
10002188:	a00b883a 	mov	r5,r20
1000218c:	102d883a 	mov	r22,r2
10002190:	0002ce00 	call	10002ce0 <__udivsi3>
10002194:	1009883a 	mov	r4,r2
10002198:	a80b883a 	mov	r5,r21
1000219c:	1021883a 	mov	r16,r2
100021a0:	0002cf00 	call	10002cf0 <__mulsi3>
100021a4:	b02c943a 	slli	r22,r22,16
100021a8:	880ed43a 	srli	r7,r17,16
100021ac:	d8c00017 	ldw	r3,0(sp)
100021b0:	b1ccb03a 	or	r6,r22,r7
100021b4:	3080052e 	bgeu	r6,r2,100021cc <__udivdi3+0x264>
100021b8:	348d883a 	add	r6,r6,r18
100021bc:	813fffc4 	addi	r4,r16,-1
100021c0:	34800136 	bltu	r6,r18,100021c8 <__udivdi3+0x260>
100021c4:	3080f236 	bltu	r6,r2,10002590 <__udivdi3+0x628>
100021c8:	2021883a 	mov	r16,r4
100021cc:	30a7c83a 	sub	r19,r6,r2
100021d0:	9809883a 	mov	r4,r19
100021d4:	a00b883a 	mov	r5,r20
100021d8:	d8c00015 	stw	r3,0(sp)
100021dc:	0002ce80 	call	10002ce8 <__umodsi3>
100021e0:	102d883a 	mov	r22,r2
100021e4:	9809883a 	mov	r4,r19
100021e8:	a00b883a 	mov	r5,r20
100021ec:	b02c943a 	slli	r22,r22,16
100021f0:	0002ce00 	call	10002ce0 <__udivsi3>
100021f4:	1009883a 	mov	r4,r2
100021f8:	a80b883a 	mov	r5,r21
100021fc:	8c7fffcc 	andi	r17,r17,65535
10002200:	1027883a 	mov	r19,r2
10002204:	b462b03a 	or	r17,r22,r17
10002208:	0002cf00 	call	10002cf0 <__mulsi3>
1000220c:	d8c00017 	ldw	r3,0(sp)
10002210:	8880052e 	bgeu	r17,r2,10002228 <__udivdi3+0x2c0>
10002214:	8ca3883a 	add	r17,r17,r18
10002218:	993fffc4 	addi	r4,r19,-1
1000221c:	8c80af36 	bltu	r17,r18,100024dc <__udivdi3+0x574>
10002220:	8880ae2e 	bgeu	r17,r2,100024dc <__udivdi3+0x574>
10002224:	9cffff84 	addi	r19,r19,-2
10002228:	8020943a 	slli	r16,r16,16
1000222c:	9c04b03a 	or	r2,r19,r16
10002230:	00000206 	br	1000223c <__udivdi3+0x2d4>
10002234:	0007883a 	mov	r3,zero
10002238:	0005883a 	mov	r2,zero
1000223c:	dfc00a17 	ldw	ra,40(sp)
10002240:	df000917 	ldw	fp,36(sp)
10002244:	ddc00817 	ldw	r23,32(sp)
10002248:	dd800717 	ldw	r22,28(sp)
1000224c:	dd400617 	ldw	r21,24(sp)
10002250:	dd000517 	ldw	r20,20(sp)
10002254:	dcc00417 	ldw	r19,16(sp)
10002258:	dc800317 	ldw	r18,12(sp)
1000225c:	dc400217 	ldw	r17,8(sp)
10002260:	dc000117 	ldw	r16,4(sp)
10002264:	dec00b04 	addi	sp,sp,44
10002268:	f800283a 	ret
1000226c:	00803fc4 	movi	r2,255
10002270:	11c0a92e 	bgeu	r2,r7,10002518 <__udivdi3+0x5b0>
10002274:	01400204 	movi	r5,8
10002278:	2811883a 	mov	r8,r5
1000227c:	003f9706 	br	100020dc <__alt_data_end+0xf80020dc>
10002280:	00804034 	movhi	r2,256
10002284:	10bfffc4 	addi	r2,r2,-1
10002288:	1180a62e 	bgeu	r2,r6,10002524 <__udivdi3+0x5bc>
1000228c:	00800604 	movi	r2,24
10002290:	1007883a 	mov	r3,r2
10002294:	003f4c06 	br	10001fc8 <__alt_data_end+0xf8001fc8>
10002298:	00803fc4 	movi	r2,255
1000229c:	1480a72e 	bgeu	r2,r18,1000253c <__udivdi3+0x5d4>
100022a0:	00800204 	movi	r2,8
100022a4:	1007883a 	mov	r3,r2
100022a8:	003fa506 	br	10002140 <__alt_data_end+0xf8002140>
100022ac:	3178d83a 	srl	fp,r6,r5
100022b0:	3dce983a 	sll	r7,r7,r23
100022b4:	8168d83a 	srl	r20,r16,r5
100022b8:	9950d83a 	srl	r8,r19,r5
100022bc:	3f38b03a 	or	fp,r7,fp
100022c0:	e024d43a 	srli	r18,fp,16
100022c4:	85e0983a 	sll	r16,r16,r23
100022c8:	a009883a 	mov	r4,r20
100022cc:	900b883a 	mov	r5,r18
100022d0:	8220b03a 	or	r16,r16,r8
100022d4:	35ea983a 	sll	r21,r6,r23
100022d8:	0002ce80 	call	10002ce8 <__umodsi3>
100022dc:	a009883a 	mov	r4,r20
100022e0:	900b883a 	mov	r5,r18
100022e4:	1023883a 	mov	r17,r2
100022e8:	e5bfffcc 	andi	r22,fp,65535
100022ec:	0002ce00 	call	10002ce0 <__udivsi3>
100022f0:	1009883a 	mov	r4,r2
100022f4:	b00b883a 	mov	r5,r22
100022f8:	1029883a 	mov	r20,r2
100022fc:	0002cf00 	call	10002cf0 <__mulsi3>
10002300:	8806943a 	slli	r3,r17,16
10002304:	8014d43a 	srli	r10,r16,16
10002308:	1a92b03a 	or	r9,r3,r10
1000230c:	4880042e 	bgeu	r9,r2,10002320 <__udivdi3+0x3b8>
10002310:	4f13883a 	add	r9,r9,fp
10002314:	a0ffffc4 	addi	r3,r20,-1
10002318:	4f00952e 	bgeu	r9,fp,10002570 <__udivdi3+0x608>
1000231c:	1829883a 	mov	r20,r3
10002320:	48a3c83a 	sub	r17,r9,r2
10002324:	8809883a 	mov	r4,r17
10002328:	900b883a 	mov	r5,r18
1000232c:	0002ce80 	call	10002ce8 <__umodsi3>
10002330:	8809883a 	mov	r4,r17
10002334:	900b883a 	mov	r5,r18
10002338:	d8800015 	stw	r2,0(sp)
1000233c:	0002ce00 	call	10002ce0 <__udivsi3>
10002340:	1009883a 	mov	r4,r2
10002344:	b00b883a 	mov	r5,r22
10002348:	1023883a 	mov	r17,r2
1000234c:	0002cf00 	call	10002cf0 <__mulsi3>
10002350:	d8c00017 	ldw	r3,0(sp)
10002354:	823fffcc 	andi	r8,r16,65535
10002358:	1806943a 	slli	r3,r3,16
1000235c:	1a20b03a 	or	r16,r3,r8
10002360:	8080042e 	bgeu	r16,r2,10002374 <__udivdi3+0x40c>
10002364:	8721883a 	add	r16,r16,fp
10002368:	88ffffc4 	addi	r3,r17,-1
1000236c:	87007c2e 	bgeu	r16,fp,10002560 <__udivdi3+0x5f8>
10002370:	1823883a 	mov	r17,r3
10002374:	a028943a 	slli	r20,r20,16
10002378:	acbfffcc 	andi	r18,r21,65535
1000237c:	900b883a 	mov	r5,r18
10002380:	8d28b03a 	or	r20,r17,r20
10002384:	a022d43a 	srli	r17,r20,16
10002388:	a5bfffcc 	andi	r22,r20,65535
1000238c:	b009883a 	mov	r4,r22
10002390:	a82ad43a 	srli	r21,r21,16
10002394:	80a1c83a 	sub	r16,r16,r2
10002398:	0002cf00 	call	10002cf0 <__mulsi3>
1000239c:	8809883a 	mov	r4,r17
100023a0:	900b883a 	mov	r5,r18
100023a4:	1039883a 	mov	fp,r2
100023a8:	0002cf00 	call	10002cf0 <__mulsi3>
100023ac:	8809883a 	mov	r4,r17
100023b0:	a80b883a 	mov	r5,r21
100023b4:	1025883a 	mov	r18,r2
100023b8:	0002cf00 	call	10002cf0 <__mulsi3>
100023bc:	b009883a 	mov	r4,r22
100023c0:	a80b883a 	mov	r5,r21
100023c4:	1023883a 	mov	r17,r2
100023c8:	0002cf00 	call	10002cf0 <__mulsi3>
100023cc:	e006d43a 	srli	r3,fp,16
100023d0:	9085883a 	add	r2,r18,r2
100023d4:	10c7883a 	add	r3,r2,r3
100023d8:	1c80022e 	bgeu	r3,r18,100023e4 <__udivdi3+0x47c>
100023dc:	00800074 	movhi	r2,1
100023e0:	88a3883a 	add	r17,r17,r2
100023e4:	1808d43a 	srli	r4,r3,16
100023e8:	8909883a 	add	r4,r17,r4
100023ec:	81004436 	bltu	r16,r4,10002500 <__udivdi3+0x598>
100023f0:	81003e26 	beq	r16,r4,100024ec <__udivdi3+0x584>
100023f4:	a005883a 	mov	r2,r20
100023f8:	0007883a 	mov	r3,zero
100023fc:	003f8f06 	br	1000223c <__alt_data_end+0xf800223c>
10002400:	91e4983a 	sll	r18,r18,r7
10002404:	80eed83a 	srl	r23,r16,r3
10002408:	81cc983a 	sll	r6,r16,r7
1000240c:	9028d43a 	srli	r20,r18,16
10002410:	98c6d83a 	srl	r3,r19,r3
10002414:	b809883a 	mov	r4,r23
10002418:	a00b883a 	mov	r5,r20
1000241c:	30ecb03a 	or	r22,r6,r3
10002420:	99e2983a 	sll	r17,r19,r7
10002424:	0002ce80 	call	10002ce8 <__umodsi3>
10002428:	b809883a 	mov	r4,r23
1000242c:	a00b883a 	mov	r5,r20
10002430:	1021883a 	mov	r16,r2
10002434:	957fffcc 	andi	r21,r18,65535
10002438:	0002ce00 	call	10002ce0 <__udivsi3>
1000243c:	a80b883a 	mov	r5,r21
10002440:	1009883a 	mov	r4,r2
10002444:	102f883a 	mov	r23,r2
10002448:	0002cf00 	call	10002cf0 <__mulsi3>
1000244c:	8020943a 	slli	r16,r16,16
10002450:	b00ad43a 	srli	r5,r22,16
10002454:	814cb03a 	or	r6,r16,r5
10002458:	3080062e 	bgeu	r6,r2,10002474 <__udivdi3+0x50c>
1000245c:	348d883a 	add	r6,r6,r18
10002460:	b8ffffc4 	addi	r3,r23,-1
10002464:	34804836 	bltu	r6,r18,10002588 <__udivdi3+0x620>
10002468:	3080472e 	bgeu	r6,r2,10002588 <__udivdi3+0x620>
1000246c:	bdffff84 	addi	r23,r23,-2
10002470:	348d883a 	add	r6,r6,r18
10002474:	30a7c83a 	sub	r19,r6,r2
10002478:	9809883a 	mov	r4,r19
1000247c:	a00b883a 	mov	r5,r20
10002480:	0002ce80 	call	10002ce8 <__umodsi3>
10002484:	9809883a 	mov	r4,r19
10002488:	a00b883a 	mov	r5,r20
1000248c:	1039883a 	mov	fp,r2
10002490:	0002ce00 	call	10002ce0 <__udivsi3>
10002494:	1009883a 	mov	r4,r2
10002498:	a80b883a 	mov	r5,r21
1000249c:	e038943a 	slli	fp,fp,16
100024a0:	1027883a 	mov	r19,r2
100024a4:	0002cf00 	call	10002cf0 <__mulsi3>
100024a8:	b1bfffcc 	andi	r6,r22,65535
100024ac:	e18cb03a 	or	r6,fp,r6
100024b0:	3080062e 	bgeu	r6,r2,100024cc <__udivdi3+0x564>
100024b4:	348d883a 	add	r6,r6,r18
100024b8:	98ffffc4 	addi	r3,r19,-1
100024bc:	34803036 	bltu	r6,r18,10002580 <__udivdi3+0x618>
100024c0:	30802f2e 	bgeu	r6,r2,10002580 <__udivdi3+0x618>
100024c4:	9cffff84 	addi	r19,r19,-2
100024c8:	348d883a 	add	r6,r6,r18
100024cc:	b82e943a 	slli	r23,r23,16
100024d0:	30a1c83a 	sub	r16,r6,r2
100024d4:	9dc6b03a 	or	r3,r19,r23
100024d8:	003f2606 	br	10002174 <__alt_data_end+0xf8002174>
100024dc:	2027883a 	mov	r19,r4
100024e0:	003f5106 	br	10002228 <__alt_data_end+0xf8002228>
100024e4:	1827883a 	mov	r19,r3
100024e8:	003ef006 	br	100020ac <__alt_data_end+0xf80020ac>
100024ec:	1808943a 	slli	r4,r3,16
100024f0:	9dc6983a 	sll	r3,r19,r23
100024f4:	e73fffcc 	andi	fp,fp,65535
100024f8:	2709883a 	add	r4,r4,fp
100024fc:	193fbd2e 	bgeu	r3,r4,100023f4 <__alt_data_end+0xf80023f4>
10002500:	a0bfffc4 	addi	r2,r20,-1
10002504:	0007883a 	mov	r3,zero
10002508:	003f4c06 	br	1000223c <__alt_data_end+0xf800223c>
1000250c:	01400404 	movi	r5,16
10002510:	2811883a 	mov	r8,r5
10002514:	003ef106 	br	100020dc <__alt_data_end+0xf80020dc>
10002518:	000b883a 	mov	r5,zero
1000251c:	0011883a 	mov	r8,zero
10002520:	003eee06 	br	100020dc <__alt_data_end+0xf80020dc>
10002524:	00800404 	movi	r2,16
10002528:	1007883a 	mov	r3,r2
1000252c:	003ea606 	br	10001fc8 <__alt_data_end+0xf8001fc8>
10002530:	00800404 	movi	r2,16
10002534:	1007883a 	mov	r3,r2
10002538:	003f0106 	br	10002140 <__alt_data_end+0xf8002140>
1000253c:	0005883a 	mov	r2,zero
10002540:	0007883a 	mov	r3,zero
10002544:	003efe06 	br	10002140 <__alt_data_end+0xf8002140>
10002548:	0005883a 	mov	r2,zero
1000254c:	0007883a 	mov	r3,zero
10002550:	003e9d06 	br	10001fc8 <__alt_data_end+0xf8001fc8>
10002554:	0007883a 	mov	r3,zero
10002558:	00800044 	movi	r2,1
1000255c:	003f3706 	br	1000223c <__alt_data_end+0xf800223c>
10002560:	80bf832e 	bgeu	r16,r2,10002370 <__alt_data_end+0xf8002370>
10002564:	8c7fff84 	addi	r17,r17,-2
10002568:	8721883a 	add	r16,r16,fp
1000256c:	003f8106 	br	10002374 <__alt_data_end+0xf8002374>
10002570:	48bf6a2e 	bgeu	r9,r2,1000231c <__alt_data_end+0xf800231c>
10002574:	a53fff84 	addi	r20,r20,-2
10002578:	4f13883a 	add	r9,r9,fp
1000257c:	003f6806 	br	10002320 <__alt_data_end+0xf8002320>
10002580:	1827883a 	mov	r19,r3
10002584:	003fd106 	br	100024cc <__alt_data_end+0xf80024cc>
10002588:	182f883a 	mov	r23,r3
1000258c:	003fb906 	br	10002474 <__alt_data_end+0xf8002474>
10002590:	843fff84 	addi	r16,r16,-2
10002594:	348d883a 	add	r6,r6,r18
10002598:	003f0c06 	br	100021cc <__alt_data_end+0xf80021cc>
1000259c:	843fff84 	addi	r16,r16,-2
100025a0:	1c87883a 	add	r3,r3,r18
100025a4:	003eac06 	br	10002058 <__alt_data_end+0xf8002058>

100025a8 <__umoddi3>:
100025a8:	defff404 	addi	sp,sp,-48
100025ac:	dd800815 	stw	r22,32(sp)
100025b0:	dc400315 	stw	r17,12(sp)
100025b4:	dc000215 	stw	r16,8(sp)
100025b8:	dfc00b15 	stw	ra,44(sp)
100025bc:	df000a15 	stw	fp,40(sp)
100025c0:	ddc00915 	stw	r23,36(sp)
100025c4:	dd400715 	stw	r21,28(sp)
100025c8:	dd000615 	stw	r20,24(sp)
100025cc:	dcc00515 	stw	r19,20(sp)
100025d0:	dc800415 	stw	r18,16(sp)
100025d4:	2021883a 	mov	r16,r4
100025d8:	2823883a 	mov	r17,r5
100025dc:	282d883a 	mov	r22,r5
100025e0:	38003c1e 	bne	r7,zero,100026d4 <__umoddi3+0x12c>
100025e4:	3027883a 	mov	r19,r6
100025e8:	2029883a 	mov	r20,r4
100025ec:	2980522e 	bgeu	r5,r6,10002738 <__umoddi3+0x190>
100025f0:	00bfffd4 	movui	r2,65535
100025f4:	1180a436 	bltu	r2,r6,10002888 <__umoddi3+0x2e0>
100025f8:	00803fc4 	movi	r2,255
100025fc:	11815e2e 	bgeu	r2,r6,10002b78 <__umoddi3+0x5d0>
10002600:	01400204 	movi	r5,8
10002604:	2805883a 	mov	r2,r5
10002608:	314ad83a 	srl	r5,r6,r5
1000260c:	00c40034 	movhi	r3,4096
10002610:	18d90b04 	addi	r3,r3,25644
10002614:	194b883a 	add	r5,r3,r5
10002618:	29000003 	ldbu	r4,0(r5)
1000261c:	2089883a 	add	r4,r4,r2
10002620:	00800804 	movi	r2,32
10002624:	1105c83a 	sub	r2,r2,r4
10002628:	10010c26 	beq	r2,zero,10002a5c <__umoddi3+0x4b4>
1000262c:	88a2983a 	sll	r17,r17,r2
10002630:	8108d83a 	srl	r4,r16,r4
10002634:	30a6983a 	sll	r19,r6,r2
10002638:	80a8983a 	sll	r20,r16,r2
1000263c:	1025883a 	mov	r18,r2
10002640:	892cb03a 	or	r22,r17,r4
10002644:	9822d43a 	srli	r17,r19,16
10002648:	b009883a 	mov	r4,r22
1000264c:	9d7fffcc 	andi	r21,r19,65535
10002650:	880b883a 	mov	r5,r17
10002654:	0002ce80 	call	10002ce8 <__umodsi3>
10002658:	b009883a 	mov	r4,r22
1000265c:	880b883a 	mov	r5,r17
10002660:	102f883a 	mov	r23,r2
10002664:	0002ce00 	call	10002ce0 <__udivsi3>
10002668:	1009883a 	mov	r4,r2
1000266c:	a80b883a 	mov	r5,r21
10002670:	0002cf00 	call	10002cf0 <__mulsi3>
10002674:	b82e943a 	slli	r23,r23,16
10002678:	a008d43a 	srli	r4,r20,16
1000267c:	b906b03a 	or	r3,r23,r4
10002680:	1880042e 	bgeu	r3,r2,10002694 <__umoddi3+0xec>
10002684:	1cc7883a 	add	r3,r3,r19
10002688:	1cc00236 	bltu	r3,r19,10002694 <__umoddi3+0xec>
1000268c:	1880012e 	bgeu	r3,r2,10002694 <__umoddi3+0xec>
10002690:	1cc7883a 	add	r3,r3,r19
10002694:	18a1c83a 	sub	r16,r3,r2
10002698:	8009883a 	mov	r4,r16
1000269c:	880b883a 	mov	r5,r17
100026a0:	0002ce80 	call	10002ce8 <__umodsi3>
100026a4:	8009883a 	mov	r4,r16
100026a8:	880b883a 	mov	r5,r17
100026ac:	102d883a 	mov	r22,r2
100026b0:	0002ce00 	call	10002ce0 <__udivsi3>
100026b4:	1009883a 	mov	r4,r2
100026b8:	a80b883a 	mov	r5,r21
100026bc:	b02c943a 	slli	r22,r22,16
100026c0:	0002cf00 	call	10002cf0 <__mulsi3>
100026c4:	a13fffcc 	andi	r4,r20,65535
100026c8:	b106b03a 	or	r3,r22,r4
100026cc:	1880572e 	bgeu	r3,r2,1000282c <__umoddi3+0x284>
100026d0:	00005206 	br	1000281c <__umoddi3+0x274>
100026d4:	29c05936 	bltu	r5,r7,1000283c <__umoddi3+0x294>
100026d8:	00bfffd4 	movui	r2,65535
100026dc:	11c0652e 	bgeu	r2,r7,10002874 <__umoddi3+0x2cc>
100026e0:	00804034 	movhi	r2,256
100026e4:	10bfffc4 	addi	r2,r2,-1
100026e8:	11c1172e 	bgeu	r2,r7,10002b48 <__umoddi3+0x5a0>
100026ec:	01400604 	movi	r5,24
100026f0:	282b883a 	mov	r21,r5
100026f4:	394ad83a 	srl	r5,r7,r5
100026f8:	00c40034 	movhi	r3,4096
100026fc:	18d90b04 	addi	r3,r3,25644
10002700:	194b883a 	add	r5,r3,r5
10002704:	28800003 	ldbu	r2,0(r5)
10002708:	00c00804 	movi	r3,32
1000270c:	156b883a 	add	r21,r2,r21
10002710:	1d69c83a 	sub	r20,r3,r21
10002714:	a000671e 	bne	r20,zero,100028b4 <__umoddi3+0x30c>
10002718:	3c400136 	bltu	r7,r17,10002720 <__umoddi3+0x178>
1000271c:	81812336 	bltu	r16,r6,10002bac <__umoddi3+0x604>
10002720:	8185c83a 	sub	r2,r16,r6
10002724:	89e3c83a 	sub	r17,r17,r7
10002728:	8087803a 	cmpltu	r3,r16,r2
1000272c:	88edc83a 	sub	r22,r17,r3
10002730:	b007883a 	mov	r3,r22
10002734:	00004306 	br	10002844 <__umoddi3+0x29c>
10002738:	3000041e 	bne	r6,zero,1000274c <__umoddi3+0x1a4>
1000273c:	01000044 	movi	r4,1
10002740:	000b883a 	mov	r5,zero
10002744:	0002ce00 	call	10002ce0 <__udivsi3>
10002748:	1027883a 	mov	r19,r2
1000274c:	00bfffd4 	movui	r2,65535
10002750:	14c0532e 	bgeu	r2,r19,100028a0 <__umoddi3+0x2f8>
10002754:	00804034 	movhi	r2,256
10002758:	10bfffc4 	addi	r2,r2,-1
1000275c:	14c1032e 	bgeu	r2,r19,10002b6c <__umoddi3+0x5c4>
10002760:	00800604 	movi	r2,24
10002764:	1007883a 	mov	r3,r2
10002768:	9884d83a 	srl	r2,r19,r2
1000276c:	01040034 	movhi	r4,4096
10002770:	21190b04 	addi	r4,r4,25644
10002774:	2085883a 	add	r2,r4,r2
10002778:	11000003 	ldbu	r4,0(r2)
1000277c:	00800804 	movi	r2,32
10002780:	20c7883a 	add	r3,r4,r3
10002784:	10c5c83a 	sub	r2,r2,r3
10002788:	1000b61e 	bne	r2,zero,10002a64 <__umoddi3+0x4bc>
1000278c:	982ad43a 	srli	r21,r19,16
10002790:	8ce3c83a 	sub	r17,r17,r19
10002794:	9dbfffcc 	andi	r22,r19,65535
10002798:	0025883a 	mov	r18,zero
1000279c:	8809883a 	mov	r4,r17
100027a0:	a80b883a 	mov	r5,r21
100027a4:	0002ce80 	call	10002ce8 <__umodsi3>
100027a8:	8809883a 	mov	r4,r17
100027ac:	a80b883a 	mov	r5,r21
100027b0:	102f883a 	mov	r23,r2
100027b4:	0002ce00 	call	10002ce0 <__udivsi3>
100027b8:	1009883a 	mov	r4,r2
100027bc:	b00b883a 	mov	r5,r22
100027c0:	0002cf00 	call	10002cf0 <__mulsi3>
100027c4:	b82e943a 	slli	r23,r23,16
100027c8:	a008d43a 	srli	r4,r20,16
100027cc:	b906b03a 	or	r3,r23,r4
100027d0:	1880032e 	bgeu	r3,r2,100027e0 <__umoddi3+0x238>
100027d4:	1cc7883a 	add	r3,r3,r19
100027d8:	1cc00136 	bltu	r3,r19,100027e0 <__umoddi3+0x238>
100027dc:	1880f136 	bltu	r3,r2,10002ba4 <__umoddi3+0x5fc>
100027e0:	18a1c83a 	sub	r16,r3,r2
100027e4:	8009883a 	mov	r4,r16
100027e8:	a80b883a 	mov	r5,r21
100027ec:	0002ce80 	call	10002ce8 <__umodsi3>
100027f0:	8009883a 	mov	r4,r16
100027f4:	a80b883a 	mov	r5,r21
100027f8:	1023883a 	mov	r17,r2
100027fc:	0002ce00 	call	10002ce0 <__udivsi3>
10002800:	1009883a 	mov	r4,r2
10002804:	b00b883a 	mov	r5,r22
10002808:	8822943a 	slli	r17,r17,16
1000280c:	0002cf00 	call	10002cf0 <__mulsi3>
10002810:	a13fffcc 	andi	r4,r20,65535
10002814:	8906b03a 	or	r3,r17,r4
10002818:	1880042e 	bgeu	r3,r2,1000282c <__umoddi3+0x284>
1000281c:	1cc7883a 	add	r3,r3,r19
10002820:	1cc00236 	bltu	r3,r19,1000282c <__umoddi3+0x284>
10002824:	1880012e 	bgeu	r3,r2,1000282c <__umoddi3+0x284>
10002828:	1cc7883a 	add	r3,r3,r19
1000282c:	1887c83a 	sub	r3,r3,r2
10002830:	1c84d83a 	srl	r2,r3,r18
10002834:	0007883a 	mov	r3,zero
10002838:	00000206 	br	10002844 <__umoddi3+0x29c>
1000283c:	2005883a 	mov	r2,r4
10002840:	2807883a 	mov	r3,r5
10002844:	dfc00b17 	ldw	ra,44(sp)
10002848:	df000a17 	ldw	fp,40(sp)
1000284c:	ddc00917 	ldw	r23,36(sp)
10002850:	dd800817 	ldw	r22,32(sp)
10002854:	dd400717 	ldw	r21,28(sp)
10002858:	dd000617 	ldw	r20,24(sp)
1000285c:	dcc00517 	ldw	r19,20(sp)
10002860:	dc800417 	ldw	r18,16(sp)
10002864:	dc400317 	ldw	r17,12(sp)
10002868:	dc000217 	ldw	r16,8(sp)
1000286c:	dec00c04 	addi	sp,sp,48
10002870:	f800283a 	ret
10002874:	00803fc4 	movi	r2,255
10002878:	11c0b02e 	bgeu	r2,r7,10002b3c <__umoddi3+0x594>
1000287c:	01400204 	movi	r5,8
10002880:	282b883a 	mov	r21,r5
10002884:	003f9b06 	br	100026f4 <__alt_data_end+0xf80026f4>
10002888:	00804034 	movhi	r2,256
1000288c:	10bfffc4 	addi	r2,r2,-1
10002890:	1180b02e 	bgeu	r2,r6,10002b54 <__umoddi3+0x5ac>
10002894:	01400604 	movi	r5,24
10002898:	2805883a 	mov	r2,r5
1000289c:	003f5a06 	br	10002608 <__alt_data_end+0xf8002608>
100028a0:	00803fc4 	movi	r2,255
100028a4:	14c0ae2e 	bgeu	r2,r19,10002b60 <__umoddi3+0x5b8>
100028a8:	00800204 	movi	r2,8
100028ac:	1007883a 	mov	r3,r2
100028b0:	003fad06 	br	10002768 <__alt_data_end+0xf8002768>
100028b4:	3d0a983a 	sll	r5,r7,r20
100028b8:	356cd83a 	srl	r22,r6,r21
100028bc:	8d78d83a 	srl	fp,r17,r21
100028c0:	8d10983a 	sll	r8,r17,r20
100028c4:	2dacb03a 	or	r22,r5,r22
100028c8:	b02ed43a 	srli	r23,r22,16
100028cc:	8564d83a 	srl	r18,r16,r21
100028d0:	e009883a 	mov	r4,fp
100028d4:	b80b883a 	mov	r5,r23
100028d8:	44a4b03a 	or	r18,r8,r18
100028dc:	3526983a 	sll	r19,r6,r20
100028e0:	0002ce80 	call	10002ce8 <__umodsi3>
100028e4:	e009883a 	mov	r4,fp
100028e8:	b80b883a 	mov	r5,r23
100028ec:	b47fffcc 	andi	r17,r22,65535
100028f0:	d8800015 	stw	r2,0(sp)
100028f4:	0002ce00 	call	10002ce0 <__udivsi3>
100028f8:	1009883a 	mov	r4,r2
100028fc:	880b883a 	mov	r5,r17
10002900:	1039883a 	mov	fp,r2
10002904:	0002cf00 	call	10002cf0 <__mulsi3>
10002908:	d9800017 	ldw	r6,0(sp)
1000290c:	9008d43a 	srli	r4,r18,16
10002910:	8520983a 	sll	r16,r16,r20
10002914:	300c943a 	slli	r6,r6,16
10002918:	3106b03a 	or	r3,r6,r4
1000291c:	1880042e 	bgeu	r3,r2,10002930 <__umoddi3+0x388>
10002920:	1d87883a 	add	r3,r3,r22
10002924:	e13fffc4 	addi	r4,fp,-1
10002928:	1d809a2e 	bgeu	r3,r22,10002b94 <__umoddi3+0x5ec>
1000292c:	2039883a 	mov	fp,r4
10002930:	1887c83a 	sub	r3,r3,r2
10002934:	1809883a 	mov	r4,r3
10002938:	b80b883a 	mov	r5,r23
1000293c:	d8c00115 	stw	r3,4(sp)
10002940:	0002ce80 	call	10002ce8 <__umodsi3>
10002944:	d8c00117 	ldw	r3,4(sp)
10002948:	b80b883a 	mov	r5,r23
1000294c:	d8800015 	stw	r2,0(sp)
10002950:	1809883a 	mov	r4,r3
10002954:	0002ce00 	call	10002ce0 <__udivsi3>
10002958:	880b883a 	mov	r5,r17
1000295c:	1009883a 	mov	r4,r2
10002960:	102f883a 	mov	r23,r2
10002964:	0002cf00 	call	10002cf0 <__mulsi3>
10002968:	d9800017 	ldw	r6,0(sp)
1000296c:	947fffcc 	andi	r17,r18,65535
10002970:	300c943a 	slli	r6,r6,16
10002974:	3464b03a 	or	r18,r6,r17
10002978:	9080042e 	bgeu	r18,r2,1000298c <__umoddi3+0x3e4>
1000297c:	95a5883a 	add	r18,r18,r22
10002980:	b8ffffc4 	addi	r3,r23,-1
10002984:	95807f2e 	bgeu	r18,r22,10002b84 <__umoddi3+0x5dc>
10002988:	182f883a 	mov	r23,r3
1000298c:	e038943a 	slli	fp,fp,16
10002990:	980cd43a 	srli	r6,r19,16
10002994:	98ffffcc 	andi	r3,r19,65535
10002998:	bf38b03a 	or	fp,r23,fp
1000299c:	e02ed43a 	srli	r23,fp,16
100029a0:	e73fffcc 	andi	fp,fp,65535
100029a4:	180b883a 	mov	r5,r3
100029a8:	e009883a 	mov	r4,fp
100029ac:	d9800015 	stw	r6,0(sp)
100029b0:	d8c00115 	stw	r3,4(sp)
100029b4:	90a5c83a 	sub	r18,r18,r2
100029b8:	0002cf00 	call	10002cf0 <__mulsi3>
100029bc:	d8c00117 	ldw	r3,4(sp)
100029c0:	b809883a 	mov	r4,r23
100029c4:	1023883a 	mov	r17,r2
100029c8:	180b883a 	mov	r5,r3
100029cc:	0002cf00 	call	10002cf0 <__mulsi3>
100029d0:	d9800017 	ldw	r6,0(sp)
100029d4:	b809883a 	mov	r4,r23
100029d8:	d8800115 	stw	r2,4(sp)
100029dc:	300b883a 	mov	r5,r6
100029e0:	302f883a 	mov	r23,r6
100029e4:	0002cf00 	call	10002cf0 <__mulsi3>
100029e8:	e009883a 	mov	r4,fp
100029ec:	b80b883a 	mov	r5,r23
100029f0:	d8800015 	stw	r2,0(sp)
100029f4:	0002cf00 	call	10002cf0 <__mulsi3>
100029f8:	d8c00117 	ldw	r3,4(sp)
100029fc:	880cd43a 	srli	r6,r17,16
10002a00:	d9c00017 	ldw	r7,0(sp)
10002a04:	1885883a 	add	r2,r3,r2
10002a08:	118d883a 	add	r6,r2,r6
10002a0c:	30c0022e 	bgeu	r6,r3,10002a18 <__umoddi3+0x470>
10002a10:	00800074 	movhi	r2,1
10002a14:	388f883a 	add	r7,r7,r2
10002a18:	3006d43a 	srli	r3,r6,16
10002a1c:	300c943a 	slli	r6,r6,16
10002a20:	8c7fffcc 	andi	r17,r17,65535
10002a24:	38c7883a 	add	r3,r7,r3
10002a28:	3463883a 	add	r17,r6,r17
10002a2c:	90c03d36 	bltu	r18,r3,10002b24 <__umoddi3+0x57c>
10002a30:	90c06026 	beq	r18,r3,10002bb4 <__umoddi3+0x60c>
10002a34:	90c9c83a 	sub	r4,r18,r3
10002a38:	880f883a 	mov	r7,r17
10002a3c:	81cfc83a 	sub	r7,r16,r7
10002a40:	81c7803a 	cmpltu	r3,r16,r7
10002a44:	20c7c83a 	sub	r3,r4,r3
10002a48:	1d44983a 	sll	r2,r3,r21
10002a4c:	3d0ed83a 	srl	r7,r7,r20
10002a50:	1d06d83a 	srl	r3,r3,r20
10002a54:	11c4b03a 	or	r2,r2,r7
10002a58:	003f7a06 	br	10002844 <__alt_data_end+0xf8002844>
10002a5c:	0025883a 	mov	r18,zero
10002a60:	003ef806 	br	10002644 <__alt_data_end+0xf8002644>
10002a64:	98a6983a 	sll	r19,r19,r2
10002a68:	88e8d83a 	srl	r20,r17,r3
10002a6c:	80c6d83a 	srl	r3,r16,r3
10002a70:	982ad43a 	srli	r21,r19,16
10002a74:	88a2983a 	sll	r17,r17,r2
10002a78:	a009883a 	mov	r4,r20
10002a7c:	a80b883a 	mov	r5,r21
10002a80:	88eeb03a 	or	r23,r17,r3
10002a84:	1025883a 	mov	r18,r2
10002a88:	0002ce80 	call	10002ce8 <__umodsi3>
10002a8c:	a009883a 	mov	r4,r20
10002a90:	a80b883a 	mov	r5,r21
10002a94:	1023883a 	mov	r17,r2
10002a98:	9dbfffcc 	andi	r22,r19,65535
10002a9c:	0002ce00 	call	10002ce0 <__udivsi3>
10002aa0:	1009883a 	mov	r4,r2
10002aa4:	b00b883a 	mov	r5,r22
10002aa8:	0002cf00 	call	10002cf0 <__mulsi3>
10002aac:	8822943a 	slli	r17,r17,16
10002ab0:	b808d43a 	srli	r4,r23,16
10002ab4:	84a8983a 	sll	r20,r16,r18
10002ab8:	8906b03a 	or	r3,r17,r4
10002abc:	1880042e 	bgeu	r3,r2,10002ad0 <__umoddi3+0x528>
10002ac0:	1cc7883a 	add	r3,r3,r19
10002ac4:	1cc00236 	bltu	r3,r19,10002ad0 <__umoddi3+0x528>
10002ac8:	1880012e 	bgeu	r3,r2,10002ad0 <__umoddi3+0x528>
10002acc:	1cc7883a 	add	r3,r3,r19
10002ad0:	18a1c83a 	sub	r16,r3,r2
10002ad4:	8009883a 	mov	r4,r16
10002ad8:	a80b883a 	mov	r5,r21
10002adc:	0002ce80 	call	10002ce8 <__umodsi3>
10002ae0:	8009883a 	mov	r4,r16
10002ae4:	a80b883a 	mov	r5,r21
10002ae8:	1039883a 	mov	fp,r2
10002aec:	0002ce00 	call	10002ce0 <__udivsi3>
10002af0:	1009883a 	mov	r4,r2
10002af4:	b00b883a 	mov	r5,r22
10002af8:	0002cf00 	call	10002cf0 <__mulsi3>
10002afc:	e006943a 	slli	r3,fp,16
10002b00:	b93fffcc 	andi	r4,r23,65535
10002b04:	1906b03a 	or	r3,r3,r4
10002b08:	1880042e 	bgeu	r3,r2,10002b1c <__umoddi3+0x574>
10002b0c:	1cc7883a 	add	r3,r3,r19
10002b10:	1cc00236 	bltu	r3,r19,10002b1c <__umoddi3+0x574>
10002b14:	1880012e 	bgeu	r3,r2,10002b1c <__umoddi3+0x574>
10002b18:	1cc7883a 	add	r3,r3,r19
10002b1c:	18a3c83a 	sub	r17,r3,r2
10002b20:	003f1e06 	br	1000279c <__alt_data_end+0xf800279c>
10002b24:	8ccfc83a 	sub	r7,r17,r19
10002b28:	1d89c83a 	sub	r4,r3,r22
10002b2c:	89e3803a 	cmpltu	r17,r17,r7
10002b30:	2463c83a 	sub	r17,r4,r17
10002b34:	9449c83a 	sub	r4,r18,r17
10002b38:	003fc006 	br	10002a3c <__alt_data_end+0xf8002a3c>
10002b3c:	000b883a 	mov	r5,zero
10002b40:	002b883a 	mov	r21,zero
10002b44:	003eeb06 	br	100026f4 <__alt_data_end+0xf80026f4>
10002b48:	01400404 	movi	r5,16
10002b4c:	282b883a 	mov	r21,r5
10002b50:	003ee806 	br	100026f4 <__alt_data_end+0xf80026f4>
10002b54:	01400404 	movi	r5,16
10002b58:	2805883a 	mov	r2,r5
10002b5c:	003eaa06 	br	10002608 <__alt_data_end+0xf8002608>
10002b60:	0005883a 	mov	r2,zero
10002b64:	0007883a 	mov	r3,zero
10002b68:	003eff06 	br	10002768 <__alt_data_end+0xf8002768>
10002b6c:	00800404 	movi	r2,16
10002b70:	1007883a 	mov	r3,r2
10002b74:	003efc06 	br	10002768 <__alt_data_end+0xf8002768>
10002b78:	000b883a 	mov	r5,zero
10002b7c:	0005883a 	mov	r2,zero
10002b80:	003ea106 	br	10002608 <__alt_data_end+0xf8002608>
10002b84:	90bf802e 	bgeu	r18,r2,10002988 <__alt_data_end+0xf8002988>
10002b88:	bdffff84 	addi	r23,r23,-2
10002b8c:	95a5883a 	add	r18,r18,r22
10002b90:	003f7e06 	br	1000298c <__alt_data_end+0xf800298c>
10002b94:	18bf652e 	bgeu	r3,r2,1000292c <__alt_data_end+0xf800292c>
10002b98:	e73fff84 	addi	fp,fp,-2
10002b9c:	1d87883a 	add	r3,r3,r22
10002ba0:	003f6306 	br	10002930 <__alt_data_end+0xf8002930>
10002ba4:	1cc7883a 	add	r3,r3,r19
10002ba8:	003f0d06 	br	100027e0 <__alt_data_end+0xf80027e0>
10002bac:	8005883a 	mov	r2,r16
10002bb0:	003edf06 	br	10002730 <__alt_data_end+0xf8002730>
10002bb4:	847fdb36 	bltu	r16,r17,10002b24 <__alt_data_end+0xf8002b24>
10002bb8:	880f883a 	mov	r7,r17
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	003f9e06 	br	10002a3c <__alt_data_end+0xf8002a3c>

10002bc4 <udivmodsi4>:
10002bc4:	2900182e 	bgeu	r5,r4,10002c28 <udivmodsi4+0x64>
10002bc8:	28001716 	blt	r5,zero,10002c28 <udivmodsi4+0x64>
10002bcc:	00800804 	movi	r2,32
10002bd0:	00c00044 	movi	r3,1
10002bd4:	00000206 	br	10002be0 <udivmodsi4+0x1c>
10002bd8:	10001126 	beq	r2,zero,10002c20 <udivmodsi4+0x5c>
10002bdc:	28000516 	blt	r5,zero,10002bf4 <udivmodsi4+0x30>
10002be0:	294b883a 	add	r5,r5,r5
10002be4:	10bfffc4 	addi	r2,r2,-1
10002be8:	18c7883a 	add	r3,r3,r3
10002bec:	293ffa36 	bltu	r5,r4,10002bd8 <__alt_data_end+0xf8002bd8>
10002bf0:	18000b26 	beq	r3,zero,10002c20 <udivmodsi4+0x5c>
10002bf4:	0005883a 	mov	r2,zero
10002bf8:	21400236 	bltu	r4,r5,10002c04 <udivmodsi4+0x40>
10002bfc:	2149c83a 	sub	r4,r4,r5
10002c00:	10c4b03a 	or	r2,r2,r3
10002c04:	1806d07a 	srli	r3,r3,1
10002c08:	280ad07a 	srli	r5,r5,1
10002c0c:	183ffa1e 	bne	r3,zero,10002bf8 <__alt_data_end+0xf8002bf8>
10002c10:	3000011e 	bne	r6,zero,10002c18 <udivmodsi4+0x54>
10002c14:	f800283a 	ret
10002c18:	2005883a 	mov	r2,r4
10002c1c:	f800283a 	ret
10002c20:	0005883a 	mov	r2,zero
10002c24:	003ffa06 	br	10002c10 <__alt_data_end+0xf8002c10>
10002c28:	00c00044 	movi	r3,1
10002c2c:	003ff106 	br	10002bf4 <__alt_data_end+0xf8002bf4>

10002c30 <__divsi3>:
10002c30:	defffe04 	addi	sp,sp,-8
10002c34:	dfc00115 	stw	ra,4(sp)
10002c38:	dc000015 	stw	r16,0(sp)
10002c3c:	20000b16 	blt	r4,zero,10002c6c <__divsi3+0x3c>
10002c40:	0021883a 	mov	r16,zero
10002c44:	28000c16 	blt	r5,zero,10002c78 <__divsi3+0x48>
10002c48:	000d883a 	mov	r6,zero
10002c4c:	0002bc40 	call	10002bc4 <udivmodsi4>
10002c50:	0407c83a 	sub	r3,zero,r16
10002c54:	1884f03a 	xor	r2,r3,r2
10002c58:	1405883a 	add	r2,r2,r16
10002c5c:	dfc00117 	ldw	ra,4(sp)
10002c60:	dc000017 	ldw	r16,0(sp)
10002c64:	dec00204 	addi	sp,sp,8
10002c68:	f800283a 	ret
10002c6c:	0109c83a 	sub	r4,zero,r4
10002c70:	04000044 	movi	r16,1
10002c74:	283ff40e 	bge	r5,zero,10002c48 <__alt_data_end+0xf8002c48>
10002c78:	014bc83a 	sub	r5,zero,r5
10002c7c:	8400005c 	xori	r16,r16,1
10002c80:	003ff106 	br	10002c48 <__alt_data_end+0xf8002c48>

10002c84 <__modsi3>:
10002c84:	defffd04 	addi	sp,sp,-12
10002c88:	dfc00215 	stw	ra,8(sp)
10002c8c:	dc400115 	stw	r17,4(sp)
10002c90:	dc000015 	stw	r16,0(sp)
10002c94:	20000c16 	blt	r4,zero,10002cc8 <__modsi3+0x44>
10002c98:	0023883a 	mov	r17,zero
10002c9c:	0021883a 	mov	r16,zero
10002ca0:	28000d16 	blt	r5,zero,10002cd8 <__modsi3+0x54>
10002ca4:	01800044 	movi	r6,1
10002ca8:	0002bc40 	call	10002bc4 <udivmodsi4>
10002cac:	1404f03a 	xor	r2,r2,r16
10002cb0:	8885883a 	add	r2,r17,r2
10002cb4:	dfc00217 	ldw	ra,8(sp)
10002cb8:	dc400117 	ldw	r17,4(sp)
10002cbc:	dc000017 	ldw	r16,0(sp)
10002cc0:	dec00304 	addi	sp,sp,12
10002cc4:	f800283a 	ret
10002cc8:	0109c83a 	sub	r4,zero,r4
10002ccc:	04400044 	movi	r17,1
10002cd0:	043fffc4 	movi	r16,-1
10002cd4:	283ff30e 	bge	r5,zero,10002ca4 <__alt_data_end+0xf8002ca4>
10002cd8:	014bc83a 	sub	r5,zero,r5
10002cdc:	003ff106 	br	10002ca4 <__alt_data_end+0xf8002ca4>

10002ce0 <__udivsi3>:
10002ce0:	000d883a 	mov	r6,zero
10002ce4:	0002bc41 	jmpi	10002bc4 <udivmodsi4>

10002ce8 <__umodsi3>:
10002ce8:	01800044 	movi	r6,1
10002cec:	0002bc41 	jmpi	10002bc4 <udivmodsi4>

10002cf0 <__mulsi3>:
10002cf0:	0005883a 	mov	r2,zero
10002cf4:	20000726 	beq	r4,zero,10002d14 <__mulsi3+0x24>
10002cf8:	20c0004c 	andi	r3,r4,1
10002cfc:	2008d07a 	srli	r4,r4,1
10002d00:	18000126 	beq	r3,zero,10002d08 <__mulsi3+0x18>
10002d04:	1145883a 	add	r2,r2,r5
10002d08:	294b883a 	add	r5,r5,r5
10002d0c:	203ffa1e 	bne	r4,zero,10002cf8 <__alt_data_end+0xf8002cf8>
10002d10:	f800283a 	ret
10002d14:	f800283a 	ret

10002d18 <__adddf3>:
10002d18:	02000434 	movhi	r8,16
10002d1c:	423fffc4 	addi	r8,r8,-1
10002d20:	defffb04 	addi	sp,sp,-20
10002d24:	2a12703a 	and	r9,r5,r8
10002d28:	2806d7fa 	srli	r3,r5,31
10002d2c:	3a10703a 	and	r8,r7,r8
10002d30:	3804d53a 	srli	r2,r7,20
10002d34:	3014d77a 	srli	r10,r6,29
10002d38:	dc000015 	stw	r16,0(sp)
10002d3c:	481290fa 	slli	r9,r9,3
10002d40:	2820d53a 	srli	r16,r5,20
10002d44:	401090fa 	slli	r8,r8,3
10002d48:	200ad77a 	srli	r5,r4,29
10002d4c:	380ed7fa 	srli	r7,r7,31
10002d50:	dc800215 	stw	r18,8(sp)
10002d54:	dc400115 	stw	r17,4(sp)
10002d58:	dfc00415 	stw	ra,16(sp)
10002d5c:	dcc00315 	stw	r19,12(sp)
10002d60:	1c803fcc 	andi	r18,r3,255
10002d64:	8401ffcc 	andi	r16,r16,2047
10002d68:	494ab03a 	or	r5,r9,r5
10002d6c:	202290fa 	slli	r17,r4,3
10002d70:	1081ffcc 	andi	r2,r2,2047
10002d74:	4290b03a 	or	r8,r8,r10
10002d78:	300c90fa 	slli	r6,r6,3
10002d7c:	91c07026 	beq	r18,r7,10002f40 <__adddf3+0x228>
10002d80:	8087c83a 	sub	r3,r16,r2
10002d84:	00c0b30e 	bge	zero,r3,10003054 <__adddf3+0x33c>
10002d88:	10002a1e 	bne	r2,zero,10002e34 <__adddf3+0x11c>
10002d8c:	4184b03a 	or	r2,r8,r6
10002d90:	1000991e 	bne	r2,zero,10002ff8 <__adddf3+0x2e0>
10002d94:	888001cc 	andi	r2,r17,7
10002d98:	10005b26 	beq	r2,zero,10002f08 <__adddf3+0x1f0>
10002d9c:	88c003cc 	andi	r3,r17,15
10002da0:	00800104 	movi	r2,4
10002da4:	18805826 	beq	r3,r2,10002f08 <__adddf3+0x1f0>
10002da8:	89800104 	addi	r6,r17,4
10002dac:	3463803a 	cmpltu	r17,r6,r17
10002db0:	2c4b883a 	add	r5,r5,r17
10002db4:	2880202c 	andhi	r2,r5,128
10002db8:	9007883a 	mov	r3,r18
10002dbc:	3023883a 	mov	r17,r6
10002dc0:	10005426 	beq	r2,zero,10002f14 <__adddf3+0x1fc>
10002dc4:	84000044 	addi	r16,r16,1
10002dc8:	0081ffc4 	movi	r2,2047
10002dcc:	8080c126 	beq	r16,r2,100030d4 <__adddf3+0x3bc>
10002dd0:	013fe034 	movhi	r4,65408
10002dd4:	213fffc4 	addi	r4,r4,-1
10002dd8:	290a703a 	and	r5,r5,r4
10002ddc:	2804977a 	slli	r2,r5,29
10002de0:	280a927a 	slli	r5,r5,9
10002de4:	8822d0fa 	srli	r17,r17,3
10002de8:	8401ffcc 	andi	r16,r16,2047
10002dec:	2808d33a 	srli	r4,r5,12
10002df0:	1444b03a 	or	r2,r2,r17
10002df4:	8401ffcc 	andi	r16,r16,2047
10002df8:	800a953a 	slli	r5,r16,20
10002dfc:	18c03fcc 	andi	r3,r3,255
10002e00:	04000434 	movhi	r16,16
10002e04:	180697fa 	slli	r3,r3,31
10002e08:	843fffc4 	addi	r16,r16,-1
10002e0c:	2420703a 	and	r16,r4,r16
10002e10:	8160b03a 	or	r16,r16,r5
10002e14:	80c6b03a 	or	r3,r16,r3
10002e18:	dfc00417 	ldw	ra,16(sp)
10002e1c:	dcc00317 	ldw	r19,12(sp)
10002e20:	dc800217 	ldw	r18,8(sp)
10002e24:	dc400117 	ldw	r17,4(sp)
10002e28:	dc000017 	ldw	r16,0(sp)
10002e2c:	dec00504 	addi	sp,sp,20
10002e30:	f800283a 	ret
10002e34:	0081ffc4 	movi	r2,2047
10002e38:	80bfd626 	beq	r16,r2,10002d94 <__alt_data_end+0xf8002d94>
10002e3c:	42002034 	orhi	r8,r8,128
10002e40:	00800e04 	movi	r2,56
10002e44:	10c0a616 	blt	r2,r3,100030e0 <__adddf3+0x3c8>
10002e48:	008007c4 	movi	r2,31
10002e4c:	10c0c916 	blt	r2,r3,10003174 <__adddf3+0x45c>
10002e50:	00800804 	movi	r2,32
10002e54:	10c5c83a 	sub	r2,r2,r3
10002e58:	408e983a 	sll	r7,r8,r2
10002e5c:	30c8d83a 	srl	r4,r6,r3
10002e60:	3084983a 	sll	r2,r6,r2
10002e64:	40c6d83a 	srl	r3,r8,r3
10002e68:	390cb03a 	or	r6,r7,r4
10002e6c:	1004c03a 	cmpne	r2,r2,zero
10002e70:	308cb03a 	or	r6,r6,r2
10002e74:	898dc83a 	sub	r6,r17,r6
10002e78:	89a3803a 	cmpltu	r17,r17,r6
10002e7c:	28cbc83a 	sub	r5,r5,r3
10002e80:	2c4bc83a 	sub	r5,r5,r17
10002e84:	3023883a 	mov	r17,r6
10002e88:	2880202c 	andhi	r2,r5,128
10002e8c:	10006d26 	beq	r2,zero,10003044 <__adddf3+0x32c>
10002e90:	04c02034 	movhi	r19,128
10002e94:	9cffffc4 	addi	r19,r19,-1
10002e98:	2ce6703a 	and	r19,r5,r19
10002e9c:	98007e26 	beq	r19,zero,10003098 <__adddf3+0x380>
10002ea0:	9809883a 	mov	r4,r19
10002ea4:	0003fdc0 	call	10003fdc <__clzsi2>
10002ea8:	10fffe04 	addi	r3,r2,-8
10002eac:	010007c4 	movi	r4,31
10002eb0:	20c07f16 	blt	r4,r3,100030b0 <__adddf3+0x398>
10002eb4:	01400a04 	movi	r5,40
10002eb8:	2885c83a 	sub	r2,r5,r2
10002ebc:	888ad83a 	srl	r5,r17,r2
10002ec0:	98e6983a 	sll	r19,r19,r3
10002ec4:	88e2983a 	sll	r17,r17,r3
10002ec8:	2ce6b03a 	or	r19,r5,r19
10002ecc:	1c007c16 	blt	r3,r16,100030c0 <__adddf3+0x3a8>
10002ed0:	1c21c83a 	sub	r16,r3,r16
10002ed4:	81400044 	addi	r5,r16,1
10002ed8:	00c007c4 	movi	r3,31
10002edc:	19409816 	blt	r3,r5,10003140 <__adddf3+0x428>
10002ee0:	1c21c83a 	sub	r16,r3,r16
10002ee4:	8c08983a 	sll	r4,r17,r16
10002ee8:	8946d83a 	srl	r3,r17,r5
10002eec:	9c20983a 	sll	r16,r19,r16
10002ef0:	2008c03a 	cmpne	r4,r4,zero
10002ef4:	994ad83a 	srl	r5,r19,r5
10002ef8:	1c06b03a 	or	r3,r3,r16
10002efc:	1922b03a 	or	r17,r3,r4
10002f00:	0021883a 	mov	r16,zero
10002f04:	003fa306 	br	10002d94 <__alt_data_end+0xf8002d94>
10002f08:	2880202c 	andhi	r2,r5,128
10002f0c:	9007883a 	mov	r3,r18
10002f10:	103fac1e 	bne	r2,zero,10002dc4 <__alt_data_end+0xf8002dc4>
10002f14:	2804977a 	slli	r2,r5,29
10002f18:	8822d0fa 	srli	r17,r17,3
10002f1c:	0101ffc4 	movi	r4,2047
10002f20:	280ad0fa 	srli	r5,r5,3
10002f24:	1444b03a 	or	r2,r2,r17
10002f28:	81002c26 	beq	r16,r4,10002fdc <__adddf3+0x2c4>
10002f2c:	8120703a 	and	r16,r16,r4
10002f30:	01000434 	movhi	r4,16
10002f34:	213fffc4 	addi	r4,r4,-1
10002f38:	2908703a 	and	r4,r5,r4
10002f3c:	003fad06 	br	10002df4 <__alt_data_end+0xf8002df4>
10002f40:	8089c83a 	sub	r4,r16,r2
10002f44:	01006a0e 	bge	zero,r4,100030f0 <__adddf3+0x3d8>
10002f48:	10003326 	beq	r2,zero,10003018 <__adddf3+0x300>
10002f4c:	0081ffc4 	movi	r2,2047
10002f50:	80bf9026 	beq	r16,r2,10002d94 <__alt_data_end+0xf8002d94>
10002f54:	42002034 	orhi	r8,r8,128
10002f58:	00800e04 	movi	r2,56
10002f5c:	1100b116 	blt	r2,r4,10003224 <__adddf3+0x50c>
10002f60:	008007c4 	movi	r2,31
10002f64:	1100e216 	blt	r2,r4,100032f0 <__adddf3+0x5d8>
10002f68:	00800804 	movi	r2,32
10002f6c:	1105c83a 	sub	r2,r2,r4
10002f70:	4092983a 	sll	r9,r8,r2
10002f74:	310ed83a 	srl	r7,r6,r4
10002f78:	3084983a 	sll	r2,r6,r2
10002f7c:	4110d83a 	srl	r8,r8,r4
10002f80:	49ccb03a 	or	r6,r9,r7
10002f84:	1004c03a 	cmpne	r2,r2,zero
10002f88:	308cb03a 	or	r6,r6,r2
10002f8c:	344d883a 	add	r6,r6,r17
10002f90:	3463803a 	cmpltu	r17,r6,r17
10002f94:	414b883a 	add	r5,r8,r5
10002f98:	2c4b883a 	add	r5,r5,r17
10002f9c:	3023883a 	mov	r17,r6
10002fa0:	2880202c 	andhi	r2,r5,128
10002fa4:	10002726 	beq	r2,zero,10003044 <__adddf3+0x32c>
10002fa8:	84000044 	addi	r16,r16,1
10002fac:	0081ffc4 	movi	r2,2047
10002fb0:	8080ae26 	beq	r16,r2,1000326c <__adddf3+0x554>
10002fb4:	00bfe034 	movhi	r2,65408
10002fb8:	10bfffc4 	addi	r2,r2,-1
10002fbc:	288a703a 	and	r5,r5,r2
10002fc0:	880cd07a 	srli	r6,r17,1
10002fc4:	280897fa 	slli	r4,r5,31
10002fc8:	88c0004c 	andi	r3,r17,1
10002fcc:	30e2b03a 	or	r17,r6,r3
10002fd0:	280ad07a 	srli	r5,r5,1
10002fd4:	8922b03a 	or	r17,r17,r4
10002fd8:	003f6e06 	br	10002d94 <__alt_data_end+0xf8002d94>
10002fdc:	1148b03a 	or	r4,r2,r5
10002fe0:	20003c26 	beq	r4,zero,100030d4 <__adddf3+0x3bc>
10002fe4:	29000234 	orhi	r4,r5,8
10002fe8:	01400434 	movhi	r5,16
10002fec:	297fffc4 	addi	r5,r5,-1
10002ff0:	2148703a 	and	r4,r4,r5
10002ff4:	003f7f06 	br	10002df4 <__alt_data_end+0xf8002df4>
10002ff8:	18ffffc4 	addi	r3,r3,-1
10002ffc:	18004d1e 	bne	r3,zero,10003134 <__adddf3+0x41c>
10003000:	898dc83a 	sub	r6,r17,r6
10003004:	89a3803a 	cmpltu	r17,r17,r6
10003008:	2a0bc83a 	sub	r5,r5,r8
1000300c:	2c4bc83a 	sub	r5,r5,r17
10003010:	3023883a 	mov	r17,r6
10003014:	003f9c06 	br	10002e88 <__alt_data_end+0xf8002e88>
10003018:	4184b03a 	or	r2,r8,r6
1000301c:	103f5d26 	beq	r2,zero,10002d94 <__alt_data_end+0xf8002d94>
10003020:	213fffc4 	addi	r4,r4,-1
10003024:	203fd926 	beq	r4,zero,10002f8c <__alt_data_end+0xf8002f8c>
10003028:	0081ffc4 	movi	r2,2047
1000302c:	80bfca1e 	bne	r16,r2,10002f58 <__alt_data_end+0xf8002f58>
10003030:	003f5806 	br	10002d94 <__alt_data_end+0xf8002d94>
10003034:	10c8b03a 	or	r4,r2,r3
10003038:	20008b26 	beq	r4,zero,10003268 <__adddf3+0x550>
1000303c:	100b883a 	mov	r5,r2
10003040:	1823883a 	mov	r17,r3
10003044:	888001cc 	andi	r2,r17,7
10003048:	103f541e 	bne	r2,zero,10002d9c <__alt_data_end+0xf8002d9c>
1000304c:	9007883a 	mov	r3,r18
10003050:	003fb006 	br	10002f14 <__alt_data_end+0xf8002f14>
10003054:	1800531e 	bne	r3,zero,100031a4 <__adddf3+0x48c>
10003058:	80800044 	addi	r2,r16,1
1000305c:	1081ffcc 	andi	r2,r2,2047
10003060:	00c00044 	movi	r3,1
10003064:	1880990e 	bge	r3,r2,100032cc <__adddf3+0x5b4>
10003068:	8985c83a 	sub	r2,r17,r6
1000306c:	8887803a 	cmpltu	r3,r17,r2
10003070:	2a27c83a 	sub	r19,r5,r8
10003074:	98e7c83a 	sub	r19,r19,r3
10003078:	98c0202c 	andhi	r3,r19,128
1000307c:	18006226 	beq	r3,zero,10003208 <__adddf3+0x4f0>
10003080:	3463c83a 	sub	r17,r6,r17
10003084:	4151c83a 	sub	r8,r8,r5
10003088:	344d803a 	cmpltu	r6,r6,r17
1000308c:	41a7c83a 	sub	r19,r8,r6
10003090:	3825883a 	mov	r18,r7
10003094:	983f821e 	bne	r19,zero,10002ea0 <__alt_data_end+0xf8002ea0>
10003098:	8809883a 	mov	r4,r17
1000309c:	0003fdc0 	call	10003fdc <__clzsi2>
100030a0:	10800804 	addi	r2,r2,32
100030a4:	10fffe04 	addi	r3,r2,-8
100030a8:	010007c4 	movi	r4,31
100030ac:	20ff810e 	bge	r4,r3,10002eb4 <__alt_data_end+0xf8002eb4>
100030b0:	14fff604 	addi	r19,r2,-40
100030b4:	8ce6983a 	sll	r19,r17,r19
100030b8:	0023883a 	mov	r17,zero
100030bc:	1c3f840e 	bge	r3,r16,10002ed0 <__alt_data_end+0xf8002ed0>
100030c0:	017fe034 	movhi	r5,65408
100030c4:	297fffc4 	addi	r5,r5,-1
100030c8:	80e1c83a 	sub	r16,r16,r3
100030cc:	994a703a 	and	r5,r19,r5
100030d0:	003f3006 	br	10002d94 <__alt_data_end+0xf8002d94>
100030d4:	0009883a 	mov	r4,zero
100030d8:	0005883a 	mov	r2,zero
100030dc:	003f4506 	br	10002df4 <__alt_data_end+0xf8002df4>
100030e0:	418cb03a 	or	r6,r8,r6
100030e4:	300cc03a 	cmpne	r6,r6,zero
100030e8:	0007883a 	mov	r3,zero
100030ec:	003f6106 	br	10002e74 <__alt_data_end+0xf8002e74>
100030f0:	2000921e 	bne	r4,zero,1000333c <__adddf3+0x624>
100030f4:	80800044 	addi	r2,r16,1
100030f8:	11c1ffcc 	andi	r7,r2,2047
100030fc:	01000044 	movi	r4,1
10003100:	21c0610e 	bge	r4,r7,10003288 <__adddf3+0x570>
10003104:	0101ffc4 	movi	r4,2047
10003108:	1100a326 	beq	r2,r4,10003398 <__adddf3+0x680>
1000310c:	344d883a 	add	r6,r6,r17
10003110:	3463803a 	cmpltu	r17,r6,r17
10003114:	414b883a 	add	r5,r8,r5
10003118:	2c4b883a 	add	r5,r5,r17
1000311c:	282297fa 	slli	r17,r5,31
10003120:	300cd07a 	srli	r6,r6,1
10003124:	280ad07a 	srli	r5,r5,1
10003128:	1021883a 	mov	r16,r2
1000312c:	89a2b03a 	or	r17,r17,r6
10003130:	003f1806 	br	10002d94 <__alt_data_end+0xf8002d94>
10003134:	0081ffc4 	movi	r2,2047
10003138:	80bf411e 	bne	r16,r2,10002e40 <__alt_data_end+0xf8002e40>
1000313c:	003f1506 	br	10002d94 <__alt_data_end+0xf8002d94>
10003140:	80bff844 	addi	r2,r16,-31
10003144:	00c00804 	movi	r3,32
10003148:	9884d83a 	srl	r2,r19,r2
1000314c:	28c04a26 	beq	r5,r3,10003278 <__adddf3+0x560>
10003150:	00c00fc4 	movi	r3,63
10003154:	1c21c83a 	sub	r16,r3,r16
10003158:	9c26983a 	sll	r19,r19,r16
1000315c:	9c62b03a 	or	r17,r19,r17
10003160:	8822c03a 	cmpne	r17,r17,zero
10003164:	88a2b03a 	or	r17,r17,r2
10003168:	000b883a 	mov	r5,zero
1000316c:	0021883a 	mov	r16,zero
10003170:	003fb406 	br	10003044 <__alt_data_end+0xf8003044>
10003174:	18bff804 	addi	r2,r3,-32
10003178:	01000804 	movi	r4,32
1000317c:	4084d83a 	srl	r2,r8,r2
10003180:	19003f26 	beq	r3,r4,10003280 <__adddf3+0x568>
10003184:	01001004 	movi	r4,64
10003188:	20c7c83a 	sub	r3,r4,r3
1000318c:	40d0983a 	sll	r8,r8,r3
10003190:	418cb03a 	or	r6,r8,r6
10003194:	300cc03a 	cmpne	r6,r6,zero
10003198:	308cb03a 	or	r6,r6,r2
1000319c:	0007883a 	mov	r3,zero
100031a0:	003f3406 	br	10002e74 <__alt_data_end+0xf8002e74>
100031a4:	80002326 	beq	r16,zero,10003234 <__adddf3+0x51c>
100031a8:	0101ffc4 	movi	r4,2047
100031ac:	11005e26 	beq	r2,r4,10003328 <__adddf3+0x610>
100031b0:	00c7c83a 	sub	r3,zero,r3
100031b4:	29402034 	orhi	r5,r5,128
100031b8:	01000e04 	movi	r4,56
100031bc:	20c07216 	blt	r4,r3,10003388 <__adddf3+0x670>
100031c0:	010007c4 	movi	r4,31
100031c4:	20c0ce16 	blt	r4,r3,10003500 <__adddf3+0x7e8>
100031c8:	01000804 	movi	r4,32
100031cc:	20c9c83a 	sub	r4,r4,r3
100031d0:	2914983a 	sll	r10,r5,r4
100031d4:	88d2d83a 	srl	r9,r17,r3
100031d8:	8908983a 	sll	r4,r17,r4
100031dc:	28c6d83a 	srl	r3,r5,r3
100031e0:	5262b03a 	or	r17,r10,r9
100031e4:	2008c03a 	cmpne	r4,r4,zero
100031e8:	8922b03a 	or	r17,r17,r4
100031ec:	3463c83a 	sub	r17,r6,r17
100031f0:	40c7c83a 	sub	r3,r8,r3
100031f4:	344d803a 	cmpltu	r6,r6,r17
100031f8:	198bc83a 	sub	r5,r3,r6
100031fc:	1021883a 	mov	r16,r2
10003200:	3825883a 	mov	r18,r7
10003204:	003f2006 	br	10002e88 <__alt_data_end+0xf8002e88>
10003208:	9886b03a 	or	r3,r19,r2
1000320c:	1800141e 	bne	r3,zero,10003260 <__adddf3+0x548>
10003210:	0007883a 	mov	r3,zero
10003214:	000b883a 	mov	r5,zero
10003218:	0023883a 	mov	r17,zero
1000321c:	0021883a 	mov	r16,zero
10003220:	003f3c06 	br	10002f14 <__alt_data_end+0xf8002f14>
10003224:	418cb03a 	or	r6,r8,r6
10003228:	300cc03a 	cmpne	r6,r6,zero
1000322c:	0011883a 	mov	r8,zero
10003230:	003f5606 	br	10002f8c <__alt_data_end+0xf8002f8c>
10003234:	2c48b03a 	or	r4,r5,r17
10003238:	20003b26 	beq	r4,zero,10003328 <__adddf3+0x610>
1000323c:	00c6303a 	nor	r3,zero,r3
10003240:	1800371e 	bne	r3,zero,10003320 <__adddf3+0x608>
10003244:	3463c83a 	sub	r17,r6,r17
10003248:	414bc83a 	sub	r5,r8,r5
1000324c:	344d803a 	cmpltu	r6,r6,r17
10003250:	298bc83a 	sub	r5,r5,r6
10003254:	1021883a 	mov	r16,r2
10003258:	3825883a 	mov	r18,r7
1000325c:	003f0a06 	br	10002e88 <__alt_data_end+0xf8002e88>
10003260:	1023883a 	mov	r17,r2
10003264:	003f0d06 	br	10002e9c <__alt_data_end+0xf8002e9c>
10003268:	0007883a 	mov	r3,zero
1000326c:	000b883a 	mov	r5,zero
10003270:	0023883a 	mov	r17,zero
10003274:	003f2706 	br	10002f14 <__alt_data_end+0xf8002f14>
10003278:	0027883a 	mov	r19,zero
1000327c:	003fb706 	br	1000315c <__alt_data_end+0xf800315c>
10003280:	0011883a 	mov	r8,zero
10003284:	003fc206 	br	10003190 <__alt_data_end+0xf8003190>
10003288:	2c44b03a 	or	r2,r5,r17
1000328c:	8000871e 	bne	r16,zero,100034ac <__adddf3+0x794>
10003290:	1000b126 	beq	r2,zero,10003558 <__adddf3+0x840>
10003294:	4184b03a 	or	r2,r8,r6
10003298:	103ebe26 	beq	r2,zero,10002d94 <__alt_data_end+0xf8002d94>
1000329c:	3445883a 	add	r2,r6,r17
100032a0:	1463803a 	cmpltu	r17,r2,r17
100032a4:	414b883a 	add	r5,r8,r5
100032a8:	2c4b883a 	add	r5,r5,r17
100032ac:	28c0202c 	andhi	r3,r5,128
100032b0:	1023883a 	mov	r17,r2
100032b4:	183f6326 	beq	r3,zero,10003044 <__alt_data_end+0xf8003044>
100032b8:	00bfe034 	movhi	r2,65408
100032bc:	10bfffc4 	addi	r2,r2,-1
100032c0:	2021883a 	mov	r16,r4
100032c4:	288a703a 	and	r5,r5,r2
100032c8:	003eb206 	br	10002d94 <__alt_data_end+0xf8002d94>
100032cc:	2c44b03a 	or	r2,r5,r17
100032d0:	8000251e 	bne	r16,zero,10003368 <__adddf3+0x650>
100032d4:	10004b1e 	bne	r2,zero,10003404 <__adddf3+0x6ec>
100032d8:	4184b03a 	or	r2,r8,r6
100032dc:	103fe226 	beq	r2,zero,10003268 <__alt_data_end+0xf8003268>
100032e0:	400b883a 	mov	r5,r8
100032e4:	3023883a 	mov	r17,r6
100032e8:	3825883a 	mov	r18,r7
100032ec:	003ea906 	br	10002d94 <__alt_data_end+0xf8002d94>
100032f0:	20bff804 	addi	r2,r4,-32
100032f4:	01c00804 	movi	r7,32
100032f8:	4084d83a 	srl	r2,r8,r2
100032fc:	21c07e26 	beq	r4,r7,100034f8 <__adddf3+0x7e0>
10003300:	01c01004 	movi	r7,64
10003304:	3909c83a 	sub	r4,r7,r4
10003308:	4110983a 	sll	r8,r8,r4
1000330c:	418cb03a 	or	r6,r8,r6
10003310:	300cc03a 	cmpne	r6,r6,zero
10003314:	308cb03a 	or	r6,r6,r2
10003318:	0011883a 	mov	r8,zero
1000331c:	003f1b06 	br	10002f8c <__alt_data_end+0xf8002f8c>
10003320:	0101ffc4 	movi	r4,2047
10003324:	113fa41e 	bne	r2,r4,100031b8 <__alt_data_end+0xf80031b8>
10003328:	400b883a 	mov	r5,r8
1000332c:	3023883a 	mov	r17,r6
10003330:	1021883a 	mov	r16,r2
10003334:	3825883a 	mov	r18,r7
10003338:	003e9606 	br	10002d94 <__alt_data_end+0xf8002d94>
1000333c:	80001a1e 	bne	r16,zero,100033a8 <__adddf3+0x690>
10003340:	2c4eb03a 	or	r7,r5,r17
10003344:	38005526 	beq	r7,zero,1000349c <__adddf3+0x784>
10003348:	0108303a 	nor	r4,zero,r4
1000334c:	2000511e 	bne	r4,zero,10003494 <__adddf3+0x77c>
10003350:	89a3883a 	add	r17,r17,r6
10003354:	414b883a 	add	r5,r8,r5
10003358:	898d803a 	cmpltu	r6,r17,r6
1000335c:	298b883a 	add	r5,r5,r6
10003360:	1021883a 	mov	r16,r2
10003364:	003f0e06 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10003368:	1000341e 	bne	r2,zero,1000343c <__adddf3+0x724>
1000336c:	4184b03a 	or	r2,r8,r6
10003370:	10006f26 	beq	r2,zero,10003530 <__adddf3+0x818>
10003374:	400b883a 	mov	r5,r8
10003378:	3023883a 	mov	r17,r6
1000337c:	3825883a 	mov	r18,r7
10003380:	0401ffc4 	movi	r16,2047
10003384:	003e8306 	br	10002d94 <__alt_data_end+0xf8002d94>
10003388:	2c62b03a 	or	r17,r5,r17
1000338c:	8822c03a 	cmpne	r17,r17,zero
10003390:	0007883a 	mov	r3,zero
10003394:	003f9506 	br	100031ec <__alt_data_end+0xf80031ec>
10003398:	1021883a 	mov	r16,r2
1000339c:	000b883a 	mov	r5,zero
100033a0:	0023883a 	mov	r17,zero
100033a4:	003edb06 	br	10002f14 <__alt_data_end+0xf8002f14>
100033a8:	01c1ffc4 	movi	r7,2047
100033ac:	11c03b26 	beq	r2,r7,1000349c <__adddf3+0x784>
100033b0:	0109c83a 	sub	r4,zero,r4
100033b4:	29402034 	orhi	r5,r5,128
100033b8:	01c00e04 	movi	r7,56
100033bc:	39006216 	blt	r7,r4,10003548 <__adddf3+0x830>
100033c0:	01c007c4 	movi	r7,31
100033c4:	39006b16 	blt	r7,r4,10003574 <__adddf3+0x85c>
100033c8:	01c00804 	movi	r7,32
100033cc:	390fc83a 	sub	r7,r7,r4
100033d0:	29d4983a 	sll	r10,r5,r7
100033d4:	8912d83a 	srl	r9,r17,r4
100033d8:	89ce983a 	sll	r7,r17,r7
100033dc:	2908d83a 	srl	r4,r5,r4
100033e0:	5262b03a 	or	r17,r10,r9
100033e4:	380ac03a 	cmpne	r5,r7,zero
100033e8:	8962b03a 	or	r17,r17,r5
100033ec:	89a3883a 	add	r17,r17,r6
100033f0:	2211883a 	add	r8,r4,r8
100033f4:	898d803a 	cmpltu	r6,r17,r6
100033f8:	418b883a 	add	r5,r8,r6
100033fc:	1021883a 	mov	r16,r2
10003400:	003ee706 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10003404:	4184b03a 	or	r2,r8,r6
10003408:	103e6226 	beq	r2,zero,10002d94 <__alt_data_end+0xf8002d94>
1000340c:	8987c83a 	sub	r3,r17,r6
10003410:	88c9803a 	cmpltu	r4,r17,r3
10003414:	2a05c83a 	sub	r2,r5,r8
10003418:	1105c83a 	sub	r2,r2,r4
1000341c:	1100202c 	andhi	r4,r2,128
10003420:	203f0426 	beq	r4,zero,10003034 <__alt_data_end+0xf8003034>
10003424:	3463c83a 	sub	r17,r6,r17
10003428:	414bc83a 	sub	r5,r8,r5
1000342c:	344d803a 	cmpltu	r6,r6,r17
10003430:	298bc83a 	sub	r5,r5,r6
10003434:	3825883a 	mov	r18,r7
10003438:	003e5606 	br	10002d94 <__alt_data_end+0xf8002d94>
1000343c:	4184b03a 	or	r2,r8,r6
10003440:	10002b26 	beq	r2,zero,100034f0 <__adddf3+0x7d8>
10003444:	2804d0fa 	srli	r2,r5,3
10003448:	8822d0fa 	srli	r17,r17,3
1000344c:	280a977a 	slli	r5,r5,29
10003450:	10c0022c 	andhi	r3,r2,8
10003454:	2c62b03a 	or	r17,r5,r17
10003458:	18000826 	beq	r3,zero,1000347c <__adddf3+0x764>
1000345c:	4008d0fa 	srli	r4,r8,3
10003460:	20c0022c 	andhi	r3,r4,8
10003464:	1800051e 	bne	r3,zero,1000347c <__adddf3+0x764>
10003468:	300cd0fa 	srli	r6,r6,3
1000346c:	4010977a 	slli	r8,r8,29
10003470:	2005883a 	mov	r2,r4
10003474:	3825883a 	mov	r18,r7
10003478:	41a2b03a 	or	r17,r8,r6
1000347c:	880ad77a 	srli	r5,r17,29
10003480:	100490fa 	slli	r2,r2,3
10003484:	882290fa 	slli	r17,r17,3
10003488:	0401ffc4 	movi	r16,2047
1000348c:	288ab03a 	or	r5,r5,r2
10003490:	003e4006 	br	10002d94 <__alt_data_end+0xf8002d94>
10003494:	01c1ffc4 	movi	r7,2047
10003498:	11ffc71e 	bne	r2,r7,100033b8 <__alt_data_end+0xf80033b8>
1000349c:	400b883a 	mov	r5,r8
100034a0:	3023883a 	mov	r17,r6
100034a4:	1021883a 	mov	r16,r2
100034a8:	003e3a06 	br	10002d94 <__alt_data_end+0xf8002d94>
100034ac:	10002d26 	beq	r2,zero,10003564 <__adddf3+0x84c>
100034b0:	4184b03a 	or	r2,r8,r6
100034b4:	10000e26 	beq	r2,zero,100034f0 <__adddf3+0x7d8>
100034b8:	2804d0fa 	srli	r2,r5,3
100034bc:	8822d0fa 	srli	r17,r17,3
100034c0:	280a977a 	slli	r5,r5,29
100034c4:	10c0022c 	andhi	r3,r2,8
100034c8:	2c62b03a 	or	r17,r5,r17
100034cc:	183feb26 	beq	r3,zero,1000347c <__alt_data_end+0xf800347c>
100034d0:	4008d0fa 	srli	r4,r8,3
100034d4:	20c0022c 	andhi	r3,r4,8
100034d8:	183fe81e 	bne	r3,zero,1000347c <__alt_data_end+0xf800347c>
100034dc:	300cd0fa 	srli	r6,r6,3
100034e0:	4010977a 	slli	r8,r8,29
100034e4:	2005883a 	mov	r2,r4
100034e8:	41a2b03a 	or	r17,r8,r6
100034ec:	003fe306 	br	1000347c <__alt_data_end+0xf800347c>
100034f0:	0401ffc4 	movi	r16,2047
100034f4:	003e2706 	br	10002d94 <__alt_data_end+0xf8002d94>
100034f8:	0011883a 	mov	r8,zero
100034fc:	003f8306 	br	1000330c <__alt_data_end+0xf800330c>
10003500:	193ff804 	addi	r4,r3,-32
10003504:	02400804 	movi	r9,32
10003508:	2908d83a 	srl	r4,r5,r4
1000350c:	1a402526 	beq	r3,r9,100035a4 <__adddf3+0x88c>
10003510:	02401004 	movi	r9,64
10003514:	48c7c83a 	sub	r3,r9,r3
10003518:	28ca983a 	sll	r5,r5,r3
1000351c:	2c62b03a 	or	r17,r5,r17
10003520:	8822c03a 	cmpne	r17,r17,zero
10003524:	8922b03a 	or	r17,r17,r4
10003528:	0007883a 	mov	r3,zero
1000352c:	003f2f06 	br	100031ec <__alt_data_end+0xf80031ec>
10003530:	01402034 	movhi	r5,128
10003534:	0007883a 	mov	r3,zero
10003538:	297fffc4 	addi	r5,r5,-1
1000353c:	047ffe04 	movi	r17,-8
10003540:	0401ffc4 	movi	r16,2047
10003544:	003e7306 	br	10002f14 <__alt_data_end+0xf8002f14>
10003548:	2c62b03a 	or	r17,r5,r17
1000354c:	8822c03a 	cmpne	r17,r17,zero
10003550:	0009883a 	mov	r4,zero
10003554:	003fa506 	br	100033ec <__alt_data_end+0xf80033ec>
10003558:	400b883a 	mov	r5,r8
1000355c:	3023883a 	mov	r17,r6
10003560:	003e0c06 	br	10002d94 <__alt_data_end+0xf8002d94>
10003564:	400b883a 	mov	r5,r8
10003568:	3023883a 	mov	r17,r6
1000356c:	0401ffc4 	movi	r16,2047
10003570:	003e0806 	br	10002d94 <__alt_data_end+0xf8002d94>
10003574:	21fff804 	addi	r7,r4,-32
10003578:	02400804 	movi	r9,32
1000357c:	29ced83a 	srl	r7,r5,r7
10003580:	22400a26 	beq	r4,r9,100035ac <__adddf3+0x894>
10003584:	02401004 	movi	r9,64
10003588:	4909c83a 	sub	r4,r9,r4
1000358c:	290a983a 	sll	r5,r5,r4
10003590:	2c62b03a 	or	r17,r5,r17
10003594:	8822c03a 	cmpne	r17,r17,zero
10003598:	89e2b03a 	or	r17,r17,r7
1000359c:	0009883a 	mov	r4,zero
100035a0:	003f9206 	br	100033ec <__alt_data_end+0xf80033ec>
100035a4:	000b883a 	mov	r5,zero
100035a8:	003fdc06 	br	1000351c <__alt_data_end+0xf800351c>
100035ac:	000b883a 	mov	r5,zero
100035b0:	003ff706 	br	10003590 <__alt_data_end+0xf8003590>

100035b4 <__subdf3>:
100035b4:	00c00434 	movhi	r3,16
100035b8:	18ffffc4 	addi	r3,r3,-1
100035bc:	defffb04 	addi	sp,sp,-20
100035c0:	28d2703a 	and	r9,r5,r3
100035c4:	3814d53a 	srli	r10,r7,20
100035c8:	38c6703a 	and	r3,r7,r3
100035cc:	3004d77a 	srli	r2,r6,29
100035d0:	dc800215 	stw	r18,8(sp)
100035d4:	dc000015 	stw	r16,0(sp)
100035d8:	2824d7fa 	srli	r18,r5,31
100035dc:	2820d53a 	srli	r16,r5,20
100035e0:	481290fa 	slli	r9,r9,3
100035e4:	200ad77a 	srli	r5,r4,29
100035e8:	180690fa 	slli	r3,r3,3
100035ec:	dc400115 	stw	r17,4(sp)
100035f0:	dfc00415 	stw	ra,16(sp)
100035f4:	202290fa 	slli	r17,r4,3
100035f8:	dcc00315 	stw	r19,12(sp)
100035fc:	5281ffcc 	andi	r10,r10,2047
10003600:	0101ffc4 	movi	r4,2047
10003604:	9011883a 	mov	r8,r18
10003608:	8401ffcc 	andi	r16,r16,2047
1000360c:	94803fcc 	andi	r18,r18,255
10003610:	494ab03a 	or	r5,r9,r5
10003614:	380ed7fa 	srli	r7,r7,31
10003618:	1886b03a 	or	r3,r3,r2
1000361c:	300c90fa 	slli	r6,r6,3
10003620:	51009026 	beq	r10,r4,10003864 <__subdf3+0x2b0>
10003624:	39c0005c 	xori	r7,r7,1
10003628:	8285c83a 	sub	r2,r16,r10
1000362c:	91c06f26 	beq	r18,r7,100037ec <__subdf3+0x238>
10003630:	0080b10e 	bge	zero,r2,100038f8 <__subdf3+0x344>
10003634:	50002a1e 	bne	r10,zero,100036e0 <__subdf3+0x12c>
10003638:	1988b03a 	or	r4,r3,r6
1000363c:	2000941e 	bne	r4,zero,10003890 <__subdf3+0x2dc>
10003640:	888001cc 	andi	r2,r17,7
10003644:	10005b26 	beq	r2,zero,100037b4 <__subdf3+0x200>
10003648:	88c003cc 	andi	r3,r17,15
1000364c:	00800104 	movi	r2,4
10003650:	18805826 	beq	r3,r2,100037b4 <__subdf3+0x200>
10003654:	88c00104 	addi	r3,r17,4
10003658:	1c63803a 	cmpltu	r17,r3,r17
1000365c:	2c4b883a 	add	r5,r5,r17
10003660:	2880202c 	andhi	r2,r5,128
10003664:	9200004c 	andi	r8,r18,1
10003668:	1823883a 	mov	r17,r3
1000366c:	10005426 	beq	r2,zero,100037c0 <__subdf3+0x20c>
10003670:	84000044 	addi	r16,r16,1
10003674:	0081ffc4 	movi	r2,2047
10003678:	8080bf26 	beq	r16,r2,10003978 <__subdf3+0x3c4>
1000367c:	013fe034 	movhi	r4,65408
10003680:	213fffc4 	addi	r4,r4,-1
10003684:	290a703a 	and	r5,r5,r4
10003688:	2804977a 	slli	r2,r5,29
1000368c:	280a927a 	slli	r5,r5,9
10003690:	8822d0fa 	srli	r17,r17,3
10003694:	8401ffcc 	andi	r16,r16,2047
10003698:	2808d33a 	srli	r4,r5,12
1000369c:	1444b03a 	or	r2,r2,r17
100036a0:	8401ffcc 	andi	r16,r16,2047
100036a4:	800a953a 	slli	r5,r16,20
100036a8:	40c03fcc 	andi	r3,r8,255
100036ac:	04000434 	movhi	r16,16
100036b0:	180697fa 	slli	r3,r3,31
100036b4:	843fffc4 	addi	r16,r16,-1
100036b8:	2420703a 	and	r16,r4,r16
100036bc:	8160b03a 	or	r16,r16,r5
100036c0:	80c6b03a 	or	r3,r16,r3
100036c4:	dfc00417 	ldw	ra,16(sp)
100036c8:	dcc00317 	ldw	r19,12(sp)
100036cc:	dc800217 	ldw	r18,8(sp)
100036d0:	dc400117 	ldw	r17,4(sp)
100036d4:	dc000017 	ldw	r16,0(sp)
100036d8:	dec00504 	addi	sp,sp,20
100036dc:	f800283a 	ret
100036e0:	0101ffc4 	movi	r4,2047
100036e4:	813fd626 	beq	r16,r4,10003640 <__alt_data_end+0xf8003640>
100036e8:	18c02034 	orhi	r3,r3,128
100036ec:	01000e04 	movi	r4,56
100036f0:	2080a416 	blt	r4,r2,10003984 <__subdf3+0x3d0>
100036f4:	010007c4 	movi	r4,31
100036f8:	2080c716 	blt	r4,r2,10003a18 <__subdf3+0x464>
100036fc:	01000804 	movi	r4,32
10003700:	2089c83a 	sub	r4,r4,r2
10003704:	1910983a 	sll	r8,r3,r4
10003708:	308ed83a 	srl	r7,r6,r2
1000370c:	3108983a 	sll	r4,r6,r4
10003710:	1884d83a 	srl	r2,r3,r2
10003714:	41ccb03a 	or	r6,r8,r7
10003718:	2008c03a 	cmpne	r4,r4,zero
1000371c:	310cb03a 	or	r6,r6,r4
10003720:	898dc83a 	sub	r6,r17,r6
10003724:	89a3803a 	cmpltu	r17,r17,r6
10003728:	288bc83a 	sub	r5,r5,r2
1000372c:	2c4bc83a 	sub	r5,r5,r17
10003730:	3023883a 	mov	r17,r6
10003734:	2880202c 	andhi	r2,r5,128
10003738:	10006b26 	beq	r2,zero,100038e8 <__subdf3+0x334>
1000373c:	04c02034 	movhi	r19,128
10003740:	9cffffc4 	addi	r19,r19,-1
10003744:	2ce6703a 	and	r19,r5,r19
10003748:	98007c26 	beq	r19,zero,1000393c <__subdf3+0x388>
1000374c:	9809883a 	mov	r4,r19
10003750:	0003fdc0 	call	10003fdc <__clzsi2>
10003754:	10fffe04 	addi	r3,r2,-8
10003758:	010007c4 	movi	r4,31
1000375c:	20c07d16 	blt	r4,r3,10003954 <__subdf3+0x3a0>
10003760:	01400a04 	movi	r5,40
10003764:	2885c83a 	sub	r2,r5,r2
10003768:	888ad83a 	srl	r5,r17,r2
1000376c:	98e6983a 	sll	r19,r19,r3
10003770:	88e2983a 	sll	r17,r17,r3
10003774:	2ce6b03a 	or	r19,r5,r19
10003778:	1c007a16 	blt	r3,r16,10003964 <__subdf3+0x3b0>
1000377c:	1c21c83a 	sub	r16,r3,r16
10003780:	81400044 	addi	r5,r16,1
10003784:	00c007c4 	movi	r3,31
10003788:	19409616 	blt	r3,r5,100039e4 <__subdf3+0x430>
1000378c:	1c21c83a 	sub	r16,r3,r16
10003790:	8c08983a 	sll	r4,r17,r16
10003794:	8946d83a 	srl	r3,r17,r5
10003798:	9c20983a 	sll	r16,r19,r16
1000379c:	2008c03a 	cmpne	r4,r4,zero
100037a0:	994ad83a 	srl	r5,r19,r5
100037a4:	1c06b03a 	or	r3,r3,r16
100037a8:	1922b03a 	or	r17,r3,r4
100037ac:	0021883a 	mov	r16,zero
100037b0:	003fa306 	br	10003640 <__alt_data_end+0xf8003640>
100037b4:	2880202c 	andhi	r2,r5,128
100037b8:	9200004c 	andi	r8,r18,1
100037bc:	103fac1e 	bne	r2,zero,10003670 <__alt_data_end+0xf8003670>
100037c0:	2804977a 	slli	r2,r5,29
100037c4:	8822d0fa 	srli	r17,r17,3
100037c8:	00c1ffc4 	movi	r3,2047
100037cc:	280ad0fa 	srli	r5,r5,3
100037d0:	1444b03a 	or	r2,r2,r17
100037d4:	80c02726 	beq	r16,r3,10003874 <__subdf3+0x2c0>
100037d8:	01000434 	movhi	r4,16
100037dc:	213fffc4 	addi	r4,r4,-1
100037e0:	80e0703a 	and	r16,r16,r3
100037e4:	2908703a 	and	r4,r5,r4
100037e8:	003fad06 	br	100036a0 <__alt_data_end+0xf80036a0>
100037ec:	0080690e 	bge	zero,r2,10003994 <__subdf3+0x3e0>
100037f0:	50002f26 	beq	r10,zero,100038b0 <__subdf3+0x2fc>
100037f4:	0101ffc4 	movi	r4,2047
100037f8:	813f9126 	beq	r16,r4,10003640 <__alt_data_end+0xf8003640>
100037fc:	18c02034 	orhi	r3,r3,128
10003800:	01000e04 	movi	r4,56
10003804:	2080b00e 	bge	r4,r2,10003ac8 <__subdf3+0x514>
10003808:	198cb03a 	or	r6,r3,r6
1000380c:	300ec03a 	cmpne	r7,r6,zero
10003810:	0005883a 	mov	r2,zero
10003814:	3c4f883a 	add	r7,r7,r17
10003818:	3c63803a 	cmpltu	r17,r7,r17
1000381c:	114b883a 	add	r5,r2,r5
10003820:	2c4b883a 	add	r5,r5,r17
10003824:	3823883a 	mov	r17,r7
10003828:	2880202c 	andhi	r2,r5,128
1000382c:	10002e26 	beq	r2,zero,100038e8 <__subdf3+0x334>
10003830:	84000044 	addi	r16,r16,1
10003834:	0081ffc4 	movi	r2,2047
10003838:	8080de26 	beq	r16,r2,10003bb4 <__subdf3+0x600>
1000383c:	00bfe034 	movhi	r2,65408
10003840:	10bfffc4 	addi	r2,r2,-1
10003844:	288a703a 	and	r5,r5,r2
10003848:	880cd07a 	srli	r6,r17,1
1000384c:	280897fa 	slli	r4,r5,31
10003850:	88c0004c 	andi	r3,r17,1
10003854:	30e2b03a 	or	r17,r6,r3
10003858:	280ad07a 	srli	r5,r5,1
1000385c:	8922b03a 	or	r17,r17,r4
10003860:	003f7706 	br	10003640 <__alt_data_end+0xf8003640>
10003864:	1984b03a 	or	r2,r3,r6
10003868:	103f6e26 	beq	r2,zero,10003624 <__alt_data_end+0xf8003624>
1000386c:	39c03fcc 	andi	r7,r7,255
10003870:	003f6d06 	br	10003628 <__alt_data_end+0xf8003628>
10003874:	1146b03a 	or	r3,r2,r5
10003878:	18003f26 	beq	r3,zero,10003978 <__subdf3+0x3c4>
1000387c:	00c00434 	movhi	r3,16
10003880:	29000234 	orhi	r4,r5,8
10003884:	18ffffc4 	addi	r3,r3,-1
10003888:	20c8703a 	and	r4,r4,r3
1000388c:	003f8406 	br	100036a0 <__alt_data_end+0xf80036a0>
10003890:	10bfffc4 	addi	r2,r2,-1
10003894:	1000501e 	bne	r2,zero,100039d8 <__subdf3+0x424>
10003898:	898fc83a 	sub	r7,r17,r6
1000389c:	89e3803a 	cmpltu	r17,r17,r7
100038a0:	28cbc83a 	sub	r5,r5,r3
100038a4:	2c4bc83a 	sub	r5,r5,r17
100038a8:	3823883a 	mov	r17,r7
100038ac:	003fa106 	br	10003734 <__alt_data_end+0xf8003734>
100038b0:	1988b03a 	or	r4,r3,r6
100038b4:	203f6226 	beq	r4,zero,10003640 <__alt_data_end+0xf8003640>
100038b8:	10bfffc4 	addi	r2,r2,-1
100038bc:	10009b1e 	bne	r2,zero,10003b2c <__subdf3+0x578>
100038c0:	344d883a 	add	r6,r6,r17
100038c4:	3463803a 	cmpltu	r17,r6,r17
100038c8:	194b883a 	add	r5,r3,r5
100038cc:	2c4b883a 	add	r5,r5,r17
100038d0:	3023883a 	mov	r17,r6
100038d4:	003fd406 	br	10003828 <__alt_data_end+0xf8003828>
100038d8:	1106b03a 	or	r3,r2,r4
100038dc:	1800b426 	beq	r3,zero,10003bb0 <__subdf3+0x5fc>
100038e0:	100b883a 	mov	r5,r2
100038e4:	2023883a 	mov	r17,r4
100038e8:	888001cc 	andi	r2,r17,7
100038ec:	103f561e 	bne	r2,zero,10003648 <__alt_data_end+0xf8003648>
100038f0:	9200004c 	andi	r8,r18,1
100038f4:	003fb206 	br	100037c0 <__alt_data_end+0xf80037c0>
100038f8:	1000531e 	bne	r2,zero,10003a48 <__subdf3+0x494>
100038fc:	80800044 	addi	r2,r16,1
10003900:	1081ffcc 	andi	r2,r2,2047
10003904:	01000044 	movi	r4,1
10003908:	2080a00e 	bge	r4,r2,10003b8c <__subdf3+0x5d8>
1000390c:	8985c83a 	sub	r2,r17,r6
10003910:	8889803a 	cmpltu	r4,r17,r2
10003914:	28e7c83a 	sub	r19,r5,r3
10003918:	9927c83a 	sub	r19,r19,r4
1000391c:	9900202c 	andhi	r4,r19,128
10003920:	20006226 	beq	r4,zero,10003aac <__subdf3+0x4f8>
10003924:	3463c83a 	sub	r17,r6,r17
10003928:	194bc83a 	sub	r5,r3,r5
1000392c:	344d803a 	cmpltu	r6,r6,r17
10003930:	29a7c83a 	sub	r19,r5,r6
10003934:	3825883a 	mov	r18,r7
10003938:	983f841e 	bne	r19,zero,1000374c <__alt_data_end+0xf800374c>
1000393c:	8809883a 	mov	r4,r17
10003940:	0003fdc0 	call	10003fdc <__clzsi2>
10003944:	10800804 	addi	r2,r2,32
10003948:	10fffe04 	addi	r3,r2,-8
1000394c:	010007c4 	movi	r4,31
10003950:	20ff830e 	bge	r4,r3,10003760 <__alt_data_end+0xf8003760>
10003954:	14fff604 	addi	r19,r2,-40
10003958:	8ce6983a 	sll	r19,r17,r19
1000395c:	0023883a 	mov	r17,zero
10003960:	1c3f860e 	bge	r3,r16,1000377c <__alt_data_end+0xf800377c>
10003964:	017fe034 	movhi	r5,65408
10003968:	297fffc4 	addi	r5,r5,-1
1000396c:	80e1c83a 	sub	r16,r16,r3
10003970:	994a703a 	and	r5,r19,r5
10003974:	003f3206 	br	10003640 <__alt_data_end+0xf8003640>
10003978:	0009883a 	mov	r4,zero
1000397c:	0005883a 	mov	r2,zero
10003980:	003f4706 	br	100036a0 <__alt_data_end+0xf80036a0>
10003984:	198cb03a 	or	r6,r3,r6
10003988:	300cc03a 	cmpne	r6,r6,zero
1000398c:	0005883a 	mov	r2,zero
10003990:	003f6306 	br	10003720 <__alt_data_end+0xf8003720>
10003994:	10009d1e 	bne	r2,zero,10003c0c <__subdf3+0x658>
10003998:	81c00044 	addi	r7,r16,1
1000399c:	3881ffcc 	andi	r2,r7,2047
100039a0:	02400044 	movi	r9,1
100039a4:	4880680e 	bge	r9,r2,10003b48 <__subdf3+0x594>
100039a8:	0081ffc4 	movi	r2,2047
100039ac:	3880ae26 	beq	r7,r2,10003c68 <__subdf3+0x6b4>
100039b0:	344d883a 	add	r6,r6,r17
100039b4:	3463803a 	cmpltu	r17,r6,r17
100039b8:	194b883a 	add	r5,r3,r5
100039bc:	2c4b883a 	add	r5,r5,r17
100039c0:	282297fa 	slli	r17,r5,31
100039c4:	300cd07a 	srli	r6,r6,1
100039c8:	280ad07a 	srli	r5,r5,1
100039cc:	3821883a 	mov	r16,r7
100039d0:	89a2b03a 	or	r17,r17,r6
100039d4:	003f1a06 	br	10003640 <__alt_data_end+0xf8003640>
100039d8:	0101ffc4 	movi	r4,2047
100039dc:	813f431e 	bne	r16,r4,100036ec <__alt_data_end+0xf80036ec>
100039e0:	003f1706 	br	10003640 <__alt_data_end+0xf8003640>
100039e4:	80bff844 	addi	r2,r16,-31
100039e8:	00c00804 	movi	r3,32
100039ec:	9884d83a 	srl	r2,r19,r2
100039f0:	28c05126 	beq	r5,r3,10003b38 <__subdf3+0x584>
100039f4:	00c00fc4 	movi	r3,63
100039f8:	1c21c83a 	sub	r16,r3,r16
100039fc:	9c26983a 	sll	r19,r19,r16
10003a00:	9c62b03a 	or	r17,r19,r17
10003a04:	8822c03a 	cmpne	r17,r17,zero
10003a08:	88a2b03a 	or	r17,r17,r2
10003a0c:	000b883a 	mov	r5,zero
10003a10:	0021883a 	mov	r16,zero
10003a14:	003fb406 	br	100038e8 <__alt_data_end+0xf80038e8>
10003a18:	113ff804 	addi	r4,r2,-32
10003a1c:	01c00804 	movi	r7,32
10003a20:	1908d83a 	srl	r4,r3,r4
10003a24:	11c04626 	beq	r2,r7,10003b40 <__subdf3+0x58c>
10003a28:	01c01004 	movi	r7,64
10003a2c:	3885c83a 	sub	r2,r7,r2
10003a30:	1884983a 	sll	r2,r3,r2
10003a34:	118cb03a 	or	r6,r2,r6
10003a38:	300cc03a 	cmpne	r6,r6,zero
10003a3c:	310cb03a 	or	r6,r6,r4
10003a40:	0005883a 	mov	r2,zero
10003a44:	003f3606 	br	10003720 <__alt_data_end+0xf8003720>
10003a48:	80002b26 	beq	r16,zero,10003af8 <__subdf3+0x544>
10003a4c:	0101ffc4 	movi	r4,2047
10003a50:	51006926 	beq	r10,r4,10003bf8 <__subdf3+0x644>
10003a54:	0085c83a 	sub	r2,zero,r2
10003a58:	29402034 	orhi	r5,r5,128
10003a5c:	01000e04 	movi	r4,56
10003a60:	20807d16 	blt	r4,r2,10003c58 <__subdf3+0x6a4>
10003a64:	010007c4 	movi	r4,31
10003a68:	2080d916 	blt	r4,r2,10003dd0 <__subdf3+0x81c>
10003a6c:	01000804 	movi	r4,32
10003a70:	2089c83a 	sub	r4,r4,r2
10003a74:	2912983a 	sll	r9,r5,r4
10003a78:	8890d83a 	srl	r8,r17,r2
10003a7c:	8908983a 	sll	r4,r17,r4
10003a80:	2884d83a 	srl	r2,r5,r2
10003a84:	4a22b03a 	or	r17,r9,r8
10003a88:	2008c03a 	cmpne	r4,r4,zero
10003a8c:	8922b03a 	or	r17,r17,r4
10003a90:	3463c83a 	sub	r17,r6,r17
10003a94:	1885c83a 	sub	r2,r3,r2
10003a98:	344d803a 	cmpltu	r6,r6,r17
10003a9c:	118bc83a 	sub	r5,r2,r6
10003aa0:	5021883a 	mov	r16,r10
10003aa4:	3825883a 	mov	r18,r7
10003aa8:	003f2206 	br	10003734 <__alt_data_end+0xf8003734>
10003aac:	9886b03a 	or	r3,r19,r2
10003ab0:	18001c1e 	bne	r3,zero,10003b24 <__subdf3+0x570>
10003ab4:	0011883a 	mov	r8,zero
10003ab8:	000b883a 	mov	r5,zero
10003abc:	0023883a 	mov	r17,zero
10003ac0:	0021883a 	mov	r16,zero
10003ac4:	003f3e06 	br	100037c0 <__alt_data_end+0xf80037c0>
10003ac8:	010007c4 	movi	r4,31
10003acc:	20803c16 	blt	r4,r2,10003bc0 <__subdf3+0x60c>
10003ad0:	01000804 	movi	r4,32
10003ad4:	2089c83a 	sub	r4,r4,r2
10003ad8:	1912983a 	sll	r9,r3,r4
10003adc:	308ed83a 	srl	r7,r6,r2
10003ae0:	3108983a 	sll	r4,r6,r4
10003ae4:	1884d83a 	srl	r2,r3,r2
10003ae8:	49ceb03a 	or	r7,r9,r7
10003aec:	2008c03a 	cmpne	r4,r4,zero
10003af0:	390eb03a 	or	r7,r7,r4
10003af4:	003f4706 	br	10003814 <__alt_data_end+0xf8003814>
10003af8:	2c48b03a 	or	r4,r5,r17
10003afc:	20003e26 	beq	r4,zero,10003bf8 <__subdf3+0x644>
10003b00:	0084303a 	nor	r2,zero,r2
10003b04:	10003a1e 	bne	r2,zero,10003bf0 <__subdf3+0x63c>
10003b08:	3463c83a 	sub	r17,r6,r17
10003b0c:	194bc83a 	sub	r5,r3,r5
10003b10:	344d803a 	cmpltu	r6,r6,r17
10003b14:	298bc83a 	sub	r5,r5,r6
10003b18:	5021883a 	mov	r16,r10
10003b1c:	3825883a 	mov	r18,r7
10003b20:	003f0406 	br	10003734 <__alt_data_end+0xf8003734>
10003b24:	1023883a 	mov	r17,r2
10003b28:	003f0706 	br	10003748 <__alt_data_end+0xf8003748>
10003b2c:	0101ffc4 	movi	r4,2047
10003b30:	813f331e 	bne	r16,r4,10003800 <__alt_data_end+0xf8003800>
10003b34:	003ec206 	br	10003640 <__alt_data_end+0xf8003640>
10003b38:	0027883a 	mov	r19,zero
10003b3c:	003fb006 	br	10003a00 <__alt_data_end+0xf8003a00>
10003b40:	0005883a 	mov	r2,zero
10003b44:	003fbb06 	br	10003a34 <__alt_data_end+0xf8003a34>
10003b48:	2c44b03a 	or	r2,r5,r17
10003b4c:	80008b1e 	bne	r16,zero,10003d7c <__subdf3+0x7c8>
10003b50:	1000b526 	beq	r2,zero,10003e28 <__subdf3+0x874>
10003b54:	1984b03a 	or	r2,r3,r6
10003b58:	103eb926 	beq	r2,zero,10003640 <__alt_data_end+0xf8003640>
10003b5c:	3449883a 	add	r4,r6,r17
10003b60:	2463803a 	cmpltu	r17,r4,r17
10003b64:	194b883a 	add	r5,r3,r5
10003b68:	2c4b883a 	add	r5,r5,r17
10003b6c:	2880202c 	andhi	r2,r5,128
10003b70:	2023883a 	mov	r17,r4
10003b74:	103f5c26 	beq	r2,zero,100038e8 <__alt_data_end+0xf80038e8>
10003b78:	00bfe034 	movhi	r2,65408
10003b7c:	10bfffc4 	addi	r2,r2,-1
10003b80:	4821883a 	mov	r16,r9
10003b84:	288a703a 	and	r5,r5,r2
10003b88:	003ead06 	br	10003640 <__alt_data_end+0xf8003640>
10003b8c:	2c44b03a 	or	r2,r5,r17
10003b90:	8000291e 	bne	r16,zero,10003c38 <__subdf3+0x684>
10003b94:	10004f1e 	bne	r2,zero,10003cd4 <__subdf3+0x720>
10003b98:	1984b03a 	or	r2,r3,r6
10003b9c:	10000426 	beq	r2,zero,10003bb0 <__subdf3+0x5fc>
10003ba0:	180b883a 	mov	r5,r3
10003ba4:	3023883a 	mov	r17,r6
10003ba8:	3825883a 	mov	r18,r7
10003bac:	003ea406 	br	10003640 <__alt_data_end+0xf8003640>
10003bb0:	0011883a 	mov	r8,zero
10003bb4:	000b883a 	mov	r5,zero
10003bb8:	0023883a 	mov	r17,zero
10003bbc:	003f0006 	br	100037c0 <__alt_data_end+0xf80037c0>
10003bc0:	11fff804 	addi	r7,r2,-32
10003bc4:	19c8d83a 	srl	r4,r3,r7
10003bc8:	01c00804 	movi	r7,32
10003bcc:	11c07e26 	beq	r2,r7,10003dc8 <__subdf3+0x814>
10003bd0:	01c01004 	movi	r7,64
10003bd4:	3885c83a 	sub	r2,r7,r2
10003bd8:	1884983a 	sll	r2,r3,r2
10003bdc:	118cb03a 	or	r6,r2,r6
10003be0:	300ec03a 	cmpne	r7,r6,zero
10003be4:	390eb03a 	or	r7,r7,r4
10003be8:	0005883a 	mov	r2,zero
10003bec:	003f0906 	br	10003814 <__alt_data_end+0xf8003814>
10003bf0:	0101ffc4 	movi	r4,2047
10003bf4:	513f991e 	bne	r10,r4,10003a5c <__alt_data_end+0xf8003a5c>
10003bf8:	180b883a 	mov	r5,r3
10003bfc:	3023883a 	mov	r17,r6
10003c00:	5021883a 	mov	r16,r10
10003c04:	3825883a 	mov	r18,r7
10003c08:	003e8d06 	br	10003640 <__alt_data_end+0xf8003640>
10003c0c:	80001a1e 	bne	r16,zero,10003c78 <__subdf3+0x6c4>
10003c10:	2c48b03a 	or	r4,r5,r17
10003c14:	20005526 	beq	r4,zero,10003d6c <__subdf3+0x7b8>
10003c18:	0084303a 	nor	r2,zero,r2
10003c1c:	1000511e 	bne	r2,zero,10003d64 <__subdf3+0x7b0>
10003c20:	89a3883a 	add	r17,r17,r6
10003c24:	194b883a 	add	r5,r3,r5
10003c28:	898d803a 	cmpltu	r6,r17,r6
10003c2c:	298b883a 	add	r5,r5,r6
10003c30:	5021883a 	mov	r16,r10
10003c34:	003efc06 	br	10003828 <__alt_data_end+0xf8003828>
10003c38:	1000341e 	bne	r2,zero,10003d0c <__subdf3+0x758>
10003c3c:	1984b03a 	or	r2,r3,r6
10003c40:	10006f26 	beq	r2,zero,10003e00 <__subdf3+0x84c>
10003c44:	180b883a 	mov	r5,r3
10003c48:	3023883a 	mov	r17,r6
10003c4c:	3825883a 	mov	r18,r7
10003c50:	0401ffc4 	movi	r16,2047
10003c54:	003e7a06 	br	10003640 <__alt_data_end+0xf8003640>
10003c58:	2c62b03a 	or	r17,r5,r17
10003c5c:	8822c03a 	cmpne	r17,r17,zero
10003c60:	0005883a 	mov	r2,zero
10003c64:	003f8a06 	br	10003a90 <__alt_data_end+0xf8003a90>
10003c68:	3821883a 	mov	r16,r7
10003c6c:	000b883a 	mov	r5,zero
10003c70:	0023883a 	mov	r17,zero
10003c74:	003ed206 	br	100037c0 <__alt_data_end+0xf80037c0>
10003c78:	0101ffc4 	movi	r4,2047
10003c7c:	51003b26 	beq	r10,r4,10003d6c <__subdf3+0x7b8>
10003c80:	0085c83a 	sub	r2,zero,r2
10003c84:	29402034 	orhi	r5,r5,128
10003c88:	01000e04 	movi	r4,56
10003c8c:	20806216 	blt	r4,r2,10003e18 <__subdf3+0x864>
10003c90:	010007c4 	movi	r4,31
10003c94:	20806b16 	blt	r4,r2,10003e44 <__subdf3+0x890>
10003c98:	01000804 	movi	r4,32
10003c9c:	2089c83a 	sub	r4,r4,r2
10003ca0:	2912983a 	sll	r9,r5,r4
10003ca4:	888ed83a 	srl	r7,r17,r2
10003ca8:	8908983a 	sll	r4,r17,r4
10003cac:	2884d83a 	srl	r2,r5,r2
10003cb0:	49e2b03a 	or	r17,r9,r7
10003cb4:	2008c03a 	cmpne	r4,r4,zero
10003cb8:	8922b03a 	or	r17,r17,r4
10003cbc:	89a3883a 	add	r17,r17,r6
10003cc0:	10c5883a 	add	r2,r2,r3
10003cc4:	898d803a 	cmpltu	r6,r17,r6
10003cc8:	118b883a 	add	r5,r2,r6
10003ccc:	5021883a 	mov	r16,r10
10003cd0:	003ed506 	br	10003828 <__alt_data_end+0xf8003828>
10003cd4:	1984b03a 	or	r2,r3,r6
10003cd8:	103e5926 	beq	r2,zero,10003640 <__alt_data_end+0xf8003640>
10003cdc:	8989c83a 	sub	r4,r17,r6
10003ce0:	8911803a 	cmpltu	r8,r17,r4
10003ce4:	28c5c83a 	sub	r2,r5,r3
10003ce8:	1205c83a 	sub	r2,r2,r8
10003cec:	1200202c 	andhi	r8,r2,128
10003cf0:	403ef926 	beq	r8,zero,100038d8 <__alt_data_end+0xf80038d8>
10003cf4:	3463c83a 	sub	r17,r6,r17
10003cf8:	194bc83a 	sub	r5,r3,r5
10003cfc:	344d803a 	cmpltu	r6,r6,r17
10003d00:	298bc83a 	sub	r5,r5,r6
10003d04:	3825883a 	mov	r18,r7
10003d08:	003e4d06 	br	10003640 <__alt_data_end+0xf8003640>
10003d0c:	1984b03a 	or	r2,r3,r6
10003d10:	10002b26 	beq	r2,zero,10003dc0 <__subdf3+0x80c>
10003d14:	2808d0fa 	srli	r4,r5,3
10003d18:	8822d0fa 	srli	r17,r17,3
10003d1c:	280a977a 	slli	r5,r5,29
10003d20:	2080022c 	andhi	r2,r4,8
10003d24:	2c62b03a 	or	r17,r5,r17
10003d28:	10000826 	beq	r2,zero,10003d4c <__subdf3+0x798>
10003d2c:	1810d0fa 	srli	r8,r3,3
10003d30:	4080022c 	andhi	r2,r8,8
10003d34:	1000051e 	bne	r2,zero,10003d4c <__subdf3+0x798>
10003d38:	300cd0fa 	srli	r6,r6,3
10003d3c:	1804977a 	slli	r2,r3,29
10003d40:	4009883a 	mov	r4,r8
10003d44:	3825883a 	mov	r18,r7
10003d48:	11a2b03a 	or	r17,r2,r6
10003d4c:	880ad77a 	srli	r5,r17,29
10003d50:	200890fa 	slli	r4,r4,3
10003d54:	882290fa 	slli	r17,r17,3
10003d58:	0401ffc4 	movi	r16,2047
10003d5c:	290ab03a 	or	r5,r5,r4
10003d60:	003e3706 	br	10003640 <__alt_data_end+0xf8003640>
10003d64:	0101ffc4 	movi	r4,2047
10003d68:	513fc71e 	bne	r10,r4,10003c88 <__alt_data_end+0xf8003c88>
10003d6c:	180b883a 	mov	r5,r3
10003d70:	3023883a 	mov	r17,r6
10003d74:	5021883a 	mov	r16,r10
10003d78:	003e3106 	br	10003640 <__alt_data_end+0xf8003640>
10003d7c:	10002d26 	beq	r2,zero,10003e34 <__subdf3+0x880>
10003d80:	1984b03a 	or	r2,r3,r6
10003d84:	10000e26 	beq	r2,zero,10003dc0 <__subdf3+0x80c>
10003d88:	2808d0fa 	srli	r4,r5,3
10003d8c:	8822d0fa 	srli	r17,r17,3
10003d90:	280a977a 	slli	r5,r5,29
10003d94:	2080022c 	andhi	r2,r4,8
10003d98:	2c62b03a 	or	r17,r5,r17
10003d9c:	103feb26 	beq	r2,zero,10003d4c <__alt_data_end+0xf8003d4c>
10003da0:	180ed0fa 	srli	r7,r3,3
10003da4:	3880022c 	andhi	r2,r7,8
10003da8:	103fe81e 	bne	r2,zero,10003d4c <__alt_data_end+0xf8003d4c>
10003dac:	300cd0fa 	srli	r6,r6,3
10003db0:	1804977a 	slli	r2,r3,29
10003db4:	3809883a 	mov	r4,r7
10003db8:	11a2b03a 	or	r17,r2,r6
10003dbc:	003fe306 	br	10003d4c <__alt_data_end+0xf8003d4c>
10003dc0:	0401ffc4 	movi	r16,2047
10003dc4:	003e1e06 	br	10003640 <__alt_data_end+0xf8003640>
10003dc8:	0005883a 	mov	r2,zero
10003dcc:	003f8306 	br	10003bdc <__alt_data_end+0xf8003bdc>
10003dd0:	113ff804 	addi	r4,r2,-32
10003dd4:	02000804 	movi	r8,32
10003dd8:	2908d83a 	srl	r4,r5,r4
10003ddc:	12002526 	beq	r2,r8,10003e74 <__subdf3+0x8c0>
10003de0:	02001004 	movi	r8,64
10003de4:	4085c83a 	sub	r2,r8,r2
10003de8:	288a983a 	sll	r5,r5,r2
10003dec:	2c62b03a 	or	r17,r5,r17
10003df0:	8822c03a 	cmpne	r17,r17,zero
10003df4:	8922b03a 	or	r17,r17,r4
10003df8:	0005883a 	mov	r2,zero
10003dfc:	003f2406 	br	10003a90 <__alt_data_end+0xf8003a90>
10003e00:	01402034 	movhi	r5,128
10003e04:	0011883a 	mov	r8,zero
10003e08:	297fffc4 	addi	r5,r5,-1
10003e0c:	047ffe04 	movi	r17,-8
10003e10:	0401ffc4 	movi	r16,2047
10003e14:	003e6a06 	br	100037c0 <__alt_data_end+0xf80037c0>
10003e18:	2c62b03a 	or	r17,r5,r17
10003e1c:	8822c03a 	cmpne	r17,r17,zero
10003e20:	0005883a 	mov	r2,zero
10003e24:	003fa506 	br	10003cbc <__alt_data_end+0xf8003cbc>
10003e28:	180b883a 	mov	r5,r3
10003e2c:	3023883a 	mov	r17,r6
10003e30:	003e0306 	br	10003640 <__alt_data_end+0xf8003640>
10003e34:	180b883a 	mov	r5,r3
10003e38:	3023883a 	mov	r17,r6
10003e3c:	0401ffc4 	movi	r16,2047
10003e40:	003dff06 	br	10003640 <__alt_data_end+0xf8003640>
10003e44:	113ff804 	addi	r4,r2,-32
10003e48:	01c00804 	movi	r7,32
10003e4c:	2908d83a 	srl	r4,r5,r4
10003e50:	11c00a26 	beq	r2,r7,10003e7c <__subdf3+0x8c8>
10003e54:	01c01004 	movi	r7,64
10003e58:	3885c83a 	sub	r2,r7,r2
10003e5c:	288a983a 	sll	r5,r5,r2
10003e60:	2c62b03a 	or	r17,r5,r17
10003e64:	8822c03a 	cmpne	r17,r17,zero
10003e68:	8922b03a 	or	r17,r17,r4
10003e6c:	0005883a 	mov	r2,zero
10003e70:	003f9206 	br	10003cbc <__alt_data_end+0xf8003cbc>
10003e74:	000b883a 	mov	r5,zero
10003e78:	003fdc06 	br	10003dec <__alt_data_end+0xf8003dec>
10003e7c:	000b883a 	mov	r5,zero
10003e80:	003ff706 	br	10003e60 <__alt_data_end+0xf8003e60>

10003e84 <__fixdfsi>:
10003e84:	2806d53a 	srli	r3,r5,20
10003e88:	00800434 	movhi	r2,16
10003e8c:	10bfffc4 	addi	r2,r2,-1
10003e90:	18c1ffcc 	andi	r3,r3,2047
10003e94:	0180ff84 	movi	r6,1022
10003e98:	2884703a 	and	r2,r5,r2
10003e9c:	280ad7fa 	srli	r5,r5,31
10003ea0:	30c0130e 	bge	r6,r3,10003ef0 <__fixdfsi+0x6c>
10003ea4:	01810744 	movi	r6,1053
10003ea8:	30c00d16 	blt	r6,r3,10003ee0 <__fixdfsi+0x5c>
10003eac:	01810cc4 	movi	r6,1075
10003eb0:	30cdc83a 	sub	r6,r6,r3
10003eb4:	01c007c4 	movi	r7,31
10003eb8:	10800434 	orhi	r2,r2,16
10003ebc:	39800e0e 	bge	r7,r6,10003ef8 <__fixdfsi+0x74>
10003ec0:	010104c4 	movi	r4,1043
10003ec4:	20c7c83a 	sub	r3,r4,r3
10003ec8:	10c6d83a 	srl	r3,r2,r3
10003ecc:	29403fcc 	andi	r5,r5,255
10003ed0:	0145c83a 	sub	r2,zero,r5
10003ed4:	1884f03a 	xor	r2,r3,r2
10003ed8:	1145883a 	add	r2,r2,r5
10003edc:	f800283a 	ret
10003ee0:	00a00034 	movhi	r2,32768
10003ee4:	10bfffc4 	addi	r2,r2,-1
10003ee8:	2885883a 	add	r2,r5,r2
10003eec:	f800283a 	ret
10003ef0:	0005883a 	mov	r2,zero
10003ef4:	f800283a 	ret
10003ef8:	18fefb44 	addi	r3,r3,-1043
10003efc:	2188d83a 	srl	r4,r4,r6
10003f00:	10c6983a 	sll	r3,r2,r3
10003f04:	20c6b03a 	or	r3,r4,r3
10003f08:	003ff006 	br	10003ecc <__alt_data_end+0xf8003ecc>

10003f0c <__floatsidf>:
10003f0c:	defffd04 	addi	sp,sp,-12
10003f10:	dc400115 	stw	r17,4(sp)
10003f14:	dfc00215 	stw	ra,8(sp)
10003f18:	dc000015 	stw	r16,0(sp)
10003f1c:	2023883a 	mov	r17,r4
10003f20:	20001426 	beq	r4,zero,10003f74 <__floatsidf+0x68>
10003f24:	2020d7fa 	srli	r16,r4,31
10003f28:	80000126 	beq	r16,zero,10003f30 <__floatsidf+0x24>
10003f2c:	0123c83a 	sub	r17,zero,r4
10003f30:	8809883a 	mov	r4,r17
10003f34:	0003fdc0 	call	10003fdc <__clzsi2>
10003f38:	01410784 	movi	r5,1054
10003f3c:	00c00284 	movi	r3,10
10003f40:	288bc83a 	sub	r5,r5,r2
10003f44:	18801c16 	blt	r3,r2,10003fb8 <__floatsidf+0xac>
10003f48:	00c002c4 	movi	r3,11
10003f4c:	1887c83a 	sub	r3,r3,r2
10003f50:	88c8d83a 	srl	r4,r17,r3
10003f54:	00c00434 	movhi	r3,16
10003f58:	18ffffc4 	addi	r3,r3,-1
10003f5c:	10800544 	addi	r2,r2,21
10003f60:	20c8703a 	and	r4,r4,r3
10003f64:	8884983a 	sll	r2,r17,r2
10003f68:	28c1ffcc 	andi	r3,r5,2047
10003f6c:	800d883a 	mov	r6,r16
10003f70:	00000406 	br	10003f84 <__floatsidf+0x78>
10003f74:	000d883a 	mov	r6,zero
10003f78:	0007883a 	mov	r3,zero
10003f7c:	0009883a 	mov	r4,zero
10003f80:	0005883a 	mov	r2,zero
10003f84:	180a953a 	slli	r5,r3,20
10003f88:	31803fcc 	andi	r6,r6,255
10003f8c:	00c00434 	movhi	r3,16
10003f90:	300c97fa 	slli	r6,r6,31
10003f94:	18ffffc4 	addi	r3,r3,-1
10003f98:	20c6703a 	and	r3,r4,r3
10003f9c:	1946b03a 	or	r3,r3,r5
10003fa0:	1986b03a 	or	r3,r3,r6
10003fa4:	dfc00217 	ldw	ra,8(sp)
10003fa8:	dc400117 	ldw	r17,4(sp)
10003fac:	dc000017 	ldw	r16,0(sp)
10003fb0:	dec00304 	addi	sp,sp,12
10003fb4:	f800283a 	ret
10003fb8:	10fffd44 	addi	r3,r2,-11
10003fbc:	88c8983a 	sll	r4,r17,r3
10003fc0:	00800434 	movhi	r2,16
10003fc4:	10bfffc4 	addi	r2,r2,-1
10003fc8:	2088703a 	and	r4,r4,r2
10003fcc:	28c1ffcc 	andi	r3,r5,2047
10003fd0:	800d883a 	mov	r6,r16
10003fd4:	0005883a 	mov	r2,zero
10003fd8:	003fea06 	br	10003f84 <__alt_data_end+0xf8003f84>

10003fdc <__clzsi2>:
10003fdc:	00bfffd4 	movui	r2,65535
10003fe0:	11000b36 	bltu	r2,r4,10004010 <__clzsi2+0x34>
10003fe4:	00803fc4 	movi	r2,255
10003fe8:	1100122e 	bgeu	r2,r4,10004034 <__clzsi2+0x58>
10003fec:	00c00204 	movi	r3,8
10003ff0:	01400604 	movi	r5,24
10003ff4:	20c8d83a 	srl	r4,r4,r3
10003ff8:	00840034 	movhi	r2,4096
10003ffc:	10990b04 	addi	r2,r2,25644
10004000:	1109883a 	add	r4,r2,r4
10004004:	20800003 	ldbu	r2,0(r4)
10004008:	2885c83a 	sub	r2,r5,r2
1000400c:	f800283a 	ret
10004010:	00804034 	movhi	r2,256
10004014:	10bfffc4 	addi	r2,r2,-1
10004018:	11000336 	bltu	r2,r4,10004028 <__clzsi2+0x4c>
1000401c:	00c00404 	movi	r3,16
10004020:	180b883a 	mov	r5,r3
10004024:	003ff306 	br	10003ff4 <__alt_data_end+0xf8003ff4>
10004028:	00c00604 	movi	r3,24
1000402c:	01400204 	movi	r5,8
10004030:	003ff006 	br	10003ff4 <__alt_data_end+0xf8003ff4>
10004034:	0007883a 	mov	r3,zero
10004038:	01400804 	movi	r5,32
1000403c:	003fed06 	br	10003ff4 <__alt_data_end+0xf8003ff4>

10004040 <srand>:
10004040:	00840034 	movhi	r2,4096
10004044:	109ee504 	addi	r2,r2,31636
10004048:	10800017 	ldw	r2,0(r2)
1000404c:	11002915 	stw	r4,164(r2)
10004050:	10002a15 	stw	zero,168(r2)
10004054:	f800283a 	ret

10004058 <rand>:
10004058:	00840034 	movhi	r2,4096
1000405c:	defffe04 	addi	sp,sp,-8
10004060:	109ee504 	addi	r2,r2,31636
10004064:	dc000015 	stw	r16,0(sp)
10004068:	14000017 	ldw	r16,0(r2)
1000406c:	dfc00115 	stw	ra,4(sp)
10004070:	01932574 	movhi	r6,19605
10004074:	81002917 	ldw	r4,164(r16)
10004078:	81402a17 	ldw	r5,168(r16)
1000407c:	01d614b4 	movhi	r7,22610
10004080:	319fcb44 	addi	r6,r6,32557
10004084:	39fd0b44 	addi	r7,r7,-3027
10004088:	00040bc0 	call	100040bc <__muldi3>
1000408c:	11000044 	addi	r4,r2,1
10004090:	2085803a 	cmpltu	r2,r4,r2
10004094:	10c7883a 	add	r3,r2,r3
10004098:	00a00034 	movhi	r2,32768
1000409c:	10bfffc4 	addi	r2,r2,-1
100040a0:	1884703a 	and	r2,r3,r2
100040a4:	81002915 	stw	r4,164(r16)
100040a8:	80c02a15 	stw	r3,168(r16)
100040ac:	dfc00117 	ldw	ra,4(sp)
100040b0:	dc000017 	ldw	r16,0(sp)
100040b4:	dec00204 	addi	sp,sp,8
100040b8:	f800283a 	ret

100040bc <__muldi3>:
100040bc:	defff604 	addi	sp,sp,-40
100040c0:	dd800615 	stw	r22,24(sp)
100040c4:	dd400515 	stw	r21,20(sp)
100040c8:	25bfffcc 	andi	r22,r4,65535
100040cc:	357fffcc 	andi	r21,r6,65535
100040d0:	dc400115 	stw	r17,4(sp)
100040d4:	2022d43a 	srli	r17,r4,16
100040d8:	dcc00315 	stw	r19,12(sp)
100040dc:	dc800215 	stw	r18,8(sp)
100040e0:	2027883a 	mov	r19,r4
100040e4:	2825883a 	mov	r18,r5
100040e8:	a809883a 	mov	r4,r21
100040ec:	b00b883a 	mov	r5,r22
100040f0:	dfc00915 	stw	ra,36(sp)
100040f4:	df000815 	stw	fp,32(sp)
100040f8:	ddc00715 	stw	r23,28(sp)
100040fc:	3839883a 	mov	fp,r7
10004100:	302ed43a 	srli	r23,r6,16
10004104:	dd000415 	stw	r20,16(sp)
10004108:	dc000015 	stw	r16,0(sp)
1000410c:	3029883a 	mov	r20,r6
10004110:	0002cf00 	call	10002cf0 <__mulsi3>
10004114:	a809883a 	mov	r4,r21
10004118:	880b883a 	mov	r5,r17
1000411c:	1021883a 	mov	r16,r2
10004120:	0002cf00 	call	10002cf0 <__mulsi3>
10004124:	880b883a 	mov	r5,r17
10004128:	b809883a 	mov	r4,r23
1000412c:	102b883a 	mov	r21,r2
10004130:	0002cf00 	call	10002cf0 <__mulsi3>
10004134:	b809883a 	mov	r4,r23
10004138:	b00b883a 	mov	r5,r22
1000413c:	1023883a 	mov	r17,r2
10004140:	0002cf00 	call	10002cf0 <__mulsi3>
10004144:	8012d43a 	srli	r9,r16,16
10004148:	a885883a 	add	r2,r21,r2
1000414c:	1251883a 	add	r8,r2,r9
10004150:	4540022e 	bgeu	r8,r21,1000415c <__muldi3+0xa0>
10004154:	00800074 	movhi	r2,1
10004158:	88a3883a 	add	r17,r17,r2
1000415c:	4006d43a 	srli	r3,r8,16
10004160:	4010943a 	slli	r8,r8,16
10004164:	9809883a 	mov	r4,r19
10004168:	e00b883a 	mov	r5,fp
1000416c:	843fffcc 	andi	r16,r16,65535
10004170:	88e3883a 	add	r17,r17,r3
10004174:	4421883a 	add	r16,r8,r16
10004178:	0002cf00 	call	10002cf0 <__mulsi3>
1000417c:	a009883a 	mov	r4,r20
10004180:	900b883a 	mov	r5,r18
10004184:	1027883a 	mov	r19,r2
10004188:	0002cf00 	call	10002cf0 <__mulsi3>
1000418c:	9885883a 	add	r2,r19,r2
10004190:	1447883a 	add	r3,r2,r17
10004194:	8005883a 	mov	r2,r16
10004198:	dfc00917 	ldw	ra,36(sp)
1000419c:	df000817 	ldw	fp,32(sp)
100041a0:	ddc00717 	ldw	r23,28(sp)
100041a4:	dd800617 	ldw	r22,24(sp)
100041a8:	dd400517 	ldw	r21,20(sp)
100041ac:	dd000417 	ldw	r20,16(sp)
100041b0:	dcc00317 	ldw	r19,12(sp)
100041b4:	dc800217 	ldw	r18,8(sp)
100041b8:	dc400117 	ldw	r17,4(sp)
100041bc:	dc000017 	ldw	r16,0(sp)
100041c0:	dec00a04 	addi	sp,sp,40
100041c4:	f800283a 	ret

100041c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100041c8:	defffc04 	addi	sp,sp,-16
100041cc:	df000315 	stw	fp,12(sp)
100041d0:	df000304 	addi	fp,sp,12
100041d4:	e13ffd15 	stw	r4,-12(fp)
100041d8:	e17ffe15 	stw	r5,-8(fp)
100041dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100041e0:	e0fffe17 	ldw	r3,-8(fp)
100041e4:	e0bffd17 	ldw	r2,-12(fp)
100041e8:	18800c26 	beq	r3,r2,1000421c <alt_load_section+0x54>
  {
    while( to != end )
100041ec:	00000806 	br	10004210 <alt_load_section+0x48>
    {
      *to++ = *from++;
100041f0:	e0bffe17 	ldw	r2,-8(fp)
100041f4:	10c00104 	addi	r3,r2,4
100041f8:	e0fffe15 	stw	r3,-8(fp)
100041fc:	e0fffd17 	ldw	r3,-12(fp)
10004200:	19000104 	addi	r4,r3,4
10004204:	e13ffd15 	stw	r4,-12(fp)
10004208:	18c00017 	ldw	r3,0(r3)
1000420c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10004210:	e0fffe17 	ldw	r3,-8(fp)
10004214:	e0bfff17 	ldw	r2,-4(fp)
10004218:	18bff51e 	bne	r3,r2,100041f0 <__alt_data_end+0xf80041f0>
    {
      *to++ = *from++;
    }
  }
}
1000421c:	e037883a 	mov	sp,fp
10004220:	df000017 	ldw	fp,0(sp)
10004224:	dec00104 	addi	sp,sp,4
10004228:	f800283a 	ret

1000422c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000422c:	defffe04 	addi	sp,sp,-8
10004230:	dfc00115 	stw	ra,4(sp)
10004234:	df000015 	stw	fp,0(sp)
10004238:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000423c:	01040034 	movhi	r4,4096
10004240:	211eef04 	addi	r4,r4,31676
10004244:	01440034 	movhi	r5,4096
10004248:	29595904 	addi	r5,r5,25956
1000424c:	01840034 	movhi	r6,4096
10004250:	319eef04 	addi	r6,r6,31676
10004254:	00041c80 	call	100041c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10004258:	01040034 	movhi	r4,4096
1000425c:	21000804 	addi	r4,r4,32
10004260:	01440034 	movhi	r5,4096
10004264:	29400804 	addi	r5,r5,32
10004268:	01840034 	movhi	r6,4096
1000426c:	31808b04 	addi	r6,r6,556
10004270:	00041c80 	call	100041c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10004274:	01040034 	movhi	r4,4096
10004278:	21190b04 	addi	r4,r4,25644
1000427c:	01440034 	movhi	r5,4096
10004280:	29590b04 	addi	r5,r5,25644
10004284:	01840034 	movhi	r6,4096
10004288:	31995904 	addi	r6,r6,25956
1000428c:	00041c80 	call	100041c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10004290:	000508c0 	call	1000508c <alt_dcache_flush_all>
  alt_icache_flush_all();
10004294:	00052800 	call	10005280 <alt_icache_flush_all>
}
10004298:	e037883a 	mov	sp,fp
1000429c:	dfc00117 	ldw	ra,4(sp)
100042a0:	df000017 	ldw	fp,0(sp)
100042a4:	dec00204 	addi	sp,sp,8
100042a8:	f800283a 	ret

100042ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100042ac:	defffd04 	addi	sp,sp,-12
100042b0:	dfc00215 	stw	ra,8(sp)
100042b4:	df000115 	stw	fp,4(sp)
100042b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100042bc:	0009883a 	mov	r4,zero
100042c0:	000435c0 	call	1000435c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100042c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100042c8:	00043900 	call	10004390 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100042cc:	01040034 	movhi	r4,4096
100042d0:	21194c04 	addi	r4,r4,25904
100042d4:	01440034 	movhi	r5,4096
100042d8:	29594c04 	addi	r5,r5,25904
100042dc:	01840034 	movhi	r6,4096
100042e0:	31994c04 	addi	r6,r6,25904
100042e4:	000564c0 	call	1000564c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100042e8:	00051c80 	call	100051c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100042ec:	01040034 	movhi	r4,4096
100042f0:	21148904 	addi	r4,r4,21028
100042f4:	0005eb80 	call	10005eb8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100042f8:	d125b017 	ldw	r4,-26944(gp)
100042fc:	d0e5b117 	ldw	r3,-26940(gp)
10004300:	d0a5b217 	ldw	r2,-26936(gp)
10004304:	180b883a 	mov	r5,r3
10004308:	100d883a 	mov	r6,r2
1000430c:	00002680 	call	10000268 <main>
10004310:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10004314:	01000044 	movi	r4,1
10004318:	0004fb40 	call	10004fb4 <close>
  exit (result);
1000431c:	e13fff17 	ldw	r4,-4(fp)
10004320:	0005ecc0 	call	10005ecc <exit>

10004324 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10004324:	defffd04 	addi	sp,sp,-12
10004328:	dfc00215 	stw	ra,8(sp)
1000432c:	df000115 	stw	fp,4(sp)
10004330:	df000104 	addi	fp,sp,4
10004334:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10004338:	e13fff17 	ldw	r4,-4(fp)
1000433c:	01440034 	movhi	r5,4096
10004340:	295ee804 	addi	r5,r5,31648
10004344:	00051240 	call	10005124 <alt_dev_llist_insert>
}
10004348:	e037883a 	mov	sp,fp
1000434c:	dfc00117 	ldw	ra,4(sp)
10004350:	df000017 	ldw	fp,0(sp)
10004354:	dec00204 	addi	sp,sp,8
10004358:	f800283a 	ret

1000435c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000435c:	defffd04 	addi	sp,sp,-12
10004360:	dfc00215 	stw	ra,8(sp)
10004364:	df000115 	stw	fp,4(sp)
10004368:	df000104 	addi	fp,sp,4
1000436c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10004370:	0005b840 	call	10005b84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10004374:	00800044 	movi	r2,1
10004378:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000437c:	e037883a 	mov	sp,fp
10004380:	dfc00117 	ldw	ra,4(sp)
10004384:	df000017 	ldw	fp,0(sp)
10004388:	dec00204 	addi	sp,sp,8
1000438c:	f800283a 	ret

10004390 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10004390:	defffe04 	addi	sp,sp,-8
10004394:	dfc00115 	stw	ra,4(sp)
10004398:	df000015 	stw	fp,0(sp)
1000439c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100043a0:	01040034 	movhi	r4,4096
100043a4:	211a6c04 	addi	r4,r4,27056
100043a8:	000b883a 	mov	r5,zero
100043ac:	01800144 	movi	r6,5
100043b0:	000453c0 	call	1000453c <altera_avalon_jtag_uart_init>
100043b4:	01040034 	movhi	r4,4096
100043b8:	211a6204 	addi	r4,r4,27016
100043bc:	00043240 	call	10004324 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100043c0:	0001883a 	nop
}
100043c4:	e037883a 	mov	sp,fp
100043c8:	dfc00117 	ldw	ra,4(sp)
100043cc:	df000017 	ldw	fp,0(sp)
100043d0:	dec00204 	addi	sp,sp,8
100043d4:	f800283a 	ret

100043d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100043d8:	defffa04 	addi	sp,sp,-24
100043dc:	dfc00515 	stw	ra,20(sp)
100043e0:	df000415 	stw	fp,16(sp)
100043e4:	df000404 	addi	fp,sp,16
100043e8:	e13ffd15 	stw	r4,-12(fp)
100043ec:	e17ffe15 	stw	r5,-8(fp)
100043f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100043f4:	e0bffd17 	ldw	r2,-12(fp)
100043f8:	10800017 	ldw	r2,0(r2)
100043fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10004400:	e0bffc17 	ldw	r2,-16(fp)
10004404:	10c00a04 	addi	r3,r2,40
10004408:	e0bffd17 	ldw	r2,-12(fp)
1000440c:	10800217 	ldw	r2,8(r2)
10004410:	1809883a 	mov	r4,r3
10004414:	e17ffe17 	ldw	r5,-8(fp)
10004418:	e1bfff17 	ldw	r6,-4(fp)
1000441c:	100f883a 	mov	r7,r2
10004420:	0004a000 	call	10004a00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10004424:	e037883a 	mov	sp,fp
10004428:	dfc00117 	ldw	ra,4(sp)
1000442c:	df000017 	ldw	fp,0(sp)
10004430:	dec00204 	addi	sp,sp,8
10004434:	f800283a 	ret

10004438 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10004438:	defffa04 	addi	sp,sp,-24
1000443c:	dfc00515 	stw	ra,20(sp)
10004440:	df000415 	stw	fp,16(sp)
10004444:	df000404 	addi	fp,sp,16
10004448:	e13ffd15 	stw	r4,-12(fp)
1000444c:	e17ffe15 	stw	r5,-8(fp)
10004450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10004454:	e0bffd17 	ldw	r2,-12(fp)
10004458:	10800017 	ldw	r2,0(r2)
1000445c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10004460:	e0bffc17 	ldw	r2,-16(fp)
10004464:	10c00a04 	addi	r3,r2,40
10004468:	e0bffd17 	ldw	r2,-12(fp)
1000446c:	10800217 	ldw	r2,8(r2)
10004470:	1809883a 	mov	r4,r3
10004474:	e17ffe17 	ldw	r5,-8(fp)
10004478:	e1bfff17 	ldw	r6,-4(fp)
1000447c:	100f883a 	mov	r7,r2
10004480:	0004c0c0 	call	10004c0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10004484:	e037883a 	mov	sp,fp
10004488:	dfc00117 	ldw	ra,4(sp)
1000448c:	df000017 	ldw	fp,0(sp)
10004490:	dec00204 	addi	sp,sp,8
10004494:	f800283a 	ret

10004498 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10004498:	defffc04 	addi	sp,sp,-16
1000449c:	dfc00315 	stw	ra,12(sp)
100044a0:	df000215 	stw	fp,8(sp)
100044a4:	df000204 	addi	fp,sp,8
100044a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100044ac:	e0bfff17 	ldw	r2,-4(fp)
100044b0:	10800017 	ldw	r2,0(r2)
100044b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100044b8:	e0bffe17 	ldw	r2,-8(fp)
100044bc:	10c00a04 	addi	r3,r2,40
100044c0:	e0bfff17 	ldw	r2,-4(fp)
100044c4:	10800217 	ldw	r2,8(r2)
100044c8:	1809883a 	mov	r4,r3
100044cc:	100b883a 	mov	r5,r2
100044d0:	00048ac0 	call	100048ac <altera_avalon_jtag_uart_close>
}
100044d4:	e037883a 	mov	sp,fp
100044d8:	dfc00117 	ldw	ra,4(sp)
100044dc:	df000017 	ldw	fp,0(sp)
100044e0:	dec00204 	addi	sp,sp,8
100044e4:	f800283a 	ret

100044e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100044e8:	defffa04 	addi	sp,sp,-24
100044ec:	dfc00515 	stw	ra,20(sp)
100044f0:	df000415 	stw	fp,16(sp)
100044f4:	df000404 	addi	fp,sp,16
100044f8:	e13ffd15 	stw	r4,-12(fp)
100044fc:	e17ffe15 	stw	r5,-8(fp)
10004500:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10004504:	e0bffd17 	ldw	r2,-12(fp)
10004508:	10800017 	ldw	r2,0(r2)
1000450c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10004510:	e0bffc17 	ldw	r2,-16(fp)
10004514:	10800a04 	addi	r2,r2,40
10004518:	1009883a 	mov	r4,r2
1000451c:	e17ffe17 	ldw	r5,-8(fp)
10004520:	e1bfff17 	ldw	r6,-4(fp)
10004524:	00049140 	call	10004914 <altera_avalon_jtag_uart_ioctl>
}
10004528:	e037883a 	mov	sp,fp
1000452c:	dfc00117 	ldw	ra,4(sp)
10004530:	df000017 	ldw	fp,0(sp)
10004534:	dec00204 	addi	sp,sp,8
10004538:	f800283a 	ret

1000453c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000453c:	defffa04 	addi	sp,sp,-24
10004540:	dfc00515 	stw	ra,20(sp)
10004544:	df000415 	stw	fp,16(sp)
10004548:	df000404 	addi	fp,sp,16
1000454c:	e13ffd15 	stw	r4,-12(fp)
10004550:	e17ffe15 	stw	r5,-8(fp)
10004554:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004558:	e0bffd17 	ldw	r2,-12(fp)
1000455c:	00c00044 	movi	r3,1
10004560:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10004564:	e0bffd17 	ldw	r2,-12(fp)
10004568:	10800017 	ldw	r2,0(r2)
1000456c:	10800104 	addi	r2,r2,4
10004570:	1007883a 	mov	r3,r2
10004574:	e0bffd17 	ldw	r2,-12(fp)
10004578:	10800817 	ldw	r2,32(r2)
1000457c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10004580:	e0fffe17 	ldw	r3,-8(fp)
10004584:	e0bfff17 	ldw	r2,-4(fp)
10004588:	d8000015 	stw	zero,0(sp)
1000458c:	1809883a 	mov	r4,r3
10004590:	100b883a 	mov	r5,r2
10004594:	01840034 	movhi	r6,4096
10004598:	31918004 	addi	r6,r6,17920
1000459c:	e1fffd17 	ldw	r7,-12(fp)
100045a0:	000529c0 	call	1000529c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100045a4:	e0bffd17 	ldw	r2,-12(fp)
100045a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100045ac:	e0bffd17 	ldw	r2,-12(fp)
100045b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100045b4:	00840074 	movhi	r2,4097
100045b8:	10a49804 	addi	r2,r2,-28064
100045bc:	10800017 	ldw	r2,0(r2)
100045c0:	1809883a 	mov	r4,r3
100045c4:	100b883a 	mov	r5,r2
100045c8:	01840034 	movhi	r6,4096
100045cc:	31920104 	addi	r6,r6,18436
100045d0:	e1fffd17 	ldw	r7,-12(fp)
100045d4:	0004e240 	call	10004e24 <alt_alarm_start>
100045d8:	1000040e 	bge	r2,zero,100045ec <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100045dc:	e0fffd17 	ldw	r3,-12(fp)
100045e0:	00a00034 	movhi	r2,32768
100045e4:	10bfffc4 	addi	r2,r2,-1
100045e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100045ec:	e037883a 	mov	sp,fp
100045f0:	dfc00117 	ldw	ra,4(sp)
100045f4:	df000017 	ldw	fp,0(sp)
100045f8:	dec00204 	addi	sp,sp,8
100045fc:	f800283a 	ret

10004600 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10004600:	defff804 	addi	sp,sp,-32
10004604:	df000715 	stw	fp,28(sp)
10004608:	df000704 	addi	fp,sp,28
1000460c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10004610:	e0bfff17 	ldw	r2,-4(fp)
10004614:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10004618:	e0bffb17 	ldw	r2,-20(fp)
1000461c:	10800017 	ldw	r2,0(r2)
10004620:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10004624:	e0bffc17 	ldw	r2,-16(fp)
10004628:	10800104 	addi	r2,r2,4
1000462c:	10800037 	ldwio	r2,0(r2)
10004630:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10004634:	e0bffd17 	ldw	r2,-12(fp)
10004638:	1080c00c 	andi	r2,r2,768
1000463c:	1000011e 	bne	r2,zero,10004644 <altera_avalon_jtag_uart_irq+0x44>
      break;
10004640:	00006c06 	br	100047f4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10004644:	e0bffd17 	ldw	r2,-12(fp)
10004648:	1080400c 	andi	r2,r2,256
1000464c:	10003426 	beq	r2,zero,10004720 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10004650:	00800074 	movhi	r2,1
10004654:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004658:	e0bffb17 	ldw	r2,-20(fp)
1000465c:	10800a17 	ldw	r2,40(r2)
10004660:	10800044 	addi	r2,r2,1
10004664:	1081ffcc 	andi	r2,r2,2047
10004668:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000466c:	e0bffb17 	ldw	r2,-20(fp)
10004670:	10c00b17 	ldw	r3,44(r2)
10004674:	e0bffe17 	ldw	r2,-8(fp)
10004678:	1880011e 	bne	r3,r2,10004680 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000467c:	00001606 	br	100046d8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10004680:	e0bffc17 	ldw	r2,-16(fp)
10004684:	10800037 	ldwio	r2,0(r2)
10004688:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000468c:	e0bff917 	ldw	r2,-28(fp)
10004690:	10a0000c 	andi	r2,r2,32768
10004694:	1000011e 	bne	r2,zero,1000469c <altera_avalon_jtag_uart_irq+0x9c>
          break;
10004698:	00000f06 	br	100046d8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000469c:	e0bffb17 	ldw	r2,-20(fp)
100046a0:	10800a17 	ldw	r2,40(r2)
100046a4:	e0fff917 	ldw	r3,-28(fp)
100046a8:	1809883a 	mov	r4,r3
100046ac:	e0fffb17 	ldw	r3,-20(fp)
100046b0:	1885883a 	add	r2,r3,r2
100046b4:	10800e04 	addi	r2,r2,56
100046b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100046bc:	e0bffb17 	ldw	r2,-20(fp)
100046c0:	10800a17 	ldw	r2,40(r2)
100046c4:	10800044 	addi	r2,r2,1
100046c8:	10c1ffcc 	andi	r3,r2,2047
100046cc:	e0bffb17 	ldw	r2,-20(fp)
100046d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100046d4:	003fe006 	br	10004658 <__alt_data_end+0xf8004658>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100046d8:	e0bff917 	ldw	r2,-28(fp)
100046dc:	10bfffec 	andhi	r2,r2,65535
100046e0:	10000f26 	beq	r2,zero,10004720 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100046e4:	e0bffb17 	ldw	r2,-20(fp)
100046e8:	10c00817 	ldw	r3,32(r2)
100046ec:	00bfff84 	movi	r2,-2
100046f0:	1886703a 	and	r3,r3,r2
100046f4:	e0bffb17 	ldw	r2,-20(fp)
100046f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100046fc:	e0bffc17 	ldw	r2,-16(fp)
10004700:	10800104 	addi	r2,r2,4
10004704:	1007883a 	mov	r3,r2
10004708:	e0bffb17 	ldw	r2,-20(fp)
1000470c:	10800817 	ldw	r2,32(r2)
10004710:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10004714:	e0bffc17 	ldw	r2,-16(fp)
10004718:	10800104 	addi	r2,r2,4
1000471c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10004720:	e0bffd17 	ldw	r2,-12(fp)
10004724:	1080800c 	andi	r2,r2,512
10004728:	10003126 	beq	r2,zero,100047f0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000472c:	e0bffd17 	ldw	r2,-12(fp)
10004730:	1004d43a 	srli	r2,r2,16
10004734:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10004738:	00001406 	br	1000478c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000473c:	e0bffc17 	ldw	r2,-16(fp)
10004740:	e0fffb17 	ldw	r3,-20(fp)
10004744:	18c00d17 	ldw	r3,52(r3)
10004748:	e13ffb17 	ldw	r4,-20(fp)
1000474c:	20c7883a 	add	r3,r4,r3
10004750:	18c20e04 	addi	r3,r3,2104
10004754:	18c00003 	ldbu	r3,0(r3)
10004758:	18c03fcc 	andi	r3,r3,255
1000475c:	18c0201c 	xori	r3,r3,128
10004760:	18ffe004 	addi	r3,r3,-128
10004764:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004768:	e0bffb17 	ldw	r2,-20(fp)
1000476c:	10800d17 	ldw	r2,52(r2)
10004770:	10800044 	addi	r2,r2,1
10004774:	10c1ffcc 	andi	r3,r2,2047
10004778:	e0bffb17 	ldw	r2,-20(fp)
1000477c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10004780:	e0bffa17 	ldw	r2,-24(fp)
10004784:	10bfffc4 	addi	r2,r2,-1
10004788:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000478c:	e0bffa17 	ldw	r2,-24(fp)
10004790:	10000526 	beq	r2,zero,100047a8 <altera_avalon_jtag_uart_irq+0x1a8>
10004794:	e0bffb17 	ldw	r2,-20(fp)
10004798:	10c00d17 	ldw	r3,52(r2)
1000479c:	e0bffb17 	ldw	r2,-20(fp)
100047a0:	10800c17 	ldw	r2,48(r2)
100047a4:	18bfe51e 	bne	r3,r2,1000473c <__alt_data_end+0xf800473c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100047a8:	e0bffa17 	ldw	r2,-24(fp)
100047ac:	10001026 	beq	r2,zero,100047f0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100047b0:	e0bffb17 	ldw	r2,-20(fp)
100047b4:	10c00817 	ldw	r3,32(r2)
100047b8:	00bfff44 	movi	r2,-3
100047bc:	1886703a 	and	r3,r3,r2
100047c0:	e0bffb17 	ldw	r2,-20(fp)
100047c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100047c8:	e0bffb17 	ldw	r2,-20(fp)
100047cc:	10800017 	ldw	r2,0(r2)
100047d0:	10800104 	addi	r2,r2,4
100047d4:	1007883a 	mov	r3,r2
100047d8:	e0bffb17 	ldw	r2,-20(fp)
100047dc:	10800817 	ldw	r2,32(r2)
100047e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100047e4:	e0bffc17 	ldw	r2,-16(fp)
100047e8:	10800104 	addi	r2,r2,4
100047ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100047f0:	003f8c06 	br	10004624 <__alt_data_end+0xf8004624>
}
100047f4:	e037883a 	mov	sp,fp
100047f8:	df000017 	ldw	fp,0(sp)
100047fc:	dec00104 	addi	sp,sp,4
10004800:	f800283a 	ret

10004804 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10004804:	defff804 	addi	sp,sp,-32
10004808:	df000715 	stw	fp,28(sp)
1000480c:	df000704 	addi	fp,sp,28
10004810:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10004814:	e0bffb17 	ldw	r2,-20(fp)
10004818:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000481c:	e0bff917 	ldw	r2,-28(fp)
10004820:	10800017 	ldw	r2,0(r2)
10004824:	10800104 	addi	r2,r2,4
10004828:	10800037 	ldwio	r2,0(r2)
1000482c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10004830:	e0bffa17 	ldw	r2,-24(fp)
10004834:	1081000c 	andi	r2,r2,1024
10004838:	10000b26 	beq	r2,zero,10004868 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000483c:	e0bff917 	ldw	r2,-28(fp)
10004840:	10800017 	ldw	r2,0(r2)
10004844:	10800104 	addi	r2,r2,4
10004848:	1007883a 	mov	r3,r2
1000484c:	e0bff917 	ldw	r2,-28(fp)
10004850:	10800817 	ldw	r2,32(r2)
10004854:	10810014 	ori	r2,r2,1024
10004858:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000485c:	e0bff917 	ldw	r2,-28(fp)
10004860:	10000915 	stw	zero,36(r2)
10004864:	00000a06 	br	10004890 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10004868:	e0bff917 	ldw	r2,-28(fp)
1000486c:	10c00917 	ldw	r3,36(r2)
10004870:	00a00034 	movhi	r2,32768
10004874:	10bfff04 	addi	r2,r2,-4
10004878:	10c00536 	bltu	r2,r3,10004890 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000487c:	e0bff917 	ldw	r2,-28(fp)
10004880:	10800917 	ldw	r2,36(r2)
10004884:	10c00044 	addi	r3,r2,1
10004888:	e0bff917 	ldw	r2,-28(fp)
1000488c:	10c00915 	stw	r3,36(r2)
10004890:	00840074 	movhi	r2,4097
10004894:	10a49804 	addi	r2,r2,-28064
10004898:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000489c:	e037883a 	mov	sp,fp
100048a0:	df000017 	ldw	fp,0(sp)
100048a4:	dec00104 	addi	sp,sp,4
100048a8:	f800283a 	ret

100048ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100048ac:	defffd04 	addi	sp,sp,-12
100048b0:	df000215 	stw	fp,8(sp)
100048b4:	df000204 	addi	fp,sp,8
100048b8:	e13ffe15 	stw	r4,-8(fp)
100048bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100048c0:	00000506 	br	100048d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100048c4:	e0bfff17 	ldw	r2,-4(fp)
100048c8:	1090000c 	andi	r2,r2,16384
100048cc:	10000226 	beq	r2,zero,100048d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100048d0:	00bffd44 	movi	r2,-11
100048d4:	00000b06 	br	10004904 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100048d8:	e0bffe17 	ldw	r2,-8(fp)
100048dc:	10c00d17 	ldw	r3,52(r2)
100048e0:	e0bffe17 	ldw	r2,-8(fp)
100048e4:	10800c17 	ldw	r2,48(r2)
100048e8:	18800526 	beq	r3,r2,10004900 <altera_avalon_jtag_uart_close+0x54>
100048ec:	e0bffe17 	ldw	r2,-8(fp)
100048f0:	10c00917 	ldw	r3,36(r2)
100048f4:	e0bffe17 	ldw	r2,-8(fp)
100048f8:	10800117 	ldw	r2,4(r2)
100048fc:	18bff136 	bltu	r3,r2,100048c4 <__alt_data_end+0xf80048c4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10004900:	0005883a 	mov	r2,zero
}
10004904:	e037883a 	mov	sp,fp
10004908:	df000017 	ldw	fp,0(sp)
1000490c:	dec00104 	addi	sp,sp,4
10004910:	f800283a 	ret

10004914 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10004914:	defffa04 	addi	sp,sp,-24
10004918:	df000515 	stw	fp,20(sp)
1000491c:	df000504 	addi	fp,sp,20
10004920:	e13ffd15 	stw	r4,-12(fp)
10004924:	e17ffe15 	stw	r5,-8(fp)
10004928:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000492c:	00bff9c4 	movi	r2,-25
10004930:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10004934:	e0bffe17 	ldw	r2,-8(fp)
10004938:	10da8060 	cmpeqi	r3,r2,27137
1000493c:	1800031e 	bne	r3,zero,1000494c <altera_avalon_jtag_uart_ioctl+0x38>
10004940:	109a80a0 	cmpeqi	r2,r2,27138
10004944:	1000191e 	bne	r2,zero,100049ac <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10004948:	00002806 	br	100049ec <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000494c:	e0bffd17 	ldw	r2,-12(fp)
10004950:	10c00117 	ldw	r3,4(r2)
10004954:	00a00034 	movhi	r2,32768
10004958:	10bfffc4 	addi	r2,r2,-1
1000495c:	18801226 	beq	r3,r2,100049a8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10004960:	e0bfff17 	ldw	r2,-4(fp)
10004964:	10800017 	ldw	r2,0(r2)
10004968:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000496c:	e0bffc17 	ldw	r2,-16(fp)
10004970:	10800090 	cmplti	r2,r2,2
10004974:	1000061e 	bne	r2,zero,10004990 <altera_avalon_jtag_uart_ioctl+0x7c>
10004978:	e0fffc17 	ldw	r3,-16(fp)
1000497c:	00a00034 	movhi	r2,32768
10004980:	10bfffc4 	addi	r2,r2,-1
10004984:	18800226 	beq	r3,r2,10004990 <altera_avalon_jtag_uart_ioctl+0x7c>
10004988:	e0bffc17 	ldw	r2,-16(fp)
1000498c:	00000206 	br	10004998 <altera_avalon_jtag_uart_ioctl+0x84>
10004990:	00a00034 	movhi	r2,32768
10004994:	10bfff84 	addi	r2,r2,-2
10004998:	e0fffd17 	ldw	r3,-12(fp)
1000499c:	18800115 	stw	r2,4(r3)
      rc = 0;
100049a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100049a4:	00001106 	br	100049ec <altera_avalon_jtag_uart_ioctl+0xd8>
100049a8:	00001006 	br	100049ec <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100049ac:	e0bffd17 	ldw	r2,-12(fp)
100049b0:	10c00117 	ldw	r3,4(r2)
100049b4:	00a00034 	movhi	r2,32768
100049b8:	10bfffc4 	addi	r2,r2,-1
100049bc:	18800a26 	beq	r3,r2,100049e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100049c0:	e0bffd17 	ldw	r2,-12(fp)
100049c4:	10c00917 	ldw	r3,36(r2)
100049c8:	e0bffd17 	ldw	r2,-12(fp)
100049cc:	10800117 	ldw	r2,4(r2)
100049d0:	1885803a 	cmpltu	r2,r3,r2
100049d4:	10c03fcc 	andi	r3,r2,255
100049d8:	e0bfff17 	ldw	r2,-4(fp)
100049dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
100049e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100049e4:	00000006 	br	100049e8 <altera_avalon_jtag_uart_ioctl+0xd4>
100049e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
100049ec:	e0bffb17 	ldw	r2,-20(fp)
}
100049f0:	e037883a 	mov	sp,fp
100049f4:	df000017 	ldw	fp,0(sp)
100049f8:	dec00104 	addi	sp,sp,4
100049fc:	f800283a 	ret

10004a00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10004a00:	defff304 	addi	sp,sp,-52
10004a04:	dfc00c15 	stw	ra,48(sp)
10004a08:	df000b15 	stw	fp,44(sp)
10004a0c:	df000b04 	addi	fp,sp,44
10004a10:	e13ffc15 	stw	r4,-16(fp)
10004a14:	e17ffd15 	stw	r5,-12(fp)
10004a18:	e1bffe15 	stw	r6,-8(fp)
10004a1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10004a20:	e0bffd17 	ldw	r2,-12(fp)
10004a24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004a28:	00004906 	br	10004b50 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10004a2c:	e0bffc17 	ldw	r2,-16(fp)
10004a30:	10800a17 	ldw	r2,40(r2)
10004a34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10004a38:	e0bffc17 	ldw	r2,-16(fp)
10004a3c:	10800b17 	ldw	r2,44(r2)
10004a40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10004a44:	e0fff717 	ldw	r3,-36(fp)
10004a48:	e0bff817 	ldw	r2,-32(fp)
10004a4c:	18800536 	bltu	r3,r2,10004a64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10004a50:	e0fff717 	ldw	r3,-36(fp)
10004a54:	e0bff817 	ldw	r2,-32(fp)
10004a58:	1885c83a 	sub	r2,r3,r2
10004a5c:	e0bff615 	stw	r2,-40(fp)
10004a60:	00000406 	br	10004a74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10004a64:	00c20004 	movi	r3,2048
10004a68:	e0bff817 	ldw	r2,-32(fp)
10004a6c:	1885c83a 	sub	r2,r3,r2
10004a70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004a74:	e0bff617 	ldw	r2,-40(fp)
10004a78:	1000011e 	bne	r2,zero,10004a80 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10004a7c:	00001d06 	br	10004af4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10004a80:	e0fffe17 	ldw	r3,-8(fp)
10004a84:	e0bff617 	ldw	r2,-40(fp)
10004a88:	1880022e 	bgeu	r3,r2,10004a94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10004a8c:	e0bffe17 	ldw	r2,-8(fp)
10004a90:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10004a94:	e0bff817 	ldw	r2,-32(fp)
10004a98:	10800e04 	addi	r2,r2,56
10004a9c:	e0fffc17 	ldw	r3,-16(fp)
10004aa0:	1885883a 	add	r2,r3,r2
10004aa4:	e13ff517 	ldw	r4,-44(fp)
10004aa8:	100b883a 	mov	r5,r2
10004aac:	e1bff617 	ldw	r6,-40(fp)
10004ab0:	0005f800 	call	10005f80 <memcpy>
      ptr   += n;
10004ab4:	e0fff517 	ldw	r3,-44(fp)
10004ab8:	e0bff617 	ldw	r2,-40(fp)
10004abc:	1885883a 	add	r2,r3,r2
10004ac0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10004ac4:	e0fffe17 	ldw	r3,-8(fp)
10004ac8:	e0bff617 	ldw	r2,-40(fp)
10004acc:	1885c83a 	sub	r2,r3,r2
10004ad0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004ad4:	e0fff817 	ldw	r3,-32(fp)
10004ad8:	e0bff617 	ldw	r2,-40(fp)
10004adc:	1885883a 	add	r2,r3,r2
10004ae0:	10c1ffcc 	andi	r3,r2,2047
10004ae4:	e0bffc17 	ldw	r2,-16(fp)
10004ae8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10004aec:	e0bffe17 	ldw	r2,-8(fp)
10004af0:	00bfce16 	blt	zero,r2,10004a2c <__alt_data_end+0xf8004a2c>

    /* If we read any data then return it */
    if (ptr != buffer)
10004af4:	e0fff517 	ldw	r3,-44(fp)
10004af8:	e0bffd17 	ldw	r2,-12(fp)
10004afc:	18800126 	beq	r3,r2,10004b04 <altera_avalon_jtag_uart_read+0x104>
      break;
10004b00:	00001506 	br	10004b58 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10004b04:	e0bfff17 	ldw	r2,-4(fp)
10004b08:	1090000c 	andi	r2,r2,16384
10004b0c:	10000126 	beq	r2,zero,10004b14 <altera_avalon_jtag_uart_read+0x114>
      break;
10004b10:	00001106 	br	10004b58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10004b14:	0001883a 	nop
10004b18:	e0bffc17 	ldw	r2,-16(fp)
10004b1c:	10c00a17 	ldw	r3,40(r2)
10004b20:	e0bff717 	ldw	r2,-36(fp)
10004b24:	1880051e 	bne	r3,r2,10004b3c <altera_avalon_jtag_uart_read+0x13c>
10004b28:	e0bffc17 	ldw	r2,-16(fp)
10004b2c:	10c00917 	ldw	r3,36(r2)
10004b30:	e0bffc17 	ldw	r2,-16(fp)
10004b34:	10800117 	ldw	r2,4(r2)
10004b38:	18bff736 	bltu	r3,r2,10004b18 <__alt_data_end+0xf8004b18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10004b3c:	e0bffc17 	ldw	r2,-16(fp)
10004b40:	10c00a17 	ldw	r3,40(r2)
10004b44:	e0bff717 	ldw	r2,-36(fp)
10004b48:	1880011e 	bne	r3,r2,10004b50 <altera_avalon_jtag_uart_read+0x150>
      break;
10004b4c:	00000206 	br	10004b58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004b50:	e0bffe17 	ldw	r2,-8(fp)
10004b54:	00bfb516 	blt	zero,r2,10004a2c <__alt_data_end+0xf8004a2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10004b58:	e0fff517 	ldw	r3,-44(fp)
10004b5c:	e0bffd17 	ldw	r2,-12(fp)
10004b60:	18801826 	beq	r3,r2,10004bc4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004b64:	0005303a 	rdctl	r2,status
10004b68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004b6c:	e0fffa17 	ldw	r3,-24(fp)
10004b70:	00bfff84 	movi	r2,-2
10004b74:	1884703a 	and	r2,r3,r2
10004b78:	1001703a 	wrctl	status,r2
  
  return context;
10004b7c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10004b80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004b84:	e0bffc17 	ldw	r2,-16(fp)
10004b88:	10800817 	ldw	r2,32(r2)
10004b8c:	10c00054 	ori	r3,r2,1
10004b90:	e0bffc17 	ldw	r2,-16(fp)
10004b94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004b98:	e0bffc17 	ldw	r2,-16(fp)
10004b9c:	10800017 	ldw	r2,0(r2)
10004ba0:	10800104 	addi	r2,r2,4
10004ba4:	1007883a 	mov	r3,r2
10004ba8:	e0bffc17 	ldw	r2,-16(fp)
10004bac:	10800817 	ldw	r2,32(r2)
10004bb0:	18800035 	stwio	r2,0(r3)
10004bb4:	e0bff917 	ldw	r2,-28(fp)
10004bb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004bbc:	e0bffb17 	ldw	r2,-20(fp)
10004bc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10004bc4:	e0fff517 	ldw	r3,-44(fp)
10004bc8:	e0bffd17 	ldw	r2,-12(fp)
10004bcc:	18800426 	beq	r3,r2,10004be0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10004bd0:	e0fff517 	ldw	r3,-44(fp)
10004bd4:	e0bffd17 	ldw	r2,-12(fp)
10004bd8:	1885c83a 	sub	r2,r3,r2
10004bdc:	00000606 	br	10004bf8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10004be0:	e0bfff17 	ldw	r2,-4(fp)
10004be4:	1090000c 	andi	r2,r2,16384
10004be8:	10000226 	beq	r2,zero,10004bf4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10004bec:	00bffd44 	movi	r2,-11
10004bf0:	00000106 	br	10004bf8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10004bf4:	00bffec4 	movi	r2,-5
}
10004bf8:	e037883a 	mov	sp,fp
10004bfc:	dfc00117 	ldw	ra,4(sp)
10004c00:	df000017 	ldw	fp,0(sp)
10004c04:	dec00204 	addi	sp,sp,8
10004c08:	f800283a 	ret

10004c0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10004c0c:	defff304 	addi	sp,sp,-52
10004c10:	dfc00c15 	stw	ra,48(sp)
10004c14:	df000b15 	stw	fp,44(sp)
10004c18:	df000b04 	addi	fp,sp,44
10004c1c:	e13ffc15 	stw	r4,-16(fp)
10004c20:	e17ffd15 	stw	r5,-12(fp)
10004c24:	e1bffe15 	stw	r6,-8(fp)
10004c28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10004c2c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10004c30:	e0bffd17 	ldw	r2,-12(fp)
10004c34:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004c38:	00003806 	br	10004d1c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10004c3c:	e0bffc17 	ldw	r2,-16(fp)
10004c40:	10800c17 	ldw	r2,48(r2)
10004c44:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10004c48:	e0bffc17 	ldw	r2,-16(fp)
10004c4c:	10800d17 	ldw	r2,52(r2)
10004c50:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10004c54:	e0fff817 	ldw	r3,-32(fp)
10004c58:	e0bff517 	ldw	r2,-44(fp)
10004c5c:	1880062e 	bgeu	r3,r2,10004c78 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10004c60:	e0fff517 	ldw	r3,-44(fp)
10004c64:	e0bff817 	ldw	r2,-32(fp)
10004c68:	1885c83a 	sub	r2,r3,r2
10004c6c:	10bfffc4 	addi	r2,r2,-1
10004c70:	e0bff615 	stw	r2,-40(fp)
10004c74:	00000b06 	br	10004ca4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10004c78:	e0bff517 	ldw	r2,-44(fp)
10004c7c:	10000526 	beq	r2,zero,10004c94 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10004c80:	00c20004 	movi	r3,2048
10004c84:	e0bff817 	ldw	r2,-32(fp)
10004c88:	1885c83a 	sub	r2,r3,r2
10004c8c:	e0bff615 	stw	r2,-40(fp)
10004c90:	00000406 	br	10004ca4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10004c94:	00c1ffc4 	movi	r3,2047
10004c98:	e0bff817 	ldw	r2,-32(fp)
10004c9c:	1885c83a 	sub	r2,r3,r2
10004ca0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004ca4:	e0bff617 	ldw	r2,-40(fp)
10004ca8:	1000011e 	bne	r2,zero,10004cb0 <altera_avalon_jtag_uart_write+0xa4>
        break;
10004cac:	00001d06 	br	10004d24 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10004cb0:	e0fffe17 	ldw	r3,-8(fp)
10004cb4:	e0bff617 	ldw	r2,-40(fp)
10004cb8:	1880022e 	bgeu	r3,r2,10004cc4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10004cbc:	e0bffe17 	ldw	r2,-8(fp)
10004cc0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10004cc4:	e0bff817 	ldw	r2,-32(fp)
10004cc8:	10820e04 	addi	r2,r2,2104
10004ccc:	e0fffc17 	ldw	r3,-16(fp)
10004cd0:	1885883a 	add	r2,r3,r2
10004cd4:	1009883a 	mov	r4,r2
10004cd8:	e17ffd17 	ldw	r5,-12(fp)
10004cdc:	e1bff617 	ldw	r6,-40(fp)
10004ce0:	0005f800 	call	10005f80 <memcpy>
      ptr   += n;
10004ce4:	e0fffd17 	ldw	r3,-12(fp)
10004ce8:	e0bff617 	ldw	r2,-40(fp)
10004cec:	1885883a 	add	r2,r3,r2
10004cf0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004cf4:	e0fffe17 	ldw	r3,-8(fp)
10004cf8:	e0bff617 	ldw	r2,-40(fp)
10004cfc:	1885c83a 	sub	r2,r3,r2
10004d00:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004d04:	e0fff817 	ldw	r3,-32(fp)
10004d08:	e0bff617 	ldw	r2,-40(fp)
10004d0c:	1885883a 	add	r2,r3,r2
10004d10:	10c1ffcc 	andi	r3,r2,2047
10004d14:	e0bffc17 	ldw	r2,-16(fp)
10004d18:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004d1c:	e0bffe17 	ldw	r2,-8(fp)
10004d20:	00bfc616 	blt	zero,r2,10004c3c <__alt_data_end+0xf8004c3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004d24:	0005303a 	rdctl	r2,status
10004d28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004d2c:	e0fffa17 	ldw	r3,-24(fp)
10004d30:	00bfff84 	movi	r2,-2
10004d34:	1884703a 	and	r2,r3,r2
10004d38:	1001703a 	wrctl	status,r2
  
  return context;
10004d3c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10004d40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004d44:	e0bffc17 	ldw	r2,-16(fp)
10004d48:	10800817 	ldw	r2,32(r2)
10004d4c:	10c00094 	ori	r3,r2,2
10004d50:	e0bffc17 	ldw	r2,-16(fp)
10004d54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004d58:	e0bffc17 	ldw	r2,-16(fp)
10004d5c:	10800017 	ldw	r2,0(r2)
10004d60:	10800104 	addi	r2,r2,4
10004d64:	1007883a 	mov	r3,r2
10004d68:	e0bffc17 	ldw	r2,-16(fp)
10004d6c:	10800817 	ldw	r2,32(r2)
10004d70:	18800035 	stwio	r2,0(r3)
10004d74:	e0bff917 	ldw	r2,-28(fp)
10004d78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004d7c:	e0bffb17 	ldw	r2,-20(fp)
10004d80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10004d84:	e0bffe17 	ldw	r2,-8(fp)
10004d88:	0080120e 	bge	zero,r2,10004dd4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10004d8c:	e0bfff17 	ldw	r2,-4(fp)
10004d90:	1090000c 	andi	r2,r2,16384
10004d94:	10000126 	beq	r2,zero,10004d9c <altera_avalon_jtag_uart_write+0x190>
        break;
10004d98:	00001006 	br	10004ddc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10004d9c:	0001883a 	nop
10004da0:	e0bffc17 	ldw	r2,-16(fp)
10004da4:	10c00d17 	ldw	r3,52(r2)
10004da8:	e0bff517 	ldw	r2,-44(fp)
10004dac:	1880051e 	bne	r3,r2,10004dc4 <altera_avalon_jtag_uart_write+0x1b8>
10004db0:	e0bffc17 	ldw	r2,-16(fp)
10004db4:	10c00917 	ldw	r3,36(r2)
10004db8:	e0bffc17 	ldw	r2,-16(fp)
10004dbc:	10800117 	ldw	r2,4(r2)
10004dc0:	18bff736 	bltu	r3,r2,10004da0 <__alt_data_end+0xf8004da0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10004dc4:	e0bffc17 	ldw	r2,-16(fp)
10004dc8:	10800917 	ldw	r2,36(r2)
10004dcc:	10000126 	beq	r2,zero,10004dd4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10004dd0:	00000206 	br	10004ddc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10004dd4:	e0bffe17 	ldw	r2,-8(fp)
10004dd8:	00bf9716 	blt	zero,r2,10004c38 <__alt_data_end+0xf8004c38>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004ddc:	e0fffd17 	ldw	r3,-12(fp)
10004de0:	e0bff717 	ldw	r2,-36(fp)
10004de4:	18800426 	beq	r3,r2,10004df8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10004de8:	e0fffd17 	ldw	r3,-12(fp)
10004dec:	e0bff717 	ldw	r2,-36(fp)
10004df0:	1885c83a 	sub	r2,r3,r2
10004df4:	00000606 	br	10004e10 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10004df8:	e0bfff17 	ldw	r2,-4(fp)
10004dfc:	1090000c 	andi	r2,r2,16384
10004e00:	10000226 	beq	r2,zero,10004e0c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10004e04:	00bffd44 	movi	r2,-11
10004e08:	00000106 	br	10004e10 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004e0c:	00bffec4 	movi	r2,-5
}
10004e10:	e037883a 	mov	sp,fp
10004e14:	dfc00117 	ldw	ra,4(sp)
10004e18:	df000017 	ldw	fp,0(sp)
10004e1c:	dec00204 	addi	sp,sp,8
10004e20:	f800283a 	ret

10004e24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10004e24:	defff504 	addi	sp,sp,-44
10004e28:	df000a15 	stw	fp,40(sp)
10004e2c:	df000a04 	addi	fp,sp,40
10004e30:	e13ffc15 	stw	r4,-16(fp)
10004e34:	e17ffd15 	stw	r5,-12(fp)
10004e38:	e1bffe15 	stw	r6,-8(fp)
10004e3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10004e40:	e03ff615 	stw	zero,-40(fp)
10004e44:	00840074 	movhi	r2,4097
10004e48:	10a49804 	addi	r2,r2,-28064
10004e4c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10004e50:	10003f26 	beq	r2,zero,10004f50 <alt_alarm_start+0x12c>
  {
    if (alarm)
10004e54:	e0bffc17 	ldw	r2,-16(fp)
10004e58:	10003b26 	beq	r2,zero,10004f48 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10004e5c:	e0bffc17 	ldw	r2,-16(fp)
10004e60:	e0fffe17 	ldw	r3,-8(fp)
10004e64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10004e68:	e0bffc17 	ldw	r2,-16(fp)
10004e6c:	e0ffff17 	ldw	r3,-4(fp)
10004e70:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004e74:	0005303a 	rdctl	r2,status
10004e78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004e7c:	e0fff817 	ldw	r3,-32(fp)
10004e80:	00bfff84 	movi	r2,-2
10004e84:	1884703a 	and	r2,r3,r2
10004e88:	1001703a 	wrctl	status,r2
  
  return context;
10004e8c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10004e90:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10004e94:	00840074 	movhi	r2,4097
10004e98:	10a49904 	addi	r2,r2,-28060
10004e9c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10004ea0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10004ea4:	e0fffd17 	ldw	r3,-12(fp)
10004ea8:	e0bff617 	ldw	r2,-40(fp)
10004eac:	1885883a 	add	r2,r3,r2
10004eb0:	10c00044 	addi	r3,r2,1
10004eb4:	e0bffc17 	ldw	r2,-16(fp)
10004eb8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10004ebc:	e0bffc17 	ldw	r2,-16(fp)
10004ec0:	10c00217 	ldw	r3,8(r2)
10004ec4:	e0bff617 	ldw	r2,-40(fp)
10004ec8:	1880042e 	bgeu	r3,r2,10004edc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10004ecc:	e0bffc17 	ldw	r2,-16(fp)
10004ed0:	00c00044 	movi	r3,1
10004ed4:	10c00405 	stb	r3,16(r2)
10004ed8:	00000206 	br	10004ee4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10004edc:	e0bffc17 	ldw	r2,-16(fp)
10004ee0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10004ee4:	e0fffc17 	ldw	r3,-16(fp)
10004ee8:	00840034 	movhi	r2,4096
10004eec:	109eed04 	addi	r2,r2,31668
10004ef0:	e0bff915 	stw	r2,-28(fp)
10004ef4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004ef8:	e0bffa17 	ldw	r2,-24(fp)
10004efc:	e0fff917 	ldw	r3,-28(fp)
10004f00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004f04:	e0bff917 	ldw	r2,-28(fp)
10004f08:	10c00017 	ldw	r3,0(r2)
10004f0c:	e0bffa17 	ldw	r2,-24(fp)
10004f10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004f14:	e0bff917 	ldw	r2,-28(fp)
10004f18:	10800017 	ldw	r2,0(r2)
10004f1c:	e0fffa17 	ldw	r3,-24(fp)
10004f20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004f24:	e0bff917 	ldw	r2,-28(fp)
10004f28:	e0fffa17 	ldw	r3,-24(fp)
10004f2c:	10c00015 	stw	r3,0(r2)
10004f30:	e0bff717 	ldw	r2,-36(fp)
10004f34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004f38:	e0bffb17 	ldw	r2,-20(fp)
10004f3c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004f40:	0005883a 	mov	r2,zero
10004f44:	00000306 	br	10004f54 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10004f48:	00bffa84 	movi	r2,-22
10004f4c:	00000106 	br	10004f54 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10004f50:	00bfde84 	movi	r2,-134
  }
}
10004f54:	e037883a 	mov	sp,fp
10004f58:	df000017 	ldw	fp,0(sp)
10004f5c:	dec00104 	addi	sp,sp,4
10004f60:	f800283a 	ret

10004f64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004f64:	defffe04 	addi	sp,sp,-8
10004f68:	dfc00115 	stw	ra,4(sp)
10004f6c:	df000015 	stw	fp,0(sp)
10004f70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004f74:	00840034 	movhi	r2,4096
10004f78:	109eeb04 	addi	r2,r2,31660
10004f7c:	10800017 	ldw	r2,0(r2)
10004f80:	10000526 	beq	r2,zero,10004f98 <alt_get_errno+0x34>
10004f84:	00840034 	movhi	r2,4096
10004f88:	109eeb04 	addi	r2,r2,31660
10004f8c:	10800017 	ldw	r2,0(r2)
10004f90:	103ee83a 	callr	r2
10004f94:	00000206 	br	10004fa0 <alt_get_errno+0x3c>
10004f98:	00840074 	movhi	r2,4097
10004f9c:	10a49b04 	addi	r2,r2,-28052
}
10004fa0:	e037883a 	mov	sp,fp
10004fa4:	dfc00117 	ldw	ra,4(sp)
10004fa8:	df000017 	ldw	fp,0(sp)
10004fac:	dec00204 	addi	sp,sp,8
10004fb0:	f800283a 	ret

10004fb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10004fb4:	defffb04 	addi	sp,sp,-20
10004fb8:	dfc00415 	stw	ra,16(sp)
10004fbc:	df000315 	stw	fp,12(sp)
10004fc0:	df000304 	addi	fp,sp,12
10004fc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10004fc8:	e0bfff17 	ldw	r2,-4(fp)
10004fcc:	10000816 	blt	r2,zero,10004ff0 <close+0x3c>
10004fd0:	e13fff17 	ldw	r4,-4(fp)
10004fd4:	01400304 	movi	r5,12
10004fd8:	0002cf00 	call	10002cf0 <__mulsi3>
10004fdc:	1007883a 	mov	r3,r2
10004fe0:	00840034 	movhi	r2,4096
10004fe4:	109e8404 	addi	r2,r2,31248
10004fe8:	1885883a 	add	r2,r3,r2
10004fec:	00000106 	br	10004ff4 <close+0x40>
10004ff0:	0005883a 	mov	r2,zero
10004ff4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10004ff8:	e0bffd17 	ldw	r2,-12(fp)
10004ffc:	10001926 	beq	r2,zero,10005064 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10005000:	e0bffd17 	ldw	r2,-12(fp)
10005004:	10800017 	ldw	r2,0(r2)
10005008:	10800417 	ldw	r2,16(r2)
1000500c:	10000626 	beq	r2,zero,10005028 <close+0x74>
10005010:	e0bffd17 	ldw	r2,-12(fp)
10005014:	10800017 	ldw	r2,0(r2)
10005018:	10800417 	ldw	r2,16(r2)
1000501c:	e13ffd17 	ldw	r4,-12(fp)
10005020:	103ee83a 	callr	r2
10005024:	00000106 	br	1000502c <close+0x78>
10005028:	0005883a 	mov	r2,zero
1000502c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10005030:	e13fff17 	ldw	r4,-4(fp)
10005034:	00059680 	call	10005968 <alt_release_fd>
    if (rval < 0)
10005038:	e0bffe17 	ldw	r2,-8(fp)
1000503c:	1000070e 	bge	r2,zero,1000505c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10005040:	0004f640 	call	10004f64 <alt_get_errno>
10005044:	1007883a 	mov	r3,r2
10005048:	e0bffe17 	ldw	r2,-8(fp)
1000504c:	0085c83a 	sub	r2,zero,r2
10005050:	18800015 	stw	r2,0(r3)
      return -1;
10005054:	00bfffc4 	movi	r2,-1
10005058:	00000706 	br	10005078 <close+0xc4>
    }
    return 0;
1000505c:	0005883a 	mov	r2,zero
10005060:	00000506 	br	10005078 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10005064:	0004f640 	call	10004f64 <alt_get_errno>
10005068:	1007883a 	mov	r3,r2
1000506c:	00801444 	movi	r2,81
10005070:	18800015 	stw	r2,0(r3)
    return -1;
10005074:	00bfffc4 	movi	r2,-1
  }
}
10005078:	e037883a 	mov	sp,fp
1000507c:	dfc00117 	ldw	ra,4(sp)
10005080:	df000017 	ldw	fp,0(sp)
10005084:	dec00204 	addi	sp,sp,8
10005088:	f800283a 	ret

1000508c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000508c:	deffff04 	addi	sp,sp,-4
10005090:	df000015 	stw	fp,0(sp)
10005094:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10005098:	e037883a 	mov	sp,fp
1000509c:	df000017 	ldw	fp,0(sp)
100050a0:	dec00104 	addi	sp,sp,4
100050a4:	f800283a 	ret

100050a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100050a8:	defffc04 	addi	sp,sp,-16
100050ac:	df000315 	stw	fp,12(sp)
100050b0:	df000304 	addi	fp,sp,12
100050b4:	e13ffd15 	stw	r4,-12(fp)
100050b8:	e17ffe15 	stw	r5,-8(fp)
100050bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
100050c0:	e0bfff17 	ldw	r2,-4(fp)
}
100050c4:	e037883a 	mov	sp,fp
100050c8:	df000017 	ldw	fp,0(sp)
100050cc:	dec00104 	addi	sp,sp,4
100050d0:	f800283a 	ret

100050d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100050d4:	defffe04 	addi	sp,sp,-8
100050d8:	dfc00115 	stw	ra,4(sp)
100050dc:	df000015 	stw	fp,0(sp)
100050e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100050e4:	00840034 	movhi	r2,4096
100050e8:	109eeb04 	addi	r2,r2,31660
100050ec:	10800017 	ldw	r2,0(r2)
100050f0:	10000526 	beq	r2,zero,10005108 <alt_get_errno+0x34>
100050f4:	00840034 	movhi	r2,4096
100050f8:	109eeb04 	addi	r2,r2,31660
100050fc:	10800017 	ldw	r2,0(r2)
10005100:	103ee83a 	callr	r2
10005104:	00000206 	br	10005110 <alt_get_errno+0x3c>
10005108:	00840074 	movhi	r2,4097
1000510c:	10a49b04 	addi	r2,r2,-28052
}
10005110:	e037883a 	mov	sp,fp
10005114:	dfc00117 	ldw	ra,4(sp)
10005118:	df000017 	ldw	fp,0(sp)
1000511c:	dec00204 	addi	sp,sp,8
10005120:	f800283a 	ret

10005124 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10005124:	defffa04 	addi	sp,sp,-24
10005128:	dfc00515 	stw	ra,20(sp)
1000512c:	df000415 	stw	fp,16(sp)
10005130:	df000404 	addi	fp,sp,16
10005134:	e13ffe15 	stw	r4,-8(fp)
10005138:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000513c:	e0bffe17 	ldw	r2,-8(fp)
10005140:	10000326 	beq	r2,zero,10005150 <alt_dev_llist_insert+0x2c>
10005144:	e0bffe17 	ldw	r2,-8(fp)
10005148:	10800217 	ldw	r2,8(r2)
1000514c:	1000061e 	bne	r2,zero,10005168 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10005150:	00050d40 	call	100050d4 <alt_get_errno>
10005154:	1007883a 	mov	r3,r2
10005158:	00800584 	movi	r2,22
1000515c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10005160:	00bffa84 	movi	r2,-22
10005164:	00001306 	br	100051b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10005168:	e0bffe17 	ldw	r2,-8(fp)
1000516c:	e0ffff17 	ldw	r3,-4(fp)
10005170:	e0fffc15 	stw	r3,-16(fp)
10005174:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10005178:	e0bffd17 	ldw	r2,-12(fp)
1000517c:	e0fffc17 	ldw	r3,-16(fp)
10005180:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10005184:	e0bffc17 	ldw	r2,-16(fp)
10005188:	10c00017 	ldw	r3,0(r2)
1000518c:	e0bffd17 	ldw	r2,-12(fp)
10005190:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10005194:	e0bffc17 	ldw	r2,-16(fp)
10005198:	10800017 	ldw	r2,0(r2)
1000519c:	e0fffd17 	ldw	r3,-12(fp)
100051a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100051a4:	e0bffc17 	ldw	r2,-16(fp)
100051a8:	e0fffd17 	ldw	r3,-12(fp)
100051ac:	10c00015 	stw	r3,0(r2)

  return 0;  
100051b0:	0005883a 	mov	r2,zero
}
100051b4:	e037883a 	mov	sp,fp
100051b8:	dfc00117 	ldw	ra,4(sp)
100051bc:	df000017 	ldw	fp,0(sp)
100051c0:	dec00204 	addi	sp,sp,8
100051c4:	f800283a 	ret

100051c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100051c8:	defffd04 	addi	sp,sp,-12
100051cc:	dfc00215 	stw	ra,8(sp)
100051d0:	df000115 	stw	fp,4(sp)
100051d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100051d8:	00840034 	movhi	r2,4096
100051dc:	10990a04 	addi	r2,r2,25640
100051e0:	e0bfff15 	stw	r2,-4(fp)
100051e4:	00000606 	br	10005200 <_do_ctors+0x38>
        (*ctor) (); 
100051e8:	e0bfff17 	ldw	r2,-4(fp)
100051ec:	10800017 	ldw	r2,0(r2)
100051f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100051f4:	e0bfff17 	ldw	r2,-4(fp)
100051f8:	10bfff04 	addi	r2,r2,-4
100051fc:	e0bfff15 	stw	r2,-4(fp)
10005200:	e0ffff17 	ldw	r3,-4(fp)
10005204:	00840034 	movhi	r2,4096
10005208:	10990b04 	addi	r2,r2,25644
1000520c:	18bff62e 	bgeu	r3,r2,100051e8 <__alt_data_end+0xf80051e8>
        (*ctor) (); 
}
10005210:	e037883a 	mov	sp,fp
10005214:	dfc00117 	ldw	ra,4(sp)
10005218:	df000017 	ldw	fp,0(sp)
1000521c:	dec00204 	addi	sp,sp,8
10005220:	f800283a 	ret

10005224 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10005224:	defffd04 	addi	sp,sp,-12
10005228:	dfc00215 	stw	ra,8(sp)
1000522c:	df000115 	stw	fp,4(sp)
10005230:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10005234:	00840034 	movhi	r2,4096
10005238:	10990a04 	addi	r2,r2,25640
1000523c:	e0bfff15 	stw	r2,-4(fp)
10005240:	00000606 	br	1000525c <_do_dtors+0x38>
        (*dtor) (); 
10005244:	e0bfff17 	ldw	r2,-4(fp)
10005248:	10800017 	ldw	r2,0(r2)
1000524c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10005250:	e0bfff17 	ldw	r2,-4(fp)
10005254:	10bfff04 	addi	r2,r2,-4
10005258:	e0bfff15 	stw	r2,-4(fp)
1000525c:	e0ffff17 	ldw	r3,-4(fp)
10005260:	00840034 	movhi	r2,4096
10005264:	10990b04 	addi	r2,r2,25644
10005268:	18bff62e 	bgeu	r3,r2,10005244 <__alt_data_end+0xf8005244>
        (*dtor) (); 
}
1000526c:	e037883a 	mov	sp,fp
10005270:	dfc00117 	ldw	ra,4(sp)
10005274:	df000017 	ldw	fp,0(sp)
10005278:	dec00204 	addi	sp,sp,8
1000527c:	f800283a 	ret

10005280 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10005280:	deffff04 	addi	sp,sp,-4
10005284:	df000015 	stw	fp,0(sp)
10005288:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000528c:	e037883a 	mov	sp,fp
10005290:	df000017 	ldw	fp,0(sp)
10005294:	dec00104 	addi	sp,sp,4
10005298:	f800283a 	ret

1000529c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000529c:	defff904 	addi	sp,sp,-28
100052a0:	dfc00615 	stw	ra,24(sp)
100052a4:	df000515 	stw	fp,20(sp)
100052a8:	df000504 	addi	fp,sp,20
100052ac:	e13ffc15 	stw	r4,-16(fp)
100052b0:	e17ffd15 	stw	r5,-12(fp)
100052b4:	e1bffe15 	stw	r6,-8(fp)
100052b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100052bc:	e0800217 	ldw	r2,8(fp)
100052c0:	d8800015 	stw	r2,0(sp)
100052c4:	e13ffc17 	ldw	r4,-16(fp)
100052c8:	e17ffd17 	ldw	r5,-12(fp)
100052cc:	e1bffe17 	ldw	r6,-8(fp)
100052d0:	e1ffff17 	ldw	r7,-4(fp)
100052d4:	000547c0 	call	1000547c <alt_iic_isr_register>
}  
100052d8:	e037883a 	mov	sp,fp
100052dc:	dfc00117 	ldw	ra,4(sp)
100052e0:	df000017 	ldw	fp,0(sp)
100052e4:	dec00204 	addi	sp,sp,8
100052e8:	f800283a 	ret

100052ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100052ec:	defff904 	addi	sp,sp,-28
100052f0:	df000615 	stw	fp,24(sp)
100052f4:	df000604 	addi	fp,sp,24
100052f8:	e13ffe15 	stw	r4,-8(fp)
100052fc:	e17fff15 	stw	r5,-4(fp)
10005300:	e0bfff17 	ldw	r2,-4(fp)
10005304:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10005308:	0005303a 	rdctl	r2,status
1000530c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10005310:	e0fffb17 	ldw	r3,-20(fp)
10005314:	00bfff84 	movi	r2,-2
10005318:	1884703a 	and	r2,r3,r2
1000531c:	1001703a 	wrctl	status,r2
  
  return context;
10005320:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10005324:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10005328:	e0bffa17 	ldw	r2,-24(fp)
1000532c:	00c00044 	movi	r3,1
10005330:	1884983a 	sll	r2,r3,r2
10005334:	1007883a 	mov	r3,r2
10005338:	00840074 	movhi	r2,4097
1000533c:	10a49704 	addi	r2,r2,-28068
10005340:	10800017 	ldw	r2,0(r2)
10005344:	1886b03a 	or	r3,r3,r2
10005348:	00840074 	movhi	r2,4097
1000534c:	10a49704 	addi	r2,r2,-28068
10005350:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10005354:	00840074 	movhi	r2,4097
10005358:	10a49704 	addi	r2,r2,-28068
1000535c:	10800017 	ldw	r2,0(r2)
10005360:	100170fa 	wrctl	ienable,r2
10005364:	e0bffc17 	ldw	r2,-16(fp)
10005368:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000536c:	e0bffd17 	ldw	r2,-12(fp)
10005370:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10005374:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10005378:	0001883a 	nop
}
1000537c:	e037883a 	mov	sp,fp
10005380:	df000017 	ldw	fp,0(sp)
10005384:	dec00104 	addi	sp,sp,4
10005388:	f800283a 	ret

1000538c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000538c:	defff904 	addi	sp,sp,-28
10005390:	df000615 	stw	fp,24(sp)
10005394:	df000604 	addi	fp,sp,24
10005398:	e13ffe15 	stw	r4,-8(fp)
1000539c:	e17fff15 	stw	r5,-4(fp)
100053a0:	e0bfff17 	ldw	r2,-4(fp)
100053a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100053a8:	0005303a 	rdctl	r2,status
100053ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100053b0:	e0fffb17 	ldw	r3,-20(fp)
100053b4:	00bfff84 	movi	r2,-2
100053b8:	1884703a 	and	r2,r3,r2
100053bc:	1001703a 	wrctl	status,r2
  
  return context;
100053c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100053c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100053c8:	e0bffa17 	ldw	r2,-24(fp)
100053cc:	00c00044 	movi	r3,1
100053d0:	1884983a 	sll	r2,r3,r2
100053d4:	0084303a 	nor	r2,zero,r2
100053d8:	1007883a 	mov	r3,r2
100053dc:	00840074 	movhi	r2,4097
100053e0:	10a49704 	addi	r2,r2,-28068
100053e4:	10800017 	ldw	r2,0(r2)
100053e8:	1886703a 	and	r3,r3,r2
100053ec:	00840074 	movhi	r2,4097
100053f0:	10a49704 	addi	r2,r2,-28068
100053f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100053f8:	00840074 	movhi	r2,4097
100053fc:	10a49704 	addi	r2,r2,-28068
10005400:	10800017 	ldw	r2,0(r2)
10005404:	100170fa 	wrctl	ienable,r2
10005408:	e0bffc17 	ldw	r2,-16(fp)
1000540c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10005410:	e0bffd17 	ldw	r2,-12(fp)
10005414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10005418:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000541c:	0001883a 	nop
}
10005420:	e037883a 	mov	sp,fp
10005424:	df000017 	ldw	fp,0(sp)
10005428:	dec00104 	addi	sp,sp,4
1000542c:	f800283a 	ret

10005430 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10005430:	defffc04 	addi	sp,sp,-16
10005434:	df000315 	stw	fp,12(sp)
10005438:	df000304 	addi	fp,sp,12
1000543c:	e13ffe15 	stw	r4,-8(fp)
10005440:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10005444:	000530fa 	rdctl	r2,ienable
10005448:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000544c:	e0bfff17 	ldw	r2,-4(fp)
10005450:	00c00044 	movi	r3,1
10005454:	1884983a 	sll	r2,r3,r2
10005458:	1007883a 	mov	r3,r2
1000545c:	e0bffd17 	ldw	r2,-12(fp)
10005460:	1884703a 	and	r2,r3,r2
10005464:	1004c03a 	cmpne	r2,r2,zero
10005468:	10803fcc 	andi	r2,r2,255
}
1000546c:	e037883a 	mov	sp,fp
10005470:	df000017 	ldw	fp,0(sp)
10005474:	dec00104 	addi	sp,sp,4
10005478:	f800283a 	ret

1000547c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000547c:	defff504 	addi	sp,sp,-44
10005480:	dfc00a15 	stw	ra,40(sp)
10005484:	df000915 	stw	fp,36(sp)
10005488:	df000904 	addi	fp,sp,36
1000548c:	e13ffc15 	stw	r4,-16(fp)
10005490:	e17ffd15 	stw	r5,-12(fp)
10005494:	e1bffe15 	stw	r6,-8(fp)
10005498:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000549c:	00bffa84 	movi	r2,-22
100054a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100054a4:	e0bffd17 	ldw	r2,-12(fp)
100054a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100054ac:	e0bff817 	ldw	r2,-32(fp)
100054b0:	10800808 	cmpgei	r2,r2,32
100054b4:	1000271e 	bne	r2,zero,10005554 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100054b8:	0005303a 	rdctl	r2,status
100054bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100054c0:	e0fffa17 	ldw	r3,-24(fp)
100054c4:	00bfff84 	movi	r2,-2
100054c8:	1884703a 	and	r2,r3,r2
100054cc:	1001703a 	wrctl	status,r2
  
  return context;
100054d0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100054d4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100054d8:	00840074 	movhi	r2,4097
100054dc:	10a52c04 	addi	r2,r2,-27472
100054e0:	e0fff817 	ldw	r3,-32(fp)
100054e4:	180690fa 	slli	r3,r3,3
100054e8:	10c5883a 	add	r2,r2,r3
100054ec:	e0fffe17 	ldw	r3,-8(fp)
100054f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100054f4:	00840074 	movhi	r2,4097
100054f8:	10a52c04 	addi	r2,r2,-27472
100054fc:	e0fff817 	ldw	r3,-32(fp)
10005500:	180690fa 	slli	r3,r3,3
10005504:	10c5883a 	add	r2,r2,r3
10005508:	10800104 	addi	r2,r2,4
1000550c:	e0ffff17 	ldw	r3,-4(fp)
10005510:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10005514:	e0bffe17 	ldw	r2,-8(fp)
10005518:	10000526 	beq	r2,zero,10005530 <alt_iic_isr_register+0xb4>
1000551c:	e0bff817 	ldw	r2,-32(fp)
10005520:	e13ffc17 	ldw	r4,-16(fp)
10005524:	100b883a 	mov	r5,r2
10005528:	00052ec0 	call	100052ec <alt_ic_irq_enable>
1000552c:	00000406 	br	10005540 <alt_iic_isr_register+0xc4>
10005530:	e0bff817 	ldw	r2,-32(fp)
10005534:	e13ffc17 	ldw	r4,-16(fp)
10005538:	100b883a 	mov	r5,r2
1000553c:	000538c0 	call	1000538c <alt_ic_irq_disable>
10005540:	e0bff715 	stw	r2,-36(fp)
10005544:	e0bff917 	ldw	r2,-28(fp)
10005548:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000554c:	e0bffb17 	ldw	r2,-20(fp)
10005550:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10005554:	e0bff717 	ldw	r2,-36(fp)
}
10005558:	e037883a 	mov	sp,fp
1000555c:	dfc00117 	ldw	ra,4(sp)
10005560:	df000017 	ldw	fp,0(sp)
10005564:	dec00204 	addi	sp,sp,8
10005568:	f800283a 	ret

1000556c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000556c:	defff804 	addi	sp,sp,-32
10005570:	dfc00715 	stw	ra,28(sp)
10005574:	df000615 	stw	fp,24(sp)
10005578:	dc000515 	stw	r16,20(sp)
1000557c:	df000604 	addi	fp,sp,24
10005580:	e13ffb15 	stw	r4,-20(fp)
10005584:	e17ffc15 	stw	r5,-16(fp)
10005588:	e1bffd15 	stw	r6,-12(fp)
1000558c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10005590:	e13ffc17 	ldw	r4,-16(fp)
10005594:	e17ffd17 	ldw	r5,-12(fp)
10005598:	e1bffe17 	ldw	r6,-8(fp)
1000559c:	00058080 	call	10005808 <open>
100055a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100055a4:	e0bffa17 	ldw	r2,-24(fp)
100055a8:	10002216 	blt	r2,zero,10005634 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100055ac:	04040034 	movhi	r16,4096
100055b0:	841e8404 	addi	r16,r16,31248
100055b4:	e0bffa17 	ldw	r2,-24(fp)
100055b8:	1009883a 	mov	r4,r2
100055bc:	01400304 	movi	r5,12
100055c0:	0002cf00 	call	10002cf0 <__mulsi3>
100055c4:	8085883a 	add	r2,r16,r2
100055c8:	10c00017 	ldw	r3,0(r2)
100055cc:	e0bffb17 	ldw	r2,-20(fp)
100055d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100055d4:	04040034 	movhi	r16,4096
100055d8:	841e8404 	addi	r16,r16,31248
100055dc:	e0bffa17 	ldw	r2,-24(fp)
100055e0:	1009883a 	mov	r4,r2
100055e4:	01400304 	movi	r5,12
100055e8:	0002cf00 	call	10002cf0 <__mulsi3>
100055ec:	8085883a 	add	r2,r16,r2
100055f0:	10800104 	addi	r2,r2,4
100055f4:	10c00017 	ldw	r3,0(r2)
100055f8:	e0bffb17 	ldw	r2,-20(fp)
100055fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10005600:	04040034 	movhi	r16,4096
10005604:	841e8404 	addi	r16,r16,31248
10005608:	e0bffa17 	ldw	r2,-24(fp)
1000560c:	1009883a 	mov	r4,r2
10005610:	01400304 	movi	r5,12
10005614:	0002cf00 	call	10002cf0 <__mulsi3>
10005618:	8085883a 	add	r2,r16,r2
1000561c:	10800204 	addi	r2,r2,8
10005620:	10c00017 	ldw	r3,0(r2)
10005624:	e0bffb17 	ldw	r2,-20(fp)
10005628:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000562c:	e13ffa17 	ldw	r4,-24(fp)
10005630:	00059680 	call	10005968 <alt_release_fd>
  }
} 
10005634:	e6ffff04 	addi	sp,fp,-4
10005638:	dfc00217 	ldw	ra,8(sp)
1000563c:	df000117 	ldw	fp,4(sp)
10005640:	dc000017 	ldw	r16,0(sp)
10005644:	dec00304 	addi	sp,sp,12
10005648:	f800283a 	ret

1000564c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000564c:	defffb04 	addi	sp,sp,-20
10005650:	dfc00415 	stw	ra,16(sp)
10005654:	df000315 	stw	fp,12(sp)
10005658:	df000304 	addi	fp,sp,12
1000565c:	e13ffd15 	stw	r4,-12(fp)
10005660:	e17ffe15 	stw	r5,-8(fp)
10005664:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10005668:	01040034 	movhi	r4,4096
1000566c:	211e8704 	addi	r4,r4,31260
10005670:	e17ffd17 	ldw	r5,-12(fp)
10005674:	01800044 	movi	r6,1
10005678:	01c07fc4 	movi	r7,511
1000567c:	000556c0 	call	1000556c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10005680:	01040034 	movhi	r4,4096
10005684:	211e8404 	addi	r4,r4,31248
10005688:	e17ffe17 	ldw	r5,-8(fp)
1000568c:	000d883a 	mov	r6,zero
10005690:	01c07fc4 	movi	r7,511
10005694:	000556c0 	call	1000556c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10005698:	01040034 	movhi	r4,4096
1000569c:	211e8a04 	addi	r4,r4,31272
100056a0:	e17fff17 	ldw	r5,-4(fp)
100056a4:	01800044 	movi	r6,1
100056a8:	01c07fc4 	movi	r7,511
100056ac:	000556c0 	call	1000556c <alt_open_fd>
}  
100056b0:	e037883a 	mov	sp,fp
100056b4:	dfc00117 	ldw	ra,4(sp)
100056b8:	df000017 	ldw	fp,0(sp)
100056bc:	dec00204 	addi	sp,sp,8
100056c0:	f800283a 	ret

100056c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100056c4:	defffe04 	addi	sp,sp,-8
100056c8:	dfc00115 	stw	ra,4(sp)
100056cc:	df000015 	stw	fp,0(sp)
100056d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100056d4:	00840034 	movhi	r2,4096
100056d8:	109eeb04 	addi	r2,r2,31660
100056dc:	10800017 	ldw	r2,0(r2)
100056e0:	10000526 	beq	r2,zero,100056f8 <alt_get_errno+0x34>
100056e4:	00840034 	movhi	r2,4096
100056e8:	109eeb04 	addi	r2,r2,31660
100056ec:	10800017 	ldw	r2,0(r2)
100056f0:	103ee83a 	callr	r2
100056f4:	00000206 	br	10005700 <alt_get_errno+0x3c>
100056f8:	00840074 	movhi	r2,4097
100056fc:	10a49b04 	addi	r2,r2,-28052
}
10005700:	e037883a 	mov	sp,fp
10005704:	dfc00117 	ldw	ra,4(sp)
10005708:	df000017 	ldw	fp,0(sp)
1000570c:	dec00204 	addi	sp,sp,8
10005710:	f800283a 	ret

10005714 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10005714:	defffb04 	addi	sp,sp,-20
10005718:	dfc00415 	stw	ra,16(sp)
1000571c:	df000315 	stw	fp,12(sp)
10005720:	dc000215 	stw	r16,8(sp)
10005724:	df000304 	addi	fp,sp,12
10005728:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000572c:	e0bffe17 	ldw	r2,-8(fp)
10005730:	10800217 	ldw	r2,8(r2)
10005734:	10d00034 	orhi	r3,r2,16384
10005738:	e0bffe17 	ldw	r2,-8(fp)
1000573c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10005740:	e03ffd15 	stw	zero,-12(fp)
10005744:	00002306 	br	100057d4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10005748:	04040034 	movhi	r16,4096
1000574c:	841e8404 	addi	r16,r16,31248
10005750:	e0bffd17 	ldw	r2,-12(fp)
10005754:	1009883a 	mov	r4,r2
10005758:	01400304 	movi	r5,12
1000575c:	0002cf00 	call	10002cf0 <__mulsi3>
10005760:	8085883a 	add	r2,r16,r2
10005764:	10c00017 	ldw	r3,0(r2)
10005768:	e0bffe17 	ldw	r2,-8(fp)
1000576c:	10800017 	ldw	r2,0(r2)
10005770:	1880151e 	bne	r3,r2,100057c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10005774:	04040034 	movhi	r16,4096
10005778:	841e8404 	addi	r16,r16,31248
1000577c:	e0bffd17 	ldw	r2,-12(fp)
10005780:	1009883a 	mov	r4,r2
10005784:	01400304 	movi	r5,12
10005788:	0002cf00 	call	10002cf0 <__mulsi3>
1000578c:	8085883a 	add	r2,r16,r2
10005790:	10800204 	addi	r2,r2,8
10005794:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10005798:	10000b0e 	bge	r2,zero,100057c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000579c:	e13ffd17 	ldw	r4,-12(fp)
100057a0:	01400304 	movi	r5,12
100057a4:	0002cf00 	call	10002cf0 <__mulsi3>
100057a8:	1007883a 	mov	r3,r2
100057ac:	00840034 	movhi	r2,4096
100057b0:	109e8404 	addi	r2,r2,31248
100057b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100057b8:	e0bffe17 	ldw	r2,-8(fp)
100057bc:	18800226 	beq	r3,r2,100057c8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100057c0:	00bffcc4 	movi	r2,-13
100057c4:	00000a06 	br	100057f0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100057c8:	e0bffd17 	ldw	r2,-12(fp)
100057cc:	10800044 	addi	r2,r2,1
100057d0:	e0bffd15 	stw	r2,-12(fp)
100057d4:	00840034 	movhi	r2,4096
100057d8:	109eea04 	addi	r2,r2,31656
100057dc:	10800017 	ldw	r2,0(r2)
100057e0:	1007883a 	mov	r3,r2
100057e4:	e0bffd17 	ldw	r2,-12(fp)
100057e8:	18bfd72e 	bgeu	r3,r2,10005748 <__alt_data_end+0xf8005748>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100057ec:	0005883a 	mov	r2,zero
}
100057f0:	e6ffff04 	addi	sp,fp,-4
100057f4:	dfc00217 	ldw	ra,8(sp)
100057f8:	df000117 	ldw	fp,4(sp)
100057fc:	dc000017 	ldw	r16,0(sp)
10005800:	dec00304 	addi	sp,sp,12
10005804:	f800283a 	ret

10005808 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10005808:	defff604 	addi	sp,sp,-40
1000580c:	dfc00915 	stw	ra,36(sp)
10005810:	df000815 	stw	fp,32(sp)
10005814:	df000804 	addi	fp,sp,32
10005818:	e13ffd15 	stw	r4,-12(fp)
1000581c:	e17ffe15 	stw	r5,-8(fp)
10005820:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10005824:	00bfffc4 	movi	r2,-1
10005828:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000582c:	00bffb44 	movi	r2,-19
10005830:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10005834:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10005838:	e13ffd17 	ldw	r4,-12(fp)
1000583c:	01440034 	movhi	r5,4096
10005840:	295ee804 	addi	r5,r5,31648
10005844:	0005ba40 	call	10005ba4 <alt_find_dev>
10005848:	e0bff815 	stw	r2,-32(fp)
1000584c:	e0bff817 	ldw	r2,-32(fp)
10005850:	1000051e 	bne	r2,zero,10005868 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10005854:	e13ffd17 	ldw	r4,-12(fp)
10005858:	0005c340 	call	10005c34 <alt_find_file>
1000585c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10005860:	00800044 	movi	r2,1
10005864:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10005868:	e0bff817 	ldw	r2,-32(fp)
1000586c:	10002b26 	beq	r2,zero,1000591c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10005870:	e13ff817 	ldw	r4,-32(fp)
10005874:	0005d480 	call	10005d48 <alt_get_fd>
10005878:	e0bff915 	stw	r2,-28(fp)
1000587c:	e0bff917 	ldw	r2,-28(fp)
10005880:	1000030e 	bge	r2,zero,10005890 <open+0x88>
    {
      status = index;
10005884:	e0bff917 	ldw	r2,-28(fp)
10005888:	e0bffa15 	stw	r2,-24(fp)
1000588c:	00002506 	br	10005924 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10005890:	e13ff917 	ldw	r4,-28(fp)
10005894:	01400304 	movi	r5,12
10005898:	0002cf00 	call	10002cf0 <__mulsi3>
1000589c:	1007883a 	mov	r3,r2
100058a0:	00840034 	movhi	r2,4096
100058a4:	109e8404 	addi	r2,r2,31248
100058a8:	1885883a 	add	r2,r3,r2
100058ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100058b0:	e0fffe17 	ldw	r3,-8(fp)
100058b4:	00900034 	movhi	r2,16384
100058b8:	10bfffc4 	addi	r2,r2,-1
100058bc:	1886703a 	and	r3,r3,r2
100058c0:	e0bffc17 	ldw	r2,-16(fp)
100058c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100058c8:	e0bffb17 	ldw	r2,-20(fp)
100058cc:	1000051e 	bne	r2,zero,100058e4 <open+0xdc>
100058d0:	e13ffc17 	ldw	r4,-16(fp)
100058d4:	00057140 	call	10005714 <alt_file_locked>
100058d8:	e0bffa15 	stw	r2,-24(fp)
100058dc:	e0bffa17 	ldw	r2,-24(fp)
100058e0:	10001016 	blt	r2,zero,10005924 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100058e4:	e0bff817 	ldw	r2,-32(fp)
100058e8:	10800317 	ldw	r2,12(r2)
100058ec:	10000826 	beq	r2,zero,10005910 <open+0x108>
100058f0:	e0bff817 	ldw	r2,-32(fp)
100058f4:	10800317 	ldw	r2,12(r2)
100058f8:	e13ffc17 	ldw	r4,-16(fp)
100058fc:	e17ffd17 	ldw	r5,-12(fp)
10005900:	e1bffe17 	ldw	r6,-8(fp)
10005904:	e1ffff17 	ldw	r7,-4(fp)
10005908:	103ee83a 	callr	r2
1000590c:	00000106 	br	10005914 <open+0x10c>
10005910:	0005883a 	mov	r2,zero
10005914:	e0bffa15 	stw	r2,-24(fp)
10005918:	00000206 	br	10005924 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000591c:	00bffb44 	movi	r2,-19
10005920:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10005924:	e0bffa17 	ldw	r2,-24(fp)
10005928:	1000090e 	bge	r2,zero,10005950 <open+0x148>
  {
    alt_release_fd (index);  
1000592c:	e13ff917 	ldw	r4,-28(fp)
10005930:	00059680 	call	10005968 <alt_release_fd>
    ALT_ERRNO = -status;
10005934:	00056c40 	call	100056c4 <alt_get_errno>
10005938:	1007883a 	mov	r3,r2
1000593c:	e0bffa17 	ldw	r2,-24(fp)
10005940:	0085c83a 	sub	r2,zero,r2
10005944:	18800015 	stw	r2,0(r3)
    return -1;
10005948:	00bfffc4 	movi	r2,-1
1000594c:	00000106 	br	10005954 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10005950:	e0bff917 	ldw	r2,-28(fp)
}
10005954:	e037883a 	mov	sp,fp
10005958:	dfc00117 	ldw	ra,4(sp)
1000595c:	df000017 	ldw	fp,0(sp)
10005960:	dec00204 	addi	sp,sp,8
10005964:	f800283a 	ret

10005968 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10005968:	defffc04 	addi	sp,sp,-16
1000596c:	dfc00315 	stw	ra,12(sp)
10005970:	df000215 	stw	fp,8(sp)
10005974:	dc000115 	stw	r16,4(sp)
10005978:	df000204 	addi	fp,sp,8
1000597c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10005980:	e0bffe17 	ldw	r2,-8(fp)
10005984:	108000d0 	cmplti	r2,r2,3
10005988:	1000111e 	bne	r2,zero,100059d0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000598c:	04040034 	movhi	r16,4096
10005990:	841e8404 	addi	r16,r16,31248
10005994:	e0bffe17 	ldw	r2,-8(fp)
10005998:	1009883a 	mov	r4,r2
1000599c:	01400304 	movi	r5,12
100059a0:	0002cf00 	call	10002cf0 <__mulsi3>
100059a4:	8085883a 	add	r2,r16,r2
100059a8:	10800204 	addi	r2,r2,8
100059ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100059b0:	04040034 	movhi	r16,4096
100059b4:	841e8404 	addi	r16,r16,31248
100059b8:	e0bffe17 	ldw	r2,-8(fp)
100059bc:	1009883a 	mov	r4,r2
100059c0:	01400304 	movi	r5,12
100059c4:	0002cf00 	call	10002cf0 <__mulsi3>
100059c8:	8085883a 	add	r2,r16,r2
100059cc:	10000015 	stw	zero,0(r2)
  }
}
100059d0:	e6ffff04 	addi	sp,fp,-4
100059d4:	dfc00217 	ldw	ra,8(sp)
100059d8:	df000117 	ldw	fp,4(sp)
100059dc:	dc000017 	ldw	r16,0(sp)
100059e0:	dec00304 	addi	sp,sp,12
100059e4:	f800283a 	ret

100059e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100059e8:	defffa04 	addi	sp,sp,-24
100059ec:	df000515 	stw	fp,20(sp)
100059f0:	df000504 	addi	fp,sp,20
100059f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100059f8:	0005303a 	rdctl	r2,status
100059fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10005a00:	e0fffc17 	ldw	r3,-16(fp)
10005a04:	00bfff84 	movi	r2,-2
10005a08:	1884703a 	and	r2,r3,r2
10005a0c:	1001703a 	wrctl	status,r2
  
  return context;
10005a10:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10005a14:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10005a18:	e0bfff17 	ldw	r2,-4(fp)
10005a1c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10005a20:	e0bffd17 	ldw	r2,-12(fp)
10005a24:	10800017 	ldw	r2,0(r2)
10005a28:	e0fffd17 	ldw	r3,-12(fp)
10005a2c:	18c00117 	ldw	r3,4(r3)
10005a30:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10005a34:	e0bffd17 	ldw	r2,-12(fp)
10005a38:	10800117 	ldw	r2,4(r2)
10005a3c:	e0fffd17 	ldw	r3,-12(fp)
10005a40:	18c00017 	ldw	r3,0(r3)
10005a44:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10005a48:	e0bffd17 	ldw	r2,-12(fp)
10005a4c:	e0fffd17 	ldw	r3,-12(fp)
10005a50:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10005a54:	e0bffd17 	ldw	r2,-12(fp)
10005a58:	e0fffd17 	ldw	r3,-12(fp)
10005a5c:	10c00015 	stw	r3,0(r2)
10005a60:	e0bffb17 	ldw	r2,-20(fp)
10005a64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10005a68:	e0bffe17 	ldw	r2,-8(fp)
10005a6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10005a70:	e037883a 	mov	sp,fp
10005a74:	df000017 	ldw	fp,0(sp)
10005a78:	dec00104 	addi	sp,sp,4
10005a7c:	f800283a 	ret

10005a80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10005a80:	defffb04 	addi	sp,sp,-20
10005a84:	dfc00415 	stw	ra,16(sp)
10005a88:	df000315 	stw	fp,12(sp)
10005a8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10005a90:	d0a00917 	ldw	r2,-32732(gp)
10005a94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10005a98:	d0a5b517 	ldw	r2,-26924(gp)
10005a9c:	10800044 	addi	r2,r2,1
10005aa0:	d0a5b515 	stw	r2,-26924(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005aa4:	00002e06 	br	10005b60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10005aa8:	e0bffd17 	ldw	r2,-12(fp)
10005aac:	10800017 	ldw	r2,0(r2)
10005ab0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10005ab4:	e0bffd17 	ldw	r2,-12(fp)
10005ab8:	10800403 	ldbu	r2,16(r2)
10005abc:	10803fcc 	andi	r2,r2,255
10005ac0:	10000426 	beq	r2,zero,10005ad4 <alt_tick+0x54>
10005ac4:	d0a5b517 	ldw	r2,-26924(gp)
10005ac8:	1000021e 	bne	r2,zero,10005ad4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10005acc:	e0bffd17 	ldw	r2,-12(fp)
10005ad0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10005ad4:	e0bffd17 	ldw	r2,-12(fp)
10005ad8:	10800217 	ldw	r2,8(r2)
10005adc:	d0e5b517 	ldw	r3,-26924(gp)
10005ae0:	18801d36 	bltu	r3,r2,10005b58 <alt_tick+0xd8>
10005ae4:	e0bffd17 	ldw	r2,-12(fp)
10005ae8:	10800403 	ldbu	r2,16(r2)
10005aec:	10803fcc 	andi	r2,r2,255
10005af0:	1000191e 	bne	r2,zero,10005b58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10005af4:	e0bffd17 	ldw	r2,-12(fp)
10005af8:	10800317 	ldw	r2,12(r2)
10005afc:	e0fffd17 	ldw	r3,-12(fp)
10005b00:	18c00517 	ldw	r3,20(r3)
10005b04:	1809883a 	mov	r4,r3
10005b08:	103ee83a 	callr	r2
10005b0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10005b10:	e0bfff17 	ldw	r2,-4(fp)
10005b14:	1000031e 	bne	r2,zero,10005b24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10005b18:	e13ffd17 	ldw	r4,-12(fp)
10005b1c:	00059e80 	call	100059e8 <alt_alarm_stop>
10005b20:	00000d06 	br	10005b58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10005b24:	e0bffd17 	ldw	r2,-12(fp)
10005b28:	10c00217 	ldw	r3,8(r2)
10005b2c:	e0bfff17 	ldw	r2,-4(fp)
10005b30:	1887883a 	add	r3,r3,r2
10005b34:	e0bffd17 	ldw	r2,-12(fp)
10005b38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10005b3c:	e0bffd17 	ldw	r2,-12(fp)
10005b40:	10c00217 	ldw	r3,8(r2)
10005b44:	d0a5b517 	ldw	r2,-26924(gp)
10005b48:	1880032e 	bgeu	r3,r2,10005b58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10005b4c:	e0bffd17 	ldw	r2,-12(fp)
10005b50:	00c00044 	movi	r3,1
10005b54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10005b58:	e0bffe17 	ldw	r2,-8(fp)
10005b5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005b60:	e0fffd17 	ldw	r3,-12(fp)
10005b64:	d0a00904 	addi	r2,gp,-32732
10005b68:	18bfcf1e 	bne	r3,r2,10005aa8 <__alt_data_end+0xf8005aa8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10005b6c:	0001883a 	nop
}
10005b70:	e037883a 	mov	sp,fp
10005b74:	dfc00117 	ldw	ra,4(sp)
10005b78:	df000017 	ldw	fp,0(sp)
10005b7c:	dec00204 	addi	sp,sp,8
10005b80:	f800283a 	ret

10005b84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10005b84:	deffff04 	addi	sp,sp,-4
10005b88:	df000015 	stw	fp,0(sp)
10005b8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10005b90:	000170fa 	wrctl	ienable,zero
}
10005b94:	e037883a 	mov	sp,fp
10005b98:	df000017 	ldw	fp,0(sp)
10005b9c:	dec00104 	addi	sp,sp,4
10005ba0:	f800283a 	ret

10005ba4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10005ba4:	defffa04 	addi	sp,sp,-24
10005ba8:	dfc00515 	stw	ra,20(sp)
10005bac:	df000415 	stw	fp,16(sp)
10005bb0:	df000404 	addi	fp,sp,16
10005bb4:	e13ffe15 	stw	r4,-8(fp)
10005bb8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10005bbc:	e0bfff17 	ldw	r2,-4(fp)
10005bc0:	10800017 	ldw	r2,0(r2)
10005bc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10005bc8:	e13ffe17 	ldw	r4,-8(fp)
10005bcc:	00060b80 	call	100060b8 <strlen>
10005bd0:	10800044 	addi	r2,r2,1
10005bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005bd8:	00000d06 	br	10005c10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10005bdc:	e0bffc17 	ldw	r2,-16(fp)
10005be0:	10c00217 	ldw	r3,8(r2)
10005be4:	e0bffd17 	ldw	r2,-12(fp)
10005be8:	1809883a 	mov	r4,r3
10005bec:	e17ffe17 	ldw	r5,-8(fp)
10005bf0:	100d883a 	mov	r6,r2
10005bf4:	0005f040 	call	10005f04 <memcmp>
10005bf8:	1000021e 	bne	r2,zero,10005c04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10005bfc:	e0bffc17 	ldw	r2,-16(fp)
10005c00:	00000706 	br	10005c20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10005c04:	e0bffc17 	ldw	r2,-16(fp)
10005c08:	10800017 	ldw	r2,0(r2)
10005c0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005c10:	e0fffc17 	ldw	r3,-16(fp)
10005c14:	e0bfff17 	ldw	r2,-4(fp)
10005c18:	18bff01e 	bne	r3,r2,10005bdc <__alt_data_end+0xf8005bdc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10005c1c:	0005883a 	mov	r2,zero
}
10005c20:	e037883a 	mov	sp,fp
10005c24:	dfc00117 	ldw	ra,4(sp)
10005c28:	df000017 	ldw	fp,0(sp)
10005c2c:	dec00204 	addi	sp,sp,8
10005c30:	f800283a 	ret

10005c34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10005c34:	defffb04 	addi	sp,sp,-20
10005c38:	dfc00415 	stw	ra,16(sp)
10005c3c:	df000315 	stw	fp,12(sp)
10005c40:	df000304 	addi	fp,sp,12
10005c44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10005c48:	00840034 	movhi	r2,4096
10005c4c:	109ee604 	addi	r2,r2,31640
10005c50:	10800017 	ldw	r2,0(r2)
10005c54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005c58:	00003106 	br	10005d20 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10005c5c:	e0bffd17 	ldw	r2,-12(fp)
10005c60:	10800217 	ldw	r2,8(r2)
10005c64:	1009883a 	mov	r4,r2
10005c68:	00060b80 	call	100060b8 <strlen>
10005c6c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10005c70:	e0bffd17 	ldw	r2,-12(fp)
10005c74:	10c00217 	ldw	r3,8(r2)
10005c78:	e0bffe17 	ldw	r2,-8(fp)
10005c7c:	10bfffc4 	addi	r2,r2,-1
10005c80:	1885883a 	add	r2,r3,r2
10005c84:	10800003 	ldbu	r2,0(r2)
10005c88:	10803fcc 	andi	r2,r2,255
10005c8c:	1080201c 	xori	r2,r2,128
10005c90:	10bfe004 	addi	r2,r2,-128
10005c94:	10800bd8 	cmpnei	r2,r2,47
10005c98:	1000031e 	bne	r2,zero,10005ca8 <alt_find_file+0x74>
    {
      len -= 1;
10005c9c:	e0bffe17 	ldw	r2,-8(fp)
10005ca0:	10bfffc4 	addi	r2,r2,-1
10005ca4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005ca8:	e0bffe17 	ldw	r2,-8(fp)
10005cac:	e0ffff17 	ldw	r3,-4(fp)
10005cb0:	1885883a 	add	r2,r3,r2
10005cb4:	10800003 	ldbu	r2,0(r2)
10005cb8:	10803fcc 	andi	r2,r2,255
10005cbc:	1080201c 	xori	r2,r2,128
10005cc0:	10bfe004 	addi	r2,r2,-128
10005cc4:	10800be0 	cmpeqi	r2,r2,47
10005cc8:	1000081e 	bne	r2,zero,10005cec <alt_find_file+0xb8>
10005ccc:	e0bffe17 	ldw	r2,-8(fp)
10005cd0:	e0ffff17 	ldw	r3,-4(fp)
10005cd4:	1885883a 	add	r2,r3,r2
10005cd8:	10800003 	ldbu	r2,0(r2)
10005cdc:	10803fcc 	andi	r2,r2,255
10005ce0:	1080201c 	xori	r2,r2,128
10005ce4:	10bfe004 	addi	r2,r2,-128
10005ce8:	10000a1e 	bne	r2,zero,10005d14 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10005cec:	e0bffd17 	ldw	r2,-12(fp)
10005cf0:	10c00217 	ldw	r3,8(r2)
10005cf4:	e0bffe17 	ldw	r2,-8(fp)
10005cf8:	1809883a 	mov	r4,r3
10005cfc:	e17fff17 	ldw	r5,-4(fp)
10005d00:	100d883a 	mov	r6,r2
10005d04:	0005f040 	call	10005f04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005d08:	1000021e 	bne	r2,zero,10005d14 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10005d0c:	e0bffd17 	ldw	r2,-12(fp)
10005d10:	00000806 	br	10005d34 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10005d14:	e0bffd17 	ldw	r2,-12(fp)
10005d18:	10800017 	ldw	r2,0(r2)
10005d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005d20:	e0fffd17 	ldw	r3,-12(fp)
10005d24:	00840034 	movhi	r2,4096
10005d28:	109ee604 	addi	r2,r2,31640
10005d2c:	18bfcb1e 	bne	r3,r2,10005c5c <__alt_data_end+0xf8005c5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10005d30:	0005883a 	mov	r2,zero
}
10005d34:	e037883a 	mov	sp,fp
10005d38:	dfc00117 	ldw	ra,4(sp)
10005d3c:	df000017 	ldw	fp,0(sp)
10005d40:	dec00204 	addi	sp,sp,8
10005d44:	f800283a 	ret

10005d48 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10005d48:	defffa04 	addi	sp,sp,-24
10005d4c:	dfc00515 	stw	ra,20(sp)
10005d50:	df000415 	stw	fp,16(sp)
10005d54:	dc000315 	stw	r16,12(sp)
10005d58:	df000404 	addi	fp,sp,16
10005d5c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10005d60:	00bffa04 	movi	r2,-24
10005d64:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005d68:	e03ffc15 	stw	zero,-16(fp)
10005d6c:	00002106 	br	10005df4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10005d70:	04040034 	movhi	r16,4096
10005d74:	841e8404 	addi	r16,r16,31248
10005d78:	e0bffc17 	ldw	r2,-16(fp)
10005d7c:	1009883a 	mov	r4,r2
10005d80:	01400304 	movi	r5,12
10005d84:	0002cf00 	call	10002cf0 <__mulsi3>
10005d88:	8085883a 	add	r2,r16,r2
10005d8c:	10800017 	ldw	r2,0(r2)
10005d90:	1000151e 	bne	r2,zero,10005de8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10005d94:	04040034 	movhi	r16,4096
10005d98:	841e8404 	addi	r16,r16,31248
10005d9c:	e0bffc17 	ldw	r2,-16(fp)
10005da0:	1009883a 	mov	r4,r2
10005da4:	01400304 	movi	r5,12
10005da8:	0002cf00 	call	10002cf0 <__mulsi3>
10005dac:	8085883a 	add	r2,r16,r2
10005db0:	e0fffe17 	ldw	r3,-8(fp)
10005db4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10005db8:	00840034 	movhi	r2,4096
10005dbc:	109eea04 	addi	r2,r2,31656
10005dc0:	10c00017 	ldw	r3,0(r2)
10005dc4:	e0bffc17 	ldw	r2,-16(fp)
10005dc8:	1880040e 	bge	r3,r2,10005ddc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10005dcc:	00840034 	movhi	r2,4096
10005dd0:	109eea04 	addi	r2,r2,31656
10005dd4:	e0fffc17 	ldw	r3,-16(fp)
10005dd8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10005ddc:	e0bffc17 	ldw	r2,-16(fp)
10005de0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005de4:	00000606 	br	10005e00 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005de8:	e0bffc17 	ldw	r2,-16(fp)
10005dec:	10800044 	addi	r2,r2,1
10005df0:	e0bffc15 	stw	r2,-16(fp)
10005df4:	e0bffc17 	ldw	r2,-16(fp)
10005df8:	10800810 	cmplti	r2,r2,32
10005dfc:	103fdc1e 	bne	r2,zero,10005d70 <__alt_data_end+0xf8005d70>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10005e00:	e0bffd17 	ldw	r2,-12(fp)
}
10005e04:	e6ffff04 	addi	sp,fp,-4
10005e08:	dfc00217 	ldw	ra,8(sp)
10005e0c:	df000117 	ldw	fp,4(sp)
10005e10:	dc000017 	ldw	r16,0(sp)
10005e14:	dec00304 	addi	sp,sp,12
10005e18:	f800283a 	ret

10005e1c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10005e1c:	defffe04 	addi	sp,sp,-8
10005e20:	df000115 	stw	fp,4(sp)
10005e24:	df000104 	addi	fp,sp,4
10005e28:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10005e2c:	e0bfff17 	ldw	r2,-4(fp)
10005e30:	10bffe84 	addi	r2,r2,-6
10005e34:	10c00428 	cmpgeui	r3,r2,16
10005e38:	18001a1e 	bne	r3,zero,10005ea4 <alt_exception_cause_generated_bad_addr+0x88>
10005e3c:	100690ba 	slli	r3,r2,2
10005e40:	00840034 	movhi	r2,4096
10005e44:	10979504 	addi	r2,r2,24148
10005e48:	1885883a 	add	r2,r3,r2
10005e4c:	10800017 	ldw	r2,0(r2)
10005e50:	1000683a 	jmp	r2
10005e54:	10005e94 	ori	zero,r2,378
10005e58:	10005e94 	ori	zero,r2,378
10005e5c:	10005ea4 	muli	zero,r2,378
10005e60:	10005ea4 	muli	zero,r2,378
10005e64:	10005ea4 	muli	zero,r2,378
10005e68:	10005e94 	ori	zero,r2,378
10005e6c:	10005e9c 	xori	zero,r2,378
10005e70:	10005ea4 	muli	zero,r2,378
10005e74:	10005e94 	ori	zero,r2,378
10005e78:	10005e94 	ori	zero,r2,378
10005e7c:	10005ea4 	muli	zero,r2,378
10005e80:	10005e94 	ori	zero,r2,378
10005e84:	10005e9c 	xori	zero,r2,378
10005e88:	10005ea4 	muli	zero,r2,378
10005e8c:	10005ea4 	muli	zero,r2,378
10005e90:	10005e94 	ori	zero,r2,378
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10005e94:	00800044 	movi	r2,1
10005e98:	00000306 	br	10005ea8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10005e9c:	0005883a 	mov	r2,zero
10005ea0:	00000106 	br	10005ea8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10005ea4:	0005883a 	mov	r2,zero
  }
}
10005ea8:	e037883a 	mov	sp,fp
10005eac:	df000017 	ldw	fp,0(sp)
10005eb0:	dec00104 	addi	sp,sp,4
10005eb4:	f800283a 	ret

10005eb8 <atexit>:
10005eb8:	200b883a 	mov	r5,r4
10005ebc:	000d883a 	mov	r6,zero
10005ec0:	0009883a 	mov	r4,zero
10005ec4:	000f883a 	mov	r7,zero
10005ec8:	00061501 	jmpi	10006150 <__register_exitproc>

10005ecc <exit>:
10005ecc:	defffe04 	addi	sp,sp,-8
10005ed0:	000b883a 	mov	r5,zero
10005ed4:	dc000015 	stw	r16,0(sp)
10005ed8:	dfc00115 	stw	ra,4(sp)
10005edc:	2021883a 	mov	r16,r4
10005ee0:	00062640 	call	10006264 <__call_exitprocs>
10005ee4:	00840034 	movhi	r2,4096
10005ee8:	109ee404 	addi	r2,r2,31632
10005eec:	11000017 	ldw	r4,0(r2)
10005ef0:	20800f17 	ldw	r2,60(r4)
10005ef4:	10000126 	beq	r2,zero,10005efc <exit+0x30>
10005ef8:	103ee83a 	callr	r2
10005efc:	8009883a 	mov	r4,r16
10005f00:	00063f80 	call	100063f8 <_exit>

10005f04 <memcmp>:
10005f04:	01c000c4 	movi	r7,3
10005f08:	3980192e 	bgeu	r7,r6,10005f70 <memcmp+0x6c>
10005f0c:	2144b03a 	or	r2,r4,r5
10005f10:	11c4703a 	and	r2,r2,r7
10005f14:	10000f26 	beq	r2,zero,10005f54 <memcmp+0x50>
10005f18:	20800003 	ldbu	r2,0(r4)
10005f1c:	28c00003 	ldbu	r3,0(r5)
10005f20:	10c0151e 	bne	r2,r3,10005f78 <memcmp+0x74>
10005f24:	31bfff84 	addi	r6,r6,-2
10005f28:	01ffffc4 	movi	r7,-1
10005f2c:	00000406 	br	10005f40 <memcmp+0x3c>
10005f30:	20800003 	ldbu	r2,0(r4)
10005f34:	28c00003 	ldbu	r3,0(r5)
10005f38:	31bfffc4 	addi	r6,r6,-1
10005f3c:	10c00e1e 	bne	r2,r3,10005f78 <memcmp+0x74>
10005f40:	21000044 	addi	r4,r4,1
10005f44:	29400044 	addi	r5,r5,1
10005f48:	31fff91e 	bne	r6,r7,10005f30 <__alt_data_end+0xf8005f30>
10005f4c:	0005883a 	mov	r2,zero
10005f50:	f800283a 	ret
10005f54:	20c00017 	ldw	r3,0(r4)
10005f58:	28800017 	ldw	r2,0(r5)
10005f5c:	1880041e 	bne	r3,r2,10005f70 <memcmp+0x6c>
10005f60:	31bfff04 	addi	r6,r6,-4
10005f64:	21000104 	addi	r4,r4,4
10005f68:	29400104 	addi	r5,r5,4
10005f6c:	39bff936 	bltu	r7,r6,10005f54 <__alt_data_end+0xf8005f54>
10005f70:	303fe91e 	bne	r6,zero,10005f18 <__alt_data_end+0xf8005f18>
10005f74:	003ff506 	br	10005f4c <__alt_data_end+0xf8005f4c>
10005f78:	10c5c83a 	sub	r2,r2,r3
10005f7c:	f800283a 	ret

10005f80 <memcpy>:
10005f80:	deffff04 	addi	sp,sp,-4
10005f84:	dc000015 	stw	r16,0(sp)
10005f88:	00c003c4 	movi	r3,15
10005f8c:	2005883a 	mov	r2,r4
10005f90:	1980432e 	bgeu	r3,r6,100060a0 <memcpy+0x120>
10005f94:	2146b03a 	or	r3,r4,r5
10005f98:	18c000cc 	andi	r3,r3,3
10005f9c:	1800421e 	bne	r3,zero,100060a8 <memcpy+0x128>
10005fa0:	343ffc04 	addi	r16,r6,-16
10005fa4:	8020d13a 	srli	r16,r16,4
10005fa8:	28c00104 	addi	r3,r5,4
10005fac:	23400104 	addi	r13,r4,4
10005fb0:	801e913a 	slli	r15,r16,4
10005fb4:	2b000204 	addi	r12,r5,8
10005fb8:	22c00204 	addi	r11,r4,8
10005fbc:	7bc00504 	addi	r15,r15,20
10005fc0:	2a800304 	addi	r10,r5,12
10005fc4:	22400304 	addi	r9,r4,12
10005fc8:	2bdf883a 	add	r15,r5,r15
10005fcc:	2811883a 	mov	r8,r5
10005fd0:	200f883a 	mov	r7,r4
10005fd4:	41000017 	ldw	r4,0(r8)
10005fd8:	39c00404 	addi	r7,r7,16
10005fdc:	18c00404 	addi	r3,r3,16
10005fe0:	393ffc15 	stw	r4,-16(r7)
10005fe4:	1bbffc17 	ldw	r14,-16(r3)
10005fe8:	6b400404 	addi	r13,r13,16
10005fec:	5ac00404 	addi	r11,r11,16
10005ff0:	6bbffc15 	stw	r14,-16(r13)
10005ff4:	63800017 	ldw	r14,0(r12)
10005ff8:	4a400404 	addi	r9,r9,16
10005ffc:	42000404 	addi	r8,r8,16
10006000:	5bbffc15 	stw	r14,-16(r11)
10006004:	53800017 	ldw	r14,0(r10)
10006008:	63000404 	addi	r12,r12,16
1000600c:	52800404 	addi	r10,r10,16
10006010:	4bbffc15 	stw	r14,-16(r9)
10006014:	1bffef1e 	bne	r3,r15,10005fd4 <__alt_data_end+0xf8005fd4>
10006018:	81c00044 	addi	r7,r16,1
1000601c:	380e913a 	slli	r7,r7,4
10006020:	310003cc 	andi	r4,r6,15
10006024:	02c000c4 	movi	r11,3
10006028:	11c7883a 	add	r3,r2,r7
1000602c:	29cb883a 	add	r5,r5,r7
10006030:	59001f2e 	bgeu	r11,r4,100060b0 <memcpy+0x130>
10006034:	1813883a 	mov	r9,r3
10006038:	2811883a 	mov	r8,r5
1000603c:	200f883a 	mov	r7,r4
10006040:	42800017 	ldw	r10,0(r8)
10006044:	4a400104 	addi	r9,r9,4
10006048:	39ffff04 	addi	r7,r7,-4
1000604c:	4abfff15 	stw	r10,-4(r9)
10006050:	42000104 	addi	r8,r8,4
10006054:	59fffa36 	bltu	r11,r7,10006040 <__alt_data_end+0xf8006040>
10006058:	213fff04 	addi	r4,r4,-4
1000605c:	2008d0ba 	srli	r4,r4,2
10006060:	318000cc 	andi	r6,r6,3
10006064:	21000044 	addi	r4,r4,1
10006068:	2109883a 	add	r4,r4,r4
1000606c:	2109883a 	add	r4,r4,r4
10006070:	1907883a 	add	r3,r3,r4
10006074:	290b883a 	add	r5,r5,r4
10006078:	30000626 	beq	r6,zero,10006094 <memcpy+0x114>
1000607c:	198d883a 	add	r6,r3,r6
10006080:	29c00003 	ldbu	r7,0(r5)
10006084:	18c00044 	addi	r3,r3,1
10006088:	29400044 	addi	r5,r5,1
1000608c:	19ffffc5 	stb	r7,-1(r3)
10006090:	19bffb1e 	bne	r3,r6,10006080 <__alt_data_end+0xf8006080>
10006094:	dc000017 	ldw	r16,0(sp)
10006098:	dec00104 	addi	sp,sp,4
1000609c:	f800283a 	ret
100060a0:	2007883a 	mov	r3,r4
100060a4:	003ff406 	br	10006078 <__alt_data_end+0xf8006078>
100060a8:	2007883a 	mov	r3,r4
100060ac:	003ff306 	br	1000607c <__alt_data_end+0xf800607c>
100060b0:	200d883a 	mov	r6,r4
100060b4:	003ff006 	br	10006078 <__alt_data_end+0xf8006078>

100060b8 <strlen>:
100060b8:	208000cc 	andi	r2,r4,3
100060bc:	10002026 	beq	r2,zero,10006140 <strlen+0x88>
100060c0:	20800007 	ldb	r2,0(r4)
100060c4:	10002026 	beq	r2,zero,10006148 <strlen+0x90>
100060c8:	2005883a 	mov	r2,r4
100060cc:	00000206 	br	100060d8 <strlen+0x20>
100060d0:	10c00007 	ldb	r3,0(r2)
100060d4:	18001826 	beq	r3,zero,10006138 <strlen+0x80>
100060d8:	10800044 	addi	r2,r2,1
100060dc:	10c000cc 	andi	r3,r2,3
100060e0:	183ffb1e 	bne	r3,zero,100060d0 <__alt_data_end+0xf80060d0>
100060e4:	10c00017 	ldw	r3,0(r2)
100060e8:	01ffbff4 	movhi	r7,65279
100060ec:	39ffbfc4 	addi	r7,r7,-257
100060f0:	00ca303a 	nor	r5,zero,r3
100060f4:	01a02074 	movhi	r6,32897
100060f8:	19c7883a 	add	r3,r3,r7
100060fc:	31a02004 	addi	r6,r6,-32640
10006100:	1946703a 	and	r3,r3,r5
10006104:	1986703a 	and	r3,r3,r6
10006108:	1800091e 	bne	r3,zero,10006130 <strlen+0x78>
1000610c:	10800104 	addi	r2,r2,4
10006110:	10c00017 	ldw	r3,0(r2)
10006114:	19cb883a 	add	r5,r3,r7
10006118:	00c6303a 	nor	r3,zero,r3
1000611c:	28c6703a 	and	r3,r5,r3
10006120:	1986703a 	and	r3,r3,r6
10006124:	183ff926 	beq	r3,zero,1000610c <__alt_data_end+0xf800610c>
10006128:	00000106 	br	10006130 <strlen+0x78>
1000612c:	10800044 	addi	r2,r2,1
10006130:	10c00007 	ldb	r3,0(r2)
10006134:	183ffd1e 	bne	r3,zero,1000612c <__alt_data_end+0xf800612c>
10006138:	1105c83a 	sub	r2,r2,r4
1000613c:	f800283a 	ret
10006140:	2005883a 	mov	r2,r4
10006144:	003fe706 	br	100060e4 <__alt_data_end+0xf80060e4>
10006148:	0005883a 	mov	r2,zero
1000614c:	f800283a 	ret

10006150 <__register_exitproc>:
10006150:	00840034 	movhi	r2,4096
10006154:	defffa04 	addi	sp,sp,-24
10006158:	109ee404 	addi	r2,r2,31632
1000615c:	dc000315 	stw	r16,12(sp)
10006160:	14000017 	ldw	r16,0(r2)
10006164:	dc400415 	stw	r17,16(sp)
10006168:	dfc00515 	stw	ra,20(sp)
1000616c:	80805217 	ldw	r2,328(r16)
10006170:	2023883a 	mov	r17,r4
10006174:	10003626 	beq	r2,zero,10006250 <__register_exitproc+0x100>
10006178:	10c00117 	ldw	r3,4(r2)
1000617c:	010007c4 	movi	r4,31
10006180:	20c00e16 	blt	r4,r3,100061bc <__register_exitproc+0x6c>
10006184:	1a400044 	addi	r9,r3,1
10006188:	8800211e 	bne	r17,zero,10006210 <__register_exitproc+0xc0>
1000618c:	18c00084 	addi	r3,r3,2
10006190:	18c7883a 	add	r3,r3,r3
10006194:	18c7883a 	add	r3,r3,r3
10006198:	12400115 	stw	r9,4(r2)
1000619c:	10c7883a 	add	r3,r2,r3
100061a0:	19400015 	stw	r5,0(r3)
100061a4:	0005883a 	mov	r2,zero
100061a8:	dfc00517 	ldw	ra,20(sp)
100061ac:	dc400417 	ldw	r17,16(sp)
100061b0:	dc000317 	ldw	r16,12(sp)
100061b4:	dec00604 	addi	sp,sp,24
100061b8:	f800283a 	ret
100061bc:	00800034 	movhi	r2,0
100061c0:	10800004 	addi	r2,r2,0
100061c4:	10002526 	beq	r2,zero,1000625c <__register_exitproc+0x10c>
100061c8:	01006404 	movi	r4,400
100061cc:	d9400015 	stw	r5,0(sp)
100061d0:	d9800115 	stw	r6,4(sp)
100061d4:	d9c00215 	stw	r7,8(sp)
100061d8:	00000000 	call	10000000 <__reset>
100061dc:	d9400017 	ldw	r5,0(sp)
100061e0:	d9800117 	ldw	r6,4(sp)
100061e4:	d9c00217 	ldw	r7,8(sp)
100061e8:	10001c26 	beq	r2,zero,1000625c <__register_exitproc+0x10c>
100061ec:	80c05217 	ldw	r3,328(r16)
100061f0:	10000115 	stw	zero,4(r2)
100061f4:	02400044 	movi	r9,1
100061f8:	10c00015 	stw	r3,0(r2)
100061fc:	80805215 	stw	r2,328(r16)
10006200:	10006215 	stw	zero,392(r2)
10006204:	10006315 	stw	zero,396(r2)
10006208:	0007883a 	mov	r3,zero
1000620c:	883fdf26 	beq	r17,zero,1000618c <__alt_data_end+0xf800618c>
10006210:	18d1883a 	add	r8,r3,r3
10006214:	4211883a 	add	r8,r8,r8
10006218:	1211883a 	add	r8,r2,r8
1000621c:	41802215 	stw	r6,136(r8)
10006220:	01000044 	movi	r4,1
10006224:	11806217 	ldw	r6,392(r2)
10006228:	20c8983a 	sll	r4,r4,r3
1000622c:	310cb03a 	or	r6,r6,r4
10006230:	11806215 	stw	r6,392(r2)
10006234:	41c04215 	stw	r7,264(r8)
10006238:	01800084 	movi	r6,2
1000623c:	89bfd31e 	bne	r17,r6,1000618c <__alt_data_end+0xf800618c>
10006240:	11806317 	ldw	r6,396(r2)
10006244:	3108b03a 	or	r4,r6,r4
10006248:	11006315 	stw	r4,396(r2)
1000624c:	003fcf06 	br	1000618c <__alt_data_end+0xf800618c>
10006250:	80805304 	addi	r2,r16,332
10006254:	80805215 	stw	r2,328(r16)
10006258:	003fc706 	br	10006178 <__alt_data_end+0xf8006178>
1000625c:	00bfffc4 	movi	r2,-1
10006260:	003fd106 	br	100061a8 <__alt_data_end+0xf80061a8>

10006264 <__call_exitprocs>:
10006264:	00840034 	movhi	r2,4096
10006268:	109ee404 	addi	r2,r2,31632
1000626c:	10800017 	ldw	r2,0(r2)
10006270:	defff404 	addi	sp,sp,-48
10006274:	dd800815 	stw	r22,32(sp)
10006278:	d8800015 	stw	r2,0(sp)
1000627c:	10805204 	addi	r2,r2,328
10006280:	dd000615 	stw	r20,24(sp)
10006284:	dc800415 	stw	r18,16(sp)
10006288:	dfc00b15 	stw	ra,44(sp)
1000628c:	df000a15 	stw	fp,40(sp)
10006290:	ddc00915 	stw	r23,36(sp)
10006294:	dd400715 	stw	r21,28(sp)
10006298:	dcc00515 	stw	r19,20(sp)
1000629c:	dc400315 	stw	r17,12(sp)
100062a0:	dc000215 	stw	r16,8(sp)
100062a4:	2025883a 	mov	r18,r4
100062a8:	2829883a 	mov	r20,r5
100062ac:	d8800115 	stw	r2,4(sp)
100062b0:	05bfffc4 	movi	r22,-1
100062b4:	d8800017 	ldw	r2,0(sp)
100062b8:	14c05217 	ldw	r19,328(r2)
100062bc:	98001d26 	beq	r19,zero,10006334 <__call_exitprocs+0xd0>
100062c0:	dd400117 	ldw	r21,4(sp)
100062c4:	98800117 	ldw	r2,4(r19)
100062c8:	173fffc4 	addi	fp,r2,-1
100062cc:	e0000d16 	blt	fp,zero,10006304 <__call_exitprocs+0xa0>
100062d0:	14000044 	addi	r16,r2,1
100062d4:	8421883a 	add	r16,r16,r16
100062d8:	8421883a 	add	r16,r16,r16
100062dc:	84402004 	addi	r17,r16,128
100062e0:	9c63883a 	add	r17,r19,r17
100062e4:	9c21883a 	add	r16,r19,r16
100062e8:	a0001e26 	beq	r20,zero,10006364 <__call_exitprocs+0x100>
100062ec:	80804017 	ldw	r2,256(r16)
100062f0:	15001c26 	beq	r2,r20,10006364 <__call_exitprocs+0x100>
100062f4:	e73fffc4 	addi	fp,fp,-1
100062f8:	843fff04 	addi	r16,r16,-4
100062fc:	8c7fff04 	addi	r17,r17,-4
10006300:	e5bff91e 	bne	fp,r22,100062e8 <__alt_data_end+0xf80062e8>
10006304:	00800034 	movhi	r2,0
10006308:	10800004 	addi	r2,r2,0
1000630c:	10000926 	beq	r2,zero,10006334 <__call_exitprocs+0xd0>
10006310:	98800117 	ldw	r2,4(r19)
10006314:	1000311e 	bne	r2,zero,100063dc <__call_exitprocs+0x178>
10006318:	98800017 	ldw	r2,0(r19)
1000631c:	10003426 	beq	r2,zero,100063f0 <__call_exitprocs+0x18c>
10006320:	9809883a 	mov	r4,r19
10006324:	a8800015 	stw	r2,0(r21)
10006328:	00000000 	call	10000000 <__reset>
1000632c:	acc00017 	ldw	r19,0(r21)
10006330:	983fe41e 	bne	r19,zero,100062c4 <__alt_data_end+0xf80062c4>
10006334:	dfc00b17 	ldw	ra,44(sp)
10006338:	df000a17 	ldw	fp,40(sp)
1000633c:	ddc00917 	ldw	r23,36(sp)
10006340:	dd800817 	ldw	r22,32(sp)
10006344:	dd400717 	ldw	r21,28(sp)
10006348:	dd000617 	ldw	r20,24(sp)
1000634c:	dcc00517 	ldw	r19,20(sp)
10006350:	dc800417 	ldw	r18,16(sp)
10006354:	dc400317 	ldw	r17,12(sp)
10006358:	dc000217 	ldw	r16,8(sp)
1000635c:	dec00c04 	addi	sp,sp,48
10006360:	f800283a 	ret
10006364:	98800117 	ldw	r2,4(r19)
10006368:	80c00017 	ldw	r3,0(r16)
1000636c:	10bfffc4 	addi	r2,r2,-1
10006370:	17001526 	beq	r2,fp,100063c8 <__call_exitprocs+0x164>
10006374:	80000015 	stw	zero,0(r16)
10006378:	183fde26 	beq	r3,zero,100062f4 <__alt_data_end+0xf80062f4>
1000637c:	00800044 	movi	r2,1
10006380:	1708983a 	sll	r4,r2,fp
10006384:	98806217 	ldw	r2,392(r19)
10006388:	9dc00117 	ldw	r23,4(r19)
1000638c:	2084703a 	and	r2,r4,r2
10006390:	1000061e 	bne	r2,zero,100063ac <__call_exitprocs+0x148>
10006394:	183ee83a 	callr	r3
10006398:	98800117 	ldw	r2,4(r19)
1000639c:	15ffc51e 	bne	r2,r23,100062b4 <__alt_data_end+0xf80062b4>
100063a0:	a8800017 	ldw	r2,0(r21)
100063a4:	14ffd326 	beq	r2,r19,100062f4 <__alt_data_end+0xf80062f4>
100063a8:	003fc206 	br	100062b4 <__alt_data_end+0xf80062b4>
100063ac:	98806317 	ldw	r2,396(r19)
100063b0:	2084703a 	and	r2,r4,r2
100063b4:	1000061e 	bne	r2,zero,100063d0 <__call_exitprocs+0x16c>
100063b8:	89400017 	ldw	r5,0(r17)
100063bc:	9009883a 	mov	r4,r18
100063c0:	183ee83a 	callr	r3
100063c4:	003ff406 	br	10006398 <__alt_data_end+0xf8006398>
100063c8:	9f000115 	stw	fp,4(r19)
100063cc:	003fea06 	br	10006378 <__alt_data_end+0xf8006378>
100063d0:	89000017 	ldw	r4,0(r17)
100063d4:	183ee83a 	callr	r3
100063d8:	003fef06 	br	10006398 <__alt_data_end+0xf8006398>
100063dc:	98800017 	ldw	r2,0(r19)
100063e0:	982b883a 	mov	r21,r19
100063e4:	1027883a 	mov	r19,r2
100063e8:	983fb61e 	bne	r19,zero,100062c4 <__alt_data_end+0xf80062c4>
100063ec:	003fd106 	br	10006334 <__alt_data_end+0xf8006334>
100063f0:	0005883a 	mov	r2,zero
100063f4:	003ffa06 	br	100063e0 <__alt_data_end+0xf80063e0>

100063f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100063f8:	defffd04 	addi	sp,sp,-12
100063fc:	df000215 	stw	fp,8(sp)
10006400:	df000204 	addi	fp,sp,8
10006404:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10006408:	0001883a 	nop
1000640c:	e0bfff17 	ldw	r2,-4(fp)
10006410:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10006414:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10006418:	10000226 	beq	r2,zero,10006424 <_exit+0x2c>
    ALT_SIM_FAIL();
1000641c:	002af070 	cmpltui	zero,zero,43969
10006420:	00000106 	br	10006428 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10006424:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10006428:	003fff06 	br	10006428 <__alt_data_end+0xf8006428>
