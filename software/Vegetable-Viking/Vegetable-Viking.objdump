
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000062f4 memsz 0x000062f4 flags r-x
    LOAD off    0x00007314 vaddr 0x10006314 paddr 0x1000796c align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x00008fc4 vaddr 0x10008fc4 paddr 0x10008fc4 align 2**12
         filesz 0x00000000 memsz 0x00000368 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005fb0  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  100061dc  100061dc  000071dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  10006314  1000796c  00007314  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000368  10008fc4  10008fc4  00008fc4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000896c  2**0
                  CONTENTS
  7 .sdram        00000000  1000932c  1000932c  0000896c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000896c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000710  00000000  00000000  00008990  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a214  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003627  00000000  00000000  000132b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003c49  00000000  00000000  000168db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ef8  00000000  00000000  0001a524  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002176  00000000  00000000  0001b41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005fe9  00000000  00000000  0001d592  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0002357c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000008c0  00000000  00000000  00023590  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00025f9a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00025f9d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00025fa9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00025faa  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00025fab  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00025faf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00025fb3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00025fb7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00025fc2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00025fcd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00025fd8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00025fe3  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00025ffd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  0002a444  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
100061dc l    d  .rodata	00000000 .rodata
10006314 l    d  .rwdata	00000000 .rwdata
10008fc4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1000932c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002974 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
10006314 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
10003f78 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
100040d4 l     F .text	00000038 alt_dev_reg
10006738 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100043b0 l     F .text	00000204 altera_avalon_jtag_uart_irq
100045b4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
10004d14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10004e58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10004e84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000531c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10005474 l     F .text	00000050 alt_get_errno
100054c4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10009024 g     O .bss	00000004 alt_instruction_exception_handler
10001bc8 g     F .text	00000068 convertDecimalToBinary
1000405c g     F .text	00000078 alt_main
1000922c g     O .bss	00000100 alt_irq
1000796c g       *ABS*	00000000 __flash_rwdata_start
10008fc4 g     O .bss	00000004 elapsedTime
10000d4c g     F .text	000003d8 spawningEngine
10005934 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10008fc8 g     O .bss	00000004 lastPhysixed
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009028 g     O .bss	00000004 errno
10009010 g     O .bss	00000004 alt_argv
1000f940 g       *ABS*	00000000 _gp
10008fcc g     O .bss	00000004 yCursor
100077c0 g     O .rwdata	00000180 alt_fd_list
10005954 g     F .text	00000090 alt_find_dev
10005d30 g     F .text	00000138 memcpy
10001124 g     F .text	00000398 slicingEngine
10003cbc g     F .text	000000d0 .hidden __floatsidf
100053fc g     F .text	00000078 alt_io_redirect
10008fd0 g     O .bss	00000004 xCursor
100061dc g       *ABS*	00000000 __DTOR_END__
10005bcc g     F .text	0000009c alt_exception_cause_generated_bad_addr
100047b0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002a90 g     F .text	00000008 .hidden __udivsi3
10008fd4 g     O .bss	00000004 changeTimer
10008fd8 g     O .bss	00000004 cursorClicked
10007958 g     O .rwdata	00000004 alt_max_fd
10002ac8 g     F .text	0000089c .hidden __adddf3
10002358 g     F .text	0000061c .hidden __umoddi3
10007940 g     O .rwdata	00000004 _global_impure_ptr
1000932c g       *ABS*	00000000 __bss_end
1000522c g     F .text	000000f0 alt_iic_isr_register
1000902c g     O .bss	00000200 veggieObject
10005830 g     F .text	00000104 alt_tick
10008fdc g     O .bss	00000004 cursorStreak
10001d18 g     F .text	00000640 .hidden __udivdi3
10008fe0 g     O .bss	00000004 lastSpawned
100051e0 g     F .text	0000004c alt_ic_irq_enabled
10005798 g     F .text	00000098 alt_alarm_stop
100007f8 g     F .text	00000224 statusEngine
10009018 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10007798 g     O .rwdata	00000028 alt_dev_null
10001ab0 g     F .text	00000118 port2Unpackager
10008fe4 g     O .bss	00000004 spawnOn
10004e3c g     F .text	0000001c alt_dcache_flush_all
10003c34 g     F .text	00000088 .hidden __fixdfsi
1000796c g       *ABS*	00000000 __ram_rwdata_end
10007950 g     O .rwdata	00000008 alt_dev_list
10006314 g       *ABS*	00000000 __ram_rodata_end
10008fe8 g     O .bss	00000004 lastDisintegrated
10002a98 g     F .text	00000008 .hidden __umodsi3
1000932c g       *ABS*	00000000 end
10008fec g     O .bss	00000004 nextState
10008ff0 g     O .bss	00000004 key1
100042ec g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
100061dc g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003d8c g     F .text	00000064 .hidden __clzsi2
100049bc g     F .text	00000218 altera_avalon_jtag_uart_write
10006014 g     F .text	00000194 __call_exitprocs
1000022c g     F .text	0000003c _start
1000901c g     O .bss	00000004 _alt_tick_rate
10003e08 g     F .text	00000064 rand
10009020 g     O .bss	00000004 _alt_nticks
10004140 g     F .text	00000048 alt_sys_init
10005f00 g     F .text	00000114 __register_exitproc
1000465c g     F .text	00000068 altera_avalon_jtag_uart_close
10002aa0 g     F .text	00000028 .hidden __mulsi3
10006314 g       *ABS*	00000000 __ram_rwdata_start
100061dc g       *ABS*	00000000 __ram_rodata_start
10004188 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10005af8 g     F .text	000000d4 alt_get_fd
10005cb4 g     F .text	0000007c memcmp
10004248 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000932c g       *ABS*	00000000 __alt_stack_base
10004298 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100059e4 g     F .text	00000114 alt_find_file
10004ed4 g     F .text	000000a4 alt_dev_llist_insert
10008fc4 g       *ABS*	00000000 __bss_start
10000268 g     F .text	00000590 main
10009014 g     O .bss	00000004 alt_envp
100041e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10003df0 g     F .text	00000018 srand
10001c30 g     F .text	000000e8 convertBinaryToDecimal
1000795c g     O .rwdata	00000004 alt_errno
100029e0 g     F .text	00000054 .hidden __divsi3
100061dc g       *ABS*	00000000 __CTOR_END__
100061dc g       *ABS*	00000000 __flash_rodata_start
100061dc g       *ABS*	00000000 __DTOR_LIST__
10008ff4 g     O .bss	00000004 key3
1000410c g     F .text	00000034 alt_irq_init
10005718 g     F .text	00000080 alt_release_fd
100061dc g     O .rodata	00000100 .hidden __clz_tab
10005c68 g     F .text	00000014 atexit
10008ff8 g     O .bss	00000004 nextSpawnTime
10001a08 g     F .text	000000a8 messagePackager
10007944 g     O .rwdata	00000004 _impure_ptr
1000900c g     O .bss	00000004 alt_argc
10004fd4 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10007948 g     O .rwdata	00000008 alt_fs_list
100014bc g     F .text	000001dc disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000504c g     F .text	00000050 alt_ic_isr_register
1000796c g       *ABS*	00000000 _edata
1000932c g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
100046c4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10008ffc g     O .bss	00000004 key2
1000513c g     F .text	000000a4 alt_ic_irq_disable
10009000 g     O .bss	00000004 physixOn
10005c7c g     F .text	00000038 exit
10009004 g     O .bss	00000004 roundStart
10000a1c g     F .text	00000330 physicsEngine
10002a34 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
100061a8 g     F .text	00000034 _exit
10004bd4 g     F .text	00000140 alt_alarm_start
10003e6c g     F .text	0000010c .hidden __muldi3
10005e68 g     F .text	00000098 strlen
100055b8 g     F .text	00000160 open
10005030 g     F .text	0000001c alt_icache_flush_all
10001698 g     F .text	00000370 FPGAcommunicator
10007960 g     O .rwdata	00000004 alt_priority_mask
10009008 g     O .bss	00000004 comboFruit
1000509c g     F .text	000000a0 alt_ic_irq_enable
10003364 g     F .text	000008d0 .hidden __subdf3
10007964 g     O .rwdata	00000008 alt_alarm_list
10004f78 g     F .text	0000005c _do_ctors
10004d64 g     F .text	000000d8 close
10003fdc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a48b04 	addi	r2,r2,-28116
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a48b04 	addi	r2,r2,-28116
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a5b917 	ldw	r2,-26908(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a5b917 	ldw	r2,-26908(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
10000238:	d6be5014 	ori	gp,gp,63808
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10a3f114 	ori	r2,r2,36804

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18e4cb14 	ori	r3,r3,37676

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	0003fdc0 	call	10003fdc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000405c0 	call	1000405c <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// can you even read

// our main function!!! this is where the magic happens
int main()
{
10000268:	defffb04 	addi	sp,sp,-20
1000026c:	dfc00415 	stw	ra,16(sp)
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
	// put in our seed
	srand(*to_sw_port0);
10000278:	00804c04 	movi	r2,304
1000027c:	10800017 	ldw	r2,0(r2)
10000280:	1009883a 	mov	r4,r2
10000284:	0003df00 	call	10003df0 <srand>

	// assign these to 0 at start
	comboFruit = 0;
10000288:	d025b215 	stw	zero,-26936(gp)
	physixOn = 0;
1000028c:	d025b015 	stw	zero,-26944(gp)
	spawnOn = 0;
10000290:	d025a915 	stw	zero,-26972(gp)

	// variable for delayed state change
	nextState = 0;
10000294:	d025ab15 	stw	zero,-26964(gp)

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000298:	e03ffd15 	stw	zero,-12(fp)
1000029c:	00002e06 	br	10000358 <main+0xf0>
	{
		veggieObject[i].xPosition = 0;
100002a0:	00840074 	movhi	r2,4097
100002a4:	10a40b04 	addi	r2,r2,-28628
100002a8:	e0fffd17 	ldw	r3,-12(fp)
100002ac:	1806917a 	slli	r3,r3,5
100002b0:	10c5883a 	add	r2,r2,r3
100002b4:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002b8:	00840074 	movhi	r2,4097
100002bc:	10a40b04 	addi	r2,r2,-28628
100002c0:	e0fffd17 	ldw	r3,-12(fp)
100002c4:	1806917a 	slli	r3,r3,5
100002c8:	10c5883a 	add	r2,r2,r3
100002cc:	10800104 	addi	r2,r2,4
100002d0:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002d4:	00840074 	movhi	r2,4097
100002d8:	10a40b04 	addi	r2,r2,-28628
100002dc:	e0fffd17 	ldw	r3,-12(fp)
100002e0:	1806917a 	slli	r3,r3,5
100002e4:	10c5883a 	add	r2,r2,r3
100002e8:	10800204 	addi	r2,r2,8
100002ec:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
100002f0:	00840074 	movhi	r2,4097
100002f4:	10a40b04 	addi	r2,r2,-28628
100002f8:	e0fffd17 	ldw	r3,-12(fp)
100002fc:	1806917a 	slli	r3,r3,5
10000300:	10c5883a 	add	r2,r2,r3
10000304:	10800304 	addi	r2,r2,12
10000308:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
1000030c:	00840074 	movhi	r2,4097
10000310:	10a40b04 	addi	r2,r2,-28628
10000314:	e0fffd17 	ldw	r3,-12(fp)
10000318:	1806917a 	slli	r3,r3,5
1000031c:	10c5883a 	add	r2,r2,r3
10000320:	10800404 	addi	r2,r2,16
10000324:	10000015 	stw	zero,0(r2)
10000328:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000032c:	00840074 	movhi	r2,4097
10000330:	10a40b04 	addi	r2,r2,-28628
10000334:	e0fffd17 	ldw	r3,-12(fp)
10000338:	1806917a 	slli	r3,r3,5
1000033c:	10c5883a 	add	r2,r2,r3
10000340:	10800604 	addi	r2,r2,24
10000344:	10000015 	stw	zero,0(r2)
10000348:	10000115 	stw	zero,4(r2)
	// variable for delayed state change
	nextState = 0;

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
1000034c:	e0bffd17 	ldw	r2,-12(fp)
10000350:	10800044 	addi	r2,r2,1
10000354:	e0bffd15 	stw	r2,-12(fp)
10000358:	e0bffd17 	ldw	r2,-12(fp)
1000035c:	10800410 	cmplti	r2,r2,16
10000360:	103fcf1e 	bne	r2,zero,100002a0 <__alt_data_end+0xf80002a0>
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}

	// TEST STUFF
	veggieObject[0].xPosition = 0;
10000364:	00840074 	movhi	r2,4097
10000368:	10a40b04 	addi	r2,r2,-28628
1000036c:	10000015 	stw	zero,0(r2)
	veggieObject[0].yPosition = 0;
10000370:	00840074 	movhi	r2,4097
10000374:	10a40b04 	addi	r2,r2,-28628
10000378:	10000115 	stw	zero,4(r2)
	veggieObject[0].objectType = 0;
1000037c:	00840074 	movhi	r2,4097
10000380:	10a40b04 	addi	r2,r2,-28628
10000384:	10000215 	stw	zero,8(r2)
	veggieObject[0].objectState = 0;
10000388:	00840074 	movhi	r2,4097
1000038c:	10a40b04 	addi	r2,r2,-28628
10000390:	10000315 	stw	zero,12(r2)

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
10000394:	00804804 	movi	r2,288
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe15 	stw	r2,-8(fp)
	unsigned long processorTime = processorStart;
100003a0:	e0bffe17 	ldw	r2,-8(fp)
100003a4:	e0bfff15 	stw	r2,-4(fp)
	lastPhysixed = processorTime;
100003a8:	e0bfff17 	ldw	r2,-4(fp)
100003ac:	d0a5a215 	stw	r2,-27000(gp)
	lastSpawned = processorTime;
100003b0:	e0bfff17 	ldw	r2,-4(fp)
100003b4:	d0a5a815 	stw	r2,-26976(gp)
	nextSpawnTime = processorTime;
100003b8:	e0bfff17 	ldw	r2,-4(fp)
100003bc:	d0a5ae15 	stw	r2,-26952(gp)
	lastDisintegrated = processorTime;
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	d0a5aa15 	stw	r2,-26968(gp)
	roundStart = 0;
100003c8:	d025b115 	stw	zero,-26940(gp)

//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100003cc:	00806004 	movi	r2,384
100003d0:	10800017 	ldw	r2,0(r2)
100003d4:	d0a5a415 	stw	r2,-26992(gp)
	yCursor = *to_sw_port4;
100003d8:	00805c04 	movi	r2,368
100003dc:	10800017 	ldw	r2,0(r2)
100003e0:	d0a5a315 	stw	r2,-26996(gp)
	port2Unpackager();
100003e4:	0001ab00 	call	10001ab0 <port2Unpackager>

	// initialize our 3 fruits on screen for menu
	veggieObject[1].xPosition = 30;
100003e8:	00840074 	movhi	r2,4097
100003ec:	10a40b04 	addi	r2,r2,-28628
100003f0:	00c00784 	movi	r3,30
100003f4:	10c00815 	stw	r3,32(r2)
	veggieObject[1].yPosition = 100;
100003f8:	00840074 	movhi	r2,4097
100003fc:	10a40b04 	addi	r2,r2,-28628
10000400:	00c01904 	movi	r3,100
10000404:	10c00915 	stw	r3,36(r2)
	veggieObject[1].objectState = 1;
10000408:	00840074 	movhi	r2,4097
1000040c:	10a40b04 	addi	r2,r2,-28628
10000410:	00c00044 	movi	r3,1
10000414:	10c00b15 	stw	r3,44(r2)
	veggieObject[1].xVelocity = 0;
10000418:	00840074 	movhi	r2,4097
1000041c:	10a40b04 	addi	r2,r2,-28628
10000420:	10000c15 	stw	zero,48(r2)
10000424:	10000d15 	stw	zero,52(r2)
	veggieObject[1].yVelocity = 0;
10000428:	00840074 	movhi	r2,4097
1000042c:	10a40b04 	addi	r2,r2,-28628
10000430:	10000e15 	stw	zero,56(r2)
10000434:	10000f15 	stw	zero,60(r2)

	veggieObject[2].xPosition = 180;
10000438:	00840074 	movhi	r2,4097
1000043c:	10a40b04 	addi	r2,r2,-28628
10000440:	00c02d04 	movi	r3,180
10000444:	10c01015 	stw	r3,64(r2)
	veggieObject[2].yPosition = 320;
10000448:	00840074 	movhi	r2,4097
1000044c:	10a40b04 	addi	r2,r2,-28628
10000450:	00c05004 	movi	r3,320
10000454:	10c01115 	stw	r3,68(r2)
	veggieObject[2].objectState = 1;
10000458:	00840074 	movhi	r2,4097
1000045c:	10a40b04 	addi	r2,r2,-28628
10000460:	00c00044 	movi	r3,1
10000464:	10c01315 	stw	r3,76(r2)
	veggieObject[2].xVelocity = 0;
10000468:	00840074 	movhi	r2,4097
1000046c:	10a40b04 	addi	r2,r2,-28628
10000470:	10001415 	stw	zero,80(r2)
10000474:	10001515 	stw	zero,84(r2)
	veggieObject[2].yVelocity = 0;
10000478:	00840074 	movhi	r2,4097
1000047c:	10a40b04 	addi	r2,r2,-28628
10000480:	10001615 	stw	zero,88(r2)
10000484:	10001715 	stw	zero,92(r2)

	veggieObject[3].xPosition = 540;
10000488:	00840074 	movhi	r2,4097
1000048c:	10a40b04 	addi	r2,r2,-28628
10000490:	00c08704 	movi	r3,540
10000494:	10c01815 	stw	r3,96(r2)
	veggieObject[3].yPosition = 220;
10000498:	00840074 	movhi	r2,4097
1000049c:	10a40b04 	addi	r2,r2,-28628
100004a0:	00c03704 	movi	r3,220
100004a4:	10c01915 	stw	r3,100(r2)
	veggieObject[3].objectState = 1;
100004a8:	00840074 	movhi	r2,4097
100004ac:	10a40b04 	addi	r2,r2,-28628
100004b0:	00c00044 	movi	r3,1
100004b4:	10c01b15 	stw	r3,108(r2)
	veggieObject[3].xVelocity = 0;
100004b8:	00840074 	movhi	r2,4097
100004bc:	10a40b04 	addi	r2,r2,-28628
100004c0:	10001c15 	stw	zero,112(r2)
100004c4:	10001d15 	stw	zero,116(r2)
	veggieObject[3].yVelocity = 0;
100004c8:	00840074 	movhi	r2,4097
100004cc:	10a40b04 	addi	r2,r2,-28628
100004d0:	10001e15 	stw	zero,120(r2)
100004d4:	10001f15 	stw	zero,124(r2)

	while(1)	// game while loop
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
100004d8:	00804804 	movi	r2,288
100004dc:	10800017 	ldw	r2,0(r2)
100004e0:	e0bfff15 	stw	r2,-4(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
100004e4:	e0ffff17 	ldw	r3,-4(fp)
100004e8:	e0bffe17 	ldw	r2,-8(fp)
100004ec:	1885c83a 	sub	r2,r3,r2
100004f0:	d0a5a115 	stw	r2,-27004(gp)
//		printf("elapsed time is %lu \n", elapsedTime);

		if(nextState == -1)
100004f4:	d0a5ab17 	ldw	r2,-26964(gp)
100004f8:	10bfffd8 	cmpnei	r2,r2,-1
100004fc:	1000021e 	bne	r2,zero,10000508 <main+0x2a0>
		{
			changeTimer = elapsedTime;
10000500:	d0a5a117 	ldw	r2,-27004(gp)
10000504:	d0a5a515 	stw	r2,-26988(gp)
		}

		statusEngine();	// keep track of our game state
10000508:	00007f80 	call	100007f8 <statusEngine>

		// constantly doing physics
		if (((elapsedTime - lastPhysixed) > 5) && (physixOn))
1000050c:	d0e5a117 	ldw	r3,-27004(gp)
10000510:	d0a5a217 	ldw	r2,-27000(gp)
10000514:	1885c83a 	sub	r2,r3,r2
10000518:	108001b0 	cmpltui	r2,r2,6
1000051c:	1000051e 	bne	r2,zero,10000534 <main+0x2cc>
10000520:	d0a5b017 	ldw	r2,-26944(gp)
10000524:	10000326 	beq	r2,zero,10000534 <main+0x2cc>
		{
			// greater than .05 seconds pass, and we're in a game playing state
			physicsEngine();	// call our physics engine!
10000528:	0000a1c0 	call	10000a1c <physicsEngine>
			lastPhysixed = elapsedTime;
1000052c:	d0a5a117 	ldw	r2,-27004(gp)
10000530:	d0a5a215 	stw	r2,-27000(gp)
		}

		// spawning objects
		if (((elapsedTime - lastSpawned) > nextSpawnTime) && (spawnOn))	// greater than random time
10000534:	d0e5a117 	ldw	r3,-27004(gp)
10000538:	d0a5a817 	ldw	r2,-26976(gp)
1000053c:	1885c83a 	sub	r2,r3,r2
10000540:	d0e5ae17 	ldw	r3,-26952(gp)
10000544:	18803b2e 	bgeu	r3,r2,10000634 <main+0x3cc>
10000548:	d0a5a917 	ldw	r2,-26972(gp)
1000054c:	10003926 	beq	r2,zero,10000634 <main+0x3cc>
		{
			// determine next spawn time based on level
			if(veggieObject[0].objectState == 1)	// easy mode spawn
10000550:	00840074 	movhi	r2,4097
10000554:	10a40b04 	addi	r2,r2,-28628
10000558:	10800317 	ldw	r2,12(r2)
1000055c:	10800058 	cmpnei	r2,r2,1
10000560:	10000d1e 	bne	r2,zero,10000598 <main+0x330>
			{
				spawningEngine(rand() % 5);
10000564:	0003e080 	call	10003e08 <rand>
10000568:	1009883a 	mov	r4,r2
1000056c:	01400144 	movi	r5,5
10000570:	0002a340 	call	10002a34 <__modsi3>
10000574:	1009883a 	mov	r4,r2
10000578:	0000d4c0 	call	10000d4c <spawningEngine>
				nextSpawnTime = (rand() % 25) + 50;
1000057c:	0003e080 	call	10003e08 <rand>
10000580:	1009883a 	mov	r4,r2
10000584:	01400644 	movi	r5,25
10000588:	0002a340 	call	10002a34 <__modsi3>
1000058c:	10800c84 	addi	r2,r2,50
10000590:	d0a5ae15 	stw	r2,-26952(gp)
10000594:	00002506 	br	1000062c <main+0x3c4>
			}
			else if(veggieObject[0].objectState == 2)	// medium mode
10000598:	00840074 	movhi	r2,4097
1000059c:	10a40b04 	addi	r2,r2,-28628
100005a0:	10800317 	ldw	r2,12(r2)
100005a4:	10800098 	cmpnei	r2,r2,2
100005a8:	10000d1e 	bne	r2,zero,100005e0 <main+0x378>
			{
				spawningEngine(rand() % 7);
100005ac:	0003e080 	call	10003e08 <rand>
100005b0:	1009883a 	mov	r4,r2
100005b4:	014001c4 	movi	r5,7
100005b8:	0002a340 	call	10002a34 <__modsi3>
100005bc:	1009883a 	mov	r4,r2
100005c0:	0000d4c0 	call	10000d4c <spawningEngine>
				nextSpawnTime = (rand() % 75) + 25;
100005c4:	0003e080 	call	10003e08 <rand>
100005c8:	1009883a 	mov	r4,r2
100005cc:	014012c4 	movi	r5,75
100005d0:	0002a340 	call	10002a34 <__modsi3>
100005d4:	10800644 	addi	r2,r2,25
100005d8:	d0a5ae15 	stw	r2,-26952(gp)
100005dc:	00001306 	br	1000062c <main+0x3c4>
			}
			else if(veggieObject[0].objectState == 3)	// easy mode spawn
100005e0:	00840074 	movhi	r2,4097
100005e4:	10a40b04 	addi	r2,r2,-28628
100005e8:	10800317 	ldw	r2,12(r2)
100005ec:	108000d8 	cmpnei	r2,r2,3
100005f0:	10000c1e 	bne	r2,zero,10000624 <main+0x3bc>
			{
				spawningEngine(rand() % 9);
100005f4:	0003e080 	call	10003e08 <rand>
100005f8:	1009883a 	mov	r4,r2
100005fc:	01400244 	movi	r5,9
10000600:	0002a340 	call	10002a34 <__modsi3>
10000604:	1009883a 	mov	r4,r2
10000608:	0000d4c0 	call	10000d4c <spawningEngine>
				nextSpawnTime = (rand() % 100);		// hard mode
1000060c:	0003e080 	call	10003e08 <rand>
10000610:	1009883a 	mov	r4,r2
10000614:	01401904 	movi	r5,100
10000618:	0002a340 	call	10002a34 <__modsi3>
1000061c:	d0a5ae15 	stw	r2,-26952(gp)
10000620:	00000206 	br	1000062c <main+0x3c4>
			}
			else
			{
				nextSpawnTime = 200;	// we're in another state. check back soon!
10000624:	00803204 	movi	r2,200
10000628:	d0a5ae15 	stw	r2,-26952(gp)
			}
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
			lastSpawned = elapsedTime;
1000062c:	d0a5a117 	ldw	r2,-27004(gp)
10000630:	d0a5a815 	stw	r2,-26976(gp)
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .1 sec
10000634:	d0e5a117 	ldw	r3,-27004(gp)
10000638:	d0a5aa17 	ldw	r2,-26968(gp)
1000063c:	1885c83a 	sub	r2,r3,r2
10000640:	10800570 	cmpltui	r2,r2,21
10000644:	1000031e 	bne	r2,zero,10000654 <main+0x3ec>
		{
			disintegrateEngine();	// call our spawning engine!
10000648:	00014bc0 	call	100014bc <disintegrateEngine>
			lastDisintegrated = elapsedTime;
1000064c:	d0a5a117 	ldw	r2,-27004(gp)
10000650:	d0a5aa15 	stw	r2,-26968(gp)
		}

		if ((nextState != -1) && (elapsedTime - changeTimer > 100))
10000654:	d0a5ab17 	ldw	r2,-26964(gp)
10000658:	10bfffe0 	cmpeqi	r2,r2,-1
1000065c:	1000621e 	bne	r2,zero,100007e8 <main+0x580>
10000660:	d0e5a117 	ldw	r3,-27004(gp)
10000664:	d0a5a517 	ldw	r2,-26988(gp)
10000668:	1885c83a 	sub	r2,r3,r2
1000066c:	10801970 	cmpltui	r2,r2,101
10000670:	10005d1e 	bne	r2,zero,100007e8 <main+0x580>
		{
//			printf("we're here");
			for(i=4; i<10; i++)
10000674:	00800104 	movi	r2,4
10000678:	e0bffd15 	stw	r2,-12(fp)
1000067c:	00002e06 	br	10000738 <main+0x4d0>
			{
				veggieObject[i].xPosition = 0;
10000680:	00840074 	movhi	r2,4097
10000684:	10a40b04 	addi	r2,r2,-28628
10000688:	e0fffd17 	ldw	r3,-12(fp)
1000068c:	1806917a 	slli	r3,r3,5
10000690:	10c5883a 	add	r2,r2,r3
10000694:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000698:	00840074 	movhi	r2,4097
1000069c:	10a40b04 	addi	r2,r2,-28628
100006a0:	e0fffd17 	ldw	r3,-12(fp)
100006a4:	1806917a 	slli	r3,r3,5
100006a8:	10c5883a 	add	r2,r2,r3
100006ac:	10800104 	addi	r2,r2,4
100006b0:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
100006b4:	00840074 	movhi	r2,4097
100006b8:	10a40b04 	addi	r2,r2,-28628
100006bc:	e0fffd17 	ldw	r3,-12(fp)
100006c0:	1806917a 	slli	r3,r3,5
100006c4:	10c5883a 	add	r2,r2,r3
100006c8:	10800204 	addi	r2,r2,8
100006cc:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
100006d0:	00840074 	movhi	r2,4097
100006d4:	10a40b04 	addi	r2,r2,-28628
100006d8:	e0fffd17 	ldw	r3,-12(fp)
100006dc:	1806917a 	slli	r3,r3,5
100006e0:	10c5883a 	add	r2,r2,r3
100006e4:	10800304 	addi	r2,r2,12
100006e8:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
100006ec:	00840074 	movhi	r2,4097
100006f0:	10a40b04 	addi	r2,r2,-28628
100006f4:	e0fffd17 	ldw	r3,-12(fp)
100006f8:	1806917a 	slli	r3,r3,5
100006fc:	10c5883a 	add	r2,r2,r3
10000700:	10800404 	addi	r2,r2,16
10000704:	10000015 	stw	zero,0(r2)
10000708:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
1000070c:	00840074 	movhi	r2,4097
10000710:	10a40b04 	addi	r2,r2,-28628
10000714:	e0fffd17 	ldw	r3,-12(fp)
10000718:	1806917a 	slli	r3,r3,5
1000071c:	10c5883a 	add	r2,r2,r3
10000720:	10800604 	addi	r2,r2,24
10000724:	10000015 	stw	zero,0(r2)
10000728:	10000115 	stw	zero,4(r2)
		}

		if ((nextState != -1) && (elapsedTime - changeTimer > 100))
		{
//			printf("we're here");
			for(i=4; i<10; i++)
1000072c:	e0bffd17 	ldw	r2,-12(fp)
10000730:	10800044 	addi	r2,r2,1
10000734:	e0bffd15 	stw	r2,-12(fp)
10000738:	e0bffd17 	ldw	r2,-12(fp)
1000073c:	10800290 	cmplti	r2,r2,10
10000740:	103fcf1e 	bne	r2,zero,10000680 <__alt_data_end+0xf8000680>
				veggieObject[i].objectType = 0;
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}
			veggieObject[0].objectState = nextState;	// move to next state
10000744:	d0e5ab17 	ldw	r3,-26964(gp)
10000748:	00840074 	movhi	r2,4097
1000074c:	10a40b04 	addi	r2,r2,-28628
10000750:	10c00315 	stw	r3,12(r2)
			physixOn = 0;
10000754:	d025b015 	stw	zero,-26944(gp)
			spawnOn = 0;
10000758:	d025a915 	stw	zero,-26972(gp)
			if((nextState == 4) || (nextState == 5))
1000075c:	d0a5ab17 	ldw	r2,-26964(gp)
10000760:	10800120 	cmpeqi	r2,r2,4
10000764:	1000031e 	bne	r2,zero,10000774 <main+0x50c>
10000768:	d0a5ab17 	ldw	r2,-26964(gp)
1000076c:	10800158 	cmpnei	r2,r2,5
10000770:	10001b1e 	bne	r2,zero,100007e0 <main+0x578>
			{
				veggieObject[4].xPosition = 230;
10000774:	00840074 	movhi	r2,4097
10000778:	10a40b04 	addi	r2,r2,-28628
1000077c:	00c03984 	movi	r3,230
10000780:	10c02015 	stw	r3,128(r2)
				veggieObject[4].yPosition = 150;
10000784:	00840074 	movhi	r2,4097
10000788:	10a40b04 	addi	r2,r2,-28628
1000078c:	00c02584 	movi	r3,150
10000790:	10c02115 	stw	r3,132(r2)
				veggieObject[4].objectState = 1;
10000794:	00840074 	movhi	r2,4097
10000798:	10a40b04 	addi	r2,r2,-28628
1000079c:	00c00044 	movi	r3,1
100007a0:	10c02315 	stw	r3,140(r2)
				veggieObject[4].xVelocity = 0;
100007a4:	00840074 	movhi	r2,4097
100007a8:	10a40b04 	addi	r2,r2,-28628
100007ac:	10002415 	stw	zero,144(r2)
100007b0:	10002515 	stw	zero,148(r2)
				veggieObject[4].yVelocity = 0;
100007b4:	00840074 	movhi	r2,4097
100007b8:	10a40b04 	addi	r2,r2,-28628
100007bc:	10002615 	stw	zero,152(r2)
100007c0:	10002715 	stw	zero,156(r2)
				physixOn = 0;
100007c4:	d025b015 	stw	zero,-26944(gp)
				if(nextState == 4)
100007c8:	d0a5ab17 	ldw	r2,-26964(gp)
100007cc:	10800118 	cmpnei	r2,r2,4
100007d0:	1000031e 	bne	r2,zero,100007e0 <main+0x578>
				{
					veggieObject[0].yPosition = 0;
100007d4:	00840074 	movhi	r2,4097
100007d8:	10a40b04 	addi	r2,r2,-28628
100007dc:	10000115 	stw	zero,4(r2)
				}
			}
			nextState = -1;
100007e0:	00bfffc4 	movi	r2,-1
100007e4:	d0a5ab15 	stw	r2,-26964(gp)
		}
		slicingEngine();	// check if we need to slice anything
100007e8:	00011240 	call	10001124 <slicingEngine>
		port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
100007ec:	0001ab00 	call	10001ab0 <port2Unpackager>
		FPGAcommunicator();	// call this every time to update the FPGA
100007f0:	00016980 	call	10001698 <FPGAcommunicator>
	}
100007f4:	003f3806 	br	100004d8 <__alt_data_end+0xf80004d8>

100007f8 <statusEngine>:
	return 0;
}

void statusEngine()
{
100007f8:	defffe04 	addi	sp,sp,-8
100007fc:	dfc00115 	stw	ra,4(sp)
10000800:	df000015 	stw	fp,0(sp)
10000804:	d839883a 	mov	fp,sp
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
10000808:	00840074 	movhi	r2,4097
1000080c:	10a40b04 	addi	r2,r2,-28628
10000810:	10800317 	ldw	r2,12(r2)
10000814:	0080320e 	bge	zero,r2,100008e0 <statusEngine+0xe8>
10000818:	00840074 	movhi	r2,4097
1000081c:	10a40b04 	addi	r2,r2,-28628
10000820:	10800317 	ldw	r2,12(r2)
10000824:	10800108 	cmpgei	r2,r2,4
10000828:	10002d1e 	bne	r2,zero,100008e0 <statusEngine+0xe8>
	{
		// this means we're currently playing a round
		physixOn = 1;
1000082c:	00800044 	movi	r2,1
10000830:	d0a5b015 	stw	r2,-26944(gp)
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
10000834:	d0e5a117 	ldw	r3,-27004(gp)
10000838:	d0a5b117 	ldw	r2,-26940(gp)
1000083c:	1885c83a 	sub	r2,r3,r2
10000840:	1009883a 	mov	r4,r2
10000844:	01401904 	movi	r5,100
10000848:	0002a900 	call	10002a90 <__udivsi3>
1000084c:	1007883a 	mov	r3,r2
10000850:	00800f04 	movi	r2,60
10000854:	10c5c83a 	sub	r2,r2,r3
10000858:	1007883a 	mov	r3,r2
1000085c:	00840074 	movhi	r2,4097
10000860:	10a40b04 	addi	r2,r2,-28628
10000864:	10c00115 	stw	r3,4(r2)
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
10000868:	00840074 	movhi	r2,4097
1000086c:	10a40b04 	addi	r2,r2,-28628
10000870:	10800117 	ldw	r2,4(r2)
10000874:	1000071e 	bne	r2,zero,10000894 <statusEngine+0x9c>
		{
			spawnOn = 0;
10000878:	d025a915 	stw	zero,-26972(gp)
			nextState = 4;	// move to GAME WON state
1000087c:	00800104 	movi	r2,4
10000880:	d0a5ab15 	stw	r2,-26964(gp)
			veggieObject[0].yPosition = 0;
10000884:	00840074 	movhi	r2,4097
10000888:	10a40b04 	addi	r2,r2,-28628
1000088c:	10000115 	stw	zero,4(r2)
10000890:	00001206 	br	100008dc <statusEngine+0xe4>

//			printf("timer over!\n");
		}
		else if(((veggieObject[0].objectState == 2) || (veggieObject[0].objectState == 3)) && (veggieObject[0].objectType <= 0))
10000894:	00840074 	movhi	r2,4097
10000898:	10a40b04 	addi	r2,r2,-28628
1000089c:	10800317 	ldw	r2,12(r2)
100008a0:	108000a0 	cmpeqi	r2,r2,2
100008a4:	1000051e 	bne	r2,zero,100008bc <statusEngine+0xc4>
100008a8:	00840074 	movhi	r2,4097
100008ac:	10a40b04 	addi	r2,r2,-28628
100008b0:	10800317 	ldw	r2,12(r2)
100008b4:	108000d8 	cmpnei	r2,r2,3
100008b8:	1000081e 	bne	r2,zero,100008dc <statusEngine+0xe4>
100008bc:	00840074 	movhi	r2,4097
100008c0:	10a40b04 	addi	r2,r2,-28628
100008c4:	10800217 	ldw	r2,8(r2)
100008c8:	00800416 	blt	zero,r2,100008dc <statusEngine+0xe4>
		{
			// this means we're game over :(
			spawnOn = 0;
100008cc:	d025a915 	stw	zero,-26972(gp)
			nextState = 5;
100008d0:	00800144 	movi	r2,5
100008d4:	d0a5ab15 	stw	r2,-26964(gp)
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
	{
		// this means we're currently playing a round
		physixOn = 1;
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
100008d8:	00004b06 	br	10000a08 <statusEngine+0x210>
100008dc:	00004a06 	br	10000a08 <statusEngine+0x210>
			nextState = 5;

//			printf("game over\n");
		}
	}
	else if(veggieObject[0].objectState == 0)	// check if we're in menu
100008e0:	00840074 	movhi	r2,4097
100008e4:	10a40b04 	addi	r2,r2,-28628
100008e8:	10800317 	ldw	r2,12(r2)
100008ec:	1000461e 	bne	r2,zero,10000a08 <statusEngine+0x210>
	{
		physixOn = 0;
100008f0:	d025b015 	stw	zero,-26944(gp)
		veggieObject[0].xPosition = 0;
100008f4:	00840074 	movhi	r2,4097
100008f8:	10a40b04 	addi	r2,r2,-28628
100008fc:	10000015 	stw	zero,0(r2)
		veggieObject[0].yPosition = 0;
10000900:	00840074 	movhi	r2,4097
10000904:	10a40b04 	addi	r2,r2,-28628
10000908:	10000115 	stw	zero,4(r2)
		veggieObject[0].objectType = 0;
1000090c:	00840074 	movhi	r2,4097
10000910:	10a40b04 	addi	r2,r2,-28628
10000914:	10000215 	stw	zero,8(r2)

		// initialize our 3 fruits on screen for menu
		veggieObject[1].xPosition = 30;
10000918:	00840074 	movhi	r2,4097
1000091c:	10a40b04 	addi	r2,r2,-28628
10000920:	00c00784 	movi	r3,30
10000924:	10c00815 	stw	r3,32(r2)
		veggieObject[1].yPosition = 100;
10000928:	00840074 	movhi	r2,4097
1000092c:	10a40b04 	addi	r2,r2,-28628
10000930:	00c01904 	movi	r3,100
10000934:	10c00915 	stw	r3,36(r2)
		veggieObject[1].objectState = 1;
10000938:	00840074 	movhi	r2,4097
1000093c:	10a40b04 	addi	r2,r2,-28628
10000940:	00c00044 	movi	r3,1
10000944:	10c00b15 	stw	r3,44(r2)
		veggieObject[1].xVelocity = 0;
10000948:	00840074 	movhi	r2,4097
1000094c:	10a40b04 	addi	r2,r2,-28628
10000950:	10000c15 	stw	zero,48(r2)
10000954:	10000d15 	stw	zero,52(r2)
		veggieObject[1].yVelocity = 0;
10000958:	00840074 	movhi	r2,4097
1000095c:	10a40b04 	addi	r2,r2,-28628
10000960:	10000e15 	stw	zero,56(r2)
10000964:	10000f15 	stw	zero,60(r2)

		veggieObject[2].xPosition = 180;
10000968:	00840074 	movhi	r2,4097
1000096c:	10a40b04 	addi	r2,r2,-28628
10000970:	00c02d04 	movi	r3,180
10000974:	10c01015 	stw	r3,64(r2)
		veggieObject[2].yPosition = 320;
10000978:	00840074 	movhi	r2,4097
1000097c:	10a40b04 	addi	r2,r2,-28628
10000980:	00c05004 	movi	r3,320
10000984:	10c01115 	stw	r3,68(r2)
		veggieObject[2].objectState = 1;
10000988:	00840074 	movhi	r2,4097
1000098c:	10a40b04 	addi	r2,r2,-28628
10000990:	00c00044 	movi	r3,1
10000994:	10c01315 	stw	r3,76(r2)
		veggieObject[2].xVelocity = 0;
10000998:	00840074 	movhi	r2,4097
1000099c:	10a40b04 	addi	r2,r2,-28628
100009a0:	10001415 	stw	zero,80(r2)
100009a4:	10001515 	stw	zero,84(r2)
		veggieObject[2].yVelocity = 0;
100009a8:	00840074 	movhi	r2,4097
100009ac:	10a40b04 	addi	r2,r2,-28628
100009b0:	10001615 	stw	zero,88(r2)
100009b4:	10001715 	stw	zero,92(r2)

		veggieObject[3].xPosition = 450;
100009b8:	00840074 	movhi	r2,4097
100009bc:	10a40b04 	addi	r2,r2,-28628
100009c0:	00c07084 	movi	r3,450
100009c4:	10c01815 	stw	r3,96(r2)
		veggieObject[3].yPosition = 220;
100009c8:	00840074 	movhi	r2,4097
100009cc:	10a40b04 	addi	r2,r2,-28628
100009d0:	00c03704 	movi	r3,220
100009d4:	10c01915 	stw	r3,100(r2)
		veggieObject[3].objectState = 1;
100009d8:	00840074 	movhi	r2,4097
100009dc:	10a40b04 	addi	r2,r2,-28628
100009e0:	00c00044 	movi	r3,1
100009e4:	10c01b15 	stw	r3,108(r2)
		veggieObject[3].xVelocity = 0;
100009e8:	00840074 	movhi	r2,4097
100009ec:	10a40b04 	addi	r2,r2,-28628
100009f0:	10001c15 	stw	zero,112(r2)
100009f4:	10001d15 	stw	zero,116(r2)
		veggieObject[3].yVelocity = 0;
100009f8:	00840074 	movhi	r2,4097
100009fc:	10a40b04 	addi	r2,r2,-28628
10000a00:	10001e15 	stw	zero,120(r2)
10000a04:	10001f15 	stw	zero,124(r2)
	}
}
10000a08:	e037883a 	mov	sp,fp
10000a0c:	dfc00117 	ldw	ra,4(sp)
10000a10:	df000017 	ldw	fp,0(sp)
10000a14:	dec00204 	addi	sp,sp,8
10000a18:	f800283a 	ret

10000a1c <physicsEngine>:

void physicsEngine()
{
10000a1c:	defffd04 	addi	sp,sp,-12
10000a20:	dfc00215 	stw	ra,8(sp)
10000a24:	df000115 	stw	fp,4(sp)
10000a28:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000a2c:	00800044 	movi	r2,1
10000a30:	e0bfff15 	stw	r2,-4(fp)
10000a34:	0000bc06 	br	10000d28 <physicsEngine+0x30c>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000a38:	00840074 	movhi	r2,4097
10000a3c:	10a40b04 	addi	r2,r2,-28628
10000a40:	e0ffff17 	ldw	r3,-4(fp)
10000a44:	1806917a 	slli	r3,r3,5
10000a48:	10c5883a 	add	r2,r2,r3
10000a4c:	10800304 	addi	r2,r2,12
10000a50:	10800017 	ldw	r2,0(r2)
10000a54:	1000b126 	beq	r2,zero,10000d1c <physicsEngine+0x300>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000a58:	00840074 	movhi	r2,4097
10000a5c:	10a40b04 	addi	r2,r2,-28628
10000a60:	e0ffff17 	ldw	r3,-4(fp)
10000a64:	1806917a 	slli	r3,r3,5
10000a68:	10c5883a 	add	r2,r2,r3
10000a6c:	10800017 	ldw	r2,0(r2)
10000a70:	1009883a 	mov	r4,r2
10000a74:	0003cbc0 	call	10003cbc <__floatsidf>
10000a78:	100b883a 	mov	r5,r2
10000a7c:	180d883a 	mov	r6,r3
10000a80:	00840074 	movhi	r2,4097
10000a84:	10a40b04 	addi	r2,r2,-28628
10000a88:	e0ffff17 	ldw	r3,-4(fp)
10000a8c:	1806917a 	slli	r3,r3,5
10000a90:	10c5883a 	add	r2,r2,r3
10000a94:	11000404 	addi	r4,r2,16
10000a98:	20800017 	ldw	r2,0(r4)
10000a9c:	20c00117 	ldw	r3,4(r4)
10000aa0:	2809883a 	mov	r4,r5
10000aa4:	300b883a 	mov	r5,r6
10000aa8:	100d883a 	mov	r6,r2
10000aac:	180f883a 	mov	r7,r3
10000ab0:	0002ac80 	call	10002ac8 <__adddf3>
10000ab4:	1009883a 	mov	r4,r2
10000ab8:	180b883a 	mov	r5,r3
10000abc:	2005883a 	mov	r2,r4
10000ac0:	2807883a 	mov	r3,r5
10000ac4:	1009883a 	mov	r4,r2
10000ac8:	180b883a 	mov	r5,r3
10000acc:	0003c340 	call	10003c34 <__fixdfsi>
10000ad0:	1009883a 	mov	r4,r2
10000ad4:	00840074 	movhi	r2,4097
10000ad8:	10a40b04 	addi	r2,r2,-28628
10000adc:	e0ffff17 	ldw	r3,-4(fp)
10000ae0:	1806917a 	slli	r3,r3,5
10000ae4:	10c5883a 	add	r2,r2,r3
10000ae8:	11000015 	stw	r4,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000aec:	00840074 	movhi	r2,4097
10000af0:	10a40b04 	addi	r2,r2,-28628
10000af4:	e0ffff17 	ldw	r3,-4(fp)
10000af8:	1806917a 	slli	r3,r3,5
10000afc:	10c5883a 	add	r2,r2,r3
10000b00:	10800104 	addi	r2,r2,4
10000b04:	10800017 	ldw	r2,0(r2)
10000b08:	1009883a 	mov	r4,r2
10000b0c:	0003cbc0 	call	10003cbc <__floatsidf>
10000b10:	100b883a 	mov	r5,r2
10000b14:	180d883a 	mov	r6,r3
10000b18:	00840074 	movhi	r2,4097
10000b1c:	10a40b04 	addi	r2,r2,-28628
10000b20:	e0ffff17 	ldw	r3,-4(fp)
10000b24:	1806917a 	slli	r3,r3,5
10000b28:	10c5883a 	add	r2,r2,r3
10000b2c:	11000604 	addi	r4,r2,24
10000b30:	20800017 	ldw	r2,0(r4)
10000b34:	20c00117 	ldw	r3,4(r4)
10000b38:	2809883a 	mov	r4,r5
10000b3c:	300b883a 	mov	r5,r6
10000b40:	100d883a 	mov	r6,r2
10000b44:	180f883a 	mov	r7,r3
10000b48:	0002ac80 	call	10002ac8 <__adddf3>
10000b4c:	1009883a 	mov	r4,r2
10000b50:	180b883a 	mov	r5,r3
10000b54:	2005883a 	mov	r2,r4
10000b58:	2807883a 	mov	r3,r5
10000b5c:	1009883a 	mov	r4,r2
10000b60:	180b883a 	mov	r5,r3
10000b64:	0003c340 	call	10003c34 <__fixdfsi>
10000b68:	1009883a 	mov	r4,r2
10000b6c:	00840074 	movhi	r2,4097
10000b70:	10a40b04 	addi	r2,r2,-28628
10000b74:	e0ffff17 	ldw	r3,-4(fp)
10000b78:	1806917a 	slli	r3,r3,5
10000b7c:	10c5883a 	add	r2,r2,r3
10000b80:	10800104 	addi	r2,r2,4
10000b84:	11000015 	stw	r4,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000b88:	00840074 	movhi	r2,4097
10000b8c:	10a40b04 	addi	r2,r2,-28628
10000b90:	e0ffff17 	ldw	r3,-4(fp)
10000b94:	1806917a 	slli	r3,r3,5
10000b98:	10c5883a 	add	r2,r2,r3
10000b9c:	11000604 	addi	r4,r2,24
10000ba0:	20800017 	ldw	r2,0(r4)
10000ba4:	20c00117 	ldw	r3,4(r4)
10000ba8:	1009883a 	mov	r4,r2
10000bac:	180b883a 	mov	r5,r3
10000bb0:	000d883a 	mov	r6,zero
10000bb4:	01cffc34 	movhi	r7,16368
10000bb8:	00033640 	call	10003364 <__subdf3>
10000bbc:	1009883a 	mov	r4,r2
10000bc0:	180b883a 	mov	r5,r3
10000bc4:	2005883a 	mov	r2,r4
10000bc8:	2807883a 	mov	r3,r5
10000bcc:	01040074 	movhi	r4,4097
10000bd0:	21240b04 	addi	r4,r4,-28628
10000bd4:	e17fff17 	ldw	r5,-4(fp)
10000bd8:	280a917a 	slli	r5,r5,5
10000bdc:	2149883a 	add	r4,r4,r5
10000be0:	21000604 	addi	r4,r4,24
10000be4:	20800015 	stw	r2,0(r4)
10000be8:	20c00115 	stw	r3,4(r4)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000bec:	00840074 	movhi	r2,4097
10000bf0:	10a40b04 	addi	r2,r2,-28628
10000bf4:	e0ffff17 	ldw	r3,-4(fp)
10000bf8:	1806917a 	slli	r3,r3,5
10000bfc:	10c5883a 	add	r2,r2,r3
10000c00:	10800104 	addi	r2,r2,4
10000c04:	10800017 	ldw	r2,0(r2)
10000c08:	10000f16 	blt	r2,zero,10000c48 <physicsEngine+0x22c>
10000c0c:	00840074 	movhi	r2,4097
10000c10:	10a40b04 	addi	r2,r2,-28628
10000c14:	e0ffff17 	ldw	r3,-4(fp)
10000c18:	1806917a 	slli	r3,r3,5
10000c1c:	10c5883a 	add	r2,r2,r3
10000c20:	10800017 	ldw	r2,0(r2)
10000c24:	10000816 	blt	r2,zero,10000c48 <physicsEngine+0x22c>
10000c28:	00840074 	movhi	r2,4097
10000c2c:	10a40b04 	addi	r2,r2,-28628
10000c30:	e0ffff17 	ldw	r3,-4(fp)
10000c34:	1806917a 	slli	r3,r3,5
10000c38:	10c5883a 	add	r2,r2,r3
10000c3c:	10800017 	ldw	r2,0(r2)
10000c40:	1080a050 	cmplti	r2,r2,641
10000c44:	1000351e 	bne	r2,zero,10000d1c <physicsEngine+0x300>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000c48:	00840074 	movhi	r2,4097
10000c4c:	10a40b04 	addi	r2,r2,-28628
10000c50:	e0ffff17 	ldw	r3,-4(fp)
10000c54:	1806917a 	slli	r3,r3,5
10000c58:	10c5883a 	add	r2,r2,r3
10000c5c:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000c60:	00840074 	movhi	r2,4097
10000c64:	10a40b04 	addi	r2,r2,-28628
10000c68:	e0ffff17 	ldw	r3,-4(fp)
10000c6c:	1806917a 	slli	r3,r3,5
10000c70:	10c5883a 	add	r2,r2,r3
10000c74:	10800104 	addi	r2,r2,4
10000c78:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000c7c:	00840074 	movhi	r2,4097
10000c80:	10a40b04 	addi	r2,r2,-28628
10000c84:	e0ffff17 	ldw	r3,-4(fp)
10000c88:	1806917a 	slli	r3,r3,5
10000c8c:	10c5883a 	add	r2,r2,r3
10000c90:	10800204 	addi	r2,r2,8
10000c94:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000c98:	00840074 	movhi	r2,4097
10000c9c:	10a40b04 	addi	r2,r2,-28628
10000ca0:	e0ffff17 	ldw	r3,-4(fp)
10000ca4:	1806917a 	slli	r3,r3,5
10000ca8:	10c5883a 	add	r2,r2,r3
10000cac:	10800304 	addi	r2,r2,12
10000cb0:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000cb4:	00840074 	movhi	r2,4097
10000cb8:	10a40b04 	addi	r2,r2,-28628
10000cbc:	e0ffff17 	ldw	r3,-4(fp)
10000cc0:	1806917a 	slli	r3,r3,5
10000cc4:	10c5883a 	add	r2,r2,r3
10000cc8:	10800404 	addi	r2,r2,16
10000ccc:	10000015 	stw	zero,0(r2)
10000cd0:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000cd4:	00840074 	movhi	r2,4097
10000cd8:	10a40b04 	addi	r2,r2,-28628
10000cdc:	e0ffff17 	ldw	r3,-4(fp)
10000ce0:	1806917a 	slli	r3,r3,5
10000ce4:	10c5883a 	add	r2,r2,r3
10000ce8:	10800604 	addi	r2,r2,24
10000cec:	10000015 	stw	zero,0(r2)
10000cf0:	10000115 	stw	zero,4(r2)

				// reduce score!
				if(i<9)
10000cf4:	e0bfff17 	ldw	r2,-4(fp)
10000cf8:	10800248 	cmpgei	r2,r2,9
10000cfc:	1000071e 	bne	r2,zero,10000d1c <physicsEngine+0x300>
				{
					veggieObject[0].xPosition = veggieObject[0].xPosition - 3;
10000d00:	00840074 	movhi	r2,4097
10000d04:	10a40b04 	addi	r2,r2,-28628
10000d08:	10800017 	ldw	r2,0(r2)
10000d0c:	10ffff44 	addi	r3,r2,-3
10000d10:	00840074 	movhi	r2,4097
10000d14:	10a40b04 	addi	r2,r2,-28628
10000d18:	10c00015 	stw	r3,0(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000d1c:	e0bfff17 	ldw	r2,-4(fp)
10000d20:	10800044 	addi	r2,r2,1
10000d24:	e0bfff15 	stw	r2,-4(fp)
10000d28:	e0bfff17 	ldw	r2,-4(fp)
10000d2c:	10800290 	cmplti	r2,r2,10
10000d30:	103f411e 	bne	r2,zero,10000a38 <__alt_data_end+0xf8000a38>
				}
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000d34:	0001883a 	nop
}
10000d38:	e037883a 	mov	sp,fp
10000d3c:	dfc00117 	ldw	ra,4(sp)
10000d40:	df000017 	ldw	fp,0(sp)
10000d44:	dec00204 	addi	sp,sp,8
10000d48:	f800283a 	ret

10000d4c <spawningEngine>:

void spawningEngine(int pattern)
{
10000d4c:	defff004 	addi	sp,sp,-64
10000d50:	dfc00f15 	stw	ra,60(sp)
10000d54:	df000e15 	stw	fp,56(sp)
10000d58:	df000e04 	addi	fp,sp,56
10000d5c:	e13fff15 	stw	r4,-4(fp)
	if(pattern == 0)	// one pattern will have us skip a spawn...caus whatev
10000d60:	e0bfff17 	ldw	r2,-4(fp)
10000d64:	1000011e 	bne	r2,zero,10000d6c <spawningEngine+0x20>
	{
		return;
10000d68:	0000e906 	br	10001110 <spawningEngine+0x3c4>
	}
	else if(pattern > 7)	// they want us.. to build a bomb!
10000d6c:	e0bfff17 	ldw	r2,-4(fp)
10000d70:	10800210 	cmplti	r2,r2,8
10000d74:	1000571e 	bne	r2,zero,10000ed4 <spawningEngine+0x188>
	{
		if(veggieObject[9].objectState == 0)	// if one doesn't exist, go!
10000d78:	00840074 	movhi	r2,4097
10000d7c:	10a40b04 	addi	r2,r2,-28628
10000d80:	10804b17 	ldw	r2,300(r2)
10000d84:	1000531e 	bne	r2,zero,10000ed4 <spawningEngine+0x188>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			double randomSpeedY, randomSpeedX;	// starting velocity

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10000d88:	0003e080 	call	10003e08 <rand>
10000d8c:	1009883a 	mov	r4,r2
10000d90:	01408704 	movi	r5,540
10000d94:	0002a340 	call	10002a34 <__modsi3>
10000d98:	10800c84 	addi	r2,r2,50
10000d9c:	e0bff815 	stw	r2,-32(fp)
			randomSpeedY = (rand() % 7) + 24;
10000da0:	0003e080 	call	10003e08 <rand>
10000da4:	1009883a 	mov	r4,r2
10000da8:	014001c4 	movi	r5,7
10000dac:	0002a340 	call	10002a34 <__modsi3>
10000db0:	10800604 	addi	r2,r2,24
10000db4:	1009883a 	mov	r4,r2
10000db8:	0003cbc0 	call	10003cbc <__floatsidf>
10000dbc:	1009883a 	mov	r4,r2
10000dc0:	180b883a 	mov	r5,r3
10000dc4:	e13ff915 	stw	r4,-28(fp)
10000dc8:	e17ffa15 	stw	r5,-24(fp)
			randomSpeedX = (rand() % 12) - 6;
10000dcc:	0003e080 	call	10003e08 <rand>
10000dd0:	1009883a 	mov	r4,r2
10000dd4:	01400304 	movi	r5,12
10000dd8:	0002a340 	call	10002a34 <__modsi3>
10000ddc:	10bffe84 	addi	r2,r2,-6
10000de0:	1009883a 	mov	r4,r2
10000de4:	0003cbc0 	call	10003cbc <__floatsidf>
10000de8:	1009883a 	mov	r4,r2
10000dec:	180b883a 	mov	r5,r3
10000df0:	e13ff215 	stw	r4,-56(fp)
10000df4:	e17ff315 	stw	r5,-52(fp)

			// make sure we aren't throwing them out the edges
			if (randomX < 300)
10000df8:	e0bff817 	ldw	r2,-32(fp)
10000dfc:	10804b28 	cmpgeui	r2,r2,300
10000e00:	10000b1e 	bne	r2,zero,10000e30 <spawningEngine+0xe4>
			{
				randomSpeedX = (rand() % 12);
10000e04:	0003e080 	call	10003e08 <rand>
10000e08:	1009883a 	mov	r4,r2
10000e0c:	01400304 	movi	r5,12
10000e10:	0002a340 	call	10002a34 <__modsi3>
10000e14:	1009883a 	mov	r4,r2
10000e18:	0003cbc0 	call	10003cbc <__floatsidf>
10000e1c:	1009883a 	mov	r4,r2
10000e20:	180b883a 	mov	r5,r3
10000e24:	e13ff215 	stw	r4,-56(fp)
10000e28:	e17ff315 	stw	r5,-52(fp)
10000e2c:	00000e06 	br	10000e68 <spawningEngine+0x11c>
			}
			else if (randomX > 350)
10000e30:	e0bff817 	ldw	r2,-32(fp)
10000e34:	108057f0 	cmpltui	r2,r2,351
10000e38:	10000b1e 	bne	r2,zero,10000e68 <spawningEngine+0x11c>
			{
				randomSpeedX = (rand() % 12) - 12;
10000e3c:	0003e080 	call	10003e08 <rand>
10000e40:	1009883a 	mov	r4,r2
10000e44:	01400304 	movi	r5,12
10000e48:	0002a340 	call	10002a34 <__modsi3>
10000e4c:	10bffd04 	addi	r2,r2,-12
10000e50:	1009883a 	mov	r4,r2
10000e54:	0003cbc0 	call	10003cbc <__floatsidf>
10000e58:	1009883a 	mov	r4,r2
10000e5c:	180b883a 	mov	r5,r3
10000e60:	e13ff215 	stw	r4,-56(fp)
10000e64:	e17ff315 	stw	r5,-52(fp)
			}

			// now let's store these
			veggieObject[9].xPosition = randomX;
10000e68:	e0fff817 	ldw	r3,-32(fp)
10000e6c:	00840074 	movhi	r2,4097
10000e70:	10a40b04 	addi	r2,r2,-28628
10000e74:	10c04815 	stw	r3,288(r2)
			veggieObject[9].yPosition = 0;
10000e78:	00840074 	movhi	r2,4097
10000e7c:	10a40b04 	addi	r2,r2,-28628
10000e80:	10004915 	stw	zero,292(r2)
			veggieObject[9].objectType = 0;
10000e84:	00840074 	movhi	r2,4097
10000e88:	10a40b04 	addi	r2,r2,-28628
10000e8c:	10004a15 	stw	zero,296(r2)
			veggieObject[9].xVelocity = randomSpeedX;
10000e90:	00840074 	movhi	r2,4097
10000e94:	10a40b04 	addi	r2,r2,-28628
10000e98:	e0fff217 	ldw	r3,-56(fp)
10000e9c:	10c04c15 	stw	r3,304(r2)
10000ea0:	e0fff317 	ldw	r3,-52(fp)
10000ea4:	10c04d15 	stw	r3,308(r2)
			veggieObject[9].yVelocity = randomSpeedY;
10000ea8:	00840074 	movhi	r2,4097
10000eac:	10a40b04 	addi	r2,r2,-28628
10000eb0:	e0fff917 	ldw	r3,-28(fp)
10000eb4:	10c04e15 	stw	r3,312(r2)
10000eb8:	e0fffa17 	ldw	r3,-24(fp)
10000ebc:	10c04f15 	stw	r3,316(r2)
			veggieObject[9].objectState = 1;	// reserve this slot
10000ec0:	00840074 	movhi	r2,4097
10000ec4:	10a40b04 	addi	r2,r2,-28628
10000ec8:	00c00044 	movi	r3,1
10000ecc:	10c04b15 	stw	r3,300(r2)

//			printf("omg! a bomb has appeared! zomg!!! \n");

			return; // our evillness is done!!!
10000ed0:	00008f06 	br	10001110 <spawningEngine+0x3c4>
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
10000ed4:	00800044 	movi	r2,1
10000ed8:	e0bff415 	stw	r2,-48(fp)
10000edc:	00008806 	br	10001100 <spawningEngine+0x3b4>
	{
		i = (rand() % 8 + 1);	// put it in a random port for random veggies
10000ee0:	0003e080 	call	10003e08 <rand>
10000ee4:	1007883a 	mov	r3,r2
10000ee8:	00a00034 	movhi	r2,32768
10000eec:	108001c4 	addi	r2,r2,7
10000ef0:	1884703a 	and	r2,r3,r2
10000ef4:	1000040e 	bge	r2,zero,10000f08 <spawningEngine+0x1bc>
10000ef8:	10bfffc4 	addi	r2,r2,-1
10000efc:	00fffe04 	movi	r3,-8
10000f00:	10c4b03a 	or	r2,r2,r3
10000f04:	10800044 	addi	r2,r2,1
10000f08:	10800044 	addi	r2,r2,1
10000f0c:	e0bffb15 	stw	r2,-20(fp)
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000f10:	00840074 	movhi	r2,4097
10000f14:	10a40b04 	addi	r2,r2,-28628
10000f18:	e0fffb17 	ldw	r3,-20(fp)
10000f1c:	1806917a 	slli	r3,r3,5
10000f20:	10c5883a 	add	r2,r2,r3
10000f24:	10800304 	addi	r2,r2,12
10000f28:	10800017 	ldw	r2,0(r2)
10000f2c:	1000711e 	bne	r2,zero,100010f4 <spawningEngine+0x3a8>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			double randomSpeedY, randomSpeedX;	// starting velocity
			veggieObject[i].objectState = 1;	// reserve this slot
10000f30:	00840074 	movhi	r2,4097
10000f34:	10a40b04 	addi	r2,r2,-28628
10000f38:	e0fffb17 	ldw	r3,-20(fp)
10000f3c:	1806917a 	slli	r3,r3,5
10000f40:	10c5883a 	add	r2,r2,r3
10000f44:	10800304 	addi	r2,r2,12
10000f48:	00c00044 	movi	r3,1
10000f4c:	10c00015 	stw	r3,0(r2)

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
10000f50:	e0bfff17 	ldw	r2,-4(fp)
10000f54:	10800150 	cmplti	r2,r2,5
10000f58:	10000b1e 	bne	r2,zero,10000f88 <spawningEngine+0x23c>
			{
				int j;
				for(j=4; j<pattern; j++)
10000f5c:	00800104 	movi	r2,4
10000f60:	e0bff715 	stw	r2,-36(fp)
10000f64:	00000506 	br	10000f7c <spawningEngine+0x230>
				{
					spawningEngine(1);	// call ourselves to spawn another!
10000f68:	01000044 	movi	r4,1
10000f6c:	0000d4c0 	call	10000d4c <spawningEngine>
			veggieObject[i].objectState = 1;	// reserve this slot

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
			{
				int j;
				for(j=4; j<pattern; j++)
10000f70:	e0bff717 	ldw	r2,-36(fp)
10000f74:	10800044 	addi	r2,r2,1
10000f78:	e0bff715 	stw	r2,-36(fp)
10000f7c:	e0fff717 	ldw	r3,-36(fp)
10000f80:	e0bfff17 	ldw	r2,-4(fp)
10000f84:	18bff816 	blt	r3,r2,10000f68 <__alt_data_end+0xf8000f68>
					spawningEngine(1);	// call ourselves to spawn another!
				}
			}

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10000f88:	0003e080 	call	10003e08 <rand>
10000f8c:	1009883a 	mov	r4,r2
10000f90:	01408704 	movi	r5,540
10000f94:	0002a340 	call	10002a34 <__modsi3>
10000f98:	10800c84 	addi	r2,r2,50
10000f9c:	e0bffc15 	stw	r2,-16(fp)
			randomSpeedY = (rand() % 7) + 24;
10000fa0:	0003e080 	call	10003e08 <rand>
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	014001c4 	movi	r5,7
10000fac:	0002a340 	call	10002a34 <__modsi3>
10000fb0:	10800604 	addi	r2,r2,24
10000fb4:	1009883a 	mov	r4,r2
10000fb8:	0003cbc0 	call	10003cbc <__floatsidf>
10000fbc:	1009883a 	mov	r4,r2
10000fc0:	180b883a 	mov	r5,r3
10000fc4:	e13ffd15 	stw	r4,-12(fp)
10000fc8:	e17ffe15 	stw	r5,-8(fp)
			randomSpeedX = (rand() % 12) - 6;
10000fcc:	0003e080 	call	10003e08 <rand>
10000fd0:	1009883a 	mov	r4,r2
10000fd4:	01400304 	movi	r5,12
10000fd8:	0002a340 	call	10002a34 <__modsi3>
10000fdc:	10bffe84 	addi	r2,r2,-6
10000fe0:	1009883a 	mov	r4,r2
10000fe4:	0003cbc0 	call	10003cbc <__floatsidf>
10000fe8:	1009883a 	mov	r4,r2
10000fec:	180b883a 	mov	r5,r3
10000ff0:	e13ff515 	stw	r4,-44(fp)
10000ff4:	e17ff615 	stw	r5,-40(fp)

			// make sure we aren't throwing them out the edges
			if (randomX < 250)
10000ff8:	e0bffc17 	ldw	r2,-16(fp)
10000ffc:	10803ea8 	cmpgeui	r2,r2,250
10001000:	10000b1e 	bne	r2,zero,10001030 <spawningEngine+0x2e4>
			{
				randomSpeedX = (rand() % 12);
10001004:	0003e080 	call	10003e08 <rand>
10001008:	1009883a 	mov	r4,r2
1000100c:	01400304 	movi	r5,12
10001010:	0002a340 	call	10002a34 <__modsi3>
10001014:	1009883a 	mov	r4,r2
10001018:	0003cbc0 	call	10003cbc <__floatsidf>
1000101c:	1009883a 	mov	r4,r2
10001020:	180b883a 	mov	r5,r3
10001024:	e13ff515 	stw	r4,-44(fp)
10001028:	e17ff615 	stw	r5,-40(fp)
1000102c:	00000e06 	br	10001068 <spawningEngine+0x31c>
			}
			else if (randomX > 400)
10001030:	e0bffc17 	ldw	r2,-16(fp)
10001034:	10806470 	cmpltui	r2,r2,401
10001038:	10000b1e 	bne	r2,zero,10001068 <spawningEngine+0x31c>
			{
				randomSpeedX = (rand() % 12) - 12;
1000103c:	0003e080 	call	10003e08 <rand>
10001040:	1009883a 	mov	r4,r2
10001044:	01400304 	movi	r5,12
10001048:	0002a340 	call	10002a34 <__modsi3>
1000104c:	10bffd04 	addi	r2,r2,-12
10001050:	1009883a 	mov	r4,r2
10001054:	0003cbc0 	call	10003cbc <__floatsidf>
10001058:	1009883a 	mov	r4,r2
1000105c:	180b883a 	mov	r5,r3
10001060:	e13ff515 	stw	r4,-44(fp)
10001064:	e17ff615 	stw	r5,-40(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10001068:	e0fffc17 	ldw	r3,-16(fp)
1000106c:	00840074 	movhi	r2,4097
10001070:	10a40b04 	addi	r2,r2,-28628
10001074:	e13ffb17 	ldw	r4,-20(fp)
10001078:	2008917a 	slli	r4,r4,5
1000107c:	1105883a 	add	r2,r2,r4
10001080:	10c00015 	stw	r3,0(r2)
			veggieObject[i].yPosition = 0;
10001084:	00840074 	movhi	r2,4097
10001088:	10a40b04 	addi	r2,r2,-28628
1000108c:	e0fffb17 	ldw	r3,-20(fp)
10001090:	1806917a 	slli	r3,r3,5
10001094:	10c5883a 	add	r2,r2,r3
10001098:	10800104 	addi	r2,r2,4
1000109c:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
100010a0:	00840074 	movhi	r2,4097
100010a4:	10a40b04 	addi	r2,r2,-28628
100010a8:	e0fffb17 	ldw	r3,-20(fp)
100010ac:	1806917a 	slli	r3,r3,5
100010b0:	10c5883a 	add	r2,r2,r3
100010b4:	10800404 	addi	r2,r2,16
100010b8:	e0fff517 	ldw	r3,-44(fp)
100010bc:	10c00015 	stw	r3,0(r2)
100010c0:	e0fff617 	ldw	r3,-40(fp)
100010c4:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
100010c8:	00840074 	movhi	r2,4097
100010cc:	10a40b04 	addi	r2,r2,-28628
100010d0:	e0fffb17 	ldw	r3,-20(fp)
100010d4:	1806917a 	slli	r3,r3,5
100010d8:	10c5883a 	add	r2,r2,r3
100010dc:	10800604 	addi	r2,r2,24
100010e0:	e0fffd17 	ldw	r3,-12(fp)
100010e4:	10c00015 	stw	r3,0(r2)
100010e8:	e0fffe17 	ldw	r3,-8(fp)
100010ec:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
100010f0:	00000706 	br	10001110 <spawningEngine+0x3c4>

			return; // our evillness is done!!!
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
100010f4:	e0bff417 	ldw	r2,-48(fp)
100010f8:	10800044 	addi	r2,r2,1
100010fc:	e0bff415 	stw	r2,-48(fp)
10001100:	e0bff417 	ldw	r2,-48(fp)
10001104:	10800250 	cmplti	r2,r2,9
10001108:	103f751e 	bne	r2,zero,10000ee0 <__alt_data_end+0xf8000ee0>
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
		}
	}
	return;
1000110c:	0001883a 	nop
}
10001110:	e037883a 	mov	sp,fp
10001114:	dfc00117 	ldw	ra,4(sp)
10001118:	df000017 	ldw	fp,0(sp)
1000111c:	dec00204 	addi	sp,sp,8
10001120:	f800283a 	ret

10001124 <slicingEngine>:

void slicingEngine()
{
10001124:	defffc04 	addi	sp,sp,-16
10001128:	df000315 	stw	fp,12(sp)
1000112c:	df000304 	addi	fp,sp,12
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
10001130:	00840074 	movhi	r2,4097
10001134:	10a40b04 	addi	r2,r2,-28628
10001138:	10800317 	ldw	r2,12(r2)
1000113c:	10005f1e 	bne	r2,zero,100012bc <slicingEngine+0x198>
10001140:	d0a5a717 	ldw	r2,-26980(gp)
10001144:	10005d26 	beq	r2,zero,100012bc <slicingEngine+0x198>
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
10001148:	d0a5a417 	ldw	r2,-26992(gp)
1000114c:	108007f0 	cmpltui	r2,r2,31
10001150:	10001b1e 	bne	r2,zero,100011c0 <slicingEngine+0x9c>
10001154:	d0a5a417 	ldw	r2,-26992(gp)
10001158:	10801928 	cmpgeui	r2,r2,100
1000115c:	1000181e 	bne	r2,zero,100011c0 <slicingEngine+0x9c>
10001160:	d0a5a317 	ldw	r2,-26996(gp)
10001164:	108007f0 	cmpltui	r2,r2,31
10001168:	1000151e 	bne	r2,zero,100011c0 <slicingEngine+0x9c>
1000116c:	d0a5a317 	ldw	r2,-26996(gp)
10001170:	10801928 	cmpgeui	r2,r2,100
10001174:	1000121e 	bne	r2,zero,100011c0 <slicingEngine+0x9c>
		{
			veggieObject[0].objectState = 1;	// easy mode start
10001178:	00840074 	movhi	r2,4097
1000117c:	10a40b04 	addi	r2,r2,-28628
10001180:	00c00044 	movi	r3,1
10001184:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 0;		// where we're goin, we don't need lives
10001188:	00840074 	movhi	r2,4097
1000118c:	10a40b04 	addi	r2,r2,-28628
10001190:	10000215 	stw	zero,8(r2)
			physixOn = 1;
10001194:	00800044 	movi	r2,1
10001198:	d0a5b015 	stw	r2,-26944(gp)
			spawnOn = 1;
1000119c:	00800044 	movi	r2,1
100011a0:	d0a5a915 	stw	r2,-26972(gp)
			veggieObject[1].objectState = 2;	// cut the object!
100011a4:	00840074 	movhi	r2,4097
100011a8:	10a40b04 	addi	r2,r2,-28628
100011ac:	00c00084 	movi	r3,2
100011b0:	10c00b15 	stw	r3,44(r2)
			roundStart = elapsedTime;
100011b4:	d0a5a117 	ldw	r2,-27004(gp)
100011b8:	d0a5b115 	stw	r2,-26940(gp)
100011bc:	00003e06 	br	100012b8 <slicingEngine+0x194>
		}
		else if((xCursor>180)&&(xCursor<250)&&(yCursor>220)&&(yCursor<310))
100011c0:	d0a5a417 	ldw	r2,-26992(gp)
100011c4:	10802d70 	cmpltui	r2,r2,181
100011c8:	10001c1e 	bne	r2,zero,1000123c <slicingEngine+0x118>
100011cc:	d0a5a417 	ldw	r2,-26992(gp)
100011d0:	10803ea8 	cmpgeui	r2,r2,250
100011d4:	1000191e 	bne	r2,zero,1000123c <slicingEngine+0x118>
100011d8:	d0a5a317 	ldw	r2,-26996(gp)
100011dc:	10803770 	cmpltui	r2,r2,221
100011e0:	1000161e 	bne	r2,zero,1000123c <slicingEngine+0x118>
100011e4:	d0a5a317 	ldw	r2,-26996(gp)
100011e8:	10804da8 	cmpgeui	r2,r2,310
100011ec:	1000131e 	bne	r2,zero,1000123c <slicingEngine+0x118>
		{
			veggieObject[0].objectState = 2;	// medium mode start
100011f0:	00840074 	movhi	r2,4097
100011f4:	10a40b04 	addi	r2,r2,-28628
100011f8:	00c00084 	movi	r3,2
100011fc:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 5;		// lots of lives for u!
10001200:	00840074 	movhi	r2,4097
10001204:	10a40b04 	addi	r2,r2,-28628
10001208:	00c00144 	movi	r3,5
1000120c:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
10001210:	00800044 	movi	r2,1
10001214:	d0a5b015 	stw	r2,-26944(gp)
			spawnOn = 1;
10001218:	00800044 	movi	r2,1
1000121c:	d0a5a915 	stw	r2,-26972(gp)
			veggieObject[2].objectState = 2;	// cut the object!
10001220:	00840074 	movhi	r2,4097
10001224:	10a40b04 	addi	r2,r2,-28628
10001228:	00c00084 	movi	r3,2
1000122c:	10c01315 	stw	r3,76(r2)
			roundStart = elapsedTime;
10001230:	d0a5a117 	ldw	r2,-27004(gp)
10001234:	d0a5b115 	stw	r2,-26940(gp)
10001238:	00001f06 	br	100012b8 <slicingEngine+0x194>
		}
		else if((xCursor>450)&&(xCursor<520)&&(yCursor>120)&&(yCursor<210))
1000123c:	d0a5a417 	ldw	r2,-26992(gp)
10001240:	108070f0 	cmpltui	r2,r2,451
10001244:	10001c1e 	bne	r2,zero,100012b8 <slicingEngine+0x194>
10001248:	d0a5a417 	ldw	r2,-26992(gp)
1000124c:	10808228 	cmpgeui	r2,r2,520
10001250:	1000191e 	bne	r2,zero,100012b8 <slicingEngine+0x194>
10001254:	d0a5a317 	ldw	r2,-26996(gp)
10001258:	10801e70 	cmpltui	r2,r2,121
1000125c:	1000161e 	bne	r2,zero,100012b8 <slicingEngine+0x194>
10001260:	d0a5a317 	ldw	r2,-26996(gp)
10001264:	108034a8 	cmpgeui	r2,r2,210
10001268:	1000131e 	bne	r2,zero,100012b8 <slicingEngine+0x194>
		{
			veggieObject[0].objectState = 3;	// hard mode start
1000126c:	00840074 	movhi	r2,4097
10001270:	10a40b04 	addi	r2,r2,-28628
10001274:	00c000c4 	movi	r3,3
10001278:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 3;		// ..good luck...you'll need it
1000127c:	00840074 	movhi	r2,4097
10001280:	10a40b04 	addi	r2,r2,-28628
10001284:	00c000c4 	movi	r3,3
10001288:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
1000128c:	00800044 	movi	r2,1
10001290:	d0a5b015 	stw	r2,-26944(gp)
			spawnOn = 1;
10001294:	00800044 	movi	r2,1
10001298:	d0a5a915 	stw	r2,-26972(gp)
			veggieObject[3].objectState = 2;	// cut the object!
1000129c:	00840074 	movhi	r2,4097
100012a0:	10a40b04 	addi	r2,r2,-28628
100012a4:	00c00084 	movi	r3,2
100012a8:	10c01b15 	stw	r3,108(r2)
			roundStart = elapsedTime;
100012ac:	d0a5a117 	ldw	r2,-27004(gp)
100012b0:	d0a5b115 	stw	r2,-26940(gp)
{
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
100012b4:	00007c06 	br	100014a8 <slicingEngine+0x384>
100012b8:	00007b06 	br	100014a8 <slicingEngine+0x384>
			spawnOn = 1;
			veggieObject[3].objectState = 2;	// cut the object!
			roundStart = elapsedTime;
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
100012bc:	00840074 	movhi	r2,4097
100012c0:	10a40b04 	addi	r2,r2,-28628
100012c4:	10800317 	ldw	r2,12(r2)
100012c8:	10800120 	cmpeqi	r2,r2,4
100012cc:	1000051e 	bne	r2,zero,100012e4 <slicingEngine+0x1c0>
100012d0:	00840074 	movhi	r2,4097
100012d4:	10a40b04 	addi	r2,r2,-28628
100012d8:	10800317 	ldw	r2,12(r2)
100012dc:	10800158 	cmpnei	r2,r2,5
100012e0:	1000171e 	bne	r2,zero,10001340 <slicingEngine+0x21c>
100012e4:	d0a5a717 	ldw	r2,-26980(gp)
100012e8:	10001526 	beq	r2,zero,10001340 <slicingEngine+0x21c>
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
100012ec:	d0a5a417 	ldw	r2,-26992(gp)
100012f0:	108039f0 	cmpltui	r2,r2,231
100012f4:	1000111e 	bne	r2,zero,1000133c <slicingEngine+0x218>
100012f8:	d0a5a417 	ldw	r2,-26992(gp)
100012fc:	10804b28 	cmpgeui	r2,r2,300
10001300:	10000e1e 	bne	r2,zero,1000133c <slicingEngine+0x218>
10001304:	d0a5a317 	ldw	r2,-26996(gp)
10001308:	10801470 	cmpltui	r2,r2,81
1000130c:	10000b1e 	bne	r2,zero,1000133c <slicingEngine+0x218>
10001310:	d0a5a317 	ldw	r2,-26996(gp)
10001314:	108025a8 	cmpgeui	r2,r2,150
10001318:	1000081e 	bne	r2,zero,1000133c <slicingEngine+0x218>
		{
			nextState = 0;
1000131c:	d025ab15 	stw	zero,-26964(gp)
			physixOn = 1;
10001320:	00800044 	movi	r2,1
10001324:	d0a5b015 	stw	r2,-26944(gp)
			veggieObject[4].objectState = 2;	// cut the object!
10001328:	00840074 	movhi	r2,4097
1000132c:	10a40b04 	addi	r2,r2,-28628
10001330:	00c00084 	movi	r3,2
10001334:	10c02315 	stw	r3,140(r2)
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
10001338:	00005b06 	br	100014a8 <slicingEngine+0x384>
1000133c:	00005a06 	br	100014a8 <slicingEngine+0x384>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
10001340:	00800044 	movi	r2,1
10001344:	e0bffd15 	stw	r2,-12(fp)
10001348:	00005406 	br	1000149c <slicingEngine+0x378>
		{
			// only if it is in perfect state
			if(veggieObject[i].objectState == 1)
1000134c:	00840074 	movhi	r2,4097
10001350:	10a40b04 	addi	r2,r2,-28628
10001354:	e0fffd17 	ldw	r3,-12(fp)
10001358:	1806917a 	slli	r3,r3,5
1000135c:	10c5883a 	add	r2,r2,r3
10001360:	10800304 	addi	r2,r2,12
10001364:	10800017 	ldw	r2,0(r2)
10001368:	10800058 	cmpnei	r2,r2,1
1000136c:	1000481e 	bne	r2,zero,10001490 <slicingEngine+0x36c>
			{
				// let's grab the vegetable coordinates
				int veggieX = veggieObject[i].xPosition;
10001370:	00840074 	movhi	r2,4097
10001374:	10a40b04 	addi	r2,r2,-28628
10001378:	e0fffd17 	ldw	r3,-12(fp)
1000137c:	1806917a 	slli	r3,r3,5
10001380:	10c5883a 	add	r2,r2,r3
10001384:	10800017 	ldw	r2,0(r2)
10001388:	e0bffe15 	stw	r2,-8(fp)
				int veggieY = veggieObject[i].yPosition;
1000138c:	00840074 	movhi	r2,4097
10001390:	10a40b04 	addi	r2,r2,-28628
10001394:	e0fffd17 	ldw	r3,-12(fp)
10001398:	1806917a 	slli	r3,r3,5
1000139c:	10c5883a 	add	r2,r2,r3
100013a0:	10800104 	addi	r2,r2,4
100013a4:	10800017 	ldw	r2,0(r2)
100013a8:	e0bfff15 	stw	r2,-4(fp)
					collideX = 64;
					collideY = 64;
				}
*/
				// now let's check collision
				if(((veggieX)<xCursor)&&((veggieX+75)>xCursor)&&((veggieY-60)<yCursor)&&((veggieY+15)>yCursor))
100013ac:	e0fffe17 	ldw	r3,-8(fp)
100013b0:	d0a5a417 	ldw	r2,-26992(gp)
100013b4:	1880362e 	bgeu	r3,r2,10001490 <slicingEngine+0x36c>
100013b8:	e0bffe17 	ldw	r2,-8(fp)
100013bc:	108012c4 	addi	r2,r2,75
100013c0:	1007883a 	mov	r3,r2
100013c4:	d0a5a417 	ldw	r2,-26992(gp)
100013c8:	10c0312e 	bgeu	r2,r3,10001490 <slicingEngine+0x36c>
100013cc:	e0bfff17 	ldw	r2,-4(fp)
100013d0:	10bff104 	addi	r2,r2,-60
100013d4:	1007883a 	mov	r3,r2
100013d8:	d0a5a317 	ldw	r2,-26996(gp)
100013dc:	18802c2e 	bgeu	r3,r2,10001490 <slicingEngine+0x36c>
100013e0:	e0bfff17 	ldw	r2,-4(fp)
100013e4:	108003c4 	addi	r2,r2,15
100013e8:	1007883a 	mov	r3,r2
100013ec:	d0a5a317 	ldw	r2,-26996(gp)
100013f0:	10c0272e 	bgeu	r2,r3,10001490 <slicingEngine+0x36c>
				{
					// this means we are in the 'hitbox'!! kill the fruit!
					veggieObject[i].objectState = 2;
100013f4:	00840074 	movhi	r2,4097
100013f8:	10a40b04 	addi	r2,r2,-28628
100013fc:	e0fffd17 	ldw	r3,-12(fp)
10001400:	1806917a 	slli	r3,r3,5
10001404:	10c5883a 	add	r2,r2,r3
10001408:	10800304 	addi	r2,r2,12
1000140c:	00c00084 	movi	r3,2
10001410:	10c00015 	stw	r3,0(r2)

					if(i<9)
10001414:	e0bffd17 	ldw	r2,-12(fp)
10001418:	10800248 	cmpgei	r2,r2,9
1000141c:	10000d1e 	bne	r2,zero,10001454 <slicingEngine+0x330>
					{
						comboFruit = comboFruit + 1;
10001420:	d0a5b217 	ldw	r2,-26936(gp)
10001424:	10800044 	addi	r2,r2,1
10001428:	d0a5b215 	stw	r2,-26936(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition + 2*comboFruit;
1000142c:	00840074 	movhi	r2,4097
10001430:	10a40b04 	addi	r2,r2,-28628
10001434:	10c00017 	ldw	r3,0(r2)
10001438:	d0a5b217 	ldw	r2,-26936(gp)
1000143c:	1085883a 	add	r2,r2,r2
10001440:	1887883a 	add	r3,r3,r2
10001444:	00840074 	movhi	r2,4097
10001448:	10a40b04 	addi	r2,r2,-28628
1000144c:	10c00015 	stw	r3,0(r2)
10001450:	00000f06 	br	10001490 <slicingEngine+0x36c>
						printf("combo is %d! \n", comboFruit);
						printf("lives at %d! \n", veggieObject[0].objectType);
*/					}
					else	// ITS A BOMB!!! OMGOGMGOMGG!!
					{
						veggieObject[0].objectType = veggieObject[0].objectType-1;
10001454:	00840074 	movhi	r2,4097
10001458:	10a40b04 	addi	r2,r2,-28628
1000145c:	10800217 	ldw	r2,8(r2)
10001460:	10ffffc4 	addi	r3,r2,-1
10001464:	00840074 	movhi	r2,4097
10001468:	10a40b04 	addi	r2,r2,-28628
1000146c:	10c00215 	stw	r3,8(r2)
						comboFruit = 0;
10001470:	d025b215 	stw	zero,-26936(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition - 15;
10001474:	00840074 	movhi	r2,4097
10001478:	10a40b04 	addi	r2,r2,-28628
1000147c:	10800017 	ldw	r2,0(r2)
10001480:	10fffc44 	addi	r3,r2,-15
10001484:	00840074 	movhi	r2,4097
10001488:	10a40b04 	addi	r2,r2,-28628
1000148c:	10c00015 	stw	r3,0(r2)
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
10001490:	e0bffd17 	ldw	r2,-12(fp)
10001494:	10800044 	addi	r2,r2,1
10001498:	e0bffd15 	stw	r2,-12(fp)
1000149c:	e0bffd17 	ldw	r2,-12(fp)
100014a0:	10800290 	cmplti	r2,r2,10
100014a4:	103fa91e 	bne	r2,zero,1000134c <__alt_data_end+0xf800134c>
					}
				}
			}
		}
	}
	return;
100014a8:	0001883a 	nop
}
100014ac:	e037883a 	mov	sp,fp
100014b0:	df000017 	ldw	fp,0(sp)
100014b4:	dec00104 	addi	sp,sp,4
100014b8:	f800283a 	ret

100014bc <disintegrateEngine>:

void disintegrateEngine()
{
100014bc:	defffe04 	addi	sp,sp,-8
100014c0:	df000115 	stw	fp,4(sp)
100014c4:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
100014c8:	00800044 	movi	r2,1
100014cc:	e0bfff15 	stw	r2,-4(fp)
100014d0:	00006a06 	br	1000167c <disintegrateEngine+0x1c0>
	{
		if(veggieObject[i].objectState == 2) // just been cut
100014d4:	00840074 	movhi	r2,4097
100014d8:	10a40b04 	addi	r2,r2,-28628
100014dc:	e0ffff17 	ldw	r3,-4(fp)
100014e0:	1806917a 	slli	r3,r3,5
100014e4:	10c5883a 	add	r2,r2,r3
100014e8:	10800304 	addi	r2,r2,12
100014ec:	10800017 	ldw	r2,0(r2)
100014f0:	10800098 	cmpnei	r2,r2,2
100014f4:	1000091e 	bne	r2,zero,1000151c <disintegrateEngine+0x60>
		{
			veggieObject[i].objectState = 3;
100014f8:	00840074 	movhi	r2,4097
100014fc:	10a40b04 	addi	r2,r2,-28628
10001500:	e0ffff17 	ldw	r3,-4(fp)
10001504:	1806917a 	slli	r3,r3,5
10001508:	10c5883a 	add	r2,r2,r3
1000150c:	10800304 	addi	r2,r2,12
10001510:	00c000c4 	movi	r3,3
10001514:	10c00015 	stw	r3,0(r2)
10001518:	00005506 	br	10001670 <disintegrateEngine+0x1b4>
		}
		else if(((veggieObject[i].objectState == 3) && (i<9)) || (veggieObject[i].objectState == 4))// almost dedded
1000151c:	00840074 	movhi	r2,4097
10001520:	10a40b04 	addi	r2,r2,-28628
10001524:	e0ffff17 	ldw	r3,-4(fp)
10001528:	1806917a 	slli	r3,r3,5
1000152c:	10c5883a 	add	r2,r2,r3
10001530:	10800304 	addi	r2,r2,12
10001534:	10800017 	ldw	r2,0(r2)
10001538:	108000d8 	cmpnei	r2,r2,3
1000153c:	1000031e 	bne	r2,zero,1000154c <disintegrateEngine+0x90>
10001540:	e0bfff17 	ldw	r2,-4(fp)
10001544:	10800250 	cmplti	r2,r2,9
10001548:	1000091e 	bne	r2,zero,10001570 <disintegrateEngine+0xb4>
1000154c:	00840074 	movhi	r2,4097
10001550:	10a40b04 	addi	r2,r2,-28628
10001554:	e0ffff17 	ldw	r3,-4(fp)
10001558:	1806917a 	slli	r3,r3,5
1000155c:	10c5883a 	add	r2,r2,r3
10001560:	10800304 	addi	r2,r2,12
10001564:	10800017 	ldw	r2,0(r2)
10001568:	10800118 	cmpnei	r2,r2,4
1000156c:	10002c1e 	bne	r2,zero,10001620 <disintegrateEngine+0x164>
		{
			veggieObject[i].xPosition = 0;		// gone!
10001570:	00840074 	movhi	r2,4097
10001574:	10a40b04 	addi	r2,r2,-28628
10001578:	e0ffff17 	ldw	r3,-4(fp)
1000157c:	1806917a 	slli	r3,r3,5
10001580:	10c5883a 	add	r2,r2,r3
10001584:	10000015 	stw	zero,0(r2)
			veggieObject[i].yPosition = 0;
10001588:	00840074 	movhi	r2,4097
1000158c:	10a40b04 	addi	r2,r2,-28628
10001590:	e0ffff17 	ldw	r3,-4(fp)
10001594:	1806917a 	slli	r3,r3,5
10001598:	10c5883a 	add	r2,r2,r3
1000159c:	10800104 	addi	r2,r2,4
100015a0:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = 0;
100015a4:	00840074 	movhi	r2,4097
100015a8:	10a40b04 	addi	r2,r2,-28628
100015ac:	e0ffff17 	ldw	r3,-4(fp)
100015b0:	1806917a 	slli	r3,r3,5
100015b4:	10c5883a 	add	r2,r2,r3
100015b8:	10800204 	addi	r2,r2,8
100015bc:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectState = 0;
100015c0:	00840074 	movhi	r2,4097
100015c4:	10a40b04 	addi	r2,r2,-28628
100015c8:	e0ffff17 	ldw	r3,-4(fp)
100015cc:	1806917a 	slli	r3,r3,5
100015d0:	10c5883a 	add	r2,r2,r3
100015d4:	10800304 	addi	r2,r2,12
100015d8:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = 0;
100015dc:	00840074 	movhi	r2,4097
100015e0:	10a40b04 	addi	r2,r2,-28628
100015e4:	e0ffff17 	ldw	r3,-4(fp)
100015e8:	1806917a 	slli	r3,r3,5
100015ec:	10c5883a 	add	r2,r2,r3
100015f0:	10800404 	addi	r2,r2,16
100015f4:	10000015 	stw	zero,0(r2)
100015f8:	10000115 	stw	zero,4(r2)
			veggieObject[i].yVelocity = 0;
100015fc:	00840074 	movhi	r2,4097
10001600:	10a40b04 	addi	r2,r2,-28628
10001604:	e0ffff17 	ldw	r3,-4(fp)
10001608:	1806917a 	slli	r3,r3,5
1000160c:	10c5883a 	add	r2,r2,r3
10001610:	10800604 	addi	r2,r2,24
10001614:	10000015 	stw	zero,0(r2)
10001618:	10000115 	stw	zero,4(r2)
1000161c:	00001406 	br	10001670 <disintegrateEngine+0x1b4>
		}
		else if((veggieObject[i].objectState == 3) && (i == 9))
10001620:	00840074 	movhi	r2,4097
10001624:	10a40b04 	addi	r2,r2,-28628
10001628:	e0ffff17 	ldw	r3,-4(fp)
1000162c:	1806917a 	slli	r3,r3,5
10001630:	10c5883a 	add	r2,r2,r3
10001634:	10800304 	addi	r2,r2,12
10001638:	10800017 	ldw	r2,0(r2)
1000163c:	108000d8 	cmpnei	r2,r2,3
10001640:	10000b1e 	bne	r2,zero,10001670 <disintegrateEngine+0x1b4>
10001644:	e0bfff17 	ldw	r2,-4(fp)
10001648:	10800258 	cmpnei	r2,r2,9
1000164c:	1000081e 	bne	r2,zero,10001670 <disintegrateEngine+0x1b4>
		{
			veggieObject[i].objectState = 4;
10001650:	00840074 	movhi	r2,4097
10001654:	10a40b04 	addi	r2,r2,-28628
10001658:	e0ffff17 	ldw	r3,-4(fp)
1000165c:	1806917a 	slli	r3,r3,5
10001660:	10c5883a 	add	r2,r2,r3
10001664:	10800304 	addi	r2,r2,12
10001668:	00c00104 	movi	r3,4
1000166c:	10c00015 	stw	r3,0(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
10001670:	e0bfff17 	ldw	r2,-4(fp)
10001674:	10800044 	addi	r2,r2,1
10001678:	e0bfff15 	stw	r2,-4(fp)
1000167c:	e0bfff17 	ldw	r2,-4(fp)
10001680:	10800290 	cmplti	r2,r2,10
10001684:	103f931e 	bne	r2,zero,100014d4 <__alt_data_end+0xf80014d4>
		else if((veggieObject[i].objectState == 3) && (i == 9))
		{
			veggieObject[i].objectState = 4;
		}
	}
}
10001688:	e037883a 	mov	sp,fp
1000168c:	df000017 	ldw	fp,0(sp)
10001690:	dec00104 	addi	sp,sp,4
10001694:	f800283a 	ret

10001698 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10001698:	deffef04 	addi	sp,sp,-68
1000169c:	dfc01015 	stw	ra,64(sp)
100016a0:	df000f15 	stw	fp,60(sp)
100016a4:	df000f04 	addi	fp,sp,60
	// start putting in our xcoords
	unsigned int FPGAmessage[10];
	int i;
	for(i=0; i<10; i++)
100016a8:	e03ff515 	stw	zero,-44(fp)
100016ac:	00001106 	br	100016f4 <FPGAcommunicator+0x5c>
	{
		FPGAmessage[i] = veggieObject[i].xPosition;
100016b0:	00840074 	movhi	r2,4097
100016b4:	10a40b04 	addi	r2,r2,-28628
100016b8:	e0fff517 	ldw	r3,-44(fp)
100016bc:	1806917a 	slli	r3,r3,5
100016c0:	10c5883a 	add	r2,r2,r3
100016c4:	10800017 	ldw	r2,0(r2)
100016c8:	1007883a 	mov	r3,r2
100016cc:	e0bff517 	ldw	r2,-44(fp)
100016d0:	1085883a 	add	r2,r2,r2
100016d4:	1085883a 	add	r2,r2,r2
100016d8:	e13ff504 	addi	r4,fp,-44
100016dc:	2085883a 	add	r2,r4,r2
100016e0:	10800104 	addi	r2,r2,4
100016e4:	10c00015 	stw	r3,0(r2)
void FPGAcommunicator()
{
	// start putting in our xcoords
	unsigned int FPGAmessage[10];
	int i;
	for(i=0; i<10; i++)
100016e8:	e0bff517 	ldw	r2,-44(fp)
100016ec:	10800044 	addi	r2,r2,1
100016f0:	e0bff515 	stw	r2,-44(fp)
100016f4:	e0bff517 	ldw	r2,-44(fp)
100016f8:	10800290 	cmplti	r2,r2,10
100016fc:	103fec1e 	bne	r2,zero,100016b0 <__alt_data_end+0xf80016b0>
	{
		FPGAmessage[i] = veggieObject[i].xPosition;
	}

	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10001700:	00801c04 	movi	r2,112
10001704:	00c00044 	movi	r3,1
10001708:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
1000170c:	00804004 	movi	r2,256
10001710:	e0fff617 	ldw	r3,-40(fp)
10001714:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001718:	00803c04 	movi	r2,240
1000171c:	e0fff717 	ldw	r3,-36(fp)
10001720:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001724:	00803804 	movi	r2,224
10001728:	e0fff817 	ldw	r3,-32(fp)
1000172c:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001730:	00803404 	movi	r2,208
10001734:	e0fff917 	ldw	r3,-28(fp)
10001738:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
1000173c:	00803004 	movi	r2,192
10001740:	e0fffa17 	ldw	r3,-24(fp)
10001744:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001748:	00802c04 	movi	r2,176
1000174c:	e0fffb17 	ldw	r3,-20(fp)
10001750:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001754:	00802804 	movi	r2,160
10001758:	e0fffc17 	ldw	r3,-16(fp)
1000175c:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001760:	00801804 	movi	r2,96
10001764:	e0fffd17 	ldw	r3,-12(fp)
10001768:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
1000176c:	00802404 	movi	r2,144
10001770:	e0fffe17 	ldw	r3,-8(fp)
10001774:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001778:	00802004 	movi	r2,128
1000177c:	e0ffff17 	ldw	r3,-4(fp)
10001780:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response

	for(i=0; i<10; i++)
10001784:	e03ff515 	stw	zero,-44(fp)
10001788:	00001206 	br	100017d4 <FPGAcommunicator+0x13c>
	{
		FPGAmessage[i] = veggieObject[i].yPosition;
1000178c:	00840074 	movhi	r2,4097
10001790:	10a40b04 	addi	r2,r2,-28628
10001794:	e0fff517 	ldw	r3,-44(fp)
10001798:	1806917a 	slli	r3,r3,5
1000179c:	10c5883a 	add	r2,r2,r3
100017a0:	10800104 	addi	r2,r2,4
100017a4:	10800017 	ldw	r2,0(r2)
100017a8:	1007883a 	mov	r3,r2
100017ac:	e0bff517 	ldw	r2,-44(fp)
100017b0:	1085883a 	add	r2,r2,r2
100017b4:	1085883a 	add	r2,r2,r2
100017b8:	e13ff504 	addi	r4,fp,-44
100017bc:	2085883a 	add	r2,r4,r2
100017c0:	10800104 	addi	r2,r2,4
100017c4:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response

	for(i=0; i<10; i++)
100017c8:	e0bff517 	ldw	r2,-44(fp)
100017cc:	10800044 	addi	r2,r2,1
100017d0:	e0bff515 	stw	r2,-44(fp)
100017d4:	e0bff517 	ldw	r2,-44(fp)
100017d8:	10800290 	cmplti	r2,r2,10
100017dc:	103feb1e 	bne	r2,zero,1000178c <__alt_data_end+0xf800178c>
	{
		FPGAmessage[i] = veggieObject[i].yPosition;
	}
	while(*to_sw_sig != 1);
100017e0:	0001883a 	nop
100017e4:	00801404 	movi	r2,80
100017e8:	10800003 	ldbu	r2,0(r2)
100017ec:	10803fcc 	andi	r2,r2,255
100017f0:	1080201c 	xori	r2,r2,128
100017f4:	10bfe004 	addi	r2,r2,-128
100017f8:	10800058 	cmpnei	r2,r2,1
100017fc:	103ff91e 	bne	r2,zero,100017e4 <__alt_data_end+0xf80017e4>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
10001800:	00801c04 	movi	r2,112
10001804:	00c00084 	movi	r3,2
10001808:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
1000180c:	00804004 	movi	r2,256
10001810:	e0fff617 	ldw	r3,-40(fp)
10001814:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001818:	00803c04 	movi	r2,240
1000181c:	e0fff717 	ldw	r3,-36(fp)
10001820:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001824:	00803804 	movi	r2,224
10001828:	e0fff817 	ldw	r3,-32(fp)
1000182c:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001830:	00803404 	movi	r2,208
10001834:	e0fff917 	ldw	r3,-28(fp)
10001838:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
1000183c:	00803004 	movi	r2,192
10001840:	e0fffa17 	ldw	r3,-24(fp)
10001844:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001848:	00802c04 	movi	r2,176
1000184c:	e0fffb17 	ldw	r3,-20(fp)
10001850:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001854:	00802804 	movi	r2,160
10001858:	e0fffc17 	ldw	r3,-16(fp)
1000185c:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001860:	00801804 	movi	r2,96
10001864:	e0fffd17 	ldw	r3,-12(fp)
10001868:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
1000186c:	00802404 	movi	r2,144
10001870:	e0fffe17 	ldw	r3,-8(fp)
10001874:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001878:	00802004 	movi	r2,128
1000187c:	e0ffff17 	ldw	r3,-4(fp)
10001880:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].yPosition;
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	FPGAmessage[0] = messagePackager(veggieObject[0]);
10001884:	00840074 	movhi	r2,4097
10001888:	10a40b04 	addi	r2,r2,-28628
1000188c:	10c00417 	ldw	r3,16(r2)
10001890:	d8c00015 	stw	r3,0(sp)
10001894:	10c00517 	ldw	r3,20(r2)
10001898:	d8c00115 	stw	r3,4(sp)
1000189c:	10c00617 	ldw	r3,24(r2)
100018a0:	d8c00215 	stw	r3,8(sp)
100018a4:	10c00717 	ldw	r3,28(r2)
100018a8:	d8c00315 	stw	r3,12(sp)
100018ac:	11000017 	ldw	r4,0(r2)
100018b0:	11400117 	ldw	r5,4(r2)
100018b4:	11800217 	ldw	r6,8(r2)
100018b8:	11c00317 	ldw	r7,12(r2)
100018bc:	0001a080 	call	10001a08 <messagePackager>
100018c0:	e0bff615 	stw	r2,-40(fp)
	for(i=1; i<10; i++)
100018c4:	00800044 	movi	r2,1
100018c8:	e0bff515 	stw	r2,-44(fp)
100018cc:	00001206 	br	10001918 <FPGAcommunicator+0x280>
	{
		FPGAmessage[i] = veggieObject[i].objectState;
100018d0:	00840074 	movhi	r2,4097
100018d4:	10a40b04 	addi	r2,r2,-28628
100018d8:	e0fff517 	ldw	r3,-44(fp)
100018dc:	1806917a 	slli	r3,r3,5
100018e0:	10c5883a 	add	r2,r2,r3
100018e4:	10800304 	addi	r2,r2,12
100018e8:	10800017 	ldw	r2,0(r2)
100018ec:	1007883a 	mov	r3,r2
100018f0:	e0bff517 	ldw	r2,-44(fp)
100018f4:	1085883a 	add	r2,r2,r2
100018f8:	1085883a 	add	r2,r2,r2
100018fc:	e13ff504 	addi	r4,fp,-44
10001900:	2085883a 	add	r2,r4,r2
10001904:	10800104 	addi	r2,r2,4
10001908:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	FPGAmessage[0] = messagePackager(veggieObject[0]);
	for(i=1; i<10; i++)
1000190c:	e0bff517 	ldw	r2,-44(fp)
10001910:	10800044 	addi	r2,r2,1
10001914:	e0bff515 	stw	r2,-44(fp)
10001918:	e0bff517 	ldw	r2,-44(fp)
1000191c:	10800290 	cmplti	r2,r2,10
10001920:	103feb1e 	bne	r2,zero,100018d0 <__alt_data_end+0xf80018d0>
	{
		FPGAmessage[i] = veggieObject[i].objectState;
	}
	// wait for confirmation
	while(*to_sw_sig != 2);
10001924:	0001883a 	nop
10001928:	00801404 	movi	r2,80
1000192c:	10800003 	ldbu	r2,0(r2)
10001930:	10803fcc 	andi	r2,r2,255
10001934:	1080201c 	xori	r2,r2,128
10001938:	10bfe004 	addi	r2,r2,-128
1000193c:	10800098 	cmpnei	r2,r2,2
10001940:	103ff91e 	bne	r2,zero,10001928 <__alt_data_end+0xf8001928>
	// printf("fpgamessage is %lu   \n", FPGAmessage);

	*to_hw_sig = 3;		// our final sending
10001944:	00801c04 	movi	r2,112
10001948:	00c000c4 	movi	r3,3
1000194c:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001950:	00804004 	movi	r2,256
10001954:	e0fff617 	ldw	r3,-40(fp)
10001958:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
1000195c:	00803c04 	movi	r2,240
10001960:	e0fff717 	ldw	r3,-36(fp)
10001964:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001968:	00803804 	movi	r2,224
1000196c:	e0fff817 	ldw	r3,-32(fp)
10001970:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001974:	00803404 	movi	r2,208
10001978:	e0fff917 	ldw	r3,-28(fp)
1000197c:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10001980:	00803004 	movi	r2,192
10001984:	e0fffa17 	ldw	r3,-24(fp)
10001988:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
1000198c:	00802c04 	movi	r2,176
10001990:	e0fffb17 	ldw	r3,-20(fp)
10001994:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001998:	00802804 	movi	r2,160
1000199c:	e0fffc17 	ldw	r3,-16(fp)
100019a0:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
100019a4:	00801804 	movi	r2,96
100019a8:	e0fffd17 	ldw	r3,-12(fp)
100019ac:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
100019b0:	00802404 	movi	r2,144
100019b4:	e0fffe17 	ldw	r3,-8(fp)
100019b8:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
100019bc:	00802004 	movi	r2,128
100019c0:	e0ffff17 	ldw	r3,-4(fp)
100019c4:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].objectState;
	*to_hw_port14 = veggieObject[14].objectState;
	*to_hw_port15 = veggieObject[15].objectState;
*/
	// last confirmation
	while(*to_sw_sig != 3);
100019c8:	0001883a 	nop
100019cc:	00801404 	movi	r2,80
100019d0:	10800003 	ldbu	r2,0(r2)
100019d4:	10803fcc 	andi	r2,r2,255
100019d8:	1080201c 	xori	r2,r2,128
100019dc:	10bfe004 	addi	r2,r2,-128
100019e0:	108000d8 	cmpnei	r2,r2,3
100019e4:	103ff91e 	bne	r2,zero,100019cc <__alt_data_end+0xf80019cc>
	*to_hw_sig = 0;
100019e8:	00801c04 	movi	r2,112
100019ec:	10000005 	stb	zero,0(r2)

	return;
100019f0:	0001883a 	nop
}
100019f4:	e037883a 	mov	sp,fp
100019f8:	dfc00117 	ldw	ra,4(sp)
100019fc:	df000017 	ldw	fp,0(sp)
10001a00:	dec00204 	addi	sp,sp,8
10001a04:	f800283a 	ret

10001a08 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10001a08:	defff404 	addi	sp,sp,-48
10001a0c:	dfc00715 	stw	ra,28(sp)
10001a10:	df000615 	stw	fp,24(sp)
10001a14:	dc400515 	stw	r17,20(sp)
10001a18:	dc000415 	stw	r16,16(sp)
10001a1c:	df000604 	addi	fp,sp,24
10001a20:	e1000215 	stw	r4,8(fp)
10001a24:	e1400315 	stw	r5,12(fp)
10001a28:	e1800415 	stw	r6,16(fp)
10001a2c:	e1c00515 	stw	r7,20(fp)

	// make our specific variables
	unsigned long tempType, tempState;

	// grab our stuff from the struct
	tempType = specifiedObject.objectType;
10001a30:	e0800417 	ldw	r2,16(fp)
10001a34:	e0bffa15 	stw	r2,-24(fp)
	tempState = specifiedObject.objectState;
10001a38:	e0800517 	ldw	r2,20(fp)
10001a3c:	e0bffb15 	stw	r2,-20(fp)

	// and convert stuff to binary!
	tempType = convertDecimalToBinary(tempType);
10001a40:	e13ffa17 	ldw	r4,-24(fp)
10001a44:	0001bc80 	call	10001bc8 <convertDecimalToBinary>
10001a48:	e0bffa15 	stw	r2,-24(fp)
	tempState = convertDecimalToBinary(tempState);
10001a4c:	e13ffb17 	ldw	r4,-20(fp)
10001a50:	0001bc80 	call	10001bc8 <convertDecimalToBinary>
10001a54:	e0bffb15 	stw	r2,-20(fp)
//	printf("tempY: %llu   ", tempY);
//	printf("tempType: %lu   ", tempType);
//	printf("tempState: %lu   \n", tempState);

	// now we append everything together!
	tempBinary = tempState + tempType*1000;
10001a58:	e13ffa17 	ldw	r4,-24(fp)
10001a5c:	0140fa04 	movi	r5,1000
10001a60:	0002aa00 	call	10002aa0 <__mulsi3>
10001a64:	1007883a 	mov	r3,r2
10001a68:	e0bffb17 	ldw	r2,-20(fp)
10001a6c:	1885883a 	add	r2,r3,r2
10001a70:	e0bffc15 	stw	r2,-16(fp)
//		printf("tempBinary: %lu   ", tempBinary);

	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001a74:	e0bffc17 	ldw	r2,-16(fp)
10001a78:	1021883a 	mov	r16,r2
10001a7c:	0023883a 	mov	r17,zero
10001a80:	8009883a 	mov	r4,r16
10001a84:	880b883a 	mov	r5,r17
10001a88:	0001c300 	call	10001c30 <convertBinaryToDecimal>
10001a8c:	e0bffd15 	stw	r2,-12(fp)

	// and return it!
	return tempDecimal;
10001a90:	e0bffd17 	ldw	r2,-12(fp)
}
10001a94:	e6fffe04 	addi	sp,fp,-8
10001a98:	dfc00317 	ldw	ra,12(sp)
10001a9c:	df000217 	ldw	fp,8(sp)
10001aa0:	dc400117 	ldw	r17,4(sp)
10001aa4:	dc000017 	ldw	r16,0(sp)
10001aa8:	dec00804 	addi	sp,sp,32
10001aac:	f800283a 	ret

10001ab0 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001ab0:	defff704 	addi	sp,sp,-36
10001ab4:	dfc00815 	stw	ra,32(sp)
10001ab8:	df000715 	stw	fp,28(sp)
10001abc:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001ac0:	00804404 	movi	r2,272
10001ac4:	10800003 	ldbu	r2,0(r2)
10001ac8:	10803fcc 	andi	r2,r2,255
10001acc:	1080201c 	xori	r2,r2,128
10001ad0:	10bfe004 	addi	r2,r2,-128
10001ad4:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001ad8:	e13ff917 	ldw	r4,-28(fp)
10001adc:	0001bc80 	call	10001bc8 <convertDecimalToBinary>
10001ae0:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001ae4:	e03ffa15 	stw	zero,-24(fp)
10001ae8:	00001406 	br	10001b3c <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001aec:	e0bff917 	ldw	r2,-28(fp)
10001af0:	1009883a 	mov	r4,r2
10001af4:	01400284 	movi	r5,10
10001af8:	0002a980 	call	10002a98 <__umodsi3>
10001afc:	1007883a 	mov	r3,r2
10001b00:	e0bffa17 	ldw	r2,-24(fp)
10001b04:	1085883a 	add	r2,r2,r2
10001b08:	1085883a 	add	r2,r2,r2
10001b0c:	e13ff904 	addi	r4,fp,-28
10001b10:	2085883a 	add	r2,r4,r2
10001b14:	10800204 	addi	r2,r2,8
10001b18:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001b1c:	e0bff917 	ldw	r2,-28(fp)
10001b20:	1009883a 	mov	r4,r2
10001b24:	01400284 	movi	r5,10
10001b28:	0002a900 	call	10002a90 <__udivsi3>
10001b2c:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001b30:	e0bffa17 	ldw	r2,-24(fp)
10001b34:	10800044 	addi	r2,r2,1
10001b38:	e0bffa15 	stw	r2,-24(fp)
10001b3c:	e0bffa17 	ldw	r2,-24(fp)
10001b40:	10800150 	cmplti	r2,r2,5
10001b44:	103fe91e 	bne	r2,zero,10001aec <__alt_data_end+0xf8001aec>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001b48:	e0bffd17 	ldw	r2,-12(fp)
10001b4c:	d0a5ac15 	stw	r2,-26960(gp)
	key2 = unpackaged[3];
10001b50:	e0bffe17 	ldw	r2,-8(fp)
10001b54:	d0a5af15 	stw	r2,-26948(gp)
	key3 = unpackaged[4];
10001b58:	e0bfff17 	ldw	r2,-4(fp)
10001b5c:	d0a5ad15 	stw	r2,-26956(gp)
	cursorStreak = unpackaged[0];
10001b60:	e0bffb17 	ldw	r2,-20(fp)
10001b64:	d0a5a715 	stw	r2,-26980(gp)
	cursorClicked = unpackaged[1];
10001b68:	e0bffc17 	ldw	r2,-16(fp)
10001b6c:	d0a5a615 	stw	r2,-26984(gp)
	xCursor = *to_sw_port3;
10001b70:	00806004 	movi	r2,384
10001b74:	10800017 	ldw	r2,0(r2)
10001b78:	d0a5a415 	stw	r2,-26992(gp)
	yCursor = *to_sw_port4;
10001b7c:	00805c04 	movi	r2,368
10001b80:	10800017 	ldw	r2,0(r2)
10001b84:	d0a5a315 	stw	r2,-26996(gp)

	if(cursorStreak == 0)	// reset combo if cursor no longer streaking
10001b88:	d0a5a717 	ldw	r2,-26980(gp)
10001b8c:	1000011e 	bne	r2,zero,10001b94 <port2Unpackager+0xe4>
	{
		comboFruit = 0;
10001b90:	d025b215 	stw	zero,-26936(gp)
	}

	if(veggieObject[0].xPosition < 0)	// also don't let score go below zero
10001b94:	00840074 	movhi	r2,4097
10001b98:	10a40b04 	addi	r2,r2,-28628
10001b9c:	10800017 	ldw	r2,0(r2)
10001ba0:	1000030e 	bge	r2,zero,10001bb0 <port2Unpackager+0x100>
	{
		veggieObject[0].xPosition = 0;
10001ba4:	00840074 	movhi	r2,4097
10001ba8:	10a40b04 	addi	r2,r2,-28628
10001bac:	10000015 	stw	zero,0(r2)
	}

	return;
10001bb0:	0001883a 	nop
}
10001bb4:	e037883a 	mov	sp,fp
10001bb8:	dfc00117 	ldw	ra,4(sp)
10001bbc:	df000017 	ldw	fp,0(sp)
10001bc0:	dec00204 	addi	sp,sp,8
10001bc4:	f800283a 	ret

10001bc8 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001bc8:	defffc04 	addi	sp,sp,-16
10001bcc:	dfc00315 	stw	ra,12(sp)
10001bd0:	df000215 	stw	fp,8(sp)
10001bd4:	dc000115 	stw	r16,4(sp)
10001bd8:	df000204 	addi	fp,sp,8
10001bdc:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
10001be0:	e0bffe17 	ldw	r2,-8(fp)
10001be4:	1000021e 	bne	r2,zero,10001bf0 <convertDecimalToBinary+0x28>
    {
        return 0;
10001be8:	0005883a 	mov	r2,zero
10001bec:	00000a06 	br	10001c18 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001bf0:	e0bffe17 	ldw	r2,-8(fp)
10001bf4:	1400004c 	andi	r16,r2,1
10001bf8:	e0bffe17 	ldw	r2,-8(fp)
10001bfc:	1004d07a 	srli	r2,r2,1
10001c00:	1009883a 	mov	r4,r2
10001c04:	0001bc80 	call	10001bc8 <convertDecimalToBinary>
10001c08:	1009883a 	mov	r4,r2
10001c0c:	01400284 	movi	r5,10
10001c10:	0002aa00 	call	10002aa0 <__mulsi3>
10001c14:	8085883a 	add	r2,r16,r2
    }
}
10001c18:	e6ffff04 	addi	sp,fp,-4
10001c1c:	dfc00217 	ldw	ra,8(sp)
10001c20:	df000117 	ldw	fp,4(sp)
10001c24:	dc000017 	ldw	r16,0(sp)
10001c28:	dec00304 	addi	sp,sp,12
10001c2c:	f800283a 	ret

10001c30 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001c30:	defffa04 	addi	sp,sp,-24
10001c34:	dfc00515 	stw	ra,20(sp)
10001c38:	df000415 	stw	fp,16(sp)
10001c3c:	df000404 	addi	fp,sp,16
10001c40:	e13ffe15 	stw	r4,-8(fp)
10001c44:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001c48:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001c4c:	e03ffd15 	stw	zero,-12(fp)
10001c50:	00002706 	br	10001cf0 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
10001c54:	e0bffe17 	ldw	r2,-8(fp)
10001c58:	e0ffff17 	ldw	r3,-4(fp)
10001c5c:	01c00284 	movi	r7,10
10001c60:	0011883a 	mov	r8,zero
10001c64:	1009883a 	mov	r4,r2
10001c68:	180b883a 	mov	r5,r3
10001c6c:	380d883a 	mov	r6,r7
10001c70:	400f883a 	mov	r7,r8
10001c74:	00023580 	call	10002358 <__umoddi3>
10001c78:	1009883a 	mov	r4,r2
10001c7c:	180b883a 	mov	r5,r3
10001c80:	2005883a 	mov	r2,r4
10001c84:	2807883a 	mov	r3,r5
10001c88:	11000058 	cmpnei	r4,r2,1
10001c8c:	2000081e 	bne	r4,zero,10001cb0 <convertBinaryToDecimal+0x80>
10001c90:	1800071e 	bne	r3,zero,10001cb0 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001c94:	00c00044 	movi	r3,1
10001c98:	e0bffd17 	ldw	r2,-12(fp)
10001c9c:	1884983a 	sll	r2,r3,r2
10001ca0:	1007883a 	mov	r3,r2
10001ca4:	e0bffc17 	ldw	r2,-16(fp)
10001ca8:	10c5883a 	add	r2,r2,r3
10001cac:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001cb0:	e0bffe17 	ldw	r2,-8(fp)
10001cb4:	e0ffff17 	ldw	r3,-4(fp)
10001cb8:	01c00284 	movi	r7,10
10001cbc:	0011883a 	mov	r8,zero
10001cc0:	1009883a 	mov	r4,r2
10001cc4:	180b883a 	mov	r5,r3
10001cc8:	380d883a 	mov	r6,r7
10001ccc:	400f883a 	mov	r7,r8
10001cd0:	0001d180 	call	10001d18 <__udivdi3>
10001cd4:	1009883a 	mov	r4,r2
10001cd8:	180b883a 	mov	r5,r3
10001cdc:	e13ffe15 	stw	r4,-8(fp)
10001ce0:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001ce4:	e0bffd17 	ldw	r2,-12(fp)
10001ce8:	10800044 	addi	r2,r2,1
10001cec:	e0bffd15 	stw	r2,-12(fp)
10001cf0:	e0bffe17 	ldw	r2,-8(fp)
10001cf4:	e0ffff17 	ldw	r3,-4(fp)
10001cf8:	10c4b03a 	or	r2,r2,r3
10001cfc:	103fd51e 	bne	r2,zero,10001c54 <__alt_data_end+0xf8001c54>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
10001d00:	e0bffc17 	ldw	r2,-16(fp)
}
10001d04:	e037883a 	mov	sp,fp
10001d08:	dfc00117 	ldw	ra,4(sp)
10001d0c:	df000017 	ldw	fp,0(sp)
10001d10:	dec00204 	addi	sp,sp,8
10001d14:	f800283a 	ret

10001d18 <__udivdi3>:
10001d18:	defff504 	addi	sp,sp,-44
10001d1c:	dcc00415 	stw	r19,16(sp)
10001d20:	dc000115 	stw	r16,4(sp)
10001d24:	dfc00a15 	stw	ra,40(sp)
10001d28:	df000915 	stw	fp,36(sp)
10001d2c:	ddc00815 	stw	r23,32(sp)
10001d30:	dd800715 	stw	r22,28(sp)
10001d34:	dd400615 	stw	r21,24(sp)
10001d38:	dd000515 	stw	r20,20(sp)
10001d3c:	dc800315 	stw	r18,12(sp)
10001d40:	dc400215 	stw	r17,8(sp)
10001d44:	2027883a 	mov	r19,r4
10001d48:	2821883a 	mov	r16,r5
10001d4c:	3800471e 	bne	r7,zero,10001e6c <__udivdi3+0x154>
10001d50:	3025883a 	mov	r18,r6
10001d54:	2023883a 	mov	r17,r4
10001d58:	2980592e 	bgeu	r5,r6,10001ec0 <__udivdi3+0x1a8>
10001d5c:	00bfffd4 	movui	r2,65535
10001d60:	2829883a 	mov	r20,r5
10001d64:	1180b236 	bltu	r2,r6,10002030 <__udivdi3+0x318>
10001d68:	00803fc4 	movi	r2,255
10001d6c:	1181622e 	bgeu	r2,r6,100022f8 <__udivdi3+0x5e0>
10001d70:	00800204 	movi	r2,8
10001d74:	1007883a 	mov	r3,r2
10001d78:	3084d83a 	srl	r2,r6,r2
10001d7c:	01040034 	movhi	r4,4096
10001d80:	21187704 	addi	r4,r4,25052
10001d84:	2085883a 	add	r2,r4,r2
10001d88:	11000003 	ldbu	r4,0(r2)
10001d8c:	20c9883a 	add	r4,r4,r3
10001d90:	00c00804 	movi	r3,32
10001d94:	1907c83a 	sub	r3,r3,r4
10001d98:	18000526 	beq	r3,zero,10001db0 <__udivdi3+0x98>
10001d9c:	80e0983a 	sll	r16,r16,r3
10001da0:	9908d83a 	srl	r4,r19,r4
10001da4:	30e4983a 	sll	r18,r6,r3
10001da8:	98e2983a 	sll	r17,r19,r3
10001dac:	8128b03a 	or	r20,r16,r4
10001db0:	902ad43a 	srli	r21,r18,16
10001db4:	a009883a 	mov	r4,r20
10001db8:	95bfffcc 	andi	r22,r18,65535
10001dbc:	a80b883a 	mov	r5,r21
10001dc0:	0002a980 	call	10002a98 <__umodsi3>
10001dc4:	a009883a 	mov	r4,r20
10001dc8:	a80b883a 	mov	r5,r21
10001dcc:	102f883a 	mov	r23,r2
10001dd0:	0002a900 	call	10002a90 <__udivsi3>
10001dd4:	1009883a 	mov	r4,r2
10001dd8:	b00b883a 	mov	r5,r22
10001ddc:	1021883a 	mov	r16,r2
10001de0:	0002aa00 	call	10002aa0 <__mulsi3>
10001de4:	b82e943a 	slli	r23,r23,16
10001de8:	8808d43a 	srli	r4,r17,16
10001dec:	b906b03a 	or	r3,r23,r4
10001df0:	1880052e 	bgeu	r3,r2,10001e08 <__udivdi3+0xf0>
10001df4:	1c87883a 	add	r3,r3,r18
10001df8:	813fffc4 	addi	r4,r16,-1
10001dfc:	1c800136 	bltu	r3,r18,10001e04 <__udivdi3+0xec>
10001e00:	18815236 	bltu	r3,r2,1000234c <__udivdi3+0x634>
10001e04:	2021883a 	mov	r16,r4
10001e08:	18a7c83a 	sub	r19,r3,r2
10001e0c:	9809883a 	mov	r4,r19
10001e10:	a80b883a 	mov	r5,r21
10001e14:	0002a980 	call	10002a98 <__umodsi3>
10001e18:	1029883a 	mov	r20,r2
10001e1c:	9809883a 	mov	r4,r19
10001e20:	a80b883a 	mov	r5,r21
10001e24:	a028943a 	slli	r20,r20,16
10001e28:	0002a900 	call	10002a90 <__udivsi3>
10001e2c:	1009883a 	mov	r4,r2
10001e30:	b00b883a 	mov	r5,r22
10001e34:	8c7fffcc 	andi	r17,r17,65535
10001e38:	1027883a 	mov	r19,r2
10001e3c:	a462b03a 	or	r17,r20,r17
10001e40:	0002aa00 	call	10002aa0 <__mulsi3>
10001e44:	8880052e 	bgeu	r17,r2,10001e5c <__udivdi3+0x144>
10001e48:	8ca3883a 	add	r17,r17,r18
10001e4c:	98ffffc4 	addi	r3,r19,-1
10001e50:	8c811036 	bltu	r17,r18,10002294 <__udivdi3+0x57c>
10001e54:	88810f2e 	bgeu	r17,r2,10002294 <__udivdi3+0x57c>
10001e58:	9cffff84 	addi	r19,r19,-2
10001e5c:	8020943a 	slli	r16,r16,16
10001e60:	0007883a 	mov	r3,zero
10001e64:	9c04b03a 	or	r2,r19,r16
10001e68:	00006006 	br	10001fec <__udivdi3+0x2d4>
10001e6c:	29c05d36 	bltu	r5,r7,10001fe4 <__udivdi3+0x2cc>
10001e70:	00bfffd4 	movui	r2,65535
10001e74:	11c0692e 	bgeu	r2,r7,1000201c <__udivdi3+0x304>
10001e78:	00804034 	movhi	r2,256
10001e7c:	10bfffc4 	addi	r2,r2,-1
10001e80:	11c10e2e 	bgeu	r2,r7,100022bc <__udivdi3+0x5a4>
10001e84:	01400604 	movi	r5,24
10001e88:	2811883a 	mov	r8,r5
10001e8c:	394ad83a 	srl	r5,r7,r5
10001e90:	00840034 	movhi	r2,4096
10001e94:	10987704 	addi	r2,r2,25052
10001e98:	114b883a 	add	r5,r2,r5
10001e9c:	29400003 	ldbu	r5,0(r5)
10001ea0:	00c00804 	movi	r3,32
10001ea4:	2a0b883a 	add	r5,r5,r8
10001ea8:	196fc83a 	sub	r23,r3,r5
10001eac:	b8006b1e 	bne	r23,zero,1000205c <__udivdi3+0x344>
10001eb0:	3c011436 	bltu	r7,r16,10002304 <__udivdi3+0x5ec>
10001eb4:	9985403a 	cmpgeu	r2,r19,r6
10001eb8:	0007883a 	mov	r3,zero
10001ebc:	00004b06 	br	10001fec <__udivdi3+0x2d4>
10001ec0:	3000041e 	bne	r6,zero,10001ed4 <__udivdi3+0x1bc>
10001ec4:	01000044 	movi	r4,1
10001ec8:	000b883a 	mov	r5,zero
10001ecc:	0002a900 	call	10002a90 <__udivsi3>
10001ed0:	1025883a 	mov	r18,r2
10001ed4:	00bfffd4 	movui	r2,65535
10001ed8:	14805b2e 	bgeu	r2,r18,10002048 <__udivdi3+0x330>
10001edc:	00804034 	movhi	r2,256
10001ee0:	10bfffc4 	addi	r2,r2,-1
10001ee4:	1480fe2e 	bgeu	r2,r18,100022e0 <__udivdi3+0x5c8>
10001ee8:	00800604 	movi	r2,24
10001eec:	1007883a 	mov	r3,r2
10001ef0:	9084d83a 	srl	r2,r18,r2
10001ef4:	01040034 	movhi	r4,4096
10001ef8:	21187704 	addi	r4,r4,25052
10001efc:	2085883a 	add	r2,r4,r2
10001f00:	11800003 	ldbu	r6,0(r2)
10001f04:	01c00804 	movi	r7,32
10001f08:	30c7883a 	add	r3,r6,r3
10001f0c:	38cfc83a 	sub	r7,r7,r3
10001f10:	3800a71e 	bne	r7,zero,100021b0 <__udivdi3+0x498>
10001f14:	9028d43a 	srli	r20,r18,16
10001f18:	84a1c83a 	sub	r16,r16,r18
10001f1c:	957fffcc 	andi	r21,r18,65535
10001f20:	00c00044 	movi	r3,1
10001f24:	8009883a 	mov	r4,r16
10001f28:	a00b883a 	mov	r5,r20
10001f2c:	d8c00015 	stw	r3,0(sp)
10001f30:	0002a980 	call	10002a98 <__umodsi3>
10001f34:	8009883a 	mov	r4,r16
10001f38:	a00b883a 	mov	r5,r20
10001f3c:	102d883a 	mov	r22,r2
10001f40:	0002a900 	call	10002a90 <__udivsi3>
10001f44:	1009883a 	mov	r4,r2
10001f48:	a80b883a 	mov	r5,r21
10001f4c:	1021883a 	mov	r16,r2
10001f50:	0002aa00 	call	10002aa0 <__mulsi3>
10001f54:	b02c943a 	slli	r22,r22,16
10001f58:	880ed43a 	srli	r7,r17,16
10001f5c:	d8c00017 	ldw	r3,0(sp)
10001f60:	b1ccb03a 	or	r6,r22,r7
10001f64:	3080052e 	bgeu	r6,r2,10001f7c <__udivdi3+0x264>
10001f68:	348d883a 	add	r6,r6,r18
10001f6c:	813fffc4 	addi	r4,r16,-1
10001f70:	34800136 	bltu	r6,r18,10001f78 <__udivdi3+0x260>
10001f74:	3080f236 	bltu	r6,r2,10002340 <__udivdi3+0x628>
10001f78:	2021883a 	mov	r16,r4
10001f7c:	30a7c83a 	sub	r19,r6,r2
10001f80:	9809883a 	mov	r4,r19
10001f84:	a00b883a 	mov	r5,r20
10001f88:	d8c00015 	stw	r3,0(sp)
10001f8c:	0002a980 	call	10002a98 <__umodsi3>
10001f90:	102d883a 	mov	r22,r2
10001f94:	9809883a 	mov	r4,r19
10001f98:	a00b883a 	mov	r5,r20
10001f9c:	b02c943a 	slli	r22,r22,16
10001fa0:	0002a900 	call	10002a90 <__udivsi3>
10001fa4:	1009883a 	mov	r4,r2
10001fa8:	a80b883a 	mov	r5,r21
10001fac:	8c7fffcc 	andi	r17,r17,65535
10001fb0:	1027883a 	mov	r19,r2
10001fb4:	b462b03a 	or	r17,r22,r17
10001fb8:	0002aa00 	call	10002aa0 <__mulsi3>
10001fbc:	d8c00017 	ldw	r3,0(sp)
10001fc0:	8880052e 	bgeu	r17,r2,10001fd8 <__udivdi3+0x2c0>
10001fc4:	8ca3883a 	add	r17,r17,r18
10001fc8:	993fffc4 	addi	r4,r19,-1
10001fcc:	8c80af36 	bltu	r17,r18,1000228c <__udivdi3+0x574>
10001fd0:	8880ae2e 	bgeu	r17,r2,1000228c <__udivdi3+0x574>
10001fd4:	9cffff84 	addi	r19,r19,-2
10001fd8:	8020943a 	slli	r16,r16,16
10001fdc:	9c04b03a 	or	r2,r19,r16
10001fe0:	00000206 	br	10001fec <__udivdi3+0x2d4>
10001fe4:	0007883a 	mov	r3,zero
10001fe8:	0005883a 	mov	r2,zero
10001fec:	dfc00a17 	ldw	ra,40(sp)
10001ff0:	df000917 	ldw	fp,36(sp)
10001ff4:	ddc00817 	ldw	r23,32(sp)
10001ff8:	dd800717 	ldw	r22,28(sp)
10001ffc:	dd400617 	ldw	r21,24(sp)
10002000:	dd000517 	ldw	r20,20(sp)
10002004:	dcc00417 	ldw	r19,16(sp)
10002008:	dc800317 	ldw	r18,12(sp)
1000200c:	dc400217 	ldw	r17,8(sp)
10002010:	dc000117 	ldw	r16,4(sp)
10002014:	dec00b04 	addi	sp,sp,44
10002018:	f800283a 	ret
1000201c:	00803fc4 	movi	r2,255
10002020:	11c0a92e 	bgeu	r2,r7,100022c8 <__udivdi3+0x5b0>
10002024:	01400204 	movi	r5,8
10002028:	2811883a 	mov	r8,r5
1000202c:	003f9706 	br	10001e8c <__alt_data_end+0xf8001e8c>
10002030:	00804034 	movhi	r2,256
10002034:	10bfffc4 	addi	r2,r2,-1
10002038:	1180a62e 	bgeu	r2,r6,100022d4 <__udivdi3+0x5bc>
1000203c:	00800604 	movi	r2,24
10002040:	1007883a 	mov	r3,r2
10002044:	003f4c06 	br	10001d78 <__alt_data_end+0xf8001d78>
10002048:	00803fc4 	movi	r2,255
1000204c:	1480a72e 	bgeu	r2,r18,100022ec <__udivdi3+0x5d4>
10002050:	00800204 	movi	r2,8
10002054:	1007883a 	mov	r3,r2
10002058:	003fa506 	br	10001ef0 <__alt_data_end+0xf8001ef0>
1000205c:	3178d83a 	srl	fp,r6,r5
10002060:	3dce983a 	sll	r7,r7,r23
10002064:	8168d83a 	srl	r20,r16,r5
10002068:	9950d83a 	srl	r8,r19,r5
1000206c:	3f38b03a 	or	fp,r7,fp
10002070:	e024d43a 	srli	r18,fp,16
10002074:	85e0983a 	sll	r16,r16,r23
10002078:	a009883a 	mov	r4,r20
1000207c:	900b883a 	mov	r5,r18
10002080:	8220b03a 	or	r16,r16,r8
10002084:	35ea983a 	sll	r21,r6,r23
10002088:	0002a980 	call	10002a98 <__umodsi3>
1000208c:	a009883a 	mov	r4,r20
10002090:	900b883a 	mov	r5,r18
10002094:	1023883a 	mov	r17,r2
10002098:	e5bfffcc 	andi	r22,fp,65535
1000209c:	0002a900 	call	10002a90 <__udivsi3>
100020a0:	1009883a 	mov	r4,r2
100020a4:	b00b883a 	mov	r5,r22
100020a8:	1029883a 	mov	r20,r2
100020ac:	0002aa00 	call	10002aa0 <__mulsi3>
100020b0:	8806943a 	slli	r3,r17,16
100020b4:	8014d43a 	srli	r10,r16,16
100020b8:	1a92b03a 	or	r9,r3,r10
100020bc:	4880042e 	bgeu	r9,r2,100020d0 <__udivdi3+0x3b8>
100020c0:	4f13883a 	add	r9,r9,fp
100020c4:	a0ffffc4 	addi	r3,r20,-1
100020c8:	4f00952e 	bgeu	r9,fp,10002320 <__udivdi3+0x608>
100020cc:	1829883a 	mov	r20,r3
100020d0:	48a3c83a 	sub	r17,r9,r2
100020d4:	8809883a 	mov	r4,r17
100020d8:	900b883a 	mov	r5,r18
100020dc:	0002a980 	call	10002a98 <__umodsi3>
100020e0:	8809883a 	mov	r4,r17
100020e4:	900b883a 	mov	r5,r18
100020e8:	d8800015 	stw	r2,0(sp)
100020ec:	0002a900 	call	10002a90 <__udivsi3>
100020f0:	1009883a 	mov	r4,r2
100020f4:	b00b883a 	mov	r5,r22
100020f8:	1023883a 	mov	r17,r2
100020fc:	0002aa00 	call	10002aa0 <__mulsi3>
10002100:	d8c00017 	ldw	r3,0(sp)
10002104:	823fffcc 	andi	r8,r16,65535
10002108:	1806943a 	slli	r3,r3,16
1000210c:	1a20b03a 	or	r16,r3,r8
10002110:	8080042e 	bgeu	r16,r2,10002124 <__udivdi3+0x40c>
10002114:	8721883a 	add	r16,r16,fp
10002118:	88ffffc4 	addi	r3,r17,-1
1000211c:	87007c2e 	bgeu	r16,fp,10002310 <__udivdi3+0x5f8>
10002120:	1823883a 	mov	r17,r3
10002124:	a028943a 	slli	r20,r20,16
10002128:	acbfffcc 	andi	r18,r21,65535
1000212c:	900b883a 	mov	r5,r18
10002130:	8d28b03a 	or	r20,r17,r20
10002134:	a022d43a 	srli	r17,r20,16
10002138:	a5bfffcc 	andi	r22,r20,65535
1000213c:	b009883a 	mov	r4,r22
10002140:	a82ad43a 	srli	r21,r21,16
10002144:	80a1c83a 	sub	r16,r16,r2
10002148:	0002aa00 	call	10002aa0 <__mulsi3>
1000214c:	8809883a 	mov	r4,r17
10002150:	900b883a 	mov	r5,r18
10002154:	1039883a 	mov	fp,r2
10002158:	0002aa00 	call	10002aa0 <__mulsi3>
1000215c:	8809883a 	mov	r4,r17
10002160:	a80b883a 	mov	r5,r21
10002164:	1025883a 	mov	r18,r2
10002168:	0002aa00 	call	10002aa0 <__mulsi3>
1000216c:	b009883a 	mov	r4,r22
10002170:	a80b883a 	mov	r5,r21
10002174:	1023883a 	mov	r17,r2
10002178:	0002aa00 	call	10002aa0 <__mulsi3>
1000217c:	e006d43a 	srli	r3,fp,16
10002180:	9085883a 	add	r2,r18,r2
10002184:	10c7883a 	add	r3,r2,r3
10002188:	1c80022e 	bgeu	r3,r18,10002194 <__udivdi3+0x47c>
1000218c:	00800074 	movhi	r2,1
10002190:	88a3883a 	add	r17,r17,r2
10002194:	1808d43a 	srli	r4,r3,16
10002198:	8909883a 	add	r4,r17,r4
1000219c:	81004436 	bltu	r16,r4,100022b0 <__udivdi3+0x598>
100021a0:	81003e26 	beq	r16,r4,1000229c <__udivdi3+0x584>
100021a4:	a005883a 	mov	r2,r20
100021a8:	0007883a 	mov	r3,zero
100021ac:	003f8f06 	br	10001fec <__alt_data_end+0xf8001fec>
100021b0:	91e4983a 	sll	r18,r18,r7
100021b4:	80eed83a 	srl	r23,r16,r3
100021b8:	81cc983a 	sll	r6,r16,r7
100021bc:	9028d43a 	srli	r20,r18,16
100021c0:	98c6d83a 	srl	r3,r19,r3
100021c4:	b809883a 	mov	r4,r23
100021c8:	a00b883a 	mov	r5,r20
100021cc:	30ecb03a 	or	r22,r6,r3
100021d0:	99e2983a 	sll	r17,r19,r7
100021d4:	0002a980 	call	10002a98 <__umodsi3>
100021d8:	b809883a 	mov	r4,r23
100021dc:	a00b883a 	mov	r5,r20
100021e0:	1021883a 	mov	r16,r2
100021e4:	957fffcc 	andi	r21,r18,65535
100021e8:	0002a900 	call	10002a90 <__udivsi3>
100021ec:	a80b883a 	mov	r5,r21
100021f0:	1009883a 	mov	r4,r2
100021f4:	102f883a 	mov	r23,r2
100021f8:	0002aa00 	call	10002aa0 <__mulsi3>
100021fc:	8020943a 	slli	r16,r16,16
10002200:	b00ad43a 	srli	r5,r22,16
10002204:	814cb03a 	or	r6,r16,r5
10002208:	3080062e 	bgeu	r6,r2,10002224 <__udivdi3+0x50c>
1000220c:	348d883a 	add	r6,r6,r18
10002210:	b8ffffc4 	addi	r3,r23,-1
10002214:	34804836 	bltu	r6,r18,10002338 <__udivdi3+0x620>
10002218:	3080472e 	bgeu	r6,r2,10002338 <__udivdi3+0x620>
1000221c:	bdffff84 	addi	r23,r23,-2
10002220:	348d883a 	add	r6,r6,r18
10002224:	30a7c83a 	sub	r19,r6,r2
10002228:	9809883a 	mov	r4,r19
1000222c:	a00b883a 	mov	r5,r20
10002230:	0002a980 	call	10002a98 <__umodsi3>
10002234:	9809883a 	mov	r4,r19
10002238:	a00b883a 	mov	r5,r20
1000223c:	1039883a 	mov	fp,r2
10002240:	0002a900 	call	10002a90 <__udivsi3>
10002244:	1009883a 	mov	r4,r2
10002248:	a80b883a 	mov	r5,r21
1000224c:	e038943a 	slli	fp,fp,16
10002250:	1027883a 	mov	r19,r2
10002254:	0002aa00 	call	10002aa0 <__mulsi3>
10002258:	b1bfffcc 	andi	r6,r22,65535
1000225c:	e18cb03a 	or	r6,fp,r6
10002260:	3080062e 	bgeu	r6,r2,1000227c <__udivdi3+0x564>
10002264:	348d883a 	add	r6,r6,r18
10002268:	98ffffc4 	addi	r3,r19,-1
1000226c:	34803036 	bltu	r6,r18,10002330 <__udivdi3+0x618>
10002270:	30802f2e 	bgeu	r6,r2,10002330 <__udivdi3+0x618>
10002274:	9cffff84 	addi	r19,r19,-2
10002278:	348d883a 	add	r6,r6,r18
1000227c:	b82e943a 	slli	r23,r23,16
10002280:	30a1c83a 	sub	r16,r6,r2
10002284:	9dc6b03a 	or	r3,r19,r23
10002288:	003f2606 	br	10001f24 <__alt_data_end+0xf8001f24>
1000228c:	2027883a 	mov	r19,r4
10002290:	003f5106 	br	10001fd8 <__alt_data_end+0xf8001fd8>
10002294:	1827883a 	mov	r19,r3
10002298:	003ef006 	br	10001e5c <__alt_data_end+0xf8001e5c>
1000229c:	1808943a 	slli	r4,r3,16
100022a0:	9dc6983a 	sll	r3,r19,r23
100022a4:	e73fffcc 	andi	fp,fp,65535
100022a8:	2709883a 	add	r4,r4,fp
100022ac:	193fbd2e 	bgeu	r3,r4,100021a4 <__alt_data_end+0xf80021a4>
100022b0:	a0bfffc4 	addi	r2,r20,-1
100022b4:	0007883a 	mov	r3,zero
100022b8:	003f4c06 	br	10001fec <__alt_data_end+0xf8001fec>
100022bc:	01400404 	movi	r5,16
100022c0:	2811883a 	mov	r8,r5
100022c4:	003ef106 	br	10001e8c <__alt_data_end+0xf8001e8c>
100022c8:	000b883a 	mov	r5,zero
100022cc:	0011883a 	mov	r8,zero
100022d0:	003eee06 	br	10001e8c <__alt_data_end+0xf8001e8c>
100022d4:	00800404 	movi	r2,16
100022d8:	1007883a 	mov	r3,r2
100022dc:	003ea606 	br	10001d78 <__alt_data_end+0xf8001d78>
100022e0:	00800404 	movi	r2,16
100022e4:	1007883a 	mov	r3,r2
100022e8:	003f0106 	br	10001ef0 <__alt_data_end+0xf8001ef0>
100022ec:	0005883a 	mov	r2,zero
100022f0:	0007883a 	mov	r3,zero
100022f4:	003efe06 	br	10001ef0 <__alt_data_end+0xf8001ef0>
100022f8:	0005883a 	mov	r2,zero
100022fc:	0007883a 	mov	r3,zero
10002300:	003e9d06 	br	10001d78 <__alt_data_end+0xf8001d78>
10002304:	0007883a 	mov	r3,zero
10002308:	00800044 	movi	r2,1
1000230c:	003f3706 	br	10001fec <__alt_data_end+0xf8001fec>
10002310:	80bf832e 	bgeu	r16,r2,10002120 <__alt_data_end+0xf8002120>
10002314:	8c7fff84 	addi	r17,r17,-2
10002318:	8721883a 	add	r16,r16,fp
1000231c:	003f8106 	br	10002124 <__alt_data_end+0xf8002124>
10002320:	48bf6a2e 	bgeu	r9,r2,100020cc <__alt_data_end+0xf80020cc>
10002324:	a53fff84 	addi	r20,r20,-2
10002328:	4f13883a 	add	r9,r9,fp
1000232c:	003f6806 	br	100020d0 <__alt_data_end+0xf80020d0>
10002330:	1827883a 	mov	r19,r3
10002334:	003fd106 	br	1000227c <__alt_data_end+0xf800227c>
10002338:	182f883a 	mov	r23,r3
1000233c:	003fb906 	br	10002224 <__alt_data_end+0xf8002224>
10002340:	843fff84 	addi	r16,r16,-2
10002344:	348d883a 	add	r6,r6,r18
10002348:	003f0c06 	br	10001f7c <__alt_data_end+0xf8001f7c>
1000234c:	843fff84 	addi	r16,r16,-2
10002350:	1c87883a 	add	r3,r3,r18
10002354:	003eac06 	br	10001e08 <__alt_data_end+0xf8001e08>

10002358 <__umoddi3>:
10002358:	defff404 	addi	sp,sp,-48
1000235c:	dd800815 	stw	r22,32(sp)
10002360:	dc400315 	stw	r17,12(sp)
10002364:	dc000215 	stw	r16,8(sp)
10002368:	dfc00b15 	stw	ra,44(sp)
1000236c:	df000a15 	stw	fp,40(sp)
10002370:	ddc00915 	stw	r23,36(sp)
10002374:	dd400715 	stw	r21,28(sp)
10002378:	dd000615 	stw	r20,24(sp)
1000237c:	dcc00515 	stw	r19,20(sp)
10002380:	dc800415 	stw	r18,16(sp)
10002384:	2021883a 	mov	r16,r4
10002388:	2823883a 	mov	r17,r5
1000238c:	282d883a 	mov	r22,r5
10002390:	38003c1e 	bne	r7,zero,10002484 <__umoddi3+0x12c>
10002394:	3027883a 	mov	r19,r6
10002398:	2029883a 	mov	r20,r4
1000239c:	2980522e 	bgeu	r5,r6,100024e8 <__umoddi3+0x190>
100023a0:	00bfffd4 	movui	r2,65535
100023a4:	1180a436 	bltu	r2,r6,10002638 <__umoddi3+0x2e0>
100023a8:	00803fc4 	movi	r2,255
100023ac:	11815e2e 	bgeu	r2,r6,10002928 <__umoddi3+0x5d0>
100023b0:	01400204 	movi	r5,8
100023b4:	2805883a 	mov	r2,r5
100023b8:	314ad83a 	srl	r5,r6,r5
100023bc:	00c40034 	movhi	r3,4096
100023c0:	18d87704 	addi	r3,r3,25052
100023c4:	194b883a 	add	r5,r3,r5
100023c8:	29000003 	ldbu	r4,0(r5)
100023cc:	2089883a 	add	r4,r4,r2
100023d0:	00800804 	movi	r2,32
100023d4:	1105c83a 	sub	r2,r2,r4
100023d8:	10010c26 	beq	r2,zero,1000280c <__umoddi3+0x4b4>
100023dc:	88a2983a 	sll	r17,r17,r2
100023e0:	8108d83a 	srl	r4,r16,r4
100023e4:	30a6983a 	sll	r19,r6,r2
100023e8:	80a8983a 	sll	r20,r16,r2
100023ec:	1025883a 	mov	r18,r2
100023f0:	892cb03a 	or	r22,r17,r4
100023f4:	9822d43a 	srli	r17,r19,16
100023f8:	b009883a 	mov	r4,r22
100023fc:	9d7fffcc 	andi	r21,r19,65535
10002400:	880b883a 	mov	r5,r17
10002404:	0002a980 	call	10002a98 <__umodsi3>
10002408:	b009883a 	mov	r4,r22
1000240c:	880b883a 	mov	r5,r17
10002410:	102f883a 	mov	r23,r2
10002414:	0002a900 	call	10002a90 <__udivsi3>
10002418:	1009883a 	mov	r4,r2
1000241c:	a80b883a 	mov	r5,r21
10002420:	0002aa00 	call	10002aa0 <__mulsi3>
10002424:	b82e943a 	slli	r23,r23,16
10002428:	a008d43a 	srli	r4,r20,16
1000242c:	b906b03a 	or	r3,r23,r4
10002430:	1880042e 	bgeu	r3,r2,10002444 <__umoddi3+0xec>
10002434:	1cc7883a 	add	r3,r3,r19
10002438:	1cc00236 	bltu	r3,r19,10002444 <__umoddi3+0xec>
1000243c:	1880012e 	bgeu	r3,r2,10002444 <__umoddi3+0xec>
10002440:	1cc7883a 	add	r3,r3,r19
10002444:	18a1c83a 	sub	r16,r3,r2
10002448:	8009883a 	mov	r4,r16
1000244c:	880b883a 	mov	r5,r17
10002450:	0002a980 	call	10002a98 <__umodsi3>
10002454:	8009883a 	mov	r4,r16
10002458:	880b883a 	mov	r5,r17
1000245c:	102d883a 	mov	r22,r2
10002460:	0002a900 	call	10002a90 <__udivsi3>
10002464:	1009883a 	mov	r4,r2
10002468:	a80b883a 	mov	r5,r21
1000246c:	b02c943a 	slli	r22,r22,16
10002470:	0002aa00 	call	10002aa0 <__mulsi3>
10002474:	a13fffcc 	andi	r4,r20,65535
10002478:	b106b03a 	or	r3,r22,r4
1000247c:	1880572e 	bgeu	r3,r2,100025dc <__umoddi3+0x284>
10002480:	00005206 	br	100025cc <__umoddi3+0x274>
10002484:	29c05936 	bltu	r5,r7,100025ec <__umoddi3+0x294>
10002488:	00bfffd4 	movui	r2,65535
1000248c:	11c0652e 	bgeu	r2,r7,10002624 <__umoddi3+0x2cc>
10002490:	00804034 	movhi	r2,256
10002494:	10bfffc4 	addi	r2,r2,-1
10002498:	11c1172e 	bgeu	r2,r7,100028f8 <__umoddi3+0x5a0>
1000249c:	01400604 	movi	r5,24
100024a0:	282b883a 	mov	r21,r5
100024a4:	394ad83a 	srl	r5,r7,r5
100024a8:	00c40034 	movhi	r3,4096
100024ac:	18d87704 	addi	r3,r3,25052
100024b0:	194b883a 	add	r5,r3,r5
100024b4:	28800003 	ldbu	r2,0(r5)
100024b8:	00c00804 	movi	r3,32
100024bc:	156b883a 	add	r21,r2,r21
100024c0:	1d69c83a 	sub	r20,r3,r21
100024c4:	a000671e 	bne	r20,zero,10002664 <__umoddi3+0x30c>
100024c8:	3c400136 	bltu	r7,r17,100024d0 <__umoddi3+0x178>
100024cc:	81812336 	bltu	r16,r6,1000295c <__umoddi3+0x604>
100024d0:	8185c83a 	sub	r2,r16,r6
100024d4:	89e3c83a 	sub	r17,r17,r7
100024d8:	8087803a 	cmpltu	r3,r16,r2
100024dc:	88edc83a 	sub	r22,r17,r3
100024e0:	b007883a 	mov	r3,r22
100024e4:	00004306 	br	100025f4 <__umoddi3+0x29c>
100024e8:	3000041e 	bne	r6,zero,100024fc <__umoddi3+0x1a4>
100024ec:	01000044 	movi	r4,1
100024f0:	000b883a 	mov	r5,zero
100024f4:	0002a900 	call	10002a90 <__udivsi3>
100024f8:	1027883a 	mov	r19,r2
100024fc:	00bfffd4 	movui	r2,65535
10002500:	14c0532e 	bgeu	r2,r19,10002650 <__umoddi3+0x2f8>
10002504:	00804034 	movhi	r2,256
10002508:	10bfffc4 	addi	r2,r2,-1
1000250c:	14c1032e 	bgeu	r2,r19,1000291c <__umoddi3+0x5c4>
10002510:	00800604 	movi	r2,24
10002514:	1007883a 	mov	r3,r2
10002518:	9884d83a 	srl	r2,r19,r2
1000251c:	01040034 	movhi	r4,4096
10002520:	21187704 	addi	r4,r4,25052
10002524:	2085883a 	add	r2,r4,r2
10002528:	11000003 	ldbu	r4,0(r2)
1000252c:	00800804 	movi	r2,32
10002530:	20c7883a 	add	r3,r4,r3
10002534:	10c5c83a 	sub	r2,r2,r3
10002538:	1000b61e 	bne	r2,zero,10002814 <__umoddi3+0x4bc>
1000253c:	982ad43a 	srli	r21,r19,16
10002540:	8ce3c83a 	sub	r17,r17,r19
10002544:	9dbfffcc 	andi	r22,r19,65535
10002548:	0025883a 	mov	r18,zero
1000254c:	8809883a 	mov	r4,r17
10002550:	a80b883a 	mov	r5,r21
10002554:	0002a980 	call	10002a98 <__umodsi3>
10002558:	8809883a 	mov	r4,r17
1000255c:	a80b883a 	mov	r5,r21
10002560:	102f883a 	mov	r23,r2
10002564:	0002a900 	call	10002a90 <__udivsi3>
10002568:	1009883a 	mov	r4,r2
1000256c:	b00b883a 	mov	r5,r22
10002570:	0002aa00 	call	10002aa0 <__mulsi3>
10002574:	b82e943a 	slli	r23,r23,16
10002578:	a008d43a 	srli	r4,r20,16
1000257c:	b906b03a 	or	r3,r23,r4
10002580:	1880032e 	bgeu	r3,r2,10002590 <__umoddi3+0x238>
10002584:	1cc7883a 	add	r3,r3,r19
10002588:	1cc00136 	bltu	r3,r19,10002590 <__umoddi3+0x238>
1000258c:	1880f136 	bltu	r3,r2,10002954 <__umoddi3+0x5fc>
10002590:	18a1c83a 	sub	r16,r3,r2
10002594:	8009883a 	mov	r4,r16
10002598:	a80b883a 	mov	r5,r21
1000259c:	0002a980 	call	10002a98 <__umodsi3>
100025a0:	8009883a 	mov	r4,r16
100025a4:	a80b883a 	mov	r5,r21
100025a8:	1023883a 	mov	r17,r2
100025ac:	0002a900 	call	10002a90 <__udivsi3>
100025b0:	1009883a 	mov	r4,r2
100025b4:	b00b883a 	mov	r5,r22
100025b8:	8822943a 	slli	r17,r17,16
100025bc:	0002aa00 	call	10002aa0 <__mulsi3>
100025c0:	a13fffcc 	andi	r4,r20,65535
100025c4:	8906b03a 	or	r3,r17,r4
100025c8:	1880042e 	bgeu	r3,r2,100025dc <__umoddi3+0x284>
100025cc:	1cc7883a 	add	r3,r3,r19
100025d0:	1cc00236 	bltu	r3,r19,100025dc <__umoddi3+0x284>
100025d4:	1880012e 	bgeu	r3,r2,100025dc <__umoddi3+0x284>
100025d8:	1cc7883a 	add	r3,r3,r19
100025dc:	1887c83a 	sub	r3,r3,r2
100025e0:	1c84d83a 	srl	r2,r3,r18
100025e4:	0007883a 	mov	r3,zero
100025e8:	00000206 	br	100025f4 <__umoddi3+0x29c>
100025ec:	2005883a 	mov	r2,r4
100025f0:	2807883a 	mov	r3,r5
100025f4:	dfc00b17 	ldw	ra,44(sp)
100025f8:	df000a17 	ldw	fp,40(sp)
100025fc:	ddc00917 	ldw	r23,36(sp)
10002600:	dd800817 	ldw	r22,32(sp)
10002604:	dd400717 	ldw	r21,28(sp)
10002608:	dd000617 	ldw	r20,24(sp)
1000260c:	dcc00517 	ldw	r19,20(sp)
10002610:	dc800417 	ldw	r18,16(sp)
10002614:	dc400317 	ldw	r17,12(sp)
10002618:	dc000217 	ldw	r16,8(sp)
1000261c:	dec00c04 	addi	sp,sp,48
10002620:	f800283a 	ret
10002624:	00803fc4 	movi	r2,255
10002628:	11c0b02e 	bgeu	r2,r7,100028ec <__umoddi3+0x594>
1000262c:	01400204 	movi	r5,8
10002630:	282b883a 	mov	r21,r5
10002634:	003f9b06 	br	100024a4 <__alt_data_end+0xf80024a4>
10002638:	00804034 	movhi	r2,256
1000263c:	10bfffc4 	addi	r2,r2,-1
10002640:	1180b02e 	bgeu	r2,r6,10002904 <__umoddi3+0x5ac>
10002644:	01400604 	movi	r5,24
10002648:	2805883a 	mov	r2,r5
1000264c:	003f5a06 	br	100023b8 <__alt_data_end+0xf80023b8>
10002650:	00803fc4 	movi	r2,255
10002654:	14c0ae2e 	bgeu	r2,r19,10002910 <__umoddi3+0x5b8>
10002658:	00800204 	movi	r2,8
1000265c:	1007883a 	mov	r3,r2
10002660:	003fad06 	br	10002518 <__alt_data_end+0xf8002518>
10002664:	3d0a983a 	sll	r5,r7,r20
10002668:	356cd83a 	srl	r22,r6,r21
1000266c:	8d78d83a 	srl	fp,r17,r21
10002670:	8d10983a 	sll	r8,r17,r20
10002674:	2dacb03a 	or	r22,r5,r22
10002678:	b02ed43a 	srli	r23,r22,16
1000267c:	8564d83a 	srl	r18,r16,r21
10002680:	e009883a 	mov	r4,fp
10002684:	b80b883a 	mov	r5,r23
10002688:	44a4b03a 	or	r18,r8,r18
1000268c:	3526983a 	sll	r19,r6,r20
10002690:	0002a980 	call	10002a98 <__umodsi3>
10002694:	e009883a 	mov	r4,fp
10002698:	b80b883a 	mov	r5,r23
1000269c:	b47fffcc 	andi	r17,r22,65535
100026a0:	d8800015 	stw	r2,0(sp)
100026a4:	0002a900 	call	10002a90 <__udivsi3>
100026a8:	1009883a 	mov	r4,r2
100026ac:	880b883a 	mov	r5,r17
100026b0:	1039883a 	mov	fp,r2
100026b4:	0002aa00 	call	10002aa0 <__mulsi3>
100026b8:	d9800017 	ldw	r6,0(sp)
100026bc:	9008d43a 	srli	r4,r18,16
100026c0:	8520983a 	sll	r16,r16,r20
100026c4:	300c943a 	slli	r6,r6,16
100026c8:	3106b03a 	or	r3,r6,r4
100026cc:	1880042e 	bgeu	r3,r2,100026e0 <__umoddi3+0x388>
100026d0:	1d87883a 	add	r3,r3,r22
100026d4:	e13fffc4 	addi	r4,fp,-1
100026d8:	1d809a2e 	bgeu	r3,r22,10002944 <__umoddi3+0x5ec>
100026dc:	2039883a 	mov	fp,r4
100026e0:	1887c83a 	sub	r3,r3,r2
100026e4:	1809883a 	mov	r4,r3
100026e8:	b80b883a 	mov	r5,r23
100026ec:	d8c00115 	stw	r3,4(sp)
100026f0:	0002a980 	call	10002a98 <__umodsi3>
100026f4:	d8c00117 	ldw	r3,4(sp)
100026f8:	b80b883a 	mov	r5,r23
100026fc:	d8800015 	stw	r2,0(sp)
10002700:	1809883a 	mov	r4,r3
10002704:	0002a900 	call	10002a90 <__udivsi3>
10002708:	880b883a 	mov	r5,r17
1000270c:	1009883a 	mov	r4,r2
10002710:	102f883a 	mov	r23,r2
10002714:	0002aa00 	call	10002aa0 <__mulsi3>
10002718:	d9800017 	ldw	r6,0(sp)
1000271c:	947fffcc 	andi	r17,r18,65535
10002720:	300c943a 	slli	r6,r6,16
10002724:	3464b03a 	or	r18,r6,r17
10002728:	9080042e 	bgeu	r18,r2,1000273c <__umoddi3+0x3e4>
1000272c:	95a5883a 	add	r18,r18,r22
10002730:	b8ffffc4 	addi	r3,r23,-1
10002734:	95807f2e 	bgeu	r18,r22,10002934 <__umoddi3+0x5dc>
10002738:	182f883a 	mov	r23,r3
1000273c:	e038943a 	slli	fp,fp,16
10002740:	980cd43a 	srli	r6,r19,16
10002744:	98ffffcc 	andi	r3,r19,65535
10002748:	bf38b03a 	or	fp,r23,fp
1000274c:	e02ed43a 	srli	r23,fp,16
10002750:	e73fffcc 	andi	fp,fp,65535
10002754:	180b883a 	mov	r5,r3
10002758:	e009883a 	mov	r4,fp
1000275c:	d9800015 	stw	r6,0(sp)
10002760:	d8c00115 	stw	r3,4(sp)
10002764:	90a5c83a 	sub	r18,r18,r2
10002768:	0002aa00 	call	10002aa0 <__mulsi3>
1000276c:	d8c00117 	ldw	r3,4(sp)
10002770:	b809883a 	mov	r4,r23
10002774:	1023883a 	mov	r17,r2
10002778:	180b883a 	mov	r5,r3
1000277c:	0002aa00 	call	10002aa0 <__mulsi3>
10002780:	d9800017 	ldw	r6,0(sp)
10002784:	b809883a 	mov	r4,r23
10002788:	d8800115 	stw	r2,4(sp)
1000278c:	300b883a 	mov	r5,r6
10002790:	302f883a 	mov	r23,r6
10002794:	0002aa00 	call	10002aa0 <__mulsi3>
10002798:	e009883a 	mov	r4,fp
1000279c:	b80b883a 	mov	r5,r23
100027a0:	d8800015 	stw	r2,0(sp)
100027a4:	0002aa00 	call	10002aa0 <__mulsi3>
100027a8:	d8c00117 	ldw	r3,4(sp)
100027ac:	880cd43a 	srli	r6,r17,16
100027b0:	d9c00017 	ldw	r7,0(sp)
100027b4:	1885883a 	add	r2,r3,r2
100027b8:	118d883a 	add	r6,r2,r6
100027bc:	30c0022e 	bgeu	r6,r3,100027c8 <__umoddi3+0x470>
100027c0:	00800074 	movhi	r2,1
100027c4:	388f883a 	add	r7,r7,r2
100027c8:	3006d43a 	srli	r3,r6,16
100027cc:	300c943a 	slli	r6,r6,16
100027d0:	8c7fffcc 	andi	r17,r17,65535
100027d4:	38c7883a 	add	r3,r7,r3
100027d8:	3463883a 	add	r17,r6,r17
100027dc:	90c03d36 	bltu	r18,r3,100028d4 <__umoddi3+0x57c>
100027e0:	90c06026 	beq	r18,r3,10002964 <__umoddi3+0x60c>
100027e4:	90c9c83a 	sub	r4,r18,r3
100027e8:	880f883a 	mov	r7,r17
100027ec:	81cfc83a 	sub	r7,r16,r7
100027f0:	81c7803a 	cmpltu	r3,r16,r7
100027f4:	20c7c83a 	sub	r3,r4,r3
100027f8:	1d44983a 	sll	r2,r3,r21
100027fc:	3d0ed83a 	srl	r7,r7,r20
10002800:	1d06d83a 	srl	r3,r3,r20
10002804:	11c4b03a 	or	r2,r2,r7
10002808:	003f7a06 	br	100025f4 <__alt_data_end+0xf80025f4>
1000280c:	0025883a 	mov	r18,zero
10002810:	003ef806 	br	100023f4 <__alt_data_end+0xf80023f4>
10002814:	98a6983a 	sll	r19,r19,r2
10002818:	88e8d83a 	srl	r20,r17,r3
1000281c:	80c6d83a 	srl	r3,r16,r3
10002820:	982ad43a 	srli	r21,r19,16
10002824:	88a2983a 	sll	r17,r17,r2
10002828:	a009883a 	mov	r4,r20
1000282c:	a80b883a 	mov	r5,r21
10002830:	88eeb03a 	or	r23,r17,r3
10002834:	1025883a 	mov	r18,r2
10002838:	0002a980 	call	10002a98 <__umodsi3>
1000283c:	a009883a 	mov	r4,r20
10002840:	a80b883a 	mov	r5,r21
10002844:	1023883a 	mov	r17,r2
10002848:	9dbfffcc 	andi	r22,r19,65535
1000284c:	0002a900 	call	10002a90 <__udivsi3>
10002850:	1009883a 	mov	r4,r2
10002854:	b00b883a 	mov	r5,r22
10002858:	0002aa00 	call	10002aa0 <__mulsi3>
1000285c:	8822943a 	slli	r17,r17,16
10002860:	b808d43a 	srli	r4,r23,16
10002864:	84a8983a 	sll	r20,r16,r18
10002868:	8906b03a 	or	r3,r17,r4
1000286c:	1880042e 	bgeu	r3,r2,10002880 <__umoddi3+0x528>
10002870:	1cc7883a 	add	r3,r3,r19
10002874:	1cc00236 	bltu	r3,r19,10002880 <__umoddi3+0x528>
10002878:	1880012e 	bgeu	r3,r2,10002880 <__umoddi3+0x528>
1000287c:	1cc7883a 	add	r3,r3,r19
10002880:	18a1c83a 	sub	r16,r3,r2
10002884:	8009883a 	mov	r4,r16
10002888:	a80b883a 	mov	r5,r21
1000288c:	0002a980 	call	10002a98 <__umodsi3>
10002890:	8009883a 	mov	r4,r16
10002894:	a80b883a 	mov	r5,r21
10002898:	1039883a 	mov	fp,r2
1000289c:	0002a900 	call	10002a90 <__udivsi3>
100028a0:	1009883a 	mov	r4,r2
100028a4:	b00b883a 	mov	r5,r22
100028a8:	0002aa00 	call	10002aa0 <__mulsi3>
100028ac:	e006943a 	slli	r3,fp,16
100028b0:	b93fffcc 	andi	r4,r23,65535
100028b4:	1906b03a 	or	r3,r3,r4
100028b8:	1880042e 	bgeu	r3,r2,100028cc <__umoddi3+0x574>
100028bc:	1cc7883a 	add	r3,r3,r19
100028c0:	1cc00236 	bltu	r3,r19,100028cc <__umoddi3+0x574>
100028c4:	1880012e 	bgeu	r3,r2,100028cc <__umoddi3+0x574>
100028c8:	1cc7883a 	add	r3,r3,r19
100028cc:	18a3c83a 	sub	r17,r3,r2
100028d0:	003f1e06 	br	1000254c <__alt_data_end+0xf800254c>
100028d4:	8ccfc83a 	sub	r7,r17,r19
100028d8:	1d89c83a 	sub	r4,r3,r22
100028dc:	89e3803a 	cmpltu	r17,r17,r7
100028e0:	2463c83a 	sub	r17,r4,r17
100028e4:	9449c83a 	sub	r4,r18,r17
100028e8:	003fc006 	br	100027ec <__alt_data_end+0xf80027ec>
100028ec:	000b883a 	mov	r5,zero
100028f0:	002b883a 	mov	r21,zero
100028f4:	003eeb06 	br	100024a4 <__alt_data_end+0xf80024a4>
100028f8:	01400404 	movi	r5,16
100028fc:	282b883a 	mov	r21,r5
10002900:	003ee806 	br	100024a4 <__alt_data_end+0xf80024a4>
10002904:	01400404 	movi	r5,16
10002908:	2805883a 	mov	r2,r5
1000290c:	003eaa06 	br	100023b8 <__alt_data_end+0xf80023b8>
10002910:	0005883a 	mov	r2,zero
10002914:	0007883a 	mov	r3,zero
10002918:	003eff06 	br	10002518 <__alt_data_end+0xf8002518>
1000291c:	00800404 	movi	r2,16
10002920:	1007883a 	mov	r3,r2
10002924:	003efc06 	br	10002518 <__alt_data_end+0xf8002518>
10002928:	000b883a 	mov	r5,zero
1000292c:	0005883a 	mov	r2,zero
10002930:	003ea106 	br	100023b8 <__alt_data_end+0xf80023b8>
10002934:	90bf802e 	bgeu	r18,r2,10002738 <__alt_data_end+0xf8002738>
10002938:	bdffff84 	addi	r23,r23,-2
1000293c:	95a5883a 	add	r18,r18,r22
10002940:	003f7e06 	br	1000273c <__alt_data_end+0xf800273c>
10002944:	18bf652e 	bgeu	r3,r2,100026dc <__alt_data_end+0xf80026dc>
10002948:	e73fff84 	addi	fp,fp,-2
1000294c:	1d87883a 	add	r3,r3,r22
10002950:	003f6306 	br	100026e0 <__alt_data_end+0xf80026e0>
10002954:	1cc7883a 	add	r3,r3,r19
10002958:	003f0d06 	br	10002590 <__alt_data_end+0xf8002590>
1000295c:	8005883a 	mov	r2,r16
10002960:	003edf06 	br	100024e0 <__alt_data_end+0xf80024e0>
10002964:	847fdb36 	bltu	r16,r17,100028d4 <__alt_data_end+0xf80028d4>
10002968:	880f883a 	mov	r7,r17
1000296c:	0009883a 	mov	r4,zero
10002970:	003f9e06 	br	100027ec <__alt_data_end+0xf80027ec>

10002974 <udivmodsi4>:
10002974:	2900182e 	bgeu	r5,r4,100029d8 <udivmodsi4+0x64>
10002978:	28001716 	blt	r5,zero,100029d8 <udivmodsi4+0x64>
1000297c:	00800804 	movi	r2,32
10002980:	00c00044 	movi	r3,1
10002984:	00000206 	br	10002990 <udivmodsi4+0x1c>
10002988:	10001126 	beq	r2,zero,100029d0 <udivmodsi4+0x5c>
1000298c:	28000516 	blt	r5,zero,100029a4 <udivmodsi4+0x30>
10002990:	294b883a 	add	r5,r5,r5
10002994:	10bfffc4 	addi	r2,r2,-1
10002998:	18c7883a 	add	r3,r3,r3
1000299c:	293ffa36 	bltu	r5,r4,10002988 <__alt_data_end+0xf8002988>
100029a0:	18000b26 	beq	r3,zero,100029d0 <udivmodsi4+0x5c>
100029a4:	0005883a 	mov	r2,zero
100029a8:	21400236 	bltu	r4,r5,100029b4 <udivmodsi4+0x40>
100029ac:	2149c83a 	sub	r4,r4,r5
100029b0:	10c4b03a 	or	r2,r2,r3
100029b4:	1806d07a 	srli	r3,r3,1
100029b8:	280ad07a 	srli	r5,r5,1
100029bc:	183ffa1e 	bne	r3,zero,100029a8 <__alt_data_end+0xf80029a8>
100029c0:	3000011e 	bne	r6,zero,100029c8 <udivmodsi4+0x54>
100029c4:	f800283a 	ret
100029c8:	2005883a 	mov	r2,r4
100029cc:	f800283a 	ret
100029d0:	0005883a 	mov	r2,zero
100029d4:	003ffa06 	br	100029c0 <__alt_data_end+0xf80029c0>
100029d8:	00c00044 	movi	r3,1
100029dc:	003ff106 	br	100029a4 <__alt_data_end+0xf80029a4>

100029e0 <__divsi3>:
100029e0:	defffe04 	addi	sp,sp,-8
100029e4:	dfc00115 	stw	ra,4(sp)
100029e8:	dc000015 	stw	r16,0(sp)
100029ec:	20000b16 	blt	r4,zero,10002a1c <__divsi3+0x3c>
100029f0:	0021883a 	mov	r16,zero
100029f4:	28000c16 	blt	r5,zero,10002a28 <__divsi3+0x48>
100029f8:	000d883a 	mov	r6,zero
100029fc:	00029740 	call	10002974 <udivmodsi4>
10002a00:	0407c83a 	sub	r3,zero,r16
10002a04:	1884f03a 	xor	r2,r3,r2
10002a08:	1405883a 	add	r2,r2,r16
10002a0c:	dfc00117 	ldw	ra,4(sp)
10002a10:	dc000017 	ldw	r16,0(sp)
10002a14:	dec00204 	addi	sp,sp,8
10002a18:	f800283a 	ret
10002a1c:	0109c83a 	sub	r4,zero,r4
10002a20:	04000044 	movi	r16,1
10002a24:	283ff40e 	bge	r5,zero,100029f8 <__alt_data_end+0xf80029f8>
10002a28:	014bc83a 	sub	r5,zero,r5
10002a2c:	8400005c 	xori	r16,r16,1
10002a30:	003ff106 	br	100029f8 <__alt_data_end+0xf80029f8>

10002a34 <__modsi3>:
10002a34:	defffd04 	addi	sp,sp,-12
10002a38:	dfc00215 	stw	ra,8(sp)
10002a3c:	dc400115 	stw	r17,4(sp)
10002a40:	dc000015 	stw	r16,0(sp)
10002a44:	20000c16 	blt	r4,zero,10002a78 <__modsi3+0x44>
10002a48:	0023883a 	mov	r17,zero
10002a4c:	0021883a 	mov	r16,zero
10002a50:	28000d16 	blt	r5,zero,10002a88 <__modsi3+0x54>
10002a54:	01800044 	movi	r6,1
10002a58:	00029740 	call	10002974 <udivmodsi4>
10002a5c:	1404f03a 	xor	r2,r2,r16
10002a60:	8885883a 	add	r2,r17,r2
10002a64:	dfc00217 	ldw	ra,8(sp)
10002a68:	dc400117 	ldw	r17,4(sp)
10002a6c:	dc000017 	ldw	r16,0(sp)
10002a70:	dec00304 	addi	sp,sp,12
10002a74:	f800283a 	ret
10002a78:	0109c83a 	sub	r4,zero,r4
10002a7c:	04400044 	movi	r17,1
10002a80:	043fffc4 	movi	r16,-1
10002a84:	283ff30e 	bge	r5,zero,10002a54 <__alt_data_end+0xf8002a54>
10002a88:	014bc83a 	sub	r5,zero,r5
10002a8c:	003ff106 	br	10002a54 <__alt_data_end+0xf8002a54>

10002a90 <__udivsi3>:
10002a90:	000d883a 	mov	r6,zero
10002a94:	00029741 	jmpi	10002974 <udivmodsi4>

10002a98 <__umodsi3>:
10002a98:	01800044 	movi	r6,1
10002a9c:	00029741 	jmpi	10002974 <udivmodsi4>

10002aa0 <__mulsi3>:
10002aa0:	0005883a 	mov	r2,zero
10002aa4:	20000726 	beq	r4,zero,10002ac4 <__mulsi3+0x24>
10002aa8:	20c0004c 	andi	r3,r4,1
10002aac:	2008d07a 	srli	r4,r4,1
10002ab0:	18000126 	beq	r3,zero,10002ab8 <__mulsi3+0x18>
10002ab4:	1145883a 	add	r2,r2,r5
10002ab8:	294b883a 	add	r5,r5,r5
10002abc:	203ffa1e 	bne	r4,zero,10002aa8 <__alt_data_end+0xf8002aa8>
10002ac0:	f800283a 	ret
10002ac4:	f800283a 	ret

10002ac8 <__adddf3>:
10002ac8:	02000434 	movhi	r8,16
10002acc:	423fffc4 	addi	r8,r8,-1
10002ad0:	defffb04 	addi	sp,sp,-20
10002ad4:	2a12703a 	and	r9,r5,r8
10002ad8:	2806d7fa 	srli	r3,r5,31
10002adc:	3a10703a 	and	r8,r7,r8
10002ae0:	3804d53a 	srli	r2,r7,20
10002ae4:	3014d77a 	srli	r10,r6,29
10002ae8:	dc000015 	stw	r16,0(sp)
10002aec:	481290fa 	slli	r9,r9,3
10002af0:	2820d53a 	srli	r16,r5,20
10002af4:	401090fa 	slli	r8,r8,3
10002af8:	200ad77a 	srli	r5,r4,29
10002afc:	380ed7fa 	srli	r7,r7,31
10002b00:	dc800215 	stw	r18,8(sp)
10002b04:	dc400115 	stw	r17,4(sp)
10002b08:	dfc00415 	stw	ra,16(sp)
10002b0c:	dcc00315 	stw	r19,12(sp)
10002b10:	1c803fcc 	andi	r18,r3,255
10002b14:	8401ffcc 	andi	r16,r16,2047
10002b18:	494ab03a 	or	r5,r9,r5
10002b1c:	202290fa 	slli	r17,r4,3
10002b20:	1081ffcc 	andi	r2,r2,2047
10002b24:	4290b03a 	or	r8,r8,r10
10002b28:	300c90fa 	slli	r6,r6,3
10002b2c:	91c07026 	beq	r18,r7,10002cf0 <__adddf3+0x228>
10002b30:	8087c83a 	sub	r3,r16,r2
10002b34:	00c0b30e 	bge	zero,r3,10002e04 <__adddf3+0x33c>
10002b38:	10002a1e 	bne	r2,zero,10002be4 <__adddf3+0x11c>
10002b3c:	4184b03a 	or	r2,r8,r6
10002b40:	1000991e 	bne	r2,zero,10002da8 <__adddf3+0x2e0>
10002b44:	888001cc 	andi	r2,r17,7
10002b48:	10005b26 	beq	r2,zero,10002cb8 <__adddf3+0x1f0>
10002b4c:	88c003cc 	andi	r3,r17,15
10002b50:	00800104 	movi	r2,4
10002b54:	18805826 	beq	r3,r2,10002cb8 <__adddf3+0x1f0>
10002b58:	89800104 	addi	r6,r17,4
10002b5c:	3463803a 	cmpltu	r17,r6,r17
10002b60:	2c4b883a 	add	r5,r5,r17
10002b64:	2880202c 	andhi	r2,r5,128
10002b68:	9007883a 	mov	r3,r18
10002b6c:	3023883a 	mov	r17,r6
10002b70:	10005426 	beq	r2,zero,10002cc4 <__adddf3+0x1fc>
10002b74:	84000044 	addi	r16,r16,1
10002b78:	0081ffc4 	movi	r2,2047
10002b7c:	8080c126 	beq	r16,r2,10002e84 <__adddf3+0x3bc>
10002b80:	013fe034 	movhi	r4,65408
10002b84:	213fffc4 	addi	r4,r4,-1
10002b88:	290a703a 	and	r5,r5,r4
10002b8c:	2804977a 	slli	r2,r5,29
10002b90:	280a927a 	slli	r5,r5,9
10002b94:	8822d0fa 	srli	r17,r17,3
10002b98:	8401ffcc 	andi	r16,r16,2047
10002b9c:	2808d33a 	srli	r4,r5,12
10002ba0:	1444b03a 	or	r2,r2,r17
10002ba4:	8401ffcc 	andi	r16,r16,2047
10002ba8:	800a953a 	slli	r5,r16,20
10002bac:	18c03fcc 	andi	r3,r3,255
10002bb0:	04000434 	movhi	r16,16
10002bb4:	180697fa 	slli	r3,r3,31
10002bb8:	843fffc4 	addi	r16,r16,-1
10002bbc:	2420703a 	and	r16,r4,r16
10002bc0:	8160b03a 	or	r16,r16,r5
10002bc4:	80c6b03a 	or	r3,r16,r3
10002bc8:	dfc00417 	ldw	ra,16(sp)
10002bcc:	dcc00317 	ldw	r19,12(sp)
10002bd0:	dc800217 	ldw	r18,8(sp)
10002bd4:	dc400117 	ldw	r17,4(sp)
10002bd8:	dc000017 	ldw	r16,0(sp)
10002bdc:	dec00504 	addi	sp,sp,20
10002be0:	f800283a 	ret
10002be4:	0081ffc4 	movi	r2,2047
10002be8:	80bfd626 	beq	r16,r2,10002b44 <__alt_data_end+0xf8002b44>
10002bec:	42002034 	orhi	r8,r8,128
10002bf0:	00800e04 	movi	r2,56
10002bf4:	10c0a616 	blt	r2,r3,10002e90 <__adddf3+0x3c8>
10002bf8:	008007c4 	movi	r2,31
10002bfc:	10c0c916 	blt	r2,r3,10002f24 <__adddf3+0x45c>
10002c00:	00800804 	movi	r2,32
10002c04:	10c5c83a 	sub	r2,r2,r3
10002c08:	408e983a 	sll	r7,r8,r2
10002c0c:	30c8d83a 	srl	r4,r6,r3
10002c10:	3084983a 	sll	r2,r6,r2
10002c14:	40c6d83a 	srl	r3,r8,r3
10002c18:	390cb03a 	or	r6,r7,r4
10002c1c:	1004c03a 	cmpne	r2,r2,zero
10002c20:	308cb03a 	or	r6,r6,r2
10002c24:	898dc83a 	sub	r6,r17,r6
10002c28:	89a3803a 	cmpltu	r17,r17,r6
10002c2c:	28cbc83a 	sub	r5,r5,r3
10002c30:	2c4bc83a 	sub	r5,r5,r17
10002c34:	3023883a 	mov	r17,r6
10002c38:	2880202c 	andhi	r2,r5,128
10002c3c:	10006d26 	beq	r2,zero,10002df4 <__adddf3+0x32c>
10002c40:	04c02034 	movhi	r19,128
10002c44:	9cffffc4 	addi	r19,r19,-1
10002c48:	2ce6703a 	and	r19,r5,r19
10002c4c:	98007e26 	beq	r19,zero,10002e48 <__adddf3+0x380>
10002c50:	9809883a 	mov	r4,r19
10002c54:	0003d8c0 	call	10003d8c <__clzsi2>
10002c58:	10fffe04 	addi	r3,r2,-8
10002c5c:	010007c4 	movi	r4,31
10002c60:	20c07f16 	blt	r4,r3,10002e60 <__adddf3+0x398>
10002c64:	01400a04 	movi	r5,40
10002c68:	2885c83a 	sub	r2,r5,r2
10002c6c:	888ad83a 	srl	r5,r17,r2
10002c70:	98e6983a 	sll	r19,r19,r3
10002c74:	88e2983a 	sll	r17,r17,r3
10002c78:	2ce6b03a 	or	r19,r5,r19
10002c7c:	1c007c16 	blt	r3,r16,10002e70 <__adddf3+0x3a8>
10002c80:	1c21c83a 	sub	r16,r3,r16
10002c84:	81400044 	addi	r5,r16,1
10002c88:	00c007c4 	movi	r3,31
10002c8c:	19409816 	blt	r3,r5,10002ef0 <__adddf3+0x428>
10002c90:	1c21c83a 	sub	r16,r3,r16
10002c94:	8c08983a 	sll	r4,r17,r16
10002c98:	8946d83a 	srl	r3,r17,r5
10002c9c:	9c20983a 	sll	r16,r19,r16
10002ca0:	2008c03a 	cmpne	r4,r4,zero
10002ca4:	994ad83a 	srl	r5,r19,r5
10002ca8:	1c06b03a 	or	r3,r3,r16
10002cac:	1922b03a 	or	r17,r3,r4
10002cb0:	0021883a 	mov	r16,zero
10002cb4:	003fa306 	br	10002b44 <__alt_data_end+0xf8002b44>
10002cb8:	2880202c 	andhi	r2,r5,128
10002cbc:	9007883a 	mov	r3,r18
10002cc0:	103fac1e 	bne	r2,zero,10002b74 <__alt_data_end+0xf8002b74>
10002cc4:	2804977a 	slli	r2,r5,29
10002cc8:	8822d0fa 	srli	r17,r17,3
10002ccc:	0101ffc4 	movi	r4,2047
10002cd0:	280ad0fa 	srli	r5,r5,3
10002cd4:	1444b03a 	or	r2,r2,r17
10002cd8:	81002c26 	beq	r16,r4,10002d8c <__adddf3+0x2c4>
10002cdc:	8120703a 	and	r16,r16,r4
10002ce0:	01000434 	movhi	r4,16
10002ce4:	213fffc4 	addi	r4,r4,-1
10002ce8:	2908703a 	and	r4,r5,r4
10002cec:	003fad06 	br	10002ba4 <__alt_data_end+0xf8002ba4>
10002cf0:	8089c83a 	sub	r4,r16,r2
10002cf4:	01006a0e 	bge	zero,r4,10002ea0 <__adddf3+0x3d8>
10002cf8:	10003326 	beq	r2,zero,10002dc8 <__adddf3+0x300>
10002cfc:	0081ffc4 	movi	r2,2047
10002d00:	80bf9026 	beq	r16,r2,10002b44 <__alt_data_end+0xf8002b44>
10002d04:	42002034 	orhi	r8,r8,128
10002d08:	00800e04 	movi	r2,56
10002d0c:	1100b116 	blt	r2,r4,10002fd4 <__adddf3+0x50c>
10002d10:	008007c4 	movi	r2,31
10002d14:	1100e216 	blt	r2,r4,100030a0 <__adddf3+0x5d8>
10002d18:	00800804 	movi	r2,32
10002d1c:	1105c83a 	sub	r2,r2,r4
10002d20:	4092983a 	sll	r9,r8,r2
10002d24:	310ed83a 	srl	r7,r6,r4
10002d28:	3084983a 	sll	r2,r6,r2
10002d2c:	4110d83a 	srl	r8,r8,r4
10002d30:	49ccb03a 	or	r6,r9,r7
10002d34:	1004c03a 	cmpne	r2,r2,zero
10002d38:	308cb03a 	or	r6,r6,r2
10002d3c:	344d883a 	add	r6,r6,r17
10002d40:	3463803a 	cmpltu	r17,r6,r17
10002d44:	414b883a 	add	r5,r8,r5
10002d48:	2c4b883a 	add	r5,r5,r17
10002d4c:	3023883a 	mov	r17,r6
10002d50:	2880202c 	andhi	r2,r5,128
10002d54:	10002726 	beq	r2,zero,10002df4 <__adddf3+0x32c>
10002d58:	84000044 	addi	r16,r16,1
10002d5c:	0081ffc4 	movi	r2,2047
10002d60:	8080ae26 	beq	r16,r2,1000301c <__adddf3+0x554>
10002d64:	00bfe034 	movhi	r2,65408
10002d68:	10bfffc4 	addi	r2,r2,-1
10002d6c:	288a703a 	and	r5,r5,r2
10002d70:	880cd07a 	srli	r6,r17,1
10002d74:	280897fa 	slli	r4,r5,31
10002d78:	88c0004c 	andi	r3,r17,1
10002d7c:	30e2b03a 	or	r17,r6,r3
10002d80:	280ad07a 	srli	r5,r5,1
10002d84:	8922b03a 	or	r17,r17,r4
10002d88:	003f6e06 	br	10002b44 <__alt_data_end+0xf8002b44>
10002d8c:	1148b03a 	or	r4,r2,r5
10002d90:	20003c26 	beq	r4,zero,10002e84 <__adddf3+0x3bc>
10002d94:	29000234 	orhi	r4,r5,8
10002d98:	01400434 	movhi	r5,16
10002d9c:	297fffc4 	addi	r5,r5,-1
10002da0:	2148703a 	and	r4,r4,r5
10002da4:	003f7f06 	br	10002ba4 <__alt_data_end+0xf8002ba4>
10002da8:	18ffffc4 	addi	r3,r3,-1
10002dac:	18004d1e 	bne	r3,zero,10002ee4 <__adddf3+0x41c>
10002db0:	898dc83a 	sub	r6,r17,r6
10002db4:	89a3803a 	cmpltu	r17,r17,r6
10002db8:	2a0bc83a 	sub	r5,r5,r8
10002dbc:	2c4bc83a 	sub	r5,r5,r17
10002dc0:	3023883a 	mov	r17,r6
10002dc4:	003f9c06 	br	10002c38 <__alt_data_end+0xf8002c38>
10002dc8:	4184b03a 	or	r2,r8,r6
10002dcc:	103f5d26 	beq	r2,zero,10002b44 <__alt_data_end+0xf8002b44>
10002dd0:	213fffc4 	addi	r4,r4,-1
10002dd4:	203fd926 	beq	r4,zero,10002d3c <__alt_data_end+0xf8002d3c>
10002dd8:	0081ffc4 	movi	r2,2047
10002ddc:	80bfca1e 	bne	r16,r2,10002d08 <__alt_data_end+0xf8002d08>
10002de0:	003f5806 	br	10002b44 <__alt_data_end+0xf8002b44>
10002de4:	10c8b03a 	or	r4,r2,r3
10002de8:	20008b26 	beq	r4,zero,10003018 <__adddf3+0x550>
10002dec:	100b883a 	mov	r5,r2
10002df0:	1823883a 	mov	r17,r3
10002df4:	888001cc 	andi	r2,r17,7
10002df8:	103f541e 	bne	r2,zero,10002b4c <__alt_data_end+0xf8002b4c>
10002dfc:	9007883a 	mov	r3,r18
10002e00:	003fb006 	br	10002cc4 <__alt_data_end+0xf8002cc4>
10002e04:	1800531e 	bne	r3,zero,10002f54 <__adddf3+0x48c>
10002e08:	80800044 	addi	r2,r16,1
10002e0c:	1081ffcc 	andi	r2,r2,2047
10002e10:	00c00044 	movi	r3,1
10002e14:	1880990e 	bge	r3,r2,1000307c <__adddf3+0x5b4>
10002e18:	8985c83a 	sub	r2,r17,r6
10002e1c:	8887803a 	cmpltu	r3,r17,r2
10002e20:	2a27c83a 	sub	r19,r5,r8
10002e24:	98e7c83a 	sub	r19,r19,r3
10002e28:	98c0202c 	andhi	r3,r19,128
10002e2c:	18006226 	beq	r3,zero,10002fb8 <__adddf3+0x4f0>
10002e30:	3463c83a 	sub	r17,r6,r17
10002e34:	4151c83a 	sub	r8,r8,r5
10002e38:	344d803a 	cmpltu	r6,r6,r17
10002e3c:	41a7c83a 	sub	r19,r8,r6
10002e40:	3825883a 	mov	r18,r7
10002e44:	983f821e 	bne	r19,zero,10002c50 <__alt_data_end+0xf8002c50>
10002e48:	8809883a 	mov	r4,r17
10002e4c:	0003d8c0 	call	10003d8c <__clzsi2>
10002e50:	10800804 	addi	r2,r2,32
10002e54:	10fffe04 	addi	r3,r2,-8
10002e58:	010007c4 	movi	r4,31
10002e5c:	20ff810e 	bge	r4,r3,10002c64 <__alt_data_end+0xf8002c64>
10002e60:	14fff604 	addi	r19,r2,-40
10002e64:	8ce6983a 	sll	r19,r17,r19
10002e68:	0023883a 	mov	r17,zero
10002e6c:	1c3f840e 	bge	r3,r16,10002c80 <__alt_data_end+0xf8002c80>
10002e70:	017fe034 	movhi	r5,65408
10002e74:	297fffc4 	addi	r5,r5,-1
10002e78:	80e1c83a 	sub	r16,r16,r3
10002e7c:	994a703a 	and	r5,r19,r5
10002e80:	003f3006 	br	10002b44 <__alt_data_end+0xf8002b44>
10002e84:	0009883a 	mov	r4,zero
10002e88:	0005883a 	mov	r2,zero
10002e8c:	003f4506 	br	10002ba4 <__alt_data_end+0xf8002ba4>
10002e90:	418cb03a 	or	r6,r8,r6
10002e94:	300cc03a 	cmpne	r6,r6,zero
10002e98:	0007883a 	mov	r3,zero
10002e9c:	003f6106 	br	10002c24 <__alt_data_end+0xf8002c24>
10002ea0:	2000921e 	bne	r4,zero,100030ec <__adddf3+0x624>
10002ea4:	80800044 	addi	r2,r16,1
10002ea8:	11c1ffcc 	andi	r7,r2,2047
10002eac:	01000044 	movi	r4,1
10002eb0:	21c0610e 	bge	r4,r7,10003038 <__adddf3+0x570>
10002eb4:	0101ffc4 	movi	r4,2047
10002eb8:	1100a326 	beq	r2,r4,10003148 <__adddf3+0x680>
10002ebc:	344d883a 	add	r6,r6,r17
10002ec0:	3463803a 	cmpltu	r17,r6,r17
10002ec4:	414b883a 	add	r5,r8,r5
10002ec8:	2c4b883a 	add	r5,r5,r17
10002ecc:	282297fa 	slli	r17,r5,31
10002ed0:	300cd07a 	srli	r6,r6,1
10002ed4:	280ad07a 	srli	r5,r5,1
10002ed8:	1021883a 	mov	r16,r2
10002edc:	89a2b03a 	or	r17,r17,r6
10002ee0:	003f1806 	br	10002b44 <__alt_data_end+0xf8002b44>
10002ee4:	0081ffc4 	movi	r2,2047
10002ee8:	80bf411e 	bne	r16,r2,10002bf0 <__alt_data_end+0xf8002bf0>
10002eec:	003f1506 	br	10002b44 <__alt_data_end+0xf8002b44>
10002ef0:	80bff844 	addi	r2,r16,-31
10002ef4:	00c00804 	movi	r3,32
10002ef8:	9884d83a 	srl	r2,r19,r2
10002efc:	28c04a26 	beq	r5,r3,10003028 <__adddf3+0x560>
10002f00:	00c00fc4 	movi	r3,63
10002f04:	1c21c83a 	sub	r16,r3,r16
10002f08:	9c26983a 	sll	r19,r19,r16
10002f0c:	9c62b03a 	or	r17,r19,r17
10002f10:	8822c03a 	cmpne	r17,r17,zero
10002f14:	88a2b03a 	or	r17,r17,r2
10002f18:	000b883a 	mov	r5,zero
10002f1c:	0021883a 	mov	r16,zero
10002f20:	003fb406 	br	10002df4 <__alt_data_end+0xf8002df4>
10002f24:	18bff804 	addi	r2,r3,-32
10002f28:	01000804 	movi	r4,32
10002f2c:	4084d83a 	srl	r2,r8,r2
10002f30:	19003f26 	beq	r3,r4,10003030 <__adddf3+0x568>
10002f34:	01001004 	movi	r4,64
10002f38:	20c7c83a 	sub	r3,r4,r3
10002f3c:	40d0983a 	sll	r8,r8,r3
10002f40:	418cb03a 	or	r6,r8,r6
10002f44:	300cc03a 	cmpne	r6,r6,zero
10002f48:	308cb03a 	or	r6,r6,r2
10002f4c:	0007883a 	mov	r3,zero
10002f50:	003f3406 	br	10002c24 <__alt_data_end+0xf8002c24>
10002f54:	80002326 	beq	r16,zero,10002fe4 <__adddf3+0x51c>
10002f58:	0101ffc4 	movi	r4,2047
10002f5c:	11005e26 	beq	r2,r4,100030d8 <__adddf3+0x610>
10002f60:	00c7c83a 	sub	r3,zero,r3
10002f64:	29402034 	orhi	r5,r5,128
10002f68:	01000e04 	movi	r4,56
10002f6c:	20c07216 	blt	r4,r3,10003138 <__adddf3+0x670>
10002f70:	010007c4 	movi	r4,31
10002f74:	20c0ce16 	blt	r4,r3,100032b0 <__adddf3+0x7e8>
10002f78:	01000804 	movi	r4,32
10002f7c:	20c9c83a 	sub	r4,r4,r3
10002f80:	2914983a 	sll	r10,r5,r4
10002f84:	88d2d83a 	srl	r9,r17,r3
10002f88:	8908983a 	sll	r4,r17,r4
10002f8c:	28c6d83a 	srl	r3,r5,r3
10002f90:	5262b03a 	or	r17,r10,r9
10002f94:	2008c03a 	cmpne	r4,r4,zero
10002f98:	8922b03a 	or	r17,r17,r4
10002f9c:	3463c83a 	sub	r17,r6,r17
10002fa0:	40c7c83a 	sub	r3,r8,r3
10002fa4:	344d803a 	cmpltu	r6,r6,r17
10002fa8:	198bc83a 	sub	r5,r3,r6
10002fac:	1021883a 	mov	r16,r2
10002fb0:	3825883a 	mov	r18,r7
10002fb4:	003f2006 	br	10002c38 <__alt_data_end+0xf8002c38>
10002fb8:	9886b03a 	or	r3,r19,r2
10002fbc:	1800141e 	bne	r3,zero,10003010 <__adddf3+0x548>
10002fc0:	0007883a 	mov	r3,zero
10002fc4:	000b883a 	mov	r5,zero
10002fc8:	0023883a 	mov	r17,zero
10002fcc:	0021883a 	mov	r16,zero
10002fd0:	003f3c06 	br	10002cc4 <__alt_data_end+0xf8002cc4>
10002fd4:	418cb03a 	or	r6,r8,r6
10002fd8:	300cc03a 	cmpne	r6,r6,zero
10002fdc:	0011883a 	mov	r8,zero
10002fe0:	003f5606 	br	10002d3c <__alt_data_end+0xf8002d3c>
10002fe4:	2c48b03a 	or	r4,r5,r17
10002fe8:	20003b26 	beq	r4,zero,100030d8 <__adddf3+0x610>
10002fec:	00c6303a 	nor	r3,zero,r3
10002ff0:	1800371e 	bne	r3,zero,100030d0 <__adddf3+0x608>
10002ff4:	3463c83a 	sub	r17,r6,r17
10002ff8:	414bc83a 	sub	r5,r8,r5
10002ffc:	344d803a 	cmpltu	r6,r6,r17
10003000:	298bc83a 	sub	r5,r5,r6
10003004:	1021883a 	mov	r16,r2
10003008:	3825883a 	mov	r18,r7
1000300c:	003f0a06 	br	10002c38 <__alt_data_end+0xf8002c38>
10003010:	1023883a 	mov	r17,r2
10003014:	003f0d06 	br	10002c4c <__alt_data_end+0xf8002c4c>
10003018:	0007883a 	mov	r3,zero
1000301c:	000b883a 	mov	r5,zero
10003020:	0023883a 	mov	r17,zero
10003024:	003f2706 	br	10002cc4 <__alt_data_end+0xf8002cc4>
10003028:	0027883a 	mov	r19,zero
1000302c:	003fb706 	br	10002f0c <__alt_data_end+0xf8002f0c>
10003030:	0011883a 	mov	r8,zero
10003034:	003fc206 	br	10002f40 <__alt_data_end+0xf8002f40>
10003038:	2c44b03a 	or	r2,r5,r17
1000303c:	8000871e 	bne	r16,zero,1000325c <__adddf3+0x794>
10003040:	1000b126 	beq	r2,zero,10003308 <__adddf3+0x840>
10003044:	4184b03a 	or	r2,r8,r6
10003048:	103ebe26 	beq	r2,zero,10002b44 <__alt_data_end+0xf8002b44>
1000304c:	3445883a 	add	r2,r6,r17
10003050:	1463803a 	cmpltu	r17,r2,r17
10003054:	414b883a 	add	r5,r8,r5
10003058:	2c4b883a 	add	r5,r5,r17
1000305c:	28c0202c 	andhi	r3,r5,128
10003060:	1023883a 	mov	r17,r2
10003064:	183f6326 	beq	r3,zero,10002df4 <__alt_data_end+0xf8002df4>
10003068:	00bfe034 	movhi	r2,65408
1000306c:	10bfffc4 	addi	r2,r2,-1
10003070:	2021883a 	mov	r16,r4
10003074:	288a703a 	and	r5,r5,r2
10003078:	003eb206 	br	10002b44 <__alt_data_end+0xf8002b44>
1000307c:	2c44b03a 	or	r2,r5,r17
10003080:	8000251e 	bne	r16,zero,10003118 <__adddf3+0x650>
10003084:	10004b1e 	bne	r2,zero,100031b4 <__adddf3+0x6ec>
10003088:	4184b03a 	or	r2,r8,r6
1000308c:	103fe226 	beq	r2,zero,10003018 <__alt_data_end+0xf8003018>
10003090:	400b883a 	mov	r5,r8
10003094:	3023883a 	mov	r17,r6
10003098:	3825883a 	mov	r18,r7
1000309c:	003ea906 	br	10002b44 <__alt_data_end+0xf8002b44>
100030a0:	20bff804 	addi	r2,r4,-32
100030a4:	01c00804 	movi	r7,32
100030a8:	4084d83a 	srl	r2,r8,r2
100030ac:	21c07e26 	beq	r4,r7,100032a8 <__adddf3+0x7e0>
100030b0:	01c01004 	movi	r7,64
100030b4:	3909c83a 	sub	r4,r7,r4
100030b8:	4110983a 	sll	r8,r8,r4
100030bc:	418cb03a 	or	r6,r8,r6
100030c0:	300cc03a 	cmpne	r6,r6,zero
100030c4:	308cb03a 	or	r6,r6,r2
100030c8:	0011883a 	mov	r8,zero
100030cc:	003f1b06 	br	10002d3c <__alt_data_end+0xf8002d3c>
100030d0:	0101ffc4 	movi	r4,2047
100030d4:	113fa41e 	bne	r2,r4,10002f68 <__alt_data_end+0xf8002f68>
100030d8:	400b883a 	mov	r5,r8
100030dc:	3023883a 	mov	r17,r6
100030e0:	1021883a 	mov	r16,r2
100030e4:	3825883a 	mov	r18,r7
100030e8:	003e9606 	br	10002b44 <__alt_data_end+0xf8002b44>
100030ec:	80001a1e 	bne	r16,zero,10003158 <__adddf3+0x690>
100030f0:	2c4eb03a 	or	r7,r5,r17
100030f4:	38005526 	beq	r7,zero,1000324c <__adddf3+0x784>
100030f8:	0108303a 	nor	r4,zero,r4
100030fc:	2000511e 	bne	r4,zero,10003244 <__adddf3+0x77c>
10003100:	89a3883a 	add	r17,r17,r6
10003104:	414b883a 	add	r5,r8,r5
10003108:	898d803a 	cmpltu	r6,r17,r6
1000310c:	298b883a 	add	r5,r5,r6
10003110:	1021883a 	mov	r16,r2
10003114:	003f0e06 	br	10002d50 <__alt_data_end+0xf8002d50>
10003118:	1000341e 	bne	r2,zero,100031ec <__adddf3+0x724>
1000311c:	4184b03a 	or	r2,r8,r6
10003120:	10006f26 	beq	r2,zero,100032e0 <__adddf3+0x818>
10003124:	400b883a 	mov	r5,r8
10003128:	3023883a 	mov	r17,r6
1000312c:	3825883a 	mov	r18,r7
10003130:	0401ffc4 	movi	r16,2047
10003134:	003e8306 	br	10002b44 <__alt_data_end+0xf8002b44>
10003138:	2c62b03a 	or	r17,r5,r17
1000313c:	8822c03a 	cmpne	r17,r17,zero
10003140:	0007883a 	mov	r3,zero
10003144:	003f9506 	br	10002f9c <__alt_data_end+0xf8002f9c>
10003148:	1021883a 	mov	r16,r2
1000314c:	000b883a 	mov	r5,zero
10003150:	0023883a 	mov	r17,zero
10003154:	003edb06 	br	10002cc4 <__alt_data_end+0xf8002cc4>
10003158:	01c1ffc4 	movi	r7,2047
1000315c:	11c03b26 	beq	r2,r7,1000324c <__adddf3+0x784>
10003160:	0109c83a 	sub	r4,zero,r4
10003164:	29402034 	orhi	r5,r5,128
10003168:	01c00e04 	movi	r7,56
1000316c:	39006216 	blt	r7,r4,100032f8 <__adddf3+0x830>
10003170:	01c007c4 	movi	r7,31
10003174:	39006b16 	blt	r7,r4,10003324 <__adddf3+0x85c>
10003178:	01c00804 	movi	r7,32
1000317c:	390fc83a 	sub	r7,r7,r4
10003180:	29d4983a 	sll	r10,r5,r7
10003184:	8912d83a 	srl	r9,r17,r4
10003188:	89ce983a 	sll	r7,r17,r7
1000318c:	2908d83a 	srl	r4,r5,r4
10003190:	5262b03a 	or	r17,r10,r9
10003194:	380ac03a 	cmpne	r5,r7,zero
10003198:	8962b03a 	or	r17,r17,r5
1000319c:	89a3883a 	add	r17,r17,r6
100031a0:	2211883a 	add	r8,r4,r8
100031a4:	898d803a 	cmpltu	r6,r17,r6
100031a8:	418b883a 	add	r5,r8,r6
100031ac:	1021883a 	mov	r16,r2
100031b0:	003ee706 	br	10002d50 <__alt_data_end+0xf8002d50>
100031b4:	4184b03a 	or	r2,r8,r6
100031b8:	103e6226 	beq	r2,zero,10002b44 <__alt_data_end+0xf8002b44>
100031bc:	8987c83a 	sub	r3,r17,r6
100031c0:	88c9803a 	cmpltu	r4,r17,r3
100031c4:	2a05c83a 	sub	r2,r5,r8
100031c8:	1105c83a 	sub	r2,r2,r4
100031cc:	1100202c 	andhi	r4,r2,128
100031d0:	203f0426 	beq	r4,zero,10002de4 <__alt_data_end+0xf8002de4>
100031d4:	3463c83a 	sub	r17,r6,r17
100031d8:	414bc83a 	sub	r5,r8,r5
100031dc:	344d803a 	cmpltu	r6,r6,r17
100031e0:	298bc83a 	sub	r5,r5,r6
100031e4:	3825883a 	mov	r18,r7
100031e8:	003e5606 	br	10002b44 <__alt_data_end+0xf8002b44>
100031ec:	4184b03a 	or	r2,r8,r6
100031f0:	10002b26 	beq	r2,zero,100032a0 <__adddf3+0x7d8>
100031f4:	2804d0fa 	srli	r2,r5,3
100031f8:	8822d0fa 	srli	r17,r17,3
100031fc:	280a977a 	slli	r5,r5,29
10003200:	10c0022c 	andhi	r3,r2,8
10003204:	2c62b03a 	or	r17,r5,r17
10003208:	18000826 	beq	r3,zero,1000322c <__adddf3+0x764>
1000320c:	4008d0fa 	srli	r4,r8,3
10003210:	20c0022c 	andhi	r3,r4,8
10003214:	1800051e 	bne	r3,zero,1000322c <__adddf3+0x764>
10003218:	300cd0fa 	srli	r6,r6,3
1000321c:	4010977a 	slli	r8,r8,29
10003220:	2005883a 	mov	r2,r4
10003224:	3825883a 	mov	r18,r7
10003228:	41a2b03a 	or	r17,r8,r6
1000322c:	880ad77a 	srli	r5,r17,29
10003230:	100490fa 	slli	r2,r2,3
10003234:	882290fa 	slli	r17,r17,3
10003238:	0401ffc4 	movi	r16,2047
1000323c:	288ab03a 	or	r5,r5,r2
10003240:	003e4006 	br	10002b44 <__alt_data_end+0xf8002b44>
10003244:	01c1ffc4 	movi	r7,2047
10003248:	11ffc71e 	bne	r2,r7,10003168 <__alt_data_end+0xf8003168>
1000324c:	400b883a 	mov	r5,r8
10003250:	3023883a 	mov	r17,r6
10003254:	1021883a 	mov	r16,r2
10003258:	003e3a06 	br	10002b44 <__alt_data_end+0xf8002b44>
1000325c:	10002d26 	beq	r2,zero,10003314 <__adddf3+0x84c>
10003260:	4184b03a 	or	r2,r8,r6
10003264:	10000e26 	beq	r2,zero,100032a0 <__adddf3+0x7d8>
10003268:	2804d0fa 	srli	r2,r5,3
1000326c:	8822d0fa 	srli	r17,r17,3
10003270:	280a977a 	slli	r5,r5,29
10003274:	10c0022c 	andhi	r3,r2,8
10003278:	2c62b03a 	or	r17,r5,r17
1000327c:	183feb26 	beq	r3,zero,1000322c <__alt_data_end+0xf800322c>
10003280:	4008d0fa 	srli	r4,r8,3
10003284:	20c0022c 	andhi	r3,r4,8
10003288:	183fe81e 	bne	r3,zero,1000322c <__alt_data_end+0xf800322c>
1000328c:	300cd0fa 	srli	r6,r6,3
10003290:	4010977a 	slli	r8,r8,29
10003294:	2005883a 	mov	r2,r4
10003298:	41a2b03a 	or	r17,r8,r6
1000329c:	003fe306 	br	1000322c <__alt_data_end+0xf800322c>
100032a0:	0401ffc4 	movi	r16,2047
100032a4:	003e2706 	br	10002b44 <__alt_data_end+0xf8002b44>
100032a8:	0011883a 	mov	r8,zero
100032ac:	003f8306 	br	100030bc <__alt_data_end+0xf80030bc>
100032b0:	193ff804 	addi	r4,r3,-32
100032b4:	02400804 	movi	r9,32
100032b8:	2908d83a 	srl	r4,r5,r4
100032bc:	1a402526 	beq	r3,r9,10003354 <__adddf3+0x88c>
100032c0:	02401004 	movi	r9,64
100032c4:	48c7c83a 	sub	r3,r9,r3
100032c8:	28ca983a 	sll	r5,r5,r3
100032cc:	2c62b03a 	or	r17,r5,r17
100032d0:	8822c03a 	cmpne	r17,r17,zero
100032d4:	8922b03a 	or	r17,r17,r4
100032d8:	0007883a 	mov	r3,zero
100032dc:	003f2f06 	br	10002f9c <__alt_data_end+0xf8002f9c>
100032e0:	01402034 	movhi	r5,128
100032e4:	0007883a 	mov	r3,zero
100032e8:	297fffc4 	addi	r5,r5,-1
100032ec:	047ffe04 	movi	r17,-8
100032f0:	0401ffc4 	movi	r16,2047
100032f4:	003e7306 	br	10002cc4 <__alt_data_end+0xf8002cc4>
100032f8:	2c62b03a 	or	r17,r5,r17
100032fc:	8822c03a 	cmpne	r17,r17,zero
10003300:	0009883a 	mov	r4,zero
10003304:	003fa506 	br	1000319c <__alt_data_end+0xf800319c>
10003308:	400b883a 	mov	r5,r8
1000330c:	3023883a 	mov	r17,r6
10003310:	003e0c06 	br	10002b44 <__alt_data_end+0xf8002b44>
10003314:	400b883a 	mov	r5,r8
10003318:	3023883a 	mov	r17,r6
1000331c:	0401ffc4 	movi	r16,2047
10003320:	003e0806 	br	10002b44 <__alt_data_end+0xf8002b44>
10003324:	21fff804 	addi	r7,r4,-32
10003328:	02400804 	movi	r9,32
1000332c:	29ced83a 	srl	r7,r5,r7
10003330:	22400a26 	beq	r4,r9,1000335c <__adddf3+0x894>
10003334:	02401004 	movi	r9,64
10003338:	4909c83a 	sub	r4,r9,r4
1000333c:	290a983a 	sll	r5,r5,r4
10003340:	2c62b03a 	or	r17,r5,r17
10003344:	8822c03a 	cmpne	r17,r17,zero
10003348:	89e2b03a 	or	r17,r17,r7
1000334c:	0009883a 	mov	r4,zero
10003350:	003f9206 	br	1000319c <__alt_data_end+0xf800319c>
10003354:	000b883a 	mov	r5,zero
10003358:	003fdc06 	br	100032cc <__alt_data_end+0xf80032cc>
1000335c:	000b883a 	mov	r5,zero
10003360:	003ff706 	br	10003340 <__alt_data_end+0xf8003340>

10003364 <__subdf3>:
10003364:	00c00434 	movhi	r3,16
10003368:	18ffffc4 	addi	r3,r3,-1
1000336c:	defffb04 	addi	sp,sp,-20
10003370:	28d2703a 	and	r9,r5,r3
10003374:	3814d53a 	srli	r10,r7,20
10003378:	38c6703a 	and	r3,r7,r3
1000337c:	3004d77a 	srli	r2,r6,29
10003380:	dc800215 	stw	r18,8(sp)
10003384:	dc000015 	stw	r16,0(sp)
10003388:	2824d7fa 	srli	r18,r5,31
1000338c:	2820d53a 	srli	r16,r5,20
10003390:	481290fa 	slli	r9,r9,3
10003394:	200ad77a 	srli	r5,r4,29
10003398:	180690fa 	slli	r3,r3,3
1000339c:	dc400115 	stw	r17,4(sp)
100033a0:	dfc00415 	stw	ra,16(sp)
100033a4:	202290fa 	slli	r17,r4,3
100033a8:	dcc00315 	stw	r19,12(sp)
100033ac:	5281ffcc 	andi	r10,r10,2047
100033b0:	0101ffc4 	movi	r4,2047
100033b4:	9011883a 	mov	r8,r18
100033b8:	8401ffcc 	andi	r16,r16,2047
100033bc:	94803fcc 	andi	r18,r18,255
100033c0:	494ab03a 	or	r5,r9,r5
100033c4:	380ed7fa 	srli	r7,r7,31
100033c8:	1886b03a 	or	r3,r3,r2
100033cc:	300c90fa 	slli	r6,r6,3
100033d0:	51009026 	beq	r10,r4,10003614 <__subdf3+0x2b0>
100033d4:	39c0005c 	xori	r7,r7,1
100033d8:	8285c83a 	sub	r2,r16,r10
100033dc:	91c06f26 	beq	r18,r7,1000359c <__subdf3+0x238>
100033e0:	0080b10e 	bge	zero,r2,100036a8 <__subdf3+0x344>
100033e4:	50002a1e 	bne	r10,zero,10003490 <__subdf3+0x12c>
100033e8:	1988b03a 	or	r4,r3,r6
100033ec:	2000941e 	bne	r4,zero,10003640 <__subdf3+0x2dc>
100033f0:	888001cc 	andi	r2,r17,7
100033f4:	10005b26 	beq	r2,zero,10003564 <__subdf3+0x200>
100033f8:	88c003cc 	andi	r3,r17,15
100033fc:	00800104 	movi	r2,4
10003400:	18805826 	beq	r3,r2,10003564 <__subdf3+0x200>
10003404:	88c00104 	addi	r3,r17,4
10003408:	1c63803a 	cmpltu	r17,r3,r17
1000340c:	2c4b883a 	add	r5,r5,r17
10003410:	2880202c 	andhi	r2,r5,128
10003414:	9200004c 	andi	r8,r18,1
10003418:	1823883a 	mov	r17,r3
1000341c:	10005426 	beq	r2,zero,10003570 <__subdf3+0x20c>
10003420:	84000044 	addi	r16,r16,1
10003424:	0081ffc4 	movi	r2,2047
10003428:	8080bf26 	beq	r16,r2,10003728 <__subdf3+0x3c4>
1000342c:	013fe034 	movhi	r4,65408
10003430:	213fffc4 	addi	r4,r4,-1
10003434:	290a703a 	and	r5,r5,r4
10003438:	2804977a 	slli	r2,r5,29
1000343c:	280a927a 	slli	r5,r5,9
10003440:	8822d0fa 	srli	r17,r17,3
10003444:	8401ffcc 	andi	r16,r16,2047
10003448:	2808d33a 	srli	r4,r5,12
1000344c:	1444b03a 	or	r2,r2,r17
10003450:	8401ffcc 	andi	r16,r16,2047
10003454:	800a953a 	slli	r5,r16,20
10003458:	40c03fcc 	andi	r3,r8,255
1000345c:	04000434 	movhi	r16,16
10003460:	180697fa 	slli	r3,r3,31
10003464:	843fffc4 	addi	r16,r16,-1
10003468:	2420703a 	and	r16,r4,r16
1000346c:	8160b03a 	or	r16,r16,r5
10003470:	80c6b03a 	or	r3,r16,r3
10003474:	dfc00417 	ldw	ra,16(sp)
10003478:	dcc00317 	ldw	r19,12(sp)
1000347c:	dc800217 	ldw	r18,8(sp)
10003480:	dc400117 	ldw	r17,4(sp)
10003484:	dc000017 	ldw	r16,0(sp)
10003488:	dec00504 	addi	sp,sp,20
1000348c:	f800283a 	ret
10003490:	0101ffc4 	movi	r4,2047
10003494:	813fd626 	beq	r16,r4,100033f0 <__alt_data_end+0xf80033f0>
10003498:	18c02034 	orhi	r3,r3,128
1000349c:	01000e04 	movi	r4,56
100034a0:	2080a416 	blt	r4,r2,10003734 <__subdf3+0x3d0>
100034a4:	010007c4 	movi	r4,31
100034a8:	2080c716 	blt	r4,r2,100037c8 <__subdf3+0x464>
100034ac:	01000804 	movi	r4,32
100034b0:	2089c83a 	sub	r4,r4,r2
100034b4:	1910983a 	sll	r8,r3,r4
100034b8:	308ed83a 	srl	r7,r6,r2
100034bc:	3108983a 	sll	r4,r6,r4
100034c0:	1884d83a 	srl	r2,r3,r2
100034c4:	41ccb03a 	or	r6,r8,r7
100034c8:	2008c03a 	cmpne	r4,r4,zero
100034cc:	310cb03a 	or	r6,r6,r4
100034d0:	898dc83a 	sub	r6,r17,r6
100034d4:	89a3803a 	cmpltu	r17,r17,r6
100034d8:	288bc83a 	sub	r5,r5,r2
100034dc:	2c4bc83a 	sub	r5,r5,r17
100034e0:	3023883a 	mov	r17,r6
100034e4:	2880202c 	andhi	r2,r5,128
100034e8:	10006b26 	beq	r2,zero,10003698 <__subdf3+0x334>
100034ec:	04c02034 	movhi	r19,128
100034f0:	9cffffc4 	addi	r19,r19,-1
100034f4:	2ce6703a 	and	r19,r5,r19
100034f8:	98007c26 	beq	r19,zero,100036ec <__subdf3+0x388>
100034fc:	9809883a 	mov	r4,r19
10003500:	0003d8c0 	call	10003d8c <__clzsi2>
10003504:	10fffe04 	addi	r3,r2,-8
10003508:	010007c4 	movi	r4,31
1000350c:	20c07d16 	blt	r4,r3,10003704 <__subdf3+0x3a0>
10003510:	01400a04 	movi	r5,40
10003514:	2885c83a 	sub	r2,r5,r2
10003518:	888ad83a 	srl	r5,r17,r2
1000351c:	98e6983a 	sll	r19,r19,r3
10003520:	88e2983a 	sll	r17,r17,r3
10003524:	2ce6b03a 	or	r19,r5,r19
10003528:	1c007a16 	blt	r3,r16,10003714 <__subdf3+0x3b0>
1000352c:	1c21c83a 	sub	r16,r3,r16
10003530:	81400044 	addi	r5,r16,1
10003534:	00c007c4 	movi	r3,31
10003538:	19409616 	blt	r3,r5,10003794 <__subdf3+0x430>
1000353c:	1c21c83a 	sub	r16,r3,r16
10003540:	8c08983a 	sll	r4,r17,r16
10003544:	8946d83a 	srl	r3,r17,r5
10003548:	9c20983a 	sll	r16,r19,r16
1000354c:	2008c03a 	cmpne	r4,r4,zero
10003550:	994ad83a 	srl	r5,r19,r5
10003554:	1c06b03a 	or	r3,r3,r16
10003558:	1922b03a 	or	r17,r3,r4
1000355c:	0021883a 	mov	r16,zero
10003560:	003fa306 	br	100033f0 <__alt_data_end+0xf80033f0>
10003564:	2880202c 	andhi	r2,r5,128
10003568:	9200004c 	andi	r8,r18,1
1000356c:	103fac1e 	bne	r2,zero,10003420 <__alt_data_end+0xf8003420>
10003570:	2804977a 	slli	r2,r5,29
10003574:	8822d0fa 	srli	r17,r17,3
10003578:	00c1ffc4 	movi	r3,2047
1000357c:	280ad0fa 	srli	r5,r5,3
10003580:	1444b03a 	or	r2,r2,r17
10003584:	80c02726 	beq	r16,r3,10003624 <__subdf3+0x2c0>
10003588:	01000434 	movhi	r4,16
1000358c:	213fffc4 	addi	r4,r4,-1
10003590:	80e0703a 	and	r16,r16,r3
10003594:	2908703a 	and	r4,r5,r4
10003598:	003fad06 	br	10003450 <__alt_data_end+0xf8003450>
1000359c:	0080690e 	bge	zero,r2,10003744 <__subdf3+0x3e0>
100035a0:	50002f26 	beq	r10,zero,10003660 <__subdf3+0x2fc>
100035a4:	0101ffc4 	movi	r4,2047
100035a8:	813f9126 	beq	r16,r4,100033f0 <__alt_data_end+0xf80033f0>
100035ac:	18c02034 	orhi	r3,r3,128
100035b0:	01000e04 	movi	r4,56
100035b4:	2080b00e 	bge	r4,r2,10003878 <__subdf3+0x514>
100035b8:	198cb03a 	or	r6,r3,r6
100035bc:	300ec03a 	cmpne	r7,r6,zero
100035c0:	0005883a 	mov	r2,zero
100035c4:	3c4f883a 	add	r7,r7,r17
100035c8:	3c63803a 	cmpltu	r17,r7,r17
100035cc:	114b883a 	add	r5,r2,r5
100035d0:	2c4b883a 	add	r5,r5,r17
100035d4:	3823883a 	mov	r17,r7
100035d8:	2880202c 	andhi	r2,r5,128
100035dc:	10002e26 	beq	r2,zero,10003698 <__subdf3+0x334>
100035e0:	84000044 	addi	r16,r16,1
100035e4:	0081ffc4 	movi	r2,2047
100035e8:	8080de26 	beq	r16,r2,10003964 <__subdf3+0x600>
100035ec:	00bfe034 	movhi	r2,65408
100035f0:	10bfffc4 	addi	r2,r2,-1
100035f4:	288a703a 	and	r5,r5,r2
100035f8:	880cd07a 	srli	r6,r17,1
100035fc:	280897fa 	slli	r4,r5,31
10003600:	88c0004c 	andi	r3,r17,1
10003604:	30e2b03a 	or	r17,r6,r3
10003608:	280ad07a 	srli	r5,r5,1
1000360c:	8922b03a 	or	r17,r17,r4
10003610:	003f7706 	br	100033f0 <__alt_data_end+0xf80033f0>
10003614:	1984b03a 	or	r2,r3,r6
10003618:	103f6e26 	beq	r2,zero,100033d4 <__alt_data_end+0xf80033d4>
1000361c:	39c03fcc 	andi	r7,r7,255
10003620:	003f6d06 	br	100033d8 <__alt_data_end+0xf80033d8>
10003624:	1146b03a 	or	r3,r2,r5
10003628:	18003f26 	beq	r3,zero,10003728 <__subdf3+0x3c4>
1000362c:	00c00434 	movhi	r3,16
10003630:	29000234 	orhi	r4,r5,8
10003634:	18ffffc4 	addi	r3,r3,-1
10003638:	20c8703a 	and	r4,r4,r3
1000363c:	003f8406 	br	10003450 <__alt_data_end+0xf8003450>
10003640:	10bfffc4 	addi	r2,r2,-1
10003644:	1000501e 	bne	r2,zero,10003788 <__subdf3+0x424>
10003648:	898fc83a 	sub	r7,r17,r6
1000364c:	89e3803a 	cmpltu	r17,r17,r7
10003650:	28cbc83a 	sub	r5,r5,r3
10003654:	2c4bc83a 	sub	r5,r5,r17
10003658:	3823883a 	mov	r17,r7
1000365c:	003fa106 	br	100034e4 <__alt_data_end+0xf80034e4>
10003660:	1988b03a 	or	r4,r3,r6
10003664:	203f6226 	beq	r4,zero,100033f0 <__alt_data_end+0xf80033f0>
10003668:	10bfffc4 	addi	r2,r2,-1
1000366c:	10009b1e 	bne	r2,zero,100038dc <__subdf3+0x578>
10003670:	344d883a 	add	r6,r6,r17
10003674:	3463803a 	cmpltu	r17,r6,r17
10003678:	194b883a 	add	r5,r3,r5
1000367c:	2c4b883a 	add	r5,r5,r17
10003680:	3023883a 	mov	r17,r6
10003684:	003fd406 	br	100035d8 <__alt_data_end+0xf80035d8>
10003688:	1106b03a 	or	r3,r2,r4
1000368c:	1800b426 	beq	r3,zero,10003960 <__subdf3+0x5fc>
10003690:	100b883a 	mov	r5,r2
10003694:	2023883a 	mov	r17,r4
10003698:	888001cc 	andi	r2,r17,7
1000369c:	103f561e 	bne	r2,zero,100033f8 <__alt_data_end+0xf80033f8>
100036a0:	9200004c 	andi	r8,r18,1
100036a4:	003fb206 	br	10003570 <__alt_data_end+0xf8003570>
100036a8:	1000531e 	bne	r2,zero,100037f8 <__subdf3+0x494>
100036ac:	80800044 	addi	r2,r16,1
100036b0:	1081ffcc 	andi	r2,r2,2047
100036b4:	01000044 	movi	r4,1
100036b8:	2080a00e 	bge	r4,r2,1000393c <__subdf3+0x5d8>
100036bc:	8985c83a 	sub	r2,r17,r6
100036c0:	8889803a 	cmpltu	r4,r17,r2
100036c4:	28e7c83a 	sub	r19,r5,r3
100036c8:	9927c83a 	sub	r19,r19,r4
100036cc:	9900202c 	andhi	r4,r19,128
100036d0:	20006226 	beq	r4,zero,1000385c <__subdf3+0x4f8>
100036d4:	3463c83a 	sub	r17,r6,r17
100036d8:	194bc83a 	sub	r5,r3,r5
100036dc:	344d803a 	cmpltu	r6,r6,r17
100036e0:	29a7c83a 	sub	r19,r5,r6
100036e4:	3825883a 	mov	r18,r7
100036e8:	983f841e 	bne	r19,zero,100034fc <__alt_data_end+0xf80034fc>
100036ec:	8809883a 	mov	r4,r17
100036f0:	0003d8c0 	call	10003d8c <__clzsi2>
100036f4:	10800804 	addi	r2,r2,32
100036f8:	10fffe04 	addi	r3,r2,-8
100036fc:	010007c4 	movi	r4,31
10003700:	20ff830e 	bge	r4,r3,10003510 <__alt_data_end+0xf8003510>
10003704:	14fff604 	addi	r19,r2,-40
10003708:	8ce6983a 	sll	r19,r17,r19
1000370c:	0023883a 	mov	r17,zero
10003710:	1c3f860e 	bge	r3,r16,1000352c <__alt_data_end+0xf800352c>
10003714:	017fe034 	movhi	r5,65408
10003718:	297fffc4 	addi	r5,r5,-1
1000371c:	80e1c83a 	sub	r16,r16,r3
10003720:	994a703a 	and	r5,r19,r5
10003724:	003f3206 	br	100033f0 <__alt_data_end+0xf80033f0>
10003728:	0009883a 	mov	r4,zero
1000372c:	0005883a 	mov	r2,zero
10003730:	003f4706 	br	10003450 <__alt_data_end+0xf8003450>
10003734:	198cb03a 	or	r6,r3,r6
10003738:	300cc03a 	cmpne	r6,r6,zero
1000373c:	0005883a 	mov	r2,zero
10003740:	003f6306 	br	100034d0 <__alt_data_end+0xf80034d0>
10003744:	10009d1e 	bne	r2,zero,100039bc <__subdf3+0x658>
10003748:	81c00044 	addi	r7,r16,1
1000374c:	3881ffcc 	andi	r2,r7,2047
10003750:	02400044 	movi	r9,1
10003754:	4880680e 	bge	r9,r2,100038f8 <__subdf3+0x594>
10003758:	0081ffc4 	movi	r2,2047
1000375c:	3880ae26 	beq	r7,r2,10003a18 <__subdf3+0x6b4>
10003760:	344d883a 	add	r6,r6,r17
10003764:	3463803a 	cmpltu	r17,r6,r17
10003768:	194b883a 	add	r5,r3,r5
1000376c:	2c4b883a 	add	r5,r5,r17
10003770:	282297fa 	slli	r17,r5,31
10003774:	300cd07a 	srli	r6,r6,1
10003778:	280ad07a 	srli	r5,r5,1
1000377c:	3821883a 	mov	r16,r7
10003780:	89a2b03a 	or	r17,r17,r6
10003784:	003f1a06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003788:	0101ffc4 	movi	r4,2047
1000378c:	813f431e 	bne	r16,r4,1000349c <__alt_data_end+0xf800349c>
10003790:	003f1706 	br	100033f0 <__alt_data_end+0xf80033f0>
10003794:	80bff844 	addi	r2,r16,-31
10003798:	00c00804 	movi	r3,32
1000379c:	9884d83a 	srl	r2,r19,r2
100037a0:	28c05126 	beq	r5,r3,100038e8 <__subdf3+0x584>
100037a4:	00c00fc4 	movi	r3,63
100037a8:	1c21c83a 	sub	r16,r3,r16
100037ac:	9c26983a 	sll	r19,r19,r16
100037b0:	9c62b03a 	or	r17,r19,r17
100037b4:	8822c03a 	cmpne	r17,r17,zero
100037b8:	88a2b03a 	or	r17,r17,r2
100037bc:	000b883a 	mov	r5,zero
100037c0:	0021883a 	mov	r16,zero
100037c4:	003fb406 	br	10003698 <__alt_data_end+0xf8003698>
100037c8:	113ff804 	addi	r4,r2,-32
100037cc:	01c00804 	movi	r7,32
100037d0:	1908d83a 	srl	r4,r3,r4
100037d4:	11c04626 	beq	r2,r7,100038f0 <__subdf3+0x58c>
100037d8:	01c01004 	movi	r7,64
100037dc:	3885c83a 	sub	r2,r7,r2
100037e0:	1884983a 	sll	r2,r3,r2
100037e4:	118cb03a 	or	r6,r2,r6
100037e8:	300cc03a 	cmpne	r6,r6,zero
100037ec:	310cb03a 	or	r6,r6,r4
100037f0:	0005883a 	mov	r2,zero
100037f4:	003f3606 	br	100034d0 <__alt_data_end+0xf80034d0>
100037f8:	80002b26 	beq	r16,zero,100038a8 <__subdf3+0x544>
100037fc:	0101ffc4 	movi	r4,2047
10003800:	51006926 	beq	r10,r4,100039a8 <__subdf3+0x644>
10003804:	0085c83a 	sub	r2,zero,r2
10003808:	29402034 	orhi	r5,r5,128
1000380c:	01000e04 	movi	r4,56
10003810:	20807d16 	blt	r4,r2,10003a08 <__subdf3+0x6a4>
10003814:	010007c4 	movi	r4,31
10003818:	2080d916 	blt	r4,r2,10003b80 <__subdf3+0x81c>
1000381c:	01000804 	movi	r4,32
10003820:	2089c83a 	sub	r4,r4,r2
10003824:	2912983a 	sll	r9,r5,r4
10003828:	8890d83a 	srl	r8,r17,r2
1000382c:	8908983a 	sll	r4,r17,r4
10003830:	2884d83a 	srl	r2,r5,r2
10003834:	4a22b03a 	or	r17,r9,r8
10003838:	2008c03a 	cmpne	r4,r4,zero
1000383c:	8922b03a 	or	r17,r17,r4
10003840:	3463c83a 	sub	r17,r6,r17
10003844:	1885c83a 	sub	r2,r3,r2
10003848:	344d803a 	cmpltu	r6,r6,r17
1000384c:	118bc83a 	sub	r5,r2,r6
10003850:	5021883a 	mov	r16,r10
10003854:	3825883a 	mov	r18,r7
10003858:	003f2206 	br	100034e4 <__alt_data_end+0xf80034e4>
1000385c:	9886b03a 	or	r3,r19,r2
10003860:	18001c1e 	bne	r3,zero,100038d4 <__subdf3+0x570>
10003864:	0011883a 	mov	r8,zero
10003868:	000b883a 	mov	r5,zero
1000386c:	0023883a 	mov	r17,zero
10003870:	0021883a 	mov	r16,zero
10003874:	003f3e06 	br	10003570 <__alt_data_end+0xf8003570>
10003878:	010007c4 	movi	r4,31
1000387c:	20803c16 	blt	r4,r2,10003970 <__subdf3+0x60c>
10003880:	01000804 	movi	r4,32
10003884:	2089c83a 	sub	r4,r4,r2
10003888:	1912983a 	sll	r9,r3,r4
1000388c:	308ed83a 	srl	r7,r6,r2
10003890:	3108983a 	sll	r4,r6,r4
10003894:	1884d83a 	srl	r2,r3,r2
10003898:	49ceb03a 	or	r7,r9,r7
1000389c:	2008c03a 	cmpne	r4,r4,zero
100038a0:	390eb03a 	or	r7,r7,r4
100038a4:	003f4706 	br	100035c4 <__alt_data_end+0xf80035c4>
100038a8:	2c48b03a 	or	r4,r5,r17
100038ac:	20003e26 	beq	r4,zero,100039a8 <__subdf3+0x644>
100038b0:	0084303a 	nor	r2,zero,r2
100038b4:	10003a1e 	bne	r2,zero,100039a0 <__subdf3+0x63c>
100038b8:	3463c83a 	sub	r17,r6,r17
100038bc:	194bc83a 	sub	r5,r3,r5
100038c0:	344d803a 	cmpltu	r6,r6,r17
100038c4:	298bc83a 	sub	r5,r5,r6
100038c8:	5021883a 	mov	r16,r10
100038cc:	3825883a 	mov	r18,r7
100038d0:	003f0406 	br	100034e4 <__alt_data_end+0xf80034e4>
100038d4:	1023883a 	mov	r17,r2
100038d8:	003f0706 	br	100034f8 <__alt_data_end+0xf80034f8>
100038dc:	0101ffc4 	movi	r4,2047
100038e0:	813f331e 	bne	r16,r4,100035b0 <__alt_data_end+0xf80035b0>
100038e4:	003ec206 	br	100033f0 <__alt_data_end+0xf80033f0>
100038e8:	0027883a 	mov	r19,zero
100038ec:	003fb006 	br	100037b0 <__alt_data_end+0xf80037b0>
100038f0:	0005883a 	mov	r2,zero
100038f4:	003fbb06 	br	100037e4 <__alt_data_end+0xf80037e4>
100038f8:	2c44b03a 	or	r2,r5,r17
100038fc:	80008b1e 	bne	r16,zero,10003b2c <__subdf3+0x7c8>
10003900:	1000b526 	beq	r2,zero,10003bd8 <__subdf3+0x874>
10003904:	1984b03a 	or	r2,r3,r6
10003908:	103eb926 	beq	r2,zero,100033f0 <__alt_data_end+0xf80033f0>
1000390c:	3449883a 	add	r4,r6,r17
10003910:	2463803a 	cmpltu	r17,r4,r17
10003914:	194b883a 	add	r5,r3,r5
10003918:	2c4b883a 	add	r5,r5,r17
1000391c:	2880202c 	andhi	r2,r5,128
10003920:	2023883a 	mov	r17,r4
10003924:	103f5c26 	beq	r2,zero,10003698 <__alt_data_end+0xf8003698>
10003928:	00bfe034 	movhi	r2,65408
1000392c:	10bfffc4 	addi	r2,r2,-1
10003930:	4821883a 	mov	r16,r9
10003934:	288a703a 	and	r5,r5,r2
10003938:	003ead06 	br	100033f0 <__alt_data_end+0xf80033f0>
1000393c:	2c44b03a 	or	r2,r5,r17
10003940:	8000291e 	bne	r16,zero,100039e8 <__subdf3+0x684>
10003944:	10004f1e 	bne	r2,zero,10003a84 <__subdf3+0x720>
10003948:	1984b03a 	or	r2,r3,r6
1000394c:	10000426 	beq	r2,zero,10003960 <__subdf3+0x5fc>
10003950:	180b883a 	mov	r5,r3
10003954:	3023883a 	mov	r17,r6
10003958:	3825883a 	mov	r18,r7
1000395c:	003ea406 	br	100033f0 <__alt_data_end+0xf80033f0>
10003960:	0011883a 	mov	r8,zero
10003964:	000b883a 	mov	r5,zero
10003968:	0023883a 	mov	r17,zero
1000396c:	003f0006 	br	10003570 <__alt_data_end+0xf8003570>
10003970:	11fff804 	addi	r7,r2,-32
10003974:	19c8d83a 	srl	r4,r3,r7
10003978:	01c00804 	movi	r7,32
1000397c:	11c07e26 	beq	r2,r7,10003b78 <__subdf3+0x814>
10003980:	01c01004 	movi	r7,64
10003984:	3885c83a 	sub	r2,r7,r2
10003988:	1884983a 	sll	r2,r3,r2
1000398c:	118cb03a 	or	r6,r2,r6
10003990:	300ec03a 	cmpne	r7,r6,zero
10003994:	390eb03a 	or	r7,r7,r4
10003998:	0005883a 	mov	r2,zero
1000399c:	003f0906 	br	100035c4 <__alt_data_end+0xf80035c4>
100039a0:	0101ffc4 	movi	r4,2047
100039a4:	513f991e 	bne	r10,r4,1000380c <__alt_data_end+0xf800380c>
100039a8:	180b883a 	mov	r5,r3
100039ac:	3023883a 	mov	r17,r6
100039b0:	5021883a 	mov	r16,r10
100039b4:	3825883a 	mov	r18,r7
100039b8:	003e8d06 	br	100033f0 <__alt_data_end+0xf80033f0>
100039bc:	80001a1e 	bne	r16,zero,10003a28 <__subdf3+0x6c4>
100039c0:	2c48b03a 	or	r4,r5,r17
100039c4:	20005526 	beq	r4,zero,10003b1c <__subdf3+0x7b8>
100039c8:	0084303a 	nor	r2,zero,r2
100039cc:	1000511e 	bne	r2,zero,10003b14 <__subdf3+0x7b0>
100039d0:	89a3883a 	add	r17,r17,r6
100039d4:	194b883a 	add	r5,r3,r5
100039d8:	898d803a 	cmpltu	r6,r17,r6
100039dc:	298b883a 	add	r5,r5,r6
100039e0:	5021883a 	mov	r16,r10
100039e4:	003efc06 	br	100035d8 <__alt_data_end+0xf80035d8>
100039e8:	1000341e 	bne	r2,zero,10003abc <__subdf3+0x758>
100039ec:	1984b03a 	or	r2,r3,r6
100039f0:	10006f26 	beq	r2,zero,10003bb0 <__subdf3+0x84c>
100039f4:	180b883a 	mov	r5,r3
100039f8:	3023883a 	mov	r17,r6
100039fc:	3825883a 	mov	r18,r7
10003a00:	0401ffc4 	movi	r16,2047
10003a04:	003e7a06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003a08:	2c62b03a 	or	r17,r5,r17
10003a0c:	8822c03a 	cmpne	r17,r17,zero
10003a10:	0005883a 	mov	r2,zero
10003a14:	003f8a06 	br	10003840 <__alt_data_end+0xf8003840>
10003a18:	3821883a 	mov	r16,r7
10003a1c:	000b883a 	mov	r5,zero
10003a20:	0023883a 	mov	r17,zero
10003a24:	003ed206 	br	10003570 <__alt_data_end+0xf8003570>
10003a28:	0101ffc4 	movi	r4,2047
10003a2c:	51003b26 	beq	r10,r4,10003b1c <__subdf3+0x7b8>
10003a30:	0085c83a 	sub	r2,zero,r2
10003a34:	29402034 	orhi	r5,r5,128
10003a38:	01000e04 	movi	r4,56
10003a3c:	20806216 	blt	r4,r2,10003bc8 <__subdf3+0x864>
10003a40:	010007c4 	movi	r4,31
10003a44:	20806b16 	blt	r4,r2,10003bf4 <__subdf3+0x890>
10003a48:	01000804 	movi	r4,32
10003a4c:	2089c83a 	sub	r4,r4,r2
10003a50:	2912983a 	sll	r9,r5,r4
10003a54:	888ed83a 	srl	r7,r17,r2
10003a58:	8908983a 	sll	r4,r17,r4
10003a5c:	2884d83a 	srl	r2,r5,r2
10003a60:	49e2b03a 	or	r17,r9,r7
10003a64:	2008c03a 	cmpne	r4,r4,zero
10003a68:	8922b03a 	or	r17,r17,r4
10003a6c:	89a3883a 	add	r17,r17,r6
10003a70:	10c5883a 	add	r2,r2,r3
10003a74:	898d803a 	cmpltu	r6,r17,r6
10003a78:	118b883a 	add	r5,r2,r6
10003a7c:	5021883a 	mov	r16,r10
10003a80:	003ed506 	br	100035d8 <__alt_data_end+0xf80035d8>
10003a84:	1984b03a 	or	r2,r3,r6
10003a88:	103e5926 	beq	r2,zero,100033f0 <__alt_data_end+0xf80033f0>
10003a8c:	8989c83a 	sub	r4,r17,r6
10003a90:	8911803a 	cmpltu	r8,r17,r4
10003a94:	28c5c83a 	sub	r2,r5,r3
10003a98:	1205c83a 	sub	r2,r2,r8
10003a9c:	1200202c 	andhi	r8,r2,128
10003aa0:	403ef926 	beq	r8,zero,10003688 <__alt_data_end+0xf8003688>
10003aa4:	3463c83a 	sub	r17,r6,r17
10003aa8:	194bc83a 	sub	r5,r3,r5
10003aac:	344d803a 	cmpltu	r6,r6,r17
10003ab0:	298bc83a 	sub	r5,r5,r6
10003ab4:	3825883a 	mov	r18,r7
10003ab8:	003e4d06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003abc:	1984b03a 	or	r2,r3,r6
10003ac0:	10002b26 	beq	r2,zero,10003b70 <__subdf3+0x80c>
10003ac4:	2808d0fa 	srli	r4,r5,3
10003ac8:	8822d0fa 	srli	r17,r17,3
10003acc:	280a977a 	slli	r5,r5,29
10003ad0:	2080022c 	andhi	r2,r4,8
10003ad4:	2c62b03a 	or	r17,r5,r17
10003ad8:	10000826 	beq	r2,zero,10003afc <__subdf3+0x798>
10003adc:	1810d0fa 	srli	r8,r3,3
10003ae0:	4080022c 	andhi	r2,r8,8
10003ae4:	1000051e 	bne	r2,zero,10003afc <__subdf3+0x798>
10003ae8:	300cd0fa 	srli	r6,r6,3
10003aec:	1804977a 	slli	r2,r3,29
10003af0:	4009883a 	mov	r4,r8
10003af4:	3825883a 	mov	r18,r7
10003af8:	11a2b03a 	or	r17,r2,r6
10003afc:	880ad77a 	srli	r5,r17,29
10003b00:	200890fa 	slli	r4,r4,3
10003b04:	882290fa 	slli	r17,r17,3
10003b08:	0401ffc4 	movi	r16,2047
10003b0c:	290ab03a 	or	r5,r5,r4
10003b10:	003e3706 	br	100033f0 <__alt_data_end+0xf80033f0>
10003b14:	0101ffc4 	movi	r4,2047
10003b18:	513fc71e 	bne	r10,r4,10003a38 <__alt_data_end+0xf8003a38>
10003b1c:	180b883a 	mov	r5,r3
10003b20:	3023883a 	mov	r17,r6
10003b24:	5021883a 	mov	r16,r10
10003b28:	003e3106 	br	100033f0 <__alt_data_end+0xf80033f0>
10003b2c:	10002d26 	beq	r2,zero,10003be4 <__subdf3+0x880>
10003b30:	1984b03a 	or	r2,r3,r6
10003b34:	10000e26 	beq	r2,zero,10003b70 <__subdf3+0x80c>
10003b38:	2808d0fa 	srli	r4,r5,3
10003b3c:	8822d0fa 	srli	r17,r17,3
10003b40:	280a977a 	slli	r5,r5,29
10003b44:	2080022c 	andhi	r2,r4,8
10003b48:	2c62b03a 	or	r17,r5,r17
10003b4c:	103feb26 	beq	r2,zero,10003afc <__alt_data_end+0xf8003afc>
10003b50:	180ed0fa 	srli	r7,r3,3
10003b54:	3880022c 	andhi	r2,r7,8
10003b58:	103fe81e 	bne	r2,zero,10003afc <__alt_data_end+0xf8003afc>
10003b5c:	300cd0fa 	srli	r6,r6,3
10003b60:	1804977a 	slli	r2,r3,29
10003b64:	3809883a 	mov	r4,r7
10003b68:	11a2b03a 	or	r17,r2,r6
10003b6c:	003fe306 	br	10003afc <__alt_data_end+0xf8003afc>
10003b70:	0401ffc4 	movi	r16,2047
10003b74:	003e1e06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003b78:	0005883a 	mov	r2,zero
10003b7c:	003f8306 	br	1000398c <__alt_data_end+0xf800398c>
10003b80:	113ff804 	addi	r4,r2,-32
10003b84:	02000804 	movi	r8,32
10003b88:	2908d83a 	srl	r4,r5,r4
10003b8c:	12002526 	beq	r2,r8,10003c24 <__subdf3+0x8c0>
10003b90:	02001004 	movi	r8,64
10003b94:	4085c83a 	sub	r2,r8,r2
10003b98:	288a983a 	sll	r5,r5,r2
10003b9c:	2c62b03a 	or	r17,r5,r17
10003ba0:	8822c03a 	cmpne	r17,r17,zero
10003ba4:	8922b03a 	or	r17,r17,r4
10003ba8:	0005883a 	mov	r2,zero
10003bac:	003f2406 	br	10003840 <__alt_data_end+0xf8003840>
10003bb0:	01402034 	movhi	r5,128
10003bb4:	0011883a 	mov	r8,zero
10003bb8:	297fffc4 	addi	r5,r5,-1
10003bbc:	047ffe04 	movi	r17,-8
10003bc0:	0401ffc4 	movi	r16,2047
10003bc4:	003e6a06 	br	10003570 <__alt_data_end+0xf8003570>
10003bc8:	2c62b03a 	or	r17,r5,r17
10003bcc:	8822c03a 	cmpne	r17,r17,zero
10003bd0:	0005883a 	mov	r2,zero
10003bd4:	003fa506 	br	10003a6c <__alt_data_end+0xf8003a6c>
10003bd8:	180b883a 	mov	r5,r3
10003bdc:	3023883a 	mov	r17,r6
10003be0:	003e0306 	br	100033f0 <__alt_data_end+0xf80033f0>
10003be4:	180b883a 	mov	r5,r3
10003be8:	3023883a 	mov	r17,r6
10003bec:	0401ffc4 	movi	r16,2047
10003bf0:	003dff06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003bf4:	113ff804 	addi	r4,r2,-32
10003bf8:	01c00804 	movi	r7,32
10003bfc:	2908d83a 	srl	r4,r5,r4
10003c00:	11c00a26 	beq	r2,r7,10003c2c <__subdf3+0x8c8>
10003c04:	01c01004 	movi	r7,64
10003c08:	3885c83a 	sub	r2,r7,r2
10003c0c:	288a983a 	sll	r5,r5,r2
10003c10:	2c62b03a 	or	r17,r5,r17
10003c14:	8822c03a 	cmpne	r17,r17,zero
10003c18:	8922b03a 	or	r17,r17,r4
10003c1c:	0005883a 	mov	r2,zero
10003c20:	003f9206 	br	10003a6c <__alt_data_end+0xf8003a6c>
10003c24:	000b883a 	mov	r5,zero
10003c28:	003fdc06 	br	10003b9c <__alt_data_end+0xf8003b9c>
10003c2c:	000b883a 	mov	r5,zero
10003c30:	003ff706 	br	10003c10 <__alt_data_end+0xf8003c10>

10003c34 <__fixdfsi>:
10003c34:	2806d53a 	srli	r3,r5,20
10003c38:	00800434 	movhi	r2,16
10003c3c:	10bfffc4 	addi	r2,r2,-1
10003c40:	18c1ffcc 	andi	r3,r3,2047
10003c44:	0180ff84 	movi	r6,1022
10003c48:	2884703a 	and	r2,r5,r2
10003c4c:	280ad7fa 	srli	r5,r5,31
10003c50:	30c0130e 	bge	r6,r3,10003ca0 <__fixdfsi+0x6c>
10003c54:	01810744 	movi	r6,1053
10003c58:	30c00d16 	blt	r6,r3,10003c90 <__fixdfsi+0x5c>
10003c5c:	01810cc4 	movi	r6,1075
10003c60:	30cdc83a 	sub	r6,r6,r3
10003c64:	01c007c4 	movi	r7,31
10003c68:	10800434 	orhi	r2,r2,16
10003c6c:	39800e0e 	bge	r7,r6,10003ca8 <__fixdfsi+0x74>
10003c70:	010104c4 	movi	r4,1043
10003c74:	20c7c83a 	sub	r3,r4,r3
10003c78:	10c6d83a 	srl	r3,r2,r3
10003c7c:	29403fcc 	andi	r5,r5,255
10003c80:	0145c83a 	sub	r2,zero,r5
10003c84:	1884f03a 	xor	r2,r3,r2
10003c88:	1145883a 	add	r2,r2,r5
10003c8c:	f800283a 	ret
10003c90:	00a00034 	movhi	r2,32768
10003c94:	10bfffc4 	addi	r2,r2,-1
10003c98:	2885883a 	add	r2,r5,r2
10003c9c:	f800283a 	ret
10003ca0:	0005883a 	mov	r2,zero
10003ca4:	f800283a 	ret
10003ca8:	18fefb44 	addi	r3,r3,-1043
10003cac:	2188d83a 	srl	r4,r4,r6
10003cb0:	10c6983a 	sll	r3,r2,r3
10003cb4:	20c6b03a 	or	r3,r4,r3
10003cb8:	003ff006 	br	10003c7c <__alt_data_end+0xf8003c7c>

10003cbc <__floatsidf>:
10003cbc:	defffd04 	addi	sp,sp,-12
10003cc0:	dc400115 	stw	r17,4(sp)
10003cc4:	dfc00215 	stw	ra,8(sp)
10003cc8:	dc000015 	stw	r16,0(sp)
10003ccc:	2023883a 	mov	r17,r4
10003cd0:	20001426 	beq	r4,zero,10003d24 <__floatsidf+0x68>
10003cd4:	2020d7fa 	srli	r16,r4,31
10003cd8:	80000126 	beq	r16,zero,10003ce0 <__floatsidf+0x24>
10003cdc:	0123c83a 	sub	r17,zero,r4
10003ce0:	8809883a 	mov	r4,r17
10003ce4:	0003d8c0 	call	10003d8c <__clzsi2>
10003ce8:	01410784 	movi	r5,1054
10003cec:	00c00284 	movi	r3,10
10003cf0:	288bc83a 	sub	r5,r5,r2
10003cf4:	18801c16 	blt	r3,r2,10003d68 <__floatsidf+0xac>
10003cf8:	00c002c4 	movi	r3,11
10003cfc:	1887c83a 	sub	r3,r3,r2
10003d00:	88c8d83a 	srl	r4,r17,r3
10003d04:	00c00434 	movhi	r3,16
10003d08:	18ffffc4 	addi	r3,r3,-1
10003d0c:	10800544 	addi	r2,r2,21
10003d10:	20c8703a 	and	r4,r4,r3
10003d14:	8884983a 	sll	r2,r17,r2
10003d18:	28c1ffcc 	andi	r3,r5,2047
10003d1c:	800d883a 	mov	r6,r16
10003d20:	00000406 	br	10003d34 <__floatsidf+0x78>
10003d24:	000d883a 	mov	r6,zero
10003d28:	0007883a 	mov	r3,zero
10003d2c:	0009883a 	mov	r4,zero
10003d30:	0005883a 	mov	r2,zero
10003d34:	180a953a 	slli	r5,r3,20
10003d38:	31803fcc 	andi	r6,r6,255
10003d3c:	00c00434 	movhi	r3,16
10003d40:	300c97fa 	slli	r6,r6,31
10003d44:	18ffffc4 	addi	r3,r3,-1
10003d48:	20c6703a 	and	r3,r4,r3
10003d4c:	1946b03a 	or	r3,r3,r5
10003d50:	1986b03a 	or	r3,r3,r6
10003d54:	dfc00217 	ldw	ra,8(sp)
10003d58:	dc400117 	ldw	r17,4(sp)
10003d5c:	dc000017 	ldw	r16,0(sp)
10003d60:	dec00304 	addi	sp,sp,12
10003d64:	f800283a 	ret
10003d68:	10fffd44 	addi	r3,r2,-11
10003d6c:	88c8983a 	sll	r4,r17,r3
10003d70:	00800434 	movhi	r2,16
10003d74:	10bfffc4 	addi	r2,r2,-1
10003d78:	2088703a 	and	r4,r4,r2
10003d7c:	28c1ffcc 	andi	r3,r5,2047
10003d80:	800d883a 	mov	r6,r16
10003d84:	0005883a 	mov	r2,zero
10003d88:	003fea06 	br	10003d34 <__alt_data_end+0xf8003d34>

10003d8c <__clzsi2>:
10003d8c:	00bfffd4 	movui	r2,65535
10003d90:	11000b36 	bltu	r2,r4,10003dc0 <__clzsi2+0x34>
10003d94:	00803fc4 	movi	r2,255
10003d98:	1100122e 	bgeu	r2,r4,10003de4 <__clzsi2+0x58>
10003d9c:	00c00204 	movi	r3,8
10003da0:	01400604 	movi	r5,24
10003da4:	20c8d83a 	srl	r4,r4,r3
10003da8:	00840034 	movhi	r2,4096
10003dac:	10987704 	addi	r2,r2,25052
10003db0:	1109883a 	add	r4,r2,r4
10003db4:	20800003 	ldbu	r2,0(r4)
10003db8:	2885c83a 	sub	r2,r5,r2
10003dbc:	f800283a 	ret
10003dc0:	00804034 	movhi	r2,256
10003dc4:	10bfffc4 	addi	r2,r2,-1
10003dc8:	11000336 	bltu	r2,r4,10003dd8 <__clzsi2+0x4c>
10003dcc:	00c00404 	movi	r3,16
10003dd0:	180b883a 	mov	r5,r3
10003dd4:	003ff306 	br	10003da4 <__alt_data_end+0xf8003da4>
10003dd8:	00c00604 	movi	r3,24
10003ddc:	01400204 	movi	r5,8
10003de0:	003ff006 	br	10003da4 <__alt_data_end+0xf8003da4>
10003de4:	0007883a 	mov	r3,zero
10003de8:	01400804 	movi	r5,32
10003dec:	003fed06 	br	10003da4 <__alt_data_end+0xf8003da4>

10003df0 <srand>:
10003df0:	00840034 	movhi	r2,4096
10003df4:	109e5104 	addi	r2,r2,31044
10003df8:	10800017 	ldw	r2,0(r2)
10003dfc:	11002915 	stw	r4,164(r2)
10003e00:	10002a15 	stw	zero,168(r2)
10003e04:	f800283a 	ret

10003e08 <rand>:
10003e08:	00840034 	movhi	r2,4096
10003e0c:	defffe04 	addi	sp,sp,-8
10003e10:	109e5104 	addi	r2,r2,31044
10003e14:	dc000015 	stw	r16,0(sp)
10003e18:	14000017 	ldw	r16,0(r2)
10003e1c:	dfc00115 	stw	ra,4(sp)
10003e20:	01932574 	movhi	r6,19605
10003e24:	81002917 	ldw	r4,164(r16)
10003e28:	81402a17 	ldw	r5,168(r16)
10003e2c:	01d614b4 	movhi	r7,22610
10003e30:	319fcb44 	addi	r6,r6,32557
10003e34:	39fd0b44 	addi	r7,r7,-3027
10003e38:	0003e6c0 	call	10003e6c <__muldi3>
10003e3c:	11000044 	addi	r4,r2,1
10003e40:	2085803a 	cmpltu	r2,r4,r2
10003e44:	10c7883a 	add	r3,r2,r3
10003e48:	00a00034 	movhi	r2,32768
10003e4c:	10bfffc4 	addi	r2,r2,-1
10003e50:	1884703a 	and	r2,r3,r2
10003e54:	81002915 	stw	r4,164(r16)
10003e58:	80c02a15 	stw	r3,168(r16)
10003e5c:	dfc00117 	ldw	ra,4(sp)
10003e60:	dc000017 	ldw	r16,0(sp)
10003e64:	dec00204 	addi	sp,sp,8
10003e68:	f800283a 	ret

10003e6c <__muldi3>:
10003e6c:	defff604 	addi	sp,sp,-40
10003e70:	dd800615 	stw	r22,24(sp)
10003e74:	dd400515 	stw	r21,20(sp)
10003e78:	25bfffcc 	andi	r22,r4,65535
10003e7c:	357fffcc 	andi	r21,r6,65535
10003e80:	dc400115 	stw	r17,4(sp)
10003e84:	2022d43a 	srli	r17,r4,16
10003e88:	dcc00315 	stw	r19,12(sp)
10003e8c:	dc800215 	stw	r18,8(sp)
10003e90:	2027883a 	mov	r19,r4
10003e94:	2825883a 	mov	r18,r5
10003e98:	a809883a 	mov	r4,r21
10003e9c:	b00b883a 	mov	r5,r22
10003ea0:	dfc00915 	stw	ra,36(sp)
10003ea4:	df000815 	stw	fp,32(sp)
10003ea8:	ddc00715 	stw	r23,28(sp)
10003eac:	3839883a 	mov	fp,r7
10003eb0:	302ed43a 	srli	r23,r6,16
10003eb4:	dd000415 	stw	r20,16(sp)
10003eb8:	dc000015 	stw	r16,0(sp)
10003ebc:	3029883a 	mov	r20,r6
10003ec0:	0002aa00 	call	10002aa0 <__mulsi3>
10003ec4:	a809883a 	mov	r4,r21
10003ec8:	880b883a 	mov	r5,r17
10003ecc:	1021883a 	mov	r16,r2
10003ed0:	0002aa00 	call	10002aa0 <__mulsi3>
10003ed4:	880b883a 	mov	r5,r17
10003ed8:	b809883a 	mov	r4,r23
10003edc:	102b883a 	mov	r21,r2
10003ee0:	0002aa00 	call	10002aa0 <__mulsi3>
10003ee4:	b809883a 	mov	r4,r23
10003ee8:	b00b883a 	mov	r5,r22
10003eec:	1023883a 	mov	r17,r2
10003ef0:	0002aa00 	call	10002aa0 <__mulsi3>
10003ef4:	8012d43a 	srli	r9,r16,16
10003ef8:	a885883a 	add	r2,r21,r2
10003efc:	1251883a 	add	r8,r2,r9
10003f00:	4540022e 	bgeu	r8,r21,10003f0c <__muldi3+0xa0>
10003f04:	00800074 	movhi	r2,1
10003f08:	88a3883a 	add	r17,r17,r2
10003f0c:	4006d43a 	srli	r3,r8,16
10003f10:	4010943a 	slli	r8,r8,16
10003f14:	9809883a 	mov	r4,r19
10003f18:	e00b883a 	mov	r5,fp
10003f1c:	843fffcc 	andi	r16,r16,65535
10003f20:	88e3883a 	add	r17,r17,r3
10003f24:	4421883a 	add	r16,r8,r16
10003f28:	0002aa00 	call	10002aa0 <__mulsi3>
10003f2c:	a009883a 	mov	r4,r20
10003f30:	900b883a 	mov	r5,r18
10003f34:	1027883a 	mov	r19,r2
10003f38:	0002aa00 	call	10002aa0 <__mulsi3>
10003f3c:	9885883a 	add	r2,r19,r2
10003f40:	1447883a 	add	r3,r2,r17
10003f44:	8005883a 	mov	r2,r16
10003f48:	dfc00917 	ldw	ra,36(sp)
10003f4c:	df000817 	ldw	fp,32(sp)
10003f50:	ddc00717 	ldw	r23,28(sp)
10003f54:	dd800617 	ldw	r22,24(sp)
10003f58:	dd400517 	ldw	r21,20(sp)
10003f5c:	dd000417 	ldw	r20,16(sp)
10003f60:	dcc00317 	ldw	r19,12(sp)
10003f64:	dc800217 	ldw	r18,8(sp)
10003f68:	dc400117 	ldw	r17,4(sp)
10003f6c:	dc000017 	ldw	r16,0(sp)
10003f70:	dec00a04 	addi	sp,sp,40
10003f74:	f800283a 	ret

10003f78 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10003f78:	defffc04 	addi	sp,sp,-16
10003f7c:	df000315 	stw	fp,12(sp)
10003f80:	df000304 	addi	fp,sp,12
10003f84:	e13ffd15 	stw	r4,-12(fp)
10003f88:	e17ffe15 	stw	r5,-8(fp)
10003f8c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10003f90:	e0fffe17 	ldw	r3,-8(fp)
10003f94:	e0bffd17 	ldw	r2,-12(fp)
10003f98:	18800c26 	beq	r3,r2,10003fcc <alt_load_section+0x54>
  {
    while( to != end )
10003f9c:	00000806 	br	10003fc0 <alt_load_section+0x48>
    {
      *to++ = *from++;
10003fa0:	e0bffe17 	ldw	r2,-8(fp)
10003fa4:	10c00104 	addi	r3,r2,4
10003fa8:	e0fffe15 	stw	r3,-8(fp)
10003fac:	e0fffd17 	ldw	r3,-12(fp)
10003fb0:	19000104 	addi	r4,r3,4
10003fb4:	e13ffd15 	stw	r4,-12(fp)
10003fb8:	18c00017 	ldw	r3,0(r3)
10003fbc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003fc0:	e0fffe17 	ldw	r3,-8(fp)
10003fc4:	e0bfff17 	ldw	r2,-4(fp)
10003fc8:	18bff51e 	bne	r3,r2,10003fa0 <__alt_data_end+0xf8003fa0>
    {
      *to++ = *from++;
    }
  }
}
10003fcc:	e037883a 	mov	sp,fp
10003fd0:	df000017 	ldw	fp,0(sp)
10003fd4:	dec00104 	addi	sp,sp,4
10003fd8:	f800283a 	ret

10003fdc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003fdc:	defffe04 	addi	sp,sp,-8
10003fe0:	dfc00115 	stw	ra,4(sp)
10003fe4:	df000015 	stw	fp,0(sp)
10003fe8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003fec:	01040034 	movhi	r4,4096
10003ff0:	211e5b04 	addi	r4,r4,31084
10003ff4:	01440034 	movhi	r5,4096
10003ff8:	2958c504 	addi	r5,r5,25364
10003ffc:	01840034 	movhi	r6,4096
10004000:	319e5b04 	addi	r6,r6,31084
10004004:	0003f780 	call	10003f78 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10004008:	01040034 	movhi	r4,4096
1000400c:	21000804 	addi	r4,r4,32
10004010:	01440034 	movhi	r5,4096
10004014:	29400804 	addi	r5,r5,32
10004018:	01840034 	movhi	r6,4096
1000401c:	31808b04 	addi	r6,r6,556
10004020:	0003f780 	call	10003f78 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10004024:	01040034 	movhi	r4,4096
10004028:	21187704 	addi	r4,r4,25052
1000402c:	01440034 	movhi	r5,4096
10004030:	29587704 	addi	r5,r5,25052
10004034:	01840034 	movhi	r6,4096
10004038:	3198c504 	addi	r6,r6,25364
1000403c:	0003f780 	call	10003f78 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10004040:	0004e3c0 	call	10004e3c <alt_dcache_flush_all>
  alt_icache_flush_all();
10004044:	00050300 	call	10005030 <alt_icache_flush_all>
}
10004048:	e037883a 	mov	sp,fp
1000404c:	dfc00117 	ldw	ra,4(sp)
10004050:	df000017 	ldw	fp,0(sp)
10004054:	dec00204 	addi	sp,sp,8
10004058:	f800283a 	ret

1000405c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000405c:	defffd04 	addi	sp,sp,-12
10004060:	dfc00215 	stw	ra,8(sp)
10004064:	df000115 	stw	fp,4(sp)
10004068:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000406c:	0009883a 	mov	r4,zero
10004070:	000410c0 	call	1000410c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10004074:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10004078:	00041400 	call	10004140 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000407c:	01040034 	movhi	r4,4096
10004080:	2118b804 	addi	r4,r4,25312
10004084:	01440034 	movhi	r5,4096
10004088:	2958b804 	addi	r5,r5,25312
1000408c:	01840034 	movhi	r6,4096
10004090:	3198b804 	addi	r6,r6,25312
10004094:	00053fc0 	call	100053fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10004098:	0004f780 	call	10004f78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000409c:	01040034 	movhi	r4,4096
100040a0:	2113f504 	addi	r4,r4,20436
100040a4:	0005c680 	call	10005c68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100040a8:	d125b317 	ldw	r4,-26932(gp)
100040ac:	d0e5b417 	ldw	r3,-26928(gp)
100040b0:	d0a5b517 	ldw	r2,-26924(gp)
100040b4:	180b883a 	mov	r5,r3
100040b8:	100d883a 	mov	r6,r2
100040bc:	00002680 	call	10000268 <main>
100040c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100040c4:	01000044 	movi	r4,1
100040c8:	0004d640 	call	10004d64 <close>
  exit (result);
100040cc:	e13fff17 	ldw	r4,-4(fp)
100040d0:	0005c7c0 	call	10005c7c <exit>

100040d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100040d4:	defffd04 	addi	sp,sp,-12
100040d8:	dfc00215 	stw	ra,8(sp)
100040dc:	df000115 	stw	fp,4(sp)
100040e0:	df000104 	addi	fp,sp,4
100040e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100040e8:	e13fff17 	ldw	r4,-4(fp)
100040ec:	01440034 	movhi	r5,4096
100040f0:	295e5404 	addi	r5,r5,31056
100040f4:	0004ed40 	call	10004ed4 <alt_dev_llist_insert>
}
100040f8:	e037883a 	mov	sp,fp
100040fc:	dfc00117 	ldw	ra,4(sp)
10004100:	df000017 	ldw	fp,0(sp)
10004104:	dec00204 	addi	sp,sp,8
10004108:	f800283a 	ret

1000410c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000410c:	defffd04 	addi	sp,sp,-12
10004110:	dfc00215 	stw	ra,8(sp)
10004114:	df000115 	stw	fp,4(sp)
10004118:	df000104 	addi	fp,sp,4
1000411c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10004120:	00059340 	call	10005934 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10004124:	00800044 	movi	r2,1
10004128:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000412c:	e037883a 	mov	sp,fp
10004130:	dfc00117 	ldw	ra,4(sp)
10004134:	df000017 	ldw	fp,0(sp)
10004138:	dec00204 	addi	sp,sp,8
1000413c:	f800283a 	ret

10004140 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10004140:	defffe04 	addi	sp,sp,-8
10004144:	dfc00115 	stw	ra,4(sp)
10004148:	df000015 	stw	fp,0(sp)
1000414c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10004150:	01040034 	movhi	r4,4096
10004154:	2119d804 	addi	r4,r4,26464
10004158:	000b883a 	mov	r5,zero
1000415c:	01800144 	movi	r6,5
10004160:	00042ec0 	call	100042ec <altera_avalon_jtag_uart_init>
10004164:	01040034 	movhi	r4,4096
10004168:	2119ce04 	addi	r4,r4,26424
1000416c:	00040d40 	call	100040d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10004170:	0001883a 	nop
}
10004174:	e037883a 	mov	sp,fp
10004178:	dfc00117 	ldw	ra,4(sp)
1000417c:	df000017 	ldw	fp,0(sp)
10004180:	dec00204 	addi	sp,sp,8
10004184:	f800283a 	ret

10004188 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10004188:	defffa04 	addi	sp,sp,-24
1000418c:	dfc00515 	stw	ra,20(sp)
10004190:	df000415 	stw	fp,16(sp)
10004194:	df000404 	addi	fp,sp,16
10004198:	e13ffd15 	stw	r4,-12(fp)
1000419c:	e17ffe15 	stw	r5,-8(fp)
100041a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100041a4:	e0bffd17 	ldw	r2,-12(fp)
100041a8:	10800017 	ldw	r2,0(r2)
100041ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100041b0:	e0bffc17 	ldw	r2,-16(fp)
100041b4:	10c00a04 	addi	r3,r2,40
100041b8:	e0bffd17 	ldw	r2,-12(fp)
100041bc:	10800217 	ldw	r2,8(r2)
100041c0:	1809883a 	mov	r4,r3
100041c4:	e17ffe17 	ldw	r5,-8(fp)
100041c8:	e1bfff17 	ldw	r6,-4(fp)
100041cc:	100f883a 	mov	r7,r2
100041d0:	00047b00 	call	100047b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100041d4:	e037883a 	mov	sp,fp
100041d8:	dfc00117 	ldw	ra,4(sp)
100041dc:	df000017 	ldw	fp,0(sp)
100041e0:	dec00204 	addi	sp,sp,8
100041e4:	f800283a 	ret

100041e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100041e8:	defffa04 	addi	sp,sp,-24
100041ec:	dfc00515 	stw	ra,20(sp)
100041f0:	df000415 	stw	fp,16(sp)
100041f4:	df000404 	addi	fp,sp,16
100041f8:	e13ffd15 	stw	r4,-12(fp)
100041fc:	e17ffe15 	stw	r5,-8(fp)
10004200:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10004204:	e0bffd17 	ldw	r2,-12(fp)
10004208:	10800017 	ldw	r2,0(r2)
1000420c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10004210:	e0bffc17 	ldw	r2,-16(fp)
10004214:	10c00a04 	addi	r3,r2,40
10004218:	e0bffd17 	ldw	r2,-12(fp)
1000421c:	10800217 	ldw	r2,8(r2)
10004220:	1809883a 	mov	r4,r3
10004224:	e17ffe17 	ldw	r5,-8(fp)
10004228:	e1bfff17 	ldw	r6,-4(fp)
1000422c:	100f883a 	mov	r7,r2
10004230:	00049bc0 	call	100049bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10004234:	e037883a 	mov	sp,fp
10004238:	dfc00117 	ldw	ra,4(sp)
1000423c:	df000017 	ldw	fp,0(sp)
10004240:	dec00204 	addi	sp,sp,8
10004244:	f800283a 	ret

10004248 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10004248:	defffc04 	addi	sp,sp,-16
1000424c:	dfc00315 	stw	ra,12(sp)
10004250:	df000215 	stw	fp,8(sp)
10004254:	df000204 	addi	fp,sp,8
10004258:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000425c:	e0bfff17 	ldw	r2,-4(fp)
10004260:	10800017 	ldw	r2,0(r2)
10004264:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10004268:	e0bffe17 	ldw	r2,-8(fp)
1000426c:	10c00a04 	addi	r3,r2,40
10004270:	e0bfff17 	ldw	r2,-4(fp)
10004274:	10800217 	ldw	r2,8(r2)
10004278:	1809883a 	mov	r4,r3
1000427c:	100b883a 	mov	r5,r2
10004280:	000465c0 	call	1000465c <altera_avalon_jtag_uart_close>
}
10004284:	e037883a 	mov	sp,fp
10004288:	dfc00117 	ldw	ra,4(sp)
1000428c:	df000017 	ldw	fp,0(sp)
10004290:	dec00204 	addi	sp,sp,8
10004294:	f800283a 	ret

10004298 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10004298:	defffa04 	addi	sp,sp,-24
1000429c:	dfc00515 	stw	ra,20(sp)
100042a0:	df000415 	stw	fp,16(sp)
100042a4:	df000404 	addi	fp,sp,16
100042a8:	e13ffd15 	stw	r4,-12(fp)
100042ac:	e17ffe15 	stw	r5,-8(fp)
100042b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100042b4:	e0bffd17 	ldw	r2,-12(fp)
100042b8:	10800017 	ldw	r2,0(r2)
100042bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100042c0:	e0bffc17 	ldw	r2,-16(fp)
100042c4:	10800a04 	addi	r2,r2,40
100042c8:	1009883a 	mov	r4,r2
100042cc:	e17ffe17 	ldw	r5,-8(fp)
100042d0:	e1bfff17 	ldw	r6,-4(fp)
100042d4:	00046c40 	call	100046c4 <altera_avalon_jtag_uart_ioctl>
}
100042d8:	e037883a 	mov	sp,fp
100042dc:	dfc00117 	ldw	ra,4(sp)
100042e0:	df000017 	ldw	fp,0(sp)
100042e4:	dec00204 	addi	sp,sp,8
100042e8:	f800283a 	ret

100042ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100042ec:	defffa04 	addi	sp,sp,-24
100042f0:	dfc00515 	stw	ra,20(sp)
100042f4:	df000415 	stw	fp,16(sp)
100042f8:	df000404 	addi	fp,sp,16
100042fc:	e13ffd15 	stw	r4,-12(fp)
10004300:	e17ffe15 	stw	r5,-8(fp)
10004304:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004308:	e0bffd17 	ldw	r2,-12(fp)
1000430c:	00c00044 	movi	r3,1
10004310:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10004314:	e0bffd17 	ldw	r2,-12(fp)
10004318:	10800017 	ldw	r2,0(r2)
1000431c:	10800104 	addi	r2,r2,4
10004320:	1007883a 	mov	r3,r2
10004324:	e0bffd17 	ldw	r2,-12(fp)
10004328:	10800817 	ldw	r2,32(r2)
1000432c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10004330:	e0fffe17 	ldw	r3,-8(fp)
10004334:	e0bfff17 	ldw	r2,-4(fp)
10004338:	d8000015 	stw	zero,0(sp)
1000433c:	1809883a 	mov	r4,r3
10004340:	100b883a 	mov	r5,r2
10004344:	01840034 	movhi	r6,4096
10004348:	3190ec04 	addi	r6,r6,17328
1000434c:	e1fffd17 	ldw	r7,-12(fp)
10004350:	000504c0 	call	1000504c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10004354:	e0bffd17 	ldw	r2,-12(fp)
10004358:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000435c:	e0bffd17 	ldw	r2,-12(fp)
10004360:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10004364:	00840074 	movhi	r2,4097
10004368:	10a40704 	addi	r2,r2,-28644
1000436c:	10800017 	ldw	r2,0(r2)
10004370:	1809883a 	mov	r4,r3
10004374:	100b883a 	mov	r5,r2
10004378:	01840034 	movhi	r6,4096
1000437c:	31916d04 	addi	r6,r6,17844
10004380:	e1fffd17 	ldw	r7,-12(fp)
10004384:	0004bd40 	call	10004bd4 <alt_alarm_start>
10004388:	1000040e 	bge	r2,zero,1000439c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000438c:	e0fffd17 	ldw	r3,-12(fp)
10004390:	00a00034 	movhi	r2,32768
10004394:	10bfffc4 	addi	r2,r2,-1
10004398:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000439c:	e037883a 	mov	sp,fp
100043a0:	dfc00117 	ldw	ra,4(sp)
100043a4:	df000017 	ldw	fp,0(sp)
100043a8:	dec00204 	addi	sp,sp,8
100043ac:	f800283a 	ret

100043b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100043b0:	defff804 	addi	sp,sp,-32
100043b4:	df000715 	stw	fp,28(sp)
100043b8:	df000704 	addi	fp,sp,28
100043bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100043c0:	e0bfff17 	ldw	r2,-4(fp)
100043c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100043c8:	e0bffb17 	ldw	r2,-20(fp)
100043cc:	10800017 	ldw	r2,0(r2)
100043d0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100043d4:	e0bffc17 	ldw	r2,-16(fp)
100043d8:	10800104 	addi	r2,r2,4
100043dc:	10800037 	ldwio	r2,0(r2)
100043e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100043e4:	e0bffd17 	ldw	r2,-12(fp)
100043e8:	1080c00c 	andi	r2,r2,768
100043ec:	1000011e 	bne	r2,zero,100043f4 <altera_avalon_jtag_uart_irq+0x44>
      break;
100043f0:	00006c06 	br	100045a4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100043f4:	e0bffd17 	ldw	r2,-12(fp)
100043f8:	1080400c 	andi	r2,r2,256
100043fc:	10003426 	beq	r2,zero,100044d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10004400:	00800074 	movhi	r2,1
10004404:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004408:	e0bffb17 	ldw	r2,-20(fp)
1000440c:	10800a17 	ldw	r2,40(r2)
10004410:	10800044 	addi	r2,r2,1
10004414:	1081ffcc 	andi	r2,r2,2047
10004418:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000441c:	e0bffb17 	ldw	r2,-20(fp)
10004420:	10c00b17 	ldw	r3,44(r2)
10004424:	e0bffe17 	ldw	r2,-8(fp)
10004428:	1880011e 	bne	r3,r2,10004430 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000442c:	00001606 	br	10004488 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10004430:	e0bffc17 	ldw	r2,-16(fp)
10004434:	10800037 	ldwio	r2,0(r2)
10004438:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000443c:	e0bff917 	ldw	r2,-28(fp)
10004440:	10a0000c 	andi	r2,r2,32768
10004444:	1000011e 	bne	r2,zero,1000444c <altera_avalon_jtag_uart_irq+0x9c>
          break;
10004448:	00000f06 	br	10004488 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000444c:	e0bffb17 	ldw	r2,-20(fp)
10004450:	10800a17 	ldw	r2,40(r2)
10004454:	e0fff917 	ldw	r3,-28(fp)
10004458:	1809883a 	mov	r4,r3
1000445c:	e0fffb17 	ldw	r3,-20(fp)
10004460:	1885883a 	add	r2,r3,r2
10004464:	10800e04 	addi	r2,r2,56
10004468:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000446c:	e0bffb17 	ldw	r2,-20(fp)
10004470:	10800a17 	ldw	r2,40(r2)
10004474:	10800044 	addi	r2,r2,1
10004478:	10c1ffcc 	andi	r3,r2,2047
1000447c:	e0bffb17 	ldw	r2,-20(fp)
10004480:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10004484:	003fe006 	br	10004408 <__alt_data_end+0xf8004408>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10004488:	e0bff917 	ldw	r2,-28(fp)
1000448c:	10bfffec 	andhi	r2,r2,65535
10004490:	10000f26 	beq	r2,zero,100044d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004494:	e0bffb17 	ldw	r2,-20(fp)
10004498:	10c00817 	ldw	r3,32(r2)
1000449c:	00bfff84 	movi	r2,-2
100044a0:	1886703a 	and	r3,r3,r2
100044a4:	e0bffb17 	ldw	r2,-20(fp)
100044a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100044ac:	e0bffc17 	ldw	r2,-16(fp)
100044b0:	10800104 	addi	r2,r2,4
100044b4:	1007883a 	mov	r3,r2
100044b8:	e0bffb17 	ldw	r2,-20(fp)
100044bc:	10800817 	ldw	r2,32(r2)
100044c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100044c4:	e0bffc17 	ldw	r2,-16(fp)
100044c8:	10800104 	addi	r2,r2,4
100044cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100044d0:	e0bffd17 	ldw	r2,-12(fp)
100044d4:	1080800c 	andi	r2,r2,512
100044d8:	10003126 	beq	r2,zero,100045a0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100044dc:	e0bffd17 	ldw	r2,-12(fp)
100044e0:	1004d43a 	srli	r2,r2,16
100044e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100044e8:	00001406 	br	1000453c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100044ec:	e0bffc17 	ldw	r2,-16(fp)
100044f0:	e0fffb17 	ldw	r3,-20(fp)
100044f4:	18c00d17 	ldw	r3,52(r3)
100044f8:	e13ffb17 	ldw	r4,-20(fp)
100044fc:	20c7883a 	add	r3,r4,r3
10004500:	18c20e04 	addi	r3,r3,2104
10004504:	18c00003 	ldbu	r3,0(r3)
10004508:	18c03fcc 	andi	r3,r3,255
1000450c:	18c0201c 	xori	r3,r3,128
10004510:	18ffe004 	addi	r3,r3,-128
10004514:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004518:	e0bffb17 	ldw	r2,-20(fp)
1000451c:	10800d17 	ldw	r2,52(r2)
10004520:	10800044 	addi	r2,r2,1
10004524:	10c1ffcc 	andi	r3,r2,2047
10004528:	e0bffb17 	ldw	r2,-20(fp)
1000452c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10004530:	e0bffa17 	ldw	r2,-24(fp)
10004534:	10bfffc4 	addi	r2,r2,-1
10004538:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000453c:	e0bffa17 	ldw	r2,-24(fp)
10004540:	10000526 	beq	r2,zero,10004558 <altera_avalon_jtag_uart_irq+0x1a8>
10004544:	e0bffb17 	ldw	r2,-20(fp)
10004548:	10c00d17 	ldw	r3,52(r2)
1000454c:	e0bffb17 	ldw	r2,-20(fp)
10004550:	10800c17 	ldw	r2,48(r2)
10004554:	18bfe51e 	bne	r3,r2,100044ec <__alt_data_end+0xf80044ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10004558:	e0bffa17 	ldw	r2,-24(fp)
1000455c:	10001026 	beq	r2,zero,100045a0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004560:	e0bffb17 	ldw	r2,-20(fp)
10004564:	10c00817 	ldw	r3,32(r2)
10004568:	00bfff44 	movi	r2,-3
1000456c:	1886703a 	and	r3,r3,r2
10004570:	e0bffb17 	ldw	r2,-20(fp)
10004574:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004578:	e0bffb17 	ldw	r2,-20(fp)
1000457c:	10800017 	ldw	r2,0(r2)
10004580:	10800104 	addi	r2,r2,4
10004584:	1007883a 	mov	r3,r2
10004588:	e0bffb17 	ldw	r2,-20(fp)
1000458c:	10800817 	ldw	r2,32(r2)
10004590:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10004594:	e0bffc17 	ldw	r2,-16(fp)
10004598:	10800104 	addi	r2,r2,4
1000459c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100045a0:	003f8c06 	br	100043d4 <__alt_data_end+0xf80043d4>
}
100045a4:	e037883a 	mov	sp,fp
100045a8:	df000017 	ldw	fp,0(sp)
100045ac:	dec00104 	addi	sp,sp,4
100045b0:	f800283a 	ret

100045b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100045b4:	defff804 	addi	sp,sp,-32
100045b8:	df000715 	stw	fp,28(sp)
100045bc:	df000704 	addi	fp,sp,28
100045c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100045c4:	e0bffb17 	ldw	r2,-20(fp)
100045c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100045cc:	e0bff917 	ldw	r2,-28(fp)
100045d0:	10800017 	ldw	r2,0(r2)
100045d4:	10800104 	addi	r2,r2,4
100045d8:	10800037 	ldwio	r2,0(r2)
100045dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100045e0:	e0bffa17 	ldw	r2,-24(fp)
100045e4:	1081000c 	andi	r2,r2,1024
100045e8:	10000b26 	beq	r2,zero,10004618 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100045ec:	e0bff917 	ldw	r2,-28(fp)
100045f0:	10800017 	ldw	r2,0(r2)
100045f4:	10800104 	addi	r2,r2,4
100045f8:	1007883a 	mov	r3,r2
100045fc:	e0bff917 	ldw	r2,-28(fp)
10004600:	10800817 	ldw	r2,32(r2)
10004604:	10810014 	ori	r2,r2,1024
10004608:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000460c:	e0bff917 	ldw	r2,-28(fp)
10004610:	10000915 	stw	zero,36(r2)
10004614:	00000a06 	br	10004640 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10004618:	e0bff917 	ldw	r2,-28(fp)
1000461c:	10c00917 	ldw	r3,36(r2)
10004620:	00a00034 	movhi	r2,32768
10004624:	10bfff04 	addi	r2,r2,-4
10004628:	10c00536 	bltu	r2,r3,10004640 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000462c:	e0bff917 	ldw	r2,-28(fp)
10004630:	10800917 	ldw	r2,36(r2)
10004634:	10c00044 	addi	r3,r2,1
10004638:	e0bff917 	ldw	r2,-28(fp)
1000463c:	10c00915 	stw	r3,36(r2)
10004640:	00840074 	movhi	r2,4097
10004644:	10a40704 	addi	r2,r2,-28644
10004648:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000464c:	e037883a 	mov	sp,fp
10004650:	df000017 	ldw	fp,0(sp)
10004654:	dec00104 	addi	sp,sp,4
10004658:	f800283a 	ret

1000465c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000465c:	defffd04 	addi	sp,sp,-12
10004660:	df000215 	stw	fp,8(sp)
10004664:	df000204 	addi	fp,sp,8
10004668:	e13ffe15 	stw	r4,-8(fp)
1000466c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10004670:	00000506 	br	10004688 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10004674:	e0bfff17 	ldw	r2,-4(fp)
10004678:	1090000c 	andi	r2,r2,16384
1000467c:	10000226 	beq	r2,zero,10004688 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10004680:	00bffd44 	movi	r2,-11
10004684:	00000b06 	br	100046b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10004688:	e0bffe17 	ldw	r2,-8(fp)
1000468c:	10c00d17 	ldw	r3,52(r2)
10004690:	e0bffe17 	ldw	r2,-8(fp)
10004694:	10800c17 	ldw	r2,48(r2)
10004698:	18800526 	beq	r3,r2,100046b0 <altera_avalon_jtag_uart_close+0x54>
1000469c:	e0bffe17 	ldw	r2,-8(fp)
100046a0:	10c00917 	ldw	r3,36(r2)
100046a4:	e0bffe17 	ldw	r2,-8(fp)
100046a8:	10800117 	ldw	r2,4(r2)
100046ac:	18bff136 	bltu	r3,r2,10004674 <__alt_data_end+0xf8004674>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100046b0:	0005883a 	mov	r2,zero
}
100046b4:	e037883a 	mov	sp,fp
100046b8:	df000017 	ldw	fp,0(sp)
100046bc:	dec00104 	addi	sp,sp,4
100046c0:	f800283a 	ret

100046c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100046c4:	defffa04 	addi	sp,sp,-24
100046c8:	df000515 	stw	fp,20(sp)
100046cc:	df000504 	addi	fp,sp,20
100046d0:	e13ffd15 	stw	r4,-12(fp)
100046d4:	e17ffe15 	stw	r5,-8(fp)
100046d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100046dc:	00bff9c4 	movi	r2,-25
100046e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100046e4:	e0bffe17 	ldw	r2,-8(fp)
100046e8:	10da8060 	cmpeqi	r3,r2,27137
100046ec:	1800031e 	bne	r3,zero,100046fc <altera_avalon_jtag_uart_ioctl+0x38>
100046f0:	109a80a0 	cmpeqi	r2,r2,27138
100046f4:	1000191e 	bne	r2,zero,1000475c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100046f8:	00002806 	br	1000479c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100046fc:	e0bffd17 	ldw	r2,-12(fp)
10004700:	10c00117 	ldw	r3,4(r2)
10004704:	00a00034 	movhi	r2,32768
10004708:	10bfffc4 	addi	r2,r2,-1
1000470c:	18801226 	beq	r3,r2,10004758 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10004710:	e0bfff17 	ldw	r2,-4(fp)
10004714:	10800017 	ldw	r2,0(r2)
10004718:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000471c:	e0bffc17 	ldw	r2,-16(fp)
10004720:	10800090 	cmplti	r2,r2,2
10004724:	1000061e 	bne	r2,zero,10004740 <altera_avalon_jtag_uart_ioctl+0x7c>
10004728:	e0fffc17 	ldw	r3,-16(fp)
1000472c:	00a00034 	movhi	r2,32768
10004730:	10bfffc4 	addi	r2,r2,-1
10004734:	18800226 	beq	r3,r2,10004740 <altera_avalon_jtag_uart_ioctl+0x7c>
10004738:	e0bffc17 	ldw	r2,-16(fp)
1000473c:	00000206 	br	10004748 <altera_avalon_jtag_uart_ioctl+0x84>
10004740:	00a00034 	movhi	r2,32768
10004744:	10bfff84 	addi	r2,r2,-2
10004748:	e0fffd17 	ldw	r3,-12(fp)
1000474c:	18800115 	stw	r2,4(r3)
      rc = 0;
10004750:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10004754:	00001106 	br	1000479c <altera_avalon_jtag_uart_ioctl+0xd8>
10004758:	00001006 	br	1000479c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000475c:	e0bffd17 	ldw	r2,-12(fp)
10004760:	10c00117 	ldw	r3,4(r2)
10004764:	00a00034 	movhi	r2,32768
10004768:	10bfffc4 	addi	r2,r2,-1
1000476c:	18800a26 	beq	r3,r2,10004798 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10004770:	e0bffd17 	ldw	r2,-12(fp)
10004774:	10c00917 	ldw	r3,36(r2)
10004778:	e0bffd17 	ldw	r2,-12(fp)
1000477c:	10800117 	ldw	r2,4(r2)
10004780:	1885803a 	cmpltu	r2,r3,r2
10004784:	10c03fcc 	andi	r3,r2,255
10004788:	e0bfff17 	ldw	r2,-4(fp)
1000478c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10004790:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10004794:	00000006 	br	10004798 <altera_avalon_jtag_uart_ioctl+0xd4>
10004798:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000479c:	e0bffb17 	ldw	r2,-20(fp)
}
100047a0:	e037883a 	mov	sp,fp
100047a4:	df000017 	ldw	fp,0(sp)
100047a8:	dec00104 	addi	sp,sp,4
100047ac:	f800283a 	ret

100047b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100047b0:	defff304 	addi	sp,sp,-52
100047b4:	dfc00c15 	stw	ra,48(sp)
100047b8:	df000b15 	stw	fp,44(sp)
100047bc:	df000b04 	addi	fp,sp,44
100047c0:	e13ffc15 	stw	r4,-16(fp)
100047c4:	e17ffd15 	stw	r5,-12(fp)
100047c8:	e1bffe15 	stw	r6,-8(fp)
100047cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100047d0:	e0bffd17 	ldw	r2,-12(fp)
100047d4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100047d8:	00004906 	br	10004900 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100047dc:	e0bffc17 	ldw	r2,-16(fp)
100047e0:	10800a17 	ldw	r2,40(r2)
100047e4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100047e8:	e0bffc17 	ldw	r2,-16(fp)
100047ec:	10800b17 	ldw	r2,44(r2)
100047f0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100047f4:	e0fff717 	ldw	r3,-36(fp)
100047f8:	e0bff817 	ldw	r2,-32(fp)
100047fc:	18800536 	bltu	r3,r2,10004814 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10004800:	e0fff717 	ldw	r3,-36(fp)
10004804:	e0bff817 	ldw	r2,-32(fp)
10004808:	1885c83a 	sub	r2,r3,r2
1000480c:	e0bff615 	stw	r2,-40(fp)
10004810:	00000406 	br	10004824 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10004814:	00c20004 	movi	r3,2048
10004818:	e0bff817 	ldw	r2,-32(fp)
1000481c:	1885c83a 	sub	r2,r3,r2
10004820:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004824:	e0bff617 	ldw	r2,-40(fp)
10004828:	1000011e 	bne	r2,zero,10004830 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000482c:	00001d06 	br	100048a4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10004830:	e0fffe17 	ldw	r3,-8(fp)
10004834:	e0bff617 	ldw	r2,-40(fp)
10004838:	1880022e 	bgeu	r3,r2,10004844 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000483c:	e0bffe17 	ldw	r2,-8(fp)
10004840:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10004844:	e0bff817 	ldw	r2,-32(fp)
10004848:	10800e04 	addi	r2,r2,56
1000484c:	e0fffc17 	ldw	r3,-16(fp)
10004850:	1885883a 	add	r2,r3,r2
10004854:	e13ff517 	ldw	r4,-44(fp)
10004858:	100b883a 	mov	r5,r2
1000485c:	e1bff617 	ldw	r6,-40(fp)
10004860:	0005d300 	call	10005d30 <memcpy>
      ptr   += n;
10004864:	e0fff517 	ldw	r3,-44(fp)
10004868:	e0bff617 	ldw	r2,-40(fp)
1000486c:	1885883a 	add	r2,r3,r2
10004870:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10004874:	e0fffe17 	ldw	r3,-8(fp)
10004878:	e0bff617 	ldw	r2,-40(fp)
1000487c:	1885c83a 	sub	r2,r3,r2
10004880:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004884:	e0fff817 	ldw	r3,-32(fp)
10004888:	e0bff617 	ldw	r2,-40(fp)
1000488c:	1885883a 	add	r2,r3,r2
10004890:	10c1ffcc 	andi	r3,r2,2047
10004894:	e0bffc17 	ldw	r2,-16(fp)
10004898:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000489c:	e0bffe17 	ldw	r2,-8(fp)
100048a0:	00bfce16 	blt	zero,r2,100047dc <__alt_data_end+0xf80047dc>

    /* If we read any data then return it */
    if (ptr != buffer)
100048a4:	e0fff517 	ldw	r3,-44(fp)
100048a8:	e0bffd17 	ldw	r2,-12(fp)
100048ac:	18800126 	beq	r3,r2,100048b4 <altera_avalon_jtag_uart_read+0x104>
      break;
100048b0:	00001506 	br	10004908 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100048b4:	e0bfff17 	ldw	r2,-4(fp)
100048b8:	1090000c 	andi	r2,r2,16384
100048bc:	10000126 	beq	r2,zero,100048c4 <altera_avalon_jtag_uart_read+0x114>
      break;
100048c0:	00001106 	br	10004908 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100048c4:	0001883a 	nop
100048c8:	e0bffc17 	ldw	r2,-16(fp)
100048cc:	10c00a17 	ldw	r3,40(r2)
100048d0:	e0bff717 	ldw	r2,-36(fp)
100048d4:	1880051e 	bne	r3,r2,100048ec <altera_avalon_jtag_uart_read+0x13c>
100048d8:	e0bffc17 	ldw	r2,-16(fp)
100048dc:	10c00917 	ldw	r3,36(r2)
100048e0:	e0bffc17 	ldw	r2,-16(fp)
100048e4:	10800117 	ldw	r2,4(r2)
100048e8:	18bff736 	bltu	r3,r2,100048c8 <__alt_data_end+0xf80048c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100048ec:	e0bffc17 	ldw	r2,-16(fp)
100048f0:	10c00a17 	ldw	r3,40(r2)
100048f4:	e0bff717 	ldw	r2,-36(fp)
100048f8:	1880011e 	bne	r3,r2,10004900 <altera_avalon_jtag_uart_read+0x150>
      break;
100048fc:	00000206 	br	10004908 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004900:	e0bffe17 	ldw	r2,-8(fp)
10004904:	00bfb516 	blt	zero,r2,100047dc <__alt_data_end+0xf80047dc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10004908:	e0fff517 	ldw	r3,-44(fp)
1000490c:	e0bffd17 	ldw	r2,-12(fp)
10004910:	18801826 	beq	r3,r2,10004974 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004914:	0005303a 	rdctl	r2,status
10004918:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000491c:	e0fffa17 	ldw	r3,-24(fp)
10004920:	00bfff84 	movi	r2,-2
10004924:	1884703a 	and	r2,r3,r2
10004928:	1001703a 	wrctl	status,r2
  
  return context;
1000492c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10004930:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004934:	e0bffc17 	ldw	r2,-16(fp)
10004938:	10800817 	ldw	r2,32(r2)
1000493c:	10c00054 	ori	r3,r2,1
10004940:	e0bffc17 	ldw	r2,-16(fp)
10004944:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004948:	e0bffc17 	ldw	r2,-16(fp)
1000494c:	10800017 	ldw	r2,0(r2)
10004950:	10800104 	addi	r2,r2,4
10004954:	1007883a 	mov	r3,r2
10004958:	e0bffc17 	ldw	r2,-16(fp)
1000495c:	10800817 	ldw	r2,32(r2)
10004960:	18800035 	stwio	r2,0(r3)
10004964:	e0bff917 	ldw	r2,-28(fp)
10004968:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000496c:	e0bffb17 	ldw	r2,-20(fp)
10004970:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10004974:	e0fff517 	ldw	r3,-44(fp)
10004978:	e0bffd17 	ldw	r2,-12(fp)
1000497c:	18800426 	beq	r3,r2,10004990 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10004980:	e0fff517 	ldw	r3,-44(fp)
10004984:	e0bffd17 	ldw	r2,-12(fp)
10004988:	1885c83a 	sub	r2,r3,r2
1000498c:	00000606 	br	100049a8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10004990:	e0bfff17 	ldw	r2,-4(fp)
10004994:	1090000c 	andi	r2,r2,16384
10004998:	10000226 	beq	r2,zero,100049a4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000499c:	00bffd44 	movi	r2,-11
100049a0:	00000106 	br	100049a8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
100049a4:	00bffec4 	movi	r2,-5
}
100049a8:	e037883a 	mov	sp,fp
100049ac:	dfc00117 	ldw	ra,4(sp)
100049b0:	df000017 	ldw	fp,0(sp)
100049b4:	dec00204 	addi	sp,sp,8
100049b8:	f800283a 	ret

100049bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100049bc:	defff304 	addi	sp,sp,-52
100049c0:	dfc00c15 	stw	ra,48(sp)
100049c4:	df000b15 	stw	fp,44(sp)
100049c8:	df000b04 	addi	fp,sp,44
100049cc:	e13ffc15 	stw	r4,-16(fp)
100049d0:	e17ffd15 	stw	r5,-12(fp)
100049d4:	e1bffe15 	stw	r6,-8(fp)
100049d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100049dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100049e0:	e0bffd17 	ldw	r2,-12(fp)
100049e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100049e8:	00003806 	br	10004acc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100049ec:	e0bffc17 	ldw	r2,-16(fp)
100049f0:	10800c17 	ldw	r2,48(r2)
100049f4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100049f8:	e0bffc17 	ldw	r2,-16(fp)
100049fc:	10800d17 	ldw	r2,52(r2)
10004a00:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10004a04:	e0fff817 	ldw	r3,-32(fp)
10004a08:	e0bff517 	ldw	r2,-44(fp)
10004a0c:	1880062e 	bgeu	r3,r2,10004a28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10004a10:	e0fff517 	ldw	r3,-44(fp)
10004a14:	e0bff817 	ldw	r2,-32(fp)
10004a18:	1885c83a 	sub	r2,r3,r2
10004a1c:	10bfffc4 	addi	r2,r2,-1
10004a20:	e0bff615 	stw	r2,-40(fp)
10004a24:	00000b06 	br	10004a54 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10004a28:	e0bff517 	ldw	r2,-44(fp)
10004a2c:	10000526 	beq	r2,zero,10004a44 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10004a30:	00c20004 	movi	r3,2048
10004a34:	e0bff817 	ldw	r2,-32(fp)
10004a38:	1885c83a 	sub	r2,r3,r2
10004a3c:	e0bff615 	stw	r2,-40(fp)
10004a40:	00000406 	br	10004a54 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10004a44:	00c1ffc4 	movi	r3,2047
10004a48:	e0bff817 	ldw	r2,-32(fp)
10004a4c:	1885c83a 	sub	r2,r3,r2
10004a50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004a54:	e0bff617 	ldw	r2,-40(fp)
10004a58:	1000011e 	bne	r2,zero,10004a60 <altera_avalon_jtag_uart_write+0xa4>
        break;
10004a5c:	00001d06 	br	10004ad4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10004a60:	e0fffe17 	ldw	r3,-8(fp)
10004a64:	e0bff617 	ldw	r2,-40(fp)
10004a68:	1880022e 	bgeu	r3,r2,10004a74 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10004a6c:	e0bffe17 	ldw	r2,-8(fp)
10004a70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10004a74:	e0bff817 	ldw	r2,-32(fp)
10004a78:	10820e04 	addi	r2,r2,2104
10004a7c:	e0fffc17 	ldw	r3,-16(fp)
10004a80:	1885883a 	add	r2,r3,r2
10004a84:	1009883a 	mov	r4,r2
10004a88:	e17ffd17 	ldw	r5,-12(fp)
10004a8c:	e1bff617 	ldw	r6,-40(fp)
10004a90:	0005d300 	call	10005d30 <memcpy>
      ptr   += n;
10004a94:	e0fffd17 	ldw	r3,-12(fp)
10004a98:	e0bff617 	ldw	r2,-40(fp)
10004a9c:	1885883a 	add	r2,r3,r2
10004aa0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004aa4:	e0fffe17 	ldw	r3,-8(fp)
10004aa8:	e0bff617 	ldw	r2,-40(fp)
10004aac:	1885c83a 	sub	r2,r3,r2
10004ab0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004ab4:	e0fff817 	ldw	r3,-32(fp)
10004ab8:	e0bff617 	ldw	r2,-40(fp)
10004abc:	1885883a 	add	r2,r3,r2
10004ac0:	10c1ffcc 	andi	r3,r2,2047
10004ac4:	e0bffc17 	ldw	r2,-16(fp)
10004ac8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004acc:	e0bffe17 	ldw	r2,-8(fp)
10004ad0:	00bfc616 	blt	zero,r2,100049ec <__alt_data_end+0xf80049ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004ad4:	0005303a 	rdctl	r2,status
10004ad8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004adc:	e0fffa17 	ldw	r3,-24(fp)
10004ae0:	00bfff84 	movi	r2,-2
10004ae4:	1884703a 	and	r2,r3,r2
10004ae8:	1001703a 	wrctl	status,r2
  
  return context;
10004aec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10004af0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004af4:	e0bffc17 	ldw	r2,-16(fp)
10004af8:	10800817 	ldw	r2,32(r2)
10004afc:	10c00094 	ori	r3,r2,2
10004b00:	e0bffc17 	ldw	r2,-16(fp)
10004b04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004b08:	e0bffc17 	ldw	r2,-16(fp)
10004b0c:	10800017 	ldw	r2,0(r2)
10004b10:	10800104 	addi	r2,r2,4
10004b14:	1007883a 	mov	r3,r2
10004b18:	e0bffc17 	ldw	r2,-16(fp)
10004b1c:	10800817 	ldw	r2,32(r2)
10004b20:	18800035 	stwio	r2,0(r3)
10004b24:	e0bff917 	ldw	r2,-28(fp)
10004b28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004b2c:	e0bffb17 	ldw	r2,-20(fp)
10004b30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10004b34:	e0bffe17 	ldw	r2,-8(fp)
10004b38:	0080120e 	bge	zero,r2,10004b84 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10004b3c:	e0bfff17 	ldw	r2,-4(fp)
10004b40:	1090000c 	andi	r2,r2,16384
10004b44:	10000126 	beq	r2,zero,10004b4c <altera_avalon_jtag_uart_write+0x190>
        break;
10004b48:	00001006 	br	10004b8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10004b4c:	0001883a 	nop
10004b50:	e0bffc17 	ldw	r2,-16(fp)
10004b54:	10c00d17 	ldw	r3,52(r2)
10004b58:	e0bff517 	ldw	r2,-44(fp)
10004b5c:	1880051e 	bne	r3,r2,10004b74 <altera_avalon_jtag_uart_write+0x1b8>
10004b60:	e0bffc17 	ldw	r2,-16(fp)
10004b64:	10c00917 	ldw	r3,36(r2)
10004b68:	e0bffc17 	ldw	r2,-16(fp)
10004b6c:	10800117 	ldw	r2,4(r2)
10004b70:	18bff736 	bltu	r3,r2,10004b50 <__alt_data_end+0xf8004b50>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10004b74:	e0bffc17 	ldw	r2,-16(fp)
10004b78:	10800917 	ldw	r2,36(r2)
10004b7c:	10000126 	beq	r2,zero,10004b84 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10004b80:	00000206 	br	10004b8c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10004b84:	e0bffe17 	ldw	r2,-8(fp)
10004b88:	00bf9716 	blt	zero,r2,100049e8 <__alt_data_end+0xf80049e8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004b8c:	e0fffd17 	ldw	r3,-12(fp)
10004b90:	e0bff717 	ldw	r2,-36(fp)
10004b94:	18800426 	beq	r3,r2,10004ba8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10004b98:	e0fffd17 	ldw	r3,-12(fp)
10004b9c:	e0bff717 	ldw	r2,-36(fp)
10004ba0:	1885c83a 	sub	r2,r3,r2
10004ba4:	00000606 	br	10004bc0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10004ba8:	e0bfff17 	ldw	r2,-4(fp)
10004bac:	1090000c 	andi	r2,r2,16384
10004bb0:	10000226 	beq	r2,zero,10004bbc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10004bb4:	00bffd44 	movi	r2,-11
10004bb8:	00000106 	br	10004bc0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004bbc:	00bffec4 	movi	r2,-5
}
10004bc0:	e037883a 	mov	sp,fp
10004bc4:	dfc00117 	ldw	ra,4(sp)
10004bc8:	df000017 	ldw	fp,0(sp)
10004bcc:	dec00204 	addi	sp,sp,8
10004bd0:	f800283a 	ret

10004bd4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10004bd4:	defff504 	addi	sp,sp,-44
10004bd8:	df000a15 	stw	fp,40(sp)
10004bdc:	df000a04 	addi	fp,sp,40
10004be0:	e13ffc15 	stw	r4,-16(fp)
10004be4:	e17ffd15 	stw	r5,-12(fp)
10004be8:	e1bffe15 	stw	r6,-8(fp)
10004bec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10004bf0:	e03ff615 	stw	zero,-40(fp)
10004bf4:	00840074 	movhi	r2,4097
10004bf8:	10a40704 	addi	r2,r2,-28644
10004bfc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10004c00:	10003f26 	beq	r2,zero,10004d00 <alt_alarm_start+0x12c>
  {
    if (alarm)
10004c04:	e0bffc17 	ldw	r2,-16(fp)
10004c08:	10003b26 	beq	r2,zero,10004cf8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10004c0c:	e0bffc17 	ldw	r2,-16(fp)
10004c10:	e0fffe17 	ldw	r3,-8(fp)
10004c14:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10004c18:	e0bffc17 	ldw	r2,-16(fp)
10004c1c:	e0ffff17 	ldw	r3,-4(fp)
10004c20:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004c24:	0005303a 	rdctl	r2,status
10004c28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004c2c:	e0fff817 	ldw	r3,-32(fp)
10004c30:	00bfff84 	movi	r2,-2
10004c34:	1884703a 	and	r2,r3,r2
10004c38:	1001703a 	wrctl	status,r2
  
  return context;
10004c3c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10004c40:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10004c44:	00840074 	movhi	r2,4097
10004c48:	10a40804 	addi	r2,r2,-28640
10004c4c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10004c50:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10004c54:	e0fffd17 	ldw	r3,-12(fp)
10004c58:	e0bff617 	ldw	r2,-40(fp)
10004c5c:	1885883a 	add	r2,r3,r2
10004c60:	10c00044 	addi	r3,r2,1
10004c64:	e0bffc17 	ldw	r2,-16(fp)
10004c68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10004c6c:	e0bffc17 	ldw	r2,-16(fp)
10004c70:	10c00217 	ldw	r3,8(r2)
10004c74:	e0bff617 	ldw	r2,-40(fp)
10004c78:	1880042e 	bgeu	r3,r2,10004c8c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10004c7c:	e0bffc17 	ldw	r2,-16(fp)
10004c80:	00c00044 	movi	r3,1
10004c84:	10c00405 	stb	r3,16(r2)
10004c88:	00000206 	br	10004c94 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10004c8c:	e0bffc17 	ldw	r2,-16(fp)
10004c90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10004c94:	e0fffc17 	ldw	r3,-16(fp)
10004c98:	00840034 	movhi	r2,4096
10004c9c:	109e5904 	addi	r2,r2,31076
10004ca0:	e0bff915 	stw	r2,-28(fp)
10004ca4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004ca8:	e0bffa17 	ldw	r2,-24(fp)
10004cac:	e0fff917 	ldw	r3,-28(fp)
10004cb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004cb4:	e0bff917 	ldw	r2,-28(fp)
10004cb8:	10c00017 	ldw	r3,0(r2)
10004cbc:	e0bffa17 	ldw	r2,-24(fp)
10004cc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004cc4:	e0bff917 	ldw	r2,-28(fp)
10004cc8:	10800017 	ldw	r2,0(r2)
10004ccc:	e0fffa17 	ldw	r3,-24(fp)
10004cd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004cd4:	e0bff917 	ldw	r2,-28(fp)
10004cd8:	e0fffa17 	ldw	r3,-24(fp)
10004cdc:	10c00015 	stw	r3,0(r2)
10004ce0:	e0bff717 	ldw	r2,-36(fp)
10004ce4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004ce8:	e0bffb17 	ldw	r2,-20(fp)
10004cec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004cf0:	0005883a 	mov	r2,zero
10004cf4:	00000306 	br	10004d04 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10004cf8:	00bffa84 	movi	r2,-22
10004cfc:	00000106 	br	10004d04 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10004d00:	00bfde84 	movi	r2,-134
  }
}
10004d04:	e037883a 	mov	sp,fp
10004d08:	df000017 	ldw	fp,0(sp)
10004d0c:	dec00104 	addi	sp,sp,4
10004d10:	f800283a 	ret

10004d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004d14:	defffe04 	addi	sp,sp,-8
10004d18:	dfc00115 	stw	ra,4(sp)
10004d1c:	df000015 	stw	fp,0(sp)
10004d20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004d24:	00840034 	movhi	r2,4096
10004d28:	109e5704 	addi	r2,r2,31068
10004d2c:	10800017 	ldw	r2,0(r2)
10004d30:	10000526 	beq	r2,zero,10004d48 <alt_get_errno+0x34>
10004d34:	00840034 	movhi	r2,4096
10004d38:	109e5704 	addi	r2,r2,31068
10004d3c:	10800017 	ldw	r2,0(r2)
10004d40:	103ee83a 	callr	r2
10004d44:	00000206 	br	10004d50 <alt_get_errno+0x3c>
10004d48:	00840074 	movhi	r2,4097
10004d4c:	10a40a04 	addi	r2,r2,-28632
}
10004d50:	e037883a 	mov	sp,fp
10004d54:	dfc00117 	ldw	ra,4(sp)
10004d58:	df000017 	ldw	fp,0(sp)
10004d5c:	dec00204 	addi	sp,sp,8
10004d60:	f800283a 	ret

10004d64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10004d64:	defffb04 	addi	sp,sp,-20
10004d68:	dfc00415 	stw	ra,16(sp)
10004d6c:	df000315 	stw	fp,12(sp)
10004d70:	df000304 	addi	fp,sp,12
10004d74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10004d78:	e0bfff17 	ldw	r2,-4(fp)
10004d7c:	10000816 	blt	r2,zero,10004da0 <close+0x3c>
10004d80:	e13fff17 	ldw	r4,-4(fp)
10004d84:	01400304 	movi	r5,12
10004d88:	0002aa00 	call	10002aa0 <__mulsi3>
10004d8c:	1007883a 	mov	r3,r2
10004d90:	00840034 	movhi	r2,4096
10004d94:	109df004 	addi	r2,r2,30656
10004d98:	1885883a 	add	r2,r3,r2
10004d9c:	00000106 	br	10004da4 <close+0x40>
10004da0:	0005883a 	mov	r2,zero
10004da4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10004da8:	e0bffd17 	ldw	r2,-12(fp)
10004dac:	10001926 	beq	r2,zero,10004e14 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10004db0:	e0bffd17 	ldw	r2,-12(fp)
10004db4:	10800017 	ldw	r2,0(r2)
10004db8:	10800417 	ldw	r2,16(r2)
10004dbc:	10000626 	beq	r2,zero,10004dd8 <close+0x74>
10004dc0:	e0bffd17 	ldw	r2,-12(fp)
10004dc4:	10800017 	ldw	r2,0(r2)
10004dc8:	10800417 	ldw	r2,16(r2)
10004dcc:	e13ffd17 	ldw	r4,-12(fp)
10004dd0:	103ee83a 	callr	r2
10004dd4:	00000106 	br	10004ddc <close+0x78>
10004dd8:	0005883a 	mov	r2,zero
10004ddc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10004de0:	e13fff17 	ldw	r4,-4(fp)
10004de4:	00057180 	call	10005718 <alt_release_fd>
    if (rval < 0)
10004de8:	e0bffe17 	ldw	r2,-8(fp)
10004dec:	1000070e 	bge	r2,zero,10004e0c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10004df0:	0004d140 	call	10004d14 <alt_get_errno>
10004df4:	1007883a 	mov	r3,r2
10004df8:	e0bffe17 	ldw	r2,-8(fp)
10004dfc:	0085c83a 	sub	r2,zero,r2
10004e00:	18800015 	stw	r2,0(r3)
      return -1;
10004e04:	00bfffc4 	movi	r2,-1
10004e08:	00000706 	br	10004e28 <close+0xc4>
    }
    return 0;
10004e0c:	0005883a 	mov	r2,zero
10004e10:	00000506 	br	10004e28 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10004e14:	0004d140 	call	10004d14 <alt_get_errno>
10004e18:	1007883a 	mov	r3,r2
10004e1c:	00801444 	movi	r2,81
10004e20:	18800015 	stw	r2,0(r3)
    return -1;
10004e24:	00bfffc4 	movi	r2,-1
  }
}
10004e28:	e037883a 	mov	sp,fp
10004e2c:	dfc00117 	ldw	ra,4(sp)
10004e30:	df000017 	ldw	fp,0(sp)
10004e34:	dec00204 	addi	sp,sp,8
10004e38:	f800283a 	ret

10004e3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10004e3c:	deffff04 	addi	sp,sp,-4
10004e40:	df000015 	stw	fp,0(sp)
10004e44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10004e48:	e037883a 	mov	sp,fp
10004e4c:	df000017 	ldw	fp,0(sp)
10004e50:	dec00104 	addi	sp,sp,4
10004e54:	f800283a 	ret

10004e58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10004e58:	defffc04 	addi	sp,sp,-16
10004e5c:	df000315 	stw	fp,12(sp)
10004e60:	df000304 	addi	fp,sp,12
10004e64:	e13ffd15 	stw	r4,-12(fp)
10004e68:	e17ffe15 	stw	r5,-8(fp)
10004e6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10004e70:	e0bfff17 	ldw	r2,-4(fp)
}
10004e74:	e037883a 	mov	sp,fp
10004e78:	df000017 	ldw	fp,0(sp)
10004e7c:	dec00104 	addi	sp,sp,4
10004e80:	f800283a 	ret

10004e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004e84:	defffe04 	addi	sp,sp,-8
10004e88:	dfc00115 	stw	ra,4(sp)
10004e8c:	df000015 	stw	fp,0(sp)
10004e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004e94:	00840034 	movhi	r2,4096
10004e98:	109e5704 	addi	r2,r2,31068
10004e9c:	10800017 	ldw	r2,0(r2)
10004ea0:	10000526 	beq	r2,zero,10004eb8 <alt_get_errno+0x34>
10004ea4:	00840034 	movhi	r2,4096
10004ea8:	109e5704 	addi	r2,r2,31068
10004eac:	10800017 	ldw	r2,0(r2)
10004eb0:	103ee83a 	callr	r2
10004eb4:	00000206 	br	10004ec0 <alt_get_errno+0x3c>
10004eb8:	00840074 	movhi	r2,4097
10004ebc:	10a40a04 	addi	r2,r2,-28632
}
10004ec0:	e037883a 	mov	sp,fp
10004ec4:	dfc00117 	ldw	ra,4(sp)
10004ec8:	df000017 	ldw	fp,0(sp)
10004ecc:	dec00204 	addi	sp,sp,8
10004ed0:	f800283a 	ret

10004ed4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10004ed4:	defffa04 	addi	sp,sp,-24
10004ed8:	dfc00515 	stw	ra,20(sp)
10004edc:	df000415 	stw	fp,16(sp)
10004ee0:	df000404 	addi	fp,sp,16
10004ee4:	e13ffe15 	stw	r4,-8(fp)
10004ee8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10004eec:	e0bffe17 	ldw	r2,-8(fp)
10004ef0:	10000326 	beq	r2,zero,10004f00 <alt_dev_llist_insert+0x2c>
10004ef4:	e0bffe17 	ldw	r2,-8(fp)
10004ef8:	10800217 	ldw	r2,8(r2)
10004efc:	1000061e 	bne	r2,zero,10004f18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10004f00:	0004e840 	call	10004e84 <alt_get_errno>
10004f04:	1007883a 	mov	r3,r2
10004f08:	00800584 	movi	r2,22
10004f0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10004f10:	00bffa84 	movi	r2,-22
10004f14:	00001306 	br	10004f64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10004f18:	e0bffe17 	ldw	r2,-8(fp)
10004f1c:	e0ffff17 	ldw	r3,-4(fp)
10004f20:	e0fffc15 	stw	r3,-16(fp)
10004f24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004f28:	e0bffd17 	ldw	r2,-12(fp)
10004f2c:	e0fffc17 	ldw	r3,-16(fp)
10004f30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004f34:	e0bffc17 	ldw	r2,-16(fp)
10004f38:	10c00017 	ldw	r3,0(r2)
10004f3c:	e0bffd17 	ldw	r2,-12(fp)
10004f40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004f44:	e0bffc17 	ldw	r2,-16(fp)
10004f48:	10800017 	ldw	r2,0(r2)
10004f4c:	e0fffd17 	ldw	r3,-12(fp)
10004f50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004f54:	e0bffc17 	ldw	r2,-16(fp)
10004f58:	e0fffd17 	ldw	r3,-12(fp)
10004f5c:	10c00015 	stw	r3,0(r2)

  return 0;  
10004f60:	0005883a 	mov	r2,zero
}
10004f64:	e037883a 	mov	sp,fp
10004f68:	dfc00117 	ldw	ra,4(sp)
10004f6c:	df000017 	ldw	fp,0(sp)
10004f70:	dec00204 	addi	sp,sp,8
10004f74:	f800283a 	ret

10004f78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10004f78:	defffd04 	addi	sp,sp,-12
10004f7c:	dfc00215 	stw	ra,8(sp)
10004f80:	df000115 	stw	fp,4(sp)
10004f84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004f88:	00840034 	movhi	r2,4096
10004f8c:	10987604 	addi	r2,r2,25048
10004f90:	e0bfff15 	stw	r2,-4(fp)
10004f94:	00000606 	br	10004fb0 <_do_ctors+0x38>
        (*ctor) (); 
10004f98:	e0bfff17 	ldw	r2,-4(fp)
10004f9c:	10800017 	ldw	r2,0(r2)
10004fa0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004fa4:	e0bfff17 	ldw	r2,-4(fp)
10004fa8:	10bfff04 	addi	r2,r2,-4
10004fac:	e0bfff15 	stw	r2,-4(fp)
10004fb0:	e0ffff17 	ldw	r3,-4(fp)
10004fb4:	00840034 	movhi	r2,4096
10004fb8:	10987704 	addi	r2,r2,25052
10004fbc:	18bff62e 	bgeu	r3,r2,10004f98 <__alt_data_end+0xf8004f98>
        (*ctor) (); 
}
10004fc0:	e037883a 	mov	sp,fp
10004fc4:	dfc00117 	ldw	ra,4(sp)
10004fc8:	df000017 	ldw	fp,0(sp)
10004fcc:	dec00204 	addi	sp,sp,8
10004fd0:	f800283a 	ret

10004fd4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10004fd4:	defffd04 	addi	sp,sp,-12
10004fd8:	dfc00215 	stw	ra,8(sp)
10004fdc:	df000115 	stw	fp,4(sp)
10004fe0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004fe4:	00840034 	movhi	r2,4096
10004fe8:	10987604 	addi	r2,r2,25048
10004fec:	e0bfff15 	stw	r2,-4(fp)
10004ff0:	00000606 	br	1000500c <_do_dtors+0x38>
        (*dtor) (); 
10004ff4:	e0bfff17 	ldw	r2,-4(fp)
10004ff8:	10800017 	ldw	r2,0(r2)
10004ffc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10005000:	e0bfff17 	ldw	r2,-4(fp)
10005004:	10bfff04 	addi	r2,r2,-4
10005008:	e0bfff15 	stw	r2,-4(fp)
1000500c:	e0ffff17 	ldw	r3,-4(fp)
10005010:	00840034 	movhi	r2,4096
10005014:	10987704 	addi	r2,r2,25052
10005018:	18bff62e 	bgeu	r3,r2,10004ff4 <__alt_data_end+0xf8004ff4>
        (*dtor) (); 
}
1000501c:	e037883a 	mov	sp,fp
10005020:	dfc00117 	ldw	ra,4(sp)
10005024:	df000017 	ldw	fp,0(sp)
10005028:	dec00204 	addi	sp,sp,8
1000502c:	f800283a 	ret

10005030 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10005030:	deffff04 	addi	sp,sp,-4
10005034:	df000015 	stw	fp,0(sp)
10005038:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000503c:	e037883a 	mov	sp,fp
10005040:	df000017 	ldw	fp,0(sp)
10005044:	dec00104 	addi	sp,sp,4
10005048:	f800283a 	ret

1000504c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000504c:	defff904 	addi	sp,sp,-28
10005050:	dfc00615 	stw	ra,24(sp)
10005054:	df000515 	stw	fp,20(sp)
10005058:	df000504 	addi	fp,sp,20
1000505c:	e13ffc15 	stw	r4,-16(fp)
10005060:	e17ffd15 	stw	r5,-12(fp)
10005064:	e1bffe15 	stw	r6,-8(fp)
10005068:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000506c:	e0800217 	ldw	r2,8(fp)
10005070:	d8800015 	stw	r2,0(sp)
10005074:	e13ffc17 	ldw	r4,-16(fp)
10005078:	e17ffd17 	ldw	r5,-12(fp)
1000507c:	e1bffe17 	ldw	r6,-8(fp)
10005080:	e1ffff17 	ldw	r7,-4(fp)
10005084:	000522c0 	call	1000522c <alt_iic_isr_register>
}  
10005088:	e037883a 	mov	sp,fp
1000508c:	dfc00117 	ldw	ra,4(sp)
10005090:	df000017 	ldw	fp,0(sp)
10005094:	dec00204 	addi	sp,sp,8
10005098:	f800283a 	ret

1000509c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000509c:	defff904 	addi	sp,sp,-28
100050a0:	df000615 	stw	fp,24(sp)
100050a4:	df000604 	addi	fp,sp,24
100050a8:	e13ffe15 	stw	r4,-8(fp)
100050ac:	e17fff15 	stw	r5,-4(fp)
100050b0:	e0bfff17 	ldw	r2,-4(fp)
100050b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100050b8:	0005303a 	rdctl	r2,status
100050bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100050c0:	e0fffb17 	ldw	r3,-20(fp)
100050c4:	00bfff84 	movi	r2,-2
100050c8:	1884703a 	and	r2,r3,r2
100050cc:	1001703a 	wrctl	status,r2
  
  return context;
100050d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100050d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100050d8:	e0bffa17 	ldw	r2,-24(fp)
100050dc:	00c00044 	movi	r3,1
100050e0:	1884983a 	sll	r2,r3,r2
100050e4:	1007883a 	mov	r3,r2
100050e8:	00840074 	movhi	r2,4097
100050ec:	10a40604 	addi	r2,r2,-28648
100050f0:	10800017 	ldw	r2,0(r2)
100050f4:	1886b03a 	or	r3,r3,r2
100050f8:	00840074 	movhi	r2,4097
100050fc:	10a40604 	addi	r2,r2,-28648
10005100:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10005104:	00840074 	movhi	r2,4097
10005108:	10a40604 	addi	r2,r2,-28648
1000510c:	10800017 	ldw	r2,0(r2)
10005110:	100170fa 	wrctl	ienable,r2
10005114:	e0bffc17 	ldw	r2,-16(fp)
10005118:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000511c:	e0bffd17 	ldw	r2,-12(fp)
10005120:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10005124:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10005128:	0001883a 	nop
}
1000512c:	e037883a 	mov	sp,fp
10005130:	df000017 	ldw	fp,0(sp)
10005134:	dec00104 	addi	sp,sp,4
10005138:	f800283a 	ret

1000513c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000513c:	defff904 	addi	sp,sp,-28
10005140:	df000615 	stw	fp,24(sp)
10005144:	df000604 	addi	fp,sp,24
10005148:	e13ffe15 	stw	r4,-8(fp)
1000514c:	e17fff15 	stw	r5,-4(fp)
10005150:	e0bfff17 	ldw	r2,-4(fp)
10005154:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10005158:	0005303a 	rdctl	r2,status
1000515c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10005160:	e0fffb17 	ldw	r3,-20(fp)
10005164:	00bfff84 	movi	r2,-2
10005168:	1884703a 	and	r2,r3,r2
1000516c:	1001703a 	wrctl	status,r2
  
  return context;
10005170:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10005174:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10005178:	e0bffa17 	ldw	r2,-24(fp)
1000517c:	00c00044 	movi	r3,1
10005180:	1884983a 	sll	r2,r3,r2
10005184:	0084303a 	nor	r2,zero,r2
10005188:	1007883a 	mov	r3,r2
1000518c:	00840074 	movhi	r2,4097
10005190:	10a40604 	addi	r2,r2,-28648
10005194:	10800017 	ldw	r2,0(r2)
10005198:	1886703a 	and	r3,r3,r2
1000519c:	00840074 	movhi	r2,4097
100051a0:	10a40604 	addi	r2,r2,-28648
100051a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100051a8:	00840074 	movhi	r2,4097
100051ac:	10a40604 	addi	r2,r2,-28648
100051b0:	10800017 	ldw	r2,0(r2)
100051b4:	100170fa 	wrctl	ienable,r2
100051b8:	e0bffc17 	ldw	r2,-16(fp)
100051bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100051c0:	e0bffd17 	ldw	r2,-12(fp)
100051c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100051c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100051cc:	0001883a 	nop
}
100051d0:	e037883a 	mov	sp,fp
100051d4:	df000017 	ldw	fp,0(sp)
100051d8:	dec00104 	addi	sp,sp,4
100051dc:	f800283a 	ret

100051e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100051e0:	defffc04 	addi	sp,sp,-16
100051e4:	df000315 	stw	fp,12(sp)
100051e8:	df000304 	addi	fp,sp,12
100051ec:	e13ffe15 	stw	r4,-8(fp)
100051f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100051f4:	000530fa 	rdctl	r2,ienable
100051f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100051fc:	e0bfff17 	ldw	r2,-4(fp)
10005200:	00c00044 	movi	r3,1
10005204:	1884983a 	sll	r2,r3,r2
10005208:	1007883a 	mov	r3,r2
1000520c:	e0bffd17 	ldw	r2,-12(fp)
10005210:	1884703a 	and	r2,r3,r2
10005214:	1004c03a 	cmpne	r2,r2,zero
10005218:	10803fcc 	andi	r2,r2,255
}
1000521c:	e037883a 	mov	sp,fp
10005220:	df000017 	ldw	fp,0(sp)
10005224:	dec00104 	addi	sp,sp,4
10005228:	f800283a 	ret

1000522c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000522c:	defff504 	addi	sp,sp,-44
10005230:	dfc00a15 	stw	ra,40(sp)
10005234:	df000915 	stw	fp,36(sp)
10005238:	df000904 	addi	fp,sp,36
1000523c:	e13ffc15 	stw	r4,-16(fp)
10005240:	e17ffd15 	stw	r5,-12(fp)
10005244:	e1bffe15 	stw	r6,-8(fp)
10005248:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000524c:	00bffa84 	movi	r2,-22
10005250:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10005254:	e0bffd17 	ldw	r2,-12(fp)
10005258:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000525c:	e0bff817 	ldw	r2,-32(fp)
10005260:	10800808 	cmpgei	r2,r2,32
10005264:	1000271e 	bne	r2,zero,10005304 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10005268:	0005303a 	rdctl	r2,status
1000526c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10005270:	e0fffa17 	ldw	r3,-24(fp)
10005274:	00bfff84 	movi	r2,-2
10005278:	1884703a 	and	r2,r3,r2
1000527c:	1001703a 	wrctl	status,r2
  
  return context;
10005280:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10005284:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10005288:	00840074 	movhi	r2,4097
1000528c:	10a48b04 	addi	r2,r2,-28116
10005290:	e0fff817 	ldw	r3,-32(fp)
10005294:	180690fa 	slli	r3,r3,3
10005298:	10c5883a 	add	r2,r2,r3
1000529c:	e0fffe17 	ldw	r3,-8(fp)
100052a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100052a4:	00840074 	movhi	r2,4097
100052a8:	10a48b04 	addi	r2,r2,-28116
100052ac:	e0fff817 	ldw	r3,-32(fp)
100052b0:	180690fa 	slli	r3,r3,3
100052b4:	10c5883a 	add	r2,r2,r3
100052b8:	10800104 	addi	r2,r2,4
100052bc:	e0ffff17 	ldw	r3,-4(fp)
100052c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100052c4:	e0bffe17 	ldw	r2,-8(fp)
100052c8:	10000526 	beq	r2,zero,100052e0 <alt_iic_isr_register+0xb4>
100052cc:	e0bff817 	ldw	r2,-32(fp)
100052d0:	e13ffc17 	ldw	r4,-16(fp)
100052d4:	100b883a 	mov	r5,r2
100052d8:	000509c0 	call	1000509c <alt_ic_irq_enable>
100052dc:	00000406 	br	100052f0 <alt_iic_isr_register+0xc4>
100052e0:	e0bff817 	ldw	r2,-32(fp)
100052e4:	e13ffc17 	ldw	r4,-16(fp)
100052e8:	100b883a 	mov	r5,r2
100052ec:	000513c0 	call	1000513c <alt_ic_irq_disable>
100052f0:	e0bff715 	stw	r2,-36(fp)
100052f4:	e0bff917 	ldw	r2,-28(fp)
100052f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100052fc:	e0bffb17 	ldw	r2,-20(fp)
10005300:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10005304:	e0bff717 	ldw	r2,-36(fp)
}
10005308:	e037883a 	mov	sp,fp
1000530c:	dfc00117 	ldw	ra,4(sp)
10005310:	df000017 	ldw	fp,0(sp)
10005314:	dec00204 	addi	sp,sp,8
10005318:	f800283a 	ret

1000531c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000531c:	defff804 	addi	sp,sp,-32
10005320:	dfc00715 	stw	ra,28(sp)
10005324:	df000615 	stw	fp,24(sp)
10005328:	dc000515 	stw	r16,20(sp)
1000532c:	df000604 	addi	fp,sp,24
10005330:	e13ffb15 	stw	r4,-20(fp)
10005334:	e17ffc15 	stw	r5,-16(fp)
10005338:	e1bffd15 	stw	r6,-12(fp)
1000533c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10005340:	e13ffc17 	ldw	r4,-16(fp)
10005344:	e17ffd17 	ldw	r5,-12(fp)
10005348:	e1bffe17 	ldw	r6,-8(fp)
1000534c:	00055b80 	call	100055b8 <open>
10005350:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10005354:	e0bffa17 	ldw	r2,-24(fp)
10005358:	10002216 	blt	r2,zero,100053e4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000535c:	04040034 	movhi	r16,4096
10005360:	841df004 	addi	r16,r16,30656
10005364:	e0bffa17 	ldw	r2,-24(fp)
10005368:	1009883a 	mov	r4,r2
1000536c:	01400304 	movi	r5,12
10005370:	0002aa00 	call	10002aa0 <__mulsi3>
10005374:	8085883a 	add	r2,r16,r2
10005378:	10c00017 	ldw	r3,0(r2)
1000537c:	e0bffb17 	ldw	r2,-20(fp)
10005380:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10005384:	04040034 	movhi	r16,4096
10005388:	841df004 	addi	r16,r16,30656
1000538c:	e0bffa17 	ldw	r2,-24(fp)
10005390:	1009883a 	mov	r4,r2
10005394:	01400304 	movi	r5,12
10005398:	0002aa00 	call	10002aa0 <__mulsi3>
1000539c:	8085883a 	add	r2,r16,r2
100053a0:	10800104 	addi	r2,r2,4
100053a4:	10c00017 	ldw	r3,0(r2)
100053a8:	e0bffb17 	ldw	r2,-20(fp)
100053ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100053b0:	04040034 	movhi	r16,4096
100053b4:	841df004 	addi	r16,r16,30656
100053b8:	e0bffa17 	ldw	r2,-24(fp)
100053bc:	1009883a 	mov	r4,r2
100053c0:	01400304 	movi	r5,12
100053c4:	0002aa00 	call	10002aa0 <__mulsi3>
100053c8:	8085883a 	add	r2,r16,r2
100053cc:	10800204 	addi	r2,r2,8
100053d0:	10c00017 	ldw	r3,0(r2)
100053d4:	e0bffb17 	ldw	r2,-20(fp)
100053d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100053dc:	e13ffa17 	ldw	r4,-24(fp)
100053e0:	00057180 	call	10005718 <alt_release_fd>
  }
} 
100053e4:	e6ffff04 	addi	sp,fp,-4
100053e8:	dfc00217 	ldw	ra,8(sp)
100053ec:	df000117 	ldw	fp,4(sp)
100053f0:	dc000017 	ldw	r16,0(sp)
100053f4:	dec00304 	addi	sp,sp,12
100053f8:	f800283a 	ret

100053fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100053fc:	defffb04 	addi	sp,sp,-20
10005400:	dfc00415 	stw	ra,16(sp)
10005404:	df000315 	stw	fp,12(sp)
10005408:	df000304 	addi	fp,sp,12
1000540c:	e13ffd15 	stw	r4,-12(fp)
10005410:	e17ffe15 	stw	r5,-8(fp)
10005414:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10005418:	01040034 	movhi	r4,4096
1000541c:	211df304 	addi	r4,r4,30668
10005420:	e17ffd17 	ldw	r5,-12(fp)
10005424:	01800044 	movi	r6,1
10005428:	01c07fc4 	movi	r7,511
1000542c:	000531c0 	call	1000531c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10005430:	01040034 	movhi	r4,4096
10005434:	211df004 	addi	r4,r4,30656
10005438:	e17ffe17 	ldw	r5,-8(fp)
1000543c:	000d883a 	mov	r6,zero
10005440:	01c07fc4 	movi	r7,511
10005444:	000531c0 	call	1000531c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10005448:	01040034 	movhi	r4,4096
1000544c:	211df604 	addi	r4,r4,30680
10005450:	e17fff17 	ldw	r5,-4(fp)
10005454:	01800044 	movi	r6,1
10005458:	01c07fc4 	movi	r7,511
1000545c:	000531c0 	call	1000531c <alt_open_fd>
}  
10005460:	e037883a 	mov	sp,fp
10005464:	dfc00117 	ldw	ra,4(sp)
10005468:	df000017 	ldw	fp,0(sp)
1000546c:	dec00204 	addi	sp,sp,8
10005470:	f800283a 	ret

10005474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10005474:	defffe04 	addi	sp,sp,-8
10005478:	dfc00115 	stw	ra,4(sp)
1000547c:	df000015 	stw	fp,0(sp)
10005480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10005484:	00840034 	movhi	r2,4096
10005488:	109e5704 	addi	r2,r2,31068
1000548c:	10800017 	ldw	r2,0(r2)
10005490:	10000526 	beq	r2,zero,100054a8 <alt_get_errno+0x34>
10005494:	00840034 	movhi	r2,4096
10005498:	109e5704 	addi	r2,r2,31068
1000549c:	10800017 	ldw	r2,0(r2)
100054a0:	103ee83a 	callr	r2
100054a4:	00000206 	br	100054b0 <alt_get_errno+0x3c>
100054a8:	00840074 	movhi	r2,4097
100054ac:	10a40a04 	addi	r2,r2,-28632
}
100054b0:	e037883a 	mov	sp,fp
100054b4:	dfc00117 	ldw	ra,4(sp)
100054b8:	df000017 	ldw	fp,0(sp)
100054bc:	dec00204 	addi	sp,sp,8
100054c0:	f800283a 	ret

100054c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100054c4:	defffb04 	addi	sp,sp,-20
100054c8:	dfc00415 	stw	ra,16(sp)
100054cc:	df000315 	stw	fp,12(sp)
100054d0:	dc000215 	stw	r16,8(sp)
100054d4:	df000304 	addi	fp,sp,12
100054d8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100054dc:	e0bffe17 	ldw	r2,-8(fp)
100054e0:	10800217 	ldw	r2,8(r2)
100054e4:	10d00034 	orhi	r3,r2,16384
100054e8:	e0bffe17 	ldw	r2,-8(fp)
100054ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100054f0:	e03ffd15 	stw	zero,-12(fp)
100054f4:	00002306 	br	10005584 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100054f8:	04040034 	movhi	r16,4096
100054fc:	841df004 	addi	r16,r16,30656
10005500:	e0bffd17 	ldw	r2,-12(fp)
10005504:	1009883a 	mov	r4,r2
10005508:	01400304 	movi	r5,12
1000550c:	0002aa00 	call	10002aa0 <__mulsi3>
10005510:	8085883a 	add	r2,r16,r2
10005514:	10c00017 	ldw	r3,0(r2)
10005518:	e0bffe17 	ldw	r2,-8(fp)
1000551c:	10800017 	ldw	r2,0(r2)
10005520:	1880151e 	bne	r3,r2,10005578 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10005524:	04040034 	movhi	r16,4096
10005528:	841df004 	addi	r16,r16,30656
1000552c:	e0bffd17 	ldw	r2,-12(fp)
10005530:	1009883a 	mov	r4,r2
10005534:	01400304 	movi	r5,12
10005538:	0002aa00 	call	10002aa0 <__mulsi3>
1000553c:	8085883a 	add	r2,r16,r2
10005540:	10800204 	addi	r2,r2,8
10005544:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10005548:	10000b0e 	bge	r2,zero,10005578 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000554c:	e13ffd17 	ldw	r4,-12(fp)
10005550:	01400304 	movi	r5,12
10005554:	0002aa00 	call	10002aa0 <__mulsi3>
10005558:	1007883a 	mov	r3,r2
1000555c:	00840034 	movhi	r2,4096
10005560:	109df004 	addi	r2,r2,30656
10005564:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10005568:	e0bffe17 	ldw	r2,-8(fp)
1000556c:	18800226 	beq	r3,r2,10005578 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10005570:	00bffcc4 	movi	r2,-13
10005574:	00000a06 	br	100055a0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10005578:	e0bffd17 	ldw	r2,-12(fp)
1000557c:	10800044 	addi	r2,r2,1
10005580:	e0bffd15 	stw	r2,-12(fp)
10005584:	00840034 	movhi	r2,4096
10005588:	109e5604 	addi	r2,r2,31064
1000558c:	10800017 	ldw	r2,0(r2)
10005590:	1007883a 	mov	r3,r2
10005594:	e0bffd17 	ldw	r2,-12(fp)
10005598:	18bfd72e 	bgeu	r3,r2,100054f8 <__alt_data_end+0xf80054f8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000559c:	0005883a 	mov	r2,zero
}
100055a0:	e6ffff04 	addi	sp,fp,-4
100055a4:	dfc00217 	ldw	ra,8(sp)
100055a8:	df000117 	ldw	fp,4(sp)
100055ac:	dc000017 	ldw	r16,0(sp)
100055b0:	dec00304 	addi	sp,sp,12
100055b4:	f800283a 	ret

100055b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100055b8:	defff604 	addi	sp,sp,-40
100055bc:	dfc00915 	stw	ra,36(sp)
100055c0:	df000815 	stw	fp,32(sp)
100055c4:	df000804 	addi	fp,sp,32
100055c8:	e13ffd15 	stw	r4,-12(fp)
100055cc:	e17ffe15 	stw	r5,-8(fp)
100055d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100055d4:	00bfffc4 	movi	r2,-1
100055d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100055dc:	00bffb44 	movi	r2,-19
100055e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100055e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100055e8:	e13ffd17 	ldw	r4,-12(fp)
100055ec:	01440034 	movhi	r5,4096
100055f0:	295e5404 	addi	r5,r5,31056
100055f4:	00059540 	call	10005954 <alt_find_dev>
100055f8:	e0bff815 	stw	r2,-32(fp)
100055fc:	e0bff817 	ldw	r2,-32(fp)
10005600:	1000051e 	bne	r2,zero,10005618 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10005604:	e13ffd17 	ldw	r4,-12(fp)
10005608:	00059e40 	call	100059e4 <alt_find_file>
1000560c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10005610:	00800044 	movi	r2,1
10005614:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10005618:	e0bff817 	ldw	r2,-32(fp)
1000561c:	10002b26 	beq	r2,zero,100056cc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10005620:	e13ff817 	ldw	r4,-32(fp)
10005624:	0005af80 	call	10005af8 <alt_get_fd>
10005628:	e0bff915 	stw	r2,-28(fp)
1000562c:	e0bff917 	ldw	r2,-28(fp)
10005630:	1000030e 	bge	r2,zero,10005640 <open+0x88>
    {
      status = index;
10005634:	e0bff917 	ldw	r2,-28(fp)
10005638:	e0bffa15 	stw	r2,-24(fp)
1000563c:	00002506 	br	100056d4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10005640:	e13ff917 	ldw	r4,-28(fp)
10005644:	01400304 	movi	r5,12
10005648:	0002aa00 	call	10002aa0 <__mulsi3>
1000564c:	1007883a 	mov	r3,r2
10005650:	00840034 	movhi	r2,4096
10005654:	109df004 	addi	r2,r2,30656
10005658:	1885883a 	add	r2,r3,r2
1000565c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10005660:	e0fffe17 	ldw	r3,-8(fp)
10005664:	00900034 	movhi	r2,16384
10005668:	10bfffc4 	addi	r2,r2,-1
1000566c:	1886703a 	and	r3,r3,r2
10005670:	e0bffc17 	ldw	r2,-16(fp)
10005674:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10005678:	e0bffb17 	ldw	r2,-20(fp)
1000567c:	1000051e 	bne	r2,zero,10005694 <open+0xdc>
10005680:	e13ffc17 	ldw	r4,-16(fp)
10005684:	00054c40 	call	100054c4 <alt_file_locked>
10005688:	e0bffa15 	stw	r2,-24(fp)
1000568c:	e0bffa17 	ldw	r2,-24(fp)
10005690:	10001016 	blt	r2,zero,100056d4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10005694:	e0bff817 	ldw	r2,-32(fp)
10005698:	10800317 	ldw	r2,12(r2)
1000569c:	10000826 	beq	r2,zero,100056c0 <open+0x108>
100056a0:	e0bff817 	ldw	r2,-32(fp)
100056a4:	10800317 	ldw	r2,12(r2)
100056a8:	e13ffc17 	ldw	r4,-16(fp)
100056ac:	e17ffd17 	ldw	r5,-12(fp)
100056b0:	e1bffe17 	ldw	r6,-8(fp)
100056b4:	e1ffff17 	ldw	r7,-4(fp)
100056b8:	103ee83a 	callr	r2
100056bc:	00000106 	br	100056c4 <open+0x10c>
100056c0:	0005883a 	mov	r2,zero
100056c4:	e0bffa15 	stw	r2,-24(fp)
100056c8:	00000206 	br	100056d4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
100056cc:	00bffb44 	movi	r2,-19
100056d0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100056d4:	e0bffa17 	ldw	r2,-24(fp)
100056d8:	1000090e 	bge	r2,zero,10005700 <open+0x148>
  {
    alt_release_fd (index);  
100056dc:	e13ff917 	ldw	r4,-28(fp)
100056e0:	00057180 	call	10005718 <alt_release_fd>
    ALT_ERRNO = -status;
100056e4:	00054740 	call	10005474 <alt_get_errno>
100056e8:	1007883a 	mov	r3,r2
100056ec:	e0bffa17 	ldw	r2,-24(fp)
100056f0:	0085c83a 	sub	r2,zero,r2
100056f4:	18800015 	stw	r2,0(r3)
    return -1;
100056f8:	00bfffc4 	movi	r2,-1
100056fc:	00000106 	br	10005704 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10005700:	e0bff917 	ldw	r2,-28(fp)
}
10005704:	e037883a 	mov	sp,fp
10005708:	dfc00117 	ldw	ra,4(sp)
1000570c:	df000017 	ldw	fp,0(sp)
10005710:	dec00204 	addi	sp,sp,8
10005714:	f800283a 	ret

10005718 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10005718:	defffc04 	addi	sp,sp,-16
1000571c:	dfc00315 	stw	ra,12(sp)
10005720:	df000215 	stw	fp,8(sp)
10005724:	dc000115 	stw	r16,4(sp)
10005728:	df000204 	addi	fp,sp,8
1000572c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10005730:	e0bffe17 	ldw	r2,-8(fp)
10005734:	108000d0 	cmplti	r2,r2,3
10005738:	1000111e 	bne	r2,zero,10005780 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000573c:	04040034 	movhi	r16,4096
10005740:	841df004 	addi	r16,r16,30656
10005744:	e0bffe17 	ldw	r2,-8(fp)
10005748:	1009883a 	mov	r4,r2
1000574c:	01400304 	movi	r5,12
10005750:	0002aa00 	call	10002aa0 <__mulsi3>
10005754:	8085883a 	add	r2,r16,r2
10005758:	10800204 	addi	r2,r2,8
1000575c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10005760:	04040034 	movhi	r16,4096
10005764:	841df004 	addi	r16,r16,30656
10005768:	e0bffe17 	ldw	r2,-8(fp)
1000576c:	1009883a 	mov	r4,r2
10005770:	01400304 	movi	r5,12
10005774:	0002aa00 	call	10002aa0 <__mulsi3>
10005778:	8085883a 	add	r2,r16,r2
1000577c:	10000015 	stw	zero,0(r2)
  }
}
10005780:	e6ffff04 	addi	sp,fp,-4
10005784:	dfc00217 	ldw	ra,8(sp)
10005788:	df000117 	ldw	fp,4(sp)
1000578c:	dc000017 	ldw	r16,0(sp)
10005790:	dec00304 	addi	sp,sp,12
10005794:	f800283a 	ret

10005798 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10005798:	defffa04 	addi	sp,sp,-24
1000579c:	df000515 	stw	fp,20(sp)
100057a0:	df000504 	addi	fp,sp,20
100057a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100057a8:	0005303a 	rdctl	r2,status
100057ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100057b0:	e0fffc17 	ldw	r3,-16(fp)
100057b4:	00bfff84 	movi	r2,-2
100057b8:	1884703a 	and	r2,r3,r2
100057bc:	1001703a 	wrctl	status,r2
  
  return context;
100057c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100057c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100057c8:	e0bfff17 	ldw	r2,-4(fp)
100057cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100057d0:	e0bffd17 	ldw	r2,-12(fp)
100057d4:	10800017 	ldw	r2,0(r2)
100057d8:	e0fffd17 	ldw	r3,-12(fp)
100057dc:	18c00117 	ldw	r3,4(r3)
100057e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100057e4:	e0bffd17 	ldw	r2,-12(fp)
100057e8:	10800117 	ldw	r2,4(r2)
100057ec:	e0fffd17 	ldw	r3,-12(fp)
100057f0:	18c00017 	ldw	r3,0(r3)
100057f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100057f8:	e0bffd17 	ldw	r2,-12(fp)
100057fc:	e0fffd17 	ldw	r3,-12(fp)
10005800:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10005804:	e0bffd17 	ldw	r2,-12(fp)
10005808:	e0fffd17 	ldw	r3,-12(fp)
1000580c:	10c00015 	stw	r3,0(r2)
10005810:	e0bffb17 	ldw	r2,-20(fp)
10005814:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10005818:	e0bffe17 	ldw	r2,-8(fp)
1000581c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10005820:	e037883a 	mov	sp,fp
10005824:	df000017 	ldw	fp,0(sp)
10005828:	dec00104 	addi	sp,sp,4
1000582c:	f800283a 	ret

10005830 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10005830:	defffb04 	addi	sp,sp,-20
10005834:	dfc00415 	stw	ra,16(sp)
10005838:	df000315 	stw	fp,12(sp)
1000583c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10005840:	d0a00917 	ldw	r2,-32732(gp)
10005844:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10005848:	d0a5b817 	ldw	r2,-26912(gp)
1000584c:	10800044 	addi	r2,r2,1
10005850:	d0a5b815 	stw	r2,-26912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005854:	00002e06 	br	10005910 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10005858:	e0bffd17 	ldw	r2,-12(fp)
1000585c:	10800017 	ldw	r2,0(r2)
10005860:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10005864:	e0bffd17 	ldw	r2,-12(fp)
10005868:	10800403 	ldbu	r2,16(r2)
1000586c:	10803fcc 	andi	r2,r2,255
10005870:	10000426 	beq	r2,zero,10005884 <alt_tick+0x54>
10005874:	d0a5b817 	ldw	r2,-26912(gp)
10005878:	1000021e 	bne	r2,zero,10005884 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000587c:	e0bffd17 	ldw	r2,-12(fp)
10005880:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10005884:	e0bffd17 	ldw	r2,-12(fp)
10005888:	10800217 	ldw	r2,8(r2)
1000588c:	d0e5b817 	ldw	r3,-26912(gp)
10005890:	18801d36 	bltu	r3,r2,10005908 <alt_tick+0xd8>
10005894:	e0bffd17 	ldw	r2,-12(fp)
10005898:	10800403 	ldbu	r2,16(r2)
1000589c:	10803fcc 	andi	r2,r2,255
100058a0:	1000191e 	bne	r2,zero,10005908 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100058a4:	e0bffd17 	ldw	r2,-12(fp)
100058a8:	10800317 	ldw	r2,12(r2)
100058ac:	e0fffd17 	ldw	r3,-12(fp)
100058b0:	18c00517 	ldw	r3,20(r3)
100058b4:	1809883a 	mov	r4,r3
100058b8:	103ee83a 	callr	r2
100058bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100058c0:	e0bfff17 	ldw	r2,-4(fp)
100058c4:	1000031e 	bne	r2,zero,100058d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100058c8:	e13ffd17 	ldw	r4,-12(fp)
100058cc:	00057980 	call	10005798 <alt_alarm_stop>
100058d0:	00000d06 	br	10005908 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100058d4:	e0bffd17 	ldw	r2,-12(fp)
100058d8:	10c00217 	ldw	r3,8(r2)
100058dc:	e0bfff17 	ldw	r2,-4(fp)
100058e0:	1887883a 	add	r3,r3,r2
100058e4:	e0bffd17 	ldw	r2,-12(fp)
100058e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100058ec:	e0bffd17 	ldw	r2,-12(fp)
100058f0:	10c00217 	ldw	r3,8(r2)
100058f4:	d0a5b817 	ldw	r2,-26912(gp)
100058f8:	1880032e 	bgeu	r3,r2,10005908 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100058fc:	e0bffd17 	ldw	r2,-12(fp)
10005900:	00c00044 	movi	r3,1
10005904:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10005908:	e0bffe17 	ldw	r2,-8(fp)
1000590c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005910:	e0fffd17 	ldw	r3,-12(fp)
10005914:	d0a00904 	addi	r2,gp,-32732
10005918:	18bfcf1e 	bne	r3,r2,10005858 <__alt_data_end+0xf8005858>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000591c:	0001883a 	nop
}
10005920:	e037883a 	mov	sp,fp
10005924:	dfc00117 	ldw	ra,4(sp)
10005928:	df000017 	ldw	fp,0(sp)
1000592c:	dec00204 	addi	sp,sp,8
10005930:	f800283a 	ret

10005934 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10005934:	deffff04 	addi	sp,sp,-4
10005938:	df000015 	stw	fp,0(sp)
1000593c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10005940:	000170fa 	wrctl	ienable,zero
}
10005944:	e037883a 	mov	sp,fp
10005948:	df000017 	ldw	fp,0(sp)
1000594c:	dec00104 	addi	sp,sp,4
10005950:	f800283a 	ret

10005954 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10005954:	defffa04 	addi	sp,sp,-24
10005958:	dfc00515 	stw	ra,20(sp)
1000595c:	df000415 	stw	fp,16(sp)
10005960:	df000404 	addi	fp,sp,16
10005964:	e13ffe15 	stw	r4,-8(fp)
10005968:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000596c:	e0bfff17 	ldw	r2,-4(fp)
10005970:	10800017 	ldw	r2,0(r2)
10005974:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10005978:	e13ffe17 	ldw	r4,-8(fp)
1000597c:	0005e680 	call	10005e68 <strlen>
10005980:	10800044 	addi	r2,r2,1
10005984:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005988:	00000d06 	br	100059c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000598c:	e0bffc17 	ldw	r2,-16(fp)
10005990:	10c00217 	ldw	r3,8(r2)
10005994:	e0bffd17 	ldw	r2,-12(fp)
10005998:	1809883a 	mov	r4,r3
1000599c:	e17ffe17 	ldw	r5,-8(fp)
100059a0:	100d883a 	mov	r6,r2
100059a4:	0005cb40 	call	10005cb4 <memcmp>
100059a8:	1000021e 	bne	r2,zero,100059b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100059ac:	e0bffc17 	ldw	r2,-16(fp)
100059b0:	00000706 	br	100059d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100059b4:	e0bffc17 	ldw	r2,-16(fp)
100059b8:	10800017 	ldw	r2,0(r2)
100059bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100059c0:	e0fffc17 	ldw	r3,-16(fp)
100059c4:	e0bfff17 	ldw	r2,-4(fp)
100059c8:	18bff01e 	bne	r3,r2,1000598c <__alt_data_end+0xf800598c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100059cc:	0005883a 	mov	r2,zero
}
100059d0:	e037883a 	mov	sp,fp
100059d4:	dfc00117 	ldw	ra,4(sp)
100059d8:	df000017 	ldw	fp,0(sp)
100059dc:	dec00204 	addi	sp,sp,8
100059e0:	f800283a 	ret

100059e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100059e4:	defffb04 	addi	sp,sp,-20
100059e8:	dfc00415 	stw	ra,16(sp)
100059ec:	df000315 	stw	fp,12(sp)
100059f0:	df000304 	addi	fp,sp,12
100059f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100059f8:	00840034 	movhi	r2,4096
100059fc:	109e5204 	addi	r2,r2,31048
10005a00:	10800017 	ldw	r2,0(r2)
10005a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005a08:	00003106 	br	10005ad0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10005a0c:	e0bffd17 	ldw	r2,-12(fp)
10005a10:	10800217 	ldw	r2,8(r2)
10005a14:	1009883a 	mov	r4,r2
10005a18:	0005e680 	call	10005e68 <strlen>
10005a1c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10005a20:	e0bffd17 	ldw	r2,-12(fp)
10005a24:	10c00217 	ldw	r3,8(r2)
10005a28:	e0bffe17 	ldw	r2,-8(fp)
10005a2c:	10bfffc4 	addi	r2,r2,-1
10005a30:	1885883a 	add	r2,r3,r2
10005a34:	10800003 	ldbu	r2,0(r2)
10005a38:	10803fcc 	andi	r2,r2,255
10005a3c:	1080201c 	xori	r2,r2,128
10005a40:	10bfe004 	addi	r2,r2,-128
10005a44:	10800bd8 	cmpnei	r2,r2,47
10005a48:	1000031e 	bne	r2,zero,10005a58 <alt_find_file+0x74>
    {
      len -= 1;
10005a4c:	e0bffe17 	ldw	r2,-8(fp)
10005a50:	10bfffc4 	addi	r2,r2,-1
10005a54:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005a58:	e0bffe17 	ldw	r2,-8(fp)
10005a5c:	e0ffff17 	ldw	r3,-4(fp)
10005a60:	1885883a 	add	r2,r3,r2
10005a64:	10800003 	ldbu	r2,0(r2)
10005a68:	10803fcc 	andi	r2,r2,255
10005a6c:	1080201c 	xori	r2,r2,128
10005a70:	10bfe004 	addi	r2,r2,-128
10005a74:	10800be0 	cmpeqi	r2,r2,47
10005a78:	1000081e 	bne	r2,zero,10005a9c <alt_find_file+0xb8>
10005a7c:	e0bffe17 	ldw	r2,-8(fp)
10005a80:	e0ffff17 	ldw	r3,-4(fp)
10005a84:	1885883a 	add	r2,r3,r2
10005a88:	10800003 	ldbu	r2,0(r2)
10005a8c:	10803fcc 	andi	r2,r2,255
10005a90:	1080201c 	xori	r2,r2,128
10005a94:	10bfe004 	addi	r2,r2,-128
10005a98:	10000a1e 	bne	r2,zero,10005ac4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10005a9c:	e0bffd17 	ldw	r2,-12(fp)
10005aa0:	10c00217 	ldw	r3,8(r2)
10005aa4:	e0bffe17 	ldw	r2,-8(fp)
10005aa8:	1809883a 	mov	r4,r3
10005aac:	e17fff17 	ldw	r5,-4(fp)
10005ab0:	100d883a 	mov	r6,r2
10005ab4:	0005cb40 	call	10005cb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005ab8:	1000021e 	bne	r2,zero,10005ac4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10005abc:	e0bffd17 	ldw	r2,-12(fp)
10005ac0:	00000806 	br	10005ae4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10005ac4:	e0bffd17 	ldw	r2,-12(fp)
10005ac8:	10800017 	ldw	r2,0(r2)
10005acc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005ad0:	e0fffd17 	ldw	r3,-12(fp)
10005ad4:	00840034 	movhi	r2,4096
10005ad8:	109e5204 	addi	r2,r2,31048
10005adc:	18bfcb1e 	bne	r3,r2,10005a0c <__alt_data_end+0xf8005a0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10005ae0:	0005883a 	mov	r2,zero
}
10005ae4:	e037883a 	mov	sp,fp
10005ae8:	dfc00117 	ldw	ra,4(sp)
10005aec:	df000017 	ldw	fp,0(sp)
10005af0:	dec00204 	addi	sp,sp,8
10005af4:	f800283a 	ret

10005af8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10005af8:	defffa04 	addi	sp,sp,-24
10005afc:	dfc00515 	stw	ra,20(sp)
10005b00:	df000415 	stw	fp,16(sp)
10005b04:	dc000315 	stw	r16,12(sp)
10005b08:	df000404 	addi	fp,sp,16
10005b0c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10005b10:	00bffa04 	movi	r2,-24
10005b14:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005b18:	e03ffc15 	stw	zero,-16(fp)
10005b1c:	00002106 	br	10005ba4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10005b20:	04040034 	movhi	r16,4096
10005b24:	841df004 	addi	r16,r16,30656
10005b28:	e0bffc17 	ldw	r2,-16(fp)
10005b2c:	1009883a 	mov	r4,r2
10005b30:	01400304 	movi	r5,12
10005b34:	0002aa00 	call	10002aa0 <__mulsi3>
10005b38:	8085883a 	add	r2,r16,r2
10005b3c:	10800017 	ldw	r2,0(r2)
10005b40:	1000151e 	bne	r2,zero,10005b98 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10005b44:	04040034 	movhi	r16,4096
10005b48:	841df004 	addi	r16,r16,30656
10005b4c:	e0bffc17 	ldw	r2,-16(fp)
10005b50:	1009883a 	mov	r4,r2
10005b54:	01400304 	movi	r5,12
10005b58:	0002aa00 	call	10002aa0 <__mulsi3>
10005b5c:	8085883a 	add	r2,r16,r2
10005b60:	e0fffe17 	ldw	r3,-8(fp)
10005b64:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10005b68:	00840034 	movhi	r2,4096
10005b6c:	109e5604 	addi	r2,r2,31064
10005b70:	10c00017 	ldw	r3,0(r2)
10005b74:	e0bffc17 	ldw	r2,-16(fp)
10005b78:	1880040e 	bge	r3,r2,10005b8c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10005b7c:	00840034 	movhi	r2,4096
10005b80:	109e5604 	addi	r2,r2,31064
10005b84:	e0fffc17 	ldw	r3,-16(fp)
10005b88:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10005b8c:	e0bffc17 	ldw	r2,-16(fp)
10005b90:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005b94:	00000606 	br	10005bb0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005b98:	e0bffc17 	ldw	r2,-16(fp)
10005b9c:	10800044 	addi	r2,r2,1
10005ba0:	e0bffc15 	stw	r2,-16(fp)
10005ba4:	e0bffc17 	ldw	r2,-16(fp)
10005ba8:	10800810 	cmplti	r2,r2,32
10005bac:	103fdc1e 	bne	r2,zero,10005b20 <__alt_data_end+0xf8005b20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10005bb0:	e0bffd17 	ldw	r2,-12(fp)
}
10005bb4:	e6ffff04 	addi	sp,fp,-4
10005bb8:	dfc00217 	ldw	ra,8(sp)
10005bbc:	df000117 	ldw	fp,4(sp)
10005bc0:	dc000017 	ldw	r16,0(sp)
10005bc4:	dec00304 	addi	sp,sp,12
10005bc8:	f800283a 	ret

10005bcc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10005bcc:	defffe04 	addi	sp,sp,-8
10005bd0:	df000115 	stw	fp,4(sp)
10005bd4:	df000104 	addi	fp,sp,4
10005bd8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10005bdc:	e0bfff17 	ldw	r2,-4(fp)
10005be0:	10bffe84 	addi	r2,r2,-6
10005be4:	10c00428 	cmpgeui	r3,r2,16
10005be8:	18001a1e 	bne	r3,zero,10005c54 <alt_exception_cause_generated_bad_addr+0x88>
10005bec:	100690ba 	slli	r3,r2,2
10005bf0:	00840034 	movhi	r2,4096
10005bf4:	10970104 	addi	r2,r2,23556
10005bf8:	1885883a 	add	r2,r3,r2
10005bfc:	10800017 	ldw	r2,0(r2)
10005c00:	1000683a 	jmp	r2
10005c04:	10005c44 	addi	zero,r2,369
10005c08:	10005c44 	addi	zero,r2,369
10005c0c:	10005c54 	ori	zero,r2,369
10005c10:	10005c54 	ori	zero,r2,369
10005c14:	10005c54 	ori	zero,r2,369
10005c18:	10005c44 	addi	zero,r2,369
10005c1c:	10005c4c 	andi	zero,r2,369
10005c20:	10005c54 	ori	zero,r2,369
10005c24:	10005c44 	addi	zero,r2,369
10005c28:	10005c44 	addi	zero,r2,369
10005c2c:	10005c54 	ori	zero,r2,369
10005c30:	10005c44 	addi	zero,r2,369
10005c34:	10005c4c 	andi	zero,r2,369
10005c38:	10005c54 	ori	zero,r2,369
10005c3c:	10005c54 	ori	zero,r2,369
10005c40:	10005c44 	addi	zero,r2,369
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10005c44:	00800044 	movi	r2,1
10005c48:	00000306 	br	10005c58 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10005c4c:	0005883a 	mov	r2,zero
10005c50:	00000106 	br	10005c58 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10005c54:	0005883a 	mov	r2,zero
  }
}
10005c58:	e037883a 	mov	sp,fp
10005c5c:	df000017 	ldw	fp,0(sp)
10005c60:	dec00104 	addi	sp,sp,4
10005c64:	f800283a 	ret

10005c68 <atexit>:
10005c68:	200b883a 	mov	r5,r4
10005c6c:	000d883a 	mov	r6,zero
10005c70:	0009883a 	mov	r4,zero
10005c74:	000f883a 	mov	r7,zero
10005c78:	0005f001 	jmpi	10005f00 <__register_exitproc>

10005c7c <exit>:
10005c7c:	defffe04 	addi	sp,sp,-8
10005c80:	000b883a 	mov	r5,zero
10005c84:	dc000015 	stw	r16,0(sp)
10005c88:	dfc00115 	stw	ra,4(sp)
10005c8c:	2021883a 	mov	r16,r4
10005c90:	00060140 	call	10006014 <__call_exitprocs>
10005c94:	00840034 	movhi	r2,4096
10005c98:	109e5004 	addi	r2,r2,31040
10005c9c:	11000017 	ldw	r4,0(r2)
10005ca0:	20800f17 	ldw	r2,60(r4)
10005ca4:	10000126 	beq	r2,zero,10005cac <exit+0x30>
10005ca8:	103ee83a 	callr	r2
10005cac:	8009883a 	mov	r4,r16
10005cb0:	00061a80 	call	100061a8 <_exit>

10005cb4 <memcmp>:
10005cb4:	01c000c4 	movi	r7,3
10005cb8:	3980192e 	bgeu	r7,r6,10005d20 <memcmp+0x6c>
10005cbc:	2144b03a 	or	r2,r4,r5
10005cc0:	11c4703a 	and	r2,r2,r7
10005cc4:	10000f26 	beq	r2,zero,10005d04 <memcmp+0x50>
10005cc8:	20800003 	ldbu	r2,0(r4)
10005ccc:	28c00003 	ldbu	r3,0(r5)
10005cd0:	10c0151e 	bne	r2,r3,10005d28 <memcmp+0x74>
10005cd4:	31bfff84 	addi	r6,r6,-2
10005cd8:	01ffffc4 	movi	r7,-1
10005cdc:	00000406 	br	10005cf0 <memcmp+0x3c>
10005ce0:	20800003 	ldbu	r2,0(r4)
10005ce4:	28c00003 	ldbu	r3,0(r5)
10005ce8:	31bfffc4 	addi	r6,r6,-1
10005cec:	10c00e1e 	bne	r2,r3,10005d28 <memcmp+0x74>
10005cf0:	21000044 	addi	r4,r4,1
10005cf4:	29400044 	addi	r5,r5,1
10005cf8:	31fff91e 	bne	r6,r7,10005ce0 <__alt_data_end+0xf8005ce0>
10005cfc:	0005883a 	mov	r2,zero
10005d00:	f800283a 	ret
10005d04:	20c00017 	ldw	r3,0(r4)
10005d08:	28800017 	ldw	r2,0(r5)
10005d0c:	1880041e 	bne	r3,r2,10005d20 <memcmp+0x6c>
10005d10:	31bfff04 	addi	r6,r6,-4
10005d14:	21000104 	addi	r4,r4,4
10005d18:	29400104 	addi	r5,r5,4
10005d1c:	39bff936 	bltu	r7,r6,10005d04 <__alt_data_end+0xf8005d04>
10005d20:	303fe91e 	bne	r6,zero,10005cc8 <__alt_data_end+0xf8005cc8>
10005d24:	003ff506 	br	10005cfc <__alt_data_end+0xf8005cfc>
10005d28:	10c5c83a 	sub	r2,r2,r3
10005d2c:	f800283a 	ret

10005d30 <memcpy>:
10005d30:	deffff04 	addi	sp,sp,-4
10005d34:	dc000015 	stw	r16,0(sp)
10005d38:	00c003c4 	movi	r3,15
10005d3c:	2005883a 	mov	r2,r4
10005d40:	1980432e 	bgeu	r3,r6,10005e50 <memcpy+0x120>
10005d44:	2146b03a 	or	r3,r4,r5
10005d48:	18c000cc 	andi	r3,r3,3
10005d4c:	1800421e 	bne	r3,zero,10005e58 <memcpy+0x128>
10005d50:	343ffc04 	addi	r16,r6,-16
10005d54:	8020d13a 	srli	r16,r16,4
10005d58:	28c00104 	addi	r3,r5,4
10005d5c:	23400104 	addi	r13,r4,4
10005d60:	801e913a 	slli	r15,r16,4
10005d64:	2b000204 	addi	r12,r5,8
10005d68:	22c00204 	addi	r11,r4,8
10005d6c:	7bc00504 	addi	r15,r15,20
10005d70:	2a800304 	addi	r10,r5,12
10005d74:	22400304 	addi	r9,r4,12
10005d78:	2bdf883a 	add	r15,r5,r15
10005d7c:	2811883a 	mov	r8,r5
10005d80:	200f883a 	mov	r7,r4
10005d84:	41000017 	ldw	r4,0(r8)
10005d88:	39c00404 	addi	r7,r7,16
10005d8c:	18c00404 	addi	r3,r3,16
10005d90:	393ffc15 	stw	r4,-16(r7)
10005d94:	1bbffc17 	ldw	r14,-16(r3)
10005d98:	6b400404 	addi	r13,r13,16
10005d9c:	5ac00404 	addi	r11,r11,16
10005da0:	6bbffc15 	stw	r14,-16(r13)
10005da4:	63800017 	ldw	r14,0(r12)
10005da8:	4a400404 	addi	r9,r9,16
10005dac:	42000404 	addi	r8,r8,16
10005db0:	5bbffc15 	stw	r14,-16(r11)
10005db4:	53800017 	ldw	r14,0(r10)
10005db8:	63000404 	addi	r12,r12,16
10005dbc:	52800404 	addi	r10,r10,16
10005dc0:	4bbffc15 	stw	r14,-16(r9)
10005dc4:	1bffef1e 	bne	r3,r15,10005d84 <__alt_data_end+0xf8005d84>
10005dc8:	81c00044 	addi	r7,r16,1
10005dcc:	380e913a 	slli	r7,r7,4
10005dd0:	310003cc 	andi	r4,r6,15
10005dd4:	02c000c4 	movi	r11,3
10005dd8:	11c7883a 	add	r3,r2,r7
10005ddc:	29cb883a 	add	r5,r5,r7
10005de0:	59001f2e 	bgeu	r11,r4,10005e60 <memcpy+0x130>
10005de4:	1813883a 	mov	r9,r3
10005de8:	2811883a 	mov	r8,r5
10005dec:	200f883a 	mov	r7,r4
10005df0:	42800017 	ldw	r10,0(r8)
10005df4:	4a400104 	addi	r9,r9,4
10005df8:	39ffff04 	addi	r7,r7,-4
10005dfc:	4abfff15 	stw	r10,-4(r9)
10005e00:	42000104 	addi	r8,r8,4
10005e04:	59fffa36 	bltu	r11,r7,10005df0 <__alt_data_end+0xf8005df0>
10005e08:	213fff04 	addi	r4,r4,-4
10005e0c:	2008d0ba 	srli	r4,r4,2
10005e10:	318000cc 	andi	r6,r6,3
10005e14:	21000044 	addi	r4,r4,1
10005e18:	2109883a 	add	r4,r4,r4
10005e1c:	2109883a 	add	r4,r4,r4
10005e20:	1907883a 	add	r3,r3,r4
10005e24:	290b883a 	add	r5,r5,r4
10005e28:	30000626 	beq	r6,zero,10005e44 <memcpy+0x114>
10005e2c:	198d883a 	add	r6,r3,r6
10005e30:	29c00003 	ldbu	r7,0(r5)
10005e34:	18c00044 	addi	r3,r3,1
10005e38:	29400044 	addi	r5,r5,1
10005e3c:	19ffffc5 	stb	r7,-1(r3)
10005e40:	19bffb1e 	bne	r3,r6,10005e30 <__alt_data_end+0xf8005e30>
10005e44:	dc000017 	ldw	r16,0(sp)
10005e48:	dec00104 	addi	sp,sp,4
10005e4c:	f800283a 	ret
10005e50:	2007883a 	mov	r3,r4
10005e54:	003ff406 	br	10005e28 <__alt_data_end+0xf8005e28>
10005e58:	2007883a 	mov	r3,r4
10005e5c:	003ff306 	br	10005e2c <__alt_data_end+0xf8005e2c>
10005e60:	200d883a 	mov	r6,r4
10005e64:	003ff006 	br	10005e28 <__alt_data_end+0xf8005e28>

10005e68 <strlen>:
10005e68:	208000cc 	andi	r2,r4,3
10005e6c:	10002026 	beq	r2,zero,10005ef0 <strlen+0x88>
10005e70:	20800007 	ldb	r2,0(r4)
10005e74:	10002026 	beq	r2,zero,10005ef8 <strlen+0x90>
10005e78:	2005883a 	mov	r2,r4
10005e7c:	00000206 	br	10005e88 <strlen+0x20>
10005e80:	10c00007 	ldb	r3,0(r2)
10005e84:	18001826 	beq	r3,zero,10005ee8 <strlen+0x80>
10005e88:	10800044 	addi	r2,r2,1
10005e8c:	10c000cc 	andi	r3,r2,3
10005e90:	183ffb1e 	bne	r3,zero,10005e80 <__alt_data_end+0xf8005e80>
10005e94:	10c00017 	ldw	r3,0(r2)
10005e98:	01ffbff4 	movhi	r7,65279
10005e9c:	39ffbfc4 	addi	r7,r7,-257
10005ea0:	00ca303a 	nor	r5,zero,r3
10005ea4:	01a02074 	movhi	r6,32897
10005ea8:	19c7883a 	add	r3,r3,r7
10005eac:	31a02004 	addi	r6,r6,-32640
10005eb0:	1946703a 	and	r3,r3,r5
10005eb4:	1986703a 	and	r3,r3,r6
10005eb8:	1800091e 	bne	r3,zero,10005ee0 <strlen+0x78>
10005ebc:	10800104 	addi	r2,r2,4
10005ec0:	10c00017 	ldw	r3,0(r2)
10005ec4:	19cb883a 	add	r5,r3,r7
10005ec8:	00c6303a 	nor	r3,zero,r3
10005ecc:	28c6703a 	and	r3,r5,r3
10005ed0:	1986703a 	and	r3,r3,r6
10005ed4:	183ff926 	beq	r3,zero,10005ebc <__alt_data_end+0xf8005ebc>
10005ed8:	00000106 	br	10005ee0 <strlen+0x78>
10005edc:	10800044 	addi	r2,r2,1
10005ee0:	10c00007 	ldb	r3,0(r2)
10005ee4:	183ffd1e 	bne	r3,zero,10005edc <__alt_data_end+0xf8005edc>
10005ee8:	1105c83a 	sub	r2,r2,r4
10005eec:	f800283a 	ret
10005ef0:	2005883a 	mov	r2,r4
10005ef4:	003fe706 	br	10005e94 <__alt_data_end+0xf8005e94>
10005ef8:	0005883a 	mov	r2,zero
10005efc:	f800283a 	ret

10005f00 <__register_exitproc>:
10005f00:	00840034 	movhi	r2,4096
10005f04:	defffa04 	addi	sp,sp,-24
10005f08:	109e5004 	addi	r2,r2,31040
10005f0c:	dc000315 	stw	r16,12(sp)
10005f10:	14000017 	ldw	r16,0(r2)
10005f14:	dc400415 	stw	r17,16(sp)
10005f18:	dfc00515 	stw	ra,20(sp)
10005f1c:	80805217 	ldw	r2,328(r16)
10005f20:	2023883a 	mov	r17,r4
10005f24:	10003626 	beq	r2,zero,10006000 <__register_exitproc+0x100>
10005f28:	10c00117 	ldw	r3,4(r2)
10005f2c:	010007c4 	movi	r4,31
10005f30:	20c00e16 	blt	r4,r3,10005f6c <__register_exitproc+0x6c>
10005f34:	1a400044 	addi	r9,r3,1
10005f38:	8800211e 	bne	r17,zero,10005fc0 <__register_exitproc+0xc0>
10005f3c:	18c00084 	addi	r3,r3,2
10005f40:	18c7883a 	add	r3,r3,r3
10005f44:	18c7883a 	add	r3,r3,r3
10005f48:	12400115 	stw	r9,4(r2)
10005f4c:	10c7883a 	add	r3,r2,r3
10005f50:	19400015 	stw	r5,0(r3)
10005f54:	0005883a 	mov	r2,zero
10005f58:	dfc00517 	ldw	ra,20(sp)
10005f5c:	dc400417 	ldw	r17,16(sp)
10005f60:	dc000317 	ldw	r16,12(sp)
10005f64:	dec00604 	addi	sp,sp,24
10005f68:	f800283a 	ret
10005f6c:	00800034 	movhi	r2,0
10005f70:	10800004 	addi	r2,r2,0
10005f74:	10002526 	beq	r2,zero,1000600c <__register_exitproc+0x10c>
10005f78:	01006404 	movi	r4,400
10005f7c:	d9400015 	stw	r5,0(sp)
10005f80:	d9800115 	stw	r6,4(sp)
10005f84:	d9c00215 	stw	r7,8(sp)
10005f88:	00000000 	call	10000000 <__alt_mem_sdram>
10005f8c:	d9400017 	ldw	r5,0(sp)
10005f90:	d9800117 	ldw	r6,4(sp)
10005f94:	d9c00217 	ldw	r7,8(sp)
10005f98:	10001c26 	beq	r2,zero,1000600c <__register_exitproc+0x10c>
10005f9c:	80c05217 	ldw	r3,328(r16)
10005fa0:	10000115 	stw	zero,4(r2)
10005fa4:	02400044 	movi	r9,1
10005fa8:	10c00015 	stw	r3,0(r2)
10005fac:	80805215 	stw	r2,328(r16)
10005fb0:	10006215 	stw	zero,392(r2)
10005fb4:	10006315 	stw	zero,396(r2)
10005fb8:	0007883a 	mov	r3,zero
10005fbc:	883fdf26 	beq	r17,zero,10005f3c <__alt_data_end+0xf8005f3c>
10005fc0:	18d1883a 	add	r8,r3,r3
10005fc4:	4211883a 	add	r8,r8,r8
10005fc8:	1211883a 	add	r8,r2,r8
10005fcc:	41802215 	stw	r6,136(r8)
10005fd0:	01000044 	movi	r4,1
10005fd4:	11806217 	ldw	r6,392(r2)
10005fd8:	20c8983a 	sll	r4,r4,r3
10005fdc:	310cb03a 	or	r6,r6,r4
10005fe0:	11806215 	stw	r6,392(r2)
10005fe4:	41c04215 	stw	r7,264(r8)
10005fe8:	01800084 	movi	r6,2
10005fec:	89bfd31e 	bne	r17,r6,10005f3c <__alt_data_end+0xf8005f3c>
10005ff0:	11806317 	ldw	r6,396(r2)
10005ff4:	3108b03a 	or	r4,r6,r4
10005ff8:	11006315 	stw	r4,396(r2)
10005ffc:	003fcf06 	br	10005f3c <__alt_data_end+0xf8005f3c>
10006000:	80805304 	addi	r2,r16,332
10006004:	80805215 	stw	r2,328(r16)
10006008:	003fc706 	br	10005f28 <__alt_data_end+0xf8005f28>
1000600c:	00bfffc4 	movi	r2,-1
10006010:	003fd106 	br	10005f58 <__alt_data_end+0xf8005f58>

10006014 <__call_exitprocs>:
10006014:	00840034 	movhi	r2,4096
10006018:	109e5004 	addi	r2,r2,31040
1000601c:	10800017 	ldw	r2,0(r2)
10006020:	defff404 	addi	sp,sp,-48
10006024:	dd800815 	stw	r22,32(sp)
10006028:	d8800015 	stw	r2,0(sp)
1000602c:	10805204 	addi	r2,r2,328
10006030:	dd000615 	stw	r20,24(sp)
10006034:	dc800415 	stw	r18,16(sp)
10006038:	dfc00b15 	stw	ra,44(sp)
1000603c:	df000a15 	stw	fp,40(sp)
10006040:	ddc00915 	stw	r23,36(sp)
10006044:	dd400715 	stw	r21,28(sp)
10006048:	dcc00515 	stw	r19,20(sp)
1000604c:	dc400315 	stw	r17,12(sp)
10006050:	dc000215 	stw	r16,8(sp)
10006054:	2025883a 	mov	r18,r4
10006058:	2829883a 	mov	r20,r5
1000605c:	d8800115 	stw	r2,4(sp)
10006060:	05bfffc4 	movi	r22,-1
10006064:	d8800017 	ldw	r2,0(sp)
10006068:	14c05217 	ldw	r19,328(r2)
1000606c:	98001d26 	beq	r19,zero,100060e4 <__call_exitprocs+0xd0>
10006070:	dd400117 	ldw	r21,4(sp)
10006074:	98800117 	ldw	r2,4(r19)
10006078:	173fffc4 	addi	fp,r2,-1
1000607c:	e0000d16 	blt	fp,zero,100060b4 <__call_exitprocs+0xa0>
10006080:	14000044 	addi	r16,r2,1
10006084:	8421883a 	add	r16,r16,r16
10006088:	8421883a 	add	r16,r16,r16
1000608c:	84402004 	addi	r17,r16,128
10006090:	9c63883a 	add	r17,r19,r17
10006094:	9c21883a 	add	r16,r19,r16
10006098:	a0001e26 	beq	r20,zero,10006114 <__call_exitprocs+0x100>
1000609c:	80804017 	ldw	r2,256(r16)
100060a0:	15001c26 	beq	r2,r20,10006114 <__call_exitprocs+0x100>
100060a4:	e73fffc4 	addi	fp,fp,-1
100060a8:	843fff04 	addi	r16,r16,-4
100060ac:	8c7fff04 	addi	r17,r17,-4
100060b0:	e5bff91e 	bne	fp,r22,10006098 <__alt_data_end+0xf8006098>
100060b4:	00800034 	movhi	r2,0
100060b8:	10800004 	addi	r2,r2,0
100060bc:	10000926 	beq	r2,zero,100060e4 <__call_exitprocs+0xd0>
100060c0:	98800117 	ldw	r2,4(r19)
100060c4:	1000311e 	bne	r2,zero,1000618c <__call_exitprocs+0x178>
100060c8:	98800017 	ldw	r2,0(r19)
100060cc:	10003426 	beq	r2,zero,100061a0 <__call_exitprocs+0x18c>
100060d0:	9809883a 	mov	r4,r19
100060d4:	a8800015 	stw	r2,0(r21)
100060d8:	00000000 	call	10000000 <__alt_mem_sdram>
100060dc:	acc00017 	ldw	r19,0(r21)
100060e0:	983fe41e 	bne	r19,zero,10006074 <__alt_data_end+0xf8006074>
100060e4:	dfc00b17 	ldw	ra,44(sp)
100060e8:	df000a17 	ldw	fp,40(sp)
100060ec:	ddc00917 	ldw	r23,36(sp)
100060f0:	dd800817 	ldw	r22,32(sp)
100060f4:	dd400717 	ldw	r21,28(sp)
100060f8:	dd000617 	ldw	r20,24(sp)
100060fc:	dcc00517 	ldw	r19,20(sp)
10006100:	dc800417 	ldw	r18,16(sp)
10006104:	dc400317 	ldw	r17,12(sp)
10006108:	dc000217 	ldw	r16,8(sp)
1000610c:	dec00c04 	addi	sp,sp,48
10006110:	f800283a 	ret
10006114:	98800117 	ldw	r2,4(r19)
10006118:	80c00017 	ldw	r3,0(r16)
1000611c:	10bfffc4 	addi	r2,r2,-1
10006120:	17001526 	beq	r2,fp,10006178 <__call_exitprocs+0x164>
10006124:	80000015 	stw	zero,0(r16)
10006128:	183fde26 	beq	r3,zero,100060a4 <__alt_data_end+0xf80060a4>
1000612c:	00800044 	movi	r2,1
10006130:	1708983a 	sll	r4,r2,fp
10006134:	98806217 	ldw	r2,392(r19)
10006138:	9dc00117 	ldw	r23,4(r19)
1000613c:	2084703a 	and	r2,r4,r2
10006140:	1000061e 	bne	r2,zero,1000615c <__call_exitprocs+0x148>
10006144:	183ee83a 	callr	r3
10006148:	98800117 	ldw	r2,4(r19)
1000614c:	15ffc51e 	bne	r2,r23,10006064 <__alt_data_end+0xf8006064>
10006150:	a8800017 	ldw	r2,0(r21)
10006154:	14ffd326 	beq	r2,r19,100060a4 <__alt_data_end+0xf80060a4>
10006158:	003fc206 	br	10006064 <__alt_data_end+0xf8006064>
1000615c:	98806317 	ldw	r2,396(r19)
10006160:	2084703a 	and	r2,r4,r2
10006164:	1000061e 	bne	r2,zero,10006180 <__call_exitprocs+0x16c>
10006168:	89400017 	ldw	r5,0(r17)
1000616c:	9009883a 	mov	r4,r18
10006170:	183ee83a 	callr	r3
10006174:	003ff406 	br	10006148 <__alt_data_end+0xf8006148>
10006178:	9f000115 	stw	fp,4(r19)
1000617c:	003fea06 	br	10006128 <__alt_data_end+0xf8006128>
10006180:	89000017 	ldw	r4,0(r17)
10006184:	183ee83a 	callr	r3
10006188:	003fef06 	br	10006148 <__alt_data_end+0xf8006148>
1000618c:	98800017 	ldw	r2,0(r19)
10006190:	982b883a 	mov	r21,r19
10006194:	1027883a 	mov	r19,r2
10006198:	983fb61e 	bne	r19,zero,10006074 <__alt_data_end+0xf8006074>
1000619c:	003fd106 	br	100060e4 <__alt_data_end+0xf80060e4>
100061a0:	0005883a 	mov	r2,zero
100061a4:	003ffa06 	br	10006190 <__alt_data_end+0xf8006190>

100061a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100061a8:	defffd04 	addi	sp,sp,-12
100061ac:	df000215 	stw	fp,8(sp)
100061b0:	df000204 	addi	fp,sp,8
100061b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100061b8:	0001883a 	nop
100061bc:	e0bfff17 	ldw	r2,-4(fp)
100061c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100061c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100061c8:	10000226 	beq	r2,zero,100061d4 <_exit+0x2c>
    ALT_SIM_FAIL();
100061cc:	002af070 	cmpltui	zero,zero,43969
100061d0:	00000106 	br	100061d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100061d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100061d8:	003fff06 	br	100061d8 <__alt_data_end+0xf80061d8>
