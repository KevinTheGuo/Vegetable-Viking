
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011474 memsz 0x00011474 flags r-x
    LOAD off    0x00012494 vaddr 0x10011494 paddr 0x10012f80 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014a6c vaddr 0x10014a6c paddr 0x10014a6c align 2**12
         filesz 0x00000000 memsz 0x0000039c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010ea8  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c0  100110d4  100110d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011494  10012f80  00012494  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000039c  10014a6c  10014a6c  00014a6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013f80  2**0
                  CONTENTS
  7 .sdram        00000000  10014e08  10014e08  00013f80  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013f80  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d10  00000000  00000000  00013fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000241f9  00000000  00000000  00014cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009117  00000000  00000000  00038eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b359  00000000  00000000  00041fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002204  00000000  00000000  0004d324  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003846  00000000  00000000  0004f528  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00052d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00069c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013c0  00000000  00000000  00069c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006e46e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006e471  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006e47d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006e47e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006e47f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006e483  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006e487  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006e48b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006e496  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006e4a1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006e4ac  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006e4b7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0006e4d1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00072918  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
100110d4 l    d  .rodata	00000000 .rodata
10011494 l    d  .rwdata	00000000 .rwdata
10014a6c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014e08 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002aec l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100112da l     O .rodata	00000010 zeroes.4181
100112ea l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10006400 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007fa8 l     F .text	00000008 __fp_lock
10007fb0 l     F .text	00000008 __fp_unlock
10007fc4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011494 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100118d8 l     O .rwdata	00000020 lc_ctype_charset
100118b8 l     O .rwdata	00000020 lc_message_charset
100118f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1001131c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000b4f4 l     F .text	000000fc __sprint_r.part.0
10011450 l     O .rodata	00000010 blanks.4125
10011440 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e97c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000eaa4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ead0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ebd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ecd4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000edb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ef9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012f70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000f220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f370 l     F .text	00000038 alt_dev_reg
10011ee0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f64c l     F .text	00000204 altera_avalon_jtag_uart_irq
1000f850 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ffcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010464 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100105bc l     F .text	00000050 alt_get_errno
1001060c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10014adc g     O .bss	00000004 alt_instruction_exception_handler
10001d40 g     F .text	00000068 convertDecimalToBinary
1000ab34 g     F .text	00000074 _mprec_log10
1000ac20 g     F .text	0000008c __any_on
1000cf20 g     F .text	00000054 _isatty_r
10011328 g     O .rodata	00000028 __mprec_tinytens
1000eee4 g     F .text	00000078 alt_main
10003fd0 g     F .text	000000b8 _puts_r
10014d08 g     O .bss	00000100 alt_irq
1000cf74 g     F .text	0000005c _lseek_r
10012f80 g       *ABS*	00000000 __flash_rwdata_start
1000de28 g     F .text	00000084 .hidden __eqdf2
10014e08 g       *ABS*	00000000 __alt_heap_start
10003f94 g     F .text	0000003c printf
1000d19c g     F .text	0000009c _wcrtomb_r
10014a6c g     O .bss	00000004 elapsedTime
1000b3ec g     F .text	0000005c __sseek
1000830c g     F .text	00000010 __sinit
1000d02c g     F .text	00000154 __swbuf_r
10008d84 g     F .text	0000007c _setlocale_r
10008164 g     F .text	00000078 __sfmoreglue
1000ef7c g     F .text	00000020 __malloc_unlock
10000e00 g     F .text	000003e4 spawningEngine
100099e4 g     F .text	0000015c memmove
100082f4 g     F .text	00000018 _cleanup
10009c64 g     F .text	000000a8 _Balloc
1000deac g     F .text	000000e0 .hidden __gtdf2
100109fc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10014a70 g     O .bss	00000004 lastPhysixed
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000cec8 g     F .text	00000058 _fstat_r
10014ac0 g     O .bss	00000004 errno
1000b368 g     F .text	00000008 __seofread
10014ac8 g     O .bss	00000004 alt_argv
1001af40 g       *ABS*	00000000 _gp
10014a74 g     O .bss	00000004 yCursor
10011d60 g     O .rwdata	00000180 alt_fd_list
10010a1c g     F .text	00000090 alt_find_dev
100098ac g     F .text	00000138 memcpy
100011e4 g     F .text	000003fc slicingEngine
10007fb8 g     F .text	0000000c _cleanup_r
10003e34 g     F .text	000000d0 .hidden __floatsidf
10010544 g     F .text	00000078 alt_io_redirect
1000df8c g     F .text	000000e0 .hidden __ltdf2
10014a78 g     O .bss	00000004 xCursor
100110d4 g       *ABS*	00000000 __DTOR_END__
10004088 g     F .text	00000014 puts
10010c94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000b24c g     F .text	00000074 __fpclassifyd
1000aa90 g     F .text	000000a4 __ratio
1000ca2c g     F .text	00000024 __vfiprintf_internal
1000fa4c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10003f68 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002c08 g     F .text	00000008 .hidden __udivsi3
1000ec28 g     F .text	000000ac isatty
10011378 g     O .rodata	000000c8 __mprec_tens
10008e00 g     F .text	0000000c __locale_charset
10014abc g     O .bss	00000004 __malloc_top_pad
10012f48 g     O .rwdata	00000004 __mb_cur_max
10008e30 g     F .text	0000000c _localeconv_r
1000a08c g     F .text	0000003c __i2b
10008770 g     F .text	000004a4 __sfvwrite_r
1000b2c0 g     F .text	00000054 _sbrk_r
10014a7c g     O .bss	00000004 cursorClicked
1000cfd0 g     F .text	0000005c _read_r
10012f68 g     O .rwdata	00000004 alt_max_fd
1000cbd8 g     F .text	00000100 _fclose_r
10007f78 g     F .text	00000030 fflush
10014ab8 g     O .bss	00000004 __malloc_max_sbrked_mem
10002c40 g     F .text	0000089c .hidden __adddf3
1000a838 g     F .text	0000011c __b2d
100024d0 g     F .text	0000061c .hidden __umoddi3
1000ee08 g     F .text	000000dc lseek
10012f40 g     O .rwdata	00000004 _global_impure_ptr
1000acac g     F .text	000005a0 _realloc_r
10014e08 g       *ABS*	00000000 __bss_end
10010374 g     F .text	000000f0 alt_iic_isr_register
10014b08 g     O .bss	00000200 veggieObject
100108f8 g     F .text	00000104 alt_tick
10014a80 g     O .bss	00000004 cursorStreak
10001e90 g     F .text	00000640 .hidden __udivdi3
1000ccec g     F .text	00000184 _fputwc_r
10011350 g     O .rodata	00000028 __mprec_bigtens
10009e70 g     F .text	00000104 __s2b
1000e8d8 g     F .text	000000a4 .hidden __floatunsidf
1000a5e0 g     F .text	00000060 __mcmp
10014a84 g     O .bss	00000004 lastSpawned
1000832c g     F .text	00000018 __fp_lock_all
10010328 g     F .text	0000004c alt_ic_irq_enabled
10010860 g     F .text	00000098 alt_alarm_stop
10000660 g     F .text	00000454 statusEngine
10014ad0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10011d38 g     O .rwdata	00000028 alt_dev_null
10001c28 g     F .text	00000118 port2Unpackager
1000ffb0 g     F .text	0000001c alt_dcache_flush_all
10009f74 g     F .text	00000068 __hi0bits
10003dac g     F .text	00000088 .hidden __fixdfsi
10012f80 g       *ABS*	00000000 __ram_rwdata_end
10012f60 g     O .rwdata	00000008 alt_dev_list
1000f270 g     F .text	00000100 write
10011494 g       *ABS*	00000000 __ram_rodata_end
1000eb20 g     F .text	000000b8 fstat
1000df8c g     F .text	000000e0 .hidden __ledf2
10014a88 g     O .bss	00000004 lastDisintegrated
1000a358 g     F .text	00000140 __pow5mult
1000b608 g     F .text	00001424 ___vfiprintf_internal_r
10014ab0 g     O .bss	00000004 __nlocale_changed
10002c10 g     F .text	00000008 .hidden __umodsi3
10014e08 g       *ABS*	00000000 end
10014a8c g     O .bss	00000004 key1
1000f588 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
100110d4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003f04 g     F .text	00000064 .hidden __clzsi2
1000fc58 g     F .text	00000218 altera_avalon_jtag_uart_write
1000831c g     F .text	00000004 __sfp_lock_acquire
100097c4 g     F .text	000000e8 memchr
100041b0 g     F .text	000020fc ___vfprintf_internal_r
10008480 g     F .text	000002f0 _free_r
10008e0c g     F .text	00000010 __locale_mb_cur_max
10010f0c g     F .text	00000194 __call_exitprocs
10014aac g     O .bss	00000004 __mlocale_changed
10012f4c g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10014ad4 g     O .bss	00000004 _alt_tick_rate
100040b4 g     F .text	00000064 rand
1000a498 g     F .text	00000148 __lshift
10014ad8 g     O .bss	00000004 _alt_nticks
1000efec g     F .text	00000104 read
1000f3dc g     F .text	00000048 alt_sys_init
10010df8 g     F .text	00000114 __register_exitproc
1000a0c8 g     F .text	00000290 __multiply
1000f8f8 g     F .text	00000068 altera_avalon_jtag_uart_close
10002c18 g     F .text	00000028 .hidden __mulsi3
10011494 g       *ABS*	00000000 __ram_rwdata_start
100110d4 g       *ABS*	00000000 __ram_rodata_start
10014ae0 g     O .bss	00000028 __malloc_current_mallinfo
1000a954 g     F .text	0000013c __d2b
1000f424 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010bc0 g     F .text	000000d4 alt_get_fd
1000caac g     F .text	00000054 _close_r
10010d7c g     F .text	0000007c memcmp
1000f4e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014e08 g       *ABS*	00000000 __alt_stack_base
1000f534 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100062d0 g     F .text	00000130 __swsetup_r
1000d4a8 g     F .text	00000980 .hidden __divdf3
100081dc g     F .text	00000118 __sfp
1000aba8 g     F .text	00000078 __copybits
10011930 g     O .rwdata	00000408 __malloc_av_
10008328 g     F .text	00000004 __sinit_lock_release
1000e06c g     F .text	0000086c .hidden __muldf3
1000b314 g     F .text	00000054 __sread
10010aac g     F .text	00000114 alt_find_file
1001001c g     F .text	000000a4 alt_dev_llist_insert
1000ef5c g     F .text	00000020 __malloc_lock
1000f170 g     F .text	000000b0 sbrk
10007d50 g     F .text	00000228 _fflush_r
1000cb00 g     F .text	000000d8 _calloc_r
10014a6c g       *ABS*	00000000 __bss_start
10009b40 g     F .text	00000124 memset
10000268 g     F .text	000003f8 main
10014acc g     O .bss	00000004 alt_envp
10014ab4 g     O .bss	00000004 __malloc_max_total_mem
1000f484 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000d180 g     F .text	0000001c __swbuf
1000409c g     F .text	00000018 srand
10001da8 g     F .text	000000e8 convertBinaryToDecimal
1000b448 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000ccd8 g     F .text	00000014 fclose
10006628 g     F .text	00001728 _dtoa_r
1000901c g     F .text	000007a8 _malloc_r
1000d310 g     F .text	00000030 __ascii_wctomb
10012f6c g     O .rwdata	00000004 alt_errno
10008c14 g     F .text	000000b8 _fwalk
10002b58 g     F .text	00000054 .hidden __divsi3
1000835c g     F .text	00000124 _malloc_trim_r
100110d4 g       *ABS*	00000000 __CTOR_END__
1000b450 g     F .text	000000a4 strcmp
100110d4 g       *ABS*	00000000 __flash_rodata_start
100110d4 g       *ABS*	00000000 __DTOR_LIST__
10014a90 g     O .bss	00000004 key3
1000de28 g     F .text	00000084 .hidden __nedf2
1000f3a8 g     F .text	00000034 alt_irq_init
1000f0f0 g     F .text	00000080 alt_release_fd
10011194 g     O .rodata	00000100 .hidden __clz_tab
10014aa8 g     O .bss	00000004 _PathLocale
10010d30 g     F .text	00000014 atexit
10014a94 g     O .bss	00000004 nextSpawnTime
10001b80 g     F .text	000000a8 messagePackager
1000ca50 g     F .text	0000005c _write_r
10008e3c g     F .text	0000001c setlocale
10012f44 g     O .rwdata	00000004 _impure_ptr
10014ac4 g     O .bss	00000004 alt_argc
1001011c g     F .text	0000005c _do_dtors
10008e28 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000a7d8 g     F .text	00000060 __ulp
10008344 g     F .text	00000018 __fp_unlock_all
10012f58 g     O .rwdata	00000008 alt_fs_list
100015e0 g     F .text	00000230 disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008e58 g     F .text	0000000c localeconv
10010194 g     F .text	00000050 alt_ic_isr_register
10012f80 g       *ABS*	00000000 _edata
10014e08 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000f960 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10014a98 g     O .bss	00000004 key2
10010284 g     F .text	000000a4 alt_ic_irq_disable
10014a9c g     O .bss	00000004 physixOn
1000b370 g     F .text	0000007c __swrite
10012f50 g     O .rwdata	00000004 __malloc_trim_threshold
10008e1c g     F .text	0000000c __locale_msgcharset
10010d44 g     F .text	00000038 exit
10014aa0 g     O .bss	00000004 roundStart
10008ccc g     F .text	000000b8 _fwalk_reent
1000a640 g     F .text	00000198 __mdiff
10000ab4 g     F .text	0000034c physicsEngine
10002bac g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10008320 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100110a0 g     F .text	00000034 _exit
1000fe70 g     F .text	00000140 alt_alarm_start
1000d39c g     F .text	0000010c .hidden __muldi3
10008e64 g     F .text	000001b8 __smakebuf_r
10004118 g     F .text	00000098 strlen
10010700 g     F .text	00000160 open
1000deac g     F .text	000000e0 .hidden __gedf2
10012f54 g     O .rwdata	00000004 __wctomb
1000b5f0 g     F .text	00000018 __sprint_r
10010178 g     F .text	0000001c alt_icache_flush_all
10001810 g     F .text	00000370 FPGAcommunicator
10012f74 g     O .rwdata	00000004 alt_priority_mask
10014aa4 g     O .bss	00000004 comboFruit
100101e4 g     F .text	000000a0 alt_ic_irq_enable
100062ac g     F .text	00000024 __vfprintf_internal
1000d340 g     F .text	0000005c _wctomb_r
100034dc g     F .text	000008d0 .hidden __subdf3
10009fdc g     F .text	000000b0 __lo0bits
10012f78 g     O .rwdata	00000008 alt_alarm_list
100100c0 g     F .text	0000005c _do_ctors
1000d238 g     F .text	000000d8 wcrtomb
1000e9cc g     F .text	000000d8 close
1000ed38 g     F .text	00000080 alt_load
1000ce70 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10008324 g     F .text	00000004 __sinit_lock_acquire
10009d34 g     F .text	0000013c __multadd
10009d0c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10934204 	addi	r2,r2,19720
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10934204 	addi	r2,r2,19720
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e717 	ldw	r2,-25700(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e717 	ldw	r2,-25700(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6abd014 	ori	gp,gp,44864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10929b14 	ori	r2,r2,19052

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d38214 	ori	r3,r3,19976

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ed380 	call	1000ed38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000eee40 	call	1000eee4 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// can you even read

// our main function!!! this is where the magic happens
int main()
{
10000268:	defffb04 	addi	sp,sp,-20
1000026c:	dfc00415 	stw	ra,16(sp)
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
	// put in our seed
	srand(*to_sw_port0);
10000278:	00804c04 	movi	r2,304
1000027c:	10800017 	ldw	r2,0(r2)
10000280:	1009883a 	mov	r4,r2
10000284:	000409c0 	call	1000409c <srand>

	// assign these to 0 at start
	comboFruit = 0;
10000288:	d026d915 	stw	zero,-25756(gp)
	physixOn = 0;
1000028c:	d026d715 	stw	zero,-25764(gp)

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000290:	e03ffd15 	stw	zero,-12(fp)
10000294:	00002e06 	br	10000350 <main+0xe8>
	{
		veggieObject[i].xPosition = 0;
10000298:	00840074 	movhi	r2,4097
1000029c:	1092c204 	addi	r2,r2,19208
100002a0:	e0fffd17 	ldw	r3,-12(fp)
100002a4:	1806917a 	slli	r3,r3,5
100002a8:	10c5883a 	add	r2,r2,r3
100002ac:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002b0:	00840074 	movhi	r2,4097
100002b4:	1092c204 	addi	r2,r2,19208
100002b8:	e0fffd17 	ldw	r3,-12(fp)
100002bc:	1806917a 	slli	r3,r3,5
100002c0:	10c5883a 	add	r2,r2,r3
100002c4:	10800104 	addi	r2,r2,4
100002c8:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002cc:	00840074 	movhi	r2,4097
100002d0:	1092c204 	addi	r2,r2,19208
100002d4:	e0fffd17 	ldw	r3,-12(fp)
100002d8:	1806917a 	slli	r3,r3,5
100002dc:	10c5883a 	add	r2,r2,r3
100002e0:	10800204 	addi	r2,r2,8
100002e4:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
100002e8:	00840074 	movhi	r2,4097
100002ec:	1092c204 	addi	r2,r2,19208
100002f0:	e0fffd17 	ldw	r3,-12(fp)
100002f4:	1806917a 	slli	r3,r3,5
100002f8:	10c5883a 	add	r2,r2,r3
100002fc:	10800304 	addi	r2,r2,12
10000300:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000304:	00840074 	movhi	r2,4097
10000308:	1092c204 	addi	r2,r2,19208
1000030c:	e0fffd17 	ldw	r3,-12(fp)
10000310:	1806917a 	slli	r3,r3,5
10000314:	10c5883a 	add	r2,r2,r3
10000318:	10800404 	addi	r2,r2,16
1000031c:	10000015 	stw	zero,0(r2)
10000320:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
10000324:	00840074 	movhi	r2,4097
10000328:	1092c204 	addi	r2,r2,19208
1000032c:	e0fffd17 	ldw	r3,-12(fp)
10000330:	1806917a 	slli	r3,r3,5
10000334:	10c5883a 	add	r2,r2,r3
10000338:	10800604 	addi	r2,r2,24
1000033c:	10000015 	stw	zero,0(r2)
10000340:	10000115 	stw	zero,4(r2)
	comboFruit = 0;
	physixOn = 0;

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000344:	e0bffd17 	ldw	r2,-12(fp)
10000348:	10800044 	addi	r2,r2,1
1000034c:	e0bffd15 	stw	r2,-12(fp)
10000350:	e0bffd17 	ldw	r2,-12(fp)
10000354:	10800410 	cmplti	r2,r2,16
10000358:	103fcf1e 	bne	r2,zero,10000298 <__alt_data_end+0xf8000298>
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}

	// TEST STUFF
	veggieObject[0].xPosition = 0;
1000035c:	00840074 	movhi	r2,4097
10000360:	1092c204 	addi	r2,r2,19208
10000364:	10000015 	stw	zero,0(r2)
	veggieObject[0].yPosition = 0;
10000368:	00840074 	movhi	r2,4097
1000036c:	1092c204 	addi	r2,r2,19208
10000370:	10000115 	stw	zero,4(r2)
	veggieObject[0].objectType = 0;
10000374:	00840074 	movhi	r2,4097
10000378:	1092c204 	addi	r2,r2,19208
1000037c:	10000215 	stw	zero,8(r2)
	veggieObject[0].objectState = 0;
10000380:	00840074 	movhi	r2,4097
10000384:	1092c204 	addi	r2,r2,19208
10000388:	10000315 	stw	zero,12(r2)

	// start out in the initial black menu
	// FIX THIS LATER
	cursorClicked = 1;
1000038c:	00800044 	movi	r2,1
10000390:	d0a6cf15 	stw	r2,-25796(gp)

	while(cursorClicked == 0)
10000394:	00000206 	br	100003a0 <main+0x138>
	{
		FPGAcommunicator();	// call this every time to update the FPGA
10000398:	00018100 	call	10001810 <FPGAcommunicator>
		port2Unpackager();	// just run our unpackager
1000039c:	0001c280 	call	10001c28 <port2Unpackager>

	// start out in the initial black menu
	// FIX THIS LATER
	cursorClicked = 1;

	while(cursorClicked == 0)
100003a0:	d0a6cf17 	ldw	r2,-25796(gp)
100003a4:	103ffc26 	beq	r2,zero,10000398 <__alt_data_end+0xf8000398>
		FPGAcommunicator();	// call this every time to update the FPGA
		port2Unpackager();	// just run our unpackager
	}

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
100003a8:	00804804 	movi	r2,288
100003ac:	10800017 	ldw	r2,0(r2)
100003b0:	e0bffe15 	stw	r2,-8(fp)
	unsigned long processorTime = processorStart;
100003b4:	e0bffe17 	ldw	r2,-8(fp)
100003b8:	e0bfff15 	stw	r2,-4(fp)
	lastPhysixed = processorTime;
100003bc:	e0bfff17 	ldw	r2,-4(fp)
100003c0:	d0a6cc15 	stw	r2,-25808(gp)
	lastSpawned = processorTime;
100003c4:	e0bfff17 	ldw	r2,-4(fp)
100003c8:	d0a6d115 	stw	r2,-25788(gp)
	nextSpawnTime = processorTime;
100003cc:	e0bfff17 	ldw	r2,-4(fp)
100003d0:	d0a6d515 	stw	r2,-25772(gp)
	lastDisintegrated = processorTime;
100003d4:	e0bfff17 	ldw	r2,-4(fp)
100003d8:	d0a6d215 	stw	r2,-25784(gp)
	roundStart = 0;
100003dc:	d026d815 	stw	zero,-25760(gp)
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100003e0:	00806004 	movi	r2,384
100003e4:	10800017 	ldw	r2,0(r2)
100003e8:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
100003ec:	00805c04 	movi	r2,368
100003f0:	10800017 	ldw	r2,0(r2)
100003f4:	d0a6cd15 	stw	r2,-25804(gp)
	port2Unpackager();
100003f8:	0001c280 	call	10001c28 <port2Unpackager>

	// initialize our 3 fruits on screen for menu
	veggieObject[1].xPosition = 30;
100003fc:	00840074 	movhi	r2,4097
10000400:	1092c204 	addi	r2,r2,19208
10000404:	00c00784 	movi	r3,30
10000408:	10c00815 	stw	r3,32(r2)
	veggieObject[1].yPosition = 100;
1000040c:	00840074 	movhi	r2,4097
10000410:	1092c204 	addi	r2,r2,19208
10000414:	00c01904 	movi	r3,100
10000418:	10c00915 	stw	r3,36(r2)
	veggieObject[1].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	1092c204 	addi	r2,r2,19208
10000424:	00c00044 	movi	r3,1
10000428:	10c00b15 	stw	r3,44(r2)
	veggieObject[1].xVelocity = 0;
1000042c:	00840074 	movhi	r2,4097
10000430:	1092c204 	addi	r2,r2,19208
10000434:	10000c15 	stw	zero,48(r2)
10000438:	10000d15 	stw	zero,52(r2)
	veggieObject[1].yVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	1092c204 	addi	r2,r2,19208
10000444:	10000e15 	stw	zero,56(r2)
10000448:	10000f15 	stw	zero,60(r2)

	veggieObject[2].xPosition = 180;
1000044c:	00840074 	movhi	r2,4097
10000450:	1092c204 	addi	r2,r2,19208
10000454:	00c02d04 	movi	r3,180
10000458:	10c01015 	stw	r3,64(r2)
	veggieObject[2].yPosition = 320;
1000045c:	00840074 	movhi	r2,4097
10000460:	1092c204 	addi	r2,r2,19208
10000464:	00c05004 	movi	r3,320
10000468:	10c01115 	stw	r3,68(r2)
	veggieObject[2].objectState = 1;
1000046c:	00840074 	movhi	r2,4097
10000470:	1092c204 	addi	r2,r2,19208
10000474:	00c00044 	movi	r3,1
10000478:	10c01315 	stw	r3,76(r2)
	veggieObject[2].xVelocity = 0;
1000047c:	00840074 	movhi	r2,4097
10000480:	1092c204 	addi	r2,r2,19208
10000484:	10001415 	stw	zero,80(r2)
10000488:	10001515 	stw	zero,84(r2)
	veggieObject[2].yVelocity = 0;
1000048c:	00840074 	movhi	r2,4097
10000490:	1092c204 	addi	r2,r2,19208
10000494:	10001615 	stw	zero,88(r2)
10000498:	10001715 	stw	zero,92(r2)

	veggieObject[3].xPosition = 540;
1000049c:	00840074 	movhi	r2,4097
100004a0:	1092c204 	addi	r2,r2,19208
100004a4:	00c08704 	movi	r3,540
100004a8:	10c01815 	stw	r3,96(r2)
	veggieObject[3].yPosition = 220;
100004ac:	00840074 	movhi	r2,4097
100004b0:	1092c204 	addi	r2,r2,19208
100004b4:	00c03704 	movi	r3,220
100004b8:	10c01915 	stw	r3,100(r2)
	veggieObject[3].objectState = 1;
100004bc:	00840074 	movhi	r2,4097
100004c0:	1092c204 	addi	r2,r2,19208
100004c4:	00c00044 	movi	r3,1
100004c8:	10c01b15 	stw	r3,108(r2)
	veggieObject[3].xVelocity = 0;
100004cc:	00840074 	movhi	r2,4097
100004d0:	1092c204 	addi	r2,r2,19208
100004d4:	10001c15 	stw	zero,112(r2)
100004d8:	10001d15 	stw	zero,116(r2)
	veggieObject[3].yVelocity = 0;
100004dc:	00840074 	movhi	r2,4097
100004e0:	1092c204 	addi	r2,r2,19208
100004e4:	10001e15 	stw	zero,120(r2)
100004e8:	10001f15 	stw	zero,124(r2)

	while(1)	// game while loop
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
100004ec:	00804804 	movi	r2,288
100004f0:	10800017 	ldw	r2,0(r2)
100004f4:	e0bfff15 	stw	r2,-4(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
100004f8:	e0ffff17 	ldw	r3,-4(fp)
100004fc:	e0bffe17 	ldw	r2,-8(fp)
10000500:	1885c83a 	sub	r2,r3,r2
10000504:	d0a6cb15 	stw	r2,-25812(gp)
//		printf("elapsed time is %lu \n", elapsedTime);

		statusEngine();	// keep track of our game state
10000508:	00006600 	call	10000660 <statusEngine>

		// constantly doing physics
		if (((elapsedTime - lastPhysixed) > 5) && (physixOn))
1000050c:	d0e6cb17 	ldw	r3,-25812(gp)
10000510:	d0a6cc17 	ldw	r2,-25808(gp)
10000514:	1885c83a 	sub	r2,r3,r2
10000518:	108001b0 	cmpltui	r2,r2,6
1000051c:	1000051e 	bne	r2,zero,10000534 <main+0x2cc>
10000520:	d0a6d717 	ldw	r2,-25764(gp)
10000524:	10000326 	beq	r2,zero,10000534 <main+0x2cc>
		{
			// greater than .05 seconds pass, and we're in a game playing state
			physicsEngine();	// call our physics engine!
10000528:	0000ab40 	call	10000ab4 <physicsEngine>
			lastPhysixed = elapsedTime;
1000052c:	d0a6cb17 	ldw	r2,-25812(gp)
10000530:	d0a6cc15 	stw	r2,-25808(gp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000534:	d0e6cb17 	ldw	r3,-25812(gp)
10000538:	d0a6d117 	ldw	r2,-25788(gp)
1000053c:	1885c83a 	sub	r2,r3,r2
10000540:	d0e6d517 	ldw	r3,-25772(gp)
10000544:	18803a2e 	bgeu	r3,r2,10000630 <main+0x3c8>
		{
			// determine next spawn time based on level
			if(veggieObject[0].objectState == 1)	// easy mode spawn
10000548:	00840074 	movhi	r2,4097
1000054c:	1092c204 	addi	r2,r2,19208
10000550:	10800317 	ldw	r2,12(r2)
10000554:	10800058 	cmpnei	r2,r2,1
10000558:	10000d1e 	bne	r2,zero,10000590 <main+0x328>
			{
				spawningEngine(rand() % 5);
1000055c:	00040b40 	call	100040b4 <rand>
10000560:	1009883a 	mov	r4,r2
10000564:	01400144 	movi	r5,5
10000568:	0002bac0 	call	10002bac <__modsi3>
1000056c:	1009883a 	mov	r4,r2
10000570:	0000e000 	call	10000e00 <spawningEngine>
				nextSpawnTime = (rand() % 50) + 75;
10000574:	00040b40 	call	100040b4 <rand>
10000578:	1009883a 	mov	r4,r2
1000057c:	01400c84 	movi	r5,50
10000580:	0002bac0 	call	10002bac <__modsi3>
10000584:	108012c4 	addi	r2,r2,75
10000588:	d0a6d515 	stw	r2,-25772(gp)
1000058c:	00002606 	br	10000628 <main+0x3c0>
			}
			else if(veggieObject[0].objectState == 2)	// medium mode
10000590:	00840074 	movhi	r2,4097
10000594:	1092c204 	addi	r2,r2,19208
10000598:	10800317 	ldw	r2,12(r2)
1000059c:	10800098 	cmpnei	r2,r2,2
100005a0:	10000d1e 	bne	r2,zero,100005d8 <main+0x370>
			{
				spawningEngine(rand() % 7);
100005a4:	00040b40 	call	100040b4 <rand>
100005a8:	1009883a 	mov	r4,r2
100005ac:	014001c4 	movi	r5,7
100005b0:	0002bac0 	call	10002bac <__modsi3>
100005b4:	1009883a 	mov	r4,r2
100005b8:	0000e000 	call	10000e00 <spawningEngine>
				nextSpawnTime = (rand() % 75) + 50;
100005bc:	00040b40 	call	100040b4 <rand>
100005c0:	1009883a 	mov	r4,r2
100005c4:	014012c4 	movi	r5,75
100005c8:	0002bac0 	call	10002bac <__modsi3>
100005cc:	10800c84 	addi	r2,r2,50
100005d0:	d0a6d515 	stw	r2,-25772(gp)
100005d4:	00001406 	br	10000628 <main+0x3c0>
			}
			else if(veggieObject[0].objectState == 3)	// easy mode spawn
100005d8:	00840074 	movhi	r2,4097
100005dc:	1092c204 	addi	r2,r2,19208
100005e0:	10800317 	ldw	r2,12(r2)
100005e4:	108000d8 	cmpnei	r2,r2,3
100005e8:	10000d1e 	bne	r2,zero,10000620 <main+0x3b8>
			{
				spawningEngine(rand() % 9);
100005ec:	00040b40 	call	100040b4 <rand>
100005f0:	1009883a 	mov	r4,r2
100005f4:	01400244 	movi	r5,9
100005f8:	0002bac0 	call	10002bac <__modsi3>
100005fc:	1009883a 	mov	r4,r2
10000600:	0000e000 	call	10000e00 <spawningEngine>
				nextSpawnTime = (rand() % 100 + 25);		// hard mode
10000604:	00040b40 	call	100040b4 <rand>
10000608:	1009883a 	mov	r4,r2
1000060c:	01401904 	movi	r5,100
10000610:	0002bac0 	call	10002bac <__modsi3>
10000614:	10800644 	addi	r2,r2,25
10000618:	d0a6d515 	stw	r2,-25772(gp)
1000061c:	00000206 	br	10000628 <main+0x3c0>
			}
			else
			{
				nextSpawnTime = 200;	// we're in another state. check back soon!
10000620:	00803204 	movi	r2,200
10000624:	d0a6d515 	stw	r2,-25772(gp)
			}
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
			lastSpawned = elapsedTime;
10000628:	d0a6cb17 	ldw	r2,-25812(gp)
1000062c:	d0a6d115 	stw	r2,-25788(gp)
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .1 sec
10000630:	d0e6cb17 	ldw	r3,-25812(gp)
10000634:	d0a6d217 	ldw	r2,-25784(gp)
10000638:	1885c83a 	sub	r2,r3,r2
1000063c:	10800570 	cmpltui	r2,r2,21
10000640:	1000031e 	bne	r2,zero,10000650 <main+0x3e8>
		{
			disintegrateEngine();	// call our spawning engine!
10000644:	00015e00 	call	100015e0 <disintegrateEngine>
			lastDisintegrated = elapsedTime;
10000648:	d0a6cb17 	ldw	r2,-25812(gp)
1000064c:	d0a6d215 	stw	r2,-25784(gp)
		}
		slicingEngine();	// check if we need to slice anything
10000650:	00011e40 	call	100011e4 <slicingEngine>
		port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
10000654:	0001c280 	call	10001c28 <port2Unpackager>
		FPGAcommunicator();	// call this every time to update the FPGA
10000658:	00018100 	call	10001810 <FPGAcommunicator>
	}
1000065c:	003fa306 	br	100004ec <__alt_data_end+0xf80004ec>

10000660 <statusEngine>:
	return 0;
}

void statusEngine()
{
10000660:	defffc04 	addi	sp,sp,-16
10000664:	dfc00315 	stw	ra,12(sp)
10000668:	df000215 	stw	fp,8(sp)
1000066c:	df000204 	addi	fp,sp,8
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
10000670:	00840074 	movhi	r2,4097
10000674:	1092c204 	addi	r2,r2,19208
10000678:	10800317 	ldw	r2,12(r2)
1000067c:	0080a10e 	bge	zero,r2,10000904 <statusEngine+0x2a4>
10000680:	00840074 	movhi	r2,4097
10000684:	1092c204 	addi	r2,r2,19208
10000688:	10800317 	ldw	r2,12(r2)
1000068c:	10800108 	cmpgei	r2,r2,4
10000690:	10009c1e 	bne	r2,zero,10000904 <statusEngine+0x2a4>
	{
		// this means we're currently playing a round
		physixOn = 1;
10000694:	00800044 	movi	r2,1
10000698:	d0a6d715 	stw	r2,-25764(gp)
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
1000069c:	d0e6cb17 	ldw	r3,-25812(gp)
100006a0:	d0a6d817 	ldw	r2,-25760(gp)
100006a4:	1885c83a 	sub	r2,r3,r2
100006a8:	1009883a 	mov	r4,r2
100006ac:	01401904 	movi	r5,100
100006b0:	0002c080 	call	10002c08 <__udivsi3>
100006b4:	1007883a 	mov	r3,r2
100006b8:	00800f04 	movi	r2,60
100006bc:	10c5c83a 	sub	r2,r2,r3
100006c0:	1007883a 	mov	r3,r2
100006c4:	00840074 	movhi	r2,4097
100006c8:	1092c204 	addi	r2,r2,19208
100006cc:	10c00115 	stw	r3,4(r2)
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
100006d0:	00840074 	movhi	r2,4097
100006d4:	1092c204 	addi	r2,r2,19208
100006d8:	10800117 	ldw	r2,4(r2)
100006dc:	10003d1e 	bne	r2,zero,100007d4 <statusEngine+0x174>
		{
			physixOn = 0;
100006e0:	d026d715 	stw	zero,-25764(gp)
			veggieObject[0].objectState = 4;	// move to GAME WON state
100006e4:	00840074 	movhi	r2,4097
100006e8:	1092c204 	addi	r2,r2,19208
100006ec:	00c00104 	movi	r3,4
100006f0:	10c00315 	stw	r3,12(r2)

			int i;
			for(i=1; i<16; i++)
100006f4:	00800044 	movi	r2,1
100006f8:	e0bffe15 	stw	r2,-8(fp)
100006fc:	00002e06 	br	100007b8 <statusEngine+0x158>
			{
				veggieObject[i].xPosition = 0;
10000700:	00840074 	movhi	r2,4097
10000704:	1092c204 	addi	r2,r2,19208
10000708:	e0fffe17 	ldw	r3,-8(fp)
1000070c:	1806917a 	slli	r3,r3,5
10000710:	10c5883a 	add	r2,r2,r3
10000714:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000718:	00840074 	movhi	r2,4097
1000071c:	1092c204 	addi	r2,r2,19208
10000720:	e0fffe17 	ldw	r3,-8(fp)
10000724:	1806917a 	slli	r3,r3,5
10000728:	10c5883a 	add	r2,r2,r3
1000072c:	10800104 	addi	r2,r2,4
10000730:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000734:	00840074 	movhi	r2,4097
10000738:	1092c204 	addi	r2,r2,19208
1000073c:	e0fffe17 	ldw	r3,-8(fp)
10000740:	1806917a 	slli	r3,r3,5
10000744:	10c5883a 	add	r2,r2,r3
10000748:	10800204 	addi	r2,r2,8
1000074c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000750:	00840074 	movhi	r2,4097
10000754:	1092c204 	addi	r2,r2,19208
10000758:	e0fffe17 	ldw	r3,-8(fp)
1000075c:	1806917a 	slli	r3,r3,5
10000760:	10c5883a 	add	r2,r2,r3
10000764:	10800304 	addi	r2,r2,12
10000768:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
1000076c:	00840074 	movhi	r2,4097
10000770:	1092c204 	addi	r2,r2,19208
10000774:	e0fffe17 	ldw	r3,-8(fp)
10000778:	1806917a 	slli	r3,r3,5
1000077c:	10c5883a 	add	r2,r2,r3
10000780:	10800404 	addi	r2,r2,16
10000784:	10000015 	stw	zero,0(r2)
10000788:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
1000078c:	00840074 	movhi	r2,4097
10000790:	1092c204 	addi	r2,r2,19208
10000794:	e0fffe17 	ldw	r3,-8(fp)
10000798:	1806917a 	slli	r3,r3,5
1000079c:	10c5883a 	add	r2,r2,r3
100007a0:	10800604 	addi	r2,r2,24
100007a4:	10000015 	stw	zero,0(r2)
100007a8:	10000115 	stw	zero,4(r2)
		{
			physixOn = 0;
			veggieObject[0].objectState = 4;	// move to GAME WON state

			int i;
			for(i=1; i<16; i++)
100007ac:	e0bffe17 	ldw	r2,-8(fp)
100007b0:	10800044 	addi	r2,r2,1
100007b4:	e0bffe15 	stw	r2,-8(fp)
100007b8:	e0bffe17 	ldw	r2,-8(fp)
100007bc:	10800410 	cmplti	r2,r2,16
100007c0:	103fcf1e 	bne	r2,zero,10000700 <__alt_data_end+0xf8000700>
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}

			printf("timed out\n");
100007c4:	01040074 	movhi	r4,4097
100007c8:	21043504 	addi	r4,r4,4308
100007cc:	00040880 	call	10004088 <puts>
100007d0:	00004b06 	br	10000900 <statusEngine+0x2a0>
		}
		else if(((veggieObject[0].objectState == 2) || (veggieObject[0].objectState == 3)) && (veggieObject[0].objectType <= 0))
100007d4:	00840074 	movhi	r2,4097
100007d8:	1092c204 	addi	r2,r2,19208
100007dc:	10800317 	ldw	r2,12(r2)
100007e0:	108000a0 	cmpeqi	r2,r2,2
100007e4:	1000051e 	bne	r2,zero,100007fc <statusEngine+0x19c>
100007e8:	00840074 	movhi	r2,4097
100007ec:	1092c204 	addi	r2,r2,19208
100007f0:	10800317 	ldw	r2,12(r2)
100007f4:	108000d8 	cmpnei	r2,r2,3
100007f8:	1000411e 	bne	r2,zero,10000900 <statusEngine+0x2a0>
100007fc:	00840074 	movhi	r2,4097
10000800:	1092c204 	addi	r2,r2,19208
10000804:	10800217 	ldw	r2,8(r2)
10000808:	00803d16 	blt	zero,r2,10000900 <statusEngine+0x2a0>
		{
			// this means we're game over :(
			physixOn = 0;
1000080c:	d026d715 	stw	zero,-25764(gp)
			veggieObject[0].objectState = 5;	// move to GAME OVER state
10000810:	00840074 	movhi	r2,4097
10000814:	1092c204 	addi	r2,r2,19208
10000818:	00c00144 	movi	r3,5
1000081c:	10c00315 	stw	r3,12(r2)

			int i;
			for(i=1; i<16; i++)
10000820:	00800044 	movi	r2,1
10000824:	e0bfff15 	stw	r2,-4(fp)
10000828:	00002e06 	br	100008e4 <statusEngine+0x284>
			{
				veggieObject[i].xPosition = 0;
1000082c:	00840074 	movhi	r2,4097
10000830:	1092c204 	addi	r2,r2,19208
10000834:	e0ffff17 	ldw	r3,-4(fp)
10000838:	1806917a 	slli	r3,r3,5
1000083c:	10c5883a 	add	r2,r2,r3
10000840:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000844:	00840074 	movhi	r2,4097
10000848:	1092c204 	addi	r2,r2,19208
1000084c:	e0ffff17 	ldw	r3,-4(fp)
10000850:	1806917a 	slli	r3,r3,5
10000854:	10c5883a 	add	r2,r2,r3
10000858:	10800104 	addi	r2,r2,4
1000085c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000860:	00840074 	movhi	r2,4097
10000864:	1092c204 	addi	r2,r2,19208
10000868:	e0ffff17 	ldw	r3,-4(fp)
1000086c:	1806917a 	slli	r3,r3,5
10000870:	10c5883a 	add	r2,r2,r3
10000874:	10800204 	addi	r2,r2,8
10000878:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
1000087c:	00840074 	movhi	r2,4097
10000880:	1092c204 	addi	r2,r2,19208
10000884:	e0ffff17 	ldw	r3,-4(fp)
10000888:	1806917a 	slli	r3,r3,5
1000088c:	10c5883a 	add	r2,r2,r3
10000890:	10800304 	addi	r2,r2,12
10000894:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000898:	00840074 	movhi	r2,4097
1000089c:	1092c204 	addi	r2,r2,19208
100008a0:	e0ffff17 	ldw	r3,-4(fp)
100008a4:	1806917a 	slli	r3,r3,5
100008a8:	10c5883a 	add	r2,r2,r3
100008ac:	10800404 	addi	r2,r2,16
100008b0:	10000015 	stw	zero,0(r2)
100008b4:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
100008b8:	00840074 	movhi	r2,4097
100008bc:	1092c204 	addi	r2,r2,19208
100008c0:	e0ffff17 	ldw	r3,-4(fp)
100008c4:	1806917a 	slli	r3,r3,5
100008c8:	10c5883a 	add	r2,r2,r3
100008cc:	10800604 	addi	r2,r2,24
100008d0:	10000015 	stw	zero,0(r2)
100008d4:	10000115 	stw	zero,4(r2)
			// this means we're game over :(
			physixOn = 0;
			veggieObject[0].objectState = 5;	// move to GAME OVER state

			int i;
			for(i=1; i<16; i++)
100008d8:	e0bfff17 	ldw	r2,-4(fp)
100008dc:	10800044 	addi	r2,r2,1
100008e0:	e0bfff15 	stw	r2,-4(fp)
100008e4:	e0bfff17 	ldw	r2,-4(fp)
100008e8:	10800410 	cmplti	r2,r2,16
100008ec:	103fcf1e 	bne	r2,zero,1000082c <__alt_data_end+0xf800082c>
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}

			printf("game over\n");
100008f0:	01040074 	movhi	r4,4097
100008f4:	21043804 	addi	r4,r4,4320
100008f8:	00040880 	call	10004088 <puts>
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
	{
		// this means we're currently playing a round
		physixOn = 1;
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
100008fc:	00006806 	br	10000aa0 <statusEngine+0x440>
10000900:	00006706 	br	10000aa0 <statusEngine+0x440>
			}

			printf("game over\n");
		}
	}
	else if(veggieObject[0].objectState == 0)	// check if we're in menu
10000904:	00840074 	movhi	r2,4097
10000908:	1092c204 	addi	r2,r2,19208
1000090c:	10800317 	ldw	r2,12(r2)
10000910:	1000441e 	bne	r2,zero,10000a24 <statusEngine+0x3c4>
	{
		physixOn = 0;
10000914:	d026d715 	stw	zero,-25764(gp)
		veggieObject[0].xPosition = 0;
10000918:	00840074 	movhi	r2,4097
1000091c:	1092c204 	addi	r2,r2,19208
10000920:	10000015 	stw	zero,0(r2)
		veggieObject[0].yPosition = 0;
10000924:	00840074 	movhi	r2,4097
10000928:	1092c204 	addi	r2,r2,19208
1000092c:	10000115 	stw	zero,4(r2)

		// initialize our 3 fruits on screen for menu
		veggieObject[1].xPosition = 30;
10000930:	00840074 	movhi	r2,4097
10000934:	1092c204 	addi	r2,r2,19208
10000938:	00c00784 	movi	r3,30
1000093c:	10c00815 	stw	r3,32(r2)
		veggieObject[1].yPosition = 100;
10000940:	00840074 	movhi	r2,4097
10000944:	1092c204 	addi	r2,r2,19208
10000948:	00c01904 	movi	r3,100
1000094c:	10c00915 	stw	r3,36(r2)
		veggieObject[1].objectState = 1;
10000950:	00840074 	movhi	r2,4097
10000954:	1092c204 	addi	r2,r2,19208
10000958:	00c00044 	movi	r3,1
1000095c:	10c00b15 	stw	r3,44(r2)
		veggieObject[1].xVelocity = 0;
10000960:	00840074 	movhi	r2,4097
10000964:	1092c204 	addi	r2,r2,19208
10000968:	10000c15 	stw	zero,48(r2)
1000096c:	10000d15 	stw	zero,52(r2)
		veggieObject[1].yVelocity = 0;
10000970:	00840074 	movhi	r2,4097
10000974:	1092c204 	addi	r2,r2,19208
10000978:	10000e15 	stw	zero,56(r2)
1000097c:	10000f15 	stw	zero,60(r2)

		veggieObject[2].xPosition = 180;
10000980:	00840074 	movhi	r2,4097
10000984:	1092c204 	addi	r2,r2,19208
10000988:	00c02d04 	movi	r3,180
1000098c:	10c01015 	stw	r3,64(r2)
		veggieObject[2].yPosition = 320;
10000990:	00840074 	movhi	r2,4097
10000994:	1092c204 	addi	r2,r2,19208
10000998:	00c05004 	movi	r3,320
1000099c:	10c01115 	stw	r3,68(r2)
		veggieObject[2].objectState = 1;
100009a0:	00840074 	movhi	r2,4097
100009a4:	1092c204 	addi	r2,r2,19208
100009a8:	00c00044 	movi	r3,1
100009ac:	10c01315 	stw	r3,76(r2)
		veggieObject[2].xVelocity = 0;
100009b0:	00840074 	movhi	r2,4097
100009b4:	1092c204 	addi	r2,r2,19208
100009b8:	10001415 	stw	zero,80(r2)
100009bc:	10001515 	stw	zero,84(r2)
		veggieObject[2].yVelocity = 0;
100009c0:	00840074 	movhi	r2,4097
100009c4:	1092c204 	addi	r2,r2,19208
100009c8:	10001615 	stw	zero,88(r2)
100009cc:	10001715 	stw	zero,92(r2)

		veggieObject[3].xPosition = 540;
100009d0:	00840074 	movhi	r2,4097
100009d4:	1092c204 	addi	r2,r2,19208
100009d8:	00c08704 	movi	r3,540
100009dc:	10c01815 	stw	r3,96(r2)
		veggieObject[3].yPosition = 220;
100009e0:	00840074 	movhi	r2,4097
100009e4:	1092c204 	addi	r2,r2,19208
100009e8:	00c03704 	movi	r3,220
100009ec:	10c01915 	stw	r3,100(r2)
		veggieObject[3].objectState = 1;
100009f0:	00840074 	movhi	r2,4097
100009f4:	1092c204 	addi	r2,r2,19208
100009f8:	00c00044 	movi	r3,1
100009fc:	10c01b15 	stw	r3,108(r2)
		veggieObject[3].xVelocity = 0;
10000a00:	00840074 	movhi	r2,4097
10000a04:	1092c204 	addi	r2,r2,19208
10000a08:	10001c15 	stw	zero,112(r2)
10000a0c:	10001d15 	stw	zero,116(r2)
		veggieObject[3].yVelocity = 0;
10000a10:	00840074 	movhi	r2,4097
10000a14:	1092c204 	addi	r2,r2,19208
10000a18:	10001e15 	stw	zero,120(r2)
10000a1c:	10001f15 	stw	zero,124(r2)
10000a20:	00001f06 	br	10000aa0 <statusEngine+0x440>
	}
	else if((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))
10000a24:	00840074 	movhi	r2,4097
10000a28:	1092c204 	addi	r2,r2,19208
10000a2c:	10800317 	ldw	r2,12(r2)
10000a30:	10800120 	cmpeqi	r2,r2,4
10000a34:	1000051e 	bne	r2,zero,10000a4c <statusEngine+0x3ec>
10000a38:	00840074 	movhi	r2,4097
10000a3c:	1092c204 	addi	r2,r2,19208
10000a40:	10800317 	ldw	r2,12(r2)
10000a44:	10800158 	cmpnei	r2,r2,5
10000a48:	1000151e 	bne	r2,zero,10000aa0 <statusEngine+0x440>
	{
		// put in our veggie
		veggieObject[4].xPosition = 230;
10000a4c:	00840074 	movhi	r2,4097
10000a50:	1092c204 	addi	r2,r2,19208
10000a54:	00c03984 	movi	r3,230
10000a58:	10c02015 	stw	r3,128(r2)
		veggieObject[4].yPosition = 150;
10000a5c:	00840074 	movhi	r2,4097
10000a60:	1092c204 	addi	r2,r2,19208
10000a64:	00c02584 	movi	r3,150
10000a68:	10c02115 	stw	r3,132(r2)
		veggieObject[4].objectState = 1;
10000a6c:	00840074 	movhi	r2,4097
10000a70:	1092c204 	addi	r2,r2,19208
10000a74:	00c00044 	movi	r3,1
10000a78:	10c02315 	stw	r3,140(r2)
		veggieObject[4].xVelocity = 0;
10000a7c:	00840074 	movhi	r2,4097
10000a80:	1092c204 	addi	r2,r2,19208
10000a84:	10002415 	stw	zero,144(r2)
10000a88:	10002515 	stw	zero,148(r2)
		veggieObject[4].yVelocity = 0;
10000a8c:	00840074 	movhi	r2,4097
10000a90:	1092c204 	addi	r2,r2,19208
10000a94:	10002615 	stw	zero,152(r2)
10000a98:	10002715 	stw	zero,156(r2)

		physixOn = 0;
10000a9c:	d026d715 	stw	zero,-25764(gp)
	}
}
10000aa0:	e037883a 	mov	sp,fp
10000aa4:	dfc00117 	ldw	ra,4(sp)
10000aa8:	df000017 	ldw	fp,0(sp)
10000aac:	dec00204 	addi	sp,sp,8
10000ab0:	f800283a 	ret

10000ab4 <physicsEngine>:

void physicsEngine()
{
10000ab4:	defffd04 	addi	sp,sp,-12
10000ab8:	dfc00215 	stw	ra,8(sp)
10000abc:	df000115 	stw	fp,4(sp)
10000ac0:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000ac4:	00800044 	movi	r2,1
10000ac8:	e0bfff15 	stw	r2,-4(fp)
10000acc:	0000c306 	br	10000ddc <physicsEngine+0x328>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000ad0:	00840074 	movhi	r2,4097
10000ad4:	1092c204 	addi	r2,r2,19208
10000ad8:	e0ffff17 	ldw	r3,-4(fp)
10000adc:	1806917a 	slli	r3,r3,5
10000ae0:	10c5883a 	add	r2,r2,r3
10000ae4:	10800304 	addi	r2,r2,12
10000ae8:	10800017 	ldw	r2,0(r2)
10000aec:	1000b826 	beq	r2,zero,10000dd0 <physicsEngine+0x31c>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000af0:	00840074 	movhi	r2,4097
10000af4:	1092c204 	addi	r2,r2,19208
10000af8:	e0ffff17 	ldw	r3,-4(fp)
10000afc:	1806917a 	slli	r3,r3,5
10000b00:	10c5883a 	add	r2,r2,r3
10000b04:	10800017 	ldw	r2,0(r2)
10000b08:	1009883a 	mov	r4,r2
10000b0c:	0003e340 	call	10003e34 <__floatsidf>
10000b10:	100b883a 	mov	r5,r2
10000b14:	180d883a 	mov	r6,r3
10000b18:	00840074 	movhi	r2,4097
10000b1c:	1092c204 	addi	r2,r2,19208
10000b20:	e0ffff17 	ldw	r3,-4(fp)
10000b24:	1806917a 	slli	r3,r3,5
10000b28:	10c5883a 	add	r2,r2,r3
10000b2c:	11000404 	addi	r4,r2,16
10000b30:	20800017 	ldw	r2,0(r4)
10000b34:	20c00117 	ldw	r3,4(r4)
10000b38:	2809883a 	mov	r4,r5
10000b3c:	300b883a 	mov	r5,r6
10000b40:	100d883a 	mov	r6,r2
10000b44:	180f883a 	mov	r7,r3
10000b48:	0002c400 	call	10002c40 <__adddf3>
10000b4c:	1009883a 	mov	r4,r2
10000b50:	180b883a 	mov	r5,r3
10000b54:	2005883a 	mov	r2,r4
10000b58:	2807883a 	mov	r3,r5
10000b5c:	1009883a 	mov	r4,r2
10000b60:	180b883a 	mov	r5,r3
10000b64:	0003dac0 	call	10003dac <__fixdfsi>
10000b68:	1009883a 	mov	r4,r2
10000b6c:	00840074 	movhi	r2,4097
10000b70:	1092c204 	addi	r2,r2,19208
10000b74:	e0ffff17 	ldw	r3,-4(fp)
10000b78:	1806917a 	slli	r3,r3,5
10000b7c:	10c5883a 	add	r2,r2,r3
10000b80:	11000015 	stw	r4,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000b84:	00840074 	movhi	r2,4097
10000b88:	1092c204 	addi	r2,r2,19208
10000b8c:	e0ffff17 	ldw	r3,-4(fp)
10000b90:	1806917a 	slli	r3,r3,5
10000b94:	10c5883a 	add	r2,r2,r3
10000b98:	10800104 	addi	r2,r2,4
10000b9c:	10800017 	ldw	r2,0(r2)
10000ba0:	1009883a 	mov	r4,r2
10000ba4:	0003e340 	call	10003e34 <__floatsidf>
10000ba8:	100b883a 	mov	r5,r2
10000bac:	180d883a 	mov	r6,r3
10000bb0:	00840074 	movhi	r2,4097
10000bb4:	1092c204 	addi	r2,r2,19208
10000bb8:	e0ffff17 	ldw	r3,-4(fp)
10000bbc:	1806917a 	slli	r3,r3,5
10000bc0:	10c5883a 	add	r2,r2,r3
10000bc4:	11000604 	addi	r4,r2,24
10000bc8:	20800017 	ldw	r2,0(r4)
10000bcc:	20c00117 	ldw	r3,4(r4)
10000bd0:	2809883a 	mov	r4,r5
10000bd4:	300b883a 	mov	r5,r6
10000bd8:	100d883a 	mov	r6,r2
10000bdc:	180f883a 	mov	r7,r3
10000be0:	0002c400 	call	10002c40 <__adddf3>
10000be4:	1009883a 	mov	r4,r2
10000be8:	180b883a 	mov	r5,r3
10000bec:	2005883a 	mov	r2,r4
10000bf0:	2807883a 	mov	r3,r5
10000bf4:	1009883a 	mov	r4,r2
10000bf8:	180b883a 	mov	r5,r3
10000bfc:	0003dac0 	call	10003dac <__fixdfsi>
10000c00:	1009883a 	mov	r4,r2
10000c04:	00840074 	movhi	r2,4097
10000c08:	1092c204 	addi	r2,r2,19208
10000c0c:	e0ffff17 	ldw	r3,-4(fp)
10000c10:	1806917a 	slli	r3,r3,5
10000c14:	10c5883a 	add	r2,r2,r3
10000c18:	10800104 	addi	r2,r2,4
10000c1c:	11000015 	stw	r4,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000c20:	00840074 	movhi	r2,4097
10000c24:	1092c204 	addi	r2,r2,19208
10000c28:	e0ffff17 	ldw	r3,-4(fp)
10000c2c:	1806917a 	slli	r3,r3,5
10000c30:	10c5883a 	add	r2,r2,r3
10000c34:	11000604 	addi	r4,r2,24
10000c38:	20800017 	ldw	r2,0(r4)
10000c3c:	20c00117 	ldw	r3,4(r4)
10000c40:	1009883a 	mov	r4,r2
10000c44:	180b883a 	mov	r5,r3
10000c48:	000d883a 	mov	r6,zero
10000c4c:	01cffc34 	movhi	r7,16368
10000c50:	00034dc0 	call	100034dc <__subdf3>
10000c54:	1009883a 	mov	r4,r2
10000c58:	180b883a 	mov	r5,r3
10000c5c:	2005883a 	mov	r2,r4
10000c60:	2807883a 	mov	r3,r5
10000c64:	01040074 	movhi	r4,4097
10000c68:	2112c204 	addi	r4,r4,19208
10000c6c:	e17fff17 	ldw	r5,-4(fp)
10000c70:	280a917a 	slli	r5,r5,5
10000c74:	2149883a 	add	r4,r4,r5
10000c78:	21000604 	addi	r4,r4,24
10000c7c:	20800015 	stw	r2,0(r4)
10000c80:	20c00115 	stw	r3,4(r4)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000c84:	00840074 	movhi	r2,4097
10000c88:	1092c204 	addi	r2,r2,19208
10000c8c:	e0ffff17 	ldw	r3,-4(fp)
10000c90:	1806917a 	slli	r3,r3,5
10000c94:	10c5883a 	add	r2,r2,r3
10000c98:	10800104 	addi	r2,r2,4
10000c9c:	10800017 	ldw	r2,0(r2)
10000ca0:	10000f16 	blt	r2,zero,10000ce0 <physicsEngine+0x22c>
10000ca4:	00840074 	movhi	r2,4097
10000ca8:	1092c204 	addi	r2,r2,19208
10000cac:	e0ffff17 	ldw	r3,-4(fp)
10000cb0:	1806917a 	slli	r3,r3,5
10000cb4:	10c5883a 	add	r2,r2,r3
10000cb8:	10800017 	ldw	r2,0(r2)
10000cbc:	10000816 	blt	r2,zero,10000ce0 <physicsEngine+0x22c>
10000cc0:	00840074 	movhi	r2,4097
10000cc4:	1092c204 	addi	r2,r2,19208
10000cc8:	e0ffff17 	ldw	r3,-4(fp)
10000ccc:	1806917a 	slli	r3,r3,5
10000cd0:	10c5883a 	add	r2,r2,r3
10000cd4:	10800017 	ldw	r2,0(r2)
10000cd8:	1080a050 	cmplti	r2,r2,641
10000cdc:	10003c1e 	bne	r2,zero,10000dd0 <physicsEngine+0x31c>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000ce0:	00840074 	movhi	r2,4097
10000ce4:	1092c204 	addi	r2,r2,19208
10000ce8:	e0ffff17 	ldw	r3,-4(fp)
10000cec:	1806917a 	slli	r3,r3,5
10000cf0:	10c5883a 	add	r2,r2,r3
10000cf4:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000cf8:	00840074 	movhi	r2,4097
10000cfc:	1092c204 	addi	r2,r2,19208
10000d00:	e0ffff17 	ldw	r3,-4(fp)
10000d04:	1806917a 	slli	r3,r3,5
10000d08:	10c5883a 	add	r2,r2,r3
10000d0c:	10800104 	addi	r2,r2,4
10000d10:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000d14:	00840074 	movhi	r2,4097
10000d18:	1092c204 	addi	r2,r2,19208
10000d1c:	e0ffff17 	ldw	r3,-4(fp)
10000d20:	1806917a 	slli	r3,r3,5
10000d24:	10c5883a 	add	r2,r2,r3
10000d28:	10800204 	addi	r2,r2,8
10000d2c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000d30:	00840074 	movhi	r2,4097
10000d34:	1092c204 	addi	r2,r2,19208
10000d38:	e0ffff17 	ldw	r3,-4(fp)
10000d3c:	1806917a 	slli	r3,r3,5
10000d40:	10c5883a 	add	r2,r2,r3
10000d44:	10800304 	addi	r2,r2,12
10000d48:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000d4c:	00840074 	movhi	r2,4097
10000d50:	1092c204 	addi	r2,r2,19208
10000d54:	e0ffff17 	ldw	r3,-4(fp)
10000d58:	1806917a 	slli	r3,r3,5
10000d5c:	10c5883a 	add	r2,r2,r3
10000d60:	10800404 	addi	r2,r2,16
10000d64:	10000015 	stw	zero,0(r2)
10000d68:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000d6c:	00840074 	movhi	r2,4097
10000d70:	1092c204 	addi	r2,r2,19208
10000d74:	e0ffff17 	ldw	r3,-4(fp)
10000d78:	1806917a 	slli	r3,r3,5
10000d7c:	10c5883a 	add	r2,r2,r3
10000d80:	10800604 	addi	r2,r2,24
10000d84:	10000015 	stw	zero,0(r2)
10000d88:	10000115 	stw	zero,4(r2)

				// reduce score!
				if(i<9)
10000d8c:	e0bfff17 	ldw	r2,-4(fp)
10000d90:	10800248 	cmpgei	r2,r2,9
10000d94:	10000e1e 	bne	r2,zero,10000dd0 <physicsEngine+0x31c>
				{
					veggieObject[0].xPosition = veggieObject[0].xPosition - 5;
10000d98:	00840074 	movhi	r2,4097
10000d9c:	1092c204 	addi	r2,r2,19208
10000da0:	10800017 	ldw	r2,0(r2)
10000da4:	10fffec4 	addi	r3,r2,-5
10000da8:	00840074 	movhi	r2,4097
10000dac:	1092c204 	addi	r2,r2,19208
10000db0:	10c00015 	stw	r3,0(r2)
					printf("veggie escaped! score decreased to %d! \n", veggieObject[0].xPosition);
10000db4:	00840074 	movhi	r2,4097
10000db8:	1092c204 	addi	r2,r2,19208
10000dbc:	10800017 	ldw	r2,0(r2)
10000dc0:	01040074 	movhi	r4,4097
10000dc4:	21043b04 	addi	r4,r4,4332
10000dc8:	100b883a 	mov	r5,r2
10000dcc:	0003f940 	call	10003f94 <printf>
}

void physicsEngine()
{
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000dd0:	e0bfff17 	ldw	r2,-4(fp)
10000dd4:	10800044 	addi	r2,r2,1
10000dd8:	e0bfff15 	stw	r2,-4(fp)
10000ddc:	e0bfff17 	ldw	r2,-4(fp)
10000de0:	10800290 	cmplti	r2,r2,10
10000de4:	103f3a1e 	bne	r2,zero,10000ad0 <__alt_data_end+0xf8000ad0>
				}
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000de8:	0001883a 	nop
}
10000dec:	e037883a 	mov	sp,fp
10000df0:	dfc00117 	ldw	ra,4(sp)
10000df4:	df000017 	ldw	fp,0(sp)
10000df8:	dec00204 	addi	sp,sp,8
10000dfc:	f800283a 	ret

10000e00 <spawningEngine>:

void spawningEngine(int pattern)
{
10000e00:	defff004 	addi	sp,sp,-64
10000e04:	dfc00f15 	stw	ra,60(sp)
10000e08:	df000e15 	stw	fp,56(sp)
10000e0c:	df000e04 	addi	fp,sp,56
10000e10:	e13fff15 	stw	r4,-4(fp)
	if(pattern == 0)	// one pattern will have us skip a spawn...caus whatev
10000e14:	e0bfff17 	ldw	r2,-4(fp)
10000e18:	1000011e 	bne	r2,zero,10000e20 <spawningEngine+0x20>
	{
		return;
10000e1c:	0000ec06 	br	100011d0 <spawningEngine+0x3d0>
	}
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
10000e20:	e0bfff17 	ldw	r2,-4(fp)
10000e24:	108001e0 	cmpeqi	r2,r2,7
10000e28:	1000031e 	bne	r2,zero,10000e38 <spawningEngine+0x38>
10000e2c:	e0bfff17 	ldw	r2,-4(fp)
10000e30:	10800258 	cmpnei	r2,r2,9
10000e34:	10005d1e 	bne	r2,zero,10000fac <spawningEngine+0x1ac>
	{
		if((rand() % 3) == 1)	// one last chance to not bomb this!
10000e38:	00040b40 	call	100040b4 <rand>
10000e3c:	1009883a 	mov	r4,r2
10000e40:	014000c4 	movi	r5,3
10000e44:	0002bac0 	call	10002bac <__modsi3>
10000e48:	10800058 	cmpnei	r2,r2,1
10000e4c:	1000571e 	bne	r2,zero,10000fac <spawningEngine+0x1ac>
		{
			if(veggieObject[9].objectState == 0)	// if one doesn't exist, go!
10000e50:	00840074 	movhi	r2,4097
10000e54:	1092c204 	addi	r2,r2,19208
10000e58:	10804b17 	ldw	r2,300(r2)
10000e5c:	1000531e 	bne	r2,zero,10000fac <spawningEngine+0x1ac>
			{
				unsigned int randomX;	// x coordinate on bottom of screen
				double randomSpeedY, randomSpeedX;	// starting velocity

				// RANDOM GENERATION!!
				randomX = (rand() % 540) + 50;
10000e60:	00040b40 	call	100040b4 <rand>
10000e64:	1009883a 	mov	r4,r2
10000e68:	01408704 	movi	r5,540
10000e6c:	0002bac0 	call	10002bac <__modsi3>
10000e70:	10800c84 	addi	r2,r2,50
10000e74:	e0bff815 	stw	r2,-32(fp)
				randomSpeedY = (rand() % 7) + 24;
10000e78:	00040b40 	call	100040b4 <rand>
10000e7c:	1009883a 	mov	r4,r2
10000e80:	014001c4 	movi	r5,7
10000e84:	0002bac0 	call	10002bac <__modsi3>
10000e88:	10800604 	addi	r2,r2,24
10000e8c:	1009883a 	mov	r4,r2
10000e90:	0003e340 	call	10003e34 <__floatsidf>
10000e94:	1009883a 	mov	r4,r2
10000e98:	180b883a 	mov	r5,r3
10000e9c:	e13ff915 	stw	r4,-28(fp)
10000ea0:	e17ffa15 	stw	r5,-24(fp)
				randomSpeedX = (rand() % 12) - 6;
10000ea4:	00040b40 	call	100040b4 <rand>
10000ea8:	1009883a 	mov	r4,r2
10000eac:	01400304 	movi	r5,12
10000eb0:	0002bac0 	call	10002bac <__modsi3>
10000eb4:	10bffe84 	addi	r2,r2,-6
10000eb8:	1009883a 	mov	r4,r2
10000ebc:	0003e340 	call	10003e34 <__floatsidf>
10000ec0:	1009883a 	mov	r4,r2
10000ec4:	180b883a 	mov	r5,r3
10000ec8:	e13ff215 	stw	r4,-56(fp)
10000ecc:	e17ff315 	stw	r5,-52(fp)

				// make sure we aren't throwing them out the edges
				if (randomX < 300)
10000ed0:	e0bff817 	ldw	r2,-32(fp)
10000ed4:	10804b28 	cmpgeui	r2,r2,300
10000ed8:	10000b1e 	bne	r2,zero,10000f08 <spawningEngine+0x108>
				{
					randomSpeedX = (rand() % 12);
10000edc:	00040b40 	call	100040b4 <rand>
10000ee0:	1009883a 	mov	r4,r2
10000ee4:	01400304 	movi	r5,12
10000ee8:	0002bac0 	call	10002bac <__modsi3>
10000eec:	1009883a 	mov	r4,r2
10000ef0:	0003e340 	call	10003e34 <__floatsidf>
10000ef4:	1009883a 	mov	r4,r2
10000ef8:	180b883a 	mov	r5,r3
10000efc:	e13ff215 	stw	r4,-56(fp)
10000f00:	e17ff315 	stw	r5,-52(fp)
10000f04:	00000e06 	br	10000f40 <spawningEngine+0x140>
				}
				else if (randomX > 350)
10000f08:	e0bff817 	ldw	r2,-32(fp)
10000f0c:	108057f0 	cmpltui	r2,r2,351
10000f10:	10000b1e 	bne	r2,zero,10000f40 <spawningEngine+0x140>
				{
					randomSpeedX = (rand() % 12) - 12;
10000f14:	00040b40 	call	100040b4 <rand>
10000f18:	1009883a 	mov	r4,r2
10000f1c:	01400304 	movi	r5,12
10000f20:	0002bac0 	call	10002bac <__modsi3>
10000f24:	10bffd04 	addi	r2,r2,-12
10000f28:	1009883a 	mov	r4,r2
10000f2c:	0003e340 	call	10003e34 <__floatsidf>
10000f30:	1009883a 	mov	r4,r2
10000f34:	180b883a 	mov	r5,r3
10000f38:	e13ff215 	stw	r4,-56(fp)
10000f3c:	e17ff315 	stw	r5,-52(fp)
				}

				// now let's store these
				veggieObject[9].xPosition = randomX;
10000f40:	e0fff817 	ldw	r3,-32(fp)
10000f44:	00840074 	movhi	r2,4097
10000f48:	1092c204 	addi	r2,r2,19208
10000f4c:	10c04815 	stw	r3,288(r2)
				veggieObject[9].yPosition = 0;
10000f50:	00840074 	movhi	r2,4097
10000f54:	1092c204 	addi	r2,r2,19208
10000f58:	10004915 	stw	zero,292(r2)
				veggieObject[9].objectType = 0;
10000f5c:	00840074 	movhi	r2,4097
10000f60:	1092c204 	addi	r2,r2,19208
10000f64:	10004a15 	stw	zero,296(r2)
				veggieObject[9].xVelocity = randomSpeedX;
10000f68:	00840074 	movhi	r2,4097
10000f6c:	1092c204 	addi	r2,r2,19208
10000f70:	e0fff217 	ldw	r3,-56(fp)
10000f74:	10c04c15 	stw	r3,304(r2)
10000f78:	e0fff317 	ldw	r3,-52(fp)
10000f7c:	10c04d15 	stw	r3,308(r2)
				veggieObject[9].yVelocity = randomSpeedY;
10000f80:	00840074 	movhi	r2,4097
10000f84:	1092c204 	addi	r2,r2,19208
10000f88:	e0fff917 	ldw	r3,-28(fp)
10000f8c:	10c04e15 	stw	r3,312(r2)
10000f90:	e0fffa17 	ldw	r3,-24(fp)
10000f94:	10c04f15 	stw	r3,316(r2)
				veggieObject[9].objectState = 1;	// reserve this slot
10000f98:	00840074 	movhi	r2,4097
10000f9c:	1092c204 	addi	r2,r2,19208
10000fa0:	00c00044 	movi	r3,1
10000fa4:	10c04b15 	stw	r3,300(r2)

				return; // our evillness is done!!!
10000fa8:	00008906 	br	100011d0 <spawningEngine+0x3d0>
			}
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
10000fac:	00800044 	movi	r2,1
10000fb0:	e0bff415 	stw	r2,-48(fp)
10000fb4:	00008206 	br	100011c0 <spawningEngine+0x3c0>
	{
		i = (rand() % 14 + 1);	// put it in a random port for random veggies
10000fb8:	00040b40 	call	100040b4 <rand>
10000fbc:	1009883a 	mov	r4,r2
10000fc0:	01400384 	movi	r5,14
10000fc4:	0002bac0 	call	10002bac <__modsi3>
10000fc8:	10800044 	addi	r2,r2,1
10000fcc:	e0bffb15 	stw	r2,-20(fp)
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000fd0:	00840074 	movhi	r2,4097
10000fd4:	1092c204 	addi	r2,r2,19208
10000fd8:	e0fffb17 	ldw	r3,-20(fp)
10000fdc:	1806917a 	slli	r3,r3,5
10000fe0:	10c5883a 	add	r2,r2,r3
10000fe4:	10800304 	addi	r2,r2,12
10000fe8:	10800017 	ldw	r2,0(r2)
10000fec:	1000711e 	bne	r2,zero,100011b4 <spawningEngine+0x3b4>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			double randomSpeedY, randomSpeedX;	// starting velocity
			veggieObject[i].objectState = 1;	// reserve this slot
10000ff0:	00840074 	movhi	r2,4097
10000ff4:	1092c204 	addi	r2,r2,19208
10000ff8:	e0fffb17 	ldw	r3,-20(fp)
10000ffc:	1806917a 	slli	r3,r3,5
10001000:	10c5883a 	add	r2,r2,r3
10001004:	10800304 	addi	r2,r2,12
10001008:	00c00044 	movi	r3,1
1000100c:	10c00015 	stw	r3,0(r2)

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
10001010:	e0bfff17 	ldw	r2,-4(fp)
10001014:	10800150 	cmplti	r2,r2,5
10001018:	10000b1e 	bne	r2,zero,10001048 <spawningEngine+0x248>
			{
				int j;
				for(j=4; j<pattern; j++)
1000101c:	00800104 	movi	r2,4
10001020:	e0bff715 	stw	r2,-36(fp)
10001024:	00000506 	br	1000103c <spawningEngine+0x23c>
				{
					spawningEngine(1);	// call ourselves to spawn another!
10001028:	01000044 	movi	r4,1
1000102c:	0000e000 	call	10000e00 <spawningEngine>
			veggieObject[i].objectState = 1;	// reserve this slot

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
			{
				int j;
				for(j=4; j<pattern; j++)
10001030:	e0bff717 	ldw	r2,-36(fp)
10001034:	10800044 	addi	r2,r2,1
10001038:	e0bff715 	stw	r2,-36(fp)
1000103c:	e0fff717 	ldw	r3,-36(fp)
10001040:	e0bfff17 	ldw	r2,-4(fp)
10001044:	18bff816 	blt	r3,r2,10001028 <__alt_data_end+0xf8001028>
					spawningEngine(1);	// call ourselves to spawn another!
				}
			}

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10001048:	00040b40 	call	100040b4 <rand>
1000104c:	1009883a 	mov	r4,r2
10001050:	01408704 	movi	r5,540
10001054:	0002bac0 	call	10002bac <__modsi3>
10001058:	10800c84 	addi	r2,r2,50
1000105c:	e0bffc15 	stw	r2,-16(fp)
			randomSpeedY = (rand() % 7) + 24;
10001060:	00040b40 	call	100040b4 <rand>
10001064:	1009883a 	mov	r4,r2
10001068:	014001c4 	movi	r5,7
1000106c:	0002bac0 	call	10002bac <__modsi3>
10001070:	10800604 	addi	r2,r2,24
10001074:	1009883a 	mov	r4,r2
10001078:	0003e340 	call	10003e34 <__floatsidf>
1000107c:	1009883a 	mov	r4,r2
10001080:	180b883a 	mov	r5,r3
10001084:	e13ffd15 	stw	r4,-12(fp)
10001088:	e17ffe15 	stw	r5,-8(fp)
			randomSpeedX = (rand() % 12) - 6;
1000108c:	00040b40 	call	100040b4 <rand>
10001090:	1009883a 	mov	r4,r2
10001094:	01400304 	movi	r5,12
10001098:	0002bac0 	call	10002bac <__modsi3>
1000109c:	10bffe84 	addi	r2,r2,-6
100010a0:	1009883a 	mov	r4,r2
100010a4:	0003e340 	call	10003e34 <__floatsidf>
100010a8:	1009883a 	mov	r4,r2
100010ac:	180b883a 	mov	r5,r3
100010b0:	e13ff515 	stw	r4,-44(fp)
100010b4:	e17ff615 	stw	r5,-40(fp)

			// make sure we aren't throwing them out the edges
			if (randomX < 250)
100010b8:	e0bffc17 	ldw	r2,-16(fp)
100010bc:	10803ea8 	cmpgeui	r2,r2,250
100010c0:	10000b1e 	bne	r2,zero,100010f0 <spawningEngine+0x2f0>
			{
				randomSpeedX = (rand() % 12);
100010c4:	00040b40 	call	100040b4 <rand>
100010c8:	1009883a 	mov	r4,r2
100010cc:	01400304 	movi	r5,12
100010d0:	0002bac0 	call	10002bac <__modsi3>
100010d4:	1009883a 	mov	r4,r2
100010d8:	0003e340 	call	10003e34 <__floatsidf>
100010dc:	1009883a 	mov	r4,r2
100010e0:	180b883a 	mov	r5,r3
100010e4:	e13ff515 	stw	r4,-44(fp)
100010e8:	e17ff615 	stw	r5,-40(fp)
100010ec:	00000e06 	br	10001128 <spawningEngine+0x328>
			}
			else if (randomX > 400)
100010f0:	e0bffc17 	ldw	r2,-16(fp)
100010f4:	10806470 	cmpltui	r2,r2,401
100010f8:	10000b1e 	bne	r2,zero,10001128 <spawningEngine+0x328>
			{
				randomSpeedX = (rand() % 12) - 12;
100010fc:	00040b40 	call	100040b4 <rand>
10001100:	1009883a 	mov	r4,r2
10001104:	01400304 	movi	r5,12
10001108:	0002bac0 	call	10002bac <__modsi3>
1000110c:	10bffd04 	addi	r2,r2,-12
10001110:	1009883a 	mov	r4,r2
10001114:	0003e340 	call	10003e34 <__floatsidf>
10001118:	1009883a 	mov	r4,r2
1000111c:	180b883a 	mov	r5,r3
10001120:	e13ff515 	stw	r4,-44(fp)
10001124:	e17ff615 	stw	r5,-40(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10001128:	e0fffc17 	ldw	r3,-16(fp)
1000112c:	00840074 	movhi	r2,4097
10001130:	1092c204 	addi	r2,r2,19208
10001134:	e13ffb17 	ldw	r4,-20(fp)
10001138:	2008917a 	slli	r4,r4,5
1000113c:	1105883a 	add	r2,r2,r4
10001140:	10c00015 	stw	r3,0(r2)
			veggieObject[i].yPosition = 0;
10001144:	00840074 	movhi	r2,4097
10001148:	1092c204 	addi	r2,r2,19208
1000114c:	e0fffb17 	ldw	r3,-20(fp)
10001150:	1806917a 	slli	r3,r3,5
10001154:	10c5883a 	add	r2,r2,r3
10001158:	10800104 	addi	r2,r2,4
1000115c:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10001160:	00840074 	movhi	r2,4097
10001164:	1092c204 	addi	r2,r2,19208
10001168:	e0fffb17 	ldw	r3,-20(fp)
1000116c:	1806917a 	slli	r3,r3,5
10001170:	10c5883a 	add	r2,r2,r3
10001174:	10800404 	addi	r2,r2,16
10001178:	e0fff517 	ldw	r3,-44(fp)
1000117c:	10c00015 	stw	r3,0(r2)
10001180:	e0fff617 	ldw	r3,-40(fp)
10001184:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10001188:	00840074 	movhi	r2,4097
1000118c:	1092c204 	addi	r2,r2,19208
10001190:	e0fffb17 	ldw	r3,-20(fp)
10001194:	1806917a 	slli	r3,r3,5
10001198:	10c5883a 	add	r2,r2,r3
1000119c:	10800604 	addi	r2,r2,24
100011a0:	e0fffd17 	ldw	r3,-12(fp)
100011a4:	10c00015 	stw	r3,0(r2)
100011a8:	e0fffe17 	ldw	r3,-8(fp)
100011ac:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
100011b0:	00000706 	br	100011d0 <spawningEngine+0x3d0>
				return; // our evillness is done!!!
			}
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
100011b4:	e0bff417 	ldw	r2,-48(fp)
100011b8:	10800044 	addi	r2,r2,1
100011bc:	e0bff415 	stw	r2,-48(fp)
100011c0:	e0bff417 	ldw	r2,-48(fp)
100011c4:	10800250 	cmplti	r2,r2,9
100011c8:	103f7b1e 	bne	r2,zero,10000fb8 <__alt_data_end+0xf8000fb8>
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
		}
	}
	return;
100011cc:	0001883a 	nop
}
100011d0:	e037883a 	mov	sp,fp
100011d4:	dfc00117 	ldw	ra,4(sp)
100011d8:	df000017 	ldw	fp,0(sp)
100011dc:	dec00204 	addi	sp,sp,8
100011e0:	f800283a 	ret

100011e4 <slicingEngine>:

void slicingEngine()
{
100011e4:	defffb04 	addi	sp,sp,-20
100011e8:	dfc00415 	stw	ra,16(sp)
100011ec:	df000315 	stw	fp,12(sp)
100011f0:	df000304 	addi	fp,sp,12
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
100011f4:	00840074 	movhi	r2,4097
100011f8:	1092c204 	addi	r2,r2,19208
100011fc:	10800317 	ldw	r2,12(r2)
10001200:	1000591e 	bne	r2,zero,10001368 <slicingEngine+0x184>
10001204:	d0a6d017 	ldw	r2,-25792(gp)
10001208:	10005726 	beq	r2,zero,10001368 <slicingEngine+0x184>
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
1000120c:	d0a6ce17 	ldw	r2,-25800(gp)
10001210:	108007f0 	cmpltui	r2,r2,31
10001214:	1000191e 	bne	r2,zero,1000127c <slicingEngine+0x98>
10001218:	d0a6ce17 	ldw	r2,-25800(gp)
1000121c:	10801928 	cmpgeui	r2,r2,100
10001220:	1000161e 	bne	r2,zero,1000127c <slicingEngine+0x98>
10001224:	d0a6cd17 	ldw	r2,-25804(gp)
10001228:	108007f0 	cmpltui	r2,r2,31
1000122c:	1000131e 	bne	r2,zero,1000127c <slicingEngine+0x98>
10001230:	d0a6cd17 	ldw	r2,-25804(gp)
10001234:	10801928 	cmpgeui	r2,r2,100
10001238:	1000101e 	bne	r2,zero,1000127c <slicingEngine+0x98>
		{
			veggieObject[0].objectState = 1;	// easy mode start
1000123c:	00840074 	movhi	r2,4097
10001240:	1092c204 	addi	r2,r2,19208
10001244:	00c00044 	movi	r3,1
10001248:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 0;		// where we're goin, we don't need lives
1000124c:	00840074 	movhi	r2,4097
10001250:	1092c204 	addi	r2,r2,19208
10001254:	10000215 	stw	zero,8(r2)
			physixOn = 1;
10001258:	00800044 	movi	r2,1
1000125c:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[1].objectState = 2;	// cut the object!
10001260:	00840074 	movhi	r2,4097
10001264:	1092c204 	addi	r2,r2,19208
10001268:	00c00084 	movi	r3,2
1000126c:	10c00b15 	stw	r3,44(r2)
			roundStart = elapsedTime;
10001270:	d0a6cb17 	ldw	r2,-25812(gp)
10001274:	d0a6d815 	stw	r2,-25760(gp)
10001278:	00003a06 	br	10001364 <slicingEngine+0x180>
		}
		else if((xCursor>180)&&(xCursor<250)&&(yCursor>220)&&(yCursor<310))
1000127c:	d0a6ce17 	ldw	r2,-25800(gp)
10001280:	10802d70 	cmpltui	r2,r2,181
10001284:	10001a1e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
10001288:	d0a6ce17 	ldw	r2,-25800(gp)
1000128c:	10803ea8 	cmpgeui	r2,r2,250
10001290:	1000171e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
10001294:	d0a6cd17 	ldw	r2,-25804(gp)
10001298:	10803770 	cmpltui	r2,r2,221
1000129c:	1000141e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
100012a0:	d0a6cd17 	ldw	r2,-25804(gp)
100012a4:	10804da8 	cmpgeui	r2,r2,310
100012a8:	1000111e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
		{
			veggieObject[0].objectState = 2;	// medium mode start
100012ac:	00840074 	movhi	r2,4097
100012b0:	1092c204 	addi	r2,r2,19208
100012b4:	00c00084 	movi	r3,2
100012b8:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 7;		// lots of lives for u!
100012bc:	00840074 	movhi	r2,4097
100012c0:	1092c204 	addi	r2,r2,19208
100012c4:	00c001c4 	movi	r3,7
100012c8:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
100012cc:	00800044 	movi	r2,1
100012d0:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[2].objectState = 2;	// cut the object!
100012d4:	00840074 	movhi	r2,4097
100012d8:	1092c204 	addi	r2,r2,19208
100012dc:	00c00084 	movi	r3,2
100012e0:	10c01315 	stw	r3,76(r2)
			roundStart = elapsedTime;
100012e4:	d0a6cb17 	ldw	r2,-25812(gp)
100012e8:	d0a6d815 	stw	r2,-25760(gp)
100012ec:	00001d06 	br	10001364 <slicingEngine+0x180>
		}
		else if((xCursor>450)&&(xCursor<520)&&(yCursor>120)&&(yCursor<210))
100012f0:	d0a6ce17 	ldw	r2,-25800(gp)
100012f4:	108070f0 	cmpltui	r2,r2,451
100012f8:	10001a1e 	bne	r2,zero,10001364 <slicingEngine+0x180>
100012fc:	d0a6ce17 	ldw	r2,-25800(gp)
10001300:	10808228 	cmpgeui	r2,r2,520
10001304:	1000171e 	bne	r2,zero,10001364 <slicingEngine+0x180>
10001308:	d0a6cd17 	ldw	r2,-25804(gp)
1000130c:	10801e70 	cmpltui	r2,r2,121
10001310:	1000141e 	bne	r2,zero,10001364 <slicingEngine+0x180>
10001314:	d0a6cd17 	ldw	r2,-25804(gp)
10001318:	108034a8 	cmpgeui	r2,r2,210
1000131c:	1000111e 	bne	r2,zero,10001364 <slicingEngine+0x180>
		{
			veggieObject[0].objectState = 3;	// hard mode start
10001320:	00840074 	movhi	r2,4097
10001324:	1092c204 	addi	r2,r2,19208
10001328:	00c000c4 	movi	r3,3
1000132c:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 3;		// ..good luck...you'll need it
10001330:	00840074 	movhi	r2,4097
10001334:	1092c204 	addi	r2,r2,19208
10001338:	00c000c4 	movi	r3,3
1000133c:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
10001340:	00800044 	movi	r2,1
10001344:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[3].objectState = 2;	// cut the object!
10001348:	00840074 	movhi	r2,4097
1000134c:	1092c204 	addi	r2,r2,19208
10001350:	00c00084 	movi	r3,2
10001354:	10c01b15 	stw	r3,108(r2)
			roundStart = elapsedTime;
10001358:	d0a6cb17 	ldw	r2,-25812(gp)
1000135c:	d0a6d815 	stw	r2,-25760(gp)
{
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
10001360:	00009906 	br	100015c8 <slicingEngine+0x3e4>
10001364:	00009806 	br	100015c8 <slicingEngine+0x3e4>
			physixOn = 1;
			veggieObject[3].objectState = 2;	// cut the object!
			roundStart = elapsedTime;
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
10001368:	00840074 	movhi	r2,4097
1000136c:	1092c204 	addi	r2,r2,19208
10001370:	10800317 	ldw	r2,12(r2)
10001374:	10800120 	cmpeqi	r2,r2,4
10001378:	1000051e 	bne	r2,zero,10001390 <slicingEngine+0x1ac>
1000137c:	00840074 	movhi	r2,4097
10001380:	1092c204 	addi	r2,r2,19208
10001384:	10800317 	ldw	r2,12(r2)
10001388:	10800158 	cmpnei	r2,r2,5
1000138c:	1000181e 	bne	r2,zero,100013f0 <slicingEngine+0x20c>
10001390:	d0a6d017 	ldw	r2,-25792(gp)
10001394:	10001626 	beq	r2,zero,100013f0 <slicingEngine+0x20c>
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
10001398:	d0a6ce17 	ldw	r2,-25800(gp)
1000139c:	108039f0 	cmpltui	r2,r2,231
100013a0:	1000121e 	bne	r2,zero,100013ec <slicingEngine+0x208>
100013a4:	d0a6ce17 	ldw	r2,-25800(gp)
100013a8:	10804b28 	cmpgeui	r2,r2,300
100013ac:	10000f1e 	bne	r2,zero,100013ec <slicingEngine+0x208>
100013b0:	d0a6cd17 	ldw	r2,-25804(gp)
100013b4:	10801470 	cmpltui	r2,r2,81
100013b8:	10000c1e 	bne	r2,zero,100013ec <slicingEngine+0x208>
100013bc:	d0a6cd17 	ldw	r2,-25804(gp)
100013c0:	108025a8 	cmpgeui	r2,r2,150
100013c4:	1000091e 	bne	r2,zero,100013ec <slicingEngine+0x208>
		{
			veggieObject[0].objectState = 0;	// return to main menu
100013c8:	00840074 	movhi	r2,4097
100013cc:	1092c204 	addi	r2,r2,19208
100013d0:	10000315 	stw	zero,12(r2)
			veggieObject[4].objectState = 2;	// cut the object!
100013d4:	00840074 	movhi	r2,4097
100013d8:	1092c204 	addi	r2,r2,19208
100013dc:	00c00084 	movi	r3,2
100013e0:	10c02315 	stw	r3,140(r2)

			physixOn = 0;
100013e4:	d026d715 	stw	zero,-25764(gp)
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
100013e8:	00007706 	br	100015c8 <slicingEngine+0x3e4>
100013ec:	00007606 	br	100015c8 <slicingEngine+0x3e4>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
100013f0:	00800044 	movi	r2,1
100013f4:	e0bffd15 	stw	r2,-12(fp)
100013f8:	00007006 	br	100015bc <slicingEngine+0x3d8>
		{
			// only if it is in perfect state
			if(veggieObject[i].objectState == 1)
100013fc:	00840074 	movhi	r2,4097
10001400:	1092c204 	addi	r2,r2,19208
10001404:	e0fffd17 	ldw	r3,-12(fp)
10001408:	1806917a 	slli	r3,r3,5
1000140c:	10c5883a 	add	r2,r2,r3
10001410:	10800304 	addi	r2,r2,12
10001414:	10800017 	ldw	r2,0(r2)
10001418:	10800058 	cmpnei	r2,r2,1
1000141c:	1000641e 	bne	r2,zero,100015b0 <slicingEngine+0x3cc>
			{
				// let's grab the vegetable coordinates
				int veggieX = veggieObject[i].xPosition;
10001420:	00840074 	movhi	r2,4097
10001424:	1092c204 	addi	r2,r2,19208
10001428:	e0fffd17 	ldw	r3,-12(fp)
1000142c:	1806917a 	slli	r3,r3,5
10001430:	10c5883a 	add	r2,r2,r3
10001434:	10800017 	ldw	r2,0(r2)
10001438:	e0bffe15 	stw	r2,-8(fp)
				int veggieY = veggieObject[i].yPosition;
1000143c:	00840074 	movhi	r2,4097
10001440:	1092c204 	addi	r2,r2,19208
10001444:	e0fffd17 	ldw	r3,-12(fp)
10001448:	1806917a 	slli	r3,r3,5
1000144c:	10c5883a 	add	r2,r2,r3
10001450:	10800104 	addi	r2,r2,4
10001454:	10800017 	ldw	r2,0(r2)
10001458:	e0bfff15 	stw	r2,-4(fp)
					collideX = 64;
					collideY = 64;
				}
*/
				// now let's check collision
				if(((veggieX)<xCursor)&&((veggieX+75)>xCursor)&&((veggieY-60)<yCursor)&&((veggieY+15)>yCursor))
1000145c:	e0fffe17 	ldw	r3,-8(fp)
10001460:	d0a6ce17 	ldw	r2,-25800(gp)
10001464:	1880522e 	bgeu	r3,r2,100015b0 <slicingEngine+0x3cc>
10001468:	e0bffe17 	ldw	r2,-8(fp)
1000146c:	108012c4 	addi	r2,r2,75
10001470:	1007883a 	mov	r3,r2
10001474:	d0a6ce17 	ldw	r2,-25800(gp)
10001478:	10c04d2e 	bgeu	r2,r3,100015b0 <slicingEngine+0x3cc>
1000147c:	e0bfff17 	ldw	r2,-4(fp)
10001480:	10bff104 	addi	r2,r2,-60
10001484:	1007883a 	mov	r3,r2
10001488:	d0a6cd17 	ldw	r2,-25804(gp)
1000148c:	1880482e 	bgeu	r3,r2,100015b0 <slicingEngine+0x3cc>
10001490:	e0bfff17 	ldw	r2,-4(fp)
10001494:	108003c4 	addi	r2,r2,15
10001498:	1007883a 	mov	r3,r2
1000149c:	d0a6cd17 	ldw	r2,-25804(gp)
100014a0:	10c0432e 	bgeu	r2,r3,100015b0 <slicingEngine+0x3cc>
				{
					// this means we are in the 'hitbox'!! kill the fruit!
					veggieObject[i].objectState = 2;
100014a4:	00840074 	movhi	r2,4097
100014a8:	1092c204 	addi	r2,r2,19208
100014ac:	e0fffd17 	ldw	r3,-12(fp)
100014b0:	1806917a 	slli	r3,r3,5
100014b4:	10c5883a 	add	r2,r2,r3
100014b8:	10800304 	addi	r2,r2,12
100014bc:	00c00084 	movi	r3,2
100014c0:	10c00015 	stw	r3,0(r2)

					if(i<14)
100014c4:	e0bffd17 	ldw	r2,-12(fp)
100014c8:	10800388 	cmpgei	r2,r2,14
100014cc:	10001b1e 	bne	r2,zero,1000153c <slicingEngine+0x358>
					{
						comboFruit = comboFruit + 1;
100014d0:	d0a6d917 	ldw	r2,-25756(gp)
100014d4:	10800044 	addi	r2,r2,1
100014d8:	d0a6d915 	stw	r2,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition + 2*comboFruit;
100014dc:	00840074 	movhi	r2,4097
100014e0:	1092c204 	addi	r2,r2,19208
100014e4:	10c00017 	ldw	r3,0(r2)
100014e8:	d0a6d917 	ldw	r2,-25756(gp)
100014ec:	1085883a 	add	r2,r2,r2
100014f0:	1887883a 	add	r3,r3,r2
100014f4:	00840074 	movhi	r2,4097
100014f8:	1092c204 	addi	r2,r2,19208
100014fc:	10c00015 	stw	r3,0(r2)
						printf(" increased score to %d! \n", veggieObject[0].xPosition);
10001500:	00840074 	movhi	r2,4097
10001504:	1092c204 	addi	r2,r2,19208
10001508:	10800017 	ldw	r2,0(r2)
1000150c:	01040074 	movhi	r4,4097
10001510:	21044604 	addi	r4,r4,4376
10001514:	100b883a 	mov	r5,r2
10001518:	0003f940 	call	10003f94 <printf>
						printf("lives still at %d! \n", veggieObject[0].objectType);
1000151c:	00840074 	movhi	r2,4097
10001520:	1092c204 	addi	r2,r2,19208
10001524:	10800217 	ldw	r2,8(r2)
10001528:	01040074 	movhi	r4,4097
1000152c:	21044d04 	addi	r4,r4,4404
10001530:	100b883a 	mov	r5,r2
10001534:	0003f940 	call	10003f94 <printf>
10001538:	00001d06 	br	100015b0 <slicingEngine+0x3cc>
					}
					else	// ITS A BOMB!!! OMGOGMGOMGG!!
					{
						veggieObject[0].objectType = veggieObject[0].objectType-1;
1000153c:	00840074 	movhi	r2,4097
10001540:	1092c204 	addi	r2,r2,19208
10001544:	10800217 	ldw	r2,8(r2)
10001548:	10ffffc4 	addi	r3,r2,-1
1000154c:	00840074 	movhi	r2,4097
10001550:	1092c204 	addi	r2,r2,19208
10001554:	10c00215 	stw	r3,8(r2)
						comboFruit = 0;
10001558:	d026d915 	stw	zero,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition - 25;
1000155c:	00840074 	movhi	r2,4097
10001560:	1092c204 	addi	r2,r2,19208
10001564:	10800017 	ldw	r2,0(r2)
10001568:	10fff9c4 	addi	r3,r2,-25
1000156c:	00840074 	movhi	r2,4097
10001570:	1092c204 	addi	r2,r2,19208
10001574:	10c00015 	stw	r3,0(r2)
						printf("hit a bomb! scored decreased to %d! \n", veggieObject[0].xPosition);
10001578:	00840074 	movhi	r2,4097
1000157c:	1092c204 	addi	r2,r2,19208
10001580:	10800017 	ldw	r2,0(r2)
10001584:	01040074 	movhi	r4,4097
10001588:	21045304 	addi	r4,r4,4428
1000158c:	100b883a 	mov	r5,r2
10001590:	0003f940 	call	10003f94 <printf>
						printf("also, lives decreased to %d! \n", veggieObject[0].objectType);
10001594:	00840074 	movhi	r2,4097
10001598:	1092c204 	addi	r2,r2,19208
1000159c:	10800217 	ldw	r2,8(r2)
100015a0:	01040074 	movhi	r4,4097
100015a4:	21045d04 	addi	r4,r4,4468
100015a8:	100b883a 	mov	r5,r2
100015ac:	0003f940 	call	10003f94 <printf>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
100015b0:	e0bffd17 	ldw	r2,-12(fp)
100015b4:	10800044 	addi	r2,r2,1
100015b8:	e0bffd15 	stw	r2,-12(fp)
100015bc:	e0bffd17 	ldw	r2,-12(fp)
100015c0:	10800290 	cmplti	r2,r2,10
100015c4:	103f8d1e 	bne	r2,zero,100013fc <__alt_data_end+0xf80013fc>
					}
				}
			}
		}
	}
	return;
100015c8:	0001883a 	nop
}
100015cc:	e037883a 	mov	sp,fp
100015d0:	dfc00117 	ldw	ra,4(sp)
100015d4:	df000017 	ldw	fp,0(sp)
100015d8:	dec00204 	addi	sp,sp,8
100015dc:	f800283a 	ret

100015e0 <disintegrateEngine>:

void disintegrateEngine()
{
100015e0:	defffe04 	addi	sp,sp,-8
100015e4:	df000115 	stw	fp,4(sp)
100015e8:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
100015ec:	00800044 	movi	r2,1
100015f0:	e0bfff15 	stw	r2,-4(fp)
100015f4:	00007f06 	br	100017f4 <disintegrateEngine+0x214>
	{
		if(veggieObject[i].objectState == 2) // just been cut
100015f8:	00840074 	movhi	r2,4097
100015fc:	1092c204 	addi	r2,r2,19208
10001600:	e0ffff17 	ldw	r3,-4(fp)
10001604:	1806917a 	slli	r3,r3,5
10001608:	10c5883a 	add	r2,r2,r3
1000160c:	10800304 	addi	r2,r2,12
10001610:	10800017 	ldw	r2,0(r2)
10001614:	10800098 	cmpnei	r2,r2,2
10001618:	1000091e 	bne	r2,zero,10001640 <disintegrateEngine+0x60>
		{
			veggieObject[i].objectState = 3;
1000161c:	00840074 	movhi	r2,4097
10001620:	1092c204 	addi	r2,r2,19208
10001624:	e0ffff17 	ldw	r3,-4(fp)
10001628:	1806917a 	slli	r3,r3,5
1000162c:	10c5883a 	add	r2,r2,r3
10001630:	10800304 	addi	r2,r2,12
10001634:	00c000c4 	movi	r3,3
10001638:	10c00015 	stw	r3,0(r2)
1000163c:	00006a06 	br	100017e8 <disintegrateEngine+0x208>
		}
		else if(((veggieObject[i].objectState == 3) && (i<9)) || (veggieObject[i].objectState == 5))// almost dedded
10001640:	00840074 	movhi	r2,4097
10001644:	1092c204 	addi	r2,r2,19208
10001648:	e0ffff17 	ldw	r3,-4(fp)
1000164c:	1806917a 	slli	r3,r3,5
10001650:	10c5883a 	add	r2,r2,r3
10001654:	10800304 	addi	r2,r2,12
10001658:	10800017 	ldw	r2,0(r2)
1000165c:	108000d8 	cmpnei	r2,r2,3
10001660:	1000031e 	bne	r2,zero,10001670 <disintegrateEngine+0x90>
10001664:	e0bfff17 	ldw	r2,-4(fp)
10001668:	10800250 	cmplti	r2,r2,9
1000166c:	1000091e 	bne	r2,zero,10001694 <disintegrateEngine+0xb4>
10001670:	00840074 	movhi	r2,4097
10001674:	1092c204 	addi	r2,r2,19208
10001678:	e0ffff17 	ldw	r3,-4(fp)
1000167c:	1806917a 	slli	r3,r3,5
10001680:	10c5883a 	add	r2,r2,r3
10001684:	10800304 	addi	r2,r2,12
10001688:	10800017 	ldw	r2,0(r2)
1000168c:	10800158 	cmpnei	r2,r2,5
10001690:	10002c1e 	bne	r2,zero,10001744 <disintegrateEngine+0x164>
		{
			veggieObject[i].xPosition = 0;		// gone!
10001694:	00840074 	movhi	r2,4097
10001698:	1092c204 	addi	r2,r2,19208
1000169c:	e0ffff17 	ldw	r3,-4(fp)
100016a0:	1806917a 	slli	r3,r3,5
100016a4:	10c5883a 	add	r2,r2,r3
100016a8:	10000015 	stw	zero,0(r2)
			veggieObject[i].yPosition = 0;
100016ac:	00840074 	movhi	r2,4097
100016b0:	1092c204 	addi	r2,r2,19208
100016b4:	e0ffff17 	ldw	r3,-4(fp)
100016b8:	1806917a 	slli	r3,r3,5
100016bc:	10c5883a 	add	r2,r2,r3
100016c0:	10800104 	addi	r2,r2,4
100016c4:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = 0;
100016c8:	00840074 	movhi	r2,4097
100016cc:	1092c204 	addi	r2,r2,19208
100016d0:	e0ffff17 	ldw	r3,-4(fp)
100016d4:	1806917a 	slli	r3,r3,5
100016d8:	10c5883a 	add	r2,r2,r3
100016dc:	10800204 	addi	r2,r2,8
100016e0:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectState = 0;
100016e4:	00840074 	movhi	r2,4097
100016e8:	1092c204 	addi	r2,r2,19208
100016ec:	e0ffff17 	ldw	r3,-4(fp)
100016f0:	1806917a 	slli	r3,r3,5
100016f4:	10c5883a 	add	r2,r2,r3
100016f8:	10800304 	addi	r2,r2,12
100016fc:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = 0;
10001700:	00840074 	movhi	r2,4097
10001704:	1092c204 	addi	r2,r2,19208
10001708:	e0ffff17 	ldw	r3,-4(fp)
1000170c:	1806917a 	slli	r3,r3,5
10001710:	10c5883a 	add	r2,r2,r3
10001714:	10800404 	addi	r2,r2,16
10001718:	10000015 	stw	zero,0(r2)
1000171c:	10000115 	stw	zero,4(r2)
			veggieObject[i].yVelocity = 0;
10001720:	00840074 	movhi	r2,4097
10001724:	1092c204 	addi	r2,r2,19208
10001728:	e0ffff17 	ldw	r3,-4(fp)
1000172c:	1806917a 	slli	r3,r3,5
10001730:	10c5883a 	add	r2,r2,r3
10001734:	10800604 	addi	r2,r2,24
10001738:	10000015 	stw	zero,0(r2)
1000173c:	10000115 	stw	zero,4(r2)
10001740:	00002906 	br	100017e8 <disintegrateEngine+0x208>
		}
		else if((veggieObject[i].objectState == 3) && (i == 9))
10001744:	00840074 	movhi	r2,4097
10001748:	1092c204 	addi	r2,r2,19208
1000174c:	e0ffff17 	ldw	r3,-4(fp)
10001750:	1806917a 	slli	r3,r3,5
10001754:	10c5883a 	add	r2,r2,r3
10001758:	10800304 	addi	r2,r2,12
1000175c:	10800017 	ldw	r2,0(r2)
10001760:	108000d8 	cmpnei	r2,r2,3
10001764:	10000c1e 	bne	r2,zero,10001798 <disintegrateEngine+0x1b8>
10001768:	e0bfff17 	ldw	r2,-4(fp)
1000176c:	10800258 	cmpnei	r2,r2,9
10001770:	1000091e 	bne	r2,zero,10001798 <disintegrateEngine+0x1b8>
		{
			veggieObject[i].objectState = 4;
10001774:	00840074 	movhi	r2,4097
10001778:	1092c204 	addi	r2,r2,19208
1000177c:	e0ffff17 	ldw	r3,-4(fp)
10001780:	1806917a 	slli	r3,r3,5
10001784:	10c5883a 	add	r2,r2,r3
10001788:	10800304 	addi	r2,r2,12
1000178c:	00c00104 	movi	r3,4
10001790:	10c00015 	stw	r3,0(r2)
10001794:	00001406 	br	100017e8 <disintegrateEngine+0x208>
		}
		else if((veggieObject[i].objectState == 4) && (i == 9))
10001798:	00840074 	movhi	r2,4097
1000179c:	1092c204 	addi	r2,r2,19208
100017a0:	e0ffff17 	ldw	r3,-4(fp)
100017a4:	1806917a 	slli	r3,r3,5
100017a8:	10c5883a 	add	r2,r2,r3
100017ac:	10800304 	addi	r2,r2,12
100017b0:	10800017 	ldw	r2,0(r2)
100017b4:	10800118 	cmpnei	r2,r2,4
100017b8:	10000b1e 	bne	r2,zero,100017e8 <disintegrateEngine+0x208>
100017bc:	e0bfff17 	ldw	r2,-4(fp)
100017c0:	10800258 	cmpnei	r2,r2,9
100017c4:	1000081e 	bne	r2,zero,100017e8 <disintegrateEngine+0x208>
		{
			veggieObject[i].objectState = 5;
100017c8:	00840074 	movhi	r2,4097
100017cc:	1092c204 	addi	r2,r2,19208
100017d0:	e0ffff17 	ldw	r3,-4(fp)
100017d4:	1806917a 	slli	r3,r3,5
100017d8:	10c5883a 	add	r2,r2,r3
100017dc:	10800304 	addi	r2,r2,12
100017e0:	00c00144 	movi	r3,5
100017e4:	10c00015 	stw	r3,0(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
100017e8:	e0bfff17 	ldw	r2,-4(fp)
100017ec:	10800044 	addi	r2,r2,1
100017f0:	e0bfff15 	stw	r2,-4(fp)
100017f4:	e0bfff17 	ldw	r2,-4(fp)
100017f8:	10800290 	cmplti	r2,r2,10
100017fc:	103f7e1e 	bne	r2,zero,100015f8 <__alt_data_end+0xf80015f8>
		else if((veggieObject[i].objectState == 4) && (i == 9))
		{
			veggieObject[i].objectState = 5;
		}
	}
}
10001800:	e037883a 	mov	sp,fp
10001804:	df000017 	ldw	fp,0(sp)
10001808:	dec00104 	addi	sp,sp,4
1000180c:	f800283a 	ret

10001810 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10001810:	deffef04 	addi	sp,sp,-68
10001814:	dfc01015 	stw	ra,64(sp)
10001818:	df000f15 	stw	fp,60(sp)
1000181c:	df000f04 	addi	fp,sp,60
	// start putting in our xcoords
	unsigned int FPGAmessage[10];
	int i;
	for(i=0; i<10; i++)
10001820:	e03ff515 	stw	zero,-44(fp)
10001824:	00001106 	br	1000186c <FPGAcommunicator+0x5c>
	{
		FPGAmessage[i] = veggieObject[i].xPosition;
10001828:	00840074 	movhi	r2,4097
1000182c:	1092c204 	addi	r2,r2,19208
10001830:	e0fff517 	ldw	r3,-44(fp)
10001834:	1806917a 	slli	r3,r3,5
10001838:	10c5883a 	add	r2,r2,r3
1000183c:	10800017 	ldw	r2,0(r2)
10001840:	1007883a 	mov	r3,r2
10001844:	e0bff517 	ldw	r2,-44(fp)
10001848:	1085883a 	add	r2,r2,r2
1000184c:	1085883a 	add	r2,r2,r2
10001850:	e13ff504 	addi	r4,fp,-44
10001854:	2085883a 	add	r2,r4,r2
10001858:	10800104 	addi	r2,r2,4
1000185c:	10c00015 	stw	r3,0(r2)
void FPGAcommunicator()
{
	// start putting in our xcoords
	unsigned int FPGAmessage[10];
	int i;
	for(i=0; i<10; i++)
10001860:	e0bff517 	ldw	r2,-44(fp)
10001864:	10800044 	addi	r2,r2,1
10001868:	e0bff515 	stw	r2,-44(fp)
1000186c:	e0bff517 	ldw	r2,-44(fp)
10001870:	10800290 	cmplti	r2,r2,10
10001874:	103fec1e 	bne	r2,zero,10001828 <__alt_data_end+0xf8001828>
	{
		FPGAmessage[i] = veggieObject[i].xPosition;
	}

	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10001878:	00801c04 	movi	r2,112
1000187c:	00c00044 	movi	r3,1
10001880:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001884:	00804004 	movi	r2,256
10001888:	e0fff617 	ldw	r3,-40(fp)
1000188c:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001890:	00803c04 	movi	r2,240
10001894:	e0fff717 	ldw	r3,-36(fp)
10001898:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
1000189c:	00803804 	movi	r2,224
100018a0:	e0fff817 	ldw	r3,-32(fp)
100018a4:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
100018a8:	00803404 	movi	r2,208
100018ac:	e0fff917 	ldw	r3,-28(fp)
100018b0:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
100018b4:	00803004 	movi	r2,192
100018b8:	e0fffa17 	ldw	r3,-24(fp)
100018bc:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
100018c0:	00802c04 	movi	r2,176
100018c4:	e0fffb17 	ldw	r3,-20(fp)
100018c8:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
100018cc:	00802804 	movi	r2,160
100018d0:	e0fffc17 	ldw	r3,-16(fp)
100018d4:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
100018d8:	00801804 	movi	r2,96
100018dc:	e0fffd17 	ldw	r3,-12(fp)
100018e0:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
100018e4:	00802404 	movi	r2,144
100018e8:	e0fffe17 	ldw	r3,-8(fp)
100018ec:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
100018f0:	00802004 	movi	r2,128
100018f4:	e0ffff17 	ldw	r3,-4(fp)
100018f8:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response

	for(i=0; i<10; i++)
100018fc:	e03ff515 	stw	zero,-44(fp)
10001900:	00001206 	br	1000194c <FPGAcommunicator+0x13c>
	{
		FPGAmessage[i] = veggieObject[i].yPosition;
10001904:	00840074 	movhi	r2,4097
10001908:	1092c204 	addi	r2,r2,19208
1000190c:	e0fff517 	ldw	r3,-44(fp)
10001910:	1806917a 	slli	r3,r3,5
10001914:	10c5883a 	add	r2,r2,r3
10001918:	10800104 	addi	r2,r2,4
1000191c:	10800017 	ldw	r2,0(r2)
10001920:	1007883a 	mov	r3,r2
10001924:	e0bff517 	ldw	r2,-44(fp)
10001928:	1085883a 	add	r2,r2,r2
1000192c:	1085883a 	add	r2,r2,r2
10001930:	e13ff504 	addi	r4,fp,-44
10001934:	2085883a 	add	r2,r4,r2
10001938:	10800104 	addi	r2,r2,4
1000193c:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response

	for(i=0; i<10; i++)
10001940:	e0bff517 	ldw	r2,-44(fp)
10001944:	10800044 	addi	r2,r2,1
10001948:	e0bff515 	stw	r2,-44(fp)
1000194c:	e0bff517 	ldw	r2,-44(fp)
10001950:	10800290 	cmplti	r2,r2,10
10001954:	103feb1e 	bne	r2,zero,10001904 <__alt_data_end+0xf8001904>
	{
		FPGAmessage[i] = veggieObject[i].yPosition;
	}
	while(*to_sw_sig != 1);
10001958:	0001883a 	nop
1000195c:	00801404 	movi	r2,80
10001960:	10800003 	ldbu	r2,0(r2)
10001964:	10803fcc 	andi	r2,r2,255
10001968:	1080201c 	xori	r2,r2,128
1000196c:	10bfe004 	addi	r2,r2,-128
10001970:	10800058 	cmpnei	r2,r2,1
10001974:	103ff91e 	bne	r2,zero,1000195c <__alt_data_end+0xf800195c>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
10001978:	00801c04 	movi	r2,112
1000197c:	00c00084 	movi	r3,2
10001980:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001984:	00804004 	movi	r2,256
10001988:	e0fff617 	ldw	r3,-40(fp)
1000198c:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001990:	00803c04 	movi	r2,240
10001994:	e0fff717 	ldw	r3,-36(fp)
10001998:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
1000199c:	00803804 	movi	r2,224
100019a0:	e0fff817 	ldw	r3,-32(fp)
100019a4:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
100019a8:	00803404 	movi	r2,208
100019ac:	e0fff917 	ldw	r3,-28(fp)
100019b0:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
100019b4:	00803004 	movi	r2,192
100019b8:	e0fffa17 	ldw	r3,-24(fp)
100019bc:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
100019c0:	00802c04 	movi	r2,176
100019c4:	e0fffb17 	ldw	r3,-20(fp)
100019c8:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
100019cc:	00802804 	movi	r2,160
100019d0:	e0fffc17 	ldw	r3,-16(fp)
100019d4:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
100019d8:	00801804 	movi	r2,96
100019dc:	e0fffd17 	ldw	r3,-12(fp)
100019e0:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
100019e4:	00802404 	movi	r2,144
100019e8:	e0fffe17 	ldw	r3,-8(fp)
100019ec:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
100019f0:	00802004 	movi	r2,128
100019f4:	e0ffff17 	ldw	r3,-4(fp)
100019f8:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].yPosition;
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	FPGAmessage[0] = messagePackager(veggieObject[0]);
100019fc:	00840074 	movhi	r2,4097
10001a00:	1092c204 	addi	r2,r2,19208
10001a04:	10c00417 	ldw	r3,16(r2)
10001a08:	d8c00015 	stw	r3,0(sp)
10001a0c:	10c00517 	ldw	r3,20(r2)
10001a10:	d8c00115 	stw	r3,4(sp)
10001a14:	10c00617 	ldw	r3,24(r2)
10001a18:	d8c00215 	stw	r3,8(sp)
10001a1c:	10c00717 	ldw	r3,28(r2)
10001a20:	d8c00315 	stw	r3,12(sp)
10001a24:	11000017 	ldw	r4,0(r2)
10001a28:	11400117 	ldw	r5,4(r2)
10001a2c:	11800217 	ldw	r6,8(r2)
10001a30:	11c00317 	ldw	r7,12(r2)
10001a34:	0001b800 	call	10001b80 <messagePackager>
10001a38:	e0bff615 	stw	r2,-40(fp)
	for(i=1; i<10; i++)
10001a3c:	00800044 	movi	r2,1
10001a40:	e0bff515 	stw	r2,-44(fp)
10001a44:	00001206 	br	10001a90 <FPGAcommunicator+0x280>
	{
		FPGAmessage[i] = veggieObject[i].objectState;
10001a48:	00840074 	movhi	r2,4097
10001a4c:	1092c204 	addi	r2,r2,19208
10001a50:	e0fff517 	ldw	r3,-44(fp)
10001a54:	1806917a 	slli	r3,r3,5
10001a58:	10c5883a 	add	r2,r2,r3
10001a5c:	10800304 	addi	r2,r2,12
10001a60:	10800017 	ldw	r2,0(r2)
10001a64:	1007883a 	mov	r3,r2
10001a68:	e0bff517 	ldw	r2,-44(fp)
10001a6c:	1085883a 	add	r2,r2,r2
10001a70:	1085883a 	add	r2,r2,r2
10001a74:	e13ff504 	addi	r4,fp,-44
10001a78:	2085883a 	add	r2,r4,r2
10001a7c:	10800104 	addi	r2,r2,4
10001a80:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	FPGAmessage[0] = messagePackager(veggieObject[0]);
	for(i=1; i<10; i++)
10001a84:	e0bff517 	ldw	r2,-44(fp)
10001a88:	10800044 	addi	r2,r2,1
10001a8c:	e0bff515 	stw	r2,-44(fp)
10001a90:	e0bff517 	ldw	r2,-44(fp)
10001a94:	10800290 	cmplti	r2,r2,10
10001a98:	103feb1e 	bne	r2,zero,10001a48 <__alt_data_end+0xf8001a48>
	{
		FPGAmessage[i] = veggieObject[i].objectState;
	}
	// wait for confirmation
	while(*to_sw_sig != 2);
10001a9c:	0001883a 	nop
10001aa0:	00801404 	movi	r2,80
10001aa4:	10800003 	ldbu	r2,0(r2)
10001aa8:	10803fcc 	andi	r2,r2,255
10001aac:	1080201c 	xori	r2,r2,128
10001ab0:	10bfe004 	addi	r2,r2,-128
10001ab4:	10800098 	cmpnei	r2,r2,2
10001ab8:	103ff91e 	bne	r2,zero,10001aa0 <__alt_data_end+0xf8001aa0>
	// printf("fpgamessage is %lu   \n", FPGAmessage);

	*to_hw_sig = 3;		// our final sending
10001abc:	00801c04 	movi	r2,112
10001ac0:	00c000c4 	movi	r3,3
10001ac4:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001ac8:	00804004 	movi	r2,256
10001acc:	e0fff617 	ldw	r3,-40(fp)
10001ad0:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001ad4:	00803c04 	movi	r2,240
10001ad8:	e0fff717 	ldw	r3,-36(fp)
10001adc:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001ae0:	00803804 	movi	r2,224
10001ae4:	e0fff817 	ldw	r3,-32(fp)
10001ae8:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001aec:	00803404 	movi	r2,208
10001af0:	e0fff917 	ldw	r3,-28(fp)
10001af4:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10001af8:	00803004 	movi	r2,192
10001afc:	e0fffa17 	ldw	r3,-24(fp)
10001b00:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001b04:	00802c04 	movi	r2,176
10001b08:	e0fffb17 	ldw	r3,-20(fp)
10001b0c:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001b10:	00802804 	movi	r2,160
10001b14:	e0fffc17 	ldw	r3,-16(fp)
10001b18:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001b1c:	00801804 	movi	r2,96
10001b20:	e0fffd17 	ldw	r3,-12(fp)
10001b24:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10001b28:	00802404 	movi	r2,144
10001b2c:	e0fffe17 	ldw	r3,-8(fp)
10001b30:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001b34:	00802004 	movi	r2,128
10001b38:	e0ffff17 	ldw	r3,-4(fp)
10001b3c:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].objectState;
	*to_hw_port14 = veggieObject[14].objectState;
	*to_hw_port15 = veggieObject[15].objectState;
*/
	// last confirmation
	while(*to_sw_sig != 3);
10001b40:	0001883a 	nop
10001b44:	00801404 	movi	r2,80
10001b48:	10800003 	ldbu	r2,0(r2)
10001b4c:	10803fcc 	andi	r2,r2,255
10001b50:	1080201c 	xori	r2,r2,128
10001b54:	10bfe004 	addi	r2,r2,-128
10001b58:	108000d8 	cmpnei	r2,r2,3
10001b5c:	103ff91e 	bne	r2,zero,10001b44 <__alt_data_end+0xf8001b44>
	*to_hw_sig = 0;
10001b60:	00801c04 	movi	r2,112
10001b64:	10000005 	stb	zero,0(r2)

	return;
10001b68:	0001883a 	nop
}
10001b6c:	e037883a 	mov	sp,fp
10001b70:	dfc00117 	ldw	ra,4(sp)
10001b74:	df000017 	ldw	fp,0(sp)
10001b78:	dec00204 	addi	sp,sp,8
10001b7c:	f800283a 	ret

10001b80 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10001b80:	defff404 	addi	sp,sp,-48
10001b84:	dfc00715 	stw	ra,28(sp)
10001b88:	df000615 	stw	fp,24(sp)
10001b8c:	dc400515 	stw	r17,20(sp)
10001b90:	dc000415 	stw	r16,16(sp)
10001b94:	df000604 	addi	fp,sp,24
10001b98:	e1000215 	stw	r4,8(fp)
10001b9c:	e1400315 	stw	r5,12(fp)
10001ba0:	e1800415 	stw	r6,16(fp)
10001ba4:	e1c00515 	stw	r7,20(fp)

	// make our specific variables
	unsigned long tempType, tempState;

	// grab our stuff from the struct
	tempType = specifiedObject.objectType;
10001ba8:	e0800417 	ldw	r2,16(fp)
10001bac:	e0bffa15 	stw	r2,-24(fp)
	tempState = specifiedObject.objectState;
10001bb0:	e0800517 	ldw	r2,20(fp)
10001bb4:	e0bffb15 	stw	r2,-20(fp)

	// and convert stuff to binary!
	tempType = convertDecimalToBinary(tempType);
10001bb8:	e13ffa17 	ldw	r4,-24(fp)
10001bbc:	0001d400 	call	10001d40 <convertDecimalToBinary>
10001bc0:	e0bffa15 	stw	r2,-24(fp)
	tempState = convertDecimalToBinary(tempState);
10001bc4:	e13ffb17 	ldw	r4,-20(fp)
10001bc8:	0001d400 	call	10001d40 <convertDecimalToBinary>
10001bcc:	e0bffb15 	stw	r2,-20(fp)
//	printf("tempY: %llu   ", tempY);
//	printf("tempType: %lu   ", tempType);
//	printf("tempState: %lu   \n", tempState);

	// now we append everything together!
	tempBinary = tempState + tempType*1000;
10001bd0:	e13ffa17 	ldw	r4,-24(fp)
10001bd4:	0140fa04 	movi	r5,1000
10001bd8:	0002c180 	call	10002c18 <__mulsi3>
10001bdc:	1007883a 	mov	r3,r2
10001be0:	e0bffb17 	ldw	r2,-20(fp)
10001be4:	1885883a 	add	r2,r3,r2
10001be8:	e0bffc15 	stw	r2,-16(fp)
//		printf("tempBinary: %lu   ", tempBinary);

	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001bec:	e0bffc17 	ldw	r2,-16(fp)
10001bf0:	1021883a 	mov	r16,r2
10001bf4:	0023883a 	mov	r17,zero
10001bf8:	8009883a 	mov	r4,r16
10001bfc:	880b883a 	mov	r5,r17
10001c00:	0001da80 	call	10001da8 <convertBinaryToDecimal>
10001c04:	e0bffd15 	stw	r2,-12(fp)

	// and return it!
	return tempDecimal;
10001c08:	e0bffd17 	ldw	r2,-12(fp)
}
10001c0c:	e6fffe04 	addi	sp,fp,-8
10001c10:	dfc00317 	ldw	ra,12(sp)
10001c14:	df000217 	ldw	fp,8(sp)
10001c18:	dc400117 	ldw	r17,4(sp)
10001c1c:	dc000017 	ldw	r16,0(sp)
10001c20:	dec00804 	addi	sp,sp,32
10001c24:	f800283a 	ret

10001c28 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001c28:	defff704 	addi	sp,sp,-36
10001c2c:	dfc00815 	stw	ra,32(sp)
10001c30:	df000715 	stw	fp,28(sp)
10001c34:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001c38:	00804404 	movi	r2,272
10001c3c:	10800003 	ldbu	r2,0(r2)
10001c40:	10803fcc 	andi	r2,r2,255
10001c44:	1080201c 	xori	r2,r2,128
10001c48:	10bfe004 	addi	r2,r2,-128
10001c4c:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001c50:	e13ff917 	ldw	r4,-28(fp)
10001c54:	0001d400 	call	10001d40 <convertDecimalToBinary>
10001c58:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001c5c:	e03ffa15 	stw	zero,-24(fp)
10001c60:	00001406 	br	10001cb4 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001c64:	e0bff917 	ldw	r2,-28(fp)
10001c68:	1009883a 	mov	r4,r2
10001c6c:	01400284 	movi	r5,10
10001c70:	0002c100 	call	10002c10 <__umodsi3>
10001c74:	1007883a 	mov	r3,r2
10001c78:	e0bffa17 	ldw	r2,-24(fp)
10001c7c:	1085883a 	add	r2,r2,r2
10001c80:	1085883a 	add	r2,r2,r2
10001c84:	e13ff904 	addi	r4,fp,-28
10001c88:	2085883a 	add	r2,r4,r2
10001c8c:	10800204 	addi	r2,r2,8
10001c90:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001c94:	e0bff917 	ldw	r2,-28(fp)
10001c98:	1009883a 	mov	r4,r2
10001c9c:	01400284 	movi	r5,10
10001ca0:	0002c080 	call	10002c08 <__udivsi3>
10001ca4:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001ca8:	e0bffa17 	ldw	r2,-24(fp)
10001cac:	10800044 	addi	r2,r2,1
10001cb0:	e0bffa15 	stw	r2,-24(fp)
10001cb4:	e0bffa17 	ldw	r2,-24(fp)
10001cb8:	10800150 	cmplti	r2,r2,5
10001cbc:	103fe91e 	bne	r2,zero,10001c64 <__alt_data_end+0xf8001c64>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001cc0:	e0bffd17 	ldw	r2,-12(fp)
10001cc4:	d0a6d315 	stw	r2,-25780(gp)
	key2 = unpackaged[3];
10001cc8:	e0bffe17 	ldw	r2,-8(fp)
10001ccc:	d0a6d615 	stw	r2,-25768(gp)
	key3 = unpackaged[4];
10001cd0:	e0bfff17 	ldw	r2,-4(fp)
10001cd4:	d0a6d415 	stw	r2,-25776(gp)
	cursorStreak = unpackaged[0];
10001cd8:	e0bffb17 	ldw	r2,-20(fp)
10001cdc:	d0a6d015 	stw	r2,-25792(gp)
	cursorClicked = unpackaged[1];
10001ce0:	e0bffc17 	ldw	r2,-16(fp)
10001ce4:	d0a6cf15 	stw	r2,-25796(gp)
	xCursor = *to_sw_port3;
10001ce8:	00806004 	movi	r2,384
10001cec:	10800017 	ldw	r2,0(r2)
10001cf0:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
10001cf4:	00805c04 	movi	r2,368
10001cf8:	10800017 	ldw	r2,0(r2)
10001cfc:	d0a6cd15 	stw	r2,-25804(gp)

	if(cursorStreak == 0)	// reset combo if cursor no longer streaking
10001d00:	d0a6d017 	ldw	r2,-25792(gp)
10001d04:	1000011e 	bne	r2,zero,10001d0c <port2Unpackager+0xe4>
	{
		comboFruit = 0;
10001d08:	d026d915 	stw	zero,-25756(gp)
	}

	if(veggieObject[0].xPosition < 0)	// also don't let score go below zero
10001d0c:	00840074 	movhi	r2,4097
10001d10:	1092c204 	addi	r2,r2,19208
10001d14:	10800017 	ldw	r2,0(r2)
10001d18:	1000030e 	bge	r2,zero,10001d28 <port2Unpackager+0x100>
	{
		veggieObject[0].xPosition = 0;
10001d1c:	00840074 	movhi	r2,4097
10001d20:	1092c204 	addi	r2,r2,19208
10001d24:	10000015 	stw	zero,0(r2)
	}

	return;
10001d28:	0001883a 	nop
}
10001d2c:	e037883a 	mov	sp,fp
10001d30:	dfc00117 	ldw	ra,4(sp)
10001d34:	df000017 	ldw	fp,0(sp)
10001d38:	dec00204 	addi	sp,sp,8
10001d3c:	f800283a 	ret

10001d40 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001d40:	defffc04 	addi	sp,sp,-16
10001d44:	dfc00315 	stw	ra,12(sp)
10001d48:	df000215 	stw	fp,8(sp)
10001d4c:	dc000115 	stw	r16,4(sp)
10001d50:	df000204 	addi	fp,sp,8
10001d54:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
10001d58:	e0bffe17 	ldw	r2,-8(fp)
10001d5c:	1000021e 	bne	r2,zero,10001d68 <convertDecimalToBinary+0x28>
    {
        return 0;
10001d60:	0005883a 	mov	r2,zero
10001d64:	00000a06 	br	10001d90 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001d68:	e0bffe17 	ldw	r2,-8(fp)
10001d6c:	1400004c 	andi	r16,r2,1
10001d70:	e0bffe17 	ldw	r2,-8(fp)
10001d74:	1004d07a 	srli	r2,r2,1
10001d78:	1009883a 	mov	r4,r2
10001d7c:	0001d400 	call	10001d40 <convertDecimalToBinary>
10001d80:	1009883a 	mov	r4,r2
10001d84:	01400284 	movi	r5,10
10001d88:	0002c180 	call	10002c18 <__mulsi3>
10001d8c:	8085883a 	add	r2,r16,r2
    }
}
10001d90:	e6ffff04 	addi	sp,fp,-4
10001d94:	dfc00217 	ldw	ra,8(sp)
10001d98:	df000117 	ldw	fp,4(sp)
10001d9c:	dc000017 	ldw	r16,0(sp)
10001da0:	dec00304 	addi	sp,sp,12
10001da4:	f800283a 	ret

10001da8 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001da8:	defffa04 	addi	sp,sp,-24
10001dac:	dfc00515 	stw	ra,20(sp)
10001db0:	df000415 	stw	fp,16(sp)
10001db4:	df000404 	addi	fp,sp,16
10001db8:	e13ffe15 	stw	r4,-8(fp)
10001dbc:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001dc0:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001dc4:	e03ffd15 	stw	zero,-12(fp)
10001dc8:	00002706 	br	10001e68 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
10001dcc:	e0bffe17 	ldw	r2,-8(fp)
10001dd0:	e0ffff17 	ldw	r3,-4(fp)
10001dd4:	01c00284 	movi	r7,10
10001dd8:	0011883a 	mov	r8,zero
10001ddc:	1009883a 	mov	r4,r2
10001de0:	180b883a 	mov	r5,r3
10001de4:	380d883a 	mov	r6,r7
10001de8:	400f883a 	mov	r7,r8
10001dec:	00024d00 	call	100024d0 <__umoddi3>
10001df0:	1009883a 	mov	r4,r2
10001df4:	180b883a 	mov	r5,r3
10001df8:	2005883a 	mov	r2,r4
10001dfc:	2807883a 	mov	r3,r5
10001e00:	11000058 	cmpnei	r4,r2,1
10001e04:	2000081e 	bne	r4,zero,10001e28 <convertBinaryToDecimal+0x80>
10001e08:	1800071e 	bne	r3,zero,10001e28 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001e0c:	00c00044 	movi	r3,1
10001e10:	e0bffd17 	ldw	r2,-12(fp)
10001e14:	1884983a 	sll	r2,r3,r2
10001e18:	1007883a 	mov	r3,r2
10001e1c:	e0bffc17 	ldw	r2,-16(fp)
10001e20:	10c5883a 	add	r2,r2,r3
10001e24:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001e28:	e0bffe17 	ldw	r2,-8(fp)
10001e2c:	e0ffff17 	ldw	r3,-4(fp)
10001e30:	01c00284 	movi	r7,10
10001e34:	0011883a 	mov	r8,zero
10001e38:	1009883a 	mov	r4,r2
10001e3c:	180b883a 	mov	r5,r3
10001e40:	380d883a 	mov	r6,r7
10001e44:	400f883a 	mov	r7,r8
10001e48:	0001e900 	call	10001e90 <__udivdi3>
10001e4c:	1009883a 	mov	r4,r2
10001e50:	180b883a 	mov	r5,r3
10001e54:	e13ffe15 	stw	r4,-8(fp)
10001e58:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001e5c:	e0bffd17 	ldw	r2,-12(fp)
10001e60:	10800044 	addi	r2,r2,1
10001e64:	e0bffd15 	stw	r2,-12(fp)
10001e68:	e0bffe17 	ldw	r2,-8(fp)
10001e6c:	e0ffff17 	ldw	r3,-4(fp)
10001e70:	10c4b03a 	or	r2,r2,r3
10001e74:	103fd51e 	bne	r2,zero,10001dcc <__alt_data_end+0xf8001dcc>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
10001e78:	e0bffc17 	ldw	r2,-16(fp)
}
10001e7c:	e037883a 	mov	sp,fp
10001e80:	dfc00117 	ldw	ra,4(sp)
10001e84:	df000017 	ldw	fp,0(sp)
10001e88:	dec00204 	addi	sp,sp,8
10001e8c:	f800283a 	ret

10001e90 <__udivdi3>:
10001e90:	defff504 	addi	sp,sp,-44
10001e94:	dcc00415 	stw	r19,16(sp)
10001e98:	dc000115 	stw	r16,4(sp)
10001e9c:	dfc00a15 	stw	ra,40(sp)
10001ea0:	df000915 	stw	fp,36(sp)
10001ea4:	ddc00815 	stw	r23,32(sp)
10001ea8:	dd800715 	stw	r22,28(sp)
10001eac:	dd400615 	stw	r21,24(sp)
10001eb0:	dd000515 	stw	r20,20(sp)
10001eb4:	dc800315 	stw	r18,12(sp)
10001eb8:	dc400215 	stw	r17,8(sp)
10001ebc:	2027883a 	mov	r19,r4
10001ec0:	2821883a 	mov	r16,r5
10001ec4:	3800471e 	bne	r7,zero,10001fe4 <__udivdi3+0x154>
10001ec8:	3025883a 	mov	r18,r6
10001ecc:	2023883a 	mov	r17,r4
10001ed0:	2980592e 	bgeu	r5,r6,10002038 <__udivdi3+0x1a8>
10001ed4:	00bfffd4 	movui	r2,65535
10001ed8:	2829883a 	mov	r20,r5
10001edc:	1180b236 	bltu	r2,r6,100021a8 <__udivdi3+0x318>
10001ee0:	00803fc4 	movi	r2,255
10001ee4:	1181622e 	bgeu	r2,r6,10002470 <__udivdi3+0x5e0>
10001ee8:	00800204 	movi	r2,8
10001eec:	1007883a 	mov	r3,r2
10001ef0:	3084d83a 	srl	r2,r6,r2
10001ef4:	01040074 	movhi	r4,4097
10001ef8:	21046504 	addi	r4,r4,4500
10001efc:	2085883a 	add	r2,r4,r2
10001f00:	11000003 	ldbu	r4,0(r2)
10001f04:	20c9883a 	add	r4,r4,r3
10001f08:	00c00804 	movi	r3,32
10001f0c:	1907c83a 	sub	r3,r3,r4
10001f10:	18000526 	beq	r3,zero,10001f28 <__udivdi3+0x98>
10001f14:	80e0983a 	sll	r16,r16,r3
10001f18:	9908d83a 	srl	r4,r19,r4
10001f1c:	30e4983a 	sll	r18,r6,r3
10001f20:	98e2983a 	sll	r17,r19,r3
10001f24:	8128b03a 	or	r20,r16,r4
10001f28:	902ad43a 	srli	r21,r18,16
10001f2c:	a009883a 	mov	r4,r20
10001f30:	95bfffcc 	andi	r22,r18,65535
10001f34:	a80b883a 	mov	r5,r21
10001f38:	0002c100 	call	10002c10 <__umodsi3>
10001f3c:	a009883a 	mov	r4,r20
10001f40:	a80b883a 	mov	r5,r21
10001f44:	102f883a 	mov	r23,r2
10001f48:	0002c080 	call	10002c08 <__udivsi3>
10001f4c:	1009883a 	mov	r4,r2
10001f50:	b00b883a 	mov	r5,r22
10001f54:	1021883a 	mov	r16,r2
10001f58:	0002c180 	call	10002c18 <__mulsi3>
10001f5c:	b82e943a 	slli	r23,r23,16
10001f60:	8808d43a 	srli	r4,r17,16
10001f64:	b906b03a 	or	r3,r23,r4
10001f68:	1880052e 	bgeu	r3,r2,10001f80 <__udivdi3+0xf0>
10001f6c:	1c87883a 	add	r3,r3,r18
10001f70:	813fffc4 	addi	r4,r16,-1
10001f74:	1c800136 	bltu	r3,r18,10001f7c <__udivdi3+0xec>
10001f78:	18815236 	bltu	r3,r2,100024c4 <__udivdi3+0x634>
10001f7c:	2021883a 	mov	r16,r4
10001f80:	18a7c83a 	sub	r19,r3,r2
10001f84:	9809883a 	mov	r4,r19
10001f88:	a80b883a 	mov	r5,r21
10001f8c:	0002c100 	call	10002c10 <__umodsi3>
10001f90:	1029883a 	mov	r20,r2
10001f94:	9809883a 	mov	r4,r19
10001f98:	a80b883a 	mov	r5,r21
10001f9c:	a028943a 	slli	r20,r20,16
10001fa0:	0002c080 	call	10002c08 <__udivsi3>
10001fa4:	1009883a 	mov	r4,r2
10001fa8:	b00b883a 	mov	r5,r22
10001fac:	8c7fffcc 	andi	r17,r17,65535
10001fb0:	1027883a 	mov	r19,r2
10001fb4:	a462b03a 	or	r17,r20,r17
10001fb8:	0002c180 	call	10002c18 <__mulsi3>
10001fbc:	8880052e 	bgeu	r17,r2,10001fd4 <__udivdi3+0x144>
10001fc0:	8ca3883a 	add	r17,r17,r18
10001fc4:	98ffffc4 	addi	r3,r19,-1
10001fc8:	8c811036 	bltu	r17,r18,1000240c <__udivdi3+0x57c>
10001fcc:	88810f2e 	bgeu	r17,r2,1000240c <__udivdi3+0x57c>
10001fd0:	9cffff84 	addi	r19,r19,-2
10001fd4:	8020943a 	slli	r16,r16,16
10001fd8:	0007883a 	mov	r3,zero
10001fdc:	9c04b03a 	or	r2,r19,r16
10001fe0:	00006006 	br	10002164 <__udivdi3+0x2d4>
10001fe4:	29c05d36 	bltu	r5,r7,1000215c <__udivdi3+0x2cc>
10001fe8:	00bfffd4 	movui	r2,65535
10001fec:	11c0692e 	bgeu	r2,r7,10002194 <__udivdi3+0x304>
10001ff0:	00804034 	movhi	r2,256
10001ff4:	10bfffc4 	addi	r2,r2,-1
10001ff8:	11c10e2e 	bgeu	r2,r7,10002434 <__udivdi3+0x5a4>
10001ffc:	01400604 	movi	r5,24
10002000:	2811883a 	mov	r8,r5
10002004:	394ad83a 	srl	r5,r7,r5
10002008:	00840074 	movhi	r2,4097
1000200c:	10846504 	addi	r2,r2,4500
10002010:	114b883a 	add	r5,r2,r5
10002014:	29400003 	ldbu	r5,0(r5)
10002018:	00c00804 	movi	r3,32
1000201c:	2a0b883a 	add	r5,r5,r8
10002020:	196fc83a 	sub	r23,r3,r5
10002024:	b8006b1e 	bne	r23,zero,100021d4 <__udivdi3+0x344>
10002028:	3c011436 	bltu	r7,r16,1000247c <__udivdi3+0x5ec>
1000202c:	9985403a 	cmpgeu	r2,r19,r6
10002030:	0007883a 	mov	r3,zero
10002034:	00004b06 	br	10002164 <__udivdi3+0x2d4>
10002038:	3000041e 	bne	r6,zero,1000204c <__udivdi3+0x1bc>
1000203c:	01000044 	movi	r4,1
10002040:	000b883a 	mov	r5,zero
10002044:	0002c080 	call	10002c08 <__udivsi3>
10002048:	1025883a 	mov	r18,r2
1000204c:	00bfffd4 	movui	r2,65535
10002050:	14805b2e 	bgeu	r2,r18,100021c0 <__udivdi3+0x330>
10002054:	00804034 	movhi	r2,256
10002058:	10bfffc4 	addi	r2,r2,-1
1000205c:	1480fe2e 	bgeu	r2,r18,10002458 <__udivdi3+0x5c8>
10002060:	00800604 	movi	r2,24
10002064:	1007883a 	mov	r3,r2
10002068:	9084d83a 	srl	r2,r18,r2
1000206c:	01040074 	movhi	r4,4097
10002070:	21046504 	addi	r4,r4,4500
10002074:	2085883a 	add	r2,r4,r2
10002078:	11800003 	ldbu	r6,0(r2)
1000207c:	01c00804 	movi	r7,32
10002080:	30c7883a 	add	r3,r6,r3
10002084:	38cfc83a 	sub	r7,r7,r3
10002088:	3800a71e 	bne	r7,zero,10002328 <__udivdi3+0x498>
1000208c:	9028d43a 	srli	r20,r18,16
10002090:	84a1c83a 	sub	r16,r16,r18
10002094:	957fffcc 	andi	r21,r18,65535
10002098:	00c00044 	movi	r3,1
1000209c:	8009883a 	mov	r4,r16
100020a0:	a00b883a 	mov	r5,r20
100020a4:	d8c00015 	stw	r3,0(sp)
100020a8:	0002c100 	call	10002c10 <__umodsi3>
100020ac:	8009883a 	mov	r4,r16
100020b0:	a00b883a 	mov	r5,r20
100020b4:	102d883a 	mov	r22,r2
100020b8:	0002c080 	call	10002c08 <__udivsi3>
100020bc:	1009883a 	mov	r4,r2
100020c0:	a80b883a 	mov	r5,r21
100020c4:	1021883a 	mov	r16,r2
100020c8:	0002c180 	call	10002c18 <__mulsi3>
100020cc:	b02c943a 	slli	r22,r22,16
100020d0:	880ed43a 	srli	r7,r17,16
100020d4:	d8c00017 	ldw	r3,0(sp)
100020d8:	b1ccb03a 	or	r6,r22,r7
100020dc:	3080052e 	bgeu	r6,r2,100020f4 <__udivdi3+0x264>
100020e0:	348d883a 	add	r6,r6,r18
100020e4:	813fffc4 	addi	r4,r16,-1
100020e8:	34800136 	bltu	r6,r18,100020f0 <__udivdi3+0x260>
100020ec:	3080f236 	bltu	r6,r2,100024b8 <__udivdi3+0x628>
100020f0:	2021883a 	mov	r16,r4
100020f4:	30a7c83a 	sub	r19,r6,r2
100020f8:	9809883a 	mov	r4,r19
100020fc:	a00b883a 	mov	r5,r20
10002100:	d8c00015 	stw	r3,0(sp)
10002104:	0002c100 	call	10002c10 <__umodsi3>
10002108:	102d883a 	mov	r22,r2
1000210c:	9809883a 	mov	r4,r19
10002110:	a00b883a 	mov	r5,r20
10002114:	b02c943a 	slli	r22,r22,16
10002118:	0002c080 	call	10002c08 <__udivsi3>
1000211c:	1009883a 	mov	r4,r2
10002120:	a80b883a 	mov	r5,r21
10002124:	8c7fffcc 	andi	r17,r17,65535
10002128:	1027883a 	mov	r19,r2
1000212c:	b462b03a 	or	r17,r22,r17
10002130:	0002c180 	call	10002c18 <__mulsi3>
10002134:	d8c00017 	ldw	r3,0(sp)
10002138:	8880052e 	bgeu	r17,r2,10002150 <__udivdi3+0x2c0>
1000213c:	8ca3883a 	add	r17,r17,r18
10002140:	993fffc4 	addi	r4,r19,-1
10002144:	8c80af36 	bltu	r17,r18,10002404 <__udivdi3+0x574>
10002148:	8880ae2e 	bgeu	r17,r2,10002404 <__udivdi3+0x574>
1000214c:	9cffff84 	addi	r19,r19,-2
10002150:	8020943a 	slli	r16,r16,16
10002154:	9c04b03a 	or	r2,r19,r16
10002158:	00000206 	br	10002164 <__udivdi3+0x2d4>
1000215c:	0007883a 	mov	r3,zero
10002160:	0005883a 	mov	r2,zero
10002164:	dfc00a17 	ldw	ra,40(sp)
10002168:	df000917 	ldw	fp,36(sp)
1000216c:	ddc00817 	ldw	r23,32(sp)
10002170:	dd800717 	ldw	r22,28(sp)
10002174:	dd400617 	ldw	r21,24(sp)
10002178:	dd000517 	ldw	r20,20(sp)
1000217c:	dcc00417 	ldw	r19,16(sp)
10002180:	dc800317 	ldw	r18,12(sp)
10002184:	dc400217 	ldw	r17,8(sp)
10002188:	dc000117 	ldw	r16,4(sp)
1000218c:	dec00b04 	addi	sp,sp,44
10002190:	f800283a 	ret
10002194:	00803fc4 	movi	r2,255
10002198:	11c0a92e 	bgeu	r2,r7,10002440 <__udivdi3+0x5b0>
1000219c:	01400204 	movi	r5,8
100021a0:	2811883a 	mov	r8,r5
100021a4:	003f9706 	br	10002004 <__alt_data_end+0xf8002004>
100021a8:	00804034 	movhi	r2,256
100021ac:	10bfffc4 	addi	r2,r2,-1
100021b0:	1180a62e 	bgeu	r2,r6,1000244c <__udivdi3+0x5bc>
100021b4:	00800604 	movi	r2,24
100021b8:	1007883a 	mov	r3,r2
100021bc:	003f4c06 	br	10001ef0 <__alt_data_end+0xf8001ef0>
100021c0:	00803fc4 	movi	r2,255
100021c4:	1480a72e 	bgeu	r2,r18,10002464 <__udivdi3+0x5d4>
100021c8:	00800204 	movi	r2,8
100021cc:	1007883a 	mov	r3,r2
100021d0:	003fa506 	br	10002068 <__alt_data_end+0xf8002068>
100021d4:	3178d83a 	srl	fp,r6,r5
100021d8:	3dce983a 	sll	r7,r7,r23
100021dc:	8168d83a 	srl	r20,r16,r5
100021e0:	9950d83a 	srl	r8,r19,r5
100021e4:	3f38b03a 	or	fp,r7,fp
100021e8:	e024d43a 	srli	r18,fp,16
100021ec:	85e0983a 	sll	r16,r16,r23
100021f0:	a009883a 	mov	r4,r20
100021f4:	900b883a 	mov	r5,r18
100021f8:	8220b03a 	or	r16,r16,r8
100021fc:	35ea983a 	sll	r21,r6,r23
10002200:	0002c100 	call	10002c10 <__umodsi3>
10002204:	a009883a 	mov	r4,r20
10002208:	900b883a 	mov	r5,r18
1000220c:	1023883a 	mov	r17,r2
10002210:	e5bfffcc 	andi	r22,fp,65535
10002214:	0002c080 	call	10002c08 <__udivsi3>
10002218:	1009883a 	mov	r4,r2
1000221c:	b00b883a 	mov	r5,r22
10002220:	1029883a 	mov	r20,r2
10002224:	0002c180 	call	10002c18 <__mulsi3>
10002228:	8806943a 	slli	r3,r17,16
1000222c:	8014d43a 	srli	r10,r16,16
10002230:	1a92b03a 	or	r9,r3,r10
10002234:	4880042e 	bgeu	r9,r2,10002248 <__udivdi3+0x3b8>
10002238:	4f13883a 	add	r9,r9,fp
1000223c:	a0ffffc4 	addi	r3,r20,-1
10002240:	4f00952e 	bgeu	r9,fp,10002498 <__udivdi3+0x608>
10002244:	1829883a 	mov	r20,r3
10002248:	48a3c83a 	sub	r17,r9,r2
1000224c:	8809883a 	mov	r4,r17
10002250:	900b883a 	mov	r5,r18
10002254:	0002c100 	call	10002c10 <__umodsi3>
10002258:	8809883a 	mov	r4,r17
1000225c:	900b883a 	mov	r5,r18
10002260:	d8800015 	stw	r2,0(sp)
10002264:	0002c080 	call	10002c08 <__udivsi3>
10002268:	1009883a 	mov	r4,r2
1000226c:	b00b883a 	mov	r5,r22
10002270:	1023883a 	mov	r17,r2
10002274:	0002c180 	call	10002c18 <__mulsi3>
10002278:	d8c00017 	ldw	r3,0(sp)
1000227c:	823fffcc 	andi	r8,r16,65535
10002280:	1806943a 	slli	r3,r3,16
10002284:	1a20b03a 	or	r16,r3,r8
10002288:	8080042e 	bgeu	r16,r2,1000229c <__udivdi3+0x40c>
1000228c:	8721883a 	add	r16,r16,fp
10002290:	88ffffc4 	addi	r3,r17,-1
10002294:	87007c2e 	bgeu	r16,fp,10002488 <__udivdi3+0x5f8>
10002298:	1823883a 	mov	r17,r3
1000229c:	a028943a 	slli	r20,r20,16
100022a0:	acbfffcc 	andi	r18,r21,65535
100022a4:	900b883a 	mov	r5,r18
100022a8:	8d28b03a 	or	r20,r17,r20
100022ac:	a022d43a 	srli	r17,r20,16
100022b0:	a5bfffcc 	andi	r22,r20,65535
100022b4:	b009883a 	mov	r4,r22
100022b8:	a82ad43a 	srli	r21,r21,16
100022bc:	80a1c83a 	sub	r16,r16,r2
100022c0:	0002c180 	call	10002c18 <__mulsi3>
100022c4:	8809883a 	mov	r4,r17
100022c8:	900b883a 	mov	r5,r18
100022cc:	1039883a 	mov	fp,r2
100022d0:	0002c180 	call	10002c18 <__mulsi3>
100022d4:	8809883a 	mov	r4,r17
100022d8:	a80b883a 	mov	r5,r21
100022dc:	1025883a 	mov	r18,r2
100022e0:	0002c180 	call	10002c18 <__mulsi3>
100022e4:	b009883a 	mov	r4,r22
100022e8:	a80b883a 	mov	r5,r21
100022ec:	1023883a 	mov	r17,r2
100022f0:	0002c180 	call	10002c18 <__mulsi3>
100022f4:	e006d43a 	srli	r3,fp,16
100022f8:	9085883a 	add	r2,r18,r2
100022fc:	10c7883a 	add	r3,r2,r3
10002300:	1c80022e 	bgeu	r3,r18,1000230c <__udivdi3+0x47c>
10002304:	00800074 	movhi	r2,1
10002308:	88a3883a 	add	r17,r17,r2
1000230c:	1808d43a 	srli	r4,r3,16
10002310:	8909883a 	add	r4,r17,r4
10002314:	81004436 	bltu	r16,r4,10002428 <__udivdi3+0x598>
10002318:	81003e26 	beq	r16,r4,10002414 <__udivdi3+0x584>
1000231c:	a005883a 	mov	r2,r20
10002320:	0007883a 	mov	r3,zero
10002324:	003f8f06 	br	10002164 <__alt_data_end+0xf8002164>
10002328:	91e4983a 	sll	r18,r18,r7
1000232c:	80eed83a 	srl	r23,r16,r3
10002330:	81cc983a 	sll	r6,r16,r7
10002334:	9028d43a 	srli	r20,r18,16
10002338:	98c6d83a 	srl	r3,r19,r3
1000233c:	b809883a 	mov	r4,r23
10002340:	a00b883a 	mov	r5,r20
10002344:	30ecb03a 	or	r22,r6,r3
10002348:	99e2983a 	sll	r17,r19,r7
1000234c:	0002c100 	call	10002c10 <__umodsi3>
10002350:	b809883a 	mov	r4,r23
10002354:	a00b883a 	mov	r5,r20
10002358:	1021883a 	mov	r16,r2
1000235c:	957fffcc 	andi	r21,r18,65535
10002360:	0002c080 	call	10002c08 <__udivsi3>
10002364:	a80b883a 	mov	r5,r21
10002368:	1009883a 	mov	r4,r2
1000236c:	102f883a 	mov	r23,r2
10002370:	0002c180 	call	10002c18 <__mulsi3>
10002374:	8020943a 	slli	r16,r16,16
10002378:	b00ad43a 	srli	r5,r22,16
1000237c:	814cb03a 	or	r6,r16,r5
10002380:	3080062e 	bgeu	r6,r2,1000239c <__udivdi3+0x50c>
10002384:	348d883a 	add	r6,r6,r18
10002388:	b8ffffc4 	addi	r3,r23,-1
1000238c:	34804836 	bltu	r6,r18,100024b0 <__udivdi3+0x620>
10002390:	3080472e 	bgeu	r6,r2,100024b0 <__udivdi3+0x620>
10002394:	bdffff84 	addi	r23,r23,-2
10002398:	348d883a 	add	r6,r6,r18
1000239c:	30a7c83a 	sub	r19,r6,r2
100023a0:	9809883a 	mov	r4,r19
100023a4:	a00b883a 	mov	r5,r20
100023a8:	0002c100 	call	10002c10 <__umodsi3>
100023ac:	9809883a 	mov	r4,r19
100023b0:	a00b883a 	mov	r5,r20
100023b4:	1039883a 	mov	fp,r2
100023b8:	0002c080 	call	10002c08 <__udivsi3>
100023bc:	1009883a 	mov	r4,r2
100023c0:	a80b883a 	mov	r5,r21
100023c4:	e038943a 	slli	fp,fp,16
100023c8:	1027883a 	mov	r19,r2
100023cc:	0002c180 	call	10002c18 <__mulsi3>
100023d0:	b1bfffcc 	andi	r6,r22,65535
100023d4:	e18cb03a 	or	r6,fp,r6
100023d8:	3080062e 	bgeu	r6,r2,100023f4 <__udivdi3+0x564>
100023dc:	348d883a 	add	r6,r6,r18
100023e0:	98ffffc4 	addi	r3,r19,-1
100023e4:	34803036 	bltu	r6,r18,100024a8 <__udivdi3+0x618>
100023e8:	30802f2e 	bgeu	r6,r2,100024a8 <__udivdi3+0x618>
100023ec:	9cffff84 	addi	r19,r19,-2
100023f0:	348d883a 	add	r6,r6,r18
100023f4:	b82e943a 	slli	r23,r23,16
100023f8:	30a1c83a 	sub	r16,r6,r2
100023fc:	9dc6b03a 	or	r3,r19,r23
10002400:	003f2606 	br	1000209c <__alt_data_end+0xf800209c>
10002404:	2027883a 	mov	r19,r4
10002408:	003f5106 	br	10002150 <__alt_data_end+0xf8002150>
1000240c:	1827883a 	mov	r19,r3
10002410:	003ef006 	br	10001fd4 <__alt_data_end+0xf8001fd4>
10002414:	1808943a 	slli	r4,r3,16
10002418:	9dc6983a 	sll	r3,r19,r23
1000241c:	e73fffcc 	andi	fp,fp,65535
10002420:	2709883a 	add	r4,r4,fp
10002424:	193fbd2e 	bgeu	r3,r4,1000231c <__alt_data_end+0xf800231c>
10002428:	a0bfffc4 	addi	r2,r20,-1
1000242c:	0007883a 	mov	r3,zero
10002430:	003f4c06 	br	10002164 <__alt_data_end+0xf8002164>
10002434:	01400404 	movi	r5,16
10002438:	2811883a 	mov	r8,r5
1000243c:	003ef106 	br	10002004 <__alt_data_end+0xf8002004>
10002440:	000b883a 	mov	r5,zero
10002444:	0011883a 	mov	r8,zero
10002448:	003eee06 	br	10002004 <__alt_data_end+0xf8002004>
1000244c:	00800404 	movi	r2,16
10002450:	1007883a 	mov	r3,r2
10002454:	003ea606 	br	10001ef0 <__alt_data_end+0xf8001ef0>
10002458:	00800404 	movi	r2,16
1000245c:	1007883a 	mov	r3,r2
10002460:	003f0106 	br	10002068 <__alt_data_end+0xf8002068>
10002464:	0005883a 	mov	r2,zero
10002468:	0007883a 	mov	r3,zero
1000246c:	003efe06 	br	10002068 <__alt_data_end+0xf8002068>
10002470:	0005883a 	mov	r2,zero
10002474:	0007883a 	mov	r3,zero
10002478:	003e9d06 	br	10001ef0 <__alt_data_end+0xf8001ef0>
1000247c:	0007883a 	mov	r3,zero
10002480:	00800044 	movi	r2,1
10002484:	003f3706 	br	10002164 <__alt_data_end+0xf8002164>
10002488:	80bf832e 	bgeu	r16,r2,10002298 <__alt_data_end+0xf8002298>
1000248c:	8c7fff84 	addi	r17,r17,-2
10002490:	8721883a 	add	r16,r16,fp
10002494:	003f8106 	br	1000229c <__alt_data_end+0xf800229c>
10002498:	48bf6a2e 	bgeu	r9,r2,10002244 <__alt_data_end+0xf8002244>
1000249c:	a53fff84 	addi	r20,r20,-2
100024a0:	4f13883a 	add	r9,r9,fp
100024a4:	003f6806 	br	10002248 <__alt_data_end+0xf8002248>
100024a8:	1827883a 	mov	r19,r3
100024ac:	003fd106 	br	100023f4 <__alt_data_end+0xf80023f4>
100024b0:	182f883a 	mov	r23,r3
100024b4:	003fb906 	br	1000239c <__alt_data_end+0xf800239c>
100024b8:	843fff84 	addi	r16,r16,-2
100024bc:	348d883a 	add	r6,r6,r18
100024c0:	003f0c06 	br	100020f4 <__alt_data_end+0xf80020f4>
100024c4:	843fff84 	addi	r16,r16,-2
100024c8:	1c87883a 	add	r3,r3,r18
100024cc:	003eac06 	br	10001f80 <__alt_data_end+0xf8001f80>

100024d0 <__umoddi3>:
100024d0:	defff404 	addi	sp,sp,-48
100024d4:	dd800815 	stw	r22,32(sp)
100024d8:	dc400315 	stw	r17,12(sp)
100024dc:	dc000215 	stw	r16,8(sp)
100024e0:	dfc00b15 	stw	ra,44(sp)
100024e4:	df000a15 	stw	fp,40(sp)
100024e8:	ddc00915 	stw	r23,36(sp)
100024ec:	dd400715 	stw	r21,28(sp)
100024f0:	dd000615 	stw	r20,24(sp)
100024f4:	dcc00515 	stw	r19,20(sp)
100024f8:	dc800415 	stw	r18,16(sp)
100024fc:	2021883a 	mov	r16,r4
10002500:	2823883a 	mov	r17,r5
10002504:	282d883a 	mov	r22,r5
10002508:	38003c1e 	bne	r7,zero,100025fc <__umoddi3+0x12c>
1000250c:	3027883a 	mov	r19,r6
10002510:	2029883a 	mov	r20,r4
10002514:	2980522e 	bgeu	r5,r6,10002660 <__umoddi3+0x190>
10002518:	00bfffd4 	movui	r2,65535
1000251c:	1180a436 	bltu	r2,r6,100027b0 <__umoddi3+0x2e0>
10002520:	00803fc4 	movi	r2,255
10002524:	11815e2e 	bgeu	r2,r6,10002aa0 <__umoddi3+0x5d0>
10002528:	01400204 	movi	r5,8
1000252c:	2805883a 	mov	r2,r5
10002530:	314ad83a 	srl	r5,r6,r5
10002534:	00c40074 	movhi	r3,4097
10002538:	18c46504 	addi	r3,r3,4500
1000253c:	194b883a 	add	r5,r3,r5
10002540:	29000003 	ldbu	r4,0(r5)
10002544:	2089883a 	add	r4,r4,r2
10002548:	00800804 	movi	r2,32
1000254c:	1105c83a 	sub	r2,r2,r4
10002550:	10010c26 	beq	r2,zero,10002984 <__umoddi3+0x4b4>
10002554:	88a2983a 	sll	r17,r17,r2
10002558:	8108d83a 	srl	r4,r16,r4
1000255c:	30a6983a 	sll	r19,r6,r2
10002560:	80a8983a 	sll	r20,r16,r2
10002564:	1025883a 	mov	r18,r2
10002568:	892cb03a 	or	r22,r17,r4
1000256c:	9822d43a 	srli	r17,r19,16
10002570:	b009883a 	mov	r4,r22
10002574:	9d7fffcc 	andi	r21,r19,65535
10002578:	880b883a 	mov	r5,r17
1000257c:	0002c100 	call	10002c10 <__umodsi3>
10002580:	b009883a 	mov	r4,r22
10002584:	880b883a 	mov	r5,r17
10002588:	102f883a 	mov	r23,r2
1000258c:	0002c080 	call	10002c08 <__udivsi3>
10002590:	1009883a 	mov	r4,r2
10002594:	a80b883a 	mov	r5,r21
10002598:	0002c180 	call	10002c18 <__mulsi3>
1000259c:	b82e943a 	slli	r23,r23,16
100025a0:	a008d43a 	srli	r4,r20,16
100025a4:	b906b03a 	or	r3,r23,r4
100025a8:	1880042e 	bgeu	r3,r2,100025bc <__umoddi3+0xec>
100025ac:	1cc7883a 	add	r3,r3,r19
100025b0:	1cc00236 	bltu	r3,r19,100025bc <__umoddi3+0xec>
100025b4:	1880012e 	bgeu	r3,r2,100025bc <__umoddi3+0xec>
100025b8:	1cc7883a 	add	r3,r3,r19
100025bc:	18a1c83a 	sub	r16,r3,r2
100025c0:	8009883a 	mov	r4,r16
100025c4:	880b883a 	mov	r5,r17
100025c8:	0002c100 	call	10002c10 <__umodsi3>
100025cc:	8009883a 	mov	r4,r16
100025d0:	880b883a 	mov	r5,r17
100025d4:	102d883a 	mov	r22,r2
100025d8:	0002c080 	call	10002c08 <__udivsi3>
100025dc:	1009883a 	mov	r4,r2
100025e0:	a80b883a 	mov	r5,r21
100025e4:	b02c943a 	slli	r22,r22,16
100025e8:	0002c180 	call	10002c18 <__mulsi3>
100025ec:	a13fffcc 	andi	r4,r20,65535
100025f0:	b106b03a 	or	r3,r22,r4
100025f4:	1880572e 	bgeu	r3,r2,10002754 <__umoddi3+0x284>
100025f8:	00005206 	br	10002744 <__umoddi3+0x274>
100025fc:	29c05936 	bltu	r5,r7,10002764 <__umoddi3+0x294>
10002600:	00bfffd4 	movui	r2,65535
10002604:	11c0652e 	bgeu	r2,r7,1000279c <__umoddi3+0x2cc>
10002608:	00804034 	movhi	r2,256
1000260c:	10bfffc4 	addi	r2,r2,-1
10002610:	11c1172e 	bgeu	r2,r7,10002a70 <__umoddi3+0x5a0>
10002614:	01400604 	movi	r5,24
10002618:	282b883a 	mov	r21,r5
1000261c:	394ad83a 	srl	r5,r7,r5
10002620:	00c40074 	movhi	r3,4097
10002624:	18c46504 	addi	r3,r3,4500
10002628:	194b883a 	add	r5,r3,r5
1000262c:	28800003 	ldbu	r2,0(r5)
10002630:	00c00804 	movi	r3,32
10002634:	156b883a 	add	r21,r2,r21
10002638:	1d69c83a 	sub	r20,r3,r21
1000263c:	a000671e 	bne	r20,zero,100027dc <__umoddi3+0x30c>
10002640:	3c400136 	bltu	r7,r17,10002648 <__umoddi3+0x178>
10002644:	81812336 	bltu	r16,r6,10002ad4 <__umoddi3+0x604>
10002648:	8185c83a 	sub	r2,r16,r6
1000264c:	89e3c83a 	sub	r17,r17,r7
10002650:	8087803a 	cmpltu	r3,r16,r2
10002654:	88edc83a 	sub	r22,r17,r3
10002658:	b007883a 	mov	r3,r22
1000265c:	00004306 	br	1000276c <__umoddi3+0x29c>
10002660:	3000041e 	bne	r6,zero,10002674 <__umoddi3+0x1a4>
10002664:	01000044 	movi	r4,1
10002668:	000b883a 	mov	r5,zero
1000266c:	0002c080 	call	10002c08 <__udivsi3>
10002670:	1027883a 	mov	r19,r2
10002674:	00bfffd4 	movui	r2,65535
10002678:	14c0532e 	bgeu	r2,r19,100027c8 <__umoddi3+0x2f8>
1000267c:	00804034 	movhi	r2,256
10002680:	10bfffc4 	addi	r2,r2,-1
10002684:	14c1032e 	bgeu	r2,r19,10002a94 <__umoddi3+0x5c4>
10002688:	00800604 	movi	r2,24
1000268c:	1007883a 	mov	r3,r2
10002690:	9884d83a 	srl	r2,r19,r2
10002694:	01040074 	movhi	r4,4097
10002698:	21046504 	addi	r4,r4,4500
1000269c:	2085883a 	add	r2,r4,r2
100026a0:	11000003 	ldbu	r4,0(r2)
100026a4:	00800804 	movi	r2,32
100026a8:	20c7883a 	add	r3,r4,r3
100026ac:	10c5c83a 	sub	r2,r2,r3
100026b0:	1000b61e 	bne	r2,zero,1000298c <__umoddi3+0x4bc>
100026b4:	982ad43a 	srli	r21,r19,16
100026b8:	8ce3c83a 	sub	r17,r17,r19
100026bc:	9dbfffcc 	andi	r22,r19,65535
100026c0:	0025883a 	mov	r18,zero
100026c4:	8809883a 	mov	r4,r17
100026c8:	a80b883a 	mov	r5,r21
100026cc:	0002c100 	call	10002c10 <__umodsi3>
100026d0:	8809883a 	mov	r4,r17
100026d4:	a80b883a 	mov	r5,r21
100026d8:	102f883a 	mov	r23,r2
100026dc:	0002c080 	call	10002c08 <__udivsi3>
100026e0:	1009883a 	mov	r4,r2
100026e4:	b00b883a 	mov	r5,r22
100026e8:	0002c180 	call	10002c18 <__mulsi3>
100026ec:	b82e943a 	slli	r23,r23,16
100026f0:	a008d43a 	srli	r4,r20,16
100026f4:	b906b03a 	or	r3,r23,r4
100026f8:	1880032e 	bgeu	r3,r2,10002708 <__umoddi3+0x238>
100026fc:	1cc7883a 	add	r3,r3,r19
10002700:	1cc00136 	bltu	r3,r19,10002708 <__umoddi3+0x238>
10002704:	1880f136 	bltu	r3,r2,10002acc <__umoddi3+0x5fc>
10002708:	18a1c83a 	sub	r16,r3,r2
1000270c:	8009883a 	mov	r4,r16
10002710:	a80b883a 	mov	r5,r21
10002714:	0002c100 	call	10002c10 <__umodsi3>
10002718:	8009883a 	mov	r4,r16
1000271c:	a80b883a 	mov	r5,r21
10002720:	1023883a 	mov	r17,r2
10002724:	0002c080 	call	10002c08 <__udivsi3>
10002728:	1009883a 	mov	r4,r2
1000272c:	b00b883a 	mov	r5,r22
10002730:	8822943a 	slli	r17,r17,16
10002734:	0002c180 	call	10002c18 <__mulsi3>
10002738:	a13fffcc 	andi	r4,r20,65535
1000273c:	8906b03a 	or	r3,r17,r4
10002740:	1880042e 	bgeu	r3,r2,10002754 <__umoddi3+0x284>
10002744:	1cc7883a 	add	r3,r3,r19
10002748:	1cc00236 	bltu	r3,r19,10002754 <__umoddi3+0x284>
1000274c:	1880012e 	bgeu	r3,r2,10002754 <__umoddi3+0x284>
10002750:	1cc7883a 	add	r3,r3,r19
10002754:	1887c83a 	sub	r3,r3,r2
10002758:	1c84d83a 	srl	r2,r3,r18
1000275c:	0007883a 	mov	r3,zero
10002760:	00000206 	br	1000276c <__umoddi3+0x29c>
10002764:	2005883a 	mov	r2,r4
10002768:	2807883a 	mov	r3,r5
1000276c:	dfc00b17 	ldw	ra,44(sp)
10002770:	df000a17 	ldw	fp,40(sp)
10002774:	ddc00917 	ldw	r23,36(sp)
10002778:	dd800817 	ldw	r22,32(sp)
1000277c:	dd400717 	ldw	r21,28(sp)
10002780:	dd000617 	ldw	r20,24(sp)
10002784:	dcc00517 	ldw	r19,20(sp)
10002788:	dc800417 	ldw	r18,16(sp)
1000278c:	dc400317 	ldw	r17,12(sp)
10002790:	dc000217 	ldw	r16,8(sp)
10002794:	dec00c04 	addi	sp,sp,48
10002798:	f800283a 	ret
1000279c:	00803fc4 	movi	r2,255
100027a0:	11c0b02e 	bgeu	r2,r7,10002a64 <__umoddi3+0x594>
100027a4:	01400204 	movi	r5,8
100027a8:	282b883a 	mov	r21,r5
100027ac:	003f9b06 	br	1000261c <__alt_data_end+0xf800261c>
100027b0:	00804034 	movhi	r2,256
100027b4:	10bfffc4 	addi	r2,r2,-1
100027b8:	1180b02e 	bgeu	r2,r6,10002a7c <__umoddi3+0x5ac>
100027bc:	01400604 	movi	r5,24
100027c0:	2805883a 	mov	r2,r5
100027c4:	003f5a06 	br	10002530 <__alt_data_end+0xf8002530>
100027c8:	00803fc4 	movi	r2,255
100027cc:	14c0ae2e 	bgeu	r2,r19,10002a88 <__umoddi3+0x5b8>
100027d0:	00800204 	movi	r2,8
100027d4:	1007883a 	mov	r3,r2
100027d8:	003fad06 	br	10002690 <__alt_data_end+0xf8002690>
100027dc:	3d0a983a 	sll	r5,r7,r20
100027e0:	356cd83a 	srl	r22,r6,r21
100027e4:	8d78d83a 	srl	fp,r17,r21
100027e8:	8d10983a 	sll	r8,r17,r20
100027ec:	2dacb03a 	or	r22,r5,r22
100027f0:	b02ed43a 	srli	r23,r22,16
100027f4:	8564d83a 	srl	r18,r16,r21
100027f8:	e009883a 	mov	r4,fp
100027fc:	b80b883a 	mov	r5,r23
10002800:	44a4b03a 	or	r18,r8,r18
10002804:	3526983a 	sll	r19,r6,r20
10002808:	0002c100 	call	10002c10 <__umodsi3>
1000280c:	e009883a 	mov	r4,fp
10002810:	b80b883a 	mov	r5,r23
10002814:	b47fffcc 	andi	r17,r22,65535
10002818:	d8800015 	stw	r2,0(sp)
1000281c:	0002c080 	call	10002c08 <__udivsi3>
10002820:	1009883a 	mov	r4,r2
10002824:	880b883a 	mov	r5,r17
10002828:	1039883a 	mov	fp,r2
1000282c:	0002c180 	call	10002c18 <__mulsi3>
10002830:	d9800017 	ldw	r6,0(sp)
10002834:	9008d43a 	srli	r4,r18,16
10002838:	8520983a 	sll	r16,r16,r20
1000283c:	300c943a 	slli	r6,r6,16
10002840:	3106b03a 	or	r3,r6,r4
10002844:	1880042e 	bgeu	r3,r2,10002858 <__umoddi3+0x388>
10002848:	1d87883a 	add	r3,r3,r22
1000284c:	e13fffc4 	addi	r4,fp,-1
10002850:	1d809a2e 	bgeu	r3,r22,10002abc <__umoddi3+0x5ec>
10002854:	2039883a 	mov	fp,r4
10002858:	1887c83a 	sub	r3,r3,r2
1000285c:	1809883a 	mov	r4,r3
10002860:	b80b883a 	mov	r5,r23
10002864:	d8c00115 	stw	r3,4(sp)
10002868:	0002c100 	call	10002c10 <__umodsi3>
1000286c:	d8c00117 	ldw	r3,4(sp)
10002870:	b80b883a 	mov	r5,r23
10002874:	d8800015 	stw	r2,0(sp)
10002878:	1809883a 	mov	r4,r3
1000287c:	0002c080 	call	10002c08 <__udivsi3>
10002880:	880b883a 	mov	r5,r17
10002884:	1009883a 	mov	r4,r2
10002888:	102f883a 	mov	r23,r2
1000288c:	0002c180 	call	10002c18 <__mulsi3>
10002890:	d9800017 	ldw	r6,0(sp)
10002894:	947fffcc 	andi	r17,r18,65535
10002898:	300c943a 	slli	r6,r6,16
1000289c:	3464b03a 	or	r18,r6,r17
100028a0:	9080042e 	bgeu	r18,r2,100028b4 <__umoddi3+0x3e4>
100028a4:	95a5883a 	add	r18,r18,r22
100028a8:	b8ffffc4 	addi	r3,r23,-1
100028ac:	95807f2e 	bgeu	r18,r22,10002aac <__umoddi3+0x5dc>
100028b0:	182f883a 	mov	r23,r3
100028b4:	e038943a 	slli	fp,fp,16
100028b8:	980cd43a 	srli	r6,r19,16
100028bc:	98ffffcc 	andi	r3,r19,65535
100028c0:	bf38b03a 	or	fp,r23,fp
100028c4:	e02ed43a 	srli	r23,fp,16
100028c8:	e73fffcc 	andi	fp,fp,65535
100028cc:	180b883a 	mov	r5,r3
100028d0:	e009883a 	mov	r4,fp
100028d4:	d9800015 	stw	r6,0(sp)
100028d8:	d8c00115 	stw	r3,4(sp)
100028dc:	90a5c83a 	sub	r18,r18,r2
100028e0:	0002c180 	call	10002c18 <__mulsi3>
100028e4:	d8c00117 	ldw	r3,4(sp)
100028e8:	b809883a 	mov	r4,r23
100028ec:	1023883a 	mov	r17,r2
100028f0:	180b883a 	mov	r5,r3
100028f4:	0002c180 	call	10002c18 <__mulsi3>
100028f8:	d9800017 	ldw	r6,0(sp)
100028fc:	b809883a 	mov	r4,r23
10002900:	d8800115 	stw	r2,4(sp)
10002904:	300b883a 	mov	r5,r6
10002908:	302f883a 	mov	r23,r6
1000290c:	0002c180 	call	10002c18 <__mulsi3>
10002910:	e009883a 	mov	r4,fp
10002914:	b80b883a 	mov	r5,r23
10002918:	d8800015 	stw	r2,0(sp)
1000291c:	0002c180 	call	10002c18 <__mulsi3>
10002920:	d8c00117 	ldw	r3,4(sp)
10002924:	880cd43a 	srli	r6,r17,16
10002928:	d9c00017 	ldw	r7,0(sp)
1000292c:	1885883a 	add	r2,r3,r2
10002930:	118d883a 	add	r6,r2,r6
10002934:	30c0022e 	bgeu	r6,r3,10002940 <__umoddi3+0x470>
10002938:	00800074 	movhi	r2,1
1000293c:	388f883a 	add	r7,r7,r2
10002940:	3006d43a 	srli	r3,r6,16
10002944:	300c943a 	slli	r6,r6,16
10002948:	8c7fffcc 	andi	r17,r17,65535
1000294c:	38c7883a 	add	r3,r7,r3
10002950:	3463883a 	add	r17,r6,r17
10002954:	90c03d36 	bltu	r18,r3,10002a4c <__umoddi3+0x57c>
10002958:	90c06026 	beq	r18,r3,10002adc <__umoddi3+0x60c>
1000295c:	90c9c83a 	sub	r4,r18,r3
10002960:	880f883a 	mov	r7,r17
10002964:	81cfc83a 	sub	r7,r16,r7
10002968:	81c7803a 	cmpltu	r3,r16,r7
1000296c:	20c7c83a 	sub	r3,r4,r3
10002970:	1d44983a 	sll	r2,r3,r21
10002974:	3d0ed83a 	srl	r7,r7,r20
10002978:	1d06d83a 	srl	r3,r3,r20
1000297c:	11c4b03a 	or	r2,r2,r7
10002980:	003f7a06 	br	1000276c <__alt_data_end+0xf800276c>
10002984:	0025883a 	mov	r18,zero
10002988:	003ef806 	br	1000256c <__alt_data_end+0xf800256c>
1000298c:	98a6983a 	sll	r19,r19,r2
10002990:	88e8d83a 	srl	r20,r17,r3
10002994:	80c6d83a 	srl	r3,r16,r3
10002998:	982ad43a 	srli	r21,r19,16
1000299c:	88a2983a 	sll	r17,r17,r2
100029a0:	a009883a 	mov	r4,r20
100029a4:	a80b883a 	mov	r5,r21
100029a8:	88eeb03a 	or	r23,r17,r3
100029ac:	1025883a 	mov	r18,r2
100029b0:	0002c100 	call	10002c10 <__umodsi3>
100029b4:	a009883a 	mov	r4,r20
100029b8:	a80b883a 	mov	r5,r21
100029bc:	1023883a 	mov	r17,r2
100029c0:	9dbfffcc 	andi	r22,r19,65535
100029c4:	0002c080 	call	10002c08 <__udivsi3>
100029c8:	1009883a 	mov	r4,r2
100029cc:	b00b883a 	mov	r5,r22
100029d0:	0002c180 	call	10002c18 <__mulsi3>
100029d4:	8822943a 	slli	r17,r17,16
100029d8:	b808d43a 	srli	r4,r23,16
100029dc:	84a8983a 	sll	r20,r16,r18
100029e0:	8906b03a 	or	r3,r17,r4
100029e4:	1880042e 	bgeu	r3,r2,100029f8 <__umoddi3+0x528>
100029e8:	1cc7883a 	add	r3,r3,r19
100029ec:	1cc00236 	bltu	r3,r19,100029f8 <__umoddi3+0x528>
100029f0:	1880012e 	bgeu	r3,r2,100029f8 <__umoddi3+0x528>
100029f4:	1cc7883a 	add	r3,r3,r19
100029f8:	18a1c83a 	sub	r16,r3,r2
100029fc:	8009883a 	mov	r4,r16
10002a00:	a80b883a 	mov	r5,r21
10002a04:	0002c100 	call	10002c10 <__umodsi3>
10002a08:	8009883a 	mov	r4,r16
10002a0c:	a80b883a 	mov	r5,r21
10002a10:	1039883a 	mov	fp,r2
10002a14:	0002c080 	call	10002c08 <__udivsi3>
10002a18:	1009883a 	mov	r4,r2
10002a1c:	b00b883a 	mov	r5,r22
10002a20:	0002c180 	call	10002c18 <__mulsi3>
10002a24:	e006943a 	slli	r3,fp,16
10002a28:	b93fffcc 	andi	r4,r23,65535
10002a2c:	1906b03a 	or	r3,r3,r4
10002a30:	1880042e 	bgeu	r3,r2,10002a44 <__umoddi3+0x574>
10002a34:	1cc7883a 	add	r3,r3,r19
10002a38:	1cc00236 	bltu	r3,r19,10002a44 <__umoddi3+0x574>
10002a3c:	1880012e 	bgeu	r3,r2,10002a44 <__umoddi3+0x574>
10002a40:	1cc7883a 	add	r3,r3,r19
10002a44:	18a3c83a 	sub	r17,r3,r2
10002a48:	003f1e06 	br	100026c4 <__alt_data_end+0xf80026c4>
10002a4c:	8ccfc83a 	sub	r7,r17,r19
10002a50:	1d89c83a 	sub	r4,r3,r22
10002a54:	89e3803a 	cmpltu	r17,r17,r7
10002a58:	2463c83a 	sub	r17,r4,r17
10002a5c:	9449c83a 	sub	r4,r18,r17
10002a60:	003fc006 	br	10002964 <__alt_data_end+0xf8002964>
10002a64:	000b883a 	mov	r5,zero
10002a68:	002b883a 	mov	r21,zero
10002a6c:	003eeb06 	br	1000261c <__alt_data_end+0xf800261c>
10002a70:	01400404 	movi	r5,16
10002a74:	282b883a 	mov	r21,r5
10002a78:	003ee806 	br	1000261c <__alt_data_end+0xf800261c>
10002a7c:	01400404 	movi	r5,16
10002a80:	2805883a 	mov	r2,r5
10002a84:	003eaa06 	br	10002530 <__alt_data_end+0xf8002530>
10002a88:	0005883a 	mov	r2,zero
10002a8c:	0007883a 	mov	r3,zero
10002a90:	003eff06 	br	10002690 <__alt_data_end+0xf8002690>
10002a94:	00800404 	movi	r2,16
10002a98:	1007883a 	mov	r3,r2
10002a9c:	003efc06 	br	10002690 <__alt_data_end+0xf8002690>
10002aa0:	000b883a 	mov	r5,zero
10002aa4:	0005883a 	mov	r2,zero
10002aa8:	003ea106 	br	10002530 <__alt_data_end+0xf8002530>
10002aac:	90bf802e 	bgeu	r18,r2,100028b0 <__alt_data_end+0xf80028b0>
10002ab0:	bdffff84 	addi	r23,r23,-2
10002ab4:	95a5883a 	add	r18,r18,r22
10002ab8:	003f7e06 	br	100028b4 <__alt_data_end+0xf80028b4>
10002abc:	18bf652e 	bgeu	r3,r2,10002854 <__alt_data_end+0xf8002854>
10002ac0:	e73fff84 	addi	fp,fp,-2
10002ac4:	1d87883a 	add	r3,r3,r22
10002ac8:	003f6306 	br	10002858 <__alt_data_end+0xf8002858>
10002acc:	1cc7883a 	add	r3,r3,r19
10002ad0:	003f0d06 	br	10002708 <__alt_data_end+0xf8002708>
10002ad4:	8005883a 	mov	r2,r16
10002ad8:	003edf06 	br	10002658 <__alt_data_end+0xf8002658>
10002adc:	847fdb36 	bltu	r16,r17,10002a4c <__alt_data_end+0xf8002a4c>
10002ae0:	880f883a 	mov	r7,r17
10002ae4:	0009883a 	mov	r4,zero
10002ae8:	003f9e06 	br	10002964 <__alt_data_end+0xf8002964>

10002aec <udivmodsi4>:
10002aec:	2900182e 	bgeu	r5,r4,10002b50 <udivmodsi4+0x64>
10002af0:	28001716 	blt	r5,zero,10002b50 <udivmodsi4+0x64>
10002af4:	00800804 	movi	r2,32
10002af8:	00c00044 	movi	r3,1
10002afc:	00000206 	br	10002b08 <udivmodsi4+0x1c>
10002b00:	10001126 	beq	r2,zero,10002b48 <udivmodsi4+0x5c>
10002b04:	28000516 	blt	r5,zero,10002b1c <udivmodsi4+0x30>
10002b08:	294b883a 	add	r5,r5,r5
10002b0c:	10bfffc4 	addi	r2,r2,-1
10002b10:	18c7883a 	add	r3,r3,r3
10002b14:	293ffa36 	bltu	r5,r4,10002b00 <__alt_data_end+0xf8002b00>
10002b18:	18000b26 	beq	r3,zero,10002b48 <udivmodsi4+0x5c>
10002b1c:	0005883a 	mov	r2,zero
10002b20:	21400236 	bltu	r4,r5,10002b2c <udivmodsi4+0x40>
10002b24:	2149c83a 	sub	r4,r4,r5
10002b28:	10c4b03a 	or	r2,r2,r3
10002b2c:	1806d07a 	srli	r3,r3,1
10002b30:	280ad07a 	srli	r5,r5,1
10002b34:	183ffa1e 	bne	r3,zero,10002b20 <__alt_data_end+0xf8002b20>
10002b38:	3000011e 	bne	r6,zero,10002b40 <udivmodsi4+0x54>
10002b3c:	f800283a 	ret
10002b40:	2005883a 	mov	r2,r4
10002b44:	f800283a 	ret
10002b48:	0005883a 	mov	r2,zero
10002b4c:	003ffa06 	br	10002b38 <__alt_data_end+0xf8002b38>
10002b50:	00c00044 	movi	r3,1
10002b54:	003ff106 	br	10002b1c <__alt_data_end+0xf8002b1c>

10002b58 <__divsi3>:
10002b58:	defffe04 	addi	sp,sp,-8
10002b5c:	dfc00115 	stw	ra,4(sp)
10002b60:	dc000015 	stw	r16,0(sp)
10002b64:	20000b16 	blt	r4,zero,10002b94 <__divsi3+0x3c>
10002b68:	0021883a 	mov	r16,zero
10002b6c:	28000c16 	blt	r5,zero,10002ba0 <__divsi3+0x48>
10002b70:	000d883a 	mov	r6,zero
10002b74:	0002aec0 	call	10002aec <udivmodsi4>
10002b78:	0407c83a 	sub	r3,zero,r16
10002b7c:	1884f03a 	xor	r2,r3,r2
10002b80:	1405883a 	add	r2,r2,r16
10002b84:	dfc00117 	ldw	ra,4(sp)
10002b88:	dc000017 	ldw	r16,0(sp)
10002b8c:	dec00204 	addi	sp,sp,8
10002b90:	f800283a 	ret
10002b94:	0109c83a 	sub	r4,zero,r4
10002b98:	04000044 	movi	r16,1
10002b9c:	283ff40e 	bge	r5,zero,10002b70 <__alt_data_end+0xf8002b70>
10002ba0:	014bc83a 	sub	r5,zero,r5
10002ba4:	8400005c 	xori	r16,r16,1
10002ba8:	003ff106 	br	10002b70 <__alt_data_end+0xf8002b70>

10002bac <__modsi3>:
10002bac:	defffd04 	addi	sp,sp,-12
10002bb0:	dfc00215 	stw	ra,8(sp)
10002bb4:	dc400115 	stw	r17,4(sp)
10002bb8:	dc000015 	stw	r16,0(sp)
10002bbc:	20000c16 	blt	r4,zero,10002bf0 <__modsi3+0x44>
10002bc0:	0023883a 	mov	r17,zero
10002bc4:	0021883a 	mov	r16,zero
10002bc8:	28000d16 	blt	r5,zero,10002c00 <__modsi3+0x54>
10002bcc:	01800044 	movi	r6,1
10002bd0:	0002aec0 	call	10002aec <udivmodsi4>
10002bd4:	1404f03a 	xor	r2,r2,r16
10002bd8:	8885883a 	add	r2,r17,r2
10002bdc:	dfc00217 	ldw	ra,8(sp)
10002be0:	dc400117 	ldw	r17,4(sp)
10002be4:	dc000017 	ldw	r16,0(sp)
10002be8:	dec00304 	addi	sp,sp,12
10002bec:	f800283a 	ret
10002bf0:	0109c83a 	sub	r4,zero,r4
10002bf4:	04400044 	movi	r17,1
10002bf8:	043fffc4 	movi	r16,-1
10002bfc:	283ff30e 	bge	r5,zero,10002bcc <__alt_data_end+0xf8002bcc>
10002c00:	014bc83a 	sub	r5,zero,r5
10002c04:	003ff106 	br	10002bcc <__alt_data_end+0xf8002bcc>

10002c08 <__udivsi3>:
10002c08:	000d883a 	mov	r6,zero
10002c0c:	0002aec1 	jmpi	10002aec <udivmodsi4>

10002c10 <__umodsi3>:
10002c10:	01800044 	movi	r6,1
10002c14:	0002aec1 	jmpi	10002aec <udivmodsi4>

10002c18 <__mulsi3>:
10002c18:	0005883a 	mov	r2,zero
10002c1c:	20000726 	beq	r4,zero,10002c3c <__mulsi3+0x24>
10002c20:	20c0004c 	andi	r3,r4,1
10002c24:	2008d07a 	srli	r4,r4,1
10002c28:	18000126 	beq	r3,zero,10002c30 <__mulsi3+0x18>
10002c2c:	1145883a 	add	r2,r2,r5
10002c30:	294b883a 	add	r5,r5,r5
10002c34:	203ffa1e 	bne	r4,zero,10002c20 <__alt_data_end+0xf8002c20>
10002c38:	f800283a 	ret
10002c3c:	f800283a 	ret

10002c40 <__adddf3>:
10002c40:	02000434 	movhi	r8,16
10002c44:	423fffc4 	addi	r8,r8,-1
10002c48:	defffb04 	addi	sp,sp,-20
10002c4c:	2a12703a 	and	r9,r5,r8
10002c50:	2806d7fa 	srli	r3,r5,31
10002c54:	3a10703a 	and	r8,r7,r8
10002c58:	3804d53a 	srli	r2,r7,20
10002c5c:	3014d77a 	srli	r10,r6,29
10002c60:	dc000015 	stw	r16,0(sp)
10002c64:	481290fa 	slli	r9,r9,3
10002c68:	2820d53a 	srli	r16,r5,20
10002c6c:	401090fa 	slli	r8,r8,3
10002c70:	200ad77a 	srli	r5,r4,29
10002c74:	380ed7fa 	srli	r7,r7,31
10002c78:	dc800215 	stw	r18,8(sp)
10002c7c:	dc400115 	stw	r17,4(sp)
10002c80:	dfc00415 	stw	ra,16(sp)
10002c84:	dcc00315 	stw	r19,12(sp)
10002c88:	1c803fcc 	andi	r18,r3,255
10002c8c:	8401ffcc 	andi	r16,r16,2047
10002c90:	494ab03a 	or	r5,r9,r5
10002c94:	202290fa 	slli	r17,r4,3
10002c98:	1081ffcc 	andi	r2,r2,2047
10002c9c:	4290b03a 	or	r8,r8,r10
10002ca0:	300c90fa 	slli	r6,r6,3
10002ca4:	91c07026 	beq	r18,r7,10002e68 <__adddf3+0x228>
10002ca8:	8087c83a 	sub	r3,r16,r2
10002cac:	00c0b30e 	bge	zero,r3,10002f7c <__adddf3+0x33c>
10002cb0:	10002a1e 	bne	r2,zero,10002d5c <__adddf3+0x11c>
10002cb4:	4184b03a 	or	r2,r8,r6
10002cb8:	1000991e 	bne	r2,zero,10002f20 <__adddf3+0x2e0>
10002cbc:	888001cc 	andi	r2,r17,7
10002cc0:	10005b26 	beq	r2,zero,10002e30 <__adddf3+0x1f0>
10002cc4:	88c003cc 	andi	r3,r17,15
10002cc8:	00800104 	movi	r2,4
10002ccc:	18805826 	beq	r3,r2,10002e30 <__adddf3+0x1f0>
10002cd0:	89800104 	addi	r6,r17,4
10002cd4:	3463803a 	cmpltu	r17,r6,r17
10002cd8:	2c4b883a 	add	r5,r5,r17
10002cdc:	2880202c 	andhi	r2,r5,128
10002ce0:	9007883a 	mov	r3,r18
10002ce4:	3023883a 	mov	r17,r6
10002ce8:	10005426 	beq	r2,zero,10002e3c <__adddf3+0x1fc>
10002cec:	84000044 	addi	r16,r16,1
10002cf0:	0081ffc4 	movi	r2,2047
10002cf4:	8080c126 	beq	r16,r2,10002ffc <__adddf3+0x3bc>
10002cf8:	013fe034 	movhi	r4,65408
10002cfc:	213fffc4 	addi	r4,r4,-1
10002d00:	290a703a 	and	r5,r5,r4
10002d04:	2804977a 	slli	r2,r5,29
10002d08:	280a927a 	slli	r5,r5,9
10002d0c:	8822d0fa 	srli	r17,r17,3
10002d10:	8401ffcc 	andi	r16,r16,2047
10002d14:	2808d33a 	srli	r4,r5,12
10002d18:	1444b03a 	or	r2,r2,r17
10002d1c:	8401ffcc 	andi	r16,r16,2047
10002d20:	800a953a 	slli	r5,r16,20
10002d24:	18c03fcc 	andi	r3,r3,255
10002d28:	04000434 	movhi	r16,16
10002d2c:	180697fa 	slli	r3,r3,31
10002d30:	843fffc4 	addi	r16,r16,-1
10002d34:	2420703a 	and	r16,r4,r16
10002d38:	8160b03a 	or	r16,r16,r5
10002d3c:	80c6b03a 	or	r3,r16,r3
10002d40:	dfc00417 	ldw	ra,16(sp)
10002d44:	dcc00317 	ldw	r19,12(sp)
10002d48:	dc800217 	ldw	r18,8(sp)
10002d4c:	dc400117 	ldw	r17,4(sp)
10002d50:	dc000017 	ldw	r16,0(sp)
10002d54:	dec00504 	addi	sp,sp,20
10002d58:	f800283a 	ret
10002d5c:	0081ffc4 	movi	r2,2047
10002d60:	80bfd626 	beq	r16,r2,10002cbc <__alt_data_end+0xf8002cbc>
10002d64:	42002034 	orhi	r8,r8,128
10002d68:	00800e04 	movi	r2,56
10002d6c:	10c0a616 	blt	r2,r3,10003008 <__adddf3+0x3c8>
10002d70:	008007c4 	movi	r2,31
10002d74:	10c0c916 	blt	r2,r3,1000309c <__adddf3+0x45c>
10002d78:	00800804 	movi	r2,32
10002d7c:	10c5c83a 	sub	r2,r2,r3
10002d80:	408e983a 	sll	r7,r8,r2
10002d84:	30c8d83a 	srl	r4,r6,r3
10002d88:	3084983a 	sll	r2,r6,r2
10002d8c:	40c6d83a 	srl	r3,r8,r3
10002d90:	390cb03a 	or	r6,r7,r4
10002d94:	1004c03a 	cmpne	r2,r2,zero
10002d98:	308cb03a 	or	r6,r6,r2
10002d9c:	898dc83a 	sub	r6,r17,r6
10002da0:	89a3803a 	cmpltu	r17,r17,r6
10002da4:	28cbc83a 	sub	r5,r5,r3
10002da8:	2c4bc83a 	sub	r5,r5,r17
10002dac:	3023883a 	mov	r17,r6
10002db0:	2880202c 	andhi	r2,r5,128
10002db4:	10006d26 	beq	r2,zero,10002f6c <__adddf3+0x32c>
10002db8:	04c02034 	movhi	r19,128
10002dbc:	9cffffc4 	addi	r19,r19,-1
10002dc0:	2ce6703a 	and	r19,r5,r19
10002dc4:	98007e26 	beq	r19,zero,10002fc0 <__adddf3+0x380>
10002dc8:	9809883a 	mov	r4,r19
10002dcc:	0003f040 	call	10003f04 <__clzsi2>
10002dd0:	10fffe04 	addi	r3,r2,-8
10002dd4:	010007c4 	movi	r4,31
10002dd8:	20c07f16 	blt	r4,r3,10002fd8 <__adddf3+0x398>
10002ddc:	01400a04 	movi	r5,40
10002de0:	2885c83a 	sub	r2,r5,r2
10002de4:	888ad83a 	srl	r5,r17,r2
10002de8:	98e6983a 	sll	r19,r19,r3
10002dec:	88e2983a 	sll	r17,r17,r3
10002df0:	2ce6b03a 	or	r19,r5,r19
10002df4:	1c007c16 	blt	r3,r16,10002fe8 <__adddf3+0x3a8>
10002df8:	1c21c83a 	sub	r16,r3,r16
10002dfc:	81400044 	addi	r5,r16,1
10002e00:	00c007c4 	movi	r3,31
10002e04:	19409816 	blt	r3,r5,10003068 <__adddf3+0x428>
10002e08:	1c21c83a 	sub	r16,r3,r16
10002e0c:	8c08983a 	sll	r4,r17,r16
10002e10:	8946d83a 	srl	r3,r17,r5
10002e14:	9c20983a 	sll	r16,r19,r16
10002e18:	2008c03a 	cmpne	r4,r4,zero
10002e1c:	994ad83a 	srl	r5,r19,r5
10002e20:	1c06b03a 	or	r3,r3,r16
10002e24:	1922b03a 	or	r17,r3,r4
10002e28:	0021883a 	mov	r16,zero
10002e2c:	003fa306 	br	10002cbc <__alt_data_end+0xf8002cbc>
10002e30:	2880202c 	andhi	r2,r5,128
10002e34:	9007883a 	mov	r3,r18
10002e38:	103fac1e 	bne	r2,zero,10002cec <__alt_data_end+0xf8002cec>
10002e3c:	2804977a 	slli	r2,r5,29
10002e40:	8822d0fa 	srli	r17,r17,3
10002e44:	0101ffc4 	movi	r4,2047
10002e48:	280ad0fa 	srli	r5,r5,3
10002e4c:	1444b03a 	or	r2,r2,r17
10002e50:	81002c26 	beq	r16,r4,10002f04 <__adddf3+0x2c4>
10002e54:	8120703a 	and	r16,r16,r4
10002e58:	01000434 	movhi	r4,16
10002e5c:	213fffc4 	addi	r4,r4,-1
10002e60:	2908703a 	and	r4,r5,r4
10002e64:	003fad06 	br	10002d1c <__alt_data_end+0xf8002d1c>
10002e68:	8089c83a 	sub	r4,r16,r2
10002e6c:	01006a0e 	bge	zero,r4,10003018 <__adddf3+0x3d8>
10002e70:	10003326 	beq	r2,zero,10002f40 <__adddf3+0x300>
10002e74:	0081ffc4 	movi	r2,2047
10002e78:	80bf9026 	beq	r16,r2,10002cbc <__alt_data_end+0xf8002cbc>
10002e7c:	42002034 	orhi	r8,r8,128
10002e80:	00800e04 	movi	r2,56
10002e84:	1100b116 	blt	r2,r4,1000314c <__adddf3+0x50c>
10002e88:	008007c4 	movi	r2,31
10002e8c:	1100e216 	blt	r2,r4,10003218 <__adddf3+0x5d8>
10002e90:	00800804 	movi	r2,32
10002e94:	1105c83a 	sub	r2,r2,r4
10002e98:	4092983a 	sll	r9,r8,r2
10002e9c:	310ed83a 	srl	r7,r6,r4
10002ea0:	3084983a 	sll	r2,r6,r2
10002ea4:	4110d83a 	srl	r8,r8,r4
10002ea8:	49ccb03a 	or	r6,r9,r7
10002eac:	1004c03a 	cmpne	r2,r2,zero
10002eb0:	308cb03a 	or	r6,r6,r2
10002eb4:	344d883a 	add	r6,r6,r17
10002eb8:	3463803a 	cmpltu	r17,r6,r17
10002ebc:	414b883a 	add	r5,r8,r5
10002ec0:	2c4b883a 	add	r5,r5,r17
10002ec4:	3023883a 	mov	r17,r6
10002ec8:	2880202c 	andhi	r2,r5,128
10002ecc:	10002726 	beq	r2,zero,10002f6c <__adddf3+0x32c>
10002ed0:	84000044 	addi	r16,r16,1
10002ed4:	0081ffc4 	movi	r2,2047
10002ed8:	8080ae26 	beq	r16,r2,10003194 <__adddf3+0x554>
10002edc:	00bfe034 	movhi	r2,65408
10002ee0:	10bfffc4 	addi	r2,r2,-1
10002ee4:	288a703a 	and	r5,r5,r2
10002ee8:	880cd07a 	srli	r6,r17,1
10002eec:	280897fa 	slli	r4,r5,31
10002ef0:	88c0004c 	andi	r3,r17,1
10002ef4:	30e2b03a 	or	r17,r6,r3
10002ef8:	280ad07a 	srli	r5,r5,1
10002efc:	8922b03a 	or	r17,r17,r4
10002f00:	003f6e06 	br	10002cbc <__alt_data_end+0xf8002cbc>
10002f04:	1148b03a 	or	r4,r2,r5
10002f08:	20003c26 	beq	r4,zero,10002ffc <__adddf3+0x3bc>
10002f0c:	29000234 	orhi	r4,r5,8
10002f10:	01400434 	movhi	r5,16
10002f14:	297fffc4 	addi	r5,r5,-1
10002f18:	2148703a 	and	r4,r4,r5
10002f1c:	003f7f06 	br	10002d1c <__alt_data_end+0xf8002d1c>
10002f20:	18ffffc4 	addi	r3,r3,-1
10002f24:	18004d1e 	bne	r3,zero,1000305c <__adddf3+0x41c>
10002f28:	898dc83a 	sub	r6,r17,r6
10002f2c:	89a3803a 	cmpltu	r17,r17,r6
10002f30:	2a0bc83a 	sub	r5,r5,r8
10002f34:	2c4bc83a 	sub	r5,r5,r17
10002f38:	3023883a 	mov	r17,r6
10002f3c:	003f9c06 	br	10002db0 <__alt_data_end+0xf8002db0>
10002f40:	4184b03a 	or	r2,r8,r6
10002f44:	103f5d26 	beq	r2,zero,10002cbc <__alt_data_end+0xf8002cbc>
10002f48:	213fffc4 	addi	r4,r4,-1
10002f4c:	203fd926 	beq	r4,zero,10002eb4 <__alt_data_end+0xf8002eb4>
10002f50:	0081ffc4 	movi	r2,2047
10002f54:	80bfca1e 	bne	r16,r2,10002e80 <__alt_data_end+0xf8002e80>
10002f58:	003f5806 	br	10002cbc <__alt_data_end+0xf8002cbc>
10002f5c:	10c8b03a 	or	r4,r2,r3
10002f60:	20008b26 	beq	r4,zero,10003190 <__adddf3+0x550>
10002f64:	100b883a 	mov	r5,r2
10002f68:	1823883a 	mov	r17,r3
10002f6c:	888001cc 	andi	r2,r17,7
10002f70:	103f541e 	bne	r2,zero,10002cc4 <__alt_data_end+0xf8002cc4>
10002f74:	9007883a 	mov	r3,r18
10002f78:	003fb006 	br	10002e3c <__alt_data_end+0xf8002e3c>
10002f7c:	1800531e 	bne	r3,zero,100030cc <__adddf3+0x48c>
10002f80:	80800044 	addi	r2,r16,1
10002f84:	1081ffcc 	andi	r2,r2,2047
10002f88:	00c00044 	movi	r3,1
10002f8c:	1880990e 	bge	r3,r2,100031f4 <__adddf3+0x5b4>
10002f90:	8985c83a 	sub	r2,r17,r6
10002f94:	8887803a 	cmpltu	r3,r17,r2
10002f98:	2a27c83a 	sub	r19,r5,r8
10002f9c:	98e7c83a 	sub	r19,r19,r3
10002fa0:	98c0202c 	andhi	r3,r19,128
10002fa4:	18006226 	beq	r3,zero,10003130 <__adddf3+0x4f0>
10002fa8:	3463c83a 	sub	r17,r6,r17
10002fac:	4151c83a 	sub	r8,r8,r5
10002fb0:	344d803a 	cmpltu	r6,r6,r17
10002fb4:	41a7c83a 	sub	r19,r8,r6
10002fb8:	3825883a 	mov	r18,r7
10002fbc:	983f821e 	bne	r19,zero,10002dc8 <__alt_data_end+0xf8002dc8>
10002fc0:	8809883a 	mov	r4,r17
10002fc4:	0003f040 	call	10003f04 <__clzsi2>
10002fc8:	10800804 	addi	r2,r2,32
10002fcc:	10fffe04 	addi	r3,r2,-8
10002fd0:	010007c4 	movi	r4,31
10002fd4:	20ff810e 	bge	r4,r3,10002ddc <__alt_data_end+0xf8002ddc>
10002fd8:	14fff604 	addi	r19,r2,-40
10002fdc:	8ce6983a 	sll	r19,r17,r19
10002fe0:	0023883a 	mov	r17,zero
10002fe4:	1c3f840e 	bge	r3,r16,10002df8 <__alt_data_end+0xf8002df8>
10002fe8:	017fe034 	movhi	r5,65408
10002fec:	297fffc4 	addi	r5,r5,-1
10002ff0:	80e1c83a 	sub	r16,r16,r3
10002ff4:	994a703a 	and	r5,r19,r5
10002ff8:	003f3006 	br	10002cbc <__alt_data_end+0xf8002cbc>
10002ffc:	0009883a 	mov	r4,zero
10003000:	0005883a 	mov	r2,zero
10003004:	003f4506 	br	10002d1c <__alt_data_end+0xf8002d1c>
10003008:	418cb03a 	or	r6,r8,r6
1000300c:	300cc03a 	cmpne	r6,r6,zero
10003010:	0007883a 	mov	r3,zero
10003014:	003f6106 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003018:	2000921e 	bne	r4,zero,10003264 <__adddf3+0x624>
1000301c:	80800044 	addi	r2,r16,1
10003020:	11c1ffcc 	andi	r7,r2,2047
10003024:	01000044 	movi	r4,1
10003028:	21c0610e 	bge	r4,r7,100031b0 <__adddf3+0x570>
1000302c:	0101ffc4 	movi	r4,2047
10003030:	1100a326 	beq	r2,r4,100032c0 <__adddf3+0x680>
10003034:	344d883a 	add	r6,r6,r17
10003038:	3463803a 	cmpltu	r17,r6,r17
1000303c:	414b883a 	add	r5,r8,r5
10003040:	2c4b883a 	add	r5,r5,r17
10003044:	282297fa 	slli	r17,r5,31
10003048:	300cd07a 	srli	r6,r6,1
1000304c:	280ad07a 	srli	r5,r5,1
10003050:	1021883a 	mov	r16,r2
10003054:	89a2b03a 	or	r17,r17,r6
10003058:	003f1806 	br	10002cbc <__alt_data_end+0xf8002cbc>
1000305c:	0081ffc4 	movi	r2,2047
10003060:	80bf411e 	bne	r16,r2,10002d68 <__alt_data_end+0xf8002d68>
10003064:	003f1506 	br	10002cbc <__alt_data_end+0xf8002cbc>
10003068:	80bff844 	addi	r2,r16,-31
1000306c:	00c00804 	movi	r3,32
10003070:	9884d83a 	srl	r2,r19,r2
10003074:	28c04a26 	beq	r5,r3,100031a0 <__adddf3+0x560>
10003078:	00c00fc4 	movi	r3,63
1000307c:	1c21c83a 	sub	r16,r3,r16
10003080:	9c26983a 	sll	r19,r19,r16
10003084:	9c62b03a 	or	r17,r19,r17
10003088:	8822c03a 	cmpne	r17,r17,zero
1000308c:	88a2b03a 	or	r17,r17,r2
10003090:	000b883a 	mov	r5,zero
10003094:	0021883a 	mov	r16,zero
10003098:	003fb406 	br	10002f6c <__alt_data_end+0xf8002f6c>
1000309c:	18bff804 	addi	r2,r3,-32
100030a0:	01000804 	movi	r4,32
100030a4:	4084d83a 	srl	r2,r8,r2
100030a8:	19003f26 	beq	r3,r4,100031a8 <__adddf3+0x568>
100030ac:	01001004 	movi	r4,64
100030b0:	20c7c83a 	sub	r3,r4,r3
100030b4:	40d0983a 	sll	r8,r8,r3
100030b8:	418cb03a 	or	r6,r8,r6
100030bc:	300cc03a 	cmpne	r6,r6,zero
100030c0:	308cb03a 	or	r6,r6,r2
100030c4:	0007883a 	mov	r3,zero
100030c8:	003f3406 	br	10002d9c <__alt_data_end+0xf8002d9c>
100030cc:	80002326 	beq	r16,zero,1000315c <__adddf3+0x51c>
100030d0:	0101ffc4 	movi	r4,2047
100030d4:	11005e26 	beq	r2,r4,10003250 <__adddf3+0x610>
100030d8:	00c7c83a 	sub	r3,zero,r3
100030dc:	29402034 	orhi	r5,r5,128
100030e0:	01000e04 	movi	r4,56
100030e4:	20c07216 	blt	r4,r3,100032b0 <__adddf3+0x670>
100030e8:	010007c4 	movi	r4,31
100030ec:	20c0ce16 	blt	r4,r3,10003428 <__adddf3+0x7e8>
100030f0:	01000804 	movi	r4,32
100030f4:	20c9c83a 	sub	r4,r4,r3
100030f8:	2914983a 	sll	r10,r5,r4
100030fc:	88d2d83a 	srl	r9,r17,r3
10003100:	8908983a 	sll	r4,r17,r4
10003104:	28c6d83a 	srl	r3,r5,r3
10003108:	5262b03a 	or	r17,r10,r9
1000310c:	2008c03a 	cmpne	r4,r4,zero
10003110:	8922b03a 	or	r17,r17,r4
10003114:	3463c83a 	sub	r17,r6,r17
10003118:	40c7c83a 	sub	r3,r8,r3
1000311c:	344d803a 	cmpltu	r6,r6,r17
10003120:	198bc83a 	sub	r5,r3,r6
10003124:	1021883a 	mov	r16,r2
10003128:	3825883a 	mov	r18,r7
1000312c:	003f2006 	br	10002db0 <__alt_data_end+0xf8002db0>
10003130:	9886b03a 	or	r3,r19,r2
10003134:	1800141e 	bne	r3,zero,10003188 <__adddf3+0x548>
10003138:	0007883a 	mov	r3,zero
1000313c:	000b883a 	mov	r5,zero
10003140:	0023883a 	mov	r17,zero
10003144:	0021883a 	mov	r16,zero
10003148:	003f3c06 	br	10002e3c <__alt_data_end+0xf8002e3c>
1000314c:	418cb03a 	or	r6,r8,r6
10003150:	300cc03a 	cmpne	r6,r6,zero
10003154:	0011883a 	mov	r8,zero
10003158:	003f5606 	br	10002eb4 <__alt_data_end+0xf8002eb4>
1000315c:	2c48b03a 	or	r4,r5,r17
10003160:	20003b26 	beq	r4,zero,10003250 <__adddf3+0x610>
10003164:	00c6303a 	nor	r3,zero,r3
10003168:	1800371e 	bne	r3,zero,10003248 <__adddf3+0x608>
1000316c:	3463c83a 	sub	r17,r6,r17
10003170:	414bc83a 	sub	r5,r8,r5
10003174:	344d803a 	cmpltu	r6,r6,r17
10003178:	298bc83a 	sub	r5,r5,r6
1000317c:	1021883a 	mov	r16,r2
10003180:	3825883a 	mov	r18,r7
10003184:	003f0a06 	br	10002db0 <__alt_data_end+0xf8002db0>
10003188:	1023883a 	mov	r17,r2
1000318c:	003f0d06 	br	10002dc4 <__alt_data_end+0xf8002dc4>
10003190:	0007883a 	mov	r3,zero
10003194:	000b883a 	mov	r5,zero
10003198:	0023883a 	mov	r17,zero
1000319c:	003f2706 	br	10002e3c <__alt_data_end+0xf8002e3c>
100031a0:	0027883a 	mov	r19,zero
100031a4:	003fb706 	br	10003084 <__alt_data_end+0xf8003084>
100031a8:	0011883a 	mov	r8,zero
100031ac:	003fc206 	br	100030b8 <__alt_data_end+0xf80030b8>
100031b0:	2c44b03a 	or	r2,r5,r17
100031b4:	8000871e 	bne	r16,zero,100033d4 <__adddf3+0x794>
100031b8:	1000b126 	beq	r2,zero,10003480 <__adddf3+0x840>
100031bc:	4184b03a 	or	r2,r8,r6
100031c0:	103ebe26 	beq	r2,zero,10002cbc <__alt_data_end+0xf8002cbc>
100031c4:	3445883a 	add	r2,r6,r17
100031c8:	1463803a 	cmpltu	r17,r2,r17
100031cc:	414b883a 	add	r5,r8,r5
100031d0:	2c4b883a 	add	r5,r5,r17
100031d4:	28c0202c 	andhi	r3,r5,128
100031d8:	1023883a 	mov	r17,r2
100031dc:	183f6326 	beq	r3,zero,10002f6c <__alt_data_end+0xf8002f6c>
100031e0:	00bfe034 	movhi	r2,65408
100031e4:	10bfffc4 	addi	r2,r2,-1
100031e8:	2021883a 	mov	r16,r4
100031ec:	288a703a 	and	r5,r5,r2
100031f0:	003eb206 	br	10002cbc <__alt_data_end+0xf8002cbc>
100031f4:	2c44b03a 	or	r2,r5,r17
100031f8:	8000251e 	bne	r16,zero,10003290 <__adddf3+0x650>
100031fc:	10004b1e 	bne	r2,zero,1000332c <__adddf3+0x6ec>
10003200:	4184b03a 	or	r2,r8,r6
10003204:	103fe226 	beq	r2,zero,10003190 <__alt_data_end+0xf8003190>
10003208:	400b883a 	mov	r5,r8
1000320c:	3023883a 	mov	r17,r6
10003210:	3825883a 	mov	r18,r7
10003214:	003ea906 	br	10002cbc <__alt_data_end+0xf8002cbc>
10003218:	20bff804 	addi	r2,r4,-32
1000321c:	01c00804 	movi	r7,32
10003220:	4084d83a 	srl	r2,r8,r2
10003224:	21c07e26 	beq	r4,r7,10003420 <__adddf3+0x7e0>
10003228:	01c01004 	movi	r7,64
1000322c:	3909c83a 	sub	r4,r7,r4
10003230:	4110983a 	sll	r8,r8,r4
10003234:	418cb03a 	or	r6,r8,r6
10003238:	300cc03a 	cmpne	r6,r6,zero
1000323c:	308cb03a 	or	r6,r6,r2
10003240:	0011883a 	mov	r8,zero
10003244:	003f1b06 	br	10002eb4 <__alt_data_end+0xf8002eb4>
10003248:	0101ffc4 	movi	r4,2047
1000324c:	113fa41e 	bne	r2,r4,100030e0 <__alt_data_end+0xf80030e0>
10003250:	400b883a 	mov	r5,r8
10003254:	3023883a 	mov	r17,r6
10003258:	1021883a 	mov	r16,r2
1000325c:	3825883a 	mov	r18,r7
10003260:	003e9606 	br	10002cbc <__alt_data_end+0xf8002cbc>
10003264:	80001a1e 	bne	r16,zero,100032d0 <__adddf3+0x690>
10003268:	2c4eb03a 	or	r7,r5,r17
1000326c:	38005526 	beq	r7,zero,100033c4 <__adddf3+0x784>
10003270:	0108303a 	nor	r4,zero,r4
10003274:	2000511e 	bne	r4,zero,100033bc <__adddf3+0x77c>
10003278:	89a3883a 	add	r17,r17,r6
1000327c:	414b883a 	add	r5,r8,r5
10003280:	898d803a 	cmpltu	r6,r17,r6
10003284:	298b883a 	add	r5,r5,r6
10003288:	1021883a 	mov	r16,r2
1000328c:	003f0e06 	br	10002ec8 <__alt_data_end+0xf8002ec8>
10003290:	1000341e 	bne	r2,zero,10003364 <__adddf3+0x724>
10003294:	4184b03a 	or	r2,r8,r6
10003298:	10006f26 	beq	r2,zero,10003458 <__adddf3+0x818>
1000329c:	400b883a 	mov	r5,r8
100032a0:	3023883a 	mov	r17,r6
100032a4:	3825883a 	mov	r18,r7
100032a8:	0401ffc4 	movi	r16,2047
100032ac:	003e8306 	br	10002cbc <__alt_data_end+0xf8002cbc>
100032b0:	2c62b03a 	or	r17,r5,r17
100032b4:	8822c03a 	cmpne	r17,r17,zero
100032b8:	0007883a 	mov	r3,zero
100032bc:	003f9506 	br	10003114 <__alt_data_end+0xf8003114>
100032c0:	1021883a 	mov	r16,r2
100032c4:	000b883a 	mov	r5,zero
100032c8:	0023883a 	mov	r17,zero
100032cc:	003edb06 	br	10002e3c <__alt_data_end+0xf8002e3c>
100032d0:	01c1ffc4 	movi	r7,2047
100032d4:	11c03b26 	beq	r2,r7,100033c4 <__adddf3+0x784>
100032d8:	0109c83a 	sub	r4,zero,r4
100032dc:	29402034 	orhi	r5,r5,128
100032e0:	01c00e04 	movi	r7,56
100032e4:	39006216 	blt	r7,r4,10003470 <__adddf3+0x830>
100032e8:	01c007c4 	movi	r7,31
100032ec:	39006b16 	blt	r7,r4,1000349c <__adddf3+0x85c>
100032f0:	01c00804 	movi	r7,32
100032f4:	390fc83a 	sub	r7,r7,r4
100032f8:	29d4983a 	sll	r10,r5,r7
100032fc:	8912d83a 	srl	r9,r17,r4
10003300:	89ce983a 	sll	r7,r17,r7
10003304:	2908d83a 	srl	r4,r5,r4
10003308:	5262b03a 	or	r17,r10,r9
1000330c:	380ac03a 	cmpne	r5,r7,zero
10003310:	8962b03a 	or	r17,r17,r5
10003314:	89a3883a 	add	r17,r17,r6
10003318:	2211883a 	add	r8,r4,r8
1000331c:	898d803a 	cmpltu	r6,r17,r6
10003320:	418b883a 	add	r5,r8,r6
10003324:	1021883a 	mov	r16,r2
10003328:	003ee706 	br	10002ec8 <__alt_data_end+0xf8002ec8>
1000332c:	4184b03a 	or	r2,r8,r6
10003330:	103e6226 	beq	r2,zero,10002cbc <__alt_data_end+0xf8002cbc>
10003334:	8987c83a 	sub	r3,r17,r6
10003338:	88c9803a 	cmpltu	r4,r17,r3
1000333c:	2a05c83a 	sub	r2,r5,r8
10003340:	1105c83a 	sub	r2,r2,r4
10003344:	1100202c 	andhi	r4,r2,128
10003348:	203f0426 	beq	r4,zero,10002f5c <__alt_data_end+0xf8002f5c>
1000334c:	3463c83a 	sub	r17,r6,r17
10003350:	414bc83a 	sub	r5,r8,r5
10003354:	344d803a 	cmpltu	r6,r6,r17
10003358:	298bc83a 	sub	r5,r5,r6
1000335c:	3825883a 	mov	r18,r7
10003360:	003e5606 	br	10002cbc <__alt_data_end+0xf8002cbc>
10003364:	4184b03a 	or	r2,r8,r6
10003368:	10002b26 	beq	r2,zero,10003418 <__adddf3+0x7d8>
1000336c:	2804d0fa 	srli	r2,r5,3
10003370:	8822d0fa 	srli	r17,r17,3
10003374:	280a977a 	slli	r5,r5,29
10003378:	10c0022c 	andhi	r3,r2,8
1000337c:	2c62b03a 	or	r17,r5,r17
10003380:	18000826 	beq	r3,zero,100033a4 <__adddf3+0x764>
10003384:	4008d0fa 	srli	r4,r8,3
10003388:	20c0022c 	andhi	r3,r4,8
1000338c:	1800051e 	bne	r3,zero,100033a4 <__adddf3+0x764>
10003390:	300cd0fa 	srli	r6,r6,3
10003394:	4010977a 	slli	r8,r8,29
10003398:	2005883a 	mov	r2,r4
1000339c:	3825883a 	mov	r18,r7
100033a0:	41a2b03a 	or	r17,r8,r6
100033a4:	880ad77a 	srli	r5,r17,29
100033a8:	100490fa 	slli	r2,r2,3
100033ac:	882290fa 	slli	r17,r17,3
100033b0:	0401ffc4 	movi	r16,2047
100033b4:	288ab03a 	or	r5,r5,r2
100033b8:	003e4006 	br	10002cbc <__alt_data_end+0xf8002cbc>
100033bc:	01c1ffc4 	movi	r7,2047
100033c0:	11ffc71e 	bne	r2,r7,100032e0 <__alt_data_end+0xf80032e0>
100033c4:	400b883a 	mov	r5,r8
100033c8:	3023883a 	mov	r17,r6
100033cc:	1021883a 	mov	r16,r2
100033d0:	003e3a06 	br	10002cbc <__alt_data_end+0xf8002cbc>
100033d4:	10002d26 	beq	r2,zero,1000348c <__adddf3+0x84c>
100033d8:	4184b03a 	or	r2,r8,r6
100033dc:	10000e26 	beq	r2,zero,10003418 <__adddf3+0x7d8>
100033e0:	2804d0fa 	srli	r2,r5,3
100033e4:	8822d0fa 	srli	r17,r17,3
100033e8:	280a977a 	slli	r5,r5,29
100033ec:	10c0022c 	andhi	r3,r2,8
100033f0:	2c62b03a 	or	r17,r5,r17
100033f4:	183feb26 	beq	r3,zero,100033a4 <__alt_data_end+0xf80033a4>
100033f8:	4008d0fa 	srli	r4,r8,3
100033fc:	20c0022c 	andhi	r3,r4,8
10003400:	183fe81e 	bne	r3,zero,100033a4 <__alt_data_end+0xf80033a4>
10003404:	300cd0fa 	srli	r6,r6,3
10003408:	4010977a 	slli	r8,r8,29
1000340c:	2005883a 	mov	r2,r4
10003410:	41a2b03a 	or	r17,r8,r6
10003414:	003fe306 	br	100033a4 <__alt_data_end+0xf80033a4>
10003418:	0401ffc4 	movi	r16,2047
1000341c:	003e2706 	br	10002cbc <__alt_data_end+0xf8002cbc>
10003420:	0011883a 	mov	r8,zero
10003424:	003f8306 	br	10003234 <__alt_data_end+0xf8003234>
10003428:	193ff804 	addi	r4,r3,-32
1000342c:	02400804 	movi	r9,32
10003430:	2908d83a 	srl	r4,r5,r4
10003434:	1a402526 	beq	r3,r9,100034cc <__adddf3+0x88c>
10003438:	02401004 	movi	r9,64
1000343c:	48c7c83a 	sub	r3,r9,r3
10003440:	28ca983a 	sll	r5,r5,r3
10003444:	2c62b03a 	or	r17,r5,r17
10003448:	8822c03a 	cmpne	r17,r17,zero
1000344c:	8922b03a 	or	r17,r17,r4
10003450:	0007883a 	mov	r3,zero
10003454:	003f2f06 	br	10003114 <__alt_data_end+0xf8003114>
10003458:	01402034 	movhi	r5,128
1000345c:	0007883a 	mov	r3,zero
10003460:	297fffc4 	addi	r5,r5,-1
10003464:	047ffe04 	movi	r17,-8
10003468:	0401ffc4 	movi	r16,2047
1000346c:	003e7306 	br	10002e3c <__alt_data_end+0xf8002e3c>
10003470:	2c62b03a 	or	r17,r5,r17
10003474:	8822c03a 	cmpne	r17,r17,zero
10003478:	0009883a 	mov	r4,zero
1000347c:	003fa506 	br	10003314 <__alt_data_end+0xf8003314>
10003480:	400b883a 	mov	r5,r8
10003484:	3023883a 	mov	r17,r6
10003488:	003e0c06 	br	10002cbc <__alt_data_end+0xf8002cbc>
1000348c:	400b883a 	mov	r5,r8
10003490:	3023883a 	mov	r17,r6
10003494:	0401ffc4 	movi	r16,2047
10003498:	003e0806 	br	10002cbc <__alt_data_end+0xf8002cbc>
1000349c:	21fff804 	addi	r7,r4,-32
100034a0:	02400804 	movi	r9,32
100034a4:	29ced83a 	srl	r7,r5,r7
100034a8:	22400a26 	beq	r4,r9,100034d4 <__adddf3+0x894>
100034ac:	02401004 	movi	r9,64
100034b0:	4909c83a 	sub	r4,r9,r4
100034b4:	290a983a 	sll	r5,r5,r4
100034b8:	2c62b03a 	or	r17,r5,r17
100034bc:	8822c03a 	cmpne	r17,r17,zero
100034c0:	89e2b03a 	or	r17,r17,r7
100034c4:	0009883a 	mov	r4,zero
100034c8:	003f9206 	br	10003314 <__alt_data_end+0xf8003314>
100034cc:	000b883a 	mov	r5,zero
100034d0:	003fdc06 	br	10003444 <__alt_data_end+0xf8003444>
100034d4:	000b883a 	mov	r5,zero
100034d8:	003ff706 	br	100034b8 <__alt_data_end+0xf80034b8>

100034dc <__subdf3>:
100034dc:	00c00434 	movhi	r3,16
100034e0:	18ffffc4 	addi	r3,r3,-1
100034e4:	defffb04 	addi	sp,sp,-20
100034e8:	28d2703a 	and	r9,r5,r3
100034ec:	3814d53a 	srli	r10,r7,20
100034f0:	38c6703a 	and	r3,r7,r3
100034f4:	3004d77a 	srli	r2,r6,29
100034f8:	dc800215 	stw	r18,8(sp)
100034fc:	dc000015 	stw	r16,0(sp)
10003500:	2824d7fa 	srli	r18,r5,31
10003504:	2820d53a 	srli	r16,r5,20
10003508:	481290fa 	slli	r9,r9,3
1000350c:	200ad77a 	srli	r5,r4,29
10003510:	180690fa 	slli	r3,r3,3
10003514:	dc400115 	stw	r17,4(sp)
10003518:	dfc00415 	stw	ra,16(sp)
1000351c:	202290fa 	slli	r17,r4,3
10003520:	dcc00315 	stw	r19,12(sp)
10003524:	5281ffcc 	andi	r10,r10,2047
10003528:	0101ffc4 	movi	r4,2047
1000352c:	9011883a 	mov	r8,r18
10003530:	8401ffcc 	andi	r16,r16,2047
10003534:	94803fcc 	andi	r18,r18,255
10003538:	494ab03a 	or	r5,r9,r5
1000353c:	380ed7fa 	srli	r7,r7,31
10003540:	1886b03a 	or	r3,r3,r2
10003544:	300c90fa 	slli	r6,r6,3
10003548:	51009026 	beq	r10,r4,1000378c <__subdf3+0x2b0>
1000354c:	39c0005c 	xori	r7,r7,1
10003550:	8285c83a 	sub	r2,r16,r10
10003554:	91c06f26 	beq	r18,r7,10003714 <__subdf3+0x238>
10003558:	0080b10e 	bge	zero,r2,10003820 <__subdf3+0x344>
1000355c:	50002a1e 	bne	r10,zero,10003608 <__subdf3+0x12c>
10003560:	1988b03a 	or	r4,r3,r6
10003564:	2000941e 	bne	r4,zero,100037b8 <__subdf3+0x2dc>
10003568:	888001cc 	andi	r2,r17,7
1000356c:	10005b26 	beq	r2,zero,100036dc <__subdf3+0x200>
10003570:	88c003cc 	andi	r3,r17,15
10003574:	00800104 	movi	r2,4
10003578:	18805826 	beq	r3,r2,100036dc <__subdf3+0x200>
1000357c:	88c00104 	addi	r3,r17,4
10003580:	1c63803a 	cmpltu	r17,r3,r17
10003584:	2c4b883a 	add	r5,r5,r17
10003588:	2880202c 	andhi	r2,r5,128
1000358c:	9200004c 	andi	r8,r18,1
10003590:	1823883a 	mov	r17,r3
10003594:	10005426 	beq	r2,zero,100036e8 <__subdf3+0x20c>
10003598:	84000044 	addi	r16,r16,1
1000359c:	0081ffc4 	movi	r2,2047
100035a0:	8080bf26 	beq	r16,r2,100038a0 <__subdf3+0x3c4>
100035a4:	013fe034 	movhi	r4,65408
100035a8:	213fffc4 	addi	r4,r4,-1
100035ac:	290a703a 	and	r5,r5,r4
100035b0:	2804977a 	slli	r2,r5,29
100035b4:	280a927a 	slli	r5,r5,9
100035b8:	8822d0fa 	srli	r17,r17,3
100035bc:	8401ffcc 	andi	r16,r16,2047
100035c0:	2808d33a 	srli	r4,r5,12
100035c4:	1444b03a 	or	r2,r2,r17
100035c8:	8401ffcc 	andi	r16,r16,2047
100035cc:	800a953a 	slli	r5,r16,20
100035d0:	40c03fcc 	andi	r3,r8,255
100035d4:	04000434 	movhi	r16,16
100035d8:	180697fa 	slli	r3,r3,31
100035dc:	843fffc4 	addi	r16,r16,-1
100035e0:	2420703a 	and	r16,r4,r16
100035e4:	8160b03a 	or	r16,r16,r5
100035e8:	80c6b03a 	or	r3,r16,r3
100035ec:	dfc00417 	ldw	ra,16(sp)
100035f0:	dcc00317 	ldw	r19,12(sp)
100035f4:	dc800217 	ldw	r18,8(sp)
100035f8:	dc400117 	ldw	r17,4(sp)
100035fc:	dc000017 	ldw	r16,0(sp)
10003600:	dec00504 	addi	sp,sp,20
10003604:	f800283a 	ret
10003608:	0101ffc4 	movi	r4,2047
1000360c:	813fd626 	beq	r16,r4,10003568 <__alt_data_end+0xf8003568>
10003610:	18c02034 	orhi	r3,r3,128
10003614:	01000e04 	movi	r4,56
10003618:	2080a416 	blt	r4,r2,100038ac <__subdf3+0x3d0>
1000361c:	010007c4 	movi	r4,31
10003620:	2080c716 	blt	r4,r2,10003940 <__subdf3+0x464>
10003624:	01000804 	movi	r4,32
10003628:	2089c83a 	sub	r4,r4,r2
1000362c:	1910983a 	sll	r8,r3,r4
10003630:	308ed83a 	srl	r7,r6,r2
10003634:	3108983a 	sll	r4,r6,r4
10003638:	1884d83a 	srl	r2,r3,r2
1000363c:	41ccb03a 	or	r6,r8,r7
10003640:	2008c03a 	cmpne	r4,r4,zero
10003644:	310cb03a 	or	r6,r6,r4
10003648:	898dc83a 	sub	r6,r17,r6
1000364c:	89a3803a 	cmpltu	r17,r17,r6
10003650:	288bc83a 	sub	r5,r5,r2
10003654:	2c4bc83a 	sub	r5,r5,r17
10003658:	3023883a 	mov	r17,r6
1000365c:	2880202c 	andhi	r2,r5,128
10003660:	10006b26 	beq	r2,zero,10003810 <__subdf3+0x334>
10003664:	04c02034 	movhi	r19,128
10003668:	9cffffc4 	addi	r19,r19,-1
1000366c:	2ce6703a 	and	r19,r5,r19
10003670:	98007c26 	beq	r19,zero,10003864 <__subdf3+0x388>
10003674:	9809883a 	mov	r4,r19
10003678:	0003f040 	call	10003f04 <__clzsi2>
1000367c:	10fffe04 	addi	r3,r2,-8
10003680:	010007c4 	movi	r4,31
10003684:	20c07d16 	blt	r4,r3,1000387c <__subdf3+0x3a0>
10003688:	01400a04 	movi	r5,40
1000368c:	2885c83a 	sub	r2,r5,r2
10003690:	888ad83a 	srl	r5,r17,r2
10003694:	98e6983a 	sll	r19,r19,r3
10003698:	88e2983a 	sll	r17,r17,r3
1000369c:	2ce6b03a 	or	r19,r5,r19
100036a0:	1c007a16 	blt	r3,r16,1000388c <__subdf3+0x3b0>
100036a4:	1c21c83a 	sub	r16,r3,r16
100036a8:	81400044 	addi	r5,r16,1
100036ac:	00c007c4 	movi	r3,31
100036b0:	19409616 	blt	r3,r5,1000390c <__subdf3+0x430>
100036b4:	1c21c83a 	sub	r16,r3,r16
100036b8:	8c08983a 	sll	r4,r17,r16
100036bc:	8946d83a 	srl	r3,r17,r5
100036c0:	9c20983a 	sll	r16,r19,r16
100036c4:	2008c03a 	cmpne	r4,r4,zero
100036c8:	994ad83a 	srl	r5,r19,r5
100036cc:	1c06b03a 	or	r3,r3,r16
100036d0:	1922b03a 	or	r17,r3,r4
100036d4:	0021883a 	mov	r16,zero
100036d8:	003fa306 	br	10003568 <__alt_data_end+0xf8003568>
100036dc:	2880202c 	andhi	r2,r5,128
100036e0:	9200004c 	andi	r8,r18,1
100036e4:	103fac1e 	bne	r2,zero,10003598 <__alt_data_end+0xf8003598>
100036e8:	2804977a 	slli	r2,r5,29
100036ec:	8822d0fa 	srli	r17,r17,3
100036f0:	00c1ffc4 	movi	r3,2047
100036f4:	280ad0fa 	srli	r5,r5,3
100036f8:	1444b03a 	or	r2,r2,r17
100036fc:	80c02726 	beq	r16,r3,1000379c <__subdf3+0x2c0>
10003700:	01000434 	movhi	r4,16
10003704:	213fffc4 	addi	r4,r4,-1
10003708:	80e0703a 	and	r16,r16,r3
1000370c:	2908703a 	and	r4,r5,r4
10003710:	003fad06 	br	100035c8 <__alt_data_end+0xf80035c8>
10003714:	0080690e 	bge	zero,r2,100038bc <__subdf3+0x3e0>
10003718:	50002f26 	beq	r10,zero,100037d8 <__subdf3+0x2fc>
1000371c:	0101ffc4 	movi	r4,2047
10003720:	813f9126 	beq	r16,r4,10003568 <__alt_data_end+0xf8003568>
10003724:	18c02034 	orhi	r3,r3,128
10003728:	01000e04 	movi	r4,56
1000372c:	2080b00e 	bge	r4,r2,100039f0 <__subdf3+0x514>
10003730:	198cb03a 	or	r6,r3,r6
10003734:	300ec03a 	cmpne	r7,r6,zero
10003738:	0005883a 	mov	r2,zero
1000373c:	3c4f883a 	add	r7,r7,r17
10003740:	3c63803a 	cmpltu	r17,r7,r17
10003744:	114b883a 	add	r5,r2,r5
10003748:	2c4b883a 	add	r5,r5,r17
1000374c:	3823883a 	mov	r17,r7
10003750:	2880202c 	andhi	r2,r5,128
10003754:	10002e26 	beq	r2,zero,10003810 <__subdf3+0x334>
10003758:	84000044 	addi	r16,r16,1
1000375c:	0081ffc4 	movi	r2,2047
10003760:	8080de26 	beq	r16,r2,10003adc <__subdf3+0x600>
10003764:	00bfe034 	movhi	r2,65408
10003768:	10bfffc4 	addi	r2,r2,-1
1000376c:	288a703a 	and	r5,r5,r2
10003770:	880cd07a 	srli	r6,r17,1
10003774:	280897fa 	slli	r4,r5,31
10003778:	88c0004c 	andi	r3,r17,1
1000377c:	30e2b03a 	or	r17,r6,r3
10003780:	280ad07a 	srli	r5,r5,1
10003784:	8922b03a 	or	r17,r17,r4
10003788:	003f7706 	br	10003568 <__alt_data_end+0xf8003568>
1000378c:	1984b03a 	or	r2,r3,r6
10003790:	103f6e26 	beq	r2,zero,1000354c <__alt_data_end+0xf800354c>
10003794:	39c03fcc 	andi	r7,r7,255
10003798:	003f6d06 	br	10003550 <__alt_data_end+0xf8003550>
1000379c:	1146b03a 	or	r3,r2,r5
100037a0:	18003f26 	beq	r3,zero,100038a0 <__subdf3+0x3c4>
100037a4:	00c00434 	movhi	r3,16
100037a8:	29000234 	orhi	r4,r5,8
100037ac:	18ffffc4 	addi	r3,r3,-1
100037b0:	20c8703a 	and	r4,r4,r3
100037b4:	003f8406 	br	100035c8 <__alt_data_end+0xf80035c8>
100037b8:	10bfffc4 	addi	r2,r2,-1
100037bc:	1000501e 	bne	r2,zero,10003900 <__subdf3+0x424>
100037c0:	898fc83a 	sub	r7,r17,r6
100037c4:	89e3803a 	cmpltu	r17,r17,r7
100037c8:	28cbc83a 	sub	r5,r5,r3
100037cc:	2c4bc83a 	sub	r5,r5,r17
100037d0:	3823883a 	mov	r17,r7
100037d4:	003fa106 	br	1000365c <__alt_data_end+0xf800365c>
100037d8:	1988b03a 	or	r4,r3,r6
100037dc:	203f6226 	beq	r4,zero,10003568 <__alt_data_end+0xf8003568>
100037e0:	10bfffc4 	addi	r2,r2,-1
100037e4:	10009b1e 	bne	r2,zero,10003a54 <__subdf3+0x578>
100037e8:	344d883a 	add	r6,r6,r17
100037ec:	3463803a 	cmpltu	r17,r6,r17
100037f0:	194b883a 	add	r5,r3,r5
100037f4:	2c4b883a 	add	r5,r5,r17
100037f8:	3023883a 	mov	r17,r6
100037fc:	003fd406 	br	10003750 <__alt_data_end+0xf8003750>
10003800:	1106b03a 	or	r3,r2,r4
10003804:	1800b426 	beq	r3,zero,10003ad8 <__subdf3+0x5fc>
10003808:	100b883a 	mov	r5,r2
1000380c:	2023883a 	mov	r17,r4
10003810:	888001cc 	andi	r2,r17,7
10003814:	103f561e 	bne	r2,zero,10003570 <__alt_data_end+0xf8003570>
10003818:	9200004c 	andi	r8,r18,1
1000381c:	003fb206 	br	100036e8 <__alt_data_end+0xf80036e8>
10003820:	1000531e 	bne	r2,zero,10003970 <__subdf3+0x494>
10003824:	80800044 	addi	r2,r16,1
10003828:	1081ffcc 	andi	r2,r2,2047
1000382c:	01000044 	movi	r4,1
10003830:	2080a00e 	bge	r4,r2,10003ab4 <__subdf3+0x5d8>
10003834:	8985c83a 	sub	r2,r17,r6
10003838:	8889803a 	cmpltu	r4,r17,r2
1000383c:	28e7c83a 	sub	r19,r5,r3
10003840:	9927c83a 	sub	r19,r19,r4
10003844:	9900202c 	andhi	r4,r19,128
10003848:	20006226 	beq	r4,zero,100039d4 <__subdf3+0x4f8>
1000384c:	3463c83a 	sub	r17,r6,r17
10003850:	194bc83a 	sub	r5,r3,r5
10003854:	344d803a 	cmpltu	r6,r6,r17
10003858:	29a7c83a 	sub	r19,r5,r6
1000385c:	3825883a 	mov	r18,r7
10003860:	983f841e 	bne	r19,zero,10003674 <__alt_data_end+0xf8003674>
10003864:	8809883a 	mov	r4,r17
10003868:	0003f040 	call	10003f04 <__clzsi2>
1000386c:	10800804 	addi	r2,r2,32
10003870:	10fffe04 	addi	r3,r2,-8
10003874:	010007c4 	movi	r4,31
10003878:	20ff830e 	bge	r4,r3,10003688 <__alt_data_end+0xf8003688>
1000387c:	14fff604 	addi	r19,r2,-40
10003880:	8ce6983a 	sll	r19,r17,r19
10003884:	0023883a 	mov	r17,zero
10003888:	1c3f860e 	bge	r3,r16,100036a4 <__alt_data_end+0xf80036a4>
1000388c:	017fe034 	movhi	r5,65408
10003890:	297fffc4 	addi	r5,r5,-1
10003894:	80e1c83a 	sub	r16,r16,r3
10003898:	994a703a 	and	r5,r19,r5
1000389c:	003f3206 	br	10003568 <__alt_data_end+0xf8003568>
100038a0:	0009883a 	mov	r4,zero
100038a4:	0005883a 	mov	r2,zero
100038a8:	003f4706 	br	100035c8 <__alt_data_end+0xf80035c8>
100038ac:	198cb03a 	or	r6,r3,r6
100038b0:	300cc03a 	cmpne	r6,r6,zero
100038b4:	0005883a 	mov	r2,zero
100038b8:	003f6306 	br	10003648 <__alt_data_end+0xf8003648>
100038bc:	10009d1e 	bne	r2,zero,10003b34 <__subdf3+0x658>
100038c0:	81c00044 	addi	r7,r16,1
100038c4:	3881ffcc 	andi	r2,r7,2047
100038c8:	02400044 	movi	r9,1
100038cc:	4880680e 	bge	r9,r2,10003a70 <__subdf3+0x594>
100038d0:	0081ffc4 	movi	r2,2047
100038d4:	3880ae26 	beq	r7,r2,10003b90 <__subdf3+0x6b4>
100038d8:	344d883a 	add	r6,r6,r17
100038dc:	3463803a 	cmpltu	r17,r6,r17
100038e0:	194b883a 	add	r5,r3,r5
100038e4:	2c4b883a 	add	r5,r5,r17
100038e8:	282297fa 	slli	r17,r5,31
100038ec:	300cd07a 	srli	r6,r6,1
100038f0:	280ad07a 	srli	r5,r5,1
100038f4:	3821883a 	mov	r16,r7
100038f8:	89a2b03a 	or	r17,r17,r6
100038fc:	003f1a06 	br	10003568 <__alt_data_end+0xf8003568>
10003900:	0101ffc4 	movi	r4,2047
10003904:	813f431e 	bne	r16,r4,10003614 <__alt_data_end+0xf8003614>
10003908:	003f1706 	br	10003568 <__alt_data_end+0xf8003568>
1000390c:	80bff844 	addi	r2,r16,-31
10003910:	00c00804 	movi	r3,32
10003914:	9884d83a 	srl	r2,r19,r2
10003918:	28c05126 	beq	r5,r3,10003a60 <__subdf3+0x584>
1000391c:	00c00fc4 	movi	r3,63
10003920:	1c21c83a 	sub	r16,r3,r16
10003924:	9c26983a 	sll	r19,r19,r16
10003928:	9c62b03a 	or	r17,r19,r17
1000392c:	8822c03a 	cmpne	r17,r17,zero
10003930:	88a2b03a 	or	r17,r17,r2
10003934:	000b883a 	mov	r5,zero
10003938:	0021883a 	mov	r16,zero
1000393c:	003fb406 	br	10003810 <__alt_data_end+0xf8003810>
10003940:	113ff804 	addi	r4,r2,-32
10003944:	01c00804 	movi	r7,32
10003948:	1908d83a 	srl	r4,r3,r4
1000394c:	11c04626 	beq	r2,r7,10003a68 <__subdf3+0x58c>
10003950:	01c01004 	movi	r7,64
10003954:	3885c83a 	sub	r2,r7,r2
10003958:	1884983a 	sll	r2,r3,r2
1000395c:	118cb03a 	or	r6,r2,r6
10003960:	300cc03a 	cmpne	r6,r6,zero
10003964:	310cb03a 	or	r6,r6,r4
10003968:	0005883a 	mov	r2,zero
1000396c:	003f3606 	br	10003648 <__alt_data_end+0xf8003648>
10003970:	80002b26 	beq	r16,zero,10003a20 <__subdf3+0x544>
10003974:	0101ffc4 	movi	r4,2047
10003978:	51006926 	beq	r10,r4,10003b20 <__subdf3+0x644>
1000397c:	0085c83a 	sub	r2,zero,r2
10003980:	29402034 	orhi	r5,r5,128
10003984:	01000e04 	movi	r4,56
10003988:	20807d16 	blt	r4,r2,10003b80 <__subdf3+0x6a4>
1000398c:	010007c4 	movi	r4,31
10003990:	2080d916 	blt	r4,r2,10003cf8 <__subdf3+0x81c>
10003994:	01000804 	movi	r4,32
10003998:	2089c83a 	sub	r4,r4,r2
1000399c:	2912983a 	sll	r9,r5,r4
100039a0:	8890d83a 	srl	r8,r17,r2
100039a4:	8908983a 	sll	r4,r17,r4
100039a8:	2884d83a 	srl	r2,r5,r2
100039ac:	4a22b03a 	or	r17,r9,r8
100039b0:	2008c03a 	cmpne	r4,r4,zero
100039b4:	8922b03a 	or	r17,r17,r4
100039b8:	3463c83a 	sub	r17,r6,r17
100039bc:	1885c83a 	sub	r2,r3,r2
100039c0:	344d803a 	cmpltu	r6,r6,r17
100039c4:	118bc83a 	sub	r5,r2,r6
100039c8:	5021883a 	mov	r16,r10
100039cc:	3825883a 	mov	r18,r7
100039d0:	003f2206 	br	1000365c <__alt_data_end+0xf800365c>
100039d4:	9886b03a 	or	r3,r19,r2
100039d8:	18001c1e 	bne	r3,zero,10003a4c <__subdf3+0x570>
100039dc:	0011883a 	mov	r8,zero
100039e0:	000b883a 	mov	r5,zero
100039e4:	0023883a 	mov	r17,zero
100039e8:	0021883a 	mov	r16,zero
100039ec:	003f3e06 	br	100036e8 <__alt_data_end+0xf80036e8>
100039f0:	010007c4 	movi	r4,31
100039f4:	20803c16 	blt	r4,r2,10003ae8 <__subdf3+0x60c>
100039f8:	01000804 	movi	r4,32
100039fc:	2089c83a 	sub	r4,r4,r2
10003a00:	1912983a 	sll	r9,r3,r4
10003a04:	308ed83a 	srl	r7,r6,r2
10003a08:	3108983a 	sll	r4,r6,r4
10003a0c:	1884d83a 	srl	r2,r3,r2
10003a10:	49ceb03a 	or	r7,r9,r7
10003a14:	2008c03a 	cmpne	r4,r4,zero
10003a18:	390eb03a 	or	r7,r7,r4
10003a1c:	003f4706 	br	1000373c <__alt_data_end+0xf800373c>
10003a20:	2c48b03a 	or	r4,r5,r17
10003a24:	20003e26 	beq	r4,zero,10003b20 <__subdf3+0x644>
10003a28:	0084303a 	nor	r2,zero,r2
10003a2c:	10003a1e 	bne	r2,zero,10003b18 <__subdf3+0x63c>
10003a30:	3463c83a 	sub	r17,r6,r17
10003a34:	194bc83a 	sub	r5,r3,r5
10003a38:	344d803a 	cmpltu	r6,r6,r17
10003a3c:	298bc83a 	sub	r5,r5,r6
10003a40:	5021883a 	mov	r16,r10
10003a44:	3825883a 	mov	r18,r7
10003a48:	003f0406 	br	1000365c <__alt_data_end+0xf800365c>
10003a4c:	1023883a 	mov	r17,r2
10003a50:	003f0706 	br	10003670 <__alt_data_end+0xf8003670>
10003a54:	0101ffc4 	movi	r4,2047
10003a58:	813f331e 	bne	r16,r4,10003728 <__alt_data_end+0xf8003728>
10003a5c:	003ec206 	br	10003568 <__alt_data_end+0xf8003568>
10003a60:	0027883a 	mov	r19,zero
10003a64:	003fb006 	br	10003928 <__alt_data_end+0xf8003928>
10003a68:	0005883a 	mov	r2,zero
10003a6c:	003fbb06 	br	1000395c <__alt_data_end+0xf800395c>
10003a70:	2c44b03a 	or	r2,r5,r17
10003a74:	80008b1e 	bne	r16,zero,10003ca4 <__subdf3+0x7c8>
10003a78:	1000b526 	beq	r2,zero,10003d50 <__subdf3+0x874>
10003a7c:	1984b03a 	or	r2,r3,r6
10003a80:	103eb926 	beq	r2,zero,10003568 <__alt_data_end+0xf8003568>
10003a84:	3449883a 	add	r4,r6,r17
10003a88:	2463803a 	cmpltu	r17,r4,r17
10003a8c:	194b883a 	add	r5,r3,r5
10003a90:	2c4b883a 	add	r5,r5,r17
10003a94:	2880202c 	andhi	r2,r5,128
10003a98:	2023883a 	mov	r17,r4
10003a9c:	103f5c26 	beq	r2,zero,10003810 <__alt_data_end+0xf8003810>
10003aa0:	00bfe034 	movhi	r2,65408
10003aa4:	10bfffc4 	addi	r2,r2,-1
10003aa8:	4821883a 	mov	r16,r9
10003aac:	288a703a 	and	r5,r5,r2
10003ab0:	003ead06 	br	10003568 <__alt_data_end+0xf8003568>
10003ab4:	2c44b03a 	or	r2,r5,r17
10003ab8:	8000291e 	bne	r16,zero,10003b60 <__subdf3+0x684>
10003abc:	10004f1e 	bne	r2,zero,10003bfc <__subdf3+0x720>
10003ac0:	1984b03a 	or	r2,r3,r6
10003ac4:	10000426 	beq	r2,zero,10003ad8 <__subdf3+0x5fc>
10003ac8:	180b883a 	mov	r5,r3
10003acc:	3023883a 	mov	r17,r6
10003ad0:	3825883a 	mov	r18,r7
10003ad4:	003ea406 	br	10003568 <__alt_data_end+0xf8003568>
10003ad8:	0011883a 	mov	r8,zero
10003adc:	000b883a 	mov	r5,zero
10003ae0:	0023883a 	mov	r17,zero
10003ae4:	003f0006 	br	100036e8 <__alt_data_end+0xf80036e8>
10003ae8:	11fff804 	addi	r7,r2,-32
10003aec:	19c8d83a 	srl	r4,r3,r7
10003af0:	01c00804 	movi	r7,32
10003af4:	11c07e26 	beq	r2,r7,10003cf0 <__subdf3+0x814>
10003af8:	01c01004 	movi	r7,64
10003afc:	3885c83a 	sub	r2,r7,r2
10003b00:	1884983a 	sll	r2,r3,r2
10003b04:	118cb03a 	or	r6,r2,r6
10003b08:	300ec03a 	cmpne	r7,r6,zero
10003b0c:	390eb03a 	or	r7,r7,r4
10003b10:	0005883a 	mov	r2,zero
10003b14:	003f0906 	br	1000373c <__alt_data_end+0xf800373c>
10003b18:	0101ffc4 	movi	r4,2047
10003b1c:	513f991e 	bne	r10,r4,10003984 <__alt_data_end+0xf8003984>
10003b20:	180b883a 	mov	r5,r3
10003b24:	3023883a 	mov	r17,r6
10003b28:	5021883a 	mov	r16,r10
10003b2c:	3825883a 	mov	r18,r7
10003b30:	003e8d06 	br	10003568 <__alt_data_end+0xf8003568>
10003b34:	80001a1e 	bne	r16,zero,10003ba0 <__subdf3+0x6c4>
10003b38:	2c48b03a 	or	r4,r5,r17
10003b3c:	20005526 	beq	r4,zero,10003c94 <__subdf3+0x7b8>
10003b40:	0084303a 	nor	r2,zero,r2
10003b44:	1000511e 	bne	r2,zero,10003c8c <__subdf3+0x7b0>
10003b48:	89a3883a 	add	r17,r17,r6
10003b4c:	194b883a 	add	r5,r3,r5
10003b50:	898d803a 	cmpltu	r6,r17,r6
10003b54:	298b883a 	add	r5,r5,r6
10003b58:	5021883a 	mov	r16,r10
10003b5c:	003efc06 	br	10003750 <__alt_data_end+0xf8003750>
10003b60:	1000341e 	bne	r2,zero,10003c34 <__subdf3+0x758>
10003b64:	1984b03a 	or	r2,r3,r6
10003b68:	10006f26 	beq	r2,zero,10003d28 <__subdf3+0x84c>
10003b6c:	180b883a 	mov	r5,r3
10003b70:	3023883a 	mov	r17,r6
10003b74:	3825883a 	mov	r18,r7
10003b78:	0401ffc4 	movi	r16,2047
10003b7c:	003e7a06 	br	10003568 <__alt_data_end+0xf8003568>
10003b80:	2c62b03a 	or	r17,r5,r17
10003b84:	8822c03a 	cmpne	r17,r17,zero
10003b88:	0005883a 	mov	r2,zero
10003b8c:	003f8a06 	br	100039b8 <__alt_data_end+0xf80039b8>
10003b90:	3821883a 	mov	r16,r7
10003b94:	000b883a 	mov	r5,zero
10003b98:	0023883a 	mov	r17,zero
10003b9c:	003ed206 	br	100036e8 <__alt_data_end+0xf80036e8>
10003ba0:	0101ffc4 	movi	r4,2047
10003ba4:	51003b26 	beq	r10,r4,10003c94 <__subdf3+0x7b8>
10003ba8:	0085c83a 	sub	r2,zero,r2
10003bac:	29402034 	orhi	r5,r5,128
10003bb0:	01000e04 	movi	r4,56
10003bb4:	20806216 	blt	r4,r2,10003d40 <__subdf3+0x864>
10003bb8:	010007c4 	movi	r4,31
10003bbc:	20806b16 	blt	r4,r2,10003d6c <__subdf3+0x890>
10003bc0:	01000804 	movi	r4,32
10003bc4:	2089c83a 	sub	r4,r4,r2
10003bc8:	2912983a 	sll	r9,r5,r4
10003bcc:	888ed83a 	srl	r7,r17,r2
10003bd0:	8908983a 	sll	r4,r17,r4
10003bd4:	2884d83a 	srl	r2,r5,r2
10003bd8:	49e2b03a 	or	r17,r9,r7
10003bdc:	2008c03a 	cmpne	r4,r4,zero
10003be0:	8922b03a 	or	r17,r17,r4
10003be4:	89a3883a 	add	r17,r17,r6
10003be8:	10c5883a 	add	r2,r2,r3
10003bec:	898d803a 	cmpltu	r6,r17,r6
10003bf0:	118b883a 	add	r5,r2,r6
10003bf4:	5021883a 	mov	r16,r10
10003bf8:	003ed506 	br	10003750 <__alt_data_end+0xf8003750>
10003bfc:	1984b03a 	or	r2,r3,r6
10003c00:	103e5926 	beq	r2,zero,10003568 <__alt_data_end+0xf8003568>
10003c04:	8989c83a 	sub	r4,r17,r6
10003c08:	8911803a 	cmpltu	r8,r17,r4
10003c0c:	28c5c83a 	sub	r2,r5,r3
10003c10:	1205c83a 	sub	r2,r2,r8
10003c14:	1200202c 	andhi	r8,r2,128
10003c18:	403ef926 	beq	r8,zero,10003800 <__alt_data_end+0xf8003800>
10003c1c:	3463c83a 	sub	r17,r6,r17
10003c20:	194bc83a 	sub	r5,r3,r5
10003c24:	344d803a 	cmpltu	r6,r6,r17
10003c28:	298bc83a 	sub	r5,r5,r6
10003c2c:	3825883a 	mov	r18,r7
10003c30:	003e4d06 	br	10003568 <__alt_data_end+0xf8003568>
10003c34:	1984b03a 	or	r2,r3,r6
10003c38:	10002b26 	beq	r2,zero,10003ce8 <__subdf3+0x80c>
10003c3c:	2808d0fa 	srli	r4,r5,3
10003c40:	8822d0fa 	srli	r17,r17,3
10003c44:	280a977a 	slli	r5,r5,29
10003c48:	2080022c 	andhi	r2,r4,8
10003c4c:	2c62b03a 	or	r17,r5,r17
10003c50:	10000826 	beq	r2,zero,10003c74 <__subdf3+0x798>
10003c54:	1810d0fa 	srli	r8,r3,3
10003c58:	4080022c 	andhi	r2,r8,8
10003c5c:	1000051e 	bne	r2,zero,10003c74 <__subdf3+0x798>
10003c60:	300cd0fa 	srli	r6,r6,3
10003c64:	1804977a 	slli	r2,r3,29
10003c68:	4009883a 	mov	r4,r8
10003c6c:	3825883a 	mov	r18,r7
10003c70:	11a2b03a 	or	r17,r2,r6
10003c74:	880ad77a 	srli	r5,r17,29
10003c78:	200890fa 	slli	r4,r4,3
10003c7c:	882290fa 	slli	r17,r17,3
10003c80:	0401ffc4 	movi	r16,2047
10003c84:	290ab03a 	or	r5,r5,r4
10003c88:	003e3706 	br	10003568 <__alt_data_end+0xf8003568>
10003c8c:	0101ffc4 	movi	r4,2047
10003c90:	513fc71e 	bne	r10,r4,10003bb0 <__alt_data_end+0xf8003bb0>
10003c94:	180b883a 	mov	r5,r3
10003c98:	3023883a 	mov	r17,r6
10003c9c:	5021883a 	mov	r16,r10
10003ca0:	003e3106 	br	10003568 <__alt_data_end+0xf8003568>
10003ca4:	10002d26 	beq	r2,zero,10003d5c <__subdf3+0x880>
10003ca8:	1984b03a 	or	r2,r3,r6
10003cac:	10000e26 	beq	r2,zero,10003ce8 <__subdf3+0x80c>
10003cb0:	2808d0fa 	srli	r4,r5,3
10003cb4:	8822d0fa 	srli	r17,r17,3
10003cb8:	280a977a 	slli	r5,r5,29
10003cbc:	2080022c 	andhi	r2,r4,8
10003cc0:	2c62b03a 	or	r17,r5,r17
10003cc4:	103feb26 	beq	r2,zero,10003c74 <__alt_data_end+0xf8003c74>
10003cc8:	180ed0fa 	srli	r7,r3,3
10003ccc:	3880022c 	andhi	r2,r7,8
10003cd0:	103fe81e 	bne	r2,zero,10003c74 <__alt_data_end+0xf8003c74>
10003cd4:	300cd0fa 	srli	r6,r6,3
10003cd8:	1804977a 	slli	r2,r3,29
10003cdc:	3809883a 	mov	r4,r7
10003ce0:	11a2b03a 	or	r17,r2,r6
10003ce4:	003fe306 	br	10003c74 <__alt_data_end+0xf8003c74>
10003ce8:	0401ffc4 	movi	r16,2047
10003cec:	003e1e06 	br	10003568 <__alt_data_end+0xf8003568>
10003cf0:	0005883a 	mov	r2,zero
10003cf4:	003f8306 	br	10003b04 <__alt_data_end+0xf8003b04>
10003cf8:	113ff804 	addi	r4,r2,-32
10003cfc:	02000804 	movi	r8,32
10003d00:	2908d83a 	srl	r4,r5,r4
10003d04:	12002526 	beq	r2,r8,10003d9c <__subdf3+0x8c0>
10003d08:	02001004 	movi	r8,64
10003d0c:	4085c83a 	sub	r2,r8,r2
10003d10:	288a983a 	sll	r5,r5,r2
10003d14:	2c62b03a 	or	r17,r5,r17
10003d18:	8822c03a 	cmpne	r17,r17,zero
10003d1c:	8922b03a 	or	r17,r17,r4
10003d20:	0005883a 	mov	r2,zero
10003d24:	003f2406 	br	100039b8 <__alt_data_end+0xf80039b8>
10003d28:	01402034 	movhi	r5,128
10003d2c:	0011883a 	mov	r8,zero
10003d30:	297fffc4 	addi	r5,r5,-1
10003d34:	047ffe04 	movi	r17,-8
10003d38:	0401ffc4 	movi	r16,2047
10003d3c:	003e6a06 	br	100036e8 <__alt_data_end+0xf80036e8>
10003d40:	2c62b03a 	or	r17,r5,r17
10003d44:	8822c03a 	cmpne	r17,r17,zero
10003d48:	0005883a 	mov	r2,zero
10003d4c:	003fa506 	br	10003be4 <__alt_data_end+0xf8003be4>
10003d50:	180b883a 	mov	r5,r3
10003d54:	3023883a 	mov	r17,r6
10003d58:	003e0306 	br	10003568 <__alt_data_end+0xf8003568>
10003d5c:	180b883a 	mov	r5,r3
10003d60:	3023883a 	mov	r17,r6
10003d64:	0401ffc4 	movi	r16,2047
10003d68:	003dff06 	br	10003568 <__alt_data_end+0xf8003568>
10003d6c:	113ff804 	addi	r4,r2,-32
10003d70:	01c00804 	movi	r7,32
10003d74:	2908d83a 	srl	r4,r5,r4
10003d78:	11c00a26 	beq	r2,r7,10003da4 <__subdf3+0x8c8>
10003d7c:	01c01004 	movi	r7,64
10003d80:	3885c83a 	sub	r2,r7,r2
10003d84:	288a983a 	sll	r5,r5,r2
10003d88:	2c62b03a 	or	r17,r5,r17
10003d8c:	8822c03a 	cmpne	r17,r17,zero
10003d90:	8922b03a 	or	r17,r17,r4
10003d94:	0005883a 	mov	r2,zero
10003d98:	003f9206 	br	10003be4 <__alt_data_end+0xf8003be4>
10003d9c:	000b883a 	mov	r5,zero
10003da0:	003fdc06 	br	10003d14 <__alt_data_end+0xf8003d14>
10003da4:	000b883a 	mov	r5,zero
10003da8:	003ff706 	br	10003d88 <__alt_data_end+0xf8003d88>

10003dac <__fixdfsi>:
10003dac:	2806d53a 	srli	r3,r5,20
10003db0:	00800434 	movhi	r2,16
10003db4:	10bfffc4 	addi	r2,r2,-1
10003db8:	18c1ffcc 	andi	r3,r3,2047
10003dbc:	0180ff84 	movi	r6,1022
10003dc0:	2884703a 	and	r2,r5,r2
10003dc4:	280ad7fa 	srli	r5,r5,31
10003dc8:	30c0130e 	bge	r6,r3,10003e18 <__fixdfsi+0x6c>
10003dcc:	01810744 	movi	r6,1053
10003dd0:	30c00d16 	blt	r6,r3,10003e08 <__fixdfsi+0x5c>
10003dd4:	01810cc4 	movi	r6,1075
10003dd8:	30cdc83a 	sub	r6,r6,r3
10003ddc:	01c007c4 	movi	r7,31
10003de0:	10800434 	orhi	r2,r2,16
10003de4:	39800e0e 	bge	r7,r6,10003e20 <__fixdfsi+0x74>
10003de8:	010104c4 	movi	r4,1043
10003dec:	20c7c83a 	sub	r3,r4,r3
10003df0:	10c6d83a 	srl	r3,r2,r3
10003df4:	29403fcc 	andi	r5,r5,255
10003df8:	0145c83a 	sub	r2,zero,r5
10003dfc:	1884f03a 	xor	r2,r3,r2
10003e00:	1145883a 	add	r2,r2,r5
10003e04:	f800283a 	ret
10003e08:	00a00034 	movhi	r2,32768
10003e0c:	10bfffc4 	addi	r2,r2,-1
10003e10:	2885883a 	add	r2,r5,r2
10003e14:	f800283a 	ret
10003e18:	0005883a 	mov	r2,zero
10003e1c:	f800283a 	ret
10003e20:	18fefb44 	addi	r3,r3,-1043
10003e24:	2188d83a 	srl	r4,r4,r6
10003e28:	10c6983a 	sll	r3,r2,r3
10003e2c:	20c6b03a 	or	r3,r4,r3
10003e30:	003ff006 	br	10003df4 <__alt_data_end+0xf8003df4>

10003e34 <__floatsidf>:
10003e34:	defffd04 	addi	sp,sp,-12
10003e38:	dc400115 	stw	r17,4(sp)
10003e3c:	dfc00215 	stw	ra,8(sp)
10003e40:	dc000015 	stw	r16,0(sp)
10003e44:	2023883a 	mov	r17,r4
10003e48:	20001426 	beq	r4,zero,10003e9c <__floatsidf+0x68>
10003e4c:	2020d7fa 	srli	r16,r4,31
10003e50:	80000126 	beq	r16,zero,10003e58 <__floatsidf+0x24>
10003e54:	0123c83a 	sub	r17,zero,r4
10003e58:	8809883a 	mov	r4,r17
10003e5c:	0003f040 	call	10003f04 <__clzsi2>
10003e60:	01410784 	movi	r5,1054
10003e64:	00c00284 	movi	r3,10
10003e68:	288bc83a 	sub	r5,r5,r2
10003e6c:	18801c16 	blt	r3,r2,10003ee0 <__floatsidf+0xac>
10003e70:	00c002c4 	movi	r3,11
10003e74:	1887c83a 	sub	r3,r3,r2
10003e78:	88c8d83a 	srl	r4,r17,r3
10003e7c:	00c00434 	movhi	r3,16
10003e80:	18ffffc4 	addi	r3,r3,-1
10003e84:	10800544 	addi	r2,r2,21
10003e88:	20c8703a 	and	r4,r4,r3
10003e8c:	8884983a 	sll	r2,r17,r2
10003e90:	28c1ffcc 	andi	r3,r5,2047
10003e94:	800d883a 	mov	r6,r16
10003e98:	00000406 	br	10003eac <__floatsidf+0x78>
10003e9c:	000d883a 	mov	r6,zero
10003ea0:	0007883a 	mov	r3,zero
10003ea4:	0009883a 	mov	r4,zero
10003ea8:	0005883a 	mov	r2,zero
10003eac:	180a953a 	slli	r5,r3,20
10003eb0:	31803fcc 	andi	r6,r6,255
10003eb4:	00c00434 	movhi	r3,16
10003eb8:	300c97fa 	slli	r6,r6,31
10003ebc:	18ffffc4 	addi	r3,r3,-1
10003ec0:	20c6703a 	and	r3,r4,r3
10003ec4:	1946b03a 	or	r3,r3,r5
10003ec8:	1986b03a 	or	r3,r3,r6
10003ecc:	dfc00217 	ldw	ra,8(sp)
10003ed0:	dc400117 	ldw	r17,4(sp)
10003ed4:	dc000017 	ldw	r16,0(sp)
10003ed8:	dec00304 	addi	sp,sp,12
10003edc:	f800283a 	ret
10003ee0:	10fffd44 	addi	r3,r2,-11
10003ee4:	88c8983a 	sll	r4,r17,r3
10003ee8:	00800434 	movhi	r2,16
10003eec:	10bfffc4 	addi	r2,r2,-1
10003ef0:	2088703a 	and	r4,r4,r2
10003ef4:	28c1ffcc 	andi	r3,r5,2047
10003ef8:	800d883a 	mov	r6,r16
10003efc:	0005883a 	mov	r2,zero
10003f00:	003fea06 	br	10003eac <__alt_data_end+0xf8003eac>

10003f04 <__clzsi2>:
10003f04:	00bfffd4 	movui	r2,65535
10003f08:	11000b36 	bltu	r2,r4,10003f38 <__clzsi2+0x34>
10003f0c:	00803fc4 	movi	r2,255
10003f10:	1100122e 	bgeu	r2,r4,10003f5c <__clzsi2+0x58>
10003f14:	00c00204 	movi	r3,8
10003f18:	01400604 	movi	r5,24
10003f1c:	20c8d83a 	srl	r4,r4,r3
10003f20:	00840074 	movhi	r2,4097
10003f24:	10846504 	addi	r2,r2,4500
10003f28:	1109883a 	add	r4,r2,r4
10003f2c:	20800003 	ldbu	r2,0(r4)
10003f30:	2885c83a 	sub	r2,r5,r2
10003f34:	f800283a 	ret
10003f38:	00804034 	movhi	r2,256
10003f3c:	10bfffc4 	addi	r2,r2,-1
10003f40:	11000336 	bltu	r2,r4,10003f50 <__clzsi2+0x4c>
10003f44:	00c00404 	movi	r3,16
10003f48:	180b883a 	mov	r5,r3
10003f4c:	003ff306 	br	10003f1c <__alt_data_end+0xf8003f1c>
10003f50:	00c00604 	movi	r3,24
10003f54:	01400204 	movi	r5,8
10003f58:	003ff006 	br	10003f1c <__alt_data_end+0xf8003f1c>
10003f5c:	0007883a 	mov	r3,zero
10003f60:	01400804 	movi	r5,32
10003f64:	003fed06 	br	10003f1c <__alt_data_end+0xf8003f1c>

10003f68 <_printf_r>:
10003f68:	defffd04 	addi	sp,sp,-12
10003f6c:	dfc00015 	stw	ra,0(sp)
10003f70:	d9800115 	stw	r6,4(sp)
10003f74:	d9c00215 	stw	r7,8(sp)
10003f78:	280d883a 	mov	r6,r5
10003f7c:	21400217 	ldw	r5,8(r4)
10003f80:	d9c00104 	addi	r7,sp,4
10003f84:	00041b00 	call	100041b0 <___vfprintf_internal_r>
10003f88:	dfc00017 	ldw	ra,0(sp)
10003f8c:	dec00304 	addi	sp,sp,12
10003f90:	f800283a 	ret

10003f94 <printf>:
10003f94:	defffc04 	addi	sp,sp,-16
10003f98:	dfc00015 	stw	ra,0(sp)
10003f9c:	d9400115 	stw	r5,4(sp)
10003fa0:	d9800215 	stw	r6,8(sp)
10003fa4:	d9c00315 	stw	r7,12(sp)
10003fa8:	00840074 	movhi	r2,4097
10003fac:	108bd104 	addi	r2,r2,12100
10003fb0:	10800017 	ldw	r2,0(r2)
10003fb4:	200b883a 	mov	r5,r4
10003fb8:	d9800104 	addi	r6,sp,4
10003fbc:	11000217 	ldw	r4,8(r2)
10003fc0:	00062ac0 	call	100062ac <__vfprintf_internal>
10003fc4:	dfc00017 	ldw	ra,0(sp)
10003fc8:	dec00404 	addi	sp,sp,16
10003fcc:	f800283a 	ret

10003fd0 <_puts_r>:
10003fd0:	defff604 	addi	sp,sp,-40
10003fd4:	dc000715 	stw	r16,28(sp)
10003fd8:	2021883a 	mov	r16,r4
10003fdc:	2809883a 	mov	r4,r5
10003fe0:	dc400815 	stw	r17,32(sp)
10003fe4:	dfc00915 	stw	ra,36(sp)
10003fe8:	2823883a 	mov	r17,r5
10003fec:	00041180 	call	10004118 <strlen>
10003ff0:	00c40074 	movhi	r3,4097
10003ff4:	18cbd104 	addi	r3,r3,12100
10003ff8:	18c00017 	ldw	r3,0(r3)
10003ffc:	11000044 	addi	r4,r2,1
10004000:	d8800115 	stw	r2,4(sp)
10004004:	18c00217 	ldw	r3,8(r3)
10004008:	01440074 	movhi	r5,4097
1000400c:	2944a504 	addi	r5,r5,4756
10004010:	1880030b 	ldhu	r2,12(r3)
10004014:	d9400215 	stw	r5,8(sp)
10004018:	d9000615 	stw	r4,24(sp)
1000401c:	01400044 	movi	r5,1
10004020:	01000084 	movi	r4,2
10004024:	d9000515 	stw	r4,20(sp)
10004028:	dc400015 	stw	r17,0(sp)
1000402c:	d9400315 	stw	r5,12(sp)
10004030:	dec00415 	stw	sp,16(sp)
10004034:	1108000c 	andi	r4,r2,8192
10004038:	2000061e 	bne	r4,zero,10004054 <_puts_r+0x84>
1000403c:	19401917 	ldw	r5,100(r3)
10004040:	0137ffc4 	movi	r4,-8193
10004044:	10880014 	ori	r2,r2,8192
10004048:	2908703a 	and	r4,r5,r4
1000404c:	1880030d 	sth	r2,12(r3)
10004050:	19001915 	stw	r4,100(r3)
10004054:	81400217 	ldw	r5,8(r16)
10004058:	8009883a 	mov	r4,r16
1000405c:	d9800404 	addi	r6,sp,16
10004060:	00087700 	call	10008770 <__sfvwrite_r>
10004064:	1000061e 	bne	r2,zero,10004080 <_puts_r+0xb0>
10004068:	00800284 	movi	r2,10
1000406c:	dfc00917 	ldw	ra,36(sp)
10004070:	dc400817 	ldw	r17,32(sp)
10004074:	dc000717 	ldw	r16,28(sp)
10004078:	dec00a04 	addi	sp,sp,40
1000407c:	f800283a 	ret
10004080:	00bfffc4 	movi	r2,-1
10004084:	003ff906 	br	1000406c <__alt_data_end+0xf800406c>

10004088 <puts>:
10004088:	00840074 	movhi	r2,4097
1000408c:	108bd104 	addi	r2,r2,12100
10004090:	200b883a 	mov	r5,r4
10004094:	11000017 	ldw	r4,0(r2)
10004098:	0003fd01 	jmpi	10003fd0 <_puts_r>

1000409c <srand>:
1000409c:	00840074 	movhi	r2,4097
100040a0:	108bd104 	addi	r2,r2,12100
100040a4:	10800017 	ldw	r2,0(r2)
100040a8:	11002915 	stw	r4,164(r2)
100040ac:	10002a15 	stw	zero,168(r2)
100040b0:	f800283a 	ret

100040b4 <rand>:
100040b4:	00840074 	movhi	r2,4097
100040b8:	defffe04 	addi	sp,sp,-8
100040bc:	108bd104 	addi	r2,r2,12100
100040c0:	dc000015 	stw	r16,0(sp)
100040c4:	14000017 	ldw	r16,0(r2)
100040c8:	dfc00115 	stw	ra,4(sp)
100040cc:	01932574 	movhi	r6,19605
100040d0:	81002917 	ldw	r4,164(r16)
100040d4:	81402a17 	ldw	r5,168(r16)
100040d8:	01d614b4 	movhi	r7,22610
100040dc:	319fcb44 	addi	r6,r6,32557
100040e0:	39fd0b44 	addi	r7,r7,-3027
100040e4:	000d39c0 	call	1000d39c <__muldi3>
100040e8:	11000044 	addi	r4,r2,1
100040ec:	2085803a 	cmpltu	r2,r4,r2
100040f0:	10c7883a 	add	r3,r2,r3
100040f4:	00a00034 	movhi	r2,32768
100040f8:	10bfffc4 	addi	r2,r2,-1
100040fc:	1884703a 	and	r2,r3,r2
10004100:	81002915 	stw	r4,164(r16)
10004104:	80c02a15 	stw	r3,168(r16)
10004108:	dfc00117 	ldw	ra,4(sp)
1000410c:	dc000017 	ldw	r16,0(sp)
10004110:	dec00204 	addi	sp,sp,8
10004114:	f800283a 	ret

10004118 <strlen>:
10004118:	208000cc 	andi	r2,r4,3
1000411c:	10002026 	beq	r2,zero,100041a0 <strlen+0x88>
10004120:	20800007 	ldb	r2,0(r4)
10004124:	10002026 	beq	r2,zero,100041a8 <strlen+0x90>
10004128:	2005883a 	mov	r2,r4
1000412c:	00000206 	br	10004138 <strlen+0x20>
10004130:	10c00007 	ldb	r3,0(r2)
10004134:	18001826 	beq	r3,zero,10004198 <strlen+0x80>
10004138:	10800044 	addi	r2,r2,1
1000413c:	10c000cc 	andi	r3,r2,3
10004140:	183ffb1e 	bne	r3,zero,10004130 <__alt_data_end+0xf8004130>
10004144:	10c00017 	ldw	r3,0(r2)
10004148:	01ffbff4 	movhi	r7,65279
1000414c:	39ffbfc4 	addi	r7,r7,-257
10004150:	00ca303a 	nor	r5,zero,r3
10004154:	01a02074 	movhi	r6,32897
10004158:	19c7883a 	add	r3,r3,r7
1000415c:	31a02004 	addi	r6,r6,-32640
10004160:	1946703a 	and	r3,r3,r5
10004164:	1986703a 	and	r3,r3,r6
10004168:	1800091e 	bne	r3,zero,10004190 <strlen+0x78>
1000416c:	10800104 	addi	r2,r2,4
10004170:	10c00017 	ldw	r3,0(r2)
10004174:	19cb883a 	add	r5,r3,r7
10004178:	00c6303a 	nor	r3,zero,r3
1000417c:	28c6703a 	and	r3,r5,r3
10004180:	1986703a 	and	r3,r3,r6
10004184:	183ff926 	beq	r3,zero,1000416c <__alt_data_end+0xf800416c>
10004188:	00000106 	br	10004190 <strlen+0x78>
1000418c:	10800044 	addi	r2,r2,1
10004190:	10c00007 	ldb	r3,0(r2)
10004194:	183ffd1e 	bne	r3,zero,1000418c <__alt_data_end+0xf800418c>
10004198:	1105c83a 	sub	r2,r2,r4
1000419c:	f800283a 	ret
100041a0:	2005883a 	mov	r2,r4
100041a4:	003fe706 	br	10004144 <__alt_data_end+0xf8004144>
100041a8:	0005883a 	mov	r2,zero
100041ac:	f800283a 	ret

100041b0 <___vfprintf_internal_r>:
100041b0:	defeb604 	addi	sp,sp,-1320
100041b4:	dfc14915 	stw	ra,1316(sp)
100041b8:	ddc14715 	stw	r23,1308(sp)
100041bc:	dd814615 	stw	r22,1304(sp)
100041c0:	202f883a 	mov	r23,r4
100041c4:	282d883a 	mov	r22,r5
100041c8:	d9812a15 	stw	r6,1192(sp)
100041cc:	d9c12d15 	stw	r7,1204(sp)
100041d0:	df014815 	stw	fp,1312(sp)
100041d4:	dd414515 	stw	r21,1300(sp)
100041d8:	dd014415 	stw	r20,1296(sp)
100041dc:	dcc14315 	stw	r19,1292(sp)
100041e0:	dc814215 	stw	r18,1288(sp)
100041e4:	dc414115 	stw	r17,1284(sp)
100041e8:	dc014015 	stw	r16,1280(sp)
100041ec:	0008e300 	call	10008e30 <_localeconv_r>
100041f0:	10800017 	ldw	r2,0(r2)
100041f4:	1009883a 	mov	r4,r2
100041f8:	d8813515 	stw	r2,1236(sp)
100041fc:	00041180 	call	10004118 <strlen>
10004200:	d8813815 	stw	r2,1248(sp)
10004204:	b8000226 	beq	r23,zero,10004210 <___vfprintf_internal_r+0x60>
10004208:	b8800e17 	ldw	r2,56(r23)
1000420c:	10010526 	beq	r2,zero,10004624 <___vfprintf_internal_r+0x474>
10004210:	b0c0030b 	ldhu	r3,12(r22)
10004214:	1908000c 	andi	r4,r3,8192
10004218:	1805883a 	mov	r2,r3
1000421c:	2000071e 	bne	r4,zero,1000423c <___vfprintf_internal_r+0x8c>
10004220:	b1001917 	ldw	r4,100(r22)
10004224:	18880014 	ori	r2,r3,8192
10004228:	00f7ffc4 	movi	r3,-8193
1000422c:	20c8703a 	and	r4,r4,r3
10004230:	b080030d 	sth	r2,12(r22)
10004234:	1007883a 	mov	r3,r2
10004238:	b1001915 	stw	r4,100(r22)
1000423c:	1100020c 	andi	r4,r2,8
10004240:	2000a826 	beq	r4,zero,100044e4 <___vfprintf_internal_r+0x334>
10004244:	b1000417 	ldw	r4,16(r22)
10004248:	2000a626 	beq	r4,zero,100044e4 <___vfprintf_internal_r+0x334>
1000424c:	1080068c 	andi	r2,r2,26
10004250:	01000284 	movi	r4,10
10004254:	1100ac26 	beq	r2,r4,10004508 <___vfprintf_internal_r+0x358>
10004258:	d8c10e04 	addi	r3,sp,1080
1000425c:	d9010dc4 	addi	r4,sp,1079
10004260:	d9400404 	addi	r5,sp,16
10004264:	05040074 	movhi	r20,4097
10004268:	1905c83a 	sub	r2,r3,r4
1000426c:	a504b684 	addi	r20,r20,4826
10004270:	d8c12815 	stw	r3,1184(sp)
10004274:	d9012915 	stw	r4,1188(sp)
10004278:	d9411e15 	stw	r5,1144(sp)
1000427c:	d8012015 	stw	zero,1152(sp)
10004280:	d8011f15 	stw	zero,1148(sp)
10004284:	d8013315 	stw	zero,1228(sp)
10004288:	d8013715 	stw	zero,1244(sp)
1000428c:	d8013915 	stw	zero,1252(sp)
10004290:	d8013b15 	stw	zero,1260(sp)
10004294:	d8013a15 	stw	zero,1256(sp)
10004298:	d8012f15 	stw	zero,1212(sp)
1000429c:	2811883a 	mov	r8,r5
100042a0:	d8813c15 	stw	r2,1264(sp)
100042a4:	d8c12a17 	ldw	r3,1192(sp)
100042a8:	18800007 	ldb	r2,0(r3)
100042ac:	10021326 	beq	r2,zero,10004afc <___vfprintf_internal_r+0x94c>
100042b0:	00c00944 	movi	r3,37
100042b4:	dc012a17 	ldw	r16,1192(sp)
100042b8:	10c0021e 	bne	r2,r3,100042c4 <___vfprintf_internal_r+0x114>
100042bc:	00001606 	br	10004318 <___vfprintf_internal_r+0x168>
100042c0:	10c08526 	beq	r2,r3,100044d8 <___vfprintf_internal_r+0x328>
100042c4:	84000044 	addi	r16,r16,1
100042c8:	80800007 	ldb	r2,0(r16)
100042cc:	103ffc1e 	bne	r2,zero,100042c0 <__alt_data_end+0xf80042c0>
100042d0:	d9012a17 	ldw	r4,1192(sp)
100042d4:	8123c83a 	sub	r17,r16,r4
100042d8:	88000f26 	beq	r17,zero,10004318 <___vfprintf_internal_r+0x168>
100042dc:	d8812a17 	ldw	r2,1192(sp)
100042e0:	d8c12017 	ldw	r3,1152(sp)
100042e4:	44400115 	stw	r17,4(r8)
100042e8:	40800015 	stw	r2,0(r8)
100042ec:	d8811f17 	ldw	r2,1148(sp)
100042f0:	1c47883a 	add	r3,r3,r17
100042f4:	d8c12015 	stw	r3,1152(sp)
100042f8:	10800044 	addi	r2,r2,1
100042fc:	d8811f15 	stw	r2,1148(sp)
10004300:	00c001c4 	movi	r3,7
10004304:	1880b516 	blt	r3,r2,100045dc <___vfprintf_internal_r+0x42c>
10004308:	42000204 	addi	r8,r8,8
1000430c:	d8c12f17 	ldw	r3,1212(sp)
10004310:	1c47883a 	add	r3,r3,r17
10004314:	d8c12f15 	stw	r3,1212(sp)
10004318:	80800007 	ldb	r2,0(r16)
1000431c:	1000b626 	beq	r2,zero,100045f8 <___vfprintf_internal_r+0x448>
10004320:	80800044 	addi	r2,r16,1
10004324:	84000047 	ldb	r16,1(r16)
10004328:	0027883a 	mov	r19,zero
1000432c:	0039883a 	mov	fp,zero
10004330:	dcc12b05 	stb	r19,1196(sp)
10004334:	d8012785 	stb	zero,1182(sp)
10004338:	027fffc4 	movi	r9,-1
1000433c:	d8012e15 	stw	zero,1208(sp)
10004340:	04401604 	movi	r17,88
10004344:	04800244 	movi	r18,9
10004348:	da012a15 	stw	r8,1192(sp)
1000434c:	e027883a 	mov	r19,fp
10004350:	17000044 	addi	fp,r2,1
10004354:	80bff804 	addi	r2,r16,-32
10004358:	88831236 	bltu	r17,r2,10004fa4 <___vfprintf_internal_r+0xdf4>
1000435c:	100490ba 	slli	r2,r2,2
10004360:	01040034 	movhi	r4,4096
10004364:	2110dd04 	addi	r4,r4,17268
10004368:	1105883a 	add	r2,r2,r4
1000436c:	10800017 	ldw	r2,0(r2)
10004370:	1000683a 	jmp	r2
10004374:	10004ec0 	call	110004ec <_gp+0xfe55ac>
10004378:	10004fa4 	muli	zero,r2,318
1000437c:	10004fa4 	muli	zero,r2,318
10004380:	10004edc 	xori	zero,r2,315
10004384:	10004fa4 	muli	zero,r2,318
10004388:	10004fa4 	muli	zero,r2,318
1000438c:	10004fa4 	muli	zero,r2,318
10004390:	10004fa4 	muli	zero,r2,318
10004394:	10004fa4 	muli	zero,r2,318
10004398:	10004fa4 	muli	zero,r2,318
1000439c:	10004eec 	andhi	zero,r2,315
100043a0:	10004f14 	ori	zero,r2,316
100043a4:	10004fa4 	muli	zero,r2,318
100043a8:	10004630 	cmpltui	zero,r2,280
100043ac:	10004640 	call	11000464 <_gp+0xfe5524>
100043b0:	10004fa4 	muli	zero,r2,318
100043b4:	10004690 	cmplti	zero,r2,282
100043b8:	100046a0 	cmpeqi	zero,r2,282
100043bc:	100046a0 	cmpeqi	zero,r2,282
100043c0:	100046a0 	cmpeqi	zero,r2,282
100043c4:	100046a0 	cmpeqi	zero,r2,282
100043c8:	100046a0 	cmpeqi	zero,r2,282
100043cc:	100046a0 	cmpeqi	zero,r2,282
100043d0:	100046a0 	cmpeqi	zero,r2,282
100043d4:	100046a0 	cmpeqi	zero,r2,282
100043d8:	100046a0 	cmpeqi	zero,r2,282
100043dc:	10004fa4 	muli	zero,r2,318
100043e0:	10004fa4 	muli	zero,r2,318
100043e4:	10004fa4 	muli	zero,r2,318
100043e8:	10004fa4 	muli	zero,r2,318
100043ec:	10004fa4 	muli	zero,r2,318
100043f0:	10004fa4 	muli	zero,r2,318
100043f4:	10004fa4 	muli	zero,r2,318
100043f8:	10004fa4 	muli	zero,r2,318
100043fc:	10004fa4 	muli	zero,r2,318
10004400:	10004fa4 	muli	zero,r2,318
10004404:	100046e4 	muli	zero,r2,283
10004408:	10004b04 	addi	zero,r2,300
1000440c:	10004fa4 	muli	zero,r2,318
10004410:	10004b04 	addi	zero,r2,300
10004414:	10004fa4 	muli	zero,r2,318
10004418:	10004fa4 	muli	zero,r2,318
1000441c:	10004fa4 	muli	zero,r2,318
10004420:	10004fa4 	muli	zero,r2,318
10004424:	10004bac 	andhi	zero,r2,302
10004428:	10004fa4 	muli	zero,r2,318
1000442c:	10004fa4 	muli	zero,r2,318
10004430:	10004bbc 	xorhi	zero,r2,302
10004434:	10004fa4 	muli	zero,r2,318
10004438:	10004fa4 	muli	zero,r2,318
1000443c:	10004fa4 	muli	zero,r2,318
10004440:	10004fa4 	muli	zero,r2,318
10004444:	10004fa4 	muli	zero,r2,318
10004448:	10004c00 	call	110004c0 <_gp+0xfe5580>
1000444c:	10004fa4 	muli	zero,r2,318
10004450:	10004fa4 	muli	zero,r2,318
10004454:	10004c38 	rdprs	zero,r2,304
10004458:	10004fa4 	muli	zero,r2,318
1000445c:	10004fa4 	muli	zero,r2,318
10004460:	10004fa4 	muli	zero,r2,318
10004464:	10004fa4 	muli	zero,r2,318
10004468:	10004fa4 	muli	zero,r2,318
1000446c:	10004fa4 	muli	zero,r2,318
10004470:	10004fa4 	muli	zero,r2,318
10004474:	10004fa4 	muli	zero,r2,318
10004478:	10004fa4 	muli	zero,r2,318
1000447c:	10004fa4 	muli	zero,r2,318
10004480:	10004e74 	orhi	zero,r2,313
10004484:	10004e20 	cmpeqi	zero,r2,312
10004488:	10004b04 	addi	zero,r2,300
1000448c:	10004b04 	addi	zero,r2,300
10004490:	10004b04 	addi	zero,r2,300
10004494:	10004e64 	muli	zero,r2,313
10004498:	10004e20 	cmpeqi	zero,r2,312
1000449c:	10004fa4 	muli	zero,r2,318
100044a0:	10004fa4 	muli	zero,r2,318
100044a4:	10004d3c 	xorhi	zero,r2,308
100044a8:	10004fa4 	muli	zero,r2,318
100044ac:	10004d54 	ori	zero,r2,309
100044b0:	10004d94 	ori	zero,r2,310
100044b4:	10004dd4 	ori	zero,r2,311
100044b8:	10004ca0 	cmpeqi	zero,r2,306
100044bc:	10004fa4 	muli	zero,r2,318
100044c0:	10004f28 	cmpgeui	zero,r2,316
100044c4:	10004fa4 	muli	zero,r2,318
100044c8:	10004cb0 	cmpltui	zero,r2,306
100044cc:	10004fa4 	muli	zero,r2,318
100044d0:	10004fa4 	muli	zero,r2,318
100044d4:	10004cf0 	cmpltui	zero,r2,307
100044d8:	d9412a17 	ldw	r5,1192(sp)
100044dc:	8163c83a 	sub	r17,r16,r5
100044e0:	003f7d06 	br	100042d8 <__alt_data_end+0xf80042d8>
100044e4:	b809883a 	mov	r4,r23
100044e8:	b00b883a 	mov	r5,r22
100044ec:	00062d00 	call	100062d0 <__swsetup_r>
100044f0:	10002d1e 	bne	r2,zero,100045a8 <___vfprintf_internal_r+0x3f8>
100044f4:	b0c0030b 	ldhu	r3,12(r22)
100044f8:	01000284 	movi	r4,10
100044fc:	1805883a 	mov	r2,r3
10004500:	1080068c 	andi	r2,r2,26
10004504:	113f541e 	bne	r2,r4,10004258 <__alt_data_end+0xf8004258>
10004508:	b080038b 	ldhu	r2,14(r22)
1000450c:	113fffcc 	andi	r4,r2,65535
10004510:	2120001c 	xori	r4,r4,32768
10004514:	21200004 	addi	r4,r4,-32768
10004518:	203f4f16 	blt	r4,zero,10004258 <__alt_data_end+0xf8004258>
1000451c:	b2c01917 	ldw	r11,100(r22)
10004520:	b2800717 	ldw	r10,28(r22)
10004524:	b2400917 	ldw	r9,36(r22)
10004528:	d9812a17 	ldw	r6,1192(sp)
1000452c:	d9c12d17 	ldw	r7,1204(sp)
10004530:	02010004 	movi	r8,1024
10004534:	18ffff4c 	andi	r3,r3,65533
10004538:	d881078d 	sth	r2,1054(sp)
1000453c:	b809883a 	mov	r4,r23
10004540:	d8800404 	addi	r2,sp,16
10004544:	d9410404 	addi	r5,sp,1040
10004548:	d8c1070d 	sth	r3,1052(sp)
1000454c:	dac11d15 	stw	r11,1140(sp)
10004550:	da810b15 	stw	r10,1068(sp)
10004554:	da410d15 	stw	r9,1076(sp)
10004558:	d8810415 	stw	r2,1040(sp)
1000455c:	d8810815 	stw	r2,1056(sp)
10004560:	da010615 	stw	r8,1048(sp)
10004564:	da010915 	stw	r8,1060(sp)
10004568:	d8010a15 	stw	zero,1064(sp)
1000456c:	00041b00 	call	100041b0 <___vfprintf_internal_r>
10004570:	1021883a 	mov	r16,r2
10004574:	10000416 	blt	r2,zero,10004588 <___vfprintf_internal_r+0x3d8>
10004578:	b809883a 	mov	r4,r23
1000457c:	d9410404 	addi	r5,sp,1040
10004580:	0007d500 	call	10007d50 <_fflush_r>
10004584:	1007301e 	bne	r2,zero,10006248 <___vfprintf_internal_r+0x2098>
10004588:	d881070b 	ldhu	r2,1052(sp)
1000458c:	1080100c 	andi	r2,r2,64
10004590:	10000326 	beq	r2,zero,100045a0 <___vfprintf_internal_r+0x3f0>
10004594:	b080030b 	ldhu	r2,12(r22)
10004598:	10801014 	ori	r2,r2,64
1000459c:	b080030d 	sth	r2,12(r22)
100045a0:	8005883a 	mov	r2,r16
100045a4:	00000106 	br	100045ac <___vfprintf_internal_r+0x3fc>
100045a8:	00bfffc4 	movi	r2,-1
100045ac:	dfc14917 	ldw	ra,1316(sp)
100045b0:	df014817 	ldw	fp,1312(sp)
100045b4:	ddc14717 	ldw	r23,1308(sp)
100045b8:	dd814617 	ldw	r22,1304(sp)
100045bc:	dd414517 	ldw	r21,1300(sp)
100045c0:	dd014417 	ldw	r20,1296(sp)
100045c4:	dcc14317 	ldw	r19,1292(sp)
100045c8:	dc814217 	ldw	r18,1288(sp)
100045cc:	dc414117 	ldw	r17,1284(sp)
100045d0:	dc014017 	ldw	r16,1280(sp)
100045d4:	dec14a04 	addi	sp,sp,1320
100045d8:	f800283a 	ret
100045dc:	b809883a 	mov	r4,r23
100045e0:	b00b883a 	mov	r5,r22
100045e4:	d9811e04 	addi	r6,sp,1144
100045e8:	000b5f00 	call	1000b5f0 <__sprint_r>
100045ec:	1000081e 	bne	r2,zero,10004610 <___vfprintf_internal_r+0x460>
100045f0:	da000404 	addi	r8,sp,16
100045f4:	003f4506 	br	1000430c <__alt_data_end+0xf800430c>
100045f8:	d8812017 	ldw	r2,1152(sp)
100045fc:	10000426 	beq	r2,zero,10004610 <___vfprintf_internal_r+0x460>
10004600:	b809883a 	mov	r4,r23
10004604:	b00b883a 	mov	r5,r22
10004608:	d9811e04 	addi	r6,sp,1144
1000460c:	000b5f00 	call	1000b5f0 <__sprint_r>
10004610:	b080030b 	ldhu	r2,12(r22)
10004614:	1080100c 	andi	r2,r2,64
10004618:	103fe31e 	bne	r2,zero,100045a8 <__alt_data_end+0xf80045a8>
1000461c:	d8812f17 	ldw	r2,1212(sp)
10004620:	003fe206 	br	100045ac <__alt_data_end+0xf80045ac>
10004624:	b809883a 	mov	r4,r23
10004628:	000830c0 	call	1000830c <__sinit>
1000462c:	003ef806 	br	10004210 <__alt_data_end+0xf8004210>
10004630:	e005883a 	mov	r2,fp
10004634:	9cc00114 	ori	r19,r19,4
10004638:	e4000007 	ldb	r16,0(fp)
1000463c:	003f4406 	br	10004350 <__alt_data_end+0xf8004350>
10004640:	e4000007 	ldb	r16,0(fp)
10004644:	01000a84 	movi	r4,42
10004648:	e0800044 	addi	r2,fp,1
1000464c:	8106f626 	beq	r16,r4,10006228 <___vfprintf_internal_r+0x2078>
10004650:	857ff404 	addi	r21,r16,-48
10004654:	1039883a 	mov	fp,r2
10004658:	0013883a 	mov	r9,zero
1000465c:	957f3d36 	bltu	r18,r21,10004354 <__alt_data_end+0xf8004354>
10004660:	0009883a 	mov	r4,zero
10004664:	01400284 	movi	r5,10
10004668:	0002c180 	call	10002c18 <__mulsi3>
1000466c:	e4000007 	ldb	r16,0(fp)
10004670:	a889883a 	add	r4,r21,r2
10004674:	e7000044 	addi	fp,fp,1
10004678:	857ff404 	addi	r21,r16,-48
1000467c:	957ff92e 	bgeu	r18,r21,10004664 <__alt_data_end+0xf8004664>
10004680:	2013883a 	mov	r9,r4
10004684:	203f330e 	bge	r4,zero,10004354 <__alt_data_end+0xf8004354>
10004688:	027fffc4 	movi	r9,-1
1000468c:	003f3106 	br	10004354 <__alt_data_end+0xf8004354>
10004690:	9cc02014 	ori	r19,r19,128
10004694:	e005883a 	mov	r2,fp
10004698:	e4000007 	ldb	r16,0(fp)
1000469c:	003f2c06 	br	10004350 <__alt_data_end+0xf8004350>
100046a0:	857ff404 	addi	r21,r16,-48
100046a4:	d8012e15 	stw	zero,1208(sp)
100046a8:	e021883a 	mov	r16,fp
100046ac:	0009883a 	mov	r4,zero
100046b0:	da412c15 	stw	r9,1200(sp)
100046b4:	01400284 	movi	r5,10
100046b8:	0002c180 	call	10002c18 <__mulsi3>
100046bc:	81400007 	ldb	r5,0(r16)
100046c0:	1549883a 	add	r4,r2,r21
100046c4:	e7000044 	addi	fp,fp,1
100046c8:	2d7ff404 	addi	r21,r5,-48
100046cc:	e021883a 	mov	r16,fp
100046d0:	957ff82e 	bgeu	r18,r21,100046b4 <__alt_data_end+0xf80046b4>
100046d4:	2821883a 	mov	r16,r5
100046d8:	d9012e15 	stw	r4,1208(sp)
100046dc:	da412c17 	ldw	r9,1200(sp)
100046e0:	003f1c06 	br	10004354 <__alt_data_end+0xf8004354>
100046e4:	da012a17 	ldw	r8,1192(sp)
100046e8:	df012a15 	stw	fp,1192(sp)
100046ec:	9839883a 	mov	fp,r19
100046f0:	dcc12b03 	ldbu	r19,1196(sp)
100046f4:	e7000414 	ori	fp,fp,16
100046f8:	e080080c 	andi	r2,fp,32
100046fc:	dcc12785 	stb	r19,1182(sp)
10004700:	d8c12d17 	ldw	r3,1204(sp)
10004704:	1001ce26 	beq	r2,zero,10004e40 <___vfprintf_internal_r+0xc90>
10004708:	d9012d17 	ldw	r4,1204(sp)
1000470c:	18800117 	ldw	r2,4(r3)
10004710:	1c800017 	ldw	r18,0(r3)
10004714:	21000204 	addi	r4,r4,8
10004718:	d9012d15 	stw	r4,1204(sp)
1000471c:	102b883a 	mov	r21,r2
10004720:	10044916 	blt	r2,zero,10005848 <___vfprintf_internal_r+0x1698>
10004724:	dcc12783 	ldbu	r19,1182(sp)
10004728:	da413215 	stw	r9,1224(sp)
1000472c:	00800044 	movi	r2,1
10004730:	9546b03a 	or	r3,r18,r21
10004734:	48000216 	blt	r9,zero,10004740 <___vfprintf_internal_r+0x590>
10004738:	013fdfc4 	movi	r4,-129
1000473c:	e138703a 	and	fp,fp,r4
10004740:	1802251e 	bne	r3,zero,10004fd8 <___vfprintf_internal_r+0xe28>
10004744:	48031726 	beq	r9,zero,100053a4 <___vfprintf_internal_r+0x11f4>
10004748:	10803fcc 	andi	r2,r2,255
1000474c:	00c00044 	movi	r3,1
10004750:	10c24526 	beq	r2,r3,10005068 <___vfprintf_internal_r+0xeb8>
10004754:	00c00084 	movi	r3,2
10004758:	10c33426 	beq	r2,r3,1000542c <___vfprintf_internal_r+0x127c>
1000475c:	d8c10e04 	addi	r3,sp,1080
10004760:	9008d0fa 	srli	r4,r18,3
10004764:	a80a977a 	slli	r5,r21,29
10004768:	a82ad0fa 	srli	r21,r21,3
1000476c:	948001cc 	andi	r18,r18,7
10004770:	90800c04 	addi	r2,r18,48
10004774:	18ffffc4 	addi	r3,r3,-1
10004778:	2924b03a 	or	r18,r5,r4
1000477c:	18800005 	stb	r2,0(r3)
10004780:	9548b03a 	or	r4,r18,r21
10004784:	203ff61e 	bne	r4,zero,10004760 <__alt_data_end+0xf8004760>
10004788:	e100004c 	andi	r4,fp,1
1000478c:	d8c13115 	stw	r3,1220(sp)
10004790:	20039a1e 	bne	r4,zero,100055fc <___vfprintf_internal_r+0x144c>
10004794:	d8812817 	ldw	r2,1184(sp)
10004798:	10e3c83a 	sub	r17,r2,r3
1000479c:	8805883a 	mov	r2,r17
100047a0:	8a40010e 	bge	r17,r9,100047a8 <___vfprintf_internal_r+0x5f8>
100047a4:	4805883a 	mov	r2,r9
100047a8:	d8812b15 	stw	r2,1196(sp)
100047ac:	d8013415 	stw	zero,1232(sp)
100047b0:	98803fcc 	andi	r2,r19,255
100047b4:	1080201c 	xori	r2,r2,128
100047b8:	10bfe004 	addi	r2,r2,-128
100047bc:	10000326 	beq	r2,zero,100047cc <___vfprintf_internal_r+0x61c>
100047c0:	d8c12b17 	ldw	r3,1196(sp)
100047c4:	18c00044 	addi	r3,r3,1
100047c8:	d8c12b15 	stw	r3,1196(sp)
100047cc:	e0c0008c 	andi	r3,fp,2
100047d0:	d8c12c15 	stw	r3,1200(sp)
100047d4:	18000326 	beq	r3,zero,100047e4 <___vfprintf_internal_r+0x634>
100047d8:	d8c12b17 	ldw	r3,1196(sp)
100047dc:	18c00084 	addi	r3,r3,2
100047e0:	d8c12b15 	stw	r3,1196(sp)
100047e4:	e0c0210c 	andi	r3,fp,132
100047e8:	d8c13015 	stw	r3,1216(sp)
100047ec:	1801f81e 	bne	r3,zero,10004fd0 <___vfprintf_internal_r+0xe20>
100047f0:	d9012e17 	ldw	r4,1208(sp)
100047f4:	d8c12b17 	ldw	r3,1196(sp)
100047f8:	20ebc83a 	sub	r21,r4,r3
100047fc:	0541f40e 	bge	zero,r21,10004fd0 <___vfprintf_internal_r+0xe20>
10004800:	02400404 	movi	r9,16
10004804:	d8c12017 	ldw	r3,1152(sp)
10004808:	d8811f17 	ldw	r2,1148(sp)
1000480c:	4d45750e 	bge	r9,r21,10005de4 <___vfprintf_internal_r+0x1c34>
10004810:	01440074 	movhi	r5,4097
10004814:	2944ba84 	addi	r5,r5,4842
10004818:	d9413615 	stw	r5,1240(sp)
1000481c:	4827883a 	mov	r19,r9
10004820:	048001c4 	movi	r18,7
10004824:	00000306 	br	10004834 <___vfprintf_internal_r+0x684>
10004828:	ad7ffc04 	addi	r21,r21,-16
1000482c:	42000204 	addi	r8,r8,8
10004830:	9d40130e 	bge	r19,r21,10004880 <___vfprintf_internal_r+0x6d0>
10004834:	01040074 	movhi	r4,4097
10004838:	18c00404 	addi	r3,r3,16
1000483c:	10800044 	addi	r2,r2,1
10004840:	2104ba84 	addi	r4,r4,4842
10004844:	41000015 	stw	r4,0(r8)
10004848:	44c00115 	stw	r19,4(r8)
1000484c:	d8c12015 	stw	r3,1152(sp)
10004850:	d8811f15 	stw	r2,1148(sp)
10004854:	90bff40e 	bge	r18,r2,10004828 <__alt_data_end+0xf8004828>
10004858:	b809883a 	mov	r4,r23
1000485c:	b00b883a 	mov	r5,r22
10004860:	d9811e04 	addi	r6,sp,1144
10004864:	000b5f00 	call	1000b5f0 <__sprint_r>
10004868:	103f691e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
1000486c:	ad7ffc04 	addi	r21,r21,-16
10004870:	d8c12017 	ldw	r3,1152(sp)
10004874:	d8811f17 	ldw	r2,1148(sp)
10004878:	da000404 	addi	r8,sp,16
1000487c:	9d7fed16 	blt	r19,r21,10004834 <__alt_data_end+0xf8004834>
10004880:	d9413617 	ldw	r5,1240(sp)
10004884:	a8c7883a 	add	r3,r21,r3
10004888:	10800044 	addi	r2,r2,1
1000488c:	41400015 	stw	r5,0(r8)
10004890:	45400115 	stw	r21,4(r8)
10004894:	d8c12015 	stw	r3,1152(sp)
10004898:	d8811f15 	stw	r2,1148(sp)
1000489c:	010001c4 	movi	r4,7
100048a0:	20832b16 	blt	r4,r2,10005550 <___vfprintf_internal_r+0x13a0>
100048a4:	d8812787 	ldb	r2,1182(sp)
100048a8:	42000204 	addi	r8,r8,8
100048ac:	10000c26 	beq	r2,zero,100048e0 <___vfprintf_internal_r+0x730>
100048b0:	d8811f17 	ldw	r2,1148(sp)
100048b4:	d9012784 	addi	r4,sp,1182
100048b8:	18c00044 	addi	r3,r3,1
100048bc:	10800044 	addi	r2,r2,1
100048c0:	41000015 	stw	r4,0(r8)
100048c4:	01000044 	movi	r4,1
100048c8:	41000115 	stw	r4,4(r8)
100048cc:	d8c12015 	stw	r3,1152(sp)
100048d0:	d8811f15 	stw	r2,1148(sp)
100048d4:	010001c4 	movi	r4,7
100048d8:	2082c416 	blt	r4,r2,100053ec <___vfprintf_internal_r+0x123c>
100048dc:	42000204 	addi	r8,r8,8
100048e0:	d8812c17 	ldw	r2,1200(sp)
100048e4:	10000c26 	beq	r2,zero,10004918 <___vfprintf_internal_r+0x768>
100048e8:	d8811f17 	ldw	r2,1148(sp)
100048ec:	d9012704 	addi	r4,sp,1180
100048f0:	18c00084 	addi	r3,r3,2
100048f4:	10800044 	addi	r2,r2,1
100048f8:	41000015 	stw	r4,0(r8)
100048fc:	01000084 	movi	r4,2
10004900:	41000115 	stw	r4,4(r8)
10004904:	d8c12015 	stw	r3,1152(sp)
10004908:	d8811f15 	stw	r2,1148(sp)
1000490c:	010001c4 	movi	r4,7
10004910:	2082be16 	blt	r4,r2,1000540c <___vfprintf_internal_r+0x125c>
10004914:	42000204 	addi	r8,r8,8
10004918:	d9013017 	ldw	r4,1216(sp)
1000491c:	00802004 	movi	r2,128
10004920:	20822026 	beq	r4,r2,100051a4 <___vfprintf_internal_r+0xff4>
10004924:	d9413217 	ldw	r5,1224(sp)
10004928:	2c67c83a 	sub	r19,r5,r17
1000492c:	04c0260e 	bge	zero,r19,100049c8 <___vfprintf_internal_r+0x818>
10004930:	05400404 	movi	r21,16
10004934:	d8811f17 	ldw	r2,1148(sp)
10004938:	acc4720e 	bge	r21,r19,10005b04 <___vfprintf_internal_r+0x1954>
1000493c:	01440074 	movhi	r5,4097
10004940:	2944b684 	addi	r5,r5,4826
10004944:	d9412c15 	stw	r5,1200(sp)
10004948:	048001c4 	movi	r18,7
1000494c:	00000306 	br	1000495c <___vfprintf_internal_r+0x7ac>
10004950:	9cfffc04 	addi	r19,r19,-16
10004954:	42000204 	addi	r8,r8,8
10004958:	acc0110e 	bge	r21,r19,100049a0 <___vfprintf_internal_r+0x7f0>
1000495c:	18c00404 	addi	r3,r3,16
10004960:	10800044 	addi	r2,r2,1
10004964:	45000015 	stw	r20,0(r8)
10004968:	45400115 	stw	r21,4(r8)
1000496c:	d8c12015 	stw	r3,1152(sp)
10004970:	d8811f15 	stw	r2,1148(sp)
10004974:	90bff60e 	bge	r18,r2,10004950 <__alt_data_end+0xf8004950>
10004978:	b809883a 	mov	r4,r23
1000497c:	b00b883a 	mov	r5,r22
10004980:	d9811e04 	addi	r6,sp,1144
10004984:	000b5f00 	call	1000b5f0 <__sprint_r>
10004988:	103f211e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
1000498c:	9cfffc04 	addi	r19,r19,-16
10004990:	d8c12017 	ldw	r3,1152(sp)
10004994:	d8811f17 	ldw	r2,1148(sp)
10004998:	da000404 	addi	r8,sp,16
1000499c:	acffef16 	blt	r21,r19,1000495c <__alt_data_end+0xf800495c>
100049a0:	d9012c17 	ldw	r4,1200(sp)
100049a4:	1cc7883a 	add	r3,r3,r19
100049a8:	10800044 	addi	r2,r2,1
100049ac:	41000015 	stw	r4,0(r8)
100049b0:	44c00115 	stw	r19,4(r8)
100049b4:	d8c12015 	stw	r3,1152(sp)
100049b8:	d8811f15 	stw	r2,1148(sp)
100049bc:	010001c4 	movi	r4,7
100049c0:	20828216 	blt	r4,r2,100053cc <___vfprintf_internal_r+0x121c>
100049c4:	42000204 	addi	r8,r8,8
100049c8:	e080400c 	andi	r2,fp,256
100049cc:	1001ac1e 	bne	r2,zero,10005080 <___vfprintf_internal_r+0xed0>
100049d0:	d8811f17 	ldw	r2,1148(sp)
100049d4:	d9413117 	ldw	r5,1220(sp)
100049d8:	1c47883a 	add	r3,r3,r17
100049dc:	10800044 	addi	r2,r2,1
100049e0:	41400015 	stw	r5,0(r8)
100049e4:	44400115 	stw	r17,4(r8)
100049e8:	d8c12015 	stw	r3,1152(sp)
100049ec:	d8811f15 	stw	r2,1148(sp)
100049f0:	010001c4 	movi	r4,7
100049f4:	20825d16 	blt	r4,r2,1000536c <___vfprintf_internal_r+0x11bc>
100049f8:	42000204 	addi	r8,r8,8
100049fc:	e080010c 	andi	r2,fp,4
10004a00:	10003126 	beq	r2,zero,10004ac8 <___vfprintf_internal_r+0x918>
10004a04:	d8812e17 	ldw	r2,1208(sp)
10004a08:	d9012b17 	ldw	r4,1196(sp)
10004a0c:	1121c83a 	sub	r16,r2,r4
10004a10:	04002d0e 	bge	zero,r16,10004ac8 <___vfprintf_internal_r+0x918>
10004a14:	04400404 	movi	r17,16
10004a18:	d8811f17 	ldw	r2,1148(sp)
10004a1c:	8c05340e 	bge	r17,r16,10005ef0 <___vfprintf_internal_r+0x1d40>
10004a20:	01040074 	movhi	r4,4097
10004a24:	2104ba84 	addi	r4,r4,4842
10004a28:	d9013615 	stw	r4,1240(sp)
10004a2c:	048001c4 	movi	r18,7
10004a30:	00000306 	br	10004a40 <___vfprintf_internal_r+0x890>
10004a34:	843ffc04 	addi	r16,r16,-16
10004a38:	42000204 	addi	r8,r8,8
10004a3c:	8c00130e 	bge	r17,r16,10004a8c <___vfprintf_internal_r+0x8dc>
10004a40:	01440074 	movhi	r5,4097
10004a44:	18c00404 	addi	r3,r3,16
10004a48:	10800044 	addi	r2,r2,1
10004a4c:	2944ba84 	addi	r5,r5,4842
10004a50:	41400015 	stw	r5,0(r8)
10004a54:	44400115 	stw	r17,4(r8)
10004a58:	d8c12015 	stw	r3,1152(sp)
10004a5c:	d8811f15 	stw	r2,1148(sp)
10004a60:	90bff40e 	bge	r18,r2,10004a34 <__alt_data_end+0xf8004a34>
10004a64:	b809883a 	mov	r4,r23
10004a68:	b00b883a 	mov	r5,r22
10004a6c:	d9811e04 	addi	r6,sp,1144
10004a70:	000b5f00 	call	1000b5f0 <__sprint_r>
10004a74:	103ee61e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10004a78:	843ffc04 	addi	r16,r16,-16
10004a7c:	d8c12017 	ldw	r3,1152(sp)
10004a80:	d8811f17 	ldw	r2,1148(sp)
10004a84:	da000404 	addi	r8,sp,16
10004a88:	8c3fed16 	blt	r17,r16,10004a40 <__alt_data_end+0xf8004a40>
10004a8c:	d9013617 	ldw	r4,1240(sp)
10004a90:	1c07883a 	add	r3,r3,r16
10004a94:	10800044 	addi	r2,r2,1
10004a98:	41000015 	stw	r4,0(r8)
10004a9c:	44000115 	stw	r16,4(r8)
10004aa0:	d8c12015 	stw	r3,1152(sp)
10004aa4:	d8811f15 	stw	r2,1148(sp)
10004aa8:	010001c4 	movi	r4,7
10004aac:	2080060e 	bge	r4,r2,10004ac8 <___vfprintf_internal_r+0x918>
10004ab0:	b809883a 	mov	r4,r23
10004ab4:	b00b883a 	mov	r5,r22
10004ab8:	d9811e04 	addi	r6,sp,1144
10004abc:	000b5f00 	call	1000b5f0 <__sprint_r>
10004ac0:	103ed31e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10004ac4:	d8c12017 	ldw	r3,1152(sp)
10004ac8:	df012b17 	ldw	fp,1196(sp)
10004acc:	d9412e17 	ldw	r5,1208(sp)
10004ad0:	e140010e 	bge	fp,r5,10004ad8 <___vfprintf_internal_r+0x928>
10004ad4:	2839883a 	mov	fp,r5
10004ad8:	d8812f17 	ldw	r2,1212(sp)
10004adc:	1705883a 	add	r2,r2,fp
10004ae0:	d8812f15 	stw	r2,1212(sp)
10004ae4:	1802291e 	bne	r3,zero,1000538c <___vfprintf_internal_r+0x11dc>
10004ae8:	d8c12a17 	ldw	r3,1192(sp)
10004aec:	d8011f15 	stw	zero,1148(sp)
10004af0:	da000404 	addi	r8,sp,16
10004af4:	18800007 	ldb	r2,0(r3)
10004af8:	103ded1e 	bne	r2,zero,100042b0 <__alt_data_end+0xf80042b0>
10004afc:	dc012a17 	ldw	r16,1192(sp)
10004b00:	003e0506 	br	10004318 <__alt_data_end+0xf8004318>
10004b04:	d9012d17 	ldw	r4,1204(sp)
10004b08:	d9412d17 	ldw	r5,1204(sp)
10004b0c:	da012a17 	ldw	r8,1192(sp)
10004b10:	21000017 	ldw	r4,0(r4)
10004b14:	29400117 	ldw	r5,4(r5)
10004b18:	df012a15 	stw	fp,1192(sp)
10004b1c:	9839883a 	mov	fp,r19
10004b20:	dcc12b03 	ldbu	r19,1196(sp)
10004b24:	d9013715 	stw	r4,1244(sp)
10004b28:	d9413915 	stw	r5,1252(sp)
10004b2c:	da013f15 	stw	r8,1276(sp)
10004b30:	da413e15 	stw	r9,1272(sp)
10004b34:	dcc12785 	stb	r19,1182(sp)
10004b38:	000b24c0 	call	1000b24c <__fpclassifyd>
10004b3c:	d8c12d17 	ldw	r3,1204(sp)
10004b40:	04400044 	movi	r17,1
10004b44:	da013f17 	ldw	r8,1276(sp)
10004b48:	1c800204 	addi	r18,r3,8
10004b4c:	da413e17 	ldw	r9,1272(sp)
10004b50:	d9013717 	ldw	r4,1244(sp)
10004b54:	d9413917 	ldw	r5,1252(sp)
10004b58:	1443451e 	bne	r2,r17,10005870 <___vfprintf_internal_r+0x16c0>
10004b5c:	000d883a 	mov	r6,zero
10004b60:	000f883a 	mov	r7,zero
10004b64:	000df8c0 	call	1000df8c <__ledf2>
10004b68:	da013f17 	ldw	r8,1276(sp)
10004b6c:	1004fe16 	blt	r2,zero,10005f68 <___vfprintf_internal_r+0x1db8>
10004b70:	dcc12783 	ldbu	r19,1182(sp)
10004b74:	008011c4 	movi	r2,71
10004b78:	14045d0e 	bge	r2,r16,10005cf0 <___vfprintf_internal_r+0x1b40>
10004b7c:	01440074 	movhi	r5,4097
10004b80:	2944a704 	addi	r5,r5,4764
10004b84:	d9413115 	stw	r5,1220(sp)
10004b88:	00c000c4 	movi	r3,3
10004b8c:	00bfdfc4 	movi	r2,-129
10004b90:	d8c12b15 	stw	r3,1196(sp)
10004b94:	e0b8703a 	and	fp,fp,r2
10004b98:	dc812d15 	stw	r18,1204(sp)
10004b9c:	1823883a 	mov	r17,r3
10004ba0:	d8013215 	stw	zero,1224(sp)
10004ba4:	d8013415 	stw	zero,1232(sp)
10004ba8:	003f0106 	br	100047b0 <__alt_data_end+0xf80047b0>
10004bac:	9cc00214 	ori	r19,r19,8
10004bb0:	e005883a 	mov	r2,fp
10004bb4:	e4000007 	ldb	r16,0(fp)
10004bb8:	003de506 	br	10004350 <__alt_data_end+0xf8004350>
10004bbc:	da012a17 	ldw	r8,1192(sp)
10004bc0:	df012a15 	stw	fp,1192(sp)
10004bc4:	9f000414 	ori	fp,r19,16
10004bc8:	e0c0080c 	andi	r3,fp,32
10004bcc:	d8812d17 	ldw	r2,1204(sp)
10004bd0:	18007626 	beq	r3,zero,10004dac <___vfprintf_internal_r+0xbfc>
10004bd4:	d9412d17 	ldw	r5,1204(sp)
10004bd8:	14800017 	ldw	r18,0(r2)
10004bdc:	15400117 	ldw	r21,4(r2)
10004be0:	29400204 	addi	r5,r5,8
10004be4:	d9412d15 	stw	r5,1204(sp)
10004be8:	0005883a 	mov	r2,zero
10004bec:	9546b03a 	or	r3,r18,r21
10004bf0:	d8012785 	stb	zero,1182(sp)
10004bf4:	da413215 	stw	r9,1224(sp)
10004bf8:	0027883a 	mov	r19,zero
10004bfc:	003ecd06 	br	10004734 <__alt_data_end+0xf8004734>
10004c00:	da012a17 	ldw	r8,1192(sp)
10004c04:	df012a15 	stw	fp,1192(sp)
10004c08:	9f000414 	ori	fp,r19,16
10004c0c:	e0c0080c 	andi	r3,fp,32
10004c10:	d8812d17 	ldw	r2,1204(sp)
10004c14:	18002c26 	beq	r3,zero,10004cc8 <___vfprintf_internal_r+0xb18>
10004c18:	d9012d17 	ldw	r4,1204(sp)
10004c1c:	14800017 	ldw	r18,0(r2)
10004c20:	15400117 	ldw	r21,4(r2)
10004c24:	21000204 	addi	r4,r4,8
10004c28:	d9012d15 	stw	r4,1204(sp)
10004c2c:	00800044 	movi	r2,1
10004c30:	9546b03a 	or	r3,r18,r21
10004c34:	003fee06 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10004c38:	da012a17 	ldw	r8,1192(sp)
10004c3c:	df012a15 	stw	fp,1192(sp)
10004c40:	9839883a 	mov	fp,r19
10004c44:	dcc12b03 	ldbu	r19,1196(sp)
10004c48:	01440074 	movhi	r5,4097
10004c4c:	2944aa04 	addi	r5,r5,4776
10004c50:	dcc12785 	stb	r19,1182(sp)
10004c54:	d9413b15 	stw	r5,1260(sp)
10004c58:	e0c0080c 	andi	r3,fp,32
10004c5c:	d8812d17 	ldw	r2,1204(sp)
10004c60:	18002e26 	beq	r3,zero,10004d1c <___vfprintf_internal_r+0xb6c>
10004c64:	d9412d17 	ldw	r5,1204(sp)
10004c68:	14800017 	ldw	r18,0(r2)
10004c6c:	15400117 	ldw	r21,4(r2)
10004c70:	29400204 	addi	r5,r5,8
10004c74:	d9412d15 	stw	r5,1204(sp)
10004c78:	e080004c 	andi	r2,fp,1
10004c7c:	10025c26 	beq	r2,zero,100055f0 <___vfprintf_internal_r+0x1440>
10004c80:	9546b03a 	or	r3,r18,r21
10004c84:	18038f26 	beq	r3,zero,10005ac4 <___vfprintf_internal_r+0x1914>
10004c88:	00800c04 	movi	r2,48
10004c8c:	d8812705 	stb	r2,1180(sp)
10004c90:	dc012745 	stb	r16,1181(sp)
10004c94:	e7000094 	ori	fp,fp,2
10004c98:	00800084 	movi	r2,2
10004c9c:	003fd406 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10004ca0:	9cc00814 	ori	r19,r19,32
10004ca4:	e005883a 	mov	r2,fp
10004ca8:	e4000007 	ldb	r16,0(fp)
10004cac:	003da806 	br	10004350 <__alt_data_end+0xf8004350>
10004cb0:	da012a17 	ldw	r8,1192(sp)
10004cb4:	df012a15 	stw	fp,1192(sp)
10004cb8:	9839883a 	mov	fp,r19
10004cbc:	e0c0080c 	andi	r3,fp,32
10004cc0:	d8812d17 	ldw	r2,1204(sp)
10004cc4:	183fd41e 	bne	r3,zero,10004c18 <__alt_data_end+0xf8004c18>
10004cc8:	e0c0040c 	andi	r3,fp,16
10004ccc:	18035f26 	beq	r3,zero,10005a4c <___vfprintf_internal_r+0x189c>
10004cd0:	d9412d17 	ldw	r5,1204(sp)
10004cd4:	14800017 	ldw	r18,0(r2)
10004cd8:	002b883a 	mov	r21,zero
10004cdc:	29400104 	addi	r5,r5,4
10004ce0:	d9412d15 	stw	r5,1204(sp)
10004ce4:	00800044 	movi	r2,1
10004ce8:	9007883a 	mov	r3,r18
10004cec:	003fc006 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10004cf0:	da012a17 	ldw	r8,1192(sp)
10004cf4:	df012a15 	stw	fp,1192(sp)
10004cf8:	9839883a 	mov	fp,r19
10004cfc:	dcc12b03 	ldbu	r19,1196(sp)
10004d00:	01040074 	movhi	r4,4097
10004d04:	2104af04 	addi	r4,r4,4796
10004d08:	d9013b15 	stw	r4,1260(sp)
10004d0c:	dcc12785 	stb	r19,1182(sp)
10004d10:	e0c0080c 	andi	r3,fp,32
10004d14:	d8812d17 	ldw	r2,1204(sp)
10004d18:	183fd21e 	bne	r3,zero,10004c64 <__alt_data_end+0xf8004c64>
10004d1c:	e0c0040c 	andi	r3,fp,16
10004d20:	18035426 	beq	r3,zero,10005a74 <___vfprintf_internal_r+0x18c4>
10004d24:	d8c12d17 	ldw	r3,1204(sp)
10004d28:	14800017 	ldw	r18,0(r2)
10004d2c:	002b883a 	mov	r21,zero
10004d30:	18c00104 	addi	r3,r3,4
10004d34:	d8c12d15 	stw	r3,1204(sp)
10004d38:	003fcf06 	br	10004c78 <__alt_data_end+0xf8004c78>
10004d3c:	e4000007 	ldb	r16,0(fp)
10004d40:	00801b04 	movi	r2,108
10004d44:	8083f726 	beq	r16,r2,10005d24 <___vfprintf_internal_r+0x1b74>
10004d48:	9cc00414 	ori	r19,r19,16
10004d4c:	e005883a 	mov	r2,fp
10004d50:	003d7f06 	br	10004350 <__alt_data_end+0xf8004350>
10004d54:	da012a17 	ldw	r8,1192(sp)
10004d58:	df012a15 	stw	fp,1192(sp)
10004d5c:	9839883a 	mov	fp,r19
10004d60:	dcc12b03 	ldbu	r19,1196(sp)
10004d64:	e080080c 	andi	r2,fp,32
10004d68:	dcc12785 	stb	r19,1182(sp)
10004d6c:	10032226 	beq	r2,zero,100059f8 <___vfprintf_internal_r+0x1848>
10004d70:	d9412d17 	ldw	r5,1204(sp)
10004d74:	d9012f17 	ldw	r4,1212(sp)
10004d78:	28800017 	ldw	r2,0(r5)
10004d7c:	2007d7fa 	srai	r3,r4,31
10004d80:	29400104 	addi	r5,r5,4
10004d84:	d9412d15 	stw	r5,1204(sp)
10004d88:	11000015 	stw	r4,0(r2)
10004d8c:	10c00115 	stw	r3,4(r2)
10004d90:	003d4406 	br	100042a4 <__alt_data_end+0xf80042a4>
10004d94:	da012a17 	ldw	r8,1192(sp)
10004d98:	df012a15 	stw	fp,1192(sp)
10004d9c:	9839883a 	mov	fp,r19
10004da0:	e0c0080c 	andi	r3,fp,32
10004da4:	d8812d17 	ldw	r2,1204(sp)
10004da8:	183f8a1e 	bne	r3,zero,10004bd4 <__alt_data_end+0xf8004bd4>
10004dac:	e0c0040c 	andi	r3,fp,16
10004db0:	18031c26 	beq	r3,zero,10005a24 <___vfprintf_internal_r+0x1874>
10004db4:	14800017 	ldw	r18,0(r2)
10004db8:	d8812d17 	ldw	r2,1204(sp)
10004dbc:	002b883a 	mov	r21,zero
10004dc0:	9007883a 	mov	r3,r18
10004dc4:	10800104 	addi	r2,r2,4
10004dc8:	d8812d15 	stw	r2,1204(sp)
10004dcc:	0005883a 	mov	r2,zero
10004dd0:	003f8706 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10004dd4:	d9412d17 	ldw	r5,1204(sp)
10004dd8:	00800c04 	movi	r2,48
10004ddc:	d8812705 	stb	r2,1180(sp)
10004de0:	2c800017 	ldw	r18,0(r5)
10004de4:	00801e04 	movi	r2,120
10004de8:	d8812745 	stb	r2,1181(sp)
10004dec:	00840074 	movhi	r2,4097
10004df0:	1084af04 	addi	r2,r2,4796
10004df4:	29400104 	addi	r5,r5,4
10004df8:	da012a17 	ldw	r8,1192(sp)
10004dfc:	d8813b15 	stw	r2,1260(sp)
10004e00:	df012a15 	stw	fp,1192(sp)
10004e04:	002b883a 	mov	r21,zero
10004e08:	9f000094 	ori	fp,r19,2
10004e0c:	d9412d15 	stw	r5,1204(sp)
10004e10:	00800084 	movi	r2,2
10004e14:	04001e04 	movi	r16,120
10004e18:	9007883a 	mov	r3,r18
10004e1c:	003f7406 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10004e20:	da012a17 	ldw	r8,1192(sp)
10004e24:	df012a15 	stw	fp,1192(sp)
10004e28:	9839883a 	mov	fp,r19
10004e2c:	dcc12b03 	ldbu	r19,1196(sp)
10004e30:	e080080c 	andi	r2,fp,32
10004e34:	d8c12d17 	ldw	r3,1204(sp)
10004e38:	dcc12785 	stb	r19,1182(sp)
10004e3c:	103e321e 	bne	r2,zero,10004708 <__alt_data_end+0xf8004708>
10004e40:	e080040c 	andi	r2,fp,16
10004e44:	10031326 	beq	r2,zero,10005a94 <___vfprintf_internal_r+0x18e4>
10004e48:	1c800017 	ldw	r18,0(r3)
10004e4c:	d9412d17 	ldw	r5,1204(sp)
10004e50:	902bd7fa 	srai	r21,r18,31
10004e54:	29400104 	addi	r5,r5,4
10004e58:	d9412d15 	stw	r5,1204(sp)
10004e5c:	a805883a 	mov	r2,r21
10004e60:	003e2f06 	br	10004720 <__alt_data_end+0xf8004720>
10004e64:	9cc01014 	ori	r19,r19,64
10004e68:	e005883a 	mov	r2,fp
10004e6c:	e4000007 	ldb	r16,0(fp)
10004e70:	003d3706 	br	10004350 <__alt_data_end+0xf8004350>
10004e74:	d8c12d17 	ldw	r3,1204(sp)
10004e78:	d9012d17 	ldw	r4,1204(sp)
10004e7c:	da012a17 	ldw	r8,1192(sp)
10004e80:	18800017 	ldw	r2,0(r3)
10004e84:	21000104 	addi	r4,r4,4
10004e88:	00c00044 	movi	r3,1
10004e8c:	df012a15 	stw	fp,1192(sp)
10004e90:	d8c12b15 	stw	r3,1196(sp)
10004e94:	9839883a 	mov	fp,r19
10004e98:	d8012785 	stb	zero,1182(sp)
10004e9c:	d8810405 	stb	r2,1040(sp)
10004ea0:	d9012d15 	stw	r4,1204(sp)
10004ea4:	1823883a 	mov	r17,r3
10004ea8:	d8c10404 	addi	r3,sp,1040
10004eac:	d8013215 	stw	zero,1224(sp)
10004eb0:	d8013415 	stw	zero,1232(sp)
10004eb4:	d8c13115 	stw	r3,1220(sp)
10004eb8:	0005883a 	mov	r2,zero
10004ebc:	003e4306 	br	100047cc <__alt_data_end+0xf80047cc>
10004ec0:	d8812b07 	ldb	r2,1196(sp)
10004ec4:	1002fc1e 	bne	r2,zero,10005ab8 <___vfprintf_internal_r+0x1908>
10004ec8:	00c00804 	movi	r3,32
10004ecc:	d8c12b05 	stb	r3,1196(sp)
10004ed0:	e005883a 	mov	r2,fp
10004ed4:	e4000007 	ldb	r16,0(fp)
10004ed8:	003d1d06 	br	10004350 <__alt_data_end+0xf8004350>
10004edc:	9cc00054 	ori	r19,r19,1
10004ee0:	e005883a 	mov	r2,fp
10004ee4:	e4000007 	ldb	r16,0(fp)
10004ee8:	003d1906 	br	10004350 <__alt_data_end+0xf8004350>
10004eec:	d9012d17 	ldw	r4,1204(sp)
10004ef0:	d9412d17 	ldw	r5,1204(sp)
10004ef4:	21000017 	ldw	r4,0(r4)
10004ef8:	28c00104 	addi	r3,r5,4
10004efc:	d9012e15 	stw	r4,1208(sp)
10004f00:	20038c16 	blt	r4,zero,10005d34 <___vfprintf_internal_r+0x1b84>
10004f04:	d8c12d15 	stw	r3,1204(sp)
10004f08:	e005883a 	mov	r2,fp
10004f0c:	e4000007 	ldb	r16,0(fp)
10004f10:	003d0f06 	br	10004350 <__alt_data_end+0xf8004350>
10004f14:	00c00ac4 	movi	r3,43
10004f18:	d8c12b05 	stb	r3,1196(sp)
10004f1c:	e005883a 	mov	r2,fp
10004f20:	e4000007 	ldb	r16,0(fp)
10004f24:	003d0a06 	br	10004350 <__alt_data_end+0xf8004350>
10004f28:	d8c12d17 	ldw	r3,1204(sp)
10004f2c:	d9012d17 	ldw	r4,1204(sp)
10004f30:	da012a17 	ldw	r8,1192(sp)
10004f34:	18c00017 	ldw	r3,0(r3)
10004f38:	df012a15 	stw	fp,1192(sp)
10004f3c:	d8012785 	stb	zero,1182(sp)
10004f40:	d8c13115 	stw	r3,1220(sp)
10004f44:	9839883a 	mov	fp,r19
10004f48:	24800104 	addi	r18,r4,4
10004f4c:	1803f726 	beq	r3,zero,10005f2c <___vfprintf_internal_r+0x1d7c>
10004f50:	d9013117 	ldw	r4,1220(sp)
10004f54:	48038916 	blt	r9,zero,10005d7c <___vfprintf_internal_r+0x1bcc>
10004f58:	480d883a 	mov	r6,r9
10004f5c:	000b883a 	mov	r5,zero
10004f60:	da013f15 	stw	r8,1276(sp)
10004f64:	da413e15 	stw	r9,1272(sp)
10004f68:	00097c40 	call	100097c4 <memchr>
10004f6c:	da013f17 	ldw	r8,1276(sp)
10004f70:	da413e17 	ldw	r9,1272(sp)
10004f74:	10045926 	beq	r2,zero,100060dc <___vfprintf_internal_r+0x1f2c>
10004f78:	d8c13117 	ldw	r3,1220(sp)
10004f7c:	10e3c83a 	sub	r17,r2,r3
10004f80:	4c433516 	blt	r9,r17,10005c58 <___vfprintf_internal_r+0x1aa8>
10004f84:	8805883a 	mov	r2,r17
10004f88:	88038116 	blt	r17,zero,10005d90 <___vfprintf_internal_r+0x1be0>
10004f8c:	dcc12783 	ldbu	r19,1182(sp)
10004f90:	d8812b15 	stw	r2,1196(sp)
10004f94:	dc812d15 	stw	r18,1204(sp)
10004f98:	d8013215 	stw	zero,1224(sp)
10004f9c:	d8013415 	stw	zero,1232(sp)
10004fa0:	003e0306 	br	100047b0 <__alt_data_end+0xf80047b0>
10004fa4:	da012a17 	ldw	r8,1192(sp)
10004fa8:	df012a15 	stw	fp,1192(sp)
10004fac:	9839883a 	mov	fp,r19
10004fb0:	dcc12b03 	ldbu	r19,1196(sp)
10004fb4:	dcc12785 	stb	r19,1182(sp)
10004fb8:	803d8f26 	beq	r16,zero,100045f8 <__alt_data_end+0xf80045f8>
10004fbc:	00c00044 	movi	r3,1
10004fc0:	d8c12b15 	stw	r3,1196(sp)
10004fc4:	dc010405 	stb	r16,1040(sp)
10004fc8:	d8012785 	stb	zero,1182(sp)
10004fcc:	003fb506 	br	10004ea4 <__alt_data_end+0xf8004ea4>
10004fd0:	d8c12017 	ldw	r3,1152(sp)
10004fd4:	003e3506 	br	100048ac <__alt_data_end+0xf80048ac>
10004fd8:	10803fcc 	andi	r2,r2,255
10004fdc:	00c00044 	movi	r3,1
10004fe0:	10fddc1e 	bne	r2,r3,10004754 <__alt_data_end+0xf8004754>
10004fe4:	a800021e 	bne	r21,zero,10004ff0 <___vfprintf_internal_r+0xe40>
10004fe8:	00800244 	movi	r2,9
10004fec:	14801e2e 	bgeu	r2,r18,10005068 <___vfprintf_internal_r+0xeb8>
10004ff0:	dc012b15 	stw	r16,1196(sp)
10004ff4:	dc410e04 	addi	r17,sp,1080
10004ff8:	9021883a 	mov	r16,r18
10004ffc:	da012c15 	stw	r8,1200(sp)
10005000:	a825883a 	mov	r18,r21
10005004:	482b883a 	mov	r21,r9
10005008:	8009883a 	mov	r4,r16
1000500c:	900b883a 	mov	r5,r18
10005010:	01800284 	movi	r6,10
10005014:	000f883a 	mov	r7,zero
10005018:	00024d00 	call	100024d0 <__umoddi3>
1000501c:	10800c04 	addi	r2,r2,48
10005020:	8c7fffc4 	addi	r17,r17,-1
10005024:	8009883a 	mov	r4,r16
10005028:	900b883a 	mov	r5,r18
1000502c:	01800284 	movi	r6,10
10005030:	000f883a 	mov	r7,zero
10005034:	88800005 	stb	r2,0(r17)
10005038:	0001e900 	call	10001e90 <__udivdi3>
1000503c:	1021883a 	mov	r16,r2
10005040:	10c4b03a 	or	r2,r2,r3
10005044:	1825883a 	mov	r18,r3
10005048:	103fef1e 	bne	r2,zero,10005008 <__alt_data_end+0xf8005008>
1000504c:	d9012817 	ldw	r4,1184(sp)
10005050:	dc413115 	stw	r17,1220(sp)
10005054:	dc012b17 	ldw	r16,1196(sp)
10005058:	da012c17 	ldw	r8,1200(sp)
1000505c:	a813883a 	mov	r9,r21
10005060:	2463c83a 	sub	r17,r4,r17
10005064:	003dcd06 	br	1000479c <__alt_data_end+0xf800479c>
10005068:	94800c04 	addi	r18,r18,48
1000506c:	d8c10dc4 	addi	r3,sp,1079
10005070:	dc810dc5 	stb	r18,1079(sp)
10005074:	dc413c17 	ldw	r17,1264(sp)
10005078:	d8c13115 	stw	r3,1220(sp)
1000507c:	003dc706 	br	1000479c <__alt_data_end+0xf800479c>
10005080:	00801944 	movi	r2,101
10005084:	1400720e 	bge	r2,r16,10005250 <___vfprintf_internal_r+0x10a0>
10005088:	d9013717 	ldw	r4,1244(sp)
1000508c:	d9413917 	ldw	r5,1252(sp)
10005090:	000d883a 	mov	r6,zero
10005094:	000f883a 	mov	r7,zero
10005098:	d8c13d15 	stw	r3,1268(sp)
1000509c:	da013f15 	stw	r8,1276(sp)
100050a0:	000de280 	call	1000de28 <__eqdf2>
100050a4:	d8c13d17 	ldw	r3,1268(sp)
100050a8:	da013f17 	ldw	r8,1276(sp)
100050ac:	1000f41e 	bne	r2,zero,10005480 <___vfprintf_internal_r+0x12d0>
100050b0:	d8811f17 	ldw	r2,1148(sp)
100050b4:	01040074 	movhi	r4,4097
100050b8:	2104b604 	addi	r4,r4,4824
100050bc:	18c00044 	addi	r3,r3,1
100050c0:	10800044 	addi	r2,r2,1
100050c4:	41000015 	stw	r4,0(r8)
100050c8:	01000044 	movi	r4,1
100050cc:	41000115 	stw	r4,4(r8)
100050d0:	d8c12015 	stw	r3,1152(sp)
100050d4:	d8811f15 	stw	r2,1148(sp)
100050d8:	010001c4 	movi	r4,7
100050dc:	20828d16 	blt	r4,r2,10005b14 <___vfprintf_internal_r+0x1964>
100050e0:	42000204 	addi	r8,r8,8
100050e4:	d8812617 	ldw	r2,1176(sp)
100050e8:	d9413317 	ldw	r5,1228(sp)
100050ec:	11400216 	blt	r2,r5,100050f8 <___vfprintf_internal_r+0xf48>
100050f0:	e080004c 	andi	r2,fp,1
100050f4:	103e4126 	beq	r2,zero,100049fc <__alt_data_end+0xf80049fc>
100050f8:	d8813817 	ldw	r2,1248(sp)
100050fc:	d9013517 	ldw	r4,1236(sp)
10005100:	d9413817 	ldw	r5,1248(sp)
10005104:	1887883a 	add	r3,r3,r2
10005108:	d8811f17 	ldw	r2,1148(sp)
1000510c:	41000015 	stw	r4,0(r8)
10005110:	41400115 	stw	r5,4(r8)
10005114:	10800044 	addi	r2,r2,1
10005118:	d8c12015 	stw	r3,1152(sp)
1000511c:	d8811f15 	stw	r2,1148(sp)
10005120:	010001c4 	movi	r4,7
10005124:	20830916 	blt	r4,r2,10005d4c <___vfprintf_internal_r+0x1b9c>
10005128:	42000204 	addi	r8,r8,8
1000512c:	d8813317 	ldw	r2,1228(sp)
10005130:	143fffc4 	addi	r16,r2,-1
10005134:	043e310e 	bge	zero,r16,100049fc <__alt_data_end+0xf80049fc>
10005138:	04400404 	movi	r17,16
1000513c:	d8811f17 	ldw	r2,1148(sp)
10005140:	8c007e0e 	bge	r17,r16,1000533c <___vfprintf_internal_r+0x118c>
10005144:	01440074 	movhi	r5,4097
10005148:	2944b684 	addi	r5,r5,4826
1000514c:	d9412c15 	stw	r5,1200(sp)
10005150:	04c001c4 	movi	r19,7
10005154:	00000306 	br	10005164 <___vfprintf_internal_r+0xfb4>
10005158:	42000204 	addi	r8,r8,8
1000515c:	843ffc04 	addi	r16,r16,-16
10005160:	8c00790e 	bge	r17,r16,10005348 <___vfprintf_internal_r+0x1198>
10005164:	18c00404 	addi	r3,r3,16
10005168:	10800044 	addi	r2,r2,1
1000516c:	45000015 	stw	r20,0(r8)
10005170:	44400115 	stw	r17,4(r8)
10005174:	d8c12015 	stw	r3,1152(sp)
10005178:	d8811f15 	stw	r2,1148(sp)
1000517c:	98bff60e 	bge	r19,r2,10005158 <__alt_data_end+0xf8005158>
10005180:	b809883a 	mov	r4,r23
10005184:	b00b883a 	mov	r5,r22
10005188:	d9811e04 	addi	r6,sp,1144
1000518c:	000b5f00 	call	1000b5f0 <__sprint_r>
10005190:	103d1f1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005194:	d8c12017 	ldw	r3,1152(sp)
10005198:	d8811f17 	ldw	r2,1148(sp)
1000519c:	da000404 	addi	r8,sp,16
100051a0:	003fee06 	br	1000515c <__alt_data_end+0xf800515c>
100051a4:	d9412e17 	ldw	r5,1208(sp)
100051a8:	d8812b17 	ldw	r2,1196(sp)
100051ac:	28a7c83a 	sub	r19,r5,r2
100051b0:	04fddc0e 	bge	zero,r19,10004924 <__alt_data_end+0xf8004924>
100051b4:	05400404 	movi	r21,16
100051b8:	d8811f17 	ldw	r2,1148(sp)
100051bc:	acc3870e 	bge	r21,r19,10005fdc <___vfprintf_internal_r+0x1e2c>
100051c0:	01440074 	movhi	r5,4097
100051c4:	2944b684 	addi	r5,r5,4826
100051c8:	d9412c15 	stw	r5,1200(sp)
100051cc:	048001c4 	movi	r18,7
100051d0:	00000306 	br	100051e0 <___vfprintf_internal_r+0x1030>
100051d4:	9cfffc04 	addi	r19,r19,-16
100051d8:	42000204 	addi	r8,r8,8
100051dc:	acc0110e 	bge	r21,r19,10005224 <___vfprintf_internal_r+0x1074>
100051e0:	18c00404 	addi	r3,r3,16
100051e4:	10800044 	addi	r2,r2,1
100051e8:	45000015 	stw	r20,0(r8)
100051ec:	45400115 	stw	r21,4(r8)
100051f0:	d8c12015 	stw	r3,1152(sp)
100051f4:	d8811f15 	stw	r2,1148(sp)
100051f8:	90bff60e 	bge	r18,r2,100051d4 <__alt_data_end+0xf80051d4>
100051fc:	b809883a 	mov	r4,r23
10005200:	b00b883a 	mov	r5,r22
10005204:	d9811e04 	addi	r6,sp,1144
10005208:	000b5f00 	call	1000b5f0 <__sprint_r>
1000520c:	103d001e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005210:	9cfffc04 	addi	r19,r19,-16
10005214:	d8c12017 	ldw	r3,1152(sp)
10005218:	d8811f17 	ldw	r2,1148(sp)
1000521c:	da000404 	addi	r8,sp,16
10005220:	acffef16 	blt	r21,r19,100051e0 <__alt_data_end+0xf80051e0>
10005224:	d9012c17 	ldw	r4,1200(sp)
10005228:	1cc7883a 	add	r3,r3,r19
1000522c:	10800044 	addi	r2,r2,1
10005230:	41000015 	stw	r4,0(r8)
10005234:	44c00115 	stw	r19,4(r8)
10005238:	d8c12015 	stw	r3,1152(sp)
1000523c:	d8811f15 	stw	r2,1148(sp)
10005240:	010001c4 	movi	r4,7
10005244:	20817816 	blt	r4,r2,10005828 <___vfprintf_internal_r+0x1678>
10005248:	42000204 	addi	r8,r8,8
1000524c:	003db506 	br	10004924 <__alt_data_end+0xf8004924>
10005250:	d9413317 	ldw	r5,1228(sp)
10005254:	00800044 	movi	r2,1
10005258:	18c00044 	addi	r3,r3,1
1000525c:	11413e0e 	bge	r2,r5,10005758 <___vfprintf_internal_r+0x15a8>
10005260:	dc011f17 	ldw	r16,1148(sp)
10005264:	d8813117 	ldw	r2,1220(sp)
10005268:	d8c12015 	stw	r3,1152(sp)
1000526c:	84000044 	addi	r16,r16,1
10005270:	40800015 	stw	r2,0(r8)
10005274:	00800044 	movi	r2,1
10005278:	40800115 	stw	r2,4(r8)
1000527c:	dc011f15 	stw	r16,1148(sp)
10005280:	008001c4 	movi	r2,7
10005284:	14015616 	blt	r2,r16,100057e0 <___vfprintf_internal_r+0x1630>
10005288:	42000204 	addi	r8,r8,8
1000528c:	d9013817 	ldw	r4,1248(sp)
10005290:	d9413517 	ldw	r5,1236(sp)
10005294:	84000044 	addi	r16,r16,1
10005298:	1907883a 	add	r3,r3,r4
1000529c:	41400015 	stw	r5,0(r8)
100052a0:	41000115 	stw	r4,4(r8)
100052a4:	d8c12015 	stw	r3,1152(sp)
100052a8:	dc011f15 	stw	r16,1148(sp)
100052ac:	008001c4 	movi	r2,7
100052b0:	14015416 	blt	r2,r16,10005804 <___vfprintf_internal_r+0x1654>
100052b4:	44400204 	addi	r17,r8,8
100052b8:	d9013717 	ldw	r4,1244(sp)
100052bc:	d9413917 	ldw	r5,1252(sp)
100052c0:	000d883a 	mov	r6,zero
100052c4:	000f883a 	mov	r7,zero
100052c8:	d8c13d15 	stw	r3,1268(sp)
100052cc:	000de280 	call	1000de28 <__eqdf2>
100052d0:	d8c13d17 	ldw	r3,1268(sp)
100052d4:	1000a726 	beq	r2,zero,10005574 <___vfprintf_internal_r+0x13c4>
100052d8:	d9013317 	ldw	r4,1228(sp)
100052dc:	d9413117 	ldw	r5,1220(sp)
100052e0:	84000044 	addi	r16,r16,1
100052e4:	20bfffc4 	addi	r2,r4,-1
100052e8:	1887883a 	add	r3,r3,r2
100052ec:	29000044 	addi	r4,r5,1
100052f0:	88800115 	stw	r2,4(r17)
100052f4:	89000015 	stw	r4,0(r17)
100052f8:	d8c12015 	stw	r3,1152(sp)
100052fc:	dc011f15 	stw	r16,1148(sp)
10005300:	008001c4 	movi	r2,7
10005304:	14012d16 	blt	r2,r16,100057bc <___vfprintf_internal_r+0x160c>
10005308:	8c400204 	addi	r17,r17,8
1000530c:	d9413a17 	ldw	r5,1256(sp)
10005310:	dcc122c4 	addi	r19,sp,1163
10005314:	84000044 	addi	r16,r16,1
10005318:	28c7883a 	add	r3,r5,r3
1000531c:	8cc00015 	stw	r19,0(r17)
10005320:	89400115 	stw	r5,4(r17)
10005324:	d8c12015 	stw	r3,1152(sp)
10005328:	dc011f15 	stw	r16,1148(sp)
1000532c:	008001c4 	movi	r2,7
10005330:	14000e16 	blt	r2,r16,1000536c <___vfprintf_internal_r+0x11bc>
10005334:	8a000204 	addi	r8,r17,8
10005338:	003db006 	br	100049fc <__alt_data_end+0xf80049fc>
1000533c:	01040074 	movhi	r4,4097
10005340:	2104b684 	addi	r4,r4,4826
10005344:	d9012c15 	stw	r4,1200(sp)
10005348:	d9012c17 	ldw	r4,1200(sp)
1000534c:	1c07883a 	add	r3,r3,r16
10005350:	44000115 	stw	r16,4(r8)
10005354:	41000015 	stw	r4,0(r8)
10005358:	10800044 	addi	r2,r2,1
1000535c:	d8c12015 	stw	r3,1152(sp)
10005360:	d8811f15 	stw	r2,1148(sp)
10005364:	010001c4 	movi	r4,7
10005368:	20bda30e 	bge	r4,r2,100049f8 <__alt_data_end+0xf80049f8>
1000536c:	b809883a 	mov	r4,r23
10005370:	b00b883a 	mov	r5,r22
10005374:	d9811e04 	addi	r6,sp,1144
10005378:	000b5f00 	call	1000b5f0 <__sprint_r>
1000537c:	103ca41e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005380:	d8c12017 	ldw	r3,1152(sp)
10005384:	da000404 	addi	r8,sp,16
10005388:	003d9c06 	br	100049fc <__alt_data_end+0xf80049fc>
1000538c:	b809883a 	mov	r4,r23
10005390:	b00b883a 	mov	r5,r22
10005394:	d9811e04 	addi	r6,sp,1144
10005398:	000b5f00 	call	1000b5f0 <__sprint_r>
1000539c:	103dd226 	beq	r2,zero,10004ae8 <__alt_data_end+0xf8004ae8>
100053a0:	003c9b06 	br	10004610 <__alt_data_end+0xf8004610>
100053a4:	10803fcc 	andi	r2,r2,255
100053a8:	1000311e 	bne	r2,zero,10005470 <___vfprintf_internal_r+0x12c0>
100053ac:	e080004c 	andi	r2,fp,1
100053b0:	10002f26 	beq	r2,zero,10005470 <___vfprintf_internal_r+0x12c0>
100053b4:	00800c04 	movi	r2,48
100053b8:	d8c10dc4 	addi	r3,sp,1079
100053bc:	d8810dc5 	stb	r2,1079(sp)
100053c0:	dc413c17 	ldw	r17,1264(sp)
100053c4:	d8c13115 	stw	r3,1220(sp)
100053c8:	003cf406 	br	1000479c <__alt_data_end+0xf800479c>
100053cc:	b809883a 	mov	r4,r23
100053d0:	b00b883a 	mov	r5,r22
100053d4:	d9811e04 	addi	r6,sp,1144
100053d8:	000b5f00 	call	1000b5f0 <__sprint_r>
100053dc:	103c8c1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
100053e0:	d8c12017 	ldw	r3,1152(sp)
100053e4:	da000404 	addi	r8,sp,16
100053e8:	003d7706 	br	100049c8 <__alt_data_end+0xf80049c8>
100053ec:	b809883a 	mov	r4,r23
100053f0:	b00b883a 	mov	r5,r22
100053f4:	d9811e04 	addi	r6,sp,1144
100053f8:	000b5f00 	call	1000b5f0 <__sprint_r>
100053fc:	103c841e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005400:	d8c12017 	ldw	r3,1152(sp)
10005404:	da000404 	addi	r8,sp,16
10005408:	003d3506 	br	100048e0 <__alt_data_end+0xf80048e0>
1000540c:	b809883a 	mov	r4,r23
10005410:	b00b883a 	mov	r5,r22
10005414:	d9811e04 	addi	r6,sp,1144
10005418:	000b5f00 	call	1000b5f0 <__sprint_r>
1000541c:	103c7c1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005420:	d8c12017 	ldw	r3,1152(sp)
10005424:	da000404 	addi	r8,sp,16
10005428:	003d3b06 	br	10004918 <__alt_data_end+0xf8004918>
1000542c:	d9413b17 	ldw	r5,1260(sp)
10005430:	d8c10e04 	addi	r3,sp,1080
10005434:	908003cc 	andi	r2,r18,15
10005438:	a808973a 	slli	r4,r21,28
1000543c:	2885883a 	add	r2,r5,r2
10005440:	9024d13a 	srli	r18,r18,4
10005444:	10800003 	ldbu	r2,0(r2)
10005448:	a82ad13a 	srli	r21,r21,4
1000544c:	18ffffc4 	addi	r3,r3,-1
10005450:	24a4b03a 	or	r18,r4,r18
10005454:	18800005 	stb	r2,0(r3)
10005458:	9544b03a 	or	r2,r18,r21
1000545c:	103ff51e 	bne	r2,zero,10005434 <__alt_data_end+0xf8005434>
10005460:	d9412817 	ldw	r5,1184(sp)
10005464:	d8c13115 	stw	r3,1220(sp)
10005468:	28e3c83a 	sub	r17,r5,r3
1000546c:	003ccb06 	br	1000479c <__alt_data_end+0xf800479c>
10005470:	d8c10e04 	addi	r3,sp,1080
10005474:	0023883a 	mov	r17,zero
10005478:	d8c13115 	stw	r3,1220(sp)
1000547c:	003cc706 	br	1000479c <__alt_data_end+0xf800479c>
10005480:	dc012617 	ldw	r16,1176(sp)
10005484:	0401ab0e 	bge	zero,r16,10005b34 <___vfprintf_internal_r+0x1984>
10005488:	d8813317 	ldw	r2,1228(sp)
1000548c:	d9413117 	ldw	r5,1220(sp)
10005490:	d9013417 	ldw	r4,1232(sp)
10005494:	1023883a 	mov	r17,r2
10005498:	28a1883a 	add	r16,r5,r2
1000549c:	2080010e 	bge	r4,r2,100054a4 <___vfprintf_internal_r+0x12f4>
100054a0:	2023883a 	mov	r17,r4
100054a4:	04400b0e 	bge	zero,r17,100054d4 <___vfprintf_internal_r+0x1324>
100054a8:	d8811f17 	ldw	r2,1148(sp)
100054ac:	d9413117 	ldw	r5,1220(sp)
100054b0:	1c47883a 	add	r3,r3,r17
100054b4:	10800044 	addi	r2,r2,1
100054b8:	41400015 	stw	r5,0(r8)
100054bc:	44400115 	stw	r17,4(r8)
100054c0:	d8c12015 	stw	r3,1152(sp)
100054c4:	d8811f15 	stw	r2,1148(sp)
100054c8:	010001c4 	movi	r4,7
100054cc:	20826716 	blt	r4,r2,10005e6c <___vfprintf_internal_r+0x1cbc>
100054d0:	42000204 	addi	r8,r8,8
100054d4:	88026316 	blt	r17,zero,10005e64 <___vfprintf_internal_r+0x1cb4>
100054d8:	d8813417 	ldw	r2,1232(sp)
100054dc:	1463c83a 	sub	r17,r2,r17
100054e0:	0440590e 	bge	zero,r17,10005648 <___vfprintf_internal_r+0x1498>
100054e4:	04c00404 	movi	r19,16
100054e8:	d8811f17 	ldw	r2,1148(sp)
100054ec:	9c41770e 	bge	r19,r17,10005acc <___vfprintf_internal_r+0x191c>
100054f0:	01440074 	movhi	r5,4097
100054f4:	2944b684 	addi	r5,r5,4826
100054f8:	d9412c15 	stw	r5,1200(sp)
100054fc:	054001c4 	movi	r21,7
10005500:	00000306 	br	10005510 <___vfprintf_internal_r+0x1360>
10005504:	42000204 	addi	r8,r8,8
10005508:	8c7ffc04 	addi	r17,r17,-16
1000550c:	9c41720e 	bge	r19,r17,10005ad8 <___vfprintf_internal_r+0x1928>
10005510:	18c00404 	addi	r3,r3,16
10005514:	10800044 	addi	r2,r2,1
10005518:	45000015 	stw	r20,0(r8)
1000551c:	44c00115 	stw	r19,4(r8)
10005520:	d8c12015 	stw	r3,1152(sp)
10005524:	d8811f15 	stw	r2,1148(sp)
10005528:	a8bff60e 	bge	r21,r2,10005504 <__alt_data_end+0xf8005504>
1000552c:	b809883a 	mov	r4,r23
10005530:	b00b883a 	mov	r5,r22
10005534:	d9811e04 	addi	r6,sp,1144
10005538:	000b5f00 	call	1000b5f0 <__sprint_r>
1000553c:	103c341e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005540:	d8c12017 	ldw	r3,1152(sp)
10005544:	d8811f17 	ldw	r2,1148(sp)
10005548:	da000404 	addi	r8,sp,16
1000554c:	003fee06 	br	10005508 <__alt_data_end+0xf8005508>
10005550:	b809883a 	mov	r4,r23
10005554:	b00b883a 	mov	r5,r22
10005558:	d9811e04 	addi	r6,sp,1144
1000555c:	000b5f00 	call	1000b5f0 <__sprint_r>
10005560:	103c2b1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005564:	d8c12017 	ldw	r3,1152(sp)
10005568:	d8812787 	ldb	r2,1182(sp)
1000556c:	da000404 	addi	r8,sp,16
10005570:	003cce06 	br	100048ac <__alt_data_end+0xf80048ac>
10005574:	d8813317 	ldw	r2,1228(sp)
10005578:	14ffffc4 	addi	r19,r2,-1
1000557c:	04ff630e 	bge	zero,r19,1000530c <__alt_data_end+0xf800530c>
10005580:	05400404 	movi	r21,16
10005584:	acc0810e 	bge	r21,r19,1000578c <___vfprintf_internal_r+0x15dc>
10005588:	01440074 	movhi	r5,4097
1000558c:	2944b684 	addi	r5,r5,4826
10005590:	d9412c15 	stw	r5,1200(sp)
10005594:	01c001c4 	movi	r7,7
10005598:	00000306 	br	100055a8 <___vfprintf_internal_r+0x13f8>
1000559c:	8c400204 	addi	r17,r17,8
100055a0:	9cfffc04 	addi	r19,r19,-16
100055a4:	acc07c0e 	bge	r21,r19,10005798 <___vfprintf_internal_r+0x15e8>
100055a8:	18c00404 	addi	r3,r3,16
100055ac:	84000044 	addi	r16,r16,1
100055b0:	8d000015 	stw	r20,0(r17)
100055b4:	8d400115 	stw	r21,4(r17)
100055b8:	d8c12015 	stw	r3,1152(sp)
100055bc:	dc011f15 	stw	r16,1148(sp)
100055c0:	3c3ff60e 	bge	r7,r16,1000559c <__alt_data_end+0xf800559c>
100055c4:	b809883a 	mov	r4,r23
100055c8:	b00b883a 	mov	r5,r22
100055cc:	d9811e04 	addi	r6,sp,1144
100055d0:	d9c13d15 	stw	r7,1268(sp)
100055d4:	000b5f00 	call	1000b5f0 <__sprint_r>
100055d8:	d9c13d17 	ldw	r7,1268(sp)
100055dc:	103c0c1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
100055e0:	d8c12017 	ldw	r3,1152(sp)
100055e4:	dc011f17 	ldw	r16,1148(sp)
100055e8:	dc400404 	addi	r17,sp,16
100055ec:	003fec06 	br	100055a0 <__alt_data_end+0xf80055a0>
100055f0:	00800084 	movi	r2,2
100055f4:	9546b03a 	or	r3,r18,r21
100055f8:	003d7d06 	br	10004bf0 <__alt_data_end+0xf8004bf0>
100055fc:	10803fcc 	andi	r2,r2,255
10005600:	1080201c 	xori	r2,r2,128
10005604:	10bfe004 	addi	r2,r2,-128
10005608:	01000c04 	movi	r4,48
1000560c:	1101d726 	beq	r2,r4,10005d6c <___vfprintf_internal_r+0x1bbc>
10005610:	d9413117 	ldw	r5,1220(sp)
10005614:	d8812817 	ldw	r2,1184(sp)
10005618:	193fffc5 	stb	r4,-1(r3)
1000561c:	297fffc4 	addi	r5,r5,-1
10005620:	d9413115 	stw	r5,1220(sp)
10005624:	1163c83a 	sub	r17,r2,r5
10005628:	003c5c06 	br	1000479c <__alt_data_end+0xf800479c>
1000562c:	b809883a 	mov	r4,r23
10005630:	b00b883a 	mov	r5,r22
10005634:	d9811e04 	addi	r6,sp,1144
10005638:	000b5f00 	call	1000b5f0 <__sprint_r>
1000563c:	103bf41e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005640:	d8c12017 	ldw	r3,1152(sp)
10005644:	da000404 	addi	r8,sp,16
10005648:	d9413117 	ldw	r5,1220(sp)
1000564c:	d9013417 	ldw	r4,1232(sp)
10005650:	d8812617 	ldw	r2,1176(sp)
10005654:	2923883a 	add	r17,r5,r4
10005658:	d9413317 	ldw	r5,1228(sp)
1000565c:	11400216 	blt	r2,r5,10005668 <___vfprintf_internal_r+0x14b8>
10005660:	e100004c 	andi	r4,fp,1
10005664:	20000d26 	beq	r4,zero,1000569c <___vfprintf_internal_r+0x14ec>
10005668:	d9013817 	ldw	r4,1248(sp)
1000566c:	d9413517 	ldw	r5,1236(sp)
10005670:	1907883a 	add	r3,r3,r4
10005674:	d9011f17 	ldw	r4,1148(sp)
10005678:	41400015 	stw	r5,0(r8)
1000567c:	d9413817 	ldw	r5,1248(sp)
10005680:	21000044 	addi	r4,r4,1
10005684:	d8c12015 	stw	r3,1152(sp)
10005688:	41400115 	stw	r5,4(r8)
1000568c:	d9011f15 	stw	r4,1148(sp)
10005690:	014001c4 	movi	r5,7
10005694:	2901fd16 	blt	r5,r4,10005e8c <___vfprintf_internal_r+0x1cdc>
10005698:	42000204 	addi	r8,r8,8
1000569c:	d9013317 	ldw	r4,1228(sp)
100056a0:	2085c83a 	sub	r2,r4,r2
100056a4:	8449c83a 	sub	r4,r16,r17
100056a8:	1021883a 	mov	r16,r2
100056ac:	2080010e 	bge	r4,r2,100056b4 <___vfprintf_internal_r+0x1504>
100056b0:	2021883a 	mov	r16,r4
100056b4:	04000a0e 	bge	zero,r16,100056e0 <___vfprintf_internal_r+0x1530>
100056b8:	d9011f17 	ldw	r4,1148(sp)
100056bc:	1c07883a 	add	r3,r3,r16
100056c0:	44400015 	stw	r17,0(r8)
100056c4:	21000044 	addi	r4,r4,1
100056c8:	44000115 	stw	r16,4(r8)
100056cc:	d8c12015 	stw	r3,1152(sp)
100056d0:	d9011f15 	stw	r4,1148(sp)
100056d4:	014001c4 	movi	r5,7
100056d8:	29020916 	blt	r5,r4,10005f00 <___vfprintf_internal_r+0x1d50>
100056dc:	42000204 	addi	r8,r8,8
100056e0:	80020116 	blt	r16,zero,10005ee8 <___vfprintf_internal_r+0x1d38>
100056e4:	1421c83a 	sub	r16,r2,r16
100056e8:	043cc40e 	bge	zero,r16,100049fc <__alt_data_end+0xf80049fc>
100056ec:	04400404 	movi	r17,16
100056f0:	d8811f17 	ldw	r2,1148(sp)
100056f4:	8c3f110e 	bge	r17,r16,1000533c <__alt_data_end+0xf800533c>
100056f8:	01440074 	movhi	r5,4097
100056fc:	2944b684 	addi	r5,r5,4826
10005700:	d9412c15 	stw	r5,1200(sp)
10005704:	04c001c4 	movi	r19,7
10005708:	00000306 	br	10005718 <___vfprintf_internal_r+0x1568>
1000570c:	42000204 	addi	r8,r8,8
10005710:	843ffc04 	addi	r16,r16,-16
10005714:	8c3f0c0e 	bge	r17,r16,10005348 <__alt_data_end+0xf8005348>
10005718:	18c00404 	addi	r3,r3,16
1000571c:	10800044 	addi	r2,r2,1
10005720:	45000015 	stw	r20,0(r8)
10005724:	44400115 	stw	r17,4(r8)
10005728:	d8c12015 	stw	r3,1152(sp)
1000572c:	d8811f15 	stw	r2,1148(sp)
10005730:	98bff60e 	bge	r19,r2,1000570c <__alt_data_end+0xf800570c>
10005734:	b809883a 	mov	r4,r23
10005738:	b00b883a 	mov	r5,r22
1000573c:	d9811e04 	addi	r6,sp,1144
10005740:	000b5f00 	call	1000b5f0 <__sprint_r>
10005744:	103bb21e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005748:	d8c12017 	ldw	r3,1152(sp)
1000574c:	d8811f17 	ldw	r2,1148(sp)
10005750:	da000404 	addi	r8,sp,16
10005754:	003fee06 	br	10005710 <__alt_data_end+0xf8005710>
10005758:	e088703a 	and	r4,fp,r2
1000575c:	203ec01e 	bne	r4,zero,10005260 <__alt_data_end+0xf8005260>
10005760:	dc011f17 	ldw	r16,1148(sp)
10005764:	d9013117 	ldw	r4,1220(sp)
10005768:	40800115 	stw	r2,4(r8)
1000576c:	84000044 	addi	r16,r16,1
10005770:	41000015 	stw	r4,0(r8)
10005774:	d8c12015 	stw	r3,1152(sp)
10005778:	dc011f15 	stw	r16,1148(sp)
1000577c:	008001c4 	movi	r2,7
10005780:	14000e16 	blt	r2,r16,100057bc <___vfprintf_internal_r+0x160c>
10005784:	44400204 	addi	r17,r8,8
10005788:	003ee006 	br	1000530c <__alt_data_end+0xf800530c>
1000578c:	01040074 	movhi	r4,4097
10005790:	2104b684 	addi	r4,r4,4826
10005794:	d9012c15 	stw	r4,1200(sp)
10005798:	d8812c17 	ldw	r2,1200(sp)
1000579c:	1cc7883a 	add	r3,r3,r19
100057a0:	84000044 	addi	r16,r16,1
100057a4:	88800015 	stw	r2,0(r17)
100057a8:	8cc00115 	stw	r19,4(r17)
100057ac:	d8c12015 	stw	r3,1152(sp)
100057b0:	dc011f15 	stw	r16,1148(sp)
100057b4:	008001c4 	movi	r2,7
100057b8:	143ed30e 	bge	r2,r16,10005308 <__alt_data_end+0xf8005308>
100057bc:	b809883a 	mov	r4,r23
100057c0:	b00b883a 	mov	r5,r22
100057c4:	d9811e04 	addi	r6,sp,1144
100057c8:	000b5f00 	call	1000b5f0 <__sprint_r>
100057cc:	103b901e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
100057d0:	d8c12017 	ldw	r3,1152(sp)
100057d4:	dc011f17 	ldw	r16,1148(sp)
100057d8:	dc400404 	addi	r17,sp,16
100057dc:	003ecb06 	br	1000530c <__alt_data_end+0xf800530c>
100057e0:	b809883a 	mov	r4,r23
100057e4:	b00b883a 	mov	r5,r22
100057e8:	d9811e04 	addi	r6,sp,1144
100057ec:	000b5f00 	call	1000b5f0 <__sprint_r>
100057f0:	103b871e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
100057f4:	d8c12017 	ldw	r3,1152(sp)
100057f8:	dc011f17 	ldw	r16,1148(sp)
100057fc:	da000404 	addi	r8,sp,16
10005800:	003ea206 	br	1000528c <__alt_data_end+0xf800528c>
10005804:	b809883a 	mov	r4,r23
10005808:	b00b883a 	mov	r5,r22
1000580c:	d9811e04 	addi	r6,sp,1144
10005810:	000b5f00 	call	1000b5f0 <__sprint_r>
10005814:	103b7e1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005818:	d8c12017 	ldw	r3,1152(sp)
1000581c:	dc011f17 	ldw	r16,1148(sp)
10005820:	dc400404 	addi	r17,sp,16
10005824:	003ea406 	br	100052b8 <__alt_data_end+0xf80052b8>
10005828:	b809883a 	mov	r4,r23
1000582c:	b00b883a 	mov	r5,r22
10005830:	d9811e04 	addi	r6,sp,1144
10005834:	000b5f00 	call	1000b5f0 <__sprint_r>
10005838:	103b751e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
1000583c:	d8c12017 	ldw	r3,1152(sp)
10005840:	da000404 	addi	r8,sp,16
10005844:	003c3706 	br	10004924 <__alt_data_end+0xf8004924>
10005848:	04a5c83a 	sub	r18,zero,r18
1000584c:	9004c03a 	cmpne	r2,r18,zero
10005850:	056bc83a 	sub	r21,zero,r21
10005854:	a8abc83a 	sub	r21,r21,r2
10005858:	04c00b44 	movi	r19,45
1000585c:	dcc12785 	stb	r19,1182(sp)
10005860:	da413215 	stw	r9,1224(sp)
10005864:	00800044 	movi	r2,1
10005868:	9546b03a 	or	r3,r18,r21
1000586c:	003bb106 	br	10004734 <__alt_data_end+0xf8004734>
10005870:	da013f15 	stw	r8,1276(sp)
10005874:	da413e15 	stw	r9,1272(sp)
10005878:	000b24c0 	call	1000b24c <__fpclassifyd>
1000587c:	da013f17 	ldw	r8,1276(sp)
10005880:	da413e17 	ldw	r9,1272(sp)
10005884:	1000e526 	beq	r2,zero,10005c1c <___vfprintf_internal_r+0x1a6c>
10005888:	04fff7c4 	movi	r19,-33
1000588c:	00bfffc4 	movi	r2,-1
10005890:	84e6703a 	and	r19,r16,r19
10005894:	48822926 	beq	r9,r2,1000613c <___vfprintf_internal_r+0x1f8c>
10005898:	008011c4 	movi	r2,71
1000589c:	98821626 	beq	r19,r2,100060f8 <___vfprintf_internal_r+0x1f48>
100058a0:	d9013917 	ldw	r4,1252(sp)
100058a4:	e0c04014 	ori	r3,fp,256
100058a8:	d8c12d15 	stw	r3,1204(sp)
100058ac:	20021f16 	blt	r4,zero,1000612c <___vfprintf_internal_r+0x1f7c>
100058b0:	dc413917 	ldw	r17,1252(sp)
100058b4:	d8012b05 	stb	zero,1196(sp)
100058b8:	00801984 	movi	r2,102
100058bc:	80814d26 	beq	r16,r2,10005df4 <___vfprintf_internal_r+0x1c44>
100058c0:	00801184 	movi	r2,70
100058c4:	80814b26 	beq	r16,r2,10005df4 <___vfprintf_internal_r+0x1c44>
100058c8:	00801144 	movi	r2,69
100058cc:	98821d26 	beq	r19,r2,10006144 <___vfprintf_internal_r+0x1f94>
100058d0:	482b883a 	mov	r21,r9
100058d4:	d8812604 	addi	r2,sp,1176
100058d8:	d8800115 	stw	r2,4(sp)
100058dc:	d9413717 	ldw	r5,1244(sp)
100058e0:	d8812504 	addi	r2,sp,1172
100058e4:	d8800215 	stw	r2,8(sp)
100058e8:	d8812104 	addi	r2,sp,1156
100058ec:	dd400015 	stw	r21,0(sp)
100058f0:	d8800315 	stw	r2,12(sp)
100058f4:	b809883a 	mov	r4,r23
100058f8:	880d883a 	mov	r6,r17
100058fc:	01c00084 	movi	r7,2
10005900:	da013f15 	stw	r8,1276(sp)
10005904:	da413e15 	stw	r9,1272(sp)
10005908:	00066280 	call	10006628 <_dtoa_r>
1000590c:	d8813115 	stw	r2,1220(sp)
10005910:	008019c4 	movi	r2,103
10005914:	da013f17 	ldw	r8,1276(sp)
10005918:	da413e17 	ldw	r9,1272(sp)
1000591c:	80800226 	beq	r16,r2,10005928 <___vfprintf_internal_r+0x1778>
10005920:	008011c4 	movi	r2,71
10005924:	8081451e 	bne	r16,r2,10005e3c <___vfprintf_internal_r+0x1c8c>
10005928:	e080004c 	andi	r2,fp,1
1000592c:	10021e26 	beq	r2,zero,100061a8 <___vfprintf_internal_r+0x1ff8>
10005930:	d8c13117 	ldw	r3,1220(sp)
10005934:	1d55883a 	add	r10,r3,r21
10005938:	d9013717 	ldw	r4,1244(sp)
1000593c:	880b883a 	mov	r5,r17
10005940:	000d883a 	mov	r6,zero
10005944:	000f883a 	mov	r7,zero
10005948:	da013f15 	stw	r8,1276(sp)
1000594c:	da413e15 	stw	r9,1272(sp)
10005950:	da813d15 	stw	r10,1268(sp)
10005954:	000de280 	call	1000de28 <__eqdf2>
10005958:	da013f17 	ldw	r8,1276(sp)
1000595c:	da413e17 	ldw	r9,1272(sp)
10005960:	da813d17 	ldw	r10,1268(sp)
10005964:	1001a126 	beq	r2,zero,10005fec <___vfprintf_internal_r+0x1e3c>
10005968:	d8812117 	ldw	r2,1156(sp)
1000596c:	1280062e 	bgeu	r2,r10,10005988 <___vfprintf_internal_r+0x17d8>
10005970:	01000c04 	movi	r4,48
10005974:	10c00044 	addi	r3,r2,1
10005978:	d8c12115 	stw	r3,1156(sp)
1000597c:	11000005 	stb	r4,0(r2)
10005980:	d8812117 	ldw	r2,1156(sp)
10005984:	12bffb36 	bltu	r2,r10,10005974 <__alt_data_end+0xf8005974>
10005988:	d8c13117 	ldw	r3,1220(sp)
1000598c:	10c5c83a 	sub	r2,r2,r3
10005990:	d8813315 	stw	r2,1228(sp)
10005994:	008011c4 	movi	r2,71
10005998:	98818926 	beq	r19,r2,10005fc0 <___vfprintf_internal_r+0x1e10>
1000599c:	00801944 	movi	r2,101
100059a0:	14023c0e 	bge	r2,r16,10006294 <___vfprintf_internal_r+0x20e4>
100059a4:	d8c12617 	ldw	r3,1176(sp)
100059a8:	00801984 	movi	r2,102
100059ac:	d8c13415 	stw	r3,1232(sp)
100059b0:	8081ef26 	beq	r16,r2,10006170 <___vfprintf_internal_r+0x1fc0>
100059b4:	d8c13417 	ldw	r3,1232(sp)
100059b8:	d9013317 	ldw	r4,1228(sp)
100059bc:	1901e316 	blt	r3,r4,1000614c <___vfprintf_internal_r+0x1f9c>
100059c0:	e080004c 	andi	r2,fp,1
100059c4:	1001f426 	beq	r2,zero,10006198 <___vfprintf_internal_r+0x1fe8>
100059c8:	d8c13417 	ldw	r3,1232(sp)
100059cc:	1c400044 	addi	r17,r3,1
100059d0:	8839883a 	mov	fp,r17
100059d4:	8801e416 	blt	r17,zero,10006168 <___vfprintf_internal_r+0x1fb8>
100059d8:	dd412b07 	ldb	r21,1196(sp)
100059dc:	a801701e 	bne	r21,zero,10005fa0 <___vfprintf_internal_r+0x1df0>
100059e0:	df012b15 	stw	fp,1196(sp)
100059e4:	dcc12783 	ldbu	r19,1182(sp)
100059e8:	df012d17 	ldw	fp,1204(sp)
100059ec:	d8013215 	stw	zero,1224(sp)
100059f0:	dc812d15 	stw	r18,1204(sp)
100059f4:	003b6e06 	br	100047b0 <__alt_data_end+0xf80047b0>
100059f8:	e080040c 	andi	r2,fp,16
100059fc:	1000b51e 	bne	r2,zero,10005cd4 <___vfprintf_internal_r+0x1b24>
10005a00:	e080100c 	andi	r2,fp,64
10005a04:	10015b26 	beq	r2,zero,10005f74 <___vfprintf_internal_r+0x1dc4>
10005a08:	d9012d17 	ldw	r4,1204(sp)
10005a0c:	d9412f17 	ldw	r5,1212(sp)
10005a10:	20800017 	ldw	r2,0(r4)
10005a14:	21000104 	addi	r4,r4,4
10005a18:	d9012d15 	stw	r4,1204(sp)
10005a1c:	1140000d 	sth	r5,0(r2)
10005a20:	003a2006 	br	100042a4 <__alt_data_end+0xf80042a4>
10005a24:	e0c0100c 	andi	r3,fp,64
10005a28:	1800a226 	beq	r3,zero,10005cb4 <___vfprintf_internal_r+0x1b04>
10005a2c:	d8c12d17 	ldw	r3,1204(sp)
10005a30:	1480000b 	ldhu	r18,0(r2)
10005a34:	002b883a 	mov	r21,zero
10005a38:	18c00104 	addi	r3,r3,4
10005a3c:	d8c12d15 	stw	r3,1204(sp)
10005a40:	0005883a 	mov	r2,zero
10005a44:	9007883a 	mov	r3,r18
10005a48:	003c6906 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10005a4c:	e0c0100c 	andi	r3,fp,64
10005a50:	18009026 	beq	r3,zero,10005c94 <___vfprintf_internal_r+0x1ae4>
10005a54:	1480000b 	ldhu	r18,0(r2)
10005a58:	d8812d17 	ldw	r2,1204(sp)
10005a5c:	002b883a 	mov	r21,zero
10005a60:	9007883a 	mov	r3,r18
10005a64:	10800104 	addi	r2,r2,4
10005a68:	d8812d15 	stw	r2,1204(sp)
10005a6c:	00800044 	movi	r2,1
10005a70:	003c5f06 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10005a74:	e0c0100c 	andi	r3,fp,64
10005a78:	18008026 	beq	r3,zero,10005c7c <___vfprintf_internal_r+0x1acc>
10005a7c:	d9012d17 	ldw	r4,1204(sp)
10005a80:	1480000b 	ldhu	r18,0(r2)
10005a84:	002b883a 	mov	r21,zero
10005a88:	21000104 	addi	r4,r4,4
10005a8c:	d9012d15 	stw	r4,1204(sp)
10005a90:	003c7906 	br	10004c78 <__alt_data_end+0xf8004c78>
10005a94:	e080100c 	andi	r2,fp,64
10005a98:	10007126 	beq	r2,zero,10005c60 <___vfprintf_internal_r+0x1ab0>
10005a9c:	1c80000f 	ldh	r18,0(r3)
10005aa0:	d8812d17 	ldw	r2,1204(sp)
10005aa4:	902bd7fa 	srai	r21,r18,31
10005aa8:	10800104 	addi	r2,r2,4
10005aac:	d8812d15 	stw	r2,1204(sp)
10005ab0:	a805883a 	mov	r2,r21
10005ab4:	003b1a06 	br	10004720 <__alt_data_end+0xf8004720>
10005ab8:	e4000007 	ldb	r16,0(fp)
10005abc:	e005883a 	mov	r2,fp
10005ac0:	003a2306 	br	10004350 <__alt_data_end+0xf8004350>
10005ac4:	00800084 	movi	r2,2
10005ac8:	003c4906 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10005acc:	01040074 	movhi	r4,4097
10005ad0:	2104b684 	addi	r4,r4,4826
10005ad4:	d9012c15 	stw	r4,1200(sp)
10005ad8:	d9012c17 	ldw	r4,1200(sp)
10005adc:	1c47883a 	add	r3,r3,r17
10005ae0:	10800044 	addi	r2,r2,1
10005ae4:	41000015 	stw	r4,0(r8)
10005ae8:	44400115 	stw	r17,4(r8)
10005aec:	d8c12015 	stw	r3,1152(sp)
10005af0:	d8811f15 	stw	r2,1148(sp)
10005af4:	010001c4 	movi	r4,7
10005af8:	20becc16 	blt	r4,r2,1000562c <__alt_data_end+0xf800562c>
10005afc:	42000204 	addi	r8,r8,8
10005b00:	003ed106 	br	10005648 <__alt_data_end+0xf8005648>
10005b04:	01040074 	movhi	r4,4097
10005b08:	2104b684 	addi	r4,r4,4826
10005b0c:	d9012c15 	stw	r4,1200(sp)
10005b10:	003ba306 	br	100049a0 <__alt_data_end+0xf80049a0>
10005b14:	b809883a 	mov	r4,r23
10005b18:	b00b883a 	mov	r5,r22
10005b1c:	d9811e04 	addi	r6,sp,1144
10005b20:	000b5f00 	call	1000b5f0 <__sprint_r>
10005b24:	103aba1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005b28:	d8c12017 	ldw	r3,1152(sp)
10005b2c:	da000404 	addi	r8,sp,16
10005b30:	003d6c06 	br	100050e4 <__alt_data_end+0xf80050e4>
10005b34:	d8811f17 	ldw	r2,1148(sp)
10005b38:	01440074 	movhi	r5,4097
10005b3c:	01000044 	movi	r4,1
10005b40:	18c00044 	addi	r3,r3,1
10005b44:	10800044 	addi	r2,r2,1
10005b48:	2944b604 	addi	r5,r5,4824
10005b4c:	41000115 	stw	r4,4(r8)
10005b50:	41400015 	stw	r5,0(r8)
10005b54:	d8c12015 	stw	r3,1152(sp)
10005b58:	d8811f15 	stw	r2,1148(sp)
10005b5c:	010001c4 	movi	r4,7
10005b60:	20806716 	blt	r4,r2,10005d00 <___vfprintf_internal_r+0x1b50>
10005b64:	42000204 	addi	r8,r8,8
10005b68:	8000041e 	bne	r16,zero,10005b7c <___vfprintf_internal_r+0x19cc>
10005b6c:	d8813317 	ldw	r2,1228(sp)
10005b70:	1000021e 	bne	r2,zero,10005b7c <___vfprintf_internal_r+0x19cc>
10005b74:	e080004c 	andi	r2,fp,1
10005b78:	103ba026 	beq	r2,zero,100049fc <__alt_data_end+0xf80049fc>
10005b7c:	d9013817 	ldw	r4,1248(sp)
10005b80:	d8811f17 	ldw	r2,1148(sp)
10005b84:	d9413517 	ldw	r5,1236(sp)
10005b88:	1907883a 	add	r3,r3,r4
10005b8c:	10800044 	addi	r2,r2,1
10005b90:	41000115 	stw	r4,4(r8)
10005b94:	41400015 	stw	r5,0(r8)
10005b98:	d8c12015 	stw	r3,1152(sp)
10005b9c:	d8811f15 	stw	r2,1148(sp)
10005ba0:	010001c4 	movi	r4,7
10005ba4:	20815716 	blt	r4,r2,10006104 <___vfprintf_internal_r+0x1f54>
10005ba8:	42000204 	addi	r8,r8,8
10005bac:	0421c83a 	sub	r16,zero,r16
10005bb0:	0400810e 	bge	zero,r16,10005db8 <___vfprintf_internal_r+0x1c08>
10005bb4:	04400404 	movi	r17,16
10005bb8:	8c00bd0e 	bge	r17,r16,10005eb0 <___vfprintf_internal_r+0x1d00>
10005bbc:	01440074 	movhi	r5,4097
10005bc0:	2944b684 	addi	r5,r5,4826
10005bc4:	d9412c15 	stw	r5,1200(sp)
10005bc8:	04c001c4 	movi	r19,7
10005bcc:	00000306 	br	10005bdc <___vfprintf_internal_r+0x1a2c>
10005bd0:	42000204 	addi	r8,r8,8
10005bd4:	843ffc04 	addi	r16,r16,-16
10005bd8:	8c00b80e 	bge	r17,r16,10005ebc <___vfprintf_internal_r+0x1d0c>
10005bdc:	18c00404 	addi	r3,r3,16
10005be0:	10800044 	addi	r2,r2,1
10005be4:	45000015 	stw	r20,0(r8)
10005be8:	44400115 	stw	r17,4(r8)
10005bec:	d8c12015 	stw	r3,1152(sp)
10005bf0:	d8811f15 	stw	r2,1148(sp)
10005bf4:	98bff60e 	bge	r19,r2,10005bd0 <__alt_data_end+0xf8005bd0>
10005bf8:	b809883a 	mov	r4,r23
10005bfc:	b00b883a 	mov	r5,r22
10005c00:	d9811e04 	addi	r6,sp,1144
10005c04:	000b5f00 	call	1000b5f0 <__sprint_r>
10005c08:	103a811e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005c0c:	d8c12017 	ldw	r3,1152(sp)
10005c10:	d8811f17 	ldw	r2,1148(sp)
10005c14:	da000404 	addi	r8,sp,16
10005c18:	003fee06 	br	10005bd4 <__alt_data_end+0xf8005bd4>
10005c1c:	008011c4 	movi	r2,71
10005c20:	1400db16 	blt	r2,r16,10005f90 <___vfprintf_internal_r+0x1de0>
10005c24:	01040074 	movhi	r4,4097
10005c28:	2104a804 	addi	r4,r4,4768
10005c2c:	d9013115 	stw	r4,1220(sp)
10005c30:	00c000c4 	movi	r3,3
10005c34:	00bfdfc4 	movi	r2,-129
10005c38:	d8c12b15 	stw	r3,1196(sp)
10005c3c:	e0b8703a 	and	fp,fp,r2
10005c40:	dcc12783 	ldbu	r19,1182(sp)
10005c44:	dc812d15 	stw	r18,1204(sp)
10005c48:	1823883a 	mov	r17,r3
10005c4c:	d8013215 	stw	zero,1224(sp)
10005c50:	d8013415 	stw	zero,1232(sp)
10005c54:	003ad606 	br	100047b0 <__alt_data_end+0xf80047b0>
10005c58:	4823883a 	mov	r17,r9
10005c5c:	003cc906 	br	10004f84 <__alt_data_end+0xf8004f84>
10005c60:	1c800017 	ldw	r18,0(r3)
10005c64:	d8c12d17 	ldw	r3,1204(sp)
10005c68:	902bd7fa 	srai	r21,r18,31
10005c6c:	18c00104 	addi	r3,r3,4
10005c70:	d8c12d15 	stw	r3,1204(sp)
10005c74:	a805883a 	mov	r2,r21
10005c78:	003aa906 	br	10004720 <__alt_data_end+0xf8004720>
10005c7c:	d9412d17 	ldw	r5,1204(sp)
10005c80:	14800017 	ldw	r18,0(r2)
10005c84:	002b883a 	mov	r21,zero
10005c88:	29400104 	addi	r5,r5,4
10005c8c:	d9412d15 	stw	r5,1204(sp)
10005c90:	003bf906 	br	10004c78 <__alt_data_end+0xf8004c78>
10005c94:	d8c12d17 	ldw	r3,1204(sp)
10005c98:	14800017 	ldw	r18,0(r2)
10005c9c:	002b883a 	mov	r21,zero
10005ca0:	18c00104 	addi	r3,r3,4
10005ca4:	d8c12d15 	stw	r3,1204(sp)
10005ca8:	00800044 	movi	r2,1
10005cac:	9007883a 	mov	r3,r18
10005cb0:	003bcf06 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10005cb4:	d9012d17 	ldw	r4,1204(sp)
10005cb8:	14800017 	ldw	r18,0(r2)
10005cbc:	002b883a 	mov	r21,zero
10005cc0:	21000104 	addi	r4,r4,4
10005cc4:	d9012d15 	stw	r4,1204(sp)
10005cc8:	0005883a 	mov	r2,zero
10005ccc:	9007883a 	mov	r3,r18
10005cd0:	003bc706 	br	10004bf0 <__alt_data_end+0xf8004bf0>
10005cd4:	d9412d17 	ldw	r5,1204(sp)
10005cd8:	d8c12f17 	ldw	r3,1212(sp)
10005cdc:	28800017 	ldw	r2,0(r5)
10005ce0:	29400104 	addi	r5,r5,4
10005ce4:	d9412d15 	stw	r5,1204(sp)
10005ce8:	10c00015 	stw	r3,0(r2)
10005cec:	00396d06 	br	100042a4 <__alt_data_end+0xf80042a4>
10005cf0:	01040074 	movhi	r4,4097
10005cf4:	2104a604 	addi	r4,r4,4760
10005cf8:	d9013115 	stw	r4,1220(sp)
10005cfc:	003ba206 	br	10004b88 <__alt_data_end+0xf8004b88>
10005d00:	b809883a 	mov	r4,r23
10005d04:	b00b883a 	mov	r5,r22
10005d08:	d9811e04 	addi	r6,sp,1144
10005d0c:	000b5f00 	call	1000b5f0 <__sprint_r>
10005d10:	103a3f1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005d14:	dc012617 	ldw	r16,1176(sp)
10005d18:	d8c12017 	ldw	r3,1152(sp)
10005d1c:	da000404 	addi	r8,sp,16
10005d20:	003f9106 	br	10005b68 <__alt_data_end+0xf8005b68>
10005d24:	e0800044 	addi	r2,fp,1
10005d28:	9cc00814 	ori	r19,r19,32
10005d2c:	e4000047 	ldb	r16,1(fp)
10005d30:	00398706 	br	10004350 <__alt_data_end+0xf8004350>
10005d34:	d8812e17 	ldw	r2,1208(sp)
10005d38:	d8c12d15 	stw	r3,1204(sp)
10005d3c:	0085c83a 	sub	r2,zero,r2
10005d40:	d8812e15 	stw	r2,1208(sp)
10005d44:	e005883a 	mov	r2,fp
10005d48:	003a3a06 	br	10004634 <__alt_data_end+0xf8004634>
10005d4c:	b809883a 	mov	r4,r23
10005d50:	b00b883a 	mov	r5,r22
10005d54:	d9811e04 	addi	r6,sp,1144
10005d58:	000b5f00 	call	1000b5f0 <__sprint_r>
10005d5c:	103a2c1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005d60:	d8c12017 	ldw	r3,1152(sp)
10005d64:	da000404 	addi	r8,sp,16
10005d68:	003cf006 	br	1000512c <__alt_data_end+0xf800512c>
10005d6c:	d8c12817 	ldw	r3,1184(sp)
10005d70:	d9013117 	ldw	r4,1220(sp)
10005d74:	1923c83a 	sub	r17,r3,r4
10005d78:	003a8806 	br	1000479c <__alt_data_end+0xf800479c>
10005d7c:	da013f15 	stw	r8,1276(sp)
10005d80:	00041180 	call	10004118 <strlen>
10005d84:	1023883a 	mov	r17,r2
10005d88:	da013f17 	ldw	r8,1276(sp)
10005d8c:	883c7f0e 	bge	r17,zero,10004f8c <__alt_data_end+0xf8004f8c>
10005d90:	0005883a 	mov	r2,zero
10005d94:	003c7d06 	br	10004f8c <__alt_data_end+0xf8004f8c>
10005d98:	b809883a 	mov	r4,r23
10005d9c:	b00b883a 	mov	r5,r22
10005da0:	d9811e04 	addi	r6,sp,1144
10005da4:	000b5f00 	call	1000b5f0 <__sprint_r>
10005da8:	103a191e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005dac:	d8c12017 	ldw	r3,1152(sp)
10005db0:	d8811f17 	ldw	r2,1148(sp)
10005db4:	da000404 	addi	r8,sp,16
10005db8:	d9413317 	ldw	r5,1228(sp)
10005dbc:	d9013117 	ldw	r4,1220(sp)
10005dc0:	10800044 	addi	r2,r2,1
10005dc4:	28c7883a 	add	r3,r5,r3
10005dc8:	41000015 	stw	r4,0(r8)
10005dcc:	41400115 	stw	r5,4(r8)
10005dd0:	d8c12015 	stw	r3,1152(sp)
10005dd4:	d8811f15 	stw	r2,1148(sp)
10005dd8:	010001c4 	movi	r4,7
10005ddc:	20bb060e 	bge	r4,r2,100049f8 <__alt_data_end+0xf80049f8>
10005de0:	003d6206 	br	1000536c <__alt_data_end+0xf800536c>
10005de4:	01040074 	movhi	r4,4097
10005de8:	2104ba84 	addi	r4,r4,4842
10005dec:	d9013615 	stw	r4,1240(sp)
10005df0:	003aa306 	br	10004880 <__alt_data_end+0xf8004880>
10005df4:	d8812604 	addi	r2,sp,1176
10005df8:	d8800115 	stw	r2,4(sp)
10005dfc:	d9413717 	ldw	r5,1244(sp)
10005e00:	d8812504 	addi	r2,sp,1172
10005e04:	d8800215 	stw	r2,8(sp)
10005e08:	d8812104 	addi	r2,sp,1156
10005e0c:	da400015 	stw	r9,0(sp)
10005e10:	d8800315 	stw	r2,12(sp)
10005e14:	b809883a 	mov	r4,r23
10005e18:	880d883a 	mov	r6,r17
10005e1c:	01c000c4 	movi	r7,3
10005e20:	da013f15 	stw	r8,1276(sp)
10005e24:	da413e15 	stw	r9,1272(sp)
10005e28:	00066280 	call	10006628 <_dtoa_r>
10005e2c:	da413e17 	ldw	r9,1272(sp)
10005e30:	da013f17 	ldw	r8,1276(sp)
10005e34:	d8813115 	stw	r2,1220(sp)
10005e38:	482b883a 	mov	r21,r9
10005e3c:	d8c13117 	ldw	r3,1220(sp)
10005e40:	00801184 	movi	r2,70
10005e44:	1d55883a 	add	r10,r3,r21
10005e48:	98bebb1e 	bne	r19,r2,10005938 <__alt_data_end+0xf8005938>
10005e4c:	19000007 	ldb	r4,0(r3)
10005e50:	00800c04 	movi	r2,48
10005e54:	2080dd26 	beq	r4,r2,100061cc <___vfprintf_internal_r+0x201c>
10005e58:	d8c12617 	ldw	r3,1176(sp)
10005e5c:	50d5883a 	add	r10,r10,r3
10005e60:	003eb506 	br	10005938 <__alt_data_end+0xf8005938>
10005e64:	0023883a 	mov	r17,zero
10005e68:	003d9b06 	br	100054d8 <__alt_data_end+0xf80054d8>
10005e6c:	b809883a 	mov	r4,r23
10005e70:	b00b883a 	mov	r5,r22
10005e74:	d9811e04 	addi	r6,sp,1144
10005e78:	000b5f00 	call	1000b5f0 <__sprint_r>
10005e7c:	1039e41e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005e80:	d8c12017 	ldw	r3,1152(sp)
10005e84:	da000404 	addi	r8,sp,16
10005e88:	003d9206 	br	100054d4 <__alt_data_end+0xf80054d4>
10005e8c:	b809883a 	mov	r4,r23
10005e90:	b00b883a 	mov	r5,r22
10005e94:	d9811e04 	addi	r6,sp,1144
10005e98:	000b5f00 	call	1000b5f0 <__sprint_r>
10005e9c:	1039dc1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005ea0:	d8812617 	ldw	r2,1176(sp)
10005ea4:	d8c12017 	ldw	r3,1152(sp)
10005ea8:	da000404 	addi	r8,sp,16
10005eac:	003dfb06 	br	1000569c <__alt_data_end+0xf800569c>
10005eb0:	01040074 	movhi	r4,4097
10005eb4:	2104b684 	addi	r4,r4,4826
10005eb8:	d9012c15 	stw	r4,1200(sp)
10005ebc:	d9012c17 	ldw	r4,1200(sp)
10005ec0:	1c07883a 	add	r3,r3,r16
10005ec4:	10800044 	addi	r2,r2,1
10005ec8:	41000015 	stw	r4,0(r8)
10005ecc:	44000115 	stw	r16,4(r8)
10005ed0:	d8c12015 	stw	r3,1152(sp)
10005ed4:	d8811f15 	stw	r2,1148(sp)
10005ed8:	010001c4 	movi	r4,7
10005edc:	20bfae16 	blt	r4,r2,10005d98 <__alt_data_end+0xf8005d98>
10005ee0:	42000204 	addi	r8,r8,8
10005ee4:	003fb406 	br	10005db8 <__alt_data_end+0xf8005db8>
10005ee8:	0021883a 	mov	r16,zero
10005eec:	003dfd06 	br	100056e4 <__alt_data_end+0xf80056e4>
10005ef0:	01440074 	movhi	r5,4097
10005ef4:	2944ba84 	addi	r5,r5,4842
10005ef8:	d9413615 	stw	r5,1240(sp)
10005efc:	003ae306 	br	10004a8c <__alt_data_end+0xf8004a8c>
10005f00:	b809883a 	mov	r4,r23
10005f04:	b00b883a 	mov	r5,r22
10005f08:	d9811e04 	addi	r6,sp,1144
10005f0c:	000b5f00 	call	1000b5f0 <__sprint_r>
10005f10:	1039bf1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10005f14:	d8812617 	ldw	r2,1176(sp)
10005f18:	d9413317 	ldw	r5,1228(sp)
10005f1c:	d8c12017 	ldw	r3,1152(sp)
10005f20:	da000404 	addi	r8,sp,16
10005f24:	2885c83a 	sub	r2,r5,r2
10005f28:	003ded06 	br	100056e0 <__alt_data_end+0xf80056e0>
10005f2c:	00800184 	movi	r2,6
10005f30:	1240012e 	bgeu	r2,r9,10005f38 <___vfprintf_internal_r+0x1d88>
10005f34:	1013883a 	mov	r9,r2
10005f38:	4823883a 	mov	r17,r9
10005f3c:	4805883a 	mov	r2,r9
10005f40:	4800b216 	blt	r9,zero,1000620c <___vfprintf_internal_r+0x205c>
10005f44:	01440074 	movhi	r5,4097
10005f48:	2944b404 	addi	r5,r5,4816
10005f4c:	d8812b15 	stw	r2,1196(sp)
10005f50:	dc812d15 	stw	r18,1204(sp)
10005f54:	d8013215 	stw	zero,1224(sp)
10005f58:	d8013415 	stw	zero,1232(sp)
10005f5c:	d9413115 	stw	r5,1220(sp)
10005f60:	0005883a 	mov	r2,zero
10005f64:	003a1906 	br	100047cc <__alt_data_end+0xf80047cc>
10005f68:	04c00b44 	movi	r19,45
10005f6c:	dcc12785 	stb	r19,1182(sp)
10005f70:	003b0006 	br	10004b74 <__alt_data_end+0xf8004b74>
10005f74:	d8c12d17 	ldw	r3,1204(sp)
10005f78:	d9012f17 	ldw	r4,1212(sp)
10005f7c:	18800017 	ldw	r2,0(r3)
10005f80:	18c00104 	addi	r3,r3,4
10005f84:	d8c12d15 	stw	r3,1204(sp)
10005f88:	11000015 	stw	r4,0(r2)
10005f8c:	0038c506 	br	100042a4 <__alt_data_end+0xf80042a4>
10005f90:	01440074 	movhi	r5,4097
10005f94:	2944a904 	addi	r5,r5,4772
10005f98:	d9413115 	stw	r5,1220(sp)
10005f9c:	003f2406 	br	10005c30 <__alt_data_end+0xf8005c30>
10005fa0:	00800b44 	movi	r2,45
10005fa4:	d8812785 	stb	r2,1182(sp)
10005fa8:	df012b15 	stw	fp,1196(sp)
10005fac:	d8013215 	stw	zero,1224(sp)
10005fb0:	df012d17 	ldw	fp,1204(sp)
10005fb4:	00800b44 	movi	r2,45
10005fb8:	dc812d15 	stw	r18,1204(sp)
10005fbc:	003a0006 	br	100047c0 <__alt_data_end+0xf80047c0>
10005fc0:	d8c12617 	ldw	r3,1176(sp)
10005fc4:	00bfff44 	movi	r2,-3
10005fc8:	18800a16 	blt	r3,r2,10005ff4 <___vfprintf_internal_r+0x1e44>
10005fcc:	48c00916 	blt	r9,r3,10005ff4 <___vfprintf_internal_r+0x1e44>
10005fd0:	d8c13415 	stw	r3,1232(sp)
10005fd4:	040019c4 	movi	r16,103
10005fd8:	003e7606 	br	100059b4 <__alt_data_end+0xf80059b4>
10005fdc:	01040074 	movhi	r4,4097
10005fe0:	2104b684 	addi	r4,r4,4826
10005fe4:	d9012c15 	stw	r4,1200(sp)
10005fe8:	003c8e06 	br	10005224 <__alt_data_end+0xf8005224>
10005fec:	5005883a 	mov	r2,r10
10005ff0:	003e6506 	br	10005988 <__alt_data_end+0xf8005988>
10005ff4:	843fff84 	addi	r16,r16,-2
10005ff8:	1d7fffc4 	addi	r21,r3,-1
10005ffc:	dd412615 	stw	r21,1176(sp)
10006000:	dc0122c5 	stb	r16,1163(sp)
10006004:	a8009216 	blt	r21,zero,10006250 <___vfprintf_internal_r+0x20a0>
10006008:	00800ac4 	movi	r2,43
1000600c:	d8812305 	stb	r2,1164(sp)
10006010:	00800244 	movi	r2,9
10006014:	1540660e 	bge	r2,r21,100061b0 <___vfprintf_internal_r+0x2000>
10006018:	dcc122c4 	addi	r19,sp,1163
1000601c:	dc012c15 	stw	r16,1200(sp)
10006020:	4023883a 	mov	r17,r8
10006024:	9821883a 	mov	r16,r19
10006028:	a809883a 	mov	r4,r21
1000602c:	01400284 	movi	r5,10
10006030:	0002bac0 	call	10002bac <__modsi3>
10006034:	10800c04 	addi	r2,r2,48
10006038:	843fffc4 	addi	r16,r16,-1
1000603c:	a809883a 	mov	r4,r21
10006040:	01400284 	movi	r5,10
10006044:	80800005 	stb	r2,0(r16)
10006048:	0002b580 	call	10002b58 <__divsi3>
1000604c:	01000244 	movi	r4,9
10006050:	102b883a 	mov	r21,r2
10006054:	20bff416 	blt	r4,r2,10006028 <__alt_data_end+0xf8006028>
10006058:	8811883a 	mov	r8,r17
1000605c:	10800c04 	addi	r2,r2,48
10006060:	8023883a 	mov	r17,r16
10006064:	897fffc4 	addi	r5,r17,-1
10006068:	88bfffc5 	stb	r2,-1(r17)
1000606c:	dc012c17 	ldw	r16,1200(sp)
10006070:	2cc08a2e 	bgeu	r5,r19,1000629c <___vfprintf_internal_r+0x20ec>
10006074:	d9812384 	addi	r6,sp,1166
10006078:	344dc83a 	sub	r6,r6,r17
1000607c:	d9012344 	addi	r4,sp,1165
10006080:	998d883a 	add	r6,r19,r6
10006084:	00000106 	br	1000608c <___vfprintf_internal_r+0x1edc>
10006088:	28800003 	ldbu	r2,0(r5)
1000608c:	20800005 	stb	r2,0(r4)
10006090:	21000044 	addi	r4,r4,1
10006094:	29400044 	addi	r5,r5,1
10006098:	21bffb1e 	bne	r4,r6,10006088 <__alt_data_end+0xf8006088>
1000609c:	d8812304 	addi	r2,sp,1164
100060a0:	1445c83a 	sub	r2,r2,r17
100060a4:	d9412344 	addi	r5,sp,1165
100060a8:	2885883a 	add	r2,r5,r2
100060ac:	14e7c83a 	sub	r19,r2,r19
100060b0:	d8813317 	ldw	r2,1228(sp)
100060b4:	d8c13317 	ldw	r3,1228(sp)
100060b8:	dcc13a15 	stw	r19,1256(sp)
100060bc:	14e3883a 	add	r17,r2,r19
100060c0:	00800044 	movi	r2,1
100060c4:	10c0550e 	bge	r2,r3,1000621c <___vfprintf_internal_r+0x206c>
100060c8:	8c400044 	addi	r17,r17,1
100060cc:	8839883a 	mov	fp,r17
100060d0:	88005016 	blt	r17,zero,10006214 <___vfprintf_internal_r+0x2064>
100060d4:	d8013415 	stw	zero,1232(sp)
100060d8:	003e3f06 	br	100059d8 <__alt_data_end+0xf80059d8>
100060dc:	da412b15 	stw	r9,1196(sp)
100060e0:	dcc12783 	ldbu	r19,1182(sp)
100060e4:	4823883a 	mov	r17,r9
100060e8:	dc812d15 	stw	r18,1204(sp)
100060ec:	d8013215 	stw	zero,1224(sp)
100060f0:	d8013415 	stw	zero,1232(sp)
100060f4:	0039ae06 	br	100047b0 <__alt_data_end+0xf80047b0>
100060f8:	483de91e 	bne	r9,zero,100058a0 <__alt_data_end+0xf80058a0>
100060fc:	8813883a 	mov	r9,r17
10006100:	003de706 	br	100058a0 <__alt_data_end+0xf80058a0>
10006104:	b809883a 	mov	r4,r23
10006108:	b00b883a 	mov	r5,r22
1000610c:	d9811e04 	addi	r6,sp,1144
10006110:	000b5f00 	call	1000b5f0 <__sprint_r>
10006114:	10393e1e 	bne	r2,zero,10004610 <__alt_data_end+0xf8004610>
10006118:	dc012617 	ldw	r16,1176(sp)
1000611c:	d8c12017 	ldw	r3,1152(sp)
10006120:	d8811f17 	ldw	r2,1148(sp)
10006124:	da000404 	addi	r8,sp,16
10006128:	003ea006 	br	10005bac <__alt_data_end+0xf8005bac>
1000612c:	00c00b44 	movi	r3,45
10006130:	2460003c 	xorhi	r17,r4,32768
10006134:	d8c12b05 	stb	r3,1196(sp)
10006138:	003ddf06 	br	100058b8 <__alt_data_end+0xf80058b8>
1000613c:	02400184 	movi	r9,6
10006140:	003dd706 	br	100058a0 <__alt_data_end+0xf80058a0>
10006144:	4d400044 	addi	r21,r9,1
10006148:	003de206 	br	100058d4 <__alt_data_end+0xf80058d4>
1000614c:	d8c13417 	ldw	r3,1232(sp)
10006150:	00c0490e 	bge	zero,r3,10006278 <___vfprintf_internal_r+0x20c8>
10006154:	04400044 	movi	r17,1
10006158:	d9013317 	ldw	r4,1228(sp)
1000615c:	8923883a 	add	r17,r17,r4
10006160:	8839883a 	mov	fp,r17
10006164:	883e1c0e 	bge	r17,zero,100059d8 <__alt_data_end+0xf80059d8>
10006168:	0039883a 	mov	fp,zero
1000616c:	003e1a06 	br	100059d8 <__alt_data_end+0xf80059d8>
10006170:	00c03b0e 	bge	zero,r3,10006260 <___vfprintf_internal_r+0x20b0>
10006174:	4800021e 	bne	r9,zero,10006180 <___vfprintf_internal_r+0x1fd0>
10006178:	e080004c 	andi	r2,fp,1
1000617c:	10000626 	beq	r2,zero,10006198 <___vfprintf_internal_r+0x1fe8>
10006180:	d8c13417 	ldw	r3,1232(sp)
10006184:	4a400044 	addi	r9,r9,1
10006188:	1a63883a 	add	r17,r3,r9
1000618c:	8839883a 	mov	fp,r17
10006190:	883e110e 	bge	r17,zero,100059d8 <__alt_data_end+0xf80059d8>
10006194:	003ff406 	br	10006168 <__alt_data_end+0xf8006168>
10006198:	1839883a 	mov	fp,r3
1000619c:	18004116 	blt	r3,zero,100062a4 <___vfprintf_internal_r+0x20f4>
100061a0:	dc413417 	ldw	r17,1232(sp)
100061a4:	003e0c06 	br	100059d8 <__alt_data_end+0xf80059d8>
100061a8:	d8812117 	ldw	r2,1156(sp)
100061ac:	003df606 	br	10005988 <__alt_data_end+0xf8005988>
100061b0:	00800c04 	movi	r2,48
100061b4:	a8c00c04 	addi	r3,r21,48
100061b8:	d8812345 	stb	r2,1165(sp)
100061bc:	d8c12385 	stb	r3,1166(sp)
100061c0:	d88123c4 	addi	r2,sp,1167
100061c4:	dcc122c4 	addi	r19,sp,1163
100061c8:	003fb806 	br	100060ac <__alt_data_end+0xf80060ac>
100061cc:	d9013717 	ldw	r4,1244(sp)
100061d0:	880b883a 	mov	r5,r17
100061d4:	000d883a 	mov	r6,zero
100061d8:	000f883a 	mov	r7,zero
100061dc:	da013f15 	stw	r8,1276(sp)
100061e0:	da413e15 	stw	r9,1272(sp)
100061e4:	da813d15 	stw	r10,1268(sp)
100061e8:	000de280 	call	1000de28 <__eqdf2>
100061ec:	da013f17 	ldw	r8,1276(sp)
100061f0:	da413e17 	ldw	r9,1272(sp)
100061f4:	da813d17 	ldw	r10,1268(sp)
100061f8:	103f1726 	beq	r2,zero,10005e58 <__alt_data_end+0xf8005e58>
100061fc:	00800044 	movi	r2,1
10006200:	1547c83a 	sub	r3,r2,r21
10006204:	d8c12615 	stw	r3,1176(sp)
10006208:	003f1406 	br	10005e5c <__alt_data_end+0xf8005e5c>
1000620c:	0005883a 	mov	r2,zero
10006210:	003f4c06 	br	10005f44 <__alt_data_end+0xf8005f44>
10006214:	0039883a 	mov	fp,zero
10006218:	003fae06 	br	100060d4 <__alt_data_end+0xf80060d4>
1000621c:	e084703a 	and	r2,fp,r2
10006220:	103faa26 	beq	r2,zero,100060cc <__alt_data_end+0xf80060cc>
10006224:	003fa806 	br	100060c8 <__alt_data_end+0xf80060c8>
10006228:	d9412d17 	ldw	r5,1204(sp)
1000622c:	2a400017 	ldw	r9,0(r5)
10006230:	28c00104 	addi	r3,r5,4
10006234:	d8c12d15 	stw	r3,1204(sp)
10006238:	483ebc0e 	bge	r9,zero,10005d2c <__alt_data_end+0xf8005d2c>
1000623c:	027fffc4 	movi	r9,-1
10006240:	e4000047 	ldb	r16,1(fp)
10006244:	00384206 	br	10004350 <__alt_data_end+0xf8004350>
10006248:	043fffc4 	movi	r16,-1
1000624c:	0038ce06 	br	10004588 <__alt_data_end+0xf8004588>
10006250:	00800b44 	movi	r2,45
10006254:	056bc83a 	sub	r21,zero,r21
10006258:	d8812305 	stb	r2,1164(sp)
1000625c:	003f6c06 	br	10006010 <__alt_data_end+0xf8006010>
10006260:	4800081e 	bne	r9,zero,10006284 <___vfprintf_internal_r+0x20d4>
10006264:	e080004c 	andi	r2,fp,1
10006268:	1000061e 	bne	r2,zero,10006284 <___vfprintf_internal_r+0x20d4>
1000626c:	07000044 	movi	fp,1
10006270:	e023883a 	mov	r17,fp
10006274:	003dd806 	br	100059d8 <__alt_data_end+0xf80059d8>
10006278:	04400084 	movi	r17,2
1000627c:	88e3c83a 	sub	r17,r17,r3
10006280:	003fb506 	br	10006158 <__alt_data_end+0xf8006158>
10006284:	4c400084 	addi	r17,r9,2
10006288:	8839883a 	mov	fp,r17
1000628c:	883dd20e 	bge	r17,zero,100059d8 <__alt_data_end+0xf80059d8>
10006290:	003fb506 	br	10006168 <__alt_data_end+0xf8006168>
10006294:	d8c12617 	ldw	r3,1176(sp)
10006298:	003f5706 	br	10005ff8 <__alt_data_end+0xf8005ff8>
1000629c:	d8812344 	addi	r2,sp,1165
100062a0:	003f8206 	br	100060ac <__alt_data_end+0xf80060ac>
100062a4:	0039883a 	mov	fp,zero
100062a8:	003fbd06 	br	100061a0 <__alt_data_end+0xf80061a0>

100062ac <__vfprintf_internal>:
100062ac:	2007883a 	mov	r3,r4
100062b0:	01040074 	movhi	r4,4097
100062b4:	210bd104 	addi	r4,r4,12100
100062b8:	21000017 	ldw	r4,0(r4)
100062bc:	2805883a 	mov	r2,r5
100062c0:	300f883a 	mov	r7,r6
100062c4:	180b883a 	mov	r5,r3
100062c8:	100d883a 	mov	r6,r2
100062cc:	00041b01 	jmpi	100041b0 <___vfprintf_internal_r>

100062d0 <__swsetup_r>:
100062d0:	00840074 	movhi	r2,4097
100062d4:	defffd04 	addi	sp,sp,-12
100062d8:	108bd104 	addi	r2,r2,12100
100062dc:	dc400115 	stw	r17,4(sp)
100062e0:	2023883a 	mov	r17,r4
100062e4:	11000017 	ldw	r4,0(r2)
100062e8:	dc000015 	stw	r16,0(sp)
100062ec:	dfc00215 	stw	ra,8(sp)
100062f0:	2821883a 	mov	r16,r5
100062f4:	20000226 	beq	r4,zero,10006300 <__swsetup_r+0x30>
100062f8:	20c00e17 	ldw	r3,56(r4)
100062fc:	18002e26 	beq	r3,zero,100063b8 <__swsetup_r+0xe8>
10006300:	8080030b 	ldhu	r2,12(r16)
10006304:	10c0020c 	andi	r3,r2,8
10006308:	100d883a 	mov	r6,r2
1000630c:	18000f26 	beq	r3,zero,1000634c <__swsetup_r+0x7c>
10006310:	80c00417 	ldw	r3,16(r16)
10006314:	18001526 	beq	r3,zero,1000636c <__swsetup_r+0x9c>
10006318:	1100004c 	andi	r4,r2,1
1000631c:	20001c1e 	bne	r4,zero,10006390 <__swsetup_r+0xc0>
10006320:	1080008c 	andi	r2,r2,2
10006324:	1000261e 	bne	r2,zero,100063c0 <__swsetup_r+0xf0>
10006328:	80800517 	ldw	r2,20(r16)
1000632c:	80800215 	stw	r2,8(r16)
10006330:	18001c26 	beq	r3,zero,100063a4 <__swsetup_r+0xd4>
10006334:	0005883a 	mov	r2,zero
10006338:	dfc00217 	ldw	ra,8(sp)
1000633c:	dc400117 	ldw	r17,4(sp)
10006340:	dc000017 	ldw	r16,0(sp)
10006344:	dec00304 	addi	sp,sp,12
10006348:	f800283a 	ret
1000634c:	3080040c 	andi	r2,r6,16
10006350:	10001726 	beq	r2,zero,100063b0 <__swsetup_r+0xe0>
10006354:	3080010c 	andi	r2,r6,4
10006358:	10001b1e 	bne	r2,zero,100063c8 <__swsetup_r+0xf8>
1000635c:	80c00417 	ldw	r3,16(r16)
10006360:	30800214 	ori	r2,r6,8
10006364:	8080030d 	sth	r2,12(r16)
10006368:	183feb1e 	bne	r3,zero,10006318 <__alt_data_end+0xf8006318>
1000636c:	1140a00c 	andi	r5,r2,640
10006370:	01008004 	movi	r4,512
10006374:	293fe826 	beq	r5,r4,10006318 <__alt_data_end+0xf8006318>
10006378:	8809883a 	mov	r4,r17
1000637c:	800b883a 	mov	r5,r16
10006380:	0008e640 	call	10008e64 <__smakebuf_r>
10006384:	8080030b 	ldhu	r2,12(r16)
10006388:	80c00417 	ldw	r3,16(r16)
1000638c:	003fe206 	br	10006318 <__alt_data_end+0xf8006318>
10006390:	80800517 	ldw	r2,20(r16)
10006394:	80000215 	stw	zero,8(r16)
10006398:	0085c83a 	sub	r2,zero,r2
1000639c:	80800615 	stw	r2,24(r16)
100063a0:	183fe41e 	bne	r3,zero,10006334 <__alt_data_end+0xf8006334>
100063a4:	8080030b 	ldhu	r2,12(r16)
100063a8:	1080200c 	andi	r2,r2,128
100063ac:	103fe226 	beq	r2,zero,10006338 <__alt_data_end+0xf8006338>
100063b0:	00bfffc4 	movi	r2,-1
100063b4:	003fe006 	br	10006338 <__alt_data_end+0xf8006338>
100063b8:	000830c0 	call	1000830c <__sinit>
100063bc:	003fd006 	br	10006300 <__alt_data_end+0xf8006300>
100063c0:	0005883a 	mov	r2,zero
100063c4:	003fd906 	br	1000632c <__alt_data_end+0xf800632c>
100063c8:	81400c17 	ldw	r5,48(r16)
100063cc:	28000626 	beq	r5,zero,100063e8 <__swsetup_r+0x118>
100063d0:	80801004 	addi	r2,r16,64
100063d4:	28800326 	beq	r5,r2,100063e4 <__swsetup_r+0x114>
100063d8:	8809883a 	mov	r4,r17
100063dc:	00084800 	call	10008480 <_free_r>
100063e0:	8180030b 	ldhu	r6,12(r16)
100063e4:	80000c15 	stw	zero,48(r16)
100063e8:	80c00417 	ldw	r3,16(r16)
100063ec:	00bff6c4 	movi	r2,-37
100063f0:	118c703a 	and	r6,r2,r6
100063f4:	80000115 	stw	zero,4(r16)
100063f8:	80c00015 	stw	r3,0(r16)
100063fc:	003fd806 	br	10006360 <__alt_data_end+0xf8006360>

10006400 <quorem>:
10006400:	defff204 	addi	sp,sp,-56
10006404:	ddc00b15 	stw	r23,44(sp)
10006408:	20800417 	ldw	r2,16(r4)
1000640c:	2dc00417 	ldw	r23,16(r5)
10006410:	dfc00d15 	stw	ra,52(sp)
10006414:	df000c15 	stw	fp,48(sp)
10006418:	dd800a15 	stw	r22,40(sp)
1000641c:	dd400915 	stw	r21,36(sp)
10006420:	dd000815 	stw	r20,32(sp)
10006424:	dcc00715 	stw	r19,28(sp)
10006428:	dc800615 	stw	r18,24(sp)
1000642c:	dc400515 	stw	r17,20(sp)
10006430:	dc000415 	stw	r16,16(sp)
10006434:	15c07a16 	blt	r2,r23,10006620 <quorem+0x220>
10006438:	bdffffc4 	addi	r23,r23,-1
1000643c:	bde9883a 	add	r20,r23,r23
10006440:	28c00504 	addi	r3,r5,20
10006444:	a529883a 	add	r20,r20,r20
10006448:	1d39883a 	add	fp,r3,r20
1000644c:	24c00504 	addi	r19,r4,20
10006450:	d9400215 	stw	r5,8(sp)
10006454:	9d29883a 	add	r20,r19,r20
10006458:	e1400017 	ldw	r5,0(fp)
1000645c:	d9000015 	stw	r4,0(sp)
10006460:	a1000017 	ldw	r4,0(r20)
10006464:	29400044 	addi	r5,r5,1
10006468:	d8c00115 	stw	r3,4(sp)
1000646c:	dd000315 	stw	r20,12(sp)
10006470:	0002c080 	call	10002c08 <__udivsi3>
10006474:	1025883a 	mov	r18,r2
10006478:	10003026 	beq	r2,zero,1000653c <quorem+0x13c>
1000647c:	dc400117 	ldw	r17,4(sp)
10006480:	9829883a 	mov	r20,r19
10006484:	002d883a 	mov	r22,zero
10006488:	0021883a 	mov	r16,zero
1000648c:	8d400017 	ldw	r21,0(r17)
10006490:	900b883a 	mov	r5,r18
10006494:	8c400104 	addi	r17,r17,4
10006498:	a93fffcc 	andi	r4,r21,65535
1000649c:	0002c180 	call	10002c18 <__mulsi3>
100064a0:	a808d43a 	srli	r4,r21,16
100064a4:	900b883a 	mov	r5,r18
100064a8:	b0ad883a 	add	r22,r22,r2
100064ac:	0002c180 	call	10002c18 <__mulsi3>
100064b0:	a1000017 	ldw	r4,0(r20)
100064b4:	b00cd43a 	srli	r6,r22,16
100064b8:	b0ffffcc 	andi	r3,r22,65535
100064bc:	217fffcc 	andi	r5,r4,65535
100064c0:	2c21883a 	add	r16,r5,r16
100064c4:	80c7c83a 	sub	r3,r16,r3
100064c8:	2008d43a 	srli	r4,r4,16
100064cc:	3085883a 	add	r2,r6,r2
100064d0:	1821d43a 	srai	r16,r3,16
100064d4:	117fffcc 	andi	r5,r2,65535
100064d8:	2149c83a 	sub	r4,r4,r5
100064dc:	2421883a 	add	r16,r4,r16
100064e0:	8008943a 	slli	r4,r16,16
100064e4:	18ffffcc 	andi	r3,r3,65535
100064e8:	102cd43a 	srli	r22,r2,16
100064ec:	20c8b03a 	or	r4,r4,r3
100064f0:	a1000015 	stw	r4,0(r20)
100064f4:	8021d43a 	srai	r16,r16,16
100064f8:	a5000104 	addi	r20,r20,4
100064fc:	e47fe32e 	bgeu	fp,r17,1000648c <__alt_data_end+0xf800648c>
10006500:	d8c00317 	ldw	r3,12(sp)
10006504:	18800017 	ldw	r2,0(r3)
10006508:	10000c1e 	bne	r2,zero,1000653c <quorem+0x13c>
1000650c:	18bfff04 	addi	r2,r3,-4
10006510:	9880082e 	bgeu	r19,r2,10006534 <quorem+0x134>
10006514:	18ffff17 	ldw	r3,-4(r3)
10006518:	18000326 	beq	r3,zero,10006528 <quorem+0x128>
1000651c:	00000506 	br	10006534 <quorem+0x134>
10006520:	10c00017 	ldw	r3,0(r2)
10006524:	1800031e 	bne	r3,zero,10006534 <quorem+0x134>
10006528:	10bfff04 	addi	r2,r2,-4
1000652c:	bdffffc4 	addi	r23,r23,-1
10006530:	98bffb36 	bltu	r19,r2,10006520 <__alt_data_end+0xf8006520>
10006534:	d8c00017 	ldw	r3,0(sp)
10006538:	1dc00415 	stw	r23,16(r3)
1000653c:	d9000017 	ldw	r4,0(sp)
10006540:	d9400217 	ldw	r5,8(sp)
10006544:	000a5e00 	call	1000a5e0 <__mcmp>
10006548:	10002816 	blt	r2,zero,100065ec <quorem+0x1ec>
1000654c:	dc400117 	ldw	r17,4(sp)
10006550:	94800044 	addi	r18,r18,1
10006554:	980d883a 	mov	r6,r19
10006558:	0007883a 	mov	r3,zero
1000655c:	31000017 	ldw	r4,0(r6)
10006560:	89400017 	ldw	r5,0(r17)
10006564:	31800104 	addi	r6,r6,4
10006568:	20bfffcc 	andi	r2,r4,65535
1000656c:	10c7883a 	add	r3,r2,r3
10006570:	28bfffcc 	andi	r2,r5,65535
10006574:	1885c83a 	sub	r2,r3,r2
10006578:	280ad43a 	srli	r5,r5,16
1000657c:	2008d43a 	srli	r4,r4,16
10006580:	1007d43a 	srai	r3,r2,16
10006584:	10bfffcc 	andi	r2,r2,65535
10006588:	2149c83a 	sub	r4,r4,r5
1000658c:	20c9883a 	add	r4,r4,r3
10006590:	200a943a 	slli	r5,r4,16
10006594:	8c400104 	addi	r17,r17,4
10006598:	2007d43a 	srai	r3,r4,16
1000659c:	2884b03a 	or	r2,r5,r2
100065a0:	30bfff15 	stw	r2,-4(r6)
100065a4:	e47fed2e 	bgeu	fp,r17,1000655c <__alt_data_end+0xf800655c>
100065a8:	bdc5883a 	add	r2,r23,r23
100065ac:	1085883a 	add	r2,r2,r2
100065b0:	9887883a 	add	r3,r19,r2
100065b4:	18800017 	ldw	r2,0(r3)
100065b8:	10000c1e 	bne	r2,zero,100065ec <quorem+0x1ec>
100065bc:	18bfff04 	addi	r2,r3,-4
100065c0:	9880082e 	bgeu	r19,r2,100065e4 <quorem+0x1e4>
100065c4:	18ffff17 	ldw	r3,-4(r3)
100065c8:	18000326 	beq	r3,zero,100065d8 <quorem+0x1d8>
100065cc:	00000506 	br	100065e4 <quorem+0x1e4>
100065d0:	10c00017 	ldw	r3,0(r2)
100065d4:	1800031e 	bne	r3,zero,100065e4 <quorem+0x1e4>
100065d8:	10bfff04 	addi	r2,r2,-4
100065dc:	bdffffc4 	addi	r23,r23,-1
100065e0:	98bffb36 	bltu	r19,r2,100065d0 <__alt_data_end+0xf80065d0>
100065e4:	d8c00017 	ldw	r3,0(sp)
100065e8:	1dc00415 	stw	r23,16(r3)
100065ec:	9005883a 	mov	r2,r18
100065f0:	dfc00d17 	ldw	ra,52(sp)
100065f4:	df000c17 	ldw	fp,48(sp)
100065f8:	ddc00b17 	ldw	r23,44(sp)
100065fc:	dd800a17 	ldw	r22,40(sp)
10006600:	dd400917 	ldw	r21,36(sp)
10006604:	dd000817 	ldw	r20,32(sp)
10006608:	dcc00717 	ldw	r19,28(sp)
1000660c:	dc800617 	ldw	r18,24(sp)
10006610:	dc400517 	ldw	r17,20(sp)
10006614:	dc000417 	ldw	r16,16(sp)
10006618:	dec00e04 	addi	sp,sp,56
1000661c:	f800283a 	ret
10006620:	0005883a 	mov	r2,zero
10006624:	003ff206 	br	100065f0 <__alt_data_end+0xf80065f0>

10006628 <_dtoa_r>:
10006628:	20801017 	ldw	r2,64(r4)
1000662c:	deffde04 	addi	sp,sp,-136
10006630:	dd401d15 	stw	r21,116(sp)
10006634:	dcc01b15 	stw	r19,108(sp)
10006638:	dc801a15 	stw	r18,104(sp)
1000663c:	dc401915 	stw	r17,100(sp)
10006640:	dc001815 	stw	r16,96(sp)
10006644:	dfc02115 	stw	ra,132(sp)
10006648:	df002015 	stw	fp,128(sp)
1000664c:	ddc01f15 	stw	r23,124(sp)
10006650:	dd801e15 	stw	r22,120(sp)
10006654:	dd001c15 	stw	r20,112(sp)
10006658:	d9c00315 	stw	r7,12(sp)
1000665c:	2021883a 	mov	r16,r4
10006660:	302b883a 	mov	r21,r6
10006664:	2825883a 	mov	r18,r5
10006668:	dc402417 	ldw	r17,144(sp)
1000666c:	3027883a 	mov	r19,r6
10006670:	10000826 	beq	r2,zero,10006694 <_dtoa_r+0x6c>
10006674:	21801117 	ldw	r6,68(r4)
10006678:	00c00044 	movi	r3,1
1000667c:	100b883a 	mov	r5,r2
10006680:	1986983a 	sll	r3,r3,r6
10006684:	11800115 	stw	r6,4(r2)
10006688:	10c00215 	stw	r3,8(r2)
1000668c:	0009d0c0 	call	10009d0c <_Bfree>
10006690:	80001015 	stw	zero,64(r16)
10006694:	a8002d16 	blt	r21,zero,1000674c <_dtoa_r+0x124>
10006698:	88000015 	stw	zero,0(r17)
1000669c:	a8dffc2c 	andhi	r3,r21,32752
100066a0:	009ffc34 	movhi	r2,32752
100066a4:	18801b26 	beq	r3,r2,10006714 <_dtoa_r+0xec>
100066a8:	9009883a 	mov	r4,r18
100066ac:	980b883a 	mov	r5,r19
100066b0:	000d883a 	mov	r6,zero
100066b4:	000f883a 	mov	r7,zero
100066b8:	000de280 	call	1000de28 <__eqdf2>
100066bc:	10002a1e 	bne	r2,zero,10006768 <_dtoa_r+0x140>
100066c0:	d8c02317 	ldw	r3,140(sp)
100066c4:	d9002517 	ldw	r4,148(sp)
100066c8:	00800044 	movi	r2,1
100066cc:	18800015 	stw	r2,0(r3)
100066d0:	2001a226 	beq	r4,zero,10006d5c <_dtoa_r+0x734>
100066d4:	00840074 	movhi	r2,4097
100066d8:	1084b644 	addi	r2,r2,4825
100066dc:	20800015 	stw	r2,0(r4)
100066e0:	10bfffc4 	addi	r2,r2,-1
100066e4:	dfc02117 	ldw	ra,132(sp)
100066e8:	df002017 	ldw	fp,128(sp)
100066ec:	ddc01f17 	ldw	r23,124(sp)
100066f0:	dd801e17 	ldw	r22,120(sp)
100066f4:	dd401d17 	ldw	r21,116(sp)
100066f8:	dd001c17 	ldw	r20,112(sp)
100066fc:	dcc01b17 	ldw	r19,108(sp)
10006700:	dc801a17 	ldw	r18,104(sp)
10006704:	dc401917 	ldw	r17,100(sp)
10006708:	dc001817 	ldw	r16,96(sp)
1000670c:	dec02204 	addi	sp,sp,136
10006710:	f800283a 	ret
10006714:	d8c02317 	ldw	r3,140(sp)
10006718:	0089c3c4 	movi	r2,9999
1000671c:	18800015 	stw	r2,0(r3)
10006720:	90017c26 	beq	r18,zero,10006d14 <_dtoa_r+0x6ec>
10006724:	00840074 	movhi	r2,4097
10006728:	1084c204 	addi	r2,r2,4872
1000672c:	d9002517 	ldw	r4,148(sp)
10006730:	203fec26 	beq	r4,zero,100066e4 <__alt_data_end+0xf80066e4>
10006734:	10c000c7 	ldb	r3,3(r2)
10006738:	18017d1e 	bne	r3,zero,10006d30 <_dtoa_r+0x708>
1000673c:	10c000c4 	addi	r3,r2,3
10006740:	d9802517 	ldw	r6,148(sp)
10006744:	30c00015 	stw	r3,0(r6)
10006748:	003fe606 	br	100066e4 <__alt_data_end+0xf80066e4>
1000674c:	04e00034 	movhi	r19,32768
10006750:	9cffffc4 	addi	r19,r19,-1
10006754:	00800044 	movi	r2,1
10006758:	ace6703a 	and	r19,r21,r19
1000675c:	88800015 	stw	r2,0(r17)
10006760:	982b883a 	mov	r21,r19
10006764:	003fcd06 	br	1000669c <__alt_data_end+0xf800669c>
10006768:	d8800204 	addi	r2,sp,8
1000676c:	a822d53a 	srli	r17,r21,20
10006770:	d8800015 	stw	r2,0(sp)
10006774:	8009883a 	mov	r4,r16
10006778:	900b883a 	mov	r5,r18
1000677c:	980d883a 	mov	r6,r19
10006780:	d9c00104 	addi	r7,sp,4
10006784:	000a9540 	call	1000a954 <__d2b>
10006788:	1039883a 	mov	fp,r2
1000678c:	88016a1e 	bne	r17,zero,10006d38 <_dtoa_r+0x710>
10006790:	dd000217 	ldw	r20,8(sp)
10006794:	dc400117 	ldw	r17,4(sp)
10006798:	00befbc4 	movi	r2,-1041
1000679c:	a463883a 	add	r17,r20,r17
100067a0:	8882ea16 	blt	r17,r2,1000734c <_dtoa_r+0xd24>
100067a4:	00bf0384 	movi	r2,-1010
100067a8:	1445c83a 	sub	r2,r2,r17
100067ac:	89010484 	addi	r4,r17,1042
100067b0:	a8aa983a 	sll	r21,r21,r2
100067b4:	9108d83a 	srl	r4,r18,r4
100067b8:	a908b03a 	or	r4,r21,r4
100067bc:	000e8d80 	call	1000e8d8 <__floatunsidf>
100067c0:	017f8434 	movhi	r5,65040
100067c4:	01800044 	movi	r6,1
100067c8:	1009883a 	mov	r4,r2
100067cc:	194b883a 	add	r5,r3,r5
100067d0:	8c7fffc4 	addi	r17,r17,-1
100067d4:	d9800f15 	stw	r6,60(sp)
100067d8:	000d883a 	mov	r6,zero
100067dc:	01cffe34 	movhi	r7,16376
100067e0:	00034dc0 	call	100034dc <__subdf3>
100067e4:	0198dbf4 	movhi	r6,25455
100067e8:	01cff4f4 	movhi	r7,16339
100067ec:	1009883a 	mov	r4,r2
100067f0:	180b883a 	mov	r5,r3
100067f4:	3190d844 	addi	r6,r6,17249
100067f8:	39e1e9c4 	addi	r7,r7,-30809
100067fc:	000e06c0 	call	1000e06c <__muldf3>
10006800:	01a2d874 	movhi	r6,35681
10006804:	01cff1f4 	movhi	r7,16327
10006808:	180b883a 	mov	r5,r3
1000680c:	31b22cc4 	addi	r6,r6,-14157
10006810:	39e28a04 	addi	r7,r7,-30168
10006814:	1009883a 	mov	r4,r2
10006818:	0002c400 	call	10002c40 <__adddf3>
1000681c:	8809883a 	mov	r4,r17
10006820:	102d883a 	mov	r22,r2
10006824:	182b883a 	mov	r21,r3
10006828:	0003e340 	call	10003e34 <__floatsidf>
1000682c:	019427f4 	movhi	r6,20639
10006830:	01cff4f4 	movhi	r7,16339
10006834:	1009883a 	mov	r4,r2
10006838:	180b883a 	mov	r5,r3
1000683c:	319e7ec4 	addi	r6,r6,31227
10006840:	39d104c4 	addi	r7,r7,17427
10006844:	000e06c0 	call	1000e06c <__muldf3>
10006848:	b009883a 	mov	r4,r22
1000684c:	a80b883a 	mov	r5,r21
10006850:	100d883a 	mov	r6,r2
10006854:	180f883a 	mov	r7,r3
10006858:	0002c400 	call	10002c40 <__adddf3>
1000685c:	1009883a 	mov	r4,r2
10006860:	180b883a 	mov	r5,r3
10006864:	102d883a 	mov	r22,r2
10006868:	182b883a 	mov	r21,r3
1000686c:	0003dac0 	call	10003dac <__fixdfsi>
10006870:	b009883a 	mov	r4,r22
10006874:	a80b883a 	mov	r5,r21
10006878:	000d883a 	mov	r6,zero
1000687c:	000f883a 	mov	r7,zero
10006880:	d8800515 	stw	r2,20(sp)
10006884:	000df8c0 	call	1000df8c <__ledf2>
10006888:	10023116 	blt	r2,zero,10007150 <_dtoa_r+0xb28>
1000688c:	d8c00517 	ldw	r3,20(sp)
10006890:	00800584 	movi	r2,22
10006894:	10c21f36 	bltu	r2,r3,10007114 <_dtoa_r+0xaec>
10006898:	180490fa 	slli	r2,r3,3
1000689c:	00c40074 	movhi	r3,4097
100068a0:	18c4de04 	addi	r3,r3,4984
100068a4:	1885883a 	add	r2,r3,r2
100068a8:	11000017 	ldw	r4,0(r2)
100068ac:	11400117 	ldw	r5,4(r2)
100068b0:	900d883a 	mov	r6,r18
100068b4:	980f883a 	mov	r7,r19
100068b8:	000deac0 	call	1000deac <__gedf2>
100068bc:	0082a70e 	bge	zero,r2,1000735c <_dtoa_r+0xd34>
100068c0:	d9000517 	ldw	r4,20(sp)
100068c4:	d8000c15 	stw	zero,48(sp)
100068c8:	213fffc4 	addi	r4,r4,-1
100068cc:	d9000515 	stw	r4,20(sp)
100068d0:	a463c83a 	sub	r17,r20,r17
100068d4:	8dbfffc4 	addi	r22,r17,-1
100068d8:	b0021916 	blt	r22,zero,10007140 <_dtoa_r+0xb18>
100068dc:	d8000815 	stw	zero,32(sp)
100068e0:	d8800517 	ldw	r2,20(sp)
100068e4:	10020e16 	blt	r2,zero,10007120 <_dtoa_r+0xaf8>
100068e8:	b0ad883a 	add	r22,r22,r2
100068ec:	d8800a15 	stw	r2,40(sp)
100068f0:	d8000915 	stw	zero,36(sp)
100068f4:	d8c00317 	ldw	r3,12(sp)
100068f8:	00800244 	movi	r2,9
100068fc:	10c11a36 	bltu	r2,r3,10006d68 <_dtoa_r+0x740>
10006900:	00800144 	movi	r2,5
10006904:	10c4fc0e 	bge	r2,r3,10007cf8 <_dtoa_r+0x16d0>
10006908:	18ffff04 	addi	r3,r3,-4
1000690c:	d8c00315 	stw	r3,12(sp)
10006910:	0029883a 	mov	r20,zero
10006914:	d9800317 	ldw	r6,12(sp)
10006918:	008000c4 	movi	r2,3
1000691c:	3083bd26 	beq	r6,r2,10007814 <_dtoa_r+0x11ec>
10006920:	1183670e 	bge	r2,r6,100076c0 <_dtoa_r+0x1098>
10006924:	d8c00317 	ldw	r3,12(sp)
10006928:	00800104 	movi	r2,4
1000692c:	1882e726 	beq	r3,r2,100074cc <_dtoa_r+0xea4>
10006930:	00800144 	movi	r2,5
10006934:	1884f21e 	bne	r3,r2,10007d00 <_dtoa_r+0x16d8>
10006938:	00800044 	movi	r2,1
1000693c:	d8800b15 	stw	r2,44(sp)
10006940:	d8c02217 	ldw	r3,136(sp)
10006944:	d9000517 	ldw	r4,20(sp)
10006948:	1907883a 	add	r3,r3,r4
1000694c:	19800044 	addi	r6,r3,1
10006950:	d8c00d15 	stw	r3,52(sp)
10006954:	d9800615 	stw	r6,24(sp)
10006958:	0183c30e 	bge	zero,r6,10007868 <_dtoa_r+0x1240>
1000695c:	d9800617 	ldw	r6,24(sp)
10006960:	3023883a 	mov	r17,r6
10006964:	80001115 	stw	zero,68(r16)
10006968:	008005c4 	movi	r2,23
1000696c:	1184f62e 	bgeu	r2,r6,10007d48 <_dtoa_r+0x1720>
10006970:	00c00044 	movi	r3,1
10006974:	00800104 	movi	r2,4
10006978:	1085883a 	add	r2,r2,r2
1000697c:	11000504 	addi	r4,r2,20
10006980:	180b883a 	mov	r5,r3
10006984:	18c00044 	addi	r3,r3,1
10006988:	313ffb2e 	bgeu	r6,r4,10006978 <__alt_data_end+0xf8006978>
1000698c:	81401115 	stw	r5,68(r16)
10006990:	8009883a 	mov	r4,r16
10006994:	0009c640 	call	10009c64 <_Balloc>
10006998:	d8800715 	stw	r2,28(sp)
1000699c:	80801015 	stw	r2,64(r16)
100069a0:	00800384 	movi	r2,14
100069a4:	1440fd36 	bltu	r2,r17,10006d9c <_dtoa_r+0x774>
100069a8:	a000fc26 	beq	r20,zero,10006d9c <_dtoa_r+0x774>
100069ac:	d8800517 	ldw	r2,20(sp)
100069b0:	0083b90e 	bge	zero,r2,10007898 <_dtoa_r+0x1270>
100069b4:	d8c00517 	ldw	r3,20(sp)
100069b8:	108003cc 	andi	r2,r2,15
100069bc:	100490fa 	slli	r2,r2,3
100069c0:	182fd13a 	srai	r23,r3,4
100069c4:	00c40074 	movhi	r3,4097
100069c8:	18c4de04 	addi	r3,r3,4984
100069cc:	1885883a 	add	r2,r3,r2
100069d0:	b8c0040c 	andi	r3,r23,16
100069d4:	12c00017 	ldw	r11,0(r2)
100069d8:	12800117 	ldw	r10,4(r2)
100069dc:	18039726 	beq	r3,zero,1000783c <_dtoa_r+0x1214>
100069e0:	00840074 	movhi	r2,4097
100069e4:	1084d404 	addi	r2,r2,4944
100069e8:	11800817 	ldw	r6,32(r2)
100069ec:	11c00917 	ldw	r7,36(r2)
100069f0:	9009883a 	mov	r4,r18
100069f4:	980b883a 	mov	r5,r19
100069f8:	da801615 	stw	r10,88(sp)
100069fc:	dac01515 	stw	r11,84(sp)
10006a00:	000d4a80 	call	1000d4a8 <__divdf3>
10006a04:	da801617 	ldw	r10,88(sp)
10006a08:	dac01517 	ldw	r11,84(sp)
10006a0c:	bdc003cc 	andi	r23,r23,15
10006a10:	044000c4 	movi	r17,3
10006a14:	d8800e15 	stw	r2,56(sp)
10006a18:	182b883a 	mov	r21,r3
10006a1c:	b8001126 	beq	r23,zero,10006a64 <_dtoa_r+0x43c>
10006a20:	05040074 	movhi	r20,4097
10006a24:	a504d404 	addi	r20,r20,4944
10006a28:	5805883a 	mov	r2,r11
10006a2c:	5007883a 	mov	r3,r10
10006a30:	b980004c 	andi	r6,r23,1
10006a34:	1009883a 	mov	r4,r2
10006a38:	b82fd07a 	srai	r23,r23,1
10006a3c:	180b883a 	mov	r5,r3
10006a40:	30000426 	beq	r6,zero,10006a54 <_dtoa_r+0x42c>
10006a44:	a1800017 	ldw	r6,0(r20)
10006a48:	a1c00117 	ldw	r7,4(r20)
10006a4c:	8c400044 	addi	r17,r17,1
10006a50:	000e06c0 	call	1000e06c <__muldf3>
10006a54:	a5000204 	addi	r20,r20,8
10006a58:	b83ff51e 	bne	r23,zero,10006a30 <__alt_data_end+0xf8006a30>
10006a5c:	1017883a 	mov	r11,r2
10006a60:	1815883a 	mov	r10,r3
10006a64:	d9000e17 	ldw	r4,56(sp)
10006a68:	a80b883a 	mov	r5,r21
10006a6c:	580d883a 	mov	r6,r11
10006a70:	500f883a 	mov	r7,r10
10006a74:	000d4a80 	call	1000d4a8 <__divdf3>
10006a78:	1029883a 	mov	r20,r2
10006a7c:	182b883a 	mov	r21,r3
10006a80:	d9800c17 	ldw	r6,48(sp)
10006a84:	30000626 	beq	r6,zero,10006aa0 <_dtoa_r+0x478>
10006a88:	a009883a 	mov	r4,r20
10006a8c:	a80b883a 	mov	r5,r21
10006a90:	000d883a 	mov	r6,zero
10006a94:	01cffc34 	movhi	r7,16368
10006a98:	000df8c0 	call	1000df8c <__ledf2>
10006a9c:	10043216 	blt	r2,zero,10007b68 <_dtoa_r+0x1540>
10006aa0:	8809883a 	mov	r4,r17
10006aa4:	0003e340 	call	10003e34 <__floatsidf>
10006aa8:	1009883a 	mov	r4,r2
10006aac:	180b883a 	mov	r5,r3
10006ab0:	a00d883a 	mov	r6,r20
10006ab4:	a80f883a 	mov	r7,r21
10006ab8:	000e06c0 	call	1000e06c <__muldf3>
10006abc:	000d883a 	mov	r6,zero
10006ac0:	1009883a 	mov	r4,r2
10006ac4:	180b883a 	mov	r5,r3
10006ac8:	01d00734 	movhi	r7,16412
10006acc:	0002c400 	call	10002c40 <__adddf3>
10006ad0:	1023883a 	mov	r17,r2
10006ad4:	d9800617 	ldw	r6,24(sp)
10006ad8:	00bf3034 	movhi	r2,64704
10006adc:	1885883a 	add	r2,r3,r2
10006ae0:	d8800e15 	stw	r2,56(sp)
10006ae4:	30032e26 	beq	r6,zero,100077a0 <_dtoa_r+0x1178>
10006ae8:	d8c00517 	ldw	r3,20(sp)
10006aec:	da800617 	ldw	r10,24(sp)
10006af0:	d8c01215 	stw	r3,72(sp)
10006af4:	d9000b17 	ldw	r4,44(sp)
10006af8:	2003b026 	beq	r4,zero,100079bc <_dtoa_r+0x1394>
10006afc:	50bfffc4 	addi	r2,r10,-1
10006b00:	100490fa 	slli	r2,r2,3
10006b04:	00c40074 	movhi	r3,4097
10006b08:	18c4de04 	addi	r3,r3,4984
10006b0c:	1885883a 	add	r2,r3,r2
10006b10:	11800017 	ldw	r6,0(r2)
10006b14:	11c00117 	ldw	r7,4(r2)
10006b18:	d8800717 	ldw	r2,28(sp)
10006b1c:	0009883a 	mov	r4,zero
10006b20:	014ff834 	movhi	r5,16352
10006b24:	da801615 	stw	r10,88(sp)
10006b28:	15c00044 	addi	r23,r2,1
10006b2c:	000d4a80 	call	1000d4a8 <__divdf3>
10006b30:	d9c00e17 	ldw	r7,56(sp)
10006b34:	880d883a 	mov	r6,r17
10006b38:	1009883a 	mov	r4,r2
10006b3c:	180b883a 	mov	r5,r3
10006b40:	00034dc0 	call	100034dc <__subdf3>
10006b44:	a80b883a 	mov	r5,r21
10006b48:	a009883a 	mov	r4,r20
10006b4c:	d8c01015 	stw	r3,64(sp)
10006b50:	d8800e15 	stw	r2,56(sp)
10006b54:	0003dac0 	call	10003dac <__fixdfsi>
10006b58:	1009883a 	mov	r4,r2
10006b5c:	d8801715 	stw	r2,92(sp)
10006b60:	0003e340 	call	10003e34 <__floatsidf>
10006b64:	a009883a 	mov	r4,r20
10006b68:	a80b883a 	mov	r5,r21
10006b6c:	100d883a 	mov	r6,r2
10006b70:	180f883a 	mov	r7,r3
10006b74:	00034dc0 	call	100034dc <__subdf3>
10006b78:	da001717 	ldw	r8,92(sp)
10006b7c:	1829883a 	mov	r20,r3
10006b80:	d8c00717 	ldw	r3,28(sp)
10006b84:	d9000e17 	ldw	r4,56(sp)
10006b88:	d9401017 	ldw	r5,64(sp)
10006b8c:	42000c04 	addi	r8,r8,48
10006b90:	1023883a 	mov	r17,r2
10006b94:	1a000005 	stb	r8,0(r3)
10006b98:	880d883a 	mov	r6,r17
10006b9c:	a00f883a 	mov	r7,r20
10006ba0:	402b883a 	mov	r21,r8
10006ba4:	000deac0 	call	1000deac <__gedf2>
10006ba8:	00844516 	blt	zero,r2,10007cc0 <_dtoa_r+0x1698>
10006bac:	0009883a 	mov	r4,zero
10006bb0:	014ffc34 	movhi	r5,16368
10006bb4:	880d883a 	mov	r6,r17
10006bb8:	a00f883a 	mov	r7,r20
10006bbc:	00034dc0 	call	100034dc <__subdf3>
10006bc0:	d9000e17 	ldw	r4,56(sp)
10006bc4:	d9401017 	ldw	r5,64(sp)
10006bc8:	100d883a 	mov	r6,r2
10006bcc:	180f883a 	mov	r7,r3
10006bd0:	000deac0 	call	1000deac <__gedf2>
10006bd4:	da801617 	ldw	r10,88(sp)
10006bd8:	00843616 	blt	zero,r2,10007cb4 <_dtoa_r+0x168c>
10006bdc:	00800044 	movi	r2,1
10006be0:	12806e0e 	bge	r2,r10,10006d9c <_dtoa_r+0x774>
10006be4:	d9000717 	ldw	r4,28(sp)
10006be8:	dd801315 	stw	r22,76(sp)
10006bec:	dc001115 	stw	r16,68(sp)
10006bf0:	2295883a 	add	r10,r4,r10
10006bf4:	dcc01415 	stw	r19,80(sp)
10006bf8:	502d883a 	mov	r22,r10
10006bfc:	dcc01017 	ldw	r19,64(sp)
10006c00:	b821883a 	mov	r16,r23
10006c04:	dc801015 	stw	r18,64(sp)
10006c08:	dc800e17 	ldw	r18,56(sp)
10006c0c:	00000906 	br	10006c34 <_dtoa_r+0x60c>
10006c10:	00034dc0 	call	100034dc <__subdf3>
10006c14:	1009883a 	mov	r4,r2
10006c18:	180b883a 	mov	r5,r3
10006c1c:	900d883a 	mov	r6,r18
10006c20:	980f883a 	mov	r7,r19
10006c24:	000df8c0 	call	1000df8c <__ledf2>
10006c28:	10040e16 	blt	r2,zero,10007c64 <_dtoa_r+0x163c>
10006c2c:	b821883a 	mov	r16,r23
10006c30:	bd841026 	beq	r23,r22,10007c74 <_dtoa_r+0x164c>
10006c34:	9009883a 	mov	r4,r18
10006c38:	980b883a 	mov	r5,r19
10006c3c:	000d883a 	mov	r6,zero
10006c40:	01d00934 	movhi	r7,16420
10006c44:	000e06c0 	call	1000e06c <__muldf3>
10006c48:	000d883a 	mov	r6,zero
10006c4c:	01d00934 	movhi	r7,16420
10006c50:	8809883a 	mov	r4,r17
10006c54:	a00b883a 	mov	r5,r20
10006c58:	1025883a 	mov	r18,r2
10006c5c:	1827883a 	mov	r19,r3
10006c60:	000e06c0 	call	1000e06c <__muldf3>
10006c64:	180b883a 	mov	r5,r3
10006c68:	1009883a 	mov	r4,r2
10006c6c:	1823883a 	mov	r17,r3
10006c70:	1029883a 	mov	r20,r2
10006c74:	0003dac0 	call	10003dac <__fixdfsi>
10006c78:	1009883a 	mov	r4,r2
10006c7c:	102b883a 	mov	r21,r2
10006c80:	0003e340 	call	10003e34 <__floatsidf>
10006c84:	a009883a 	mov	r4,r20
10006c88:	880b883a 	mov	r5,r17
10006c8c:	100d883a 	mov	r6,r2
10006c90:	180f883a 	mov	r7,r3
10006c94:	00034dc0 	call	100034dc <__subdf3>
10006c98:	ad400c04 	addi	r21,r21,48
10006c9c:	1009883a 	mov	r4,r2
10006ca0:	180b883a 	mov	r5,r3
10006ca4:	900d883a 	mov	r6,r18
10006ca8:	980f883a 	mov	r7,r19
10006cac:	85400005 	stb	r21,0(r16)
10006cb0:	1023883a 	mov	r17,r2
10006cb4:	1829883a 	mov	r20,r3
10006cb8:	000df8c0 	call	1000df8c <__ledf2>
10006cbc:	bdc00044 	addi	r23,r23,1
10006cc0:	0009883a 	mov	r4,zero
10006cc4:	014ffc34 	movhi	r5,16368
10006cc8:	880d883a 	mov	r6,r17
10006ccc:	a00f883a 	mov	r7,r20
10006cd0:	103fcf0e 	bge	r2,zero,10006c10 <__alt_data_end+0xf8006c10>
10006cd4:	d9801217 	ldw	r6,72(sp)
10006cd8:	dc001117 	ldw	r16,68(sp)
10006cdc:	d9800515 	stw	r6,20(sp)
10006ce0:	8009883a 	mov	r4,r16
10006ce4:	e00b883a 	mov	r5,fp
10006ce8:	0009d0c0 	call	10009d0c <_Bfree>
10006cec:	d8c00517 	ldw	r3,20(sp)
10006cf0:	d9002317 	ldw	r4,140(sp)
10006cf4:	d9802517 	ldw	r6,148(sp)
10006cf8:	b8000005 	stb	zero,0(r23)
10006cfc:	18800044 	addi	r2,r3,1
10006d00:	20800015 	stw	r2,0(r4)
10006d04:	30027226 	beq	r6,zero,100076d0 <_dtoa_r+0x10a8>
10006d08:	35c00015 	stw	r23,0(r6)
10006d0c:	d8800717 	ldw	r2,28(sp)
10006d10:	003e7406 	br	100066e4 <__alt_data_end+0xf80066e4>
10006d14:	00800434 	movhi	r2,16
10006d18:	10bfffc4 	addi	r2,r2,-1
10006d1c:	a8aa703a 	and	r21,r21,r2
10006d20:	a83e801e 	bne	r21,zero,10006724 <__alt_data_end+0xf8006724>
10006d24:	00840074 	movhi	r2,4097
10006d28:	1084bf04 	addi	r2,r2,4860
10006d2c:	003e7f06 	br	1000672c <__alt_data_end+0xf800672c>
10006d30:	10c00204 	addi	r3,r2,8
10006d34:	003e8206 	br	10006740 <__alt_data_end+0xf8006740>
10006d38:	01400434 	movhi	r5,16
10006d3c:	297fffc4 	addi	r5,r5,-1
10006d40:	994a703a 	and	r5,r19,r5
10006d44:	9009883a 	mov	r4,r18
10006d48:	8c7f0044 	addi	r17,r17,-1023
10006d4c:	294ffc34 	orhi	r5,r5,16368
10006d50:	dd000217 	ldw	r20,8(sp)
10006d54:	d8000f15 	stw	zero,60(sp)
10006d58:	003e9f06 	br	100067d8 <__alt_data_end+0xf80067d8>
10006d5c:	00840074 	movhi	r2,4097
10006d60:	1084b604 	addi	r2,r2,4824
10006d64:	003e5f06 	br	100066e4 <__alt_data_end+0xf80066e4>
10006d68:	80001115 	stw	zero,68(r16)
10006d6c:	8009883a 	mov	r4,r16
10006d70:	000b883a 	mov	r5,zero
10006d74:	0009c640 	call	10009c64 <_Balloc>
10006d78:	01bfffc4 	movi	r6,-1
10006d7c:	d8800715 	stw	r2,28(sp)
10006d80:	80801015 	stw	r2,64(r16)
10006d84:	00800044 	movi	r2,1
10006d88:	d9800615 	stw	r6,24(sp)
10006d8c:	d8800b15 	stw	r2,44(sp)
10006d90:	d8002215 	stw	zero,136(sp)
10006d94:	d9800d15 	stw	r6,52(sp)
10006d98:	d8000315 	stw	zero,12(sp)
10006d9c:	d8800117 	ldw	r2,4(sp)
10006da0:	10008e16 	blt	r2,zero,10006fdc <_dtoa_r+0x9b4>
10006da4:	d9000517 	ldw	r4,20(sp)
10006da8:	00c00384 	movi	r3,14
10006dac:	19008b16 	blt	r3,r4,10006fdc <_dtoa_r+0x9b4>
10006db0:	200490fa 	slli	r2,r4,3
10006db4:	00c40074 	movhi	r3,4097
10006db8:	d9802217 	ldw	r6,136(sp)
10006dbc:	18c4de04 	addi	r3,r3,4984
10006dc0:	1885883a 	add	r2,r3,r2
10006dc4:	14400017 	ldw	r17,0(r2)
10006dc8:	15000117 	ldw	r20,4(r2)
10006dcc:	3001c716 	blt	r6,zero,100074ec <_dtoa_r+0xec4>
10006dd0:	880d883a 	mov	r6,r17
10006dd4:	a00f883a 	mov	r7,r20
10006dd8:	9009883a 	mov	r4,r18
10006ddc:	980b883a 	mov	r5,r19
10006de0:	000d4a80 	call	1000d4a8 <__divdf3>
10006de4:	180b883a 	mov	r5,r3
10006de8:	1009883a 	mov	r4,r2
10006dec:	0003dac0 	call	10003dac <__fixdfsi>
10006df0:	1009883a 	mov	r4,r2
10006df4:	102d883a 	mov	r22,r2
10006df8:	0003e340 	call	10003e34 <__floatsidf>
10006dfc:	1009883a 	mov	r4,r2
10006e00:	180b883a 	mov	r5,r3
10006e04:	880d883a 	mov	r6,r17
10006e08:	a00f883a 	mov	r7,r20
10006e0c:	000e06c0 	call	1000e06c <__muldf3>
10006e10:	9009883a 	mov	r4,r18
10006e14:	980b883a 	mov	r5,r19
10006e18:	100d883a 	mov	r6,r2
10006e1c:	180f883a 	mov	r7,r3
10006e20:	00034dc0 	call	100034dc <__subdf3>
10006e24:	d9000717 	ldw	r4,28(sp)
10006e28:	d9800617 	ldw	r6,24(sp)
10006e2c:	180b883a 	mov	r5,r3
10006e30:	b0c00c04 	addi	r3,r22,48
10006e34:	20c00005 	stb	r3,0(r4)
10006e38:	25c00044 	addi	r23,r4,1
10006e3c:	01000044 	movi	r4,1
10006e40:	1011883a 	mov	r8,r2
10006e44:	2807883a 	mov	r3,r5
10006e48:	31003d26 	beq	r6,r4,10006f40 <_dtoa_r+0x918>
10006e4c:	000d883a 	mov	r6,zero
10006e50:	01d00934 	movhi	r7,16420
10006e54:	1009883a 	mov	r4,r2
10006e58:	000e06c0 	call	1000e06c <__muldf3>
10006e5c:	1009883a 	mov	r4,r2
10006e60:	180b883a 	mov	r5,r3
10006e64:	000d883a 	mov	r6,zero
10006e68:	000f883a 	mov	r7,zero
10006e6c:	1027883a 	mov	r19,r2
10006e70:	182b883a 	mov	r21,r3
10006e74:	000de280 	call	1000de28 <__eqdf2>
10006e78:	103f9926 	beq	r2,zero,10006ce0 <__alt_data_end+0xf8006ce0>
10006e7c:	d8c00617 	ldw	r3,24(sp)
10006e80:	d9000717 	ldw	r4,28(sp)
10006e84:	b825883a 	mov	r18,r23
10006e88:	18bfffc4 	addi	r2,r3,-1
10006e8c:	20ad883a 	add	r22,r4,r2
10006e90:	dc000315 	stw	r16,12(sp)
10006e94:	00000a06 	br	10006ec0 <_dtoa_r+0x898>
10006e98:	000e06c0 	call	1000e06c <__muldf3>
10006e9c:	1009883a 	mov	r4,r2
10006ea0:	180b883a 	mov	r5,r3
10006ea4:	000d883a 	mov	r6,zero
10006ea8:	000f883a 	mov	r7,zero
10006eac:	1027883a 	mov	r19,r2
10006eb0:	182b883a 	mov	r21,r3
10006eb4:	b825883a 	mov	r18,r23
10006eb8:	000de280 	call	1000de28 <__eqdf2>
10006ebc:	10022626 	beq	r2,zero,10007758 <_dtoa_r+0x1130>
10006ec0:	880d883a 	mov	r6,r17
10006ec4:	a00f883a 	mov	r7,r20
10006ec8:	9809883a 	mov	r4,r19
10006ecc:	a80b883a 	mov	r5,r21
10006ed0:	000d4a80 	call	1000d4a8 <__divdf3>
10006ed4:	180b883a 	mov	r5,r3
10006ed8:	1009883a 	mov	r4,r2
10006edc:	0003dac0 	call	10003dac <__fixdfsi>
10006ee0:	1009883a 	mov	r4,r2
10006ee4:	1021883a 	mov	r16,r2
10006ee8:	0003e340 	call	10003e34 <__floatsidf>
10006eec:	1009883a 	mov	r4,r2
10006ef0:	180b883a 	mov	r5,r3
10006ef4:	880d883a 	mov	r6,r17
10006ef8:	a00f883a 	mov	r7,r20
10006efc:	000e06c0 	call	1000e06c <__muldf3>
10006f00:	9809883a 	mov	r4,r19
10006f04:	a80b883a 	mov	r5,r21
10006f08:	100d883a 	mov	r6,r2
10006f0c:	180f883a 	mov	r7,r3
10006f10:	00034dc0 	call	100034dc <__subdf3>
10006f14:	82000c04 	addi	r8,r16,48
10006f18:	92000005 	stb	r8,0(r18)
10006f1c:	1009883a 	mov	r4,r2
10006f20:	180b883a 	mov	r5,r3
10006f24:	000d883a 	mov	r6,zero
10006f28:	01d00934 	movhi	r7,16420
10006f2c:	1011883a 	mov	r8,r2
10006f30:	bdc00044 	addi	r23,r23,1
10006f34:	95bfd81e 	bne	r18,r22,10006e98 <__alt_data_end+0xf8006e98>
10006f38:	802d883a 	mov	r22,r16
10006f3c:	dc000317 	ldw	r16,12(sp)
10006f40:	4009883a 	mov	r4,r8
10006f44:	180b883a 	mov	r5,r3
10006f48:	400d883a 	mov	r6,r8
10006f4c:	180f883a 	mov	r7,r3
10006f50:	0002c400 	call	10002c40 <__adddf3>
10006f54:	8809883a 	mov	r4,r17
10006f58:	a00b883a 	mov	r5,r20
10006f5c:	100d883a 	mov	r6,r2
10006f60:	180f883a 	mov	r7,r3
10006f64:	1027883a 	mov	r19,r2
10006f68:	1825883a 	mov	r18,r3
10006f6c:	000df8c0 	call	1000df8c <__ledf2>
10006f70:	10000816 	blt	r2,zero,10006f94 <_dtoa_r+0x96c>
10006f74:	8809883a 	mov	r4,r17
10006f78:	a00b883a 	mov	r5,r20
10006f7c:	980d883a 	mov	r6,r19
10006f80:	900f883a 	mov	r7,r18
10006f84:	000de280 	call	1000de28 <__eqdf2>
10006f88:	103f551e 	bne	r2,zero,10006ce0 <__alt_data_end+0xf8006ce0>
10006f8c:	b580004c 	andi	r22,r22,1
10006f90:	b03f5326 	beq	r22,zero,10006ce0 <__alt_data_end+0xf8006ce0>
10006f94:	bd7fffc3 	ldbu	r21,-1(r23)
10006f98:	b8bfffc4 	addi	r2,r23,-1
10006f9c:	1007883a 	mov	r3,r2
10006fa0:	01400e44 	movi	r5,57
10006fa4:	d9800717 	ldw	r6,28(sp)
10006fa8:	00000506 	br	10006fc0 <_dtoa_r+0x998>
10006fac:	18ffffc4 	addi	r3,r3,-1
10006fb0:	30825e26 	beq	r6,r2,1000792c <_dtoa_r+0x1304>
10006fb4:	1d400003 	ldbu	r21,0(r3)
10006fb8:	102f883a 	mov	r23,r2
10006fbc:	10bfffc4 	addi	r2,r2,-1
10006fc0:	a9003fcc 	andi	r4,r21,255
10006fc4:	2100201c 	xori	r4,r4,128
10006fc8:	213fe004 	addi	r4,r4,-128
10006fcc:	217ff726 	beq	r4,r5,10006fac <__alt_data_end+0xf8006fac>
10006fd0:	aa000044 	addi	r8,r21,1
10006fd4:	12000005 	stb	r8,0(r2)
10006fd8:	003f4106 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10006fdc:	d8c00b17 	ldw	r3,44(sp)
10006fe0:	18006726 	beq	r3,zero,10007180 <_dtoa_r+0xb58>
10006fe4:	d9000317 	ldw	r4,12(sp)
10006fe8:	00c00044 	movi	r3,1
10006fec:	19016a0e 	bge	r3,r4,10007598 <_dtoa_r+0xf70>
10006ff0:	d8800617 	ldw	r2,24(sp)
10006ff4:	d8c00917 	ldw	r3,36(sp)
10006ff8:	157fffc4 	addi	r21,r2,-1
10006ffc:	1d420716 	blt	r3,r21,1000781c <_dtoa_r+0x11f4>
10007000:	1d6bc83a 	sub	r21,r3,r21
10007004:	d8800617 	ldw	r2,24(sp)
10007008:	1002c716 	blt	r2,zero,10007b28 <_dtoa_r+0x1500>
1000700c:	dd000817 	ldw	r20,32(sp)
10007010:	d8800617 	ldw	r2,24(sp)
10007014:	d9800817 	ldw	r6,32(sp)
10007018:	8009883a 	mov	r4,r16
1000701c:	01400044 	movi	r5,1
10007020:	308d883a 	add	r6,r6,r2
10007024:	d9800815 	stw	r6,32(sp)
10007028:	b0ad883a 	add	r22,r22,r2
1000702c:	000a08c0 	call	1000a08c <__i2b>
10007030:	1023883a 	mov	r17,r2
10007034:	a0000826 	beq	r20,zero,10007058 <_dtoa_r+0xa30>
10007038:	0580070e 	bge	zero,r22,10007058 <_dtoa_r+0xa30>
1000703c:	b005883a 	mov	r2,r22
10007040:	a5812016 	blt	r20,r22,100074c4 <_dtoa_r+0xe9c>
10007044:	d8c00817 	ldw	r3,32(sp)
10007048:	a0a9c83a 	sub	r20,r20,r2
1000704c:	b0adc83a 	sub	r22,r22,r2
10007050:	1887c83a 	sub	r3,r3,r2
10007054:	d8c00815 	stw	r3,32(sp)
10007058:	d9000917 	ldw	r4,36(sp)
1000705c:	0100140e 	bge	zero,r4,100070b0 <_dtoa_r+0xa88>
10007060:	d9800b17 	ldw	r6,44(sp)
10007064:	3001e526 	beq	r6,zero,100077fc <_dtoa_r+0x11d4>
10007068:	05400e0e 	bge	zero,r21,100070a4 <_dtoa_r+0xa7c>
1000706c:	880b883a 	mov	r5,r17
10007070:	8009883a 	mov	r4,r16
10007074:	a80d883a 	mov	r6,r21
10007078:	000a3580 	call	1000a358 <__pow5mult>
1000707c:	e00d883a 	mov	r6,fp
10007080:	8009883a 	mov	r4,r16
10007084:	100b883a 	mov	r5,r2
10007088:	1023883a 	mov	r17,r2
1000708c:	000a0c80 	call	1000a0c8 <__multiply>
10007090:	102f883a 	mov	r23,r2
10007094:	e00b883a 	mov	r5,fp
10007098:	8009883a 	mov	r4,r16
1000709c:	0009d0c0 	call	10009d0c <_Bfree>
100070a0:	b839883a 	mov	fp,r23
100070a4:	d8800917 	ldw	r2,36(sp)
100070a8:	154dc83a 	sub	r6,r2,r21
100070ac:	3001281e 	bne	r6,zero,10007550 <_dtoa_r+0xf28>
100070b0:	05c00044 	movi	r23,1
100070b4:	8009883a 	mov	r4,r16
100070b8:	b80b883a 	mov	r5,r23
100070bc:	000a08c0 	call	1000a08c <__i2b>
100070c0:	d8c00a17 	ldw	r3,40(sp)
100070c4:	102b883a 	mov	r21,r2
100070c8:	00c0310e 	bge	zero,r3,10007190 <_dtoa_r+0xb68>
100070cc:	8009883a 	mov	r4,r16
100070d0:	100b883a 	mov	r5,r2
100070d4:	180d883a 	mov	r6,r3
100070d8:	000a3580 	call	1000a358 <__pow5mult>
100070dc:	d9000317 	ldw	r4,12(sp)
100070e0:	102b883a 	mov	r21,r2
100070e4:	b9011f0e 	bge	r23,r4,10007564 <_dtoa_r+0xf3c>
100070e8:	0027883a 	mov	r19,zero
100070ec:	a8800417 	ldw	r2,16(r21)
100070f0:	10800104 	addi	r2,r2,4
100070f4:	1085883a 	add	r2,r2,r2
100070f8:	1085883a 	add	r2,r2,r2
100070fc:	a885883a 	add	r2,r21,r2
10007100:	11000017 	ldw	r4,0(r2)
10007104:	0009f740 	call	10009f74 <__hi0bits>
10007108:	00c00804 	movi	r3,32
1000710c:	1885c83a 	sub	r2,r3,r2
10007110:	00002506 	br	100071a8 <_dtoa_r+0xb80>
10007114:	01800044 	movi	r6,1
10007118:	d9800c15 	stw	r6,48(sp)
1000711c:	003dec06 	br	100068d0 <__alt_data_end+0xf80068d0>
10007120:	d8c00817 	ldw	r3,32(sp)
10007124:	d9000517 	ldw	r4,20(sp)
10007128:	d8000a15 	stw	zero,40(sp)
1000712c:	1907c83a 	sub	r3,r3,r4
10007130:	010dc83a 	sub	r6,zero,r4
10007134:	d8c00815 	stw	r3,32(sp)
10007138:	d9800915 	stw	r6,36(sp)
1000713c:	003ded06 	br	100068f4 <__alt_data_end+0xf80068f4>
10007140:	05adc83a 	sub	r22,zero,r22
10007144:	dd800815 	stw	r22,32(sp)
10007148:	002d883a 	mov	r22,zero
1000714c:	003de406 	br	100068e0 <__alt_data_end+0xf80068e0>
10007150:	d9000517 	ldw	r4,20(sp)
10007154:	0003e340 	call	10003e34 <__floatsidf>
10007158:	1009883a 	mov	r4,r2
1000715c:	180b883a 	mov	r5,r3
10007160:	b00d883a 	mov	r6,r22
10007164:	a80f883a 	mov	r7,r21
10007168:	000de280 	call	1000de28 <__eqdf2>
1000716c:	103dc726 	beq	r2,zero,1000688c <__alt_data_end+0xf800688c>
10007170:	d8800517 	ldw	r2,20(sp)
10007174:	10bfffc4 	addi	r2,r2,-1
10007178:	d8800515 	stw	r2,20(sp)
1000717c:	003dc306 	br	1000688c <__alt_data_end+0xf800688c>
10007180:	dd400917 	ldw	r21,36(sp)
10007184:	dd000817 	ldw	r20,32(sp)
10007188:	0023883a 	mov	r17,zero
1000718c:	003fa906 	br	10007034 <__alt_data_end+0xf8007034>
10007190:	d9800317 	ldw	r6,12(sp)
10007194:	b981670e 	bge	r23,r6,10007734 <_dtoa_r+0x110c>
10007198:	0027883a 	mov	r19,zero
1000719c:	d8c00a17 	ldw	r3,40(sp)
100071a0:	183fd21e 	bne	r3,zero,100070ec <__alt_data_end+0xf80070ec>
100071a4:	00800044 	movi	r2,1
100071a8:	1585883a 	add	r2,r2,r22
100071ac:	108007cc 	andi	r2,r2,31
100071b0:	10005f26 	beq	r2,zero,10007330 <_dtoa_r+0xd08>
100071b4:	00c00804 	movi	r3,32
100071b8:	1887c83a 	sub	r3,r3,r2
100071bc:	01000104 	movi	r4,4
100071c0:	20c2dd0e 	bge	r4,r3,10007d38 <_dtoa_r+0x1710>
100071c4:	d9000817 	ldw	r4,32(sp)
100071c8:	00c00704 	movi	r3,28
100071cc:	1885c83a 	sub	r2,r3,r2
100071d0:	2089883a 	add	r4,r4,r2
100071d4:	d9000815 	stw	r4,32(sp)
100071d8:	a0a9883a 	add	r20,r20,r2
100071dc:	b0ad883a 	add	r22,r22,r2
100071e0:	d8800817 	ldw	r2,32(sp)
100071e4:	0080050e 	bge	zero,r2,100071fc <_dtoa_r+0xbd4>
100071e8:	e00b883a 	mov	r5,fp
100071ec:	8009883a 	mov	r4,r16
100071f0:	100d883a 	mov	r6,r2
100071f4:	000a4980 	call	1000a498 <__lshift>
100071f8:	1039883a 	mov	fp,r2
100071fc:	0580050e 	bge	zero,r22,10007214 <_dtoa_r+0xbec>
10007200:	a80b883a 	mov	r5,r21
10007204:	8009883a 	mov	r4,r16
10007208:	b00d883a 	mov	r6,r22
1000720c:	000a4980 	call	1000a498 <__lshift>
10007210:	102b883a 	mov	r21,r2
10007214:	d8c00c17 	ldw	r3,48(sp)
10007218:	1801161e 	bne	r3,zero,10007674 <_dtoa_r+0x104c>
1000721c:	d8c00617 	ldw	r3,24(sp)
10007220:	00c12d0e 	bge	zero,r3,100076d8 <_dtoa_r+0x10b0>
10007224:	d8c00b17 	ldw	r3,44(sp)
10007228:	1800571e 	bne	r3,zero,10007388 <_dtoa_r+0xd60>
1000722c:	dc800717 	ldw	r18,28(sp)
10007230:	dcc00617 	ldw	r19,24(sp)
10007234:	9029883a 	mov	r20,r18
10007238:	00000206 	br	10007244 <_dtoa_r+0xc1c>
1000723c:	0009d340 	call	10009d34 <__multadd>
10007240:	1039883a 	mov	fp,r2
10007244:	e009883a 	mov	r4,fp
10007248:	a80b883a 	mov	r5,r21
1000724c:	00064000 	call	10006400 <quorem>
10007250:	10800c04 	addi	r2,r2,48
10007254:	90800005 	stb	r2,0(r18)
10007258:	94800044 	addi	r18,r18,1
1000725c:	9507c83a 	sub	r3,r18,r20
10007260:	8009883a 	mov	r4,r16
10007264:	e00b883a 	mov	r5,fp
10007268:	01800284 	movi	r6,10
1000726c:	000f883a 	mov	r7,zero
10007270:	1cfff216 	blt	r3,r19,1000723c <__alt_data_end+0xf800723c>
10007274:	1011883a 	mov	r8,r2
10007278:	d8800617 	ldw	r2,24(sp)
1000727c:	00822e0e 	bge	zero,r2,10007b38 <_dtoa_r+0x1510>
10007280:	d9000717 	ldw	r4,28(sp)
10007284:	0025883a 	mov	r18,zero
10007288:	20af883a 	add	r23,r4,r2
1000728c:	e00b883a 	mov	r5,fp
10007290:	01800044 	movi	r6,1
10007294:	8009883a 	mov	r4,r16
10007298:	da001715 	stw	r8,92(sp)
1000729c:	000a4980 	call	1000a498 <__lshift>
100072a0:	1009883a 	mov	r4,r2
100072a4:	a80b883a 	mov	r5,r21
100072a8:	1039883a 	mov	fp,r2
100072ac:	000a5e00 	call	1000a5e0 <__mcmp>
100072b0:	da001717 	ldw	r8,92(sp)
100072b4:	00816e0e 	bge	zero,r2,10007870 <_dtoa_r+0x1248>
100072b8:	b93fffc3 	ldbu	r4,-1(r23)
100072bc:	b8bfffc4 	addi	r2,r23,-1
100072c0:	1007883a 	mov	r3,r2
100072c4:	01800e44 	movi	r6,57
100072c8:	d9c00717 	ldw	r7,28(sp)
100072cc:	00000506 	br	100072e4 <_dtoa_r+0xcbc>
100072d0:	18ffffc4 	addi	r3,r3,-1
100072d4:	38811926 	beq	r7,r2,1000773c <_dtoa_r+0x1114>
100072d8:	19000003 	ldbu	r4,0(r3)
100072dc:	102f883a 	mov	r23,r2
100072e0:	10bfffc4 	addi	r2,r2,-1
100072e4:	21403fcc 	andi	r5,r4,255
100072e8:	2940201c 	xori	r5,r5,128
100072ec:	297fe004 	addi	r5,r5,-128
100072f0:	29bff726 	beq	r5,r6,100072d0 <__alt_data_end+0xf80072d0>
100072f4:	21000044 	addi	r4,r4,1
100072f8:	11000005 	stb	r4,0(r2)
100072fc:	8009883a 	mov	r4,r16
10007300:	a80b883a 	mov	r5,r21
10007304:	0009d0c0 	call	10009d0c <_Bfree>
10007308:	883e7526 	beq	r17,zero,10006ce0 <__alt_data_end+0xf8006ce0>
1000730c:	90000426 	beq	r18,zero,10007320 <_dtoa_r+0xcf8>
10007310:	94400326 	beq	r18,r17,10007320 <_dtoa_r+0xcf8>
10007314:	8009883a 	mov	r4,r16
10007318:	900b883a 	mov	r5,r18
1000731c:	0009d0c0 	call	10009d0c <_Bfree>
10007320:	8009883a 	mov	r4,r16
10007324:	880b883a 	mov	r5,r17
10007328:	0009d0c0 	call	10009d0c <_Bfree>
1000732c:	003e6c06 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10007330:	00800704 	movi	r2,28
10007334:	d9800817 	ldw	r6,32(sp)
10007338:	a0a9883a 	add	r20,r20,r2
1000733c:	b0ad883a 	add	r22,r22,r2
10007340:	308d883a 	add	r6,r6,r2
10007344:	d9800815 	stw	r6,32(sp)
10007348:	003fa506 	br	100071e0 <__alt_data_end+0xf80071e0>
1000734c:	013efb84 	movi	r4,-1042
10007350:	246bc83a 	sub	r21,r4,r17
10007354:	9548983a 	sll	r4,r18,r21
10007358:	003d1806 	br	100067bc <__alt_data_end+0xf80067bc>
1000735c:	d8000c15 	stw	zero,48(sp)
10007360:	003d5b06 	br	100068d0 <__alt_data_end+0xf80068d0>
10007364:	880b883a 	mov	r5,r17
10007368:	8009883a 	mov	r4,r16
1000736c:	01800284 	movi	r6,10
10007370:	000f883a 	mov	r7,zero
10007374:	0009d340 	call	10009d34 <__multadd>
10007378:	1023883a 	mov	r17,r2
1000737c:	d8800d17 	ldw	r2,52(sp)
10007380:	0082550e 	bge	zero,r2,10007cd8 <_dtoa_r+0x16b0>
10007384:	d8800615 	stw	r2,24(sp)
10007388:	0500050e 	bge	zero,r20,100073a0 <_dtoa_r+0xd78>
1000738c:	880b883a 	mov	r5,r17
10007390:	8009883a 	mov	r4,r16
10007394:	a00d883a 	mov	r6,r20
10007398:	000a4980 	call	1000a498 <__lshift>
1000739c:	1023883a 	mov	r17,r2
100073a0:	98016a1e 	bne	r19,zero,1000794c <_dtoa_r+0x1324>
100073a4:	8829883a 	mov	r20,r17
100073a8:	d9000617 	ldw	r4,24(sp)
100073ac:	dcc00717 	ldw	r19,28(sp)
100073b0:	9480004c 	andi	r18,r18,1
100073b4:	20bfffc4 	addi	r2,r4,-1
100073b8:	9885883a 	add	r2,r19,r2
100073bc:	d8800415 	stw	r2,16(sp)
100073c0:	dc800615 	stw	r18,24(sp)
100073c4:	e009883a 	mov	r4,fp
100073c8:	a80b883a 	mov	r5,r21
100073cc:	00064000 	call	10006400 <quorem>
100073d0:	e009883a 	mov	r4,fp
100073d4:	880b883a 	mov	r5,r17
100073d8:	102f883a 	mov	r23,r2
100073dc:	000a5e00 	call	1000a5e0 <__mcmp>
100073e0:	8009883a 	mov	r4,r16
100073e4:	a80b883a 	mov	r5,r21
100073e8:	a00d883a 	mov	r6,r20
100073ec:	102d883a 	mov	r22,r2
100073f0:	000a6400 	call	1000a640 <__mdiff>
100073f4:	1007883a 	mov	r3,r2
100073f8:	10800317 	ldw	r2,12(r2)
100073fc:	bc800c04 	addi	r18,r23,48
10007400:	1000971e 	bne	r2,zero,10007660 <_dtoa_r+0x1038>
10007404:	180b883a 	mov	r5,r3
10007408:	e009883a 	mov	r4,fp
1000740c:	d8c01515 	stw	r3,84(sp)
10007410:	000a5e00 	call	1000a5e0 <__mcmp>
10007414:	d8c01517 	ldw	r3,84(sp)
10007418:	8009883a 	mov	r4,r16
1000741c:	d8801515 	stw	r2,84(sp)
10007420:	180b883a 	mov	r5,r3
10007424:	0009d0c0 	call	10009d0c <_Bfree>
10007428:	d8801517 	ldw	r2,84(sp)
1000742c:	1000041e 	bne	r2,zero,10007440 <_dtoa_r+0xe18>
10007430:	d9800317 	ldw	r6,12(sp)
10007434:	3000021e 	bne	r6,zero,10007440 <_dtoa_r+0xe18>
10007438:	d8c00617 	ldw	r3,24(sp)
1000743c:	18007626 	beq	r3,zero,10007618 <_dtoa_r+0xff0>
10007440:	b0005b16 	blt	r22,zero,100075b0 <_dtoa_r+0xf88>
10007444:	b000041e 	bne	r22,zero,10007458 <_dtoa_r+0xe30>
10007448:	d9000317 	ldw	r4,12(sp)
1000744c:	2000021e 	bne	r4,zero,10007458 <_dtoa_r+0xe30>
10007450:	d8c00617 	ldw	r3,24(sp)
10007454:	18005626 	beq	r3,zero,100075b0 <_dtoa_r+0xf88>
10007458:	00814d16 	blt	zero,r2,10007990 <_dtoa_r+0x1368>
1000745c:	d8c00417 	ldw	r3,16(sp)
10007460:	9d800044 	addi	r22,r19,1
10007464:	9c800005 	stb	r18,0(r19)
10007468:	b02f883a 	mov	r23,r22
1000746c:	98c14c26 	beq	r19,r3,100079a0 <_dtoa_r+0x1378>
10007470:	e00b883a 	mov	r5,fp
10007474:	8009883a 	mov	r4,r16
10007478:	01800284 	movi	r6,10
1000747c:	000f883a 	mov	r7,zero
10007480:	0009d340 	call	10009d34 <__multadd>
10007484:	1039883a 	mov	fp,r2
10007488:	8d006d26 	beq	r17,r20,10007640 <_dtoa_r+0x1018>
1000748c:	880b883a 	mov	r5,r17
10007490:	01800284 	movi	r6,10
10007494:	000f883a 	mov	r7,zero
10007498:	8009883a 	mov	r4,r16
1000749c:	0009d340 	call	10009d34 <__multadd>
100074a0:	a00b883a 	mov	r5,r20
100074a4:	8009883a 	mov	r4,r16
100074a8:	01800284 	movi	r6,10
100074ac:	000f883a 	mov	r7,zero
100074b0:	1023883a 	mov	r17,r2
100074b4:	0009d340 	call	10009d34 <__multadd>
100074b8:	1029883a 	mov	r20,r2
100074bc:	b027883a 	mov	r19,r22
100074c0:	003fc006 	br	100073c4 <__alt_data_end+0xf80073c4>
100074c4:	a005883a 	mov	r2,r20
100074c8:	003ede06 	br	10007044 <__alt_data_end+0xf8007044>
100074cc:	01000044 	movi	r4,1
100074d0:	d9000b15 	stw	r4,44(sp)
100074d4:	d9802217 	ldw	r6,136(sp)
100074d8:	0180dc0e 	bge	zero,r6,1000784c <_dtoa_r+0x1224>
100074dc:	3023883a 	mov	r17,r6
100074e0:	d9800d15 	stw	r6,52(sp)
100074e4:	d9800615 	stw	r6,24(sp)
100074e8:	003d1e06 	br	10006964 <__alt_data_end+0xf8006964>
100074ec:	d8800617 	ldw	r2,24(sp)
100074f0:	00be3716 	blt	zero,r2,10006dd0 <__alt_data_end+0xf8006dd0>
100074f4:	1000be1e 	bne	r2,zero,100077f0 <_dtoa_r+0x11c8>
100074f8:	8809883a 	mov	r4,r17
100074fc:	a00b883a 	mov	r5,r20
10007500:	000d883a 	mov	r6,zero
10007504:	01d00534 	movhi	r7,16404
10007508:	000e06c0 	call	1000e06c <__muldf3>
1000750c:	1009883a 	mov	r4,r2
10007510:	180b883a 	mov	r5,r3
10007514:	900d883a 	mov	r6,r18
10007518:	980f883a 	mov	r7,r19
1000751c:	000deac0 	call	1000deac <__gedf2>
10007520:	002b883a 	mov	r21,zero
10007524:	0023883a 	mov	r17,zero
10007528:	10007a16 	blt	r2,zero,10007714 <_dtoa_r+0x10ec>
1000752c:	d9002217 	ldw	r4,136(sp)
10007530:	ddc00717 	ldw	r23,28(sp)
10007534:	0108303a 	nor	r4,zero,r4
10007538:	d9000515 	stw	r4,20(sp)
1000753c:	8009883a 	mov	r4,r16
10007540:	a80b883a 	mov	r5,r21
10007544:	0009d0c0 	call	10009d0c <_Bfree>
10007548:	883f751e 	bne	r17,zero,10007320 <__alt_data_end+0xf8007320>
1000754c:	003de406 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10007550:	e00b883a 	mov	r5,fp
10007554:	8009883a 	mov	r4,r16
10007558:	000a3580 	call	1000a358 <__pow5mult>
1000755c:	1039883a 	mov	fp,r2
10007560:	003ed306 	br	100070b0 <__alt_data_end+0xf80070b0>
10007564:	903ee01e 	bne	r18,zero,100070e8 <__alt_data_end+0xf80070e8>
10007568:	00800434 	movhi	r2,16
1000756c:	10bfffc4 	addi	r2,r2,-1
10007570:	9884703a 	and	r2,r19,r2
10007574:	103f081e 	bne	r2,zero,10007198 <__alt_data_end+0xf8007198>
10007578:	9cdffc2c 	andhi	r19,r19,32752
1000757c:	983f0626 	beq	r19,zero,10007198 <__alt_data_end+0xf8007198>
10007580:	d8800817 	ldw	r2,32(sp)
10007584:	b5800044 	addi	r22,r22,1
10007588:	04c00044 	movi	r19,1
1000758c:	10800044 	addi	r2,r2,1
10007590:	d8800815 	stw	r2,32(sp)
10007594:	003f0106 	br	1000719c <__alt_data_end+0xf800719c>
10007598:	d9800f17 	ldw	r6,60(sp)
1000759c:	30016826 	beq	r6,zero,10007b40 <_dtoa_r+0x1518>
100075a0:	10810cc4 	addi	r2,r2,1075
100075a4:	dd400917 	ldw	r21,36(sp)
100075a8:	dd000817 	ldw	r20,32(sp)
100075ac:	003e9906 	br	10007014 <__alt_data_end+0xf8007014>
100075b0:	9011883a 	mov	r8,r18
100075b4:	4007883a 	mov	r3,r8
100075b8:	e02d883a 	mov	r22,fp
100075bc:	0080100e 	bge	zero,r2,10007600 <_dtoa_r+0xfd8>
100075c0:	01800044 	movi	r6,1
100075c4:	8009883a 	mov	r4,r16
100075c8:	e00b883a 	mov	r5,fp
100075cc:	da001515 	stw	r8,84(sp)
100075d0:	da001715 	stw	r8,92(sp)
100075d4:	000a4980 	call	1000a498 <__lshift>
100075d8:	1009883a 	mov	r4,r2
100075dc:	a80b883a 	mov	r5,r21
100075e0:	102d883a 	mov	r22,r2
100075e4:	000a5e00 	call	1000a5e0 <__mcmp>
100075e8:	d8c01517 	ldw	r3,84(sp)
100075ec:	da001717 	ldw	r8,92(sp)
100075f0:	0081a50e 	bge	zero,r2,10007c88 <_dtoa_r+0x1660>
100075f4:	00800e44 	movi	r2,57
100075f8:	40817b26 	beq	r8,r2,10007be8 <_dtoa_r+0x15c0>
100075fc:	40c00044 	addi	r3,r8,1
10007600:	8825883a 	mov	r18,r17
10007604:	9dc00044 	addi	r23,r19,1
10007608:	98c00005 	stb	r3,0(r19)
1000760c:	a023883a 	mov	r17,r20
10007610:	b039883a 	mov	fp,r22
10007614:	003f3906 	br	100072fc <__alt_data_end+0xf80072fc>
10007618:	00800e44 	movi	r2,57
1000761c:	9011883a 	mov	r8,r18
10007620:	90817226 	beq	r18,r2,10007bec <_dtoa_r+0x15c4>
10007624:	0580010e 	bge	zero,r22,1000762c <_dtoa_r+0x1004>
10007628:	ba000c44 	addi	r8,r23,49
1000762c:	8825883a 	mov	r18,r17
10007630:	9dc00044 	addi	r23,r19,1
10007634:	9a000005 	stb	r8,0(r19)
10007638:	a023883a 	mov	r17,r20
1000763c:	003f2f06 	br	100072fc <__alt_data_end+0xf80072fc>
10007640:	880b883a 	mov	r5,r17
10007644:	8009883a 	mov	r4,r16
10007648:	01800284 	movi	r6,10
1000764c:	000f883a 	mov	r7,zero
10007650:	0009d340 	call	10009d34 <__multadd>
10007654:	1023883a 	mov	r17,r2
10007658:	1029883a 	mov	r20,r2
1000765c:	003f9706 	br	100074bc <__alt_data_end+0xf80074bc>
10007660:	8009883a 	mov	r4,r16
10007664:	180b883a 	mov	r5,r3
10007668:	0009d0c0 	call	10009d0c <_Bfree>
1000766c:	00800044 	movi	r2,1
10007670:	003f7306 	br	10007440 <__alt_data_end+0xf8007440>
10007674:	e009883a 	mov	r4,fp
10007678:	a80b883a 	mov	r5,r21
1000767c:	000a5e00 	call	1000a5e0 <__mcmp>
10007680:	103ee60e 	bge	r2,zero,1000721c <__alt_data_end+0xf800721c>
10007684:	8009883a 	mov	r4,r16
10007688:	e00b883a 	mov	r5,fp
1000768c:	01800284 	movi	r6,10
10007690:	000f883a 	mov	r7,zero
10007694:	0009d340 	call	10009d34 <__multadd>
10007698:	d9000517 	ldw	r4,20(sp)
1000769c:	d9800b17 	ldw	r6,44(sp)
100076a0:	1039883a 	mov	fp,r2
100076a4:	213fffc4 	addi	r4,r4,-1
100076a8:	d9000515 	stw	r4,20(sp)
100076ac:	303f2d1e 	bne	r6,zero,10007364 <__alt_data_end+0xf8007364>
100076b0:	d9000d17 	ldw	r4,52(sp)
100076b4:	0101780e 	bge	zero,r4,10007c98 <_dtoa_r+0x1670>
100076b8:	d9000615 	stw	r4,24(sp)
100076bc:	003edb06 	br	1000722c <__alt_data_end+0xf800722c>
100076c0:	00800084 	movi	r2,2
100076c4:	30818e1e 	bne	r6,r2,10007d00 <_dtoa_r+0x16d8>
100076c8:	d8000b15 	stw	zero,44(sp)
100076cc:	003f8106 	br	100074d4 <__alt_data_end+0xf80074d4>
100076d0:	d8800717 	ldw	r2,28(sp)
100076d4:	003c0306 	br	100066e4 <__alt_data_end+0xf80066e4>
100076d8:	d9000317 	ldw	r4,12(sp)
100076dc:	00800084 	movi	r2,2
100076e0:	113ed00e 	bge	r2,r4,10007224 <__alt_data_end+0xf8007224>
100076e4:	d8c00617 	ldw	r3,24(sp)
100076e8:	183f901e 	bne	r3,zero,1000752c <__alt_data_end+0xf800752c>
100076ec:	a80b883a 	mov	r5,r21
100076f0:	8009883a 	mov	r4,r16
100076f4:	01800144 	movi	r6,5
100076f8:	000f883a 	mov	r7,zero
100076fc:	0009d340 	call	10009d34 <__multadd>
10007700:	e009883a 	mov	r4,fp
10007704:	100b883a 	mov	r5,r2
10007708:	102b883a 	mov	r21,r2
1000770c:	000a5e00 	call	1000a5e0 <__mcmp>
10007710:	00bf860e 	bge	zero,r2,1000752c <__alt_data_end+0xf800752c>
10007714:	d9800717 	ldw	r6,28(sp)
10007718:	00800c44 	movi	r2,49
1000771c:	30800005 	stb	r2,0(r6)
10007720:	d8800517 	ldw	r2,20(sp)
10007724:	35c00044 	addi	r23,r6,1
10007728:	10800044 	addi	r2,r2,1
1000772c:	d8800515 	stw	r2,20(sp)
10007730:	003f8206 	br	1000753c <__alt_data_end+0xf800753c>
10007734:	903e981e 	bne	r18,zero,10007198 <__alt_data_end+0xf8007198>
10007738:	003f8b06 	br	10007568 <__alt_data_end+0xf8007568>
1000773c:	d9800517 	ldw	r6,20(sp)
10007740:	d8c00717 	ldw	r3,28(sp)
10007744:	00800c44 	movi	r2,49
10007748:	31800044 	addi	r6,r6,1
1000774c:	d9800515 	stw	r6,20(sp)
10007750:	18800005 	stb	r2,0(r3)
10007754:	003ee906 	br	100072fc <__alt_data_end+0xf80072fc>
10007758:	dc000317 	ldw	r16,12(sp)
1000775c:	003d6006 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10007760:	8809883a 	mov	r4,r17
10007764:	0003e340 	call	10003e34 <__floatsidf>
10007768:	a009883a 	mov	r4,r20
1000776c:	a80b883a 	mov	r5,r21
10007770:	100d883a 	mov	r6,r2
10007774:	180f883a 	mov	r7,r3
10007778:	000e06c0 	call	1000e06c <__muldf3>
1000777c:	1009883a 	mov	r4,r2
10007780:	180b883a 	mov	r5,r3
10007784:	000d883a 	mov	r6,zero
10007788:	01d00734 	movhi	r7,16412
1000778c:	0002c400 	call	10002c40 <__adddf3>
10007790:	1023883a 	mov	r17,r2
10007794:	00bf3034 	movhi	r2,64704
10007798:	1885883a 	add	r2,r3,r2
1000779c:	d8800e15 	stw	r2,56(sp)
100077a0:	a009883a 	mov	r4,r20
100077a4:	a80b883a 	mov	r5,r21
100077a8:	000d883a 	mov	r6,zero
100077ac:	01d00534 	movhi	r7,16404
100077b0:	00034dc0 	call	100034dc <__subdf3>
100077b4:	d9c00e17 	ldw	r7,56(sp)
100077b8:	1009883a 	mov	r4,r2
100077bc:	180b883a 	mov	r5,r3
100077c0:	880d883a 	mov	r6,r17
100077c4:	102b883a 	mov	r21,r2
100077c8:	1829883a 	mov	r20,r3
100077cc:	000deac0 	call	1000deac <__gedf2>
100077d0:	00807716 	blt	zero,r2,100079b0 <_dtoa_r+0x1388>
100077d4:	d8800e17 	ldw	r2,56(sp)
100077d8:	a809883a 	mov	r4,r21
100077dc:	a00b883a 	mov	r5,r20
100077e0:	11e0003c 	xorhi	r7,r2,32768
100077e4:	880d883a 	mov	r6,r17
100077e8:	000df8c0 	call	1000df8c <__ledf2>
100077ec:	103d6b0e 	bge	r2,zero,10006d9c <__alt_data_end+0xf8006d9c>
100077f0:	002b883a 	mov	r21,zero
100077f4:	0023883a 	mov	r17,zero
100077f8:	003f4c06 	br	1000752c <__alt_data_end+0xf800752c>
100077fc:	d9800917 	ldw	r6,36(sp)
10007800:	e00b883a 	mov	r5,fp
10007804:	8009883a 	mov	r4,r16
10007808:	000a3580 	call	1000a358 <__pow5mult>
1000780c:	1039883a 	mov	fp,r2
10007810:	003e2706 	br	100070b0 <__alt_data_end+0xf80070b0>
10007814:	d8000b15 	stw	zero,44(sp)
10007818:	003c4906 	br	10006940 <__alt_data_end+0xf8006940>
1000781c:	d9000917 	ldw	r4,36(sp)
10007820:	d9800a17 	ldw	r6,40(sp)
10007824:	dd400915 	stw	r21,36(sp)
10007828:	a905c83a 	sub	r2,r21,r4
1000782c:	308d883a 	add	r6,r6,r2
10007830:	d9800a15 	stw	r6,40(sp)
10007834:	002b883a 	mov	r21,zero
10007838:	003df206 	br	10007004 <__alt_data_end+0xf8007004>
1000783c:	dc800e15 	stw	r18,56(sp)
10007840:	982b883a 	mov	r21,r19
10007844:	04400084 	movi	r17,2
10007848:	003c7406 	br	10006a1c <__alt_data_end+0xf8006a1c>
1000784c:	04400044 	movi	r17,1
10007850:	dc400d15 	stw	r17,52(sp)
10007854:	dc400615 	stw	r17,24(sp)
10007858:	dc402215 	stw	r17,136(sp)
1000785c:	80001115 	stw	zero,68(r16)
10007860:	000b883a 	mov	r5,zero
10007864:	003c4a06 	br	10006990 <__alt_data_end+0xf8006990>
10007868:	3023883a 	mov	r17,r6
1000786c:	003ffb06 	br	1000785c <__alt_data_end+0xf800785c>
10007870:	1000021e 	bne	r2,zero,1000787c <_dtoa_r+0x1254>
10007874:	4200004c 	andi	r8,r8,1
10007878:	403e8f1e 	bne	r8,zero,100072b8 <__alt_data_end+0xf80072b8>
1000787c:	01000c04 	movi	r4,48
10007880:	00000106 	br	10007888 <_dtoa_r+0x1260>
10007884:	102f883a 	mov	r23,r2
10007888:	b8bfffc4 	addi	r2,r23,-1
1000788c:	10c00007 	ldb	r3,0(r2)
10007890:	193ffc26 	beq	r3,r4,10007884 <__alt_data_end+0xf8007884>
10007894:	003e9906 	br	100072fc <__alt_data_end+0xf80072fc>
10007898:	d9000517 	ldw	r4,20(sp)
1000789c:	012fc83a 	sub	r23,zero,r4
100078a0:	b800ad26 	beq	r23,zero,10007b58 <_dtoa_r+0x1530>
100078a4:	b88003cc 	andi	r2,r23,15
100078a8:	100490fa 	slli	r2,r2,3
100078ac:	00c40074 	movhi	r3,4097
100078b0:	18c4de04 	addi	r3,r3,4984
100078b4:	1885883a 	add	r2,r3,r2
100078b8:	11800017 	ldw	r6,0(r2)
100078bc:	11c00117 	ldw	r7,4(r2)
100078c0:	b82fd13a 	srai	r23,r23,4
100078c4:	9009883a 	mov	r4,r18
100078c8:	980b883a 	mov	r5,r19
100078cc:	000e06c0 	call	1000e06c <__muldf3>
100078d0:	1029883a 	mov	r20,r2
100078d4:	182b883a 	mov	r21,r3
100078d8:	b800f426 	beq	r23,zero,10007cac <_dtoa_r+0x1684>
100078dc:	02040074 	movhi	r8,4097
100078e0:	4204d404 	addi	r8,r8,4944
100078e4:	8029883a 	mov	r20,r16
100078e8:	04400084 	movi	r17,2
100078ec:	4021883a 	mov	r16,r8
100078f0:	b980004c 	andi	r6,r23,1
100078f4:	1009883a 	mov	r4,r2
100078f8:	b82fd07a 	srai	r23,r23,1
100078fc:	180b883a 	mov	r5,r3
10007900:	30000426 	beq	r6,zero,10007914 <_dtoa_r+0x12ec>
10007904:	81800017 	ldw	r6,0(r16)
10007908:	81c00117 	ldw	r7,4(r16)
1000790c:	8c400044 	addi	r17,r17,1
10007910:	000e06c0 	call	1000e06c <__muldf3>
10007914:	84000204 	addi	r16,r16,8
10007918:	b83ff51e 	bne	r23,zero,100078f0 <__alt_data_end+0xf80078f0>
1000791c:	a021883a 	mov	r16,r20
10007920:	182b883a 	mov	r21,r3
10007924:	1029883a 	mov	r20,r2
10007928:	003c5506 	br	10006a80 <__alt_data_end+0xf8006a80>
1000792c:	d9800517 	ldw	r6,20(sp)
10007930:	d9000717 	ldw	r4,28(sp)
10007934:	00c00c04 	movi	r3,48
10007938:	31800044 	addi	r6,r6,1
1000793c:	d9800515 	stw	r6,20(sp)
10007940:	20c00005 	stb	r3,0(r4)
10007944:	02000c44 	movi	r8,49
10007948:	003da206 	br	10006fd4 <__alt_data_end+0xf8006fd4>
1000794c:	89400117 	ldw	r5,4(r17)
10007950:	8009883a 	mov	r4,r16
10007954:	0009c640 	call	10009c64 <_Balloc>
10007958:	89800417 	ldw	r6,16(r17)
1000795c:	11000304 	addi	r4,r2,12
10007960:	89400304 	addi	r5,r17,12
10007964:	31800084 	addi	r6,r6,2
10007968:	318d883a 	add	r6,r6,r6
1000796c:	318d883a 	add	r6,r6,r6
10007970:	1027883a 	mov	r19,r2
10007974:	00098ac0 	call	100098ac <memcpy>
10007978:	8009883a 	mov	r4,r16
1000797c:	980b883a 	mov	r5,r19
10007980:	01800044 	movi	r6,1
10007984:	000a4980 	call	1000a498 <__lshift>
10007988:	1029883a 	mov	r20,r2
1000798c:	003e8606 	br	100073a8 <__alt_data_end+0xf80073a8>
10007990:	00800e44 	movi	r2,57
10007994:	90809526 	beq	r18,r2,10007bec <_dtoa_r+0x15c4>
10007998:	92000044 	addi	r8,r18,1
1000799c:	003f2306 	br	1000762c <__alt_data_end+0xf800762c>
100079a0:	9011883a 	mov	r8,r18
100079a4:	8825883a 	mov	r18,r17
100079a8:	a023883a 	mov	r17,r20
100079ac:	003e3706 	br	1000728c <__alt_data_end+0xf800728c>
100079b0:	002b883a 	mov	r21,zero
100079b4:	0023883a 	mov	r17,zero
100079b8:	003f5606 	br	10007714 <__alt_data_end+0xf8007714>
100079bc:	51bfffc4 	addi	r6,r10,-1
100079c0:	300490fa 	slli	r2,r6,3
100079c4:	00c40074 	movhi	r3,4097
100079c8:	18c4de04 	addi	r3,r3,4984
100079cc:	1885883a 	add	r2,r3,r2
100079d0:	d9c00e17 	ldw	r7,56(sp)
100079d4:	11000017 	ldw	r4,0(r2)
100079d8:	11400117 	ldw	r5,4(r2)
100079dc:	d8800717 	ldw	r2,28(sp)
100079e0:	d9801015 	stw	r6,64(sp)
100079e4:	880d883a 	mov	r6,r17
100079e8:	da801615 	stw	r10,88(sp)
100079ec:	15c00044 	addi	r23,r2,1
100079f0:	000e06c0 	call	1000e06c <__muldf3>
100079f4:	a80b883a 	mov	r5,r21
100079f8:	a009883a 	mov	r4,r20
100079fc:	d8c01115 	stw	r3,68(sp)
10007a00:	d8800e15 	stw	r2,56(sp)
10007a04:	0003dac0 	call	10003dac <__fixdfsi>
10007a08:	1009883a 	mov	r4,r2
10007a0c:	1023883a 	mov	r17,r2
10007a10:	0003e340 	call	10003e34 <__floatsidf>
10007a14:	a009883a 	mov	r4,r20
10007a18:	a80b883a 	mov	r5,r21
10007a1c:	100d883a 	mov	r6,r2
10007a20:	180f883a 	mov	r7,r3
10007a24:	00034dc0 	call	100034dc <__subdf3>
10007a28:	1813883a 	mov	r9,r3
10007a2c:	d8c00717 	ldw	r3,28(sp)
10007a30:	8c400c04 	addi	r17,r17,48
10007a34:	1011883a 	mov	r8,r2
10007a38:	1c400005 	stb	r17,0(r3)
10007a3c:	da801617 	ldw	r10,88(sp)
10007a40:	00800044 	movi	r2,1
10007a44:	50802326 	beq	r10,r2,10007ad4 <_dtoa_r+0x14ac>
10007a48:	d8800717 	ldw	r2,28(sp)
10007a4c:	b82b883a 	mov	r21,r23
10007a50:	dc001315 	stw	r16,76(sp)
10007a54:	12a9883a 	add	r20,r2,r10
10007a58:	4807883a 	mov	r3,r9
10007a5c:	4005883a 	mov	r2,r8
10007a60:	dc801415 	stw	r18,80(sp)
10007a64:	000d883a 	mov	r6,zero
10007a68:	01d00934 	movhi	r7,16420
10007a6c:	1009883a 	mov	r4,r2
10007a70:	180b883a 	mov	r5,r3
10007a74:	000e06c0 	call	1000e06c <__muldf3>
10007a78:	180b883a 	mov	r5,r3
10007a7c:	1009883a 	mov	r4,r2
10007a80:	1821883a 	mov	r16,r3
10007a84:	1025883a 	mov	r18,r2
10007a88:	0003dac0 	call	10003dac <__fixdfsi>
10007a8c:	1009883a 	mov	r4,r2
10007a90:	1023883a 	mov	r17,r2
10007a94:	0003e340 	call	10003e34 <__floatsidf>
10007a98:	9009883a 	mov	r4,r18
10007a9c:	800b883a 	mov	r5,r16
10007aa0:	100d883a 	mov	r6,r2
10007aa4:	180f883a 	mov	r7,r3
10007aa8:	8c400c04 	addi	r17,r17,48
10007aac:	00034dc0 	call	100034dc <__subdf3>
10007ab0:	ad400044 	addi	r21,r21,1
10007ab4:	ac7fffc5 	stb	r17,-1(r21)
10007ab8:	ad3fea1e 	bne	r21,r20,10007a64 <__alt_data_end+0xf8007a64>
10007abc:	1813883a 	mov	r9,r3
10007ac0:	d8c01017 	ldw	r3,64(sp)
10007ac4:	dc001317 	ldw	r16,76(sp)
10007ac8:	dc801417 	ldw	r18,80(sp)
10007acc:	1011883a 	mov	r8,r2
10007ad0:	b8ef883a 	add	r23,r23,r3
10007ad4:	d9000e17 	ldw	r4,56(sp)
10007ad8:	d9401117 	ldw	r5,68(sp)
10007adc:	000d883a 	mov	r6,zero
10007ae0:	01cff834 	movhi	r7,16352
10007ae4:	da001715 	stw	r8,92(sp)
10007ae8:	da401515 	stw	r9,84(sp)
10007aec:	0002c400 	call	10002c40 <__adddf3>
10007af0:	da001717 	ldw	r8,92(sp)
10007af4:	da401517 	ldw	r9,84(sp)
10007af8:	1009883a 	mov	r4,r2
10007afc:	400d883a 	mov	r6,r8
10007b00:	480f883a 	mov	r7,r9
10007b04:	180b883a 	mov	r5,r3
10007b08:	000df8c0 	call	1000df8c <__ledf2>
10007b0c:	da001717 	ldw	r8,92(sp)
10007b10:	da401517 	ldw	r9,84(sp)
10007b14:	10003b0e 	bge	r2,zero,10007c04 <_dtoa_r+0x15dc>
10007b18:	d9001217 	ldw	r4,72(sp)
10007b1c:	bd7fffc3 	ldbu	r21,-1(r23)
10007b20:	d9000515 	stw	r4,20(sp)
10007b24:	003d1c06 	br	10006f98 <__alt_data_end+0xf8006f98>
10007b28:	d8c00817 	ldw	r3,32(sp)
10007b2c:	18a9c83a 	sub	r20,r3,r2
10007b30:	0005883a 	mov	r2,zero
10007b34:	003d3706 	br	10007014 <__alt_data_end+0xf8007014>
10007b38:	00800044 	movi	r2,1
10007b3c:	003dd006 	br	10007280 <__alt_data_end+0xf8007280>
10007b40:	d8c00217 	ldw	r3,8(sp)
10007b44:	00800d84 	movi	r2,54
10007b48:	dd400917 	ldw	r21,36(sp)
10007b4c:	10c5c83a 	sub	r2,r2,r3
10007b50:	dd000817 	ldw	r20,32(sp)
10007b54:	003d2f06 	br	10007014 <__alt_data_end+0xf8007014>
10007b58:	9029883a 	mov	r20,r18
10007b5c:	982b883a 	mov	r21,r19
10007b60:	04400084 	movi	r17,2
10007b64:	003bc606 	br	10006a80 <__alt_data_end+0xf8006a80>
10007b68:	d8800617 	ldw	r2,24(sp)
10007b6c:	103efc26 	beq	r2,zero,10007760 <__alt_data_end+0xf8007760>
10007b70:	d8c00d17 	ldw	r3,52(sp)
10007b74:	00fc890e 	bge	zero,r3,10006d9c <__alt_data_end+0xf8006d9c>
10007b78:	a80b883a 	mov	r5,r21
10007b7c:	a009883a 	mov	r4,r20
10007b80:	000d883a 	mov	r6,zero
10007b84:	01d00934 	movhi	r7,16420
10007b88:	000e06c0 	call	1000e06c <__muldf3>
10007b8c:	89000044 	addi	r4,r17,1
10007b90:	1029883a 	mov	r20,r2
10007b94:	182b883a 	mov	r21,r3
10007b98:	0003e340 	call	10003e34 <__floatsidf>
10007b9c:	a009883a 	mov	r4,r20
10007ba0:	a80b883a 	mov	r5,r21
10007ba4:	100d883a 	mov	r6,r2
10007ba8:	180f883a 	mov	r7,r3
10007bac:	000e06c0 	call	1000e06c <__muldf3>
10007bb0:	1009883a 	mov	r4,r2
10007bb4:	180b883a 	mov	r5,r3
10007bb8:	000d883a 	mov	r6,zero
10007bbc:	01d00734 	movhi	r7,16412
10007bc0:	0002c400 	call	10002c40 <__adddf3>
10007bc4:	d9000517 	ldw	r4,20(sp)
10007bc8:	1023883a 	mov	r17,r2
10007bcc:	00bf3034 	movhi	r2,64704
10007bd0:	213fffc4 	addi	r4,r4,-1
10007bd4:	1885883a 	add	r2,r3,r2
10007bd8:	d9001215 	stw	r4,72(sp)
10007bdc:	d8800e15 	stw	r2,56(sp)
10007be0:	da800d17 	ldw	r10,52(sp)
10007be4:	003bc306 	br	10006af4 <__alt_data_end+0xf8006af4>
10007be8:	b039883a 	mov	fp,r22
10007bec:	01000e44 	movi	r4,57
10007bf0:	8825883a 	mov	r18,r17
10007bf4:	9dc00044 	addi	r23,r19,1
10007bf8:	99000005 	stb	r4,0(r19)
10007bfc:	a023883a 	mov	r17,r20
10007c00:	003dae06 	br	100072bc <__alt_data_end+0xf80072bc>
10007c04:	d9800e17 	ldw	r6,56(sp)
10007c08:	d9c01117 	ldw	r7,68(sp)
10007c0c:	0009883a 	mov	r4,zero
10007c10:	014ff834 	movhi	r5,16352
10007c14:	da001715 	stw	r8,92(sp)
10007c18:	da401515 	stw	r9,84(sp)
10007c1c:	00034dc0 	call	100034dc <__subdf3>
10007c20:	da001717 	ldw	r8,92(sp)
10007c24:	da401517 	ldw	r9,84(sp)
10007c28:	1009883a 	mov	r4,r2
10007c2c:	180b883a 	mov	r5,r3
10007c30:	400d883a 	mov	r6,r8
10007c34:	480f883a 	mov	r7,r9
10007c38:	000deac0 	call	1000deac <__gedf2>
10007c3c:	00bc570e 	bge	zero,r2,10006d9c <__alt_data_end+0xf8006d9c>
10007c40:	01000c04 	movi	r4,48
10007c44:	00000106 	br	10007c4c <_dtoa_r+0x1624>
10007c48:	102f883a 	mov	r23,r2
10007c4c:	b8bfffc4 	addi	r2,r23,-1
10007c50:	10c00007 	ldb	r3,0(r2)
10007c54:	193ffc26 	beq	r3,r4,10007c48 <__alt_data_end+0xf8007c48>
10007c58:	d9801217 	ldw	r6,72(sp)
10007c5c:	d9800515 	stw	r6,20(sp)
10007c60:	003c1f06 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10007c64:	d8801217 	ldw	r2,72(sp)
10007c68:	dc001117 	ldw	r16,68(sp)
10007c6c:	d8800515 	stw	r2,20(sp)
10007c70:	003cc906 	br	10006f98 <__alt_data_end+0xf8006f98>
10007c74:	dd801317 	ldw	r22,76(sp)
10007c78:	dc001117 	ldw	r16,68(sp)
10007c7c:	dcc01417 	ldw	r19,80(sp)
10007c80:	dc801017 	ldw	r18,64(sp)
10007c84:	003c4506 	br	10006d9c <__alt_data_end+0xf8006d9c>
10007c88:	103e5d1e 	bne	r2,zero,10007600 <__alt_data_end+0xf8007600>
10007c8c:	4080004c 	andi	r2,r8,1
10007c90:	103e5b26 	beq	r2,zero,10007600 <__alt_data_end+0xf8007600>
10007c94:	003e5706 	br	100075f4 <__alt_data_end+0xf80075f4>
10007c98:	d8c00317 	ldw	r3,12(sp)
10007c9c:	00800084 	movi	r2,2
10007ca0:	10c00a16 	blt	r2,r3,10007ccc <_dtoa_r+0x16a4>
10007ca4:	d9000d17 	ldw	r4,52(sp)
10007ca8:	003e8306 	br	100076b8 <__alt_data_end+0xf80076b8>
10007cac:	04400084 	movi	r17,2
10007cb0:	003b7306 	br	10006a80 <__alt_data_end+0xf8006a80>
10007cb4:	d9801217 	ldw	r6,72(sp)
10007cb8:	d9800515 	stw	r6,20(sp)
10007cbc:	003cb606 	br	10006f98 <__alt_data_end+0xf8006f98>
10007cc0:	d9001217 	ldw	r4,72(sp)
10007cc4:	d9000515 	stw	r4,20(sp)
10007cc8:	003c0506 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10007ccc:	d9800d17 	ldw	r6,52(sp)
10007cd0:	d9800615 	stw	r6,24(sp)
10007cd4:	003e8306 	br	100076e4 <__alt_data_end+0xf80076e4>
10007cd8:	d9800317 	ldw	r6,12(sp)
10007cdc:	00800084 	movi	r2,2
10007ce0:	11800216 	blt	r2,r6,10007cec <_dtoa_r+0x16c4>
10007ce4:	d8800d17 	ldw	r2,52(sp)
10007ce8:	003da606 	br	10007384 <__alt_data_end+0xf8007384>
10007cec:	d8800d17 	ldw	r2,52(sp)
10007cf0:	d8800615 	stw	r2,24(sp)
10007cf4:	003e7b06 	br	100076e4 <__alt_data_end+0xf80076e4>
10007cf8:	05000044 	movi	r20,1
10007cfc:	003b0506 	br	10006914 <__alt_data_end+0xf8006914>
10007d00:	8009883a 	mov	r4,r16
10007d04:	80001115 	stw	zero,68(r16)
10007d08:	000b883a 	mov	r5,zero
10007d0c:	0009c640 	call	10009c64 <_Balloc>
10007d10:	d8800715 	stw	r2,28(sp)
10007d14:	d8c00717 	ldw	r3,28(sp)
10007d18:	00bfffc4 	movi	r2,-1
10007d1c:	01000044 	movi	r4,1
10007d20:	d8800615 	stw	r2,24(sp)
10007d24:	80c01015 	stw	r3,64(r16)
10007d28:	d9000b15 	stw	r4,44(sp)
10007d2c:	d8002215 	stw	zero,136(sp)
10007d30:	d8800d15 	stw	r2,52(sp)
10007d34:	003c1906 	br	10006d9c <__alt_data_end+0xf8006d9c>
10007d38:	193d2926 	beq	r3,r4,100071e0 <__alt_data_end+0xf80071e0>
10007d3c:	00c00f04 	movi	r3,60
10007d40:	1885c83a 	sub	r2,r3,r2
10007d44:	003d7b06 	br	10007334 <__alt_data_end+0xf8007334>
10007d48:	000b883a 	mov	r5,zero
10007d4c:	003b1006 	br	10006990 <__alt_data_end+0xf8006990>

10007d50 <_fflush_r>:
10007d50:	defffb04 	addi	sp,sp,-20
10007d54:	dcc00315 	stw	r19,12(sp)
10007d58:	dc000015 	stw	r16,0(sp)
10007d5c:	dfc00415 	stw	ra,16(sp)
10007d60:	dc800215 	stw	r18,8(sp)
10007d64:	dc400115 	stw	r17,4(sp)
10007d68:	2027883a 	mov	r19,r4
10007d6c:	2821883a 	mov	r16,r5
10007d70:	20000226 	beq	r4,zero,10007d7c <_fflush_r+0x2c>
10007d74:	20800e17 	ldw	r2,56(r4)
10007d78:	10005326 	beq	r2,zero,10007ec8 <_fflush_r+0x178>
10007d7c:	8080030b 	ldhu	r2,12(r16)
10007d80:	10ffffcc 	andi	r3,r2,65535
10007d84:	18e0001c 	xori	r3,r3,32768
10007d88:	18e00004 	addi	r3,r3,-32768
10007d8c:	18002c26 	beq	r3,zero,10007e40 <_fflush_r+0xf0>
10007d90:	10c0020c 	andi	r3,r2,8
10007d94:	1800321e 	bne	r3,zero,10007e60 <_fflush_r+0x110>
10007d98:	80c00117 	ldw	r3,4(r16)
10007d9c:	10820014 	ori	r2,r2,2048
10007da0:	8080030d 	sth	r2,12(r16)
10007da4:	00c0570e 	bge	zero,r3,10007f04 <_fflush_r+0x1b4>
10007da8:	82000a17 	ldw	r8,40(r16)
10007dac:	40002426 	beq	r8,zero,10007e40 <_fflush_r+0xf0>
10007db0:	9c400017 	ldw	r17,0(r19)
10007db4:	10c4000c 	andi	r3,r2,4096
10007db8:	98000015 	stw	zero,0(r19)
10007dbc:	18004626 	beq	r3,zero,10007ed8 <_fflush_r+0x188>
10007dc0:	81801417 	ldw	r6,80(r16)
10007dc4:	10c0010c 	andi	r3,r2,4
10007dc8:	18000626 	beq	r3,zero,10007de4 <_fflush_r+0x94>
10007dcc:	80c00117 	ldw	r3,4(r16)
10007dd0:	80800c17 	ldw	r2,48(r16)
10007dd4:	30cdc83a 	sub	r6,r6,r3
10007dd8:	10000226 	beq	r2,zero,10007de4 <_fflush_r+0x94>
10007ddc:	80800f17 	ldw	r2,60(r16)
10007de0:	308dc83a 	sub	r6,r6,r2
10007de4:	81400717 	ldw	r5,28(r16)
10007de8:	9809883a 	mov	r4,r19
10007dec:	000f883a 	mov	r7,zero
10007df0:	403ee83a 	callr	r8
10007df4:	00ffffc4 	movi	r3,-1
10007df8:	10c04526 	beq	r2,r3,10007f10 <_fflush_r+0x1c0>
10007dfc:	80c0030b 	ldhu	r3,12(r16)
10007e00:	81000417 	ldw	r4,16(r16)
10007e04:	80000115 	stw	zero,4(r16)
10007e08:	197dffcc 	andi	r5,r3,63487
10007e0c:	8140030d 	sth	r5,12(r16)
10007e10:	81000015 	stw	r4,0(r16)
10007e14:	18c4000c 	andi	r3,r3,4096
10007e18:	18000126 	beq	r3,zero,10007e20 <_fflush_r+0xd0>
10007e1c:	80801415 	stw	r2,80(r16)
10007e20:	81400c17 	ldw	r5,48(r16)
10007e24:	9c400015 	stw	r17,0(r19)
10007e28:	28000526 	beq	r5,zero,10007e40 <_fflush_r+0xf0>
10007e2c:	80801004 	addi	r2,r16,64
10007e30:	28800226 	beq	r5,r2,10007e3c <_fflush_r+0xec>
10007e34:	9809883a 	mov	r4,r19
10007e38:	00084800 	call	10008480 <_free_r>
10007e3c:	80000c15 	stw	zero,48(r16)
10007e40:	0005883a 	mov	r2,zero
10007e44:	dfc00417 	ldw	ra,16(sp)
10007e48:	dcc00317 	ldw	r19,12(sp)
10007e4c:	dc800217 	ldw	r18,8(sp)
10007e50:	dc400117 	ldw	r17,4(sp)
10007e54:	dc000017 	ldw	r16,0(sp)
10007e58:	dec00504 	addi	sp,sp,20
10007e5c:	f800283a 	ret
10007e60:	84800417 	ldw	r18,16(r16)
10007e64:	903ff626 	beq	r18,zero,10007e40 <__alt_data_end+0xf8007e40>
10007e68:	84400017 	ldw	r17,0(r16)
10007e6c:	108000cc 	andi	r2,r2,3
10007e70:	84800015 	stw	r18,0(r16)
10007e74:	8ca3c83a 	sub	r17,r17,r18
10007e78:	10001526 	beq	r2,zero,10007ed0 <_fflush_r+0x180>
10007e7c:	0005883a 	mov	r2,zero
10007e80:	80800215 	stw	r2,8(r16)
10007e84:	04400316 	blt	zero,r17,10007e94 <_fflush_r+0x144>
10007e88:	003fed06 	br	10007e40 <__alt_data_end+0xf8007e40>
10007e8c:	90a5883a 	add	r18,r18,r2
10007e90:	047feb0e 	bge	zero,r17,10007e40 <__alt_data_end+0xf8007e40>
10007e94:	80800917 	ldw	r2,36(r16)
10007e98:	81400717 	ldw	r5,28(r16)
10007e9c:	880f883a 	mov	r7,r17
10007ea0:	900d883a 	mov	r6,r18
10007ea4:	9809883a 	mov	r4,r19
10007ea8:	103ee83a 	callr	r2
10007eac:	88a3c83a 	sub	r17,r17,r2
10007eb0:	00bff616 	blt	zero,r2,10007e8c <__alt_data_end+0xf8007e8c>
10007eb4:	80c0030b 	ldhu	r3,12(r16)
10007eb8:	00bfffc4 	movi	r2,-1
10007ebc:	18c01014 	ori	r3,r3,64
10007ec0:	80c0030d 	sth	r3,12(r16)
10007ec4:	003fdf06 	br	10007e44 <__alt_data_end+0xf8007e44>
10007ec8:	000830c0 	call	1000830c <__sinit>
10007ecc:	003fab06 	br	10007d7c <__alt_data_end+0xf8007d7c>
10007ed0:	80800517 	ldw	r2,20(r16)
10007ed4:	003fea06 	br	10007e80 <__alt_data_end+0xf8007e80>
10007ed8:	81400717 	ldw	r5,28(r16)
10007edc:	000d883a 	mov	r6,zero
10007ee0:	9809883a 	mov	r4,r19
10007ee4:	01c00044 	movi	r7,1
10007ee8:	403ee83a 	callr	r8
10007eec:	100d883a 	mov	r6,r2
10007ef0:	00bfffc4 	movi	r2,-1
10007ef4:	30801326 	beq	r6,r2,10007f44 <_fflush_r+0x1f4>
10007ef8:	8080030b 	ldhu	r2,12(r16)
10007efc:	82000a17 	ldw	r8,40(r16)
10007f00:	003fb006 	br	10007dc4 <__alt_data_end+0xf8007dc4>
10007f04:	80c00f17 	ldw	r3,60(r16)
10007f08:	00ffa716 	blt	zero,r3,10007da8 <__alt_data_end+0xf8007da8>
10007f0c:	003fcc06 	br	10007e40 <__alt_data_end+0xf8007e40>
10007f10:	98c00017 	ldw	r3,0(r19)
10007f14:	183fb926 	beq	r3,zero,10007dfc <__alt_data_end+0xf8007dfc>
10007f18:	01000744 	movi	r4,29
10007f1c:	19000226 	beq	r3,r4,10007f28 <_fflush_r+0x1d8>
10007f20:	01000584 	movi	r4,22
10007f24:	1900101e 	bne	r3,r4,10007f68 <_fflush_r+0x218>
10007f28:	8080030b 	ldhu	r2,12(r16)
10007f2c:	80c00417 	ldw	r3,16(r16)
10007f30:	80000115 	stw	zero,4(r16)
10007f34:	10bdffcc 	andi	r2,r2,63487
10007f38:	8080030d 	sth	r2,12(r16)
10007f3c:	80c00015 	stw	r3,0(r16)
10007f40:	003fb706 	br	10007e20 <__alt_data_end+0xf8007e20>
10007f44:	98800017 	ldw	r2,0(r19)
10007f48:	103feb26 	beq	r2,zero,10007ef8 <__alt_data_end+0xf8007ef8>
10007f4c:	00c00744 	movi	r3,29
10007f50:	10c00226 	beq	r2,r3,10007f5c <_fflush_r+0x20c>
10007f54:	00c00584 	movi	r3,22
10007f58:	10ffd61e 	bne	r2,r3,10007eb4 <__alt_data_end+0xf8007eb4>
10007f5c:	9c400015 	stw	r17,0(r19)
10007f60:	0005883a 	mov	r2,zero
10007f64:	003fb706 	br	10007e44 <__alt_data_end+0xf8007e44>
10007f68:	80c0030b 	ldhu	r3,12(r16)
10007f6c:	18c01014 	ori	r3,r3,64
10007f70:	80c0030d 	sth	r3,12(r16)
10007f74:	003fb306 	br	10007e44 <__alt_data_end+0xf8007e44>

10007f78 <fflush>:
10007f78:	20000526 	beq	r4,zero,10007f90 <fflush+0x18>
10007f7c:	00840074 	movhi	r2,4097
10007f80:	108bd104 	addi	r2,r2,12100
10007f84:	200b883a 	mov	r5,r4
10007f88:	11000017 	ldw	r4,0(r2)
10007f8c:	0007d501 	jmpi	10007d50 <_fflush_r>
10007f90:	00840074 	movhi	r2,4097
10007f94:	108bd004 	addi	r2,r2,12096
10007f98:	11000017 	ldw	r4,0(r2)
10007f9c:	01440034 	movhi	r5,4096
10007fa0:	295f5404 	addi	r5,r5,32080
10007fa4:	0008ccc1 	jmpi	10008ccc <_fwalk_reent>

10007fa8 <__fp_lock>:
10007fa8:	0005883a 	mov	r2,zero
10007fac:	f800283a 	ret

10007fb0 <__fp_unlock>:
10007fb0:	0005883a 	mov	r2,zero
10007fb4:	f800283a 	ret

10007fb8 <_cleanup_r>:
10007fb8:	01440074 	movhi	r5,4097
10007fbc:	29733604 	addi	r5,r5,-13096
10007fc0:	0008c141 	jmpi	10008c14 <_fwalk>

10007fc4 <__sinit.part.1>:
10007fc4:	defff604 	addi	sp,sp,-40
10007fc8:	00c40034 	movhi	r3,4096
10007fcc:	dfc00915 	stw	ra,36(sp)
10007fd0:	df000815 	stw	fp,32(sp)
10007fd4:	ddc00715 	stw	r23,28(sp)
10007fd8:	dd800615 	stw	r22,24(sp)
10007fdc:	dd400515 	stw	r21,20(sp)
10007fe0:	dd000415 	stw	r20,16(sp)
10007fe4:	dcc00315 	stw	r19,12(sp)
10007fe8:	dc800215 	stw	r18,8(sp)
10007fec:	dc400115 	stw	r17,4(sp)
10007ff0:	dc000015 	stw	r16,0(sp)
10007ff4:	18dfee04 	addi	r3,r3,32696
10007ff8:	24000117 	ldw	r16,4(r4)
10007ffc:	20c00f15 	stw	r3,60(r4)
10008000:	07000044 	movi	fp,1
10008004:	00c000c4 	movi	r3,3
10008008:	2080bb04 	addi	r2,r4,748
1000800c:	20c0b915 	stw	r3,740(r4)
10008010:	27000e15 	stw	fp,56(r4)
10008014:	2080ba15 	stw	r2,744(r4)
10008018:	2000b815 	stw	zero,736(r4)
1000801c:	05c00204 	movi	r23,8
10008020:	00800104 	movi	r2,4
10008024:	2025883a 	mov	r18,r4
10008028:	b80d883a 	mov	r6,r23
1000802c:	81001704 	addi	r4,r16,92
10008030:	000b883a 	mov	r5,zero
10008034:	80000015 	stw	zero,0(r16)
10008038:	80000115 	stw	zero,4(r16)
1000803c:	80000215 	stw	zero,8(r16)
10008040:	8080030d 	sth	r2,12(r16)
10008044:	80001915 	stw	zero,100(r16)
10008048:	8000038d 	sth	zero,14(r16)
1000804c:	80000415 	stw	zero,16(r16)
10008050:	80000515 	stw	zero,20(r16)
10008054:	80000615 	stw	zero,24(r16)
10008058:	0009b400 	call	10009b40 <memset>
1000805c:	05840074 	movhi	r22,4097
10008060:	94400217 	ldw	r17,8(r18)
10008064:	05440074 	movhi	r21,4097
10008068:	05040074 	movhi	r20,4097
1000806c:	04c40074 	movhi	r19,4097
10008070:	b5acc504 	addi	r22,r22,-19692
10008074:	ad6cdc04 	addi	r21,r21,-19600
10008078:	a52cfb04 	addi	r20,r20,-19476
1000807c:	9ced1204 	addi	r19,r19,-19384
10008080:	85800815 	stw	r22,32(r16)
10008084:	85400915 	stw	r21,36(r16)
10008088:	85000a15 	stw	r20,40(r16)
1000808c:	84c00b15 	stw	r19,44(r16)
10008090:	84000715 	stw	r16,28(r16)
10008094:	00800284 	movi	r2,10
10008098:	89001704 	addi	r4,r17,92
1000809c:	b80d883a 	mov	r6,r23
100080a0:	000b883a 	mov	r5,zero
100080a4:	88000015 	stw	zero,0(r17)
100080a8:	88000115 	stw	zero,4(r17)
100080ac:	88000215 	stw	zero,8(r17)
100080b0:	8880030d 	sth	r2,12(r17)
100080b4:	88001915 	stw	zero,100(r17)
100080b8:	8f00038d 	sth	fp,14(r17)
100080bc:	88000415 	stw	zero,16(r17)
100080c0:	88000515 	stw	zero,20(r17)
100080c4:	88000615 	stw	zero,24(r17)
100080c8:	0009b400 	call	10009b40 <memset>
100080cc:	94000317 	ldw	r16,12(r18)
100080d0:	00800484 	movi	r2,18
100080d4:	8c400715 	stw	r17,28(r17)
100080d8:	8d800815 	stw	r22,32(r17)
100080dc:	8d400915 	stw	r21,36(r17)
100080e0:	8d000a15 	stw	r20,40(r17)
100080e4:	8cc00b15 	stw	r19,44(r17)
100080e8:	8080030d 	sth	r2,12(r16)
100080ec:	00800084 	movi	r2,2
100080f0:	80000015 	stw	zero,0(r16)
100080f4:	80000115 	stw	zero,4(r16)
100080f8:	80000215 	stw	zero,8(r16)
100080fc:	80001915 	stw	zero,100(r16)
10008100:	8080038d 	sth	r2,14(r16)
10008104:	80000415 	stw	zero,16(r16)
10008108:	80000515 	stw	zero,20(r16)
1000810c:	80000615 	stw	zero,24(r16)
10008110:	81001704 	addi	r4,r16,92
10008114:	000b883a 	mov	r5,zero
10008118:	b80d883a 	mov	r6,r23
1000811c:	0009b400 	call	10009b40 <memset>
10008120:	84000715 	stw	r16,28(r16)
10008124:	85800815 	stw	r22,32(r16)
10008128:	85400915 	stw	r21,36(r16)
1000812c:	85000a15 	stw	r20,40(r16)
10008130:	84c00b15 	stw	r19,44(r16)
10008134:	dfc00917 	ldw	ra,36(sp)
10008138:	df000817 	ldw	fp,32(sp)
1000813c:	ddc00717 	ldw	r23,28(sp)
10008140:	dd800617 	ldw	r22,24(sp)
10008144:	dd400517 	ldw	r21,20(sp)
10008148:	dd000417 	ldw	r20,16(sp)
1000814c:	dcc00317 	ldw	r19,12(sp)
10008150:	dc800217 	ldw	r18,8(sp)
10008154:	dc400117 	ldw	r17,4(sp)
10008158:	dc000017 	ldw	r16,0(sp)
1000815c:	dec00a04 	addi	sp,sp,40
10008160:	f800283a 	ret

10008164 <__sfmoreglue>:
10008164:	defffc04 	addi	sp,sp,-16
10008168:	dc800215 	stw	r18,8(sp)
1000816c:	2825883a 	mov	r18,r5
10008170:	dc000015 	stw	r16,0(sp)
10008174:	01401a04 	movi	r5,104
10008178:	2021883a 	mov	r16,r4
1000817c:	9009883a 	mov	r4,r18
10008180:	dfc00315 	stw	ra,12(sp)
10008184:	dc400115 	stw	r17,4(sp)
10008188:	0002c180 	call	10002c18 <__mulsi3>
1000818c:	8009883a 	mov	r4,r16
10008190:	11400304 	addi	r5,r2,12
10008194:	1023883a 	mov	r17,r2
10008198:	000901c0 	call	1000901c <_malloc_r>
1000819c:	1021883a 	mov	r16,r2
100081a0:	10000726 	beq	r2,zero,100081c0 <__sfmoreglue+0x5c>
100081a4:	11000304 	addi	r4,r2,12
100081a8:	10000015 	stw	zero,0(r2)
100081ac:	14800115 	stw	r18,4(r2)
100081b0:	11000215 	stw	r4,8(r2)
100081b4:	000b883a 	mov	r5,zero
100081b8:	880d883a 	mov	r6,r17
100081bc:	0009b400 	call	10009b40 <memset>
100081c0:	8005883a 	mov	r2,r16
100081c4:	dfc00317 	ldw	ra,12(sp)
100081c8:	dc800217 	ldw	r18,8(sp)
100081cc:	dc400117 	ldw	r17,4(sp)
100081d0:	dc000017 	ldw	r16,0(sp)
100081d4:	dec00404 	addi	sp,sp,16
100081d8:	f800283a 	ret

100081dc <__sfp>:
100081dc:	00840074 	movhi	r2,4097
100081e0:	defffb04 	addi	sp,sp,-20
100081e4:	108bd004 	addi	r2,r2,12096
100081e8:	dc800215 	stw	r18,8(sp)
100081ec:	14800017 	ldw	r18,0(r2)
100081f0:	dcc00315 	stw	r19,12(sp)
100081f4:	dfc00415 	stw	ra,16(sp)
100081f8:	90800e17 	ldw	r2,56(r18)
100081fc:	dc400115 	stw	r17,4(sp)
10008200:	dc000015 	stw	r16,0(sp)
10008204:	2027883a 	mov	r19,r4
10008208:	1000021e 	bne	r2,zero,10008214 <__sfp+0x38>
1000820c:	9009883a 	mov	r4,r18
10008210:	0007fc40 	call	10007fc4 <__sinit.part.1>
10008214:	9480b804 	addi	r18,r18,736
10008218:	047fffc4 	movi	r17,-1
1000821c:	91400117 	ldw	r5,4(r18)
10008220:	94000217 	ldw	r16,8(r18)
10008224:	297fffc4 	addi	r5,r5,-1
10008228:	28000a16 	blt	r5,zero,10008254 <__sfp+0x78>
1000822c:	8080030f 	ldh	r2,12(r16)
10008230:	10000c26 	beq	r2,zero,10008264 <__sfp+0x88>
10008234:	80c01d04 	addi	r3,r16,116
10008238:	00000206 	br	10008244 <__sfp+0x68>
1000823c:	18bfe60f 	ldh	r2,-104(r3)
10008240:	10000826 	beq	r2,zero,10008264 <__sfp+0x88>
10008244:	297fffc4 	addi	r5,r5,-1
10008248:	1c3ffd04 	addi	r16,r3,-12
1000824c:	18c01a04 	addi	r3,r3,104
10008250:	2c7ffa1e 	bne	r5,r17,1000823c <__alt_data_end+0xf800823c>
10008254:	90800017 	ldw	r2,0(r18)
10008258:	10001d26 	beq	r2,zero,100082d0 <__sfp+0xf4>
1000825c:	1025883a 	mov	r18,r2
10008260:	003fee06 	br	1000821c <__alt_data_end+0xf800821c>
10008264:	00bfffc4 	movi	r2,-1
10008268:	8080038d 	sth	r2,14(r16)
1000826c:	00800044 	movi	r2,1
10008270:	8080030d 	sth	r2,12(r16)
10008274:	80001915 	stw	zero,100(r16)
10008278:	80000015 	stw	zero,0(r16)
1000827c:	80000215 	stw	zero,8(r16)
10008280:	80000115 	stw	zero,4(r16)
10008284:	80000415 	stw	zero,16(r16)
10008288:	80000515 	stw	zero,20(r16)
1000828c:	80000615 	stw	zero,24(r16)
10008290:	81001704 	addi	r4,r16,92
10008294:	000b883a 	mov	r5,zero
10008298:	01800204 	movi	r6,8
1000829c:	0009b400 	call	10009b40 <memset>
100082a0:	8005883a 	mov	r2,r16
100082a4:	80000c15 	stw	zero,48(r16)
100082a8:	80000d15 	stw	zero,52(r16)
100082ac:	80001115 	stw	zero,68(r16)
100082b0:	80001215 	stw	zero,72(r16)
100082b4:	dfc00417 	ldw	ra,16(sp)
100082b8:	dcc00317 	ldw	r19,12(sp)
100082bc:	dc800217 	ldw	r18,8(sp)
100082c0:	dc400117 	ldw	r17,4(sp)
100082c4:	dc000017 	ldw	r16,0(sp)
100082c8:	dec00504 	addi	sp,sp,20
100082cc:	f800283a 	ret
100082d0:	9809883a 	mov	r4,r19
100082d4:	01400104 	movi	r5,4
100082d8:	00081640 	call	10008164 <__sfmoreglue>
100082dc:	90800015 	stw	r2,0(r18)
100082e0:	103fde1e 	bne	r2,zero,1000825c <__alt_data_end+0xf800825c>
100082e4:	00800304 	movi	r2,12
100082e8:	98800015 	stw	r2,0(r19)
100082ec:	0005883a 	mov	r2,zero
100082f0:	003ff006 	br	100082b4 <__alt_data_end+0xf80082b4>

100082f4 <_cleanup>:
100082f4:	00840074 	movhi	r2,4097
100082f8:	108bd004 	addi	r2,r2,12096
100082fc:	11000017 	ldw	r4,0(r2)
10008300:	01440074 	movhi	r5,4097
10008304:	29733604 	addi	r5,r5,-13096
10008308:	0008c141 	jmpi	10008c14 <_fwalk>

1000830c <__sinit>:
1000830c:	20800e17 	ldw	r2,56(r4)
10008310:	10000126 	beq	r2,zero,10008318 <__sinit+0xc>
10008314:	f800283a 	ret
10008318:	0007fc41 	jmpi	10007fc4 <__sinit.part.1>

1000831c <__sfp_lock_acquire>:
1000831c:	f800283a 	ret

10008320 <__sfp_lock_release>:
10008320:	f800283a 	ret

10008324 <__sinit_lock_acquire>:
10008324:	f800283a 	ret

10008328 <__sinit_lock_release>:
10008328:	f800283a 	ret

1000832c <__fp_lock_all>:
1000832c:	00840074 	movhi	r2,4097
10008330:	108bd104 	addi	r2,r2,12100
10008334:	11000017 	ldw	r4,0(r2)
10008338:	01440034 	movhi	r5,4096
1000833c:	295fea04 	addi	r5,r5,32680
10008340:	0008c141 	jmpi	10008c14 <_fwalk>

10008344 <__fp_unlock_all>:
10008344:	00840074 	movhi	r2,4097
10008348:	108bd104 	addi	r2,r2,12100
1000834c:	11000017 	ldw	r4,0(r2)
10008350:	01440034 	movhi	r5,4096
10008354:	295fec04 	addi	r5,r5,32688
10008358:	0008c141 	jmpi	10008c14 <_fwalk>

1000835c <_malloc_trim_r>:
1000835c:	defffb04 	addi	sp,sp,-20
10008360:	dcc00315 	stw	r19,12(sp)
10008364:	04c40074 	movhi	r19,4097
10008368:	dc800215 	stw	r18,8(sp)
1000836c:	dc400115 	stw	r17,4(sp)
10008370:	dc000015 	stw	r16,0(sp)
10008374:	dfc00415 	stw	ra,16(sp)
10008378:	2821883a 	mov	r16,r5
1000837c:	9cc64c04 	addi	r19,r19,6448
10008380:	2025883a 	mov	r18,r4
10008384:	000ef5c0 	call	1000ef5c <__malloc_lock>
10008388:	98800217 	ldw	r2,8(r19)
1000838c:	14400117 	ldw	r17,4(r2)
10008390:	00bfff04 	movi	r2,-4
10008394:	88a2703a 	and	r17,r17,r2
10008398:	8c21c83a 	sub	r16,r17,r16
1000839c:	8403fbc4 	addi	r16,r16,4079
100083a0:	8020d33a 	srli	r16,r16,12
100083a4:	0083ffc4 	movi	r2,4095
100083a8:	843fffc4 	addi	r16,r16,-1
100083ac:	8020933a 	slli	r16,r16,12
100083b0:	1400060e 	bge	r2,r16,100083cc <_malloc_trim_r+0x70>
100083b4:	9009883a 	mov	r4,r18
100083b8:	000b883a 	mov	r5,zero
100083bc:	000b2c00 	call	1000b2c0 <_sbrk_r>
100083c0:	98c00217 	ldw	r3,8(r19)
100083c4:	1c47883a 	add	r3,r3,r17
100083c8:	10c00a26 	beq	r2,r3,100083f4 <_malloc_trim_r+0x98>
100083cc:	9009883a 	mov	r4,r18
100083d0:	000ef7c0 	call	1000ef7c <__malloc_unlock>
100083d4:	0005883a 	mov	r2,zero
100083d8:	dfc00417 	ldw	ra,16(sp)
100083dc:	dcc00317 	ldw	r19,12(sp)
100083e0:	dc800217 	ldw	r18,8(sp)
100083e4:	dc400117 	ldw	r17,4(sp)
100083e8:	dc000017 	ldw	r16,0(sp)
100083ec:	dec00504 	addi	sp,sp,20
100083f0:	f800283a 	ret
100083f4:	9009883a 	mov	r4,r18
100083f8:	040bc83a 	sub	r5,zero,r16
100083fc:	000b2c00 	call	1000b2c0 <_sbrk_r>
10008400:	00ffffc4 	movi	r3,-1
10008404:	10c00d26 	beq	r2,r3,1000843c <_malloc_trim_r+0xe0>
10008408:	00c40074 	movhi	r3,4097
1000840c:	18d2b804 	addi	r3,r3,19168
10008410:	18800017 	ldw	r2,0(r3)
10008414:	99000217 	ldw	r4,8(r19)
10008418:	8c23c83a 	sub	r17,r17,r16
1000841c:	8c400054 	ori	r17,r17,1
10008420:	1421c83a 	sub	r16,r2,r16
10008424:	24400115 	stw	r17,4(r4)
10008428:	9009883a 	mov	r4,r18
1000842c:	1c000015 	stw	r16,0(r3)
10008430:	000ef7c0 	call	1000ef7c <__malloc_unlock>
10008434:	00800044 	movi	r2,1
10008438:	003fe706 	br	100083d8 <__alt_data_end+0xf80083d8>
1000843c:	9009883a 	mov	r4,r18
10008440:	000b883a 	mov	r5,zero
10008444:	000b2c00 	call	1000b2c0 <_sbrk_r>
10008448:	99000217 	ldw	r4,8(r19)
1000844c:	014003c4 	movi	r5,15
10008450:	1107c83a 	sub	r3,r2,r4
10008454:	28ffdd0e 	bge	r5,r3,100083cc <__alt_data_end+0xf80083cc>
10008458:	01440074 	movhi	r5,4097
1000845c:	294bd304 	addi	r5,r5,12108
10008460:	29400017 	ldw	r5,0(r5)
10008464:	18c00054 	ori	r3,r3,1
10008468:	20c00115 	stw	r3,4(r4)
1000846c:	00c40074 	movhi	r3,4097
10008470:	1145c83a 	sub	r2,r2,r5
10008474:	18d2b804 	addi	r3,r3,19168
10008478:	18800015 	stw	r2,0(r3)
1000847c:	003fd306 	br	100083cc <__alt_data_end+0xf80083cc>

10008480 <_free_r>:
10008480:	28004c26 	beq	r5,zero,100085b4 <_free_r+0x134>
10008484:	defffd04 	addi	sp,sp,-12
10008488:	dc400115 	stw	r17,4(sp)
1000848c:	dc000015 	stw	r16,0(sp)
10008490:	2023883a 	mov	r17,r4
10008494:	2821883a 	mov	r16,r5
10008498:	dfc00215 	stw	ra,8(sp)
1000849c:	000ef5c0 	call	1000ef5c <__malloc_lock>
100084a0:	813fff17 	ldw	r4,-4(r16)
100084a4:	00bfff84 	movi	r2,-2
100084a8:	02440074 	movhi	r9,4097
100084ac:	81bffe04 	addi	r6,r16,-8
100084b0:	2084703a 	and	r2,r4,r2
100084b4:	4a464c04 	addi	r9,r9,6448
100084b8:	308b883a 	add	r5,r6,r2
100084bc:	2a000117 	ldw	r8,4(r5)
100084c0:	49c00217 	ldw	r7,8(r9)
100084c4:	00ffff04 	movi	r3,-4
100084c8:	40c6703a 	and	r3,r8,r3
100084cc:	39405326 	beq	r7,r5,1000861c <_free_r+0x19c>
100084d0:	28c00115 	stw	r3,4(r5)
100084d4:	2100004c 	andi	r4,r4,1
100084d8:	2000091e 	bne	r4,zero,10008500 <_free_r+0x80>
100084dc:	81fffe17 	ldw	r7,-8(r16)
100084e0:	4a000204 	addi	r8,r9,8
100084e4:	31cdc83a 	sub	r6,r6,r7
100084e8:	31000217 	ldw	r4,8(r6)
100084ec:	11c5883a 	add	r2,r2,r7
100084f0:	22006126 	beq	r4,r8,10008678 <_free_r+0x1f8>
100084f4:	31c00317 	ldw	r7,12(r6)
100084f8:	21c00315 	stw	r7,12(r4)
100084fc:	39000215 	stw	r4,8(r7)
10008500:	28c9883a 	add	r4,r5,r3
10008504:	21c00117 	ldw	r7,4(r4)
10008508:	39c0004c 	andi	r7,r7,1
1000850c:	38000d1e 	bne	r7,zero,10008544 <_free_r+0xc4>
10008510:	29000217 	ldw	r4,8(r5)
10008514:	10c5883a 	add	r2,r2,r3
10008518:	00c40074 	movhi	r3,4097
1000851c:	18c64e04 	addi	r3,r3,6456
10008520:	20c07526 	beq	r4,r3,100086f8 <_free_r+0x278>
10008524:	29c00317 	ldw	r7,12(r5)
10008528:	11400054 	ori	r5,r2,1
1000852c:	3087883a 	add	r3,r6,r2
10008530:	21c00315 	stw	r7,12(r4)
10008534:	39000215 	stw	r4,8(r7)
10008538:	31400115 	stw	r5,4(r6)
1000853c:	18800015 	stw	r2,0(r3)
10008540:	00000406 	br	10008554 <_free_r+0xd4>
10008544:	10c00054 	ori	r3,r2,1
10008548:	30c00115 	stw	r3,4(r6)
1000854c:	3087883a 	add	r3,r6,r2
10008550:	18800015 	stw	r2,0(r3)
10008554:	00c07fc4 	movi	r3,511
10008558:	18801736 	bltu	r3,r2,100085b8 <_free_r+0x138>
1000855c:	1004d0fa 	srli	r2,r2,3
10008560:	01400044 	movi	r5,1
10008564:	49000117 	ldw	r4,4(r9)
10008568:	1087883a 	add	r3,r2,r2
1000856c:	18c7883a 	add	r3,r3,r3
10008570:	1005d0ba 	srai	r2,r2,2
10008574:	18c7883a 	add	r3,r3,r3
10008578:	1a47883a 	add	r3,r3,r9
1000857c:	19c00217 	ldw	r7,8(r3)
10008580:	2884983a 	sll	r2,r5,r2
10008584:	30c00315 	stw	r3,12(r6)
10008588:	31c00215 	stw	r7,8(r6)
1000858c:	1104b03a 	or	r2,r2,r4
10008590:	19800215 	stw	r6,8(r3)
10008594:	48800115 	stw	r2,4(r9)
10008598:	39800315 	stw	r6,12(r7)
1000859c:	8809883a 	mov	r4,r17
100085a0:	dfc00217 	ldw	ra,8(sp)
100085a4:	dc400117 	ldw	r17,4(sp)
100085a8:	dc000017 	ldw	r16,0(sp)
100085ac:	dec00304 	addi	sp,sp,12
100085b0:	000ef7c1 	jmpi	1000ef7c <__malloc_unlock>
100085b4:	f800283a 	ret
100085b8:	1006d27a 	srli	r3,r2,9
100085bc:	01000104 	movi	r4,4
100085c0:	20c04036 	bltu	r4,r3,100086c4 <_free_r+0x244>
100085c4:	1006d1ba 	srli	r3,r2,6
100085c8:	19400e04 	addi	r5,r3,56
100085cc:	2947883a 	add	r3,r5,r5
100085d0:	18c7883a 	add	r3,r3,r3
100085d4:	18c7883a 	add	r3,r3,r3
100085d8:	1a49883a 	add	r4,r3,r9
100085dc:	20c00217 	ldw	r3,8(r4)
100085e0:	01c40074 	movhi	r7,4097
100085e4:	39c64c04 	addi	r7,r7,6448
100085e8:	19003b26 	beq	r3,r4,100086d8 <_free_r+0x258>
100085ec:	01ffff04 	movi	r7,-4
100085f0:	19400117 	ldw	r5,4(r3)
100085f4:	29ca703a 	and	r5,r5,r7
100085f8:	1140022e 	bgeu	r2,r5,10008604 <_free_r+0x184>
100085fc:	18c00217 	ldw	r3,8(r3)
10008600:	20fffb1e 	bne	r4,r3,100085f0 <__alt_data_end+0xf80085f0>
10008604:	18800317 	ldw	r2,12(r3)
10008608:	30800315 	stw	r2,12(r6)
1000860c:	30c00215 	stw	r3,8(r6)
10008610:	11800215 	stw	r6,8(r2)
10008614:	19800315 	stw	r6,12(r3)
10008618:	003fe006 	br	1000859c <__alt_data_end+0xf800859c>
1000861c:	2100004c 	andi	r4,r4,1
10008620:	1885883a 	add	r2,r3,r2
10008624:	2000071e 	bne	r4,zero,10008644 <_free_r+0x1c4>
10008628:	817ffe17 	ldw	r5,-8(r16)
1000862c:	314dc83a 	sub	r6,r6,r5
10008630:	30c00317 	ldw	r3,12(r6)
10008634:	31000217 	ldw	r4,8(r6)
10008638:	1145883a 	add	r2,r2,r5
1000863c:	20c00315 	stw	r3,12(r4)
10008640:	19000215 	stw	r4,8(r3)
10008644:	10c00054 	ori	r3,r2,1
10008648:	30c00115 	stw	r3,4(r6)
1000864c:	00c40074 	movhi	r3,4097
10008650:	18cbd404 	addi	r3,r3,12112
10008654:	18c00017 	ldw	r3,0(r3)
10008658:	49800215 	stw	r6,8(r9)
1000865c:	10ffcf36 	bltu	r2,r3,1000859c <__alt_data_end+0xf800859c>
10008660:	00840074 	movhi	r2,4097
10008664:	1092af04 	addi	r2,r2,19132
10008668:	11400017 	ldw	r5,0(r2)
1000866c:	8809883a 	mov	r4,r17
10008670:	000835c0 	call	1000835c <_malloc_trim_r>
10008674:	003fc906 	br	1000859c <__alt_data_end+0xf800859c>
10008678:	28c9883a 	add	r4,r5,r3
1000867c:	21000117 	ldw	r4,4(r4)
10008680:	2100004c 	andi	r4,r4,1
10008684:	20000a1e 	bne	r4,zero,100086b0 <_free_r+0x230>
10008688:	29000317 	ldw	r4,12(r5)
1000868c:	29400217 	ldw	r5,8(r5)
10008690:	10c5883a 	add	r2,r2,r3
10008694:	10c00054 	ori	r3,r2,1
10008698:	29000315 	stw	r4,12(r5)
1000869c:	21400215 	stw	r5,8(r4)
100086a0:	30c00115 	stw	r3,4(r6)
100086a4:	308d883a 	add	r6,r6,r2
100086a8:	30800015 	stw	r2,0(r6)
100086ac:	003fbb06 	br	1000859c <__alt_data_end+0xf800859c>
100086b0:	10c00054 	ori	r3,r2,1
100086b4:	30c00115 	stw	r3,4(r6)
100086b8:	308d883a 	add	r6,r6,r2
100086bc:	30800015 	stw	r2,0(r6)
100086c0:	003fb606 	br	1000859c <__alt_data_end+0xf800859c>
100086c4:	01000504 	movi	r4,20
100086c8:	20c01436 	bltu	r4,r3,1000871c <_free_r+0x29c>
100086cc:	194016c4 	addi	r5,r3,91
100086d0:	2947883a 	add	r3,r5,r5
100086d4:	003fbe06 	br	100085d0 <__alt_data_end+0xf80085d0>
100086d8:	280bd0ba 	srai	r5,r5,2
100086dc:	00800044 	movi	r2,1
100086e0:	39000117 	ldw	r4,4(r7)
100086e4:	114a983a 	sll	r5,r2,r5
100086e8:	1805883a 	mov	r2,r3
100086ec:	2908b03a 	or	r4,r5,r4
100086f0:	39000115 	stw	r4,4(r7)
100086f4:	003fc406 	br	10008608 <__alt_data_end+0xf8008608>
100086f8:	49800515 	stw	r6,20(r9)
100086fc:	49800415 	stw	r6,16(r9)
10008700:	10c00054 	ori	r3,r2,1
10008704:	31000315 	stw	r4,12(r6)
10008708:	31000215 	stw	r4,8(r6)
1000870c:	30c00115 	stw	r3,4(r6)
10008710:	308d883a 	add	r6,r6,r2
10008714:	30800015 	stw	r2,0(r6)
10008718:	003fa006 	br	1000859c <__alt_data_end+0xf800859c>
1000871c:	01001504 	movi	r4,84
10008720:	20c00436 	bltu	r4,r3,10008734 <_free_r+0x2b4>
10008724:	1006d33a 	srli	r3,r2,12
10008728:	19401b84 	addi	r5,r3,110
1000872c:	2947883a 	add	r3,r5,r5
10008730:	003fa706 	br	100085d0 <__alt_data_end+0xf80085d0>
10008734:	01005504 	movi	r4,340
10008738:	20c00436 	bltu	r4,r3,1000874c <_free_r+0x2cc>
1000873c:	1006d3fa 	srli	r3,r2,15
10008740:	19401dc4 	addi	r5,r3,119
10008744:	2947883a 	add	r3,r5,r5
10008748:	003fa106 	br	100085d0 <__alt_data_end+0xf80085d0>
1000874c:	01015504 	movi	r4,1364
10008750:	20c00436 	bltu	r4,r3,10008764 <_free_r+0x2e4>
10008754:	1006d4ba 	srli	r3,r2,18
10008758:	19401f04 	addi	r5,r3,124
1000875c:	2947883a 	add	r3,r5,r5
10008760:	003f9b06 	br	100085d0 <__alt_data_end+0xf80085d0>
10008764:	00c03f04 	movi	r3,252
10008768:	01401f84 	movi	r5,126
1000876c:	003f9806 	br	100085d0 <__alt_data_end+0xf80085d0>

10008770 <__sfvwrite_r>:
10008770:	30800217 	ldw	r2,8(r6)
10008774:	10004526 	beq	r2,zero,1000888c <__sfvwrite_r+0x11c>
10008778:	28c0030b 	ldhu	r3,12(r5)
1000877c:	defff404 	addi	sp,sp,-48
10008780:	dd400715 	stw	r21,28(sp)
10008784:	dcc00515 	stw	r19,20(sp)
10008788:	dc000215 	stw	r16,8(sp)
1000878c:	dfc00b15 	stw	ra,44(sp)
10008790:	df000a15 	stw	fp,40(sp)
10008794:	ddc00915 	stw	r23,36(sp)
10008798:	dd800815 	stw	r22,32(sp)
1000879c:	dd000615 	stw	r20,24(sp)
100087a0:	dc800415 	stw	r18,16(sp)
100087a4:	dc400315 	stw	r17,12(sp)
100087a8:	1880020c 	andi	r2,r3,8
100087ac:	2821883a 	mov	r16,r5
100087b0:	202b883a 	mov	r21,r4
100087b4:	3027883a 	mov	r19,r6
100087b8:	10002526 	beq	r2,zero,10008850 <__sfvwrite_r+0xe0>
100087bc:	28800417 	ldw	r2,16(r5)
100087c0:	10002326 	beq	r2,zero,10008850 <__sfvwrite_r+0xe0>
100087c4:	1880008c 	andi	r2,r3,2
100087c8:	9c400017 	ldw	r17,0(r19)
100087cc:	10003126 	beq	r2,zero,10008894 <__sfvwrite_r+0x124>
100087d0:	0029883a 	mov	r20,zero
100087d4:	0025883a 	mov	r18,zero
100087d8:	05810004 	movi	r22,1024
100087dc:	a00d883a 	mov	r6,r20
100087e0:	a809883a 	mov	r4,r21
100087e4:	90002526 	beq	r18,zero,1000887c <__sfvwrite_r+0x10c>
100087e8:	900f883a 	mov	r7,r18
100087ec:	81400717 	ldw	r5,28(r16)
100087f0:	b480012e 	bgeu	r22,r18,100087f8 <__sfvwrite_r+0x88>
100087f4:	01c10004 	movi	r7,1024
100087f8:	80800917 	ldw	r2,36(r16)
100087fc:	103ee83a 	callr	r2
10008800:	0080510e 	bge	zero,r2,10008948 <__sfvwrite_r+0x1d8>
10008804:	98c00217 	ldw	r3,8(r19)
10008808:	a0a9883a 	add	r20,r20,r2
1000880c:	90a5c83a 	sub	r18,r18,r2
10008810:	1885c83a 	sub	r2,r3,r2
10008814:	98800215 	stw	r2,8(r19)
10008818:	103ff01e 	bne	r2,zero,100087dc <__alt_data_end+0xf80087dc>
1000881c:	0005883a 	mov	r2,zero
10008820:	dfc00b17 	ldw	ra,44(sp)
10008824:	df000a17 	ldw	fp,40(sp)
10008828:	ddc00917 	ldw	r23,36(sp)
1000882c:	dd800817 	ldw	r22,32(sp)
10008830:	dd400717 	ldw	r21,28(sp)
10008834:	dd000617 	ldw	r20,24(sp)
10008838:	dcc00517 	ldw	r19,20(sp)
1000883c:	dc800417 	ldw	r18,16(sp)
10008840:	dc400317 	ldw	r17,12(sp)
10008844:	dc000217 	ldw	r16,8(sp)
10008848:	dec00c04 	addi	sp,sp,48
1000884c:	f800283a 	ret
10008850:	a809883a 	mov	r4,r21
10008854:	800b883a 	mov	r5,r16
10008858:	00062d00 	call	100062d0 <__swsetup_r>
1000885c:	80c0030b 	ldhu	r3,12(r16)
10008860:	103fd826 	beq	r2,zero,100087c4 <__alt_data_end+0xf80087c4>
10008864:	18c01014 	ori	r3,r3,64
10008868:	80c0030d 	sth	r3,12(r16)
1000886c:	00c00244 	movi	r3,9
10008870:	00bfffc4 	movi	r2,-1
10008874:	a8c00015 	stw	r3,0(r21)
10008878:	003fe906 	br	10008820 <__alt_data_end+0xf8008820>
1000887c:	8d000017 	ldw	r20,0(r17)
10008880:	8c800117 	ldw	r18,4(r17)
10008884:	8c400204 	addi	r17,r17,8
10008888:	003fd406 	br	100087dc <__alt_data_end+0xf80087dc>
1000888c:	0005883a 	mov	r2,zero
10008890:	f800283a 	ret
10008894:	1880004c 	andi	r2,r3,1
10008898:	1000301e 	bne	r2,zero,1000895c <__sfvwrite_r+0x1ec>
1000889c:	002f883a 	mov	r23,zero
100088a0:	0025883a 	mov	r18,zero
100088a4:	90001c26 	beq	r18,zero,10008918 <__sfvwrite_r+0x1a8>
100088a8:	1880800c 	andi	r2,r3,512
100088ac:	85000217 	ldw	r20,8(r16)
100088b0:	10006c26 	beq	r2,zero,10008a64 <__sfvwrite_r+0x2f4>
100088b4:	a02d883a 	mov	r22,r20
100088b8:	95008536 	bltu	r18,r20,10008ad0 <__sfvwrite_r+0x360>
100088bc:	1881200c 	andi	r2,r3,1152
100088c0:	10009d1e 	bne	r2,zero,10008b38 <__sfvwrite_r+0x3c8>
100088c4:	81000017 	ldw	r4,0(r16)
100088c8:	a039883a 	mov	fp,r20
100088cc:	9029883a 	mov	r20,r18
100088d0:	b80b883a 	mov	r5,r23
100088d4:	b00d883a 	mov	r6,r22
100088d8:	00099e40 	call	100099e4 <memmove>
100088dc:	80c00217 	ldw	r3,8(r16)
100088e0:	81000017 	ldw	r4,0(r16)
100088e4:	9005883a 	mov	r2,r18
100088e8:	1f39c83a 	sub	fp,r3,fp
100088ec:	258f883a 	add	r7,r4,r22
100088f0:	87000215 	stw	fp,8(r16)
100088f4:	81c00015 	stw	r7,0(r16)
100088f8:	98c00217 	ldw	r3,8(r19)
100088fc:	b8af883a 	add	r23,r23,r2
10008900:	90a5c83a 	sub	r18,r18,r2
10008904:	1d05c83a 	sub	r2,r3,r20
10008908:	98800215 	stw	r2,8(r19)
1000890c:	103fc326 	beq	r2,zero,1000881c <__alt_data_end+0xf800881c>
10008910:	80c0030b 	ldhu	r3,12(r16)
10008914:	903fe41e 	bne	r18,zero,100088a8 <__alt_data_end+0xf80088a8>
10008918:	8dc00017 	ldw	r23,0(r17)
1000891c:	8c800117 	ldw	r18,4(r17)
10008920:	8c400204 	addi	r17,r17,8
10008924:	003fdf06 	br	100088a4 <__alt_data_end+0xf80088a4>
10008928:	000acac0 	call	1000acac <_realloc_r>
1000892c:	102d883a 	mov	r22,r2
10008930:	1000a01e 	bne	r2,zero,10008bb4 <__sfvwrite_r+0x444>
10008934:	81400417 	ldw	r5,16(r16)
10008938:	a809883a 	mov	r4,r21
1000893c:	00084800 	call	10008480 <_free_r>
10008940:	00800304 	movi	r2,12
10008944:	a8800015 	stw	r2,0(r21)
10008948:	80c0030b 	ldhu	r3,12(r16)
1000894c:	00bfffc4 	movi	r2,-1
10008950:	18c01014 	ori	r3,r3,64
10008954:	80c0030d 	sth	r3,12(r16)
10008958:	003fb106 	br	10008820 <__alt_data_end+0xf8008820>
1000895c:	0029883a 	mov	r20,zero
10008960:	0011883a 	mov	r8,zero
10008964:	0039883a 	mov	fp,zero
10008968:	0025883a 	mov	r18,zero
1000896c:	90001f26 	beq	r18,zero,100089ec <__sfvwrite_r+0x27c>
10008970:	40006826 	beq	r8,zero,10008b14 <__sfvwrite_r+0x3a4>
10008974:	a02f883a 	mov	r23,r20
10008978:	9500012e 	bgeu	r18,r20,10008980 <__sfvwrite_r+0x210>
1000897c:	902f883a 	mov	r23,r18
10008980:	81000017 	ldw	r4,0(r16)
10008984:	80800417 	ldw	r2,16(r16)
10008988:	b82d883a 	mov	r22,r23
1000898c:	81800217 	ldw	r6,8(r16)
10008990:	81c00517 	ldw	r7,20(r16)
10008994:	1100022e 	bgeu	r2,r4,100089a0 <__sfvwrite_r+0x230>
10008998:	31c7883a 	add	r3,r6,r7
1000899c:	1dc01816 	blt	r3,r23,10008a00 <__sfvwrite_r+0x290>
100089a0:	b9c03f16 	blt	r23,r7,10008aa0 <__sfvwrite_r+0x330>
100089a4:	80800917 	ldw	r2,36(r16)
100089a8:	81400717 	ldw	r5,28(r16)
100089ac:	a809883a 	mov	r4,r21
100089b0:	da000115 	stw	r8,4(sp)
100089b4:	e00d883a 	mov	r6,fp
100089b8:	103ee83a 	callr	r2
100089bc:	102d883a 	mov	r22,r2
100089c0:	da000117 	ldw	r8,4(sp)
100089c4:	00bfe00e 	bge	zero,r2,10008948 <__alt_data_end+0xf8008948>
100089c8:	a5a9c83a 	sub	r20,r20,r22
100089cc:	a0001f26 	beq	r20,zero,10008a4c <__sfvwrite_r+0x2dc>
100089d0:	98800217 	ldw	r2,8(r19)
100089d4:	e5b9883a 	add	fp,fp,r22
100089d8:	95a5c83a 	sub	r18,r18,r22
100089dc:	15adc83a 	sub	r22,r2,r22
100089e0:	9d800215 	stw	r22,8(r19)
100089e4:	b03f8d26 	beq	r22,zero,1000881c <__alt_data_end+0xf800881c>
100089e8:	903fe11e 	bne	r18,zero,10008970 <__alt_data_end+0xf8008970>
100089ec:	8f000017 	ldw	fp,0(r17)
100089f0:	8c800117 	ldw	r18,4(r17)
100089f4:	0011883a 	mov	r8,zero
100089f8:	8c400204 	addi	r17,r17,8
100089fc:	003fdb06 	br	1000896c <__alt_data_end+0xf800896c>
10008a00:	180d883a 	mov	r6,r3
10008a04:	e00b883a 	mov	r5,fp
10008a08:	da000115 	stw	r8,4(sp)
10008a0c:	d8c00015 	stw	r3,0(sp)
10008a10:	00099e40 	call	100099e4 <memmove>
10008a14:	d8c00017 	ldw	r3,0(sp)
10008a18:	80800017 	ldw	r2,0(r16)
10008a1c:	a809883a 	mov	r4,r21
10008a20:	800b883a 	mov	r5,r16
10008a24:	10c5883a 	add	r2,r2,r3
10008a28:	80800015 	stw	r2,0(r16)
10008a2c:	d8c00015 	stw	r3,0(sp)
10008a30:	0007d500 	call	10007d50 <_fflush_r>
10008a34:	d8c00017 	ldw	r3,0(sp)
10008a38:	da000117 	ldw	r8,4(sp)
10008a3c:	103fc21e 	bne	r2,zero,10008948 <__alt_data_end+0xf8008948>
10008a40:	182d883a 	mov	r22,r3
10008a44:	a5a9c83a 	sub	r20,r20,r22
10008a48:	a03fe11e 	bne	r20,zero,100089d0 <__alt_data_end+0xf80089d0>
10008a4c:	a809883a 	mov	r4,r21
10008a50:	800b883a 	mov	r5,r16
10008a54:	0007d500 	call	10007d50 <_fflush_r>
10008a58:	103fbb1e 	bne	r2,zero,10008948 <__alt_data_end+0xf8008948>
10008a5c:	0011883a 	mov	r8,zero
10008a60:	003fdb06 	br	100089d0 <__alt_data_end+0xf80089d0>
10008a64:	81000017 	ldw	r4,0(r16)
10008a68:	80800417 	ldw	r2,16(r16)
10008a6c:	1100012e 	bgeu	r2,r4,10008a74 <__sfvwrite_r+0x304>
10008a70:	a4805a36 	bltu	r20,r18,10008bdc <__sfvwrite_r+0x46c>
10008a74:	81c00517 	ldw	r7,20(r16)
10008a78:	91c01a36 	bltu	r18,r7,10008ae4 <__sfvwrite_r+0x374>
10008a7c:	80800917 	ldw	r2,36(r16)
10008a80:	81400717 	ldw	r5,28(r16)
10008a84:	a809883a 	mov	r4,r21
10008a88:	b80d883a 	mov	r6,r23
10008a8c:	103ee83a 	callr	r2
10008a90:	1029883a 	mov	r20,r2
10008a94:	00bfac0e 	bge	zero,r2,10008948 <__alt_data_end+0xf8008948>
10008a98:	a005883a 	mov	r2,r20
10008a9c:	003f9606 	br	100088f8 <__alt_data_end+0xf80088f8>
10008aa0:	b80d883a 	mov	r6,r23
10008aa4:	e00b883a 	mov	r5,fp
10008aa8:	da000115 	stw	r8,4(sp)
10008aac:	00099e40 	call	100099e4 <memmove>
10008ab0:	80800217 	ldw	r2,8(r16)
10008ab4:	80c00017 	ldw	r3,0(r16)
10008ab8:	da000117 	ldw	r8,4(sp)
10008abc:	15c5c83a 	sub	r2,r2,r23
10008ac0:	1def883a 	add	r23,r3,r23
10008ac4:	80800215 	stw	r2,8(r16)
10008ac8:	85c00015 	stw	r23,0(r16)
10008acc:	003fbe06 	br	100089c8 <__alt_data_end+0xf80089c8>
10008ad0:	81000017 	ldw	r4,0(r16)
10008ad4:	9039883a 	mov	fp,r18
10008ad8:	9029883a 	mov	r20,r18
10008adc:	902d883a 	mov	r22,r18
10008ae0:	003f7b06 	br	100088d0 <__alt_data_end+0xf80088d0>
10008ae4:	b80b883a 	mov	r5,r23
10008ae8:	900d883a 	mov	r6,r18
10008aec:	00099e40 	call	100099e4 <memmove>
10008af0:	80c00217 	ldw	r3,8(r16)
10008af4:	80800017 	ldw	r2,0(r16)
10008af8:	9029883a 	mov	r20,r18
10008afc:	1c87c83a 	sub	r3,r3,r18
10008b00:	1485883a 	add	r2,r2,r18
10008b04:	80800015 	stw	r2,0(r16)
10008b08:	80c00215 	stw	r3,8(r16)
10008b0c:	9005883a 	mov	r2,r18
10008b10:	003f7906 	br	100088f8 <__alt_data_end+0xf80088f8>
10008b14:	e009883a 	mov	r4,fp
10008b18:	01400284 	movi	r5,10
10008b1c:	900d883a 	mov	r6,r18
10008b20:	00097c40 	call	100097c4 <memchr>
10008b24:	10003826 	beq	r2,zero,10008c08 <__sfvwrite_r+0x498>
10008b28:	10800044 	addi	r2,r2,1
10008b2c:	1729c83a 	sub	r20,r2,fp
10008b30:	02000044 	movi	r8,1
10008b34:	003f8f06 	br	10008974 <__alt_data_end+0xf8008974>
10008b38:	80800517 	ldw	r2,20(r16)
10008b3c:	81400417 	ldw	r5,16(r16)
10008b40:	87000017 	ldw	fp,0(r16)
10008b44:	10a9883a 	add	r20,r2,r2
10008b48:	a085883a 	add	r2,r20,r2
10008b4c:	1028d7fa 	srli	r20,r2,31
10008b50:	e179c83a 	sub	fp,fp,r5
10008b54:	e1000044 	addi	r4,fp,1
10008b58:	a085883a 	add	r2,r20,r2
10008b5c:	1029d07a 	srai	r20,r2,1
10008b60:	2485883a 	add	r2,r4,r18
10008b64:	a00d883a 	mov	r6,r20
10008b68:	a080022e 	bgeu	r20,r2,10008b74 <__sfvwrite_r+0x404>
10008b6c:	1029883a 	mov	r20,r2
10008b70:	100d883a 	mov	r6,r2
10008b74:	18c1000c 	andi	r3,r3,1024
10008b78:	a809883a 	mov	r4,r21
10008b7c:	183f6a26 	beq	r3,zero,10008928 <__alt_data_end+0xf8008928>
10008b80:	300b883a 	mov	r5,r6
10008b84:	000901c0 	call	1000901c <_malloc_r>
10008b88:	102d883a 	mov	r22,r2
10008b8c:	103f6c26 	beq	r2,zero,10008940 <__alt_data_end+0xf8008940>
10008b90:	81400417 	ldw	r5,16(r16)
10008b94:	1009883a 	mov	r4,r2
10008b98:	e00d883a 	mov	r6,fp
10008b9c:	00098ac0 	call	100098ac <memcpy>
10008ba0:	8080030b 	ldhu	r2,12(r16)
10008ba4:	00fedfc4 	movi	r3,-1153
10008ba8:	10c4703a 	and	r2,r2,r3
10008bac:	10802014 	ori	r2,r2,128
10008bb0:	8080030d 	sth	r2,12(r16)
10008bb4:	b709883a 	add	r4,r22,fp
10008bb8:	a707c83a 	sub	r3,r20,fp
10008bbc:	85800415 	stw	r22,16(r16)
10008bc0:	85000515 	stw	r20,20(r16)
10008bc4:	81000015 	stw	r4,0(r16)
10008bc8:	9039883a 	mov	fp,r18
10008bcc:	80c00215 	stw	r3,8(r16)
10008bd0:	9029883a 	mov	r20,r18
10008bd4:	902d883a 	mov	r22,r18
10008bd8:	003f3d06 	br	100088d0 <__alt_data_end+0xf80088d0>
10008bdc:	b80b883a 	mov	r5,r23
10008be0:	a00d883a 	mov	r6,r20
10008be4:	00099e40 	call	100099e4 <memmove>
10008be8:	80800017 	ldw	r2,0(r16)
10008bec:	a809883a 	mov	r4,r21
10008bf0:	800b883a 	mov	r5,r16
10008bf4:	1505883a 	add	r2,r2,r20
10008bf8:	80800015 	stw	r2,0(r16)
10008bfc:	0007d500 	call	10007d50 <_fflush_r>
10008c00:	103fa526 	beq	r2,zero,10008a98 <__alt_data_end+0xf8008a98>
10008c04:	003f5006 	br	10008948 <__alt_data_end+0xf8008948>
10008c08:	95000044 	addi	r20,r18,1
10008c0c:	02000044 	movi	r8,1
10008c10:	003f5806 	br	10008974 <__alt_data_end+0xf8008974>

10008c14 <_fwalk>:
10008c14:	defff804 	addi	sp,sp,-32
10008c18:	dd400515 	stw	r21,20(sp)
10008c1c:	2540b804 	addi	r21,r4,736
10008c20:	dd800615 	stw	r22,24(sp)
10008c24:	dd000415 	stw	r20,16(sp)
10008c28:	dfc00715 	stw	ra,28(sp)
10008c2c:	dcc00315 	stw	r19,12(sp)
10008c30:	dc800215 	stw	r18,8(sp)
10008c34:	dc400115 	stw	r17,4(sp)
10008c38:	dc000015 	stw	r16,0(sp)
10008c3c:	2829883a 	mov	r20,r5
10008c40:	002d883a 	mov	r22,zero
10008c44:	000831c0 	call	1000831c <__sfp_lock_acquire>
10008c48:	a8001426 	beq	r21,zero,10008c9c <_fwalk+0x88>
10008c4c:	04ffffc4 	movi	r19,-1
10008c50:	ac400117 	ldw	r17,4(r21)
10008c54:	ac800217 	ldw	r18,8(r21)
10008c58:	8c7fffc4 	addi	r17,r17,-1
10008c5c:	88000d16 	blt	r17,zero,10008c94 <_fwalk+0x80>
10008c60:	94000304 	addi	r16,r18,12
10008c64:	94800384 	addi	r18,r18,14
10008c68:	80c0000f 	ldh	r3,0(r16)
10008c6c:	8c7fffc4 	addi	r17,r17,-1
10008c70:	813ffd04 	addi	r4,r16,-12
10008c74:	18000426 	beq	r3,zero,10008c88 <_fwalk+0x74>
10008c78:	90c0000f 	ldh	r3,0(r18)
10008c7c:	1cc00226 	beq	r3,r19,10008c88 <_fwalk+0x74>
10008c80:	a03ee83a 	callr	r20
10008c84:	b0acb03a 	or	r22,r22,r2
10008c88:	84001a04 	addi	r16,r16,104
10008c8c:	94801a04 	addi	r18,r18,104
10008c90:	8cfff51e 	bne	r17,r19,10008c68 <__alt_data_end+0xf8008c68>
10008c94:	ad400017 	ldw	r21,0(r21)
10008c98:	a83fed1e 	bne	r21,zero,10008c50 <__alt_data_end+0xf8008c50>
10008c9c:	00083200 	call	10008320 <__sfp_lock_release>
10008ca0:	b005883a 	mov	r2,r22
10008ca4:	dfc00717 	ldw	ra,28(sp)
10008ca8:	dd800617 	ldw	r22,24(sp)
10008cac:	dd400517 	ldw	r21,20(sp)
10008cb0:	dd000417 	ldw	r20,16(sp)
10008cb4:	dcc00317 	ldw	r19,12(sp)
10008cb8:	dc800217 	ldw	r18,8(sp)
10008cbc:	dc400117 	ldw	r17,4(sp)
10008cc0:	dc000017 	ldw	r16,0(sp)
10008cc4:	dec00804 	addi	sp,sp,32
10008cc8:	f800283a 	ret

10008ccc <_fwalk_reent>:
10008ccc:	defff804 	addi	sp,sp,-32
10008cd0:	dd400515 	stw	r21,20(sp)
10008cd4:	2540b804 	addi	r21,r4,736
10008cd8:	dd800615 	stw	r22,24(sp)
10008cdc:	dd000415 	stw	r20,16(sp)
10008ce0:	dcc00315 	stw	r19,12(sp)
10008ce4:	dfc00715 	stw	ra,28(sp)
10008ce8:	dc800215 	stw	r18,8(sp)
10008cec:	dc400115 	stw	r17,4(sp)
10008cf0:	dc000015 	stw	r16,0(sp)
10008cf4:	2027883a 	mov	r19,r4
10008cf8:	2829883a 	mov	r20,r5
10008cfc:	002d883a 	mov	r22,zero
10008d00:	000831c0 	call	1000831c <__sfp_lock_acquire>
10008d04:	a8001326 	beq	r21,zero,10008d54 <_fwalk_reent+0x88>
10008d08:	04bfffc4 	movi	r18,-1
10008d0c:	ac400117 	ldw	r17,4(r21)
10008d10:	ac000217 	ldw	r16,8(r21)
10008d14:	8c7fffc4 	addi	r17,r17,-1
10008d18:	88000c16 	blt	r17,zero,10008d4c <_fwalk_reent+0x80>
10008d1c:	84000304 	addi	r16,r16,12
10008d20:	80c0000f 	ldh	r3,0(r16)
10008d24:	8c7fffc4 	addi	r17,r17,-1
10008d28:	817ffd04 	addi	r5,r16,-12
10008d2c:	18000526 	beq	r3,zero,10008d44 <_fwalk_reent+0x78>
10008d30:	80c0008f 	ldh	r3,2(r16)
10008d34:	9809883a 	mov	r4,r19
10008d38:	1c800226 	beq	r3,r18,10008d44 <_fwalk_reent+0x78>
10008d3c:	a03ee83a 	callr	r20
10008d40:	b0acb03a 	or	r22,r22,r2
10008d44:	84001a04 	addi	r16,r16,104
10008d48:	8cbff51e 	bne	r17,r18,10008d20 <__alt_data_end+0xf8008d20>
10008d4c:	ad400017 	ldw	r21,0(r21)
10008d50:	a83fee1e 	bne	r21,zero,10008d0c <__alt_data_end+0xf8008d0c>
10008d54:	00083200 	call	10008320 <__sfp_lock_release>
10008d58:	b005883a 	mov	r2,r22
10008d5c:	dfc00717 	ldw	ra,28(sp)
10008d60:	dd800617 	ldw	r22,24(sp)
10008d64:	dd400517 	ldw	r21,20(sp)
10008d68:	dd000417 	ldw	r20,16(sp)
10008d6c:	dcc00317 	ldw	r19,12(sp)
10008d70:	dc800217 	ldw	r18,8(sp)
10008d74:	dc400117 	ldw	r17,4(sp)
10008d78:	dc000017 	ldw	r16,0(sp)
10008d7c:	dec00804 	addi	sp,sp,32
10008d80:	f800283a 	ret

10008d84 <_setlocale_r>:
10008d84:	30001b26 	beq	r6,zero,10008df4 <_setlocale_r+0x70>
10008d88:	01440074 	movhi	r5,4097
10008d8c:	defffe04 	addi	sp,sp,-8
10008d90:	2944c404 	addi	r5,r5,4880
10008d94:	3009883a 	mov	r4,r6
10008d98:	dc000015 	stw	r16,0(sp)
10008d9c:	dfc00115 	stw	ra,4(sp)
10008da0:	3021883a 	mov	r16,r6
10008da4:	000b4500 	call	1000b450 <strcmp>
10008da8:	1000061e 	bne	r2,zero,10008dc4 <_setlocale_r+0x40>
10008dac:	00840074 	movhi	r2,4097
10008db0:	1084c304 	addi	r2,r2,4876
10008db4:	dfc00117 	ldw	ra,4(sp)
10008db8:	dc000017 	ldw	r16,0(sp)
10008dbc:	dec00204 	addi	sp,sp,8
10008dc0:	f800283a 	ret
10008dc4:	01440074 	movhi	r5,4097
10008dc8:	2944c304 	addi	r5,r5,4876
10008dcc:	8009883a 	mov	r4,r16
10008dd0:	000b4500 	call	1000b450 <strcmp>
10008dd4:	103ff526 	beq	r2,zero,10008dac <__alt_data_end+0xf8008dac>
10008dd8:	01440074 	movhi	r5,4097
10008ddc:	2944ae04 	addi	r5,r5,4792
10008de0:	8009883a 	mov	r4,r16
10008de4:	000b4500 	call	1000b450 <strcmp>
10008de8:	103ff026 	beq	r2,zero,10008dac <__alt_data_end+0xf8008dac>
10008dec:	0005883a 	mov	r2,zero
10008df0:	003ff006 	br	10008db4 <__alt_data_end+0xf8008db4>
10008df4:	00840074 	movhi	r2,4097
10008df8:	1084c304 	addi	r2,r2,4876
10008dfc:	f800283a 	ret

10008e00 <__locale_charset>:
10008e00:	00840074 	movhi	r2,4097
10008e04:	10863604 	addi	r2,r2,6360
10008e08:	f800283a 	ret

10008e0c <__locale_mb_cur_max>:
10008e0c:	00840074 	movhi	r2,4097
10008e10:	108bd204 	addi	r2,r2,12104
10008e14:	10800017 	ldw	r2,0(r2)
10008e18:	f800283a 	ret

10008e1c <__locale_msgcharset>:
10008e1c:	00840074 	movhi	r2,4097
10008e20:	10862e04 	addi	r2,r2,6328
10008e24:	f800283a 	ret

10008e28 <__locale_cjk_lang>:
10008e28:	0005883a 	mov	r2,zero
10008e2c:	f800283a 	ret

10008e30 <_localeconv_r>:
10008e30:	00840074 	movhi	r2,4097
10008e34:	10863e04 	addi	r2,r2,6392
10008e38:	f800283a 	ret

10008e3c <setlocale>:
10008e3c:	00c40074 	movhi	r3,4097
10008e40:	18cbd104 	addi	r3,r3,12100
10008e44:	2005883a 	mov	r2,r4
10008e48:	19000017 	ldw	r4,0(r3)
10008e4c:	280d883a 	mov	r6,r5
10008e50:	100b883a 	mov	r5,r2
10008e54:	0008d841 	jmpi	10008d84 <_setlocale_r>

10008e58 <localeconv>:
10008e58:	00840074 	movhi	r2,4097
10008e5c:	10863e04 	addi	r2,r2,6392
10008e60:	f800283a 	ret

10008e64 <__smakebuf_r>:
10008e64:	2880030b 	ldhu	r2,12(r5)
10008e68:	10c0008c 	andi	r3,r2,2
10008e6c:	1800401e 	bne	r3,zero,10008f70 <__smakebuf_r+0x10c>
10008e70:	deffec04 	addi	sp,sp,-80
10008e74:	dc000f15 	stw	r16,60(sp)
10008e78:	2821883a 	mov	r16,r5
10008e7c:	2940038f 	ldh	r5,14(r5)
10008e80:	dc401015 	stw	r17,64(sp)
10008e84:	dfc01315 	stw	ra,76(sp)
10008e88:	dcc01215 	stw	r19,72(sp)
10008e8c:	dc801115 	stw	r18,68(sp)
10008e90:	2023883a 	mov	r17,r4
10008e94:	28001b16 	blt	r5,zero,10008f04 <__smakebuf_r+0xa0>
10008e98:	d80d883a 	mov	r6,sp
10008e9c:	000cec80 	call	1000cec8 <_fstat_r>
10008ea0:	10001716 	blt	r2,zero,10008f00 <__smakebuf_r+0x9c>
10008ea4:	d8800117 	ldw	r2,4(sp)
10008ea8:	00e00014 	movui	r3,32768
10008eac:	10bc000c 	andi	r2,r2,61440
10008eb0:	10c03726 	beq	r2,r3,10008f90 <__smakebuf_r+0x12c>
10008eb4:	80c0030b 	ldhu	r3,12(r16)
10008eb8:	18c20014 	ori	r3,r3,2048
10008ebc:	80c0030d 	sth	r3,12(r16)
10008ec0:	00c80004 	movi	r3,8192
10008ec4:	10c03c1e 	bne	r2,r3,10008fb8 <__smakebuf_r+0x154>
10008ec8:	8140038f 	ldh	r5,14(r16)
10008ecc:	8809883a 	mov	r4,r17
10008ed0:	000cf200 	call	1000cf20 <_isatty_r>
10008ed4:	10004e26 	beq	r2,zero,10009010 <__smakebuf_r+0x1ac>
10008ed8:	8080030b 	ldhu	r2,12(r16)
10008edc:	04c00044 	movi	r19,1
10008ee0:	80c010c4 	addi	r3,r16,67
10008ee4:	14c4b03a 	or	r2,r2,r19
10008ee8:	8080030d 	sth	r2,12(r16)
10008eec:	80c00015 	stw	r3,0(r16)
10008ef0:	80c00415 	stw	r3,16(r16)
10008ef4:	84c00515 	stw	r19,20(r16)
10008ef8:	04810004 	movi	r18,1024
10008efc:	00000706 	br	10008f1c <__smakebuf_r+0xb8>
10008f00:	8080030b 	ldhu	r2,12(r16)
10008f04:	10c0200c 	andi	r3,r2,128
10008f08:	18001f1e 	bne	r3,zero,10008f88 <__smakebuf_r+0x124>
10008f0c:	04810004 	movi	r18,1024
10008f10:	10820014 	ori	r2,r2,2048
10008f14:	8080030d 	sth	r2,12(r16)
10008f18:	0027883a 	mov	r19,zero
10008f1c:	8809883a 	mov	r4,r17
10008f20:	900b883a 	mov	r5,r18
10008f24:	000901c0 	call	1000901c <_malloc_r>
10008f28:	10002e26 	beq	r2,zero,10008fe4 <__smakebuf_r+0x180>
10008f2c:	80c0030b 	ldhu	r3,12(r16)
10008f30:	01040034 	movhi	r4,4096
10008f34:	211fee04 	addi	r4,r4,32696
10008f38:	89000f15 	stw	r4,60(r17)
10008f3c:	18c02014 	ori	r3,r3,128
10008f40:	80c0030d 	sth	r3,12(r16)
10008f44:	80800015 	stw	r2,0(r16)
10008f48:	80800415 	stw	r2,16(r16)
10008f4c:	84800515 	stw	r18,20(r16)
10008f50:	98001c1e 	bne	r19,zero,10008fc4 <__smakebuf_r+0x160>
10008f54:	dfc01317 	ldw	ra,76(sp)
10008f58:	dcc01217 	ldw	r19,72(sp)
10008f5c:	dc801117 	ldw	r18,68(sp)
10008f60:	dc401017 	ldw	r17,64(sp)
10008f64:	dc000f17 	ldw	r16,60(sp)
10008f68:	dec01404 	addi	sp,sp,80
10008f6c:	f800283a 	ret
10008f70:	288010c4 	addi	r2,r5,67
10008f74:	28800015 	stw	r2,0(r5)
10008f78:	28800415 	stw	r2,16(r5)
10008f7c:	00800044 	movi	r2,1
10008f80:	28800515 	stw	r2,20(r5)
10008f84:	f800283a 	ret
10008f88:	04801004 	movi	r18,64
10008f8c:	003fe006 	br	10008f10 <__alt_data_end+0xf8008f10>
10008f90:	81000a17 	ldw	r4,40(r16)
10008f94:	00c40074 	movhi	r3,4097
10008f98:	18ecfb04 	addi	r3,r3,-19476
10008f9c:	20ffc51e 	bne	r4,r3,10008eb4 <__alt_data_end+0xf8008eb4>
10008fa0:	80c0030b 	ldhu	r3,12(r16)
10008fa4:	01010004 	movi	r4,1024
10008fa8:	81001315 	stw	r4,76(r16)
10008fac:	1906b03a 	or	r3,r3,r4
10008fb0:	80c0030d 	sth	r3,12(r16)
10008fb4:	003fc206 	br	10008ec0 <__alt_data_end+0xf8008ec0>
10008fb8:	0027883a 	mov	r19,zero
10008fbc:	04810004 	movi	r18,1024
10008fc0:	003fd606 	br	10008f1c <__alt_data_end+0xf8008f1c>
10008fc4:	8140038f 	ldh	r5,14(r16)
10008fc8:	8809883a 	mov	r4,r17
10008fcc:	000cf200 	call	1000cf20 <_isatty_r>
10008fd0:	103fe026 	beq	r2,zero,10008f54 <__alt_data_end+0xf8008f54>
10008fd4:	8080030b 	ldhu	r2,12(r16)
10008fd8:	10800054 	ori	r2,r2,1
10008fdc:	8080030d 	sth	r2,12(r16)
10008fe0:	003fdc06 	br	10008f54 <__alt_data_end+0xf8008f54>
10008fe4:	8080030b 	ldhu	r2,12(r16)
10008fe8:	10c0800c 	andi	r3,r2,512
10008fec:	183fd91e 	bne	r3,zero,10008f54 <__alt_data_end+0xf8008f54>
10008ff0:	10800094 	ori	r2,r2,2
10008ff4:	80c010c4 	addi	r3,r16,67
10008ff8:	8080030d 	sth	r2,12(r16)
10008ffc:	00800044 	movi	r2,1
10009000:	80c00015 	stw	r3,0(r16)
10009004:	80c00415 	stw	r3,16(r16)
10009008:	80800515 	stw	r2,20(r16)
1000900c:	003fd106 	br	10008f54 <__alt_data_end+0xf8008f54>
10009010:	04c00044 	movi	r19,1
10009014:	04810004 	movi	r18,1024
10009018:	003fc006 	br	10008f1c <__alt_data_end+0xf8008f1c>

1000901c <_malloc_r>:
1000901c:	defff504 	addi	sp,sp,-44
10009020:	dc800315 	stw	r18,12(sp)
10009024:	dfc00a15 	stw	ra,40(sp)
10009028:	df000915 	stw	fp,36(sp)
1000902c:	ddc00815 	stw	r23,32(sp)
10009030:	dd800715 	stw	r22,28(sp)
10009034:	dd400615 	stw	r21,24(sp)
10009038:	dd000515 	stw	r20,20(sp)
1000903c:	dcc00415 	stw	r19,16(sp)
10009040:	dc400215 	stw	r17,8(sp)
10009044:	dc000115 	stw	r16,4(sp)
10009048:	288002c4 	addi	r2,r5,11
1000904c:	00c00584 	movi	r3,22
10009050:	2025883a 	mov	r18,r4
10009054:	18802a2e 	bgeu	r3,r2,10009100 <_malloc_r+0xe4>
10009058:	047ffe04 	movi	r17,-8
1000905c:	1462703a 	and	r17,r2,r17
10009060:	88009e16 	blt	r17,zero,100092dc <_malloc_r+0x2c0>
10009064:	89409d36 	bltu	r17,r5,100092dc <_malloc_r+0x2c0>
10009068:	000ef5c0 	call	1000ef5c <__malloc_lock>
1000906c:	00807dc4 	movi	r2,503
10009070:	14402736 	bltu	r2,r17,10009110 <_malloc_r+0xf4>
10009074:	8806d0fa 	srli	r3,r17,3
10009078:	04c40074 	movhi	r19,4097
1000907c:	9cc64c04 	addi	r19,r19,6448
10009080:	18c5883a 	add	r2,r3,r3
10009084:	1085883a 	add	r2,r2,r2
10009088:	1085883a 	add	r2,r2,r2
1000908c:	9885883a 	add	r2,r19,r2
10009090:	14000317 	ldw	r16,12(r2)
10009094:	80814a26 	beq	r16,r2,100095c0 <_malloc_r+0x5a4>
10009098:	80c00117 	ldw	r3,4(r16)
1000909c:	81000317 	ldw	r4,12(r16)
100090a0:	00bfff04 	movi	r2,-4
100090a4:	1884703a 	and	r2,r3,r2
100090a8:	81400217 	ldw	r5,8(r16)
100090ac:	8085883a 	add	r2,r16,r2
100090b0:	10c00117 	ldw	r3,4(r2)
100090b4:	29000315 	stw	r4,12(r5)
100090b8:	21400215 	stw	r5,8(r4)
100090bc:	18c00054 	ori	r3,r3,1
100090c0:	10c00115 	stw	r3,4(r2)
100090c4:	9009883a 	mov	r4,r18
100090c8:	000ef7c0 	call	1000ef7c <__malloc_unlock>
100090cc:	80800204 	addi	r2,r16,8
100090d0:	dfc00a17 	ldw	ra,40(sp)
100090d4:	df000917 	ldw	fp,36(sp)
100090d8:	ddc00817 	ldw	r23,32(sp)
100090dc:	dd800717 	ldw	r22,28(sp)
100090e0:	dd400617 	ldw	r21,24(sp)
100090e4:	dd000517 	ldw	r20,20(sp)
100090e8:	dcc00417 	ldw	r19,16(sp)
100090ec:	dc800317 	ldw	r18,12(sp)
100090f0:	dc400217 	ldw	r17,8(sp)
100090f4:	dc000117 	ldw	r16,4(sp)
100090f8:	dec00b04 	addi	sp,sp,44
100090fc:	f800283a 	ret
10009100:	04400404 	movi	r17,16
10009104:	89407536 	bltu	r17,r5,100092dc <_malloc_r+0x2c0>
10009108:	000ef5c0 	call	1000ef5c <__malloc_lock>
1000910c:	003fd906 	br	10009074 <__alt_data_end+0xf8009074>
10009110:	8806d27a 	srli	r3,r17,9
10009114:	18007526 	beq	r3,zero,100092ec <_malloc_r+0x2d0>
10009118:	00800104 	movi	r2,4
1000911c:	10c0ef36 	bltu	r2,r3,100094dc <_malloc_r+0x4c0>
10009120:	8806d1ba 	srli	r3,r17,6
10009124:	19c00e04 	addi	r7,r3,56
10009128:	39cb883a 	add	r5,r7,r7
1000912c:	04c40074 	movhi	r19,4097
10009130:	294b883a 	add	r5,r5,r5
10009134:	9cc64c04 	addi	r19,r19,6448
10009138:	294b883a 	add	r5,r5,r5
1000913c:	994b883a 	add	r5,r19,r5
10009140:	2c000317 	ldw	r16,12(r5)
10009144:	2c000e26 	beq	r5,r16,10009180 <_malloc_r+0x164>
10009148:	80800117 	ldw	r2,4(r16)
1000914c:	01bfff04 	movi	r6,-4
10009150:	010003c4 	movi	r4,15
10009154:	1184703a 	and	r2,r2,r6
10009158:	1447c83a 	sub	r3,r2,r17
1000915c:	20c00716 	blt	r4,r3,1000917c <_malloc_r+0x160>
10009160:	1800650e 	bge	r3,zero,100092f8 <_malloc_r+0x2dc>
10009164:	84000317 	ldw	r16,12(r16)
10009168:	2c000526 	beq	r5,r16,10009180 <_malloc_r+0x164>
1000916c:	80800117 	ldw	r2,4(r16)
10009170:	1184703a 	and	r2,r2,r6
10009174:	1447c83a 	sub	r3,r2,r17
10009178:	20fff90e 	bge	r4,r3,10009160 <__alt_data_end+0xf8009160>
1000917c:	39ffffc4 	addi	r7,r7,-1
10009180:	38c00044 	addi	r3,r7,1
10009184:	01840074 	movhi	r6,4097
10009188:	9c000417 	ldw	r16,16(r19)
1000918c:	31864c04 	addi	r6,r6,6448
10009190:	32400204 	addi	r9,r6,8
10009194:	82410326 	beq	r16,r9,100095a4 <_malloc_r+0x588>
10009198:	81000117 	ldw	r4,4(r16)
1000919c:	00bfff04 	movi	r2,-4
100091a0:	208e703a 	and	r7,r4,r2
100091a4:	3c45c83a 	sub	r2,r7,r17
100091a8:	010003c4 	movi	r4,15
100091ac:	2080ee16 	blt	r4,r2,10009568 <_malloc_r+0x54c>
100091b0:	32400515 	stw	r9,20(r6)
100091b4:	32400415 	stw	r9,16(r6)
100091b8:	1000510e 	bge	r2,zero,10009300 <_malloc_r+0x2e4>
100091bc:	00807fc4 	movi	r2,511
100091c0:	11c0ce36 	bltu	r2,r7,100094fc <_malloc_r+0x4e0>
100091c4:	3808d0fa 	srli	r4,r7,3
100091c8:	01c00044 	movi	r7,1
100091cc:	30800117 	ldw	r2,4(r6)
100091d0:	210b883a 	add	r5,r4,r4
100091d4:	294b883a 	add	r5,r5,r5
100091d8:	2009d0ba 	srai	r4,r4,2
100091dc:	294b883a 	add	r5,r5,r5
100091e0:	298b883a 	add	r5,r5,r6
100091e4:	2a000217 	ldw	r8,8(r5)
100091e8:	3908983a 	sll	r4,r7,r4
100091ec:	81400315 	stw	r5,12(r16)
100091f0:	82000215 	stw	r8,8(r16)
100091f4:	2088b03a 	or	r4,r4,r2
100091f8:	2c000215 	stw	r16,8(r5)
100091fc:	31000115 	stw	r4,4(r6)
10009200:	44000315 	stw	r16,12(r8)
10009204:	1805d0ba 	srai	r2,r3,2
10009208:	01400044 	movi	r5,1
1000920c:	288a983a 	sll	r5,r5,r2
10009210:	21404336 	bltu	r4,r5,10009320 <_malloc_r+0x304>
10009214:	2144703a 	and	r2,r4,r5
10009218:	10000a1e 	bne	r2,zero,10009244 <_malloc_r+0x228>
1000921c:	00bfff04 	movi	r2,-4
10009220:	294b883a 	add	r5,r5,r5
10009224:	1886703a 	and	r3,r3,r2
10009228:	2144703a 	and	r2,r4,r5
1000922c:	18c00104 	addi	r3,r3,4
10009230:	1000041e 	bne	r2,zero,10009244 <_malloc_r+0x228>
10009234:	294b883a 	add	r5,r5,r5
10009238:	2144703a 	and	r2,r4,r5
1000923c:	18c00104 	addi	r3,r3,4
10009240:	103ffc26 	beq	r2,zero,10009234 <__alt_data_end+0xf8009234>
10009244:	023fff04 	movi	r8,-4
10009248:	01c003c4 	movi	r7,15
1000924c:	18c5883a 	add	r2,r3,r3
10009250:	1085883a 	add	r2,r2,r2
10009254:	1085883a 	add	r2,r2,r2
10009258:	9895883a 	add	r10,r19,r2
1000925c:	52c00304 	addi	r11,r10,12
10009260:	1819883a 	mov	r12,r3
10009264:	5c000017 	ldw	r16,0(r11)
10009268:	59bffd04 	addi	r6,r11,-12
1000926c:	8180041e 	bne	r16,r6,10009280 <_malloc_r+0x264>
10009270:	0000ce06 	br	100095ac <_malloc_r+0x590>
10009274:	2000d70e 	bge	r4,zero,100095d4 <_malloc_r+0x5b8>
10009278:	84000317 	ldw	r16,12(r16)
1000927c:	8180cb26 	beq	r16,r6,100095ac <_malloc_r+0x590>
10009280:	80800117 	ldw	r2,4(r16)
10009284:	1204703a 	and	r2,r2,r8
10009288:	1449c83a 	sub	r4,r2,r17
1000928c:	393ff90e 	bge	r7,r4,10009274 <__alt_data_end+0xf8009274>
10009290:	80800317 	ldw	r2,12(r16)
10009294:	80c00217 	ldw	r3,8(r16)
10009298:	89400054 	ori	r5,r17,1
1000929c:	81400115 	stw	r5,4(r16)
100092a0:	18800315 	stw	r2,12(r3)
100092a4:	10c00215 	stw	r3,8(r2)
100092a8:	8463883a 	add	r17,r16,r17
100092ac:	9c400515 	stw	r17,20(r19)
100092b0:	9c400415 	stw	r17,16(r19)
100092b4:	20800054 	ori	r2,r4,1
100092b8:	88800115 	stw	r2,4(r17)
100092bc:	8a400315 	stw	r9,12(r17)
100092c0:	8a400215 	stw	r9,8(r17)
100092c4:	8923883a 	add	r17,r17,r4
100092c8:	89000015 	stw	r4,0(r17)
100092cc:	9009883a 	mov	r4,r18
100092d0:	000ef7c0 	call	1000ef7c <__malloc_unlock>
100092d4:	80800204 	addi	r2,r16,8
100092d8:	003f7d06 	br	100090d0 <__alt_data_end+0xf80090d0>
100092dc:	00800304 	movi	r2,12
100092e0:	90800015 	stw	r2,0(r18)
100092e4:	0005883a 	mov	r2,zero
100092e8:	003f7906 	br	100090d0 <__alt_data_end+0xf80090d0>
100092ec:	01401f84 	movi	r5,126
100092f0:	01c00fc4 	movi	r7,63
100092f4:	003f8d06 	br	1000912c <__alt_data_end+0xf800912c>
100092f8:	81000317 	ldw	r4,12(r16)
100092fc:	003f6a06 	br	100090a8 <__alt_data_end+0xf80090a8>
10009300:	81c5883a 	add	r2,r16,r7
10009304:	10c00117 	ldw	r3,4(r2)
10009308:	9009883a 	mov	r4,r18
1000930c:	18c00054 	ori	r3,r3,1
10009310:	10c00115 	stw	r3,4(r2)
10009314:	000ef7c0 	call	1000ef7c <__malloc_unlock>
10009318:	80800204 	addi	r2,r16,8
1000931c:	003f6c06 	br	100090d0 <__alt_data_end+0xf80090d0>
10009320:	9c000217 	ldw	r16,8(r19)
10009324:	00bfff04 	movi	r2,-4
10009328:	85800117 	ldw	r22,4(r16)
1000932c:	b0ac703a 	and	r22,r22,r2
10009330:	b4400336 	bltu	r22,r17,10009340 <_malloc_r+0x324>
10009334:	b445c83a 	sub	r2,r22,r17
10009338:	00c003c4 	movi	r3,15
1000933c:	18805d16 	blt	r3,r2,100094b4 <_malloc_r+0x498>
10009340:	05c40074 	movhi	r23,4097
10009344:	00840074 	movhi	r2,4097
10009348:	bdcbd304 	addi	r23,r23,12108
1000934c:	1092af04 	addi	r2,r2,19132
10009350:	15400017 	ldw	r21,0(r2)
10009354:	b9000017 	ldw	r4,0(r23)
10009358:	00ffffc4 	movi	r3,-1
1000935c:	858d883a 	add	r6,r16,r22
10009360:	8d6b883a 	add	r21,r17,r21
10009364:	20c0e426 	beq	r4,r3,100096f8 <_malloc_r+0x6dc>
10009368:	ad4403c4 	addi	r21,r21,4111
1000936c:	00fc0004 	movi	r3,-4096
10009370:	a8ea703a 	and	r21,r21,r3
10009374:	9009883a 	mov	r4,r18
10009378:	a80b883a 	mov	r5,r21
1000937c:	d9800015 	stw	r6,0(sp)
10009380:	000b2c00 	call	1000b2c0 <_sbrk_r>
10009384:	00ffffc4 	movi	r3,-1
10009388:	1029883a 	mov	r20,r2
1000938c:	d9800017 	ldw	r6,0(sp)
10009390:	10c0a426 	beq	r2,r3,10009624 <_malloc_r+0x608>
10009394:	1180a236 	bltu	r2,r6,10009620 <_malloc_r+0x604>
10009398:	07040074 	movhi	fp,4097
1000939c:	e712b804 	addi	fp,fp,19168
100093a0:	e0c00017 	ldw	r3,0(fp)
100093a4:	a8c7883a 	add	r3,r21,r3
100093a8:	e0c00015 	stw	r3,0(fp)
100093ac:	3500da26 	beq	r6,r20,10009718 <_malloc_r+0x6fc>
100093b0:	b9000017 	ldw	r4,0(r23)
100093b4:	00bfffc4 	movi	r2,-1
100093b8:	2080e426 	beq	r4,r2,1000974c <_malloc_r+0x730>
100093bc:	a185c83a 	sub	r2,r20,r6
100093c0:	1885883a 	add	r2,r3,r2
100093c4:	e0800015 	stw	r2,0(fp)
100093c8:	a0c001cc 	andi	r3,r20,7
100093cc:	1800b526 	beq	r3,zero,100096a4 <_malloc_r+0x688>
100093d0:	a0e9c83a 	sub	r20,r20,r3
100093d4:	00840204 	movi	r2,4104
100093d8:	a5000204 	addi	r20,r20,8
100093dc:	10c7c83a 	sub	r3,r2,r3
100093e0:	a545883a 	add	r2,r20,r21
100093e4:	1083ffcc 	andi	r2,r2,4095
100093e8:	18abc83a 	sub	r21,r3,r2
100093ec:	9009883a 	mov	r4,r18
100093f0:	a80b883a 	mov	r5,r21
100093f4:	000b2c00 	call	1000b2c0 <_sbrk_r>
100093f8:	00ffffc4 	movi	r3,-1
100093fc:	10c0d026 	beq	r2,r3,10009740 <_malloc_r+0x724>
10009400:	1507c83a 	sub	r3,r2,r20
10009404:	a8c7883a 	add	r3,r21,r3
10009408:	18c00054 	ori	r3,r3,1
1000940c:	e0800017 	ldw	r2,0(fp)
10009410:	9d000215 	stw	r20,8(r19)
10009414:	a0c00115 	stw	r3,4(r20)
10009418:	a887883a 	add	r3,r21,r2
1000941c:	e0c00015 	stw	r3,0(fp)
10009420:	84c00e26 	beq	r16,r19,1000945c <_malloc_r+0x440>
10009424:	018003c4 	movi	r6,15
10009428:	3580a02e 	bgeu	r6,r22,100096ac <_malloc_r+0x690>
1000942c:	81400117 	ldw	r5,4(r16)
10009430:	013ffe04 	movi	r4,-8
10009434:	b0bffd04 	addi	r2,r22,-12
10009438:	1104703a 	and	r2,r2,r4
1000943c:	2900004c 	andi	r4,r5,1
10009440:	1108b03a 	or	r4,r2,r4
10009444:	81000115 	stw	r4,4(r16)
10009448:	01400144 	movi	r5,5
1000944c:	8089883a 	add	r4,r16,r2
10009450:	21400115 	stw	r5,4(r4)
10009454:	21400215 	stw	r5,8(r4)
10009458:	3080c036 	bltu	r6,r2,1000975c <_malloc_r+0x740>
1000945c:	00840074 	movhi	r2,4097
10009460:	1092ae04 	addi	r2,r2,19128
10009464:	11000017 	ldw	r4,0(r2)
10009468:	20c0012e 	bgeu	r4,r3,10009470 <_malloc_r+0x454>
1000946c:	10c00015 	stw	r3,0(r2)
10009470:	00840074 	movhi	r2,4097
10009474:	1092ad04 	addi	r2,r2,19124
10009478:	11000017 	ldw	r4,0(r2)
1000947c:	9c000217 	ldw	r16,8(r19)
10009480:	20c0012e 	bgeu	r4,r3,10009488 <_malloc_r+0x46c>
10009484:	10c00015 	stw	r3,0(r2)
10009488:	80c00117 	ldw	r3,4(r16)
1000948c:	00bfff04 	movi	r2,-4
10009490:	1886703a 	and	r3,r3,r2
10009494:	1c45c83a 	sub	r2,r3,r17
10009498:	1c400236 	bltu	r3,r17,100094a4 <_malloc_r+0x488>
1000949c:	00c003c4 	movi	r3,15
100094a0:	18800416 	blt	r3,r2,100094b4 <_malloc_r+0x498>
100094a4:	9009883a 	mov	r4,r18
100094a8:	000ef7c0 	call	1000ef7c <__malloc_unlock>
100094ac:	0005883a 	mov	r2,zero
100094b0:	003f0706 	br	100090d0 <__alt_data_end+0xf80090d0>
100094b4:	88c00054 	ori	r3,r17,1
100094b8:	80c00115 	stw	r3,4(r16)
100094bc:	8463883a 	add	r17,r16,r17
100094c0:	10800054 	ori	r2,r2,1
100094c4:	9c400215 	stw	r17,8(r19)
100094c8:	88800115 	stw	r2,4(r17)
100094cc:	9009883a 	mov	r4,r18
100094d0:	000ef7c0 	call	1000ef7c <__malloc_unlock>
100094d4:	80800204 	addi	r2,r16,8
100094d8:	003efd06 	br	100090d0 <__alt_data_end+0xf80090d0>
100094dc:	00800504 	movi	r2,20
100094e0:	10c0482e 	bgeu	r2,r3,10009604 <_malloc_r+0x5e8>
100094e4:	00801504 	movi	r2,84
100094e8:	10c06836 	bltu	r2,r3,1000968c <_malloc_r+0x670>
100094ec:	8806d33a 	srli	r3,r17,12
100094f0:	19c01b84 	addi	r7,r3,110
100094f4:	39cb883a 	add	r5,r7,r7
100094f8:	003f0c06 	br	1000912c <__alt_data_end+0xf800912c>
100094fc:	3804d27a 	srli	r2,r7,9
10009500:	01000104 	movi	r4,4
10009504:	2080422e 	bgeu	r4,r2,10009610 <_malloc_r+0x5f4>
10009508:	01000504 	movi	r4,20
1000950c:	20807c36 	bltu	r4,r2,10009700 <_malloc_r+0x6e4>
10009510:	110016c4 	addi	r4,r2,91
10009514:	210b883a 	add	r5,r4,r4
10009518:	294b883a 	add	r5,r5,r5
1000951c:	294b883a 	add	r5,r5,r5
10009520:	994b883a 	add	r5,r19,r5
10009524:	28800217 	ldw	r2,8(r5)
10009528:	02040074 	movhi	r8,4097
1000952c:	42064c04 	addi	r8,r8,6448
10009530:	11406326 	beq	r2,r5,100096c0 <_malloc_r+0x6a4>
10009534:	01bfff04 	movi	r6,-4
10009538:	11000117 	ldw	r4,4(r2)
1000953c:	2188703a 	and	r4,r4,r6
10009540:	3900022e 	bgeu	r7,r4,1000954c <_malloc_r+0x530>
10009544:	10800217 	ldw	r2,8(r2)
10009548:	28bffb1e 	bne	r5,r2,10009538 <__alt_data_end+0xf8009538>
1000954c:	11800317 	ldw	r6,12(r2)
10009550:	99000117 	ldw	r4,4(r19)
10009554:	81800315 	stw	r6,12(r16)
10009558:	80800215 	stw	r2,8(r16)
1000955c:	34000215 	stw	r16,8(r6)
10009560:	14000315 	stw	r16,12(r2)
10009564:	003f2706 	br	10009204 <__alt_data_end+0xf8009204>
10009568:	88c00054 	ori	r3,r17,1
1000956c:	80c00115 	stw	r3,4(r16)
10009570:	8463883a 	add	r17,r16,r17
10009574:	34400515 	stw	r17,20(r6)
10009578:	34400415 	stw	r17,16(r6)
1000957c:	10c00054 	ori	r3,r2,1
10009580:	8a400315 	stw	r9,12(r17)
10009584:	8a400215 	stw	r9,8(r17)
10009588:	88c00115 	stw	r3,4(r17)
1000958c:	88a3883a 	add	r17,r17,r2
10009590:	88800015 	stw	r2,0(r17)
10009594:	9009883a 	mov	r4,r18
10009598:	000ef7c0 	call	1000ef7c <__malloc_unlock>
1000959c:	80800204 	addi	r2,r16,8
100095a0:	003ecb06 	br	100090d0 <__alt_data_end+0xf80090d0>
100095a4:	31000117 	ldw	r4,4(r6)
100095a8:	003f1606 	br	10009204 <__alt_data_end+0xf8009204>
100095ac:	63000044 	addi	r12,r12,1
100095b0:	608000cc 	andi	r2,r12,3
100095b4:	5ac00204 	addi	r11,r11,8
100095b8:	103f2a1e 	bne	r2,zero,10009264 <__alt_data_end+0xf8009264>
100095bc:	00002106 	br	10009644 <_malloc_r+0x628>
100095c0:	80800204 	addi	r2,r16,8
100095c4:	84000517 	ldw	r16,20(r16)
100095c8:	143eb31e 	bne	r2,r16,10009098 <__alt_data_end+0xf8009098>
100095cc:	18c00084 	addi	r3,r3,2
100095d0:	003eec06 	br	10009184 <__alt_data_end+0xf8009184>
100095d4:	8085883a 	add	r2,r16,r2
100095d8:	10c00117 	ldw	r3,4(r2)
100095dc:	81000317 	ldw	r4,12(r16)
100095e0:	81400217 	ldw	r5,8(r16)
100095e4:	18c00054 	ori	r3,r3,1
100095e8:	10c00115 	stw	r3,4(r2)
100095ec:	29000315 	stw	r4,12(r5)
100095f0:	21400215 	stw	r5,8(r4)
100095f4:	9009883a 	mov	r4,r18
100095f8:	000ef7c0 	call	1000ef7c <__malloc_unlock>
100095fc:	80800204 	addi	r2,r16,8
10009600:	003eb306 	br	100090d0 <__alt_data_end+0xf80090d0>
10009604:	19c016c4 	addi	r7,r3,91
10009608:	39cb883a 	add	r5,r7,r7
1000960c:	003ec706 	br	1000912c <__alt_data_end+0xf800912c>
10009610:	3804d1ba 	srli	r2,r7,6
10009614:	11000e04 	addi	r4,r2,56
10009618:	210b883a 	add	r5,r4,r4
1000961c:	003fbe06 	br	10009518 <__alt_data_end+0xf8009518>
10009620:	84ff5d26 	beq	r16,r19,10009398 <__alt_data_end+0xf8009398>
10009624:	9c000217 	ldw	r16,8(r19)
10009628:	00bfff04 	movi	r2,-4
1000962c:	80c00117 	ldw	r3,4(r16)
10009630:	1886703a 	and	r3,r3,r2
10009634:	003f9706 	br	10009494 <__alt_data_end+0xf8009494>
10009638:	52800017 	ldw	r10,0(r10)
1000963c:	18ffffc4 	addi	r3,r3,-1
10009640:	50805c1e 	bne	r10,r2,100097b4 <_malloc_r+0x798>
10009644:	190000cc 	andi	r4,r3,3
10009648:	50bffe04 	addi	r2,r10,-8
1000964c:	203ffa1e 	bne	r4,zero,10009638 <__alt_data_end+0xf8009638>
10009650:	98800117 	ldw	r2,4(r19)
10009654:	0146303a 	nor	r3,zero,r5
10009658:	1884703a 	and	r2,r3,r2
1000965c:	98800115 	stw	r2,4(r19)
10009660:	294b883a 	add	r5,r5,r5
10009664:	117f2e36 	bltu	r2,r5,10009320 <__alt_data_end+0xf8009320>
10009668:	283f2d26 	beq	r5,zero,10009320 <__alt_data_end+0xf8009320>
1000966c:	1146703a 	and	r3,r2,r5
10009670:	1800521e 	bne	r3,zero,100097bc <_malloc_r+0x7a0>
10009674:	6007883a 	mov	r3,r12
10009678:	294b883a 	add	r5,r5,r5
1000967c:	1148703a 	and	r4,r2,r5
10009680:	18c00104 	addi	r3,r3,4
10009684:	203ffc26 	beq	r4,zero,10009678 <__alt_data_end+0xf8009678>
10009688:	003ef006 	br	1000924c <__alt_data_end+0xf800924c>
1000968c:	00805504 	movi	r2,340
10009690:	10c01336 	bltu	r2,r3,100096e0 <_malloc_r+0x6c4>
10009694:	8806d3fa 	srli	r3,r17,15
10009698:	19c01dc4 	addi	r7,r3,119
1000969c:	39cb883a 	add	r5,r7,r7
100096a0:	003ea206 	br	1000912c <__alt_data_end+0xf800912c>
100096a4:	00c40004 	movi	r3,4096
100096a8:	003f4d06 	br	100093e0 <__alt_data_end+0xf80093e0>
100096ac:	00800044 	movi	r2,1
100096b0:	a0800115 	stw	r2,4(r20)
100096b4:	a021883a 	mov	r16,r20
100096b8:	0007883a 	mov	r3,zero
100096bc:	003f7506 	br	10009494 <__alt_data_end+0xf8009494>
100096c0:	200bd0ba 	srai	r5,r4,2
100096c4:	01800044 	movi	r6,1
100096c8:	41000117 	ldw	r4,4(r8)
100096cc:	314a983a 	sll	r5,r6,r5
100096d0:	100d883a 	mov	r6,r2
100096d4:	2908b03a 	or	r4,r5,r4
100096d8:	41000115 	stw	r4,4(r8)
100096dc:	003f9d06 	br	10009554 <__alt_data_end+0xf8009554>
100096e0:	00815504 	movi	r2,1364
100096e4:	10c01336 	bltu	r2,r3,10009734 <_malloc_r+0x718>
100096e8:	8806d4ba 	srli	r3,r17,18
100096ec:	19c01f04 	addi	r7,r3,124
100096f0:	39cb883a 	add	r5,r7,r7
100096f4:	003e8d06 	br	1000912c <__alt_data_end+0xf800912c>
100096f8:	ad400404 	addi	r21,r21,16
100096fc:	003f1d06 	br	10009374 <__alt_data_end+0xf8009374>
10009700:	01001504 	movi	r4,84
10009704:	20801c36 	bltu	r4,r2,10009778 <_malloc_r+0x75c>
10009708:	3804d33a 	srli	r2,r7,12
1000970c:	11001b84 	addi	r4,r2,110
10009710:	210b883a 	add	r5,r4,r4
10009714:	003f8006 	br	10009518 <__alt_data_end+0xf8009518>
10009718:	3083ffcc 	andi	r2,r6,4095
1000971c:	103f241e 	bne	r2,zero,100093b0 <__alt_data_end+0xf80093b0>
10009720:	99000217 	ldw	r4,8(r19)
10009724:	ad85883a 	add	r2,r21,r22
10009728:	10800054 	ori	r2,r2,1
1000972c:	20800115 	stw	r2,4(r4)
10009730:	003f4a06 	br	1000945c <__alt_data_end+0xf800945c>
10009734:	01403f04 	movi	r5,252
10009738:	01c01f84 	movi	r7,126
1000973c:	003e7b06 	br	1000912c <__alt_data_end+0xf800912c>
10009740:	00c00044 	movi	r3,1
10009744:	002b883a 	mov	r21,zero
10009748:	003f3006 	br	1000940c <__alt_data_end+0xf800940c>
1000974c:	00840074 	movhi	r2,4097
10009750:	108bd304 	addi	r2,r2,12108
10009754:	15000015 	stw	r20,0(r2)
10009758:	003f1b06 	br	100093c8 <__alt_data_end+0xf80093c8>
1000975c:	9009883a 	mov	r4,r18
10009760:	81400204 	addi	r5,r16,8
10009764:	00084800 	call	10008480 <_free_r>
10009768:	00840074 	movhi	r2,4097
1000976c:	1092b804 	addi	r2,r2,19168
10009770:	10c00017 	ldw	r3,0(r2)
10009774:	003f3906 	br	1000945c <__alt_data_end+0xf800945c>
10009778:	01005504 	movi	r4,340
1000977c:	20800436 	bltu	r4,r2,10009790 <_malloc_r+0x774>
10009780:	3804d3fa 	srli	r2,r7,15
10009784:	11001dc4 	addi	r4,r2,119
10009788:	210b883a 	add	r5,r4,r4
1000978c:	003f6206 	br	10009518 <__alt_data_end+0xf8009518>
10009790:	01015504 	movi	r4,1364
10009794:	20800436 	bltu	r4,r2,100097a8 <_malloc_r+0x78c>
10009798:	3804d4ba 	srli	r2,r7,18
1000979c:	11001f04 	addi	r4,r2,124
100097a0:	210b883a 	add	r5,r4,r4
100097a4:	003f5c06 	br	10009518 <__alt_data_end+0xf8009518>
100097a8:	01403f04 	movi	r5,252
100097ac:	01001f84 	movi	r4,126
100097b0:	003f5906 	br	10009518 <__alt_data_end+0xf8009518>
100097b4:	98800117 	ldw	r2,4(r19)
100097b8:	003fa906 	br	10009660 <__alt_data_end+0xf8009660>
100097bc:	6007883a 	mov	r3,r12
100097c0:	003ea206 	br	1000924c <__alt_data_end+0xf800924c>

100097c4 <memchr>:
100097c4:	208000cc 	andi	r2,r4,3
100097c8:	280f883a 	mov	r7,r5
100097cc:	10003526 	beq	r2,zero,100098a4 <memchr+0xe0>
100097d0:	30bfffc4 	addi	r2,r6,-1
100097d4:	30001b26 	beq	r6,zero,10009844 <memchr+0x80>
100097d8:	21800003 	ldbu	r6,0(r4)
100097dc:	28c03fcc 	andi	r3,r5,255
100097e0:	30c01a26 	beq	r6,r3,1000984c <memchr+0x88>
100097e4:	180d883a 	mov	r6,r3
100097e8:	00000406 	br	100097fc <memchr+0x38>
100097ec:	10001526 	beq	r2,zero,10009844 <memchr+0x80>
100097f0:	20c00003 	ldbu	r3,0(r4)
100097f4:	10bfffc4 	addi	r2,r2,-1
100097f8:	19801426 	beq	r3,r6,1000984c <memchr+0x88>
100097fc:	21000044 	addi	r4,r4,1
10009800:	20c000cc 	andi	r3,r4,3
10009804:	183ff91e 	bne	r3,zero,100097ec <__alt_data_end+0xf80097ec>
10009808:	024000c4 	movi	r9,3
1000980c:	48801136 	bltu	r9,r2,10009854 <memchr+0x90>
10009810:	10000c26 	beq	r2,zero,10009844 <memchr+0x80>
10009814:	20c00003 	ldbu	r3,0(r4)
10009818:	29403fcc 	andi	r5,r5,255
1000981c:	19400b26 	beq	r3,r5,1000984c <memchr+0x88>
10009820:	20c00044 	addi	r3,r4,1
10009824:	2085883a 	add	r2,r4,r2
10009828:	39803fcc 	andi	r6,r7,255
1000982c:	00000306 	br	1000983c <memchr+0x78>
10009830:	18c00044 	addi	r3,r3,1
10009834:	197fffc3 	ldbu	r5,-1(r3)
10009838:	29800426 	beq	r5,r6,1000984c <memchr+0x88>
1000983c:	1809883a 	mov	r4,r3
10009840:	18bffb1e 	bne	r3,r2,10009830 <__alt_data_end+0xf8009830>
10009844:	0005883a 	mov	r2,zero
10009848:	f800283a 	ret
1000984c:	2005883a 	mov	r2,r4
10009850:	f800283a 	ret
10009854:	28c03fcc 	andi	r3,r5,255
10009858:	1810923a 	slli	r8,r3,8
1000985c:	02ffbff4 	movhi	r11,65279
10009860:	02a02074 	movhi	r10,32897
10009864:	40c6b03a 	or	r3,r8,r3
10009868:	1810943a 	slli	r8,r3,16
1000986c:	5affbfc4 	addi	r11,r11,-257
10009870:	52a02004 	addi	r10,r10,-32640
10009874:	40d0b03a 	or	r8,r8,r3
10009878:	20c00017 	ldw	r3,0(r4)
1000987c:	40c6f03a 	xor	r3,r8,r3
10009880:	1acd883a 	add	r6,r3,r11
10009884:	00c6303a 	nor	r3,zero,r3
10009888:	30c6703a 	and	r3,r6,r3
1000988c:	1a86703a 	and	r3,r3,r10
10009890:	183fdf1e 	bne	r3,zero,10009810 <__alt_data_end+0xf8009810>
10009894:	10bfff04 	addi	r2,r2,-4
10009898:	21000104 	addi	r4,r4,4
1000989c:	48bff636 	bltu	r9,r2,10009878 <__alt_data_end+0xf8009878>
100098a0:	003fdb06 	br	10009810 <__alt_data_end+0xf8009810>
100098a4:	3005883a 	mov	r2,r6
100098a8:	003fd706 	br	10009808 <__alt_data_end+0xf8009808>

100098ac <memcpy>:
100098ac:	deffff04 	addi	sp,sp,-4
100098b0:	dc000015 	stw	r16,0(sp)
100098b4:	00c003c4 	movi	r3,15
100098b8:	2005883a 	mov	r2,r4
100098bc:	1980432e 	bgeu	r3,r6,100099cc <memcpy+0x120>
100098c0:	2146b03a 	or	r3,r4,r5
100098c4:	18c000cc 	andi	r3,r3,3
100098c8:	1800421e 	bne	r3,zero,100099d4 <memcpy+0x128>
100098cc:	343ffc04 	addi	r16,r6,-16
100098d0:	8020d13a 	srli	r16,r16,4
100098d4:	28c00104 	addi	r3,r5,4
100098d8:	23400104 	addi	r13,r4,4
100098dc:	801e913a 	slli	r15,r16,4
100098e0:	2b000204 	addi	r12,r5,8
100098e4:	22c00204 	addi	r11,r4,8
100098e8:	7bc00504 	addi	r15,r15,20
100098ec:	2a800304 	addi	r10,r5,12
100098f0:	22400304 	addi	r9,r4,12
100098f4:	2bdf883a 	add	r15,r5,r15
100098f8:	2811883a 	mov	r8,r5
100098fc:	200f883a 	mov	r7,r4
10009900:	41000017 	ldw	r4,0(r8)
10009904:	39c00404 	addi	r7,r7,16
10009908:	18c00404 	addi	r3,r3,16
1000990c:	393ffc15 	stw	r4,-16(r7)
10009910:	1bbffc17 	ldw	r14,-16(r3)
10009914:	6b400404 	addi	r13,r13,16
10009918:	5ac00404 	addi	r11,r11,16
1000991c:	6bbffc15 	stw	r14,-16(r13)
10009920:	63800017 	ldw	r14,0(r12)
10009924:	4a400404 	addi	r9,r9,16
10009928:	42000404 	addi	r8,r8,16
1000992c:	5bbffc15 	stw	r14,-16(r11)
10009930:	53800017 	ldw	r14,0(r10)
10009934:	63000404 	addi	r12,r12,16
10009938:	52800404 	addi	r10,r10,16
1000993c:	4bbffc15 	stw	r14,-16(r9)
10009940:	1bffef1e 	bne	r3,r15,10009900 <__alt_data_end+0xf8009900>
10009944:	81c00044 	addi	r7,r16,1
10009948:	380e913a 	slli	r7,r7,4
1000994c:	310003cc 	andi	r4,r6,15
10009950:	02c000c4 	movi	r11,3
10009954:	11c7883a 	add	r3,r2,r7
10009958:	29cb883a 	add	r5,r5,r7
1000995c:	59001f2e 	bgeu	r11,r4,100099dc <memcpy+0x130>
10009960:	1813883a 	mov	r9,r3
10009964:	2811883a 	mov	r8,r5
10009968:	200f883a 	mov	r7,r4
1000996c:	42800017 	ldw	r10,0(r8)
10009970:	4a400104 	addi	r9,r9,4
10009974:	39ffff04 	addi	r7,r7,-4
10009978:	4abfff15 	stw	r10,-4(r9)
1000997c:	42000104 	addi	r8,r8,4
10009980:	59fffa36 	bltu	r11,r7,1000996c <__alt_data_end+0xf800996c>
10009984:	213fff04 	addi	r4,r4,-4
10009988:	2008d0ba 	srli	r4,r4,2
1000998c:	318000cc 	andi	r6,r6,3
10009990:	21000044 	addi	r4,r4,1
10009994:	2109883a 	add	r4,r4,r4
10009998:	2109883a 	add	r4,r4,r4
1000999c:	1907883a 	add	r3,r3,r4
100099a0:	290b883a 	add	r5,r5,r4
100099a4:	30000626 	beq	r6,zero,100099c0 <memcpy+0x114>
100099a8:	198d883a 	add	r6,r3,r6
100099ac:	29c00003 	ldbu	r7,0(r5)
100099b0:	18c00044 	addi	r3,r3,1
100099b4:	29400044 	addi	r5,r5,1
100099b8:	19ffffc5 	stb	r7,-1(r3)
100099bc:	19bffb1e 	bne	r3,r6,100099ac <__alt_data_end+0xf80099ac>
100099c0:	dc000017 	ldw	r16,0(sp)
100099c4:	dec00104 	addi	sp,sp,4
100099c8:	f800283a 	ret
100099cc:	2007883a 	mov	r3,r4
100099d0:	003ff406 	br	100099a4 <__alt_data_end+0xf80099a4>
100099d4:	2007883a 	mov	r3,r4
100099d8:	003ff306 	br	100099a8 <__alt_data_end+0xf80099a8>
100099dc:	200d883a 	mov	r6,r4
100099e0:	003ff006 	br	100099a4 <__alt_data_end+0xf80099a4>

100099e4 <memmove>:
100099e4:	2005883a 	mov	r2,r4
100099e8:	29000b2e 	bgeu	r5,r4,10009a18 <memmove+0x34>
100099ec:	298f883a 	add	r7,r5,r6
100099f0:	21c0092e 	bgeu	r4,r7,10009a18 <memmove+0x34>
100099f4:	2187883a 	add	r3,r4,r6
100099f8:	198bc83a 	sub	r5,r3,r6
100099fc:	30004b26 	beq	r6,zero,10009b2c <memmove+0x148>
10009a00:	39ffffc4 	addi	r7,r7,-1
10009a04:	39000003 	ldbu	r4,0(r7)
10009a08:	18ffffc4 	addi	r3,r3,-1
10009a0c:	19000005 	stb	r4,0(r3)
10009a10:	197ffb1e 	bne	r3,r5,10009a00 <__alt_data_end+0xf8009a00>
10009a14:	f800283a 	ret
10009a18:	00c003c4 	movi	r3,15
10009a1c:	1980412e 	bgeu	r3,r6,10009b24 <memmove+0x140>
10009a20:	1146b03a 	or	r3,r2,r5
10009a24:	18c000cc 	andi	r3,r3,3
10009a28:	1800411e 	bne	r3,zero,10009b30 <memmove+0x14c>
10009a2c:	33fffc04 	addi	r15,r6,-16
10009a30:	781ed13a 	srli	r15,r15,4
10009a34:	28c00104 	addi	r3,r5,4
10009a38:	13400104 	addi	r13,r2,4
10009a3c:	781c913a 	slli	r14,r15,4
10009a40:	2b000204 	addi	r12,r5,8
10009a44:	12c00204 	addi	r11,r2,8
10009a48:	73800504 	addi	r14,r14,20
10009a4c:	2a800304 	addi	r10,r5,12
10009a50:	12400304 	addi	r9,r2,12
10009a54:	2b9d883a 	add	r14,r5,r14
10009a58:	2811883a 	mov	r8,r5
10009a5c:	100f883a 	mov	r7,r2
10009a60:	41000017 	ldw	r4,0(r8)
10009a64:	39c00404 	addi	r7,r7,16
10009a68:	18c00404 	addi	r3,r3,16
10009a6c:	393ffc15 	stw	r4,-16(r7)
10009a70:	193ffc17 	ldw	r4,-16(r3)
10009a74:	6b400404 	addi	r13,r13,16
10009a78:	5ac00404 	addi	r11,r11,16
10009a7c:	693ffc15 	stw	r4,-16(r13)
10009a80:	61000017 	ldw	r4,0(r12)
10009a84:	4a400404 	addi	r9,r9,16
10009a88:	42000404 	addi	r8,r8,16
10009a8c:	593ffc15 	stw	r4,-16(r11)
10009a90:	51000017 	ldw	r4,0(r10)
10009a94:	63000404 	addi	r12,r12,16
10009a98:	52800404 	addi	r10,r10,16
10009a9c:	493ffc15 	stw	r4,-16(r9)
10009aa0:	1bbfef1e 	bne	r3,r14,10009a60 <__alt_data_end+0xf8009a60>
10009aa4:	79000044 	addi	r4,r15,1
10009aa8:	2008913a 	slli	r4,r4,4
10009aac:	328003cc 	andi	r10,r6,15
10009ab0:	02c000c4 	movi	r11,3
10009ab4:	1107883a 	add	r3,r2,r4
10009ab8:	290b883a 	add	r5,r5,r4
10009abc:	5a801e2e 	bgeu	r11,r10,10009b38 <memmove+0x154>
10009ac0:	1813883a 	mov	r9,r3
10009ac4:	2811883a 	mov	r8,r5
10009ac8:	500f883a 	mov	r7,r10
10009acc:	41000017 	ldw	r4,0(r8)
10009ad0:	4a400104 	addi	r9,r9,4
10009ad4:	39ffff04 	addi	r7,r7,-4
10009ad8:	493fff15 	stw	r4,-4(r9)
10009adc:	42000104 	addi	r8,r8,4
10009ae0:	59fffa36 	bltu	r11,r7,10009acc <__alt_data_end+0xf8009acc>
10009ae4:	513fff04 	addi	r4,r10,-4
10009ae8:	2008d0ba 	srli	r4,r4,2
10009aec:	318000cc 	andi	r6,r6,3
10009af0:	21000044 	addi	r4,r4,1
10009af4:	2109883a 	add	r4,r4,r4
10009af8:	2109883a 	add	r4,r4,r4
10009afc:	1907883a 	add	r3,r3,r4
10009b00:	290b883a 	add	r5,r5,r4
10009b04:	30000926 	beq	r6,zero,10009b2c <memmove+0x148>
10009b08:	198d883a 	add	r6,r3,r6
10009b0c:	29c00003 	ldbu	r7,0(r5)
10009b10:	18c00044 	addi	r3,r3,1
10009b14:	29400044 	addi	r5,r5,1
10009b18:	19ffffc5 	stb	r7,-1(r3)
10009b1c:	19bffb1e 	bne	r3,r6,10009b0c <__alt_data_end+0xf8009b0c>
10009b20:	f800283a 	ret
10009b24:	1007883a 	mov	r3,r2
10009b28:	003ff606 	br	10009b04 <__alt_data_end+0xf8009b04>
10009b2c:	f800283a 	ret
10009b30:	1007883a 	mov	r3,r2
10009b34:	003ff406 	br	10009b08 <__alt_data_end+0xf8009b08>
10009b38:	500d883a 	mov	r6,r10
10009b3c:	003ff106 	br	10009b04 <__alt_data_end+0xf8009b04>

10009b40 <memset>:
10009b40:	20c000cc 	andi	r3,r4,3
10009b44:	2005883a 	mov	r2,r4
10009b48:	18004326 	beq	r3,zero,10009c58 <memset+0x118>
10009b4c:	31ffffc4 	addi	r7,r6,-1
10009b50:	30004026 	beq	r6,zero,10009c54 <memset+0x114>
10009b54:	2813883a 	mov	r9,r5
10009b58:	200d883a 	mov	r6,r4
10009b5c:	2007883a 	mov	r3,r4
10009b60:	00000406 	br	10009b74 <memset+0x34>
10009b64:	3a3fffc4 	addi	r8,r7,-1
10009b68:	31800044 	addi	r6,r6,1
10009b6c:	38003926 	beq	r7,zero,10009c54 <memset+0x114>
10009b70:	400f883a 	mov	r7,r8
10009b74:	18c00044 	addi	r3,r3,1
10009b78:	32400005 	stb	r9,0(r6)
10009b7c:	1a0000cc 	andi	r8,r3,3
10009b80:	403ff81e 	bne	r8,zero,10009b64 <__alt_data_end+0xf8009b64>
10009b84:	010000c4 	movi	r4,3
10009b88:	21c02d2e 	bgeu	r4,r7,10009c40 <memset+0x100>
10009b8c:	29803fcc 	andi	r6,r5,255
10009b90:	3008923a 	slli	r4,r6,8
10009b94:	218cb03a 	or	r6,r4,r6
10009b98:	3008943a 	slli	r4,r6,16
10009b9c:	218cb03a 	or	r6,r4,r6
10009ba0:	010003c4 	movi	r4,15
10009ba4:	21c0182e 	bgeu	r4,r7,10009c08 <memset+0xc8>
10009ba8:	3b3ffc04 	addi	r12,r7,-16
10009bac:	6018d13a 	srli	r12,r12,4
10009bb0:	1a000104 	addi	r8,r3,4
10009bb4:	1ac00204 	addi	r11,r3,8
10009bb8:	6008913a 	slli	r4,r12,4
10009bbc:	1a800304 	addi	r10,r3,12
10009bc0:	1813883a 	mov	r9,r3
10009bc4:	21000504 	addi	r4,r4,20
10009bc8:	1909883a 	add	r4,r3,r4
10009bcc:	49800015 	stw	r6,0(r9)
10009bd0:	41800015 	stw	r6,0(r8)
10009bd4:	59800015 	stw	r6,0(r11)
10009bd8:	51800015 	stw	r6,0(r10)
10009bdc:	42000404 	addi	r8,r8,16
10009be0:	4a400404 	addi	r9,r9,16
10009be4:	5ac00404 	addi	r11,r11,16
10009be8:	52800404 	addi	r10,r10,16
10009bec:	413ff71e 	bne	r8,r4,10009bcc <__alt_data_end+0xf8009bcc>
10009bf0:	63000044 	addi	r12,r12,1
10009bf4:	6018913a 	slli	r12,r12,4
10009bf8:	39c003cc 	andi	r7,r7,15
10009bfc:	010000c4 	movi	r4,3
10009c00:	1b07883a 	add	r3,r3,r12
10009c04:	21c00e2e 	bgeu	r4,r7,10009c40 <memset+0x100>
10009c08:	1813883a 	mov	r9,r3
10009c0c:	3811883a 	mov	r8,r7
10009c10:	010000c4 	movi	r4,3
10009c14:	49800015 	stw	r6,0(r9)
10009c18:	423fff04 	addi	r8,r8,-4
10009c1c:	4a400104 	addi	r9,r9,4
10009c20:	223ffc36 	bltu	r4,r8,10009c14 <__alt_data_end+0xf8009c14>
10009c24:	393fff04 	addi	r4,r7,-4
10009c28:	2008d0ba 	srli	r4,r4,2
10009c2c:	39c000cc 	andi	r7,r7,3
10009c30:	21000044 	addi	r4,r4,1
10009c34:	2109883a 	add	r4,r4,r4
10009c38:	2109883a 	add	r4,r4,r4
10009c3c:	1907883a 	add	r3,r3,r4
10009c40:	38000426 	beq	r7,zero,10009c54 <memset+0x114>
10009c44:	19cf883a 	add	r7,r3,r7
10009c48:	19400005 	stb	r5,0(r3)
10009c4c:	18c00044 	addi	r3,r3,1
10009c50:	19fffd1e 	bne	r3,r7,10009c48 <__alt_data_end+0xf8009c48>
10009c54:	f800283a 	ret
10009c58:	2007883a 	mov	r3,r4
10009c5c:	300f883a 	mov	r7,r6
10009c60:	003fc806 	br	10009b84 <__alt_data_end+0xf8009b84>

10009c64 <_Balloc>:
10009c64:	20801317 	ldw	r2,76(r4)
10009c68:	defffc04 	addi	sp,sp,-16
10009c6c:	dc400115 	stw	r17,4(sp)
10009c70:	dc000015 	stw	r16,0(sp)
10009c74:	dfc00315 	stw	ra,12(sp)
10009c78:	dc800215 	stw	r18,8(sp)
10009c7c:	2023883a 	mov	r17,r4
10009c80:	2821883a 	mov	r16,r5
10009c84:	10000f26 	beq	r2,zero,10009cc4 <_Balloc+0x60>
10009c88:	8407883a 	add	r3,r16,r16
10009c8c:	18c7883a 	add	r3,r3,r3
10009c90:	10c7883a 	add	r3,r2,r3
10009c94:	18800017 	ldw	r2,0(r3)
10009c98:	10001126 	beq	r2,zero,10009ce0 <_Balloc+0x7c>
10009c9c:	11000017 	ldw	r4,0(r2)
10009ca0:	19000015 	stw	r4,0(r3)
10009ca4:	10000415 	stw	zero,16(r2)
10009ca8:	10000315 	stw	zero,12(r2)
10009cac:	dfc00317 	ldw	ra,12(sp)
10009cb0:	dc800217 	ldw	r18,8(sp)
10009cb4:	dc400117 	ldw	r17,4(sp)
10009cb8:	dc000017 	ldw	r16,0(sp)
10009cbc:	dec00404 	addi	sp,sp,16
10009cc0:	f800283a 	ret
10009cc4:	01400104 	movi	r5,4
10009cc8:	01800844 	movi	r6,33
10009ccc:	000cb000 	call	1000cb00 <_calloc_r>
10009cd0:	88801315 	stw	r2,76(r17)
10009cd4:	103fec1e 	bne	r2,zero,10009c88 <__alt_data_end+0xf8009c88>
10009cd8:	0005883a 	mov	r2,zero
10009cdc:	003ff306 	br	10009cac <__alt_data_end+0xf8009cac>
10009ce0:	01400044 	movi	r5,1
10009ce4:	2c24983a 	sll	r18,r5,r16
10009ce8:	8809883a 	mov	r4,r17
10009cec:	91800144 	addi	r6,r18,5
10009cf0:	318d883a 	add	r6,r6,r6
10009cf4:	318d883a 	add	r6,r6,r6
10009cf8:	000cb000 	call	1000cb00 <_calloc_r>
10009cfc:	103ff626 	beq	r2,zero,10009cd8 <__alt_data_end+0xf8009cd8>
10009d00:	14000115 	stw	r16,4(r2)
10009d04:	14800215 	stw	r18,8(r2)
10009d08:	003fe606 	br	10009ca4 <__alt_data_end+0xf8009ca4>

10009d0c <_Bfree>:
10009d0c:	28000826 	beq	r5,zero,10009d30 <_Bfree+0x24>
10009d10:	28c00117 	ldw	r3,4(r5)
10009d14:	20801317 	ldw	r2,76(r4)
10009d18:	18c7883a 	add	r3,r3,r3
10009d1c:	18c7883a 	add	r3,r3,r3
10009d20:	10c5883a 	add	r2,r2,r3
10009d24:	10c00017 	ldw	r3,0(r2)
10009d28:	28c00015 	stw	r3,0(r5)
10009d2c:	11400015 	stw	r5,0(r2)
10009d30:	f800283a 	ret

10009d34 <__multadd>:
10009d34:	defff704 	addi	sp,sp,-36
10009d38:	dc800215 	stw	r18,8(sp)
10009d3c:	2c800417 	ldw	r18,16(r5)
10009d40:	ddc00715 	stw	r23,28(sp)
10009d44:	dd800615 	stw	r22,24(sp)
10009d48:	dd000415 	stw	r20,16(sp)
10009d4c:	dcc00315 	stw	r19,12(sp)
10009d50:	dc400115 	stw	r17,4(sp)
10009d54:	dc000015 	stw	r16,0(sp)
10009d58:	dfc00815 	stw	ra,32(sp)
10009d5c:	dd400515 	stw	r21,20(sp)
10009d60:	2827883a 	mov	r19,r5
10009d64:	2029883a 	mov	r20,r4
10009d68:	3023883a 	mov	r17,r6
10009d6c:	3821883a 	mov	r16,r7
10009d70:	2d800504 	addi	r22,r5,20
10009d74:	002f883a 	mov	r23,zero
10009d78:	b5400017 	ldw	r21,0(r22)
10009d7c:	880b883a 	mov	r5,r17
10009d80:	bdc00044 	addi	r23,r23,1
10009d84:	a93fffcc 	andi	r4,r21,65535
10009d88:	0002c180 	call	10002c18 <__mulsi3>
10009d8c:	1421883a 	add	r16,r2,r16
10009d90:	a808d43a 	srli	r4,r21,16
10009d94:	802ad43a 	srli	r21,r16,16
10009d98:	880b883a 	mov	r5,r17
10009d9c:	0002c180 	call	10002c18 <__mulsi3>
10009da0:	a88f883a 	add	r7,r21,r2
10009da4:	3804943a 	slli	r2,r7,16
10009da8:	80ffffcc 	andi	r3,r16,65535
10009dac:	b5800104 	addi	r22,r22,4
10009db0:	10c7883a 	add	r3,r2,r3
10009db4:	b0ffff15 	stw	r3,-4(r22)
10009db8:	3820d43a 	srli	r16,r7,16
10009dbc:	bcbfee16 	blt	r23,r18,10009d78 <__alt_data_end+0xf8009d78>
10009dc0:	80000926 	beq	r16,zero,10009de8 <__multadd+0xb4>
10009dc4:	98800217 	ldw	r2,8(r19)
10009dc8:	9080130e 	bge	r18,r2,10009e18 <__multadd+0xe4>
10009dcc:	90800144 	addi	r2,r18,5
10009dd0:	1085883a 	add	r2,r2,r2
10009dd4:	1085883a 	add	r2,r2,r2
10009dd8:	9885883a 	add	r2,r19,r2
10009ddc:	14000015 	stw	r16,0(r2)
10009de0:	94800044 	addi	r18,r18,1
10009de4:	9c800415 	stw	r18,16(r19)
10009de8:	9805883a 	mov	r2,r19
10009dec:	dfc00817 	ldw	ra,32(sp)
10009df0:	ddc00717 	ldw	r23,28(sp)
10009df4:	dd800617 	ldw	r22,24(sp)
10009df8:	dd400517 	ldw	r21,20(sp)
10009dfc:	dd000417 	ldw	r20,16(sp)
10009e00:	dcc00317 	ldw	r19,12(sp)
10009e04:	dc800217 	ldw	r18,8(sp)
10009e08:	dc400117 	ldw	r17,4(sp)
10009e0c:	dc000017 	ldw	r16,0(sp)
10009e10:	dec00904 	addi	sp,sp,36
10009e14:	f800283a 	ret
10009e18:	99400117 	ldw	r5,4(r19)
10009e1c:	a009883a 	mov	r4,r20
10009e20:	29400044 	addi	r5,r5,1
10009e24:	0009c640 	call	10009c64 <_Balloc>
10009e28:	99800417 	ldw	r6,16(r19)
10009e2c:	99400304 	addi	r5,r19,12
10009e30:	11000304 	addi	r4,r2,12
10009e34:	31800084 	addi	r6,r6,2
10009e38:	318d883a 	add	r6,r6,r6
10009e3c:	318d883a 	add	r6,r6,r6
10009e40:	1023883a 	mov	r17,r2
10009e44:	00098ac0 	call	100098ac <memcpy>
10009e48:	99000117 	ldw	r4,4(r19)
10009e4c:	a0c01317 	ldw	r3,76(r20)
10009e50:	2109883a 	add	r4,r4,r4
10009e54:	2109883a 	add	r4,r4,r4
10009e58:	1907883a 	add	r3,r3,r4
10009e5c:	18800017 	ldw	r2,0(r3)
10009e60:	98800015 	stw	r2,0(r19)
10009e64:	1cc00015 	stw	r19,0(r3)
10009e68:	8827883a 	mov	r19,r17
10009e6c:	003fd706 	br	10009dcc <__alt_data_end+0xf8009dcc>

10009e70 <__s2b>:
10009e70:	defff904 	addi	sp,sp,-28
10009e74:	dc400115 	stw	r17,4(sp)
10009e78:	dc000015 	stw	r16,0(sp)
10009e7c:	2023883a 	mov	r17,r4
10009e80:	2821883a 	mov	r16,r5
10009e84:	39000204 	addi	r4,r7,8
10009e88:	01400244 	movi	r5,9
10009e8c:	dcc00315 	stw	r19,12(sp)
10009e90:	dc800215 	stw	r18,8(sp)
10009e94:	dfc00615 	stw	ra,24(sp)
10009e98:	dd400515 	stw	r21,20(sp)
10009e9c:	dd000415 	stw	r20,16(sp)
10009ea0:	3825883a 	mov	r18,r7
10009ea4:	3027883a 	mov	r19,r6
10009ea8:	0002b580 	call	10002b58 <__divsi3>
10009eac:	00c00044 	movi	r3,1
10009eb0:	000b883a 	mov	r5,zero
10009eb4:	1880030e 	bge	r3,r2,10009ec4 <__s2b+0x54>
10009eb8:	18c7883a 	add	r3,r3,r3
10009ebc:	29400044 	addi	r5,r5,1
10009ec0:	18bffd16 	blt	r3,r2,10009eb8 <__alt_data_end+0xf8009eb8>
10009ec4:	8809883a 	mov	r4,r17
10009ec8:	0009c640 	call	10009c64 <_Balloc>
10009ecc:	d8c00717 	ldw	r3,28(sp)
10009ed0:	10c00515 	stw	r3,20(r2)
10009ed4:	00c00044 	movi	r3,1
10009ed8:	10c00415 	stw	r3,16(r2)
10009edc:	00c00244 	movi	r3,9
10009ee0:	1cc0210e 	bge	r3,r19,10009f68 <__s2b+0xf8>
10009ee4:	80eb883a 	add	r21,r16,r3
10009ee8:	a829883a 	mov	r20,r21
10009eec:	84e1883a 	add	r16,r16,r19
10009ef0:	a1c00007 	ldb	r7,0(r20)
10009ef4:	8809883a 	mov	r4,r17
10009ef8:	a5000044 	addi	r20,r20,1
10009efc:	100b883a 	mov	r5,r2
10009f00:	01800284 	movi	r6,10
10009f04:	39fff404 	addi	r7,r7,-48
10009f08:	0009d340 	call	10009d34 <__multadd>
10009f0c:	a43ff81e 	bne	r20,r16,10009ef0 <__alt_data_end+0xf8009ef0>
10009f10:	ace1883a 	add	r16,r21,r19
10009f14:	843ffe04 	addi	r16,r16,-8
10009f18:	9c800a0e 	bge	r19,r18,10009f44 <__s2b+0xd4>
10009f1c:	94e5c83a 	sub	r18,r18,r19
10009f20:	84a5883a 	add	r18,r16,r18
10009f24:	81c00007 	ldb	r7,0(r16)
10009f28:	8809883a 	mov	r4,r17
10009f2c:	84000044 	addi	r16,r16,1
10009f30:	100b883a 	mov	r5,r2
10009f34:	01800284 	movi	r6,10
10009f38:	39fff404 	addi	r7,r7,-48
10009f3c:	0009d340 	call	10009d34 <__multadd>
10009f40:	84bff81e 	bne	r16,r18,10009f24 <__alt_data_end+0xf8009f24>
10009f44:	dfc00617 	ldw	ra,24(sp)
10009f48:	dd400517 	ldw	r21,20(sp)
10009f4c:	dd000417 	ldw	r20,16(sp)
10009f50:	dcc00317 	ldw	r19,12(sp)
10009f54:	dc800217 	ldw	r18,8(sp)
10009f58:	dc400117 	ldw	r17,4(sp)
10009f5c:	dc000017 	ldw	r16,0(sp)
10009f60:	dec00704 	addi	sp,sp,28
10009f64:	f800283a 	ret
10009f68:	84000284 	addi	r16,r16,10
10009f6c:	1827883a 	mov	r19,r3
10009f70:	003fe906 	br	10009f18 <__alt_data_end+0xf8009f18>

10009f74 <__hi0bits>:
10009f74:	20bfffec 	andhi	r2,r4,65535
10009f78:	1000141e 	bne	r2,zero,10009fcc <__hi0bits+0x58>
10009f7c:	2008943a 	slli	r4,r4,16
10009f80:	00800404 	movi	r2,16
10009f84:	20ffc02c 	andhi	r3,r4,65280
10009f88:	1800021e 	bne	r3,zero,10009f94 <__hi0bits+0x20>
10009f8c:	2008923a 	slli	r4,r4,8
10009f90:	10800204 	addi	r2,r2,8
10009f94:	20fc002c 	andhi	r3,r4,61440
10009f98:	1800021e 	bne	r3,zero,10009fa4 <__hi0bits+0x30>
10009f9c:	2008913a 	slli	r4,r4,4
10009fa0:	10800104 	addi	r2,r2,4
10009fa4:	20f0002c 	andhi	r3,r4,49152
10009fa8:	1800031e 	bne	r3,zero,10009fb8 <__hi0bits+0x44>
10009fac:	2109883a 	add	r4,r4,r4
10009fb0:	10800084 	addi	r2,r2,2
10009fb4:	2109883a 	add	r4,r4,r4
10009fb8:	20000316 	blt	r4,zero,10009fc8 <__hi0bits+0x54>
10009fbc:	2110002c 	andhi	r4,r4,16384
10009fc0:	2000041e 	bne	r4,zero,10009fd4 <__hi0bits+0x60>
10009fc4:	00800804 	movi	r2,32
10009fc8:	f800283a 	ret
10009fcc:	0005883a 	mov	r2,zero
10009fd0:	003fec06 	br	10009f84 <__alt_data_end+0xf8009f84>
10009fd4:	10800044 	addi	r2,r2,1
10009fd8:	f800283a 	ret

10009fdc <__lo0bits>:
10009fdc:	20c00017 	ldw	r3,0(r4)
10009fe0:	188001cc 	andi	r2,r3,7
10009fe4:	10000826 	beq	r2,zero,1000a008 <__lo0bits+0x2c>
10009fe8:	1880004c 	andi	r2,r3,1
10009fec:	1000211e 	bne	r2,zero,1000a074 <__lo0bits+0x98>
10009ff0:	1880008c 	andi	r2,r3,2
10009ff4:	1000211e 	bne	r2,zero,1000a07c <__lo0bits+0xa0>
10009ff8:	1806d0ba 	srli	r3,r3,2
10009ffc:	00800084 	movi	r2,2
1000a000:	20c00015 	stw	r3,0(r4)
1000a004:	f800283a 	ret
1000a008:	18bfffcc 	andi	r2,r3,65535
1000a00c:	10001326 	beq	r2,zero,1000a05c <__lo0bits+0x80>
1000a010:	0005883a 	mov	r2,zero
1000a014:	19403fcc 	andi	r5,r3,255
1000a018:	2800021e 	bne	r5,zero,1000a024 <__lo0bits+0x48>
1000a01c:	1806d23a 	srli	r3,r3,8
1000a020:	10800204 	addi	r2,r2,8
1000a024:	194003cc 	andi	r5,r3,15
1000a028:	2800021e 	bne	r5,zero,1000a034 <__lo0bits+0x58>
1000a02c:	1806d13a 	srli	r3,r3,4
1000a030:	10800104 	addi	r2,r2,4
1000a034:	194000cc 	andi	r5,r3,3
1000a038:	2800021e 	bne	r5,zero,1000a044 <__lo0bits+0x68>
1000a03c:	1806d0ba 	srli	r3,r3,2
1000a040:	10800084 	addi	r2,r2,2
1000a044:	1940004c 	andi	r5,r3,1
1000a048:	2800081e 	bne	r5,zero,1000a06c <__lo0bits+0x90>
1000a04c:	1806d07a 	srli	r3,r3,1
1000a050:	1800051e 	bne	r3,zero,1000a068 <__lo0bits+0x8c>
1000a054:	00800804 	movi	r2,32
1000a058:	f800283a 	ret
1000a05c:	1806d43a 	srli	r3,r3,16
1000a060:	00800404 	movi	r2,16
1000a064:	003feb06 	br	1000a014 <__alt_data_end+0xf800a014>
1000a068:	10800044 	addi	r2,r2,1
1000a06c:	20c00015 	stw	r3,0(r4)
1000a070:	f800283a 	ret
1000a074:	0005883a 	mov	r2,zero
1000a078:	f800283a 	ret
1000a07c:	1806d07a 	srli	r3,r3,1
1000a080:	00800044 	movi	r2,1
1000a084:	20c00015 	stw	r3,0(r4)
1000a088:	f800283a 	ret

1000a08c <__i2b>:
1000a08c:	defffd04 	addi	sp,sp,-12
1000a090:	dc000015 	stw	r16,0(sp)
1000a094:	04000044 	movi	r16,1
1000a098:	dc400115 	stw	r17,4(sp)
1000a09c:	2823883a 	mov	r17,r5
1000a0a0:	800b883a 	mov	r5,r16
1000a0a4:	dfc00215 	stw	ra,8(sp)
1000a0a8:	0009c640 	call	10009c64 <_Balloc>
1000a0ac:	14400515 	stw	r17,20(r2)
1000a0b0:	14000415 	stw	r16,16(r2)
1000a0b4:	dfc00217 	ldw	ra,8(sp)
1000a0b8:	dc400117 	ldw	r17,4(sp)
1000a0bc:	dc000017 	ldw	r16,0(sp)
1000a0c0:	dec00304 	addi	sp,sp,12
1000a0c4:	f800283a 	ret

1000a0c8 <__multiply>:
1000a0c8:	deffef04 	addi	sp,sp,-68
1000a0cc:	dc400815 	stw	r17,32(sp)
1000a0d0:	dc000715 	stw	r16,28(sp)
1000a0d4:	2c400417 	ldw	r17,16(r5)
1000a0d8:	34000417 	ldw	r16,16(r6)
1000a0dc:	dd800d15 	stw	r22,52(sp)
1000a0e0:	dc800915 	stw	r18,36(sp)
1000a0e4:	dfc01015 	stw	ra,64(sp)
1000a0e8:	df000f15 	stw	fp,60(sp)
1000a0ec:	ddc00e15 	stw	r23,56(sp)
1000a0f0:	dd400c15 	stw	r21,48(sp)
1000a0f4:	dd000b15 	stw	r20,44(sp)
1000a0f8:	dcc00a15 	stw	r19,40(sp)
1000a0fc:	2825883a 	mov	r18,r5
1000a100:	302d883a 	mov	r22,r6
1000a104:	8c009116 	blt	r17,r16,1000a34c <__multiply+0x284>
1000a108:	8005883a 	mov	r2,r16
1000a10c:	8821883a 	mov	r16,r17
1000a110:	1023883a 	mov	r17,r2
1000a114:	90800217 	ldw	r2,8(r18)
1000a118:	8447883a 	add	r3,r16,r17
1000a11c:	d8c00215 	stw	r3,8(sp)
1000a120:	91400117 	ldw	r5,4(r18)
1000a124:	10c0010e 	bge	r2,r3,1000a12c <__multiply+0x64>
1000a128:	29400044 	addi	r5,r5,1
1000a12c:	0009c640 	call	10009c64 <_Balloc>
1000a130:	d8c00217 	ldw	r3,8(sp)
1000a134:	d8800615 	stw	r2,24(sp)
1000a138:	18eb883a 	add	r21,r3,r3
1000a13c:	ad6b883a 	add	r21,r21,r21
1000a140:	10c00504 	addi	r3,r2,20
1000a144:	1d6b883a 	add	r21,r3,r21
1000a148:	d8c00115 	stw	r3,4(sp)
1000a14c:	dd400315 	stw	r21,12(sp)
1000a150:	1805883a 	mov	r2,r3
1000a154:	1d40042e 	bgeu	r3,r21,1000a168 <__multiply+0xa0>
1000a158:	d8c00317 	ldw	r3,12(sp)
1000a15c:	10000015 	stw	zero,0(r2)
1000a160:	10800104 	addi	r2,r2,4
1000a164:	10fffc36 	bltu	r2,r3,1000a158 <__alt_data_end+0xf800a158>
1000a168:	8c63883a 	add	r17,r17,r17
1000a16c:	b5800504 	addi	r22,r22,20
1000a170:	8c63883a 	add	r17,r17,r17
1000a174:	94800504 	addi	r18,r18,20
1000a178:	8421883a 	add	r16,r16,r16
1000a17c:	b463883a 	add	r17,r22,r17
1000a180:	8421883a 	add	r16,r16,r16
1000a184:	dd800015 	stw	r22,0(sp)
1000a188:	dc800415 	stw	r18,16(sp)
1000a18c:	dc400515 	stw	r17,20(sp)
1000a190:	9429883a 	add	r20,r18,r16
1000a194:	b4404f2e 	bgeu	r22,r17,1000a2d4 <__multiply+0x20c>
1000a198:	d8c00017 	ldw	r3,0(sp)
1000a19c:	1c800017 	ldw	r18,0(r3)
1000a1a0:	943fffcc 	andi	r16,r18,65535
1000a1a4:	80001e26 	beq	r16,zero,1000a220 <__multiply+0x158>
1000a1a8:	dd800117 	ldw	r22,4(sp)
1000a1ac:	dd400417 	ldw	r21,16(sp)
1000a1b0:	0025883a 	mov	r18,zero
1000a1b4:	adc00017 	ldw	r23,0(r21)
1000a1b8:	b4c00017 	ldw	r19,0(r22)
1000a1bc:	800b883a 	mov	r5,r16
1000a1c0:	b93fffcc 	andi	r4,r23,65535
1000a1c4:	0002c180 	call	10002c18 <__mulsi3>
1000a1c8:	9c7fffcc 	andi	r17,r19,65535
1000a1cc:	8885883a 	add	r2,r17,r2
1000a1d0:	b808d43a 	srli	r4,r23,16
1000a1d4:	14a3883a 	add	r17,r2,r18
1000a1d8:	9826d43a 	srli	r19,r19,16
1000a1dc:	8824d43a 	srli	r18,r17,16
1000a1e0:	800b883a 	mov	r5,r16
1000a1e4:	0002c180 	call	10002c18 <__mulsi3>
1000a1e8:	9885883a 	add	r2,r19,r2
1000a1ec:	14a7883a 	add	r19,r2,r18
1000a1f0:	88ffffcc 	andi	r3,r17,65535
1000a1f4:	9822943a 	slli	r17,r19,16
1000a1f8:	ad400104 	addi	r21,r21,4
1000a1fc:	b005883a 	mov	r2,r22
1000a200:	88c6b03a 	or	r3,r17,r3
1000a204:	b0c00015 	stw	r3,0(r22)
1000a208:	9824d43a 	srli	r18,r19,16
1000a20c:	b5800104 	addi	r22,r22,4
1000a210:	ad3fe836 	bltu	r21,r20,1000a1b4 <__alt_data_end+0xf800a1b4>
1000a214:	d8c00017 	ldw	r3,0(sp)
1000a218:	14800115 	stw	r18,4(r2)
1000a21c:	1c800017 	ldw	r18,0(r3)
1000a220:	9024d43a 	srli	r18,r18,16
1000a224:	90002226 	beq	r18,zero,1000a2b0 <__multiply+0x1e8>
1000a228:	d8c00117 	ldw	r3,4(sp)
1000a22c:	dd800417 	ldw	r22,16(sp)
1000a230:	002f883a 	mov	r23,zero
1000a234:	1f000017 	ldw	fp,0(r3)
1000a238:	1823883a 	mov	r17,r3
1000a23c:	182b883a 	mov	r21,r3
1000a240:	e021883a 	mov	r16,fp
1000a244:	00000106 	br	1000a24c <__multiply+0x184>
1000a248:	982b883a 	mov	r21,r19
1000a24c:	b100000b 	ldhu	r4,0(r22)
1000a250:	8020d43a 	srli	r16,r16,16
1000a254:	900b883a 	mov	r5,r18
1000a258:	0002c180 	call	10002c18 <__mulsi3>
1000a25c:	1405883a 	add	r2,r2,r16
1000a260:	15ef883a 	add	r23,r2,r23
1000a264:	b804943a 	slli	r2,r23,16
1000a268:	e0ffffcc 	andi	r3,fp,65535
1000a26c:	8c400104 	addi	r17,r17,4
1000a270:	10c6b03a 	or	r3,r2,r3
1000a274:	88ffff15 	stw	r3,-4(r17)
1000a278:	b5800104 	addi	r22,r22,4
1000a27c:	b13fff17 	ldw	r4,-4(r22)
1000a280:	acc00104 	addi	r19,r21,4
1000a284:	900b883a 	mov	r5,r18
1000a288:	2008d43a 	srli	r4,r4,16
1000a28c:	9c000017 	ldw	r16,0(r19)
1000a290:	0002c180 	call	10002c18 <__mulsi3>
1000a294:	b806d43a 	srli	r3,r23,16
1000a298:	813fffcc 	andi	r4,r16,65535
1000a29c:	1105883a 	add	r2,r2,r4
1000a2a0:	10f9883a 	add	fp,r2,r3
1000a2a4:	e02ed43a 	srli	r23,fp,16
1000a2a8:	b53fe736 	bltu	r22,r20,1000a248 <__alt_data_end+0xf800a248>
1000a2ac:	af000115 	stw	fp,4(r21)
1000a2b0:	d8c00017 	ldw	r3,0(sp)
1000a2b4:	d9000517 	ldw	r4,20(sp)
1000a2b8:	18c00104 	addi	r3,r3,4
1000a2bc:	d8c00015 	stw	r3,0(sp)
1000a2c0:	d8c00117 	ldw	r3,4(sp)
1000a2c4:	18c00104 	addi	r3,r3,4
1000a2c8:	d8c00115 	stw	r3,4(sp)
1000a2cc:	d8c00017 	ldw	r3,0(sp)
1000a2d0:	193fb136 	bltu	r3,r4,1000a198 <__alt_data_end+0xf800a198>
1000a2d4:	d8c00217 	ldw	r3,8(sp)
1000a2d8:	00c00c0e 	bge	zero,r3,1000a30c <__multiply+0x244>
1000a2dc:	d8c00317 	ldw	r3,12(sp)
1000a2e0:	18bfff17 	ldw	r2,-4(r3)
1000a2e4:	1d7fff04 	addi	r21,r3,-4
1000a2e8:	10000326 	beq	r2,zero,1000a2f8 <__multiply+0x230>
1000a2ec:	00000706 	br	1000a30c <__multiply+0x244>
1000a2f0:	a8800017 	ldw	r2,0(r21)
1000a2f4:	1000051e 	bne	r2,zero,1000a30c <__multiply+0x244>
1000a2f8:	d8c00217 	ldw	r3,8(sp)
1000a2fc:	ad7fff04 	addi	r21,r21,-4
1000a300:	18ffffc4 	addi	r3,r3,-1
1000a304:	d8c00215 	stw	r3,8(sp)
1000a308:	183ff91e 	bne	r3,zero,1000a2f0 <__alt_data_end+0xf800a2f0>
1000a30c:	d8c00617 	ldw	r3,24(sp)
1000a310:	d9000217 	ldw	r4,8(sp)
1000a314:	1805883a 	mov	r2,r3
1000a318:	19000415 	stw	r4,16(r3)
1000a31c:	dfc01017 	ldw	ra,64(sp)
1000a320:	df000f17 	ldw	fp,60(sp)
1000a324:	ddc00e17 	ldw	r23,56(sp)
1000a328:	dd800d17 	ldw	r22,52(sp)
1000a32c:	dd400c17 	ldw	r21,48(sp)
1000a330:	dd000b17 	ldw	r20,44(sp)
1000a334:	dcc00a17 	ldw	r19,40(sp)
1000a338:	dc800917 	ldw	r18,36(sp)
1000a33c:	dc400817 	ldw	r17,32(sp)
1000a340:	dc000717 	ldw	r16,28(sp)
1000a344:	dec01104 	addi	sp,sp,68
1000a348:	f800283a 	ret
1000a34c:	3025883a 	mov	r18,r6
1000a350:	282d883a 	mov	r22,r5
1000a354:	003f6f06 	br	1000a114 <__alt_data_end+0xf800a114>

1000a358 <__pow5mult>:
1000a358:	defffa04 	addi	sp,sp,-24
1000a35c:	dcc00315 	stw	r19,12(sp)
1000a360:	dc800215 	stw	r18,8(sp)
1000a364:	dc000015 	stw	r16,0(sp)
1000a368:	dfc00515 	stw	ra,20(sp)
1000a36c:	dd000415 	stw	r20,16(sp)
1000a370:	dc400115 	stw	r17,4(sp)
1000a374:	308000cc 	andi	r2,r6,3
1000a378:	3021883a 	mov	r16,r6
1000a37c:	2027883a 	mov	r19,r4
1000a380:	2825883a 	mov	r18,r5
1000a384:	10002e1e 	bne	r2,zero,1000a440 <__pow5mult+0xe8>
1000a388:	8021d0ba 	srai	r16,r16,2
1000a38c:	80001a26 	beq	r16,zero,1000a3f8 <__pow5mult+0xa0>
1000a390:	9c401217 	ldw	r17,72(r19)
1000a394:	8800061e 	bne	r17,zero,1000a3b0 <__pow5mult+0x58>
1000a398:	00003406 	br	1000a46c <__pow5mult+0x114>
1000a39c:	8021d07a 	srai	r16,r16,1
1000a3a0:	80001526 	beq	r16,zero,1000a3f8 <__pow5mult+0xa0>
1000a3a4:	88800017 	ldw	r2,0(r17)
1000a3a8:	10001c26 	beq	r2,zero,1000a41c <__pow5mult+0xc4>
1000a3ac:	1023883a 	mov	r17,r2
1000a3b0:	80c0004c 	andi	r3,r16,1
1000a3b4:	183ff926 	beq	r3,zero,1000a39c <__alt_data_end+0xf800a39c>
1000a3b8:	900b883a 	mov	r5,r18
1000a3bc:	880d883a 	mov	r6,r17
1000a3c0:	9809883a 	mov	r4,r19
1000a3c4:	000a0c80 	call	1000a0c8 <__multiply>
1000a3c8:	90001b26 	beq	r18,zero,1000a438 <__pow5mult+0xe0>
1000a3cc:	91c00117 	ldw	r7,4(r18)
1000a3d0:	98c01317 	ldw	r3,76(r19)
1000a3d4:	8021d07a 	srai	r16,r16,1
1000a3d8:	39cf883a 	add	r7,r7,r7
1000a3dc:	39cf883a 	add	r7,r7,r7
1000a3e0:	19c7883a 	add	r3,r3,r7
1000a3e4:	19000017 	ldw	r4,0(r3)
1000a3e8:	91000015 	stw	r4,0(r18)
1000a3ec:	1c800015 	stw	r18,0(r3)
1000a3f0:	1025883a 	mov	r18,r2
1000a3f4:	803feb1e 	bne	r16,zero,1000a3a4 <__alt_data_end+0xf800a3a4>
1000a3f8:	9005883a 	mov	r2,r18
1000a3fc:	dfc00517 	ldw	ra,20(sp)
1000a400:	dd000417 	ldw	r20,16(sp)
1000a404:	dcc00317 	ldw	r19,12(sp)
1000a408:	dc800217 	ldw	r18,8(sp)
1000a40c:	dc400117 	ldw	r17,4(sp)
1000a410:	dc000017 	ldw	r16,0(sp)
1000a414:	dec00604 	addi	sp,sp,24
1000a418:	f800283a 	ret
1000a41c:	9809883a 	mov	r4,r19
1000a420:	880b883a 	mov	r5,r17
1000a424:	880d883a 	mov	r6,r17
1000a428:	000a0c80 	call	1000a0c8 <__multiply>
1000a42c:	88800015 	stw	r2,0(r17)
1000a430:	10000015 	stw	zero,0(r2)
1000a434:	003fdd06 	br	1000a3ac <__alt_data_end+0xf800a3ac>
1000a438:	1025883a 	mov	r18,r2
1000a43c:	003fd706 	br	1000a39c <__alt_data_end+0xf800a39c>
1000a440:	10bfffc4 	addi	r2,r2,-1
1000a444:	1085883a 	add	r2,r2,r2
1000a448:	00c40074 	movhi	r3,4097
1000a44c:	18c4c704 	addi	r3,r3,4892
1000a450:	1085883a 	add	r2,r2,r2
1000a454:	1885883a 	add	r2,r3,r2
1000a458:	11800017 	ldw	r6,0(r2)
1000a45c:	000f883a 	mov	r7,zero
1000a460:	0009d340 	call	10009d34 <__multadd>
1000a464:	1025883a 	mov	r18,r2
1000a468:	003fc706 	br	1000a388 <__alt_data_end+0xf800a388>
1000a46c:	05000044 	movi	r20,1
1000a470:	9809883a 	mov	r4,r19
1000a474:	a00b883a 	mov	r5,r20
1000a478:	0009c640 	call	10009c64 <_Balloc>
1000a47c:	1023883a 	mov	r17,r2
1000a480:	00809c44 	movi	r2,625
1000a484:	88800515 	stw	r2,20(r17)
1000a488:	8d000415 	stw	r20,16(r17)
1000a48c:	9c401215 	stw	r17,72(r19)
1000a490:	88000015 	stw	zero,0(r17)
1000a494:	003fc606 	br	1000a3b0 <__alt_data_end+0xf800a3b0>

1000a498 <__lshift>:
1000a498:	defff904 	addi	sp,sp,-28
1000a49c:	dd000415 	stw	r20,16(sp)
1000a4a0:	dcc00315 	stw	r19,12(sp)
1000a4a4:	3029d17a 	srai	r20,r6,5
1000a4a8:	2cc00417 	ldw	r19,16(r5)
1000a4ac:	28800217 	ldw	r2,8(r5)
1000a4b0:	dd400515 	stw	r21,20(sp)
1000a4b4:	a4e7883a 	add	r19,r20,r19
1000a4b8:	dc800215 	stw	r18,8(sp)
1000a4bc:	dc400115 	stw	r17,4(sp)
1000a4c0:	dc000015 	stw	r16,0(sp)
1000a4c4:	dfc00615 	stw	ra,24(sp)
1000a4c8:	9c000044 	addi	r16,r19,1
1000a4cc:	2823883a 	mov	r17,r5
1000a4d0:	302b883a 	mov	r21,r6
1000a4d4:	2025883a 	mov	r18,r4
1000a4d8:	29400117 	ldw	r5,4(r5)
1000a4dc:	1400030e 	bge	r2,r16,1000a4ec <__lshift+0x54>
1000a4e0:	1085883a 	add	r2,r2,r2
1000a4e4:	29400044 	addi	r5,r5,1
1000a4e8:	143ffd16 	blt	r2,r16,1000a4e0 <__alt_data_end+0xf800a4e0>
1000a4ec:	9009883a 	mov	r4,r18
1000a4f0:	0009c640 	call	10009c64 <_Balloc>
1000a4f4:	11c00504 	addi	r7,r2,20
1000a4f8:	0500090e 	bge	zero,r20,1000a520 <__lshift+0x88>
1000a4fc:	3811883a 	mov	r8,r7
1000a500:	0007883a 	mov	r3,zero
1000a504:	40000015 	stw	zero,0(r8)
1000a508:	18c00044 	addi	r3,r3,1
1000a50c:	42000104 	addi	r8,r8,4
1000a510:	1d3ffc1e 	bne	r3,r20,1000a504 <__alt_data_end+0xf800a504>
1000a514:	18c7883a 	add	r3,r3,r3
1000a518:	18c7883a 	add	r3,r3,r3
1000a51c:	38cf883a 	add	r7,r7,r3
1000a520:	89000417 	ldw	r4,16(r17)
1000a524:	88c00504 	addi	r3,r17,20
1000a528:	a98007cc 	andi	r6,r21,31
1000a52c:	2109883a 	add	r4,r4,r4
1000a530:	2109883a 	add	r4,r4,r4
1000a534:	1909883a 	add	r4,r3,r4
1000a538:	30002326 	beq	r6,zero,1000a5c8 <__lshift+0x130>
1000a53c:	01400804 	movi	r5,32
1000a540:	298bc83a 	sub	r5,r5,r6
1000a544:	0013883a 	mov	r9,zero
1000a548:	1a000017 	ldw	r8,0(r3)
1000a54c:	3815883a 	mov	r10,r7
1000a550:	39c00104 	addi	r7,r7,4
1000a554:	4190983a 	sll	r8,r8,r6
1000a558:	18c00104 	addi	r3,r3,4
1000a55c:	4a10b03a 	or	r8,r9,r8
1000a560:	3a3fff15 	stw	r8,-4(r7)
1000a564:	1a3fff17 	ldw	r8,-4(r3)
1000a568:	4152d83a 	srl	r9,r8,r5
1000a56c:	193ff636 	bltu	r3,r4,1000a548 <__alt_data_end+0xf800a548>
1000a570:	52400115 	stw	r9,4(r10)
1000a574:	48000126 	beq	r9,zero,1000a57c <__lshift+0xe4>
1000a578:	9c000084 	addi	r16,r19,2
1000a57c:	89000117 	ldw	r4,4(r17)
1000a580:	90c01317 	ldw	r3,76(r18)
1000a584:	843fffc4 	addi	r16,r16,-1
1000a588:	2109883a 	add	r4,r4,r4
1000a58c:	2109883a 	add	r4,r4,r4
1000a590:	1907883a 	add	r3,r3,r4
1000a594:	19000017 	ldw	r4,0(r3)
1000a598:	14000415 	stw	r16,16(r2)
1000a59c:	89000015 	stw	r4,0(r17)
1000a5a0:	1c400015 	stw	r17,0(r3)
1000a5a4:	dfc00617 	ldw	ra,24(sp)
1000a5a8:	dd400517 	ldw	r21,20(sp)
1000a5ac:	dd000417 	ldw	r20,16(sp)
1000a5b0:	dcc00317 	ldw	r19,12(sp)
1000a5b4:	dc800217 	ldw	r18,8(sp)
1000a5b8:	dc400117 	ldw	r17,4(sp)
1000a5bc:	dc000017 	ldw	r16,0(sp)
1000a5c0:	dec00704 	addi	sp,sp,28
1000a5c4:	f800283a 	ret
1000a5c8:	19400017 	ldw	r5,0(r3)
1000a5cc:	39c00104 	addi	r7,r7,4
1000a5d0:	18c00104 	addi	r3,r3,4
1000a5d4:	397fff15 	stw	r5,-4(r7)
1000a5d8:	193ffb36 	bltu	r3,r4,1000a5c8 <__alt_data_end+0xf800a5c8>
1000a5dc:	003fe706 	br	1000a57c <__alt_data_end+0xf800a57c>

1000a5e0 <__mcmp>:
1000a5e0:	20800417 	ldw	r2,16(r4)
1000a5e4:	28c00417 	ldw	r3,16(r5)
1000a5e8:	10c5c83a 	sub	r2,r2,r3
1000a5ec:	1000111e 	bne	r2,zero,1000a634 <__mcmp+0x54>
1000a5f0:	18c7883a 	add	r3,r3,r3
1000a5f4:	18c7883a 	add	r3,r3,r3
1000a5f8:	21000504 	addi	r4,r4,20
1000a5fc:	29400504 	addi	r5,r5,20
1000a600:	20c5883a 	add	r2,r4,r3
1000a604:	28cb883a 	add	r5,r5,r3
1000a608:	00000106 	br	1000a610 <__mcmp+0x30>
1000a60c:	20800a2e 	bgeu	r4,r2,1000a638 <__mcmp+0x58>
1000a610:	10bfff04 	addi	r2,r2,-4
1000a614:	297fff04 	addi	r5,r5,-4
1000a618:	11800017 	ldw	r6,0(r2)
1000a61c:	28c00017 	ldw	r3,0(r5)
1000a620:	30fffa26 	beq	r6,r3,1000a60c <__alt_data_end+0xf800a60c>
1000a624:	30c00236 	bltu	r6,r3,1000a630 <__mcmp+0x50>
1000a628:	00800044 	movi	r2,1
1000a62c:	f800283a 	ret
1000a630:	00bfffc4 	movi	r2,-1
1000a634:	f800283a 	ret
1000a638:	0005883a 	mov	r2,zero
1000a63c:	f800283a 	ret

1000a640 <__mdiff>:
1000a640:	defffb04 	addi	sp,sp,-20
1000a644:	dc000015 	stw	r16,0(sp)
1000a648:	2821883a 	mov	r16,r5
1000a64c:	dcc00315 	stw	r19,12(sp)
1000a650:	300b883a 	mov	r5,r6
1000a654:	2027883a 	mov	r19,r4
1000a658:	8009883a 	mov	r4,r16
1000a65c:	dc800215 	stw	r18,8(sp)
1000a660:	dfc00415 	stw	ra,16(sp)
1000a664:	dc400115 	stw	r17,4(sp)
1000a668:	3025883a 	mov	r18,r6
1000a66c:	000a5e00 	call	1000a5e0 <__mcmp>
1000a670:	10005226 	beq	r2,zero,1000a7bc <__mdiff+0x17c>
1000a674:	10004c16 	blt	r2,zero,1000a7a8 <__mdiff+0x168>
1000a678:	0023883a 	mov	r17,zero
1000a67c:	81400117 	ldw	r5,4(r16)
1000a680:	9809883a 	mov	r4,r19
1000a684:	0009c640 	call	10009c64 <_Balloc>
1000a688:	83400417 	ldw	r13,16(r16)
1000a68c:	93800417 	ldw	r14,16(r18)
1000a690:	81000504 	addi	r4,r16,20
1000a694:	6b59883a 	add	r12,r13,r13
1000a698:	739d883a 	add	r14,r14,r14
1000a69c:	6319883a 	add	r12,r12,r12
1000a6a0:	91800504 	addi	r6,r18,20
1000a6a4:	739d883a 	add	r14,r14,r14
1000a6a8:	14400315 	stw	r17,12(r2)
1000a6ac:	2319883a 	add	r12,r4,r12
1000a6b0:	339d883a 	add	r14,r6,r14
1000a6b4:	12400504 	addi	r9,r2,20
1000a6b8:	0007883a 	mov	r3,zero
1000a6bc:	22000017 	ldw	r8,0(r4)
1000a6c0:	32800017 	ldw	r10,0(r6)
1000a6c4:	4ac00104 	addi	r11,r9,4
1000a6c8:	41ffffcc 	andi	r7,r8,65535
1000a6cc:	38c7883a 	add	r3,r7,r3
1000a6d0:	51ffffcc 	andi	r7,r10,65535
1000a6d4:	19cfc83a 	sub	r7,r3,r7
1000a6d8:	4010d43a 	srli	r8,r8,16
1000a6dc:	5014d43a 	srli	r10,r10,16
1000a6e0:	3807d43a 	srai	r3,r7,16
1000a6e4:	39ffffcc 	andi	r7,r7,65535
1000a6e8:	4291c83a 	sub	r8,r8,r10
1000a6ec:	40c7883a 	add	r3,r8,r3
1000a6f0:	1810943a 	slli	r8,r3,16
1000a6f4:	31800104 	addi	r6,r6,4
1000a6f8:	21000104 	addi	r4,r4,4
1000a6fc:	41ceb03a 	or	r7,r8,r7
1000a700:	49c00015 	stw	r7,0(r9)
1000a704:	1807d43a 	srai	r3,r3,16
1000a708:	580b883a 	mov	r5,r11
1000a70c:	5813883a 	mov	r9,r11
1000a710:	33bfea36 	bltu	r6,r14,1000a6bc <__alt_data_end+0xf800a6bc>
1000a714:	2011883a 	mov	r8,r4
1000a718:	2300152e 	bgeu	r4,r12,1000a770 <__mdiff+0x130>
1000a71c:	21400017 	ldw	r5,0(r4)
1000a720:	4a400104 	addi	r9,r9,4
1000a724:	21000104 	addi	r4,r4,4
1000a728:	29ffffcc 	andi	r7,r5,65535
1000a72c:	38c7883a 	add	r3,r7,r3
1000a730:	280ad43a 	srli	r5,r5,16
1000a734:	180dd43a 	srai	r6,r3,16
1000a738:	19ffffcc 	andi	r7,r3,65535
1000a73c:	3147883a 	add	r3,r6,r5
1000a740:	180a943a 	slli	r5,r3,16
1000a744:	1807d43a 	srai	r3,r3,16
1000a748:	29ceb03a 	or	r7,r5,r7
1000a74c:	49ffff15 	stw	r7,-4(r9)
1000a750:	233ff236 	bltu	r4,r12,1000a71c <__alt_data_end+0xf800a71c>
1000a754:	0206303a 	nor	r3,zero,r8
1000a758:	1b07883a 	add	r3,r3,r12
1000a75c:	1806d0ba 	srli	r3,r3,2
1000a760:	18c00044 	addi	r3,r3,1
1000a764:	18c7883a 	add	r3,r3,r3
1000a768:	18c7883a 	add	r3,r3,r3
1000a76c:	58cb883a 	add	r5,r11,r3
1000a770:	28ffff04 	addi	r3,r5,-4
1000a774:	3800041e 	bne	r7,zero,1000a788 <__mdiff+0x148>
1000a778:	18ffff04 	addi	r3,r3,-4
1000a77c:	19000017 	ldw	r4,0(r3)
1000a780:	6b7fffc4 	addi	r13,r13,-1
1000a784:	203ffc26 	beq	r4,zero,1000a778 <__alt_data_end+0xf800a778>
1000a788:	13400415 	stw	r13,16(r2)
1000a78c:	dfc00417 	ldw	ra,16(sp)
1000a790:	dcc00317 	ldw	r19,12(sp)
1000a794:	dc800217 	ldw	r18,8(sp)
1000a798:	dc400117 	ldw	r17,4(sp)
1000a79c:	dc000017 	ldw	r16,0(sp)
1000a7a0:	dec00504 	addi	sp,sp,20
1000a7a4:	f800283a 	ret
1000a7a8:	8005883a 	mov	r2,r16
1000a7ac:	04400044 	movi	r17,1
1000a7b0:	9021883a 	mov	r16,r18
1000a7b4:	1025883a 	mov	r18,r2
1000a7b8:	003fb006 	br	1000a67c <__alt_data_end+0xf800a67c>
1000a7bc:	9809883a 	mov	r4,r19
1000a7c0:	000b883a 	mov	r5,zero
1000a7c4:	0009c640 	call	10009c64 <_Balloc>
1000a7c8:	00c00044 	movi	r3,1
1000a7cc:	10c00415 	stw	r3,16(r2)
1000a7d0:	10000515 	stw	zero,20(r2)
1000a7d4:	003fed06 	br	1000a78c <__alt_data_end+0xf800a78c>

1000a7d8 <__ulp>:
1000a7d8:	295ffc2c 	andhi	r5,r5,32752
1000a7dc:	00bf3034 	movhi	r2,64704
1000a7e0:	2887883a 	add	r3,r5,r2
1000a7e4:	00c0020e 	bge	zero,r3,1000a7f0 <__ulp+0x18>
1000a7e8:	0005883a 	mov	r2,zero
1000a7ec:	f800283a 	ret
1000a7f0:	00c7c83a 	sub	r3,zero,r3
1000a7f4:	180bd53a 	srai	r5,r3,20
1000a7f8:	008004c4 	movi	r2,19
1000a7fc:	11400a0e 	bge	r2,r5,1000a828 <__ulp+0x50>
1000a800:	00800c84 	movi	r2,50
1000a804:	0007883a 	mov	r3,zero
1000a808:	11400516 	blt	r2,r5,1000a820 <__ulp+0x48>
1000a80c:	00800cc4 	movi	r2,51
1000a810:	114bc83a 	sub	r5,r2,r5
1000a814:	00800044 	movi	r2,1
1000a818:	1144983a 	sll	r2,r2,r5
1000a81c:	f800283a 	ret
1000a820:	00800044 	movi	r2,1
1000a824:	f800283a 	ret
1000a828:	00800234 	movhi	r2,8
1000a82c:	1147d83a 	sra	r3,r2,r5
1000a830:	0005883a 	mov	r2,zero
1000a834:	f800283a 	ret

1000a838 <__b2d>:
1000a838:	defffa04 	addi	sp,sp,-24
1000a83c:	dc000015 	stw	r16,0(sp)
1000a840:	24000417 	ldw	r16,16(r4)
1000a844:	dc400115 	stw	r17,4(sp)
1000a848:	24400504 	addi	r17,r4,20
1000a84c:	8421883a 	add	r16,r16,r16
1000a850:	8421883a 	add	r16,r16,r16
1000a854:	8c21883a 	add	r16,r17,r16
1000a858:	dc800215 	stw	r18,8(sp)
1000a85c:	84bfff17 	ldw	r18,-4(r16)
1000a860:	dd000415 	stw	r20,16(sp)
1000a864:	dcc00315 	stw	r19,12(sp)
1000a868:	9009883a 	mov	r4,r18
1000a86c:	2829883a 	mov	r20,r5
1000a870:	dfc00515 	stw	ra,20(sp)
1000a874:	0009f740 	call	10009f74 <__hi0bits>
1000a878:	00c00804 	movi	r3,32
1000a87c:	1887c83a 	sub	r3,r3,r2
1000a880:	a0c00015 	stw	r3,0(r20)
1000a884:	00c00284 	movi	r3,10
1000a888:	84ffff04 	addi	r19,r16,-4
1000a88c:	18801216 	blt	r3,r2,1000a8d8 <__b2d+0xa0>
1000a890:	014002c4 	movi	r5,11
1000a894:	2889c83a 	sub	r4,r5,r2
1000a898:	9106d83a 	srl	r3,r18,r4
1000a89c:	18cffc34 	orhi	r3,r3,16368
1000a8a0:	8cc0282e 	bgeu	r17,r19,1000a944 <__b2d+0x10c>
1000a8a4:	817ffe17 	ldw	r5,-8(r16)
1000a8a8:	290ad83a 	srl	r5,r5,r4
1000a8ac:	10800544 	addi	r2,r2,21
1000a8b0:	9084983a 	sll	r2,r18,r2
1000a8b4:	2884b03a 	or	r2,r5,r2
1000a8b8:	dfc00517 	ldw	ra,20(sp)
1000a8bc:	dd000417 	ldw	r20,16(sp)
1000a8c0:	dcc00317 	ldw	r19,12(sp)
1000a8c4:	dc800217 	ldw	r18,8(sp)
1000a8c8:	dc400117 	ldw	r17,4(sp)
1000a8cc:	dc000017 	ldw	r16,0(sp)
1000a8d0:	dec00604 	addi	sp,sp,24
1000a8d4:	f800283a 	ret
1000a8d8:	113ffd44 	addi	r4,r2,-11
1000a8dc:	8cc00f2e 	bgeu	r17,r19,1000a91c <__b2d+0xe4>
1000a8e0:	81bffe04 	addi	r6,r16,-8
1000a8e4:	817ffe17 	ldw	r5,-8(r16)
1000a8e8:	20001326 	beq	r4,zero,1000a938 <__b2d+0x100>
1000a8ec:	00c00ac4 	movi	r3,43
1000a8f0:	1885c83a 	sub	r2,r3,r2
1000a8f4:	2886d83a 	srl	r3,r5,r2
1000a8f8:	9124983a 	sll	r18,r18,r4
1000a8fc:	90e4b03a 	or	r18,r18,r3
1000a900:	90cffc34 	orhi	r3,r18,16368
1000a904:	8980112e 	bgeu	r17,r6,1000a94c <__b2d+0x114>
1000a908:	81bffd17 	ldw	r6,-12(r16)
1000a90c:	308cd83a 	srl	r6,r6,r2
1000a910:	2904983a 	sll	r2,r5,r4
1000a914:	1184b03a 	or	r2,r2,r6
1000a918:	003fe706 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000a91c:	20000526 	beq	r4,zero,1000a934 <__b2d+0xfc>
1000a920:	9124983a 	sll	r18,r18,r4
1000a924:	000d883a 	mov	r6,zero
1000a928:	000b883a 	mov	r5,zero
1000a92c:	90cffc34 	orhi	r3,r18,16368
1000a930:	003ff706 	br	1000a910 <__alt_data_end+0xf800a910>
1000a934:	000b883a 	mov	r5,zero
1000a938:	90cffc34 	orhi	r3,r18,16368
1000a93c:	2805883a 	mov	r2,r5
1000a940:	003fdd06 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000a944:	000b883a 	mov	r5,zero
1000a948:	003fd806 	br	1000a8ac <__alt_data_end+0xf800a8ac>
1000a94c:	000d883a 	mov	r6,zero
1000a950:	003fef06 	br	1000a910 <__alt_data_end+0xf800a910>

1000a954 <__d2b>:
1000a954:	defff704 	addi	sp,sp,-36
1000a958:	dc000215 	stw	r16,8(sp)
1000a95c:	3021883a 	mov	r16,r6
1000a960:	dc400315 	stw	r17,12(sp)
1000a964:	8022907a 	slli	r17,r16,1
1000a968:	dd400715 	stw	r21,28(sp)
1000a96c:	282b883a 	mov	r21,r5
1000a970:	01400044 	movi	r5,1
1000a974:	dd000615 	stw	r20,24(sp)
1000a978:	dcc00515 	stw	r19,20(sp)
1000a97c:	dc800415 	stw	r18,16(sp)
1000a980:	dfc00815 	stw	ra,32(sp)
1000a984:	3829883a 	mov	r20,r7
1000a988:	dc800917 	ldw	r18,36(sp)
1000a98c:	8822d57a 	srli	r17,r17,21
1000a990:	0009c640 	call	10009c64 <_Balloc>
1000a994:	1027883a 	mov	r19,r2
1000a998:	00800434 	movhi	r2,16
1000a99c:	10bfffc4 	addi	r2,r2,-1
1000a9a0:	808c703a 	and	r6,r16,r2
1000a9a4:	88000126 	beq	r17,zero,1000a9ac <__d2b+0x58>
1000a9a8:	31800434 	orhi	r6,r6,16
1000a9ac:	d9800015 	stw	r6,0(sp)
1000a9b0:	a8001f26 	beq	r21,zero,1000aa30 <__d2b+0xdc>
1000a9b4:	d9000104 	addi	r4,sp,4
1000a9b8:	dd400115 	stw	r21,4(sp)
1000a9bc:	0009fdc0 	call	10009fdc <__lo0bits>
1000a9c0:	d8c00017 	ldw	r3,0(sp)
1000a9c4:	1000291e 	bne	r2,zero,1000aa6c <__d2b+0x118>
1000a9c8:	d9000117 	ldw	r4,4(sp)
1000a9cc:	99000515 	stw	r4,20(r19)
1000a9d0:	1820c03a 	cmpne	r16,r3,zero
1000a9d4:	84000044 	addi	r16,r16,1
1000a9d8:	98c00615 	stw	r3,24(r19)
1000a9dc:	9c000415 	stw	r16,16(r19)
1000a9e0:	88001b1e 	bne	r17,zero,1000aa50 <__d2b+0xfc>
1000a9e4:	800690ba 	slli	r3,r16,2
1000a9e8:	10bef384 	addi	r2,r2,-1074
1000a9ec:	a0800015 	stw	r2,0(r20)
1000a9f0:	98c5883a 	add	r2,r19,r3
1000a9f4:	11000417 	ldw	r4,16(r2)
1000a9f8:	8020917a 	slli	r16,r16,5
1000a9fc:	0009f740 	call	10009f74 <__hi0bits>
1000aa00:	8085c83a 	sub	r2,r16,r2
1000aa04:	90800015 	stw	r2,0(r18)
1000aa08:	9805883a 	mov	r2,r19
1000aa0c:	dfc00817 	ldw	ra,32(sp)
1000aa10:	dd400717 	ldw	r21,28(sp)
1000aa14:	dd000617 	ldw	r20,24(sp)
1000aa18:	dcc00517 	ldw	r19,20(sp)
1000aa1c:	dc800417 	ldw	r18,16(sp)
1000aa20:	dc400317 	ldw	r17,12(sp)
1000aa24:	dc000217 	ldw	r16,8(sp)
1000aa28:	dec00904 	addi	sp,sp,36
1000aa2c:	f800283a 	ret
1000aa30:	d809883a 	mov	r4,sp
1000aa34:	0009fdc0 	call	10009fdc <__lo0bits>
1000aa38:	d8c00017 	ldw	r3,0(sp)
1000aa3c:	04000044 	movi	r16,1
1000aa40:	9c000415 	stw	r16,16(r19)
1000aa44:	98c00515 	stw	r3,20(r19)
1000aa48:	10800804 	addi	r2,r2,32
1000aa4c:	883fe526 	beq	r17,zero,1000a9e4 <__alt_data_end+0xf800a9e4>
1000aa50:	8c7ef344 	addi	r17,r17,-1075
1000aa54:	88a3883a 	add	r17,r17,r2
1000aa58:	00c00d44 	movi	r3,53
1000aa5c:	a4400015 	stw	r17,0(r20)
1000aa60:	1885c83a 	sub	r2,r3,r2
1000aa64:	90800015 	stw	r2,0(r18)
1000aa68:	003fe706 	br	1000aa08 <__alt_data_end+0xf800aa08>
1000aa6c:	01000804 	movi	r4,32
1000aa70:	2089c83a 	sub	r4,r4,r2
1000aa74:	1908983a 	sll	r4,r3,r4
1000aa78:	d9400117 	ldw	r5,4(sp)
1000aa7c:	1886d83a 	srl	r3,r3,r2
1000aa80:	2148b03a 	or	r4,r4,r5
1000aa84:	99000515 	stw	r4,20(r19)
1000aa88:	d8c00015 	stw	r3,0(sp)
1000aa8c:	003fd006 	br	1000a9d0 <__alt_data_end+0xf800a9d0>

1000aa90 <__ratio>:
1000aa90:	defff904 	addi	sp,sp,-28
1000aa94:	dc400315 	stw	r17,12(sp)
1000aa98:	2823883a 	mov	r17,r5
1000aa9c:	d9400104 	addi	r5,sp,4
1000aaa0:	dfc00615 	stw	ra,24(sp)
1000aaa4:	dcc00515 	stw	r19,20(sp)
1000aaa8:	dc800415 	stw	r18,16(sp)
1000aaac:	2027883a 	mov	r19,r4
1000aab0:	dc000215 	stw	r16,8(sp)
1000aab4:	000a8380 	call	1000a838 <__b2d>
1000aab8:	8809883a 	mov	r4,r17
1000aabc:	d80b883a 	mov	r5,sp
1000aac0:	1025883a 	mov	r18,r2
1000aac4:	1821883a 	mov	r16,r3
1000aac8:	000a8380 	call	1000a838 <__b2d>
1000aacc:	8a400417 	ldw	r9,16(r17)
1000aad0:	9a000417 	ldw	r8,16(r19)
1000aad4:	100d883a 	mov	r6,r2
1000aad8:	d8800017 	ldw	r2,0(sp)
1000aadc:	4251c83a 	sub	r8,r8,r9
1000aae0:	4012917a 	slli	r9,r8,5
1000aae4:	da000117 	ldw	r8,4(sp)
1000aae8:	4091c83a 	sub	r8,r8,r2
1000aaec:	4251883a 	add	r8,r8,r9
1000aaf0:	02000d0e 	bge	zero,r8,1000ab28 <__ratio+0x98>
1000aaf4:	4010953a 	slli	r8,r8,20
1000aaf8:	4421883a 	add	r16,r8,r16
1000aafc:	9009883a 	mov	r4,r18
1000ab00:	800b883a 	mov	r5,r16
1000ab04:	180f883a 	mov	r7,r3
1000ab08:	000d4a80 	call	1000d4a8 <__divdf3>
1000ab0c:	dfc00617 	ldw	ra,24(sp)
1000ab10:	dcc00517 	ldw	r19,20(sp)
1000ab14:	dc800417 	ldw	r18,16(sp)
1000ab18:	dc400317 	ldw	r17,12(sp)
1000ab1c:	dc000217 	ldw	r16,8(sp)
1000ab20:	dec00704 	addi	sp,sp,28
1000ab24:	f800283a 	ret
1000ab28:	4010953a 	slli	r8,r8,20
1000ab2c:	1a07c83a 	sub	r3,r3,r8
1000ab30:	003ff206 	br	1000aafc <__alt_data_end+0xf800aafc>

1000ab34 <_mprec_log10>:
1000ab34:	defffe04 	addi	sp,sp,-8
1000ab38:	dc000015 	stw	r16,0(sp)
1000ab3c:	dfc00115 	stw	ra,4(sp)
1000ab40:	008005c4 	movi	r2,23
1000ab44:	2021883a 	mov	r16,r4
1000ab48:	11000d0e 	bge	r2,r4,1000ab80 <_mprec_log10+0x4c>
1000ab4c:	0005883a 	mov	r2,zero
1000ab50:	00cffc34 	movhi	r3,16368
1000ab54:	843fffc4 	addi	r16,r16,-1
1000ab58:	1009883a 	mov	r4,r2
1000ab5c:	180b883a 	mov	r5,r3
1000ab60:	000d883a 	mov	r6,zero
1000ab64:	01d00934 	movhi	r7,16420
1000ab68:	000e06c0 	call	1000e06c <__muldf3>
1000ab6c:	803ff91e 	bne	r16,zero,1000ab54 <__alt_data_end+0xf800ab54>
1000ab70:	dfc00117 	ldw	ra,4(sp)
1000ab74:	dc000017 	ldw	r16,0(sp)
1000ab78:	dec00204 	addi	sp,sp,8
1000ab7c:	f800283a 	ret
1000ab80:	202090fa 	slli	r16,r4,3
1000ab84:	00840074 	movhi	r2,4097
1000ab88:	1084de04 	addi	r2,r2,4984
1000ab8c:	1421883a 	add	r16,r2,r16
1000ab90:	80800017 	ldw	r2,0(r16)
1000ab94:	80c00117 	ldw	r3,4(r16)
1000ab98:	dfc00117 	ldw	ra,4(sp)
1000ab9c:	dc000017 	ldw	r16,0(sp)
1000aba0:	dec00204 	addi	sp,sp,8
1000aba4:	f800283a 	ret

1000aba8 <__copybits>:
1000aba8:	297fffc4 	addi	r5,r5,-1
1000abac:	280fd17a 	srai	r7,r5,5
1000abb0:	30c00417 	ldw	r3,16(r6)
1000abb4:	30800504 	addi	r2,r6,20
1000abb8:	39c00044 	addi	r7,r7,1
1000abbc:	18c7883a 	add	r3,r3,r3
1000abc0:	39cf883a 	add	r7,r7,r7
1000abc4:	18c7883a 	add	r3,r3,r3
1000abc8:	39cf883a 	add	r7,r7,r7
1000abcc:	10c7883a 	add	r3,r2,r3
1000abd0:	21cf883a 	add	r7,r4,r7
1000abd4:	10c00d2e 	bgeu	r2,r3,1000ac0c <__copybits+0x64>
1000abd8:	200b883a 	mov	r5,r4
1000abdc:	12000017 	ldw	r8,0(r2)
1000abe0:	29400104 	addi	r5,r5,4
1000abe4:	10800104 	addi	r2,r2,4
1000abe8:	2a3fff15 	stw	r8,-4(r5)
1000abec:	10fffb36 	bltu	r2,r3,1000abdc <__alt_data_end+0xf800abdc>
1000abf0:	1985c83a 	sub	r2,r3,r6
1000abf4:	10bffac4 	addi	r2,r2,-21
1000abf8:	1004d0ba 	srli	r2,r2,2
1000abfc:	10800044 	addi	r2,r2,1
1000ac00:	1085883a 	add	r2,r2,r2
1000ac04:	1085883a 	add	r2,r2,r2
1000ac08:	2089883a 	add	r4,r4,r2
1000ac0c:	21c0032e 	bgeu	r4,r7,1000ac1c <__copybits+0x74>
1000ac10:	20000015 	stw	zero,0(r4)
1000ac14:	21000104 	addi	r4,r4,4
1000ac18:	21fffd36 	bltu	r4,r7,1000ac10 <__alt_data_end+0xf800ac10>
1000ac1c:	f800283a 	ret

1000ac20 <__any_on>:
1000ac20:	20c00417 	ldw	r3,16(r4)
1000ac24:	2805d17a 	srai	r2,r5,5
1000ac28:	21000504 	addi	r4,r4,20
1000ac2c:	18800d0e 	bge	r3,r2,1000ac64 <__any_on+0x44>
1000ac30:	18c7883a 	add	r3,r3,r3
1000ac34:	18c7883a 	add	r3,r3,r3
1000ac38:	20c7883a 	add	r3,r4,r3
1000ac3c:	20c0192e 	bgeu	r4,r3,1000aca4 <__any_on+0x84>
1000ac40:	18bfff17 	ldw	r2,-4(r3)
1000ac44:	18ffff04 	addi	r3,r3,-4
1000ac48:	1000041e 	bne	r2,zero,1000ac5c <__any_on+0x3c>
1000ac4c:	20c0142e 	bgeu	r4,r3,1000aca0 <__any_on+0x80>
1000ac50:	18ffff04 	addi	r3,r3,-4
1000ac54:	19400017 	ldw	r5,0(r3)
1000ac58:	283ffc26 	beq	r5,zero,1000ac4c <__alt_data_end+0xf800ac4c>
1000ac5c:	00800044 	movi	r2,1
1000ac60:	f800283a 	ret
1000ac64:	10c00a0e 	bge	r2,r3,1000ac90 <__any_on+0x70>
1000ac68:	1085883a 	add	r2,r2,r2
1000ac6c:	1085883a 	add	r2,r2,r2
1000ac70:	294007cc 	andi	r5,r5,31
1000ac74:	2087883a 	add	r3,r4,r2
1000ac78:	283ff026 	beq	r5,zero,1000ac3c <__alt_data_end+0xf800ac3c>
1000ac7c:	19800017 	ldw	r6,0(r3)
1000ac80:	3144d83a 	srl	r2,r6,r5
1000ac84:	114a983a 	sll	r5,r2,r5
1000ac88:	29bff41e 	bne	r5,r6,1000ac5c <__alt_data_end+0xf800ac5c>
1000ac8c:	003feb06 	br	1000ac3c <__alt_data_end+0xf800ac3c>
1000ac90:	1085883a 	add	r2,r2,r2
1000ac94:	1085883a 	add	r2,r2,r2
1000ac98:	2087883a 	add	r3,r4,r2
1000ac9c:	003fe706 	br	1000ac3c <__alt_data_end+0xf800ac3c>
1000aca0:	f800283a 	ret
1000aca4:	0005883a 	mov	r2,zero
1000aca8:	f800283a 	ret

1000acac <_realloc_r>:
1000acac:	defff604 	addi	sp,sp,-40
1000acb0:	dcc00315 	stw	r19,12(sp)
1000acb4:	dc400115 	stw	r17,4(sp)
1000acb8:	dfc00915 	stw	ra,36(sp)
1000acbc:	df000815 	stw	fp,32(sp)
1000acc0:	ddc00715 	stw	r23,28(sp)
1000acc4:	dd800615 	stw	r22,24(sp)
1000acc8:	dd400515 	stw	r21,20(sp)
1000accc:	dd000415 	stw	r20,16(sp)
1000acd0:	dc800215 	stw	r18,8(sp)
1000acd4:	dc000015 	stw	r16,0(sp)
1000acd8:	2827883a 	mov	r19,r5
1000acdc:	3023883a 	mov	r17,r6
1000ace0:	2800bf26 	beq	r5,zero,1000afe0 <_realloc_r+0x334>
1000ace4:	2025883a 	mov	r18,r4
1000ace8:	000ef5c0 	call	1000ef5c <__malloc_lock>
1000acec:	98ffff17 	ldw	r3,-4(r19)
1000acf0:	01bfff04 	movi	r6,-4
1000acf4:	890002c4 	addi	r4,r17,11
1000acf8:	01c00584 	movi	r7,22
1000acfc:	9d7ffe04 	addi	r21,r19,-8
1000ad00:	19a0703a 	and	r16,r3,r6
1000ad04:	39003f2e 	bgeu	r7,r4,1000ae04 <_realloc_r+0x158>
1000ad08:	053ffe04 	movi	r20,-8
1000ad0c:	2528703a 	and	r20,r4,r20
1000ad10:	a00f883a 	mov	r7,r20
1000ad14:	a0008216 	blt	r20,zero,1000af20 <_realloc_r+0x274>
1000ad18:	a4408136 	bltu	r20,r17,1000af20 <_realloc_r+0x274>
1000ad1c:	81c03c0e 	bge	r16,r7,1000ae10 <_realloc_r+0x164>
1000ad20:	07040074 	movhi	fp,4097
1000ad24:	e7064c04 	addi	fp,fp,6448
1000ad28:	e1000217 	ldw	r4,8(fp)
1000ad2c:	ac05883a 	add	r2,r21,r16
1000ad30:	2080bf26 	beq	r4,r2,1000b030 <_realloc_r+0x384>
1000ad34:	11000117 	ldw	r4,4(r2)
1000ad38:	023fff84 	movi	r8,-2
1000ad3c:	2210703a 	and	r8,r4,r8
1000ad40:	1211883a 	add	r8,r2,r8
1000ad44:	41400117 	ldw	r5,4(r8)
1000ad48:	2940004c 	andi	r5,r5,1
1000ad4c:	28004a1e 	bne	r5,zero,1000ae78 <_realloc_r+0x1cc>
1000ad50:	017fff04 	movi	r5,-4
1000ad54:	2148703a 	and	r4,r4,r5
1000ad58:	2409883a 	add	r4,r4,r16
1000ad5c:	21c0ad0e 	bge	r4,r7,1000b014 <_realloc_r+0x368>
1000ad60:	18c0004c 	andi	r3,r3,1
1000ad64:	18007f1e 	bne	r3,zero,1000af64 <_realloc_r+0x2b8>
1000ad68:	9dfffe17 	ldw	r23,-8(r19)
1000ad6c:	adefc83a 	sub	r23,r21,r23
1000ad70:	bd800117 	ldw	r22,4(r23)
1000ad74:	b14a703a 	and	r5,r22,r5
1000ad78:	216d883a 	add	r22,r4,r5
1000ad7c:	b1c04516 	blt	r22,r7,1000ae94 <_realloc_r+0x1e8>
1000ad80:	10c00317 	ldw	r3,12(r2)
1000ad84:	10800217 	ldw	r2,8(r2)
1000ad88:	81bfff04 	addi	r6,r16,-4
1000ad8c:	bc400204 	addi	r17,r23,8
1000ad90:	10c00315 	stw	r3,12(r2)
1000ad94:	18800215 	stw	r2,8(r3)
1000ad98:	b9400217 	ldw	r5,8(r23)
1000ad9c:	b8c00317 	ldw	r3,12(r23)
1000ada0:	00800904 	movi	r2,36
1000ada4:	28c00315 	stw	r3,12(r5)
1000ada8:	19400215 	stw	r5,8(r3)
1000adac:	1180ef36 	bltu	r2,r6,1000b16c <_realloc_r+0x4c0>
1000adb0:	008004c4 	movi	r2,19
1000adb4:	1180da2e 	bgeu	r2,r6,1000b120 <_realloc_r+0x474>
1000adb8:	98800017 	ldw	r2,0(r19)
1000adbc:	b8800215 	stw	r2,8(r23)
1000adc0:	98800117 	ldw	r2,4(r19)
1000adc4:	b8800315 	stw	r2,12(r23)
1000adc8:	008006c4 	movi	r2,27
1000adcc:	1180fc2e 	bgeu	r2,r6,1000b1c0 <_realloc_r+0x514>
1000add0:	98800217 	ldw	r2,8(r19)
1000add4:	b8800415 	stw	r2,16(r23)
1000add8:	98800317 	ldw	r2,12(r19)
1000addc:	b8800515 	stw	r2,20(r23)
1000ade0:	00800904 	movi	r2,36
1000ade4:	3080421e 	bne	r6,r2,1000aef0 <_realloc_r+0x244>
1000ade8:	98800417 	ldw	r2,16(r19)
1000adec:	9cc00604 	addi	r19,r19,24
1000adf0:	b8c00804 	addi	r3,r23,32
1000adf4:	b8800615 	stw	r2,24(r23)
1000adf8:	98bfff17 	ldw	r2,-4(r19)
1000adfc:	b8800715 	stw	r2,28(r23)
1000ae00:	00003d06 	br	1000aef8 <_realloc_r+0x24c>
1000ae04:	01c00404 	movi	r7,16
1000ae08:	3829883a 	mov	r20,r7
1000ae0c:	003fc206 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000ae10:	9823883a 	mov	r17,r19
1000ae14:	850fc83a 	sub	r7,r16,r20
1000ae18:	008003c4 	movi	r2,15
1000ae1c:	18c0004c 	andi	r3,r3,1
1000ae20:	11c04336 	bltu	r2,r7,1000af30 <_realloc_r+0x284>
1000ae24:	1c06b03a 	or	r3,r3,r16
1000ae28:	a8c00115 	stw	r3,4(r21)
1000ae2c:	ac21883a 	add	r16,r21,r16
1000ae30:	80c00117 	ldw	r3,4(r16)
1000ae34:	18c00054 	ori	r3,r3,1
1000ae38:	80c00115 	stw	r3,4(r16)
1000ae3c:	9009883a 	mov	r4,r18
1000ae40:	000ef7c0 	call	1000ef7c <__malloc_unlock>
1000ae44:	8805883a 	mov	r2,r17
1000ae48:	dfc00917 	ldw	ra,36(sp)
1000ae4c:	df000817 	ldw	fp,32(sp)
1000ae50:	ddc00717 	ldw	r23,28(sp)
1000ae54:	dd800617 	ldw	r22,24(sp)
1000ae58:	dd400517 	ldw	r21,20(sp)
1000ae5c:	dd000417 	ldw	r20,16(sp)
1000ae60:	dcc00317 	ldw	r19,12(sp)
1000ae64:	dc800217 	ldw	r18,8(sp)
1000ae68:	dc400117 	ldw	r17,4(sp)
1000ae6c:	dc000017 	ldw	r16,0(sp)
1000ae70:	dec00a04 	addi	sp,sp,40
1000ae74:	f800283a 	ret
1000ae78:	18c0004c 	andi	r3,r3,1
1000ae7c:	1800391e 	bne	r3,zero,1000af64 <_realloc_r+0x2b8>
1000ae80:	9dfffe17 	ldw	r23,-8(r19)
1000ae84:	00bfff04 	movi	r2,-4
1000ae88:	adefc83a 	sub	r23,r21,r23
1000ae8c:	b9400117 	ldw	r5,4(r23)
1000ae90:	288a703a 	and	r5,r5,r2
1000ae94:	2c2d883a 	add	r22,r5,r16
1000ae98:	b1c03216 	blt	r22,r7,1000af64 <_realloc_r+0x2b8>
1000ae9c:	b8800317 	ldw	r2,12(r23)
1000aea0:	b8c00217 	ldw	r3,8(r23)
1000aea4:	81bfff04 	addi	r6,r16,-4
1000aea8:	01000904 	movi	r4,36
1000aeac:	18800315 	stw	r2,12(r3)
1000aeb0:	10c00215 	stw	r3,8(r2)
1000aeb4:	bc400204 	addi	r17,r23,8
1000aeb8:	2180ac36 	bltu	r4,r6,1000b16c <_realloc_r+0x4c0>
1000aebc:	008004c4 	movi	r2,19
1000aec0:	1180972e 	bgeu	r2,r6,1000b120 <_realloc_r+0x474>
1000aec4:	98800017 	ldw	r2,0(r19)
1000aec8:	b8800215 	stw	r2,8(r23)
1000aecc:	98800117 	ldw	r2,4(r19)
1000aed0:	b8800315 	stw	r2,12(r23)
1000aed4:	008006c4 	movi	r2,27
1000aed8:	1180b92e 	bgeu	r2,r6,1000b1c0 <_realloc_r+0x514>
1000aedc:	98800217 	ldw	r2,8(r19)
1000aee0:	b8800415 	stw	r2,16(r23)
1000aee4:	98800317 	ldw	r2,12(r19)
1000aee8:	b8800515 	stw	r2,20(r23)
1000aeec:	313fbe26 	beq	r6,r4,1000ade8 <__alt_data_end+0xf800ade8>
1000aef0:	b8c00604 	addi	r3,r23,24
1000aef4:	9cc00404 	addi	r19,r19,16
1000aef8:	98800017 	ldw	r2,0(r19)
1000aefc:	b021883a 	mov	r16,r22
1000af00:	b82b883a 	mov	r21,r23
1000af04:	18800015 	stw	r2,0(r3)
1000af08:	98800117 	ldw	r2,4(r19)
1000af0c:	18800115 	stw	r2,4(r3)
1000af10:	98800217 	ldw	r2,8(r19)
1000af14:	18800215 	stw	r2,8(r3)
1000af18:	b8c00117 	ldw	r3,4(r23)
1000af1c:	003fbd06 	br	1000ae14 <__alt_data_end+0xf800ae14>
1000af20:	00800304 	movi	r2,12
1000af24:	90800015 	stw	r2,0(r18)
1000af28:	0005883a 	mov	r2,zero
1000af2c:	003fc606 	br	1000ae48 <__alt_data_end+0xf800ae48>
1000af30:	1d06b03a 	or	r3,r3,r20
1000af34:	ad0b883a 	add	r5,r21,r20
1000af38:	a8c00115 	stw	r3,4(r21)
1000af3c:	38800054 	ori	r2,r7,1
1000af40:	28800115 	stw	r2,4(r5)
1000af44:	29cf883a 	add	r7,r5,r7
1000af48:	38800117 	ldw	r2,4(r7)
1000af4c:	9009883a 	mov	r4,r18
1000af50:	29400204 	addi	r5,r5,8
1000af54:	10800054 	ori	r2,r2,1
1000af58:	38800115 	stw	r2,4(r7)
1000af5c:	00084800 	call	10008480 <_free_r>
1000af60:	003fb606 	br	1000ae3c <__alt_data_end+0xf800ae3c>
1000af64:	880b883a 	mov	r5,r17
1000af68:	9009883a 	mov	r4,r18
1000af6c:	000901c0 	call	1000901c <_malloc_r>
1000af70:	1023883a 	mov	r17,r2
1000af74:	1000aa26 	beq	r2,zero,1000b220 <_realloc_r+0x574>
1000af78:	98ffff17 	ldw	r3,-4(r19)
1000af7c:	113ffe04 	addi	r4,r2,-8
1000af80:	00bfff84 	movi	r2,-2
1000af84:	1884703a 	and	r2,r3,r2
1000af88:	a885883a 	add	r2,r21,r2
1000af8c:	20808626 	beq	r4,r2,1000b1a8 <_realloc_r+0x4fc>
1000af90:	81bfff04 	addi	r6,r16,-4
1000af94:	00800904 	movi	r2,36
1000af98:	11807036 	bltu	r2,r6,1000b15c <_realloc_r+0x4b0>
1000af9c:	00c004c4 	movi	r3,19
1000afa0:	19805636 	bltu	r3,r6,1000b0fc <_realloc_r+0x450>
1000afa4:	8805883a 	mov	r2,r17
1000afa8:	9807883a 	mov	r3,r19
1000afac:	19000017 	ldw	r4,0(r3)
1000afb0:	11000015 	stw	r4,0(r2)
1000afb4:	19000117 	ldw	r4,4(r3)
1000afb8:	11000115 	stw	r4,4(r2)
1000afbc:	18c00217 	ldw	r3,8(r3)
1000afc0:	10c00215 	stw	r3,8(r2)
1000afc4:	980b883a 	mov	r5,r19
1000afc8:	9009883a 	mov	r4,r18
1000afcc:	00084800 	call	10008480 <_free_r>
1000afd0:	9009883a 	mov	r4,r18
1000afd4:	000ef7c0 	call	1000ef7c <__malloc_unlock>
1000afd8:	8805883a 	mov	r2,r17
1000afdc:	003f9a06 	br	1000ae48 <__alt_data_end+0xf800ae48>
1000afe0:	300b883a 	mov	r5,r6
1000afe4:	dfc00917 	ldw	ra,36(sp)
1000afe8:	df000817 	ldw	fp,32(sp)
1000afec:	ddc00717 	ldw	r23,28(sp)
1000aff0:	dd800617 	ldw	r22,24(sp)
1000aff4:	dd400517 	ldw	r21,20(sp)
1000aff8:	dd000417 	ldw	r20,16(sp)
1000affc:	dcc00317 	ldw	r19,12(sp)
1000b000:	dc800217 	ldw	r18,8(sp)
1000b004:	dc400117 	ldw	r17,4(sp)
1000b008:	dc000017 	ldw	r16,0(sp)
1000b00c:	dec00a04 	addi	sp,sp,40
1000b010:	000901c1 	jmpi	1000901c <_malloc_r>
1000b014:	11400317 	ldw	r5,12(r2)
1000b018:	10800217 	ldw	r2,8(r2)
1000b01c:	9823883a 	mov	r17,r19
1000b020:	2021883a 	mov	r16,r4
1000b024:	11400315 	stw	r5,12(r2)
1000b028:	28800215 	stw	r2,8(r5)
1000b02c:	003f7906 	br	1000ae14 <__alt_data_end+0xf800ae14>
1000b030:	21000117 	ldw	r4,4(r4)
1000b034:	00bfff04 	movi	r2,-4
1000b038:	a1800404 	addi	r6,r20,16
1000b03c:	2088703a 	and	r4,r4,r2
1000b040:	2409883a 	add	r4,r4,r16
1000b044:	2180380e 	bge	r4,r6,1000b128 <_realloc_r+0x47c>
1000b048:	18c0004c 	andi	r3,r3,1
1000b04c:	183fc51e 	bne	r3,zero,1000af64 <__alt_data_end+0xf800af64>
1000b050:	9dfffe17 	ldw	r23,-8(r19)
1000b054:	adefc83a 	sub	r23,r21,r23
1000b058:	b9400117 	ldw	r5,4(r23)
1000b05c:	288a703a 	and	r5,r5,r2
1000b060:	216d883a 	add	r22,r4,r5
1000b064:	b1bf8b16 	blt	r22,r6,1000ae94 <__alt_data_end+0xf800ae94>
1000b068:	b8800317 	ldw	r2,12(r23)
1000b06c:	b8c00217 	ldw	r3,8(r23)
1000b070:	81bfff04 	addi	r6,r16,-4
1000b074:	01000904 	movi	r4,36
1000b078:	18800315 	stw	r2,12(r3)
1000b07c:	10c00215 	stw	r3,8(r2)
1000b080:	bc400204 	addi	r17,r23,8
1000b084:	21805a36 	bltu	r4,r6,1000b1f0 <_realloc_r+0x544>
1000b088:	008004c4 	movi	r2,19
1000b08c:	1180562e 	bgeu	r2,r6,1000b1e8 <_realloc_r+0x53c>
1000b090:	98800017 	ldw	r2,0(r19)
1000b094:	b8800215 	stw	r2,8(r23)
1000b098:	98800117 	ldw	r2,4(r19)
1000b09c:	b8800315 	stw	r2,12(r23)
1000b0a0:	008006c4 	movi	r2,27
1000b0a4:	11805636 	bltu	r2,r6,1000b200 <_realloc_r+0x554>
1000b0a8:	b8800404 	addi	r2,r23,16
1000b0ac:	9cc00204 	addi	r19,r19,8
1000b0b0:	98c00017 	ldw	r3,0(r19)
1000b0b4:	10c00015 	stw	r3,0(r2)
1000b0b8:	98c00117 	ldw	r3,4(r19)
1000b0bc:	10c00115 	stw	r3,4(r2)
1000b0c0:	98c00217 	ldw	r3,8(r19)
1000b0c4:	10c00215 	stw	r3,8(r2)
1000b0c8:	bd07883a 	add	r3,r23,r20
1000b0cc:	b505c83a 	sub	r2,r22,r20
1000b0d0:	e0c00215 	stw	r3,8(fp)
1000b0d4:	10800054 	ori	r2,r2,1
1000b0d8:	18800115 	stw	r2,4(r3)
1000b0dc:	b8800117 	ldw	r2,4(r23)
1000b0e0:	9009883a 	mov	r4,r18
1000b0e4:	1080004c 	andi	r2,r2,1
1000b0e8:	a0a8b03a 	or	r20,r20,r2
1000b0ec:	bd000115 	stw	r20,4(r23)
1000b0f0:	000ef7c0 	call	1000ef7c <__malloc_unlock>
1000b0f4:	8805883a 	mov	r2,r17
1000b0f8:	003f5306 	br	1000ae48 <__alt_data_end+0xf800ae48>
1000b0fc:	98c00017 	ldw	r3,0(r19)
1000b100:	88c00015 	stw	r3,0(r17)
1000b104:	98c00117 	ldw	r3,4(r19)
1000b108:	88c00115 	stw	r3,4(r17)
1000b10c:	00c006c4 	movi	r3,27
1000b110:	19801d36 	bltu	r3,r6,1000b188 <_realloc_r+0x4dc>
1000b114:	88800204 	addi	r2,r17,8
1000b118:	98c00204 	addi	r3,r19,8
1000b11c:	003fa306 	br	1000afac <__alt_data_end+0xf800afac>
1000b120:	8807883a 	mov	r3,r17
1000b124:	003f7406 	br	1000aef8 <__alt_data_end+0xf800aef8>
1000b128:	ad2b883a 	add	r21,r21,r20
1000b12c:	2505c83a 	sub	r2,r4,r20
1000b130:	e5400215 	stw	r21,8(fp)
1000b134:	10800054 	ori	r2,r2,1
1000b138:	a8800115 	stw	r2,4(r21)
1000b13c:	98bfff17 	ldw	r2,-4(r19)
1000b140:	9009883a 	mov	r4,r18
1000b144:	1080004c 	andi	r2,r2,1
1000b148:	a0a8b03a 	or	r20,r20,r2
1000b14c:	9d3fff15 	stw	r20,-4(r19)
1000b150:	000ef7c0 	call	1000ef7c <__malloc_unlock>
1000b154:	9805883a 	mov	r2,r19
1000b158:	003f3b06 	br	1000ae48 <__alt_data_end+0xf800ae48>
1000b15c:	8809883a 	mov	r4,r17
1000b160:	980b883a 	mov	r5,r19
1000b164:	00099e40 	call	100099e4 <memmove>
1000b168:	003f9606 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b16c:	8809883a 	mov	r4,r17
1000b170:	980b883a 	mov	r5,r19
1000b174:	00099e40 	call	100099e4 <memmove>
1000b178:	b8c00117 	ldw	r3,4(r23)
1000b17c:	b021883a 	mov	r16,r22
1000b180:	b82b883a 	mov	r21,r23
1000b184:	003f2306 	br	1000ae14 <__alt_data_end+0xf800ae14>
1000b188:	98c00217 	ldw	r3,8(r19)
1000b18c:	88c00215 	stw	r3,8(r17)
1000b190:	98c00317 	ldw	r3,12(r19)
1000b194:	88c00315 	stw	r3,12(r17)
1000b198:	30800c26 	beq	r6,r2,1000b1cc <_realloc_r+0x520>
1000b19c:	88800404 	addi	r2,r17,16
1000b1a0:	98c00404 	addi	r3,r19,16
1000b1a4:	003f8106 	br	1000afac <__alt_data_end+0xf800afac>
1000b1a8:	893fff17 	ldw	r4,-4(r17)
1000b1ac:	00bfff04 	movi	r2,-4
1000b1b0:	9823883a 	mov	r17,r19
1000b1b4:	2084703a 	and	r2,r4,r2
1000b1b8:	80a1883a 	add	r16,r16,r2
1000b1bc:	003f1506 	br	1000ae14 <__alt_data_end+0xf800ae14>
1000b1c0:	b8c00404 	addi	r3,r23,16
1000b1c4:	9cc00204 	addi	r19,r19,8
1000b1c8:	003f4b06 	br	1000aef8 <__alt_data_end+0xf800aef8>
1000b1cc:	99000417 	ldw	r4,16(r19)
1000b1d0:	88800604 	addi	r2,r17,24
1000b1d4:	98c00604 	addi	r3,r19,24
1000b1d8:	89000415 	stw	r4,16(r17)
1000b1dc:	99000517 	ldw	r4,20(r19)
1000b1e0:	89000515 	stw	r4,20(r17)
1000b1e4:	003f7106 	br	1000afac <__alt_data_end+0xf800afac>
1000b1e8:	8805883a 	mov	r2,r17
1000b1ec:	003fb006 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000b1f0:	8809883a 	mov	r4,r17
1000b1f4:	980b883a 	mov	r5,r19
1000b1f8:	00099e40 	call	100099e4 <memmove>
1000b1fc:	003fb206 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b200:	98800217 	ldw	r2,8(r19)
1000b204:	b8800415 	stw	r2,16(r23)
1000b208:	98800317 	ldw	r2,12(r19)
1000b20c:	b8800515 	stw	r2,20(r23)
1000b210:	31000726 	beq	r6,r4,1000b230 <_realloc_r+0x584>
1000b214:	b8800604 	addi	r2,r23,24
1000b218:	9cc00404 	addi	r19,r19,16
1000b21c:	003fa406 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000b220:	9009883a 	mov	r4,r18
1000b224:	000ef7c0 	call	1000ef7c <__malloc_unlock>
1000b228:	0005883a 	mov	r2,zero
1000b22c:	003f0606 	br	1000ae48 <__alt_data_end+0xf800ae48>
1000b230:	98c00417 	ldw	r3,16(r19)
1000b234:	9cc00604 	addi	r19,r19,24
1000b238:	b8800804 	addi	r2,r23,32
1000b23c:	b8c00615 	stw	r3,24(r23)
1000b240:	98ffff17 	ldw	r3,-4(r19)
1000b244:	b8c00715 	stw	r3,28(r23)
1000b248:	003f9906 	br	1000b0b0 <__alt_data_end+0xf800b0b0>

1000b24c <__fpclassifyd>:
1000b24c:	00a00034 	movhi	r2,32768
1000b250:	10bfffc4 	addi	r2,r2,-1
1000b254:	2884703a 	and	r2,r5,r2
1000b258:	10000726 	beq	r2,zero,1000b278 <__fpclassifyd+0x2c>
1000b25c:	00fffc34 	movhi	r3,65520
1000b260:	019ff834 	movhi	r6,32736
1000b264:	28c7883a 	add	r3,r5,r3
1000b268:	31bfffc4 	addi	r6,r6,-1
1000b26c:	30c00536 	bltu	r6,r3,1000b284 <__fpclassifyd+0x38>
1000b270:	00800104 	movi	r2,4
1000b274:	f800283a 	ret
1000b278:	2000021e 	bne	r4,zero,1000b284 <__fpclassifyd+0x38>
1000b27c:	00800084 	movi	r2,2
1000b280:	f800283a 	ret
1000b284:	00dffc34 	movhi	r3,32752
1000b288:	019ff834 	movhi	r6,32736
1000b28c:	28cb883a 	add	r5,r5,r3
1000b290:	31bfffc4 	addi	r6,r6,-1
1000b294:	317ff62e 	bgeu	r6,r5,1000b270 <__alt_data_end+0xf800b270>
1000b298:	01400434 	movhi	r5,16
1000b29c:	297fffc4 	addi	r5,r5,-1
1000b2a0:	28800236 	bltu	r5,r2,1000b2ac <__fpclassifyd+0x60>
1000b2a4:	008000c4 	movi	r2,3
1000b2a8:	f800283a 	ret
1000b2ac:	10c00226 	beq	r2,r3,1000b2b8 <__fpclassifyd+0x6c>
1000b2b0:	0005883a 	mov	r2,zero
1000b2b4:	f800283a 	ret
1000b2b8:	2005003a 	cmpeq	r2,r4,zero
1000b2bc:	f800283a 	ret

1000b2c0 <_sbrk_r>:
1000b2c0:	defffd04 	addi	sp,sp,-12
1000b2c4:	dc000015 	stw	r16,0(sp)
1000b2c8:	04040074 	movhi	r16,4097
1000b2cc:	dc400115 	stw	r17,4(sp)
1000b2d0:	8412b004 	addi	r16,r16,19136
1000b2d4:	2023883a 	mov	r17,r4
1000b2d8:	2809883a 	mov	r4,r5
1000b2dc:	dfc00215 	stw	ra,8(sp)
1000b2e0:	80000015 	stw	zero,0(r16)
1000b2e4:	000f1700 	call	1000f170 <sbrk>
1000b2e8:	00ffffc4 	movi	r3,-1
1000b2ec:	10c00526 	beq	r2,r3,1000b304 <_sbrk_r+0x44>
1000b2f0:	dfc00217 	ldw	ra,8(sp)
1000b2f4:	dc400117 	ldw	r17,4(sp)
1000b2f8:	dc000017 	ldw	r16,0(sp)
1000b2fc:	dec00304 	addi	sp,sp,12
1000b300:	f800283a 	ret
1000b304:	80c00017 	ldw	r3,0(r16)
1000b308:	183ff926 	beq	r3,zero,1000b2f0 <__alt_data_end+0xf800b2f0>
1000b30c:	88c00015 	stw	r3,0(r17)
1000b310:	003ff706 	br	1000b2f0 <__alt_data_end+0xf800b2f0>

1000b314 <__sread>:
1000b314:	defffe04 	addi	sp,sp,-8
1000b318:	dc000015 	stw	r16,0(sp)
1000b31c:	2821883a 	mov	r16,r5
1000b320:	2940038f 	ldh	r5,14(r5)
1000b324:	dfc00115 	stw	ra,4(sp)
1000b328:	000cfd00 	call	1000cfd0 <_read_r>
1000b32c:	10000716 	blt	r2,zero,1000b34c <__sread+0x38>
1000b330:	80c01417 	ldw	r3,80(r16)
1000b334:	1887883a 	add	r3,r3,r2
1000b338:	80c01415 	stw	r3,80(r16)
1000b33c:	dfc00117 	ldw	ra,4(sp)
1000b340:	dc000017 	ldw	r16,0(sp)
1000b344:	dec00204 	addi	sp,sp,8
1000b348:	f800283a 	ret
1000b34c:	80c0030b 	ldhu	r3,12(r16)
1000b350:	18fbffcc 	andi	r3,r3,61439
1000b354:	80c0030d 	sth	r3,12(r16)
1000b358:	dfc00117 	ldw	ra,4(sp)
1000b35c:	dc000017 	ldw	r16,0(sp)
1000b360:	dec00204 	addi	sp,sp,8
1000b364:	f800283a 	ret

1000b368 <__seofread>:
1000b368:	0005883a 	mov	r2,zero
1000b36c:	f800283a 	ret

1000b370 <__swrite>:
1000b370:	2880030b 	ldhu	r2,12(r5)
1000b374:	defffb04 	addi	sp,sp,-20
1000b378:	dcc00315 	stw	r19,12(sp)
1000b37c:	dc800215 	stw	r18,8(sp)
1000b380:	dc400115 	stw	r17,4(sp)
1000b384:	dc000015 	stw	r16,0(sp)
1000b388:	dfc00415 	stw	ra,16(sp)
1000b38c:	10c0400c 	andi	r3,r2,256
1000b390:	2821883a 	mov	r16,r5
1000b394:	2027883a 	mov	r19,r4
1000b398:	3025883a 	mov	r18,r6
1000b39c:	3823883a 	mov	r17,r7
1000b3a0:	18000526 	beq	r3,zero,1000b3b8 <__swrite+0x48>
1000b3a4:	2940038f 	ldh	r5,14(r5)
1000b3a8:	000d883a 	mov	r6,zero
1000b3ac:	01c00084 	movi	r7,2
1000b3b0:	000cf740 	call	1000cf74 <_lseek_r>
1000b3b4:	8080030b 	ldhu	r2,12(r16)
1000b3b8:	8140038f 	ldh	r5,14(r16)
1000b3bc:	10bbffcc 	andi	r2,r2,61439
1000b3c0:	9809883a 	mov	r4,r19
1000b3c4:	900d883a 	mov	r6,r18
1000b3c8:	880f883a 	mov	r7,r17
1000b3cc:	8080030d 	sth	r2,12(r16)
1000b3d0:	dfc00417 	ldw	ra,16(sp)
1000b3d4:	dcc00317 	ldw	r19,12(sp)
1000b3d8:	dc800217 	ldw	r18,8(sp)
1000b3dc:	dc400117 	ldw	r17,4(sp)
1000b3e0:	dc000017 	ldw	r16,0(sp)
1000b3e4:	dec00504 	addi	sp,sp,20
1000b3e8:	000ca501 	jmpi	1000ca50 <_write_r>

1000b3ec <__sseek>:
1000b3ec:	defffe04 	addi	sp,sp,-8
1000b3f0:	dc000015 	stw	r16,0(sp)
1000b3f4:	2821883a 	mov	r16,r5
1000b3f8:	2940038f 	ldh	r5,14(r5)
1000b3fc:	dfc00115 	stw	ra,4(sp)
1000b400:	000cf740 	call	1000cf74 <_lseek_r>
1000b404:	00ffffc4 	movi	r3,-1
1000b408:	10c00826 	beq	r2,r3,1000b42c <__sseek+0x40>
1000b40c:	80c0030b 	ldhu	r3,12(r16)
1000b410:	80801415 	stw	r2,80(r16)
1000b414:	18c40014 	ori	r3,r3,4096
1000b418:	80c0030d 	sth	r3,12(r16)
1000b41c:	dfc00117 	ldw	ra,4(sp)
1000b420:	dc000017 	ldw	r16,0(sp)
1000b424:	dec00204 	addi	sp,sp,8
1000b428:	f800283a 	ret
1000b42c:	80c0030b 	ldhu	r3,12(r16)
1000b430:	18fbffcc 	andi	r3,r3,61439
1000b434:	80c0030d 	sth	r3,12(r16)
1000b438:	dfc00117 	ldw	ra,4(sp)
1000b43c:	dc000017 	ldw	r16,0(sp)
1000b440:	dec00204 	addi	sp,sp,8
1000b444:	f800283a 	ret

1000b448 <__sclose>:
1000b448:	2940038f 	ldh	r5,14(r5)
1000b44c:	000caac1 	jmpi	1000caac <_close_r>

1000b450 <strcmp>:
1000b450:	2144b03a 	or	r2,r4,r5
1000b454:	108000cc 	andi	r2,r2,3
1000b458:	1000171e 	bne	r2,zero,1000b4b8 <strcmp+0x68>
1000b45c:	20800017 	ldw	r2,0(r4)
1000b460:	28c00017 	ldw	r3,0(r5)
1000b464:	10c0141e 	bne	r2,r3,1000b4b8 <strcmp+0x68>
1000b468:	027fbff4 	movhi	r9,65279
1000b46c:	4a7fbfc4 	addi	r9,r9,-257
1000b470:	0086303a 	nor	r3,zero,r2
1000b474:	02202074 	movhi	r8,32897
1000b478:	1245883a 	add	r2,r2,r9
1000b47c:	42202004 	addi	r8,r8,-32640
1000b480:	10c4703a 	and	r2,r2,r3
1000b484:	1204703a 	and	r2,r2,r8
1000b488:	10000226 	beq	r2,zero,1000b494 <strcmp+0x44>
1000b48c:	00001706 	br	1000b4ec <strcmp+0x9c>
1000b490:	1000161e 	bne	r2,zero,1000b4ec <strcmp+0x9c>
1000b494:	21000104 	addi	r4,r4,4
1000b498:	20c00017 	ldw	r3,0(r4)
1000b49c:	29400104 	addi	r5,r5,4
1000b4a0:	29800017 	ldw	r6,0(r5)
1000b4a4:	1a4f883a 	add	r7,r3,r9
1000b4a8:	00c4303a 	nor	r2,zero,r3
1000b4ac:	3884703a 	and	r2,r7,r2
1000b4b0:	1204703a 	and	r2,r2,r8
1000b4b4:	19bff626 	beq	r3,r6,1000b490 <__alt_data_end+0xf800b490>
1000b4b8:	20800007 	ldb	r2,0(r4)
1000b4bc:	1000051e 	bne	r2,zero,1000b4d4 <strcmp+0x84>
1000b4c0:	00000606 	br	1000b4dc <strcmp+0x8c>
1000b4c4:	21000044 	addi	r4,r4,1
1000b4c8:	20800007 	ldb	r2,0(r4)
1000b4cc:	29400044 	addi	r5,r5,1
1000b4d0:	10000226 	beq	r2,zero,1000b4dc <strcmp+0x8c>
1000b4d4:	28c00007 	ldb	r3,0(r5)
1000b4d8:	10fffa26 	beq	r2,r3,1000b4c4 <__alt_data_end+0xf800b4c4>
1000b4dc:	20800003 	ldbu	r2,0(r4)
1000b4e0:	28c00003 	ldbu	r3,0(r5)
1000b4e4:	10c5c83a 	sub	r2,r2,r3
1000b4e8:	f800283a 	ret
1000b4ec:	0005883a 	mov	r2,zero
1000b4f0:	f800283a 	ret

1000b4f4 <__sprint_r.part.0>:
1000b4f4:	28801917 	ldw	r2,100(r5)
1000b4f8:	defff604 	addi	sp,sp,-40
1000b4fc:	dd400515 	stw	r21,20(sp)
1000b500:	dcc00315 	stw	r19,12(sp)
1000b504:	dfc00915 	stw	ra,36(sp)
1000b508:	df000815 	stw	fp,32(sp)
1000b50c:	ddc00715 	stw	r23,28(sp)
1000b510:	dd800615 	stw	r22,24(sp)
1000b514:	dd000415 	stw	r20,16(sp)
1000b518:	dc800215 	stw	r18,8(sp)
1000b51c:	dc400115 	stw	r17,4(sp)
1000b520:	dc000015 	stw	r16,0(sp)
1000b524:	1088000c 	andi	r2,r2,8192
1000b528:	2827883a 	mov	r19,r5
1000b52c:	302b883a 	mov	r21,r6
1000b530:	10002d26 	beq	r2,zero,1000b5e8 <__sprint_r.part.0+0xf4>
1000b534:	30800217 	ldw	r2,8(r6)
1000b538:	35800017 	ldw	r22,0(r6)
1000b53c:	10002826 	beq	r2,zero,1000b5e0 <__sprint_r.part.0+0xec>
1000b540:	2029883a 	mov	r20,r4
1000b544:	b5c00104 	addi	r23,r22,4
1000b548:	04bfffc4 	movi	r18,-1
1000b54c:	bc400017 	ldw	r17,0(r23)
1000b550:	b4000017 	ldw	r16,0(r22)
1000b554:	0039883a 	mov	fp,zero
1000b558:	8822d0ba 	srli	r17,r17,2
1000b55c:	04400316 	blt	zero,r17,1000b56c <__sprint_r.part.0+0x78>
1000b560:	00001706 	br	1000b5c0 <__sprint_r.part.0+0xcc>
1000b564:	84000104 	addi	r16,r16,4
1000b568:	8f001526 	beq	r17,fp,1000b5c0 <__sprint_r.part.0+0xcc>
1000b56c:	81400017 	ldw	r5,0(r16)
1000b570:	a009883a 	mov	r4,r20
1000b574:	980d883a 	mov	r6,r19
1000b578:	000ccec0 	call	1000ccec <_fputwc_r>
1000b57c:	e7000044 	addi	fp,fp,1
1000b580:	14bff81e 	bne	r2,r18,1000b564 <__alt_data_end+0xf800b564>
1000b584:	9005883a 	mov	r2,r18
1000b588:	a8000215 	stw	zero,8(r21)
1000b58c:	a8000115 	stw	zero,4(r21)
1000b590:	dfc00917 	ldw	ra,36(sp)
1000b594:	df000817 	ldw	fp,32(sp)
1000b598:	ddc00717 	ldw	r23,28(sp)
1000b59c:	dd800617 	ldw	r22,24(sp)
1000b5a0:	dd400517 	ldw	r21,20(sp)
1000b5a4:	dd000417 	ldw	r20,16(sp)
1000b5a8:	dcc00317 	ldw	r19,12(sp)
1000b5ac:	dc800217 	ldw	r18,8(sp)
1000b5b0:	dc400117 	ldw	r17,4(sp)
1000b5b4:	dc000017 	ldw	r16,0(sp)
1000b5b8:	dec00a04 	addi	sp,sp,40
1000b5bc:	f800283a 	ret
1000b5c0:	a8c00217 	ldw	r3,8(r21)
1000b5c4:	8c63883a 	add	r17,r17,r17
1000b5c8:	8c63883a 	add	r17,r17,r17
1000b5cc:	1c45c83a 	sub	r2,r3,r17
1000b5d0:	a8800215 	stw	r2,8(r21)
1000b5d4:	b5800204 	addi	r22,r22,8
1000b5d8:	bdc00204 	addi	r23,r23,8
1000b5dc:	103fdb1e 	bne	r2,zero,1000b54c <__alt_data_end+0xf800b54c>
1000b5e0:	0005883a 	mov	r2,zero
1000b5e4:	003fe806 	br	1000b588 <__alt_data_end+0xf800b588>
1000b5e8:	00087700 	call	10008770 <__sfvwrite_r>
1000b5ec:	003fe606 	br	1000b588 <__alt_data_end+0xf800b588>

1000b5f0 <__sprint_r>:
1000b5f0:	30c00217 	ldw	r3,8(r6)
1000b5f4:	18000126 	beq	r3,zero,1000b5fc <__sprint_r+0xc>
1000b5f8:	000b4f41 	jmpi	1000b4f4 <__sprint_r.part.0>
1000b5fc:	30000115 	stw	zero,4(r6)
1000b600:	0005883a 	mov	r2,zero
1000b604:	f800283a 	ret

1000b608 <___vfiprintf_internal_r>:
1000b608:	defeca04 	addi	sp,sp,-1240
1000b60c:	dcc12f15 	stw	r19,1212(sp)
1000b610:	dfc13515 	stw	ra,1236(sp)
1000b614:	df013415 	stw	fp,1232(sp)
1000b618:	ddc13315 	stw	r23,1228(sp)
1000b61c:	dd813215 	stw	r22,1224(sp)
1000b620:	dd413115 	stw	r21,1220(sp)
1000b624:	dd013015 	stw	r20,1216(sp)
1000b628:	dc812e15 	stw	r18,1208(sp)
1000b62c:	dc412d15 	stw	r17,1204(sp)
1000b630:	dc012c15 	stw	r16,1200(sp)
1000b634:	d9012115 	stw	r4,1156(sp)
1000b638:	d9412015 	stw	r5,1152(sp)
1000b63c:	d9c12315 	stw	r7,1164(sp)
1000b640:	3027883a 	mov	r19,r6
1000b644:	20000226 	beq	r4,zero,1000b650 <___vfiprintf_internal_r+0x48>
1000b648:	20800e17 	ldw	r2,56(r4)
1000b64c:	1000f726 	beq	r2,zero,1000ba2c <___vfiprintf_internal_r+0x424>
1000b650:	d8812017 	ldw	r2,1152(sp)
1000b654:	10c0030b 	ldhu	r3,12(r2)
1000b658:	1908000c 	andi	r4,r3,8192
1000b65c:	1805883a 	mov	r2,r3
1000b660:	2000081e 	bne	r4,zero,1000b684 <___vfiprintf_internal_r+0x7c>
1000b664:	d9412017 	ldw	r5,1152(sp)
1000b668:	18880014 	ori	r2,r3,8192
1000b66c:	00f7ffc4 	movi	r3,-8193
1000b670:	29001917 	ldw	r4,100(r5)
1000b674:	2880030d 	sth	r2,12(r5)
1000b678:	20c8703a 	and	r4,r4,r3
1000b67c:	29001915 	stw	r4,100(r5)
1000b680:	1007883a 	mov	r3,r2
1000b684:	1100020c 	andi	r4,r2,8
1000b688:	2000a726 	beq	r4,zero,1000b928 <___vfiprintf_internal_r+0x320>
1000b68c:	d9412017 	ldw	r5,1152(sp)
1000b690:	29000417 	ldw	r4,16(r5)
1000b694:	2000a426 	beq	r4,zero,1000b928 <___vfiprintf_internal_r+0x320>
1000b698:	1080068c 	andi	r2,r2,26
1000b69c:	01000284 	movi	r4,10
1000b6a0:	1100ab26 	beq	r2,r4,1000b950 <___vfiprintf_internal_r+0x348>
1000b6a4:	d9010a04 	addi	r4,sp,1064
1000b6a8:	d94109c4 	addi	r5,sp,1063
1000b6ac:	07040074 	movhi	fp,4097
1000b6b0:	04440074 	movhi	r17,4097
1000b6b4:	2145c83a 	sub	r2,r4,r5
1000b6b8:	e7051404 	addi	fp,fp,5200
1000b6bc:	8c451004 	addi	r17,r17,5184
1000b6c0:	d9011e15 	stw	r4,1144(sp)
1000b6c4:	d9411f15 	stw	r5,1148(sp)
1000b6c8:	dec11a15 	stw	sp,1128(sp)
1000b6cc:	d8011c15 	stw	zero,1136(sp)
1000b6d0:	d8011b15 	stw	zero,1132(sp)
1000b6d4:	d8012715 	stw	zero,1180(sp)
1000b6d8:	d8012515 	stw	zero,1172(sp)
1000b6dc:	d811883a 	mov	r8,sp
1000b6e0:	d8812815 	stw	r2,1184(sp)
1000b6e4:	982f883a 	mov	r23,r19
1000b6e8:	b8800007 	ldb	r2,0(r23)
1000b6ec:	1003b026 	beq	r2,zero,1000c5b0 <___vfiprintf_internal_r+0xfa8>
1000b6f0:	01000944 	movi	r4,37
1000b6f4:	1103ae26 	beq	r2,r4,1000c5b0 <___vfiprintf_internal_r+0xfa8>
1000b6f8:	b805883a 	mov	r2,r23
1000b6fc:	00000106 	br	1000b704 <___vfiprintf_internal_r+0xfc>
1000b700:	19000326 	beq	r3,r4,1000b710 <___vfiprintf_internal_r+0x108>
1000b704:	10800044 	addi	r2,r2,1
1000b708:	10c00007 	ldb	r3,0(r2)
1000b70c:	183ffc1e 	bne	r3,zero,1000b700 <__alt_data_end+0xf800b700>
1000b710:	15e1c83a 	sub	r16,r2,r23
1000b714:	1029883a 	mov	r20,r2
1000b718:	80001026 	beq	r16,zero,1000b75c <___vfiprintf_internal_r+0x154>
1000b71c:	d8c11c17 	ldw	r3,1136(sp)
1000b720:	d8811b17 	ldw	r2,1132(sp)
1000b724:	45c00015 	stw	r23,0(r8)
1000b728:	80c7883a 	add	r3,r16,r3
1000b72c:	10800044 	addi	r2,r2,1
1000b730:	44000115 	stw	r16,4(r8)
1000b734:	d8c11c15 	stw	r3,1136(sp)
1000b738:	d8811b15 	stw	r2,1132(sp)
1000b73c:	010001c4 	movi	r4,7
1000b740:	2080740e 	bge	r4,r2,1000b914 <___vfiprintf_internal_r+0x30c>
1000b744:	1803a71e 	bne	r3,zero,1000c5e4 <___vfiprintf_internal_r+0xfdc>
1000b748:	d8c12517 	ldw	r3,1172(sp)
1000b74c:	d8011b15 	stw	zero,1132(sp)
1000b750:	d811883a 	mov	r8,sp
1000b754:	1c07883a 	add	r3,r3,r16
1000b758:	d8c12515 	stw	r3,1172(sp)
1000b75c:	a0800007 	ldb	r2,0(r20)
1000b760:	1002bf26 	beq	r2,zero,1000c260 <___vfiprintf_internal_r+0xc58>
1000b764:	a5c00044 	addi	r23,r20,1
1000b768:	a1800047 	ldb	r6,1(r20)
1000b76c:	d8011d85 	stb	zero,1142(sp)
1000b770:	d8012205 	stb	zero,1160(sp)
1000b774:	043fffc4 	movi	r16,-1
1000b778:	d8012415 	stw	zero,1168(sp)
1000b77c:	0025883a 	mov	r18,zero
1000b780:	05001604 	movi	r20,88
1000b784:	05400244 	movi	r21,9
1000b788:	4027883a 	mov	r19,r8
1000b78c:	bdc00044 	addi	r23,r23,1
1000b790:	30bff804 	addi	r2,r6,-32
1000b794:	a0825636 	bltu	r20,r2,1000c0f0 <___vfiprintf_internal_r+0xae8>
1000b798:	100490ba 	slli	r2,r2,2
1000b79c:	01040074 	movhi	r4,4097
1000b7a0:	212dec04 	addi	r4,r4,-18512
1000b7a4:	1105883a 	add	r2,r2,r4
1000b7a8:	10800017 	ldw	r2,0(r2)
1000b7ac:	1000683a 	jmp	r2
1000b7b0:	1000c080 	call	11000c08 <_gp+0xfe5cc8>
1000b7b4:	1000c0f0 	cmpltui	zero,r2,771
1000b7b8:	1000c0f0 	cmpltui	zero,r2,771
1000b7bc:	1000c0e4 	muli	zero,r2,771
1000b7c0:	1000c0f0 	cmpltui	zero,r2,771
1000b7c4:	1000c0f0 	cmpltui	zero,r2,771
1000b7c8:	1000c0f0 	cmpltui	zero,r2,771
1000b7cc:	1000c0f0 	cmpltui	zero,r2,771
1000b7d0:	1000c0f0 	cmpltui	zero,r2,771
1000b7d4:	1000c0f0 	cmpltui	zero,r2,771
1000b7d8:	1000be70 	cmpltui	zero,r2,761
1000b7dc:	1000c098 	cmpnei	zero,r2,770
1000b7e0:	1000c0f0 	cmpltui	zero,r2,771
1000b7e4:	1000ba44 	addi	zero,r2,745
1000b7e8:	1000be94 	ori	zero,r2,762
1000b7ec:	1000c0f0 	cmpltui	zero,r2,771
1000b7f0:	1000ba50 	cmplti	zero,r2,745
1000b7f4:	1000ba5c 	xori	zero,r2,745
1000b7f8:	1000ba5c 	xori	zero,r2,745
1000b7fc:	1000ba5c 	xori	zero,r2,745
1000b800:	1000ba5c 	xori	zero,r2,745
1000b804:	1000ba5c 	xori	zero,r2,745
1000b808:	1000ba5c 	xori	zero,r2,745
1000b80c:	1000ba5c 	xori	zero,r2,745
1000b810:	1000ba5c 	xori	zero,r2,745
1000b814:	1000ba5c 	xori	zero,r2,745
1000b818:	1000c0f0 	cmpltui	zero,r2,771
1000b81c:	1000c0f0 	cmpltui	zero,r2,771
1000b820:	1000c0f0 	cmpltui	zero,r2,771
1000b824:	1000c0f0 	cmpltui	zero,r2,771
1000b828:	1000c0f0 	cmpltui	zero,r2,771
1000b82c:	1000c0f0 	cmpltui	zero,r2,771
1000b830:	1000c0f0 	cmpltui	zero,r2,771
1000b834:	1000c0f0 	cmpltui	zero,r2,771
1000b838:	1000c0f0 	cmpltui	zero,r2,771
1000b83c:	1000c0f0 	cmpltui	zero,r2,771
1000b840:	1000ba9c 	xori	zero,r2,746
1000b844:	1000c0f0 	cmpltui	zero,r2,771
1000b848:	1000c0f0 	cmpltui	zero,r2,771
1000b84c:	1000c0f0 	cmpltui	zero,r2,771
1000b850:	1000c0f0 	cmpltui	zero,r2,771
1000b854:	1000c0f0 	cmpltui	zero,r2,771
1000b858:	1000c0f0 	cmpltui	zero,r2,771
1000b85c:	1000c0f0 	cmpltui	zero,r2,771
1000b860:	1000c0f0 	cmpltui	zero,r2,771
1000b864:	1000c0f0 	cmpltui	zero,r2,771
1000b868:	1000c0f0 	cmpltui	zero,r2,771
1000b86c:	1000bd8c 	andi	zero,r2,758
1000b870:	1000c0f0 	cmpltui	zero,r2,771
1000b874:	1000c0f0 	cmpltui	zero,r2,771
1000b878:	1000c0f0 	cmpltui	zero,r2,771
1000b87c:	1000c0f0 	cmpltui	zero,r2,771
1000b880:	1000c0f0 	cmpltui	zero,r2,771
1000b884:	1000bdcc 	andi	zero,r2,759
1000b888:	1000c0f0 	cmpltui	zero,r2,771
1000b88c:	1000c0f0 	cmpltui	zero,r2,771
1000b890:	1000be10 	cmplti	zero,r2,760
1000b894:	1000c0f0 	cmpltui	zero,r2,771
1000b898:	1000c0f0 	cmpltui	zero,r2,771
1000b89c:	1000c0f0 	cmpltui	zero,r2,771
1000b8a0:	1000c0f0 	cmpltui	zero,r2,771
1000b8a4:	1000c0f0 	cmpltui	zero,r2,771
1000b8a8:	1000c0f0 	cmpltui	zero,r2,771
1000b8ac:	1000c0f0 	cmpltui	zero,r2,771
1000b8b0:	1000c0f0 	cmpltui	zero,r2,771
1000b8b4:	1000c0f0 	cmpltui	zero,r2,771
1000b8b8:	1000c0f0 	cmpltui	zero,r2,771
1000b8bc:	1000bd58 	cmpnei	zero,r2,757
1000b8c0:	1000c0a8 	cmpgeui	zero,r2,770
1000b8c4:	1000c0f0 	cmpltui	zero,r2,771
1000b8c8:	1000c0f0 	cmpltui	zero,r2,771
1000b8cc:	1000c0f0 	cmpltui	zero,r2,771
1000b8d0:	1000bee4 	muli	zero,r2,763
1000b8d4:	1000c0a8 	cmpgeui	zero,r2,770
1000b8d8:	1000c0f0 	cmpltui	zero,r2,771
1000b8dc:	1000c0f0 	cmpltui	zero,r2,771
1000b8e0:	1000bdfc 	xorhi	zero,r2,759
1000b8e4:	1000c0f0 	cmpltui	zero,r2,771
1000b8e8:	1000c048 	cmpgei	zero,r2,769
1000b8ec:	1000bfd0 	cmplti	zero,r2,767
1000b8f0:	1000c004 	addi	zero,r2,768
1000b8f4:	1000bef0 	cmpltui	zero,r2,763
1000b8f8:	1000c0f0 	cmpltui	zero,r2,771
1000b8fc:	1000befc 	xorhi	zero,r2,763
1000b900:	1000c0f0 	cmpltui	zero,r2,771
1000b904:	1000bf58 	cmpnei	zero,r2,765
1000b908:	1000c0f0 	cmpltui	zero,r2,771
1000b90c:	1000c0f0 	cmpltui	zero,r2,771
1000b910:	1000bf8c 	andi	zero,r2,766
1000b914:	42000204 	addi	r8,r8,8
1000b918:	d8c12517 	ldw	r3,1172(sp)
1000b91c:	1c07883a 	add	r3,r3,r16
1000b920:	d8c12515 	stw	r3,1172(sp)
1000b924:	003f8d06 	br	1000b75c <__alt_data_end+0xf800b75c>
1000b928:	d9012117 	ldw	r4,1156(sp)
1000b92c:	d9412017 	ldw	r5,1152(sp)
1000b930:	00062d00 	call	100062d0 <__swsetup_r>
1000b934:	1000301e 	bne	r2,zero,1000b9f8 <___vfiprintf_internal_r+0x3f0>
1000b938:	d8812017 	ldw	r2,1152(sp)
1000b93c:	01000284 	movi	r4,10
1000b940:	10c0030b 	ldhu	r3,12(r2)
1000b944:	1805883a 	mov	r2,r3
1000b948:	1080068c 	andi	r2,r2,26
1000b94c:	113f551e 	bne	r2,r4,1000b6a4 <__alt_data_end+0xf800b6a4>
1000b950:	d9012017 	ldw	r4,1152(sp)
1000b954:	2080038b 	ldhu	r2,14(r4)
1000b958:	113fffcc 	andi	r4,r2,65535
1000b95c:	2120001c 	xori	r4,r4,32768
1000b960:	21200004 	addi	r4,r4,-32768
1000b964:	203f4f16 	blt	r4,zero,1000b6a4 <__alt_data_end+0xf800b6a4>
1000b968:	d9412017 	ldw	r5,1152(sp)
1000b96c:	d9012117 	ldw	r4,1156(sp)
1000b970:	d9c12317 	ldw	r7,1164(sp)
1000b974:	2b001917 	ldw	r12,100(r5)
1000b978:	2ac00717 	ldw	r11,28(r5)
1000b97c:	2a800917 	ldw	r10,36(r5)
1000b980:	02010004 	movi	r8,1024
1000b984:	18ffff4c 	andi	r3,r3,65533
1000b988:	da0b883a 	add	r5,sp,r8
1000b98c:	980d883a 	mov	r6,r19
1000b990:	d8c1030d 	sth	r3,1036(sp)
1000b994:	db011915 	stw	r12,1124(sp)
1000b998:	d881038d 	sth	r2,1038(sp)
1000b99c:	dac10715 	stw	r11,1052(sp)
1000b9a0:	da810915 	stw	r10,1060(sp)
1000b9a4:	dec10015 	stw	sp,1024(sp)
1000b9a8:	dec10415 	stw	sp,1040(sp)
1000b9ac:	da010215 	stw	r8,1032(sp)
1000b9b0:	da010515 	stw	r8,1044(sp)
1000b9b4:	d8010615 	stw	zero,1048(sp)
1000b9b8:	000b6080 	call	1000b608 <___vfiprintf_internal_r>
1000b9bc:	1021883a 	mov	r16,r2
1000b9c0:	10000416 	blt	r2,zero,1000b9d4 <___vfiprintf_internal_r+0x3cc>
1000b9c4:	d9012117 	ldw	r4,1156(sp)
1000b9c8:	d9410004 	addi	r5,sp,1024
1000b9cc:	0007d500 	call	10007d50 <_fflush_r>
1000b9d0:	10040f1e 	bne	r2,zero,1000ca10 <___vfiprintf_internal_r+0x1408>
1000b9d4:	d881030b 	ldhu	r2,1036(sp)
1000b9d8:	1080100c 	andi	r2,r2,64
1000b9dc:	10000426 	beq	r2,zero,1000b9f0 <___vfiprintf_internal_r+0x3e8>
1000b9e0:	d8c12017 	ldw	r3,1152(sp)
1000b9e4:	1880030b 	ldhu	r2,12(r3)
1000b9e8:	10801014 	ori	r2,r2,64
1000b9ec:	1880030d 	sth	r2,12(r3)
1000b9f0:	8005883a 	mov	r2,r16
1000b9f4:	00000106 	br	1000b9fc <___vfiprintf_internal_r+0x3f4>
1000b9f8:	00bfffc4 	movi	r2,-1
1000b9fc:	dfc13517 	ldw	ra,1236(sp)
1000ba00:	df013417 	ldw	fp,1232(sp)
1000ba04:	ddc13317 	ldw	r23,1228(sp)
1000ba08:	dd813217 	ldw	r22,1224(sp)
1000ba0c:	dd413117 	ldw	r21,1220(sp)
1000ba10:	dd013017 	ldw	r20,1216(sp)
1000ba14:	dcc12f17 	ldw	r19,1212(sp)
1000ba18:	dc812e17 	ldw	r18,1208(sp)
1000ba1c:	dc412d17 	ldw	r17,1204(sp)
1000ba20:	dc012c17 	ldw	r16,1200(sp)
1000ba24:	dec13604 	addi	sp,sp,1240
1000ba28:	f800283a 	ret
1000ba2c:	000830c0 	call	1000830c <__sinit>
1000ba30:	003f0706 	br	1000b650 <__alt_data_end+0xf800b650>
1000ba34:	d8c12417 	ldw	r3,1168(sp)
1000ba38:	d8812315 	stw	r2,1164(sp)
1000ba3c:	00c7c83a 	sub	r3,zero,r3
1000ba40:	d8c12415 	stw	r3,1168(sp)
1000ba44:	94800114 	ori	r18,r18,4
1000ba48:	b9800007 	ldb	r6,0(r23)
1000ba4c:	003f4f06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000ba50:	94802014 	ori	r18,r18,128
1000ba54:	b9800007 	ldb	r6,0(r23)
1000ba58:	003f4c06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000ba5c:	dc012615 	stw	r16,1176(sp)
1000ba60:	d8012415 	stw	zero,1168(sp)
1000ba64:	35bff404 	addi	r22,r6,-48
1000ba68:	0009883a 	mov	r4,zero
1000ba6c:	b821883a 	mov	r16,r23
1000ba70:	01400284 	movi	r5,10
1000ba74:	0002c180 	call	10002c18 <__mulsi3>
1000ba78:	81800007 	ldb	r6,0(r16)
1000ba7c:	1589883a 	add	r4,r2,r22
1000ba80:	bdc00044 	addi	r23,r23,1
1000ba84:	35bff404 	addi	r22,r6,-48
1000ba88:	b821883a 	mov	r16,r23
1000ba8c:	adbff82e 	bgeu	r21,r22,1000ba70 <__alt_data_end+0xf800ba70>
1000ba90:	d9012415 	stw	r4,1168(sp)
1000ba94:	dc012617 	ldw	r16,1176(sp)
1000ba98:	003f3d06 	br	1000b790 <__alt_data_end+0xf800b790>
1000ba9c:	d8c12203 	ldbu	r3,1160(sp)
1000baa0:	94800414 	ori	r18,r18,16
1000baa4:	9080080c 	andi	r2,r18,32
1000baa8:	d8c11d85 	stb	r3,1142(sp)
1000baac:	9811883a 	mov	r8,r19
1000bab0:	d8c12317 	ldw	r3,1164(sp)
1000bab4:	10018226 	beq	r2,zero,1000c0c0 <___vfiprintf_internal_r+0xab8>
1000bab8:	d9012317 	ldw	r4,1164(sp)
1000babc:	18800117 	ldw	r2,4(r3)
1000bac0:	1cc00017 	ldw	r19,0(r3)
1000bac4:	21000204 	addi	r4,r4,8
1000bac8:	d9012315 	stw	r4,1164(sp)
1000bacc:	102b883a 	mov	r21,r2
1000bad0:	10030016 	blt	r2,zero,1000c6d4 <___vfiprintf_internal_r+0x10cc>
1000bad4:	dd811d83 	ldbu	r22,1142(sp)
1000bad8:	8029883a 	mov	r20,r16
1000badc:	00800044 	movi	r2,1
1000bae0:	9d46b03a 	or	r3,r19,r21
1000bae4:	80000216 	blt	r16,zero,1000baf0 <___vfiprintf_internal_r+0x4e8>
1000bae8:	013fdfc4 	movi	r4,-129
1000baec:	9124703a 	and	r18,r18,r4
1000baf0:	1801b41e 	bne	r3,zero,1000c1c4 <___vfiprintf_internal_r+0xbbc>
1000baf4:	80028126 	beq	r16,zero,1000c4fc <___vfiprintf_internal_r+0xef4>
1000baf8:	10803fcc 	andi	r2,r2,255
1000bafc:	00c00044 	movi	r3,1
1000bb00:	10c1d126 	beq	r2,r3,1000c248 <___vfiprintf_internal_r+0xc40>
1000bb04:	00c00084 	movi	r3,2
1000bb08:	10c28626 	beq	r2,r3,1000c524 <___vfiprintf_internal_r+0xf1c>
1000bb0c:	d8c10a04 	addi	r3,sp,1064
1000bb10:	9808d0fa 	srli	r4,r19,3
1000bb14:	a80a977a 	slli	r5,r21,29
1000bb18:	a82ad0fa 	srli	r21,r21,3
1000bb1c:	9cc001cc 	andi	r19,r19,7
1000bb20:	98800c04 	addi	r2,r19,48
1000bb24:	18ffffc4 	addi	r3,r3,-1
1000bb28:	2926b03a 	or	r19,r5,r4
1000bb2c:	18800005 	stb	r2,0(r3)
1000bb30:	9d48b03a 	or	r4,r19,r21
1000bb34:	203ff61e 	bne	r4,zero,1000bb10 <__alt_data_end+0xf800bb10>
1000bb38:	9100004c 	andi	r4,r18,1
1000bb3c:	d8c12215 	stw	r3,1160(sp)
1000bb40:	2002b31e 	bne	r4,zero,1000c610 <___vfiprintf_internal_r+0x1008>
1000bb44:	d9411e17 	ldw	r5,1144(sp)
1000bb48:	28e9c83a 	sub	r20,r5,r3
1000bb4c:	a02b883a 	mov	r21,r20
1000bb50:	a400010e 	bge	r20,r16,1000bb58 <___vfiprintf_internal_r+0x550>
1000bb54:	802b883a 	mov	r21,r16
1000bb58:	b5803fcc 	andi	r22,r22,255
1000bb5c:	b580201c 	xori	r22,r22,128
1000bb60:	b5bfe004 	addi	r22,r22,-128
1000bb64:	b0000126 	beq	r22,zero,1000bb6c <___vfiprintf_internal_r+0x564>
1000bb68:	ad400044 	addi	r21,r21,1
1000bb6c:	9280008c 	andi	r10,r18,2
1000bb70:	50000126 	beq	r10,zero,1000bb78 <___vfiprintf_internal_r+0x570>
1000bb74:	ad400084 	addi	r21,r21,2
1000bb78:	9580210c 	andi	r22,r18,132
1000bb7c:	b001751e 	bne	r22,zero,1000c154 <___vfiprintf_internal_r+0xb4c>
1000bb80:	d9012417 	ldw	r4,1168(sp)
1000bb84:	2567c83a 	sub	r19,r4,r21
1000bb88:	04c1720e 	bge	zero,r19,1000c154 <___vfiprintf_internal_r+0xb4c>
1000bb8c:	01c00404 	movi	r7,16
1000bb90:	d8c11c17 	ldw	r3,1136(sp)
1000bb94:	3cc36b0e 	bge	r7,r19,1000c944 <___vfiprintf_internal_r+0x133c>
1000bb98:	00840074 	movhi	r2,4097
1000bb9c:	10851404 	addi	r2,r2,5200
1000bba0:	dc012915 	stw	r16,1188(sp)
1000bba4:	d9011b17 	ldw	r4,1132(sp)
1000bba8:	9821883a 	mov	r16,r19
1000bbac:	d8812615 	stw	r2,1176(sp)
1000bbb0:	030001c4 	movi	r12,7
1000bbb4:	5027883a 	mov	r19,r10
1000bbb8:	00000506 	br	1000bbd0 <___vfiprintf_internal_r+0x5c8>
1000bbbc:	21400084 	addi	r5,r4,2
1000bbc0:	42000204 	addi	r8,r8,8
1000bbc4:	1009883a 	mov	r4,r2
1000bbc8:	843ffc04 	addi	r16,r16,-16
1000bbcc:	3c000d0e 	bge	r7,r16,1000bc04 <___vfiprintf_internal_r+0x5fc>
1000bbd0:	18c00404 	addi	r3,r3,16
1000bbd4:	20800044 	addi	r2,r4,1
1000bbd8:	47000015 	stw	fp,0(r8)
1000bbdc:	41c00115 	stw	r7,4(r8)
1000bbe0:	d8c11c15 	stw	r3,1136(sp)
1000bbe4:	d8811b15 	stw	r2,1132(sp)
1000bbe8:	60bff40e 	bge	r12,r2,1000bbbc <__alt_data_end+0xf800bbbc>
1000bbec:	18014b1e 	bne	r3,zero,1000c11c <___vfiprintf_internal_r+0xb14>
1000bbf0:	843ffc04 	addi	r16,r16,-16
1000bbf4:	0009883a 	mov	r4,zero
1000bbf8:	01400044 	movi	r5,1
1000bbfc:	d811883a 	mov	r8,sp
1000bc00:	3c3ff316 	blt	r7,r16,1000bbd0 <__alt_data_end+0xf800bbd0>
1000bc04:	9815883a 	mov	r10,r19
1000bc08:	8027883a 	mov	r19,r16
1000bc0c:	dc012917 	ldw	r16,1188(sp)
1000bc10:	d9012617 	ldw	r4,1176(sp)
1000bc14:	98c7883a 	add	r3,r19,r3
1000bc18:	44c00115 	stw	r19,4(r8)
1000bc1c:	41000015 	stw	r4,0(r8)
1000bc20:	d8c11c15 	stw	r3,1136(sp)
1000bc24:	d9411b15 	stw	r5,1132(sp)
1000bc28:	008001c4 	movi	r2,7
1000bc2c:	11425116 	blt	r2,r5,1000c574 <___vfiprintf_internal_r+0xf6c>
1000bc30:	d9011d87 	ldb	r4,1142(sp)
1000bc34:	42000204 	addi	r8,r8,8
1000bc38:	28800044 	addi	r2,r5,1
1000bc3c:	20014a1e 	bne	r4,zero,1000c168 <___vfiprintf_internal_r+0xb60>
1000bc40:	50000c26 	beq	r10,zero,1000bc74 <___vfiprintf_internal_r+0x66c>
1000bc44:	d9011d04 	addi	r4,sp,1140
1000bc48:	18c00084 	addi	r3,r3,2
1000bc4c:	41000015 	stw	r4,0(r8)
1000bc50:	01000084 	movi	r4,2
1000bc54:	41000115 	stw	r4,4(r8)
1000bc58:	d8c11c15 	stw	r3,1136(sp)
1000bc5c:	d8811b15 	stw	r2,1132(sp)
1000bc60:	010001c4 	movi	r4,7
1000bc64:	20822016 	blt	r4,r2,1000c4e8 <___vfiprintf_internal_r+0xee0>
1000bc68:	100b883a 	mov	r5,r2
1000bc6c:	42000204 	addi	r8,r8,8
1000bc70:	10800044 	addi	r2,r2,1
1000bc74:	01002004 	movi	r4,128
1000bc78:	b101de26 	beq	r22,r4,1000c3f4 <___vfiprintf_internal_r+0xdec>
1000bc7c:	8521c83a 	sub	r16,r16,r20
1000bc80:	0400230e 	bge	zero,r16,1000bd10 <___vfiprintf_internal_r+0x708>
1000bc84:	04c00404 	movi	r19,16
1000bc88:	9c030d0e 	bge	r19,r16,1000c8c0 <___vfiprintf_internal_r+0x12b8>
1000bc8c:	00840074 	movhi	r2,4097
1000bc90:	10851004 	addi	r2,r2,5184
1000bc94:	d8812615 	stw	r2,1176(sp)
1000bc98:	058001c4 	movi	r22,7
1000bc9c:	00000506 	br	1000bcb4 <___vfiprintf_internal_r+0x6ac>
1000bca0:	28800084 	addi	r2,r5,2
1000bca4:	42000204 	addi	r8,r8,8
1000bca8:	200b883a 	mov	r5,r4
1000bcac:	843ffc04 	addi	r16,r16,-16
1000bcb0:	9c000d0e 	bge	r19,r16,1000bce8 <___vfiprintf_internal_r+0x6e0>
1000bcb4:	18c00404 	addi	r3,r3,16
1000bcb8:	29000044 	addi	r4,r5,1
1000bcbc:	44400015 	stw	r17,0(r8)
1000bcc0:	44c00115 	stw	r19,4(r8)
1000bcc4:	d8c11c15 	stw	r3,1136(sp)
1000bcc8:	d9011b15 	stw	r4,1132(sp)
1000bccc:	b13ff40e 	bge	r22,r4,1000bca0 <__alt_data_end+0xf800bca0>
1000bcd0:	1801321e 	bne	r3,zero,1000c19c <___vfiprintf_internal_r+0xb94>
1000bcd4:	843ffc04 	addi	r16,r16,-16
1000bcd8:	000b883a 	mov	r5,zero
1000bcdc:	00800044 	movi	r2,1
1000bce0:	d811883a 	mov	r8,sp
1000bce4:	9c3ff316 	blt	r19,r16,1000bcb4 <__alt_data_end+0xf800bcb4>
1000bce8:	d9012617 	ldw	r4,1176(sp)
1000bcec:	1c07883a 	add	r3,r3,r16
1000bcf0:	44000115 	stw	r16,4(r8)
1000bcf4:	41000015 	stw	r4,0(r8)
1000bcf8:	d8c11c15 	stw	r3,1136(sp)
1000bcfc:	d8811b15 	stw	r2,1132(sp)
1000bd00:	010001c4 	movi	r4,7
1000bd04:	20816216 	blt	r4,r2,1000c290 <___vfiprintf_internal_r+0xc88>
1000bd08:	42000204 	addi	r8,r8,8
1000bd0c:	10800044 	addi	r2,r2,1
1000bd10:	d9012217 	ldw	r4,1160(sp)
1000bd14:	1d07883a 	add	r3,r3,r20
1000bd18:	45000115 	stw	r20,4(r8)
1000bd1c:	41000015 	stw	r4,0(r8)
1000bd20:	d8c11c15 	stw	r3,1136(sp)
1000bd24:	d8811b15 	stw	r2,1132(sp)
1000bd28:	010001c4 	movi	r4,7
1000bd2c:	2081610e 	bge	r4,r2,1000c2b4 <___vfiprintf_internal_r+0xcac>
1000bd30:	1802211e 	bne	r3,zero,1000c5b8 <___vfiprintf_internal_r+0xfb0>
1000bd34:	d8011b15 	stw	zero,1132(sp)
1000bd38:	9480010c 	andi	r18,r18,4
1000bd3c:	9002171e 	bne	r18,zero,1000c59c <___vfiprintf_internal_r+0xf94>
1000bd40:	d9412417 	ldw	r5,1168(sp)
1000bd44:	a9433716 	blt	r21,r5,1000ca24 <___vfiprintf_internal_r+0x141c>
1000bd48:	d8812517 	ldw	r2,1172(sp)
1000bd4c:	1545883a 	add	r2,r2,r21
1000bd50:	d8812515 	stw	r2,1172(sp)
1000bd54:	00019a06 	br	1000c3c0 <___vfiprintf_internal_r+0xdb8>
1000bd58:	d8c12317 	ldw	r3,1164(sp)
1000bd5c:	05400044 	movi	r21,1
1000bd60:	9811883a 	mov	r8,r19
1000bd64:	18800017 	ldw	r2,0(r3)
1000bd68:	18c00104 	addi	r3,r3,4
1000bd6c:	d8c12315 	stw	r3,1164(sp)
1000bd70:	d8c10004 	addi	r3,sp,1024
1000bd74:	d8011d85 	stb	zero,1142(sp)
1000bd78:	d8810005 	stb	r2,1024(sp)
1000bd7c:	a829883a 	mov	r20,r21
1000bd80:	d8c12215 	stw	r3,1160(sp)
1000bd84:	0021883a 	mov	r16,zero
1000bd88:	003f7806 	br	1000bb6c <__alt_data_end+0xf800bb6c>
1000bd8c:	94800414 	ori	r18,r18,16
1000bd90:	9080080c 	andi	r2,r18,32
1000bd94:	9811883a 	mov	r8,r19
1000bd98:	10009026 	beq	r2,zero,1000bfdc <___vfiprintf_internal_r+0x9d4>
1000bd9c:	d8812317 	ldw	r2,1164(sp)
1000bda0:	d8c12317 	ldw	r3,1164(sp)
1000bda4:	14c00017 	ldw	r19,0(r2)
1000bda8:	15400117 	ldw	r21,4(r2)
1000bdac:	18c00204 	addi	r3,r3,8
1000bdb0:	d8c12315 	stw	r3,1164(sp)
1000bdb4:	0005883a 	mov	r2,zero
1000bdb8:	9d46b03a 	or	r3,r19,r21
1000bdbc:	d8011d85 	stb	zero,1142(sp)
1000bdc0:	8029883a 	mov	r20,r16
1000bdc4:	002d883a 	mov	r22,zero
1000bdc8:	003f4606 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000bdcc:	94800414 	ori	r18,r18,16
1000bdd0:	9080080c 	andi	r2,r18,32
1000bdd4:	9811883a 	mov	r8,r19
1000bdd8:	10006226 	beq	r2,zero,1000bf64 <___vfiprintf_internal_r+0x95c>
1000bddc:	d9012317 	ldw	r4,1164(sp)
1000bde0:	00800044 	movi	r2,1
1000bde4:	24c00017 	ldw	r19,0(r4)
1000bde8:	25400117 	ldw	r21,4(r4)
1000bdec:	21000204 	addi	r4,r4,8
1000bdf0:	d9012315 	stw	r4,1164(sp)
1000bdf4:	9d46b03a 	or	r3,r19,r21
1000bdf8:	003ff006 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000bdfc:	b9800007 	ldb	r6,0(r23)
1000be00:	00801b04 	movi	r2,108
1000be04:	3082b226 	beq	r6,r2,1000c8d0 <___vfiprintf_internal_r+0x12c8>
1000be08:	94800414 	ori	r18,r18,16
1000be0c:	003e5f06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000be10:	d8c12203 	ldbu	r3,1160(sp)
1000be14:	01040074 	movhi	r4,4097
1000be18:	2104aa04 	addi	r4,r4,4776
1000be1c:	d8c11d85 	stb	r3,1142(sp)
1000be20:	d9012715 	stw	r4,1180(sp)
1000be24:	90c0080c 	andi	r3,r18,32
1000be28:	9811883a 	mov	r8,r19
1000be2c:	d8812317 	ldw	r2,1164(sp)
1000be30:	18005f26 	beq	r3,zero,1000bfb0 <___vfiprintf_internal_r+0x9a8>
1000be34:	d9012317 	ldw	r4,1164(sp)
1000be38:	14c00017 	ldw	r19,0(r2)
1000be3c:	15400117 	ldw	r21,4(r2)
1000be40:	21000204 	addi	r4,r4,8
1000be44:	d9012315 	stw	r4,1164(sp)
1000be48:	9080004c 	andi	r2,r18,1
1000be4c:	1001e226 	beq	r2,zero,1000c5d8 <___vfiprintf_internal_r+0xfd0>
1000be50:	9d46b03a 	or	r3,r19,r21
1000be54:	18024e26 	beq	r3,zero,1000c790 <___vfiprintf_internal_r+0x1188>
1000be58:	00800c04 	movi	r2,48
1000be5c:	d8811d05 	stb	r2,1140(sp)
1000be60:	d9811d45 	stb	r6,1141(sp)
1000be64:	94800094 	ori	r18,r18,2
1000be68:	00800084 	movi	r2,2
1000be6c:	003fd306 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000be70:	d9012317 	ldw	r4,1164(sp)
1000be74:	d9412317 	ldw	r5,1164(sp)
1000be78:	21000017 	ldw	r4,0(r4)
1000be7c:	28800104 	addi	r2,r5,4
1000be80:	d9012415 	stw	r4,1168(sp)
1000be84:	203eeb16 	blt	r4,zero,1000ba34 <__alt_data_end+0xf800ba34>
1000be88:	d8812315 	stw	r2,1164(sp)
1000be8c:	b9800007 	ldb	r6,0(r23)
1000be90:	003e3e06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000be94:	b9800007 	ldb	r6,0(r23)
1000be98:	01000a84 	movi	r4,42
1000be9c:	b8800044 	addi	r2,r23,1
1000bea0:	3102d226 	beq	r6,r4,1000c9ec <___vfiprintf_internal_r+0x13e4>
1000bea4:	35bff404 	addi	r22,r6,-48
1000bea8:	102f883a 	mov	r23,r2
1000beac:	0021883a 	mov	r16,zero
1000beb0:	adbe3736 	bltu	r21,r22,1000b790 <__alt_data_end+0xf800b790>
1000beb4:	0009883a 	mov	r4,zero
1000beb8:	01400284 	movi	r5,10
1000bebc:	0002c180 	call	10002c18 <__mulsi3>
1000bec0:	b9800007 	ldb	r6,0(r23)
1000bec4:	b089883a 	add	r4,r22,r2
1000bec8:	bdc00044 	addi	r23,r23,1
1000becc:	35bff404 	addi	r22,r6,-48
1000bed0:	adbff92e 	bgeu	r21,r22,1000beb8 <__alt_data_end+0xf800beb8>
1000bed4:	2021883a 	mov	r16,r4
1000bed8:	203e2d0e 	bge	r4,zero,1000b790 <__alt_data_end+0xf800b790>
1000bedc:	043fffc4 	movi	r16,-1
1000bee0:	003e2b06 	br	1000b790 <__alt_data_end+0xf800b790>
1000bee4:	94801014 	ori	r18,r18,64
1000bee8:	b9800007 	ldb	r6,0(r23)
1000beec:	003e2706 	br	1000b78c <__alt_data_end+0xf800b78c>
1000bef0:	94800814 	ori	r18,r18,32
1000bef4:	b9800007 	ldb	r6,0(r23)
1000bef8:	003e2406 	br	1000b78c <__alt_data_end+0xf800b78c>
1000befc:	d9412317 	ldw	r5,1164(sp)
1000bf00:	d8812317 	ldw	r2,1164(sp)
1000bf04:	d8011d85 	stb	zero,1142(sp)
1000bf08:	29400017 	ldw	r5,0(r5)
1000bf0c:	9811883a 	mov	r8,r19
1000bf10:	14c00104 	addi	r19,r2,4
1000bf14:	d9412215 	stw	r5,1160(sp)
1000bf18:	28029026 	beq	r5,zero,1000c95c <___vfiprintf_internal_r+0x1354>
1000bf1c:	d9012217 	ldw	r4,1160(sp)
1000bf20:	80027616 	blt	r16,zero,1000c8fc <___vfiprintf_internal_r+0x12f4>
1000bf24:	000b883a 	mov	r5,zero
1000bf28:	800d883a 	mov	r6,r16
1000bf2c:	da012a15 	stw	r8,1192(sp)
1000bf30:	00097c40 	call	100097c4 <memchr>
1000bf34:	da012a17 	ldw	r8,1192(sp)
1000bf38:	1002a026 	beq	r2,zero,1000c9bc <___vfiprintf_internal_r+0x13b4>
1000bf3c:	d8c12217 	ldw	r3,1160(sp)
1000bf40:	10e9c83a 	sub	r20,r2,r3
1000bf44:	85023816 	blt	r16,r20,1000c828 <___vfiprintf_internal_r+0x1220>
1000bf48:	dd811d83 	ldbu	r22,1142(sp)
1000bf4c:	dcc12315 	stw	r19,1164(sp)
1000bf50:	0021883a 	mov	r16,zero
1000bf54:	003efd06 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000bf58:	9080080c 	andi	r2,r18,32
1000bf5c:	9811883a 	mov	r8,r19
1000bf60:	103f9e1e 	bne	r2,zero,1000bddc <__alt_data_end+0xf800bddc>
1000bf64:	9080040c 	andi	r2,r18,16
1000bf68:	10021726 	beq	r2,zero,1000c7c8 <___vfiprintf_internal_r+0x11c0>
1000bf6c:	d9412317 	ldw	r5,1164(sp)
1000bf70:	002b883a 	mov	r21,zero
1000bf74:	00800044 	movi	r2,1
1000bf78:	2cc00017 	ldw	r19,0(r5)
1000bf7c:	29400104 	addi	r5,r5,4
1000bf80:	d9412315 	stw	r5,1164(sp)
1000bf84:	9807883a 	mov	r3,r19
1000bf88:	003f8c06 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000bf8c:	d8c12203 	ldbu	r3,1160(sp)
1000bf90:	01040074 	movhi	r4,4097
1000bf94:	2104af04 	addi	r4,r4,4796
1000bf98:	d8c11d85 	stb	r3,1142(sp)
1000bf9c:	d9012715 	stw	r4,1180(sp)
1000bfa0:	90c0080c 	andi	r3,r18,32
1000bfa4:	9811883a 	mov	r8,r19
1000bfa8:	d8812317 	ldw	r2,1164(sp)
1000bfac:	183fa11e 	bne	r3,zero,1000be34 <__alt_data_end+0xf800be34>
1000bfb0:	90c0040c 	andi	r3,r18,16
1000bfb4:	1801e526 	beq	r3,zero,1000c74c <___vfiprintf_internal_r+0x1144>
1000bfb8:	d9412317 	ldw	r5,1164(sp)
1000bfbc:	14c00017 	ldw	r19,0(r2)
1000bfc0:	002b883a 	mov	r21,zero
1000bfc4:	29400104 	addi	r5,r5,4
1000bfc8:	d9412315 	stw	r5,1164(sp)
1000bfcc:	003f9e06 	br	1000be48 <__alt_data_end+0xf800be48>
1000bfd0:	9080080c 	andi	r2,r18,32
1000bfd4:	9811883a 	mov	r8,r19
1000bfd8:	103f701e 	bne	r2,zero,1000bd9c <__alt_data_end+0xf800bd9c>
1000bfdc:	9080040c 	andi	r2,r18,16
1000bfe0:	1001ef26 	beq	r2,zero,1000c7a0 <___vfiprintf_internal_r+0x1198>
1000bfe4:	d9012317 	ldw	r4,1164(sp)
1000bfe8:	002b883a 	mov	r21,zero
1000bfec:	0005883a 	mov	r2,zero
1000bff0:	24c00017 	ldw	r19,0(r4)
1000bff4:	21000104 	addi	r4,r4,4
1000bff8:	d9012315 	stw	r4,1164(sp)
1000bffc:	9807883a 	mov	r3,r19
1000c000:	003f6e06 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c004:	d8c12317 	ldw	r3,1164(sp)
1000c008:	9811883a 	mov	r8,r19
1000c00c:	00800c04 	movi	r2,48
1000c010:	1cc00017 	ldw	r19,0(r3)
1000c014:	01040074 	movhi	r4,4097
1000c018:	18c00104 	addi	r3,r3,4
1000c01c:	d8811d05 	stb	r2,1140(sp)
1000c020:	2104af04 	addi	r4,r4,4796
1000c024:	00801e04 	movi	r2,120
1000c028:	d8811d45 	stb	r2,1141(sp)
1000c02c:	d8c12315 	stw	r3,1164(sp)
1000c030:	002b883a 	mov	r21,zero
1000c034:	94800094 	ori	r18,r18,2
1000c038:	d9012715 	stw	r4,1180(sp)
1000c03c:	00800084 	movi	r2,2
1000c040:	9807883a 	mov	r3,r19
1000c044:	003f5d06 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c048:	d8c12203 	ldbu	r3,1160(sp)
1000c04c:	9080080c 	andi	r2,r18,32
1000c050:	9811883a 	mov	r8,r19
1000c054:	d8c11d85 	stb	r3,1142(sp)
1000c058:	1001b126 	beq	r2,zero,1000c720 <___vfiprintf_internal_r+0x1118>
1000c05c:	d9012317 	ldw	r4,1164(sp)
1000c060:	d9412517 	ldw	r5,1172(sp)
1000c064:	20800017 	ldw	r2,0(r4)
1000c068:	2807d7fa 	srai	r3,r5,31
1000c06c:	21000104 	addi	r4,r4,4
1000c070:	d9012315 	stw	r4,1164(sp)
1000c074:	11400015 	stw	r5,0(r2)
1000c078:	10c00115 	stw	r3,4(r2)
1000c07c:	003d9a06 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000c080:	d8812207 	ldb	r2,1160(sp)
1000c084:	1001c41e 	bne	r2,zero,1000c798 <___vfiprintf_internal_r+0x1190>
1000c088:	00c00804 	movi	r3,32
1000c08c:	d8c12205 	stb	r3,1160(sp)
1000c090:	b9800007 	ldb	r6,0(r23)
1000c094:	003dbd06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000c098:	00c00ac4 	movi	r3,43
1000c09c:	d8c12205 	stb	r3,1160(sp)
1000c0a0:	b9800007 	ldb	r6,0(r23)
1000c0a4:	003db906 	br	1000b78c <__alt_data_end+0xf800b78c>
1000c0a8:	d8c12203 	ldbu	r3,1160(sp)
1000c0ac:	9080080c 	andi	r2,r18,32
1000c0b0:	9811883a 	mov	r8,r19
1000c0b4:	d8c11d85 	stb	r3,1142(sp)
1000c0b8:	d8c12317 	ldw	r3,1164(sp)
1000c0bc:	103e7e1e 	bne	r2,zero,1000bab8 <__alt_data_end+0xf800bab8>
1000c0c0:	9080040c 	andi	r2,r18,16
1000c0c4:	1001a926 	beq	r2,zero,1000c76c <___vfiprintf_internal_r+0x1164>
1000c0c8:	1cc00017 	ldw	r19,0(r3)
1000c0cc:	d9412317 	ldw	r5,1164(sp)
1000c0d0:	982bd7fa 	srai	r21,r19,31
1000c0d4:	29400104 	addi	r5,r5,4
1000c0d8:	d9412315 	stw	r5,1164(sp)
1000c0dc:	a805883a 	mov	r2,r21
1000c0e0:	003e7b06 	br	1000bad0 <__alt_data_end+0xf800bad0>
1000c0e4:	94800054 	ori	r18,r18,1
1000c0e8:	b9800007 	ldb	r6,0(r23)
1000c0ec:	003da706 	br	1000b78c <__alt_data_end+0xf800b78c>
1000c0f0:	d8c12203 	ldbu	r3,1160(sp)
1000c0f4:	9811883a 	mov	r8,r19
1000c0f8:	d8c11d85 	stb	r3,1142(sp)
1000c0fc:	30005826 	beq	r6,zero,1000c260 <___vfiprintf_internal_r+0xc58>
1000c100:	05400044 	movi	r21,1
1000c104:	d8c10004 	addi	r3,sp,1024
1000c108:	d9810005 	stb	r6,1024(sp)
1000c10c:	d8011d85 	stb	zero,1142(sp)
1000c110:	a829883a 	mov	r20,r21
1000c114:	d8c12215 	stw	r3,1160(sp)
1000c118:	003f1a06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c11c:	d9012117 	ldw	r4,1156(sp)
1000c120:	d9412017 	ldw	r5,1152(sp)
1000c124:	d9811a04 	addi	r6,sp,1128
1000c128:	d9c12a15 	stw	r7,1192(sp)
1000c12c:	db012b15 	stw	r12,1196(sp)
1000c130:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c134:	d9c12a17 	ldw	r7,1192(sp)
1000c138:	db012b17 	ldw	r12,1196(sp)
1000c13c:	10004e1e 	bne	r2,zero,1000c278 <___vfiprintf_internal_r+0xc70>
1000c140:	d9011b17 	ldw	r4,1132(sp)
1000c144:	d8c11c17 	ldw	r3,1136(sp)
1000c148:	d811883a 	mov	r8,sp
1000c14c:	21400044 	addi	r5,r4,1
1000c150:	003e9d06 	br	1000bbc8 <__alt_data_end+0xf800bbc8>
1000c154:	d9411b17 	ldw	r5,1132(sp)
1000c158:	d8c11c17 	ldw	r3,1136(sp)
1000c15c:	28800044 	addi	r2,r5,1
1000c160:	d9011d87 	ldb	r4,1142(sp)
1000c164:	203eb626 	beq	r4,zero,1000bc40 <__alt_data_end+0xf800bc40>
1000c168:	01000044 	movi	r4,1
1000c16c:	d9411d84 	addi	r5,sp,1142
1000c170:	1907883a 	add	r3,r3,r4
1000c174:	41400015 	stw	r5,0(r8)
1000c178:	41000115 	stw	r4,4(r8)
1000c17c:	d8c11c15 	stw	r3,1136(sp)
1000c180:	d8811b15 	stw	r2,1132(sp)
1000c184:	014001c4 	movi	r5,7
1000c188:	2880ce16 	blt	r5,r2,1000c4c4 <___vfiprintf_internal_r+0xebc>
1000c18c:	100b883a 	mov	r5,r2
1000c190:	42000204 	addi	r8,r8,8
1000c194:	10800044 	addi	r2,r2,1
1000c198:	003ea906 	br	1000bc40 <__alt_data_end+0xf800bc40>
1000c19c:	d9012117 	ldw	r4,1156(sp)
1000c1a0:	d9412017 	ldw	r5,1152(sp)
1000c1a4:	d9811a04 	addi	r6,sp,1128
1000c1a8:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c1ac:	1000321e 	bne	r2,zero,1000c278 <___vfiprintf_internal_r+0xc70>
1000c1b0:	d9411b17 	ldw	r5,1132(sp)
1000c1b4:	d8c11c17 	ldw	r3,1136(sp)
1000c1b8:	d811883a 	mov	r8,sp
1000c1bc:	28800044 	addi	r2,r5,1
1000c1c0:	003eba06 	br	1000bcac <__alt_data_end+0xf800bcac>
1000c1c4:	10803fcc 	andi	r2,r2,255
1000c1c8:	00c00044 	movi	r3,1
1000c1cc:	10fe4d1e 	bne	r2,r3,1000bb04 <__alt_data_end+0xf800bb04>
1000c1d0:	a800021e 	bne	r21,zero,1000c1dc <___vfiprintf_internal_r+0xbd4>
1000c1d4:	00800244 	movi	r2,9
1000c1d8:	14c01b2e 	bgeu	r2,r19,1000c248 <___vfiprintf_internal_r+0xc40>
1000c1dc:	dc012215 	stw	r16,1160(sp)
1000c1e0:	dd010a04 	addi	r20,sp,1064
1000c1e4:	a821883a 	mov	r16,r21
1000c1e8:	402b883a 	mov	r21,r8
1000c1ec:	9809883a 	mov	r4,r19
1000c1f0:	800b883a 	mov	r5,r16
1000c1f4:	01800284 	movi	r6,10
1000c1f8:	000f883a 	mov	r7,zero
1000c1fc:	00024d00 	call	100024d0 <__umoddi3>
1000c200:	10800c04 	addi	r2,r2,48
1000c204:	a53fffc4 	addi	r20,r20,-1
1000c208:	9809883a 	mov	r4,r19
1000c20c:	800b883a 	mov	r5,r16
1000c210:	01800284 	movi	r6,10
1000c214:	000f883a 	mov	r7,zero
1000c218:	a0800005 	stb	r2,0(r20)
1000c21c:	0001e900 	call	10001e90 <__udivdi3>
1000c220:	1027883a 	mov	r19,r2
1000c224:	10c4b03a 	or	r2,r2,r3
1000c228:	1821883a 	mov	r16,r3
1000c22c:	103fef1e 	bne	r2,zero,1000c1ec <__alt_data_end+0xf800c1ec>
1000c230:	d9011e17 	ldw	r4,1144(sp)
1000c234:	dc012217 	ldw	r16,1160(sp)
1000c238:	a811883a 	mov	r8,r21
1000c23c:	dd012215 	stw	r20,1160(sp)
1000c240:	2529c83a 	sub	r20,r4,r20
1000c244:	003e4106 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c248:	9cc00c04 	addi	r19,r19,48
1000c24c:	d8c109c4 	addi	r3,sp,1063
1000c250:	dcc109c5 	stb	r19,1063(sp)
1000c254:	dd012817 	ldw	r20,1184(sp)
1000c258:	d8c12215 	stw	r3,1160(sp)
1000c25c:	003e3b06 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c260:	d8811c17 	ldw	r2,1136(sp)
1000c264:	10000426 	beq	r2,zero,1000c278 <___vfiprintf_internal_r+0xc70>
1000c268:	d9012117 	ldw	r4,1156(sp)
1000c26c:	d9412017 	ldw	r5,1152(sp)
1000c270:	d9811a04 	addi	r6,sp,1128
1000c274:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c278:	d9412017 	ldw	r5,1152(sp)
1000c27c:	2880030b 	ldhu	r2,12(r5)
1000c280:	1080100c 	andi	r2,r2,64
1000c284:	103ddc1e 	bne	r2,zero,1000b9f8 <__alt_data_end+0xf800b9f8>
1000c288:	d8812517 	ldw	r2,1172(sp)
1000c28c:	003ddb06 	br	1000b9fc <__alt_data_end+0xf800b9fc>
1000c290:	1801061e 	bne	r3,zero,1000c6ac <___vfiprintf_internal_r+0x10a4>
1000c294:	d8c12217 	ldw	r3,1160(sp)
1000c298:	00800044 	movi	r2,1
1000c29c:	dd000115 	stw	r20,4(sp)
1000c2a0:	d8c00015 	stw	r3,0(sp)
1000c2a4:	dd011c15 	stw	r20,1136(sp)
1000c2a8:	d8811b15 	stw	r2,1132(sp)
1000c2ac:	a007883a 	mov	r3,r20
1000c2b0:	d811883a 	mov	r8,sp
1000c2b4:	42000204 	addi	r8,r8,8
1000c2b8:	9480010c 	andi	r18,r18,4
1000c2bc:	90003426 	beq	r18,zero,1000c390 <___vfiprintf_internal_r+0xd88>
1000c2c0:	d9412417 	ldw	r5,1168(sp)
1000c2c4:	2d65c83a 	sub	r18,r5,r21
1000c2c8:	0480310e 	bge	zero,r18,1000c390 <___vfiprintf_internal_r+0xd88>
1000c2cc:	04000404 	movi	r16,16
1000c2d0:	8481ad0e 	bge	r16,r18,1000c988 <___vfiprintf_internal_r+0x1380>
1000c2d4:	01440074 	movhi	r5,4097
1000c2d8:	29451404 	addi	r5,r5,5200
1000c2dc:	d9011b17 	ldw	r4,1132(sp)
1000c2e0:	d9412615 	stw	r5,1176(sp)
1000c2e4:	04c001c4 	movi	r19,7
1000c2e8:	dd012117 	ldw	r20,1156(sp)
1000c2ec:	dd812017 	ldw	r22,1152(sp)
1000c2f0:	00000506 	br	1000c308 <___vfiprintf_internal_r+0xd00>
1000c2f4:	21400084 	addi	r5,r4,2
1000c2f8:	42000204 	addi	r8,r8,8
1000c2fc:	1009883a 	mov	r4,r2
1000c300:	94bffc04 	addi	r18,r18,-16
1000c304:	84800d0e 	bge	r16,r18,1000c33c <___vfiprintf_internal_r+0xd34>
1000c308:	18c00404 	addi	r3,r3,16
1000c30c:	20800044 	addi	r2,r4,1
1000c310:	47000015 	stw	fp,0(r8)
1000c314:	44000115 	stw	r16,4(r8)
1000c318:	d8c11c15 	stw	r3,1136(sp)
1000c31c:	d8811b15 	stw	r2,1132(sp)
1000c320:	98bff40e 	bge	r19,r2,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c324:	1800291e 	bne	r3,zero,1000c3cc <___vfiprintf_internal_r+0xdc4>
1000c328:	94bffc04 	addi	r18,r18,-16
1000c32c:	0009883a 	mov	r4,zero
1000c330:	01400044 	movi	r5,1
1000c334:	d811883a 	mov	r8,sp
1000c338:	84bff316 	blt	r16,r18,1000c308 <__alt_data_end+0xf800c308>
1000c33c:	d8812617 	ldw	r2,1176(sp)
1000c340:	1c87883a 	add	r3,r3,r18
1000c344:	44800115 	stw	r18,4(r8)
1000c348:	40800015 	stw	r2,0(r8)
1000c34c:	d8c11c15 	stw	r3,1136(sp)
1000c350:	d9411b15 	stw	r5,1132(sp)
1000c354:	008001c4 	movi	r2,7
1000c358:	11400d0e 	bge	r2,r5,1000c390 <___vfiprintf_internal_r+0xd88>
1000c35c:	1800061e 	bne	r3,zero,1000c378 <___vfiprintf_internal_r+0xd70>
1000c360:	d8c12417 	ldw	r3,1168(sp)
1000c364:	a8c12e16 	blt	r21,r3,1000c820 <___vfiprintf_internal_r+0x1218>
1000c368:	d9012517 	ldw	r4,1172(sp)
1000c36c:	2549883a 	add	r4,r4,r21
1000c370:	d9012515 	stw	r4,1172(sp)
1000c374:	00001206 	br	1000c3c0 <___vfiprintf_internal_r+0xdb8>
1000c378:	d9012117 	ldw	r4,1156(sp)
1000c37c:	d9412017 	ldw	r5,1152(sp)
1000c380:	d9811a04 	addi	r6,sp,1128
1000c384:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c388:	103fbb1e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c38c:	d8c11c17 	ldw	r3,1136(sp)
1000c390:	d8812417 	ldw	r2,1168(sp)
1000c394:	a880010e 	bge	r21,r2,1000c39c <___vfiprintf_internal_r+0xd94>
1000c398:	102b883a 	mov	r21,r2
1000c39c:	d9012517 	ldw	r4,1172(sp)
1000c3a0:	2549883a 	add	r4,r4,r21
1000c3a4:	d9012515 	stw	r4,1172(sp)
1000c3a8:	18000526 	beq	r3,zero,1000c3c0 <___vfiprintf_internal_r+0xdb8>
1000c3ac:	d9012117 	ldw	r4,1156(sp)
1000c3b0:	d9412017 	ldw	r5,1152(sp)
1000c3b4:	d9811a04 	addi	r6,sp,1128
1000c3b8:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c3bc:	103fae1e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c3c0:	d8011b15 	stw	zero,1132(sp)
1000c3c4:	d811883a 	mov	r8,sp
1000c3c8:	003cc706 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000c3cc:	a009883a 	mov	r4,r20
1000c3d0:	b00b883a 	mov	r5,r22
1000c3d4:	d9811a04 	addi	r6,sp,1128
1000c3d8:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c3dc:	103fa61e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c3e0:	d9011b17 	ldw	r4,1132(sp)
1000c3e4:	d8c11c17 	ldw	r3,1136(sp)
1000c3e8:	d811883a 	mov	r8,sp
1000c3ec:	21400044 	addi	r5,r4,1
1000c3f0:	003fc306 	br	1000c300 <__alt_data_end+0xf800c300>
1000c3f4:	d9012417 	ldw	r4,1168(sp)
1000c3f8:	256dc83a 	sub	r22,r4,r21
1000c3fc:	05be1f0e 	bge	zero,r22,1000bc7c <__alt_data_end+0xf800bc7c>
1000c400:	04c00404 	movi	r19,16
1000c404:	9d81720e 	bge	r19,r22,1000c9d0 <___vfiprintf_internal_r+0x13c8>
1000c408:	00840074 	movhi	r2,4097
1000c40c:	10851004 	addi	r2,r2,5184
1000c410:	d8812615 	stw	r2,1176(sp)
1000c414:	028001c4 	movi	r10,7
1000c418:	00000506 	br	1000c430 <___vfiprintf_internal_r+0xe28>
1000c41c:	29000084 	addi	r4,r5,2
1000c420:	42000204 	addi	r8,r8,8
1000c424:	100b883a 	mov	r5,r2
1000c428:	b5bffc04 	addi	r22,r22,-16
1000c42c:	9d800d0e 	bge	r19,r22,1000c464 <___vfiprintf_internal_r+0xe5c>
1000c430:	18c00404 	addi	r3,r3,16
1000c434:	28800044 	addi	r2,r5,1
1000c438:	44400015 	stw	r17,0(r8)
1000c43c:	44c00115 	stw	r19,4(r8)
1000c440:	d8c11c15 	stw	r3,1136(sp)
1000c444:	d8811b15 	stw	r2,1132(sp)
1000c448:	50bff40e 	bge	r10,r2,1000c41c <__alt_data_end+0xf800c41c>
1000c44c:	1800111e 	bne	r3,zero,1000c494 <___vfiprintf_internal_r+0xe8c>
1000c450:	b5bffc04 	addi	r22,r22,-16
1000c454:	000b883a 	mov	r5,zero
1000c458:	01000044 	movi	r4,1
1000c45c:	d811883a 	mov	r8,sp
1000c460:	9dbff316 	blt	r19,r22,1000c430 <__alt_data_end+0xf800c430>
1000c464:	d9412617 	ldw	r5,1176(sp)
1000c468:	1d87883a 	add	r3,r3,r22
1000c46c:	45800115 	stw	r22,4(r8)
1000c470:	41400015 	stw	r5,0(r8)
1000c474:	d8c11c15 	stw	r3,1136(sp)
1000c478:	d9011b15 	stw	r4,1132(sp)
1000c47c:	008001c4 	movi	r2,7
1000c480:	11008516 	blt	r2,r4,1000c698 <___vfiprintf_internal_r+0x1090>
1000c484:	42000204 	addi	r8,r8,8
1000c488:	20800044 	addi	r2,r4,1
1000c48c:	200b883a 	mov	r5,r4
1000c490:	003dfa06 	br	1000bc7c <__alt_data_end+0xf800bc7c>
1000c494:	d9012117 	ldw	r4,1156(sp)
1000c498:	d9412017 	ldw	r5,1152(sp)
1000c49c:	d9811a04 	addi	r6,sp,1128
1000c4a0:	da812a15 	stw	r10,1192(sp)
1000c4a4:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c4a8:	da812a17 	ldw	r10,1192(sp)
1000c4ac:	103f721e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c4b0:	d9411b17 	ldw	r5,1132(sp)
1000c4b4:	d8c11c17 	ldw	r3,1136(sp)
1000c4b8:	d811883a 	mov	r8,sp
1000c4bc:	29000044 	addi	r4,r5,1
1000c4c0:	003fd906 	br	1000c428 <__alt_data_end+0xf800c428>
1000c4c4:	1800681e 	bne	r3,zero,1000c668 <___vfiprintf_internal_r+0x1060>
1000c4c8:	50004d26 	beq	r10,zero,1000c600 <___vfiprintf_internal_r+0xff8>
1000c4cc:	d8811d04 	addi	r2,sp,1140
1000c4d0:	00c00084 	movi	r3,2
1000c4d4:	d8800015 	stw	r2,0(sp)
1000c4d8:	d8c00115 	stw	r3,4(sp)
1000c4dc:	2005883a 	mov	r2,r4
1000c4e0:	d811883a 	mov	r8,sp
1000c4e4:	003de006 	br	1000bc68 <__alt_data_end+0xf800bc68>
1000c4e8:	1800551e 	bne	r3,zero,1000c640 <___vfiprintf_internal_r+0x1038>
1000c4ec:	000b883a 	mov	r5,zero
1000c4f0:	00800044 	movi	r2,1
1000c4f4:	d811883a 	mov	r8,sp
1000c4f8:	003dde06 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000c4fc:	10803fcc 	andi	r2,r2,255
1000c500:	1000191e 	bne	r2,zero,1000c568 <___vfiprintf_internal_r+0xf60>
1000c504:	9080004c 	andi	r2,r18,1
1000c508:	10001726 	beq	r2,zero,1000c568 <___vfiprintf_internal_r+0xf60>
1000c50c:	00800c04 	movi	r2,48
1000c510:	d8c109c4 	addi	r3,sp,1063
1000c514:	d88109c5 	stb	r2,1063(sp)
1000c518:	dd012817 	ldw	r20,1184(sp)
1000c51c:	d8c12215 	stw	r3,1160(sp)
1000c520:	003d8a06 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c524:	d9012717 	ldw	r4,1180(sp)
1000c528:	dd010a04 	addi	r20,sp,1064
1000c52c:	988003cc 	andi	r2,r19,15
1000c530:	a806973a 	slli	r3,r21,28
1000c534:	2085883a 	add	r2,r4,r2
1000c538:	9826d13a 	srli	r19,r19,4
1000c53c:	10800003 	ldbu	r2,0(r2)
1000c540:	a82ad13a 	srli	r21,r21,4
1000c544:	a53fffc4 	addi	r20,r20,-1
1000c548:	1ce6b03a 	or	r19,r3,r19
1000c54c:	a0800005 	stb	r2,0(r20)
1000c550:	9d44b03a 	or	r2,r19,r21
1000c554:	103ff51e 	bne	r2,zero,1000c52c <__alt_data_end+0xf800c52c>
1000c558:	d9411e17 	ldw	r5,1144(sp)
1000c55c:	dd012215 	stw	r20,1160(sp)
1000c560:	2d29c83a 	sub	r20,r5,r20
1000c564:	003d7906 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c568:	d8c10a04 	addi	r3,sp,1064
1000c56c:	d8c12215 	stw	r3,1160(sp)
1000c570:	003d7606 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c574:	18009e1e 	bne	r3,zero,1000c7f0 <___vfiprintf_internal_r+0x11e8>
1000c578:	d8811d87 	ldb	r2,1142(sp)
1000c57c:	10005f26 	beq	r2,zero,1000c6fc <___vfiprintf_internal_r+0x10f4>
1000c580:	00c00044 	movi	r3,1
1000c584:	d9011d84 	addi	r4,sp,1142
1000c588:	1805883a 	mov	r2,r3
1000c58c:	d9000015 	stw	r4,0(sp)
1000c590:	d8c00115 	stw	r3,4(sp)
1000c594:	d811883a 	mov	r8,sp
1000c598:	003efc06 	br	1000c18c <__alt_data_end+0xf800c18c>
1000c59c:	d9412417 	ldw	r5,1168(sp)
1000c5a0:	d811883a 	mov	r8,sp
1000c5a4:	2d65c83a 	sub	r18,r5,r21
1000c5a8:	04bf4816 	blt	zero,r18,1000c2cc <__alt_data_end+0xf800c2cc>
1000c5ac:	003f6c06 	br	1000c360 <__alt_data_end+0xf800c360>
1000c5b0:	b829883a 	mov	r20,r23
1000c5b4:	003c6906 	br	1000b75c <__alt_data_end+0xf800b75c>
1000c5b8:	d9012117 	ldw	r4,1156(sp)
1000c5bc:	d9412017 	ldw	r5,1152(sp)
1000c5c0:	d9811a04 	addi	r6,sp,1128
1000c5c4:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c5c8:	103f2b1e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c5cc:	d8c11c17 	ldw	r3,1136(sp)
1000c5d0:	d811883a 	mov	r8,sp
1000c5d4:	003f3806 	br	1000c2b8 <__alt_data_end+0xf800c2b8>
1000c5d8:	00800084 	movi	r2,2
1000c5dc:	9d46b03a 	or	r3,r19,r21
1000c5e0:	003df606 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c5e4:	d9012117 	ldw	r4,1156(sp)
1000c5e8:	d9412017 	ldw	r5,1152(sp)
1000c5ec:	d9811a04 	addi	r6,sp,1128
1000c5f0:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c5f4:	103f201e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c5f8:	d811883a 	mov	r8,sp
1000c5fc:	003cc606 	br	1000b918 <__alt_data_end+0xf800b918>
1000c600:	000b883a 	mov	r5,zero
1000c604:	2005883a 	mov	r2,r4
1000c608:	d811883a 	mov	r8,sp
1000c60c:	003d9906 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000c610:	10803fcc 	andi	r2,r2,255
1000c614:	1080201c 	xori	r2,r2,128
1000c618:	10bfe004 	addi	r2,r2,-128
1000c61c:	01000c04 	movi	r4,48
1000c620:	1100b226 	beq	r2,r4,1000c8ec <___vfiprintf_internal_r+0x12e4>
1000c624:	d9412217 	ldw	r5,1160(sp)
1000c628:	d8811e17 	ldw	r2,1144(sp)
1000c62c:	193fffc5 	stb	r4,-1(r3)
1000c630:	297fffc4 	addi	r5,r5,-1
1000c634:	d9412215 	stw	r5,1160(sp)
1000c638:	1169c83a 	sub	r20,r2,r5
1000c63c:	003d4306 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c640:	d9012117 	ldw	r4,1156(sp)
1000c644:	d9412017 	ldw	r5,1152(sp)
1000c648:	d9811a04 	addi	r6,sp,1128
1000c64c:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c650:	103f091e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c654:	d9411b17 	ldw	r5,1132(sp)
1000c658:	d8c11c17 	ldw	r3,1136(sp)
1000c65c:	d811883a 	mov	r8,sp
1000c660:	28800044 	addi	r2,r5,1
1000c664:	003d8306 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000c668:	d9012117 	ldw	r4,1156(sp)
1000c66c:	d9412017 	ldw	r5,1152(sp)
1000c670:	d9811a04 	addi	r6,sp,1128
1000c674:	da812a15 	stw	r10,1192(sp)
1000c678:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c67c:	da812a17 	ldw	r10,1192(sp)
1000c680:	103efd1e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c684:	d9411b17 	ldw	r5,1132(sp)
1000c688:	d8c11c17 	ldw	r3,1136(sp)
1000c68c:	d811883a 	mov	r8,sp
1000c690:	28800044 	addi	r2,r5,1
1000c694:	003d6a06 	br	1000bc40 <__alt_data_end+0xf800bc40>
1000c698:	1800a01e 	bne	r3,zero,1000c91c <___vfiprintf_internal_r+0x1314>
1000c69c:	000b883a 	mov	r5,zero
1000c6a0:	00800044 	movi	r2,1
1000c6a4:	d811883a 	mov	r8,sp
1000c6a8:	003d7406 	br	1000bc7c <__alt_data_end+0xf800bc7c>
1000c6ac:	d9012117 	ldw	r4,1156(sp)
1000c6b0:	d9412017 	ldw	r5,1152(sp)
1000c6b4:	d9811a04 	addi	r6,sp,1128
1000c6b8:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c6bc:	103eee1e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c6c0:	d8811b17 	ldw	r2,1132(sp)
1000c6c4:	d8c11c17 	ldw	r3,1136(sp)
1000c6c8:	d811883a 	mov	r8,sp
1000c6cc:	10800044 	addi	r2,r2,1
1000c6d0:	003d8f06 	br	1000bd10 <__alt_data_end+0xf800bd10>
1000c6d4:	04e7c83a 	sub	r19,zero,r19
1000c6d8:	9804c03a 	cmpne	r2,r19,zero
1000c6dc:	056bc83a 	sub	r21,zero,r21
1000c6e0:	a8abc83a 	sub	r21,r21,r2
1000c6e4:	05800b44 	movi	r22,45
1000c6e8:	dd811d85 	stb	r22,1142(sp)
1000c6ec:	8029883a 	mov	r20,r16
1000c6f0:	00800044 	movi	r2,1
1000c6f4:	9d46b03a 	or	r3,r19,r21
1000c6f8:	003cfa06 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000c6fc:	000b883a 	mov	r5,zero
1000c700:	00800044 	movi	r2,1
1000c704:	d811883a 	mov	r8,sp
1000c708:	503d5a26 	beq	r10,zero,1000bc74 <__alt_data_end+0xf800bc74>
1000c70c:	00c00084 	movi	r3,2
1000c710:	d9011d04 	addi	r4,sp,1140
1000c714:	d9000015 	stw	r4,0(sp)
1000c718:	d8c00115 	stw	r3,4(sp)
1000c71c:	003d5206 	br	1000bc68 <__alt_data_end+0xf800bc68>
1000c720:	9080040c 	andi	r2,r18,16
1000c724:	1000421e 	bne	r2,zero,1000c830 <___vfiprintf_internal_r+0x1228>
1000c728:	9480100c 	andi	r18,r18,64
1000c72c:	90009c26 	beq	r18,zero,1000c9a0 <___vfiprintf_internal_r+0x1398>
1000c730:	d9412317 	ldw	r5,1164(sp)
1000c734:	d8c12517 	ldw	r3,1172(sp)
1000c738:	28800017 	ldw	r2,0(r5)
1000c73c:	29400104 	addi	r5,r5,4
1000c740:	d9412315 	stw	r5,1164(sp)
1000c744:	10c0000d 	sth	r3,0(r2)
1000c748:	003be706 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000c74c:	90c0100c 	andi	r3,r18,64
1000c750:	18003e26 	beq	r3,zero,1000c84c <___vfiprintf_internal_r+0x1244>
1000c754:	d8c12317 	ldw	r3,1164(sp)
1000c758:	14c0000b 	ldhu	r19,0(r2)
1000c75c:	002b883a 	mov	r21,zero
1000c760:	18c00104 	addi	r3,r3,4
1000c764:	d8c12315 	stw	r3,1164(sp)
1000c768:	003db706 	br	1000be48 <__alt_data_end+0xf800be48>
1000c76c:	9080100c 	andi	r2,r18,64
1000c770:	10004c26 	beq	r2,zero,1000c8a4 <___vfiprintf_internal_r+0x129c>
1000c774:	1cc0000f 	ldh	r19,0(r3)
1000c778:	d8812317 	ldw	r2,1164(sp)
1000c77c:	982bd7fa 	srai	r21,r19,31
1000c780:	10800104 	addi	r2,r2,4
1000c784:	d8812315 	stw	r2,1164(sp)
1000c788:	a805883a 	mov	r2,r21
1000c78c:	003cd006 	br	1000bad0 <__alt_data_end+0xf800bad0>
1000c790:	00800084 	movi	r2,2
1000c794:	003d8906 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c798:	b9800007 	ldb	r6,0(r23)
1000c79c:	003bfb06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000c7a0:	9080100c 	andi	r2,r18,64
1000c7a4:	10003726 	beq	r2,zero,1000c884 <___vfiprintf_internal_r+0x127c>
1000c7a8:	d9412317 	ldw	r5,1164(sp)
1000c7ac:	002b883a 	mov	r21,zero
1000c7b0:	0005883a 	mov	r2,zero
1000c7b4:	2cc0000b 	ldhu	r19,0(r5)
1000c7b8:	29400104 	addi	r5,r5,4
1000c7bc:	d9412315 	stw	r5,1164(sp)
1000c7c0:	9807883a 	mov	r3,r19
1000c7c4:	003d7d06 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c7c8:	9080100c 	andi	r2,r18,64
1000c7cc:	10002526 	beq	r2,zero,1000c864 <___vfiprintf_internal_r+0x125c>
1000c7d0:	d8812317 	ldw	r2,1164(sp)
1000c7d4:	002b883a 	mov	r21,zero
1000c7d8:	14c0000b 	ldhu	r19,0(r2)
1000c7dc:	10800104 	addi	r2,r2,4
1000c7e0:	d8812315 	stw	r2,1164(sp)
1000c7e4:	9807883a 	mov	r3,r19
1000c7e8:	00800044 	movi	r2,1
1000c7ec:	003d7306 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c7f0:	d9012117 	ldw	r4,1156(sp)
1000c7f4:	d9412017 	ldw	r5,1152(sp)
1000c7f8:	d9811a04 	addi	r6,sp,1128
1000c7fc:	da812a15 	stw	r10,1192(sp)
1000c800:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c804:	da812a17 	ldw	r10,1192(sp)
1000c808:	103e9b1e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c80c:	d9411b17 	ldw	r5,1132(sp)
1000c810:	d8c11c17 	ldw	r3,1136(sp)
1000c814:	d811883a 	mov	r8,sp
1000c818:	28800044 	addi	r2,r5,1
1000c81c:	003e5006 	br	1000c160 <__alt_data_end+0xf800c160>
1000c820:	182b883a 	mov	r21,r3
1000c824:	003ed006 	br	1000c368 <__alt_data_end+0xf800c368>
1000c828:	8029883a 	mov	r20,r16
1000c82c:	003dc606 	br	1000bf48 <__alt_data_end+0xf800bf48>
1000c830:	d8c12317 	ldw	r3,1164(sp)
1000c834:	d9012517 	ldw	r4,1172(sp)
1000c838:	18800017 	ldw	r2,0(r3)
1000c83c:	18c00104 	addi	r3,r3,4
1000c840:	d8c12315 	stw	r3,1164(sp)
1000c844:	11000015 	stw	r4,0(r2)
1000c848:	003ba706 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000c84c:	d9012317 	ldw	r4,1164(sp)
1000c850:	14c00017 	ldw	r19,0(r2)
1000c854:	002b883a 	mov	r21,zero
1000c858:	21000104 	addi	r4,r4,4
1000c85c:	d9012315 	stw	r4,1164(sp)
1000c860:	003d7906 	br	1000be48 <__alt_data_end+0xf800be48>
1000c864:	d8c12317 	ldw	r3,1164(sp)
1000c868:	002b883a 	mov	r21,zero
1000c86c:	00800044 	movi	r2,1
1000c870:	1cc00017 	ldw	r19,0(r3)
1000c874:	18c00104 	addi	r3,r3,4
1000c878:	d8c12315 	stw	r3,1164(sp)
1000c87c:	9807883a 	mov	r3,r19
1000c880:	003d4e06 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c884:	d8812317 	ldw	r2,1164(sp)
1000c888:	002b883a 	mov	r21,zero
1000c88c:	14c00017 	ldw	r19,0(r2)
1000c890:	10800104 	addi	r2,r2,4
1000c894:	d8812315 	stw	r2,1164(sp)
1000c898:	9807883a 	mov	r3,r19
1000c89c:	0005883a 	mov	r2,zero
1000c8a0:	003d4606 	br	1000bdbc <__alt_data_end+0xf800bdbc>
1000c8a4:	1cc00017 	ldw	r19,0(r3)
1000c8a8:	d8c12317 	ldw	r3,1164(sp)
1000c8ac:	982bd7fa 	srai	r21,r19,31
1000c8b0:	18c00104 	addi	r3,r3,4
1000c8b4:	d8c12315 	stw	r3,1164(sp)
1000c8b8:	a805883a 	mov	r2,r21
1000c8bc:	003c8406 	br	1000bad0 <__alt_data_end+0xf800bad0>
1000c8c0:	01040074 	movhi	r4,4097
1000c8c4:	21051004 	addi	r4,r4,5184
1000c8c8:	d9012615 	stw	r4,1176(sp)
1000c8cc:	003d0606 	br	1000bce8 <__alt_data_end+0xf800bce8>
1000c8d0:	b9800043 	ldbu	r6,1(r23)
1000c8d4:	94800814 	ori	r18,r18,32
1000c8d8:	bdc00044 	addi	r23,r23,1
1000c8dc:	31803fcc 	andi	r6,r6,255
1000c8e0:	3180201c 	xori	r6,r6,128
1000c8e4:	31bfe004 	addi	r6,r6,-128
1000c8e8:	003ba806 	br	1000b78c <__alt_data_end+0xf800b78c>
1000c8ec:	d8811e17 	ldw	r2,1144(sp)
1000c8f0:	d8c12217 	ldw	r3,1160(sp)
1000c8f4:	10e9c83a 	sub	r20,r2,r3
1000c8f8:	003c9406 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c8fc:	da012a15 	stw	r8,1192(sp)
1000c900:	00041180 	call	10004118 <strlen>
1000c904:	1029883a 	mov	r20,r2
1000c908:	dd811d83 	ldbu	r22,1142(sp)
1000c90c:	dcc12315 	stw	r19,1164(sp)
1000c910:	0021883a 	mov	r16,zero
1000c914:	da012a17 	ldw	r8,1192(sp)
1000c918:	003c8c06 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c91c:	d9012117 	ldw	r4,1156(sp)
1000c920:	d9412017 	ldw	r5,1152(sp)
1000c924:	d9811a04 	addi	r6,sp,1128
1000c928:	000b4f40 	call	1000b4f4 <__sprint_r.part.0>
1000c92c:	103e521e 	bne	r2,zero,1000c278 <__alt_data_end+0xf800c278>
1000c930:	d9411b17 	ldw	r5,1132(sp)
1000c934:	d8c11c17 	ldw	r3,1136(sp)
1000c938:	d811883a 	mov	r8,sp
1000c93c:	28800044 	addi	r2,r5,1
1000c940:	003cce06 	br	1000bc7c <__alt_data_end+0xf800bc7c>
1000c944:	01440074 	movhi	r5,4097
1000c948:	29451404 	addi	r5,r5,5200
1000c94c:	d9412615 	stw	r5,1176(sp)
1000c950:	d9411b17 	ldw	r5,1132(sp)
1000c954:	29400044 	addi	r5,r5,1
1000c958:	003cad06 	br	1000bc10 <__alt_data_end+0xf800bc10>
1000c95c:	00800184 	movi	r2,6
1000c960:	1400012e 	bgeu	r2,r16,1000c968 <___vfiprintf_internal_r+0x1360>
1000c964:	1021883a 	mov	r16,r2
1000c968:	8029883a 	mov	r20,r16
1000c96c:	802b883a 	mov	r21,r16
1000c970:	80001c16 	blt	r16,zero,1000c9e4 <___vfiprintf_internal_r+0x13dc>
1000c974:	00c40074 	movhi	r3,4097
1000c978:	18c4b404 	addi	r3,r3,4816
1000c97c:	dcc12315 	stw	r19,1164(sp)
1000c980:	d8c12215 	stw	r3,1160(sp)
1000c984:	003cff06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c988:	d9411b17 	ldw	r5,1132(sp)
1000c98c:	00840074 	movhi	r2,4097
1000c990:	10851404 	addi	r2,r2,5200
1000c994:	d8812615 	stw	r2,1176(sp)
1000c998:	29400044 	addi	r5,r5,1
1000c99c:	003e6706 	br	1000c33c <__alt_data_end+0xf800c33c>
1000c9a0:	d9012317 	ldw	r4,1164(sp)
1000c9a4:	d9412517 	ldw	r5,1172(sp)
1000c9a8:	20800017 	ldw	r2,0(r4)
1000c9ac:	21000104 	addi	r4,r4,4
1000c9b0:	d9012315 	stw	r4,1164(sp)
1000c9b4:	11400015 	stw	r5,0(r2)
1000c9b8:	003b4b06 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000c9bc:	8029883a 	mov	r20,r16
1000c9c0:	dd811d83 	ldbu	r22,1142(sp)
1000c9c4:	dcc12315 	stw	r19,1164(sp)
1000c9c8:	0021883a 	mov	r16,zero
1000c9cc:	003c5f06 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000c9d0:	01040074 	movhi	r4,4097
1000c9d4:	21051004 	addi	r4,r4,5184
1000c9d8:	d9012615 	stw	r4,1176(sp)
1000c9dc:	1009883a 	mov	r4,r2
1000c9e0:	003ea006 	br	1000c464 <__alt_data_end+0xf800c464>
1000c9e4:	002b883a 	mov	r21,zero
1000c9e8:	003fe206 	br	1000c974 <__alt_data_end+0xf800c974>
1000c9ec:	d9412317 	ldw	r5,1164(sp)
1000c9f0:	b807883a 	mov	r3,r23
1000c9f4:	102f883a 	mov	r23,r2
1000c9f8:	2c000017 	ldw	r16,0(r5)
1000c9fc:	29000104 	addi	r4,r5,4
1000ca00:	d9012315 	stw	r4,1164(sp)
1000ca04:	80000416 	blt	r16,zero,1000ca18 <___vfiprintf_internal_r+0x1410>
1000ca08:	19800047 	ldb	r6,1(r3)
1000ca0c:	003b5f06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000ca10:	043fffc4 	movi	r16,-1
1000ca14:	003bef06 	br	1000b9d4 <__alt_data_end+0xf800b9d4>
1000ca18:	043fffc4 	movi	r16,-1
1000ca1c:	19800047 	ldb	r6,1(r3)
1000ca20:	003b5a06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000ca24:	282b883a 	mov	r21,r5
1000ca28:	003cc706 	br	1000bd48 <__alt_data_end+0xf800bd48>

1000ca2c <__vfiprintf_internal>:
1000ca2c:	2007883a 	mov	r3,r4
1000ca30:	01040074 	movhi	r4,4097
1000ca34:	210bd104 	addi	r4,r4,12100
1000ca38:	21000017 	ldw	r4,0(r4)
1000ca3c:	2805883a 	mov	r2,r5
1000ca40:	300f883a 	mov	r7,r6
1000ca44:	180b883a 	mov	r5,r3
1000ca48:	100d883a 	mov	r6,r2
1000ca4c:	000b6081 	jmpi	1000b608 <___vfiprintf_internal_r>

1000ca50 <_write_r>:
1000ca50:	defffd04 	addi	sp,sp,-12
1000ca54:	dc000015 	stw	r16,0(sp)
1000ca58:	04040074 	movhi	r16,4097
1000ca5c:	dc400115 	stw	r17,4(sp)
1000ca60:	8412b004 	addi	r16,r16,19136
1000ca64:	2023883a 	mov	r17,r4
1000ca68:	2809883a 	mov	r4,r5
1000ca6c:	300b883a 	mov	r5,r6
1000ca70:	380d883a 	mov	r6,r7
1000ca74:	dfc00215 	stw	ra,8(sp)
1000ca78:	80000015 	stw	zero,0(r16)
1000ca7c:	000f2700 	call	1000f270 <write>
1000ca80:	00ffffc4 	movi	r3,-1
1000ca84:	10c00526 	beq	r2,r3,1000ca9c <_write_r+0x4c>
1000ca88:	dfc00217 	ldw	ra,8(sp)
1000ca8c:	dc400117 	ldw	r17,4(sp)
1000ca90:	dc000017 	ldw	r16,0(sp)
1000ca94:	dec00304 	addi	sp,sp,12
1000ca98:	f800283a 	ret
1000ca9c:	80c00017 	ldw	r3,0(r16)
1000caa0:	183ff926 	beq	r3,zero,1000ca88 <__alt_data_end+0xf800ca88>
1000caa4:	88c00015 	stw	r3,0(r17)
1000caa8:	003ff706 	br	1000ca88 <__alt_data_end+0xf800ca88>

1000caac <_close_r>:
1000caac:	defffd04 	addi	sp,sp,-12
1000cab0:	dc000015 	stw	r16,0(sp)
1000cab4:	04040074 	movhi	r16,4097
1000cab8:	dc400115 	stw	r17,4(sp)
1000cabc:	8412b004 	addi	r16,r16,19136
1000cac0:	2023883a 	mov	r17,r4
1000cac4:	2809883a 	mov	r4,r5
1000cac8:	dfc00215 	stw	ra,8(sp)
1000cacc:	80000015 	stw	zero,0(r16)
1000cad0:	000e9cc0 	call	1000e9cc <close>
1000cad4:	00ffffc4 	movi	r3,-1
1000cad8:	10c00526 	beq	r2,r3,1000caf0 <_close_r+0x44>
1000cadc:	dfc00217 	ldw	ra,8(sp)
1000cae0:	dc400117 	ldw	r17,4(sp)
1000cae4:	dc000017 	ldw	r16,0(sp)
1000cae8:	dec00304 	addi	sp,sp,12
1000caec:	f800283a 	ret
1000caf0:	80c00017 	ldw	r3,0(r16)
1000caf4:	183ff926 	beq	r3,zero,1000cadc <__alt_data_end+0xf800cadc>
1000caf8:	88c00015 	stw	r3,0(r17)
1000cafc:	003ff706 	br	1000cadc <__alt_data_end+0xf800cadc>

1000cb00 <_calloc_r>:
1000cb00:	defffe04 	addi	sp,sp,-8
1000cb04:	dc000015 	stw	r16,0(sp)
1000cb08:	2021883a 	mov	r16,r4
1000cb0c:	2809883a 	mov	r4,r5
1000cb10:	300b883a 	mov	r5,r6
1000cb14:	dfc00115 	stw	ra,4(sp)
1000cb18:	0002c180 	call	10002c18 <__mulsi3>
1000cb1c:	8009883a 	mov	r4,r16
1000cb20:	100b883a 	mov	r5,r2
1000cb24:	000901c0 	call	1000901c <_malloc_r>
1000cb28:	1021883a 	mov	r16,r2
1000cb2c:	10002826 	beq	r2,zero,1000cbd0 <_calloc_r+0xd0>
1000cb30:	11bfff17 	ldw	r6,-4(r2)
1000cb34:	00bfff04 	movi	r2,-4
1000cb38:	00c00904 	movi	r3,36
1000cb3c:	308c703a 	and	r6,r6,r2
1000cb40:	308d883a 	add	r6,r6,r2
1000cb44:	19801436 	bltu	r3,r6,1000cb98 <_calloc_r+0x98>
1000cb48:	008004c4 	movi	r2,19
1000cb4c:	11800936 	bltu	r2,r6,1000cb74 <_calloc_r+0x74>
1000cb50:	8005883a 	mov	r2,r16
1000cb54:	10000015 	stw	zero,0(r2)
1000cb58:	10000115 	stw	zero,4(r2)
1000cb5c:	10000215 	stw	zero,8(r2)
1000cb60:	8005883a 	mov	r2,r16
1000cb64:	dfc00117 	ldw	ra,4(sp)
1000cb68:	dc000017 	ldw	r16,0(sp)
1000cb6c:	dec00204 	addi	sp,sp,8
1000cb70:	f800283a 	ret
1000cb74:	80000015 	stw	zero,0(r16)
1000cb78:	80000115 	stw	zero,4(r16)
1000cb7c:	008006c4 	movi	r2,27
1000cb80:	11800d2e 	bgeu	r2,r6,1000cbb8 <_calloc_r+0xb8>
1000cb84:	80000215 	stw	zero,8(r16)
1000cb88:	80000315 	stw	zero,12(r16)
1000cb8c:	30c00c26 	beq	r6,r3,1000cbc0 <_calloc_r+0xc0>
1000cb90:	80800404 	addi	r2,r16,16
1000cb94:	003fef06 	br	1000cb54 <__alt_data_end+0xf800cb54>
1000cb98:	8009883a 	mov	r4,r16
1000cb9c:	000b883a 	mov	r5,zero
1000cba0:	0009b400 	call	10009b40 <memset>
1000cba4:	8005883a 	mov	r2,r16
1000cba8:	dfc00117 	ldw	ra,4(sp)
1000cbac:	dc000017 	ldw	r16,0(sp)
1000cbb0:	dec00204 	addi	sp,sp,8
1000cbb4:	f800283a 	ret
1000cbb8:	80800204 	addi	r2,r16,8
1000cbbc:	003fe506 	br	1000cb54 <__alt_data_end+0xf800cb54>
1000cbc0:	80000415 	stw	zero,16(r16)
1000cbc4:	80800604 	addi	r2,r16,24
1000cbc8:	80000515 	stw	zero,20(r16)
1000cbcc:	003fe106 	br	1000cb54 <__alt_data_end+0xf800cb54>
1000cbd0:	0005883a 	mov	r2,zero
1000cbd4:	003fe306 	br	1000cb64 <__alt_data_end+0xf800cb64>

1000cbd8 <_fclose_r>:
1000cbd8:	28003226 	beq	r5,zero,1000cca4 <_fclose_r+0xcc>
1000cbdc:	defffc04 	addi	sp,sp,-16
1000cbe0:	dc400115 	stw	r17,4(sp)
1000cbe4:	2023883a 	mov	r17,r4
1000cbe8:	dc000015 	stw	r16,0(sp)
1000cbec:	dfc00315 	stw	ra,12(sp)
1000cbf0:	dc800215 	stw	r18,8(sp)
1000cbf4:	2821883a 	mov	r16,r5
1000cbf8:	000831c0 	call	1000831c <__sfp_lock_acquire>
1000cbfc:	88000226 	beq	r17,zero,1000cc08 <_fclose_r+0x30>
1000cc00:	88800e17 	ldw	r2,56(r17)
1000cc04:	10002926 	beq	r2,zero,1000ccac <_fclose_r+0xd4>
1000cc08:	8080030f 	ldh	r2,12(r16)
1000cc0c:	10002226 	beq	r2,zero,1000cc98 <_fclose_r+0xc0>
1000cc10:	8809883a 	mov	r4,r17
1000cc14:	800b883a 	mov	r5,r16
1000cc18:	0007d500 	call	10007d50 <_fflush_r>
1000cc1c:	1025883a 	mov	r18,r2
1000cc20:	80800b17 	ldw	r2,44(r16)
1000cc24:	10000426 	beq	r2,zero,1000cc38 <_fclose_r+0x60>
1000cc28:	81400717 	ldw	r5,28(r16)
1000cc2c:	8809883a 	mov	r4,r17
1000cc30:	103ee83a 	callr	r2
1000cc34:	10002616 	blt	r2,zero,1000ccd0 <_fclose_r+0xf8>
1000cc38:	8080030b 	ldhu	r2,12(r16)
1000cc3c:	1080200c 	andi	r2,r2,128
1000cc40:	10001f1e 	bne	r2,zero,1000ccc0 <_fclose_r+0xe8>
1000cc44:	81400c17 	ldw	r5,48(r16)
1000cc48:	28000526 	beq	r5,zero,1000cc60 <_fclose_r+0x88>
1000cc4c:	80801004 	addi	r2,r16,64
1000cc50:	28800226 	beq	r5,r2,1000cc5c <_fclose_r+0x84>
1000cc54:	8809883a 	mov	r4,r17
1000cc58:	00084800 	call	10008480 <_free_r>
1000cc5c:	80000c15 	stw	zero,48(r16)
1000cc60:	81401117 	ldw	r5,68(r16)
1000cc64:	28000326 	beq	r5,zero,1000cc74 <_fclose_r+0x9c>
1000cc68:	8809883a 	mov	r4,r17
1000cc6c:	00084800 	call	10008480 <_free_r>
1000cc70:	80001115 	stw	zero,68(r16)
1000cc74:	8000030d 	sth	zero,12(r16)
1000cc78:	00083200 	call	10008320 <__sfp_lock_release>
1000cc7c:	9005883a 	mov	r2,r18
1000cc80:	dfc00317 	ldw	ra,12(sp)
1000cc84:	dc800217 	ldw	r18,8(sp)
1000cc88:	dc400117 	ldw	r17,4(sp)
1000cc8c:	dc000017 	ldw	r16,0(sp)
1000cc90:	dec00404 	addi	sp,sp,16
1000cc94:	f800283a 	ret
1000cc98:	00083200 	call	10008320 <__sfp_lock_release>
1000cc9c:	0005883a 	mov	r2,zero
1000cca0:	003ff706 	br	1000cc80 <__alt_data_end+0xf800cc80>
1000cca4:	0005883a 	mov	r2,zero
1000cca8:	f800283a 	ret
1000ccac:	8809883a 	mov	r4,r17
1000ccb0:	000830c0 	call	1000830c <__sinit>
1000ccb4:	8080030f 	ldh	r2,12(r16)
1000ccb8:	103fd51e 	bne	r2,zero,1000cc10 <__alt_data_end+0xf800cc10>
1000ccbc:	003ff606 	br	1000cc98 <__alt_data_end+0xf800cc98>
1000ccc0:	81400417 	ldw	r5,16(r16)
1000ccc4:	8809883a 	mov	r4,r17
1000ccc8:	00084800 	call	10008480 <_free_r>
1000cccc:	003fdd06 	br	1000cc44 <__alt_data_end+0xf800cc44>
1000ccd0:	04bfffc4 	movi	r18,-1
1000ccd4:	003fd806 	br	1000cc38 <__alt_data_end+0xf800cc38>

1000ccd8 <fclose>:
1000ccd8:	00840074 	movhi	r2,4097
1000ccdc:	108bd104 	addi	r2,r2,12100
1000cce0:	200b883a 	mov	r5,r4
1000cce4:	11000017 	ldw	r4,0(r2)
1000cce8:	000cbd81 	jmpi	1000cbd8 <_fclose_r>

1000ccec <_fputwc_r>:
1000ccec:	3080030b 	ldhu	r2,12(r6)
1000ccf0:	defff804 	addi	sp,sp,-32
1000ccf4:	dcc00415 	stw	r19,16(sp)
1000ccf8:	dc800315 	stw	r18,12(sp)
1000ccfc:	dc000115 	stw	r16,4(sp)
1000cd00:	dfc00715 	stw	ra,28(sp)
1000cd04:	dd400615 	stw	r21,24(sp)
1000cd08:	dd000515 	stw	r20,20(sp)
1000cd0c:	dc400215 	stw	r17,8(sp)
1000cd10:	10c8000c 	andi	r3,r2,8192
1000cd14:	3021883a 	mov	r16,r6
1000cd18:	2027883a 	mov	r19,r4
1000cd1c:	2825883a 	mov	r18,r5
1000cd20:	1800051e 	bne	r3,zero,1000cd38 <_fputwc_r+0x4c>
1000cd24:	30c01917 	ldw	r3,100(r6)
1000cd28:	10880014 	ori	r2,r2,8192
1000cd2c:	3080030d 	sth	r2,12(r6)
1000cd30:	18880014 	ori	r2,r3,8192
1000cd34:	30801915 	stw	r2,100(r6)
1000cd38:	0008e0c0 	call	10008e0c <__locale_mb_cur_max>
1000cd3c:	00c00044 	movi	r3,1
1000cd40:	10c03e26 	beq	r2,r3,1000ce3c <_fputwc_r+0x150>
1000cd44:	9809883a 	mov	r4,r19
1000cd48:	d80b883a 	mov	r5,sp
1000cd4c:	900d883a 	mov	r6,r18
1000cd50:	81c01704 	addi	r7,r16,92
1000cd54:	000d19c0 	call	1000d19c <_wcrtomb_r>
1000cd58:	1029883a 	mov	r20,r2
1000cd5c:	00bfffc4 	movi	r2,-1
1000cd60:	a0802026 	beq	r20,r2,1000cde4 <_fputwc_r+0xf8>
1000cd64:	d9400003 	ldbu	r5,0(sp)
1000cd68:	a0001c26 	beq	r20,zero,1000cddc <_fputwc_r+0xf0>
1000cd6c:	0023883a 	mov	r17,zero
1000cd70:	05400284 	movi	r21,10
1000cd74:	00000906 	br	1000cd9c <_fputwc_r+0xb0>
1000cd78:	80800017 	ldw	r2,0(r16)
1000cd7c:	11400005 	stb	r5,0(r2)
1000cd80:	80c00017 	ldw	r3,0(r16)
1000cd84:	18c00044 	addi	r3,r3,1
1000cd88:	80c00015 	stw	r3,0(r16)
1000cd8c:	8c400044 	addi	r17,r17,1
1000cd90:	dc45883a 	add	r2,sp,r17
1000cd94:	8d00112e 	bgeu	r17,r20,1000cddc <_fputwc_r+0xf0>
1000cd98:	11400003 	ldbu	r5,0(r2)
1000cd9c:	80c00217 	ldw	r3,8(r16)
1000cda0:	18ffffc4 	addi	r3,r3,-1
1000cda4:	80c00215 	stw	r3,8(r16)
1000cda8:	183ff30e 	bge	r3,zero,1000cd78 <__alt_data_end+0xf800cd78>
1000cdac:	80800617 	ldw	r2,24(r16)
1000cdb0:	18801916 	blt	r3,r2,1000ce18 <_fputwc_r+0x12c>
1000cdb4:	80800017 	ldw	r2,0(r16)
1000cdb8:	11400005 	stb	r5,0(r2)
1000cdbc:	80800017 	ldw	r2,0(r16)
1000cdc0:	10c00003 	ldbu	r3,0(r2)
1000cdc4:	10800044 	addi	r2,r2,1
1000cdc8:	1d402326 	beq	r3,r21,1000ce58 <_fputwc_r+0x16c>
1000cdcc:	80800015 	stw	r2,0(r16)
1000cdd0:	8c400044 	addi	r17,r17,1
1000cdd4:	dc45883a 	add	r2,sp,r17
1000cdd8:	8d3fef36 	bltu	r17,r20,1000cd98 <__alt_data_end+0xf800cd98>
1000cddc:	9005883a 	mov	r2,r18
1000cde0:	00000406 	br	1000cdf4 <_fputwc_r+0x108>
1000cde4:	80c0030b 	ldhu	r3,12(r16)
1000cde8:	a005883a 	mov	r2,r20
1000cdec:	18c01014 	ori	r3,r3,64
1000cdf0:	80c0030d 	sth	r3,12(r16)
1000cdf4:	dfc00717 	ldw	ra,28(sp)
1000cdf8:	dd400617 	ldw	r21,24(sp)
1000cdfc:	dd000517 	ldw	r20,20(sp)
1000ce00:	dcc00417 	ldw	r19,16(sp)
1000ce04:	dc800317 	ldw	r18,12(sp)
1000ce08:	dc400217 	ldw	r17,8(sp)
1000ce0c:	dc000117 	ldw	r16,4(sp)
1000ce10:	dec00804 	addi	sp,sp,32
1000ce14:	f800283a 	ret
1000ce18:	9809883a 	mov	r4,r19
1000ce1c:	29403fcc 	andi	r5,r5,255
1000ce20:	800d883a 	mov	r6,r16
1000ce24:	000d02c0 	call	1000d02c <__swbuf_r>
1000ce28:	10bfffe0 	cmpeqi	r2,r2,-1
1000ce2c:	10803fcc 	andi	r2,r2,255
1000ce30:	103fd626 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000ce34:	00bfffc4 	movi	r2,-1
1000ce38:	003fee06 	br	1000cdf4 <__alt_data_end+0xf800cdf4>
1000ce3c:	90ffffc4 	addi	r3,r18,-1
1000ce40:	01003f84 	movi	r4,254
1000ce44:	20ffbf36 	bltu	r4,r3,1000cd44 <__alt_data_end+0xf800cd44>
1000ce48:	900b883a 	mov	r5,r18
1000ce4c:	dc800005 	stb	r18,0(sp)
1000ce50:	1029883a 	mov	r20,r2
1000ce54:	003fc506 	br	1000cd6c <__alt_data_end+0xf800cd6c>
1000ce58:	9809883a 	mov	r4,r19
1000ce5c:	a80b883a 	mov	r5,r21
1000ce60:	800d883a 	mov	r6,r16
1000ce64:	000d02c0 	call	1000d02c <__swbuf_r>
1000ce68:	10bfffe0 	cmpeqi	r2,r2,-1
1000ce6c:	003fef06 	br	1000ce2c <__alt_data_end+0xf800ce2c>

1000ce70 <fputwc>:
1000ce70:	defffc04 	addi	sp,sp,-16
1000ce74:	dc000115 	stw	r16,4(sp)
1000ce78:	04040074 	movhi	r16,4097
1000ce7c:	840bd104 	addi	r16,r16,12100
1000ce80:	dc400215 	stw	r17,8(sp)
1000ce84:	2023883a 	mov	r17,r4
1000ce88:	81000017 	ldw	r4,0(r16)
1000ce8c:	dfc00315 	stw	ra,12(sp)
1000ce90:	280d883a 	mov	r6,r5
1000ce94:	20000626 	beq	r4,zero,1000ceb0 <fputwc+0x40>
1000ce98:	20800e17 	ldw	r2,56(r4)
1000ce9c:	1000041e 	bne	r2,zero,1000ceb0 <fputwc+0x40>
1000cea0:	d9400015 	stw	r5,0(sp)
1000cea4:	000830c0 	call	1000830c <__sinit>
1000cea8:	81000017 	ldw	r4,0(r16)
1000ceac:	d9800017 	ldw	r6,0(sp)
1000ceb0:	880b883a 	mov	r5,r17
1000ceb4:	dfc00317 	ldw	ra,12(sp)
1000ceb8:	dc400217 	ldw	r17,8(sp)
1000cebc:	dc000117 	ldw	r16,4(sp)
1000cec0:	dec00404 	addi	sp,sp,16
1000cec4:	000ccec1 	jmpi	1000ccec <_fputwc_r>

1000cec8 <_fstat_r>:
1000cec8:	defffd04 	addi	sp,sp,-12
1000cecc:	dc000015 	stw	r16,0(sp)
1000ced0:	04040074 	movhi	r16,4097
1000ced4:	dc400115 	stw	r17,4(sp)
1000ced8:	8412b004 	addi	r16,r16,19136
1000cedc:	2023883a 	mov	r17,r4
1000cee0:	2809883a 	mov	r4,r5
1000cee4:	300b883a 	mov	r5,r6
1000cee8:	dfc00215 	stw	ra,8(sp)
1000ceec:	80000015 	stw	zero,0(r16)
1000cef0:	000eb200 	call	1000eb20 <fstat>
1000cef4:	00ffffc4 	movi	r3,-1
1000cef8:	10c00526 	beq	r2,r3,1000cf10 <_fstat_r+0x48>
1000cefc:	dfc00217 	ldw	ra,8(sp)
1000cf00:	dc400117 	ldw	r17,4(sp)
1000cf04:	dc000017 	ldw	r16,0(sp)
1000cf08:	dec00304 	addi	sp,sp,12
1000cf0c:	f800283a 	ret
1000cf10:	80c00017 	ldw	r3,0(r16)
1000cf14:	183ff926 	beq	r3,zero,1000cefc <__alt_data_end+0xf800cefc>
1000cf18:	88c00015 	stw	r3,0(r17)
1000cf1c:	003ff706 	br	1000cefc <__alt_data_end+0xf800cefc>

1000cf20 <_isatty_r>:
1000cf20:	defffd04 	addi	sp,sp,-12
1000cf24:	dc000015 	stw	r16,0(sp)
1000cf28:	04040074 	movhi	r16,4097
1000cf2c:	dc400115 	stw	r17,4(sp)
1000cf30:	8412b004 	addi	r16,r16,19136
1000cf34:	2023883a 	mov	r17,r4
1000cf38:	2809883a 	mov	r4,r5
1000cf3c:	dfc00215 	stw	ra,8(sp)
1000cf40:	80000015 	stw	zero,0(r16)
1000cf44:	000ec280 	call	1000ec28 <isatty>
1000cf48:	00ffffc4 	movi	r3,-1
1000cf4c:	10c00526 	beq	r2,r3,1000cf64 <_isatty_r+0x44>
1000cf50:	dfc00217 	ldw	ra,8(sp)
1000cf54:	dc400117 	ldw	r17,4(sp)
1000cf58:	dc000017 	ldw	r16,0(sp)
1000cf5c:	dec00304 	addi	sp,sp,12
1000cf60:	f800283a 	ret
1000cf64:	80c00017 	ldw	r3,0(r16)
1000cf68:	183ff926 	beq	r3,zero,1000cf50 <__alt_data_end+0xf800cf50>
1000cf6c:	88c00015 	stw	r3,0(r17)
1000cf70:	003ff706 	br	1000cf50 <__alt_data_end+0xf800cf50>

1000cf74 <_lseek_r>:
1000cf74:	defffd04 	addi	sp,sp,-12
1000cf78:	dc000015 	stw	r16,0(sp)
1000cf7c:	04040074 	movhi	r16,4097
1000cf80:	dc400115 	stw	r17,4(sp)
1000cf84:	8412b004 	addi	r16,r16,19136
1000cf88:	2023883a 	mov	r17,r4
1000cf8c:	2809883a 	mov	r4,r5
1000cf90:	300b883a 	mov	r5,r6
1000cf94:	380d883a 	mov	r6,r7
1000cf98:	dfc00215 	stw	ra,8(sp)
1000cf9c:	80000015 	stw	zero,0(r16)
1000cfa0:	000ee080 	call	1000ee08 <lseek>
1000cfa4:	00ffffc4 	movi	r3,-1
1000cfa8:	10c00526 	beq	r2,r3,1000cfc0 <_lseek_r+0x4c>
1000cfac:	dfc00217 	ldw	ra,8(sp)
1000cfb0:	dc400117 	ldw	r17,4(sp)
1000cfb4:	dc000017 	ldw	r16,0(sp)
1000cfb8:	dec00304 	addi	sp,sp,12
1000cfbc:	f800283a 	ret
1000cfc0:	80c00017 	ldw	r3,0(r16)
1000cfc4:	183ff926 	beq	r3,zero,1000cfac <__alt_data_end+0xf800cfac>
1000cfc8:	88c00015 	stw	r3,0(r17)
1000cfcc:	003ff706 	br	1000cfac <__alt_data_end+0xf800cfac>

1000cfd0 <_read_r>:
1000cfd0:	defffd04 	addi	sp,sp,-12
1000cfd4:	dc000015 	stw	r16,0(sp)
1000cfd8:	04040074 	movhi	r16,4097
1000cfdc:	dc400115 	stw	r17,4(sp)
1000cfe0:	8412b004 	addi	r16,r16,19136
1000cfe4:	2023883a 	mov	r17,r4
1000cfe8:	2809883a 	mov	r4,r5
1000cfec:	300b883a 	mov	r5,r6
1000cff0:	380d883a 	mov	r6,r7
1000cff4:	dfc00215 	stw	ra,8(sp)
1000cff8:	80000015 	stw	zero,0(r16)
1000cffc:	000efec0 	call	1000efec <read>
1000d000:	00ffffc4 	movi	r3,-1
1000d004:	10c00526 	beq	r2,r3,1000d01c <_read_r+0x4c>
1000d008:	dfc00217 	ldw	ra,8(sp)
1000d00c:	dc400117 	ldw	r17,4(sp)
1000d010:	dc000017 	ldw	r16,0(sp)
1000d014:	dec00304 	addi	sp,sp,12
1000d018:	f800283a 	ret
1000d01c:	80c00017 	ldw	r3,0(r16)
1000d020:	183ff926 	beq	r3,zero,1000d008 <__alt_data_end+0xf800d008>
1000d024:	88c00015 	stw	r3,0(r17)
1000d028:	003ff706 	br	1000d008 <__alt_data_end+0xf800d008>

1000d02c <__swbuf_r>:
1000d02c:	defffc04 	addi	sp,sp,-16
1000d030:	dc800215 	stw	r18,8(sp)
1000d034:	dc400115 	stw	r17,4(sp)
1000d038:	dc000015 	stw	r16,0(sp)
1000d03c:	dfc00315 	stw	ra,12(sp)
1000d040:	2025883a 	mov	r18,r4
1000d044:	2823883a 	mov	r17,r5
1000d048:	3021883a 	mov	r16,r6
1000d04c:	20000226 	beq	r4,zero,1000d058 <__swbuf_r+0x2c>
1000d050:	20800e17 	ldw	r2,56(r4)
1000d054:	10004126 	beq	r2,zero,1000d15c <__swbuf_r+0x130>
1000d058:	80c00617 	ldw	r3,24(r16)
1000d05c:	8180030b 	ldhu	r6,12(r16)
1000d060:	80c00215 	stw	r3,8(r16)
1000d064:	30c0020c 	andi	r3,r6,8
1000d068:	18003526 	beq	r3,zero,1000d140 <__swbuf_r+0x114>
1000d06c:	80c00417 	ldw	r3,16(r16)
1000d070:	18003326 	beq	r3,zero,1000d140 <__swbuf_r+0x114>
1000d074:	3088000c 	andi	r2,r6,8192
1000d078:	8c403fcc 	andi	r17,r17,255
1000d07c:	10001726 	beq	r2,zero,1000d0dc <__swbuf_r+0xb0>
1000d080:	80800017 	ldw	r2,0(r16)
1000d084:	81000517 	ldw	r4,20(r16)
1000d088:	10c7c83a 	sub	r3,r2,r3
1000d08c:	19001d0e 	bge	r3,r4,1000d104 <__swbuf_r+0xd8>
1000d090:	18c00044 	addi	r3,r3,1
1000d094:	81400217 	ldw	r5,8(r16)
1000d098:	11000044 	addi	r4,r2,1
1000d09c:	81000015 	stw	r4,0(r16)
1000d0a0:	297fffc4 	addi	r5,r5,-1
1000d0a4:	81400215 	stw	r5,8(r16)
1000d0a8:	14400005 	stb	r17,0(r2)
1000d0ac:	80800517 	ldw	r2,20(r16)
1000d0b0:	10c01d26 	beq	r2,r3,1000d128 <__swbuf_r+0xfc>
1000d0b4:	8080030b 	ldhu	r2,12(r16)
1000d0b8:	1080004c 	andi	r2,r2,1
1000d0bc:	1000181e 	bne	r2,zero,1000d120 <__swbuf_r+0xf4>
1000d0c0:	8805883a 	mov	r2,r17
1000d0c4:	dfc00317 	ldw	ra,12(sp)
1000d0c8:	dc800217 	ldw	r18,8(sp)
1000d0cc:	dc400117 	ldw	r17,4(sp)
1000d0d0:	dc000017 	ldw	r16,0(sp)
1000d0d4:	dec00404 	addi	sp,sp,16
1000d0d8:	f800283a 	ret
1000d0dc:	81001917 	ldw	r4,100(r16)
1000d0e0:	00b7ffc4 	movi	r2,-8193
1000d0e4:	31880014 	ori	r6,r6,8192
1000d0e8:	2084703a 	and	r2,r4,r2
1000d0ec:	80801915 	stw	r2,100(r16)
1000d0f0:	80800017 	ldw	r2,0(r16)
1000d0f4:	81000517 	ldw	r4,20(r16)
1000d0f8:	8180030d 	sth	r6,12(r16)
1000d0fc:	10c7c83a 	sub	r3,r2,r3
1000d100:	193fe316 	blt	r3,r4,1000d090 <__alt_data_end+0xf800d090>
1000d104:	9009883a 	mov	r4,r18
1000d108:	800b883a 	mov	r5,r16
1000d10c:	0007d500 	call	10007d50 <_fflush_r>
1000d110:	1000091e 	bne	r2,zero,1000d138 <__swbuf_r+0x10c>
1000d114:	80800017 	ldw	r2,0(r16)
1000d118:	00c00044 	movi	r3,1
1000d11c:	003fdd06 	br	1000d094 <__alt_data_end+0xf800d094>
1000d120:	00800284 	movi	r2,10
1000d124:	88bfe61e 	bne	r17,r2,1000d0c0 <__alt_data_end+0xf800d0c0>
1000d128:	9009883a 	mov	r4,r18
1000d12c:	800b883a 	mov	r5,r16
1000d130:	0007d500 	call	10007d50 <_fflush_r>
1000d134:	103fe226 	beq	r2,zero,1000d0c0 <__alt_data_end+0xf800d0c0>
1000d138:	00bfffc4 	movi	r2,-1
1000d13c:	003fe106 	br	1000d0c4 <__alt_data_end+0xf800d0c4>
1000d140:	9009883a 	mov	r4,r18
1000d144:	800b883a 	mov	r5,r16
1000d148:	00062d00 	call	100062d0 <__swsetup_r>
1000d14c:	1000051e 	bne	r2,zero,1000d164 <__swbuf_r+0x138>
1000d150:	8180030b 	ldhu	r6,12(r16)
1000d154:	80c00417 	ldw	r3,16(r16)
1000d158:	003fc606 	br	1000d074 <__alt_data_end+0xf800d074>
1000d15c:	000830c0 	call	1000830c <__sinit>
1000d160:	003fbd06 	br	1000d058 <__alt_data_end+0xf800d058>
1000d164:	80c0030b 	ldhu	r3,12(r16)
1000d168:	00bfffc4 	movi	r2,-1
1000d16c:	18c01014 	ori	r3,r3,64
1000d170:	80c0030d 	sth	r3,12(r16)
1000d174:	00c00244 	movi	r3,9
1000d178:	90c00015 	stw	r3,0(r18)
1000d17c:	003fd106 	br	1000d0c4 <__alt_data_end+0xf800d0c4>

1000d180 <__swbuf>:
1000d180:	00c40074 	movhi	r3,4097
1000d184:	18cbd104 	addi	r3,r3,12100
1000d188:	2005883a 	mov	r2,r4
1000d18c:	19000017 	ldw	r4,0(r3)
1000d190:	280d883a 	mov	r6,r5
1000d194:	100b883a 	mov	r5,r2
1000d198:	000d02c1 	jmpi	1000d02c <__swbuf_r>

1000d19c <_wcrtomb_r>:
1000d19c:	defff604 	addi	sp,sp,-40
1000d1a0:	00840074 	movhi	r2,4097
1000d1a4:	dc800815 	stw	r18,32(sp)
1000d1a8:	dc400715 	stw	r17,28(sp)
1000d1ac:	dc000615 	stw	r16,24(sp)
1000d1b0:	108bd504 	addi	r2,r2,12116
1000d1b4:	dfc00915 	stw	ra,36(sp)
1000d1b8:	2021883a 	mov	r16,r4
1000d1bc:	3823883a 	mov	r17,r7
1000d1c0:	14800017 	ldw	r18,0(r2)
1000d1c4:	28001426 	beq	r5,zero,1000d218 <_wcrtomb_r+0x7c>
1000d1c8:	d9400415 	stw	r5,16(sp)
1000d1cc:	d9800515 	stw	r6,20(sp)
1000d1d0:	0008e000 	call	10008e00 <__locale_charset>
1000d1d4:	d9400417 	ldw	r5,16(sp)
1000d1d8:	d9800517 	ldw	r6,20(sp)
1000d1dc:	8009883a 	mov	r4,r16
1000d1e0:	dc400015 	stw	r17,0(sp)
1000d1e4:	100f883a 	mov	r7,r2
1000d1e8:	903ee83a 	callr	r18
1000d1ec:	00ffffc4 	movi	r3,-1
1000d1f0:	10c0031e 	bne	r2,r3,1000d200 <_wcrtomb_r+0x64>
1000d1f4:	88000015 	stw	zero,0(r17)
1000d1f8:	00c02284 	movi	r3,138
1000d1fc:	80c00015 	stw	r3,0(r16)
1000d200:	dfc00917 	ldw	ra,36(sp)
1000d204:	dc800817 	ldw	r18,32(sp)
1000d208:	dc400717 	ldw	r17,28(sp)
1000d20c:	dc000617 	ldw	r16,24(sp)
1000d210:	dec00a04 	addi	sp,sp,40
1000d214:	f800283a 	ret
1000d218:	0008e000 	call	10008e00 <__locale_charset>
1000d21c:	8009883a 	mov	r4,r16
1000d220:	dc400015 	stw	r17,0(sp)
1000d224:	d9400104 	addi	r5,sp,4
1000d228:	000d883a 	mov	r6,zero
1000d22c:	100f883a 	mov	r7,r2
1000d230:	903ee83a 	callr	r18
1000d234:	003fed06 	br	1000d1ec <__alt_data_end+0xf800d1ec>

1000d238 <wcrtomb>:
1000d238:	defff504 	addi	sp,sp,-44
1000d23c:	dc400515 	stw	r17,20(sp)
1000d240:	dc000415 	stw	r16,16(sp)
1000d244:	dfc00a15 	stw	ra,40(sp)
1000d248:	dd400915 	stw	r21,36(sp)
1000d24c:	dd000815 	stw	r20,32(sp)
1000d250:	dcc00715 	stw	r19,28(sp)
1000d254:	dc800615 	stw	r18,24(sp)
1000d258:	2021883a 	mov	r16,r4
1000d25c:	3023883a 	mov	r17,r6
1000d260:	20001d26 	beq	r4,zero,1000d2d8 <wcrtomb+0xa0>
1000d264:	04840074 	movhi	r18,4097
1000d268:	948bd104 	addi	r18,r18,12100
1000d26c:	00840074 	movhi	r2,4097
1000d270:	95400017 	ldw	r21,0(r18)
1000d274:	108bd504 	addi	r2,r2,12116
1000d278:	15000017 	ldw	r20,0(r2)
1000d27c:	2827883a 	mov	r19,r5
1000d280:	0008e000 	call	10008e00 <__locale_charset>
1000d284:	a809883a 	mov	r4,r21
1000d288:	dc400015 	stw	r17,0(sp)
1000d28c:	800b883a 	mov	r5,r16
1000d290:	980d883a 	mov	r6,r19
1000d294:	100f883a 	mov	r7,r2
1000d298:	a03ee83a 	callr	r20
1000d29c:	00ffffc4 	movi	r3,-1
1000d2a0:	10c0041e 	bne	r2,r3,1000d2b4 <wcrtomb+0x7c>
1000d2a4:	90c00017 	ldw	r3,0(r18)
1000d2a8:	01002284 	movi	r4,138
1000d2ac:	88000015 	stw	zero,0(r17)
1000d2b0:	19000015 	stw	r4,0(r3)
1000d2b4:	dfc00a17 	ldw	ra,40(sp)
1000d2b8:	dd400917 	ldw	r21,36(sp)
1000d2bc:	dd000817 	ldw	r20,32(sp)
1000d2c0:	dcc00717 	ldw	r19,28(sp)
1000d2c4:	dc800617 	ldw	r18,24(sp)
1000d2c8:	dc400517 	ldw	r17,20(sp)
1000d2cc:	dc000417 	ldw	r16,16(sp)
1000d2d0:	dec00b04 	addi	sp,sp,44
1000d2d4:	f800283a 	ret
1000d2d8:	04840074 	movhi	r18,4097
1000d2dc:	948bd104 	addi	r18,r18,12100
1000d2e0:	00840074 	movhi	r2,4097
1000d2e4:	94c00017 	ldw	r19,0(r18)
1000d2e8:	108bd504 	addi	r2,r2,12116
1000d2ec:	14000017 	ldw	r16,0(r2)
1000d2f0:	0008e000 	call	10008e00 <__locale_charset>
1000d2f4:	9809883a 	mov	r4,r19
1000d2f8:	dc400015 	stw	r17,0(sp)
1000d2fc:	d9400104 	addi	r5,sp,4
1000d300:	000d883a 	mov	r6,zero
1000d304:	100f883a 	mov	r7,r2
1000d308:	803ee83a 	callr	r16
1000d30c:	003fe306 	br	1000d29c <__alt_data_end+0xf800d29c>

1000d310 <__ascii_wctomb>:
1000d310:	28000526 	beq	r5,zero,1000d328 <__ascii_wctomb+0x18>
1000d314:	00803fc4 	movi	r2,255
1000d318:	11800536 	bltu	r2,r6,1000d330 <__ascii_wctomb+0x20>
1000d31c:	29800005 	stb	r6,0(r5)
1000d320:	00800044 	movi	r2,1
1000d324:	f800283a 	ret
1000d328:	0005883a 	mov	r2,zero
1000d32c:	f800283a 	ret
1000d330:	00802284 	movi	r2,138
1000d334:	20800015 	stw	r2,0(r4)
1000d338:	00bfffc4 	movi	r2,-1
1000d33c:	f800283a 	ret

1000d340 <_wctomb_r>:
1000d340:	00840074 	movhi	r2,4097
1000d344:	defff904 	addi	sp,sp,-28
1000d348:	108bd504 	addi	r2,r2,12116
1000d34c:	dfc00615 	stw	ra,24(sp)
1000d350:	dc400515 	stw	r17,20(sp)
1000d354:	dc000415 	stw	r16,16(sp)
1000d358:	3823883a 	mov	r17,r7
1000d35c:	14000017 	ldw	r16,0(r2)
1000d360:	d9000115 	stw	r4,4(sp)
1000d364:	d9400215 	stw	r5,8(sp)
1000d368:	d9800315 	stw	r6,12(sp)
1000d36c:	0008e000 	call	10008e00 <__locale_charset>
1000d370:	d9000117 	ldw	r4,4(sp)
1000d374:	d9400217 	ldw	r5,8(sp)
1000d378:	d9800317 	ldw	r6,12(sp)
1000d37c:	dc400015 	stw	r17,0(sp)
1000d380:	100f883a 	mov	r7,r2
1000d384:	803ee83a 	callr	r16
1000d388:	dfc00617 	ldw	ra,24(sp)
1000d38c:	dc400517 	ldw	r17,20(sp)
1000d390:	dc000417 	ldw	r16,16(sp)
1000d394:	dec00704 	addi	sp,sp,28
1000d398:	f800283a 	ret

1000d39c <__muldi3>:
1000d39c:	defff604 	addi	sp,sp,-40
1000d3a0:	dd800615 	stw	r22,24(sp)
1000d3a4:	dd400515 	stw	r21,20(sp)
1000d3a8:	25bfffcc 	andi	r22,r4,65535
1000d3ac:	357fffcc 	andi	r21,r6,65535
1000d3b0:	dc400115 	stw	r17,4(sp)
1000d3b4:	2022d43a 	srli	r17,r4,16
1000d3b8:	dcc00315 	stw	r19,12(sp)
1000d3bc:	dc800215 	stw	r18,8(sp)
1000d3c0:	2027883a 	mov	r19,r4
1000d3c4:	2825883a 	mov	r18,r5
1000d3c8:	a809883a 	mov	r4,r21
1000d3cc:	b00b883a 	mov	r5,r22
1000d3d0:	dfc00915 	stw	ra,36(sp)
1000d3d4:	df000815 	stw	fp,32(sp)
1000d3d8:	ddc00715 	stw	r23,28(sp)
1000d3dc:	3839883a 	mov	fp,r7
1000d3e0:	302ed43a 	srli	r23,r6,16
1000d3e4:	dd000415 	stw	r20,16(sp)
1000d3e8:	dc000015 	stw	r16,0(sp)
1000d3ec:	3029883a 	mov	r20,r6
1000d3f0:	0002c180 	call	10002c18 <__mulsi3>
1000d3f4:	a809883a 	mov	r4,r21
1000d3f8:	880b883a 	mov	r5,r17
1000d3fc:	1021883a 	mov	r16,r2
1000d400:	0002c180 	call	10002c18 <__mulsi3>
1000d404:	880b883a 	mov	r5,r17
1000d408:	b809883a 	mov	r4,r23
1000d40c:	102b883a 	mov	r21,r2
1000d410:	0002c180 	call	10002c18 <__mulsi3>
1000d414:	b809883a 	mov	r4,r23
1000d418:	b00b883a 	mov	r5,r22
1000d41c:	1023883a 	mov	r17,r2
1000d420:	0002c180 	call	10002c18 <__mulsi3>
1000d424:	8012d43a 	srli	r9,r16,16
1000d428:	a885883a 	add	r2,r21,r2
1000d42c:	1251883a 	add	r8,r2,r9
1000d430:	4540022e 	bgeu	r8,r21,1000d43c <__muldi3+0xa0>
1000d434:	00800074 	movhi	r2,1
1000d438:	88a3883a 	add	r17,r17,r2
1000d43c:	4006d43a 	srli	r3,r8,16
1000d440:	4010943a 	slli	r8,r8,16
1000d444:	9809883a 	mov	r4,r19
1000d448:	e00b883a 	mov	r5,fp
1000d44c:	843fffcc 	andi	r16,r16,65535
1000d450:	88e3883a 	add	r17,r17,r3
1000d454:	4421883a 	add	r16,r8,r16
1000d458:	0002c180 	call	10002c18 <__mulsi3>
1000d45c:	a009883a 	mov	r4,r20
1000d460:	900b883a 	mov	r5,r18
1000d464:	1027883a 	mov	r19,r2
1000d468:	0002c180 	call	10002c18 <__mulsi3>
1000d46c:	9885883a 	add	r2,r19,r2
1000d470:	1447883a 	add	r3,r2,r17
1000d474:	8005883a 	mov	r2,r16
1000d478:	dfc00917 	ldw	ra,36(sp)
1000d47c:	df000817 	ldw	fp,32(sp)
1000d480:	ddc00717 	ldw	r23,28(sp)
1000d484:	dd800617 	ldw	r22,24(sp)
1000d488:	dd400517 	ldw	r21,20(sp)
1000d48c:	dd000417 	ldw	r20,16(sp)
1000d490:	dcc00317 	ldw	r19,12(sp)
1000d494:	dc800217 	ldw	r18,8(sp)
1000d498:	dc400117 	ldw	r17,4(sp)
1000d49c:	dc000017 	ldw	r16,0(sp)
1000d4a0:	dec00a04 	addi	sp,sp,40
1000d4a4:	f800283a 	ret

1000d4a8 <__divdf3>:
1000d4a8:	defff004 	addi	sp,sp,-64
1000d4ac:	dc800815 	stw	r18,32(sp)
1000d4b0:	2824d53a 	srli	r18,r5,20
1000d4b4:	dd800c15 	stw	r22,48(sp)
1000d4b8:	282cd7fa 	srli	r22,r5,31
1000d4bc:	dc000615 	stw	r16,24(sp)
1000d4c0:	04000434 	movhi	r16,16
1000d4c4:	df000e15 	stw	fp,56(sp)
1000d4c8:	dd000a15 	stw	r20,40(sp)
1000d4cc:	dcc00915 	stw	r19,36(sp)
1000d4d0:	dc400715 	stw	r17,28(sp)
1000d4d4:	843fffc4 	addi	r16,r16,-1
1000d4d8:	dfc00f15 	stw	ra,60(sp)
1000d4dc:	ddc00d15 	stw	r23,52(sp)
1000d4e0:	dd400b15 	stw	r21,44(sp)
1000d4e4:	9481ffcc 	andi	r18,r18,2047
1000d4e8:	2029883a 	mov	r20,r4
1000d4ec:	2027883a 	mov	r19,r4
1000d4f0:	2c22703a 	and	r17,r5,r16
1000d4f4:	b7003fcc 	andi	fp,r22,255
1000d4f8:	90005e26 	beq	r18,zero,1000d674 <__divdf3+0x1cc>
1000d4fc:	0081ffc4 	movi	r2,2047
1000d500:	90803526 	beq	r18,r2,1000d5d8 <__divdf3+0x130>
1000d504:	8c000434 	orhi	r16,r17,16
1000d508:	2004d77a 	srli	r2,r4,29
1000d50c:	802090fa 	slli	r16,r16,3
1000d510:	202690fa 	slli	r19,r4,3
1000d514:	94bf0044 	addi	r18,r18,-1023
1000d518:	80a2b03a 	or	r17,r16,r2
1000d51c:	0029883a 	mov	r20,zero
1000d520:	0011883a 	mov	r8,zero
1000d524:	380ad53a 	srli	r5,r7,20
1000d528:	382ed7fa 	srli	r23,r7,31
1000d52c:	04000434 	movhi	r16,16
1000d530:	843fffc4 	addi	r16,r16,-1
1000d534:	2941ffcc 	andi	r5,r5,2047
1000d538:	302b883a 	mov	r21,r6
1000d53c:	3c20703a 	and	r16,r7,r16
1000d540:	ba403fcc 	andi	r9,r23,255
1000d544:	28006726 	beq	r5,zero,1000d6e4 <__divdf3+0x23c>
1000d548:	0081ffc4 	movi	r2,2047
1000d54c:	28805f26 	beq	r5,r2,1000d6cc <__divdf3+0x224>
1000d550:	84000434 	orhi	r16,r16,16
1000d554:	3004d77a 	srli	r2,r6,29
1000d558:	802090fa 	slli	r16,r16,3
1000d55c:	302a90fa 	slli	r21,r6,3
1000d560:	297f0044 	addi	r5,r5,-1023
1000d564:	80a0b03a 	or	r16,r16,r2
1000d568:	000f883a 	mov	r7,zero
1000d56c:	3d06b03a 	or	r3,r7,r20
1000d570:	180690ba 	slli	r3,r3,2
1000d574:	00840074 	movhi	r2,4097
1000d578:	10b56604 	addi	r2,r2,-10856
1000d57c:	1885883a 	add	r2,r3,r2
1000d580:	10800017 	ldw	r2,0(r2)
1000d584:	b5c8f03a 	xor	r4,r22,r23
1000d588:	200d883a 	mov	r6,r4
1000d58c:	25003fcc 	andi	r20,r4,255
1000d590:	9165c83a 	sub	r18,r18,r5
1000d594:	1000683a 	jmp	r2
1000d598:	1000d7e0 	cmpeqi	zero,r2,863
1000d59c:	1000d610 	cmplti	zero,r2,856
1000d5a0:	1000d7a4 	muli	zero,r2,862
1000d5a4:	1000d5f4 	orhi	zero,r2,855
1000d5a8:	1000d7a4 	muli	zero,r2,862
1000d5ac:	1000d778 	rdprs	zero,r2,861
1000d5b0:	1000d7a4 	muli	zero,r2,862
1000d5b4:	1000d5f4 	orhi	zero,r2,855
1000d5b8:	1000d610 	cmplti	zero,r2,856
1000d5bc:	1000d610 	cmplti	zero,r2,856
1000d5c0:	1000d778 	rdprs	zero,r2,861
1000d5c4:	1000d5f4 	orhi	zero,r2,855
1000d5c8:	1000d604 	addi	zero,r2,856
1000d5cc:	1000d604 	addi	zero,r2,856
1000d5d0:	1000d604 	addi	zero,r2,856
1000d5d4:	1000d7b4 	orhi	zero,r2,862
1000d5d8:	8904b03a 	or	r2,r17,r4
1000d5dc:	1000631e 	bne	r2,zero,1000d76c <__divdf3+0x2c4>
1000d5e0:	05000204 	movi	r20,8
1000d5e4:	0023883a 	mov	r17,zero
1000d5e8:	0027883a 	mov	r19,zero
1000d5ec:	02000084 	movi	r8,2
1000d5f0:	003fcc06 	br	1000d524 <__alt_data_end+0xf800d524>
1000d5f4:	8023883a 	mov	r17,r16
1000d5f8:	a827883a 	mov	r19,r21
1000d5fc:	4839883a 	mov	fp,r9
1000d600:	3811883a 	mov	r8,r7
1000d604:	00800084 	movi	r2,2
1000d608:	4081531e 	bne	r8,r2,1000db58 <__divdf3+0x6b0>
1000d60c:	e029883a 	mov	r20,fp
1000d610:	a180004c 	andi	r6,r20,1
1000d614:	0201ffc4 	movi	r8,2047
1000d618:	000b883a 	mov	r5,zero
1000d61c:	0027883a 	mov	r19,zero
1000d620:	4010953a 	slli	r8,r8,20
1000d624:	30c03fcc 	andi	r3,r6,255
1000d628:	04000434 	movhi	r16,16
1000d62c:	180697fa 	slli	r3,r3,31
1000d630:	843fffc4 	addi	r16,r16,-1
1000d634:	2c20703a 	and	r16,r5,r16
1000d638:	8220b03a 	or	r16,r16,r8
1000d63c:	80c6b03a 	or	r3,r16,r3
1000d640:	9805883a 	mov	r2,r19
1000d644:	dfc00f17 	ldw	ra,60(sp)
1000d648:	df000e17 	ldw	fp,56(sp)
1000d64c:	ddc00d17 	ldw	r23,52(sp)
1000d650:	dd800c17 	ldw	r22,48(sp)
1000d654:	dd400b17 	ldw	r21,44(sp)
1000d658:	dd000a17 	ldw	r20,40(sp)
1000d65c:	dcc00917 	ldw	r19,36(sp)
1000d660:	dc800817 	ldw	r18,32(sp)
1000d664:	dc400717 	ldw	r17,28(sp)
1000d668:	dc000617 	ldw	r16,24(sp)
1000d66c:	dec01004 	addi	sp,sp,64
1000d670:	f800283a 	ret
1000d674:	8904b03a 	or	r2,r17,r4
1000d678:	10003726 	beq	r2,zero,1000d758 <__divdf3+0x2b0>
1000d67c:	88014d26 	beq	r17,zero,1000dbb4 <__divdf3+0x70c>
1000d680:	8809883a 	mov	r4,r17
1000d684:	d9800215 	stw	r6,8(sp)
1000d688:	d9c00515 	stw	r7,20(sp)
1000d68c:	0003f040 	call	10003f04 <__clzsi2>
1000d690:	d9800217 	ldw	r6,8(sp)
1000d694:	d9c00517 	ldw	r7,20(sp)
1000d698:	1007883a 	mov	r3,r2
1000d69c:	01000a04 	movi	r4,40
1000d6a0:	1cfffe04 	addi	r19,r3,-8
1000d6a4:	20c9c83a 	sub	r4,r4,r3
1000d6a8:	8cca983a 	sll	r5,r17,r19
1000d6ac:	a108d83a 	srl	r4,r20,r4
1000d6b0:	a4e6983a 	sll	r19,r20,r19
1000d6b4:	2162b03a 	or	r17,r4,r5
1000d6b8:	04bf0344 	movi	r18,-1011
1000d6bc:	90e5c83a 	sub	r18,r18,r3
1000d6c0:	0029883a 	mov	r20,zero
1000d6c4:	0011883a 	mov	r8,zero
1000d6c8:	003f9606 	br	1000d524 <__alt_data_end+0xf800d524>
1000d6cc:	8184b03a 	or	r2,r16,r6
1000d6d0:	10001f1e 	bne	r2,zero,1000d750 <__divdf3+0x2a8>
1000d6d4:	0021883a 	mov	r16,zero
1000d6d8:	002b883a 	mov	r21,zero
1000d6dc:	01c00084 	movi	r7,2
1000d6e0:	003fa206 	br	1000d56c <__alt_data_end+0xf800d56c>
1000d6e4:	8184b03a 	or	r2,r16,r6
1000d6e8:	10001526 	beq	r2,zero,1000d740 <__divdf3+0x298>
1000d6ec:	80013d26 	beq	r16,zero,1000dbe4 <__divdf3+0x73c>
1000d6f0:	8009883a 	mov	r4,r16
1000d6f4:	d9800215 	stw	r6,8(sp)
1000d6f8:	da000315 	stw	r8,12(sp)
1000d6fc:	da400415 	stw	r9,16(sp)
1000d700:	0003f040 	call	10003f04 <__clzsi2>
1000d704:	d9800217 	ldw	r6,8(sp)
1000d708:	da000317 	ldw	r8,12(sp)
1000d70c:	da400417 	ldw	r9,16(sp)
1000d710:	1007883a 	mov	r3,r2
1000d714:	01000a04 	movi	r4,40
1000d718:	1d7ffe04 	addi	r21,r3,-8
1000d71c:	20c9c83a 	sub	r4,r4,r3
1000d720:	8560983a 	sll	r16,r16,r21
1000d724:	3108d83a 	srl	r4,r6,r4
1000d728:	356a983a 	sll	r21,r6,r21
1000d72c:	2420b03a 	or	r16,r4,r16
1000d730:	017f0344 	movi	r5,-1011
1000d734:	28cbc83a 	sub	r5,r5,r3
1000d738:	000f883a 	mov	r7,zero
1000d73c:	003f8b06 	br	1000d56c <__alt_data_end+0xf800d56c>
1000d740:	0021883a 	mov	r16,zero
1000d744:	002b883a 	mov	r21,zero
1000d748:	01c00044 	movi	r7,1
1000d74c:	003f8706 	br	1000d56c <__alt_data_end+0xf800d56c>
1000d750:	01c000c4 	movi	r7,3
1000d754:	003f8506 	br	1000d56c <__alt_data_end+0xf800d56c>
1000d758:	05000104 	movi	r20,4
1000d75c:	0023883a 	mov	r17,zero
1000d760:	0027883a 	mov	r19,zero
1000d764:	02000044 	movi	r8,1
1000d768:	003f6e06 	br	1000d524 <__alt_data_end+0xf800d524>
1000d76c:	05000304 	movi	r20,12
1000d770:	020000c4 	movi	r8,3
1000d774:	003f6b06 	br	1000d524 <__alt_data_end+0xf800d524>
1000d778:	01400434 	movhi	r5,16
1000d77c:	000d883a 	mov	r6,zero
1000d780:	297fffc4 	addi	r5,r5,-1
1000d784:	04ffffc4 	movi	r19,-1
1000d788:	0201ffc4 	movi	r8,2047
1000d78c:	003fa406 	br	1000d620 <__alt_data_end+0xf800d620>
1000d790:	043f0084 	movi	r16,-1022
1000d794:	84a1c83a 	sub	r16,r16,r18
1000d798:	00800e04 	movi	r2,56
1000d79c:	14014d0e 	bge	r2,r16,1000dcd4 <__divdf3+0x82c>
1000d7a0:	a180004c 	andi	r6,r20,1
1000d7a4:	0011883a 	mov	r8,zero
1000d7a8:	000b883a 	mov	r5,zero
1000d7ac:	0027883a 	mov	r19,zero
1000d7b0:	003f9b06 	br	1000d620 <__alt_data_end+0xf800d620>
1000d7b4:	8880022c 	andhi	r2,r17,8
1000d7b8:	1000f026 	beq	r2,zero,1000db7c <__divdf3+0x6d4>
1000d7bc:	8080022c 	andhi	r2,r16,8
1000d7c0:	1000ee1e 	bne	r2,zero,1000db7c <__divdf3+0x6d4>
1000d7c4:	00800434 	movhi	r2,16
1000d7c8:	81400234 	orhi	r5,r16,8
1000d7cc:	10bfffc4 	addi	r2,r2,-1
1000d7d0:	b80d883a 	mov	r6,r23
1000d7d4:	288a703a 	and	r5,r5,r2
1000d7d8:	a827883a 	mov	r19,r21
1000d7dc:	003fea06 	br	1000d788 <__alt_data_end+0xf800d788>
1000d7e0:	84411c36 	bltu	r16,r17,1000dc54 <__divdf3+0x7ac>
1000d7e4:	8c011a26 	beq	r17,r16,1000dc50 <__divdf3+0x7a8>
1000d7e8:	94bfffc4 	addi	r18,r18,-1
1000d7ec:	dcc00015 	stw	r19,0(sp)
1000d7f0:	8811883a 	mov	r8,r17
1000d7f4:	002d883a 	mov	r22,zero
1000d7f8:	a80cd63a 	srli	r6,r21,24
1000d7fc:	8020923a 	slli	r16,r16,8
1000d800:	a82a923a 	slli	r21,r21,8
1000d804:	4009883a 	mov	r4,r8
1000d808:	342eb03a 	or	r23,r6,r16
1000d80c:	dd400115 	stw	r21,4(sp)
1000d810:	b82ad43a 	srli	r21,r23,16
1000d814:	da000315 	stw	r8,12(sp)
1000d818:	bcffffcc 	andi	r19,r23,65535
1000d81c:	a80b883a 	mov	r5,r21
1000d820:	0002c080 	call	10002c08 <__udivsi3>
1000d824:	1009883a 	mov	r4,r2
1000d828:	980b883a 	mov	r5,r19
1000d82c:	1023883a 	mov	r17,r2
1000d830:	0002c180 	call	10002c18 <__mulsi3>
1000d834:	da000317 	ldw	r8,12(sp)
1000d838:	a80b883a 	mov	r5,r21
1000d83c:	1039883a 	mov	fp,r2
1000d840:	4009883a 	mov	r4,r8
1000d844:	0002c100 	call	10002c10 <__umodsi3>
1000d848:	d8c00017 	ldw	r3,0(sp)
1000d84c:	1004943a 	slli	r2,r2,16
1000d850:	1810d43a 	srli	r8,r3,16
1000d854:	120eb03a 	or	r7,r2,r8
1000d858:	3f00062e 	bgeu	r7,fp,1000d874 <__divdf3+0x3cc>
1000d85c:	3dcf883a 	add	r7,r7,r23
1000d860:	88bfffc4 	addi	r2,r17,-1
1000d864:	3dc10a36 	bltu	r7,r23,1000dc90 <__divdf3+0x7e8>
1000d868:	3f01092e 	bgeu	r7,fp,1000dc90 <__divdf3+0x7e8>
1000d86c:	8c7fff84 	addi	r17,r17,-2
1000d870:	3dcf883a 	add	r7,r7,r23
1000d874:	3f39c83a 	sub	fp,r7,fp
1000d878:	e009883a 	mov	r4,fp
1000d87c:	a80b883a 	mov	r5,r21
1000d880:	0002c080 	call	10002c08 <__udivsi3>
1000d884:	1009883a 	mov	r4,r2
1000d888:	980b883a 	mov	r5,r19
1000d88c:	1021883a 	mov	r16,r2
1000d890:	0002c180 	call	10002c18 <__mulsi3>
1000d894:	e009883a 	mov	r4,fp
1000d898:	a80b883a 	mov	r5,r21
1000d89c:	d8800315 	stw	r2,12(sp)
1000d8a0:	0002c100 	call	10002c10 <__umodsi3>
1000d8a4:	d9000017 	ldw	r4,0(sp)
1000d8a8:	1004943a 	slli	r2,r2,16
1000d8ac:	da000317 	ldw	r8,12(sp)
1000d8b0:	20ffffcc 	andi	r3,r4,65535
1000d8b4:	10ceb03a 	or	r7,r2,r3
1000d8b8:	3a00062e 	bgeu	r7,r8,1000d8d4 <__divdf3+0x42c>
1000d8bc:	3dcf883a 	add	r7,r7,r23
1000d8c0:	80bfffc4 	addi	r2,r16,-1
1000d8c4:	3dc0f036 	bltu	r7,r23,1000dc88 <__divdf3+0x7e0>
1000d8c8:	3a00ef2e 	bgeu	r7,r8,1000dc88 <__divdf3+0x7e0>
1000d8cc:	843fff84 	addi	r16,r16,-2
1000d8d0:	3dcf883a 	add	r7,r7,r23
1000d8d4:	d8c00117 	ldw	r3,4(sp)
1000d8d8:	8822943a 	slli	r17,r17,16
1000d8dc:	3a0fc83a 	sub	r7,r7,r8
1000d8e0:	1806d43a 	srli	r3,r3,16
1000d8e4:	8462b03a 	or	r17,r16,r17
1000d8e8:	8affffcc 	andi	r11,r17,65535
1000d8ec:	d8c00015 	stw	r3,0(sp)
1000d8f0:	d8c00117 	ldw	r3,4(sp)
1000d8f4:	8820d43a 	srli	r16,r17,16
1000d8f8:	5809883a 	mov	r4,r11
1000d8fc:	1f3fffcc 	andi	fp,r3,65535
1000d900:	e00b883a 	mov	r5,fp
1000d904:	d9c00515 	stw	r7,20(sp)
1000d908:	dac00215 	stw	r11,8(sp)
1000d90c:	0002c180 	call	10002c18 <__mulsi3>
1000d910:	8009883a 	mov	r4,r16
1000d914:	e00b883a 	mov	r5,fp
1000d918:	d8800415 	stw	r2,16(sp)
1000d91c:	0002c180 	call	10002c18 <__mulsi3>
1000d920:	d9400017 	ldw	r5,0(sp)
1000d924:	8009883a 	mov	r4,r16
1000d928:	d8800315 	stw	r2,12(sp)
1000d92c:	0002c180 	call	10002c18 <__mulsi3>
1000d930:	dac00217 	ldw	r11,8(sp)
1000d934:	d9400017 	ldw	r5,0(sp)
1000d938:	d8800215 	stw	r2,8(sp)
1000d93c:	5809883a 	mov	r4,r11
1000d940:	0002c180 	call	10002c18 <__mulsi3>
1000d944:	da400417 	ldw	r9,16(sp)
1000d948:	da800317 	ldw	r10,12(sp)
1000d94c:	d9c00517 	ldw	r7,20(sp)
1000d950:	480ad43a 	srli	r5,r9,16
1000d954:	5085883a 	add	r2,r10,r2
1000d958:	db000217 	ldw	r12,8(sp)
1000d95c:	1151883a 	add	r8,r2,r5
1000d960:	4280022e 	bgeu	r8,r10,1000d96c <__divdf3+0x4c4>
1000d964:	00800074 	movhi	r2,1
1000d968:	6099883a 	add	r12,r12,r2
1000d96c:	400ad43a 	srli	r5,r8,16
1000d970:	4010943a 	slli	r8,r8,16
1000d974:	4c3fffcc 	andi	r16,r9,65535
1000d978:	6149883a 	add	r4,r12,r5
1000d97c:	4411883a 	add	r8,r8,r16
1000d980:	3900a736 	bltu	r7,r4,1000dc20 <__divdf3+0x778>
1000d984:	3900c426 	beq	r7,r4,1000dc98 <__divdf3+0x7f0>
1000d988:	3909c83a 	sub	r4,r7,r4
1000d98c:	b221c83a 	sub	r16,r22,r8
1000d990:	b42d803a 	cmpltu	r22,r22,r16
1000d994:	25adc83a 	sub	r22,r4,r22
1000d998:	b5c0c626 	beq	r22,r23,1000dcb4 <__divdf3+0x80c>
1000d99c:	b009883a 	mov	r4,r22
1000d9a0:	a80b883a 	mov	r5,r21
1000d9a4:	0002c080 	call	10002c08 <__udivsi3>
1000d9a8:	1009883a 	mov	r4,r2
1000d9ac:	980b883a 	mov	r5,r19
1000d9b0:	d8800315 	stw	r2,12(sp)
1000d9b4:	0002c180 	call	10002c18 <__mulsi3>
1000d9b8:	a80b883a 	mov	r5,r21
1000d9bc:	b009883a 	mov	r4,r22
1000d9c0:	d8800415 	stw	r2,16(sp)
1000d9c4:	0002c100 	call	10002c10 <__umodsi3>
1000d9c8:	1004943a 	slli	r2,r2,16
1000d9cc:	800ed43a 	srli	r7,r16,16
1000d9d0:	da400417 	ldw	r9,16(sp)
1000d9d4:	da000317 	ldw	r8,12(sp)
1000d9d8:	11cab03a 	or	r5,r2,r7
1000d9dc:	2a40062e 	bgeu	r5,r9,1000d9f8 <__divdf3+0x550>
1000d9e0:	2dcb883a 	add	r5,r5,r23
1000d9e4:	40bfffc4 	addi	r2,r8,-1
1000d9e8:	2dc0b436 	bltu	r5,r23,1000dcbc <__divdf3+0x814>
1000d9ec:	2a40b32e 	bgeu	r5,r9,1000dcbc <__divdf3+0x814>
1000d9f0:	423fff84 	addi	r8,r8,-2
1000d9f4:	2dcb883a 	add	r5,r5,r23
1000d9f8:	2a6dc83a 	sub	r22,r5,r9
1000d9fc:	b009883a 	mov	r4,r22
1000da00:	a80b883a 	mov	r5,r21
1000da04:	da000315 	stw	r8,12(sp)
1000da08:	0002c080 	call	10002c08 <__udivsi3>
1000da0c:	980b883a 	mov	r5,r19
1000da10:	1009883a 	mov	r4,r2
1000da14:	d8800415 	stw	r2,16(sp)
1000da18:	0002c180 	call	10002c18 <__mulsi3>
1000da1c:	b009883a 	mov	r4,r22
1000da20:	a80b883a 	mov	r5,r21
1000da24:	1027883a 	mov	r19,r2
1000da28:	0002c100 	call	10002c10 <__umodsi3>
1000da2c:	1004943a 	slli	r2,r2,16
1000da30:	843fffcc 	andi	r16,r16,65535
1000da34:	da000317 	ldw	r8,12(sp)
1000da38:	140eb03a 	or	r7,r2,r16
1000da3c:	da400417 	ldw	r9,16(sp)
1000da40:	3cc0062e 	bgeu	r7,r19,1000da5c <__divdf3+0x5b4>
1000da44:	3dcf883a 	add	r7,r7,r23
1000da48:	48bfffc4 	addi	r2,r9,-1
1000da4c:	3dc09d36 	bltu	r7,r23,1000dcc4 <__divdf3+0x81c>
1000da50:	3cc09c2e 	bgeu	r7,r19,1000dcc4 <__divdf3+0x81c>
1000da54:	4a7fff84 	addi	r9,r9,-2
1000da58:	3dcf883a 	add	r7,r7,r23
1000da5c:	4010943a 	slli	r8,r8,16
1000da60:	3cebc83a 	sub	r21,r7,r19
1000da64:	e00b883a 	mov	r5,fp
1000da68:	4a26b03a 	or	r19,r9,r8
1000da6c:	99ffffcc 	andi	r7,r19,65535
1000da70:	9820d43a 	srli	r16,r19,16
1000da74:	3809883a 	mov	r4,r7
1000da78:	d9c00515 	stw	r7,20(sp)
1000da7c:	0002c180 	call	10002c18 <__mulsi3>
1000da80:	8009883a 	mov	r4,r16
1000da84:	e00b883a 	mov	r5,fp
1000da88:	102d883a 	mov	r22,r2
1000da8c:	0002c180 	call	10002c18 <__mulsi3>
1000da90:	d9400017 	ldw	r5,0(sp)
1000da94:	8009883a 	mov	r4,r16
1000da98:	1039883a 	mov	fp,r2
1000da9c:	0002c180 	call	10002c18 <__mulsi3>
1000daa0:	d9c00517 	ldw	r7,20(sp)
1000daa4:	d9400017 	ldw	r5,0(sp)
1000daa8:	1021883a 	mov	r16,r2
1000daac:	3809883a 	mov	r4,r7
1000dab0:	0002c180 	call	10002c18 <__mulsi3>
1000dab4:	b008d43a 	srli	r4,r22,16
1000dab8:	e085883a 	add	r2,fp,r2
1000dabc:	1109883a 	add	r4,r2,r4
1000dac0:	2700022e 	bgeu	r4,fp,1000dacc <__divdf3+0x624>
1000dac4:	00800074 	movhi	r2,1
1000dac8:	80a1883a 	add	r16,r16,r2
1000dacc:	200ad43a 	srli	r5,r4,16
1000dad0:	2008943a 	slli	r4,r4,16
1000dad4:	b5bfffcc 	andi	r22,r22,65535
1000dad8:	8145883a 	add	r2,r16,r5
1000dadc:	2589883a 	add	r4,r4,r22
1000dae0:	a8802c36 	bltu	r21,r2,1000db94 <__divdf3+0x6ec>
1000dae4:	a880a426 	beq	r21,r2,1000dd78 <__divdf3+0x8d0>
1000dae8:	9cc00054 	ori	r19,r19,1
1000daec:	9200ffc4 	addi	r8,r18,1023
1000daf0:	023f270e 	bge	zero,r8,1000d790 <__alt_data_end+0xf800d790>
1000daf4:	988001cc 	andi	r2,r19,7
1000daf8:	10000726 	beq	r2,zero,1000db18 <__divdf3+0x670>
1000dafc:	990003cc 	andi	r4,r19,15
1000db00:	00800104 	movi	r2,4
1000db04:	20800426 	beq	r4,r2,1000db18 <__divdf3+0x670>
1000db08:	9885883a 	add	r2,r19,r2
1000db0c:	14e7803a 	cmpltu	r19,r2,r19
1000db10:	8ce3883a 	add	r17,r17,r19
1000db14:	1027883a 	mov	r19,r2
1000db18:	8880402c 	andhi	r2,r17,256
1000db1c:	10000426 	beq	r2,zero,1000db30 <__divdf3+0x688>
1000db20:	00bfc034 	movhi	r2,65280
1000db24:	10bfffc4 	addi	r2,r2,-1
1000db28:	92010004 	addi	r8,r18,1024
1000db2c:	88a2703a 	and	r17,r17,r2
1000db30:	0081ff84 	movi	r2,2046
1000db34:	123eb616 	blt	r2,r8,1000d610 <__alt_data_end+0xf800d610>
1000db38:	9826d0fa 	srli	r19,r19,3
1000db3c:	8804977a 	slli	r2,r17,29
1000db40:	8820927a 	slli	r16,r17,9
1000db44:	4201ffcc 	andi	r8,r8,2047
1000db48:	14e6b03a 	or	r19,r2,r19
1000db4c:	800ad33a 	srli	r5,r16,12
1000db50:	a180004c 	andi	r6,r20,1
1000db54:	003eb206 	br	1000d620 <__alt_data_end+0xf800d620>
1000db58:	008000c4 	movi	r2,3
1000db5c:	4080ac26 	beq	r8,r2,1000de10 <__divdf3+0x968>
1000db60:	00800044 	movi	r2,1
1000db64:	4080591e 	bne	r8,r2,1000dccc <__divdf3+0x824>
1000db68:	e00d883a 	mov	r6,fp
1000db6c:	0011883a 	mov	r8,zero
1000db70:	000b883a 	mov	r5,zero
1000db74:	0027883a 	mov	r19,zero
1000db78:	003ea906 	br	1000d620 <__alt_data_end+0xf800d620>
1000db7c:	00800434 	movhi	r2,16
1000db80:	89400234 	orhi	r5,r17,8
1000db84:	10bfffc4 	addi	r2,r2,-1
1000db88:	b00d883a 	mov	r6,r22
1000db8c:	288a703a 	and	r5,r5,r2
1000db90:	003efd06 	br	1000d788 <__alt_data_end+0xf800d788>
1000db94:	adcf883a 	add	r7,r21,r23
1000db98:	997fffc4 	addi	r5,r19,-1
1000db9c:	3dc0412e 	bgeu	r7,r23,1000dca4 <__divdf3+0x7fc>
1000dba0:	2827883a 	mov	r19,r5
1000dba4:	38bfd01e 	bne	r7,r2,1000dae8 <__alt_data_end+0xf800dae8>
1000dba8:	d8c00117 	ldw	r3,4(sp)
1000dbac:	193fce1e 	bne	r3,r4,1000dae8 <__alt_data_end+0xf800dae8>
1000dbb0:	003fce06 	br	1000daec <__alt_data_end+0xf800daec>
1000dbb4:	d9800215 	stw	r6,8(sp)
1000dbb8:	d9c00515 	stw	r7,20(sp)
1000dbbc:	0003f040 	call	10003f04 <__clzsi2>
1000dbc0:	10c00804 	addi	r3,r2,32
1000dbc4:	010009c4 	movi	r4,39
1000dbc8:	d9800217 	ldw	r6,8(sp)
1000dbcc:	d9c00517 	ldw	r7,20(sp)
1000dbd0:	20feb20e 	bge	r4,r3,1000d69c <__alt_data_end+0xf800d69c>
1000dbd4:	117ffe04 	addi	r5,r2,-8
1000dbd8:	a162983a 	sll	r17,r20,r5
1000dbdc:	0027883a 	mov	r19,zero
1000dbe0:	003eb506 	br	1000d6b8 <__alt_data_end+0xf800d6b8>
1000dbe4:	3009883a 	mov	r4,r6
1000dbe8:	d9800215 	stw	r6,8(sp)
1000dbec:	da000315 	stw	r8,12(sp)
1000dbf0:	da400415 	stw	r9,16(sp)
1000dbf4:	0003f040 	call	10003f04 <__clzsi2>
1000dbf8:	10c00804 	addi	r3,r2,32
1000dbfc:	010009c4 	movi	r4,39
1000dc00:	d9800217 	ldw	r6,8(sp)
1000dc04:	da000317 	ldw	r8,12(sp)
1000dc08:	da400417 	ldw	r9,16(sp)
1000dc0c:	20fec10e 	bge	r4,r3,1000d714 <__alt_data_end+0xf800d714>
1000dc10:	10bffe04 	addi	r2,r2,-8
1000dc14:	a8a0983a 	sll	r16,r21,r2
1000dc18:	002b883a 	mov	r21,zero
1000dc1c:	003ec406 	br	1000d730 <__alt_data_end+0xf800d730>
1000dc20:	d8c00117 	ldw	r3,4(sp)
1000dc24:	b0ed883a 	add	r22,r22,r3
1000dc28:	b0c5803a 	cmpltu	r2,r22,r3
1000dc2c:	15c5883a 	add	r2,r2,r23
1000dc30:	11cf883a 	add	r7,r2,r7
1000dc34:	88bfffc4 	addi	r2,r17,-1
1000dc38:	b9c00d2e 	bgeu	r23,r7,1000dc70 <__divdf3+0x7c8>
1000dc3c:	39003f36 	bltu	r7,r4,1000dd3c <__divdf3+0x894>
1000dc40:	21c06a26 	beq	r4,r7,1000ddec <__divdf3+0x944>
1000dc44:	3909c83a 	sub	r4,r7,r4
1000dc48:	1023883a 	mov	r17,r2
1000dc4c:	003f4f06 	br	1000d98c <__alt_data_end+0xf800d98c>
1000dc50:	9d7ee536 	bltu	r19,r21,1000d7e8 <__alt_data_end+0xf800d7e8>
1000dc54:	982ed07a 	srli	r23,r19,1
1000dc58:	880497fa 	slli	r2,r17,31
1000dc5c:	8810d07a 	srli	r8,r17,1
1000dc60:	982c97fa 	slli	r22,r19,31
1000dc64:	b884b03a 	or	r2,r23,r2
1000dc68:	d8800015 	stw	r2,0(sp)
1000dc6c:	003ee206 	br	1000d7f8 <__alt_data_end+0xf800d7f8>
1000dc70:	3dfff41e 	bne	r7,r23,1000dc44 <__alt_data_end+0xf800dc44>
1000dc74:	d8c00117 	ldw	r3,4(sp)
1000dc78:	b0fff02e 	bgeu	r22,r3,1000dc3c <__alt_data_end+0xf800dc3c>
1000dc7c:	b909c83a 	sub	r4,r23,r4
1000dc80:	1023883a 	mov	r17,r2
1000dc84:	003f4106 	br	1000d98c <__alt_data_end+0xf800d98c>
1000dc88:	1021883a 	mov	r16,r2
1000dc8c:	003f1106 	br	1000d8d4 <__alt_data_end+0xf800d8d4>
1000dc90:	1023883a 	mov	r17,r2
1000dc94:	003ef706 	br	1000d874 <__alt_data_end+0xf800d874>
1000dc98:	b23fe136 	bltu	r22,r8,1000dc20 <__alt_data_end+0xf800dc20>
1000dc9c:	0009883a 	mov	r4,zero
1000dca0:	003f3a06 	br	1000d98c <__alt_data_end+0xf800d98c>
1000dca4:	38802c36 	bltu	r7,r2,1000dd58 <__divdf3+0x8b0>
1000dca8:	11c05326 	beq	r2,r7,1000ddf8 <__divdf3+0x950>
1000dcac:	2827883a 	mov	r19,r5
1000dcb0:	003f8d06 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000dcb4:	04ffffc4 	movi	r19,-1
1000dcb8:	003f8c06 	br	1000daec <__alt_data_end+0xf800daec>
1000dcbc:	1011883a 	mov	r8,r2
1000dcc0:	003f4d06 	br	1000d9f8 <__alt_data_end+0xf800d9f8>
1000dcc4:	1013883a 	mov	r9,r2
1000dcc8:	003f6406 	br	1000da5c <__alt_data_end+0xf800da5c>
1000dccc:	e029883a 	mov	r20,fp
1000dcd0:	003f8606 	br	1000daec <__alt_data_end+0xf800daec>
1000dcd4:	008007c4 	movi	r2,31
1000dcd8:	14002a16 	blt	r2,r16,1000dd84 <__divdf3+0x8dc>
1000dcdc:	91410784 	addi	r5,r18,1054
1000dce0:	9c0cd83a 	srl	r6,r19,r16
1000dce4:	8948983a 	sll	r4,r17,r5
1000dce8:	9944983a 	sll	r2,r19,r5
1000dcec:	8c20d83a 	srl	r16,r17,r16
1000dcf0:	3108b03a 	or	r4,r6,r4
1000dcf4:	1004c03a 	cmpne	r2,r2,zero
1000dcf8:	2084b03a 	or	r2,r4,r2
1000dcfc:	110001cc 	andi	r4,r2,7
1000dd00:	20000726 	beq	r4,zero,1000dd20 <__divdf3+0x878>
1000dd04:	114003cc 	andi	r5,r2,15
1000dd08:	01000104 	movi	r4,4
1000dd0c:	29000426 	beq	r5,r4,1000dd20 <__divdf3+0x878>
1000dd10:	11000104 	addi	r4,r2,4
1000dd14:	2085803a 	cmpltu	r2,r4,r2
1000dd18:	80a1883a 	add	r16,r16,r2
1000dd1c:	2005883a 	mov	r2,r4
1000dd20:	8100202c 	andhi	r4,r16,128
1000dd24:	20002d26 	beq	r4,zero,1000dddc <__divdf3+0x934>
1000dd28:	a180004c 	andi	r6,r20,1
1000dd2c:	02000044 	movi	r8,1
1000dd30:	000b883a 	mov	r5,zero
1000dd34:	0027883a 	mov	r19,zero
1000dd38:	003e3906 	br	1000d620 <__alt_data_end+0xf800d620>
1000dd3c:	d8c00117 	ldw	r3,4(sp)
1000dd40:	8c7fff84 	addi	r17,r17,-2
1000dd44:	b0ed883a 	add	r22,r22,r3
1000dd48:	b0c5803a 	cmpltu	r2,r22,r3
1000dd4c:	15c5883a 	add	r2,r2,r23
1000dd50:	11cf883a 	add	r7,r2,r7
1000dd54:	003f0c06 	br	1000d988 <__alt_data_end+0xf800d988>
1000dd58:	d8c00117 	ldw	r3,4(sp)
1000dd5c:	997fff84 	addi	r5,r19,-2
1000dd60:	18d1883a 	add	r8,r3,r3
1000dd64:	40c7803a 	cmpltu	r3,r8,r3
1000dd68:	1dcd883a 	add	r6,r3,r23
1000dd6c:	398f883a 	add	r7,r7,r6
1000dd70:	da000115 	stw	r8,4(sp)
1000dd74:	003f8a06 	br	1000dba0 <__alt_data_end+0xf800dba0>
1000dd78:	203f861e 	bne	r4,zero,1000db94 <__alt_data_end+0xf800db94>
1000dd7c:	d8000115 	stw	zero,4(sp)
1000dd80:	003f8906 	br	1000dba8 <__alt_data_end+0xf800dba8>
1000dd84:	00bef884 	movi	r2,-1054
1000dd88:	1485c83a 	sub	r2,r2,r18
1000dd8c:	01000804 	movi	r4,32
1000dd90:	8884d83a 	srl	r2,r17,r2
1000dd94:	81001c26 	beq	r16,r4,1000de08 <__divdf3+0x960>
1000dd98:	91010f84 	addi	r4,r18,1086
1000dd9c:	8908983a 	sll	r4,r17,r4
1000dda0:	24c8b03a 	or	r4,r4,r19
1000dda4:	2008c03a 	cmpne	r4,r4,zero
1000dda8:	2084b03a 	or	r2,r4,r2
1000ddac:	140001cc 	andi	r16,r2,7
1000ddb0:	8000061e 	bne	r16,zero,1000ddcc <__divdf3+0x924>
1000ddb4:	000b883a 	mov	r5,zero
1000ddb8:	1004d0fa 	srli	r2,r2,3
1000ddbc:	a180004c 	andi	r6,r20,1
1000ddc0:	0011883a 	mov	r8,zero
1000ddc4:	1426b03a 	or	r19,r2,r16
1000ddc8:	003e1506 	br	1000d620 <__alt_data_end+0xf800d620>
1000ddcc:	114003cc 	andi	r5,r2,15
1000ddd0:	01000104 	movi	r4,4
1000ddd4:	0021883a 	mov	r16,zero
1000ddd8:	293fcd1e 	bne	r5,r4,1000dd10 <__alt_data_end+0xf800dd10>
1000dddc:	800a927a 	slli	r5,r16,9
1000dde0:	8020977a 	slli	r16,r16,29
1000dde4:	280ad33a 	srli	r5,r5,12
1000dde8:	003ff306 	br	1000ddb8 <__alt_data_end+0xf800ddb8>
1000ddec:	b23fd336 	bltu	r22,r8,1000dd3c <__alt_data_end+0xf800dd3c>
1000ddf0:	1023883a 	mov	r17,r2
1000ddf4:	003fa906 	br	1000dc9c <__alt_data_end+0xf800dc9c>
1000ddf8:	d8c00117 	ldw	r3,4(sp)
1000ddfc:	193fd636 	bltu	r3,r4,1000dd58 <__alt_data_end+0xf800dd58>
1000de00:	2827883a 	mov	r19,r5
1000de04:	003f6806 	br	1000dba8 <__alt_data_end+0xf800dba8>
1000de08:	0009883a 	mov	r4,zero
1000de0c:	003fe406 	br	1000dda0 <__alt_data_end+0xf800dda0>
1000de10:	00800434 	movhi	r2,16
1000de14:	89400234 	orhi	r5,r17,8
1000de18:	10bfffc4 	addi	r2,r2,-1
1000de1c:	e00d883a 	mov	r6,fp
1000de20:	288a703a 	and	r5,r5,r2
1000de24:	003e5806 	br	1000d788 <__alt_data_end+0xf800d788>

1000de28 <__eqdf2>:
1000de28:	2804d53a 	srli	r2,r5,20
1000de2c:	3806d53a 	srli	r3,r7,20
1000de30:	02000434 	movhi	r8,16
1000de34:	423fffc4 	addi	r8,r8,-1
1000de38:	1081ffcc 	andi	r2,r2,2047
1000de3c:	0241ffc4 	movi	r9,2047
1000de40:	2a14703a 	and	r10,r5,r8
1000de44:	18c1ffcc 	andi	r3,r3,2047
1000de48:	3a10703a 	and	r8,r7,r8
1000de4c:	280ad7fa 	srli	r5,r5,31
1000de50:	380ed7fa 	srli	r7,r7,31
1000de54:	12400f26 	beq	r2,r9,1000de94 <__eqdf2+0x6c>
1000de58:	0241ffc4 	movi	r9,2047
1000de5c:	1a400326 	beq	r3,r9,1000de6c <__eqdf2+0x44>
1000de60:	10c00526 	beq	r2,r3,1000de78 <__eqdf2+0x50>
1000de64:	00800044 	movi	r2,1
1000de68:	f800283a 	ret
1000de6c:	4192b03a 	or	r9,r8,r6
1000de70:	483ffc1e 	bne	r9,zero,1000de64 <__alt_data_end+0xf800de64>
1000de74:	10fffb1e 	bne	r2,r3,1000de64 <__alt_data_end+0xf800de64>
1000de78:	523ffa1e 	bne	r10,r8,1000de64 <__alt_data_end+0xf800de64>
1000de7c:	21bff91e 	bne	r4,r6,1000de64 <__alt_data_end+0xf800de64>
1000de80:	29c00826 	beq	r5,r7,1000dea4 <__eqdf2+0x7c>
1000de84:	103ff71e 	bne	r2,zero,1000de64 <__alt_data_end+0xf800de64>
1000de88:	5104b03a 	or	r2,r10,r4
1000de8c:	1004c03a 	cmpne	r2,r2,zero
1000de90:	f800283a 	ret
1000de94:	5112b03a 	or	r9,r10,r4
1000de98:	483fef26 	beq	r9,zero,1000de58 <__alt_data_end+0xf800de58>
1000de9c:	00800044 	movi	r2,1
1000dea0:	f800283a 	ret
1000dea4:	0005883a 	mov	r2,zero
1000dea8:	f800283a 	ret

1000deac <__gedf2>:
1000deac:	2804d53a 	srli	r2,r5,20
1000deb0:	3806d53a 	srli	r3,r7,20
1000deb4:	02000434 	movhi	r8,16
1000deb8:	423fffc4 	addi	r8,r8,-1
1000debc:	0241ffc4 	movi	r9,2047
1000dec0:	1081ffcc 	andi	r2,r2,2047
1000dec4:	2a14703a 	and	r10,r5,r8
1000dec8:	1a46703a 	and	r3,r3,r9
1000decc:	3a10703a 	and	r8,r7,r8
1000ded0:	280ad7fa 	srli	r5,r5,31
1000ded4:	380ed7fa 	srli	r7,r7,31
1000ded8:	12400b26 	beq	r2,r9,1000df08 <__gedf2+0x5c>
1000dedc:	1a401626 	beq	r3,r9,1000df38 <__gedf2+0x8c>
1000dee0:	10000c1e 	bne	r2,zero,1000df14 <__gedf2+0x68>
1000dee4:	5112b03a 	or	r9,r10,r4
1000dee8:	4813003a 	cmpeq	r9,r9,zero
1000deec:	4817883a 	mov	r11,r9
1000def0:	18000c1e 	bne	r3,zero,1000df24 <__gedf2+0x78>
1000def4:	4198b03a 	or	r12,r8,r6
1000def8:	60000a1e 	bne	r12,zero,1000df24 <__gedf2+0x78>
1000defc:	48001326 	beq	r9,zero,1000df4c <__gedf2+0xa0>
1000df00:	0005883a 	mov	r2,zero
1000df04:	f800283a 	ret
1000df08:	5112b03a 	or	r9,r10,r4
1000df0c:	4800191e 	bne	r9,zero,1000df74 <__gedf2+0xc8>
1000df10:	18800926 	beq	r3,r2,1000df38 <__gedf2+0x8c>
1000df14:	18000b1e 	bne	r3,zero,1000df44 <__gedf2+0x98>
1000df18:	4192b03a 	or	r9,r8,r6
1000df1c:	0017883a 	mov	r11,zero
1000df20:	48000a26 	beq	r9,zero,1000df4c <__gedf2+0xa0>
1000df24:	39c03fcc 	andi	r7,r7,255
1000df28:	58000726 	beq	r11,zero,1000df48 <__gedf2+0x9c>
1000df2c:	3800081e 	bne	r7,zero,1000df50 <__gedf2+0xa4>
1000df30:	00bfffc4 	movi	r2,-1
1000df34:	f800283a 	ret
1000df38:	4192b03a 	or	r9,r8,r6
1000df3c:	48000d1e 	bne	r9,zero,1000df74 <__gedf2+0xc8>
1000df40:	103fe826 	beq	r2,zero,1000dee4 <__alt_data_end+0xf800dee4>
1000df44:	39c03fcc 	andi	r7,r7,255
1000df48:	29c00326 	beq	r5,r7,1000df58 <__gedf2+0xac>
1000df4c:	283ff81e 	bne	r5,zero,1000df30 <__alt_data_end+0xf800df30>
1000df50:	00800044 	movi	r2,1
1000df54:	f800283a 	ret
1000df58:	18bffc16 	blt	r3,r2,1000df4c <__alt_data_end+0xf800df4c>
1000df5c:	10c00316 	blt	r2,r3,1000df6c <__gedf2+0xc0>
1000df60:	42bffa36 	bltu	r8,r10,1000df4c <__alt_data_end+0xf800df4c>
1000df64:	52000526 	beq	r10,r8,1000df7c <__gedf2+0xd0>
1000df68:	523fe52e 	bgeu	r10,r8,1000df00 <__alt_data_end+0xf800df00>
1000df6c:	283ff026 	beq	r5,zero,1000df30 <__alt_data_end+0xf800df30>
1000df70:	003ff706 	br	1000df50 <__alt_data_end+0xf800df50>
1000df74:	00bfff84 	movi	r2,-2
1000df78:	f800283a 	ret
1000df7c:	313ff336 	bltu	r6,r4,1000df4c <__alt_data_end+0xf800df4c>
1000df80:	21bfdf2e 	bgeu	r4,r6,1000df00 <__alt_data_end+0xf800df00>
1000df84:	283fea26 	beq	r5,zero,1000df30 <__alt_data_end+0xf800df30>
1000df88:	003ff106 	br	1000df50 <__alt_data_end+0xf800df50>

1000df8c <__ledf2>:
1000df8c:	2804d53a 	srli	r2,r5,20
1000df90:	3810d53a 	srli	r8,r7,20
1000df94:	00c00434 	movhi	r3,16
1000df98:	18ffffc4 	addi	r3,r3,-1
1000df9c:	0241ffc4 	movi	r9,2047
1000dfa0:	1081ffcc 	andi	r2,r2,2047
1000dfa4:	28d4703a 	and	r10,r5,r3
1000dfa8:	4250703a 	and	r8,r8,r9
1000dfac:	38c6703a 	and	r3,r7,r3
1000dfb0:	280ad7fa 	srli	r5,r5,31
1000dfb4:	380ed7fa 	srli	r7,r7,31
1000dfb8:	12400b26 	beq	r2,r9,1000dfe8 <__ledf2+0x5c>
1000dfbc:	42401926 	beq	r8,r9,1000e024 <__ledf2+0x98>
1000dfc0:	10000c1e 	bne	r2,zero,1000dff4 <__ledf2+0x68>
1000dfc4:	5112b03a 	or	r9,r10,r4
1000dfc8:	4813003a 	cmpeq	r9,r9,zero
1000dfcc:	4817883a 	mov	r11,r9
1000dfd0:	40000f26 	beq	r8,zero,1000e010 <__ledf2+0x84>
1000dfd4:	39c03fcc 	andi	r7,r7,255
1000dfd8:	58001826 	beq	r11,zero,1000e03c <__ledf2+0xb0>
1000dfdc:	38000a1e 	bne	r7,zero,1000e008 <__ledf2+0x7c>
1000dfe0:	00bfffc4 	movi	r2,-1
1000dfe4:	f800283a 	ret
1000dfe8:	5112b03a 	or	r9,r10,r4
1000dfec:	48000f1e 	bne	r9,zero,1000e02c <__ledf2+0xa0>
1000dff0:	40800c26 	beq	r8,r2,1000e024 <__ledf2+0x98>
1000dff4:	4000101e 	bne	r8,zero,1000e038 <__ledf2+0xac>
1000dff8:	1992b03a 	or	r9,r3,r6
1000dffc:	0017883a 	mov	r11,zero
1000e000:	483ff41e 	bne	r9,zero,1000dfd4 <__alt_data_end+0xf800dfd4>
1000e004:	283ff61e 	bne	r5,zero,1000dfe0 <__alt_data_end+0xf800dfe0>
1000e008:	00800044 	movi	r2,1
1000e00c:	f800283a 	ret
1000e010:	1998b03a 	or	r12,r3,r6
1000e014:	603fef1e 	bne	r12,zero,1000dfd4 <__alt_data_end+0xf800dfd4>
1000e018:	483ffa26 	beq	r9,zero,1000e004 <__alt_data_end+0xf800e004>
1000e01c:	0005883a 	mov	r2,zero
1000e020:	f800283a 	ret
1000e024:	1992b03a 	or	r9,r3,r6
1000e028:	48000226 	beq	r9,zero,1000e034 <__ledf2+0xa8>
1000e02c:	00800084 	movi	r2,2
1000e030:	f800283a 	ret
1000e034:	103fe326 	beq	r2,zero,1000dfc4 <__alt_data_end+0xf800dfc4>
1000e038:	39c03fcc 	andi	r7,r7,255
1000e03c:	29fff11e 	bne	r5,r7,1000e004 <__alt_data_end+0xf800e004>
1000e040:	40bff016 	blt	r8,r2,1000e004 <__alt_data_end+0xf800e004>
1000e044:	12000316 	blt	r2,r8,1000e054 <__ledf2+0xc8>
1000e048:	1abfee36 	bltu	r3,r10,1000e004 <__alt_data_end+0xf800e004>
1000e04c:	50c00326 	beq	r10,r3,1000e05c <__ledf2+0xd0>
1000e050:	50fff22e 	bgeu	r10,r3,1000e01c <__alt_data_end+0xf800e01c>
1000e054:	283fe226 	beq	r5,zero,1000dfe0 <__alt_data_end+0xf800dfe0>
1000e058:	003feb06 	br	1000e008 <__alt_data_end+0xf800e008>
1000e05c:	313fe936 	bltu	r6,r4,1000e004 <__alt_data_end+0xf800e004>
1000e060:	21bfee2e 	bgeu	r4,r6,1000e01c <__alt_data_end+0xf800e01c>
1000e064:	283fde26 	beq	r5,zero,1000dfe0 <__alt_data_end+0xf800dfe0>
1000e068:	003fe706 	br	1000e008 <__alt_data_end+0xf800e008>

1000e06c <__muldf3>:
1000e06c:	deffee04 	addi	sp,sp,-72
1000e070:	dd000c15 	stw	r20,48(sp)
1000e074:	2828d53a 	srli	r20,r5,20
1000e078:	dd400d15 	stw	r21,52(sp)
1000e07c:	282ad7fa 	srli	r21,r5,31
1000e080:	dc000815 	stw	r16,32(sp)
1000e084:	04000434 	movhi	r16,16
1000e088:	ddc00f15 	stw	r23,60(sp)
1000e08c:	dcc00b15 	stw	r19,44(sp)
1000e090:	dc800a15 	stw	r18,40(sp)
1000e094:	843fffc4 	addi	r16,r16,-1
1000e098:	dfc01115 	stw	ra,68(sp)
1000e09c:	df001015 	stw	fp,64(sp)
1000e0a0:	dd800e15 	stw	r22,56(sp)
1000e0a4:	dc400915 	stw	r17,36(sp)
1000e0a8:	a501ffcc 	andi	r20,r20,2047
1000e0ac:	2025883a 	mov	r18,r4
1000e0b0:	202f883a 	mov	r23,r4
1000e0b4:	2c20703a 	and	r16,r5,r16
1000e0b8:	a827883a 	mov	r19,r21
1000e0bc:	aa403fcc 	andi	r9,r21,255
1000e0c0:	a0005926 	beq	r20,zero,1000e228 <__muldf3+0x1bc>
1000e0c4:	0081ffc4 	movi	r2,2047
1000e0c8:	a0803426 	beq	r20,r2,1000e19c <__muldf3+0x130>
1000e0cc:	84000434 	orhi	r16,r16,16
1000e0d0:	2004d77a 	srli	r2,r4,29
1000e0d4:	802090fa 	slli	r16,r16,3
1000e0d8:	202e90fa 	slli	r23,r4,3
1000e0dc:	a53f0044 	addi	r20,r20,-1023
1000e0e0:	80a0b03a 	or	r16,r16,r2
1000e0e4:	000b883a 	mov	r5,zero
1000e0e8:	0039883a 	mov	fp,zero
1000e0ec:	3806d53a 	srli	r3,r7,20
1000e0f0:	382cd7fa 	srli	r22,r7,31
1000e0f4:	00800434 	movhi	r2,16
1000e0f8:	10bfffc4 	addi	r2,r2,-1
1000e0fc:	18c1ffcc 	andi	r3,r3,2047
1000e100:	3025883a 	mov	r18,r6
1000e104:	38a2703a 	and	r17,r7,r2
1000e108:	b2803fcc 	andi	r10,r22,255
1000e10c:	18006426 	beq	r3,zero,1000e2a0 <__muldf3+0x234>
1000e110:	0081ffc4 	movi	r2,2047
1000e114:	18805c26 	beq	r3,r2,1000e288 <__muldf3+0x21c>
1000e118:	8c400434 	orhi	r17,r17,16
1000e11c:	3004d77a 	srli	r2,r6,29
1000e120:	882290fa 	slli	r17,r17,3
1000e124:	302490fa 	slli	r18,r6,3
1000e128:	18ff0044 	addi	r3,r3,-1023
1000e12c:	88a2b03a 	or	r17,r17,r2
1000e130:	000f883a 	mov	r7,zero
1000e134:	394ab03a 	or	r5,r7,r5
1000e138:	280a90ba 	slli	r5,r5,2
1000e13c:	00840074 	movhi	r2,4097
1000e140:	10b85704 	addi	r2,r2,-7844
1000e144:	288b883a 	add	r5,r5,r2
1000e148:	28800017 	ldw	r2,0(r5)
1000e14c:	a0c7883a 	add	r3,r20,r3
1000e150:	b54cf03a 	xor	r6,r22,r21
1000e154:	1a000044 	addi	r8,r3,1
1000e158:	1000683a 	jmp	r2
1000e15c:	1000e3a0 	cmpeqi	zero,r2,910
1000e160:	1000e38c 	andi	zero,r2,910
1000e164:	1000e38c 	andi	zero,r2,910
1000e168:	1000e378 	rdprs	zero,r2,909
1000e16c:	1000e1b8 	rdprs	zero,r2,902
1000e170:	1000e1b8 	rdprs	zero,r2,902
1000e174:	1000e360 	cmpeqi	zero,r2,909
1000e178:	1000e378 	rdprs	zero,r2,909
1000e17c:	1000e1b8 	rdprs	zero,r2,902
1000e180:	1000e360 	cmpeqi	zero,r2,909
1000e184:	1000e1b8 	rdprs	zero,r2,902
1000e188:	1000e378 	rdprs	zero,r2,909
1000e18c:	1000e1bc 	xorhi	zero,r2,902
1000e190:	1000e1bc 	xorhi	zero,r2,902
1000e194:	1000e1bc 	xorhi	zero,r2,902
1000e198:	1000e6dc 	xori	zero,r2,923
1000e19c:	8104b03a 	or	r2,r16,r4
1000e1a0:	10006c1e 	bne	r2,zero,1000e354 <__muldf3+0x2e8>
1000e1a4:	01400204 	movi	r5,8
1000e1a8:	0021883a 	mov	r16,zero
1000e1ac:	002f883a 	mov	r23,zero
1000e1b0:	07000084 	movi	fp,2
1000e1b4:	003fcd06 	br	1000e0ec <__alt_data_end+0xf800e0ec>
1000e1b8:	3013883a 	mov	r9,r6
1000e1bc:	00800084 	movi	r2,2
1000e1c0:	e080501e 	bne	fp,r2,1000e304 <__muldf3+0x298>
1000e1c4:	4cc0004c 	andi	r19,r9,1
1000e1c8:	0101ffc4 	movi	r4,2047
1000e1cc:	0021883a 	mov	r16,zero
1000e1d0:	002f883a 	mov	r23,zero
1000e1d4:	2008953a 	slli	r4,r4,20
1000e1d8:	98c03fcc 	andi	r3,r19,255
1000e1dc:	04400434 	movhi	r17,16
1000e1e0:	8c7fffc4 	addi	r17,r17,-1
1000e1e4:	180697fa 	slli	r3,r3,31
1000e1e8:	8460703a 	and	r16,r16,r17
1000e1ec:	8120b03a 	or	r16,r16,r4
1000e1f0:	80c6b03a 	or	r3,r16,r3
1000e1f4:	b805883a 	mov	r2,r23
1000e1f8:	dfc01117 	ldw	ra,68(sp)
1000e1fc:	df001017 	ldw	fp,64(sp)
1000e200:	ddc00f17 	ldw	r23,60(sp)
1000e204:	dd800e17 	ldw	r22,56(sp)
1000e208:	dd400d17 	ldw	r21,52(sp)
1000e20c:	dd000c17 	ldw	r20,48(sp)
1000e210:	dcc00b17 	ldw	r19,44(sp)
1000e214:	dc800a17 	ldw	r18,40(sp)
1000e218:	dc400917 	ldw	r17,36(sp)
1000e21c:	dc000817 	ldw	r16,32(sp)
1000e220:	dec01204 	addi	sp,sp,72
1000e224:	f800283a 	ret
1000e228:	8104b03a 	or	r2,r16,r4
1000e22c:	10004426 	beq	r2,zero,1000e340 <__muldf3+0x2d4>
1000e230:	80014b26 	beq	r16,zero,1000e760 <__muldf3+0x6f4>
1000e234:	8009883a 	mov	r4,r16
1000e238:	d9800715 	stw	r6,28(sp)
1000e23c:	d9c00215 	stw	r7,8(sp)
1000e240:	da400415 	stw	r9,16(sp)
1000e244:	0003f040 	call	10003f04 <__clzsi2>
1000e248:	d9800717 	ldw	r6,28(sp)
1000e24c:	d9c00217 	ldw	r7,8(sp)
1000e250:	da400417 	ldw	r9,16(sp)
1000e254:	1007883a 	mov	r3,r2
1000e258:	01000a04 	movi	r4,40
1000e25c:	1dfffe04 	addi	r23,r3,-8
1000e260:	20c9c83a 	sub	r4,r4,r3
1000e264:	85e0983a 	sll	r16,r16,r23
1000e268:	9108d83a 	srl	r4,r18,r4
1000e26c:	95ee983a 	sll	r23,r18,r23
1000e270:	2420b03a 	or	r16,r4,r16
1000e274:	053f0344 	movi	r20,-1011
1000e278:	a0e9c83a 	sub	r20,r20,r3
1000e27c:	000b883a 	mov	r5,zero
1000e280:	0039883a 	mov	fp,zero
1000e284:	003f9906 	br	1000e0ec <__alt_data_end+0xf800e0ec>
1000e288:	8984b03a 	or	r2,r17,r6
1000e28c:	10002a1e 	bne	r2,zero,1000e338 <__muldf3+0x2cc>
1000e290:	0023883a 	mov	r17,zero
1000e294:	0025883a 	mov	r18,zero
1000e298:	01c00084 	movi	r7,2
1000e29c:	003fa506 	br	1000e134 <__alt_data_end+0xf800e134>
1000e2a0:	8984b03a 	or	r2,r17,r6
1000e2a4:	10002026 	beq	r2,zero,1000e328 <__muldf3+0x2bc>
1000e2a8:	88011c26 	beq	r17,zero,1000e71c <__muldf3+0x6b0>
1000e2ac:	8809883a 	mov	r4,r17
1000e2b0:	d9400215 	stw	r5,8(sp)
1000e2b4:	d9800715 	stw	r6,28(sp)
1000e2b8:	da400415 	stw	r9,16(sp)
1000e2bc:	da800315 	stw	r10,12(sp)
1000e2c0:	0003f040 	call	10003f04 <__clzsi2>
1000e2c4:	d9400217 	ldw	r5,8(sp)
1000e2c8:	d9800717 	ldw	r6,28(sp)
1000e2cc:	da400417 	ldw	r9,16(sp)
1000e2d0:	da800317 	ldw	r10,12(sp)
1000e2d4:	1007883a 	mov	r3,r2
1000e2d8:	01000a04 	movi	r4,40
1000e2dc:	1cbffe04 	addi	r18,r3,-8
1000e2e0:	20c9c83a 	sub	r4,r4,r3
1000e2e4:	8ca2983a 	sll	r17,r17,r18
1000e2e8:	3108d83a 	srl	r4,r6,r4
1000e2ec:	34a4983a 	sll	r18,r6,r18
1000e2f0:	2462b03a 	or	r17,r4,r17
1000e2f4:	00bf0344 	movi	r2,-1011
1000e2f8:	10c7c83a 	sub	r3,r2,r3
1000e2fc:	000f883a 	mov	r7,zero
1000e300:	003f8c06 	br	1000e134 <__alt_data_end+0xf800e134>
1000e304:	008000c4 	movi	r2,3
1000e308:	e0816d26 	beq	fp,r2,1000e8c0 <__muldf3+0x854>
1000e30c:	00800044 	movi	r2,1
1000e310:	e081321e 	bne	fp,r2,1000e7dc <__muldf3+0x770>
1000e314:	48a6703a 	and	r19,r9,r2
1000e318:	0009883a 	mov	r4,zero
1000e31c:	0021883a 	mov	r16,zero
1000e320:	002f883a 	mov	r23,zero
1000e324:	003fab06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e328:	0023883a 	mov	r17,zero
1000e32c:	0025883a 	mov	r18,zero
1000e330:	01c00044 	movi	r7,1
1000e334:	003f7f06 	br	1000e134 <__alt_data_end+0xf800e134>
1000e338:	01c000c4 	movi	r7,3
1000e33c:	003f7d06 	br	1000e134 <__alt_data_end+0xf800e134>
1000e340:	01400104 	movi	r5,4
1000e344:	0021883a 	mov	r16,zero
1000e348:	002f883a 	mov	r23,zero
1000e34c:	07000044 	movi	fp,1
1000e350:	003f6606 	br	1000e0ec <__alt_data_end+0xf800e0ec>
1000e354:	01400304 	movi	r5,12
1000e358:	070000c4 	movi	fp,3
1000e35c:	003f6306 	br	1000e0ec <__alt_data_end+0xf800e0ec>
1000e360:	04000434 	movhi	r16,16
1000e364:	0027883a 	mov	r19,zero
1000e368:	843fffc4 	addi	r16,r16,-1
1000e36c:	05ffffc4 	movi	r23,-1
1000e370:	0101ffc4 	movi	r4,2047
1000e374:	003f9706 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e378:	8821883a 	mov	r16,r17
1000e37c:	902f883a 	mov	r23,r18
1000e380:	5013883a 	mov	r9,r10
1000e384:	3839883a 	mov	fp,r7
1000e388:	003f8c06 	br	1000e1bc <__alt_data_end+0xf800e1bc>
1000e38c:	8821883a 	mov	r16,r17
1000e390:	902f883a 	mov	r23,r18
1000e394:	3013883a 	mov	r9,r6
1000e398:	3839883a 	mov	fp,r7
1000e39c:	003f8706 	br	1000e1bc <__alt_data_end+0xf800e1bc>
1000e3a0:	b82ad43a 	srli	r21,r23,16
1000e3a4:	9038d43a 	srli	fp,r18,16
1000e3a8:	bdffffcc 	andi	r23,r23,65535
1000e3ac:	94bfffcc 	andi	r18,r18,65535
1000e3b0:	9009883a 	mov	r4,r18
1000e3b4:	b80b883a 	mov	r5,r23
1000e3b8:	d8c00515 	stw	r3,20(sp)
1000e3bc:	d9800715 	stw	r6,28(sp)
1000e3c0:	da000615 	stw	r8,24(sp)
1000e3c4:	0002c180 	call	10002c18 <__mulsi3>
1000e3c8:	9009883a 	mov	r4,r18
1000e3cc:	a80b883a 	mov	r5,r21
1000e3d0:	1029883a 	mov	r20,r2
1000e3d4:	0002c180 	call	10002c18 <__mulsi3>
1000e3d8:	e009883a 	mov	r4,fp
1000e3dc:	a80b883a 	mov	r5,r21
1000e3e0:	102d883a 	mov	r22,r2
1000e3e4:	0002c180 	call	10002c18 <__mulsi3>
1000e3e8:	e009883a 	mov	r4,fp
1000e3ec:	b80b883a 	mov	r5,r23
1000e3f0:	1027883a 	mov	r19,r2
1000e3f4:	0002c180 	call	10002c18 <__mulsi3>
1000e3f8:	a008d43a 	srli	r4,r20,16
1000e3fc:	b085883a 	add	r2,r22,r2
1000e400:	d8c00517 	ldw	r3,20(sp)
1000e404:	110f883a 	add	r7,r2,r4
1000e408:	d9800717 	ldw	r6,28(sp)
1000e40c:	da000617 	ldw	r8,24(sp)
1000e410:	3d80022e 	bgeu	r7,r22,1000e41c <__muldf3+0x3b0>
1000e414:	00800074 	movhi	r2,1
1000e418:	98a7883a 	add	r19,r19,r2
1000e41c:	3804943a 	slli	r2,r7,16
1000e420:	380ed43a 	srli	r7,r7,16
1000e424:	882cd43a 	srli	r22,r17,16
1000e428:	a53fffcc 	andi	r20,r20,65535
1000e42c:	8c7fffcc 	andi	r17,r17,65535
1000e430:	1529883a 	add	r20,r2,r20
1000e434:	8809883a 	mov	r4,r17
1000e438:	b80b883a 	mov	r5,r23
1000e43c:	d8c00515 	stw	r3,20(sp)
1000e440:	d9800715 	stw	r6,28(sp)
1000e444:	da000615 	stw	r8,24(sp)
1000e448:	d9c00015 	stw	r7,0(sp)
1000e44c:	dd000115 	stw	r20,4(sp)
1000e450:	0002c180 	call	10002c18 <__mulsi3>
1000e454:	a80b883a 	mov	r5,r21
1000e458:	8809883a 	mov	r4,r17
1000e45c:	d8800415 	stw	r2,16(sp)
1000e460:	0002c180 	call	10002c18 <__mulsi3>
1000e464:	a80b883a 	mov	r5,r21
1000e468:	b009883a 	mov	r4,r22
1000e46c:	1029883a 	mov	r20,r2
1000e470:	0002c180 	call	10002c18 <__mulsi3>
1000e474:	b009883a 	mov	r4,r22
1000e478:	b80b883a 	mov	r5,r23
1000e47c:	102b883a 	mov	r21,r2
1000e480:	0002c180 	call	10002c18 <__mulsi3>
1000e484:	da400417 	ldw	r9,16(sp)
1000e488:	a085883a 	add	r2,r20,r2
1000e48c:	d8c00517 	ldw	r3,20(sp)
1000e490:	4808d43a 	srli	r4,r9,16
1000e494:	d9800717 	ldw	r6,28(sp)
1000e498:	da000617 	ldw	r8,24(sp)
1000e49c:	1109883a 	add	r4,r2,r4
1000e4a0:	2500022e 	bgeu	r4,r20,1000e4ac <__muldf3+0x440>
1000e4a4:	00800074 	movhi	r2,1
1000e4a8:	a8ab883a 	add	r21,r21,r2
1000e4ac:	200e943a 	slli	r7,r4,16
1000e4b0:	2004d43a 	srli	r2,r4,16
1000e4b4:	802ed43a 	srli	r23,r16,16
1000e4b8:	843fffcc 	andi	r16,r16,65535
1000e4bc:	4d3fffcc 	andi	r20,r9,65535
1000e4c0:	9009883a 	mov	r4,r18
1000e4c4:	800b883a 	mov	r5,r16
1000e4c8:	3d29883a 	add	r20,r7,r20
1000e4cc:	d8c00515 	stw	r3,20(sp)
1000e4d0:	d9800715 	stw	r6,28(sp)
1000e4d4:	da000615 	stw	r8,24(sp)
1000e4d8:	a8ab883a 	add	r21,r21,r2
1000e4dc:	0002c180 	call	10002c18 <__mulsi3>
1000e4e0:	9009883a 	mov	r4,r18
1000e4e4:	b80b883a 	mov	r5,r23
1000e4e8:	d8800315 	stw	r2,12(sp)
1000e4ec:	0002c180 	call	10002c18 <__mulsi3>
1000e4f0:	e009883a 	mov	r4,fp
1000e4f4:	b80b883a 	mov	r5,r23
1000e4f8:	1025883a 	mov	r18,r2
1000e4fc:	0002c180 	call	10002c18 <__mulsi3>
1000e500:	e009883a 	mov	r4,fp
1000e504:	800b883a 	mov	r5,r16
1000e508:	d8800215 	stw	r2,8(sp)
1000e50c:	0002c180 	call	10002c18 <__mulsi3>
1000e510:	da800317 	ldw	r10,12(sp)
1000e514:	d9400017 	ldw	r5,0(sp)
1000e518:	9085883a 	add	r2,r18,r2
1000e51c:	5008d43a 	srli	r4,r10,16
1000e520:	a153883a 	add	r9,r20,r5
1000e524:	d8c00517 	ldw	r3,20(sp)
1000e528:	1109883a 	add	r4,r2,r4
1000e52c:	d9800717 	ldw	r6,28(sp)
1000e530:	da000617 	ldw	r8,24(sp)
1000e534:	dac00217 	ldw	r11,8(sp)
1000e538:	2480022e 	bgeu	r4,r18,1000e544 <__muldf3+0x4d8>
1000e53c:	00800074 	movhi	r2,1
1000e540:	5897883a 	add	r11,r11,r2
1000e544:	200e943a 	slli	r7,r4,16
1000e548:	2038d43a 	srli	fp,r4,16
1000e54c:	52bfffcc 	andi	r10,r10,65535
1000e550:	3a8f883a 	add	r7,r7,r10
1000e554:	8809883a 	mov	r4,r17
1000e558:	800b883a 	mov	r5,r16
1000e55c:	d8c00515 	stw	r3,20(sp)
1000e560:	d9800715 	stw	r6,28(sp)
1000e564:	d9c00215 	stw	r7,8(sp)
1000e568:	da000615 	stw	r8,24(sp)
1000e56c:	da400415 	stw	r9,16(sp)
1000e570:	5f39883a 	add	fp,r11,fp
1000e574:	0002c180 	call	10002c18 <__mulsi3>
1000e578:	8809883a 	mov	r4,r17
1000e57c:	b80b883a 	mov	r5,r23
1000e580:	1025883a 	mov	r18,r2
1000e584:	0002c180 	call	10002c18 <__mulsi3>
1000e588:	b009883a 	mov	r4,r22
1000e58c:	b80b883a 	mov	r5,r23
1000e590:	d8800315 	stw	r2,12(sp)
1000e594:	0002c180 	call	10002c18 <__mulsi3>
1000e598:	b009883a 	mov	r4,r22
1000e59c:	800b883a 	mov	r5,r16
1000e5a0:	1023883a 	mov	r17,r2
1000e5a4:	0002c180 	call	10002c18 <__mulsi3>
1000e5a8:	da800317 	ldw	r10,12(sp)
1000e5ac:	9008d43a 	srli	r4,r18,16
1000e5b0:	d8c00517 	ldw	r3,20(sp)
1000e5b4:	5085883a 	add	r2,r10,r2
1000e5b8:	1109883a 	add	r4,r2,r4
1000e5bc:	d9800717 	ldw	r6,28(sp)
1000e5c0:	d9c00217 	ldw	r7,8(sp)
1000e5c4:	da000617 	ldw	r8,24(sp)
1000e5c8:	da400417 	ldw	r9,16(sp)
1000e5cc:	2280022e 	bgeu	r4,r10,1000e5d8 <__muldf3+0x56c>
1000e5d0:	00800074 	movhi	r2,1
1000e5d4:	88a3883a 	add	r17,r17,r2
1000e5d8:	2004943a 	slli	r2,r4,16
1000e5dc:	94bfffcc 	andi	r18,r18,65535
1000e5e0:	4ce7883a 	add	r19,r9,r19
1000e5e4:	14a5883a 	add	r18,r2,r18
1000e5e8:	9d29803a 	cmpltu	r20,r19,r20
1000e5ec:	9565883a 	add	r18,r18,r21
1000e5f0:	9505883a 	add	r2,r18,r20
1000e5f4:	99e7883a 	add	r19,r19,r7
1000e5f8:	99cf803a 	cmpltu	r7,r19,r7
1000e5fc:	e08b883a 	add	r5,fp,r2
1000e600:	2008d43a 	srli	r4,r4,16
1000e604:	29ef883a 	add	r23,r5,r7
1000e608:	1529803a 	cmpltu	r20,r2,r20
1000e60c:	956b803a 	cmpltu	r21,r18,r21
1000e610:	b9cf803a 	cmpltu	r7,r23,r7
1000e614:	a564b03a 	or	r18,r20,r21
1000e618:	2f39803a 	cmpltu	fp,r5,fp
1000e61c:	9125883a 	add	r18,r18,r4
1000e620:	3f38b03a 	or	fp,r7,fp
1000e624:	9725883a 	add	r18,r18,fp
1000e628:	9804927a 	slli	r2,r19,9
1000e62c:	9463883a 	add	r17,r18,r17
1000e630:	d9000117 	ldw	r4,4(sp)
1000e634:	b820d5fa 	srli	r16,r23,23
1000e638:	8822927a 	slli	r17,r17,9
1000e63c:	9826d5fa 	srli	r19,r19,23
1000e640:	1104b03a 	or	r2,r2,r4
1000e644:	b82e927a 	slli	r23,r23,9
1000e648:	1004c03a 	cmpne	r2,r2,zero
1000e64c:	8c20b03a 	or	r16,r17,r16
1000e650:	14e6b03a 	or	r19,r2,r19
1000e654:	8080402c 	andhi	r2,r16,256
1000e658:	9deeb03a 	or	r23,r19,r23
1000e65c:	10000726 	beq	r2,zero,1000e67c <__muldf3+0x610>
1000e660:	b804d07a 	srli	r2,r23,1
1000e664:	800697fa 	slli	r3,r16,31
1000e668:	bdc0004c 	andi	r23,r23,1
1000e66c:	8020d07a 	srli	r16,r16,1
1000e670:	b8aeb03a 	or	r23,r23,r2
1000e674:	b8eeb03a 	or	r23,r23,r3
1000e678:	4007883a 	mov	r3,r8
1000e67c:	1900ffc4 	addi	r4,r3,1023
1000e680:	01004d0e 	bge	zero,r4,1000e7b8 <__muldf3+0x74c>
1000e684:	b88001cc 	andi	r2,r23,7
1000e688:	10000726 	beq	r2,zero,1000e6a8 <__muldf3+0x63c>
1000e68c:	b94003cc 	andi	r5,r23,15
1000e690:	00800104 	movi	r2,4
1000e694:	28800426 	beq	r5,r2,1000e6a8 <__muldf3+0x63c>
1000e698:	b885883a 	add	r2,r23,r2
1000e69c:	15ef803a 	cmpltu	r23,r2,r23
1000e6a0:	85e1883a 	add	r16,r16,r23
1000e6a4:	102f883a 	mov	r23,r2
1000e6a8:	8080402c 	andhi	r2,r16,256
1000e6ac:	10000426 	beq	r2,zero,1000e6c0 <__muldf3+0x654>
1000e6b0:	00bfc034 	movhi	r2,65280
1000e6b4:	10bfffc4 	addi	r2,r2,-1
1000e6b8:	19010004 	addi	r4,r3,1024
1000e6bc:	80a0703a 	and	r16,r16,r2
1000e6c0:	0081ff84 	movi	r2,2046
1000e6c4:	1100340e 	bge	r2,r4,1000e798 <__muldf3+0x72c>
1000e6c8:	34c0004c 	andi	r19,r6,1
1000e6cc:	0101ffc4 	movi	r4,2047
1000e6d0:	0021883a 	mov	r16,zero
1000e6d4:	002f883a 	mov	r23,zero
1000e6d8:	003ebe06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e6dc:	8080022c 	andhi	r2,r16,8
1000e6e0:	10000926 	beq	r2,zero,1000e708 <__muldf3+0x69c>
1000e6e4:	8880022c 	andhi	r2,r17,8
1000e6e8:	1000071e 	bne	r2,zero,1000e708 <__muldf3+0x69c>
1000e6ec:	00800434 	movhi	r2,16
1000e6f0:	8c000234 	orhi	r16,r17,8
1000e6f4:	10bfffc4 	addi	r2,r2,-1
1000e6f8:	b027883a 	mov	r19,r22
1000e6fc:	80a0703a 	and	r16,r16,r2
1000e700:	902f883a 	mov	r23,r18
1000e704:	003f1a06 	br	1000e370 <__alt_data_end+0xf800e370>
1000e708:	00800434 	movhi	r2,16
1000e70c:	84000234 	orhi	r16,r16,8
1000e710:	10bfffc4 	addi	r2,r2,-1
1000e714:	80a0703a 	and	r16,r16,r2
1000e718:	003f1506 	br	1000e370 <__alt_data_end+0xf800e370>
1000e71c:	3009883a 	mov	r4,r6
1000e720:	d9400215 	stw	r5,8(sp)
1000e724:	d9800715 	stw	r6,28(sp)
1000e728:	da400415 	stw	r9,16(sp)
1000e72c:	da800315 	stw	r10,12(sp)
1000e730:	0003f040 	call	10003f04 <__clzsi2>
1000e734:	10c00804 	addi	r3,r2,32
1000e738:	010009c4 	movi	r4,39
1000e73c:	d9400217 	ldw	r5,8(sp)
1000e740:	d9800717 	ldw	r6,28(sp)
1000e744:	da400417 	ldw	r9,16(sp)
1000e748:	da800317 	ldw	r10,12(sp)
1000e74c:	20fee20e 	bge	r4,r3,1000e2d8 <__alt_data_end+0xf800e2d8>
1000e750:	147ffe04 	addi	r17,r2,-8
1000e754:	9462983a 	sll	r17,r18,r17
1000e758:	0025883a 	mov	r18,zero
1000e75c:	003ee506 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e760:	d9800715 	stw	r6,28(sp)
1000e764:	d9c00215 	stw	r7,8(sp)
1000e768:	da400415 	stw	r9,16(sp)
1000e76c:	0003f040 	call	10003f04 <__clzsi2>
1000e770:	10c00804 	addi	r3,r2,32
1000e774:	010009c4 	movi	r4,39
1000e778:	d9800717 	ldw	r6,28(sp)
1000e77c:	d9c00217 	ldw	r7,8(sp)
1000e780:	da400417 	ldw	r9,16(sp)
1000e784:	20feb40e 	bge	r4,r3,1000e258 <__alt_data_end+0xf800e258>
1000e788:	143ffe04 	addi	r16,r2,-8
1000e78c:	9420983a 	sll	r16,r18,r16
1000e790:	002f883a 	mov	r23,zero
1000e794:	003eb706 	br	1000e274 <__alt_data_end+0xf800e274>
1000e798:	8004977a 	slli	r2,r16,29
1000e79c:	b82ed0fa 	srli	r23,r23,3
1000e7a0:	8020927a 	slli	r16,r16,9
1000e7a4:	2101ffcc 	andi	r4,r4,2047
1000e7a8:	15eeb03a 	or	r23,r2,r23
1000e7ac:	8020d33a 	srli	r16,r16,12
1000e7b0:	34c0004c 	andi	r19,r6,1
1000e7b4:	003e8706 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e7b8:	00bf0084 	movi	r2,-1022
1000e7bc:	10c5c83a 	sub	r2,r2,r3
1000e7c0:	01000e04 	movi	r4,56
1000e7c4:	2080080e 	bge	r4,r2,1000e7e8 <__muldf3+0x77c>
1000e7c8:	34c0004c 	andi	r19,r6,1
1000e7cc:	0009883a 	mov	r4,zero
1000e7d0:	0021883a 	mov	r16,zero
1000e7d4:	002f883a 	mov	r23,zero
1000e7d8:	003e7e06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e7dc:	4007883a 	mov	r3,r8
1000e7e0:	480d883a 	mov	r6,r9
1000e7e4:	003fa506 	br	1000e67c <__alt_data_end+0xf800e67c>
1000e7e8:	010007c4 	movi	r4,31
1000e7ec:	20801816 	blt	r4,r2,1000e850 <__muldf3+0x7e4>
1000e7f0:	18c10784 	addi	r3,r3,1054
1000e7f4:	80c8983a 	sll	r4,r16,r3
1000e7f8:	b88ad83a 	srl	r5,r23,r2
1000e7fc:	b8c6983a 	sll	r3,r23,r3
1000e800:	80a0d83a 	srl	r16,r16,r2
1000e804:	2908b03a 	or	r4,r5,r4
1000e808:	1804c03a 	cmpne	r2,r3,zero
1000e80c:	2088b03a 	or	r4,r4,r2
1000e810:	208001cc 	andi	r2,r4,7
1000e814:	10000726 	beq	r2,zero,1000e834 <__muldf3+0x7c8>
1000e818:	20c003cc 	andi	r3,r4,15
1000e81c:	00800104 	movi	r2,4
1000e820:	18800426 	beq	r3,r2,1000e834 <__muldf3+0x7c8>
1000e824:	20c00104 	addi	r3,r4,4
1000e828:	1905803a 	cmpltu	r2,r3,r4
1000e82c:	80a1883a 	add	r16,r16,r2
1000e830:	1809883a 	mov	r4,r3
1000e834:	8080202c 	andhi	r2,r16,128
1000e838:	10001b26 	beq	r2,zero,1000e8a8 <__muldf3+0x83c>
1000e83c:	34c0004c 	andi	r19,r6,1
1000e840:	01000044 	movi	r4,1
1000e844:	0021883a 	mov	r16,zero
1000e848:	002f883a 	mov	r23,zero
1000e84c:	003e6106 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e850:	013ef884 	movi	r4,-1054
1000e854:	20c9c83a 	sub	r4,r4,r3
1000e858:	01400804 	movi	r5,32
1000e85c:	8108d83a 	srl	r4,r16,r4
1000e860:	11401526 	beq	r2,r5,1000e8b8 <__muldf3+0x84c>
1000e864:	18c10f84 	addi	r3,r3,1086
1000e868:	80e0983a 	sll	r16,r16,r3
1000e86c:	85eeb03a 	or	r23,r16,r23
1000e870:	b804c03a 	cmpne	r2,r23,zero
1000e874:	1108b03a 	or	r4,r2,r4
1000e878:	20c001cc 	andi	r3,r4,7
1000e87c:	1800061e 	bne	r3,zero,1000e898 <__muldf3+0x82c>
1000e880:	0021883a 	mov	r16,zero
1000e884:	202ed0fa 	srli	r23,r4,3
1000e888:	34c0004c 	andi	r19,r6,1
1000e88c:	0009883a 	mov	r4,zero
1000e890:	b8eeb03a 	or	r23,r23,r3
1000e894:	003e4f06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e898:	20c003cc 	andi	r3,r4,15
1000e89c:	00800104 	movi	r2,4
1000e8a0:	0021883a 	mov	r16,zero
1000e8a4:	18bfdf1e 	bne	r3,r2,1000e824 <__alt_data_end+0xf800e824>
1000e8a8:	8004927a 	slli	r2,r16,9
1000e8ac:	8006977a 	slli	r3,r16,29
1000e8b0:	1020d33a 	srli	r16,r2,12
1000e8b4:	003ff306 	br	1000e884 <__alt_data_end+0xf800e884>
1000e8b8:	0021883a 	mov	r16,zero
1000e8bc:	003feb06 	br	1000e86c <__alt_data_end+0xf800e86c>
1000e8c0:	00800434 	movhi	r2,16
1000e8c4:	84000234 	orhi	r16,r16,8
1000e8c8:	10bfffc4 	addi	r2,r2,-1
1000e8cc:	4cc0004c 	andi	r19,r9,1
1000e8d0:	80a0703a 	and	r16,r16,r2
1000e8d4:	003ea606 	br	1000e370 <__alt_data_end+0xf800e370>

1000e8d8 <__floatunsidf>:
1000e8d8:	defffe04 	addi	sp,sp,-8
1000e8dc:	dc000015 	stw	r16,0(sp)
1000e8e0:	dfc00115 	stw	ra,4(sp)
1000e8e4:	2021883a 	mov	r16,r4
1000e8e8:	20001026 	beq	r4,zero,1000e92c <__floatunsidf+0x54>
1000e8ec:	0003f040 	call	10003f04 <__clzsi2>
1000e8f0:	01410784 	movi	r5,1054
1000e8f4:	100d883a 	mov	r6,r2
1000e8f8:	288bc83a 	sub	r5,r5,r2
1000e8fc:	00800284 	movi	r2,10
1000e900:	11801616 	blt	r2,r6,1000e95c <__floatunsidf+0x84>
1000e904:	008002c4 	movi	r2,11
1000e908:	1185c83a 	sub	r2,r2,r6
1000e90c:	8084d83a 	srl	r2,r16,r2
1000e910:	00c00434 	movhi	r3,16
1000e914:	31c00544 	addi	r7,r6,21
1000e918:	18ffffc4 	addi	r3,r3,-1
1000e91c:	81e0983a 	sll	r16,r16,r7
1000e920:	10cc703a 	and	r6,r2,r3
1000e924:	2941ffcc 	andi	r5,r5,2047
1000e928:	00000206 	br	1000e934 <__floatunsidf+0x5c>
1000e92c:	000b883a 	mov	r5,zero
1000e930:	000d883a 	mov	r6,zero
1000e934:	280a953a 	slli	r5,r5,20
1000e938:	00c00434 	movhi	r3,16
1000e93c:	18ffffc4 	addi	r3,r3,-1
1000e940:	30c6703a 	and	r3,r6,r3
1000e944:	8005883a 	mov	r2,r16
1000e948:	1946b03a 	or	r3,r3,r5
1000e94c:	dfc00117 	ldw	ra,4(sp)
1000e950:	dc000017 	ldw	r16,0(sp)
1000e954:	dec00204 	addi	sp,sp,8
1000e958:	f800283a 	ret
1000e95c:	31bffd44 	addi	r6,r6,-11
1000e960:	818c983a 	sll	r6,r16,r6
1000e964:	00800434 	movhi	r2,16
1000e968:	10bfffc4 	addi	r2,r2,-1
1000e96c:	2941ffcc 	andi	r5,r5,2047
1000e970:	0021883a 	mov	r16,zero
1000e974:	308c703a 	and	r6,r6,r2
1000e978:	003fee06 	br	1000e934 <__alt_data_end+0xf800e934>

1000e97c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e97c:	defffe04 	addi	sp,sp,-8
1000e980:	dfc00115 	stw	ra,4(sp)
1000e984:	df000015 	stw	fp,0(sp)
1000e988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e98c:	00840074 	movhi	r2,4097
1000e990:	108bdb04 	addi	r2,r2,12140
1000e994:	10800017 	ldw	r2,0(r2)
1000e998:	10000526 	beq	r2,zero,1000e9b0 <alt_get_errno+0x34>
1000e99c:	00840074 	movhi	r2,4097
1000e9a0:	108bdb04 	addi	r2,r2,12140
1000e9a4:	10800017 	ldw	r2,0(r2)
1000e9a8:	103ee83a 	callr	r2
1000e9ac:	00000206 	br	1000e9b8 <alt_get_errno+0x3c>
1000e9b0:	00840074 	movhi	r2,4097
1000e9b4:	1092b004 	addi	r2,r2,19136
}
1000e9b8:	e037883a 	mov	sp,fp
1000e9bc:	dfc00117 	ldw	ra,4(sp)
1000e9c0:	df000017 	ldw	fp,0(sp)
1000e9c4:	dec00204 	addi	sp,sp,8
1000e9c8:	f800283a 	ret

1000e9cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e9cc:	defffb04 	addi	sp,sp,-20
1000e9d0:	dfc00415 	stw	ra,16(sp)
1000e9d4:	df000315 	stw	fp,12(sp)
1000e9d8:	df000304 	addi	fp,sp,12
1000e9dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e9e0:	e0bfff17 	ldw	r2,-4(fp)
1000e9e4:	10000816 	blt	r2,zero,1000ea08 <close+0x3c>
1000e9e8:	e13fff17 	ldw	r4,-4(fp)
1000e9ec:	01400304 	movi	r5,12
1000e9f0:	0002c180 	call	10002c18 <__mulsi3>
1000e9f4:	1007883a 	mov	r3,r2
1000e9f8:	00840074 	movhi	r2,4097
1000e9fc:	10875804 	addi	r2,r2,7520
1000ea00:	1885883a 	add	r2,r3,r2
1000ea04:	00000106 	br	1000ea0c <close+0x40>
1000ea08:	0005883a 	mov	r2,zero
1000ea0c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000ea10:	e0bffd17 	ldw	r2,-12(fp)
1000ea14:	10001926 	beq	r2,zero,1000ea7c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ea18:	e0bffd17 	ldw	r2,-12(fp)
1000ea1c:	10800017 	ldw	r2,0(r2)
1000ea20:	10800417 	ldw	r2,16(r2)
1000ea24:	10000626 	beq	r2,zero,1000ea40 <close+0x74>
1000ea28:	e0bffd17 	ldw	r2,-12(fp)
1000ea2c:	10800017 	ldw	r2,0(r2)
1000ea30:	10800417 	ldw	r2,16(r2)
1000ea34:	e13ffd17 	ldw	r4,-12(fp)
1000ea38:	103ee83a 	callr	r2
1000ea3c:	00000106 	br	1000ea44 <close+0x78>
1000ea40:	0005883a 	mov	r2,zero
1000ea44:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000ea48:	e13fff17 	ldw	r4,-4(fp)
1000ea4c:	000f0f00 	call	1000f0f0 <alt_release_fd>
    if (rval < 0)
1000ea50:	e0bffe17 	ldw	r2,-8(fp)
1000ea54:	1000070e 	bge	r2,zero,1000ea74 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ea58:	000e97c0 	call	1000e97c <alt_get_errno>
1000ea5c:	1007883a 	mov	r3,r2
1000ea60:	e0bffe17 	ldw	r2,-8(fp)
1000ea64:	0085c83a 	sub	r2,zero,r2
1000ea68:	18800015 	stw	r2,0(r3)
      return -1;
1000ea6c:	00bfffc4 	movi	r2,-1
1000ea70:	00000706 	br	1000ea90 <close+0xc4>
    }
    return 0;
1000ea74:	0005883a 	mov	r2,zero
1000ea78:	00000506 	br	1000ea90 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ea7c:	000e97c0 	call	1000e97c <alt_get_errno>
1000ea80:	1007883a 	mov	r3,r2
1000ea84:	00801444 	movi	r2,81
1000ea88:	18800015 	stw	r2,0(r3)
    return -1;
1000ea8c:	00bfffc4 	movi	r2,-1
  }
}
1000ea90:	e037883a 	mov	sp,fp
1000ea94:	dfc00117 	ldw	ra,4(sp)
1000ea98:	df000017 	ldw	fp,0(sp)
1000ea9c:	dec00204 	addi	sp,sp,8
1000eaa0:	f800283a 	ret

1000eaa4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000eaa4:	defffc04 	addi	sp,sp,-16
1000eaa8:	df000315 	stw	fp,12(sp)
1000eaac:	df000304 	addi	fp,sp,12
1000eab0:	e13ffd15 	stw	r4,-12(fp)
1000eab4:	e17ffe15 	stw	r5,-8(fp)
1000eab8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000eabc:	e0bfff17 	ldw	r2,-4(fp)
}
1000eac0:	e037883a 	mov	sp,fp
1000eac4:	df000017 	ldw	fp,0(sp)
1000eac8:	dec00104 	addi	sp,sp,4
1000eacc:	f800283a 	ret

1000ead0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ead0:	defffe04 	addi	sp,sp,-8
1000ead4:	dfc00115 	stw	ra,4(sp)
1000ead8:	df000015 	stw	fp,0(sp)
1000eadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eae0:	00840074 	movhi	r2,4097
1000eae4:	108bdb04 	addi	r2,r2,12140
1000eae8:	10800017 	ldw	r2,0(r2)
1000eaec:	10000526 	beq	r2,zero,1000eb04 <alt_get_errno+0x34>
1000eaf0:	00840074 	movhi	r2,4097
1000eaf4:	108bdb04 	addi	r2,r2,12140
1000eaf8:	10800017 	ldw	r2,0(r2)
1000eafc:	103ee83a 	callr	r2
1000eb00:	00000206 	br	1000eb0c <alt_get_errno+0x3c>
1000eb04:	00840074 	movhi	r2,4097
1000eb08:	1092b004 	addi	r2,r2,19136
}
1000eb0c:	e037883a 	mov	sp,fp
1000eb10:	dfc00117 	ldw	ra,4(sp)
1000eb14:	df000017 	ldw	fp,0(sp)
1000eb18:	dec00204 	addi	sp,sp,8
1000eb1c:	f800283a 	ret

1000eb20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000eb20:	defffb04 	addi	sp,sp,-20
1000eb24:	dfc00415 	stw	ra,16(sp)
1000eb28:	df000315 	stw	fp,12(sp)
1000eb2c:	df000304 	addi	fp,sp,12
1000eb30:	e13ffe15 	stw	r4,-8(fp)
1000eb34:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eb38:	e0bffe17 	ldw	r2,-8(fp)
1000eb3c:	10000816 	blt	r2,zero,1000eb60 <fstat+0x40>
1000eb40:	e13ffe17 	ldw	r4,-8(fp)
1000eb44:	01400304 	movi	r5,12
1000eb48:	0002c180 	call	10002c18 <__mulsi3>
1000eb4c:	1007883a 	mov	r3,r2
1000eb50:	00840074 	movhi	r2,4097
1000eb54:	10875804 	addi	r2,r2,7520
1000eb58:	1885883a 	add	r2,r3,r2
1000eb5c:	00000106 	br	1000eb64 <fstat+0x44>
1000eb60:	0005883a 	mov	r2,zero
1000eb64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000eb68:	e0bffd17 	ldw	r2,-12(fp)
1000eb6c:	10001026 	beq	r2,zero,1000ebb0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000eb70:	e0bffd17 	ldw	r2,-12(fp)
1000eb74:	10800017 	ldw	r2,0(r2)
1000eb78:	10800817 	ldw	r2,32(r2)
1000eb7c:	10000726 	beq	r2,zero,1000eb9c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000eb80:	e0bffd17 	ldw	r2,-12(fp)
1000eb84:	10800017 	ldw	r2,0(r2)
1000eb88:	10800817 	ldw	r2,32(r2)
1000eb8c:	e13ffd17 	ldw	r4,-12(fp)
1000eb90:	e17fff17 	ldw	r5,-4(fp)
1000eb94:	103ee83a 	callr	r2
1000eb98:	00000a06 	br	1000ebc4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000eb9c:	e0bfff17 	ldw	r2,-4(fp)
1000eba0:	00c80004 	movi	r3,8192
1000eba4:	10c00115 	stw	r3,4(r2)
      return 0;
1000eba8:	0005883a 	mov	r2,zero
1000ebac:	00000506 	br	1000ebc4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ebb0:	000ead00 	call	1000ead0 <alt_get_errno>
1000ebb4:	1007883a 	mov	r3,r2
1000ebb8:	00801444 	movi	r2,81
1000ebbc:	18800015 	stw	r2,0(r3)
    return -1;
1000ebc0:	00bfffc4 	movi	r2,-1
  }
}
1000ebc4:	e037883a 	mov	sp,fp
1000ebc8:	dfc00117 	ldw	ra,4(sp)
1000ebcc:	df000017 	ldw	fp,0(sp)
1000ebd0:	dec00204 	addi	sp,sp,8
1000ebd4:	f800283a 	ret

1000ebd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ebd8:	defffe04 	addi	sp,sp,-8
1000ebdc:	dfc00115 	stw	ra,4(sp)
1000ebe0:	df000015 	stw	fp,0(sp)
1000ebe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ebe8:	00840074 	movhi	r2,4097
1000ebec:	108bdb04 	addi	r2,r2,12140
1000ebf0:	10800017 	ldw	r2,0(r2)
1000ebf4:	10000526 	beq	r2,zero,1000ec0c <alt_get_errno+0x34>
1000ebf8:	00840074 	movhi	r2,4097
1000ebfc:	108bdb04 	addi	r2,r2,12140
1000ec00:	10800017 	ldw	r2,0(r2)
1000ec04:	103ee83a 	callr	r2
1000ec08:	00000206 	br	1000ec14 <alt_get_errno+0x3c>
1000ec0c:	00840074 	movhi	r2,4097
1000ec10:	1092b004 	addi	r2,r2,19136
}
1000ec14:	e037883a 	mov	sp,fp
1000ec18:	dfc00117 	ldw	ra,4(sp)
1000ec1c:	df000017 	ldw	fp,0(sp)
1000ec20:	dec00204 	addi	sp,sp,8
1000ec24:	f800283a 	ret

1000ec28 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000ec28:	deffed04 	addi	sp,sp,-76
1000ec2c:	dfc01215 	stw	ra,72(sp)
1000ec30:	df001115 	stw	fp,68(sp)
1000ec34:	df001104 	addi	fp,sp,68
1000ec38:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ec3c:	e0bfff17 	ldw	r2,-4(fp)
1000ec40:	10000816 	blt	r2,zero,1000ec64 <isatty+0x3c>
1000ec44:	e13fff17 	ldw	r4,-4(fp)
1000ec48:	01400304 	movi	r5,12
1000ec4c:	0002c180 	call	10002c18 <__mulsi3>
1000ec50:	1007883a 	mov	r3,r2
1000ec54:	00840074 	movhi	r2,4097
1000ec58:	10875804 	addi	r2,r2,7520
1000ec5c:	1885883a 	add	r2,r3,r2
1000ec60:	00000106 	br	1000ec68 <isatty+0x40>
1000ec64:	0005883a 	mov	r2,zero
1000ec68:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ec6c:	e0bfef17 	ldw	r2,-68(fp)
1000ec70:	10000e26 	beq	r2,zero,1000ecac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ec74:	e0bfef17 	ldw	r2,-68(fp)
1000ec78:	10800017 	ldw	r2,0(r2)
1000ec7c:	10800817 	ldw	r2,32(r2)
1000ec80:	1000021e 	bne	r2,zero,1000ec8c <isatty+0x64>
    {
      return 1;
1000ec84:	00800044 	movi	r2,1
1000ec88:	00000d06 	br	1000ecc0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ec8c:	e0bff004 	addi	r2,fp,-64
1000ec90:	e13fff17 	ldw	r4,-4(fp)
1000ec94:	100b883a 	mov	r5,r2
1000ec98:	000eb200 	call	1000eb20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ec9c:	e0bff117 	ldw	r2,-60(fp)
1000eca0:	10880020 	cmpeqi	r2,r2,8192
1000eca4:	10803fcc 	andi	r2,r2,255
1000eca8:	00000506 	br	1000ecc0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ecac:	000ebd80 	call	1000ebd8 <alt_get_errno>
1000ecb0:	1007883a 	mov	r3,r2
1000ecb4:	00801444 	movi	r2,81
1000ecb8:	18800015 	stw	r2,0(r3)
    return 0;
1000ecbc:	0005883a 	mov	r2,zero
  }
}
1000ecc0:	e037883a 	mov	sp,fp
1000ecc4:	dfc00117 	ldw	ra,4(sp)
1000ecc8:	df000017 	ldw	fp,0(sp)
1000eccc:	dec00204 	addi	sp,sp,8
1000ecd0:	f800283a 	ret

1000ecd4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ecd4:	defffc04 	addi	sp,sp,-16
1000ecd8:	df000315 	stw	fp,12(sp)
1000ecdc:	df000304 	addi	fp,sp,12
1000ece0:	e13ffd15 	stw	r4,-12(fp)
1000ece4:	e17ffe15 	stw	r5,-8(fp)
1000ece8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ecec:	e0fffe17 	ldw	r3,-8(fp)
1000ecf0:	e0bffd17 	ldw	r2,-12(fp)
1000ecf4:	18800c26 	beq	r3,r2,1000ed28 <alt_load_section+0x54>
  {
    while( to != end )
1000ecf8:	00000806 	br	1000ed1c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ecfc:	e0bffe17 	ldw	r2,-8(fp)
1000ed00:	10c00104 	addi	r3,r2,4
1000ed04:	e0fffe15 	stw	r3,-8(fp)
1000ed08:	e0fffd17 	ldw	r3,-12(fp)
1000ed0c:	19000104 	addi	r4,r3,4
1000ed10:	e13ffd15 	stw	r4,-12(fp)
1000ed14:	18c00017 	ldw	r3,0(r3)
1000ed18:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ed1c:	e0fffe17 	ldw	r3,-8(fp)
1000ed20:	e0bfff17 	ldw	r2,-4(fp)
1000ed24:	18bff51e 	bne	r3,r2,1000ecfc <__alt_data_end+0xf800ecfc>
    {
      *to++ = *from++;
    }
  }
}
1000ed28:	e037883a 	mov	sp,fp
1000ed2c:	df000017 	ldw	fp,0(sp)
1000ed30:	dec00104 	addi	sp,sp,4
1000ed34:	f800283a 	ret

1000ed38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ed38:	defffe04 	addi	sp,sp,-8
1000ed3c:	dfc00115 	stw	ra,4(sp)
1000ed40:	df000015 	stw	fp,0(sp)
1000ed44:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ed48:	01040074 	movhi	r4,4097
1000ed4c:	210be004 	addi	r4,r4,12160
1000ed50:	01440074 	movhi	r5,4097
1000ed54:	29452504 	addi	r5,r5,5268
1000ed58:	01840074 	movhi	r6,4097
1000ed5c:	318be004 	addi	r6,r6,12160
1000ed60:	000ecd40 	call	1000ecd4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ed64:	01040034 	movhi	r4,4096
1000ed68:	21000804 	addi	r4,r4,32
1000ed6c:	01440034 	movhi	r5,4096
1000ed70:	29400804 	addi	r5,r5,32
1000ed74:	01840034 	movhi	r6,4096
1000ed78:	31808b04 	addi	r6,r6,556
1000ed7c:	000ecd40 	call	1000ecd4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ed80:	01040074 	movhi	r4,4097
1000ed84:	21043504 	addi	r4,r4,4308
1000ed88:	01440074 	movhi	r5,4097
1000ed8c:	29443504 	addi	r5,r5,4308
1000ed90:	01840074 	movhi	r6,4097
1000ed94:	31852504 	addi	r6,r6,5268
1000ed98:	000ecd40 	call	1000ecd4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ed9c:	000ffb00 	call	1000ffb0 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000eda0:	00101780 	call	10010178 <alt_icache_flush_all>
}
1000eda4:	e037883a 	mov	sp,fp
1000eda8:	dfc00117 	ldw	ra,4(sp)
1000edac:	df000017 	ldw	fp,0(sp)
1000edb0:	dec00204 	addi	sp,sp,8
1000edb4:	f800283a 	ret

1000edb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000edb8:	defffe04 	addi	sp,sp,-8
1000edbc:	dfc00115 	stw	ra,4(sp)
1000edc0:	df000015 	stw	fp,0(sp)
1000edc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000edc8:	00840074 	movhi	r2,4097
1000edcc:	108bdb04 	addi	r2,r2,12140
1000edd0:	10800017 	ldw	r2,0(r2)
1000edd4:	10000526 	beq	r2,zero,1000edec <alt_get_errno+0x34>
1000edd8:	00840074 	movhi	r2,4097
1000eddc:	108bdb04 	addi	r2,r2,12140
1000ede0:	10800017 	ldw	r2,0(r2)
1000ede4:	103ee83a 	callr	r2
1000ede8:	00000206 	br	1000edf4 <alt_get_errno+0x3c>
1000edec:	00840074 	movhi	r2,4097
1000edf0:	1092b004 	addi	r2,r2,19136
}
1000edf4:	e037883a 	mov	sp,fp
1000edf8:	dfc00117 	ldw	ra,4(sp)
1000edfc:	df000017 	ldw	fp,0(sp)
1000ee00:	dec00204 	addi	sp,sp,8
1000ee04:	f800283a 	ret

1000ee08 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000ee08:	defff904 	addi	sp,sp,-28
1000ee0c:	dfc00615 	stw	ra,24(sp)
1000ee10:	df000515 	stw	fp,20(sp)
1000ee14:	df000504 	addi	fp,sp,20
1000ee18:	e13ffd15 	stw	r4,-12(fp)
1000ee1c:	e17ffe15 	stw	r5,-8(fp)
1000ee20:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000ee24:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ee28:	e0bffd17 	ldw	r2,-12(fp)
1000ee2c:	10000816 	blt	r2,zero,1000ee50 <lseek+0x48>
1000ee30:	e13ffd17 	ldw	r4,-12(fp)
1000ee34:	01400304 	movi	r5,12
1000ee38:	0002c180 	call	10002c18 <__mulsi3>
1000ee3c:	1007883a 	mov	r3,r2
1000ee40:	00840074 	movhi	r2,4097
1000ee44:	10875804 	addi	r2,r2,7520
1000ee48:	1885883a 	add	r2,r3,r2
1000ee4c:	00000106 	br	1000ee54 <lseek+0x4c>
1000ee50:	0005883a 	mov	r2,zero
1000ee54:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000ee58:	e0bffc17 	ldw	r2,-16(fp)
1000ee5c:	10001026 	beq	r2,zero,1000eea0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000ee60:	e0bffc17 	ldw	r2,-16(fp)
1000ee64:	10800017 	ldw	r2,0(r2)
1000ee68:	10800717 	ldw	r2,28(r2)
1000ee6c:	10000926 	beq	r2,zero,1000ee94 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000ee70:	e0bffc17 	ldw	r2,-16(fp)
1000ee74:	10800017 	ldw	r2,0(r2)
1000ee78:	10800717 	ldw	r2,28(r2)
1000ee7c:	e13ffc17 	ldw	r4,-16(fp)
1000ee80:	e17ffe17 	ldw	r5,-8(fp)
1000ee84:	e1bfff17 	ldw	r6,-4(fp)
1000ee88:	103ee83a 	callr	r2
1000ee8c:	e0bffb15 	stw	r2,-20(fp)
1000ee90:	00000506 	br	1000eea8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000ee94:	00bfde84 	movi	r2,-134
1000ee98:	e0bffb15 	stw	r2,-20(fp)
1000ee9c:	00000206 	br	1000eea8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000eea0:	00bfebc4 	movi	r2,-81
1000eea4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000eea8:	e0bffb17 	ldw	r2,-20(fp)
1000eeac:	1000070e 	bge	r2,zero,1000eecc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000eeb0:	000edb80 	call	1000edb8 <alt_get_errno>
1000eeb4:	1007883a 	mov	r3,r2
1000eeb8:	e0bffb17 	ldw	r2,-20(fp)
1000eebc:	0085c83a 	sub	r2,zero,r2
1000eec0:	18800015 	stw	r2,0(r3)
    rc = -1;
1000eec4:	00bfffc4 	movi	r2,-1
1000eec8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000eecc:	e0bffb17 	ldw	r2,-20(fp)
}
1000eed0:	e037883a 	mov	sp,fp
1000eed4:	dfc00117 	ldw	ra,4(sp)
1000eed8:	df000017 	ldw	fp,0(sp)
1000eedc:	dec00204 	addi	sp,sp,8
1000eee0:	f800283a 	ret

1000eee4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000eee4:	defffd04 	addi	sp,sp,-12
1000eee8:	dfc00215 	stw	ra,8(sp)
1000eeec:	df000115 	stw	fp,4(sp)
1000eef0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000eef4:	0009883a 	mov	r4,zero
1000eef8:	000f3a80 	call	1000f3a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000eefc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000ef00:	000f3dc0 	call	1000f3dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000ef04:	01040074 	movhi	r4,4097
1000ef08:	21051b04 	addi	r4,r4,5228
1000ef0c:	01440074 	movhi	r5,4097
1000ef10:	29451b04 	addi	r5,r5,5228
1000ef14:	01840074 	movhi	r6,4097
1000ef18:	31851b04 	addi	r6,r6,5228
1000ef1c:	00105440 	call	10010544 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000ef20:	00100c00 	call	100100c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000ef24:	01040074 	movhi	r4,4097
1000ef28:	21004704 	addi	r4,r4,284
1000ef2c:	0010d300 	call	10010d30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000ef30:	d126e117 	ldw	r4,-25724(gp)
1000ef34:	d0e6e217 	ldw	r3,-25720(gp)
1000ef38:	d0a6e317 	ldw	r2,-25716(gp)
1000ef3c:	180b883a 	mov	r5,r3
1000ef40:	100d883a 	mov	r6,r2
1000ef44:	00002680 	call	10000268 <main>
1000ef48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000ef4c:	01000044 	movi	r4,1
1000ef50:	000e9cc0 	call	1000e9cc <close>
  exit (result);
1000ef54:	e13fff17 	ldw	r4,-4(fp)
1000ef58:	0010d440 	call	10010d44 <exit>

1000ef5c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ef5c:	defffe04 	addi	sp,sp,-8
1000ef60:	df000115 	stw	fp,4(sp)
1000ef64:	df000104 	addi	fp,sp,4
1000ef68:	e13fff15 	stw	r4,-4(fp)
}
1000ef6c:	e037883a 	mov	sp,fp
1000ef70:	df000017 	ldw	fp,0(sp)
1000ef74:	dec00104 	addi	sp,sp,4
1000ef78:	f800283a 	ret

1000ef7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000ef7c:	defffe04 	addi	sp,sp,-8
1000ef80:	df000115 	stw	fp,4(sp)
1000ef84:	df000104 	addi	fp,sp,4
1000ef88:	e13fff15 	stw	r4,-4(fp)
}
1000ef8c:	e037883a 	mov	sp,fp
1000ef90:	df000017 	ldw	fp,0(sp)
1000ef94:	dec00104 	addi	sp,sp,4
1000ef98:	f800283a 	ret

1000ef9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef9c:	defffe04 	addi	sp,sp,-8
1000efa0:	dfc00115 	stw	ra,4(sp)
1000efa4:	df000015 	stw	fp,0(sp)
1000efa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000efac:	00840074 	movhi	r2,4097
1000efb0:	108bdb04 	addi	r2,r2,12140
1000efb4:	10800017 	ldw	r2,0(r2)
1000efb8:	10000526 	beq	r2,zero,1000efd0 <alt_get_errno+0x34>
1000efbc:	00840074 	movhi	r2,4097
1000efc0:	108bdb04 	addi	r2,r2,12140
1000efc4:	10800017 	ldw	r2,0(r2)
1000efc8:	103ee83a 	callr	r2
1000efcc:	00000206 	br	1000efd8 <alt_get_errno+0x3c>
1000efd0:	00840074 	movhi	r2,4097
1000efd4:	1092b004 	addi	r2,r2,19136
}
1000efd8:	e037883a 	mov	sp,fp
1000efdc:	dfc00117 	ldw	ra,4(sp)
1000efe0:	df000017 	ldw	fp,0(sp)
1000efe4:	dec00204 	addi	sp,sp,8
1000efe8:	f800283a 	ret

1000efec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000efec:	defff904 	addi	sp,sp,-28
1000eff0:	dfc00615 	stw	ra,24(sp)
1000eff4:	df000515 	stw	fp,20(sp)
1000eff8:	df000504 	addi	fp,sp,20
1000effc:	e13ffd15 	stw	r4,-12(fp)
1000f000:	e17ffe15 	stw	r5,-8(fp)
1000f004:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f008:	e0bffd17 	ldw	r2,-12(fp)
1000f00c:	10000816 	blt	r2,zero,1000f030 <read+0x44>
1000f010:	e13ffd17 	ldw	r4,-12(fp)
1000f014:	01400304 	movi	r5,12
1000f018:	0002c180 	call	10002c18 <__mulsi3>
1000f01c:	1007883a 	mov	r3,r2
1000f020:	00840074 	movhi	r2,4097
1000f024:	10875804 	addi	r2,r2,7520
1000f028:	1885883a 	add	r2,r3,r2
1000f02c:	00000106 	br	1000f034 <read+0x48>
1000f030:	0005883a 	mov	r2,zero
1000f034:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f038:	e0bffb17 	ldw	r2,-20(fp)
1000f03c:	10002226 	beq	r2,zero,1000f0c8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f040:	e0bffb17 	ldw	r2,-20(fp)
1000f044:	10800217 	ldw	r2,8(r2)
1000f048:	108000cc 	andi	r2,r2,3
1000f04c:	10800060 	cmpeqi	r2,r2,1
1000f050:	1000181e 	bne	r2,zero,1000f0b4 <read+0xc8>
        (fd->dev->read))
1000f054:	e0bffb17 	ldw	r2,-20(fp)
1000f058:	10800017 	ldw	r2,0(r2)
1000f05c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f060:	10001426 	beq	r2,zero,1000f0b4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f064:	e0bffb17 	ldw	r2,-20(fp)
1000f068:	10800017 	ldw	r2,0(r2)
1000f06c:	10800517 	ldw	r2,20(r2)
1000f070:	e0ffff17 	ldw	r3,-4(fp)
1000f074:	e13ffb17 	ldw	r4,-20(fp)
1000f078:	e17ffe17 	ldw	r5,-8(fp)
1000f07c:	180d883a 	mov	r6,r3
1000f080:	103ee83a 	callr	r2
1000f084:	e0bffc15 	stw	r2,-16(fp)
1000f088:	e0bffc17 	ldw	r2,-16(fp)
1000f08c:	1000070e 	bge	r2,zero,1000f0ac <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f090:	000ef9c0 	call	1000ef9c <alt_get_errno>
1000f094:	1007883a 	mov	r3,r2
1000f098:	e0bffc17 	ldw	r2,-16(fp)
1000f09c:	0085c83a 	sub	r2,zero,r2
1000f0a0:	18800015 	stw	r2,0(r3)
          return -1;
1000f0a4:	00bfffc4 	movi	r2,-1
1000f0a8:	00000c06 	br	1000f0dc <read+0xf0>
        }
        return rval;
1000f0ac:	e0bffc17 	ldw	r2,-16(fp)
1000f0b0:	00000a06 	br	1000f0dc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f0b4:	000ef9c0 	call	1000ef9c <alt_get_errno>
1000f0b8:	1007883a 	mov	r3,r2
1000f0bc:	00800344 	movi	r2,13
1000f0c0:	18800015 	stw	r2,0(r3)
1000f0c4:	00000406 	br	1000f0d8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f0c8:	000ef9c0 	call	1000ef9c <alt_get_errno>
1000f0cc:	1007883a 	mov	r3,r2
1000f0d0:	00801444 	movi	r2,81
1000f0d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f0d8:	00bfffc4 	movi	r2,-1
}
1000f0dc:	e037883a 	mov	sp,fp
1000f0e0:	dfc00117 	ldw	ra,4(sp)
1000f0e4:	df000017 	ldw	fp,0(sp)
1000f0e8:	dec00204 	addi	sp,sp,8
1000f0ec:	f800283a 	ret

1000f0f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f0f0:	defffc04 	addi	sp,sp,-16
1000f0f4:	dfc00315 	stw	ra,12(sp)
1000f0f8:	df000215 	stw	fp,8(sp)
1000f0fc:	dc000115 	stw	r16,4(sp)
1000f100:	df000204 	addi	fp,sp,8
1000f104:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f108:	e0bffe17 	ldw	r2,-8(fp)
1000f10c:	108000d0 	cmplti	r2,r2,3
1000f110:	1000111e 	bne	r2,zero,1000f158 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f114:	04040074 	movhi	r16,4097
1000f118:	84075804 	addi	r16,r16,7520
1000f11c:	e0bffe17 	ldw	r2,-8(fp)
1000f120:	1009883a 	mov	r4,r2
1000f124:	01400304 	movi	r5,12
1000f128:	0002c180 	call	10002c18 <__mulsi3>
1000f12c:	8085883a 	add	r2,r16,r2
1000f130:	10800204 	addi	r2,r2,8
1000f134:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f138:	04040074 	movhi	r16,4097
1000f13c:	84075804 	addi	r16,r16,7520
1000f140:	e0bffe17 	ldw	r2,-8(fp)
1000f144:	1009883a 	mov	r4,r2
1000f148:	01400304 	movi	r5,12
1000f14c:	0002c180 	call	10002c18 <__mulsi3>
1000f150:	8085883a 	add	r2,r16,r2
1000f154:	10000015 	stw	zero,0(r2)
  }
}
1000f158:	e6ffff04 	addi	sp,fp,-4
1000f15c:	dfc00217 	ldw	ra,8(sp)
1000f160:	df000117 	ldw	fp,4(sp)
1000f164:	dc000017 	ldw	r16,0(sp)
1000f168:	dec00304 	addi	sp,sp,12
1000f16c:	f800283a 	ret

1000f170 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f170:	defff904 	addi	sp,sp,-28
1000f174:	df000615 	stw	fp,24(sp)
1000f178:	df000604 	addi	fp,sp,24
1000f17c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f180:	0005303a 	rdctl	r2,status
1000f184:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f188:	e0fffc17 	ldw	r3,-16(fp)
1000f18c:	00bfff84 	movi	r2,-2
1000f190:	1884703a 	and	r2,r3,r2
1000f194:	1001703a 	wrctl	status,r2
  
  return context;
1000f198:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f19c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f1a0:	d0a00c17 	ldw	r2,-32720(gp)
1000f1a4:	10c000c4 	addi	r3,r2,3
1000f1a8:	00bfff04 	movi	r2,-4
1000f1ac:	1884703a 	and	r2,r3,r2
1000f1b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f1b4:	d0e00c17 	ldw	r3,-32720(gp)
1000f1b8:	e0bfff17 	ldw	r2,-4(fp)
1000f1bc:	1887883a 	add	r3,r3,r2
1000f1c0:	00860034 	movhi	r2,6144
1000f1c4:	10800004 	addi	r2,r2,0
1000f1c8:	10c0062e 	bgeu	r2,r3,1000f1e4 <sbrk+0x74>
1000f1cc:	e0bffa17 	ldw	r2,-24(fp)
1000f1d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1d4:	e0bffd17 	ldw	r2,-12(fp)
1000f1d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f1dc:	00bfffc4 	movi	r2,-1
1000f1e0:	00000b06 	br	1000f210 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f1e4:	d0a00c17 	ldw	r2,-32720(gp)
1000f1e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f1ec:	d0e00c17 	ldw	r3,-32720(gp)
1000f1f0:	e0bfff17 	ldw	r2,-4(fp)
1000f1f4:	1885883a 	add	r2,r3,r2
1000f1f8:	d0a00c15 	stw	r2,-32720(gp)
1000f1fc:	e0bffa17 	ldw	r2,-24(fp)
1000f200:	e0bffe15 	stw	r2,-8(fp)
1000f204:	e0bffe17 	ldw	r2,-8(fp)
1000f208:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f20c:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f210:	e037883a 	mov	sp,fp
1000f214:	df000017 	ldw	fp,0(sp)
1000f218:	dec00104 	addi	sp,sp,4
1000f21c:	f800283a 	ret

1000f220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f220:	defffe04 	addi	sp,sp,-8
1000f224:	dfc00115 	stw	ra,4(sp)
1000f228:	df000015 	stw	fp,0(sp)
1000f22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f230:	00840074 	movhi	r2,4097
1000f234:	108bdb04 	addi	r2,r2,12140
1000f238:	10800017 	ldw	r2,0(r2)
1000f23c:	10000526 	beq	r2,zero,1000f254 <alt_get_errno+0x34>
1000f240:	00840074 	movhi	r2,4097
1000f244:	108bdb04 	addi	r2,r2,12140
1000f248:	10800017 	ldw	r2,0(r2)
1000f24c:	103ee83a 	callr	r2
1000f250:	00000206 	br	1000f25c <alt_get_errno+0x3c>
1000f254:	00840074 	movhi	r2,4097
1000f258:	1092b004 	addi	r2,r2,19136
}
1000f25c:	e037883a 	mov	sp,fp
1000f260:	dfc00117 	ldw	ra,4(sp)
1000f264:	df000017 	ldw	fp,0(sp)
1000f268:	dec00204 	addi	sp,sp,8
1000f26c:	f800283a 	ret

1000f270 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f270:	defff904 	addi	sp,sp,-28
1000f274:	dfc00615 	stw	ra,24(sp)
1000f278:	df000515 	stw	fp,20(sp)
1000f27c:	df000504 	addi	fp,sp,20
1000f280:	e13ffd15 	stw	r4,-12(fp)
1000f284:	e17ffe15 	stw	r5,-8(fp)
1000f288:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f28c:	e0bffd17 	ldw	r2,-12(fp)
1000f290:	10000816 	blt	r2,zero,1000f2b4 <write+0x44>
1000f294:	e13ffd17 	ldw	r4,-12(fp)
1000f298:	01400304 	movi	r5,12
1000f29c:	0002c180 	call	10002c18 <__mulsi3>
1000f2a0:	1007883a 	mov	r3,r2
1000f2a4:	00840074 	movhi	r2,4097
1000f2a8:	10875804 	addi	r2,r2,7520
1000f2ac:	1885883a 	add	r2,r3,r2
1000f2b0:	00000106 	br	1000f2b8 <write+0x48>
1000f2b4:	0005883a 	mov	r2,zero
1000f2b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f2bc:	e0bffb17 	ldw	r2,-20(fp)
1000f2c0:	10002126 	beq	r2,zero,1000f348 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f2c4:	e0bffb17 	ldw	r2,-20(fp)
1000f2c8:	10800217 	ldw	r2,8(r2)
1000f2cc:	108000cc 	andi	r2,r2,3
1000f2d0:	10001826 	beq	r2,zero,1000f334 <write+0xc4>
1000f2d4:	e0bffb17 	ldw	r2,-20(fp)
1000f2d8:	10800017 	ldw	r2,0(r2)
1000f2dc:	10800617 	ldw	r2,24(r2)
1000f2e0:	10001426 	beq	r2,zero,1000f334 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f2e4:	e0bffb17 	ldw	r2,-20(fp)
1000f2e8:	10800017 	ldw	r2,0(r2)
1000f2ec:	10800617 	ldw	r2,24(r2)
1000f2f0:	e0ffff17 	ldw	r3,-4(fp)
1000f2f4:	e13ffb17 	ldw	r4,-20(fp)
1000f2f8:	e17ffe17 	ldw	r5,-8(fp)
1000f2fc:	180d883a 	mov	r6,r3
1000f300:	103ee83a 	callr	r2
1000f304:	e0bffc15 	stw	r2,-16(fp)
1000f308:	e0bffc17 	ldw	r2,-16(fp)
1000f30c:	1000070e 	bge	r2,zero,1000f32c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f310:	000f2200 	call	1000f220 <alt_get_errno>
1000f314:	1007883a 	mov	r3,r2
1000f318:	e0bffc17 	ldw	r2,-16(fp)
1000f31c:	0085c83a 	sub	r2,zero,r2
1000f320:	18800015 	stw	r2,0(r3)
        return -1;
1000f324:	00bfffc4 	movi	r2,-1
1000f328:	00000c06 	br	1000f35c <write+0xec>
      }
      return rval;
1000f32c:	e0bffc17 	ldw	r2,-16(fp)
1000f330:	00000a06 	br	1000f35c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f334:	000f2200 	call	1000f220 <alt_get_errno>
1000f338:	1007883a 	mov	r3,r2
1000f33c:	00800344 	movi	r2,13
1000f340:	18800015 	stw	r2,0(r3)
1000f344:	00000406 	br	1000f358 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f348:	000f2200 	call	1000f220 <alt_get_errno>
1000f34c:	1007883a 	mov	r3,r2
1000f350:	00801444 	movi	r2,81
1000f354:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f358:	00bfffc4 	movi	r2,-1
}
1000f35c:	e037883a 	mov	sp,fp
1000f360:	dfc00117 	ldw	ra,4(sp)
1000f364:	df000017 	ldw	fp,0(sp)
1000f368:	dec00204 	addi	sp,sp,8
1000f36c:	f800283a 	ret

1000f370 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f370:	defffd04 	addi	sp,sp,-12
1000f374:	dfc00215 	stw	ra,8(sp)
1000f378:	df000115 	stw	fp,4(sp)
1000f37c:	df000104 	addi	fp,sp,4
1000f380:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f384:	e13fff17 	ldw	r4,-4(fp)
1000f388:	01440074 	movhi	r5,4097
1000f38c:	294bd804 	addi	r5,r5,12128
1000f390:	001001c0 	call	1001001c <alt_dev_llist_insert>
}
1000f394:	e037883a 	mov	sp,fp
1000f398:	dfc00117 	ldw	ra,4(sp)
1000f39c:	df000017 	ldw	fp,0(sp)
1000f3a0:	dec00204 	addi	sp,sp,8
1000f3a4:	f800283a 	ret

1000f3a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f3a8:	defffd04 	addi	sp,sp,-12
1000f3ac:	dfc00215 	stw	ra,8(sp)
1000f3b0:	df000115 	stw	fp,4(sp)
1000f3b4:	df000104 	addi	fp,sp,4
1000f3b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f3bc:	00109fc0 	call	100109fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f3c0:	00800044 	movi	r2,1
1000f3c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f3c8:	e037883a 	mov	sp,fp
1000f3cc:	dfc00117 	ldw	ra,4(sp)
1000f3d0:	df000017 	ldw	fp,0(sp)
1000f3d4:	dec00204 	addi	sp,sp,8
1000f3d8:	f800283a 	ret

1000f3dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f3dc:	defffe04 	addi	sp,sp,-8
1000f3e0:	dfc00115 	stw	ra,4(sp)
1000f3e4:	df000015 	stw	fp,0(sp)
1000f3e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f3ec:	01040074 	movhi	r4,4097
1000f3f0:	2107c204 	addi	r4,r4,7944
1000f3f4:	000b883a 	mov	r5,zero
1000f3f8:	01800144 	movi	r6,5
1000f3fc:	000f5880 	call	1000f588 <altera_avalon_jtag_uart_init>
1000f400:	01040074 	movhi	r4,4097
1000f404:	2107b804 	addi	r4,r4,7904
1000f408:	000f3700 	call	1000f370 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f40c:	0001883a 	nop
}
1000f410:	e037883a 	mov	sp,fp
1000f414:	dfc00117 	ldw	ra,4(sp)
1000f418:	df000017 	ldw	fp,0(sp)
1000f41c:	dec00204 	addi	sp,sp,8
1000f420:	f800283a 	ret

1000f424 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f424:	defffa04 	addi	sp,sp,-24
1000f428:	dfc00515 	stw	ra,20(sp)
1000f42c:	df000415 	stw	fp,16(sp)
1000f430:	df000404 	addi	fp,sp,16
1000f434:	e13ffd15 	stw	r4,-12(fp)
1000f438:	e17ffe15 	stw	r5,-8(fp)
1000f43c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f440:	e0bffd17 	ldw	r2,-12(fp)
1000f444:	10800017 	ldw	r2,0(r2)
1000f448:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f44c:	e0bffc17 	ldw	r2,-16(fp)
1000f450:	10c00a04 	addi	r3,r2,40
1000f454:	e0bffd17 	ldw	r2,-12(fp)
1000f458:	10800217 	ldw	r2,8(r2)
1000f45c:	1809883a 	mov	r4,r3
1000f460:	e17ffe17 	ldw	r5,-8(fp)
1000f464:	e1bfff17 	ldw	r6,-4(fp)
1000f468:	100f883a 	mov	r7,r2
1000f46c:	000fa4c0 	call	1000fa4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f470:	e037883a 	mov	sp,fp
1000f474:	dfc00117 	ldw	ra,4(sp)
1000f478:	df000017 	ldw	fp,0(sp)
1000f47c:	dec00204 	addi	sp,sp,8
1000f480:	f800283a 	ret

1000f484 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f484:	defffa04 	addi	sp,sp,-24
1000f488:	dfc00515 	stw	ra,20(sp)
1000f48c:	df000415 	stw	fp,16(sp)
1000f490:	df000404 	addi	fp,sp,16
1000f494:	e13ffd15 	stw	r4,-12(fp)
1000f498:	e17ffe15 	stw	r5,-8(fp)
1000f49c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f4a0:	e0bffd17 	ldw	r2,-12(fp)
1000f4a4:	10800017 	ldw	r2,0(r2)
1000f4a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f4ac:	e0bffc17 	ldw	r2,-16(fp)
1000f4b0:	10c00a04 	addi	r3,r2,40
1000f4b4:	e0bffd17 	ldw	r2,-12(fp)
1000f4b8:	10800217 	ldw	r2,8(r2)
1000f4bc:	1809883a 	mov	r4,r3
1000f4c0:	e17ffe17 	ldw	r5,-8(fp)
1000f4c4:	e1bfff17 	ldw	r6,-4(fp)
1000f4c8:	100f883a 	mov	r7,r2
1000f4cc:	000fc580 	call	1000fc58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f4d0:	e037883a 	mov	sp,fp
1000f4d4:	dfc00117 	ldw	ra,4(sp)
1000f4d8:	df000017 	ldw	fp,0(sp)
1000f4dc:	dec00204 	addi	sp,sp,8
1000f4e0:	f800283a 	ret

1000f4e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f4e4:	defffc04 	addi	sp,sp,-16
1000f4e8:	dfc00315 	stw	ra,12(sp)
1000f4ec:	df000215 	stw	fp,8(sp)
1000f4f0:	df000204 	addi	fp,sp,8
1000f4f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f4f8:	e0bfff17 	ldw	r2,-4(fp)
1000f4fc:	10800017 	ldw	r2,0(r2)
1000f500:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f504:	e0bffe17 	ldw	r2,-8(fp)
1000f508:	10c00a04 	addi	r3,r2,40
1000f50c:	e0bfff17 	ldw	r2,-4(fp)
1000f510:	10800217 	ldw	r2,8(r2)
1000f514:	1809883a 	mov	r4,r3
1000f518:	100b883a 	mov	r5,r2
1000f51c:	000f8f80 	call	1000f8f8 <altera_avalon_jtag_uart_close>
}
1000f520:	e037883a 	mov	sp,fp
1000f524:	dfc00117 	ldw	ra,4(sp)
1000f528:	df000017 	ldw	fp,0(sp)
1000f52c:	dec00204 	addi	sp,sp,8
1000f530:	f800283a 	ret

1000f534 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f534:	defffa04 	addi	sp,sp,-24
1000f538:	dfc00515 	stw	ra,20(sp)
1000f53c:	df000415 	stw	fp,16(sp)
1000f540:	df000404 	addi	fp,sp,16
1000f544:	e13ffd15 	stw	r4,-12(fp)
1000f548:	e17ffe15 	stw	r5,-8(fp)
1000f54c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f550:	e0bffd17 	ldw	r2,-12(fp)
1000f554:	10800017 	ldw	r2,0(r2)
1000f558:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f55c:	e0bffc17 	ldw	r2,-16(fp)
1000f560:	10800a04 	addi	r2,r2,40
1000f564:	1009883a 	mov	r4,r2
1000f568:	e17ffe17 	ldw	r5,-8(fp)
1000f56c:	e1bfff17 	ldw	r6,-4(fp)
1000f570:	000f9600 	call	1000f960 <altera_avalon_jtag_uart_ioctl>
}
1000f574:	e037883a 	mov	sp,fp
1000f578:	dfc00117 	ldw	ra,4(sp)
1000f57c:	df000017 	ldw	fp,0(sp)
1000f580:	dec00204 	addi	sp,sp,8
1000f584:	f800283a 	ret

1000f588 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f588:	defffa04 	addi	sp,sp,-24
1000f58c:	dfc00515 	stw	ra,20(sp)
1000f590:	df000415 	stw	fp,16(sp)
1000f594:	df000404 	addi	fp,sp,16
1000f598:	e13ffd15 	stw	r4,-12(fp)
1000f59c:	e17ffe15 	stw	r5,-8(fp)
1000f5a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f5a4:	e0bffd17 	ldw	r2,-12(fp)
1000f5a8:	00c00044 	movi	r3,1
1000f5ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f5b0:	e0bffd17 	ldw	r2,-12(fp)
1000f5b4:	10800017 	ldw	r2,0(r2)
1000f5b8:	10800104 	addi	r2,r2,4
1000f5bc:	1007883a 	mov	r3,r2
1000f5c0:	e0bffd17 	ldw	r2,-12(fp)
1000f5c4:	10800817 	ldw	r2,32(r2)
1000f5c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f5cc:	e0fffe17 	ldw	r3,-8(fp)
1000f5d0:	e0bfff17 	ldw	r2,-4(fp)
1000f5d4:	d8000015 	stw	zero,0(sp)
1000f5d8:	1809883a 	mov	r4,r3
1000f5dc:	100b883a 	mov	r5,r2
1000f5e0:	01840074 	movhi	r6,4097
1000f5e4:	31bd9304 	addi	r6,r6,-2484
1000f5e8:	e1fffd17 	ldw	r7,-12(fp)
1000f5ec:	00101940 	call	10010194 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f5f0:	e0bffd17 	ldw	r2,-12(fp)
1000f5f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f5f8:	e0bffd17 	ldw	r2,-12(fp)
1000f5fc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f600:	00840074 	movhi	r2,4097
1000f604:	1092b504 	addi	r2,r2,19156
1000f608:	10800017 	ldw	r2,0(r2)
1000f60c:	1809883a 	mov	r4,r3
1000f610:	100b883a 	mov	r5,r2
1000f614:	01840074 	movhi	r6,4097
1000f618:	31be1404 	addi	r6,r6,-1968
1000f61c:	e1fffd17 	ldw	r7,-12(fp)
1000f620:	000fe700 	call	1000fe70 <alt_alarm_start>
1000f624:	1000040e 	bge	r2,zero,1000f638 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f628:	e0fffd17 	ldw	r3,-12(fp)
1000f62c:	00a00034 	movhi	r2,32768
1000f630:	10bfffc4 	addi	r2,r2,-1
1000f634:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f638:	e037883a 	mov	sp,fp
1000f63c:	dfc00117 	ldw	ra,4(sp)
1000f640:	df000017 	ldw	fp,0(sp)
1000f644:	dec00204 	addi	sp,sp,8
1000f648:	f800283a 	ret

1000f64c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f64c:	defff804 	addi	sp,sp,-32
1000f650:	df000715 	stw	fp,28(sp)
1000f654:	df000704 	addi	fp,sp,28
1000f658:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f65c:	e0bfff17 	ldw	r2,-4(fp)
1000f660:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f664:	e0bffb17 	ldw	r2,-20(fp)
1000f668:	10800017 	ldw	r2,0(r2)
1000f66c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f670:	e0bffc17 	ldw	r2,-16(fp)
1000f674:	10800104 	addi	r2,r2,4
1000f678:	10800037 	ldwio	r2,0(r2)
1000f67c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f680:	e0bffd17 	ldw	r2,-12(fp)
1000f684:	1080c00c 	andi	r2,r2,768
1000f688:	1000011e 	bne	r2,zero,1000f690 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f68c:	00006c06 	br	1000f840 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f690:	e0bffd17 	ldw	r2,-12(fp)
1000f694:	1080400c 	andi	r2,r2,256
1000f698:	10003426 	beq	r2,zero,1000f76c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f69c:	00800074 	movhi	r2,1
1000f6a0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f6a4:	e0bffb17 	ldw	r2,-20(fp)
1000f6a8:	10800a17 	ldw	r2,40(r2)
1000f6ac:	10800044 	addi	r2,r2,1
1000f6b0:	1081ffcc 	andi	r2,r2,2047
1000f6b4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f6b8:	e0bffb17 	ldw	r2,-20(fp)
1000f6bc:	10c00b17 	ldw	r3,44(r2)
1000f6c0:	e0bffe17 	ldw	r2,-8(fp)
1000f6c4:	1880011e 	bne	r3,r2,1000f6cc <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f6c8:	00001606 	br	1000f724 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f6cc:	e0bffc17 	ldw	r2,-16(fp)
1000f6d0:	10800037 	ldwio	r2,0(r2)
1000f6d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f6d8:	e0bff917 	ldw	r2,-28(fp)
1000f6dc:	10a0000c 	andi	r2,r2,32768
1000f6e0:	1000011e 	bne	r2,zero,1000f6e8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f6e4:	00000f06 	br	1000f724 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f6e8:	e0bffb17 	ldw	r2,-20(fp)
1000f6ec:	10800a17 	ldw	r2,40(r2)
1000f6f0:	e0fff917 	ldw	r3,-28(fp)
1000f6f4:	1809883a 	mov	r4,r3
1000f6f8:	e0fffb17 	ldw	r3,-20(fp)
1000f6fc:	1885883a 	add	r2,r3,r2
1000f700:	10800e04 	addi	r2,r2,56
1000f704:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f708:	e0bffb17 	ldw	r2,-20(fp)
1000f70c:	10800a17 	ldw	r2,40(r2)
1000f710:	10800044 	addi	r2,r2,1
1000f714:	10c1ffcc 	andi	r3,r2,2047
1000f718:	e0bffb17 	ldw	r2,-20(fp)
1000f71c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f720:	003fe006 	br	1000f6a4 <__alt_data_end+0xf800f6a4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f724:	e0bff917 	ldw	r2,-28(fp)
1000f728:	10bfffec 	andhi	r2,r2,65535
1000f72c:	10000f26 	beq	r2,zero,1000f76c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f730:	e0bffb17 	ldw	r2,-20(fp)
1000f734:	10c00817 	ldw	r3,32(r2)
1000f738:	00bfff84 	movi	r2,-2
1000f73c:	1886703a 	and	r3,r3,r2
1000f740:	e0bffb17 	ldw	r2,-20(fp)
1000f744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f748:	e0bffc17 	ldw	r2,-16(fp)
1000f74c:	10800104 	addi	r2,r2,4
1000f750:	1007883a 	mov	r3,r2
1000f754:	e0bffb17 	ldw	r2,-20(fp)
1000f758:	10800817 	ldw	r2,32(r2)
1000f75c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f760:	e0bffc17 	ldw	r2,-16(fp)
1000f764:	10800104 	addi	r2,r2,4
1000f768:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f76c:	e0bffd17 	ldw	r2,-12(fp)
1000f770:	1080800c 	andi	r2,r2,512
1000f774:	10003126 	beq	r2,zero,1000f83c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f778:	e0bffd17 	ldw	r2,-12(fp)
1000f77c:	1004d43a 	srli	r2,r2,16
1000f780:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f784:	00001406 	br	1000f7d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f788:	e0bffc17 	ldw	r2,-16(fp)
1000f78c:	e0fffb17 	ldw	r3,-20(fp)
1000f790:	18c00d17 	ldw	r3,52(r3)
1000f794:	e13ffb17 	ldw	r4,-20(fp)
1000f798:	20c7883a 	add	r3,r4,r3
1000f79c:	18c20e04 	addi	r3,r3,2104
1000f7a0:	18c00003 	ldbu	r3,0(r3)
1000f7a4:	18c03fcc 	andi	r3,r3,255
1000f7a8:	18c0201c 	xori	r3,r3,128
1000f7ac:	18ffe004 	addi	r3,r3,-128
1000f7b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f7b4:	e0bffb17 	ldw	r2,-20(fp)
1000f7b8:	10800d17 	ldw	r2,52(r2)
1000f7bc:	10800044 	addi	r2,r2,1
1000f7c0:	10c1ffcc 	andi	r3,r2,2047
1000f7c4:	e0bffb17 	ldw	r2,-20(fp)
1000f7c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f7cc:	e0bffa17 	ldw	r2,-24(fp)
1000f7d0:	10bfffc4 	addi	r2,r2,-1
1000f7d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f7d8:	e0bffa17 	ldw	r2,-24(fp)
1000f7dc:	10000526 	beq	r2,zero,1000f7f4 <altera_avalon_jtag_uart_irq+0x1a8>
1000f7e0:	e0bffb17 	ldw	r2,-20(fp)
1000f7e4:	10c00d17 	ldw	r3,52(r2)
1000f7e8:	e0bffb17 	ldw	r2,-20(fp)
1000f7ec:	10800c17 	ldw	r2,48(r2)
1000f7f0:	18bfe51e 	bne	r3,r2,1000f788 <__alt_data_end+0xf800f788>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f7f4:	e0bffa17 	ldw	r2,-24(fp)
1000f7f8:	10001026 	beq	r2,zero,1000f83c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f7fc:	e0bffb17 	ldw	r2,-20(fp)
1000f800:	10c00817 	ldw	r3,32(r2)
1000f804:	00bfff44 	movi	r2,-3
1000f808:	1886703a 	and	r3,r3,r2
1000f80c:	e0bffb17 	ldw	r2,-20(fp)
1000f810:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f814:	e0bffb17 	ldw	r2,-20(fp)
1000f818:	10800017 	ldw	r2,0(r2)
1000f81c:	10800104 	addi	r2,r2,4
1000f820:	1007883a 	mov	r3,r2
1000f824:	e0bffb17 	ldw	r2,-20(fp)
1000f828:	10800817 	ldw	r2,32(r2)
1000f82c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f830:	e0bffc17 	ldw	r2,-16(fp)
1000f834:	10800104 	addi	r2,r2,4
1000f838:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f83c:	003f8c06 	br	1000f670 <__alt_data_end+0xf800f670>
}
1000f840:	e037883a 	mov	sp,fp
1000f844:	df000017 	ldw	fp,0(sp)
1000f848:	dec00104 	addi	sp,sp,4
1000f84c:	f800283a 	ret

1000f850 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f850:	defff804 	addi	sp,sp,-32
1000f854:	df000715 	stw	fp,28(sp)
1000f858:	df000704 	addi	fp,sp,28
1000f85c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f860:	e0bffb17 	ldw	r2,-20(fp)
1000f864:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f868:	e0bff917 	ldw	r2,-28(fp)
1000f86c:	10800017 	ldw	r2,0(r2)
1000f870:	10800104 	addi	r2,r2,4
1000f874:	10800037 	ldwio	r2,0(r2)
1000f878:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f87c:	e0bffa17 	ldw	r2,-24(fp)
1000f880:	1081000c 	andi	r2,r2,1024
1000f884:	10000b26 	beq	r2,zero,1000f8b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f888:	e0bff917 	ldw	r2,-28(fp)
1000f88c:	10800017 	ldw	r2,0(r2)
1000f890:	10800104 	addi	r2,r2,4
1000f894:	1007883a 	mov	r3,r2
1000f898:	e0bff917 	ldw	r2,-28(fp)
1000f89c:	10800817 	ldw	r2,32(r2)
1000f8a0:	10810014 	ori	r2,r2,1024
1000f8a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f8a8:	e0bff917 	ldw	r2,-28(fp)
1000f8ac:	10000915 	stw	zero,36(r2)
1000f8b0:	00000a06 	br	1000f8dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f8b4:	e0bff917 	ldw	r2,-28(fp)
1000f8b8:	10c00917 	ldw	r3,36(r2)
1000f8bc:	00a00034 	movhi	r2,32768
1000f8c0:	10bfff04 	addi	r2,r2,-4
1000f8c4:	10c00536 	bltu	r2,r3,1000f8dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f8c8:	e0bff917 	ldw	r2,-28(fp)
1000f8cc:	10800917 	ldw	r2,36(r2)
1000f8d0:	10c00044 	addi	r3,r2,1
1000f8d4:	e0bff917 	ldw	r2,-28(fp)
1000f8d8:	10c00915 	stw	r3,36(r2)
1000f8dc:	00840074 	movhi	r2,4097
1000f8e0:	1092b504 	addi	r2,r2,19156
1000f8e4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f8e8:	e037883a 	mov	sp,fp
1000f8ec:	df000017 	ldw	fp,0(sp)
1000f8f0:	dec00104 	addi	sp,sp,4
1000f8f4:	f800283a 	ret

1000f8f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f8f8:	defffd04 	addi	sp,sp,-12
1000f8fc:	df000215 	stw	fp,8(sp)
1000f900:	df000204 	addi	fp,sp,8
1000f904:	e13ffe15 	stw	r4,-8(fp)
1000f908:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f90c:	00000506 	br	1000f924 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f910:	e0bfff17 	ldw	r2,-4(fp)
1000f914:	1090000c 	andi	r2,r2,16384
1000f918:	10000226 	beq	r2,zero,1000f924 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f91c:	00bffd44 	movi	r2,-11
1000f920:	00000b06 	br	1000f950 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f924:	e0bffe17 	ldw	r2,-8(fp)
1000f928:	10c00d17 	ldw	r3,52(r2)
1000f92c:	e0bffe17 	ldw	r2,-8(fp)
1000f930:	10800c17 	ldw	r2,48(r2)
1000f934:	18800526 	beq	r3,r2,1000f94c <altera_avalon_jtag_uart_close+0x54>
1000f938:	e0bffe17 	ldw	r2,-8(fp)
1000f93c:	10c00917 	ldw	r3,36(r2)
1000f940:	e0bffe17 	ldw	r2,-8(fp)
1000f944:	10800117 	ldw	r2,4(r2)
1000f948:	18bff136 	bltu	r3,r2,1000f910 <__alt_data_end+0xf800f910>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f94c:	0005883a 	mov	r2,zero
}
1000f950:	e037883a 	mov	sp,fp
1000f954:	df000017 	ldw	fp,0(sp)
1000f958:	dec00104 	addi	sp,sp,4
1000f95c:	f800283a 	ret

1000f960 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f960:	defffa04 	addi	sp,sp,-24
1000f964:	df000515 	stw	fp,20(sp)
1000f968:	df000504 	addi	fp,sp,20
1000f96c:	e13ffd15 	stw	r4,-12(fp)
1000f970:	e17ffe15 	stw	r5,-8(fp)
1000f974:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f978:	00bff9c4 	movi	r2,-25
1000f97c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f980:	e0bffe17 	ldw	r2,-8(fp)
1000f984:	10da8060 	cmpeqi	r3,r2,27137
1000f988:	1800031e 	bne	r3,zero,1000f998 <altera_avalon_jtag_uart_ioctl+0x38>
1000f98c:	109a80a0 	cmpeqi	r2,r2,27138
1000f990:	1000191e 	bne	r2,zero,1000f9f8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000f994:	00002806 	br	1000fa38 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f998:	e0bffd17 	ldw	r2,-12(fp)
1000f99c:	10c00117 	ldw	r3,4(r2)
1000f9a0:	00a00034 	movhi	r2,32768
1000f9a4:	10bfffc4 	addi	r2,r2,-1
1000f9a8:	18801226 	beq	r3,r2,1000f9f4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000f9ac:	e0bfff17 	ldw	r2,-4(fp)
1000f9b0:	10800017 	ldw	r2,0(r2)
1000f9b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f9b8:	e0bffc17 	ldw	r2,-16(fp)
1000f9bc:	10800090 	cmplti	r2,r2,2
1000f9c0:	1000061e 	bne	r2,zero,1000f9dc <altera_avalon_jtag_uart_ioctl+0x7c>
1000f9c4:	e0fffc17 	ldw	r3,-16(fp)
1000f9c8:	00a00034 	movhi	r2,32768
1000f9cc:	10bfffc4 	addi	r2,r2,-1
1000f9d0:	18800226 	beq	r3,r2,1000f9dc <altera_avalon_jtag_uart_ioctl+0x7c>
1000f9d4:	e0bffc17 	ldw	r2,-16(fp)
1000f9d8:	00000206 	br	1000f9e4 <altera_avalon_jtag_uart_ioctl+0x84>
1000f9dc:	00a00034 	movhi	r2,32768
1000f9e0:	10bfff84 	addi	r2,r2,-2
1000f9e4:	e0fffd17 	ldw	r3,-12(fp)
1000f9e8:	18800115 	stw	r2,4(r3)
      rc = 0;
1000f9ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f9f0:	00001106 	br	1000fa38 <altera_avalon_jtag_uart_ioctl+0xd8>
1000f9f4:	00001006 	br	1000fa38 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000f9f8:	e0bffd17 	ldw	r2,-12(fp)
1000f9fc:	10c00117 	ldw	r3,4(r2)
1000fa00:	00a00034 	movhi	r2,32768
1000fa04:	10bfffc4 	addi	r2,r2,-1
1000fa08:	18800a26 	beq	r3,r2,1000fa34 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fa0c:	e0bffd17 	ldw	r2,-12(fp)
1000fa10:	10c00917 	ldw	r3,36(r2)
1000fa14:	e0bffd17 	ldw	r2,-12(fp)
1000fa18:	10800117 	ldw	r2,4(r2)
1000fa1c:	1885803a 	cmpltu	r2,r3,r2
1000fa20:	10c03fcc 	andi	r3,r2,255
1000fa24:	e0bfff17 	ldw	r2,-4(fp)
1000fa28:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000fa2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fa30:	00000006 	br	1000fa34 <altera_avalon_jtag_uart_ioctl+0xd4>
1000fa34:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fa38:	e0bffb17 	ldw	r2,-20(fp)
}
1000fa3c:	e037883a 	mov	sp,fp
1000fa40:	df000017 	ldw	fp,0(sp)
1000fa44:	dec00104 	addi	sp,sp,4
1000fa48:	f800283a 	ret

1000fa4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fa4c:	defff304 	addi	sp,sp,-52
1000fa50:	dfc00c15 	stw	ra,48(sp)
1000fa54:	df000b15 	stw	fp,44(sp)
1000fa58:	df000b04 	addi	fp,sp,44
1000fa5c:	e13ffc15 	stw	r4,-16(fp)
1000fa60:	e17ffd15 	stw	r5,-12(fp)
1000fa64:	e1bffe15 	stw	r6,-8(fp)
1000fa68:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fa6c:	e0bffd17 	ldw	r2,-12(fp)
1000fa70:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fa74:	00004906 	br	1000fb9c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fa78:	e0bffc17 	ldw	r2,-16(fp)
1000fa7c:	10800a17 	ldw	r2,40(r2)
1000fa80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fa84:	e0bffc17 	ldw	r2,-16(fp)
1000fa88:	10800b17 	ldw	r2,44(r2)
1000fa8c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000fa90:	e0fff717 	ldw	r3,-36(fp)
1000fa94:	e0bff817 	ldw	r2,-32(fp)
1000fa98:	18800536 	bltu	r3,r2,1000fab0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fa9c:	e0fff717 	ldw	r3,-36(fp)
1000faa0:	e0bff817 	ldw	r2,-32(fp)
1000faa4:	1885c83a 	sub	r2,r3,r2
1000faa8:	e0bff615 	stw	r2,-40(fp)
1000faac:	00000406 	br	1000fac0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fab0:	00c20004 	movi	r3,2048
1000fab4:	e0bff817 	ldw	r2,-32(fp)
1000fab8:	1885c83a 	sub	r2,r3,r2
1000fabc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fac0:	e0bff617 	ldw	r2,-40(fp)
1000fac4:	1000011e 	bne	r2,zero,1000facc <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000fac8:	00001d06 	br	1000fb40 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000facc:	e0fffe17 	ldw	r3,-8(fp)
1000fad0:	e0bff617 	ldw	r2,-40(fp)
1000fad4:	1880022e 	bgeu	r3,r2,1000fae0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000fad8:	e0bffe17 	ldw	r2,-8(fp)
1000fadc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000fae0:	e0bff817 	ldw	r2,-32(fp)
1000fae4:	10800e04 	addi	r2,r2,56
1000fae8:	e0fffc17 	ldw	r3,-16(fp)
1000faec:	1885883a 	add	r2,r3,r2
1000faf0:	e13ff517 	ldw	r4,-44(fp)
1000faf4:	100b883a 	mov	r5,r2
1000faf8:	e1bff617 	ldw	r6,-40(fp)
1000fafc:	00098ac0 	call	100098ac <memcpy>
      ptr   += n;
1000fb00:	e0fff517 	ldw	r3,-44(fp)
1000fb04:	e0bff617 	ldw	r2,-40(fp)
1000fb08:	1885883a 	add	r2,r3,r2
1000fb0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fb10:	e0fffe17 	ldw	r3,-8(fp)
1000fb14:	e0bff617 	ldw	r2,-40(fp)
1000fb18:	1885c83a 	sub	r2,r3,r2
1000fb1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fb20:	e0fff817 	ldw	r3,-32(fp)
1000fb24:	e0bff617 	ldw	r2,-40(fp)
1000fb28:	1885883a 	add	r2,r3,r2
1000fb2c:	10c1ffcc 	andi	r3,r2,2047
1000fb30:	e0bffc17 	ldw	r2,-16(fp)
1000fb34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fb38:	e0bffe17 	ldw	r2,-8(fp)
1000fb3c:	00bfce16 	blt	zero,r2,1000fa78 <__alt_data_end+0xf800fa78>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fb40:	e0fff517 	ldw	r3,-44(fp)
1000fb44:	e0bffd17 	ldw	r2,-12(fp)
1000fb48:	18800126 	beq	r3,r2,1000fb50 <altera_avalon_jtag_uart_read+0x104>
      break;
1000fb4c:	00001506 	br	1000fba4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fb50:	e0bfff17 	ldw	r2,-4(fp)
1000fb54:	1090000c 	andi	r2,r2,16384
1000fb58:	10000126 	beq	r2,zero,1000fb60 <altera_avalon_jtag_uart_read+0x114>
      break;
1000fb5c:	00001106 	br	1000fba4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fb60:	0001883a 	nop
1000fb64:	e0bffc17 	ldw	r2,-16(fp)
1000fb68:	10c00a17 	ldw	r3,40(r2)
1000fb6c:	e0bff717 	ldw	r2,-36(fp)
1000fb70:	1880051e 	bne	r3,r2,1000fb88 <altera_avalon_jtag_uart_read+0x13c>
1000fb74:	e0bffc17 	ldw	r2,-16(fp)
1000fb78:	10c00917 	ldw	r3,36(r2)
1000fb7c:	e0bffc17 	ldw	r2,-16(fp)
1000fb80:	10800117 	ldw	r2,4(r2)
1000fb84:	18bff736 	bltu	r3,r2,1000fb64 <__alt_data_end+0xf800fb64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fb88:	e0bffc17 	ldw	r2,-16(fp)
1000fb8c:	10c00a17 	ldw	r3,40(r2)
1000fb90:	e0bff717 	ldw	r2,-36(fp)
1000fb94:	1880011e 	bne	r3,r2,1000fb9c <altera_avalon_jtag_uart_read+0x150>
      break;
1000fb98:	00000206 	br	1000fba4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fb9c:	e0bffe17 	ldw	r2,-8(fp)
1000fba0:	00bfb516 	blt	zero,r2,1000fa78 <__alt_data_end+0xf800fa78>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fba4:	e0fff517 	ldw	r3,-44(fp)
1000fba8:	e0bffd17 	ldw	r2,-12(fp)
1000fbac:	18801826 	beq	r3,r2,1000fc10 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fbb0:	0005303a 	rdctl	r2,status
1000fbb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fbb8:	e0fffa17 	ldw	r3,-24(fp)
1000fbbc:	00bfff84 	movi	r2,-2
1000fbc0:	1884703a 	and	r2,r3,r2
1000fbc4:	1001703a 	wrctl	status,r2
  
  return context;
1000fbc8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fbcc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fbd0:	e0bffc17 	ldw	r2,-16(fp)
1000fbd4:	10800817 	ldw	r2,32(r2)
1000fbd8:	10c00054 	ori	r3,r2,1
1000fbdc:	e0bffc17 	ldw	r2,-16(fp)
1000fbe0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fbe4:	e0bffc17 	ldw	r2,-16(fp)
1000fbe8:	10800017 	ldw	r2,0(r2)
1000fbec:	10800104 	addi	r2,r2,4
1000fbf0:	1007883a 	mov	r3,r2
1000fbf4:	e0bffc17 	ldw	r2,-16(fp)
1000fbf8:	10800817 	ldw	r2,32(r2)
1000fbfc:	18800035 	stwio	r2,0(r3)
1000fc00:	e0bff917 	ldw	r2,-28(fp)
1000fc04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fc08:	e0bffb17 	ldw	r2,-20(fp)
1000fc0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fc10:	e0fff517 	ldw	r3,-44(fp)
1000fc14:	e0bffd17 	ldw	r2,-12(fp)
1000fc18:	18800426 	beq	r3,r2,1000fc2c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000fc1c:	e0fff517 	ldw	r3,-44(fp)
1000fc20:	e0bffd17 	ldw	r2,-12(fp)
1000fc24:	1885c83a 	sub	r2,r3,r2
1000fc28:	00000606 	br	1000fc44 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000fc2c:	e0bfff17 	ldw	r2,-4(fp)
1000fc30:	1090000c 	andi	r2,r2,16384
1000fc34:	10000226 	beq	r2,zero,1000fc40 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000fc38:	00bffd44 	movi	r2,-11
1000fc3c:	00000106 	br	1000fc44 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000fc40:	00bffec4 	movi	r2,-5
}
1000fc44:	e037883a 	mov	sp,fp
1000fc48:	dfc00117 	ldw	ra,4(sp)
1000fc4c:	df000017 	ldw	fp,0(sp)
1000fc50:	dec00204 	addi	sp,sp,8
1000fc54:	f800283a 	ret

1000fc58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fc58:	defff304 	addi	sp,sp,-52
1000fc5c:	dfc00c15 	stw	ra,48(sp)
1000fc60:	df000b15 	stw	fp,44(sp)
1000fc64:	df000b04 	addi	fp,sp,44
1000fc68:	e13ffc15 	stw	r4,-16(fp)
1000fc6c:	e17ffd15 	stw	r5,-12(fp)
1000fc70:	e1bffe15 	stw	r6,-8(fp)
1000fc74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fc78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fc7c:	e0bffd17 	ldw	r2,-12(fp)
1000fc80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fc84:	00003806 	br	1000fd68 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fc88:	e0bffc17 	ldw	r2,-16(fp)
1000fc8c:	10800c17 	ldw	r2,48(r2)
1000fc90:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fc94:	e0bffc17 	ldw	r2,-16(fp)
1000fc98:	10800d17 	ldw	r2,52(r2)
1000fc9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fca0:	e0fff817 	ldw	r3,-32(fp)
1000fca4:	e0bff517 	ldw	r2,-44(fp)
1000fca8:	1880062e 	bgeu	r3,r2,1000fcc4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fcac:	e0fff517 	ldw	r3,-44(fp)
1000fcb0:	e0bff817 	ldw	r2,-32(fp)
1000fcb4:	1885c83a 	sub	r2,r3,r2
1000fcb8:	10bfffc4 	addi	r2,r2,-1
1000fcbc:	e0bff615 	stw	r2,-40(fp)
1000fcc0:	00000b06 	br	1000fcf0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000fcc4:	e0bff517 	ldw	r2,-44(fp)
1000fcc8:	10000526 	beq	r2,zero,1000fce0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fccc:	00c20004 	movi	r3,2048
1000fcd0:	e0bff817 	ldw	r2,-32(fp)
1000fcd4:	1885c83a 	sub	r2,r3,r2
1000fcd8:	e0bff615 	stw	r2,-40(fp)
1000fcdc:	00000406 	br	1000fcf0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fce0:	00c1ffc4 	movi	r3,2047
1000fce4:	e0bff817 	ldw	r2,-32(fp)
1000fce8:	1885c83a 	sub	r2,r3,r2
1000fcec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fcf0:	e0bff617 	ldw	r2,-40(fp)
1000fcf4:	1000011e 	bne	r2,zero,1000fcfc <altera_avalon_jtag_uart_write+0xa4>
        break;
1000fcf8:	00001d06 	br	1000fd70 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000fcfc:	e0fffe17 	ldw	r3,-8(fp)
1000fd00:	e0bff617 	ldw	r2,-40(fp)
1000fd04:	1880022e 	bgeu	r3,r2,1000fd10 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000fd08:	e0bffe17 	ldw	r2,-8(fp)
1000fd0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fd10:	e0bff817 	ldw	r2,-32(fp)
1000fd14:	10820e04 	addi	r2,r2,2104
1000fd18:	e0fffc17 	ldw	r3,-16(fp)
1000fd1c:	1885883a 	add	r2,r3,r2
1000fd20:	1009883a 	mov	r4,r2
1000fd24:	e17ffd17 	ldw	r5,-12(fp)
1000fd28:	e1bff617 	ldw	r6,-40(fp)
1000fd2c:	00098ac0 	call	100098ac <memcpy>
      ptr   += n;
1000fd30:	e0fffd17 	ldw	r3,-12(fp)
1000fd34:	e0bff617 	ldw	r2,-40(fp)
1000fd38:	1885883a 	add	r2,r3,r2
1000fd3c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000fd40:	e0fffe17 	ldw	r3,-8(fp)
1000fd44:	e0bff617 	ldw	r2,-40(fp)
1000fd48:	1885c83a 	sub	r2,r3,r2
1000fd4c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fd50:	e0fff817 	ldw	r3,-32(fp)
1000fd54:	e0bff617 	ldw	r2,-40(fp)
1000fd58:	1885883a 	add	r2,r3,r2
1000fd5c:	10c1ffcc 	andi	r3,r2,2047
1000fd60:	e0bffc17 	ldw	r2,-16(fp)
1000fd64:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fd68:	e0bffe17 	ldw	r2,-8(fp)
1000fd6c:	00bfc616 	blt	zero,r2,1000fc88 <__alt_data_end+0xf800fc88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fd70:	0005303a 	rdctl	r2,status
1000fd74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fd78:	e0fffa17 	ldw	r3,-24(fp)
1000fd7c:	00bfff84 	movi	r2,-2
1000fd80:	1884703a 	and	r2,r3,r2
1000fd84:	1001703a 	wrctl	status,r2
  
  return context;
1000fd88:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000fd8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fd90:	e0bffc17 	ldw	r2,-16(fp)
1000fd94:	10800817 	ldw	r2,32(r2)
1000fd98:	10c00094 	ori	r3,r2,2
1000fd9c:	e0bffc17 	ldw	r2,-16(fp)
1000fda0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fda4:	e0bffc17 	ldw	r2,-16(fp)
1000fda8:	10800017 	ldw	r2,0(r2)
1000fdac:	10800104 	addi	r2,r2,4
1000fdb0:	1007883a 	mov	r3,r2
1000fdb4:	e0bffc17 	ldw	r2,-16(fp)
1000fdb8:	10800817 	ldw	r2,32(r2)
1000fdbc:	18800035 	stwio	r2,0(r3)
1000fdc0:	e0bff917 	ldw	r2,-28(fp)
1000fdc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fdc8:	e0bffb17 	ldw	r2,-20(fp)
1000fdcc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000fdd0:	e0bffe17 	ldw	r2,-8(fp)
1000fdd4:	0080120e 	bge	zero,r2,1000fe20 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000fdd8:	e0bfff17 	ldw	r2,-4(fp)
1000fddc:	1090000c 	andi	r2,r2,16384
1000fde0:	10000126 	beq	r2,zero,1000fde8 <altera_avalon_jtag_uart_write+0x190>
        break;
1000fde4:	00001006 	br	1000fe28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000fde8:	0001883a 	nop
1000fdec:	e0bffc17 	ldw	r2,-16(fp)
1000fdf0:	10c00d17 	ldw	r3,52(r2)
1000fdf4:	e0bff517 	ldw	r2,-44(fp)
1000fdf8:	1880051e 	bne	r3,r2,1000fe10 <altera_avalon_jtag_uart_write+0x1b8>
1000fdfc:	e0bffc17 	ldw	r2,-16(fp)
1000fe00:	10c00917 	ldw	r3,36(r2)
1000fe04:	e0bffc17 	ldw	r2,-16(fp)
1000fe08:	10800117 	ldw	r2,4(r2)
1000fe0c:	18bff736 	bltu	r3,r2,1000fdec <__alt_data_end+0xf800fdec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000fe10:	e0bffc17 	ldw	r2,-16(fp)
1000fe14:	10800917 	ldw	r2,36(r2)
1000fe18:	10000126 	beq	r2,zero,1000fe20 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000fe1c:	00000206 	br	1000fe28 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000fe20:	e0bffe17 	ldw	r2,-8(fp)
1000fe24:	00bf9716 	blt	zero,r2,1000fc84 <__alt_data_end+0xf800fc84>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000fe28:	e0fffd17 	ldw	r3,-12(fp)
1000fe2c:	e0bff717 	ldw	r2,-36(fp)
1000fe30:	18800426 	beq	r3,r2,1000fe44 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000fe34:	e0fffd17 	ldw	r3,-12(fp)
1000fe38:	e0bff717 	ldw	r2,-36(fp)
1000fe3c:	1885c83a 	sub	r2,r3,r2
1000fe40:	00000606 	br	1000fe5c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000fe44:	e0bfff17 	ldw	r2,-4(fp)
1000fe48:	1090000c 	andi	r2,r2,16384
1000fe4c:	10000226 	beq	r2,zero,1000fe58 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000fe50:	00bffd44 	movi	r2,-11
1000fe54:	00000106 	br	1000fe5c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000fe58:	00bffec4 	movi	r2,-5
}
1000fe5c:	e037883a 	mov	sp,fp
1000fe60:	dfc00117 	ldw	ra,4(sp)
1000fe64:	df000017 	ldw	fp,0(sp)
1000fe68:	dec00204 	addi	sp,sp,8
1000fe6c:	f800283a 	ret

1000fe70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000fe70:	defff504 	addi	sp,sp,-44
1000fe74:	df000a15 	stw	fp,40(sp)
1000fe78:	df000a04 	addi	fp,sp,40
1000fe7c:	e13ffc15 	stw	r4,-16(fp)
1000fe80:	e17ffd15 	stw	r5,-12(fp)
1000fe84:	e1bffe15 	stw	r6,-8(fp)
1000fe88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000fe8c:	e03ff615 	stw	zero,-40(fp)
1000fe90:	00840074 	movhi	r2,4097
1000fe94:	1092b504 	addi	r2,r2,19156
1000fe98:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000fe9c:	10003f26 	beq	r2,zero,1000ff9c <alt_alarm_start+0x12c>
  {
    if (alarm)
1000fea0:	e0bffc17 	ldw	r2,-16(fp)
1000fea4:	10003b26 	beq	r2,zero,1000ff94 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000fea8:	e0bffc17 	ldw	r2,-16(fp)
1000feac:	e0fffe17 	ldw	r3,-8(fp)
1000feb0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000feb4:	e0bffc17 	ldw	r2,-16(fp)
1000feb8:	e0ffff17 	ldw	r3,-4(fp)
1000febc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fec0:	0005303a 	rdctl	r2,status
1000fec4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fec8:	e0fff817 	ldw	r3,-32(fp)
1000fecc:	00bfff84 	movi	r2,-2
1000fed0:	1884703a 	and	r2,r3,r2
1000fed4:	1001703a 	wrctl	status,r2
  
  return context;
1000fed8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000fedc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000fee0:	00840074 	movhi	r2,4097
1000fee4:	1092b604 	addi	r2,r2,19160
1000fee8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000feec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000fef0:	e0fffd17 	ldw	r3,-12(fp)
1000fef4:	e0bff617 	ldw	r2,-40(fp)
1000fef8:	1885883a 	add	r2,r3,r2
1000fefc:	10c00044 	addi	r3,r2,1
1000ff00:	e0bffc17 	ldw	r2,-16(fp)
1000ff04:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ff08:	e0bffc17 	ldw	r2,-16(fp)
1000ff0c:	10c00217 	ldw	r3,8(r2)
1000ff10:	e0bff617 	ldw	r2,-40(fp)
1000ff14:	1880042e 	bgeu	r3,r2,1000ff28 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ff18:	e0bffc17 	ldw	r2,-16(fp)
1000ff1c:	00c00044 	movi	r3,1
1000ff20:	10c00405 	stb	r3,16(r2)
1000ff24:	00000206 	br	1000ff30 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ff28:	e0bffc17 	ldw	r2,-16(fp)
1000ff2c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000ff30:	e0fffc17 	ldw	r3,-16(fp)
1000ff34:	00840074 	movhi	r2,4097
1000ff38:	108bde04 	addi	r2,r2,12152
1000ff3c:	e0bff915 	stw	r2,-28(fp)
1000ff40:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ff44:	e0bffa17 	ldw	r2,-24(fp)
1000ff48:	e0fff917 	ldw	r3,-28(fp)
1000ff4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ff50:	e0bff917 	ldw	r2,-28(fp)
1000ff54:	10c00017 	ldw	r3,0(r2)
1000ff58:	e0bffa17 	ldw	r2,-24(fp)
1000ff5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ff60:	e0bff917 	ldw	r2,-28(fp)
1000ff64:	10800017 	ldw	r2,0(r2)
1000ff68:	e0fffa17 	ldw	r3,-24(fp)
1000ff6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ff70:	e0bff917 	ldw	r2,-28(fp)
1000ff74:	e0fffa17 	ldw	r3,-24(fp)
1000ff78:	10c00015 	stw	r3,0(r2)
1000ff7c:	e0bff717 	ldw	r2,-36(fp)
1000ff80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ff84:	e0bffb17 	ldw	r2,-20(fp)
1000ff88:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ff8c:	0005883a 	mov	r2,zero
1000ff90:	00000306 	br	1000ffa0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ff94:	00bffa84 	movi	r2,-22
1000ff98:	00000106 	br	1000ffa0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ff9c:	00bfde84 	movi	r2,-134
  }
}
1000ffa0:	e037883a 	mov	sp,fp
1000ffa4:	df000017 	ldw	fp,0(sp)
1000ffa8:	dec00104 	addi	sp,sp,4
1000ffac:	f800283a 	ret

1000ffb0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ffb0:	deffff04 	addi	sp,sp,-4
1000ffb4:	df000015 	stw	fp,0(sp)
1000ffb8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ffbc:	e037883a 	mov	sp,fp
1000ffc0:	df000017 	ldw	fp,0(sp)
1000ffc4:	dec00104 	addi	sp,sp,4
1000ffc8:	f800283a 	ret

1000ffcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ffcc:	defffe04 	addi	sp,sp,-8
1000ffd0:	dfc00115 	stw	ra,4(sp)
1000ffd4:	df000015 	stw	fp,0(sp)
1000ffd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ffdc:	00840074 	movhi	r2,4097
1000ffe0:	108bdb04 	addi	r2,r2,12140
1000ffe4:	10800017 	ldw	r2,0(r2)
1000ffe8:	10000526 	beq	r2,zero,10010000 <alt_get_errno+0x34>
1000ffec:	00840074 	movhi	r2,4097
1000fff0:	108bdb04 	addi	r2,r2,12140
1000fff4:	10800017 	ldw	r2,0(r2)
1000fff8:	103ee83a 	callr	r2
1000fffc:	00000206 	br	10010008 <alt_get_errno+0x3c>
10010000:	00840074 	movhi	r2,4097
10010004:	1092b004 	addi	r2,r2,19136
}
10010008:	e037883a 	mov	sp,fp
1001000c:	dfc00117 	ldw	ra,4(sp)
10010010:	df000017 	ldw	fp,0(sp)
10010014:	dec00204 	addi	sp,sp,8
10010018:	f800283a 	ret

1001001c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1001001c:	defffa04 	addi	sp,sp,-24
10010020:	dfc00515 	stw	ra,20(sp)
10010024:	df000415 	stw	fp,16(sp)
10010028:	df000404 	addi	fp,sp,16
1001002c:	e13ffe15 	stw	r4,-8(fp)
10010030:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010034:	e0bffe17 	ldw	r2,-8(fp)
10010038:	10000326 	beq	r2,zero,10010048 <alt_dev_llist_insert+0x2c>
1001003c:	e0bffe17 	ldw	r2,-8(fp)
10010040:	10800217 	ldw	r2,8(r2)
10010044:	1000061e 	bne	r2,zero,10010060 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010048:	000ffcc0 	call	1000ffcc <alt_get_errno>
1001004c:	1007883a 	mov	r3,r2
10010050:	00800584 	movi	r2,22
10010054:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010058:	00bffa84 	movi	r2,-22
1001005c:	00001306 	br	100100ac <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010060:	e0bffe17 	ldw	r2,-8(fp)
10010064:	e0ffff17 	ldw	r3,-4(fp)
10010068:	e0fffc15 	stw	r3,-16(fp)
1001006c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010070:	e0bffd17 	ldw	r2,-12(fp)
10010074:	e0fffc17 	ldw	r3,-16(fp)
10010078:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001007c:	e0bffc17 	ldw	r2,-16(fp)
10010080:	10c00017 	ldw	r3,0(r2)
10010084:	e0bffd17 	ldw	r2,-12(fp)
10010088:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001008c:	e0bffc17 	ldw	r2,-16(fp)
10010090:	10800017 	ldw	r2,0(r2)
10010094:	e0fffd17 	ldw	r3,-12(fp)
10010098:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001009c:	e0bffc17 	ldw	r2,-16(fp)
100100a0:	e0fffd17 	ldw	r3,-12(fp)
100100a4:	10c00015 	stw	r3,0(r2)

  return 0;  
100100a8:	0005883a 	mov	r2,zero
}
100100ac:	e037883a 	mov	sp,fp
100100b0:	dfc00117 	ldw	ra,4(sp)
100100b4:	df000017 	ldw	fp,0(sp)
100100b8:	dec00204 	addi	sp,sp,8
100100bc:	f800283a 	ret

100100c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100100c0:	defffd04 	addi	sp,sp,-12
100100c4:	dfc00215 	stw	ra,8(sp)
100100c8:	df000115 	stw	fp,4(sp)
100100cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100100d0:	00840074 	movhi	r2,4097
100100d4:	10843404 	addi	r2,r2,4304
100100d8:	e0bfff15 	stw	r2,-4(fp)
100100dc:	00000606 	br	100100f8 <_do_ctors+0x38>
        (*ctor) (); 
100100e0:	e0bfff17 	ldw	r2,-4(fp)
100100e4:	10800017 	ldw	r2,0(r2)
100100e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100100ec:	e0bfff17 	ldw	r2,-4(fp)
100100f0:	10bfff04 	addi	r2,r2,-4
100100f4:	e0bfff15 	stw	r2,-4(fp)
100100f8:	e0ffff17 	ldw	r3,-4(fp)
100100fc:	00840074 	movhi	r2,4097
10010100:	10843504 	addi	r2,r2,4308
10010104:	18bff62e 	bgeu	r3,r2,100100e0 <__alt_data_end+0xf80100e0>
        (*ctor) (); 
}
10010108:	e037883a 	mov	sp,fp
1001010c:	dfc00117 	ldw	ra,4(sp)
10010110:	df000017 	ldw	fp,0(sp)
10010114:	dec00204 	addi	sp,sp,8
10010118:	f800283a 	ret

1001011c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1001011c:	defffd04 	addi	sp,sp,-12
10010120:	dfc00215 	stw	ra,8(sp)
10010124:	df000115 	stw	fp,4(sp)
10010128:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001012c:	00840074 	movhi	r2,4097
10010130:	10843404 	addi	r2,r2,4304
10010134:	e0bfff15 	stw	r2,-4(fp)
10010138:	00000606 	br	10010154 <_do_dtors+0x38>
        (*dtor) (); 
1001013c:	e0bfff17 	ldw	r2,-4(fp)
10010140:	10800017 	ldw	r2,0(r2)
10010144:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010148:	e0bfff17 	ldw	r2,-4(fp)
1001014c:	10bfff04 	addi	r2,r2,-4
10010150:	e0bfff15 	stw	r2,-4(fp)
10010154:	e0ffff17 	ldw	r3,-4(fp)
10010158:	00840074 	movhi	r2,4097
1001015c:	10843504 	addi	r2,r2,4308
10010160:	18bff62e 	bgeu	r3,r2,1001013c <__alt_data_end+0xf801013c>
        (*dtor) (); 
}
10010164:	e037883a 	mov	sp,fp
10010168:	dfc00117 	ldw	ra,4(sp)
1001016c:	df000017 	ldw	fp,0(sp)
10010170:	dec00204 	addi	sp,sp,8
10010174:	f800283a 	ret

10010178 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010178:	deffff04 	addi	sp,sp,-4
1001017c:	df000015 	stw	fp,0(sp)
10010180:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010184:	e037883a 	mov	sp,fp
10010188:	df000017 	ldw	fp,0(sp)
1001018c:	dec00104 	addi	sp,sp,4
10010190:	f800283a 	ret

10010194 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010194:	defff904 	addi	sp,sp,-28
10010198:	dfc00615 	stw	ra,24(sp)
1001019c:	df000515 	stw	fp,20(sp)
100101a0:	df000504 	addi	fp,sp,20
100101a4:	e13ffc15 	stw	r4,-16(fp)
100101a8:	e17ffd15 	stw	r5,-12(fp)
100101ac:	e1bffe15 	stw	r6,-8(fp)
100101b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100101b4:	e0800217 	ldw	r2,8(fp)
100101b8:	d8800015 	stw	r2,0(sp)
100101bc:	e13ffc17 	ldw	r4,-16(fp)
100101c0:	e17ffd17 	ldw	r5,-12(fp)
100101c4:	e1bffe17 	ldw	r6,-8(fp)
100101c8:	e1ffff17 	ldw	r7,-4(fp)
100101cc:	00103740 	call	10010374 <alt_iic_isr_register>
}  
100101d0:	e037883a 	mov	sp,fp
100101d4:	dfc00117 	ldw	ra,4(sp)
100101d8:	df000017 	ldw	fp,0(sp)
100101dc:	dec00204 	addi	sp,sp,8
100101e0:	f800283a 	ret

100101e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100101e4:	defff904 	addi	sp,sp,-28
100101e8:	df000615 	stw	fp,24(sp)
100101ec:	df000604 	addi	fp,sp,24
100101f0:	e13ffe15 	stw	r4,-8(fp)
100101f4:	e17fff15 	stw	r5,-4(fp)
100101f8:	e0bfff17 	ldw	r2,-4(fp)
100101fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010200:	0005303a 	rdctl	r2,status
10010204:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010208:	e0fffb17 	ldw	r3,-20(fp)
1001020c:	00bfff84 	movi	r2,-2
10010210:	1884703a 	and	r2,r3,r2
10010214:	1001703a 	wrctl	status,r2
  
  return context;
10010218:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001021c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010220:	e0bffa17 	ldw	r2,-24(fp)
10010224:	00c00044 	movi	r3,1
10010228:	1884983a 	sll	r2,r3,r2
1001022c:	1007883a 	mov	r3,r2
10010230:	00840074 	movhi	r2,4097
10010234:	1092b404 	addi	r2,r2,19152
10010238:	10800017 	ldw	r2,0(r2)
1001023c:	1886b03a 	or	r3,r3,r2
10010240:	00840074 	movhi	r2,4097
10010244:	1092b404 	addi	r2,r2,19152
10010248:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001024c:	00840074 	movhi	r2,4097
10010250:	1092b404 	addi	r2,r2,19152
10010254:	10800017 	ldw	r2,0(r2)
10010258:	100170fa 	wrctl	ienable,r2
1001025c:	e0bffc17 	ldw	r2,-16(fp)
10010260:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010264:	e0bffd17 	ldw	r2,-12(fp)
10010268:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001026c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010270:	0001883a 	nop
}
10010274:	e037883a 	mov	sp,fp
10010278:	df000017 	ldw	fp,0(sp)
1001027c:	dec00104 	addi	sp,sp,4
10010280:	f800283a 	ret

10010284 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010284:	defff904 	addi	sp,sp,-28
10010288:	df000615 	stw	fp,24(sp)
1001028c:	df000604 	addi	fp,sp,24
10010290:	e13ffe15 	stw	r4,-8(fp)
10010294:	e17fff15 	stw	r5,-4(fp)
10010298:	e0bfff17 	ldw	r2,-4(fp)
1001029c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100102a0:	0005303a 	rdctl	r2,status
100102a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102a8:	e0fffb17 	ldw	r3,-20(fp)
100102ac:	00bfff84 	movi	r2,-2
100102b0:	1884703a 	and	r2,r3,r2
100102b4:	1001703a 	wrctl	status,r2
  
  return context;
100102b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100102bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100102c0:	e0bffa17 	ldw	r2,-24(fp)
100102c4:	00c00044 	movi	r3,1
100102c8:	1884983a 	sll	r2,r3,r2
100102cc:	0084303a 	nor	r2,zero,r2
100102d0:	1007883a 	mov	r3,r2
100102d4:	00840074 	movhi	r2,4097
100102d8:	1092b404 	addi	r2,r2,19152
100102dc:	10800017 	ldw	r2,0(r2)
100102e0:	1886703a 	and	r3,r3,r2
100102e4:	00840074 	movhi	r2,4097
100102e8:	1092b404 	addi	r2,r2,19152
100102ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100102f0:	00840074 	movhi	r2,4097
100102f4:	1092b404 	addi	r2,r2,19152
100102f8:	10800017 	ldw	r2,0(r2)
100102fc:	100170fa 	wrctl	ienable,r2
10010300:	e0bffc17 	ldw	r2,-16(fp)
10010304:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010308:	e0bffd17 	ldw	r2,-12(fp)
1001030c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010310:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010314:	0001883a 	nop
}
10010318:	e037883a 	mov	sp,fp
1001031c:	df000017 	ldw	fp,0(sp)
10010320:	dec00104 	addi	sp,sp,4
10010324:	f800283a 	ret

10010328 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010328:	defffc04 	addi	sp,sp,-16
1001032c:	df000315 	stw	fp,12(sp)
10010330:	df000304 	addi	fp,sp,12
10010334:	e13ffe15 	stw	r4,-8(fp)
10010338:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1001033c:	000530fa 	rdctl	r2,ienable
10010340:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010344:	e0bfff17 	ldw	r2,-4(fp)
10010348:	00c00044 	movi	r3,1
1001034c:	1884983a 	sll	r2,r3,r2
10010350:	1007883a 	mov	r3,r2
10010354:	e0bffd17 	ldw	r2,-12(fp)
10010358:	1884703a 	and	r2,r3,r2
1001035c:	1004c03a 	cmpne	r2,r2,zero
10010360:	10803fcc 	andi	r2,r2,255
}
10010364:	e037883a 	mov	sp,fp
10010368:	df000017 	ldw	fp,0(sp)
1001036c:	dec00104 	addi	sp,sp,4
10010370:	f800283a 	ret

10010374 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010374:	defff504 	addi	sp,sp,-44
10010378:	dfc00a15 	stw	ra,40(sp)
1001037c:	df000915 	stw	fp,36(sp)
10010380:	df000904 	addi	fp,sp,36
10010384:	e13ffc15 	stw	r4,-16(fp)
10010388:	e17ffd15 	stw	r5,-12(fp)
1001038c:	e1bffe15 	stw	r6,-8(fp)
10010390:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010394:	00bffa84 	movi	r2,-22
10010398:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1001039c:	e0bffd17 	ldw	r2,-12(fp)
100103a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100103a4:	e0bff817 	ldw	r2,-32(fp)
100103a8:	10800808 	cmpgei	r2,r2,32
100103ac:	1000271e 	bne	r2,zero,1001044c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100103b0:	0005303a 	rdctl	r2,status
100103b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103b8:	e0fffa17 	ldw	r3,-24(fp)
100103bc:	00bfff84 	movi	r2,-2
100103c0:	1884703a 	and	r2,r3,r2
100103c4:	1001703a 	wrctl	status,r2
  
  return context;
100103c8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100103cc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100103d0:	00840074 	movhi	r2,4097
100103d4:	10934204 	addi	r2,r2,19720
100103d8:	e0fff817 	ldw	r3,-32(fp)
100103dc:	180690fa 	slli	r3,r3,3
100103e0:	10c5883a 	add	r2,r2,r3
100103e4:	e0fffe17 	ldw	r3,-8(fp)
100103e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100103ec:	00840074 	movhi	r2,4097
100103f0:	10934204 	addi	r2,r2,19720
100103f4:	e0fff817 	ldw	r3,-32(fp)
100103f8:	180690fa 	slli	r3,r3,3
100103fc:	10c5883a 	add	r2,r2,r3
10010400:	10800104 	addi	r2,r2,4
10010404:	e0ffff17 	ldw	r3,-4(fp)
10010408:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1001040c:	e0bffe17 	ldw	r2,-8(fp)
10010410:	10000526 	beq	r2,zero,10010428 <alt_iic_isr_register+0xb4>
10010414:	e0bff817 	ldw	r2,-32(fp)
10010418:	e13ffc17 	ldw	r4,-16(fp)
1001041c:	100b883a 	mov	r5,r2
10010420:	00101e40 	call	100101e4 <alt_ic_irq_enable>
10010424:	00000406 	br	10010438 <alt_iic_isr_register+0xc4>
10010428:	e0bff817 	ldw	r2,-32(fp)
1001042c:	e13ffc17 	ldw	r4,-16(fp)
10010430:	100b883a 	mov	r5,r2
10010434:	00102840 	call	10010284 <alt_ic_irq_disable>
10010438:	e0bff715 	stw	r2,-36(fp)
1001043c:	e0bff917 	ldw	r2,-28(fp)
10010440:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010444:	e0bffb17 	ldw	r2,-20(fp)
10010448:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1001044c:	e0bff717 	ldw	r2,-36(fp)
}
10010450:	e037883a 	mov	sp,fp
10010454:	dfc00117 	ldw	ra,4(sp)
10010458:	df000017 	ldw	fp,0(sp)
1001045c:	dec00204 	addi	sp,sp,8
10010460:	f800283a 	ret

10010464 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010464:	defff804 	addi	sp,sp,-32
10010468:	dfc00715 	stw	ra,28(sp)
1001046c:	df000615 	stw	fp,24(sp)
10010470:	dc000515 	stw	r16,20(sp)
10010474:	df000604 	addi	fp,sp,24
10010478:	e13ffb15 	stw	r4,-20(fp)
1001047c:	e17ffc15 	stw	r5,-16(fp)
10010480:	e1bffd15 	stw	r6,-12(fp)
10010484:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010488:	e13ffc17 	ldw	r4,-16(fp)
1001048c:	e17ffd17 	ldw	r5,-12(fp)
10010490:	e1bffe17 	ldw	r6,-8(fp)
10010494:	00107000 	call	10010700 <open>
10010498:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1001049c:	e0bffa17 	ldw	r2,-24(fp)
100104a0:	10002216 	blt	r2,zero,1001052c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100104a4:	04040074 	movhi	r16,4097
100104a8:	84075804 	addi	r16,r16,7520
100104ac:	e0bffa17 	ldw	r2,-24(fp)
100104b0:	1009883a 	mov	r4,r2
100104b4:	01400304 	movi	r5,12
100104b8:	0002c180 	call	10002c18 <__mulsi3>
100104bc:	8085883a 	add	r2,r16,r2
100104c0:	10c00017 	ldw	r3,0(r2)
100104c4:	e0bffb17 	ldw	r2,-20(fp)
100104c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100104cc:	04040074 	movhi	r16,4097
100104d0:	84075804 	addi	r16,r16,7520
100104d4:	e0bffa17 	ldw	r2,-24(fp)
100104d8:	1009883a 	mov	r4,r2
100104dc:	01400304 	movi	r5,12
100104e0:	0002c180 	call	10002c18 <__mulsi3>
100104e4:	8085883a 	add	r2,r16,r2
100104e8:	10800104 	addi	r2,r2,4
100104ec:	10c00017 	ldw	r3,0(r2)
100104f0:	e0bffb17 	ldw	r2,-20(fp)
100104f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100104f8:	04040074 	movhi	r16,4097
100104fc:	84075804 	addi	r16,r16,7520
10010500:	e0bffa17 	ldw	r2,-24(fp)
10010504:	1009883a 	mov	r4,r2
10010508:	01400304 	movi	r5,12
1001050c:	0002c180 	call	10002c18 <__mulsi3>
10010510:	8085883a 	add	r2,r16,r2
10010514:	10800204 	addi	r2,r2,8
10010518:	10c00017 	ldw	r3,0(r2)
1001051c:	e0bffb17 	ldw	r2,-20(fp)
10010520:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010524:	e13ffa17 	ldw	r4,-24(fp)
10010528:	000f0f00 	call	1000f0f0 <alt_release_fd>
  }
} 
1001052c:	e6ffff04 	addi	sp,fp,-4
10010530:	dfc00217 	ldw	ra,8(sp)
10010534:	df000117 	ldw	fp,4(sp)
10010538:	dc000017 	ldw	r16,0(sp)
1001053c:	dec00304 	addi	sp,sp,12
10010540:	f800283a 	ret

10010544 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010544:	defffb04 	addi	sp,sp,-20
10010548:	dfc00415 	stw	ra,16(sp)
1001054c:	df000315 	stw	fp,12(sp)
10010550:	df000304 	addi	fp,sp,12
10010554:	e13ffd15 	stw	r4,-12(fp)
10010558:	e17ffe15 	stw	r5,-8(fp)
1001055c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010560:	01040074 	movhi	r4,4097
10010564:	21075b04 	addi	r4,r4,7532
10010568:	e17ffd17 	ldw	r5,-12(fp)
1001056c:	01800044 	movi	r6,1
10010570:	01c07fc4 	movi	r7,511
10010574:	00104640 	call	10010464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010578:	01040074 	movhi	r4,4097
1001057c:	21075804 	addi	r4,r4,7520
10010580:	e17ffe17 	ldw	r5,-8(fp)
10010584:	000d883a 	mov	r6,zero
10010588:	01c07fc4 	movi	r7,511
1001058c:	00104640 	call	10010464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010590:	01040074 	movhi	r4,4097
10010594:	21075e04 	addi	r4,r4,7544
10010598:	e17fff17 	ldw	r5,-4(fp)
1001059c:	01800044 	movi	r6,1
100105a0:	01c07fc4 	movi	r7,511
100105a4:	00104640 	call	10010464 <alt_open_fd>
}  
100105a8:	e037883a 	mov	sp,fp
100105ac:	dfc00117 	ldw	ra,4(sp)
100105b0:	df000017 	ldw	fp,0(sp)
100105b4:	dec00204 	addi	sp,sp,8
100105b8:	f800283a 	ret

100105bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100105bc:	defffe04 	addi	sp,sp,-8
100105c0:	dfc00115 	stw	ra,4(sp)
100105c4:	df000015 	stw	fp,0(sp)
100105c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100105cc:	00840074 	movhi	r2,4097
100105d0:	108bdb04 	addi	r2,r2,12140
100105d4:	10800017 	ldw	r2,0(r2)
100105d8:	10000526 	beq	r2,zero,100105f0 <alt_get_errno+0x34>
100105dc:	00840074 	movhi	r2,4097
100105e0:	108bdb04 	addi	r2,r2,12140
100105e4:	10800017 	ldw	r2,0(r2)
100105e8:	103ee83a 	callr	r2
100105ec:	00000206 	br	100105f8 <alt_get_errno+0x3c>
100105f0:	00840074 	movhi	r2,4097
100105f4:	1092b004 	addi	r2,r2,19136
}
100105f8:	e037883a 	mov	sp,fp
100105fc:	dfc00117 	ldw	ra,4(sp)
10010600:	df000017 	ldw	fp,0(sp)
10010604:	dec00204 	addi	sp,sp,8
10010608:	f800283a 	ret

1001060c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001060c:	defffb04 	addi	sp,sp,-20
10010610:	dfc00415 	stw	ra,16(sp)
10010614:	df000315 	stw	fp,12(sp)
10010618:	dc000215 	stw	r16,8(sp)
1001061c:	df000304 	addi	fp,sp,12
10010620:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010624:	e0bffe17 	ldw	r2,-8(fp)
10010628:	10800217 	ldw	r2,8(r2)
1001062c:	10d00034 	orhi	r3,r2,16384
10010630:	e0bffe17 	ldw	r2,-8(fp)
10010634:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010638:	e03ffd15 	stw	zero,-12(fp)
1001063c:	00002306 	br	100106cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010640:	04040074 	movhi	r16,4097
10010644:	84075804 	addi	r16,r16,7520
10010648:	e0bffd17 	ldw	r2,-12(fp)
1001064c:	1009883a 	mov	r4,r2
10010650:	01400304 	movi	r5,12
10010654:	0002c180 	call	10002c18 <__mulsi3>
10010658:	8085883a 	add	r2,r16,r2
1001065c:	10c00017 	ldw	r3,0(r2)
10010660:	e0bffe17 	ldw	r2,-8(fp)
10010664:	10800017 	ldw	r2,0(r2)
10010668:	1880151e 	bne	r3,r2,100106c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001066c:	04040074 	movhi	r16,4097
10010670:	84075804 	addi	r16,r16,7520
10010674:	e0bffd17 	ldw	r2,-12(fp)
10010678:	1009883a 	mov	r4,r2
1001067c:	01400304 	movi	r5,12
10010680:	0002c180 	call	10002c18 <__mulsi3>
10010684:	8085883a 	add	r2,r16,r2
10010688:	10800204 	addi	r2,r2,8
1001068c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010690:	10000b0e 	bge	r2,zero,100106c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010694:	e13ffd17 	ldw	r4,-12(fp)
10010698:	01400304 	movi	r5,12
1001069c:	0002c180 	call	10002c18 <__mulsi3>
100106a0:	1007883a 	mov	r3,r2
100106a4:	00840074 	movhi	r2,4097
100106a8:	10875804 	addi	r2,r2,7520
100106ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100106b0:	e0bffe17 	ldw	r2,-8(fp)
100106b4:	18800226 	beq	r3,r2,100106c0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100106b8:	00bffcc4 	movi	r2,-13
100106bc:	00000a06 	br	100106e8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100106c0:	e0bffd17 	ldw	r2,-12(fp)
100106c4:	10800044 	addi	r2,r2,1
100106c8:	e0bffd15 	stw	r2,-12(fp)
100106cc:	00840074 	movhi	r2,4097
100106d0:	108bda04 	addi	r2,r2,12136
100106d4:	10800017 	ldw	r2,0(r2)
100106d8:	1007883a 	mov	r3,r2
100106dc:	e0bffd17 	ldw	r2,-12(fp)
100106e0:	18bfd72e 	bgeu	r3,r2,10010640 <__alt_data_end+0xf8010640>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100106e4:	0005883a 	mov	r2,zero
}
100106e8:	e6ffff04 	addi	sp,fp,-4
100106ec:	dfc00217 	ldw	ra,8(sp)
100106f0:	df000117 	ldw	fp,4(sp)
100106f4:	dc000017 	ldw	r16,0(sp)
100106f8:	dec00304 	addi	sp,sp,12
100106fc:	f800283a 	ret

10010700 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010700:	defff604 	addi	sp,sp,-40
10010704:	dfc00915 	stw	ra,36(sp)
10010708:	df000815 	stw	fp,32(sp)
1001070c:	df000804 	addi	fp,sp,32
10010710:	e13ffd15 	stw	r4,-12(fp)
10010714:	e17ffe15 	stw	r5,-8(fp)
10010718:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001071c:	00bfffc4 	movi	r2,-1
10010720:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010724:	00bffb44 	movi	r2,-19
10010728:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001072c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010730:	e13ffd17 	ldw	r4,-12(fp)
10010734:	01440074 	movhi	r5,4097
10010738:	294bd804 	addi	r5,r5,12128
1001073c:	0010a1c0 	call	10010a1c <alt_find_dev>
10010740:	e0bff815 	stw	r2,-32(fp)
10010744:	e0bff817 	ldw	r2,-32(fp)
10010748:	1000051e 	bne	r2,zero,10010760 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001074c:	e13ffd17 	ldw	r4,-12(fp)
10010750:	0010aac0 	call	10010aac <alt_find_file>
10010754:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010758:	00800044 	movi	r2,1
1001075c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010760:	e0bff817 	ldw	r2,-32(fp)
10010764:	10002b26 	beq	r2,zero,10010814 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010768:	e13ff817 	ldw	r4,-32(fp)
1001076c:	0010bc00 	call	10010bc0 <alt_get_fd>
10010770:	e0bff915 	stw	r2,-28(fp)
10010774:	e0bff917 	ldw	r2,-28(fp)
10010778:	1000030e 	bge	r2,zero,10010788 <open+0x88>
    {
      status = index;
1001077c:	e0bff917 	ldw	r2,-28(fp)
10010780:	e0bffa15 	stw	r2,-24(fp)
10010784:	00002506 	br	1001081c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010788:	e13ff917 	ldw	r4,-28(fp)
1001078c:	01400304 	movi	r5,12
10010790:	0002c180 	call	10002c18 <__mulsi3>
10010794:	1007883a 	mov	r3,r2
10010798:	00840074 	movhi	r2,4097
1001079c:	10875804 	addi	r2,r2,7520
100107a0:	1885883a 	add	r2,r3,r2
100107a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100107a8:	e0fffe17 	ldw	r3,-8(fp)
100107ac:	00900034 	movhi	r2,16384
100107b0:	10bfffc4 	addi	r2,r2,-1
100107b4:	1886703a 	and	r3,r3,r2
100107b8:	e0bffc17 	ldw	r2,-16(fp)
100107bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100107c0:	e0bffb17 	ldw	r2,-20(fp)
100107c4:	1000051e 	bne	r2,zero,100107dc <open+0xdc>
100107c8:	e13ffc17 	ldw	r4,-16(fp)
100107cc:	001060c0 	call	1001060c <alt_file_locked>
100107d0:	e0bffa15 	stw	r2,-24(fp)
100107d4:	e0bffa17 	ldw	r2,-24(fp)
100107d8:	10001016 	blt	r2,zero,1001081c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100107dc:	e0bff817 	ldw	r2,-32(fp)
100107e0:	10800317 	ldw	r2,12(r2)
100107e4:	10000826 	beq	r2,zero,10010808 <open+0x108>
100107e8:	e0bff817 	ldw	r2,-32(fp)
100107ec:	10800317 	ldw	r2,12(r2)
100107f0:	e13ffc17 	ldw	r4,-16(fp)
100107f4:	e17ffd17 	ldw	r5,-12(fp)
100107f8:	e1bffe17 	ldw	r6,-8(fp)
100107fc:	e1ffff17 	ldw	r7,-4(fp)
10010800:	103ee83a 	callr	r2
10010804:	00000106 	br	1001080c <open+0x10c>
10010808:	0005883a 	mov	r2,zero
1001080c:	e0bffa15 	stw	r2,-24(fp)
10010810:	00000206 	br	1001081c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010814:	00bffb44 	movi	r2,-19
10010818:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001081c:	e0bffa17 	ldw	r2,-24(fp)
10010820:	1000090e 	bge	r2,zero,10010848 <open+0x148>
  {
    alt_release_fd (index);  
10010824:	e13ff917 	ldw	r4,-28(fp)
10010828:	000f0f00 	call	1000f0f0 <alt_release_fd>
    ALT_ERRNO = -status;
1001082c:	00105bc0 	call	100105bc <alt_get_errno>
10010830:	1007883a 	mov	r3,r2
10010834:	e0bffa17 	ldw	r2,-24(fp)
10010838:	0085c83a 	sub	r2,zero,r2
1001083c:	18800015 	stw	r2,0(r3)
    return -1;
10010840:	00bfffc4 	movi	r2,-1
10010844:	00000106 	br	1001084c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010848:	e0bff917 	ldw	r2,-28(fp)
}
1001084c:	e037883a 	mov	sp,fp
10010850:	dfc00117 	ldw	ra,4(sp)
10010854:	df000017 	ldw	fp,0(sp)
10010858:	dec00204 	addi	sp,sp,8
1001085c:	f800283a 	ret

10010860 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010860:	defffa04 	addi	sp,sp,-24
10010864:	df000515 	stw	fp,20(sp)
10010868:	df000504 	addi	fp,sp,20
1001086c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010870:	0005303a 	rdctl	r2,status
10010874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010878:	e0fffc17 	ldw	r3,-16(fp)
1001087c:	00bfff84 	movi	r2,-2
10010880:	1884703a 	and	r2,r3,r2
10010884:	1001703a 	wrctl	status,r2
  
  return context;
10010888:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001088c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10010890:	e0bfff17 	ldw	r2,-4(fp)
10010894:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010898:	e0bffd17 	ldw	r2,-12(fp)
1001089c:	10800017 	ldw	r2,0(r2)
100108a0:	e0fffd17 	ldw	r3,-12(fp)
100108a4:	18c00117 	ldw	r3,4(r3)
100108a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100108ac:	e0bffd17 	ldw	r2,-12(fp)
100108b0:	10800117 	ldw	r2,4(r2)
100108b4:	e0fffd17 	ldw	r3,-12(fp)
100108b8:	18c00017 	ldw	r3,0(r3)
100108bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100108c0:	e0bffd17 	ldw	r2,-12(fp)
100108c4:	e0fffd17 	ldw	r3,-12(fp)
100108c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100108cc:	e0bffd17 	ldw	r2,-12(fp)
100108d0:	e0fffd17 	ldw	r3,-12(fp)
100108d4:	10c00015 	stw	r3,0(r2)
100108d8:	e0bffb17 	ldw	r2,-20(fp)
100108dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100108e0:	e0bffe17 	ldw	r2,-8(fp)
100108e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100108e8:	e037883a 	mov	sp,fp
100108ec:	df000017 	ldw	fp,0(sp)
100108f0:	dec00104 	addi	sp,sp,4
100108f4:	f800283a 	ret

100108f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100108f8:	defffb04 	addi	sp,sp,-20
100108fc:	dfc00415 	stw	ra,16(sp)
10010900:	df000315 	stw	fp,12(sp)
10010904:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010908:	d0a00e17 	ldw	r2,-32712(gp)
1001090c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010910:	d0a6e617 	ldw	r2,-25704(gp)
10010914:	10800044 	addi	r2,r2,1
10010918:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001091c:	00002e06 	br	100109d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010920:	e0bffd17 	ldw	r2,-12(fp)
10010924:	10800017 	ldw	r2,0(r2)
10010928:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001092c:	e0bffd17 	ldw	r2,-12(fp)
10010930:	10800403 	ldbu	r2,16(r2)
10010934:	10803fcc 	andi	r2,r2,255
10010938:	10000426 	beq	r2,zero,1001094c <alt_tick+0x54>
1001093c:	d0a6e617 	ldw	r2,-25704(gp)
10010940:	1000021e 	bne	r2,zero,1001094c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010944:	e0bffd17 	ldw	r2,-12(fp)
10010948:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001094c:	e0bffd17 	ldw	r2,-12(fp)
10010950:	10800217 	ldw	r2,8(r2)
10010954:	d0e6e617 	ldw	r3,-25704(gp)
10010958:	18801d36 	bltu	r3,r2,100109d0 <alt_tick+0xd8>
1001095c:	e0bffd17 	ldw	r2,-12(fp)
10010960:	10800403 	ldbu	r2,16(r2)
10010964:	10803fcc 	andi	r2,r2,255
10010968:	1000191e 	bne	r2,zero,100109d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001096c:	e0bffd17 	ldw	r2,-12(fp)
10010970:	10800317 	ldw	r2,12(r2)
10010974:	e0fffd17 	ldw	r3,-12(fp)
10010978:	18c00517 	ldw	r3,20(r3)
1001097c:	1809883a 	mov	r4,r3
10010980:	103ee83a 	callr	r2
10010984:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010988:	e0bfff17 	ldw	r2,-4(fp)
1001098c:	1000031e 	bne	r2,zero,1001099c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10010990:	e13ffd17 	ldw	r4,-12(fp)
10010994:	00108600 	call	10010860 <alt_alarm_stop>
10010998:	00000d06 	br	100109d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001099c:	e0bffd17 	ldw	r2,-12(fp)
100109a0:	10c00217 	ldw	r3,8(r2)
100109a4:	e0bfff17 	ldw	r2,-4(fp)
100109a8:	1887883a 	add	r3,r3,r2
100109ac:	e0bffd17 	ldw	r2,-12(fp)
100109b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100109b4:	e0bffd17 	ldw	r2,-12(fp)
100109b8:	10c00217 	ldw	r3,8(r2)
100109bc:	d0a6e617 	ldw	r2,-25704(gp)
100109c0:	1880032e 	bgeu	r3,r2,100109d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100109c4:	e0bffd17 	ldw	r2,-12(fp)
100109c8:	00c00044 	movi	r3,1
100109cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100109d0:	e0bffe17 	ldw	r2,-8(fp)
100109d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100109d8:	e0fffd17 	ldw	r3,-12(fp)
100109dc:	d0a00e04 	addi	r2,gp,-32712
100109e0:	18bfcf1e 	bne	r3,r2,10010920 <__alt_data_end+0xf8010920>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100109e4:	0001883a 	nop
}
100109e8:	e037883a 	mov	sp,fp
100109ec:	dfc00117 	ldw	ra,4(sp)
100109f0:	df000017 	ldw	fp,0(sp)
100109f4:	dec00204 	addi	sp,sp,8
100109f8:	f800283a 	ret

100109fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100109fc:	deffff04 	addi	sp,sp,-4
10010a00:	df000015 	stw	fp,0(sp)
10010a04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010a08:	000170fa 	wrctl	ienable,zero
}
10010a0c:	e037883a 	mov	sp,fp
10010a10:	df000017 	ldw	fp,0(sp)
10010a14:	dec00104 	addi	sp,sp,4
10010a18:	f800283a 	ret

10010a1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010a1c:	defffa04 	addi	sp,sp,-24
10010a20:	dfc00515 	stw	ra,20(sp)
10010a24:	df000415 	stw	fp,16(sp)
10010a28:	df000404 	addi	fp,sp,16
10010a2c:	e13ffe15 	stw	r4,-8(fp)
10010a30:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010a34:	e0bfff17 	ldw	r2,-4(fp)
10010a38:	10800017 	ldw	r2,0(r2)
10010a3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010a40:	e13ffe17 	ldw	r4,-8(fp)
10010a44:	00041180 	call	10004118 <strlen>
10010a48:	10800044 	addi	r2,r2,1
10010a4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010a50:	00000d06 	br	10010a88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010a54:	e0bffc17 	ldw	r2,-16(fp)
10010a58:	10c00217 	ldw	r3,8(r2)
10010a5c:	e0bffd17 	ldw	r2,-12(fp)
10010a60:	1809883a 	mov	r4,r3
10010a64:	e17ffe17 	ldw	r5,-8(fp)
10010a68:	100d883a 	mov	r6,r2
10010a6c:	0010d7c0 	call	10010d7c <memcmp>
10010a70:	1000021e 	bne	r2,zero,10010a7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010a74:	e0bffc17 	ldw	r2,-16(fp)
10010a78:	00000706 	br	10010a98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010a7c:	e0bffc17 	ldw	r2,-16(fp)
10010a80:	10800017 	ldw	r2,0(r2)
10010a84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010a88:	e0fffc17 	ldw	r3,-16(fp)
10010a8c:	e0bfff17 	ldw	r2,-4(fp)
10010a90:	18bff01e 	bne	r3,r2,10010a54 <__alt_data_end+0xf8010a54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010a94:	0005883a 	mov	r2,zero
}
10010a98:	e037883a 	mov	sp,fp
10010a9c:	dfc00117 	ldw	ra,4(sp)
10010aa0:	df000017 	ldw	fp,0(sp)
10010aa4:	dec00204 	addi	sp,sp,8
10010aa8:	f800283a 	ret

10010aac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010aac:	defffb04 	addi	sp,sp,-20
10010ab0:	dfc00415 	stw	ra,16(sp)
10010ab4:	df000315 	stw	fp,12(sp)
10010ab8:	df000304 	addi	fp,sp,12
10010abc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010ac0:	00840074 	movhi	r2,4097
10010ac4:	108bd604 	addi	r2,r2,12120
10010ac8:	10800017 	ldw	r2,0(r2)
10010acc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010ad0:	00003106 	br	10010b98 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010ad4:	e0bffd17 	ldw	r2,-12(fp)
10010ad8:	10800217 	ldw	r2,8(r2)
10010adc:	1009883a 	mov	r4,r2
10010ae0:	00041180 	call	10004118 <strlen>
10010ae4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010ae8:	e0bffd17 	ldw	r2,-12(fp)
10010aec:	10c00217 	ldw	r3,8(r2)
10010af0:	e0bffe17 	ldw	r2,-8(fp)
10010af4:	10bfffc4 	addi	r2,r2,-1
10010af8:	1885883a 	add	r2,r3,r2
10010afc:	10800003 	ldbu	r2,0(r2)
10010b00:	10803fcc 	andi	r2,r2,255
10010b04:	1080201c 	xori	r2,r2,128
10010b08:	10bfe004 	addi	r2,r2,-128
10010b0c:	10800bd8 	cmpnei	r2,r2,47
10010b10:	1000031e 	bne	r2,zero,10010b20 <alt_find_file+0x74>
    {
      len -= 1;
10010b14:	e0bffe17 	ldw	r2,-8(fp)
10010b18:	10bfffc4 	addi	r2,r2,-1
10010b1c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010b20:	e0bffe17 	ldw	r2,-8(fp)
10010b24:	e0ffff17 	ldw	r3,-4(fp)
10010b28:	1885883a 	add	r2,r3,r2
10010b2c:	10800003 	ldbu	r2,0(r2)
10010b30:	10803fcc 	andi	r2,r2,255
10010b34:	1080201c 	xori	r2,r2,128
10010b38:	10bfe004 	addi	r2,r2,-128
10010b3c:	10800be0 	cmpeqi	r2,r2,47
10010b40:	1000081e 	bne	r2,zero,10010b64 <alt_find_file+0xb8>
10010b44:	e0bffe17 	ldw	r2,-8(fp)
10010b48:	e0ffff17 	ldw	r3,-4(fp)
10010b4c:	1885883a 	add	r2,r3,r2
10010b50:	10800003 	ldbu	r2,0(r2)
10010b54:	10803fcc 	andi	r2,r2,255
10010b58:	1080201c 	xori	r2,r2,128
10010b5c:	10bfe004 	addi	r2,r2,-128
10010b60:	10000a1e 	bne	r2,zero,10010b8c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010b64:	e0bffd17 	ldw	r2,-12(fp)
10010b68:	10c00217 	ldw	r3,8(r2)
10010b6c:	e0bffe17 	ldw	r2,-8(fp)
10010b70:	1809883a 	mov	r4,r3
10010b74:	e17fff17 	ldw	r5,-4(fp)
10010b78:	100d883a 	mov	r6,r2
10010b7c:	0010d7c0 	call	10010d7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010b80:	1000021e 	bne	r2,zero,10010b8c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010b84:	e0bffd17 	ldw	r2,-12(fp)
10010b88:	00000806 	br	10010bac <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010b8c:	e0bffd17 	ldw	r2,-12(fp)
10010b90:	10800017 	ldw	r2,0(r2)
10010b94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010b98:	e0fffd17 	ldw	r3,-12(fp)
10010b9c:	00840074 	movhi	r2,4097
10010ba0:	108bd604 	addi	r2,r2,12120
10010ba4:	18bfcb1e 	bne	r3,r2,10010ad4 <__alt_data_end+0xf8010ad4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010ba8:	0005883a 	mov	r2,zero
}
10010bac:	e037883a 	mov	sp,fp
10010bb0:	dfc00117 	ldw	ra,4(sp)
10010bb4:	df000017 	ldw	fp,0(sp)
10010bb8:	dec00204 	addi	sp,sp,8
10010bbc:	f800283a 	ret

10010bc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010bc0:	defffa04 	addi	sp,sp,-24
10010bc4:	dfc00515 	stw	ra,20(sp)
10010bc8:	df000415 	stw	fp,16(sp)
10010bcc:	dc000315 	stw	r16,12(sp)
10010bd0:	df000404 	addi	fp,sp,16
10010bd4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010bd8:	00bffa04 	movi	r2,-24
10010bdc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010be0:	e03ffc15 	stw	zero,-16(fp)
10010be4:	00002106 	br	10010c6c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010be8:	04040074 	movhi	r16,4097
10010bec:	84075804 	addi	r16,r16,7520
10010bf0:	e0bffc17 	ldw	r2,-16(fp)
10010bf4:	1009883a 	mov	r4,r2
10010bf8:	01400304 	movi	r5,12
10010bfc:	0002c180 	call	10002c18 <__mulsi3>
10010c00:	8085883a 	add	r2,r16,r2
10010c04:	10800017 	ldw	r2,0(r2)
10010c08:	1000151e 	bne	r2,zero,10010c60 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010c0c:	04040074 	movhi	r16,4097
10010c10:	84075804 	addi	r16,r16,7520
10010c14:	e0bffc17 	ldw	r2,-16(fp)
10010c18:	1009883a 	mov	r4,r2
10010c1c:	01400304 	movi	r5,12
10010c20:	0002c180 	call	10002c18 <__mulsi3>
10010c24:	8085883a 	add	r2,r16,r2
10010c28:	e0fffe17 	ldw	r3,-8(fp)
10010c2c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010c30:	00840074 	movhi	r2,4097
10010c34:	108bda04 	addi	r2,r2,12136
10010c38:	10c00017 	ldw	r3,0(r2)
10010c3c:	e0bffc17 	ldw	r2,-16(fp)
10010c40:	1880040e 	bge	r3,r2,10010c54 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010c44:	00840074 	movhi	r2,4097
10010c48:	108bda04 	addi	r2,r2,12136
10010c4c:	e0fffc17 	ldw	r3,-16(fp)
10010c50:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010c54:	e0bffc17 	ldw	r2,-16(fp)
10010c58:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010c5c:	00000606 	br	10010c78 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010c60:	e0bffc17 	ldw	r2,-16(fp)
10010c64:	10800044 	addi	r2,r2,1
10010c68:	e0bffc15 	stw	r2,-16(fp)
10010c6c:	e0bffc17 	ldw	r2,-16(fp)
10010c70:	10800810 	cmplti	r2,r2,32
10010c74:	103fdc1e 	bne	r2,zero,10010be8 <__alt_data_end+0xf8010be8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010c78:	e0bffd17 	ldw	r2,-12(fp)
}
10010c7c:	e6ffff04 	addi	sp,fp,-4
10010c80:	dfc00217 	ldw	ra,8(sp)
10010c84:	df000117 	ldw	fp,4(sp)
10010c88:	dc000017 	ldw	r16,0(sp)
10010c8c:	dec00304 	addi	sp,sp,12
10010c90:	f800283a 	ret

10010c94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10010c94:	defffe04 	addi	sp,sp,-8
10010c98:	df000115 	stw	fp,4(sp)
10010c9c:	df000104 	addi	fp,sp,4
10010ca0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10010ca4:	e0bfff17 	ldw	r2,-4(fp)
10010ca8:	10bffe84 	addi	r2,r2,-6
10010cac:	10c00428 	cmpgeui	r3,r2,16
10010cb0:	18001a1e 	bne	r3,zero,10010d1c <alt_exception_cause_generated_bad_addr+0x88>
10010cb4:	100690ba 	slli	r3,r2,2
10010cb8:	00840074 	movhi	r2,4097
10010cbc:	10833304 	addi	r2,r2,3276
10010cc0:	1885883a 	add	r2,r3,r2
10010cc4:	10800017 	ldw	r2,0(r2)
10010cc8:	1000683a 	jmp	r2
10010ccc:	10010d0c 	andi	zero,r2,1076
10010cd0:	10010d0c 	andi	zero,r2,1076
10010cd4:	10010d1c 	xori	zero,r2,1076
10010cd8:	10010d1c 	xori	zero,r2,1076
10010cdc:	10010d1c 	xori	zero,r2,1076
10010ce0:	10010d0c 	andi	zero,r2,1076
10010ce4:	10010d14 	ori	zero,r2,1076
10010ce8:	10010d1c 	xori	zero,r2,1076
10010cec:	10010d0c 	andi	zero,r2,1076
10010cf0:	10010d0c 	andi	zero,r2,1076
10010cf4:	10010d1c 	xori	zero,r2,1076
10010cf8:	10010d0c 	andi	zero,r2,1076
10010cfc:	10010d14 	ori	zero,r2,1076
10010d00:	10010d1c 	xori	zero,r2,1076
10010d04:	10010d1c 	xori	zero,r2,1076
10010d08:	10010d0c 	andi	zero,r2,1076
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010d0c:	00800044 	movi	r2,1
10010d10:	00000306 	br	10010d20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010d14:	0005883a 	mov	r2,zero
10010d18:	00000106 	br	10010d20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010d1c:	0005883a 	mov	r2,zero
  }
}
10010d20:	e037883a 	mov	sp,fp
10010d24:	df000017 	ldw	fp,0(sp)
10010d28:	dec00104 	addi	sp,sp,4
10010d2c:	f800283a 	ret

10010d30 <atexit>:
10010d30:	200b883a 	mov	r5,r4
10010d34:	000d883a 	mov	r6,zero
10010d38:	0009883a 	mov	r4,zero
10010d3c:	000f883a 	mov	r7,zero
10010d40:	0010df81 	jmpi	10010df8 <__register_exitproc>

10010d44 <exit>:
10010d44:	defffe04 	addi	sp,sp,-8
10010d48:	000b883a 	mov	r5,zero
10010d4c:	dc000015 	stw	r16,0(sp)
10010d50:	dfc00115 	stw	ra,4(sp)
10010d54:	2021883a 	mov	r16,r4
10010d58:	0010f0c0 	call	10010f0c <__call_exitprocs>
10010d5c:	00840074 	movhi	r2,4097
10010d60:	108bd004 	addi	r2,r2,12096
10010d64:	11000017 	ldw	r4,0(r2)
10010d68:	20800f17 	ldw	r2,60(r4)
10010d6c:	10000126 	beq	r2,zero,10010d74 <exit+0x30>
10010d70:	103ee83a 	callr	r2
10010d74:	8009883a 	mov	r4,r16
10010d78:	00110a00 	call	100110a0 <_exit>

10010d7c <memcmp>:
10010d7c:	01c000c4 	movi	r7,3
10010d80:	3980192e 	bgeu	r7,r6,10010de8 <memcmp+0x6c>
10010d84:	2144b03a 	or	r2,r4,r5
10010d88:	11c4703a 	and	r2,r2,r7
10010d8c:	10000f26 	beq	r2,zero,10010dcc <memcmp+0x50>
10010d90:	20800003 	ldbu	r2,0(r4)
10010d94:	28c00003 	ldbu	r3,0(r5)
10010d98:	10c0151e 	bne	r2,r3,10010df0 <memcmp+0x74>
10010d9c:	31bfff84 	addi	r6,r6,-2
10010da0:	01ffffc4 	movi	r7,-1
10010da4:	00000406 	br	10010db8 <memcmp+0x3c>
10010da8:	20800003 	ldbu	r2,0(r4)
10010dac:	28c00003 	ldbu	r3,0(r5)
10010db0:	31bfffc4 	addi	r6,r6,-1
10010db4:	10c00e1e 	bne	r2,r3,10010df0 <memcmp+0x74>
10010db8:	21000044 	addi	r4,r4,1
10010dbc:	29400044 	addi	r5,r5,1
10010dc0:	31fff91e 	bne	r6,r7,10010da8 <__alt_data_end+0xf8010da8>
10010dc4:	0005883a 	mov	r2,zero
10010dc8:	f800283a 	ret
10010dcc:	20c00017 	ldw	r3,0(r4)
10010dd0:	28800017 	ldw	r2,0(r5)
10010dd4:	1880041e 	bne	r3,r2,10010de8 <memcmp+0x6c>
10010dd8:	31bfff04 	addi	r6,r6,-4
10010ddc:	21000104 	addi	r4,r4,4
10010de0:	29400104 	addi	r5,r5,4
10010de4:	39bff936 	bltu	r7,r6,10010dcc <__alt_data_end+0xf8010dcc>
10010de8:	303fe91e 	bne	r6,zero,10010d90 <__alt_data_end+0xf8010d90>
10010dec:	003ff506 	br	10010dc4 <__alt_data_end+0xf8010dc4>
10010df0:	10c5c83a 	sub	r2,r2,r3
10010df4:	f800283a 	ret

10010df8 <__register_exitproc>:
10010df8:	00840074 	movhi	r2,4097
10010dfc:	defffa04 	addi	sp,sp,-24
10010e00:	108bd004 	addi	r2,r2,12096
10010e04:	dc000315 	stw	r16,12(sp)
10010e08:	14000017 	ldw	r16,0(r2)
10010e0c:	dc400415 	stw	r17,16(sp)
10010e10:	dfc00515 	stw	ra,20(sp)
10010e14:	80805217 	ldw	r2,328(r16)
10010e18:	2023883a 	mov	r17,r4
10010e1c:	10003626 	beq	r2,zero,10010ef8 <__register_exitproc+0x100>
10010e20:	10c00117 	ldw	r3,4(r2)
10010e24:	010007c4 	movi	r4,31
10010e28:	20c00e16 	blt	r4,r3,10010e64 <__register_exitproc+0x6c>
10010e2c:	1a400044 	addi	r9,r3,1
10010e30:	8800211e 	bne	r17,zero,10010eb8 <__register_exitproc+0xc0>
10010e34:	18c00084 	addi	r3,r3,2
10010e38:	18c7883a 	add	r3,r3,r3
10010e3c:	18c7883a 	add	r3,r3,r3
10010e40:	12400115 	stw	r9,4(r2)
10010e44:	10c7883a 	add	r3,r2,r3
10010e48:	19400015 	stw	r5,0(r3)
10010e4c:	0005883a 	mov	r2,zero
10010e50:	dfc00517 	ldw	ra,20(sp)
10010e54:	dc400417 	ldw	r17,16(sp)
10010e58:	dc000317 	ldw	r16,12(sp)
10010e5c:	dec00604 	addi	sp,sp,24
10010e60:	f800283a 	ret
10010e64:	00800034 	movhi	r2,0
10010e68:	10800004 	addi	r2,r2,0
10010e6c:	10002526 	beq	r2,zero,10010f04 <__register_exitproc+0x10c>
10010e70:	01006404 	movi	r4,400
10010e74:	d9400015 	stw	r5,0(sp)
10010e78:	d9800115 	stw	r6,4(sp)
10010e7c:	d9c00215 	stw	r7,8(sp)
10010e80:	00000000 	call	10000000 <__alt_mem_sdram>
10010e84:	d9400017 	ldw	r5,0(sp)
10010e88:	d9800117 	ldw	r6,4(sp)
10010e8c:	d9c00217 	ldw	r7,8(sp)
10010e90:	10001c26 	beq	r2,zero,10010f04 <__register_exitproc+0x10c>
10010e94:	80c05217 	ldw	r3,328(r16)
10010e98:	10000115 	stw	zero,4(r2)
10010e9c:	02400044 	movi	r9,1
10010ea0:	10c00015 	stw	r3,0(r2)
10010ea4:	80805215 	stw	r2,328(r16)
10010ea8:	10006215 	stw	zero,392(r2)
10010eac:	10006315 	stw	zero,396(r2)
10010eb0:	0007883a 	mov	r3,zero
10010eb4:	883fdf26 	beq	r17,zero,10010e34 <__alt_data_end+0xf8010e34>
10010eb8:	18d1883a 	add	r8,r3,r3
10010ebc:	4211883a 	add	r8,r8,r8
10010ec0:	1211883a 	add	r8,r2,r8
10010ec4:	41802215 	stw	r6,136(r8)
10010ec8:	01000044 	movi	r4,1
10010ecc:	11806217 	ldw	r6,392(r2)
10010ed0:	20c8983a 	sll	r4,r4,r3
10010ed4:	310cb03a 	or	r6,r6,r4
10010ed8:	11806215 	stw	r6,392(r2)
10010edc:	41c04215 	stw	r7,264(r8)
10010ee0:	01800084 	movi	r6,2
10010ee4:	89bfd31e 	bne	r17,r6,10010e34 <__alt_data_end+0xf8010e34>
10010ee8:	11806317 	ldw	r6,396(r2)
10010eec:	3108b03a 	or	r4,r6,r4
10010ef0:	11006315 	stw	r4,396(r2)
10010ef4:	003fcf06 	br	10010e34 <__alt_data_end+0xf8010e34>
10010ef8:	80805304 	addi	r2,r16,332
10010efc:	80805215 	stw	r2,328(r16)
10010f00:	003fc706 	br	10010e20 <__alt_data_end+0xf8010e20>
10010f04:	00bfffc4 	movi	r2,-1
10010f08:	003fd106 	br	10010e50 <__alt_data_end+0xf8010e50>

10010f0c <__call_exitprocs>:
10010f0c:	00840074 	movhi	r2,4097
10010f10:	108bd004 	addi	r2,r2,12096
10010f14:	10800017 	ldw	r2,0(r2)
10010f18:	defff404 	addi	sp,sp,-48
10010f1c:	dd800815 	stw	r22,32(sp)
10010f20:	d8800015 	stw	r2,0(sp)
10010f24:	10805204 	addi	r2,r2,328
10010f28:	dd000615 	stw	r20,24(sp)
10010f2c:	dc800415 	stw	r18,16(sp)
10010f30:	dfc00b15 	stw	ra,44(sp)
10010f34:	df000a15 	stw	fp,40(sp)
10010f38:	ddc00915 	stw	r23,36(sp)
10010f3c:	dd400715 	stw	r21,28(sp)
10010f40:	dcc00515 	stw	r19,20(sp)
10010f44:	dc400315 	stw	r17,12(sp)
10010f48:	dc000215 	stw	r16,8(sp)
10010f4c:	2025883a 	mov	r18,r4
10010f50:	2829883a 	mov	r20,r5
10010f54:	d8800115 	stw	r2,4(sp)
10010f58:	05bfffc4 	movi	r22,-1
10010f5c:	d8800017 	ldw	r2,0(sp)
10010f60:	14c05217 	ldw	r19,328(r2)
10010f64:	98001d26 	beq	r19,zero,10010fdc <__call_exitprocs+0xd0>
10010f68:	dd400117 	ldw	r21,4(sp)
10010f6c:	98800117 	ldw	r2,4(r19)
10010f70:	173fffc4 	addi	fp,r2,-1
10010f74:	e0000d16 	blt	fp,zero,10010fac <__call_exitprocs+0xa0>
10010f78:	14000044 	addi	r16,r2,1
10010f7c:	8421883a 	add	r16,r16,r16
10010f80:	8421883a 	add	r16,r16,r16
10010f84:	84402004 	addi	r17,r16,128
10010f88:	9c63883a 	add	r17,r19,r17
10010f8c:	9c21883a 	add	r16,r19,r16
10010f90:	a0001e26 	beq	r20,zero,1001100c <__call_exitprocs+0x100>
10010f94:	80804017 	ldw	r2,256(r16)
10010f98:	15001c26 	beq	r2,r20,1001100c <__call_exitprocs+0x100>
10010f9c:	e73fffc4 	addi	fp,fp,-1
10010fa0:	843fff04 	addi	r16,r16,-4
10010fa4:	8c7fff04 	addi	r17,r17,-4
10010fa8:	e5bff91e 	bne	fp,r22,10010f90 <__alt_data_end+0xf8010f90>
10010fac:	00800034 	movhi	r2,0
10010fb0:	10800004 	addi	r2,r2,0
10010fb4:	10000926 	beq	r2,zero,10010fdc <__call_exitprocs+0xd0>
10010fb8:	98800117 	ldw	r2,4(r19)
10010fbc:	1000311e 	bne	r2,zero,10011084 <__call_exitprocs+0x178>
10010fc0:	98800017 	ldw	r2,0(r19)
10010fc4:	10003426 	beq	r2,zero,10011098 <__call_exitprocs+0x18c>
10010fc8:	9809883a 	mov	r4,r19
10010fcc:	a8800015 	stw	r2,0(r21)
10010fd0:	00000000 	call	10000000 <__alt_mem_sdram>
10010fd4:	acc00017 	ldw	r19,0(r21)
10010fd8:	983fe41e 	bne	r19,zero,10010f6c <__alt_data_end+0xf8010f6c>
10010fdc:	dfc00b17 	ldw	ra,44(sp)
10010fe0:	df000a17 	ldw	fp,40(sp)
10010fe4:	ddc00917 	ldw	r23,36(sp)
10010fe8:	dd800817 	ldw	r22,32(sp)
10010fec:	dd400717 	ldw	r21,28(sp)
10010ff0:	dd000617 	ldw	r20,24(sp)
10010ff4:	dcc00517 	ldw	r19,20(sp)
10010ff8:	dc800417 	ldw	r18,16(sp)
10010ffc:	dc400317 	ldw	r17,12(sp)
10011000:	dc000217 	ldw	r16,8(sp)
10011004:	dec00c04 	addi	sp,sp,48
10011008:	f800283a 	ret
1001100c:	98800117 	ldw	r2,4(r19)
10011010:	80c00017 	ldw	r3,0(r16)
10011014:	10bfffc4 	addi	r2,r2,-1
10011018:	17001526 	beq	r2,fp,10011070 <__call_exitprocs+0x164>
1001101c:	80000015 	stw	zero,0(r16)
10011020:	183fde26 	beq	r3,zero,10010f9c <__alt_data_end+0xf8010f9c>
10011024:	00800044 	movi	r2,1
10011028:	1708983a 	sll	r4,r2,fp
1001102c:	98806217 	ldw	r2,392(r19)
10011030:	9dc00117 	ldw	r23,4(r19)
10011034:	2084703a 	and	r2,r4,r2
10011038:	1000061e 	bne	r2,zero,10011054 <__call_exitprocs+0x148>
1001103c:	183ee83a 	callr	r3
10011040:	98800117 	ldw	r2,4(r19)
10011044:	15ffc51e 	bne	r2,r23,10010f5c <__alt_data_end+0xf8010f5c>
10011048:	a8800017 	ldw	r2,0(r21)
1001104c:	14ffd326 	beq	r2,r19,10010f9c <__alt_data_end+0xf8010f9c>
10011050:	003fc206 	br	10010f5c <__alt_data_end+0xf8010f5c>
10011054:	98806317 	ldw	r2,396(r19)
10011058:	2084703a 	and	r2,r4,r2
1001105c:	1000061e 	bne	r2,zero,10011078 <__call_exitprocs+0x16c>
10011060:	89400017 	ldw	r5,0(r17)
10011064:	9009883a 	mov	r4,r18
10011068:	183ee83a 	callr	r3
1001106c:	003ff406 	br	10011040 <__alt_data_end+0xf8011040>
10011070:	9f000115 	stw	fp,4(r19)
10011074:	003fea06 	br	10011020 <__alt_data_end+0xf8011020>
10011078:	89000017 	ldw	r4,0(r17)
1001107c:	183ee83a 	callr	r3
10011080:	003fef06 	br	10011040 <__alt_data_end+0xf8011040>
10011084:	98800017 	ldw	r2,0(r19)
10011088:	982b883a 	mov	r21,r19
1001108c:	1027883a 	mov	r19,r2
10011090:	983fb61e 	bne	r19,zero,10010f6c <__alt_data_end+0xf8010f6c>
10011094:	003fd106 	br	10010fdc <__alt_data_end+0xf8010fdc>
10011098:	0005883a 	mov	r2,zero
1001109c:	003ffa06 	br	10011088 <__alt_data_end+0xf8011088>

100110a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100110a0:	defffd04 	addi	sp,sp,-12
100110a4:	df000215 	stw	fp,8(sp)
100110a8:	df000204 	addi	fp,sp,8
100110ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100110b0:	0001883a 	nop
100110b4:	e0bfff17 	ldw	r2,-4(fp)
100110b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100110bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100110c0:	10000226 	beq	r2,zero,100110cc <_exit+0x2c>
    ALT_SIM_FAIL();
100110c4:	002af070 	cmpltui	zero,zero,43969
100110c8:	00000106 	br	100110d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100110cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100110d0:	003fff06 	br	100110d0 <__alt_data_end+0xf80110d0>
