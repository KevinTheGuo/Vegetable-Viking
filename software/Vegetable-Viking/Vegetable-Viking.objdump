
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011474 memsz 0x00011474 flags r-x
    LOAD off    0x00012494 vaddr 0x10011494 paddr 0x10012f80 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014a6c vaddr 0x10014a6c paddr 0x10014a6c align 2**12
         filesz 0x00000000 memsz 0x0000039c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010e70  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f8  1001109c  1001109c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011494  10012f80  00012494  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000039c  10014a6c  10014a6c  00014a6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013f80  2**0
                  CONTENTS
  7 .sdram        00000000  10014e08  10014e08  00013f80  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013f80  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d10  00000000  00000000  00013fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000241f9  00000000  00000000  00014cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009117  00000000  00000000  00038eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b34c  00000000  00000000  00041fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002204  00000000  00000000  0004d314  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003846  00000000  00000000  0004f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00052d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00069c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013c0  00000000  00000000  00069c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006e45e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006e461  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006e46d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006e46e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006e46f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006e473  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006e477  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006e47b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006e486  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006e491  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006e49c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006e4a7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0006e4c1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00072908  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1001109c l    d  .rodata	00000000 .rodata
10011494 l    d  .rwdata	00000000 .rwdata
10014a6c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014e08 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002ab4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100112da l     O .rodata	00000010 zeroes.4181
100112ea l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100063c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007f70 l     F .text	00000008 __fp_lock
10007f78 l     F .text	00000008 __fp_unlock
10007f8c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011494 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100118d8 l     O .rwdata	00000020 lc_ctype_charset
100118b8 l     O .rwdata	00000020 lc_message_charset
100118f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1001131c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000b4bc l     F .text	000000fc __sprint_r.part.0
10011450 l     O .rodata	00000010 blanks.4125
10011440 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e944 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000ea6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ea98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000eba0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ec9c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000ed80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ef64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012f70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000f1e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f338 l     F .text	00000038 alt_dev_reg
10011ee0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f614 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000f818 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ff94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001042c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010584 l     F .text	00000050 alt_get_errno
100105d4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10014adc g     O .bss	00000004 alt_instruction_exception_handler
10001d08 g     F .text	00000068 convertDecimalToBinary
1000aafc g     F .text	00000074 _mprec_log10
1000abe8 g     F .text	0000008c __any_on
1000cee8 g     F .text	00000054 _isatty_r
10011328 g     O .rodata	00000028 __mprec_tinytens
1000eeac g     F .text	00000078 alt_main
10003f98 g     F .text	000000b8 _puts_r
10014d08 g     O .bss	00000100 alt_irq
1000cf3c g     F .text	0000005c _lseek_r
10012f80 g       *ABS*	00000000 __flash_rwdata_start
1000ddf0 g     F .text	00000084 .hidden __eqdf2
10014e08 g       *ABS*	00000000 __alt_heap_start
10003f5c g     F .text	0000003c printf
1000d164 g     F .text	0000009c _wcrtomb_r
10014a6c g     O .bss	00000004 elapsedTime
1000b3b4 g     F .text	0000005c __sseek
100082d4 g     F .text	00000010 __sinit
1000cff4 g     F .text	00000154 __swbuf_r
10008d4c g     F .text	0000007c _setlocale_r
1000812c g     F .text	00000078 __sfmoreglue
1000ef44 g     F .text	00000020 __malloc_unlock
10000e18 g     F .text	000003d8 spawningEngine
100099ac g     F .text	0000015c memmove
100082bc g     F .text	00000018 _cleanup
10009c2c g     F .text	000000a8 _Balloc
1000de74 g     F .text	000000e0 .hidden __gtdf2
100109c4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10014a70 g     O .bss	00000004 lastPhysixed
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000ce90 g     F .text	00000058 _fstat_r
10014ac0 g     O .bss	00000004 errno
1000b330 g     F .text	00000008 __seofread
10014ac8 g     O .bss	00000004 alt_argv
1001af40 g       *ABS*	00000000 _gp
10014a74 g     O .bss	00000004 yCursor
10011d60 g     O .rwdata	00000180 alt_fd_list
100109e4 g     F .text	00000090 alt_find_dev
10009874 g     F .text	00000138 memcpy
100011f0 g     F .text	0000040c slicingEngine
10007f80 g     F .text	0000000c _cleanup_r
10003dfc g     F .text	000000d0 .hidden __floatsidf
1001050c g     F .text	00000078 alt_io_redirect
1000df54 g     F .text	000000e0 .hidden __ltdf2
10014a78 g     O .bss	00000004 xCursor
1001109c g       *ABS*	00000000 __DTOR_END__
10004050 g     F .text	00000014 puts
10010c5c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000b214 g     F .text	00000074 __fpclassifyd
1000aa58 g     F .text	000000a4 __ratio
1000c9f4 g     F .text	00000024 __vfiprintf_internal
1000fa14 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10003f30 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002bd0 g     F .text	00000008 .hidden __udivsi3
1000ebf0 g     F .text	000000ac isatty
10011378 g     O .rodata	000000c8 __mprec_tens
10008dc8 g     F .text	0000000c __locale_charset
10014abc g     O .bss	00000004 __malloc_top_pad
10012f48 g     O .rwdata	00000004 __mb_cur_max
10008df8 g     F .text	0000000c _localeconv_r
1000a054 g     F .text	0000003c __i2b
10008738 g     F .text	000004a4 __sfvwrite_r
1000b288 g     F .text	00000054 _sbrk_r
10014a7c g     O .bss	00000004 cursorClicked
1000cf98 g     F .text	0000005c _read_r
10012f68 g     O .rwdata	00000004 alt_max_fd
1000cba0 g     F .text	00000100 _fclose_r
10007f40 g     F .text	00000030 fflush
10014ab8 g     O .bss	00000004 __malloc_max_sbrked_mem
10002c08 g     F .text	0000089c .hidden __adddf3
1000a800 g     F .text	0000011c __b2d
10002498 g     F .text	0000061c .hidden __umoddi3
1000edd0 g     F .text	000000dc lseek
10012f40 g     O .rwdata	00000004 _global_impure_ptr
1000ac74 g     F .text	000005a0 _realloc_r
10014e08 g       *ABS*	00000000 __bss_end
1001033c g     F .text	000000f0 alt_iic_isr_register
10014b08 g     O .bss	00000200 veggieObject
100108c0 g     F .text	00000104 alt_tick
10014a80 g     O .bss	00000004 cursorStreak
10001e58 g     F .text	00000640 .hidden __udivdi3
1000ccb4 g     F .text	00000184 _fputwc_r
10011350 g     O .rodata	00000028 __mprec_bigtens
10009e38 g     F .text	00000104 __s2b
1000e8a0 g     F .text	000000a4 .hidden __floatunsidf
1000a5a8 g     F .text	00000060 __mcmp
10014a84 g     O .bss	00000004 lastSpawned
100082f4 g     F .text	00000018 __fp_lock_all
100102f0 g     F .text	0000004c alt_ic_irq_enabled
10010828 g     F .text	00000098 alt_alarm_stop
10000668 g     F .text	00000454 statusEngine
10014ad0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10011d38 g     O .rwdata	00000028 alt_dev_null
10001bf0 g     F .text	00000118 port2Unpackager
1000ff78 g     F .text	0000001c alt_dcache_flush_all
10009f3c g     F .text	00000068 __hi0bits
10003d74 g     F .text	00000088 .hidden __fixdfsi
10012f80 g       *ABS*	00000000 __ram_rwdata_end
10012f60 g     O .rwdata	00000008 alt_dev_list
1000f238 g     F .text	00000100 write
10011494 g       *ABS*	00000000 __ram_rodata_end
1000eae8 g     F .text	000000b8 fstat
1000df54 g     F .text	000000e0 .hidden __ledf2
10014a88 g     O .bss	00000004 lastDisintegrated
1000a320 g     F .text	00000140 __pow5mult
1000b5d0 g     F .text	00001424 ___vfiprintf_internal_r
10014ab0 g     O .bss	00000004 __nlocale_changed
10002bd8 g     F .text	00000008 .hidden __umodsi3
10014e08 g       *ABS*	00000000 end
10014a8c g     O .bss	00000004 key1
1000f550 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1001109c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003ecc g     F .text	00000064 .hidden __clzsi2
1000fc20 g     F .text	00000218 altera_avalon_jtag_uart_write
100082e4 g     F .text	00000004 __sfp_lock_acquire
1000978c g     F .text	000000e8 memchr
10004178 g     F .text	000020fc ___vfprintf_internal_r
10008448 g     F .text	000002f0 _free_r
10008dd4 g     F .text	00000010 __locale_mb_cur_max
10010ed4 g     F .text	00000194 __call_exitprocs
10014aac g     O .bss	00000004 __mlocale_changed
10012f4c g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10014ad4 g     O .bss	00000004 _alt_tick_rate
1000407c g     F .text	00000064 rand
1000a460 g     F .text	00000148 __lshift
10014ad8 g     O .bss	00000004 _alt_nticks
1000efb4 g     F .text	00000104 read
1000f3a4 g     F .text	00000048 alt_sys_init
10010dc0 g     F .text	00000114 __register_exitproc
1000a090 g     F .text	00000290 __multiply
1000f8c0 g     F .text	00000068 altera_avalon_jtag_uart_close
10002be0 g     F .text	00000028 .hidden __mulsi3
10011494 g       *ABS*	00000000 __ram_rwdata_start
1001109c g       *ABS*	00000000 __ram_rodata_start
10014ae0 g     O .bss	00000028 __malloc_current_mallinfo
1000a91c g     F .text	0000013c __d2b
1000f3ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010b88 g     F .text	000000d4 alt_get_fd
1000ca74 g     F .text	00000054 _close_r
10010d44 g     F .text	0000007c memcmp
1000f4ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014e08 g       *ABS*	00000000 __alt_stack_base
1000f4fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10006298 g     F .text	00000130 __swsetup_r
1000d470 g     F .text	00000980 .hidden __divdf3
100081a4 g     F .text	00000118 __sfp
1000ab70 g     F .text	00000078 __copybits
10011930 g     O .rwdata	00000408 __malloc_av_
100082f0 g     F .text	00000004 __sinit_lock_release
1000e034 g     F .text	0000086c .hidden __muldf3
1000b2dc g     F .text	00000054 __sread
10010a74 g     F .text	00000114 alt_find_file
1000ffe4 g     F .text	000000a4 alt_dev_llist_insert
1000ef24 g     F .text	00000020 __malloc_lock
1000f138 g     F .text	000000b0 sbrk
10007d18 g     F .text	00000228 _fflush_r
1000cac8 g     F .text	000000d8 _calloc_r
10014a6c g       *ABS*	00000000 __bss_start
10009b08 g     F .text	00000124 memset
10000268 g     F .text	00000400 main
10014acc g     O .bss	00000004 alt_envp
10014ab4 g     O .bss	00000004 __malloc_max_total_mem
1000f44c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000d148 g     F .text	0000001c __swbuf
10004064 g     F .text	00000018 srand
10001d70 g     F .text	000000e8 convertBinaryToDecimal
1000b410 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000cca0 g     F .text	00000014 fclose
100065f0 g     F .text	00001728 _dtoa_r
10008fe4 g     F .text	000007a8 _malloc_r
1000d2d8 g     F .text	00000030 __ascii_wctomb
10012f6c g     O .rwdata	00000004 alt_errno
10008bdc g     F .text	000000b8 _fwalk
10002b20 g     F .text	00000054 .hidden __divsi3
10008324 g     F .text	00000124 _malloc_trim_r
1001109c g       *ABS*	00000000 __CTOR_END__
1000b418 g     F .text	000000a4 strcmp
1001109c g       *ABS*	00000000 __flash_rodata_start
1001109c g       *ABS*	00000000 __DTOR_LIST__
10014a90 g     O .bss	00000004 key3
1000ddf0 g     F .text	00000084 .hidden __nedf2
1000f370 g     F .text	00000034 alt_irq_init
1000f0b8 g     F .text	00000080 alt_release_fd
10011194 g     O .rodata	00000100 .hidden __clz_tab
10014aa8 g     O .bss	00000004 _PathLocale
10010cf8 g     F .text	00000014 atexit
10014a94 g     O .bss	00000004 nextSpawnTime
10001b48 g     F .text	000000a8 messagePackager
1000ca18 g     F .text	0000005c _write_r
10008e04 g     F .text	0000001c setlocale
10012f44 g     O .rwdata	00000004 _impure_ptr
10014ac4 g     O .bss	00000004 alt_argc
100100e4 g     F .text	0000005c _do_dtors
10008df0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000a7a0 g     F .text	00000060 __ulp
1000830c g     F .text	00000018 __fp_unlock_all
10012f58 g     O .rwdata	00000008 alt_fs_list
100015fc g     F .text	000001dc disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008e20 g     F .text	0000000c localeconv
1001015c g     F .text	00000050 alt_ic_isr_register
10012f80 g       *ABS*	00000000 _edata
10014e08 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000f928 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10014a98 g     O .bss	00000004 key2
1001024c g     F .text	000000a4 alt_ic_irq_disable
10014a9c g     O .bss	00000004 physixOn
1000b338 g     F .text	0000007c __swrite
10012f50 g     O .rwdata	00000004 __malloc_trim_threshold
10008de4 g     F .text	0000000c __locale_msgcharset
10010d0c g     F .text	00000038 exit
10014aa0 g     O .bss	00000004 roundStart
10008c94 g     F .text	000000b8 _fwalk_reent
1000a608 g     F .text	00000198 __mdiff
10000abc g     F .text	0000035c physicsEngine
10002b74 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100082e8 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10011068 g     F .text	00000034 _exit
1000fe38 g     F .text	00000140 alt_alarm_start
1000d364 g     F .text	0000010c .hidden __muldi3
10008e2c g     F .text	000001b8 __smakebuf_r
100040e0 g     F .text	00000098 strlen
100106c8 g     F .text	00000160 open
1000de74 g     F .text	000000e0 .hidden __gedf2
10012f54 g     O .rwdata	00000004 __wctomb
1000b5b8 g     F .text	00000018 __sprint_r
10010140 g     F .text	0000001c alt_icache_flush_all
100017d8 g     F .text	00000370 FPGAcommunicator
10012f74 g     O .rwdata	00000004 alt_priority_mask
10014aa4 g     O .bss	00000004 comboFruit
100101ac g     F .text	000000a0 alt_ic_irq_enable
10006274 g     F .text	00000024 __vfprintf_internal
1000d308 g     F .text	0000005c _wctomb_r
100034a4 g     F .text	000008d0 .hidden __subdf3
10009fa4 g     F .text	000000b0 __lo0bits
10012f78 g     O .rwdata	00000008 alt_alarm_list
10010088 g     F .text	0000005c _do_ctors
1000d200 g     F .text	000000d8 wcrtomb
1000e994 g     F .text	000000d8 close
1000ed00 g     F .text	00000080 alt_load
1000ce38 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
100082ec g     F .text	00000004 __sinit_lock_acquire
10009cfc g     F .text	0000013c __multadd
10009cd4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10934204 	addi	r2,r2,19720
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10934204 	addi	r2,r2,19720
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e717 	ldw	r2,-25700(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e717 	ldw	r2,-25700(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6abd014 	ori	gp,gp,44864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10929b14 	ori	r2,r2,19052

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d38214 	ori	r3,r3,19976

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ed000 	call	1000ed00 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000eeac0 	call	1000eeac <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// can you even read

// our main function!!! this is where the magic happens
int main()
{
10000268:	defffb04 	addi	sp,sp,-20
1000026c:	dfc00415 	stw	ra,16(sp)
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
	// put in our seed
	srand(*to_sw_port0);
10000278:	00804c04 	movi	r2,304
1000027c:	10800017 	ldw	r2,0(r2)
10000280:	1009883a 	mov	r4,r2
10000284:	00040640 	call	10004064 <srand>

	// assign these to 0 at start
	comboFruit = 0;
10000288:	d026d915 	stw	zero,-25756(gp)
	physixOn = 0;
1000028c:	d026d715 	stw	zero,-25764(gp)

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000290:	e03ffd15 	stw	zero,-12(fp)
10000294:	00002e06 	br	10000350 <main+0xe8>
	{
		veggieObject[i].xPosition = 0;
10000298:	00840074 	movhi	r2,4097
1000029c:	1092c204 	addi	r2,r2,19208
100002a0:	e0fffd17 	ldw	r3,-12(fp)
100002a4:	1806917a 	slli	r3,r3,5
100002a8:	10c5883a 	add	r2,r2,r3
100002ac:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002b0:	00840074 	movhi	r2,4097
100002b4:	1092c204 	addi	r2,r2,19208
100002b8:	e0fffd17 	ldw	r3,-12(fp)
100002bc:	1806917a 	slli	r3,r3,5
100002c0:	10c5883a 	add	r2,r2,r3
100002c4:	10800104 	addi	r2,r2,4
100002c8:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002cc:	00840074 	movhi	r2,4097
100002d0:	1092c204 	addi	r2,r2,19208
100002d4:	e0fffd17 	ldw	r3,-12(fp)
100002d8:	1806917a 	slli	r3,r3,5
100002dc:	10c5883a 	add	r2,r2,r3
100002e0:	10800204 	addi	r2,r2,8
100002e4:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
100002e8:	00840074 	movhi	r2,4097
100002ec:	1092c204 	addi	r2,r2,19208
100002f0:	e0fffd17 	ldw	r3,-12(fp)
100002f4:	1806917a 	slli	r3,r3,5
100002f8:	10c5883a 	add	r2,r2,r3
100002fc:	10800304 	addi	r2,r2,12
10000300:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000304:	00840074 	movhi	r2,4097
10000308:	1092c204 	addi	r2,r2,19208
1000030c:	e0fffd17 	ldw	r3,-12(fp)
10000310:	1806917a 	slli	r3,r3,5
10000314:	10c5883a 	add	r2,r2,r3
10000318:	10800404 	addi	r2,r2,16
1000031c:	10000015 	stw	zero,0(r2)
10000320:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
10000324:	00840074 	movhi	r2,4097
10000328:	1092c204 	addi	r2,r2,19208
1000032c:	e0fffd17 	ldw	r3,-12(fp)
10000330:	1806917a 	slli	r3,r3,5
10000334:	10c5883a 	add	r2,r2,r3
10000338:	10800604 	addi	r2,r2,24
1000033c:	10000015 	stw	zero,0(r2)
10000340:	10000115 	stw	zero,4(r2)
	comboFruit = 0;
	physixOn = 0;

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000344:	e0bffd17 	ldw	r2,-12(fp)
10000348:	10800044 	addi	r2,r2,1
1000034c:	e0bffd15 	stw	r2,-12(fp)
10000350:	e0bffd17 	ldw	r2,-12(fp)
10000354:	10800410 	cmplti	r2,r2,16
10000358:	103fcf1e 	bne	r2,zero,10000298 <__alt_data_end+0xf8000298>
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}

	// TEST STUFF
	veggieObject[0].xPosition = 0;
1000035c:	00840074 	movhi	r2,4097
10000360:	1092c204 	addi	r2,r2,19208
10000364:	10000015 	stw	zero,0(r2)
	veggieObject[0].yPosition = 0;
10000368:	00840074 	movhi	r2,4097
1000036c:	1092c204 	addi	r2,r2,19208
10000370:	10000115 	stw	zero,4(r2)
	veggieObject[0].objectType = 0;
10000374:	00840074 	movhi	r2,4097
10000378:	1092c204 	addi	r2,r2,19208
1000037c:	10000215 	stw	zero,8(r2)
	veggieObject[0].objectState = 0;
10000380:	00840074 	movhi	r2,4097
10000384:	1092c204 	addi	r2,r2,19208
10000388:	10000315 	stw	zero,12(r2)

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000038c:	00804804 	movi	r2,288
10000390:	10800017 	ldw	r2,0(r2)
10000394:	e0bffe15 	stw	r2,-8(fp)
	unsigned long processorTime = processorStart;
10000398:	e0bffe17 	ldw	r2,-8(fp)
1000039c:	e0bfff15 	stw	r2,-4(fp)
	lastPhysixed = processorTime;
100003a0:	e0bfff17 	ldw	r2,-4(fp)
100003a4:	d0a6cc15 	stw	r2,-25808(gp)
	lastSpawned = processorTime;
100003a8:	e0bfff17 	ldw	r2,-4(fp)
100003ac:	d0a6d115 	stw	r2,-25788(gp)
	nextSpawnTime = processorTime;
100003b0:	e0bfff17 	ldw	r2,-4(fp)
100003b4:	d0a6d515 	stw	r2,-25772(gp)
	lastDisintegrated = processorTime;
100003b8:	e0bfff17 	ldw	r2,-4(fp)
100003bc:	d0a6d215 	stw	r2,-25784(gp)
	roundStart = 0;
100003c0:	d026d815 	stw	zero,-25760(gp)
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100003c4:	00806004 	movi	r2,384
100003c8:	10800017 	ldw	r2,0(r2)
100003cc:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
100003d0:	00805c04 	movi	r2,368
100003d4:	10800017 	ldw	r2,0(r2)
100003d8:	d0a6cd15 	stw	r2,-25804(gp)
	port2Unpackager();
100003dc:	0001bf00 	call	10001bf0 <port2Unpackager>

	// initialize our 3 fruits on screen for menu
	veggieObject[1].xPosition = 30;
100003e0:	00840074 	movhi	r2,4097
100003e4:	1092c204 	addi	r2,r2,19208
100003e8:	00c00784 	movi	r3,30
100003ec:	10c00815 	stw	r3,32(r2)
	veggieObject[1].yPosition = 100;
100003f0:	00840074 	movhi	r2,4097
100003f4:	1092c204 	addi	r2,r2,19208
100003f8:	00c01904 	movi	r3,100
100003fc:	10c00915 	stw	r3,36(r2)
	veggieObject[1].objectState = 1;
10000400:	00840074 	movhi	r2,4097
10000404:	1092c204 	addi	r2,r2,19208
10000408:	00c00044 	movi	r3,1
1000040c:	10c00b15 	stw	r3,44(r2)
	veggieObject[1].xVelocity = 0;
10000410:	00840074 	movhi	r2,4097
10000414:	1092c204 	addi	r2,r2,19208
10000418:	10000c15 	stw	zero,48(r2)
1000041c:	10000d15 	stw	zero,52(r2)
	veggieObject[1].yVelocity = 0;
10000420:	00840074 	movhi	r2,4097
10000424:	1092c204 	addi	r2,r2,19208
10000428:	10000e15 	stw	zero,56(r2)
1000042c:	10000f15 	stw	zero,60(r2)

	veggieObject[2].xPosition = 180;
10000430:	00840074 	movhi	r2,4097
10000434:	1092c204 	addi	r2,r2,19208
10000438:	00c02d04 	movi	r3,180
1000043c:	10c01015 	stw	r3,64(r2)
	veggieObject[2].yPosition = 320;
10000440:	00840074 	movhi	r2,4097
10000444:	1092c204 	addi	r2,r2,19208
10000448:	00c05004 	movi	r3,320
1000044c:	10c01115 	stw	r3,68(r2)
	veggieObject[2].objectState = 1;
10000450:	00840074 	movhi	r2,4097
10000454:	1092c204 	addi	r2,r2,19208
10000458:	00c00044 	movi	r3,1
1000045c:	10c01315 	stw	r3,76(r2)
	veggieObject[2].xVelocity = 0;
10000460:	00840074 	movhi	r2,4097
10000464:	1092c204 	addi	r2,r2,19208
10000468:	10001415 	stw	zero,80(r2)
1000046c:	10001515 	stw	zero,84(r2)
	veggieObject[2].yVelocity = 0;
10000470:	00840074 	movhi	r2,4097
10000474:	1092c204 	addi	r2,r2,19208
10000478:	10001615 	stw	zero,88(r2)
1000047c:	10001715 	stw	zero,92(r2)

	veggieObject[3].xPosition = 540;
10000480:	00840074 	movhi	r2,4097
10000484:	1092c204 	addi	r2,r2,19208
10000488:	00c08704 	movi	r3,540
1000048c:	10c01815 	stw	r3,96(r2)
	veggieObject[3].yPosition = 220;
10000490:	00840074 	movhi	r2,4097
10000494:	1092c204 	addi	r2,r2,19208
10000498:	00c03704 	movi	r3,220
1000049c:	10c01915 	stw	r3,100(r2)
	veggieObject[3].objectState = 1;
100004a0:	00840074 	movhi	r2,4097
100004a4:	1092c204 	addi	r2,r2,19208
100004a8:	00c00044 	movi	r3,1
100004ac:	10c01b15 	stw	r3,108(r2)
	veggieObject[3].xVelocity = 0;
100004b0:	00840074 	movhi	r2,4097
100004b4:	1092c204 	addi	r2,r2,19208
100004b8:	10001c15 	stw	zero,112(r2)
100004bc:	10001d15 	stw	zero,116(r2)
	veggieObject[3].yVelocity = 0;
100004c0:	00840074 	movhi	r2,4097
100004c4:	1092c204 	addi	r2,r2,19208
100004c8:	10001e15 	stw	zero,120(r2)
100004cc:	10001f15 	stw	zero,124(r2)

	while(1)	// game while loop
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
100004d0:	00804804 	movi	r2,288
100004d4:	10800017 	ldw	r2,0(r2)
100004d8:	e0bfff15 	stw	r2,-4(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
100004dc:	e0ffff17 	ldw	r3,-4(fp)
100004e0:	e0bffe17 	ldw	r2,-8(fp)
100004e4:	1885c83a 	sub	r2,r3,r2
100004e8:	d0a6cb15 	stw	r2,-25812(gp)
//		printf("elapsed time is %lu \n", elapsedTime);

		statusEngine();	// keep track of our game state
100004ec:	00006680 	call	10000668 <statusEngine>

		if(key1)
100004f0:	d0a6d317 	ldw	r2,-25780(gp)
100004f4:	10000826 	beq	r2,zero,10000518 <main+0x2b0>
		{
			(veggieObject[0].objectState = 3);
100004f8:	00840074 	movhi	r2,4097
100004fc:	1092c204 	addi	r2,r2,19208
10000500:	00c000c4 	movi	r3,3
10000504:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 3;
10000508:	00840074 	movhi	r2,4097
1000050c:	1092c204 	addi	r2,r2,19208
10000510:	00c000c4 	movi	r3,3
10000514:	10c00215 	stw	r3,8(r2)
		}

		// constantly doing physics
		if (((elapsedTime - lastPhysixed) > 5) && (physixOn))
10000518:	d0e6cb17 	ldw	r3,-25812(gp)
1000051c:	d0a6cc17 	ldw	r2,-25808(gp)
10000520:	1885c83a 	sub	r2,r3,r2
10000524:	108001b0 	cmpltui	r2,r2,6
10000528:	1000051e 	bne	r2,zero,10000540 <main+0x2d8>
1000052c:	d0a6d717 	ldw	r2,-25764(gp)
10000530:	10000326 	beq	r2,zero,10000540 <main+0x2d8>
		{
			// greater than .05 seconds pass, and we're in a game playing state
			physicsEngine();	// call our physics engine!
10000534:	0000abc0 	call	10000abc <physicsEngine>
			lastPhysixed = elapsedTime;
10000538:	d0a6cb17 	ldw	r2,-25812(gp)
1000053c:	d0a6cc15 	stw	r2,-25808(gp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000540:	d0e6cb17 	ldw	r3,-25812(gp)
10000544:	d0a6d117 	ldw	r2,-25788(gp)
10000548:	1885c83a 	sub	r2,r3,r2
1000054c:	d0e6d517 	ldw	r3,-25772(gp)
10000550:	1880392e 	bgeu	r3,r2,10000638 <main+0x3d0>
		{
			// determine next spawn time based on level
			if(veggieObject[0].objectState == 1)	// easy mode spawn
10000554:	00840074 	movhi	r2,4097
10000558:	1092c204 	addi	r2,r2,19208
1000055c:	10800317 	ldw	r2,12(r2)
10000560:	10800058 	cmpnei	r2,r2,1
10000564:	10000d1e 	bne	r2,zero,1000059c <main+0x334>
			{
				spawningEngine(rand() % 5);
10000568:	000407c0 	call	1000407c <rand>
1000056c:	1009883a 	mov	r4,r2
10000570:	01400144 	movi	r5,5
10000574:	0002b740 	call	10002b74 <__modsi3>
10000578:	1009883a 	mov	r4,r2
1000057c:	0000e180 	call	10000e18 <spawningEngine>
				nextSpawnTime = (rand() % 25) + 50;
10000580:	000407c0 	call	1000407c <rand>
10000584:	1009883a 	mov	r4,r2
10000588:	01400644 	movi	r5,25
1000058c:	0002b740 	call	10002b74 <__modsi3>
10000590:	10800c84 	addi	r2,r2,50
10000594:	d0a6d515 	stw	r2,-25772(gp)
10000598:	00002506 	br	10000630 <main+0x3c8>
			}
			else if(veggieObject[0].objectState == 2)	// medium mode
1000059c:	00840074 	movhi	r2,4097
100005a0:	1092c204 	addi	r2,r2,19208
100005a4:	10800317 	ldw	r2,12(r2)
100005a8:	10800098 	cmpnei	r2,r2,2
100005ac:	10000d1e 	bne	r2,zero,100005e4 <main+0x37c>
			{
				spawningEngine(rand() % 7);
100005b0:	000407c0 	call	1000407c <rand>
100005b4:	1009883a 	mov	r4,r2
100005b8:	014001c4 	movi	r5,7
100005bc:	0002b740 	call	10002b74 <__modsi3>
100005c0:	1009883a 	mov	r4,r2
100005c4:	0000e180 	call	10000e18 <spawningEngine>
				nextSpawnTime = (rand() % 75) + 25;
100005c8:	000407c0 	call	1000407c <rand>
100005cc:	1009883a 	mov	r4,r2
100005d0:	014012c4 	movi	r5,75
100005d4:	0002b740 	call	10002b74 <__modsi3>
100005d8:	10800644 	addi	r2,r2,25
100005dc:	d0a6d515 	stw	r2,-25772(gp)
100005e0:	00001306 	br	10000630 <main+0x3c8>
			}
			else if(veggieObject[0].objectState == 3)	// easy mode spawn
100005e4:	00840074 	movhi	r2,4097
100005e8:	1092c204 	addi	r2,r2,19208
100005ec:	10800317 	ldw	r2,12(r2)
100005f0:	108000d8 	cmpnei	r2,r2,3
100005f4:	10000c1e 	bne	r2,zero,10000628 <main+0x3c0>
			{
				spawningEngine(rand() % 9);
100005f8:	000407c0 	call	1000407c <rand>
100005fc:	1009883a 	mov	r4,r2
10000600:	01400244 	movi	r5,9
10000604:	0002b740 	call	10002b74 <__modsi3>
10000608:	1009883a 	mov	r4,r2
1000060c:	0000e180 	call	10000e18 <spawningEngine>
				nextSpawnTime = (rand() % 100);		// hard mode
10000610:	000407c0 	call	1000407c <rand>
10000614:	1009883a 	mov	r4,r2
10000618:	01401904 	movi	r5,100
1000061c:	0002b740 	call	10002b74 <__modsi3>
10000620:	d0a6d515 	stw	r2,-25772(gp)
10000624:	00000206 	br	10000630 <main+0x3c8>
			}
			else
			{
				nextSpawnTime = 200;	// we're in another state. check back soon!
10000628:	00803204 	movi	r2,200
1000062c:	d0a6d515 	stw	r2,-25772(gp)
			}
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
			lastSpawned = elapsedTime;
10000630:	d0a6cb17 	ldw	r2,-25812(gp)
10000634:	d0a6d115 	stw	r2,-25788(gp)
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .1 sec
10000638:	d0e6cb17 	ldw	r3,-25812(gp)
1000063c:	d0a6d217 	ldw	r2,-25784(gp)
10000640:	1885c83a 	sub	r2,r3,r2
10000644:	10800570 	cmpltui	r2,r2,21
10000648:	1000031e 	bne	r2,zero,10000658 <main+0x3f0>
		{
			disintegrateEngine();	// call our spawning engine!
1000064c:	00015fc0 	call	100015fc <disintegrateEngine>
			lastDisintegrated = elapsedTime;
10000650:	d0a6cb17 	ldw	r2,-25812(gp)
10000654:	d0a6d215 	stw	r2,-25784(gp)
		}
		slicingEngine();	// check if we need to slice anything
10000658:	00011f00 	call	100011f0 <slicingEngine>
		port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
1000065c:	0001bf00 	call	10001bf0 <port2Unpackager>
		FPGAcommunicator();	// call this every time to update the FPGA
10000660:	00017d80 	call	100017d8 <FPGAcommunicator>
	}
10000664:	003f9a06 	br	100004d0 <__alt_data_end+0xf80004d0>

10000668 <statusEngine>:
	return 0;
}

void statusEngine()
{
10000668:	defffc04 	addi	sp,sp,-16
1000066c:	dfc00315 	stw	ra,12(sp)
10000670:	df000215 	stw	fp,8(sp)
10000674:	df000204 	addi	fp,sp,8
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
10000678:	00840074 	movhi	r2,4097
1000067c:	1092c204 	addi	r2,r2,19208
10000680:	10800317 	ldw	r2,12(r2)
10000684:	0080a10e 	bge	zero,r2,1000090c <statusEngine+0x2a4>
10000688:	00840074 	movhi	r2,4097
1000068c:	1092c204 	addi	r2,r2,19208
10000690:	10800317 	ldw	r2,12(r2)
10000694:	10800108 	cmpgei	r2,r2,4
10000698:	10009c1e 	bne	r2,zero,1000090c <statusEngine+0x2a4>
	{
		// this means we're currently playing a round
		physixOn = 1;
1000069c:	00800044 	movi	r2,1
100006a0:	d0a6d715 	stw	r2,-25764(gp)
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
100006a4:	d0e6cb17 	ldw	r3,-25812(gp)
100006a8:	d0a6d817 	ldw	r2,-25760(gp)
100006ac:	1885c83a 	sub	r2,r3,r2
100006b0:	1009883a 	mov	r4,r2
100006b4:	01401904 	movi	r5,100
100006b8:	0002bd00 	call	10002bd0 <__udivsi3>
100006bc:	1007883a 	mov	r3,r2
100006c0:	00800f04 	movi	r2,60
100006c4:	10c5c83a 	sub	r2,r2,r3
100006c8:	1007883a 	mov	r3,r2
100006cc:	00840074 	movhi	r2,4097
100006d0:	1092c204 	addi	r2,r2,19208
100006d4:	10c00115 	stw	r3,4(r2)
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
100006d8:	00840074 	movhi	r2,4097
100006dc:	1092c204 	addi	r2,r2,19208
100006e0:	10800117 	ldw	r2,4(r2)
100006e4:	10003d1e 	bne	r2,zero,100007dc <statusEngine+0x174>
		{
			physixOn = 0;
100006e8:	d026d715 	stw	zero,-25764(gp)
			veggieObject[0].objectState = 4;	// move to GAME WON state
100006ec:	00840074 	movhi	r2,4097
100006f0:	1092c204 	addi	r2,r2,19208
100006f4:	00c00104 	movi	r3,4
100006f8:	10c00315 	stw	r3,12(r2)

			int i;
			for(i=1; i<16; i++)
100006fc:	00800044 	movi	r2,1
10000700:	e0bffe15 	stw	r2,-8(fp)
10000704:	00002e06 	br	100007c0 <statusEngine+0x158>
			{
				veggieObject[i].xPosition = 0;
10000708:	00840074 	movhi	r2,4097
1000070c:	1092c204 	addi	r2,r2,19208
10000710:	e0fffe17 	ldw	r3,-8(fp)
10000714:	1806917a 	slli	r3,r3,5
10000718:	10c5883a 	add	r2,r2,r3
1000071c:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000720:	00840074 	movhi	r2,4097
10000724:	1092c204 	addi	r2,r2,19208
10000728:	e0fffe17 	ldw	r3,-8(fp)
1000072c:	1806917a 	slli	r3,r3,5
10000730:	10c5883a 	add	r2,r2,r3
10000734:	10800104 	addi	r2,r2,4
10000738:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
1000073c:	00840074 	movhi	r2,4097
10000740:	1092c204 	addi	r2,r2,19208
10000744:	e0fffe17 	ldw	r3,-8(fp)
10000748:	1806917a 	slli	r3,r3,5
1000074c:	10c5883a 	add	r2,r2,r3
10000750:	10800204 	addi	r2,r2,8
10000754:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000758:	00840074 	movhi	r2,4097
1000075c:	1092c204 	addi	r2,r2,19208
10000760:	e0fffe17 	ldw	r3,-8(fp)
10000764:	1806917a 	slli	r3,r3,5
10000768:	10c5883a 	add	r2,r2,r3
1000076c:	10800304 	addi	r2,r2,12
10000770:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000774:	00840074 	movhi	r2,4097
10000778:	1092c204 	addi	r2,r2,19208
1000077c:	e0fffe17 	ldw	r3,-8(fp)
10000780:	1806917a 	slli	r3,r3,5
10000784:	10c5883a 	add	r2,r2,r3
10000788:	10800404 	addi	r2,r2,16
1000078c:	10000015 	stw	zero,0(r2)
10000790:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000794:	00840074 	movhi	r2,4097
10000798:	1092c204 	addi	r2,r2,19208
1000079c:	e0fffe17 	ldw	r3,-8(fp)
100007a0:	1806917a 	slli	r3,r3,5
100007a4:	10c5883a 	add	r2,r2,r3
100007a8:	10800604 	addi	r2,r2,24
100007ac:	10000015 	stw	zero,0(r2)
100007b0:	10000115 	stw	zero,4(r2)
		{
			physixOn = 0;
			veggieObject[0].objectState = 4;	// move to GAME WON state

			int i;
			for(i=1; i<16; i++)
100007b4:	e0bffe17 	ldw	r2,-8(fp)
100007b8:	10800044 	addi	r2,r2,1
100007bc:	e0bffe15 	stw	r2,-8(fp)
100007c0:	e0bffe17 	ldw	r2,-8(fp)
100007c4:	10800410 	cmplti	r2,r2,16
100007c8:	103fcf1e 	bne	r2,zero,10000708 <__alt_data_end+0xf8000708>
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}

			printf("timed out\n");
100007cc:	01040074 	movhi	r4,4097
100007d0:	21042704 	addi	r4,r4,4252
100007d4:	00040500 	call	10004050 <puts>
100007d8:	00004b06 	br	10000908 <statusEngine+0x2a0>
		}
		else if(((veggieObject[0].objectState == 2) || (veggieObject[0].objectState == 3)) && (veggieObject[0].objectType <= 0))
100007dc:	00840074 	movhi	r2,4097
100007e0:	1092c204 	addi	r2,r2,19208
100007e4:	10800317 	ldw	r2,12(r2)
100007e8:	108000a0 	cmpeqi	r2,r2,2
100007ec:	1000051e 	bne	r2,zero,10000804 <statusEngine+0x19c>
100007f0:	00840074 	movhi	r2,4097
100007f4:	1092c204 	addi	r2,r2,19208
100007f8:	10800317 	ldw	r2,12(r2)
100007fc:	108000d8 	cmpnei	r2,r2,3
10000800:	1000411e 	bne	r2,zero,10000908 <statusEngine+0x2a0>
10000804:	00840074 	movhi	r2,4097
10000808:	1092c204 	addi	r2,r2,19208
1000080c:	10800217 	ldw	r2,8(r2)
10000810:	00803d16 	blt	zero,r2,10000908 <statusEngine+0x2a0>
		{
			// this means we're game over :(
			physixOn = 0;
10000814:	d026d715 	stw	zero,-25764(gp)
			veggieObject[0].objectState = 5;	// move to GAME OVER state
10000818:	00840074 	movhi	r2,4097
1000081c:	1092c204 	addi	r2,r2,19208
10000820:	00c00144 	movi	r3,5
10000824:	10c00315 	stw	r3,12(r2)

			int i;
			for(i=1; i<16; i++)
10000828:	00800044 	movi	r2,1
1000082c:	e0bfff15 	stw	r2,-4(fp)
10000830:	00002e06 	br	100008ec <statusEngine+0x284>
			{
				veggieObject[i].xPosition = 0;
10000834:	00840074 	movhi	r2,4097
10000838:	1092c204 	addi	r2,r2,19208
1000083c:	e0ffff17 	ldw	r3,-4(fp)
10000840:	1806917a 	slli	r3,r3,5
10000844:	10c5883a 	add	r2,r2,r3
10000848:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
1000084c:	00840074 	movhi	r2,4097
10000850:	1092c204 	addi	r2,r2,19208
10000854:	e0ffff17 	ldw	r3,-4(fp)
10000858:	1806917a 	slli	r3,r3,5
1000085c:	10c5883a 	add	r2,r2,r3
10000860:	10800104 	addi	r2,r2,4
10000864:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000868:	00840074 	movhi	r2,4097
1000086c:	1092c204 	addi	r2,r2,19208
10000870:	e0ffff17 	ldw	r3,-4(fp)
10000874:	1806917a 	slli	r3,r3,5
10000878:	10c5883a 	add	r2,r2,r3
1000087c:	10800204 	addi	r2,r2,8
10000880:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000884:	00840074 	movhi	r2,4097
10000888:	1092c204 	addi	r2,r2,19208
1000088c:	e0ffff17 	ldw	r3,-4(fp)
10000890:	1806917a 	slli	r3,r3,5
10000894:	10c5883a 	add	r2,r2,r3
10000898:	10800304 	addi	r2,r2,12
1000089c:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
100008a0:	00840074 	movhi	r2,4097
100008a4:	1092c204 	addi	r2,r2,19208
100008a8:	e0ffff17 	ldw	r3,-4(fp)
100008ac:	1806917a 	slli	r3,r3,5
100008b0:	10c5883a 	add	r2,r2,r3
100008b4:	10800404 	addi	r2,r2,16
100008b8:	10000015 	stw	zero,0(r2)
100008bc:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
100008c0:	00840074 	movhi	r2,4097
100008c4:	1092c204 	addi	r2,r2,19208
100008c8:	e0ffff17 	ldw	r3,-4(fp)
100008cc:	1806917a 	slli	r3,r3,5
100008d0:	10c5883a 	add	r2,r2,r3
100008d4:	10800604 	addi	r2,r2,24
100008d8:	10000015 	stw	zero,0(r2)
100008dc:	10000115 	stw	zero,4(r2)
			// this means we're game over :(
			physixOn = 0;
			veggieObject[0].objectState = 5;	// move to GAME OVER state

			int i;
			for(i=1; i<16; i++)
100008e0:	e0bfff17 	ldw	r2,-4(fp)
100008e4:	10800044 	addi	r2,r2,1
100008e8:	e0bfff15 	stw	r2,-4(fp)
100008ec:	e0bfff17 	ldw	r2,-4(fp)
100008f0:	10800410 	cmplti	r2,r2,16
100008f4:	103fcf1e 	bne	r2,zero,10000834 <__alt_data_end+0xf8000834>
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}

			printf("game over\n");
100008f8:	01040074 	movhi	r4,4097
100008fc:	21042a04 	addi	r4,r4,4264
10000900:	00040500 	call	10004050 <puts>
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
	{
		// this means we're currently playing a round
		physixOn = 1;
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
10000904:	00006806 	br	10000aa8 <statusEngine+0x440>
10000908:	00006706 	br	10000aa8 <statusEngine+0x440>
			}

			printf("game over\n");
		}
	}
	else if(veggieObject[0].objectState == 0)	// check if we're in menu
1000090c:	00840074 	movhi	r2,4097
10000910:	1092c204 	addi	r2,r2,19208
10000914:	10800317 	ldw	r2,12(r2)
10000918:	1000441e 	bne	r2,zero,10000a2c <statusEngine+0x3c4>
	{
		physixOn = 0;
1000091c:	d026d715 	stw	zero,-25764(gp)
		veggieObject[0].xPosition = 0;
10000920:	00840074 	movhi	r2,4097
10000924:	1092c204 	addi	r2,r2,19208
10000928:	10000015 	stw	zero,0(r2)
		veggieObject[0].yPosition = 0;
1000092c:	00840074 	movhi	r2,4097
10000930:	1092c204 	addi	r2,r2,19208
10000934:	10000115 	stw	zero,4(r2)

		// initialize our 3 fruits on screen for menu
		veggieObject[1].xPosition = 30;
10000938:	00840074 	movhi	r2,4097
1000093c:	1092c204 	addi	r2,r2,19208
10000940:	00c00784 	movi	r3,30
10000944:	10c00815 	stw	r3,32(r2)
		veggieObject[1].yPosition = 100;
10000948:	00840074 	movhi	r2,4097
1000094c:	1092c204 	addi	r2,r2,19208
10000950:	00c01904 	movi	r3,100
10000954:	10c00915 	stw	r3,36(r2)
		veggieObject[1].objectState = 1;
10000958:	00840074 	movhi	r2,4097
1000095c:	1092c204 	addi	r2,r2,19208
10000960:	00c00044 	movi	r3,1
10000964:	10c00b15 	stw	r3,44(r2)
		veggieObject[1].xVelocity = 0;
10000968:	00840074 	movhi	r2,4097
1000096c:	1092c204 	addi	r2,r2,19208
10000970:	10000c15 	stw	zero,48(r2)
10000974:	10000d15 	stw	zero,52(r2)
		veggieObject[1].yVelocity = 0;
10000978:	00840074 	movhi	r2,4097
1000097c:	1092c204 	addi	r2,r2,19208
10000980:	10000e15 	stw	zero,56(r2)
10000984:	10000f15 	stw	zero,60(r2)

		veggieObject[2].xPosition = 180;
10000988:	00840074 	movhi	r2,4097
1000098c:	1092c204 	addi	r2,r2,19208
10000990:	00c02d04 	movi	r3,180
10000994:	10c01015 	stw	r3,64(r2)
		veggieObject[2].yPosition = 320;
10000998:	00840074 	movhi	r2,4097
1000099c:	1092c204 	addi	r2,r2,19208
100009a0:	00c05004 	movi	r3,320
100009a4:	10c01115 	stw	r3,68(r2)
		veggieObject[2].objectState = 1;
100009a8:	00840074 	movhi	r2,4097
100009ac:	1092c204 	addi	r2,r2,19208
100009b0:	00c00044 	movi	r3,1
100009b4:	10c01315 	stw	r3,76(r2)
		veggieObject[2].xVelocity = 0;
100009b8:	00840074 	movhi	r2,4097
100009bc:	1092c204 	addi	r2,r2,19208
100009c0:	10001415 	stw	zero,80(r2)
100009c4:	10001515 	stw	zero,84(r2)
		veggieObject[2].yVelocity = 0;
100009c8:	00840074 	movhi	r2,4097
100009cc:	1092c204 	addi	r2,r2,19208
100009d0:	10001615 	stw	zero,88(r2)
100009d4:	10001715 	stw	zero,92(r2)

		veggieObject[3].xPosition = 450;
100009d8:	00840074 	movhi	r2,4097
100009dc:	1092c204 	addi	r2,r2,19208
100009e0:	00c07084 	movi	r3,450
100009e4:	10c01815 	stw	r3,96(r2)
		veggieObject[3].yPosition = 220;
100009e8:	00840074 	movhi	r2,4097
100009ec:	1092c204 	addi	r2,r2,19208
100009f0:	00c03704 	movi	r3,220
100009f4:	10c01915 	stw	r3,100(r2)
		veggieObject[3].objectState = 1;
100009f8:	00840074 	movhi	r2,4097
100009fc:	1092c204 	addi	r2,r2,19208
10000a00:	00c00044 	movi	r3,1
10000a04:	10c01b15 	stw	r3,108(r2)
		veggieObject[3].xVelocity = 0;
10000a08:	00840074 	movhi	r2,4097
10000a0c:	1092c204 	addi	r2,r2,19208
10000a10:	10001c15 	stw	zero,112(r2)
10000a14:	10001d15 	stw	zero,116(r2)
		veggieObject[3].yVelocity = 0;
10000a18:	00840074 	movhi	r2,4097
10000a1c:	1092c204 	addi	r2,r2,19208
10000a20:	10001e15 	stw	zero,120(r2)
10000a24:	10001f15 	stw	zero,124(r2)
10000a28:	00001f06 	br	10000aa8 <statusEngine+0x440>
	}
	else if((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))
10000a2c:	00840074 	movhi	r2,4097
10000a30:	1092c204 	addi	r2,r2,19208
10000a34:	10800317 	ldw	r2,12(r2)
10000a38:	10800120 	cmpeqi	r2,r2,4
10000a3c:	1000051e 	bne	r2,zero,10000a54 <statusEngine+0x3ec>
10000a40:	00840074 	movhi	r2,4097
10000a44:	1092c204 	addi	r2,r2,19208
10000a48:	10800317 	ldw	r2,12(r2)
10000a4c:	10800158 	cmpnei	r2,r2,5
10000a50:	1000151e 	bne	r2,zero,10000aa8 <statusEngine+0x440>
	{
		// put in our veggie
		veggieObject[4].xPosition = 230;
10000a54:	00840074 	movhi	r2,4097
10000a58:	1092c204 	addi	r2,r2,19208
10000a5c:	00c03984 	movi	r3,230
10000a60:	10c02015 	stw	r3,128(r2)
		veggieObject[4].yPosition = 150;
10000a64:	00840074 	movhi	r2,4097
10000a68:	1092c204 	addi	r2,r2,19208
10000a6c:	00c02584 	movi	r3,150
10000a70:	10c02115 	stw	r3,132(r2)
		veggieObject[4].objectState = 1;
10000a74:	00840074 	movhi	r2,4097
10000a78:	1092c204 	addi	r2,r2,19208
10000a7c:	00c00044 	movi	r3,1
10000a80:	10c02315 	stw	r3,140(r2)
		veggieObject[4].xVelocity = 0;
10000a84:	00840074 	movhi	r2,4097
10000a88:	1092c204 	addi	r2,r2,19208
10000a8c:	10002415 	stw	zero,144(r2)
10000a90:	10002515 	stw	zero,148(r2)
		veggieObject[4].yVelocity = 0;
10000a94:	00840074 	movhi	r2,4097
10000a98:	1092c204 	addi	r2,r2,19208
10000a9c:	10002615 	stw	zero,152(r2)
10000aa0:	10002715 	stw	zero,156(r2)

		physixOn = 0;
10000aa4:	d026d715 	stw	zero,-25764(gp)
	}
}
10000aa8:	e037883a 	mov	sp,fp
10000aac:	dfc00117 	ldw	ra,4(sp)
10000ab0:	df000017 	ldw	fp,0(sp)
10000ab4:	dec00204 	addi	sp,sp,8
10000ab8:	f800283a 	ret

10000abc <physicsEngine>:

void physicsEngine()
{
10000abc:	defffd04 	addi	sp,sp,-12
10000ac0:	dfc00215 	stw	ra,8(sp)
10000ac4:	df000115 	stw	fp,4(sp)
10000ac8:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000acc:	00800044 	movi	r2,1
10000ad0:	e0bfff15 	stw	r2,-4(fp)
10000ad4:	0000c706 	br	10000df4 <physicsEngine+0x338>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000ad8:	00840074 	movhi	r2,4097
10000adc:	1092c204 	addi	r2,r2,19208
10000ae0:	e0ffff17 	ldw	r3,-4(fp)
10000ae4:	1806917a 	slli	r3,r3,5
10000ae8:	10c5883a 	add	r2,r2,r3
10000aec:	10800304 	addi	r2,r2,12
10000af0:	10800017 	ldw	r2,0(r2)
10000af4:	1000bc26 	beq	r2,zero,10000de8 <physicsEngine+0x32c>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000af8:	00840074 	movhi	r2,4097
10000afc:	1092c204 	addi	r2,r2,19208
10000b00:	e0ffff17 	ldw	r3,-4(fp)
10000b04:	1806917a 	slli	r3,r3,5
10000b08:	10c5883a 	add	r2,r2,r3
10000b0c:	10800017 	ldw	r2,0(r2)
10000b10:	1009883a 	mov	r4,r2
10000b14:	0003dfc0 	call	10003dfc <__floatsidf>
10000b18:	100b883a 	mov	r5,r2
10000b1c:	180d883a 	mov	r6,r3
10000b20:	00840074 	movhi	r2,4097
10000b24:	1092c204 	addi	r2,r2,19208
10000b28:	e0ffff17 	ldw	r3,-4(fp)
10000b2c:	1806917a 	slli	r3,r3,5
10000b30:	10c5883a 	add	r2,r2,r3
10000b34:	11000404 	addi	r4,r2,16
10000b38:	20800017 	ldw	r2,0(r4)
10000b3c:	20c00117 	ldw	r3,4(r4)
10000b40:	2809883a 	mov	r4,r5
10000b44:	300b883a 	mov	r5,r6
10000b48:	100d883a 	mov	r6,r2
10000b4c:	180f883a 	mov	r7,r3
10000b50:	0002c080 	call	10002c08 <__adddf3>
10000b54:	1009883a 	mov	r4,r2
10000b58:	180b883a 	mov	r5,r3
10000b5c:	2005883a 	mov	r2,r4
10000b60:	2807883a 	mov	r3,r5
10000b64:	1009883a 	mov	r4,r2
10000b68:	180b883a 	mov	r5,r3
10000b6c:	0003d740 	call	10003d74 <__fixdfsi>
10000b70:	1009883a 	mov	r4,r2
10000b74:	00840074 	movhi	r2,4097
10000b78:	1092c204 	addi	r2,r2,19208
10000b7c:	e0ffff17 	ldw	r3,-4(fp)
10000b80:	1806917a 	slli	r3,r3,5
10000b84:	10c5883a 	add	r2,r2,r3
10000b88:	11000015 	stw	r4,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000b8c:	00840074 	movhi	r2,4097
10000b90:	1092c204 	addi	r2,r2,19208
10000b94:	e0ffff17 	ldw	r3,-4(fp)
10000b98:	1806917a 	slli	r3,r3,5
10000b9c:	10c5883a 	add	r2,r2,r3
10000ba0:	10800104 	addi	r2,r2,4
10000ba4:	10800017 	ldw	r2,0(r2)
10000ba8:	1009883a 	mov	r4,r2
10000bac:	0003dfc0 	call	10003dfc <__floatsidf>
10000bb0:	100b883a 	mov	r5,r2
10000bb4:	180d883a 	mov	r6,r3
10000bb8:	00840074 	movhi	r2,4097
10000bbc:	1092c204 	addi	r2,r2,19208
10000bc0:	e0ffff17 	ldw	r3,-4(fp)
10000bc4:	1806917a 	slli	r3,r3,5
10000bc8:	10c5883a 	add	r2,r2,r3
10000bcc:	11000604 	addi	r4,r2,24
10000bd0:	20800017 	ldw	r2,0(r4)
10000bd4:	20c00117 	ldw	r3,4(r4)
10000bd8:	2809883a 	mov	r4,r5
10000bdc:	300b883a 	mov	r5,r6
10000be0:	100d883a 	mov	r6,r2
10000be4:	180f883a 	mov	r7,r3
10000be8:	0002c080 	call	10002c08 <__adddf3>
10000bec:	1009883a 	mov	r4,r2
10000bf0:	180b883a 	mov	r5,r3
10000bf4:	2005883a 	mov	r2,r4
10000bf8:	2807883a 	mov	r3,r5
10000bfc:	1009883a 	mov	r4,r2
10000c00:	180b883a 	mov	r5,r3
10000c04:	0003d740 	call	10003d74 <__fixdfsi>
10000c08:	1009883a 	mov	r4,r2
10000c0c:	00840074 	movhi	r2,4097
10000c10:	1092c204 	addi	r2,r2,19208
10000c14:	e0ffff17 	ldw	r3,-4(fp)
10000c18:	1806917a 	slli	r3,r3,5
10000c1c:	10c5883a 	add	r2,r2,r3
10000c20:	10800104 	addi	r2,r2,4
10000c24:	11000015 	stw	r4,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000c28:	00840074 	movhi	r2,4097
10000c2c:	1092c204 	addi	r2,r2,19208
10000c30:	e0ffff17 	ldw	r3,-4(fp)
10000c34:	1806917a 	slli	r3,r3,5
10000c38:	10c5883a 	add	r2,r2,r3
10000c3c:	11000604 	addi	r4,r2,24
10000c40:	20800017 	ldw	r2,0(r4)
10000c44:	20c00117 	ldw	r3,4(r4)
10000c48:	1009883a 	mov	r4,r2
10000c4c:	180b883a 	mov	r5,r3
10000c50:	000d883a 	mov	r6,zero
10000c54:	01cffc34 	movhi	r7,16368
10000c58:	00034a40 	call	100034a4 <__subdf3>
10000c5c:	1009883a 	mov	r4,r2
10000c60:	180b883a 	mov	r5,r3
10000c64:	2005883a 	mov	r2,r4
10000c68:	2807883a 	mov	r3,r5
10000c6c:	01040074 	movhi	r4,4097
10000c70:	2112c204 	addi	r4,r4,19208
10000c74:	e17fff17 	ldw	r5,-4(fp)
10000c78:	280a917a 	slli	r5,r5,5
10000c7c:	2149883a 	add	r4,r4,r5
10000c80:	21000604 	addi	r4,r4,24
10000c84:	20800015 	stw	r2,0(r4)
10000c88:	20c00115 	stw	r3,4(r4)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000c8c:	00840074 	movhi	r2,4097
10000c90:	1092c204 	addi	r2,r2,19208
10000c94:	e0ffff17 	ldw	r3,-4(fp)
10000c98:	1806917a 	slli	r3,r3,5
10000c9c:	10c5883a 	add	r2,r2,r3
10000ca0:	10800104 	addi	r2,r2,4
10000ca4:	10800017 	ldw	r2,0(r2)
10000ca8:	10000f16 	blt	r2,zero,10000ce8 <physicsEngine+0x22c>
10000cac:	00840074 	movhi	r2,4097
10000cb0:	1092c204 	addi	r2,r2,19208
10000cb4:	e0ffff17 	ldw	r3,-4(fp)
10000cb8:	1806917a 	slli	r3,r3,5
10000cbc:	10c5883a 	add	r2,r2,r3
10000cc0:	10800017 	ldw	r2,0(r2)
10000cc4:	10000816 	blt	r2,zero,10000ce8 <physicsEngine+0x22c>
10000cc8:	00840074 	movhi	r2,4097
10000ccc:	1092c204 	addi	r2,r2,19208
10000cd0:	e0ffff17 	ldw	r3,-4(fp)
10000cd4:	1806917a 	slli	r3,r3,5
10000cd8:	10c5883a 	add	r2,r2,r3
10000cdc:	10800017 	ldw	r2,0(r2)
10000ce0:	1080a050 	cmplti	r2,r2,641
10000ce4:	1000401e 	bne	r2,zero,10000de8 <physicsEngine+0x32c>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000ce8:	00840074 	movhi	r2,4097
10000cec:	1092c204 	addi	r2,r2,19208
10000cf0:	e0ffff17 	ldw	r3,-4(fp)
10000cf4:	1806917a 	slli	r3,r3,5
10000cf8:	10c5883a 	add	r2,r2,r3
10000cfc:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000d00:	00840074 	movhi	r2,4097
10000d04:	1092c204 	addi	r2,r2,19208
10000d08:	e0ffff17 	ldw	r3,-4(fp)
10000d0c:	1806917a 	slli	r3,r3,5
10000d10:	10c5883a 	add	r2,r2,r3
10000d14:	10800104 	addi	r2,r2,4
10000d18:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000d1c:	00840074 	movhi	r2,4097
10000d20:	1092c204 	addi	r2,r2,19208
10000d24:	e0ffff17 	ldw	r3,-4(fp)
10000d28:	1806917a 	slli	r3,r3,5
10000d2c:	10c5883a 	add	r2,r2,r3
10000d30:	10800204 	addi	r2,r2,8
10000d34:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000d38:	00840074 	movhi	r2,4097
10000d3c:	1092c204 	addi	r2,r2,19208
10000d40:	e0ffff17 	ldw	r3,-4(fp)
10000d44:	1806917a 	slli	r3,r3,5
10000d48:	10c5883a 	add	r2,r2,r3
10000d4c:	10800304 	addi	r2,r2,12
10000d50:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000d54:	00840074 	movhi	r2,4097
10000d58:	1092c204 	addi	r2,r2,19208
10000d5c:	e0ffff17 	ldw	r3,-4(fp)
10000d60:	1806917a 	slli	r3,r3,5
10000d64:	10c5883a 	add	r2,r2,r3
10000d68:	10800404 	addi	r2,r2,16
10000d6c:	10000015 	stw	zero,0(r2)
10000d70:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000d74:	00840074 	movhi	r2,4097
10000d78:	1092c204 	addi	r2,r2,19208
10000d7c:	e0ffff17 	ldw	r3,-4(fp)
10000d80:	1806917a 	slli	r3,r3,5
10000d84:	10c5883a 	add	r2,r2,r3
10000d88:	10800604 	addi	r2,r2,24
10000d8c:	10000015 	stw	zero,0(r2)
10000d90:	10000115 	stw	zero,4(r2)

				// reduce score!
				if(i<9)
10000d94:	e0bfff17 	ldw	r2,-4(fp)
10000d98:	10800248 	cmpgei	r2,r2,9
10000d9c:	10000f1e 	bne	r2,zero,10000ddc <physicsEngine+0x320>
				{
					veggieObject[0].xPosition = veggieObject[0].xPosition - 3;
10000da0:	00840074 	movhi	r2,4097
10000da4:	1092c204 	addi	r2,r2,19208
10000da8:	10800017 	ldw	r2,0(r2)
10000dac:	10ffff44 	addi	r3,r2,-3
10000db0:	00840074 	movhi	r2,4097
10000db4:	1092c204 	addi	r2,r2,19208
10000db8:	10c00015 	stw	r3,0(r2)
					printf("veggie escaped! score decreased to %d! \n", veggieObject[0].xPosition);
10000dbc:	00840074 	movhi	r2,4097
10000dc0:	1092c204 	addi	r2,r2,19208
10000dc4:	10800017 	ldw	r2,0(r2)
10000dc8:	01040074 	movhi	r4,4097
10000dcc:	21042d04 	addi	r4,r4,4276
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	0003f5c0 	call	10003f5c <printf>
10000dd8:	00000306 	br	10000de8 <physicsEngine+0x32c>
				}
				else
				{
					printf("bomb gone! whew!");
10000ddc:	01040074 	movhi	r4,4097
10000de0:	21043804 	addi	r4,r4,4320
10000de4:	0003f5c0 	call	10003f5c <printf>
}

void physicsEngine()
{
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000de8:	e0bfff17 	ldw	r2,-4(fp)
10000dec:	10800044 	addi	r2,r2,1
10000df0:	e0bfff15 	stw	r2,-4(fp)
10000df4:	e0bfff17 	ldw	r2,-4(fp)
10000df8:	10800290 	cmplti	r2,r2,10
10000dfc:	103f361e 	bne	r2,zero,10000ad8 <__alt_data_end+0xf8000ad8>
				}
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000e00:	0001883a 	nop
}
10000e04:	e037883a 	mov	sp,fp
10000e08:	dfc00117 	ldw	ra,4(sp)
10000e0c:	df000017 	ldw	fp,0(sp)
10000e10:	dec00204 	addi	sp,sp,8
10000e14:	f800283a 	ret

10000e18 <spawningEngine>:

void spawningEngine(int pattern)
{
10000e18:	defff004 	addi	sp,sp,-64
10000e1c:	dfc00f15 	stw	ra,60(sp)
10000e20:	df000e15 	stw	fp,56(sp)
10000e24:	df000e04 	addi	fp,sp,56
10000e28:	e13fff15 	stw	r4,-4(fp)
	if(pattern == 0)	// one pattern will have us skip a spawn...caus whatev
10000e2c:	e0bfff17 	ldw	r2,-4(fp)
10000e30:	1000011e 	bne	r2,zero,10000e38 <spawningEngine+0x20>
	{
		return;
10000e34:	0000e906 	br	100011dc <spawningEngine+0x3c4>
	}
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
10000e38:	e0bfff17 	ldw	r2,-4(fp)
10000e3c:	108001e0 	cmpeqi	r2,r2,7
10000e40:	1000031e 	bne	r2,zero,10000e50 <spawningEngine+0x38>
10000e44:	e0bfff17 	ldw	r2,-4(fp)
10000e48:	10800258 	cmpnei	r2,r2,9
10000e4c:	10005a1e 	bne	r2,zero,10000fb8 <spawningEngine+0x1a0>
	{
		if(veggieObject[9].objectState == 0)	// if one doesn't exist, go!
10000e50:	00840074 	movhi	r2,4097
10000e54:	1092c204 	addi	r2,r2,19208
10000e58:	10804b17 	ldw	r2,300(r2)
10000e5c:	1000561e 	bne	r2,zero,10000fb8 <spawningEngine+0x1a0>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			double randomSpeedY, randomSpeedX;	// starting velocity

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10000e60:	000407c0 	call	1000407c <rand>
10000e64:	1009883a 	mov	r4,r2
10000e68:	01408704 	movi	r5,540
10000e6c:	0002b740 	call	10002b74 <__modsi3>
10000e70:	10800c84 	addi	r2,r2,50
10000e74:	e0bff815 	stw	r2,-32(fp)
			randomSpeedY = (rand() % 7) + 24;
10000e78:	000407c0 	call	1000407c <rand>
10000e7c:	1009883a 	mov	r4,r2
10000e80:	014001c4 	movi	r5,7
10000e84:	0002b740 	call	10002b74 <__modsi3>
10000e88:	10800604 	addi	r2,r2,24
10000e8c:	1009883a 	mov	r4,r2
10000e90:	0003dfc0 	call	10003dfc <__floatsidf>
10000e94:	1009883a 	mov	r4,r2
10000e98:	180b883a 	mov	r5,r3
10000e9c:	e13ff915 	stw	r4,-28(fp)
10000ea0:	e17ffa15 	stw	r5,-24(fp)
			randomSpeedX = (rand() % 12) - 6;
10000ea4:	000407c0 	call	1000407c <rand>
10000ea8:	1009883a 	mov	r4,r2
10000eac:	01400304 	movi	r5,12
10000eb0:	0002b740 	call	10002b74 <__modsi3>
10000eb4:	10bffe84 	addi	r2,r2,-6
10000eb8:	1009883a 	mov	r4,r2
10000ebc:	0003dfc0 	call	10003dfc <__floatsidf>
10000ec0:	1009883a 	mov	r4,r2
10000ec4:	180b883a 	mov	r5,r3
10000ec8:	e13ff215 	stw	r4,-56(fp)
10000ecc:	e17ff315 	stw	r5,-52(fp)

			// make sure we aren't throwing them out the edges
			if (randomX < 300)
10000ed0:	e0bff817 	ldw	r2,-32(fp)
10000ed4:	10804b28 	cmpgeui	r2,r2,300
10000ed8:	10000b1e 	bne	r2,zero,10000f08 <spawningEngine+0xf0>
			{
				randomSpeedX = (rand() % 12);
10000edc:	000407c0 	call	1000407c <rand>
10000ee0:	1009883a 	mov	r4,r2
10000ee4:	01400304 	movi	r5,12
10000ee8:	0002b740 	call	10002b74 <__modsi3>
10000eec:	1009883a 	mov	r4,r2
10000ef0:	0003dfc0 	call	10003dfc <__floatsidf>
10000ef4:	1009883a 	mov	r4,r2
10000ef8:	180b883a 	mov	r5,r3
10000efc:	e13ff215 	stw	r4,-56(fp)
10000f00:	e17ff315 	stw	r5,-52(fp)
10000f04:	00000e06 	br	10000f40 <spawningEngine+0x128>
			}
			else if (randomX > 350)
10000f08:	e0bff817 	ldw	r2,-32(fp)
10000f0c:	108057f0 	cmpltui	r2,r2,351
10000f10:	10000b1e 	bne	r2,zero,10000f40 <spawningEngine+0x128>
			{
				randomSpeedX = (rand() % 12) - 12;
10000f14:	000407c0 	call	1000407c <rand>
10000f18:	1009883a 	mov	r4,r2
10000f1c:	01400304 	movi	r5,12
10000f20:	0002b740 	call	10002b74 <__modsi3>
10000f24:	10bffd04 	addi	r2,r2,-12
10000f28:	1009883a 	mov	r4,r2
10000f2c:	0003dfc0 	call	10003dfc <__floatsidf>
10000f30:	1009883a 	mov	r4,r2
10000f34:	180b883a 	mov	r5,r3
10000f38:	e13ff215 	stw	r4,-56(fp)
10000f3c:	e17ff315 	stw	r5,-52(fp)
			}

			// now let's store these
			veggieObject[9].xPosition = randomX;
10000f40:	e0fff817 	ldw	r3,-32(fp)
10000f44:	00840074 	movhi	r2,4097
10000f48:	1092c204 	addi	r2,r2,19208
10000f4c:	10c04815 	stw	r3,288(r2)
			veggieObject[9].yPosition = 0;
10000f50:	00840074 	movhi	r2,4097
10000f54:	1092c204 	addi	r2,r2,19208
10000f58:	10004915 	stw	zero,292(r2)
			veggieObject[9].objectType = 0;
10000f5c:	00840074 	movhi	r2,4097
10000f60:	1092c204 	addi	r2,r2,19208
10000f64:	10004a15 	stw	zero,296(r2)
			veggieObject[9].xVelocity = randomSpeedX;
10000f68:	00840074 	movhi	r2,4097
10000f6c:	1092c204 	addi	r2,r2,19208
10000f70:	e0fff217 	ldw	r3,-56(fp)
10000f74:	10c04c15 	stw	r3,304(r2)
10000f78:	e0fff317 	ldw	r3,-52(fp)
10000f7c:	10c04d15 	stw	r3,308(r2)
			veggieObject[9].yVelocity = randomSpeedY;
10000f80:	00840074 	movhi	r2,4097
10000f84:	1092c204 	addi	r2,r2,19208
10000f88:	e0fff917 	ldw	r3,-28(fp)
10000f8c:	10c04e15 	stw	r3,312(r2)
10000f90:	e0fffa17 	ldw	r3,-24(fp)
10000f94:	10c04f15 	stw	r3,316(r2)
			veggieObject[9].objectState = 1;	// reserve this slot
10000f98:	00840074 	movhi	r2,4097
10000f9c:	1092c204 	addi	r2,r2,19208
10000fa0:	00c00044 	movi	r3,1
10000fa4:	10c04b15 	stw	r3,300(r2)

			printf("omg! a bomb has appeared! zomg!!! \n");
10000fa8:	01040074 	movhi	r4,4097
10000fac:	21043d04 	addi	r4,r4,4340
10000fb0:	00040500 	call	10004050 <puts>

			return; // our evillness is done!!!
10000fb4:	00008906 	br	100011dc <spawningEngine+0x3c4>
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
10000fb8:	00800044 	movi	r2,1
10000fbc:	e0bff415 	stw	r2,-48(fp)
10000fc0:	00008206 	br	100011cc <spawningEngine+0x3b4>
	{
		i = (rand() % 14 + 1);	// put it in a random port for random veggies
10000fc4:	000407c0 	call	1000407c <rand>
10000fc8:	1009883a 	mov	r4,r2
10000fcc:	01400384 	movi	r5,14
10000fd0:	0002b740 	call	10002b74 <__modsi3>
10000fd4:	10800044 	addi	r2,r2,1
10000fd8:	e0bffb15 	stw	r2,-20(fp)
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000fdc:	00840074 	movhi	r2,4097
10000fe0:	1092c204 	addi	r2,r2,19208
10000fe4:	e0fffb17 	ldw	r3,-20(fp)
10000fe8:	1806917a 	slli	r3,r3,5
10000fec:	10c5883a 	add	r2,r2,r3
10000ff0:	10800304 	addi	r2,r2,12
10000ff4:	10800017 	ldw	r2,0(r2)
10000ff8:	1000711e 	bne	r2,zero,100011c0 <spawningEngine+0x3a8>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			double randomSpeedY, randomSpeedX;	// starting velocity
			veggieObject[i].objectState = 1;	// reserve this slot
10000ffc:	00840074 	movhi	r2,4097
10001000:	1092c204 	addi	r2,r2,19208
10001004:	e0fffb17 	ldw	r3,-20(fp)
10001008:	1806917a 	slli	r3,r3,5
1000100c:	10c5883a 	add	r2,r2,r3
10001010:	10800304 	addi	r2,r2,12
10001014:	00c00044 	movi	r3,1
10001018:	10c00015 	stw	r3,0(r2)

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
1000101c:	e0bfff17 	ldw	r2,-4(fp)
10001020:	10800150 	cmplti	r2,r2,5
10001024:	10000b1e 	bne	r2,zero,10001054 <spawningEngine+0x23c>
			{
				int j;
				for(j=4; j<pattern; j++)
10001028:	00800104 	movi	r2,4
1000102c:	e0bff715 	stw	r2,-36(fp)
10001030:	00000506 	br	10001048 <spawningEngine+0x230>
				{
					spawningEngine(1);	// call ourselves to spawn another!
10001034:	01000044 	movi	r4,1
10001038:	0000e180 	call	10000e18 <spawningEngine>
			veggieObject[i].objectState = 1;	// reserve this slot

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
			{
				int j;
				for(j=4; j<pattern; j++)
1000103c:	e0bff717 	ldw	r2,-36(fp)
10001040:	10800044 	addi	r2,r2,1
10001044:	e0bff715 	stw	r2,-36(fp)
10001048:	e0fff717 	ldw	r3,-36(fp)
1000104c:	e0bfff17 	ldw	r2,-4(fp)
10001050:	18bff816 	blt	r3,r2,10001034 <__alt_data_end+0xf8001034>
					spawningEngine(1);	// call ourselves to spawn another!
				}
			}

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10001054:	000407c0 	call	1000407c <rand>
10001058:	1009883a 	mov	r4,r2
1000105c:	01408704 	movi	r5,540
10001060:	0002b740 	call	10002b74 <__modsi3>
10001064:	10800c84 	addi	r2,r2,50
10001068:	e0bffc15 	stw	r2,-16(fp)
			randomSpeedY = (rand() % 7) + 24;
1000106c:	000407c0 	call	1000407c <rand>
10001070:	1009883a 	mov	r4,r2
10001074:	014001c4 	movi	r5,7
10001078:	0002b740 	call	10002b74 <__modsi3>
1000107c:	10800604 	addi	r2,r2,24
10001080:	1009883a 	mov	r4,r2
10001084:	0003dfc0 	call	10003dfc <__floatsidf>
10001088:	1009883a 	mov	r4,r2
1000108c:	180b883a 	mov	r5,r3
10001090:	e13ffd15 	stw	r4,-12(fp)
10001094:	e17ffe15 	stw	r5,-8(fp)
			randomSpeedX = (rand() % 12) - 6;
10001098:	000407c0 	call	1000407c <rand>
1000109c:	1009883a 	mov	r4,r2
100010a0:	01400304 	movi	r5,12
100010a4:	0002b740 	call	10002b74 <__modsi3>
100010a8:	10bffe84 	addi	r2,r2,-6
100010ac:	1009883a 	mov	r4,r2
100010b0:	0003dfc0 	call	10003dfc <__floatsidf>
100010b4:	1009883a 	mov	r4,r2
100010b8:	180b883a 	mov	r5,r3
100010bc:	e13ff515 	stw	r4,-44(fp)
100010c0:	e17ff615 	stw	r5,-40(fp)

			// make sure we aren't throwing them out the edges
			if (randomX < 250)
100010c4:	e0bffc17 	ldw	r2,-16(fp)
100010c8:	10803ea8 	cmpgeui	r2,r2,250
100010cc:	10000b1e 	bne	r2,zero,100010fc <spawningEngine+0x2e4>
			{
				randomSpeedX = (rand() % 12);
100010d0:	000407c0 	call	1000407c <rand>
100010d4:	1009883a 	mov	r4,r2
100010d8:	01400304 	movi	r5,12
100010dc:	0002b740 	call	10002b74 <__modsi3>
100010e0:	1009883a 	mov	r4,r2
100010e4:	0003dfc0 	call	10003dfc <__floatsidf>
100010e8:	1009883a 	mov	r4,r2
100010ec:	180b883a 	mov	r5,r3
100010f0:	e13ff515 	stw	r4,-44(fp)
100010f4:	e17ff615 	stw	r5,-40(fp)
100010f8:	00000e06 	br	10001134 <spawningEngine+0x31c>
			}
			else if (randomX > 400)
100010fc:	e0bffc17 	ldw	r2,-16(fp)
10001100:	10806470 	cmpltui	r2,r2,401
10001104:	10000b1e 	bne	r2,zero,10001134 <spawningEngine+0x31c>
			{
				randomSpeedX = (rand() % 12) - 12;
10001108:	000407c0 	call	1000407c <rand>
1000110c:	1009883a 	mov	r4,r2
10001110:	01400304 	movi	r5,12
10001114:	0002b740 	call	10002b74 <__modsi3>
10001118:	10bffd04 	addi	r2,r2,-12
1000111c:	1009883a 	mov	r4,r2
10001120:	0003dfc0 	call	10003dfc <__floatsidf>
10001124:	1009883a 	mov	r4,r2
10001128:	180b883a 	mov	r5,r3
1000112c:	e13ff515 	stw	r4,-44(fp)
10001130:	e17ff615 	stw	r5,-40(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10001134:	e0fffc17 	ldw	r3,-16(fp)
10001138:	00840074 	movhi	r2,4097
1000113c:	1092c204 	addi	r2,r2,19208
10001140:	e13ffb17 	ldw	r4,-20(fp)
10001144:	2008917a 	slli	r4,r4,5
10001148:	1105883a 	add	r2,r2,r4
1000114c:	10c00015 	stw	r3,0(r2)
			veggieObject[i].yPosition = 0;
10001150:	00840074 	movhi	r2,4097
10001154:	1092c204 	addi	r2,r2,19208
10001158:	e0fffb17 	ldw	r3,-20(fp)
1000115c:	1806917a 	slli	r3,r3,5
10001160:	10c5883a 	add	r2,r2,r3
10001164:	10800104 	addi	r2,r2,4
10001168:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
1000116c:	00840074 	movhi	r2,4097
10001170:	1092c204 	addi	r2,r2,19208
10001174:	e0fffb17 	ldw	r3,-20(fp)
10001178:	1806917a 	slli	r3,r3,5
1000117c:	10c5883a 	add	r2,r2,r3
10001180:	10800404 	addi	r2,r2,16
10001184:	e0fff517 	ldw	r3,-44(fp)
10001188:	10c00015 	stw	r3,0(r2)
1000118c:	e0fff617 	ldw	r3,-40(fp)
10001190:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10001194:	00840074 	movhi	r2,4097
10001198:	1092c204 	addi	r2,r2,19208
1000119c:	e0fffb17 	ldw	r3,-20(fp)
100011a0:	1806917a 	slli	r3,r3,5
100011a4:	10c5883a 	add	r2,r2,r3
100011a8:	10800604 	addi	r2,r2,24
100011ac:	e0fffd17 	ldw	r3,-12(fp)
100011b0:	10c00015 	stw	r3,0(r2)
100011b4:	e0fffe17 	ldw	r3,-8(fp)
100011b8:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
100011bc:	00000706 	br	100011dc <spawningEngine+0x3c4>

			return; // our evillness is done!!!
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
100011c0:	e0bff417 	ldw	r2,-48(fp)
100011c4:	10800044 	addi	r2,r2,1
100011c8:	e0bff415 	stw	r2,-48(fp)
100011cc:	e0bff417 	ldw	r2,-48(fp)
100011d0:	10800250 	cmplti	r2,r2,9
100011d4:	103f7b1e 	bne	r2,zero,10000fc4 <__alt_data_end+0xf8000fc4>
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
		}
	}
	return;
100011d8:	0001883a 	nop
}
100011dc:	e037883a 	mov	sp,fp
100011e0:	dfc00117 	ldw	ra,4(sp)
100011e4:	df000017 	ldw	fp,0(sp)
100011e8:	dec00204 	addi	sp,sp,8
100011ec:	f800283a 	ret

100011f0 <slicingEngine>:

void slicingEngine()
{
100011f0:	defffb04 	addi	sp,sp,-20
100011f4:	dfc00415 	stw	ra,16(sp)
100011f8:	df000315 	stw	fp,12(sp)
100011fc:	df000304 	addi	fp,sp,12
	xCursor = 320;
10001200:	00805004 	movi	r2,320
10001204:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = 240;
10001208:	00803c04 	movi	r2,240
1000120c:	d0a6cd15 	stw	r2,-25804(gp)
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
10001210:	00840074 	movhi	r2,4097
10001214:	1092c204 	addi	r2,r2,19208
10001218:	10800317 	ldw	r2,12(r2)
1000121c:	1000591e 	bne	r2,zero,10001384 <slicingEngine+0x194>
10001220:	d0a6d017 	ldw	r2,-25792(gp)
10001224:	10005726 	beq	r2,zero,10001384 <slicingEngine+0x194>
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
10001228:	d0a6ce17 	ldw	r2,-25800(gp)
1000122c:	108007f0 	cmpltui	r2,r2,31
10001230:	1000191e 	bne	r2,zero,10001298 <slicingEngine+0xa8>
10001234:	d0a6ce17 	ldw	r2,-25800(gp)
10001238:	10801928 	cmpgeui	r2,r2,100
1000123c:	1000161e 	bne	r2,zero,10001298 <slicingEngine+0xa8>
10001240:	d0a6cd17 	ldw	r2,-25804(gp)
10001244:	108007f0 	cmpltui	r2,r2,31
10001248:	1000131e 	bne	r2,zero,10001298 <slicingEngine+0xa8>
1000124c:	d0a6cd17 	ldw	r2,-25804(gp)
10001250:	10801928 	cmpgeui	r2,r2,100
10001254:	1000101e 	bne	r2,zero,10001298 <slicingEngine+0xa8>
		{
			veggieObject[0].objectState = 1;	// easy mode start
10001258:	00840074 	movhi	r2,4097
1000125c:	1092c204 	addi	r2,r2,19208
10001260:	00c00044 	movi	r3,1
10001264:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 0;		// where we're goin, we don't need lives
10001268:	00840074 	movhi	r2,4097
1000126c:	1092c204 	addi	r2,r2,19208
10001270:	10000215 	stw	zero,8(r2)
			physixOn = 1;
10001274:	00800044 	movi	r2,1
10001278:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[1].objectState = 2;	// cut the object!
1000127c:	00840074 	movhi	r2,4097
10001280:	1092c204 	addi	r2,r2,19208
10001284:	00c00084 	movi	r3,2
10001288:	10c00b15 	stw	r3,44(r2)
			roundStart = elapsedTime;
1000128c:	d0a6cb17 	ldw	r2,-25812(gp)
10001290:	d0a6d815 	stw	r2,-25760(gp)
10001294:	00003a06 	br	10001380 <slicingEngine+0x190>
		}
		else if((xCursor>180)&&(xCursor<250)&&(yCursor>220)&&(yCursor<310))
10001298:	d0a6ce17 	ldw	r2,-25800(gp)
1000129c:	10802d70 	cmpltui	r2,r2,181
100012a0:	10001a1e 	bne	r2,zero,1000130c <slicingEngine+0x11c>
100012a4:	d0a6ce17 	ldw	r2,-25800(gp)
100012a8:	10803ea8 	cmpgeui	r2,r2,250
100012ac:	1000171e 	bne	r2,zero,1000130c <slicingEngine+0x11c>
100012b0:	d0a6cd17 	ldw	r2,-25804(gp)
100012b4:	10803770 	cmpltui	r2,r2,221
100012b8:	1000141e 	bne	r2,zero,1000130c <slicingEngine+0x11c>
100012bc:	d0a6cd17 	ldw	r2,-25804(gp)
100012c0:	10804da8 	cmpgeui	r2,r2,310
100012c4:	1000111e 	bne	r2,zero,1000130c <slicingEngine+0x11c>
		{
			veggieObject[0].objectState = 2;	// medium mode start
100012c8:	00840074 	movhi	r2,4097
100012cc:	1092c204 	addi	r2,r2,19208
100012d0:	00c00084 	movi	r3,2
100012d4:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 3;		// lots of lives for u!
100012d8:	00840074 	movhi	r2,4097
100012dc:	1092c204 	addi	r2,r2,19208
100012e0:	00c000c4 	movi	r3,3
100012e4:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
100012e8:	00800044 	movi	r2,1
100012ec:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[2].objectState = 2;	// cut the object!
100012f0:	00840074 	movhi	r2,4097
100012f4:	1092c204 	addi	r2,r2,19208
100012f8:	00c00084 	movi	r3,2
100012fc:	10c01315 	stw	r3,76(r2)
			roundStart = elapsedTime;
10001300:	d0a6cb17 	ldw	r2,-25812(gp)
10001304:	d0a6d815 	stw	r2,-25760(gp)
10001308:	00001d06 	br	10001380 <slicingEngine+0x190>
		}
		else if((xCursor>450)&&(xCursor<520)&&(yCursor>120)&&(yCursor<210))
1000130c:	d0a6ce17 	ldw	r2,-25800(gp)
10001310:	108070f0 	cmpltui	r2,r2,451
10001314:	10001a1e 	bne	r2,zero,10001380 <slicingEngine+0x190>
10001318:	d0a6ce17 	ldw	r2,-25800(gp)
1000131c:	10808228 	cmpgeui	r2,r2,520
10001320:	1000171e 	bne	r2,zero,10001380 <slicingEngine+0x190>
10001324:	d0a6cd17 	ldw	r2,-25804(gp)
10001328:	10801e70 	cmpltui	r2,r2,121
1000132c:	1000141e 	bne	r2,zero,10001380 <slicingEngine+0x190>
10001330:	d0a6cd17 	ldw	r2,-25804(gp)
10001334:	108034a8 	cmpgeui	r2,r2,210
10001338:	1000111e 	bne	r2,zero,10001380 <slicingEngine+0x190>
		{
			veggieObject[0].objectState = 3;	// hard mode start
1000133c:	00840074 	movhi	r2,4097
10001340:	1092c204 	addi	r2,r2,19208
10001344:	00c000c4 	movi	r3,3
10001348:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 1;		// ..good luck...you'll need it
1000134c:	00840074 	movhi	r2,4097
10001350:	1092c204 	addi	r2,r2,19208
10001354:	00c00044 	movi	r3,1
10001358:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
1000135c:	00800044 	movi	r2,1
10001360:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[3].objectState = 2;	// cut the object!
10001364:	00840074 	movhi	r2,4097
10001368:	1092c204 	addi	r2,r2,19208
1000136c:	00c00084 	movi	r3,2
10001370:	10c01b15 	stw	r3,108(r2)
			roundStart = elapsedTime;
10001374:	d0a6cb17 	ldw	r2,-25812(gp)
10001378:	d0a6d815 	stw	r2,-25760(gp)
	yCursor = 240;
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
1000137c:	00009906 	br	100015e4 <slicingEngine+0x3f4>
10001380:	00009806 	br	100015e4 <slicingEngine+0x3f4>
			physixOn = 1;
			veggieObject[3].objectState = 2;	// cut the object!
			roundStart = elapsedTime;
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
10001384:	00840074 	movhi	r2,4097
10001388:	1092c204 	addi	r2,r2,19208
1000138c:	10800317 	ldw	r2,12(r2)
10001390:	10800120 	cmpeqi	r2,r2,4
10001394:	1000051e 	bne	r2,zero,100013ac <slicingEngine+0x1bc>
10001398:	00840074 	movhi	r2,4097
1000139c:	1092c204 	addi	r2,r2,19208
100013a0:	10800317 	ldw	r2,12(r2)
100013a4:	10800158 	cmpnei	r2,r2,5
100013a8:	1000181e 	bne	r2,zero,1000140c <slicingEngine+0x21c>
100013ac:	d0a6d017 	ldw	r2,-25792(gp)
100013b0:	10001626 	beq	r2,zero,1000140c <slicingEngine+0x21c>
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
100013b4:	d0a6ce17 	ldw	r2,-25800(gp)
100013b8:	108039f0 	cmpltui	r2,r2,231
100013bc:	1000121e 	bne	r2,zero,10001408 <slicingEngine+0x218>
100013c0:	d0a6ce17 	ldw	r2,-25800(gp)
100013c4:	10804b28 	cmpgeui	r2,r2,300
100013c8:	10000f1e 	bne	r2,zero,10001408 <slicingEngine+0x218>
100013cc:	d0a6cd17 	ldw	r2,-25804(gp)
100013d0:	10801470 	cmpltui	r2,r2,81
100013d4:	10000c1e 	bne	r2,zero,10001408 <slicingEngine+0x218>
100013d8:	d0a6cd17 	ldw	r2,-25804(gp)
100013dc:	108025a8 	cmpgeui	r2,r2,150
100013e0:	1000091e 	bne	r2,zero,10001408 <slicingEngine+0x218>
		{
			veggieObject[0].objectState = 0;	// return to main menu
100013e4:	00840074 	movhi	r2,4097
100013e8:	1092c204 	addi	r2,r2,19208
100013ec:	10000315 	stw	zero,12(r2)
			veggieObject[4].objectState = 2;	// cut the object!
100013f0:	00840074 	movhi	r2,4097
100013f4:	1092c204 	addi	r2,r2,19208
100013f8:	00c00084 	movi	r3,2
100013fc:	10c02315 	stw	r3,140(r2)

			physixOn = 0;
10001400:	d026d715 	stw	zero,-25764(gp)
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
10001404:	00007706 	br	100015e4 <slicingEngine+0x3f4>
10001408:	00007606 	br	100015e4 <slicingEngine+0x3f4>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
1000140c:	00800044 	movi	r2,1
10001410:	e0bffd15 	stw	r2,-12(fp)
10001414:	00007006 	br	100015d8 <slicingEngine+0x3e8>
		{
			// only if it is in perfect state
			if(veggieObject[i].objectState == 1)
10001418:	00840074 	movhi	r2,4097
1000141c:	1092c204 	addi	r2,r2,19208
10001420:	e0fffd17 	ldw	r3,-12(fp)
10001424:	1806917a 	slli	r3,r3,5
10001428:	10c5883a 	add	r2,r2,r3
1000142c:	10800304 	addi	r2,r2,12
10001430:	10800017 	ldw	r2,0(r2)
10001434:	10800058 	cmpnei	r2,r2,1
10001438:	1000641e 	bne	r2,zero,100015cc <slicingEngine+0x3dc>
			{
				// let's grab the vegetable coordinates
				int veggieX = veggieObject[i].xPosition;
1000143c:	00840074 	movhi	r2,4097
10001440:	1092c204 	addi	r2,r2,19208
10001444:	e0fffd17 	ldw	r3,-12(fp)
10001448:	1806917a 	slli	r3,r3,5
1000144c:	10c5883a 	add	r2,r2,r3
10001450:	10800017 	ldw	r2,0(r2)
10001454:	e0bffe15 	stw	r2,-8(fp)
				int veggieY = veggieObject[i].yPosition;
10001458:	00840074 	movhi	r2,4097
1000145c:	1092c204 	addi	r2,r2,19208
10001460:	e0fffd17 	ldw	r3,-12(fp)
10001464:	1806917a 	slli	r3,r3,5
10001468:	10c5883a 	add	r2,r2,r3
1000146c:	10800104 	addi	r2,r2,4
10001470:	10800017 	ldw	r2,0(r2)
10001474:	e0bfff15 	stw	r2,-4(fp)
					collideX = 64;
					collideY = 64;
				}
*/
				// now let's check collision
				if(((veggieX)<xCursor)&&((veggieX+75)>xCursor)&&((veggieY-60)<yCursor)&&((veggieY+15)>yCursor))
10001478:	e0fffe17 	ldw	r3,-8(fp)
1000147c:	d0a6ce17 	ldw	r2,-25800(gp)
10001480:	1880522e 	bgeu	r3,r2,100015cc <slicingEngine+0x3dc>
10001484:	e0bffe17 	ldw	r2,-8(fp)
10001488:	108012c4 	addi	r2,r2,75
1000148c:	1007883a 	mov	r3,r2
10001490:	d0a6ce17 	ldw	r2,-25800(gp)
10001494:	10c04d2e 	bgeu	r2,r3,100015cc <slicingEngine+0x3dc>
10001498:	e0bfff17 	ldw	r2,-4(fp)
1000149c:	10bff104 	addi	r2,r2,-60
100014a0:	1007883a 	mov	r3,r2
100014a4:	d0a6cd17 	ldw	r2,-25804(gp)
100014a8:	1880482e 	bgeu	r3,r2,100015cc <slicingEngine+0x3dc>
100014ac:	e0bfff17 	ldw	r2,-4(fp)
100014b0:	108003c4 	addi	r2,r2,15
100014b4:	1007883a 	mov	r3,r2
100014b8:	d0a6cd17 	ldw	r2,-25804(gp)
100014bc:	10c0432e 	bgeu	r2,r3,100015cc <slicingEngine+0x3dc>
				{
					// this means we are in the 'hitbox'!! kill the fruit!
					veggieObject[i].objectState = 2;
100014c0:	00840074 	movhi	r2,4097
100014c4:	1092c204 	addi	r2,r2,19208
100014c8:	e0fffd17 	ldw	r3,-12(fp)
100014cc:	1806917a 	slli	r3,r3,5
100014d0:	10c5883a 	add	r2,r2,r3
100014d4:	10800304 	addi	r2,r2,12
100014d8:	00c00084 	movi	r3,2
100014dc:	10c00015 	stw	r3,0(r2)

					if(i<9)
100014e0:	e0bffd17 	ldw	r2,-12(fp)
100014e4:	10800248 	cmpgei	r2,r2,9
100014e8:	10001b1e 	bne	r2,zero,10001558 <slicingEngine+0x368>
					{
						comboFruit = comboFruit + 1;
100014ec:	d0a6d917 	ldw	r2,-25756(gp)
100014f0:	10800044 	addi	r2,r2,1
100014f4:	d0a6d915 	stw	r2,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition + 2*comboFruit;
100014f8:	00840074 	movhi	r2,4097
100014fc:	1092c204 	addi	r2,r2,19208
10001500:	10c00017 	ldw	r3,0(r2)
10001504:	d0a6d917 	ldw	r2,-25756(gp)
10001508:	1085883a 	add	r2,r2,r2
1000150c:	1887883a 	add	r3,r3,r2
10001510:	00840074 	movhi	r2,4097
10001514:	1092c204 	addi	r2,r2,19208
10001518:	10c00015 	stw	r3,0(r2)
						printf(" increased score to %d! \n", veggieObject[0].xPosition);
1000151c:	00840074 	movhi	r2,4097
10001520:	1092c204 	addi	r2,r2,19208
10001524:	10800017 	ldw	r2,0(r2)
10001528:	01040074 	movhi	r4,4097
1000152c:	21044604 	addi	r4,r4,4376
10001530:	100b883a 	mov	r5,r2
10001534:	0003f5c0 	call	10003f5c <printf>
						printf("lives still at %d! \n", veggieObject[0].objectType);
10001538:	00840074 	movhi	r2,4097
1000153c:	1092c204 	addi	r2,r2,19208
10001540:	10800217 	ldw	r2,8(r2)
10001544:	01040074 	movhi	r4,4097
10001548:	21044d04 	addi	r4,r4,4404
1000154c:	100b883a 	mov	r5,r2
10001550:	0003f5c0 	call	10003f5c <printf>
10001554:	00001d06 	br	100015cc <slicingEngine+0x3dc>
					}
					else	// ITS A BOMB!!! OMGOGMGOMGG!!
					{
						veggieObject[0].objectType = veggieObject[0].objectType-1;
10001558:	00840074 	movhi	r2,4097
1000155c:	1092c204 	addi	r2,r2,19208
10001560:	10800217 	ldw	r2,8(r2)
10001564:	10ffffc4 	addi	r3,r2,-1
10001568:	00840074 	movhi	r2,4097
1000156c:	1092c204 	addi	r2,r2,19208
10001570:	10c00215 	stw	r3,8(r2)
						comboFruit = 0;
10001574:	d026d915 	stw	zero,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition - 15;
10001578:	00840074 	movhi	r2,4097
1000157c:	1092c204 	addi	r2,r2,19208
10001580:	10800017 	ldw	r2,0(r2)
10001584:	10fffc44 	addi	r3,r2,-15
10001588:	00840074 	movhi	r2,4097
1000158c:	1092c204 	addi	r2,r2,19208
10001590:	10c00015 	stw	r3,0(r2)
						printf("hit a bomb! scored decreased to %d! \n", veggieObject[0].xPosition);
10001594:	00840074 	movhi	r2,4097
10001598:	1092c204 	addi	r2,r2,19208
1000159c:	10800017 	ldw	r2,0(r2)
100015a0:	01040074 	movhi	r4,4097
100015a4:	21045304 	addi	r4,r4,4428
100015a8:	100b883a 	mov	r5,r2
100015ac:	0003f5c0 	call	10003f5c <printf>
						printf("also, lives decreased to %d! \n", veggieObject[0].objectType);
100015b0:	00840074 	movhi	r2,4097
100015b4:	1092c204 	addi	r2,r2,19208
100015b8:	10800217 	ldw	r2,8(r2)
100015bc:	01040074 	movhi	r4,4097
100015c0:	21045d04 	addi	r4,r4,4468
100015c4:	100b883a 	mov	r5,r2
100015c8:	0003f5c0 	call	10003f5c <printf>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
100015cc:	e0bffd17 	ldw	r2,-12(fp)
100015d0:	10800044 	addi	r2,r2,1
100015d4:	e0bffd15 	stw	r2,-12(fp)
100015d8:	e0bffd17 	ldw	r2,-12(fp)
100015dc:	10800290 	cmplti	r2,r2,10
100015e0:	103f8d1e 	bne	r2,zero,10001418 <__alt_data_end+0xf8001418>
					}
				}
			}
		}
	}
	return;
100015e4:	0001883a 	nop
}
100015e8:	e037883a 	mov	sp,fp
100015ec:	dfc00117 	ldw	ra,4(sp)
100015f0:	df000017 	ldw	fp,0(sp)
100015f4:	dec00204 	addi	sp,sp,8
100015f8:	f800283a 	ret

100015fc <disintegrateEngine>:

void disintegrateEngine()
{
100015fc:	defffe04 	addi	sp,sp,-8
10001600:	df000115 	stw	fp,4(sp)
10001604:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
10001608:	00800044 	movi	r2,1
1000160c:	e0bfff15 	stw	r2,-4(fp)
10001610:	00006a06 	br	100017bc <disintegrateEngine+0x1c0>
	{
		if(veggieObject[i].objectState == 2) // just been cut
10001614:	00840074 	movhi	r2,4097
10001618:	1092c204 	addi	r2,r2,19208
1000161c:	e0ffff17 	ldw	r3,-4(fp)
10001620:	1806917a 	slli	r3,r3,5
10001624:	10c5883a 	add	r2,r2,r3
10001628:	10800304 	addi	r2,r2,12
1000162c:	10800017 	ldw	r2,0(r2)
10001630:	10800098 	cmpnei	r2,r2,2
10001634:	1000091e 	bne	r2,zero,1000165c <disintegrateEngine+0x60>
		{
			veggieObject[i].objectState = 3;
10001638:	00840074 	movhi	r2,4097
1000163c:	1092c204 	addi	r2,r2,19208
10001640:	e0ffff17 	ldw	r3,-4(fp)
10001644:	1806917a 	slli	r3,r3,5
10001648:	10c5883a 	add	r2,r2,r3
1000164c:	10800304 	addi	r2,r2,12
10001650:	00c000c4 	movi	r3,3
10001654:	10c00015 	stw	r3,0(r2)
10001658:	00005506 	br	100017b0 <disintegrateEngine+0x1b4>
		}
		else if(((veggieObject[i].objectState == 3) && (i<9)) || (veggieObject[i].objectState == 4))// almost dedded
1000165c:	00840074 	movhi	r2,4097
10001660:	1092c204 	addi	r2,r2,19208
10001664:	e0ffff17 	ldw	r3,-4(fp)
10001668:	1806917a 	slli	r3,r3,5
1000166c:	10c5883a 	add	r2,r2,r3
10001670:	10800304 	addi	r2,r2,12
10001674:	10800017 	ldw	r2,0(r2)
10001678:	108000d8 	cmpnei	r2,r2,3
1000167c:	1000031e 	bne	r2,zero,1000168c <disintegrateEngine+0x90>
10001680:	e0bfff17 	ldw	r2,-4(fp)
10001684:	10800250 	cmplti	r2,r2,9
10001688:	1000091e 	bne	r2,zero,100016b0 <disintegrateEngine+0xb4>
1000168c:	00840074 	movhi	r2,4097
10001690:	1092c204 	addi	r2,r2,19208
10001694:	e0ffff17 	ldw	r3,-4(fp)
10001698:	1806917a 	slli	r3,r3,5
1000169c:	10c5883a 	add	r2,r2,r3
100016a0:	10800304 	addi	r2,r2,12
100016a4:	10800017 	ldw	r2,0(r2)
100016a8:	10800118 	cmpnei	r2,r2,4
100016ac:	10002c1e 	bne	r2,zero,10001760 <disintegrateEngine+0x164>
		{
			veggieObject[i].xPosition = 0;		// gone!
100016b0:	00840074 	movhi	r2,4097
100016b4:	1092c204 	addi	r2,r2,19208
100016b8:	e0ffff17 	ldw	r3,-4(fp)
100016bc:	1806917a 	slli	r3,r3,5
100016c0:	10c5883a 	add	r2,r2,r3
100016c4:	10000015 	stw	zero,0(r2)
			veggieObject[i].yPosition = 0;
100016c8:	00840074 	movhi	r2,4097
100016cc:	1092c204 	addi	r2,r2,19208
100016d0:	e0ffff17 	ldw	r3,-4(fp)
100016d4:	1806917a 	slli	r3,r3,5
100016d8:	10c5883a 	add	r2,r2,r3
100016dc:	10800104 	addi	r2,r2,4
100016e0:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = 0;
100016e4:	00840074 	movhi	r2,4097
100016e8:	1092c204 	addi	r2,r2,19208
100016ec:	e0ffff17 	ldw	r3,-4(fp)
100016f0:	1806917a 	slli	r3,r3,5
100016f4:	10c5883a 	add	r2,r2,r3
100016f8:	10800204 	addi	r2,r2,8
100016fc:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectState = 0;
10001700:	00840074 	movhi	r2,4097
10001704:	1092c204 	addi	r2,r2,19208
10001708:	e0ffff17 	ldw	r3,-4(fp)
1000170c:	1806917a 	slli	r3,r3,5
10001710:	10c5883a 	add	r2,r2,r3
10001714:	10800304 	addi	r2,r2,12
10001718:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = 0;
1000171c:	00840074 	movhi	r2,4097
10001720:	1092c204 	addi	r2,r2,19208
10001724:	e0ffff17 	ldw	r3,-4(fp)
10001728:	1806917a 	slli	r3,r3,5
1000172c:	10c5883a 	add	r2,r2,r3
10001730:	10800404 	addi	r2,r2,16
10001734:	10000015 	stw	zero,0(r2)
10001738:	10000115 	stw	zero,4(r2)
			veggieObject[i].yVelocity = 0;
1000173c:	00840074 	movhi	r2,4097
10001740:	1092c204 	addi	r2,r2,19208
10001744:	e0ffff17 	ldw	r3,-4(fp)
10001748:	1806917a 	slli	r3,r3,5
1000174c:	10c5883a 	add	r2,r2,r3
10001750:	10800604 	addi	r2,r2,24
10001754:	10000015 	stw	zero,0(r2)
10001758:	10000115 	stw	zero,4(r2)
1000175c:	00001406 	br	100017b0 <disintegrateEngine+0x1b4>
		}
		else if((veggieObject[i].objectState == 3) && (i == 9))
10001760:	00840074 	movhi	r2,4097
10001764:	1092c204 	addi	r2,r2,19208
10001768:	e0ffff17 	ldw	r3,-4(fp)
1000176c:	1806917a 	slli	r3,r3,5
10001770:	10c5883a 	add	r2,r2,r3
10001774:	10800304 	addi	r2,r2,12
10001778:	10800017 	ldw	r2,0(r2)
1000177c:	108000d8 	cmpnei	r2,r2,3
10001780:	10000b1e 	bne	r2,zero,100017b0 <disintegrateEngine+0x1b4>
10001784:	e0bfff17 	ldw	r2,-4(fp)
10001788:	10800258 	cmpnei	r2,r2,9
1000178c:	1000081e 	bne	r2,zero,100017b0 <disintegrateEngine+0x1b4>
		{
			veggieObject[i].objectState = 4;
10001790:	00840074 	movhi	r2,4097
10001794:	1092c204 	addi	r2,r2,19208
10001798:	e0ffff17 	ldw	r3,-4(fp)
1000179c:	1806917a 	slli	r3,r3,5
100017a0:	10c5883a 	add	r2,r2,r3
100017a4:	10800304 	addi	r2,r2,12
100017a8:	00c00104 	movi	r3,4
100017ac:	10c00015 	stw	r3,0(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
100017b0:	e0bfff17 	ldw	r2,-4(fp)
100017b4:	10800044 	addi	r2,r2,1
100017b8:	e0bfff15 	stw	r2,-4(fp)
100017bc:	e0bfff17 	ldw	r2,-4(fp)
100017c0:	10800290 	cmplti	r2,r2,10
100017c4:	103f931e 	bne	r2,zero,10001614 <__alt_data_end+0xf8001614>
		else if((veggieObject[i].objectState == 3) && (i == 9))
		{
			veggieObject[i].objectState = 4;
		}
	}
}
100017c8:	e037883a 	mov	sp,fp
100017cc:	df000017 	ldw	fp,0(sp)
100017d0:	dec00104 	addi	sp,sp,4
100017d4:	f800283a 	ret

100017d8 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
100017d8:	deffef04 	addi	sp,sp,-68
100017dc:	dfc01015 	stw	ra,64(sp)
100017e0:	df000f15 	stw	fp,60(sp)
100017e4:	df000f04 	addi	fp,sp,60
	// start putting in our xcoords
	unsigned int FPGAmessage[10];
	int i;
	for(i=0; i<10; i++)
100017e8:	e03ff515 	stw	zero,-44(fp)
100017ec:	00001106 	br	10001834 <FPGAcommunicator+0x5c>
	{
		FPGAmessage[i] = veggieObject[i].xPosition;
100017f0:	00840074 	movhi	r2,4097
100017f4:	1092c204 	addi	r2,r2,19208
100017f8:	e0fff517 	ldw	r3,-44(fp)
100017fc:	1806917a 	slli	r3,r3,5
10001800:	10c5883a 	add	r2,r2,r3
10001804:	10800017 	ldw	r2,0(r2)
10001808:	1007883a 	mov	r3,r2
1000180c:	e0bff517 	ldw	r2,-44(fp)
10001810:	1085883a 	add	r2,r2,r2
10001814:	1085883a 	add	r2,r2,r2
10001818:	e13ff504 	addi	r4,fp,-44
1000181c:	2085883a 	add	r2,r4,r2
10001820:	10800104 	addi	r2,r2,4
10001824:	10c00015 	stw	r3,0(r2)
void FPGAcommunicator()
{
	// start putting in our xcoords
	unsigned int FPGAmessage[10];
	int i;
	for(i=0; i<10; i++)
10001828:	e0bff517 	ldw	r2,-44(fp)
1000182c:	10800044 	addi	r2,r2,1
10001830:	e0bff515 	stw	r2,-44(fp)
10001834:	e0bff517 	ldw	r2,-44(fp)
10001838:	10800290 	cmplti	r2,r2,10
1000183c:	103fec1e 	bne	r2,zero,100017f0 <__alt_data_end+0xf80017f0>
	{
		FPGAmessage[i] = veggieObject[i].xPosition;
	}

	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10001840:	00801c04 	movi	r2,112
10001844:	00c00044 	movi	r3,1
10001848:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
1000184c:	00804004 	movi	r2,256
10001850:	e0fff617 	ldw	r3,-40(fp)
10001854:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001858:	00803c04 	movi	r2,240
1000185c:	e0fff717 	ldw	r3,-36(fp)
10001860:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001864:	00803804 	movi	r2,224
10001868:	e0fff817 	ldw	r3,-32(fp)
1000186c:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001870:	00803404 	movi	r2,208
10001874:	e0fff917 	ldw	r3,-28(fp)
10001878:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
1000187c:	00803004 	movi	r2,192
10001880:	e0fffa17 	ldw	r3,-24(fp)
10001884:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001888:	00802c04 	movi	r2,176
1000188c:	e0fffb17 	ldw	r3,-20(fp)
10001890:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001894:	00802804 	movi	r2,160
10001898:	e0fffc17 	ldw	r3,-16(fp)
1000189c:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
100018a0:	00801804 	movi	r2,96
100018a4:	e0fffd17 	ldw	r3,-12(fp)
100018a8:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
100018ac:	00802404 	movi	r2,144
100018b0:	e0fffe17 	ldw	r3,-8(fp)
100018b4:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
100018b8:	00802004 	movi	r2,128
100018bc:	e0ffff17 	ldw	r3,-4(fp)
100018c0:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response

	for(i=0; i<10; i++)
100018c4:	e03ff515 	stw	zero,-44(fp)
100018c8:	00001206 	br	10001914 <FPGAcommunicator+0x13c>
	{
		FPGAmessage[i] = veggieObject[i].yPosition;
100018cc:	00840074 	movhi	r2,4097
100018d0:	1092c204 	addi	r2,r2,19208
100018d4:	e0fff517 	ldw	r3,-44(fp)
100018d8:	1806917a 	slli	r3,r3,5
100018dc:	10c5883a 	add	r2,r2,r3
100018e0:	10800104 	addi	r2,r2,4
100018e4:	10800017 	ldw	r2,0(r2)
100018e8:	1007883a 	mov	r3,r2
100018ec:	e0bff517 	ldw	r2,-44(fp)
100018f0:	1085883a 	add	r2,r2,r2
100018f4:	1085883a 	add	r2,r2,r2
100018f8:	e13ff504 	addi	r4,fp,-44
100018fc:	2085883a 	add	r2,r4,r2
10001900:	10800104 	addi	r2,r2,4
10001904:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response

	for(i=0; i<10; i++)
10001908:	e0bff517 	ldw	r2,-44(fp)
1000190c:	10800044 	addi	r2,r2,1
10001910:	e0bff515 	stw	r2,-44(fp)
10001914:	e0bff517 	ldw	r2,-44(fp)
10001918:	10800290 	cmplti	r2,r2,10
1000191c:	103feb1e 	bne	r2,zero,100018cc <__alt_data_end+0xf80018cc>
	{
		FPGAmessage[i] = veggieObject[i].yPosition;
	}
	while(*to_sw_sig != 1);
10001920:	0001883a 	nop
10001924:	00801404 	movi	r2,80
10001928:	10800003 	ldbu	r2,0(r2)
1000192c:	10803fcc 	andi	r2,r2,255
10001930:	1080201c 	xori	r2,r2,128
10001934:	10bfe004 	addi	r2,r2,-128
10001938:	10800058 	cmpnei	r2,r2,1
1000193c:	103ff91e 	bne	r2,zero,10001924 <__alt_data_end+0xf8001924>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
10001940:	00801c04 	movi	r2,112
10001944:	00c00084 	movi	r3,2
10001948:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
1000194c:	00804004 	movi	r2,256
10001950:	e0fff617 	ldw	r3,-40(fp)
10001954:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001958:	00803c04 	movi	r2,240
1000195c:	e0fff717 	ldw	r3,-36(fp)
10001960:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001964:	00803804 	movi	r2,224
10001968:	e0fff817 	ldw	r3,-32(fp)
1000196c:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001970:	00803404 	movi	r2,208
10001974:	e0fff917 	ldw	r3,-28(fp)
10001978:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
1000197c:	00803004 	movi	r2,192
10001980:	e0fffa17 	ldw	r3,-24(fp)
10001984:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001988:	00802c04 	movi	r2,176
1000198c:	e0fffb17 	ldw	r3,-20(fp)
10001990:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001994:	00802804 	movi	r2,160
10001998:	e0fffc17 	ldw	r3,-16(fp)
1000199c:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
100019a0:	00801804 	movi	r2,96
100019a4:	e0fffd17 	ldw	r3,-12(fp)
100019a8:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
100019ac:	00802404 	movi	r2,144
100019b0:	e0fffe17 	ldw	r3,-8(fp)
100019b4:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
100019b8:	00802004 	movi	r2,128
100019bc:	e0ffff17 	ldw	r3,-4(fp)
100019c0:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].yPosition;
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	FPGAmessage[0] = messagePackager(veggieObject[0]);
100019c4:	00840074 	movhi	r2,4097
100019c8:	1092c204 	addi	r2,r2,19208
100019cc:	10c00417 	ldw	r3,16(r2)
100019d0:	d8c00015 	stw	r3,0(sp)
100019d4:	10c00517 	ldw	r3,20(r2)
100019d8:	d8c00115 	stw	r3,4(sp)
100019dc:	10c00617 	ldw	r3,24(r2)
100019e0:	d8c00215 	stw	r3,8(sp)
100019e4:	10c00717 	ldw	r3,28(r2)
100019e8:	d8c00315 	stw	r3,12(sp)
100019ec:	11000017 	ldw	r4,0(r2)
100019f0:	11400117 	ldw	r5,4(r2)
100019f4:	11800217 	ldw	r6,8(r2)
100019f8:	11c00317 	ldw	r7,12(r2)
100019fc:	0001b480 	call	10001b48 <messagePackager>
10001a00:	e0bff615 	stw	r2,-40(fp)
	for(i=1; i<10; i++)
10001a04:	00800044 	movi	r2,1
10001a08:	e0bff515 	stw	r2,-44(fp)
10001a0c:	00001206 	br	10001a58 <FPGAcommunicator+0x280>
	{
		FPGAmessage[i] = veggieObject[i].objectState;
10001a10:	00840074 	movhi	r2,4097
10001a14:	1092c204 	addi	r2,r2,19208
10001a18:	e0fff517 	ldw	r3,-44(fp)
10001a1c:	1806917a 	slli	r3,r3,5
10001a20:	10c5883a 	add	r2,r2,r3
10001a24:	10800304 	addi	r2,r2,12
10001a28:	10800017 	ldw	r2,0(r2)
10001a2c:	1007883a 	mov	r3,r2
10001a30:	e0bff517 	ldw	r2,-44(fp)
10001a34:	1085883a 	add	r2,r2,r2
10001a38:	1085883a 	add	r2,r2,r2
10001a3c:	e13ff504 	addi	r4,fp,-44
10001a40:	2085883a 	add	r2,r4,r2
10001a44:	10800104 	addi	r2,r2,4
10001a48:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	FPGAmessage[0] = messagePackager(veggieObject[0]);
	for(i=1; i<10; i++)
10001a4c:	e0bff517 	ldw	r2,-44(fp)
10001a50:	10800044 	addi	r2,r2,1
10001a54:	e0bff515 	stw	r2,-44(fp)
10001a58:	e0bff517 	ldw	r2,-44(fp)
10001a5c:	10800290 	cmplti	r2,r2,10
10001a60:	103feb1e 	bne	r2,zero,10001a10 <__alt_data_end+0xf8001a10>
	{
		FPGAmessage[i] = veggieObject[i].objectState;
	}
	// wait for confirmation
	while(*to_sw_sig != 2);
10001a64:	0001883a 	nop
10001a68:	00801404 	movi	r2,80
10001a6c:	10800003 	ldbu	r2,0(r2)
10001a70:	10803fcc 	andi	r2,r2,255
10001a74:	1080201c 	xori	r2,r2,128
10001a78:	10bfe004 	addi	r2,r2,-128
10001a7c:	10800098 	cmpnei	r2,r2,2
10001a80:	103ff91e 	bne	r2,zero,10001a68 <__alt_data_end+0xf8001a68>
	// printf("fpgamessage is %lu   \n", FPGAmessage);

	*to_hw_sig = 3;		// our final sending
10001a84:	00801c04 	movi	r2,112
10001a88:	00c000c4 	movi	r3,3
10001a8c:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10001a90:	00804004 	movi	r2,256
10001a94:	e0fff617 	ldw	r3,-40(fp)
10001a98:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10001a9c:	00803c04 	movi	r2,240
10001aa0:	e0fff717 	ldw	r3,-36(fp)
10001aa4:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10001aa8:	00803804 	movi	r2,224
10001aac:	e0fff817 	ldw	r3,-32(fp)
10001ab0:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10001ab4:	00803404 	movi	r2,208
10001ab8:	e0fff917 	ldw	r3,-28(fp)
10001abc:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10001ac0:	00803004 	movi	r2,192
10001ac4:	e0fffa17 	ldw	r3,-24(fp)
10001ac8:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001acc:	00802c04 	movi	r2,176
10001ad0:	e0fffb17 	ldw	r3,-20(fp)
10001ad4:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10001ad8:	00802804 	movi	r2,160
10001adc:	e0fffc17 	ldw	r3,-16(fp)
10001ae0:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001ae4:	00801804 	movi	r2,96
10001ae8:	e0fffd17 	ldw	r3,-12(fp)
10001aec:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10001af0:	00802404 	movi	r2,144
10001af4:	e0fffe17 	ldw	r3,-8(fp)
10001af8:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001afc:	00802004 	movi	r2,128
10001b00:	e0ffff17 	ldw	r3,-4(fp)
10001b04:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = veggieObject[13].objectState;
	*to_hw_port14 = veggieObject[14].objectState;
	*to_hw_port15 = veggieObject[15].objectState;
*/
	// last confirmation
	while(*to_sw_sig != 3);
10001b08:	0001883a 	nop
10001b0c:	00801404 	movi	r2,80
10001b10:	10800003 	ldbu	r2,0(r2)
10001b14:	10803fcc 	andi	r2,r2,255
10001b18:	1080201c 	xori	r2,r2,128
10001b1c:	10bfe004 	addi	r2,r2,-128
10001b20:	108000d8 	cmpnei	r2,r2,3
10001b24:	103ff91e 	bne	r2,zero,10001b0c <__alt_data_end+0xf8001b0c>
	*to_hw_sig = 0;
10001b28:	00801c04 	movi	r2,112
10001b2c:	10000005 	stb	zero,0(r2)

	return;
10001b30:	0001883a 	nop
}
10001b34:	e037883a 	mov	sp,fp
10001b38:	dfc00117 	ldw	ra,4(sp)
10001b3c:	df000017 	ldw	fp,0(sp)
10001b40:	dec00204 	addi	sp,sp,8
10001b44:	f800283a 	ret

10001b48 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10001b48:	defff404 	addi	sp,sp,-48
10001b4c:	dfc00715 	stw	ra,28(sp)
10001b50:	df000615 	stw	fp,24(sp)
10001b54:	dc400515 	stw	r17,20(sp)
10001b58:	dc000415 	stw	r16,16(sp)
10001b5c:	df000604 	addi	fp,sp,24
10001b60:	e1000215 	stw	r4,8(fp)
10001b64:	e1400315 	stw	r5,12(fp)
10001b68:	e1800415 	stw	r6,16(fp)
10001b6c:	e1c00515 	stw	r7,20(fp)

	// make our specific variables
	unsigned long tempType, tempState;

	// grab our stuff from the struct
	tempType = specifiedObject.objectType;
10001b70:	e0800417 	ldw	r2,16(fp)
10001b74:	e0bffa15 	stw	r2,-24(fp)
	tempState = specifiedObject.objectState;
10001b78:	e0800517 	ldw	r2,20(fp)
10001b7c:	e0bffb15 	stw	r2,-20(fp)

	// and convert stuff to binary!
	tempType = convertDecimalToBinary(tempType);
10001b80:	e13ffa17 	ldw	r4,-24(fp)
10001b84:	0001d080 	call	10001d08 <convertDecimalToBinary>
10001b88:	e0bffa15 	stw	r2,-24(fp)
	tempState = convertDecimalToBinary(tempState);
10001b8c:	e13ffb17 	ldw	r4,-20(fp)
10001b90:	0001d080 	call	10001d08 <convertDecimalToBinary>
10001b94:	e0bffb15 	stw	r2,-20(fp)
//	printf("tempY: %llu   ", tempY);
//	printf("tempType: %lu   ", tempType);
//	printf("tempState: %lu   \n", tempState);

	// now we append everything together!
	tempBinary = tempState + tempType*1000;
10001b98:	e13ffa17 	ldw	r4,-24(fp)
10001b9c:	0140fa04 	movi	r5,1000
10001ba0:	0002be00 	call	10002be0 <__mulsi3>
10001ba4:	1007883a 	mov	r3,r2
10001ba8:	e0bffb17 	ldw	r2,-20(fp)
10001bac:	1885883a 	add	r2,r3,r2
10001bb0:	e0bffc15 	stw	r2,-16(fp)
//		printf("tempBinary: %lu   ", tempBinary);

	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001bb4:	e0bffc17 	ldw	r2,-16(fp)
10001bb8:	1021883a 	mov	r16,r2
10001bbc:	0023883a 	mov	r17,zero
10001bc0:	8009883a 	mov	r4,r16
10001bc4:	880b883a 	mov	r5,r17
10001bc8:	0001d700 	call	10001d70 <convertBinaryToDecimal>
10001bcc:	e0bffd15 	stw	r2,-12(fp)

	// and return it!
	return tempDecimal;
10001bd0:	e0bffd17 	ldw	r2,-12(fp)
}
10001bd4:	e6fffe04 	addi	sp,fp,-8
10001bd8:	dfc00317 	ldw	ra,12(sp)
10001bdc:	df000217 	ldw	fp,8(sp)
10001be0:	dc400117 	ldw	r17,4(sp)
10001be4:	dc000017 	ldw	r16,0(sp)
10001be8:	dec00804 	addi	sp,sp,32
10001bec:	f800283a 	ret

10001bf0 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001bf0:	defff704 	addi	sp,sp,-36
10001bf4:	dfc00815 	stw	ra,32(sp)
10001bf8:	df000715 	stw	fp,28(sp)
10001bfc:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001c00:	00804404 	movi	r2,272
10001c04:	10800003 	ldbu	r2,0(r2)
10001c08:	10803fcc 	andi	r2,r2,255
10001c0c:	1080201c 	xori	r2,r2,128
10001c10:	10bfe004 	addi	r2,r2,-128
10001c14:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001c18:	e13ff917 	ldw	r4,-28(fp)
10001c1c:	0001d080 	call	10001d08 <convertDecimalToBinary>
10001c20:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001c24:	e03ffa15 	stw	zero,-24(fp)
10001c28:	00001406 	br	10001c7c <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001c2c:	e0bff917 	ldw	r2,-28(fp)
10001c30:	1009883a 	mov	r4,r2
10001c34:	01400284 	movi	r5,10
10001c38:	0002bd80 	call	10002bd8 <__umodsi3>
10001c3c:	1007883a 	mov	r3,r2
10001c40:	e0bffa17 	ldw	r2,-24(fp)
10001c44:	1085883a 	add	r2,r2,r2
10001c48:	1085883a 	add	r2,r2,r2
10001c4c:	e13ff904 	addi	r4,fp,-28
10001c50:	2085883a 	add	r2,r4,r2
10001c54:	10800204 	addi	r2,r2,8
10001c58:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001c5c:	e0bff917 	ldw	r2,-28(fp)
10001c60:	1009883a 	mov	r4,r2
10001c64:	01400284 	movi	r5,10
10001c68:	0002bd00 	call	10002bd0 <__udivsi3>
10001c6c:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001c70:	e0bffa17 	ldw	r2,-24(fp)
10001c74:	10800044 	addi	r2,r2,1
10001c78:	e0bffa15 	stw	r2,-24(fp)
10001c7c:	e0bffa17 	ldw	r2,-24(fp)
10001c80:	10800150 	cmplti	r2,r2,5
10001c84:	103fe91e 	bne	r2,zero,10001c2c <__alt_data_end+0xf8001c2c>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001c88:	e0bffd17 	ldw	r2,-12(fp)
10001c8c:	d0a6d315 	stw	r2,-25780(gp)
	key2 = unpackaged[3];
10001c90:	e0bffe17 	ldw	r2,-8(fp)
10001c94:	d0a6d615 	stw	r2,-25768(gp)
	key3 = unpackaged[4];
10001c98:	e0bfff17 	ldw	r2,-4(fp)
10001c9c:	d0a6d415 	stw	r2,-25776(gp)
	cursorStreak = unpackaged[0];
10001ca0:	e0bffb17 	ldw	r2,-20(fp)
10001ca4:	d0a6d015 	stw	r2,-25792(gp)
	cursorClicked = unpackaged[1];
10001ca8:	e0bffc17 	ldw	r2,-16(fp)
10001cac:	d0a6cf15 	stw	r2,-25796(gp)
	xCursor = *to_sw_port3;
10001cb0:	00806004 	movi	r2,384
10001cb4:	10800017 	ldw	r2,0(r2)
10001cb8:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
10001cbc:	00805c04 	movi	r2,368
10001cc0:	10800017 	ldw	r2,0(r2)
10001cc4:	d0a6cd15 	stw	r2,-25804(gp)

	if(cursorStreak == 0)	// reset combo if cursor no longer streaking
10001cc8:	d0a6d017 	ldw	r2,-25792(gp)
10001ccc:	1000011e 	bne	r2,zero,10001cd4 <port2Unpackager+0xe4>
	{
		comboFruit = 0;
10001cd0:	d026d915 	stw	zero,-25756(gp)
	}

	if(veggieObject[0].xPosition < 0)	// also don't let score go below zero
10001cd4:	00840074 	movhi	r2,4097
10001cd8:	1092c204 	addi	r2,r2,19208
10001cdc:	10800017 	ldw	r2,0(r2)
10001ce0:	1000030e 	bge	r2,zero,10001cf0 <port2Unpackager+0x100>
	{
		veggieObject[0].xPosition = 0;
10001ce4:	00840074 	movhi	r2,4097
10001ce8:	1092c204 	addi	r2,r2,19208
10001cec:	10000015 	stw	zero,0(r2)
	}

	return;
10001cf0:	0001883a 	nop
}
10001cf4:	e037883a 	mov	sp,fp
10001cf8:	dfc00117 	ldw	ra,4(sp)
10001cfc:	df000017 	ldw	fp,0(sp)
10001d00:	dec00204 	addi	sp,sp,8
10001d04:	f800283a 	ret

10001d08 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001d08:	defffc04 	addi	sp,sp,-16
10001d0c:	dfc00315 	stw	ra,12(sp)
10001d10:	df000215 	stw	fp,8(sp)
10001d14:	dc000115 	stw	r16,4(sp)
10001d18:	df000204 	addi	fp,sp,8
10001d1c:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
10001d20:	e0bffe17 	ldw	r2,-8(fp)
10001d24:	1000021e 	bne	r2,zero,10001d30 <convertDecimalToBinary+0x28>
    {
        return 0;
10001d28:	0005883a 	mov	r2,zero
10001d2c:	00000a06 	br	10001d58 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001d30:	e0bffe17 	ldw	r2,-8(fp)
10001d34:	1400004c 	andi	r16,r2,1
10001d38:	e0bffe17 	ldw	r2,-8(fp)
10001d3c:	1004d07a 	srli	r2,r2,1
10001d40:	1009883a 	mov	r4,r2
10001d44:	0001d080 	call	10001d08 <convertDecimalToBinary>
10001d48:	1009883a 	mov	r4,r2
10001d4c:	01400284 	movi	r5,10
10001d50:	0002be00 	call	10002be0 <__mulsi3>
10001d54:	8085883a 	add	r2,r16,r2
    }
}
10001d58:	e6ffff04 	addi	sp,fp,-4
10001d5c:	dfc00217 	ldw	ra,8(sp)
10001d60:	df000117 	ldw	fp,4(sp)
10001d64:	dc000017 	ldw	r16,0(sp)
10001d68:	dec00304 	addi	sp,sp,12
10001d6c:	f800283a 	ret

10001d70 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001d70:	defffa04 	addi	sp,sp,-24
10001d74:	dfc00515 	stw	ra,20(sp)
10001d78:	df000415 	stw	fp,16(sp)
10001d7c:	df000404 	addi	fp,sp,16
10001d80:	e13ffe15 	stw	r4,-8(fp)
10001d84:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001d88:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001d8c:	e03ffd15 	stw	zero,-12(fp)
10001d90:	00002706 	br	10001e30 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
10001d94:	e0bffe17 	ldw	r2,-8(fp)
10001d98:	e0ffff17 	ldw	r3,-4(fp)
10001d9c:	01c00284 	movi	r7,10
10001da0:	0011883a 	mov	r8,zero
10001da4:	1009883a 	mov	r4,r2
10001da8:	180b883a 	mov	r5,r3
10001dac:	380d883a 	mov	r6,r7
10001db0:	400f883a 	mov	r7,r8
10001db4:	00024980 	call	10002498 <__umoddi3>
10001db8:	1009883a 	mov	r4,r2
10001dbc:	180b883a 	mov	r5,r3
10001dc0:	2005883a 	mov	r2,r4
10001dc4:	2807883a 	mov	r3,r5
10001dc8:	11000058 	cmpnei	r4,r2,1
10001dcc:	2000081e 	bne	r4,zero,10001df0 <convertBinaryToDecimal+0x80>
10001dd0:	1800071e 	bne	r3,zero,10001df0 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001dd4:	00c00044 	movi	r3,1
10001dd8:	e0bffd17 	ldw	r2,-12(fp)
10001ddc:	1884983a 	sll	r2,r3,r2
10001de0:	1007883a 	mov	r3,r2
10001de4:	e0bffc17 	ldw	r2,-16(fp)
10001de8:	10c5883a 	add	r2,r2,r3
10001dec:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001df0:	e0bffe17 	ldw	r2,-8(fp)
10001df4:	e0ffff17 	ldw	r3,-4(fp)
10001df8:	01c00284 	movi	r7,10
10001dfc:	0011883a 	mov	r8,zero
10001e00:	1009883a 	mov	r4,r2
10001e04:	180b883a 	mov	r5,r3
10001e08:	380d883a 	mov	r6,r7
10001e0c:	400f883a 	mov	r7,r8
10001e10:	0001e580 	call	10001e58 <__udivdi3>
10001e14:	1009883a 	mov	r4,r2
10001e18:	180b883a 	mov	r5,r3
10001e1c:	e13ffe15 	stw	r4,-8(fp)
10001e20:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001e24:	e0bffd17 	ldw	r2,-12(fp)
10001e28:	10800044 	addi	r2,r2,1
10001e2c:	e0bffd15 	stw	r2,-12(fp)
10001e30:	e0bffe17 	ldw	r2,-8(fp)
10001e34:	e0ffff17 	ldw	r3,-4(fp)
10001e38:	10c4b03a 	or	r2,r2,r3
10001e3c:	103fd51e 	bne	r2,zero,10001d94 <__alt_data_end+0xf8001d94>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
10001e40:	e0bffc17 	ldw	r2,-16(fp)
}
10001e44:	e037883a 	mov	sp,fp
10001e48:	dfc00117 	ldw	ra,4(sp)
10001e4c:	df000017 	ldw	fp,0(sp)
10001e50:	dec00204 	addi	sp,sp,8
10001e54:	f800283a 	ret

10001e58 <__udivdi3>:
10001e58:	defff504 	addi	sp,sp,-44
10001e5c:	dcc00415 	stw	r19,16(sp)
10001e60:	dc000115 	stw	r16,4(sp)
10001e64:	dfc00a15 	stw	ra,40(sp)
10001e68:	df000915 	stw	fp,36(sp)
10001e6c:	ddc00815 	stw	r23,32(sp)
10001e70:	dd800715 	stw	r22,28(sp)
10001e74:	dd400615 	stw	r21,24(sp)
10001e78:	dd000515 	stw	r20,20(sp)
10001e7c:	dc800315 	stw	r18,12(sp)
10001e80:	dc400215 	stw	r17,8(sp)
10001e84:	2027883a 	mov	r19,r4
10001e88:	2821883a 	mov	r16,r5
10001e8c:	3800471e 	bne	r7,zero,10001fac <__udivdi3+0x154>
10001e90:	3025883a 	mov	r18,r6
10001e94:	2023883a 	mov	r17,r4
10001e98:	2980592e 	bgeu	r5,r6,10002000 <__udivdi3+0x1a8>
10001e9c:	00bfffd4 	movui	r2,65535
10001ea0:	2829883a 	mov	r20,r5
10001ea4:	1180b236 	bltu	r2,r6,10002170 <__udivdi3+0x318>
10001ea8:	00803fc4 	movi	r2,255
10001eac:	1181622e 	bgeu	r2,r6,10002438 <__udivdi3+0x5e0>
10001eb0:	00800204 	movi	r2,8
10001eb4:	1007883a 	mov	r3,r2
10001eb8:	3084d83a 	srl	r2,r6,r2
10001ebc:	01040074 	movhi	r4,4097
10001ec0:	21046504 	addi	r4,r4,4500
10001ec4:	2085883a 	add	r2,r4,r2
10001ec8:	11000003 	ldbu	r4,0(r2)
10001ecc:	20c9883a 	add	r4,r4,r3
10001ed0:	00c00804 	movi	r3,32
10001ed4:	1907c83a 	sub	r3,r3,r4
10001ed8:	18000526 	beq	r3,zero,10001ef0 <__udivdi3+0x98>
10001edc:	80e0983a 	sll	r16,r16,r3
10001ee0:	9908d83a 	srl	r4,r19,r4
10001ee4:	30e4983a 	sll	r18,r6,r3
10001ee8:	98e2983a 	sll	r17,r19,r3
10001eec:	8128b03a 	or	r20,r16,r4
10001ef0:	902ad43a 	srli	r21,r18,16
10001ef4:	a009883a 	mov	r4,r20
10001ef8:	95bfffcc 	andi	r22,r18,65535
10001efc:	a80b883a 	mov	r5,r21
10001f00:	0002bd80 	call	10002bd8 <__umodsi3>
10001f04:	a009883a 	mov	r4,r20
10001f08:	a80b883a 	mov	r5,r21
10001f0c:	102f883a 	mov	r23,r2
10001f10:	0002bd00 	call	10002bd0 <__udivsi3>
10001f14:	1009883a 	mov	r4,r2
10001f18:	b00b883a 	mov	r5,r22
10001f1c:	1021883a 	mov	r16,r2
10001f20:	0002be00 	call	10002be0 <__mulsi3>
10001f24:	b82e943a 	slli	r23,r23,16
10001f28:	8808d43a 	srli	r4,r17,16
10001f2c:	b906b03a 	or	r3,r23,r4
10001f30:	1880052e 	bgeu	r3,r2,10001f48 <__udivdi3+0xf0>
10001f34:	1c87883a 	add	r3,r3,r18
10001f38:	813fffc4 	addi	r4,r16,-1
10001f3c:	1c800136 	bltu	r3,r18,10001f44 <__udivdi3+0xec>
10001f40:	18815236 	bltu	r3,r2,1000248c <__udivdi3+0x634>
10001f44:	2021883a 	mov	r16,r4
10001f48:	18a7c83a 	sub	r19,r3,r2
10001f4c:	9809883a 	mov	r4,r19
10001f50:	a80b883a 	mov	r5,r21
10001f54:	0002bd80 	call	10002bd8 <__umodsi3>
10001f58:	1029883a 	mov	r20,r2
10001f5c:	9809883a 	mov	r4,r19
10001f60:	a80b883a 	mov	r5,r21
10001f64:	a028943a 	slli	r20,r20,16
10001f68:	0002bd00 	call	10002bd0 <__udivsi3>
10001f6c:	1009883a 	mov	r4,r2
10001f70:	b00b883a 	mov	r5,r22
10001f74:	8c7fffcc 	andi	r17,r17,65535
10001f78:	1027883a 	mov	r19,r2
10001f7c:	a462b03a 	or	r17,r20,r17
10001f80:	0002be00 	call	10002be0 <__mulsi3>
10001f84:	8880052e 	bgeu	r17,r2,10001f9c <__udivdi3+0x144>
10001f88:	8ca3883a 	add	r17,r17,r18
10001f8c:	98ffffc4 	addi	r3,r19,-1
10001f90:	8c811036 	bltu	r17,r18,100023d4 <__udivdi3+0x57c>
10001f94:	88810f2e 	bgeu	r17,r2,100023d4 <__udivdi3+0x57c>
10001f98:	9cffff84 	addi	r19,r19,-2
10001f9c:	8020943a 	slli	r16,r16,16
10001fa0:	0007883a 	mov	r3,zero
10001fa4:	9c04b03a 	or	r2,r19,r16
10001fa8:	00006006 	br	1000212c <__udivdi3+0x2d4>
10001fac:	29c05d36 	bltu	r5,r7,10002124 <__udivdi3+0x2cc>
10001fb0:	00bfffd4 	movui	r2,65535
10001fb4:	11c0692e 	bgeu	r2,r7,1000215c <__udivdi3+0x304>
10001fb8:	00804034 	movhi	r2,256
10001fbc:	10bfffc4 	addi	r2,r2,-1
10001fc0:	11c10e2e 	bgeu	r2,r7,100023fc <__udivdi3+0x5a4>
10001fc4:	01400604 	movi	r5,24
10001fc8:	2811883a 	mov	r8,r5
10001fcc:	394ad83a 	srl	r5,r7,r5
10001fd0:	00840074 	movhi	r2,4097
10001fd4:	10846504 	addi	r2,r2,4500
10001fd8:	114b883a 	add	r5,r2,r5
10001fdc:	29400003 	ldbu	r5,0(r5)
10001fe0:	00c00804 	movi	r3,32
10001fe4:	2a0b883a 	add	r5,r5,r8
10001fe8:	196fc83a 	sub	r23,r3,r5
10001fec:	b8006b1e 	bne	r23,zero,1000219c <__udivdi3+0x344>
10001ff0:	3c011436 	bltu	r7,r16,10002444 <__udivdi3+0x5ec>
10001ff4:	9985403a 	cmpgeu	r2,r19,r6
10001ff8:	0007883a 	mov	r3,zero
10001ffc:	00004b06 	br	1000212c <__udivdi3+0x2d4>
10002000:	3000041e 	bne	r6,zero,10002014 <__udivdi3+0x1bc>
10002004:	01000044 	movi	r4,1
10002008:	000b883a 	mov	r5,zero
1000200c:	0002bd00 	call	10002bd0 <__udivsi3>
10002010:	1025883a 	mov	r18,r2
10002014:	00bfffd4 	movui	r2,65535
10002018:	14805b2e 	bgeu	r2,r18,10002188 <__udivdi3+0x330>
1000201c:	00804034 	movhi	r2,256
10002020:	10bfffc4 	addi	r2,r2,-1
10002024:	1480fe2e 	bgeu	r2,r18,10002420 <__udivdi3+0x5c8>
10002028:	00800604 	movi	r2,24
1000202c:	1007883a 	mov	r3,r2
10002030:	9084d83a 	srl	r2,r18,r2
10002034:	01040074 	movhi	r4,4097
10002038:	21046504 	addi	r4,r4,4500
1000203c:	2085883a 	add	r2,r4,r2
10002040:	11800003 	ldbu	r6,0(r2)
10002044:	01c00804 	movi	r7,32
10002048:	30c7883a 	add	r3,r6,r3
1000204c:	38cfc83a 	sub	r7,r7,r3
10002050:	3800a71e 	bne	r7,zero,100022f0 <__udivdi3+0x498>
10002054:	9028d43a 	srli	r20,r18,16
10002058:	84a1c83a 	sub	r16,r16,r18
1000205c:	957fffcc 	andi	r21,r18,65535
10002060:	00c00044 	movi	r3,1
10002064:	8009883a 	mov	r4,r16
10002068:	a00b883a 	mov	r5,r20
1000206c:	d8c00015 	stw	r3,0(sp)
10002070:	0002bd80 	call	10002bd8 <__umodsi3>
10002074:	8009883a 	mov	r4,r16
10002078:	a00b883a 	mov	r5,r20
1000207c:	102d883a 	mov	r22,r2
10002080:	0002bd00 	call	10002bd0 <__udivsi3>
10002084:	1009883a 	mov	r4,r2
10002088:	a80b883a 	mov	r5,r21
1000208c:	1021883a 	mov	r16,r2
10002090:	0002be00 	call	10002be0 <__mulsi3>
10002094:	b02c943a 	slli	r22,r22,16
10002098:	880ed43a 	srli	r7,r17,16
1000209c:	d8c00017 	ldw	r3,0(sp)
100020a0:	b1ccb03a 	or	r6,r22,r7
100020a4:	3080052e 	bgeu	r6,r2,100020bc <__udivdi3+0x264>
100020a8:	348d883a 	add	r6,r6,r18
100020ac:	813fffc4 	addi	r4,r16,-1
100020b0:	34800136 	bltu	r6,r18,100020b8 <__udivdi3+0x260>
100020b4:	3080f236 	bltu	r6,r2,10002480 <__udivdi3+0x628>
100020b8:	2021883a 	mov	r16,r4
100020bc:	30a7c83a 	sub	r19,r6,r2
100020c0:	9809883a 	mov	r4,r19
100020c4:	a00b883a 	mov	r5,r20
100020c8:	d8c00015 	stw	r3,0(sp)
100020cc:	0002bd80 	call	10002bd8 <__umodsi3>
100020d0:	102d883a 	mov	r22,r2
100020d4:	9809883a 	mov	r4,r19
100020d8:	a00b883a 	mov	r5,r20
100020dc:	b02c943a 	slli	r22,r22,16
100020e0:	0002bd00 	call	10002bd0 <__udivsi3>
100020e4:	1009883a 	mov	r4,r2
100020e8:	a80b883a 	mov	r5,r21
100020ec:	8c7fffcc 	andi	r17,r17,65535
100020f0:	1027883a 	mov	r19,r2
100020f4:	b462b03a 	or	r17,r22,r17
100020f8:	0002be00 	call	10002be0 <__mulsi3>
100020fc:	d8c00017 	ldw	r3,0(sp)
10002100:	8880052e 	bgeu	r17,r2,10002118 <__udivdi3+0x2c0>
10002104:	8ca3883a 	add	r17,r17,r18
10002108:	993fffc4 	addi	r4,r19,-1
1000210c:	8c80af36 	bltu	r17,r18,100023cc <__udivdi3+0x574>
10002110:	8880ae2e 	bgeu	r17,r2,100023cc <__udivdi3+0x574>
10002114:	9cffff84 	addi	r19,r19,-2
10002118:	8020943a 	slli	r16,r16,16
1000211c:	9c04b03a 	or	r2,r19,r16
10002120:	00000206 	br	1000212c <__udivdi3+0x2d4>
10002124:	0007883a 	mov	r3,zero
10002128:	0005883a 	mov	r2,zero
1000212c:	dfc00a17 	ldw	ra,40(sp)
10002130:	df000917 	ldw	fp,36(sp)
10002134:	ddc00817 	ldw	r23,32(sp)
10002138:	dd800717 	ldw	r22,28(sp)
1000213c:	dd400617 	ldw	r21,24(sp)
10002140:	dd000517 	ldw	r20,20(sp)
10002144:	dcc00417 	ldw	r19,16(sp)
10002148:	dc800317 	ldw	r18,12(sp)
1000214c:	dc400217 	ldw	r17,8(sp)
10002150:	dc000117 	ldw	r16,4(sp)
10002154:	dec00b04 	addi	sp,sp,44
10002158:	f800283a 	ret
1000215c:	00803fc4 	movi	r2,255
10002160:	11c0a92e 	bgeu	r2,r7,10002408 <__udivdi3+0x5b0>
10002164:	01400204 	movi	r5,8
10002168:	2811883a 	mov	r8,r5
1000216c:	003f9706 	br	10001fcc <__alt_data_end+0xf8001fcc>
10002170:	00804034 	movhi	r2,256
10002174:	10bfffc4 	addi	r2,r2,-1
10002178:	1180a62e 	bgeu	r2,r6,10002414 <__udivdi3+0x5bc>
1000217c:	00800604 	movi	r2,24
10002180:	1007883a 	mov	r3,r2
10002184:	003f4c06 	br	10001eb8 <__alt_data_end+0xf8001eb8>
10002188:	00803fc4 	movi	r2,255
1000218c:	1480a72e 	bgeu	r2,r18,1000242c <__udivdi3+0x5d4>
10002190:	00800204 	movi	r2,8
10002194:	1007883a 	mov	r3,r2
10002198:	003fa506 	br	10002030 <__alt_data_end+0xf8002030>
1000219c:	3178d83a 	srl	fp,r6,r5
100021a0:	3dce983a 	sll	r7,r7,r23
100021a4:	8168d83a 	srl	r20,r16,r5
100021a8:	9950d83a 	srl	r8,r19,r5
100021ac:	3f38b03a 	or	fp,r7,fp
100021b0:	e024d43a 	srli	r18,fp,16
100021b4:	85e0983a 	sll	r16,r16,r23
100021b8:	a009883a 	mov	r4,r20
100021bc:	900b883a 	mov	r5,r18
100021c0:	8220b03a 	or	r16,r16,r8
100021c4:	35ea983a 	sll	r21,r6,r23
100021c8:	0002bd80 	call	10002bd8 <__umodsi3>
100021cc:	a009883a 	mov	r4,r20
100021d0:	900b883a 	mov	r5,r18
100021d4:	1023883a 	mov	r17,r2
100021d8:	e5bfffcc 	andi	r22,fp,65535
100021dc:	0002bd00 	call	10002bd0 <__udivsi3>
100021e0:	1009883a 	mov	r4,r2
100021e4:	b00b883a 	mov	r5,r22
100021e8:	1029883a 	mov	r20,r2
100021ec:	0002be00 	call	10002be0 <__mulsi3>
100021f0:	8806943a 	slli	r3,r17,16
100021f4:	8014d43a 	srli	r10,r16,16
100021f8:	1a92b03a 	or	r9,r3,r10
100021fc:	4880042e 	bgeu	r9,r2,10002210 <__udivdi3+0x3b8>
10002200:	4f13883a 	add	r9,r9,fp
10002204:	a0ffffc4 	addi	r3,r20,-1
10002208:	4f00952e 	bgeu	r9,fp,10002460 <__udivdi3+0x608>
1000220c:	1829883a 	mov	r20,r3
10002210:	48a3c83a 	sub	r17,r9,r2
10002214:	8809883a 	mov	r4,r17
10002218:	900b883a 	mov	r5,r18
1000221c:	0002bd80 	call	10002bd8 <__umodsi3>
10002220:	8809883a 	mov	r4,r17
10002224:	900b883a 	mov	r5,r18
10002228:	d8800015 	stw	r2,0(sp)
1000222c:	0002bd00 	call	10002bd0 <__udivsi3>
10002230:	1009883a 	mov	r4,r2
10002234:	b00b883a 	mov	r5,r22
10002238:	1023883a 	mov	r17,r2
1000223c:	0002be00 	call	10002be0 <__mulsi3>
10002240:	d8c00017 	ldw	r3,0(sp)
10002244:	823fffcc 	andi	r8,r16,65535
10002248:	1806943a 	slli	r3,r3,16
1000224c:	1a20b03a 	or	r16,r3,r8
10002250:	8080042e 	bgeu	r16,r2,10002264 <__udivdi3+0x40c>
10002254:	8721883a 	add	r16,r16,fp
10002258:	88ffffc4 	addi	r3,r17,-1
1000225c:	87007c2e 	bgeu	r16,fp,10002450 <__udivdi3+0x5f8>
10002260:	1823883a 	mov	r17,r3
10002264:	a028943a 	slli	r20,r20,16
10002268:	acbfffcc 	andi	r18,r21,65535
1000226c:	900b883a 	mov	r5,r18
10002270:	8d28b03a 	or	r20,r17,r20
10002274:	a022d43a 	srli	r17,r20,16
10002278:	a5bfffcc 	andi	r22,r20,65535
1000227c:	b009883a 	mov	r4,r22
10002280:	a82ad43a 	srli	r21,r21,16
10002284:	80a1c83a 	sub	r16,r16,r2
10002288:	0002be00 	call	10002be0 <__mulsi3>
1000228c:	8809883a 	mov	r4,r17
10002290:	900b883a 	mov	r5,r18
10002294:	1039883a 	mov	fp,r2
10002298:	0002be00 	call	10002be0 <__mulsi3>
1000229c:	8809883a 	mov	r4,r17
100022a0:	a80b883a 	mov	r5,r21
100022a4:	1025883a 	mov	r18,r2
100022a8:	0002be00 	call	10002be0 <__mulsi3>
100022ac:	b009883a 	mov	r4,r22
100022b0:	a80b883a 	mov	r5,r21
100022b4:	1023883a 	mov	r17,r2
100022b8:	0002be00 	call	10002be0 <__mulsi3>
100022bc:	e006d43a 	srli	r3,fp,16
100022c0:	9085883a 	add	r2,r18,r2
100022c4:	10c7883a 	add	r3,r2,r3
100022c8:	1c80022e 	bgeu	r3,r18,100022d4 <__udivdi3+0x47c>
100022cc:	00800074 	movhi	r2,1
100022d0:	88a3883a 	add	r17,r17,r2
100022d4:	1808d43a 	srli	r4,r3,16
100022d8:	8909883a 	add	r4,r17,r4
100022dc:	81004436 	bltu	r16,r4,100023f0 <__udivdi3+0x598>
100022e0:	81003e26 	beq	r16,r4,100023dc <__udivdi3+0x584>
100022e4:	a005883a 	mov	r2,r20
100022e8:	0007883a 	mov	r3,zero
100022ec:	003f8f06 	br	1000212c <__alt_data_end+0xf800212c>
100022f0:	91e4983a 	sll	r18,r18,r7
100022f4:	80eed83a 	srl	r23,r16,r3
100022f8:	81cc983a 	sll	r6,r16,r7
100022fc:	9028d43a 	srli	r20,r18,16
10002300:	98c6d83a 	srl	r3,r19,r3
10002304:	b809883a 	mov	r4,r23
10002308:	a00b883a 	mov	r5,r20
1000230c:	30ecb03a 	or	r22,r6,r3
10002310:	99e2983a 	sll	r17,r19,r7
10002314:	0002bd80 	call	10002bd8 <__umodsi3>
10002318:	b809883a 	mov	r4,r23
1000231c:	a00b883a 	mov	r5,r20
10002320:	1021883a 	mov	r16,r2
10002324:	957fffcc 	andi	r21,r18,65535
10002328:	0002bd00 	call	10002bd0 <__udivsi3>
1000232c:	a80b883a 	mov	r5,r21
10002330:	1009883a 	mov	r4,r2
10002334:	102f883a 	mov	r23,r2
10002338:	0002be00 	call	10002be0 <__mulsi3>
1000233c:	8020943a 	slli	r16,r16,16
10002340:	b00ad43a 	srli	r5,r22,16
10002344:	814cb03a 	or	r6,r16,r5
10002348:	3080062e 	bgeu	r6,r2,10002364 <__udivdi3+0x50c>
1000234c:	348d883a 	add	r6,r6,r18
10002350:	b8ffffc4 	addi	r3,r23,-1
10002354:	34804836 	bltu	r6,r18,10002478 <__udivdi3+0x620>
10002358:	3080472e 	bgeu	r6,r2,10002478 <__udivdi3+0x620>
1000235c:	bdffff84 	addi	r23,r23,-2
10002360:	348d883a 	add	r6,r6,r18
10002364:	30a7c83a 	sub	r19,r6,r2
10002368:	9809883a 	mov	r4,r19
1000236c:	a00b883a 	mov	r5,r20
10002370:	0002bd80 	call	10002bd8 <__umodsi3>
10002374:	9809883a 	mov	r4,r19
10002378:	a00b883a 	mov	r5,r20
1000237c:	1039883a 	mov	fp,r2
10002380:	0002bd00 	call	10002bd0 <__udivsi3>
10002384:	1009883a 	mov	r4,r2
10002388:	a80b883a 	mov	r5,r21
1000238c:	e038943a 	slli	fp,fp,16
10002390:	1027883a 	mov	r19,r2
10002394:	0002be00 	call	10002be0 <__mulsi3>
10002398:	b1bfffcc 	andi	r6,r22,65535
1000239c:	e18cb03a 	or	r6,fp,r6
100023a0:	3080062e 	bgeu	r6,r2,100023bc <__udivdi3+0x564>
100023a4:	348d883a 	add	r6,r6,r18
100023a8:	98ffffc4 	addi	r3,r19,-1
100023ac:	34803036 	bltu	r6,r18,10002470 <__udivdi3+0x618>
100023b0:	30802f2e 	bgeu	r6,r2,10002470 <__udivdi3+0x618>
100023b4:	9cffff84 	addi	r19,r19,-2
100023b8:	348d883a 	add	r6,r6,r18
100023bc:	b82e943a 	slli	r23,r23,16
100023c0:	30a1c83a 	sub	r16,r6,r2
100023c4:	9dc6b03a 	or	r3,r19,r23
100023c8:	003f2606 	br	10002064 <__alt_data_end+0xf8002064>
100023cc:	2027883a 	mov	r19,r4
100023d0:	003f5106 	br	10002118 <__alt_data_end+0xf8002118>
100023d4:	1827883a 	mov	r19,r3
100023d8:	003ef006 	br	10001f9c <__alt_data_end+0xf8001f9c>
100023dc:	1808943a 	slli	r4,r3,16
100023e0:	9dc6983a 	sll	r3,r19,r23
100023e4:	e73fffcc 	andi	fp,fp,65535
100023e8:	2709883a 	add	r4,r4,fp
100023ec:	193fbd2e 	bgeu	r3,r4,100022e4 <__alt_data_end+0xf80022e4>
100023f0:	a0bfffc4 	addi	r2,r20,-1
100023f4:	0007883a 	mov	r3,zero
100023f8:	003f4c06 	br	1000212c <__alt_data_end+0xf800212c>
100023fc:	01400404 	movi	r5,16
10002400:	2811883a 	mov	r8,r5
10002404:	003ef106 	br	10001fcc <__alt_data_end+0xf8001fcc>
10002408:	000b883a 	mov	r5,zero
1000240c:	0011883a 	mov	r8,zero
10002410:	003eee06 	br	10001fcc <__alt_data_end+0xf8001fcc>
10002414:	00800404 	movi	r2,16
10002418:	1007883a 	mov	r3,r2
1000241c:	003ea606 	br	10001eb8 <__alt_data_end+0xf8001eb8>
10002420:	00800404 	movi	r2,16
10002424:	1007883a 	mov	r3,r2
10002428:	003f0106 	br	10002030 <__alt_data_end+0xf8002030>
1000242c:	0005883a 	mov	r2,zero
10002430:	0007883a 	mov	r3,zero
10002434:	003efe06 	br	10002030 <__alt_data_end+0xf8002030>
10002438:	0005883a 	mov	r2,zero
1000243c:	0007883a 	mov	r3,zero
10002440:	003e9d06 	br	10001eb8 <__alt_data_end+0xf8001eb8>
10002444:	0007883a 	mov	r3,zero
10002448:	00800044 	movi	r2,1
1000244c:	003f3706 	br	1000212c <__alt_data_end+0xf800212c>
10002450:	80bf832e 	bgeu	r16,r2,10002260 <__alt_data_end+0xf8002260>
10002454:	8c7fff84 	addi	r17,r17,-2
10002458:	8721883a 	add	r16,r16,fp
1000245c:	003f8106 	br	10002264 <__alt_data_end+0xf8002264>
10002460:	48bf6a2e 	bgeu	r9,r2,1000220c <__alt_data_end+0xf800220c>
10002464:	a53fff84 	addi	r20,r20,-2
10002468:	4f13883a 	add	r9,r9,fp
1000246c:	003f6806 	br	10002210 <__alt_data_end+0xf8002210>
10002470:	1827883a 	mov	r19,r3
10002474:	003fd106 	br	100023bc <__alt_data_end+0xf80023bc>
10002478:	182f883a 	mov	r23,r3
1000247c:	003fb906 	br	10002364 <__alt_data_end+0xf8002364>
10002480:	843fff84 	addi	r16,r16,-2
10002484:	348d883a 	add	r6,r6,r18
10002488:	003f0c06 	br	100020bc <__alt_data_end+0xf80020bc>
1000248c:	843fff84 	addi	r16,r16,-2
10002490:	1c87883a 	add	r3,r3,r18
10002494:	003eac06 	br	10001f48 <__alt_data_end+0xf8001f48>

10002498 <__umoddi3>:
10002498:	defff404 	addi	sp,sp,-48
1000249c:	dd800815 	stw	r22,32(sp)
100024a0:	dc400315 	stw	r17,12(sp)
100024a4:	dc000215 	stw	r16,8(sp)
100024a8:	dfc00b15 	stw	ra,44(sp)
100024ac:	df000a15 	stw	fp,40(sp)
100024b0:	ddc00915 	stw	r23,36(sp)
100024b4:	dd400715 	stw	r21,28(sp)
100024b8:	dd000615 	stw	r20,24(sp)
100024bc:	dcc00515 	stw	r19,20(sp)
100024c0:	dc800415 	stw	r18,16(sp)
100024c4:	2021883a 	mov	r16,r4
100024c8:	2823883a 	mov	r17,r5
100024cc:	282d883a 	mov	r22,r5
100024d0:	38003c1e 	bne	r7,zero,100025c4 <__umoddi3+0x12c>
100024d4:	3027883a 	mov	r19,r6
100024d8:	2029883a 	mov	r20,r4
100024dc:	2980522e 	bgeu	r5,r6,10002628 <__umoddi3+0x190>
100024e0:	00bfffd4 	movui	r2,65535
100024e4:	1180a436 	bltu	r2,r6,10002778 <__umoddi3+0x2e0>
100024e8:	00803fc4 	movi	r2,255
100024ec:	11815e2e 	bgeu	r2,r6,10002a68 <__umoddi3+0x5d0>
100024f0:	01400204 	movi	r5,8
100024f4:	2805883a 	mov	r2,r5
100024f8:	314ad83a 	srl	r5,r6,r5
100024fc:	00c40074 	movhi	r3,4097
10002500:	18c46504 	addi	r3,r3,4500
10002504:	194b883a 	add	r5,r3,r5
10002508:	29000003 	ldbu	r4,0(r5)
1000250c:	2089883a 	add	r4,r4,r2
10002510:	00800804 	movi	r2,32
10002514:	1105c83a 	sub	r2,r2,r4
10002518:	10010c26 	beq	r2,zero,1000294c <__umoddi3+0x4b4>
1000251c:	88a2983a 	sll	r17,r17,r2
10002520:	8108d83a 	srl	r4,r16,r4
10002524:	30a6983a 	sll	r19,r6,r2
10002528:	80a8983a 	sll	r20,r16,r2
1000252c:	1025883a 	mov	r18,r2
10002530:	892cb03a 	or	r22,r17,r4
10002534:	9822d43a 	srli	r17,r19,16
10002538:	b009883a 	mov	r4,r22
1000253c:	9d7fffcc 	andi	r21,r19,65535
10002540:	880b883a 	mov	r5,r17
10002544:	0002bd80 	call	10002bd8 <__umodsi3>
10002548:	b009883a 	mov	r4,r22
1000254c:	880b883a 	mov	r5,r17
10002550:	102f883a 	mov	r23,r2
10002554:	0002bd00 	call	10002bd0 <__udivsi3>
10002558:	1009883a 	mov	r4,r2
1000255c:	a80b883a 	mov	r5,r21
10002560:	0002be00 	call	10002be0 <__mulsi3>
10002564:	b82e943a 	slli	r23,r23,16
10002568:	a008d43a 	srli	r4,r20,16
1000256c:	b906b03a 	or	r3,r23,r4
10002570:	1880042e 	bgeu	r3,r2,10002584 <__umoddi3+0xec>
10002574:	1cc7883a 	add	r3,r3,r19
10002578:	1cc00236 	bltu	r3,r19,10002584 <__umoddi3+0xec>
1000257c:	1880012e 	bgeu	r3,r2,10002584 <__umoddi3+0xec>
10002580:	1cc7883a 	add	r3,r3,r19
10002584:	18a1c83a 	sub	r16,r3,r2
10002588:	8009883a 	mov	r4,r16
1000258c:	880b883a 	mov	r5,r17
10002590:	0002bd80 	call	10002bd8 <__umodsi3>
10002594:	8009883a 	mov	r4,r16
10002598:	880b883a 	mov	r5,r17
1000259c:	102d883a 	mov	r22,r2
100025a0:	0002bd00 	call	10002bd0 <__udivsi3>
100025a4:	1009883a 	mov	r4,r2
100025a8:	a80b883a 	mov	r5,r21
100025ac:	b02c943a 	slli	r22,r22,16
100025b0:	0002be00 	call	10002be0 <__mulsi3>
100025b4:	a13fffcc 	andi	r4,r20,65535
100025b8:	b106b03a 	or	r3,r22,r4
100025bc:	1880572e 	bgeu	r3,r2,1000271c <__umoddi3+0x284>
100025c0:	00005206 	br	1000270c <__umoddi3+0x274>
100025c4:	29c05936 	bltu	r5,r7,1000272c <__umoddi3+0x294>
100025c8:	00bfffd4 	movui	r2,65535
100025cc:	11c0652e 	bgeu	r2,r7,10002764 <__umoddi3+0x2cc>
100025d0:	00804034 	movhi	r2,256
100025d4:	10bfffc4 	addi	r2,r2,-1
100025d8:	11c1172e 	bgeu	r2,r7,10002a38 <__umoddi3+0x5a0>
100025dc:	01400604 	movi	r5,24
100025e0:	282b883a 	mov	r21,r5
100025e4:	394ad83a 	srl	r5,r7,r5
100025e8:	00c40074 	movhi	r3,4097
100025ec:	18c46504 	addi	r3,r3,4500
100025f0:	194b883a 	add	r5,r3,r5
100025f4:	28800003 	ldbu	r2,0(r5)
100025f8:	00c00804 	movi	r3,32
100025fc:	156b883a 	add	r21,r2,r21
10002600:	1d69c83a 	sub	r20,r3,r21
10002604:	a000671e 	bne	r20,zero,100027a4 <__umoddi3+0x30c>
10002608:	3c400136 	bltu	r7,r17,10002610 <__umoddi3+0x178>
1000260c:	81812336 	bltu	r16,r6,10002a9c <__umoddi3+0x604>
10002610:	8185c83a 	sub	r2,r16,r6
10002614:	89e3c83a 	sub	r17,r17,r7
10002618:	8087803a 	cmpltu	r3,r16,r2
1000261c:	88edc83a 	sub	r22,r17,r3
10002620:	b007883a 	mov	r3,r22
10002624:	00004306 	br	10002734 <__umoddi3+0x29c>
10002628:	3000041e 	bne	r6,zero,1000263c <__umoddi3+0x1a4>
1000262c:	01000044 	movi	r4,1
10002630:	000b883a 	mov	r5,zero
10002634:	0002bd00 	call	10002bd0 <__udivsi3>
10002638:	1027883a 	mov	r19,r2
1000263c:	00bfffd4 	movui	r2,65535
10002640:	14c0532e 	bgeu	r2,r19,10002790 <__umoddi3+0x2f8>
10002644:	00804034 	movhi	r2,256
10002648:	10bfffc4 	addi	r2,r2,-1
1000264c:	14c1032e 	bgeu	r2,r19,10002a5c <__umoddi3+0x5c4>
10002650:	00800604 	movi	r2,24
10002654:	1007883a 	mov	r3,r2
10002658:	9884d83a 	srl	r2,r19,r2
1000265c:	01040074 	movhi	r4,4097
10002660:	21046504 	addi	r4,r4,4500
10002664:	2085883a 	add	r2,r4,r2
10002668:	11000003 	ldbu	r4,0(r2)
1000266c:	00800804 	movi	r2,32
10002670:	20c7883a 	add	r3,r4,r3
10002674:	10c5c83a 	sub	r2,r2,r3
10002678:	1000b61e 	bne	r2,zero,10002954 <__umoddi3+0x4bc>
1000267c:	982ad43a 	srli	r21,r19,16
10002680:	8ce3c83a 	sub	r17,r17,r19
10002684:	9dbfffcc 	andi	r22,r19,65535
10002688:	0025883a 	mov	r18,zero
1000268c:	8809883a 	mov	r4,r17
10002690:	a80b883a 	mov	r5,r21
10002694:	0002bd80 	call	10002bd8 <__umodsi3>
10002698:	8809883a 	mov	r4,r17
1000269c:	a80b883a 	mov	r5,r21
100026a0:	102f883a 	mov	r23,r2
100026a4:	0002bd00 	call	10002bd0 <__udivsi3>
100026a8:	1009883a 	mov	r4,r2
100026ac:	b00b883a 	mov	r5,r22
100026b0:	0002be00 	call	10002be0 <__mulsi3>
100026b4:	b82e943a 	slli	r23,r23,16
100026b8:	a008d43a 	srli	r4,r20,16
100026bc:	b906b03a 	or	r3,r23,r4
100026c0:	1880032e 	bgeu	r3,r2,100026d0 <__umoddi3+0x238>
100026c4:	1cc7883a 	add	r3,r3,r19
100026c8:	1cc00136 	bltu	r3,r19,100026d0 <__umoddi3+0x238>
100026cc:	1880f136 	bltu	r3,r2,10002a94 <__umoddi3+0x5fc>
100026d0:	18a1c83a 	sub	r16,r3,r2
100026d4:	8009883a 	mov	r4,r16
100026d8:	a80b883a 	mov	r5,r21
100026dc:	0002bd80 	call	10002bd8 <__umodsi3>
100026e0:	8009883a 	mov	r4,r16
100026e4:	a80b883a 	mov	r5,r21
100026e8:	1023883a 	mov	r17,r2
100026ec:	0002bd00 	call	10002bd0 <__udivsi3>
100026f0:	1009883a 	mov	r4,r2
100026f4:	b00b883a 	mov	r5,r22
100026f8:	8822943a 	slli	r17,r17,16
100026fc:	0002be00 	call	10002be0 <__mulsi3>
10002700:	a13fffcc 	andi	r4,r20,65535
10002704:	8906b03a 	or	r3,r17,r4
10002708:	1880042e 	bgeu	r3,r2,1000271c <__umoddi3+0x284>
1000270c:	1cc7883a 	add	r3,r3,r19
10002710:	1cc00236 	bltu	r3,r19,1000271c <__umoddi3+0x284>
10002714:	1880012e 	bgeu	r3,r2,1000271c <__umoddi3+0x284>
10002718:	1cc7883a 	add	r3,r3,r19
1000271c:	1887c83a 	sub	r3,r3,r2
10002720:	1c84d83a 	srl	r2,r3,r18
10002724:	0007883a 	mov	r3,zero
10002728:	00000206 	br	10002734 <__umoddi3+0x29c>
1000272c:	2005883a 	mov	r2,r4
10002730:	2807883a 	mov	r3,r5
10002734:	dfc00b17 	ldw	ra,44(sp)
10002738:	df000a17 	ldw	fp,40(sp)
1000273c:	ddc00917 	ldw	r23,36(sp)
10002740:	dd800817 	ldw	r22,32(sp)
10002744:	dd400717 	ldw	r21,28(sp)
10002748:	dd000617 	ldw	r20,24(sp)
1000274c:	dcc00517 	ldw	r19,20(sp)
10002750:	dc800417 	ldw	r18,16(sp)
10002754:	dc400317 	ldw	r17,12(sp)
10002758:	dc000217 	ldw	r16,8(sp)
1000275c:	dec00c04 	addi	sp,sp,48
10002760:	f800283a 	ret
10002764:	00803fc4 	movi	r2,255
10002768:	11c0b02e 	bgeu	r2,r7,10002a2c <__umoddi3+0x594>
1000276c:	01400204 	movi	r5,8
10002770:	282b883a 	mov	r21,r5
10002774:	003f9b06 	br	100025e4 <__alt_data_end+0xf80025e4>
10002778:	00804034 	movhi	r2,256
1000277c:	10bfffc4 	addi	r2,r2,-1
10002780:	1180b02e 	bgeu	r2,r6,10002a44 <__umoddi3+0x5ac>
10002784:	01400604 	movi	r5,24
10002788:	2805883a 	mov	r2,r5
1000278c:	003f5a06 	br	100024f8 <__alt_data_end+0xf80024f8>
10002790:	00803fc4 	movi	r2,255
10002794:	14c0ae2e 	bgeu	r2,r19,10002a50 <__umoddi3+0x5b8>
10002798:	00800204 	movi	r2,8
1000279c:	1007883a 	mov	r3,r2
100027a0:	003fad06 	br	10002658 <__alt_data_end+0xf8002658>
100027a4:	3d0a983a 	sll	r5,r7,r20
100027a8:	356cd83a 	srl	r22,r6,r21
100027ac:	8d78d83a 	srl	fp,r17,r21
100027b0:	8d10983a 	sll	r8,r17,r20
100027b4:	2dacb03a 	or	r22,r5,r22
100027b8:	b02ed43a 	srli	r23,r22,16
100027bc:	8564d83a 	srl	r18,r16,r21
100027c0:	e009883a 	mov	r4,fp
100027c4:	b80b883a 	mov	r5,r23
100027c8:	44a4b03a 	or	r18,r8,r18
100027cc:	3526983a 	sll	r19,r6,r20
100027d0:	0002bd80 	call	10002bd8 <__umodsi3>
100027d4:	e009883a 	mov	r4,fp
100027d8:	b80b883a 	mov	r5,r23
100027dc:	b47fffcc 	andi	r17,r22,65535
100027e0:	d8800015 	stw	r2,0(sp)
100027e4:	0002bd00 	call	10002bd0 <__udivsi3>
100027e8:	1009883a 	mov	r4,r2
100027ec:	880b883a 	mov	r5,r17
100027f0:	1039883a 	mov	fp,r2
100027f4:	0002be00 	call	10002be0 <__mulsi3>
100027f8:	d9800017 	ldw	r6,0(sp)
100027fc:	9008d43a 	srli	r4,r18,16
10002800:	8520983a 	sll	r16,r16,r20
10002804:	300c943a 	slli	r6,r6,16
10002808:	3106b03a 	or	r3,r6,r4
1000280c:	1880042e 	bgeu	r3,r2,10002820 <__umoddi3+0x388>
10002810:	1d87883a 	add	r3,r3,r22
10002814:	e13fffc4 	addi	r4,fp,-1
10002818:	1d809a2e 	bgeu	r3,r22,10002a84 <__umoddi3+0x5ec>
1000281c:	2039883a 	mov	fp,r4
10002820:	1887c83a 	sub	r3,r3,r2
10002824:	1809883a 	mov	r4,r3
10002828:	b80b883a 	mov	r5,r23
1000282c:	d8c00115 	stw	r3,4(sp)
10002830:	0002bd80 	call	10002bd8 <__umodsi3>
10002834:	d8c00117 	ldw	r3,4(sp)
10002838:	b80b883a 	mov	r5,r23
1000283c:	d8800015 	stw	r2,0(sp)
10002840:	1809883a 	mov	r4,r3
10002844:	0002bd00 	call	10002bd0 <__udivsi3>
10002848:	880b883a 	mov	r5,r17
1000284c:	1009883a 	mov	r4,r2
10002850:	102f883a 	mov	r23,r2
10002854:	0002be00 	call	10002be0 <__mulsi3>
10002858:	d9800017 	ldw	r6,0(sp)
1000285c:	947fffcc 	andi	r17,r18,65535
10002860:	300c943a 	slli	r6,r6,16
10002864:	3464b03a 	or	r18,r6,r17
10002868:	9080042e 	bgeu	r18,r2,1000287c <__umoddi3+0x3e4>
1000286c:	95a5883a 	add	r18,r18,r22
10002870:	b8ffffc4 	addi	r3,r23,-1
10002874:	95807f2e 	bgeu	r18,r22,10002a74 <__umoddi3+0x5dc>
10002878:	182f883a 	mov	r23,r3
1000287c:	e038943a 	slli	fp,fp,16
10002880:	980cd43a 	srli	r6,r19,16
10002884:	98ffffcc 	andi	r3,r19,65535
10002888:	bf38b03a 	or	fp,r23,fp
1000288c:	e02ed43a 	srli	r23,fp,16
10002890:	e73fffcc 	andi	fp,fp,65535
10002894:	180b883a 	mov	r5,r3
10002898:	e009883a 	mov	r4,fp
1000289c:	d9800015 	stw	r6,0(sp)
100028a0:	d8c00115 	stw	r3,4(sp)
100028a4:	90a5c83a 	sub	r18,r18,r2
100028a8:	0002be00 	call	10002be0 <__mulsi3>
100028ac:	d8c00117 	ldw	r3,4(sp)
100028b0:	b809883a 	mov	r4,r23
100028b4:	1023883a 	mov	r17,r2
100028b8:	180b883a 	mov	r5,r3
100028bc:	0002be00 	call	10002be0 <__mulsi3>
100028c0:	d9800017 	ldw	r6,0(sp)
100028c4:	b809883a 	mov	r4,r23
100028c8:	d8800115 	stw	r2,4(sp)
100028cc:	300b883a 	mov	r5,r6
100028d0:	302f883a 	mov	r23,r6
100028d4:	0002be00 	call	10002be0 <__mulsi3>
100028d8:	e009883a 	mov	r4,fp
100028dc:	b80b883a 	mov	r5,r23
100028e0:	d8800015 	stw	r2,0(sp)
100028e4:	0002be00 	call	10002be0 <__mulsi3>
100028e8:	d8c00117 	ldw	r3,4(sp)
100028ec:	880cd43a 	srli	r6,r17,16
100028f0:	d9c00017 	ldw	r7,0(sp)
100028f4:	1885883a 	add	r2,r3,r2
100028f8:	118d883a 	add	r6,r2,r6
100028fc:	30c0022e 	bgeu	r6,r3,10002908 <__umoddi3+0x470>
10002900:	00800074 	movhi	r2,1
10002904:	388f883a 	add	r7,r7,r2
10002908:	3006d43a 	srli	r3,r6,16
1000290c:	300c943a 	slli	r6,r6,16
10002910:	8c7fffcc 	andi	r17,r17,65535
10002914:	38c7883a 	add	r3,r7,r3
10002918:	3463883a 	add	r17,r6,r17
1000291c:	90c03d36 	bltu	r18,r3,10002a14 <__umoddi3+0x57c>
10002920:	90c06026 	beq	r18,r3,10002aa4 <__umoddi3+0x60c>
10002924:	90c9c83a 	sub	r4,r18,r3
10002928:	880f883a 	mov	r7,r17
1000292c:	81cfc83a 	sub	r7,r16,r7
10002930:	81c7803a 	cmpltu	r3,r16,r7
10002934:	20c7c83a 	sub	r3,r4,r3
10002938:	1d44983a 	sll	r2,r3,r21
1000293c:	3d0ed83a 	srl	r7,r7,r20
10002940:	1d06d83a 	srl	r3,r3,r20
10002944:	11c4b03a 	or	r2,r2,r7
10002948:	003f7a06 	br	10002734 <__alt_data_end+0xf8002734>
1000294c:	0025883a 	mov	r18,zero
10002950:	003ef806 	br	10002534 <__alt_data_end+0xf8002534>
10002954:	98a6983a 	sll	r19,r19,r2
10002958:	88e8d83a 	srl	r20,r17,r3
1000295c:	80c6d83a 	srl	r3,r16,r3
10002960:	982ad43a 	srli	r21,r19,16
10002964:	88a2983a 	sll	r17,r17,r2
10002968:	a009883a 	mov	r4,r20
1000296c:	a80b883a 	mov	r5,r21
10002970:	88eeb03a 	or	r23,r17,r3
10002974:	1025883a 	mov	r18,r2
10002978:	0002bd80 	call	10002bd8 <__umodsi3>
1000297c:	a009883a 	mov	r4,r20
10002980:	a80b883a 	mov	r5,r21
10002984:	1023883a 	mov	r17,r2
10002988:	9dbfffcc 	andi	r22,r19,65535
1000298c:	0002bd00 	call	10002bd0 <__udivsi3>
10002990:	1009883a 	mov	r4,r2
10002994:	b00b883a 	mov	r5,r22
10002998:	0002be00 	call	10002be0 <__mulsi3>
1000299c:	8822943a 	slli	r17,r17,16
100029a0:	b808d43a 	srli	r4,r23,16
100029a4:	84a8983a 	sll	r20,r16,r18
100029a8:	8906b03a 	or	r3,r17,r4
100029ac:	1880042e 	bgeu	r3,r2,100029c0 <__umoddi3+0x528>
100029b0:	1cc7883a 	add	r3,r3,r19
100029b4:	1cc00236 	bltu	r3,r19,100029c0 <__umoddi3+0x528>
100029b8:	1880012e 	bgeu	r3,r2,100029c0 <__umoddi3+0x528>
100029bc:	1cc7883a 	add	r3,r3,r19
100029c0:	18a1c83a 	sub	r16,r3,r2
100029c4:	8009883a 	mov	r4,r16
100029c8:	a80b883a 	mov	r5,r21
100029cc:	0002bd80 	call	10002bd8 <__umodsi3>
100029d0:	8009883a 	mov	r4,r16
100029d4:	a80b883a 	mov	r5,r21
100029d8:	1039883a 	mov	fp,r2
100029dc:	0002bd00 	call	10002bd0 <__udivsi3>
100029e0:	1009883a 	mov	r4,r2
100029e4:	b00b883a 	mov	r5,r22
100029e8:	0002be00 	call	10002be0 <__mulsi3>
100029ec:	e006943a 	slli	r3,fp,16
100029f0:	b93fffcc 	andi	r4,r23,65535
100029f4:	1906b03a 	or	r3,r3,r4
100029f8:	1880042e 	bgeu	r3,r2,10002a0c <__umoddi3+0x574>
100029fc:	1cc7883a 	add	r3,r3,r19
10002a00:	1cc00236 	bltu	r3,r19,10002a0c <__umoddi3+0x574>
10002a04:	1880012e 	bgeu	r3,r2,10002a0c <__umoddi3+0x574>
10002a08:	1cc7883a 	add	r3,r3,r19
10002a0c:	18a3c83a 	sub	r17,r3,r2
10002a10:	003f1e06 	br	1000268c <__alt_data_end+0xf800268c>
10002a14:	8ccfc83a 	sub	r7,r17,r19
10002a18:	1d89c83a 	sub	r4,r3,r22
10002a1c:	89e3803a 	cmpltu	r17,r17,r7
10002a20:	2463c83a 	sub	r17,r4,r17
10002a24:	9449c83a 	sub	r4,r18,r17
10002a28:	003fc006 	br	1000292c <__alt_data_end+0xf800292c>
10002a2c:	000b883a 	mov	r5,zero
10002a30:	002b883a 	mov	r21,zero
10002a34:	003eeb06 	br	100025e4 <__alt_data_end+0xf80025e4>
10002a38:	01400404 	movi	r5,16
10002a3c:	282b883a 	mov	r21,r5
10002a40:	003ee806 	br	100025e4 <__alt_data_end+0xf80025e4>
10002a44:	01400404 	movi	r5,16
10002a48:	2805883a 	mov	r2,r5
10002a4c:	003eaa06 	br	100024f8 <__alt_data_end+0xf80024f8>
10002a50:	0005883a 	mov	r2,zero
10002a54:	0007883a 	mov	r3,zero
10002a58:	003eff06 	br	10002658 <__alt_data_end+0xf8002658>
10002a5c:	00800404 	movi	r2,16
10002a60:	1007883a 	mov	r3,r2
10002a64:	003efc06 	br	10002658 <__alt_data_end+0xf8002658>
10002a68:	000b883a 	mov	r5,zero
10002a6c:	0005883a 	mov	r2,zero
10002a70:	003ea106 	br	100024f8 <__alt_data_end+0xf80024f8>
10002a74:	90bf802e 	bgeu	r18,r2,10002878 <__alt_data_end+0xf8002878>
10002a78:	bdffff84 	addi	r23,r23,-2
10002a7c:	95a5883a 	add	r18,r18,r22
10002a80:	003f7e06 	br	1000287c <__alt_data_end+0xf800287c>
10002a84:	18bf652e 	bgeu	r3,r2,1000281c <__alt_data_end+0xf800281c>
10002a88:	e73fff84 	addi	fp,fp,-2
10002a8c:	1d87883a 	add	r3,r3,r22
10002a90:	003f6306 	br	10002820 <__alt_data_end+0xf8002820>
10002a94:	1cc7883a 	add	r3,r3,r19
10002a98:	003f0d06 	br	100026d0 <__alt_data_end+0xf80026d0>
10002a9c:	8005883a 	mov	r2,r16
10002aa0:	003edf06 	br	10002620 <__alt_data_end+0xf8002620>
10002aa4:	847fdb36 	bltu	r16,r17,10002a14 <__alt_data_end+0xf8002a14>
10002aa8:	880f883a 	mov	r7,r17
10002aac:	0009883a 	mov	r4,zero
10002ab0:	003f9e06 	br	1000292c <__alt_data_end+0xf800292c>

10002ab4 <udivmodsi4>:
10002ab4:	2900182e 	bgeu	r5,r4,10002b18 <udivmodsi4+0x64>
10002ab8:	28001716 	blt	r5,zero,10002b18 <udivmodsi4+0x64>
10002abc:	00800804 	movi	r2,32
10002ac0:	00c00044 	movi	r3,1
10002ac4:	00000206 	br	10002ad0 <udivmodsi4+0x1c>
10002ac8:	10001126 	beq	r2,zero,10002b10 <udivmodsi4+0x5c>
10002acc:	28000516 	blt	r5,zero,10002ae4 <udivmodsi4+0x30>
10002ad0:	294b883a 	add	r5,r5,r5
10002ad4:	10bfffc4 	addi	r2,r2,-1
10002ad8:	18c7883a 	add	r3,r3,r3
10002adc:	293ffa36 	bltu	r5,r4,10002ac8 <__alt_data_end+0xf8002ac8>
10002ae0:	18000b26 	beq	r3,zero,10002b10 <udivmodsi4+0x5c>
10002ae4:	0005883a 	mov	r2,zero
10002ae8:	21400236 	bltu	r4,r5,10002af4 <udivmodsi4+0x40>
10002aec:	2149c83a 	sub	r4,r4,r5
10002af0:	10c4b03a 	or	r2,r2,r3
10002af4:	1806d07a 	srli	r3,r3,1
10002af8:	280ad07a 	srli	r5,r5,1
10002afc:	183ffa1e 	bne	r3,zero,10002ae8 <__alt_data_end+0xf8002ae8>
10002b00:	3000011e 	bne	r6,zero,10002b08 <udivmodsi4+0x54>
10002b04:	f800283a 	ret
10002b08:	2005883a 	mov	r2,r4
10002b0c:	f800283a 	ret
10002b10:	0005883a 	mov	r2,zero
10002b14:	003ffa06 	br	10002b00 <__alt_data_end+0xf8002b00>
10002b18:	00c00044 	movi	r3,1
10002b1c:	003ff106 	br	10002ae4 <__alt_data_end+0xf8002ae4>

10002b20 <__divsi3>:
10002b20:	defffe04 	addi	sp,sp,-8
10002b24:	dfc00115 	stw	ra,4(sp)
10002b28:	dc000015 	stw	r16,0(sp)
10002b2c:	20000b16 	blt	r4,zero,10002b5c <__divsi3+0x3c>
10002b30:	0021883a 	mov	r16,zero
10002b34:	28000c16 	blt	r5,zero,10002b68 <__divsi3+0x48>
10002b38:	000d883a 	mov	r6,zero
10002b3c:	0002ab40 	call	10002ab4 <udivmodsi4>
10002b40:	0407c83a 	sub	r3,zero,r16
10002b44:	1884f03a 	xor	r2,r3,r2
10002b48:	1405883a 	add	r2,r2,r16
10002b4c:	dfc00117 	ldw	ra,4(sp)
10002b50:	dc000017 	ldw	r16,0(sp)
10002b54:	dec00204 	addi	sp,sp,8
10002b58:	f800283a 	ret
10002b5c:	0109c83a 	sub	r4,zero,r4
10002b60:	04000044 	movi	r16,1
10002b64:	283ff40e 	bge	r5,zero,10002b38 <__alt_data_end+0xf8002b38>
10002b68:	014bc83a 	sub	r5,zero,r5
10002b6c:	8400005c 	xori	r16,r16,1
10002b70:	003ff106 	br	10002b38 <__alt_data_end+0xf8002b38>

10002b74 <__modsi3>:
10002b74:	defffd04 	addi	sp,sp,-12
10002b78:	dfc00215 	stw	ra,8(sp)
10002b7c:	dc400115 	stw	r17,4(sp)
10002b80:	dc000015 	stw	r16,0(sp)
10002b84:	20000c16 	blt	r4,zero,10002bb8 <__modsi3+0x44>
10002b88:	0023883a 	mov	r17,zero
10002b8c:	0021883a 	mov	r16,zero
10002b90:	28000d16 	blt	r5,zero,10002bc8 <__modsi3+0x54>
10002b94:	01800044 	movi	r6,1
10002b98:	0002ab40 	call	10002ab4 <udivmodsi4>
10002b9c:	1404f03a 	xor	r2,r2,r16
10002ba0:	8885883a 	add	r2,r17,r2
10002ba4:	dfc00217 	ldw	ra,8(sp)
10002ba8:	dc400117 	ldw	r17,4(sp)
10002bac:	dc000017 	ldw	r16,0(sp)
10002bb0:	dec00304 	addi	sp,sp,12
10002bb4:	f800283a 	ret
10002bb8:	0109c83a 	sub	r4,zero,r4
10002bbc:	04400044 	movi	r17,1
10002bc0:	043fffc4 	movi	r16,-1
10002bc4:	283ff30e 	bge	r5,zero,10002b94 <__alt_data_end+0xf8002b94>
10002bc8:	014bc83a 	sub	r5,zero,r5
10002bcc:	003ff106 	br	10002b94 <__alt_data_end+0xf8002b94>

10002bd0 <__udivsi3>:
10002bd0:	000d883a 	mov	r6,zero
10002bd4:	0002ab41 	jmpi	10002ab4 <udivmodsi4>

10002bd8 <__umodsi3>:
10002bd8:	01800044 	movi	r6,1
10002bdc:	0002ab41 	jmpi	10002ab4 <udivmodsi4>

10002be0 <__mulsi3>:
10002be0:	0005883a 	mov	r2,zero
10002be4:	20000726 	beq	r4,zero,10002c04 <__mulsi3+0x24>
10002be8:	20c0004c 	andi	r3,r4,1
10002bec:	2008d07a 	srli	r4,r4,1
10002bf0:	18000126 	beq	r3,zero,10002bf8 <__mulsi3+0x18>
10002bf4:	1145883a 	add	r2,r2,r5
10002bf8:	294b883a 	add	r5,r5,r5
10002bfc:	203ffa1e 	bne	r4,zero,10002be8 <__alt_data_end+0xf8002be8>
10002c00:	f800283a 	ret
10002c04:	f800283a 	ret

10002c08 <__adddf3>:
10002c08:	02000434 	movhi	r8,16
10002c0c:	423fffc4 	addi	r8,r8,-1
10002c10:	defffb04 	addi	sp,sp,-20
10002c14:	2a12703a 	and	r9,r5,r8
10002c18:	2806d7fa 	srli	r3,r5,31
10002c1c:	3a10703a 	and	r8,r7,r8
10002c20:	3804d53a 	srli	r2,r7,20
10002c24:	3014d77a 	srli	r10,r6,29
10002c28:	dc000015 	stw	r16,0(sp)
10002c2c:	481290fa 	slli	r9,r9,3
10002c30:	2820d53a 	srli	r16,r5,20
10002c34:	401090fa 	slli	r8,r8,3
10002c38:	200ad77a 	srli	r5,r4,29
10002c3c:	380ed7fa 	srli	r7,r7,31
10002c40:	dc800215 	stw	r18,8(sp)
10002c44:	dc400115 	stw	r17,4(sp)
10002c48:	dfc00415 	stw	ra,16(sp)
10002c4c:	dcc00315 	stw	r19,12(sp)
10002c50:	1c803fcc 	andi	r18,r3,255
10002c54:	8401ffcc 	andi	r16,r16,2047
10002c58:	494ab03a 	or	r5,r9,r5
10002c5c:	202290fa 	slli	r17,r4,3
10002c60:	1081ffcc 	andi	r2,r2,2047
10002c64:	4290b03a 	or	r8,r8,r10
10002c68:	300c90fa 	slli	r6,r6,3
10002c6c:	91c07026 	beq	r18,r7,10002e30 <__adddf3+0x228>
10002c70:	8087c83a 	sub	r3,r16,r2
10002c74:	00c0b30e 	bge	zero,r3,10002f44 <__adddf3+0x33c>
10002c78:	10002a1e 	bne	r2,zero,10002d24 <__adddf3+0x11c>
10002c7c:	4184b03a 	or	r2,r8,r6
10002c80:	1000991e 	bne	r2,zero,10002ee8 <__adddf3+0x2e0>
10002c84:	888001cc 	andi	r2,r17,7
10002c88:	10005b26 	beq	r2,zero,10002df8 <__adddf3+0x1f0>
10002c8c:	88c003cc 	andi	r3,r17,15
10002c90:	00800104 	movi	r2,4
10002c94:	18805826 	beq	r3,r2,10002df8 <__adddf3+0x1f0>
10002c98:	89800104 	addi	r6,r17,4
10002c9c:	3463803a 	cmpltu	r17,r6,r17
10002ca0:	2c4b883a 	add	r5,r5,r17
10002ca4:	2880202c 	andhi	r2,r5,128
10002ca8:	9007883a 	mov	r3,r18
10002cac:	3023883a 	mov	r17,r6
10002cb0:	10005426 	beq	r2,zero,10002e04 <__adddf3+0x1fc>
10002cb4:	84000044 	addi	r16,r16,1
10002cb8:	0081ffc4 	movi	r2,2047
10002cbc:	8080c126 	beq	r16,r2,10002fc4 <__adddf3+0x3bc>
10002cc0:	013fe034 	movhi	r4,65408
10002cc4:	213fffc4 	addi	r4,r4,-1
10002cc8:	290a703a 	and	r5,r5,r4
10002ccc:	2804977a 	slli	r2,r5,29
10002cd0:	280a927a 	slli	r5,r5,9
10002cd4:	8822d0fa 	srli	r17,r17,3
10002cd8:	8401ffcc 	andi	r16,r16,2047
10002cdc:	2808d33a 	srli	r4,r5,12
10002ce0:	1444b03a 	or	r2,r2,r17
10002ce4:	8401ffcc 	andi	r16,r16,2047
10002ce8:	800a953a 	slli	r5,r16,20
10002cec:	18c03fcc 	andi	r3,r3,255
10002cf0:	04000434 	movhi	r16,16
10002cf4:	180697fa 	slli	r3,r3,31
10002cf8:	843fffc4 	addi	r16,r16,-1
10002cfc:	2420703a 	and	r16,r4,r16
10002d00:	8160b03a 	or	r16,r16,r5
10002d04:	80c6b03a 	or	r3,r16,r3
10002d08:	dfc00417 	ldw	ra,16(sp)
10002d0c:	dcc00317 	ldw	r19,12(sp)
10002d10:	dc800217 	ldw	r18,8(sp)
10002d14:	dc400117 	ldw	r17,4(sp)
10002d18:	dc000017 	ldw	r16,0(sp)
10002d1c:	dec00504 	addi	sp,sp,20
10002d20:	f800283a 	ret
10002d24:	0081ffc4 	movi	r2,2047
10002d28:	80bfd626 	beq	r16,r2,10002c84 <__alt_data_end+0xf8002c84>
10002d2c:	42002034 	orhi	r8,r8,128
10002d30:	00800e04 	movi	r2,56
10002d34:	10c0a616 	blt	r2,r3,10002fd0 <__adddf3+0x3c8>
10002d38:	008007c4 	movi	r2,31
10002d3c:	10c0c916 	blt	r2,r3,10003064 <__adddf3+0x45c>
10002d40:	00800804 	movi	r2,32
10002d44:	10c5c83a 	sub	r2,r2,r3
10002d48:	408e983a 	sll	r7,r8,r2
10002d4c:	30c8d83a 	srl	r4,r6,r3
10002d50:	3084983a 	sll	r2,r6,r2
10002d54:	40c6d83a 	srl	r3,r8,r3
10002d58:	390cb03a 	or	r6,r7,r4
10002d5c:	1004c03a 	cmpne	r2,r2,zero
10002d60:	308cb03a 	or	r6,r6,r2
10002d64:	898dc83a 	sub	r6,r17,r6
10002d68:	89a3803a 	cmpltu	r17,r17,r6
10002d6c:	28cbc83a 	sub	r5,r5,r3
10002d70:	2c4bc83a 	sub	r5,r5,r17
10002d74:	3023883a 	mov	r17,r6
10002d78:	2880202c 	andhi	r2,r5,128
10002d7c:	10006d26 	beq	r2,zero,10002f34 <__adddf3+0x32c>
10002d80:	04c02034 	movhi	r19,128
10002d84:	9cffffc4 	addi	r19,r19,-1
10002d88:	2ce6703a 	and	r19,r5,r19
10002d8c:	98007e26 	beq	r19,zero,10002f88 <__adddf3+0x380>
10002d90:	9809883a 	mov	r4,r19
10002d94:	0003ecc0 	call	10003ecc <__clzsi2>
10002d98:	10fffe04 	addi	r3,r2,-8
10002d9c:	010007c4 	movi	r4,31
10002da0:	20c07f16 	blt	r4,r3,10002fa0 <__adddf3+0x398>
10002da4:	01400a04 	movi	r5,40
10002da8:	2885c83a 	sub	r2,r5,r2
10002dac:	888ad83a 	srl	r5,r17,r2
10002db0:	98e6983a 	sll	r19,r19,r3
10002db4:	88e2983a 	sll	r17,r17,r3
10002db8:	2ce6b03a 	or	r19,r5,r19
10002dbc:	1c007c16 	blt	r3,r16,10002fb0 <__adddf3+0x3a8>
10002dc0:	1c21c83a 	sub	r16,r3,r16
10002dc4:	81400044 	addi	r5,r16,1
10002dc8:	00c007c4 	movi	r3,31
10002dcc:	19409816 	blt	r3,r5,10003030 <__adddf3+0x428>
10002dd0:	1c21c83a 	sub	r16,r3,r16
10002dd4:	8c08983a 	sll	r4,r17,r16
10002dd8:	8946d83a 	srl	r3,r17,r5
10002ddc:	9c20983a 	sll	r16,r19,r16
10002de0:	2008c03a 	cmpne	r4,r4,zero
10002de4:	994ad83a 	srl	r5,r19,r5
10002de8:	1c06b03a 	or	r3,r3,r16
10002dec:	1922b03a 	or	r17,r3,r4
10002df0:	0021883a 	mov	r16,zero
10002df4:	003fa306 	br	10002c84 <__alt_data_end+0xf8002c84>
10002df8:	2880202c 	andhi	r2,r5,128
10002dfc:	9007883a 	mov	r3,r18
10002e00:	103fac1e 	bne	r2,zero,10002cb4 <__alt_data_end+0xf8002cb4>
10002e04:	2804977a 	slli	r2,r5,29
10002e08:	8822d0fa 	srli	r17,r17,3
10002e0c:	0101ffc4 	movi	r4,2047
10002e10:	280ad0fa 	srli	r5,r5,3
10002e14:	1444b03a 	or	r2,r2,r17
10002e18:	81002c26 	beq	r16,r4,10002ecc <__adddf3+0x2c4>
10002e1c:	8120703a 	and	r16,r16,r4
10002e20:	01000434 	movhi	r4,16
10002e24:	213fffc4 	addi	r4,r4,-1
10002e28:	2908703a 	and	r4,r5,r4
10002e2c:	003fad06 	br	10002ce4 <__alt_data_end+0xf8002ce4>
10002e30:	8089c83a 	sub	r4,r16,r2
10002e34:	01006a0e 	bge	zero,r4,10002fe0 <__adddf3+0x3d8>
10002e38:	10003326 	beq	r2,zero,10002f08 <__adddf3+0x300>
10002e3c:	0081ffc4 	movi	r2,2047
10002e40:	80bf9026 	beq	r16,r2,10002c84 <__alt_data_end+0xf8002c84>
10002e44:	42002034 	orhi	r8,r8,128
10002e48:	00800e04 	movi	r2,56
10002e4c:	1100b116 	blt	r2,r4,10003114 <__adddf3+0x50c>
10002e50:	008007c4 	movi	r2,31
10002e54:	1100e216 	blt	r2,r4,100031e0 <__adddf3+0x5d8>
10002e58:	00800804 	movi	r2,32
10002e5c:	1105c83a 	sub	r2,r2,r4
10002e60:	4092983a 	sll	r9,r8,r2
10002e64:	310ed83a 	srl	r7,r6,r4
10002e68:	3084983a 	sll	r2,r6,r2
10002e6c:	4110d83a 	srl	r8,r8,r4
10002e70:	49ccb03a 	or	r6,r9,r7
10002e74:	1004c03a 	cmpne	r2,r2,zero
10002e78:	308cb03a 	or	r6,r6,r2
10002e7c:	344d883a 	add	r6,r6,r17
10002e80:	3463803a 	cmpltu	r17,r6,r17
10002e84:	414b883a 	add	r5,r8,r5
10002e88:	2c4b883a 	add	r5,r5,r17
10002e8c:	3023883a 	mov	r17,r6
10002e90:	2880202c 	andhi	r2,r5,128
10002e94:	10002726 	beq	r2,zero,10002f34 <__adddf3+0x32c>
10002e98:	84000044 	addi	r16,r16,1
10002e9c:	0081ffc4 	movi	r2,2047
10002ea0:	8080ae26 	beq	r16,r2,1000315c <__adddf3+0x554>
10002ea4:	00bfe034 	movhi	r2,65408
10002ea8:	10bfffc4 	addi	r2,r2,-1
10002eac:	288a703a 	and	r5,r5,r2
10002eb0:	880cd07a 	srli	r6,r17,1
10002eb4:	280897fa 	slli	r4,r5,31
10002eb8:	88c0004c 	andi	r3,r17,1
10002ebc:	30e2b03a 	or	r17,r6,r3
10002ec0:	280ad07a 	srli	r5,r5,1
10002ec4:	8922b03a 	or	r17,r17,r4
10002ec8:	003f6e06 	br	10002c84 <__alt_data_end+0xf8002c84>
10002ecc:	1148b03a 	or	r4,r2,r5
10002ed0:	20003c26 	beq	r4,zero,10002fc4 <__adddf3+0x3bc>
10002ed4:	29000234 	orhi	r4,r5,8
10002ed8:	01400434 	movhi	r5,16
10002edc:	297fffc4 	addi	r5,r5,-1
10002ee0:	2148703a 	and	r4,r4,r5
10002ee4:	003f7f06 	br	10002ce4 <__alt_data_end+0xf8002ce4>
10002ee8:	18ffffc4 	addi	r3,r3,-1
10002eec:	18004d1e 	bne	r3,zero,10003024 <__adddf3+0x41c>
10002ef0:	898dc83a 	sub	r6,r17,r6
10002ef4:	89a3803a 	cmpltu	r17,r17,r6
10002ef8:	2a0bc83a 	sub	r5,r5,r8
10002efc:	2c4bc83a 	sub	r5,r5,r17
10002f00:	3023883a 	mov	r17,r6
10002f04:	003f9c06 	br	10002d78 <__alt_data_end+0xf8002d78>
10002f08:	4184b03a 	or	r2,r8,r6
10002f0c:	103f5d26 	beq	r2,zero,10002c84 <__alt_data_end+0xf8002c84>
10002f10:	213fffc4 	addi	r4,r4,-1
10002f14:	203fd926 	beq	r4,zero,10002e7c <__alt_data_end+0xf8002e7c>
10002f18:	0081ffc4 	movi	r2,2047
10002f1c:	80bfca1e 	bne	r16,r2,10002e48 <__alt_data_end+0xf8002e48>
10002f20:	003f5806 	br	10002c84 <__alt_data_end+0xf8002c84>
10002f24:	10c8b03a 	or	r4,r2,r3
10002f28:	20008b26 	beq	r4,zero,10003158 <__adddf3+0x550>
10002f2c:	100b883a 	mov	r5,r2
10002f30:	1823883a 	mov	r17,r3
10002f34:	888001cc 	andi	r2,r17,7
10002f38:	103f541e 	bne	r2,zero,10002c8c <__alt_data_end+0xf8002c8c>
10002f3c:	9007883a 	mov	r3,r18
10002f40:	003fb006 	br	10002e04 <__alt_data_end+0xf8002e04>
10002f44:	1800531e 	bne	r3,zero,10003094 <__adddf3+0x48c>
10002f48:	80800044 	addi	r2,r16,1
10002f4c:	1081ffcc 	andi	r2,r2,2047
10002f50:	00c00044 	movi	r3,1
10002f54:	1880990e 	bge	r3,r2,100031bc <__adddf3+0x5b4>
10002f58:	8985c83a 	sub	r2,r17,r6
10002f5c:	8887803a 	cmpltu	r3,r17,r2
10002f60:	2a27c83a 	sub	r19,r5,r8
10002f64:	98e7c83a 	sub	r19,r19,r3
10002f68:	98c0202c 	andhi	r3,r19,128
10002f6c:	18006226 	beq	r3,zero,100030f8 <__adddf3+0x4f0>
10002f70:	3463c83a 	sub	r17,r6,r17
10002f74:	4151c83a 	sub	r8,r8,r5
10002f78:	344d803a 	cmpltu	r6,r6,r17
10002f7c:	41a7c83a 	sub	r19,r8,r6
10002f80:	3825883a 	mov	r18,r7
10002f84:	983f821e 	bne	r19,zero,10002d90 <__alt_data_end+0xf8002d90>
10002f88:	8809883a 	mov	r4,r17
10002f8c:	0003ecc0 	call	10003ecc <__clzsi2>
10002f90:	10800804 	addi	r2,r2,32
10002f94:	10fffe04 	addi	r3,r2,-8
10002f98:	010007c4 	movi	r4,31
10002f9c:	20ff810e 	bge	r4,r3,10002da4 <__alt_data_end+0xf8002da4>
10002fa0:	14fff604 	addi	r19,r2,-40
10002fa4:	8ce6983a 	sll	r19,r17,r19
10002fa8:	0023883a 	mov	r17,zero
10002fac:	1c3f840e 	bge	r3,r16,10002dc0 <__alt_data_end+0xf8002dc0>
10002fb0:	017fe034 	movhi	r5,65408
10002fb4:	297fffc4 	addi	r5,r5,-1
10002fb8:	80e1c83a 	sub	r16,r16,r3
10002fbc:	994a703a 	and	r5,r19,r5
10002fc0:	003f3006 	br	10002c84 <__alt_data_end+0xf8002c84>
10002fc4:	0009883a 	mov	r4,zero
10002fc8:	0005883a 	mov	r2,zero
10002fcc:	003f4506 	br	10002ce4 <__alt_data_end+0xf8002ce4>
10002fd0:	418cb03a 	or	r6,r8,r6
10002fd4:	300cc03a 	cmpne	r6,r6,zero
10002fd8:	0007883a 	mov	r3,zero
10002fdc:	003f6106 	br	10002d64 <__alt_data_end+0xf8002d64>
10002fe0:	2000921e 	bne	r4,zero,1000322c <__adddf3+0x624>
10002fe4:	80800044 	addi	r2,r16,1
10002fe8:	11c1ffcc 	andi	r7,r2,2047
10002fec:	01000044 	movi	r4,1
10002ff0:	21c0610e 	bge	r4,r7,10003178 <__adddf3+0x570>
10002ff4:	0101ffc4 	movi	r4,2047
10002ff8:	1100a326 	beq	r2,r4,10003288 <__adddf3+0x680>
10002ffc:	344d883a 	add	r6,r6,r17
10003000:	3463803a 	cmpltu	r17,r6,r17
10003004:	414b883a 	add	r5,r8,r5
10003008:	2c4b883a 	add	r5,r5,r17
1000300c:	282297fa 	slli	r17,r5,31
10003010:	300cd07a 	srli	r6,r6,1
10003014:	280ad07a 	srli	r5,r5,1
10003018:	1021883a 	mov	r16,r2
1000301c:	89a2b03a 	or	r17,r17,r6
10003020:	003f1806 	br	10002c84 <__alt_data_end+0xf8002c84>
10003024:	0081ffc4 	movi	r2,2047
10003028:	80bf411e 	bne	r16,r2,10002d30 <__alt_data_end+0xf8002d30>
1000302c:	003f1506 	br	10002c84 <__alt_data_end+0xf8002c84>
10003030:	80bff844 	addi	r2,r16,-31
10003034:	00c00804 	movi	r3,32
10003038:	9884d83a 	srl	r2,r19,r2
1000303c:	28c04a26 	beq	r5,r3,10003168 <__adddf3+0x560>
10003040:	00c00fc4 	movi	r3,63
10003044:	1c21c83a 	sub	r16,r3,r16
10003048:	9c26983a 	sll	r19,r19,r16
1000304c:	9c62b03a 	or	r17,r19,r17
10003050:	8822c03a 	cmpne	r17,r17,zero
10003054:	88a2b03a 	or	r17,r17,r2
10003058:	000b883a 	mov	r5,zero
1000305c:	0021883a 	mov	r16,zero
10003060:	003fb406 	br	10002f34 <__alt_data_end+0xf8002f34>
10003064:	18bff804 	addi	r2,r3,-32
10003068:	01000804 	movi	r4,32
1000306c:	4084d83a 	srl	r2,r8,r2
10003070:	19003f26 	beq	r3,r4,10003170 <__adddf3+0x568>
10003074:	01001004 	movi	r4,64
10003078:	20c7c83a 	sub	r3,r4,r3
1000307c:	40d0983a 	sll	r8,r8,r3
10003080:	418cb03a 	or	r6,r8,r6
10003084:	300cc03a 	cmpne	r6,r6,zero
10003088:	308cb03a 	or	r6,r6,r2
1000308c:	0007883a 	mov	r3,zero
10003090:	003f3406 	br	10002d64 <__alt_data_end+0xf8002d64>
10003094:	80002326 	beq	r16,zero,10003124 <__adddf3+0x51c>
10003098:	0101ffc4 	movi	r4,2047
1000309c:	11005e26 	beq	r2,r4,10003218 <__adddf3+0x610>
100030a0:	00c7c83a 	sub	r3,zero,r3
100030a4:	29402034 	orhi	r5,r5,128
100030a8:	01000e04 	movi	r4,56
100030ac:	20c07216 	blt	r4,r3,10003278 <__adddf3+0x670>
100030b0:	010007c4 	movi	r4,31
100030b4:	20c0ce16 	blt	r4,r3,100033f0 <__adddf3+0x7e8>
100030b8:	01000804 	movi	r4,32
100030bc:	20c9c83a 	sub	r4,r4,r3
100030c0:	2914983a 	sll	r10,r5,r4
100030c4:	88d2d83a 	srl	r9,r17,r3
100030c8:	8908983a 	sll	r4,r17,r4
100030cc:	28c6d83a 	srl	r3,r5,r3
100030d0:	5262b03a 	or	r17,r10,r9
100030d4:	2008c03a 	cmpne	r4,r4,zero
100030d8:	8922b03a 	or	r17,r17,r4
100030dc:	3463c83a 	sub	r17,r6,r17
100030e0:	40c7c83a 	sub	r3,r8,r3
100030e4:	344d803a 	cmpltu	r6,r6,r17
100030e8:	198bc83a 	sub	r5,r3,r6
100030ec:	1021883a 	mov	r16,r2
100030f0:	3825883a 	mov	r18,r7
100030f4:	003f2006 	br	10002d78 <__alt_data_end+0xf8002d78>
100030f8:	9886b03a 	or	r3,r19,r2
100030fc:	1800141e 	bne	r3,zero,10003150 <__adddf3+0x548>
10003100:	0007883a 	mov	r3,zero
10003104:	000b883a 	mov	r5,zero
10003108:	0023883a 	mov	r17,zero
1000310c:	0021883a 	mov	r16,zero
10003110:	003f3c06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003114:	418cb03a 	or	r6,r8,r6
10003118:	300cc03a 	cmpne	r6,r6,zero
1000311c:	0011883a 	mov	r8,zero
10003120:	003f5606 	br	10002e7c <__alt_data_end+0xf8002e7c>
10003124:	2c48b03a 	or	r4,r5,r17
10003128:	20003b26 	beq	r4,zero,10003218 <__adddf3+0x610>
1000312c:	00c6303a 	nor	r3,zero,r3
10003130:	1800371e 	bne	r3,zero,10003210 <__adddf3+0x608>
10003134:	3463c83a 	sub	r17,r6,r17
10003138:	414bc83a 	sub	r5,r8,r5
1000313c:	344d803a 	cmpltu	r6,r6,r17
10003140:	298bc83a 	sub	r5,r5,r6
10003144:	1021883a 	mov	r16,r2
10003148:	3825883a 	mov	r18,r7
1000314c:	003f0a06 	br	10002d78 <__alt_data_end+0xf8002d78>
10003150:	1023883a 	mov	r17,r2
10003154:	003f0d06 	br	10002d8c <__alt_data_end+0xf8002d8c>
10003158:	0007883a 	mov	r3,zero
1000315c:	000b883a 	mov	r5,zero
10003160:	0023883a 	mov	r17,zero
10003164:	003f2706 	br	10002e04 <__alt_data_end+0xf8002e04>
10003168:	0027883a 	mov	r19,zero
1000316c:	003fb706 	br	1000304c <__alt_data_end+0xf800304c>
10003170:	0011883a 	mov	r8,zero
10003174:	003fc206 	br	10003080 <__alt_data_end+0xf8003080>
10003178:	2c44b03a 	or	r2,r5,r17
1000317c:	8000871e 	bne	r16,zero,1000339c <__adddf3+0x794>
10003180:	1000b126 	beq	r2,zero,10003448 <__adddf3+0x840>
10003184:	4184b03a 	or	r2,r8,r6
10003188:	103ebe26 	beq	r2,zero,10002c84 <__alt_data_end+0xf8002c84>
1000318c:	3445883a 	add	r2,r6,r17
10003190:	1463803a 	cmpltu	r17,r2,r17
10003194:	414b883a 	add	r5,r8,r5
10003198:	2c4b883a 	add	r5,r5,r17
1000319c:	28c0202c 	andhi	r3,r5,128
100031a0:	1023883a 	mov	r17,r2
100031a4:	183f6326 	beq	r3,zero,10002f34 <__alt_data_end+0xf8002f34>
100031a8:	00bfe034 	movhi	r2,65408
100031ac:	10bfffc4 	addi	r2,r2,-1
100031b0:	2021883a 	mov	r16,r4
100031b4:	288a703a 	and	r5,r5,r2
100031b8:	003eb206 	br	10002c84 <__alt_data_end+0xf8002c84>
100031bc:	2c44b03a 	or	r2,r5,r17
100031c0:	8000251e 	bne	r16,zero,10003258 <__adddf3+0x650>
100031c4:	10004b1e 	bne	r2,zero,100032f4 <__adddf3+0x6ec>
100031c8:	4184b03a 	or	r2,r8,r6
100031cc:	103fe226 	beq	r2,zero,10003158 <__alt_data_end+0xf8003158>
100031d0:	400b883a 	mov	r5,r8
100031d4:	3023883a 	mov	r17,r6
100031d8:	3825883a 	mov	r18,r7
100031dc:	003ea906 	br	10002c84 <__alt_data_end+0xf8002c84>
100031e0:	20bff804 	addi	r2,r4,-32
100031e4:	01c00804 	movi	r7,32
100031e8:	4084d83a 	srl	r2,r8,r2
100031ec:	21c07e26 	beq	r4,r7,100033e8 <__adddf3+0x7e0>
100031f0:	01c01004 	movi	r7,64
100031f4:	3909c83a 	sub	r4,r7,r4
100031f8:	4110983a 	sll	r8,r8,r4
100031fc:	418cb03a 	or	r6,r8,r6
10003200:	300cc03a 	cmpne	r6,r6,zero
10003204:	308cb03a 	or	r6,r6,r2
10003208:	0011883a 	mov	r8,zero
1000320c:	003f1b06 	br	10002e7c <__alt_data_end+0xf8002e7c>
10003210:	0101ffc4 	movi	r4,2047
10003214:	113fa41e 	bne	r2,r4,100030a8 <__alt_data_end+0xf80030a8>
10003218:	400b883a 	mov	r5,r8
1000321c:	3023883a 	mov	r17,r6
10003220:	1021883a 	mov	r16,r2
10003224:	3825883a 	mov	r18,r7
10003228:	003e9606 	br	10002c84 <__alt_data_end+0xf8002c84>
1000322c:	80001a1e 	bne	r16,zero,10003298 <__adddf3+0x690>
10003230:	2c4eb03a 	or	r7,r5,r17
10003234:	38005526 	beq	r7,zero,1000338c <__adddf3+0x784>
10003238:	0108303a 	nor	r4,zero,r4
1000323c:	2000511e 	bne	r4,zero,10003384 <__adddf3+0x77c>
10003240:	89a3883a 	add	r17,r17,r6
10003244:	414b883a 	add	r5,r8,r5
10003248:	898d803a 	cmpltu	r6,r17,r6
1000324c:	298b883a 	add	r5,r5,r6
10003250:	1021883a 	mov	r16,r2
10003254:	003f0e06 	br	10002e90 <__alt_data_end+0xf8002e90>
10003258:	1000341e 	bne	r2,zero,1000332c <__adddf3+0x724>
1000325c:	4184b03a 	or	r2,r8,r6
10003260:	10006f26 	beq	r2,zero,10003420 <__adddf3+0x818>
10003264:	400b883a 	mov	r5,r8
10003268:	3023883a 	mov	r17,r6
1000326c:	3825883a 	mov	r18,r7
10003270:	0401ffc4 	movi	r16,2047
10003274:	003e8306 	br	10002c84 <__alt_data_end+0xf8002c84>
10003278:	2c62b03a 	or	r17,r5,r17
1000327c:	8822c03a 	cmpne	r17,r17,zero
10003280:	0007883a 	mov	r3,zero
10003284:	003f9506 	br	100030dc <__alt_data_end+0xf80030dc>
10003288:	1021883a 	mov	r16,r2
1000328c:	000b883a 	mov	r5,zero
10003290:	0023883a 	mov	r17,zero
10003294:	003edb06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003298:	01c1ffc4 	movi	r7,2047
1000329c:	11c03b26 	beq	r2,r7,1000338c <__adddf3+0x784>
100032a0:	0109c83a 	sub	r4,zero,r4
100032a4:	29402034 	orhi	r5,r5,128
100032a8:	01c00e04 	movi	r7,56
100032ac:	39006216 	blt	r7,r4,10003438 <__adddf3+0x830>
100032b0:	01c007c4 	movi	r7,31
100032b4:	39006b16 	blt	r7,r4,10003464 <__adddf3+0x85c>
100032b8:	01c00804 	movi	r7,32
100032bc:	390fc83a 	sub	r7,r7,r4
100032c0:	29d4983a 	sll	r10,r5,r7
100032c4:	8912d83a 	srl	r9,r17,r4
100032c8:	89ce983a 	sll	r7,r17,r7
100032cc:	2908d83a 	srl	r4,r5,r4
100032d0:	5262b03a 	or	r17,r10,r9
100032d4:	380ac03a 	cmpne	r5,r7,zero
100032d8:	8962b03a 	or	r17,r17,r5
100032dc:	89a3883a 	add	r17,r17,r6
100032e0:	2211883a 	add	r8,r4,r8
100032e4:	898d803a 	cmpltu	r6,r17,r6
100032e8:	418b883a 	add	r5,r8,r6
100032ec:	1021883a 	mov	r16,r2
100032f0:	003ee706 	br	10002e90 <__alt_data_end+0xf8002e90>
100032f4:	4184b03a 	or	r2,r8,r6
100032f8:	103e6226 	beq	r2,zero,10002c84 <__alt_data_end+0xf8002c84>
100032fc:	8987c83a 	sub	r3,r17,r6
10003300:	88c9803a 	cmpltu	r4,r17,r3
10003304:	2a05c83a 	sub	r2,r5,r8
10003308:	1105c83a 	sub	r2,r2,r4
1000330c:	1100202c 	andhi	r4,r2,128
10003310:	203f0426 	beq	r4,zero,10002f24 <__alt_data_end+0xf8002f24>
10003314:	3463c83a 	sub	r17,r6,r17
10003318:	414bc83a 	sub	r5,r8,r5
1000331c:	344d803a 	cmpltu	r6,r6,r17
10003320:	298bc83a 	sub	r5,r5,r6
10003324:	3825883a 	mov	r18,r7
10003328:	003e5606 	br	10002c84 <__alt_data_end+0xf8002c84>
1000332c:	4184b03a 	or	r2,r8,r6
10003330:	10002b26 	beq	r2,zero,100033e0 <__adddf3+0x7d8>
10003334:	2804d0fa 	srli	r2,r5,3
10003338:	8822d0fa 	srli	r17,r17,3
1000333c:	280a977a 	slli	r5,r5,29
10003340:	10c0022c 	andhi	r3,r2,8
10003344:	2c62b03a 	or	r17,r5,r17
10003348:	18000826 	beq	r3,zero,1000336c <__adddf3+0x764>
1000334c:	4008d0fa 	srli	r4,r8,3
10003350:	20c0022c 	andhi	r3,r4,8
10003354:	1800051e 	bne	r3,zero,1000336c <__adddf3+0x764>
10003358:	300cd0fa 	srli	r6,r6,3
1000335c:	4010977a 	slli	r8,r8,29
10003360:	2005883a 	mov	r2,r4
10003364:	3825883a 	mov	r18,r7
10003368:	41a2b03a 	or	r17,r8,r6
1000336c:	880ad77a 	srli	r5,r17,29
10003370:	100490fa 	slli	r2,r2,3
10003374:	882290fa 	slli	r17,r17,3
10003378:	0401ffc4 	movi	r16,2047
1000337c:	288ab03a 	or	r5,r5,r2
10003380:	003e4006 	br	10002c84 <__alt_data_end+0xf8002c84>
10003384:	01c1ffc4 	movi	r7,2047
10003388:	11ffc71e 	bne	r2,r7,100032a8 <__alt_data_end+0xf80032a8>
1000338c:	400b883a 	mov	r5,r8
10003390:	3023883a 	mov	r17,r6
10003394:	1021883a 	mov	r16,r2
10003398:	003e3a06 	br	10002c84 <__alt_data_end+0xf8002c84>
1000339c:	10002d26 	beq	r2,zero,10003454 <__adddf3+0x84c>
100033a0:	4184b03a 	or	r2,r8,r6
100033a4:	10000e26 	beq	r2,zero,100033e0 <__adddf3+0x7d8>
100033a8:	2804d0fa 	srli	r2,r5,3
100033ac:	8822d0fa 	srli	r17,r17,3
100033b0:	280a977a 	slli	r5,r5,29
100033b4:	10c0022c 	andhi	r3,r2,8
100033b8:	2c62b03a 	or	r17,r5,r17
100033bc:	183feb26 	beq	r3,zero,1000336c <__alt_data_end+0xf800336c>
100033c0:	4008d0fa 	srli	r4,r8,3
100033c4:	20c0022c 	andhi	r3,r4,8
100033c8:	183fe81e 	bne	r3,zero,1000336c <__alt_data_end+0xf800336c>
100033cc:	300cd0fa 	srli	r6,r6,3
100033d0:	4010977a 	slli	r8,r8,29
100033d4:	2005883a 	mov	r2,r4
100033d8:	41a2b03a 	or	r17,r8,r6
100033dc:	003fe306 	br	1000336c <__alt_data_end+0xf800336c>
100033e0:	0401ffc4 	movi	r16,2047
100033e4:	003e2706 	br	10002c84 <__alt_data_end+0xf8002c84>
100033e8:	0011883a 	mov	r8,zero
100033ec:	003f8306 	br	100031fc <__alt_data_end+0xf80031fc>
100033f0:	193ff804 	addi	r4,r3,-32
100033f4:	02400804 	movi	r9,32
100033f8:	2908d83a 	srl	r4,r5,r4
100033fc:	1a402526 	beq	r3,r9,10003494 <__adddf3+0x88c>
10003400:	02401004 	movi	r9,64
10003404:	48c7c83a 	sub	r3,r9,r3
10003408:	28ca983a 	sll	r5,r5,r3
1000340c:	2c62b03a 	or	r17,r5,r17
10003410:	8822c03a 	cmpne	r17,r17,zero
10003414:	8922b03a 	or	r17,r17,r4
10003418:	0007883a 	mov	r3,zero
1000341c:	003f2f06 	br	100030dc <__alt_data_end+0xf80030dc>
10003420:	01402034 	movhi	r5,128
10003424:	0007883a 	mov	r3,zero
10003428:	297fffc4 	addi	r5,r5,-1
1000342c:	047ffe04 	movi	r17,-8
10003430:	0401ffc4 	movi	r16,2047
10003434:	003e7306 	br	10002e04 <__alt_data_end+0xf8002e04>
10003438:	2c62b03a 	or	r17,r5,r17
1000343c:	8822c03a 	cmpne	r17,r17,zero
10003440:	0009883a 	mov	r4,zero
10003444:	003fa506 	br	100032dc <__alt_data_end+0xf80032dc>
10003448:	400b883a 	mov	r5,r8
1000344c:	3023883a 	mov	r17,r6
10003450:	003e0c06 	br	10002c84 <__alt_data_end+0xf8002c84>
10003454:	400b883a 	mov	r5,r8
10003458:	3023883a 	mov	r17,r6
1000345c:	0401ffc4 	movi	r16,2047
10003460:	003e0806 	br	10002c84 <__alt_data_end+0xf8002c84>
10003464:	21fff804 	addi	r7,r4,-32
10003468:	02400804 	movi	r9,32
1000346c:	29ced83a 	srl	r7,r5,r7
10003470:	22400a26 	beq	r4,r9,1000349c <__adddf3+0x894>
10003474:	02401004 	movi	r9,64
10003478:	4909c83a 	sub	r4,r9,r4
1000347c:	290a983a 	sll	r5,r5,r4
10003480:	2c62b03a 	or	r17,r5,r17
10003484:	8822c03a 	cmpne	r17,r17,zero
10003488:	89e2b03a 	or	r17,r17,r7
1000348c:	0009883a 	mov	r4,zero
10003490:	003f9206 	br	100032dc <__alt_data_end+0xf80032dc>
10003494:	000b883a 	mov	r5,zero
10003498:	003fdc06 	br	1000340c <__alt_data_end+0xf800340c>
1000349c:	000b883a 	mov	r5,zero
100034a0:	003ff706 	br	10003480 <__alt_data_end+0xf8003480>

100034a4 <__subdf3>:
100034a4:	00c00434 	movhi	r3,16
100034a8:	18ffffc4 	addi	r3,r3,-1
100034ac:	defffb04 	addi	sp,sp,-20
100034b0:	28d2703a 	and	r9,r5,r3
100034b4:	3814d53a 	srli	r10,r7,20
100034b8:	38c6703a 	and	r3,r7,r3
100034bc:	3004d77a 	srli	r2,r6,29
100034c0:	dc800215 	stw	r18,8(sp)
100034c4:	dc000015 	stw	r16,0(sp)
100034c8:	2824d7fa 	srli	r18,r5,31
100034cc:	2820d53a 	srli	r16,r5,20
100034d0:	481290fa 	slli	r9,r9,3
100034d4:	200ad77a 	srli	r5,r4,29
100034d8:	180690fa 	slli	r3,r3,3
100034dc:	dc400115 	stw	r17,4(sp)
100034e0:	dfc00415 	stw	ra,16(sp)
100034e4:	202290fa 	slli	r17,r4,3
100034e8:	dcc00315 	stw	r19,12(sp)
100034ec:	5281ffcc 	andi	r10,r10,2047
100034f0:	0101ffc4 	movi	r4,2047
100034f4:	9011883a 	mov	r8,r18
100034f8:	8401ffcc 	andi	r16,r16,2047
100034fc:	94803fcc 	andi	r18,r18,255
10003500:	494ab03a 	or	r5,r9,r5
10003504:	380ed7fa 	srli	r7,r7,31
10003508:	1886b03a 	or	r3,r3,r2
1000350c:	300c90fa 	slli	r6,r6,3
10003510:	51009026 	beq	r10,r4,10003754 <__subdf3+0x2b0>
10003514:	39c0005c 	xori	r7,r7,1
10003518:	8285c83a 	sub	r2,r16,r10
1000351c:	91c06f26 	beq	r18,r7,100036dc <__subdf3+0x238>
10003520:	0080b10e 	bge	zero,r2,100037e8 <__subdf3+0x344>
10003524:	50002a1e 	bne	r10,zero,100035d0 <__subdf3+0x12c>
10003528:	1988b03a 	or	r4,r3,r6
1000352c:	2000941e 	bne	r4,zero,10003780 <__subdf3+0x2dc>
10003530:	888001cc 	andi	r2,r17,7
10003534:	10005b26 	beq	r2,zero,100036a4 <__subdf3+0x200>
10003538:	88c003cc 	andi	r3,r17,15
1000353c:	00800104 	movi	r2,4
10003540:	18805826 	beq	r3,r2,100036a4 <__subdf3+0x200>
10003544:	88c00104 	addi	r3,r17,4
10003548:	1c63803a 	cmpltu	r17,r3,r17
1000354c:	2c4b883a 	add	r5,r5,r17
10003550:	2880202c 	andhi	r2,r5,128
10003554:	9200004c 	andi	r8,r18,1
10003558:	1823883a 	mov	r17,r3
1000355c:	10005426 	beq	r2,zero,100036b0 <__subdf3+0x20c>
10003560:	84000044 	addi	r16,r16,1
10003564:	0081ffc4 	movi	r2,2047
10003568:	8080bf26 	beq	r16,r2,10003868 <__subdf3+0x3c4>
1000356c:	013fe034 	movhi	r4,65408
10003570:	213fffc4 	addi	r4,r4,-1
10003574:	290a703a 	and	r5,r5,r4
10003578:	2804977a 	slli	r2,r5,29
1000357c:	280a927a 	slli	r5,r5,9
10003580:	8822d0fa 	srli	r17,r17,3
10003584:	8401ffcc 	andi	r16,r16,2047
10003588:	2808d33a 	srli	r4,r5,12
1000358c:	1444b03a 	or	r2,r2,r17
10003590:	8401ffcc 	andi	r16,r16,2047
10003594:	800a953a 	slli	r5,r16,20
10003598:	40c03fcc 	andi	r3,r8,255
1000359c:	04000434 	movhi	r16,16
100035a0:	180697fa 	slli	r3,r3,31
100035a4:	843fffc4 	addi	r16,r16,-1
100035a8:	2420703a 	and	r16,r4,r16
100035ac:	8160b03a 	or	r16,r16,r5
100035b0:	80c6b03a 	or	r3,r16,r3
100035b4:	dfc00417 	ldw	ra,16(sp)
100035b8:	dcc00317 	ldw	r19,12(sp)
100035bc:	dc800217 	ldw	r18,8(sp)
100035c0:	dc400117 	ldw	r17,4(sp)
100035c4:	dc000017 	ldw	r16,0(sp)
100035c8:	dec00504 	addi	sp,sp,20
100035cc:	f800283a 	ret
100035d0:	0101ffc4 	movi	r4,2047
100035d4:	813fd626 	beq	r16,r4,10003530 <__alt_data_end+0xf8003530>
100035d8:	18c02034 	orhi	r3,r3,128
100035dc:	01000e04 	movi	r4,56
100035e0:	2080a416 	blt	r4,r2,10003874 <__subdf3+0x3d0>
100035e4:	010007c4 	movi	r4,31
100035e8:	2080c716 	blt	r4,r2,10003908 <__subdf3+0x464>
100035ec:	01000804 	movi	r4,32
100035f0:	2089c83a 	sub	r4,r4,r2
100035f4:	1910983a 	sll	r8,r3,r4
100035f8:	308ed83a 	srl	r7,r6,r2
100035fc:	3108983a 	sll	r4,r6,r4
10003600:	1884d83a 	srl	r2,r3,r2
10003604:	41ccb03a 	or	r6,r8,r7
10003608:	2008c03a 	cmpne	r4,r4,zero
1000360c:	310cb03a 	or	r6,r6,r4
10003610:	898dc83a 	sub	r6,r17,r6
10003614:	89a3803a 	cmpltu	r17,r17,r6
10003618:	288bc83a 	sub	r5,r5,r2
1000361c:	2c4bc83a 	sub	r5,r5,r17
10003620:	3023883a 	mov	r17,r6
10003624:	2880202c 	andhi	r2,r5,128
10003628:	10006b26 	beq	r2,zero,100037d8 <__subdf3+0x334>
1000362c:	04c02034 	movhi	r19,128
10003630:	9cffffc4 	addi	r19,r19,-1
10003634:	2ce6703a 	and	r19,r5,r19
10003638:	98007c26 	beq	r19,zero,1000382c <__subdf3+0x388>
1000363c:	9809883a 	mov	r4,r19
10003640:	0003ecc0 	call	10003ecc <__clzsi2>
10003644:	10fffe04 	addi	r3,r2,-8
10003648:	010007c4 	movi	r4,31
1000364c:	20c07d16 	blt	r4,r3,10003844 <__subdf3+0x3a0>
10003650:	01400a04 	movi	r5,40
10003654:	2885c83a 	sub	r2,r5,r2
10003658:	888ad83a 	srl	r5,r17,r2
1000365c:	98e6983a 	sll	r19,r19,r3
10003660:	88e2983a 	sll	r17,r17,r3
10003664:	2ce6b03a 	or	r19,r5,r19
10003668:	1c007a16 	blt	r3,r16,10003854 <__subdf3+0x3b0>
1000366c:	1c21c83a 	sub	r16,r3,r16
10003670:	81400044 	addi	r5,r16,1
10003674:	00c007c4 	movi	r3,31
10003678:	19409616 	blt	r3,r5,100038d4 <__subdf3+0x430>
1000367c:	1c21c83a 	sub	r16,r3,r16
10003680:	8c08983a 	sll	r4,r17,r16
10003684:	8946d83a 	srl	r3,r17,r5
10003688:	9c20983a 	sll	r16,r19,r16
1000368c:	2008c03a 	cmpne	r4,r4,zero
10003690:	994ad83a 	srl	r5,r19,r5
10003694:	1c06b03a 	or	r3,r3,r16
10003698:	1922b03a 	or	r17,r3,r4
1000369c:	0021883a 	mov	r16,zero
100036a0:	003fa306 	br	10003530 <__alt_data_end+0xf8003530>
100036a4:	2880202c 	andhi	r2,r5,128
100036a8:	9200004c 	andi	r8,r18,1
100036ac:	103fac1e 	bne	r2,zero,10003560 <__alt_data_end+0xf8003560>
100036b0:	2804977a 	slli	r2,r5,29
100036b4:	8822d0fa 	srli	r17,r17,3
100036b8:	00c1ffc4 	movi	r3,2047
100036bc:	280ad0fa 	srli	r5,r5,3
100036c0:	1444b03a 	or	r2,r2,r17
100036c4:	80c02726 	beq	r16,r3,10003764 <__subdf3+0x2c0>
100036c8:	01000434 	movhi	r4,16
100036cc:	213fffc4 	addi	r4,r4,-1
100036d0:	80e0703a 	and	r16,r16,r3
100036d4:	2908703a 	and	r4,r5,r4
100036d8:	003fad06 	br	10003590 <__alt_data_end+0xf8003590>
100036dc:	0080690e 	bge	zero,r2,10003884 <__subdf3+0x3e0>
100036e0:	50002f26 	beq	r10,zero,100037a0 <__subdf3+0x2fc>
100036e4:	0101ffc4 	movi	r4,2047
100036e8:	813f9126 	beq	r16,r4,10003530 <__alt_data_end+0xf8003530>
100036ec:	18c02034 	orhi	r3,r3,128
100036f0:	01000e04 	movi	r4,56
100036f4:	2080b00e 	bge	r4,r2,100039b8 <__subdf3+0x514>
100036f8:	198cb03a 	or	r6,r3,r6
100036fc:	300ec03a 	cmpne	r7,r6,zero
10003700:	0005883a 	mov	r2,zero
10003704:	3c4f883a 	add	r7,r7,r17
10003708:	3c63803a 	cmpltu	r17,r7,r17
1000370c:	114b883a 	add	r5,r2,r5
10003710:	2c4b883a 	add	r5,r5,r17
10003714:	3823883a 	mov	r17,r7
10003718:	2880202c 	andhi	r2,r5,128
1000371c:	10002e26 	beq	r2,zero,100037d8 <__subdf3+0x334>
10003720:	84000044 	addi	r16,r16,1
10003724:	0081ffc4 	movi	r2,2047
10003728:	8080de26 	beq	r16,r2,10003aa4 <__subdf3+0x600>
1000372c:	00bfe034 	movhi	r2,65408
10003730:	10bfffc4 	addi	r2,r2,-1
10003734:	288a703a 	and	r5,r5,r2
10003738:	880cd07a 	srli	r6,r17,1
1000373c:	280897fa 	slli	r4,r5,31
10003740:	88c0004c 	andi	r3,r17,1
10003744:	30e2b03a 	or	r17,r6,r3
10003748:	280ad07a 	srli	r5,r5,1
1000374c:	8922b03a 	or	r17,r17,r4
10003750:	003f7706 	br	10003530 <__alt_data_end+0xf8003530>
10003754:	1984b03a 	or	r2,r3,r6
10003758:	103f6e26 	beq	r2,zero,10003514 <__alt_data_end+0xf8003514>
1000375c:	39c03fcc 	andi	r7,r7,255
10003760:	003f6d06 	br	10003518 <__alt_data_end+0xf8003518>
10003764:	1146b03a 	or	r3,r2,r5
10003768:	18003f26 	beq	r3,zero,10003868 <__subdf3+0x3c4>
1000376c:	00c00434 	movhi	r3,16
10003770:	29000234 	orhi	r4,r5,8
10003774:	18ffffc4 	addi	r3,r3,-1
10003778:	20c8703a 	and	r4,r4,r3
1000377c:	003f8406 	br	10003590 <__alt_data_end+0xf8003590>
10003780:	10bfffc4 	addi	r2,r2,-1
10003784:	1000501e 	bne	r2,zero,100038c8 <__subdf3+0x424>
10003788:	898fc83a 	sub	r7,r17,r6
1000378c:	89e3803a 	cmpltu	r17,r17,r7
10003790:	28cbc83a 	sub	r5,r5,r3
10003794:	2c4bc83a 	sub	r5,r5,r17
10003798:	3823883a 	mov	r17,r7
1000379c:	003fa106 	br	10003624 <__alt_data_end+0xf8003624>
100037a0:	1988b03a 	or	r4,r3,r6
100037a4:	203f6226 	beq	r4,zero,10003530 <__alt_data_end+0xf8003530>
100037a8:	10bfffc4 	addi	r2,r2,-1
100037ac:	10009b1e 	bne	r2,zero,10003a1c <__subdf3+0x578>
100037b0:	344d883a 	add	r6,r6,r17
100037b4:	3463803a 	cmpltu	r17,r6,r17
100037b8:	194b883a 	add	r5,r3,r5
100037bc:	2c4b883a 	add	r5,r5,r17
100037c0:	3023883a 	mov	r17,r6
100037c4:	003fd406 	br	10003718 <__alt_data_end+0xf8003718>
100037c8:	1106b03a 	or	r3,r2,r4
100037cc:	1800b426 	beq	r3,zero,10003aa0 <__subdf3+0x5fc>
100037d0:	100b883a 	mov	r5,r2
100037d4:	2023883a 	mov	r17,r4
100037d8:	888001cc 	andi	r2,r17,7
100037dc:	103f561e 	bne	r2,zero,10003538 <__alt_data_end+0xf8003538>
100037e0:	9200004c 	andi	r8,r18,1
100037e4:	003fb206 	br	100036b0 <__alt_data_end+0xf80036b0>
100037e8:	1000531e 	bne	r2,zero,10003938 <__subdf3+0x494>
100037ec:	80800044 	addi	r2,r16,1
100037f0:	1081ffcc 	andi	r2,r2,2047
100037f4:	01000044 	movi	r4,1
100037f8:	2080a00e 	bge	r4,r2,10003a7c <__subdf3+0x5d8>
100037fc:	8985c83a 	sub	r2,r17,r6
10003800:	8889803a 	cmpltu	r4,r17,r2
10003804:	28e7c83a 	sub	r19,r5,r3
10003808:	9927c83a 	sub	r19,r19,r4
1000380c:	9900202c 	andhi	r4,r19,128
10003810:	20006226 	beq	r4,zero,1000399c <__subdf3+0x4f8>
10003814:	3463c83a 	sub	r17,r6,r17
10003818:	194bc83a 	sub	r5,r3,r5
1000381c:	344d803a 	cmpltu	r6,r6,r17
10003820:	29a7c83a 	sub	r19,r5,r6
10003824:	3825883a 	mov	r18,r7
10003828:	983f841e 	bne	r19,zero,1000363c <__alt_data_end+0xf800363c>
1000382c:	8809883a 	mov	r4,r17
10003830:	0003ecc0 	call	10003ecc <__clzsi2>
10003834:	10800804 	addi	r2,r2,32
10003838:	10fffe04 	addi	r3,r2,-8
1000383c:	010007c4 	movi	r4,31
10003840:	20ff830e 	bge	r4,r3,10003650 <__alt_data_end+0xf8003650>
10003844:	14fff604 	addi	r19,r2,-40
10003848:	8ce6983a 	sll	r19,r17,r19
1000384c:	0023883a 	mov	r17,zero
10003850:	1c3f860e 	bge	r3,r16,1000366c <__alt_data_end+0xf800366c>
10003854:	017fe034 	movhi	r5,65408
10003858:	297fffc4 	addi	r5,r5,-1
1000385c:	80e1c83a 	sub	r16,r16,r3
10003860:	994a703a 	and	r5,r19,r5
10003864:	003f3206 	br	10003530 <__alt_data_end+0xf8003530>
10003868:	0009883a 	mov	r4,zero
1000386c:	0005883a 	mov	r2,zero
10003870:	003f4706 	br	10003590 <__alt_data_end+0xf8003590>
10003874:	198cb03a 	or	r6,r3,r6
10003878:	300cc03a 	cmpne	r6,r6,zero
1000387c:	0005883a 	mov	r2,zero
10003880:	003f6306 	br	10003610 <__alt_data_end+0xf8003610>
10003884:	10009d1e 	bne	r2,zero,10003afc <__subdf3+0x658>
10003888:	81c00044 	addi	r7,r16,1
1000388c:	3881ffcc 	andi	r2,r7,2047
10003890:	02400044 	movi	r9,1
10003894:	4880680e 	bge	r9,r2,10003a38 <__subdf3+0x594>
10003898:	0081ffc4 	movi	r2,2047
1000389c:	3880ae26 	beq	r7,r2,10003b58 <__subdf3+0x6b4>
100038a0:	344d883a 	add	r6,r6,r17
100038a4:	3463803a 	cmpltu	r17,r6,r17
100038a8:	194b883a 	add	r5,r3,r5
100038ac:	2c4b883a 	add	r5,r5,r17
100038b0:	282297fa 	slli	r17,r5,31
100038b4:	300cd07a 	srli	r6,r6,1
100038b8:	280ad07a 	srli	r5,r5,1
100038bc:	3821883a 	mov	r16,r7
100038c0:	89a2b03a 	or	r17,r17,r6
100038c4:	003f1a06 	br	10003530 <__alt_data_end+0xf8003530>
100038c8:	0101ffc4 	movi	r4,2047
100038cc:	813f431e 	bne	r16,r4,100035dc <__alt_data_end+0xf80035dc>
100038d0:	003f1706 	br	10003530 <__alt_data_end+0xf8003530>
100038d4:	80bff844 	addi	r2,r16,-31
100038d8:	00c00804 	movi	r3,32
100038dc:	9884d83a 	srl	r2,r19,r2
100038e0:	28c05126 	beq	r5,r3,10003a28 <__subdf3+0x584>
100038e4:	00c00fc4 	movi	r3,63
100038e8:	1c21c83a 	sub	r16,r3,r16
100038ec:	9c26983a 	sll	r19,r19,r16
100038f0:	9c62b03a 	or	r17,r19,r17
100038f4:	8822c03a 	cmpne	r17,r17,zero
100038f8:	88a2b03a 	or	r17,r17,r2
100038fc:	000b883a 	mov	r5,zero
10003900:	0021883a 	mov	r16,zero
10003904:	003fb406 	br	100037d8 <__alt_data_end+0xf80037d8>
10003908:	113ff804 	addi	r4,r2,-32
1000390c:	01c00804 	movi	r7,32
10003910:	1908d83a 	srl	r4,r3,r4
10003914:	11c04626 	beq	r2,r7,10003a30 <__subdf3+0x58c>
10003918:	01c01004 	movi	r7,64
1000391c:	3885c83a 	sub	r2,r7,r2
10003920:	1884983a 	sll	r2,r3,r2
10003924:	118cb03a 	or	r6,r2,r6
10003928:	300cc03a 	cmpne	r6,r6,zero
1000392c:	310cb03a 	or	r6,r6,r4
10003930:	0005883a 	mov	r2,zero
10003934:	003f3606 	br	10003610 <__alt_data_end+0xf8003610>
10003938:	80002b26 	beq	r16,zero,100039e8 <__subdf3+0x544>
1000393c:	0101ffc4 	movi	r4,2047
10003940:	51006926 	beq	r10,r4,10003ae8 <__subdf3+0x644>
10003944:	0085c83a 	sub	r2,zero,r2
10003948:	29402034 	orhi	r5,r5,128
1000394c:	01000e04 	movi	r4,56
10003950:	20807d16 	blt	r4,r2,10003b48 <__subdf3+0x6a4>
10003954:	010007c4 	movi	r4,31
10003958:	2080d916 	blt	r4,r2,10003cc0 <__subdf3+0x81c>
1000395c:	01000804 	movi	r4,32
10003960:	2089c83a 	sub	r4,r4,r2
10003964:	2912983a 	sll	r9,r5,r4
10003968:	8890d83a 	srl	r8,r17,r2
1000396c:	8908983a 	sll	r4,r17,r4
10003970:	2884d83a 	srl	r2,r5,r2
10003974:	4a22b03a 	or	r17,r9,r8
10003978:	2008c03a 	cmpne	r4,r4,zero
1000397c:	8922b03a 	or	r17,r17,r4
10003980:	3463c83a 	sub	r17,r6,r17
10003984:	1885c83a 	sub	r2,r3,r2
10003988:	344d803a 	cmpltu	r6,r6,r17
1000398c:	118bc83a 	sub	r5,r2,r6
10003990:	5021883a 	mov	r16,r10
10003994:	3825883a 	mov	r18,r7
10003998:	003f2206 	br	10003624 <__alt_data_end+0xf8003624>
1000399c:	9886b03a 	or	r3,r19,r2
100039a0:	18001c1e 	bne	r3,zero,10003a14 <__subdf3+0x570>
100039a4:	0011883a 	mov	r8,zero
100039a8:	000b883a 	mov	r5,zero
100039ac:	0023883a 	mov	r17,zero
100039b0:	0021883a 	mov	r16,zero
100039b4:	003f3e06 	br	100036b0 <__alt_data_end+0xf80036b0>
100039b8:	010007c4 	movi	r4,31
100039bc:	20803c16 	blt	r4,r2,10003ab0 <__subdf3+0x60c>
100039c0:	01000804 	movi	r4,32
100039c4:	2089c83a 	sub	r4,r4,r2
100039c8:	1912983a 	sll	r9,r3,r4
100039cc:	308ed83a 	srl	r7,r6,r2
100039d0:	3108983a 	sll	r4,r6,r4
100039d4:	1884d83a 	srl	r2,r3,r2
100039d8:	49ceb03a 	or	r7,r9,r7
100039dc:	2008c03a 	cmpne	r4,r4,zero
100039e0:	390eb03a 	or	r7,r7,r4
100039e4:	003f4706 	br	10003704 <__alt_data_end+0xf8003704>
100039e8:	2c48b03a 	or	r4,r5,r17
100039ec:	20003e26 	beq	r4,zero,10003ae8 <__subdf3+0x644>
100039f0:	0084303a 	nor	r2,zero,r2
100039f4:	10003a1e 	bne	r2,zero,10003ae0 <__subdf3+0x63c>
100039f8:	3463c83a 	sub	r17,r6,r17
100039fc:	194bc83a 	sub	r5,r3,r5
10003a00:	344d803a 	cmpltu	r6,r6,r17
10003a04:	298bc83a 	sub	r5,r5,r6
10003a08:	5021883a 	mov	r16,r10
10003a0c:	3825883a 	mov	r18,r7
10003a10:	003f0406 	br	10003624 <__alt_data_end+0xf8003624>
10003a14:	1023883a 	mov	r17,r2
10003a18:	003f0706 	br	10003638 <__alt_data_end+0xf8003638>
10003a1c:	0101ffc4 	movi	r4,2047
10003a20:	813f331e 	bne	r16,r4,100036f0 <__alt_data_end+0xf80036f0>
10003a24:	003ec206 	br	10003530 <__alt_data_end+0xf8003530>
10003a28:	0027883a 	mov	r19,zero
10003a2c:	003fb006 	br	100038f0 <__alt_data_end+0xf80038f0>
10003a30:	0005883a 	mov	r2,zero
10003a34:	003fbb06 	br	10003924 <__alt_data_end+0xf8003924>
10003a38:	2c44b03a 	or	r2,r5,r17
10003a3c:	80008b1e 	bne	r16,zero,10003c6c <__subdf3+0x7c8>
10003a40:	1000b526 	beq	r2,zero,10003d18 <__subdf3+0x874>
10003a44:	1984b03a 	or	r2,r3,r6
10003a48:	103eb926 	beq	r2,zero,10003530 <__alt_data_end+0xf8003530>
10003a4c:	3449883a 	add	r4,r6,r17
10003a50:	2463803a 	cmpltu	r17,r4,r17
10003a54:	194b883a 	add	r5,r3,r5
10003a58:	2c4b883a 	add	r5,r5,r17
10003a5c:	2880202c 	andhi	r2,r5,128
10003a60:	2023883a 	mov	r17,r4
10003a64:	103f5c26 	beq	r2,zero,100037d8 <__alt_data_end+0xf80037d8>
10003a68:	00bfe034 	movhi	r2,65408
10003a6c:	10bfffc4 	addi	r2,r2,-1
10003a70:	4821883a 	mov	r16,r9
10003a74:	288a703a 	and	r5,r5,r2
10003a78:	003ead06 	br	10003530 <__alt_data_end+0xf8003530>
10003a7c:	2c44b03a 	or	r2,r5,r17
10003a80:	8000291e 	bne	r16,zero,10003b28 <__subdf3+0x684>
10003a84:	10004f1e 	bne	r2,zero,10003bc4 <__subdf3+0x720>
10003a88:	1984b03a 	or	r2,r3,r6
10003a8c:	10000426 	beq	r2,zero,10003aa0 <__subdf3+0x5fc>
10003a90:	180b883a 	mov	r5,r3
10003a94:	3023883a 	mov	r17,r6
10003a98:	3825883a 	mov	r18,r7
10003a9c:	003ea406 	br	10003530 <__alt_data_end+0xf8003530>
10003aa0:	0011883a 	mov	r8,zero
10003aa4:	000b883a 	mov	r5,zero
10003aa8:	0023883a 	mov	r17,zero
10003aac:	003f0006 	br	100036b0 <__alt_data_end+0xf80036b0>
10003ab0:	11fff804 	addi	r7,r2,-32
10003ab4:	19c8d83a 	srl	r4,r3,r7
10003ab8:	01c00804 	movi	r7,32
10003abc:	11c07e26 	beq	r2,r7,10003cb8 <__subdf3+0x814>
10003ac0:	01c01004 	movi	r7,64
10003ac4:	3885c83a 	sub	r2,r7,r2
10003ac8:	1884983a 	sll	r2,r3,r2
10003acc:	118cb03a 	or	r6,r2,r6
10003ad0:	300ec03a 	cmpne	r7,r6,zero
10003ad4:	390eb03a 	or	r7,r7,r4
10003ad8:	0005883a 	mov	r2,zero
10003adc:	003f0906 	br	10003704 <__alt_data_end+0xf8003704>
10003ae0:	0101ffc4 	movi	r4,2047
10003ae4:	513f991e 	bne	r10,r4,1000394c <__alt_data_end+0xf800394c>
10003ae8:	180b883a 	mov	r5,r3
10003aec:	3023883a 	mov	r17,r6
10003af0:	5021883a 	mov	r16,r10
10003af4:	3825883a 	mov	r18,r7
10003af8:	003e8d06 	br	10003530 <__alt_data_end+0xf8003530>
10003afc:	80001a1e 	bne	r16,zero,10003b68 <__subdf3+0x6c4>
10003b00:	2c48b03a 	or	r4,r5,r17
10003b04:	20005526 	beq	r4,zero,10003c5c <__subdf3+0x7b8>
10003b08:	0084303a 	nor	r2,zero,r2
10003b0c:	1000511e 	bne	r2,zero,10003c54 <__subdf3+0x7b0>
10003b10:	89a3883a 	add	r17,r17,r6
10003b14:	194b883a 	add	r5,r3,r5
10003b18:	898d803a 	cmpltu	r6,r17,r6
10003b1c:	298b883a 	add	r5,r5,r6
10003b20:	5021883a 	mov	r16,r10
10003b24:	003efc06 	br	10003718 <__alt_data_end+0xf8003718>
10003b28:	1000341e 	bne	r2,zero,10003bfc <__subdf3+0x758>
10003b2c:	1984b03a 	or	r2,r3,r6
10003b30:	10006f26 	beq	r2,zero,10003cf0 <__subdf3+0x84c>
10003b34:	180b883a 	mov	r5,r3
10003b38:	3023883a 	mov	r17,r6
10003b3c:	3825883a 	mov	r18,r7
10003b40:	0401ffc4 	movi	r16,2047
10003b44:	003e7a06 	br	10003530 <__alt_data_end+0xf8003530>
10003b48:	2c62b03a 	or	r17,r5,r17
10003b4c:	8822c03a 	cmpne	r17,r17,zero
10003b50:	0005883a 	mov	r2,zero
10003b54:	003f8a06 	br	10003980 <__alt_data_end+0xf8003980>
10003b58:	3821883a 	mov	r16,r7
10003b5c:	000b883a 	mov	r5,zero
10003b60:	0023883a 	mov	r17,zero
10003b64:	003ed206 	br	100036b0 <__alt_data_end+0xf80036b0>
10003b68:	0101ffc4 	movi	r4,2047
10003b6c:	51003b26 	beq	r10,r4,10003c5c <__subdf3+0x7b8>
10003b70:	0085c83a 	sub	r2,zero,r2
10003b74:	29402034 	orhi	r5,r5,128
10003b78:	01000e04 	movi	r4,56
10003b7c:	20806216 	blt	r4,r2,10003d08 <__subdf3+0x864>
10003b80:	010007c4 	movi	r4,31
10003b84:	20806b16 	blt	r4,r2,10003d34 <__subdf3+0x890>
10003b88:	01000804 	movi	r4,32
10003b8c:	2089c83a 	sub	r4,r4,r2
10003b90:	2912983a 	sll	r9,r5,r4
10003b94:	888ed83a 	srl	r7,r17,r2
10003b98:	8908983a 	sll	r4,r17,r4
10003b9c:	2884d83a 	srl	r2,r5,r2
10003ba0:	49e2b03a 	or	r17,r9,r7
10003ba4:	2008c03a 	cmpne	r4,r4,zero
10003ba8:	8922b03a 	or	r17,r17,r4
10003bac:	89a3883a 	add	r17,r17,r6
10003bb0:	10c5883a 	add	r2,r2,r3
10003bb4:	898d803a 	cmpltu	r6,r17,r6
10003bb8:	118b883a 	add	r5,r2,r6
10003bbc:	5021883a 	mov	r16,r10
10003bc0:	003ed506 	br	10003718 <__alt_data_end+0xf8003718>
10003bc4:	1984b03a 	or	r2,r3,r6
10003bc8:	103e5926 	beq	r2,zero,10003530 <__alt_data_end+0xf8003530>
10003bcc:	8989c83a 	sub	r4,r17,r6
10003bd0:	8911803a 	cmpltu	r8,r17,r4
10003bd4:	28c5c83a 	sub	r2,r5,r3
10003bd8:	1205c83a 	sub	r2,r2,r8
10003bdc:	1200202c 	andhi	r8,r2,128
10003be0:	403ef926 	beq	r8,zero,100037c8 <__alt_data_end+0xf80037c8>
10003be4:	3463c83a 	sub	r17,r6,r17
10003be8:	194bc83a 	sub	r5,r3,r5
10003bec:	344d803a 	cmpltu	r6,r6,r17
10003bf0:	298bc83a 	sub	r5,r5,r6
10003bf4:	3825883a 	mov	r18,r7
10003bf8:	003e4d06 	br	10003530 <__alt_data_end+0xf8003530>
10003bfc:	1984b03a 	or	r2,r3,r6
10003c00:	10002b26 	beq	r2,zero,10003cb0 <__subdf3+0x80c>
10003c04:	2808d0fa 	srli	r4,r5,3
10003c08:	8822d0fa 	srli	r17,r17,3
10003c0c:	280a977a 	slli	r5,r5,29
10003c10:	2080022c 	andhi	r2,r4,8
10003c14:	2c62b03a 	or	r17,r5,r17
10003c18:	10000826 	beq	r2,zero,10003c3c <__subdf3+0x798>
10003c1c:	1810d0fa 	srli	r8,r3,3
10003c20:	4080022c 	andhi	r2,r8,8
10003c24:	1000051e 	bne	r2,zero,10003c3c <__subdf3+0x798>
10003c28:	300cd0fa 	srli	r6,r6,3
10003c2c:	1804977a 	slli	r2,r3,29
10003c30:	4009883a 	mov	r4,r8
10003c34:	3825883a 	mov	r18,r7
10003c38:	11a2b03a 	or	r17,r2,r6
10003c3c:	880ad77a 	srli	r5,r17,29
10003c40:	200890fa 	slli	r4,r4,3
10003c44:	882290fa 	slli	r17,r17,3
10003c48:	0401ffc4 	movi	r16,2047
10003c4c:	290ab03a 	or	r5,r5,r4
10003c50:	003e3706 	br	10003530 <__alt_data_end+0xf8003530>
10003c54:	0101ffc4 	movi	r4,2047
10003c58:	513fc71e 	bne	r10,r4,10003b78 <__alt_data_end+0xf8003b78>
10003c5c:	180b883a 	mov	r5,r3
10003c60:	3023883a 	mov	r17,r6
10003c64:	5021883a 	mov	r16,r10
10003c68:	003e3106 	br	10003530 <__alt_data_end+0xf8003530>
10003c6c:	10002d26 	beq	r2,zero,10003d24 <__subdf3+0x880>
10003c70:	1984b03a 	or	r2,r3,r6
10003c74:	10000e26 	beq	r2,zero,10003cb0 <__subdf3+0x80c>
10003c78:	2808d0fa 	srli	r4,r5,3
10003c7c:	8822d0fa 	srli	r17,r17,3
10003c80:	280a977a 	slli	r5,r5,29
10003c84:	2080022c 	andhi	r2,r4,8
10003c88:	2c62b03a 	or	r17,r5,r17
10003c8c:	103feb26 	beq	r2,zero,10003c3c <__alt_data_end+0xf8003c3c>
10003c90:	180ed0fa 	srli	r7,r3,3
10003c94:	3880022c 	andhi	r2,r7,8
10003c98:	103fe81e 	bne	r2,zero,10003c3c <__alt_data_end+0xf8003c3c>
10003c9c:	300cd0fa 	srli	r6,r6,3
10003ca0:	1804977a 	slli	r2,r3,29
10003ca4:	3809883a 	mov	r4,r7
10003ca8:	11a2b03a 	or	r17,r2,r6
10003cac:	003fe306 	br	10003c3c <__alt_data_end+0xf8003c3c>
10003cb0:	0401ffc4 	movi	r16,2047
10003cb4:	003e1e06 	br	10003530 <__alt_data_end+0xf8003530>
10003cb8:	0005883a 	mov	r2,zero
10003cbc:	003f8306 	br	10003acc <__alt_data_end+0xf8003acc>
10003cc0:	113ff804 	addi	r4,r2,-32
10003cc4:	02000804 	movi	r8,32
10003cc8:	2908d83a 	srl	r4,r5,r4
10003ccc:	12002526 	beq	r2,r8,10003d64 <__subdf3+0x8c0>
10003cd0:	02001004 	movi	r8,64
10003cd4:	4085c83a 	sub	r2,r8,r2
10003cd8:	288a983a 	sll	r5,r5,r2
10003cdc:	2c62b03a 	or	r17,r5,r17
10003ce0:	8822c03a 	cmpne	r17,r17,zero
10003ce4:	8922b03a 	or	r17,r17,r4
10003ce8:	0005883a 	mov	r2,zero
10003cec:	003f2406 	br	10003980 <__alt_data_end+0xf8003980>
10003cf0:	01402034 	movhi	r5,128
10003cf4:	0011883a 	mov	r8,zero
10003cf8:	297fffc4 	addi	r5,r5,-1
10003cfc:	047ffe04 	movi	r17,-8
10003d00:	0401ffc4 	movi	r16,2047
10003d04:	003e6a06 	br	100036b0 <__alt_data_end+0xf80036b0>
10003d08:	2c62b03a 	or	r17,r5,r17
10003d0c:	8822c03a 	cmpne	r17,r17,zero
10003d10:	0005883a 	mov	r2,zero
10003d14:	003fa506 	br	10003bac <__alt_data_end+0xf8003bac>
10003d18:	180b883a 	mov	r5,r3
10003d1c:	3023883a 	mov	r17,r6
10003d20:	003e0306 	br	10003530 <__alt_data_end+0xf8003530>
10003d24:	180b883a 	mov	r5,r3
10003d28:	3023883a 	mov	r17,r6
10003d2c:	0401ffc4 	movi	r16,2047
10003d30:	003dff06 	br	10003530 <__alt_data_end+0xf8003530>
10003d34:	113ff804 	addi	r4,r2,-32
10003d38:	01c00804 	movi	r7,32
10003d3c:	2908d83a 	srl	r4,r5,r4
10003d40:	11c00a26 	beq	r2,r7,10003d6c <__subdf3+0x8c8>
10003d44:	01c01004 	movi	r7,64
10003d48:	3885c83a 	sub	r2,r7,r2
10003d4c:	288a983a 	sll	r5,r5,r2
10003d50:	2c62b03a 	or	r17,r5,r17
10003d54:	8822c03a 	cmpne	r17,r17,zero
10003d58:	8922b03a 	or	r17,r17,r4
10003d5c:	0005883a 	mov	r2,zero
10003d60:	003f9206 	br	10003bac <__alt_data_end+0xf8003bac>
10003d64:	000b883a 	mov	r5,zero
10003d68:	003fdc06 	br	10003cdc <__alt_data_end+0xf8003cdc>
10003d6c:	000b883a 	mov	r5,zero
10003d70:	003ff706 	br	10003d50 <__alt_data_end+0xf8003d50>

10003d74 <__fixdfsi>:
10003d74:	2806d53a 	srli	r3,r5,20
10003d78:	00800434 	movhi	r2,16
10003d7c:	10bfffc4 	addi	r2,r2,-1
10003d80:	18c1ffcc 	andi	r3,r3,2047
10003d84:	0180ff84 	movi	r6,1022
10003d88:	2884703a 	and	r2,r5,r2
10003d8c:	280ad7fa 	srli	r5,r5,31
10003d90:	30c0130e 	bge	r6,r3,10003de0 <__fixdfsi+0x6c>
10003d94:	01810744 	movi	r6,1053
10003d98:	30c00d16 	blt	r6,r3,10003dd0 <__fixdfsi+0x5c>
10003d9c:	01810cc4 	movi	r6,1075
10003da0:	30cdc83a 	sub	r6,r6,r3
10003da4:	01c007c4 	movi	r7,31
10003da8:	10800434 	orhi	r2,r2,16
10003dac:	39800e0e 	bge	r7,r6,10003de8 <__fixdfsi+0x74>
10003db0:	010104c4 	movi	r4,1043
10003db4:	20c7c83a 	sub	r3,r4,r3
10003db8:	10c6d83a 	srl	r3,r2,r3
10003dbc:	29403fcc 	andi	r5,r5,255
10003dc0:	0145c83a 	sub	r2,zero,r5
10003dc4:	1884f03a 	xor	r2,r3,r2
10003dc8:	1145883a 	add	r2,r2,r5
10003dcc:	f800283a 	ret
10003dd0:	00a00034 	movhi	r2,32768
10003dd4:	10bfffc4 	addi	r2,r2,-1
10003dd8:	2885883a 	add	r2,r5,r2
10003ddc:	f800283a 	ret
10003de0:	0005883a 	mov	r2,zero
10003de4:	f800283a 	ret
10003de8:	18fefb44 	addi	r3,r3,-1043
10003dec:	2188d83a 	srl	r4,r4,r6
10003df0:	10c6983a 	sll	r3,r2,r3
10003df4:	20c6b03a 	or	r3,r4,r3
10003df8:	003ff006 	br	10003dbc <__alt_data_end+0xf8003dbc>

10003dfc <__floatsidf>:
10003dfc:	defffd04 	addi	sp,sp,-12
10003e00:	dc400115 	stw	r17,4(sp)
10003e04:	dfc00215 	stw	ra,8(sp)
10003e08:	dc000015 	stw	r16,0(sp)
10003e0c:	2023883a 	mov	r17,r4
10003e10:	20001426 	beq	r4,zero,10003e64 <__floatsidf+0x68>
10003e14:	2020d7fa 	srli	r16,r4,31
10003e18:	80000126 	beq	r16,zero,10003e20 <__floatsidf+0x24>
10003e1c:	0123c83a 	sub	r17,zero,r4
10003e20:	8809883a 	mov	r4,r17
10003e24:	0003ecc0 	call	10003ecc <__clzsi2>
10003e28:	01410784 	movi	r5,1054
10003e2c:	00c00284 	movi	r3,10
10003e30:	288bc83a 	sub	r5,r5,r2
10003e34:	18801c16 	blt	r3,r2,10003ea8 <__floatsidf+0xac>
10003e38:	00c002c4 	movi	r3,11
10003e3c:	1887c83a 	sub	r3,r3,r2
10003e40:	88c8d83a 	srl	r4,r17,r3
10003e44:	00c00434 	movhi	r3,16
10003e48:	18ffffc4 	addi	r3,r3,-1
10003e4c:	10800544 	addi	r2,r2,21
10003e50:	20c8703a 	and	r4,r4,r3
10003e54:	8884983a 	sll	r2,r17,r2
10003e58:	28c1ffcc 	andi	r3,r5,2047
10003e5c:	800d883a 	mov	r6,r16
10003e60:	00000406 	br	10003e74 <__floatsidf+0x78>
10003e64:	000d883a 	mov	r6,zero
10003e68:	0007883a 	mov	r3,zero
10003e6c:	0009883a 	mov	r4,zero
10003e70:	0005883a 	mov	r2,zero
10003e74:	180a953a 	slli	r5,r3,20
10003e78:	31803fcc 	andi	r6,r6,255
10003e7c:	00c00434 	movhi	r3,16
10003e80:	300c97fa 	slli	r6,r6,31
10003e84:	18ffffc4 	addi	r3,r3,-1
10003e88:	20c6703a 	and	r3,r4,r3
10003e8c:	1946b03a 	or	r3,r3,r5
10003e90:	1986b03a 	or	r3,r3,r6
10003e94:	dfc00217 	ldw	ra,8(sp)
10003e98:	dc400117 	ldw	r17,4(sp)
10003e9c:	dc000017 	ldw	r16,0(sp)
10003ea0:	dec00304 	addi	sp,sp,12
10003ea4:	f800283a 	ret
10003ea8:	10fffd44 	addi	r3,r2,-11
10003eac:	88c8983a 	sll	r4,r17,r3
10003eb0:	00800434 	movhi	r2,16
10003eb4:	10bfffc4 	addi	r2,r2,-1
10003eb8:	2088703a 	and	r4,r4,r2
10003ebc:	28c1ffcc 	andi	r3,r5,2047
10003ec0:	800d883a 	mov	r6,r16
10003ec4:	0005883a 	mov	r2,zero
10003ec8:	003fea06 	br	10003e74 <__alt_data_end+0xf8003e74>

10003ecc <__clzsi2>:
10003ecc:	00bfffd4 	movui	r2,65535
10003ed0:	11000b36 	bltu	r2,r4,10003f00 <__clzsi2+0x34>
10003ed4:	00803fc4 	movi	r2,255
10003ed8:	1100122e 	bgeu	r2,r4,10003f24 <__clzsi2+0x58>
10003edc:	00c00204 	movi	r3,8
10003ee0:	01400604 	movi	r5,24
10003ee4:	20c8d83a 	srl	r4,r4,r3
10003ee8:	00840074 	movhi	r2,4097
10003eec:	10846504 	addi	r2,r2,4500
10003ef0:	1109883a 	add	r4,r2,r4
10003ef4:	20800003 	ldbu	r2,0(r4)
10003ef8:	2885c83a 	sub	r2,r5,r2
10003efc:	f800283a 	ret
10003f00:	00804034 	movhi	r2,256
10003f04:	10bfffc4 	addi	r2,r2,-1
10003f08:	11000336 	bltu	r2,r4,10003f18 <__clzsi2+0x4c>
10003f0c:	00c00404 	movi	r3,16
10003f10:	180b883a 	mov	r5,r3
10003f14:	003ff306 	br	10003ee4 <__alt_data_end+0xf8003ee4>
10003f18:	00c00604 	movi	r3,24
10003f1c:	01400204 	movi	r5,8
10003f20:	003ff006 	br	10003ee4 <__alt_data_end+0xf8003ee4>
10003f24:	0007883a 	mov	r3,zero
10003f28:	01400804 	movi	r5,32
10003f2c:	003fed06 	br	10003ee4 <__alt_data_end+0xf8003ee4>

10003f30 <_printf_r>:
10003f30:	defffd04 	addi	sp,sp,-12
10003f34:	dfc00015 	stw	ra,0(sp)
10003f38:	d9800115 	stw	r6,4(sp)
10003f3c:	d9c00215 	stw	r7,8(sp)
10003f40:	280d883a 	mov	r6,r5
10003f44:	21400217 	ldw	r5,8(r4)
10003f48:	d9c00104 	addi	r7,sp,4
10003f4c:	00041780 	call	10004178 <___vfprintf_internal_r>
10003f50:	dfc00017 	ldw	ra,0(sp)
10003f54:	dec00304 	addi	sp,sp,12
10003f58:	f800283a 	ret

10003f5c <printf>:
10003f5c:	defffc04 	addi	sp,sp,-16
10003f60:	dfc00015 	stw	ra,0(sp)
10003f64:	d9400115 	stw	r5,4(sp)
10003f68:	d9800215 	stw	r6,8(sp)
10003f6c:	d9c00315 	stw	r7,12(sp)
10003f70:	00840074 	movhi	r2,4097
10003f74:	108bd104 	addi	r2,r2,12100
10003f78:	10800017 	ldw	r2,0(r2)
10003f7c:	200b883a 	mov	r5,r4
10003f80:	d9800104 	addi	r6,sp,4
10003f84:	11000217 	ldw	r4,8(r2)
10003f88:	00062740 	call	10006274 <__vfprintf_internal>
10003f8c:	dfc00017 	ldw	ra,0(sp)
10003f90:	dec00404 	addi	sp,sp,16
10003f94:	f800283a 	ret

10003f98 <_puts_r>:
10003f98:	defff604 	addi	sp,sp,-40
10003f9c:	dc000715 	stw	r16,28(sp)
10003fa0:	2021883a 	mov	r16,r4
10003fa4:	2809883a 	mov	r4,r5
10003fa8:	dc400815 	stw	r17,32(sp)
10003fac:	dfc00915 	stw	ra,36(sp)
10003fb0:	2823883a 	mov	r17,r5
10003fb4:	00040e00 	call	100040e0 <strlen>
10003fb8:	00c40074 	movhi	r3,4097
10003fbc:	18cbd104 	addi	r3,r3,12100
10003fc0:	18c00017 	ldw	r3,0(r3)
10003fc4:	11000044 	addi	r4,r2,1
10003fc8:	d8800115 	stw	r2,4(sp)
10003fcc:	18c00217 	ldw	r3,8(r3)
10003fd0:	01440074 	movhi	r5,4097
10003fd4:	2944a504 	addi	r5,r5,4756
10003fd8:	1880030b 	ldhu	r2,12(r3)
10003fdc:	d9400215 	stw	r5,8(sp)
10003fe0:	d9000615 	stw	r4,24(sp)
10003fe4:	01400044 	movi	r5,1
10003fe8:	01000084 	movi	r4,2
10003fec:	d9000515 	stw	r4,20(sp)
10003ff0:	dc400015 	stw	r17,0(sp)
10003ff4:	d9400315 	stw	r5,12(sp)
10003ff8:	dec00415 	stw	sp,16(sp)
10003ffc:	1108000c 	andi	r4,r2,8192
10004000:	2000061e 	bne	r4,zero,1000401c <_puts_r+0x84>
10004004:	19401917 	ldw	r5,100(r3)
10004008:	0137ffc4 	movi	r4,-8193
1000400c:	10880014 	ori	r2,r2,8192
10004010:	2908703a 	and	r4,r5,r4
10004014:	1880030d 	sth	r2,12(r3)
10004018:	19001915 	stw	r4,100(r3)
1000401c:	81400217 	ldw	r5,8(r16)
10004020:	8009883a 	mov	r4,r16
10004024:	d9800404 	addi	r6,sp,16
10004028:	00087380 	call	10008738 <__sfvwrite_r>
1000402c:	1000061e 	bne	r2,zero,10004048 <_puts_r+0xb0>
10004030:	00800284 	movi	r2,10
10004034:	dfc00917 	ldw	ra,36(sp)
10004038:	dc400817 	ldw	r17,32(sp)
1000403c:	dc000717 	ldw	r16,28(sp)
10004040:	dec00a04 	addi	sp,sp,40
10004044:	f800283a 	ret
10004048:	00bfffc4 	movi	r2,-1
1000404c:	003ff906 	br	10004034 <__alt_data_end+0xf8004034>

10004050 <puts>:
10004050:	00840074 	movhi	r2,4097
10004054:	108bd104 	addi	r2,r2,12100
10004058:	200b883a 	mov	r5,r4
1000405c:	11000017 	ldw	r4,0(r2)
10004060:	0003f981 	jmpi	10003f98 <_puts_r>

10004064 <srand>:
10004064:	00840074 	movhi	r2,4097
10004068:	108bd104 	addi	r2,r2,12100
1000406c:	10800017 	ldw	r2,0(r2)
10004070:	11002915 	stw	r4,164(r2)
10004074:	10002a15 	stw	zero,168(r2)
10004078:	f800283a 	ret

1000407c <rand>:
1000407c:	00840074 	movhi	r2,4097
10004080:	defffe04 	addi	sp,sp,-8
10004084:	108bd104 	addi	r2,r2,12100
10004088:	dc000015 	stw	r16,0(sp)
1000408c:	14000017 	ldw	r16,0(r2)
10004090:	dfc00115 	stw	ra,4(sp)
10004094:	01932574 	movhi	r6,19605
10004098:	81002917 	ldw	r4,164(r16)
1000409c:	81402a17 	ldw	r5,168(r16)
100040a0:	01d614b4 	movhi	r7,22610
100040a4:	319fcb44 	addi	r6,r6,32557
100040a8:	39fd0b44 	addi	r7,r7,-3027
100040ac:	000d3640 	call	1000d364 <__muldi3>
100040b0:	11000044 	addi	r4,r2,1
100040b4:	2085803a 	cmpltu	r2,r4,r2
100040b8:	10c7883a 	add	r3,r2,r3
100040bc:	00a00034 	movhi	r2,32768
100040c0:	10bfffc4 	addi	r2,r2,-1
100040c4:	1884703a 	and	r2,r3,r2
100040c8:	81002915 	stw	r4,164(r16)
100040cc:	80c02a15 	stw	r3,168(r16)
100040d0:	dfc00117 	ldw	ra,4(sp)
100040d4:	dc000017 	ldw	r16,0(sp)
100040d8:	dec00204 	addi	sp,sp,8
100040dc:	f800283a 	ret

100040e0 <strlen>:
100040e0:	208000cc 	andi	r2,r4,3
100040e4:	10002026 	beq	r2,zero,10004168 <strlen+0x88>
100040e8:	20800007 	ldb	r2,0(r4)
100040ec:	10002026 	beq	r2,zero,10004170 <strlen+0x90>
100040f0:	2005883a 	mov	r2,r4
100040f4:	00000206 	br	10004100 <strlen+0x20>
100040f8:	10c00007 	ldb	r3,0(r2)
100040fc:	18001826 	beq	r3,zero,10004160 <strlen+0x80>
10004100:	10800044 	addi	r2,r2,1
10004104:	10c000cc 	andi	r3,r2,3
10004108:	183ffb1e 	bne	r3,zero,100040f8 <__alt_data_end+0xf80040f8>
1000410c:	10c00017 	ldw	r3,0(r2)
10004110:	01ffbff4 	movhi	r7,65279
10004114:	39ffbfc4 	addi	r7,r7,-257
10004118:	00ca303a 	nor	r5,zero,r3
1000411c:	01a02074 	movhi	r6,32897
10004120:	19c7883a 	add	r3,r3,r7
10004124:	31a02004 	addi	r6,r6,-32640
10004128:	1946703a 	and	r3,r3,r5
1000412c:	1986703a 	and	r3,r3,r6
10004130:	1800091e 	bne	r3,zero,10004158 <strlen+0x78>
10004134:	10800104 	addi	r2,r2,4
10004138:	10c00017 	ldw	r3,0(r2)
1000413c:	19cb883a 	add	r5,r3,r7
10004140:	00c6303a 	nor	r3,zero,r3
10004144:	28c6703a 	and	r3,r5,r3
10004148:	1986703a 	and	r3,r3,r6
1000414c:	183ff926 	beq	r3,zero,10004134 <__alt_data_end+0xf8004134>
10004150:	00000106 	br	10004158 <strlen+0x78>
10004154:	10800044 	addi	r2,r2,1
10004158:	10c00007 	ldb	r3,0(r2)
1000415c:	183ffd1e 	bne	r3,zero,10004154 <__alt_data_end+0xf8004154>
10004160:	1105c83a 	sub	r2,r2,r4
10004164:	f800283a 	ret
10004168:	2005883a 	mov	r2,r4
1000416c:	003fe706 	br	1000410c <__alt_data_end+0xf800410c>
10004170:	0005883a 	mov	r2,zero
10004174:	f800283a 	ret

10004178 <___vfprintf_internal_r>:
10004178:	defeb604 	addi	sp,sp,-1320
1000417c:	dfc14915 	stw	ra,1316(sp)
10004180:	ddc14715 	stw	r23,1308(sp)
10004184:	dd814615 	stw	r22,1304(sp)
10004188:	202f883a 	mov	r23,r4
1000418c:	282d883a 	mov	r22,r5
10004190:	d9812a15 	stw	r6,1192(sp)
10004194:	d9c12d15 	stw	r7,1204(sp)
10004198:	df014815 	stw	fp,1312(sp)
1000419c:	dd414515 	stw	r21,1300(sp)
100041a0:	dd014415 	stw	r20,1296(sp)
100041a4:	dcc14315 	stw	r19,1292(sp)
100041a8:	dc814215 	stw	r18,1288(sp)
100041ac:	dc414115 	stw	r17,1284(sp)
100041b0:	dc014015 	stw	r16,1280(sp)
100041b4:	0008df80 	call	10008df8 <_localeconv_r>
100041b8:	10800017 	ldw	r2,0(r2)
100041bc:	1009883a 	mov	r4,r2
100041c0:	d8813515 	stw	r2,1236(sp)
100041c4:	00040e00 	call	100040e0 <strlen>
100041c8:	d8813815 	stw	r2,1248(sp)
100041cc:	b8000226 	beq	r23,zero,100041d8 <___vfprintf_internal_r+0x60>
100041d0:	b8800e17 	ldw	r2,56(r23)
100041d4:	10010526 	beq	r2,zero,100045ec <___vfprintf_internal_r+0x474>
100041d8:	b0c0030b 	ldhu	r3,12(r22)
100041dc:	1908000c 	andi	r4,r3,8192
100041e0:	1805883a 	mov	r2,r3
100041e4:	2000071e 	bne	r4,zero,10004204 <___vfprintf_internal_r+0x8c>
100041e8:	b1001917 	ldw	r4,100(r22)
100041ec:	18880014 	ori	r2,r3,8192
100041f0:	00f7ffc4 	movi	r3,-8193
100041f4:	20c8703a 	and	r4,r4,r3
100041f8:	b080030d 	sth	r2,12(r22)
100041fc:	1007883a 	mov	r3,r2
10004200:	b1001915 	stw	r4,100(r22)
10004204:	1100020c 	andi	r4,r2,8
10004208:	2000a826 	beq	r4,zero,100044ac <___vfprintf_internal_r+0x334>
1000420c:	b1000417 	ldw	r4,16(r22)
10004210:	2000a626 	beq	r4,zero,100044ac <___vfprintf_internal_r+0x334>
10004214:	1080068c 	andi	r2,r2,26
10004218:	01000284 	movi	r4,10
1000421c:	1100ac26 	beq	r2,r4,100044d0 <___vfprintf_internal_r+0x358>
10004220:	d8c10e04 	addi	r3,sp,1080
10004224:	d9010dc4 	addi	r4,sp,1079
10004228:	d9400404 	addi	r5,sp,16
1000422c:	05040074 	movhi	r20,4097
10004230:	1905c83a 	sub	r2,r3,r4
10004234:	a504b684 	addi	r20,r20,4826
10004238:	d8c12815 	stw	r3,1184(sp)
1000423c:	d9012915 	stw	r4,1188(sp)
10004240:	d9411e15 	stw	r5,1144(sp)
10004244:	d8012015 	stw	zero,1152(sp)
10004248:	d8011f15 	stw	zero,1148(sp)
1000424c:	d8013315 	stw	zero,1228(sp)
10004250:	d8013715 	stw	zero,1244(sp)
10004254:	d8013915 	stw	zero,1252(sp)
10004258:	d8013b15 	stw	zero,1260(sp)
1000425c:	d8013a15 	stw	zero,1256(sp)
10004260:	d8012f15 	stw	zero,1212(sp)
10004264:	2811883a 	mov	r8,r5
10004268:	d8813c15 	stw	r2,1264(sp)
1000426c:	d8c12a17 	ldw	r3,1192(sp)
10004270:	18800007 	ldb	r2,0(r3)
10004274:	10021326 	beq	r2,zero,10004ac4 <___vfprintf_internal_r+0x94c>
10004278:	00c00944 	movi	r3,37
1000427c:	dc012a17 	ldw	r16,1192(sp)
10004280:	10c0021e 	bne	r2,r3,1000428c <___vfprintf_internal_r+0x114>
10004284:	00001606 	br	100042e0 <___vfprintf_internal_r+0x168>
10004288:	10c08526 	beq	r2,r3,100044a0 <___vfprintf_internal_r+0x328>
1000428c:	84000044 	addi	r16,r16,1
10004290:	80800007 	ldb	r2,0(r16)
10004294:	103ffc1e 	bne	r2,zero,10004288 <__alt_data_end+0xf8004288>
10004298:	d9012a17 	ldw	r4,1192(sp)
1000429c:	8123c83a 	sub	r17,r16,r4
100042a0:	88000f26 	beq	r17,zero,100042e0 <___vfprintf_internal_r+0x168>
100042a4:	d8812a17 	ldw	r2,1192(sp)
100042a8:	d8c12017 	ldw	r3,1152(sp)
100042ac:	44400115 	stw	r17,4(r8)
100042b0:	40800015 	stw	r2,0(r8)
100042b4:	d8811f17 	ldw	r2,1148(sp)
100042b8:	1c47883a 	add	r3,r3,r17
100042bc:	d8c12015 	stw	r3,1152(sp)
100042c0:	10800044 	addi	r2,r2,1
100042c4:	d8811f15 	stw	r2,1148(sp)
100042c8:	00c001c4 	movi	r3,7
100042cc:	1880b516 	blt	r3,r2,100045a4 <___vfprintf_internal_r+0x42c>
100042d0:	42000204 	addi	r8,r8,8
100042d4:	d8c12f17 	ldw	r3,1212(sp)
100042d8:	1c47883a 	add	r3,r3,r17
100042dc:	d8c12f15 	stw	r3,1212(sp)
100042e0:	80800007 	ldb	r2,0(r16)
100042e4:	1000b626 	beq	r2,zero,100045c0 <___vfprintf_internal_r+0x448>
100042e8:	80800044 	addi	r2,r16,1
100042ec:	84000047 	ldb	r16,1(r16)
100042f0:	0027883a 	mov	r19,zero
100042f4:	0039883a 	mov	fp,zero
100042f8:	dcc12b05 	stb	r19,1196(sp)
100042fc:	d8012785 	stb	zero,1182(sp)
10004300:	027fffc4 	movi	r9,-1
10004304:	d8012e15 	stw	zero,1208(sp)
10004308:	04401604 	movi	r17,88
1000430c:	04800244 	movi	r18,9
10004310:	da012a15 	stw	r8,1192(sp)
10004314:	e027883a 	mov	r19,fp
10004318:	17000044 	addi	fp,r2,1
1000431c:	80bff804 	addi	r2,r16,-32
10004320:	88831236 	bltu	r17,r2,10004f6c <___vfprintf_internal_r+0xdf4>
10004324:	100490ba 	slli	r2,r2,2
10004328:	01040034 	movhi	r4,4096
1000432c:	2110cf04 	addi	r4,r4,17212
10004330:	1105883a 	add	r2,r2,r4
10004334:	10800017 	ldw	r2,0(r2)
10004338:	1000683a 	jmp	r2
1000433c:	10004e88 	cmpgei	zero,r2,314
10004340:	10004f6c 	andhi	zero,r2,317
10004344:	10004f6c 	andhi	zero,r2,317
10004348:	10004ea4 	muli	zero,r2,314
1000434c:	10004f6c 	andhi	zero,r2,317
10004350:	10004f6c 	andhi	zero,r2,317
10004354:	10004f6c 	andhi	zero,r2,317
10004358:	10004f6c 	andhi	zero,r2,317
1000435c:	10004f6c 	andhi	zero,r2,317
10004360:	10004f6c 	andhi	zero,r2,317
10004364:	10004eb4 	orhi	zero,r2,314
10004368:	10004edc 	xori	zero,r2,315
1000436c:	10004f6c 	andhi	zero,r2,317
10004370:	100045f8 	rdprs	zero,r2,279
10004374:	10004608 	cmpgei	zero,r2,280
10004378:	10004f6c 	andhi	zero,r2,317
1000437c:	10004658 	cmpnei	zero,r2,281
10004380:	10004668 	cmpgeui	zero,r2,281
10004384:	10004668 	cmpgeui	zero,r2,281
10004388:	10004668 	cmpgeui	zero,r2,281
1000438c:	10004668 	cmpgeui	zero,r2,281
10004390:	10004668 	cmpgeui	zero,r2,281
10004394:	10004668 	cmpgeui	zero,r2,281
10004398:	10004668 	cmpgeui	zero,r2,281
1000439c:	10004668 	cmpgeui	zero,r2,281
100043a0:	10004668 	cmpgeui	zero,r2,281
100043a4:	10004f6c 	andhi	zero,r2,317
100043a8:	10004f6c 	andhi	zero,r2,317
100043ac:	10004f6c 	andhi	zero,r2,317
100043b0:	10004f6c 	andhi	zero,r2,317
100043b4:	10004f6c 	andhi	zero,r2,317
100043b8:	10004f6c 	andhi	zero,r2,317
100043bc:	10004f6c 	andhi	zero,r2,317
100043c0:	10004f6c 	andhi	zero,r2,317
100043c4:	10004f6c 	andhi	zero,r2,317
100043c8:	10004f6c 	andhi	zero,r2,317
100043cc:	100046ac 	andhi	zero,r2,282
100043d0:	10004acc 	andi	zero,r2,299
100043d4:	10004f6c 	andhi	zero,r2,317
100043d8:	10004acc 	andi	zero,r2,299
100043dc:	10004f6c 	andhi	zero,r2,317
100043e0:	10004f6c 	andhi	zero,r2,317
100043e4:	10004f6c 	andhi	zero,r2,317
100043e8:	10004f6c 	andhi	zero,r2,317
100043ec:	10004b74 	orhi	zero,r2,301
100043f0:	10004f6c 	andhi	zero,r2,317
100043f4:	10004f6c 	andhi	zero,r2,317
100043f8:	10004b84 	addi	zero,r2,302
100043fc:	10004f6c 	andhi	zero,r2,317
10004400:	10004f6c 	andhi	zero,r2,317
10004404:	10004f6c 	andhi	zero,r2,317
10004408:	10004f6c 	andhi	zero,r2,317
1000440c:	10004f6c 	andhi	zero,r2,317
10004410:	10004bc8 	cmpgei	zero,r2,303
10004414:	10004f6c 	andhi	zero,r2,317
10004418:	10004f6c 	andhi	zero,r2,317
1000441c:	10004c00 	call	110004c0 <_gp+0xfe5580>
10004420:	10004f6c 	andhi	zero,r2,317
10004424:	10004f6c 	andhi	zero,r2,317
10004428:	10004f6c 	andhi	zero,r2,317
1000442c:	10004f6c 	andhi	zero,r2,317
10004430:	10004f6c 	andhi	zero,r2,317
10004434:	10004f6c 	andhi	zero,r2,317
10004438:	10004f6c 	andhi	zero,r2,317
1000443c:	10004f6c 	andhi	zero,r2,317
10004440:	10004f6c 	andhi	zero,r2,317
10004444:	10004f6c 	andhi	zero,r2,317
10004448:	10004e3c 	xorhi	zero,r2,312
1000444c:	10004de8 	cmpgeui	zero,r2,311
10004450:	10004acc 	andi	zero,r2,299
10004454:	10004acc 	andi	zero,r2,299
10004458:	10004acc 	andi	zero,r2,299
1000445c:	10004e2c 	andhi	zero,r2,312
10004460:	10004de8 	cmpgeui	zero,r2,311
10004464:	10004f6c 	andhi	zero,r2,317
10004468:	10004f6c 	andhi	zero,r2,317
1000446c:	10004d04 	addi	zero,r2,308
10004470:	10004f6c 	andhi	zero,r2,317
10004474:	10004d1c 	xori	zero,r2,308
10004478:	10004d5c 	xori	zero,r2,309
1000447c:	10004d9c 	xori	zero,r2,310
10004480:	10004c68 	cmpgeui	zero,r2,305
10004484:	10004f6c 	andhi	zero,r2,317
10004488:	10004ef0 	cmpltui	zero,r2,315
1000448c:	10004f6c 	andhi	zero,r2,317
10004490:	10004c78 	rdprs	zero,r2,305
10004494:	10004f6c 	andhi	zero,r2,317
10004498:	10004f6c 	andhi	zero,r2,317
1000449c:	10004cb8 	rdprs	zero,r2,306
100044a0:	d9412a17 	ldw	r5,1192(sp)
100044a4:	8163c83a 	sub	r17,r16,r5
100044a8:	003f7d06 	br	100042a0 <__alt_data_end+0xf80042a0>
100044ac:	b809883a 	mov	r4,r23
100044b0:	b00b883a 	mov	r5,r22
100044b4:	00062980 	call	10006298 <__swsetup_r>
100044b8:	10002d1e 	bne	r2,zero,10004570 <___vfprintf_internal_r+0x3f8>
100044bc:	b0c0030b 	ldhu	r3,12(r22)
100044c0:	01000284 	movi	r4,10
100044c4:	1805883a 	mov	r2,r3
100044c8:	1080068c 	andi	r2,r2,26
100044cc:	113f541e 	bne	r2,r4,10004220 <__alt_data_end+0xf8004220>
100044d0:	b080038b 	ldhu	r2,14(r22)
100044d4:	113fffcc 	andi	r4,r2,65535
100044d8:	2120001c 	xori	r4,r4,32768
100044dc:	21200004 	addi	r4,r4,-32768
100044e0:	203f4f16 	blt	r4,zero,10004220 <__alt_data_end+0xf8004220>
100044e4:	b2c01917 	ldw	r11,100(r22)
100044e8:	b2800717 	ldw	r10,28(r22)
100044ec:	b2400917 	ldw	r9,36(r22)
100044f0:	d9812a17 	ldw	r6,1192(sp)
100044f4:	d9c12d17 	ldw	r7,1204(sp)
100044f8:	02010004 	movi	r8,1024
100044fc:	18ffff4c 	andi	r3,r3,65533
10004500:	d881078d 	sth	r2,1054(sp)
10004504:	b809883a 	mov	r4,r23
10004508:	d8800404 	addi	r2,sp,16
1000450c:	d9410404 	addi	r5,sp,1040
10004510:	d8c1070d 	sth	r3,1052(sp)
10004514:	dac11d15 	stw	r11,1140(sp)
10004518:	da810b15 	stw	r10,1068(sp)
1000451c:	da410d15 	stw	r9,1076(sp)
10004520:	d8810415 	stw	r2,1040(sp)
10004524:	d8810815 	stw	r2,1056(sp)
10004528:	da010615 	stw	r8,1048(sp)
1000452c:	da010915 	stw	r8,1060(sp)
10004530:	d8010a15 	stw	zero,1064(sp)
10004534:	00041780 	call	10004178 <___vfprintf_internal_r>
10004538:	1021883a 	mov	r16,r2
1000453c:	10000416 	blt	r2,zero,10004550 <___vfprintf_internal_r+0x3d8>
10004540:	b809883a 	mov	r4,r23
10004544:	d9410404 	addi	r5,sp,1040
10004548:	0007d180 	call	10007d18 <_fflush_r>
1000454c:	1007301e 	bne	r2,zero,10006210 <___vfprintf_internal_r+0x2098>
10004550:	d881070b 	ldhu	r2,1052(sp)
10004554:	1080100c 	andi	r2,r2,64
10004558:	10000326 	beq	r2,zero,10004568 <___vfprintf_internal_r+0x3f0>
1000455c:	b080030b 	ldhu	r2,12(r22)
10004560:	10801014 	ori	r2,r2,64
10004564:	b080030d 	sth	r2,12(r22)
10004568:	8005883a 	mov	r2,r16
1000456c:	00000106 	br	10004574 <___vfprintf_internal_r+0x3fc>
10004570:	00bfffc4 	movi	r2,-1
10004574:	dfc14917 	ldw	ra,1316(sp)
10004578:	df014817 	ldw	fp,1312(sp)
1000457c:	ddc14717 	ldw	r23,1308(sp)
10004580:	dd814617 	ldw	r22,1304(sp)
10004584:	dd414517 	ldw	r21,1300(sp)
10004588:	dd014417 	ldw	r20,1296(sp)
1000458c:	dcc14317 	ldw	r19,1292(sp)
10004590:	dc814217 	ldw	r18,1288(sp)
10004594:	dc414117 	ldw	r17,1284(sp)
10004598:	dc014017 	ldw	r16,1280(sp)
1000459c:	dec14a04 	addi	sp,sp,1320
100045a0:	f800283a 	ret
100045a4:	b809883a 	mov	r4,r23
100045a8:	b00b883a 	mov	r5,r22
100045ac:	d9811e04 	addi	r6,sp,1144
100045b0:	000b5b80 	call	1000b5b8 <__sprint_r>
100045b4:	1000081e 	bne	r2,zero,100045d8 <___vfprintf_internal_r+0x460>
100045b8:	da000404 	addi	r8,sp,16
100045bc:	003f4506 	br	100042d4 <__alt_data_end+0xf80042d4>
100045c0:	d8812017 	ldw	r2,1152(sp)
100045c4:	10000426 	beq	r2,zero,100045d8 <___vfprintf_internal_r+0x460>
100045c8:	b809883a 	mov	r4,r23
100045cc:	b00b883a 	mov	r5,r22
100045d0:	d9811e04 	addi	r6,sp,1144
100045d4:	000b5b80 	call	1000b5b8 <__sprint_r>
100045d8:	b080030b 	ldhu	r2,12(r22)
100045dc:	1080100c 	andi	r2,r2,64
100045e0:	103fe31e 	bne	r2,zero,10004570 <__alt_data_end+0xf8004570>
100045e4:	d8812f17 	ldw	r2,1212(sp)
100045e8:	003fe206 	br	10004574 <__alt_data_end+0xf8004574>
100045ec:	b809883a 	mov	r4,r23
100045f0:	00082d40 	call	100082d4 <__sinit>
100045f4:	003ef806 	br	100041d8 <__alt_data_end+0xf80041d8>
100045f8:	e005883a 	mov	r2,fp
100045fc:	9cc00114 	ori	r19,r19,4
10004600:	e4000007 	ldb	r16,0(fp)
10004604:	003f4406 	br	10004318 <__alt_data_end+0xf8004318>
10004608:	e4000007 	ldb	r16,0(fp)
1000460c:	01000a84 	movi	r4,42
10004610:	e0800044 	addi	r2,fp,1
10004614:	8106f626 	beq	r16,r4,100061f0 <___vfprintf_internal_r+0x2078>
10004618:	857ff404 	addi	r21,r16,-48
1000461c:	1039883a 	mov	fp,r2
10004620:	0013883a 	mov	r9,zero
10004624:	957f3d36 	bltu	r18,r21,1000431c <__alt_data_end+0xf800431c>
10004628:	0009883a 	mov	r4,zero
1000462c:	01400284 	movi	r5,10
10004630:	0002be00 	call	10002be0 <__mulsi3>
10004634:	e4000007 	ldb	r16,0(fp)
10004638:	a889883a 	add	r4,r21,r2
1000463c:	e7000044 	addi	fp,fp,1
10004640:	857ff404 	addi	r21,r16,-48
10004644:	957ff92e 	bgeu	r18,r21,1000462c <__alt_data_end+0xf800462c>
10004648:	2013883a 	mov	r9,r4
1000464c:	203f330e 	bge	r4,zero,1000431c <__alt_data_end+0xf800431c>
10004650:	027fffc4 	movi	r9,-1
10004654:	003f3106 	br	1000431c <__alt_data_end+0xf800431c>
10004658:	9cc02014 	ori	r19,r19,128
1000465c:	e005883a 	mov	r2,fp
10004660:	e4000007 	ldb	r16,0(fp)
10004664:	003f2c06 	br	10004318 <__alt_data_end+0xf8004318>
10004668:	857ff404 	addi	r21,r16,-48
1000466c:	d8012e15 	stw	zero,1208(sp)
10004670:	e021883a 	mov	r16,fp
10004674:	0009883a 	mov	r4,zero
10004678:	da412c15 	stw	r9,1200(sp)
1000467c:	01400284 	movi	r5,10
10004680:	0002be00 	call	10002be0 <__mulsi3>
10004684:	81400007 	ldb	r5,0(r16)
10004688:	1549883a 	add	r4,r2,r21
1000468c:	e7000044 	addi	fp,fp,1
10004690:	2d7ff404 	addi	r21,r5,-48
10004694:	e021883a 	mov	r16,fp
10004698:	957ff82e 	bgeu	r18,r21,1000467c <__alt_data_end+0xf800467c>
1000469c:	2821883a 	mov	r16,r5
100046a0:	d9012e15 	stw	r4,1208(sp)
100046a4:	da412c17 	ldw	r9,1200(sp)
100046a8:	003f1c06 	br	1000431c <__alt_data_end+0xf800431c>
100046ac:	da012a17 	ldw	r8,1192(sp)
100046b0:	df012a15 	stw	fp,1192(sp)
100046b4:	9839883a 	mov	fp,r19
100046b8:	dcc12b03 	ldbu	r19,1196(sp)
100046bc:	e7000414 	ori	fp,fp,16
100046c0:	e080080c 	andi	r2,fp,32
100046c4:	dcc12785 	stb	r19,1182(sp)
100046c8:	d8c12d17 	ldw	r3,1204(sp)
100046cc:	1001ce26 	beq	r2,zero,10004e08 <___vfprintf_internal_r+0xc90>
100046d0:	d9012d17 	ldw	r4,1204(sp)
100046d4:	18800117 	ldw	r2,4(r3)
100046d8:	1c800017 	ldw	r18,0(r3)
100046dc:	21000204 	addi	r4,r4,8
100046e0:	d9012d15 	stw	r4,1204(sp)
100046e4:	102b883a 	mov	r21,r2
100046e8:	10044916 	blt	r2,zero,10005810 <___vfprintf_internal_r+0x1698>
100046ec:	dcc12783 	ldbu	r19,1182(sp)
100046f0:	da413215 	stw	r9,1224(sp)
100046f4:	00800044 	movi	r2,1
100046f8:	9546b03a 	or	r3,r18,r21
100046fc:	48000216 	blt	r9,zero,10004708 <___vfprintf_internal_r+0x590>
10004700:	013fdfc4 	movi	r4,-129
10004704:	e138703a 	and	fp,fp,r4
10004708:	1802251e 	bne	r3,zero,10004fa0 <___vfprintf_internal_r+0xe28>
1000470c:	48031726 	beq	r9,zero,1000536c <___vfprintf_internal_r+0x11f4>
10004710:	10803fcc 	andi	r2,r2,255
10004714:	00c00044 	movi	r3,1
10004718:	10c24526 	beq	r2,r3,10005030 <___vfprintf_internal_r+0xeb8>
1000471c:	00c00084 	movi	r3,2
10004720:	10c33426 	beq	r2,r3,100053f4 <___vfprintf_internal_r+0x127c>
10004724:	d8c10e04 	addi	r3,sp,1080
10004728:	9008d0fa 	srli	r4,r18,3
1000472c:	a80a977a 	slli	r5,r21,29
10004730:	a82ad0fa 	srli	r21,r21,3
10004734:	948001cc 	andi	r18,r18,7
10004738:	90800c04 	addi	r2,r18,48
1000473c:	18ffffc4 	addi	r3,r3,-1
10004740:	2924b03a 	or	r18,r5,r4
10004744:	18800005 	stb	r2,0(r3)
10004748:	9548b03a 	or	r4,r18,r21
1000474c:	203ff61e 	bne	r4,zero,10004728 <__alt_data_end+0xf8004728>
10004750:	e100004c 	andi	r4,fp,1
10004754:	d8c13115 	stw	r3,1220(sp)
10004758:	20039a1e 	bne	r4,zero,100055c4 <___vfprintf_internal_r+0x144c>
1000475c:	d8812817 	ldw	r2,1184(sp)
10004760:	10e3c83a 	sub	r17,r2,r3
10004764:	8805883a 	mov	r2,r17
10004768:	8a40010e 	bge	r17,r9,10004770 <___vfprintf_internal_r+0x5f8>
1000476c:	4805883a 	mov	r2,r9
10004770:	d8812b15 	stw	r2,1196(sp)
10004774:	d8013415 	stw	zero,1232(sp)
10004778:	98803fcc 	andi	r2,r19,255
1000477c:	1080201c 	xori	r2,r2,128
10004780:	10bfe004 	addi	r2,r2,-128
10004784:	10000326 	beq	r2,zero,10004794 <___vfprintf_internal_r+0x61c>
10004788:	d8c12b17 	ldw	r3,1196(sp)
1000478c:	18c00044 	addi	r3,r3,1
10004790:	d8c12b15 	stw	r3,1196(sp)
10004794:	e0c0008c 	andi	r3,fp,2
10004798:	d8c12c15 	stw	r3,1200(sp)
1000479c:	18000326 	beq	r3,zero,100047ac <___vfprintf_internal_r+0x634>
100047a0:	d8c12b17 	ldw	r3,1196(sp)
100047a4:	18c00084 	addi	r3,r3,2
100047a8:	d8c12b15 	stw	r3,1196(sp)
100047ac:	e0c0210c 	andi	r3,fp,132
100047b0:	d8c13015 	stw	r3,1216(sp)
100047b4:	1801f81e 	bne	r3,zero,10004f98 <___vfprintf_internal_r+0xe20>
100047b8:	d9012e17 	ldw	r4,1208(sp)
100047bc:	d8c12b17 	ldw	r3,1196(sp)
100047c0:	20ebc83a 	sub	r21,r4,r3
100047c4:	0541f40e 	bge	zero,r21,10004f98 <___vfprintf_internal_r+0xe20>
100047c8:	02400404 	movi	r9,16
100047cc:	d8c12017 	ldw	r3,1152(sp)
100047d0:	d8811f17 	ldw	r2,1148(sp)
100047d4:	4d45750e 	bge	r9,r21,10005dac <___vfprintf_internal_r+0x1c34>
100047d8:	01440074 	movhi	r5,4097
100047dc:	2944ba84 	addi	r5,r5,4842
100047e0:	d9413615 	stw	r5,1240(sp)
100047e4:	4827883a 	mov	r19,r9
100047e8:	048001c4 	movi	r18,7
100047ec:	00000306 	br	100047fc <___vfprintf_internal_r+0x684>
100047f0:	ad7ffc04 	addi	r21,r21,-16
100047f4:	42000204 	addi	r8,r8,8
100047f8:	9d40130e 	bge	r19,r21,10004848 <___vfprintf_internal_r+0x6d0>
100047fc:	01040074 	movhi	r4,4097
10004800:	18c00404 	addi	r3,r3,16
10004804:	10800044 	addi	r2,r2,1
10004808:	2104ba84 	addi	r4,r4,4842
1000480c:	41000015 	stw	r4,0(r8)
10004810:	44c00115 	stw	r19,4(r8)
10004814:	d8c12015 	stw	r3,1152(sp)
10004818:	d8811f15 	stw	r2,1148(sp)
1000481c:	90bff40e 	bge	r18,r2,100047f0 <__alt_data_end+0xf80047f0>
10004820:	b809883a 	mov	r4,r23
10004824:	b00b883a 	mov	r5,r22
10004828:	d9811e04 	addi	r6,sp,1144
1000482c:	000b5b80 	call	1000b5b8 <__sprint_r>
10004830:	103f691e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10004834:	ad7ffc04 	addi	r21,r21,-16
10004838:	d8c12017 	ldw	r3,1152(sp)
1000483c:	d8811f17 	ldw	r2,1148(sp)
10004840:	da000404 	addi	r8,sp,16
10004844:	9d7fed16 	blt	r19,r21,100047fc <__alt_data_end+0xf80047fc>
10004848:	d9413617 	ldw	r5,1240(sp)
1000484c:	a8c7883a 	add	r3,r21,r3
10004850:	10800044 	addi	r2,r2,1
10004854:	41400015 	stw	r5,0(r8)
10004858:	45400115 	stw	r21,4(r8)
1000485c:	d8c12015 	stw	r3,1152(sp)
10004860:	d8811f15 	stw	r2,1148(sp)
10004864:	010001c4 	movi	r4,7
10004868:	20832b16 	blt	r4,r2,10005518 <___vfprintf_internal_r+0x13a0>
1000486c:	d8812787 	ldb	r2,1182(sp)
10004870:	42000204 	addi	r8,r8,8
10004874:	10000c26 	beq	r2,zero,100048a8 <___vfprintf_internal_r+0x730>
10004878:	d8811f17 	ldw	r2,1148(sp)
1000487c:	d9012784 	addi	r4,sp,1182
10004880:	18c00044 	addi	r3,r3,1
10004884:	10800044 	addi	r2,r2,1
10004888:	41000015 	stw	r4,0(r8)
1000488c:	01000044 	movi	r4,1
10004890:	41000115 	stw	r4,4(r8)
10004894:	d8c12015 	stw	r3,1152(sp)
10004898:	d8811f15 	stw	r2,1148(sp)
1000489c:	010001c4 	movi	r4,7
100048a0:	2082c416 	blt	r4,r2,100053b4 <___vfprintf_internal_r+0x123c>
100048a4:	42000204 	addi	r8,r8,8
100048a8:	d8812c17 	ldw	r2,1200(sp)
100048ac:	10000c26 	beq	r2,zero,100048e0 <___vfprintf_internal_r+0x768>
100048b0:	d8811f17 	ldw	r2,1148(sp)
100048b4:	d9012704 	addi	r4,sp,1180
100048b8:	18c00084 	addi	r3,r3,2
100048bc:	10800044 	addi	r2,r2,1
100048c0:	41000015 	stw	r4,0(r8)
100048c4:	01000084 	movi	r4,2
100048c8:	41000115 	stw	r4,4(r8)
100048cc:	d8c12015 	stw	r3,1152(sp)
100048d0:	d8811f15 	stw	r2,1148(sp)
100048d4:	010001c4 	movi	r4,7
100048d8:	2082be16 	blt	r4,r2,100053d4 <___vfprintf_internal_r+0x125c>
100048dc:	42000204 	addi	r8,r8,8
100048e0:	d9013017 	ldw	r4,1216(sp)
100048e4:	00802004 	movi	r2,128
100048e8:	20822026 	beq	r4,r2,1000516c <___vfprintf_internal_r+0xff4>
100048ec:	d9413217 	ldw	r5,1224(sp)
100048f0:	2c67c83a 	sub	r19,r5,r17
100048f4:	04c0260e 	bge	zero,r19,10004990 <___vfprintf_internal_r+0x818>
100048f8:	05400404 	movi	r21,16
100048fc:	d8811f17 	ldw	r2,1148(sp)
10004900:	acc4720e 	bge	r21,r19,10005acc <___vfprintf_internal_r+0x1954>
10004904:	01440074 	movhi	r5,4097
10004908:	2944b684 	addi	r5,r5,4826
1000490c:	d9412c15 	stw	r5,1200(sp)
10004910:	048001c4 	movi	r18,7
10004914:	00000306 	br	10004924 <___vfprintf_internal_r+0x7ac>
10004918:	9cfffc04 	addi	r19,r19,-16
1000491c:	42000204 	addi	r8,r8,8
10004920:	acc0110e 	bge	r21,r19,10004968 <___vfprintf_internal_r+0x7f0>
10004924:	18c00404 	addi	r3,r3,16
10004928:	10800044 	addi	r2,r2,1
1000492c:	45000015 	stw	r20,0(r8)
10004930:	45400115 	stw	r21,4(r8)
10004934:	d8c12015 	stw	r3,1152(sp)
10004938:	d8811f15 	stw	r2,1148(sp)
1000493c:	90bff60e 	bge	r18,r2,10004918 <__alt_data_end+0xf8004918>
10004940:	b809883a 	mov	r4,r23
10004944:	b00b883a 	mov	r5,r22
10004948:	d9811e04 	addi	r6,sp,1144
1000494c:	000b5b80 	call	1000b5b8 <__sprint_r>
10004950:	103f211e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10004954:	9cfffc04 	addi	r19,r19,-16
10004958:	d8c12017 	ldw	r3,1152(sp)
1000495c:	d8811f17 	ldw	r2,1148(sp)
10004960:	da000404 	addi	r8,sp,16
10004964:	acffef16 	blt	r21,r19,10004924 <__alt_data_end+0xf8004924>
10004968:	d9012c17 	ldw	r4,1200(sp)
1000496c:	1cc7883a 	add	r3,r3,r19
10004970:	10800044 	addi	r2,r2,1
10004974:	41000015 	stw	r4,0(r8)
10004978:	44c00115 	stw	r19,4(r8)
1000497c:	d8c12015 	stw	r3,1152(sp)
10004980:	d8811f15 	stw	r2,1148(sp)
10004984:	010001c4 	movi	r4,7
10004988:	20828216 	blt	r4,r2,10005394 <___vfprintf_internal_r+0x121c>
1000498c:	42000204 	addi	r8,r8,8
10004990:	e080400c 	andi	r2,fp,256
10004994:	1001ac1e 	bne	r2,zero,10005048 <___vfprintf_internal_r+0xed0>
10004998:	d8811f17 	ldw	r2,1148(sp)
1000499c:	d9413117 	ldw	r5,1220(sp)
100049a0:	1c47883a 	add	r3,r3,r17
100049a4:	10800044 	addi	r2,r2,1
100049a8:	41400015 	stw	r5,0(r8)
100049ac:	44400115 	stw	r17,4(r8)
100049b0:	d8c12015 	stw	r3,1152(sp)
100049b4:	d8811f15 	stw	r2,1148(sp)
100049b8:	010001c4 	movi	r4,7
100049bc:	20825d16 	blt	r4,r2,10005334 <___vfprintf_internal_r+0x11bc>
100049c0:	42000204 	addi	r8,r8,8
100049c4:	e080010c 	andi	r2,fp,4
100049c8:	10003126 	beq	r2,zero,10004a90 <___vfprintf_internal_r+0x918>
100049cc:	d8812e17 	ldw	r2,1208(sp)
100049d0:	d9012b17 	ldw	r4,1196(sp)
100049d4:	1121c83a 	sub	r16,r2,r4
100049d8:	04002d0e 	bge	zero,r16,10004a90 <___vfprintf_internal_r+0x918>
100049dc:	04400404 	movi	r17,16
100049e0:	d8811f17 	ldw	r2,1148(sp)
100049e4:	8c05340e 	bge	r17,r16,10005eb8 <___vfprintf_internal_r+0x1d40>
100049e8:	01040074 	movhi	r4,4097
100049ec:	2104ba84 	addi	r4,r4,4842
100049f0:	d9013615 	stw	r4,1240(sp)
100049f4:	048001c4 	movi	r18,7
100049f8:	00000306 	br	10004a08 <___vfprintf_internal_r+0x890>
100049fc:	843ffc04 	addi	r16,r16,-16
10004a00:	42000204 	addi	r8,r8,8
10004a04:	8c00130e 	bge	r17,r16,10004a54 <___vfprintf_internal_r+0x8dc>
10004a08:	01440074 	movhi	r5,4097
10004a0c:	18c00404 	addi	r3,r3,16
10004a10:	10800044 	addi	r2,r2,1
10004a14:	2944ba84 	addi	r5,r5,4842
10004a18:	41400015 	stw	r5,0(r8)
10004a1c:	44400115 	stw	r17,4(r8)
10004a20:	d8c12015 	stw	r3,1152(sp)
10004a24:	d8811f15 	stw	r2,1148(sp)
10004a28:	90bff40e 	bge	r18,r2,100049fc <__alt_data_end+0xf80049fc>
10004a2c:	b809883a 	mov	r4,r23
10004a30:	b00b883a 	mov	r5,r22
10004a34:	d9811e04 	addi	r6,sp,1144
10004a38:	000b5b80 	call	1000b5b8 <__sprint_r>
10004a3c:	103ee61e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10004a40:	843ffc04 	addi	r16,r16,-16
10004a44:	d8c12017 	ldw	r3,1152(sp)
10004a48:	d8811f17 	ldw	r2,1148(sp)
10004a4c:	da000404 	addi	r8,sp,16
10004a50:	8c3fed16 	blt	r17,r16,10004a08 <__alt_data_end+0xf8004a08>
10004a54:	d9013617 	ldw	r4,1240(sp)
10004a58:	1c07883a 	add	r3,r3,r16
10004a5c:	10800044 	addi	r2,r2,1
10004a60:	41000015 	stw	r4,0(r8)
10004a64:	44000115 	stw	r16,4(r8)
10004a68:	d8c12015 	stw	r3,1152(sp)
10004a6c:	d8811f15 	stw	r2,1148(sp)
10004a70:	010001c4 	movi	r4,7
10004a74:	2080060e 	bge	r4,r2,10004a90 <___vfprintf_internal_r+0x918>
10004a78:	b809883a 	mov	r4,r23
10004a7c:	b00b883a 	mov	r5,r22
10004a80:	d9811e04 	addi	r6,sp,1144
10004a84:	000b5b80 	call	1000b5b8 <__sprint_r>
10004a88:	103ed31e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10004a8c:	d8c12017 	ldw	r3,1152(sp)
10004a90:	df012b17 	ldw	fp,1196(sp)
10004a94:	d9412e17 	ldw	r5,1208(sp)
10004a98:	e140010e 	bge	fp,r5,10004aa0 <___vfprintf_internal_r+0x928>
10004a9c:	2839883a 	mov	fp,r5
10004aa0:	d8812f17 	ldw	r2,1212(sp)
10004aa4:	1705883a 	add	r2,r2,fp
10004aa8:	d8812f15 	stw	r2,1212(sp)
10004aac:	1802291e 	bne	r3,zero,10005354 <___vfprintf_internal_r+0x11dc>
10004ab0:	d8c12a17 	ldw	r3,1192(sp)
10004ab4:	d8011f15 	stw	zero,1148(sp)
10004ab8:	da000404 	addi	r8,sp,16
10004abc:	18800007 	ldb	r2,0(r3)
10004ac0:	103ded1e 	bne	r2,zero,10004278 <__alt_data_end+0xf8004278>
10004ac4:	dc012a17 	ldw	r16,1192(sp)
10004ac8:	003e0506 	br	100042e0 <__alt_data_end+0xf80042e0>
10004acc:	d9012d17 	ldw	r4,1204(sp)
10004ad0:	d9412d17 	ldw	r5,1204(sp)
10004ad4:	da012a17 	ldw	r8,1192(sp)
10004ad8:	21000017 	ldw	r4,0(r4)
10004adc:	29400117 	ldw	r5,4(r5)
10004ae0:	df012a15 	stw	fp,1192(sp)
10004ae4:	9839883a 	mov	fp,r19
10004ae8:	dcc12b03 	ldbu	r19,1196(sp)
10004aec:	d9013715 	stw	r4,1244(sp)
10004af0:	d9413915 	stw	r5,1252(sp)
10004af4:	da013f15 	stw	r8,1276(sp)
10004af8:	da413e15 	stw	r9,1272(sp)
10004afc:	dcc12785 	stb	r19,1182(sp)
10004b00:	000b2140 	call	1000b214 <__fpclassifyd>
10004b04:	d8c12d17 	ldw	r3,1204(sp)
10004b08:	04400044 	movi	r17,1
10004b0c:	da013f17 	ldw	r8,1276(sp)
10004b10:	1c800204 	addi	r18,r3,8
10004b14:	da413e17 	ldw	r9,1272(sp)
10004b18:	d9013717 	ldw	r4,1244(sp)
10004b1c:	d9413917 	ldw	r5,1252(sp)
10004b20:	1443451e 	bne	r2,r17,10005838 <___vfprintf_internal_r+0x16c0>
10004b24:	000d883a 	mov	r6,zero
10004b28:	000f883a 	mov	r7,zero
10004b2c:	000df540 	call	1000df54 <__ledf2>
10004b30:	da013f17 	ldw	r8,1276(sp)
10004b34:	1004fe16 	blt	r2,zero,10005f30 <___vfprintf_internal_r+0x1db8>
10004b38:	dcc12783 	ldbu	r19,1182(sp)
10004b3c:	008011c4 	movi	r2,71
10004b40:	14045d0e 	bge	r2,r16,10005cb8 <___vfprintf_internal_r+0x1b40>
10004b44:	01440074 	movhi	r5,4097
10004b48:	2944a704 	addi	r5,r5,4764
10004b4c:	d9413115 	stw	r5,1220(sp)
10004b50:	00c000c4 	movi	r3,3
10004b54:	00bfdfc4 	movi	r2,-129
10004b58:	d8c12b15 	stw	r3,1196(sp)
10004b5c:	e0b8703a 	and	fp,fp,r2
10004b60:	dc812d15 	stw	r18,1204(sp)
10004b64:	1823883a 	mov	r17,r3
10004b68:	d8013215 	stw	zero,1224(sp)
10004b6c:	d8013415 	stw	zero,1232(sp)
10004b70:	003f0106 	br	10004778 <__alt_data_end+0xf8004778>
10004b74:	9cc00214 	ori	r19,r19,8
10004b78:	e005883a 	mov	r2,fp
10004b7c:	e4000007 	ldb	r16,0(fp)
10004b80:	003de506 	br	10004318 <__alt_data_end+0xf8004318>
10004b84:	da012a17 	ldw	r8,1192(sp)
10004b88:	df012a15 	stw	fp,1192(sp)
10004b8c:	9f000414 	ori	fp,r19,16
10004b90:	e0c0080c 	andi	r3,fp,32
10004b94:	d8812d17 	ldw	r2,1204(sp)
10004b98:	18007626 	beq	r3,zero,10004d74 <___vfprintf_internal_r+0xbfc>
10004b9c:	d9412d17 	ldw	r5,1204(sp)
10004ba0:	14800017 	ldw	r18,0(r2)
10004ba4:	15400117 	ldw	r21,4(r2)
10004ba8:	29400204 	addi	r5,r5,8
10004bac:	d9412d15 	stw	r5,1204(sp)
10004bb0:	0005883a 	mov	r2,zero
10004bb4:	9546b03a 	or	r3,r18,r21
10004bb8:	d8012785 	stb	zero,1182(sp)
10004bbc:	da413215 	stw	r9,1224(sp)
10004bc0:	0027883a 	mov	r19,zero
10004bc4:	003ecd06 	br	100046fc <__alt_data_end+0xf80046fc>
10004bc8:	da012a17 	ldw	r8,1192(sp)
10004bcc:	df012a15 	stw	fp,1192(sp)
10004bd0:	9f000414 	ori	fp,r19,16
10004bd4:	e0c0080c 	andi	r3,fp,32
10004bd8:	d8812d17 	ldw	r2,1204(sp)
10004bdc:	18002c26 	beq	r3,zero,10004c90 <___vfprintf_internal_r+0xb18>
10004be0:	d9012d17 	ldw	r4,1204(sp)
10004be4:	14800017 	ldw	r18,0(r2)
10004be8:	15400117 	ldw	r21,4(r2)
10004bec:	21000204 	addi	r4,r4,8
10004bf0:	d9012d15 	stw	r4,1204(sp)
10004bf4:	00800044 	movi	r2,1
10004bf8:	9546b03a 	or	r3,r18,r21
10004bfc:	003fee06 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10004c00:	da012a17 	ldw	r8,1192(sp)
10004c04:	df012a15 	stw	fp,1192(sp)
10004c08:	9839883a 	mov	fp,r19
10004c0c:	dcc12b03 	ldbu	r19,1196(sp)
10004c10:	01440074 	movhi	r5,4097
10004c14:	2944aa04 	addi	r5,r5,4776
10004c18:	dcc12785 	stb	r19,1182(sp)
10004c1c:	d9413b15 	stw	r5,1260(sp)
10004c20:	e0c0080c 	andi	r3,fp,32
10004c24:	d8812d17 	ldw	r2,1204(sp)
10004c28:	18002e26 	beq	r3,zero,10004ce4 <___vfprintf_internal_r+0xb6c>
10004c2c:	d9412d17 	ldw	r5,1204(sp)
10004c30:	14800017 	ldw	r18,0(r2)
10004c34:	15400117 	ldw	r21,4(r2)
10004c38:	29400204 	addi	r5,r5,8
10004c3c:	d9412d15 	stw	r5,1204(sp)
10004c40:	e080004c 	andi	r2,fp,1
10004c44:	10025c26 	beq	r2,zero,100055b8 <___vfprintf_internal_r+0x1440>
10004c48:	9546b03a 	or	r3,r18,r21
10004c4c:	18038f26 	beq	r3,zero,10005a8c <___vfprintf_internal_r+0x1914>
10004c50:	00800c04 	movi	r2,48
10004c54:	d8812705 	stb	r2,1180(sp)
10004c58:	dc012745 	stb	r16,1181(sp)
10004c5c:	e7000094 	ori	fp,fp,2
10004c60:	00800084 	movi	r2,2
10004c64:	003fd406 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10004c68:	9cc00814 	ori	r19,r19,32
10004c6c:	e005883a 	mov	r2,fp
10004c70:	e4000007 	ldb	r16,0(fp)
10004c74:	003da806 	br	10004318 <__alt_data_end+0xf8004318>
10004c78:	da012a17 	ldw	r8,1192(sp)
10004c7c:	df012a15 	stw	fp,1192(sp)
10004c80:	9839883a 	mov	fp,r19
10004c84:	e0c0080c 	andi	r3,fp,32
10004c88:	d8812d17 	ldw	r2,1204(sp)
10004c8c:	183fd41e 	bne	r3,zero,10004be0 <__alt_data_end+0xf8004be0>
10004c90:	e0c0040c 	andi	r3,fp,16
10004c94:	18035f26 	beq	r3,zero,10005a14 <___vfprintf_internal_r+0x189c>
10004c98:	d9412d17 	ldw	r5,1204(sp)
10004c9c:	14800017 	ldw	r18,0(r2)
10004ca0:	002b883a 	mov	r21,zero
10004ca4:	29400104 	addi	r5,r5,4
10004ca8:	d9412d15 	stw	r5,1204(sp)
10004cac:	00800044 	movi	r2,1
10004cb0:	9007883a 	mov	r3,r18
10004cb4:	003fc006 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10004cb8:	da012a17 	ldw	r8,1192(sp)
10004cbc:	df012a15 	stw	fp,1192(sp)
10004cc0:	9839883a 	mov	fp,r19
10004cc4:	dcc12b03 	ldbu	r19,1196(sp)
10004cc8:	01040074 	movhi	r4,4097
10004ccc:	2104af04 	addi	r4,r4,4796
10004cd0:	d9013b15 	stw	r4,1260(sp)
10004cd4:	dcc12785 	stb	r19,1182(sp)
10004cd8:	e0c0080c 	andi	r3,fp,32
10004cdc:	d8812d17 	ldw	r2,1204(sp)
10004ce0:	183fd21e 	bne	r3,zero,10004c2c <__alt_data_end+0xf8004c2c>
10004ce4:	e0c0040c 	andi	r3,fp,16
10004ce8:	18035426 	beq	r3,zero,10005a3c <___vfprintf_internal_r+0x18c4>
10004cec:	d8c12d17 	ldw	r3,1204(sp)
10004cf0:	14800017 	ldw	r18,0(r2)
10004cf4:	002b883a 	mov	r21,zero
10004cf8:	18c00104 	addi	r3,r3,4
10004cfc:	d8c12d15 	stw	r3,1204(sp)
10004d00:	003fcf06 	br	10004c40 <__alt_data_end+0xf8004c40>
10004d04:	e4000007 	ldb	r16,0(fp)
10004d08:	00801b04 	movi	r2,108
10004d0c:	8083f726 	beq	r16,r2,10005cec <___vfprintf_internal_r+0x1b74>
10004d10:	9cc00414 	ori	r19,r19,16
10004d14:	e005883a 	mov	r2,fp
10004d18:	003d7f06 	br	10004318 <__alt_data_end+0xf8004318>
10004d1c:	da012a17 	ldw	r8,1192(sp)
10004d20:	df012a15 	stw	fp,1192(sp)
10004d24:	9839883a 	mov	fp,r19
10004d28:	dcc12b03 	ldbu	r19,1196(sp)
10004d2c:	e080080c 	andi	r2,fp,32
10004d30:	dcc12785 	stb	r19,1182(sp)
10004d34:	10032226 	beq	r2,zero,100059c0 <___vfprintf_internal_r+0x1848>
10004d38:	d9412d17 	ldw	r5,1204(sp)
10004d3c:	d9012f17 	ldw	r4,1212(sp)
10004d40:	28800017 	ldw	r2,0(r5)
10004d44:	2007d7fa 	srai	r3,r4,31
10004d48:	29400104 	addi	r5,r5,4
10004d4c:	d9412d15 	stw	r5,1204(sp)
10004d50:	11000015 	stw	r4,0(r2)
10004d54:	10c00115 	stw	r3,4(r2)
10004d58:	003d4406 	br	1000426c <__alt_data_end+0xf800426c>
10004d5c:	da012a17 	ldw	r8,1192(sp)
10004d60:	df012a15 	stw	fp,1192(sp)
10004d64:	9839883a 	mov	fp,r19
10004d68:	e0c0080c 	andi	r3,fp,32
10004d6c:	d8812d17 	ldw	r2,1204(sp)
10004d70:	183f8a1e 	bne	r3,zero,10004b9c <__alt_data_end+0xf8004b9c>
10004d74:	e0c0040c 	andi	r3,fp,16
10004d78:	18031c26 	beq	r3,zero,100059ec <___vfprintf_internal_r+0x1874>
10004d7c:	14800017 	ldw	r18,0(r2)
10004d80:	d8812d17 	ldw	r2,1204(sp)
10004d84:	002b883a 	mov	r21,zero
10004d88:	9007883a 	mov	r3,r18
10004d8c:	10800104 	addi	r2,r2,4
10004d90:	d8812d15 	stw	r2,1204(sp)
10004d94:	0005883a 	mov	r2,zero
10004d98:	003f8706 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10004d9c:	d9412d17 	ldw	r5,1204(sp)
10004da0:	00800c04 	movi	r2,48
10004da4:	d8812705 	stb	r2,1180(sp)
10004da8:	2c800017 	ldw	r18,0(r5)
10004dac:	00801e04 	movi	r2,120
10004db0:	d8812745 	stb	r2,1181(sp)
10004db4:	00840074 	movhi	r2,4097
10004db8:	1084af04 	addi	r2,r2,4796
10004dbc:	29400104 	addi	r5,r5,4
10004dc0:	da012a17 	ldw	r8,1192(sp)
10004dc4:	d8813b15 	stw	r2,1260(sp)
10004dc8:	df012a15 	stw	fp,1192(sp)
10004dcc:	002b883a 	mov	r21,zero
10004dd0:	9f000094 	ori	fp,r19,2
10004dd4:	d9412d15 	stw	r5,1204(sp)
10004dd8:	00800084 	movi	r2,2
10004ddc:	04001e04 	movi	r16,120
10004de0:	9007883a 	mov	r3,r18
10004de4:	003f7406 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10004de8:	da012a17 	ldw	r8,1192(sp)
10004dec:	df012a15 	stw	fp,1192(sp)
10004df0:	9839883a 	mov	fp,r19
10004df4:	dcc12b03 	ldbu	r19,1196(sp)
10004df8:	e080080c 	andi	r2,fp,32
10004dfc:	d8c12d17 	ldw	r3,1204(sp)
10004e00:	dcc12785 	stb	r19,1182(sp)
10004e04:	103e321e 	bne	r2,zero,100046d0 <__alt_data_end+0xf80046d0>
10004e08:	e080040c 	andi	r2,fp,16
10004e0c:	10031326 	beq	r2,zero,10005a5c <___vfprintf_internal_r+0x18e4>
10004e10:	1c800017 	ldw	r18,0(r3)
10004e14:	d9412d17 	ldw	r5,1204(sp)
10004e18:	902bd7fa 	srai	r21,r18,31
10004e1c:	29400104 	addi	r5,r5,4
10004e20:	d9412d15 	stw	r5,1204(sp)
10004e24:	a805883a 	mov	r2,r21
10004e28:	003e2f06 	br	100046e8 <__alt_data_end+0xf80046e8>
10004e2c:	9cc01014 	ori	r19,r19,64
10004e30:	e005883a 	mov	r2,fp
10004e34:	e4000007 	ldb	r16,0(fp)
10004e38:	003d3706 	br	10004318 <__alt_data_end+0xf8004318>
10004e3c:	d8c12d17 	ldw	r3,1204(sp)
10004e40:	d9012d17 	ldw	r4,1204(sp)
10004e44:	da012a17 	ldw	r8,1192(sp)
10004e48:	18800017 	ldw	r2,0(r3)
10004e4c:	21000104 	addi	r4,r4,4
10004e50:	00c00044 	movi	r3,1
10004e54:	df012a15 	stw	fp,1192(sp)
10004e58:	d8c12b15 	stw	r3,1196(sp)
10004e5c:	9839883a 	mov	fp,r19
10004e60:	d8012785 	stb	zero,1182(sp)
10004e64:	d8810405 	stb	r2,1040(sp)
10004e68:	d9012d15 	stw	r4,1204(sp)
10004e6c:	1823883a 	mov	r17,r3
10004e70:	d8c10404 	addi	r3,sp,1040
10004e74:	d8013215 	stw	zero,1224(sp)
10004e78:	d8013415 	stw	zero,1232(sp)
10004e7c:	d8c13115 	stw	r3,1220(sp)
10004e80:	0005883a 	mov	r2,zero
10004e84:	003e4306 	br	10004794 <__alt_data_end+0xf8004794>
10004e88:	d8812b07 	ldb	r2,1196(sp)
10004e8c:	1002fc1e 	bne	r2,zero,10005a80 <___vfprintf_internal_r+0x1908>
10004e90:	00c00804 	movi	r3,32
10004e94:	d8c12b05 	stb	r3,1196(sp)
10004e98:	e005883a 	mov	r2,fp
10004e9c:	e4000007 	ldb	r16,0(fp)
10004ea0:	003d1d06 	br	10004318 <__alt_data_end+0xf8004318>
10004ea4:	9cc00054 	ori	r19,r19,1
10004ea8:	e005883a 	mov	r2,fp
10004eac:	e4000007 	ldb	r16,0(fp)
10004eb0:	003d1906 	br	10004318 <__alt_data_end+0xf8004318>
10004eb4:	d9012d17 	ldw	r4,1204(sp)
10004eb8:	d9412d17 	ldw	r5,1204(sp)
10004ebc:	21000017 	ldw	r4,0(r4)
10004ec0:	28c00104 	addi	r3,r5,4
10004ec4:	d9012e15 	stw	r4,1208(sp)
10004ec8:	20038c16 	blt	r4,zero,10005cfc <___vfprintf_internal_r+0x1b84>
10004ecc:	d8c12d15 	stw	r3,1204(sp)
10004ed0:	e005883a 	mov	r2,fp
10004ed4:	e4000007 	ldb	r16,0(fp)
10004ed8:	003d0f06 	br	10004318 <__alt_data_end+0xf8004318>
10004edc:	00c00ac4 	movi	r3,43
10004ee0:	d8c12b05 	stb	r3,1196(sp)
10004ee4:	e005883a 	mov	r2,fp
10004ee8:	e4000007 	ldb	r16,0(fp)
10004eec:	003d0a06 	br	10004318 <__alt_data_end+0xf8004318>
10004ef0:	d8c12d17 	ldw	r3,1204(sp)
10004ef4:	d9012d17 	ldw	r4,1204(sp)
10004ef8:	da012a17 	ldw	r8,1192(sp)
10004efc:	18c00017 	ldw	r3,0(r3)
10004f00:	df012a15 	stw	fp,1192(sp)
10004f04:	d8012785 	stb	zero,1182(sp)
10004f08:	d8c13115 	stw	r3,1220(sp)
10004f0c:	9839883a 	mov	fp,r19
10004f10:	24800104 	addi	r18,r4,4
10004f14:	1803f726 	beq	r3,zero,10005ef4 <___vfprintf_internal_r+0x1d7c>
10004f18:	d9013117 	ldw	r4,1220(sp)
10004f1c:	48038916 	blt	r9,zero,10005d44 <___vfprintf_internal_r+0x1bcc>
10004f20:	480d883a 	mov	r6,r9
10004f24:	000b883a 	mov	r5,zero
10004f28:	da013f15 	stw	r8,1276(sp)
10004f2c:	da413e15 	stw	r9,1272(sp)
10004f30:	000978c0 	call	1000978c <memchr>
10004f34:	da013f17 	ldw	r8,1276(sp)
10004f38:	da413e17 	ldw	r9,1272(sp)
10004f3c:	10045926 	beq	r2,zero,100060a4 <___vfprintf_internal_r+0x1f2c>
10004f40:	d8c13117 	ldw	r3,1220(sp)
10004f44:	10e3c83a 	sub	r17,r2,r3
10004f48:	4c433516 	blt	r9,r17,10005c20 <___vfprintf_internal_r+0x1aa8>
10004f4c:	8805883a 	mov	r2,r17
10004f50:	88038116 	blt	r17,zero,10005d58 <___vfprintf_internal_r+0x1be0>
10004f54:	dcc12783 	ldbu	r19,1182(sp)
10004f58:	d8812b15 	stw	r2,1196(sp)
10004f5c:	dc812d15 	stw	r18,1204(sp)
10004f60:	d8013215 	stw	zero,1224(sp)
10004f64:	d8013415 	stw	zero,1232(sp)
10004f68:	003e0306 	br	10004778 <__alt_data_end+0xf8004778>
10004f6c:	da012a17 	ldw	r8,1192(sp)
10004f70:	df012a15 	stw	fp,1192(sp)
10004f74:	9839883a 	mov	fp,r19
10004f78:	dcc12b03 	ldbu	r19,1196(sp)
10004f7c:	dcc12785 	stb	r19,1182(sp)
10004f80:	803d8f26 	beq	r16,zero,100045c0 <__alt_data_end+0xf80045c0>
10004f84:	00c00044 	movi	r3,1
10004f88:	d8c12b15 	stw	r3,1196(sp)
10004f8c:	dc010405 	stb	r16,1040(sp)
10004f90:	d8012785 	stb	zero,1182(sp)
10004f94:	003fb506 	br	10004e6c <__alt_data_end+0xf8004e6c>
10004f98:	d8c12017 	ldw	r3,1152(sp)
10004f9c:	003e3506 	br	10004874 <__alt_data_end+0xf8004874>
10004fa0:	10803fcc 	andi	r2,r2,255
10004fa4:	00c00044 	movi	r3,1
10004fa8:	10fddc1e 	bne	r2,r3,1000471c <__alt_data_end+0xf800471c>
10004fac:	a800021e 	bne	r21,zero,10004fb8 <___vfprintf_internal_r+0xe40>
10004fb0:	00800244 	movi	r2,9
10004fb4:	14801e2e 	bgeu	r2,r18,10005030 <___vfprintf_internal_r+0xeb8>
10004fb8:	dc012b15 	stw	r16,1196(sp)
10004fbc:	dc410e04 	addi	r17,sp,1080
10004fc0:	9021883a 	mov	r16,r18
10004fc4:	da012c15 	stw	r8,1200(sp)
10004fc8:	a825883a 	mov	r18,r21
10004fcc:	482b883a 	mov	r21,r9
10004fd0:	8009883a 	mov	r4,r16
10004fd4:	900b883a 	mov	r5,r18
10004fd8:	01800284 	movi	r6,10
10004fdc:	000f883a 	mov	r7,zero
10004fe0:	00024980 	call	10002498 <__umoddi3>
10004fe4:	10800c04 	addi	r2,r2,48
10004fe8:	8c7fffc4 	addi	r17,r17,-1
10004fec:	8009883a 	mov	r4,r16
10004ff0:	900b883a 	mov	r5,r18
10004ff4:	01800284 	movi	r6,10
10004ff8:	000f883a 	mov	r7,zero
10004ffc:	88800005 	stb	r2,0(r17)
10005000:	0001e580 	call	10001e58 <__udivdi3>
10005004:	1021883a 	mov	r16,r2
10005008:	10c4b03a 	or	r2,r2,r3
1000500c:	1825883a 	mov	r18,r3
10005010:	103fef1e 	bne	r2,zero,10004fd0 <__alt_data_end+0xf8004fd0>
10005014:	d9012817 	ldw	r4,1184(sp)
10005018:	dc413115 	stw	r17,1220(sp)
1000501c:	dc012b17 	ldw	r16,1196(sp)
10005020:	da012c17 	ldw	r8,1200(sp)
10005024:	a813883a 	mov	r9,r21
10005028:	2463c83a 	sub	r17,r4,r17
1000502c:	003dcd06 	br	10004764 <__alt_data_end+0xf8004764>
10005030:	94800c04 	addi	r18,r18,48
10005034:	d8c10dc4 	addi	r3,sp,1079
10005038:	dc810dc5 	stb	r18,1079(sp)
1000503c:	dc413c17 	ldw	r17,1264(sp)
10005040:	d8c13115 	stw	r3,1220(sp)
10005044:	003dc706 	br	10004764 <__alt_data_end+0xf8004764>
10005048:	00801944 	movi	r2,101
1000504c:	1400720e 	bge	r2,r16,10005218 <___vfprintf_internal_r+0x10a0>
10005050:	d9013717 	ldw	r4,1244(sp)
10005054:	d9413917 	ldw	r5,1252(sp)
10005058:	000d883a 	mov	r6,zero
1000505c:	000f883a 	mov	r7,zero
10005060:	d8c13d15 	stw	r3,1268(sp)
10005064:	da013f15 	stw	r8,1276(sp)
10005068:	000ddf00 	call	1000ddf0 <__eqdf2>
1000506c:	d8c13d17 	ldw	r3,1268(sp)
10005070:	da013f17 	ldw	r8,1276(sp)
10005074:	1000f41e 	bne	r2,zero,10005448 <___vfprintf_internal_r+0x12d0>
10005078:	d8811f17 	ldw	r2,1148(sp)
1000507c:	01040074 	movhi	r4,4097
10005080:	2104b604 	addi	r4,r4,4824
10005084:	18c00044 	addi	r3,r3,1
10005088:	10800044 	addi	r2,r2,1
1000508c:	41000015 	stw	r4,0(r8)
10005090:	01000044 	movi	r4,1
10005094:	41000115 	stw	r4,4(r8)
10005098:	d8c12015 	stw	r3,1152(sp)
1000509c:	d8811f15 	stw	r2,1148(sp)
100050a0:	010001c4 	movi	r4,7
100050a4:	20828d16 	blt	r4,r2,10005adc <___vfprintf_internal_r+0x1964>
100050a8:	42000204 	addi	r8,r8,8
100050ac:	d8812617 	ldw	r2,1176(sp)
100050b0:	d9413317 	ldw	r5,1228(sp)
100050b4:	11400216 	blt	r2,r5,100050c0 <___vfprintf_internal_r+0xf48>
100050b8:	e080004c 	andi	r2,fp,1
100050bc:	103e4126 	beq	r2,zero,100049c4 <__alt_data_end+0xf80049c4>
100050c0:	d8813817 	ldw	r2,1248(sp)
100050c4:	d9013517 	ldw	r4,1236(sp)
100050c8:	d9413817 	ldw	r5,1248(sp)
100050cc:	1887883a 	add	r3,r3,r2
100050d0:	d8811f17 	ldw	r2,1148(sp)
100050d4:	41000015 	stw	r4,0(r8)
100050d8:	41400115 	stw	r5,4(r8)
100050dc:	10800044 	addi	r2,r2,1
100050e0:	d8c12015 	stw	r3,1152(sp)
100050e4:	d8811f15 	stw	r2,1148(sp)
100050e8:	010001c4 	movi	r4,7
100050ec:	20830916 	blt	r4,r2,10005d14 <___vfprintf_internal_r+0x1b9c>
100050f0:	42000204 	addi	r8,r8,8
100050f4:	d8813317 	ldw	r2,1228(sp)
100050f8:	143fffc4 	addi	r16,r2,-1
100050fc:	043e310e 	bge	zero,r16,100049c4 <__alt_data_end+0xf80049c4>
10005100:	04400404 	movi	r17,16
10005104:	d8811f17 	ldw	r2,1148(sp)
10005108:	8c007e0e 	bge	r17,r16,10005304 <___vfprintf_internal_r+0x118c>
1000510c:	01440074 	movhi	r5,4097
10005110:	2944b684 	addi	r5,r5,4826
10005114:	d9412c15 	stw	r5,1200(sp)
10005118:	04c001c4 	movi	r19,7
1000511c:	00000306 	br	1000512c <___vfprintf_internal_r+0xfb4>
10005120:	42000204 	addi	r8,r8,8
10005124:	843ffc04 	addi	r16,r16,-16
10005128:	8c00790e 	bge	r17,r16,10005310 <___vfprintf_internal_r+0x1198>
1000512c:	18c00404 	addi	r3,r3,16
10005130:	10800044 	addi	r2,r2,1
10005134:	45000015 	stw	r20,0(r8)
10005138:	44400115 	stw	r17,4(r8)
1000513c:	d8c12015 	stw	r3,1152(sp)
10005140:	d8811f15 	stw	r2,1148(sp)
10005144:	98bff60e 	bge	r19,r2,10005120 <__alt_data_end+0xf8005120>
10005148:	b809883a 	mov	r4,r23
1000514c:	b00b883a 	mov	r5,r22
10005150:	d9811e04 	addi	r6,sp,1144
10005154:	000b5b80 	call	1000b5b8 <__sprint_r>
10005158:	103d1f1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
1000515c:	d8c12017 	ldw	r3,1152(sp)
10005160:	d8811f17 	ldw	r2,1148(sp)
10005164:	da000404 	addi	r8,sp,16
10005168:	003fee06 	br	10005124 <__alt_data_end+0xf8005124>
1000516c:	d9412e17 	ldw	r5,1208(sp)
10005170:	d8812b17 	ldw	r2,1196(sp)
10005174:	28a7c83a 	sub	r19,r5,r2
10005178:	04fddc0e 	bge	zero,r19,100048ec <__alt_data_end+0xf80048ec>
1000517c:	05400404 	movi	r21,16
10005180:	d8811f17 	ldw	r2,1148(sp)
10005184:	acc3870e 	bge	r21,r19,10005fa4 <___vfprintf_internal_r+0x1e2c>
10005188:	01440074 	movhi	r5,4097
1000518c:	2944b684 	addi	r5,r5,4826
10005190:	d9412c15 	stw	r5,1200(sp)
10005194:	048001c4 	movi	r18,7
10005198:	00000306 	br	100051a8 <___vfprintf_internal_r+0x1030>
1000519c:	9cfffc04 	addi	r19,r19,-16
100051a0:	42000204 	addi	r8,r8,8
100051a4:	acc0110e 	bge	r21,r19,100051ec <___vfprintf_internal_r+0x1074>
100051a8:	18c00404 	addi	r3,r3,16
100051ac:	10800044 	addi	r2,r2,1
100051b0:	45000015 	stw	r20,0(r8)
100051b4:	45400115 	stw	r21,4(r8)
100051b8:	d8c12015 	stw	r3,1152(sp)
100051bc:	d8811f15 	stw	r2,1148(sp)
100051c0:	90bff60e 	bge	r18,r2,1000519c <__alt_data_end+0xf800519c>
100051c4:	b809883a 	mov	r4,r23
100051c8:	b00b883a 	mov	r5,r22
100051cc:	d9811e04 	addi	r6,sp,1144
100051d0:	000b5b80 	call	1000b5b8 <__sprint_r>
100051d4:	103d001e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100051d8:	9cfffc04 	addi	r19,r19,-16
100051dc:	d8c12017 	ldw	r3,1152(sp)
100051e0:	d8811f17 	ldw	r2,1148(sp)
100051e4:	da000404 	addi	r8,sp,16
100051e8:	acffef16 	blt	r21,r19,100051a8 <__alt_data_end+0xf80051a8>
100051ec:	d9012c17 	ldw	r4,1200(sp)
100051f0:	1cc7883a 	add	r3,r3,r19
100051f4:	10800044 	addi	r2,r2,1
100051f8:	41000015 	stw	r4,0(r8)
100051fc:	44c00115 	stw	r19,4(r8)
10005200:	d8c12015 	stw	r3,1152(sp)
10005204:	d8811f15 	stw	r2,1148(sp)
10005208:	010001c4 	movi	r4,7
1000520c:	20817816 	blt	r4,r2,100057f0 <___vfprintf_internal_r+0x1678>
10005210:	42000204 	addi	r8,r8,8
10005214:	003db506 	br	100048ec <__alt_data_end+0xf80048ec>
10005218:	d9413317 	ldw	r5,1228(sp)
1000521c:	00800044 	movi	r2,1
10005220:	18c00044 	addi	r3,r3,1
10005224:	11413e0e 	bge	r2,r5,10005720 <___vfprintf_internal_r+0x15a8>
10005228:	dc011f17 	ldw	r16,1148(sp)
1000522c:	d8813117 	ldw	r2,1220(sp)
10005230:	d8c12015 	stw	r3,1152(sp)
10005234:	84000044 	addi	r16,r16,1
10005238:	40800015 	stw	r2,0(r8)
1000523c:	00800044 	movi	r2,1
10005240:	40800115 	stw	r2,4(r8)
10005244:	dc011f15 	stw	r16,1148(sp)
10005248:	008001c4 	movi	r2,7
1000524c:	14015616 	blt	r2,r16,100057a8 <___vfprintf_internal_r+0x1630>
10005250:	42000204 	addi	r8,r8,8
10005254:	d9013817 	ldw	r4,1248(sp)
10005258:	d9413517 	ldw	r5,1236(sp)
1000525c:	84000044 	addi	r16,r16,1
10005260:	1907883a 	add	r3,r3,r4
10005264:	41400015 	stw	r5,0(r8)
10005268:	41000115 	stw	r4,4(r8)
1000526c:	d8c12015 	stw	r3,1152(sp)
10005270:	dc011f15 	stw	r16,1148(sp)
10005274:	008001c4 	movi	r2,7
10005278:	14015416 	blt	r2,r16,100057cc <___vfprintf_internal_r+0x1654>
1000527c:	44400204 	addi	r17,r8,8
10005280:	d9013717 	ldw	r4,1244(sp)
10005284:	d9413917 	ldw	r5,1252(sp)
10005288:	000d883a 	mov	r6,zero
1000528c:	000f883a 	mov	r7,zero
10005290:	d8c13d15 	stw	r3,1268(sp)
10005294:	000ddf00 	call	1000ddf0 <__eqdf2>
10005298:	d8c13d17 	ldw	r3,1268(sp)
1000529c:	1000a726 	beq	r2,zero,1000553c <___vfprintf_internal_r+0x13c4>
100052a0:	d9013317 	ldw	r4,1228(sp)
100052a4:	d9413117 	ldw	r5,1220(sp)
100052a8:	84000044 	addi	r16,r16,1
100052ac:	20bfffc4 	addi	r2,r4,-1
100052b0:	1887883a 	add	r3,r3,r2
100052b4:	29000044 	addi	r4,r5,1
100052b8:	88800115 	stw	r2,4(r17)
100052bc:	89000015 	stw	r4,0(r17)
100052c0:	d8c12015 	stw	r3,1152(sp)
100052c4:	dc011f15 	stw	r16,1148(sp)
100052c8:	008001c4 	movi	r2,7
100052cc:	14012d16 	blt	r2,r16,10005784 <___vfprintf_internal_r+0x160c>
100052d0:	8c400204 	addi	r17,r17,8
100052d4:	d9413a17 	ldw	r5,1256(sp)
100052d8:	dcc122c4 	addi	r19,sp,1163
100052dc:	84000044 	addi	r16,r16,1
100052e0:	28c7883a 	add	r3,r5,r3
100052e4:	8cc00015 	stw	r19,0(r17)
100052e8:	89400115 	stw	r5,4(r17)
100052ec:	d8c12015 	stw	r3,1152(sp)
100052f0:	dc011f15 	stw	r16,1148(sp)
100052f4:	008001c4 	movi	r2,7
100052f8:	14000e16 	blt	r2,r16,10005334 <___vfprintf_internal_r+0x11bc>
100052fc:	8a000204 	addi	r8,r17,8
10005300:	003db006 	br	100049c4 <__alt_data_end+0xf80049c4>
10005304:	01040074 	movhi	r4,4097
10005308:	2104b684 	addi	r4,r4,4826
1000530c:	d9012c15 	stw	r4,1200(sp)
10005310:	d9012c17 	ldw	r4,1200(sp)
10005314:	1c07883a 	add	r3,r3,r16
10005318:	44000115 	stw	r16,4(r8)
1000531c:	41000015 	stw	r4,0(r8)
10005320:	10800044 	addi	r2,r2,1
10005324:	d8c12015 	stw	r3,1152(sp)
10005328:	d8811f15 	stw	r2,1148(sp)
1000532c:	010001c4 	movi	r4,7
10005330:	20bda30e 	bge	r4,r2,100049c0 <__alt_data_end+0xf80049c0>
10005334:	b809883a 	mov	r4,r23
10005338:	b00b883a 	mov	r5,r22
1000533c:	d9811e04 	addi	r6,sp,1144
10005340:	000b5b80 	call	1000b5b8 <__sprint_r>
10005344:	103ca41e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005348:	d8c12017 	ldw	r3,1152(sp)
1000534c:	da000404 	addi	r8,sp,16
10005350:	003d9c06 	br	100049c4 <__alt_data_end+0xf80049c4>
10005354:	b809883a 	mov	r4,r23
10005358:	b00b883a 	mov	r5,r22
1000535c:	d9811e04 	addi	r6,sp,1144
10005360:	000b5b80 	call	1000b5b8 <__sprint_r>
10005364:	103dd226 	beq	r2,zero,10004ab0 <__alt_data_end+0xf8004ab0>
10005368:	003c9b06 	br	100045d8 <__alt_data_end+0xf80045d8>
1000536c:	10803fcc 	andi	r2,r2,255
10005370:	1000311e 	bne	r2,zero,10005438 <___vfprintf_internal_r+0x12c0>
10005374:	e080004c 	andi	r2,fp,1
10005378:	10002f26 	beq	r2,zero,10005438 <___vfprintf_internal_r+0x12c0>
1000537c:	00800c04 	movi	r2,48
10005380:	d8c10dc4 	addi	r3,sp,1079
10005384:	d8810dc5 	stb	r2,1079(sp)
10005388:	dc413c17 	ldw	r17,1264(sp)
1000538c:	d8c13115 	stw	r3,1220(sp)
10005390:	003cf406 	br	10004764 <__alt_data_end+0xf8004764>
10005394:	b809883a 	mov	r4,r23
10005398:	b00b883a 	mov	r5,r22
1000539c:	d9811e04 	addi	r6,sp,1144
100053a0:	000b5b80 	call	1000b5b8 <__sprint_r>
100053a4:	103c8c1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100053a8:	d8c12017 	ldw	r3,1152(sp)
100053ac:	da000404 	addi	r8,sp,16
100053b0:	003d7706 	br	10004990 <__alt_data_end+0xf8004990>
100053b4:	b809883a 	mov	r4,r23
100053b8:	b00b883a 	mov	r5,r22
100053bc:	d9811e04 	addi	r6,sp,1144
100053c0:	000b5b80 	call	1000b5b8 <__sprint_r>
100053c4:	103c841e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100053c8:	d8c12017 	ldw	r3,1152(sp)
100053cc:	da000404 	addi	r8,sp,16
100053d0:	003d3506 	br	100048a8 <__alt_data_end+0xf80048a8>
100053d4:	b809883a 	mov	r4,r23
100053d8:	b00b883a 	mov	r5,r22
100053dc:	d9811e04 	addi	r6,sp,1144
100053e0:	000b5b80 	call	1000b5b8 <__sprint_r>
100053e4:	103c7c1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100053e8:	d8c12017 	ldw	r3,1152(sp)
100053ec:	da000404 	addi	r8,sp,16
100053f0:	003d3b06 	br	100048e0 <__alt_data_end+0xf80048e0>
100053f4:	d9413b17 	ldw	r5,1260(sp)
100053f8:	d8c10e04 	addi	r3,sp,1080
100053fc:	908003cc 	andi	r2,r18,15
10005400:	a808973a 	slli	r4,r21,28
10005404:	2885883a 	add	r2,r5,r2
10005408:	9024d13a 	srli	r18,r18,4
1000540c:	10800003 	ldbu	r2,0(r2)
10005410:	a82ad13a 	srli	r21,r21,4
10005414:	18ffffc4 	addi	r3,r3,-1
10005418:	24a4b03a 	or	r18,r4,r18
1000541c:	18800005 	stb	r2,0(r3)
10005420:	9544b03a 	or	r2,r18,r21
10005424:	103ff51e 	bne	r2,zero,100053fc <__alt_data_end+0xf80053fc>
10005428:	d9412817 	ldw	r5,1184(sp)
1000542c:	d8c13115 	stw	r3,1220(sp)
10005430:	28e3c83a 	sub	r17,r5,r3
10005434:	003ccb06 	br	10004764 <__alt_data_end+0xf8004764>
10005438:	d8c10e04 	addi	r3,sp,1080
1000543c:	0023883a 	mov	r17,zero
10005440:	d8c13115 	stw	r3,1220(sp)
10005444:	003cc706 	br	10004764 <__alt_data_end+0xf8004764>
10005448:	dc012617 	ldw	r16,1176(sp)
1000544c:	0401ab0e 	bge	zero,r16,10005afc <___vfprintf_internal_r+0x1984>
10005450:	d8813317 	ldw	r2,1228(sp)
10005454:	d9413117 	ldw	r5,1220(sp)
10005458:	d9013417 	ldw	r4,1232(sp)
1000545c:	1023883a 	mov	r17,r2
10005460:	28a1883a 	add	r16,r5,r2
10005464:	2080010e 	bge	r4,r2,1000546c <___vfprintf_internal_r+0x12f4>
10005468:	2023883a 	mov	r17,r4
1000546c:	04400b0e 	bge	zero,r17,1000549c <___vfprintf_internal_r+0x1324>
10005470:	d8811f17 	ldw	r2,1148(sp)
10005474:	d9413117 	ldw	r5,1220(sp)
10005478:	1c47883a 	add	r3,r3,r17
1000547c:	10800044 	addi	r2,r2,1
10005480:	41400015 	stw	r5,0(r8)
10005484:	44400115 	stw	r17,4(r8)
10005488:	d8c12015 	stw	r3,1152(sp)
1000548c:	d8811f15 	stw	r2,1148(sp)
10005490:	010001c4 	movi	r4,7
10005494:	20826716 	blt	r4,r2,10005e34 <___vfprintf_internal_r+0x1cbc>
10005498:	42000204 	addi	r8,r8,8
1000549c:	88026316 	blt	r17,zero,10005e2c <___vfprintf_internal_r+0x1cb4>
100054a0:	d8813417 	ldw	r2,1232(sp)
100054a4:	1463c83a 	sub	r17,r2,r17
100054a8:	0440590e 	bge	zero,r17,10005610 <___vfprintf_internal_r+0x1498>
100054ac:	04c00404 	movi	r19,16
100054b0:	d8811f17 	ldw	r2,1148(sp)
100054b4:	9c41770e 	bge	r19,r17,10005a94 <___vfprintf_internal_r+0x191c>
100054b8:	01440074 	movhi	r5,4097
100054bc:	2944b684 	addi	r5,r5,4826
100054c0:	d9412c15 	stw	r5,1200(sp)
100054c4:	054001c4 	movi	r21,7
100054c8:	00000306 	br	100054d8 <___vfprintf_internal_r+0x1360>
100054cc:	42000204 	addi	r8,r8,8
100054d0:	8c7ffc04 	addi	r17,r17,-16
100054d4:	9c41720e 	bge	r19,r17,10005aa0 <___vfprintf_internal_r+0x1928>
100054d8:	18c00404 	addi	r3,r3,16
100054dc:	10800044 	addi	r2,r2,1
100054e0:	45000015 	stw	r20,0(r8)
100054e4:	44c00115 	stw	r19,4(r8)
100054e8:	d8c12015 	stw	r3,1152(sp)
100054ec:	d8811f15 	stw	r2,1148(sp)
100054f0:	a8bff60e 	bge	r21,r2,100054cc <__alt_data_end+0xf80054cc>
100054f4:	b809883a 	mov	r4,r23
100054f8:	b00b883a 	mov	r5,r22
100054fc:	d9811e04 	addi	r6,sp,1144
10005500:	000b5b80 	call	1000b5b8 <__sprint_r>
10005504:	103c341e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005508:	d8c12017 	ldw	r3,1152(sp)
1000550c:	d8811f17 	ldw	r2,1148(sp)
10005510:	da000404 	addi	r8,sp,16
10005514:	003fee06 	br	100054d0 <__alt_data_end+0xf80054d0>
10005518:	b809883a 	mov	r4,r23
1000551c:	b00b883a 	mov	r5,r22
10005520:	d9811e04 	addi	r6,sp,1144
10005524:	000b5b80 	call	1000b5b8 <__sprint_r>
10005528:	103c2b1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
1000552c:	d8c12017 	ldw	r3,1152(sp)
10005530:	d8812787 	ldb	r2,1182(sp)
10005534:	da000404 	addi	r8,sp,16
10005538:	003cce06 	br	10004874 <__alt_data_end+0xf8004874>
1000553c:	d8813317 	ldw	r2,1228(sp)
10005540:	14ffffc4 	addi	r19,r2,-1
10005544:	04ff630e 	bge	zero,r19,100052d4 <__alt_data_end+0xf80052d4>
10005548:	05400404 	movi	r21,16
1000554c:	acc0810e 	bge	r21,r19,10005754 <___vfprintf_internal_r+0x15dc>
10005550:	01440074 	movhi	r5,4097
10005554:	2944b684 	addi	r5,r5,4826
10005558:	d9412c15 	stw	r5,1200(sp)
1000555c:	01c001c4 	movi	r7,7
10005560:	00000306 	br	10005570 <___vfprintf_internal_r+0x13f8>
10005564:	8c400204 	addi	r17,r17,8
10005568:	9cfffc04 	addi	r19,r19,-16
1000556c:	acc07c0e 	bge	r21,r19,10005760 <___vfprintf_internal_r+0x15e8>
10005570:	18c00404 	addi	r3,r3,16
10005574:	84000044 	addi	r16,r16,1
10005578:	8d000015 	stw	r20,0(r17)
1000557c:	8d400115 	stw	r21,4(r17)
10005580:	d8c12015 	stw	r3,1152(sp)
10005584:	dc011f15 	stw	r16,1148(sp)
10005588:	3c3ff60e 	bge	r7,r16,10005564 <__alt_data_end+0xf8005564>
1000558c:	b809883a 	mov	r4,r23
10005590:	b00b883a 	mov	r5,r22
10005594:	d9811e04 	addi	r6,sp,1144
10005598:	d9c13d15 	stw	r7,1268(sp)
1000559c:	000b5b80 	call	1000b5b8 <__sprint_r>
100055a0:	d9c13d17 	ldw	r7,1268(sp)
100055a4:	103c0c1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100055a8:	d8c12017 	ldw	r3,1152(sp)
100055ac:	dc011f17 	ldw	r16,1148(sp)
100055b0:	dc400404 	addi	r17,sp,16
100055b4:	003fec06 	br	10005568 <__alt_data_end+0xf8005568>
100055b8:	00800084 	movi	r2,2
100055bc:	9546b03a 	or	r3,r18,r21
100055c0:	003d7d06 	br	10004bb8 <__alt_data_end+0xf8004bb8>
100055c4:	10803fcc 	andi	r2,r2,255
100055c8:	1080201c 	xori	r2,r2,128
100055cc:	10bfe004 	addi	r2,r2,-128
100055d0:	01000c04 	movi	r4,48
100055d4:	1101d726 	beq	r2,r4,10005d34 <___vfprintf_internal_r+0x1bbc>
100055d8:	d9413117 	ldw	r5,1220(sp)
100055dc:	d8812817 	ldw	r2,1184(sp)
100055e0:	193fffc5 	stb	r4,-1(r3)
100055e4:	297fffc4 	addi	r5,r5,-1
100055e8:	d9413115 	stw	r5,1220(sp)
100055ec:	1163c83a 	sub	r17,r2,r5
100055f0:	003c5c06 	br	10004764 <__alt_data_end+0xf8004764>
100055f4:	b809883a 	mov	r4,r23
100055f8:	b00b883a 	mov	r5,r22
100055fc:	d9811e04 	addi	r6,sp,1144
10005600:	000b5b80 	call	1000b5b8 <__sprint_r>
10005604:	103bf41e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005608:	d8c12017 	ldw	r3,1152(sp)
1000560c:	da000404 	addi	r8,sp,16
10005610:	d9413117 	ldw	r5,1220(sp)
10005614:	d9013417 	ldw	r4,1232(sp)
10005618:	d8812617 	ldw	r2,1176(sp)
1000561c:	2923883a 	add	r17,r5,r4
10005620:	d9413317 	ldw	r5,1228(sp)
10005624:	11400216 	blt	r2,r5,10005630 <___vfprintf_internal_r+0x14b8>
10005628:	e100004c 	andi	r4,fp,1
1000562c:	20000d26 	beq	r4,zero,10005664 <___vfprintf_internal_r+0x14ec>
10005630:	d9013817 	ldw	r4,1248(sp)
10005634:	d9413517 	ldw	r5,1236(sp)
10005638:	1907883a 	add	r3,r3,r4
1000563c:	d9011f17 	ldw	r4,1148(sp)
10005640:	41400015 	stw	r5,0(r8)
10005644:	d9413817 	ldw	r5,1248(sp)
10005648:	21000044 	addi	r4,r4,1
1000564c:	d8c12015 	stw	r3,1152(sp)
10005650:	41400115 	stw	r5,4(r8)
10005654:	d9011f15 	stw	r4,1148(sp)
10005658:	014001c4 	movi	r5,7
1000565c:	2901fd16 	blt	r5,r4,10005e54 <___vfprintf_internal_r+0x1cdc>
10005660:	42000204 	addi	r8,r8,8
10005664:	d9013317 	ldw	r4,1228(sp)
10005668:	2085c83a 	sub	r2,r4,r2
1000566c:	8449c83a 	sub	r4,r16,r17
10005670:	1021883a 	mov	r16,r2
10005674:	2080010e 	bge	r4,r2,1000567c <___vfprintf_internal_r+0x1504>
10005678:	2021883a 	mov	r16,r4
1000567c:	04000a0e 	bge	zero,r16,100056a8 <___vfprintf_internal_r+0x1530>
10005680:	d9011f17 	ldw	r4,1148(sp)
10005684:	1c07883a 	add	r3,r3,r16
10005688:	44400015 	stw	r17,0(r8)
1000568c:	21000044 	addi	r4,r4,1
10005690:	44000115 	stw	r16,4(r8)
10005694:	d8c12015 	stw	r3,1152(sp)
10005698:	d9011f15 	stw	r4,1148(sp)
1000569c:	014001c4 	movi	r5,7
100056a0:	29020916 	blt	r5,r4,10005ec8 <___vfprintf_internal_r+0x1d50>
100056a4:	42000204 	addi	r8,r8,8
100056a8:	80020116 	blt	r16,zero,10005eb0 <___vfprintf_internal_r+0x1d38>
100056ac:	1421c83a 	sub	r16,r2,r16
100056b0:	043cc40e 	bge	zero,r16,100049c4 <__alt_data_end+0xf80049c4>
100056b4:	04400404 	movi	r17,16
100056b8:	d8811f17 	ldw	r2,1148(sp)
100056bc:	8c3f110e 	bge	r17,r16,10005304 <__alt_data_end+0xf8005304>
100056c0:	01440074 	movhi	r5,4097
100056c4:	2944b684 	addi	r5,r5,4826
100056c8:	d9412c15 	stw	r5,1200(sp)
100056cc:	04c001c4 	movi	r19,7
100056d0:	00000306 	br	100056e0 <___vfprintf_internal_r+0x1568>
100056d4:	42000204 	addi	r8,r8,8
100056d8:	843ffc04 	addi	r16,r16,-16
100056dc:	8c3f0c0e 	bge	r17,r16,10005310 <__alt_data_end+0xf8005310>
100056e0:	18c00404 	addi	r3,r3,16
100056e4:	10800044 	addi	r2,r2,1
100056e8:	45000015 	stw	r20,0(r8)
100056ec:	44400115 	stw	r17,4(r8)
100056f0:	d8c12015 	stw	r3,1152(sp)
100056f4:	d8811f15 	stw	r2,1148(sp)
100056f8:	98bff60e 	bge	r19,r2,100056d4 <__alt_data_end+0xf80056d4>
100056fc:	b809883a 	mov	r4,r23
10005700:	b00b883a 	mov	r5,r22
10005704:	d9811e04 	addi	r6,sp,1144
10005708:	000b5b80 	call	1000b5b8 <__sprint_r>
1000570c:	103bb21e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005710:	d8c12017 	ldw	r3,1152(sp)
10005714:	d8811f17 	ldw	r2,1148(sp)
10005718:	da000404 	addi	r8,sp,16
1000571c:	003fee06 	br	100056d8 <__alt_data_end+0xf80056d8>
10005720:	e088703a 	and	r4,fp,r2
10005724:	203ec01e 	bne	r4,zero,10005228 <__alt_data_end+0xf8005228>
10005728:	dc011f17 	ldw	r16,1148(sp)
1000572c:	d9013117 	ldw	r4,1220(sp)
10005730:	40800115 	stw	r2,4(r8)
10005734:	84000044 	addi	r16,r16,1
10005738:	41000015 	stw	r4,0(r8)
1000573c:	d8c12015 	stw	r3,1152(sp)
10005740:	dc011f15 	stw	r16,1148(sp)
10005744:	008001c4 	movi	r2,7
10005748:	14000e16 	blt	r2,r16,10005784 <___vfprintf_internal_r+0x160c>
1000574c:	44400204 	addi	r17,r8,8
10005750:	003ee006 	br	100052d4 <__alt_data_end+0xf80052d4>
10005754:	01040074 	movhi	r4,4097
10005758:	2104b684 	addi	r4,r4,4826
1000575c:	d9012c15 	stw	r4,1200(sp)
10005760:	d8812c17 	ldw	r2,1200(sp)
10005764:	1cc7883a 	add	r3,r3,r19
10005768:	84000044 	addi	r16,r16,1
1000576c:	88800015 	stw	r2,0(r17)
10005770:	8cc00115 	stw	r19,4(r17)
10005774:	d8c12015 	stw	r3,1152(sp)
10005778:	dc011f15 	stw	r16,1148(sp)
1000577c:	008001c4 	movi	r2,7
10005780:	143ed30e 	bge	r2,r16,100052d0 <__alt_data_end+0xf80052d0>
10005784:	b809883a 	mov	r4,r23
10005788:	b00b883a 	mov	r5,r22
1000578c:	d9811e04 	addi	r6,sp,1144
10005790:	000b5b80 	call	1000b5b8 <__sprint_r>
10005794:	103b901e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005798:	d8c12017 	ldw	r3,1152(sp)
1000579c:	dc011f17 	ldw	r16,1148(sp)
100057a0:	dc400404 	addi	r17,sp,16
100057a4:	003ecb06 	br	100052d4 <__alt_data_end+0xf80052d4>
100057a8:	b809883a 	mov	r4,r23
100057ac:	b00b883a 	mov	r5,r22
100057b0:	d9811e04 	addi	r6,sp,1144
100057b4:	000b5b80 	call	1000b5b8 <__sprint_r>
100057b8:	103b871e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100057bc:	d8c12017 	ldw	r3,1152(sp)
100057c0:	dc011f17 	ldw	r16,1148(sp)
100057c4:	da000404 	addi	r8,sp,16
100057c8:	003ea206 	br	10005254 <__alt_data_end+0xf8005254>
100057cc:	b809883a 	mov	r4,r23
100057d0:	b00b883a 	mov	r5,r22
100057d4:	d9811e04 	addi	r6,sp,1144
100057d8:	000b5b80 	call	1000b5b8 <__sprint_r>
100057dc:	103b7e1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100057e0:	d8c12017 	ldw	r3,1152(sp)
100057e4:	dc011f17 	ldw	r16,1148(sp)
100057e8:	dc400404 	addi	r17,sp,16
100057ec:	003ea406 	br	10005280 <__alt_data_end+0xf8005280>
100057f0:	b809883a 	mov	r4,r23
100057f4:	b00b883a 	mov	r5,r22
100057f8:	d9811e04 	addi	r6,sp,1144
100057fc:	000b5b80 	call	1000b5b8 <__sprint_r>
10005800:	103b751e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005804:	d8c12017 	ldw	r3,1152(sp)
10005808:	da000404 	addi	r8,sp,16
1000580c:	003c3706 	br	100048ec <__alt_data_end+0xf80048ec>
10005810:	04a5c83a 	sub	r18,zero,r18
10005814:	9004c03a 	cmpne	r2,r18,zero
10005818:	056bc83a 	sub	r21,zero,r21
1000581c:	a8abc83a 	sub	r21,r21,r2
10005820:	04c00b44 	movi	r19,45
10005824:	dcc12785 	stb	r19,1182(sp)
10005828:	da413215 	stw	r9,1224(sp)
1000582c:	00800044 	movi	r2,1
10005830:	9546b03a 	or	r3,r18,r21
10005834:	003bb106 	br	100046fc <__alt_data_end+0xf80046fc>
10005838:	da013f15 	stw	r8,1276(sp)
1000583c:	da413e15 	stw	r9,1272(sp)
10005840:	000b2140 	call	1000b214 <__fpclassifyd>
10005844:	da013f17 	ldw	r8,1276(sp)
10005848:	da413e17 	ldw	r9,1272(sp)
1000584c:	1000e526 	beq	r2,zero,10005be4 <___vfprintf_internal_r+0x1a6c>
10005850:	04fff7c4 	movi	r19,-33
10005854:	00bfffc4 	movi	r2,-1
10005858:	84e6703a 	and	r19,r16,r19
1000585c:	48822926 	beq	r9,r2,10006104 <___vfprintf_internal_r+0x1f8c>
10005860:	008011c4 	movi	r2,71
10005864:	98821626 	beq	r19,r2,100060c0 <___vfprintf_internal_r+0x1f48>
10005868:	d9013917 	ldw	r4,1252(sp)
1000586c:	e0c04014 	ori	r3,fp,256
10005870:	d8c12d15 	stw	r3,1204(sp)
10005874:	20021f16 	blt	r4,zero,100060f4 <___vfprintf_internal_r+0x1f7c>
10005878:	dc413917 	ldw	r17,1252(sp)
1000587c:	d8012b05 	stb	zero,1196(sp)
10005880:	00801984 	movi	r2,102
10005884:	80814d26 	beq	r16,r2,10005dbc <___vfprintf_internal_r+0x1c44>
10005888:	00801184 	movi	r2,70
1000588c:	80814b26 	beq	r16,r2,10005dbc <___vfprintf_internal_r+0x1c44>
10005890:	00801144 	movi	r2,69
10005894:	98821d26 	beq	r19,r2,1000610c <___vfprintf_internal_r+0x1f94>
10005898:	482b883a 	mov	r21,r9
1000589c:	d8812604 	addi	r2,sp,1176
100058a0:	d8800115 	stw	r2,4(sp)
100058a4:	d9413717 	ldw	r5,1244(sp)
100058a8:	d8812504 	addi	r2,sp,1172
100058ac:	d8800215 	stw	r2,8(sp)
100058b0:	d8812104 	addi	r2,sp,1156
100058b4:	dd400015 	stw	r21,0(sp)
100058b8:	d8800315 	stw	r2,12(sp)
100058bc:	b809883a 	mov	r4,r23
100058c0:	880d883a 	mov	r6,r17
100058c4:	01c00084 	movi	r7,2
100058c8:	da013f15 	stw	r8,1276(sp)
100058cc:	da413e15 	stw	r9,1272(sp)
100058d0:	00065f00 	call	100065f0 <_dtoa_r>
100058d4:	d8813115 	stw	r2,1220(sp)
100058d8:	008019c4 	movi	r2,103
100058dc:	da013f17 	ldw	r8,1276(sp)
100058e0:	da413e17 	ldw	r9,1272(sp)
100058e4:	80800226 	beq	r16,r2,100058f0 <___vfprintf_internal_r+0x1778>
100058e8:	008011c4 	movi	r2,71
100058ec:	8081451e 	bne	r16,r2,10005e04 <___vfprintf_internal_r+0x1c8c>
100058f0:	e080004c 	andi	r2,fp,1
100058f4:	10021e26 	beq	r2,zero,10006170 <___vfprintf_internal_r+0x1ff8>
100058f8:	d8c13117 	ldw	r3,1220(sp)
100058fc:	1d55883a 	add	r10,r3,r21
10005900:	d9013717 	ldw	r4,1244(sp)
10005904:	880b883a 	mov	r5,r17
10005908:	000d883a 	mov	r6,zero
1000590c:	000f883a 	mov	r7,zero
10005910:	da013f15 	stw	r8,1276(sp)
10005914:	da413e15 	stw	r9,1272(sp)
10005918:	da813d15 	stw	r10,1268(sp)
1000591c:	000ddf00 	call	1000ddf0 <__eqdf2>
10005920:	da013f17 	ldw	r8,1276(sp)
10005924:	da413e17 	ldw	r9,1272(sp)
10005928:	da813d17 	ldw	r10,1268(sp)
1000592c:	1001a126 	beq	r2,zero,10005fb4 <___vfprintf_internal_r+0x1e3c>
10005930:	d8812117 	ldw	r2,1156(sp)
10005934:	1280062e 	bgeu	r2,r10,10005950 <___vfprintf_internal_r+0x17d8>
10005938:	01000c04 	movi	r4,48
1000593c:	10c00044 	addi	r3,r2,1
10005940:	d8c12115 	stw	r3,1156(sp)
10005944:	11000005 	stb	r4,0(r2)
10005948:	d8812117 	ldw	r2,1156(sp)
1000594c:	12bffb36 	bltu	r2,r10,1000593c <__alt_data_end+0xf800593c>
10005950:	d8c13117 	ldw	r3,1220(sp)
10005954:	10c5c83a 	sub	r2,r2,r3
10005958:	d8813315 	stw	r2,1228(sp)
1000595c:	008011c4 	movi	r2,71
10005960:	98818926 	beq	r19,r2,10005f88 <___vfprintf_internal_r+0x1e10>
10005964:	00801944 	movi	r2,101
10005968:	14023c0e 	bge	r2,r16,1000625c <___vfprintf_internal_r+0x20e4>
1000596c:	d8c12617 	ldw	r3,1176(sp)
10005970:	00801984 	movi	r2,102
10005974:	d8c13415 	stw	r3,1232(sp)
10005978:	8081ef26 	beq	r16,r2,10006138 <___vfprintf_internal_r+0x1fc0>
1000597c:	d8c13417 	ldw	r3,1232(sp)
10005980:	d9013317 	ldw	r4,1228(sp)
10005984:	1901e316 	blt	r3,r4,10006114 <___vfprintf_internal_r+0x1f9c>
10005988:	e080004c 	andi	r2,fp,1
1000598c:	1001f426 	beq	r2,zero,10006160 <___vfprintf_internal_r+0x1fe8>
10005990:	d8c13417 	ldw	r3,1232(sp)
10005994:	1c400044 	addi	r17,r3,1
10005998:	8839883a 	mov	fp,r17
1000599c:	8801e416 	blt	r17,zero,10006130 <___vfprintf_internal_r+0x1fb8>
100059a0:	dd412b07 	ldb	r21,1196(sp)
100059a4:	a801701e 	bne	r21,zero,10005f68 <___vfprintf_internal_r+0x1df0>
100059a8:	df012b15 	stw	fp,1196(sp)
100059ac:	dcc12783 	ldbu	r19,1182(sp)
100059b0:	df012d17 	ldw	fp,1204(sp)
100059b4:	d8013215 	stw	zero,1224(sp)
100059b8:	dc812d15 	stw	r18,1204(sp)
100059bc:	003b6e06 	br	10004778 <__alt_data_end+0xf8004778>
100059c0:	e080040c 	andi	r2,fp,16
100059c4:	1000b51e 	bne	r2,zero,10005c9c <___vfprintf_internal_r+0x1b24>
100059c8:	e080100c 	andi	r2,fp,64
100059cc:	10015b26 	beq	r2,zero,10005f3c <___vfprintf_internal_r+0x1dc4>
100059d0:	d9012d17 	ldw	r4,1204(sp)
100059d4:	d9412f17 	ldw	r5,1212(sp)
100059d8:	20800017 	ldw	r2,0(r4)
100059dc:	21000104 	addi	r4,r4,4
100059e0:	d9012d15 	stw	r4,1204(sp)
100059e4:	1140000d 	sth	r5,0(r2)
100059e8:	003a2006 	br	1000426c <__alt_data_end+0xf800426c>
100059ec:	e0c0100c 	andi	r3,fp,64
100059f0:	1800a226 	beq	r3,zero,10005c7c <___vfprintf_internal_r+0x1b04>
100059f4:	d8c12d17 	ldw	r3,1204(sp)
100059f8:	1480000b 	ldhu	r18,0(r2)
100059fc:	002b883a 	mov	r21,zero
10005a00:	18c00104 	addi	r3,r3,4
10005a04:	d8c12d15 	stw	r3,1204(sp)
10005a08:	0005883a 	mov	r2,zero
10005a0c:	9007883a 	mov	r3,r18
10005a10:	003c6906 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005a14:	e0c0100c 	andi	r3,fp,64
10005a18:	18009026 	beq	r3,zero,10005c5c <___vfprintf_internal_r+0x1ae4>
10005a1c:	1480000b 	ldhu	r18,0(r2)
10005a20:	d8812d17 	ldw	r2,1204(sp)
10005a24:	002b883a 	mov	r21,zero
10005a28:	9007883a 	mov	r3,r18
10005a2c:	10800104 	addi	r2,r2,4
10005a30:	d8812d15 	stw	r2,1204(sp)
10005a34:	00800044 	movi	r2,1
10005a38:	003c5f06 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005a3c:	e0c0100c 	andi	r3,fp,64
10005a40:	18008026 	beq	r3,zero,10005c44 <___vfprintf_internal_r+0x1acc>
10005a44:	d9012d17 	ldw	r4,1204(sp)
10005a48:	1480000b 	ldhu	r18,0(r2)
10005a4c:	002b883a 	mov	r21,zero
10005a50:	21000104 	addi	r4,r4,4
10005a54:	d9012d15 	stw	r4,1204(sp)
10005a58:	003c7906 	br	10004c40 <__alt_data_end+0xf8004c40>
10005a5c:	e080100c 	andi	r2,fp,64
10005a60:	10007126 	beq	r2,zero,10005c28 <___vfprintf_internal_r+0x1ab0>
10005a64:	1c80000f 	ldh	r18,0(r3)
10005a68:	d8812d17 	ldw	r2,1204(sp)
10005a6c:	902bd7fa 	srai	r21,r18,31
10005a70:	10800104 	addi	r2,r2,4
10005a74:	d8812d15 	stw	r2,1204(sp)
10005a78:	a805883a 	mov	r2,r21
10005a7c:	003b1a06 	br	100046e8 <__alt_data_end+0xf80046e8>
10005a80:	e4000007 	ldb	r16,0(fp)
10005a84:	e005883a 	mov	r2,fp
10005a88:	003a2306 	br	10004318 <__alt_data_end+0xf8004318>
10005a8c:	00800084 	movi	r2,2
10005a90:	003c4906 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005a94:	01040074 	movhi	r4,4097
10005a98:	2104b684 	addi	r4,r4,4826
10005a9c:	d9012c15 	stw	r4,1200(sp)
10005aa0:	d9012c17 	ldw	r4,1200(sp)
10005aa4:	1c47883a 	add	r3,r3,r17
10005aa8:	10800044 	addi	r2,r2,1
10005aac:	41000015 	stw	r4,0(r8)
10005ab0:	44400115 	stw	r17,4(r8)
10005ab4:	d8c12015 	stw	r3,1152(sp)
10005ab8:	d8811f15 	stw	r2,1148(sp)
10005abc:	010001c4 	movi	r4,7
10005ac0:	20becc16 	blt	r4,r2,100055f4 <__alt_data_end+0xf80055f4>
10005ac4:	42000204 	addi	r8,r8,8
10005ac8:	003ed106 	br	10005610 <__alt_data_end+0xf8005610>
10005acc:	01040074 	movhi	r4,4097
10005ad0:	2104b684 	addi	r4,r4,4826
10005ad4:	d9012c15 	stw	r4,1200(sp)
10005ad8:	003ba306 	br	10004968 <__alt_data_end+0xf8004968>
10005adc:	b809883a 	mov	r4,r23
10005ae0:	b00b883a 	mov	r5,r22
10005ae4:	d9811e04 	addi	r6,sp,1144
10005ae8:	000b5b80 	call	1000b5b8 <__sprint_r>
10005aec:	103aba1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005af0:	d8c12017 	ldw	r3,1152(sp)
10005af4:	da000404 	addi	r8,sp,16
10005af8:	003d6c06 	br	100050ac <__alt_data_end+0xf80050ac>
10005afc:	d8811f17 	ldw	r2,1148(sp)
10005b00:	01440074 	movhi	r5,4097
10005b04:	01000044 	movi	r4,1
10005b08:	18c00044 	addi	r3,r3,1
10005b0c:	10800044 	addi	r2,r2,1
10005b10:	2944b604 	addi	r5,r5,4824
10005b14:	41000115 	stw	r4,4(r8)
10005b18:	41400015 	stw	r5,0(r8)
10005b1c:	d8c12015 	stw	r3,1152(sp)
10005b20:	d8811f15 	stw	r2,1148(sp)
10005b24:	010001c4 	movi	r4,7
10005b28:	20806716 	blt	r4,r2,10005cc8 <___vfprintf_internal_r+0x1b50>
10005b2c:	42000204 	addi	r8,r8,8
10005b30:	8000041e 	bne	r16,zero,10005b44 <___vfprintf_internal_r+0x19cc>
10005b34:	d8813317 	ldw	r2,1228(sp)
10005b38:	1000021e 	bne	r2,zero,10005b44 <___vfprintf_internal_r+0x19cc>
10005b3c:	e080004c 	andi	r2,fp,1
10005b40:	103ba026 	beq	r2,zero,100049c4 <__alt_data_end+0xf80049c4>
10005b44:	d9013817 	ldw	r4,1248(sp)
10005b48:	d8811f17 	ldw	r2,1148(sp)
10005b4c:	d9413517 	ldw	r5,1236(sp)
10005b50:	1907883a 	add	r3,r3,r4
10005b54:	10800044 	addi	r2,r2,1
10005b58:	41000115 	stw	r4,4(r8)
10005b5c:	41400015 	stw	r5,0(r8)
10005b60:	d8c12015 	stw	r3,1152(sp)
10005b64:	d8811f15 	stw	r2,1148(sp)
10005b68:	010001c4 	movi	r4,7
10005b6c:	20815716 	blt	r4,r2,100060cc <___vfprintf_internal_r+0x1f54>
10005b70:	42000204 	addi	r8,r8,8
10005b74:	0421c83a 	sub	r16,zero,r16
10005b78:	0400810e 	bge	zero,r16,10005d80 <___vfprintf_internal_r+0x1c08>
10005b7c:	04400404 	movi	r17,16
10005b80:	8c00bd0e 	bge	r17,r16,10005e78 <___vfprintf_internal_r+0x1d00>
10005b84:	01440074 	movhi	r5,4097
10005b88:	2944b684 	addi	r5,r5,4826
10005b8c:	d9412c15 	stw	r5,1200(sp)
10005b90:	04c001c4 	movi	r19,7
10005b94:	00000306 	br	10005ba4 <___vfprintf_internal_r+0x1a2c>
10005b98:	42000204 	addi	r8,r8,8
10005b9c:	843ffc04 	addi	r16,r16,-16
10005ba0:	8c00b80e 	bge	r17,r16,10005e84 <___vfprintf_internal_r+0x1d0c>
10005ba4:	18c00404 	addi	r3,r3,16
10005ba8:	10800044 	addi	r2,r2,1
10005bac:	45000015 	stw	r20,0(r8)
10005bb0:	44400115 	stw	r17,4(r8)
10005bb4:	d8c12015 	stw	r3,1152(sp)
10005bb8:	d8811f15 	stw	r2,1148(sp)
10005bbc:	98bff60e 	bge	r19,r2,10005b98 <__alt_data_end+0xf8005b98>
10005bc0:	b809883a 	mov	r4,r23
10005bc4:	b00b883a 	mov	r5,r22
10005bc8:	d9811e04 	addi	r6,sp,1144
10005bcc:	000b5b80 	call	1000b5b8 <__sprint_r>
10005bd0:	103a811e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005bd4:	d8c12017 	ldw	r3,1152(sp)
10005bd8:	d8811f17 	ldw	r2,1148(sp)
10005bdc:	da000404 	addi	r8,sp,16
10005be0:	003fee06 	br	10005b9c <__alt_data_end+0xf8005b9c>
10005be4:	008011c4 	movi	r2,71
10005be8:	1400db16 	blt	r2,r16,10005f58 <___vfprintf_internal_r+0x1de0>
10005bec:	01040074 	movhi	r4,4097
10005bf0:	2104a804 	addi	r4,r4,4768
10005bf4:	d9013115 	stw	r4,1220(sp)
10005bf8:	00c000c4 	movi	r3,3
10005bfc:	00bfdfc4 	movi	r2,-129
10005c00:	d8c12b15 	stw	r3,1196(sp)
10005c04:	e0b8703a 	and	fp,fp,r2
10005c08:	dcc12783 	ldbu	r19,1182(sp)
10005c0c:	dc812d15 	stw	r18,1204(sp)
10005c10:	1823883a 	mov	r17,r3
10005c14:	d8013215 	stw	zero,1224(sp)
10005c18:	d8013415 	stw	zero,1232(sp)
10005c1c:	003ad606 	br	10004778 <__alt_data_end+0xf8004778>
10005c20:	4823883a 	mov	r17,r9
10005c24:	003cc906 	br	10004f4c <__alt_data_end+0xf8004f4c>
10005c28:	1c800017 	ldw	r18,0(r3)
10005c2c:	d8c12d17 	ldw	r3,1204(sp)
10005c30:	902bd7fa 	srai	r21,r18,31
10005c34:	18c00104 	addi	r3,r3,4
10005c38:	d8c12d15 	stw	r3,1204(sp)
10005c3c:	a805883a 	mov	r2,r21
10005c40:	003aa906 	br	100046e8 <__alt_data_end+0xf80046e8>
10005c44:	d9412d17 	ldw	r5,1204(sp)
10005c48:	14800017 	ldw	r18,0(r2)
10005c4c:	002b883a 	mov	r21,zero
10005c50:	29400104 	addi	r5,r5,4
10005c54:	d9412d15 	stw	r5,1204(sp)
10005c58:	003bf906 	br	10004c40 <__alt_data_end+0xf8004c40>
10005c5c:	d8c12d17 	ldw	r3,1204(sp)
10005c60:	14800017 	ldw	r18,0(r2)
10005c64:	002b883a 	mov	r21,zero
10005c68:	18c00104 	addi	r3,r3,4
10005c6c:	d8c12d15 	stw	r3,1204(sp)
10005c70:	00800044 	movi	r2,1
10005c74:	9007883a 	mov	r3,r18
10005c78:	003bcf06 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005c7c:	d9012d17 	ldw	r4,1204(sp)
10005c80:	14800017 	ldw	r18,0(r2)
10005c84:	002b883a 	mov	r21,zero
10005c88:	21000104 	addi	r4,r4,4
10005c8c:	d9012d15 	stw	r4,1204(sp)
10005c90:	0005883a 	mov	r2,zero
10005c94:	9007883a 	mov	r3,r18
10005c98:	003bc706 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005c9c:	d9412d17 	ldw	r5,1204(sp)
10005ca0:	d8c12f17 	ldw	r3,1212(sp)
10005ca4:	28800017 	ldw	r2,0(r5)
10005ca8:	29400104 	addi	r5,r5,4
10005cac:	d9412d15 	stw	r5,1204(sp)
10005cb0:	10c00015 	stw	r3,0(r2)
10005cb4:	00396d06 	br	1000426c <__alt_data_end+0xf800426c>
10005cb8:	01040074 	movhi	r4,4097
10005cbc:	2104a604 	addi	r4,r4,4760
10005cc0:	d9013115 	stw	r4,1220(sp)
10005cc4:	003ba206 	br	10004b50 <__alt_data_end+0xf8004b50>
10005cc8:	b809883a 	mov	r4,r23
10005ccc:	b00b883a 	mov	r5,r22
10005cd0:	d9811e04 	addi	r6,sp,1144
10005cd4:	000b5b80 	call	1000b5b8 <__sprint_r>
10005cd8:	103a3f1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005cdc:	dc012617 	ldw	r16,1176(sp)
10005ce0:	d8c12017 	ldw	r3,1152(sp)
10005ce4:	da000404 	addi	r8,sp,16
10005ce8:	003f9106 	br	10005b30 <__alt_data_end+0xf8005b30>
10005cec:	e0800044 	addi	r2,fp,1
10005cf0:	9cc00814 	ori	r19,r19,32
10005cf4:	e4000047 	ldb	r16,1(fp)
10005cf8:	00398706 	br	10004318 <__alt_data_end+0xf8004318>
10005cfc:	d8812e17 	ldw	r2,1208(sp)
10005d00:	d8c12d15 	stw	r3,1204(sp)
10005d04:	0085c83a 	sub	r2,zero,r2
10005d08:	d8812e15 	stw	r2,1208(sp)
10005d0c:	e005883a 	mov	r2,fp
10005d10:	003a3a06 	br	100045fc <__alt_data_end+0xf80045fc>
10005d14:	b809883a 	mov	r4,r23
10005d18:	b00b883a 	mov	r5,r22
10005d1c:	d9811e04 	addi	r6,sp,1144
10005d20:	000b5b80 	call	1000b5b8 <__sprint_r>
10005d24:	103a2c1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005d28:	d8c12017 	ldw	r3,1152(sp)
10005d2c:	da000404 	addi	r8,sp,16
10005d30:	003cf006 	br	100050f4 <__alt_data_end+0xf80050f4>
10005d34:	d8c12817 	ldw	r3,1184(sp)
10005d38:	d9013117 	ldw	r4,1220(sp)
10005d3c:	1923c83a 	sub	r17,r3,r4
10005d40:	003a8806 	br	10004764 <__alt_data_end+0xf8004764>
10005d44:	da013f15 	stw	r8,1276(sp)
10005d48:	00040e00 	call	100040e0 <strlen>
10005d4c:	1023883a 	mov	r17,r2
10005d50:	da013f17 	ldw	r8,1276(sp)
10005d54:	883c7f0e 	bge	r17,zero,10004f54 <__alt_data_end+0xf8004f54>
10005d58:	0005883a 	mov	r2,zero
10005d5c:	003c7d06 	br	10004f54 <__alt_data_end+0xf8004f54>
10005d60:	b809883a 	mov	r4,r23
10005d64:	b00b883a 	mov	r5,r22
10005d68:	d9811e04 	addi	r6,sp,1144
10005d6c:	000b5b80 	call	1000b5b8 <__sprint_r>
10005d70:	103a191e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005d74:	d8c12017 	ldw	r3,1152(sp)
10005d78:	d8811f17 	ldw	r2,1148(sp)
10005d7c:	da000404 	addi	r8,sp,16
10005d80:	d9413317 	ldw	r5,1228(sp)
10005d84:	d9013117 	ldw	r4,1220(sp)
10005d88:	10800044 	addi	r2,r2,1
10005d8c:	28c7883a 	add	r3,r5,r3
10005d90:	41000015 	stw	r4,0(r8)
10005d94:	41400115 	stw	r5,4(r8)
10005d98:	d8c12015 	stw	r3,1152(sp)
10005d9c:	d8811f15 	stw	r2,1148(sp)
10005da0:	010001c4 	movi	r4,7
10005da4:	20bb060e 	bge	r4,r2,100049c0 <__alt_data_end+0xf80049c0>
10005da8:	003d6206 	br	10005334 <__alt_data_end+0xf8005334>
10005dac:	01040074 	movhi	r4,4097
10005db0:	2104ba84 	addi	r4,r4,4842
10005db4:	d9013615 	stw	r4,1240(sp)
10005db8:	003aa306 	br	10004848 <__alt_data_end+0xf8004848>
10005dbc:	d8812604 	addi	r2,sp,1176
10005dc0:	d8800115 	stw	r2,4(sp)
10005dc4:	d9413717 	ldw	r5,1244(sp)
10005dc8:	d8812504 	addi	r2,sp,1172
10005dcc:	d8800215 	stw	r2,8(sp)
10005dd0:	d8812104 	addi	r2,sp,1156
10005dd4:	da400015 	stw	r9,0(sp)
10005dd8:	d8800315 	stw	r2,12(sp)
10005ddc:	b809883a 	mov	r4,r23
10005de0:	880d883a 	mov	r6,r17
10005de4:	01c000c4 	movi	r7,3
10005de8:	da013f15 	stw	r8,1276(sp)
10005dec:	da413e15 	stw	r9,1272(sp)
10005df0:	00065f00 	call	100065f0 <_dtoa_r>
10005df4:	da413e17 	ldw	r9,1272(sp)
10005df8:	da013f17 	ldw	r8,1276(sp)
10005dfc:	d8813115 	stw	r2,1220(sp)
10005e00:	482b883a 	mov	r21,r9
10005e04:	d8c13117 	ldw	r3,1220(sp)
10005e08:	00801184 	movi	r2,70
10005e0c:	1d55883a 	add	r10,r3,r21
10005e10:	98bebb1e 	bne	r19,r2,10005900 <__alt_data_end+0xf8005900>
10005e14:	19000007 	ldb	r4,0(r3)
10005e18:	00800c04 	movi	r2,48
10005e1c:	2080dd26 	beq	r4,r2,10006194 <___vfprintf_internal_r+0x201c>
10005e20:	d8c12617 	ldw	r3,1176(sp)
10005e24:	50d5883a 	add	r10,r10,r3
10005e28:	003eb506 	br	10005900 <__alt_data_end+0xf8005900>
10005e2c:	0023883a 	mov	r17,zero
10005e30:	003d9b06 	br	100054a0 <__alt_data_end+0xf80054a0>
10005e34:	b809883a 	mov	r4,r23
10005e38:	b00b883a 	mov	r5,r22
10005e3c:	d9811e04 	addi	r6,sp,1144
10005e40:	000b5b80 	call	1000b5b8 <__sprint_r>
10005e44:	1039e41e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005e48:	d8c12017 	ldw	r3,1152(sp)
10005e4c:	da000404 	addi	r8,sp,16
10005e50:	003d9206 	br	1000549c <__alt_data_end+0xf800549c>
10005e54:	b809883a 	mov	r4,r23
10005e58:	b00b883a 	mov	r5,r22
10005e5c:	d9811e04 	addi	r6,sp,1144
10005e60:	000b5b80 	call	1000b5b8 <__sprint_r>
10005e64:	1039dc1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005e68:	d8812617 	ldw	r2,1176(sp)
10005e6c:	d8c12017 	ldw	r3,1152(sp)
10005e70:	da000404 	addi	r8,sp,16
10005e74:	003dfb06 	br	10005664 <__alt_data_end+0xf8005664>
10005e78:	01040074 	movhi	r4,4097
10005e7c:	2104b684 	addi	r4,r4,4826
10005e80:	d9012c15 	stw	r4,1200(sp)
10005e84:	d9012c17 	ldw	r4,1200(sp)
10005e88:	1c07883a 	add	r3,r3,r16
10005e8c:	10800044 	addi	r2,r2,1
10005e90:	41000015 	stw	r4,0(r8)
10005e94:	44000115 	stw	r16,4(r8)
10005e98:	d8c12015 	stw	r3,1152(sp)
10005e9c:	d8811f15 	stw	r2,1148(sp)
10005ea0:	010001c4 	movi	r4,7
10005ea4:	20bfae16 	blt	r4,r2,10005d60 <__alt_data_end+0xf8005d60>
10005ea8:	42000204 	addi	r8,r8,8
10005eac:	003fb406 	br	10005d80 <__alt_data_end+0xf8005d80>
10005eb0:	0021883a 	mov	r16,zero
10005eb4:	003dfd06 	br	100056ac <__alt_data_end+0xf80056ac>
10005eb8:	01440074 	movhi	r5,4097
10005ebc:	2944ba84 	addi	r5,r5,4842
10005ec0:	d9413615 	stw	r5,1240(sp)
10005ec4:	003ae306 	br	10004a54 <__alt_data_end+0xf8004a54>
10005ec8:	b809883a 	mov	r4,r23
10005ecc:	b00b883a 	mov	r5,r22
10005ed0:	d9811e04 	addi	r6,sp,1144
10005ed4:	000b5b80 	call	1000b5b8 <__sprint_r>
10005ed8:	1039bf1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
10005edc:	d8812617 	ldw	r2,1176(sp)
10005ee0:	d9413317 	ldw	r5,1228(sp)
10005ee4:	d8c12017 	ldw	r3,1152(sp)
10005ee8:	da000404 	addi	r8,sp,16
10005eec:	2885c83a 	sub	r2,r5,r2
10005ef0:	003ded06 	br	100056a8 <__alt_data_end+0xf80056a8>
10005ef4:	00800184 	movi	r2,6
10005ef8:	1240012e 	bgeu	r2,r9,10005f00 <___vfprintf_internal_r+0x1d88>
10005efc:	1013883a 	mov	r9,r2
10005f00:	4823883a 	mov	r17,r9
10005f04:	4805883a 	mov	r2,r9
10005f08:	4800b216 	blt	r9,zero,100061d4 <___vfprintf_internal_r+0x205c>
10005f0c:	01440074 	movhi	r5,4097
10005f10:	2944b404 	addi	r5,r5,4816
10005f14:	d8812b15 	stw	r2,1196(sp)
10005f18:	dc812d15 	stw	r18,1204(sp)
10005f1c:	d8013215 	stw	zero,1224(sp)
10005f20:	d8013415 	stw	zero,1232(sp)
10005f24:	d9413115 	stw	r5,1220(sp)
10005f28:	0005883a 	mov	r2,zero
10005f2c:	003a1906 	br	10004794 <__alt_data_end+0xf8004794>
10005f30:	04c00b44 	movi	r19,45
10005f34:	dcc12785 	stb	r19,1182(sp)
10005f38:	003b0006 	br	10004b3c <__alt_data_end+0xf8004b3c>
10005f3c:	d8c12d17 	ldw	r3,1204(sp)
10005f40:	d9012f17 	ldw	r4,1212(sp)
10005f44:	18800017 	ldw	r2,0(r3)
10005f48:	18c00104 	addi	r3,r3,4
10005f4c:	d8c12d15 	stw	r3,1204(sp)
10005f50:	11000015 	stw	r4,0(r2)
10005f54:	0038c506 	br	1000426c <__alt_data_end+0xf800426c>
10005f58:	01440074 	movhi	r5,4097
10005f5c:	2944a904 	addi	r5,r5,4772
10005f60:	d9413115 	stw	r5,1220(sp)
10005f64:	003f2406 	br	10005bf8 <__alt_data_end+0xf8005bf8>
10005f68:	00800b44 	movi	r2,45
10005f6c:	d8812785 	stb	r2,1182(sp)
10005f70:	df012b15 	stw	fp,1196(sp)
10005f74:	d8013215 	stw	zero,1224(sp)
10005f78:	df012d17 	ldw	fp,1204(sp)
10005f7c:	00800b44 	movi	r2,45
10005f80:	dc812d15 	stw	r18,1204(sp)
10005f84:	003a0006 	br	10004788 <__alt_data_end+0xf8004788>
10005f88:	d8c12617 	ldw	r3,1176(sp)
10005f8c:	00bfff44 	movi	r2,-3
10005f90:	18800a16 	blt	r3,r2,10005fbc <___vfprintf_internal_r+0x1e44>
10005f94:	48c00916 	blt	r9,r3,10005fbc <___vfprintf_internal_r+0x1e44>
10005f98:	d8c13415 	stw	r3,1232(sp)
10005f9c:	040019c4 	movi	r16,103
10005fa0:	003e7606 	br	1000597c <__alt_data_end+0xf800597c>
10005fa4:	01040074 	movhi	r4,4097
10005fa8:	2104b684 	addi	r4,r4,4826
10005fac:	d9012c15 	stw	r4,1200(sp)
10005fb0:	003c8e06 	br	100051ec <__alt_data_end+0xf80051ec>
10005fb4:	5005883a 	mov	r2,r10
10005fb8:	003e6506 	br	10005950 <__alt_data_end+0xf8005950>
10005fbc:	843fff84 	addi	r16,r16,-2
10005fc0:	1d7fffc4 	addi	r21,r3,-1
10005fc4:	dd412615 	stw	r21,1176(sp)
10005fc8:	dc0122c5 	stb	r16,1163(sp)
10005fcc:	a8009216 	blt	r21,zero,10006218 <___vfprintf_internal_r+0x20a0>
10005fd0:	00800ac4 	movi	r2,43
10005fd4:	d8812305 	stb	r2,1164(sp)
10005fd8:	00800244 	movi	r2,9
10005fdc:	1540660e 	bge	r2,r21,10006178 <___vfprintf_internal_r+0x2000>
10005fe0:	dcc122c4 	addi	r19,sp,1163
10005fe4:	dc012c15 	stw	r16,1200(sp)
10005fe8:	4023883a 	mov	r17,r8
10005fec:	9821883a 	mov	r16,r19
10005ff0:	a809883a 	mov	r4,r21
10005ff4:	01400284 	movi	r5,10
10005ff8:	0002b740 	call	10002b74 <__modsi3>
10005ffc:	10800c04 	addi	r2,r2,48
10006000:	843fffc4 	addi	r16,r16,-1
10006004:	a809883a 	mov	r4,r21
10006008:	01400284 	movi	r5,10
1000600c:	80800005 	stb	r2,0(r16)
10006010:	0002b200 	call	10002b20 <__divsi3>
10006014:	01000244 	movi	r4,9
10006018:	102b883a 	mov	r21,r2
1000601c:	20bff416 	blt	r4,r2,10005ff0 <__alt_data_end+0xf8005ff0>
10006020:	8811883a 	mov	r8,r17
10006024:	10800c04 	addi	r2,r2,48
10006028:	8023883a 	mov	r17,r16
1000602c:	897fffc4 	addi	r5,r17,-1
10006030:	88bfffc5 	stb	r2,-1(r17)
10006034:	dc012c17 	ldw	r16,1200(sp)
10006038:	2cc08a2e 	bgeu	r5,r19,10006264 <___vfprintf_internal_r+0x20ec>
1000603c:	d9812384 	addi	r6,sp,1166
10006040:	344dc83a 	sub	r6,r6,r17
10006044:	d9012344 	addi	r4,sp,1165
10006048:	998d883a 	add	r6,r19,r6
1000604c:	00000106 	br	10006054 <___vfprintf_internal_r+0x1edc>
10006050:	28800003 	ldbu	r2,0(r5)
10006054:	20800005 	stb	r2,0(r4)
10006058:	21000044 	addi	r4,r4,1
1000605c:	29400044 	addi	r5,r5,1
10006060:	21bffb1e 	bne	r4,r6,10006050 <__alt_data_end+0xf8006050>
10006064:	d8812304 	addi	r2,sp,1164
10006068:	1445c83a 	sub	r2,r2,r17
1000606c:	d9412344 	addi	r5,sp,1165
10006070:	2885883a 	add	r2,r5,r2
10006074:	14e7c83a 	sub	r19,r2,r19
10006078:	d8813317 	ldw	r2,1228(sp)
1000607c:	d8c13317 	ldw	r3,1228(sp)
10006080:	dcc13a15 	stw	r19,1256(sp)
10006084:	14e3883a 	add	r17,r2,r19
10006088:	00800044 	movi	r2,1
1000608c:	10c0550e 	bge	r2,r3,100061e4 <___vfprintf_internal_r+0x206c>
10006090:	8c400044 	addi	r17,r17,1
10006094:	8839883a 	mov	fp,r17
10006098:	88005016 	blt	r17,zero,100061dc <___vfprintf_internal_r+0x2064>
1000609c:	d8013415 	stw	zero,1232(sp)
100060a0:	003e3f06 	br	100059a0 <__alt_data_end+0xf80059a0>
100060a4:	da412b15 	stw	r9,1196(sp)
100060a8:	dcc12783 	ldbu	r19,1182(sp)
100060ac:	4823883a 	mov	r17,r9
100060b0:	dc812d15 	stw	r18,1204(sp)
100060b4:	d8013215 	stw	zero,1224(sp)
100060b8:	d8013415 	stw	zero,1232(sp)
100060bc:	0039ae06 	br	10004778 <__alt_data_end+0xf8004778>
100060c0:	483de91e 	bne	r9,zero,10005868 <__alt_data_end+0xf8005868>
100060c4:	8813883a 	mov	r9,r17
100060c8:	003de706 	br	10005868 <__alt_data_end+0xf8005868>
100060cc:	b809883a 	mov	r4,r23
100060d0:	b00b883a 	mov	r5,r22
100060d4:	d9811e04 	addi	r6,sp,1144
100060d8:	000b5b80 	call	1000b5b8 <__sprint_r>
100060dc:	10393e1e 	bne	r2,zero,100045d8 <__alt_data_end+0xf80045d8>
100060e0:	dc012617 	ldw	r16,1176(sp)
100060e4:	d8c12017 	ldw	r3,1152(sp)
100060e8:	d8811f17 	ldw	r2,1148(sp)
100060ec:	da000404 	addi	r8,sp,16
100060f0:	003ea006 	br	10005b74 <__alt_data_end+0xf8005b74>
100060f4:	00c00b44 	movi	r3,45
100060f8:	2460003c 	xorhi	r17,r4,32768
100060fc:	d8c12b05 	stb	r3,1196(sp)
10006100:	003ddf06 	br	10005880 <__alt_data_end+0xf8005880>
10006104:	02400184 	movi	r9,6
10006108:	003dd706 	br	10005868 <__alt_data_end+0xf8005868>
1000610c:	4d400044 	addi	r21,r9,1
10006110:	003de206 	br	1000589c <__alt_data_end+0xf800589c>
10006114:	d8c13417 	ldw	r3,1232(sp)
10006118:	00c0490e 	bge	zero,r3,10006240 <___vfprintf_internal_r+0x20c8>
1000611c:	04400044 	movi	r17,1
10006120:	d9013317 	ldw	r4,1228(sp)
10006124:	8923883a 	add	r17,r17,r4
10006128:	8839883a 	mov	fp,r17
1000612c:	883e1c0e 	bge	r17,zero,100059a0 <__alt_data_end+0xf80059a0>
10006130:	0039883a 	mov	fp,zero
10006134:	003e1a06 	br	100059a0 <__alt_data_end+0xf80059a0>
10006138:	00c03b0e 	bge	zero,r3,10006228 <___vfprintf_internal_r+0x20b0>
1000613c:	4800021e 	bne	r9,zero,10006148 <___vfprintf_internal_r+0x1fd0>
10006140:	e080004c 	andi	r2,fp,1
10006144:	10000626 	beq	r2,zero,10006160 <___vfprintf_internal_r+0x1fe8>
10006148:	d8c13417 	ldw	r3,1232(sp)
1000614c:	4a400044 	addi	r9,r9,1
10006150:	1a63883a 	add	r17,r3,r9
10006154:	8839883a 	mov	fp,r17
10006158:	883e110e 	bge	r17,zero,100059a0 <__alt_data_end+0xf80059a0>
1000615c:	003ff406 	br	10006130 <__alt_data_end+0xf8006130>
10006160:	1839883a 	mov	fp,r3
10006164:	18004116 	blt	r3,zero,1000626c <___vfprintf_internal_r+0x20f4>
10006168:	dc413417 	ldw	r17,1232(sp)
1000616c:	003e0c06 	br	100059a0 <__alt_data_end+0xf80059a0>
10006170:	d8812117 	ldw	r2,1156(sp)
10006174:	003df606 	br	10005950 <__alt_data_end+0xf8005950>
10006178:	00800c04 	movi	r2,48
1000617c:	a8c00c04 	addi	r3,r21,48
10006180:	d8812345 	stb	r2,1165(sp)
10006184:	d8c12385 	stb	r3,1166(sp)
10006188:	d88123c4 	addi	r2,sp,1167
1000618c:	dcc122c4 	addi	r19,sp,1163
10006190:	003fb806 	br	10006074 <__alt_data_end+0xf8006074>
10006194:	d9013717 	ldw	r4,1244(sp)
10006198:	880b883a 	mov	r5,r17
1000619c:	000d883a 	mov	r6,zero
100061a0:	000f883a 	mov	r7,zero
100061a4:	da013f15 	stw	r8,1276(sp)
100061a8:	da413e15 	stw	r9,1272(sp)
100061ac:	da813d15 	stw	r10,1268(sp)
100061b0:	000ddf00 	call	1000ddf0 <__eqdf2>
100061b4:	da013f17 	ldw	r8,1276(sp)
100061b8:	da413e17 	ldw	r9,1272(sp)
100061bc:	da813d17 	ldw	r10,1268(sp)
100061c0:	103f1726 	beq	r2,zero,10005e20 <__alt_data_end+0xf8005e20>
100061c4:	00800044 	movi	r2,1
100061c8:	1547c83a 	sub	r3,r2,r21
100061cc:	d8c12615 	stw	r3,1176(sp)
100061d0:	003f1406 	br	10005e24 <__alt_data_end+0xf8005e24>
100061d4:	0005883a 	mov	r2,zero
100061d8:	003f4c06 	br	10005f0c <__alt_data_end+0xf8005f0c>
100061dc:	0039883a 	mov	fp,zero
100061e0:	003fae06 	br	1000609c <__alt_data_end+0xf800609c>
100061e4:	e084703a 	and	r2,fp,r2
100061e8:	103faa26 	beq	r2,zero,10006094 <__alt_data_end+0xf8006094>
100061ec:	003fa806 	br	10006090 <__alt_data_end+0xf8006090>
100061f0:	d9412d17 	ldw	r5,1204(sp)
100061f4:	2a400017 	ldw	r9,0(r5)
100061f8:	28c00104 	addi	r3,r5,4
100061fc:	d8c12d15 	stw	r3,1204(sp)
10006200:	483ebc0e 	bge	r9,zero,10005cf4 <__alt_data_end+0xf8005cf4>
10006204:	027fffc4 	movi	r9,-1
10006208:	e4000047 	ldb	r16,1(fp)
1000620c:	00384206 	br	10004318 <__alt_data_end+0xf8004318>
10006210:	043fffc4 	movi	r16,-1
10006214:	0038ce06 	br	10004550 <__alt_data_end+0xf8004550>
10006218:	00800b44 	movi	r2,45
1000621c:	056bc83a 	sub	r21,zero,r21
10006220:	d8812305 	stb	r2,1164(sp)
10006224:	003f6c06 	br	10005fd8 <__alt_data_end+0xf8005fd8>
10006228:	4800081e 	bne	r9,zero,1000624c <___vfprintf_internal_r+0x20d4>
1000622c:	e080004c 	andi	r2,fp,1
10006230:	1000061e 	bne	r2,zero,1000624c <___vfprintf_internal_r+0x20d4>
10006234:	07000044 	movi	fp,1
10006238:	e023883a 	mov	r17,fp
1000623c:	003dd806 	br	100059a0 <__alt_data_end+0xf80059a0>
10006240:	04400084 	movi	r17,2
10006244:	88e3c83a 	sub	r17,r17,r3
10006248:	003fb506 	br	10006120 <__alt_data_end+0xf8006120>
1000624c:	4c400084 	addi	r17,r9,2
10006250:	8839883a 	mov	fp,r17
10006254:	883dd20e 	bge	r17,zero,100059a0 <__alt_data_end+0xf80059a0>
10006258:	003fb506 	br	10006130 <__alt_data_end+0xf8006130>
1000625c:	d8c12617 	ldw	r3,1176(sp)
10006260:	003f5706 	br	10005fc0 <__alt_data_end+0xf8005fc0>
10006264:	d8812344 	addi	r2,sp,1165
10006268:	003f8206 	br	10006074 <__alt_data_end+0xf8006074>
1000626c:	0039883a 	mov	fp,zero
10006270:	003fbd06 	br	10006168 <__alt_data_end+0xf8006168>

10006274 <__vfprintf_internal>:
10006274:	2007883a 	mov	r3,r4
10006278:	01040074 	movhi	r4,4097
1000627c:	210bd104 	addi	r4,r4,12100
10006280:	21000017 	ldw	r4,0(r4)
10006284:	2805883a 	mov	r2,r5
10006288:	300f883a 	mov	r7,r6
1000628c:	180b883a 	mov	r5,r3
10006290:	100d883a 	mov	r6,r2
10006294:	00041781 	jmpi	10004178 <___vfprintf_internal_r>

10006298 <__swsetup_r>:
10006298:	00840074 	movhi	r2,4097
1000629c:	defffd04 	addi	sp,sp,-12
100062a0:	108bd104 	addi	r2,r2,12100
100062a4:	dc400115 	stw	r17,4(sp)
100062a8:	2023883a 	mov	r17,r4
100062ac:	11000017 	ldw	r4,0(r2)
100062b0:	dc000015 	stw	r16,0(sp)
100062b4:	dfc00215 	stw	ra,8(sp)
100062b8:	2821883a 	mov	r16,r5
100062bc:	20000226 	beq	r4,zero,100062c8 <__swsetup_r+0x30>
100062c0:	20c00e17 	ldw	r3,56(r4)
100062c4:	18002e26 	beq	r3,zero,10006380 <__swsetup_r+0xe8>
100062c8:	8080030b 	ldhu	r2,12(r16)
100062cc:	10c0020c 	andi	r3,r2,8
100062d0:	100d883a 	mov	r6,r2
100062d4:	18000f26 	beq	r3,zero,10006314 <__swsetup_r+0x7c>
100062d8:	80c00417 	ldw	r3,16(r16)
100062dc:	18001526 	beq	r3,zero,10006334 <__swsetup_r+0x9c>
100062e0:	1100004c 	andi	r4,r2,1
100062e4:	20001c1e 	bne	r4,zero,10006358 <__swsetup_r+0xc0>
100062e8:	1080008c 	andi	r2,r2,2
100062ec:	1000261e 	bne	r2,zero,10006388 <__swsetup_r+0xf0>
100062f0:	80800517 	ldw	r2,20(r16)
100062f4:	80800215 	stw	r2,8(r16)
100062f8:	18001c26 	beq	r3,zero,1000636c <__swsetup_r+0xd4>
100062fc:	0005883a 	mov	r2,zero
10006300:	dfc00217 	ldw	ra,8(sp)
10006304:	dc400117 	ldw	r17,4(sp)
10006308:	dc000017 	ldw	r16,0(sp)
1000630c:	dec00304 	addi	sp,sp,12
10006310:	f800283a 	ret
10006314:	3080040c 	andi	r2,r6,16
10006318:	10001726 	beq	r2,zero,10006378 <__swsetup_r+0xe0>
1000631c:	3080010c 	andi	r2,r6,4
10006320:	10001b1e 	bne	r2,zero,10006390 <__swsetup_r+0xf8>
10006324:	80c00417 	ldw	r3,16(r16)
10006328:	30800214 	ori	r2,r6,8
1000632c:	8080030d 	sth	r2,12(r16)
10006330:	183feb1e 	bne	r3,zero,100062e0 <__alt_data_end+0xf80062e0>
10006334:	1140a00c 	andi	r5,r2,640
10006338:	01008004 	movi	r4,512
1000633c:	293fe826 	beq	r5,r4,100062e0 <__alt_data_end+0xf80062e0>
10006340:	8809883a 	mov	r4,r17
10006344:	800b883a 	mov	r5,r16
10006348:	0008e2c0 	call	10008e2c <__smakebuf_r>
1000634c:	8080030b 	ldhu	r2,12(r16)
10006350:	80c00417 	ldw	r3,16(r16)
10006354:	003fe206 	br	100062e0 <__alt_data_end+0xf80062e0>
10006358:	80800517 	ldw	r2,20(r16)
1000635c:	80000215 	stw	zero,8(r16)
10006360:	0085c83a 	sub	r2,zero,r2
10006364:	80800615 	stw	r2,24(r16)
10006368:	183fe41e 	bne	r3,zero,100062fc <__alt_data_end+0xf80062fc>
1000636c:	8080030b 	ldhu	r2,12(r16)
10006370:	1080200c 	andi	r2,r2,128
10006374:	103fe226 	beq	r2,zero,10006300 <__alt_data_end+0xf8006300>
10006378:	00bfffc4 	movi	r2,-1
1000637c:	003fe006 	br	10006300 <__alt_data_end+0xf8006300>
10006380:	00082d40 	call	100082d4 <__sinit>
10006384:	003fd006 	br	100062c8 <__alt_data_end+0xf80062c8>
10006388:	0005883a 	mov	r2,zero
1000638c:	003fd906 	br	100062f4 <__alt_data_end+0xf80062f4>
10006390:	81400c17 	ldw	r5,48(r16)
10006394:	28000626 	beq	r5,zero,100063b0 <__swsetup_r+0x118>
10006398:	80801004 	addi	r2,r16,64
1000639c:	28800326 	beq	r5,r2,100063ac <__swsetup_r+0x114>
100063a0:	8809883a 	mov	r4,r17
100063a4:	00084480 	call	10008448 <_free_r>
100063a8:	8180030b 	ldhu	r6,12(r16)
100063ac:	80000c15 	stw	zero,48(r16)
100063b0:	80c00417 	ldw	r3,16(r16)
100063b4:	00bff6c4 	movi	r2,-37
100063b8:	118c703a 	and	r6,r2,r6
100063bc:	80000115 	stw	zero,4(r16)
100063c0:	80c00015 	stw	r3,0(r16)
100063c4:	003fd806 	br	10006328 <__alt_data_end+0xf8006328>

100063c8 <quorem>:
100063c8:	defff204 	addi	sp,sp,-56
100063cc:	ddc00b15 	stw	r23,44(sp)
100063d0:	20800417 	ldw	r2,16(r4)
100063d4:	2dc00417 	ldw	r23,16(r5)
100063d8:	dfc00d15 	stw	ra,52(sp)
100063dc:	df000c15 	stw	fp,48(sp)
100063e0:	dd800a15 	stw	r22,40(sp)
100063e4:	dd400915 	stw	r21,36(sp)
100063e8:	dd000815 	stw	r20,32(sp)
100063ec:	dcc00715 	stw	r19,28(sp)
100063f0:	dc800615 	stw	r18,24(sp)
100063f4:	dc400515 	stw	r17,20(sp)
100063f8:	dc000415 	stw	r16,16(sp)
100063fc:	15c07a16 	blt	r2,r23,100065e8 <quorem+0x220>
10006400:	bdffffc4 	addi	r23,r23,-1
10006404:	bde9883a 	add	r20,r23,r23
10006408:	28c00504 	addi	r3,r5,20
1000640c:	a529883a 	add	r20,r20,r20
10006410:	1d39883a 	add	fp,r3,r20
10006414:	24c00504 	addi	r19,r4,20
10006418:	d9400215 	stw	r5,8(sp)
1000641c:	9d29883a 	add	r20,r19,r20
10006420:	e1400017 	ldw	r5,0(fp)
10006424:	d9000015 	stw	r4,0(sp)
10006428:	a1000017 	ldw	r4,0(r20)
1000642c:	29400044 	addi	r5,r5,1
10006430:	d8c00115 	stw	r3,4(sp)
10006434:	dd000315 	stw	r20,12(sp)
10006438:	0002bd00 	call	10002bd0 <__udivsi3>
1000643c:	1025883a 	mov	r18,r2
10006440:	10003026 	beq	r2,zero,10006504 <quorem+0x13c>
10006444:	dc400117 	ldw	r17,4(sp)
10006448:	9829883a 	mov	r20,r19
1000644c:	002d883a 	mov	r22,zero
10006450:	0021883a 	mov	r16,zero
10006454:	8d400017 	ldw	r21,0(r17)
10006458:	900b883a 	mov	r5,r18
1000645c:	8c400104 	addi	r17,r17,4
10006460:	a93fffcc 	andi	r4,r21,65535
10006464:	0002be00 	call	10002be0 <__mulsi3>
10006468:	a808d43a 	srli	r4,r21,16
1000646c:	900b883a 	mov	r5,r18
10006470:	b0ad883a 	add	r22,r22,r2
10006474:	0002be00 	call	10002be0 <__mulsi3>
10006478:	a1000017 	ldw	r4,0(r20)
1000647c:	b00cd43a 	srli	r6,r22,16
10006480:	b0ffffcc 	andi	r3,r22,65535
10006484:	217fffcc 	andi	r5,r4,65535
10006488:	2c21883a 	add	r16,r5,r16
1000648c:	80c7c83a 	sub	r3,r16,r3
10006490:	2008d43a 	srli	r4,r4,16
10006494:	3085883a 	add	r2,r6,r2
10006498:	1821d43a 	srai	r16,r3,16
1000649c:	117fffcc 	andi	r5,r2,65535
100064a0:	2149c83a 	sub	r4,r4,r5
100064a4:	2421883a 	add	r16,r4,r16
100064a8:	8008943a 	slli	r4,r16,16
100064ac:	18ffffcc 	andi	r3,r3,65535
100064b0:	102cd43a 	srli	r22,r2,16
100064b4:	20c8b03a 	or	r4,r4,r3
100064b8:	a1000015 	stw	r4,0(r20)
100064bc:	8021d43a 	srai	r16,r16,16
100064c0:	a5000104 	addi	r20,r20,4
100064c4:	e47fe32e 	bgeu	fp,r17,10006454 <__alt_data_end+0xf8006454>
100064c8:	d8c00317 	ldw	r3,12(sp)
100064cc:	18800017 	ldw	r2,0(r3)
100064d0:	10000c1e 	bne	r2,zero,10006504 <quorem+0x13c>
100064d4:	18bfff04 	addi	r2,r3,-4
100064d8:	9880082e 	bgeu	r19,r2,100064fc <quorem+0x134>
100064dc:	18ffff17 	ldw	r3,-4(r3)
100064e0:	18000326 	beq	r3,zero,100064f0 <quorem+0x128>
100064e4:	00000506 	br	100064fc <quorem+0x134>
100064e8:	10c00017 	ldw	r3,0(r2)
100064ec:	1800031e 	bne	r3,zero,100064fc <quorem+0x134>
100064f0:	10bfff04 	addi	r2,r2,-4
100064f4:	bdffffc4 	addi	r23,r23,-1
100064f8:	98bffb36 	bltu	r19,r2,100064e8 <__alt_data_end+0xf80064e8>
100064fc:	d8c00017 	ldw	r3,0(sp)
10006500:	1dc00415 	stw	r23,16(r3)
10006504:	d9000017 	ldw	r4,0(sp)
10006508:	d9400217 	ldw	r5,8(sp)
1000650c:	000a5a80 	call	1000a5a8 <__mcmp>
10006510:	10002816 	blt	r2,zero,100065b4 <quorem+0x1ec>
10006514:	dc400117 	ldw	r17,4(sp)
10006518:	94800044 	addi	r18,r18,1
1000651c:	980d883a 	mov	r6,r19
10006520:	0007883a 	mov	r3,zero
10006524:	31000017 	ldw	r4,0(r6)
10006528:	89400017 	ldw	r5,0(r17)
1000652c:	31800104 	addi	r6,r6,4
10006530:	20bfffcc 	andi	r2,r4,65535
10006534:	10c7883a 	add	r3,r2,r3
10006538:	28bfffcc 	andi	r2,r5,65535
1000653c:	1885c83a 	sub	r2,r3,r2
10006540:	280ad43a 	srli	r5,r5,16
10006544:	2008d43a 	srli	r4,r4,16
10006548:	1007d43a 	srai	r3,r2,16
1000654c:	10bfffcc 	andi	r2,r2,65535
10006550:	2149c83a 	sub	r4,r4,r5
10006554:	20c9883a 	add	r4,r4,r3
10006558:	200a943a 	slli	r5,r4,16
1000655c:	8c400104 	addi	r17,r17,4
10006560:	2007d43a 	srai	r3,r4,16
10006564:	2884b03a 	or	r2,r5,r2
10006568:	30bfff15 	stw	r2,-4(r6)
1000656c:	e47fed2e 	bgeu	fp,r17,10006524 <__alt_data_end+0xf8006524>
10006570:	bdc5883a 	add	r2,r23,r23
10006574:	1085883a 	add	r2,r2,r2
10006578:	9887883a 	add	r3,r19,r2
1000657c:	18800017 	ldw	r2,0(r3)
10006580:	10000c1e 	bne	r2,zero,100065b4 <quorem+0x1ec>
10006584:	18bfff04 	addi	r2,r3,-4
10006588:	9880082e 	bgeu	r19,r2,100065ac <quorem+0x1e4>
1000658c:	18ffff17 	ldw	r3,-4(r3)
10006590:	18000326 	beq	r3,zero,100065a0 <quorem+0x1d8>
10006594:	00000506 	br	100065ac <quorem+0x1e4>
10006598:	10c00017 	ldw	r3,0(r2)
1000659c:	1800031e 	bne	r3,zero,100065ac <quorem+0x1e4>
100065a0:	10bfff04 	addi	r2,r2,-4
100065a4:	bdffffc4 	addi	r23,r23,-1
100065a8:	98bffb36 	bltu	r19,r2,10006598 <__alt_data_end+0xf8006598>
100065ac:	d8c00017 	ldw	r3,0(sp)
100065b0:	1dc00415 	stw	r23,16(r3)
100065b4:	9005883a 	mov	r2,r18
100065b8:	dfc00d17 	ldw	ra,52(sp)
100065bc:	df000c17 	ldw	fp,48(sp)
100065c0:	ddc00b17 	ldw	r23,44(sp)
100065c4:	dd800a17 	ldw	r22,40(sp)
100065c8:	dd400917 	ldw	r21,36(sp)
100065cc:	dd000817 	ldw	r20,32(sp)
100065d0:	dcc00717 	ldw	r19,28(sp)
100065d4:	dc800617 	ldw	r18,24(sp)
100065d8:	dc400517 	ldw	r17,20(sp)
100065dc:	dc000417 	ldw	r16,16(sp)
100065e0:	dec00e04 	addi	sp,sp,56
100065e4:	f800283a 	ret
100065e8:	0005883a 	mov	r2,zero
100065ec:	003ff206 	br	100065b8 <__alt_data_end+0xf80065b8>

100065f0 <_dtoa_r>:
100065f0:	20801017 	ldw	r2,64(r4)
100065f4:	deffde04 	addi	sp,sp,-136
100065f8:	dd401d15 	stw	r21,116(sp)
100065fc:	dcc01b15 	stw	r19,108(sp)
10006600:	dc801a15 	stw	r18,104(sp)
10006604:	dc401915 	stw	r17,100(sp)
10006608:	dc001815 	stw	r16,96(sp)
1000660c:	dfc02115 	stw	ra,132(sp)
10006610:	df002015 	stw	fp,128(sp)
10006614:	ddc01f15 	stw	r23,124(sp)
10006618:	dd801e15 	stw	r22,120(sp)
1000661c:	dd001c15 	stw	r20,112(sp)
10006620:	d9c00315 	stw	r7,12(sp)
10006624:	2021883a 	mov	r16,r4
10006628:	302b883a 	mov	r21,r6
1000662c:	2825883a 	mov	r18,r5
10006630:	dc402417 	ldw	r17,144(sp)
10006634:	3027883a 	mov	r19,r6
10006638:	10000826 	beq	r2,zero,1000665c <_dtoa_r+0x6c>
1000663c:	21801117 	ldw	r6,68(r4)
10006640:	00c00044 	movi	r3,1
10006644:	100b883a 	mov	r5,r2
10006648:	1986983a 	sll	r3,r3,r6
1000664c:	11800115 	stw	r6,4(r2)
10006650:	10c00215 	stw	r3,8(r2)
10006654:	0009cd40 	call	10009cd4 <_Bfree>
10006658:	80001015 	stw	zero,64(r16)
1000665c:	a8002d16 	blt	r21,zero,10006714 <_dtoa_r+0x124>
10006660:	88000015 	stw	zero,0(r17)
10006664:	a8dffc2c 	andhi	r3,r21,32752
10006668:	009ffc34 	movhi	r2,32752
1000666c:	18801b26 	beq	r3,r2,100066dc <_dtoa_r+0xec>
10006670:	9009883a 	mov	r4,r18
10006674:	980b883a 	mov	r5,r19
10006678:	000d883a 	mov	r6,zero
1000667c:	000f883a 	mov	r7,zero
10006680:	000ddf00 	call	1000ddf0 <__eqdf2>
10006684:	10002a1e 	bne	r2,zero,10006730 <_dtoa_r+0x140>
10006688:	d8c02317 	ldw	r3,140(sp)
1000668c:	d9002517 	ldw	r4,148(sp)
10006690:	00800044 	movi	r2,1
10006694:	18800015 	stw	r2,0(r3)
10006698:	2001a226 	beq	r4,zero,10006d24 <_dtoa_r+0x734>
1000669c:	00840074 	movhi	r2,4097
100066a0:	1084b644 	addi	r2,r2,4825
100066a4:	20800015 	stw	r2,0(r4)
100066a8:	10bfffc4 	addi	r2,r2,-1
100066ac:	dfc02117 	ldw	ra,132(sp)
100066b0:	df002017 	ldw	fp,128(sp)
100066b4:	ddc01f17 	ldw	r23,124(sp)
100066b8:	dd801e17 	ldw	r22,120(sp)
100066bc:	dd401d17 	ldw	r21,116(sp)
100066c0:	dd001c17 	ldw	r20,112(sp)
100066c4:	dcc01b17 	ldw	r19,108(sp)
100066c8:	dc801a17 	ldw	r18,104(sp)
100066cc:	dc401917 	ldw	r17,100(sp)
100066d0:	dc001817 	ldw	r16,96(sp)
100066d4:	dec02204 	addi	sp,sp,136
100066d8:	f800283a 	ret
100066dc:	d8c02317 	ldw	r3,140(sp)
100066e0:	0089c3c4 	movi	r2,9999
100066e4:	18800015 	stw	r2,0(r3)
100066e8:	90017c26 	beq	r18,zero,10006cdc <_dtoa_r+0x6ec>
100066ec:	00840074 	movhi	r2,4097
100066f0:	1084c204 	addi	r2,r2,4872
100066f4:	d9002517 	ldw	r4,148(sp)
100066f8:	203fec26 	beq	r4,zero,100066ac <__alt_data_end+0xf80066ac>
100066fc:	10c000c7 	ldb	r3,3(r2)
10006700:	18017d1e 	bne	r3,zero,10006cf8 <_dtoa_r+0x708>
10006704:	10c000c4 	addi	r3,r2,3
10006708:	d9802517 	ldw	r6,148(sp)
1000670c:	30c00015 	stw	r3,0(r6)
10006710:	003fe606 	br	100066ac <__alt_data_end+0xf80066ac>
10006714:	04e00034 	movhi	r19,32768
10006718:	9cffffc4 	addi	r19,r19,-1
1000671c:	00800044 	movi	r2,1
10006720:	ace6703a 	and	r19,r21,r19
10006724:	88800015 	stw	r2,0(r17)
10006728:	982b883a 	mov	r21,r19
1000672c:	003fcd06 	br	10006664 <__alt_data_end+0xf8006664>
10006730:	d8800204 	addi	r2,sp,8
10006734:	a822d53a 	srli	r17,r21,20
10006738:	d8800015 	stw	r2,0(sp)
1000673c:	8009883a 	mov	r4,r16
10006740:	900b883a 	mov	r5,r18
10006744:	980d883a 	mov	r6,r19
10006748:	d9c00104 	addi	r7,sp,4
1000674c:	000a91c0 	call	1000a91c <__d2b>
10006750:	1039883a 	mov	fp,r2
10006754:	88016a1e 	bne	r17,zero,10006d00 <_dtoa_r+0x710>
10006758:	dd000217 	ldw	r20,8(sp)
1000675c:	dc400117 	ldw	r17,4(sp)
10006760:	00befbc4 	movi	r2,-1041
10006764:	a463883a 	add	r17,r20,r17
10006768:	8882ea16 	blt	r17,r2,10007314 <_dtoa_r+0xd24>
1000676c:	00bf0384 	movi	r2,-1010
10006770:	1445c83a 	sub	r2,r2,r17
10006774:	89010484 	addi	r4,r17,1042
10006778:	a8aa983a 	sll	r21,r21,r2
1000677c:	9108d83a 	srl	r4,r18,r4
10006780:	a908b03a 	or	r4,r21,r4
10006784:	000e8a00 	call	1000e8a0 <__floatunsidf>
10006788:	017f8434 	movhi	r5,65040
1000678c:	01800044 	movi	r6,1
10006790:	1009883a 	mov	r4,r2
10006794:	194b883a 	add	r5,r3,r5
10006798:	8c7fffc4 	addi	r17,r17,-1
1000679c:	d9800f15 	stw	r6,60(sp)
100067a0:	000d883a 	mov	r6,zero
100067a4:	01cffe34 	movhi	r7,16376
100067a8:	00034a40 	call	100034a4 <__subdf3>
100067ac:	0198dbf4 	movhi	r6,25455
100067b0:	01cff4f4 	movhi	r7,16339
100067b4:	1009883a 	mov	r4,r2
100067b8:	180b883a 	mov	r5,r3
100067bc:	3190d844 	addi	r6,r6,17249
100067c0:	39e1e9c4 	addi	r7,r7,-30809
100067c4:	000e0340 	call	1000e034 <__muldf3>
100067c8:	01a2d874 	movhi	r6,35681
100067cc:	01cff1f4 	movhi	r7,16327
100067d0:	180b883a 	mov	r5,r3
100067d4:	31b22cc4 	addi	r6,r6,-14157
100067d8:	39e28a04 	addi	r7,r7,-30168
100067dc:	1009883a 	mov	r4,r2
100067e0:	0002c080 	call	10002c08 <__adddf3>
100067e4:	8809883a 	mov	r4,r17
100067e8:	102d883a 	mov	r22,r2
100067ec:	182b883a 	mov	r21,r3
100067f0:	0003dfc0 	call	10003dfc <__floatsidf>
100067f4:	019427f4 	movhi	r6,20639
100067f8:	01cff4f4 	movhi	r7,16339
100067fc:	1009883a 	mov	r4,r2
10006800:	180b883a 	mov	r5,r3
10006804:	319e7ec4 	addi	r6,r6,31227
10006808:	39d104c4 	addi	r7,r7,17427
1000680c:	000e0340 	call	1000e034 <__muldf3>
10006810:	b009883a 	mov	r4,r22
10006814:	a80b883a 	mov	r5,r21
10006818:	100d883a 	mov	r6,r2
1000681c:	180f883a 	mov	r7,r3
10006820:	0002c080 	call	10002c08 <__adddf3>
10006824:	1009883a 	mov	r4,r2
10006828:	180b883a 	mov	r5,r3
1000682c:	102d883a 	mov	r22,r2
10006830:	182b883a 	mov	r21,r3
10006834:	0003d740 	call	10003d74 <__fixdfsi>
10006838:	b009883a 	mov	r4,r22
1000683c:	a80b883a 	mov	r5,r21
10006840:	000d883a 	mov	r6,zero
10006844:	000f883a 	mov	r7,zero
10006848:	d8800515 	stw	r2,20(sp)
1000684c:	000df540 	call	1000df54 <__ledf2>
10006850:	10023116 	blt	r2,zero,10007118 <_dtoa_r+0xb28>
10006854:	d8c00517 	ldw	r3,20(sp)
10006858:	00800584 	movi	r2,22
1000685c:	10c21f36 	bltu	r2,r3,100070dc <_dtoa_r+0xaec>
10006860:	180490fa 	slli	r2,r3,3
10006864:	00c40074 	movhi	r3,4097
10006868:	18c4de04 	addi	r3,r3,4984
1000686c:	1885883a 	add	r2,r3,r2
10006870:	11000017 	ldw	r4,0(r2)
10006874:	11400117 	ldw	r5,4(r2)
10006878:	900d883a 	mov	r6,r18
1000687c:	980f883a 	mov	r7,r19
10006880:	000de740 	call	1000de74 <__gedf2>
10006884:	0082a70e 	bge	zero,r2,10007324 <_dtoa_r+0xd34>
10006888:	d9000517 	ldw	r4,20(sp)
1000688c:	d8000c15 	stw	zero,48(sp)
10006890:	213fffc4 	addi	r4,r4,-1
10006894:	d9000515 	stw	r4,20(sp)
10006898:	a463c83a 	sub	r17,r20,r17
1000689c:	8dbfffc4 	addi	r22,r17,-1
100068a0:	b0021916 	blt	r22,zero,10007108 <_dtoa_r+0xb18>
100068a4:	d8000815 	stw	zero,32(sp)
100068a8:	d8800517 	ldw	r2,20(sp)
100068ac:	10020e16 	blt	r2,zero,100070e8 <_dtoa_r+0xaf8>
100068b0:	b0ad883a 	add	r22,r22,r2
100068b4:	d8800a15 	stw	r2,40(sp)
100068b8:	d8000915 	stw	zero,36(sp)
100068bc:	d8c00317 	ldw	r3,12(sp)
100068c0:	00800244 	movi	r2,9
100068c4:	10c11a36 	bltu	r2,r3,10006d30 <_dtoa_r+0x740>
100068c8:	00800144 	movi	r2,5
100068cc:	10c4fc0e 	bge	r2,r3,10007cc0 <_dtoa_r+0x16d0>
100068d0:	18ffff04 	addi	r3,r3,-4
100068d4:	d8c00315 	stw	r3,12(sp)
100068d8:	0029883a 	mov	r20,zero
100068dc:	d9800317 	ldw	r6,12(sp)
100068e0:	008000c4 	movi	r2,3
100068e4:	3083bd26 	beq	r6,r2,100077dc <_dtoa_r+0x11ec>
100068e8:	1183670e 	bge	r2,r6,10007688 <_dtoa_r+0x1098>
100068ec:	d8c00317 	ldw	r3,12(sp)
100068f0:	00800104 	movi	r2,4
100068f4:	1882e726 	beq	r3,r2,10007494 <_dtoa_r+0xea4>
100068f8:	00800144 	movi	r2,5
100068fc:	1884f21e 	bne	r3,r2,10007cc8 <_dtoa_r+0x16d8>
10006900:	00800044 	movi	r2,1
10006904:	d8800b15 	stw	r2,44(sp)
10006908:	d8c02217 	ldw	r3,136(sp)
1000690c:	d9000517 	ldw	r4,20(sp)
10006910:	1907883a 	add	r3,r3,r4
10006914:	19800044 	addi	r6,r3,1
10006918:	d8c00d15 	stw	r3,52(sp)
1000691c:	d9800615 	stw	r6,24(sp)
10006920:	0183c30e 	bge	zero,r6,10007830 <_dtoa_r+0x1240>
10006924:	d9800617 	ldw	r6,24(sp)
10006928:	3023883a 	mov	r17,r6
1000692c:	80001115 	stw	zero,68(r16)
10006930:	008005c4 	movi	r2,23
10006934:	1184f62e 	bgeu	r2,r6,10007d10 <_dtoa_r+0x1720>
10006938:	00c00044 	movi	r3,1
1000693c:	00800104 	movi	r2,4
10006940:	1085883a 	add	r2,r2,r2
10006944:	11000504 	addi	r4,r2,20
10006948:	180b883a 	mov	r5,r3
1000694c:	18c00044 	addi	r3,r3,1
10006950:	313ffb2e 	bgeu	r6,r4,10006940 <__alt_data_end+0xf8006940>
10006954:	81401115 	stw	r5,68(r16)
10006958:	8009883a 	mov	r4,r16
1000695c:	0009c2c0 	call	10009c2c <_Balloc>
10006960:	d8800715 	stw	r2,28(sp)
10006964:	80801015 	stw	r2,64(r16)
10006968:	00800384 	movi	r2,14
1000696c:	1440fd36 	bltu	r2,r17,10006d64 <_dtoa_r+0x774>
10006970:	a000fc26 	beq	r20,zero,10006d64 <_dtoa_r+0x774>
10006974:	d8800517 	ldw	r2,20(sp)
10006978:	0083b90e 	bge	zero,r2,10007860 <_dtoa_r+0x1270>
1000697c:	d8c00517 	ldw	r3,20(sp)
10006980:	108003cc 	andi	r2,r2,15
10006984:	100490fa 	slli	r2,r2,3
10006988:	182fd13a 	srai	r23,r3,4
1000698c:	00c40074 	movhi	r3,4097
10006990:	18c4de04 	addi	r3,r3,4984
10006994:	1885883a 	add	r2,r3,r2
10006998:	b8c0040c 	andi	r3,r23,16
1000699c:	12c00017 	ldw	r11,0(r2)
100069a0:	12800117 	ldw	r10,4(r2)
100069a4:	18039726 	beq	r3,zero,10007804 <_dtoa_r+0x1214>
100069a8:	00840074 	movhi	r2,4097
100069ac:	1084d404 	addi	r2,r2,4944
100069b0:	11800817 	ldw	r6,32(r2)
100069b4:	11c00917 	ldw	r7,36(r2)
100069b8:	9009883a 	mov	r4,r18
100069bc:	980b883a 	mov	r5,r19
100069c0:	da801615 	stw	r10,88(sp)
100069c4:	dac01515 	stw	r11,84(sp)
100069c8:	000d4700 	call	1000d470 <__divdf3>
100069cc:	da801617 	ldw	r10,88(sp)
100069d0:	dac01517 	ldw	r11,84(sp)
100069d4:	bdc003cc 	andi	r23,r23,15
100069d8:	044000c4 	movi	r17,3
100069dc:	d8800e15 	stw	r2,56(sp)
100069e0:	182b883a 	mov	r21,r3
100069e4:	b8001126 	beq	r23,zero,10006a2c <_dtoa_r+0x43c>
100069e8:	05040074 	movhi	r20,4097
100069ec:	a504d404 	addi	r20,r20,4944
100069f0:	5805883a 	mov	r2,r11
100069f4:	5007883a 	mov	r3,r10
100069f8:	b980004c 	andi	r6,r23,1
100069fc:	1009883a 	mov	r4,r2
10006a00:	b82fd07a 	srai	r23,r23,1
10006a04:	180b883a 	mov	r5,r3
10006a08:	30000426 	beq	r6,zero,10006a1c <_dtoa_r+0x42c>
10006a0c:	a1800017 	ldw	r6,0(r20)
10006a10:	a1c00117 	ldw	r7,4(r20)
10006a14:	8c400044 	addi	r17,r17,1
10006a18:	000e0340 	call	1000e034 <__muldf3>
10006a1c:	a5000204 	addi	r20,r20,8
10006a20:	b83ff51e 	bne	r23,zero,100069f8 <__alt_data_end+0xf80069f8>
10006a24:	1017883a 	mov	r11,r2
10006a28:	1815883a 	mov	r10,r3
10006a2c:	d9000e17 	ldw	r4,56(sp)
10006a30:	a80b883a 	mov	r5,r21
10006a34:	580d883a 	mov	r6,r11
10006a38:	500f883a 	mov	r7,r10
10006a3c:	000d4700 	call	1000d470 <__divdf3>
10006a40:	1029883a 	mov	r20,r2
10006a44:	182b883a 	mov	r21,r3
10006a48:	d9800c17 	ldw	r6,48(sp)
10006a4c:	30000626 	beq	r6,zero,10006a68 <_dtoa_r+0x478>
10006a50:	a009883a 	mov	r4,r20
10006a54:	a80b883a 	mov	r5,r21
10006a58:	000d883a 	mov	r6,zero
10006a5c:	01cffc34 	movhi	r7,16368
10006a60:	000df540 	call	1000df54 <__ledf2>
10006a64:	10043216 	blt	r2,zero,10007b30 <_dtoa_r+0x1540>
10006a68:	8809883a 	mov	r4,r17
10006a6c:	0003dfc0 	call	10003dfc <__floatsidf>
10006a70:	1009883a 	mov	r4,r2
10006a74:	180b883a 	mov	r5,r3
10006a78:	a00d883a 	mov	r6,r20
10006a7c:	a80f883a 	mov	r7,r21
10006a80:	000e0340 	call	1000e034 <__muldf3>
10006a84:	000d883a 	mov	r6,zero
10006a88:	1009883a 	mov	r4,r2
10006a8c:	180b883a 	mov	r5,r3
10006a90:	01d00734 	movhi	r7,16412
10006a94:	0002c080 	call	10002c08 <__adddf3>
10006a98:	1023883a 	mov	r17,r2
10006a9c:	d9800617 	ldw	r6,24(sp)
10006aa0:	00bf3034 	movhi	r2,64704
10006aa4:	1885883a 	add	r2,r3,r2
10006aa8:	d8800e15 	stw	r2,56(sp)
10006aac:	30032e26 	beq	r6,zero,10007768 <_dtoa_r+0x1178>
10006ab0:	d8c00517 	ldw	r3,20(sp)
10006ab4:	da800617 	ldw	r10,24(sp)
10006ab8:	d8c01215 	stw	r3,72(sp)
10006abc:	d9000b17 	ldw	r4,44(sp)
10006ac0:	2003b026 	beq	r4,zero,10007984 <_dtoa_r+0x1394>
10006ac4:	50bfffc4 	addi	r2,r10,-1
10006ac8:	100490fa 	slli	r2,r2,3
10006acc:	00c40074 	movhi	r3,4097
10006ad0:	18c4de04 	addi	r3,r3,4984
10006ad4:	1885883a 	add	r2,r3,r2
10006ad8:	11800017 	ldw	r6,0(r2)
10006adc:	11c00117 	ldw	r7,4(r2)
10006ae0:	d8800717 	ldw	r2,28(sp)
10006ae4:	0009883a 	mov	r4,zero
10006ae8:	014ff834 	movhi	r5,16352
10006aec:	da801615 	stw	r10,88(sp)
10006af0:	15c00044 	addi	r23,r2,1
10006af4:	000d4700 	call	1000d470 <__divdf3>
10006af8:	d9c00e17 	ldw	r7,56(sp)
10006afc:	880d883a 	mov	r6,r17
10006b00:	1009883a 	mov	r4,r2
10006b04:	180b883a 	mov	r5,r3
10006b08:	00034a40 	call	100034a4 <__subdf3>
10006b0c:	a80b883a 	mov	r5,r21
10006b10:	a009883a 	mov	r4,r20
10006b14:	d8c01015 	stw	r3,64(sp)
10006b18:	d8800e15 	stw	r2,56(sp)
10006b1c:	0003d740 	call	10003d74 <__fixdfsi>
10006b20:	1009883a 	mov	r4,r2
10006b24:	d8801715 	stw	r2,92(sp)
10006b28:	0003dfc0 	call	10003dfc <__floatsidf>
10006b2c:	a009883a 	mov	r4,r20
10006b30:	a80b883a 	mov	r5,r21
10006b34:	100d883a 	mov	r6,r2
10006b38:	180f883a 	mov	r7,r3
10006b3c:	00034a40 	call	100034a4 <__subdf3>
10006b40:	da001717 	ldw	r8,92(sp)
10006b44:	1829883a 	mov	r20,r3
10006b48:	d8c00717 	ldw	r3,28(sp)
10006b4c:	d9000e17 	ldw	r4,56(sp)
10006b50:	d9401017 	ldw	r5,64(sp)
10006b54:	42000c04 	addi	r8,r8,48
10006b58:	1023883a 	mov	r17,r2
10006b5c:	1a000005 	stb	r8,0(r3)
10006b60:	880d883a 	mov	r6,r17
10006b64:	a00f883a 	mov	r7,r20
10006b68:	402b883a 	mov	r21,r8
10006b6c:	000de740 	call	1000de74 <__gedf2>
10006b70:	00844516 	blt	zero,r2,10007c88 <_dtoa_r+0x1698>
10006b74:	0009883a 	mov	r4,zero
10006b78:	014ffc34 	movhi	r5,16368
10006b7c:	880d883a 	mov	r6,r17
10006b80:	a00f883a 	mov	r7,r20
10006b84:	00034a40 	call	100034a4 <__subdf3>
10006b88:	d9000e17 	ldw	r4,56(sp)
10006b8c:	d9401017 	ldw	r5,64(sp)
10006b90:	100d883a 	mov	r6,r2
10006b94:	180f883a 	mov	r7,r3
10006b98:	000de740 	call	1000de74 <__gedf2>
10006b9c:	da801617 	ldw	r10,88(sp)
10006ba0:	00843616 	blt	zero,r2,10007c7c <_dtoa_r+0x168c>
10006ba4:	00800044 	movi	r2,1
10006ba8:	12806e0e 	bge	r2,r10,10006d64 <_dtoa_r+0x774>
10006bac:	d9000717 	ldw	r4,28(sp)
10006bb0:	dd801315 	stw	r22,76(sp)
10006bb4:	dc001115 	stw	r16,68(sp)
10006bb8:	2295883a 	add	r10,r4,r10
10006bbc:	dcc01415 	stw	r19,80(sp)
10006bc0:	502d883a 	mov	r22,r10
10006bc4:	dcc01017 	ldw	r19,64(sp)
10006bc8:	b821883a 	mov	r16,r23
10006bcc:	dc801015 	stw	r18,64(sp)
10006bd0:	dc800e17 	ldw	r18,56(sp)
10006bd4:	00000906 	br	10006bfc <_dtoa_r+0x60c>
10006bd8:	00034a40 	call	100034a4 <__subdf3>
10006bdc:	1009883a 	mov	r4,r2
10006be0:	180b883a 	mov	r5,r3
10006be4:	900d883a 	mov	r6,r18
10006be8:	980f883a 	mov	r7,r19
10006bec:	000df540 	call	1000df54 <__ledf2>
10006bf0:	10040e16 	blt	r2,zero,10007c2c <_dtoa_r+0x163c>
10006bf4:	b821883a 	mov	r16,r23
10006bf8:	bd841026 	beq	r23,r22,10007c3c <_dtoa_r+0x164c>
10006bfc:	9009883a 	mov	r4,r18
10006c00:	980b883a 	mov	r5,r19
10006c04:	000d883a 	mov	r6,zero
10006c08:	01d00934 	movhi	r7,16420
10006c0c:	000e0340 	call	1000e034 <__muldf3>
10006c10:	000d883a 	mov	r6,zero
10006c14:	01d00934 	movhi	r7,16420
10006c18:	8809883a 	mov	r4,r17
10006c1c:	a00b883a 	mov	r5,r20
10006c20:	1025883a 	mov	r18,r2
10006c24:	1827883a 	mov	r19,r3
10006c28:	000e0340 	call	1000e034 <__muldf3>
10006c2c:	180b883a 	mov	r5,r3
10006c30:	1009883a 	mov	r4,r2
10006c34:	1823883a 	mov	r17,r3
10006c38:	1029883a 	mov	r20,r2
10006c3c:	0003d740 	call	10003d74 <__fixdfsi>
10006c40:	1009883a 	mov	r4,r2
10006c44:	102b883a 	mov	r21,r2
10006c48:	0003dfc0 	call	10003dfc <__floatsidf>
10006c4c:	a009883a 	mov	r4,r20
10006c50:	880b883a 	mov	r5,r17
10006c54:	100d883a 	mov	r6,r2
10006c58:	180f883a 	mov	r7,r3
10006c5c:	00034a40 	call	100034a4 <__subdf3>
10006c60:	ad400c04 	addi	r21,r21,48
10006c64:	1009883a 	mov	r4,r2
10006c68:	180b883a 	mov	r5,r3
10006c6c:	900d883a 	mov	r6,r18
10006c70:	980f883a 	mov	r7,r19
10006c74:	85400005 	stb	r21,0(r16)
10006c78:	1023883a 	mov	r17,r2
10006c7c:	1829883a 	mov	r20,r3
10006c80:	000df540 	call	1000df54 <__ledf2>
10006c84:	bdc00044 	addi	r23,r23,1
10006c88:	0009883a 	mov	r4,zero
10006c8c:	014ffc34 	movhi	r5,16368
10006c90:	880d883a 	mov	r6,r17
10006c94:	a00f883a 	mov	r7,r20
10006c98:	103fcf0e 	bge	r2,zero,10006bd8 <__alt_data_end+0xf8006bd8>
10006c9c:	d9801217 	ldw	r6,72(sp)
10006ca0:	dc001117 	ldw	r16,68(sp)
10006ca4:	d9800515 	stw	r6,20(sp)
10006ca8:	8009883a 	mov	r4,r16
10006cac:	e00b883a 	mov	r5,fp
10006cb0:	0009cd40 	call	10009cd4 <_Bfree>
10006cb4:	d8c00517 	ldw	r3,20(sp)
10006cb8:	d9002317 	ldw	r4,140(sp)
10006cbc:	d9802517 	ldw	r6,148(sp)
10006cc0:	b8000005 	stb	zero,0(r23)
10006cc4:	18800044 	addi	r2,r3,1
10006cc8:	20800015 	stw	r2,0(r4)
10006ccc:	30027226 	beq	r6,zero,10007698 <_dtoa_r+0x10a8>
10006cd0:	35c00015 	stw	r23,0(r6)
10006cd4:	d8800717 	ldw	r2,28(sp)
10006cd8:	003e7406 	br	100066ac <__alt_data_end+0xf80066ac>
10006cdc:	00800434 	movhi	r2,16
10006ce0:	10bfffc4 	addi	r2,r2,-1
10006ce4:	a8aa703a 	and	r21,r21,r2
10006ce8:	a83e801e 	bne	r21,zero,100066ec <__alt_data_end+0xf80066ec>
10006cec:	00840074 	movhi	r2,4097
10006cf0:	1084bf04 	addi	r2,r2,4860
10006cf4:	003e7f06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006cf8:	10c00204 	addi	r3,r2,8
10006cfc:	003e8206 	br	10006708 <__alt_data_end+0xf8006708>
10006d00:	01400434 	movhi	r5,16
10006d04:	297fffc4 	addi	r5,r5,-1
10006d08:	994a703a 	and	r5,r19,r5
10006d0c:	9009883a 	mov	r4,r18
10006d10:	8c7f0044 	addi	r17,r17,-1023
10006d14:	294ffc34 	orhi	r5,r5,16368
10006d18:	dd000217 	ldw	r20,8(sp)
10006d1c:	d8000f15 	stw	zero,60(sp)
10006d20:	003e9f06 	br	100067a0 <__alt_data_end+0xf80067a0>
10006d24:	00840074 	movhi	r2,4097
10006d28:	1084b604 	addi	r2,r2,4824
10006d2c:	003e5f06 	br	100066ac <__alt_data_end+0xf80066ac>
10006d30:	80001115 	stw	zero,68(r16)
10006d34:	8009883a 	mov	r4,r16
10006d38:	000b883a 	mov	r5,zero
10006d3c:	0009c2c0 	call	10009c2c <_Balloc>
10006d40:	01bfffc4 	movi	r6,-1
10006d44:	d8800715 	stw	r2,28(sp)
10006d48:	80801015 	stw	r2,64(r16)
10006d4c:	00800044 	movi	r2,1
10006d50:	d9800615 	stw	r6,24(sp)
10006d54:	d8800b15 	stw	r2,44(sp)
10006d58:	d8002215 	stw	zero,136(sp)
10006d5c:	d9800d15 	stw	r6,52(sp)
10006d60:	d8000315 	stw	zero,12(sp)
10006d64:	d8800117 	ldw	r2,4(sp)
10006d68:	10008e16 	blt	r2,zero,10006fa4 <_dtoa_r+0x9b4>
10006d6c:	d9000517 	ldw	r4,20(sp)
10006d70:	00c00384 	movi	r3,14
10006d74:	19008b16 	blt	r3,r4,10006fa4 <_dtoa_r+0x9b4>
10006d78:	200490fa 	slli	r2,r4,3
10006d7c:	00c40074 	movhi	r3,4097
10006d80:	d9802217 	ldw	r6,136(sp)
10006d84:	18c4de04 	addi	r3,r3,4984
10006d88:	1885883a 	add	r2,r3,r2
10006d8c:	14400017 	ldw	r17,0(r2)
10006d90:	15000117 	ldw	r20,4(r2)
10006d94:	3001c716 	blt	r6,zero,100074b4 <_dtoa_r+0xec4>
10006d98:	880d883a 	mov	r6,r17
10006d9c:	a00f883a 	mov	r7,r20
10006da0:	9009883a 	mov	r4,r18
10006da4:	980b883a 	mov	r5,r19
10006da8:	000d4700 	call	1000d470 <__divdf3>
10006dac:	180b883a 	mov	r5,r3
10006db0:	1009883a 	mov	r4,r2
10006db4:	0003d740 	call	10003d74 <__fixdfsi>
10006db8:	1009883a 	mov	r4,r2
10006dbc:	102d883a 	mov	r22,r2
10006dc0:	0003dfc0 	call	10003dfc <__floatsidf>
10006dc4:	1009883a 	mov	r4,r2
10006dc8:	180b883a 	mov	r5,r3
10006dcc:	880d883a 	mov	r6,r17
10006dd0:	a00f883a 	mov	r7,r20
10006dd4:	000e0340 	call	1000e034 <__muldf3>
10006dd8:	9009883a 	mov	r4,r18
10006ddc:	980b883a 	mov	r5,r19
10006de0:	100d883a 	mov	r6,r2
10006de4:	180f883a 	mov	r7,r3
10006de8:	00034a40 	call	100034a4 <__subdf3>
10006dec:	d9000717 	ldw	r4,28(sp)
10006df0:	d9800617 	ldw	r6,24(sp)
10006df4:	180b883a 	mov	r5,r3
10006df8:	b0c00c04 	addi	r3,r22,48
10006dfc:	20c00005 	stb	r3,0(r4)
10006e00:	25c00044 	addi	r23,r4,1
10006e04:	01000044 	movi	r4,1
10006e08:	1011883a 	mov	r8,r2
10006e0c:	2807883a 	mov	r3,r5
10006e10:	31003d26 	beq	r6,r4,10006f08 <_dtoa_r+0x918>
10006e14:	000d883a 	mov	r6,zero
10006e18:	01d00934 	movhi	r7,16420
10006e1c:	1009883a 	mov	r4,r2
10006e20:	000e0340 	call	1000e034 <__muldf3>
10006e24:	1009883a 	mov	r4,r2
10006e28:	180b883a 	mov	r5,r3
10006e2c:	000d883a 	mov	r6,zero
10006e30:	000f883a 	mov	r7,zero
10006e34:	1027883a 	mov	r19,r2
10006e38:	182b883a 	mov	r21,r3
10006e3c:	000ddf00 	call	1000ddf0 <__eqdf2>
10006e40:	103f9926 	beq	r2,zero,10006ca8 <__alt_data_end+0xf8006ca8>
10006e44:	d8c00617 	ldw	r3,24(sp)
10006e48:	d9000717 	ldw	r4,28(sp)
10006e4c:	b825883a 	mov	r18,r23
10006e50:	18bfffc4 	addi	r2,r3,-1
10006e54:	20ad883a 	add	r22,r4,r2
10006e58:	dc000315 	stw	r16,12(sp)
10006e5c:	00000a06 	br	10006e88 <_dtoa_r+0x898>
10006e60:	000e0340 	call	1000e034 <__muldf3>
10006e64:	1009883a 	mov	r4,r2
10006e68:	180b883a 	mov	r5,r3
10006e6c:	000d883a 	mov	r6,zero
10006e70:	000f883a 	mov	r7,zero
10006e74:	1027883a 	mov	r19,r2
10006e78:	182b883a 	mov	r21,r3
10006e7c:	b825883a 	mov	r18,r23
10006e80:	000ddf00 	call	1000ddf0 <__eqdf2>
10006e84:	10022626 	beq	r2,zero,10007720 <_dtoa_r+0x1130>
10006e88:	880d883a 	mov	r6,r17
10006e8c:	a00f883a 	mov	r7,r20
10006e90:	9809883a 	mov	r4,r19
10006e94:	a80b883a 	mov	r5,r21
10006e98:	000d4700 	call	1000d470 <__divdf3>
10006e9c:	180b883a 	mov	r5,r3
10006ea0:	1009883a 	mov	r4,r2
10006ea4:	0003d740 	call	10003d74 <__fixdfsi>
10006ea8:	1009883a 	mov	r4,r2
10006eac:	1021883a 	mov	r16,r2
10006eb0:	0003dfc0 	call	10003dfc <__floatsidf>
10006eb4:	1009883a 	mov	r4,r2
10006eb8:	180b883a 	mov	r5,r3
10006ebc:	880d883a 	mov	r6,r17
10006ec0:	a00f883a 	mov	r7,r20
10006ec4:	000e0340 	call	1000e034 <__muldf3>
10006ec8:	9809883a 	mov	r4,r19
10006ecc:	a80b883a 	mov	r5,r21
10006ed0:	100d883a 	mov	r6,r2
10006ed4:	180f883a 	mov	r7,r3
10006ed8:	00034a40 	call	100034a4 <__subdf3>
10006edc:	82000c04 	addi	r8,r16,48
10006ee0:	92000005 	stb	r8,0(r18)
10006ee4:	1009883a 	mov	r4,r2
10006ee8:	180b883a 	mov	r5,r3
10006eec:	000d883a 	mov	r6,zero
10006ef0:	01d00934 	movhi	r7,16420
10006ef4:	1011883a 	mov	r8,r2
10006ef8:	bdc00044 	addi	r23,r23,1
10006efc:	95bfd81e 	bne	r18,r22,10006e60 <__alt_data_end+0xf8006e60>
10006f00:	802d883a 	mov	r22,r16
10006f04:	dc000317 	ldw	r16,12(sp)
10006f08:	4009883a 	mov	r4,r8
10006f0c:	180b883a 	mov	r5,r3
10006f10:	400d883a 	mov	r6,r8
10006f14:	180f883a 	mov	r7,r3
10006f18:	0002c080 	call	10002c08 <__adddf3>
10006f1c:	8809883a 	mov	r4,r17
10006f20:	a00b883a 	mov	r5,r20
10006f24:	100d883a 	mov	r6,r2
10006f28:	180f883a 	mov	r7,r3
10006f2c:	1027883a 	mov	r19,r2
10006f30:	1825883a 	mov	r18,r3
10006f34:	000df540 	call	1000df54 <__ledf2>
10006f38:	10000816 	blt	r2,zero,10006f5c <_dtoa_r+0x96c>
10006f3c:	8809883a 	mov	r4,r17
10006f40:	a00b883a 	mov	r5,r20
10006f44:	980d883a 	mov	r6,r19
10006f48:	900f883a 	mov	r7,r18
10006f4c:	000ddf00 	call	1000ddf0 <__eqdf2>
10006f50:	103f551e 	bne	r2,zero,10006ca8 <__alt_data_end+0xf8006ca8>
10006f54:	b580004c 	andi	r22,r22,1
10006f58:	b03f5326 	beq	r22,zero,10006ca8 <__alt_data_end+0xf8006ca8>
10006f5c:	bd7fffc3 	ldbu	r21,-1(r23)
10006f60:	b8bfffc4 	addi	r2,r23,-1
10006f64:	1007883a 	mov	r3,r2
10006f68:	01400e44 	movi	r5,57
10006f6c:	d9800717 	ldw	r6,28(sp)
10006f70:	00000506 	br	10006f88 <_dtoa_r+0x998>
10006f74:	18ffffc4 	addi	r3,r3,-1
10006f78:	30825e26 	beq	r6,r2,100078f4 <_dtoa_r+0x1304>
10006f7c:	1d400003 	ldbu	r21,0(r3)
10006f80:	102f883a 	mov	r23,r2
10006f84:	10bfffc4 	addi	r2,r2,-1
10006f88:	a9003fcc 	andi	r4,r21,255
10006f8c:	2100201c 	xori	r4,r4,128
10006f90:	213fe004 	addi	r4,r4,-128
10006f94:	217ff726 	beq	r4,r5,10006f74 <__alt_data_end+0xf8006f74>
10006f98:	aa000044 	addi	r8,r21,1
10006f9c:	12000005 	stb	r8,0(r2)
10006fa0:	003f4106 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10006fa4:	d8c00b17 	ldw	r3,44(sp)
10006fa8:	18006726 	beq	r3,zero,10007148 <_dtoa_r+0xb58>
10006fac:	d9000317 	ldw	r4,12(sp)
10006fb0:	00c00044 	movi	r3,1
10006fb4:	19016a0e 	bge	r3,r4,10007560 <_dtoa_r+0xf70>
10006fb8:	d8800617 	ldw	r2,24(sp)
10006fbc:	d8c00917 	ldw	r3,36(sp)
10006fc0:	157fffc4 	addi	r21,r2,-1
10006fc4:	1d420716 	blt	r3,r21,100077e4 <_dtoa_r+0x11f4>
10006fc8:	1d6bc83a 	sub	r21,r3,r21
10006fcc:	d8800617 	ldw	r2,24(sp)
10006fd0:	1002c716 	blt	r2,zero,10007af0 <_dtoa_r+0x1500>
10006fd4:	dd000817 	ldw	r20,32(sp)
10006fd8:	d8800617 	ldw	r2,24(sp)
10006fdc:	d9800817 	ldw	r6,32(sp)
10006fe0:	8009883a 	mov	r4,r16
10006fe4:	01400044 	movi	r5,1
10006fe8:	308d883a 	add	r6,r6,r2
10006fec:	d9800815 	stw	r6,32(sp)
10006ff0:	b0ad883a 	add	r22,r22,r2
10006ff4:	000a0540 	call	1000a054 <__i2b>
10006ff8:	1023883a 	mov	r17,r2
10006ffc:	a0000826 	beq	r20,zero,10007020 <_dtoa_r+0xa30>
10007000:	0580070e 	bge	zero,r22,10007020 <_dtoa_r+0xa30>
10007004:	b005883a 	mov	r2,r22
10007008:	a5812016 	blt	r20,r22,1000748c <_dtoa_r+0xe9c>
1000700c:	d8c00817 	ldw	r3,32(sp)
10007010:	a0a9c83a 	sub	r20,r20,r2
10007014:	b0adc83a 	sub	r22,r22,r2
10007018:	1887c83a 	sub	r3,r3,r2
1000701c:	d8c00815 	stw	r3,32(sp)
10007020:	d9000917 	ldw	r4,36(sp)
10007024:	0100140e 	bge	zero,r4,10007078 <_dtoa_r+0xa88>
10007028:	d9800b17 	ldw	r6,44(sp)
1000702c:	3001e526 	beq	r6,zero,100077c4 <_dtoa_r+0x11d4>
10007030:	05400e0e 	bge	zero,r21,1000706c <_dtoa_r+0xa7c>
10007034:	880b883a 	mov	r5,r17
10007038:	8009883a 	mov	r4,r16
1000703c:	a80d883a 	mov	r6,r21
10007040:	000a3200 	call	1000a320 <__pow5mult>
10007044:	e00d883a 	mov	r6,fp
10007048:	8009883a 	mov	r4,r16
1000704c:	100b883a 	mov	r5,r2
10007050:	1023883a 	mov	r17,r2
10007054:	000a0900 	call	1000a090 <__multiply>
10007058:	102f883a 	mov	r23,r2
1000705c:	e00b883a 	mov	r5,fp
10007060:	8009883a 	mov	r4,r16
10007064:	0009cd40 	call	10009cd4 <_Bfree>
10007068:	b839883a 	mov	fp,r23
1000706c:	d8800917 	ldw	r2,36(sp)
10007070:	154dc83a 	sub	r6,r2,r21
10007074:	3001281e 	bne	r6,zero,10007518 <_dtoa_r+0xf28>
10007078:	05c00044 	movi	r23,1
1000707c:	8009883a 	mov	r4,r16
10007080:	b80b883a 	mov	r5,r23
10007084:	000a0540 	call	1000a054 <__i2b>
10007088:	d8c00a17 	ldw	r3,40(sp)
1000708c:	102b883a 	mov	r21,r2
10007090:	00c0310e 	bge	zero,r3,10007158 <_dtoa_r+0xb68>
10007094:	8009883a 	mov	r4,r16
10007098:	100b883a 	mov	r5,r2
1000709c:	180d883a 	mov	r6,r3
100070a0:	000a3200 	call	1000a320 <__pow5mult>
100070a4:	d9000317 	ldw	r4,12(sp)
100070a8:	102b883a 	mov	r21,r2
100070ac:	b9011f0e 	bge	r23,r4,1000752c <_dtoa_r+0xf3c>
100070b0:	0027883a 	mov	r19,zero
100070b4:	a8800417 	ldw	r2,16(r21)
100070b8:	10800104 	addi	r2,r2,4
100070bc:	1085883a 	add	r2,r2,r2
100070c0:	1085883a 	add	r2,r2,r2
100070c4:	a885883a 	add	r2,r21,r2
100070c8:	11000017 	ldw	r4,0(r2)
100070cc:	0009f3c0 	call	10009f3c <__hi0bits>
100070d0:	00c00804 	movi	r3,32
100070d4:	1885c83a 	sub	r2,r3,r2
100070d8:	00002506 	br	10007170 <_dtoa_r+0xb80>
100070dc:	01800044 	movi	r6,1
100070e0:	d9800c15 	stw	r6,48(sp)
100070e4:	003dec06 	br	10006898 <__alt_data_end+0xf8006898>
100070e8:	d8c00817 	ldw	r3,32(sp)
100070ec:	d9000517 	ldw	r4,20(sp)
100070f0:	d8000a15 	stw	zero,40(sp)
100070f4:	1907c83a 	sub	r3,r3,r4
100070f8:	010dc83a 	sub	r6,zero,r4
100070fc:	d8c00815 	stw	r3,32(sp)
10007100:	d9800915 	stw	r6,36(sp)
10007104:	003ded06 	br	100068bc <__alt_data_end+0xf80068bc>
10007108:	05adc83a 	sub	r22,zero,r22
1000710c:	dd800815 	stw	r22,32(sp)
10007110:	002d883a 	mov	r22,zero
10007114:	003de406 	br	100068a8 <__alt_data_end+0xf80068a8>
10007118:	d9000517 	ldw	r4,20(sp)
1000711c:	0003dfc0 	call	10003dfc <__floatsidf>
10007120:	1009883a 	mov	r4,r2
10007124:	180b883a 	mov	r5,r3
10007128:	b00d883a 	mov	r6,r22
1000712c:	a80f883a 	mov	r7,r21
10007130:	000ddf00 	call	1000ddf0 <__eqdf2>
10007134:	103dc726 	beq	r2,zero,10006854 <__alt_data_end+0xf8006854>
10007138:	d8800517 	ldw	r2,20(sp)
1000713c:	10bfffc4 	addi	r2,r2,-1
10007140:	d8800515 	stw	r2,20(sp)
10007144:	003dc306 	br	10006854 <__alt_data_end+0xf8006854>
10007148:	dd400917 	ldw	r21,36(sp)
1000714c:	dd000817 	ldw	r20,32(sp)
10007150:	0023883a 	mov	r17,zero
10007154:	003fa906 	br	10006ffc <__alt_data_end+0xf8006ffc>
10007158:	d9800317 	ldw	r6,12(sp)
1000715c:	b981670e 	bge	r23,r6,100076fc <_dtoa_r+0x110c>
10007160:	0027883a 	mov	r19,zero
10007164:	d8c00a17 	ldw	r3,40(sp)
10007168:	183fd21e 	bne	r3,zero,100070b4 <__alt_data_end+0xf80070b4>
1000716c:	00800044 	movi	r2,1
10007170:	1585883a 	add	r2,r2,r22
10007174:	108007cc 	andi	r2,r2,31
10007178:	10005f26 	beq	r2,zero,100072f8 <_dtoa_r+0xd08>
1000717c:	00c00804 	movi	r3,32
10007180:	1887c83a 	sub	r3,r3,r2
10007184:	01000104 	movi	r4,4
10007188:	20c2dd0e 	bge	r4,r3,10007d00 <_dtoa_r+0x1710>
1000718c:	d9000817 	ldw	r4,32(sp)
10007190:	00c00704 	movi	r3,28
10007194:	1885c83a 	sub	r2,r3,r2
10007198:	2089883a 	add	r4,r4,r2
1000719c:	d9000815 	stw	r4,32(sp)
100071a0:	a0a9883a 	add	r20,r20,r2
100071a4:	b0ad883a 	add	r22,r22,r2
100071a8:	d8800817 	ldw	r2,32(sp)
100071ac:	0080050e 	bge	zero,r2,100071c4 <_dtoa_r+0xbd4>
100071b0:	e00b883a 	mov	r5,fp
100071b4:	8009883a 	mov	r4,r16
100071b8:	100d883a 	mov	r6,r2
100071bc:	000a4600 	call	1000a460 <__lshift>
100071c0:	1039883a 	mov	fp,r2
100071c4:	0580050e 	bge	zero,r22,100071dc <_dtoa_r+0xbec>
100071c8:	a80b883a 	mov	r5,r21
100071cc:	8009883a 	mov	r4,r16
100071d0:	b00d883a 	mov	r6,r22
100071d4:	000a4600 	call	1000a460 <__lshift>
100071d8:	102b883a 	mov	r21,r2
100071dc:	d8c00c17 	ldw	r3,48(sp)
100071e0:	1801161e 	bne	r3,zero,1000763c <_dtoa_r+0x104c>
100071e4:	d8c00617 	ldw	r3,24(sp)
100071e8:	00c12d0e 	bge	zero,r3,100076a0 <_dtoa_r+0x10b0>
100071ec:	d8c00b17 	ldw	r3,44(sp)
100071f0:	1800571e 	bne	r3,zero,10007350 <_dtoa_r+0xd60>
100071f4:	dc800717 	ldw	r18,28(sp)
100071f8:	dcc00617 	ldw	r19,24(sp)
100071fc:	9029883a 	mov	r20,r18
10007200:	00000206 	br	1000720c <_dtoa_r+0xc1c>
10007204:	0009cfc0 	call	10009cfc <__multadd>
10007208:	1039883a 	mov	fp,r2
1000720c:	e009883a 	mov	r4,fp
10007210:	a80b883a 	mov	r5,r21
10007214:	00063c80 	call	100063c8 <quorem>
10007218:	10800c04 	addi	r2,r2,48
1000721c:	90800005 	stb	r2,0(r18)
10007220:	94800044 	addi	r18,r18,1
10007224:	9507c83a 	sub	r3,r18,r20
10007228:	8009883a 	mov	r4,r16
1000722c:	e00b883a 	mov	r5,fp
10007230:	01800284 	movi	r6,10
10007234:	000f883a 	mov	r7,zero
10007238:	1cfff216 	blt	r3,r19,10007204 <__alt_data_end+0xf8007204>
1000723c:	1011883a 	mov	r8,r2
10007240:	d8800617 	ldw	r2,24(sp)
10007244:	00822e0e 	bge	zero,r2,10007b00 <_dtoa_r+0x1510>
10007248:	d9000717 	ldw	r4,28(sp)
1000724c:	0025883a 	mov	r18,zero
10007250:	20af883a 	add	r23,r4,r2
10007254:	e00b883a 	mov	r5,fp
10007258:	01800044 	movi	r6,1
1000725c:	8009883a 	mov	r4,r16
10007260:	da001715 	stw	r8,92(sp)
10007264:	000a4600 	call	1000a460 <__lshift>
10007268:	1009883a 	mov	r4,r2
1000726c:	a80b883a 	mov	r5,r21
10007270:	1039883a 	mov	fp,r2
10007274:	000a5a80 	call	1000a5a8 <__mcmp>
10007278:	da001717 	ldw	r8,92(sp)
1000727c:	00816e0e 	bge	zero,r2,10007838 <_dtoa_r+0x1248>
10007280:	b93fffc3 	ldbu	r4,-1(r23)
10007284:	b8bfffc4 	addi	r2,r23,-1
10007288:	1007883a 	mov	r3,r2
1000728c:	01800e44 	movi	r6,57
10007290:	d9c00717 	ldw	r7,28(sp)
10007294:	00000506 	br	100072ac <_dtoa_r+0xcbc>
10007298:	18ffffc4 	addi	r3,r3,-1
1000729c:	38811926 	beq	r7,r2,10007704 <_dtoa_r+0x1114>
100072a0:	19000003 	ldbu	r4,0(r3)
100072a4:	102f883a 	mov	r23,r2
100072a8:	10bfffc4 	addi	r2,r2,-1
100072ac:	21403fcc 	andi	r5,r4,255
100072b0:	2940201c 	xori	r5,r5,128
100072b4:	297fe004 	addi	r5,r5,-128
100072b8:	29bff726 	beq	r5,r6,10007298 <__alt_data_end+0xf8007298>
100072bc:	21000044 	addi	r4,r4,1
100072c0:	11000005 	stb	r4,0(r2)
100072c4:	8009883a 	mov	r4,r16
100072c8:	a80b883a 	mov	r5,r21
100072cc:	0009cd40 	call	10009cd4 <_Bfree>
100072d0:	883e7526 	beq	r17,zero,10006ca8 <__alt_data_end+0xf8006ca8>
100072d4:	90000426 	beq	r18,zero,100072e8 <_dtoa_r+0xcf8>
100072d8:	94400326 	beq	r18,r17,100072e8 <_dtoa_r+0xcf8>
100072dc:	8009883a 	mov	r4,r16
100072e0:	900b883a 	mov	r5,r18
100072e4:	0009cd40 	call	10009cd4 <_Bfree>
100072e8:	8009883a 	mov	r4,r16
100072ec:	880b883a 	mov	r5,r17
100072f0:	0009cd40 	call	10009cd4 <_Bfree>
100072f4:	003e6c06 	br	10006ca8 <__alt_data_end+0xf8006ca8>
100072f8:	00800704 	movi	r2,28
100072fc:	d9800817 	ldw	r6,32(sp)
10007300:	a0a9883a 	add	r20,r20,r2
10007304:	b0ad883a 	add	r22,r22,r2
10007308:	308d883a 	add	r6,r6,r2
1000730c:	d9800815 	stw	r6,32(sp)
10007310:	003fa506 	br	100071a8 <__alt_data_end+0xf80071a8>
10007314:	013efb84 	movi	r4,-1042
10007318:	246bc83a 	sub	r21,r4,r17
1000731c:	9548983a 	sll	r4,r18,r21
10007320:	003d1806 	br	10006784 <__alt_data_end+0xf8006784>
10007324:	d8000c15 	stw	zero,48(sp)
10007328:	003d5b06 	br	10006898 <__alt_data_end+0xf8006898>
1000732c:	880b883a 	mov	r5,r17
10007330:	8009883a 	mov	r4,r16
10007334:	01800284 	movi	r6,10
10007338:	000f883a 	mov	r7,zero
1000733c:	0009cfc0 	call	10009cfc <__multadd>
10007340:	1023883a 	mov	r17,r2
10007344:	d8800d17 	ldw	r2,52(sp)
10007348:	0082550e 	bge	zero,r2,10007ca0 <_dtoa_r+0x16b0>
1000734c:	d8800615 	stw	r2,24(sp)
10007350:	0500050e 	bge	zero,r20,10007368 <_dtoa_r+0xd78>
10007354:	880b883a 	mov	r5,r17
10007358:	8009883a 	mov	r4,r16
1000735c:	a00d883a 	mov	r6,r20
10007360:	000a4600 	call	1000a460 <__lshift>
10007364:	1023883a 	mov	r17,r2
10007368:	98016a1e 	bne	r19,zero,10007914 <_dtoa_r+0x1324>
1000736c:	8829883a 	mov	r20,r17
10007370:	d9000617 	ldw	r4,24(sp)
10007374:	dcc00717 	ldw	r19,28(sp)
10007378:	9480004c 	andi	r18,r18,1
1000737c:	20bfffc4 	addi	r2,r4,-1
10007380:	9885883a 	add	r2,r19,r2
10007384:	d8800415 	stw	r2,16(sp)
10007388:	dc800615 	stw	r18,24(sp)
1000738c:	e009883a 	mov	r4,fp
10007390:	a80b883a 	mov	r5,r21
10007394:	00063c80 	call	100063c8 <quorem>
10007398:	e009883a 	mov	r4,fp
1000739c:	880b883a 	mov	r5,r17
100073a0:	102f883a 	mov	r23,r2
100073a4:	000a5a80 	call	1000a5a8 <__mcmp>
100073a8:	8009883a 	mov	r4,r16
100073ac:	a80b883a 	mov	r5,r21
100073b0:	a00d883a 	mov	r6,r20
100073b4:	102d883a 	mov	r22,r2
100073b8:	000a6080 	call	1000a608 <__mdiff>
100073bc:	1007883a 	mov	r3,r2
100073c0:	10800317 	ldw	r2,12(r2)
100073c4:	bc800c04 	addi	r18,r23,48
100073c8:	1000971e 	bne	r2,zero,10007628 <_dtoa_r+0x1038>
100073cc:	180b883a 	mov	r5,r3
100073d0:	e009883a 	mov	r4,fp
100073d4:	d8c01515 	stw	r3,84(sp)
100073d8:	000a5a80 	call	1000a5a8 <__mcmp>
100073dc:	d8c01517 	ldw	r3,84(sp)
100073e0:	8009883a 	mov	r4,r16
100073e4:	d8801515 	stw	r2,84(sp)
100073e8:	180b883a 	mov	r5,r3
100073ec:	0009cd40 	call	10009cd4 <_Bfree>
100073f0:	d8801517 	ldw	r2,84(sp)
100073f4:	1000041e 	bne	r2,zero,10007408 <_dtoa_r+0xe18>
100073f8:	d9800317 	ldw	r6,12(sp)
100073fc:	3000021e 	bne	r6,zero,10007408 <_dtoa_r+0xe18>
10007400:	d8c00617 	ldw	r3,24(sp)
10007404:	18007626 	beq	r3,zero,100075e0 <_dtoa_r+0xff0>
10007408:	b0005b16 	blt	r22,zero,10007578 <_dtoa_r+0xf88>
1000740c:	b000041e 	bne	r22,zero,10007420 <_dtoa_r+0xe30>
10007410:	d9000317 	ldw	r4,12(sp)
10007414:	2000021e 	bne	r4,zero,10007420 <_dtoa_r+0xe30>
10007418:	d8c00617 	ldw	r3,24(sp)
1000741c:	18005626 	beq	r3,zero,10007578 <_dtoa_r+0xf88>
10007420:	00814d16 	blt	zero,r2,10007958 <_dtoa_r+0x1368>
10007424:	d8c00417 	ldw	r3,16(sp)
10007428:	9d800044 	addi	r22,r19,1
1000742c:	9c800005 	stb	r18,0(r19)
10007430:	b02f883a 	mov	r23,r22
10007434:	98c14c26 	beq	r19,r3,10007968 <_dtoa_r+0x1378>
10007438:	e00b883a 	mov	r5,fp
1000743c:	8009883a 	mov	r4,r16
10007440:	01800284 	movi	r6,10
10007444:	000f883a 	mov	r7,zero
10007448:	0009cfc0 	call	10009cfc <__multadd>
1000744c:	1039883a 	mov	fp,r2
10007450:	8d006d26 	beq	r17,r20,10007608 <_dtoa_r+0x1018>
10007454:	880b883a 	mov	r5,r17
10007458:	01800284 	movi	r6,10
1000745c:	000f883a 	mov	r7,zero
10007460:	8009883a 	mov	r4,r16
10007464:	0009cfc0 	call	10009cfc <__multadd>
10007468:	a00b883a 	mov	r5,r20
1000746c:	8009883a 	mov	r4,r16
10007470:	01800284 	movi	r6,10
10007474:	000f883a 	mov	r7,zero
10007478:	1023883a 	mov	r17,r2
1000747c:	0009cfc0 	call	10009cfc <__multadd>
10007480:	1029883a 	mov	r20,r2
10007484:	b027883a 	mov	r19,r22
10007488:	003fc006 	br	1000738c <__alt_data_end+0xf800738c>
1000748c:	a005883a 	mov	r2,r20
10007490:	003ede06 	br	1000700c <__alt_data_end+0xf800700c>
10007494:	01000044 	movi	r4,1
10007498:	d9000b15 	stw	r4,44(sp)
1000749c:	d9802217 	ldw	r6,136(sp)
100074a0:	0180dc0e 	bge	zero,r6,10007814 <_dtoa_r+0x1224>
100074a4:	3023883a 	mov	r17,r6
100074a8:	d9800d15 	stw	r6,52(sp)
100074ac:	d9800615 	stw	r6,24(sp)
100074b0:	003d1e06 	br	1000692c <__alt_data_end+0xf800692c>
100074b4:	d8800617 	ldw	r2,24(sp)
100074b8:	00be3716 	blt	zero,r2,10006d98 <__alt_data_end+0xf8006d98>
100074bc:	1000be1e 	bne	r2,zero,100077b8 <_dtoa_r+0x11c8>
100074c0:	8809883a 	mov	r4,r17
100074c4:	a00b883a 	mov	r5,r20
100074c8:	000d883a 	mov	r6,zero
100074cc:	01d00534 	movhi	r7,16404
100074d0:	000e0340 	call	1000e034 <__muldf3>
100074d4:	1009883a 	mov	r4,r2
100074d8:	180b883a 	mov	r5,r3
100074dc:	900d883a 	mov	r6,r18
100074e0:	980f883a 	mov	r7,r19
100074e4:	000de740 	call	1000de74 <__gedf2>
100074e8:	002b883a 	mov	r21,zero
100074ec:	0023883a 	mov	r17,zero
100074f0:	10007a16 	blt	r2,zero,100076dc <_dtoa_r+0x10ec>
100074f4:	d9002217 	ldw	r4,136(sp)
100074f8:	ddc00717 	ldw	r23,28(sp)
100074fc:	0108303a 	nor	r4,zero,r4
10007500:	d9000515 	stw	r4,20(sp)
10007504:	8009883a 	mov	r4,r16
10007508:	a80b883a 	mov	r5,r21
1000750c:	0009cd40 	call	10009cd4 <_Bfree>
10007510:	883f751e 	bne	r17,zero,100072e8 <__alt_data_end+0xf80072e8>
10007514:	003de406 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10007518:	e00b883a 	mov	r5,fp
1000751c:	8009883a 	mov	r4,r16
10007520:	000a3200 	call	1000a320 <__pow5mult>
10007524:	1039883a 	mov	fp,r2
10007528:	003ed306 	br	10007078 <__alt_data_end+0xf8007078>
1000752c:	903ee01e 	bne	r18,zero,100070b0 <__alt_data_end+0xf80070b0>
10007530:	00800434 	movhi	r2,16
10007534:	10bfffc4 	addi	r2,r2,-1
10007538:	9884703a 	and	r2,r19,r2
1000753c:	103f081e 	bne	r2,zero,10007160 <__alt_data_end+0xf8007160>
10007540:	9cdffc2c 	andhi	r19,r19,32752
10007544:	983f0626 	beq	r19,zero,10007160 <__alt_data_end+0xf8007160>
10007548:	d8800817 	ldw	r2,32(sp)
1000754c:	b5800044 	addi	r22,r22,1
10007550:	04c00044 	movi	r19,1
10007554:	10800044 	addi	r2,r2,1
10007558:	d8800815 	stw	r2,32(sp)
1000755c:	003f0106 	br	10007164 <__alt_data_end+0xf8007164>
10007560:	d9800f17 	ldw	r6,60(sp)
10007564:	30016826 	beq	r6,zero,10007b08 <_dtoa_r+0x1518>
10007568:	10810cc4 	addi	r2,r2,1075
1000756c:	dd400917 	ldw	r21,36(sp)
10007570:	dd000817 	ldw	r20,32(sp)
10007574:	003e9906 	br	10006fdc <__alt_data_end+0xf8006fdc>
10007578:	9011883a 	mov	r8,r18
1000757c:	4007883a 	mov	r3,r8
10007580:	e02d883a 	mov	r22,fp
10007584:	0080100e 	bge	zero,r2,100075c8 <_dtoa_r+0xfd8>
10007588:	01800044 	movi	r6,1
1000758c:	8009883a 	mov	r4,r16
10007590:	e00b883a 	mov	r5,fp
10007594:	da001515 	stw	r8,84(sp)
10007598:	da001715 	stw	r8,92(sp)
1000759c:	000a4600 	call	1000a460 <__lshift>
100075a0:	1009883a 	mov	r4,r2
100075a4:	a80b883a 	mov	r5,r21
100075a8:	102d883a 	mov	r22,r2
100075ac:	000a5a80 	call	1000a5a8 <__mcmp>
100075b0:	d8c01517 	ldw	r3,84(sp)
100075b4:	da001717 	ldw	r8,92(sp)
100075b8:	0081a50e 	bge	zero,r2,10007c50 <_dtoa_r+0x1660>
100075bc:	00800e44 	movi	r2,57
100075c0:	40817b26 	beq	r8,r2,10007bb0 <_dtoa_r+0x15c0>
100075c4:	40c00044 	addi	r3,r8,1
100075c8:	8825883a 	mov	r18,r17
100075cc:	9dc00044 	addi	r23,r19,1
100075d0:	98c00005 	stb	r3,0(r19)
100075d4:	a023883a 	mov	r17,r20
100075d8:	b039883a 	mov	fp,r22
100075dc:	003f3906 	br	100072c4 <__alt_data_end+0xf80072c4>
100075e0:	00800e44 	movi	r2,57
100075e4:	9011883a 	mov	r8,r18
100075e8:	90817226 	beq	r18,r2,10007bb4 <_dtoa_r+0x15c4>
100075ec:	0580010e 	bge	zero,r22,100075f4 <_dtoa_r+0x1004>
100075f0:	ba000c44 	addi	r8,r23,49
100075f4:	8825883a 	mov	r18,r17
100075f8:	9dc00044 	addi	r23,r19,1
100075fc:	9a000005 	stb	r8,0(r19)
10007600:	a023883a 	mov	r17,r20
10007604:	003f2f06 	br	100072c4 <__alt_data_end+0xf80072c4>
10007608:	880b883a 	mov	r5,r17
1000760c:	8009883a 	mov	r4,r16
10007610:	01800284 	movi	r6,10
10007614:	000f883a 	mov	r7,zero
10007618:	0009cfc0 	call	10009cfc <__multadd>
1000761c:	1023883a 	mov	r17,r2
10007620:	1029883a 	mov	r20,r2
10007624:	003f9706 	br	10007484 <__alt_data_end+0xf8007484>
10007628:	8009883a 	mov	r4,r16
1000762c:	180b883a 	mov	r5,r3
10007630:	0009cd40 	call	10009cd4 <_Bfree>
10007634:	00800044 	movi	r2,1
10007638:	003f7306 	br	10007408 <__alt_data_end+0xf8007408>
1000763c:	e009883a 	mov	r4,fp
10007640:	a80b883a 	mov	r5,r21
10007644:	000a5a80 	call	1000a5a8 <__mcmp>
10007648:	103ee60e 	bge	r2,zero,100071e4 <__alt_data_end+0xf80071e4>
1000764c:	8009883a 	mov	r4,r16
10007650:	e00b883a 	mov	r5,fp
10007654:	01800284 	movi	r6,10
10007658:	000f883a 	mov	r7,zero
1000765c:	0009cfc0 	call	10009cfc <__multadd>
10007660:	d9000517 	ldw	r4,20(sp)
10007664:	d9800b17 	ldw	r6,44(sp)
10007668:	1039883a 	mov	fp,r2
1000766c:	213fffc4 	addi	r4,r4,-1
10007670:	d9000515 	stw	r4,20(sp)
10007674:	303f2d1e 	bne	r6,zero,1000732c <__alt_data_end+0xf800732c>
10007678:	d9000d17 	ldw	r4,52(sp)
1000767c:	0101780e 	bge	zero,r4,10007c60 <_dtoa_r+0x1670>
10007680:	d9000615 	stw	r4,24(sp)
10007684:	003edb06 	br	100071f4 <__alt_data_end+0xf80071f4>
10007688:	00800084 	movi	r2,2
1000768c:	30818e1e 	bne	r6,r2,10007cc8 <_dtoa_r+0x16d8>
10007690:	d8000b15 	stw	zero,44(sp)
10007694:	003f8106 	br	1000749c <__alt_data_end+0xf800749c>
10007698:	d8800717 	ldw	r2,28(sp)
1000769c:	003c0306 	br	100066ac <__alt_data_end+0xf80066ac>
100076a0:	d9000317 	ldw	r4,12(sp)
100076a4:	00800084 	movi	r2,2
100076a8:	113ed00e 	bge	r2,r4,100071ec <__alt_data_end+0xf80071ec>
100076ac:	d8c00617 	ldw	r3,24(sp)
100076b0:	183f901e 	bne	r3,zero,100074f4 <__alt_data_end+0xf80074f4>
100076b4:	a80b883a 	mov	r5,r21
100076b8:	8009883a 	mov	r4,r16
100076bc:	01800144 	movi	r6,5
100076c0:	000f883a 	mov	r7,zero
100076c4:	0009cfc0 	call	10009cfc <__multadd>
100076c8:	e009883a 	mov	r4,fp
100076cc:	100b883a 	mov	r5,r2
100076d0:	102b883a 	mov	r21,r2
100076d4:	000a5a80 	call	1000a5a8 <__mcmp>
100076d8:	00bf860e 	bge	zero,r2,100074f4 <__alt_data_end+0xf80074f4>
100076dc:	d9800717 	ldw	r6,28(sp)
100076e0:	00800c44 	movi	r2,49
100076e4:	30800005 	stb	r2,0(r6)
100076e8:	d8800517 	ldw	r2,20(sp)
100076ec:	35c00044 	addi	r23,r6,1
100076f0:	10800044 	addi	r2,r2,1
100076f4:	d8800515 	stw	r2,20(sp)
100076f8:	003f8206 	br	10007504 <__alt_data_end+0xf8007504>
100076fc:	903e981e 	bne	r18,zero,10007160 <__alt_data_end+0xf8007160>
10007700:	003f8b06 	br	10007530 <__alt_data_end+0xf8007530>
10007704:	d9800517 	ldw	r6,20(sp)
10007708:	d8c00717 	ldw	r3,28(sp)
1000770c:	00800c44 	movi	r2,49
10007710:	31800044 	addi	r6,r6,1
10007714:	d9800515 	stw	r6,20(sp)
10007718:	18800005 	stb	r2,0(r3)
1000771c:	003ee906 	br	100072c4 <__alt_data_end+0xf80072c4>
10007720:	dc000317 	ldw	r16,12(sp)
10007724:	003d6006 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10007728:	8809883a 	mov	r4,r17
1000772c:	0003dfc0 	call	10003dfc <__floatsidf>
10007730:	a009883a 	mov	r4,r20
10007734:	a80b883a 	mov	r5,r21
10007738:	100d883a 	mov	r6,r2
1000773c:	180f883a 	mov	r7,r3
10007740:	000e0340 	call	1000e034 <__muldf3>
10007744:	1009883a 	mov	r4,r2
10007748:	180b883a 	mov	r5,r3
1000774c:	000d883a 	mov	r6,zero
10007750:	01d00734 	movhi	r7,16412
10007754:	0002c080 	call	10002c08 <__adddf3>
10007758:	1023883a 	mov	r17,r2
1000775c:	00bf3034 	movhi	r2,64704
10007760:	1885883a 	add	r2,r3,r2
10007764:	d8800e15 	stw	r2,56(sp)
10007768:	a009883a 	mov	r4,r20
1000776c:	a80b883a 	mov	r5,r21
10007770:	000d883a 	mov	r6,zero
10007774:	01d00534 	movhi	r7,16404
10007778:	00034a40 	call	100034a4 <__subdf3>
1000777c:	d9c00e17 	ldw	r7,56(sp)
10007780:	1009883a 	mov	r4,r2
10007784:	180b883a 	mov	r5,r3
10007788:	880d883a 	mov	r6,r17
1000778c:	102b883a 	mov	r21,r2
10007790:	1829883a 	mov	r20,r3
10007794:	000de740 	call	1000de74 <__gedf2>
10007798:	00807716 	blt	zero,r2,10007978 <_dtoa_r+0x1388>
1000779c:	d8800e17 	ldw	r2,56(sp)
100077a0:	a809883a 	mov	r4,r21
100077a4:	a00b883a 	mov	r5,r20
100077a8:	11e0003c 	xorhi	r7,r2,32768
100077ac:	880d883a 	mov	r6,r17
100077b0:	000df540 	call	1000df54 <__ledf2>
100077b4:	103d6b0e 	bge	r2,zero,10006d64 <__alt_data_end+0xf8006d64>
100077b8:	002b883a 	mov	r21,zero
100077bc:	0023883a 	mov	r17,zero
100077c0:	003f4c06 	br	100074f4 <__alt_data_end+0xf80074f4>
100077c4:	d9800917 	ldw	r6,36(sp)
100077c8:	e00b883a 	mov	r5,fp
100077cc:	8009883a 	mov	r4,r16
100077d0:	000a3200 	call	1000a320 <__pow5mult>
100077d4:	1039883a 	mov	fp,r2
100077d8:	003e2706 	br	10007078 <__alt_data_end+0xf8007078>
100077dc:	d8000b15 	stw	zero,44(sp)
100077e0:	003c4906 	br	10006908 <__alt_data_end+0xf8006908>
100077e4:	d9000917 	ldw	r4,36(sp)
100077e8:	d9800a17 	ldw	r6,40(sp)
100077ec:	dd400915 	stw	r21,36(sp)
100077f0:	a905c83a 	sub	r2,r21,r4
100077f4:	308d883a 	add	r6,r6,r2
100077f8:	d9800a15 	stw	r6,40(sp)
100077fc:	002b883a 	mov	r21,zero
10007800:	003df206 	br	10006fcc <__alt_data_end+0xf8006fcc>
10007804:	dc800e15 	stw	r18,56(sp)
10007808:	982b883a 	mov	r21,r19
1000780c:	04400084 	movi	r17,2
10007810:	003c7406 	br	100069e4 <__alt_data_end+0xf80069e4>
10007814:	04400044 	movi	r17,1
10007818:	dc400d15 	stw	r17,52(sp)
1000781c:	dc400615 	stw	r17,24(sp)
10007820:	dc402215 	stw	r17,136(sp)
10007824:	80001115 	stw	zero,68(r16)
10007828:	000b883a 	mov	r5,zero
1000782c:	003c4a06 	br	10006958 <__alt_data_end+0xf8006958>
10007830:	3023883a 	mov	r17,r6
10007834:	003ffb06 	br	10007824 <__alt_data_end+0xf8007824>
10007838:	1000021e 	bne	r2,zero,10007844 <_dtoa_r+0x1254>
1000783c:	4200004c 	andi	r8,r8,1
10007840:	403e8f1e 	bne	r8,zero,10007280 <__alt_data_end+0xf8007280>
10007844:	01000c04 	movi	r4,48
10007848:	00000106 	br	10007850 <_dtoa_r+0x1260>
1000784c:	102f883a 	mov	r23,r2
10007850:	b8bfffc4 	addi	r2,r23,-1
10007854:	10c00007 	ldb	r3,0(r2)
10007858:	193ffc26 	beq	r3,r4,1000784c <__alt_data_end+0xf800784c>
1000785c:	003e9906 	br	100072c4 <__alt_data_end+0xf80072c4>
10007860:	d9000517 	ldw	r4,20(sp)
10007864:	012fc83a 	sub	r23,zero,r4
10007868:	b800ad26 	beq	r23,zero,10007b20 <_dtoa_r+0x1530>
1000786c:	b88003cc 	andi	r2,r23,15
10007870:	100490fa 	slli	r2,r2,3
10007874:	00c40074 	movhi	r3,4097
10007878:	18c4de04 	addi	r3,r3,4984
1000787c:	1885883a 	add	r2,r3,r2
10007880:	11800017 	ldw	r6,0(r2)
10007884:	11c00117 	ldw	r7,4(r2)
10007888:	b82fd13a 	srai	r23,r23,4
1000788c:	9009883a 	mov	r4,r18
10007890:	980b883a 	mov	r5,r19
10007894:	000e0340 	call	1000e034 <__muldf3>
10007898:	1029883a 	mov	r20,r2
1000789c:	182b883a 	mov	r21,r3
100078a0:	b800f426 	beq	r23,zero,10007c74 <_dtoa_r+0x1684>
100078a4:	02040074 	movhi	r8,4097
100078a8:	4204d404 	addi	r8,r8,4944
100078ac:	8029883a 	mov	r20,r16
100078b0:	04400084 	movi	r17,2
100078b4:	4021883a 	mov	r16,r8
100078b8:	b980004c 	andi	r6,r23,1
100078bc:	1009883a 	mov	r4,r2
100078c0:	b82fd07a 	srai	r23,r23,1
100078c4:	180b883a 	mov	r5,r3
100078c8:	30000426 	beq	r6,zero,100078dc <_dtoa_r+0x12ec>
100078cc:	81800017 	ldw	r6,0(r16)
100078d0:	81c00117 	ldw	r7,4(r16)
100078d4:	8c400044 	addi	r17,r17,1
100078d8:	000e0340 	call	1000e034 <__muldf3>
100078dc:	84000204 	addi	r16,r16,8
100078e0:	b83ff51e 	bne	r23,zero,100078b8 <__alt_data_end+0xf80078b8>
100078e4:	a021883a 	mov	r16,r20
100078e8:	182b883a 	mov	r21,r3
100078ec:	1029883a 	mov	r20,r2
100078f0:	003c5506 	br	10006a48 <__alt_data_end+0xf8006a48>
100078f4:	d9800517 	ldw	r6,20(sp)
100078f8:	d9000717 	ldw	r4,28(sp)
100078fc:	00c00c04 	movi	r3,48
10007900:	31800044 	addi	r6,r6,1
10007904:	d9800515 	stw	r6,20(sp)
10007908:	20c00005 	stb	r3,0(r4)
1000790c:	02000c44 	movi	r8,49
10007910:	003da206 	br	10006f9c <__alt_data_end+0xf8006f9c>
10007914:	89400117 	ldw	r5,4(r17)
10007918:	8009883a 	mov	r4,r16
1000791c:	0009c2c0 	call	10009c2c <_Balloc>
10007920:	89800417 	ldw	r6,16(r17)
10007924:	11000304 	addi	r4,r2,12
10007928:	89400304 	addi	r5,r17,12
1000792c:	31800084 	addi	r6,r6,2
10007930:	318d883a 	add	r6,r6,r6
10007934:	318d883a 	add	r6,r6,r6
10007938:	1027883a 	mov	r19,r2
1000793c:	00098740 	call	10009874 <memcpy>
10007940:	8009883a 	mov	r4,r16
10007944:	980b883a 	mov	r5,r19
10007948:	01800044 	movi	r6,1
1000794c:	000a4600 	call	1000a460 <__lshift>
10007950:	1029883a 	mov	r20,r2
10007954:	003e8606 	br	10007370 <__alt_data_end+0xf8007370>
10007958:	00800e44 	movi	r2,57
1000795c:	90809526 	beq	r18,r2,10007bb4 <_dtoa_r+0x15c4>
10007960:	92000044 	addi	r8,r18,1
10007964:	003f2306 	br	100075f4 <__alt_data_end+0xf80075f4>
10007968:	9011883a 	mov	r8,r18
1000796c:	8825883a 	mov	r18,r17
10007970:	a023883a 	mov	r17,r20
10007974:	003e3706 	br	10007254 <__alt_data_end+0xf8007254>
10007978:	002b883a 	mov	r21,zero
1000797c:	0023883a 	mov	r17,zero
10007980:	003f5606 	br	100076dc <__alt_data_end+0xf80076dc>
10007984:	51bfffc4 	addi	r6,r10,-1
10007988:	300490fa 	slli	r2,r6,3
1000798c:	00c40074 	movhi	r3,4097
10007990:	18c4de04 	addi	r3,r3,4984
10007994:	1885883a 	add	r2,r3,r2
10007998:	d9c00e17 	ldw	r7,56(sp)
1000799c:	11000017 	ldw	r4,0(r2)
100079a0:	11400117 	ldw	r5,4(r2)
100079a4:	d8800717 	ldw	r2,28(sp)
100079a8:	d9801015 	stw	r6,64(sp)
100079ac:	880d883a 	mov	r6,r17
100079b0:	da801615 	stw	r10,88(sp)
100079b4:	15c00044 	addi	r23,r2,1
100079b8:	000e0340 	call	1000e034 <__muldf3>
100079bc:	a80b883a 	mov	r5,r21
100079c0:	a009883a 	mov	r4,r20
100079c4:	d8c01115 	stw	r3,68(sp)
100079c8:	d8800e15 	stw	r2,56(sp)
100079cc:	0003d740 	call	10003d74 <__fixdfsi>
100079d0:	1009883a 	mov	r4,r2
100079d4:	1023883a 	mov	r17,r2
100079d8:	0003dfc0 	call	10003dfc <__floatsidf>
100079dc:	a009883a 	mov	r4,r20
100079e0:	a80b883a 	mov	r5,r21
100079e4:	100d883a 	mov	r6,r2
100079e8:	180f883a 	mov	r7,r3
100079ec:	00034a40 	call	100034a4 <__subdf3>
100079f0:	1813883a 	mov	r9,r3
100079f4:	d8c00717 	ldw	r3,28(sp)
100079f8:	8c400c04 	addi	r17,r17,48
100079fc:	1011883a 	mov	r8,r2
10007a00:	1c400005 	stb	r17,0(r3)
10007a04:	da801617 	ldw	r10,88(sp)
10007a08:	00800044 	movi	r2,1
10007a0c:	50802326 	beq	r10,r2,10007a9c <_dtoa_r+0x14ac>
10007a10:	d8800717 	ldw	r2,28(sp)
10007a14:	b82b883a 	mov	r21,r23
10007a18:	dc001315 	stw	r16,76(sp)
10007a1c:	12a9883a 	add	r20,r2,r10
10007a20:	4807883a 	mov	r3,r9
10007a24:	4005883a 	mov	r2,r8
10007a28:	dc801415 	stw	r18,80(sp)
10007a2c:	000d883a 	mov	r6,zero
10007a30:	01d00934 	movhi	r7,16420
10007a34:	1009883a 	mov	r4,r2
10007a38:	180b883a 	mov	r5,r3
10007a3c:	000e0340 	call	1000e034 <__muldf3>
10007a40:	180b883a 	mov	r5,r3
10007a44:	1009883a 	mov	r4,r2
10007a48:	1821883a 	mov	r16,r3
10007a4c:	1025883a 	mov	r18,r2
10007a50:	0003d740 	call	10003d74 <__fixdfsi>
10007a54:	1009883a 	mov	r4,r2
10007a58:	1023883a 	mov	r17,r2
10007a5c:	0003dfc0 	call	10003dfc <__floatsidf>
10007a60:	9009883a 	mov	r4,r18
10007a64:	800b883a 	mov	r5,r16
10007a68:	100d883a 	mov	r6,r2
10007a6c:	180f883a 	mov	r7,r3
10007a70:	8c400c04 	addi	r17,r17,48
10007a74:	00034a40 	call	100034a4 <__subdf3>
10007a78:	ad400044 	addi	r21,r21,1
10007a7c:	ac7fffc5 	stb	r17,-1(r21)
10007a80:	ad3fea1e 	bne	r21,r20,10007a2c <__alt_data_end+0xf8007a2c>
10007a84:	1813883a 	mov	r9,r3
10007a88:	d8c01017 	ldw	r3,64(sp)
10007a8c:	dc001317 	ldw	r16,76(sp)
10007a90:	dc801417 	ldw	r18,80(sp)
10007a94:	1011883a 	mov	r8,r2
10007a98:	b8ef883a 	add	r23,r23,r3
10007a9c:	d9000e17 	ldw	r4,56(sp)
10007aa0:	d9401117 	ldw	r5,68(sp)
10007aa4:	000d883a 	mov	r6,zero
10007aa8:	01cff834 	movhi	r7,16352
10007aac:	da001715 	stw	r8,92(sp)
10007ab0:	da401515 	stw	r9,84(sp)
10007ab4:	0002c080 	call	10002c08 <__adddf3>
10007ab8:	da001717 	ldw	r8,92(sp)
10007abc:	da401517 	ldw	r9,84(sp)
10007ac0:	1009883a 	mov	r4,r2
10007ac4:	400d883a 	mov	r6,r8
10007ac8:	480f883a 	mov	r7,r9
10007acc:	180b883a 	mov	r5,r3
10007ad0:	000df540 	call	1000df54 <__ledf2>
10007ad4:	da001717 	ldw	r8,92(sp)
10007ad8:	da401517 	ldw	r9,84(sp)
10007adc:	10003b0e 	bge	r2,zero,10007bcc <_dtoa_r+0x15dc>
10007ae0:	d9001217 	ldw	r4,72(sp)
10007ae4:	bd7fffc3 	ldbu	r21,-1(r23)
10007ae8:	d9000515 	stw	r4,20(sp)
10007aec:	003d1c06 	br	10006f60 <__alt_data_end+0xf8006f60>
10007af0:	d8c00817 	ldw	r3,32(sp)
10007af4:	18a9c83a 	sub	r20,r3,r2
10007af8:	0005883a 	mov	r2,zero
10007afc:	003d3706 	br	10006fdc <__alt_data_end+0xf8006fdc>
10007b00:	00800044 	movi	r2,1
10007b04:	003dd006 	br	10007248 <__alt_data_end+0xf8007248>
10007b08:	d8c00217 	ldw	r3,8(sp)
10007b0c:	00800d84 	movi	r2,54
10007b10:	dd400917 	ldw	r21,36(sp)
10007b14:	10c5c83a 	sub	r2,r2,r3
10007b18:	dd000817 	ldw	r20,32(sp)
10007b1c:	003d2f06 	br	10006fdc <__alt_data_end+0xf8006fdc>
10007b20:	9029883a 	mov	r20,r18
10007b24:	982b883a 	mov	r21,r19
10007b28:	04400084 	movi	r17,2
10007b2c:	003bc606 	br	10006a48 <__alt_data_end+0xf8006a48>
10007b30:	d8800617 	ldw	r2,24(sp)
10007b34:	103efc26 	beq	r2,zero,10007728 <__alt_data_end+0xf8007728>
10007b38:	d8c00d17 	ldw	r3,52(sp)
10007b3c:	00fc890e 	bge	zero,r3,10006d64 <__alt_data_end+0xf8006d64>
10007b40:	a80b883a 	mov	r5,r21
10007b44:	a009883a 	mov	r4,r20
10007b48:	000d883a 	mov	r6,zero
10007b4c:	01d00934 	movhi	r7,16420
10007b50:	000e0340 	call	1000e034 <__muldf3>
10007b54:	89000044 	addi	r4,r17,1
10007b58:	1029883a 	mov	r20,r2
10007b5c:	182b883a 	mov	r21,r3
10007b60:	0003dfc0 	call	10003dfc <__floatsidf>
10007b64:	a009883a 	mov	r4,r20
10007b68:	a80b883a 	mov	r5,r21
10007b6c:	100d883a 	mov	r6,r2
10007b70:	180f883a 	mov	r7,r3
10007b74:	000e0340 	call	1000e034 <__muldf3>
10007b78:	1009883a 	mov	r4,r2
10007b7c:	180b883a 	mov	r5,r3
10007b80:	000d883a 	mov	r6,zero
10007b84:	01d00734 	movhi	r7,16412
10007b88:	0002c080 	call	10002c08 <__adddf3>
10007b8c:	d9000517 	ldw	r4,20(sp)
10007b90:	1023883a 	mov	r17,r2
10007b94:	00bf3034 	movhi	r2,64704
10007b98:	213fffc4 	addi	r4,r4,-1
10007b9c:	1885883a 	add	r2,r3,r2
10007ba0:	d9001215 	stw	r4,72(sp)
10007ba4:	d8800e15 	stw	r2,56(sp)
10007ba8:	da800d17 	ldw	r10,52(sp)
10007bac:	003bc306 	br	10006abc <__alt_data_end+0xf8006abc>
10007bb0:	b039883a 	mov	fp,r22
10007bb4:	01000e44 	movi	r4,57
10007bb8:	8825883a 	mov	r18,r17
10007bbc:	9dc00044 	addi	r23,r19,1
10007bc0:	99000005 	stb	r4,0(r19)
10007bc4:	a023883a 	mov	r17,r20
10007bc8:	003dae06 	br	10007284 <__alt_data_end+0xf8007284>
10007bcc:	d9800e17 	ldw	r6,56(sp)
10007bd0:	d9c01117 	ldw	r7,68(sp)
10007bd4:	0009883a 	mov	r4,zero
10007bd8:	014ff834 	movhi	r5,16352
10007bdc:	da001715 	stw	r8,92(sp)
10007be0:	da401515 	stw	r9,84(sp)
10007be4:	00034a40 	call	100034a4 <__subdf3>
10007be8:	da001717 	ldw	r8,92(sp)
10007bec:	da401517 	ldw	r9,84(sp)
10007bf0:	1009883a 	mov	r4,r2
10007bf4:	180b883a 	mov	r5,r3
10007bf8:	400d883a 	mov	r6,r8
10007bfc:	480f883a 	mov	r7,r9
10007c00:	000de740 	call	1000de74 <__gedf2>
10007c04:	00bc570e 	bge	zero,r2,10006d64 <__alt_data_end+0xf8006d64>
10007c08:	01000c04 	movi	r4,48
10007c0c:	00000106 	br	10007c14 <_dtoa_r+0x1624>
10007c10:	102f883a 	mov	r23,r2
10007c14:	b8bfffc4 	addi	r2,r23,-1
10007c18:	10c00007 	ldb	r3,0(r2)
10007c1c:	193ffc26 	beq	r3,r4,10007c10 <__alt_data_end+0xf8007c10>
10007c20:	d9801217 	ldw	r6,72(sp)
10007c24:	d9800515 	stw	r6,20(sp)
10007c28:	003c1f06 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10007c2c:	d8801217 	ldw	r2,72(sp)
10007c30:	dc001117 	ldw	r16,68(sp)
10007c34:	d8800515 	stw	r2,20(sp)
10007c38:	003cc906 	br	10006f60 <__alt_data_end+0xf8006f60>
10007c3c:	dd801317 	ldw	r22,76(sp)
10007c40:	dc001117 	ldw	r16,68(sp)
10007c44:	dcc01417 	ldw	r19,80(sp)
10007c48:	dc801017 	ldw	r18,64(sp)
10007c4c:	003c4506 	br	10006d64 <__alt_data_end+0xf8006d64>
10007c50:	103e5d1e 	bne	r2,zero,100075c8 <__alt_data_end+0xf80075c8>
10007c54:	4080004c 	andi	r2,r8,1
10007c58:	103e5b26 	beq	r2,zero,100075c8 <__alt_data_end+0xf80075c8>
10007c5c:	003e5706 	br	100075bc <__alt_data_end+0xf80075bc>
10007c60:	d8c00317 	ldw	r3,12(sp)
10007c64:	00800084 	movi	r2,2
10007c68:	10c00a16 	blt	r2,r3,10007c94 <_dtoa_r+0x16a4>
10007c6c:	d9000d17 	ldw	r4,52(sp)
10007c70:	003e8306 	br	10007680 <__alt_data_end+0xf8007680>
10007c74:	04400084 	movi	r17,2
10007c78:	003b7306 	br	10006a48 <__alt_data_end+0xf8006a48>
10007c7c:	d9801217 	ldw	r6,72(sp)
10007c80:	d9800515 	stw	r6,20(sp)
10007c84:	003cb606 	br	10006f60 <__alt_data_end+0xf8006f60>
10007c88:	d9001217 	ldw	r4,72(sp)
10007c8c:	d9000515 	stw	r4,20(sp)
10007c90:	003c0506 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10007c94:	d9800d17 	ldw	r6,52(sp)
10007c98:	d9800615 	stw	r6,24(sp)
10007c9c:	003e8306 	br	100076ac <__alt_data_end+0xf80076ac>
10007ca0:	d9800317 	ldw	r6,12(sp)
10007ca4:	00800084 	movi	r2,2
10007ca8:	11800216 	blt	r2,r6,10007cb4 <_dtoa_r+0x16c4>
10007cac:	d8800d17 	ldw	r2,52(sp)
10007cb0:	003da606 	br	1000734c <__alt_data_end+0xf800734c>
10007cb4:	d8800d17 	ldw	r2,52(sp)
10007cb8:	d8800615 	stw	r2,24(sp)
10007cbc:	003e7b06 	br	100076ac <__alt_data_end+0xf80076ac>
10007cc0:	05000044 	movi	r20,1
10007cc4:	003b0506 	br	100068dc <__alt_data_end+0xf80068dc>
10007cc8:	8009883a 	mov	r4,r16
10007ccc:	80001115 	stw	zero,68(r16)
10007cd0:	000b883a 	mov	r5,zero
10007cd4:	0009c2c0 	call	10009c2c <_Balloc>
10007cd8:	d8800715 	stw	r2,28(sp)
10007cdc:	d8c00717 	ldw	r3,28(sp)
10007ce0:	00bfffc4 	movi	r2,-1
10007ce4:	01000044 	movi	r4,1
10007ce8:	d8800615 	stw	r2,24(sp)
10007cec:	80c01015 	stw	r3,64(r16)
10007cf0:	d9000b15 	stw	r4,44(sp)
10007cf4:	d8002215 	stw	zero,136(sp)
10007cf8:	d8800d15 	stw	r2,52(sp)
10007cfc:	003c1906 	br	10006d64 <__alt_data_end+0xf8006d64>
10007d00:	193d2926 	beq	r3,r4,100071a8 <__alt_data_end+0xf80071a8>
10007d04:	00c00f04 	movi	r3,60
10007d08:	1885c83a 	sub	r2,r3,r2
10007d0c:	003d7b06 	br	100072fc <__alt_data_end+0xf80072fc>
10007d10:	000b883a 	mov	r5,zero
10007d14:	003b1006 	br	10006958 <__alt_data_end+0xf8006958>

10007d18 <_fflush_r>:
10007d18:	defffb04 	addi	sp,sp,-20
10007d1c:	dcc00315 	stw	r19,12(sp)
10007d20:	dc000015 	stw	r16,0(sp)
10007d24:	dfc00415 	stw	ra,16(sp)
10007d28:	dc800215 	stw	r18,8(sp)
10007d2c:	dc400115 	stw	r17,4(sp)
10007d30:	2027883a 	mov	r19,r4
10007d34:	2821883a 	mov	r16,r5
10007d38:	20000226 	beq	r4,zero,10007d44 <_fflush_r+0x2c>
10007d3c:	20800e17 	ldw	r2,56(r4)
10007d40:	10005326 	beq	r2,zero,10007e90 <_fflush_r+0x178>
10007d44:	8080030b 	ldhu	r2,12(r16)
10007d48:	10ffffcc 	andi	r3,r2,65535
10007d4c:	18e0001c 	xori	r3,r3,32768
10007d50:	18e00004 	addi	r3,r3,-32768
10007d54:	18002c26 	beq	r3,zero,10007e08 <_fflush_r+0xf0>
10007d58:	10c0020c 	andi	r3,r2,8
10007d5c:	1800321e 	bne	r3,zero,10007e28 <_fflush_r+0x110>
10007d60:	80c00117 	ldw	r3,4(r16)
10007d64:	10820014 	ori	r2,r2,2048
10007d68:	8080030d 	sth	r2,12(r16)
10007d6c:	00c0570e 	bge	zero,r3,10007ecc <_fflush_r+0x1b4>
10007d70:	82000a17 	ldw	r8,40(r16)
10007d74:	40002426 	beq	r8,zero,10007e08 <_fflush_r+0xf0>
10007d78:	9c400017 	ldw	r17,0(r19)
10007d7c:	10c4000c 	andi	r3,r2,4096
10007d80:	98000015 	stw	zero,0(r19)
10007d84:	18004626 	beq	r3,zero,10007ea0 <_fflush_r+0x188>
10007d88:	81801417 	ldw	r6,80(r16)
10007d8c:	10c0010c 	andi	r3,r2,4
10007d90:	18000626 	beq	r3,zero,10007dac <_fflush_r+0x94>
10007d94:	80c00117 	ldw	r3,4(r16)
10007d98:	80800c17 	ldw	r2,48(r16)
10007d9c:	30cdc83a 	sub	r6,r6,r3
10007da0:	10000226 	beq	r2,zero,10007dac <_fflush_r+0x94>
10007da4:	80800f17 	ldw	r2,60(r16)
10007da8:	308dc83a 	sub	r6,r6,r2
10007dac:	81400717 	ldw	r5,28(r16)
10007db0:	9809883a 	mov	r4,r19
10007db4:	000f883a 	mov	r7,zero
10007db8:	403ee83a 	callr	r8
10007dbc:	00ffffc4 	movi	r3,-1
10007dc0:	10c04526 	beq	r2,r3,10007ed8 <_fflush_r+0x1c0>
10007dc4:	80c0030b 	ldhu	r3,12(r16)
10007dc8:	81000417 	ldw	r4,16(r16)
10007dcc:	80000115 	stw	zero,4(r16)
10007dd0:	197dffcc 	andi	r5,r3,63487
10007dd4:	8140030d 	sth	r5,12(r16)
10007dd8:	81000015 	stw	r4,0(r16)
10007ddc:	18c4000c 	andi	r3,r3,4096
10007de0:	18000126 	beq	r3,zero,10007de8 <_fflush_r+0xd0>
10007de4:	80801415 	stw	r2,80(r16)
10007de8:	81400c17 	ldw	r5,48(r16)
10007dec:	9c400015 	stw	r17,0(r19)
10007df0:	28000526 	beq	r5,zero,10007e08 <_fflush_r+0xf0>
10007df4:	80801004 	addi	r2,r16,64
10007df8:	28800226 	beq	r5,r2,10007e04 <_fflush_r+0xec>
10007dfc:	9809883a 	mov	r4,r19
10007e00:	00084480 	call	10008448 <_free_r>
10007e04:	80000c15 	stw	zero,48(r16)
10007e08:	0005883a 	mov	r2,zero
10007e0c:	dfc00417 	ldw	ra,16(sp)
10007e10:	dcc00317 	ldw	r19,12(sp)
10007e14:	dc800217 	ldw	r18,8(sp)
10007e18:	dc400117 	ldw	r17,4(sp)
10007e1c:	dc000017 	ldw	r16,0(sp)
10007e20:	dec00504 	addi	sp,sp,20
10007e24:	f800283a 	ret
10007e28:	84800417 	ldw	r18,16(r16)
10007e2c:	903ff626 	beq	r18,zero,10007e08 <__alt_data_end+0xf8007e08>
10007e30:	84400017 	ldw	r17,0(r16)
10007e34:	108000cc 	andi	r2,r2,3
10007e38:	84800015 	stw	r18,0(r16)
10007e3c:	8ca3c83a 	sub	r17,r17,r18
10007e40:	10001526 	beq	r2,zero,10007e98 <_fflush_r+0x180>
10007e44:	0005883a 	mov	r2,zero
10007e48:	80800215 	stw	r2,8(r16)
10007e4c:	04400316 	blt	zero,r17,10007e5c <_fflush_r+0x144>
10007e50:	003fed06 	br	10007e08 <__alt_data_end+0xf8007e08>
10007e54:	90a5883a 	add	r18,r18,r2
10007e58:	047feb0e 	bge	zero,r17,10007e08 <__alt_data_end+0xf8007e08>
10007e5c:	80800917 	ldw	r2,36(r16)
10007e60:	81400717 	ldw	r5,28(r16)
10007e64:	880f883a 	mov	r7,r17
10007e68:	900d883a 	mov	r6,r18
10007e6c:	9809883a 	mov	r4,r19
10007e70:	103ee83a 	callr	r2
10007e74:	88a3c83a 	sub	r17,r17,r2
10007e78:	00bff616 	blt	zero,r2,10007e54 <__alt_data_end+0xf8007e54>
10007e7c:	80c0030b 	ldhu	r3,12(r16)
10007e80:	00bfffc4 	movi	r2,-1
10007e84:	18c01014 	ori	r3,r3,64
10007e88:	80c0030d 	sth	r3,12(r16)
10007e8c:	003fdf06 	br	10007e0c <__alt_data_end+0xf8007e0c>
10007e90:	00082d40 	call	100082d4 <__sinit>
10007e94:	003fab06 	br	10007d44 <__alt_data_end+0xf8007d44>
10007e98:	80800517 	ldw	r2,20(r16)
10007e9c:	003fea06 	br	10007e48 <__alt_data_end+0xf8007e48>
10007ea0:	81400717 	ldw	r5,28(r16)
10007ea4:	000d883a 	mov	r6,zero
10007ea8:	9809883a 	mov	r4,r19
10007eac:	01c00044 	movi	r7,1
10007eb0:	403ee83a 	callr	r8
10007eb4:	100d883a 	mov	r6,r2
10007eb8:	00bfffc4 	movi	r2,-1
10007ebc:	30801326 	beq	r6,r2,10007f0c <_fflush_r+0x1f4>
10007ec0:	8080030b 	ldhu	r2,12(r16)
10007ec4:	82000a17 	ldw	r8,40(r16)
10007ec8:	003fb006 	br	10007d8c <__alt_data_end+0xf8007d8c>
10007ecc:	80c00f17 	ldw	r3,60(r16)
10007ed0:	00ffa716 	blt	zero,r3,10007d70 <__alt_data_end+0xf8007d70>
10007ed4:	003fcc06 	br	10007e08 <__alt_data_end+0xf8007e08>
10007ed8:	98c00017 	ldw	r3,0(r19)
10007edc:	183fb926 	beq	r3,zero,10007dc4 <__alt_data_end+0xf8007dc4>
10007ee0:	01000744 	movi	r4,29
10007ee4:	19000226 	beq	r3,r4,10007ef0 <_fflush_r+0x1d8>
10007ee8:	01000584 	movi	r4,22
10007eec:	1900101e 	bne	r3,r4,10007f30 <_fflush_r+0x218>
10007ef0:	8080030b 	ldhu	r2,12(r16)
10007ef4:	80c00417 	ldw	r3,16(r16)
10007ef8:	80000115 	stw	zero,4(r16)
10007efc:	10bdffcc 	andi	r2,r2,63487
10007f00:	8080030d 	sth	r2,12(r16)
10007f04:	80c00015 	stw	r3,0(r16)
10007f08:	003fb706 	br	10007de8 <__alt_data_end+0xf8007de8>
10007f0c:	98800017 	ldw	r2,0(r19)
10007f10:	103feb26 	beq	r2,zero,10007ec0 <__alt_data_end+0xf8007ec0>
10007f14:	00c00744 	movi	r3,29
10007f18:	10c00226 	beq	r2,r3,10007f24 <_fflush_r+0x20c>
10007f1c:	00c00584 	movi	r3,22
10007f20:	10ffd61e 	bne	r2,r3,10007e7c <__alt_data_end+0xf8007e7c>
10007f24:	9c400015 	stw	r17,0(r19)
10007f28:	0005883a 	mov	r2,zero
10007f2c:	003fb706 	br	10007e0c <__alt_data_end+0xf8007e0c>
10007f30:	80c0030b 	ldhu	r3,12(r16)
10007f34:	18c01014 	ori	r3,r3,64
10007f38:	80c0030d 	sth	r3,12(r16)
10007f3c:	003fb306 	br	10007e0c <__alt_data_end+0xf8007e0c>

10007f40 <fflush>:
10007f40:	20000526 	beq	r4,zero,10007f58 <fflush+0x18>
10007f44:	00840074 	movhi	r2,4097
10007f48:	108bd104 	addi	r2,r2,12100
10007f4c:	200b883a 	mov	r5,r4
10007f50:	11000017 	ldw	r4,0(r2)
10007f54:	0007d181 	jmpi	10007d18 <_fflush_r>
10007f58:	00840074 	movhi	r2,4097
10007f5c:	108bd004 	addi	r2,r2,12096
10007f60:	11000017 	ldw	r4,0(r2)
10007f64:	01440034 	movhi	r5,4096
10007f68:	295f4604 	addi	r5,r5,32024
10007f6c:	0008c941 	jmpi	10008c94 <_fwalk_reent>

10007f70 <__fp_lock>:
10007f70:	0005883a 	mov	r2,zero
10007f74:	f800283a 	ret

10007f78 <__fp_unlock>:
10007f78:	0005883a 	mov	r2,zero
10007f7c:	f800283a 	ret

10007f80 <_cleanup_r>:
10007f80:	01440074 	movhi	r5,4097
10007f84:	29732804 	addi	r5,r5,-13152
10007f88:	0008bdc1 	jmpi	10008bdc <_fwalk>

10007f8c <__sinit.part.1>:
10007f8c:	defff604 	addi	sp,sp,-40
10007f90:	00c40034 	movhi	r3,4096
10007f94:	dfc00915 	stw	ra,36(sp)
10007f98:	df000815 	stw	fp,32(sp)
10007f9c:	ddc00715 	stw	r23,28(sp)
10007fa0:	dd800615 	stw	r22,24(sp)
10007fa4:	dd400515 	stw	r21,20(sp)
10007fa8:	dd000415 	stw	r20,16(sp)
10007fac:	dcc00315 	stw	r19,12(sp)
10007fb0:	dc800215 	stw	r18,8(sp)
10007fb4:	dc400115 	stw	r17,4(sp)
10007fb8:	dc000015 	stw	r16,0(sp)
10007fbc:	18dfe004 	addi	r3,r3,32640
10007fc0:	24000117 	ldw	r16,4(r4)
10007fc4:	20c00f15 	stw	r3,60(r4)
10007fc8:	07000044 	movi	fp,1
10007fcc:	00c000c4 	movi	r3,3
10007fd0:	2080bb04 	addi	r2,r4,748
10007fd4:	20c0b915 	stw	r3,740(r4)
10007fd8:	27000e15 	stw	fp,56(r4)
10007fdc:	2080ba15 	stw	r2,744(r4)
10007fe0:	2000b815 	stw	zero,736(r4)
10007fe4:	05c00204 	movi	r23,8
10007fe8:	00800104 	movi	r2,4
10007fec:	2025883a 	mov	r18,r4
10007ff0:	b80d883a 	mov	r6,r23
10007ff4:	81001704 	addi	r4,r16,92
10007ff8:	000b883a 	mov	r5,zero
10007ffc:	80000015 	stw	zero,0(r16)
10008000:	80000115 	stw	zero,4(r16)
10008004:	80000215 	stw	zero,8(r16)
10008008:	8080030d 	sth	r2,12(r16)
1000800c:	80001915 	stw	zero,100(r16)
10008010:	8000038d 	sth	zero,14(r16)
10008014:	80000415 	stw	zero,16(r16)
10008018:	80000515 	stw	zero,20(r16)
1000801c:	80000615 	stw	zero,24(r16)
10008020:	0009b080 	call	10009b08 <memset>
10008024:	05840074 	movhi	r22,4097
10008028:	94400217 	ldw	r17,8(r18)
1000802c:	05440074 	movhi	r21,4097
10008030:	05040074 	movhi	r20,4097
10008034:	04c40074 	movhi	r19,4097
10008038:	b5acb704 	addi	r22,r22,-19748
1000803c:	ad6cce04 	addi	r21,r21,-19656
10008040:	a52ced04 	addi	r20,r20,-19532
10008044:	9ced0404 	addi	r19,r19,-19440
10008048:	85800815 	stw	r22,32(r16)
1000804c:	85400915 	stw	r21,36(r16)
10008050:	85000a15 	stw	r20,40(r16)
10008054:	84c00b15 	stw	r19,44(r16)
10008058:	84000715 	stw	r16,28(r16)
1000805c:	00800284 	movi	r2,10
10008060:	89001704 	addi	r4,r17,92
10008064:	b80d883a 	mov	r6,r23
10008068:	000b883a 	mov	r5,zero
1000806c:	88000015 	stw	zero,0(r17)
10008070:	88000115 	stw	zero,4(r17)
10008074:	88000215 	stw	zero,8(r17)
10008078:	8880030d 	sth	r2,12(r17)
1000807c:	88001915 	stw	zero,100(r17)
10008080:	8f00038d 	sth	fp,14(r17)
10008084:	88000415 	stw	zero,16(r17)
10008088:	88000515 	stw	zero,20(r17)
1000808c:	88000615 	stw	zero,24(r17)
10008090:	0009b080 	call	10009b08 <memset>
10008094:	94000317 	ldw	r16,12(r18)
10008098:	00800484 	movi	r2,18
1000809c:	8c400715 	stw	r17,28(r17)
100080a0:	8d800815 	stw	r22,32(r17)
100080a4:	8d400915 	stw	r21,36(r17)
100080a8:	8d000a15 	stw	r20,40(r17)
100080ac:	8cc00b15 	stw	r19,44(r17)
100080b0:	8080030d 	sth	r2,12(r16)
100080b4:	00800084 	movi	r2,2
100080b8:	80000015 	stw	zero,0(r16)
100080bc:	80000115 	stw	zero,4(r16)
100080c0:	80000215 	stw	zero,8(r16)
100080c4:	80001915 	stw	zero,100(r16)
100080c8:	8080038d 	sth	r2,14(r16)
100080cc:	80000415 	stw	zero,16(r16)
100080d0:	80000515 	stw	zero,20(r16)
100080d4:	80000615 	stw	zero,24(r16)
100080d8:	81001704 	addi	r4,r16,92
100080dc:	000b883a 	mov	r5,zero
100080e0:	b80d883a 	mov	r6,r23
100080e4:	0009b080 	call	10009b08 <memset>
100080e8:	84000715 	stw	r16,28(r16)
100080ec:	85800815 	stw	r22,32(r16)
100080f0:	85400915 	stw	r21,36(r16)
100080f4:	85000a15 	stw	r20,40(r16)
100080f8:	84c00b15 	stw	r19,44(r16)
100080fc:	dfc00917 	ldw	ra,36(sp)
10008100:	df000817 	ldw	fp,32(sp)
10008104:	ddc00717 	ldw	r23,28(sp)
10008108:	dd800617 	ldw	r22,24(sp)
1000810c:	dd400517 	ldw	r21,20(sp)
10008110:	dd000417 	ldw	r20,16(sp)
10008114:	dcc00317 	ldw	r19,12(sp)
10008118:	dc800217 	ldw	r18,8(sp)
1000811c:	dc400117 	ldw	r17,4(sp)
10008120:	dc000017 	ldw	r16,0(sp)
10008124:	dec00a04 	addi	sp,sp,40
10008128:	f800283a 	ret

1000812c <__sfmoreglue>:
1000812c:	defffc04 	addi	sp,sp,-16
10008130:	dc800215 	stw	r18,8(sp)
10008134:	2825883a 	mov	r18,r5
10008138:	dc000015 	stw	r16,0(sp)
1000813c:	01401a04 	movi	r5,104
10008140:	2021883a 	mov	r16,r4
10008144:	9009883a 	mov	r4,r18
10008148:	dfc00315 	stw	ra,12(sp)
1000814c:	dc400115 	stw	r17,4(sp)
10008150:	0002be00 	call	10002be0 <__mulsi3>
10008154:	8009883a 	mov	r4,r16
10008158:	11400304 	addi	r5,r2,12
1000815c:	1023883a 	mov	r17,r2
10008160:	0008fe40 	call	10008fe4 <_malloc_r>
10008164:	1021883a 	mov	r16,r2
10008168:	10000726 	beq	r2,zero,10008188 <__sfmoreglue+0x5c>
1000816c:	11000304 	addi	r4,r2,12
10008170:	10000015 	stw	zero,0(r2)
10008174:	14800115 	stw	r18,4(r2)
10008178:	11000215 	stw	r4,8(r2)
1000817c:	000b883a 	mov	r5,zero
10008180:	880d883a 	mov	r6,r17
10008184:	0009b080 	call	10009b08 <memset>
10008188:	8005883a 	mov	r2,r16
1000818c:	dfc00317 	ldw	ra,12(sp)
10008190:	dc800217 	ldw	r18,8(sp)
10008194:	dc400117 	ldw	r17,4(sp)
10008198:	dc000017 	ldw	r16,0(sp)
1000819c:	dec00404 	addi	sp,sp,16
100081a0:	f800283a 	ret

100081a4 <__sfp>:
100081a4:	00840074 	movhi	r2,4097
100081a8:	defffb04 	addi	sp,sp,-20
100081ac:	108bd004 	addi	r2,r2,12096
100081b0:	dc800215 	stw	r18,8(sp)
100081b4:	14800017 	ldw	r18,0(r2)
100081b8:	dcc00315 	stw	r19,12(sp)
100081bc:	dfc00415 	stw	ra,16(sp)
100081c0:	90800e17 	ldw	r2,56(r18)
100081c4:	dc400115 	stw	r17,4(sp)
100081c8:	dc000015 	stw	r16,0(sp)
100081cc:	2027883a 	mov	r19,r4
100081d0:	1000021e 	bne	r2,zero,100081dc <__sfp+0x38>
100081d4:	9009883a 	mov	r4,r18
100081d8:	0007f8c0 	call	10007f8c <__sinit.part.1>
100081dc:	9480b804 	addi	r18,r18,736
100081e0:	047fffc4 	movi	r17,-1
100081e4:	91400117 	ldw	r5,4(r18)
100081e8:	94000217 	ldw	r16,8(r18)
100081ec:	297fffc4 	addi	r5,r5,-1
100081f0:	28000a16 	blt	r5,zero,1000821c <__sfp+0x78>
100081f4:	8080030f 	ldh	r2,12(r16)
100081f8:	10000c26 	beq	r2,zero,1000822c <__sfp+0x88>
100081fc:	80c01d04 	addi	r3,r16,116
10008200:	00000206 	br	1000820c <__sfp+0x68>
10008204:	18bfe60f 	ldh	r2,-104(r3)
10008208:	10000826 	beq	r2,zero,1000822c <__sfp+0x88>
1000820c:	297fffc4 	addi	r5,r5,-1
10008210:	1c3ffd04 	addi	r16,r3,-12
10008214:	18c01a04 	addi	r3,r3,104
10008218:	2c7ffa1e 	bne	r5,r17,10008204 <__alt_data_end+0xf8008204>
1000821c:	90800017 	ldw	r2,0(r18)
10008220:	10001d26 	beq	r2,zero,10008298 <__sfp+0xf4>
10008224:	1025883a 	mov	r18,r2
10008228:	003fee06 	br	100081e4 <__alt_data_end+0xf80081e4>
1000822c:	00bfffc4 	movi	r2,-1
10008230:	8080038d 	sth	r2,14(r16)
10008234:	00800044 	movi	r2,1
10008238:	8080030d 	sth	r2,12(r16)
1000823c:	80001915 	stw	zero,100(r16)
10008240:	80000015 	stw	zero,0(r16)
10008244:	80000215 	stw	zero,8(r16)
10008248:	80000115 	stw	zero,4(r16)
1000824c:	80000415 	stw	zero,16(r16)
10008250:	80000515 	stw	zero,20(r16)
10008254:	80000615 	stw	zero,24(r16)
10008258:	81001704 	addi	r4,r16,92
1000825c:	000b883a 	mov	r5,zero
10008260:	01800204 	movi	r6,8
10008264:	0009b080 	call	10009b08 <memset>
10008268:	8005883a 	mov	r2,r16
1000826c:	80000c15 	stw	zero,48(r16)
10008270:	80000d15 	stw	zero,52(r16)
10008274:	80001115 	stw	zero,68(r16)
10008278:	80001215 	stw	zero,72(r16)
1000827c:	dfc00417 	ldw	ra,16(sp)
10008280:	dcc00317 	ldw	r19,12(sp)
10008284:	dc800217 	ldw	r18,8(sp)
10008288:	dc400117 	ldw	r17,4(sp)
1000828c:	dc000017 	ldw	r16,0(sp)
10008290:	dec00504 	addi	sp,sp,20
10008294:	f800283a 	ret
10008298:	9809883a 	mov	r4,r19
1000829c:	01400104 	movi	r5,4
100082a0:	000812c0 	call	1000812c <__sfmoreglue>
100082a4:	90800015 	stw	r2,0(r18)
100082a8:	103fde1e 	bne	r2,zero,10008224 <__alt_data_end+0xf8008224>
100082ac:	00800304 	movi	r2,12
100082b0:	98800015 	stw	r2,0(r19)
100082b4:	0005883a 	mov	r2,zero
100082b8:	003ff006 	br	1000827c <__alt_data_end+0xf800827c>

100082bc <_cleanup>:
100082bc:	00840074 	movhi	r2,4097
100082c0:	108bd004 	addi	r2,r2,12096
100082c4:	11000017 	ldw	r4,0(r2)
100082c8:	01440074 	movhi	r5,4097
100082cc:	29732804 	addi	r5,r5,-13152
100082d0:	0008bdc1 	jmpi	10008bdc <_fwalk>

100082d4 <__sinit>:
100082d4:	20800e17 	ldw	r2,56(r4)
100082d8:	10000126 	beq	r2,zero,100082e0 <__sinit+0xc>
100082dc:	f800283a 	ret
100082e0:	0007f8c1 	jmpi	10007f8c <__sinit.part.1>

100082e4 <__sfp_lock_acquire>:
100082e4:	f800283a 	ret

100082e8 <__sfp_lock_release>:
100082e8:	f800283a 	ret

100082ec <__sinit_lock_acquire>:
100082ec:	f800283a 	ret

100082f0 <__sinit_lock_release>:
100082f0:	f800283a 	ret

100082f4 <__fp_lock_all>:
100082f4:	00840074 	movhi	r2,4097
100082f8:	108bd104 	addi	r2,r2,12100
100082fc:	11000017 	ldw	r4,0(r2)
10008300:	01440034 	movhi	r5,4096
10008304:	295fdc04 	addi	r5,r5,32624
10008308:	0008bdc1 	jmpi	10008bdc <_fwalk>

1000830c <__fp_unlock_all>:
1000830c:	00840074 	movhi	r2,4097
10008310:	108bd104 	addi	r2,r2,12100
10008314:	11000017 	ldw	r4,0(r2)
10008318:	01440034 	movhi	r5,4096
1000831c:	295fde04 	addi	r5,r5,32632
10008320:	0008bdc1 	jmpi	10008bdc <_fwalk>

10008324 <_malloc_trim_r>:
10008324:	defffb04 	addi	sp,sp,-20
10008328:	dcc00315 	stw	r19,12(sp)
1000832c:	04c40074 	movhi	r19,4097
10008330:	dc800215 	stw	r18,8(sp)
10008334:	dc400115 	stw	r17,4(sp)
10008338:	dc000015 	stw	r16,0(sp)
1000833c:	dfc00415 	stw	ra,16(sp)
10008340:	2821883a 	mov	r16,r5
10008344:	9cc64c04 	addi	r19,r19,6448
10008348:	2025883a 	mov	r18,r4
1000834c:	000ef240 	call	1000ef24 <__malloc_lock>
10008350:	98800217 	ldw	r2,8(r19)
10008354:	14400117 	ldw	r17,4(r2)
10008358:	00bfff04 	movi	r2,-4
1000835c:	88a2703a 	and	r17,r17,r2
10008360:	8c21c83a 	sub	r16,r17,r16
10008364:	8403fbc4 	addi	r16,r16,4079
10008368:	8020d33a 	srli	r16,r16,12
1000836c:	0083ffc4 	movi	r2,4095
10008370:	843fffc4 	addi	r16,r16,-1
10008374:	8020933a 	slli	r16,r16,12
10008378:	1400060e 	bge	r2,r16,10008394 <_malloc_trim_r+0x70>
1000837c:	9009883a 	mov	r4,r18
10008380:	000b883a 	mov	r5,zero
10008384:	000b2880 	call	1000b288 <_sbrk_r>
10008388:	98c00217 	ldw	r3,8(r19)
1000838c:	1c47883a 	add	r3,r3,r17
10008390:	10c00a26 	beq	r2,r3,100083bc <_malloc_trim_r+0x98>
10008394:	9009883a 	mov	r4,r18
10008398:	000ef440 	call	1000ef44 <__malloc_unlock>
1000839c:	0005883a 	mov	r2,zero
100083a0:	dfc00417 	ldw	ra,16(sp)
100083a4:	dcc00317 	ldw	r19,12(sp)
100083a8:	dc800217 	ldw	r18,8(sp)
100083ac:	dc400117 	ldw	r17,4(sp)
100083b0:	dc000017 	ldw	r16,0(sp)
100083b4:	dec00504 	addi	sp,sp,20
100083b8:	f800283a 	ret
100083bc:	9009883a 	mov	r4,r18
100083c0:	040bc83a 	sub	r5,zero,r16
100083c4:	000b2880 	call	1000b288 <_sbrk_r>
100083c8:	00ffffc4 	movi	r3,-1
100083cc:	10c00d26 	beq	r2,r3,10008404 <_malloc_trim_r+0xe0>
100083d0:	00c40074 	movhi	r3,4097
100083d4:	18d2b804 	addi	r3,r3,19168
100083d8:	18800017 	ldw	r2,0(r3)
100083dc:	99000217 	ldw	r4,8(r19)
100083e0:	8c23c83a 	sub	r17,r17,r16
100083e4:	8c400054 	ori	r17,r17,1
100083e8:	1421c83a 	sub	r16,r2,r16
100083ec:	24400115 	stw	r17,4(r4)
100083f0:	9009883a 	mov	r4,r18
100083f4:	1c000015 	stw	r16,0(r3)
100083f8:	000ef440 	call	1000ef44 <__malloc_unlock>
100083fc:	00800044 	movi	r2,1
10008400:	003fe706 	br	100083a0 <__alt_data_end+0xf80083a0>
10008404:	9009883a 	mov	r4,r18
10008408:	000b883a 	mov	r5,zero
1000840c:	000b2880 	call	1000b288 <_sbrk_r>
10008410:	99000217 	ldw	r4,8(r19)
10008414:	014003c4 	movi	r5,15
10008418:	1107c83a 	sub	r3,r2,r4
1000841c:	28ffdd0e 	bge	r5,r3,10008394 <__alt_data_end+0xf8008394>
10008420:	01440074 	movhi	r5,4097
10008424:	294bd304 	addi	r5,r5,12108
10008428:	29400017 	ldw	r5,0(r5)
1000842c:	18c00054 	ori	r3,r3,1
10008430:	20c00115 	stw	r3,4(r4)
10008434:	00c40074 	movhi	r3,4097
10008438:	1145c83a 	sub	r2,r2,r5
1000843c:	18d2b804 	addi	r3,r3,19168
10008440:	18800015 	stw	r2,0(r3)
10008444:	003fd306 	br	10008394 <__alt_data_end+0xf8008394>

10008448 <_free_r>:
10008448:	28004c26 	beq	r5,zero,1000857c <_free_r+0x134>
1000844c:	defffd04 	addi	sp,sp,-12
10008450:	dc400115 	stw	r17,4(sp)
10008454:	dc000015 	stw	r16,0(sp)
10008458:	2023883a 	mov	r17,r4
1000845c:	2821883a 	mov	r16,r5
10008460:	dfc00215 	stw	ra,8(sp)
10008464:	000ef240 	call	1000ef24 <__malloc_lock>
10008468:	813fff17 	ldw	r4,-4(r16)
1000846c:	00bfff84 	movi	r2,-2
10008470:	02440074 	movhi	r9,4097
10008474:	81bffe04 	addi	r6,r16,-8
10008478:	2084703a 	and	r2,r4,r2
1000847c:	4a464c04 	addi	r9,r9,6448
10008480:	308b883a 	add	r5,r6,r2
10008484:	2a000117 	ldw	r8,4(r5)
10008488:	49c00217 	ldw	r7,8(r9)
1000848c:	00ffff04 	movi	r3,-4
10008490:	40c6703a 	and	r3,r8,r3
10008494:	39405326 	beq	r7,r5,100085e4 <_free_r+0x19c>
10008498:	28c00115 	stw	r3,4(r5)
1000849c:	2100004c 	andi	r4,r4,1
100084a0:	2000091e 	bne	r4,zero,100084c8 <_free_r+0x80>
100084a4:	81fffe17 	ldw	r7,-8(r16)
100084a8:	4a000204 	addi	r8,r9,8
100084ac:	31cdc83a 	sub	r6,r6,r7
100084b0:	31000217 	ldw	r4,8(r6)
100084b4:	11c5883a 	add	r2,r2,r7
100084b8:	22006126 	beq	r4,r8,10008640 <_free_r+0x1f8>
100084bc:	31c00317 	ldw	r7,12(r6)
100084c0:	21c00315 	stw	r7,12(r4)
100084c4:	39000215 	stw	r4,8(r7)
100084c8:	28c9883a 	add	r4,r5,r3
100084cc:	21c00117 	ldw	r7,4(r4)
100084d0:	39c0004c 	andi	r7,r7,1
100084d4:	38000d1e 	bne	r7,zero,1000850c <_free_r+0xc4>
100084d8:	29000217 	ldw	r4,8(r5)
100084dc:	10c5883a 	add	r2,r2,r3
100084e0:	00c40074 	movhi	r3,4097
100084e4:	18c64e04 	addi	r3,r3,6456
100084e8:	20c07526 	beq	r4,r3,100086c0 <_free_r+0x278>
100084ec:	29c00317 	ldw	r7,12(r5)
100084f0:	11400054 	ori	r5,r2,1
100084f4:	3087883a 	add	r3,r6,r2
100084f8:	21c00315 	stw	r7,12(r4)
100084fc:	39000215 	stw	r4,8(r7)
10008500:	31400115 	stw	r5,4(r6)
10008504:	18800015 	stw	r2,0(r3)
10008508:	00000406 	br	1000851c <_free_r+0xd4>
1000850c:	10c00054 	ori	r3,r2,1
10008510:	30c00115 	stw	r3,4(r6)
10008514:	3087883a 	add	r3,r6,r2
10008518:	18800015 	stw	r2,0(r3)
1000851c:	00c07fc4 	movi	r3,511
10008520:	18801736 	bltu	r3,r2,10008580 <_free_r+0x138>
10008524:	1004d0fa 	srli	r2,r2,3
10008528:	01400044 	movi	r5,1
1000852c:	49000117 	ldw	r4,4(r9)
10008530:	1087883a 	add	r3,r2,r2
10008534:	18c7883a 	add	r3,r3,r3
10008538:	1005d0ba 	srai	r2,r2,2
1000853c:	18c7883a 	add	r3,r3,r3
10008540:	1a47883a 	add	r3,r3,r9
10008544:	19c00217 	ldw	r7,8(r3)
10008548:	2884983a 	sll	r2,r5,r2
1000854c:	30c00315 	stw	r3,12(r6)
10008550:	31c00215 	stw	r7,8(r6)
10008554:	1104b03a 	or	r2,r2,r4
10008558:	19800215 	stw	r6,8(r3)
1000855c:	48800115 	stw	r2,4(r9)
10008560:	39800315 	stw	r6,12(r7)
10008564:	8809883a 	mov	r4,r17
10008568:	dfc00217 	ldw	ra,8(sp)
1000856c:	dc400117 	ldw	r17,4(sp)
10008570:	dc000017 	ldw	r16,0(sp)
10008574:	dec00304 	addi	sp,sp,12
10008578:	000ef441 	jmpi	1000ef44 <__malloc_unlock>
1000857c:	f800283a 	ret
10008580:	1006d27a 	srli	r3,r2,9
10008584:	01000104 	movi	r4,4
10008588:	20c04036 	bltu	r4,r3,1000868c <_free_r+0x244>
1000858c:	1006d1ba 	srli	r3,r2,6
10008590:	19400e04 	addi	r5,r3,56
10008594:	2947883a 	add	r3,r5,r5
10008598:	18c7883a 	add	r3,r3,r3
1000859c:	18c7883a 	add	r3,r3,r3
100085a0:	1a49883a 	add	r4,r3,r9
100085a4:	20c00217 	ldw	r3,8(r4)
100085a8:	01c40074 	movhi	r7,4097
100085ac:	39c64c04 	addi	r7,r7,6448
100085b0:	19003b26 	beq	r3,r4,100086a0 <_free_r+0x258>
100085b4:	01ffff04 	movi	r7,-4
100085b8:	19400117 	ldw	r5,4(r3)
100085bc:	29ca703a 	and	r5,r5,r7
100085c0:	1140022e 	bgeu	r2,r5,100085cc <_free_r+0x184>
100085c4:	18c00217 	ldw	r3,8(r3)
100085c8:	20fffb1e 	bne	r4,r3,100085b8 <__alt_data_end+0xf80085b8>
100085cc:	18800317 	ldw	r2,12(r3)
100085d0:	30800315 	stw	r2,12(r6)
100085d4:	30c00215 	stw	r3,8(r6)
100085d8:	11800215 	stw	r6,8(r2)
100085dc:	19800315 	stw	r6,12(r3)
100085e0:	003fe006 	br	10008564 <__alt_data_end+0xf8008564>
100085e4:	2100004c 	andi	r4,r4,1
100085e8:	1885883a 	add	r2,r3,r2
100085ec:	2000071e 	bne	r4,zero,1000860c <_free_r+0x1c4>
100085f0:	817ffe17 	ldw	r5,-8(r16)
100085f4:	314dc83a 	sub	r6,r6,r5
100085f8:	30c00317 	ldw	r3,12(r6)
100085fc:	31000217 	ldw	r4,8(r6)
10008600:	1145883a 	add	r2,r2,r5
10008604:	20c00315 	stw	r3,12(r4)
10008608:	19000215 	stw	r4,8(r3)
1000860c:	10c00054 	ori	r3,r2,1
10008610:	30c00115 	stw	r3,4(r6)
10008614:	00c40074 	movhi	r3,4097
10008618:	18cbd404 	addi	r3,r3,12112
1000861c:	18c00017 	ldw	r3,0(r3)
10008620:	49800215 	stw	r6,8(r9)
10008624:	10ffcf36 	bltu	r2,r3,10008564 <__alt_data_end+0xf8008564>
10008628:	00840074 	movhi	r2,4097
1000862c:	1092af04 	addi	r2,r2,19132
10008630:	11400017 	ldw	r5,0(r2)
10008634:	8809883a 	mov	r4,r17
10008638:	00083240 	call	10008324 <_malloc_trim_r>
1000863c:	003fc906 	br	10008564 <__alt_data_end+0xf8008564>
10008640:	28c9883a 	add	r4,r5,r3
10008644:	21000117 	ldw	r4,4(r4)
10008648:	2100004c 	andi	r4,r4,1
1000864c:	20000a1e 	bne	r4,zero,10008678 <_free_r+0x230>
10008650:	29000317 	ldw	r4,12(r5)
10008654:	29400217 	ldw	r5,8(r5)
10008658:	10c5883a 	add	r2,r2,r3
1000865c:	10c00054 	ori	r3,r2,1
10008660:	29000315 	stw	r4,12(r5)
10008664:	21400215 	stw	r5,8(r4)
10008668:	30c00115 	stw	r3,4(r6)
1000866c:	308d883a 	add	r6,r6,r2
10008670:	30800015 	stw	r2,0(r6)
10008674:	003fbb06 	br	10008564 <__alt_data_end+0xf8008564>
10008678:	10c00054 	ori	r3,r2,1
1000867c:	30c00115 	stw	r3,4(r6)
10008680:	308d883a 	add	r6,r6,r2
10008684:	30800015 	stw	r2,0(r6)
10008688:	003fb606 	br	10008564 <__alt_data_end+0xf8008564>
1000868c:	01000504 	movi	r4,20
10008690:	20c01436 	bltu	r4,r3,100086e4 <_free_r+0x29c>
10008694:	194016c4 	addi	r5,r3,91
10008698:	2947883a 	add	r3,r5,r5
1000869c:	003fbe06 	br	10008598 <__alt_data_end+0xf8008598>
100086a0:	280bd0ba 	srai	r5,r5,2
100086a4:	00800044 	movi	r2,1
100086a8:	39000117 	ldw	r4,4(r7)
100086ac:	114a983a 	sll	r5,r2,r5
100086b0:	1805883a 	mov	r2,r3
100086b4:	2908b03a 	or	r4,r5,r4
100086b8:	39000115 	stw	r4,4(r7)
100086bc:	003fc406 	br	100085d0 <__alt_data_end+0xf80085d0>
100086c0:	49800515 	stw	r6,20(r9)
100086c4:	49800415 	stw	r6,16(r9)
100086c8:	10c00054 	ori	r3,r2,1
100086cc:	31000315 	stw	r4,12(r6)
100086d0:	31000215 	stw	r4,8(r6)
100086d4:	30c00115 	stw	r3,4(r6)
100086d8:	308d883a 	add	r6,r6,r2
100086dc:	30800015 	stw	r2,0(r6)
100086e0:	003fa006 	br	10008564 <__alt_data_end+0xf8008564>
100086e4:	01001504 	movi	r4,84
100086e8:	20c00436 	bltu	r4,r3,100086fc <_free_r+0x2b4>
100086ec:	1006d33a 	srli	r3,r2,12
100086f0:	19401b84 	addi	r5,r3,110
100086f4:	2947883a 	add	r3,r5,r5
100086f8:	003fa706 	br	10008598 <__alt_data_end+0xf8008598>
100086fc:	01005504 	movi	r4,340
10008700:	20c00436 	bltu	r4,r3,10008714 <_free_r+0x2cc>
10008704:	1006d3fa 	srli	r3,r2,15
10008708:	19401dc4 	addi	r5,r3,119
1000870c:	2947883a 	add	r3,r5,r5
10008710:	003fa106 	br	10008598 <__alt_data_end+0xf8008598>
10008714:	01015504 	movi	r4,1364
10008718:	20c00436 	bltu	r4,r3,1000872c <_free_r+0x2e4>
1000871c:	1006d4ba 	srli	r3,r2,18
10008720:	19401f04 	addi	r5,r3,124
10008724:	2947883a 	add	r3,r5,r5
10008728:	003f9b06 	br	10008598 <__alt_data_end+0xf8008598>
1000872c:	00c03f04 	movi	r3,252
10008730:	01401f84 	movi	r5,126
10008734:	003f9806 	br	10008598 <__alt_data_end+0xf8008598>

10008738 <__sfvwrite_r>:
10008738:	30800217 	ldw	r2,8(r6)
1000873c:	10004526 	beq	r2,zero,10008854 <__sfvwrite_r+0x11c>
10008740:	28c0030b 	ldhu	r3,12(r5)
10008744:	defff404 	addi	sp,sp,-48
10008748:	dd400715 	stw	r21,28(sp)
1000874c:	dcc00515 	stw	r19,20(sp)
10008750:	dc000215 	stw	r16,8(sp)
10008754:	dfc00b15 	stw	ra,44(sp)
10008758:	df000a15 	stw	fp,40(sp)
1000875c:	ddc00915 	stw	r23,36(sp)
10008760:	dd800815 	stw	r22,32(sp)
10008764:	dd000615 	stw	r20,24(sp)
10008768:	dc800415 	stw	r18,16(sp)
1000876c:	dc400315 	stw	r17,12(sp)
10008770:	1880020c 	andi	r2,r3,8
10008774:	2821883a 	mov	r16,r5
10008778:	202b883a 	mov	r21,r4
1000877c:	3027883a 	mov	r19,r6
10008780:	10002526 	beq	r2,zero,10008818 <__sfvwrite_r+0xe0>
10008784:	28800417 	ldw	r2,16(r5)
10008788:	10002326 	beq	r2,zero,10008818 <__sfvwrite_r+0xe0>
1000878c:	1880008c 	andi	r2,r3,2
10008790:	9c400017 	ldw	r17,0(r19)
10008794:	10003126 	beq	r2,zero,1000885c <__sfvwrite_r+0x124>
10008798:	0029883a 	mov	r20,zero
1000879c:	0025883a 	mov	r18,zero
100087a0:	05810004 	movi	r22,1024
100087a4:	a00d883a 	mov	r6,r20
100087a8:	a809883a 	mov	r4,r21
100087ac:	90002526 	beq	r18,zero,10008844 <__sfvwrite_r+0x10c>
100087b0:	900f883a 	mov	r7,r18
100087b4:	81400717 	ldw	r5,28(r16)
100087b8:	b480012e 	bgeu	r22,r18,100087c0 <__sfvwrite_r+0x88>
100087bc:	01c10004 	movi	r7,1024
100087c0:	80800917 	ldw	r2,36(r16)
100087c4:	103ee83a 	callr	r2
100087c8:	0080510e 	bge	zero,r2,10008910 <__sfvwrite_r+0x1d8>
100087cc:	98c00217 	ldw	r3,8(r19)
100087d0:	a0a9883a 	add	r20,r20,r2
100087d4:	90a5c83a 	sub	r18,r18,r2
100087d8:	1885c83a 	sub	r2,r3,r2
100087dc:	98800215 	stw	r2,8(r19)
100087e0:	103ff01e 	bne	r2,zero,100087a4 <__alt_data_end+0xf80087a4>
100087e4:	0005883a 	mov	r2,zero
100087e8:	dfc00b17 	ldw	ra,44(sp)
100087ec:	df000a17 	ldw	fp,40(sp)
100087f0:	ddc00917 	ldw	r23,36(sp)
100087f4:	dd800817 	ldw	r22,32(sp)
100087f8:	dd400717 	ldw	r21,28(sp)
100087fc:	dd000617 	ldw	r20,24(sp)
10008800:	dcc00517 	ldw	r19,20(sp)
10008804:	dc800417 	ldw	r18,16(sp)
10008808:	dc400317 	ldw	r17,12(sp)
1000880c:	dc000217 	ldw	r16,8(sp)
10008810:	dec00c04 	addi	sp,sp,48
10008814:	f800283a 	ret
10008818:	a809883a 	mov	r4,r21
1000881c:	800b883a 	mov	r5,r16
10008820:	00062980 	call	10006298 <__swsetup_r>
10008824:	80c0030b 	ldhu	r3,12(r16)
10008828:	103fd826 	beq	r2,zero,1000878c <__alt_data_end+0xf800878c>
1000882c:	18c01014 	ori	r3,r3,64
10008830:	80c0030d 	sth	r3,12(r16)
10008834:	00c00244 	movi	r3,9
10008838:	00bfffc4 	movi	r2,-1
1000883c:	a8c00015 	stw	r3,0(r21)
10008840:	003fe906 	br	100087e8 <__alt_data_end+0xf80087e8>
10008844:	8d000017 	ldw	r20,0(r17)
10008848:	8c800117 	ldw	r18,4(r17)
1000884c:	8c400204 	addi	r17,r17,8
10008850:	003fd406 	br	100087a4 <__alt_data_end+0xf80087a4>
10008854:	0005883a 	mov	r2,zero
10008858:	f800283a 	ret
1000885c:	1880004c 	andi	r2,r3,1
10008860:	1000301e 	bne	r2,zero,10008924 <__sfvwrite_r+0x1ec>
10008864:	002f883a 	mov	r23,zero
10008868:	0025883a 	mov	r18,zero
1000886c:	90001c26 	beq	r18,zero,100088e0 <__sfvwrite_r+0x1a8>
10008870:	1880800c 	andi	r2,r3,512
10008874:	85000217 	ldw	r20,8(r16)
10008878:	10006c26 	beq	r2,zero,10008a2c <__sfvwrite_r+0x2f4>
1000887c:	a02d883a 	mov	r22,r20
10008880:	95008536 	bltu	r18,r20,10008a98 <__sfvwrite_r+0x360>
10008884:	1881200c 	andi	r2,r3,1152
10008888:	10009d1e 	bne	r2,zero,10008b00 <__sfvwrite_r+0x3c8>
1000888c:	81000017 	ldw	r4,0(r16)
10008890:	a039883a 	mov	fp,r20
10008894:	9029883a 	mov	r20,r18
10008898:	b80b883a 	mov	r5,r23
1000889c:	b00d883a 	mov	r6,r22
100088a0:	00099ac0 	call	100099ac <memmove>
100088a4:	80c00217 	ldw	r3,8(r16)
100088a8:	81000017 	ldw	r4,0(r16)
100088ac:	9005883a 	mov	r2,r18
100088b0:	1f39c83a 	sub	fp,r3,fp
100088b4:	258f883a 	add	r7,r4,r22
100088b8:	87000215 	stw	fp,8(r16)
100088bc:	81c00015 	stw	r7,0(r16)
100088c0:	98c00217 	ldw	r3,8(r19)
100088c4:	b8af883a 	add	r23,r23,r2
100088c8:	90a5c83a 	sub	r18,r18,r2
100088cc:	1d05c83a 	sub	r2,r3,r20
100088d0:	98800215 	stw	r2,8(r19)
100088d4:	103fc326 	beq	r2,zero,100087e4 <__alt_data_end+0xf80087e4>
100088d8:	80c0030b 	ldhu	r3,12(r16)
100088dc:	903fe41e 	bne	r18,zero,10008870 <__alt_data_end+0xf8008870>
100088e0:	8dc00017 	ldw	r23,0(r17)
100088e4:	8c800117 	ldw	r18,4(r17)
100088e8:	8c400204 	addi	r17,r17,8
100088ec:	003fdf06 	br	1000886c <__alt_data_end+0xf800886c>
100088f0:	000ac740 	call	1000ac74 <_realloc_r>
100088f4:	102d883a 	mov	r22,r2
100088f8:	1000a01e 	bne	r2,zero,10008b7c <__sfvwrite_r+0x444>
100088fc:	81400417 	ldw	r5,16(r16)
10008900:	a809883a 	mov	r4,r21
10008904:	00084480 	call	10008448 <_free_r>
10008908:	00800304 	movi	r2,12
1000890c:	a8800015 	stw	r2,0(r21)
10008910:	80c0030b 	ldhu	r3,12(r16)
10008914:	00bfffc4 	movi	r2,-1
10008918:	18c01014 	ori	r3,r3,64
1000891c:	80c0030d 	sth	r3,12(r16)
10008920:	003fb106 	br	100087e8 <__alt_data_end+0xf80087e8>
10008924:	0029883a 	mov	r20,zero
10008928:	0011883a 	mov	r8,zero
1000892c:	0039883a 	mov	fp,zero
10008930:	0025883a 	mov	r18,zero
10008934:	90001f26 	beq	r18,zero,100089b4 <__sfvwrite_r+0x27c>
10008938:	40006826 	beq	r8,zero,10008adc <__sfvwrite_r+0x3a4>
1000893c:	a02f883a 	mov	r23,r20
10008940:	9500012e 	bgeu	r18,r20,10008948 <__sfvwrite_r+0x210>
10008944:	902f883a 	mov	r23,r18
10008948:	81000017 	ldw	r4,0(r16)
1000894c:	80800417 	ldw	r2,16(r16)
10008950:	b82d883a 	mov	r22,r23
10008954:	81800217 	ldw	r6,8(r16)
10008958:	81c00517 	ldw	r7,20(r16)
1000895c:	1100022e 	bgeu	r2,r4,10008968 <__sfvwrite_r+0x230>
10008960:	31c7883a 	add	r3,r6,r7
10008964:	1dc01816 	blt	r3,r23,100089c8 <__sfvwrite_r+0x290>
10008968:	b9c03f16 	blt	r23,r7,10008a68 <__sfvwrite_r+0x330>
1000896c:	80800917 	ldw	r2,36(r16)
10008970:	81400717 	ldw	r5,28(r16)
10008974:	a809883a 	mov	r4,r21
10008978:	da000115 	stw	r8,4(sp)
1000897c:	e00d883a 	mov	r6,fp
10008980:	103ee83a 	callr	r2
10008984:	102d883a 	mov	r22,r2
10008988:	da000117 	ldw	r8,4(sp)
1000898c:	00bfe00e 	bge	zero,r2,10008910 <__alt_data_end+0xf8008910>
10008990:	a5a9c83a 	sub	r20,r20,r22
10008994:	a0001f26 	beq	r20,zero,10008a14 <__sfvwrite_r+0x2dc>
10008998:	98800217 	ldw	r2,8(r19)
1000899c:	e5b9883a 	add	fp,fp,r22
100089a0:	95a5c83a 	sub	r18,r18,r22
100089a4:	15adc83a 	sub	r22,r2,r22
100089a8:	9d800215 	stw	r22,8(r19)
100089ac:	b03f8d26 	beq	r22,zero,100087e4 <__alt_data_end+0xf80087e4>
100089b0:	903fe11e 	bne	r18,zero,10008938 <__alt_data_end+0xf8008938>
100089b4:	8f000017 	ldw	fp,0(r17)
100089b8:	8c800117 	ldw	r18,4(r17)
100089bc:	0011883a 	mov	r8,zero
100089c0:	8c400204 	addi	r17,r17,8
100089c4:	003fdb06 	br	10008934 <__alt_data_end+0xf8008934>
100089c8:	180d883a 	mov	r6,r3
100089cc:	e00b883a 	mov	r5,fp
100089d0:	da000115 	stw	r8,4(sp)
100089d4:	d8c00015 	stw	r3,0(sp)
100089d8:	00099ac0 	call	100099ac <memmove>
100089dc:	d8c00017 	ldw	r3,0(sp)
100089e0:	80800017 	ldw	r2,0(r16)
100089e4:	a809883a 	mov	r4,r21
100089e8:	800b883a 	mov	r5,r16
100089ec:	10c5883a 	add	r2,r2,r3
100089f0:	80800015 	stw	r2,0(r16)
100089f4:	d8c00015 	stw	r3,0(sp)
100089f8:	0007d180 	call	10007d18 <_fflush_r>
100089fc:	d8c00017 	ldw	r3,0(sp)
10008a00:	da000117 	ldw	r8,4(sp)
10008a04:	103fc21e 	bne	r2,zero,10008910 <__alt_data_end+0xf8008910>
10008a08:	182d883a 	mov	r22,r3
10008a0c:	a5a9c83a 	sub	r20,r20,r22
10008a10:	a03fe11e 	bne	r20,zero,10008998 <__alt_data_end+0xf8008998>
10008a14:	a809883a 	mov	r4,r21
10008a18:	800b883a 	mov	r5,r16
10008a1c:	0007d180 	call	10007d18 <_fflush_r>
10008a20:	103fbb1e 	bne	r2,zero,10008910 <__alt_data_end+0xf8008910>
10008a24:	0011883a 	mov	r8,zero
10008a28:	003fdb06 	br	10008998 <__alt_data_end+0xf8008998>
10008a2c:	81000017 	ldw	r4,0(r16)
10008a30:	80800417 	ldw	r2,16(r16)
10008a34:	1100012e 	bgeu	r2,r4,10008a3c <__sfvwrite_r+0x304>
10008a38:	a4805a36 	bltu	r20,r18,10008ba4 <__sfvwrite_r+0x46c>
10008a3c:	81c00517 	ldw	r7,20(r16)
10008a40:	91c01a36 	bltu	r18,r7,10008aac <__sfvwrite_r+0x374>
10008a44:	80800917 	ldw	r2,36(r16)
10008a48:	81400717 	ldw	r5,28(r16)
10008a4c:	a809883a 	mov	r4,r21
10008a50:	b80d883a 	mov	r6,r23
10008a54:	103ee83a 	callr	r2
10008a58:	1029883a 	mov	r20,r2
10008a5c:	00bfac0e 	bge	zero,r2,10008910 <__alt_data_end+0xf8008910>
10008a60:	a005883a 	mov	r2,r20
10008a64:	003f9606 	br	100088c0 <__alt_data_end+0xf80088c0>
10008a68:	b80d883a 	mov	r6,r23
10008a6c:	e00b883a 	mov	r5,fp
10008a70:	da000115 	stw	r8,4(sp)
10008a74:	00099ac0 	call	100099ac <memmove>
10008a78:	80800217 	ldw	r2,8(r16)
10008a7c:	80c00017 	ldw	r3,0(r16)
10008a80:	da000117 	ldw	r8,4(sp)
10008a84:	15c5c83a 	sub	r2,r2,r23
10008a88:	1def883a 	add	r23,r3,r23
10008a8c:	80800215 	stw	r2,8(r16)
10008a90:	85c00015 	stw	r23,0(r16)
10008a94:	003fbe06 	br	10008990 <__alt_data_end+0xf8008990>
10008a98:	81000017 	ldw	r4,0(r16)
10008a9c:	9039883a 	mov	fp,r18
10008aa0:	9029883a 	mov	r20,r18
10008aa4:	902d883a 	mov	r22,r18
10008aa8:	003f7b06 	br	10008898 <__alt_data_end+0xf8008898>
10008aac:	b80b883a 	mov	r5,r23
10008ab0:	900d883a 	mov	r6,r18
10008ab4:	00099ac0 	call	100099ac <memmove>
10008ab8:	80c00217 	ldw	r3,8(r16)
10008abc:	80800017 	ldw	r2,0(r16)
10008ac0:	9029883a 	mov	r20,r18
10008ac4:	1c87c83a 	sub	r3,r3,r18
10008ac8:	1485883a 	add	r2,r2,r18
10008acc:	80800015 	stw	r2,0(r16)
10008ad0:	80c00215 	stw	r3,8(r16)
10008ad4:	9005883a 	mov	r2,r18
10008ad8:	003f7906 	br	100088c0 <__alt_data_end+0xf80088c0>
10008adc:	e009883a 	mov	r4,fp
10008ae0:	01400284 	movi	r5,10
10008ae4:	900d883a 	mov	r6,r18
10008ae8:	000978c0 	call	1000978c <memchr>
10008aec:	10003826 	beq	r2,zero,10008bd0 <__sfvwrite_r+0x498>
10008af0:	10800044 	addi	r2,r2,1
10008af4:	1729c83a 	sub	r20,r2,fp
10008af8:	02000044 	movi	r8,1
10008afc:	003f8f06 	br	1000893c <__alt_data_end+0xf800893c>
10008b00:	80800517 	ldw	r2,20(r16)
10008b04:	81400417 	ldw	r5,16(r16)
10008b08:	87000017 	ldw	fp,0(r16)
10008b0c:	10a9883a 	add	r20,r2,r2
10008b10:	a085883a 	add	r2,r20,r2
10008b14:	1028d7fa 	srli	r20,r2,31
10008b18:	e179c83a 	sub	fp,fp,r5
10008b1c:	e1000044 	addi	r4,fp,1
10008b20:	a085883a 	add	r2,r20,r2
10008b24:	1029d07a 	srai	r20,r2,1
10008b28:	2485883a 	add	r2,r4,r18
10008b2c:	a00d883a 	mov	r6,r20
10008b30:	a080022e 	bgeu	r20,r2,10008b3c <__sfvwrite_r+0x404>
10008b34:	1029883a 	mov	r20,r2
10008b38:	100d883a 	mov	r6,r2
10008b3c:	18c1000c 	andi	r3,r3,1024
10008b40:	a809883a 	mov	r4,r21
10008b44:	183f6a26 	beq	r3,zero,100088f0 <__alt_data_end+0xf80088f0>
10008b48:	300b883a 	mov	r5,r6
10008b4c:	0008fe40 	call	10008fe4 <_malloc_r>
10008b50:	102d883a 	mov	r22,r2
10008b54:	103f6c26 	beq	r2,zero,10008908 <__alt_data_end+0xf8008908>
10008b58:	81400417 	ldw	r5,16(r16)
10008b5c:	1009883a 	mov	r4,r2
10008b60:	e00d883a 	mov	r6,fp
10008b64:	00098740 	call	10009874 <memcpy>
10008b68:	8080030b 	ldhu	r2,12(r16)
10008b6c:	00fedfc4 	movi	r3,-1153
10008b70:	10c4703a 	and	r2,r2,r3
10008b74:	10802014 	ori	r2,r2,128
10008b78:	8080030d 	sth	r2,12(r16)
10008b7c:	b709883a 	add	r4,r22,fp
10008b80:	a707c83a 	sub	r3,r20,fp
10008b84:	85800415 	stw	r22,16(r16)
10008b88:	85000515 	stw	r20,20(r16)
10008b8c:	81000015 	stw	r4,0(r16)
10008b90:	9039883a 	mov	fp,r18
10008b94:	80c00215 	stw	r3,8(r16)
10008b98:	9029883a 	mov	r20,r18
10008b9c:	902d883a 	mov	r22,r18
10008ba0:	003f3d06 	br	10008898 <__alt_data_end+0xf8008898>
10008ba4:	b80b883a 	mov	r5,r23
10008ba8:	a00d883a 	mov	r6,r20
10008bac:	00099ac0 	call	100099ac <memmove>
10008bb0:	80800017 	ldw	r2,0(r16)
10008bb4:	a809883a 	mov	r4,r21
10008bb8:	800b883a 	mov	r5,r16
10008bbc:	1505883a 	add	r2,r2,r20
10008bc0:	80800015 	stw	r2,0(r16)
10008bc4:	0007d180 	call	10007d18 <_fflush_r>
10008bc8:	103fa526 	beq	r2,zero,10008a60 <__alt_data_end+0xf8008a60>
10008bcc:	003f5006 	br	10008910 <__alt_data_end+0xf8008910>
10008bd0:	95000044 	addi	r20,r18,1
10008bd4:	02000044 	movi	r8,1
10008bd8:	003f5806 	br	1000893c <__alt_data_end+0xf800893c>

10008bdc <_fwalk>:
10008bdc:	defff804 	addi	sp,sp,-32
10008be0:	dd400515 	stw	r21,20(sp)
10008be4:	2540b804 	addi	r21,r4,736
10008be8:	dd800615 	stw	r22,24(sp)
10008bec:	dd000415 	stw	r20,16(sp)
10008bf0:	dfc00715 	stw	ra,28(sp)
10008bf4:	dcc00315 	stw	r19,12(sp)
10008bf8:	dc800215 	stw	r18,8(sp)
10008bfc:	dc400115 	stw	r17,4(sp)
10008c00:	dc000015 	stw	r16,0(sp)
10008c04:	2829883a 	mov	r20,r5
10008c08:	002d883a 	mov	r22,zero
10008c0c:	00082e40 	call	100082e4 <__sfp_lock_acquire>
10008c10:	a8001426 	beq	r21,zero,10008c64 <_fwalk+0x88>
10008c14:	04ffffc4 	movi	r19,-1
10008c18:	ac400117 	ldw	r17,4(r21)
10008c1c:	ac800217 	ldw	r18,8(r21)
10008c20:	8c7fffc4 	addi	r17,r17,-1
10008c24:	88000d16 	blt	r17,zero,10008c5c <_fwalk+0x80>
10008c28:	94000304 	addi	r16,r18,12
10008c2c:	94800384 	addi	r18,r18,14
10008c30:	80c0000f 	ldh	r3,0(r16)
10008c34:	8c7fffc4 	addi	r17,r17,-1
10008c38:	813ffd04 	addi	r4,r16,-12
10008c3c:	18000426 	beq	r3,zero,10008c50 <_fwalk+0x74>
10008c40:	90c0000f 	ldh	r3,0(r18)
10008c44:	1cc00226 	beq	r3,r19,10008c50 <_fwalk+0x74>
10008c48:	a03ee83a 	callr	r20
10008c4c:	b0acb03a 	or	r22,r22,r2
10008c50:	84001a04 	addi	r16,r16,104
10008c54:	94801a04 	addi	r18,r18,104
10008c58:	8cfff51e 	bne	r17,r19,10008c30 <__alt_data_end+0xf8008c30>
10008c5c:	ad400017 	ldw	r21,0(r21)
10008c60:	a83fed1e 	bne	r21,zero,10008c18 <__alt_data_end+0xf8008c18>
10008c64:	00082e80 	call	100082e8 <__sfp_lock_release>
10008c68:	b005883a 	mov	r2,r22
10008c6c:	dfc00717 	ldw	ra,28(sp)
10008c70:	dd800617 	ldw	r22,24(sp)
10008c74:	dd400517 	ldw	r21,20(sp)
10008c78:	dd000417 	ldw	r20,16(sp)
10008c7c:	dcc00317 	ldw	r19,12(sp)
10008c80:	dc800217 	ldw	r18,8(sp)
10008c84:	dc400117 	ldw	r17,4(sp)
10008c88:	dc000017 	ldw	r16,0(sp)
10008c8c:	dec00804 	addi	sp,sp,32
10008c90:	f800283a 	ret

10008c94 <_fwalk_reent>:
10008c94:	defff804 	addi	sp,sp,-32
10008c98:	dd400515 	stw	r21,20(sp)
10008c9c:	2540b804 	addi	r21,r4,736
10008ca0:	dd800615 	stw	r22,24(sp)
10008ca4:	dd000415 	stw	r20,16(sp)
10008ca8:	dcc00315 	stw	r19,12(sp)
10008cac:	dfc00715 	stw	ra,28(sp)
10008cb0:	dc800215 	stw	r18,8(sp)
10008cb4:	dc400115 	stw	r17,4(sp)
10008cb8:	dc000015 	stw	r16,0(sp)
10008cbc:	2027883a 	mov	r19,r4
10008cc0:	2829883a 	mov	r20,r5
10008cc4:	002d883a 	mov	r22,zero
10008cc8:	00082e40 	call	100082e4 <__sfp_lock_acquire>
10008ccc:	a8001326 	beq	r21,zero,10008d1c <_fwalk_reent+0x88>
10008cd0:	04bfffc4 	movi	r18,-1
10008cd4:	ac400117 	ldw	r17,4(r21)
10008cd8:	ac000217 	ldw	r16,8(r21)
10008cdc:	8c7fffc4 	addi	r17,r17,-1
10008ce0:	88000c16 	blt	r17,zero,10008d14 <_fwalk_reent+0x80>
10008ce4:	84000304 	addi	r16,r16,12
10008ce8:	80c0000f 	ldh	r3,0(r16)
10008cec:	8c7fffc4 	addi	r17,r17,-1
10008cf0:	817ffd04 	addi	r5,r16,-12
10008cf4:	18000526 	beq	r3,zero,10008d0c <_fwalk_reent+0x78>
10008cf8:	80c0008f 	ldh	r3,2(r16)
10008cfc:	9809883a 	mov	r4,r19
10008d00:	1c800226 	beq	r3,r18,10008d0c <_fwalk_reent+0x78>
10008d04:	a03ee83a 	callr	r20
10008d08:	b0acb03a 	or	r22,r22,r2
10008d0c:	84001a04 	addi	r16,r16,104
10008d10:	8cbff51e 	bne	r17,r18,10008ce8 <__alt_data_end+0xf8008ce8>
10008d14:	ad400017 	ldw	r21,0(r21)
10008d18:	a83fee1e 	bne	r21,zero,10008cd4 <__alt_data_end+0xf8008cd4>
10008d1c:	00082e80 	call	100082e8 <__sfp_lock_release>
10008d20:	b005883a 	mov	r2,r22
10008d24:	dfc00717 	ldw	ra,28(sp)
10008d28:	dd800617 	ldw	r22,24(sp)
10008d2c:	dd400517 	ldw	r21,20(sp)
10008d30:	dd000417 	ldw	r20,16(sp)
10008d34:	dcc00317 	ldw	r19,12(sp)
10008d38:	dc800217 	ldw	r18,8(sp)
10008d3c:	dc400117 	ldw	r17,4(sp)
10008d40:	dc000017 	ldw	r16,0(sp)
10008d44:	dec00804 	addi	sp,sp,32
10008d48:	f800283a 	ret

10008d4c <_setlocale_r>:
10008d4c:	30001b26 	beq	r6,zero,10008dbc <_setlocale_r+0x70>
10008d50:	01440074 	movhi	r5,4097
10008d54:	defffe04 	addi	sp,sp,-8
10008d58:	2944c404 	addi	r5,r5,4880
10008d5c:	3009883a 	mov	r4,r6
10008d60:	dc000015 	stw	r16,0(sp)
10008d64:	dfc00115 	stw	ra,4(sp)
10008d68:	3021883a 	mov	r16,r6
10008d6c:	000b4180 	call	1000b418 <strcmp>
10008d70:	1000061e 	bne	r2,zero,10008d8c <_setlocale_r+0x40>
10008d74:	00840074 	movhi	r2,4097
10008d78:	1084c304 	addi	r2,r2,4876
10008d7c:	dfc00117 	ldw	ra,4(sp)
10008d80:	dc000017 	ldw	r16,0(sp)
10008d84:	dec00204 	addi	sp,sp,8
10008d88:	f800283a 	ret
10008d8c:	01440074 	movhi	r5,4097
10008d90:	2944c304 	addi	r5,r5,4876
10008d94:	8009883a 	mov	r4,r16
10008d98:	000b4180 	call	1000b418 <strcmp>
10008d9c:	103ff526 	beq	r2,zero,10008d74 <__alt_data_end+0xf8008d74>
10008da0:	01440074 	movhi	r5,4097
10008da4:	2944ae04 	addi	r5,r5,4792
10008da8:	8009883a 	mov	r4,r16
10008dac:	000b4180 	call	1000b418 <strcmp>
10008db0:	103ff026 	beq	r2,zero,10008d74 <__alt_data_end+0xf8008d74>
10008db4:	0005883a 	mov	r2,zero
10008db8:	003ff006 	br	10008d7c <__alt_data_end+0xf8008d7c>
10008dbc:	00840074 	movhi	r2,4097
10008dc0:	1084c304 	addi	r2,r2,4876
10008dc4:	f800283a 	ret

10008dc8 <__locale_charset>:
10008dc8:	00840074 	movhi	r2,4097
10008dcc:	10863604 	addi	r2,r2,6360
10008dd0:	f800283a 	ret

10008dd4 <__locale_mb_cur_max>:
10008dd4:	00840074 	movhi	r2,4097
10008dd8:	108bd204 	addi	r2,r2,12104
10008ddc:	10800017 	ldw	r2,0(r2)
10008de0:	f800283a 	ret

10008de4 <__locale_msgcharset>:
10008de4:	00840074 	movhi	r2,4097
10008de8:	10862e04 	addi	r2,r2,6328
10008dec:	f800283a 	ret

10008df0 <__locale_cjk_lang>:
10008df0:	0005883a 	mov	r2,zero
10008df4:	f800283a 	ret

10008df8 <_localeconv_r>:
10008df8:	00840074 	movhi	r2,4097
10008dfc:	10863e04 	addi	r2,r2,6392
10008e00:	f800283a 	ret

10008e04 <setlocale>:
10008e04:	00c40074 	movhi	r3,4097
10008e08:	18cbd104 	addi	r3,r3,12100
10008e0c:	2005883a 	mov	r2,r4
10008e10:	19000017 	ldw	r4,0(r3)
10008e14:	280d883a 	mov	r6,r5
10008e18:	100b883a 	mov	r5,r2
10008e1c:	0008d4c1 	jmpi	10008d4c <_setlocale_r>

10008e20 <localeconv>:
10008e20:	00840074 	movhi	r2,4097
10008e24:	10863e04 	addi	r2,r2,6392
10008e28:	f800283a 	ret

10008e2c <__smakebuf_r>:
10008e2c:	2880030b 	ldhu	r2,12(r5)
10008e30:	10c0008c 	andi	r3,r2,2
10008e34:	1800401e 	bne	r3,zero,10008f38 <__smakebuf_r+0x10c>
10008e38:	deffec04 	addi	sp,sp,-80
10008e3c:	dc000f15 	stw	r16,60(sp)
10008e40:	2821883a 	mov	r16,r5
10008e44:	2940038f 	ldh	r5,14(r5)
10008e48:	dc401015 	stw	r17,64(sp)
10008e4c:	dfc01315 	stw	ra,76(sp)
10008e50:	dcc01215 	stw	r19,72(sp)
10008e54:	dc801115 	stw	r18,68(sp)
10008e58:	2023883a 	mov	r17,r4
10008e5c:	28001b16 	blt	r5,zero,10008ecc <__smakebuf_r+0xa0>
10008e60:	d80d883a 	mov	r6,sp
10008e64:	000ce900 	call	1000ce90 <_fstat_r>
10008e68:	10001716 	blt	r2,zero,10008ec8 <__smakebuf_r+0x9c>
10008e6c:	d8800117 	ldw	r2,4(sp)
10008e70:	00e00014 	movui	r3,32768
10008e74:	10bc000c 	andi	r2,r2,61440
10008e78:	10c03726 	beq	r2,r3,10008f58 <__smakebuf_r+0x12c>
10008e7c:	80c0030b 	ldhu	r3,12(r16)
10008e80:	18c20014 	ori	r3,r3,2048
10008e84:	80c0030d 	sth	r3,12(r16)
10008e88:	00c80004 	movi	r3,8192
10008e8c:	10c03c1e 	bne	r2,r3,10008f80 <__smakebuf_r+0x154>
10008e90:	8140038f 	ldh	r5,14(r16)
10008e94:	8809883a 	mov	r4,r17
10008e98:	000cee80 	call	1000cee8 <_isatty_r>
10008e9c:	10004e26 	beq	r2,zero,10008fd8 <__smakebuf_r+0x1ac>
10008ea0:	8080030b 	ldhu	r2,12(r16)
10008ea4:	04c00044 	movi	r19,1
10008ea8:	80c010c4 	addi	r3,r16,67
10008eac:	14c4b03a 	or	r2,r2,r19
10008eb0:	8080030d 	sth	r2,12(r16)
10008eb4:	80c00015 	stw	r3,0(r16)
10008eb8:	80c00415 	stw	r3,16(r16)
10008ebc:	84c00515 	stw	r19,20(r16)
10008ec0:	04810004 	movi	r18,1024
10008ec4:	00000706 	br	10008ee4 <__smakebuf_r+0xb8>
10008ec8:	8080030b 	ldhu	r2,12(r16)
10008ecc:	10c0200c 	andi	r3,r2,128
10008ed0:	18001f1e 	bne	r3,zero,10008f50 <__smakebuf_r+0x124>
10008ed4:	04810004 	movi	r18,1024
10008ed8:	10820014 	ori	r2,r2,2048
10008edc:	8080030d 	sth	r2,12(r16)
10008ee0:	0027883a 	mov	r19,zero
10008ee4:	8809883a 	mov	r4,r17
10008ee8:	900b883a 	mov	r5,r18
10008eec:	0008fe40 	call	10008fe4 <_malloc_r>
10008ef0:	10002e26 	beq	r2,zero,10008fac <__smakebuf_r+0x180>
10008ef4:	80c0030b 	ldhu	r3,12(r16)
10008ef8:	01040034 	movhi	r4,4096
10008efc:	211fe004 	addi	r4,r4,32640
10008f00:	89000f15 	stw	r4,60(r17)
10008f04:	18c02014 	ori	r3,r3,128
10008f08:	80c0030d 	sth	r3,12(r16)
10008f0c:	80800015 	stw	r2,0(r16)
10008f10:	80800415 	stw	r2,16(r16)
10008f14:	84800515 	stw	r18,20(r16)
10008f18:	98001c1e 	bne	r19,zero,10008f8c <__smakebuf_r+0x160>
10008f1c:	dfc01317 	ldw	ra,76(sp)
10008f20:	dcc01217 	ldw	r19,72(sp)
10008f24:	dc801117 	ldw	r18,68(sp)
10008f28:	dc401017 	ldw	r17,64(sp)
10008f2c:	dc000f17 	ldw	r16,60(sp)
10008f30:	dec01404 	addi	sp,sp,80
10008f34:	f800283a 	ret
10008f38:	288010c4 	addi	r2,r5,67
10008f3c:	28800015 	stw	r2,0(r5)
10008f40:	28800415 	stw	r2,16(r5)
10008f44:	00800044 	movi	r2,1
10008f48:	28800515 	stw	r2,20(r5)
10008f4c:	f800283a 	ret
10008f50:	04801004 	movi	r18,64
10008f54:	003fe006 	br	10008ed8 <__alt_data_end+0xf8008ed8>
10008f58:	81000a17 	ldw	r4,40(r16)
10008f5c:	00c40074 	movhi	r3,4097
10008f60:	18eced04 	addi	r3,r3,-19532
10008f64:	20ffc51e 	bne	r4,r3,10008e7c <__alt_data_end+0xf8008e7c>
10008f68:	80c0030b 	ldhu	r3,12(r16)
10008f6c:	01010004 	movi	r4,1024
10008f70:	81001315 	stw	r4,76(r16)
10008f74:	1906b03a 	or	r3,r3,r4
10008f78:	80c0030d 	sth	r3,12(r16)
10008f7c:	003fc206 	br	10008e88 <__alt_data_end+0xf8008e88>
10008f80:	0027883a 	mov	r19,zero
10008f84:	04810004 	movi	r18,1024
10008f88:	003fd606 	br	10008ee4 <__alt_data_end+0xf8008ee4>
10008f8c:	8140038f 	ldh	r5,14(r16)
10008f90:	8809883a 	mov	r4,r17
10008f94:	000cee80 	call	1000cee8 <_isatty_r>
10008f98:	103fe026 	beq	r2,zero,10008f1c <__alt_data_end+0xf8008f1c>
10008f9c:	8080030b 	ldhu	r2,12(r16)
10008fa0:	10800054 	ori	r2,r2,1
10008fa4:	8080030d 	sth	r2,12(r16)
10008fa8:	003fdc06 	br	10008f1c <__alt_data_end+0xf8008f1c>
10008fac:	8080030b 	ldhu	r2,12(r16)
10008fb0:	10c0800c 	andi	r3,r2,512
10008fb4:	183fd91e 	bne	r3,zero,10008f1c <__alt_data_end+0xf8008f1c>
10008fb8:	10800094 	ori	r2,r2,2
10008fbc:	80c010c4 	addi	r3,r16,67
10008fc0:	8080030d 	sth	r2,12(r16)
10008fc4:	00800044 	movi	r2,1
10008fc8:	80c00015 	stw	r3,0(r16)
10008fcc:	80c00415 	stw	r3,16(r16)
10008fd0:	80800515 	stw	r2,20(r16)
10008fd4:	003fd106 	br	10008f1c <__alt_data_end+0xf8008f1c>
10008fd8:	04c00044 	movi	r19,1
10008fdc:	04810004 	movi	r18,1024
10008fe0:	003fc006 	br	10008ee4 <__alt_data_end+0xf8008ee4>

10008fe4 <_malloc_r>:
10008fe4:	defff504 	addi	sp,sp,-44
10008fe8:	dc800315 	stw	r18,12(sp)
10008fec:	dfc00a15 	stw	ra,40(sp)
10008ff0:	df000915 	stw	fp,36(sp)
10008ff4:	ddc00815 	stw	r23,32(sp)
10008ff8:	dd800715 	stw	r22,28(sp)
10008ffc:	dd400615 	stw	r21,24(sp)
10009000:	dd000515 	stw	r20,20(sp)
10009004:	dcc00415 	stw	r19,16(sp)
10009008:	dc400215 	stw	r17,8(sp)
1000900c:	dc000115 	stw	r16,4(sp)
10009010:	288002c4 	addi	r2,r5,11
10009014:	00c00584 	movi	r3,22
10009018:	2025883a 	mov	r18,r4
1000901c:	18802a2e 	bgeu	r3,r2,100090c8 <_malloc_r+0xe4>
10009020:	047ffe04 	movi	r17,-8
10009024:	1462703a 	and	r17,r2,r17
10009028:	88009e16 	blt	r17,zero,100092a4 <_malloc_r+0x2c0>
1000902c:	89409d36 	bltu	r17,r5,100092a4 <_malloc_r+0x2c0>
10009030:	000ef240 	call	1000ef24 <__malloc_lock>
10009034:	00807dc4 	movi	r2,503
10009038:	14402736 	bltu	r2,r17,100090d8 <_malloc_r+0xf4>
1000903c:	8806d0fa 	srli	r3,r17,3
10009040:	04c40074 	movhi	r19,4097
10009044:	9cc64c04 	addi	r19,r19,6448
10009048:	18c5883a 	add	r2,r3,r3
1000904c:	1085883a 	add	r2,r2,r2
10009050:	1085883a 	add	r2,r2,r2
10009054:	9885883a 	add	r2,r19,r2
10009058:	14000317 	ldw	r16,12(r2)
1000905c:	80814a26 	beq	r16,r2,10009588 <_malloc_r+0x5a4>
10009060:	80c00117 	ldw	r3,4(r16)
10009064:	81000317 	ldw	r4,12(r16)
10009068:	00bfff04 	movi	r2,-4
1000906c:	1884703a 	and	r2,r3,r2
10009070:	81400217 	ldw	r5,8(r16)
10009074:	8085883a 	add	r2,r16,r2
10009078:	10c00117 	ldw	r3,4(r2)
1000907c:	29000315 	stw	r4,12(r5)
10009080:	21400215 	stw	r5,8(r4)
10009084:	18c00054 	ori	r3,r3,1
10009088:	10c00115 	stw	r3,4(r2)
1000908c:	9009883a 	mov	r4,r18
10009090:	000ef440 	call	1000ef44 <__malloc_unlock>
10009094:	80800204 	addi	r2,r16,8
10009098:	dfc00a17 	ldw	ra,40(sp)
1000909c:	df000917 	ldw	fp,36(sp)
100090a0:	ddc00817 	ldw	r23,32(sp)
100090a4:	dd800717 	ldw	r22,28(sp)
100090a8:	dd400617 	ldw	r21,24(sp)
100090ac:	dd000517 	ldw	r20,20(sp)
100090b0:	dcc00417 	ldw	r19,16(sp)
100090b4:	dc800317 	ldw	r18,12(sp)
100090b8:	dc400217 	ldw	r17,8(sp)
100090bc:	dc000117 	ldw	r16,4(sp)
100090c0:	dec00b04 	addi	sp,sp,44
100090c4:	f800283a 	ret
100090c8:	04400404 	movi	r17,16
100090cc:	89407536 	bltu	r17,r5,100092a4 <_malloc_r+0x2c0>
100090d0:	000ef240 	call	1000ef24 <__malloc_lock>
100090d4:	003fd906 	br	1000903c <__alt_data_end+0xf800903c>
100090d8:	8806d27a 	srli	r3,r17,9
100090dc:	18007526 	beq	r3,zero,100092b4 <_malloc_r+0x2d0>
100090e0:	00800104 	movi	r2,4
100090e4:	10c0ef36 	bltu	r2,r3,100094a4 <_malloc_r+0x4c0>
100090e8:	8806d1ba 	srli	r3,r17,6
100090ec:	19c00e04 	addi	r7,r3,56
100090f0:	39cb883a 	add	r5,r7,r7
100090f4:	04c40074 	movhi	r19,4097
100090f8:	294b883a 	add	r5,r5,r5
100090fc:	9cc64c04 	addi	r19,r19,6448
10009100:	294b883a 	add	r5,r5,r5
10009104:	994b883a 	add	r5,r19,r5
10009108:	2c000317 	ldw	r16,12(r5)
1000910c:	2c000e26 	beq	r5,r16,10009148 <_malloc_r+0x164>
10009110:	80800117 	ldw	r2,4(r16)
10009114:	01bfff04 	movi	r6,-4
10009118:	010003c4 	movi	r4,15
1000911c:	1184703a 	and	r2,r2,r6
10009120:	1447c83a 	sub	r3,r2,r17
10009124:	20c00716 	blt	r4,r3,10009144 <_malloc_r+0x160>
10009128:	1800650e 	bge	r3,zero,100092c0 <_malloc_r+0x2dc>
1000912c:	84000317 	ldw	r16,12(r16)
10009130:	2c000526 	beq	r5,r16,10009148 <_malloc_r+0x164>
10009134:	80800117 	ldw	r2,4(r16)
10009138:	1184703a 	and	r2,r2,r6
1000913c:	1447c83a 	sub	r3,r2,r17
10009140:	20fff90e 	bge	r4,r3,10009128 <__alt_data_end+0xf8009128>
10009144:	39ffffc4 	addi	r7,r7,-1
10009148:	38c00044 	addi	r3,r7,1
1000914c:	01840074 	movhi	r6,4097
10009150:	9c000417 	ldw	r16,16(r19)
10009154:	31864c04 	addi	r6,r6,6448
10009158:	32400204 	addi	r9,r6,8
1000915c:	82410326 	beq	r16,r9,1000956c <_malloc_r+0x588>
10009160:	81000117 	ldw	r4,4(r16)
10009164:	00bfff04 	movi	r2,-4
10009168:	208e703a 	and	r7,r4,r2
1000916c:	3c45c83a 	sub	r2,r7,r17
10009170:	010003c4 	movi	r4,15
10009174:	2080ee16 	blt	r4,r2,10009530 <_malloc_r+0x54c>
10009178:	32400515 	stw	r9,20(r6)
1000917c:	32400415 	stw	r9,16(r6)
10009180:	1000510e 	bge	r2,zero,100092c8 <_malloc_r+0x2e4>
10009184:	00807fc4 	movi	r2,511
10009188:	11c0ce36 	bltu	r2,r7,100094c4 <_malloc_r+0x4e0>
1000918c:	3808d0fa 	srli	r4,r7,3
10009190:	01c00044 	movi	r7,1
10009194:	30800117 	ldw	r2,4(r6)
10009198:	210b883a 	add	r5,r4,r4
1000919c:	294b883a 	add	r5,r5,r5
100091a0:	2009d0ba 	srai	r4,r4,2
100091a4:	294b883a 	add	r5,r5,r5
100091a8:	298b883a 	add	r5,r5,r6
100091ac:	2a000217 	ldw	r8,8(r5)
100091b0:	3908983a 	sll	r4,r7,r4
100091b4:	81400315 	stw	r5,12(r16)
100091b8:	82000215 	stw	r8,8(r16)
100091bc:	2088b03a 	or	r4,r4,r2
100091c0:	2c000215 	stw	r16,8(r5)
100091c4:	31000115 	stw	r4,4(r6)
100091c8:	44000315 	stw	r16,12(r8)
100091cc:	1805d0ba 	srai	r2,r3,2
100091d0:	01400044 	movi	r5,1
100091d4:	288a983a 	sll	r5,r5,r2
100091d8:	21404336 	bltu	r4,r5,100092e8 <_malloc_r+0x304>
100091dc:	2144703a 	and	r2,r4,r5
100091e0:	10000a1e 	bne	r2,zero,1000920c <_malloc_r+0x228>
100091e4:	00bfff04 	movi	r2,-4
100091e8:	294b883a 	add	r5,r5,r5
100091ec:	1886703a 	and	r3,r3,r2
100091f0:	2144703a 	and	r2,r4,r5
100091f4:	18c00104 	addi	r3,r3,4
100091f8:	1000041e 	bne	r2,zero,1000920c <_malloc_r+0x228>
100091fc:	294b883a 	add	r5,r5,r5
10009200:	2144703a 	and	r2,r4,r5
10009204:	18c00104 	addi	r3,r3,4
10009208:	103ffc26 	beq	r2,zero,100091fc <__alt_data_end+0xf80091fc>
1000920c:	023fff04 	movi	r8,-4
10009210:	01c003c4 	movi	r7,15
10009214:	18c5883a 	add	r2,r3,r3
10009218:	1085883a 	add	r2,r2,r2
1000921c:	1085883a 	add	r2,r2,r2
10009220:	9895883a 	add	r10,r19,r2
10009224:	52c00304 	addi	r11,r10,12
10009228:	1819883a 	mov	r12,r3
1000922c:	5c000017 	ldw	r16,0(r11)
10009230:	59bffd04 	addi	r6,r11,-12
10009234:	8180041e 	bne	r16,r6,10009248 <_malloc_r+0x264>
10009238:	0000ce06 	br	10009574 <_malloc_r+0x590>
1000923c:	2000d70e 	bge	r4,zero,1000959c <_malloc_r+0x5b8>
10009240:	84000317 	ldw	r16,12(r16)
10009244:	8180cb26 	beq	r16,r6,10009574 <_malloc_r+0x590>
10009248:	80800117 	ldw	r2,4(r16)
1000924c:	1204703a 	and	r2,r2,r8
10009250:	1449c83a 	sub	r4,r2,r17
10009254:	393ff90e 	bge	r7,r4,1000923c <__alt_data_end+0xf800923c>
10009258:	80800317 	ldw	r2,12(r16)
1000925c:	80c00217 	ldw	r3,8(r16)
10009260:	89400054 	ori	r5,r17,1
10009264:	81400115 	stw	r5,4(r16)
10009268:	18800315 	stw	r2,12(r3)
1000926c:	10c00215 	stw	r3,8(r2)
10009270:	8463883a 	add	r17,r16,r17
10009274:	9c400515 	stw	r17,20(r19)
10009278:	9c400415 	stw	r17,16(r19)
1000927c:	20800054 	ori	r2,r4,1
10009280:	88800115 	stw	r2,4(r17)
10009284:	8a400315 	stw	r9,12(r17)
10009288:	8a400215 	stw	r9,8(r17)
1000928c:	8923883a 	add	r17,r17,r4
10009290:	89000015 	stw	r4,0(r17)
10009294:	9009883a 	mov	r4,r18
10009298:	000ef440 	call	1000ef44 <__malloc_unlock>
1000929c:	80800204 	addi	r2,r16,8
100092a0:	003f7d06 	br	10009098 <__alt_data_end+0xf8009098>
100092a4:	00800304 	movi	r2,12
100092a8:	90800015 	stw	r2,0(r18)
100092ac:	0005883a 	mov	r2,zero
100092b0:	003f7906 	br	10009098 <__alt_data_end+0xf8009098>
100092b4:	01401f84 	movi	r5,126
100092b8:	01c00fc4 	movi	r7,63
100092bc:	003f8d06 	br	100090f4 <__alt_data_end+0xf80090f4>
100092c0:	81000317 	ldw	r4,12(r16)
100092c4:	003f6a06 	br	10009070 <__alt_data_end+0xf8009070>
100092c8:	81c5883a 	add	r2,r16,r7
100092cc:	10c00117 	ldw	r3,4(r2)
100092d0:	9009883a 	mov	r4,r18
100092d4:	18c00054 	ori	r3,r3,1
100092d8:	10c00115 	stw	r3,4(r2)
100092dc:	000ef440 	call	1000ef44 <__malloc_unlock>
100092e0:	80800204 	addi	r2,r16,8
100092e4:	003f6c06 	br	10009098 <__alt_data_end+0xf8009098>
100092e8:	9c000217 	ldw	r16,8(r19)
100092ec:	00bfff04 	movi	r2,-4
100092f0:	85800117 	ldw	r22,4(r16)
100092f4:	b0ac703a 	and	r22,r22,r2
100092f8:	b4400336 	bltu	r22,r17,10009308 <_malloc_r+0x324>
100092fc:	b445c83a 	sub	r2,r22,r17
10009300:	00c003c4 	movi	r3,15
10009304:	18805d16 	blt	r3,r2,1000947c <_malloc_r+0x498>
10009308:	05c40074 	movhi	r23,4097
1000930c:	00840074 	movhi	r2,4097
10009310:	bdcbd304 	addi	r23,r23,12108
10009314:	1092af04 	addi	r2,r2,19132
10009318:	15400017 	ldw	r21,0(r2)
1000931c:	b9000017 	ldw	r4,0(r23)
10009320:	00ffffc4 	movi	r3,-1
10009324:	858d883a 	add	r6,r16,r22
10009328:	8d6b883a 	add	r21,r17,r21
1000932c:	20c0e426 	beq	r4,r3,100096c0 <_malloc_r+0x6dc>
10009330:	ad4403c4 	addi	r21,r21,4111
10009334:	00fc0004 	movi	r3,-4096
10009338:	a8ea703a 	and	r21,r21,r3
1000933c:	9009883a 	mov	r4,r18
10009340:	a80b883a 	mov	r5,r21
10009344:	d9800015 	stw	r6,0(sp)
10009348:	000b2880 	call	1000b288 <_sbrk_r>
1000934c:	00ffffc4 	movi	r3,-1
10009350:	1029883a 	mov	r20,r2
10009354:	d9800017 	ldw	r6,0(sp)
10009358:	10c0a426 	beq	r2,r3,100095ec <_malloc_r+0x608>
1000935c:	1180a236 	bltu	r2,r6,100095e8 <_malloc_r+0x604>
10009360:	07040074 	movhi	fp,4097
10009364:	e712b804 	addi	fp,fp,19168
10009368:	e0c00017 	ldw	r3,0(fp)
1000936c:	a8c7883a 	add	r3,r21,r3
10009370:	e0c00015 	stw	r3,0(fp)
10009374:	3500da26 	beq	r6,r20,100096e0 <_malloc_r+0x6fc>
10009378:	b9000017 	ldw	r4,0(r23)
1000937c:	00bfffc4 	movi	r2,-1
10009380:	2080e426 	beq	r4,r2,10009714 <_malloc_r+0x730>
10009384:	a185c83a 	sub	r2,r20,r6
10009388:	1885883a 	add	r2,r3,r2
1000938c:	e0800015 	stw	r2,0(fp)
10009390:	a0c001cc 	andi	r3,r20,7
10009394:	1800b526 	beq	r3,zero,1000966c <_malloc_r+0x688>
10009398:	a0e9c83a 	sub	r20,r20,r3
1000939c:	00840204 	movi	r2,4104
100093a0:	a5000204 	addi	r20,r20,8
100093a4:	10c7c83a 	sub	r3,r2,r3
100093a8:	a545883a 	add	r2,r20,r21
100093ac:	1083ffcc 	andi	r2,r2,4095
100093b0:	18abc83a 	sub	r21,r3,r2
100093b4:	9009883a 	mov	r4,r18
100093b8:	a80b883a 	mov	r5,r21
100093bc:	000b2880 	call	1000b288 <_sbrk_r>
100093c0:	00ffffc4 	movi	r3,-1
100093c4:	10c0d026 	beq	r2,r3,10009708 <_malloc_r+0x724>
100093c8:	1507c83a 	sub	r3,r2,r20
100093cc:	a8c7883a 	add	r3,r21,r3
100093d0:	18c00054 	ori	r3,r3,1
100093d4:	e0800017 	ldw	r2,0(fp)
100093d8:	9d000215 	stw	r20,8(r19)
100093dc:	a0c00115 	stw	r3,4(r20)
100093e0:	a887883a 	add	r3,r21,r2
100093e4:	e0c00015 	stw	r3,0(fp)
100093e8:	84c00e26 	beq	r16,r19,10009424 <_malloc_r+0x440>
100093ec:	018003c4 	movi	r6,15
100093f0:	3580a02e 	bgeu	r6,r22,10009674 <_malloc_r+0x690>
100093f4:	81400117 	ldw	r5,4(r16)
100093f8:	013ffe04 	movi	r4,-8
100093fc:	b0bffd04 	addi	r2,r22,-12
10009400:	1104703a 	and	r2,r2,r4
10009404:	2900004c 	andi	r4,r5,1
10009408:	1108b03a 	or	r4,r2,r4
1000940c:	81000115 	stw	r4,4(r16)
10009410:	01400144 	movi	r5,5
10009414:	8089883a 	add	r4,r16,r2
10009418:	21400115 	stw	r5,4(r4)
1000941c:	21400215 	stw	r5,8(r4)
10009420:	3080c036 	bltu	r6,r2,10009724 <_malloc_r+0x740>
10009424:	00840074 	movhi	r2,4097
10009428:	1092ae04 	addi	r2,r2,19128
1000942c:	11000017 	ldw	r4,0(r2)
10009430:	20c0012e 	bgeu	r4,r3,10009438 <_malloc_r+0x454>
10009434:	10c00015 	stw	r3,0(r2)
10009438:	00840074 	movhi	r2,4097
1000943c:	1092ad04 	addi	r2,r2,19124
10009440:	11000017 	ldw	r4,0(r2)
10009444:	9c000217 	ldw	r16,8(r19)
10009448:	20c0012e 	bgeu	r4,r3,10009450 <_malloc_r+0x46c>
1000944c:	10c00015 	stw	r3,0(r2)
10009450:	80c00117 	ldw	r3,4(r16)
10009454:	00bfff04 	movi	r2,-4
10009458:	1886703a 	and	r3,r3,r2
1000945c:	1c45c83a 	sub	r2,r3,r17
10009460:	1c400236 	bltu	r3,r17,1000946c <_malloc_r+0x488>
10009464:	00c003c4 	movi	r3,15
10009468:	18800416 	blt	r3,r2,1000947c <_malloc_r+0x498>
1000946c:	9009883a 	mov	r4,r18
10009470:	000ef440 	call	1000ef44 <__malloc_unlock>
10009474:	0005883a 	mov	r2,zero
10009478:	003f0706 	br	10009098 <__alt_data_end+0xf8009098>
1000947c:	88c00054 	ori	r3,r17,1
10009480:	80c00115 	stw	r3,4(r16)
10009484:	8463883a 	add	r17,r16,r17
10009488:	10800054 	ori	r2,r2,1
1000948c:	9c400215 	stw	r17,8(r19)
10009490:	88800115 	stw	r2,4(r17)
10009494:	9009883a 	mov	r4,r18
10009498:	000ef440 	call	1000ef44 <__malloc_unlock>
1000949c:	80800204 	addi	r2,r16,8
100094a0:	003efd06 	br	10009098 <__alt_data_end+0xf8009098>
100094a4:	00800504 	movi	r2,20
100094a8:	10c0482e 	bgeu	r2,r3,100095cc <_malloc_r+0x5e8>
100094ac:	00801504 	movi	r2,84
100094b0:	10c06836 	bltu	r2,r3,10009654 <_malloc_r+0x670>
100094b4:	8806d33a 	srli	r3,r17,12
100094b8:	19c01b84 	addi	r7,r3,110
100094bc:	39cb883a 	add	r5,r7,r7
100094c0:	003f0c06 	br	100090f4 <__alt_data_end+0xf80090f4>
100094c4:	3804d27a 	srli	r2,r7,9
100094c8:	01000104 	movi	r4,4
100094cc:	2080422e 	bgeu	r4,r2,100095d8 <_malloc_r+0x5f4>
100094d0:	01000504 	movi	r4,20
100094d4:	20807c36 	bltu	r4,r2,100096c8 <_malloc_r+0x6e4>
100094d8:	110016c4 	addi	r4,r2,91
100094dc:	210b883a 	add	r5,r4,r4
100094e0:	294b883a 	add	r5,r5,r5
100094e4:	294b883a 	add	r5,r5,r5
100094e8:	994b883a 	add	r5,r19,r5
100094ec:	28800217 	ldw	r2,8(r5)
100094f0:	02040074 	movhi	r8,4097
100094f4:	42064c04 	addi	r8,r8,6448
100094f8:	11406326 	beq	r2,r5,10009688 <_malloc_r+0x6a4>
100094fc:	01bfff04 	movi	r6,-4
10009500:	11000117 	ldw	r4,4(r2)
10009504:	2188703a 	and	r4,r4,r6
10009508:	3900022e 	bgeu	r7,r4,10009514 <_malloc_r+0x530>
1000950c:	10800217 	ldw	r2,8(r2)
10009510:	28bffb1e 	bne	r5,r2,10009500 <__alt_data_end+0xf8009500>
10009514:	11800317 	ldw	r6,12(r2)
10009518:	99000117 	ldw	r4,4(r19)
1000951c:	81800315 	stw	r6,12(r16)
10009520:	80800215 	stw	r2,8(r16)
10009524:	34000215 	stw	r16,8(r6)
10009528:	14000315 	stw	r16,12(r2)
1000952c:	003f2706 	br	100091cc <__alt_data_end+0xf80091cc>
10009530:	88c00054 	ori	r3,r17,1
10009534:	80c00115 	stw	r3,4(r16)
10009538:	8463883a 	add	r17,r16,r17
1000953c:	34400515 	stw	r17,20(r6)
10009540:	34400415 	stw	r17,16(r6)
10009544:	10c00054 	ori	r3,r2,1
10009548:	8a400315 	stw	r9,12(r17)
1000954c:	8a400215 	stw	r9,8(r17)
10009550:	88c00115 	stw	r3,4(r17)
10009554:	88a3883a 	add	r17,r17,r2
10009558:	88800015 	stw	r2,0(r17)
1000955c:	9009883a 	mov	r4,r18
10009560:	000ef440 	call	1000ef44 <__malloc_unlock>
10009564:	80800204 	addi	r2,r16,8
10009568:	003ecb06 	br	10009098 <__alt_data_end+0xf8009098>
1000956c:	31000117 	ldw	r4,4(r6)
10009570:	003f1606 	br	100091cc <__alt_data_end+0xf80091cc>
10009574:	63000044 	addi	r12,r12,1
10009578:	608000cc 	andi	r2,r12,3
1000957c:	5ac00204 	addi	r11,r11,8
10009580:	103f2a1e 	bne	r2,zero,1000922c <__alt_data_end+0xf800922c>
10009584:	00002106 	br	1000960c <_malloc_r+0x628>
10009588:	80800204 	addi	r2,r16,8
1000958c:	84000517 	ldw	r16,20(r16)
10009590:	143eb31e 	bne	r2,r16,10009060 <__alt_data_end+0xf8009060>
10009594:	18c00084 	addi	r3,r3,2
10009598:	003eec06 	br	1000914c <__alt_data_end+0xf800914c>
1000959c:	8085883a 	add	r2,r16,r2
100095a0:	10c00117 	ldw	r3,4(r2)
100095a4:	81000317 	ldw	r4,12(r16)
100095a8:	81400217 	ldw	r5,8(r16)
100095ac:	18c00054 	ori	r3,r3,1
100095b0:	10c00115 	stw	r3,4(r2)
100095b4:	29000315 	stw	r4,12(r5)
100095b8:	21400215 	stw	r5,8(r4)
100095bc:	9009883a 	mov	r4,r18
100095c0:	000ef440 	call	1000ef44 <__malloc_unlock>
100095c4:	80800204 	addi	r2,r16,8
100095c8:	003eb306 	br	10009098 <__alt_data_end+0xf8009098>
100095cc:	19c016c4 	addi	r7,r3,91
100095d0:	39cb883a 	add	r5,r7,r7
100095d4:	003ec706 	br	100090f4 <__alt_data_end+0xf80090f4>
100095d8:	3804d1ba 	srli	r2,r7,6
100095dc:	11000e04 	addi	r4,r2,56
100095e0:	210b883a 	add	r5,r4,r4
100095e4:	003fbe06 	br	100094e0 <__alt_data_end+0xf80094e0>
100095e8:	84ff5d26 	beq	r16,r19,10009360 <__alt_data_end+0xf8009360>
100095ec:	9c000217 	ldw	r16,8(r19)
100095f0:	00bfff04 	movi	r2,-4
100095f4:	80c00117 	ldw	r3,4(r16)
100095f8:	1886703a 	and	r3,r3,r2
100095fc:	003f9706 	br	1000945c <__alt_data_end+0xf800945c>
10009600:	52800017 	ldw	r10,0(r10)
10009604:	18ffffc4 	addi	r3,r3,-1
10009608:	50805c1e 	bne	r10,r2,1000977c <_malloc_r+0x798>
1000960c:	190000cc 	andi	r4,r3,3
10009610:	50bffe04 	addi	r2,r10,-8
10009614:	203ffa1e 	bne	r4,zero,10009600 <__alt_data_end+0xf8009600>
10009618:	98800117 	ldw	r2,4(r19)
1000961c:	0146303a 	nor	r3,zero,r5
10009620:	1884703a 	and	r2,r3,r2
10009624:	98800115 	stw	r2,4(r19)
10009628:	294b883a 	add	r5,r5,r5
1000962c:	117f2e36 	bltu	r2,r5,100092e8 <__alt_data_end+0xf80092e8>
10009630:	283f2d26 	beq	r5,zero,100092e8 <__alt_data_end+0xf80092e8>
10009634:	1146703a 	and	r3,r2,r5
10009638:	1800521e 	bne	r3,zero,10009784 <_malloc_r+0x7a0>
1000963c:	6007883a 	mov	r3,r12
10009640:	294b883a 	add	r5,r5,r5
10009644:	1148703a 	and	r4,r2,r5
10009648:	18c00104 	addi	r3,r3,4
1000964c:	203ffc26 	beq	r4,zero,10009640 <__alt_data_end+0xf8009640>
10009650:	003ef006 	br	10009214 <__alt_data_end+0xf8009214>
10009654:	00805504 	movi	r2,340
10009658:	10c01336 	bltu	r2,r3,100096a8 <_malloc_r+0x6c4>
1000965c:	8806d3fa 	srli	r3,r17,15
10009660:	19c01dc4 	addi	r7,r3,119
10009664:	39cb883a 	add	r5,r7,r7
10009668:	003ea206 	br	100090f4 <__alt_data_end+0xf80090f4>
1000966c:	00c40004 	movi	r3,4096
10009670:	003f4d06 	br	100093a8 <__alt_data_end+0xf80093a8>
10009674:	00800044 	movi	r2,1
10009678:	a0800115 	stw	r2,4(r20)
1000967c:	a021883a 	mov	r16,r20
10009680:	0007883a 	mov	r3,zero
10009684:	003f7506 	br	1000945c <__alt_data_end+0xf800945c>
10009688:	200bd0ba 	srai	r5,r4,2
1000968c:	01800044 	movi	r6,1
10009690:	41000117 	ldw	r4,4(r8)
10009694:	314a983a 	sll	r5,r6,r5
10009698:	100d883a 	mov	r6,r2
1000969c:	2908b03a 	or	r4,r5,r4
100096a0:	41000115 	stw	r4,4(r8)
100096a4:	003f9d06 	br	1000951c <__alt_data_end+0xf800951c>
100096a8:	00815504 	movi	r2,1364
100096ac:	10c01336 	bltu	r2,r3,100096fc <_malloc_r+0x718>
100096b0:	8806d4ba 	srli	r3,r17,18
100096b4:	19c01f04 	addi	r7,r3,124
100096b8:	39cb883a 	add	r5,r7,r7
100096bc:	003e8d06 	br	100090f4 <__alt_data_end+0xf80090f4>
100096c0:	ad400404 	addi	r21,r21,16
100096c4:	003f1d06 	br	1000933c <__alt_data_end+0xf800933c>
100096c8:	01001504 	movi	r4,84
100096cc:	20801c36 	bltu	r4,r2,10009740 <_malloc_r+0x75c>
100096d0:	3804d33a 	srli	r2,r7,12
100096d4:	11001b84 	addi	r4,r2,110
100096d8:	210b883a 	add	r5,r4,r4
100096dc:	003f8006 	br	100094e0 <__alt_data_end+0xf80094e0>
100096e0:	3083ffcc 	andi	r2,r6,4095
100096e4:	103f241e 	bne	r2,zero,10009378 <__alt_data_end+0xf8009378>
100096e8:	99000217 	ldw	r4,8(r19)
100096ec:	ad85883a 	add	r2,r21,r22
100096f0:	10800054 	ori	r2,r2,1
100096f4:	20800115 	stw	r2,4(r4)
100096f8:	003f4a06 	br	10009424 <__alt_data_end+0xf8009424>
100096fc:	01403f04 	movi	r5,252
10009700:	01c01f84 	movi	r7,126
10009704:	003e7b06 	br	100090f4 <__alt_data_end+0xf80090f4>
10009708:	00c00044 	movi	r3,1
1000970c:	002b883a 	mov	r21,zero
10009710:	003f3006 	br	100093d4 <__alt_data_end+0xf80093d4>
10009714:	00840074 	movhi	r2,4097
10009718:	108bd304 	addi	r2,r2,12108
1000971c:	15000015 	stw	r20,0(r2)
10009720:	003f1b06 	br	10009390 <__alt_data_end+0xf8009390>
10009724:	9009883a 	mov	r4,r18
10009728:	81400204 	addi	r5,r16,8
1000972c:	00084480 	call	10008448 <_free_r>
10009730:	00840074 	movhi	r2,4097
10009734:	1092b804 	addi	r2,r2,19168
10009738:	10c00017 	ldw	r3,0(r2)
1000973c:	003f3906 	br	10009424 <__alt_data_end+0xf8009424>
10009740:	01005504 	movi	r4,340
10009744:	20800436 	bltu	r4,r2,10009758 <_malloc_r+0x774>
10009748:	3804d3fa 	srli	r2,r7,15
1000974c:	11001dc4 	addi	r4,r2,119
10009750:	210b883a 	add	r5,r4,r4
10009754:	003f6206 	br	100094e0 <__alt_data_end+0xf80094e0>
10009758:	01015504 	movi	r4,1364
1000975c:	20800436 	bltu	r4,r2,10009770 <_malloc_r+0x78c>
10009760:	3804d4ba 	srli	r2,r7,18
10009764:	11001f04 	addi	r4,r2,124
10009768:	210b883a 	add	r5,r4,r4
1000976c:	003f5c06 	br	100094e0 <__alt_data_end+0xf80094e0>
10009770:	01403f04 	movi	r5,252
10009774:	01001f84 	movi	r4,126
10009778:	003f5906 	br	100094e0 <__alt_data_end+0xf80094e0>
1000977c:	98800117 	ldw	r2,4(r19)
10009780:	003fa906 	br	10009628 <__alt_data_end+0xf8009628>
10009784:	6007883a 	mov	r3,r12
10009788:	003ea206 	br	10009214 <__alt_data_end+0xf8009214>

1000978c <memchr>:
1000978c:	208000cc 	andi	r2,r4,3
10009790:	280f883a 	mov	r7,r5
10009794:	10003526 	beq	r2,zero,1000986c <memchr+0xe0>
10009798:	30bfffc4 	addi	r2,r6,-1
1000979c:	30001b26 	beq	r6,zero,1000980c <memchr+0x80>
100097a0:	21800003 	ldbu	r6,0(r4)
100097a4:	28c03fcc 	andi	r3,r5,255
100097a8:	30c01a26 	beq	r6,r3,10009814 <memchr+0x88>
100097ac:	180d883a 	mov	r6,r3
100097b0:	00000406 	br	100097c4 <memchr+0x38>
100097b4:	10001526 	beq	r2,zero,1000980c <memchr+0x80>
100097b8:	20c00003 	ldbu	r3,0(r4)
100097bc:	10bfffc4 	addi	r2,r2,-1
100097c0:	19801426 	beq	r3,r6,10009814 <memchr+0x88>
100097c4:	21000044 	addi	r4,r4,1
100097c8:	20c000cc 	andi	r3,r4,3
100097cc:	183ff91e 	bne	r3,zero,100097b4 <__alt_data_end+0xf80097b4>
100097d0:	024000c4 	movi	r9,3
100097d4:	48801136 	bltu	r9,r2,1000981c <memchr+0x90>
100097d8:	10000c26 	beq	r2,zero,1000980c <memchr+0x80>
100097dc:	20c00003 	ldbu	r3,0(r4)
100097e0:	29403fcc 	andi	r5,r5,255
100097e4:	19400b26 	beq	r3,r5,10009814 <memchr+0x88>
100097e8:	20c00044 	addi	r3,r4,1
100097ec:	2085883a 	add	r2,r4,r2
100097f0:	39803fcc 	andi	r6,r7,255
100097f4:	00000306 	br	10009804 <memchr+0x78>
100097f8:	18c00044 	addi	r3,r3,1
100097fc:	197fffc3 	ldbu	r5,-1(r3)
10009800:	29800426 	beq	r5,r6,10009814 <memchr+0x88>
10009804:	1809883a 	mov	r4,r3
10009808:	18bffb1e 	bne	r3,r2,100097f8 <__alt_data_end+0xf80097f8>
1000980c:	0005883a 	mov	r2,zero
10009810:	f800283a 	ret
10009814:	2005883a 	mov	r2,r4
10009818:	f800283a 	ret
1000981c:	28c03fcc 	andi	r3,r5,255
10009820:	1810923a 	slli	r8,r3,8
10009824:	02ffbff4 	movhi	r11,65279
10009828:	02a02074 	movhi	r10,32897
1000982c:	40c6b03a 	or	r3,r8,r3
10009830:	1810943a 	slli	r8,r3,16
10009834:	5affbfc4 	addi	r11,r11,-257
10009838:	52a02004 	addi	r10,r10,-32640
1000983c:	40d0b03a 	or	r8,r8,r3
10009840:	20c00017 	ldw	r3,0(r4)
10009844:	40c6f03a 	xor	r3,r8,r3
10009848:	1acd883a 	add	r6,r3,r11
1000984c:	00c6303a 	nor	r3,zero,r3
10009850:	30c6703a 	and	r3,r6,r3
10009854:	1a86703a 	and	r3,r3,r10
10009858:	183fdf1e 	bne	r3,zero,100097d8 <__alt_data_end+0xf80097d8>
1000985c:	10bfff04 	addi	r2,r2,-4
10009860:	21000104 	addi	r4,r4,4
10009864:	48bff636 	bltu	r9,r2,10009840 <__alt_data_end+0xf8009840>
10009868:	003fdb06 	br	100097d8 <__alt_data_end+0xf80097d8>
1000986c:	3005883a 	mov	r2,r6
10009870:	003fd706 	br	100097d0 <__alt_data_end+0xf80097d0>

10009874 <memcpy>:
10009874:	deffff04 	addi	sp,sp,-4
10009878:	dc000015 	stw	r16,0(sp)
1000987c:	00c003c4 	movi	r3,15
10009880:	2005883a 	mov	r2,r4
10009884:	1980432e 	bgeu	r3,r6,10009994 <memcpy+0x120>
10009888:	2146b03a 	or	r3,r4,r5
1000988c:	18c000cc 	andi	r3,r3,3
10009890:	1800421e 	bne	r3,zero,1000999c <memcpy+0x128>
10009894:	343ffc04 	addi	r16,r6,-16
10009898:	8020d13a 	srli	r16,r16,4
1000989c:	28c00104 	addi	r3,r5,4
100098a0:	23400104 	addi	r13,r4,4
100098a4:	801e913a 	slli	r15,r16,4
100098a8:	2b000204 	addi	r12,r5,8
100098ac:	22c00204 	addi	r11,r4,8
100098b0:	7bc00504 	addi	r15,r15,20
100098b4:	2a800304 	addi	r10,r5,12
100098b8:	22400304 	addi	r9,r4,12
100098bc:	2bdf883a 	add	r15,r5,r15
100098c0:	2811883a 	mov	r8,r5
100098c4:	200f883a 	mov	r7,r4
100098c8:	41000017 	ldw	r4,0(r8)
100098cc:	39c00404 	addi	r7,r7,16
100098d0:	18c00404 	addi	r3,r3,16
100098d4:	393ffc15 	stw	r4,-16(r7)
100098d8:	1bbffc17 	ldw	r14,-16(r3)
100098dc:	6b400404 	addi	r13,r13,16
100098e0:	5ac00404 	addi	r11,r11,16
100098e4:	6bbffc15 	stw	r14,-16(r13)
100098e8:	63800017 	ldw	r14,0(r12)
100098ec:	4a400404 	addi	r9,r9,16
100098f0:	42000404 	addi	r8,r8,16
100098f4:	5bbffc15 	stw	r14,-16(r11)
100098f8:	53800017 	ldw	r14,0(r10)
100098fc:	63000404 	addi	r12,r12,16
10009900:	52800404 	addi	r10,r10,16
10009904:	4bbffc15 	stw	r14,-16(r9)
10009908:	1bffef1e 	bne	r3,r15,100098c8 <__alt_data_end+0xf80098c8>
1000990c:	81c00044 	addi	r7,r16,1
10009910:	380e913a 	slli	r7,r7,4
10009914:	310003cc 	andi	r4,r6,15
10009918:	02c000c4 	movi	r11,3
1000991c:	11c7883a 	add	r3,r2,r7
10009920:	29cb883a 	add	r5,r5,r7
10009924:	59001f2e 	bgeu	r11,r4,100099a4 <memcpy+0x130>
10009928:	1813883a 	mov	r9,r3
1000992c:	2811883a 	mov	r8,r5
10009930:	200f883a 	mov	r7,r4
10009934:	42800017 	ldw	r10,0(r8)
10009938:	4a400104 	addi	r9,r9,4
1000993c:	39ffff04 	addi	r7,r7,-4
10009940:	4abfff15 	stw	r10,-4(r9)
10009944:	42000104 	addi	r8,r8,4
10009948:	59fffa36 	bltu	r11,r7,10009934 <__alt_data_end+0xf8009934>
1000994c:	213fff04 	addi	r4,r4,-4
10009950:	2008d0ba 	srli	r4,r4,2
10009954:	318000cc 	andi	r6,r6,3
10009958:	21000044 	addi	r4,r4,1
1000995c:	2109883a 	add	r4,r4,r4
10009960:	2109883a 	add	r4,r4,r4
10009964:	1907883a 	add	r3,r3,r4
10009968:	290b883a 	add	r5,r5,r4
1000996c:	30000626 	beq	r6,zero,10009988 <memcpy+0x114>
10009970:	198d883a 	add	r6,r3,r6
10009974:	29c00003 	ldbu	r7,0(r5)
10009978:	18c00044 	addi	r3,r3,1
1000997c:	29400044 	addi	r5,r5,1
10009980:	19ffffc5 	stb	r7,-1(r3)
10009984:	19bffb1e 	bne	r3,r6,10009974 <__alt_data_end+0xf8009974>
10009988:	dc000017 	ldw	r16,0(sp)
1000998c:	dec00104 	addi	sp,sp,4
10009990:	f800283a 	ret
10009994:	2007883a 	mov	r3,r4
10009998:	003ff406 	br	1000996c <__alt_data_end+0xf800996c>
1000999c:	2007883a 	mov	r3,r4
100099a0:	003ff306 	br	10009970 <__alt_data_end+0xf8009970>
100099a4:	200d883a 	mov	r6,r4
100099a8:	003ff006 	br	1000996c <__alt_data_end+0xf800996c>

100099ac <memmove>:
100099ac:	2005883a 	mov	r2,r4
100099b0:	29000b2e 	bgeu	r5,r4,100099e0 <memmove+0x34>
100099b4:	298f883a 	add	r7,r5,r6
100099b8:	21c0092e 	bgeu	r4,r7,100099e0 <memmove+0x34>
100099bc:	2187883a 	add	r3,r4,r6
100099c0:	198bc83a 	sub	r5,r3,r6
100099c4:	30004b26 	beq	r6,zero,10009af4 <memmove+0x148>
100099c8:	39ffffc4 	addi	r7,r7,-1
100099cc:	39000003 	ldbu	r4,0(r7)
100099d0:	18ffffc4 	addi	r3,r3,-1
100099d4:	19000005 	stb	r4,0(r3)
100099d8:	197ffb1e 	bne	r3,r5,100099c8 <__alt_data_end+0xf80099c8>
100099dc:	f800283a 	ret
100099e0:	00c003c4 	movi	r3,15
100099e4:	1980412e 	bgeu	r3,r6,10009aec <memmove+0x140>
100099e8:	1146b03a 	or	r3,r2,r5
100099ec:	18c000cc 	andi	r3,r3,3
100099f0:	1800411e 	bne	r3,zero,10009af8 <memmove+0x14c>
100099f4:	33fffc04 	addi	r15,r6,-16
100099f8:	781ed13a 	srli	r15,r15,4
100099fc:	28c00104 	addi	r3,r5,4
10009a00:	13400104 	addi	r13,r2,4
10009a04:	781c913a 	slli	r14,r15,4
10009a08:	2b000204 	addi	r12,r5,8
10009a0c:	12c00204 	addi	r11,r2,8
10009a10:	73800504 	addi	r14,r14,20
10009a14:	2a800304 	addi	r10,r5,12
10009a18:	12400304 	addi	r9,r2,12
10009a1c:	2b9d883a 	add	r14,r5,r14
10009a20:	2811883a 	mov	r8,r5
10009a24:	100f883a 	mov	r7,r2
10009a28:	41000017 	ldw	r4,0(r8)
10009a2c:	39c00404 	addi	r7,r7,16
10009a30:	18c00404 	addi	r3,r3,16
10009a34:	393ffc15 	stw	r4,-16(r7)
10009a38:	193ffc17 	ldw	r4,-16(r3)
10009a3c:	6b400404 	addi	r13,r13,16
10009a40:	5ac00404 	addi	r11,r11,16
10009a44:	693ffc15 	stw	r4,-16(r13)
10009a48:	61000017 	ldw	r4,0(r12)
10009a4c:	4a400404 	addi	r9,r9,16
10009a50:	42000404 	addi	r8,r8,16
10009a54:	593ffc15 	stw	r4,-16(r11)
10009a58:	51000017 	ldw	r4,0(r10)
10009a5c:	63000404 	addi	r12,r12,16
10009a60:	52800404 	addi	r10,r10,16
10009a64:	493ffc15 	stw	r4,-16(r9)
10009a68:	1bbfef1e 	bne	r3,r14,10009a28 <__alt_data_end+0xf8009a28>
10009a6c:	79000044 	addi	r4,r15,1
10009a70:	2008913a 	slli	r4,r4,4
10009a74:	328003cc 	andi	r10,r6,15
10009a78:	02c000c4 	movi	r11,3
10009a7c:	1107883a 	add	r3,r2,r4
10009a80:	290b883a 	add	r5,r5,r4
10009a84:	5a801e2e 	bgeu	r11,r10,10009b00 <memmove+0x154>
10009a88:	1813883a 	mov	r9,r3
10009a8c:	2811883a 	mov	r8,r5
10009a90:	500f883a 	mov	r7,r10
10009a94:	41000017 	ldw	r4,0(r8)
10009a98:	4a400104 	addi	r9,r9,4
10009a9c:	39ffff04 	addi	r7,r7,-4
10009aa0:	493fff15 	stw	r4,-4(r9)
10009aa4:	42000104 	addi	r8,r8,4
10009aa8:	59fffa36 	bltu	r11,r7,10009a94 <__alt_data_end+0xf8009a94>
10009aac:	513fff04 	addi	r4,r10,-4
10009ab0:	2008d0ba 	srli	r4,r4,2
10009ab4:	318000cc 	andi	r6,r6,3
10009ab8:	21000044 	addi	r4,r4,1
10009abc:	2109883a 	add	r4,r4,r4
10009ac0:	2109883a 	add	r4,r4,r4
10009ac4:	1907883a 	add	r3,r3,r4
10009ac8:	290b883a 	add	r5,r5,r4
10009acc:	30000926 	beq	r6,zero,10009af4 <memmove+0x148>
10009ad0:	198d883a 	add	r6,r3,r6
10009ad4:	29c00003 	ldbu	r7,0(r5)
10009ad8:	18c00044 	addi	r3,r3,1
10009adc:	29400044 	addi	r5,r5,1
10009ae0:	19ffffc5 	stb	r7,-1(r3)
10009ae4:	19bffb1e 	bne	r3,r6,10009ad4 <__alt_data_end+0xf8009ad4>
10009ae8:	f800283a 	ret
10009aec:	1007883a 	mov	r3,r2
10009af0:	003ff606 	br	10009acc <__alt_data_end+0xf8009acc>
10009af4:	f800283a 	ret
10009af8:	1007883a 	mov	r3,r2
10009afc:	003ff406 	br	10009ad0 <__alt_data_end+0xf8009ad0>
10009b00:	500d883a 	mov	r6,r10
10009b04:	003ff106 	br	10009acc <__alt_data_end+0xf8009acc>

10009b08 <memset>:
10009b08:	20c000cc 	andi	r3,r4,3
10009b0c:	2005883a 	mov	r2,r4
10009b10:	18004326 	beq	r3,zero,10009c20 <memset+0x118>
10009b14:	31ffffc4 	addi	r7,r6,-1
10009b18:	30004026 	beq	r6,zero,10009c1c <memset+0x114>
10009b1c:	2813883a 	mov	r9,r5
10009b20:	200d883a 	mov	r6,r4
10009b24:	2007883a 	mov	r3,r4
10009b28:	00000406 	br	10009b3c <memset+0x34>
10009b2c:	3a3fffc4 	addi	r8,r7,-1
10009b30:	31800044 	addi	r6,r6,1
10009b34:	38003926 	beq	r7,zero,10009c1c <memset+0x114>
10009b38:	400f883a 	mov	r7,r8
10009b3c:	18c00044 	addi	r3,r3,1
10009b40:	32400005 	stb	r9,0(r6)
10009b44:	1a0000cc 	andi	r8,r3,3
10009b48:	403ff81e 	bne	r8,zero,10009b2c <__alt_data_end+0xf8009b2c>
10009b4c:	010000c4 	movi	r4,3
10009b50:	21c02d2e 	bgeu	r4,r7,10009c08 <memset+0x100>
10009b54:	29803fcc 	andi	r6,r5,255
10009b58:	3008923a 	slli	r4,r6,8
10009b5c:	218cb03a 	or	r6,r4,r6
10009b60:	3008943a 	slli	r4,r6,16
10009b64:	218cb03a 	or	r6,r4,r6
10009b68:	010003c4 	movi	r4,15
10009b6c:	21c0182e 	bgeu	r4,r7,10009bd0 <memset+0xc8>
10009b70:	3b3ffc04 	addi	r12,r7,-16
10009b74:	6018d13a 	srli	r12,r12,4
10009b78:	1a000104 	addi	r8,r3,4
10009b7c:	1ac00204 	addi	r11,r3,8
10009b80:	6008913a 	slli	r4,r12,4
10009b84:	1a800304 	addi	r10,r3,12
10009b88:	1813883a 	mov	r9,r3
10009b8c:	21000504 	addi	r4,r4,20
10009b90:	1909883a 	add	r4,r3,r4
10009b94:	49800015 	stw	r6,0(r9)
10009b98:	41800015 	stw	r6,0(r8)
10009b9c:	59800015 	stw	r6,0(r11)
10009ba0:	51800015 	stw	r6,0(r10)
10009ba4:	42000404 	addi	r8,r8,16
10009ba8:	4a400404 	addi	r9,r9,16
10009bac:	5ac00404 	addi	r11,r11,16
10009bb0:	52800404 	addi	r10,r10,16
10009bb4:	413ff71e 	bne	r8,r4,10009b94 <__alt_data_end+0xf8009b94>
10009bb8:	63000044 	addi	r12,r12,1
10009bbc:	6018913a 	slli	r12,r12,4
10009bc0:	39c003cc 	andi	r7,r7,15
10009bc4:	010000c4 	movi	r4,3
10009bc8:	1b07883a 	add	r3,r3,r12
10009bcc:	21c00e2e 	bgeu	r4,r7,10009c08 <memset+0x100>
10009bd0:	1813883a 	mov	r9,r3
10009bd4:	3811883a 	mov	r8,r7
10009bd8:	010000c4 	movi	r4,3
10009bdc:	49800015 	stw	r6,0(r9)
10009be0:	423fff04 	addi	r8,r8,-4
10009be4:	4a400104 	addi	r9,r9,4
10009be8:	223ffc36 	bltu	r4,r8,10009bdc <__alt_data_end+0xf8009bdc>
10009bec:	393fff04 	addi	r4,r7,-4
10009bf0:	2008d0ba 	srli	r4,r4,2
10009bf4:	39c000cc 	andi	r7,r7,3
10009bf8:	21000044 	addi	r4,r4,1
10009bfc:	2109883a 	add	r4,r4,r4
10009c00:	2109883a 	add	r4,r4,r4
10009c04:	1907883a 	add	r3,r3,r4
10009c08:	38000426 	beq	r7,zero,10009c1c <memset+0x114>
10009c0c:	19cf883a 	add	r7,r3,r7
10009c10:	19400005 	stb	r5,0(r3)
10009c14:	18c00044 	addi	r3,r3,1
10009c18:	19fffd1e 	bne	r3,r7,10009c10 <__alt_data_end+0xf8009c10>
10009c1c:	f800283a 	ret
10009c20:	2007883a 	mov	r3,r4
10009c24:	300f883a 	mov	r7,r6
10009c28:	003fc806 	br	10009b4c <__alt_data_end+0xf8009b4c>

10009c2c <_Balloc>:
10009c2c:	20801317 	ldw	r2,76(r4)
10009c30:	defffc04 	addi	sp,sp,-16
10009c34:	dc400115 	stw	r17,4(sp)
10009c38:	dc000015 	stw	r16,0(sp)
10009c3c:	dfc00315 	stw	ra,12(sp)
10009c40:	dc800215 	stw	r18,8(sp)
10009c44:	2023883a 	mov	r17,r4
10009c48:	2821883a 	mov	r16,r5
10009c4c:	10000f26 	beq	r2,zero,10009c8c <_Balloc+0x60>
10009c50:	8407883a 	add	r3,r16,r16
10009c54:	18c7883a 	add	r3,r3,r3
10009c58:	10c7883a 	add	r3,r2,r3
10009c5c:	18800017 	ldw	r2,0(r3)
10009c60:	10001126 	beq	r2,zero,10009ca8 <_Balloc+0x7c>
10009c64:	11000017 	ldw	r4,0(r2)
10009c68:	19000015 	stw	r4,0(r3)
10009c6c:	10000415 	stw	zero,16(r2)
10009c70:	10000315 	stw	zero,12(r2)
10009c74:	dfc00317 	ldw	ra,12(sp)
10009c78:	dc800217 	ldw	r18,8(sp)
10009c7c:	dc400117 	ldw	r17,4(sp)
10009c80:	dc000017 	ldw	r16,0(sp)
10009c84:	dec00404 	addi	sp,sp,16
10009c88:	f800283a 	ret
10009c8c:	01400104 	movi	r5,4
10009c90:	01800844 	movi	r6,33
10009c94:	000cac80 	call	1000cac8 <_calloc_r>
10009c98:	88801315 	stw	r2,76(r17)
10009c9c:	103fec1e 	bne	r2,zero,10009c50 <__alt_data_end+0xf8009c50>
10009ca0:	0005883a 	mov	r2,zero
10009ca4:	003ff306 	br	10009c74 <__alt_data_end+0xf8009c74>
10009ca8:	01400044 	movi	r5,1
10009cac:	2c24983a 	sll	r18,r5,r16
10009cb0:	8809883a 	mov	r4,r17
10009cb4:	91800144 	addi	r6,r18,5
10009cb8:	318d883a 	add	r6,r6,r6
10009cbc:	318d883a 	add	r6,r6,r6
10009cc0:	000cac80 	call	1000cac8 <_calloc_r>
10009cc4:	103ff626 	beq	r2,zero,10009ca0 <__alt_data_end+0xf8009ca0>
10009cc8:	14000115 	stw	r16,4(r2)
10009ccc:	14800215 	stw	r18,8(r2)
10009cd0:	003fe606 	br	10009c6c <__alt_data_end+0xf8009c6c>

10009cd4 <_Bfree>:
10009cd4:	28000826 	beq	r5,zero,10009cf8 <_Bfree+0x24>
10009cd8:	28c00117 	ldw	r3,4(r5)
10009cdc:	20801317 	ldw	r2,76(r4)
10009ce0:	18c7883a 	add	r3,r3,r3
10009ce4:	18c7883a 	add	r3,r3,r3
10009ce8:	10c5883a 	add	r2,r2,r3
10009cec:	10c00017 	ldw	r3,0(r2)
10009cf0:	28c00015 	stw	r3,0(r5)
10009cf4:	11400015 	stw	r5,0(r2)
10009cf8:	f800283a 	ret

10009cfc <__multadd>:
10009cfc:	defff704 	addi	sp,sp,-36
10009d00:	dc800215 	stw	r18,8(sp)
10009d04:	2c800417 	ldw	r18,16(r5)
10009d08:	ddc00715 	stw	r23,28(sp)
10009d0c:	dd800615 	stw	r22,24(sp)
10009d10:	dd000415 	stw	r20,16(sp)
10009d14:	dcc00315 	stw	r19,12(sp)
10009d18:	dc400115 	stw	r17,4(sp)
10009d1c:	dc000015 	stw	r16,0(sp)
10009d20:	dfc00815 	stw	ra,32(sp)
10009d24:	dd400515 	stw	r21,20(sp)
10009d28:	2827883a 	mov	r19,r5
10009d2c:	2029883a 	mov	r20,r4
10009d30:	3023883a 	mov	r17,r6
10009d34:	3821883a 	mov	r16,r7
10009d38:	2d800504 	addi	r22,r5,20
10009d3c:	002f883a 	mov	r23,zero
10009d40:	b5400017 	ldw	r21,0(r22)
10009d44:	880b883a 	mov	r5,r17
10009d48:	bdc00044 	addi	r23,r23,1
10009d4c:	a93fffcc 	andi	r4,r21,65535
10009d50:	0002be00 	call	10002be0 <__mulsi3>
10009d54:	1421883a 	add	r16,r2,r16
10009d58:	a808d43a 	srli	r4,r21,16
10009d5c:	802ad43a 	srli	r21,r16,16
10009d60:	880b883a 	mov	r5,r17
10009d64:	0002be00 	call	10002be0 <__mulsi3>
10009d68:	a88f883a 	add	r7,r21,r2
10009d6c:	3804943a 	slli	r2,r7,16
10009d70:	80ffffcc 	andi	r3,r16,65535
10009d74:	b5800104 	addi	r22,r22,4
10009d78:	10c7883a 	add	r3,r2,r3
10009d7c:	b0ffff15 	stw	r3,-4(r22)
10009d80:	3820d43a 	srli	r16,r7,16
10009d84:	bcbfee16 	blt	r23,r18,10009d40 <__alt_data_end+0xf8009d40>
10009d88:	80000926 	beq	r16,zero,10009db0 <__multadd+0xb4>
10009d8c:	98800217 	ldw	r2,8(r19)
10009d90:	9080130e 	bge	r18,r2,10009de0 <__multadd+0xe4>
10009d94:	90800144 	addi	r2,r18,5
10009d98:	1085883a 	add	r2,r2,r2
10009d9c:	1085883a 	add	r2,r2,r2
10009da0:	9885883a 	add	r2,r19,r2
10009da4:	14000015 	stw	r16,0(r2)
10009da8:	94800044 	addi	r18,r18,1
10009dac:	9c800415 	stw	r18,16(r19)
10009db0:	9805883a 	mov	r2,r19
10009db4:	dfc00817 	ldw	ra,32(sp)
10009db8:	ddc00717 	ldw	r23,28(sp)
10009dbc:	dd800617 	ldw	r22,24(sp)
10009dc0:	dd400517 	ldw	r21,20(sp)
10009dc4:	dd000417 	ldw	r20,16(sp)
10009dc8:	dcc00317 	ldw	r19,12(sp)
10009dcc:	dc800217 	ldw	r18,8(sp)
10009dd0:	dc400117 	ldw	r17,4(sp)
10009dd4:	dc000017 	ldw	r16,0(sp)
10009dd8:	dec00904 	addi	sp,sp,36
10009ddc:	f800283a 	ret
10009de0:	99400117 	ldw	r5,4(r19)
10009de4:	a009883a 	mov	r4,r20
10009de8:	29400044 	addi	r5,r5,1
10009dec:	0009c2c0 	call	10009c2c <_Balloc>
10009df0:	99800417 	ldw	r6,16(r19)
10009df4:	99400304 	addi	r5,r19,12
10009df8:	11000304 	addi	r4,r2,12
10009dfc:	31800084 	addi	r6,r6,2
10009e00:	318d883a 	add	r6,r6,r6
10009e04:	318d883a 	add	r6,r6,r6
10009e08:	1023883a 	mov	r17,r2
10009e0c:	00098740 	call	10009874 <memcpy>
10009e10:	99000117 	ldw	r4,4(r19)
10009e14:	a0c01317 	ldw	r3,76(r20)
10009e18:	2109883a 	add	r4,r4,r4
10009e1c:	2109883a 	add	r4,r4,r4
10009e20:	1907883a 	add	r3,r3,r4
10009e24:	18800017 	ldw	r2,0(r3)
10009e28:	98800015 	stw	r2,0(r19)
10009e2c:	1cc00015 	stw	r19,0(r3)
10009e30:	8827883a 	mov	r19,r17
10009e34:	003fd706 	br	10009d94 <__alt_data_end+0xf8009d94>

10009e38 <__s2b>:
10009e38:	defff904 	addi	sp,sp,-28
10009e3c:	dc400115 	stw	r17,4(sp)
10009e40:	dc000015 	stw	r16,0(sp)
10009e44:	2023883a 	mov	r17,r4
10009e48:	2821883a 	mov	r16,r5
10009e4c:	39000204 	addi	r4,r7,8
10009e50:	01400244 	movi	r5,9
10009e54:	dcc00315 	stw	r19,12(sp)
10009e58:	dc800215 	stw	r18,8(sp)
10009e5c:	dfc00615 	stw	ra,24(sp)
10009e60:	dd400515 	stw	r21,20(sp)
10009e64:	dd000415 	stw	r20,16(sp)
10009e68:	3825883a 	mov	r18,r7
10009e6c:	3027883a 	mov	r19,r6
10009e70:	0002b200 	call	10002b20 <__divsi3>
10009e74:	00c00044 	movi	r3,1
10009e78:	000b883a 	mov	r5,zero
10009e7c:	1880030e 	bge	r3,r2,10009e8c <__s2b+0x54>
10009e80:	18c7883a 	add	r3,r3,r3
10009e84:	29400044 	addi	r5,r5,1
10009e88:	18bffd16 	blt	r3,r2,10009e80 <__alt_data_end+0xf8009e80>
10009e8c:	8809883a 	mov	r4,r17
10009e90:	0009c2c0 	call	10009c2c <_Balloc>
10009e94:	d8c00717 	ldw	r3,28(sp)
10009e98:	10c00515 	stw	r3,20(r2)
10009e9c:	00c00044 	movi	r3,1
10009ea0:	10c00415 	stw	r3,16(r2)
10009ea4:	00c00244 	movi	r3,9
10009ea8:	1cc0210e 	bge	r3,r19,10009f30 <__s2b+0xf8>
10009eac:	80eb883a 	add	r21,r16,r3
10009eb0:	a829883a 	mov	r20,r21
10009eb4:	84e1883a 	add	r16,r16,r19
10009eb8:	a1c00007 	ldb	r7,0(r20)
10009ebc:	8809883a 	mov	r4,r17
10009ec0:	a5000044 	addi	r20,r20,1
10009ec4:	100b883a 	mov	r5,r2
10009ec8:	01800284 	movi	r6,10
10009ecc:	39fff404 	addi	r7,r7,-48
10009ed0:	0009cfc0 	call	10009cfc <__multadd>
10009ed4:	a43ff81e 	bne	r20,r16,10009eb8 <__alt_data_end+0xf8009eb8>
10009ed8:	ace1883a 	add	r16,r21,r19
10009edc:	843ffe04 	addi	r16,r16,-8
10009ee0:	9c800a0e 	bge	r19,r18,10009f0c <__s2b+0xd4>
10009ee4:	94e5c83a 	sub	r18,r18,r19
10009ee8:	84a5883a 	add	r18,r16,r18
10009eec:	81c00007 	ldb	r7,0(r16)
10009ef0:	8809883a 	mov	r4,r17
10009ef4:	84000044 	addi	r16,r16,1
10009ef8:	100b883a 	mov	r5,r2
10009efc:	01800284 	movi	r6,10
10009f00:	39fff404 	addi	r7,r7,-48
10009f04:	0009cfc0 	call	10009cfc <__multadd>
10009f08:	84bff81e 	bne	r16,r18,10009eec <__alt_data_end+0xf8009eec>
10009f0c:	dfc00617 	ldw	ra,24(sp)
10009f10:	dd400517 	ldw	r21,20(sp)
10009f14:	dd000417 	ldw	r20,16(sp)
10009f18:	dcc00317 	ldw	r19,12(sp)
10009f1c:	dc800217 	ldw	r18,8(sp)
10009f20:	dc400117 	ldw	r17,4(sp)
10009f24:	dc000017 	ldw	r16,0(sp)
10009f28:	dec00704 	addi	sp,sp,28
10009f2c:	f800283a 	ret
10009f30:	84000284 	addi	r16,r16,10
10009f34:	1827883a 	mov	r19,r3
10009f38:	003fe906 	br	10009ee0 <__alt_data_end+0xf8009ee0>

10009f3c <__hi0bits>:
10009f3c:	20bfffec 	andhi	r2,r4,65535
10009f40:	1000141e 	bne	r2,zero,10009f94 <__hi0bits+0x58>
10009f44:	2008943a 	slli	r4,r4,16
10009f48:	00800404 	movi	r2,16
10009f4c:	20ffc02c 	andhi	r3,r4,65280
10009f50:	1800021e 	bne	r3,zero,10009f5c <__hi0bits+0x20>
10009f54:	2008923a 	slli	r4,r4,8
10009f58:	10800204 	addi	r2,r2,8
10009f5c:	20fc002c 	andhi	r3,r4,61440
10009f60:	1800021e 	bne	r3,zero,10009f6c <__hi0bits+0x30>
10009f64:	2008913a 	slli	r4,r4,4
10009f68:	10800104 	addi	r2,r2,4
10009f6c:	20f0002c 	andhi	r3,r4,49152
10009f70:	1800031e 	bne	r3,zero,10009f80 <__hi0bits+0x44>
10009f74:	2109883a 	add	r4,r4,r4
10009f78:	10800084 	addi	r2,r2,2
10009f7c:	2109883a 	add	r4,r4,r4
10009f80:	20000316 	blt	r4,zero,10009f90 <__hi0bits+0x54>
10009f84:	2110002c 	andhi	r4,r4,16384
10009f88:	2000041e 	bne	r4,zero,10009f9c <__hi0bits+0x60>
10009f8c:	00800804 	movi	r2,32
10009f90:	f800283a 	ret
10009f94:	0005883a 	mov	r2,zero
10009f98:	003fec06 	br	10009f4c <__alt_data_end+0xf8009f4c>
10009f9c:	10800044 	addi	r2,r2,1
10009fa0:	f800283a 	ret

10009fa4 <__lo0bits>:
10009fa4:	20c00017 	ldw	r3,0(r4)
10009fa8:	188001cc 	andi	r2,r3,7
10009fac:	10000826 	beq	r2,zero,10009fd0 <__lo0bits+0x2c>
10009fb0:	1880004c 	andi	r2,r3,1
10009fb4:	1000211e 	bne	r2,zero,1000a03c <__lo0bits+0x98>
10009fb8:	1880008c 	andi	r2,r3,2
10009fbc:	1000211e 	bne	r2,zero,1000a044 <__lo0bits+0xa0>
10009fc0:	1806d0ba 	srli	r3,r3,2
10009fc4:	00800084 	movi	r2,2
10009fc8:	20c00015 	stw	r3,0(r4)
10009fcc:	f800283a 	ret
10009fd0:	18bfffcc 	andi	r2,r3,65535
10009fd4:	10001326 	beq	r2,zero,1000a024 <__lo0bits+0x80>
10009fd8:	0005883a 	mov	r2,zero
10009fdc:	19403fcc 	andi	r5,r3,255
10009fe0:	2800021e 	bne	r5,zero,10009fec <__lo0bits+0x48>
10009fe4:	1806d23a 	srli	r3,r3,8
10009fe8:	10800204 	addi	r2,r2,8
10009fec:	194003cc 	andi	r5,r3,15
10009ff0:	2800021e 	bne	r5,zero,10009ffc <__lo0bits+0x58>
10009ff4:	1806d13a 	srli	r3,r3,4
10009ff8:	10800104 	addi	r2,r2,4
10009ffc:	194000cc 	andi	r5,r3,3
1000a000:	2800021e 	bne	r5,zero,1000a00c <__lo0bits+0x68>
1000a004:	1806d0ba 	srli	r3,r3,2
1000a008:	10800084 	addi	r2,r2,2
1000a00c:	1940004c 	andi	r5,r3,1
1000a010:	2800081e 	bne	r5,zero,1000a034 <__lo0bits+0x90>
1000a014:	1806d07a 	srli	r3,r3,1
1000a018:	1800051e 	bne	r3,zero,1000a030 <__lo0bits+0x8c>
1000a01c:	00800804 	movi	r2,32
1000a020:	f800283a 	ret
1000a024:	1806d43a 	srli	r3,r3,16
1000a028:	00800404 	movi	r2,16
1000a02c:	003feb06 	br	10009fdc <__alt_data_end+0xf8009fdc>
1000a030:	10800044 	addi	r2,r2,1
1000a034:	20c00015 	stw	r3,0(r4)
1000a038:	f800283a 	ret
1000a03c:	0005883a 	mov	r2,zero
1000a040:	f800283a 	ret
1000a044:	1806d07a 	srli	r3,r3,1
1000a048:	00800044 	movi	r2,1
1000a04c:	20c00015 	stw	r3,0(r4)
1000a050:	f800283a 	ret

1000a054 <__i2b>:
1000a054:	defffd04 	addi	sp,sp,-12
1000a058:	dc000015 	stw	r16,0(sp)
1000a05c:	04000044 	movi	r16,1
1000a060:	dc400115 	stw	r17,4(sp)
1000a064:	2823883a 	mov	r17,r5
1000a068:	800b883a 	mov	r5,r16
1000a06c:	dfc00215 	stw	ra,8(sp)
1000a070:	0009c2c0 	call	10009c2c <_Balloc>
1000a074:	14400515 	stw	r17,20(r2)
1000a078:	14000415 	stw	r16,16(r2)
1000a07c:	dfc00217 	ldw	ra,8(sp)
1000a080:	dc400117 	ldw	r17,4(sp)
1000a084:	dc000017 	ldw	r16,0(sp)
1000a088:	dec00304 	addi	sp,sp,12
1000a08c:	f800283a 	ret

1000a090 <__multiply>:
1000a090:	deffef04 	addi	sp,sp,-68
1000a094:	dc400815 	stw	r17,32(sp)
1000a098:	dc000715 	stw	r16,28(sp)
1000a09c:	2c400417 	ldw	r17,16(r5)
1000a0a0:	34000417 	ldw	r16,16(r6)
1000a0a4:	dd800d15 	stw	r22,52(sp)
1000a0a8:	dc800915 	stw	r18,36(sp)
1000a0ac:	dfc01015 	stw	ra,64(sp)
1000a0b0:	df000f15 	stw	fp,60(sp)
1000a0b4:	ddc00e15 	stw	r23,56(sp)
1000a0b8:	dd400c15 	stw	r21,48(sp)
1000a0bc:	dd000b15 	stw	r20,44(sp)
1000a0c0:	dcc00a15 	stw	r19,40(sp)
1000a0c4:	2825883a 	mov	r18,r5
1000a0c8:	302d883a 	mov	r22,r6
1000a0cc:	8c009116 	blt	r17,r16,1000a314 <__multiply+0x284>
1000a0d0:	8005883a 	mov	r2,r16
1000a0d4:	8821883a 	mov	r16,r17
1000a0d8:	1023883a 	mov	r17,r2
1000a0dc:	90800217 	ldw	r2,8(r18)
1000a0e0:	8447883a 	add	r3,r16,r17
1000a0e4:	d8c00215 	stw	r3,8(sp)
1000a0e8:	91400117 	ldw	r5,4(r18)
1000a0ec:	10c0010e 	bge	r2,r3,1000a0f4 <__multiply+0x64>
1000a0f0:	29400044 	addi	r5,r5,1
1000a0f4:	0009c2c0 	call	10009c2c <_Balloc>
1000a0f8:	d8c00217 	ldw	r3,8(sp)
1000a0fc:	d8800615 	stw	r2,24(sp)
1000a100:	18eb883a 	add	r21,r3,r3
1000a104:	ad6b883a 	add	r21,r21,r21
1000a108:	10c00504 	addi	r3,r2,20
1000a10c:	1d6b883a 	add	r21,r3,r21
1000a110:	d8c00115 	stw	r3,4(sp)
1000a114:	dd400315 	stw	r21,12(sp)
1000a118:	1805883a 	mov	r2,r3
1000a11c:	1d40042e 	bgeu	r3,r21,1000a130 <__multiply+0xa0>
1000a120:	d8c00317 	ldw	r3,12(sp)
1000a124:	10000015 	stw	zero,0(r2)
1000a128:	10800104 	addi	r2,r2,4
1000a12c:	10fffc36 	bltu	r2,r3,1000a120 <__alt_data_end+0xf800a120>
1000a130:	8c63883a 	add	r17,r17,r17
1000a134:	b5800504 	addi	r22,r22,20
1000a138:	8c63883a 	add	r17,r17,r17
1000a13c:	94800504 	addi	r18,r18,20
1000a140:	8421883a 	add	r16,r16,r16
1000a144:	b463883a 	add	r17,r22,r17
1000a148:	8421883a 	add	r16,r16,r16
1000a14c:	dd800015 	stw	r22,0(sp)
1000a150:	dc800415 	stw	r18,16(sp)
1000a154:	dc400515 	stw	r17,20(sp)
1000a158:	9429883a 	add	r20,r18,r16
1000a15c:	b4404f2e 	bgeu	r22,r17,1000a29c <__multiply+0x20c>
1000a160:	d8c00017 	ldw	r3,0(sp)
1000a164:	1c800017 	ldw	r18,0(r3)
1000a168:	943fffcc 	andi	r16,r18,65535
1000a16c:	80001e26 	beq	r16,zero,1000a1e8 <__multiply+0x158>
1000a170:	dd800117 	ldw	r22,4(sp)
1000a174:	dd400417 	ldw	r21,16(sp)
1000a178:	0025883a 	mov	r18,zero
1000a17c:	adc00017 	ldw	r23,0(r21)
1000a180:	b4c00017 	ldw	r19,0(r22)
1000a184:	800b883a 	mov	r5,r16
1000a188:	b93fffcc 	andi	r4,r23,65535
1000a18c:	0002be00 	call	10002be0 <__mulsi3>
1000a190:	9c7fffcc 	andi	r17,r19,65535
1000a194:	8885883a 	add	r2,r17,r2
1000a198:	b808d43a 	srli	r4,r23,16
1000a19c:	14a3883a 	add	r17,r2,r18
1000a1a0:	9826d43a 	srli	r19,r19,16
1000a1a4:	8824d43a 	srli	r18,r17,16
1000a1a8:	800b883a 	mov	r5,r16
1000a1ac:	0002be00 	call	10002be0 <__mulsi3>
1000a1b0:	9885883a 	add	r2,r19,r2
1000a1b4:	14a7883a 	add	r19,r2,r18
1000a1b8:	88ffffcc 	andi	r3,r17,65535
1000a1bc:	9822943a 	slli	r17,r19,16
1000a1c0:	ad400104 	addi	r21,r21,4
1000a1c4:	b005883a 	mov	r2,r22
1000a1c8:	88c6b03a 	or	r3,r17,r3
1000a1cc:	b0c00015 	stw	r3,0(r22)
1000a1d0:	9824d43a 	srli	r18,r19,16
1000a1d4:	b5800104 	addi	r22,r22,4
1000a1d8:	ad3fe836 	bltu	r21,r20,1000a17c <__alt_data_end+0xf800a17c>
1000a1dc:	d8c00017 	ldw	r3,0(sp)
1000a1e0:	14800115 	stw	r18,4(r2)
1000a1e4:	1c800017 	ldw	r18,0(r3)
1000a1e8:	9024d43a 	srli	r18,r18,16
1000a1ec:	90002226 	beq	r18,zero,1000a278 <__multiply+0x1e8>
1000a1f0:	d8c00117 	ldw	r3,4(sp)
1000a1f4:	dd800417 	ldw	r22,16(sp)
1000a1f8:	002f883a 	mov	r23,zero
1000a1fc:	1f000017 	ldw	fp,0(r3)
1000a200:	1823883a 	mov	r17,r3
1000a204:	182b883a 	mov	r21,r3
1000a208:	e021883a 	mov	r16,fp
1000a20c:	00000106 	br	1000a214 <__multiply+0x184>
1000a210:	982b883a 	mov	r21,r19
1000a214:	b100000b 	ldhu	r4,0(r22)
1000a218:	8020d43a 	srli	r16,r16,16
1000a21c:	900b883a 	mov	r5,r18
1000a220:	0002be00 	call	10002be0 <__mulsi3>
1000a224:	1405883a 	add	r2,r2,r16
1000a228:	15ef883a 	add	r23,r2,r23
1000a22c:	b804943a 	slli	r2,r23,16
1000a230:	e0ffffcc 	andi	r3,fp,65535
1000a234:	8c400104 	addi	r17,r17,4
1000a238:	10c6b03a 	or	r3,r2,r3
1000a23c:	88ffff15 	stw	r3,-4(r17)
1000a240:	b5800104 	addi	r22,r22,4
1000a244:	b13fff17 	ldw	r4,-4(r22)
1000a248:	acc00104 	addi	r19,r21,4
1000a24c:	900b883a 	mov	r5,r18
1000a250:	2008d43a 	srli	r4,r4,16
1000a254:	9c000017 	ldw	r16,0(r19)
1000a258:	0002be00 	call	10002be0 <__mulsi3>
1000a25c:	b806d43a 	srli	r3,r23,16
1000a260:	813fffcc 	andi	r4,r16,65535
1000a264:	1105883a 	add	r2,r2,r4
1000a268:	10f9883a 	add	fp,r2,r3
1000a26c:	e02ed43a 	srli	r23,fp,16
1000a270:	b53fe736 	bltu	r22,r20,1000a210 <__alt_data_end+0xf800a210>
1000a274:	af000115 	stw	fp,4(r21)
1000a278:	d8c00017 	ldw	r3,0(sp)
1000a27c:	d9000517 	ldw	r4,20(sp)
1000a280:	18c00104 	addi	r3,r3,4
1000a284:	d8c00015 	stw	r3,0(sp)
1000a288:	d8c00117 	ldw	r3,4(sp)
1000a28c:	18c00104 	addi	r3,r3,4
1000a290:	d8c00115 	stw	r3,4(sp)
1000a294:	d8c00017 	ldw	r3,0(sp)
1000a298:	193fb136 	bltu	r3,r4,1000a160 <__alt_data_end+0xf800a160>
1000a29c:	d8c00217 	ldw	r3,8(sp)
1000a2a0:	00c00c0e 	bge	zero,r3,1000a2d4 <__multiply+0x244>
1000a2a4:	d8c00317 	ldw	r3,12(sp)
1000a2a8:	18bfff17 	ldw	r2,-4(r3)
1000a2ac:	1d7fff04 	addi	r21,r3,-4
1000a2b0:	10000326 	beq	r2,zero,1000a2c0 <__multiply+0x230>
1000a2b4:	00000706 	br	1000a2d4 <__multiply+0x244>
1000a2b8:	a8800017 	ldw	r2,0(r21)
1000a2bc:	1000051e 	bne	r2,zero,1000a2d4 <__multiply+0x244>
1000a2c0:	d8c00217 	ldw	r3,8(sp)
1000a2c4:	ad7fff04 	addi	r21,r21,-4
1000a2c8:	18ffffc4 	addi	r3,r3,-1
1000a2cc:	d8c00215 	stw	r3,8(sp)
1000a2d0:	183ff91e 	bne	r3,zero,1000a2b8 <__alt_data_end+0xf800a2b8>
1000a2d4:	d8c00617 	ldw	r3,24(sp)
1000a2d8:	d9000217 	ldw	r4,8(sp)
1000a2dc:	1805883a 	mov	r2,r3
1000a2e0:	19000415 	stw	r4,16(r3)
1000a2e4:	dfc01017 	ldw	ra,64(sp)
1000a2e8:	df000f17 	ldw	fp,60(sp)
1000a2ec:	ddc00e17 	ldw	r23,56(sp)
1000a2f0:	dd800d17 	ldw	r22,52(sp)
1000a2f4:	dd400c17 	ldw	r21,48(sp)
1000a2f8:	dd000b17 	ldw	r20,44(sp)
1000a2fc:	dcc00a17 	ldw	r19,40(sp)
1000a300:	dc800917 	ldw	r18,36(sp)
1000a304:	dc400817 	ldw	r17,32(sp)
1000a308:	dc000717 	ldw	r16,28(sp)
1000a30c:	dec01104 	addi	sp,sp,68
1000a310:	f800283a 	ret
1000a314:	3025883a 	mov	r18,r6
1000a318:	282d883a 	mov	r22,r5
1000a31c:	003f6f06 	br	1000a0dc <__alt_data_end+0xf800a0dc>

1000a320 <__pow5mult>:
1000a320:	defffa04 	addi	sp,sp,-24
1000a324:	dcc00315 	stw	r19,12(sp)
1000a328:	dc800215 	stw	r18,8(sp)
1000a32c:	dc000015 	stw	r16,0(sp)
1000a330:	dfc00515 	stw	ra,20(sp)
1000a334:	dd000415 	stw	r20,16(sp)
1000a338:	dc400115 	stw	r17,4(sp)
1000a33c:	308000cc 	andi	r2,r6,3
1000a340:	3021883a 	mov	r16,r6
1000a344:	2027883a 	mov	r19,r4
1000a348:	2825883a 	mov	r18,r5
1000a34c:	10002e1e 	bne	r2,zero,1000a408 <__pow5mult+0xe8>
1000a350:	8021d0ba 	srai	r16,r16,2
1000a354:	80001a26 	beq	r16,zero,1000a3c0 <__pow5mult+0xa0>
1000a358:	9c401217 	ldw	r17,72(r19)
1000a35c:	8800061e 	bne	r17,zero,1000a378 <__pow5mult+0x58>
1000a360:	00003406 	br	1000a434 <__pow5mult+0x114>
1000a364:	8021d07a 	srai	r16,r16,1
1000a368:	80001526 	beq	r16,zero,1000a3c0 <__pow5mult+0xa0>
1000a36c:	88800017 	ldw	r2,0(r17)
1000a370:	10001c26 	beq	r2,zero,1000a3e4 <__pow5mult+0xc4>
1000a374:	1023883a 	mov	r17,r2
1000a378:	80c0004c 	andi	r3,r16,1
1000a37c:	183ff926 	beq	r3,zero,1000a364 <__alt_data_end+0xf800a364>
1000a380:	900b883a 	mov	r5,r18
1000a384:	880d883a 	mov	r6,r17
1000a388:	9809883a 	mov	r4,r19
1000a38c:	000a0900 	call	1000a090 <__multiply>
1000a390:	90001b26 	beq	r18,zero,1000a400 <__pow5mult+0xe0>
1000a394:	91c00117 	ldw	r7,4(r18)
1000a398:	98c01317 	ldw	r3,76(r19)
1000a39c:	8021d07a 	srai	r16,r16,1
1000a3a0:	39cf883a 	add	r7,r7,r7
1000a3a4:	39cf883a 	add	r7,r7,r7
1000a3a8:	19c7883a 	add	r3,r3,r7
1000a3ac:	19000017 	ldw	r4,0(r3)
1000a3b0:	91000015 	stw	r4,0(r18)
1000a3b4:	1c800015 	stw	r18,0(r3)
1000a3b8:	1025883a 	mov	r18,r2
1000a3bc:	803feb1e 	bne	r16,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a3c0:	9005883a 	mov	r2,r18
1000a3c4:	dfc00517 	ldw	ra,20(sp)
1000a3c8:	dd000417 	ldw	r20,16(sp)
1000a3cc:	dcc00317 	ldw	r19,12(sp)
1000a3d0:	dc800217 	ldw	r18,8(sp)
1000a3d4:	dc400117 	ldw	r17,4(sp)
1000a3d8:	dc000017 	ldw	r16,0(sp)
1000a3dc:	dec00604 	addi	sp,sp,24
1000a3e0:	f800283a 	ret
1000a3e4:	9809883a 	mov	r4,r19
1000a3e8:	880b883a 	mov	r5,r17
1000a3ec:	880d883a 	mov	r6,r17
1000a3f0:	000a0900 	call	1000a090 <__multiply>
1000a3f4:	88800015 	stw	r2,0(r17)
1000a3f8:	10000015 	stw	zero,0(r2)
1000a3fc:	003fdd06 	br	1000a374 <__alt_data_end+0xf800a374>
1000a400:	1025883a 	mov	r18,r2
1000a404:	003fd706 	br	1000a364 <__alt_data_end+0xf800a364>
1000a408:	10bfffc4 	addi	r2,r2,-1
1000a40c:	1085883a 	add	r2,r2,r2
1000a410:	00c40074 	movhi	r3,4097
1000a414:	18c4c704 	addi	r3,r3,4892
1000a418:	1085883a 	add	r2,r2,r2
1000a41c:	1885883a 	add	r2,r3,r2
1000a420:	11800017 	ldw	r6,0(r2)
1000a424:	000f883a 	mov	r7,zero
1000a428:	0009cfc0 	call	10009cfc <__multadd>
1000a42c:	1025883a 	mov	r18,r2
1000a430:	003fc706 	br	1000a350 <__alt_data_end+0xf800a350>
1000a434:	05000044 	movi	r20,1
1000a438:	9809883a 	mov	r4,r19
1000a43c:	a00b883a 	mov	r5,r20
1000a440:	0009c2c0 	call	10009c2c <_Balloc>
1000a444:	1023883a 	mov	r17,r2
1000a448:	00809c44 	movi	r2,625
1000a44c:	88800515 	stw	r2,20(r17)
1000a450:	8d000415 	stw	r20,16(r17)
1000a454:	9c401215 	stw	r17,72(r19)
1000a458:	88000015 	stw	zero,0(r17)
1000a45c:	003fc606 	br	1000a378 <__alt_data_end+0xf800a378>

1000a460 <__lshift>:
1000a460:	defff904 	addi	sp,sp,-28
1000a464:	dd000415 	stw	r20,16(sp)
1000a468:	dcc00315 	stw	r19,12(sp)
1000a46c:	3029d17a 	srai	r20,r6,5
1000a470:	2cc00417 	ldw	r19,16(r5)
1000a474:	28800217 	ldw	r2,8(r5)
1000a478:	dd400515 	stw	r21,20(sp)
1000a47c:	a4e7883a 	add	r19,r20,r19
1000a480:	dc800215 	stw	r18,8(sp)
1000a484:	dc400115 	stw	r17,4(sp)
1000a488:	dc000015 	stw	r16,0(sp)
1000a48c:	dfc00615 	stw	ra,24(sp)
1000a490:	9c000044 	addi	r16,r19,1
1000a494:	2823883a 	mov	r17,r5
1000a498:	302b883a 	mov	r21,r6
1000a49c:	2025883a 	mov	r18,r4
1000a4a0:	29400117 	ldw	r5,4(r5)
1000a4a4:	1400030e 	bge	r2,r16,1000a4b4 <__lshift+0x54>
1000a4a8:	1085883a 	add	r2,r2,r2
1000a4ac:	29400044 	addi	r5,r5,1
1000a4b0:	143ffd16 	blt	r2,r16,1000a4a8 <__alt_data_end+0xf800a4a8>
1000a4b4:	9009883a 	mov	r4,r18
1000a4b8:	0009c2c0 	call	10009c2c <_Balloc>
1000a4bc:	11c00504 	addi	r7,r2,20
1000a4c0:	0500090e 	bge	zero,r20,1000a4e8 <__lshift+0x88>
1000a4c4:	3811883a 	mov	r8,r7
1000a4c8:	0007883a 	mov	r3,zero
1000a4cc:	40000015 	stw	zero,0(r8)
1000a4d0:	18c00044 	addi	r3,r3,1
1000a4d4:	42000104 	addi	r8,r8,4
1000a4d8:	1d3ffc1e 	bne	r3,r20,1000a4cc <__alt_data_end+0xf800a4cc>
1000a4dc:	18c7883a 	add	r3,r3,r3
1000a4e0:	18c7883a 	add	r3,r3,r3
1000a4e4:	38cf883a 	add	r7,r7,r3
1000a4e8:	89000417 	ldw	r4,16(r17)
1000a4ec:	88c00504 	addi	r3,r17,20
1000a4f0:	a98007cc 	andi	r6,r21,31
1000a4f4:	2109883a 	add	r4,r4,r4
1000a4f8:	2109883a 	add	r4,r4,r4
1000a4fc:	1909883a 	add	r4,r3,r4
1000a500:	30002326 	beq	r6,zero,1000a590 <__lshift+0x130>
1000a504:	01400804 	movi	r5,32
1000a508:	298bc83a 	sub	r5,r5,r6
1000a50c:	0013883a 	mov	r9,zero
1000a510:	1a000017 	ldw	r8,0(r3)
1000a514:	3815883a 	mov	r10,r7
1000a518:	39c00104 	addi	r7,r7,4
1000a51c:	4190983a 	sll	r8,r8,r6
1000a520:	18c00104 	addi	r3,r3,4
1000a524:	4a10b03a 	or	r8,r9,r8
1000a528:	3a3fff15 	stw	r8,-4(r7)
1000a52c:	1a3fff17 	ldw	r8,-4(r3)
1000a530:	4152d83a 	srl	r9,r8,r5
1000a534:	193ff636 	bltu	r3,r4,1000a510 <__alt_data_end+0xf800a510>
1000a538:	52400115 	stw	r9,4(r10)
1000a53c:	48000126 	beq	r9,zero,1000a544 <__lshift+0xe4>
1000a540:	9c000084 	addi	r16,r19,2
1000a544:	89000117 	ldw	r4,4(r17)
1000a548:	90c01317 	ldw	r3,76(r18)
1000a54c:	843fffc4 	addi	r16,r16,-1
1000a550:	2109883a 	add	r4,r4,r4
1000a554:	2109883a 	add	r4,r4,r4
1000a558:	1907883a 	add	r3,r3,r4
1000a55c:	19000017 	ldw	r4,0(r3)
1000a560:	14000415 	stw	r16,16(r2)
1000a564:	89000015 	stw	r4,0(r17)
1000a568:	1c400015 	stw	r17,0(r3)
1000a56c:	dfc00617 	ldw	ra,24(sp)
1000a570:	dd400517 	ldw	r21,20(sp)
1000a574:	dd000417 	ldw	r20,16(sp)
1000a578:	dcc00317 	ldw	r19,12(sp)
1000a57c:	dc800217 	ldw	r18,8(sp)
1000a580:	dc400117 	ldw	r17,4(sp)
1000a584:	dc000017 	ldw	r16,0(sp)
1000a588:	dec00704 	addi	sp,sp,28
1000a58c:	f800283a 	ret
1000a590:	19400017 	ldw	r5,0(r3)
1000a594:	39c00104 	addi	r7,r7,4
1000a598:	18c00104 	addi	r3,r3,4
1000a59c:	397fff15 	stw	r5,-4(r7)
1000a5a0:	193ffb36 	bltu	r3,r4,1000a590 <__alt_data_end+0xf800a590>
1000a5a4:	003fe706 	br	1000a544 <__alt_data_end+0xf800a544>

1000a5a8 <__mcmp>:
1000a5a8:	20800417 	ldw	r2,16(r4)
1000a5ac:	28c00417 	ldw	r3,16(r5)
1000a5b0:	10c5c83a 	sub	r2,r2,r3
1000a5b4:	1000111e 	bne	r2,zero,1000a5fc <__mcmp+0x54>
1000a5b8:	18c7883a 	add	r3,r3,r3
1000a5bc:	18c7883a 	add	r3,r3,r3
1000a5c0:	21000504 	addi	r4,r4,20
1000a5c4:	29400504 	addi	r5,r5,20
1000a5c8:	20c5883a 	add	r2,r4,r3
1000a5cc:	28cb883a 	add	r5,r5,r3
1000a5d0:	00000106 	br	1000a5d8 <__mcmp+0x30>
1000a5d4:	20800a2e 	bgeu	r4,r2,1000a600 <__mcmp+0x58>
1000a5d8:	10bfff04 	addi	r2,r2,-4
1000a5dc:	297fff04 	addi	r5,r5,-4
1000a5e0:	11800017 	ldw	r6,0(r2)
1000a5e4:	28c00017 	ldw	r3,0(r5)
1000a5e8:	30fffa26 	beq	r6,r3,1000a5d4 <__alt_data_end+0xf800a5d4>
1000a5ec:	30c00236 	bltu	r6,r3,1000a5f8 <__mcmp+0x50>
1000a5f0:	00800044 	movi	r2,1
1000a5f4:	f800283a 	ret
1000a5f8:	00bfffc4 	movi	r2,-1
1000a5fc:	f800283a 	ret
1000a600:	0005883a 	mov	r2,zero
1000a604:	f800283a 	ret

1000a608 <__mdiff>:
1000a608:	defffb04 	addi	sp,sp,-20
1000a60c:	dc000015 	stw	r16,0(sp)
1000a610:	2821883a 	mov	r16,r5
1000a614:	dcc00315 	stw	r19,12(sp)
1000a618:	300b883a 	mov	r5,r6
1000a61c:	2027883a 	mov	r19,r4
1000a620:	8009883a 	mov	r4,r16
1000a624:	dc800215 	stw	r18,8(sp)
1000a628:	dfc00415 	stw	ra,16(sp)
1000a62c:	dc400115 	stw	r17,4(sp)
1000a630:	3025883a 	mov	r18,r6
1000a634:	000a5a80 	call	1000a5a8 <__mcmp>
1000a638:	10005226 	beq	r2,zero,1000a784 <__mdiff+0x17c>
1000a63c:	10004c16 	blt	r2,zero,1000a770 <__mdiff+0x168>
1000a640:	0023883a 	mov	r17,zero
1000a644:	81400117 	ldw	r5,4(r16)
1000a648:	9809883a 	mov	r4,r19
1000a64c:	0009c2c0 	call	10009c2c <_Balloc>
1000a650:	83400417 	ldw	r13,16(r16)
1000a654:	93800417 	ldw	r14,16(r18)
1000a658:	81000504 	addi	r4,r16,20
1000a65c:	6b59883a 	add	r12,r13,r13
1000a660:	739d883a 	add	r14,r14,r14
1000a664:	6319883a 	add	r12,r12,r12
1000a668:	91800504 	addi	r6,r18,20
1000a66c:	739d883a 	add	r14,r14,r14
1000a670:	14400315 	stw	r17,12(r2)
1000a674:	2319883a 	add	r12,r4,r12
1000a678:	339d883a 	add	r14,r6,r14
1000a67c:	12400504 	addi	r9,r2,20
1000a680:	0007883a 	mov	r3,zero
1000a684:	22000017 	ldw	r8,0(r4)
1000a688:	32800017 	ldw	r10,0(r6)
1000a68c:	4ac00104 	addi	r11,r9,4
1000a690:	41ffffcc 	andi	r7,r8,65535
1000a694:	38c7883a 	add	r3,r7,r3
1000a698:	51ffffcc 	andi	r7,r10,65535
1000a69c:	19cfc83a 	sub	r7,r3,r7
1000a6a0:	4010d43a 	srli	r8,r8,16
1000a6a4:	5014d43a 	srli	r10,r10,16
1000a6a8:	3807d43a 	srai	r3,r7,16
1000a6ac:	39ffffcc 	andi	r7,r7,65535
1000a6b0:	4291c83a 	sub	r8,r8,r10
1000a6b4:	40c7883a 	add	r3,r8,r3
1000a6b8:	1810943a 	slli	r8,r3,16
1000a6bc:	31800104 	addi	r6,r6,4
1000a6c0:	21000104 	addi	r4,r4,4
1000a6c4:	41ceb03a 	or	r7,r8,r7
1000a6c8:	49c00015 	stw	r7,0(r9)
1000a6cc:	1807d43a 	srai	r3,r3,16
1000a6d0:	580b883a 	mov	r5,r11
1000a6d4:	5813883a 	mov	r9,r11
1000a6d8:	33bfea36 	bltu	r6,r14,1000a684 <__alt_data_end+0xf800a684>
1000a6dc:	2011883a 	mov	r8,r4
1000a6e0:	2300152e 	bgeu	r4,r12,1000a738 <__mdiff+0x130>
1000a6e4:	21400017 	ldw	r5,0(r4)
1000a6e8:	4a400104 	addi	r9,r9,4
1000a6ec:	21000104 	addi	r4,r4,4
1000a6f0:	29ffffcc 	andi	r7,r5,65535
1000a6f4:	38c7883a 	add	r3,r7,r3
1000a6f8:	280ad43a 	srli	r5,r5,16
1000a6fc:	180dd43a 	srai	r6,r3,16
1000a700:	19ffffcc 	andi	r7,r3,65535
1000a704:	3147883a 	add	r3,r6,r5
1000a708:	180a943a 	slli	r5,r3,16
1000a70c:	1807d43a 	srai	r3,r3,16
1000a710:	29ceb03a 	or	r7,r5,r7
1000a714:	49ffff15 	stw	r7,-4(r9)
1000a718:	233ff236 	bltu	r4,r12,1000a6e4 <__alt_data_end+0xf800a6e4>
1000a71c:	0206303a 	nor	r3,zero,r8
1000a720:	1b07883a 	add	r3,r3,r12
1000a724:	1806d0ba 	srli	r3,r3,2
1000a728:	18c00044 	addi	r3,r3,1
1000a72c:	18c7883a 	add	r3,r3,r3
1000a730:	18c7883a 	add	r3,r3,r3
1000a734:	58cb883a 	add	r5,r11,r3
1000a738:	28ffff04 	addi	r3,r5,-4
1000a73c:	3800041e 	bne	r7,zero,1000a750 <__mdiff+0x148>
1000a740:	18ffff04 	addi	r3,r3,-4
1000a744:	19000017 	ldw	r4,0(r3)
1000a748:	6b7fffc4 	addi	r13,r13,-1
1000a74c:	203ffc26 	beq	r4,zero,1000a740 <__alt_data_end+0xf800a740>
1000a750:	13400415 	stw	r13,16(r2)
1000a754:	dfc00417 	ldw	ra,16(sp)
1000a758:	dcc00317 	ldw	r19,12(sp)
1000a75c:	dc800217 	ldw	r18,8(sp)
1000a760:	dc400117 	ldw	r17,4(sp)
1000a764:	dc000017 	ldw	r16,0(sp)
1000a768:	dec00504 	addi	sp,sp,20
1000a76c:	f800283a 	ret
1000a770:	8005883a 	mov	r2,r16
1000a774:	04400044 	movi	r17,1
1000a778:	9021883a 	mov	r16,r18
1000a77c:	1025883a 	mov	r18,r2
1000a780:	003fb006 	br	1000a644 <__alt_data_end+0xf800a644>
1000a784:	9809883a 	mov	r4,r19
1000a788:	000b883a 	mov	r5,zero
1000a78c:	0009c2c0 	call	10009c2c <_Balloc>
1000a790:	00c00044 	movi	r3,1
1000a794:	10c00415 	stw	r3,16(r2)
1000a798:	10000515 	stw	zero,20(r2)
1000a79c:	003fed06 	br	1000a754 <__alt_data_end+0xf800a754>

1000a7a0 <__ulp>:
1000a7a0:	295ffc2c 	andhi	r5,r5,32752
1000a7a4:	00bf3034 	movhi	r2,64704
1000a7a8:	2887883a 	add	r3,r5,r2
1000a7ac:	00c0020e 	bge	zero,r3,1000a7b8 <__ulp+0x18>
1000a7b0:	0005883a 	mov	r2,zero
1000a7b4:	f800283a 	ret
1000a7b8:	00c7c83a 	sub	r3,zero,r3
1000a7bc:	180bd53a 	srai	r5,r3,20
1000a7c0:	008004c4 	movi	r2,19
1000a7c4:	11400a0e 	bge	r2,r5,1000a7f0 <__ulp+0x50>
1000a7c8:	00800c84 	movi	r2,50
1000a7cc:	0007883a 	mov	r3,zero
1000a7d0:	11400516 	blt	r2,r5,1000a7e8 <__ulp+0x48>
1000a7d4:	00800cc4 	movi	r2,51
1000a7d8:	114bc83a 	sub	r5,r2,r5
1000a7dc:	00800044 	movi	r2,1
1000a7e0:	1144983a 	sll	r2,r2,r5
1000a7e4:	f800283a 	ret
1000a7e8:	00800044 	movi	r2,1
1000a7ec:	f800283a 	ret
1000a7f0:	00800234 	movhi	r2,8
1000a7f4:	1147d83a 	sra	r3,r2,r5
1000a7f8:	0005883a 	mov	r2,zero
1000a7fc:	f800283a 	ret

1000a800 <__b2d>:
1000a800:	defffa04 	addi	sp,sp,-24
1000a804:	dc000015 	stw	r16,0(sp)
1000a808:	24000417 	ldw	r16,16(r4)
1000a80c:	dc400115 	stw	r17,4(sp)
1000a810:	24400504 	addi	r17,r4,20
1000a814:	8421883a 	add	r16,r16,r16
1000a818:	8421883a 	add	r16,r16,r16
1000a81c:	8c21883a 	add	r16,r17,r16
1000a820:	dc800215 	stw	r18,8(sp)
1000a824:	84bfff17 	ldw	r18,-4(r16)
1000a828:	dd000415 	stw	r20,16(sp)
1000a82c:	dcc00315 	stw	r19,12(sp)
1000a830:	9009883a 	mov	r4,r18
1000a834:	2829883a 	mov	r20,r5
1000a838:	dfc00515 	stw	ra,20(sp)
1000a83c:	0009f3c0 	call	10009f3c <__hi0bits>
1000a840:	00c00804 	movi	r3,32
1000a844:	1887c83a 	sub	r3,r3,r2
1000a848:	a0c00015 	stw	r3,0(r20)
1000a84c:	00c00284 	movi	r3,10
1000a850:	84ffff04 	addi	r19,r16,-4
1000a854:	18801216 	blt	r3,r2,1000a8a0 <__b2d+0xa0>
1000a858:	014002c4 	movi	r5,11
1000a85c:	2889c83a 	sub	r4,r5,r2
1000a860:	9106d83a 	srl	r3,r18,r4
1000a864:	18cffc34 	orhi	r3,r3,16368
1000a868:	8cc0282e 	bgeu	r17,r19,1000a90c <__b2d+0x10c>
1000a86c:	817ffe17 	ldw	r5,-8(r16)
1000a870:	290ad83a 	srl	r5,r5,r4
1000a874:	10800544 	addi	r2,r2,21
1000a878:	9084983a 	sll	r2,r18,r2
1000a87c:	2884b03a 	or	r2,r5,r2
1000a880:	dfc00517 	ldw	ra,20(sp)
1000a884:	dd000417 	ldw	r20,16(sp)
1000a888:	dcc00317 	ldw	r19,12(sp)
1000a88c:	dc800217 	ldw	r18,8(sp)
1000a890:	dc400117 	ldw	r17,4(sp)
1000a894:	dc000017 	ldw	r16,0(sp)
1000a898:	dec00604 	addi	sp,sp,24
1000a89c:	f800283a 	ret
1000a8a0:	113ffd44 	addi	r4,r2,-11
1000a8a4:	8cc00f2e 	bgeu	r17,r19,1000a8e4 <__b2d+0xe4>
1000a8a8:	81bffe04 	addi	r6,r16,-8
1000a8ac:	817ffe17 	ldw	r5,-8(r16)
1000a8b0:	20001326 	beq	r4,zero,1000a900 <__b2d+0x100>
1000a8b4:	00c00ac4 	movi	r3,43
1000a8b8:	1885c83a 	sub	r2,r3,r2
1000a8bc:	2886d83a 	srl	r3,r5,r2
1000a8c0:	9124983a 	sll	r18,r18,r4
1000a8c4:	90e4b03a 	or	r18,r18,r3
1000a8c8:	90cffc34 	orhi	r3,r18,16368
1000a8cc:	8980112e 	bgeu	r17,r6,1000a914 <__b2d+0x114>
1000a8d0:	81bffd17 	ldw	r6,-12(r16)
1000a8d4:	308cd83a 	srl	r6,r6,r2
1000a8d8:	2904983a 	sll	r2,r5,r4
1000a8dc:	1184b03a 	or	r2,r2,r6
1000a8e0:	003fe706 	br	1000a880 <__alt_data_end+0xf800a880>
1000a8e4:	20000526 	beq	r4,zero,1000a8fc <__b2d+0xfc>
1000a8e8:	9124983a 	sll	r18,r18,r4
1000a8ec:	000d883a 	mov	r6,zero
1000a8f0:	000b883a 	mov	r5,zero
1000a8f4:	90cffc34 	orhi	r3,r18,16368
1000a8f8:	003ff706 	br	1000a8d8 <__alt_data_end+0xf800a8d8>
1000a8fc:	000b883a 	mov	r5,zero
1000a900:	90cffc34 	orhi	r3,r18,16368
1000a904:	2805883a 	mov	r2,r5
1000a908:	003fdd06 	br	1000a880 <__alt_data_end+0xf800a880>
1000a90c:	000b883a 	mov	r5,zero
1000a910:	003fd806 	br	1000a874 <__alt_data_end+0xf800a874>
1000a914:	000d883a 	mov	r6,zero
1000a918:	003fef06 	br	1000a8d8 <__alt_data_end+0xf800a8d8>

1000a91c <__d2b>:
1000a91c:	defff704 	addi	sp,sp,-36
1000a920:	dc000215 	stw	r16,8(sp)
1000a924:	3021883a 	mov	r16,r6
1000a928:	dc400315 	stw	r17,12(sp)
1000a92c:	8022907a 	slli	r17,r16,1
1000a930:	dd400715 	stw	r21,28(sp)
1000a934:	282b883a 	mov	r21,r5
1000a938:	01400044 	movi	r5,1
1000a93c:	dd000615 	stw	r20,24(sp)
1000a940:	dcc00515 	stw	r19,20(sp)
1000a944:	dc800415 	stw	r18,16(sp)
1000a948:	dfc00815 	stw	ra,32(sp)
1000a94c:	3829883a 	mov	r20,r7
1000a950:	dc800917 	ldw	r18,36(sp)
1000a954:	8822d57a 	srli	r17,r17,21
1000a958:	0009c2c0 	call	10009c2c <_Balloc>
1000a95c:	1027883a 	mov	r19,r2
1000a960:	00800434 	movhi	r2,16
1000a964:	10bfffc4 	addi	r2,r2,-1
1000a968:	808c703a 	and	r6,r16,r2
1000a96c:	88000126 	beq	r17,zero,1000a974 <__d2b+0x58>
1000a970:	31800434 	orhi	r6,r6,16
1000a974:	d9800015 	stw	r6,0(sp)
1000a978:	a8001f26 	beq	r21,zero,1000a9f8 <__d2b+0xdc>
1000a97c:	d9000104 	addi	r4,sp,4
1000a980:	dd400115 	stw	r21,4(sp)
1000a984:	0009fa40 	call	10009fa4 <__lo0bits>
1000a988:	d8c00017 	ldw	r3,0(sp)
1000a98c:	1000291e 	bne	r2,zero,1000aa34 <__d2b+0x118>
1000a990:	d9000117 	ldw	r4,4(sp)
1000a994:	99000515 	stw	r4,20(r19)
1000a998:	1820c03a 	cmpne	r16,r3,zero
1000a99c:	84000044 	addi	r16,r16,1
1000a9a0:	98c00615 	stw	r3,24(r19)
1000a9a4:	9c000415 	stw	r16,16(r19)
1000a9a8:	88001b1e 	bne	r17,zero,1000aa18 <__d2b+0xfc>
1000a9ac:	800690ba 	slli	r3,r16,2
1000a9b0:	10bef384 	addi	r2,r2,-1074
1000a9b4:	a0800015 	stw	r2,0(r20)
1000a9b8:	98c5883a 	add	r2,r19,r3
1000a9bc:	11000417 	ldw	r4,16(r2)
1000a9c0:	8020917a 	slli	r16,r16,5
1000a9c4:	0009f3c0 	call	10009f3c <__hi0bits>
1000a9c8:	8085c83a 	sub	r2,r16,r2
1000a9cc:	90800015 	stw	r2,0(r18)
1000a9d0:	9805883a 	mov	r2,r19
1000a9d4:	dfc00817 	ldw	ra,32(sp)
1000a9d8:	dd400717 	ldw	r21,28(sp)
1000a9dc:	dd000617 	ldw	r20,24(sp)
1000a9e0:	dcc00517 	ldw	r19,20(sp)
1000a9e4:	dc800417 	ldw	r18,16(sp)
1000a9e8:	dc400317 	ldw	r17,12(sp)
1000a9ec:	dc000217 	ldw	r16,8(sp)
1000a9f0:	dec00904 	addi	sp,sp,36
1000a9f4:	f800283a 	ret
1000a9f8:	d809883a 	mov	r4,sp
1000a9fc:	0009fa40 	call	10009fa4 <__lo0bits>
1000aa00:	d8c00017 	ldw	r3,0(sp)
1000aa04:	04000044 	movi	r16,1
1000aa08:	9c000415 	stw	r16,16(r19)
1000aa0c:	98c00515 	stw	r3,20(r19)
1000aa10:	10800804 	addi	r2,r2,32
1000aa14:	883fe526 	beq	r17,zero,1000a9ac <__alt_data_end+0xf800a9ac>
1000aa18:	8c7ef344 	addi	r17,r17,-1075
1000aa1c:	88a3883a 	add	r17,r17,r2
1000aa20:	00c00d44 	movi	r3,53
1000aa24:	a4400015 	stw	r17,0(r20)
1000aa28:	1885c83a 	sub	r2,r3,r2
1000aa2c:	90800015 	stw	r2,0(r18)
1000aa30:	003fe706 	br	1000a9d0 <__alt_data_end+0xf800a9d0>
1000aa34:	01000804 	movi	r4,32
1000aa38:	2089c83a 	sub	r4,r4,r2
1000aa3c:	1908983a 	sll	r4,r3,r4
1000aa40:	d9400117 	ldw	r5,4(sp)
1000aa44:	1886d83a 	srl	r3,r3,r2
1000aa48:	2148b03a 	or	r4,r4,r5
1000aa4c:	99000515 	stw	r4,20(r19)
1000aa50:	d8c00015 	stw	r3,0(sp)
1000aa54:	003fd006 	br	1000a998 <__alt_data_end+0xf800a998>

1000aa58 <__ratio>:
1000aa58:	defff904 	addi	sp,sp,-28
1000aa5c:	dc400315 	stw	r17,12(sp)
1000aa60:	2823883a 	mov	r17,r5
1000aa64:	d9400104 	addi	r5,sp,4
1000aa68:	dfc00615 	stw	ra,24(sp)
1000aa6c:	dcc00515 	stw	r19,20(sp)
1000aa70:	dc800415 	stw	r18,16(sp)
1000aa74:	2027883a 	mov	r19,r4
1000aa78:	dc000215 	stw	r16,8(sp)
1000aa7c:	000a8000 	call	1000a800 <__b2d>
1000aa80:	8809883a 	mov	r4,r17
1000aa84:	d80b883a 	mov	r5,sp
1000aa88:	1025883a 	mov	r18,r2
1000aa8c:	1821883a 	mov	r16,r3
1000aa90:	000a8000 	call	1000a800 <__b2d>
1000aa94:	8a400417 	ldw	r9,16(r17)
1000aa98:	9a000417 	ldw	r8,16(r19)
1000aa9c:	100d883a 	mov	r6,r2
1000aaa0:	d8800017 	ldw	r2,0(sp)
1000aaa4:	4251c83a 	sub	r8,r8,r9
1000aaa8:	4012917a 	slli	r9,r8,5
1000aaac:	da000117 	ldw	r8,4(sp)
1000aab0:	4091c83a 	sub	r8,r8,r2
1000aab4:	4251883a 	add	r8,r8,r9
1000aab8:	02000d0e 	bge	zero,r8,1000aaf0 <__ratio+0x98>
1000aabc:	4010953a 	slli	r8,r8,20
1000aac0:	4421883a 	add	r16,r8,r16
1000aac4:	9009883a 	mov	r4,r18
1000aac8:	800b883a 	mov	r5,r16
1000aacc:	180f883a 	mov	r7,r3
1000aad0:	000d4700 	call	1000d470 <__divdf3>
1000aad4:	dfc00617 	ldw	ra,24(sp)
1000aad8:	dcc00517 	ldw	r19,20(sp)
1000aadc:	dc800417 	ldw	r18,16(sp)
1000aae0:	dc400317 	ldw	r17,12(sp)
1000aae4:	dc000217 	ldw	r16,8(sp)
1000aae8:	dec00704 	addi	sp,sp,28
1000aaec:	f800283a 	ret
1000aaf0:	4010953a 	slli	r8,r8,20
1000aaf4:	1a07c83a 	sub	r3,r3,r8
1000aaf8:	003ff206 	br	1000aac4 <__alt_data_end+0xf800aac4>

1000aafc <_mprec_log10>:
1000aafc:	defffe04 	addi	sp,sp,-8
1000ab00:	dc000015 	stw	r16,0(sp)
1000ab04:	dfc00115 	stw	ra,4(sp)
1000ab08:	008005c4 	movi	r2,23
1000ab0c:	2021883a 	mov	r16,r4
1000ab10:	11000d0e 	bge	r2,r4,1000ab48 <_mprec_log10+0x4c>
1000ab14:	0005883a 	mov	r2,zero
1000ab18:	00cffc34 	movhi	r3,16368
1000ab1c:	843fffc4 	addi	r16,r16,-1
1000ab20:	1009883a 	mov	r4,r2
1000ab24:	180b883a 	mov	r5,r3
1000ab28:	000d883a 	mov	r6,zero
1000ab2c:	01d00934 	movhi	r7,16420
1000ab30:	000e0340 	call	1000e034 <__muldf3>
1000ab34:	803ff91e 	bne	r16,zero,1000ab1c <__alt_data_end+0xf800ab1c>
1000ab38:	dfc00117 	ldw	ra,4(sp)
1000ab3c:	dc000017 	ldw	r16,0(sp)
1000ab40:	dec00204 	addi	sp,sp,8
1000ab44:	f800283a 	ret
1000ab48:	202090fa 	slli	r16,r4,3
1000ab4c:	00840074 	movhi	r2,4097
1000ab50:	1084de04 	addi	r2,r2,4984
1000ab54:	1421883a 	add	r16,r2,r16
1000ab58:	80800017 	ldw	r2,0(r16)
1000ab5c:	80c00117 	ldw	r3,4(r16)
1000ab60:	dfc00117 	ldw	ra,4(sp)
1000ab64:	dc000017 	ldw	r16,0(sp)
1000ab68:	dec00204 	addi	sp,sp,8
1000ab6c:	f800283a 	ret

1000ab70 <__copybits>:
1000ab70:	297fffc4 	addi	r5,r5,-1
1000ab74:	280fd17a 	srai	r7,r5,5
1000ab78:	30c00417 	ldw	r3,16(r6)
1000ab7c:	30800504 	addi	r2,r6,20
1000ab80:	39c00044 	addi	r7,r7,1
1000ab84:	18c7883a 	add	r3,r3,r3
1000ab88:	39cf883a 	add	r7,r7,r7
1000ab8c:	18c7883a 	add	r3,r3,r3
1000ab90:	39cf883a 	add	r7,r7,r7
1000ab94:	10c7883a 	add	r3,r2,r3
1000ab98:	21cf883a 	add	r7,r4,r7
1000ab9c:	10c00d2e 	bgeu	r2,r3,1000abd4 <__copybits+0x64>
1000aba0:	200b883a 	mov	r5,r4
1000aba4:	12000017 	ldw	r8,0(r2)
1000aba8:	29400104 	addi	r5,r5,4
1000abac:	10800104 	addi	r2,r2,4
1000abb0:	2a3fff15 	stw	r8,-4(r5)
1000abb4:	10fffb36 	bltu	r2,r3,1000aba4 <__alt_data_end+0xf800aba4>
1000abb8:	1985c83a 	sub	r2,r3,r6
1000abbc:	10bffac4 	addi	r2,r2,-21
1000abc0:	1004d0ba 	srli	r2,r2,2
1000abc4:	10800044 	addi	r2,r2,1
1000abc8:	1085883a 	add	r2,r2,r2
1000abcc:	1085883a 	add	r2,r2,r2
1000abd0:	2089883a 	add	r4,r4,r2
1000abd4:	21c0032e 	bgeu	r4,r7,1000abe4 <__copybits+0x74>
1000abd8:	20000015 	stw	zero,0(r4)
1000abdc:	21000104 	addi	r4,r4,4
1000abe0:	21fffd36 	bltu	r4,r7,1000abd8 <__alt_data_end+0xf800abd8>
1000abe4:	f800283a 	ret

1000abe8 <__any_on>:
1000abe8:	20c00417 	ldw	r3,16(r4)
1000abec:	2805d17a 	srai	r2,r5,5
1000abf0:	21000504 	addi	r4,r4,20
1000abf4:	18800d0e 	bge	r3,r2,1000ac2c <__any_on+0x44>
1000abf8:	18c7883a 	add	r3,r3,r3
1000abfc:	18c7883a 	add	r3,r3,r3
1000ac00:	20c7883a 	add	r3,r4,r3
1000ac04:	20c0192e 	bgeu	r4,r3,1000ac6c <__any_on+0x84>
1000ac08:	18bfff17 	ldw	r2,-4(r3)
1000ac0c:	18ffff04 	addi	r3,r3,-4
1000ac10:	1000041e 	bne	r2,zero,1000ac24 <__any_on+0x3c>
1000ac14:	20c0142e 	bgeu	r4,r3,1000ac68 <__any_on+0x80>
1000ac18:	18ffff04 	addi	r3,r3,-4
1000ac1c:	19400017 	ldw	r5,0(r3)
1000ac20:	283ffc26 	beq	r5,zero,1000ac14 <__alt_data_end+0xf800ac14>
1000ac24:	00800044 	movi	r2,1
1000ac28:	f800283a 	ret
1000ac2c:	10c00a0e 	bge	r2,r3,1000ac58 <__any_on+0x70>
1000ac30:	1085883a 	add	r2,r2,r2
1000ac34:	1085883a 	add	r2,r2,r2
1000ac38:	294007cc 	andi	r5,r5,31
1000ac3c:	2087883a 	add	r3,r4,r2
1000ac40:	283ff026 	beq	r5,zero,1000ac04 <__alt_data_end+0xf800ac04>
1000ac44:	19800017 	ldw	r6,0(r3)
1000ac48:	3144d83a 	srl	r2,r6,r5
1000ac4c:	114a983a 	sll	r5,r2,r5
1000ac50:	29bff41e 	bne	r5,r6,1000ac24 <__alt_data_end+0xf800ac24>
1000ac54:	003feb06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000ac58:	1085883a 	add	r2,r2,r2
1000ac5c:	1085883a 	add	r2,r2,r2
1000ac60:	2087883a 	add	r3,r4,r2
1000ac64:	003fe706 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000ac68:	f800283a 	ret
1000ac6c:	0005883a 	mov	r2,zero
1000ac70:	f800283a 	ret

1000ac74 <_realloc_r>:
1000ac74:	defff604 	addi	sp,sp,-40
1000ac78:	dcc00315 	stw	r19,12(sp)
1000ac7c:	dc400115 	stw	r17,4(sp)
1000ac80:	dfc00915 	stw	ra,36(sp)
1000ac84:	df000815 	stw	fp,32(sp)
1000ac88:	ddc00715 	stw	r23,28(sp)
1000ac8c:	dd800615 	stw	r22,24(sp)
1000ac90:	dd400515 	stw	r21,20(sp)
1000ac94:	dd000415 	stw	r20,16(sp)
1000ac98:	dc800215 	stw	r18,8(sp)
1000ac9c:	dc000015 	stw	r16,0(sp)
1000aca0:	2827883a 	mov	r19,r5
1000aca4:	3023883a 	mov	r17,r6
1000aca8:	2800bf26 	beq	r5,zero,1000afa8 <_realloc_r+0x334>
1000acac:	2025883a 	mov	r18,r4
1000acb0:	000ef240 	call	1000ef24 <__malloc_lock>
1000acb4:	98ffff17 	ldw	r3,-4(r19)
1000acb8:	01bfff04 	movi	r6,-4
1000acbc:	890002c4 	addi	r4,r17,11
1000acc0:	01c00584 	movi	r7,22
1000acc4:	9d7ffe04 	addi	r21,r19,-8
1000acc8:	19a0703a 	and	r16,r3,r6
1000accc:	39003f2e 	bgeu	r7,r4,1000adcc <_realloc_r+0x158>
1000acd0:	053ffe04 	movi	r20,-8
1000acd4:	2528703a 	and	r20,r4,r20
1000acd8:	a00f883a 	mov	r7,r20
1000acdc:	a0008216 	blt	r20,zero,1000aee8 <_realloc_r+0x274>
1000ace0:	a4408136 	bltu	r20,r17,1000aee8 <_realloc_r+0x274>
1000ace4:	81c03c0e 	bge	r16,r7,1000add8 <_realloc_r+0x164>
1000ace8:	07040074 	movhi	fp,4097
1000acec:	e7064c04 	addi	fp,fp,6448
1000acf0:	e1000217 	ldw	r4,8(fp)
1000acf4:	ac05883a 	add	r2,r21,r16
1000acf8:	2080bf26 	beq	r4,r2,1000aff8 <_realloc_r+0x384>
1000acfc:	11000117 	ldw	r4,4(r2)
1000ad00:	023fff84 	movi	r8,-2
1000ad04:	2210703a 	and	r8,r4,r8
1000ad08:	1211883a 	add	r8,r2,r8
1000ad0c:	41400117 	ldw	r5,4(r8)
1000ad10:	2940004c 	andi	r5,r5,1
1000ad14:	28004a1e 	bne	r5,zero,1000ae40 <_realloc_r+0x1cc>
1000ad18:	017fff04 	movi	r5,-4
1000ad1c:	2148703a 	and	r4,r4,r5
1000ad20:	2409883a 	add	r4,r4,r16
1000ad24:	21c0ad0e 	bge	r4,r7,1000afdc <_realloc_r+0x368>
1000ad28:	18c0004c 	andi	r3,r3,1
1000ad2c:	18007f1e 	bne	r3,zero,1000af2c <_realloc_r+0x2b8>
1000ad30:	9dfffe17 	ldw	r23,-8(r19)
1000ad34:	adefc83a 	sub	r23,r21,r23
1000ad38:	bd800117 	ldw	r22,4(r23)
1000ad3c:	b14a703a 	and	r5,r22,r5
1000ad40:	216d883a 	add	r22,r4,r5
1000ad44:	b1c04516 	blt	r22,r7,1000ae5c <_realloc_r+0x1e8>
1000ad48:	10c00317 	ldw	r3,12(r2)
1000ad4c:	10800217 	ldw	r2,8(r2)
1000ad50:	81bfff04 	addi	r6,r16,-4
1000ad54:	bc400204 	addi	r17,r23,8
1000ad58:	10c00315 	stw	r3,12(r2)
1000ad5c:	18800215 	stw	r2,8(r3)
1000ad60:	b9400217 	ldw	r5,8(r23)
1000ad64:	b8c00317 	ldw	r3,12(r23)
1000ad68:	00800904 	movi	r2,36
1000ad6c:	28c00315 	stw	r3,12(r5)
1000ad70:	19400215 	stw	r5,8(r3)
1000ad74:	1180ef36 	bltu	r2,r6,1000b134 <_realloc_r+0x4c0>
1000ad78:	008004c4 	movi	r2,19
1000ad7c:	1180da2e 	bgeu	r2,r6,1000b0e8 <_realloc_r+0x474>
1000ad80:	98800017 	ldw	r2,0(r19)
1000ad84:	b8800215 	stw	r2,8(r23)
1000ad88:	98800117 	ldw	r2,4(r19)
1000ad8c:	b8800315 	stw	r2,12(r23)
1000ad90:	008006c4 	movi	r2,27
1000ad94:	1180fc2e 	bgeu	r2,r6,1000b188 <_realloc_r+0x514>
1000ad98:	98800217 	ldw	r2,8(r19)
1000ad9c:	b8800415 	stw	r2,16(r23)
1000ada0:	98800317 	ldw	r2,12(r19)
1000ada4:	b8800515 	stw	r2,20(r23)
1000ada8:	00800904 	movi	r2,36
1000adac:	3080421e 	bne	r6,r2,1000aeb8 <_realloc_r+0x244>
1000adb0:	98800417 	ldw	r2,16(r19)
1000adb4:	9cc00604 	addi	r19,r19,24
1000adb8:	b8c00804 	addi	r3,r23,32
1000adbc:	b8800615 	stw	r2,24(r23)
1000adc0:	98bfff17 	ldw	r2,-4(r19)
1000adc4:	b8800715 	stw	r2,28(r23)
1000adc8:	00003d06 	br	1000aec0 <_realloc_r+0x24c>
1000adcc:	01c00404 	movi	r7,16
1000add0:	3829883a 	mov	r20,r7
1000add4:	003fc206 	br	1000ace0 <__alt_data_end+0xf800ace0>
1000add8:	9823883a 	mov	r17,r19
1000addc:	850fc83a 	sub	r7,r16,r20
1000ade0:	008003c4 	movi	r2,15
1000ade4:	18c0004c 	andi	r3,r3,1
1000ade8:	11c04336 	bltu	r2,r7,1000aef8 <_realloc_r+0x284>
1000adec:	1c06b03a 	or	r3,r3,r16
1000adf0:	a8c00115 	stw	r3,4(r21)
1000adf4:	ac21883a 	add	r16,r21,r16
1000adf8:	80c00117 	ldw	r3,4(r16)
1000adfc:	18c00054 	ori	r3,r3,1
1000ae00:	80c00115 	stw	r3,4(r16)
1000ae04:	9009883a 	mov	r4,r18
1000ae08:	000ef440 	call	1000ef44 <__malloc_unlock>
1000ae0c:	8805883a 	mov	r2,r17
1000ae10:	dfc00917 	ldw	ra,36(sp)
1000ae14:	df000817 	ldw	fp,32(sp)
1000ae18:	ddc00717 	ldw	r23,28(sp)
1000ae1c:	dd800617 	ldw	r22,24(sp)
1000ae20:	dd400517 	ldw	r21,20(sp)
1000ae24:	dd000417 	ldw	r20,16(sp)
1000ae28:	dcc00317 	ldw	r19,12(sp)
1000ae2c:	dc800217 	ldw	r18,8(sp)
1000ae30:	dc400117 	ldw	r17,4(sp)
1000ae34:	dc000017 	ldw	r16,0(sp)
1000ae38:	dec00a04 	addi	sp,sp,40
1000ae3c:	f800283a 	ret
1000ae40:	18c0004c 	andi	r3,r3,1
1000ae44:	1800391e 	bne	r3,zero,1000af2c <_realloc_r+0x2b8>
1000ae48:	9dfffe17 	ldw	r23,-8(r19)
1000ae4c:	00bfff04 	movi	r2,-4
1000ae50:	adefc83a 	sub	r23,r21,r23
1000ae54:	b9400117 	ldw	r5,4(r23)
1000ae58:	288a703a 	and	r5,r5,r2
1000ae5c:	2c2d883a 	add	r22,r5,r16
1000ae60:	b1c03216 	blt	r22,r7,1000af2c <_realloc_r+0x2b8>
1000ae64:	b8800317 	ldw	r2,12(r23)
1000ae68:	b8c00217 	ldw	r3,8(r23)
1000ae6c:	81bfff04 	addi	r6,r16,-4
1000ae70:	01000904 	movi	r4,36
1000ae74:	18800315 	stw	r2,12(r3)
1000ae78:	10c00215 	stw	r3,8(r2)
1000ae7c:	bc400204 	addi	r17,r23,8
1000ae80:	2180ac36 	bltu	r4,r6,1000b134 <_realloc_r+0x4c0>
1000ae84:	008004c4 	movi	r2,19
1000ae88:	1180972e 	bgeu	r2,r6,1000b0e8 <_realloc_r+0x474>
1000ae8c:	98800017 	ldw	r2,0(r19)
1000ae90:	b8800215 	stw	r2,8(r23)
1000ae94:	98800117 	ldw	r2,4(r19)
1000ae98:	b8800315 	stw	r2,12(r23)
1000ae9c:	008006c4 	movi	r2,27
1000aea0:	1180b92e 	bgeu	r2,r6,1000b188 <_realloc_r+0x514>
1000aea4:	98800217 	ldw	r2,8(r19)
1000aea8:	b8800415 	stw	r2,16(r23)
1000aeac:	98800317 	ldw	r2,12(r19)
1000aeb0:	b8800515 	stw	r2,20(r23)
1000aeb4:	313fbe26 	beq	r6,r4,1000adb0 <__alt_data_end+0xf800adb0>
1000aeb8:	b8c00604 	addi	r3,r23,24
1000aebc:	9cc00404 	addi	r19,r19,16
1000aec0:	98800017 	ldw	r2,0(r19)
1000aec4:	b021883a 	mov	r16,r22
1000aec8:	b82b883a 	mov	r21,r23
1000aecc:	18800015 	stw	r2,0(r3)
1000aed0:	98800117 	ldw	r2,4(r19)
1000aed4:	18800115 	stw	r2,4(r3)
1000aed8:	98800217 	ldw	r2,8(r19)
1000aedc:	18800215 	stw	r2,8(r3)
1000aee0:	b8c00117 	ldw	r3,4(r23)
1000aee4:	003fbd06 	br	1000addc <__alt_data_end+0xf800addc>
1000aee8:	00800304 	movi	r2,12
1000aeec:	90800015 	stw	r2,0(r18)
1000aef0:	0005883a 	mov	r2,zero
1000aef4:	003fc606 	br	1000ae10 <__alt_data_end+0xf800ae10>
1000aef8:	1d06b03a 	or	r3,r3,r20
1000aefc:	ad0b883a 	add	r5,r21,r20
1000af00:	a8c00115 	stw	r3,4(r21)
1000af04:	38800054 	ori	r2,r7,1
1000af08:	28800115 	stw	r2,4(r5)
1000af0c:	29cf883a 	add	r7,r5,r7
1000af10:	38800117 	ldw	r2,4(r7)
1000af14:	9009883a 	mov	r4,r18
1000af18:	29400204 	addi	r5,r5,8
1000af1c:	10800054 	ori	r2,r2,1
1000af20:	38800115 	stw	r2,4(r7)
1000af24:	00084480 	call	10008448 <_free_r>
1000af28:	003fb606 	br	1000ae04 <__alt_data_end+0xf800ae04>
1000af2c:	880b883a 	mov	r5,r17
1000af30:	9009883a 	mov	r4,r18
1000af34:	0008fe40 	call	10008fe4 <_malloc_r>
1000af38:	1023883a 	mov	r17,r2
1000af3c:	1000aa26 	beq	r2,zero,1000b1e8 <_realloc_r+0x574>
1000af40:	98ffff17 	ldw	r3,-4(r19)
1000af44:	113ffe04 	addi	r4,r2,-8
1000af48:	00bfff84 	movi	r2,-2
1000af4c:	1884703a 	and	r2,r3,r2
1000af50:	a885883a 	add	r2,r21,r2
1000af54:	20808626 	beq	r4,r2,1000b170 <_realloc_r+0x4fc>
1000af58:	81bfff04 	addi	r6,r16,-4
1000af5c:	00800904 	movi	r2,36
1000af60:	11807036 	bltu	r2,r6,1000b124 <_realloc_r+0x4b0>
1000af64:	00c004c4 	movi	r3,19
1000af68:	19805636 	bltu	r3,r6,1000b0c4 <_realloc_r+0x450>
1000af6c:	8805883a 	mov	r2,r17
1000af70:	9807883a 	mov	r3,r19
1000af74:	19000017 	ldw	r4,0(r3)
1000af78:	11000015 	stw	r4,0(r2)
1000af7c:	19000117 	ldw	r4,4(r3)
1000af80:	11000115 	stw	r4,4(r2)
1000af84:	18c00217 	ldw	r3,8(r3)
1000af88:	10c00215 	stw	r3,8(r2)
1000af8c:	980b883a 	mov	r5,r19
1000af90:	9009883a 	mov	r4,r18
1000af94:	00084480 	call	10008448 <_free_r>
1000af98:	9009883a 	mov	r4,r18
1000af9c:	000ef440 	call	1000ef44 <__malloc_unlock>
1000afa0:	8805883a 	mov	r2,r17
1000afa4:	003f9a06 	br	1000ae10 <__alt_data_end+0xf800ae10>
1000afa8:	300b883a 	mov	r5,r6
1000afac:	dfc00917 	ldw	ra,36(sp)
1000afb0:	df000817 	ldw	fp,32(sp)
1000afb4:	ddc00717 	ldw	r23,28(sp)
1000afb8:	dd800617 	ldw	r22,24(sp)
1000afbc:	dd400517 	ldw	r21,20(sp)
1000afc0:	dd000417 	ldw	r20,16(sp)
1000afc4:	dcc00317 	ldw	r19,12(sp)
1000afc8:	dc800217 	ldw	r18,8(sp)
1000afcc:	dc400117 	ldw	r17,4(sp)
1000afd0:	dc000017 	ldw	r16,0(sp)
1000afd4:	dec00a04 	addi	sp,sp,40
1000afd8:	0008fe41 	jmpi	10008fe4 <_malloc_r>
1000afdc:	11400317 	ldw	r5,12(r2)
1000afe0:	10800217 	ldw	r2,8(r2)
1000afe4:	9823883a 	mov	r17,r19
1000afe8:	2021883a 	mov	r16,r4
1000afec:	11400315 	stw	r5,12(r2)
1000aff0:	28800215 	stw	r2,8(r5)
1000aff4:	003f7906 	br	1000addc <__alt_data_end+0xf800addc>
1000aff8:	21000117 	ldw	r4,4(r4)
1000affc:	00bfff04 	movi	r2,-4
1000b000:	a1800404 	addi	r6,r20,16
1000b004:	2088703a 	and	r4,r4,r2
1000b008:	2409883a 	add	r4,r4,r16
1000b00c:	2180380e 	bge	r4,r6,1000b0f0 <_realloc_r+0x47c>
1000b010:	18c0004c 	andi	r3,r3,1
1000b014:	183fc51e 	bne	r3,zero,1000af2c <__alt_data_end+0xf800af2c>
1000b018:	9dfffe17 	ldw	r23,-8(r19)
1000b01c:	adefc83a 	sub	r23,r21,r23
1000b020:	b9400117 	ldw	r5,4(r23)
1000b024:	288a703a 	and	r5,r5,r2
1000b028:	216d883a 	add	r22,r4,r5
1000b02c:	b1bf8b16 	blt	r22,r6,1000ae5c <__alt_data_end+0xf800ae5c>
1000b030:	b8800317 	ldw	r2,12(r23)
1000b034:	b8c00217 	ldw	r3,8(r23)
1000b038:	81bfff04 	addi	r6,r16,-4
1000b03c:	01000904 	movi	r4,36
1000b040:	18800315 	stw	r2,12(r3)
1000b044:	10c00215 	stw	r3,8(r2)
1000b048:	bc400204 	addi	r17,r23,8
1000b04c:	21805a36 	bltu	r4,r6,1000b1b8 <_realloc_r+0x544>
1000b050:	008004c4 	movi	r2,19
1000b054:	1180562e 	bgeu	r2,r6,1000b1b0 <_realloc_r+0x53c>
1000b058:	98800017 	ldw	r2,0(r19)
1000b05c:	b8800215 	stw	r2,8(r23)
1000b060:	98800117 	ldw	r2,4(r19)
1000b064:	b8800315 	stw	r2,12(r23)
1000b068:	008006c4 	movi	r2,27
1000b06c:	11805636 	bltu	r2,r6,1000b1c8 <_realloc_r+0x554>
1000b070:	b8800404 	addi	r2,r23,16
1000b074:	9cc00204 	addi	r19,r19,8
1000b078:	98c00017 	ldw	r3,0(r19)
1000b07c:	10c00015 	stw	r3,0(r2)
1000b080:	98c00117 	ldw	r3,4(r19)
1000b084:	10c00115 	stw	r3,4(r2)
1000b088:	98c00217 	ldw	r3,8(r19)
1000b08c:	10c00215 	stw	r3,8(r2)
1000b090:	bd07883a 	add	r3,r23,r20
1000b094:	b505c83a 	sub	r2,r22,r20
1000b098:	e0c00215 	stw	r3,8(fp)
1000b09c:	10800054 	ori	r2,r2,1
1000b0a0:	18800115 	stw	r2,4(r3)
1000b0a4:	b8800117 	ldw	r2,4(r23)
1000b0a8:	9009883a 	mov	r4,r18
1000b0ac:	1080004c 	andi	r2,r2,1
1000b0b0:	a0a8b03a 	or	r20,r20,r2
1000b0b4:	bd000115 	stw	r20,4(r23)
1000b0b8:	000ef440 	call	1000ef44 <__malloc_unlock>
1000b0bc:	8805883a 	mov	r2,r17
1000b0c0:	003f5306 	br	1000ae10 <__alt_data_end+0xf800ae10>
1000b0c4:	98c00017 	ldw	r3,0(r19)
1000b0c8:	88c00015 	stw	r3,0(r17)
1000b0cc:	98c00117 	ldw	r3,4(r19)
1000b0d0:	88c00115 	stw	r3,4(r17)
1000b0d4:	00c006c4 	movi	r3,27
1000b0d8:	19801d36 	bltu	r3,r6,1000b150 <_realloc_r+0x4dc>
1000b0dc:	88800204 	addi	r2,r17,8
1000b0e0:	98c00204 	addi	r3,r19,8
1000b0e4:	003fa306 	br	1000af74 <__alt_data_end+0xf800af74>
1000b0e8:	8807883a 	mov	r3,r17
1000b0ec:	003f7406 	br	1000aec0 <__alt_data_end+0xf800aec0>
1000b0f0:	ad2b883a 	add	r21,r21,r20
1000b0f4:	2505c83a 	sub	r2,r4,r20
1000b0f8:	e5400215 	stw	r21,8(fp)
1000b0fc:	10800054 	ori	r2,r2,1
1000b100:	a8800115 	stw	r2,4(r21)
1000b104:	98bfff17 	ldw	r2,-4(r19)
1000b108:	9009883a 	mov	r4,r18
1000b10c:	1080004c 	andi	r2,r2,1
1000b110:	a0a8b03a 	or	r20,r20,r2
1000b114:	9d3fff15 	stw	r20,-4(r19)
1000b118:	000ef440 	call	1000ef44 <__malloc_unlock>
1000b11c:	9805883a 	mov	r2,r19
1000b120:	003f3b06 	br	1000ae10 <__alt_data_end+0xf800ae10>
1000b124:	8809883a 	mov	r4,r17
1000b128:	980b883a 	mov	r5,r19
1000b12c:	00099ac0 	call	100099ac <memmove>
1000b130:	003f9606 	br	1000af8c <__alt_data_end+0xf800af8c>
1000b134:	8809883a 	mov	r4,r17
1000b138:	980b883a 	mov	r5,r19
1000b13c:	00099ac0 	call	100099ac <memmove>
1000b140:	b8c00117 	ldw	r3,4(r23)
1000b144:	b021883a 	mov	r16,r22
1000b148:	b82b883a 	mov	r21,r23
1000b14c:	003f2306 	br	1000addc <__alt_data_end+0xf800addc>
1000b150:	98c00217 	ldw	r3,8(r19)
1000b154:	88c00215 	stw	r3,8(r17)
1000b158:	98c00317 	ldw	r3,12(r19)
1000b15c:	88c00315 	stw	r3,12(r17)
1000b160:	30800c26 	beq	r6,r2,1000b194 <_realloc_r+0x520>
1000b164:	88800404 	addi	r2,r17,16
1000b168:	98c00404 	addi	r3,r19,16
1000b16c:	003f8106 	br	1000af74 <__alt_data_end+0xf800af74>
1000b170:	893fff17 	ldw	r4,-4(r17)
1000b174:	00bfff04 	movi	r2,-4
1000b178:	9823883a 	mov	r17,r19
1000b17c:	2084703a 	and	r2,r4,r2
1000b180:	80a1883a 	add	r16,r16,r2
1000b184:	003f1506 	br	1000addc <__alt_data_end+0xf800addc>
1000b188:	b8c00404 	addi	r3,r23,16
1000b18c:	9cc00204 	addi	r19,r19,8
1000b190:	003f4b06 	br	1000aec0 <__alt_data_end+0xf800aec0>
1000b194:	99000417 	ldw	r4,16(r19)
1000b198:	88800604 	addi	r2,r17,24
1000b19c:	98c00604 	addi	r3,r19,24
1000b1a0:	89000415 	stw	r4,16(r17)
1000b1a4:	99000517 	ldw	r4,20(r19)
1000b1a8:	89000515 	stw	r4,20(r17)
1000b1ac:	003f7106 	br	1000af74 <__alt_data_end+0xf800af74>
1000b1b0:	8805883a 	mov	r2,r17
1000b1b4:	003fb006 	br	1000b078 <__alt_data_end+0xf800b078>
1000b1b8:	8809883a 	mov	r4,r17
1000b1bc:	980b883a 	mov	r5,r19
1000b1c0:	00099ac0 	call	100099ac <memmove>
1000b1c4:	003fb206 	br	1000b090 <__alt_data_end+0xf800b090>
1000b1c8:	98800217 	ldw	r2,8(r19)
1000b1cc:	b8800415 	stw	r2,16(r23)
1000b1d0:	98800317 	ldw	r2,12(r19)
1000b1d4:	b8800515 	stw	r2,20(r23)
1000b1d8:	31000726 	beq	r6,r4,1000b1f8 <_realloc_r+0x584>
1000b1dc:	b8800604 	addi	r2,r23,24
1000b1e0:	9cc00404 	addi	r19,r19,16
1000b1e4:	003fa406 	br	1000b078 <__alt_data_end+0xf800b078>
1000b1e8:	9009883a 	mov	r4,r18
1000b1ec:	000ef440 	call	1000ef44 <__malloc_unlock>
1000b1f0:	0005883a 	mov	r2,zero
1000b1f4:	003f0606 	br	1000ae10 <__alt_data_end+0xf800ae10>
1000b1f8:	98c00417 	ldw	r3,16(r19)
1000b1fc:	9cc00604 	addi	r19,r19,24
1000b200:	b8800804 	addi	r2,r23,32
1000b204:	b8c00615 	stw	r3,24(r23)
1000b208:	98ffff17 	ldw	r3,-4(r19)
1000b20c:	b8c00715 	stw	r3,28(r23)
1000b210:	003f9906 	br	1000b078 <__alt_data_end+0xf800b078>

1000b214 <__fpclassifyd>:
1000b214:	00a00034 	movhi	r2,32768
1000b218:	10bfffc4 	addi	r2,r2,-1
1000b21c:	2884703a 	and	r2,r5,r2
1000b220:	10000726 	beq	r2,zero,1000b240 <__fpclassifyd+0x2c>
1000b224:	00fffc34 	movhi	r3,65520
1000b228:	019ff834 	movhi	r6,32736
1000b22c:	28c7883a 	add	r3,r5,r3
1000b230:	31bfffc4 	addi	r6,r6,-1
1000b234:	30c00536 	bltu	r6,r3,1000b24c <__fpclassifyd+0x38>
1000b238:	00800104 	movi	r2,4
1000b23c:	f800283a 	ret
1000b240:	2000021e 	bne	r4,zero,1000b24c <__fpclassifyd+0x38>
1000b244:	00800084 	movi	r2,2
1000b248:	f800283a 	ret
1000b24c:	00dffc34 	movhi	r3,32752
1000b250:	019ff834 	movhi	r6,32736
1000b254:	28cb883a 	add	r5,r5,r3
1000b258:	31bfffc4 	addi	r6,r6,-1
1000b25c:	317ff62e 	bgeu	r6,r5,1000b238 <__alt_data_end+0xf800b238>
1000b260:	01400434 	movhi	r5,16
1000b264:	297fffc4 	addi	r5,r5,-1
1000b268:	28800236 	bltu	r5,r2,1000b274 <__fpclassifyd+0x60>
1000b26c:	008000c4 	movi	r2,3
1000b270:	f800283a 	ret
1000b274:	10c00226 	beq	r2,r3,1000b280 <__fpclassifyd+0x6c>
1000b278:	0005883a 	mov	r2,zero
1000b27c:	f800283a 	ret
1000b280:	2005003a 	cmpeq	r2,r4,zero
1000b284:	f800283a 	ret

1000b288 <_sbrk_r>:
1000b288:	defffd04 	addi	sp,sp,-12
1000b28c:	dc000015 	stw	r16,0(sp)
1000b290:	04040074 	movhi	r16,4097
1000b294:	dc400115 	stw	r17,4(sp)
1000b298:	8412b004 	addi	r16,r16,19136
1000b29c:	2023883a 	mov	r17,r4
1000b2a0:	2809883a 	mov	r4,r5
1000b2a4:	dfc00215 	stw	ra,8(sp)
1000b2a8:	80000015 	stw	zero,0(r16)
1000b2ac:	000f1380 	call	1000f138 <sbrk>
1000b2b0:	00ffffc4 	movi	r3,-1
1000b2b4:	10c00526 	beq	r2,r3,1000b2cc <_sbrk_r+0x44>
1000b2b8:	dfc00217 	ldw	ra,8(sp)
1000b2bc:	dc400117 	ldw	r17,4(sp)
1000b2c0:	dc000017 	ldw	r16,0(sp)
1000b2c4:	dec00304 	addi	sp,sp,12
1000b2c8:	f800283a 	ret
1000b2cc:	80c00017 	ldw	r3,0(r16)
1000b2d0:	183ff926 	beq	r3,zero,1000b2b8 <__alt_data_end+0xf800b2b8>
1000b2d4:	88c00015 	stw	r3,0(r17)
1000b2d8:	003ff706 	br	1000b2b8 <__alt_data_end+0xf800b2b8>

1000b2dc <__sread>:
1000b2dc:	defffe04 	addi	sp,sp,-8
1000b2e0:	dc000015 	stw	r16,0(sp)
1000b2e4:	2821883a 	mov	r16,r5
1000b2e8:	2940038f 	ldh	r5,14(r5)
1000b2ec:	dfc00115 	stw	ra,4(sp)
1000b2f0:	000cf980 	call	1000cf98 <_read_r>
1000b2f4:	10000716 	blt	r2,zero,1000b314 <__sread+0x38>
1000b2f8:	80c01417 	ldw	r3,80(r16)
1000b2fc:	1887883a 	add	r3,r3,r2
1000b300:	80c01415 	stw	r3,80(r16)
1000b304:	dfc00117 	ldw	ra,4(sp)
1000b308:	dc000017 	ldw	r16,0(sp)
1000b30c:	dec00204 	addi	sp,sp,8
1000b310:	f800283a 	ret
1000b314:	80c0030b 	ldhu	r3,12(r16)
1000b318:	18fbffcc 	andi	r3,r3,61439
1000b31c:	80c0030d 	sth	r3,12(r16)
1000b320:	dfc00117 	ldw	ra,4(sp)
1000b324:	dc000017 	ldw	r16,0(sp)
1000b328:	dec00204 	addi	sp,sp,8
1000b32c:	f800283a 	ret

1000b330 <__seofread>:
1000b330:	0005883a 	mov	r2,zero
1000b334:	f800283a 	ret

1000b338 <__swrite>:
1000b338:	2880030b 	ldhu	r2,12(r5)
1000b33c:	defffb04 	addi	sp,sp,-20
1000b340:	dcc00315 	stw	r19,12(sp)
1000b344:	dc800215 	stw	r18,8(sp)
1000b348:	dc400115 	stw	r17,4(sp)
1000b34c:	dc000015 	stw	r16,0(sp)
1000b350:	dfc00415 	stw	ra,16(sp)
1000b354:	10c0400c 	andi	r3,r2,256
1000b358:	2821883a 	mov	r16,r5
1000b35c:	2027883a 	mov	r19,r4
1000b360:	3025883a 	mov	r18,r6
1000b364:	3823883a 	mov	r17,r7
1000b368:	18000526 	beq	r3,zero,1000b380 <__swrite+0x48>
1000b36c:	2940038f 	ldh	r5,14(r5)
1000b370:	000d883a 	mov	r6,zero
1000b374:	01c00084 	movi	r7,2
1000b378:	000cf3c0 	call	1000cf3c <_lseek_r>
1000b37c:	8080030b 	ldhu	r2,12(r16)
1000b380:	8140038f 	ldh	r5,14(r16)
1000b384:	10bbffcc 	andi	r2,r2,61439
1000b388:	9809883a 	mov	r4,r19
1000b38c:	900d883a 	mov	r6,r18
1000b390:	880f883a 	mov	r7,r17
1000b394:	8080030d 	sth	r2,12(r16)
1000b398:	dfc00417 	ldw	ra,16(sp)
1000b39c:	dcc00317 	ldw	r19,12(sp)
1000b3a0:	dc800217 	ldw	r18,8(sp)
1000b3a4:	dc400117 	ldw	r17,4(sp)
1000b3a8:	dc000017 	ldw	r16,0(sp)
1000b3ac:	dec00504 	addi	sp,sp,20
1000b3b0:	000ca181 	jmpi	1000ca18 <_write_r>

1000b3b4 <__sseek>:
1000b3b4:	defffe04 	addi	sp,sp,-8
1000b3b8:	dc000015 	stw	r16,0(sp)
1000b3bc:	2821883a 	mov	r16,r5
1000b3c0:	2940038f 	ldh	r5,14(r5)
1000b3c4:	dfc00115 	stw	ra,4(sp)
1000b3c8:	000cf3c0 	call	1000cf3c <_lseek_r>
1000b3cc:	00ffffc4 	movi	r3,-1
1000b3d0:	10c00826 	beq	r2,r3,1000b3f4 <__sseek+0x40>
1000b3d4:	80c0030b 	ldhu	r3,12(r16)
1000b3d8:	80801415 	stw	r2,80(r16)
1000b3dc:	18c40014 	ori	r3,r3,4096
1000b3e0:	80c0030d 	sth	r3,12(r16)
1000b3e4:	dfc00117 	ldw	ra,4(sp)
1000b3e8:	dc000017 	ldw	r16,0(sp)
1000b3ec:	dec00204 	addi	sp,sp,8
1000b3f0:	f800283a 	ret
1000b3f4:	80c0030b 	ldhu	r3,12(r16)
1000b3f8:	18fbffcc 	andi	r3,r3,61439
1000b3fc:	80c0030d 	sth	r3,12(r16)
1000b400:	dfc00117 	ldw	ra,4(sp)
1000b404:	dc000017 	ldw	r16,0(sp)
1000b408:	dec00204 	addi	sp,sp,8
1000b40c:	f800283a 	ret

1000b410 <__sclose>:
1000b410:	2940038f 	ldh	r5,14(r5)
1000b414:	000ca741 	jmpi	1000ca74 <_close_r>

1000b418 <strcmp>:
1000b418:	2144b03a 	or	r2,r4,r5
1000b41c:	108000cc 	andi	r2,r2,3
1000b420:	1000171e 	bne	r2,zero,1000b480 <strcmp+0x68>
1000b424:	20800017 	ldw	r2,0(r4)
1000b428:	28c00017 	ldw	r3,0(r5)
1000b42c:	10c0141e 	bne	r2,r3,1000b480 <strcmp+0x68>
1000b430:	027fbff4 	movhi	r9,65279
1000b434:	4a7fbfc4 	addi	r9,r9,-257
1000b438:	0086303a 	nor	r3,zero,r2
1000b43c:	02202074 	movhi	r8,32897
1000b440:	1245883a 	add	r2,r2,r9
1000b444:	42202004 	addi	r8,r8,-32640
1000b448:	10c4703a 	and	r2,r2,r3
1000b44c:	1204703a 	and	r2,r2,r8
1000b450:	10000226 	beq	r2,zero,1000b45c <strcmp+0x44>
1000b454:	00001706 	br	1000b4b4 <strcmp+0x9c>
1000b458:	1000161e 	bne	r2,zero,1000b4b4 <strcmp+0x9c>
1000b45c:	21000104 	addi	r4,r4,4
1000b460:	20c00017 	ldw	r3,0(r4)
1000b464:	29400104 	addi	r5,r5,4
1000b468:	29800017 	ldw	r6,0(r5)
1000b46c:	1a4f883a 	add	r7,r3,r9
1000b470:	00c4303a 	nor	r2,zero,r3
1000b474:	3884703a 	and	r2,r7,r2
1000b478:	1204703a 	and	r2,r2,r8
1000b47c:	19bff626 	beq	r3,r6,1000b458 <__alt_data_end+0xf800b458>
1000b480:	20800007 	ldb	r2,0(r4)
1000b484:	1000051e 	bne	r2,zero,1000b49c <strcmp+0x84>
1000b488:	00000606 	br	1000b4a4 <strcmp+0x8c>
1000b48c:	21000044 	addi	r4,r4,1
1000b490:	20800007 	ldb	r2,0(r4)
1000b494:	29400044 	addi	r5,r5,1
1000b498:	10000226 	beq	r2,zero,1000b4a4 <strcmp+0x8c>
1000b49c:	28c00007 	ldb	r3,0(r5)
1000b4a0:	10fffa26 	beq	r2,r3,1000b48c <__alt_data_end+0xf800b48c>
1000b4a4:	20800003 	ldbu	r2,0(r4)
1000b4a8:	28c00003 	ldbu	r3,0(r5)
1000b4ac:	10c5c83a 	sub	r2,r2,r3
1000b4b0:	f800283a 	ret
1000b4b4:	0005883a 	mov	r2,zero
1000b4b8:	f800283a 	ret

1000b4bc <__sprint_r.part.0>:
1000b4bc:	28801917 	ldw	r2,100(r5)
1000b4c0:	defff604 	addi	sp,sp,-40
1000b4c4:	dd400515 	stw	r21,20(sp)
1000b4c8:	dcc00315 	stw	r19,12(sp)
1000b4cc:	dfc00915 	stw	ra,36(sp)
1000b4d0:	df000815 	stw	fp,32(sp)
1000b4d4:	ddc00715 	stw	r23,28(sp)
1000b4d8:	dd800615 	stw	r22,24(sp)
1000b4dc:	dd000415 	stw	r20,16(sp)
1000b4e0:	dc800215 	stw	r18,8(sp)
1000b4e4:	dc400115 	stw	r17,4(sp)
1000b4e8:	dc000015 	stw	r16,0(sp)
1000b4ec:	1088000c 	andi	r2,r2,8192
1000b4f0:	2827883a 	mov	r19,r5
1000b4f4:	302b883a 	mov	r21,r6
1000b4f8:	10002d26 	beq	r2,zero,1000b5b0 <__sprint_r.part.0+0xf4>
1000b4fc:	30800217 	ldw	r2,8(r6)
1000b500:	35800017 	ldw	r22,0(r6)
1000b504:	10002826 	beq	r2,zero,1000b5a8 <__sprint_r.part.0+0xec>
1000b508:	2029883a 	mov	r20,r4
1000b50c:	b5c00104 	addi	r23,r22,4
1000b510:	04bfffc4 	movi	r18,-1
1000b514:	bc400017 	ldw	r17,0(r23)
1000b518:	b4000017 	ldw	r16,0(r22)
1000b51c:	0039883a 	mov	fp,zero
1000b520:	8822d0ba 	srli	r17,r17,2
1000b524:	04400316 	blt	zero,r17,1000b534 <__sprint_r.part.0+0x78>
1000b528:	00001706 	br	1000b588 <__sprint_r.part.0+0xcc>
1000b52c:	84000104 	addi	r16,r16,4
1000b530:	8f001526 	beq	r17,fp,1000b588 <__sprint_r.part.0+0xcc>
1000b534:	81400017 	ldw	r5,0(r16)
1000b538:	a009883a 	mov	r4,r20
1000b53c:	980d883a 	mov	r6,r19
1000b540:	000ccb40 	call	1000ccb4 <_fputwc_r>
1000b544:	e7000044 	addi	fp,fp,1
1000b548:	14bff81e 	bne	r2,r18,1000b52c <__alt_data_end+0xf800b52c>
1000b54c:	9005883a 	mov	r2,r18
1000b550:	a8000215 	stw	zero,8(r21)
1000b554:	a8000115 	stw	zero,4(r21)
1000b558:	dfc00917 	ldw	ra,36(sp)
1000b55c:	df000817 	ldw	fp,32(sp)
1000b560:	ddc00717 	ldw	r23,28(sp)
1000b564:	dd800617 	ldw	r22,24(sp)
1000b568:	dd400517 	ldw	r21,20(sp)
1000b56c:	dd000417 	ldw	r20,16(sp)
1000b570:	dcc00317 	ldw	r19,12(sp)
1000b574:	dc800217 	ldw	r18,8(sp)
1000b578:	dc400117 	ldw	r17,4(sp)
1000b57c:	dc000017 	ldw	r16,0(sp)
1000b580:	dec00a04 	addi	sp,sp,40
1000b584:	f800283a 	ret
1000b588:	a8c00217 	ldw	r3,8(r21)
1000b58c:	8c63883a 	add	r17,r17,r17
1000b590:	8c63883a 	add	r17,r17,r17
1000b594:	1c45c83a 	sub	r2,r3,r17
1000b598:	a8800215 	stw	r2,8(r21)
1000b59c:	b5800204 	addi	r22,r22,8
1000b5a0:	bdc00204 	addi	r23,r23,8
1000b5a4:	103fdb1e 	bne	r2,zero,1000b514 <__alt_data_end+0xf800b514>
1000b5a8:	0005883a 	mov	r2,zero
1000b5ac:	003fe806 	br	1000b550 <__alt_data_end+0xf800b550>
1000b5b0:	00087380 	call	10008738 <__sfvwrite_r>
1000b5b4:	003fe606 	br	1000b550 <__alt_data_end+0xf800b550>

1000b5b8 <__sprint_r>:
1000b5b8:	30c00217 	ldw	r3,8(r6)
1000b5bc:	18000126 	beq	r3,zero,1000b5c4 <__sprint_r+0xc>
1000b5c0:	000b4bc1 	jmpi	1000b4bc <__sprint_r.part.0>
1000b5c4:	30000115 	stw	zero,4(r6)
1000b5c8:	0005883a 	mov	r2,zero
1000b5cc:	f800283a 	ret

1000b5d0 <___vfiprintf_internal_r>:
1000b5d0:	defeca04 	addi	sp,sp,-1240
1000b5d4:	dcc12f15 	stw	r19,1212(sp)
1000b5d8:	dfc13515 	stw	ra,1236(sp)
1000b5dc:	df013415 	stw	fp,1232(sp)
1000b5e0:	ddc13315 	stw	r23,1228(sp)
1000b5e4:	dd813215 	stw	r22,1224(sp)
1000b5e8:	dd413115 	stw	r21,1220(sp)
1000b5ec:	dd013015 	stw	r20,1216(sp)
1000b5f0:	dc812e15 	stw	r18,1208(sp)
1000b5f4:	dc412d15 	stw	r17,1204(sp)
1000b5f8:	dc012c15 	stw	r16,1200(sp)
1000b5fc:	d9012115 	stw	r4,1156(sp)
1000b600:	d9412015 	stw	r5,1152(sp)
1000b604:	d9c12315 	stw	r7,1164(sp)
1000b608:	3027883a 	mov	r19,r6
1000b60c:	20000226 	beq	r4,zero,1000b618 <___vfiprintf_internal_r+0x48>
1000b610:	20800e17 	ldw	r2,56(r4)
1000b614:	1000f726 	beq	r2,zero,1000b9f4 <___vfiprintf_internal_r+0x424>
1000b618:	d8812017 	ldw	r2,1152(sp)
1000b61c:	10c0030b 	ldhu	r3,12(r2)
1000b620:	1908000c 	andi	r4,r3,8192
1000b624:	1805883a 	mov	r2,r3
1000b628:	2000081e 	bne	r4,zero,1000b64c <___vfiprintf_internal_r+0x7c>
1000b62c:	d9412017 	ldw	r5,1152(sp)
1000b630:	18880014 	ori	r2,r3,8192
1000b634:	00f7ffc4 	movi	r3,-8193
1000b638:	29001917 	ldw	r4,100(r5)
1000b63c:	2880030d 	sth	r2,12(r5)
1000b640:	20c8703a 	and	r4,r4,r3
1000b644:	29001915 	stw	r4,100(r5)
1000b648:	1007883a 	mov	r3,r2
1000b64c:	1100020c 	andi	r4,r2,8
1000b650:	2000a726 	beq	r4,zero,1000b8f0 <___vfiprintf_internal_r+0x320>
1000b654:	d9412017 	ldw	r5,1152(sp)
1000b658:	29000417 	ldw	r4,16(r5)
1000b65c:	2000a426 	beq	r4,zero,1000b8f0 <___vfiprintf_internal_r+0x320>
1000b660:	1080068c 	andi	r2,r2,26
1000b664:	01000284 	movi	r4,10
1000b668:	1100ab26 	beq	r2,r4,1000b918 <___vfiprintf_internal_r+0x348>
1000b66c:	d9010a04 	addi	r4,sp,1064
1000b670:	d94109c4 	addi	r5,sp,1063
1000b674:	07040074 	movhi	fp,4097
1000b678:	04440074 	movhi	r17,4097
1000b67c:	2145c83a 	sub	r2,r4,r5
1000b680:	e7051404 	addi	fp,fp,5200
1000b684:	8c451004 	addi	r17,r17,5184
1000b688:	d9011e15 	stw	r4,1144(sp)
1000b68c:	d9411f15 	stw	r5,1148(sp)
1000b690:	dec11a15 	stw	sp,1128(sp)
1000b694:	d8011c15 	stw	zero,1136(sp)
1000b698:	d8011b15 	stw	zero,1132(sp)
1000b69c:	d8012715 	stw	zero,1180(sp)
1000b6a0:	d8012515 	stw	zero,1172(sp)
1000b6a4:	d811883a 	mov	r8,sp
1000b6a8:	d8812815 	stw	r2,1184(sp)
1000b6ac:	982f883a 	mov	r23,r19
1000b6b0:	b8800007 	ldb	r2,0(r23)
1000b6b4:	1003b026 	beq	r2,zero,1000c578 <___vfiprintf_internal_r+0xfa8>
1000b6b8:	01000944 	movi	r4,37
1000b6bc:	1103ae26 	beq	r2,r4,1000c578 <___vfiprintf_internal_r+0xfa8>
1000b6c0:	b805883a 	mov	r2,r23
1000b6c4:	00000106 	br	1000b6cc <___vfiprintf_internal_r+0xfc>
1000b6c8:	19000326 	beq	r3,r4,1000b6d8 <___vfiprintf_internal_r+0x108>
1000b6cc:	10800044 	addi	r2,r2,1
1000b6d0:	10c00007 	ldb	r3,0(r2)
1000b6d4:	183ffc1e 	bne	r3,zero,1000b6c8 <__alt_data_end+0xf800b6c8>
1000b6d8:	15e1c83a 	sub	r16,r2,r23
1000b6dc:	1029883a 	mov	r20,r2
1000b6e0:	80001026 	beq	r16,zero,1000b724 <___vfiprintf_internal_r+0x154>
1000b6e4:	d8c11c17 	ldw	r3,1136(sp)
1000b6e8:	d8811b17 	ldw	r2,1132(sp)
1000b6ec:	45c00015 	stw	r23,0(r8)
1000b6f0:	80c7883a 	add	r3,r16,r3
1000b6f4:	10800044 	addi	r2,r2,1
1000b6f8:	44000115 	stw	r16,4(r8)
1000b6fc:	d8c11c15 	stw	r3,1136(sp)
1000b700:	d8811b15 	stw	r2,1132(sp)
1000b704:	010001c4 	movi	r4,7
1000b708:	2080740e 	bge	r4,r2,1000b8dc <___vfiprintf_internal_r+0x30c>
1000b70c:	1803a71e 	bne	r3,zero,1000c5ac <___vfiprintf_internal_r+0xfdc>
1000b710:	d8c12517 	ldw	r3,1172(sp)
1000b714:	d8011b15 	stw	zero,1132(sp)
1000b718:	d811883a 	mov	r8,sp
1000b71c:	1c07883a 	add	r3,r3,r16
1000b720:	d8c12515 	stw	r3,1172(sp)
1000b724:	a0800007 	ldb	r2,0(r20)
1000b728:	1002bf26 	beq	r2,zero,1000c228 <___vfiprintf_internal_r+0xc58>
1000b72c:	a5c00044 	addi	r23,r20,1
1000b730:	a1800047 	ldb	r6,1(r20)
1000b734:	d8011d85 	stb	zero,1142(sp)
1000b738:	d8012205 	stb	zero,1160(sp)
1000b73c:	043fffc4 	movi	r16,-1
1000b740:	d8012415 	stw	zero,1168(sp)
1000b744:	0025883a 	mov	r18,zero
1000b748:	05001604 	movi	r20,88
1000b74c:	05400244 	movi	r21,9
1000b750:	4027883a 	mov	r19,r8
1000b754:	bdc00044 	addi	r23,r23,1
1000b758:	30bff804 	addi	r2,r6,-32
1000b75c:	a0825636 	bltu	r20,r2,1000c0b8 <___vfiprintf_internal_r+0xae8>
1000b760:	100490ba 	slli	r2,r2,2
1000b764:	01040074 	movhi	r4,4097
1000b768:	212dde04 	addi	r4,r4,-18568
1000b76c:	1105883a 	add	r2,r2,r4
1000b770:	10800017 	ldw	r2,0(r2)
1000b774:	1000683a 	jmp	r2
1000b778:	1000c048 	cmpgei	zero,r2,769
1000b77c:	1000c0b8 	rdprs	zero,r2,770
1000b780:	1000c0b8 	rdprs	zero,r2,770
1000b784:	1000c0ac 	andhi	zero,r2,770
1000b788:	1000c0b8 	rdprs	zero,r2,770
1000b78c:	1000c0b8 	rdprs	zero,r2,770
1000b790:	1000c0b8 	rdprs	zero,r2,770
1000b794:	1000c0b8 	rdprs	zero,r2,770
1000b798:	1000c0b8 	rdprs	zero,r2,770
1000b79c:	1000c0b8 	rdprs	zero,r2,770
1000b7a0:	1000be38 	rdprs	zero,r2,760
1000b7a4:	1000c060 	cmpeqi	zero,r2,769
1000b7a8:	1000c0b8 	rdprs	zero,r2,770
1000b7ac:	1000ba0c 	andi	zero,r2,744
1000b7b0:	1000be5c 	xori	zero,r2,761
1000b7b4:	1000c0b8 	rdprs	zero,r2,770
1000b7b8:	1000ba18 	cmpnei	zero,r2,744
1000b7bc:	1000ba24 	muli	zero,r2,744
1000b7c0:	1000ba24 	muli	zero,r2,744
1000b7c4:	1000ba24 	muli	zero,r2,744
1000b7c8:	1000ba24 	muli	zero,r2,744
1000b7cc:	1000ba24 	muli	zero,r2,744
1000b7d0:	1000ba24 	muli	zero,r2,744
1000b7d4:	1000ba24 	muli	zero,r2,744
1000b7d8:	1000ba24 	muli	zero,r2,744
1000b7dc:	1000ba24 	muli	zero,r2,744
1000b7e0:	1000c0b8 	rdprs	zero,r2,770
1000b7e4:	1000c0b8 	rdprs	zero,r2,770
1000b7e8:	1000c0b8 	rdprs	zero,r2,770
1000b7ec:	1000c0b8 	rdprs	zero,r2,770
1000b7f0:	1000c0b8 	rdprs	zero,r2,770
1000b7f4:	1000c0b8 	rdprs	zero,r2,770
1000b7f8:	1000c0b8 	rdprs	zero,r2,770
1000b7fc:	1000c0b8 	rdprs	zero,r2,770
1000b800:	1000c0b8 	rdprs	zero,r2,770
1000b804:	1000c0b8 	rdprs	zero,r2,770
1000b808:	1000ba64 	muli	zero,r2,745
1000b80c:	1000c0b8 	rdprs	zero,r2,770
1000b810:	1000c0b8 	rdprs	zero,r2,770
1000b814:	1000c0b8 	rdprs	zero,r2,770
1000b818:	1000c0b8 	rdprs	zero,r2,770
1000b81c:	1000c0b8 	rdprs	zero,r2,770
1000b820:	1000c0b8 	rdprs	zero,r2,770
1000b824:	1000c0b8 	rdprs	zero,r2,770
1000b828:	1000c0b8 	rdprs	zero,r2,770
1000b82c:	1000c0b8 	rdprs	zero,r2,770
1000b830:	1000c0b8 	rdprs	zero,r2,770
1000b834:	1000bd54 	ori	zero,r2,757
1000b838:	1000c0b8 	rdprs	zero,r2,770
1000b83c:	1000c0b8 	rdprs	zero,r2,770
1000b840:	1000c0b8 	rdprs	zero,r2,770
1000b844:	1000c0b8 	rdprs	zero,r2,770
1000b848:	1000c0b8 	rdprs	zero,r2,770
1000b84c:	1000bd94 	ori	zero,r2,758
1000b850:	1000c0b8 	rdprs	zero,r2,770
1000b854:	1000c0b8 	rdprs	zero,r2,770
1000b858:	1000bdd8 	cmpnei	zero,r2,759
1000b85c:	1000c0b8 	rdprs	zero,r2,770
1000b860:	1000c0b8 	rdprs	zero,r2,770
1000b864:	1000c0b8 	rdprs	zero,r2,770
1000b868:	1000c0b8 	rdprs	zero,r2,770
1000b86c:	1000c0b8 	rdprs	zero,r2,770
1000b870:	1000c0b8 	rdprs	zero,r2,770
1000b874:	1000c0b8 	rdprs	zero,r2,770
1000b878:	1000c0b8 	rdprs	zero,r2,770
1000b87c:	1000c0b8 	rdprs	zero,r2,770
1000b880:	1000c0b8 	rdprs	zero,r2,770
1000b884:	1000bd20 	cmpeqi	zero,r2,756
1000b888:	1000c070 	cmpltui	zero,r2,769
1000b88c:	1000c0b8 	rdprs	zero,r2,770
1000b890:	1000c0b8 	rdprs	zero,r2,770
1000b894:	1000c0b8 	rdprs	zero,r2,770
1000b898:	1000beac 	andhi	zero,r2,762
1000b89c:	1000c070 	cmpltui	zero,r2,769
1000b8a0:	1000c0b8 	rdprs	zero,r2,770
1000b8a4:	1000c0b8 	rdprs	zero,r2,770
1000b8a8:	1000bdc4 	addi	zero,r2,759
1000b8ac:	1000c0b8 	rdprs	zero,r2,770
1000b8b0:	1000c010 	cmplti	zero,r2,768
1000b8b4:	1000bf98 	cmpnei	zero,r2,766
1000b8b8:	1000bfcc 	andi	zero,r2,767
1000b8bc:	1000beb8 	rdprs	zero,r2,762
1000b8c0:	1000c0b8 	rdprs	zero,r2,770
1000b8c4:	1000bec4 	addi	zero,r2,763
1000b8c8:	1000c0b8 	rdprs	zero,r2,770
1000b8cc:	1000bf20 	cmpeqi	zero,r2,764
1000b8d0:	1000c0b8 	rdprs	zero,r2,770
1000b8d4:	1000c0b8 	rdprs	zero,r2,770
1000b8d8:	1000bf54 	ori	zero,r2,765
1000b8dc:	42000204 	addi	r8,r8,8
1000b8e0:	d8c12517 	ldw	r3,1172(sp)
1000b8e4:	1c07883a 	add	r3,r3,r16
1000b8e8:	d8c12515 	stw	r3,1172(sp)
1000b8ec:	003f8d06 	br	1000b724 <__alt_data_end+0xf800b724>
1000b8f0:	d9012117 	ldw	r4,1156(sp)
1000b8f4:	d9412017 	ldw	r5,1152(sp)
1000b8f8:	00062980 	call	10006298 <__swsetup_r>
1000b8fc:	1000301e 	bne	r2,zero,1000b9c0 <___vfiprintf_internal_r+0x3f0>
1000b900:	d8812017 	ldw	r2,1152(sp)
1000b904:	01000284 	movi	r4,10
1000b908:	10c0030b 	ldhu	r3,12(r2)
1000b90c:	1805883a 	mov	r2,r3
1000b910:	1080068c 	andi	r2,r2,26
1000b914:	113f551e 	bne	r2,r4,1000b66c <__alt_data_end+0xf800b66c>
1000b918:	d9012017 	ldw	r4,1152(sp)
1000b91c:	2080038b 	ldhu	r2,14(r4)
1000b920:	113fffcc 	andi	r4,r2,65535
1000b924:	2120001c 	xori	r4,r4,32768
1000b928:	21200004 	addi	r4,r4,-32768
1000b92c:	203f4f16 	blt	r4,zero,1000b66c <__alt_data_end+0xf800b66c>
1000b930:	d9412017 	ldw	r5,1152(sp)
1000b934:	d9012117 	ldw	r4,1156(sp)
1000b938:	d9c12317 	ldw	r7,1164(sp)
1000b93c:	2b001917 	ldw	r12,100(r5)
1000b940:	2ac00717 	ldw	r11,28(r5)
1000b944:	2a800917 	ldw	r10,36(r5)
1000b948:	02010004 	movi	r8,1024
1000b94c:	18ffff4c 	andi	r3,r3,65533
1000b950:	da0b883a 	add	r5,sp,r8
1000b954:	980d883a 	mov	r6,r19
1000b958:	d8c1030d 	sth	r3,1036(sp)
1000b95c:	db011915 	stw	r12,1124(sp)
1000b960:	d881038d 	sth	r2,1038(sp)
1000b964:	dac10715 	stw	r11,1052(sp)
1000b968:	da810915 	stw	r10,1060(sp)
1000b96c:	dec10015 	stw	sp,1024(sp)
1000b970:	dec10415 	stw	sp,1040(sp)
1000b974:	da010215 	stw	r8,1032(sp)
1000b978:	da010515 	stw	r8,1044(sp)
1000b97c:	d8010615 	stw	zero,1048(sp)
1000b980:	000b5d00 	call	1000b5d0 <___vfiprintf_internal_r>
1000b984:	1021883a 	mov	r16,r2
1000b988:	10000416 	blt	r2,zero,1000b99c <___vfiprintf_internal_r+0x3cc>
1000b98c:	d9012117 	ldw	r4,1156(sp)
1000b990:	d9410004 	addi	r5,sp,1024
1000b994:	0007d180 	call	10007d18 <_fflush_r>
1000b998:	10040f1e 	bne	r2,zero,1000c9d8 <___vfiprintf_internal_r+0x1408>
1000b99c:	d881030b 	ldhu	r2,1036(sp)
1000b9a0:	1080100c 	andi	r2,r2,64
1000b9a4:	10000426 	beq	r2,zero,1000b9b8 <___vfiprintf_internal_r+0x3e8>
1000b9a8:	d8c12017 	ldw	r3,1152(sp)
1000b9ac:	1880030b 	ldhu	r2,12(r3)
1000b9b0:	10801014 	ori	r2,r2,64
1000b9b4:	1880030d 	sth	r2,12(r3)
1000b9b8:	8005883a 	mov	r2,r16
1000b9bc:	00000106 	br	1000b9c4 <___vfiprintf_internal_r+0x3f4>
1000b9c0:	00bfffc4 	movi	r2,-1
1000b9c4:	dfc13517 	ldw	ra,1236(sp)
1000b9c8:	df013417 	ldw	fp,1232(sp)
1000b9cc:	ddc13317 	ldw	r23,1228(sp)
1000b9d0:	dd813217 	ldw	r22,1224(sp)
1000b9d4:	dd413117 	ldw	r21,1220(sp)
1000b9d8:	dd013017 	ldw	r20,1216(sp)
1000b9dc:	dcc12f17 	ldw	r19,1212(sp)
1000b9e0:	dc812e17 	ldw	r18,1208(sp)
1000b9e4:	dc412d17 	ldw	r17,1204(sp)
1000b9e8:	dc012c17 	ldw	r16,1200(sp)
1000b9ec:	dec13604 	addi	sp,sp,1240
1000b9f0:	f800283a 	ret
1000b9f4:	00082d40 	call	100082d4 <__sinit>
1000b9f8:	003f0706 	br	1000b618 <__alt_data_end+0xf800b618>
1000b9fc:	d8c12417 	ldw	r3,1168(sp)
1000ba00:	d8812315 	stw	r2,1164(sp)
1000ba04:	00c7c83a 	sub	r3,zero,r3
1000ba08:	d8c12415 	stw	r3,1168(sp)
1000ba0c:	94800114 	ori	r18,r18,4
1000ba10:	b9800007 	ldb	r6,0(r23)
1000ba14:	003f4f06 	br	1000b754 <__alt_data_end+0xf800b754>
1000ba18:	94802014 	ori	r18,r18,128
1000ba1c:	b9800007 	ldb	r6,0(r23)
1000ba20:	003f4c06 	br	1000b754 <__alt_data_end+0xf800b754>
1000ba24:	dc012615 	stw	r16,1176(sp)
1000ba28:	d8012415 	stw	zero,1168(sp)
1000ba2c:	35bff404 	addi	r22,r6,-48
1000ba30:	0009883a 	mov	r4,zero
1000ba34:	b821883a 	mov	r16,r23
1000ba38:	01400284 	movi	r5,10
1000ba3c:	0002be00 	call	10002be0 <__mulsi3>
1000ba40:	81800007 	ldb	r6,0(r16)
1000ba44:	1589883a 	add	r4,r2,r22
1000ba48:	bdc00044 	addi	r23,r23,1
1000ba4c:	35bff404 	addi	r22,r6,-48
1000ba50:	b821883a 	mov	r16,r23
1000ba54:	adbff82e 	bgeu	r21,r22,1000ba38 <__alt_data_end+0xf800ba38>
1000ba58:	d9012415 	stw	r4,1168(sp)
1000ba5c:	dc012617 	ldw	r16,1176(sp)
1000ba60:	003f3d06 	br	1000b758 <__alt_data_end+0xf800b758>
1000ba64:	d8c12203 	ldbu	r3,1160(sp)
1000ba68:	94800414 	ori	r18,r18,16
1000ba6c:	9080080c 	andi	r2,r18,32
1000ba70:	d8c11d85 	stb	r3,1142(sp)
1000ba74:	9811883a 	mov	r8,r19
1000ba78:	d8c12317 	ldw	r3,1164(sp)
1000ba7c:	10018226 	beq	r2,zero,1000c088 <___vfiprintf_internal_r+0xab8>
1000ba80:	d9012317 	ldw	r4,1164(sp)
1000ba84:	18800117 	ldw	r2,4(r3)
1000ba88:	1cc00017 	ldw	r19,0(r3)
1000ba8c:	21000204 	addi	r4,r4,8
1000ba90:	d9012315 	stw	r4,1164(sp)
1000ba94:	102b883a 	mov	r21,r2
1000ba98:	10030016 	blt	r2,zero,1000c69c <___vfiprintf_internal_r+0x10cc>
1000ba9c:	dd811d83 	ldbu	r22,1142(sp)
1000baa0:	8029883a 	mov	r20,r16
1000baa4:	00800044 	movi	r2,1
1000baa8:	9d46b03a 	or	r3,r19,r21
1000baac:	80000216 	blt	r16,zero,1000bab8 <___vfiprintf_internal_r+0x4e8>
1000bab0:	013fdfc4 	movi	r4,-129
1000bab4:	9124703a 	and	r18,r18,r4
1000bab8:	1801b41e 	bne	r3,zero,1000c18c <___vfiprintf_internal_r+0xbbc>
1000babc:	80028126 	beq	r16,zero,1000c4c4 <___vfiprintf_internal_r+0xef4>
1000bac0:	10803fcc 	andi	r2,r2,255
1000bac4:	00c00044 	movi	r3,1
1000bac8:	10c1d126 	beq	r2,r3,1000c210 <___vfiprintf_internal_r+0xc40>
1000bacc:	00c00084 	movi	r3,2
1000bad0:	10c28626 	beq	r2,r3,1000c4ec <___vfiprintf_internal_r+0xf1c>
1000bad4:	d8c10a04 	addi	r3,sp,1064
1000bad8:	9808d0fa 	srli	r4,r19,3
1000badc:	a80a977a 	slli	r5,r21,29
1000bae0:	a82ad0fa 	srli	r21,r21,3
1000bae4:	9cc001cc 	andi	r19,r19,7
1000bae8:	98800c04 	addi	r2,r19,48
1000baec:	18ffffc4 	addi	r3,r3,-1
1000baf0:	2926b03a 	or	r19,r5,r4
1000baf4:	18800005 	stb	r2,0(r3)
1000baf8:	9d48b03a 	or	r4,r19,r21
1000bafc:	203ff61e 	bne	r4,zero,1000bad8 <__alt_data_end+0xf800bad8>
1000bb00:	9100004c 	andi	r4,r18,1
1000bb04:	d8c12215 	stw	r3,1160(sp)
1000bb08:	2002b31e 	bne	r4,zero,1000c5d8 <___vfiprintf_internal_r+0x1008>
1000bb0c:	d9411e17 	ldw	r5,1144(sp)
1000bb10:	28e9c83a 	sub	r20,r5,r3
1000bb14:	a02b883a 	mov	r21,r20
1000bb18:	a400010e 	bge	r20,r16,1000bb20 <___vfiprintf_internal_r+0x550>
1000bb1c:	802b883a 	mov	r21,r16
1000bb20:	b5803fcc 	andi	r22,r22,255
1000bb24:	b580201c 	xori	r22,r22,128
1000bb28:	b5bfe004 	addi	r22,r22,-128
1000bb2c:	b0000126 	beq	r22,zero,1000bb34 <___vfiprintf_internal_r+0x564>
1000bb30:	ad400044 	addi	r21,r21,1
1000bb34:	9280008c 	andi	r10,r18,2
1000bb38:	50000126 	beq	r10,zero,1000bb40 <___vfiprintf_internal_r+0x570>
1000bb3c:	ad400084 	addi	r21,r21,2
1000bb40:	9580210c 	andi	r22,r18,132
1000bb44:	b001751e 	bne	r22,zero,1000c11c <___vfiprintf_internal_r+0xb4c>
1000bb48:	d9012417 	ldw	r4,1168(sp)
1000bb4c:	2567c83a 	sub	r19,r4,r21
1000bb50:	04c1720e 	bge	zero,r19,1000c11c <___vfiprintf_internal_r+0xb4c>
1000bb54:	01c00404 	movi	r7,16
1000bb58:	d8c11c17 	ldw	r3,1136(sp)
1000bb5c:	3cc36b0e 	bge	r7,r19,1000c90c <___vfiprintf_internal_r+0x133c>
1000bb60:	00840074 	movhi	r2,4097
1000bb64:	10851404 	addi	r2,r2,5200
1000bb68:	dc012915 	stw	r16,1188(sp)
1000bb6c:	d9011b17 	ldw	r4,1132(sp)
1000bb70:	9821883a 	mov	r16,r19
1000bb74:	d8812615 	stw	r2,1176(sp)
1000bb78:	030001c4 	movi	r12,7
1000bb7c:	5027883a 	mov	r19,r10
1000bb80:	00000506 	br	1000bb98 <___vfiprintf_internal_r+0x5c8>
1000bb84:	21400084 	addi	r5,r4,2
1000bb88:	42000204 	addi	r8,r8,8
1000bb8c:	1009883a 	mov	r4,r2
1000bb90:	843ffc04 	addi	r16,r16,-16
1000bb94:	3c000d0e 	bge	r7,r16,1000bbcc <___vfiprintf_internal_r+0x5fc>
1000bb98:	18c00404 	addi	r3,r3,16
1000bb9c:	20800044 	addi	r2,r4,1
1000bba0:	47000015 	stw	fp,0(r8)
1000bba4:	41c00115 	stw	r7,4(r8)
1000bba8:	d8c11c15 	stw	r3,1136(sp)
1000bbac:	d8811b15 	stw	r2,1132(sp)
1000bbb0:	60bff40e 	bge	r12,r2,1000bb84 <__alt_data_end+0xf800bb84>
1000bbb4:	18014b1e 	bne	r3,zero,1000c0e4 <___vfiprintf_internal_r+0xb14>
1000bbb8:	843ffc04 	addi	r16,r16,-16
1000bbbc:	0009883a 	mov	r4,zero
1000bbc0:	01400044 	movi	r5,1
1000bbc4:	d811883a 	mov	r8,sp
1000bbc8:	3c3ff316 	blt	r7,r16,1000bb98 <__alt_data_end+0xf800bb98>
1000bbcc:	9815883a 	mov	r10,r19
1000bbd0:	8027883a 	mov	r19,r16
1000bbd4:	dc012917 	ldw	r16,1188(sp)
1000bbd8:	d9012617 	ldw	r4,1176(sp)
1000bbdc:	98c7883a 	add	r3,r19,r3
1000bbe0:	44c00115 	stw	r19,4(r8)
1000bbe4:	41000015 	stw	r4,0(r8)
1000bbe8:	d8c11c15 	stw	r3,1136(sp)
1000bbec:	d9411b15 	stw	r5,1132(sp)
1000bbf0:	008001c4 	movi	r2,7
1000bbf4:	11425116 	blt	r2,r5,1000c53c <___vfiprintf_internal_r+0xf6c>
1000bbf8:	d9011d87 	ldb	r4,1142(sp)
1000bbfc:	42000204 	addi	r8,r8,8
1000bc00:	28800044 	addi	r2,r5,1
1000bc04:	20014a1e 	bne	r4,zero,1000c130 <___vfiprintf_internal_r+0xb60>
1000bc08:	50000c26 	beq	r10,zero,1000bc3c <___vfiprintf_internal_r+0x66c>
1000bc0c:	d9011d04 	addi	r4,sp,1140
1000bc10:	18c00084 	addi	r3,r3,2
1000bc14:	41000015 	stw	r4,0(r8)
1000bc18:	01000084 	movi	r4,2
1000bc1c:	41000115 	stw	r4,4(r8)
1000bc20:	d8c11c15 	stw	r3,1136(sp)
1000bc24:	d8811b15 	stw	r2,1132(sp)
1000bc28:	010001c4 	movi	r4,7
1000bc2c:	20822016 	blt	r4,r2,1000c4b0 <___vfiprintf_internal_r+0xee0>
1000bc30:	100b883a 	mov	r5,r2
1000bc34:	42000204 	addi	r8,r8,8
1000bc38:	10800044 	addi	r2,r2,1
1000bc3c:	01002004 	movi	r4,128
1000bc40:	b101de26 	beq	r22,r4,1000c3bc <___vfiprintf_internal_r+0xdec>
1000bc44:	8521c83a 	sub	r16,r16,r20
1000bc48:	0400230e 	bge	zero,r16,1000bcd8 <___vfiprintf_internal_r+0x708>
1000bc4c:	04c00404 	movi	r19,16
1000bc50:	9c030d0e 	bge	r19,r16,1000c888 <___vfiprintf_internal_r+0x12b8>
1000bc54:	00840074 	movhi	r2,4097
1000bc58:	10851004 	addi	r2,r2,5184
1000bc5c:	d8812615 	stw	r2,1176(sp)
1000bc60:	058001c4 	movi	r22,7
1000bc64:	00000506 	br	1000bc7c <___vfiprintf_internal_r+0x6ac>
1000bc68:	28800084 	addi	r2,r5,2
1000bc6c:	42000204 	addi	r8,r8,8
1000bc70:	200b883a 	mov	r5,r4
1000bc74:	843ffc04 	addi	r16,r16,-16
1000bc78:	9c000d0e 	bge	r19,r16,1000bcb0 <___vfiprintf_internal_r+0x6e0>
1000bc7c:	18c00404 	addi	r3,r3,16
1000bc80:	29000044 	addi	r4,r5,1
1000bc84:	44400015 	stw	r17,0(r8)
1000bc88:	44c00115 	stw	r19,4(r8)
1000bc8c:	d8c11c15 	stw	r3,1136(sp)
1000bc90:	d9011b15 	stw	r4,1132(sp)
1000bc94:	b13ff40e 	bge	r22,r4,1000bc68 <__alt_data_end+0xf800bc68>
1000bc98:	1801321e 	bne	r3,zero,1000c164 <___vfiprintf_internal_r+0xb94>
1000bc9c:	843ffc04 	addi	r16,r16,-16
1000bca0:	000b883a 	mov	r5,zero
1000bca4:	00800044 	movi	r2,1
1000bca8:	d811883a 	mov	r8,sp
1000bcac:	9c3ff316 	blt	r19,r16,1000bc7c <__alt_data_end+0xf800bc7c>
1000bcb0:	d9012617 	ldw	r4,1176(sp)
1000bcb4:	1c07883a 	add	r3,r3,r16
1000bcb8:	44000115 	stw	r16,4(r8)
1000bcbc:	41000015 	stw	r4,0(r8)
1000bcc0:	d8c11c15 	stw	r3,1136(sp)
1000bcc4:	d8811b15 	stw	r2,1132(sp)
1000bcc8:	010001c4 	movi	r4,7
1000bccc:	20816216 	blt	r4,r2,1000c258 <___vfiprintf_internal_r+0xc88>
1000bcd0:	42000204 	addi	r8,r8,8
1000bcd4:	10800044 	addi	r2,r2,1
1000bcd8:	d9012217 	ldw	r4,1160(sp)
1000bcdc:	1d07883a 	add	r3,r3,r20
1000bce0:	45000115 	stw	r20,4(r8)
1000bce4:	41000015 	stw	r4,0(r8)
1000bce8:	d8c11c15 	stw	r3,1136(sp)
1000bcec:	d8811b15 	stw	r2,1132(sp)
1000bcf0:	010001c4 	movi	r4,7
1000bcf4:	2081610e 	bge	r4,r2,1000c27c <___vfiprintf_internal_r+0xcac>
1000bcf8:	1802211e 	bne	r3,zero,1000c580 <___vfiprintf_internal_r+0xfb0>
1000bcfc:	d8011b15 	stw	zero,1132(sp)
1000bd00:	9480010c 	andi	r18,r18,4
1000bd04:	9002171e 	bne	r18,zero,1000c564 <___vfiprintf_internal_r+0xf94>
1000bd08:	d9412417 	ldw	r5,1168(sp)
1000bd0c:	a9433716 	blt	r21,r5,1000c9ec <___vfiprintf_internal_r+0x141c>
1000bd10:	d8812517 	ldw	r2,1172(sp)
1000bd14:	1545883a 	add	r2,r2,r21
1000bd18:	d8812515 	stw	r2,1172(sp)
1000bd1c:	00019a06 	br	1000c388 <___vfiprintf_internal_r+0xdb8>
1000bd20:	d8c12317 	ldw	r3,1164(sp)
1000bd24:	05400044 	movi	r21,1
1000bd28:	9811883a 	mov	r8,r19
1000bd2c:	18800017 	ldw	r2,0(r3)
1000bd30:	18c00104 	addi	r3,r3,4
1000bd34:	d8c12315 	stw	r3,1164(sp)
1000bd38:	d8c10004 	addi	r3,sp,1024
1000bd3c:	d8011d85 	stb	zero,1142(sp)
1000bd40:	d8810005 	stb	r2,1024(sp)
1000bd44:	a829883a 	mov	r20,r21
1000bd48:	d8c12215 	stw	r3,1160(sp)
1000bd4c:	0021883a 	mov	r16,zero
1000bd50:	003f7806 	br	1000bb34 <__alt_data_end+0xf800bb34>
1000bd54:	94800414 	ori	r18,r18,16
1000bd58:	9080080c 	andi	r2,r18,32
1000bd5c:	9811883a 	mov	r8,r19
1000bd60:	10009026 	beq	r2,zero,1000bfa4 <___vfiprintf_internal_r+0x9d4>
1000bd64:	d8812317 	ldw	r2,1164(sp)
1000bd68:	d8c12317 	ldw	r3,1164(sp)
1000bd6c:	14c00017 	ldw	r19,0(r2)
1000bd70:	15400117 	ldw	r21,4(r2)
1000bd74:	18c00204 	addi	r3,r3,8
1000bd78:	d8c12315 	stw	r3,1164(sp)
1000bd7c:	0005883a 	mov	r2,zero
1000bd80:	9d46b03a 	or	r3,r19,r21
1000bd84:	d8011d85 	stb	zero,1142(sp)
1000bd88:	8029883a 	mov	r20,r16
1000bd8c:	002d883a 	mov	r22,zero
1000bd90:	003f4606 	br	1000baac <__alt_data_end+0xf800baac>
1000bd94:	94800414 	ori	r18,r18,16
1000bd98:	9080080c 	andi	r2,r18,32
1000bd9c:	9811883a 	mov	r8,r19
1000bda0:	10006226 	beq	r2,zero,1000bf2c <___vfiprintf_internal_r+0x95c>
1000bda4:	d9012317 	ldw	r4,1164(sp)
1000bda8:	00800044 	movi	r2,1
1000bdac:	24c00017 	ldw	r19,0(r4)
1000bdb0:	25400117 	ldw	r21,4(r4)
1000bdb4:	21000204 	addi	r4,r4,8
1000bdb8:	d9012315 	stw	r4,1164(sp)
1000bdbc:	9d46b03a 	or	r3,r19,r21
1000bdc0:	003ff006 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000bdc4:	b9800007 	ldb	r6,0(r23)
1000bdc8:	00801b04 	movi	r2,108
1000bdcc:	3082b226 	beq	r6,r2,1000c898 <___vfiprintf_internal_r+0x12c8>
1000bdd0:	94800414 	ori	r18,r18,16
1000bdd4:	003e5f06 	br	1000b754 <__alt_data_end+0xf800b754>
1000bdd8:	d8c12203 	ldbu	r3,1160(sp)
1000bddc:	01040074 	movhi	r4,4097
1000bde0:	2104aa04 	addi	r4,r4,4776
1000bde4:	d8c11d85 	stb	r3,1142(sp)
1000bde8:	d9012715 	stw	r4,1180(sp)
1000bdec:	90c0080c 	andi	r3,r18,32
1000bdf0:	9811883a 	mov	r8,r19
1000bdf4:	d8812317 	ldw	r2,1164(sp)
1000bdf8:	18005f26 	beq	r3,zero,1000bf78 <___vfiprintf_internal_r+0x9a8>
1000bdfc:	d9012317 	ldw	r4,1164(sp)
1000be00:	14c00017 	ldw	r19,0(r2)
1000be04:	15400117 	ldw	r21,4(r2)
1000be08:	21000204 	addi	r4,r4,8
1000be0c:	d9012315 	stw	r4,1164(sp)
1000be10:	9080004c 	andi	r2,r18,1
1000be14:	1001e226 	beq	r2,zero,1000c5a0 <___vfiprintf_internal_r+0xfd0>
1000be18:	9d46b03a 	or	r3,r19,r21
1000be1c:	18024e26 	beq	r3,zero,1000c758 <___vfiprintf_internal_r+0x1188>
1000be20:	00800c04 	movi	r2,48
1000be24:	d8811d05 	stb	r2,1140(sp)
1000be28:	d9811d45 	stb	r6,1141(sp)
1000be2c:	94800094 	ori	r18,r18,2
1000be30:	00800084 	movi	r2,2
1000be34:	003fd306 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000be38:	d9012317 	ldw	r4,1164(sp)
1000be3c:	d9412317 	ldw	r5,1164(sp)
1000be40:	21000017 	ldw	r4,0(r4)
1000be44:	28800104 	addi	r2,r5,4
1000be48:	d9012415 	stw	r4,1168(sp)
1000be4c:	203eeb16 	blt	r4,zero,1000b9fc <__alt_data_end+0xf800b9fc>
1000be50:	d8812315 	stw	r2,1164(sp)
1000be54:	b9800007 	ldb	r6,0(r23)
1000be58:	003e3e06 	br	1000b754 <__alt_data_end+0xf800b754>
1000be5c:	b9800007 	ldb	r6,0(r23)
1000be60:	01000a84 	movi	r4,42
1000be64:	b8800044 	addi	r2,r23,1
1000be68:	3102d226 	beq	r6,r4,1000c9b4 <___vfiprintf_internal_r+0x13e4>
1000be6c:	35bff404 	addi	r22,r6,-48
1000be70:	102f883a 	mov	r23,r2
1000be74:	0021883a 	mov	r16,zero
1000be78:	adbe3736 	bltu	r21,r22,1000b758 <__alt_data_end+0xf800b758>
1000be7c:	0009883a 	mov	r4,zero
1000be80:	01400284 	movi	r5,10
1000be84:	0002be00 	call	10002be0 <__mulsi3>
1000be88:	b9800007 	ldb	r6,0(r23)
1000be8c:	b089883a 	add	r4,r22,r2
1000be90:	bdc00044 	addi	r23,r23,1
1000be94:	35bff404 	addi	r22,r6,-48
1000be98:	adbff92e 	bgeu	r21,r22,1000be80 <__alt_data_end+0xf800be80>
1000be9c:	2021883a 	mov	r16,r4
1000bea0:	203e2d0e 	bge	r4,zero,1000b758 <__alt_data_end+0xf800b758>
1000bea4:	043fffc4 	movi	r16,-1
1000bea8:	003e2b06 	br	1000b758 <__alt_data_end+0xf800b758>
1000beac:	94801014 	ori	r18,r18,64
1000beb0:	b9800007 	ldb	r6,0(r23)
1000beb4:	003e2706 	br	1000b754 <__alt_data_end+0xf800b754>
1000beb8:	94800814 	ori	r18,r18,32
1000bebc:	b9800007 	ldb	r6,0(r23)
1000bec0:	003e2406 	br	1000b754 <__alt_data_end+0xf800b754>
1000bec4:	d9412317 	ldw	r5,1164(sp)
1000bec8:	d8812317 	ldw	r2,1164(sp)
1000becc:	d8011d85 	stb	zero,1142(sp)
1000bed0:	29400017 	ldw	r5,0(r5)
1000bed4:	9811883a 	mov	r8,r19
1000bed8:	14c00104 	addi	r19,r2,4
1000bedc:	d9412215 	stw	r5,1160(sp)
1000bee0:	28029026 	beq	r5,zero,1000c924 <___vfiprintf_internal_r+0x1354>
1000bee4:	d9012217 	ldw	r4,1160(sp)
1000bee8:	80027616 	blt	r16,zero,1000c8c4 <___vfiprintf_internal_r+0x12f4>
1000beec:	000b883a 	mov	r5,zero
1000bef0:	800d883a 	mov	r6,r16
1000bef4:	da012a15 	stw	r8,1192(sp)
1000bef8:	000978c0 	call	1000978c <memchr>
1000befc:	da012a17 	ldw	r8,1192(sp)
1000bf00:	1002a026 	beq	r2,zero,1000c984 <___vfiprintf_internal_r+0x13b4>
1000bf04:	d8c12217 	ldw	r3,1160(sp)
1000bf08:	10e9c83a 	sub	r20,r2,r3
1000bf0c:	85023816 	blt	r16,r20,1000c7f0 <___vfiprintf_internal_r+0x1220>
1000bf10:	dd811d83 	ldbu	r22,1142(sp)
1000bf14:	dcc12315 	stw	r19,1164(sp)
1000bf18:	0021883a 	mov	r16,zero
1000bf1c:	003efd06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000bf20:	9080080c 	andi	r2,r18,32
1000bf24:	9811883a 	mov	r8,r19
1000bf28:	103f9e1e 	bne	r2,zero,1000bda4 <__alt_data_end+0xf800bda4>
1000bf2c:	9080040c 	andi	r2,r18,16
1000bf30:	10021726 	beq	r2,zero,1000c790 <___vfiprintf_internal_r+0x11c0>
1000bf34:	d9412317 	ldw	r5,1164(sp)
1000bf38:	002b883a 	mov	r21,zero
1000bf3c:	00800044 	movi	r2,1
1000bf40:	2cc00017 	ldw	r19,0(r5)
1000bf44:	29400104 	addi	r5,r5,4
1000bf48:	d9412315 	stw	r5,1164(sp)
1000bf4c:	9807883a 	mov	r3,r19
1000bf50:	003f8c06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000bf54:	d8c12203 	ldbu	r3,1160(sp)
1000bf58:	01040074 	movhi	r4,4097
1000bf5c:	2104af04 	addi	r4,r4,4796
1000bf60:	d8c11d85 	stb	r3,1142(sp)
1000bf64:	d9012715 	stw	r4,1180(sp)
1000bf68:	90c0080c 	andi	r3,r18,32
1000bf6c:	9811883a 	mov	r8,r19
1000bf70:	d8812317 	ldw	r2,1164(sp)
1000bf74:	183fa11e 	bne	r3,zero,1000bdfc <__alt_data_end+0xf800bdfc>
1000bf78:	90c0040c 	andi	r3,r18,16
1000bf7c:	1801e526 	beq	r3,zero,1000c714 <___vfiprintf_internal_r+0x1144>
1000bf80:	d9412317 	ldw	r5,1164(sp)
1000bf84:	14c00017 	ldw	r19,0(r2)
1000bf88:	002b883a 	mov	r21,zero
1000bf8c:	29400104 	addi	r5,r5,4
1000bf90:	d9412315 	stw	r5,1164(sp)
1000bf94:	003f9e06 	br	1000be10 <__alt_data_end+0xf800be10>
1000bf98:	9080080c 	andi	r2,r18,32
1000bf9c:	9811883a 	mov	r8,r19
1000bfa0:	103f701e 	bne	r2,zero,1000bd64 <__alt_data_end+0xf800bd64>
1000bfa4:	9080040c 	andi	r2,r18,16
1000bfa8:	1001ef26 	beq	r2,zero,1000c768 <___vfiprintf_internal_r+0x1198>
1000bfac:	d9012317 	ldw	r4,1164(sp)
1000bfb0:	002b883a 	mov	r21,zero
1000bfb4:	0005883a 	mov	r2,zero
1000bfb8:	24c00017 	ldw	r19,0(r4)
1000bfbc:	21000104 	addi	r4,r4,4
1000bfc0:	d9012315 	stw	r4,1164(sp)
1000bfc4:	9807883a 	mov	r3,r19
1000bfc8:	003f6e06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000bfcc:	d8c12317 	ldw	r3,1164(sp)
1000bfd0:	9811883a 	mov	r8,r19
1000bfd4:	00800c04 	movi	r2,48
1000bfd8:	1cc00017 	ldw	r19,0(r3)
1000bfdc:	01040074 	movhi	r4,4097
1000bfe0:	18c00104 	addi	r3,r3,4
1000bfe4:	d8811d05 	stb	r2,1140(sp)
1000bfe8:	2104af04 	addi	r4,r4,4796
1000bfec:	00801e04 	movi	r2,120
1000bff0:	d8811d45 	stb	r2,1141(sp)
1000bff4:	d8c12315 	stw	r3,1164(sp)
1000bff8:	002b883a 	mov	r21,zero
1000bffc:	94800094 	ori	r18,r18,2
1000c000:	d9012715 	stw	r4,1180(sp)
1000c004:	00800084 	movi	r2,2
1000c008:	9807883a 	mov	r3,r19
1000c00c:	003f5d06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c010:	d8c12203 	ldbu	r3,1160(sp)
1000c014:	9080080c 	andi	r2,r18,32
1000c018:	9811883a 	mov	r8,r19
1000c01c:	d8c11d85 	stb	r3,1142(sp)
1000c020:	1001b126 	beq	r2,zero,1000c6e8 <___vfiprintf_internal_r+0x1118>
1000c024:	d9012317 	ldw	r4,1164(sp)
1000c028:	d9412517 	ldw	r5,1172(sp)
1000c02c:	20800017 	ldw	r2,0(r4)
1000c030:	2807d7fa 	srai	r3,r5,31
1000c034:	21000104 	addi	r4,r4,4
1000c038:	d9012315 	stw	r4,1164(sp)
1000c03c:	11400015 	stw	r5,0(r2)
1000c040:	10c00115 	stw	r3,4(r2)
1000c044:	003d9a06 	br	1000b6b0 <__alt_data_end+0xf800b6b0>
1000c048:	d8812207 	ldb	r2,1160(sp)
1000c04c:	1001c41e 	bne	r2,zero,1000c760 <___vfiprintf_internal_r+0x1190>
1000c050:	00c00804 	movi	r3,32
1000c054:	d8c12205 	stb	r3,1160(sp)
1000c058:	b9800007 	ldb	r6,0(r23)
1000c05c:	003dbd06 	br	1000b754 <__alt_data_end+0xf800b754>
1000c060:	00c00ac4 	movi	r3,43
1000c064:	d8c12205 	stb	r3,1160(sp)
1000c068:	b9800007 	ldb	r6,0(r23)
1000c06c:	003db906 	br	1000b754 <__alt_data_end+0xf800b754>
1000c070:	d8c12203 	ldbu	r3,1160(sp)
1000c074:	9080080c 	andi	r2,r18,32
1000c078:	9811883a 	mov	r8,r19
1000c07c:	d8c11d85 	stb	r3,1142(sp)
1000c080:	d8c12317 	ldw	r3,1164(sp)
1000c084:	103e7e1e 	bne	r2,zero,1000ba80 <__alt_data_end+0xf800ba80>
1000c088:	9080040c 	andi	r2,r18,16
1000c08c:	1001a926 	beq	r2,zero,1000c734 <___vfiprintf_internal_r+0x1164>
1000c090:	1cc00017 	ldw	r19,0(r3)
1000c094:	d9412317 	ldw	r5,1164(sp)
1000c098:	982bd7fa 	srai	r21,r19,31
1000c09c:	29400104 	addi	r5,r5,4
1000c0a0:	d9412315 	stw	r5,1164(sp)
1000c0a4:	a805883a 	mov	r2,r21
1000c0a8:	003e7b06 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000c0ac:	94800054 	ori	r18,r18,1
1000c0b0:	b9800007 	ldb	r6,0(r23)
1000c0b4:	003da706 	br	1000b754 <__alt_data_end+0xf800b754>
1000c0b8:	d8c12203 	ldbu	r3,1160(sp)
1000c0bc:	9811883a 	mov	r8,r19
1000c0c0:	d8c11d85 	stb	r3,1142(sp)
1000c0c4:	30005826 	beq	r6,zero,1000c228 <___vfiprintf_internal_r+0xc58>
1000c0c8:	05400044 	movi	r21,1
1000c0cc:	d8c10004 	addi	r3,sp,1024
1000c0d0:	d9810005 	stb	r6,1024(sp)
1000c0d4:	d8011d85 	stb	zero,1142(sp)
1000c0d8:	a829883a 	mov	r20,r21
1000c0dc:	d8c12215 	stw	r3,1160(sp)
1000c0e0:	003f1a06 	br	1000bd4c <__alt_data_end+0xf800bd4c>
1000c0e4:	d9012117 	ldw	r4,1156(sp)
1000c0e8:	d9412017 	ldw	r5,1152(sp)
1000c0ec:	d9811a04 	addi	r6,sp,1128
1000c0f0:	d9c12a15 	stw	r7,1192(sp)
1000c0f4:	db012b15 	stw	r12,1196(sp)
1000c0f8:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c0fc:	d9c12a17 	ldw	r7,1192(sp)
1000c100:	db012b17 	ldw	r12,1196(sp)
1000c104:	10004e1e 	bne	r2,zero,1000c240 <___vfiprintf_internal_r+0xc70>
1000c108:	d9011b17 	ldw	r4,1132(sp)
1000c10c:	d8c11c17 	ldw	r3,1136(sp)
1000c110:	d811883a 	mov	r8,sp
1000c114:	21400044 	addi	r5,r4,1
1000c118:	003e9d06 	br	1000bb90 <__alt_data_end+0xf800bb90>
1000c11c:	d9411b17 	ldw	r5,1132(sp)
1000c120:	d8c11c17 	ldw	r3,1136(sp)
1000c124:	28800044 	addi	r2,r5,1
1000c128:	d9011d87 	ldb	r4,1142(sp)
1000c12c:	203eb626 	beq	r4,zero,1000bc08 <__alt_data_end+0xf800bc08>
1000c130:	01000044 	movi	r4,1
1000c134:	d9411d84 	addi	r5,sp,1142
1000c138:	1907883a 	add	r3,r3,r4
1000c13c:	41400015 	stw	r5,0(r8)
1000c140:	41000115 	stw	r4,4(r8)
1000c144:	d8c11c15 	stw	r3,1136(sp)
1000c148:	d8811b15 	stw	r2,1132(sp)
1000c14c:	014001c4 	movi	r5,7
1000c150:	2880ce16 	blt	r5,r2,1000c48c <___vfiprintf_internal_r+0xebc>
1000c154:	100b883a 	mov	r5,r2
1000c158:	42000204 	addi	r8,r8,8
1000c15c:	10800044 	addi	r2,r2,1
1000c160:	003ea906 	br	1000bc08 <__alt_data_end+0xf800bc08>
1000c164:	d9012117 	ldw	r4,1156(sp)
1000c168:	d9412017 	ldw	r5,1152(sp)
1000c16c:	d9811a04 	addi	r6,sp,1128
1000c170:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c174:	1000321e 	bne	r2,zero,1000c240 <___vfiprintf_internal_r+0xc70>
1000c178:	d9411b17 	ldw	r5,1132(sp)
1000c17c:	d8c11c17 	ldw	r3,1136(sp)
1000c180:	d811883a 	mov	r8,sp
1000c184:	28800044 	addi	r2,r5,1
1000c188:	003eba06 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000c18c:	10803fcc 	andi	r2,r2,255
1000c190:	00c00044 	movi	r3,1
1000c194:	10fe4d1e 	bne	r2,r3,1000bacc <__alt_data_end+0xf800bacc>
1000c198:	a800021e 	bne	r21,zero,1000c1a4 <___vfiprintf_internal_r+0xbd4>
1000c19c:	00800244 	movi	r2,9
1000c1a0:	14c01b2e 	bgeu	r2,r19,1000c210 <___vfiprintf_internal_r+0xc40>
1000c1a4:	dc012215 	stw	r16,1160(sp)
1000c1a8:	dd010a04 	addi	r20,sp,1064
1000c1ac:	a821883a 	mov	r16,r21
1000c1b0:	402b883a 	mov	r21,r8
1000c1b4:	9809883a 	mov	r4,r19
1000c1b8:	800b883a 	mov	r5,r16
1000c1bc:	01800284 	movi	r6,10
1000c1c0:	000f883a 	mov	r7,zero
1000c1c4:	00024980 	call	10002498 <__umoddi3>
1000c1c8:	10800c04 	addi	r2,r2,48
1000c1cc:	a53fffc4 	addi	r20,r20,-1
1000c1d0:	9809883a 	mov	r4,r19
1000c1d4:	800b883a 	mov	r5,r16
1000c1d8:	01800284 	movi	r6,10
1000c1dc:	000f883a 	mov	r7,zero
1000c1e0:	a0800005 	stb	r2,0(r20)
1000c1e4:	0001e580 	call	10001e58 <__udivdi3>
1000c1e8:	1027883a 	mov	r19,r2
1000c1ec:	10c4b03a 	or	r2,r2,r3
1000c1f0:	1821883a 	mov	r16,r3
1000c1f4:	103fef1e 	bne	r2,zero,1000c1b4 <__alt_data_end+0xf800c1b4>
1000c1f8:	d9011e17 	ldw	r4,1144(sp)
1000c1fc:	dc012217 	ldw	r16,1160(sp)
1000c200:	a811883a 	mov	r8,r21
1000c204:	dd012215 	stw	r20,1160(sp)
1000c208:	2529c83a 	sub	r20,r4,r20
1000c20c:	003e4106 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c210:	9cc00c04 	addi	r19,r19,48
1000c214:	d8c109c4 	addi	r3,sp,1063
1000c218:	dcc109c5 	stb	r19,1063(sp)
1000c21c:	dd012817 	ldw	r20,1184(sp)
1000c220:	d8c12215 	stw	r3,1160(sp)
1000c224:	003e3b06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c228:	d8811c17 	ldw	r2,1136(sp)
1000c22c:	10000426 	beq	r2,zero,1000c240 <___vfiprintf_internal_r+0xc70>
1000c230:	d9012117 	ldw	r4,1156(sp)
1000c234:	d9412017 	ldw	r5,1152(sp)
1000c238:	d9811a04 	addi	r6,sp,1128
1000c23c:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c240:	d9412017 	ldw	r5,1152(sp)
1000c244:	2880030b 	ldhu	r2,12(r5)
1000c248:	1080100c 	andi	r2,r2,64
1000c24c:	103ddc1e 	bne	r2,zero,1000b9c0 <__alt_data_end+0xf800b9c0>
1000c250:	d8812517 	ldw	r2,1172(sp)
1000c254:	003ddb06 	br	1000b9c4 <__alt_data_end+0xf800b9c4>
1000c258:	1801061e 	bne	r3,zero,1000c674 <___vfiprintf_internal_r+0x10a4>
1000c25c:	d8c12217 	ldw	r3,1160(sp)
1000c260:	00800044 	movi	r2,1
1000c264:	dd000115 	stw	r20,4(sp)
1000c268:	d8c00015 	stw	r3,0(sp)
1000c26c:	dd011c15 	stw	r20,1136(sp)
1000c270:	d8811b15 	stw	r2,1132(sp)
1000c274:	a007883a 	mov	r3,r20
1000c278:	d811883a 	mov	r8,sp
1000c27c:	42000204 	addi	r8,r8,8
1000c280:	9480010c 	andi	r18,r18,4
1000c284:	90003426 	beq	r18,zero,1000c358 <___vfiprintf_internal_r+0xd88>
1000c288:	d9412417 	ldw	r5,1168(sp)
1000c28c:	2d65c83a 	sub	r18,r5,r21
1000c290:	0480310e 	bge	zero,r18,1000c358 <___vfiprintf_internal_r+0xd88>
1000c294:	04000404 	movi	r16,16
1000c298:	8481ad0e 	bge	r16,r18,1000c950 <___vfiprintf_internal_r+0x1380>
1000c29c:	01440074 	movhi	r5,4097
1000c2a0:	29451404 	addi	r5,r5,5200
1000c2a4:	d9011b17 	ldw	r4,1132(sp)
1000c2a8:	d9412615 	stw	r5,1176(sp)
1000c2ac:	04c001c4 	movi	r19,7
1000c2b0:	dd012117 	ldw	r20,1156(sp)
1000c2b4:	dd812017 	ldw	r22,1152(sp)
1000c2b8:	00000506 	br	1000c2d0 <___vfiprintf_internal_r+0xd00>
1000c2bc:	21400084 	addi	r5,r4,2
1000c2c0:	42000204 	addi	r8,r8,8
1000c2c4:	1009883a 	mov	r4,r2
1000c2c8:	94bffc04 	addi	r18,r18,-16
1000c2cc:	84800d0e 	bge	r16,r18,1000c304 <___vfiprintf_internal_r+0xd34>
1000c2d0:	18c00404 	addi	r3,r3,16
1000c2d4:	20800044 	addi	r2,r4,1
1000c2d8:	47000015 	stw	fp,0(r8)
1000c2dc:	44000115 	stw	r16,4(r8)
1000c2e0:	d8c11c15 	stw	r3,1136(sp)
1000c2e4:	d8811b15 	stw	r2,1132(sp)
1000c2e8:	98bff40e 	bge	r19,r2,1000c2bc <__alt_data_end+0xf800c2bc>
1000c2ec:	1800291e 	bne	r3,zero,1000c394 <___vfiprintf_internal_r+0xdc4>
1000c2f0:	94bffc04 	addi	r18,r18,-16
1000c2f4:	0009883a 	mov	r4,zero
1000c2f8:	01400044 	movi	r5,1
1000c2fc:	d811883a 	mov	r8,sp
1000c300:	84bff316 	blt	r16,r18,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c304:	d8812617 	ldw	r2,1176(sp)
1000c308:	1c87883a 	add	r3,r3,r18
1000c30c:	44800115 	stw	r18,4(r8)
1000c310:	40800015 	stw	r2,0(r8)
1000c314:	d8c11c15 	stw	r3,1136(sp)
1000c318:	d9411b15 	stw	r5,1132(sp)
1000c31c:	008001c4 	movi	r2,7
1000c320:	11400d0e 	bge	r2,r5,1000c358 <___vfiprintf_internal_r+0xd88>
1000c324:	1800061e 	bne	r3,zero,1000c340 <___vfiprintf_internal_r+0xd70>
1000c328:	d8c12417 	ldw	r3,1168(sp)
1000c32c:	a8c12e16 	blt	r21,r3,1000c7e8 <___vfiprintf_internal_r+0x1218>
1000c330:	d9012517 	ldw	r4,1172(sp)
1000c334:	2549883a 	add	r4,r4,r21
1000c338:	d9012515 	stw	r4,1172(sp)
1000c33c:	00001206 	br	1000c388 <___vfiprintf_internal_r+0xdb8>
1000c340:	d9012117 	ldw	r4,1156(sp)
1000c344:	d9412017 	ldw	r5,1152(sp)
1000c348:	d9811a04 	addi	r6,sp,1128
1000c34c:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c350:	103fbb1e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c354:	d8c11c17 	ldw	r3,1136(sp)
1000c358:	d8812417 	ldw	r2,1168(sp)
1000c35c:	a880010e 	bge	r21,r2,1000c364 <___vfiprintf_internal_r+0xd94>
1000c360:	102b883a 	mov	r21,r2
1000c364:	d9012517 	ldw	r4,1172(sp)
1000c368:	2549883a 	add	r4,r4,r21
1000c36c:	d9012515 	stw	r4,1172(sp)
1000c370:	18000526 	beq	r3,zero,1000c388 <___vfiprintf_internal_r+0xdb8>
1000c374:	d9012117 	ldw	r4,1156(sp)
1000c378:	d9412017 	ldw	r5,1152(sp)
1000c37c:	d9811a04 	addi	r6,sp,1128
1000c380:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c384:	103fae1e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c388:	d8011b15 	stw	zero,1132(sp)
1000c38c:	d811883a 	mov	r8,sp
1000c390:	003cc706 	br	1000b6b0 <__alt_data_end+0xf800b6b0>
1000c394:	a009883a 	mov	r4,r20
1000c398:	b00b883a 	mov	r5,r22
1000c39c:	d9811a04 	addi	r6,sp,1128
1000c3a0:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c3a4:	103fa61e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c3a8:	d9011b17 	ldw	r4,1132(sp)
1000c3ac:	d8c11c17 	ldw	r3,1136(sp)
1000c3b0:	d811883a 	mov	r8,sp
1000c3b4:	21400044 	addi	r5,r4,1
1000c3b8:	003fc306 	br	1000c2c8 <__alt_data_end+0xf800c2c8>
1000c3bc:	d9012417 	ldw	r4,1168(sp)
1000c3c0:	256dc83a 	sub	r22,r4,r21
1000c3c4:	05be1f0e 	bge	zero,r22,1000bc44 <__alt_data_end+0xf800bc44>
1000c3c8:	04c00404 	movi	r19,16
1000c3cc:	9d81720e 	bge	r19,r22,1000c998 <___vfiprintf_internal_r+0x13c8>
1000c3d0:	00840074 	movhi	r2,4097
1000c3d4:	10851004 	addi	r2,r2,5184
1000c3d8:	d8812615 	stw	r2,1176(sp)
1000c3dc:	028001c4 	movi	r10,7
1000c3e0:	00000506 	br	1000c3f8 <___vfiprintf_internal_r+0xe28>
1000c3e4:	29000084 	addi	r4,r5,2
1000c3e8:	42000204 	addi	r8,r8,8
1000c3ec:	100b883a 	mov	r5,r2
1000c3f0:	b5bffc04 	addi	r22,r22,-16
1000c3f4:	9d800d0e 	bge	r19,r22,1000c42c <___vfiprintf_internal_r+0xe5c>
1000c3f8:	18c00404 	addi	r3,r3,16
1000c3fc:	28800044 	addi	r2,r5,1
1000c400:	44400015 	stw	r17,0(r8)
1000c404:	44c00115 	stw	r19,4(r8)
1000c408:	d8c11c15 	stw	r3,1136(sp)
1000c40c:	d8811b15 	stw	r2,1132(sp)
1000c410:	50bff40e 	bge	r10,r2,1000c3e4 <__alt_data_end+0xf800c3e4>
1000c414:	1800111e 	bne	r3,zero,1000c45c <___vfiprintf_internal_r+0xe8c>
1000c418:	b5bffc04 	addi	r22,r22,-16
1000c41c:	000b883a 	mov	r5,zero
1000c420:	01000044 	movi	r4,1
1000c424:	d811883a 	mov	r8,sp
1000c428:	9dbff316 	blt	r19,r22,1000c3f8 <__alt_data_end+0xf800c3f8>
1000c42c:	d9412617 	ldw	r5,1176(sp)
1000c430:	1d87883a 	add	r3,r3,r22
1000c434:	45800115 	stw	r22,4(r8)
1000c438:	41400015 	stw	r5,0(r8)
1000c43c:	d8c11c15 	stw	r3,1136(sp)
1000c440:	d9011b15 	stw	r4,1132(sp)
1000c444:	008001c4 	movi	r2,7
1000c448:	11008516 	blt	r2,r4,1000c660 <___vfiprintf_internal_r+0x1090>
1000c44c:	42000204 	addi	r8,r8,8
1000c450:	20800044 	addi	r2,r4,1
1000c454:	200b883a 	mov	r5,r4
1000c458:	003dfa06 	br	1000bc44 <__alt_data_end+0xf800bc44>
1000c45c:	d9012117 	ldw	r4,1156(sp)
1000c460:	d9412017 	ldw	r5,1152(sp)
1000c464:	d9811a04 	addi	r6,sp,1128
1000c468:	da812a15 	stw	r10,1192(sp)
1000c46c:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c470:	da812a17 	ldw	r10,1192(sp)
1000c474:	103f721e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c478:	d9411b17 	ldw	r5,1132(sp)
1000c47c:	d8c11c17 	ldw	r3,1136(sp)
1000c480:	d811883a 	mov	r8,sp
1000c484:	29000044 	addi	r4,r5,1
1000c488:	003fd906 	br	1000c3f0 <__alt_data_end+0xf800c3f0>
1000c48c:	1800681e 	bne	r3,zero,1000c630 <___vfiprintf_internal_r+0x1060>
1000c490:	50004d26 	beq	r10,zero,1000c5c8 <___vfiprintf_internal_r+0xff8>
1000c494:	d8811d04 	addi	r2,sp,1140
1000c498:	00c00084 	movi	r3,2
1000c49c:	d8800015 	stw	r2,0(sp)
1000c4a0:	d8c00115 	stw	r3,4(sp)
1000c4a4:	2005883a 	mov	r2,r4
1000c4a8:	d811883a 	mov	r8,sp
1000c4ac:	003de006 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000c4b0:	1800551e 	bne	r3,zero,1000c608 <___vfiprintf_internal_r+0x1038>
1000c4b4:	000b883a 	mov	r5,zero
1000c4b8:	00800044 	movi	r2,1
1000c4bc:	d811883a 	mov	r8,sp
1000c4c0:	003dde06 	br	1000bc3c <__alt_data_end+0xf800bc3c>
1000c4c4:	10803fcc 	andi	r2,r2,255
1000c4c8:	1000191e 	bne	r2,zero,1000c530 <___vfiprintf_internal_r+0xf60>
1000c4cc:	9080004c 	andi	r2,r18,1
1000c4d0:	10001726 	beq	r2,zero,1000c530 <___vfiprintf_internal_r+0xf60>
1000c4d4:	00800c04 	movi	r2,48
1000c4d8:	d8c109c4 	addi	r3,sp,1063
1000c4dc:	d88109c5 	stb	r2,1063(sp)
1000c4e0:	dd012817 	ldw	r20,1184(sp)
1000c4e4:	d8c12215 	stw	r3,1160(sp)
1000c4e8:	003d8a06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c4ec:	d9012717 	ldw	r4,1180(sp)
1000c4f0:	dd010a04 	addi	r20,sp,1064
1000c4f4:	988003cc 	andi	r2,r19,15
1000c4f8:	a806973a 	slli	r3,r21,28
1000c4fc:	2085883a 	add	r2,r4,r2
1000c500:	9826d13a 	srli	r19,r19,4
1000c504:	10800003 	ldbu	r2,0(r2)
1000c508:	a82ad13a 	srli	r21,r21,4
1000c50c:	a53fffc4 	addi	r20,r20,-1
1000c510:	1ce6b03a 	or	r19,r3,r19
1000c514:	a0800005 	stb	r2,0(r20)
1000c518:	9d44b03a 	or	r2,r19,r21
1000c51c:	103ff51e 	bne	r2,zero,1000c4f4 <__alt_data_end+0xf800c4f4>
1000c520:	d9411e17 	ldw	r5,1144(sp)
1000c524:	dd012215 	stw	r20,1160(sp)
1000c528:	2d29c83a 	sub	r20,r5,r20
1000c52c:	003d7906 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c530:	d8c10a04 	addi	r3,sp,1064
1000c534:	d8c12215 	stw	r3,1160(sp)
1000c538:	003d7606 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c53c:	18009e1e 	bne	r3,zero,1000c7b8 <___vfiprintf_internal_r+0x11e8>
1000c540:	d8811d87 	ldb	r2,1142(sp)
1000c544:	10005f26 	beq	r2,zero,1000c6c4 <___vfiprintf_internal_r+0x10f4>
1000c548:	00c00044 	movi	r3,1
1000c54c:	d9011d84 	addi	r4,sp,1142
1000c550:	1805883a 	mov	r2,r3
1000c554:	d9000015 	stw	r4,0(sp)
1000c558:	d8c00115 	stw	r3,4(sp)
1000c55c:	d811883a 	mov	r8,sp
1000c560:	003efc06 	br	1000c154 <__alt_data_end+0xf800c154>
1000c564:	d9412417 	ldw	r5,1168(sp)
1000c568:	d811883a 	mov	r8,sp
1000c56c:	2d65c83a 	sub	r18,r5,r21
1000c570:	04bf4816 	blt	zero,r18,1000c294 <__alt_data_end+0xf800c294>
1000c574:	003f6c06 	br	1000c328 <__alt_data_end+0xf800c328>
1000c578:	b829883a 	mov	r20,r23
1000c57c:	003c6906 	br	1000b724 <__alt_data_end+0xf800b724>
1000c580:	d9012117 	ldw	r4,1156(sp)
1000c584:	d9412017 	ldw	r5,1152(sp)
1000c588:	d9811a04 	addi	r6,sp,1128
1000c58c:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c590:	103f2b1e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c594:	d8c11c17 	ldw	r3,1136(sp)
1000c598:	d811883a 	mov	r8,sp
1000c59c:	003f3806 	br	1000c280 <__alt_data_end+0xf800c280>
1000c5a0:	00800084 	movi	r2,2
1000c5a4:	9d46b03a 	or	r3,r19,r21
1000c5a8:	003df606 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c5ac:	d9012117 	ldw	r4,1156(sp)
1000c5b0:	d9412017 	ldw	r5,1152(sp)
1000c5b4:	d9811a04 	addi	r6,sp,1128
1000c5b8:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c5bc:	103f201e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c5c0:	d811883a 	mov	r8,sp
1000c5c4:	003cc606 	br	1000b8e0 <__alt_data_end+0xf800b8e0>
1000c5c8:	000b883a 	mov	r5,zero
1000c5cc:	2005883a 	mov	r2,r4
1000c5d0:	d811883a 	mov	r8,sp
1000c5d4:	003d9906 	br	1000bc3c <__alt_data_end+0xf800bc3c>
1000c5d8:	10803fcc 	andi	r2,r2,255
1000c5dc:	1080201c 	xori	r2,r2,128
1000c5e0:	10bfe004 	addi	r2,r2,-128
1000c5e4:	01000c04 	movi	r4,48
1000c5e8:	1100b226 	beq	r2,r4,1000c8b4 <___vfiprintf_internal_r+0x12e4>
1000c5ec:	d9412217 	ldw	r5,1160(sp)
1000c5f0:	d8811e17 	ldw	r2,1144(sp)
1000c5f4:	193fffc5 	stb	r4,-1(r3)
1000c5f8:	297fffc4 	addi	r5,r5,-1
1000c5fc:	d9412215 	stw	r5,1160(sp)
1000c600:	1169c83a 	sub	r20,r2,r5
1000c604:	003d4306 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c608:	d9012117 	ldw	r4,1156(sp)
1000c60c:	d9412017 	ldw	r5,1152(sp)
1000c610:	d9811a04 	addi	r6,sp,1128
1000c614:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c618:	103f091e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c61c:	d9411b17 	ldw	r5,1132(sp)
1000c620:	d8c11c17 	ldw	r3,1136(sp)
1000c624:	d811883a 	mov	r8,sp
1000c628:	28800044 	addi	r2,r5,1
1000c62c:	003d8306 	br	1000bc3c <__alt_data_end+0xf800bc3c>
1000c630:	d9012117 	ldw	r4,1156(sp)
1000c634:	d9412017 	ldw	r5,1152(sp)
1000c638:	d9811a04 	addi	r6,sp,1128
1000c63c:	da812a15 	stw	r10,1192(sp)
1000c640:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c644:	da812a17 	ldw	r10,1192(sp)
1000c648:	103efd1e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c64c:	d9411b17 	ldw	r5,1132(sp)
1000c650:	d8c11c17 	ldw	r3,1136(sp)
1000c654:	d811883a 	mov	r8,sp
1000c658:	28800044 	addi	r2,r5,1
1000c65c:	003d6a06 	br	1000bc08 <__alt_data_end+0xf800bc08>
1000c660:	1800a01e 	bne	r3,zero,1000c8e4 <___vfiprintf_internal_r+0x1314>
1000c664:	000b883a 	mov	r5,zero
1000c668:	00800044 	movi	r2,1
1000c66c:	d811883a 	mov	r8,sp
1000c670:	003d7406 	br	1000bc44 <__alt_data_end+0xf800bc44>
1000c674:	d9012117 	ldw	r4,1156(sp)
1000c678:	d9412017 	ldw	r5,1152(sp)
1000c67c:	d9811a04 	addi	r6,sp,1128
1000c680:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c684:	103eee1e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c688:	d8811b17 	ldw	r2,1132(sp)
1000c68c:	d8c11c17 	ldw	r3,1136(sp)
1000c690:	d811883a 	mov	r8,sp
1000c694:	10800044 	addi	r2,r2,1
1000c698:	003d8f06 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c69c:	04e7c83a 	sub	r19,zero,r19
1000c6a0:	9804c03a 	cmpne	r2,r19,zero
1000c6a4:	056bc83a 	sub	r21,zero,r21
1000c6a8:	a8abc83a 	sub	r21,r21,r2
1000c6ac:	05800b44 	movi	r22,45
1000c6b0:	dd811d85 	stb	r22,1142(sp)
1000c6b4:	8029883a 	mov	r20,r16
1000c6b8:	00800044 	movi	r2,1
1000c6bc:	9d46b03a 	or	r3,r19,r21
1000c6c0:	003cfa06 	br	1000baac <__alt_data_end+0xf800baac>
1000c6c4:	000b883a 	mov	r5,zero
1000c6c8:	00800044 	movi	r2,1
1000c6cc:	d811883a 	mov	r8,sp
1000c6d0:	503d5a26 	beq	r10,zero,1000bc3c <__alt_data_end+0xf800bc3c>
1000c6d4:	00c00084 	movi	r3,2
1000c6d8:	d9011d04 	addi	r4,sp,1140
1000c6dc:	d9000015 	stw	r4,0(sp)
1000c6e0:	d8c00115 	stw	r3,4(sp)
1000c6e4:	003d5206 	br	1000bc30 <__alt_data_end+0xf800bc30>
1000c6e8:	9080040c 	andi	r2,r18,16
1000c6ec:	1000421e 	bne	r2,zero,1000c7f8 <___vfiprintf_internal_r+0x1228>
1000c6f0:	9480100c 	andi	r18,r18,64
1000c6f4:	90009c26 	beq	r18,zero,1000c968 <___vfiprintf_internal_r+0x1398>
1000c6f8:	d9412317 	ldw	r5,1164(sp)
1000c6fc:	d8c12517 	ldw	r3,1172(sp)
1000c700:	28800017 	ldw	r2,0(r5)
1000c704:	29400104 	addi	r5,r5,4
1000c708:	d9412315 	stw	r5,1164(sp)
1000c70c:	10c0000d 	sth	r3,0(r2)
1000c710:	003be706 	br	1000b6b0 <__alt_data_end+0xf800b6b0>
1000c714:	90c0100c 	andi	r3,r18,64
1000c718:	18003e26 	beq	r3,zero,1000c814 <___vfiprintf_internal_r+0x1244>
1000c71c:	d8c12317 	ldw	r3,1164(sp)
1000c720:	14c0000b 	ldhu	r19,0(r2)
1000c724:	002b883a 	mov	r21,zero
1000c728:	18c00104 	addi	r3,r3,4
1000c72c:	d8c12315 	stw	r3,1164(sp)
1000c730:	003db706 	br	1000be10 <__alt_data_end+0xf800be10>
1000c734:	9080100c 	andi	r2,r18,64
1000c738:	10004c26 	beq	r2,zero,1000c86c <___vfiprintf_internal_r+0x129c>
1000c73c:	1cc0000f 	ldh	r19,0(r3)
1000c740:	d8812317 	ldw	r2,1164(sp)
1000c744:	982bd7fa 	srai	r21,r19,31
1000c748:	10800104 	addi	r2,r2,4
1000c74c:	d8812315 	stw	r2,1164(sp)
1000c750:	a805883a 	mov	r2,r21
1000c754:	003cd006 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000c758:	00800084 	movi	r2,2
1000c75c:	003d8906 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c760:	b9800007 	ldb	r6,0(r23)
1000c764:	003bfb06 	br	1000b754 <__alt_data_end+0xf800b754>
1000c768:	9080100c 	andi	r2,r18,64
1000c76c:	10003726 	beq	r2,zero,1000c84c <___vfiprintf_internal_r+0x127c>
1000c770:	d9412317 	ldw	r5,1164(sp)
1000c774:	002b883a 	mov	r21,zero
1000c778:	0005883a 	mov	r2,zero
1000c77c:	2cc0000b 	ldhu	r19,0(r5)
1000c780:	29400104 	addi	r5,r5,4
1000c784:	d9412315 	stw	r5,1164(sp)
1000c788:	9807883a 	mov	r3,r19
1000c78c:	003d7d06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c790:	9080100c 	andi	r2,r18,64
1000c794:	10002526 	beq	r2,zero,1000c82c <___vfiprintf_internal_r+0x125c>
1000c798:	d8812317 	ldw	r2,1164(sp)
1000c79c:	002b883a 	mov	r21,zero
1000c7a0:	14c0000b 	ldhu	r19,0(r2)
1000c7a4:	10800104 	addi	r2,r2,4
1000c7a8:	d8812315 	stw	r2,1164(sp)
1000c7ac:	9807883a 	mov	r3,r19
1000c7b0:	00800044 	movi	r2,1
1000c7b4:	003d7306 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c7b8:	d9012117 	ldw	r4,1156(sp)
1000c7bc:	d9412017 	ldw	r5,1152(sp)
1000c7c0:	d9811a04 	addi	r6,sp,1128
1000c7c4:	da812a15 	stw	r10,1192(sp)
1000c7c8:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c7cc:	da812a17 	ldw	r10,1192(sp)
1000c7d0:	103e9b1e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c7d4:	d9411b17 	ldw	r5,1132(sp)
1000c7d8:	d8c11c17 	ldw	r3,1136(sp)
1000c7dc:	d811883a 	mov	r8,sp
1000c7e0:	28800044 	addi	r2,r5,1
1000c7e4:	003e5006 	br	1000c128 <__alt_data_end+0xf800c128>
1000c7e8:	182b883a 	mov	r21,r3
1000c7ec:	003ed006 	br	1000c330 <__alt_data_end+0xf800c330>
1000c7f0:	8029883a 	mov	r20,r16
1000c7f4:	003dc606 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000c7f8:	d8c12317 	ldw	r3,1164(sp)
1000c7fc:	d9012517 	ldw	r4,1172(sp)
1000c800:	18800017 	ldw	r2,0(r3)
1000c804:	18c00104 	addi	r3,r3,4
1000c808:	d8c12315 	stw	r3,1164(sp)
1000c80c:	11000015 	stw	r4,0(r2)
1000c810:	003ba706 	br	1000b6b0 <__alt_data_end+0xf800b6b0>
1000c814:	d9012317 	ldw	r4,1164(sp)
1000c818:	14c00017 	ldw	r19,0(r2)
1000c81c:	002b883a 	mov	r21,zero
1000c820:	21000104 	addi	r4,r4,4
1000c824:	d9012315 	stw	r4,1164(sp)
1000c828:	003d7906 	br	1000be10 <__alt_data_end+0xf800be10>
1000c82c:	d8c12317 	ldw	r3,1164(sp)
1000c830:	002b883a 	mov	r21,zero
1000c834:	00800044 	movi	r2,1
1000c838:	1cc00017 	ldw	r19,0(r3)
1000c83c:	18c00104 	addi	r3,r3,4
1000c840:	d8c12315 	stw	r3,1164(sp)
1000c844:	9807883a 	mov	r3,r19
1000c848:	003d4e06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c84c:	d8812317 	ldw	r2,1164(sp)
1000c850:	002b883a 	mov	r21,zero
1000c854:	14c00017 	ldw	r19,0(r2)
1000c858:	10800104 	addi	r2,r2,4
1000c85c:	d8812315 	stw	r2,1164(sp)
1000c860:	9807883a 	mov	r3,r19
1000c864:	0005883a 	mov	r2,zero
1000c868:	003d4606 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000c86c:	1cc00017 	ldw	r19,0(r3)
1000c870:	d8c12317 	ldw	r3,1164(sp)
1000c874:	982bd7fa 	srai	r21,r19,31
1000c878:	18c00104 	addi	r3,r3,4
1000c87c:	d8c12315 	stw	r3,1164(sp)
1000c880:	a805883a 	mov	r2,r21
1000c884:	003c8406 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000c888:	01040074 	movhi	r4,4097
1000c88c:	21051004 	addi	r4,r4,5184
1000c890:	d9012615 	stw	r4,1176(sp)
1000c894:	003d0606 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000c898:	b9800043 	ldbu	r6,1(r23)
1000c89c:	94800814 	ori	r18,r18,32
1000c8a0:	bdc00044 	addi	r23,r23,1
1000c8a4:	31803fcc 	andi	r6,r6,255
1000c8a8:	3180201c 	xori	r6,r6,128
1000c8ac:	31bfe004 	addi	r6,r6,-128
1000c8b0:	003ba806 	br	1000b754 <__alt_data_end+0xf800b754>
1000c8b4:	d8811e17 	ldw	r2,1144(sp)
1000c8b8:	d8c12217 	ldw	r3,1160(sp)
1000c8bc:	10e9c83a 	sub	r20,r2,r3
1000c8c0:	003c9406 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c8c4:	da012a15 	stw	r8,1192(sp)
1000c8c8:	00040e00 	call	100040e0 <strlen>
1000c8cc:	1029883a 	mov	r20,r2
1000c8d0:	dd811d83 	ldbu	r22,1142(sp)
1000c8d4:	dcc12315 	stw	r19,1164(sp)
1000c8d8:	0021883a 	mov	r16,zero
1000c8dc:	da012a17 	ldw	r8,1192(sp)
1000c8e0:	003c8c06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c8e4:	d9012117 	ldw	r4,1156(sp)
1000c8e8:	d9412017 	ldw	r5,1152(sp)
1000c8ec:	d9811a04 	addi	r6,sp,1128
1000c8f0:	000b4bc0 	call	1000b4bc <__sprint_r.part.0>
1000c8f4:	103e521e 	bne	r2,zero,1000c240 <__alt_data_end+0xf800c240>
1000c8f8:	d9411b17 	ldw	r5,1132(sp)
1000c8fc:	d8c11c17 	ldw	r3,1136(sp)
1000c900:	d811883a 	mov	r8,sp
1000c904:	28800044 	addi	r2,r5,1
1000c908:	003cce06 	br	1000bc44 <__alt_data_end+0xf800bc44>
1000c90c:	01440074 	movhi	r5,4097
1000c910:	29451404 	addi	r5,r5,5200
1000c914:	d9412615 	stw	r5,1176(sp)
1000c918:	d9411b17 	ldw	r5,1132(sp)
1000c91c:	29400044 	addi	r5,r5,1
1000c920:	003cad06 	br	1000bbd8 <__alt_data_end+0xf800bbd8>
1000c924:	00800184 	movi	r2,6
1000c928:	1400012e 	bgeu	r2,r16,1000c930 <___vfiprintf_internal_r+0x1360>
1000c92c:	1021883a 	mov	r16,r2
1000c930:	8029883a 	mov	r20,r16
1000c934:	802b883a 	mov	r21,r16
1000c938:	80001c16 	blt	r16,zero,1000c9ac <___vfiprintf_internal_r+0x13dc>
1000c93c:	00c40074 	movhi	r3,4097
1000c940:	18c4b404 	addi	r3,r3,4816
1000c944:	dcc12315 	stw	r19,1164(sp)
1000c948:	d8c12215 	stw	r3,1160(sp)
1000c94c:	003cff06 	br	1000bd4c <__alt_data_end+0xf800bd4c>
1000c950:	d9411b17 	ldw	r5,1132(sp)
1000c954:	00840074 	movhi	r2,4097
1000c958:	10851404 	addi	r2,r2,5200
1000c95c:	d8812615 	stw	r2,1176(sp)
1000c960:	29400044 	addi	r5,r5,1
1000c964:	003e6706 	br	1000c304 <__alt_data_end+0xf800c304>
1000c968:	d9012317 	ldw	r4,1164(sp)
1000c96c:	d9412517 	ldw	r5,1172(sp)
1000c970:	20800017 	ldw	r2,0(r4)
1000c974:	21000104 	addi	r4,r4,4
1000c978:	d9012315 	stw	r4,1164(sp)
1000c97c:	11400015 	stw	r5,0(r2)
1000c980:	003b4b06 	br	1000b6b0 <__alt_data_end+0xf800b6b0>
1000c984:	8029883a 	mov	r20,r16
1000c988:	dd811d83 	ldbu	r22,1142(sp)
1000c98c:	dcc12315 	stw	r19,1164(sp)
1000c990:	0021883a 	mov	r16,zero
1000c994:	003c5f06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000c998:	01040074 	movhi	r4,4097
1000c99c:	21051004 	addi	r4,r4,5184
1000c9a0:	d9012615 	stw	r4,1176(sp)
1000c9a4:	1009883a 	mov	r4,r2
1000c9a8:	003ea006 	br	1000c42c <__alt_data_end+0xf800c42c>
1000c9ac:	002b883a 	mov	r21,zero
1000c9b0:	003fe206 	br	1000c93c <__alt_data_end+0xf800c93c>
1000c9b4:	d9412317 	ldw	r5,1164(sp)
1000c9b8:	b807883a 	mov	r3,r23
1000c9bc:	102f883a 	mov	r23,r2
1000c9c0:	2c000017 	ldw	r16,0(r5)
1000c9c4:	29000104 	addi	r4,r5,4
1000c9c8:	d9012315 	stw	r4,1164(sp)
1000c9cc:	80000416 	blt	r16,zero,1000c9e0 <___vfiprintf_internal_r+0x1410>
1000c9d0:	19800047 	ldb	r6,1(r3)
1000c9d4:	003b5f06 	br	1000b754 <__alt_data_end+0xf800b754>
1000c9d8:	043fffc4 	movi	r16,-1
1000c9dc:	003bef06 	br	1000b99c <__alt_data_end+0xf800b99c>
1000c9e0:	043fffc4 	movi	r16,-1
1000c9e4:	19800047 	ldb	r6,1(r3)
1000c9e8:	003b5a06 	br	1000b754 <__alt_data_end+0xf800b754>
1000c9ec:	282b883a 	mov	r21,r5
1000c9f0:	003cc706 	br	1000bd10 <__alt_data_end+0xf800bd10>

1000c9f4 <__vfiprintf_internal>:
1000c9f4:	2007883a 	mov	r3,r4
1000c9f8:	01040074 	movhi	r4,4097
1000c9fc:	210bd104 	addi	r4,r4,12100
1000ca00:	21000017 	ldw	r4,0(r4)
1000ca04:	2805883a 	mov	r2,r5
1000ca08:	300f883a 	mov	r7,r6
1000ca0c:	180b883a 	mov	r5,r3
1000ca10:	100d883a 	mov	r6,r2
1000ca14:	000b5d01 	jmpi	1000b5d0 <___vfiprintf_internal_r>

1000ca18 <_write_r>:
1000ca18:	defffd04 	addi	sp,sp,-12
1000ca1c:	dc000015 	stw	r16,0(sp)
1000ca20:	04040074 	movhi	r16,4097
1000ca24:	dc400115 	stw	r17,4(sp)
1000ca28:	8412b004 	addi	r16,r16,19136
1000ca2c:	2023883a 	mov	r17,r4
1000ca30:	2809883a 	mov	r4,r5
1000ca34:	300b883a 	mov	r5,r6
1000ca38:	380d883a 	mov	r6,r7
1000ca3c:	dfc00215 	stw	ra,8(sp)
1000ca40:	80000015 	stw	zero,0(r16)
1000ca44:	000f2380 	call	1000f238 <write>
1000ca48:	00ffffc4 	movi	r3,-1
1000ca4c:	10c00526 	beq	r2,r3,1000ca64 <_write_r+0x4c>
1000ca50:	dfc00217 	ldw	ra,8(sp)
1000ca54:	dc400117 	ldw	r17,4(sp)
1000ca58:	dc000017 	ldw	r16,0(sp)
1000ca5c:	dec00304 	addi	sp,sp,12
1000ca60:	f800283a 	ret
1000ca64:	80c00017 	ldw	r3,0(r16)
1000ca68:	183ff926 	beq	r3,zero,1000ca50 <__alt_data_end+0xf800ca50>
1000ca6c:	88c00015 	stw	r3,0(r17)
1000ca70:	003ff706 	br	1000ca50 <__alt_data_end+0xf800ca50>

1000ca74 <_close_r>:
1000ca74:	defffd04 	addi	sp,sp,-12
1000ca78:	dc000015 	stw	r16,0(sp)
1000ca7c:	04040074 	movhi	r16,4097
1000ca80:	dc400115 	stw	r17,4(sp)
1000ca84:	8412b004 	addi	r16,r16,19136
1000ca88:	2023883a 	mov	r17,r4
1000ca8c:	2809883a 	mov	r4,r5
1000ca90:	dfc00215 	stw	ra,8(sp)
1000ca94:	80000015 	stw	zero,0(r16)
1000ca98:	000e9940 	call	1000e994 <close>
1000ca9c:	00ffffc4 	movi	r3,-1
1000caa0:	10c00526 	beq	r2,r3,1000cab8 <_close_r+0x44>
1000caa4:	dfc00217 	ldw	ra,8(sp)
1000caa8:	dc400117 	ldw	r17,4(sp)
1000caac:	dc000017 	ldw	r16,0(sp)
1000cab0:	dec00304 	addi	sp,sp,12
1000cab4:	f800283a 	ret
1000cab8:	80c00017 	ldw	r3,0(r16)
1000cabc:	183ff926 	beq	r3,zero,1000caa4 <__alt_data_end+0xf800caa4>
1000cac0:	88c00015 	stw	r3,0(r17)
1000cac4:	003ff706 	br	1000caa4 <__alt_data_end+0xf800caa4>

1000cac8 <_calloc_r>:
1000cac8:	defffe04 	addi	sp,sp,-8
1000cacc:	dc000015 	stw	r16,0(sp)
1000cad0:	2021883a 	mov	r16,r4
1000cad4:	2809883a 	mov	r4,r5
1000cad8:	300b883a 	mov	r5,r6
1000cadc:	dfc00115 	stw	ra,4(sp)
1000cae0:	0002be00 	call	10002be0 <__mulsi3>
1000cae4:	8009883a 	mov	r4,r16
1000cae8:	100b883a 	mov	r5,r2
1000caec:	0008fe40 	call	10008fe4 <_malloc_r>
1000caf0:	1021883a 	mov	r16,r2
1000caf4:	10002826 	beq	r2,zero,1000cb98 <_calloc_r+0xd0>
1000caf8:	11bfff17 	ldw	r6,-4(r2)
1000cafc:	00bfff04 	movi	r2,-4
1000cb00:	00c00904 	movi	r3,36
1000cb04:	308c703a 	and	r6,r6,r2
1000cb08:	308d883a 	add	r6,r6,r2
1000cb0c:	19801436 	bltu	r3,r6,1000cb60 <_calloc_r+0x98>
1000cb10:	008004c4 	movi	r2,19
1000cb14:	11800936 	bltu	r2,r6,1000cb3c <_calloc_r+0x74>
1000cb18:	8005883a 	mov	r2,r16
1000cb1c:	10000015 	stw	zero,0(r2)
1000cb20:	10000115 	stw	zero,4(r2)
1000cb24:	10000215 	stw	zero,8(r2)
1000cb28:	8005883a 	mov	r2,r16
1000cb2c:	dfc00117 	ldw	ra,4(sp)
1000cb30:	dc000017 	ldw	r16,0(sp)
1000cb34:	dec00204 	addi	sp,sp,8
1000cb38:	f800283a 	ret
1000cb3c:	80000015 	stw	zero,0(r16)
1000cb40:	80000115 	stw	zero,4(r16)
1000cb44:	008006c4 	movi	r2,27
1000cb48:	11800d2e 	bgeu	r2,r6,1000cb80 <_calloc_r+0xb8>
1000cb4c:	80000215 	stw	zero,8(r16)
1000cb50:	80000315 	stw	zero,12(r16)
1000cb54:	30c00c26 	beq	r6,r3,1000cb88 <_calloc_r+0xc0>
1000cb58:	80800404 	addi	r2,r16,16
1000cb5c:	003fef06 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000cb60:	8009883a 	mov	r4,r16
1000cb64:	000b883a 	mov	r5,zero
1000cb68:	0009b080 	call	10009b08 <memset>
1000cb6c:	8005883a 	mov	r2,r16
1000cb70:	dfc00117 	ldw	ra,4(sp)
1000cb74:	dc000017 	ldw	r16,0(sp)
1000cb78:	dec00204 	addi	sp,sp,8
1000cb7c:	f800283a 	ret
1000cb80:	80800204 	addi	r2,r16,8
1000cb84:	003fe506 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000cb88:	80000415 	stw	zero,16(r16)
1000cb8c:	80800604 	addi	r2,r16,24
1000cb90:	80000515 	stw	zero,20(r16)
1000cb94:	003fe106 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000cb98:	0005883a 	mov	r2,zero
1000cb9c:	003fe306 	br	1000cb2c <__alt_data_end+0xf800cb2c>

1000cba0 <_fclose_r>:
1000cba0:	28003226 	beq	r5,zero,1000cc6c <_fclose_r+0xcc>
1000cba4:	defffc04 	addi	sp,sp,-16
1000cba8:	dc400115 	stw	r17,4(sp)
1000cbac:	2023883a 	mov	r17,r4
1000cbb0:	dc000015 	stw	r16,0(sp)
1000cbb4:	dfc00315 	stw	ra,12(sp)
1000cbb8:	dc800215 	stw	r18,8(sp)
1000cbbc:	2821883a 	mov	r16,r5
1000cbc0:	00082e40 	call	100082e4 <__sfp_lock_acquire>
1000cbc4:	88000226 	beq	r17,zero,1000cbd0 <_fclose_r+0x30>
1000cbc8:	88800e17 	ldw	r2,56(r17)
1000cbcc:	10002926 	beq	r2,zero,1000cc74 <_fclose_r+0xd4>
1000cbd0:	8080030f 	ldh	r2,12(r16)
1000cbd4:	10002226 	beq	r2,zero,1000cc60 <_fclose_r+0xc0>
1000cbd8:	8809883a 	mov	r4,r17
1000cbdc:	800b883a 	mov	r5,r16
1000cbe0:	0007d180 	call	10007d18 <_fflush_r>
1000cbe4:	1025883a 	mov	r18,r2
1000cbe8:	80800b17 	ldw	r2,44(r16)
1000cbec:	10000426 	beq	r2,zero,1000cc00 <_fclose_r+0x60>
1000cbf0:	81400717 	ldw	r5,28(r16)
1000cbf4:	8809883a 	mov	r4,r17
1000cbf8:	103ee83a 	callr	r2
1000cbfc:	10002616 	blt	r2,zero,1000cc98 <_fclose_r+0xf8>
1000cc00:	8080030b 	ldhu	r2,12(r16)
1000cc04:	1080200c 	andi	r2,r2,128
1000cc08:	10001f1e 	bne	r2,zero,1000cc88 <_fclose_r+0xe8>
1000cc0c:	81400c17 	ldw	r5,48(r16)
1000cc10:	28000526 	beq	r5,zero,1000cc28 <_fclose_r+0x88>
1000cc14:	80801004 	addi	r2,r16,64
1000cc18:	28800226 	beq	r5,r2,1000cc24 <_fclose_r+0x84>
1000cc1c:	8809883a 	mov	r4,r17
1000cc20:	00084480 	call	10008448 <_free_r>
1000cc24:	80000c15 	stw	zero,48(r16)
1000cc28:	81401117 	ldw	r5,68(r16)
1000cc2c:	28000326 	beq	r5,zero,1000cc3c <_fclose_r+0x9c>
1000cc30:	8809883a 	mov	r4,r17
1000cc34:	00084480 	call	10008448 <_free_r>
1000cc38:	80001115 	stw	zero,68(r16)
1000cc3c:	8000030d 	sth	zero,12(r16)
1000cc40:	00082e80 	call	100082e8 <__sfp_lock_release>
1000cc44:	9005883a 	mov	r2,r18
1000cc48:	dfc00317 	ldw	ra,12(sp)
1000cc4c:	dc800217 	ldw	r18,8(sp)
1000cc50:	dc400117 	ldw	r17,4(sp)
1000cc54:	dc000017 	ldw	r16,0(sp)
1000cc58:	dec00404 	addi	sp,sp,16
1000cc5c:	f800283a 	ret
1000cc60:	00082e80 	call	100082e8 <__sfp_lock_release>
1000cc64:	0005883a 	mov	r2,zero
1000cc68:	003ff706 	br	1000cc48 <__alt_data_end+0xf800cc48>
1000cc6c:	0005883a 	mov	r2,zero
1000cc70:	f800283a 	ret
1000cc74:	8809883a 	mov	r4,r17
1000cc78:	00082d40 	call	100082d4 <__sinit>
1000cc7c:	8080030f 	ldh	r2,12(r16)
1000cc80:	103fd51e 	bne	r2,zero,1000cbd8 <__alt_data_end+0xf800cbd8>
1000cc84:	003ff606 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000cc88:	81400417 	ldw	r5,16(r16)
1000cc8c:	8809883a 	mov	r4,r17
1000cc90:	00084480 	call	10008448 <_free_r>
1000cc94:	003fdd06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cc98:	04bfffc4 	movi	r18,-1
1000cc9c:	003fd806 	br	1000cc00 <__alt_data_end+0xf800cc00>

1000cca0 <fclose>:
1000cca0:	00840074 	movhi	r2,4097
1000cca4:	108bd104 	addi	r2,r2,12100
1000cca8:	200b883a 	mov	r5,r4
1000ccac:	11000017 	ldw	r4,0(r2)
1000ccb0:	000cba01 	jmpi	1000cba0 <_fclose_r>

1000ccb4 <_fputwc_r>:
1000ccb4:	3080030b 	ldhu	r2,12(r6)
1000ccb8:	defff804 	addi	sp,sp,-32
1000ccbc:	dcc00415 	stw	r19,16(sp)
1000ccc0:	dc800315 	stw	r18,12(sp)
1000ccc4:	dc000115 	stw	r16,4(sp)
1000ccc8:	dfc00715 	stw	ra,28(sp)
1000cccc:	dd400615 	stw	r21,24(sp)
1000ccd0:	dd000515 	stw	r20,20(sp)
1000ccd4:	dc400215 	stw	r17,8(sp)
1000ccd8:	10c8000c 	andi	r3,r2,8192
1000ccdc:	3021883a 	mov	r16,r6
1000cce0:	2027883a 	mov	r19,r4
1000cce4:	2825883a 	mov	r18,r5
1000cce8:	1800051e 	bne	r3,zero,1000cd00 <_fputwc_r+0x4c>
1000ccec:	30c01917 	ldw	r3,100(r6)
1000ccf0:	10880014 	ori	r2,r2,8192
1000ccf4:	3080030d 	sth	r2,12(r6)
1000ccf8:	18880014 	ori	r2,r3,8192
1000ccfc:	30801915 	stw	r2,100(r6)
1000cd00:	0008dd40 	call	10008dd4 <__locale_mb_cur_max>
1000cd04:	00c00044 	movi	r3,1
1000cd08:	10c03e26 	beq	r2,r3,1000ce04 <_fputwc_r+0x150>
1000cd0c:	9809883a 	mov	r4,r19
1000cd10:	d80b883a 	mov	r5,sp
1000cd14:	900d883a 	mov	r6,r18
1000cd18:	81c01704 	addi	r7,r16,92
1000cd1c:	000d1640 	call	1000d164 <_wcrtomb_r>
1000cd20:	1029883a 	mov	r20,r2
1000cd24:	00bfffc4 	movi	r2,-1
1000cd28:	a0802026 	beq	r20,r2,1000cdac <_fputwc_r+0xf8>
1000cd2c:	d9400003 	ldbu	r5,0(sp)
1000cd30:	a0001c26 	beq	r20,zero,1000cda4 <_fputwc_r+0xf0>
1000cd34:	0023883a 	mov	r17,zero
1000cd38:	05400284 	movi	r21,10
1000cd3c:	00000906 	br	1000cd64 <_fputwc_r+0xb0>
1000cd40:	80800017 	ldw	r2,0(r16)
1000cd44:	11400005 	stb	r5,0(r2)
1000cd48:	80c00017 	ldw	r3,0(r16)
1000cd4c:	18c00044 	addi	r3,r3,1
1000cd50:	80c00015 	stw	r3,0(r16)
1000cd54:	8c400044 	addi	r17,r17,1
1000cd58:	dc45883a 	add	r2,sp,r17
1000cd5c:	8d00112e 	bgeu	r17,r20,1000cda4 <_fputwc_r+0xf0>
1000cd60:	11400003 	ldbu	r5,0(r2)
1000cd64:	80c00217 	ldw	r3,8(r16)
1000cd68:	18ffffc4 	addi	r3,r3,-1
1000cd6c:	80c00215 	stw	r3,8(r16)
1000cd70:	183ff30e 	bge	r3,zero,1000cd40 <__alt_data_end+0xf800cd40>
1000cd74:	80800617 	ldw	r2,24(r16)
1000cd78:	18801916 	blt	r3,r2,1000cde0 <_fputwc_r+0x12c>
1000cd7c:	80800017 	ldw	r2,0(r16)
1000cd80:	11400005 	stb	r5,0(r2)
1000cd84:	80800017 	ldw	r2,0(r16)
1000cd88:	10c00003 	ldbu	r3,0(r2)
1000cd8c:	10800044 	addi	r2,r2,1
1000cd90:	1d402326 	beq	r3,r21,1000ce20 <_fputwc_r+0x16c>
1000cd94:	80800015 	stw	r2,0(r16)
1000cd98:	8c400044 	addi	r17,r17,1
1000cd9c:	dc45883a 	add	r2,sp,r17
1000cda0:	8d3fef36 	bltu	r17,r20,1000cd60 <__alt_data_end+0xf800cd60>
1000cda4:	9005883a 	mov	r2,r18
1000cda8:	00000406 	br	1000cdbc <_fputwc_r+0x108>
1000cdac:	80c0030b 	ldhu	r3,12(r16)
1000cdb0:	a005883a 	mov	r2,r20
1000cdb4:	18c01014 	ori	r3,r3,64
1000cdb8:	80c0030d 	sth	r3,12(r16)
1000cdbc:	dfc00717 	ldw	ra,28(sp)
1000cdc0:	dd400617 	ldw	r21,24(sp)
1000cdc4:	dd000517 	ldw	r20,20(sp)
1000cdc8:	dcc00417 	ldw	r19,16(sp)
1000cdcc:	dc800317 	ldw	r18,12(sp)
1000cdd0:	dc400217 	ldw	r17,8(sp)
1000cdd4:	dc000117 	ldw	r16,4(sp)
1000cdd8:	dec00804 	addi	sp,sp,32
1000cddc:	f800283a 	ret
1000cde0:	9809883a 	mov	r4,r19
1000cde4:	29403fcc 	andi	r5,r5,255
1000cde8:	800d883a 	mov	r6,r16
1000cdec:	000cff40 	call	1000cff4 <__swbuf_r>
1000cdf0:	10bfffe0 	cmpeqi	r2,r2,-1
1000cdf4:	10803fcc 	andi	r2,r2,255
1000cdf8:	103fd626 	beq	r2,zero,1000cd54 <__alt_data_end+0xf800cd54>
1000cdfc:	00bfffc4 	movi	r2,-1
1000ce00:	003fee06 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000ce04:	90ffffc4 	addi	r3,r18,-1
1000ce08:	01003f84 	movi	r4,254
1000ce0c:	20ffbf36 	bltu	r4,r3,1000cd0c <__alt_data_end+0xf800cd0c>
1000ce10:	900b883a 	mov	r5,r18
1000ce14:	dc800005 	stb	r18,0(sp)
1000ce18:	1029883a 	mov	r20,r2
1000ce1c:	003fc506 	br	1000cd34 <__alt_data_end+0xf800cd34>
1000ce20:	9809883a 	mov	r4,r19
1000ce24:	a80b883a 	mov	r5,r21
1000ce28:	800d883a 	mov	r6,r16
1000ce2c:	000cff40 	call	1000cff4 <__swbuf_r>
1000ce30:	10bfffe0 	cmpeqi	r2,r2,-1
1000ce34:	003fef06 	br	1000cdf4 <__alt_data_end+0xf800cdf4>

1000ce38 <fputwc>:
1000ce38:	defffc04 	addi	sp,sp,-16
1000ce3c:	dc000115 	stw	r16,4(sp)
1000ce40:	04040074 	movhi	r16,4097
1000ce44:	840bd104 	addi	r16,r16,12100
1000ce48:	dc400215 	stw	r17,8(sp)
1000ce4c:	2023883a 	mov	r17,r4
1000ce50:	81000017 	ldw	r4,0(r16)
1000ce54:	dfc00315 	stw	ra,12(sp)
1000ce58:	280d883a 	mov	r6,r5
1000ce5c:	20000626 	beq	r4,zero,1000ce78 <fputwc+0x40>
1000ce60:	20800e17 	ldw	r2,56(r4)
1000ce64:	1000041e 	bne	r2,zero,1000ce78 <fputwc+0x40>
1000ce68:	d9400015 	stw	r5,0(sp)
1000ce6c:	00082d40 	call	100082d4 <__sinit>
1000ce70:	81000017 	ldw	r4,0(r16)
1000ce74:	d9800017 	ldw	r6,0(sp)
1000ce78:	880b883a 	mov	r5,r17
1000ce7c:	dfc00317 	ldw	ra,12(sp)
1000ce80:	dc400217 	ldw	r17,8(sp)
1000ce84:	dc000117 	ldw	r16,4(sp)
1000ce88:	dec00404 	addi	sp,sp,16
1000ce8c:	000ccb41 	jmpi	1000ccb4 <_fputwc_r>

1000ce90 <_fstat_r>:
1000ce90:	defffd04 	addi	sp,sp,-12
1000ce94:	dc000015 	stw	r16,0(sp)
1000ce98:	04040074 	movhi	r16,4097
1000ce9c:	dc400115 	stw	r17,4(sp)
1000cea0:	8412b004 	addi	r16,r16,19136
1000cea4:	2023883a 	mov	r17,r4
1000cea8:	2809883a 	mov	r4,r5
1000ceac:	300b883a 	mov	r5,r6
1000ceb0:	dfc00215 	stw	ra,8(sp)
1000ceb4:	80000015 	stw	zero,0(r16)
1000ceb8:	000eae80 	call	1000eae8 <fstat>
1000cebc:	00ffffc4 	movi	r3,-1
1000cec0:	10c00526 	beq	r2,r3,1000ced8 <_fstat_r+0x48>
1000cec4:	dfc00217 	ldw	ra,8(sp)
1000cec8:	dc400117 	ldw	r17,4(sp)
1000cecc:	dc000017 	ldw	r16,0(sp)
1000ced0:	dec00304 	addi	sp,sp,12
1000ced4:	f800283a 	ret
1000ced8:	80c00017 	ldw	r3,0(r16)
1000cedc:	183ff926 	beq	r3,zero,1000cec4 <__alt_data_end+0xf800cec4>
1000cee0:	88c00015 	stw	r3,0(r17)
1000cee4:	003ff706 	br	1000cec4 <__alt_data_end+0xf800cec4>

1000cee8 <_isatty_r>:
1000cee8:	defffd04 	addi	sp,sp,-12
1000ceec:	dc000015 	stw	r16,0(sp)
1000cef0:	04040074 	movhi	r16,4097
1000cef4:	dc400115 	stw	r17,4(sp)
1000cef8:	8412b004 	addi	r16,r16,19136
1000cefc:	2023883a 	mov	r17,r4
1000cf00:	2809883a 	mov	r4,r5
1000cf04:	dfc00215 	stw	ra,8(sp)
1000cf08:	80000015 	stw	zero,0(r16)
1000cf0c:	000ebf00 	call	1000ebf0 <isatty>
1000cf10:	00ffffc4 	movi	r3,-1
1000cf14:	10c00526 	beq	r2,r3,1000cf2c <_isatty_r+0x44>
1000cf18:	dfc00217 	ldw	ra,8(sp)
1000cf1c:	dc400117 	ldw	r17,4(sp)
1000cf20:	dc000017 	ldw	r16,0(sp)
1000cf24:	dec00304 	addi	sp,sp,12
1000cf28:	f800283a 	ret
1000cf2c:	80c00017 	ldw	r3,0(r16)
1000cf30:	183ff926 	beq	r3,zero,1000cf18 <__alt_data_end+0xf800cf18>
1000cf34:	88c00015 	stw	r3,0(r17)
1000cf38:	003ff706 	br	1000cf18 <__alt_data_end+0xf800cf18>

1000cf3c <_lseek_r>:
1000cf3c:	defffd04 	addi	sp,sp,-12
1000cf40:	dc000015 	stw	r16,0(sp)
1000cf44:	04040074 	movhi	r16,4097
1000cf48:	dc400115 	stw	r17,4(sp)
1000cf4c:	8412b004 	addi	r16,r16,19136
1000cf50:	2023883a 	mov	r17,r4
1000cf54:	2809883a 	mov	r4,r5
1000cf58:	300b883a 	mov	r5,r6
1000cf5c:	380d883a 	mov	r6,r7
1000cf60:	dfc00215 	stw	ra,8(sp)
1000cf64:	80000015 	stw	zero,0(r16)
1000cf68:	000edd00 	call	1000edd0 <lseek>
1000cf6c:	00ffffc4 	movi	r3,-1
1000cf70:	10c00526 	beq	r2,r3,1000cf88 <_lseek_r+0x4c>
1000cf74:	dfc00217 	ldw	ra,8(sp)
1000cf78:	dc400117 	ldw	r17,4(sp)
1000cf7c:	dc000017 	ldw	r16,0(sp)
1000cf80:	dec00304 	addi	sp,sp,12
1000cf84:	f800283a 	ret
1000cf88:	80c00017 	ldw	r3,0(r16)
1000cf8c:	183ff926 	beq	r3,zero,1000cf74 <__alt_data_end+0xf800cf74>
1000cf90:	88c00015 	stw	r3,0(r17)
1000cf94:	003ff706 	br	1000cf74 <__alt_data_end+0xf800cf74>

1000cf98 <_read_r>:
1000cf98:	defffd04 	addi	sp,sp,-12
1000cf9c:	dc000015 	stw	r16,0(sp)
1000cfa0:	04040074 	movhi	r16,4097
1000cfa4:	dc400115 	stw	r17,4(sp)
1000cfa8:	8412b004 	addi	r16,r16,19136
1000cfac:	2023883a 	mov	r17,r4
1000cfb0:	2809883a 	mov	r4,r5
1000cfb4:	300b883a 	mov	r5,r6
1000cfb8:	380d883a 	mov	r6,r7
1000cfbc:	dfc00215 	stw	ra,8(sp)
1000cfc0:	80000015 	stw	zero,0(r16)
1000cfc4:	000efb40 	call	1000efb4 <read>
1000cfc8:	00ffffc4 	movi	r3,-1
1000cfcc:	10c00526 	beq	r2,r3,1000cfe4 <_read_r+0x4c>
1000cfd0:	dfc00217 	ldw	ra,8(sp)
1000cfd4:	dc400117 	ldw	r17,4(sp)
1000cfd8:	dc000017 	ldw	r16,0(sp)
1000cfdc:	dec00304 	addi	sp,sp,12
1000cfe0:	f800283a 	ret
1000cfe4:	80c00017 	ldw	r3,0(r16)
1000cfe8:	183ff926 	beq	r3,zero,1000cfd0 <__alt_data_end+0xf800cfd0>
1000cfec:	88c00015 	stw	r3,0(r17)
1000cff0:	003ff706 	br	1000cfd0 <__alt_data_end+0xf800cfd0>

1000cff4 <__swbuf_r>:
1000cff4:	defffc04 	addi	sp,sp,-16
1000cff8:	dc800215 	stw	r18,8(sp)
1000cffc:	dc400115 	stw	r17,4(sp)
1000d000:	dc000015 	stw	r16,0(sp)
1000d004:	dfc00315 	stw	ra,12(sp)
1000d008:	2025883a 	mov	r18,r4
1000d00c:	2823883a 	mov	r17,r5
1000d010:	3021883a 	mov	r16,r6
1000d014:	20000226 	beq	r4,zero,1000d020 <__swbuf_r+0x2c>
1000d018:	20800e17 	ldw	r2,56(r4)
1000d01c:	10004126 	beq	r2,zero,1000d124 <__swbuf_r+0x130>
1000d020:	80c00617 	ldw	r3,24(r16)
1000d024:	8180030b 	ldhu	r6,12(r16)
1000d028:	80c00215 	stw	r3,8(r16)
1000d02c:	30c0020c 	andi	r3,r6,8
1000d030:	18003526 	beq	r3,zero,1000d108 <__swbuf_r+0x114>
1000d034:	80c00417 	ldw	r3,16(r16)
1000d038:	18003326 	beq	r3,zero,1000d108 <__swbuf_r+0x114>
1000d03c:	3088000c 	andi	r2,r6,8192
1000d040:	8c403fcc 	andi	r17,r17,255
1000d044:	10001726 	beq	r2,zero,1000d0a4 <__swbuf_r+0xb0>
1000d048:	80800017 	ldw	r2,0(r16)
1000d04c:	81000517 	ldw	r4,20(r16)
1000d050:	10c7c83a 	sub	r3,r2,r3
1000d054:	19001d0e 	bge	r3,r4,1000d0cc <__swbuf_r+0xd8>
1000d058:	18c00044 	addi	r3,r3,1
1000d05c:	81400217 	ldw	r5,8(r16)
1000d060:	11000044 	addi	r4,r2,1
1000d064:	81000015 	stw	r4,0(r16)
1000d068:	297fffc4 	addi	r5,r5,-1
1000d06c:	81400215 	stw	r5,8(r16)
1000d070:	14400005 	stb	r17,0(r2)
1000d074:	80800517 	ldw	r2,20(r16)
1000d078:	10c01d26 	beq	r2,r3,1000d0f0 <__swbuf_r+0xfc>
1000d07c:	8080030b 	ldhu	r2,12(r16)
1000d080:	1080004c 	andi	r2,r2,1
1000d084:	1000181e 	bne	r2,zero,1000d0e8 <__swbuf_r+0xf4>
1000d088:	8805883a 	mov	r2,r17
1000d08c:	dfc00317 	ldw	ra,12(sp)
1000d090:	dc800217 	ldw	r18,8(sp)
1000d094:	dc400117 	ldw	r17,4(sp)
1000d098:	dc000017 	ldw	r16,0(sp)
1000d09c:	dec00404 	addi	sp,sp,16
1000d0a0:	f800283a 	ret
1000d0a4:	81001917 	ldw	r4,100(r16)
1000d0a8:	00b7ffc4 	movi	r2,-8193
1000d0ac:	31880014 	ori	r6,r6,8192
1000d0b0:	2084703a 	and	r2,r4,r2
1000d0b4:	80801915 	stw	r2,100(r16)
1000d0b8:	80800017 	ldw	r2,0(r16)
1000d0bc:	81000517 	ldw	r4,20(r16)
1000d0c0:	8180030d 	sth	r6,12(r16)
1000d0c4:	10c7c83a 	sub	r3,r2,r3
1000d0c8:	193fe316 	blt	r3,r4,1000d058 <__alt_data_end+0xf800d058>
1000d0cc:	9009883a 	mov	r4,r18
1000d0d0:	800b883a 	mov	r5,r16
1000d0d4:	0007d180 	call	10007d18 <_fflush_r>
1000d0d8:	1000091e 	bne	r2,zero,1000d100 <__swbuf_r+0x10c>
1000d0dc:	80800017 	ldw	r2,0(r16)
1000d0e0:	00c00044 	movi	r3,1
1000d0e4:	003fdd06 	br	1000d05c <__alt_data_end+0xf800d05c>
1000d0e8:	00800284 	movi	r2,10
1000d0ec:	88bfe61e 	bne	r17,r2,1000d088 <__alt_data_end+0xf800d088>
1000d0f0:	9009883a 	mov	r4,r18
1000d0f4:	800b883a 	mov	r5,r16
1000d0f8:	0007d180 	call	10007d18 <_fflush_r>
1000d0fc:	103fe226 	beq	r2,zero,1000d088 <__alt_data_end+0xf800d088>
1000d100:	00bfffc4 	movi	r2,-1
1000d104:	003fe106 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d108:	9009883a 	mov	r4,r18
1000d10c:	800b883a 	mov	r5,r16
1000d110:	00062980 	call	10006298 <__swsetup_r>
1000d114:	1000051e 	bne	r2,zero,1000d12c <__swbuf_r+0x138>
1000d118:	8180030b 	ldhu	r6,12(r16)
1000d11c:	80c00417 	ldw	r3,16(r16)
1000d120:	003fc606 	br	1000d03c <__alt_data_end+0xf800d03c>
1000d124:	00082d40 	call	100082d4 <__sinit>
1000d128:	003fbd06 	br	1000d020 <__alt_data_end+0xf800d020>
1000d12c:	80c0030b 	ldhu	r3,12(r16)
1000d130:	00bfffc4 	movi	r2,-1
1000d134:	18c01014 	ori	r3,r3,64
1000d138:	80c0030d 	sth	r3,12(r16)
1000d13c:	00c00244 	movi	r3,9
1000d140:	90c00015 	stw	r3,0(r18)
1000d144:	003fd106 	br	1000d08c <__alt_data_end+0xf800d08c>

1000d148 <__swbuf>:
1000d148:	00c40074 	movhi	r3,4097
1000d14c:	18cbd104 	addi	r3,r3,12100
1000d150:	2005883a 	mov	r2,r4
1000d154:	19000017 	ldw	r4,0(r3)
1000d158:	280d883a 	mov	r6,r5
1000d15c:	100b883a 	mov	r5,r2
1000d160:	000cff41 	jmpi	1000cff4 <__swbuf_r>

1000d164 <_wcrtomb_r>:
1000d164:	defff604 	addi	sp,sp,-40
1000d168:	00840074 	movhi	r2,4097
1000d16c:	dc800815 	stw	r18,32(sp)
1000d170:	dc400715 	stw	r17,28(sp)
1000d174:	dc000615 	stw	r16,24(sp)
1000d178:	108bd504 	addi	r2,r2,12116
1000d17c:	dfc00915 	stw	ra,36(sp)
1000d180:	2021883a 	mov	r16,r4
1000d184:	3823883a 	mov	r17,r7
1000d188:	14800017 	ldw	r18,0(r2)
1000d18c:	28001426 	beq	r5,zero,1000d1e0 <_wcrtomb_r+0x7c>
1000d190:	d9400415 	stw	r5,16(sp)
1000d194:	d9800515 	stw	r6,20(sp)
1000d198:	0008dc80 	call	10008dc8 <__locale_charset>
1000d19c:	d9400417 	ldw	r5,16(sp)
1000d1a0:	d9800517 	ldw	r6,20(sp)
1000d1a4:	8009883a 	mov	r4,r16
1000d1a8:	dc400015 	stw	r17,0(sp)
1000d1ac:	100f883a 	mov	r7,r2
1000d1b0:	903ee83a 	callr	r18
1000d1b4:	00ffffc4 	movi	r3,-1
1000d1b8:	10c0031e 	bne	r2,r3,1000d1c8 <_wcrtomb_r+0x64>
1000d1bc:	88000015 	stw	zero,0(r17)
1000d1c0:	00c02284 	movi	r3,138
1000d1c4:	80c00015 	stw	r3,0(r16)
1000d1c8:	dfc00917 	ldw	ra,36(sp)
1000d1cc:	dc800817 	ldw	r18,32(sp)
1000d1d0:	dc400717 	ldw	r17,28(sp)
1000d1d4:	dc000617 	ldw	r16,24(sp)
1000d1d8:	dec00a04 	addi	sp,sp,40
1000d1dc:	f800283a 	ret
1000d1e0:	0008dc80 	call	10008dc8 <__locale_charset>
1000d1e4:	8009883a 	mov	r4,r16
1000d1e8:	dc400015 	stw	r17,0(sp)
1000d1ec:	d9400104 	addi	r5,sp,4
1000d1f0:	000d883a 	mov	r6,zero
1000d1f4:	100f883a 	mov	r7,r2
1000d1f8:	903ee83a 	callr	r18
1000d1fc:	003fed06 	br	1000d1b4 <__alt_data_end+0xf800d1b4>

1000d200 <wcrtomb>:
1000d200:	defff504 	addi	sp,sp,-44
1000d204:	dc400515 	stw	r17,20(sp)
1000d208:	dc000415 	stw	r16,16(sp)
1000d20c:	dfc00a15 	stw	ra,40(sp)
1000d210:	dd400915 	stw	r21,36(sp)
1000d214:	dd000815 	stw	r20,32(sp)
1000d218:	dcc00715 	stw	r19,28(sp)
1000d21c:	dc800615 	stw	r18,24(sp)
1000d220:	2021883a 	mov	r16,r4
1000d224:	3023883a 	mov	r17,r6
1000d228:	20001d26 	beq	r4,zero,1000d2a0 <wcrtomb+0xa0>
1000d22c:	04840074 	movhi	r18,4097
1000d230:	948bd104 	addi	r18,r18,12100
1000d234:	00840074 	movhi	r2,4097
1000d238:	95400017 	ldw	r21,0(r18)
1000d23c:	108bd504 	addi	r2,r2,12116
1000d240:	15000017 	ldw	r20,0(r2)
1000d244:	2827883a 	mov	r19,r5
1000d248:	0008dc80 	call	10008dc8 <__locale_charset>
1000d24c:	a809883a 	mov	r4,r21
1000d250:	dc400015 	stw	r17,0(sp)
1000d254:	800b883a 	mov	r5,r16
1000d258:	980d883a 	mov	r6,r19
1000d25c:	100f883a 	mov	r7,r2
1000d260:	a03ee83a 	callr	r20
1000d264:	00ffffc4 	movi	r3,-1
1000d268:	10c0041e 	bne	r2,r3,1000d27c <wcrtomb+0x7c>
1000d26c:	90c00017 	ldw	r3,0(r18)
1000d270:	01002284 	movi	r4,138
1000d274:	88000015 	stw	zero,0(r17)
1000d278:	19000015 	stw	r4,0(r3)
1000d27c:	dfc00a17 	ldw	ra,40(sp)
1000d280:	dd400917 	ldw	r21,36(sp)
1000d284:	dd000817 	ldw	r20,32(sp)
1000d288:	dcc00717 	ldw	r19,28(sp)
1000d28c:	dc800617 	ldw	r18,24(sp)
1000d290:	dc400517 	ldw	r17,20(sp)
1000d294:	dc000417 	ldw	r16,16(sp)
1000d298:	dec00b04 	addi	sp,sp,44
1000d29c:	f800283a 	ret
1000d2a0:	04840074 	movhi	r18,4097
1000d2a4:	948bd104 	addi	r18,r18,12100
1000d2a8:	00840074 	movhi	r2,4097
1000d2ac:	94c00017 	ldw	r19,0(r18)
1000d2b0:	108bd504 	addi	r2,r2,12116
1000d2b4:	14000017 	ldw	r16,0(r2)
1000d2b8:	0008dc80 	call	10008dc8 <__locale_charset>
1000d2bc:	9809883a 	mov	r4,r19
1000d2c0:	dc400015 	stw	r17,0(sp)
1000d2c4:	d9400104 	addi	r5,sp,4
1000d2c8:	000d883a 	mov	r6,zero
1000d2cc:	100f883a 	mov	r7,r2
1000d2d0:	803ee83a 	callr	r16
1000d2d4:	003fe306 	br	1000d264 <__alt_data_end+0xf800d264>

1000d2d8 <__ascii_wctomb>:
1000d2d8:	28000526 	beq	r5,zero,1000d2f0 <__ascii_wctomb+0x18>
1000d2dc:	00803fc4 	movi	r2,255
1000d2e0:	11800536 	bltu	r2,r6,1000d2f8 <__ascii_wctomb+0x20>
1000d2e4:	29800005 	stb	r6,0(r5)
1000d2e8:	00800044 	movi	r2,1
1000d2ec:	f800283a 	ret
1000d2f0:	0005883a 	mov	r2,zero
1000d2f4:	f800283a 	ret
1000d2f8:	00802284 	movi	r2,138
1000d2fc:	20800015 	stw	r2,0(r4)
1000d300:	00bfffc4 	movi	r2,-1
1000d304:	f800283a 	ret

1000d308 <_wctomb_r>:
1000d308:	00840074 	movhi	r2,4097
1000d30c:	defff904 	addi	sp,sp,-28
1000d310:	108bd504 	addi	r2,r2,12116
1000d314:	dfc00615 	stw	ra,24(sp)
1000d318:	dc400515 	stw	r17,20(sp)
1000d31c:	dc000415 	stw	r16,16(sp)
1000d320:	3823883a 	mov	r17,r7
1000d324:	14000017 	ldw	r16,0(r2)
1000d328:	d9000115 	stw	r4,4(sp)
1000d32c:	d9400215 	stw	r5,8(sp)
1000d330:	d9800315 	stw	r6,12(sp)
1000d334:	0008dc80 	call	10008dc8 <__locale_charset>
1000d338:	d9000117 	ldw	r4,4(sp)
1000d33c:	d9400217 	ldw	r5,8(sp)
1000d340:	d9800317 	ldw	r6,12(sp)
1000d344:	dc400015 	stw	r17,0(sp)
1000d348:	100f883a 	mov	r7,r2
1000d34c:	803ee83a 	callr	r16
1000d350:	dfc00617 	ldw	ra,24(sp)
1000d354:	dc400517 	ldw	r17,20(sp)
1000d358:	dc000417 	ldw	r16,16(sp)
1000d35c:	dec00704 	addi	sp,sp,28
1000d360:	f800283a 	ret

1000d364 <__muldi3>:
1000d364:	defff604 	addi	sp,sp,-40
1000d368:	dd800615 	stw	r22,24(sp)
1000d36c:	dd400515 	stw	r21,20(sp)
1000d370:	25bfffcc 	andi	r22,r4,65535
1000d374:	357fffcc 	andi	r21,r6,65535
1000d378:	dc400115 	stw	r17,4(sp)
1000d37c:	2022d43a 	srli	r17,r4,16
1000d380:	dcc00315 	stw	r19,12(sp)
1000d384:	dc800215 	stw	r18,8(sp)
1000d388:	2027883a 	mov	r19,r4
1000d38c:	2825883a 	mov	r18,r5
1000d390:	a809883a 	mov	r4,r21
1000d394:	b00b883a 	mov	r5,r22
1000d398:	dfc00915 	stw	ra,36(sp)
1000d39c:	df000815 	stw	fp,32(sp)
1000d3a0:	ddc00715 	stw	r23,28(sp)
1000d3a4:	3839883a 	mov	fp,r7
1000d3a8:	302ed43a 	srli	r23,r6,16
1000d3ac:	dd000415 	stw	r20,16(sp)
1000d3b0:	dc000015 	stw	r16,0(sp)
1000d3b4:	3029883a 	mov	r20,r6
1000d3b8:	0002be00 	call	10002be0 <__mulsi3>
1000d3bc:	a809883a 	mov	r4,r21
1000d3c0:	880b883a 	mov	r5,r17
1000d3c4:	1021883a 	mov	r16,r2
1000d3c8:	0002be00 	call	10002be0 <__mulsi3>
1000d3cc:	880b883a 	mov	r5,r17
1000d3d0:	b809883a 	mov	r4,r23
1000d3d4:	102b883a 	mov	r21,r2
1000d3d8:	0002be00 	call	10002be0 <__mulsi3>
1000d3dc:	b809883a 	mov	r4,r23
1000d3e0:	b00b883a 	mov	r5,r22
1000d3e4:	1023883a 	mov	r17,r2
1000d3e8:	0002be00 	call	10002be0 <__mulsi3>
1000d3ec:	8012d43a 	srli	r9,r16,16
1000d3f0:	a885883a 	add	r2,r21,r2
1000d3f4:	1251883a 	add	r8,r2,r9
1000d3f8:	4540022e 	bgeu	r8,r21,1000d404 <__muldi3+0xa0>
1000d3fc:	00800074 	movhi	r2,1
1000d400:	88a3883a 	add	r17,r17,r2
1000d404:	4006d43a 	srli	r3,r8,16
1000d408:	4010943a 	slli	r8,r8,16
1000d40c:	9809883a 	mov	r4,r19
1000d410:	e00b883a 	mov	r5,fp
1000d414:	843fffcc 	andi	r16,r16,65535
1000d418:	88e3883a 	add	r17,r17,r3
1000d41c:	4421883a 	add	r16,r8,r16
1000d420:	0002be00 	call	10002be0 <__mulsi3>
1000d424:	a009883a 	mov	r4,r20
1000d428:	900b883a 	mov	r5,r18
1000d42c:	1027883a 	mov	r19,r2
1000d430:	0002be00 	call	10002be0 <__mulsi3>
1000d434:	9885883a 	add	r2,r19,r2
1000d438:	1447883a 	add	r3,r2,r17
1000d43c:	8005883a 	mov	r2,r16
1000d440:	dfc00917 	ldw	ra,36(sp)
1000d444:	df000817 	ldw	fp,32(sp)
1000d448:	ddc00717 	ldw	r23,28(sp)
1000d44c:	dd800617 	ldw	r22,24(sp)
1000d450:	dd400517 	ldw	r21,20(sp)
1000d454:	dd000417 	ldw	r20,16(sp)
1000d458:	dcc00317 	ldw	r19,12(sp)
1000d45c:	dc800217 	ldw	r18,8(sp)
1000d460:	dc400117 	ldw	r17,4(sp)
1000d464:	dc000017 	ldw	r16,0(sp)
1000d468:	dec00a04 	addi	sp,sp,40
1000d46c:	f800283a 	ret

1000d470 <__divdf3>:
1000d470:	defff004 	addi	sp,sp,-64
1000d474:	dc800815 	stw	r18,32(sp)
1000d478:	2824d53a 	srli	r18,r5,20
1000d47c:	dd800c15 	stw	r22,48(sp)
1000d480:	282cd7fa 	srli	r22,r5,31
1000d484:	dc000615 	stw	r16,24(sp)
1000d488:	04000434 	movhi	r16,16
1000d48c:	df000e15 	stw	fp,56(sp)
1000d490:	dd000a15 	stw	r20,40(sp)
1000d494:	dcc00915 	stw	r19,36(sp)
1000d498:	dc400715 	stw	r17,28(sp)
1000d49c:	843fffc4 	addi	r16,r16,-1
1000d4a0:	dfc00f15 	stw	ra,60(sp)
1000d4a4:	ddc00d15 	stw	r23,52(sp)
1000d4a8:	dd400b15 	stw	r21,44(sp)
1000d4ac:	9481ffcc 	andi	r18,r18,2047
1000d4b0:	2029883a 	mov	r20,r4
1000d4b4:	2027883a 	mov	r19,r4
1000d4b8:	2c22703a 	and	r17,r5,r16
1000d4bc:	b7003fcc 	andi	fp,r22,255
1000d4c0:	90005e26 	beq	r18,zero,1000d63c <__divdf3+0x1cc>
1000d4c4:	0081ffc4 	movi	r2,2047
1000d4c8:	90803526 	beq	r18,r2,1000d5a0 <__divdf3+0x130>
1000d4cc:	8c000434 	orhi	r16,r17,16
1000d4d0:	2004d77a 	srli	r2,r4,29
1000d4d4:	802090fa 	slli	r16,r16,3
1000d4d8:	202690fa 	slli	r19,r4,3
1000d4dc:	94bf0044 	addi	r18,r18,-1023
1000d4e0:	80a2b03a 	or	r17,r16,r2
1000d4e4:	0029883a 	mov	r20,zero
1000d4e8:	0011883a 	mov	r8,zero
1000d4ec:	380ad53a 	srli	r5,r7,20
1000d4f0:	382ed7fa 	srli	r23,r7,31
1000d4f4:	04000434 	movhi	r16,16
1000d4f8:	843fffc4 	addi	r16,r16,-1
1000d4fc:	2941ffcc 	andi	r5,r5,2047
1000d500:	302b883a 	mov	r21,r6
1000d504:	3c20703a 	and	r16,r7,r16
1000d508:	ba403fcc 	andi	r9,r23,255
1000d50c:	28006726 	beq	r5,zero,1000d6ac <__divdf3+0x23c>
1000d510:	0081ffc4 	movi	r2,2047
1000d514:	28805f26 	beq	r5,r2,1000d694 <__divdf3+0x224>
1000d518:	84000434 	orhi	r16,r16,16
1000d51c:	3004d77a 	srli	r2,r6,29
1000d520:	802090fa 	slli	r16,r16,3
1000d524:	302a90fa 	slli	r21,r6,3
1000d528:	297f0044 	addi	r5,r5,-1023
1000d52c:	80a0b03a 	or	r16,r16,r2
1000d530:	000f883a 	mov	r7,zero
1000d534:	3d06b03a 	or	r3,r7,r20
1000d538:	180690ba 	slli	r3,r3,2
1000d53c:	00840074 	movhi	r2,4097
1000d540:	10b55804 	addi	r2,r2,-10912
1000d544:	1885883a 	add	r2,r3,r2
1000d548:	10800017 	ldw	r2,0(r2)
1000d54c:	b5c8f03a 	xor	r4,r22,r23
1000d550:	200d883a 	mov	r6,r4
1000d554:	25003fcc 	andi	r20,r4,255
1000d558:	9165c83a 	sub	r18,r18,r5
1000d55c:	1000683a 	jmp	r2
1000d560:	1000d7a8 	cmpgeui	zero,r2,862
1000d564:	1000d5d8 	cmpnei	zero,r2,855
1000d568:	1000d76c 	andhi	zero,r2,861
1000d56c:	1000d5bc 	xorhi	zero,r2,854
1000d570:	1000d76c 	andhi	zero,r2,861
1000d574:	1000d740 	call	11000d74 <_gp+0xfe5e34>
1000d578:	1000d76c 	andhi	zero,r2,861
1000d57c:	1000d5bc 	xorhi	zero,r2,854
1000d580:	1000d5d8 	cmpnei	zero,r2,855
1000d584:	1000d5d8 	cmpnei	zero,r2,855
1000d588:	1000d740 	call	11000d74 <_gp+0xfe5e34>
1000d58c:	1000d5bc 	xorhi	zero,r2,854
1000d590:	1000d5cc 	andi	zero,r2,855
1000d594:	1000d5cc 	andi	zero,r2,855
1000d598:	1000d5cc 	andi	zero,r2,855
1000d59c:	1000d77c 	xorhi	zero,r2,861
1000d5a0:	8904b03a 	or	r2,r17,r4
1000d5a4:	1000631e 	bne	r2,zero,1000d734 <__divdf3+0x2c4>
1000d5a8:	05000204 	movi	r20,8
1000d5ac:	0023883a 	mov	r17,zero
1000d5b0:	0027883a 	mov	r19,zero
1000d5b4:	02000084 	movi	r8,2
1000d5b8:	003fcc06 	br	1000d4ec <__alt_data_end+0xf800d4ec>
1000d5bc:	8023883a 	mov	r17,r16
1000d5c0:	a827883a 	mov	r19,r21
1000d5c4:	4839883a 	mov	fp,r9
1000d5c8:	3811883a 	mov	r8,r7
1000d5cc:	00800084 	movi	r2,2
1000d5d0:	4081531e 	bne	r8,r2,1000db20 <__divdf3+0x6b0>
1000d5d4:	e029883a 	mov	r20,fp
1000d5d8:	a180004c 	andi	r6,r20,1
1000d5dc:	0201ffc4 	movi	r8,2047
1000d5e0:	000b883a 	mov	r5,zero
1000d5e4:	0027883a 	mov	r19,zero
1000d5e8:	4010953a 	slli	r8,r8,20
1000d5ec:	30c03fcc 	andi	r3,r6,255
1000d5f0:	04000434 	movhi	r16,16
1000d5f4:	180697fa 	slli	r3,r3,31
1000d5f8:	843fffc4 	addi	r16,r16,-1
1000d5fc:	2c20703a 	and	r16,r5,r16
1000d600:	8220b03a 	or	r16,r16,r8
1000d604:	80c6b03a 	or	r3,r16,r3
1000d608:	9805883a 	mov	r2,r19
1000d60c:	dfc00f17 	ldw	ra,60(sp)
1000d610:	df000e17 	ldw	fp,56(sp)
1000d614:	ddc00d17 	ldw	r23,52(sp)
1000d618:	dd800c17 	ldw	r22,48(sp)
1000d61c:	dd400b17 	ldw	r21,44(sp)
1000d620:	dd000a17 	ldw	r20,40(sp)
1000d624:	dcc00917 	ldw	r19,36(sp)
1000d628:	dc800817 	ldw	r18,32(sp)
1000d62c:	dc400717 	ldw	r17,28(sp)
1000d630:	dc000617 	ldw	r16,24(sp)
1000d634:	dec01004 	addi	sp,sp,64
1000d638:	f800283a 	ret
1000d63c:	8904b03a 	or	r2,r17,r4
1000d640:	10003726 	beq	r2,zero,1000d720 <__divdf3+0x2b0>
1000d644:	88014d26 	beq	r17,zero,1000db7c <__divdf3+0x70c>
1000d648:	8809883a 	mov	r4,r17
1000d64c:	d9800215 	stw	r6,8(sp)
1000d650:	d9c00515 	stw	r7,20(sp)
1000d654:	0003ecc0 	call	10003ecc <__clzsi2>
1000d658:	d9800217 	ldw	r6,8(sp)
1000d65c:	d9c00517 	ldw	r7,20(sp)
1000d660:	1007883a 	mov	r3,r2
1000d664:	01000a04 	movi	r4,40
1000d668:	1cfffe04 	addi	r19,r3,-8
1000d66c:	20c9c83a 	sub	r4,r4,r3
1000d670:	8cca983a 	sll	r5,r17,r19
1000d674:	a108d83a 	srl	r4,r20,r4
1000d678:	a4e6983a 	sll	r19,r20,r19
1000d67c:	2162b03a 	or	r17,r4,r5
1000d680:	04bf0344 	movi	r18,-1011
1000d684:	90e5c83a 	sub	r18,r18,r3
1000d688:	0029883a 	mov	r20,zero
1000d68c:	0011883a 	mov	r8,zero
1000d690:	003f9606 	br	1000d4ec <__alt_data_end+0xf800d4ec>
1000d694:	8184b03a 	or	r2,r16,r6
1000d698:	10001f1e 	bne	r2,zero,1000d718 <__divdf3+0x2a8>
1000d69c:	0021883a 	mov	r16,zero
1000d6a0:	002b883a 	mov	r21,zero
1000d6a4:	01c00084 	movi	r7,2
1000d6a8:	003fa206 	br	1000d534 <__alt_data_end+0xf800d534>
1000d6ac:	8184b03a 	or	r2,r16,r6
1000d6b0:	10001526 	beq	r2,zero,1000d708 <__divdf3+0x298>
1000d6b4:	80013d26 	beq	r16,zero,1000dbac <__divdf3+0x73c>
1000d6b8:	8009883a 	mov	r4,r16
1000d6bc:	d9800215 	stw	r6,8(sp)
1000d6c0:	da000315 	stw	r8,12(sp)
1000d6c4:	da400415 	stw	r9,16(sp)
1000d6c8:	0003ecc0 	call	10003ecc <__clzsi2>
1000d6cc:	d9800217 	ldw	r6,8(sp)
1000d6d0:	da000317 	ldw	r8,12(sp)
1000d6d4:	da400417 	ldw	r9,16(sp)
1000d6d8:	1007883a 	mov	r3,r2
1000d6dc:	01000a04 	movi	r4,40
1000d6e0:	1d7ffe04 	addi	r21,r3,-8
1000d6e4:	20c9c83a 	sub	r4,r4,r3
1000d6e8:	8560983a 	sll	r16,r16,r21
1000d6ec:	3108d83a 	srl	r4,r6,r4
1000d6f0:	356a983a 	sll	r21,r6,r21
1000d6f4:	2420b03a 	or	r16,r4,r16
1000d6f8:	017f0344 	movi	r5,-1011
1000d6fc:	28cbc83a 	sub	r5,r5,r3
1000d700:	000f883a 	mov	r7,zero
1000d704:	003f8b06 	br	1000d534 <__alt_data_end+0xf800d534>
1000d708:	0021883a 	mov	r16,zero
1000d70c:	002b883a 	mov	r21,zero
1000d710:	01c00044 	movi	r7,1
1000d714:	003f8706 	br	1000d534 <__alt_data_end+0xf800d534>
1000d718:	01c000c4 	movi	r7,3
1000d71c:	003f8506 	br	1000d534 <__alt_data_end+0xf800d534>
1000d720:	05000104 	movi	r20,4
1000d724:	0023883a 	mov	r17,zero
1000d728:	0027883a 	mov	r19,zero
1000d72c:	02000044 	movi	r8,1
1000d730:	003f6e06 	br	1000d4ec <__alt_data_end+0xf800d4ec>
1000d734:	05000304 	movi	r20,12
1000d738:	020000c4 	movi	r8,3
1000d73c:	003f6b06 	br	1000d4ec <__alt_data_end+0xf800d4ec>
1000d740:	01400434 	movhi	r5,16
1000d744:	000d883a 	mov	r6,zero
1000d748:	297fffc4 	addi	r5,r5,-1
1000d74c:	04ffffc4 	movi	r19,-1
1000d750:	0201ffc4 	movi	r8,2047
1000d754:	003fa406 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000d758:	043f0084 	movi	r16,-1022
1000d75c:	84a1c83a 	sub	r16,r16,r18
1000d760:	00800e04 	movi	r2,56
1000d764:	14014d0e 	bge	r2,r16,1000dc9c <__divdf3+0x82c>
1000d768:	a180004c 	andi	r6,r20,1
1000d76c:	0011883a 	mov	r8,zero
1000d770:	000b883a 	mov	r5,zero
1000d774:	0027883a 	mov	r19,zero
1000d778:	003f9b06 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000d77c:	8880022c 	andhi	r2,r17,8
1000d780:	1000f026 	beq	r2,zero,1000db44 <__divdf3+0x6d4>
1000d784:	8080022c 	andhi	r2,r16,8
1000d788:	1000ee1e 	bne	r2,zero,1000db44 <__divdf3+0x6d4>
1000d78c:	00800434 	movhi	r2,16
1000d790:	81400234 	orhi	r5,r16,8
1000d794:	10bfffc4 	addi	r2,r2,-1
1000d798:	b80d883a 	mov	r6,r23
1000d79c:	288a703a 	and	r5,r5,r2
1000d7a0:	a827883a 	mov	r19,r21
1000d7a4:	003fea06 	br	1000d750 <__alt_data_end+0xf800d750>
1000d7a8:	84411c36 	bltu	r16,r17,1000dc1c <__divdf3+0x7ac>
1000d7ac:	8c011a26 	beq	r17,r16,1000dc18 <__divdf3+0x7a8>
1000d7b0:	94bfffc4 	addi	r18,r18,-1
1000d7b4:	dcc00015 	stw	r19,0(sp)
1000d7b8:	8811883a 	mov	r8,r17
1000d7bc:	002d883a 	mov	r22,zero
1000d7c0:	a80cd63a 	srli	r6,r21,24
1000d7c4:	8020923a 	slli	r16,r16,8
1000d7c8:	a82a923a 	slli	r21,r21,8
1000d7cc:	4009883a 	mov	r4,r8
1000d7d0:	342eb03a 	or	r23,r6,r16
1000d7d4:	dd400115 	stw	r21,4(sp)
1000d7d8:	b82ad43a 	srli	r21,r23,16
1000d7dc:	da000315 	stw	r8,12(sp)
1000d7e0:	bcffffcc 	andi	r19,r23,65535
1000d7e4:	a80b883a 	mov	r5,r21
1000d7e8:	0002bd00 	call	10002bd0 <__udivsi3>
1000d7ec:	1009883a 	mov	r4,r2
1000d7f0:	980b883a 	mov	r5,r19
1000d7f4:	1023883a 	mov	r17,r2
1000d7f8:	0002be00 	call	10002be0 <__mulsi3>
1000d7fc:	da000317 	ldw	r8,12(sp)
1000d800:	a80b883a 	mov	r5,r21
1000d804:	1039883a 	mov	fp,r2
1000d808:	4009883a 	mov	r4,r8
1000d80c:	0002bd80 	call	10002bd8 <__umodsi3>
1000d810:	d8c00017 	ldw	r3,0(sp)
1000d814:	1004943a 	slli	r2,r2,16
1000d818:	1810d43a 	srli	r8,r3,16
1000d81c:	120eb03a 	or	r7,r2,r8
1000d820:	3f00062e 	bgeu	r7,fp,1000d83c <__divdf3+0x3cc>
1000d824:	3dcf883a 	add	r7,r7,r23
1000d828:	88bfffc4 	addi	r2,r17,-1
1000d82c:	3dc10a36 	bltu	r7,r23,1000dc58 <__divdf3+0x7e8>
1000d830:	3f01092e 	bgeu	r7,fp,1000dc58 <__divdf3+0x7e8>
1000d834:	8c7fff84 	addi	r17,r17,-2
1000d838:	3dcf883a 	add	r7,r7,r23
1000d83c:	3f39c83a 	sub	fp,r7,fp
1000d840:	e009883a 	mov	r4,fp
1000d844:	a80b883a 	mov	r5,r21
1000d848:	0002bd00 	call	10002bd0 <__udivsi3>
1000d84c:	1009883a 	mov	r4,r2
1000d850:	980b883a 	mov	r5,r19
1000d854:	1021883a 	mov	r16,r2
1000d858:	0002be00 	call	10002be0 <__mulsi3>
1000d85c:	e009883a 	mov	r4,fp
1000d860:	a80b883a 	mov	r5,r21
1000d864:	d8800315 	stw	r2,12(sp)
1000d868:	0002bd80 	call	10002bd8 <__umodsi3>
1000d86c:	d9000017 	ldw	r4,0(sp)
1000d870:	1004943a 	slli	r2,r2,16
1000d874:	da000317 	ldw	r8,12(sp)
1000d878:	20ffffcc 	andi	r3,r4,65535
1000d87c:	10ceb03a 	or	r7,r2,r3
1000d880:	3a00062e 	bgeu	r7,r8,1000d89c <__divdf3+0x42c>
1000d884:	3dcf883a 	add	r7,r7,r23
1000d888:	80bfffc4 	addi	r2,r16,-1
1000d88c:	3dc0f036 	bltu	r7,r23,1000dc50 <__divdf3+0x7e0>
1000d890:	3a00ef2e 	bgeu	r7,r8,1000dc50 <__divdf3+0x7e0>
1000d894:	843fff84 	addi	r16,r16,-2
1000d898:	3dcf883a 	add	r7,r7,r23
1000d89c:	d8c00117 	ldw	r3,4(sp)
1000d8a0:	8822943a 	slli	r17,r17,16
1000d8a4:	3a0fc83a 	sub	r7,r7,r8
1000d8a8:	1806d43a 	srli	r3,r3,16
1000d8ac:	8462b03a 	or	r17,r16,r17
1000d8b0:	8affffcc 	andi	r11,r17,65535
1000d8b4:	d8c00015 	stw	r3,0(sp)
1000d8b8:	d8c00117 	ldw	r3,4(sp)
1000d8bc:	8820d43a 	srli	r16,r17,16
1000d8c0:	5809883a 	mov	r4,r11
1000d8c4:	1f3fffcc 	andi	fp,r3,65535
1000d8c8:	e00b883a 	mov	r5,fp
1000d8cc:	d9c00515 	stw	r7,20(sp)
1000d8d0:	dac00215 	stw	r11,8(sp)
1000d8d4:	0002be00 	call	10002be0 <__mulsi3>
1000d8d8:	8009883a 	mov	r4,r16
1000d8dc:	e00b883a 	mov	r5,fp
1000d8e0:	d8800415 	stw	r2,16(sp)
1000d8e4:	0002be00 	call	10002be0 <__mulsi3>
1000d8e8:	d9400017 	ldw	r5,0(sp)
1000d8ec:	8009883a 	mov	r4,r16
1000d8f0:	d8800315 	stw	r2,12(sp)
1000d8f4:	0002be00 	call	10002be0 <__mulsi3>
1000d8f8:	dac00217 	ldw	r11,8(sp)
1000d8fc:	d9400017 	ldw	r5,0(sp)
1000d900:	d8800215 	stw	r2,8(sp)
1000d904:	5809883a 	mov	r4,r11
1000d908:	0002be00 	call	10002be0 <__mulsi3>
1000d90c:	da400417 	ldw	r9,16(sp)
1000d910:	da800317 	ldw	r10,12(sp)
1000d914:	d9c00517 	ldw	r7,20(sp)
1000d918:	480ad43a 	srli	r5,r9,16
1000d91c:	5085883a 	add	r2,r10,r2
1000d920:	db000217 	ldw	r12,8(sp)
1000d924:	1151883a 	add	r8,r2,r5
1000d928:	4280022e 	bgeu	r8,r10,1000d934 <__divdf3+0x4c4>
1000d92c:	00800074 	movhi	r2,1
1000d930:	6099883a 	add	r12,r12,r2
1000d934:	400ad43a 	srli	r5,r8,16
1000d938:	4010943a 	slli	r8,r8,16
1000d93c:	4c3fffcc 	andi	r16,r9,65535
1000d940:	6149883a 	add	r4,r12,r5
1000d944:	4411883a 	add	r8,r8,r16
1000d948:	3900a736 	bltu	r7,r4,1000dbe8 <__divdf3+0x778>
1000d94c:	3900c426 	beq	r7,r4,1000dc60 <__divdf3+0x7f0>
1000d950:	3909c83a 	sub	r4,r7,r4
1000d954:	b221c83a 	sub	r16,r22,r8
1000d958:	b42d803a 	cmpltu	r22,r22,r16
1000d95c:	25adc83a 	sub	r22,r4,r22
1000d960:	b5c0c626 	beq	r22,r23,1000dc7c <__divdf3+0x80c>
1000d964:	b009883a 	mov	r4,r22
1000d968:	a80b883a 	mov	r5,r21
1000d96c:	0002bd00 	call	10002bd0 <__udivsi3>
1000d970:	1009883a 	mov	r4,r2
1000d974:	980b883a 	mov	r5,r19
1000d978:	d8800315 	stw	r2,12(sp)
1000d97c:	0002be00 	call	10002be0 <__mulsi3>
1000d980:	a80b883a 	mov	r5,r21
1000d984:	b009883a 	mov	r4,r22
1000d988:	d8800415 	stw	r2,16(sp)
1000d98c:	0002bd80 	call	10002bd8 <__umodsi3>
1000d990:	1004943a 	slli	r2,r2,16
1000d994:	800ed43a 	srli	r7,r16,16
1000d998:	da400417 	ldw	r9,16(sp)
1000d99c:	da000317 	ldw	r8,12(sp)
1000d9a0:	11cab03a 	or	r5,r2,r7
1000d9a4:	2a40062e 	bgeu	r5,r9,1000d9c0 <__divdf3+0x550>
1000d9a8:	2dcb883a 	add	r5,r5,r23
1000d9ac:	40bfffc4 	addi	r2,r8,-1
1000d9b0:	2dc0b436 	bltu	r5,r23,1000dc84 <__divdf3+0x814>
1000d9b4:	2a40b32e 	bgeu	r5,r9,1000dc84 <__divdf3+0x814>
1000d9b8:	423fff84 	addi	r8,r8,-2
1000d9bc:	2dcb883a 	add	r5,r5,r23
1000d9c0:	2a6dc83a 	sub	r22,r5,r9
1000d9c4:	b009883a 	mov	r4,r22
1000d9c8:	a80b883a 	mov	r5,r21
1000d9cc:	da000315 	stw	r8,12(sp)
1000d9d0:	0002bd00 	call	10002bd0 <__udivsi3>
1000d9d4:	980b883a 	mov	r5,r19
1000d9d8:	1009883a 	mov	r4,r2
1000d9dc:	d8800415 	stw	r2,16(sp)
1000d9e0:	0002be00 	call	10002be0 <__mulsi3>
1000d9e4:	b009883a 	mov	r4,r22
1000d9e8:	a80b883a 	mov	r5,r21
1000d9ec:	1027883a 	mov	r19,r2
1000d9f0:	0002bd80 	call	10002bd8 <__umodsi3>
1000d9f4:	1004943a 	slli	r2,r2,16
1000d9f8:	843fffcc 	andi	r16,r16,65535
1000d9fc:	da000317 	ldw	r8,12(sp)
1000da00:	140eb03a 	or	r7,r2,r16
1000da04:	da400417 	ldw	r9,16(sp)
1000da08:	3cc0062e 	bgeu	r7,r19,1000da24 <__divdf3+0x5b4>
1000da0c:	3dcf883a 	add	r7,r7,r23
1000da10:	48bfffc4 	addi	r2,r9,-1
1000da14:	3dc09d36 	bltu	r7,r23,1000dc8c <__divdf3+0x81c>
1000da18:	3cc09c2e 	bgeu	r7,r19,1000dc8c <__divdf3+0x81c>
1000da1c:	4a7fff84 	addi	r9,r9,-2
1000da20:	3dcf883a 	add	r7,r7,r23
1000da24:	4010943a 	slli	r8,r8,16
1000da28:	3cebc83a 	sub	r21,r7,r19
1000da2c:	e00b883a 	mov	r5,fp
1000da30:	4a26b03a 	or	r19,r9,r8
1000da34:	99ffffcc 	andi	r7,r19,65535
1000da38:	9820d43a 	srli	r16,r19,16
1000da3c:	3809883a 	mov	r4,r7
1000da40:	d9c00515 	stw	r7,20(sp)
1000da44:	0002be00 	call	10002be0 <__mulsi3>
1000da48:	8009883a 	mov	r4,r16
1000da4c:	e00b883a 	mov	r5,fp
1000da50:	102d883a 	mov	r22,r2
1000da54:	0002be00 	call	10002be0 <__mulsi3>
1000da58:	d9400017 	ldw	r5,0(sp)
1000da5c:	8009883a 	mov	r4,r16
1000da60:	1039883a 	mov	fp,r2
1000da64:	0002be00 	call	10002be0 <__mulsi3>
1000da68:	d9c00517 	ldw	r7,20(sp)
1000da6c:	d9400017 	ldw	r5,0(sp)
1000da70:	1021883a 	mov	r16,r2
1000da74:	3809883a 	mov	r4,r7
1000da78:	0002be00 	call	10002be0 <__mulsi3>
1000da7c:	b008d43a 	srli	r4,r22,16
1000da80:	e085883a 	add	r2,fp,r2
1000da84:	1109883a 	add	r4,r2,r4
1000da88:	2700022e 	bgeu	r4,fp,1000da94 <__divdf3+0x624>
1000da8c:	00800074 	movhi	r2,1
1000da90:	80a1883a 	add	r16,r16,r2
1000da94:	200ad43a 	srli	r5,r4,16
1000da98:	2008943a 	slli	r4,r4,16
1000da9c:	b5bfffcc 	andi	r22,r22,65535
1000daa0:	8145883a 	add	r2,r16,r5
1000daa4:	2589883a 	add	r4,r4,r22
1000daa8:	a8802c36 	bltu	r21,r2,1000db5c <__divdf3+0x6ec>
1000daac:	a880a426 	beq	r21,r2,1000dd40 <__divdf3+0x8d0>
1000dab0:	9cc00054 	ori	r19,r19,1
1000dab4:	9200ffc4 	addi	r8,r18,1023
1000dab8:	023f270e 	bge	zero,r8,1000d758 <__alt_data_end+0xf800d758>
1000dabc:	988001cc 	andi	r2,r19,7
1000dac0:	10000726 	beq	r2,zero,1000dae0 <__divdf3+0x670>
1000dac4:	990003cc 	andi	r4,r19,15
1000dac8:	00800104 	movi	r2,4
1000dacc:	20800426 	beq	r4,r2,1000dae0 <__divdf3+0x670>
1000dad0:	9885883a 	add	r2,r19,r2
1000dad4:	14e7803a 	cmpltu	r19,r2,r19
1000dad8:	8ce3883a 	add	r17,r17,r19
1000dadc:	1027883a 	mov	r19,r2
1000dae0:	8880402c 	andhi	r2,r17,256
1000dae4:	10000426 	beq	r2,zero,1000daf8 <__divdf3+0x688>
1000dae8:	00bfc034 	movhi	r2,65280
1000daec:	10bfffc4 	addi	r2,r2,-1
1000daf0:	92010004 	addi	r8,r18,1024
1000daf4:	88a2703a 	and	r17,r17,r2
1000daf8:	0081ff84 	movi	r2,2046
1000dafc:	123eb616 	blt	r2,r8,1000d5d8 <__alt_data_end+0xf800d5d8>
1000db00:	9826d0fa 	srli	r19,r19,3
1000db04:	8804977a 	slli	r2,r17,29
1000db08:	8820927a 	slli	r16,r17,9
1000db0c:	4201ffcc 	andi	r8,r8,2047
1000db10:	14e6b03a 	or	r19,r2,r19
1000db14:	800ad33a 	srli	r5,r16,12
1000db18:	a180004c 	andi	r6,r20,1
1000db1c:	003eb206 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000db20:	008000c4 	movi	r2,3
1000db24:	4080ac26 	beq	r8,r2,1000ddd8 <__divdf3+0x968>
1000db28:	00800044 	movi	r2,1
1000db2c:	4080591e 	bne	r8,r2,1000dc94 <__divdf3+0x824>
1000db30:	e00d883a 	mov	r6,fp
1000db34:	0011883a 	mov	r8,zero
1000db38:	000b883a 	mov	r5,zero
1000db3c:	0027883a 	mov	r19,zero
1000db40:	003ea906 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000db44:	00800434 	movhi	r2,16
1000db48:	89400234 	orhi	r5,r17,8
1000db4c:	10bfffc4 	addi	r2,r2,-1
1000db50:	b00d883a 	mov	r6,r22
1000db54:	288a703a 	and	r5,r5,r2
1000db58:	003efd06 	br	1000d750 <__alt_data_end+0xf800d750>
1000db5c:	adcf883a 	add	r7,r21,r23
1000db60:	997fffc4 	addi	r5,r19,-1
1000db64:	3dc0412e 	bgeu	r7,r23,1000dc6c <__divdf3+0x7fc>
1000db68:	2827883a 	mov	r19,r5
1000db6c:	38bfd01e 	bne	r7,r2,1000dab0 <__alt_data_end+0xf800dab0>
1000db70:	d8c00117 	ldw	r3,4(sp)
1000db74:	193fce1e 	bne	r3,r4,1000dab0 <__alt_data_end+0xf800dab0>
1000db78:	003fce06 	br	1000dab4 <__alt_data_end+0xf800dab4>
1000db7c:	d9800215 	stw	r6,8(sp)
1000db80:	d9c00515 	stw	r7,20(sp)
1000db84:	0003ecc0 	call	10003ecc <__clzsi2>
1000db88:	10c00804 	addi	r3,r2,32
1000db8c:	010009c4 	movi	r4,39
1000db90:	d9800217 	ldw	r6,8(sp)
1000db94:	d9c00517 	ldw	r7,20(sp)
1000db98:	20feb20e 	bge	r4,r3,1000d664 <__alt_data_end+0xf800d664>
1000db9c:	117ffe04 	addi	r5,r2,-8
1000dba0:	a162983a 	sll	r17,r20,r5
1000dba4:	0027883a 	mov	r19,zero
1000dba8:	003eb506 	br	1000d680 <__alt_data_end+0xf800d680>
1000dbac:	3009883a 	mov	r4,r6
1000dbb0:	d9800215 	stw	r6,8(sp)
1000dbb4:	da000315 	stw	r8,12(sp)
1000dbb8:	da400415 	stw	r9,16(sp)
1000dbbc:	0003ecc0 	call	10003ecc <__clzsi2>
1000dbc0:	10c00804 	addi	r3,r2,32
1000dbc4:	010009c4 	movi	r4,39
1000dbc8:	d9800217 	ldw	r6,8(sp)
1000dbcc:	da000317 	ldw	r8,12(sp)
1000dbd0:	da400417 	ldw	r9,16(sp)
1000dbd4:	20fec10e 	bge	r4,r3,1000d6dc <__alt_data_end+0xf800d6dc>
1000dbd8:	10bffe04 	addi	r2,r2,-8
1000dbdc:	a8a0983a 	sll	r16,r21,r2
1000dbe0:	002b883a 	mov	r21,zero
1000dbe4:	003ec406 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000dbe8:	d8c00117 	ldw	r3,4(sp)
1000dbec:	b0ed883a 	add	r22,r22,r3
1000dbf0:	b0c5803a 	cmpltu	r2,r22,r3
1000dbf4:	15c5883a 	add	r2,r2,r23
1000dbf8:	11cf883a 	add	r7,r2,r7
1000dbfc:	88bfffc4 	addi	r2,r17,-1
1000dc00:	b9c00d2e 	bgeu	r23,r7,1000dc38 <__divdf3+0x7c8>
1000dc04:	39003f36 	bltu	r7,r4,1000dd04 <__divdf3+0x894>
1000dc08:	21c06a26 	beq	r4,r7,1000ddb4 <__divdf3+0x944>
1000dc0c:	3909c83a 	sub	r4,r7,r4
1000dc10:	1023883a 	mov	r17,r2
1000dc14:	003f4f06 	br	1000d954 <__alt_data_end+0xf800d954>
1000dc18:	9d7ee536 	bltu	r19,r21,1000d7b0 <__alt_data_end+0xf800d7b0>
1000dc1c:	982ed07a 	srli	r23,r19,1
1000dc20:	880497fa 	slli	r2,r17,31
1000dc24:	8810d07a 	srli	r8,r17,1
1000dc28:	982c97fa 	slli	r22,r19,31
1000dc2c:	b884b03a 	or	r2,r23,r2
1000dc30:	d8800015 	stw	r2,0(sp)
1000dc34:	003ee206 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dc38:	3dfff41e 	bne	r7,r23,1000dc0c <__alt_data_end+0xf800dc0c>
1000dc3c:	d8c00117 	ldw	r3,4(sp)
1000dc40:	b0fff02e 	bgeu	r22,r3,1000dc04 <__alt_data_end+0xf800dc04>
1000dc44:	b909c83a 	sub	r4,r23,r4
1000dc48:	1023883a 	mov	r17,r2
1000dc4c:	003f4106 	br	1000d954 <__alt_data_end+0xf800d954>
1000dc50:	1021883a 	mov	r16,r2
1000dc54:	003f1106 	br	1000d89c <__alt_data_end+0xf800d89c>
1000dc58:	1023883a 	mov	r17,r2
1000dc5c:	003ef706 	br	1000d83c <__alt_data_end+0xf800d83c>
1000dc60:	b23fe136 	bltu	r22,r8,1000dbe8 <__alt_data_end+0xf800dbe8>
1000dc64:	0009883a 	mov	r4,zero
1000dc68:	003f3a06 	br	1000d954 <__alt_data_end+0xf800d954>
1000dc6c:	38802c36 	bltu	r7,r2,1000dd20 <__divdf3+0x8b0>
1000dc70:	11c05326 	beq	r2,r7,1000ddc0 <__divdf3+0x950>
1000dc74:	2827883a 	mov	r19,r5
1000dc78:	003f8d06 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000dc7c:	04ffffc4 	movi	r19,-1
1000dc80:	003f8c06 	br	1000dab4 <__alt_data_end+0xf800dab4>
1000dc84:	1011883a 	mov	r8,r2
1000dc88:	003f4d06 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000dc8c:	1013883a 	mov	r9,r2
1000dc90:	003f6406 	br	1000da24 <__alt_data_end+0xf800da24>
1000dc94:	e029883a 	mov	r20,fp
1000dc98:	003f8606 	br	1000dab4 <__alt_data_end+0xf800dab4>
1000dc9c:	008007c4 	movi	r2,31
1000dca0:	14002a16 	blt	r2,r16,1000dd4c <__divdf3+0x8dc>
1000dca4:	91410784 	addi	r5,r18,1054
1000dca8:	9c0cd83a 	srl	r6,r19,r16
1000dcac:	8948983a 	sll	r4,r17,r5
1000dcb0:	9944983a 	sll	r2,r19,r5
1000dcb4:	8c20d83a 	srl	r16,r17,r16
1000dcb8:	3108b03a 	or	r4,r6,r4
1000dcbc:	1004c03a 	cmpne	r2,r2,zero
1000dcc0:	2084b03a 	or	r2,r4,r2
1000dcc4:	110001cc 	andi	r4,r2,7
1000dcc8:	20000726 	beq	r4,zero,1000dce8 <__divdf3+0x878>
1000dccc:	114003cc 	andi	r5,r2,15
1000dcd0:	01000104 	movi	r4,4
1000dcd4:	29000426 	beq	r5,r4,1000dce8 <__divdf3+0x878>
1000dcd8:	11000104 	addi	r4,r2,4
1000dcdc:	2085803a 	cmpltu	r2,r4,r2
1000dce0:	80a1883a 	add	r16,r16,r2
1000dce4:	2005883a 	mov	r2,r4
1000dce8:	8100202c 	andhi	r4,r16,128
1000dcec:	20002d26 	beq	r4,zero,1000dda4 <__divdf3+0x934>
1000dcf0:	a180004c 	andi	r6,r20,1
1000dcf4:	02000044 	movi	r8,1
1000dcf8:	000b883a 	mov	r5,zero
1000dcfc:	0027883a 	mov	r19,zero
1000dd00:	003e3906 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000dd04:	d8c00117 	ldw	r3,4(sp)
1000dd08:	8c7fff84 	addi	r17,r17,-2
1000dd0c:	b0ed883a 	add	r22,r22,r3
1000dd10:	b0c5803a 	cmpltu	r2,r22,r3
1000dd14:	15c5883a 	add	r2,r2,r23
1000dd18:	11cf883a 	add	r7,r2,r7
1000dd1c:	003f0c06 	br	1000d950 <__alt_data_end+0xf800d950>
1000dd20:	d8c00117 	ldw	r3,4(sp)
1000dd24:	997fff84 	addi	r5,r19,-2
1000dd28:	18d1883a 	add	r8,r3,r3
1000dd2c:	40c7803a 	cmpltu	r3,r8,r3
1000dd30:	1dcd883a 	add	r6,r3,r23
1000dd34:	398f883a 	add	r7,r7,r6
1000dd38:	da000115 	stw	r8,4(sp)
1000dd3c:	003f8a06 	br	1000db68 <__alt_data_end+0xf800db68>
1000dd40:	203f861e 	bne	r4,zero,1000db5c <__alt_data_end+0xf800db5c>
1000dd44:	d8000115 	stw	zero,4(sp)
1000dd48:	003f8906 	br	1000db70 <__alt_data_end+0xf800db70>
1000dd4c:	00bef884 	movi	r2,-1054
1000dd50:	1485c83a 	sub	r2,r2,r18
1000dd54:	01000804 	movi	r4,32
1000dd58:	8884d83a 	srl	r2,r17,r2
1000dd5c:	81001c26 	beq	r16,r4,1000ddd0 <__divdf3+0x960>
1000dd60:	91010f84 	addi	r4,r18,1086
1000dd64:	8908983a 	sll	r4,r17,r4
1000dd68:	24c8b03a 	or	r4,r4,r19
1000dd6c:	2008c03a 	cmpne	r4,r4,zero
1000dd70:	2084b03a 	or	r2,r4,r2
1000dd74:	140001cc 	andi	r16,r2,7
1000dd78:	8000061e 	bne	r16,zero,1000dd94 <__divdf3+0x924>
1000dd7c:	000b883a 	mov	r5,zero
1000dd80:	1004d0fa 	srli	r2,r2,3
1000dd84:	a180004c 	andi	r6,r20,1
1000dd88:	0011883a 	mov	r8,zero
1000dd8c:	1426b03a 	or	r19,r2,r16
1000dd90:	003e1506 	br	1000d5e8 <__alt_data_end+0xf800d5e8>
1000dd94:	114003cc 	andi	r5,r2,15
1000dd98:	01000104 	movi	r4,4
1000dd9c:	0021883a 	mov	r16,zero
1000dda0:	293fcd1e 	bne	r5,r4,1000dcd8 <__alt_data_end+0xf800dcd8>
1000dda4:	800a927a 	slli	r5,r16,9
1000dda8:	8020977a 	slli	r16,r16,29
1000ddac:	280ad33a 	srli	r5,r5,12
1000ddb0:	003ff306 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000ddb4:	b23fd336 	bltu	r22,r8,1000dd04 <__alt_data_end+0xf800dd04>
1000ddb8:	1023883a 	mov	r17,r2
1000ddbc:	003fa906 	br	1000dc64 <__alt_data_end+0xf800dc64>
1000ddc0:	d8c00117 	ldw	r3,4(sp)
1000ddc4:	193fd636 	bltu	r3,r4,1000dd20 <__alt_data_end+0xf800dd20>
1000ddc8:	2827883a 	mov	r19,r5
1000ddcc:	003f6806 	br	1000db70 <__alt_data_end+0xf800db70>
1000ddd0:	0009883a 	mov	r4,zero
1000ddd4:	003fe406 	br	1000dd68 <__alt_data_end+0xf800dd68>
1000ddd8:	00800434 	movhi	r2,16
1000dddc:	89400234 	orhi	r5,r17,8
1000dde0:	10bfffc4 	addi	r2,r2,-1
1000dde4:	e00d883a 	mov	r6,fp
1000dde8:	288a703a 	and	r5,r5,r2
1000ddec:	003e5806 	br	1000d750 <__alt_data_end+0xf800d750>

1000ddf0 <__eqdf2>:
1000ddf0:	2804d53a 	srli	r2,r5,20
1000ddf4:	3806d53a 	srli	r3,r7,20
1000ddf8:	02000434 	movhi	r8,16
1000ddfc:	423fffc4 	addi	r8,r8,-1
1000de00:	1081ffcc 	andi	r2,r2,2047
1000de04:	0241ffc4 	movi	r9,2047
1000de08:	2a14703a 	and	r10,r5,r8
1000de0c:	18c1ffcc 	andi	r3,r3,2047
1000de10:	3a10703a 	and	r8,r7,r8
1000de14:	280ad7fa 	srli	r5,r5,31
1000de18:	380ed7fa 	srli	r7,r7,31
1000de1c:	12400f26 	beq	r2,r9,1000de5c <__eqdf2+0x6c>
1000de20:	0241ffc4 	movi	r9,2047
1000de24:	1a400326 	beq	r3,r9,1000de34 <__eqdf2+0x44>
1000de28:	10c00526 	beq	r2,r3,1000de40 <__eqdf2+0x50>
1000de2c:	00800044 	movi	r2,1
1000de30:	f800283a 	ret
1000de34:	4192b03a 	or	r9,r8,r6
1000de38:	483ffc1e 	bne	r9,zero,1000de2c <__alt_data_end+0xf800de2c>
1000de3c:	10fffb1e 	bne	r2,r3,1000de2c <__alt_data_end+0xf800de2c>
1000de40:	523ffa1e 	bne	r10,r8,1000de2c <__alt_data_end+0xf800de2c>
1000de44:	21bff91e 	bne	r4,r6,1000de2c <__alt_data_end+0xf800de2c>
1000de48:	29c00826 	beq	r5,r7,1000de6c <__eqdf2+0x7c>
1000de4c:	103ff71e 	bne	r2,zero,1000de2c <__alt_data_end+0xf800de2c>
1000de50:	5104b03a 	or	r2,r10,r4
1000de54:	1004c03a 	cmpne	r2,r2,zero
1000de58:	f800283a 	ret
1000de5c:	5112b03a 	or	r9,r10,r4
1000de60:	483fef26 	beq	r9,zero,1000de20 <__alt_data_end+0xf800de20>
1000de64:	00800044 	movi	r2,1
1000de68:	f800283a 	ret
1000de6c:	0005883a 	mov	r2,zero
1000de70:	f800283a 	ret

1000de74 <__gedf2>:
1000de74:	2804d53a 	srli	r2,r5,20
1000de78:	3806d53a 	srli	r3,r7,20
1000de7c:	02000434 	movhi	r8,16
1000de80:	423fffc4 	addi	r8,r8,-1
1000de84:	0241ffc4 	movi	r9,2047
1000de88:	1081ffcc 	andi	r2,r2,2047
1000de8c:	2a14703a 	and	r10,r5,r8
1000de90:	1a46703a 	and	r3,r3,r9
1000de94:	3a10703a 	and	r8,r7,r8
1000de98:	280ad7fa 	srli	r5,r5,31
1000de9c:	380ed7fa 	srli	r7,r7,31
1000dea0:	12400b26 	beq	r2,r9,1000ded0 <__gedf2+0x5c>
1000dea4:	1a401626 	beq	r3,r9,1000df00 <__gedf2+0x8c>
1000dea8:	10000c1e 	bne	r2,zero,1000dedc <__gedf2+0x68>
1000deac:	5112b03a 	or	r9,r10,r4
1000deb0:	4813003a 	cmpeq	r9,r9,zero
1000deb4:	4817883a 	mov	r11,r9
1000deb8:	18000c1e 	bne	r3,zero,1000deec <__gedf2+0x78>
1000debc:	4198b03a 	or	r12,r8,r6
1000dec0:	60000a1e 	bne	r12,zero,1000deec <__gedf2+0x78>
1000dec4:	48001326 	beq	r9,zero,1000df14 <__gedf2+0xa0>
1000dec8:	0005883a 	mov	r2,zero
1000decc:	f800283a 	ret
1000ded0:	5112b03a 	or	r9,r10,r4
1000ded4:	4800191e 	bne	r9,zero,1000df3c <__gedf2+0xc8>
1000ded8:	18800926 	beq	r3,r2,1000df00 <__gedf2+0x8c>
1000dedc:	18000b1e 	bne	r3,zero,1000df0c <__gedf2+0x98>
1000dee0:	4192b03a 	or	r9,r8,r6
1000dee4:	0017883a 	mov	r11,zero
1000dee8:	48000a26 	beq	r9,zero,1000df14 <__gedf2+0xa0>
1000deec:	39c03fcc 	andi	r7,r7,255
1000def0:	58000726 	beq	r11,zero,1000df10 <__gedf2+0x9c>
1000def4:	3800081e 	bne	r7,zero,1000df18 <__gedf2+0xa4>
1000def8:	00bfffc4 	movi	r2,-1
1000defc:	f800283a 	ret
1000df00:	4192b03a 	or	r9,r8,r6
1000df04:	48000d1e 	bne	r9,zero,1000df3c <__gedf2+0xc8>
1000df08:	103fe826 	beq	r2,zero,1000deac <__alt_data_end+0xf800deac>
1000df0c:	39c03fcc 	andi	r7,r7,255
1000df10:	29c00326 	beq	r5,r7,1000df20 <__gedf2+0xac>
1000df14:	283ff81e 	bne	r5,zero,1000def8 <__alt_data_end+0xf800def8>
1000df18:	00800044 	movi	r2,1
1000df1c:	f800283a 	ret
1000df20:	18bffc16 	blt	r3,r2,1000df14 <__alt_data_end+0xf800df14>
1000df24:	10c00316 	blt	r2,r3,1000df34 <__gedf2+0xc0>
1000df28:	42bffa36 	bltu	r8,r10,1000df14 <__alt_data_end+0xf800df14>
1000df2c:	52000526 	beq	r10,r8,1000df44 <__gedf2+0xd0>
1000df30:	523fe52e 	bgeu	r10,r8,1000dec8 <__alt_data_end+0xf800dec8>
1000df34:	283ff026 	beq	r5,zero,1000def8 <__alt_data_end+0xf800def8>
1000df38:	003ff706 	br	1000df18 <__alt_data_end+0xf800df18>
1000df3c:	00bfff84 	movi	r2,-2
1000df40:	f800283a 	ret
1000df44:	313ff336 	bltu	r6,r4,1000df14 <__alt_data_end+0xf800df14>
1000df48:	21bfdf2e 	bgeu	r4,r6,1000dec8 <__alt_data_end+0xf800dec8>
1000df4c:	283fea26 	beq	r5,zero,1000def8 <__alt_data_end+0xf800def8>
1000df50:	003ff106 	br	1000df18 <__alt_data_end+0xf800df18>

1000df54 <__ledf2>:
1000df54:	2804d53a 	srli	r2,r5,20
1000df58:	3810d53a 	srli	r8,r7,20
1000df5c:	00c00434 	movhi	r3,16
1000df60:	18ffffc4 	addi	r3,r3,-1
1000df64:	0241ffc4 	movi	r9,2047
1000df68:	1081ffcc 	andi	r2,r2,2047
1000df6c:	28d4703a 	and	r10,r5,r3
1000df70:	4250703a 	and	r8,r8,r9
1000df74:	38c6703a 	and	r3,r7,r3
1000df78:	280ad7fa 	srli	r5,r5,31
1000df7c:	380ed7fa 	srli	r7,r7,31
1000df80:	12400b26 	beq	r2,r9,1000dfb0 <__ledf2+0x5c>
1000df84:	42401926 	beq	r8,r9,1000dfec <__ledf2+0x98>
1000df88:	10000c1e 	bne	r2,zero,1000dfbc <__ledf2+0x68>
1000df8c:	5112b03a 	or	r9,r10,r4
1000df90:	4813003a 	cmpeq	r9,r9,zero
1000df94:	4817883a 	mov	r11,r9
1000df98:	40000f26 	beq	r8,zero,1000dfd8 <__ledf2+0x84>
1000df9c:	39c03fcc 	andi	r7,r7,255
1000dfa0:	58001826 	beq	r11,zero,1000e004 <__ledf2+0xb0>
1000dfa4:	38000a1e 	bne	r7,zero,1000dfd0 <__ledf2+0x7c>
1000dfa8:	00bfffc4 	movi	r2,-1
1000dfac:	f800283a 	ret
1000dfb0:	5112b03a 	or	r9,r10,r4
1000dfb4:	48000f1e 	bne	r9,zero,1000dff4 <__ledf2+0xa0>
1000dfb8:	40800c26 	beq	r8,r2,1000dfec <__ledf2+0x98>
1000dfbc:	4000101e 	bne	r8,zero,1000e000 <__ledf2+0xac>
1000dfc0:	1992b03a 	or	r9,r3,r6
1000dfc4:	0017883a 	mov	r11,zero
1000dfc8:	483ff41e 	bne	r9,zero,1000df9c <__alt_data_end+0xf800df9c>
1000dfcc:	283ff61e 	bne	r5,zero,1000dfa8 <__alt_data_end+0xf800dfa8>
1000dfd0:	00800044 	movi	r2,1
1000dfd4:	f800283a 	ret
1000dfd8:	1998b03a 	or	r12,r3,r6
1000dfdc:	603fef1e 	bne	r12,zero,1000df9c <__alt_data_end+0xf800df9c>
1000dfe0:	483ffa26 	beq	r9,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000dfe4:	0005883a 	mov	r2,zero
1000dfe8:	f800283a 	ret
1000dfec:	1992b03a 	or	r9,r3,r6
1000dff0:	48000226 	beq	r9,zero,1000dffc <__ledf2+0xa8>
1000dff4:	00800084 	movi	r2,2
1000dff8:	f800283a 	ret
1000dffc:	103fe326 	beq	r2,zero,1000df8c <__alt_data_end+0xf800df8c>
1000e000:	39c03fcc 	andi	r7,r7,255
1000e004:	29fff11e 	bne	r5,r7,1000dfcc <__alt_data_end+0xf800dfcc>
1000e008:	40bff016 	blt	r8,r2,1000dfcc <__alt_data_end+0xf800dfcc>
1000e00c:	12000316 	blt	r2,r8,1000e01c <__ledf2+0xc8>
1000e010:	1abfee36 	bltu	r3,r10,1000dfcc <__alt_data_end+0xf800dfcc>
1000e014:	50c00326 	beq	r10,r3,1000e024 <__ledf2+0xd0>
1000e018:	50fff22e 	bgeu	r10,r3,1000dfe4 <__alt_data_end+0xf800dfe4>
1000e01c:	283fe226 	beq	r5,zero,1000dfa8 <__alt_data_end+0xf800dfa8>
1000e020:	003feb06 	br	1000dfd0 <__alt_data_end+0xf800dfd0>
1000e024:	313fe936 	bltu	r6,r4,1000dfcc <__alt_data_end+0xf800dfcc>
1000e028:	21bfee2e 	bgeu	r4,r6,1000dfe4 <__alt_data_end+0xf800dfe4>
1000e02c:	283fde26 	beq	r5,zero,1000dfa8 <__alt_data_end+0xf800dfa8>
1000e030:	003fe706 	br	1000dfd0 <__alt_data_end+0xf800dfd0>

1000e034 <__muldf3>:
1000e034:	deffee04 	addi	sp,sp,-72
1000e038:	dd000c15 	stw	r20,48(sp)
1000e03c:	2828d53a 	srli	r20,r5,20
1000e040:	dd400d15 	stw	r21,52(sp)
1000e044:	282ad7fa 	srli	r21,r5,31
1000e048:	dc000815 	stw	r16,32(sp)
1000e04c:	04000434 	movhi	r16,16
1000e050:	ddc00f15 	stw	r23,60(sp)
1000e054:	dcc00b15 	stw	r19,44(sp)
1000e058:	dc800a15 	stw	r18,40(sp)
1000e05c:	843fffc4 	addi	r16,r16,-1
1000e060:	dfc01115 	stw	ra,68(sp)
1000e064:	df001015 	stw	fp,64(sp)
1000e068:	dd800e15 	stw	r22,56(sp)
1000e06c:	dc400915 	stw	r17,36(sp)
1000e070:	a501ffcc 	andi	r20,r20,2047
1000e074:	2025883a 	mov	r18,r4
1000e078:	202f883a 	mov	r23,r4
1000e07c:	2c20703a 	and	r16,r5,r16
1000e080:	a827883a 	mov	r19,r21
1000e084:	aa403fcc 	andi	r9,r21,255
1000e088:	a0005926 	beq	r20,zero,1000e1f0 <__muldf3+0x1bc>
1000e08c:	0081ffc4 	movi	r2,2047
1000e090:	a0803426 	beq	r20,r2,1000e164 <__muldf3+0x130>
1000e094:	84000434 	orhi	r16,r16,16
1000e098:	2004d77a 	srli	r2,r4,29
1000e09c:	802090fa 	slli	r16,r16,3
1000e0a0:	202e90fa 	slli	r23,r4,3
1000e0a4:	a53f0044 	addi	r20,r20,-1023
1000e0a8:	80a0b03a 	or	r16,r16,r2
1000e0ac:	000b883a 	mov	r5,zero
1000e0b0:	0039883a 	mov	fp,zero
1000e0b4:	3806d53a 	srli	r3,r7,20
1000e0b8:	382cd7fa 	srli	r22,r7,31
1000e0bc:	00800434 	movhi	r2,16
1000e0c0:	10bfffc4 	addi	r2,r2,-1
1000e0c4:	18c1ffcc 	andi	r3,r3,2047
1000e0c8:	3025883a 	mov	r18,r6
1000e0cc:	38a2703a 	and	r17,r7,r2
1000e0d0:	b2803fcc 	andi	r10,r22,255
1000e0d4:	18006426 	beq	r3,zero,1000e268 <__muldf3+0x234>
1000e0d8:	0081ffc4 	movi	r2,2047
1000e0dc:	18805c26 	beq	r3,r2,1000e250 <__muldf3+0x21c>
1000e0e0:	8c400434 	orhi	r17,r17,16
1000e0e4:	3004d77a 	srli	r2,r6,29
1000e0e8:	882290fa 	slli	r17,r17,3
1000e0ec:	302490fa 	slli	r18,r6,3
1000e0f0:	18ff0044 	addi	r3,r3,-1023
1000e0f4:	88a2b03a 	or	r17,r17,r2
1000e0f8:	000f883a 	mov	r7,zero
1000e0fc:	394ab03a 	or	r5,r7,r5
1000e100:	280a90ba 	slli	r5,r5,2
1000e104:	00840074 	movhi	r2,4097
1000e108:	10b84904 	addi	r2,r2,-7900
1000e10c:	288b883a 	add	r5,r5,r2
1000e110:	28800017 	ldw	r2,0(r5)
1000e114:	a0c7883a 	add	r3,r20,r3
1000e118:	b54cf03a 	xor	r6,r22,r21
1000e11c:	1a000044 	addi	r8,r3,1
1000e120:	1000683a 	jmp	r2
1000e124:	1000e368 	cmpgeui	zero,r2,909
1000e128:	1000e354 	ori	zero,r2,909
1000e12c:	1000e354 	ori	zero,r2,909
1000e130:	1000e340 	call	11000e34 <_gp+0xfe5ef4>
1000e134:	1000e180 	call	11000e18 <_gp+0xfe5ed8>
1000e138:	1000e180 	call	11000e18 <_gp+0xfe5ed8>
1000e13c:	1000e328 	cmpgeui	zero,r2,908
1000e140:	1000e340 	call	11000e34 <_gp+0xfe5ef4>
1000e144:	1000e180 	call	11000e18 <_gp+0xfe5ed8>
1000e148:	1000e328 	cmpgeui	zero,r2,908
1000e14c:	1000e180 	call	11000e18 <_gp+0xfe5ed8>
1000e150:	1000e340 	call	11000e34 <_gp+0xfe5ef4>
1000e154:	1000e184 	addi	zero,r2,902
1000e158:	1000e184 	addi	zero,r2,902
1000e15c:	1000e184 	addi	zero,r2,902
1000e160:	1000e6a4 	muli	zero,r2,922
1000e164:	8104b03a 	or	r2,r16,r4
1000e168:	10006c1e 	bne	r2,zero,1000e31c <__muldf3+0x2e8>
1000e16c:	01400204 	movi	r5,8
1000e170:	0021883a 	mov	r16,zero
1000e174:	002f883a 	mov	r23,zero
1000e178:	07000084 	movi	fp,2
1000e17c:	003fcd06 	br	1000e0b4 <__alt_data_end+0xf800e0b4>
1000e180:	3013883a 	mov	r9,r6
1000e184:	00800084 	movi	r2,2
1000e188:	e080501e 	bne	fp,r2,1000e2cc <__muldf3+0x298>
1000e18c:	4cc0004c 	andi	r19,r9,1
1000e190:	0101ffc4 	movi	r4,2047
1000e194:	0021883a 	mov	r16,zero
1000e198:	002f883a 	mov	r23,zero
1000e19c:	2008953a 	slli	r4,r4,20
1000e1a0:	98c03fcc 	andi	r3,r19,255
1000e1a4:	04400434 	movhi	r17,16
1000e1a8:	8c7fffc4 	addi	r17,r17,-1
1000e1ac:	180697fa 	slli	r3,r3,31
1000e1b0:	8460703a 	and	r16,r16,r17
1000e1b4:	8120b03a 	or	r16,r16,r4
1000e1b8:	80c6b03a 	or	r3,r16,r3
1000e1bc:	b805883a 	mov	r2,r23
1000e1c0:	dfc01117 	ldw	ra,68(sp)
1000e1c4:	df001017 	ldw	fp,64(sp)
1000e1c8:	ddc00f17 	ldw	r23,60(sp)
1000e1cc:	dd800e17 	ldw	r22,56(sp)
1000e1d0:	dd400d17 	ldw	r21,52(sp)
1000e1d4:	dd000c17 	ldw	r20,48(sp)
1000e1d8:	dcc00b17 	ldw	r19,44(sp)
1000e1dc:	dc800a17 	ldw	r18,40(sp)
1000e1e0:	dc400917 	ldw	r17,36(sp)
1000e1e4:	dc000817 	ldw	r16,32(sp)
1000e1e8:	dec01204 	addi	sp,sp,72
1000e1ec:	f800283a 	ret
1000e1f0:	8104b03a 	or	r2,r16,r4
1000e1f4:	10004426 	beq	r2,zero,1000e308 <__muldf3+0x2d4>
1000e1f8:	80014b26 	beq	r16,zero,1000e728 <__muldf3+0x6f4>
1000e1fc:	8009883a 	mov	r4,r16
1000e200:	d9800715 	stw	r6,28(sp)
1000e204:	d9c00215 	stw	r7,8(sp)
1000e208:	da400415 	stw	r9,16(sp)
1000e20c:	0003ecc0 	call	10003ecc <__clzsi2>
1000e210:	d9800717 	ldw	r6,28(sp)
1000e214:	d9c00217 	ldw	r7,8(sp)
1000e218:	da400417 	ldw	r9,16(sp)
1000e21c:	1007883a 	mov	r3,r2
1000e220:	01000a04 	movi	r4,40
1000e224:	1dfffe04 	addi	r23,r3,-8
1000e228:	20c9c83a 	sub	r4,r4,r3
1000e22c:	85e0983a 	sll	r16,r16,r23
1000e230:	9108d83a 	srl	r4,r18,r4
1000e234:	95ee983a 	sll	r23,r18,r23
1000e238:	2420b03a 	or	r16,r4,r16
1000e23c:	053f0344 	movi	r20,-1011
1000e240:	a0e9c83a 	sub	r20,r20,r3
1000e244:	000b883a 	mov	r5,zero
1000e248:	0039883a 	mov	fp,zero
1000e24c:	003f9906 	br	1000e0b4 <__alt_data_end+0xf800e0b4>
1000e250:	8984b03a 	or	r2,r17,r6
1000e254:	10002a1e 	bne	r2,zero,1000e300 <__muldf3+0x2cc>
1000e258:	0023883a 	mov	r17,zero
1000e25c:	0025883a 	mov	r18,zero
1000e260:	01c00084 	movi	r7,2
1000e264:	003fa506 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e268:	8984b03a 	or	r2,r17,r6
1000e26c:	10002026 	beq	r2,zero,1000e2f0 <__muldf3+0x2bc>
1000e270:	88011c26 	beq	r17,zero,1000e6e4 <__muldf3+0x6b0>
1000e274:	8809883a 	mov	r4,r17
1000e278:	d9400215 	stw	r5,8(sp)
1000e27c:	d9800715 	stw	r6,28(sp)
1000e280:	da400415 	stw	r9,16(sp)
1000e284:	da800315 	stw	r10,12(sp)
1000e288:	0003ecc0 	call	10003ecc <__clzsi2>
1000e28c:	d9400217 	ldw	r5,8(sp)
1000e290:	d9800717 	ldw	r6,28(sp)
1000e294:	da400417 	ldw	r9,16(sp)
1000e298:	da800317 	ldw	r10,12(sp)
1000e29c:	1007883a 	mov	r3,r2
1000e2a0:	01000a04 	movi	r4,40
1000e2a4:	1cbffe04 	addi	r18,r3,-8
1000e2a8:	20c9c83a 	sub	r4,r4,r3
1000e2ac:	8ca2983a 	sll	r17,r17,r18
1000e2b0:	3108d83a 	srl	r4,r6,r4
1000e2b4:	34a4983a 	sll	r18,r6,r18
1000e2b8:	2462b03a 	or	r17,r4,r17
1000e2bc:	00bf0344 	movi	r2,-1011
1000e2c0:	10c7c83a 	sub	r3,r2,r3
1000e2c4:	000f883a 	mov	r7,zero
1000e2c8:	003f8c06 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e2cc:	008000c4 	movi	r2,3
1000e2d0:	e0816d26 	beq	fp,r2,1000e888 <__muldf3+0x854>
1000e2d4:	00800044 	movi	r2,1
1000e2d8:	e081321e 	bne	fp,r2,1000e7a4 <__muldf3+0x770>
1000e2dc:	48a6703a 	and	r19,r9,r2
1000e2e0:	0009883a 	mov	r4,zero
1000e2e4:	0021883a 	mov	r16,zero
1000e2e8:	002f883a 	mov	r23,zero
1000e2ec:	003fab06 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e2f0:	0023883a 	mov	r17,zero
1000e2f4:	0025883a 	mov	r18,zero
1000e2f8:	01c00044 	movi	r7,1
1000e2fc:	003f7f06 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e300:	01c000c4 	movi	r7,3
1000e304:	003f7d06 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e308:	01400104 	movi	r5,4
1000e30c:	0021883a 	mov	r16,zero
1000e310:	002f883a 	mov	r23,zero
1000e314:	07000044 	movi	fp,1
1000e318:	003f6606 	br	1000e0b4 <__alt_data_end+0xf800e0b4>
1000e31c:	01400304 	movi	r5,12
1000e320:	070000c4 	movi	fp,3
1000e324:	003f6306 	br	1000e0b4 <__alt_data_end+0xf800e0b4>
1000e328:	04000434 	movhi	r16,16
1000e32c:	0027883a 	mov	r19,zero
1000e330:	843fffc4 	addi	r16,r16,-1
1000e334:	05ffffc4 	movi	r23,-1
1000e338:	0101ffc4 	movi	r4,2047
1000e33c:	003f9706 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e340:	8821883a 	mov	r16,r17
1000e344:	902f883a 	mov	r23,r18
1000e348:	5013883a 	mov	r9,r10
1000e34c:	3839883a 	mov	fp,r7
1000e350:	003f8c06 	br	1000e184 <__alt_data_end+0xf800e184>
1000e354:	8821883a 	mov	r16,r17
1000e358:	902f883a 	mov	r23,r18
1000e35c:	3013883a 	mov	r9,r6
1000e360:	3839883a 	mov	fp,r7
1000e364:	003f8706 	br	1000e184 <__alt_data_end+0xf800e184>
1000e368:	b82ad43a 	srli	r21,r23,16
1000e36c:	9038d43a 	srli	fp,r18,16
1000e370:	bdffffcc 	andi	r23,r23,65535
1000e374:	94bfffcc 	andi	r18,r18,65535
1000e378:	9009883a 	mov	r4,r18
1000e37c:	b80b883a 	mov	r5,r23
1000e380:	d8c00515 	stw	r3,20(sp)
1000e384:	d9800715 	stw	r6,28(sp)
1000e388:	da000615 	stw	r8,24(sp)
1000e38c:	0002be00 	call	10002be0 <__mulsi3>
1000e390:	9009883a 	mov	r4,r18
1000e394:	a80b883a 	mov	r5,r21
1000e398:	1029883a 	mov	r20,r2
1000e39c:	0002be00 	call	10002be0 <__mulsi3>
1000e3a0:	e009883a 	mov	r4,fp
1000e3a4:	a80b883a 	mov	r5,r21
1000e3a8:	102d883a 	mov	r22,r2
1000e3ac:	0002be00 	call	10002be0 <__mulsi3>
1000e3b0:	e009883a 	mov	r4,fp
1000e3b4:	b80b883a 	mov	r5,r23
1000e3b8:	1027883a 	mov	r19,r2
1000e3bc:	0002be00 	call	10002be0 <__mulsi3>
1000e3c0:	a008d43a 	srli	r4,r20,16
1000e3c4:	b085883a 	add	r2,r22,r2
1000e3c8:	d8c00517 	ldw	r3,20(sp)
1000e3cc:	110f883a 	add	r7,r2,r4
1000e3d0:	d9800717 	ldw	r6,28(sp)
1000e3d4:	da000617 	ldw	r8,24(sp)
1000e3d8:	3d80022e 	bgeu	r7,r22,1000e3e4 <__muldf3+0x3b0>
1000e3dc:	00800074 	movhi	r2,1
1000e3e0:	98a7883a 	add	r19,r19,r2
1000e3e4:	3804943a 	slli	r2,r7,16
1000e3e8:	380ed43a 	srli	r7,r7,16
1000e3ec:	882cd43a 	srli	r22,r17,16
1000e3f0:	a53fffcc 	andi	r20,r20,65535
1000e3f4:	8c7fffcc 	andi	r17,r17,65535
1000e3f8:	1529883a 	add	r20,r2,r20
1000e3fc:	8809883a 	mov	r4,r17
1000e400:	b80b883a 	mov	r5,r23
1000e404:	d8c00515 	stw	r3,20(sp)
1000e408:	d9800715 	stw	r6,28(sp)
1000e40c:	da000615 	stw	r8,24(sp)
1000e410:	d9c00015 	stw	r7,0(sp)
1000e414:	dd000115 	stw	r20,4(sp)
1000e418:	0002be00 	call	10002be0 <__mulsi3>
1000e41c:	a80b883a 	mov	r5,r21
1000e420:	8809883a 	mov	r4,r17
1000e424:	d8800415 	stw	r2,16(sp)
1000e428:	0002be00 	call	10002be0 <__mulsi3>
1000e42c:	a80b883a 	mov	r5,r21
1000e430:	b009883a 	mov	r4,r22
1000e434:	1029883a 	mov	r20,r2
1000e438:	0002be00 	call	10002be0 <__mulsi3>
1000e43c:	b009883a 	mov	r4,r22
1000e440:	b80b883a 	mov	r5,r23
1000e444:	102b883a 	mov	r21,r2
1000e448:	0002be00 	call	10002be0 <__mulsi3>
1000e44c:	da400417 	ldw	r9,16(sp)
1000e450:	a085883a 	add	r2,r20,r2
1000e454:	d8c00517 	ldw	r3,20(sp)
1000e458:	4808d43a 	srli	r4,r9,16
1000e45c:	d9800717 	ldw	r6,28(sp)
1000e460:	da000617 	ldw	r8,24(sp)
1000e464:	1109883a 	add	r4,r2,r4
1000e468:	2500022e 	bgeu	r4,r20,1000e474 <__muldf3+0x440>
1000e46c:	00800074 	movhi	r2,1
1000e470:	a8ab883a 	add	r21,r21,r2
1000e474:	200e943a 	slli	r7,r4,16
1000e478:	2004d43a 	srli	r2,r4,16
1000e47c:	802ed43a 	srli	r23,r16,16
1000e480:	843fffcc 	andi	r16,r16,65535
1000e484:	4d3fffcc 	andi	r20,r9,65535
1000e488:	9009883a 	mov	r4,r18
1000e48c:	800b883a 	mov	r5,r16
1000e490:	3d29883a 	add	r20,r7,r20
1000e494:	d8c00515 	stw	r3,20(sp)
1000e498:	d9800715 	stw	r6,28(sp)
1000e49c:	da000615 	stw	r8,24(sp)
1000e4a0:	a8ab883a 	add	r21,r21,r2
1000e4a4:	0002be00 	call	10002be0 <__mulsi3>
1000e4a8:	9009883a 	mov	r4,r18
1000e4ac:	b80b883a 	mov	r5,r23
1000e4b0:	d8800315 	stw	r2,12(sp)
1000e4b4:	0002be00 	call	10002be0 <__mulsi3>
1000e4b8:	e009883a 	mov	r4,fp
1000e4bc:	b80b883a 	mov	r5,r23
1000e4c0:	1025883a 	mov	r18,r2
1000e4c4:	0002be00 	call	10002be0 <__mulsi3>
1000e4c8:	e009883a 	mov	r4,fp
1000e4cc:	800b883a 	mov	r5,r16
1000e4d0:	d8800215 	stw	r2,8(sp)
1000e4d4:	0002be00 	call	10002be0 <__mulsi3>
1000e4d8:	da800317 	ldw	r10,12(sp)
1000e4dc:	d9400017 	ldw	r5,0(sp)
1000e4e0:	9085883a 	add	r2,r18,r2
1000e4e4:	5008d43a 	srli	r4,r10,16
1000e4e8:	a153883a 	add	r9,r20,r5
1000e4ec:	d8c00517 	ldw	r3,20(sp)
1000e4f0:	1109883a 	add	r4,r2,r4
1000e4f4:	d9800717 	ldw	r6,28(sp)
1000e4f8:	da000617 	ldw	r8,24(sp)
1000e4fc:	dac00217 	ldw	r11,8(sp)
1000e500:	2480022e 	bgeu	r4,r18,1000e50c <__muldf3+0x4d8>
1000e504:	00800074 	movhi	r2,1
1000e508:	5897883a 	add	r11,r11,r2
1000e50c:	200e943a 	slli	r7,r4,16
1000e510:	2038d43a 	srli	fp,r4,16
1000e514:	52bfffcc 	andi	r10,r10,65535
1000e518:	3a8f883a 	add	r7,r7,r10
1000e51c:	8809883a 	mov	r4,r17
1000e520:	800b883a 	mov	r5,r16
1000e524:	d8c00515 	stw	r3,20(sp)
1000e528:	d9800715 	stw	r6,28(sp)
1000e52c:	d9c00215 	stw	r7,8(sp)
1000e530:	da000615 	stw	r8,24(sp)
1000e534:	da400415 	stw	r9,16(sp)
1000e538:	5f39883a 	add	fp,r11,fp
1000e53c:	0002be00 	call	10002be0 <__mulsi3>
1000e540:	8809883a 	mov	r4,r17
1000e544:	b80b883a 	mov	r5,r23
1000e548:	1025883a 	mov	r18,r2
1000e54c:	0002be00 	call	10002be0 <__mulsi3>
1000e550:	b009883a 	mov	r4,r22
1000e554:	b80b883a 	mov	r5,r23
1000e558:	d8800315 	stw	r2,12(sp)
1000e55c:	0002be00 	call	10002be0 <__mulsi3>
1000e560:	b009883a 	mov	r4,r22
1000e564:	800b883a 	mov	r5,r16
1000e568:	1023883a 	mov	r17,r2
1000e56c:	0002be00 	call	10002be0 <__mulsi3>
1000e570:	da800317 	ldw	r10,12(sp)
1000e574:	9008d43a 	srli	r4,r18,16
1000e578:	d8c00517 	ldw	r3,20(sp)
1000e57c:	5085883a 	add	r2,r10,r2
1000e580:	1109883a 	add	r4,r2,r4
1000e584:	d9800717 	ldw	r6,28(sp)
1000e588:	d9c00217 	ldw	r7,8(sp)
1000e58c:	da000617 	ldw	r8,24(sp)
1000e590:	da400417 	ldw	r9,16(sp)
1000e594:	2280022e 	bgeu	r4,r10,1000e5a0 <__muldf3+0x56c>
1000e598:	00800074 	movhi	r2,1
1000e59c:	88a3883a 	add	r17,r17,r2
1000e5a0:	2004943a 	slli	r2,r4,16
1000e5a4:	94bfffcc 	andi	r18,r18,65535
1000e5a8:	4ce7883a 	add	r19,r9,r19
1000e5ac:	14a5883a 	add	r18,r2,r18
1000e5b0:	9d29803a 	cmpltu	r20,r19,r20
1000e5b4:	9565883a 	add	r18,r18,r21
1000e5b8:	9505883a 	add	r2,r18,r20
1000e5bc:	99e7883a 	add	r19,r19,r7
1000e5c0:	99cf803a 	cmpltu	r7,r19,r7
1000e5c4:	e08b883a 	add	r5,fp,r2
1000e5c8:	2008d43a 	srli	r4,r4,16
1000e5cc:	29ef883a 	add	r23,r5,r7
1000e5d0:	1529803a 	cmpltu	r20,r2,r20
1000e5d4:	956b803a 	cmpltu	r21,r18,r21
1000e5d8:	b9cf803a 	cmpltu	r7,r23,r7
1000e5dc:	a564b03a 	or	r18,r20,r21
1000e5e0:	2f39803a 	cmpltu	fp,r5,fp
1000e5e4:	9125883a 	add	r18,r18,r4
1000e5e8:	3f38b03a 	or	fp,r7,fp
1000e5ec:	9725883a 	add	r18,r18,fp
1000e5f0:	9804927a 	slli	r2,r19,9
1000e5f4:	9463883a 	add	r17,r18,r17
1000e5f8:	d9000117 	ldw	r4,4(sp)
1000e5fc:	b820d5fa 	srli	r16,r23,23
1000e600:	8822927a 	slli	r17,r17,9
1000e604:	9826d5fa 	srli	r19,r19,23
1000e608:	1104b03a 	or	r2,r2,r4
1000e60c:	b82e927a 	slli	r23,r23,9
1000e610:	1004c03a 	cmpne	r2,r2,zero
1000e614:	8c20b03a 	or	r16,r17,r16
1000e618:	14e6b03a 	or	r19,r2,r19
1000e61c:	8080402c 	andhi	r2,r16,256
1000e620:	9deeb03a 	or	r23,r19,r23
1000e624:	10000726 	beq	r2,zero,1000e644 <__muldf3+0x610>
1000e628:	b804d07a 	srli	r2,r23,1
1000e62c:	800697fa 	slli	r3,r16,31
1000e630:	bdc0004c 	andi	r23,r23,1
1000e634:	8020d07a 	srli	r16,r16,1
1000e638:	b8aeb03a 	or	r23,r23,r2
1000e63c:	b8eeb03a 	or	r23,r23,r3
1000e640:	4007883a 	mov	r3,r8
1000e644:	1900ffc4 	addi	r4,r3,1023
1000e648:	01004d0e 	bge	zero,r4,1000e780 <__muldf3+0x74c>
1000e64c:	b88001cc 	andi	r2,r23,7
1000e650:	10000726 	beq	r2,zero,1000e670 <__muldf3+0x63c>
1000e654:	b94003cc 	andi	r5,r23,15
1000e658:	00800104 	movi	r2,4
1000e65c:	28800426 	beq	r5,r2,1000e670 <__muldf3+0x63c>
1000e660:	b885883a 	add	r2,r23,r2
1000e664:	15ef803a 	cmpltu	r23,r2,r23
1000e668:	85e1883a 	add	r16,r16,r23
1000e66c:	102f883a 	mov	r23,r2
1000e670:	8080402c 	andhi	r2,r16,256
1000e674:	10000426 	beq	r2,zero,1000e688 <__muldf3+0x654>
1000e678:	00bfc034 	movhi	r2,65280
1000e67c:	10bfffc4 	addi	r2,r2,-1
1000e680:	19010004 	addi	r4,r3,1024
1000e684:	80a0703a 	and	r16,r16,r2
1000e688:	0081ff84 	movi	r2,2046
1000e68c:	1100340e 	bge	r2,r4,1000e760 <__muldf3+0x72c>
1000e690:	34c0004c 	andi	r19,r6,1
1000e694:	0101ffc4 	movi	r4,2047
1000e698:	0021883a 	mov	r16,zero
1000e69c:	002f883a 	mov	r23,zero
1000e6a0:	003ebe06 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e6a4:	8080022c 	andhi	r2,r16,8
1000e6a8:	10000926 	beq	r2,zero,1000e6d0 <__muldf3+0x69c>
1000e6ac:	8880022c 	andhi	r2,r17,8
1000e6b0:	1000071e 	bne	r2,zero,1000e6d0 <__muldf3+0x69c>
1000e6b4:	00800434 	movhi	r2,16
1000e6b8:	8c000234 	orhi	r16,r17,8
1000e6bc:	10bfffc4 	addi	r2,r2,-1
1000e6c0:	b027883a 	mov	r19,r22
1000e6c4:	80a0703a 	and	r16,r16,r2
1000e6c8:	902f883a 	mov	r23,r18
1000e6cc:	003f1a06 	br	1000e338 <__alt_data_end+0xf800e338>
1000e6d0:	00800434 	movhi	r2,16
1000e6d4:	84000234 	orhi	r16,r16,8
1000e6d8:	10bfffc4 	addi	r2,r2,-1
1000e6dc:	80a0703a 	and	r16,r16,r2
1000e6e0:	003f1506 	br	1000e338 <__alt_data_end+0xf800e338>
1000e6e4:	3009883a 	mov	r4,r6
1000e6e8:	d9400215 	stw	r5,8(sp)
1000e6ec:	d9800715 	stw	r6,28(sp)
1000e6f0:	da400415 	stw	r9,16(sp)
1000e6f4:	da800315 	stw	r10,12(sp)
1000e6f8:	0003ecc0 	call	10003ecc <__clzsi2>
1000e6fc:	10c00804 	addi	r3,r2,32
1000e700:	010009c4 	movi	r4,39
1000e704:	d9400217 	ldw	r5,8(sp)
1000e708:	d9800717 	ldw	r6,28(sp)
1000e70c:	da400417 	ldw	r9,16(sp)
1000e710:	da800317 	ldw	r10,12(sp)
1000e714:	20fee20e 	bge	r4,r3,1000e2a0 <__alt_data_end+0xf800e2a0>
1000e718:	147ffe04 	addi	r17,r2,-8
1000e71c:	9462983a 	sll	r17,r18,r17
1000e720:	0025883a 	mov	r18,zero
1000e724:	003ee506 	br	1000e2bc <__alt_data_end+0xf800e2bc>
1000e728:	d9800715 	stw	r6,28(sp)
1000e72c:	d9c00215 	stw	r7,8(sp)
1000e730:	da400415 	stw	r9,16(sp)
1000e734:	0003ecc0 	call	10003ecc <__clzsi2>
1000e738:	10c00804 	addi	r3,r2,32
1000e73c:	010009c4 	movi	r4,39
1000e740:	d9800717 	ldw	r6,28(sp)
1000e744:	d9c00217 	ldw	r7,8(sp)
1000e748:	da400417 	ldw	r9,16(sp)
1000e74c:	20feb40e 	bge	r4,r3,1000e220 <__alt_data_end+0xf800e220>
1000e750:	143ffe04 	addi	r16,r2,-8
1000e754:	9420983a 	sll	r16,r18,r16
1000e758:	002f883a 	mov	r23,zero
1000e75c:	003eb706 	br	1000e23c <__alt_data_end+0xf800e23c>
1000e760:	8004977a 	slli	r2,r16,29
1000e764:	b82ed0fa 	srli	r23,r23,3
1000e768:	8020927a 	slli	r16,r16,9
1000e76c:	2101ffcc 	andi	r4,r4,2047
1000e770:	15eeb03a 	or	r23,r2,r23
1000e774:	8020d33a 	srli	r16,r16,12
1000e778:	34c0004c 	andi	r19,r6,1
1000e77c:	003e8706 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e780:	00bf0084 	movi	r2,-1022
1000e784:	10c5c83a 	sub	r2,r2,r3
1000e788:	01000e04 	movi	r4,56
1000e78c:	2080080e 	bge	r4,r2,1000e7b0 <__muldf3+0x77c>
1000e790:	34c0004c 	andi	r19,r6,1
1000e794:	0009883a 	mov	r4,zero
1000e798:	0021883a 	mov	r16,zero
1000e79c:	002f883a 	mov	r23,zero
1000e7a0:	003e7e06 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e7a4:	4007883a 	mov	r3,r8
1000e7a8:	480d883a 	mov	r6,r9
1000e7ac:	003fa506 	br	1000e644 <__alt_data_end+0xf800e644>
1000e7b0:	010007c4 	movi	r4,31
1000e7b4:	20801816 	blt	r4,r2,1000e818 <__muldf3+0x7e4>
1000e7b8:	18c10784 	addi	r3,r3,1054
1000e7bc:	80c8983a 	sll	r4,r16,r3
1000e7c0:	b88ad83a 	srl	r5,r23,r2
1000e7c4:	b8c6983a 	sll	r3,r23,r3
1000e7c8:	80a0d83a 	srl	r16,r16,r2
1000e7cc:	2908b03a 	or	r4,r5,r4
1000e7d0:	1804c03a 	cmpne	r2,r3,zero
1000e7d4:	2088b03a 	or	r4,r4,r2
1000e7d8:	208001cc 	andi	r2,r4,7
1000e7dc:	10000726 	beq	r2,zero,1000e7fc <__muldf3+0x7c8>
1000e7e0:	20c003cc 	andi	r3,r4,15
1000e7e4:	00800104 	movi	r2,4
1000e7e8:	18800426 	beq	r3,r2,1000e7fc <__muldf3+0x7c8>
1000e7ec:	20c00104 	addi	r3,r4,4
1000e7f0:	1905803a 	cmpltu	r2,r3,r4
1000e7f4:	80a1883a 	add	r16,r16,r2
1000e7f8:	1809883a 	mov	r4,r3
1000e7fc:	8080202c 	andhi	r2,r16,128
1000e800:	10001b26 	beq	r2,zero,1000e870 <__muldf3+0x83c>
1000e804:	34c0004c 	andi	r19,r6,1
1000e808:	01000044 	movi	r4,1
1000e80c:	0021883a 	mov	r16,zero
1000e810:	002f883a 	mov	r23,zero
1000e814:	003e6106 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e818:	013ef884 	movi	r4,-1054
1000e81c:	20c9c83a 	sub	r4,r4,r3
1000e820:	01400804 	movi	r5,32
1000e824:	8108d83a 	srl	r4,r16,r4
1000e828:	11401526 	beq	r2,r5,1000e880 <__muldf3+0x84c>
1000e82c:	18c10f84 	addi	r3,r3,1086
1000e830:	80e0983a 	sll	r16,r16,r3
1000e834:	85eeb03a 	or	r23,r16,r23
1000e838:	b804c03a 	cmpne	r2,r23,zero
1000e83c:	1108b03a 	or	r4,r2,r4
1000e840:	20c001cc 	andi	r3,r4,7
1000e844:	1800061e 	bne	r3,zero,1000e860 <__muldf3+0x82c>
1000e848:	0021883a 	mov	r16,zero
1000e84c:	202ed0fa 	srli	r23,r4,3
1000e850:	34c0004c 	andi	r19,r6,1
1000e854:	0009883a 	mov	r4,zero
1000e858:	b8eeb03a 	or	r23,r23,r3
1000e85c:	003e4f06 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e860:	20c003cc 	andi	r3,r4,15
1000e864:	00800104 	movi	r2,4
1000e868:	0021883a 	mov	r16,zero
1000e86c:	18bfdf1e 	bne	r3,r2,1000e7ec <__alt_data_end+0xf800e7ec>
1000e870:	8004927a 	slli	r2,r16,9
1000e874:	8006977a 	slli	r3,r16,29
1000e878:	1020d33a 	srli	r16,r2,12
1000e87c:	003ff306 	br	1000e84c <__alt_data_end+0xf800e84c>
1000e880:	0021883a 	mov	r16,zero
1000e884:	003feb06 	br	1000e834 <__alt_data_end+0xf800e834>
1000e888:	00800434 	movhi	r2,16
1000e88c:	84000234 	orhi	r16,r16,8
1000e890:	10bfffc4 	addi	r2,r2,-1
1000e894:	4cc0004c 	andi	r19,r9,1
1000e898:	80a0703a 	and	r16,r16,r2
1000e89c:	003ea606 	br	1000e338 <__alt_data_end+0xf800e338>

1000e8a0 <__floatunsidf>:
1000e8a0:	defffe04 	addi	sp,sp,-8
1000e8a4:	dc000015 	stw	r16,0(sp)
1000e8a8:	dfc00115 	stw	ra,4(sp)
1000e8ac:	2021883a 	mov	r16,r4
1000e8b0:	20001026 	beq	r4,zero,1000e8f4 <__floatunsidf+0x54>
1000e8b4:	0003ecc0 	call	10003ecc <__clzsi2>
1000e8b8:	01410784 	movi	r5,1054
1000e8bc:	100d883a 	mov	r6,r2
1000e8c0:	288bc83a 	sub	r5,r5,r2
1000e8c4:	00800284 	movi	r2,10
1000e8c8:	11801616 	blt	r2,r6,1000e924 <__floatunsidf+0x84>
1000e8cc:	008002c4 	movi	r2,11
1000e8d0:	1185c83a 	sub	r2,r2,r6
1000e8d4:	8084d83a 	srl	r2,r16,r2
1000e8d8:	00c00434 	movhi	r3,16
1000e8dc:	31c00544 	addi	r7,r6,21
1000e8e0:	18ffffc4 	addi	r3,r3,-1
1000e8e4:	81e0983a 	sll	r16,r16,r7
1000e8e8:	10cc703a 	and	r6,r2,r3
1000e8ec:	2941ffcc 	andi	r5,r5,2047
1000e8f0:	00000206 	br	1000e8fc <__floatunsidf+0x5c>
1000e8f4:	000b883a 	mov	r5,zero
1000e8f8:	000d883a 	mov	r6,zero
1000e8fc:	280a953a 	slli	r5,r5,20
1000e900:	00c00434 	movhi	r3,16
1000e904:	18ffffc4 	addi	r3,r3,-1
1000e908:	30c6703a 	and	r3,r6,r3
1000e90c:	8005883a 	mov	r2,r16
1000e910:	1946b03a 	or	r3,r3,r5
1000e914:	dfc00117 	ldw	ra,4(sp)
1000e918:	dc000017 	ldw	r16,0(sp)
1000e91c:	dec00204 	addi	sp,sp,8
1000e920:	f800283a 	ret
1000e924:	31bffd44 	addi	r6,r6,-11
1000e928:	818c983a 	sll	r6,r16,r6
1000e92c:	00800434 	movhi	r2,16
1000e930:	10bfffc4 	addi	r2,r2,-1
1000e934:	2941ffcc 	andi	r5,r5,2047
1000e938:	0021883a 	mov	r16,zero
1000e93c:	308c703a 	and	r6,r6,r2
1000e940:	003fee06 	br	1000e8fc <__alt_data_end+0xf800e8fc>

1000e944 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e944:	defffe04 	addi	sp,sp,-8
1000e948:	dfc00115 	stw	ra,4(sp)
1000e94c:	df000015 	stw	fp,0(sp)
1000e950:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e954:	00840074 	movhi	r2,4097
1000e958:	108bdb04 	addi	r2,r2,12140
1000e95c:	10800017 	ldw	r2,0(r2)
1000e960:	10000526 	beq	r2,zero,1000e978 <alt_get_errno+0x34>
1000e964:	00840074 	movhi	r2,4097
1000e968:	108bdb04 	addi	r2,r2,12140
1000e96c:	10800017 	ldw	r2,0(r2)
1000e970:	103ee83a 	callr	r2
1000e974:	00000206 	br	1000e980 <alt_get_errno+0x3c>
1000e978:	00840074 	movhi	r2,4097
1000e97c:	1092b004 	addi	r2,r2,19136
}
1000e980:	e037883a 	mov	sp,fp
1000e984:	dfc00117 	ldw	ra,4(sp)
1000e988:	df000017 	ldw	fp,0(sp)
1000e98c:	dec00204 	addi	sp,sp,8
1000e990:	f800283a 	ret

1000e994 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e994:	defffb04 	addi	sp,sp,-20
1000e998:	dfc00415 	stw	ra,16(sp)
1000e99c:	df000315 	stw	fp,12(sp)
1000e9a0:	df000304 	addi	fp,sp,12
1000e9a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e9a8:	e0bfff17 	ldw	r2,-4(fp)
1000e9ac:	10000816 	blt	r2,zero,1000e9d0 <close+0x3c>
1000e9b0:	e13fff17 	ldw	r4,-4(fp)
1000e9b4:	01400304 	movi	r5,12
1000e9b8:	0002be00 	call	10002be0 <__mulsi3>
1000e9bc:	1007883a 	mov	r3,r2
1000e9c0:	00840074 	movhi	r2,4097
1000e9c4:	10875804 	addi	r2,r2,7520
1000e9c8:	1885883a 	add	r2,r3,r2
1000e9cc:	00000106 	br	1000e9d4 <close+0x40>
1000e9d0:	0005883a 	mov	r2,zero
1000e9d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000e9d8:	e0bffd17 	ldw	r2,-12(fp)
1000e9dc:	10001926 	beq	r2,zero,1000ea44 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000e9e0:	e0bffd17 	ldw	r2,-12(fp)
1000e9e4:	10800017 	ldw	r2,0(r2)
1000e9e8:	10800417 	ldw	r2,16(r2)
1000e9ec:	10000626 	beq	r2,zero,1000ea08 <close+0x74>
1000e9f0:	e0bffd17 	ldw	r2,-12(fp)
1000e9f4:	10800017 	ldw	r2,0(r2)
1000e9f8:	10800417 	ldw	r2,16(r2)
1000e9fc:	e13ffd17 	ldw	r4,-12(fp)
1000ea00:	103ee83a 	callr	r2
1000ea04:	00000106 	br	1000ea0c <close+0x78>
1000ea08:	0005883a 	mov	r2,zero
1000ea0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000ea10:	e13fff17 	ldw	r4,-4(fp)
1000ea14:	000f0b80 	call	1000f0b8 <alt_release_fd>
    if (rval < 0)
1000ea18:	e0bffe17 	ldw	r2,-8(fp)
1000ea1c:	1000070e 	bge	r2,zero,1000ea3c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ea20:	000e9440 	call	1000e944 <alt_get_errno>
1000ea24:	1007883a 	mov	r3,r2
1000ea28:	e0bffe17 	ldw	r2,-8(fp)
1000ea2c:	0085c83a 	sub	r2,zero,r2
1000ea30:	18800015 	stw	r2,0(r3)
      return -1;
1000ea34:	00bfffc4 	movi	r2,-1
1000ea38:	00000706 	br	1000ea58 <close+0xc4>
    }
    return 0;
1000ea3c:	0005883a 	mov	r2,zero
1000ea40:	00000506 	br	1000ea58 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ea44:	000e9440 	call	1000e944 <alt_get_errno>
1000ea48:	1007883a 	mov	r3,r2
1000ea4c:	00801444 	movi	r2,81
1000ea50:	18800015 	stw	r2,0(r3)
    return -1;
1000ea54:	00bfffc4 	movi	r2,-1
  }
}
1000ea58:	e037883a 	mov	sp,fp
1000ea5c:	dfc00117 	ldw	ra,4(sp)
1000ea60:	df000017 	ldw	fp,0(sp)
1000ea64:	dec00204 	addi	sp,sp,8
1000ea68:	f800283a 	ret

1000ea6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000ea6c:	defffc04 	addi	sp,sp,-16
1000ea70:	df000315 	stw	fp,12(sp)
1000ea74:	df000304 	addi	fp,sp,12
1000ea78:	e13ffd15 	stw	r4,-12(fp)
1000ea7c:	e17ffe15 	stw	r5,-8(fp)
1000ea80:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ea84:	e0bfff17 	ldw	r2,-4(fp)
}
1000ea88:	e037883a 	mov	sp,fp
1000ea8c:	df000017 	ldw	fp,0(sp)
1000ea90:	dec00104 	addi	sp,sp,4
1000ea94:	f800283a 	ret

1000ea98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ea98:	defffe04 	addi	sp,sp,-8
1000ea9c:	dfc00115 	stw	ra,4(sp)
1000eaa0:	df000015 	stw	fp,0(sp)
1000eaa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eaa8:	00840074 	movhi	r2,4097
1000eaac:	108bdb04 	addi	r2,r2,12140
1000eab0:	10800017 	ldw	r2,0(r2)
1000eab4:	10000526 	beq	r2,zero,1000eacc <alt_get_errno+0x34>
1000eab8:	00840074 	movhi	r2,4097
1000eabc:	108bdb04 	addi	r2,r2,12140
1000eac0:	10800017 	ldw	r2,0(r2)
1000eac4:	103ee83a 	callr	r2
1000eac8:	00000206 	br	1000ead4 <alt_get_errno+0x3c>
1000eacc:	00840074 	movhi	r2,4097
1000ead0:	1092b004 	addi	r2,r2,19136
}
1000ead4:	e037883a 	mov	sp,fp
1000ead8:	dfc00117 	ldw	ra,4(sp)
1000eadc:	df000017 	ldw	fp,0(sp)
1000eae0:	dec00204 	addi	sp,sp,8
1000eae4:	f800283a 	ret

1000eae8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000eae8:	defffb04 	addi	sp,sp,-20
1000eaec:	dfc00415 	stw	ra,16(sp)
1000eaf0:	df000315 	stw	fp,12(sp)
1000eaf4:	df000304 	addi	fp,sp,12
1000eaf8:	e13ffe15 	stw	r4,-8(fp)
1000eafc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eb00:	e0bffe17 	ldw	r2,-8(fp)
1000eb04:	10000816 	blt	r2,zero,1000eb28 <fstat+0x40>
1000eb08:	e13ffe17 	ldw	r4,-8(fp)
1000eb0c:	01400304 	movi	r5,12
1000eb10:	0002be00 	call	10002be0 <__mulsi3>
1000eb14:	1007883a 	mov	r3,r2
1000eb18:	00840074 	movhi	r2,4097
1000eb1c:	10875804 	addi	r2,r2,7520
1000eb20:	1885883a 	add	r2,r3,r2
1000eb24:	00000106 	br	1000eb2c <fstat+0x44>
1000eb28:	0005883a 	mov	r2,zero
1000eb2c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000eb30:	e0bffd17 	ldw	r2,-12(fp)
1000eb34:	10001026 	beq	r2,zero,1000eb78 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000eb38:	e0bffd17 	ldw	r2,-12(fp)
1000eb3c:	10800017 	ldw	r2,0(r2)
1000eb40:	10800817 	ldw	r2,32(r2)
1000eb44:	10000726 	beq	r2,zero,1000eb64 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000eb48:	e0bffd17 	ldw	r2,-12(fp)
1000eb4c:	10800017 	ldw	r2,0(r2)
1000eb50:	10800817 	ldw	r2,32(r2)
1000eb54:	e13ffd17 	ldw	r4,-12(fp)
1000eb58:	e17fff17 	ldw	r5,-4(fp)
1000eb5c:	103ee83a 	callr	r2
1000eb60:	00000a06 	br	1000eb8c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000eb64:	e0bfff17 	ldw	r2,-4(fp)
1000eb68:	00c80004 	movi	r3,8192
1000eb6c:	10c00115 	stw	r3,4(r2)
      return 0;
1000eb70:	0005883a 	mov	r2,zero
1000eb74:	00000506 	br	1000eb8c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000eb78:	000ea980 	call	1000ea98 <alt_get_errno>
1000eb7c:	1007883a 	mov	r3,r2
1000eb80:	00801444 	movi	r2,81
1000eb84:	18800015 	stw	r2,0(r3)
    return -1;
1000eb88:	00bfffc4 	movi	r2,-1
  }
}
1000eb8c:	e037883a 	mov	sp,fp
1000eb90:	dfc00117 	ldw	ra,4(sp)
1000eb94:	df000017 	ldw	fp,0(sp)
1000eb98:	dec00204 	addi	sp,sp,8
1000eb9c:	f800283a 	ret

1000eba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eba0:	defffe04 	addi	sp,sp,-8
1000eba4:	dfc00115 	stw	ra,4(sp)
1000eba8:	df000015 	stw	fp,0(sp)
1000ebac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ebb0:	00840074 	movhi	r2,4097
1000ebb4:	108bdb04 	addi	r2,r2,12140
1000ebb8:	10800017 	ldw	r2,0(r2)
1000ebbc:	10000526 	beq	r2,zero,1000ebd4 <alt_get_errno+0x34>
1000ebc0:	00840074 	movhi	r2,4097
1000ebc4:	108bdb04 	addi	r2,r2,12140
1000ebc8:	10800017 	ldw	r2,0(r2)
1000ebcc:	103ee83a 	callr	r2
1000ebd0:	00000206 	br	1000ebdc <alt_get_errno+0x3c>
1000ebd4:	00840074 	movhi	r2,4097
1000ebd8:	1092b004 	addi	r2,r2,19136
}
1000ebdc:	e037883a 	mov	sp,fp
1000ebe0:	dfc00117 	ldw	ra,4(sp)
1000ebe4:	df000017 	ldw	fp,0(sp)
1000ebe8:	dec00204 	addi	sp,sp,8
1000ebec:	f800283a 	ret

1000ebf0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000ebf0:	deffed04 	addi	sp,sp,-76
1000ebf4:	dfc01215 	stw	ra,72(sp)
1000ebf8:	df001115 	stw	fp,68(sp)
1000ebfc:	df001104 	addi	fp,sp,68
1000ec00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ec04:	e0bfff17 	ldw	r2,-4(fp)
1000ec08:	10000816 	blt	r2,zero,1000ec2c <isatty+0x3c>
1000ec0c:	e13fff17 	ldw	r4,-4(fp)
1000ec10:	01400304 	movi	r5,12
1000ec14:	0002be00 	call	10002be0 <__mulsi3>
1000ec18:	1007883a 	mov	r3,r2
1000ec1c:	00840074 	movhi	r2,4097
1000ec20:	10875804 	addi	r2,r2,7520
1000ec24:	1885883a 	add	r2,r3,r2
1000ec28:	00000106 	br	1000ec30 <isatty+0x40>
1000ec2c:	0005883a 	mov	r2,zero
1000ec30:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ec34:	e0bfef17 	ldw	r2,-68(fp)
1000ec38:	10000e26 	beq	r2,zero,1000ec74 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ec3c:	e0bfef17 	ldw	r2,-68(fp)
1000ec40:	10800017 	ldw	r2,0(r2)
1000ec44:	10800817 	ldw	r2,32(r2)
1000ec48:	1000021e 	bne	r2,zero,1000ec54 <isatty+0x64>
    {
      return 1;
1000ec4c:	00800044 	movi	r2,1
1000ec50:	00000d06 	br	1000ec88 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ec54:	e0bff004 	addi	r2,fp,-64
1000ec58:	e13fff17 	ldw	r4,-4(fp)
1000ec5c:	100b883a 	mov	r5,r2
1000ec60:	000eae80 	call	1000eae8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ec64:	e0bff117 	ldw	r2,-60(fp)
1000ec68:	10880020 	cmpeqi	r2,r2,8192
1000ec6c:	10803fcc 	andi	r2,r2,255
1000ec70:	00000506 	br	1000ec88 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ec74:	000eba00 	call	1000eba0 <alt_get_errno>
1000ec78:	1007883a 	mov	r3,r2
1000ec7c:	00801444 	movi	r2,81
1000ec80:	18800015 	stw	r2,0(r3)
    return 0;
1000ec84:	0005883a 	mov	r2,zero
  }
}
1000ec88:	e037883a 	mov	sp,fp
1000ec8c:	dfc00117 	ldw	ra,4(sp)
1000ec90:	df000017 	ldw	fp,0(sp)
1000ec94:	dec00204 	addi	sp,sp,8
1000ec98:	f800283a 	ret

1000ec9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ec9c:	defffc04 	addi	sp,sp,-16
1000eca0:	df000315 	stw	fp,12(sp)
1000eca4:	df000304 	addi	fp,sp,12
1000eca8:	e13ffd15 	stw	r4,-12(fp)
1000ecac:	e17ffe15 	stw	r5,-8(fp)
1000ecb0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ecb4:	e0fffe17 	ldw	r3,-8(fp)
1000ecb8:	e0bffd17 	ldw	r2,-12(fp)
1000ecbc:	18800c26 	beq	r3,r2,1000ecf0 <alt_load_section+0x54>
  {
    while( to != end )
1000ecc0:	00000806 	br	1000ece4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ecc4:	e0bffe17 	ldw	r2,-8(fp)
1000ecc8:	10c00104 	addi	r3,r2,4
1000eccc:	e0fffe15 	stw	r3,-8(fp)
1000ecd0:	e0fffd17 	ldw	r3,-12(fp)
1000ecd4:	19000104 	addi	r4,r3,4
1000ecd8:	e13ffd15 	stw	r4,-12(fp)
1000ecdc:	18c00017 	ldw	r3,0(r3)
1000ece0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ece4:	e0fffe17 	ldw	r3,-8(fp)
1000ece8:	e0bfff17 	ldw	r2,-4(fp)
1000ecec:	18bff51e 	bne	r3,r2,1000ecc4 <__alt_data_end+0xf800ecc4>
    {
      *to++ = *from++;
    }
  }
}
1000ecf0:	e037883a 	mov	sp,fp
1000ecf4:	df000017 	ldw	fp,0(sp)
1000ecf8:	dec00104 	addi	sp,sp,4
1000ecfc:	f800283a 	ret

1000ed00 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ed00:	defffe04 	addi	sp,sp,-8
1000ed04:	dfc00115 	stw	ra,4(sp)
1000ed08:	df000015 	stw	fp,0(sp)
1000ed0c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ed10:	01040074 	movhi	r4,4097
1000ed14:	210be004 	addi	r4,r4,12160
1000ed18:	01440074 	movhi	r5,4097
1000ed1c:	29452504 	addi	r5,r5,5268
1000ed20:	01840074 	movhi	r6,4097
1000ed24:	318be004 	addi	r6,r6,12160
1000ed28:	000ec9c0 	call	1000ec9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ed2c:	01040034 	movhi	r4,4096
1000ed30:	21000804 	addi	r4,r4,32
1000ed34:	01440034 	movhi	r5,4096
1000ed38:	29400804 	addi	r5,r5,32
1000ed3c:	01840034 	movhi	r6,4096
1000ed40:	31808b04 	addi	r6,r6,556
1000ed44:	000ec9c0 	call	1000ec9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ed48:	01040074 	movhi	r4,4097
1000ed4c:	21042704 	addi	r4,r4,4252
1000ed50:	01440074 	movhi	r5,4097
1000ed54:	29442704 	addi	r5,r5,4252
1000ed58:	01840074 	movhi	r6,4097
1000ed5c:	31852504 	addi	r6,r6,5268
1000ed60:	000ec9c0 	call	1000ec9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ed64:	000ff780 	call	1000ff78 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000ed68:	00101400 	call	10010140 <alt_icache_flush_all>
}
1000ed6c:	e037883a 	mov	sp,fp
1000ed70:	dfc00117 	ldw	ra,4(sp)
1000ed74:	df000017 	ldw	fp,0(sp)
1000ed78:	dec00204 	addi	sp,sp,8
1000ed7c:	f800283a 	ret

1000ed80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ed80:	defffe04 	addi	sp,sp,-8
1000ed84:	dfc00115 	stw	ra,4(sp)
1000ed88:	df000015 	stw	fp,0(sp)
1000ed8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed90:	00840074 	movhi	r2,4097
1000ed94:	108bdb04 	addi	r2,r2,12140
1000ed98:	10800017 	ldw	r2,0(r2)
1000ed9c:	10000526 	beq	r2,zero,1000edb4 <alt_get_errno+0x34>
1000eda0:	00840074 	movhi	r2,4097
1000eda4:	108bdb04 	addi	r2,r2,12140
1000eda8:	10800017 	ldw	r2,0(r2)
1000edac:	103ee83a 	callr	r2
1000edb0:	00000206 	br	1000edbc <alt_get_errno+0x3c>
1000edb4:	00840074 	movhi	r2,4097
1000edb8:	1092b004 	addi	r2,r2,19136
}
1000edbc:	e037883a 	mov	sp,fp
1000edc0:	dfc00117 	ldw	ra,4(sp)
1000edc4:	df000017 	ldw	fp,0(sp)
1000edc8:	dec00204 	addi	sp,sp,8
1000edcc:	f800283a 	ret

1000edd0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000edd0:	defff904 	addi	sp,sp,-28
1000edd4:	dfc00615 	stw	ra,24(sp)
1000edd8:	df000515 	stw	fp,20(sp)
1000eddc:	df000504 	addi	fp,sp,20
1000ede0:	e13ffd15 	stw	r4,-12(fp)
1000ede4:	e17ffe15 	stw	r5,-8(fp)
1000ede8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000edec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000edf0:	e0bffd17 	ldw	r2,-12(fp)
1000edf4:	10000816 	blt	r2,zero,1000ee18 <lseek+0x48>
1000edf8:	e13ffd17 	ldw	r4,-12(fp)
1000edfc:	01400304 	movi	r5,12
1000ee00:	0002be00 	call	10002be0 <__mulsi3>
1000ee04:	1007883a 	mov	r3,r2
1000ee08:	00840074 	movhi	r2,4097
1000ee0c:	10875804 	addi	r2,r2,7520
1000ee10:	1885883a 	add	r2,r3,r2
1000ee14:	00000106 	br	1000ee1c <lseek+0x4c>
1000ee18:	0005883a 	mov	r2,zero
1000ee1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000ee20:	e0bffc17 	ldw	r2,-16(fp)
1000ee24:	10001026 	beq	r2,zero,1000ee68 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000ee28:	e0bffc17 	ldw	r2,-16(fp)
1000ee2c:	10800017 	ldw	r2,0(r2)
1000ee30:	10800717 	ldw	r2,28(r2)
1000ee34:	10000926 	beq	r2,zero,1000ee5c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000ee38:	e0bffc17 	ldw	r2,-16(fp)
1000ee3c:	10800017 	ldw	r2,0(r2)
1000ee40:	10800717 	ldw	r2,28(r2)
1000ee44:	e13ffc17 	ldw	r4,-16(fp)
1000ee48:	e17ffe17 	ldw	r5,-8(fp)
1000ee4c:	e1bfff17 	ldw	r6,-4(fp)
1000ee50:	103ee83a 	callr	r2
1000ee54:	e0bffb15 	stw	r2,-20(fp)
1000ee58:	00000506 	br	1000ee70 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000ee5c:	00bfde84 	movi	r2,-134
1000ee60:	e0bffb15 	stw	r2,-20(fp)
1000ee64:	00000206 	br	1000ee70 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000ee68:	00bfebc4 	movi	r2,-81
1000ee6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000ee70:	e0bffb17 	ldw	r2,-20(fp)
1000ee74:	1000070e 	bge	r2,zero,1000ee94 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000ee78:	000ed800 	call	1000ed80 <alt_get_errno>
1000ee7c:	1007883a 	mov	r3,r2
1000ee80:	e0bffb17 	ldw	r2,-20(fp)
1000ee84:	0085c83a 	sub	r2,zero,r2
1000ee88:	18800015 	stw	r2,0(r3)
    rc = -1;
1000ee8c:	00bfffc4 	movi	r2,-1
1000ee90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000ee94:	e0bffb17 	ldw	r2,-20(fp)
}
1000ee98:	e037883a 	mov	sp,fp
1000ee9c:	dfc00117 	ldw	ra,4(sp)
1000eea0:	df000017 	ldw	fp,0(sp)
1000eea4:	dec00204 	addi	sp,sp,8
1000eea8:	f800283a 	ret

1000eeac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000eeac:	defffd04 	addi	sp,sp,-12
1000eeb0:	dfc00215 	stw	ra,8(sp)
1000eeb4:	df000115 	stw	fp,4(sp)
1000eeb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000eebc:	0009883a 	mov	r4,zero
1000eec0:	000f3700 	call	1000f370 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000eec4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000eec8:	000f3a40 	call	1000f3a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000eecc:	01040074 	movhi	r4,4097
1000eed0:	21051b04 	addi	r4,r4,5228
1000eed4:	01440074 	movhi	r5,4097
1000eed8:	29451b04 	addi	r5,r5,5228
1000eedc:	01840074 	movhi	r6,4097
1000eee0:	31851b04 	addi	r6,r6,5228
1000eee4:	001050c0 	call	1001050c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000eee8:	00100880 	call	10010088 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000eeec:	01040074 	movhi	r4,4097
1000eef0:	21003904 	addi	r4,r4,228
1000eef4:	0010cf80 	call	10010cf8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000eef8:	d126e117 	ldw	r4,-25724(gp)
1000eefc:	d0e6e217 	ldw	r3,-25720(gp)
1000ef00:	d0a6e317 	ldw	r2,-25716(gp)
1000ef04:	180b883a 	mov	r5,r3
1000ef08:	100d883a 	mov	r6,r2
1000ef0c:	00002680 	call	10000268 <main>
1000ef10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000ef14:	01000044 	movi	r4,1
1000ef18:	000e9940 	call	1000e994 <close>
  exit (result);
1000ef1c:	e13fff17 	ldw	r4,-4(fp)
1000ef20:	0010d0c0 	call	10010d0c <exit>

1000ef24 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ef24:	defffe04 	addi	sp,sp,-8
1000ef28:	df000115 	stw	fp,4(sp)
1000ef2c:	df000104 	addi	fp,sp,4
1000ef30:	e13fff15 	stw	r4,-4(fp)
}
1000ef34:	e037883a 	mov	sp,fp
1000ef38:	df000017 	ldw	fp,0(sp)
1000ef3c:	dec00104 	addi	sp,sp,4
1000ef40:	f800283a 	ret

1000ef44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000ef44:	defffe04 	addi	sp,sp,-8
1000ef48:	df000115 	stw	fp,4(sp)
1000ef4c:	df000104 	addi	fp,sp,4
1000ef50:	e13fff15 	stw	r4,-4(fp)
}
1000ef54:	e037883a 	mov	sp,fp
1000ef58:	df000017 	ldw	fp,0(sp)
1000ef5c:	dec00104 	addi	sp,sp,4
1000ef60:	f800283a 	ret

1000ef64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef64:	defffe04 	addi	sp,sp,-8
1000ef68:	dfc00115 	stw	ra,4(sp)
1000ef6c:	df000015 	stw	fp,0(sp)
1000ef70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ef74:	00840074 	movhi	r2,4097
1000ef78:	108bdb04 	addi	r2,r2,12140
1000ef7c:	10800017 	ldw	r2,0(r2)
1000ef80:	10000526 	beq	r2,zero,1000ef98 <alt_get_errno+0x34>
1000ef84:	00840074 	movhi	r2,4097
1000ef88:	108bdb04 	addi	r2,r2,12140
1000ef8c:	10800017 	ldw	r2,0(r2)
1000ef90:	103ee83a 	callr	r2
1000ef94:	00000206 	br	1000efa0 <alt_get_errno+0x3c>
1000ef98:	00840074 	movhi	r2,4097
1000ef9c:	1092b004 	addi	r2,r2,19136
}
1000efa0:	e037883a 	mov	sp,fp
1000efa4:	dfc00117 	ldw	ra,4(sp)
1000efa8:	df000017 	ldw	fp,0(sp)
1000efac:	dec00204 	addi	sp,sp,8
1000efb0:	f800283a 	ret

1000efb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000efb4:	defff904 	addi	sp,sp,-28
1000efb8:	dfc00615 	stw	ra,24(sp)
1000efbc:	df000515 	stw	fp,20(sp)
1000efc0:	df000504 	addi	fp,sp,20
1000efc4:	e13ffd15 	stw	r4,-12(fp)
1000efc8:	e17ffe15 	stw	r5,-8(fp)
1000efcc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000efd0:	e0bffd17 	ldw	r2,-12(fp)
1000efd4:	10000816 	blt	r2,zero,1000eff8 <read+0x44>
1000efd8:	e13ffd17 	ldw	r4,-12(fp)
1000efdc:	01400304 	movi	r5,12
1000efe0:	0002be00 	call	10002be0 <__mulsi3>
1000efe4:	1007883a 	mov	r3,r2
1000efe8:	00840074 	movhi	r2,4097
1000efec:	10875804 	addi	r2,r2,7520
1000eff0:	1885883a 	add	r2,r3,r2
1000eff4:	00000106 	br	1000effc <read+0x48>
1000eff8:	0005883a 	mov	r2,zero
1000effc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f000:	e0bffb17 	ldw	r2,-20(fp)
1000f004:	10002226 	beq	r2,zero,1000f090 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f008:	e0bffb17 	ldw	r2,-20(fp)
1000f00c:	10800217 	ldw	r2,8(r2)
1000f010:	108000cc 	andi	r2,r2,3
1000f014:	10800060 	cmpeqi	r2,r2,1
1000f018:	1000181e 	bne	r2,zero,1000f07c <read+0xc8>
        (fd->dev->read))
1000f01c:	e0bffb17 	ldw	r2,-20(fp)
1000f020:	10800017 	ldw	r2,0(r2)
1000f024:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f028:	10001426 	beq	r2,zero,1000f07c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f02c:	e0bffb17 	ldw	r2,-20(fp)
1000f030:	10800017 	ldw	r2,0(r2)
1000f034:	10800517 	ldw	r2,20(r2)
1000f038:	e0ffff17 	ldw	r3,-4(fp)
1000f03c:	e13ffb17 	ldw	r4,-20(fp)
1000f040:	e17ffe17 	ldw	r5,-8(fp)
1000f044:	180d883a 	mov	r6,r3
1000f048:	103ee83a 	callr	r2
1000f04c:	e0bffc15 	stw	r2,-16(fp)
1000f050:	e0bffc17 	ldw	r2,-16(fp)
1000f054:	1000070e 	bge	r2,zero,1000f074 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f058:	000ef640 	call	1000ef64 <alt_get_errno>
1000f05c:	1007883a 	mov	r3,r2
1000f060:	e0bffc17 	ldw	r2,-16(fp)
1000f064:	0085c83a 	sub	r2,zero,r2
1000f068:	18800015 	stw	r2,0(r3)
          return -1;
1000f06c:	00bfffc4 	movi	r2,-1
1000f070:	00000c06 	br	1000f0a4 <read+0xf0>
        }
        return rval;
1000f074:	e0bffc17 	ldw	r2,-16(fp)
1000f078:	00000a06 	br	1000f0a4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f07c:	000ef640 	call	1000ef64 <alt_get_errno>
1000f080:	1007883a 	mov	r3,r2
1000f084:	00800344 	movi	r2,13
1000f088:	18800015 	stw	r2,0(r3)
1000f08c:	00000406 	br	1000f0a0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f090:	000ef640 	call	1000ef64 <alt_get_errno>
1000f094:	1007883a 	mov	r3,r2
1000f098:	00801444 	movi	r2,81
1000f09c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f0a0:	00bfffc4 	movi	r2,-1
}
1000f0a4:	e037883a 	mov	sp,fp
1000f0a8:	dfc00117 	ldw	ra,4(sp)
1000f0ac:	df000017 	ldw	fp,0(sp)
1000f0b0:	dec00204 	addi	sp,sp,8
1000f0b4:	f800283a 	ret

1000f0b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f0b8:	defffc04 	addi	sp,sp,-16
1000f0bc:	dfc00315 	stw	ra,12(sp)
1000f0c0:	df000215 	stw	fp,8(sp)
1000f0c4:	dc000115 	stw	r16,4(sp)
1000f0c8:	df000204 	addi	fp,sp,8
1000f0cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f0d0:	e0bffe17 	ldw	r2,-8(fp)
1000f0d4:	108000d0 	cmplti	r2,r2,3
1000f0d8:	1000111e 	bne	r2,zero,1000f120 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f0dc:	04040074 	movhi	r16,4097
1000f0e0:	84075804 	addi	r16,r16,7520
1000f0e4:	e0bffe17 	ldw	r2,-8(fp)
1000f0e8:	1009883a 	mov	r4,r2
1000f0ec:	01400304 	movi	r5,12
1000f0f0:	0002be00 	call	10002be0 <__mulsi3>
1000f0f4:	8085883a 	add	r2,r16,r2
1000f0f8:	10800204 	addi	r2,r2,8
1000f0fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f100:	04040074 	movhi	r16,4097
1000f104:	84075804 	addi	r16,r16,7520
1000f108:	e0bffe17 	ldw	r2,-8(fp)
1000f10c:	1009883a 	mov	r4,r2
1000f110:	01400304 	movi	r5,12
1000f114:	0002be00 	call	10002be0 <__mulsi3>
1000f118:	8085883a 	add	r2,r16,r2
1000f11c:	10000015 	stw	zero,0(r2)
  }
}
1000f120:	e6ffff04 	addi	sp,fp,-4
1000f124:	dfc00217 	ldw	ra,8(sp)
1000f128:	df000117 	ldw	fp,4(sp)
1000f12c:	dc000017 	ldw	r16,0(sp)
1000f130:	dec00304 	addi	sp,sp,12
1000f134:	f800283a 	ret

1000f138 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f138:	defff904 	addi	sp,sp,-28
1000f13c:	df000615 	stw	fp,24(sp)
1000f140:	df000604 	addi	fp,sp,24
1000f144:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f148:	0005303a 	rdctl	r2,status
1000f14c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f150:	e0fffc17 	ldw	r3,-16(fp)
1000f154:	00bfff84 	movi	r2,-2
1000f158:	1884703a 	and	r2,r3,r2
1000f15c:	1001703a 	wrctl	status,r2
  
  return context;
1000f160:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f164:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f168:	d0a00c17 	ldw	r2,-32720(gp)
1000f16c:	10c000c4 	addi	r3,r2,3
1000f170:	00bfff04 	movi	r2,-4
1000f174:	1884703a 	and	r2,r3,r2
1000f178:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f17c:	d0e00c17 	ldw	r3,-32720(gp)
1000f180:	e0bfff17 	ldw	r2,-4(fp)
1000f184:	1887883a 	add	r3,r3,r2
1000f188:	00860034 	movhi	r2,6144
1000f18c:	10800004 	addi	r2,r2,0
1000f190:	10c0062e 	bgeu	r2,r3,1000f1ac <sbrk+0x74>
1000f194:	e0bffa17 	ldw	r2,-24(fp)
1000f198:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f19c:	e0bffd17 	ldw	r2,-12(fp)
1000f1a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f1a4:	00bfffc4 	movi	r2,-1
1000f1a8:	00000b06 	br	1000f1d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f1ac:	d0a00c17 	ldw	r2,-32720(gp)
1000f1b0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f1b4:	d0e00c17 	ldw	r3,-32720(gp)
1000f1b8:	e0bfff17 	ldw	r2,-4(fp)
1000f1bc:	1885883a 	add	r2,r3,r2
1000f1c0:	d0a00c15 	stw	r2,-32720(gp)
1000f1c4:	e0bffa17 	ldw	r2,-24(fp)
1000f1c8:	e0bffe15 	stw	r2,-8(fp)
1000f1cc:	e0bffe17 	ldw	r2,-8(fp)
1000f1d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f1d4:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f1d8:	e037883a 	mov	sp,fp
1000f1dc:	df000017 	ldw	fp,0(sp)
1000f1e0:	dec00104 	addi	sp,sp,4
1000f1e4:	f800283a 	ret

1000f1e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f1e8:	defffe04 	addi	sp,sp,-8
1000f1ec:	dfc00115 	stw	ra,4(sp)
1000f1f0:	df000015 	stw	fp,0(sp)
1000f1f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f1f8:	00840074 	movhi	r2,4097
1000f1fc:	108bdb04 	addi	r2,r2,12140
1000f200:	10800017 	ldw	r2,0(r2)
1000f204:	10000526 	beq	r2,zero,1000f21c <alt_get_errno+0x34>
1000f208:	00840074 	movhi	r2,4097
1000f20c:	108bdb04 	addi	r2,r2,12140
1000f210:	10800017 	ldw	r2,0(r2)
1000f214:	103ee83a 	callr	r2
1000f218:	00000206 	br	1000f224 <alt_get_errno+0x3c>
1000f21c:	00840074 	movhi	r2,4097
1000f220:	1092b004 	addi	r2,r2,19136
}
1000f224:	e037883a 	mov	sp,fp
1000f228:	dfc00117 	ldw	ra,4(sp)
1000f22c:	df000017 	ldw	fp,0(sp)
1000f230:	dec00204 	addi	sp,sp,8
1000f234:	f800283a 	ret

1000f238 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f238:	defff904 	addi	sp,sp,-28
1000f23c:	dfc00615 	stw	ra,24(sp)
1000f240:	df000515 	stw	fp,20(sp)
1000f244:	df000504 	addi	fp,sp,20
1000f248:	e13ffd15 	stw	r4,-12(fp)
1000f24c:	e17ffe15 	stw	r5,-8(fp)
1000f250:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f254:	e0bffd17 	ldw	r2,-12(fp)
1000f258:	10000816 	blt	r2,zero,1000f27c <write+0x44>
1000f25c:	e13ffd17 	ldw	r4,-12(fp)
1000f260:	01400304 	movi	r5,12
1000f264:	0002be00 	call	10002be0 <__mulsi3>
1000f268:	1007883a 	mov	r3,r2
1000f26c:	00840074 	movhi	r2,4097
1000f270:	10875804 	addi	r2,r2,7520
1000f274:	1885883a 	add	r2,r3,r2
1000f278:	00000106 	br	1000f280 <write+0x48>
1000f27c:	0005883a 	mov	r2,zero
1000f280:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f284:	e0bffb17 	ldw	r2,-20(fp)
1000f288:	10002126 	beq	r2,zero,1000f310 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f28c:	e0bffb17 	ldw	r2,-20(fp)
1000f290:	10800217 	ldw	r2,8(r2)
1000f294:	108000cc 	andi	r2,r2,3
1000f298:	10001826 	beq	r2,zero,1000f2fc <write+0xc4>
1000f29c:	e0bffb17 	ldw	r2,-20(fp)
1000f2a0:	10800017 	ldw	r2,0(r2)
1000f2a4:	10800617 	ldw	r2,24(r2)
1000f2a8:	10001426 	beq	r2,zero,1000f2fc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f2ac:	e0bffb17 	ldw	r2,-20(fp)
1000f2b0:	10800017 	ldw	r2,0(r2)
1000f2b4:	10800617 	ldw	r2,24(r2)
1000f2b8:	e0ffff17 	ldw	r3,-4(fp)
1000f2bc:	e13ffb17 	ldw	r4,-20(fp)
1000f2c0:	e17ffe17 	ldw	r5,-8(fp)
1000f2c4:	180d883a 	mov	r6,r3
1000f2c8:	103ee83a 	callr	r2
1000f2cc:	e0bffc15 	stw	r2,-16(fp)
1000f2d0:	e0bffc17 	ldw	r2,-16(fp)
1000f2d4:	1000070e 	bge	r2,zero,1000f2f4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f2d8:	000f1e80 	call	1000f1e8 <alt_get_errno>
1000f2dc:	1007883a 	mov	r3,r2
1000f2e0:	e0bffc17 	ldw	r2,-16(fp)
1000f2e4:	0085c83a 	sub	r2,zero,r2
1000f2e8:	18800015 	stw	r2,0(r3)
        return -1;
1000f2ec:	00bfffc4 	movi	r2,-1
1000f2f0:	00000c06 	br	1000f324 <write+0xec>
      }
      return rval;
1000f2f4:	e0bffc17 	ldw	r2,-16(fp)
1000f2f8:	00000a06 	br	1000f324 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f2fc:	000f1e80 	call	1000f1e8 <alt_get_errno>
1000f300:	1007883a 	mov	r3,r2
1000f304:	00800344 	movi	r2,13
1000f308:	18800015 	stw	r2,0(r3)
1000f30c:	00000406 	br	1000f320 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f310:	000f1e80 	call	1000f1e8 <alt_get_errno>
1000f314:	1007883a 	mov	r3,r2
1000f318:	00801444 	movi	r2,81
1000f31c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f320:	00bfffc4 	movi	r2,-1
}
1000f324:	e037883a 	mov	sp,fp
1000f328:	dfc00117 	ldw	ra,4(sp)
1000f32c:	df000017 	ldw	fp,0(sp)
1000f330:	dec00204 	addi	sp,sp,8
1000f334:	f800283a 	ret

1000f338 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f338:	defffd04 	addi	sp,sp,-12
1000f33c:	dfc00215 	stw	ra,8(sp)
1000f340:	df000115 	stw	fp,4(sp)
1000f344:	df000104 	addi	fp,sp,4
1000f348:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f34c:	e13fff17 	ldw	r4,-4(fp)
1000f350:	01440074 	movhi	r5,4097
1000f354:	294bd804 	addi	r5,r5,12128
1000f358:	000ffe40 	call	1000ffe4 <alt_dev_llist_insert>
}
1000f35c:	e037883a 	mov	sp,fp
1000f360:	dfc00117 	ldw	ra,4(sp)
1000f364:	df000017 	ldw	fp,0(sp)
1000f368:	dec00204 	addi	sp,sp,8
1000f36c:	f800283a 	ret

1000f370 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f370:	defffd04 	addi	sp,sp,-12
1000f374:	dfc00215 	stw	ra,8(sp)
1000f378:	df000115 	stw	fp,4(sp)
1000f37c:	df000104 	addi	fp,sp,4
1000f380:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f384:	00109c40 	call	100109c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f388:	00800044 	movi	r2,1
1000f38c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f390:	e037883a 	mov	sp,fp
1000f394:	dfc00117 	ldw	ra,4(sp)
1000f398:	df000017 	ldw	fp,0(sp)
1000f39c:	dec00204 	addi	sp,sp,8
1000f3a0:	f800283a 	ret

1000f3a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f3a4:	defffe04 	addi	sp,sp,-8
1000f3a8:	dfc00115 	stw	ra,4(sp)
1000f3ac:	df000015 	stw	fp,0(sp)
1000f3b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f3b4:	01040074 	movhi	r4,4097
1000f3b8:	2107c204 	addi	r4,r4,7944
1000f3bc:	000b883a 	mov	r5,zero
1000f3c0:	01800144 	movi	r6,5
1000f3c4:	000f5500 	call	1000f550 <altera_avalon_jtag_uart_init>
1000f3c8:	01040074 	movhi	r4,4097
1000f3cc:	2107b804 	addi	r4,r4,7904
1000f3d0:	000f3380 	call	1000f338 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f3d4:	0001883a 	nop
}
1000f3d8:	e037883a 	mov	sp,fp
1000f3dc:	dfc00117 	ldw	ra,4(sp)
1000f3e0:	df000017 	ldw	fp,0(sp)
1000f3e4:	dec00204 	addi	sp,sp,8
1000f3e8:	f800283a 	ret

1000f3ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f3ec:	defffa04 	addi	sp,sp,-24
1000f3f0:	dfc00515 	stw	ra,20(sp)
1000f3f4:	df000415 	stw	fp,16(sp)
1000f3f8:	df000404 	addi	fp,sp,16
1000f3fc:	e13ffd15 	stw	r4,-12(fp)
1000f400:	e17ffe15 	stw	r5,-8(fp)
1000f404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f408:	e0bffd17 	ldw	r2,-12(fp)
1000f40c:	10800017 	ldw	r2,0(r2)
1000f410:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f414:	e0bffc17 	ldw	r2,-16(fp)
1000f418:	10c00a04 	addi	r3,r2,40
1000f41c:	e0bffd17 	ldw	r2,-12(fp)
1000f420:	10800217 	ldw	r2,8(r2)
1000f424:	1809883a 	mov	r4,r3
1000f428:	e17ffe17 	ldw	r5,-8(fp)
1000f42c:	e1bfff17 	ldw	r6,-4(fp)
1000f430:	100f883a 	mov	r7,r2
1000f434:	000fa140 	call	1000fa14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f438:	e037883a 	mov	sp,fp
1000f43c:	dfc00117 	ldw	ra,4(sp)
1000f440:	df000017 	ldw	fp,0(sp)
1000f444:	dec00204 	addi	sp,sp,8
1000f448:	f800283a 	ret

1000f44c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f44c:	defffa04 	addi	sp,sp,-24
1000f450:	dfc00515 	stw	ra,20(sp)
1000f454:	df000415 	stw	fp,16(sp)
1000f458:	df000404 	addi	fp,sp,16
1000f45c:	e13ffd15 	stw	r4,-12(fp)
1000f460:	e17ffe15 	stw	r5,-8(fp)
1000f464:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f468:	e0bffd17 	ldw	r2,-12(fp)
1000f46c:	10800017 	ldw	r2,0(r2)
1000f470:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f474:	e0bffc17 	ldw	r2,-16(fp)
1000f478:	10c00a04 	addi	r3,r2,40
1000f47c:	e0bffd17 	ldw	r2,-12(fp)
1000f480:	10800217 	ldw	r2,8(r2)
1000f484:	1809883a 	mov	r4,r3
1000f488:	e17ffe17 	ldw	r5,-8(fp)
1000f48c:	e1bfff17 	ldw	r6,-4(fp)
1000f490:	100f883a 	mov	r7,r2
1000f494:	000fc200 	call	1000fc20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f498:	e037883a 	mov	sp,fp
1000f49c:	dfc00117 	ldw	ra,4(sp)
1000f4a0:	df000017 	ldw	fp,0(sp)
1000f4a4:	dec00204 	addi	sp,sp,8
1000f4a8:	f800283a 	ret

1000f4ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f4ac:	defffc04 	addi	sp,sp,-16
1000f4b0:	dfc00315 	stw	ra,12(sp)
1000f4b4:	df000215 	stw	fp,8(sp)
1000f4b8:	df000204 	addi	fp,sp,8
1000f4bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f4c0:	e0bfff17 	ldw	r2,-4(fp)
1000f4c4:	10800017 	ldw	r2,0(r2)
1000f4c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f4cc:	e0bffe17 	ldw	r2,-8(fp)
1000f4d0:	10c00a04 	addi	r3,r2,40
1000f4d4:	e0bfff17 	ldw	r2,-4(fp)
1000f4d8:	10800217 	ldw	r2,8(r2)
1000f4dc:	1809883a 	mov	r4,r3
1000f4e0:	100b883a 	mov	r5,r2
1000f4e4:	000f8c00 	call	1000f8c0 <altera_avalon_jtag_uart_close>
}
1000f4e8:	e037883a 	mov	sp,fp
1000f4ec:	dfc00117 	ldw	ra,4(sp)
1000f4f0:	df000017 	ldw	fp,0(sp)
1000f4f4:	dec00204 	addi	sp,sp,8
1000f4f8:	f800283a 	ret

1000f4fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f4fc:	defffa04 	addi	sp,sp,-24
1000f500:	dfc00515 	stw	ra,20(sp)
1000f504:	df000415 	stw	fp,16(sp)
1000f508:	df000404 	addi	fp,sp,16
1000f50c:	e13ffd15 	stw	r4,-12(fp)
1000f510:	e17ffe15 	stw	r5,-8(fp)
1000f514:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f518:	e0bffd17 	ldw	r2,-12(fp)
1000f51c:	10800017 	ldw	r2,0(r2)
1000f520:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f524:	e0bffc17 	ldw	r2,-16(fp)
1000f528:	10800a04 	addi	r2,r2,40
1000f52c:	1009883a 	mov	r4,r2
1000f530:	e17ffe17 	ldw	r5,-8(fp)
1000f534:	e1bfff17 	ldw	r6,-4(fp)
1000f538:	000f9280 	call	1000f928 <altera_avalon_jtag_uart_ioctl>
}
1000f53c:	e037883a 	mov	sp,fp
1000f540:	dfc00117 	ldw	ra,4(sp)
1000f544:	df000017 	ldw	fp,0(sp)
1000f548:	dec00204 	addi	sp,sp,8
1000f54c:	f800283a 	ret

1000f550 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f550:	defffa04 	addi	sp,sp,-24
1000f554:	dfc00515 	stw	ra,20(sp)
1000f558:	df000415 	stw	fp,16(sp)
1000f55c:	df000404 	addi	fp,sp,16
1000f560:	e13ffd15 	stw	r4,-12(fp)
1000f564:	e17ffe15 	stw	r5,-8(fp)
1000f568:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f56c:	e0bffd17 	ldw	r2,-12(fp)
1000f570:	00c00044 	movi	r3,1
1000f574:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f578:	e0bffd17 	ldw	r2,-12(fp)
1000f57c:	10800017 	ldw	r2,0(r2)
1000f580:	10800104 	addi	r2,r2,4
1000f584:	1007883a 	mov	r3,r2
1000f588:	e0bffd17 	ldw	r2,-12(fp)
1000f58c:	10800817 	ldw	r2,32(r2)
1000f590:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f594:	e0fffe17 	ldw	r3,-8(fp)
1000f598:	e0bfff17 	ldw	r2,-4(fp)
1000f59c:	d8000015 	stw	zero,0(sp)
1000f5a0:	1809883a 	mov	r4,r3
1000f5a4:	100b883a 	mov	r5,r2
1000f5a8:	01840074 	movhi	r6,4097
1000f5ac:	31bd8504 	addi	r6,r6,-2540
1000f5b0:	e1fffd17 	ldw	r7,-12(fp)
1000f5b4:	001015c0 	call	1001015c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f5b8:	e0bffd17 	ldw	r2,-12(fp)
1000f5bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f5c0:	e0bffd17 	ldw	r2,-12(fp)
1000f5c4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f5c8:	00840074 	movhi	r2,4097
1000f5cc:	1092b504 	addi	r2,r2,19156
1000f5d0:	10800017 	ldw	r2,0(r2)
1000f5d4:	1809883a 	mov	r4,r3
1000f5d8:	100b883a 	mov	r5,r2
1000f5dc:	01840074 	movhi	r6,4097
1000f5e0:	31be0604 	addi	r6,r6,-2024
1000f5e4:	e1fffd17 	ldw	r7,-12(fp)
1000f5e8:	000fe380 	call	1000fe38 <alt_alarm_start>
1000f5ec:	1000040e 	bge	r2,zero,1000f600 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f5f0:	e0fffd17 	ldw	r3,-12(fp)
1000f5f4:	00a00034 	movhi	r2,32768
1000f5f8:	10bfffc4 	addi	r2,r2,-1
1000f5fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f600:	e037883a 	mov	sp,fp
1000f604:	dfc00117 	ldw	ra,4(sp)
1000f608:	df000017 	ldw	fp,0(sp)
1000f60c:	dec00204 	addi	sp,sp,8
1000f610:	f800283a 	ret

1000f614 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f614:	defff804 	addi	sp,sp,-32
1000f618:	df000715 	stw	fp,28(sp)
1000f61c:	df000704 	addi	fp,sp,28
1000f620:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f624:	e0bfff17 	ldw	r2,-4(fp)
1000f628:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f62c:	e0bffb17 	ldw	r2,-20(fp)
1000f630:	10800017 	ldw	r2,0(r2)
1000f634:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f638:	e0bffc17 	ldw	r2,-16(fp)
1000f63c:	10800104 	addi	r2,r2,4
1000f640:	10800037 	ldwio	r2,0(r2)
1000f644:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f648:	e0bffd17 	ldw	r2,-12(fp)
1000f64c:	1080c00c 	andi	r2,r2,768
1000f650:	1000011e 	bne	r2,zero,1000f658 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f654:	00006c06 	br	1000f808 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f658:	e0bffd17 	ldw	r2,-12(fp)
1000f65c:	1080400c 	andi	r2,r2,256
1000f660:	10003426 	beq	r2,zero,1000f734 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f664:	00800074 	movhi	r2,1
1000f668:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f66c:	e0bffb17 	ldw	r2,-20(fp)
1000f670:	10800a17 	ldw	r2,40(r2)
1000f674:	10800044 	addi	r2,r2,1
1000f678:	1081ffcc 	andi	r2,r2,2047
1000f67c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f680:	e0bffb17 	ldw	r2,-20(fp)
1000f684:	10c00b17 	ldw	r3,44(r2)
1000f688:	e0bffe17 	ldw	r2,-8(fp)
1000f68c:	1880011e 	bne	r3,r2,1000f694 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f690:	00001606 	br	1000f6ec <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f694:	e0bffc17 	ldw	r2,-16(fp)
1000f698:	10800037 	ldwio	r2,0(r2)
1000f69c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f6a0:	e0bff917 	ldw	r2,-28(fp)
1000f6a4:	10a0000c 	andi	r2,r2,32768
1000f6a8:	1000011e 	bne	r2,zero,1000f6b0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f6ac:	00000f06 	br	1000f6ec <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f6b0:	e0bffb17 	ldw	r2,-20(fp)
1000f6b4:	10800a17 	ldw	r2,40(r2)
1000f6b8:	e0fff917 	ldw	r3,-28(fp)
1000f6bc:	1809883a 	mov	r4,r3
1000f6c0:	e0fffb17 	ldw	r3,-20(fp)
1000f6c4:	1885883a 	add	r2,r3,r2
1000f6c8:	10800e04 	addi	r2,r2,56
1000f6cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f6d0:	e0bffb17 	ldw	r2,-20(fp)
1000f6d4:	10800a17 	ldw	r2,40(r2)
1000f6d8:	10800044 	addi	r2,r2,1
1000f6dc:	10c1ffcc 	andi	r3,r2,2047
1000f6e0:	e0bffb17 	ldw	r2,-20(fp)
1000f6e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f6e8:	003fe006 	br	1000f66c <__alt_data_end+0xf800f66c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f6ec:	e0bff917 	ldw	r2,-28(fp)
1000f6f0:	10bfffec 	andhi	r2,r2,65535
1000f6f4:	10000f26 	beq	r2,zero,1000f734 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f6f8:	e0bffb17 	ldw	r2,-20(fp)
1000f6fc:	10c00817 	ldw	r3,32(r2)
1000f700:	00bfff84 	movi	r2,-2
1000f704:	1886703a 	and	r3,r3,r2
1000f708:	e0bffb17 	ldw	r2,-20(fp)
1000f70c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f710:	e0bffc17 	ldw	r2,-16(fp)
1000f714:	10800104 	addi	r2,r2,4
1000f718:	1007883a 	mov	r3,r2
1000f71c:	e0bffb17 	ldw	r2,-20(fp)
1000f720:	10800817 	ldw	r2,32(r2)
1000f724:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f728:	e0bffc17 	ldw	r2,-16(fp)
1000f72c:	10800104 	addi	r2,r2,4
1000f730:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f734:	e0bffd17 	ldw	r2,-12(fp)
1000f738:	1080800c 	andi	r2,r2,512
1000f73c:	10003126 	beq	r2,zero,1000f804 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f740:	e0bffd17 	ldw	r2,-12(fp)
1000f744:	1004d43a 	srli	r2,r2,16
1000f748:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f74c:	00001406 	br	1000f7a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f750:	e0bffc17 	ldw	r2,-16(fp)
1000f754:	e0fffb17 	ldw	r3,-20(fp)
1000f758:	18c00d17 	ldw	r3,52(r3)
1000f75c:	e13ffb17 	ldw	r4,-20(fp)
1000f760:	20c7883a 	add	r3,r4,r3
1000f764:	18c20e04 	addi	r3,r3,2104
1000f768:	18c00003 	ldbu	r3,0(r3)
1000f76c:	18c03fcc 	andi	r3,r3,255
1000f770:	18c0201c 	xori	r3,r3,128
1000f774:	18ffe004 	addi	r3,r3,-128
1000f778:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f77c:	e0bffb17 	ldw	r2,-20(fp)
1000f780:	10800d17 	ldw	r2,52(r2)
1000f784:	10800044 	addi	r2,r2,1
1000f788:	10c1ffcc 	andi	r3,r2,2047
1000f78c:	e0bffb17 	ldw	r2,-20(fp)
1000f790:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f794:	e0bffa17 	ldw	r2,-24(fp)
1000f798:	10bfffc4 	addi	r2,r2,-1
1000f79c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f7a0:	e0bffa17 	ldw	r2,-24(fp)
1000f7a4:	10000526 	beq	r2,zero,1000f7bc <altera_avalon_jtag_uart_irq+0x1a8>
1000f7a8:	e0bffb17 	ldw	r2,-20(fp)
1000f7ac:	10c00d17 	ldw	r3,52(r2)
1000f7b0:	e0bffb17 	ldw	r2,-20(fp)
1000f7b4:	10800c17 	ldw	r2,48(r2)
1000f7b8:	18bfe51e 	bne	r3,r2,1000f750 <__alt_data_end+0xf800f750>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f7bc:	e0bffa17 	ldw	r2,-24(fp)
1000f7c0:	10001026 	beq	r2,zero,1000f804 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f7c4:	e0bffb17 	ldw	r2,-20(fp)
1000f7c8:	10c00817 	ldw	r3,32(r2)
1000f7cc:	00bfff44 	movi	r2,-3
1000f7d0:	1886703a 	and	r3,r3,r2
1000f7d4:	e0bffb17 	ldw	r2,-20(fp)
1000f7d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f7dc:	e0bffb17 	ldw	r2,-20(fp)
1000f7e0:	10800017 	ldw	r2,0(r2)
1000f7e4:	10800104 	addi	r2,r2,4
1000f7e8:	1007883a 	mov	r3,r2
1000f7ec:	e0bffb17 	ldw	r2,-20(fp)
1000f7f0:	10800817 	ldw	r2,32(r2)
1000f7f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f7f8:	e0bffc17 	ldw	r2,-16(fp)
1000f7fc:	10800104 	addi	r2,r2,4
1000f800:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f804:	003f8c06 	br	1000f638 <__alt_data_end+0xf800f638>
}
1000f808:	e037883a 	mov	sp,fp
1000f80c:	df000017 	ldw	fp,0(sp)
1000f810:	dec00104 	addi	sp,sp,4
1000f814:	f800283a 	ret

1000f818 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f818:	defff804 	addi	sp,sp,-32
1000f81c:	df000715 	stw	fp,28(sp)
1000f820:	df000704 	addi	fp,sp,28
1000f824:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f828:	e0bffb17 	ldw	r2,-20(fp)
1000f82c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f830:	e0bff917 	ldw	r2,-28(fp)
1000f834:	10800017 	ldw	r2,0(r2)
1000f838:	10800104 	addi	r2,r2,4
1000f83c:	10800037 	ldwio	r2,0(r2)
1000f840:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f844:	e0bffa17 	ldw	r2,-24(fp)
1000f848:	1081000c 	andi	r2,r2,1024
1000f84c:	10000b26 	beq	r2,zero,1000f87c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f850:	e0bff917 	ldw	r2,-28(fp)
1000f854:	10800017 	ldw	r2,0(r2)
1000f858:	10800104 	addi	r2,r2,4
1000f85c:	1007883a 	mov	r3,r2
1000f860:	e0bff917 	ldw	r2,-28(fp)
1000f864:	10800817 	ldw	r2,32(r2)
1000f868:	10810014 	ori	r2,r2,1024
1000f86c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f870:	e0bff917 	ldw	r2,-28(fp)
1000f874:	10000915 	stw	zero,36(r2)
1000f878:	00000a06 	br	1000f8a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f87c:	e0bff917 	ldw	r2,-28(fp)
1000f880:	10c00917 	ldw	r3,36(r2)
1000f884:	00a00034 	movhi	r2,32768
1000f888:	10bfff04 	addi	r2,r2,-4
1000f88c:	10c00536 	bltu	r2,r3,1000f8a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f890:	e0bff917 	ldw	r2,-28(fp)
1000f894:	10800917 	ldw	r2,36(r2)
1000f898:	10c00044 	addi	r3,r2,1
1000f89c:	e0bff917 	ldw	r2,-28(fp)
1000f8a0:	10c00915 	stw	r3,36(r2)
1000f8a4:	00840074 	movhi	r2,4097
1000f8a8:	1092b504 	addi	r2,r2,19156
1000f8ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f8b0:	e037883a 	mov	sp,fp
1000f8b4:	df000017 	ldw	fp,0(sp)
1000f8b8:	dec00104 	addi	sp,sp,4
1000f8bc:	f800283a 	ret

1000f8c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f8c0:	defffd04 	addi	sp,sp,-12
1000f8c4:	df000215 	stw	fp,8(sp)
1000f8c8:	df000204 	addi	fp,sp,8
1000f8cc:	e13ffe15 	stw	r4,-8(fp)
1000f8d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f8d4:	00000506 	br	1000f8ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f8d8:	e0bfff17 	ldw	r2,-4(fp)
1000f8dc:	1090000c 	andi	r2,r2,16384
1000f8e0:	10000226 	beq	r2,zero,1000f8ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f8e4:	00bffd44 	movi	r2,-11
1000f8e8:	00000b06 	br	1000f918 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f8ec:	e0bffe17 	ldw	r2,-8(fp)
1000f8f0:	10c00d17 	ldw	r3,52(r2)
1000f8f4:	e0bffe17 	ldw	r2,-8(fp)
1000f8f8:	10800c17 	ldw	r2,48(r2)
1000f8fc:	18800526 	beq	r3,r2,1000f914 <altera_avalon_jtag_uart_close+0x54>
1000f900:	e0bffe17 	ldw	r2,-8(fp)
1000f904:	10c00917 	ldw	r3,36(r2)
1000f908:	e0bffe17 	ldw	r2,-8(fp)
1000f90c:	10800117 	ldw	r2,4(r2)
1000f910:	18bff136 	bltu	r3,r2,1000f8d8 <__alt_data_end+0xf800f8d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f914:	0005883a 	mov	r2,zero
}
1000f918:	e037883a 	mov	sp,fp
1000f91c:	df000017 	ldw	fp,0(sp)
1000f920:	dec00104 	addi	sp,sp,4
1000f924:	f800283a 	ret

1000f928 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f928:	defffa04 	addi	sp,sp,-24
1000f92c:	df000515 	stw	fp,20(sp)
1000f930:	df000504 	addi	fp,sp,20
1000f934:	e13ffd15 	stw	r4,-12(fp)
1000f938:	e17ffe15 	stw	r5,-8(fp)
1000f93c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f940:	00bff9c4 	movi	r2,-25
1000f944:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f948:	e0bffe17 	ldw	r2,-8(fp)
1000f94c:	10da8060 	cmpeqi	r3,r2,27137
1000f950:	1800031e 	bne	r3,zero,1000f960 <altera_avalon_jtag_uart_ioctl+0x38>
1000f954:	109a80a0 	cmpeqi	r2,r2,27138
1000f958:	1000191e 	bne	r2,zero,1000f9c0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000f95c:	00002806 	br	1000fa00 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f960:	e0bffd17 	ldw	r2,-12(fp)
1000f964:	10c00117 	ldw	r3,4(r2)
1000f968:	00a00034 	movhi	r2,32768
1000f96c:	10bfffc4 	addi	r2,r2,-1
1000f970:	18801226 	beq	r3,r2,1000f9bc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000f974:	e0bfff17 	ldw	r2,-4(fp)
1000f978:	10800017 	ldw	r2,0(r2)
1000f97c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f980:	e0bffc17 	ldw	r2,-16(fp)
1000f984:	10800090 	cmplti	r2,r2,2
1000f988:	1000061e 	bne	r2,zero,1000f9a4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f98c:	e0fffc17 	ldw	r3,-16(fp)
1000f990:	00a00034 	movhi	r2,32768
1000f994:	10bfffc4 	addi	r2,r2,-1
1000f998:	18800226 	beq	r3,r2,1000f9a4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f99c:	e0bffc17 	ldw	r2,-16(fp)
1000f9a0:	00000206 	br	1000f9ac <altera_avalon_jtag_uart_ioctl+0x84>
1000f9a4:	00a00034 	movhi	r2,32768
1000f9a8:	10bfff84 	addi	r2,r2,-2
1000f9ac:	e0fffd17 	ldw	r3,-12(fp)
1000f9b0:	18800115 	stw	r2,4(r3)
      rc = 0;
1000f9b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f9b8:	00001106 	br	1000fa00 <altera_avalon_jtag_uart_ioctl+0xd8>
1000f9bc:	00001006 	br	1000fa00 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000f9c0:	e0bffd17 	ldw	r2,-12(fp)
1000f9c4:	10c00117 	ldw	r3,4(r2)
1000f9c8:	00a00034 	movhi	r2,32768
1000f9cc:	10bfffc4 	addi	r2,r2,-1
1000f9d0:	18800a26 	beq	r3,r2,1000f9fc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000f9d4:	e0bffd17 	ldw	r2,-12(fp)
1000f9d8:	10c00917 	ldw	r3,36(r2)
1000f9dc:	e0bffd17 	ldw	r2,-12(fp)
1000f9e0:	10800117 	ldw	r2,4(r2)
1000f9e4:	1885803a 	cmpltu	r2,r3,r2
1000f9e8:	10c03fcc 	andi	r3,r2,255
1000f9ec:	e0bfff17 	ldw	r2,-4(fp)
1000f9f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000f9f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f9f8:	00000006 	br	1000f9fc <altera_avalon_jtag_uart_ioctl+0xd4>
1000f9fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fa00:	e0bffb17 	ldw	r2,-20(fp)
}
1000fa04:	e037883a 	mov	sp,fp
1000fa08:	df000017 	ldw	fp,0(sp)
1000fa0c:	dec00104 	addi	sp,sp,4
1000fa10:	f800283a 	ret

1000fa14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fa14:	defff304 	addi	sp,sp,-52
1000fa18:	dfc00c15 	stw	ra,48(sp)
1000fa1c:	df000b15 	stw	fp,44(sp)
1000fa20:	df000b04 	addi	fp,sp,44
1000fa24:	e13ffc15 	stw	r4,-16(fp)
1000fa28:	e17ffd15 	stw	r5,-12(fp)
1000fa2c:	e1bffe15 	stw	r6,-8(fp)
1000fa30:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fa34:	e0bffd17 	ldw	r2,-12(fp)
1000fa38:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fa3c:	00004906 	br	1000fb64 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fa40:	e0bffc17 	ldw	r2,-16(fp)
1000fa44:	10800a17 	ldw	r2,40(r2)
1000fa48:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fa4c:	e0bffc17 	ldw	r2,-16(fp)
1000fa50:	10800b17 	ldw	r2,44(r2)
1000fa54:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000fa58:	e0fff717 	ldw	r3,-36(fp)
1000fa5c:	e0bff817 	ldw	r2,-32(fp)
1000fa60:	18800536 	bltu	r3,r2,1000fa78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fa64:	e0fff717 	ldw	r3,-36(fp)
1000fa68:	e0bff817 	ldw	r2,-32(fp)
1000fa6c:	1885c83a 	sub	r2,r3,r2
1000fa70:	e0bff615 	stw	r2,-40(fp)
1000fa74:	00000406 	br	1000fa88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fa78:	00c20004 	movi	r3,2048
1000fa7c:	e0bff817 	ldw	r2,-32(fp)
1000fa80:	1885c83a 	sub	r2,r3,r2
1000fa84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fa88:	e0bff617 	ldw	r2,-40(fp)
1000fa8c:	1000011e 	bne	r2,zero,1000fa94 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000fa90:	00001d06 	br	1000fb08 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000fa94:	e0fffe17 	ldw	r3,-8(fp)
1000fa98:	e0bff617 	ldw	r2,-40(fp)
1000fa9c:	1880022e 	bgeu	r3,r2,1000faa8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000faa0:	e0bffe17 	ldw	r2,-8(fp)
1000faa4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000faa8:	e0bff817 	ldw	r2,-32(fp)
1000faac:	10800e04 	addi	r2,r2,56
1000fab0:	e0fffc17 	ldw	r3,-16(fp)
1000fab4:	1885883a 	add	r2,r3,r2
1000fab8:	e13ff517 	ldw	r4,-44(fp)
1000fabc:	100b883a 	mov	r5,r2
1000fac0:	e1bff617 	ldw	r6,-40(fp)
1000fac4:	00098740 	call	10009874 <memcpy>
      ptr   += n;
1000fac8:	e0fff517 	ldw	r3,-44(fp)
1000facc:	e0bff617 	ldw	r2,-40(fp)
1000fad0:	1885883a 	add	r2,r3,r2
1000fad4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fad8:	e0fffe17 	ldw	r3,-8(fp)
1000fadc:	e0bff617 	ldw	r2,-40(fp)
1000fae0:	1885c83a 	sub	r2,r3,r2
1000fae4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fae8:	e0fff817 	ldw	r3,-32(fp)
1000faec:	e0bff617 	ldw	r2,-40(fp)
1000faf0:	1885883a 	add	r2,r3,r2
1000faf4:	10c1ffcc 	andi	r3,r2,2047
1000faf8:	e0bffc17 	ldw	r2,-16(fp)
1000fafc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fb00:	e0bffe17 	ldw	r2,-8(fp)
1000fb04:	00bfce16 	blt	zero,r2,1000fa40 <__alt_data_end+0xf800fa40>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fb08:	e0fff517 	ldw	r3,-44(fp)
1000fb0c:	e0bffd17 	ldw	r2,-12(fp)
1000fb10:	18800126 	beq	r3,r2,1000fb18 <altera_avalon_jtag_uart_read+0x104>
      break;
1000fb14:	00001506 	br	1000fb6c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fb18:	e0bfff17 	ldw	r2,-4(fp)
1000fb1c:	1090000c 	andi	r2,r2,16384
1000fb20:	10000126 	beq	r2,zero,1000fb28 <altera_avalon_jtag_uart_read+0x114>
      break;
1000fb24:	00001106 	br	1000fb6c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fb28:	0001883a 	nop
1000fb2c:	e0bffc17 	ldw	r2,-16(fp)
1000fb30:	10c00a17 	ldw	r3,40(r2)
1000fb34:	e0bff717 	ldw	r2,-36(fp)
1000fb38:	1880051e 	bne	r3,r2,1000fb50 <altera_avalon_jtag_uart_read+0x13c>
1000fb3c:	e0bffc17 	ldw	r2,-16(fp)
1000fb40:	10c00917 	ldw	r3,36(r2)
1000fb44:	e0bffc17 	ldw	r2,-16(fp)
1000fb48:	10800117 	ldw	r2,4(r2)
1000fb4c:	18bff736 	bltu	r3,r2,1000fb2c <__alt_data_end+0xf800fb2c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fb50:	e0bffc17 	ldw	r2,-16(fp)
1000fb54:	10c00a17 	ldw	r3,40(r2)
1000fb58:	e0bff717 	ldw	r2,-36(fp)
1000fb5c:	1880011e 	bne	r3,r2,1000fb64 <altera_avalon_jtag_uart_read+0x150>
      break;
1000fb60:	00000206 	br	1000fb6c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fb64:	e0bffe17 	ldw	r2,-8(fp)
1000fb68:	00bfb516 	blt	zero,r2,1000fa40 <__alt_data_end+0xf800fa40>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fb6c:	e0fff517 	ldw	r3,-44(fp)
1000fb70:	e0bffd17 	ldw	r2,-12(fp)
1000fb74:	18801826 	beq	r3,r2,1000fbd8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fb78:	0005303a 	rdctl	r2,status
1000fb7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fb80:	e0fffa17 	ldw	r3,-24(fp)
1000fb84:	00bfff84 	movi	r2,-2
1000fb88:	1884703a 	and	r2,r3,r2
1000fb8c:	1001703a 	wrctl	status,r2
  
  return context;
1000fb90:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fb94:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fb98:	e0bffc17 	ldw	r2,-16(fp)
1000fb9c:	10800817 	ldw	r2,32(r2)
1000fba0:	10c00054 	ori	r3,r2,1
1000fba4:	e0bffc17 	ldw	r2,-16(fp)
1000fba8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fbac:	e0bffc17 	ldw	r2,-16(fp)
1000fbb0:	10800017 	ldw	r2,0(r2)
1000fbb4:	10800104 	addi	r2,r2,4
1000fbb8:	1007883a 	mov	r3,r2
1000fbbc:	e0bffc17 	ldw	r2,-16(fp)
1000fbc0:	10800817 	ldw	r2,32(r2)
1000fbc4:	18800035 	stwio	r2,0(r3)
1000fbc8:	e0bff917 	ldw	r2,-28(fp)
1000fbcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fbd0:	e0bffb17 	ldw	r2,-20(fp)
1000fbd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fbd8:	e0fff517 	ldw	r3,-44(fp)
1000fbdc:	e0bffd17 	ldw	r2,-12(fp)
1000fbe0:	18800426 	beq	r3,r2,1000fbf4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000fbe4:	e0fff517 	ldw	r3,-44(fp)
1000fbe8:	e0bffd17 	ldw	r2,-12(fp)
1000fbec:	1885c83a 	sub	r2,r3,r2
1000fbf0:	00000606 	br	1000fc0c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000fbf4:	e0bfff17 	ldw	r2,-4(fp)
1000fbf8:	1090000c 	andi	r2,r2,16384
1000fbfc:	10000226 	beq	r2,zero,1000fc08 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000fc00:	00bffd44 	movi	r2,-11
1000fc04:	00000106 	br	1000fc0c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000fc08:	00bffec4 	movi	r2,-5
}
1000fc0c:	e037883a 	mov	sp,fp
1000fc10:	dfc00117 	ldw	ra,4(sp)
1000fc14:	df000017 	ldw	fp,0(sp)
1000fc18:	dec00204 	addi	sp,sp,8
1000fc1c:	f800283a 	ret

1000fc20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fc20:	defff304 	addi	sp,sp,-52
1000fc24:	dfc00c15 	stw	ra,48(sp)
1000fc28:	df000b15 	stw	fp,44(sp)
1000fc2c:	df000b04 	addi	fp,sp,44
1000fc30:	e13ffc15 	stw	r4,-16(fp)
1000fc34:	e17ffd15 	stw	r5,-12(fp)
1000fc38:	e1bffe15 	stw	r6,-8(fp)
1000fc3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fc40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fc44:	e0bffd17 	ldw	r2,-12(fp)
1000fc48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fc4c:	00003806 	br	1000fd30 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fc50:	e0bffc17 	ldw	r2,-16(fp)
1000fc54:	10800c17 	ldw	r2,48(r2)
1000fc58:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fc5c:	e0bffc17 	ldw	r2,-16(fp)
1000fc60:	10800d17 	ldw	r2,52(r2)
1000fc64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fc68:	e0fff817 	ldw	r3,-32(fp)
1000fc6c:	e0bff517 	ldw	r2,-44(fp)
1000fc70:	1880062e 	bgeu	r3,r2,1000fc8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fc74:	e0fff517 	ldw	r3,-44(fp)
1000fc78:	e0bff817 	ldw	r2,-32(fp)
1000fc7c:	1885c83a 	sub	r2,r3,r2
1000fc80:	10bfffc4 	addi	r2,r2,-1
1000fc84:	e0bff615 	stw	r2,-40(fp)
1000fc88:	00000b06 	br	1000fcb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000fc8c:	e0bff517 	ldw	r2,-44(fp)
1000fc90:	10000526 	beq	r2,zero,1000fca8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fc94:	00c20004 	movi	r3,2048
1000fc98:	e0bff817 	ldw	r2,-32(fp)
1000fc9c:	1885c83a 	sub	r2,r3,r2
1000fca0:	e0bff615 	stw	r2,-40(fp)
1000fca4:	00000406 	br	1000fcb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fca8:	00c1ffc4 	movi	r3,2047
1000fcac:	e0bff817 	ldw	r2,-32(fp)
1000fcb0:	1885c83a 	sub	r2,r3,r2
1000fcb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fcb8:	e0bff617 	ldw	r2,-40(fp)
1000fcbc:	1000011e 	bne	r2,zero,1000fcc4 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000fcc0:	00001d06 	br	1000fd38 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000fcc4:	e0fffe17 	ldw	r3,-8(fp)
1000fcc8:	e0bff617 	ldw	r2,-40(fp)
1000fccc:	1880022e 	bgeu	r3,r2,1000fcd8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000fcd0:	e0bffe17 	ldw	r2,-8(fp)
1000fcd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fcd8:	e0bff817 	ldw	r2,-32(fp)
1000fcdc:	10820e04 	addi	r2,r2,2104
1000fce0:	e0fffc17 	ldw	r3,-16(fp)
1000fce4:	1885883a 	add	r2,r3,r2
1000fce8:	1009883a 	mov	r4,r2
1000fcec:	e17ffd17 	ldw	r5,-12(fp)
1000fcf0:	e1bff617 	ldw	r6,-40(fp)
1000fcf4:	00098740 	call	10009874 <memcpy>
      ptr   += n;
1000fcf8:	e0fffd17 	ldw	r3,-12(fp)
1000fcfc:	e0bff617 	ldw	r2,-40(fp)
1000fd00:	1885883a 	add	r2,r3,r2
1000fd04:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000fd08:	e0fffe17 	ldw	r3,-8(fp)
1000fd0c:	e0bff617 	ldw	r2,-40(fp)
1000fd10:	1885c83a 	sub	r2,r3,r2
1000fd14:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fd18:	e0fff817 	ldw	r3,-32(fp)
1000fd1c:	e0bff617 	ldw	r2,-40(fp)
1000fd20:	1885883a 	add	r2,r3,r2
1000fd24:	10c1ffcc 	andi	r3,r2,2047
1000fd28:	e0bffc17 	ldw	r2,-16(fp)
1000fd2c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fd30:	e0bffe17 	ldw	r2,-8(fp)
1000fd34:	00bfc616 	blt	zero,r2,1000fc50 <__alt_data_end+0xf800fc50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fd38:	0005303a 	rdctl	r2,status
1000fd3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fd40:	e0fffa17 	ldw	r3,-24(fp)
1000fd44:	00bfff84 	movi	r2,-2
1000fd48:	1884703a 	and	r2,r3,r2
1000fd4c:	1001703a 	wrctl	status,r2
  
  return context;
1000fd50:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000fd54:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fd58:	e0bffc17 	ldw	r2,-16(fp)
1000fd5c:	10800817 	ldw	r2,32(r2)
1000fd60:	10c00094 	ori	r3,r2,2
1000fd64:	e0bffc17 	ldw	r2,-16(fp)
1000fd68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fd6c:	e0bffc17 	ldw	r2,-16(fp)
1000fd70:	10800017 	ldw	r2,0(r2)
1000fd74:	10800104 	addi	r2,r2,4
1000fd78:	1007883a 	mov	r3,r2
1000fd7c:	e0bffc17 	ldw	r2,-16(fp)
1000fd80:	10800817 	ldw	r2,32(r2)
1000fd84:	18800035 	stwio	r2,0(r3)
1000fd88:	e0bff917 	ldw	r2,-28(fp)
1000fd8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fd90:	e0bffb17 	ldw	r2,-20(fp)
1000fd94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000fd98:	e0bffe17 	ldw	r2,-8(fp)
1000fd9c:	0080120e 	bge	zero,r2,1000fde8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000fda0:	e0bfff17 	ldw	r2,-4(fp)
1000fda4:	1090000c 	andi	r2,r2,16384
1000fda8:	10000126 	beq	r2,zero,1000fdb0 <altera_avalon_jtag_uart_write+0x190>
        break;
1000fdac:	00001006 	br	1000fdf0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000fdb0:	0001883a 	nop
1000fdb4:	e0bffc17 	ldw	r2,-16(fp)
1000fdb8:	10c00d17 	ldw	r3,52(r2)
1000fdbc:	e0bff517 	ldw	r2,-44(fp)
1000fdc0:	1880051e 	bne	r3,r2,1000fdd8 <altera_avalon_jtag_uart_write+0x1b8>
1000fdc4:	e0bffc17 	ldw	r2,-16(fp)
1000fdc8:	10c00917 	ldw	r3,36(r2)
1000fdcc:	e0bffc17 	ldw	r2,-16(fp)
1000fdd0:	10800117 	ldw	r2,4(r2)
1000fdd4:	18bff736 	bltu	r3,r2,1000fdb4 <__alt_data_end+0xf800fdb4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000fdd8:	e0bffc17 	ldw	r2,-16(fp)
1000fddc:	10800917 	ldw	r2,36(r2)
1000fde0:	10000126 	beq	r2,zero,1000fde8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000fde4:	00000206 	br	1000fdf0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000fde8:	e0bffe17 	ldw	r2,-8(fp)
1000fdec:	00bf9716 	blt	zero,r2,1000fc4c <__alt_data_end+0xf800fc4c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000fdf0:	e0fffd17 	ldw	r3,-12(fp)
1000fdf4:	e0bff717 	ldw	r2,-36(fp)
1000fdf8:	18800426 	beq	r3,r2,1000fe0c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000fdfc:	e0fffd17 	ldw	r3,-12(fp)
1000fe00:	e0bff717 	ldw	r2,-36(fp)
1000fe04:	1885c83a 	sub	r2,r3,r2
1000fe08:	00000606 	br	1000fe24 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000fe0c:	e0bfff17 	ldw	r2,-4(fp)
1000fe10:	1090000c 	andi	r2,r2,16384
1000fe14:	10000226 	beq	r2,zero,1000fe20 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000fe18:	00bffd44 	movi	r2,-11
1000fe1c:	00000106 	br	1000fe24 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000fe20:	00bffec4 	movi	r2,-5
}
1000fe24:	e037883a 	mov	sp,fp
1000fe28:	dfc00117 	ldw	ra,4(sp)
1000fe2c:	df000017 	ldw	fp,0(sp)
1000fe30:	dec00204 	addi	sp,sp,8
1000fe34:	f800283a 	ret

1000fe38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000fe38:	defff504 	addi	sp,sp,-44
1000fe3c:	df000a15 	stw	fp,40(sp)
1000fe40:	df000a04 	addi	fp,sp,40
1000fe44:	e13ffc15 	stw	r4,-16(fp)
1000fe48:	e17ffd15 	stw	r5,-12(fp)
1000fe4c:	e1bffe15 	stw	r6,-8(fp)
1000fe50:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000fe54:	e03ff615 	stw	zero,-40(fp)
1000fe58:	00840074 	movhi	r2,4097
1000fe5c:	1092b504 	addi	r2,r2,19156
1000fe60:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000fe64:	10003f26 	beq	r2,zero,1000ff64 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000fe68:	e0bffc17 	ldw	r2,-16(fp)
1000fe6c:	10003b26 	beq	r2,zero,1000ff5c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000fe70:	e0bffc17 	ldw	r2,-16(fp)
1000fe74:	e0fffe17 	ldw	r3,-8(fp)
1000fe78:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000fe7c:	e0bffc17 	ldw	r2,-16(fp)
1000fe80:	e0ffff17 	ldw	r3,-4(fp)
1000fe84:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fe88:	0005303a 	rdctl	r2,status
1000fe8c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fe90:	e0fff817 	ldw	r3,-32(fp)
1000fe94:	00bfff84 	movi	r2,-2
1000fe98:	1884703a 	and	r2,r3,r2
1000fe9c:	1001703a 	wrctl	status,r2
  
  return context;
1000fea0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000fea4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000fea8:	00840074 	movhi	r2,4097
1000feac:	1092b604 	addi	r2,r2,19160
1000feb0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000feb4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000feb8:	e0fffd17 	ldw	r3,-12(fp)
1000febc:	e0bff617 	ldw	r2,-40(fp)
1000fec0:	1885883a 	add	r2,r3,r2
1000fec4:	10c00044 	addi	r3,r2,1
1000fec8:	e0bffc17 	ldw	r2,-16(fp)
1000fecc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000fed0:	e0bffc17 	ldw	r2,-16(fp)
1000fed4:	10c00217 	ldw	r3,8(r2)
1000fed8:	e0bff617 	ldw	r2,-40(fp)
1000fedc:	1880042e 	bgeu	r3,r2,1000fef0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000fee0:	e0bffc17 	ldw	r2,-16(fp)
1000fee4:	00c00044 	movi	r3,1
1000fee8:	10c00405 	stb	r3,16(r2)
1000feec:	00000206 	br	1000fef8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000fef0:	e0bffc17 	ldw	r2,-16(fp)
1000fef4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000fef8:	e0fffc17 	ldw	r3,-16(fp)
1000fefc:	00840074 	movhi	r2,4097
1000ff00:	108bde04 	addi	r2,r2,12152
1000ff04:	e0bff915 	stw	r2,-28(fp)
1000ff08:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ff0c:	e0bffa17 	ldw	r2,-24(fp)
1000ff10:	e0fff917 	ldw	r3,-28(fp)
1000ff14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ff18:	e0bff917 	ldw	r2,-28(fp)
1000ff1c:	10c00017 	ldw	r3,0(r2)
1000ff20:	e0bffa17 	ldw	r2,-24(fp)
1000ff24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ff28:	e0bff917 	ldw	r2,-28(fp)
1000ff2c:	10800017 	ldw	r2,0(r2)
1000ff30:	e0fffa17 	ldw	r3,-24(fp)
1000ff34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ff38:	e0bff917 	ldw	r2,-28(fp)
1000ff3c:	e0fffa17 	ldw	r3,-24(fp)
1000ff40:	10c00015 	stw	r3,0(r2)
1000ff44:	e0bff717 	ldw	r2,-36(fp)
1000ff48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ff4c:	e0bffb17 	ldw	r2,-20(fp)
1000ff50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ff54:	0005883a 	mov	r2,zero
1000ff58:	00000306 	br	1000ff68 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ff5c:	00bffa84 	movi	r2,-22
1000ff60:	00000106 	br	1000ff68 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ff64:	00bfde84 	movi	r2,-134
  }
}
1000ff68:	e037883a 	mov	sp,fp
1000ff6c:	df000017 	ldw	fp,0(sp)
1000ff70:	dec00104 	addi	sp,sp,4
1000ff74:	f800283a 	ret

1000ff78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ff78:	deffff04 	addi	sp,sp,-4
1000ff7c:	df000015 	stw	fp,0(sp)
1000ff80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ff84:	e037883a 	mov	sp,fp
1000ff88:	df000017 	ldw	fp,0(sp)
1000ff8c:	dec00104 	addi	sp,sp,4
1000ff90:	f800283a 	ret

1000ff94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ff94:	defffe04 	addi	sp,sp,-8
1000ff98:	dfc00115 	stw	ra,4(sp)
1000ff9c:	df000015 	stw	fp,0(sp)
1000ffa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ffa4:	00840074 	movhi	r2,4097
1000ffa8:	108bdb04 	addi	r2,r2,12140
1000ffac:	10800017 	ldw	r2,0(r2)
1000ffb0:	10000526 	beq	r2,zero,1000ffc8 <alt_get_errno+0x34>
1000ffb4:	00840074 	movhi	r2,4097
1000ffb8:	108bdb04 	addi	r2,r2,12140
1000ffbc:	10800017 	ldw	r2,0(r2)
1000ffc0:	103ee83a 	callr	r2
1000ffc4:	00000206 	br	1000ffd0 <alt_get_errno+0x3c>
1000ffc8:	00840074 	movhi	r2,4097
1000ffcc:	1092b004 	addi	r2,r2,19136
}
1000ffd0:	e037883a 	mov	sp,fp
1000ffd4:	dfc00117 	ldw	ra,4(sp)
1000ffd8:	df000017 	ldw	fp,0(sp)
1000ffdc:	dec00204 	addi	sp,sp,8
1000ffe0:	f800283a 	ret

1000ffe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000ffe4:	defffa04 	addi	sp,sp,-24
1000ffe8:	dfc00515 	stw	ra,20(sp)
1000ffec:	df000415 	stw	fp,16(sp)
1000fff0:	df000404 	addi	fp,sp,16
1000fff4:	e13ffe15 	stw	r4,-8(fp)
1000fff8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000fffc:	e0bffe17 	ldw	r2,-8(fp)
10010000:	10000326 	beq	r2,zero,10010010 <alt_dev_llist_insert+0x2c>
10010004:	e0bffe17 	ldw	r2,-8(fp)
10010008:	10800217 	ldw	r2,8(r2)
1001000c:	1000061e 	bne	r2,zero,10010028 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010010:	000ff940 	call	1000ff94 <alt_get_errno>
10010014:	1007883a 	mov	r3,r2
10010018:	00800584 	movi	r2,22
1001001c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010020:	00bffa84 	movi	r2,-22
10010024:	00001306 	br	10010074 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010028:	e0bffe17 	ldw	r2,-8(fp)
1001002c:	e0ffff17 	ldw	r3,-4(fp)
10010030:	e0fffc15 	stw	r3,-16(fp)
10010034:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010038:	e0bffd17 	ldw	r2,-12(fp)
1001003c:	e0fffc17 	ldw	r3,-16(fp)
10010040:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010044:	e0bffc17 	ldw	r2,-16(fp)
10010048:	10c00017 	ldw	r3,0(r2)
1001004c:	e0bffd17 	ldw	r2,-12(fp)
10010050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010054:	e0bffc17 	ldw	r2,-16(fp)
10010058:	10800017 	ldw	r2,0(r2)
1001005c:	e0fffd17 	ldw	r3,-12(fp)
10010060:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010064:	e0bffc17 	ldw	r2,-16(fp)
10010068:	e0fffd17 	ldw	r3,-12(fp)
1001006c:	10c00015 	stw	r3,0(r2)

  return 0;  
10010070:	0005883a 	mov	r2,zero
}
10010074:	e037883a 	mov	sp,fp
10010078:	dfc00117 	ldw	ra,4(sp)
1001007c:	df000017 	ldw	fp,0(sp)
10010080:	dec00204 	addi	sp,sp,8
10010084:	f800283a 	ret

10010088 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010088:	defffd04 	addi	sp,sp,-12
1001008c:	dfc00215 	stw	ra,8(sp)
10010090:	df000115 	stw	fp,4(sp)
10010094:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010098:	00840074 	movhi	r2,4097
1001009c:	10842604 	addi	r2,r2,4248
100100a0:	e0bfff15 	stw	r2,-4(fp)
100100a4:	00000606 	br	100100c0 <_do_ctors+0x38>
        (*ctor) (); 
100100a8:	e0bfff17 	ldw	r2,-4(fp)
100100ac:	10800017 	ldw	r2,0(r2)
100100b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100100b4:	e0bfff17 	ldw	r2,-4(fp)
100100b8:	10bfff04 	addi	r2,r2,-4
100100bc:	e0bfff15 	stw	r2,-4(fp)
100100c0:	e0ffff17 	ldw	r3,-4(fp)
100100c4:	00840074 	movhi	r2,4097
100100c8:	10842704 	addi	r2,r2,4252
100100cc:	18bff62e 	bgeu	r3,r2,100100a8 <__alt_data_end+0xf80100a8>
        (*ctor) (); 
}
100100d0:	e037883a 	mov	sp,fp
100100d4:	dfc00117 	ldw	ra,4(sp)
100100d8:	df000017 	ldw	fp,0(sp)
100100dc:	dec00204 	addi	sp,sp,8
100100e0:	f800283a 	ret

100100e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100100e4:	defffd04 	addi	sp,sp,-12
100100e8:	dfc00215 	stw	ra,8(sp)
100100ec:	df000115 	stw	fp,4(sp)
100100f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100100f4:	00840074 	movhi	r2,4097
100100f8:	10842604 	addi	r2,r2,4248
100100fc:	e0bfff15 	stw	r2,-4(fp)
10010100:	00000606 	br	1001011c <_do_dtors+0x38>
        (*dtor) (); 
10010104:	e0bfff17 	ldw	r2,-4(fp)
10010108:	10800017 	ldw	r2,0(r2)
1001010c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010110:	e0bfff17 	ldw	r2,-4(fp)
10010114:	10bfff04 	addi	r2,r2,-4
10010118:	e0bfff15 	stw	r2,-4(fp)
1001011c:	e0ffff17 	ldw	r3,-4(fp)
10010120:	00840074 	movhi	r2,4097
10010124:	10842704 	addi	r2,r2,4252
10010128:	18bff62e 	bgeu	r3,r2,10010104 <__alt_data_end+0xf8010104>
        (*dtor) (); 
}
1001012c:	e037883a 	mov	sp,fp
10010130:	dfc00117 	ldw	ra,4(sp)
10010134:	df000017 	ldw	fp,0(sp)
10010138:	dec00204 	addi	sp,sp,8
1001013c:	f800283a 	ret

10010140 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010140:	deffff04 	addi	sp,sp,-4
10010144:	df000015 	stw	fp,0(sp)
10010148:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001014c:	e037883a 	mov	sp,fp
10010150:	df000017 	ldw	fp,0(sp)
10010154:	dec00104 	addi	sp,sp,4
10010158:	f800283a 	ret

1001015c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001015c:	defff904 	addi	sp,sp,-28
10010160:	dfc00615 	stw	ra,24(sp)
10010164:	df000515 	stw	fp,20(sp)
10010168:	df000504 	addi	fp,sp,20
1001016c:	e13ffc15 	stw	r4,-16(fp)
10010170:	e17ffd15 	stw	r5,-12(fp)
10010174:	e1bffe15 	stw	r6,-8(fp)
10010178:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1001017c:	e0800217 	ldw	r2,8(fp)
10010180:	d8800015 	stw	r2,0(sp)
10010184:	e13ffc17 	ldw	r4,-16(fp)
10010188:	e17ffd17 	ldw	r5,-12(fp)
1001018c:	e1bffe17 	ldw	r6,-8(fp)
10010190:	e1ffff17 	ldw	r7,-4(fp)
10010194:	001033c0 	call	1001033c <alt_iic_isr_register>
}  
10010198:	e037883a 	mov	sp,fp
1001019c:	dfc00117 	ldw	ra,4(sp)
100101a0:	df000017 	ldw	fp,0(sp)
100101a4:	dec00204 	addi	sp,sp,8
100101a8:	f800283a 	ret

100101ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100101ac:	defff904 	addi	sp,sp,-28
100101b0:	df000615 	stw	fp,24(sp)
100101b4:	df000604 	addi	fp,sp,24
100101b8:	e13ffe15 	stw	r4,-8(fp)
100101bc:	e17fff15 	stw	r5,-4(fp)
100101c0:	e0bfff17 	ldw	r2,-4(fp)
100101c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100101c8:	0005303a 	rdctl	r2,status
100101cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100101d0:	e0fffb17 	ldw	r3,-20(fp)
100101d4:	00bfff84 	movi	r2,-2
100101d8:	1884703a 	and	r2,r3,r2
100101dc:	1001703a 	wrctl	status,r2
  
  return context;
100101e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100101e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100101e8:	e0bffa17 	ldw	r2,-24(fp)
100101ec:	00c00044 	movi	r3,1
100101f0:	1884983a 	sll	r2,r3,r2
100101f4:	1007883a 	mov	r3,r2
100101f8:	00840074 	movhi	r2,4097
100101fc:	1092b404 	addi	r2,r2,19152
10010200:	10800017 	ldw	r2,0(r2)
10010204:	1886b03a 	or	r3,r3,r2
10010208:	00840074 	movhi	r2,4097
1001020c:	1092b404 	addi	r2,r2,19152
10010210:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010214:	00840074 	movhi	r2,4097
10010218:	1092b404 	addi	r2,r2,19152
1001021c:	10800017 	ldw	r2,0(r2)
10010220:	100170fa 	wrctl	ienable,r2
10010224:	e0bffc17 	ldw	r2,-16(fp)
10010228:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001022c:	e0bffd17 	ldw	r2,-12(fp)
10010230:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010234:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010238:	0001883a 	nop
}
1001023c:	e037883a 	mov	sp,fp
10010240:	df000017 	ldw	fp,0(sp)
10010244:	dec00104 	addi	sp,sp,4
10010248:	f800283a 	ret

1001024c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1001024c:	defff904 	addi	sp,sp,-28
10010250:	df000615 	stw	fp,24(sp)
10010254:	df000604 	addi	fp,sp,24
10010258:	e13ffe15 	stw	r4,-8(fp)
1001025c:	e17fff15 	stw	r5,-4(fp)
10010260:	e0bfff17 	ldw	r2,-4(fp)
10010264:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010268:	0005303a 	rdctl	r2,status
1001026c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010270:	e0fffb17 	ldw	r3,-20(fp)
10010274:	00bfff84 	movi	r2,-2
10010278:	1884703a 	and	r2,r3,r2
1001027c:	1001703a 	wrctl	status,r2
  
  return context;
10010280:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010284:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010288:	e0bffa17 	ldw	r2,-24(fp)
1001028c:	00c00044 	movi	r3,1
10010290:	1884983a 	sll	r2,r3,r2
10010294:	0084303a 	nor	r2,zero,r2
10010298:	1007883a 	mov	r3,r2
1001029c:	00840074 	movhi	r2,4097
100102a0:	1092b404 	addi	r2,r2,19152
100102a4:	10800017 	ldw	r2,0(r2)
100102a8:	1886703a 	and	r3,r3,r2
100102ac:	00840074 	movhi	r2,4097
100102b0:	1092b404 	addi	r2,r2,19152
100102b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100102b8:	00840074 	movhi	r2,4097
100102bc:	1092b404 	addi	r2,r2,19152
100102c0:	10800017 	ldw	r2,0(r2)
100102c4:	100170fa 	wrctl	ienable,r2
100102c8:	e0bffc17 	ldw	r2,-16(fp)
100102cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100102d0:	e0bffd17 	ldw	r2,-12(fp)
100102d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100102d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100102dc:	0001883a 	nop
}
100102e0:	e037883a 	mov	sp,fp
100102e4:	df000017 	ldw	fp,0(sp)
100102e8:	dec00104 	addi	sp,sp,4
100102ec:	f800283a 	ret

100102f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100102f0:	defffc04 	addi	sp,sp,-16
100102f4:	df000315 	stw	fp,12(sp)
100102f8:	df000304 	addi	fp,sp,12
100102fc:	e13ffe15 	stw	r4,-8(fp)
10010300:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010304:	000530fa 	rdctl	r2,ienable
10010308:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001030c:	e0bfff17 	ldw	r2,-4(fp)
10010310:	00c00044 	movi	r3,1
10010314:	1884983a 	sll	r2,r3,r2
10010318:	1007883a 	mov	r3,r2
1001031c:	e0bffd17 	ldw	r2,-12(fp)
10010320:	1884703a 	and	r2,r3,r2
10010324:	1004c03a 	cmpne	r2,r2,zero
10010328:	10803fcc 	andi	r2,r2,255
}
1001032c:	e037883a 	mov	sp,fp
10010330:	df000017 	ldw	fp,0(sp)
10010334:	dec00104 	addi	sp,sp,4
10010338:	f800283a 	ret

1001033c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001033c:	defff504 	addi	sp,sp,-44
10010340:	dfc00a15 	stw	ra,40(sp)
10010344:	df000915 	stw	fp,36(sp)
10010348:	df000904 	addi	fp,sp,36
1001034c:	e13ffc15 	stw	r4,-16(fp)
10010350:	e17ffd15 	stw	r5,-12(fp)
10010354:	e1bffe15 	stw	r6,-8(fp)
10010358:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1001035c:	00bffa84 	movi	r2,-22
10010360:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010364:	e0bffd17 	ldw	r2,-12(fp)
10010368:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1001036c:	e0bff817 	ldw	r2,-32(fp)
10010370:	10800808 	cmpgei	r2,r2,32
10010374:	1000271e 	bne	r2,zero,10010414 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010378:	0005303a 	rdctl	r2,status
1001037c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010380:	e0fffa17 	ldw	r3,-24(fp)
10010384:	00bfff84 	movi	r2,-2
10010388:	1884703a 	and	r2,r3,r2
1001038c:	1001703a 	wrctl	status,r2
  
  return context;
10010390:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010394:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10010398:	00840074 	movhi	r2,4097
1001039c:	10934204 	addi	r2,r2,19720
100103a0:	e0fff817 	ldw	r3,-32(fp)
100103a4:	180690fa 	slli	r3,r3,3
100103a8:	10c5883a 	add	r2,r2,r3
100103ac:	e0fffe17 	ldw	r3,-8(fp)
100103b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100103b4:	00840074 	movhi	r2,4097
100103b8:	10934204 	addi	r2,r2,19720
100103bc:	e0fff817 	ldw	r3,-32(fp)
100103c0:	180690fa 	slli	r3,r3,3
100103c4:	10c5883a 	add	r2,r2,r3
100103c8:	10800104 	addi	r2,r2,4
100103cc:	e0ffff17 	ldw	r3,-4(fp)
100103d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100103d4:	e0bffe17 	ldw	r2,-8(fp)
100103d8:	10000526 	beq	r2,zero,100103f0 <alt_iic_isr_register+0xb4>
100103dc:	e0bff817 	ldw	r2,-32(fp)
100103e0:	e13ffc17 	ldw	r4,-16(fp)
100103e4:	100b883a 	mov	r5,r2
100103e8:	00101ac0 	call	100101ac <alt_ic_irq_enable>
100103ec:	00000406 	br	10010400 <alt_iic_isr_register+0xc4>
100103f0:	e0bff817 	ldw	r2,-32(fp)
100103f4:	e13ffc17 	ldw	r4,-16(fp)
100103f8:	100b883a 	mov	r5,r2
100103fc:	001024c0 	call	1001024c <alt_ic_irq_disable>
10010400:	e0bff715 	stw	r2,-36(fp)
10010404:	e0bff917 	ldw	r2,-28(fp)
10010408:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001040c:	e0bffb17 	ldw	r2,-20(fp)
10010410:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010414:	e0bff717 	ldw	r2,-36(fp)
}
10010418:	e037883a 	mov	sp,fp
1001041c:	dfc00117 	ldw	ra,4(sp)
10010420:	df000017 	ldw	fp,0(sp)
10010424:	dec00204 	addi	sp,sp,8
10010428:	f800283a 	ret

1001042c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001042c:	defff804 	addi	sp,sp,-32
10010430:	dfc00715 	stw	ra,28(sp)
10010434:	df000615 	stw	fp,24(sp)
10010438:	dc000515 	stw	r16,20(sp)
1001043c:	df000604 	addi	fp,sp,24
10010440:	e13ffb15 	stw	r4,-20(fp)
10010444:	e17ffc15 	stw	r5,-16(fp)
10010448:	e1bffd15 	stw	r6,-12(fp)
1001044c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010450:	e13ffc17 	ldw	r4,-16(fp)
10010454:	e17ffd17 	ldw	r5,-12(fp)
10010458:	e1bffe17 	ldw	r6,-8(fp)
1001045c:	00106c80 	call	100106c8 <open>
10010460:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010464:	e0bffa17 	ldw	r2,-24(fp)
10010468:	10002216 	blt	r2,zero,100104f4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1001046c:	04040074 	movhi	r16,4097
10010470:	84075804 	addi	r16,r16,7520
10010474:	e0bffa17 	ldw	r2,-24(fp)
10010478:	1009883a 	mov	r4,r2
1001047c:	01400304 	movi	r5,12
10010480:	0002be00 	call	10002be0 <__mulsi3>
10010484:	8085883a 	add	r2,r16,r2
10010488:	10c00017 	ldw	r3,0(r2)
1001048c:	e0bffb17 	ldw	r2,-20(fp)
10010490:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010494:	04040074 	movhi	r16,4097
10010498:	84075804 	addi	r16,r16,7520
1001049c:	e0bffa17 	ldw	r2,-24(fp)
100104a0:	1009883a 	mov	r4,r2
100104a4:	01400304 	movi	r5,12
100104a8:	0002be00 	call	10002be0 <__mulsi3>
100104ac:	8085883a 	add	r2,r16,r2
100104b0:	10800104 	addi	r2,r2,4
100104b4:	10c00017 	ldw	r3,0(r2)
100104b8:	e0bffb17 	ldw	r2,-20(fp)
100104bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100104c0:	04040074 	movhi	r16,4097
100104c4:	84075804 	addi	r16,r16,7520
100104c8:	e0bffa17 	ldw	r2,-24(fp)
100104cc:	1009883a 	mov	r4,r2
100104d0:	01400304 	movi	r5,12
100104d4:	0002be00 	call	10002be0 <__mulsi3>
100104d8:	8085883a 	add	r2,r16,r2
100104dc:	10800204 	addi	r2,r2,8
100104e0:	10c00017 	ldw	r3,0(r2)
100104e4:	e0bffb17 	ldw	r2,-20(fp)
100104e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100104ec:	e13ffa17 	ldw	r4,-24(fp)
100104f0:	000f0b80 	call	1000f0b8 <alt_release_fd>
  }
} 
100104f4:	e6ffff04 	addi	sp,fp,-4
100104f8:	dfc00217 	ldw	ra,8(sp)
100104fc:	df000117 	ldw	fp,4(sp)
10010500:	dc000017 	ldw	r16,0(sp)
10010504:	dec00304 	addi	sp,sp,12
10010508:	f800283a 	ret

1001050c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001050c:	defffb04 	addi	sp,sp,-20
10010510:	dfc00415 	stw	ra,16(sp)
10010514:	df000315 	stw	fp,12(sp)
10010518:	df000304 	addi	fp,sp,12
1001051c:	e13ffd15 	stw	r4,-12(fp)
10010520:	e17ffe15 	stw	r5,-8(fp)
10010524:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010528:	01040074 	movhi	r4,4097
1001052c:	21075b04 	addi	r4,r4,7532
10010530:	e17ffd17 	ldw	r5,-12(fp)
10010534:	01800044 	movi	r6,1
10010538:	01c07fc4 	movi	r7,511
1001053c:	001042c0 	call	1001042c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010540:	01040074 	movhi	r4,4097
10010544:	21075804 	addi	r4,r4,7520
10010548:	e17ffe17 	ldw	r5,-8(fp)
1001054c:	000d883a 	mov	r6,zero
10010550:	01c07fc4 	movi	r7,511
10010554:	001042c0 	call	1001042c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010558:	01040074 	movhi	r4,4097
1001055c:	21075e04 	addi	r4,r4,7544
10010560:	e17fff17 	ldw	r5,-4(fp)
10010564:	01800044 	movi	r6,1
10010568:	01c07fc4 	movi	r7,511
1001056c:	001042c0 	call	1001042c <alt_open_fd>
}  
10010570:	e037883a 	mov	sp,fp
10010574:	dfc00117 	ldw	ra,4(sp)
10010578:	df000017 	ldw	fp,0(sp)
1001057c:	dec00204 	addi	sp,sp,8
10010580:	f800283a 	ret

10010584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010584:	defffe04 	addi	sp,sp,-8
10010588:	dfc00115 	stw	ra,4(sp)
1001058c:	df000015 	stw	fp,0(sp)
10010590:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010594:	00840074 	movhi	r2,4097
10010598:	108bdb04 	addi	r2,r2,12140
1001059c:	10800017 	ldw	r2,0(r2)
100105a0:	10000526 	beq	r2,zero,100105b8 <alt_get_errno+0x34>
100105a4:	00840074 	movhi	r2,4097
100105a8:	108bdb04 	addi	r2,r2,12140
100105ac:	10800017 	ldw	r2,0(r2)
100105b0:	103ee83a 	callr	r2
100105b4:	00000206 	br	100105c0 <alt_get_errno+0x3c>
100105b8:	00840074 	movhi	r2,4097
100105bc:	1092b004 	addi	r2,r2,19136
}
100105c0:	e037883a 	mov	sp,fp
100105c4:	dfc00117 	ldw	ra,4(sp)
100105c8:	df000017 	ldw	fp,0(sp)
100105cc:	dec00204 	addi	sp,sp,8
100105d0:	f800283a 	ret

100105d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100105d4:	defffb04 	addi	sp,sp,-20
100105d8:	dfc00415 	stw	ra,16(sp)
100105dc:	df000315 	stw	fp,12(sp)
100105e0:	dc000215 	stw	r16,8(sp)
100105e4:	df000304 	addi	fp,sp,12
100105e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100105ec:	e0bffe17 	ldw	r2,-8(fp)
100105f0:	10800217 	ldw	r2,8(r2)
100105f4:	10d00034 	orhi	r3,r2,16384
100105f8:	e0bffe17 	ldw	r2,-8(fp)
100105fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010600:	e03ffd15 	stw	zero,-12(fp)
10010604:	00002306 	br	10010694 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010608:	04040074 	movhi	r16,4097
1001060c:	84075804 	addi	r16,r16,7520
10010610:	e0bffd17 	ldw	r2,-12(fp)
10010614:	1009883a 	mov	r4,r2
10010618:	01400304 	movi	r5,12
1001061c:	0002be00 	call	10002be0 <__mulsi3>
10010620:	8085883a 	add	r2,r16,r2
10010624:	10c00017 	ldw	r3,0(r2)
10010628:	e0bffe17 	ldw	r2,-8(fp)
1001062c:	10800017 	ldw	r2,0(r2)
10010630:	1880151e 	bne	r3,r2,10010688 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010634:	04040074 	movhi	r16,4097
10010638:	84075804 	addi	r16,r16,7520
1001063c:	e0bffd17 	ldw	r2,-12(fp)
10010640:	1009883a 	mov	r4,r2
10010644:	01400304 	movi	r5,12
10010648:	0002be00 	call	10002be0 <__mulsi3>
1001064c:	8085883a 	add	r2,r16,r2
10010650:	10800204 	addi	r2,r2,8
10010654:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010658:	10000b0e 	bge	r2,zero,10010688 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1001065c:	e13ffd17 	ldw	r4,-12(fp)
10010660:	01400304 	movi	r5,12
10010664:	0002be00 	call	10002be0 <__mulsi3>
10010668:	1007883a 	mov	r3,r2
1001066c:	00840074 	movhi	r2,4097
10010670:	10875804 	addi	r2,r2,7520
10010674:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010678:	e0bffe17 	ldw	r2,-8(fp)
1001067c:	18800226 	beq	r3,r2,10010688 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010680:	00bffcc4 	movi	r2,-13
10010684:	00000a06 	br	100106b0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010688:	e0bffd17 	ldw	r2,-12(fp)
1001068c:	10800044 	addi	r2,r2,1
10010690:	e0bffd15 	stw	r2,-12(fp)
10010694:	00840074 	movhi	r2,4097
10010698:	108bda04 	addi	r2,r2,12136
1001069c:	10800017 	ldw	r2,0(r2)
100106a0:	1007883a 	mov	r3,r2
100106a4:	e0bffd17 	ldw	r2,-12(fp)
100106a8:	18bfd72e 	bgeu	r3,r2,10010608 <__alt_data_end+0xf8010608>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100106ac:	0005883a 	mov	r2,zero
}
100106b0:	e6ffff04 	addi	sp,fp,-4
100106b4:	dfc00217 	ldw	ra,8(sp)
100106b8:	df000117 	ldw	fp,4(sp)
100106bc:	dc000017 	ldw	r16,0(sp)
100106c0:	dec00304 	addi	sp,sp,12
100106c4:	f800283a 	ret

100106c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100106c8:	defff604 	addi	sp,sp,-40
100106cc:	dfc00915 	stw	ra,36(sp)
100106d0:	df000815 	stw	fp,32(sp)
100106d4:	df000804 	addi	fp,sp,32
100106d8:	e13ffd15 	stw	r4,-12(fp)
100106dc:	e17ffe15 	stw	r5,-8(fp)
100106e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100106e4:	00bfffc4 	movi	r2,-1
100106e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100106ec:	00bffb44 	movi	r2,-19
100106f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100106f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100106f8:	e13ffd17 	ldw	r4,-12(fp)
100106fc:	01440074 	movhi	r5,4097
10010700:	294bd804 	addi	r5,r5,12128
10010704:	00109e40 	call	100109e4 <alt_find_dev>
10010708:	e0bff815 	stw	r2,-32(fp)
1001070c:	e0bff817 	ldw	r2,-32(fp)
10010710:	1000051e 	bne	r2,zero,10010728 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010714:	e13ffd17 	ldw	r4,-12(fp)
10010718:	0010a740 	call	10010a74 <alt_find_file>
1001071c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010720:	00800044 	movi	r2,1
10010724:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010728:	e0bff817 	ldw	r2,-32(fp)
1001072c:	10002b26 	beq	r2,zero,100107dc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010730:	e13ff817 	ldw	r4,-32(fp)
10010734:	0010b880 	call	10010b88 <alt_get_fd>
10010738:	e0bff915 	stw	r2,-28(fp)
1001073c:	e0bff917 	ldw	r2,-28(fp)
10010740:	1000030e 	bge	r2,zero,10010750 <open+0x88>
    {
      status = index;
10010744:	e0bff917 	ldw	r2,-28(fp)
10010748:	e0bffa15 	stw	r2,-24(fp)
1001074c:	00002506 	br	100107e4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010750:	e13ff917 	ldw	r4,-28(fp)
10010754:	01400304 	movi	r5,12
10010758:	0002be00 	call	10002be0 <__mulsi3>
1001075c:	1007883a 	mov	r3,r2
10010760:	00840074 	movhi	r2,4097
10010764:	10875804 	addi	r2,r2,7520
10010768:	1885883a 	add	r2,r3,r2
1001076c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010770:	e0fffe17 	ldw	r3,-8(fp)
10010774:	00900034 	movhi	r2,16384
10010778:	10bfffc4 	addi	r2,r2,-1
1001077c:	1886703a 	and	r3,r3,r2
10010780:	e0bffc17 	ldw	r2,-16(fp)
10010784:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010788:	e0bffb17 	ldw	r2,-20(fp)
1001078c:	1000051e 	bne	r2,zero,100107a4 <open+0xdc>
10010790:	e13ffc17 	ldw	r4,-16(fp)
10010794:	00105d40 	call	100105d4 <alt_file_locked>
10010798:	e0bffa15 	stw	r2,-24(fp)
1001079c:	e0bffa17 	ldw	r2,-24(fp)
100107a0:	10001016 	blt	r2,zero,100107e4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100107a4:	e0bff817 	ldw	r2,-32(fp)
100107a8:	10800317 	ldw	r2,12(r2)
100107ac:	10000826 	beq	r2,zero,100107d0 <open+0x108>
100107b0:	e0bff817 	ldw	r2,-32(fp)
100107b4:	10800317 	ldw	r2,12(r2)
100107b8:	e13ffc17 	ldw	r4,-16(fp)
100107bc:	e17ffd17 	ldw	r5,-12(fp)
100107c0:	e1bffe17 	ldw	r6,-8(fp)
100107c4:	e1ffff17 	ldw	r7,-4(fp)
100107c8:	103ee83a 	callr	r2
100107cc:	00000106 	br	100107d4 <open+0x10c>
100107d0:	0005883a 	mov	r2,zero
100107d4:	e0bffa15 	stw	r2,-24(fp)
100107d8:	00000206 	br	100107e4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
100107dc:	00bffb44 	movi	r2,-19
100107e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100107e4:	e0bffa17 	ldw	r2,-24(fp)
100107e8:	1000090e 	bge	r2,zero,10010810 <open+0x148>
  {
    alt_release_fd (index);  
100107ec:	e13ff917 	ldw	r4,-28(fp)
100107f0:	000f0b80 	call	1000f0b8 <alt_release_fd>
    ALT_ERRNO = -status;
100107f4:	00105840 	call	10010584 <alt_get_errno>
100107f8:	1007883a 	mov	r3,r2
100107fc:	e0bffa17 	ldw	r2,-24(fp)
10010800:	0085c83a 	sub	r2,zero,r2
10010804:	18800015 	stw	r2,0(r3)
    return -1;
10010808:	00bfffc4 	movi	r2,-1
1001080c:	00000106 	br	10010814 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010810:	e0bff917 	ldw	r2,-28(fp)
}
10010814:	e037883a 	mov	sp,fp
10010818:	dfc00117 	ldw	ra,4(sp)
1001081c:	df000017 	ldw	fp,0(sp)
10010820:	dec00204 	addi	sp,sp,8
10010824:	f800283a 	ret

10010828 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010828:	defffa04 	addi	sp,sp,-24
1001082c:	df000515 	stw	fp,20(sp)
10010830:	df000504 	addi	fp,sp,20
10010834:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010838:	0005303a 	rdctl	r2,status
1001083c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010840:	e0fffc17 	ldw	r3,-16(fp)
10010844:	00bfff84 	movi	r2,-2
10010848:	1884703a 	and	r2,r3,r2
1001084c:	1001703a 	wrctl	status,r2
  
  return context;
10010850:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010854:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10010858:	e0bfff17 	ldw	r2,-4(fp)
1001085c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010860:	e0bffd17 	ldw	r2,-12(fp)
10010864:	10800017 	ldw	r2,0(r2)
10010868:	e0fffd17 	ldw	r3,-12(fp)
1001086c:	18c00117 	ldw	r3,4(r3)
10010870:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010874:	e0bffd17 	ldw	r2,-12(fp)
10010878:	10800117 	ldw	r2,4(r2)
1001087c:	e0fffd17 	ldw	r3,-12(fp)
10010880:	18c00017 	ldw	r3,0(r3)
10010884:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10010888:	e0bffd17 	ldw	r2,-12(fp)
1001088c:	e0fffd17 	ldw	r3,-12(fp)
10010890:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010894:	e0bffd17 	ldw	r2,-12(fp)
10010898:	e0fffd17 	ldw	r3,-12(fp)
1001089c:	10c00015 	stw	r3,0(r2)
100108a0:	e0bffb17 	ldw	r2,-20(fp)
100108a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100108a8:	e0bffe17 	ldw	r2,-8(fp)
100108ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100108b0:	e037883a 	mov	sp,fp
100108b4:	df000017 	ldw	fp,0(sp)
100108b8:	dec00104 	addi	sp,sp,4
100108bc:	f800283a 	ret

100108c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100108c0:	defffb04 	addi	sp,sp,-20
100108c4:	dfc00415 	stw	ra,16(sp)
100108c8:	df000315 	stw	fp,12(sp)
100108cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100108d0:	d0a00e17 	ldw	r2,-32712(gp)
100108d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100108d8:	d0a6e617 	ldw	r2,-25704(gp)
100108dc:	10800044 	addi	r2,r2,1
100108e0:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100108e4:	00002e06 	br	100109a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100108e8:	e0bffd17 	ldw	r2,-12(fp)
100108ec:	10800017 	ldw	r2,0(r2)
100108f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100108f4:	e0bffd17 	ldw	r2,-12(fp)
100108f8:	10800403 	ldbu	r2,16(r2)
100108fc:	10803fcc 	andi	r2,r2,255
10010900:	10000426 	beq	r2,zero,10010914 <alt_tick+0x54>
10010904:	d0a6e617 	ldw	r2,-25704(gp)
10010908:	1000021e 	bne	r2,zero,10010914 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001090c:	e0bffd17 	ldw	r2,-12(fp)
10010910:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010914:	e0bffd17 	ldw	r2,-12(fp)
10010918:	10800217 	ldw	r2,8(r2)
1001091c:	d0e6e617 	ldw	r3,-25704(gp)
10010920:	18801d36 	bltu	r3,r2,10010998 <alt_tick+0xd8>
10010924:	e0bffd17 	ldw	r2,-12(fp)
10010928:	10800403 	ldbu	r2,16(r2)
1001092c:	10803fcc 	andi	r2,r2,255
10010930:	1000191e 	bne	r2,zero,10010998 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010934:	e0bffd17 	ldw	r2,-12(fp)
10010938:	10800317 	ldw	r2,12(r2)
1001093c:	e0fffd17 	ldw	r3,-12(fp)
10010940:	18c00517 	ldw	r3,20(r3)
10010944:	1809883a 	mov	r4,r3
10010948:	103ee83a 	callr	r2
1001094c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010950:	e0bfff17 	ldw	r2,-4(fp)
10010954:	1000031e 	bne	r2,zero,10010964 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10010958:	e13ffd17 	ldw	r4,-12(fp)
1001095c:	00108280 	call	10010828 <alt_alarm_stop>
10010960:	00000d06 	br	10010998 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010964:	e0bffd17 	ldw	r2,-12(fp)
10010968:	10c00217 	ldw	r3,8(r2)
1001096c:	e0bfff17 	ldw	r2,-4(fp)
10010970:	1887883a 	add	r3,r3,r2
10010974:	e0bffd17 	ldw	r2,-12(fp)
10010978:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001097c:	e0bffd17 	ldw	r2,-12(fp)
10010980:	10c00217 	ldw	r3,8(r2)
10010984:	d0a6e617 	ldw	r2,-25704(gp)
10010988:	1880032e 	bgeu	r3,r2,10010998 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001098c:	e0bffd17 	ldw	r2,-12(fp)
10010990:	00c00044 	movi	r3,1
10010994:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10010998:	e0bffe17 	ldw	r2,-8(fp)
1001099c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100109a0:	e0fffd17 	ldw	r3,-12(fp)
100109a4:	d0a00e04 	addi	r2,gp,-32712
100109a8:	18bfcf1e 	bne	r3,r2,100108e8 <__alt_data_end+0xf80108e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100109ac:	0001883a 	nop
}
100109b0:	e037883a 	mov	sp,fp
100109b4:	dfc00117 	ldw	ra,4(sp)
100109b8:	df000017 	ldw	fp,0(sp)
100109bc:	dec00204 	addi	sp,sp,8
100109c0:	f800283a 	ret

100109c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100109c4:	deffff04 	addi	sp,sp,-4
100109c8:	df000015 	stw	fp,0(sp)
100109cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100109d0:	000170fa 	wrctl	ienable,zero
}
100109d4:	e037883a 	mov	sp,fp
100109d8:	df000017 	ldw	fp,0(sp)
100109dc:	dec00104 	addi	sp,sp,4
100109e0:	f800283a 	ret

100109e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100109e4:	defffa04 	addi	sp,sp,-24
100109e8:	dfc00515 	stw	ra,20(sp)
100109ec:	df000415 	stw	fp,16(sp)
100109f0:	df000404 	addi	fp,sp,16
100109f4:	e13ffe15 	stw	r4,-8(fp)
100109f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100109fc:	e0bfff17 	ldw	r2,-4(fp)
10010a00:	10800017 	ldw	r2,0(r2)
10010a04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010a08:	e13ffe17 	ldw	r4,-8(fp)
10010a0c:	00040e00 	call	100040e0 <strlen>
10010a10:	10800044 	addi	r2,r2,1
10010a14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010a18:	00000d06 	br	10010a50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010a1c:	e0bffc17 	ldw	r2,-16(fp)
10010a20:	10c00217 	ldw	r3,8(r2)
10010a24:	e0bffd17 	ldw	r2,-12(fp)
10010a28:	1809883a 	mov	r4,r3
10010a2c:	e17ffe17 	ldw	r5,-8(fp)
10010a30:	100d883a 	mov	r6,r2
10010a34:	0010d440 	call	10010d44 <memcmp>
10010a38:	1000021e 	bne	r2,zero,10010a44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010a3c:	e0bffc17 	ldw	r2,-16(fp)
10010a40:	00000706 	br	10010a60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010a44:	e0bffc17 	ldw	r2,-16(fp)
10010a48:	10800017 	ldw	r2,0(r2)
10010a4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010a50:	e0fffc17 	ldw	r3,-16(fp)
10010a54:	e0bfff17 	ldw	r2,-4(fp)
10010a58:	18bff01e 	bne	r3,r2,10010a1c <__alt_data_end+0xf8010a1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010a5c:	0005883a 	mov	r2,zero
}
10010a60:	e037883a 	mov	sp,fp
10010a64:	dfc00117 	ldw	ra,4(sp)
10010a68:	df000017 	ldw	fp,0(sp)
10010a6c:	dec00204 	addi	sp,sp,8
10010a70:	f800283a 	ret

10010a74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010a74:	defffb04 	addi	sp,sp,-20
10010a78:	dfc00415 	stw	ra,16(sp)
10010a7c:	df000315 	stw	fp,12(sp)
10010a80:	df000304 	addi	fp,sp,12
10010a84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010a88:	00840074 	movhi	r2,4097
10010a8c:	108bd604 	addi	r2,r2,12120
10010a90:	10800017 	ldw	r2,0(r2)
10010a94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010a98:	00003106 	br	10010b60 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010a9c:	e0bffd17 	ldw	r2,-12(fp)
10010aa0:	10800217 	ldw	r2,8(r2)
10010aa4:	1009883a 	mov	r4,r2
10010aa8:	00040e00 	call	100040e0 <strlen>
10010aac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010ab0:	e0bffd17 	ldw	r2,-12(fp)
10010ab4:	10c00217 	ldw	r3,8(r2)
10010ab8:	e0bffe17 	ldw	r2,-8(fp)
10010abc:	10bfffc4 	addi	r2,r2,-1
10010ac0:	1885883a 	add	r2,r3,r2
10010ac4:	10800003 	ldbu	r2,0(r2)
10010ac8:	10803fcc 	andi	r2,r2,255
10010acc:	1080201c 	xori	r2,r2,128
10010ad0:	10bfe004 	addi	r2,r2,-128
10010ad4:	10800bd8 	cmpnei	r2,r2,47
10010ad8:	1000031e 	bne	r2,zero,10010ae8 <alt_find_file+0x74>
    {
      len -= 1;
10010adc:	e0bffe17 	ldw	r2,-8(fp)
10010ae0:	10bfffc4 	addi	r2,r2,-1
10010ae4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010ae8:	e0bffe17 	ldw	r2,-8(fp)
10010aec:	e0ffff17 	ldw	r3,-4(fp)
10010af0:	1885883a 	add	r2,r3,r2
10010af4:	10800003 	ldbu	r2,0(r2)
10010af8:	10803fcc 	andi	r2,r2,255
10010afc:	1080201c 	xori	r2,r2,128
10010b00:	10bfe004 	addi	r2,r2,-128
10010b04:	10800be0 	cmpeqi	r2,r2,47
10010b08:	1000081e 	bne	r2,zero,10010b2c <alt_find_file+0xb8>
10010b0c:	e0bffe17 	ldw	r2,-8(fp)
10010b10:	e0ffff17 	ldw	r3,-4(fp)
10010b14:	1885883a 	add	r2,r3,r2
10010b18:	10800003 	ldbu	r2,0(r2)
10010b1c:	10803fcc 	andi	r2,r2,255
10010b20:	1080201c 	xori	r2,r2,128
10010b24:	10bfe004 	addi	r2,r2,-128
10010b28:	10000a1e 	bne	r2,zero,10010b54 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010b2c:	e0bffd17 	ldw	r2,-12(fp)
10010b30:	10c00217 	ldw	r3,8(r2)
10010b34:	e0bffe17 	ldw	r2,-8(fp)
10010b38:	1809883a 	mov	r4,r3
10010b3c:	e17fff17 	ldw	r5,-4(fp)
10010b40:	100d883a 	mov	r6,r2
10010b44:	0010d440 	call	10010d44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010b48:	1000021e 	bne	r2,zero,10010b54 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010b4c:	e0bffd17 	ldw	r2,-12(fp)
10010b50:	00000806 	br	10010b74 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010b54:	e0bffd17 	ldw	r2,-12(fp)
10010b58:	10800017 	ldw	r2,0(r2)
10010b5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010b60:	e0fffd17 	ldw	r3,-12(fp)
10010b64:	00840074 	movhi	r2,4097
10010b68:	108bd604 	addi	r2,r2,12120
10010b6c:	18bfcb1e 	bne	r3,r2,10010a9c <__alt_data_end+0xf8010a9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010b70:	0005883a 	mov	r2,zero
}
10010b74:	e037883a 	mov	sp,fp
10010b78:	dfc00117 	ldw	ra,4(sp)
10010b7c:	df000017 	ldw	fp,0(sp)
10010b80:	dec00204 	addi	sp,sp,8
10010b84:	f800283a 	ret

10010b88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010b88:	defffa04 	addi	sp,sp,-24
10010b8c:	dfc00515 	stw	ra,20(sp)
10010b90:	df000415 	stw	fp,16(sp)
10010b94:	dc000315 	stw	r16,12(sp)
10010b98:	df000404 	addi	fp,sp,16
10010b9c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010ba0:	00bffa04 	movi	r2,-24
10010ba4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010ba8:	e03ffc15 	stw	zero,-16(fp)
10010bac:	00002106 	br	10010c34 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010bb0:	04040074 	movhi	r16,4097
10010bb4:	84075804 	addi	r16,r16,7520
10010bb8:	e0bffc17 	ldw	r2,-16(fp)
10010bbc:	1009883a 	mov	r4,r2
10010bc0:	01400304 	movi	r5,12
10010bc4:	0002be00 	call	10002be0 <__mulsi3>
10010bc8:	8085883a 	add	r2,r16,r2
10010bcc:	10800017 	ldw	r2,0(r2)
10010bd0:	1000151e 	bne	r2,zero,10010c28 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010bd4:	04040074 	movhi	r16,4097
10010bd8:	84075804 	addi	r16,r16,7520
10010bdc:	e0bffc17 	ldw	r2,-16(fp)
10010be0:	1009883a 	mov	r4,r2
10010be4:	01400304 	movi	r5,12
10010be8:	0002be00 	call	10002be0 <__mulsi3>
10010bec:	8085883a 	add	r2,r16,r2
10010bf0:	e0fffe17 	ldw	r3,-8(fp)
10010bf4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010bf8:	00840074 	movhi	r2,4097
10010bfc:	108bda04 	addi	r2,r2,12136
10010c00:	10c00017 	ldw	r3,0(r2)
10010c04:	e0bffc17 	ldw	r2,-16(fp)
10010c08:	1880040e 	bge	r3,r2,10010c1c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010c0c:	00840074 	movhi	r2,4097
10010c10:	108bda04 	addi	r2,r2,12136
10010c14:	e0fffc17 	ldw	r3,-16(fp)
10010c18:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010c1c:	e0bffc17 	ldw	r2,-16(fp)
10010c20:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010c24:	00000606 	br	10010c40 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010c28:	e0bffc17 	ldw	r2,-16(fp)
10010c2c:	10800044 	addi	r2,r2,1
10010c30:	e0bffc15 	stw	r2,-16(fp)
10010c34:	e0bffc17 	ldw	r2,-16(fp)
10010c38:	10800810 	cmplti	r2,r2,32
10010c3c:	103fdc1e 	bne	r2,zero,10010bb0 <__alt_data_end+0xf8010bb0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010c40:	e0bffd17 	ldw	r2,-12(fp)
}
10010c44:	e6ffff04 	addi	sp,fp,-4
10010c48:	dfc00217 	ldw	ra,8(sp)
10010c4c:	df000117 	ldw	fp,4(sp)
10010c50:	dc000017 	ldw	r16,0(sp)
10010c54:	dec00304 	addi	sp,sp,12
10010c58:	f800283a 	ret

10010c5c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10010c5c:	defffe04 	addi	sp,sp,-8
10010c60:	df000115 	stw	fp,4(sp)
10010c64:	df000104 	addi	fp,sp,4
10010c68:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10010c6c:	e0bfff17 	ldw	r2,-4(fp)
10010c70:	10bffe84 	addi	r2,r2,-6
10010c74:	10c00428 	cmpgeui	r3,r2,16
10010c78:	18001a1e 	bne	r3,zero,10010ce4 <alt_exception_cause_generated_bad_addr+0x88>
10010c7c:	100690ba 	slli	r3,r2,2
10010c80:	00840074 	movhi	r2,4097
10010c84:	10832504 	addi	r2,r2,3220
10010c88:	1885883a 	add	r2,r3,r2
10010c8c:	10800017 	ldw	r2,0(r2)
10010c90:	1000683a 	jmp	r2
10010c94:	10010cd4 	ori	zero,r2,1075
10010c98:	10010cd4 	ori	zero,r2,1075
10010c9c:	10010ce4 	muli	zero,r2,1075
10010ca0:	10010ce4 	muli	zero,r2,1075
10010ca4:	10010ce4 	muli	zero,r2,1075
10010ca8:	10010cd4 	ori	zero,r2,1075
10010cac:	10010cdc 	xori	zero,r2,1075
10010cb0:	10010ce4 	muli	zero,r2,1075
10010cb4:	10010cd4 	ori	zero,r2,1075
10010cb8:	10010cd4 	ori	zero,r2,1075
10010cbc:	10010ce4 	muli	zero,r2,1075
10010cc0:	10010cd4 	ori	zero,r2,1075
10010cc4:	10010cdc 	xori	zero,r2,1075
10010cc8:	10010ce4 	muli	zero,r2,1075
10010ccc:	10010ce4 	muli	zero,r2,1075
10010cd0:	10010cd4 	ori	zero,r2,1075
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010cd4:	00800044 	movi	r2,1
10010cd8:	00000306 	br	10010ce8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010cdc:	0005883a 	mov	r2,zero
10010ce0:	00000106 	br	10010ce8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010ce4:	0005883a 	mov	r2,zero
  }
}
10010ce8:	e037883a 	mov	sp,fp
10010cec:	df000017 	ldw	fp,0(sp)
10010cf0:	dec00104 	addi	sp,sp,4
10010cf4:	f800283a 	ret

10010cf8 <atexit>:
10010cf8:	200b883a 	mov	r5,r4
10010cfc:	000d883a 	mov	r6,zero
10010d00:	0009883a 	mov	r4,zero
10010d04:	000f883a 	mov	r7,zero
10010d08:	0010dc01 	jmpi	10010dc0 <__register_exitproc>

10010d0c <exit>:
10010d0c:	defffe04 	addi	sp,sp,-8
10010d10:	000b883a 	mov	r5,zero
10010d14:	dc000015 	stw	r16,0(sp)
10010d18:	dfc00115 	stw	ra,4(sp)
10010d1c:	2021883a 	mov	r16,r4
10010d20:	0010ed40 	call	10010ed4 <__call_exitprocs>
10010d24:	00840074 	movhi	r2,4097
10010d28:	108bd004 	addi	r2,r2,12096
10010d2c:	11000017 	ldw	r4,0(r2)
10010d30:	20800f17 	ldw	r2,60(r4)
10010d34:	10000126 	beq	r2,zero,10010d3c <exit+0x30>
10010d38:	103ee83a 	callr	r2
10010d3c:	8009883a 	mov	r4,r16
10010d40:	00110680 	call	10011068 <_exit>

10010d44 <memcmp>:
10010d44:	01c000c4 	movi	r7,3
10010d48:	3980192e 	bgeu	r7,r6,10010db0 <memcmp+0x6c>
10010d4c:	2144b03a 	or	r2,r4,r5
10010d50:	11c4703a 	and	r2,r2,r7
10010d54:	10000f26 	beq	r2,zero,10010d94 <memcmp+0x50>
10010d58:	20800003 	ldbu	r2,0(r4)
10010d5c:	28c00003 	ldbu	r3,0(r5)
10010d60:	10c0151e 	bne	r2,r3,10010db8 <memcmp+0x74>
10010d64:	31bfff84 	addi	r6,r6,-2
10010d68:	01ffffc4 	movi	r7,-1
10010d6c:	00000406 	br	10010d80 <memcmp+0x3c>
10010d70:	20800003 	ldbu	r2,0(r4)
10010d74:	28c00003 	ldbu	r3,0(r5)
10010d78:	31bfffc4 	addi	r6,r6,-1
10010d7c:	10c00e1e 	bne	r2,r3,10010db8 <memcmp+0x74>
10010d80:	21000044 	addi	r4,r4,1
10010d84:	29400044 	addi	r5,r5,1
10010d88:	31fff91e 	bne	r6,r7,10010d70 <__alt_data_end+0xf8010d70>
10010d8c:	0005883a 	mov	r2,zero
10010d90:	f800283a 	ret
10010d94:	20c00017 	ldw	r3,0(r4)
10010d98:	28800017 	ldw	r2,0(r5)
10010d9c:	1880041e 	bne	r3,r2,10010db0 <memcmp+0x6c>
10010da0:	31bfff04 	addi	r6,r6,-4
10010da4:	21000104 	addi	r4,r4,4
10010da8:	29400104 	addi	r5,r5,4
10010dac:	39bff936 	bltu	r7,r6,10010d94 <__alt_data_end+0xf8010d94>
10010db0:	303fe91e 	bne	r6,zero,10010d58 <__alt_data_end+0xf8010d58>
10010db4:	003ff506 	br	10010d8c <__alt_data_end+0xf8010d8c>
10010db8:	10c5c83a 	sub	r2,r2,r3
10010dbc:	f800283a 	ret

10010dc0 <__register_exitproc>:
10010dc0:	00840074 	movhi	r2,4097
10010dc4:	defffa04 	addi	sp,sp,-24
10010dc8:	108bd004 	addi	r2,r2,12096
10010dcc:	dc000315 	stw	r16,12(sp)
10010dd0:	14000017 	ldw	r16,0(r2)
10010dd4:	dc400415 	stw	r17,16(sp)
10010dd8:	dfc00515 	stw	ra,20(sp)
10010ddc:	80805217 	ldw	r2,328(r16)
10010de0:	2023883a 	mov	r17,r4
10010de4:	10003626 	beq	r2,zero,10010ec0 <__register_exitproc+0x100>
10010de8:	10c00117 	ldw	r3,4(r2)
10010dec:	010007c4 	movi	r4,31
10010df0:	20c00e16 	blt	r4,r3,10010e2c <__register_exitproc+0x6c>
10010df4:	1a400044 	addi	r9,r3,1
10010df8:	8800211e 	bne	r17,zero,10010e80 <__register_exitproc+0xc0>
10010dfc:	18c00084 	addi	r3,r3,2
10010e00:	18c7883a 	add	r3,r3,r3
10010e04:	18c7883a 	add	r3,r3,r3
10010e08:	12400115 	stw	r9,4(r2)
10010e0c:	10c7883a 	add	r3,r2,r3
10010e10:	19400015 	stw	r5,0(r3)
10010e14:	0005883a 	mov	r2,zero
10010e18:	dfc00517 	ldw	ra,20(sp)
10010e1c:	dc400417 	ldw	r17,16(sp)
10010e20:	dc000317 	ldw	r16,12(sp)
10010e24:	dec00604 	addi	sp,sp,24
10010e28:	f800283a 	ret
10010e2c:	00800034 	movhi	r2,0
10010e30:	10800004 	addi	r2,r2,0
10010e34:	10002526 	beq	r2,zero,10010ecc <__register_exitproc+0x10c>
10010e38:	01006404 	movi	r4,400
10010e3c:	d9400015 	stw	r5,0(sp)
10010e40:	d9800115 	stw	r6,4(sp)
10010e44:	d9c00215 	stw	r7,8(sp)
10010e48:	00000000 	call	10000000 <__alt_mem_sdram>
10010e4c:	d9400017 	ldw	r5,0(sp)
10010e50:	d9800117 	ldw	r6,4(sp)
10010e54:	d9c00217 	ldw	r7,8(sp)
10010e58:	10001c26 	beq	r2,zero,10010ecc <__register_exitproc+0x10c>
10010e5c:	80c05217 	ldw	r3,328(r16)
10010e60:	10000115 	stw	zero,4(r2)
10010e64:	02400044 	movi	r9,1
10010e68:	10c00015 	stw	r3,0(r2)
10010e6c:	80805215 	stw	r2,328(r16)
10010e70:	10006215 	stw	zero,392(r2)
10010e74:	10006315 	stw	zero,396(r2)
10010e78:	0007883a 	mov	r3,zero
10010e7c:	883fdf26 	beq	r17,zero,10010dfc <__alt_data_end+0xf8010dfc>
10010e80:	18d1883a 	add	r8,r3,r3
10010e84:	4211883a 	add	r8,r8,r8
10010e88:	1211883a 	add	r8,r2,r8
10010e8c:	41802215 	stw	r6,136(r8)
10010e90:	01000044 	movi	r4,1
10010e94:	11806217 	ldw	r6,392(r2)
10010e98:	20c8983a 	sll	r4,r4,r3
10010e9c:	310cb03a 	or	r6,r6,r4
10010ea0:	11806215 	stw	r6,392(r2)
10010ea4:	41c04215 	stw	r7,264(r8)
10010ea8:	01800084 	movi	r6,2
10010eac:	89bfd31e 	bne	r17,r6,10010dfc <__alt_data_end+0xf8010dfc>
10010eb0:	11806317 	ldw	r6,396(r2)
10010eb4:	3108b03a 	or	r4,r6,r4
10010eb8:	11006315 	stw	r4,396(r2)
10010ebc:	003fcf06 	br	10010dfc <__alt_data_end+0xf8010dfc>
10010ec0:	80805304 	addi	r2,r16,332
10010ec4:	80805215 	stw	r2,328(r16)
10010ec8:	003fc706 	br	10010de8 <__alt_data_end+0xf8010de8>
10010ecc:	00bfffc4 	movi	r2,-1
10010ed0:	003fd106 	br	10010e18 <__alt_data_end+0xf8010e18>

10010ed4 <__call_exitprocs>:
10010ed4:	00840074 	movhi	r2,4097
10010ed8:	108bd004 	addi	r2,r2,12096
10010edc:	10800017 	ldw	r2,0(r2)
10010ee0:	defff404 	addi	sp,sp,-48
10010ee4:	dd800815 	stw	r22,32(sp)
10010ee8:	d8800015 	stw	r2,0(sp)
10010eec:	10805204 	addi	r2,r2,328
10010ef0:	dd000615 	stw	r20,24(sp)
10010ef4:	dc800415 	stw	r18,16(sp)
10010ef8:	dfc00b15 	stw	ra,44(sp)
10010efc:	df000a15 	stw	fp,40(sp)
10010f00:	ddc00915 	stw	r23,36(sp)
10010f04:	dd400715 	stw	r21,28(sp)
10010f08:	dcc00515 	stw	r19,20(sp)
10010f0c:	dc400315 	stw	r17,12(sp)
10010f10:	dc000215 	stw	r16,8(sp)
10010f14:	2025883a 	mov	r18,r4
10010f18:	2829883a 	mov	r20,r5
10010f1c:	d8800115 	stw	r2,4(sp)
10010f20:	05bfffc4 	movi	r22,-1
10010f24:	d8800017 	ldw	r2,0(sp)
10010f28:	14c05217 	ldw	r19,328(r2)
10010f2c:	98001d26 	beq	r19,zero,10010fa4 <__call_exitprocs+0xd0>
10010f30:	dd400117 	ldw	r21,4(sp)
10010f34:	98800117 	ldw	r2,4(r19)
10010f38:	173fffc4 	addi	fp,r2,-1
10010f3c:	e0000d16 	blt	fp,zero,10010f74 <__call_exitprocs+0xa0>
10010f40:	14000044 	addi	r16,r2,1
10010f44:	8421883a 	add	r16,r16,r16
10010f48:	8421883a 	add	r16,r16,r16
10010f4c:	84402004 	addi	r17,r16,128
10010f50:	9c63883a 	add	r17,r19,r17
10010f54:	9c21883a 	add	r16,r19,r16
10010f58:	a0001e26 	beq	r20,zero,10010fd4 <__call_exitprocs+0x100>
10010f5c:	80804017 	ldw	r2,256(r16)
10010f60:	15001c26 	beq	r2,r20,10010fd4 <__call_exitprocs+0x100>
10010f64:	e73fffc4 	addi	fp,fp,-1
10010f68:	843fff04 	addi	r16,r16,-4
10010f6c:	8c7fff04 	addi	r17,r17,-4
10010f70:	e5bff91e 	bne	fp,r22,10010f58 <__alt_data_end+0xf8010f58>
10010f74:	00800034 	movhi	r2,0
10010f78:	10800004 	addi	r2,r2,0
10010f7c:	10000926 	beq	r2,zero,10010fa4 <__call_exitprocs+0xd0>
10010f80:	98800117 	ldw	r2,4(r19)
10010f84:	1000311e 	bne	r2,zero,1001104c <__call_exitprocs+0x178>
10010f88:	98800017 	ldw	r2,0(r19)
10010f8c:	10003426 	beq	r2,zero,10011060 <__call_exitprocs+0x18c>
10010f90:	9809883a 	mov	r4,r19
10010f94:	a8800015 	stw	r2,0(r21)
10010f98:	00000000 	call	10000000 <__alt_mem_sdram>
10010f9c:	acc00017 	ldw	r19,0(r21)
10010fa0:	983fe41e 	bne	r19,zero,10010f34 <__alt_data_end+0xf8010f34>
10010fa4:	dfc00b17 	ldw	ra,44(sp)
10010fa8:	df000a17 	ldw	fp,40(sp)
10010fac:	ddc00917 	ldw	r23,36(sp)
10010fb0:	dd800817 	ldw	r22,32(sp)
10010fb4:	dd400717 	ldw	r21,28(sp)
10010fb8:	dd000617 	ldw	r20,24(sp)
10010fbc:	dcc00517 	ldw	r19,20(sp)
10010fc0:	dc800417 	ldw	r18,16(sp)
10010fc4:	dc400317 	ldw	r17,12(sp)
10010fc8:	dc000217 	ldw	r16,8(sp)
10010fcc:	dec00c04 	addi	sp,sp,48
10010fd0:	f800283a 	ret
10010fd4:	98800117 	ldw	r2,4(r19)
10010fd8:	80c00017 	ldw	r3,0(r16)
10010fdc:	10bfffc4 	addi	r2,r2,-1
10010fe0:	17001526 	beq	r2,fp,10011038 <__call_exitprocs+0x164>
10010fe4:	80000015 	stw	zero,0(r16)
10010fe8:	183fde26 	beq	r3,zero,10010f64 <__alt_data_end+0xf8010f64>
10010fec:	00800044 	movi	r2,1
10010ff0:	1708983a 	sll	r4,r2,fp
10010ff4:	98806217 	ldw	r2,392(r19)
10010ff8:	9dc00117 	ldw	r23,4(r19)
10010ffc:	2084703a 	and	r2,r4,r2
10011000:	1000061e 	bne	r2,zero,1001101c <__call_exitprocs+0x148>
10011004:	183ee83a 	callr	r3
10011008:	98800117 	ldw	r2,4(r19)
1001100c:	15ffc51e 	bne	r2,r23,10010f24 <__alt_data_end+0xf8010f24>
10011010:	a8800017 	ldw	r2,0(r21)
10011014:	14ffd326 	beq	r2,r19,10010f64 <__alt_data_end+0xf8010f64>
10011018:	003fc206 	br	10010f24 <__alt_data_end+0xf8010f24>
1001101c:	98806317 	ldw	r2,396(r19)
10011020:	2084703a 	and	r2,r4,r2
10011024:	1000061e 	bne	r2,zero,10011040 <__call_exitprocs+0x16c>
10011028:	89400017 	ldw	r5,0(r17)
1001102c:	9009883a 	mov	r4,r18
10011030:	183ee83a 	callr	r3
10011034:	003ff406 	br	10011008 <__alt_data_end+0xf8011008>
10011038:	9f000115 	stw	fp,4(r19)
1001103c:	003fea06 	br	10010fe8 <__alt_data_end+0xf8010fe8>
10011040:	89000017 	ldw	r4,0(r17)
10011044:	183ee83a 	callr	r3
10011048:	003fef06 	br	10011008 <__alt_data_end+0xf8011008>
1001104c:	98800017 	ldw	r2,0(r19)
10011050:	982b883a 	mov	r21,r19
10011054:	1027883a 	mov	r19,r2
10011058:	983fb61e 	bne	r19,zero,10010f34 <__alt_data_end+0xf8010f34>
1001105c:	003fd106 	br	10010fa4 <__alt_data_end+0xf8010fa4>
10011060:	0005883a 	mov	r2,zero
10011064:	003ffa06 	br	10011050 <__alt_data_end+0xf8011050>

10011068 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011068:	defffd04 	addi	sp,sp,-12
1001106c:	df000215 	stw	fp,8(sp)
10011070:	df000204 	addi	fp,sp,8
10011074:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011078:	0001883a 	nop
1001107c:	e0bfff17 	ldw	r2,-4(fp)
10011080:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011084:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011088:	10000226 	beq	r2,zero,10011094 <_exit+0x2c>
    ALT_SIM_FAIL();
1001108c:	002af070 	cmpltui	zero,zero,43969
10011090:	00000106 	br	10011098 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011094:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011098:	003fff06 	br	10011098 <__alt_data_end+0xf8011098>
