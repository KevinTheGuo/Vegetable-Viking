
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000bd30 memsz 0x0000bd30 flags r-x
    LOAD off    0x0000cd50 vaddr 0x1000bd50 paddr 0x1000d7c0 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x0000f230 vaddr 0x1000f230 paddr 0x1000f230 align 2**12
         filesz 0x00000000 memsz 0x000003b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b93c  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e8  1000bb68  1000bb68  0000cb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  1000bd50  1000d7c0  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003b0  1000f230  1000f230  0000f230  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000e7c0  2**0
                  CONTENTS
  7 .sdram        00000000  1000f5e0  1000f5e0  0000e7c0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000e7c0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  0000e7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001bf15  00000000  00000000  0000f510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007d42  00000000  00000000  0002b425  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000935f  00000000  00000000  00033167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001ce4  00000000  00000000  0003c4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000034e3  00000000  00000000  0003e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000ef46  00000000  00000000  0004168f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000505d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001098  00000000  00000000  000505e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00054495  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00054498  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000544a4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000544a5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000544a6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000544aa  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000544ae  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000544b2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000544bd  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000544c8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000544d3  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  000544de  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  000544f8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  0005893f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1000bb68 l    d  .rodata	00000000 .rodata
1000bd50 l    d  .rwdata	00000000 .rwdata
1000f230 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1000f5e0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
1000bbf4 l     O .rodata	00000010 bp
1000bbd4 l     O .rodata	00000010 dp_l
1000bbe4 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
1000bc04 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003f14 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
1000bd50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008398 l     F .text	00000008 __fp_lock
100083a0 l     F .text	00000008 __fp_unlock
100083b4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
10009410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10009538 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10009564 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000966c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10009768 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000984c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10009a30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1000d7b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10009cb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10009e04 l     F .text	00000038 alt_dev_reg
1000c724 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000a0e0 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000a2e4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000aa60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000aef8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000b050 l     F .text	00000050 alt_get_errno
1000b0a0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000f274 g     O .bss	00000004 alt_instruction_exception_handler
1000127c g     F .text	000000bc convertDecimalToBinary
10009304 g     F .text	00000054 _isatty_r
10009978 g     F .text	00000078 alt_main
10006874 g     F .text	000000b8 _puts_r
1000f4e0 g     O .bss	00000100 alt_irq
10002cb4 g     F .text	00000014 fabs
10009358 g     F .text	0000005c _lseek_r
1000d7c0 g       *ABS*	00000000 __flash_rwdata_start
10005284 g     F .text	00000084 .hidden __eqdf2
1000f5e0 g       *ABS*	00000000 __alt_heap_start
10009084 g     F .text	0000005c __sseek
100086fc g     F .text	00000010 __sinit
10008554 g     F .text	00000078 __sfmoreglue
10009a10 g     F .text	00000020 __malloc_unlock
10000518 g     F .text	000002ac spawningEngine
100078c0 g     F .text	0000015c memmove
100086e4 g     F .text	00000018 _cleanup
10005308 g     F .text	000000e0 .hidden __gtdf2
1000b490 g     F .text	00000020 altera_nios2_gen2_irq_init
10006864 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100092ac g     F .text	00000058 _fstat_r
1000f258 g     O .bss	00000004 errno
10009000 g     F .text	00000008 __seofread
1000f260 g     O .bss	00000004 alt_argv
10015784 g       *ABS*	00000000 _gp
1000f230 g     O .bss	00000004 yCursor
1000c5a4 g     O .rwdata	00000180 alt_fd_list
1000b4b0 g     F .text	00000090 alt_find_dev
10007788 g     F .text	00000138 memcpy
100083a8 g     F .text	0000000c _cleanup_r
1000668c g     F .text	000000d0 .hidden __floatsidf
1000afd8 g     F .text	00000078 alt_io_redirect
100053e8 g     F .text	000000e0 .hidden __ltdf2
1000f234 g     O .bss	00000004 xCursor
1000bb68 g       *ABS*	00000000 __DTOR_END__
1000692c g     F .text	00000014 puts
1000b728 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002ce4 g     F .text	00000074 __fpclassifyd
1000a4e0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10004030 g     F .text	00000008 .hidden __udivsi3
100096bc g     F .text	000000ac isatty
10003244 g     F .text	00000074 .hidden __fixunsdfsi
1000f254 g     O .bss	00000004 __malloc_top_pad
10006a54 g     F .text	000004a4 __sfvwrite_r
10007fbc g     F .text	00000054 _sbrk_r
1000f238 g     O .bss	00000004 cursorClicked
100093b4 g     F .text	0000005c _read_r
1000d7a8 g     O .rwdata	00000004 alt_max_fd
10009198 g     F .text	00000100 _fclose_r
10008368 g     F .text	00000030 fflush
1000f250 g     O .bss	00000004 __malloc_max_sbrked_mem
10004068 g     F .text	0000089c .hidden __adddf3
100038f8 g     F .text	0000061c .hidden __umoddi3
1000989c g     F .text	000000dc lseek
1000d784 g     O .rwdata	00000004 __fdlib_version
1000d788 g     O .rwdata	00000004 _global_impure_ptr
10007a1c g     F .text	000005a0 _realloc_r
1000f5e0 g       *ABS*	00000000 __bss_end
1000ae08 g     F .text	000000f0 alt_iic_isr_register
1000f2a0 g     O .bss	00000240 veggieObject
1000b38c g     F .text	00000104 alt_tick
1000f23c g     O .bss	00000004 cursorStreak
100032b8 g     F .text	00000640 .hidden __udivdi3
1000675c g     F .text	000000a4 .hidden __floatunsidf
1000871c g     F .text	00000018 __fp_lock_all
1000adbc g     F .text	0000004c alt_ic_irq_enabled
1000b2f4 g     F .text	00000098 alt_alarm_stop
1000f268 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
1000c57c g     O .rwdata	00000028 alt_dev_null
100011a8 g     F .text	000000d4 port2Unpackager
10002d6c g     F .text	000001e4 rint
1000aa44 g     F .text	0000001c alt_dcache_flush_all
10006604 g     F .text	00000088 .hidden __fixdfsi
1000d7c0 g       *ABS*	00000000 __ram_rwdata_end
1000d7a0 g     O .rwdata	00000008 alt_dev_list
10009d04 g     F .text	00000100 write
1000bd50 g       *ABS*	00000000 __ram_rodata_end
100095b4 g     F .text	000000b8 fstat
100053e8 g     F .text	000000e0 .hidden __ledf2
10004038 g     F .text	00000008 .hidden __umodsi3
1000f5e0 g       *ABS*	00000000 end
1000f240 g     O .bss	00000004 key1
1000a01c g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1000bb68 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10006800 g     F .text	00000064 .hidden __clzsi2
1000a6ec g     F .text	00000218 altera_avalon_jtag_uart_write
1000870c g     F .text	00000004 __sfp_lock_acquire
100076a0 g     F .text	000000e8 memchr
10008870 g     F .text	000002f0 _free_r
1000b9a0 g     F .text	00000194 __call_exitprocs
1000d790 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
1000f26c g     O .bss	00000004 _alt_tick_rate
10006958 g     F .text	00000064 rand
1000f270 g     O .bss	00000004 _alt_nticks
10009a80 g     F .text	00000104 read
10009e70 g     F .text	00000048 alt_sys_init
1000b88c g     F .text	00000114 __register_exitproc
10001954 g     F .text	000010cc __ieee754_pow
1000a38c g     F .text	00000068 altera_avalon_jtag_uart_close
100014b0 g     F .text	000004a4 pow
10004040 g     F .text	00000028 .hidden __mulsi3
1000bd50 g       *ABS*	00000000 __ram_rwdata_start
1000bb68 g       *ABS*	00000000 __ram_rodata_start
1000f278 g     O .bss	00000028 __malloc_current_mallinfo
10009eb8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000b654 g     F .text	000000d4 alt_get_fd
10009144 g     F .text	00000054 _close_r
1000b810 g     F .text	0000007c memcmp
10009f78 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000f5e0 g       *ABS*	00000000 __alt_stack_base
10009fc8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10008010 g     F .text	00000130 __swsetup_r
10004904 g     F .text	00000980 .hidden __divdf3
100085cc g     F .text	00000118 __sfp
1000c174 g     O .rwdata	00000408 __malloc_av_
10008718 g     F .text	00000004 __sinit_lock_release
100054c8 g     F .text	0000086c .hidden __muldf3
10008fac g     F .text	00000054 __sread
1000b540 g     F .text	00000114 alt_find_file
1000aab0 g     F .text	000000a4 alt_dev_llist_insert
100099f0 g     F .text	00000020 __malloc_lock
10009c04 g     F .text	000000b0 sbrk
10008140 g     F .text	00000228 _fflush_r
1000f230 g       *ABS*	00000000 __bss_start
10008e88 g     F .text	00000124 memset
10000268 g     F .text	000002b0 main
1000f264 g     O .bss	00000004 alt_envp
1000f24c g     O .bss	00000004 __malloc_max_total_mem
10009f18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10006940 g     F .text	00000018 srand
10001338 g     F .text	00000178 convertBinaryToDecimal
100090e0 g     F .text	00000008 __sclose
10002d58 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
10009298 g     F .text	00000014 fclose
10006ef8 g     F .text	000007a8 _malloc_r
1000d7ac g     O .rwdata	00000004 alt_errno
10008b60 g     F .text	000000b8 _fwalk
10003f80 g     F .text	00000054 .hidden __divsi3
1000874c g     F .text	00000124 _malloc_trim_r
1000bb68 g       *ABS*	00000000 __CTOR_END__
10002cc8 g     F .text	0000001c finite
1000bb68 g       *ABS*	00000000 __flash_rodata_start
1000bb68 g       *ABS*	00000000 __DTOR_LIST__
1000f244 g     O .bss	00000004 key3
1000311c g     F .text	0000001c copysign
10005284 g     F .text	00000084 .hidden __nedf2
10009e3c g     F .text	00000034 alt_irq_init
10009b84 g     F .text	00000080 alt_release_fd
1000bc14 g     O .rodata	00000100 .hidden __clz_tab
1000b7c4 g     F .text	00000014 atexit
10000d8c g     F .text	0000041c messagePackager
100090e8 g     F .text	0000005c _write_r
1000d78c g     O .rwdata	00000004 _impure_ptr
1000f25c g     O .bss	00000004 alt_argc
10002f50 g     F .text	000001cc scalbn
1000abb0 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10008734 g     F .text	00000018 __fp_unlock_all
1000d798 g     O .rwdata	00000008 alt_fs_list
10002d60 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
10002a20 g     F .text	00000294 __ieee754_sqrt
1000ac28 g     F .text	00000050 alt_ic_isr_register
1000d7c0 g       *ABS*	00000000 _edata
1000f5e0 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000a3f4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000f248 g     O .bss	00000004 key2
1000ad18 g     F .text	000000a4 alt_ic_irq_disable
10009008 g     F .text	0000007c __swrite
1000d794 g     O .rwdata	00000004 __malloc_trim_threshold
1000b7d8 g     F .text	00000038 exit
10008c18 g     F .text	000000b8 _fwalk_reent
100007c4 g     F .text	000003d4 physicsEngine
10003fd4 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10008710 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000bb34 g     F .text	00000034 _exit
1000a904 g     F .text	00000140 alt_alarm_start
10003138 g     F .text	0000010c .hidden __muldi3
10008cd0 g     F .text	000001b8 __smakebuf_r
100069bc g     F .text	00000098 strlen
1000b194 g     F .text	00000160 open
10005308 g     F .text	000000e0 .hidden __gedf2
1000ac0c g     F .text	0000001c alt_icache_flush_all
10000b98 g     F .text	000001f4 FPGAcommunicator
1000d7b4 g     O .rwdata	00000004 alt_priority_mask
1000ac78 g     F .text	000000a0 alt_ic_irq_enable
10005d34 g     F .text	000008d0 .hidden __subdf3
1000d7b8 g     O .rwdata	00000008 alt_alarm_list
1000ab54 g     F .text	0000005c _do_ctors
10009460 g     F .text	000000d8 close
100097cc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
10008714 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10bd3804 	addi	r2,r2,-2848
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10bd3804 	addi	r2,r2,-2848
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6bc17 	ldw	r2,-25872(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6bc17 	ldw	r2,-25872(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d695e114 	ori	gp,gp,22404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10bc8c14 	ori	r2,r2,62000

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18fd7814 	ori	r3,r3,62944

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	00097cc0 	call	100097cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00099780 	call	10009978 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00069400 	call	10006940 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a6ac15 	stw	r2,-25936(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a6ab15 	stw	r2,-25940(gp)
	port2Unpackager();
100002b8:	00011a80 	call	100011a8 <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	843ca804 	addi	r16,r16,-3424
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	00040400 	call	10004040 <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	843ca804 	addi	r16,r16,-3424
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00040400 	call	10004040 <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	843ca804 	addi	r16,r16,-3424
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	00040400 	call	10004040 <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	843ca804 	addi	r16,r16,-3424
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	00040400 	call	10004040 <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	843ca804 	addi	r16,r16,-3424
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	00040400 	call	10004040 <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	843ca804 	addi	r16,r16,-3424
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	00040400 	call	10004040 <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	843ca804 	addi	r16,r16,-3424
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	00040400 	call	10004040 <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800410 	cmplti	r2,r2,16
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	10bca804 	addi	r2,r2,-3424
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	10bca804 	addi	r2,r2,-3424
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	10bca804 	addi	r2,r2,-3424
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	10bca804 	addi	r2,r2,-3424
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10bca804 	addi	r2,r2,-3424
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	10bca804 	addi	r2,r2,-3424
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10bca804 	addi	r2,r2,-3424
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	10bca804 	addi	r2,r2,-3424
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
	//	printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
	//	printf("elapsed time is %lu \n", elapsedTime);


		printf("starting physics \n");
10000478:	01040074 	movhi	r4,4097
1000047c:	212eda04 	addi	r4,r4,-17560
10000480:	000692c0 	call	1000692c <puts>
		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .1 seconds pass
10000484:	e0fffe17 	ldw	r3,-8(fp)
10000488:	e0bff817 	ldw	r2,-32(fp)
1000048c:	1885c83a 	sub	r2,r3,r2
10000490:	108000b0 	cmpltui	r2,r2,2
10000494:	1000031e 	bne	r2,zero,100004a4 <main+0x23c>
		{
			physicsEngine();	// call our physics engine!
10000498:	00007c40 	call	100007c4 <physicsEngine>
			lastPhysixed = elapsedTime;
1000049c:	e0bffe17 	ldw	r2,-8(fp)
100004a0:	e0bff815 	stw	r2,-32(fp)
		}
		printf("starting spawning \n");
100004a4:	01040074 	movhi	r4,4097
100004a8:	212edf04 	addi	r4,r4,-17540
100004ac:	000692c0 	call	1000692c <puts>
		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
100004b0:	e0fffe17 	ldw	r3,-8(fp)
100004b4:	e0bff917 	ldw	r2,-28(fp)
100004b8:	1885c83a 	sub	r2,r3,r2
100004bc:	e0fffa17 	ldw	r3,-24(fp)
100004c0:	1880092e 	bgeu	r3,r2,100004e8 <main+0x280>
		{
			spawningEngine();	// call our spawning engine!
100004c4:	00005180 	call	10000518 <spawningEngine>
			lastSpawned = elapsedTime;
100004c8:	e0bffe17 	ldw	r2,-8(fp)
100004cc:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 60) + 20;
100004d0:	00069580 	call	10006958 <rand>
100004d4:	1009883a 	mov	r4,r2
100004d8:	01400f04 	movi	r5,60
100004dc:	0003fd40 	call	10003fd4 <__modsi3>
100004e0:	10800504 	addi	r2,r2,20
100004e4:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}
	printf("starting unpackaging \n");
100004e8:	01040074 	movhi	r4,4097
100004ec:	212ee404 	addi	r4,r4,-17520
100004f0:	000692c0 	call	1000692c <puts>
	port2Unpackager();	// keep unpacking our stuff!
100004f4:	00011a80 	call	100011a8 <port2Unpackager>
	printf("starting communicating \n");
100004f8:	01040074 	movhi	r4,4097
100004fc:	212eea04 	addi	r4,r4,-17496
10000500:	000692c0 	call	1000692c <puts>
	FPGAcommunicator();	// call this every time to update the FPGA
10000504:	0000b980 	call	10000b98 <FPGAcommunicator>
	printf("looping \n");
10000508:	01040074 	movhi	r4,4097
1000050c:	212ef004 	addi	r4,r4,-17472
10000510:	000692c0 	call	1000692c <puts>
	}
10000514:	003fd106 	br	1000045c <__alt_data_end+0xf800045c>

10000518 <spawningEngine>:
	return 0;
}

void spawningEngine()
{
10000518:	defff504 	addi	sp,sp,-44
1000051c:	dfc00a15 	stw	ra,40(sp)
10000520:	df000915 	stw	fp,36(sp)
10000524:	dc400815 	stw	r17,32(sp)
10000528:	dc000715 	stw	r16,28(sp)
1000052c:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000530:	00800044 	movi	r2,1
10000534:	e0bff715 	stw	r2,-36(fp)
10000538:	00009806 	br	1000079c <spawningEngine+0x284>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
1000053c:	04040074 	movhi	r16,4097
10000540:	843ca804 	addi	r16,r16,-3424
10000544:	e0bff717 	ldw	r2,-36(fp)
10000548:	1009883a 	mov	r4,r2
1000054c:	01400904 	movi	r5,36
10000550:	00040400 	call	10004040 <__mulsi3>
10000554:	8085883a 	add	r2,r16,r2
10000558:	10800304 	addi	r2,r2,12
1000055c:	10800017 	ldw	r2,0(r2)
10000560:	10008b1e 	bne	r2,zero,10000790 <spawningEngine+0x278>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 104) + 14;
10000564:	00069580 	call	10006958 <rand>
10000568:	1009883a 	mov	r4,r2
1000056c:	01401a04 	movi	r5,104
10000570:	0003fd40 	call	10003fd4 <__modsi3>
10000574:	10800384 	addi	r2,r2,14
10000578:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
1000057c:	00069580 	call	10006958 <rand>
10000580:	1007883a 	mov	r3,r2
10000584:	00a00034 	movhi	r2,32768
10000588:	108001c4 	addi	r2,r2,7
1000058c:	1884703a 	and	r2,r3,r2
10000590:	1000040e 	bge	r2,zero,100005a4 <spawningEngine+0x8c>
10000594:	10bfffc4 	addi	r2,r2,-1
10000598:	00fffe04 	movi	r3,-8
1000059c:	10c4b03a 	or	r2,r2,r3
100005a0:	10800044 	addi	r2,r2,1
100005a4:	10800044 	addi	r2,r2,1
100005a8:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 30) + 30;
100005ac:	00069580 	call	10006958 <rand>
100005b0:	1009883a 	mov	r4,r2
100005b4:	01400784 	movi	r5,30
100005b8:	0003fd40 	call	10003fd4 <__modsi3>
100005bc:	10800784 	addi	r2,r2,30
100005c0:	1009883a 	mov	r4,r2
100005c4:	000668c0 	call	1000668c <__floatsidf>
100005c8:	1009883a 	mov	r4,r2
100005cc:	180b883a 	mov	r5,r3
100005d0:	e13ffc15 	stw	r4,-16(fp)
100005d4:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 15) - 7.5;
100005d8:	00069580 	call	10006958 <rand>
100005dc:	1009883a 	mov	r4,r2
100005e0:	014003c4 	movi	r5,15
100005e4:	0003fd40 	call	10003fd4 <__modsi3>
100005e8:	1009883a 	mov	r4,r2
100005ec:	000668c0 	call	1000668c <__floatsidf>
100005f0:	100b883a 	mov	r5,r2
100005f4:	180d883a 	mov	r6,r3
100005f8:	2809883a 	mov	r4,r5
100005fc:	300b883a 	mov	r5,r6
10000600:	000d883a 	mov	r6,zero
10000604:	01d007b4 	movhi	r7,16414
10000608:	0005d340 	call	10005d34 <__subdf3>
1000060c:	1009883a 	mov	r4,r2
10000610:	180b883a 	mov	r5,r3
10000614:	e13ff815 	stw	r4,-32(fp)
10000618:	e17ff915 	stw	r5,-28(fp)

			if (randomX > 80)
1000061c:	e0bffa17 	ldw	r2,-24(fp)
10000620:	10801470 	cmpltui	r2,r2,81
10000624:	10000b1e 	bne	r2,zero,10000654 <spawningEngine+0x13c>
			{
				randomSpeedX = (rand() % 15);
10000628:	00069580 	call	10006958 <rand>
1000062c:	1009883a 	mov	r4,r2
10000630:	014003c4 	movi	r5,15
10000634:	0003fd40 	call	10003fd4 <__modsi3>
10000638:	1009883a 	mov	r4,r2
1000063c:	000668c0 	call	1000668c <__floatsidf>
10000640:	1009883a 	mov	r4,r2
10000644:	180b883a 	mov	r5,r3
10000648:	e13ff815 	stw	r4,-32(fp)
1000064c:	e17ff915 	stw	r5,-28(fp)
10000650:	00000e06 	br	1000068c <spawningEngine+0x174>
			}
			else if (randomX < 40)
10000654:	e0bffa17 	ldw	r2,-24(fp)
10000658:	10800a28 	cmpgeui	r2,r2,40
1000065c:	10000b1e 	bne	r2,zero,1000068c <spawningEngine+0x174>
			{
				randomSpeedX = (rand() % 15) - 15;
10000660:	00069580 	call	10006958 <rand>
10000664:	1009883a 	mov	r4,r2
10000668:	014003c4 	movi	r5,15
1000066c:	0003fd40 	call	10003fd4 <__modsi3>
10000670:	10bffc44 	addi	r2,r2,-15
10000674:	1009883a 	mov	r4,r2
10000678:	000668c0 	call	1000668c <__floatsidf>
1000067c:	1009883a 	mov	r4,r2
10000680:	180b883a 	mov	r5,r3
10000684:	e13ff815 	stw	r4,-32(fp)
10000688:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
1000068c:	e47ffa17 	ldw	r17,-24(fp)
10000690:	04040074 	movhi	r16,4097
10000694:	843ca804 	addi	r16,r16,-3424
10000698:	e0bff717 	ldw	r2,-36(fp)
1000069c:	1009883a 	mov	r4,r2
100006a0:	01400904 	movi	r5,36
100006a4:	00040400 	call	10004040 <__mulsi3>
100006a8:	8085883a 	add	r2,r16,r2
100006ac:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
100006b0:	04040074 	movhi	r16,4097
100006b4:	843ca804 	addi	r16,r16,-3424
100006b8:	e0bff717 	ldw	r2,-36(fp)
100006bc:	1009883a 	mov	r4,r2
100006c0:	01400904 	movi	r5,36
100006c4:	00040400 	call	10004040 <__mulsi3>
100006c8:	8085883a 	add	r2,r16,r2
100006cc:	10800104 	addi	r2,r2,4
100006d0:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
100006d4:	04040074 	movhi	r16,4097
100006d8:	843ca804 	addi	r16,r16,-3424
100006dc:	e0bff717 	ldw	r2,-36(fp)
100006e0:	1009883a 	mov	r4,r2
100006e4:	01400904 	movi	r5,36
100006e8:	00040400 	call	10004040 <__mulsi3>
100006ec:	8085883a 	add	r2,r16,r2
100006f0:	10800204 	addi	r2,r2,8
100006f4:	e0fffb17 	ldw	r3,-20(fp)
100006f8:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
100006fc:	04040074 	movhi	r16,4097
10000700:	843ca804 	addi	r16,r16,-3424
10000704:	e0bff717 	ldw	r2,-36(fp)
10000708:	1009883a 	mov	r4,r2
1000070c:	01400904 	movi	r5,36
10000710:	00040400 	call	10004040 <__mulsi3>
10000714:	8085883a 	add	r2,r16,r2
10000718:	10800304 	addi	r2,r2,12
1000071c:	00c00044 	movi	r3,1
10000720:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10000724:	04040074 	movhi	r16,4097
10000728:	843ca804 	addi	r16,r16,-3424
1000072c:	e0bff717 	ldw	r2,-36(fp)
10000730:	1009883a 	mov	r4,r2
10000734:	01400904 	movi	r5,36
10000738:	00040400 	call	10004040 <__mulsi3>
1000073c:	8085883a 	add	r2,r16,r2
10000740:	10800504 	addi	r2,r2,20
10000744:	e0fff817 	ldw	r3,-32(fp)
10000748:	10c00015 	stw	r3,0(r2)
1000074c:	e0fff917 	ldw	r3,-28(fp)
10000750:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000754:	04040074 	movhi	r16,4097
10000758:	843ca804 	addi	r16,r16,-3424
1000075c:	e0bff717 	ldw	r2,-36(fp)
10000760:	1009883a 	mov	r4,r2
10000764:	01400904 	movi	r5,36
10000768:	00040400 	call	10004040 <__mulsi3>
1000076c:	8085883a 	add	r2,r16,r2
10000770:	10800704 	addi	r2,r2,28
10000774:	e0fffc17 	ldw	r3,-16(fp)
10000778:	10c00015 	stw	r3,0(r2)
1000077c:	e0fffd17 	ldw	r3,-12(fp)
10000780:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000784:	00800a84 	movi	r2,42
10000788:	e0bff715 	stw	r2,-36(fp)
			break;
1000078c:	00000606 	br	100007a8 <spawningEngine+0x290>
}

void spawningEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000790:	e0bff717 	ldw	r2,-36(fp)
10000794:	10800044 	addi	r2,r2,1
10000798:	e0bff715 	stw	r2,-36(fp)
1000079c:	e0bff717 	ldw	r2,-36(fp)
100007a0:	10800410 	cmplti	r2,r2,16
100007a4:	103f651e 	bne	r2,zero,1000053c <__alt_data_end+0xf800053c>
			// now let's break
			i = 42;
			break;
		}
	}
}
100007a8:	e6fffe04 	addi	sp,fp,-8
100007ac:	dfc00317 	ldw	ra,12(sp)
100007b0:	df000217 	ldw	fp,8(sp)
100007b4:	dc400117 	ldw	r17,4(sp)
100007b8:	dc000017 	ldw	r16,0(sp)
100007bc:	dec00404 	addi	sp,sp,16
100007c0:	f800283a 	ret

100007c4 <physicsEngine>:

void physicsEngine()
{
100007c4:	defffa04 	addi	sp,sp,-24
100007c8:	dfc00515 	stw	ra,20(sp)
100007cc:	df000415 	stw	fp,16(sp)
100007d0:	dc800315 	stw	r18,12(sp)
100007d4:	dc400215 	stw	r17,8(sp)
100007d8:	dc000115 	stw	r16,4(sp)
100007dc:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100007e0:	00800044 	movi	r2,1
100007e4:	e0bffc15 	stw	r2,-16(fp)
100007e8:	0000df06 	br	10000b68 <physicsEngine+0x3a4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
100007ec:	04040074 	movhi	r16,4097
100007f0:	843ca804 	addi	r16,r16,-3424
100007f4:	e0bffc17 	ldw	r2,-16(fp)
100007f8:	1009883a 	mov	r4,r2
100007fc:	01400904 	movi	r5,36
10000800:	00040400 	call	10004040 <__mulsi3>
10000804:	8085883a 	add	r2,r16,r2
10000808:	10800304 	addi	r2,r2,12
1000080c:	10800017 	ldw	r2,0(r2)
10000810:	1000d226 	beq	r2,zero,10000b5c <physicsEngine+0x398>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000814:	04040074 	movhi	r16,4097
10000818:	843ca804 	addi	r16,r16,-3424
1000081c:	e0bffc17 	ldw	r2,-16(fp)
10000820:	1009883a 	mov	r4,r2
10000824:	01400904 	movi	r5,36
10000828:	00040400 	call	10004040 <__mulsi3>
1000082c:	8085883a 	add	r2,r16,r2
10000830:	10800017 	ldw	r2,0(r2)
10000834:	1009883a 	mov	r4,r2
10000838:	000668c0 	call	1000668c <__floatsidf>
1000083c:	1023883a 	mov	r17,r2
10000840:	1825883a 	mov	r18,r3
10000844:	04040074 	movhi	r16,4097
10000848:	843ca804 	addi	r16,r16,-3424
1000084c:	e0bffc17 	ldw	r2,-16(fp)
10000850:	1009883a 	mov	r4,r2
10000854:	01400904 	movi	r5,36
10000858:	00040400 	call	10004040 <__mulsi3>
1000085c:	8085883a 	add	r2,r16,r2
10000860:	11000504 	addi	r4,r2,20
10000864:	20800017 	ldw	r2,0(r4)
10000868:	20c00117 	ldw	r3,4(r4)
1000086c:	8809883a 	mov	r4,r17
10000870:	900b883a 	mov	r5,r18
10000874:	100d883a 	mov	r6,r2
10000878:	180f883a 	mov	r7,r3
1000087c:	00040680 	call	10004068 <__adddf3>
10000880:	1009883a 	mov	r4,r2
10000884:	180b883a 	mov	r5,r3
10000888:	2005883a 	mov	r2,r4
1000088c:	2807883a 	mov	r3,r5
10000890:	1009883a 	mov	r4,r2
10000894:	180b883a 	mov	r5,r3
10000898:	00066040 	call	10006604 <__fixdfsi>
1000089c:	1023883a 	mov	r17,r2
100008a0:	04040074 	movhi	r16,4097
100008a4:	843ca804 	addi	r16,r16,-3424
100008a8:	e0bffc17 	ldw	r2,-16(fp)
100008ac:	1009883a 	mov	r4,r2
100008b0:	01400904 	movi	r5,36
100008b4:	00040400 	call	10004040 <__mulsi3>
100008b8:	8085883a 	add	r2,r16,r2
100008bc:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
100008c0:	04040074 	movhi	r16,4097
100008c4:	843ca804 	addi	r16,r16,-3424
100008c8:	e0bffc17 	ldw	r2,-16(fp)
100008cc:	1009883a 	mov	r4,r2
100008d0:	01400904 	movi	r5,36
100008d4:	00040400 	call	10004040 <__mulsi3>
100008d8:	8085883a 	add	r2,r16,r2
100008dc:	10800104 	addi	r2,r2,4
100008e0:	10800017 	ldw	r2,0(r2)
100008e4:	1009883a 	mov	r4,r2
100008e8:	000668c0 	call	1000668c <__floatsidf>
100008ec:	1023883a 	mov	r17,r2
100008f0:	1825883a 	mov	r18,r3
100008f4:	04040074 	movhi	r16,4097
100008f8:	843ca804 	addi	r16,r16,-3424
100008fc:	e0bffc17 	ldw	r2,-16(fp)
10000900:	1009883a 	mov	r4,r2
10000904:	01400904 	movi	r5,36
10000908:	00040400 	call	10004040 <__mulsi3>
1000090c:	8085883a 	add	r2,r16,r2
10000910:	11000704 	addi	r4,r2,28
10000914:	20800017 	ldw	r2,0(r4)
10000918:	20c00117 	ldw	r3,4(r4)
1000091c:	8809883a 	mov	r4,r17
10000920:	900b883a 	mov	r5,r18
10000924:	100d883a 	mov	r6,r2
10000928:	180f883a 	mov	r7,r3
1000092c:	00040680 	call	10004068 <__adddf3>
10000930:	1009883a 	mov	r4,r2
10000934:	180b883a 	mov	r5,r3
10000938:	2005883a 	mov	r2,r4
1000093c:	2807883a 	mov	r3,r5
10000940:	1009883a 	mov	r4,r2
10000944:	180b883a 	mov	r5,r3
10000948:	00066040 	call	10006604 <__fixdfsi>
1000094c:	1023883a 	mov	r17,r2
10000950:	04040074 	movhi	r16,4097
10000954:	843ca804 	addi	r16,r16,-3424
10000958:	e0bffc17 	ldw	r2,-16(fp)
1000095c:	1009883a 	mov	r4,r2
10000960:	01400904 	movi	r5,36
10000964:	00040400 	call	10004040 <__mulsi3>
10000968:	8085883a 	add	r2,r16,r2
1000096c:	10800104 	addi	r2,r2,4
10000970:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 3;
10000974:	04040074 	movhi	r16,4097
10000978:	843ca804 	addi	r16,r16,-3424
1000097c:	e0bffc17 	ldw	r2,-16(fp)
10000980:	1009883a 	mov	r4,r2
10000984:	01400904 	movi	r5,36
10000988:	00040400 	call	10004040 <__mulsi3>
1000098c:	8085883a 	add	r2,r16,r2
10000990:	11000704 	addi	r4,r2,28
10000994:	20800017 	ldw	r2,0(r4)
10000998:	20c00117 	ldw	r3,4(r4)
1000099c:	1009883a 	mov	r4,r2
100009a0:	180b883a 	mov	r5,r3
100009a4:	000d883a 	mov	r6,zero
100009a8:	01d00234 	movhi	r7,16392
100009ac:	0005d340 	call	10005d34 <__subdf3>
100009b0:	1009883a 	mov	r4,r2
100009b4:	180b883a 	mov	r5,r3
100009b8:	2021883a 	mov	r16,r4
100009bc:	2823883a 	mov	r17,r5
100009c0:	04840074 	movhi	r18,4097
100009c4:	94bca804 	addi	r18,r18,-3424
100009c8:	e0bffc17 	ldw	r2,-16(fp)
100009cc:	1009883a 	mov	r4,r2
100009d0:	01400904 	movi	r5,36
100009d4:	00040400 	call	10004040 <__mulsi3>
100009d8:	9085883a 	add	r2,r18,r2
100009dc:	10800704 	addi	r2,r2,28
100009e0:	14000015 	stw	r16,0(r2)
100009e4:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are below the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
100009e8:	04040074 	movhi	r16,4097
100009ec:	843ca804 	addi	r16,r16,-3424
100009f0:	e0bffc17 	ldw	r2,-16(fp)
100009f4:	1009883a 	mov	r4,r2
100009f8:	01400904 	movi	r5,36
100009fc:	00040400 	call	10004040 <__mulsi3>
10000a00:	8085883a 	add	r2,r16,r2
10000a04:	10800104 	addi	r2,r2,4
10000a08:	10800017 	ldw	r2,0(r2)
10000a0c:	10001316 	blt	r2,zero,10000a5c <physicsEngine+0x298>
10000a10:	04040074 	movhi	r16,4097
10000a14:	843ca804 	addi	r16,r16,-3424
10000a18:	e0bffc17 	ldw	r2,-16(fp)
10000a1c:	1009883a 	mov	r4,r2
10000a20:	01400904 	movi	r5,36
10000a24:	00040400 	call	10004040 <__mulsi3>
10000a28:	8085883a 	add	r2,r16,r2
10000a2c:	10800017 	ldw	r2,0(r2)
10000a30:	10000a16 	blt	r2,zero,10000a5c <physicsEngine+0x298>
10000a34:	04040074 	movhi	r16,4097
10000a38:	843ca804 	addi	r16,r16,-3424
10000a3c:	e0bffc17 	ldw	r2,-16(fp)
10000a40:	1009883a 	mov	r4,r2
10000a44:	01400904 	movi	r5,36
10000a48:	00040400 	call	10004040 <__mulsi3>
10000a4c:	8085883a 	add	r2,r16,r2
10000a50:	10800017 	ldw	r2,0(r2)
10000a54:	1080a050 	cmplti	r2,r2,641
10000a58:	1000401e 	bne	r2,zero,10000b5c <physicsEngine+0x398>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000a5c:	04040074 	movhi	r16,4097
10000a60:	843ca804 	addi	r16,r16,-3424
10000a64:	e0bffc17 	ldw	r2,-16(fp)
10000a68:	1009883a 	mov	r4,r2
10000a6c:	01400904 	movi	r5,36
10000a70:	00040400 	call	10004040 <__mulsi3>
10000a74:	8085883a 	add	r2,r16,r2
10000a78:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000a7c:	04040074 	movhi	r16,4097
10000a80:	843ca804 	addi	r16,r16,-3424
10000a84:	e0bffc17 	ldw	r2,-16(fp)
10000a88:	1009883a 	mov	r4,r2
10000a8c:	01400904 	movi	r5,36
10000a90:	00040400 	call	10004040 <__mulsi3>
10000a94:	8085883a 	add	r2,r16,r2
10000a98:	10800104 	addi	r2,r2,4
10000a9c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000aa0:	04040074 	movhi	r16,4097
10000aa4:	843ca804 	addi	r16,r16,-3424
10000aa8:	e0bffc17 	ldw	r2,-16(fp)
10000aac:	1009883a 	mov	r4,r2
10000ab0:	01400904 	movi	r5,36
10000ab4:	00040400 	call	10004040 <__mulsi3>
10000ab8:	8085883a 	add	r2,r16,r2
10000abc:	10800204 	addi	r2,r2,8
10000ac0:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000ac4:	04040074 	movhi	r16,4097
10000ac8:	843ca804 	addi	r16,r16,-3424
10000acc:	e0bffc17 	ldw	r2,-16(fp)
10000ad0:	1009883a 	mov	r4,r2
10000ad4:	01400904 	movi	r5,36
10000ad8:	00040400 	call	10004040 <__mulsi3>
10000adc:	8085883a 	add	r2,r16,r2
10000ae0:	10800304 	addi	r2,r2,12
10000ae4:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000ae8:	04040074 	movhi	r16,4097
10000aec:	843ca804 	addi	r16,r16,-3424
10000af0:	e0bffc17 	ldw	r2,-16(fp)
10000af4:	1009883a 	mov	r4,r2
10000af8:	01400904 	movi	r5,36
10000afc:	00040400 	call	10004040 <__mulsi3>
10000b00:	8085883a 	add	r2,r16,r2
10000b04:	10800404 	addi	r2,r2,16
10000b08:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000b0c:	04040074 	movhi	r16,4097
10000b10:	843ca804 	addi	r16,r16,-3424
10000b14:	e0bffc17 	ldw	r2,-16(fp)
10000b18:	1009883a 	mov	r4,r2
10000b1c:	01400904 	movi	r5,36
10000b20:	00040400 	call	10004040 <__mulsi3>
10000b24:	8085883a 	add	r2,r16,r2
10000b28:	10800504 	addi	r2,r2,20
10000b2c:	10000015 	stw	zero,0(r2)
10000b30:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000b34:	04040074 	movhi	r16,4097
10000b38:	843ca804 	addi	r16,r16,-3424
10000b3c:	e0bffc17 	ldw	r2,-16(fp)
10000b40:	1009883a 	mov	r4,r2
10000b44:	01400904 	movi	r5,36
10000b48:	00040400 	call	10004040 <__mulsi3>
10000b4c:	8085883a 	add	r2,r16,r2
10000b50:	10800704 	addi	r2,r2,28
10000b54:	10000015 	stw	zero,0(r2)
10000b58:	10000115 	stw	zero,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000b5c:	e0bffc17 	ldw	r2,-16(fp)
10000b60:	10800044 	addi	r2,r2,1
10000b64:	e0bffc15 	stw	r2,-16(fp)
10000b68:	e0bffc17 	ldw	r2,-16(fp)
10000b6c:	10800410 	cmplti	r2,r2,16
10000b70:	103f1e1e 	bne	r2,zero,100007ec <__alt_data_end+0xf80007ec>
				veggieObject[i].yVelocity = 0;
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000b74:	0001883a 	nop
}
10000b78:	e6fffd04 	addi	sp,fp,-12
10000b7c:	dfc00417 	ldw	ra,16(sp)
10000b80:	df000317 	ldw	fp,12(sp)
10000b84:	dc800217 	ldw	r18,8(sp)
10000b88:	dc400117 	ldw	r17,4(sp)
10000b8c:	dc000017 	ldw	r16,0(sp)
10000b90:	dec00504 	addi	sp,sp,20
10000b94:	f800283a 	ret

10000b98 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000b98:	deffd504 	addi	sp,sp,-172
10000b9c:	dfc02a15 	stw	ra,168(sp)
10000ba0:	df002915 	stw	fp,164(sp)
10000ba4:	dc002815 	stw	r16,160(sp)
10000ba8:	df002904 	addi	fp,sp,164
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000bac:	e03fdc15 	stw	zero,-144(fp)
10000bb0:	00002406 	br	10000c44 <FPGAcommunicator+0xac>
	{
		unsigned long long tempPackage = messagePackager(veggieObject[i]);
10000bb4:	04040074 	movhi	r16,4097
10000bb8:	843ca804 	addi	r16,r16,-3424
10000bbc:	e0bfdc17 	ldw	r2,-144(fp)
10000bc0:	1009883a 	mov	r4,r2
10000bc4:	01400904 	movi	r5,36
10000bc8:	00040400 	call	10004040 <__mulsi3>
10000bcc:	8085883a 	add	r2,r16,r2
10000bd0:	10c00417 	ldw	r3,16(r2)
10000bd4:	d8c00015 	stw	r3,0(sp)
10000bd8:	10c00517 	ldw	r3,20(r2)
10000bdc:	d8c00115 	stw	r3,4(sp)
10000be0:	10c00617 	ldw	r3,24(r2)
10000be4:	d8c00215 	stw	r3,8(sp)
10000be8:	10c00717 	ldw	r3,28(r2)
10000bec:	d8c00315 	stw	r3,12(sp)
10000bf0:	10c00817 	ldw	r3,32(r2)
10000bf4:	d8c00415 	stw	r3,16(sp)
10000bf8:	11000017 	ldw	r4,0(r2)
10000bfc:	11400117 	ldw	r5,4(r2)
10000c00:	11800217 	ldw	r6,8(r2)
10000c04:	11c00317 	ldw	r7,12(r2)
10000c08:	0000d8c0 	call	10000d8c <messagePackager>
10000c0c:	e0bfdd15 	stw	r2,-140(fp)
10000c10:	e03fde15 	stw	zero,-136(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000c14:	e0bfdc17 	ldw	r2,-144(fp)
10000c18:	100490fa 	slli	r2,r2,3
10000c1c:	e0ffdc04 	addi	r3,fp,-144
10000c20:	1885883a 	add	r2,r3,r2
10000c24:	10800304 	addi	r2,r2,12
10000c28:	e0ffdd17 	ldw	r3,-140(fp)
10000c2c:	10c00015 	stw	r3,0(r2)
10000c30:	e0ffde17 	ldw	r3,-136(fp)
10000c34:	10c00115 	stw	r3,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000c38:	e0bfdc17 	ldw	r2,-144(fp)
10000c3c:	10800044 	addi	r2,r2,1
10000c40:	e0bfdc15 	stw	r2,-144(fp)
10000c44:	e0bfdc17 	ldw	r2,-144(fp)
10000c48:	10800410 	cmplti	r2,r2,16
10000c4c:	103fd91e 	bne	r2,zero,10000bb4 <__alt_data_end+0xf8000bb4>

		FPGAmessage[i] = tempPackage;
	}


	*to_hw_sig = 2;	// 2 means we're starting communication
10000c50:	00801c04 	movi	r2,112
10000c54:	00c00084 	movi	r3,2
10000c58:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000c5c:	01004004 	movi	r4,256
10000c60:	e0bfdf17 	ldw	r2,-132(fp)
10000c64:	e0ffe017 	ldw	r3,-128(fp)
10000c68:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000c6c:	01003c04 	movi	r4,240
10000c70:	e0bfe117 	ldw	r2,-124(fp)
10000c74:	e0ffe217 	ldw	r3,-120(fp)
10000c78:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000c7c:	01003804 	movi	r4,224
10000c80:	e0bfe317 	ldw	r2,-116(fp)
10000c84:	e0ffe417 	ldw	r3,-112(fp)
10000c88:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000c8c:	01003404 	movi	r4,208
10000c90:	e0bfe517 	ldw	r2,-108(fp)
10000c94:	e0ffe617 	ldw	r3,-104(fp)
10000c98:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000c9c:	01003004 	movi	r4,192
10000ca0:	e0bfe717 	ldw	r2,-100(fp)
10000ca4:	e0ffe817 	ldw	r3,-96(fp)
10000ca8:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000cac:	01002c04 	movi	r4,176
10000cb0:	e0bfe917 	ldw	r2,-92(fp)
10000cb4:	e0ffea17 	ldw	r3,-88(fp)
10000cb8:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000cbc:	01002804 	movi	r4,160
10000cc0:	e0bfeb17 	ldw	r2,-84(fp)
10000cc4:	e0ffec17 	ldw	r3,-80(fp)
10000cc8:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000ccc:	01001804 	movi	r4,96
10000cd0:	e0bfed17 	ldw	r2,-76(fp)
10000cd4:	e0ffee17 	ldw	r3,-72(fp)
10000cd8:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000cdc:	01002404 	movi	r4,144
10000ce0:	e0bfef17 	ldw	r2,-68(fp)
10000ce4:	e0fff017 	ldw	r3,-64(fp)
10000ce8:	20800015 	stw	r2,0(r4)
	*to_hw_port9 = FPGAmessage[9];
10000cec:	01002004 	movi	r4,128
10000cf0:	e0bff117 	ldw	r2,-60(fp)
10000cf4:	e0fff217 	ldw	r3,-56(fp)
10000cf8:	20800015 	stw	r2,0(r4)
	*to_hw_port10 = FPGAmessage[10];
10000cfc:	01001004 	movi	r4,64
10000d00:	e0bff317 	ldw	r2,-52(fp)
10000d04:	e0fff417 	ldw	r3,-48(fp)
10000d08:	20800015 	stw	r2,0(r4)
	*to_hw_port11 = FPGAmessage[11];
10000d0c:	01000c04 	movi	r4,48
10000d10:	e0bff517 	ldw	r2,-44(fp)
10000d14:	e0fff617 	ldw	r3,-40(fp)
10000d18:	20800015 	stw	r2,0(r4)
	*to_hw_port12 = FPGAmessage[12];
10000d1c:	01000804 	movi	r4,32
10000d20:	e0bff717 	ldw	r2,-36(fp)
10000d24:	e0fff817 	ldw	r3,-32(fp)
10000d28:	20800015 	stw	r2,0(r4)
	*to_hw_port13 = FPGAmessage[13];
10000d2c:	01005804 	movi	r4,352
10000d30:	e0bff917 	ldw	r2,-28(fp)
10000d34:	e0fffa17 	ldw	r3,-24(fp)
10000d38:	20800015 	stw	r2,0(r4)
	*to_hw_port14 = FPGAmessage[14];
10000d3c:	01005404 	movi	r4,336
10000d40:	e0bffb17 	ldw	r2,-20(fp)
10000d44:	e0fffc17 	ldw	r3,-16(fp)
10000d48:	20800015 	stw	r2,0(r4)
	*to_hw_port15 = FPGAmessage[15];
10000d4c:	01005004 	movi	r4,320
10000d50:	e0bffd17 	ldw	r2,-12(fp)
10000d54:	e0fffe17 	ldw	r3,-8(fp)
10000d58:	20800015 	stw	r2,0(r4)
//	printf("FPGAmessage 11 is %llu \n", FPGAmessage[11]);

// actually didnt need this tbh :p
//	while(*to_sw_sig != 2);	// wait for FPGA to wake up

	*to_hw_sig = 1;		// now we are done putting in messages
10000d5c:	00801c04 	movi	r2,112
10000d60:	00c00044 	movi	r3,1
10000d64:	10c00005 	stb	r3,0(r2)

//	while(*to_sw_sig != 0); // wait for response from hardware
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000d68:	00801c04 	movi	r2,112
10000d6c:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000d70:	0001883a 	nop
}
10000d74:	e6ffff04 	addi	sp,fp,-4
10000d78:	dfc00217 	ldw	ra,8(sp)
10000d7c:	df000117 	ldw	fp,4(sp)
10000d80:	dc000017 	ldw	r16,0(sp)
10000d84:	dec00304 	addi	sp,sp,12
10000d88:	f800283a 	ret

10000d8c <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000d8c:	deffe304 	addi	sp,sp,-116
10000d90:	dfc01815 	stw	ra,96(sp)
10000d94:	df001715 	stw	fp,92(sp)
10000d98:	dc401615 	stw	r17,88(sp)
10000d9c:	dc001515 	stw	r16,84(sp)
10000da0:	df001704 	addi	fp,sp,92
10000da4:	e1000215 	stw	r4,8(fp)
10000da8:	e1400315 	stw	r5,12(fp)
10000dac:	e1800415 	stw	r6,16(fp)
10000db0:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000db4:	e0800617 	ldw	r2,24(fp)
10000db8:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 1)
10000dbc:	e0bfeb17 	ldw	r2,-84(fp)
10000dc0:	10800058 	cmpnei	r2,r2,1
10000dc4:	1000601e 	bne	r2,zero,10000f48 <messagePackager+0x1bc>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000dc8:	e0800217 	ldw	r2,8(fp)
10000dcc:	e0bfec15 	stw	r2,-80(fp)
10000dd0:	1005d7fa 	srai	r2,r2,31
10000dd4:	e0bfed15 	stw	r2,-76(fp)
		tempTime = specifiedObject.yPosition;
10000dd8:	e0800317 	ldw	r2,12(fp)
10000ddc:	e0bfee15 	stw	r2,-72(fp)
10000de0:	1005d7fa 	srai	r2,r2,31
10000de4:	e0bfef15 	stw	r2,-68(fp)
		tempStart = specifiedObject.objectType;
10000de8:	e0800417 	ldw	r2,16(fp)
10000dec:	e0bff015 	stw	r2,-64(fp)
10000df0:	1005d7fa 	srai	r2,r2,31
10000df4:	e0bff115 	stw	r2,-60(fp)
		tempEnd = specifiedObject.objectState;
10000df8:	e0800517 	ldw	r2,20(fp)
10000dfc:	e0bff215 	stw	r2,-56(fp)
10000e00:	1005d7fa 	srai	r2,r2,31
10000e04:	e0bff315 	stw	r2,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000e08:	e0bfec17 	ldw	r2,-80(fp)
10000e0c:	1009883a 	mov	r4,r2
10000e10:	000127c0 	call	1000127c <convertDecimalToBinary>
10000e14:	e0bfec15 	stw	r2,-80(fp)
10000e18:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000e1c:	e0bfee17 	ldw	r2,-72(fp)
10000e20:	1009883a 	mov	r4,r2
10000e24:	000127c0 	call	1000127c <convertDecimalToBinary>
10000e28:	e0bfee15 	stw	r2,-72(fp)
10000e2c:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000e30:	e0bff017 	ldw	r2,-64(fp)
10000e34:	1009883a 	mov	r4,r2
10000e38:	000127c0 	call	1000127c <convertDecimalToBinary>
10000e3c:	e0bff015 	stw	r2,-64(fp)
10000e40:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000e44:	e0bff217 	ldw	r2,-56(fp)
10000e48:	1009883a 	mov	r4,r2
10000e4c:	000127c0 	call	1000127c <convertDecimalToBinary>
10000e50:	e0bff215 	stw	r2,-56(fp)
10000e54:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000e58:	00802674 	movhi	r2,153
10000e5c:	10a5a004 	addi	r2,r2,-27008
10000e60:	0007883a 	mov	r3,zero
10000e64:	e13fee17 	ldw	r4,-72(fp)
10000e68:	e17fef17 	ldw	r5,-68(fp)
10000e6c:	100d883a 	mov	r6,r2
10000e70:	180f883a 	mov	r7,r3
10000e74:	00031380 	call	10003138 <__muldi3>
10000e78:	1009883a 	mov	r4,r2
10000e7c:	180b883a 	mov	r5,r3
10000e80:	2021883a 	mov	r16,r4
10000e84:	2823883a 	mov	r17,r5
10000e88:	00841eb4 	movhi	r2,4218
10000e8c:	10900004 	addi	r2,r2,16384
10000e90:	00d6bcc4 	movi	r3,23283
10000e94:	e13ff017 	ldw	r4,-64(fp)
10000e98:	e17ff117 	ldw	r5,-60(fp)
10000e9c:	100d883a 	mov	r6,r2
10000ea0:	180f883a 	mov	r7,r3
10000ea4:	00031380 	call	10003138 <__muldi3>
10000ea8:	100d883a 	mov	r6,r2
10000eac:	180f883a 	mov	r7,r3
10000eb0:	3009883a 	mov	r4,r6
10000eb4:	380b883a 	mov	r5,r7
10000eb8:	8105883a 	add	r2,r16,r4
10000ebc:	140d803a 	cmpltu	r6,r2,r16
10000ec0:	8947883a 	add	r3,r17,r5
10000ec4:	30c9883a 	add	r4,r6,r3
10000ec8:	2007883a 	mov	r3,r4
10000ecc:	100d883a 	mov	r6,r2
10000ed0:	180f883a 	mov	r7,r3
10000ed4:	e13fec17 	ldw	r4,-80(fp)
10000ed8:	e17fed17 	ldw	r5,-76(fp)
10000edc:	3105883a 	add	r2,r6,r4
10000ee0:	1191803a 	cmpltu	r8,r2,r6
10000ee4:	3947883a 	add	r3,r7,r5
10000ee8:	40c9883a 	add	r4,r8,r3
10000eec:	2007883a 	mov	r3,r4
10000ef0:	1021883a 	mov	r16,r2
10000ef4:	1823883a 	mov	r17,r3
10000ef8:	009762b4 	movhi	r2,23946
10000efc:	00c058f4 	movhi	r3,355
10000f00:	18d15e04 	addi	r3,r3,17784
10000f04:	e13ff217 	ldw	r4,-56(fp)
10000f08:	e17ff317 	ldw	r5,-52(fp)
10000f0c:	100d883a 	mov	r6,r2
10000f10:	180f883a 	mov	r7,r3
10000f14:	00031380 	call	10003138 <__muldi3>
10000f18:	100d883a 	mov	r6,r2
10000f1c:	180f883a 	mov	r7,r3
10000f20:	3009883a 	mov	r4,r6
10000f24:	380b883a 	mov	r5,r7
10000f28:	8105883a 	add	r2,r16,r4
10000f2c:	140d803a 	cmpltu	r6,r2,r16
10000f30:	8947883a 	add	r3,r17,r5
10000f34:	30c9883a 	add	r4,r6,r3
10000f38:	2007883a 	mov	r3,r4
10000f3c:	e0bfe915 	stw	r2,-92(fp)
10000f40:	e0ffea15 	stw	r3,-88(fp)
10000f44:	00008b06 	br	10001174 <messagePackager+0x3e8>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000f48:	e0800217 	ldw	r2,8(fp)
10000f4c:	e0bff415 	stw	r2,-48(fp)
10000f50:	1005d7fa 	srai	r2,r2,31
10000f54:	e0bff515 	stw	r2,-44(fp)
		tempY = specifiedObject.yPosition;
10000f58:	e0800317 	ldw	r2,12(fp)
10000f5c:	e0bff615 	stw	r2,-40(fp)
10000f60:	1005d7fa 	srai	r2,r2,31
10000f64:	e0bff715 	stw	r2,-36(fp)
		tempType = specifiedObject.objectType;
10000f68:	e0800417 	ldw	r2,16(fp)
10000f6c:	e0bff815 	stw	r2,-32(fp)
10000f70:	1005d7fa 	srai	r2,r2,31
10000f74:	e0bff915 	stw	r2,-28(fp)
		tempState = specifiedObject.objectState;
10000f78:	e0800517 	ldw	r2,20(fp)
10000f7c:	e0bffa15 	stw	r2,-24(fp)
10000f80:	1005d7fa 	srai	r2,r2,31
10000f84:	e0bffb15 	stw	r2,-20(fp)

		// take X and Y and divide them by 5 to fit in our message
		tempX = tempX/5 - 1;
10000f88:	e0bff417 	ldw	r2,-48(fp)
10000f8c:	e0fff517 	ldw	r3,-44(fp)
10000f90:	01c00144 	movi	r7,5
10000f94:	0011883a 	mov	r8,zero
10000f98:	1009883a 	mov	r4,r2
10000f9c:	180b883a 	mov	r5,r3
10000fa0:	380d883a 	mov	r6,r7
10000fa4:	400f883a 	mov	r7,r8
10000fa8:	00032b80 	call	100032b8 <__udivdi3>
10000fac:	1009883a 	mov	r4,r2
10000fb0:	180b883a 	mov	r5,r3
10000fb4:	200d883a 	mov	r6,r4
10000fb8:	280f883a 	mov	r7,r5
10000fbc:	013fffc4 	movi	r4,-1
10000fc0:	017fffc4 	movi	r5,-1
10000fc4:	3105883a 	add	r2,r6,r4
10000fc8:	1191803a 	cmpltu	r8,r2,r6
10000fcc:	3947883a 	add	r3,r7,r5
10000fd0:	40c9883a 	add	r4,r8,r3
10000fd4:	2007883a 	mov	r3,r4
10000fd8:	e0bff415 	stw	r2,-48(fp)
10000fdc:	e0fff515 	stw	r3,-44(fp)
		tempY = tempY/5 - 1;
10000fe0:	e0bff617 	ldw	r2,-40(fp)
10000fe4:	e0fff717 	ldw	r3,-36(fp)
10000fe8:	01c00144 	movi	r7,5
10000fec:	0011883a 	mov	r8,zero
10000ff0:	1009883a 	mov	r4,r2
10000ff4:	180b883a 	mov	r5,r3
10000ff8:	380d883a 	mov	r6,r7
10000ffc:	400f883a 	mov	r7,r8
10001000:	00032b80 	call	100032b8 <__udivdi3>
10001004:	1009883a 	mov	r4,r2
10001008:	180b883a 	mov	r5,r3
1000100c:	200d883a 	mov	r6,r4
10001010:	280f883a 	mov	r7,r5
10001014:	013fffc4 	movi	r4,-1
10001018:	017fffc4 	movi	r5,-1
1000101c:	3105883a 	add	r2,r6,r4
10001020:	1191803a 	cmpltu	r8,r2,r6
10001024:	3947883a 	add	r3,r7,r5
10001028:	40c9883a 	add	r4,r8,r3
1000102c:	2007883a 	mov	r3,r4
10001030:	e0bff615 	stw	r2,-40(fp)
10001034:	e0fff715 	stw	r3,-36(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
10001038:	e0bff417 	ldw	r2,-48(fp)
1000103c:	1009883a 	mov	r4,r2
10001040:	000127c0 	call	1000127c <convertDecimalToBinary>
10001044:	e0bff415 	stw	r2,-48(fp)
10001048:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
1000104c:	e0bff617 	ldw	r2,-40(fp)
10001050:	1009883a 	mov	r4,r2
10001054:	000127c0 	call	1000127c <convertDecimalToBinary>
10001058:	e0bff615 	stw	r2,-40(fp)
1000105c:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
10001060:	e0bff817 	ldw	r2,-32(fp)
10001064:	1009883a 	mov	r4,r2
10001068:	000127c0 	call	1000127c <convertDecimalToBinary>
1000106c:	e0bff815 	stw	r2,-32(fp)
10001070:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
10001074:	e0bffa17 	ldw	r2,-24(fp)
10001078:	1009883a 	mov	r4,r2
1000107c:	000127c0 	call	1000127c <convertDecimalToBinary>
10001080:	e0bffa15 	stw	r2,-24(fp)
10001084:	e03ffb15 	stw	zero,-20(fp)
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/

		// now we append everything together!
		tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
10001088:	00802674 	movhi	r2,153
1000108c:	10a5a004 	addi	r2,r2,-27008
10001090:	0007883a 	mov	r3,zero
10001094:	e13ff617 	ldw	r4,-40(fp)
10001098:	e17ff717 	ldw	r5,-36(fp)
1000109c:	100d883a 	mov	r6,r2
100010a0:	180f883a 	mov	r7,r3
100010a4:	00031380 	call	10003138 <__muldi3>
100010a8:	1009883a 	mov	r4,r2
100010ac:	180b883a 	mov	r5,r3
100010b0:	2021883a 	mov	r16,r4
100010b4:	2823883a 	mov	r17,r5
100010b8:	00841eb4 	movhi	r2,4218
100010bc:	10900004 	addi	r2,r2,16384
100010c0:	00d6bcc4 	movi	r3,23283
100010c4:	e13ff817 	ldw	r4,-32(fp)
100010c8:	e17ff917 	ldw	r5,-28(fp)
100010cc:	100d883a 	mov	r6,r2
100010d0:	180f883a 	mov	r7,r3
100010d4:	00031380 	call	10003138 <__muldi3>
100010d8:	100d883a 	mov	r6,r2
100010dc:	180f883a 	mov	r7,r3
100010e0:	3009883a 	mov	r4,r6
100010e4:	380b883a 	mov	r5,r7
100010e8:	8105883a 	add	r2,r16,r4
100010ec:	140d803a 	cmpltu	r6,r2,r16
100010f0:	8947883a 	add	r3,r17,r5
100010f4:	30c9883a 	add	r4,r6,r3
100010f8:	2007883a 	mov	r3,r4
100010fc:	100d883a 	mov	r6,r2
10001100:	180f883a 	mov	r7,r3
10001104:	e13ff417 	ldw	r4,-48(fp)
10001108:	e17ff517 	ldw	r5,-44(fp)
1000110c:	3105883a 	add	r2,r6,r4
10001110:	1191803a 	cmpltu	r8,r2,r6
10001114:	3947883a 	add	r3,r7,r5
10001118:	40c9883a 	add	r4,r8,r3
1000111c:	2007883a 	mov	r3,r4
10001120:	1021883a 	mov	r16,r2
10001124:	1823883a 	mov	r17,r3
10001128:	009762b4 	movhi	r2,23946
1000112c:	00c058f4 	movhi	r3,355
10001130:	18d15e04 	addi	r3,r3,17784
10001134:	e13ffa17 	ldw	r4,-24(fp)
10001138:	e17ffb17 	ldw	r5,-20(fp)
1000113c:	100d883a 	mov	r6,r2
10001140:	180f883a 	mov	r7,r3
10001144:	00031380 	call	10003138 <__muldi3>
10001148:	100d883a 	mov	r6,r2
1000114c:	180f883a 	mov	r7,r3
10001150:	3009883a 	mov	r4,r6
10001154:	380b883a 	mov	r5,r7
10001158:	8105883a 	add	r2,r16,r4
1000115c:	140d803a 	cmpltu	r6,r2,r16
10001160:	8947883a 	add	r3,r17,r5
10001164:	30c9883a 	add	r4,r6,r3
10001168:	2007883a 	mov	r3,r4
1000116c:	e0bfe915 	stw	r2,-92(fp)
10001170:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001174:	e13fe917 	ldw	r4,-92(fp)
10001178:	e17fea17 	ldw	r5,-88(fp)
1000117c:	00013380 	call	10001338 <convertBinaryToDecimal>
10001180:	e0bffc15 	stw	r2,-16(fp)
10001184:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
10001188:	e0bffc17 	ldw	r2,-16(fp)
}
1000118c:	e6fffe04 	addi	sp,fp,-8
10001190:	dfc00317 	ldw	ra,12(sp)
10001194:	df000217 	ldw	fp,8(sp)
10001198:	dc400117 	ldw	r17,4(sp)
1000119c:	dc000017 	ldw	r16,0(sp)
100011a0:	dec00804 	addi	sp,sp,32
100011a4:	f800283a 	ret

100011a8 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
100011a8:	defff704 	addi	sp,sp,-36
100011ac:	dfc00815 	stw	ra,32(sp)
100011b0:	df000715 	stw	fp,28(sp)
100011b4:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
100011b8:	00804404 	movi	r2,272
100011bc:	10800003 	ldbu	r2,0(r2)
100011c0:	10803fcc 	andi	r2,r2,255
100011c4:	1080201c 	xori	r2,r2,128
100011c8:	10bfe004 	addi	r2,r2,-128
100011cc:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
100011d0:	e13ff917 	ldw	r4,-28(fp)
100011d4:	000127c0 	call	1000127c <convertDecimalToBinary>
100011d8:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100011dc:	e03ffa15 	stw	zero,-24(fp)
100011e0:	00001406 	br	10001234 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
100011e4:	e0bff917 	ldw	r2,-28(fp)
100011e8:	1009883a 	mov	r4,r2
100011ec:	01400284 	movi	r5,10
100011f0:	00040380 	call	10004038 <__umodsi3>
100011f4:	1007883a 	mov	r3,r2
100011f8:	e0bffa17 	ldw	r2,-24(fp)
100011fc:	1085883a 	add	r2,r2,r2
10001200:	1085883a 	add	r2,r2,r2
10001204:	e13ff904 	addi	r4,fp,-28
10001208:	2085883a 	add	r2,r4,r2
1000120c:	10800204 	addi	r2,r2,8
10001210:	10c00015 	stw	r3,0(r2)

		port2 /= 10;
10001214:	e0bff917 	ldw	r2,-28(fp)
10001218:	1009883a 	mov	r4,r2
1000121c:	01400284 	movi	r5,10
10001220:	00040300 	call	10004030 <__udivsi3>
10001224:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001228:	e0bffa17 	ldw	r2,-24(fp)
1000122c:	10800044 	addi	r2,r2,1
10001230:	e0bffa15 	stw	r2,-24(fp)
10001234:	e0bffa17 	ldw	r2,-24(fp)
10001238:	10800150 	cmplti	r2,r2,5
1000123c:	103fe91e 	bne	r2,zero,100011e4 <__alt_data_end+0xf80011e4>

		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001240:	e0bffd17 	ldw	r2,-12(fp)
10001244:	d0a6af15 	stw	r2,-25924(gp)
	key2 = unpackaged[3];
10001248:	e0bffe17 	ldw	r2,-8(fp)
1000124c:	d0a6b115 	stw	r2,-25916(gp)
	key3 = unpackaged[4];
10001250:	e0bfff17 	ldw	r2,-4(fp)
10001254:	d0a6b015 	stw	r2,-25920(gp)
	cursorStreak = unpackaged[0];
10001258:	e0bffb17 	ldw	r2,-20(fp)
1000125c:	d0a6ae15 	stw	r2,-25928(gp)
	cursorClicked = unpackaged[1];
10001260:	e0bffc17 	ldw	r2,-16(fp)
10001264:	d0a6ad15 	stw	r2,-25932(gp)
	if(cursorClicked)
	{
		printf("clicked!");
	}
*/
}
10001268:	e037883a 	mov	sp,fp
1000126c:	dfc00117 	ldw	ra,4(sp)
10001270:	df000017 	ldw	fp,0(sp)
10001274:	dec00204 	addi	sp,sp,8
10001278:	f800283a 	ret

1000127c <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
1000127c:	defff704 	addi	sp,sp,-36
10001280:	dfc00815 	stw	ra,32(sp)
10001284:	df000715 	stw	fp,28(sp)
10001288:	dc400615 	stw	r17,24(sp)
1000128c:	dc000515 	stw	r16,20(sp)
10001290:	df000704 	addi	fp,sp,28
10001294:	e13ffd15 	stw	r4,-12(fp)
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
10001298:	e03ff915 	stw	zero,-28(fp)
1000129c:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
100012a0:	00800044 	movi	r2,1
100012a4:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
100012a8:	00001906 	br	10001310 <convertDecimalToBinary+0x94>
    {
        remainder = n%2;
100012ac:	e0bffd17 	ldw	r2,-12(fp)
100012b0:	1080004c 	andi	r2,r2,1
100012b4:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
100012b8:	e0bffd17 	ldw	r2,-12(fp)
100012bc:	1004d07a 	srli	r2,r2,1
100012c0:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
100012c4:	e13ffc17 	ldw	r4,-16(fp)
100012c8:	e17ffb17 	ldw	r5,-20(fp)
100012cc:	00040400 	call	10004040 <__mulsi3>
100012d0:	1021883a 	mov	r16,r2
100012d4:	1005d7fa 	srai	r2,r2,31
100012d8:	1023883a 	mov	r17,r2
100012dc:	e13ff917 	ldw	r4,-28(fp)
100012e0:	e17ffa17 	ldw	r5,-24(fp)
100012e4:	2405883a 	add	r2,r4,r16
100012e8:	110d803a 	cmpltu	r6,r2,r4
100012ec:	2c47883a 	add	r3,r5,r17
100012f0:	30c9883a 	add	r4,r6,r3
100012f4:	2007883a 	mov	r3,r4
100012f8:	e0bff915 	stw	r2,-28(fp)
100012fc:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
10001300:	e13ffb17 	ldw	r4,-20(fp)
10001304:	01400284 	movi	r5,10
10001308:	00040400 	call	10004040 <__mulsi3>
1000130c:	e0bffb15 	stw	r2,-20(fp)
{
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
10001310:	e0bffd17 	ldw	r2,-12(fp)
10001314:	103fe51e 	bne	r2,zero,100012ac <__alt_data_end+0xf80012ac>
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
10001318:	e0bff917 	ldw	r2,-28(fp)
}
1000131c:	e6fffe04 	addi	sp,fp,-8
10001320:	dfc00317 	ldw	ra,12(sp)
10001324:	df000217 	ldw	fp,8(sp)
10001328:	dc400117 	ldw	r17,4(sp)
1000132c:	dc000017 	ldw	r16,0(sp)
10001330:	dec00404 	addi	sp,sp,16
10001334:	f800283a 	ret

10001338 <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001338:	defff704 	addi	sp,sp,-36
1000133c:	dfc00815 	stw	ra,32(sp)
10001340:	df000715 	stw	fp,28(sp)
10001344:	dc400615 	stw	r17,24(sp)
10001348:	dc000515 	stw	r16,20(sp)
1000134c:	df000704 	addi	fp,sp,28
10001350:	e13ffc15 	stw	r4,-16(fp)
10001354:	e17ffd15 	stw	r5,-12(fp)
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
10001358:	e03ff915 	stw	zero,-28(fp)
1000135c:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
10001360:	00004706 	br	10001480 <convertBinaryToDecimal+0x148>
    {
        remainder = n%10;
10001364:	e0bffc17 	ldw	r2,-16(fp)
10001368:	e0fffd17 	ldw	r3,-12(fp)
1000136c:	01c00284 	movi	r7,10
10001370:	0011883a 	mov	r8,zero
10001374:	1009883a 	mov	r4,r2
10001378:	180b883a 	mov	r5,r3
1000137c:	380d883a 	mov	r6,r7
10001380:	400f883a 	mov	r7,r8
10001384:	00038f80 	call	100038f8 <__umoddi3>
10001388:	1009883a 	mov	r4,r2
1000138c:	180b883a 	mov	r5,r3
10001390:	2005883a 	mov	r2,r4
10001394:	2807883a 	mov	r3,r5
10001398:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
1000139c:	e0bffc17 	ldw	r2,-16(fp)
100013a0:	e0fffd17 	ldw	r3,-12(fp)
100013a4:	01c00284 	movi	r7,10
100013a8:	0011883a 	mov	r8,zero
100013ac:	1009883a 	mov	r4,r2
100013b0:	180b883a 	mov	r5,r3
100013b4:	380d883a 	mov	r6,r7
100013b8:	400f883a 	mov	r7,r8
100013bc:	00032b80 	call	100032b8 <__udivdi3>
100013c0:	1009883a 	mov	r4,r2
100013c4:	180b883a 	mov	r5,r3
100013c8:	e13ffc15 	stw	r4,-16(fp)
100013cc:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
100013d0:	e13ffb17 	ldw	r4,-20(fp)
100013d4:	000675c0 	call	1000675c <__floatunsidf>
100013d8:	1021883a 	mov	r16,r2
100013dc:	1823883a 	mov	r17,r3
100013e0:	e13ffa17 	ldw	r4,-24(fp)
100013e4:	000675c0 	call	1000675c <__floatunsidf>
100013e8:	100f883a 	mov	r7,r2
100013ec:	1811883a 	mov	r8,r3
100013f0:	0009883a 	mov	r4,zero
100013f4:	01500034 	movhi	r5,16384
100013f8:	380d883a 	mov	r6,r7
100013fc:	400f883a 	mov	r7,r8
10001400:	00014b00 	call	100014b0 <pow>
10001404:	100f883a 	mov	r7,r2
10001408:	1811883a 	mov	r8,r3
1000140c:	8009883a 	mov	r4,r16
10001410:	880b883a 	mov	r5,r17
10001414:	380d883a 	mov	r6,r7
10001418:	400f883a 	mov	r7,r8
1000141c:	00054c80 	call	100054c8 <__muldf3>
10001420:	1009883a 	mov	r4,r2
10001424:	180b883a 	mov	r5,r3
10001428:	2021883a 	mov	r16,r4
1000142c:	2823883a 	mov	r17,r5
10001430:	e13ff917 	ldw	r4,-28(fp)
10001434:	000675c0 	call	1000675c <__floatunsidf>
10001438:	100b883a 	mov	r5,r2
1000143c:	180d883a 	mov	r6,r3
10001440:	2809883a 	mov	r4,r5
10001444:	300b883a 	mov	r5,r6
10001448:	800d883a 	mov	r6,r16
1000144c:	880f883a 	mov	r7,r17
10001450:	00040680 	call	10004068 <__adddf3>
10001454:	1009883a 	mov	r4,r2
10001458:	180b883a 	mov	r5,r3
1000145c:	2005883a 	mov	r2,r4
10001460:	2807883a 	mov	r3,r5
10001464:	1009883a 	mov	r4,r2
10001468:	180b883a 	mov	r5,r3
1000146c:	00032440 	call	10003244 <__fixunsdfsi>
10001470:	e0bff915 	stw	r2,-28(fp)
        ++i;
10001474:	e0bffa17 	ldw	r2,-24(fp)
10001478:	10800044 	addi	r2,r2,1
1000147c:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
    while (n!=0)
10001480:	e0bffc17 	ldw	r2,-16(fp)
10001484:	e0fffd17 	ldw	r3,-12(fp)
10001488:	10c4b03a 	or	r2,r2,r3
1000148c:	103fb51e 	bne	r2,zero,10001364 <__alt_data_end+0xf8001364>
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
  //  printf("decimal output: %lu\n", decimalNumber);
    return decimalNumber;
10001490:	e0bff917 	ldw	r2,-28(fp)
}
10001494:	e6fffe04 	addi	sp,fp,-8
10001498:	dfc00317 	ldw	ra,12(sp)
1000149c:	df000217 	ldw	fp,8(sp)
100014a0:	dc400117 	ldw	r17,4(sp)
100014a4:	dc000017 	ldw	r16,0(sp)
100014a8:	dec00404 	addi	sp,sp,16
100014ac:	f800283a 	ret

100014b0 <pow>:
100014b0:	deffee04 	addi	sp,sp,-72
100014b4:	dc800b15 	stw	r18,44(sp)
100014b8:	04840074 	movhi	r18,4097
100014bc:	ddc01015 	stw	r23,64(sp)
100014c0:	dd800f15 	stw	r22,60(sp)
100014c4:	dd400e15 	stw	r21,56(sp)
100014c8:	dd000d15 	stw	r20,52(sp)
100014cc:	dcc00c15 	stw	r19,48(sp)
100014d0:	dc400a15 	stw	r17,40(sp)
100014d4:	dc000915 	stw	r16,36(sp)
100014d8:	dfc01115 	stw	ra,68(sp)
100014dc:	94b5e104 	addi	r18,r18,-10364
100014e0:	202f883a 	mov	r23,r4
100014e4:	282d883a 	mov	r22,r5
100014e8:	302b883a 	mov	r21,r6
100014ec:	3829883a 	mov	r20,r7
100014f0:	00019540 	call	10001954 <__ieee754_pow>
100014f4:	1023883a 	mov	r17,r2
100014f8:	90800017 	ldw	r2,0(r18)
100014fc:	04ffffc4 	movi	r19,-1
10001500:	1821883a 	mov	r16,r3
10001504:	14c00426 	beq	r2,r19,10001518 <pow+0x68>
10001508:	a809883a 	mov	r4,r21
1000150c:	a00b883a 	mov	r5,r20
10001510:	0002ce40 	call	10002ce4 <__fpclassifyd>
10001514:	10000d1e 	bne	r2,zero,1000154c <pow+0x9c>
10001518:	8805883a 	mov	r2,r17
1000151c:	8007883a 	mov	r3,r16
10001520:	dfc01117 	ldw	ra,68(sp)
10001524:	ddc01017 	ldw	r23,64(sp)
10001528:	dd800f17 	ldw	r22,60(sp)
1000152c:	dd400e17 	ldw	r21,56(sp)
10001530:	dd000d17 	ldw	r20,52(sp)
10001534:	dcc00c17 	ldw	r19,48(sp)
10001538:	dc800b17 	ldw	r18,44(sp)
1000153c:	dc400a17 	ldw	r17,40(sp)
10001540:	dc000917 	ldw	r16,36(sp)
10001544:	dec01204 	addi	sp,sp,72
10001548:	f800283a 	ret
1000154c:	b809883a 	mov	r4,r23
10001550:	b00b883a 	mov	r5,r22
10001554:	0002ce40 	call	10002ce4 <__fpclassifyd>
10001558:	1000221e 	bne	r2,zero,100015e4 <pow+0x134>
1000155c:	a809883a 	mov	r4,r21
10001560:	a00b883a 	mov	r5,r20
10001564:	000d883a 	mov	r6,zero
10001568:	000f883a 	mov	r7,zero
1000156c:	00052840 	call	10005284 <__eqdf2>
10001570:	103fe91e 	bne	r2,zero,10001518 <__alt_data_end+0xf8001518>
10001574:	00c00044 	movi	r3,1
10001578:	d8c00015 	stw	r3,0(sp)
1000157c:	00c40074 	movhi	r3,4097
10001580:	18eef304 	addi	r3,r3,-17460
10001584:	90800017 	ldw	r2,0(r18)
10001588:	d8c00115 	stw	r3,4(sp)
1000158c:	00cffc34 	movhi	r3,16368
10001590:	d8000815 	stw	zero,32(sp)
10001594:	ddc00215 	stw	r23,8(sp)
10001598:	dd800315 	stw	r22,12(sp)
1000159c:	dd400415 	stw	r21,16(sp)
100015a0:	dd000515 	stw	r20,20(sp)
100015a4:	d8000615 	stw	zero,24(sp)
100015a8:	d8c00715 	stw	r3,28(sp)
100015ac:	14c00a26 	beq	r2,r19,100015d8 <pow+0x128>
100015b0:	00c00084 	movi	r3,2
100015b4:	10c00826 	beq	r2,r3,100015d8 <pow+0x128>
100015b8:	d809883a 	mov	r4,sp
100015bc:	0002d580 	call	10002d58 <matherr>
100015c0:	10006b26 	beq	r2,zero,10001770 <pow+0x2c0>
100015c4:	d8800817 	ldw	r2,32(sp)
100015c8:	10000326 	beq	r2,zero,100015d8 <pow+0x128>
100015cc:	00068640 	call	10006864 <__errno>
100015d0:	d8c00817 	ldw	r3,32(sp)
100015d4:	10c00015 	stw	r3,0(r2)
100015d8:	d8800617 	ldw	r2,24(sp)
100015dc:	d8c00717 	ldw	r3,28(sp)
100015e0:	003fcf06 	br	10001520 <__alt_data_end+0xf8001520>
100015e4:	b809883a 	mov	r4,r23
100015e8:	b00b883a 	mov	r5,r22
100015ec:	000d883a 	mov	r6,zero
100015f0:	000f883a 	mov	r7,zero
100015f4:	00052840 	call	10005284 <__eqdf2>
100015f8:	1000171e 	bne	r2,zero,10001658 <pow+0x1a8>
100015fc:	a809883a 	mov	r4,r21
10001600:	a00b883a 	mov	r5,r20
10001604:	000d883a 	mov	r6,zero
10001608:	000f883a 	mov	r7,zero
1000160c:	00052840 	call	10005284 <__eqdf2>
10001610:	1000381e 	bne	r2,zero,100016f4 <pow+0x244>
10001614:	00c00044 	movi	r3,1
10001618:	d8c00015 	stw	r3,0(sp)
1000161c:	90800017 	ldw	r2,0(r18)
10001620:	00c40074 	movhi	r3,4097
10001624:	18eef304 	addi	r3,r3,-17460
10001628:	d8c00115 	stw	r3,4(sp)
1000162c:	d8000815 	stw	zero,32(sp)
10001630:	ddc00215 	stw	r23,8(sp)
10001634:	dd800315 	stw	r22,12(sp)
10001638:	dd400415 	stw	r21,16(sp)
1000163c:	dd000515 	stw	r20,20(sp)
10001640:	d8000615 	stw	zero,24(sp)
10001644:	d8000715 	stw	zero,28(sp)
10001648:	103fdb26 	beq	r2,zero,100015b8 <__alt_data_end+0xf80015b8>
1000164c:	008ffc34 	movhi	r2,16368
10001650:	d8800715 	stw	r2,28(sp)
10001654:	003fe006 	br	100015d8 <__alt_data_end+0xf80015d8>
10001658:	8809883a 	mov	r4,r17
1000165c:	800b883a 	mov	r5,r16
10001660:	0002cc80 	call	10002cc8 <finite>
10001664:	10004626 	beq	r2,zero,10001780 <pow+0x2d0>
10001668:	8809883a 	mov	r4,r17
1000166c:	800b883a 	mov	r5,r16
10001670:	000d883a 	mov	r6,zero
10001674:	000f883a 	mov	r7,zero
10001678:	00052840 	call	10005284 <__eqdf2>
1000167c:	103fa61e 	bne	r2,zero,10001518 <__alt_data_end+0xf8001518>
10001680:	b809883a 	mov	r4,r23
10001684:	b00b883a 	mov	r5,r22
10001688:	0002cc80 	call	10002cc8 <finite>
1000168c:	103fa226 	beq	r2,zero,10001518 <__alt_data_end+0xf8001518>
10001690:	a809883a 	mov	r4,r21
10001694:	a00b883a 	mov	r5,r20
10001698:	0002cc80 	call	10002cc8 <finite>
1000169c:	103f9e26 	beq	r2,zero,10001518 <__alt_data_end+0xf8001518>
100016a0:	00800104 	movi	r2,4
100016a4:	d8800015 	stw	r2,0(sp)
100016a8:	90c00017 	ldw	r3,0(r18)
100016ac:	00840074 	movhi	r2,4097
100016b0:	10aef304 	addi	r2,r2,-17460
100016b4:	d8800115 	stw	r2,4(sp)
100016b8:	d8000815 	stw	zero,32(sp)
100016bc:	ddc00215 	stw	r23,8(sp)
100016c0:	dd800315 	stw	r22,12(sp)
100016c4:	dd400415 	stw	r21,16(sp)
100016c8:	dd000515 	stw	r20,20(sp)
100016cc:	d8000615 	stw	zero,24(sp)
100016d0:	d8000715 	stw	zero,28(sp)
100016d4:	00800084 	movi	r2,2
100016d8:	18806126 	beq	r3,r2,10001860 <pow+0x3b0>
100016dc:	d809883a 	mov	r4,sp
100016e0:	0002d580 	call	10002d58 <matherr>
100016e4:	10005e26 	beq	r2,zero,10001860 <pow+0x3b0>
100016e8:	d8800817 	ldw	r2,32(sp)
100016ec:	103fba26 	beq	r2,zero,100015d8 <__alt_data_end+0xf80015d8>
100016f0:	003fb606 	br	100015cc <__alt_data_end+0xf80015cc>
100016f4:	a809883a 	mov	r4,r21
100016f8:	a00b883a 	mov	r5,r20
100016fc:	0002cc80 	call	10002cc8 <finite>
10001700:	103f8526 	beq	r2,zero,10001518 <__alt_data_end+0xf8001518>
10001704:	a809883a 	mov	r4,r21
10001708:	a00b883a 	mov	r5,r20
1000170c:	000d883a 	mov	r6,zero
10001710:	000f883a 	mov	r7,zero
10001714:	00053e80 	call	100053e8 <__ledf2>
10001718:	103f7f0e 	bge	r2,zero,10001518 <__alt_data_end+0xf8001518>
1000171c:	00c00044 	movi	r3,1
10001720:	d8c00015 	stw	r3,0(sp)
10001724:	90800017 	ldw	r2,0(r18)
10001728:	00c40074 	movhi	r3,4097
1000172c:	18eef304 	addi	r3,r3,-17460
10001730:	d8c00115 	stw	r3,4(sp)
10001734:	d8000815 	stw	zero,32(sp)
10001738:	ddc00215 	stw	r23,8(sp)
1000173c:	dd800315 	stw	r22,12(sp)
10001740:	dd400415 	stw	r21,16(sp)
10001744:	dd000515 	stw	r20,20(sp)
10001748:	d8000615 	stw	zero,24(sp)
1000174c:	10002526 	beq	r2,zero,100017e4 <pow+0x334>
10001750:	00fffc34 	movhi	r3,65520
10001754:	d8c00715 	stw	r3,28(sp)
10001758:	00c00084 	movi	r3,2
1000175c:	10c0221e 	bne	r2,r3,100017e8 <pow+0x338>
10001760:	00068640 	call	10006864 <__errno>
10001764:	00c00844 	movi	r3,33
10001768:	10c00015 	stw	r3,0(r2)
1000176c:	003fde06 	br	100016e8 <__alt_data_end+0xf80016e8>
10001770:	00068640 	call	10006864 <__errno>
10001774:	00c00844 	movi	r3,33
10001778:	10c00015 	stw	r3,0(r2)
1000177c:	003f9106 	br	100015c4 <__alt_data_end+0xf80015c4>
10001780:	b809883a 	mov	r4,r23
10001784:	b00b883a 	mov	r5,r22
10001788:	0002cc80 	call	10002cc8 <finite>
1000178c:	103fb626 	beq	r2,zero,10001668 <__alt_data_end+0xf8001668>
10001790:	a809883a 	mov	r4,r21
10001794:	a00b883a 	mov	r5,r20
10001798:	0002cc80 	call	10002cc8 <finite>
1000179c:	103fb226 	beq	r2,zero,10001668 <__alt_data_end+0xf8001668>
100017a0:	8809883a 	mov	r4,r17
100017a4:	800b883a 	mov	r5,r16
100017a8:	0002ce40 	call	10002ce4 <__fpclassifyd>
100017ac:	1000121e 	bne	r2,zero,100017f8 <pow+0x348>
100017b0:	00800044 	movi	r2,1
100017b4:	d8800015 	stw	r2,0(sp)
100017b8:	94000017 	ldw	r16,0(r18)
100017bc:	00840074 	movhi	r2,4097
100017c0:	10aef304 	addi	r2,r2,-17460
100017c4:	d8800115 	stw	r2,4(sp)
100017c8:	d8000815 	stw	zero,32(sp)
100017cc:	ddc00215 	stw	r23,8(sp)
100017d0:	dd800315 	stw	r22,12(sp)
100017d4:	dd400415 	stw	r21,16(sp)
100017d8:	dd000515 	stw	r20,20(sp)
100017dc:	8000241e 	bne	r16,zero,10001870 <pow+0x3c0>
100017e0:	d8000615 	stw	zero,24(sp)
100017e4:	d8000715 	stw	zero,28(sp)
100017e8:	d809883a 	mov	r4,sp
100017ec:	0002d580 	call	10002d58 <matherr>
100017f0:	103fbd1e 	bne	r2,zero,100016e8 <__alt_data_end+0xf80016e8>
100017f4:	003fda06 	br	10001760 <__alt_data_end+0xf8001760>
100017f8:	00c000c4 	movi	r3,3
100017fc:	d8c00015 	stw	r3,0(sp)
10001800:	90800017 	ldw	r2,0(r18)
10001804:	00c40074 	movhi	r3,4097
10001808:	18eef304 	addi	r3,r3,-17460
1000180c:	d8c00115 	stw	r3,4(sp)
10001810:	d8000815 	stw	zero,32(sp)
10001814:	ddc00215 	stw	r23,8(sp)
10001818:	dd800315 	stw	r22,12(sp)
1000181c:	dd400415 	stw	r21,16(sp)
10001820:	dd000515 	stw	r20,20(sp)
10001824:	b809883a 	mov	r4,r23
10001828:	b00b883a 	mov	r5,r22
1000182c:	000d883a 	mov	r6,zero
10001830:	000f883a 	mov	r7,zero
10001834:	1000181e 	bne	r2,zero,10001898 <pow+0x3e8>
10001838:	00b80034 	movhi	r2,57344
1000183c:	d8800615 	stw	r2,24(sp)
10001840:	0091fc34 	movhi	r2,18416
10001844:	10bfffc4 	addi	r2,r2,-1
10001848:	d8800715 	stw	r2,28(sp)
1000184c:	00053e80 	call	100053e8 <__ledf2>
10001850:	10002a16 	blt	r2,zero,100018fc <pow+0x44c>
10001854:	90c00017 	ldw	r3,0(r18)
10001858:	00800084 	movi	r2,2
1000185c:	18bf9f1e 	bne	r3,r2,100016dc <__alt_data_end+0xf80016dc>
10001860:	00068640 	call	10006864 <__errno>
10001864:	00c00884 	movi	r3,34
10001868:	10c00015 	stw	r3,0(r2)
1000186c:	003f9e06 	br	100016e8 <__alt_data_end+0xf80016e8>
10001870:	0009883a 	mov	r4,zero
10001874:	000b883a 	mov	r5,zero
10001878:	000d883a 	mov	r6,zero
1000187c:	000f883a 	mov	r7,zero
10001880:	00049040 	call	10004904 <__divdf3>
10001884:	d8800615 	stw	r2,24(sp)
10001888:	d8c00715 	stw	r3,28(sp)
1000188c:	00800084 	movi	r2,2
10001890:	80bfb326 	beq	r16,r2,10001760 <__alt_data_end+0xf8001760>
10001894:	003fd406 	br	100017e8 <__alt_data_end+0xf80017e8>
10001898:	009ffc34 	movhi	r2,32752
1000189c:	d8000615 	stw	zero,24(sp)
100018a0:	d8800715 	stw	r2,28(sp)
100018a4:	00053e80 	call	100053e8 <__ledf2>
100018a8:	103fea0e 	bge	r2,zero,10001854 <__alt_data_end+0xf8001854>
100018ac:	000d883a 	mov	r6,zero
100018b0:	01cff834 	movhi	r7,16352
100018b4:	a809883a 	mov	r4,r21
100018b8:	a00b883a 	mov	r5,r20
100018bc:	00054c80 	call	100054c8 <__muldf3>
100018c0:	1009883a 	mov	r4,r2
100018c4:	180b883a 	mov	r5,r3
100018c8:	1023883a 	mov	r17,r2
100018cc:	1821883a 	mov	r16,r3
100018d0:	0002d6c0 	call	10002d6c <rint>
100018d4:	1009883a 	mov	r4,r2
100018d8:	180b883a 	mov	r5,r3
100018dc:	880d883a 	mov	r6,r17
100018e0:	800f883a 	mov	r7,r16
100018e4:	00052840 	call	10005284 <__eqdf2>
100018e8:	103fda26 	beq	r2,zero,10001854 <__alt_data_end+0xf8001854>
100018ec:	00bffc34 	movhi	r2,65520
100018f0:	d8000615 	stw	zero,24(sp)
100018f4:	d8800715 	stw	r2,28(sp)
100018f8:	003fd606 	br	10001854 <__alt_data_end+0xf8001854>
100018fc:	000d883a 	mov	r6,zero
10001900:	01cff834 	movhi	r7,16352
10001904:	a809883a 	mov	r4,r21
10001908:	a00b883a 	mov	r5,r20
1000190c:	00054c80 	call	100054c8 <__muldf3>
10001910:	1009883a 	mov	r4,r2
10001914:	180b883a 	mov	r5,r3
10001918:	1023883a 	mov	r17,r2
1000191c:	1821883a 	mov	r16,r3
10001920:	0002d6c0 	call	10002d6c <rint>
10001924:	1009883a 	mov	r4,r2
10001928:	180b883a 	mov	r5,r3
1000192c:	880d883a 	mov	r6,r17
10001930:	800f883a 	mov	r7,r16
10001934:	00052840 	call	10005284 <__eqdf2>
10001938:	103fc626 	beq	r2,zero,10001854 <__alt_data_end+0xf8001854>
1000193c:	00b80034 	movhi	r2,57344
10001940:	d8800615 	stw	r2,24(sp)
10001944:	00b1fc34 	movhi	r2,51184
10001948:	10bfffc4 	addi	r2,r2,-1
1000194c:	d8800715 	stw	r2,28(sp)
10001950:	003fc006 	br	10001854 <__alt_data_end+0xf8001854>

10001954 <__ieee754_pow>:
10001954:	00a00034 	movhi	r2,32768
10001958:	deffec04 	addi	sp,sp,-80
1000195c:	10bfffc4 	addi	r2,r2,-1
10001960:	dc400b15 	stw	r17,44(sp)
10001964:	38a2703a 	and	r17,r7,r2
10001968:	dfc01315 	stw	ra,76(sp)
1000196c:	df001215 	stw	fp,72(sp)
10001970:	ddc01115 	stw	r23,68(sp)
10001974:	dd801015 	stw	r22,64(sp)
10001978:	dd400f15 	stw	r21,60(sp)
1000197c:	dd000e15 	stw	r20,56(sp)
10001980:	dcc00d15 	stw	r19,52(sp)
10001984:	dc800c15 	stw	r18,48(sp)
10001988:	dc000a15 	stw	r16,40(sp)
1000198c:	8986b03a 	or	r3,r17,r6
10001990:	18002a26 	beq	r3,zero,10001a3c <__ieee754_pow+0xe8>
10001994:	28a4703a 	and	r18,r5,r2
10001998:	009ffc34 	movhi	r2,32752
1000199c:	14802316 	blt	r2,r18,10001a2c <__ieee754_pow+0xd8>
100019a0:	90802126 	beq	r18,r2,10001a28 <__ieee754_pow+0xd4>
100019a4:	14402116 	blt	r2,r17,10001a2c <__ieee754_pow+0xd8>
100019a8:	009ffc34 	movhi	r2,32752
100019ac:	88807326 	beq	r17,r2,10001b7c <__ieee754_pow+0x228>
100019b0:	2827883a 	mov	r19,r5
100019b4:	2021883a 	mov	r16,r4
100019b8:	302b883a 	mov	r21,r6
100019bc:	382f883a 	mov	r23,r7
100019c0:	28007016 	blt	r5,zero,10001b84 <__ieee754_pow+0x230>
100019c4:	0039883a 	mov	fp,zero
100019c8:	a8003a1e 	bne	r21,zero,10001ab4 <__ieee754_pow+0x160>
100019cc:	009ffc34 	movhi	r2,32752
100019d0:	88807e26 	beq	r17,r2,10001bcc <__ieee754_pow+0x278>
100019d4:	008ffc34 	movhi	r2,16368
100019d8:	88805426 	beq	r17,r2,10001b2c <__ieee754_pow+0x1d8>
100019dc:	00900034 	movhi	r2,16384
100019e0:	b8834926 	beq	r23,r2,10002708 <__ieee754_pow+0xdb4>
100019e4:	008ff834 	movhi	r2,16352
100019e8:	b880321e 	bne	r23,r2,10001ab4 <__ieee754_pow+0x160>
100019ec:	98003116 	blt	r19,zero,10001ab4 <__ieee754_pow+0x160>
100019f0:	8009883a 	mov	r4,r16
100019f4:	980b883a 	mov	r5,r19
100019f8:	dfc01317 	ldw	ra,76(sp)
100019fc:	df001217 	ldw	fp,72(sp)
10001a00:	ddc01117 	ldw	r23,68(sp)
10001a04:	dd801017 	ldw	r22,64(sp)
10001a08:	dd400f17 	ldw	r21,60(sp)
10001a0c:	dd000e17 	ldw	r20,56(sp)
10001a10:	dcc00d17 	ldw	r19,52(sp)
10001a14:	dc800c17 	ldw	r18,48(sp)
10001a18:	dc400b17 	ldw	r17,44(sp)
10001a1c:	dc000a17 	ldw	r16,40(sp)
10001a20:	dec01404 	addi	sp,sp,80
10001a24:	0002a201 	jmpi	10002a20 <__ieee754_sqrt>
10001a28:	20001226 	beq	r4,zero,10001a74 <__ieee754_pow+0x120>
10001a2c:	00b00434 	movhi	r2,49168
10001a30:	9085883a 	add	r2,r18,r2
10001a34:	1108b03a 	or	r4,r2,r4
10001a38:	20000f1e 	bne	r4,zero,10001a78 <__ieee754_pow+0x124>
10001a3c:	0005883a 	mov	r2,zero
10001a40:	00cffc34 	movhi	r3,16368
10001a44:	dfc01317 	ldw	ra,76(sp)
10001a48:	df001217 	ldw	fp,72(sp)
10001a4c:	ddc01117 	ldw	r23,68(sp)
10001a50:	dd801017 	ldw	r22,64(sp)
10001a54:	dd400f17 	ldw	r21,60(sp)
10001a58:	dd000e17 	ldw	r20,56(sp)
10001a5c:	dcc00d17 	ldw	r19,52(sp)
10001a60:	dc800c17 	ldw	r18,48(sp)
10001a64:	dc400b17 	ldw	r17,44(sp)
10001a68:	dc000a17 	ldw	r16,40(sp)
10001a6c:	dec01404 	addi	sp,sp,80
10001a70:	f800283a 	ret
10001a74:	947fcc0e 	bge	r18,r17,100019a8 <__alt_data_end+0xf80019a8>
10001a78:	01040074 	movhi	r4,4097
10001a7c:	212ef404 	addi	r4,r4,-17456
10001a80:	dfc01317 	ldw	ra,76(sp)
10001a84:	df001217 	ldw	fp,72(sp)
10001a88:	ddc01117 	ldw	r23,68(sp)
10001a8c:	dd801017 	ldw	r22,64(sp)
10001a90:	dd400f17 	ldw	r21,60(sp)
10001a94:	dd000e17 	ldw	r20,56(sp)
10001a98:	dcc00d17 	ldw	r19,52(sp)
10001a9c:	dc800c17 	ldw	r18,48(sp)
10001aa0:	dc400b17 	ldw	r17,44(sp)
10001aa4:	dc000a17 	ldw	r16,40(sp)
10001aa8:	dec01404 	addi	sp,sp,80
10001aac:	0002d601 	jmpi	10002d60 <nan>
10001ab0:	0039883a 	mov	fp,zero
10001ab4:	8009883a 	mov	r4,r16
10001ab8:	980b883a 	mov	r5,r19
10001abc:	0002cb40 	call	10002cb4 <fabs>
10001ac0:	102d883a 	mov	r22,r2
10001ac4:	80000f26 	beq	r16,zero,10001b04 <__ieee754_pow+0x1b0>
10001ac8:	9816d7fa 	srli	r11,r19,31
10001acc:	5affffc4 	addi	r11,r11,-1
10001ad0:	e2c4b03a 	or	r2,fp,r11
10001ad4:	10004a26 	beq	r2,zero,10001c00 <__ieee754_pow+0x2ac>
10001ad8:	00907834 	movhi	r2,16864
10001adc:	1440530e 	bge	r2,r17,10001c2c <__ieee754_pow+0x2d8>
10001ae0:	0090fc34 	movhi	r2,17392
10001ae4:	14433e0e 	bge	r2,r17,100027e0 <__ieee754_pow+0xe8c>
10001ae8:	008ffc34 	movhi	r2,16368
10001aec:	10bfffc4 	addi	r2,r2,-1
10001af0:	14801916 	blt	r2,r18,10001b58 <__ieee754_pow+0x204>
10001af4:	b8001916 	blt	r23,zero,10001b5c <__ieee754_pow+0x208>
10001af8:	0005883a 	mov	r2,zero
10001afc:	0007883a 	mov	r3,zero
10001b00:	003fd006 	br	10001a44 <__alt_data_end+0xf8001a44>
10001b04:	90000526 	beq	r18,zero,10001b1c <__ieee754_pow+0x1c8>
10001b08:	00900034 	movhi	r2,16384
10001b0c:	10bfffc4 	addi	r2,r2,-1
10001b10:	9884703a 	and	r2,r19,r2
10001b14:	010ffc34 	movhi	r4,16368
10001b18:	113feb1e 	bne	r2,r4,10001ac8 <__alt_data_end+0xf8001ac8>
10001b1c:	b8000716 	blt	r23,zero,10001b3c <__ieee754_pow+0x1e8>
10001b20:	9802f216 	blt	r19,zero,100026ec <__ieee754_pow+0xd98>
10001b24:	b005883a 	mov	r2,r22
10001b28:	003fc606 	br	10001a44 <__alt_data_end+0xf8001a44>
10001b2c:	b8038816 	blt	r23,zero,10002950 <__ieee754_pow+0xffc>
10001b30:	8005883a 	mov	r2,r16
10001b34:	9807883a 	mov	r3,r19
10001b38:	003fc206 	br	10001a44 <__alt_data_end+0xf8001a44>
10001b3c:	b00d883a 	mov	r6,r22
10001b40:	0009883a 	mov	r4,zero
10001b44:	014ffc34 	movhi	r5,16368
10001b48:	180f883a 	mov	r7,r3
10001b4c:	00049040 	call	10004904 <__divdf3>
10001b50:	102d883a 	mov	r22,r2
10001b54:	003ff206 	br	10001b20 <__alt_data_end+0xf8001b20>
10001b58:	05ffe70e 	bge	zero,r23,10001af8 <__alt_data_end+0xf8001af8>
10001b5c:	01220034 	movhi	r4,34816
10001b60:	015f8e34 	movhi	r5,32312
10001b64:	211d6704 	addi	r4,r4,30108
10001b68:	29790f04 	addi	r5,r5,-7108
10001b6c:	200d883a 	mov	r6,r4
10001b70:	280f883a 	mov	r7,r5
10001b74:	00054c80 	call	100054c8 <__muldf3>
10001b78:	003fb206 	br	10001a44 <__alt_data_end+0xf8001a44>
10001b7c:	303f8c26 	beq	r6,zero,100019b0 <__alt_data_end+0xf80019b0>
10001b80:	003faa06 	br	10001a2c <__alt_data_end+0xf8001a2c>
10001b84:	0090d034 	movhi	r2,17216
10001b88:	10bfffc4 	addi	r2,r2,-1
10001b8c:	14401a16 	blt	r2,r17,10001bf8 <__ieee754_pow+0x2a4>
10001b90:	008ffc34 	movhi	r2,16368
10001b94:	10bfffc4 	addi	r2,r2,-1
10001b98:	147f8a0e 	bge	r2,r17,100019c4 <__alt_data_end+0xf80019c4>
10001b9c:	8809d53a 	srai	r4,r17,20
10001ba0:	00c104c4 	movi	r3,1043
10001ba4:	1903840e 	bge	r3,r4,100029b8 <__ieee754_pow+0x1064>
10001ba8:	00810cc4 	movi	r2,1075
10001bac:	1105c83a 	sub	r2,r2,r4
10001bb0:	3086d83a 	srl	r3,r6,r2
10001bb4:	1884983a 	sll	r2,r3,r2
10001bb8:	11bf821e 	bne	r2,r6,100019c4 <__alt_data_end+0xf80019c4>
10001bbc:	18c0004c 	andi	r3,r3,1
10001bc0:	02800084 	movi	r10,2
10001bc4:	50f9c83a 	sub	fp,r10,r3
10001bc8:	003f7f06 	br	100019c8 <__alt_data_end+0xf80019c8>
10001bcc:	01300434 	movhi	r4,49168
10001bd0:	9109883a 	add	r4,r18,r4
10001bd4:	2408b03a 	or	r4,r4,r16
10001bd8:	203f9826 	beq	r4,zero,10001a3c <__alt_data_end+0xf8001a3c>
10001bdc:	008ffc34 	movhi	r2,16368
10001be0:	10bfffc4 	addi	r2,r2,-1
10001be4:	1482f50e 	bge	r2,r18,100027bc <__ieee754_pow+0xe68>
10001be8:	b83fc316 	blt	r23,zero,10001af8 <__alt_data_end+0xf8001af8>
10001bec:	0005883a 	mov	r2,zero
10001bf0:	b807883a 	mov	r3,r23
10001bf4:	003f9306 	br	10001a44 <__alt_data_end+0xf8001a44>
10001bf8:	07000084 	movi	fp,2
10001bfc:	003f7206 	br	100019c8 <__alt_data_end+0xf80019c8>
10001c00:	8009883a 	mov	r4,r16
10001c04:	980b883a 	mov	r5,r19
10001c08:	200d883a 	mov	r6,r4
10001c0c:	280f883a 	mov	r7,r5
10001c10:	0005d340 	call	10005d34 <__subdf3>
10001c14:	1009883a 	mov	r4,r2
10001c18:	180b883a 	mov	r5,r3
10001c1c:	100d883a 	mov	r6,r2
10001c20:	180f883a 	mov	r7,r3
10001c24:	00049040 	call	10004904 <__divdf3>
10001c28:	003f8606 	br	10001a44 <__alt_data_end+0xf8001a44>
10001c2c:	00800434 	movhi	r2,16
10001c30:	10bfffc4 	addi	r2,r2,-1
10001c34:	1482e816 	blt	r2,r18,100027d8 <__ieee754_pow+0xe84>
10001c38:	b009883a 	mov	r4,r22
10001c3c:	180b883a 	mov	r5,r3
10001c40:	000d883a 	mov	r6,zero
10001c44:	01d0d034 	movhi	r7,17216
10001c48:	dac00915 	stw	r11,36(sp)
10001c4c:	00054c80 	call	100054c8 <__muldf3>
10001c50:	dac00917 	ldw	r11,36(sp)
10001c54:	102d883a 	mov	r22,r2
10001c58:	1825883a 	mov	r18,r3
10001c5c:	013ff2c4 	movi	r4,-53
10001c60:	9007d53a 	srai	r3,r18,20
10001c64:	00800434 	movhi	r2,16
10001c68:	10bfffc4 	addi	r2,r2,-1
10001c6c:	18ff0044 	addi	r3,r3,-1023
10001c70:	1911883a 	add	r8,r3,r4
10001c74:	00c00134 	movhi	r3,4
10001c78:	9084703a 	and	r2,r18,r2
10001c7c:	18e62384 	addi	r3,r3,-26482
10001c80:	14cffc34 	orhi	r19,r2,16368
10001c84:	1882d10e 	bge	r3,r2,100027cc <__ieee754_pow+0xe78>
10001c88:	00c00334 	movhi	r3,12
10001c8c:	18ed9e44 	addi	r3,r3,-18823
10001c90:	1883550e 	bge	r3,r2,100029e8 <__ieee754_pow+0x1094>
10001c94:	00bffc34 	movhi	r2,65520
10001c98:	42000044 	addi	r8,r8,1
10001c9c:	98a7883a 	add	r19,r19,r2
10001ca0:	0021883a 	mov	r16,zero
10001ca4:	0019883a 	mov	r12,zero
10001ca8:	601890fa 	slli	r12,r12,3
10001cac:	00840074 	movhi	r2,4097
10001cb0:	10aefd04 	addi	r2,r2,-17420
10001cb4:	1305883a 	add	r2,r2,r12
10001cb8:	13400017 	ldw	r13,0(r2)
10001cbc:	12800117 	ldw	r10,4(r2)
10001cc0:	b009883a 	mov	r4,r22
10001cc4:	980b883a 	mov	r5,r19
10001cc8:	680d883a 	mov	r6,r13
10001ccc:	500f883a 	mov	r7,r10
10001cd0:	da000815 	stw	r8,32(sp)
10001cd4:	dac00915 	stw	r11,36(sp)
10001cd8:	db000715 	stw	r12,28(sp)
10001cdc:	da800315 	stw	r10,12(sp)
10001ce0:	db400415 	stw	r13,16(sp)
10001ce4:	0005d340 	call	10005d34 <__subdf3>
10001ce8:	da800317 	ldw	r10,12(sp)
10001cec:	db400417 	ldw	r13,16(sp)
10001cf0:	b009883a 	mov	r4,r22
10001cf4:	500f883a 	mov	r7,r10
10001cf8:	680d883a 	mov	r6,r13
10001cfc:	980b883a 	mov	r5,r19
10001d00:	1829883a 	mov	r20,r3
10001d04:	d8800015 	stw	r2,0(sp)
10001d08:	00040680 	call	10004068 <__adddf3>
10001d0c:	0009883a 	mov	r4,zero
10001d10:	014ffc34 	movhi	r5,16368
10001d14:	100d883a 	mov	r6,r2
10001d18:	180f883a 	mov	r7,r3
10001d1c:	00049040 	call	10004904 <__divdf3>
10001d20:	d9000017 	ldw	r4,0(sp)
10001d24:	a00b883a 	mov	r5,r20
10001d28:	100d883a 	mov	r6,r2
10001d2c:	180f883a 	mov	r7,r3
10001d30:	d8c00615 	stw	r3,24(sp)
10001d34:	d8800515 	stw	r2,20(sp)
10001d38:	00054c80 	call	100054c8 <__muldf3>
10001d3c:	1025883a 	mov	r18,r2
10001d40:	9805d07a 	srai	r2,r19,1
10001d44:	1823883a 	mov	r17,r3
10001d48:	880b883a 	mov	r5,r17
10001d4c:	10c80034 	orhi	r3,r2,8192
10001d50:	00800234 	movhi	r2,8
10001d54:	1885883a 	add	r2,r3,r2
10001d58:	1421883a 	add	r16,r2,r16
10001d5c:	800f883a 	mov	r7,r16
10001d60:	0009883a 	mov	r4,zero
10001d64:	000d883a 	mov	r6,zero
10001d68:	00054c80 	call	100054c8 <__muldf3>
10001d6c:	d9000017 	ldw	r4,0(sp)
10001d70:	a00b883a 	mov	r5,r20
10001d74:	100d883a 	mov	r6,r2
10001d78:	180f883a 	mov	r7,r3
10001d7c:	0005d340 	call	10005d34 <__subdf3>
10001d80:	da800317 	ldw	r10,12(sp)
10001d84:	db400417 	ldw	r13,16(sp)
10001d88:	800b883a 	mov	r5,r16
10001d8c:	500f883a 	mov	r7,r10
10001d90:	680d883a 	mov	r6,r13
10001d94:	0009883a 	mov	r4,zero
10001d98:	1829883a 	mov	r20,r3
10001d9c:	d8800315 	stw	r2,12(sp)
10001da0:	0005d340 	call	10005d34 <__subdf3>
10001da4:	b009883a 	mov	r4,r22
10001da8:	980b883a 	mov	r5,r19
10001dac:	100d883a 	mov	r6,r2
10001db0:	180f883a 	mov	r7,r3
10001db4:	0005d340 	call	10005d34 <__subdf3>
10001db8:	880b883a 	mov	r5,r17
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	100d883a 	mov	r6,r2
10001dc4:	180f883a 	mov	r7,r3
10001dc8:	00054c80 	call	100054c8 <__muldf3>
10001dcc:	da400317 	ldw	r9,12(sp)
10001dd0:	a00b883a 	mov	r5,r20
10001dd4:	100d883a 	mov	r6,r2
10001dd8:	4809883a 	mov	r4,r9
10001ddc:	180f883a 	mov	r7,r3
10001de0:	0005d340 	call	10005d34 <__subdf3>
10001de4:	dbc00517 	ldw	r15,20(sp)
10001de8:	db800617 	ldw	r14,24(sp)
10001dec:	1009883a 	mov	r4,r2
10001df0:	780d883a 	mov	r6,r15
10001df4:	700f883a 	mov	r7,r14
10001df8:	180b883a 	mov	r5,r3
10001dfc:	00054c80 	call	100054c8 <__muldf3>
10001e00:	9009883a 	mov	r4,r18
10001e04:	880b883a 	mov	r5,r17
10001e08:	900d883a 	mov	r6,r18
10001e0c:	880f883a 	mov	r7,r17
10001e10:	182d883a 	mov	r22,r3
10001e14:	d8800015 	stw	r2,0(sp)
10001e18:	00054c80 	call	100054c8 <__muldf3>
10001e1c:	1009883a 	mov	r4,r2
10001e20:	180b883a 	mov	r5,r3
10001e24:	100d883a 	mov	r6,r2
10001e28:	180f883a 	mov	r7,r3
10001e2c:	1027883a 	mov	r19,r2
10001e30:	1821883a 	mov	r16,r3
10001e34:	00054c80 	call	100054c8 <__muldf3>
10001e38:	01929174 	movhi	r6,19013
10001e3c:	01cff2b4 	movhi	r7,16330
10001e40:	9809883a 	mov	r4,r19
10001e44:	800b883a 	mov	r5,r16
10001e48:	3193bbc4 	addi	r6,r6,20207
10001e4c:	39df8a04 	addi	r7,r7,32296
10001e50:	1829883a 	mov	r20,r3
10001e54:	d8800315 	stw	r2,12(sp)
10001e58:	00054c80 	call	100054c8 <__muldf3>
10001e5c:	01a4f2b4 	movhi	r6,37834
10001e60:	01cff3b4 	movhi	r7,16334
10001e64:	1009883a 	mov	r4,r2
10001e68:	180b883a 	mov	r5,r3
10001e6c:	31b6d944 	addi	r6,r6,-9371
10001e70:	39e19284 	addi	r7,r7,-31158
10001e74:	00040680 	call	10004068 <__adddf3>
10001e78:	980d883a 	mov	r6,r19
10001e7c:	800f883a 	mov	r7,r16
10001e80:	1009883a 	mov	r4,r2
10001e84:	180b883a 	mov	r5,r3
10001e88:	00054c80 	call	100054c8 <__muldf3>
10001e8c:	01aa4774 	movhi	r6,43293
10001e90:	01cff474 	movhi	r7,16337
10001e94:	1009883a 	mov	r4,r2
10001e98:	180b883a 	mov	r5,r3
10001e9c:	31904044 	addi	r6,r6,16641
10001ea0:	39dd1804 	addi	r7,r7,29792
10001ea4:	00040680 	call	10004068 <__adddf3>
10001ea8:	980d883a 	mov	r6,r19
10001eac:	800f883a 	mov	r7,r16
10001eb0:	1009883a 	mov	r4,r2
10001eb4:	180b883a 	mov	r5,r3
10001eb8:	00054c80 	call	100054c8 <__muldf3>
10001ebc:	019463f4 	movhi	r6,20879
10001ec0:	01cff574 	movhi	r7,16341
10001ec4:	1009883a 	mov	r4,r2
10001ec8:	180b883a 	mov	r5,r3
10001ecc:	31899344 	addi	r6,r6,9805
10001ed0:	39d55544 	addi	r7,r7,21845
10001ed4:	00040680 	call	10004068 <__adddf3>
10001ed8:	980d883a 	mov	r6,r19
10001edc:	800f883a 	mov	r7,r16
10001ee0:	1009883a 	mov	r4,r2
10001ee4:	180b883a 	mov	r5,r3
10001ee8:	00054c80 	call	100054c8 <__muldf3>
10001eec:	01b6dc34 	movhi	r6,56176
10001ef0:	01cff6f4 	movhi	r7,16347
10001ef4:	1009883a 	mov	r4,r2
10001ef8:	180b883a 	mov	r5,r3
10001efc:	31aaffc4 	addi	r6,r6,-21505
10001f00:	39db6d84 	addi	r7,r7,28086
10001f04:	00040680 	call	10004068 <__adddf3>
10001f08:	980d883a 	mov	r6,r19
10001f0c:	800f883a 	mov	r7,r16
10001f10:	1009883a 	mov	r4,r2
10001f14:	180b883a 	mov	r5,r3
10001f18:	00054c80 	call	100054c8 <__muldf3>
10001f1c:	018cccf4 	movhi	r6,13107
10001f20:	01cff8f4 	movhi	r7,16355
10001f24:	1009883a 	mov	r4,r2
10001f28:	180b883a 	mov	r5,r3
10001f2c:	318cc0c4 	addi	r6,r6,13059
10001f30:	39ccccc4 	addi	r7,r7,13107
10001f34:	00040680 	call	10004068 <__adddf3>
10001f38:	da400317 	ldw	r9,12(sp)
10001f3c:	a00b883a 	mov	r5,r20
10001f40:	100d883a 	mov	r6,r2
10001f44:	4809883a 	mov	r4,r9
10001f48:	180f883a 	mov	r7,r3
10001f4c:	00054c80 	call	100054c8 <__muldf3>
10001f50:	880b883a 	mov	r5,r17
10001f54:	900d883a 	mov	r6,r18
10001f58:	880f883a 	mov	r7,r17
10001f5c:	0009883a 	mov	r4,zero
10001f60:	1027883a 	mov	r19,r2
10001f64:	1821883a 	mov	r16,r3
10001f68:	00040680 	call	10004068 <__adddf3>
10001f6c:	d9800017 	ldw	r6,0(sp)
10001f70:	b00f883a 	mov	r7,r22
10001f74:	1009883a 	mov	r4,r2
10001f78:	180b883a 	mov	r5,r3
10001f7c:	00054c80 	call	100054c8 <__muldf3>
10001f80:	980d883a 	mov	r6,r19
10001f84:	800f883a 	mov	r7,r16
10001f88:	1009883a 	mov	r4,r2
10001f8c:	180b883a 	mov	r5,r3
10001f90:	00040680 	call	10004068 <__adddf3>
10001f94:	880f883a 	mov	r7,r17
10001f98:	880b883a 	mov	r5,r17
10001f9c:	000d883a 	mov	r6,zero
10001fa0:	0009883a 	mov	r4,zero
10001fa4:	1029883a 	mov	r20,r2
10001fa8:	1827883a 	mov	r19,r3
10001fac:	00054c80 	call	100054c8 <__muldf3>
10001fb0:	1009883a 	mov	r4,r2
10001fb4:	180b883a 	mov	r5,r3
10001fb8:	000d883a 	mov	r6,zero
10001fbc:	01d00234 	movhi	r7,16392
10001fc0:	d8c00615 	stw	r3,24(sp)
10001fc4:	d8800515 	stw	r2,20(sp)
10001fc8:	00040680 	call	10004068 <__adddf3>
10001fcc:	a00d883a 	mov	r6,r20
10001fd0:	980f883a 	mov	r7,r19
10001fd4:	1009883a 	mov	r4,r2
10001fd8:	180b883a 	mov	r5,r3
10001fdc:	00040680 	call	10004068 <__adddf3>
10001fe0:	880b883a 	mov	r5,r17
10001fe4:	000d883a 	mov	r6,zero
10001fe8:	180f883a 	mov	r7,r3
10001fec:	0009883a 	mov	r4,zero
10001ff0:	1821883a 	mov	r16,r3
10001ff4:	00054c80 	call	100054c8 <__muldf3>
10001ff8:	d9000017 	ldw	r4,0(sp)
10001ffc:	b00b883a 	mov	r5,r22
10002000:	800f883a 	mov	r7,r16
10002004:	000d883a 	mov	r6,zero
10002008:	d8800115 	stw	r2,4(sp)
1000200c:	d8c00215 	stw	r3,8(sp)
10002010:	00054c80 	call	100054c8 <__muldf3>
10002014:	800b883a 	mov	r5,r16
10002018:	0009883a 	mov	r4,zero
1000201c:	000d883a 	mov	r6,zero
10002020:	01d00234 	movhi	r7,16392
10002024:	182d883a 	mov	r22,r3
10002028:	d8800315 	stw	r2,12(sp)
1000202c:	0005d340 	call	10005d34 <__subdf3>
10002030:	dbc00517 	ldw	r15,20(sp)
10002034:	db800617 	ldw	r14,24(sp)
10002038:	1009883a 	mov	r4,r2
1000203c:	780d883a 	mov	r6,r15
10002040:	700f883a 	mov	r7,r14
10002044:	180b883a 	mov	r5,r3
10002048:	0005d340 	call	10005d34 <__subdf3>
1000204c:	a009883a 	mov	r4,r20
10002050:	980b883a 	mov	r5,r19
10002054:	100d883a 	mov	r6,r2
10002058:	180f883a 	mov	r7,r3
1000205c:	0005d340 	call	10005d34 <__subdf3>
10002060:	900d883a 	mov	r6,r18
10002064:	880f883a 	mov	r7,r17
10002068:	1009883a 	mov	r4,r2
1000206c:	180b883a 	mov	r5,r3
10002070:	00054c80 	call	100054c8 <__muldf3>
10002074:	da400317 	ldw	r9,12(sp)
10002078:	b00b883a 	mov	r5,r22
1000207c:	100d883a 	mov	r6,r2
10002080:	4809883a 	mov	r4,r9
10002084:	180f883a 	mov	r7,r3
10002088:	00040680 	call	10004068 <__adddf3>
1000208c:	d9000117 	ldw	r4,4(sp)
10002090:	d9400217 	ldw	r5,8(sp)
10002094:	100d883a 	mov	r6,r2
10002098:	180f883a 	mov	r7,r3
1000209c:	102d883a 	mov	r22,r2
100020a0:	1825883a 	mov	r18,r3
100020a4:	00040680 	call	10004068 <__adddf3>
100020a8:	01cffbf4 	movhi	r7,16367
100020ac:	39f1c244 	addi	r7,r7,-14583
100020b0:	0009883a 	mov	r4,zero
100020b4:	180b883a 	mov	r5,r3
100020b8:	01b80034 	movhi	r6,57344
100020bc:	1823883a 	mov	r17,r3
100020c0:	00054c80 	call	100054c8 <__muldf3>
100020c4:	018516f4 	movhi	r6,5211
100020c8:	01ef8fb4 	movhi	r7,48702
100020cc:	880b883a 	mov	r5,r17
100020d0:	31807d44 	addi	r6,r6,501
100020d4:	39cbf804 	addi	r7,r7,12256
100020d8:	0009883a 	mov	r4,zero
100020dc:	1029883a 	mov	r20,r2
100020e0:	1827883a 	mov	r19,r3
100020e4:	00054c80 	call	100054c8 <__muldf3>
100020e8:	d9800117 	ldw	r6,4(sp)
100020ec:	d9c00217 	ldw	r7,8(sp)
100020f0:	880b883a 	mov	r5,r17
100020f4:	0009883a 	mov	r4,zero
100020f8:	1821883a 	mov	r16,r3
100020fc:	d8800415 	stw	r2,16(sp)
10002100:	0005d340 	call	10005d34 <__subdf3>
10002104:	b009883a 	mov	r4,r22
10002108:	900b883a 	mov	r5,r18
1000210c:	100d883a 	mov	r6,r2
10002110:	180f883a 	mov	r7,r3
10002114:	0005d340 	call	10005d34 <__subdf3>
10002118:	01b70eb4 	movhi	r6,56378
1000211c:	01cffbf4 	movhi	r7,16367
10002120:	1009883a 	mov	r4,r2
10002124:	180b883a 	mov	r5,r3
10002128:	3180ff44 	addi	r6,r6,1021
1000212c:	39f1c244 	addi	r7,r7,-14583
10002130:	00054c80 	call	100054c8 <__muldf3>
10002134:	db400417 	ldw	r13,16(sp)
10002138:	800b883a 	mov	r5,r16
1000213c:	100d883a 	mov	r6,r2
10002140:	6809883a 	mov	r4,r13
10002144:	180f883a 	mov	r7,r3
10002148:	00040680 	call	10004068 <__adddf3>
1000214c:	db000717 	ldw	r12,28(sp)
10002150:	1009883a 	mov	r4,r2
10002154:	00840074 	movhi	r2,4097
10002158:	10aef504 	addi	r2,r2,-17452
1000215c:	1305883a 	add	r2,r2,r12
10002160:	11800017 	ldw	r6,0(r2)
10002164:	11c00117 	ldw	r7,4(r2)
10002168:	180b883a 	mov	r5,r3
1000216c:	00040680 	call	10004068 <__adddf3>
10002170:	da000817 	ldw	r8,32(sp)
10002174:	1025883a 	mov	r18,r2
10002178:	1823883a 	mov	r17,r3
1000217c:	4009883a 	mov	r4,r8
10002180:	000668c0 	call	1000668c <__floatsidf>
10002184:	db000717 	ldw	r12,28(sp)
10002188:	d8800115 	stw	r2,4(sp)
1000218c:	00840074 	movhi	r2,4097
10002190:	10aef904 	addi	r2,r2,-17436
10002194:	1319883a 	add	r12,r2,r12
10002198:	65800017 	ldw	r22,0(r12)
1000219c:	63000117 	ldw	r12,4(r12)
100021a0:	a009883a 	mov	r4,r20
100021a4:	980b883a 	mov	r5,r19
100021a8:	900d883a 	mov	r6,r18
100021ac:	880f883a 	mov	r7,r17
100021b0:	db000015 	stw	r12,0(sp)
100021b4:	d8c00215 	stw	r3,8(sp)
100021b8:	00040680 	call	10004068 <__adddf3>
100021bc:	d9c00017 	ldw	r7,0(sp)
100021c0:	1009883a 	mov	r4,r2
100021c4:	180b883a 	mov	r5,r3
100021c8:	b00d883a 	mov	r6,r22
100021cc:	00040680 	call	10004068 <__adddf3>
100021d0:	d9800117 	ldw	r6,4(sp)
100021d4:	d9c00217 	ldw	r7,8(sp)
100021d8:	1009883a 	mov	r4,r2
100021dc:	180b883a 	mov	r5,r3
100021e0:	00040680 	call	10004068 <__adddf3>
100021e4:	d9800117 	ldw	r6,4(sp)
100021e8:	d9c00217 	ldw	r7,8(sp)
100021ec:	0009883a 	mov	r4,zero
100021f0:	180b883a 	mov	r5,r3
100021f4:	1821883a 	mov	r16,r3
100021f8:	0005d340 	call	10005d34 <__subdf3>
100021fc:	d9c00017 	ldw	r7,0(sp)
10002200:	1009883a 	mov	r4,r2
10002204:	180b883a 	mov	r5,r3
10002208:	b00d883a 	mov	r6,r22
1000220c:	0005d340 	call	10005d34 <__subdf3>
10002210:	1009883a 	mov	r4,r2
10002214:	180b883a 	mov	r5,r3
10002218:	a00d883a 	mov	r6,r20
1000221c:	980f883a 	mov	r7,r19
10002220:	0005d340 	call	10005d34 <__subdf3>
10002224:	9009883a 	mov	r4,r18
10002228:	880b883a 	mov	r5,r17
1000222c:	100d883a 	mov	r6,r2
10002230:	180f883a 	mov	r7,r3
10002234:	0005d340 	call	10005d34 <__subdf3>
10002238:	dac00917 	ldw	r11,36(sp)
1000223c:	e2bfffc4 	addi	r10,fp,-1
10002240:	1027883a 	mov	r19,r2
10002244:	52d6b03a 	or	r11,r10,r11
10002248:	1823883a 	mov	r17,r3
1000224c:	5801591e 	bne	r11,zero,100027b4 <__ieee754_pow+0xe60>
10002250:	04affc34 	movhi	r18,49136
10002254:	b80f883a 	mov	r7,r23
10002258:	a809883a 	mov	r4,r21
1000225c:	b80b883a 	mov	r5,r23
10002260:	000d883a 	mov	r6,zero
10002264:	0005d340 	call	10005d34 <__subdf3>
10002268:	1009883a 	mov	r4,r2
1000226c:	180b883a 	mov	r5,r3
10002270:	000d883a 	mov	r6,zero
10002274:	800f883a 	mov	r7,r16
10002278:	00054c80 	call	100054c8 <__muldf3>
1000227c:	a809883a 	mov	r4,r21
10002280:	b80b883a 	mov	r5,r23
10002284:	980d883a 	mov	r6,r19
10002288:	880f883a 	mov	r7,r17
1000228c:	102d883a 	mov	r22,r2
10002290:	1829883a 	mov	r20,r3
10002294:	00054c80 	call	100054c8 <__muldf3>
10002298:	b009883a 	mov	r4,r22
1000229c:	a00b883a 	mov	r5,r20
100022a0:	100d883a 	mov	r6,r2
100022a4:	180f883a 	mov	r7,r3
100022a8:	00040680 	call	10004068 <__adddf3>
100022ac:	b80b883a 	mov	r5,r23
100022b0:	0009883a 	mov	r4,zero
100022b4:	000d883a 	mov	r6,zero
100022b8:	800f883a 	mov	r7,r16
100022bc:	1027883a 	mov	r19,r2
100022c0:	1823883a 	mov	r17,r3
100022c4:	00054c80 	call	100054c8 <__muldf3>
100022c8:	9809883a 	mov	r4,r19
100022cc:	880b883a 	mov	r5,r17
100022d0:	100d883a 	mov	r6,r2
100022d4:	180f883a 	mov	r7,r3
100022d8:	102d883a 	mov	r22,r2
100022dc:	182b883a 	mov	r21,r3
100022e0:	00040680 	call	10004068 <__adddf3>
100022e4:	102f883a 	mov	r23,r2
100022e8:	00902434 	movhi	r2,16528
100022ec:	10bfffc4 	addi	r2,r2,-1
100022f0:	1829883a 	mov	r20,r3
100022f4:	b013883a 	mov	r9,r22
100022f8:	a811883a 	mov	r8,r21
100022fc:	10c1080e 	bge	r2,r3,10002720 <__ieee754_pow+0xdcc>
10002300:	00efdc34 	movhi	r3,49008
10002304:	a0c7883a 	add	r3,r20,r3
10002308:	1dc6b03a 	or	r3,r3,r23
1000230c:	1801961e 	bne	r3,zero,10002968 <__ieee754_pow+0x1014>
10002310:	01994b34 	movhi	r6,25900
10002314:	01cf25f4 	movhi	r7,15511
10002318:	31a0bf84 	addi	r6,r6,-32002
1000231c:	39c551c4 	addi	r7,r7,5447
10002320:	9809883a 	mov	r4,r19
10002324:	880b883a 	mov	r5,r17
10002328:	00040680 	call	10004068 <__adddf3>
1000232c:	b809883a 	mov	r4,r23
10002330:	a00b883a 	mov	r5,r20
10002334:	b00d883a 	mov	r6,r22
10002338:	a80f883a 	mov	r7,r21
1000233c:	1039883a 	mov	fp,r2
10002340:	1821883a 	mov	r16,r3
10002344:	0005d340 	call	10005d34 <__subdf3>
10002348:	e009883a 	mov	r4,fp
1000234c:	800b883a 	mov	r5,r16
10002350:	100d883a 	mov	r6,r2
10002354:	180f883a 	mov	r7,r3
10002358:	00053080 	call	10005308 <__gedf2>
1000235c:	00818216 	blt	zero,r2,10002968 <__ieee754_pow+0x1014>
10002360:	a021883a 	mov	r16,r20
10002364:	8011d53a 	srai	r8,r16,20
10002368:	00800434 	movhi	r2,16
1000236c:	a02ed7fa 	srli	r23,r20,31
10002370:	423f0084 	addi	r8,r8,-1022
10002374:	1211d83a 	sra	r8,r2,r8
10002378:	00c00434 	movhi	r3,16
1000237c:	18ffffc4 	addi	r3,r3,-1
10002380:	4529883a 	add	r20,r8,r20
10002384:	a00a907a 	slli	r5,r20,1
10002388:	a0c4703a 	and	r2,r20,r3
1000238c:	10800434 	orhi	r2,r2,16
10002390:	280ad57a 	srli	r5,r5,21
10002394:	05cdc83a 	sub	r6,zero,r23
10002398:	b009883a 	mov	r4,r22
1000239c:	29ff0044 	addi	r7,r5,-1023
100023a0:	19c7d83a 	sra	r3,r3,r7
100023a4:	01c104c4 	movi	r7,1043
100023a8:	394bc83a 	sub	r5,r7,r5
100023ac:	1145d83a 	sra	r2,r2,r5
100023b0:	00ce303a 	nor	r7,zero,r3
100023b4:	3d0e703a 	and	r7,r7,r20
100023b8:	1184f03a 	xor	r2,r2,r6
100023bc:	a80b883a 	mov	r5,r21
100023c0:	000d883a 	mov	r6,zero
100023c4:	15ef883a 	add	r23,r2,r23
100023c8:	ddc00115 	stw	r23,4(sp)
100023cc:	0005d340 	call	10005d34 <__subdf3>
100023d0:	9809883a 	mov	r4,r19
100023d4:	880b883a 	mov	r5,r17
100023d8:	100d883a 	mov	r6,r2
100023dc:	180f883a 	mov	r7,r3
100023e0:	d8c00815 	stw	r3,32(sp)
100023e4:	d8800315 	stw	r2,12(sp)
100023e8:	00040680 	call	10004068 <__adddf3>
100023ec:	d8800117 	ldw	r2,4(sp)
100023f0:	da000817 	ldw	r8,32(sp)
100023f4:	da400317 	ldw	r9,12(sp)
100023f8:	1004953a 	slli	r2,r2,20
100023fc:	1829883a 	mov	r20,r3
10002400:	d8800015 	stw	r2,0(sp)
10002404:	01cff9b4 	movhi	r7,16358
10002408:	a00b883a 	mov	r5,r20
1000240c:	39cb90c4 	addi	r7,r7,11843
10002410:	0009883a 	mov	r4,zero
10002414:	000d883a 	mov	r6,zero
10002418:	da000815 	stw	r8,32(sp)
1000241c:	da400315 	stw	r9,12(sp)
10002420:	00054c80 	call	100054c8 <__muldf3>
10002424:	da400317 	ldw	r9,12(sp)
10002428:	da000817 	ldw	r8,32(sp)
1000242c:	a00b883a 	mov	r5,r20
10002430:	480d883a 	mov	r6,r9
10002434:	400f883a 	mov	r7,r8
10002438:	0009883a 	mov	r4,zero
1000243c:	1039883a 	mov	fp,r2
10002440:	182d883a 	mov	r22,r3
10002444:	0005d340 	call	10005d34 <__subdf3>
10002448:	9809883a 	mov	r4,r19
1000244c:	880b883a 	mov	r5,r17
10002450:	100d883a 	mov	r6,r2
10002454:	180f883a 	mov	r7,r3
10002458:	0005d340 	call	10005d34 <__subdf3>
1000245c:	01bfbeb4 	movhi	r6,65274
10002460:	01cff9b4 	movhi	r7,16358
10002464:	1009883a 	mov	r4,r2
10002468:	180b883a 	mov	r5,r3
1000246c:	318e7bc4 	addi	r6,r6,14831
10002470:	39cb9084 	addi	r7,r7,11842
10002474:	00054c80 	call	100054c8 <__muldf3>
10002478:	01832a34 	movhi	r6,3240
1000247c:	01ef8834 	movhi	r7,48672
10002480:	a00b883a 	mov	r5,r20
10002484:	319b0e44 	addi	r6,r6,27705
10002488:	39d71844 	addi	r7,r7,23649
1000248c:	0009883a 	mov	r4,zero
10002490:	1023883a 	mov	r17,r2
10002494:	1821883a 	mov	r16,r3
10002498:	00054c80 	call	100054c8 <__muldf3>
1000249c:	8809883a 	mov	r4,r17
100024a0:	800b883a 	mov	r5,r16
100024a4:	100d883a 	mov	r6,r2
100024a8:	180f883a 	mov	r7,r3
100024ac:	00040680 	call	10004068 <__adddf3>
100024b0:	e009883a 	mov	r4,fp
100024b4:	b00b883a 	mov	r5,r22
100024b8:	100d883a 	mov	r6,r2
100024bc:	180f883a 	mov	r7,r3
100024c0:	1029883a 	mov	r20,r2
100024c4:	1827883a 	mov	r19,r3
100024c8:	00040680 	call	10004068 <__adddf3>
100024cc:	e00d883a 	mov	r6,fp
100024d0:	b00f883a 	mov	r7,r22
100024d4:	1009883a 	mov	r4,r2
100024d8:	180b883a 	mov	r5,r3
100024dc:	1023883a 	mov	r17,r2
100024e0:	1821883a 	mov	r16,r3
100024e4:	0005d340 	call	10005d34 <__subdf3>
100024e8:	a009883a 	mov	r4,r20
100024ec:	980b883a 	mov	r5,r19
100024f0:	100d883a 	mov	r6,r2
100024f4:	180f883a 	mov	r7,r3
100024f8:	0005d340 	call	10005d34 <__subdf3>
100024fc:	8809883a 	mov	r4,r17
10002500:	800b883a 	mov	r5,r16
10002504:	880d883a 	mov	r6,r17
10002508:	800f883a 	mov	r7,r16
1000250c:	1039883a 	mov	fp,r2
10002510:	182d883a 	mov	r22,r3
10002514:	00054c80 	call	100054c8 <__muldf3>
10002518:	019caff4 	movhi	r6,29375
1000251c:	01cf99b4 	movhi	r7,15974
10002520:	1009883a 	mov	r4,r2
10002524:	180b883a 	mov	r5,r3
10002528:	31a93404 	addi	r6,r6,-23344
1000252c:	39cdda44 	addi	r7,r7,14185
10002530:	1029883a 	mov	r20,r2
10002534:	1827883a 	mov	r19,r3
10002538:	00054c80 	call	100054c8 <__muldf3>
1000253c:	01b174b4 	movhi	r6,50642
10002540:	01cfaf34 	movhi	r7,16060
10002544:	1009883a 	mov	r4,r2
10002548:	180b883a 	mov	r5,r3
1000254c:	319afc44 	addi	r6,r6,27633
10002550:	39ef5044 	addi	r7,r7,-17087
10002554:	0005d340 	call	10005d34 <__subdf3>
10002558:	a00d883a 	mov	r6,r20
1000255c:	980f883a 	mov	r7,r19
10002560:	1009883a 	mov	r4,r2
10002564:	180b883a 	mov	r5,r3
10002568:	00054c80 	call	100054c8 <__muldf3>
1000256c:	01abc9b4 	movhi	r6,44838
10002570:	01cfc474 	movhi	r7,16145
10002574:	1009883a 	mov	r4,r2
10002578:	180b883a 	mov	r5,r3
1000257c:	31b78b04 	addi	r6,r6,-8660
10002580:	39d59a84 	addi	r7,r7,22122
10002584:	00040680 	call	10004068 <__adddf3>
10002588:	a00d883a 	mov	r6,r20
1000258c:	980f883a 	mov	r7,r19
10002590:	1009883a 	mov	r4,r2
10002594:	180b883a 	mov	r5,r3
10002598:	00054c80 	call	100054c8 <__muldf3>
1000259c:	0185aff4 	movhi	r6,5823
100025a0:	01cfd9f4 	movhi	r7,16231
100025a4:	1009883a 	mov	r4,r2
100025a8:	180b883a 	mov	r5,r3
100025ac:	31af64c4 	addi	r6,r6,-17005
100025b0:	39f05b04 	addi	r7,r7,-16020
100025b4:	0005d340 	call	10005d34 <__subdf3>
100025b8:	a00d883a 	mov	r6,r20
100025bc:	980f883a 	mov	r7,r19
100025c0:	1009883a 	mov	r4,r2
100025c4:	180b883a 	mov	r5,r3
100025c8:	00054c80 	call	100054c8 <__muldf3>
100025cc:	01955574 	movhi	r6,21845
100025d0:	01cff174 	movhi	r7,16325
100025d4:	1009883a 	mov	r4,r2
100025d8:	180b883a 	mov	r5,r3
100025dc:	31954f84 	addi	r6,r6,21822
100025e0:	39d55544 	addi	r7,r7,21845
100025e4:	00040680 	call	10004068 <__adddf3>
100025e8:	a00d883a 	mov	r6,r20
100025ec:	980f883a 	mov	r7,r19
100025f0:	1009883a 	mov	r4,r2
100025f4:	180b883a 	mov	r5,r3
100025f8:	00054c80 	call	100054c8 <__muldf3>
100025fc:	8809883a 	mov	r4,r17
10002600:	800b883a 	mov	r5,r16
10002604:	100d883a 	mov	r6,r2
10002608:	180f883a 	mov	r7,r3
1000260c:	0005d340 	call	10005d34 <__subdf3>
10002610:	8809883a 	mov	r4,r17
10002614:	800b883a 	mov	r5,r16
10002618:	100d883a 	mov	r6,r2
1000261c:	180f883a 	mov	r7,r3
10002620:	1029883a 	mov	r20,r2
10002624:	1827883a 	mov	r19,r3
10002628:	00054c80 	call	100054c8 <__muldf3>
1000262c:	a009883a 	mov	r4,r20
10002630:	980b883a 	mov	r5,r19
10002634:	000d883a 	mov	r6,zero
10002638:	01d00034 	movhi	r7,16384
1000263c:	102b883a 	mov	r21,r2
10002640:	182f883a 	mov	r23,r3
10002644:	0005d340 	call	10005d34 <__subdf3>
10002648:	a809883a 	mov	r4,r21
1000264c:	b80b883a 	mov	r5,r23
10002650:	100d883a 	mov	r6,r2
10002654:	180f883a 	mov	r7,r3
10002658:	00049040 	call	10004904 <__divdf3>
1000265c:	8809883a 	mov	r4,r17
10002660:	800b883a 	mov	r5,r16
10002664:	e00d883a 	mov	r6,fp
10002668:	b00f883a 	mov	r7,r22
1000266c:	1029883a 	mov	r20,r2
10002670:	1827883a 	mov	r19,r3
10002674:	00054c80 	call	100054c8 <__muldf3>
10002678:	1009883a 	mov	r4,r2
1000267c:	180b883a 	mov	r5,r3
10002680:	e00d883a 	mov	r6,fp
10002684:	b00f883a 	mov	r7,r22
10002688:	00040680 	call	10004068 <__adddf3>
1000268c:	a009883a 	mov	r4,r20
10002690:	980b883a 	mov	r5,r19
10002694:	100d883a 	mov	r6,r2
10002698:	180f883a 	mov	r7,r3
1000269c:	0005d340 	call	10005d34 <__subdf3>
100026a0:	1009883a 	mov	r4,r2
100026a4:	180b883a 	mov	r5,r3
100026a8:	880d883a 	mov	r6,r17
100026ac:	800f883a 	mov	r7,r16
100026b0:	0005d340 	call	10005d34 <__subdf3>
100026b4:	0009883a 	mov	r4,zero
100026b8:	180f883a 	mov	r7,r3
100026bc:	014ffc34 	movhi	r5,16368
100026c0:	100d883a 	mov	r6,r2
100026c4:	0005d340 	call	10005d34 <__subdf3>
100026c8:	d9000017 	ldw	r4,0(sp)
100026cc:	190f883a 	add	r7,r3,r4
100026d0:	3809d53a 	srai	r4,r7,20
100026d4:	0100c70e 	bge	zero,r4,100029f4 <__ieee754_pow+0x10a0>
100026d8:	100d883a 	mov	r6,r2
100026dc:	0009883a 	mov	r4,zero
100026e0:	900b883a 	mov	r5,r18
100026e4:	00054c80 	call	100054c8 <__muldf3>
100026e8:	003cd606 	br	10001a44 <__alt_data_end+0xf8001a44>
100026ec:	00b00434 	movhi	r2,49168
100026f0:	9085883a 	add	r2,r18,r2
100026f4:	e084b03a 	or	r2,fp,r2
100026f8:	1000aa1e 	bne	r2,zero,100029a4 <__ieee754_pow+0x1050>
100026fc:	b009883a 	mov	r4,r22
10002700:	180b883a 	mov	r5,r3
10002704:	003d4006 	br	10001c08 <__alt_data_end+0xf8001c08>
10002708:	8009883a 	mov	r4,r16
1000270c:	980b883a 	mov	r5,r19
10002710:	800d883a 	mov	r6,r16
10002714:	980f883a 	mov	r7,r19
10002718:	00054c80 	call	100054c8 <__muldf3>
1000271c:	003cc906 	br	10001a44 <__alt_data_end+0xf8001a44>
10002720:	04200034 	movhi	r16,32768
10002724:	843fffc4 	addi	r16,r16,-1
10002728:	00902474 	movhi	r2,16529
1000272c:	1c20703a 	and	r16,r3,r16
10002730:	10b2ffc4 	addi	r2,r2,-13313
10002734:	1400a70e 	bge	r2,r16,100029d4 <__ieee754_pow+0x1080>
10002738:	008fdbf4 	movhi	r2,16239
1000273c:	108d0004 	addi	r2,r2,13312
10002740:	1885883a 	add	r2,r3,r2
10002744:	15c4b03a 	or	r2,r2,r23
10002748:	10000b1e 	bne	r2,zero,10002778 <__ieee754_pow+0xe24>
1000274c:	b809883a 	mov	r4,r23
10002750:	180b883a 	mov	r5,r3
10002754:	b00d883a 	mov	r6,r22
10002758:	a80f883a 	mov	r7,r21
1000275c:	0005d340 	call	10005d34 <__subdf3>
10002760:	9809883a 	mov	r4,r19
10002764:	880b883a 	mov	r5,r17
10002768:	100d883a 	mov	r6,r2
1000276c:	180f883a 	mov	r7,r3
10002770:	00053e80 	call	100053e8 <__ledf2>
10002774:	00befb16 	blt	zero,r2,10002364 <__alt_data_end+0xf8002364>
10002778:	01b0be74 	movhi	r6,49913
1000277c:	01c06974 	movhi	r7,421
10002780:	900b883a 	mov	r5,r18
10002784:	31bcd644 	addi	r6,r6,-3239
10002788:	39db87c4 	addi	r7,r7,28191
1000278c:	0009883a 	mov	r4,zero
10002790:	00054c80 	call	100054c8 <__muldf3>
10002794:	01b0be74 	movhi	r6,49913
10002798:	01c06974 	movhi	r7,421
1000279c:	1009883a 	mov	r4,r2
100027a0:	180b883a 	mov	r5,r3
100027a4:	31bcd644 	addi	r6,r6,-3239
100027a8:	39db87c4 	addi	r7,r7,28191
100027ac:	00054c80 	call	100054c8 <__muldf3>
100027b0:	003ca406 	br	10001a44 <__alt_data_end+0xf8001a44>
100027b4:	048ffc34 	movhi	r18,16368
100027b8:	003ea606 	br	10002254 <__alt_data_end+0xf8002254>
100027bc:	b83cce0e 	bge	r23,zero,10001af8 <__alt_data_end+0xf8001af8>
100027c0:	0005883a 	mov	r2,zero
100027c4:	b8e0003c 	xorhi	r3,r23,32768
100027c8:	003c9e06 	br	10001a44 <__alt_data_end+0xf8001a44>
100027cc:	0021883a 	mov	r16,zero
100027d0:	0019883a 	mov	r12,zero
100027d4:	003d3406 	br	10001ca8 <__alt_data_end+0xf8001ca8>
100027d8:	0009883a 	mov	r4,zero
100027dc:	003d2006 	br	10001c60 <__alt_data_end+0xf8001c60>
100027e0:	008ffc34 	movhi	r2,16368
100027e4:	10bfff84 	addi	r2,r2,-2
100027e8:	14bcc20e 	bge	r2,r18,10001af4 <__alt_data_end+0xf8001af4>
100027ec:	01cffc34 	movhi	r7,16368
100027f0:	3cbcd916 	blt	r7,r18,10001b58 <__alt_data_end+0xf8001b58>
100027f4:	b009883a 	mov	r4,r22
100027f8:	000d883a 	mov	r6,zero
100027fc:	180b883a 	mov	r5,r3
10002800:	dac00915 	stw	r11,36(sp)
10002804:	0005d340 	call	10005d34 <__subdf3>
10002808:	01cffdf4 	movhi	r7,16375
1000280c:	1009883a 	mov	r4,r2
10002810:	180b883a 	mov	r5,r3
10002814:	39c551c4 	addi	r7,r7,5447
10002818:	01980034 	movhi	r6,24576
1000281c:	1023883a 	mov	r17,r2
10002820:	1821883a 	mov	r16,r3
10002824:	00054c80 	call	100054c8 <__muldf3>
10002828:	01be17b4 	movhi	r6,63582
1000282c:	01cf9574 	movhi	r7,15957
10002830:	8809883a 	mov	r4,r17
10002834:	800b883a 	mov	r5,r16
10002838:	31b7d104 	addi	r6,r6,-8380
1000283c:	39eb82c4 	addi	r7,r7,-20981
10002840:	1027883a 	mov	r19,r2
10002844:	1825883a 	mov	r18,r3
10002848:	00054c80 	call	100054c8 <__muldf3>
1000284c:	8809883a 	mov	r4,r17
10002850:	800b883a 	mov	r5,r16
10002854:	880d883a 	mov	r6,r17
10002858:	800f883a 	mov	r7,r16
1000285c:	1829883a 	mov	r20,r3
10002860:	d8800815 	stw	r2,32(sp)
10002864:	00054c80 	call	100054c8 <__muldf3>
10002868:	8809883a 	mov	r4,r17
1000286c:	800b883a 	mov	r5,r16
10002870:	000d883a 	mov	r6,zero
10002874:	01cff434 	movhi	r7,16336
10002878:	182d883a 	mov	r22,r3
1000287c:	d8800315 	stw	r2,12(sp)
10002880:	00054c80 	call	100054c8 <__muldf3>
10002884:	01155574 	movhi	r4,21845
10002888:	014ff574 	movhi	r5,16341
1000288c:	21155544 	addi	r4,r4,21845
10002890:	29555544 	addi	r5,r5,21845
10002894:	100d883a 	mov	r6,r2
10002898:	180f883a 	mov	r7,r3
1000289c:	0005d340 	call	10005d34 <__subdf3>
100028a0:	880d883a 	mov	r6,r17
100028a4:	800f883a 	mov	r7,r16
100028a8:	1009883a 	mov	r4,r2
100028ac:	180b883a 	mov	r5,r3
100028b0:	00054c80 	call	100054c8 <__muldf3>
100028b4:	0009883a 	mov	r4,zero
100028b8:	014ff834 	movhi	r5,16352
100028bc:	100d883a 	mov	r6,r2
100028c0:	180f883a 	mov	r7,r3
100028c4:	0005d340 	call	10005d34 <__subdf3>
100028c8:	da400317 	ldw	r9,12(sp)
100028cc:	b00b883a 	mov	r5,r22
100028d0:	100d883a 	mov	r6,r2
100028d4:	4809883a 	mov	r4,r9
100028d8:	180f883a 	mov	r7,r3
100028dc:	00054c80 	call	100054c8 <__muldf3>
100028e0:	01994b34 	movhi	r6,25900
100028e4:	01cffdf4 	movhi	r7,16375
100028e8:	1009883a 	mov	r4,r2
100028ec:	180b883a 	mov	r5,r3
100028f0:	31a0bf84 	addi	r6,r6,-32002
100028f4:	39c551c4 	addi	r7,r7,5447
100028f8:	00054c80 	call	100054c8 <__muldf3>
100028fc:	da000817 	ldw	r8,32(sp)
10002900:	a00b883a 	mov	r5,r20
10002904:	100d883a 	mov	r6,r2
10002908:	4009883a 	mov	r4,r8
1000290c:	180f883a 	mov	r7,r3
10002910:	0005d340 	call	10005d34 <__subdf3>
10002914:	9809883a 	mov	r4,r19
10002918:	900b883a 	mov	r5,r18
1000291c:	100d883a 	mov	r6,r2
10002920:	180f883a 	mov	r7,r3
10002924:	1029883a 	mov	r20,r2
10002928:	1823883a 	mov	r17,r3
1000292c:	00040680 	call	10004068 <__adddf3>
10002930:	0009883a 	mov	r4,zero
10002934:	180b883a 	mov	r5,r3
10002938:	980d883a 	mov	r6,r19
1000293c:	900f883a 	mov	r7,r18
10002940:	1821883a 	mov	r16,r3
10002944:	0005d340 	call	10005d34 <__subdf3>
10002948:	a009883a 	mov	r4,r20
1000294c:	003e3606 	br	10002228 <__alt_data_end+0xf8002228>
10002950:	0009883a 	mov	r4,zero
10002954:	880b883a 	mov	r5,r17
10002958:	800d883a 	mov	r6,r16
1000295c:	980f883a 	mov	r7,r19
10002960:	00049040 	call	10004904 <__divdf3>
10002964:	003c3706 	br	10001a44 <__alt_data_end+0xf8001a44>
10002968:	01a20034 	movhi	r6,34816
1000296c:	01df8e34 	movhi	r7,32312
10002970:	900b883a 	mov	r5,r18
10002974:	319d6704 	addi	r6,r6,30108
10002978:	39f90f04 	addi	r7,r7,-7108
1000297c:	0009883a 	mov	r4,zero
10002980:	00054c80 	call	100054c8 <__muldf3>
10002984:	01a20034 	movhi	r6,34816
10002988:	01df8e34 	movhi	r7,32312
1000298c:	1009883a 	mov	r4,r2
10002990:	180b883a 	mov	r5,r3
10002994:	319d6704 	addi	r6,r6,30108
10002998:	39f90f04 	addi	r7,r7,-7108
1000299c:	00054c80 	call	100054c8 <__muldf3>
100029a0:	003c2806 	br	10001a44 <__alt_data_end+0xf8001a44>
100029a4:	00800044 	movi	r2,1
100029a8:	e0bc5e1e 	bne	fp,r2,10001b24 <__alt_data_end+0xf8001b24>
100029ac:	18e0003c 	xorhi	r3,r3,32768
100029b0:	b005883a 	mov	r2,r22
100029b4:	003c2306 	br	10001a44 <__alt_data_end+0xf8001a44>
100029b8:	303c3d1e 	bne	r6,zero,10001ab0 <__alt_data_end+0xf8001ab0>
100029bc:	1907c83a 	sub	r3,r3,r4
100029c0:	88c5d83a 	sra	r2,r17,r3
100029c4:	10c6983a 	sll	r3,r2,r3
100029c8:	1c401126 	beq	r3,r17,10002a10 <__ieee754_pow+0x10bc>
100029cc:	0039883a 	mov	fp,zero
100029d0:	003c0006 	br	100019d4 <__alt_data_end+0xf80019d4>
100029d4:	008ff834 	movhi	r2,16352
100029d8:	143e6216 	blt	r2,r16,10002364 <__alt_data_end+0xf8002364>
100029dc:	d8000015 	stw	zero,0(sp)
100029e0:	d8000115 	stw	zero,4(sp)
100029e4:	003e8706 	br	10002404 <__alt_data_end+0xf8002404>
100029e8:	04000134 	movhi	r16,4
100029ec:	03000044 	movi	r12,1
100029f0:	003cad06 	br	10001ca8 <__alt_data_end+0xf8001ca8>
100029f4:	d9800117 	ldw	r6,4(sp)
100029f8:	1009883a 	mov	r4,r2
100029fc:	180b883a 	mov	r5,r3
10002a00:	0002f500 	call	10002f50 <scalbn>
10002a04:	100d883a 	mov	r6,r2
10002a08:	180f883a 	mov	r7,r3
10002a0c:	003f3306 	br	100026dc <__alt_data_end+0xf80026dc>
10002a10:	1080004c 	andi	r2,r2,1
10002a14:	02800084 	movi	r10,2
10002a18:	50b9c83a 	sub	fp,r10,r2
10002a1c:	003bed06 	br	100019d4 <__alt_data_end+0xf80019d4>

10002a20 <__ieee754_sqrt>:
10002a20:	defffd04 	addi	sp,sp,-12
10002a24:	dc400115 	stw	r17,4(sp)
10002a28:	dc000015 	stw	r16,0(sp)
10002a2c:	dfc00215 	stw	ra,8(sp)
10002a30:	28dffc2c 	andhi	r3,r5,32752
10002a34:	009ffc34 	movhi	r2,32752
10002a38:	2821883a 	mov	r16,r5
10002a3c:	2023883a 	mov	r17,r4
10002a40:	18807c26 	beq	r3,r2,10002c34 <__ieee754_sqrt+0x214>
10002a44:	2011883a 	mov	r8,r4
10002a48:	01405f0e 	bge	zero,r5,10002bc8 <__ieee754_sqrt+0x1a8>
10002a4c:	2815d53a 	srai	r10,r5,20
10002a50:	50006a26 	beq	r10,zero,10002bfc <__ieee754_sqrt+0x1dc>
10002a54:	00800434 	movhi	r2,16
10002a58:	52bf0044 	addi	r10,r10,-1023
10002a5c:	10bfffc4 	addi	r2,r2,-1
10002a60:	8084703a 	and	r2,r16,r2
10002a64:	50c0004c 	andi	r3,r10,1
10002a68:	10800434 	orhi	r2,r2,16
10002a6c:	18004f1e 	bne	r3,zero,10002bac <__ieee754_sqrt+0x18c>
10002a70:	4006d7fa 	srli	r3,r8,31
10002a74:	5015d07a 	srai	r10,r10,1
10002a78:	1085883a 	add	r2,r2,r2
10002a7c:	10c5883a 	add	r2,r2,r3
10002a80:	01800584 	movi	r6,22
10002a84:	4207883a 	add	r3,r8,r8
10002a88:	0013883a 	mov	r9,zero
10002a8c:	000b883a 	mov	r5,zero
10002a90:	01000834 	movhi	r4,32
10002a94:	290f883a 	add	r7,r5,r4
10002a98:	1810d7fa 	srli	r8,r3,31
10002a9c:	31bfffc4 	addi	r6,r6,-1
10002aa0:	11c00316 	blt	r2,r7,10002ab0 <__ieee754_sqrt+0x90>
10002aa4:	11c5c83a 	sub	r2,r2,r7
10002aa8:	390b883a 	add	r5,r7,r4
10002aac:	4913883a 	add	r9,r9,r4
10002ab0:	1085883a 	add	r2,r2,r2
10002ab4:	1205883a 	add	r2,r2,r8
10002ab8:	18c7883a 	add	r3,r3,r3
10002abc:	2008d07a 	srli	r4,r4,1
10002ac0:	303ff41e 	bne	r6,zero,10002a94 <__alt_data_end+0xf8002a94>
10002ac4:	01200034 	movhi	r4,32768
10002ac8:	01c00804 	movi	r7,32
10002acc:	0011883a 	mov	r8,zero
10002ad0:	0017883a 	mov	r11,zero
10002ad4:	201b883a 	mov	r13,r4
10002ad8:	00000806 	br	10002afc <__ieee754_sqrt+0xdc>
10002adc:	11401726 	beq	r2,r5,10002b3c <__ieee754_sqrt+0x11c>
10002ae0:	180cd7fa 	srli	r6,r3,31
10002ae4:	1085883a 	add	r2,r2,r2
10002ae8:	39ffffc4 	addi	r7,r7,-1
10002aec:	1185883a 	add	r2,r2,r6
10002af0:	18c7883a 	add	r3,r3,r3
10002af4:	2008d07a 	srli	r4,r4,1
10002af8:	38001726 	beq	r7,zero,10002b58 <__ieee754_sqrt+0x138>
10002afc:	590d883a 	add	r6,r11,r4
10002b00:	28bff60e 	bge	r5,r2,10002adc <__alt_data_end+0xf8002adc>
10002b04:	3320002c 	andhi	r12,r6,32768
10002b08:	3117883a 	add	r11,r6,r4
10002b0c:	63400826 	beq	r12,r13,10002b30 <__ieee754_sqrt+0x110>
10002b10:	2819883a 	mov	r12,r5
10002b14:	1145c83a 	sub	r2,r2,r5
10002b18:	1980012e 	bgeu	r3,r6,10002b20 <__ieee754_sqrt+0x100>
10002b1c:	10bfffc4 	addi	r2,r2,-1
10002b20:	1987c83a 	sub	r3,r3,r6
10002b24:	4111883a 	add	r8,r8,r4
10002b28:	600b883a 	mov	r5,r12
10002b2c:	003fec06 	br	10002ae0 <__alt_data_end+0xf8002ae0>
10002b30:	583ff716 	blt	r11,zero,10002b10 <__alt_data_end+0xf8002b10>
10002b34:	2b000044 	addi	r12,r5,1
10002b38:	003ff606 	br	10002b14 <__alt_data_end+0xf8002b14>
10002b3c:	19801936 	bltu	r3,r6,10002ba4 <__ieee754_sqrt+0x184>
10002b40:	3320002c 	andhi	r12,r6,32768
10002b44:	3117883a 	add	r11,r6,r4
10002b48:	63404626 	beq	r12,r13,10002c64 <__ieee754_sqrt+0x244>
10002b4c:	1019883a 	mov	r12,r2
10002b50:	0005883a 	mov	r2,zero
10002b54:	003ff206 	br	10002b20 <__alt_data_end+0xf8002b20>
10002b58:	10c4b03a 	or	r2,r2,r3
10002b5c:	10000426 	beq	r2,zero,10002b70 <__ieee754_sqrt+0x150>
10002b60:	00bfffc4 	movi	r2,-1
10002b64:	40804326 	beq	r8,r2,10002c74 <__ieee754_sqrt+0x254>
10002b68:	4080004c 	andi	r2,r8,1
10002b6c:	1211883a 	add	r8,r2,r8
10002b70:	4004d07a 	srli	r2,r8,1
10002b74:	4807d07a 	srai	r3,r9,1
10002b78:	010ff834 	movhi	r4,16352
10002b7c:	4a40004c 	andi	r9,r9,1
10002b80:	1909883a 	add	r4,r3,r4
10002b84:	48000e1e 	bne	r9,zero,10002bc0 <__ieee754_sqrt+0x1a0>
10002b88:	5006953a 	slli	r3,r10,20
10002b8c:	1907883a 	add	r3,r3,r4
10002b90:	dfc00217 	ldw	ra,8(sp)
10002b94:	dc400117 	ldw	r17,4(sp)
10002b98:	dc000017 	ldw	r16,0(sp)
10002b9c:	dec00304 	addi	sp,sp,12
10002ba0:	f800283a 	ret
10002ba4:	100b883a 	mov	r5,r2
10002ba8:	003fcd06 	br	10002ae0 <__alt_data_end+0xf8002ae0>
10002bac:	4006d7fa 	srli	r3,r8,31
10002bb0:	1085883a 	add	r2,r2,r2
10002bb4:	4211883a 	add	r8,r8,r8
10002bb8:	10c5883a 	add	r2,r2,r3
10002bbc:	003fac06 	br	10002a70 <__alt_data_end+0xf8002a70>
10002bc0:	10a00034 	orhi	r2,r2,32768
10002bc4:	003ff006 	br	10002b88 <__alt_data_end+0xf8002b88>
10002bc8:	00a00034 	movhi	r2,32768
10002bcc:	10bfffc4 	addi	r2,r2,-1
10002bd0:	2884703a 	and	r2,r5,r2
10002bd4:	1104b03a 	or	r2,r2,r4
10002bd8:	10001f26 	beq	r2,zero,10002c58 <__ieee754_sqrt+0x238>
10002bdc:	28002c1e 	bne	r5,zero,10002c90 <__ieee754_sqrt+0x270>
10002be0:	0015883a 	mov	r10,zero
10002be4:	4020d2fa 	srli	r16,r8,11
10002be8:	52bffac4 	addi	r10,r10,-21
10002bec:	4010957a 	slli	r8,r8,21
10002bf0:	803ffc26 	beq	r16,zero,10002be4 <__alt_data_end+0xf8002be4>
10002bf4:	8080042c 	andhi	r2,r16,16
10002bf8:	1000211e 	bne	r2,zero,10002c80 <__ieee754_sqrt+0x260>
10002bfc:	0005883a 	mov	r2,zero
10002c00:	8421883a 	add	r16,r16,r16
10002c04:	80c0042c 	andhi	r3,r16,16
10002c08:	10800044 	addi	r2,r2,1
10002c0c:	183ffc26 	beq	r3,zero,10002c00 <__alt_data_end+0xf8002c00>
10002c10:	01000044 	movi	r4,1
10002c14:	00c00804 	movi	r3,32
10002c18:	2089c83a 	sub	r4,r4,r2
10002c1c:	1887c83a 	sub	r3,r3,r2
10002c20:	40c6d83a 	srl	r3,r8,r3
10002c24:	5115883a 	add	r10,r10,r4
10002c28:	4090983a 	sll	r8,r8,r2
10002c2c:	80e0b03a 	or	r16,r16,r3
10002c30:	003f8806 	br	10002a54 <__alt_data_end+0xf8002a54>
10002c34:	200d883a 	mov	r6,r4
10002c38:	280f883a 	mov	r7,r5
10002c3c:	00054c80 	call	100054c8 <__muldf3>
10002c40:	1009883a 	mov	r4,r2
10002c44:	180b883a 	mov	r5,r3
10002c48:	880d883a 	mov	r6,r17
10002c4c:	800f883a 	mov	r7,r16
10002c50:	00040680 	call	10004068 <__adddf3>
10002c54:	003fce06 	br	10002b90 <__alt_data_end+0xf8002b90>
10002c58:	2005883a 	mov	r2,r4
10002c5c:	2807883a 	mov	r3,r5
10002c60:	003fcb06 	br	10002b90 <__alt_data_end+0xf8002b90>
10002c64:	583fb30e 	bge	r11,zero,10002b34 <__alt_data_end+0xf8002b34>
10002c68:	0005883a 	mov	r2,zero
10002c6c:	2819883a 	mov	r12,r5
10002c70:	003fab06 	br	10002b20 <__alt_data_end+0xf8002b20>
10002c74:	4a400044 	addi	r9,r9,1
10002c78:	0005883a 	mov	r2,zero
10002c7c:	003fbd06 	br	10002b74 <__alt_data_end+0xf8002b74>
10002c80:	00c00804 	movi	r3,32
10002c84:	01000044 	movi	r4,1
10002c88:	0005883a 	mov	r2,zero
10002c8c:	003fe406 	br	10002c20 <__alt_data_end+0xf8002c20>
10002c90:	200d883a 	mov	r6,r4
10002c94:	280f883a 	mov	r7,r5
10002c98:	0005d340 	call	10005d34 <__subdf3>
10002c9c:	1009883a 	mov	r4,r2
10002ca0:	180b883a 	mov	r5,r3
10002ca4:	100d883a 	mov	r6,r2
10002ca8:	180f883a 	mov	r7,r3
10002cac:	00049040 	call	10004904 <__divdf3>
10002cb0:	003fb706 	br	10002b90 <__alt_data_end+0xf8002b90>

10002cb4 <fabs>:
10002cb4:	00e00034 	movhi	r3,32768
10002cb8:	18ffffc4 	addi	r3,r3,-1
10002cbc:	2005883a 	mov	r2,r4
10002cc0:	28c6703a 	and	r3,r5,r3
10002cc4:	f800283a 	ret

10002cc8 <finite>:
10002cc8:	00a00034 	movhi	r2,32768
10002ccc:	10bfffc4 	addi	r2,r2,-1
10002cd0:	288a703a 	and	r5,r5,r2
10002cd4:	00e00434 	movhi	r3,32784
10002cd8:	28c5883a 	add	r2,r5,r3
10002cdc:	1004d7fa 	srli	r2,r2,31
10002ce0:	f800283a 	ret

10002ce4 <__fpclassifyd>:
10002ce4:	00a00034 	movhi	r2,32768
10002ce8:	10bfffc4 	addi	r2,r2,-1
10002cec:	2884703a 	and	r2,r5,r2
10002cf0:	10000726 	beq	r2,zero,10002d10 <__fpclassifyd+0x2c>
10002cf4:	00fffc34 	movhi	r3,65520
10002cf8:	019ff834 	movhi	r6,32736
10002cfc:	28c7883a 	add	r3,r5,r3
10002d00:	31bfffc4 	addi	r6,r6,-1
10002d04:	30c00536 	bltu	r6,r3,10002d1c <__fpclassifyd+0x38>
10002d08:	00800104 	movi	r2,4
10002d0c:	f800283a 	ret
10002d10:	2000021e 	bne	r4,zero,10002d1c <__fpclassifyd+0x38>
10002d14:	00800084 	movi	r2,2
10002d18:	f800283a 	ret
10002d1c:	00dffc34 	movhi	r3,32752
10002d20:	019ff834 	movhi	r6,32736
10002d24:	28cb883a 	add	r5,r5,r3
10002d28:	31bfffc4 	addi	r6,r6,-1
10002d2c:	317ff62e 	bgeu	r6,r5,10002d08 <__alt_data_end+0xf8002d08>
10002d30:	01400434 	movhi	r5,16
10002d34:	297fffc4 	addi	r5,r5,-1
10002d38:	28800236 	bltu	r5,r2,10002d44 <__fpclassifyd+0x60>
10002d3c:	008000c4 	movi	r2,3
10002d40:	f800283a 	ret
10002d44:	10c00226 	beq	r2,r3,10002d50 <__fpclassifyd+0x6c>
10002d48:	0005883a 	mov	r2,zero
10002d4c:	f800283a 	ret
10002d50:	2005003a 	cmpeq	r2,r4,zero
10002d54:	f800283a 	ret

10002d58 <matherr>:
10002d58:	0005883a 	mov	r2,zero
10002d5c:	f800283a 	ret

10002d60 <nan>:
10002d60:	0005883a 	mov	r2,zero
10002d64:	00dffe34 	movhi	r3,32760
10002d68:	f800283a 	ret

10002d6c <rint>:
10002d6c:	2813d53a 	srai	r9,r5,20
10002d70:	defff904 	addi	sp,sp,-28
10002d74:	dc400315 	stw	r17,12(sp)
10002d78:	4a41ffcc 	andi	r9,r9,2047
10002d7c:	dfc00615 	stw	ra,24(sp)
10002d80:	dcc00515 	stw	r19,20(sp)
10002d84:	dc800415 	stw	r18,16(sp)
10002d88:	dc000215 	stw	r16,8(sp)
10002d8c:	02c004c4 	movi	r11,19
10002d90:	4abf0044 	addi	r10,r9,-1023
10002d94:	2811883a 	mov	r8,r5
10002d98:	2005883a 	mov	r2,r4
10002d9c:	280f883a 	mov	r7,r5
10002da0:	200d883a 	mov	r6,r4
10002da4:	2822d7fa 	srli	r17,r5,31
10002da8:	5a801316 	blt	r11,r10,10002df8 <rint+0x8c>
10002dac:	50003c16 	blt	r10,zero,10002ea0 <rint+0x134>
10002db0:	00c00434 	movhi	r3,16
10002db4:	18ffffc4 	addi	r3,r3,-1
10002db8:	1a87d83a 	sra	r3,r3,r10
10002dbc:	1948703a 	and	r4,r3,r5
10002dc0:	2088b03a 	or	r4,r4,r2
10002dc4:	20001026 	beq	r4,zero,10002e08 <rint+0x9c>
10002dc8:	1804d07a 	srli	r2,r3,1
10002dcc:	1146703a 	and	r3,r2,r5
10002dd0:	198cb03a 	or	r6,r3,r6
10002dd4:	30005526 	beq	r6,zero,10002f2c <rint+0x1c0>
10002dd8:	52c05b26 	beq	r10,r11,10002f48 <rint+0x1dc>
10002ddc:	000d883a 	mov	r6,zero
10002de0:	00c00134 	movhi	r3,4
10002de4:	1a87d83a 	sra	r3,r3,r10
10002de8:	0084303a 	nor	r2,zero,r2
10002dec:	1210703a 	and	r8,r2,r8
10002df0:	40ceb03a 	or	r7,r8,r3
10002df4:	00001906 	br	10002e5c <rint+0xf0>
10002df8:	00c00cc4 	movi	r3,51
10002dfc:	1a800a0e 	bge	r3,r10,10002e28 <rint+0xbc>
10002e00:	00c10004 	movi	r3,1024
10002e04:	50c04d26 	beq	r10,r3,10002f3c <rint+0x1d0>
10002e08:	3807883a 	mov	r3,r7
10002e0c:	dfc00617 	ldw	ra,24(sp)
10002e10:	dcc00517 	ldw	r19,20(sp)
10002e14:	dc800417 	ldw	r18,16(sp)
10002e18:	dc400317 	ldw	r17,12(sp)
10002e1c:	dc000217 	ldw	r16,8(sp)
10002e20:	dec00704 	addi	sp,sp,28
10002e24:	f800283a 	ret
10002e28:	4a7efb44 	addi	r9,r9,-1043
10002e2c:	00ffffc4 	movi	r3,-1
10002e30:	1a46d83a 	srl	r3,r3,r9
10002e34:	1908703a 	and	r4,r3,r4
10002e38:	20003e26 	beq	r4,zero,10002f34 <rint+0x1c8>
10002e3c:	1806d07a 	srli	r3,r3,1
10002e40:	1884703a 	and	r2,r3,r2
10002e44:	10000526 	beq	r2,zero,10002e5c <rint+0xf0>
10002e48:	00900034 	movhi	r2,16384
10002e4c:	1253d83a 	sra	r9,r2,r9
10002e50:	00c6303a 	nor	r3,zero,r3
10002e54:	198c703a 	and	r6,r3,r6
10002e58:	324cb03a 	or	r6,r6,r9
10002e5c:	882290fa 	slli	r17,r17,3
10002e60:	00c40074 	movhi	r3,4097
10002e64:	18ef0104 	addi	r3,r3,-17404
10002e68:	1c63883a 	add	r17,r3,r17
10002e6c:	8c800017 	ldw	r18,0(r17)
10002e70:	8c000117 	ldw	r16,4(r17)
10002e74:	9009883a 	mov	r4,r18
10002e78:	800b883a 	mov	r5,r16
10002e7c:	00040680 	call	10004068 <__adddf3>
10002e80:	d8800015 	stw	r2,0(sp)
10002e84:	d8c00115 	stw	r3,4(sp)
10002e88:	d9000017 	ldw	r4,0(sp)
10002e8c:	d9400117 	ldw	r5,4(sp)
10002e90:	900d883a 	mov	r6,r18
10002e94:	800f883a 	mov	r7,r16
10002e98:	0005d340 	call	10005d34 <__subdf3>
10002e9c:	003fdb06 	br	10002e0c <__alt_data_end+0xf8002e0c>
10002ea0:	04200034 	movhi	r16,32768
10002ea4:	843fffc4 	addi	r16,r16,-1
10002ea8:	2c06703a 	and	r3,r5,r16
10002eac:	1906b03a 	or	r3,r3,r4
10002eb0:	18002026 	beq	r3,zero,10002f34 <rint+0x1c8>
10002eb4:	00c00434 	movhi	r3,16
10002eb8:	18ffffc4 	addi	r3,r3,-1
10002ebc:	28c6703a 	and	r3,r5,r3
10002ec0:	1886b03a 	or	r3,r3,r2
10002ec4:	880890fa 	slli	r4,r17,3
10002ec8:	00d3c83a 	sub	r9,zero,r3
10002ecc:	48d2b03a 	or	r9,r9,r3
10002ed0:	00c40074 	movhi	r3,4097
10002ed4:	18ef0104 	addi	r3,r3,-17404
10002ed8:	1907883a 	add	r3,r3,r4
10002edc:	4812d33a 	srli	r9,r9,12
10002ee0:	1cc00017 	ldw	r19,0(r3)
10002ee4:	1c800117 	ldw	r18,4(r3)
10002ee8:	4a40022c 	andhi	r9,r9,8
10002eec:	29ffffac 	andhi	r7,r5,65534
10002ef0:	49ceb03a 	or	r7,r9,r7
10002ef4:	9809883a 	mov	r4,r19
10002ef8:	900b883a 	mov	r5,r18
10002efc:	00040680 	call	10004068 <__adddf3>
10002f00:	d8800015 	stw	r2,0(sp)
10002f04:	d8c00115 	stw	r3,4(sp)
10002f08:	d9000017 	ldw	r4,0(sp)
10002f0c:	d9400117 	ldw	r5,4(sp)
10002f10:	980d883a 	mov	r6,r19
10002f14:	900f883a 	mov	r7,r18
10002f18:	0005d340 	call	10005d34 <__subdf3>
10002f1c:	881097fa 	slli	r8,r17,31
10002f20:	1c06703a 	and	r3,r3,r16
10002f24:	40c6b03a 	or	r3,r8,r3
10002f28:	003fb806 	br	10002e0c <__alt_data_end+0xf8002e0c>
10002f2c:	000d883a 	mov	r6,zero
10002f30:	003fca06 	br	10002e5c <__alt_data_end+0xf8002e5c>
10002f34:	4007883a 	mov	r3,r8
10002f38:	003fb406 	br	10002e0c <__alt_data_end+0xf8002e0c>
10002f3c:	200d883a 	mov	r6,r4
10002f40:	00040680 	call	10004068 <__adddf3>
10002f44:	003fb106 	br	10002e0c <__alt_data_end+0xf8002e0c>
10002f48:	01a00034 	movhi	r6,32768
10002f4c:	003fa406 	br	10002de0 <__alt_data_end+0xf8002de0>

10002f50 <scalbn>:
10002f50:	2a1ffc2c 	andhi	r8,r5,32752
10002f54:	4011d53a 	srai	r8,r8,20
10002f58:	defffe04 	addi	sp,sp,-8
10002f5c:	dc000015 	stw	r16,0(sp)
10002f60:	dfc00115 	stw	ra,4(sp)
10002f64:	280f883a 	mov	r7,r5
10002f68:	2015883a 	mov	r10,r4
10002f6c:	3021883a 	mov	r16,r6
10002f70:	4000251e 	bne	r8,zero,10003008 <scalbn+0xb8>
10002f74:	00a00034 	movhi	r2,32768
10002f78:	10bfffc4 	addi	r2,r2,-1
10002f7c:	2884703a 	and	r2,r5,r2
10002f80:	1104b03a 	or	r2,r2,r4
10002f84:	10003126 	beq	r2,zero,1000304c <scalbn+0xfc>
10002f88:	01d0d434 	movhi	r7,17232
10002f8c:	000d883a 	mov	r6,zero
10002f90:	00054c80 	call	100054c8 <__muldf3>
10002f94:	013ffff4 	movhi	r4,65535
10002f98:	210f2c04 	addi	r4,r4,15536
10002f9c:	1015883a 	mov	r10,r2
10002fa0:	180f883a 	mov	r7,r3
10002fa4:	81002f16 	blt	r16,r4,10003064 <scalbn+0x114>
10002fa8:	1a5ffc2c 	andhi	r9,r3,32752
10002fac:	4813d53a 	srai	r9,r9,20
10002fb0:	0081ff84 	movi	r2,2046
10002fb4:	180d883a 	mov	r6,r3
10002fb8:	4a3ff284 	addi	r8,r9,-54
10002fbc:	4411883a 	add	r8,r8,r16
10002fc0:	1200170e 	bge	r2,r8,10003020 <scalbn+0xd0>
10002fc4:	01220034 	movhi	r4,34816
10002fc8:	015f8e34 	movhi	r5,32312
10002fcc:	500d883a 	mov	r6,r10
10002fd0:	211d6704 	addi	r4,r4,30108
10002fd4:	29790f04 	addi	r5,r5,-7108
10002fd8:	000311c0 	call	1000311c <copysign>
10002fdc:	01a20034 	movhi	r6,34816
10002fe0:	01df8e34 	movhi	r7,32312
10002fe4:	1009883a 	mov	r4,r2
10002fe8:	180b883a 	mov	r5,r3
10002fec:	319d6704 	addi	r6,r6,30108
10002ff0:	39f90f04 	addi	r7,r7,-7108
10002ff4:	00054c80 	call	100054c8 <__muldf3>
10002ff8:	dfc00117 	ldw	ra,4(sp)
10002ffc:	dc000017 	ldw	r16,0(sp)
10003000:	dec00204 	addi	sp,sp,8
10003004:	f800283a 	ret
10003008:	0081ffc4 	movi	r2,2047
1000300c:	280d883a 	mov	r6,r5
10003010:	40803126 	beq	r8,r2,100030d8 <scalbn+0x188>
10003014:	4411883a 	add	r8,r8,r16
10003018:	0081ff84 	movi	r2,2046
1000301c:	123fe916 	blt	r2,r8,10002fc4 <__alt_data_end+0xf8002fc4>
10003020:	02001b0e 	bge	zero,r8,10003090 <scalbn+0x140>
10003024:	4010953a 	slli	r8,r8,20
10003028:	00e00434 	movhi	r3,32784
1000302c:	18ffffc4 	addi	r3,r3,-1
10003030:	30ce703a 	and	r7,r6,r3
10003034:	5005883a 	mov	r2,r10
10003038:	41c6b03a 	or	r3,r8,r7
1000303c:	dfc00117 	ldw	ra,4(sp)
10003040:	dc000017 	ldw	r16,0(sp)
10003044:	dec00204 	addi	sp,sp,8
10003048:	f800283a 	ret
1000304c:	2005883a 	mov	r2,r4
10003050:	2807883a 	mov	r3,r5
10003054:	dfc00117 	ldw	ra,4(sp)
10003058:	dc000017 	ldw	r16,0(sp)
1000305c:	dec00204 	addi	sp,sp,8
10003060:	f800283a 	ret
10003064:	01b0be74 	movhi	r6,49913
10003068:	01c06974 	movhi	r7,421
1000306c:	31bcd644 	addi	r6,r6,-3239
10003070:	39db87c4 	addi	r7,r7,28191
10003074:	1009883a 	mov	r4,r2
10003078:	180b883a 	mov	r5,r3
1000307c:	00054c80 	call	100054c8 <__muldf3>
10003080:	dfc00117 	ldw	ra,4(sp)
10003084:	dc000017 	ldw	r16,0(sp)
10003088:	dec00204 	addi	sp,sp,8
1000308c:	f800283a 	ret
10003090:	00bff2c4 	movi	r2,-53
10003094:	4080160e 	bge	r8,r2,100030f0 <scalbn+0x1a0>
10003098:	00b0d414 	movui	r2,50000
1000309c:	143fc916 	blt	r2,r16,10002fc4 <__alt_data_end+0xf8002fc4>
100030a0:	0130be74 	movhi	r4,49913
100030a4:	01406974 	movhi	r5,421
100030a8:	500d883a 	mov	r6,r10
100030ac:	213cd644 	addi	r4,r4,-3239
100030b0:	295b87c4 	addi	r5,r5,28191
100030b4:	000311c0 	call	1000311c <copysign>
100030b8:	01b0be74 	movhi	r6,49913
100030bc:	01c06974 	movhi	r7,421
100030c0:	1009883a 	mov	r4,r2
100030c4:	180b883a 	mov	r5,r3
100030c8:	31bcd644 	addi	r6,r6,-3239
100030cc:	39db87c4 	addi	r7,r7,28191
100030d0:	00054c80 	call	100054c8 <__muldf3>
100030d4:	003fd906 	br	1000303c <__alt_data_end+0xf800303c>
100030d8:	200d883a 	mov	r6,r4
100030dc:	00040680 	call	10004068 <__adddf3>
100030e0:	dfc00117 	ldw	ra,4(sp)
100030e4:	dc000017 	ldw	r16,0(sp)
100030e8:	dec00204 	addi	sp,sp,8
100030ec:	f800283a 	ret
100030f0:	42000d84 	addi	r8,r8,54
100030f4:	4012953a 	slli	r9,r8,20
100030f8:	01e00434 	movhi	r7,32784
100030fc:	39ffffc4 	addi	r7,r7,-1
10003100:	31ca703a 	and	r5,r6,r7
10003104:	5009883a 	mov	r4,r10
10003108:	494ab03a 	or	r5,r9,r5
1000310c:	000d883a 	mov	r6,zero
10003110:	01cf2434 	movhi	r7,15504
10003114:	00054c80 	call	100054c8 <__muldf3>
10003118:	003fc806 	br	1000303c <__alt_data_end+0xf800303c>

1000311c <copysign>:
1000311c:	2005883a 	mov	r2,r4
10003120:	01200034 	movhi	r4,32768
10003124:	213fffc4 	addi	r4,r4,-1
10003128:	38e0002c 	andhi	r3,r7,32768
1000312c:	290a703a 	and	r5,r5,r4
10003130:	1946b03a 	or	r3,r3,r5
10003134:	f800283a 	ret

10003138 <__muldi3>:
10003138:	defff604 	addi	sp,sp,-40
1000313c:	dd800615 	stw	r22,24(sp)
10003140:	dd400515 	stw	r21,20(sp)
10003144:	25bfffcc 	andi	r22,r4,65535
10003148:	357fffcc 	andi	r21,r6,65535
1000314c:	dc400115 	stw	r17,4(sp)
10003150:	2022d43a 	srli	r17,r4,16
10003154:	dcc00315 	stw	r19,12(sp)
10003158:	dc800215 	stw	r18,8(sp)
1000315c:	2027883a 	mov	r19,r4
10003160:	2825883a 	mov	r18,r5
10003164:	a809883a 	mov	r4,r21
10003168:	b00b883a 	mov	r5,r22
1000316c:	dfc00915 	stw	ra,36(sp)
10003170:	df000815 	stw	fp,32(sp)
10003174:	ddc00715 	stw	r23,28(sp)
10003178:	3839883a 	mov	fp,r7
1000317c:	302ed43a 	srli	r23,r6,16
10003180:	dd000415 	stw	r20,16(sp)
10003184:	dc000015 	stw	r16,0(sp)
10003188:	3029883a 	mov	r20,r6
1000318c:	00040400 	call	10004040 <__mulsi3>
10003190:	a809883a 	mov	r4,r21
10003194:	880b883a 	mov	r5,r17
10003198:	1021883a 	mov	r16,r2
1000319c:	00040400 	call	10004040 <__mulsi3>
100031a0:	880b883a 	mov	r5,r17
100031a4:	b809883a 	mov	r4,r23
100031a8:	102b883a 	mov	r21,r2
100031ac:	00040400 	call	10004040 <__mulsi3>
100031b0:	b809883a 	mov	r4,r23
100031b4:	b00b883a 	mov	r5,r22
100031b8:	1023883a 	mov	r17,r2
100031bc:	00040400 	call	10004040 <__mulsi3>
100031c0:	8012d43a 	srli	r9,r16,16
100031c4:	a885883a 	add	r2,r21,r2
100031c8:	1251883a 	add	r8,r2,r9
100031cc:	4540022e 	bgeu	r8,r21,100031d8 <__muldi3+0xa0>
100031d0:	00800074 	movhi	r2,1
100031d4:	88a3883a 	add	r17,r17,r2
100031d8:	4006d43a 	srli	r3,r8,16
100031dc:	4010943a 	slli	r8,r8,16
100031e0:	9809883a 	mov	r4,r19
100031e4:	e00b883a 	mov	r5,fp
100031e8:	843fffcc 	andi	r16,r16,65535
100031ec:	88e3883a 	add	r17,r17,r3
100031f0:	4421883a 	add	r16,r8,r16
100031f4:	00040400 	call	10004040 <__mulsi3>
100031f8:	a009883a 	mov	r4,r20
100031fc:	900b883a 	mov	r5,r18
10003200:	1027883a 	mov	r19,r2
10003204:	00040400 	call	10004040 <__mulsi3>
10003208:	9885883a 	add	r2,r19,r2
1000320c:	1447883a 	add	r3,r2,r17
10003210:	8005883a 	mov	r2,r16
10003214:	dfc00917 	ldw	ra,36(sp)
10003218:	df000817 	ldw	fp,32(sp)
1000321c:	ddc00717 	ldw	r23,28(sp)
10003220:	dd800617 	ldw	r22,24(sp)
10003224:	dd400517 	ldw	r21,20(sp)
10003228:	dd000417 	ldw	r20,16(sp)
1000322c:	dcc00317 	ldw	r19,12(sp)
10003230:	dc800217 	ldw	r18,8(sp)
10003234:	dc400117 	ldw	r17,4(sp)
10003238:	dc000017 	ldw	r16,0(sp)
1000323c:	dec00a04 	addi	sp,sp,40
10003240:	f800283a 	ret

10003244 <__fixunsdfsi>:
10003244:	defffd04 	addi	sp,sp,-12
10003248:	000d883a 	mov	r6,zero
1000324c:	01d07834 	movhi	r7,16864
10003250:	dc400115 	stw	r17,4(sp)
10003254:	dc000015 	stw	r16,0(sp)
10003258:	dfc00215 	stw	ra,8(sp)
1000325c:	2023883a 	mov	r17,r4
10003260:	2821883a 	mov	r16,r5
10003264:	00053080 	call	10005308 <__gedf2>
10003268:	1000080e 	bge	r2,zero,1000328c <__fixunsdfsi+0x48>
1000326c:	8809883a 	mov	r4,r17
10003270:	800b883a 	mov	r5,r16
10003274:	00066040 	call	10006604 <__fixdfsi>
10003278:	dfc00217 	ldw	ra,8(sp)
1000327c:	dc400117 	ldw	r17,4(sp)
10003280:	dc000017 	ldw	r16,0(sp)
10003284:	dec00304 	addi	sp,sp,12
10003288:	f800283a 	ret
1000328c:	000d883a 	mov	r6,zero
10003290:	01d07834 	movhi	r7,16864
10003294:	8809883a 	mov	r4,r17
10003298:	800b883a 	mov	r5,r16
1000329c:	0005d340 	call	10005d34 <__subdf3>
100032a0:	180b883a 	mov	r5,r3
100032a4:	1009883a 	mov	r4,r2
100032a8:	00066040 	call	10006604 <__fixdfsi>
100032ac:	00e00034 	movhi	r3,32768
100032b0:	10c5883a 	add	r2,r2,r3
100032b4:	003ff006 	br	10003278 <__alt_data_end+0xf8003278>

100032b8 <__udivdi3>:
100032b8:	defff504 	addi	sp,sp,-44
100032bc:	dcc00415 	stw	r19,16(sp)
100032c0:	dc000115 	stw	r16,4(sp)
100032c4:	dfc00a15 	stw	ra,40(sp)
100032c8:	df000915 	stw	fp,36(sp)
100032cc:	ddc00815 	stw	r23,32(sp)
100032d0:	dd800715 	stw	r22,28(sp)
100032d4:	dd400615 	stw	r21,24(sp)
100032d8:	dd000515 	stw	r20,20(sp)
100032dc:	dc800315 	stw	r18,12(sp)
100032e0:	dc400215 	stw	r17,8(sp)
100032e4:	2027883a 	mov	r19,r4
100032e8:	2821883a 	mov	r16,r5
100032ec:	3800471e 	bne	r7,zero,1000340c <__udivdi3+0x154>
100032f0:	3025883a 	mov	r18,r6
100032f4:	2023883a 	mov	r17,r4
100032f8:	2980592e 	bgeu	r5,r6,10003460 <__udivdi3+0x1a8>
100032fc:	00bfffd4 	movui	r2,65535
10003300:	2829883a 	mov	r20,r5
10003304:	1180b236 	bltu	r2,r6,100035d0 <__udivdi3+0x318>
10003308:	00803fc4 	movi	r2,255
1000330c:	1181622e 	bgeu	r2,r6,10003898 <__udivdi3+0x5e0>
10003310:	00800204 	movi	r2,8
10003314:	1007883a 	mov	r3,r2
10003318:	3084d83a 	srl	r2,r6,r2
1000331c:	01040074 	movhi	r4,4097
10003320:	212f0504 	addi	r4,r4,-17388
10003324:	2085883a 	add	r2,r4,r2
10003328:	11000003 	ldbu	r4,0(r2)
1000332c:	20c9883a 	add	r4,r4,r3
10003330:	00c00804 	movi	r3,32
10003334:	1907c83a 	sub	r3,r3,r4
10003338:	18000526 	beq	r3,zero,10003350 <__udivdi3+0x98>
1000333c:	80e0983a 	sll	r16,r16,r3
10003340:	9908d83a 	srl	r4,r19,r4
10003344:	30e4983a 	sll	r18,r6,r3
10003348:	98e2983a 	sll	r17,r19,r3
1000334c:	8128b03a 	or	r20,r16,r4
10003350:	902ad43a 	srli	r21,r18,16
10003354:	a009883a 	mov	r4,r20
10003358:	95bfffcc 	andi	r22,r18,65535
1000335c:	a80b883a 	mov	r5,r21
10003360:	00040380 	call	10004038 <__umodsi3>
10003364:	a009883a 	mov	r4,r20
10003368:	a80b883a 	mov	r5,r21
1000336c:	102f883a 	mov	r23,r2
10003370:	00040300 	call	10004030 <__udivsi3>
10003374:	1009883a 	mov	r4,r2
10003378:	b00b883a 	mov	r5,r22
1000337c:	1021883a 	mov	r16,r2
10003380:	00040400 	call	10004040 <__mulsi3>
10003384:	b82e943a 	slli	r23,r23,16
10003388:	8808d43a 	srli	r4,r17,16
1000338c:	b906b03a 	or	r3,r23,r4
10003390:	1880052e 	bgeu	r3,r2,100033a8 <__udivdi3+0xf0>
10003394:	1c87883a 	add	r3,r3,r18
10003398:	813fffc4 	addi	r4,r16,-1
1000339c:	1c800136 	bltu	r3,r18,100033a4 <__udivdi3+0xec>
100033a0:	18815236 	bltu	r3,r2,100038ec <__udivdi3+0x634>
100033a4:	2021883a 	mov	r16,r4
100033a8:	18a7c83a 	sub	r19,r3,r2
100033ac:	9809883a 	mov	r4,r19
100033b0:	a80b883a 	mov	r5,r21
100033b4:	00040380 	call	10004038 <__umodsi3>
100033b8:	1029883a 	mov	r20,r2
100033bc:	9809883a 	mov	r4,r19
100033c0:	a80b883a 	mov	r5,r21
100033c4:	a028943a 	slli	r20,r20,16
100033c8:	00040300 	call	10004030 <__udivsi3>
100033cc:	1009883a 	mov	r4,r2
100033d0:	b00b883a 	mov	r5,r22
100033d4:	8c7fffcc 	andi	r17,r17,65535
100033d8:	1027883a 	mov	r19,r2
100033dc:	a462b03a 	or	r17,r20,r17
100033e0:	00040400 	call	10004040 <__mulsi3>
100033e4:	8880052e 	bgeu	r17,r2,100033fc <__udivdi3+0x144>
100033e8:	8ca3883a 	add	r17,r17,r18
100033ec:	98ffffc4 	addi	r3,r19,-1
100033f0:	8c811036 	bltu	r17,r18,10003834 <__udivdi3+0x57c>
100033f4:	88810f2e 	bgeu	r17,r2,10003834 <__udivdi3+0x57c>
100033f8:	9cffff84 	addi	r19,r19,-2
100033fc:	8020943a 	slli	r16,r16,16
10003400:	0007883a 	mov	r3,zero
10003404:	9c04b03a 	or	r2,r19,r16
10003408:	00006006 	br	1000358c <__udivdi3+0x2d4>
1000340c:	29c05d36 	bltu	r5,r7,10003584 <__udivdi3+0x2cc>
10003410:	00bfffd4 	movui	r2,65535
10003414:	11c0692e 	bgeu	r2,r7,100035bc <__udivdi3+0x304>
10003418:	00804034 	movhi	r2,256
1000341c:	10bfffc4 	addi	r2,r2,-1
10003420:	11c10e2e 	bgeu	r2,r7,1000385c <__udivdi3+0x5a4>
10003424:	01400604 	movi	r5,24
10003428:	2811883a 	mov	r8,r5
1000342c:	394ad83a 	srl	r5,r7,r5
10003430:	00840074 	movhi	r2,4097
10003434:	10af0504 	addi	r2,r2,-17388
10003438:	114b883a 	add	r5,r2,r5
1000343c:	29400003 	ldbu	r5,0(r5)
10003440:	00c00804 	movi	r3,32
10003444:	2a0b883a 	add	r5,r5,r8
10003448:	196fc83a 	sub	r23,r3,r5
1000344c:	b8006b1e 	bne	r23,zero,100035fc <__udivdi3+0x344>
10003450:	3c011436 	bltu	r7,r16,100038a4 <__udivdi3+0x5ec>
10003454:	9985403a 	cmpgeu	r2,r19,r6
10003458:	0007883a 	mov	r3,zero
1000345c:	00004b06 	br	1000358c <__udivdi3+0x2d4>
10003460:	3000041e 	bne	r6,zero,10003474 <__udivdi3+0x1bc>
10003464:	01000044 	movi	r4,1
10003468:	000b883a 	mov	r5,zero
1000346c:	00040300 	call	10004030 <__udivsi3>
10003470:	1025883a 	mov	r18,r2
10003474:	00bfffd4 	movui	r2,65535
10003478:	14805b2e 	bgeu	r2,r18,100035e8 <__udivdi3+0x330>
1000347c:	00804034 	movhi	r2,256
10003480:	10bfffc4 	addi	r2,r2,-1
10003484:	1480fe2e 	bgeu	r2,r18,10003880 <__udivdi3+0x5c8>
10003488:	00800604 	movi	r2,24
1000348c:	1007883a 	mov	r3,r2
10003490:	9084d83a 	srl	r2,r18,r2
10003494:	01040074 	movhi	r4,4097
10003498:	212f0504 	addi	r4,r4,-17388
1000349c:	2085883a 	add	r2,r4,r2
100034a0:	11800003 	ldbu	r6,0(r2)
100034a4:	01c00804 	movi	r7,32
100034a8:	30c7883a 	add	r3,r6,r3
100034ac:	38cfc83a 	sub	r7,r7,r3
100034b0:	3800a71e 	bne	r7,zero,10003750 <__udivdi3+0x498>
100034b4:	9028d43a 	srli	r20,r18,16
100034b8:	84a1c83a 	sub	r16,r16,r18
100034bc:	957fffcc 	andi	r21,r18,65535
100034c0:	00c00044 	movi	r3,1
100034c4:	8009883a 	mov	r4,r16
100034c8:	a00b883a 	mov	r5,r20
100034cc:	d8c00015 	stw	r3,0(sp)
100034d0:	00040380 	call	10004038 <__umodsi3>
100034d4:	8009883a 	mov	r4,r16
100034d8:	a00b883a 	mov	r5,r20
100034dc:	102d883a 	mov	r22,r2
100034e0:	00040300 	call	10004030 <__udivsi3>
100034e4:	1009883a 	mov	r4,r2
100034e8:	a80b883a 	mov	r5,r21
100034ec:	1021883a 	mov	r16,r2
100034f0:	00040400 	call	10004040 <__mulsi3>
100034f4:	b02c943a 	slli	r22,r22,16
100034f8:	880ed43a 	srli	r7,r17,16
100034fc:	d8c00017 	ldw	r3,0(sp)
10003500:	b1ccb03a 	or	r6,r22,r7
10003504:	3080052e 	bgeu	r6,r2,1000351c <__udivdi3+0x264>
10003508:	348d883a 	add	r6,r6,r18
1000350c:	813fffc4 	addi	r4,r16,-1
10003510:	34800136 	bltu	r6,r18,10003518 <__udivdi3+0x260>
10003514:	3080f236 	bltu	r6,r2,100038e0 <__udivdi3+0x628>
10003518:	2021883a 	mov	r16,r4
1000351c:	30a7c83a 	sub	r19,r6,r2
10003520:	9809883a 	mov	r4,r19
10003524:	a00b883a 	mov	r5,r20
10003528:	d8c00015 	stw	r3,0(sp)
1000352c:	00040380 	call	10004038 <__umodsi3>
10003530:	102d883a 	mov	r22,r2
10003534:	9809883a 	mov	r4,r19
10003538:	a00b883a 	mov	r5,r20
1000353c:	b02c943a 	slli	r22,r22,16
10003540:	00040300 	call	10004030 <__udivsi3>
10003544:	1009883a 	mov	r4,r2
10003548:	a80b883a 	mov	r5,r21
1000354c:	8c7fffcc 	andi	r17,r17,65535
10003550:	1027883a 	mov	r19,r2
10003554:	b462b03a 	or	r17,r22,r17
10003558:	00040400 	call	10004040 <__mulsi3>
1000355c:	d8c00017 	ldw	r3,0(sp)
10003560:	8880052e 	bgeu	r17,r2,10003578 <__udivdi3+0x2c0>
10003564:	8ca3883a 	add	r17,r17,r18
10003568:	993fffc4 	addi	r4,r19,-1
1000356c:	8c80af36 	bltu	r17,r18,1000382c <__udivdi3+0x574>
10003570:	8880ae2e 	bgeu	r17,r2,1000382c <__udivdi3+0x574>
10003574:	9cffff84 	addi	r19,r19,-2
10003578:	8020943a 	slli	r16,r16,16
1000357c:	9c04b03a 	or	r2,r19,r16
10003580:	00000206 	br	1000358c <__udivdi3+0x2d4>
10003584:	0007883a 	mov	r3,zero
10003588:	0005883a 	mov	r2,zero
1000358c:	dfc00a17 	ldw	ra,40(sp)
10003590:	df000917 	ldw	fp,36(sp)
10003594:	ddc00817 	ldw	r23,32(sp)
10003598:	dd800717 	ldw	r22,28(sp)
1000359c:	dd400617 	ldw	r21,24(sp)
100035a0:	dd000517 	ldw	r20,20(sp)
100035a4:	dcc00417 	ldw	r19,16(sp)
100035a8:	dc800317 	ldw	r18,12(sp)
100035ac:	dc400217 	ldw	r17,8(sp)
100035b0:	dc000117 	ldw	r16,4(sp)
100035b4:	dec00b04 	addi	sp,sp,44
100035b8:	f800283a 	ret
100035bc:	00803fc4 	movi	r2,255
100035c0:	11c0a92e 	bgeu	r2,r7,10003868 <__udivdi3+0x5b0>
100035c4:	01400204 	movi	r5,8
100035c8:	2811883a 	mov	r8,r5
100035cc:	003f9706 	br	1000342c <__alt_data_end+0xf800342c>
100035d0:	00804034 	movhi	r2,256
100035d4:	10bfffc4 	addi	r2,r2,-1
100035d8:	1180a62e 	bgeu	r2,r6,10003874 <__udivdi3+0x5bc>
100035dc:	00800604 	movi	r2,24
100035e0:	1007883a 	mov	r3,r2
100035e4:	003f4c06 	br	10003318 <__alt_data_end+0xf8003318>
100035e8:	00803fc4 	movi	r2,255
100035ec:	1480a72e 	bgeu	r2,r18,1000388c <__udivdi3+0x5d4>
100035f0:	00800204 	movi	r2,8
100035f4:	1007883a 	mov	r3,r2
100035f8:	003fa506 	br	10003490 <__alt_data_end+0xf8003490>
100035fc:	3178d83a 	srl	fp,r6,r5
10003600:	3dce983a 	sll	r7,r7,r23
10003604:	8168d83a 	srl	r20,r16,r5
10003608:	9950d83a 	srl	r8,r19,r5
1000360c:	3f38b03a 	or	fp,r7,fp
10003610:	e024d43a 	srli	r18,fp,16
10003614:	85e0983a 	sll	r16,r16,r23
10003618:	a009883a 	mov	r4,r20
1000361c:	900b883a 	mov	r5,r18
10003620:	8220b03a 	or	r16,r16,r8
10003624:	35ea983a 	sll	r21,r6,r23
10003628:	00040380 	call	10004038 <__umodsi3>
1000362c:	a009883a 	mov	r4,r20
10003630:	900b883a 	mov	r5,r18
10003634:	1023883a 	mov	r17,r2
10003638:	e5bfffcc 	andi	r22,fp,65535
1000363c:	00040300 	call	10004030 <__udivsi3>
10003640:	1009883a 	mov	r4,r2
10003644:	b00b883a 	mov	r5,r22
10003648:	1029883a 	mov	r20,r2
1000364c:	00040400 	call	10004040 <__mulsi3>
10003650:	8806943a 	slli	r3,r17,16
10003654:	8014d43a 	srli	r10,r16,16
10003658:	1a92b03a 	or	r9,r3,r10
1000365c:	4880042e 	bgeu	r9,r2,10003670 <__udivdi3+0x3b8>
10003660:	4f13883a 	add	r9,r9,fp
10003664:	a0ffffc4 	addi	r3,r20,-1
10003668:	4f00952e 	bgeu	r9,fp,100038c0 <__udivdi3+0x608>
1000366c:	1829883a 	mov	r20,r3
10003670:	48a3c83a 	sub	r17,r9,r2
10003674:	8809883a 	mov	r4,r17
10003678:	900b883a 	mov	r5,r18
1000367c:	00040380 	call	10004038 <__umodsi3>
10003680:	8809883a 	mov	r4,r17
10003684:	900b883a 	mov	r5,r18
10003688:	d8800015 	stw	r2,0(sp)
1000368c:	00040300 	call	10004030 <__udivsi3>
10003690:	1009883a 	mov	r4,r2
10003694:	b00b883a 	mov	r5,r22
10003698:	1023883a 	mov	r17,r2
1000369c:	00040400 	call	10004040 <__mulsi3>
100036a0:	d8c00017 	ldw	r3,0(sp)
100036a4:	823fffcc 	andi	r8,r16,65535
100036a8:	1806943a 	slli	r3,r3,16
100036ac:	1a20b03a 	or	r16,r3,r8
100036b0:	8080042e 	bgeu	r16,r2,100036c4 <__udivdi3+0x40c>
100036b4:	8721883a 	add	r16,r16,fp
100036b8:	88ffffc4 	addi	r3,r17,-1
100036bc:	87007c2e 	bgeu	r16,fp,100038b0 <__udivdi3+0x5f8>
100036c0:	1823883a 	mov	r17,r3
100036c4:	a028943a 	slli	r20,r20,16
100036c8:	acbfffcc 	andi	r18,r21,65535
100036cc:	900b883a 	mov	r5,r18
100036d0:	8d28b03a 	or	r20,r17,r20
100036d4:	a022d43a 	srli	r17,r20,16
100036d8:	a5bfffcc 	andi	r22,r20,65535
100036dc:	b009883a 	mov	r4,r22
100036e0:	a82ad43a 	srli	r21,r21,16
100036e4:	80a1c83a 	sub	r16,r16,r2
100036e8:	00040400 	call	10004040 <__mulsi3>
100036ec:	8809883a 	mov	r4,r17
100036f0:	900b883a 	mov	r5,r18
100036f4:	1039883a 	mov	fp,r2
100036f8:	00040400 	call	10004040 <__mulsi3>
100036fc:	8809883a 	mov	r4,r17
10003700:	a80b883a 	mov	r5,r21
10003704:	1025883a 	mov	r18,r2
10003708:	00040400 	call	10004040 <__mulsi3>
1000370c:	b009883a 	mov	r4,r22
10003710:	a80b883a 	mov	r5,r21
10003714:	1023883a 	mov	r17,r2
10003718:	00040400 	call	10004040 <__mulsi3>
1000371c:	e006d43a 	srli	r3,fp,16
10003720:	9085883a 	add	r2,r18,r2
10003724:	10c7883a 	add	r3,r2,r3
10003728:	1c80022e 	bgeu	r3,r18,10003734 <__udivdi3+0x47c>
1000372c:	00800074 	movhi	r2,1
10003730:	88a3883a 	add	r17,r17,r2
10003734:	1808d43a 	srli	r4,r3,16
10003738:	8909883a 	add	r4,r17,r4
1000373c:	81004436 	bltu	r16,r4,10003850 <__udivdi3+0x598>
10003740:	81003e26 	beq	r16,r4,1000383c <__udivdi3+0x584>
10003744:	a005883a 	mov	r2,r20
10003748:	0007883a 	mov	r3,zero
1000374c:	003f8f06 	br	1000358c <__alt_data_end+0xf800358c>
10003750:	91e4983a 	sll	r18,r18,r7
10003754:	80eed83a 	srl	r23,r16,r3
10003758:	81cc983a 	sll	r6,r16,r7
1000375c:	9028d43a 	srli	r20,r18,16
10003760:	98c6d83a 	srl	r3,r19,r3
10003764:	b809883a 	mov	r4,r23
10003768:	a00b883a 	mov	r5,r20
1000376c:	30ecb03a 	or	r22,r6,r3
10003770:	99e2983a 	sll	r17,r19,r7
10003774:	00040380 	call	10004038 <__umodsi3>
10003778:	b809883a 	mov	r4,r23
1000377c:	a00b883a 	mov	r5,r20
10003780:	1021883a 	mov	r16,r2
10003784:	957fffcc 	andi	r21,r18,65535
10003788:	00040300 	call	10004030 <__udivsi3>
1000378c:	a80b883a 	mov	r5,r21
10003790:	1009883a 	mov	r4,r2
10003794:	102f883a 	mov	r23,r2
10003798:	00040400 	call	10004040 <__mulsi3>
1000379c:	8020943a 	slli	r16,r16,16
100037a0:	b00ad43a 	srli	r5,r22,16
100037a4:	814cb03a 	or	r6,r16,r5
100037a8:	3080062e 	bgeu	r6,r2,100037c4 <__udivdi3+0x50c>
100037ac:	348d883a 	add	r6,r6,r18
100037b0:	b8ffffc4 	addi	r3,r23,-1
100037b4:	34804836 	bltu	r6,r18,100038d8 <__udivdi3+0x620>
100037b8:	3080472e 	bgeu	r6,r2,100038d8 <__udivdi3+0x620>
100037bc:	bdffff84 	addi	r23,r23,-2
100037c0:	348d883a 	add	r6,r6,r18
100037c4:	30a7c83a 	sub	r19,r6,r2
100037c8:	9809883a 	mov	r4,r19
100037cc:	a00b883a 	mov	r5,r20
100037d0:	00040380 	call	10004038 <__umodsi3>
100037d4:	9809883a 	mov	r4,r19
100037d8:	a00b883a 	mov	r5,r20
100037dc:	1039883a 	mov	fp,r2
100037e0:	00040300 	call	10004030 <__udivsi3>
100037e4:	1009883a 	mov	r4,r2
100037e8:	a80b883a 	mov	r5,r21
100037ec:	e038943a 	slli	fp,fp,16
100037f0:	1027883a 	mov	r19,r2
100037f4:	00040400 	call	10004040 <__mulsi3>
100037f8:	b1bfffcc 	andi	r6,r22,65535
100037fc:	e18cb03a 	or	r6,fp,r6
10003800:	3080062e 	bgeu	r6,r2,1000381c <__udivdi3+0x564>
10003804:	348d883a 	add	r6,r6,r18
10003808:	98ffffc4 	addi	r3,r19,-1
1000380c:	34803036 	bltu	r6,r18,100038d0 <__udivdi3+0x618>
10003810:	30802f2e 	bgeu	r6,r2,100038d0 <__udivdi3+0x618>
10003814:	9cffff84 	addi	r19,r19,-2
10003818:	348d883a 	add	r6,r6,r18
1000381c:	b82e943a 	slli	r23,r23,16
10003820:	30a1c83a 	sub	r16,r6,r2
10003824:	9dc6b03a 	or	r3,r19,r23
10003828:	003f2606 	br	100034c4 <__alt_data_end+0xf80034c4>
1000382c:	2027883a 	mov	r19,r4
10003830:	003f5106 	br	10003578 <__alt_data_end+0xf8003578>
10003834:	1827883a 	mov	r19,r3
10003838:	003ef006 	br	100033fc <__alt_data_end+0xf80033fc>
1000383c:	1808943a 	slli	r4,r3,16
10003840:	9dc6983a 	sll	r3,r19,r23
10003844:	e73fffcc 	andi	fp,fp,65535
10003848:	2709883a 	add	r4,r4,fp
1000384c:	193fbd2e 	bgeu	r3,r4,10003744 <__alt_data_end+0xf8003744>
10003850:	a0bfffc4 	addi	r2,r20,-1
10003854:	0007883a 	mov	r3,zero
10003858:	003f4c06 	br	1000358c <__alt_data_end+0xf800358c>
1000385c:	01400404 	movi	r5,16
10003860:	2811883a 	mov	r8,r5
10003864:	003ef106 	br	1000342c <__alt_data_end+0xf800342c>
10003868:	000b883a 	mov	r5,zero
1000386c:	0011883a 	mov	r8,zero
10003870:	003eee06 	br	1000342c <__alt_data_end+0xf800342c>
10003874:	00800404 	movi	r2,16
10003878:	1007883a 	mov	r3,r2
1000387c:	003ea606 	br	10003318 <__alt_data_end+0xf8003318>
10003880:	00800404 	movi	r2,16
10003884:	1007883a 	mov	r3,r2
10003888:	003f0106 	br	10003490 <__alt_data_end+0xf8003490>
1000388c:	0005883a 	mov	r2,zero
10003890:	0007883a 	mov	r3,zero
10003894:	003efe06 	br	10003490 <__alt_data_end+0xf8003490>
10003898:	0005883a 	mov	r2,zero
1000389c:	0007883a 	mov	r3,zero
100038a0:	003e9d06 	br	10003318 <__alt_data_end+0xf8003318>
100038a4:	0007883a 	mov	r3,zero
100038a8:	00800044 	movi	r2,1
100038ac:	003f3706 	br	1000358c <__alt_data_end+0xf800358c>
100038b0:	80bf832e 	bgeu	r16,r2,100036c0 <__alt_data_end+0xf80036c0>
100038b4:	8c7fff84 	addi	r17,r17,-2
100038b8:	8721883a 	add	r16,r16,fp
100038bc:	003f8106 	br	100036c4 <__alt_data_end+0xf80036c4>
100038c0:	48bf6a2e 	bgeu	r9,r2,1000366c <__alt_data_end+0xf800366c>
100038c4:	a53fff84 	addi	r20,r20,-2
100038c8:	4f13883a 	add	r9,r9,fp
100038cc:	003f6806 	br	10003670 <__alt_data_end+0xf8003670>
100038d0:	1827883a 	mov	r19,r3
100038d4:	003fd106 	br	1000381c <__alt_data_end+0xf800381c>
100038d8:	182f883a 	mov	r23,r3
100038dc:	003fb906 	br	100037c4 <__alt_data_end+0xf80037c4>
100038e0:	843fff84 	addi	r16,r16,-2
100038e4:	348d883a 	add	r6,r6,r18
100038e8:	003f0c06 	br	1000351c <__alt_data_end+0xf800351c>
100038ec:	843fff84 	addi	r16,r16,-2
100038f0:	1c87883a 	add	r3,r3,r18
100038f4:	003eac06 	br	100033a8 <__alt_data_end+0xf80033a8>

100038f8 <__umoddi3>:
100038f8:	defff404 	addi	sp,sp,-48
100038fc:	dd800815 	stw	r22,32(sp)
10003900:	dc400315 	stw	r17,12(sp)
10003904:	dc000215 	stw	r16,8(sp)
10003908:	dfc00b15 	stw	ra,44(sp)
1000390c:	df000a15 	stw	fp,40(sp)
10003910:	ddc00915 	stw	r23,36(sp)
10003914:	dd400715 	stw	r21,28(sp)
10003918:	dd000615 	stw	r20,24(sp)
1000391c:	dcc00515 	stw	r19,20(sp)
10003920:	dc800415 	stw	r18,16(sp)
10003924:	2021883a 	mov	r16,r4
10003928:	2823883a 	mov	r17,r5
1000392c:	282d883a 	mov	r22,r5
10003930:	38003c1e 	bne	r7,zero,10003a24 <__umoddi3+0x12c>
10003934:	3027883a 	mov	r19,r6
10003938:	2029883a 	mov	r20,r4
1000393c:	2980522e 	bgeu	r5,r6,10003a88 <__umoddi3+0x190>
10003940:	00bfffd4 	movui	r2,65535
10003944:	1180a436 	bltu	r2,r6,10003bd8 <__umoddi3+0x2e0>
10003948:	00803fc4 	movi	r2,255
1000394c:	11815e2e 	bgeu	r2,r6,10003ec8 <__umoddi3+0x5d0>
10003950:	01400204 	movi	r5,8
10003954:	2805883a 	mov	r2,r5
10003958:	314ad83a 	srl	r5,r6,r5
1000395c:	00c40074 	movhi	r3,4097
10003960:	18ef0504 	addi	r3,r3,-17388
10003964:	194b883a 	add	r5,r3,r5
10003968:	29000003 	ldbu	r4,0(r5)
1000396c:	2089883a 	add	r4,r4,r2
10003970:	00800804 	movi	r2,32
10003974:	1105c83a 	sub	r2,r2,r4
10003978:	10010c26 	beq	r2,zero,10003dac <__umoddi3+0x4b4>
1000397c:	88a2983a 	sll	r17,r17,r2
10003980:	8108d83a 	srl	r4,r16,r4
10003984:	30a6983a 	sll	r19,r6,r2
10003988:	80a8983a 	sll	r20,r16,r2
1000398c:	1025883a 	mov	r18,r2
10003990:	892cb03a 	or	r22,r17,r4
10003994:	9822d43a 	srli	r17,r19,16
10003998:	b009883a 	mov	r4,r22
1000399c:	9d7fffcc 	andi	r21,r19,65535
100039a0:	880b883a 	mov	r5,r17
100039a4:	00040380 	call	10004038 <__umodsi3>
100039a8:	b009883a 	mov	r4,r22
100039ac:	880b883a 	mov	r5,r17
100039b0:	102f883a 	mov	r23,r2
100039b4:	00040300 	call	10004030 <__udivsi3>
100039b8:	1009883a 	mov	r4,r2
100039bc:	a80b883a 	mov	r5,r21
100039c0:	00040400 	call	10004040 <__mulsi3>
100039c4:	b82e943a 	slli	r23,r23,16
100039c8:	a008d43a 	srli	r4,r20,16
100039cc:	b906b03a 	or	r3,r23,r4
100039d0:	1880042e 	bgeu	r3,r2,100039e4 <__umoddi3+0xec>
100039d4:	1cc7883a 	add	r3,r3,r19
100039d8:	1cc00236 	bltu	r3,r19,100039e4 <__umoddi3+0xec>
100039dc:	1880012e 	bgeu	r3,r2,100039e4 <__umoddi3+0xec>
100039e0:	1cc7883a 	add	r3,r3,r19
100039e4:	18a1c83a 	sub	r16,r3,r2
100039e8:	8009883a 	mov	r4,r16
100039ec:	880b883a 	mov	r5,r17
100039f0:	00040380 	call	10004038 <__umodsi3>
100039f4:	8009883a 	mov	r4,r16
100039f8:	880b883a 	mov	r5,r17
100039fc:	102d883a 	mov	r22,r2
10003a00:	00040300 	call	10004030 <__udivsi3>
10003a04:	1009883a 	mov	r4,r2
10003a08:	a80b883a 	mov	r5,r21
10003a0c:	b02c943a 	slli	r22,r22,16
10003a10:	00040400 	call	10004040 <__mulsi3>
10003a14:	a13fffcc 	andi	r4,r20,65535
10003a18:	b106b03a 	or	r3,r22,r4
10003a1c:	1880572e 	bgeu	r3,r2,10003b7c <__umoddi3+0x284>
10003a20:	00005206 	br	10003b6c <__umoddi3+0x274>
10003a24:	29c05936 	bltu	r5,r7,10003b8c <__umoddi3+0x294>
10003a28:	00bfffd4 	movui	r2,65535
10003a2c:	11c0652e 	bgeu	r2,r7,10003bc4 <__umoddi3+0x2cc>
10003a30:	00804034 	movhi	r2,256
10003a34:	10bfffc4 	addi	r2,r2,-1
10003a38:	11c1172e 	bgeu	r2,r7,10003e98 <__umoddi3+0x5a0>
10003a3c:	01400604 	movi	r5,24
10003a40:	282b883a 	mov	r21,r5
10003a44:	394ad83a 	srl	r5,r7,r5
10003a48:	00c40074 	movhi	r3,4097
10003a4c:	18ef0504 	addi	r3,r3,-17388
10003a50:	194b883a 	add	r5,r3,r5
10003a54:	28800003 	ldbu	r2,0(r5)
10003a58:	00c00804 	movi	r3,32
10003a5c:	156b883a 	add	r21,r2,r21
10003a60:	1d69c83a 	sub	r20,r3,r21
10003a64:	a000671e 	bne	r20,zero,10003c04 <__umoddi3+0x30c>
10003a68:	3c400136 	bltu	r7,r17,10003a70 <__umoddi3+0x178>
10003a6c:	81812336 	bltu	r16,r6,10003efc <__umoddi3+0x604>
10003a70:	8185c83a 	sub	r2,r16,r6
10003a74:	89e3c83a 	sub	r17,r17,r7
10003a78:	8087803a 	cmpltu	r3,r16,r2
10003a7c:	88edc83a 	sub	r22,r17,r3
10003a80:	b007883a 	mov	r3,r22
10003a84:	00004306 	br	10003b94 <__umoddi3+0x29c>
10003a88:	3000041e 	bne	r6,zero,10003a9c <__umoddi3+0x1a4>
10003a8c:	01000044 	movi	r4,1
10003a90:	000b883a 	mov	r5,zero
10003a94:	00040300 	call	10004030 <__udivsi3>
10003a98:	1027883a 	mov	r19,r2
10003a9c:	00bfffd4 	movui	r2,65535
10003aa0:	14c0532e 	bgeu	r2,r19,10003bf0 <__umoddi3+0x2f8>
10003aa4:	00804034 	movhi	r2,256
10003aa8:	10bfffc4 	addi	r2,r2,-1
10003aac:	14c1032e 	bgeu	r2,r19,10003ebc <__umoddi3+0x5c4>
10003ab0:	00800604 	movi	r2,24
10003ab4:	1007883a 	mov	r3,r2
10003ab8:	9884d83a 	srl	r2,r19,r2
10003abc:	01040074 	movhi	r4,4097
10003ac0:	212f0504 	addi	r4,r4,-17388
10003ac4:	2085883a 	add	r2,r4,r2
10003ac8:	11000003 	ldbu	r4,0(r2)
10003acc:	00800804 	movi	r2,32
10003ad0:	20c7883a 	add	r3,r4,r3
10003ad4:	10c5c83a 	sub	r2,r2,r3
10003ad8:	1000b61e 	bne	r2,zero,10003db4 <__umoddi3+0x4bc>
10003adc:	982ad43a 	srli	r21,r19,16
10003ae0:	8ce3c83a 	sub	r17,r17,r19
10003ae4:	9dbfffcc 	andi	r22,r19,65535
10003ae8:	0025883a 	mov	r18,zero
10003aec:	8809883a 	mov	r4,r17
10003af0:	a80b883a 	mov	r5,r21
10003af4:	00040380 	call	10004038 <__umodsi3>
10003af8:	8809883a 	mov	r4,r17
10003afc:	a80b883a 	mov	r5,r21
10003b00:	102f883a 	mov	r23,r2
10003b04:	00040300 	call	10004030 <__udivsi3>
10003b08:	1009883a 	mov	r4,r2
10003b0c:	b00b883a 	mov	r5,r22
10003b10:	00040400 	call	10004040 <__mulsi3>
10003b14:	b82e943a 	slli	r23,r23,16
10003b18:	a008d43a 	srli	r4,r20,16
10003b1c:	b906b03a 	or	r3,r23,r4
10003b20:	1880032e 	bgeu	r3,r2,10003b30 <__umoddi3+0x238>
10003b24:	1cc7883a 	add	r3,r3,r19
10003b28:	1cc00136 	bltu	r3,r19,10003b30 <__umoddi3+0x238>
10003b2c:	1880f136 	bltu	r3,r2,10003ef4 <__umoddi3+0x5fc>
10003b30:	18a1c83a 	sub	r16,r3,r2
10003b34:	8009883a 	mov	r4,r16
10003b38:	a80b883a 	mov	r5,r21
10003b3c:	00040380 	call	10004038 <__umodsi3>
10003b40:	8009883a 	mov	r4,r16
10003b44:	a80b883a 	mov	r5,r21
10003b48:	1023883a 	mov	r17,r2
10003b4c:	00040300 	call	10004030 <__udivsi3>
10003b50:	1009883a 	mov	r4,r2
10003b54:	b00b883a 	mov	r5,r22
10003b58:	8822943a 	slli	r17,r17,16
10003b5c:	00040400 	call	10004040 <__mulsi3>
10003b60:	a13fffcc 	andi	r4,r20,65535
10003b64:	8906b03a 	or	r3,r17,r4
10003b68:	1880042e 	bgeu	r3,r2,10003b7c <__umoddi3+0x284>
10003b6c:	1cc7883a 	add	r3,r3,r19
10003b70:	1cc00236 	bltu	r3,r19,10003b7c <__umoddi3+0x284>
10003b74:	1880012e 	bgeu	r3,r2,10003b7c <__umoddi3+0x284>
10003b78:	1cc7883a 	add	r3,r3,r19
10003b7c:	1887c83a 	sub	r3,r3,r2
10003b80:	1c84d83a 	srl	r2,r3,r18
10003b84:	0007883a 	mov	r3,zero
10003b88:	00000206 	br	10003b94 <__umoddi3+0x29c>
10003b8c:	2005883a 	mov	r2,r4
10003b90:	2807883a 	mov	r3,r5
10003b94:	dfc00b17 	ldw	ra,44(sp)
10003b98:	df000a17 	ldw	fp,40(sp)
10003b9c:	ddc00917 	ldw	r23,36(sp)
10003ba0:	dd800817 	ldw	r22,32(sp)
10003ba4:	dd400717 	ldw	r21,28(sp)
10003ba8:	dd000617 	ldw	r20,24(sp)
10003bac:	dcc00517 	ldw	r19,20(sp)
10003bb0:	dc800417 	ldw	r18,16(sp)
10003bb4:	dc400317 	ldw	r17,12(sp)
10003bb8:	dc000217 	ldw	r16,8(sp)
10003bbc:	dec00c04 	addi	sp,sp,48
10003bc0:	f800283a 	ret
10003bc4:	00803fc4 	movi	r2,255
10003bc8:	11c0b02e 	bgeu	r2,r7,10003e8c <__umoddi3+0x594>
10003bcc:	01400204 	movi	r5,8
10003bd0:	282b883a 	mov	r21,r5
10003bd4:	003f9b06 	br	10003a44 <__alt_data_end+0xf8003a44>
10003bd8:	00804034 	movhi	r2,256
10003bdc:	10bfffc4 	addi	r2,r2,-1
10003be0:	1180b02e 	bgeu	r2,r6,10003ea4 <__umoddi3+0x5ac>
10003be4:	01400604 	movi	r5,24
10003be8:	2805883a 	mov	r2,r5
10003bec:	003f5a06 	br	10003958 <__alt_data_end+0xf8003958>
10003bf0:	00803fc4 	movi	r2,255
10003bf4:	14c0ae2e 	bgeu	r2,r19,10003eb0 <__umoddi3+0x5b8>
10003bf8:	00800204 	movi	r2,8
10003bfc:	1007883a 	mov	r3,r2
10003c00:	003fad06 	br	10003ab8 <__alt_data_end+0xf8003ab8>
10003c04:	3d0a983a 	sll	r5,r7,r20
10003c08:	356cd83a 	srl	r22,r6,r21
10003c0c:	8d78d83a 	srl	fp,r17,r21
10003c10:	8d10983a 	sll	r8,r17,r20
10003c14:	2dacb03a 	or	r22,r5,r22
10003c18:	b02ed43a 	srli	r23,r22,16
10003c1c:	8564d83a 	srl	r18,r16,r21
10003c20:	e009883a 	mov	r4,fp
10003c24:	b80b883a 	mov	r5,r23
10003c28:	44a4b03a 	or	r18,r8,r18
10003c2c:	3526983a 	sll	r19,r6,r20
10003c30:	00040380 	call	10004038 <__umodsi3>
10003c34:	e009883a 	mov	r4,fp
10003c38:	b80b883a 	mov	r5,r23
10003c3c:	b47fffcc 	andi	r17,r22,65535
10003c40:	d8800015 	stw	r2,0(sp)
10003c44:	00040300 	call	10004030 <__udivsi3>
10003c48:	1009883a 	mov	r4,r2
10003c4c:	880b883a 	mov	r5,r17
10003c50:	1039883a 	mov	fp,r2
10003c54:	00040400 	call	10004040 <__mulsi3>
10003c58:	d9800017 	ldw	r6,0(sp)
10003c5c:	9008d43a 	srli	r4,r18,16
10003c60:	8520983a 	sll	r16,r16,r20
10003c64:	300c943a 	slli	r6,r6,16
10003c68:	3106b03a 	or	r3,r6,r4
10003c6c:	1880042e 	bgeu	r3,r2,10003c80 <__umoddi3+0x388>
10003c70:	1d87883a 	add	r3,r3,r22
10003c74:	e13fffc4 	addi	r4,fp,-1
10003c78:	1d809a2e 	bgeu	r3,r22,10003ee4 <__umoddi3+0x5ec>
10003c7c:	2039883a 	mov	fp,r4
10003c80:	1887c83a 	sub	r3,r3,r2
10003c84:	1809883a 	mov	r4,r3
10003c88:	b80b883a 	mov	r5,r23
10003c8c:	d8c00115 	stw	r3,4(sp)
10003c90:	00040380 	call	10004038 <__umodsi3>
10003c94:	d8c00117 	ldw	r3,4(sp)
10003c98:	b80b883a 	mov	r5,r23
10003c9c:	d8800015 	stw	r2,0(sp)
10003ca0:	1809883a 	mov	r4,r3
10003ca4:	00040300 	call	10004030 <__udivsi3>
10003ca8:	880b883a 	mov	r5,r17
10003cac:	1009883a 	mov	r4,r2
10003cb0:	102f883a 	mov	r23,r2
10003cb4:	00040400 	call	10004040 <__mulsi3>
10003cb8:	d9800017 	ldw	r6,0(sp)
10003cbc:	947fffcc 	andi	r17,r18,65535
10003cc0:	300c943a 	slli	r6,r6,16
10003cc4:	3464b03a 	or	r18,r6,r17
10003cc8:	9080042e 	bgeu	r18,r2,10003cdc <__umoddi3+0x3e4>
10003ccc:	95a5883a 	add	r18,r18,r22
10003cd0:	b8ffffc4 	addi	r3,r23,-1
10003cd4:	95807f2e 	bgeu	r18,r22,10003ed4 <__umoddi3+0x5dc>
10003cd8:	182f883a 	mov	r23,r3
10003cdc:	e038943a 	slli	fp,fp,16
10003ce0:	980cd43a 	srli	r6,r19,16
10003ce4:	98ffffcc 	andi	r3,r19,65535
10003ce8:	bf38b03a 	or	fp,r23,fp
10003cec:	e02ed43a 	srli	r23,fp,16
10003cf0:	e73fffcc 	andi	fp,fp,65535
10003cf4:	180b883a 	mov	r5,r3
10003cf8:	e009883a 	mov	r4,fp
10003cfc:	d9800015 	stw	r6,0(sp)
10003d00:	d8c00115 	stw	r3,4(sp)
10003d04:	90a5c83a 	sub	r18,r18,r2
10003d08:	00040400 	call	10004040 <__mulsi3>
10003d0c:	d8c00117 	ldw	r3,4(sp)
10003d10:	b809883a 	mov	r4,r23
10003d14:	1023883a 	mov	r17,r2
10003d18:	180b883a 	mov	r5,r3
10003d1c:	00040400 	call	10004040 <__mulsi3>
10003d20:	d9800017 	ldw	r6,0(sp)
10003d24:	b809883a 	mov	r4,r23
10003d28:	d8800115 	stw	r2,4(sp)
10003d2c:	300b883a 	mov	r5,r6
10003d30:	302f883a 	mov	r23,r6
10003d34:	00040400 	call	10004040 <__mulsi3>
10003d38:	e009883a 	mov	r4,fp
10003d3c:	b80b883a 	mov	r5,r23
10003d40:	d8800015 	stw	r2,0(sp)
10003d44:	00040400 	call	10004040 <__mulsi3>
10003d48:	d8c00117 	ldw	r3,4(sp)
10003d4c:	880cd43a 	srli	r6,r17,16
10003d50:	d9c00017 	ldw	r7,0(sp)
10003d54:	1885883a 	add	r2,r3,r2
10003d58:	118d883a 	add	r6,r2,r6
10003d5c:	30c0022e 	bgeu	r6,r3,10003d68 <__umoddi3+0x470>
10003d60:	00800074 	movhi	r2,1
10003d64:	388f883a 	add	r7,r7,r2
10003d68:	3006d43a 	srli	r3,r6,16
10003d6c:	300c943a 	slli	r6,r6,16
10003d70:	8c7fffcc 	andi	r17,r17,65535
10003d74:	38c7883a 	add	r3,r7,r3
10003d78:	3463883a 	add	r17,r6,r17
10003d7c:	90c03d36 	bltu	r18,r3,10003e74 <__umoddi3+0x57c>
10003d80:	90c06026 	beq	r18,r3,10003f04 <__umoddi3+0x60c>
10003d84:	90c9c83a 	sub	r4,r18,r3
10003d88:	880f883a 	mov	r7,r17
10003d8c:	81cfc83a 	sub	r7,r16,r7
10003d90:	81c7803a 	cmpltu	r3,r16,r7
10003d94:	20c7c83a 	sub	r3,r4,r3
10003d98:	1d44983a 	sll	r2,r3,r21
10003d9c:	3d0ed83a 	srl	r7,r7,r20
10003da0:	1d06d83a 	srl	r3,r3,r20
10003da4:	11c4b03a 	or	r2,r2,r7
10003da8:	003f7a06 	br	10003b94 <__alt_data_end+0xf8003b94>
10003dac:	0025883a 	mov	r18,zero
10003db0:	003ef806 	br	10003994 <__alt_data_end+0xf8003994>
10003db4:	98a6983a 	sll	r19,r19,r2
10003db8:	88e8d83a 	srl	r20,r17,r3
10003dbc:	80c6d83a 	srl	r3,r16,r3
10003dc0:	982ad43a 	srli	r21,r19,16
10003dc4:	88a2983a 	sll	r17,r17,r2
10003dc8:	a009883a 	mov	r4,r20
10003dcc:	a80b883a 	mov	r5,r21
10003dd0:	88eeb03a 	or	r23,r17,r3
10003dd4:	1025883a 	mov	r18,r2
10003dd8:	00040380 	call	10004038 <__umodsi3>
10003ddc:	a009883a 	mov	r4,r20
10003de0:	a80b883a 	mov	r5,r21
10003de4:	1023883a 	mov	r17,r2
10003de8:	9dbfffcc 	andi	r22,r19,65535
10003dec:	00040300 	call	10004030 <__udivsi3>
10003df0:	1009883a 	mov	r4,r2
10003df4:	b00b883a 	mov	r5,r22
10003df8:	00040400 	call	10004040 <__mulsi3>
10003dfc:	8822943a 	slli	r17,r17,16
10003e00:	b808d43a 	srli	r4,r23,16
10003e04:	84a8983a 	sll	r20,r16,r18
10003e08:	8906b03a 	or	r3,r17,r4
10003e0c:	1880042e 	bgeu	r3,r2,10003e20 <__umoddi3+0x528>
10003e10:	1cc7883a 	add	r3,r3,r19
10003e14:	1cc00236 	bltu	r3,r19,10003e20 <__umoddi3+0x528>
10003e18:	1880012e 	bgeu	r3,r2,10003e20 <__umoddi3+0x528>
10003e1c:	1cc7883a 	add	r3,r3,r19
10003e20:	18a1c83a 	sub	r16,r3,r2
10003e24:	8009883a 	mov	r4,r16
10003e28:	a80b883a 	mov	r5,r21
10003e2c:	00040380 	call	10004038 <__umodsi3>
10003e30:	8009883a 	mov	r4,r16
10003e34:	a80b883a 	mov	r5,r21
10003e38:	1039883a 	mov	fp,r2
10003e3c:	00040300 	call	10004030 <__udivsi3>
10003e40:	1009883a 	mov	r4,r2
10003e44:	b00b883a 	mov	r5,r22
10003e48:	00040400 	call	10004040 <__mulsi3>
10003e4c:	e006943a 	slli	r3,fp,16
10003e50:	b93fffcc 	andi	r4,r23,65535
10003e54:	1906b03a 	or	r3,r3,r4
10003e58:	1880042e 	bgeu	r3,r2,10003e6c <__umoddi3+0x574>
10003e5c:	1cc7883a 	add	r3,r3,r19
10003e60:	1cc00236 	bltu	r3,r19,10003e6c <__umoddi3+0x574>
10003e64:	1880012e 	bgeu	r3,r2,10003e6c <__umoddi3+0x574>
10003e68:	1cc7883a 	add	r3,r3,r19
10003e6c:	18a3c83a 	sub	r17,r3,r2
10003e70:	003f1e06 	br	10003aec <__alt_data_end+0xf8003aec>
10003e74:	8ccfc83a 	sub	r7,r17,r19
10003e78:	1d89c83a 	sub	r4,r3,r22
10003e7c:	89e3803a 	cmpltu	r17,r17,r7
10003e80:	2463c83a 	sub	r17,r4,r17
10003e84:	9449c83a 	sub	r4,r18,r17
10003e88:	003fc006 	br	10003d8c <__alt_data_end+0xf8003d8c>
10003e8c:	000b883a 	mov	r5,zero
10003e90:	002b883a 	mov	r21,zero
10003e94:	003eeb06 	br	10003a44 <__alt_data_end+0xf8003a44>
10003e98:	01400404 	movi	r5,16
10003e9c:	282b883a 	mov	r21,r5
10003ea0:	003ee806 	br	10003a44 <__alt_data_end+0xf8003a44>
10003ea4:	01400404 	movi	r5,16
10003ea8:	2805883a 	mov	r2,r5
10003eac:	003eaa06 	br	10003958 <__alt_data_end+0xf8003958>
10003eb0:	0005883a 	mov	r2,zero
10003eb4:	0007883a 	mov	r3,zero
10003eb8:	003eff06 	br	10003ab8 <__alt_data_end+0xf8003ab8>
10003ebc:	00800404 	movi	r2,16
10003ec0:	1007883a 	mov	r3,r2
10003ec4:	003efc06 	br	10003ab8 <__alt_data_end+0xf8003ab8>
10003ec8:	000b883a 	mov	r5,zero
10003ecc:	0005883a 	mov	r2,zero
10003ed0:	003ea106 	br	10003958 <__alt_data_end+0xf8003958>
10003ed4:	90bf802e 	bgeu	r18,r2,10003cd8 <__alt_data_end+0xf8003cd8>
10003ed8:	bdffff84 	addi	r23,r23,-2
10003edc:	95a5883a 	add	r18,r18,r22
10003ee0:	003f7e06 	br	10003cdc <__alt_data_end+0xf8003cdc>
10003ee4:	18bf652e 	bgeu	r3,r2,10003c7c <__alt_data_end+0xf8003c7c>
10003ee8:	e73fff84 	addi	fp,fp,-2
10003eec:	1d87883a 	add	r3,r3,r22
10003ef0:	003f6306 	br	10003c80 <__alt_data_end+0xf8003c80>
10003ef4:	1cc7883a 	add	r3,r3,r19
10003ef8:	003f0d06 	br	10003b30 <__alt_data_end+0xf8003b30>
10003efc:	8005883a 	mov	r2,r16
10003f00:	003edf06 	br	10003a80 <__alt_data_end+0xf8003a80>
10003f04:	847fdb36 	bltu	r16,r17,10003e74 <__alt_data_end+0xf8003e74>
10003f08:	880f883a 	mov	r7,r17
10003f0c:	0009883a 	mov	r4,zero
10003f10:	003f9e06 	br	10003d8c <__alt_data_end+0xf8003d8c>

10003f14 <udivmodsi4>:
10003f14:	2900182e 	bgeu	r5,r4,10003f78 <udivmodsi4+0x64>
10003f18:	28001716 	blt	r5,zero,10003f78 <udivmodsi4+0x64>
10003f1c:	00800804 	movi	r2,32
10003f20:	00c00044 	movi	r3,1
10003f24:	00000206 	br	10003f30 <udivmodsi4+0x1c>
10003f28:	10001126 	beq	r2,zero,10003f70 <udivmodsi4+0x5c>
10003f2c:	28000516 	blt	r5,zero,10003f44 <udivmodsi4+0x30>
10003f30:	294b883a 	add	r5,r5,r5
10003f34:	10bfffc4 	addi	r2,r2,-1
10003f38:	18c7883a 	add	r3,r3,r3
10003f3c:	293ffa36 	bltu	r5,r4,10003f28 <__alt_data_end+0xf8003f28>
10003f40:	18000b26 	beq	r3,zero,10003f70 <udivmodsi4+0x5c>
10003f44:	0005883a 	mov	r2,zero
10003f48:	21400236 	bltu	r4,r5,10003f54 <udivmodsi4+0x40>
10003f4c:	2149c83a 	sub	r4,r4,r5
10003f50:	10c4b03a 	or	r2,r2,r3
10003f54:	1806d07a 	srli	r3,r3,1
10003f58:	280ad07a 	srli	r5,r5,1
10003f5c:	183ffa1e 	bne	r3,zero,10003f48 <__alt_data_end+0xf8003f48>
10003f60:	3000011e 	bne	r6,zero,10003f68 <udivmodsi4+0x54>
10003f64:	f800283a 	ret
10003f68:	2005883a 	mov	r2,r4
10003f6c:	f800283a 	ret
10003f70:	0005883a 	mov	r2,zero
10003f74:	003ffa06 	br	10003f60 <__alt_data_end+0xf8003f60>
10003f78:	00c00044 	movi	r3,1
10003f7c:	003ff106 	br	10003f44 <__alt_data_end+0xf8003f44>

10003f80 <__divsi3>:
10003f80:	defffe04 	addi	sp,sp,-8
10003f84:	dfc00115 	stw	ra,4(sp)
10003f88:	dc000015 	stw	r16,0(sp)
10003f8c:	20000b16 	blt	r4,zero,10003fbc <__divsi3+0x3c>
10003f90:	0021883a 	mov	r16,zero
10003f94:	28000c16 	blt	r5,zero,10003fc8 <__divsi3+0x48>
10003f98:	000d883a 	mov	r6,zero
10003f9c:	0003f140 	call	10003f14 <udivmodsi4>
10003fa0:	0407c83a 	sub	r3,zero,r16
10003fa4:	1884f03a 	xor	r2,r3,r2
10003fa8:	1405883a 	add	r2,r2,r16
10003fac:	dfc00117 	ldw	ra,4(sp)
10003fb0:	dc000017 	ldw	r16,0(sp)
10003fb4:	dec00204 	addi	sp,sp,8
10003fb8:	f800283a 	ret
10003fbc:	0109c83a 	sub	r4,zero,r4
10003fc0:	04000044 	movi	r16,1
10003fc4:	283ff40e 	bge	r5,zero,10003f98 <__alt_data_end+0xf8003f98>
10003fc8:	014bc83a 	sub	r5,zero,r5
10003fcc:	8400005c 	xori	r16,r16,1
10003fd0:	003ff106 	br	10003f98 <__alt_data_end+0xf8003f98>

10003fd4 <__modsi3>:
10003fd4:	defffd04 	addi	sp,sp,-12
10003fd8:	dfc00215 	stw	ra,8(sp)
10003fdc:	dc400115 	stw	r17,4(sp)
10003fe0:	dc000015 	stw	r16,0(sp)
10003fe4:	20000c16 	blt	r4,zero,10004018 <__modsi3+0x44>
10003fe8:	0023883a 	mov	r17,zero
10003fec:	0021883a 	mov	r16,zero
10003ff0:	28000d16 	blt	r5,zero,10004028 <__modsi3+0x54>
10003ff4:	01800044 	movi	r6,1
10003ff8:	0003f140 	call	10003f14 <udivmodsi4>
10003ffc:	1404f03a 	xor	r2,r2,r16
10004000:	8885883a 	add	r2,r17,r2
10004004:	dfc00217 	ldw	ra,8(sp)
10004008:	dc400117 	ldw	r17,4(sp)
1000400c:	dc000017 	ldw	r16,0(sp)
10004010:	dec00304 	addi	sp,sp,12
10004014:	f800283a 	ret
10004018:	0109c83a 	sub	r4,zero,r4
1000401c:	04400044 	movi	r17,1
10004020:	043fffc4 	movi	r16,-1
10004024:	283ff30e 	bge	r5,zero,10003ff4 <__alt_data_end+0xf8003ff4>
10004028:	014bc83a 	sub	r5,zero,r5
1000402c:	003ff106 	br	10003ff4 <__alt_data_end+0xf8003ff4>

10004030 <__udivsi3>:
10004030:	000d883a 	mov	r6,zero
10004034:	0003f141 	jmpi	10003f14 <udivmodsi4>

10004038 <__umodsi3>:
10004038:	01800044 	movi	r6,1
1000403c:	0003f141 	jmpi	10003f14 <udivmodsi4>

10004040 <__mulsi3>:
10004040:	0005883a 	mov	r2,zero
10004044:	20000726 	beq	r4,zero,10004064 <__mulsi3+0x24>
10004048:	20c0004c 	andi	r3,r4,1
1000404c:	2008d07a 	srli	r4,r4,1
10004050:	18000126 	beq	r3,zero,10004058 <__mulsi3+0x18>
10004054:	1145883a 	add	r2,r2,r5
10004058:	294b883a 	add	r5,r5,r5
1000405c:	203ffa1e 	bne	r4,zero,10004048 <__alt_data_end+0xf8004048>
10004060:	f800283a 	ret
10004064:	f800283a 	ret

10004068 <__adddf3>:
10004068:	02000434 	movhi	r8,16
1000406c:	423fffc4 	addi	r8,r8,-1
10004070:	defffb04 	addi	sp,sp,-20
10004074:	2a12703a 	and	r9,r5,r8
10004078:	2806d7fa 	srli	r3,r5,31
1000407c:	3a10703a 	and	r8,r7,r8
10004080:	3804d53a 	srli	r2,r7,20
10004084:	3014d77a 	srli	r10,r6,29
10004088:	dc000015 	stw	r16,0(sp)
1000408c:	481290fa 	slli	r9,r9,3
10004090:	2820d53a 	srli	r16,r5,20
10004094:	401090fa 	slli	r8,r8,3
10004098:	200ad77a 	srli	r5,r4,29
1000409c:	380ed7fa 	srli	r7,r7,31
100040a0:	dc800215 	stw	r18,8(sp)
100040a4:	dc400115 	stw	r17,4(sp)
100040a8:	dfc00415 	stw	ra,16(sp)
100040ac:	dcc00315 	stw	r19,12(sp)
100040b0:	1c803fcc 	andi	r18,r3,255
100040b4:	8401ffcc 	andi	r16,r16,2047
100040b8:	494ab03a 	or	r5,r9,r5
100040bc:	202290fa 	slli	r17,r4,3
100040c0:	1081ffcc 	andi	r2,r2,2047
100040c4:	4290b03a 	or	r8,r8,r10
100040c8:	300c90fa 	slli	r6,r6,3
100040cc:	91c07026 	beq	r18,r7,10004290 <__adddf3+0x228>
100040d0:	8087c83a 	sub	r3,r16,r2
100040d4:	00c0b30e 	bge	zero,r3,100043a4 <__adddf3+0x33c>
100040d8:	10002a1e 	bne	r2,zero,10004184 <__adddf3+0x11c>
100040dc:	4184b03a 	or	r2,r8,r6
100040e0:	1000991e 	bne	r2,zero,10004348 <__adddf3+0x2e0>
100040e4:	888001cc 	andi	r2,r17,7
100040e8:	10005b26 	beq	r2,zero,10004258 <__adddf3+0x1f0>
100040ec:	88c003cc 	andi	r3,r17,15
100040f0:	00800104 	movi	r2,4
100040f4:	18805826 	beq	r3,r2,10004258 <__adddf3+0x1f0>
100040f8:	89800104 	addi	r6,r17,4
100040fc:	3463803a 	cmpltu	r17,r6,r17
10004100:	2c4b883a 	add	r5,r5,r17
10004104:	2880202c 	andhi	r2,r5,128
10004108:	9007883a 	mov	r3,r18
1000410c:	3023883a 	mov	r17,r6
10004110:	10005426 	beq	r2,zero,10004264 <__adddf3+0x1fc>
10004114:	84000044 	addi	r16,r16,1
10004118:	0081ffc4 	movi	r2,2047
1000411c:	8080c126 	beq	r16,r2,10004424 <__adddf3+0x3bc>
10004120:	013fe034 	movhi	r4,65408
10004124:	213fffc4 	addi	r4,r4,-1
10004128:	290a703a 	and	r5,r5,r4
1000412c:	2804977a 	slli	r2,r5,29
10004130:	280a927a 	slli	r5,r5,9
10004134:	8822d0fa 	srli	r17,r17,3
10004138:	8401ffcc 	andi	r16,r16,2047
1000413c:	2808d33a 	srli	r4,r5,12
10004140:	1444b03a 	or	r2,r2,r17
10004144:	8401ffcc 	andi	r16,r16,2047
10004148:	800a953a 	slli	r5,r16,20
1000414c:	18c03fcc 	andi	r3,r3,255
10004150:	04000434 	movhi	r16,16
10004154:	180697fa 	slli	r3,r3,31
10004158:	843fffc4 	addi	r16,r16,-1
1000415c:	2420703a 	and	r16,r4,r16
10004160:	8160b03a 	or	r16,r16,r5
10004164:	80c6b03a 	or	r3,r16,r3
10004168:	dfc00417 	ldw	ra,16(sp)
1000416c:	dcc00317 	ldw	r19,12(sp)
10004170:	dc800217 	ldw	r18,8(sp)
10004174:	dc400117 	ldw	r17,4(sp)
10004178:	dc000017 	ldw	r16,0(sp)
1000417c:	dec00504 	addi	sp,sp,20
10004180:	f800283a 	ret
10004184:	0081ffc4 	movi	r2,2047
10004188:	80bfd626 	beq	r16,r2,100040e4 <__alt_data_end+0xf80040e4>
1000418c:	42002034 	orhi	r8,r8,128
10004190:	00800e04 	movi	r2,56
10004194:	10c0a616 	blt	r2,r3,10004430 <__adddf3+0x3c8>
10004198:	008007c4 	movi	r2,31
1000419c:	10c0c916 	blt	r2,r3,100044c4 <__adddf3+0x45c>
100041a0:	00800804 	movi	r2,32
100041a4:	10c5c83a 	sub	r2,r2,r3
100041a8:	408e983a 	sll	r7,r8,r2
100041ac:	30c8d83a 	srl	r4,r6,r3
100041b0:	3084983a 	sll	r2,r6,r2
100041b4:	40c6d83a 	srl	r3,r8,r3
100041b8:	390cb03a 	or	r6,r7,r4
100041bc:	1004c03a 	cmpne	r2,r2,zero
100041c0:	308cb03a 	or	r6,r6,r2
100041c4:	898dc83a 	sub	r6,r17,r6
100041c8:	89a3803a 	cmpltu	r17,r17,r6
100041cc:	28cbc83a 	sub	r5,r5,r3
100041d0:	2c4bc83a 	sub	r5,r5,r17
100041d4:	3023883a 	mov	r17,r6
100041d8:	2880202c 	andhi	r2,r5,128
100041dc:	10006d26 	beq	r2,zero,10004394 <__adddf3+0x32c>
100041e0:	04c02034 	movhi	r19,128
100041e4:	9cffffc4 	addi	r19,r19,-1
100041e8:	2ce6703a 	and	r19,r5,r19
100041ec:	98007e26 	beq	r19,zero,100043e8 <__adddf3+0x380>
100041f0:	9809883a 	mov	r4,r19
100041f4:	00068000 	call	10006800 <__clzsi2>
100041f8:	10fffe04 	addi	r3,r2,-8
100041fc:	010007c4 	movi	r4,31
10004200:	20c07f16 	blt	r4,r3,10004400 <__adddf3+0x398>
10004204:	01400a04 	movi	r5,40
10004208:	2885c83a 	sub	r2,r5,r2
1000420c:	888ad83a 	srl	r5,r17,r2
10004210:	98e6983a 	sll	r19,r19,r3
10004214:	88e2983a 	sll	r17,r17,r3
10004218:	2ce6b03a 	or	r19,r5,r19
1000421c:	1c007c16 	blt	r3,r16,10004410 <__adddf3+0x3a8>
10004220:	1c21c83a 	sub	r16,r3,r16
10004224:	81400044 	addi	r5,r16,1
10004228:	00c007c4 	movi	r3,31
1000422c:	19409816 	blt	r3,r5,10004490 <__adddf3+0x428>
10004230:	1c21c83a 	sub	r16,r3,r16
10004234:	8c08983a 	sll	r4,r17,r16
10004238:	8946d83a 	srl	r3,r17,r5
1000423c:	9c20983a 	sll	r16,r19,r16
10004240:	2008c03a 	cmpne	r4,r4,zero
10004244:	994ad83a 	srl	r5,r19,r5
10004248:	1c06b03a 	or	r3,r3,r16
1000424c:	1922b03a 	or	r17,r3,r4
10004250:	0021883a 	mov	r16,zero
10004254:	003fa306 	br	100040e4 <__alt_data_end+0xf80040e4>
10004258:	2880202c 	andhi	r2,r5,128
1000425c:	9007883a 	mov	r3,r18
10004260:	103fac1e 	bne	r2,zero,10004114 <__alt_data_end+0xf8004114>
10004264:	2804977a 	slli	r2,r5,29
10004268:	8822d0fa 	srli	r17,r17,3
1000426c:	0101ffc4 	movi	r4,2047
10004270:	280ad0fa 	srli	r5,r5,3
10004274:	1444b03a 	or	r2,r2,r17
10004278:	81002c26 	beq	r16,r4,1000432c <__adddf3+0x2c4>
1000427c:	8120703a 	and	r16,r16,r4
10004280:	01000434 	movhi	r4,16
10004284:	213fffc4 	addi	r4,r4,-1
10004288:	2908703a 	and	r4,r5,r4
1000428c:	003fad06 	br	10004144 <__alt_data_end+0xf8004144>
10004290:	8089c83a 	sub	r4,r16,r2
10004294:	01006a0e 	bge	zero,r4,10004440 <__adddf3+0x3d8>
10004298:	10003326 	beq	r2,zero,10004368 <__adddf3+0x300>
1000429c:	0081ffc4 	movi	r2,2047
100042a0:	80bf9026 	beq	r16,r2,100040e4 <__alt_data_end+0xf80040e4>
100042a4:	42002034 	orhi	r8,r8,128
100042a8:	00800e04 	movi	r2,56
100042ac:	1100b116 	blt	r2,r4,10004574 <__adddf3+0x50c>
100042b0:	008007c4 	movi	r2,31
100042b4:	1100e216 	blt	r2,r4,10004640 <__adddf3+0x5d8>
100042b8:	00800804 	movi	r2,32
100042bc:	1105c83a 	sub	r2,r2,r4
100042c0:	4092983a 	sll	r9,r8,r2
100042c4:	310ed83a 	srl	r7,r6,r4
100042c8:	3084983a 	sll	r2,r6,r2
100042cc:	4110d83a 	srl	r8,r8,r4
100042d0:	49ccb03a 	or	r6,r9,r7
100042d4:	1004c03a 	cmpne	r2,r2,zero
100042d8:	308cb03a 	or	r6,r6,r2
100042dc:	344d883a 	add	r6,r6,r17
100042e0:	3463803a 	cmpltu	r17,r6,r17
100042e4:	414b883a 	add	r5,r8,r5
100042e8:	2c4b883a 	add	r5,r5,r17
100042ec:	3023883a 	mov	r17,r6
100042f0:	2880202c 	andhi	r2,r5,128
100042f4:	10002726 	beq	r2,zero,10004394 <__adddf3+0x32c>
100042f8:	84000044 	addi	r16,r16,1
100042fc:	0081ffc4 	movi	r2,2047
10004300:	8080ae26 	beq	r16,r2,100045bc <__adddf3+0x554>
10004304:	00bfe034 	movhi	r2,65408
10004308:	10bfffc4 	addi	r2,r2,-1
1000430c:	288a703a 	and	r5,r5,r2
10004310:	880cd07a 	srli	r6,r17,1
10004314:	280897fa 	slli	r4,r5,31
10004318:	88c0004c 	andi	r3,r17,1
1000431c:	30e2b03a 	or	r17,r6,r3
10004320:	280ad07a 	srli	r5,r5,1
10004324:	8922b03a 	or	r17,r17,r4
10004328:	003f6e06 	br	100040e4 <__alt_data_end+0xf80040e4>
1000432c:	1148b03a 	or	r4,r2,r5
10004330:	20003c26 	beq	r4,zero,10004424 <__adddf3+0x3bc>
10004334:	29000234 	orhi	r4,r5,8
10004338:	01400434 	movhi	r5,16
1000433c:	297fffc4 	addi	r5,r5,-1
10004340:	2148703a 	and	r4,r4,r5
10004344:	003f7f06 	br	10004144 <__alt_data_end+0xf8004144>
10004348:	18ffffc4 	addi	r3,r3,-1
1000434c:	18004d1e 	bne	r3,zero,10004484 <__adddf3+0x41c>
10004350:	898dc83a 	sub	r6,r17,r6
10004354:	89a3803a 	cmpltu	r17,r17,r6
10004358:	2a0bc83a 	sub	r5,r5,r8
1000435c:	2c4bc83a 	sub	r5,r5,r17
10004360:	3023883a 	mov	r17,r6
10004364:	003f9c06 	br	100041d8 <__alt_data_end+0xf80041d8>
10004368:	4184b03a 	or	r2,r8,r6
1000436c:	103f5d26 	beq	r2,zero,100040e4 <__alt_data_end+0xf80040e4>
10004370:	213fffc4 	addi	r4,r4,-1
10004374:	203fd926 	beq	r4,zero,100042dc <__alt_data_end+0xf80042dc>
10004378:	0081ffc4 	movi	r2,2047
1000437c:	80bfca1e 	bne	r16,r2,100042a8 <__alt_data_end+0xf80042a8>
10004380:	003f5806 	br	100040e4 <__alt_data_end+0xf80040e4>
10004384:	10c8b03a 	or	r4,r2,r3
10004388:	20008b26 	beq	r4,zero,100045b8 <__adddf3+0x550>
1000438c:	100b883a 	mov	r5,r2
10004390:	1823883a 	mov	r17,r3
10004394:	888001cc 	andi	r2,r17,7
10004398:	103f541e 	bne	r2,zero,100040ec <__alt_data_end+0xf80040ec>
1000439c:	9007883a 	mov	r3,r18
100043a0:	003fb006 	br	10004264 <__alt_data_end+0xf8004264>
100043a4:	1800531e 	bne	r3,zero,100044f4 <__adddf3+0x48c>
100043a8:	80800044 	addi	r2,r16,1
100043ac:	1081ffcc 	andi	r2,r2,2047
100043b0:	00c00044 	movi	r3,1
100043b4:	1880990e 	bge	r3,r2,1000461c <__adddf3+0x5b4>
100043b8:	8985c83a 	sub	r2,r17,r6
100043bc:	8887803a 	cmpltu	r3,r17,r2
100043c0:	2a27c83a 	sub	r19,r5,r8
100043c4:	98e7c83a 	sub	r19,r19,r3
100043c8:	98c0202c 	andhi	r3,r19,128
100043cc:	18006226 	beq	r3,zero,10004558 <__adddf3+0x4f0>
100043d0:	3463c83a 	sub	r17,r6,r17
100043d4:	4151c83a 	sub	r8,r8,r5
100043d8:	344d803a 	cmpltu	r6,r6,r17
100043dc:	41a7c83a 	sub	r19,r8,r6
100043e0:	3825883a 	mov	r18,r7
100043e4:	983f821e 	bne	r19,zero,100041f0 <__alt_data_end+0xf80041f0>
100043e8:	8809883a 	mov	r4,r17
100043ec:	00068000 	call	10006800 <__clzsi2>
100043f0:	10800804 	addi	r2,r2,32
100043f4:	10fffe04 	addi	r3,r2,-8
100043f8:	010007c4 	movi	r4,31
100043fc:	20ff810e 	bge	r4,r3,10004204 <__alt_data_end+0xf8004204>
10004400:	14fff604 	addi	r19,r2,-40
10004404:	8ce6983a 	sll	r19,r17,r19
10004408:	0023883a 	mov	r17,zero
1000440c:	1c3f840e 	bge	r3,r16,10004220 <__alt_data_end+0xf8004220>
10004410:	017fe034 	movhi	r5,65408
10004414:	297fffc4 	addi	r5,r5,-1
10004418:	80e1c83a 	sub	r16,r16,r3
1000441c:	994a703a 	and	r5,r19,r5
10004420:	003f3006 	br	100040e4 <__alt_data_end+0xf80040e4>
10004424:	0009883a 	mov	r4,zero
10004428:	0005883a 	mov	r2,zero
1000442c:	003f4506 	br	10004144 <__alt_data_end+0xf8004144>
10004430:	418cb03a 	or	r6,r8,r6
10004434:	300cc03a 	cmpne	r6,r6,zero
10004438:	0007883a 	mov	r3,zero
1000443c:	003f6106 	br	100041c4 <__alt_data_end+0xf80041c4>
10004440:	2000921e 	bne	r4,zero,1000468c <__adddf3+0x624>
10004444:	80800044 	addi	r2,r16,1
10004448:	11c1ffcc 	andi	r7,r2,2047
1000444c:	01000044 	movi	r4,1
10004450:	21c0610e 	bge	r4,r7,100045d8 <__adddf3+0x570>
10004454:	0101ffc4 	movi	r4,2047
10004458:	1100a326 	beq	r2,r4,100046e8 <__adddf3+0x680>
1000445c:	344d883a 	add	r6,r6,r17
10004460:	3463803a 	cmpltu	r17,r6,r17
10004464:	414b883a 	add	r5,r8,r5
10004468:	2c4b883a 	add	r5,r5,r17
1000446c:	282297fa 	slli	r17,r5,31
10004470:	300cd07a 	srli	r6,r6,1
10004474:	280ad07a 	srli	r5,r5,1
10004478:	1021883a 	mov	r16,r2
1000447c:	89a2b03a 	or	r17,r17,r6
10004480:	003f1806 	br	100040e4 <__alt_data_end+0xf80040e4>
10004484:	0081ffc4 	movi	r2,2047
10004488:	80bf411e 	bne	r16,r2,10004190 <__alt_data_end+0xf8004190>
1000448c:	003f1506 	br	100040e4 <__alt_data_end+0xf80040e4>
10004490:	80bff844 	addi	r2,r16,-31
10004494:	00c00804 	movi	r3,32
10004498:	9884d83a 	srl	r2,r19,r2
1000449c:	28c04a26 	beq	r5,r3,100045c8 <__adddf3+0x560>
100044a0:	00c00fc4 	movi	r3,63
100044a4:	1c21c83a 	sub	r16,r3,r16
100044a8:	9c26983a 	sll	r19,r19,r16
100044ac:	9c62b03a 	or	r17,r19,r17
100044b0:	8822c03a 	cmpne	r17,r17,zero
100044b4:	88a2b03a 	or	r17,r17,r2
100044b8:	000b883a 	mov	r5,zero
100044bc:	0021883a 	mov	r16,zero
100044c0:	003fb406 	br	10004394 <__alt_data_end+0xf8004394>
100044c4:	18bff804 	addi	r2,r3,-32
100044c8:	01000804 	movi	r4,32
100044cc:	4084d83a 	srl	r2,r8,r2
100044d0:	19003f26 	beq	r3,r4,100045d0 <__adddf3+0x568>
100044d4:	01001004 	movi	r4,64
100044d8:	20c7c83a 	sub	r3,r4,r3
100044dc:	40d0983a 	sll	r8,r8,r3
100044e0:	418cb03a 	or	r6,r8,r6
100044e4:	300cc03a 	cmpne	r6,r6,zero
100044e8:	308cb03a 	or	r6,r6,r2
100044ec:	0007883a 	mov	r3,zero
100044f0:	003f3406 	br	100041c4 <__alt_data_end+0xf80041c4>
100044f4:	80002326 	beq	r16,zero,10004584 <__adddf3+0x51c>
100044f8:	0101ffc4 	movi	r4,2047
100044fc:	11005e26 	beq	r2,r4,10004678 <__adddf3+0x610>
10004500:	00c7c83a 	sub	r3,zero,r3
10004504:	29402034 	orhi	r5,r5,128
10004508:	01000e04 	movi	r4,56
1000450c:	20c07216 	blt	r4,r3,100046d8 <__adddf3+0x670>
10004510:	010007c4 	movi	r4,31
10004514:	20c0ce16 	blt	r4,r3,10004850 <__adddf3+0x7e8>
10004518:	01000804 	movi	r4,32
1000451c:	20c9c83a 	sub	r4,r4,r3
10004520:	2914983a 	sll	r10,r5,r4
10004524:	88d2d83a 	srl	r9,r17,r3
10004528:	8908983a 	sll	r4,r17,r4
1000452c:	28c6d83a 	srl	r3,r5,r3
10004530:	5262b03a 	or	r17,r10,r9
10004534:	2008c03a 	cmpne	r4,r4,zero
10004538:	8922b03a 	or	r17,r17,r4
1000453c:	3463c83a 	sub	r17,r6,r17
10004540:	40c7c83a 	sub	r3,r8,r3
10004544:	344d803a 	cmpltu	r6,r6,r17
10004548:	198bc83a 	sub	r5,r3,r6
1000454c:	1021883a 	mov	r16,r2
10004550:	3825883a 	mov	r18,r7
10004554:	003f2006 	br	100041d8 <__alt_data_end+0xf80041d8>
10004558:	9886b03a 	or	r3,r19,r2
1000455c:	1800141e 	bne	r3,zero,100045b0 <__adddf3+0x548>
10004560:	0007883a 	mov	r3,zero
10004564:	000b883a 	mov	r5,zero
10004568:	0023883a 	mov	r17,zero
1000456c:	0021883a 	mov	r16,zero
10004570:	003f3c06 	br	10004264 <__alt_data_end+0xf8004264>
10004574:	418cb03a 	or	r6,r8,r6
10004578:	300cc03a 	cmpne	r6,r6,zero
1000457c:	0011883a 	mov	r8,zero
10004580:	003f5606 	br	100042dc <__alt_data_end+0xf80042dc>
10004584:	2c48b03a 	or	r4,r5,r17
10004588:	20003b26 	beq	r4,zero,10004678 <__adddf3+0x610>
1000458c:	00c6303a 	nor	r3,zero,r3
10004590:	1800371e 	bne	r3,zero,10004670 <__adddf3+0x608>
10004594:	3463c83a 	sub	r17,r6,r17
10004598:	414bc83a 	sub	r5,r8,r5
1000459c:	344d803a 	cmpltu	r6,r6,r17
100045a0:	298bc83a 	sub	r5,r5,r6
100045a4:	1021883a 	mov	r16,r2
100045a8:	3825883a 	mov	r18,r7
100045ac:	003f0a06 	br	100041d8 <__alt_data_end+0xf80041d8>
100045b0:	1023883a 	mov	r17,r2
100045b4:	003f0d06 	br	100041ec <__alt_data_end+0xf80041ec>
100045b8:	0007883a 	mov	r3,zero
100045bc:	000b883a 	mov	r5,zero
100045c0:	0023883a 	mov	r17,zero
100045c4:	003f2706 	br	10004264 <__alt_data_end+0xf8004264>
100045c8:	0027883a 	mov	r19,zero
100045cc:	003fb706 	br	100044ac <__alt_data_end+0xf80044ac>
100045d0:	0011883a 	mov	r8,zero
100045d4:	003fc206 	br	100044e0 <__alt_data_end+0xf80044e0>
100045d8:	2c44b03a 	or	r2,r5,r17
100045dc:	8000871e 	bne	r16,zero,100047fc <__adddf3+0x794>
100045e0:	1000b126 	beq	r2,zero,100048a8 <__adddf3+0x840>
100045e4:	4184b03a 	or	r2,r8,r6
100045e8:	103ebe26 	beq	r2,zero,100040e4 <__alt_data_end+0xf80040e4>
100045ec:	3445883a 	add	r2,r6,r17
100045f0:	1463803a 	cmpltu	r17,r2,r17
100045f4:	414b883a 	add	r5,r8,r5
100045f8:	2c4b883a 	add	r5,r5,r17
100045fc:	28c0202c 	andhi	r3,r5,128
10004600:	1023883a 	mov	r17,r2
10004604:	183f6326 	beq	r3,zero,10004394 <__alt_data_end+0xf8004394>
10004608:	00bfe034 	movhi	r2,65408
1000460c:	10bfffc4 	addi	r2,r2,-1
10004610:	2021883a 	mov	r16,r4
10004614:	288a703a 	and	r5,r5,r2
10004618:	003eb206 	br	100040e4 <__alt_data_end+0xf80040e4>
1000461c:	2c44b03a 	or	r2,r5,r17
10004620:	8000251e 	bne	r16,zero,100046b8 <__adddf3+0x650>
10004624:	10004b1e 	bne	r2,zero,10004754 <__adddf3+0x6ec>
10004628:	4184b03a 	or	r2,r8,r6
1000462c:	103fe226 	beq	r2,zero,100045b8 <__alt_data_end+0xf80045b8>
10004630:	400b883a 	mov	r5,r8
10004634:	3023883a 	mov	r17,r6
10004638:	3825883a 	mov	r18,r7
1000463c:	003ea906 	br	100040e4 <__alt_data_end+0xf80040e4>
10004640:	20bff804 	addi	r2,r4,-32
10004644:	01c00804 	movi	r7,32
10004648:	4084d83a 	srl	r2,r8,r2
1000464c:	21c07e26 	beq	r4,r7,10004848 <__adddf3+0x7e0>
10004650:	01c01004 	movi	r7,64
10004654:	3909c83a 	sub	r4,r7,r4
10004658:	4110983a 	sll	r8,r8,r4
1000465c:	418cb03a 	or	r6,r8,r6
10004660:	300cc03a 	cmpne	r6,r6,zero
10004664:	308cb03a 	or	r6,r6,r2
10004668:	0011883a 	mov	r8,zero
1000466c:	003f1b06 	br	100042dc <__alt_data_end+0xf80042dc>
10004670:	0101ffc4 	movi	r4,2047
10004674:	113fa41e 	bne	r2,r4,10004508 <__alt_data_end+0xf8004508>
10004678:	400b883a 	mov	r5,r8
1000467c:	3023883a 	mov	r17,r6
10004680:	1021883a 	mov	r16,r2
10004684:	3825883a 	mov	r18,r7
10004688:	003e9606 	br	100040e4 <__alt_data_end+0xf80040e4>
1000468c:	80001a1e 	bne	r16,zero,100046f8 <__adddf3+0x690>
10004690:	2c4eb03a 	or	r7,r5,r17
10004694:	38005526 	beq	r7,zero,100047ec <__adddf3+0x784>
10004698:	0108303a 	nor	r4,zero,r4
1000469c:	2000511e 	bne	r4,zero,100047e4 <__adddf3+0x77c>
100046a0:	89a3883a 	add	r17,r17,r6
100046a4:	414b883a 	add	r5,r8,r5
100046a8:	898d803a 	cmpltu	r6,r17,r6
100046ac:	298b883a 	add	r5,r5,r6
100046b0:	1021883a 	mov	r16,r2
100046b4:	003f0e06 	br	100042f0 <__alt_data_end+0xf80042f0>
100046b8:	1000341e 	bne	r2,zero,1000478c <__adddf3+0x724>
100046bc:	4184b03a 	or	r2,r8,r6
100046c0:	10006f26 	beq	r2,zero,10004880 <__adddf3+0x818>
100046c4:	400b883a 	mov	r5,r8
100046c8:	3023883a 	mov	r17,r6
100046cc:	3825883a 	mov	r18,r7
100046d0:	0401ffc4 	movi	r16,2047
100046d4:	003e8306 	br	100040e4 <__alt_data_end+0xf80040e4>
100046d8:	2c62b03a 	or	r17,r5,r17
100046dc:	8822c03a 	cmpne	r17,r17,zero
100046e0:	0007883a 	mov	r3,zero
100046e4:	003f9506 	br	1000453c <__alt_data_end+0xf800453c>
100046e8:	1021883a 	mov	r16,r2
100046ec:	000b883a 	mov	r5,zero
100046f0:	0023883a 	mov	r17,zero
100046f4:	003edb06 	br	10004264 <__alt_data_end+0xf8004264>
100046f8:	01c1ffc4 	movi	r7,2047
100046fc:	11c03b26 	beq	r2,r7,100047ec <__adddf3+0x784>
10004700:	0109c83a 	sub	r4,zero,r4
10004704:	29402034 	orhi	r5,r5,128
10004708:	01c00e04 	movi	r7,56
1000470c:	39006216 	blt	r7,r4,10004898 <__adddf3+0x830>
10004710:	01c007c4 	movi	r7,31
10004714:	39006b16 	blt	r7,r4,100048c4 <__adddf3+0x85c>
10004718:	01c00804 	movi	r7,32
1000471c:	390fc83a 	sub	r7,r7,r4
10004720:	29d4983a 	sll	r10,r5,r7
10004724:	8912d83a 	srl	r9,r17,r4
10004728:	89ce983a 	sll	r7,r17,r7
1000472c:	2908d83a 	srl	r4,r5,r4
10004730:	5262b03a 	or	r17,r10,r9
10004734:	380ac03a 	cmpne	r5,r7,zero
10004738:	8962b03a 	or	r17,r17,r5
1000473c:	89a3883a 	add	r17,r17,r6
10004740:	2211883a 	add	r8,r4,r8
10004744:	898d803a 	cmpltu	r6,r17,r6
10004748:	418b883a 	add	r5,r8,r6
1000474c:	1021883a 	mov	r16,r2
10004750:	003ee706 	br	100042f0 <__alt_data_end+0xf80042f0>
10004754:	4184b03a 	or	r2,r8,r6
10004758:	103e6226 	beq	r2,zero,100040e4 <__alt_data_end+0xf80040e4>
1000475c:	8987c83a 	sub	r3,r17,r6
10004760:	88c9803a 	cmpltu	r4,r17,r3
10004764:	2a05c83a 	sub	r2,r5,r8
10004768:	1105c83a 	sub	r2,r2,r4
1000476c:	1100202c 	andhi	r4,r2,128
10004770:	203f0426 	beq	r4,zero,10004384 <__alt_data_end+0xf8004384>
10004774:	3463c83a 	sub	r17,r6,r17
10004778:	414bc83a 	sub	r5,r8,r5
1000477c:	344d803a 	cmpltu	r6,r6,r17
10004780:	298bc83a 	sub	r5,r5,r6
10004784:	3825883a 	mov	r18,r7
10004788:	003e5606 	br	100040e4 <__alt_data_end+0xf80040e4>
1000478c:	4184b03a 	or	r2,r8,r6
10004790:	10002b26 	beq	r2,zero,10004840 <__adddf3+0x7d8>
10004794:	2804d0fa 	srli	r2,r5,3
10004798:	8822d0fa 	srli	r17,r17,3
1000479c:	280a977a 	slli	r5,r5,29
100047a0:	10c0022c 	andhi	r3,r2,8
100047a4:	2c62b03a 	or	r17,r5,r17
100047a8:	18000826 	beq	r3,zero,100047cc <__adddf3+0x764>
100047ac:	4008d0fa 	srli	r4,r8,3
100047b0:	20c0022c 	andhi	r3,r4,8
100047b4:	1800051e 	bne	r3,zero,100047cc <__adddf3+0x764>
100047b8:	300cd0fa 	srli	r6,r6,3
100047bc:	4010977a 	slli	r8,r8,29
100047c0:	2005883a 	mov	r2,r4
100047c4:	3825883a 	mov	r18,r7
100047c8:	41a2b03a 	or	r17,r8,r6
100047cc:	880ad77a 	srli	r5,r17,29
100047d0:	100490fa 	slli	r2,r2,3
100047d4:	882290fa 	slli	r17,r17,3
100047d8:	0401ffc4 	movi	r16,2047
100047dc:	288ab03a 	or	r5,r5,r2
100047e0:	003e4006 	br	100040e4 <__alt_data_end+0xf80040e4>
100047e4:	01c1ffc4 	movi	r7,2047
100047e8:	11ffc71e 	bne	r2,r7,10004708 <__alt_data_end+0xf8004708>
100047ec:	400b883a 	mov	r5,r8
100047f0:	3023883a 	mov	r17,r6
100047f4:	1021883a 	mov	r16,r2
100047f8:	003e3a06 	br	100040e4 <__alt_data_end+0xf80040e4>
100047fc:	10002d26 	beq	r2,zero,100048b4 <__adddf3+0x84c>
10004800:	4184b03a 	or	r2,r8,r6
10004804:	10000e26 	beq	r2,zero,10004840 <__adddf3+0x7d8>
10004808:	2804d0fa 	srli	r2,r5,3
1000480c:	8822d0fa 	srli	r17,r17,3
10004810:	280a977a 	slli	r5,r5,29
10004814:	10c0022c 	andhi	r3,r2,8
10004818:	2c62b03a 	or	r17,r5,r17
1000481c:	183feb26 	beq	r3,zero,100047cc <__alt_data_end+0xf80047cc>
10004820:	4008d0fa 	srli	r4,r8,3
10004824:	20c0022c 	andhi	r3,r4,8
10004828:	183fe81e 	bne	r3,zero,100047cc <__alt_data_end+0xf80047cc>
1000482c:	300cd0fa 	srli	r6,r6,3
10004830:	4010977a 	slli	r8,r8,29
10004834:	2005883a 	mov	r2,r4
10004838:	41a2b03a 	or	r17,r8,r6
1000483c:	003fe306 	br	100047cc <__alt_data_end+0xf80047cc>
10004840:	0401ffc4 	movi	r16,2047
10004844:	003e2706 	br	100040e4 <__alt_data_end+0xf80040e4>
10004848:	0011883a 	mov	r8,zero
1000484c:	003f8306 	br	1000465c <__alt_data_end+0xf800465c>
10004850:	193ff804 	addi	r4,r3,-32
10004854:	02400804 	movi	r9,32
10004858:	2908d83a 	srl	r4,r5,r4
1000485c:	1a402526 	beq	r3,r9,100048f4 <__adddf3+0x88c>
10004860:	02401004 	movi	r9,64
10004864:	48c7c83a 	sub	r3,r9,r3
10004868:	28ca983a 	sll	r5,r5,r3
1000486c:	2c62b03a 	or	r17,r5,r17
10004870:	8822c03a 	cmpne	r17,r17,zero
10004874:	8922b03a 	or	r17,r17,r4
10004878:	0007883a 	mov	r3,zero
1000487c:	003f2f06 	br	1000453c <__alt_data_end+0xf800453c>
10004880:	01402034 	movhi	r5,128
10004884:	0007883a 	mov	r3,zero
10004888:	297fffc4 	addi	r5,r5,-1
1000488c:	047ffe04 	movi	r17,-8
10004890:	0401ffc4 	movi	r16,2047
10004894:	003e7306 	br	10004264 <__alt_data_end+0xf8004264>
10004898:	2c62b03a 	or	r17,r5,r17
1000489c:	8822c03a 	cmpne	r17,r17,zero
100048a0:	0009883a 	mov	r4,zero
100048a4:	003fa506 	br	1000473c <__alt_data_end+0xf800473c>
100048a8:	400b883a 	mov	r5,r8
100048ac:	3023883a 	mov	r17,r6
100048b0:	003e0c06 	br	100040e4 <__alt_data_end+0xf80040e4>
100048b4:	400b883a 	mov	r5,r8
100048b8:	3023883a 	mov	r17,r6
100048bc:	0401ffc4 	movi	r16,2047
100048c0:	003e0806 	br	100040e4 <__alt_data_end+0xf80040e4>
100048c4:	21fff804 	addi	r7,r4,-32
100048c8:	02400804 	movi	r9,32
100048cc:	29ced83a 	srl	r7,r5,r7
100048d0:	22400a26 	beq	r4,r9,100048fc <__adddf3+0x894>
100048d4:	02401004 	movi	r9,64
100048d8:	4909c83a 	sub	r4,r9,r4
100048dc:	290a983a 	sll	r5,r5,r4
100048e0:	2c62b03a 	or	r17,r5,r17
100048e4:	8822c03a 	cmpne	r17,r17,zero
100048e8:	89e2b03a 	or	r17,r17,r7
100048ec:	0009883a 	mov	r4,zero
100048f0:	003f9206 	br	1000473c <__alt_data_end+0xf800473c>
100048f4:	000b883a 	mov	r5,zero
100048f8:	003fdc06 	br	1000486c <__alt_data_end+0xf800486c>
100048fc:	000b883a 	mov	r5,zero
10004900:	003ff706 	br	100048e0 <__alt_data_end+0xf80048e0>

10004904 <__divdf3>:
10004904:	defff004 	addi	sp,sp,-64
10004908:	dc800815 	stw	r18,32(sp)
1000490c:	2824d53a 	srli	r18,r5,20
10004910:	dd800c15 	stw	r22,48(sp)
10004914:	282cd7fa 	srli	r22,r5,31
10004918:	dc000615 	stw	r16,24(sp)
1000491c:	04000434 	movhi	r16,16
10004920:	df000e15 	stw	fp,56(sp)
10004924:	dd000a15 	stw	r20,40(sp)
10004928:	dcc00915 	stw	r19,36(sp)
1000492c:	dc400715 	stw	r17,28(sp)
10004930:	843fffc4 	addi	r16,r16,-1
10004934:	dfc00f15 	stw	ra,60(sp)
10004938:	ddc00d15 	stw	r23,52(sp)
1000493c:	dd400b15 	stw	r21,44(sp)
10004940:	9481ffcc 	andi	r18,r18,2047
10004944:	2029883a 	mov	r20,r4
10004948:	2027883a 	mov	r19,r4
1000494c:	2c22703a 	and	r17,r5,r16
10004950:	b7003fcc 	andi	fp,r22,255
10004954:	90005e26 	beq	r18,zero,10004ad0 <__divdf3+0x1cc>
10004958:	0081ffc4 	movi	r2,2047
1000495c:	90803526 	beq	r18,r2,10004a34 <__divdf3+0x130>
10004960:	8c000434 	orhi	r16,r17,16
10004964:	2004d77a 	srli	r2,r4,29
10004968:	802090fa 	slli	r16,r16,3
1000496c:	202690fa 	slli	r19,r4,3
10004970:	94bf0044 	addi	r18,r18,-1023
10004974:	80a2b03a 	or	r17,r16,r2
10004978:	0029883a 	mov	r20,zero
1000497c:	0011883a 	mov	r8,zero
10004980:	380ad53a 	srli	r5,r7,20
10004984:	382ed7fa 	srli	r23,r7,31
10004988:	04000434 	movhi	r16,16
1000498c:	843fffc4 	addi	r16,r16,-1
10004990:	2941ffcc 	andi	r5,r5,2047
10004994:	302b883a 	mov	r21,r6
10004998:	3c20703a 	and	r16,r7,r16
1000499c:	ba403fcc 	andi	r9,r23,255
100049a0:	28006726 	beq	r5,zero,10004b40 <__divdf3+0x23c>
100049a4:	0081ffc4 	movi	r2,2047
100049a8:	28805f26 	beq	r5,r2,10004b28 <__divdf3+0x224>
100049ac:	84000434 	orhi	r16,r16,16
100049b0:	3004d77a 	srli	r2,r6,29
100049b4:	802090fa 	slli	r16,r16,3
100049b8:	302a90fa 	slli	r21,r6,3
100049bc:	297f0044 	addi	r5,r5,-1023
100049c0:	80a0b03a 	or	r16,r16,r2
100049c4:	000f883a 	mov	r7,zero
100049c8:	3d06b03a 	or	r3,r7,r20
100049cc:	180690ba 	slli	r3,r3,2
100049d0:	00840034 	movhi	r2,4096
100049d4:	10927d04 	addi	r2,r2,18932
100049d8:	1885883a 	add	r2,r3,r2
100049dc:	10800017 	ldw	r2,0(r2)
100049e0:	b5c8f03a 	xor	r4,r22,r23
100049e4:	200d883a 	mov	r6,r4
100049e8:	25003fcc 	andi	r20,r4,255
100049ec:	9165c83a 	sub	r18,r18,r5
100049f0:	1000683a 	jmp	r2
100049f4:	10004c3c 	xorhi	zero,r2,304
100049f8:	10004a6c 	andhi	zero,r2,297
100049fc:	10004c00 	call	110004c0 <_gp+0xfead3c>
10004a00:	10004a50 	cmplti	zero,r2,297
10004a04:	10004c00 	call	110004c0 <_gp+0xfead3c>
10004a08:	10004bd4 	ori	zero,r2,303
10004a0c:	10004c00 	call	110004c0 <_gp+0xfead3c>
10004a10:	10004a50 	cmplti	zero,r2,297
10004a14:	10004a6c 	andhi	zero,r2,297
10004a18:	10004a6c 	andhi	zero,r2,297
10004a1c:	10004bd4 	ori	zero,r2,303
10004a20:	10004a50 	cmplti	zero,r2,297
10004a24:	10004a60 	cmpeqi	zero,r2,297
10004a28:	10004a60 	cmpeqi	zero,r2,297
10004a2c:	10004a60 	cmpeqi	zero,r2,297
10004a30:	10004c10 	cmplti	zero,r2,304
10004a34:	8904b03a 	or	r2,r17,r4
10004a38:	1000631e 	bne	r2,zero,10004bc8 <__divdf3+0x2c4>
10004a3c:	05000204 	movi	r20,8
10004a40:	0023883a 	mov	r17,zero
10004a44:	0027883a 	mov	r19,zero
10004a48:	02000084 	movi	r8,2
10004a4c:	003fcc06 	br	10004980 <__alt_data_end+0xf8004980>
10004a50:	8023883a 	mov	r17,r16
10004a54:	a827883a 	mov	r19,r21
10004a58:	4839883a 	mov	fp,r9
10004a5c:	3811883a 	mov	r8,r7
10004a60:	00800084 	movi	r2,2
10004a64:	4081531e 	bne	r8,r2,10004fb4 <__divdf3+0x6b0>
10004a68:	e029883a 	mov	r20,fp
10004a6c:	a180004c 	andi	r6,r20,1
10004a70:	0201ffc4 	movi	r8,2047
10004a74:	000b883a 	mov	r5,zero
10004a78:	0027883a 	mov	r19,zero
10004a7c:	4010953a 	slli	r8,r8,20
10004a80:	30c03fcc 	andi	r3,r6,255
10004a84:	04000434 	movhi	r16,16
10004a88:	180697fa 	slli	r3,r3,31
10004a8c:	843fffc4 	addi	r16,r16,-1
10004a90:	2c20703a 	and	r16,r5,r16
10004a94:	8220b03a 	or	r16,r16,r8
10004a98:	80c6b03a 	or	r3,r16,r3
10004a9c:	9805883a 	mov	r2,r19
10004aa0:	dfc00f17 	ldw	ra,60(sp)
10004aa4:	df000e17 	ldw	fp,56(sp)
10004aa8:	ddc00d17 	ldw	r23,52(sp)
10004aac:	dd800c17 	ldw	r22,48(sp)
10004ab0:	dd400b17 	ldw	r21,44(sp)
10004ab4:	dd000a17 	ldw	r20,40(sp)
10004ab8:	dcc00917 	ldw	r19,36(sp)
10004abc:	dc800817 	ldw	r18,32(sp)
10004ac0:	dc400717 	ldw	r17,28(sp)
10004ac4:	dc000617 	ldw	r16,24(sp)
10004ac8:	dec01004 	addi	sp,sp,64
10004acc:	f800283a 	ret
10004ad0:	8904b03a 	or	r2,r17,r4
10004ad4:	10003726 	beq	r2,zero,10004bb4 <__divdf3+0x2b0>
10004ad8:	88014d26 	beq	r17,zero,10005010 <__divdf3+0x70c>
10004adc:	8809883a 	mov	r4,r17
10004ae0:	d9800215 	stw	r6,8(sp)
10004ae4:	d9c00515 	stw	r7,20(sp)
10004ae8:	00068000 	call	10006800 <__clzsi2>
10004aec:	d9800217 	ldw	r6,8(sp)
10004af0:	d9c00517 	ldw	r7,20(sp)
10004af4:	1007883a 	mov	r3,r2
10004af8:	01000a04 	movi	r4,40
10004afc:	1cfffe04 	addi	r19,r3,-8
10004b00:	20c9c83a 	sub	r4,r4,r3
10004b04:	8cca983a 	sll	r5,r17,r19
10004b08:	a108d83a 	srl	r4,r20,r4
10004b0c:	a4e6983a 	sll	r19,r20,r19
10004b10:	2162b03a 	or	r17,r4,r5
10004b14:	04bf0344 	movi	r18,-1011
10004b18:	90e5c83a 	sub	r18,r18,r3
10004b1c:	0029883a 	mov	r20,zero
10004b20:	0011883a 	mov	r8,zero
10004b24:	003f9606 	br	10004980 <__alt_data_end+0xf8004980>
10004b28:	8184b03a 	or	r2,r16,r6
10004b2c:	10001f1e 	bne	r2,zero,10004bac <__divdf3+0x2a8>
10004b30:	0021883a 	mov	r16,zero
10004b34:	002b883a 	mov	r21,zero
10004b38:	01c00084 	movi	r7,2
10004b3c:	003fa206 	br	100049c8 <__alt_data_end+0xf80049c8>
10004b40:	8184b03a 	or	r2,r16,r6
10004b44:	10001526 	beq	r2,zero,10004b9c <__divdf3+0x298>
10004b48:	80013d26 	beq	r16,zero,10005040 <__divdf3+0x73c>
10004b4c:	8009883a 	mov	r4,r16
10004b50:	d9800215 	stw	r6,8(sp)
10004b54:	da000315 	stw	r8,12(sp)
10004b58:	da400415 	stw	r9,16(sp)
10004b5c:	00068000 	call	10006800 <__clzsi2>
10004b60:	d9800217 	ldw	r6,8(sp)
10004b64:	da000317 	ldw	r8,12(sp)
10004b68:	da400417 	ldw	r9,16(sp)
10004b6c:	1007883a 	mov	r3,r2
10004b70:	01000a04 	movi	r4,40
10004b74:	1d7ffe04 	addi	r21,r3,-8
10004b78:	20c9c83a 	sub	r4,r4,r3
10004b7c:	8560983a 	sll	r16,r16,r21
10004b80:	3108d83a 	srl	r4,r6,r4
10004b84:	356a983a 	sll	r21,r6,r21
10004b88:	2420b03a 	or	r16,r4,r16
10004b8c:	017f0344 	movi	r5,-1011
10004b90:	28cbc83a 	sub	r5,r5,r3
10004b94:	000f883a 	mov	r7,zero
10004b98:	003f8b06 	br	100049c8 <__alt_data_end+0xf80049c8>
10004b9c:	0021883a 	mov	r16,zero
10004ba0:	002b883a 	mov	r21,zero
10004ba4:	01c00044 	movi	r7,1
10004ba8:	003f8706 	br	100049c8 <__alt_data_end+0xf80049c8>
10004bac:	01c000c4 	movi	r7,3
10004bb0:	003f8506 	br	100049c8 <__alt_data_end+0xf80049c8>
10004bb4:	05000104 	movi	r20,4
10004bb8:	0023883a 	mov	r17,zero
10004bbc:	0027883a 	mov	r19,zero
10004bc0:	02000044 	movi	r8,1
10004bc4:	003f6e06 	br	10004980 <__alt_data_end+0xf8004980>
10004bc8:	05000304 	movi	r20,12
10004bcc:	020000c4 	movi	r8,3
10004bd0:	003f6b06 	br	10004980 <__alt_data_end+0xf8004980>
10004bd4:	01400434 	movhi	r5,16
10004bd8:	000d883a 	mov	r6,zero
10004bdc:	297fffc4 	addi	r5,r5,-1
10004be0:	04ffffc4 	movi	r19,-1
10004be4:	0201ffc4 	movi	r8,2047
10004be8:	003fa406 	br	10004a7c <__alt_data_end+0xf8004a7c>
10004bec:	043f0084 	movi	r16,-1022
10004bf0:	84a1c83a 	sub	r16,r16,r18
10004bf4:	00800e04 	movi	r2,56
10004bf8:	14014d0e 	bge	r2,r16,10005130 <__divdf3+0x82c>
10004bfc:	a180004c 	andi	r6,r20,1
10004c00:	0011883a 	mov	r8,zero
10004c04:	000b883a 	mov	r5,zero
10004c08:	0027883a 	mov	r19,zero
10004c0c:	003f9b06 	br	10004a7c <__alt_data_end+0xf8004a7c>
10004c10:	8880022c 	andhi	r2,r17,8
10004c14:	1000f026 	beq	r2,zero,10004fd8 <__divdf3+0x6d4>
10004c18:	8080022c 	andhi	r2,r16,8
10004c1c:	1000ee1e 	bne	r2,zero,10004fd8 <__divdf3+0x6d4>
10004c20:	00800434 	movhi	r2,16
10004c24:	81400234 	orhi	r5,r16,8
10004c28:	10bfffc4 	addi	r2,r2,-1
10004c2c:	b80d883a 	mov	r6,r23
10004c30:	288a703a 	and	r5,r5,r2
10004c34:	a827883a 	mov	r19,r21
10004c38:	003fea06 	br	10004be4 <__alt_data_end+0xf8004be4>
10004c3c:	84411c36 	bltu	r16,r17,100050b0 <__divdf3+0x7ac>
10004c40:	8c011a26 	beq	r17,r16,100050ac <__divdf3+0x7a8>
10004c44:	94bfffc4 	addi	r18,r18,-1
10004c48:	dcc00015 	stw	r19,0(sp)
10004c4c:	8811883a 	mov	r8,r17
10004c50:	002d883a 	mov	r22,zero
10004c54:	a80cd63a 	srli	r6,r21,24
10004c58:	8020923a 	slli	r16,r16,8
10004c5c:	a82a923a 	slli	r21,r21,8
10004c60:	4009883a 	mov	r4,r8
10004c64:	342eb03a 	or	r23,r6,r16
10004c68:	dd400115 	stw	r21,4(sp)
10004c6c:	b82ad43a 	srli	r21,r23,16
10004c70:	da000315 	stw	r8,12(sp)
10004c74:	bcffffcc 	andi	r19,r23,65535
10004c78:	a80b883a 	mov	r5,r21
10004c7c:	00040300 	call	10004030 <__udivsi3>
10004c80:	1009883a 	mov	r4,r2
10004c84:	980b883a 	mov	r5,r19
10004c88:	1023883a 	mov	r17,r2
10004c8c:	00040400 	call	10004040 <__mulsi3>
10004c90:	da000317 	ldw	r8,12(sp)
10004c94:	a80b883a 	mov	r5,r21
10004c98:	1039883a 	mov	fp,r2
10004c9c:	4009883a 	mov	r4,r8
10004ca0:	00040380 	call	10004038 <__umodsi3>
10004ca4:	d8c00017 	ldw	r3,0(sp)
10004ca8:	1004943a 	slli	r2,r2,16
10004cac:	1810d43a 	srli	r8,r3,16
10004cb0:	120eb03a 	or	r7,r2,r8
10004cb4:	3f00062e 	bgeu	r7,fp,10004cd0 <__divdf3+0x3cc>
10004cb8:	3dcf883a 	add	r7,r7,r23
10004cbc:	88bfffc4 	addi	r2,r17,-1
10004cc0:	3dc10a36 	bltu	r7,r23,100050ec <__divdf3+0x7e8>
10004cc4:	3f01092e 	bgeu	r7,fp,100050ec <__divdf3+0x7e8>
10004cc8:	8c7fff84 	addi	r17,r17,-2
10004ccc:	3dcf883a 	add	r7,r7,r23
10004cd0:	3f39c83a 	sub	fp,r7,fp
10004cd4:	e009883a 	mov	r4,fp
10004cd8:	a80b883a 	mov	r5,r21
10004cdc:	00040300 	call	10004030 <__udivsi3>
10004ce0:	1009883a 	mov	r4,r2
10004ce4:	980b883a 	mov	r5,r19
10004ce8:	1021883a 	mov	r16,r2
10004cec:	00040400 	call	10004040 <__mulsi3>
10004cf0:	e009883a 	mov	r4,fp
10004cf4:	a80b883a 	mov	r5,r21
10004cf8:	d8800315 	stw	r2,12(sp)
10004cfc:	00040380 	call	10004038 <__umodsi3>
10004d00:	d9000017 	ldw	r4,0(sp)
10004d04:	1004943a 	slli	r2,r2,16
10004d08:	da000317 	ldw	r8,12(sp)
10004d0c:	20ffffcc 	andi	r3,r4,65535
10004d10:	10ceb03a 	or	r7,r2,r3
10004d14:	3a00062e 	bgeu	r7,r8,10004d30 <__divdf3+0x42c>
10004d18:	3dcf883a 	add	r7,r7,r23
10004d1c:	80bfffc4 	addi	r2,r16,-1
10004d20:	3dc0f036 	bltu	r7,r23,100050e4 <__divdf3+0x7e0>
10004d24:	3a00ef2e 	bgeu	r7,r8,100050e4 <__divdf3+0x7e0>
10004d28:	843fff84 	addi	r16,r16,-2
10004d2c:	3dcf883a 	add	r7,r7,r23
10004d30:	d8c00117 	ldw	r3,4(sp)
10004d34:	8822943a 	slli	r17,r17,16
10004d38:	3a0fc83a 	sub	r7,r7,r8
10004d3c:	1806d43a 	srli	r3,r3,16
10004d40:	8462b03a 	or	r17,r16,r17
10004d44:	8affffcc 	andi	r11,r17,65535
10004d48:	d8c00015 	stw	r3,0(sp)
10004d4c:	d8c00117 	ldw	r3,4(sp)
10004d50:	8820d43a 	srli	r16,r17,16
10004d54:	5809883a 	mov	r4,r11
10004d58:	1f3fffcc 	andi	fp,r3,65535
10004d5c:	e00b883a 	mov	r5,fp
10004d60:	d9c00515 	stw	r7,20(sp)
10004d64:	dac00215 	stw	r11,8(sp)
10004d68:	00040400 	call	10004040 <__mulsi3>
10004d6c:	8009883a 	mov	r4,r16
10004d70:	e00b883a 	mov	r5,fp
10004d74:	d8800415 	stw	r2,16(sp)
10004d78:	00040400 	call	10004040 <__mulsi3>
10004d7c:	d9400017 	ldw	r5,0(sp)
10004d80:	8009883a 	mov	r4,r16
10004d84:	d8800315 	stw	r2,12(sp)
10004d88:	00040400 	call	10004040 <__mulsi3>
10004d8c:	dac00217 	ldw	r11,8(sp)
10004d90:	d9400017 	ldw	r5,0(sp)
10004d94:	d8800215 	stw	r2,8(sp)
10004d98:	5809883a 	mov	r4,r11
10004d9c:	00040400 	call	10004040 <__mulsi3>
10004da0:	da400417 	ldw	r9,16(sp)
10004da4:	da800317 	ldw	r10,12(sp)
10004da8:	d9c00517 	ldw	r7,20(sp)
10004dac:	480ad43a 	srli	r5,r9,16
10004db0:	5085883a 	add	r2,r10,r2
10004db4:	db000217 	ldw	r12,8(sp)
10004db8:	1151883a 	add	r8,r2,r5
10004dbc:	4280022e 	bgeu	r8,r10,10004dc8 <__divdf3+0x4c4>
10004dc0:	00800074 	movhi	r2,1
10004dc4:	6099883a 	add	r12,r12,r2
10004dc8:	400ad43a 	srli	r5,r8,16
10004dcc:	4010943a 	slli	r8,r8,16
10004dd0:	4c3fffcc 	andi	r16,r9,65535
10004dd4:	6149883a 	add	r4,r12,r5
10004dd8:	4411883a 	add	r8,r8,r16
10004ddc:	3900a736 	bltu	r7,r4,1000507c <__divdf3+0x778>
10004de0:	3900c426 	beq	r7,r4,100050f4 <__divdf3+0x7f0>
10004de4:	3909c83a 	sub	r4,r7,r4
10004de8:	b221c83a 	sub	r16,r22,r8
10004dec:	b42d803a 	cmpltu	r22,r22,r16
10004df0:	25adc83a 	sub	r22,r4,r22
10004df4:	b5c0c626 	beq	r22,r23,10005110 <__divdf3+0x80c>
10004df8:	b009883a 	mov	r4,r22
10004dfc:	a80b883a 	mov	r5,r21
10004e00:	00040300 	call	10004030 <__udivsi3>
10004e04:	1009883a 	mov	r4,r2
10004e08:	980b883a 	mov	r5,r19
10004e0c:	d8800315 	stw	r2,12(sp)
10004e10:	00040400 	call	10004040 <__mulsi3>
10004e14:	a80b883a 	mov	r5,r21
10004e18:	b009883a 	mov	r4,r22
10004e1c:	d8800415 	stw	r2,16(sp)
10004e20:	00040380 	call	10004038 <__umodsi3>
10004e24:	1004943a 	slli	r2,r2,16
10004e28:	800ed43a 	srli	r7,r16,16
10004e2c:	da400417 	ldw	r9,16(sp)
10004e30:	da000317 	ldw	r8,12(sp)
10004e34:	11cab03a 	or	r5,r2,r7
10004e38:	2a40062e 	bgeu	r5,r9,10004e54 <__divdf3+0x550>
10004e3c:	2dcb883a 	add	r5,r5,r23
10004e40:	40bfffc4 	addi	r2,r8,-1
10004e44:	2dc0b436 	bltu	r5,r23,10005118 <__divdf3+0x814>
10004e48:	2a40b32e 	bgeu	r5,r9,10005118 <__divdf3+0x814>
10004e4c:	423fff84 	addi	r8,r8,-2
10004e50:	2dcb883a 	add	r5,r5,r23
10004e54:	2a6dc83a 	sub	r22,r5,r9
10004e58:	b009883a 	mov	r4,r22
10004e5c:	a80b883a 	mov	r5,r21
10004e60:	da000315 	stw	r8,12(sp)
10004e64:	00040300 	call	10004030 <__udivsi3>
10004e68:	980b883a 	mov	r5,r19
10004e6c:	1009883a 	mov	r4,r2
10004e70:	d8800415 	stw	r2,16(sp)
10004e74:	00040400 	call	10004040 <__mulsi3>
10004e78:	b009883a 	mov	r4,r22
10004e7c:	a80b883a 	mov	r5,r21
10004e80:	1027883a 	mov	r19,r2
10004e84:	00040380 	call	10004038 <__umodsi3>
10004e88:	1004943a 	slli	r2,r2,16
10004e8c:	843fffcc 	andi	r16,r16,65535
10004e90:	da000317 	ldw	r8,12(sp)
10004e94:	140eb03a 	or	r7,r2,r16
10004e98:	da400417 	ldw	r9,16(sp)
10004e9c:	3cc0062e 	bgeu	r7,r19,10004eb8 <__divdf3+0x5b4>
10004ea0:	3dcf883a 	add	r7,r7,r23
10004ea4:	48bfffc4 	addi	r2,r9,-1
10004ea8:	3dc09d36 	bltu	r7,r23,10005120 <__divdf3+0x81c>
10004eac:	3cc09c2e 	bgeu	r7,r19,10005120 <__divdf3+0x81c>
10004eb0:	4a7fff84 	addi	r9,r9,-2
10004eb4:	3dcf883a 	add	r7,r7,r23
10004eb8:	4010943a 	slli	r8,r8,16
10004ebc:	3cebc83a 	sub	r21,r7,r19
10004ec0:	e00b883a 	mov	r5,fp
10004ec4:	4a26b03a 	or	r19,r9,r8
10004ec8:	99ffffcc 	andi	r7,r19,65535
10004ecc:	9820d43a 	srli	r16,r19,16
10004ed0:	3809883a 	mov	r4,r7
10004ed4:	d9c00515 	stw	r7,20(sp)
10004ed8:	00040400 	call	10004040 <__mulsi3>
10004edc:	8009883a 	mov	r4,r16
10004ee0:	e00b883a 	mov	r5,fp
10004ee4:	102d883a 	mov	r22,r2
10004ee8:	00040400 	call	10004040 <__mulsi3>
10004eec:	d9400017 	ldw	r5,0(sp)
10004ef0:	8009883a 	mov	r4,r16
10004ef4:	1039883a 	mov	fp,r2
10004ef8:	00040400 	call	10004040 <__mulsi3>
10004efc:	d9c00517 	ldw	r7,20(sp)
10004f00:	d9400017 	ldw	r5,0(sp)
10004f04:	1021883a 	mov	r16,r2
10004f08:	3809883a 	mov	r4,r7
10004f0c:	00040400 	call	10004040 <__mulsi3>
10004f10:	b008d43a 	srli	r4,r22,16
10004f14:	e085883a 	add	r2,fp,r2
10004f18:	1109883a 	add	r4,r2,r4
10004f1c:	2700022e 	bgeu	r4,fp,10004f28 <__divdf3+0x624>
10004f20:	00800074 	movhi	r2,1
10004f24:	80a1883a 	add	r16,r16,r2
10004f28:	200ad43a 	srli	r5,r4,16
10004f2c:	2008943a 	slli	r4,r4,16
10004f30:	b5bfffcc 	andi	r22,r22,65535
10004f34:	8145883a 	add	r2,r16,r5
10004f38:	2589883a 	add	r4,r4,r22
10004f3c:	a8802c36 	bltu	r21,r2,10004ff0 <__divdf3+0x6ec>
10004f40:	a880a426 	beq	r21,r2,100051d4 <__divdf3+0x8d0>
10004f44:	9cc00054 	ori	r19,r19,1
10004f48:	9200ffc4 	addi	r8,r18,1023
10004f4c:	023f270e 	bge	zero,r8,10004bec <__alt_data_end+0xf8004bec>
10004f50:	988001cc 	andi	r2,r19,7
10004f54:	10000726 	beq	r2,zero,10004f74 <__divdf3+0x670>
10004f58:	990003cc 	andi	r4,r19,15
10004f5c:	00800104 	movi	r2,4
10004f60:	20800426 	beq	r4,r2,10004f74 <__divdf3+0x670>
10004f64:	9885883a 	add	r2,r19,r2
10004f68:	14e7803a 	cmpltu	r19,r2,r19
10004f6c:	8ce3883a 	add	r17,r17,r19
10004f70:	1027883a 	mov	r19,r2
10004f74:	8880402c 	andhi	r2,r17,256
10004f78:	10000426 	beq	r2,zero,10004f8c <__divdf3+0x688>
10004f7c:	00bfc034 	movhi	r2,65280
10004f80:	10bfffc4 	addi	r2,r2,-1
10004f84:	92010004 	addi	r8,r18,1024
10004f88:	88a2703a 	and	r17,r17,r2
10004f8c:	0081ff84 	movi	r2,2046
10004f90:	123eb616 	blt	r2,r8,10004a6c <__alt_data_end+0xf8004a6c>
10004f94:	9826d0fa 	srli	r19,r19,3
10004f98:	8804977a 	slli	r2,r17,29
10004f9c:	8820927a 	slli	r16,r17,9
10004fa0:	4201ffcc 	andi	r8,r8,2047
10004fa4:	14e6b03a 	or	r19,r2,r19
10004fa8:	800ad33a 	srli	r5,r16,12
10004fac:	a180004c 	andi	r6,r20,1
10004fb0:	003eb206 	br	10004a7c <__alt_data_end+0xf8004a7c>
10004fb4:	008000c4 	movi	r2,3
10004fb8:	4080ac26 	beq	r8,r2,1000526c <__divdf3+0x968>
10004fbc:	00800044 	movi	r2,1
10004fc0:	4080591e 	bne	r8,r2,10005128 <__divdf3+0x824>
10004fc4:	e00d883a 	mov	r6,fp
10004fc8:	0011883a 	mov	r8,zero
10004fcc:	000b883a 	mov	r5,zero
10004fd0:	0027883a 	mov	r19,zero
10004fd4:	003ea906 	br	10004a7c <__alt_data_end+0xf8004a7c>
10004fd8:	00800434 	movhi	r2,16
10004fdc:	89400234 	orhi	r5,r17,8
10004fe0:	10bfffc4 	addi	r2,r2,-1
10004fe4:	b00d883a 	mov	r6,r22
10004fe8:	288a703a 	and	r5,r5,r2
10004fec:	003efd06 	br	10004be4 <__alt_data_end+0xf8004be4>
10004ff0:	adcf883a 	add	r7,r21,r23
10004ff4:	997fffc4 	addi	r5,r19,-1
10004ff8:	3dc0412e 	bgeu	r7,r23,10005100 <__divdf3+0x7fc>
10004ffc:	2827883a 	mov	r19,r5
10005000:	38bfd01e 	bne	r7,r2,10004f44 <__alt_data_end+0xf8004f44>
10005004:	d8c00117 	ldw	r3,4(sp)
10005008:	193fce1e 	bne	r3,r4,10004f44 <__alt_data_end+0xf8004f44>
1000500c:	003fce06 	br	10004f48 <__alt_data_end+0xf8004f48>
10005010:	d9800215 	stw	r6,8(sp)
10005014:	d9c00515 	stw	r7,20(sp)
10005018:	00068000 	call	10006800 <__clzsi2>
1000501c:	10c00804 	addi	r3,r2,32
10005020:	010009c4 	movi	r4,39
10005024:	d9800217 	ldw	r6,8(sp)
10005028:	d9c00517 	ldw	r7,20(sp)
1000502c:	20feb20e 	bge	r4,r3,10004af8 <__alt_data_end+0xf8004af8>
10005030:	117ffe04 	addi	r5,r2,-8
10005034:	a162983a 	sll	r17,r20,r5
10005038:	0027883a 	mov	r19,zero
1000503c:	003eb506 	br	10004b14 <__alt_data_end+0xf8004b14>
10005040:	3009883a 	mov	r4,r6
10005044:	d9800215 	stw	r6,8(sp)
10005048:	da000315 	stw	r8,12(sp)
1000504c:	da400415 	stw	r9,16(sp)
10005050:	00068000 	call	10006800 <__clzsi2>
10005054:	10c00804 	addi	r3,r2,32
10005058:	010009c4 	movi	r4,39
1000505c:	d9800217 	ldw	r6,8(sp)
10005060:	da000317 	ldw	r8,12(sp)
10005064:	da400417 	ldw	r9,16(sp)
10005068:	20fec10e 	bge	r4,r3,10004b70 <__alt_data_end+0xf8004b70>
1000506c:	10bffe04 	addi	r2,r2,-8
10005070:	a8a0983a 	sll	r16,r21,r2
10005074:	002b883a 	mov	r21,zero
10005078:	003ec406 	br	10004b8c <__alt_data_end+0xf8004b8c>
1000507c:	d8c00117 	ldw	r3,4(sp)
10005080:	b0ed883a 	add	r22,r22,r3
10005084:	b0c5803a 	cmpltu	r2,r22,r3
10005088:	15c5883a 	add	r2,r2,r23
1000508c:	11cf883a 	add	r7,r2,r7
10005090:	88bfffc4 	addi	r2,r17,-1
10005094:	b9c00d2e 	bgeu	r23,r7,100050cc <__divdf3+0x7c8>
10005098:	39003f36 	bltu	r7,r4,10005198 <__divdf3+0x894>
1000509c:	21c06a26 	beq	r4,r7,10005248 <__divdf3+0x944>
100050a0:	3909c83a 	sub	r4,r7,r4
100050a4:	1023883a 	mov	r17,r2
100050a8:	003f4f06 	br	10004de8 <__alt_data_end+0xf8004de8>
100050ac:	9d7ee536 	bltu	r19,r21,10004c44 <__alt_data_end+0xf8004c44>
100050b0:	982ed07a 	srli	r23,r19,1
100050b4:	880497fa 	slli	r2,r17,31
100050b8:	8810d07a 	srli	r8,r17,1
100050bc:	982c97fa 	slli	r22,r19,31
100050c0:	b884b03a 	or	r2,r23,r2
100050c4:	d8800015 	stw	r2,0(sp)
100050c8:	003ee206 	br	10004c54 <__alt_data_end+0xf8004c54>
100050cc:	3dfff41e 	bne	r7,r23,100050a0 <__alt_data_end+0xf80050a0>
100050d0:	d8c00117 	ldw	r3,4(sp)
100050d4:	b0fff02e 	bgeu	r22,r3,10005098 <__alt_data_end+0xf8005098>
100050d8:	b909c83a 	sub	r4,r23,r4
100050dc:	1023883a 	mov	r17,r2
100050e0:	003f4106 	br	10004de8 <__alt_data_end+0xf8004de8>
100050e4:	1021883a 	mov	r16,r2
100050e8:	003f1106 	br	10004d30 <__alt_data_end+0xf8004d30>
100050ec:	1023883a 	mov	r17,r2
100050f0:	003ef706 	br	10004cd0 <__alt_data_end+0xf8004cd0>
100050f4:	b23fe136 	bltu	r22,r8,1000507c <__alt_data_end+0xf800507c>
100050f8:	0009883a 	mov	r4,zero
100050fc:	003f3a06 	br	10004de8 <__alt_data_end+0xf8004de8>
10005100:	38802c36 	bltu	r7,r2,100051b4 <__divdf3+0x8b0>
10005104:	11c05326 	beq	r2,r7,10005254 <__divdf3+0x950>
10005108:	2827883a 	mov	r19,r5
1000510c:	003f8d06 	br	10004f44 <__alt_data_end+0xf8004f44>
10005110:	04ffffc4 	movi	r19,-1
10005114:	003f8c06 	br	10004f48 <__alt_data_end+0xf8004f48>
10005118:	1011883a 	mov	r8,r2
1000511c:	003f4d06 	br	10004e54 <__alt_data_end+0xf8004e54>
10005120:	1013883a 	mov	r9,r2
10005124:	003f6406 	br	10004eb8 <__alt_data_end+0xf8004eb8>
10005128:	e029883a 	mov	r20,fp
1000512c:	003f8606 	br	10004f48 <__alt_data_end+0xf8004f48>
10005130:	008007c4 	movi	r2,31
10005134:	14002a16 	blt	r2,r16,100051e0 <__divdf3+0x8dc>
10005138:	91410784 	addi	r5,r18,1054
1000513c:	9c0cd83a 	srl	r6,r19,r16
10005140:	8948983a 	sll	r4,r17,r5
10005144:	9944983a 	sll	r2,r19,r5
10005148:	8c20d83a 	srl	r16,r17,r16
1000514c:	3108b03a 	or	r4,r6,r4
10005150:	1004c03a 	cmpne	r2,r2,zero
10005154:	2084b03a 	or	r2,r4,r2
10005158:	110001cc 	andi	r4,r2,7
1000515c:	20000726 	beq	r4,zero,1000517c <__divdf3+0x878>
10005160:	114003cc 	andi	r5,r2,15
10005164:	01000104 	movi	r4,4
10005168:	29000426 	beq	r5,r4,1000517c <__divdf3+0x878>
1000516c:	11000104 	addi	r4,r2,4
10005170:	2085803a 	cmpltu	r2,r4,r2
10005174:	80a1883a 	add	r16,r16,r2
10005178:	2005883a 	mov	r2,r4
1000517c:	8100202c 	andhi	r4,r16,128
10005180:	20002d26 	beq	r4,zero,10005238 <__divdf3+0x934>
10005184:	a180004c 	andi	r6,r20,1
10005188:	02000044 	movi	r8,1
1000518c:	000b883a 	mov	r5,zero
10005190:	0027883a 	mov	r19,zero
10005194:	003e3906 	br	10004a7c <__alt_data_end+0xf8004a7c>
10005198:	d8c00117 	ldw	r3,4(sp)
1000519c:	8c7fff84 	addi	r17,r17,-2
100051a0:	b0ed883a 	add	r22,r22,r3
100051a4:	b0c5803a 	cmpltu	r2,r22,r3
100051a8:	15c5883a 	add	r2,r2,r23
100051ac:	11cf883a 	add	r7,r2,r7
100051b0:	003f0c06 	br	10004de4 <__alt_data_end+0xf8004de4>
100051b4:	d8c00117 	ldw	r3,4(sp)
100051b8:	997fff84 	addi	r5,r19,-2
100051bc:	18d1883a 	add	r8,r3,r3
100051c0:	40c7803a 	cmpltu	r3,r8,r3
100051c4:	1dcd883a 	add	r6,r3,r23
100051c8:	398f883a 	add	r7,r7,r6
100051cc:	da000115 	stw	r8,4(sp)
100051d0:	003f8a06 	br	10004ffc <__alt_data_end+0xf8004ffc>
100051d4:	203f861e 	bne	r4,zero,10004ff0 <__alt_data_end+0xf8004ff0>
100051d8:	d8000115 	stw	zero,4(sp)
100051dc:	003f8906 	br	10005004 <__alt_data_end+0xf8005004>
100051e0:	00bef884 	movi	r2,-1054
100051e4:	1485c83a 	sub	r2,r2,r18
100051e8:	01000804 	movi	r4,32
100051ec:	8884d83a 	srl	r2,r17,r2
100051f0:	81001c26 	beq	r16,r4,10005264 <__divdf3+0x960>
100051f4:	91010f84 	addi	r4,r18,1086
100051f8:	8908983a 	sll	r4,r17,r4
100051fc:	24c8b03a 	or	r4,r4,r19
10005200:	2008c03a 	cmpne	r4,r4,zero
10005204:	2084b03a 	or	r2,r4,r2
10005208:	140001cc 	andi	r16,r2,7
1000520c:	8000061e 	bne	r16,zero,10005228 <__divdf3+0x924>
10005210:	000b883a 	mov	r5,zero
10005214:	1004d0fa 	srli	r2,r2,3
10005218:	a180004c 	andi	r6,r20,1
1000521c:	0011883a 	mov	r8,zero
10005220:	1426b03a 	or	r19,r2,r16
10005224:	003e1506 	br	10004a7c <__alt_data_end+0xf8004a7c>
10005228:	114003cc 	andi	r5,r2,15
1000522c:	01000104 	movi	r4,4
10005230:	0021883a 	mov	r16,zero
10005234:	293fcd1e 	bne	r5,r4,1000516c <__alt_data_end+0xf800516c>
10005238:	800a927a 	slli	r5,r16,9
1000523c:	8020977a 	slli	r16,r16,29
10005240:	280ad33a 	srli	r5,r5,12
10005244:	003ff306 	br	10005214 <__alt_data_end+0xf8005214>
10005248:	b23fd336 	bltu	r22,r8,10005198 <__alt_data_end+0xf8005198>
1000524c:	1023883a 	mov	r17,r2
10005250:	003fa906 	br	100050f8 <__alt_data_end+0xf80050f8>
10005254:	d8c00117 	ldw	r3,4(sp)
10005258:	193fd636 	bltu	r3,r4,100051b4 <__alt_data_end+0xf80051b4>
1000525c:	2827883a 	mov	r19,r5
10005260:	003f6806 	br	10005004 <__alt_data_end+0xf8005004>
10005264:	0009883a 	mov	r4,zero
10005268:	003fe406 	br	100051fc <__alt_data_end+0xf80051fc>
1000526c:	00800434 	movhi	r2,16
10005270:	89400234 	orhi	r5,r17,8
10005274:	10bfffc4 	addi	r2,r2,-1
10005278:	e00d883a 	mov	r6,fp
1000527c:	288a703a 	and	r5,r5,r2
10005280:	003e5806 	br	10004be4 <__alt_data_end+0xf8004be4>

10005284 <__eqdf2>:
10005284:	2804d53a 	srli	r2,r5,20
10005288:	3806d53a 	srli	r3,r7,20
1000528c:	02000434 	movhi	r8,16
10005290:	423fffc4 	addi	r8,r8,-1
10005294:	1081ffcc 	andi	r2,r2,2047
10005298:	0241ffc4 	movi	r9,2047
1000529c:	2a14703a 	and	r10,r5,r8
100052a0:	18c1ffcc 	andi	r3,r3,2047
100052a4:	3a10703a 	and	r8,r7,r8
100052a8:	280ad7fa 	srli	r5,r5,31
100052ac:	380ed7fa 	srli	r7,r7,31
100052b0:	12400f26 	beq	r2,r9,100052f0 <__eqdf2+0x6c>
100052b4:	0241ffc4 	movi	r9,2047
100052b8:	1a400326 	beq	r3,r9,100052c8 <__eqdf2+0x44>
100052bc:	10c00526 	beq	r2,r3,100052d4 <__eqdf2+0x50>
100052c0:	00800044 	movi	r2,1
100052c4:	f800283a 	ret
100052c8:	4192b03a 	or	r9,r8,r6
100052cc:	483ffc1e 	bne	r9,zero,100052c0 <__alt_data_end+0xf80052c0>
100052d0:	10fffb1e 	bne	r2,r3,100052c0 <__alt_data_end+0xf80052c0>
100052d4:	523ffa1e 	bne	r10,r8,100052c0 <__alt_data_end+0xf80052c0>
100052d8:	21bff91e 	bne	r4,r6,100052c0 <__alt_data_end+0xf80052c0>
100052dc:	29c00826 	beq	r5,r7,10005300 <__eqdf2+0x7c>
100052e0:	103ff71e 	bne	r2,zero,100052c0 <__alt_data_end+0xf80052c0>
100052e4:	5104b03a 	or	r2,r10,r4
100052e8:	1004c03a 	cmpne	r2,r2,zero
100052ec:	f800283a 	ret
100052f0:	5112b03a 	or	r9,r10,r4
100052f4:	483fef26 	beq	r9,zero,100052b4 <__alt_data_end+0xf80052b4>
100052f8:	00800044 	movi	r2,1
100052fc:	f800283a 	ret
10005300:	0005883a 	mov	r2,zero
10005304:	f800283a 	ret

10005308 <__gedf2>:
10005308:	2804d53a 	srli	r2,r5,20
1000530c:	3806d53a 	srli	r3,r7,20
10005310:	02000434 	movhi	r8,16
10005314:	423fffc4 	addi	r8,r8,-1
10005318:	0241ffc4 	movi	r9,2047
1000531c:	1081ffcc 	andi	r2,r2,2047
10005320:	2a14703a 	and	r10,r5,r8
10005324:	1a46703a 	and	r3,r3,r9
10005328:	3a10703a 	and	r8,r7,r8
1000532c:	280ad7fa 	srli	r5,r5,31
10005330:	380ed7fa 	srli	r7,r7,31
10005334:	12400b26 	beq	r2,r9,10005364 <__gedf2+0x5c>
10005338:	1a401626 	beq	r3,r9,10005394 <__gedf2+0x8c>
1000533c:	10000c1e 	bne	r2,zero,10005370 <__gedf2+0x68>
10005340:	5112b03a 	or	r9,r10,r4
10005344:	4813003a 	cmpeq	r9,r9,zero
10005348:	4817883a 	mov	r11,r9
1000534c:	18000c1e 	bne	r3,zero,10005380 <__gedf2+0x78>
10005350:	4198b03a 	or	r12,r8,r6
10005354:	60000a1e 	bne	r12,zero,10005380 <__gedf2+0x78>
10005358:	48001326 	beq	r9,zero,100053a8 <__gedf2+0xa0>
1000535c:	0005883a 	mov	r2,zero
10005360:	f800283a 	ret
10005364:	5112b03a 	or	r9,r10,r4
10005368:	4800191e 	bne	r9,zero,100053d0 <__gedf2+0xc8>
1000536c:	18800926 	beq	r3,r2,10005394 <__gedf2+0x8c>
10005370:	18000b1e 	bne	r3,zero,100053a0 <__gedf2+0x98>
10005374:	4192b03a 	or	r9,r8,r6
10005378:	0017883a 	mov	r11,zero
1000537c:	48000a26 	beq	r9,zero,100053a8 <__gedf2+0xa0>
10005380:	39c03fcc 	andi	r7,r7,255
10005384:	58000726 	beq	r11,zero,100053a4 <__gedf2+0x9c>
10005388:	3800081e 	bne	r7,zero,100053ac <__gedf2+0xa4>
1000538c:	00bfffc4 	movi	r2,-1
10005390:	f800283a 	ret
10005394:	4192b03a 	or	r9,r8,r6
10005398:	48000d1e 	bne	r9,zero,100053d0 <__gedf2+0xc8>
1000539c:	103fe826 	beq	r2,zero,10005340 <__alt_data_end+0xf8005340>
100053a0:	39c03fcc 	andi	r7,r7,255
100053a4:	29c00326 	beq	r5,r7,100053b4 <__gedf2+0xac>
100053a8:	283ff81e 	bne	r5,zero,1000538c <__alt_data_end+0xf800538c>
100053ac:	00800044 	movi	r2,1
100053b0:	f800283a 	ret
100053b4:	18bffc16 	blt	r3,r2,100053a8 <__alt_data_end+0xf80053a8>
100053b8:	10c00316 	blt	r2,r3,100053c8 <__gedf2+0xc0>
100053bc:	42bffa36 	bltu	r8,r10,100053a8 <__alt_data_end+0xf80053a8>
100053c0:	52000526 	beq	r10,r8,100053d8 <__gedf2+0xd0>
100053c4:	523fe52e 	bgeu	r10,r8,1000535c <__alt_data_end+0xf800535c>
100053c8:	283ff026 	beq	r5,zero,1000538c <__alt_data_end+0xf800538c>
100053cc:	003ff706 	br	100053ac <__alt_data_end+0xf80053ac>
100053d0:	00bfff84 	movi	r2,-2
100053d4:	f800283a 	ret
100053d8:	313ff336 	bltu	r6,r4,100053a8 <__alt_data_end+0xf80053a8>
100053dc:	21bfdf2e 	bgeu	r4,r6,1000535c <__alt_data_end+0xf800535c>
100053e0:	283fea26 	beq	r5,zero,1000538c <__alt_data_end+0xf800538c>
100053e4:	003ff106 	br	100053ac <__alt_data_end+0xf80053ac>

100053e8 <__ledf2>:
100053e8:	2804d53a 	srli	r2,r5,20
100053ec:	3810d53a 	srli	r8,r7,20
100053f0:	00c00434 	movhi	r3,16
100053f4:	18ffffc4 	addi	r3,r3,-1
100053f8:	0241ffc4 	movi	r9,2047
100053fc:	1081ffcc 	andi	r2,r2,2047
10005400:	28d4703a 	and	r10,r5,r3
10005404:	4250703a 	and	r8,r8,r9
10005408:	38c6703a 	and	r3,r7,r3
1000540c:	280ad7fa 	srli	r5,r5,31
10005410:	380ed7fa 	srli	r7,r7,31
10005414:	12400b26 	beq	r2,r9,10005444 <__ledf2+0x5c>
10005418:	42401926 	beq	r8,r9,10005480 <__ledf2+0x98>
1000541c:	10000c1e 	bne	r2,zero,10005450 <__ledf2+0x68>
10005420:	5112b03a 	or	r9,r10,r4
10005424:	4813003a 	cmpeq	r9,r9,zero
10005428:	4817883a 	mov	r11,r9
1000542c:	40000f26 	beq	r8,zero,1000546c <__ledf2+0x84>
10005430:	39c03fcc 	andi	r7,r7,255
10005434:	58001826 	beq	r11,zero,10005498 <__ledf2+0xb0>
10005438:	38000a1e 	bne	r7,zero,10005464 <__ledf2+0x7c>
1000543c:	00bfffc4 	movi	r2,-1
10005440:	f800283a 	ret
10005444:	5112b03a 	or	r9,r10,r4
10005448:	48000f1e 	bne	r9,zero,10005488 <__ledf2+0xa0>
1000544c:	40800c26 	beq	r8,r2,10005480 <__ledf2+0x98>
10005450:	4000101e 	bne	r8,zero,10005494 <__ledf2+0xac>
10005454:	1992b03a 	or	r9,r3,r6
10005458:	0017883a 	mov	r11,zero
1000545c:	483ff41e 	bne	r9,zero,10005430 <__alt_data_end+0xf8005430>
10005460:	283ff61e 	bne	r5,zero,1000543c <__alt_data_end+0xf800543c>
10005464:	00800044 	movi	r2,1
10005468:	f800283a 	ret
1000546c:	1998b03a 	or	r12,r3,r6
10005470:	603fef1e 	bne	r12,zero,10005430 <__alt_data_end+0xf8005430>
10005474:	483ffa26 	beq	r9,zero,10005460 <__alt_data_end+0xf8005460>
10005478:	0005883a 	mov	r2,zero
1000547c:	f800283a 	ret
10005480:	1992b03a 	or	r9,r3,r6
10005484:	48000226 	beq	r9,zero,10005490 <__ledf2+0xa8>
10005488:	00800084 	movi	r2,2
1000548c:	f800283a 	ret
10005490:	103fe326 	beq	r2,zero,10005420 <__alt_data_end+0xf8005420>
10005494:	39c03fcc 	andi	r7,r7,255
10005498:	29fff11e 	bne	r5,r7,10005460 <__alt_data_end+0xf8005460>
1000549c:	40bff016 	blt	r8,r2,10005460 <__alt_data_end+0xf8005460>
100054a0:	12000316 	blt	r2,r8,100054b0 <__ledf2+0xc8>
100054a4:	1abfee36 	bltu	r3,r10,10005460 <__alt_data_end+0xf8005460>
100054a8:	50c00326 	beq	r10,r3,100054b8 <__ledf2+0xd0>
100054ac:	50fff22e 	bgeu	r10,r3,10005478 <__alt_data_end+0xf8005478>
100054b0:	283fe226 	beq	r5,zero,1000543c <__alt_data_end+0xf800543c>
100054b4:	003feb06 	br	10005464 <__alt_data_end+0xf8005464>
100054b8:	313fe936 	bltu	r6,r4,10005460 <__alt_data_end+0xf8005460>
100054bc:	21bfee2e 	bgeu	r4,r6,10005478 <__alt_data_end+0xf8005478>
100054c0:	283fde26 	beq	r5,zero,1000543c <__alt_data_end+0xf800543c>
100054c4:	003fe706 	br	10005464 <__alt_data_end+0xf8005464>

100054c8 <__muldf3>:
100054c8:	deffee04 	addi	sp,sp,-72
100054cc:	dd000c15 	stw	r20,48(sp)
100054d0:	2828d53a 	srli	r20,r5,20
100054d4:	dd400d15 	stw	r21,52(sp)
100054d8:	282ad7fa 	srli	r21,r5,31
100054dc:	dc000815 	stw	r16,32(sp)
100054e0:	04000434 	movhi	r16,16
100054e4:	ddc00f15 	stw	r23,60(sp)
100054e8:	dcc00b15 	stw	r19,44(sp)
100054ec:	dc800a15 	stw	r18,40(sp)
100054f0:	843fffc4 	addi	r16,r16,-1
100054f4:	dfc01115 	stw	ra,68(sp)
100054f8:	df001015 	stw	fp,64(sp)
100054fc:	dd800e15 	stw	r22,56(sp)
10005500:	dc400915 	stw	r17,36(sp)
10005504:	a501ffcc 	andi	r20,r20,2047
10005508:	2025883a 	mov	r18,r4
1000550c:	202f883a 	mov	r23,r4
10005510:	2c20703a 	and	r16,r5,r16
10005514:	a827883a 	mov	r19,r21
10005518:	aa403fcc 	andi	r9,r21,255
1000551c:	a0005926 	beq	r20,zero,10005684 <__muldf3+0x1bc>
10005520:	0081ffc4 	movi	r2,2047
10005524:	a0803426 	beq	r20,r2,100055f8 <__muldf3+0x130>
10005528:	84000434 	orhi	r16,r16,16
1000552c:	2004d77a 	srli	r2,r4,29
10005530:	802090fa 	slli	r16,r16,3
10005534:	202e90fa 	slli	r23,r4,3
10005538:	a53f0044 	addi	r20,r20,-1023
1000553c:	80a0b03a 	or	r16,r16,r2
10005540:	000b883a 	mov	r5,zero
10005544:	0039883a 	mov	fp,zero
10005548:	3806d53a 	srli	r3,r7,20
1000554c:	382cd7fa 	srli	r22,r7,31
10005550:	00800434 	movhi	r2,16
10005554:	10bfffc4 	addi	r2,r2,-1
10005558:	18c1ffcc 	andi	r3,r3,2047
1000555c:	3025883a 	mov	r18,r6
10005560:	38a2703a 	and	r17,r7,r2
10005564:	b2803fcc 	andi	r10,r22,255
10005568:	18006426 	beq	r3,zero,100056fc <__muldf3+0x234>
1000556c:	0081ffc4 	movi	r2,2047
10005570:	18805c26 	beq	r3,r2,100056e4 <__muldf3+0x21c>
10005574:	8c400434 	orhi	r17,r17,16
10005578:	3004d77a 	srli	r2,r6,29
1000557c:	882290fa 	slli	r17,r17,3
10005580:	302490fa 	slli	r18,r6,3
10005584:	18ff0044 	addi	r3,r3,-1023
10005588:	88a2b03a 	or	r17,r17,r2
1000558c:	000f883a 	mov	r7,zero
10005590:	394ab03a 	or	r5,r7,r5
10005594:	280a90ba 	slli	r5,r5,2
10005598:	00840034 	movhi	r2,4096
1000559c:	10956e04 	addi	r2,r2,21944
100055a0:	288b883a 	add	r5,r5,r2
100055a4:	28800017 	ldw	r2,0(r5)
100055a8:	a0c7883a 	add	r3,r20,r3
100055ac:	b54cf03a 	xor	r6,r22,r21
100055b0:	1a000044 	addi	r8,r3,1
100055b4:	1000683a 	jmp	r2
100055b8:	100057fc 	xorhi	zero,r2,351
100055bc:	100057e8 	cmpgeui	zero,r2,351
100055c0:	100057e8 	cmpgeui	zero,r2,351
100055c4:	100057d4 	ori	zero,r2,351
100055c8:	10005614 	ori	zero,r2,344
100055cc:	10005614 	ori	zero,r2,344
100055d0:	100057bc 	xorhi	zero,r2,350
100055d4:	100057d4 	ori	zero,r2,351
100055d8:	10005614 	ori	zero,r2,344
100055dc:	100057bc 	xorhi	zero,r2,350
100055e0:	10005614 	ori	zero,r2,344
100055e4:	100057d4 	ori	zero,r2,351
100055e8:	10005618 	cmpnei	zero,r2,344
100055ec:	10005618 	cmpnei	zero,r2,344
100055f0:	10005618 	cmpnei	zero,r2,344
100055f4:	10005b38 	rdprs	zero,r2,364
100055f8:	8104b03a 	or	r2,r16,r4
100055fc:	10006c1e 	bne	r2,zero,100057b0 <__muldf3+0x2e8>
10005600:	01400204 	movi	r5,8
10005604:	0021883a 	mov	r16,zero
10005608:	002f883a 	mov	r23,zero
1000560c:	07000084 	movi	fp,2
10005610:	003fcd06 	br	10005548 <__alt_data_end+0xf8005548>
10005614:	3013883a 	mov	r9,r6
10005618:	00800084 	movi	r2,2
1000561c:	e080501e 	bne	fp,r2,10005760 <__muldf3+0x298>
10005620:	4cc0004c 	andi	r19,r9,1
10005624:	0101ffc4 	movi	r4,2047
10005628:	0021883a 	mov	r16,zero
1000562c:	002f883a 	mov	r23,zero
10005630:	2008953a 	slli	r4,r4,20
10005634:	98c03fcc 	andi	r3,r19,255
10005638:	04400434 	movhi	r17,16
1000563c:	8c7fffc4 	addi	r17,r17,-1
10005640:	180697fa 	slli	r3,r3,31
10005644:	8460703a 	and	r16,r16,r17
10005648:	8120b03a 	or	r16,r16,r4
1000564c:	80c6b03a 	or	r3,r16,r3
10005650:	b805883a 	mov	r2,r23
10005654:	dfc01117 	ldw	ra,68(sp)
10005658:	df001017 	ldw	fp,64(sp)
1000565c:	ddc00f17 	ldw	r23,60(sp)
10005660:	dd800e17 	ldw	r22,56(sp)
10005664:	dd400d17 	ldw	r21,52(sp)
10005668:	dd000c17 	ldw	r20,48(sp)
1000566c:	dcc00b17 	ldw	r19,44(sp)
10005670:	dc800a17 	ldw	r18,40(sp)
10005674:	dc400917 	ldw	r17,36(sp)
10005678:	dc000817 	ldw	r16,32(sp)
1000567c:	dec01204 	addi	sp,sp,72
10005680:	f800283a 	ret
10005684:	8104b03a 	or	r2,r16,r4
10005688:	10004426 	beq	r2,zero,1000579c <__muldf3+0x2d4>
1000568c:	80014b26 	beq	r16,zero,10005bbc <__muldf3+0x6f4>
10005690:	8009883a 	mov	r4,r16
10005694:	d9800715 	stw	r6,28(sp)
10005698:	d9c00215 	stw	r7,8(sp)
1000569c:	da400415 	stw	r9,16(sp)
100056a0:	00068000 	call	10006800 <__clzsi2>
100056a4:	d9800717 	ldw	r6,28(sp)
100056a8:	d9c00217 	ldw	r7,8(sp)
100056ac:	da400417 	ldw	r9,16(sp)
100056b0:	1007883a 	mov	r3,r2
100056b4:	01000a04 	movi	r4,40
100056b8:	1dfffe04 	addi	r23,r3,-8
100056bc:	20c9c83a 	sub	r4,r4,r3
100056c0:	85e0983a 	sll	r16,r16,r23
100056c4:	9108d83a 	srl	r4,r18,r4
100056c8:	95ee983a 	sll	r23,r18,r23
100056cc:	2420b03a 	or	r16,r4,r16
100056d0:	053f0344 	movi	r20,-1011
100056d4:	a0e9c83a 	sub	r20,r20,r3
100056d8:	000b883a 	mov	r5,zero
100056dc:	0039883a 	mov	fp,zero
100056e0:	003f9906 	br	10005548 <__alt_data_end+0xf8005548>
100056e4:	8984b03a 	or	r2,r17,r6
100056e8:	10002a1e 	bne	r2,zero,10005794 <__muldf3+0x2cc>
100056ec:	0023883a 	mov	r17,zero
100056f0:	0025883a 	mov	r18,zero
100056f4:	01c00084 	movi	r7,2
100056f8:	003fa506 	br	10005590 <__alt_data_end+0xf8005590>
100056fc:	8984b03a 	or	r2,r17,r6
10005700:	10002026 	beq	r2,zero,10005784 <__muldf3+0x2bc>
10005704:	88011c26 	beq	r17,zero,10005b78 <__muldf3+0x6b0>
10005708:	8809883a 	mov	r4,r17
1000570c:	d9400215 	stw	r5,8(sp)
10005710:	d9800715 	stw	r6,28(sp)
10005714:	da400415 	stw	r9,16(sp)
10005718:	da800315 	stw	r10,12(sp)
1000571c:	00068000 	call	10006800 <__clzsi2>
10005720:	d9400217 	ldw	r5,8(sp)
10005724:	d9800717 	ldw	r6,28(sp)
10005728:	da400417 	ldw	r9,16(sp)
1000572c:	da800317 	ldw	r10,12(sp)
10005730:	1007883a 	mov	r3,r2
10005734:	01000a04 	movi	r4,40
10005738:	1cbffe04 	addi	r18,r3,-8
1000573c:	20c9c83a 	sub	r4,r4,r3
10005740:	8ca2983a 	sll	r17,r17,r18
10005744:	3108d83a 	srl	r4,r6,r4
10005748:	34a4983a 	sll	r18,r6,r18
1000574c:	2462b03a 	or	r17,r4,r17
10005750:	00bf0344 	movi	r2,-1011
10005754:	10c7c83a 	sub	r3,r2,r3
10005758:	000f883a 	mov	r7,zero
1000575c:	003f8c06 	br	10005590 <__alt_data_end+0xf8005590>
10005760:	008000c4 	movi	r2,3
10005764:	e0816d26 	beq	fp,r2,10005d1c <__muldf3+0x854>
10005768:	00800044 	movi	r2,1
1000576c:	e081321e 	bne	fp,r2,10005c38 <__muldf3+0x770>
10005770:	48a6703a 	and	r19,r9,r2
10005774:	0009883a 	mov	r4,zero
10005778:	0021883a 	mov	r16,zero
1000577c:	002f883a 	mov	r23,zero
10005780:	003fab06 	br	10005630 <__alt_data_end+0xf8005630>
10005784:	0023883a 	mov	r17,zero
10005788:	0025883a 	mov	r18,zero
1000578c:	01c00044 	movi	r7,1
10005790:	003f7f06 	br	10005590 <__alt_data_end+0xf8005590>
10005794:	01c000c4 	movi	r7,3
10005798:	003f7d06 	br	10005590 <__alt_data_end+0xf8005590>
1000579c:	01400104 	movi	r5,4
100057a0:	0021883a 	mov	r16,zero
100057a4:	002f883a 	mov	r23,zero
100057a8:	07000044 	movi	fp,1
100057ac:	003f6606 	br	10005548 <__alt_data_end+0xf8005548>
100057b0:	01400304 	movi	r5,12
100057b4:	070000c4 	movi	fp,3
100057b8:	003f6306 	br	10005548 <__alt_data_end+0xf8005548>
100057bc:	04000434 	movhi	r16,16
100057c0:	0027883a 	mov	r19,zero
100057c4:	843fffc4 	addi	r16,r16,-1
100057c8:	05ffffc4 	movi	r23,-1
100057cc:	0101ffc4 	movi	r4,2047
100057d0:	003f9706 	br	10005630 <__alt_data_end+0xf8005630>
100057d4:	8821883a 	mov	r16,r17
100057d8:	902f883a 	mov	r23,r18
100057dc:	5013883a 	mov	r9,r10
100057e0:	3839883a 	mov	fp,r7
100057e4:	003f8c06 	br	10005618 <__alt_data_end+0xf8005618>
100057e8:	8821883a 	mov	r16,r17
100057ec:	902f883a 	mov	r23,r18
100057f0:	3013883a 	mov	r9,r6
100057f4:	3839883a 	mov	fp,r7
100057f8:	003f8706 	br	10005618 <__alt_data_end+0xf8005618>
100057fc:	b82ad43a 	srli	r21,r23,16
10005800:	9038d43a 	srli	fp,r18,16
10005804:	bdffffcc 	andi	r23,r23,65535
10005808:	94bfffcc 	andi	r18,r18,65535
1000580c:	9009883a 	mov	r4,r18
10005810:	b80b883a 	mov	r5,r23
10005814:	d8c00515 	stw	r3,20(sp)
10005818:	d9800715 	stw	r6,28(sp)
1000581c:	da000615 	stw	r8,24(sp)
10005820:	00040400 	call	10004040 <__mulsi3>
10005824:	9009883a 	mov	r4,r18
10005828:	a80b883a 	mov	r5,r21
1000582c:	1029883a 	mov	r20,r2
10005830:	00040400 	call	10004040 <__mulsi3>
10005834:	e009883a 	mov	r4,fp
10005838:	a80b883a 	mov	r5,r21
1000583c:	102d883a 	mov	r22,r2
10005840:	00040400 	call	10004040 <__mulsi3>
10005844:	e009883a 	mov	r4,fp
10005848:	b80b883a 	mov	r5,r23
1000584c:	1027883a 	mov	r19,r2
10005850:	00040400 	call	10004040 <__mulsi3>
10005854:	a008d43a 	srli	r4,r20,16
10005858:	b085883a 	add	r2,r22,r2
1000585c:	d8c00517 	ldw	r3,20(sp)
10005860:	110f883a 	add	r7,r2,r4
10005864:	d9800717 	ldw	r6,28(sp)
10005868:	da000617 	ldw	r8,24(sp)
1000586c:	3d80022e 	bgeu	r7,r22,10005878 <__muldf3+0x3b0>
10005870:	00800074 	movhi	r2,1
10005874:	98a7883a 	add	r19,r19,r2
10005878:	3804943a 	slli	r2,r7,16
1000587c:	380ed43a 	srli	r7,r7,16
10005880:	882cd43a 	srli	r22,r17,16
10005884:	a53fffcc 	andi	r20,r20,65535
10005888:	8c7fffcc 	andi	r17,r17,65535
1000588c:	1529883a 	add	r20,r2,r20
10005890:	8809883a 	mov	r4,r17
10005894:	b80b883a 	mov	r5,r23
10005898:	d8c00515 	stw	r3,20(sp)
1000589c:	d9800715 	stw	r6,28(sp)
100058a0:	da000615 	stw	r8,24(sp)
100058a4:	d9c00015 	stw	r7,0(sp)
100058a8:	dd000115 	stw	r20,4(sp)
100058ac:	00040400 	call	10004040 <__mulsi3>
100058b0:	a80b883a 	mov	r5,r21
100058b4:	8809883a 	mov	r4,r17
100058b8:	d8800415 	stw	r2,16(sp)
100058bc:	00040400 	call	10004040 <__mulsi3>
100058c0:	a80b883a 	mov	r5,r21
100058c4:	b009883a 	mov	r4,r22
100058c8:	1029883a 	mov	r20,r2
100058cc:	00040400 	call	10004040 <__mulsi3>
100058d0:	b009883a 	mov	r4,r22
100058d4:	b80b883a 	mov	r5,r23
100058d8:	102b883a 	mov	r21,r2
100058dc:	00040400 	call	10004040 <__mulsi3>
100058e0:	da400417 	ldw	r9,16(sp)
100058e4:	a085883a 	add	r2,r20,r2
100058e8:	d8c00517 	ldw	r3,20(sp)
100058ec:	4808d43a 	srli	r4,r9,16
100058f0:	d9800717 	ldw	r6,28(sp)
100058f4:	da000617 	ldw	r8,24(sp)
100058f8:	1109883a 	add	r4,r2,r4
100058fc:	2500022e 	bgeu	r4,r20,10005908 <__muldf3+0x440>
10005900:	00800074 	movhi	r2,1
10005904:	a8ab883a 	add	r21,r21,r2
10005908:	200e943a 	slli	r7,r4,16
1000590c:	2004d43a 	srli	r2,r4,16
10005910:	802ed43a 	srli	r23,r16,16
10005914:	843fffcc 	andi	r16,r16,65535
10005918:	4d3fffcc 	andi	r20,r9,65535
1000591c:	9009883a 	mov	r4,r18
10005920:	800b883a 	mov	r5,r16
10005924:	3d29883a 	add	r20,r7,r20
10005928:	d8c00515 	stw	r3,20(sp)
1000592c:	d9800715 	stw	r6,28(sp)
10005930:	da000615 	stw	r8,24(sp)
10005934:	a8ab883a 	add	r21,r21,r2
10005938:	00040400 	call	10004040 <__mulsi3>
1000593c:	9009883a 	mov	r4,r18
10005940:	b80b883a 	mov	r5,r23
10005944:	d8800315 	stw	r2,12(sp)
10005948:	00040400 	call	10004040 <__mulsi3>
1000594c:	e009883a 	mov	r4,fp
10005950:	b80b883a 	mov	r5,r23
10005954:	1025883a 	mov	r18,r2
10005958:	00040400 	call	10004040 <__mulsi3>
1000595c:	e009883a 	mov	r4,fp
10005960:	800b883a 	mov	r5,r16
10005964:	d8800215 	stw	r2,8(sp)
10005968:	00040400 	call	10004040 <__mulsi3>
1000596c:	da800317 	ldw	r10,12(sp)
10005970:	d9400017 	ldw	r5,0(sp)
10005974:	9085883a 	add	r2,r18,r2
10005978:	5008d43a 	srli	r4,r10,16
1000597c:	a153883a 	add	r9,r20,r5
10005980:	d8c00517 	ldw	r3,20(sp)
10005984:	1109883a 	add	r4,r2,r4
10005988:	d9800717 	ldw	r6,28(sp)
1000598c:	da000617 	ldw	r8,24(sp)
10005990:	dac00217 	ldw	r11,8(sp)
10005994:	2480022e 	bgeu	r4,r18,100059a0 <__muldf3+0x4d8>
10005998:	00800074 	movhi	r2,1
1000599c:	5897883a 	add	r11,r11,r2
100059a0:	200e943a 	slli	r7,r4,16
100059a4:	2038d43a 	srli	fp,r4,16
100059a8:	52bfffcc 	andi	r10,r10,65535
100059ac:	3a8f883a 	add	r7,r7,r10
100059b0:	8809883a 	mov	r4,r17
100059b4:	800b883a 	mov	r5,r16
100059b8:	d8c00515 	stw	r3,20(sp)
100059bc:	d9800715 	stw	r6,28(sp)
100059c0:	d9c00215 	stw	r7,8(sp)
100059c4:	da000615 	stw	r8,24(sp)
100059c8:	da400415 	stw	r9,16(sp)
100059cc:	5f39883a 	add	fp,r11,fp
100059d0:	00040400 	call	10004040 <__mulsi3>
100059d4:	8809883a 	mov	r4,r17
100059d8:	b80b883a 	mov	r5,r23
100059dc:	1025883a 	mov	r18,r2
100059e0:	00040400 	call	10004040 <__mulsi3>
100059e4:	b009883a 	mov	r4,r22
100059e8:	b80b883a 	mov	r5,r23
100059ec:	d8800315 	stw	r2,12(sp)
100059f0:	00040400 	call	10004040 <__mulsi3>
100059f4:	b009883a 	mov	r4,r22
100059f8:	800b883a 	mov	r5,r16
100059fc:	1023883a 	mov	r17,r2
10005a00:	00040400 	call	10004040 <__mulsi3>
10005a04:	da800317 	ldw	r10,12(sp)
10005a08:	9008d43a 	srli	r4,r18,16
10005a0c:	d8c00517 	ldw	r3,20(sp)
10005a10:	5085883a 	add	r2,r10,r2
10005a14:	1109883a 	add	r4,r2,r4
10005a18:	d9800717 	ldw	r6,28(sp)
10005a1c:	d9c00217 	ldw	r7,8(sp)
10005a20:	da000617 	ldw	r8,24(sp)
10005a24:	da400417 	ldw	r9,16(sp)
10005a28:	2280022e 	bgeu	r4,r10,10005a34 <__muldf3+0x56c>
10005a2c:	00800074 	movhi	r2,1
10005a30:	88a3883a 	add	r17,r17,r2
10005a34:	2004943a 	slli	r2,r4,16
10005a38:	94bfffcc 	andi	r18,r18,65535
10005a3c:	4ce7883a 	add	r19,r9,r19
10005a40:	14a5883a 	add	r18,r2,r18
10005a44:	9d29803a 	cmpltu	r20,r19,r20
10005a48:	9565883a 	add	r18,r18,r21
10005a4c:	9505883a 	add	r2,r18,r20
10005a50:	99e7883a 	add	r19,r19,r7
10005a54:	99cf803a 	cmpltu	r7,r19,r7
10005a58:	e08b883a 	add	r5,fp,r2
10005a5c:	2008d43a 	srli	r4,r4,16
10005a60:	29ef883a 	add	r23,r5,r7
10005a64:	1529803a 	cmpltu	r20,r2,r20
10005a68:	956b803a 	cmpltu	r21,r18,r21
10005a6c:	b9cf803a 	cmpltu	r7,r23,r7
10005a70:	a564b03a 	or	r18,r20,r21
10005a74:	2f39803a 	cmpltu	fp,r5,fp
10005a78:	9125883a 	add	r18,r18,r4
10005a7c:	3f38b03a 	or	fp,r7,fp
10005a80:	9725883a 	add	r18,r18,fp
10005a84:	9804927a 	slli	r2,r19,9
10005a88:	9463883a 	add	r17,r18,r17
10005a8c:	d9000117 	ldw	r4,4(sp)
10005a90:	b820d5fa 	srli	r16,r23,23
10005a94:	8822927a 	slli	r17,r17,9
10005a98:	9826d5fa 	srli	r19,r19,23
10005a9c:	1104b03a 	or	r2,r2,r4
10005aa0:	b82e927a 	slli	r23,r23,9
10005aa4:	1004c03a 	cmpne	r2,r2,zero
10005aa8:	8c20b03a 	or	r16,r17,r16
10005aac:	14e6b03a 	or	r19,r2,r19
10005ab0:	8080402c 	andhi	r2,r16,256
10005ab4:	9deeb03a 	or	r23,r19,r23
10005ab8:	10000726 	beq	r2,zero,10005ad8 <__muldf3+0x610>
10005abc:	b804d07a 	srli	r2,r23,1
10005ac0:	800697fa 	slli	r3,r16,31
10005ac4:	bdc0004c 	andi	r23,r23,1
10005ac8:	8020d07a 	srli	r16,r16,1
10005acc:	b8aeb03a 	or	r23,r23,r2
10005ad0:	b8eeb03a 	or	r23,r23,r3
10005ad4:	4007883a 	mov	r3,r8
10005ad8:	1900ffc4 	addi	r4,r3,1023
10005adc:	01004d0e 	bge	zero,r4,10005c14 <__muldf3+0x74c>
10005ae0:	b88001cc 	andi	r2,r23,7
10005ae4:	10000726 	beq	r2,zero,10005b04 <__muldf3+0x63c>
10005ae8:	b94003cc 	andi	r5,r23,15
10005aec:	00800104 	movi	r2,4
10005af0:	28800426 	beq	r5,r2,10005b04 <__muldf3+0x63c>
10005af4:	b885883a 	add	r2,r23,r2
10005af8:	15ef803a 	cmpltu	r23,r2,r23
10005afc:	85e1883a 	add	r16,r16,r23
10005b00:	102f883a 	mov	r23,r2
10005b04:	8080402c 	andhi	r2,r16,256
10005b08:	10000426 	beq	r2,zero,10005b1c <__muldf3+0x654>
10005b0c:	00bfc034 	movhi	r2,65280
10005b10:	10bfffc4 	addi	r2,r2,-1
10005b14:	19010004 	addi	r4,r3,1024
10005b18:	80a0703a 	and	r16,r16,r2
10005b1c:	0081ff84 	movi	r2,2046
10005b20:	1100340e 	bge	r2,r4,10005bf4 <__muldf3+0x72c>
10005b24:	34c0004c 	andi	r19,r6,1
10005b28:	0101ffc4 	movi	r4,2047
10005b2c:	0021883a 	mov	r16,zero
10005b30:	002f883a 	mov	r23,zero
10005b34:	003ebe06 	br	10005630 <__alt_data_end+0xf8005630>
10005b38:	8080022c 	andhi	r2,r16,8
10005b3c:	10000926 	beq	r2,zero,10005b64 <__muldf3+0x69c>
10005b40:	8880022c 	andhi	r2,r17,8
10005b44:	1000071e 	bne	r2,zero,10005b64 <__muldf3+0x69c>
10005b48:	00800434 	movhi	r2,16
10005b4c:	8c000234 	orhi	r16,r17,8
10005b50:	10bfffc4 	addi	r2,r2,-1
10005b54:	b027883a 	mov	r19,r22
10005b58:	80a0703a 	and	r16,r16,r2
10005b5c:	902f883a 	mov	r23,r18
10005b60:	003f1a06 	br	100057cc <__alt_data_end+0xf80057cc>
10005b64:	00800434 	movhi	r2,16
10005b68:	84000234 	orhi	r16,r16,8
10005b6c:	10bfffc4 	addi	r2,r2,-1
10005b70:	80a0703a 	and	r16,r16,r2
10005b74:	003f1506 	br	100057cc <__alt_data_end+0xf80057cc>
10005b78:	3009883a 	mov	r4,r6
10005b7c:	d9400215 	stw	r5,8(sp)
10005b80:	d9800715 	stw	r6,28(sp)
10005b84:	da400415 	stw	r9,16(sp)
10005b88:	da800315 	stw	r10,12(sp)
10005b8c:	00068000 	call	10006800 <__clzsi2>
10005b90:	10c00804 	addi	r3,r2,32
10005b94:	010009c4 	movi	r4,39
10005b98:	d9400217 	ldw	r5,8(sp)
10005b9c:	d9800717 	ldw	r6,28(sp)
10005ba0:	da400417 	ldw	r9,16(sp)
10005ba4:	da800317 	ldw	r10,12(sp)
10005ba8:	20fee20e 	bge	r4,r3,10005734 <__alt_data_end+0xf8005734>
10005bac:	147ffe04 	addi	r17,r2,-8
10005bb0:	9462983a 	sll	r17,r18,r17
10005bb4:	0025883a 	mov	r18,zero
10005bb8:	003ee506 	br	10005750 <__alt_data_end+0xf8005750>
10005bbc:	d9800715 	stw	r6,28(sp)
10005bc0:	d9c00215 	stw	r7,8(sp)
10005bc4:	da400415 	stw	r9,16(sp)
10005bc8:	00068000 	call	10006800 <__clzsi2>
10005bcc:	10c00804 	addi	r3,r2,32
10005bd0:	010009c4 	movi	r4,39
10005bd4:	d9800717 	ldw	r6,28(sp)
10005bd8:	d9c00217 	ldw	r7,8(sp)
10005bdc:	da400417 	ldw	r9,16(sp)
10005be0:	20feb40e 	bge	r4,r3,100056b4 <__alt_data_end+0xf80056b4>
10005be4:	143ffe04 	addi	r16,r2,-8
10005be8:	9420983a 	sll	r16,r18,r16
10005bec:	002f883a 	mov	r23,zero
10005bf0:	003eb706 	br	100056d0 <__alt_data_end+0xf80056d0>
10005bf4:	8004977a 	slli	r2,r16,29
10005bf8:	b82ed0fa 	srli	r23,r23,3
10005bfc:	8020927a 	slli	r16,r16,9
10005c00:	2101ffcc 	andi	r4,r4,2047
10005c04:	15eeb03a 	or	r23,r2,r23
10005c08:	8020d33a 	srli	r16,r16,12
10005c0c:	34c0004c 	andi	r19,r6,1
10005c10:	003e8706 	br	10005630 <__alt_data_end+0xf8005630>
10005c14:	00bf0084 	movi	r2,-1022
10005c18:	10c5c83a 	sub	r2,r2,r3
10005c1c:	01000e04 	movi	r4,56
10005c20:	2080080e 	bge	r4,r2,10005c44 <__muldf3+0x77c>
10005c24:	34c0004c 	andi	r19,r6,1
10005c28:	0009883a 	mov	r4,zero
10005c2c:	0021883a 	mov	r16,zero
10005c30:	002f883a 	mov	r23,zero
10005c34:	003e7e06 	br	10005630 <__alt_data_end+0xf8005630>
10005c38:	4007883a 	mov	r3,r8
10005c3c:	480d883a 	mov	r6,r9
10005c40:	003fa506 	br	10005ad8 <__alt_data_end+0xf8005ad8>
10005c44:	010007c4 	movi	r4,31
10005c48:	20801816 	blt	r4,r2,10005cac <__muldf3+0x7e4>
10005c4c:	18c10784 	addi	r3,r3,1054
10005c50:	80c8983a 	sll	r4,r16,r3
10005c54:	b88ad83a 	srl	r5,r23,r2
10005c58:	b8c6983a 	sll	r3,r23,r3
10005c5c:	80a0d83a 	srl	r16,r16,r2
10005c60:	2908b03a 	or	r4,r5,r4
10005c64:	1804c03a 	cmpne	r2,r3,zero
10005c68:	2088b03a 	or	r4,r4,r2
10005c6c:	208001cc 	andi	r2,r4,7
10005c70:	10000726 	beq	r2,zero,10005c90 <__muldf3+0x7c8>
10005c74:	20c003cc 	andi	r3,r4,15
10005c78:	00800104 	movi	r2,4
10005c7c:	18800426 	beq	r3,r2,10005c90 <__muldf3+0x7c8>
10005c80:	20c00104 	addi	r3,r4,4
10005c84:	1905803a 	cmpltu	r2,r3,r4
10005c88:	80a1883a 	add	r16,r16,r2
10005c8c:	1809883a 	mov	r4,r3
10005c90:	8080202c 	andhi	r2,r16,128
10005c94:	10001b26 	beq	r2,zero,10005d04 <__muldf3+0x83c>
10005c98:	34c0004c 	andi	r19,r6,1
10005c9c:	01000044 	movi	r4,1
10005ca0:	0021883a 	mov	r16,zero
10005ca4:	002f883a 	mov	r23,zero
10005ca8:	003e6106 	br	10005630 <__alt_data_end+0xf8005630>
10005cac:	013ef884 	movi	r4,-1054
10005cb0:	20c9c83a 	sub	r4,r4,r3
10005cb4:	01400804 	movi	r5,32
10005cb8:	8108d83a 	srl	r4,r16,r4
10005cbc:	11401526 	beq	r2,r5,10005d14 <__muldf3+0x84c>
10005cc0:	18c10f84 	addi	r3,r3,1086
10005cc4:	80e0983a 	sll	r16,r16,r3
10005cc8:	85eeb03a 	or	r23,r16,r23
10005ccc:	b804c03a 	cmpne	r2,r23,zero
10005cd0:	1108b03a 	or	r4,r2,r4
10005cd4:	20c001cc 	andi	r3,r4,7
10005cd8:	1800061e 	bne	r3,zero,10005cf4 <__muldf3+0x82c>
10005cdc:	0021883a 	mov	r16,zero
10005ce0:	202ed0fa 	srli	r23,r4,3
10005ce4:	34c0004c 	andi	r19,r6,1
10005ce8:	0009883a 	mov	r4,zero
10005cec:	b8eeb03a 	or	r23,r23,r3
10005cf0:	003e4f06 	br	10005630 <__alt_data_end+0xf8005630>
10005cf4:	20c003cc 	andi	r3,r4,15
10005cf8:	00800104 	movi	r2,4
10005cfc:	0021883a 	mov	r16,zero
10005d00:	18bfdf1e 	bne	r3,r2,10005c80 <__alt_data_end+0xf8005c80>
10005d04:	8004927a 	slli	r2,r16,9
10005d08:	8006977a 	slli	r3,r16,29
10005d0c:	1020d33a 	srli	r16,r2,12
10005d10:	003ff306 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005d14:	0021883a 	mov	r16,zero
10005d18:	003feb06 	br	10005cc8 <__alt_data_end+0xf8005cc8>
10005d1c:	00800434 	movhi	r2,16
10005d20:	84000234 	orhi	r16,r16,8
10005d24:	10bfffc4 	addi	r2,r2,-1
10005d28:	4cc0004c 	andi	r19,r9,1
10005d2c:	80a0703a 	and	r16,r16,r2
10005d30:	003ea606 	br	100057cc <__alt_data_end+0xf80057cc>

10005d34 <__subdf3>:
10005d34:	00c00434 	movhi	r3,16
10005d38:	18ffffc4 	addi	r3,r3,-1
10005d3c:	defffb04 	addi	sp,sp,-20
10005d40:	28d2703a 	and	r9,r5,r3
10005d44:	3814d53a 	srli	r10,r7,20
10005d48:	38c6703a 	and	r3,r7,r3
10005d4c:	3004d77a 	srli	r2,r6,29
10005d50:	dc800215 	stw	r18,8(sp)
10005d54:	dc000015 	stw	r16,0(sp)
10005d58:	2824d7fa 	srli	r18,r5,31
10005d5c:	2820d53a 	srli	r16,r5,20
10005d60:	481290fa 	slli	r9,r9,3
10005d64:	200ad77a 	srli	r5,r4,29
10005d68:	180690fa 	slli	r3,r3,3
10005d6c:	dc400115 	stw	r17,4(sp)
10005d70:	dfc00415 	stw	ra,16(sp)
10005d74:	202290fa 	slli	r17,r4,3
10005d78:	dcc00315 	stw	r19,12(sp)
10005d7c:	5281ffcc 	andi	r10,r10,2047
10005d80:	0101ffc4 	movi	r4,2047
10005d84:	9011883a 	mov	r8,r18
10005d88:	8401ffcc 	andi	r16,r16,2047
10005d8c:	94803fcc 	andi	r18,r18,255
10005d90:	494ab03a 	or	r5,r9,r5
10005d94:	380ed7fa 	srli	r7,r7,31
10005d98:	1886b03a 	or	r3,r3,r2
10005d9c:	300c90fa 	slli	r6,r6,3
10005da0:	51009026 	beq	r10,r4,10005fe4 <__subdf3+0x2b0>
10005da4:	39c0005c 	xori	r7,r7,1
10005da8:	8285c83a 	sub	r2,r16,r10
10005dac:	91c06f26 	beq	r18,r7,10005f6c <__subdf3+0x238>
10005db0:	0080b10e 	bge	zero,r2,10006078 <__subdf3+0x344>
10005db4:	50002a1e 	bne	r10,zero,10005e60 <__subdf3+0x12c>
10005db8:	1988b03a 	or	r4,r3,r6
10005dbc:	2000941e 	bne	r4,zero,10006010 <__subdf3+0x2dc>
10005dc0:	888001cc 	andi	r2,r17,7
10005dc4:	10005b26 	beq	r2,zero,10005f34 <__subdf3+0x200>
10005dc8:	88c003cc 	andi	r3,r17,15
10005dcc:	00800104 	movi	r2,4
10005dd0:	18805826 	beq	r3,r2,10005f34 <__subdf3+0x200>
10005dd4:	88c00104 	addi	r3,r17,4
10005dd8:	1c63803a 	cmpltu	r17,r3,r17
10005ddc:	2c4b883a 	add	r5,r5,r17
10005de0:	2880202c 	andhi	r2,r5,128
10005de4:	9200004c 	andi	r8,r18,1
10005de8:	1823883a 	mov	r17,r3
10005dec:	10005426 	beq	r2,zero,10005f40 <__subdf3+0x20c>
10005df0:	84000044 	addi	r16,r16,1
10005df4:	0081ffc4 	movi	r2,2047
10005df8:	8080bf26 	beq	r16,r2,100060f8 <__subdf3+0x3c4>
10005dfc:	013fe034 	movhi	r4,65408
10005e00:	213fffc4 	addi	r4,r4,-1
10005e04:	290a703a 	and	r5,r5,r4
10005e08:	2804977a 	slli	r2,r5,29
10005e0c:	280a927a 	slli	r5,r5,9
10005e10:	8822d0fa 	srli	r17,r17,3
10005e14:	8401ffcc 	andi	r16,r16,2047
10005e18:	2808d33a 	srli	r4,r5,12
10005e1c:	1444b03a 	or	r2,r2,r17
10005e20:	8401ffcc 	andi	r16,r16,2047
10005e24:	800a953a 	slli	r5,r16,20
10005e28:	40c03fcc 	andi	r3,r8,255
10005e2c:	04000434 	movhi	r16,16
10005e30:	180697fa 	slli	r3,r3,31
10005e34:	843fffc4 	addi	r16,r16,-1
10005e38:	2420703a 	and	r16,r4,r16
10005e3c:	8160b03a 	or	r16,r16,r5
10005e40:	80c6b03a 	or	r3,r16,r3
10005e44:	dfc00417 	ldw	ra,16(sp)
10005e48:	dcc00317 	ldw	r19,12(sp)
10005e4c:	dc800217 	ldw	r18,8(sp)
10005e50:	dc400117 	ldw	r17,4(sp)
10005e54:	dc000017 	ldw	r16,0(sp)
10005e58:	dec00504 	addi	sp,sp,20
10005e5c:	f800283a 	ret
10005e60:	0101ffc4 	movi	r4,2047
10005e64:	813fd626 	beq	r16,r4,10005dc0 <__alt_data_end+0xf8005dc0>
10005e68:	18c02034 	orhi	r3,r3,128
10005e6c:	01000e04 	movi	r4,56
10005e70:	2080a416 	blt	r4,r2,10006104 <__subdf3+0x3d0>
10005e74:	010007c4 	movi	r4,31
10005e78:	2080c716 	blt	r4,r2,10006198 <__subdf3+0x464>
10005e7c:	01000804 	movi	r4,32
10005e80:	2089c83a 	sub	r4,r4,r2
10005e84:	1910983a 	sll	r8,r3,r4
10005e88:	308ed83a 	srl	r7,r6,r2
10005e8c:	3108983a 	sll	r4,r6,r4
10005e90:	1884d83a 	srl	r2,r3,r2
10005e94:	41ccb03a 	or	r6,r8,r7
10005e98:	2008c03a 	cmpne	r4,r4,zero
10005e9c:	310cb03a 	or	r6,r6,r4
10005ea0:	898dc83a 	sub	r6,r17,r6
10005ea4:	89a3803a 	cmpltu	r17,r17,r6
10005ea8:	288bc83a 	sub	r5,r5,r2
10005eac:	2c4bc83a 	sub	r5,r5,r17
10005eb0:	3023883a 	mov	r17,r6
10005eb4:	2880202c 	andhi	r2,r5,128
10005eb8:	10006b26 	beq	r2,zero,10006068 <__subdf3+0x334>
10005ebc:	04c02034 	movhi	r19,128
10005ec0:	9cffffc4 	addi	r19,r19,-1
10005ec4:	2ce6703a 	and	r19,r5,r19
10005ec8:	98007c26 	beq	r19,zero,100060bc <__subdf3+0x388>
10005ecc:	9809883a 	mov	r4,r19
10005ed0:	00068000 	call	10006800 <__clzsi2>
10005ed4:	10fffe04 	addi	r3,r2,-8
10005ed8:	010007c4 	movi	r4,31
10005edc:	20c07d16 	blt	r4,r3,100060d4 <__subdf3+0x3a0>
10005ee0:	01400a04 	movi	r5,40
10005ee4:	2885c83a 	sub	r2,r5,r2
10005ee8:	888ad83a 	srl	r5,r17,r2
10005eec:	98e6983a 	sll	r19,r19,r3
10005ef0:	88e2983a 	sll	r17,r17,r3
10005ef4:	2ce6b03a 	or	r19,r5,r19
10005ef8:	1c007a16 	blt	r3,r16,100060e4 <__subdf3+0x3b0>
10005efc:	1c21c83a 	sub	r16,r3,r16
10005f00:	81400044 	addi	r5,r16,1
10005f04:	00c007c4 	movi	r3,31
10005f08:	19409616 	blt	r3,r5,10006164 <__subdf3+0x430>
10005f0c:	1c21c83a 	sub	r16,r3,r16
10005f10:	8c08983a 	sll	r4,r17,r16
10005f14:	8946d83a 	srl	r3,r17,r5
10005f18:	9c20983a 	sll	r16,r19,r16
10005f1c:	2008c03a 	cmpne	r4,r4,zero
10005f20:	994ad83a 	srl	r5,r19,r5
10005f24:	1c06b03a 	or	r3,r3,r16
10005f28:	1922b03a 	or	r17,r3,r4
10005f2c:	0021883a 	mov	r16,zero
10005f30:	003fa306 	br	10005dc0 <__alt_data_end+0xf8005dc0>
10005f34:	2880202c 	andhi	r2,r5,128
10005f38:	9200004c 	andi	r8,r18,1
10005f3c:	103fac1e 	bne	r2,zero,10005df0 <__alt_data_end+0xf8005df0>
10005f40:	2804977a 	slli	r2,r5,29
10005f44:	8822d0fa 	srli	r17,r17,3
10005f48:	00c1ffc4 	movi	r3,2047
10005f4c:	280ad0fa 	srli	r5,r5,3
10005f50:	1444b03a 	or	r2,r2,r17
10005f54:	80c02726 	beq	r16,r3,10005ff4 <__subdf3+0x2c0>
10005f58:	01000434 	movhi	r4,16
10005f5c:	213fffc4 	addi	r4,r4,-1
10005f60:	80e0703a 	and	r16,r16,r3
10005f64:	2908703a 	and	r4,r5,r4
10005f68:	003fad06 	br	10005e20 <__alt_data_end+0xf8005e20>
10005f6c:	0080690e 	bge	zero,r2,10006114 <__subdf3+0x3e0>
10005f70:	50002f26 	beq	r10,zero,10006030 <__subdf3+0x2fc>
10005f74:	0101ffc4 	movi	r4,2047
10005f78:	813f9126 	beq	r16,r4,10005dc0 <__alt_data_end+0xf8005dc0>
10005f7c:	18c02034 	orhi	r3,r3,128
10005f80:	01000e04 	movi	r4,56
10005f84:	2080b00e 	bge	r4,r2,10006248 <__subdf3+0x514>
10005f88:	198cb03a 	or	r6,r3,r6
10005f8c:	300ec03a 	cmpne	r7,r6,zero
10005f90:	0005883a 	mov	r2,zero
10005f94:	3c4f883a 	add	r7,r7,r17
10005f98:	3c63803a 	cmpltu	r17,r7,r17
10005f9c:	114b883a 	add	r5,r2,r5
10005fa0:	2c4b883a 	add	r5,r5,r17
10005fa4:	3823883a 	mov	r17,r7
10005fa8:	2880202c 	andhi	r2,r5,128
10005fac:	10002e26 	beq	r2,zero,10006068 <__subdf3+0x334>
10005fb0:	84000044 	addi	r16,r16,1
10005fb4:	0081ffc4 	movi	r2,2047
10005fb8:	8080de26 	beq	r16,r2,10006334 <__subdf3+0x600>
10005fbc:	00bfe034 	movhi	r2,65408
10005fc0:	10bfffc4 	addi	r2,r2,-1
10005fc4:	288a703a 	and	r5,r5,r2
10005fc8:	880cd07a 	srli	r6,r17,1
10005fcc:	280897fa 	slli	r4,r5,31
10005fd0:	88c0004c 	andi	r3,r17,1
10005fd4:	30e2b03a 	or	r17,r6,r3
10005fd8:	280ad07a 	srli	r5,r5,1
10005fdc:	8922b03a 	or	r17,r17,r4
10005fe0:	003f7706 	br	10005dc0 <__alt_data_end+0xf8005dc0>
10005fe4:	1984b03a 	or	r2,r3,r6
10005fe8:	103f6e26 	beq	r2,zero,10005da4 <__alt_data_end+0xf8005da4>
10005fec:	39c03fcc 	andi	r7,r7,255
10005ff0:	003f6d06 	br	10005da8 <__alt_data_end+0xf8005da8>
10005ff4:	1146b03a 	or	r3,r2,r5
10005ff8:	18003f26 	beq	r3,zero,100060f8 <__subdf3+0x3c4>
10005ffc:	00c00434 	movhi	r3,16
10006000:	29000234 	orhi	r4,r5,8
10006004:	18ffffc4 	addi	r3,r3,-1
10006008:	20c8703a 	and	r4,r4,r3
1000600c:	003f8406 	br	10005e20 <__alt_data_end+0xf8005e20>
10006010:	10bfffc4 	addi	r2,r2,-1
10006014:	1000501e 	bne	r2,zero,10006158 <__subdf3+0x424>
10006018:	898fc83a 	sub	r7,r17,r6
1000601c:	89e3803a 	cmpltu	r17,r17,r7
10006020:	28cbc83a 	sub	r5,r5,r3
10006024:	2c4bc83a 	sub	r5,r5,r17
10006028:	3823883a 	mov	r17,r7
1000602c:	003fa106 	br	10005eb4 <__alt_data_end+0xf8005eb4>
10006030:	1988b03a 	or	r4,r3,r6
10006034:	203f6226 	beq	r4,zero,10005dc0 <__alt_data_end+0xf8005dc0>
10006038:	10bfffc4 	addi	r2,r2,-1
1000603c:	10009b1e 	bne	r2,zero,100062ac <__subdf3+0x578>
10006040:	344d883a 	add	r6,r6,r17
10006044:	3463803a 	cmpltu	r17,r6,r17
10006048:	194b883a 	add	r5,r3,r5
1000604c:	2c4b883a 	add	r5,r5,r17
10006050:	3023883a 	mov	r17,r6
10006054:	003fd406 	br	10005fa8 <__alt_data_end+0xf8005fa8>
10006058:	1106b03a 	or	r3,r2,r4
1000605c:	1800b426 	beq	r3,zero,10006330 <__subdf3+0x5fc>
10006060:	100b883a 	mov	r5,r2
10006064:	2023883a 	mov	r17,r4
10006068:	888001cc 	andi	r2,r17,7
1000606c:	103f561e 	bne	r2,zero,10005dc8 <__alt_data_end+0xf8005dc8>
10006070:	9200004c 	andi	r8,r18,1
10006074:	003fb206 	br	10005f40 <__alt_data_end+0xf8005f40>
10006078:	1000531e 	bne	r2,zero,100061c8 <__subdf3+0x494>
1000607c:	80800044 	addi	r2,r16,1
10006080:	1081ffcc 	andi	r2,r2,2047
10006084:	01000044 	movi	r4,1
10006088:	2080a00e 	bge	r4,r2,1000630c <__subdf3+0x5d8>
1000608c:	8985c83a 	sub	r2,r17,r6
10006090:	8889803a 	cmpltu	r4,r17,r2
10006094:	28e7c83a 	sub	r19,r5,r3
10006098:	9927c83a 	sub	r19,r19,r4
1000609c:	9900202c 	andhi	r4,r19,128
100060a0:	20006226 	beq	r4,zero,1000622c <__subdf3+0x4f8>
100060a4:	3463c83a 	sub	r17,r6,r17
100060a8:	194bc83a 	sub	r5,r3,r5
100060ac:	344d803a 	cmpltu	r6,r6,r17
100060b0:	29a7c83a 	sub	r19,r5,r6
100060b4:	3825883a 	mov	r18,r7
100060b8:	983f841e 	bne	r19,zero,10005ecc <__alt_data_end+0xf8005ecc>
100060bc:	8809883a 	mov	r4,r17
100060c0:	00068000 	call	10006800 <__clzsi2>
100060c4:	10800804 	addi	r2,r2,32
100060c8:	10fffe04 	addi	r3,r2,-8
100060cc:	010007c4 	movi	r4,31
100060d0:	20ff830e 	bge	r4,r3,10005ee0 <__alt_data_end+0xf8005ee0>
100060d4:	14fff604 	addi	r19,r2,-40
100060d8:	8ce6983a 	sll	r19,r17,r19
100060dc:	0023883a 	mov	r17,zero
100060e0:	1c3f860e 	bge	r3,r16,10005efc <__alt_data_end+0xf8005efc>
100060e4:	017fe034 	movhi	r5,65408
100060e8:	297fffc4 	addi	r5,r5,-1
100060ec:	80e1c83a 	sub	r16,r16,r3
100060f0:	994a703a 	and	r5,r19,r5
100060f4:	003f3206 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100060f8:	0009883a 	mov	r4,zero
100060fc:	0005883a 	mov	r2,zero
10006100:	003f4706 	br	10005e20 <__alt_data_end+0xf8005e20>
10006104:	198cb03a 	or	r6,r3,r6
10006108:	300cc03a 	cmpne	r6,r6,zero
1000610c:	0005883a 	mov	r2,zero
10006110:	003f6306 	br	10005ea0 <__alt_data_end+0xf8005ea0>
10006114:	10009d1e 	bne	r2,zero,1000638c <__subdf3+0x658>
10006118:	81c00044 	addi	r7,r16,1
1000611c:	3881ffcc 	andi	r2,r7,2047
10006120:	02400044 	movi	r9,1
10006124:	4880680e 	bge	r9,r2,100062c8 <__subdf3+0x594>
10006128:	0081ffc4 	movi	r2,2047
1000612c:	3880ae26 	beq	r7,r2,100063e8 <__subdf3+0x6b4>
10006130:	344d883a 	add	r6,r6,r17
10006134:	3463803a 	cmpltu	r17,r6,r17
10006138:	194b883a 	add	r5,r3,r5
1000613c:	2c4b883a 	add	r5,r5,r17
10006140:	282297fa 	slli	r17,r5,31
10006144:	300cd07a 	srli	r6,r6,1
10006148:	280ad07a 	srli	r5,r5,1
1000614c:	3821883a 	mov	r16,r7
10006150:	89a2b03a 	or	r17,r17,r6
10006154:	003f1a06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
10006158:	0101ffc4 	movi	r4,2047
1000615c:	813f431e 	bne	r16,r4,10005e6c <__alt_data_end+0xf8005e6c>
10006160:	003f1706 	br	10005dc0 <__alt_data_end+0xf8005dc0>
10006164:	80bff844 	addi	r2,r16,-31
10006168:	00c00804 	movi	r3,32
1000616c:	9884d83a 	srl	r2,r19,r2
10006170:	28c05126 	beq	r5,r3,100062b8 <__subdf3+0x584>
10006174:	00c00fc4 	movi	r3,63
10006178:	1c21c83a 	sub	r16,r3,r16
1000617c:	9c26983a 	sll	r19,r19,r16
10006180:	9c62b03a 	or	r17,r19,r17
10006184:	8822c03a 	cmpne	r17,r17,zero
10006188:	88a2b03a 	or	r17,r17,r2
1000618c:	000b883a 	mov	r5,zero
10006190:	0021883a 	mov	r16,zero
10006194:	003fb406 	br	10006068 <__alt_data_end+0xf8006068>
10006198:	113ff804 	addi	r4,r2,-32
1000619c:	01c00804 	movi	r7,32
100061a0:	1908d83a 	srl	r4,r3,r4
100061a4:	11c04626 	beq	r2,r7,100062c0 <__subdf3+0x58c>
100061a8:	01c01004 	movi	r7,64
100061ac:	3885c83a 	sub	r2,r7,r2
100061b0:	1884983a 	sll	r2,r3,r2
100061b4:	118cb03a 	or	r6,r2,r6
100061b8:	300cc03a 	cmpne	r6,r6,zero
100061bc:	310cb03a 	or	r6,r6,r4
100061c0:	0005883a 	mov	r2,zero
100061c4:	003f3606 	br	10005ea0 <__alt_data_end+0xf8005ea0>
100061c8:	80002b26 	beq	r16,zero,10006278 <__subdf3+0x544>
100061cc:	0101ffc4 	movi	r4,2047
100061d0:	51006926 	beq	r10,r4,10006378 <__subdf3+0x644>
100061d4:	0085c83a 	sub	r2,zero,r2
100061d8:	29402034 	orhi	r5,r5,128
100061dc:	01000e04 	movi	r4,56
100061e0:	20807d16 	blt	r4,r2,100063d8 <__subdf3+0x6a4>
100061e4:	010007c4 	movi	r4,31
100061e8:	2080d916 	blt	r4,r2,10006550 <__subdf3+0x81c>
100061ec:	01000804 	movi	r4,32
100061f0:	2089c83a 	sub	r4,r4,r2
100061f4:	2912983a 	sll	r9,r5,r4
100061f8:	8890d83a 	srl	r8,r17,r2
100061fc:	8908983a 	sll	r4,r17,r4
10006200:	2884d83a 	srl	r2,r5,r2
10006204:	4a22b03a 	or	r17,r9,r8
10006208:	2008c03a 	cmpne	r4,r4,zero
1000620c:	8922b03a 	or	r17,r17,r4
10006210:	3463c83a 	sub	r17,r6,r17
10006214:	1885c83a 	sub	r2,r3,r2
10006218:	344d803a 	cmpltu	r6,r6,r17
1000621c:	118bc83a 	sub	r5,r2,r6
10006220:	5021883a 	mov	r16,r10
10006224:	3825883a 	mov	r18,r7
10006228:	003f2206 	br	10005eb4 <__alt_data_end+0xf8005eb4>
1000622c:	9886b03a 	or	r3,r19,r2
10006230:	18001c1e 	bne	r3,zero,100062a4 <__subdf3+0x570>
10006234:	0011883a 	mov	r8,zero
10006238:	000b883a 	mov	r5,zero
1000623c:	0023883a 	mov	r17,zero
10006240:	0021883a 	mov	r16,zero
10006244:	003f3e06 	br	10005f40 <__alt_data_end+0xf8005f40>
10006248:	010007c4 	movi	r4,31
1000624c:	20803c16 	blt	r4,r2,10006340 <__subdf3+0x60c>
10006250:	01000804 	movi	r4,32
10006254:	2089c83a 	sub	r4,r4,r2
10006258:	1912983a 	sll	r9,r3,r4
1000625c:	308ed83a 	srl	r7,r6,r2
10006260:	3108983a 	sll	r4,r6,r4
10006264:	1884d83a 	srl	r2,r3,r2
10006268:	49ceb03a 	or	r7,r9,r7
1000626c:	2008c03a 	cmpne	r4,r4,zero
10006270:	390eb03a 	or	r7,r7,r4
10006274:	003f4706 	br	10005f94 <__alt_data_end+0xf8005f94>
10006278:	2c48b03a 	or	r4,r5,r17
1000627c:	20003e26 	beq	r4,zero,10006378 <__subdf3+0x644>
10006280:	0084303a 	nor	r2,zero,r2
10006284:	10003a1e 	bne	r2,zero,10006370 <__subdf3+0x63c>
10006288:	3463c83a 	sub	r17,r6,r17
1000628c:	194bc83a 	sub	r5,r3,r5
10006290:	344d803a 	cmpltu	r6,r6,r17
10006294:	298bc83a 	sub	r5,r5,r6
10006298:	5021883a 	mov	r16,r10
1000629c:	3825883a 	mov	r18,r7
100062a0:	003f0406 	br	10005eb4 <__alt_data_end+0xf8005eb4>
100062a4:	1023883a 	mov	r17,r2
100062a8:	003f0706 	br	10005ec8 <__alt_data_end+0xf8005ec8>
100062ac:	0101ffc4 	movi	r4,2047
100062b0:	813f331e 	bne	r16,r4,10005f80 <__alt_data_end+0xf8005f80>
100062b4:	003ec206 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100062b8:	0027883a 	mov	r19,zero
100062bc:	003fb006 	br	10006180 <__alt_data_end+0xf8006180>
100062c0:	0005883a 	mov	r2,zero
100062c4:	003fbb06 	br	100061b4 <__alt_data_end+0xf80061b4>
100062c8:	2c44b03a 	or	r2,r5,r17
100062cc:	80008b1e 	bne	r16,zero,100064fc <__subdf3+0x7c8>
100062d0:	1000b526 	beq	r2,zero,100065a8 <__subdf3+0x874>
100062d4:	1984b03a 	or	r2,r3,r6
100062d8:	103eb926 	beq	r2,zero,10005dc0 <__alt_data_end+0xf8005dc0>
100062dc:	3449883a 	add	r4,r6,r17
100062e0:	2463803a 	cmpltu	r17,r4,r17
100062e4:	194b883a 	add	r5,r3,r5
100062e8:	2c4b883a 	add	r5,r5,r17
100062ec:	2880202c 	andhi	r2,r5,128
100062f0:	2023883a 	mov	r17,r4
100062f4:	103f5c26 	beq	r2,zero,10006068 <__alt_data_end+0xf8006068>
100062f8:	00bfe034 	movhi	r2,65408
100062fc:	10bfffc4 	addi	r2,r2,-1
10006300:	4821883a 	mov	r16,r9
10006304:	288a703a 	and	r5,r5,r2
10006308:	003ead06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
1000630c:	2c44b03a 	or	r2,r5,r17
10006310:	8000291e 	bne	r16,zero,100063b8 <__subdf3+0x684>
10006314:	10004f1e 	bne	r2,zero,10006454 <__subdf3+0x720>
10006318:	1984b03a 	or	r2,r3,r6
1000631c:	10000426 	beq	r2,zero,10006330 <__subdf3+0x5fc>
10006320:	180b883a 	mov	r5,r3
10006324:	3023883a 	mov	r17,r6
10006328:	3825883a 	mov	r18,r7
1000632c:	003ea406 	br	10005dc0 <__alt_data_end+0xf8005dc0>
10006330:	0011883a 	mov	r8,zero
10006334:	000b883a 	mov	r5,zero
10006338:	0023883a 	mov	r17,zero
1000633c:	003f0006 	br	10005f40 <__alt_data_end+0xf8005f40>
10006340:	11fff804 	addi	r7,r2,-32
10006344:	19c8d83a 	srl	r4,r3,r7
10006348:	01c00804 	movi	r7,32
1000634c:	11c07e26 	beq	r2,r7,10006548 <__subdf3+0x814>
10006350:	01c01004 	movi	r7,64
10006354:	3885c83a 	sub	r2,r7,r2
10006358:	1884983a 	sll	r2,r3,r2
1000635c:	118cb03a 	or	r6,r2,r6
10006360:	300ec03a 	cmpne	r7,r6,zero
10006364:	390eb03a 	or	r7,r7,r4
10006368:	0005883a 	mov	r2,zero
1000636c:	003f0906 	br	10005f94 <__alt_data_end+0xf8005f94>
10006370:	0101ffc4 	movi	r4,2047
10006374:	513f991e 	bne	r10,r4,100061dc <__alt_data_end+0xf80061dc>
10006378:	180b883a 	mov	r5,r3
1000637c:	3023883a 	mov	r17,r6
10006380:	5021883a 	mov	r16,r10
10006384:	3825883a 	mov	r18,r7
10006388:	003e8d06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
1000638c:	80001a1e 	bne	r16,zero,100063f8 <__subdf3+0x6c4>
10006390:	2c48b03a 	or	r4,r5,r17
10006394:	20005526 	beq	r4,zero,100064ec <__subdf3+0x7b8>
10006398:	0084303a 	nor	r2,zero,r2
1000639c:	1000511e 	bne	r2,zero,100064e4 <__subdf3+0x7b0>
100063a0:	89a3883a 	add	r17,r17,r6
100063a4:	194b883a 	add	r5,r3,r5
100063a8:	898d803a 	cmpltu	r6,r17,r6
100063ac:	298b883a 	add	r5,r5,r6
100063b0:	5021883a 	mov	r16,r10
100063b4:	003efc06 	br	10005fa8 <__alt_data_end+0xf8005fa8>
100063b8:	1000341e 	bne	r2,zero,1000648c <__subdf3+0x758>
100063bc:	1984b03a 	or	r2,r3,r6
100063c0:	10006f26 	beq	r2,zero,10006580 <__subdf3+0x84c>
100063c4:	180b883a 	mov	r5,r3
100063c8:	3023883a 	mov	r17,r6
100063cc:	3825883a 	mov	r18,r7
100063d0:	0401ffc4 	movi	r16,2047
100063d4:	003e7a06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100063d8:	2c62b03a 	or	r17,r5,r17
100063dc:	8822c03a 	cmpne	r17,r17,zero
100063e0:	0005883a 	mov	r2,zero
100063e4:	003f8a06 	br	10006210 <__alt_data_end+0xf8006210>
100063e8:	3821883a 	mov	r16,r7
100063ec:	000b883a 	mov	r5,zero
100063f0:	0023883a 	mov	r17,zero
100063f4:	003ed206 	br	10005f40 <__alt_data_end+0xf8005f40>
100063f8:	0101ffc4 	movi	r4,2047
100063fc:	51003b26 	beq	r10,r4,100064ec <__subdf3+0x7b8>
10006400:	0085c83a 	sub	r2,zero,r2
10006404:	29402034 	orhi	r5,r5,128
10006408:	01000e04 	movi	r4,56
1000640c:	20806216 	blt	r4,r2,10006598 <__subdf3+0x864>
10006410:	010007c4 	movi	r4,31
10006414:	20806b16 	blt	r4,r2,100065c4 <__subdf3+0x890>
10006418:	01000804 	movi	r4,32
1000641c:	2089c83a 	sub	r4,r4,r2
10006420:	2912983a 	sll	r9,r5,r4
10006424:	888ed83a 	srl	r7,r17,r2
10006428:	8908983a 	sll	r4,r17,r4
1000642c:	2884d83a 	srl	r2,r5,r2
10006430:	49e2b03a 	or	r17,r9,r7
10006434:	2008c03a 	cmpne	r4,r4,zero
10006438:	8922b03a 	or	r17,r17,r4
1000643c:	89a3883a 	add	r17,r17,r6
10006440:	10c5883a 	add	r2,r2,r3
10006444:	898d803a 	cmpltu	r6,r17,r6
10006448:	118b883a 	add	r5,r2,r6
1000644c:	5021883a 	mov	r16,r10
10006450:	003ed506 	br	10005fa8 <__alt_data_end+0xf8005fa8>
10006454:	1984b03a 	or	r2,r3,r6
10006458:	103e5926 	beq	r2,zero,10005dc0 <__alt_data_end+0xf8005dc0>
1000645c:	8989c83a 	sub	r4,r17,r6
10006460:	8911803a 	cmpltu	r8,r17,r4
10006464:	28c5c83a 	sub	r2,r5,r3
10006468:	1205c83a 	sub	r2,r2,r8
1000646c:	1200202c 	andhi	r8,r2,128
10006470:	403ef926 	beq	r8,zero,10006058 <__alt_data_end+0xf8006058>
10006474:	3463c83a 	sub	r17,r6,r17
10006478:	194bc83a 	sub	r5,r3,r5
1000647c:	344d803a 	cmpltu	r6,r6,r17
10006480:	298bc83a 	sub	r5,r5,r6
10006484:	3825883a 	mov	r18,r7
10006488:	003e4d06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
1000648c:	1984b03a 	or	r2,r3,r6
10006490:	10002b26 	beq	r2,zero,10006540 <__subdf3+0x80c>
10006494:	2808d0fa 	srli	r4,r5,3
10006498:	8822d0fa 	srli	r17,r17,3
1000649c:	280a977a 	slli	r5,r5,29
100064a0:	2080022c 	andhi	r2,r4,8
100064a4:	2c62b03a 	or	r17,r5,r17
100064a8:	10000826 	beq	r2,zero,100064cc <__subdf3+0x798>
100064ac:	1810d0fa 	srli	r8,r3,3
100064b0:	4080022c 	andhi	r2,r8,8
100064b4:	1000051e 	bne	r2,zero,100064cc <__subdf3+0x798>
100064b8:	300cd0fa 	srli	r6,r6,3
100064bc:	1804977a 	slli	r2,r3,29
100064c0:	4009883a 	mov	r4,r8
100064c4:	3825883a 	mov	r18,r7
100064c8:	11a2b03a 	or	r17,r2,r6
100064cc:	880ad77a 	srli	r5,r17,29
100064d0:	200890fa 	slli	r4,r4,3
100064d4:	882290fa 	slli	r17,r17,3
100064d8:	0401ffc4 	movi	r16,2047
100064dc:	290ab03a 	or	r5,r5,r4
100064e0:	003e3706 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100064e4:	0101ffc4 	movi	r4,2047
100064e8:	513fc71e 	bne	r10,r4,10006408 <__alt_data_end+0xf8006408>
100064ec:	180b883a 	mov	r5,r3
100064f0:	3023883a 	mov	r17,r6
100064f4:	5021883a 	mov	r16,r10
100064f8:	003e3106 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100064fc:	10002d26 	beq	r2,zero,100065b4 <__subdf3+0x880>
10006500:	1984b03a 	or	r2,r3,r6
10006504:	10000e26 	beq	r2,zero,10006540 <__subdf3+0x80c>
10006508:	2808d0fa 	srli	r4,r5,3
1000650c:	8822d0fa 	srli	r17,r17,3
10006510:	280a977a 	slli	r5,r5,29
10006514:	2080022c 	andhi	r2,r4,8
10006518:	2c62b03a 	or	r17,r5,r17
1000651c:	103feb26 	beq	r2,zero,100064cc <__alt_data_end+0xf80064cc>
10006520:	180ed0fa 	srli	r7,r3,3
10006524:	3880022c 	andhi	r2,r7,8
10006528:	103fe81e 	bne	r2,zero,100064cc <__alt_data_end+0xf80064cc>
1000652c:	300cd0fa 	srli	r6,r6,3
10006530:	1804977a 	slli	r2,r3,29
10006534:	3809883a 	mov	r4,r7
10006538:	11a2b03a 	or	r17,r2,r6
1000653c:	003fe306 	br	100064cc <__alt_data_end+0xf80064cc>
10006540:	0401ffc4 	movi	r16,2047
10006544:	003e1e06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
10006548:	0005883a 	mov	r2,zero
1000654c:	003f8306 	br	1000635c <__alt_data_end+0xf800635c>
10006550:	113ff804 	addi	r4,r2,-32
10006554:	02000804 	movi	r8,32
10006558:	2908d83a 	srl	r4,r5,r4
1000655c:	12002526 	beq	r2,r8,100065f4 <__subdf3+0x8c0>
10006560:	02001004 	movi	r8,64
10006564:	4085c83a 	sub	r2,r8,r2
10006568:	288a983a 	sll	r5,r5,r2
1000656c:	2c62b03a 	or	r17,r5,r17
10006570:	8822c03a 	cmpne	r17,r17,zero
10006574:	8922b03a 	or	r17,r17,r4
10006578:	0005883a 	mov	r2,zero
1000657c:	003f2406 	br	10006210 <__alt_data_end+0xf8006210>
10006580:	01402034 	movhi	r5,128
10006584:	0011883a 	mov	r8,zero
10006588:	297fffc4 	addi	r5,r5,-1
1000658c:	047ffe04 	movi	r17,-8
10006590:	0401ffc4 	movi	r16,2047
10006594:	003e6a06 	br	10005f40 <__alt_data_end+0xf8005f40>
10006598:	2c62b03a 	or	r17,r5,r17
1000659c:	8822c03a 	cmpne	r17,r17,zero
100065a0:	0005883a 	mov	r2,zero
100065a4:	003fa506 	br	1000643c <__alt_data_end+0xf800643c>
100065a8:	180b883a 	mov	r5,r3
100065ac:	3023883a 	mov	r17,r6
100065b0:	003e0306 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100065b4:	180b883a 	mov	r5,r3
100065b8:	3023883a 	mov	r17,r6
100065bc:	0401ffc4 	movi	r16,2047
100065c0:	003dff06 	br	10005dc0 <__alt_data_end+0xf8005dc0>
100065c4:	113ff804 	addi	r4,r2,-32
100065c8:	01c00804 	movi	r7,32
100065cc:	2908d83a 	srl	r4,r5,r4
100065d0:	11c00a26 	beq	r2,r7,100065fc <__subdf3+0x8c8>
100065d4:	01c01004 	movi	r7,64
100065d8:	3885c83a 	sub	r2,r7,r2
100065dc:	288a983a 	sll	r5,r5,r2
100065e0:	2c62b03a 	or	r17,r5,r17
100065e4:	8822c03a 	cmpne	r17,r17,zero
100065e8:	8922b03a 	or	r17,r17,r4
100065ec:	0005883a 	mov	r2,zero
100065f0:	003f9206 	br	1000643c <__alt_data_end+0xf800643c>
100065f4:	000b883a 	mov	r5,zero
100065f8:	003fdc06 	br	1000656c <__alt_data_end+0xf800656c>
100065fc:	000b883a 	mov	r5,zero
10006600:	003ff706 	br	100065e0 <__alt_data_end+0xf80065e0>

10006604 <__fixdfsi>:
10006604:	2806d53a 	srli	r3,r5,20
10006608:	00800434 	movhi	r2,16
1000660c:	10bfffc4 	addi	r2,r2,-1
10006610:	18c1ffcc 	andi	r3,r3,2047
10006614:	0180ff84 	movi	r6,1022
10006618:	2884703a 	and	r2,r5,r2
1000661c:	280ad7fa 	srli	r5,r5,31
10006620:	30c0130e 	bge	r6,r3,10006670 <__fixdfsi+0x6c>
10006624:	01810744 	movi	r6,1053
10006628:	30c00d16 	blt	r6,r3,10006660 <__fixdfsi+0x5c>
1000662c:	01810cc4 	movi	r6,1075
10006630:	30cdc83a 	sub	r6,r6,r3
10006634:	01c007c4 	movi	r7,31
10006638:	10800434 	orhi	r2,r2,16
1000663c:	39800e0e 	bge	r7,r6,10006678 <__fixdfsi+0x74>
10006640:	010104c4 	movi	r4,1043
10006644:	20c7c83a 	sub	r3,r4,r3
10006648:	10c6d83a 	srl	r3,r2,r3
1000664c:	29403fcc 	andi	r5,r5,255
10006650:	0145c83a 	sub	r2,zero,r5
10006654:	1884f03a 	xor	r2,r3,r2
10006658:	1145883a 	add	r2,r2,r5
1000665c:	f800283a 	ret
10006660:	00a00034 	movhi	r2,32768
10006664:	10bfffc4 	addi	r2,r2,-1
10006668:	2885883a 	add	r2,r5,r2
1000666c:	f800283a 	ret
10006670:	0005883a 	mov	r2,zero
10006674:	f800283a 	ret
10006678:	18fefb44 	addi	r3,r3,-1043
1000667c:	2188d83a 	srl	r4,r4,r6
10006680:	10c6983a 	sll	r3,r2,r3
10006684:	20c6b03a 	or	r3,r4,r3
10006688:	003ff006 	br	1000664c <__alt_data_end+0xf800664c>

1000668c <__floatsidf>:
1000668c:	defffd04 	addi	sp,sp,-12
10006690:	dc400115 	stw	r17,4(sp)
10006694:	dfc00215 	stw	ra,8(sp)
10006698:	dc000015 	stw	r16,0(sp)
1000669c:	2023883a 	mov	r17,r4
100066a0:	20001426 	beq	r4,zero,100066f4 <__floatsidf+0x68>
100066a4:	2020d7fa 	srli	r16,r4,31
100066a8:	80000126 	beq	r16,zero,100066b0 <__floatsidf+0x24>
100066ac:	0123c83a 	sub	r17,zero,r4
100066b0:	8809883a 	mov	r4,r17
100066b4:	00068000 	call	10006800 <__clzsi2>
100066b8:	01410784 	movi	r5,1054
100066bc:	00c00284 	movi	r3,10
100066c0:	288bc83a 	sub	r5,r5,r2
100066c4:	18801c16 	blt	r3,r2,10006738 <__floatsidf+0xac>
100066c8:	00c002c4 	movi	r3,11
100066cc:	1887c83a 	sub	r3,r3,r2
100066d0:	88c8d83a 	srl	r4,r17,r3
100066d4:	00c00434 	movhi	r3,16
100066d8:	18ffffc4 	addi	r3,r3,-1
100066dc:	10800544 	addi	r2,r2,21
100066e0:	20c8703a 	and	r4,r4,r3
100066e4:	8884983a 	sll	r2,r17,r2
100066e8:	28c1ffcc 	andi	r3,r5,2047
100066ec:	800d883a 	mov	r6,r16
100066f0:	00000406 	br	10006704 <__floatsidf+0x78>
100066f4:	000d883a 	mov	r6,zero
100066f8:	0007883a 	mov	r3,zero
100066fc:	0009883a 	mov	r4,zero
10006700:	0005883a 	mov	r2,zero
10006704:	180a953a 	slli	r5,r3,20
10006708:	31803fcc 	andi	r6,r6,255
1000670c:	00c00434 	movhi	r3,16
10006710:	300c97fa 	slli	r6,r6,31
10006714:	18ffffc4 	addi	r3,r3,-1
10006718:	20c6703a 	and	r3,r4,r3
1000671c:	1946b03a 	or	r3,r3,r5
10006720:	1986b03a 	or	r3,r3,r6
10006724:	dfc00217 	ldw	ra,8(sp)
10006728:	dc400117 	ldw	r17,4(sp)
1000672c:	dc000017 	ldw	r16,0(sp)
10006730:	dec00304 	addi	sp,sp,12
10006734:	f800283a 	ret
10006738:	10fffd44 	addi	r3,r2,-11
1000673c:	88c8983a 	sll	r4,r17,r3
10006740:	00800434 	movhi	r2,16
10006744:	10bfffc4 	addi	r2,r2,-1
10006748:	2088703a 	and	r4,r4,r2
1000674c:	28c1ffcc 	andi	r3,r5,2047
10006750:	800d883a 	mov	r6,r16
10006754:	0005883a 	mov	r2,zero
10006758:	003fea06 	br	10006704 <__alt_data_end+0xf8006704>

1000675c <__floatunsidf>:
1000675c:	defffe04 	addi	sp,sp,-8
10006760:	dc000015 	stw	r16,0(sp)
10006764:	dfc00115 	stw	ra,4(sp)
10006768:	2021883a 	mov	r16,r4
1000676c:	20001026 	beq	r4,zero,100067b0 <__floatunsidf+0x54>
10006770:	00068000 	call	10006800 <__clzsi2>
10006774:	01410784 	movi	r5,1054
10006778:	100d883a 	mov	r6,r2
1000677c:	288bc83a 	sub	r5,r5,r2
10006780:	00800284 	movi	r2,10
10006784:	11801616 	blt	r2,r6,100067e0 <__floatunsidf+0x84>
10006788:	008002c4 	movi	r2,11
1000678c:	1185c83a 	sub	r2,r2,r6
10006790:	8084d83a 	srl	r2,r16,r2
10006794:	00c00434 	movhi	r3,16
10006798:	31c00544 	addi	r7,r6,21
1000679c:	18ffffc4 	addi	r3,r3,-1
100067a0:	81e0983a 	sll	r16,r16,r7
100067a4:	10cc703a 	and	r6,r2,r3
100067a8:	2941ffcc 	andi	r5,r5,2047
100067ac:	00000206 	br	100067b8 <__floatunsidf+0x5c>
100067b0:	000b883a 	mov	r5,zero
100067b4:	000d883a 	mov	r6,zero
100067b8:	280a953a 	slli	r5,r5,20
100067bc:	00c00434 	movhi	r3,16
100067c0:	18ffffc4 	addi	r3,r3,-1
100067c4:	30c6703a 	and	r3,r6,r3
100067c8:	8005883a 	mov	r2,r16
100067cc:	1946b03a 	or	r3,r3,r5
100067d0:	dfc00117 	ldw	ra,4(sp)
100067d4:	dc000017 	ldw	r16,0(sp)
100067d8:	dec00204 	addi	sp,sp,8
100067dc:	f800283a 	ret
100067e0:	31bffd44 	addi	r6,r6,-11
100067e4:	818c983a 	sll	r6,r16,r6
100067e8:	00800434 	movhi	r2,16
100067ec:	10bfffc4 	addi	r2,r2,-1
100067f0:	2941ffcc 	andi	r5,r5,2047
100067f4:	0021883a 	mov	r16,zero
100067f8:	308c703a 	and	r6,r6,r2
100067fc:	003fee06 	br	100067b8 <__alt_data_end+0xf80067b8>

10006800 <__clzsi2>:
10006800:	00bfffd4 	movui	r2,65535
10006804:	11000b36 	bltu	r2,r4,10006834 <__clzsi2+0x34>
10006808:	00803fc4 	movi	r2,255
1000680c:	1100122e 	bgeu	r2,r4,10006858 <__clzsi2+0x58>
10006810:	00c00204 	movi	r3,8
10006814:	01400604 	movi	r5,24
10006818:	20c8d83a 	srl	r4,r4,r3
1000681c:	00840074 	movhi	r2,4097
10006820:	10af0504 	addi	r2,r2,-17388
10006824:	1109883a 	add	r4,r2,r4
10006828:	20800003 	ldbu	r2,0(r4)
1000682c:	2885c83a 	sub	r2,r5,r2
10006830:	f800283a 	ret
10006834:	00804034 	movhi	r2,256
10006838:	10bfffc4 	addi	r2,r2,-1
1000683c:	11000336 	bltu	r2,r4,1000684c <__clzsi2+0x4c>
10006840:	00c00404 	movi	r3,16
10006844:	180b883a 	mov	r5,r3
10006848:	003ff306 	br	10006818 <__alt_data_end+0xf8006818>
1000684c:	00c00604 	movi	r3,24
10006850:	01400204 	movi	r5,8
10006854:	003ff006 	br	10006818 <__alt_data_end+0xf8006818>
10006858:	0007883a 	mov	r3,zero
1000685c:	01400804 	movi	r5,32
10006860:	003fed06 	br	10006818 <__alt_data_end+0xf8006818>

10006864 <__errno>:
10006864:	00840074 	movhi	r2,4097
10006868:	10b5e304 	addi	r2,r2,-10356
1000686c:	10800017 	ldw	r2,0(r2)
10006870:	f800283a 	ret

10006874 <_puts_r>:
10006874:	defff604 	addi	sp,sp,-40
10006878:	dc000715 	stw	r16,28(sp)
1000687c:	2021883a 	mov	r16,r4
10006880:	2809883a 	mov	r4,r5
10006884:	dc400815 	stw	r17,32(sp)
10006888:	dfc00915 	stw	ra,36(sp)
1000688c:	2823883a 	mov	r17,r5
10006890:	00069bc0 	call	100069bc <strlen>
10006894:	00c40074 	movhi	r3,4097
10006898:	18f5e304 	addi	r3,r3,-10356
1000689c:	18c00017 	ldw	r3,0(r3)
100068a0:	11000044 	addi	r4,r2,1
100068a4:	d8800115 	stw	r2,4(sp)
100068a8:	18c00217 	ldw	r3,8(r3)
100068ac:	01440074 	movhi	r5,4097
100068b0:	296f4604 	addi	r5,r5,-17128
100068b4:	1880030b 	ldhu	r2,12(r3)
100068b8:	d9400215 	stw	r5,8(sp)
100068bc:	d9000615 	stw	r4,24(sp)
100068c0:	01400044 	movi	r5,1
100068c4:	01000084 	movi	r4,2
100068c8:	d9000515 	stw	r4,20(sp)
100068cc:	dc400015 	stw	r17,0(sp)
100068d0:	d9400315 	stw	r5,12(sp)
100068d4:	dec00415 	stw	sp,16(sp)
100068d8:	1108000c 	andi	r4,r2,8192
100068dc:	2000061e 	bne	r4,zero,100068f8 <_puts_r+0x84>
100068e0:	19401917 	ldw	r5,100(r3)
100068e4:	0137ffc4 	movi	r4,-8193
100068e8:	10880014 	ori	r2,r2,8192
100068ec:	2908703a 	and	r4,r5,r4
100068f0:	1880030d 	sth	r2,12(r3)
100068f4:	19001915 	stw	r4,100(r3)
100068f8:	81400217 	ldw	r5,8(r16)
100068fc:	8009883a 	mov	r4,r16
10006900:	d9800404 	addi	r6,sp,16
10006904:	0006a540 	call	10006a54 <__sfvwrite_r>
10006908:	1000061e 	bne	r2,zero,10006924 <_puts_r+0xb0>
1000690c:	00800284 	movi	r2,10
10006910:	dfc00917 	ldw	ra,36(sp)
10006914:	dc400817 	ldw	r17,32(sp)
10006918:	dc000717 	ldw	r16,28(sp)
1000691c:	dec00a04 	addi	sp,sp,40
10006920:	f800283a 	ret
10006924:	00bfffc4 	movi	r2,-1
10006928:	003ff906 	br	10006910 <__alt_data_end+0xf8006910>

1000692c <puts>:
1000692c:	00840074 	movhi	r2,4097
10006930:	10b5e304 	addi	r2,r2,-10356
10006934:	200b883a 	mov	r5,r4
10006938:	11000017 	ldw	r4,0(r2)
1000693c:	00068741 	jmpi	10006874 <_puts_r>

10006940 <srand>:
10006940:	00840074 	movhi	r2,4097
10006944:	10b5e304 	addi	r2,r2,-10356
10006948:	10800017 	ldw	r2,0(r2)
1000694c:	11002915 	stw	r4,164(r2)
10006950:	10002a15 	stw	zero,168(r2)
10006954:	f800283a 	ret

10006958 <rand>:
10006958:	00840074 	movhi	r2,4097
1000695c:	defffe04 	addi	sp,sp,-8
10006960:	10b5e304 	addi	r2,r2,-10356
10006964:	dc000015 	stw	r16,0(sp)
10006968:	14000017 	ldw	r16,0(r2)
1000696c:	dfc00115 	stw	ra,4(sp)
10006970:	01932574 	movhi	r6,19605
10006974:	81002917 	ldw	r4,164(r16)
10006978:	81402a17 	ldw	r5,168(r16)
1000697c:	01d614b4 	movhi	r7,22610
10006980:	319fcb44 	addi	r6,r6,32557
10006984:	39fd0b44 	addi	r7,r7,-3027
10006988:	00031380 	call	10003138 <__muldi3>
1000698c:	11000044 	addi	r4,r2,1
10006990:	2085803a 	cmpltu	r2,r4,r2
10006994:	10c7883a 	add	r3,r2,r3
10006998:	00a00034 	movhi	r2,32768
1000699c:	10bfffc4 	addi	r2,r2,-1
100069a0:	1884703a 	and	r2,r3,r2
100069a4:	81002915 	stw	r4,164(r16)
100069a8:	80c02a15 	stw	r3,168(r16)
100069ac:	dfc00117 	ldw	ra,4(sp)
100069b0:	dc000017 	ldw	r16,0(sp)
100069b4:	dec00204 	addi	sp,sp,8
100069b8:	f800283a 	ret

100069bc <strlen>:
100069bc:	208000cc 	andi	r2,r4,3
100069c0:	10002026 	beq	r2,zero,10006a44 <strlen+0x88>
100069c4:	20800007 	ldb	r2,0(r4)
100069c8:	10002026 	beq	r2,zero,10006a4c <strlen+0x90>
100069cc:	2005883a 	mov	r2,r4
100069d0:	00000206 	br	100069dc <strlen+0x20>
100069d4:	10c00007 	ldb	r3,0(r2)
100069d8:	18001826 	beq	r3,zero,10006a3c <strlen+0x80>
100069dc:	10800044 	addi	r2,r2,1
100069e0:	10c000cc 	andi	r3,r2,3
100069e4:	183ffb1e 	bne	r3,zero,100069d4 <__alt_data_end+0xf80069d4>
100069e8:	10c00017 	ldw	r3,0(r2)
100069ec:	01ffbff4 	movhi	r7,65279
100069f0:	39ffbfc4 	addi	r7,r7,-257
100069f4:	00ca303a 	nor	r5,zero,r3
100069f8:	01a02074 	movhi	r6,32897
100069fc:	19c7883a 	add	r3,r3,r7
10006a00:	31a02004 	addi	r6,r6,-32640
10006a04:	1946703a 	and	r3,r3,r5
10006a08:	1986703a 	and	r3,r3,r6
10006a0c:	1800091e 	bne	r3,zero,10006a34 <strlen+0x78>
10006a10:	10800104 	addi	r2,r2,4
10006a14:	10c00017 	ldw	r3,0(r2)
10006a18:	19cb883a 	add	r5,r3,r7
10006a1c:	00c6303a 	nor	r3,zero,r3
10006a20:	28c6703a 	and	r3,r5,r3
10006a24:	1986703a 	and	r3,r3,r6
10006a28:	183ff926 	beq	r3,zero,10006a10 <__alt_data_end+0xf8006a10>
10006a2c:	00000106 	br	10006a34 <strlen+0x78>
10006a30:	10800044 	addi	r2,r2,1
10006a34:	10c00007 	ldb	r3,0(r2)
10006a38:	183ffd1e 	bne	r3,zero,10006a30 <__alt_data_end+0xf8006a30>
10006a3c:	1105c83a 	sub	r2,r2,r4
10006a40:	f800283a 	ret
10006a44:	2005883a 	mov	r2,r4
10006a48:	003fe706 	br	100069e8 <__alt_data_end+0xf80069e8>
10006a4c:	0005883a 	mov	r2,zero
10006a50:	f800283a 	ret

10006a54 <__sfvwrite_r>:
10006a54:	30800217 	ldw	r2,8(r6)
10006a58:	10004526 	beq	r2,zero,10006b70 <__sfvwrite_r+0x11c>
10006a5c:	28c0030b 	ldhu	r3,12(r5)
10006a60:	defff404 	addi	sp,sp,-48
10006a64:	dd400715 	stw	r21,28(sp)
10006a68:	dcc00515 	stw	r19,20(sp)
10006a6c:	dc000215 	stw	r16,8(sp)
10006a70:	dfc00b15 	stw	ra,44(sp)
10006a74:	df000a15 	stw	fp,40(sp)
10006a78:	ddc00915 	stw	r23,36(sp)
10006a7c:	dd800815 	stw	r22,32(sp)
10006a80:	dd000615 	stw	r20,24(sp)
10006a84:	dc800415 	stw	r18,16(sp)
10006a88:	dc400315 	stw	r17,12(sp)
10006a8c:	1880020c 	andi	r2,r3,8
10006a90:	2821883a 	mov	r16,r5
10006a94:	202b883a 	mov	r21,r4
10006a98:	3027883a 	mov	r19,r6
10006a9c:	10002526 	beq	r2,zero,10006b34 <__sfvwrite_r+0xe0>
10006aa0:	28800417 	ldw	r2,16(r5)
10006aa4:	10002326 	beq	r2,zero,10006b34 <__sfvwrite_r+0xe0>
10006aa8:	1880008c 	andi	r2,r3,2
10006aac:	9c400017 	ldw	r17,0(r19)
10006ab0:	10003126 	beq	r2,zero,10006b78 <__sfvwrite_r+0x124>
10006ab4:	0029883a 	mov	r20,zero
10006ab8:	0025883a 	mov	r18,zero
10006abc:	05810004 	movi	r22,1024
10006ac0:	a00d883a 	mov	r6,r20
10006ac4:	a809883a 	mov	r4,r21
10006ac8:	90002526 	beq	r18,zero,10006b60 <__sfvwrite_r+0x10c>
10006acc:	900f883a 	mov	r7,r18
10006ad0:	81400717 	ldw	r5,28(r16)
10006ad4:	b480012e 	bgeu	r22,r18,10006adc <__sfvwrite_r+0x88>
10006ad8:	01c10004 	movi	r7,1024
10006adc:	80800917 	ldw	r2,36(r16)
10006ae0:	103ee83a 	callr	r2
10006ae4:	0080510e 	bge	zero,r2,10006c2c <__sfvwrite_r+0x1d8>
10006ae8:	98c00217 	ldw	r3,8(r19)
10006aec:	a0a9883a 	add	r20,r20,r2
10006af0:	90a5c83a 	sub	r18,r18,r2
10006af4:	1885c83a 	sub	r2,r3,r2
10006af8:	98800215 	stw	r2,8(r19)
10006afc:	103ff01e 	bne	r2,zero,10006ac0 <__alt_data_end+0xf8006ac0>
10006b00:	0005883a 	mov	r2,zero
10006b04:	dfc00b17 	ldw	ra,44(sp)
10006b08:	df000a17 	ldw	fp,40(sp)
10006b0c:	ddc00917 	ldw	r23,36(sp)
10006b10:	dd800817 	ldw	r22,32(sp)
10006b14:	dd400717 	ldw	r21,28(sp)
10006b18:	dd000617 	ldw	r20,24(sp)
10006b1c:	dcc00517 	ldw	r19,20(sp)
10006b20:	dc800417 	ldw	r18,16(sp)
10006b24:	dc400317 	ldw	r17,12(sp)
10006b28:	dc000217 	ldw	r16,8(sp)
10006b2c:	dec00c04 	addi	sp,sp,48
10006b30:	f800283a 	ret
10006b34:	a809883a 	mov	r4,r21
10006b38:	800b883a 	mov	r5,r16
10006b3c:	00080100 	call	10008010 <__swsetup_r>
10006b40:	80c0030b 	ldhu	r3,12(r16)
10006b44:	103fd826 	beq	r2,zero,10006aa8 <__alt_data_end+0xf8006aa8>
10006b48:	18c01014 	ori	r3,r3,64
10006b4c:	80c0030d 	sth	r3,12(r16)
10006b50:	00c00244 	movi	r3,9
10006b54:	00bfffc4 	movi	r2,-1
10006b58:	a8c00015 	stw	r3,0(r21)
10006b5c:	003fe906 	br	10006b04 <__alt_data_end+0xf8006b04>
10006b60:	8d000017 	ldw	r20,0(r17)
10006b64:	8c800117 	ldw	r18,4(r17)
10006b68:	8c400204 	addi	r17,r17,8
10006b6c:	003fd406 	br	10006ac0 <__alt_data_end+0xf8006ac0>
10006b70:	0005883a 	mov	r2,zero
10006b74:	f800283a 	ret
10006b78:	1880004c 	andi	r2,r3,1
10006b7c:	1000301e 	bne	r2,zero,10006c40 <__sfvwrite_r+0x1ec>
10006b80:	002f883a 	mov	r23,zero
10006b84:	0025883a 	mov	r18,zero
10006b88:	90001c26 	beq	r18,zero,10006bfc <__sfvwrite_r+0x1a8>
10006b8c:	1880800c 	andi	r2,r3,512
10006b90:	85000217 	ldw	r20,8(r16)
10006b94:	10006c26 	beq	r2,zero,10006d48 <__sfvwrite_r+0x2f4>
10006b98:	a02d883a 	mov	r22,r20
10006b9c:	95008536 	bltu	r18,r20,10006db4 <__sfvwrite_r+0x360>
10006ba0:	1881200c 	andi	r2,r3,1152
10006ba4:	10009d1e 	bne	r2,zero,10006e1c <__sfvwrite_r+0x3c8>
10006ba8:	81000017 	ldw	r4,0(r16)
10006bac:	a039883a 	mov	fp,r20
10006bb0:	9029883a 	mov	r20,r18
10006bb4:	b80b883a 	mov	r5,r23
10006bb8:	b00d883a 	mov	r6,r22
10006bbc:	00078c00 	call	100078c0 <memmove>
10006bc0:	80c00217 	ldw	r3,8(r16)
10006bc4:	81000017 	ldw	r4,0(r16)
10006bc8:	9005883a 	mov	r2,r18
10006bcc:	1f39c83a 	sub	fp,r3,fp
10006bd0:	258f883a 	add	r7,r4,r22
10006bd4:	87000215 	stw	fp,8(r16)
10006bd8:	81c00015 	stw	r7,0(r16)
10006bdc:	98c00217 	ldw	r3,8(r19)
10006be0:	b8af883a 	add	r23,r23,r2
10006be4:	90a5c83a 	sub	r18,r18,r2
10006be8:	1d05c83a 	sub	r2,r3,r20
10006bec:	98800215 	stw	r2,8(r19)
10006bf0:	103fc326 	beq	r2,zero,10006b00 <__alt_data_end+0xf8006b00>
10006bf4:	80c0030b 	ldhu	r3,12(r16)
10006bf8:	903fe41e 	bne	r18,zero,10006b8c <__alt_data_end+0xf8006b8c>
10006bfc:	8dc00017 	ldw	r23,0(r17)
10006c00:	8c800117 	ldw	r18,4(r17)
10006c04:	8c400204 	addi	r17,r17,8
10006c08:	003fdf06 	br	10006b88 <__alt_data_end+0xf8006b88>
10006c0c:	0007a1c0 	call	10007a1c <_realloc_r>
10006c10:	102d883a 	mov	r22,r2
10006c14:	1000a01e 	bne	r2,zero,10006e98 <__sfvwrite_r+0x444>
10006c18:	81400417 	ldw	r5,16(r16)
10006c1c:	a809883a 	mov	r4,r21
10006c20:	00088700 	call	10008870 <_free_r>
10006c24:	00800304 	movi	r2,12
10006c28:	a8800015 	stw	r2,0(r21)
10006c2c:	80c0030b 	ldhu	r3,12(r16)
10006c30:	00bfffc4 	movi	r2,-1
10006c34:	18c01014 	ori	r3,r3,64
10006c38:	80c0030d 	sth	r3,12(r16)
10006c3c:	003fb106 	br	10006b04 <__alt_data_end+0xf8006b04>
10006c40:	0029883a 	mov	r20,zero
10006c44:	0011883a 	mov	r8,zero
10006c48:	0039883a 	mov	fp,zero
10006c4c:	0025883a 	mov	r18,zero
10006c50:	90001f26 	beq	r18,zero,10006cd0 <__sfvwrite_r+0x27c>
10006c54:	40006826 	beq	r8,zero,10006df8 <__sfvwrite_r+0x3a4>
10006c58:	a02f883a 	mov	r23,r20
10006c5c:	9500012e 	bgeu	r18,r20,10006c64 <__sfvwrite_r+0x210>
10006c60:	902f883a 	mov	r23,r18
10006c64:	81000017 	ldw	r4,0(r16)
10006c68:	80800417 	ldw	r2,16(r16)
10006c6c:	b82d883a 	mov	r22,r23
10006c70:	81800217 	ldw	r6,8(r16)
10006c74:	81c00517 	ldw	r7,20(r16)
10006c78:	1100022e 	bgeu	r2,r4,10006c84 <__sfvwrite_r+0x230>
10006c7c:	31c7883a 	add	r3,r6,r7
10006c80:	1dc01816 	blt	r3,r23,10006ce4 <__sfvwrite_r+0x290>
10006c84:	b9c03f16 	blt	r23,r7,10006d84 <__sfvwrite_r+0x330>
10006c88:	80800917 	ldw	r2,36(r16)
10006c8c:	81400717 	ldw	r5,28(r16)
10006c90:	a809883a 	mov	r4,r21
10006c94:	da000115 	stw	r8,4(sp)
10006c98:	e00d883a 	mov	r6,fp
10006c9c:	103ee83a 	callr	r2
10006ca0:	102d883a 	mov	r22,r2
10006ca4:	da000117 	ldw	r8,4(sp)
10006ca8:	00bfe00e 	bge	zero,r2,10006c2c <__alt_data_end+0xf8006c2c>
10006cac:	a5a9c83a 	sub	r20,r20,r22
10006cb0:	a0001f26 	beq	r20,zero,10006d30 <__sfvwrite_r+0x2dc>
10006cb4:	98800217 	ldw	r2,8(r19)
10006cb8:	e5b9883a 	add	fp,fp,r22
10006cbc:	95a5c83a 	sub	r18,r18,r22
10006cc0:	15adc83a 	sub	r22,r2,r22
10006cc4:	9d800215 	stw	r22,8(r19)
10006cc8:	b03f8d26 	beq	r22,zero,10006b00 <__alt_data_end+0xf8006b00>
10006ccc:	903fe11e 	bne	r18,zero,10006c54 <__alt_data_end+0xf8006c54>
10006cd0:	8f000017 	ldw	fp,0(r17)
10006cd4:	8c800117 	ldw	r18,4(r17)
10006cd8:	0011883a 	mov	r8,zero
10006cdc:	8c400204 	addi	r17,r17,8
10006ce0:	003fdb06 	br	10006c50 <__alt_data_end+0xf8006c50>
10006ce4:	180d883a 	mov	r6,r3
10006ce8:	e00b883a 	mov	r5,fp
10006cec:	da000115 	stw	r8,4(sp)
10006cf0:	d8c00015 	stw	r3,0(sp)
10006cf4:	00078c00 	call	100078c0 <memmove>
10006cf8:	d8c00017 	ldw	r3,0(sp)
10006cfc:	80800017 	ldw	r2,0(r16)
10006d00:	a809883a 	mov	r4,r21
10006d04:	800b883a 	mov	r5,r16
10006d08:	10c5883a 	add	r2,r2,r3
10006d0c:	80800015 	stw	r2,0(r16)
10006d10:	d8c00015 	stw	r3,0(sp)
10006d14:	00081400 	call	10008140 <_fflush_r>
10006d18:	d8c00017 	ldw	r3,0(sp)
10006d1c:	da000117 	ldw	r8,4(sp)
10006d20:	103fc21e 	bne	r2,zero,10006c2c <__alt_data_end+0xf8006c2c>
10006d24:	182d883a 	mov	r22,r3
10006d28:	a5a9c83a 	sub	r20,r20,r22
10006d2c:	a03fe11e 	bne	r20,zero,10006cb4 <__alt_data_end+0xf8006cb4>
10006d30:	a809883a 	mov	r4,r21
10006d34:	800b883a 	mov	r5,r16
10006d38:	00081400 	call	10008140 <_fflush_r>
10006d3c:	103fbb1e 	bne	r2,zero,10006c2c <__alt_data_end+0xf8006c2c>
10006d40:	0011883a 	mov	r8,zero
10006d44:	003fdb06 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10006d48:	81000017 	ldw	r4,0(r16)
10006d4c:	80800417 	ldw	r2,16(r16)
10006d50:	1100012e 	bgeu	r2,r4,10006d58 <__sfvwrite_r+0x304>
10006d54:	a4805a36 	bltu	r20,r18,10006ec0 <__sfvwrite_r+0x46c>
10006d58:	81c00517 	ldw	r7,20(r16)
10006d5c:	91c01a36 	bltu	r18,r7,10006dc8 <__sfvwrite_r+0x374>
10006d60:	80800917 	ldw	r2,36(r16)
10006d64:	81400717 	ldw	r5,28(r16)
10006d68:	a809883a 	mov	r4,r21
10006d6c:	b80d883a 	mov	r6,r23
10006d70:	103ee83a 	callr	r2
10006d74:	1029883a 	mov	r20,r2
10006d78:	00bfac0e 	bge	zero,r2,10006c2c <__alt_data_end+0xf8006c2c>
10006d7c:	a005883a 	mov	r2,r20
10006d80:	003f9606 	br	10006bdc <__alt_data_end+0xf8006bdc>
10006d84:	b80d883a 	mov	r6,r23
10006d88:	e00b883a 	mov	r5,fp
10006d8c:	da000115 	stw	r8,4(sp)
10006d90:	00078c00 	call	100078c0 <memmove>
10006d94:	80800217 	ldw	r2,8(r16)
10006d98:	80c00017 	ldw	r3,0(r16)
10006d9c:	da000117 	ldw	r8,4(sp)
10006da0:	15c5c83a 	sub	r2,r2,r23
10006da4:	1def883a 	add	r23,r3,r23
10006da8:	80800215 	stw	r2,8(r16)
10006dac:	85c00015 	stw	r23,0(r16)
10006db0:	003fbe06 	br	10006cac <__alt_data_end+0xf8006cac>
10006db4:	81000017 	ldw	r4,0(r16)
10006db8:	9039883a 	mov	fp,r18
10006dbc:	9029883a 	mov	r20,r18
10006dc0:	902d883a 	mov	r22,r18
10006dc4:	003f7b06 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006dc8:	b80b883a 	mov	r5,r23
10006dcc:	900d883a 	mov	r6,r18
10006dd0:	00078c00 	call	100078c0 <memmove>
10006dd4:	80c00217 	ldw	r3,8(r16)
10006dd8:	80800017 	ldw	r2,0(r16)
10006ddc:	9029883a 	mov	r20,r18
10006de0:	1c87c83a 	sub	r3,r3,r18
10006de4:	1485883a 	add	r2,r2,r18
10006de8:	80800015 	stw	r2,0(r16)
10006dec:	80c00215 	stw	r3,8(r16)
10006df0:	9005883a 	mov	r2,r18
10006df4:	003f7906 	br	10006bdc <__alt_data_end+0xf8006bdc>
10006df8:	e009883a 	mov	r4,fp
10006dfc:	01400284 	movi	r5,10
10006e00:	900d883a 	mov	r6,r18
10006e04:	00076a00 	call	100076a0 <memchr>
10006e08:	10003826 	beq	r2,zero,10006eec <__sfvwrite_r+0x498>
10006e0c:	10800044 	addi	r2,r2,1
10006e10:	1729c83a 	sub	r20,r2,fp
10006e14:	02000044 	movi	r8,1
10006e18:	003f8f06 	br	10006c58 <__alt_data_end+0xf8006c58>
10006e1c:	80800517 	ldw	r2,20(r16)
10006e20:	81400417 	ldw	r5,16(r16)
10006e24:	87000017 	ldw	fp,0(r16)
10006e28:	10a9883a 	add	r20,r2,r2
10006e2c:	a085883a 	add	r2,r20,r2
10006e30:	1028d7fa 	srli	r20,r2,31
10006e34:	e179c83a 	sub	fp,fp,r5
10006e38:	e1000044 	addi	r4,fp,1
10006e3c:	a085883a 	add	r2,r20,r2
10006e40:	1029d07a 	srai	r20,r2,1
10006e44:	2485883a 	add	r2,r4,r18
10006e48:	a00d883a 	mov	r6,r20
10006e4c:	a080022e 	bgeu	r20,r2,10006e58 <__sfvwrite_r+0x404>
10006e50:	1029883a 	mov	r20,r2
10006e54:	100d883a 	mov	r6,r2
10006e58:	18c1000c 	andi	r3,r3,1024
10006e5c:	a809883a 	mov	r4,r21
10006e60:	183f6a26 	beq	r3,zero,10006c0c <__alt_data_end+0xf8006c0c>
10006e64:	300b883a 	mov	r5,r6
10006e68:	0006ef80 	call	10006ef8 <_malloc_r>
10006e6c:	102d883a 	mov	r22,r2
10006e70:	103f6c26 	beq	r2,zero,10006c24 <__alt_data_end+0xf8006c24>
10006e74:	81400417 	ldw	r5,16(r16)
10006e78:	1009883a 	mov	r4,r2
10006e7c:	e00d883a 	mov	r6,fp
10006e80:	00077880 	call	10007788 <memcpy>
10006e84:	8080030b 	ldhu	r2,12(r16)
10006e88:	00fedfc4 	movi	r3,-1153
10006e8c:	10c4703a 	and	r2,r2,r3
10006e90:	10802014 	ori	r2,r2,128
10006e94:	8080030d 	sth	r2,12(r16)
10006e98:	b709883a 	add	r4,r22,fp
10006e9c:	a707c83a 	sub	r3,r20,fp
10006ea0:	85800415 	stw	r22,16(r16)
10006ea4:	85000515 	stw	r20,20(r16)
10006ea8:	81000015 	stw	r4,0(r16)
10006eac:	9039883a 	mov	fp,r18
10006eb0:	80c00215 	stw	r3,8(r16)
10006eb4:	9029883a 	mov	r20,r18
10006eb8:	902d883a 	mov	r22,r18
10006ebc:	003f3d06 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006ec0:	b80b883a 	mov	r5,r23
10006ec4:	a00d883a 	mov	r6,r20
10006ec8:	00078c00 	call	100078c0 <memmove>
10006ecc:	80800017 	ldw	r2,0(r16)
10006ed0:	a809883a 	mov	r4,r21
10006ed4:	800b883a 	mov	r5,r16
10006ed8:	1505883a 	add	r2,r2,r20
10006edc:	80800015 	stw	r2,0(r16)
10006ee0:	00081400 	call	10008140 <_fflush_r>
10006ee4:	103fa526 	beq	r2,zero,10006d7c <__alt_data_end+0xf8006d7c>
10006ee8:	003f5006 	br	10006c2c <__alt_data_end+0xf8006c2c>
10006eec:	95000044 	addi	r20,r18,1
10006ef0:	02000044 	movi	r8,1
10006ef4:	003f5806 	br	10006c58 <__alt_data_end+0xf8006c58>

10006ef8 <_malloc_r>:
10006ef8:	defff504 	addi	sp,sp,-44
10006efc:	dc800315 	stw	r18,12(sp)
10006f00:	dfc00a15 	stw	ra,40(sp)
10006f04:	df000915 	stw	fp,36(sp)
10006f08:	ddc00815 	stw	r23,32(sp)
10006f0c:	dd800715 	stw	r22,28(sp)
10006f10:	dd400615 	stw	r21,24(sp)
10006f14:	dd000515 	stw	r20,20(sp)
10006f18:	dcc00415 	stw	r19,16(sp)
10006f1c:	dc400215 	stw	r17,8(sp)
10006f20:	dc000115 	stw	r16,4(sp)
10006f24:	288002c4 	addi	r2,r5,11
10006f28:	00c00584 	movi	r3,22
10006f2c:	2025883a 	mov	r18,r4
10006f30:	18802a2e 	bgeu	r3,r2,10006fdc <_malloc_r+0xe4>
10006f34:	047ffe04 	movi	r17,-8
10006f38:	1462703a 	and	r17,r2,r17
10006f3c:	88009e16 	blt	r17,zero,100071b8 <_malloc_r+0x2c0>
10006f40:	89409d36 	bltu	r17,r5,100071b8 <_malloc_r+0x2c0>
10006f44:	00099f00 	call	100099f0 <__malloc_lock>
10006f48:	00807dc4 	movi	r2,503
10006f4c:	14402736 	bltu	r2,r17,10006fec <_malloc_r+0xf4>
10006f50:	8806d0fa 	srli	r3,r17,3
10006f54:	04c40074 	movhi	r19,4097
10006f58:	9cf05d04 	addi	r19,r19,-16012
10006f5c:	18c5883a 	add	r2,r3,r3
10006f60:	1085883a 	add	r2,r2,r2
10006f64:	1085883a 	add	r2,r2,r2
10006f68:	9885883a 	add	r2,r19,r2
10006f6c:	14000317 	ldw	r16,12(r2)
10006f70:	80814a26 	beq	r16,r2,1000749c <_malloc_r+0x5a4>
10006f74:	80c00117 	ldw	r3,4(r16)
10006f78:	81000317 	ldw	r4,12(r16)
10006f7c:	00bfff04 	movi	r2,-4
10006f80:	1884703a 	and	r2,r3,r2
10006f84:	81400217 	ldw	r5,8(r16)
10006f88:	8085883a 	add	r2,r16,r2
10006f8c:	10c00117 	ldw	r3,4(r2)
10006f90:	29000315 	stw	r4,12(r5)
10006f94:	21400215 	stw	r5,8(r4)
10006f98:	18c00054 	ori	r3,r3,1
10006f9c:	10c00115 	stw	r3,4(r2)
10006fa0:	9009883a 	mov	r4,r18
10006fa4:	0009a100 	call	10009a10 <__malloc_unlock>
10006fa8:	80800204 	addi	r2,r16,8
10006fac:	dfc00a17 	ldw	ra,40(sp)
10006fb0:	df000917 	ldw	fp,36(sp)
10006fb4:	ddc00817 	ldw	r23,32(sp)
10006fb8:	dd800717 	ldw	r22,28(sp)
10006fbc:	dd400617 	ldw	r21,24(sp)
10006fc0:	dd000517 	ldw	r20,20(sp)
10006fc4:	dcc00417 	ldw	r19,16(sp)
10006fc8:	dc800317 	ldw	r18,12(sp)
10006fcc:	dc400217 	ldw	r17,8(sp)
10006fd0:	dc000117 	ldw	r16,4(sp)
10006fd4:	dec00b04 	addi	sp,sp,44
10006fd8:	f800283a 	ret
10006fdc:	04400404 	movi	r17,16
10006fe0:	89407536 	bltu	r17,r5,100071b8 <_malloc_r+0x2c0>
10006fe4:	00099f00 	call	100099f0 <__malloc_lock>
10006fe8:	003fd906 	br	10006f50 <__alt_data_end+0xf8006f50>
10006fec:	8806d27a 	srli	r3,r17,9
10006ff0:	18007526 	beq	r3,zero,100071c8 <_malloc_r+0x2d0>
10006ff4:	00800104 	movi	r2,4
10006ff8:	10c0ef36 	bltu	r2,r3,100073b8 <_malloc_r+0x4c0>
10006ffc:	8806d1ba 	srli	r3,r17,6
10007000:	19c00e04 	addi	r7,r3,56
10007004:	39cb883a 	add	r5,r7,r7
10007008:	04c40074 	movhi	r19,4097
1000700c:	294b883a 	add	r5,r5,r5
10007010:	9cf05d04 	addi	r19,r19,-16012
10007014:	294b883a 	add	r5,r5,r5
10007018:	994b883a 	add	r5,r19,r5
1000701c:	2c000317 	ldw	r16,12(r5)
10007020:	2c000e26 	beq	r5,r16,1000705c <_malloc_r+0x164>
10007024:	80800117 	ldw	r2,4(r16)
10007028:	01bfff04 	movi	r6,-4
1000702c:	010003c4 	movi	r4,15
10007030:	1184703a 	and	r2,r2,r6
10007034:	1447c83a 	sub	r3,r2,r17
10007038:	20c00716 	blt	r4,r3,10007058 <_malloc_r+0x160>
1000703c:	1800650e 	bge	r3,zero,100071d4 <_malloc_r+0x2dc>
10007040:	84000317 	ldw	r16,12(r16)
10007044:	2c000526 	beq	r5,r16,1000705c <_malloc_r+0x164>
10007048:	80800117 	ldw	r2,4(r16)
1000704c:	1184703a 	and	r2,r2,r6
10007050:	1447c83a 	sub	r3,r2,r17
10007054:	20fff90e 	bge	r4,r3,1000703c <__alt_data_end+0xf800703c>
10007058:	39ffffc4 	addi	r7,r7,-1
1000705c:	38c00044 	addi	r3,r7,1
10007060:	01840074 	movhi	r6,4097
10007064:	9c000417 	ldw	r16,16(r19)
10007068:	31b05d04 	addi	r6,r6,-16012
1000706c:	32400204 	addi	r9,r6,8
10007070:	82410326 	beq	r16,r9,10007480 <_malloc_r+0x588>
10007074:	81000117 	ldw	r4,4(r16)
10007078:	00bfff04 	movi	r2,-4
1000707c:	208e703a 	and	r7,r4,r2
10007080:	3c45c83a 	sub	r2,r7,r17
10007084:	010003c4 	movi	r4,15
10007088:	2080ee16 	blt	r4,r2,10007444 <_malloc_r+0x54c>
1000708c:	32400515 	stw	r9,20(r6)
10007090:	32400415 	stw	r9,16(r6)
10007094:	1000510e 	bge	r2,zero,100071dc <_malloc_r+0x2e4>
10007098:	00807fc4 	movi	r2,511
1000709c:	11c0ce36 	bltu	r2,r7,100073d8 <_malloc_r+0x4e0>
100070a0:	3808d0fa 	srli	r4,r7,3
100070a4:	01c00044 	movi	r7,1
100070a8:	30800117 	ldw	r2,4(r6)
100070ac:	210b883a 	add	r5,r4,r4
100070b0:	294b883a 	add	r5,r5,r5
100070b4:	2009d0ba 	srai	r4,r4,2
100070b8:	294b883a 	add	r5,r5,r5
100070bc:	298b883a 	add	r5,r5,r6
100070c0:	2a000217 	ldw	r8,8(r5)
100070c4:	3908983a 	sll	r4,r7,r4
100070c8:	81400315 	stw	r5,12(r16)
100070cc:	82000215 	stw	r8,8(r16)
100070d0:	2088b03a 	or	r4,r4,r2
100070d4:	2c000215 	stw	r16,8(r5)
100070d8:	31000115 	stw	r4,4(r6)
100070dc:	44000315 	stw	r16,12(r8)
100070e0:	1805d0ba 	srai	r2,r3,2
100070e4:	01400044 	movi	r5,1
100070e8:	288a983a 	sll	r5,r5,r2
100070ec:	21404336 	bltu	r4,r5,100071fc <_malloc_r+0x304>
100070f0:	2144703a 	and	r2,r4,r5
100070f4:	10000a1e 	bne	r2,zero,10007120 <_malloc_r+0x228>
100070f8:	00bfff04 	movi	r2,-4
100070fc:	294b883a 	add	r5,r5,r5
10007100:	1886703a 	and	r3,r3,r2
10007104:	2144703a 	and	r2,r4,r5
10007108:	18c00104 	addi	r3,r3,4
1000710c:	1000041e 	bne	r2,zero,10007120 <_malloc_r+0x228>
10007110:	294b883a 	add	r5,r5,r5
10007114:	2144703a 	and	r2,r4,r5
10007118:	18c00104 	addi	r3,r3,4
1000711c:	103ffc26 	beq	r2,zero,10007110 <__alt_data_end+0xf8007110>
10007120:	023fff04 	movi	r8,-4
10007124:	01c003c4 	movi	r7,15
10007128:	18c5883a 	add	r2,r3,r3
1000712c:	1085883a 	add	r2,r2,r2
10007130:	1085883a 	add	r2,r2,r2
10007134:	9895883a 	add	r10,r19,r2
10007138:	52c00304 	addi	r11,r10,12
1000713c:	1819883a 	mov	r12,r3
10007140:	5c000017 	ldw	r16,0(r11)
10007144:	59bffd04 	addi	r6,r11,-12
10007148:	8180041e 	bne	r16,r6,1000715c <_malloc_r+0x264>
1000714c:	0000ce06 	br	10007488 <_malloc_r+0x590>
10007150:	2000d70e 	bge	r4,zero,100074b0 <_malloc_r+0x5b8>
10007154:	84000317 	ldw	r16,12(r16)
10007158:	8180cb26 	beq	r16,r6,10007488 <_malloc_r+0x590>
1000715c:	80800117 	ldw	r2,4(r16)
10007160:	1204703a 	and	r2,r2,r8
10007164:	1449c83a 	sub	r4,r2,r17
10007168:	393ff90e 	bge	r7,r4,10007150 <__alt_data_end+0xf8007150>
1000716c:	80800317 	ldw	r2,12(r16)
10007170:	80c00217 	ldw	r3,8(r16)
10007174:	89400054 	ori	r5,r17,1
10007178:	81400115 	stw	r5,4(r16)
1000717c:	18800315 	stw	r2,12(r3)
10007180:	10c00215 	stw	r3,8(r2)
10007184:	8463883a 	add	r17,r16,r17
10007188:	9c400515 	stw	r17,20(r19)
1000718c:	9c400415 	stw	r17,16(r19)
10007190:	20800054 	ori	r2,r4,1
10007194:	88800115 	stw	r2,4(r17)
10007198:	8a400315 	stw	r9,12(r17)
1000719c:	8a400215 	stw	r9,8(r17)
100071a0:	8923883a 	add	r17,r17,r4
100071a4:	89000015 	stw	r4,0(r17)
100071a8:	9009883a 	mov	r4,r18
100071ac:	0009a100 	call	10009a10 <__malloc_unlock>
100071b0:	80800204 	addi	r2,r16,8
100071b4:	003f7d06 	br	10006fac <__alt_data_end+0xf8006fac>
100071b8:	00800304 	movi	r2,12
100071bc:	90800015 	stw	r2,0(r18)
100071c0:	0005883a 	mov	r2,zero
100071c4:	003f7906 	br	10006fac <__alt_data_end+0xf8006fac>
100071c8:	01401f84 	movi	r5,126
100071cc:	01c00fc4 	movi	r7,63
100071d0:	003f8d06 	br	10007008 <__alt_data_end+0xf8007008>
100071d4:	81000317 	ldw	r4,12(r16)
100071d8:	003f6a06 	br	10006f84 <__alt_data_end+0xf8006f84>
100071dc:	81c5883a 	add	r2,r16,r7
100071e0:	10c00117 	ldw	r3,4(r2)
100071e4:	9009883a 	mov	r4,r18
100071e8:	18c00054 	ori	r3,r3,1
100071ec:	10c00115 	stw	r3,4(r2)
100071f0:	0009a100 	call	10009a10 <__malloc_unlock>
100071f4:	80800204 	addi	r2,r16,8
100071f8:	003f6c06 	br	10006fac <__alt_data_end+0xf8006fac>
100071fc:	9c000217 	ldw	r16,8(r19)
10007200:	00bfff04 	movi	r2,-4
10007204:	85800117 	ldw	r22,4(r16)
10007208:	b0ac703a 	and	r22,r22,r2
1000720c:	b4400336 	bltu	r22,r17,1000721c <_malloc_r+0x324>
10007210:	b445c83a 	sub	r2,r22,r17
10007214:	00c003c4 	movi	r3,15
10007218:	18805d16 	blt	r3,r2,10007390 <_malloc_r+0x498>
1000721c:	05c40074 	movhi	r23,4097
10007220:	00840074 	movhi	r2,4097
10007224:	bdf5e404 	addi	r23,r23,-10352
10007228:	10bc9504 	addi	r2,r2,-3500
1000722c:	15400017 	ldw	r21,0(r2)
10007230:	b9000017 	ldw	r4,0(r23)
10007234:	00ffffc4 	movi	r3,-1
10007238:	858d883a 	add	r6,r16,r22
1000723c:	8d6b883a 	add	r21,r17,r21
10007240:	20c0e426 	beq	r4,r3,100075d4 <_malloc_r+0x6dc>
10007244:	ad4403c4 	addi	r21,r21,4111
10007248:	00fc0004 	movi	r3,-4096
1000724c:	a8ea703a 	and	r21,r21,r3
10007250:	9009883a 	mov	r4,r18
10007254:	a80b883a 	mov	r5,r21
10007258:	d9800015 	stw	r6,0(sp)
1000725c:	0007fbc0 	call	10007fbc <_sbrk_r>
10007260:	00ffffc4 	movi	r3,-1
10007264:	1029883a 	mov	r20,r2
10007268:	d9800017 	ldw	r6,0(sp)
1000726c:	10c0a426 	beq	r2,r3,10007500 <_malloc_r+0x608>
10007270:	1180a236 	bltu	r2,r6,100074fc <_malloc_r+0x604>
10007274:	07040074 	movhi	fp,4097
10007278:	e73c9e04 	addi	fp,fp,-3464
1000727c:	e0c00017 	ldw	r3,0(fp)
10007280:	a8c7883a 	add	r3,r21,r3
10007284:	e0c00015 	stw	r3,0(fp)
10007288:	3500da26 	beq	r6,r20,100075f4 <_malloc_r+0x6fc>
1000728c:	b9000017 	ldw	r4,0(r23)
10007290:	00bfffc4 	movi	r2,-1
10007294:	2080e426 	beq	r4,r2,10007628 <_malloc_r+0x730>
10007298:	a185c83a 	sub	r2,r20,r6
1000729c:	1885883a 	add	r2,r3,r2
100072a0:	e0800015 	stw	r2,0(fp)
100072a4:	a0c001cc 	andi	r3,r20,7
100072a8:	1800b526 	beq	r3,zero,10007580 <_malloc_r+0x688>
100072ac:	a0e9c83a 	sub	r20,r20,r3
100072b0:	00840204 	movi	r2,4104
100072b4:	a5000204 	addi	r20,r20,8
100072b8:	10c7c83a 	sub	r3,r2,r3
100072bc:	a545883a 	add	r2,r20,r21
100072c0:	1083ffcc 	andi	r2,r2,4095
100072c4:	18abc83a 	sub	r21,r3,r2
100072c8:	9009883a 	mov	r4,r18
100072cc:	a80b883a 	mov	r5,r21
100072d0:	0007fbc0 	call	10007fbc <_sbrk_r>
100072d4:	00ffffc4 	movi	r3,-1
100072d8:	10c0d026 	beq	r2,r3,1000761c <_malloc_r+0x724>
100072dc:	1507c83a 	sub	r3,r2,r20
100072e0:	a8c7883a 	add	r3,r21,r3
100072e4:	18c00054 	ori	r3,r3,1
100072e8:	e0800017 	ldw	r2,0(fp)
100072ec:	9d000215 	stw	r20,8(r19)
100072f0:	a0c00115 	stw	r3,4(r20)
100072f4:	a887883a 	add	r3,r21,r2
100072f8:	e0c00015 	stw	r3,0(fp)
100072fc:	84c00e26 	beq	r16,r19,10007338 <_malloc_r+0x440>
10007300:	018003c4 	movi	r6,15
10007304:	3580a02e 	bgeu	r6,r22,10007588 <_malloc_r+0x690>
10007308:	81400117 	ldw	r5,4(r16)
1000730c:	013ffe04 	movi	r4,-8
10007310:	b0bffd04 	addi	r2,r22,-12
10007314:	1104703a 	and	r2,r2,r4
10007318:	2900004c 	andi	r4,r5,1
1000731c:	1108b03a 	or	r4,r2,r4
10007320:	81000115 	stw	r4,4(r16)
10007324:	01400144 	movi	r5,5
10007328:	8089883a 	add	r4,r16,r2
1000732c:	21400115 	stw	r5,4(r4)
10007330:	21400215 	stw	r5,8(r4)
10007334:	3080c036 	bltu	r6,r2,10007638 <_malloc_r+0x740>
10007338:	00840074 	movhi	r2,4097
1000733c:	10bc9404 	addi	r2,r2,-3504
10007340:	11000017 	ldw	r4,0(r2)
10007344:	20c0012e 	bgeu	r4,r3,1000734c <_malloc_r+0x454>
10007348:	10c00015 	stw	r3,0(r2)
1000734c:	00840074 	movhi	r2,4097
10007350:	10bc9304 	addi	r2,r2,-3508
10007354:	11000017 	ldw	r4,0(r2)
10007358:	9c000217 	ldw	r16,8(r19)
1000735c:	20c0012e 	bgeu	r4,r3,10007364 <_malloc_r+0x46c>
10007360:	10c00015 	stw	r3,0(r2)
10007364:	80c00117 	ldw	r3,4(r16)
10007368:	00bfff04 	movi	r2,-4
1000736c:	1886703a 	and	r3,r3,r2
10007370:	1c45c83a 	sub	r2,r3,r17
10007374:	1c400236 	bltu	r3,r17,10007380 <_malloc_r+0x488>
10007378:	00c003c4 	movi	r3,15
1000737c:	18800416 	blt	r3,r2,10007390 <_malloc_r+0x498>
10007380:	9009883a 	mov	r4,r18
10007384:	0009a100 	call	10009a10 <__malloc_unlock>
10007388:	0005883a 	mov	r2,zero
1000738c:	003f0706 	br	10006fac <__alt_data_end+0xf8006fac>
10007390:	88c00054 	ori	r3,r17,1
10007394:	80c00115 	stw	r3,4(r16)
10007398:	8463883a 	add	r17,r16,r17
1000739c:	10800054 	ori	r2,r2,1
100073a0:	9c400215 	stw	r17,8(r19)
100073a4:	88800115 	stw	r2,4(r17)
100073a8:	9009883a 	mov	r4,r18
100073ac:	0009a100 	call	10009a10 <__malloc_unlock>
100073b0:	80800204 	addi	r2,r16,8
100073b4:	003efd06 	br	10006fac <__alt_data_end+0xf8006fac>
100073b8:	00800504 	movi	r2,20
100073bc:	10c0482e 	bgeu	r2,r3,100074e0 <_malloc_r+0x5e8>
100073c0:	00801504 	movi	r2,84
100073c4:	10c06836 	bltu	r2,r3,10007568 <_malloc_r+0x670>
100073c8:	8806d33a 	srli	r3,r17,12
100073cc:	19c01b84 	addi	r7,r3,110
100073d0:	39cb883a 	add	r5,r7,r7
100073d4:	003f0c06 	br	10007008 <__alt_data_end+0xf8007008>
100073d8:	3804d27a 	srli	r2,r7,9
100073dc:	01000104 	movi	r4,4
100073e0:	2080422e 	bgeu	r4,r2,100074ec <_malloc_r+0x5f4>
100073e4:	01000504 	movi	r4,20
100073e8:	20807c36 	bltu	r4,r2,100075dc <_malloc_r+0x6e4>
100073ec:	110016c4 	addi	r4,r2,91
100073f0:	210b883a 	add	r5,r4,r4
100073f4:	294b883a 	add	r5,r5,r5
100073f8:	294b883a 	add	r5,r5,r5
100073fc:	994b883a 	add	r5,r19,r5
10007400:	28800217 	ldw	r2,8(r5)
10007404:	02040074 	movhi	r8,4097
10007408:	42305d04 	addi	r8,r8,-16012
1000740c:	11406326 	beq	r2,r5,1000759c <_malloc_r+0x6a4>
10007410:	01bfff04 	movi	r6,-4
10007414:	11000117 	ldw	r4,4(r2)
10007418:	2188703a 	and	r4,r4,r6
1000741c:	3900022e 	bgeu	r7,r4,10007428 <_malloc_r+0x530>
10007420:	10800217 	ldw	r2,8(r2)
10007424:	28bffb1e 	bne	r5,r2,10007414 <__alt_data_end+0xf8007414>
10007428:	11800317 	ldw	r6,12(r2)
1000742c:	99000117 	ldw	r4,4(r19)
10007430:	81800315 	stw	r6,12(r16)
10007434:	80800215 	stw	r2,8(r16)
10007438:	34000215 	stw	r16,8(r6)
1000743c:	14000315 	stw	r16,12(r2)
10007440:	003f2706 	br	100070e0 <__alt_data_end+0xf80070e0>
10007444:	88c00054 	ori	r3,r17,1
10007448:	80c00115 	stw	r3,4(r16)
1000744c:	8463883a 	add	r17,r16,r17
10007450:	34400515 	stw	r17,20(r6)
10007454:	34400415 	stw	r17,16(r6)
10007458:	10c00054 	ori	r3,r2,1
1000745c:	8a400315 	stw	r9,12(r17)
10007460:	8a400215 	stw	r9,8(r17)
10007464:	88c00115 	stw	r3,4(r17)
10007468:	88a3883a 	add	r17,r17,r2
1000746c:	88800015 	stw	r2,0(r17)
10007470:	9009883a 	mov	r4,r18
10007474:	0009a100 	call	10009a10 <__malloc_unlock>
10007478:	80800204 	addi	r2,r16,8
1000747c:	003ecb06 	br	10006fac <__alt_data_end+0xf8006fac>
10007480:	31000117 	ldw	r4,4(r6)
10007484:	003f1606 	br	100070e0 <__alt_data_end+0xf80070e0>
10007488:	63000044 	addi	r12,r12,1
1000748c:	608000cc 	andi	r2,r12,3
10007490:	5ac00204 	addi	r11,r11,8
10007494:	103f2a1e 	bne	r2,zero,10007140 <__alt_data_end+0xf8007140>
10007498:	00002106 	br	10007520 <_malloc_r+0x628>
1000749c:	80800204 	addi	r2,r16,8
100074a0:	84000517 	ldw	r16,20(r16)
100074a4:	143eb31e 	bne	r2,r16,10006f74 <__alt_data_end+0xf8006f74>
100074a8:	18c00084 	addi	r3,r3,2
100074ac:	003eec06 	br	10007060 <__alt_data_end+0xf8007060>
100074b0:	8085883a 	add	r2,r16,r2
100074b4:	10c00117 	ldw	r3,4(r2)
100074b8:	81000317 	ldw	r4,12(r16)
100074bc:	81400217 	ldw	r5,8(r16)
100074c0:	18c00054 	ori	r3,r3,1
100074c4:	10c00115 	stw	r3,4(r2)
100074c8:	29000315 	stw	r4,12(r5)
100074cc:	21400215 	stw	r5,8(r4)
100074d0:	9009883a 	mov	r4,r18
100074d4:	0009a100 	call	10009a10 <__malloc_unlock>
100074d8:	80800204 	addi	r2,r16,8
100074dc:	003eb306 	br	10006fac <__alt_data_end+0xf8006fac>
100074e0:	19c016c4 	addi	r7,r3,91
100074e4:	39cb883a 	add	r5,r7,r7
100074e8:	003ec706 	br	10007008 <__alt_data_end+0xf8007008>
100074ec:	3804d1ba 	srli	r2,r7,6
100074f0:	11000e04 	addi	r4,r2,56
100074f4:	210b883a 	add	r5,r4,r4
100074f8:	003fbe06 	br	100073f4 <__alt_data_end+0xf80073f4>
100074fc:	84ff5d26 	beq	r16,r19,10007274 <__alt_data_end+0xf8007274>
10007500:	9c000217 	ldw	r16,8(r19)
10007504:	00bfff04 	movi	r2,-4
10007508:	80c00117 	ldw	r3,4(r16)
1000750c:	1886703a 	and	r3,r3,r2
10007510:	003f9706 	br	10007370 <__alt_data_end+0xf8007370>
10007514:	52800017 	ldw	r10,0(r10)
10007518:	18ffffc4 	addi	r3,r3,-1
1000751c:	50805c1e 	bne	r10,r2,10007690 <_malloc_r+0x798>
10007520:	190000cc 	andi	r4,r3,3
10007524:	50bffe04 	addi	r2,r10,-8
10007528:	203ffa1e 	bne	r4,zero,10007514 <__alt_data_end+0xf8007514>
1000752c:	98800117 	ldw	r2,4(r19)
10007530:	0146303a 	nor	r3,zero,r5
10007534:	1884703a 	and	r2,r3,r2
10007538:	98800115 	stw	r2,4(r19)
1000753c:	294b883a 	add	r5,r5,r5
10007540:	117f2e36 	bltu	r2,r5,100071fc <__alt_data_end+0xf80071fc>
10007544:	283f2d26 	beq	r5,zero,100071fc <__alt_data_end+0xf80071fc>
10007548:	1146703a 	and	r3,r2,r5
1000754c:	1800521e 	bne	r3,zero,10007698 <_malloc_r+0x7a0>
10007550:	6007883a 	mov	r3,r12
10007554:	294b883a 	add	r5,r5,r5
10007558:	1148703a 	and	r4,r2,r5
1000755c:	18c00104 	addi	r3,r3,4
10007560:	203ffc26 	beq	r4,zero,10007554 <__alt_data_end+0xf8007554>
10007564:	003ef006 	br	10007128 <__alt_data_end+0xf8007128>
10007568:	00805504 	movi	r2,340
1000756c:	10c01336 	bltu	r2,r3,100075bc <_malloc_r+0x6c4>
10007570:	8806d3fa 	srli	r3,r17,15
10007574:	19c01dc4 	addi	r7,r3,119
10007578:	39cb883a 	add	r5,r7,r7
1000757c:	003ea206 	br	10007008 <__alt_data_end+0xf8007008>
10007580:	00c40004 	movi	r3,4096
10007584:	003f4d06 	br	100072bc <__alt_data_end+0xf80072bc>
10007588:	00800044 	movi	r2,1
1000758c:	a0800115 	stw	r2,4(r20)
10007590:	a021883a 	mov	r16,r20
10007594:	0007883a 	mov	r3,zero
10007598:	003f7506 	br	10007370 <__alt_data_end+0xf8007370>
1000759c:	200bd0ba 	srai	r5,r4,2
100075a0:	01800044 	movi	r6,1
100075a4:	41000117 	ldw	r4,4(r8)
100075a8:	314a983a 	sll	r5,r6,r5
100075ac:	100d883a 	mov	r6,r2
100075b0:	2908b03a 	or	r4,r5,r4
100075b4:	41000115 	stw	r4,4(r8)
100075b8:	003f9d06 	br	10007430 <__alt_data_end+0xf8007430>
100075bc:	00815504 	movi	r2,1364
100075c0:	10c01336 	bltu	r2,r3,10007610 <_malloc_r+0x718>
100075c4:	8806d4ba 	srli	r3,r17,18
100075c8:	19c01f04 	addi	r7,r3,124
100075cc:	39cb883a 	add	r5,r7,r7
100075d0:	003e8d06 	br	10007008 <__alt_data_end+0xf8007008>
100075d4:	ad400404 	addi	r21,r21,16
100075d8:	003f1d06 	br	10007250 <__alt_data_end+0xf8007250>
100075dc:	01001504 	movi	r4,84
100075e0:	20801c36 	bltu	r4,r2,10007654 <_malloc_r+0x75c>
100075e4:	3804d33a 	srli	r2,r7,12
100075e8:	11001b84 	addi	r4,r2,110
100075ec:	210b883a 	add	r5,r4,r4
100075f0:	003f8006 	br	100073f4 <__alt_data_end+0xf80073f4>
100075f4:	3083ffcc 	andi	r2,r6,4095
100075f8:	103f241e 	bne	r2,zero,1000728c <__alt_data_end+0xf800728c>
100075fc:	99000217 	ldw	r4,8(r19)
10007600:	ad85883a 	add	r2,r21,r22
10007604:	10800054 	ori	r2,r2,1
10007608:	20800115 	stw	r2,4(r4)
1000760c:	003f4a06 	br	10007338 <__alt_data_end+0xf8007338>
10007610:	01403f04 	movi	r5,252
10007614:	01c01f84 	movi	r7,126
10007618:	003e7b06 	br	10007008 <__alt_data_end+0xf8007008>
1000761c:	00c00044 	movi	r3,1
10007620:	002b883a 	mov	r21,zero
10007624:	003f3006 	br	100072e8 <__alt_data_end+0xf80072e8>
10007628:	00840074 	movhi	r2,4097
1000762c:	10b5e404 	addi	r2,r2,-10352
10007630:	15000015 	stw	r20,0(r2)
10007634:	003f1b06 	br	100072a4 <__alt_data_end+0xf80072a4>
10007638:	9009883a 	mov	r4,r18
1000763c:	81400204 	addi	r5,r16,8
10007640:	00088700 	call	10008870 <_free_r>
10007644:	00840074 	movhi	r2,4097
10007648:	10bc9e04 	addi	r2,r2,-3464
1000764c:	10c00017 	ldw	r3,0(r2)
10007650:	003f3906 	br	10007338 <__alt_data_end+0xf8007338>
10007654:	01005504 	movi	r4,340
10007658:	20800436 	bltu	r4,r2,1000766c <_malloc_r+0x774>
1000765c:	3804d3fa 	srli	r2,r7,15
10007660:	11001dc4 	addi	r4,r2,119
10007664:	210b883a 	add	r5,r4,r4
10007668:	003f6206 	br	100073f4 <__alt_data_end+0xf80073f4>
1000766c:	01015504 	movi	r4,1364
10007670:	20800436 	bltu	r4,r2,10007684 <_malloc_r+0x78c>
10007674:	3804d4ba 	srli	r2,r7,18
10007678:	11001f04 	addi	r4,r2,124
1000767c:	210b883a 	add	r5,r4,r4
10007680:	003f5c06 	br	100073f4 <__alt_data_end+0xf80073f4>
10007684:	01403f04 	movi	r5,252
10007688:	01001f84 	movi	r4,126
1000768c:	003f5906 	br	100073f4 <__alt_data_end+0xf80073f4>
10007690:	98800117 	ldw	r2,4(r19)
10007694:	003fa906 	br	1000753c <__alt_data_end+0xf800753c>
10007698:	6007883a 	mov	r3,r12
1000769c:	003ea206 	br	10007128 <__alt_data_end+0xf8007128>

100076a0 <memchr>:
100076a0:	208000cc 	andi	r2,r4,3
100076a4:	280f883a 	mov	r7,r5
100076a8:	10003526 	beq	r2,zero,10007780 <memchr+0xe0>
100076ac:	30bfffc4 	addi	r2,r6,-1
100076b0:	30001b26 	beq	r6,zero,10007720 <memchr+0x80>
100076b4:	21800003 	ldbu	r6,0(r4)
100076b8:	28c03fcc 	andi	r3,r5,255
100076bc:	30c01a26 	beq	r6,r3,10007728 <memchr+0x88>
100076c0:	180d883a 	mov	r6,r3
100076c4:	00000406 	br	100076d8 <memchr+0x38>
100076c8:	10001526 	beq	r2,zero,10007720 <memchr+0x80>
100076cc:	20c00003 	ldbu	r3,0(r4)
100076d0:	10bfffc4 	addi	r2,r2,-1
100076d4:	19801426 	beq	r3,r6,10007728 <memchr+0x88>
100076d8:	21000044 	addi	r4,r4,1
100076dc:	20c000cc 	andi	r3,r4,3
100076e0:	183ff91e 	bne	r3,zero,100076c8 <__alt_data_end+0xf80076c8>
100076e4:	024000c4 	movi	r9,3
100076e8:	48801136 	bltu	r9,r2,10007730 <memchr+0x90>
100076ec:	10000c26 	beq	r2,zero,10007720 <memchr+0x80>
100076f0:	20c00003 	ldbu	r3,0(r4)
100076f4:	29403fcc 	andi	r5,r5,255
100076f8:	19400b26 	beq	r3,r5,10007728 <memchr+0x88>
100076fc:	20c00044 	addi	r3,r4,1
10007700:	2085883a 	add	r2,r4,r2
10007704:	39803fcc 	andi	r6,r7,255
10007708:	00000306 	br	10007718 <memchr+0x78>
1000770c:	18c00044 	addi	r3,r3,1
10007710:	197fffc3 	ldbu	r5,-1(r3)
10007714:	29800426 	beq	r5,r6,10007728 <memchr+0x88>
10007718:	1809883a 	mov	r4,r3
1000771c:	18bffb1e 	bne	r3,r2,1000770c <__alt_data_end+0xf800770c>
10007720:	0005883a 	mov	r2,zero
10007724:	f800283a 	ret
10007728:	2005883a 	mov	r2,r4
1000772c:	f800283a 	ret
10007730:	28c03fcc 	andi	r3,r5,255
10007734:	1810923a 	slli	r8,r3,8
10007738:	02ffbff4 	movhi	r11,65279
1000773c:	02a02074 	movhi	r10,32897
10007740:	40c6b03a 	or	r3,r8,r3
10007744:	1810943a 	slli	r8,r3,16
10007748:	5affbfc4 	addi	r11,r11,-257
1000774c:	52a02004 	addi	r10,r10,-32640
10007750:	40d0b03a 	or	r8,r8,r3
10007754:	20c00017 	ldw	r3,0(r4)
10007758:	40c6f03a 	xor	r3,r8,r3
1000775c:	1acd883a 	add	r6,r3,r11
10007760:	00c6303a 	nor	r3,zero,r3
10007764:	30c6703a 	and	r3,r6,r3
10007768:	1a86703a 	and	r3,r3,r10
1000776c:	183fdf1e 	bne	r3,zero,100076ec <__alt_data_end+0xf80076ec>
10007770:	10bfff04 	addi	r2,r2,-4
10007774:	21000104 	addi	r4,r4,4
10007778:	48bff636 	bltu	r9,r2,10007754 <__alt_data_end+0xf8007754>
1000777c:	003fdb06 	br	100076ec <__alt_data_end+0xf80076ec>
10007780:	3005883a 	mov	r2,r6
10007784:	003fd706 	br	100076e4 <__alt_data_end+0xf80076e4>

10007788 <memcpy>:
10007788:	deffff04 	addi	sp,sp,-4
1000778c:	dc000015 	stw	r16,0(sp)
10007790:	00c003c4 	movi	r3,15
10007794:	2005883a 	mov	r2,r4
10007798:	1980432e 	bgeu	r3,r6,100078a8 <memcpy+0x120>
1000779c:	2146b03a 	or	r3,r4,r5
100077a0:	18c000cc 	andi	r3,r3,3
100077a4:	1800421e 	bne	r3,zero,100078b0 <memcpy+0x128>
100077a8:	343ffc04 	addi	r16,r6,-16
100077ac:	8020d13a 	srli	r16,r16,4
100077b0:	28c00104 	addi	r3,r5,4
100077b4:	23400104 	addi	r13,r4,4
100077b8:	801e913a 	slli	r15,r16,4
100077bc:	2b000204 	addi	r12,r5,8
100077c0:	22c00204 	addi	r11,r4,8
100077c4:	7bc00504 	addi	r15,r15,20
100077c8:	2a800304 	addi	r10,r5,12
100077cc:	22400304 	addi	r9,r4,12
100077d0:	2bdf883a 	add	r15,r5,r15
100077d4:	2811883a 	mov	r8,r5
100077d8:	200f883a 	mov	r7,r4
100077dc:	41000017 	ldw	r4,0(r8)
100077e0:	39c00404 	addi	r7,r7,16
100077e4:	18c00404 	addi	r3,r3,16
100077e8:	393ffc15 	stw	r4,-16(r7)
100077ec:	1bbffc17 	ldw	r14,-16(r3)
100077f0:	6b400404 	addi	r13,r13,16
100077f4:	5ac00404 	addi	r11,r11,16
100077f8:	6bbffc15 	stw	r14,-16(r13)
100077fc:	63800017 	ldw	r14,0(r12)
10007800:	4a400404 	addi	r9,r9,16
10007804:	42000404 	addi	r8,r8,16
10007808:	5bbffc15 	stw	r14,-16(r11)
1000780c:	53800017 	ldw	r14,0(r10)
10007810:	63000404 	addi	r12,r12,16
10007814:	52800404 	addi	r10,r10,16
10007818:	4bbffc15 	stw	r14,-16(r9)
1000781c:	1bffef1e 	bne	r3,r15,100077dc <__alt_data_end+0xf80077dc>
10007820:	81c00044 	addi	r7,r16,1
10007824:	380e913a 	slli	r7,r7,4
10007828:	310003cc 	andi	r4,r6,15
1000782c:	02c000c4 	movi	r11,3
10007830:	11c7883a 	add	r3,r2,r7
10007834:	29cb883a 	add	r5,r5,r7
10007838:	59001f2e 	bgeu	r11,r4,100078b8 <memcpy+0x130>
1000783c:	1813883a 	mov	r9,r3
10007840:	2811883a 	mov	r8,r5
10007844:	200f883a 	mov	r7,r4
10007848:	42800017 	ldw	r10,0(r8)
1000784c:	4a400104 	addi	r9,r9,4
10007850:	39ffff04 	addi	r7,r7,-4
10007854:	4abfff15 	stw	r10,-4(r9)
10007858:	42000104 	addi	r8,r8,4
1000785c:	59fffa36 	bltu	r11,r7,10007848 <__alt_data_end+0xf8007848>
10007860:	213fff04 	addi	r4,r4,-4
10007864:	2008d0ba 	srli	r4,r4,2
10007868:	318000cc 	andi	r6,r6,3
1000786c:	21000044 	addi	r4,r4,1
10007870:	2109883a 	add	r4,r4,r4
10007874:	2109883a 	add	r4,r4,r4
10007878:	1907883a 	add	r3,r3,r4
1000787c:	290b883a 	add	r5,r5,r4
10007880:	30000626 	beq	r6,zero,1000789c <memcpy+0x114>
10007884:	198d883a 	add	r6,r3,r6
10007888:	29c00003 	ldbu	r7,0(r5)
1000788c:	18c00044 	addi	r3,r3,1
10007890:	29400044 	addi	r5,r5,1
10007894:	19ffffc5 	stb	r7,-1(r3)
10007898:	19bffb1e 	bne	r3,r6,10007888 <__alt_data_end+0xf8007888>
1000789c:	dc000017 	ldw	r16,0(sp)
100078a0:	dec00104 	addi	sp,sp,4
100078a4:	f800283a 	ret
100078a8:	2007883a 	mov	r3,r4
100078ac:	003ff406 	br	10007880 <__alt_data_end+0xf8007880>
100078b0:	2007883a 	mov	r3,r4
100078b4:	003ff306 	br	10007884 <__alt_data_end+0xf8007884>
100078b8:	200d883a 	mov	r6,r4
100078bc:	003ff006 	br	10007880 <__alt_data_end+0xf8007880>

100078c0 <memmove>:
100078c0:	2005883a 	mov	r2,r4
100078c4:	29000b2e 	bgeu	r5,r4,100078f4 <memmove+0x34>
100078c8:	298f883a 	add	r7,r5,r6
100078cc:	21c0092e 	bgeu	r4,r7,100078f4 <memmove+0x34>
100078d0:	2187883a 	add	r3,r4,r6
100078d4:	198bc83a 	sub	r5,r3,r6
100078d8:	30004b26 	beq	r6,zero,10007a08 <memmove+0x148>
100078dc:	39ffffc4 	addi	r7,r7,-1
100078e0:	39000003 	ldbu	r4,0(r7)
100078e4:	18ffffc4 	addi	r3,r3,-1
100078e8:	19000005 	stb	r4,0(r3)
100078ec:	197ffb1e 	bne	r3,r5,100078dc <__alt_data_end+0xf80078dc>
100078f0:	f800283a 	ret
100078f4:	00c003c4 	movi	r3,15
100078f8:	1980412e 	bgeu	r3,r6,10007a00 <memmove+0x140>
100078fc:	1146b03a 	or	r3,r2,r5
10007900:	18c000cc 	andi	r3,r3,3
10007904:	1800411e 	bne	r3,zero,10007a0c <memmove+0x14c>
10007908:	33fffc04 	addi	r15,r6,-16
1000790c:	781ed13a 	srli	r15,r15,4
10007910:	28c00104 	addi	r3,r5,4
10007914:	13400104 	addi	r13,r2,4
10007918:	781c913a 	slli	r14,r15,4
1000791c:	2b000204 	addi	r12,r5,8
10007920:	12c00204 	addi	r11,r2,8
10007924:	73800504 	addi	r14,r14,20
10007928:	2a800304 	addi	r10,r5,12
1000792c:	12400304 	addi	r9,r2,12
10007930:	2b9d883a 	add	r14,r5,r14
10007934:	2811883a 	mov	r8,r5
10007938:	100f883a 	mov	r7,r2
1000793c:	41000017 	ldw	r4,0(r8)
10007940:	39c00404 	addi	r7,r7,16
10007944:	18c00404 	addi	r3,r3,16
10007948:	393ffc15 	stw	r4,-16(r7)
1000794c:	193ffc17 	ldw	r4,-16(r3)
10007950:	6b400404 	addi	r13,r13,16
10007954:	5ac00404 	addi	r11,r11,16
10007958:	693ffc15 	stw	r4,-16(r13)
1000795c:	61000017 	ldw	r4,0(r12)
10007960:	4a400404 	addi	r9,r9,16
10007964:	42000404 	addi	r8,r8,16
10007968:	593ffc15 	stw	r4,-16(r11)
1000796c:	51000017 	ldw	r4,0(r10)
10007970:	63000404 	addi	r12,r12,16
10007974:	52800404 	addi	r10,r10,16
10007978:	493ffc15 	stw	r4,-16(r9)
1000797c:	1bbfef1e 	bne	r3,r14,1000793c <__alt_data_end+0xf800793c>
10007980:	79000044 	addi	r4,r15,1
10007984:	2008913a 	slli	r4,r4,4
10007988:	328003cc 	andi	r10,r6,15
1000798c:	02c000c4 	movi	r11,3
10007990:	1107883a 	add	r3,r2,r4
10007994:	290b883a 	add	r5,r5,r4
10007998:	5a801e2e 	bgeu	r11,r10,10007a14 <memmove+0x154>
1000799c:	1813883a 	mov	r9,r3
100079a0:	2811883a 	mov	r8,r5
100079a4:	500f883a 	mov	r7,r10
100079a8:	41000017 	ldw	r4,0(r8)
100079ac:	4a400104 	addi	r9,r9,4
100079b0:	39ffff04 	addi	r7,r7,-4
100079b4:	493fff15 	stw	r4,-4(r9)
100079b8:	42000104 	addi	r8,r8,4
100079bc:	59fffa36 	bltu	r11,r7,100079a8 <__alt_data_end+0xf80079a8>
100079c0:	513fff04 	addi	r4,r10,-4
100079c4:	2008d0ba 	srli	r4,r4,2
100079c8:	318000cc 	andi	r6,r6,3
100079cc:	21000044 	addi	r4,r4,1
100079d0:	2109883a 	add	r4,r4,r4
100079d4:	2109883a 	add	r4,r4,r4
100079d8:	1907883a 	add	r3,r3,r4
100079dc:	290b883a 	add	r5,r5,r4
100079e0:	30000926 	beq	r6,zero,10007a08 <memmove+0x148>
100079e4:	198d883a 	add	r6,r3,r6
100079e8:	29c00003 	ldbu	r7,0(r5)
100079ec:	18c00044 	addi	r3,r3,1
100079f0:	29400044 	addi	r5,r5,1
100079f4:	19ffffc5 	stb	r7,-1(r3)
100079f8:	19bffb1e 	bne	r3,r6,100079e8 <__alt_data_end+0xf80079e8>
100079fc:	f800283a 	ret
10007a00:	1007883a 	mov	r3,r2
10007a04:	003ff606 	br	100079e0 <__alt_data_end+0xf80079e0>
10007a08:	f800283a 	ret
10007a0c:	1007883a 	mov	r3,r2
10007a10:	003ff406 	br	100079e4 <__alt_data_end+0xf80079e4>
10007a14:	500d883a 	mov	r6,r10
10007a18:	003ff106 	br	100079e0 <__alt_data_end+0xf80079e0>

10007a1c <_realloc_r>:
10007a1c:	defff604 	addi	sp,sp,-40
10007a20:	dcc00315 	stw	r19,12(sp)
10007a24:	dc400115 	stw	r17,4(sp)
10007a28:	dfc00915 	stw	ra,36(sp)
10007a2c:	df000815 	stw	fp,32(sp)
10007a30:	ddc00715 	stw	r23,28(sp)
10007a34:	dd800615 	stw	r22,24(sp)
10007a38:	dd400515 	stw	r21,20(sp)
10007a3c:	dd000415 	stw	r20,16(sp)
10007a40:	dc800215 	stw	r18,8(sp)
10007a44:	dc000015 	stw	r16,0(sp)
10007a48:	2827883a 	mov	r19,r5
10007a4c:	3023883a 	mov	r17,r6
10007a50:	2800bf26 	beq	r5,zero,10007d50 <_realloc_r+0x334>
10007a54:	2025883a 	mov	r18,r4
10007a58:	00099f00 	call	100099f0 <__malloc_lock>
10007a5c:	98ffff17 	ldw	r3,-4(r19)
10007a60:	01bfff04 	movi	r6,-4
10007a64:	890002c4 	addi	r4,r17,11
10007a68:	01c00584 	movi	r7,22
10007a6c:	9d7ffe04 	addi	r21,r19,-8
10007a70:	19a0703a 	and	r16,r3,r6
10007a74:	39003f2e 	bgeu	r7,r4,10007b74 <_realloc_r+0x158>
10007a78:	053ffe04 	movi	r20,-8
10007a7c:	2528703a 	and	r20,r4,r20
10007a80:	a00f883a 	mov	r7,r20
10007a84:	a0008216 	blt	r20,zero,10007c90 <_realloc_r+0x274>
10007a88:	a4408136 	bltu	r20,r17,10007c90 <_realloc_r+0x274>
10007a8c:	81c03c0e 	bge	r16,r7,10007b80 <_realloc_r+0x164>
10007a90:	07040074 	movhi	fp,4097
10007a94:	e7305d04 	addi	fp,fp,-16012
10007a98:	e1000217 	ldw	r4,8(fp)
10007a9c:	ac05883a 	add	r2,r21,r16
10007aa0:	2080bf26 	beq	r4,r2,10007da0 <_realloc_r+0x384>
10007aa4:	11000117 	ldw	r4,4(r2)
10007aa8:	023fff84 	movi	r8,-2
10007aac:	2210703a 	and	r8,r4,r8
10007ab0:	1211883a 	add	r8,r2,r8
10007ab4:	41400117 	ldw	r5,4(r8)
10007ab8:	2940004c 	andi	r5,r5,1
10007abc:	28004a1e 	bne	r5,zero,10007be8 <_realloc_r+0x1cc>
10007ac0:	017fff04 	movi	r5,-4
10007ac4:	2148703a 	and	r4,r4,r5
10007ac8:	2409883a 	add	r4,r4,r16
10007acc:	21c0ad0e 	bge	r4,r7,10007d84 <_realloc_r+0x368>
10007ad0:	18c0004c 	andi	r3,r3,1
10007ad4:	18007f1e 	bne	r3,zero,10007cd4 <_realloc_r+0x2b8>
10007ad8:	9dfffe17 	ldw	r23,-8(r19)
10007adc:	adefc83a 	sub	r23,r21,r23
10007ae0:	bd800117 	ldw	r22,4(r23)
10007ae4:	b14a703a 	and	r5,r22,r5
10007ae8:	216d883a 	add	r22,r4,r5
10007aec:	b1c04516 	blt	r22,r7,10007c04 <_realloc_r+0x1e8>
10007af0:	10c00317 	ldw	r3,12(r2)
10007af4:	10800217 	ldw	r2,8(r2)
10007af8:	81bfff04 	addi	r6,r16,-4
10007afc:	bc400204 	addi	r17,r23,8
10007b00:	10c00315 	stw	r3,12(r2)
10007b04:	18800215 	stw	r2,8(r3)
10007b08:	b9400217 	ldw	r5,8(r23)
10007b0c:	b8c00317 	ldw	r3,12(r23)
10007b10:	00800904 	movi	r2,36
10007b14:	28c00315 	stw	r3,12(r5)
10007b18:	19400215 	stw	r5,8(r3)
10007b1c:	1180ef36 	bltu	r2,r6,10007edc <_realloc_r+0x4c0>
10007b20:	008004c4 	movi	r2,19
10007b24:	1180da2e 	bgeu	r2,r6,10007e90 <_realloc_r+0x474>
10007b28:	98800017 	ldw	r2,0(r19)
10007b2c:	b8800215 	stw	r2,8(r23)
10007b30:	98800117 	ldw	r2,4(r19)
10007b34:	b8800315 	stw	r2,12(r23)
10007b38:	008006c4 	movi	r2,27
10007b3c:	1180fc2e 	bgeu	r2,r6,10007f30 <_realloc_r+0x514>
10007b40:	98800217 	ldw	r2,8(r19)
10007b44:	b8800415 	stw	r2,16(r23)
10007b48:	98800317 	ldw	r2,12(r19)
10007b4c:	b8800515 	stw	r2,20(r23)
10007b50:	00800904 	movi	r2,36
10007b54:	3080421e 	bne	r6,r2,10007c60 <_realloc_r+0x244>
10007b58:	98800417 	ldw	r2,16(r19)
10007b5c:	9cc00604 	addi	r19,r19,24
10007b60:	b8c00804 	addi	r3,r23,32
10007b64:	b8800615 	stw	r2,24(r23)
10007b68:	98bfff17 	ldw	r2,-4(r19)
10007b6c:	b8800715 	stw	r2,28(r23)
10007b70:	00003d06 	br	10007c68 <_realloc_r+0x24c>
10007b74:	01c00404 	movi	r7,16
10007b78:	3829883a 	mov	r20,r7
10007b7c:	003fc206 	br	10007a88 <__alt_data_end+0xf8007a88>
10007b80:	9823883a 	mov	r17,r19
10007b84:	850fc83a 	sub	r7,r16,r20
10007b88:	008003c4 	movi	r2,15
10007b8c:	18c0004c 	andi	r3,r3,1
10007b90:	11c04336 	bltu	r2,r7,10007ca0 <_realloc_r+0x284>
10007b94:	1c06b03a 	or	r3,r3,r16
10007b98:	a8c00115 	stw	r3,4(r21)
10007b9c:	ac21883a 	add	r16,r21,r16
10007ba0:	80c00117 	ldw	r3,4(r16)
10007ba4:	18c00054 	ori	r3,r3,1
10007ba8:	80c00115 	stw	r3,4(r16)
10007bac:	9009883a 	mov	r4,r18
10007bb0:	0009a100 	call	10009a10 <__malloc_unlock>
10007bb4:	8805883a 	mov	r2,r17
10007bb8:	dfc00917 	ldw	ra,36(sp)
10007bbc:	df000817 	ldw	fp,32(sp)
10007bc0:	ddc00717 	ldw	r23,28(sp)
10007bc4:	dd800617 	ldw	r22,24(sp)
10007bc8:	dd400517 	ldw	r21,20(sp)
10007bcc:	dd000417 	ldw	r20,16(sp)
10007bd0:	dcc00317 	ldw	r19,12(sp)
10007bd4:	dc800217 	ldw	r18,8(sp)
10007bd8:	dc400117 	ldw	r17,4(sp)
10007bdc:	dc000017 	ldw	r16,0(sp)
10007be0:	dec00a04 	addi	sp,sp,40
10007be4:	f800283a 	ret
10007be8:	18c0004c 	andi	r3,r3,1
10007bec:	1800391e 	bne	r3,zero,10007cd4 <_realloc_r+0x2b8>
10007bf0:	9dfffe17 	ldw	r23,-8(r19)
10007bf4:	00bfff04 	movi	r2,-4
10007bf8:	adefc83a 	sub	r23,r21,r23
10007bfc:	b9400117 	ldw	r5,4(r23)
10007c00:	288a703a 	and	r5,r5,r2
10007c04:	2c2d883a 	add	r22,r5,r16
10007c08:	b1c03216 	blt	r22,r7,10007cd4 <_realloc_r+0x2b8>
10007c0c:	b8800317 	ldw	r2,12(r23)
10007c10:	b8c00217 	ldw	r3,8(r23)
10007c14:	81bfff04 	addi	r6,r16,-4
10007c18:	01000904 	movi	r4,36
10007c1c:	18800315 	stw	r2,12(r3)
10007c20:	10c00215 	stw	r3,8(r2)
10007c24:	bc400204 	addi	r17,r23,8
10007c28:	2180ac36 	bltu	r4,r6,10007edc <_realloc_r+0x4c0>
10007c2c:	008004c4 	movi	r2,19
10007c30:	1180972e 	bgeu	r2,r6,10007e90 <_realloc_r+0x474>
10007c34:	98800017 	ldw	r2,0(r19)
10007c38:	b8800215 	stw	r2,8(r23)
10007c3c:	98800117 	ldw	r2,4(r19)
10007c40:	b8800315 	stw	r2,12(r23)
10007c44:	008006c4 	movi	r2,27
10007c48:	1180b92e 	bgeu	r2,r6,10007f30 <_realloc_r+0x514>
10007c4c:	98800217 	ldw	r2,8(r19)
10007c50:	b8800415 	stw	r2,16(r23)
10007c54:	98800317 	ldw	r2,12(r19)
10007c58:	b8800515 	stw	r2,20(r23)
10007c5c:	313fbe26 	beq	r6,r4,10007b58 <__alt_data_end+0xf8007b58>
10007c60:	b8c00604 	addi	r3,r23,24
10007c64:	9cc00404 	addi	r19,r19,16
10007c68:	98800017 	ldw	r2,0(r19)
10007c6c:	b021883a 	mov	r16,r22
10007c70:	b82b883a 	mov	r21,r23
10007c74:	18800015 	stw	r2,0(r3)
10007c78:	98800117 	ldw	r2,4(r19)
10007c7c:	18800115 	stw	r2,4(r3)
10007c80:	98800217 	ldw	r2,8(r19)
10007c84:	18800215 	stw	r2,8(r3)
10007c88:	b8c00117 	ldw	r3,4(r23)
10007c8c:	003fbd06 	br	10007b84 <__alt_data_end+0xf8007b84>
10007c90:	00800304 	movi	r2,12
10007c94:	90800015 	stw	r2,0(r18)
10007c98:	0005883a 	mov	r2,zero
10007c9c:	003fc606 	br	10007bb8 <__alt_data_end+0xf8007bb8>
10007ca0:	1d06b03a 	or	r3,r3,r20
10007ca4:	ad0b883a 	add	r5,r21,r20
10007ca8:	a8c00115 	stw	r3,4(r21)
10007cac:	38800054 	ori	r2,r7,1
10007cb0:	28800115 	stw	r2,4(r5)
10007cb4:	29cf883a 	add	r7,r5,r7
10007cb8:	38800117 	ldw	r2,4(r7)
10007cbc:	9009883a 	mov	r4,r18
10007cc0:	29400204 	addi	r5,r5,8
10007cc4:	10800054 	ori	r2,r2,1
10007cc8:	38800115 	stw	r2,4(r7)
10007ccc:	00088700 	call	10008870 <_free_r>
10007cd0:	003fb606 	br	10007bac <__alt_data_end+0xf8007bac>
10007cd4:	880b883a 	mov	r5,r17
10007cd8:	9009883a 	mov	r4,r18
10007cdc:	0006ef80 	call	10006ef8 <_malloc_r>
10007ce0:	1023883a 	mov	r17,r2
10007ce4:	1000aa26 	beq	r2,zero,10007f90 <_realloc_r+0x574>
10007ce8:	98ffff17 	ldw	r3,-4(r19)
10007cec:	113ffe04 	addi	r4,r2,-8
10007cf0:	00bfff84 	movi	r2,-2
10007cf4:	1884703a 	and	r2,r3,r2
10007cf8:	a885883a 	add	r2,r21,r2
10007cfc:	20808626 	beq	r4,r2,10007f18 <_realloc_r+0x4fc>
10007d00:	81bfff04 	addi	r6,r16,-4
10007d04:	00800904 	movi	r2,36
10007d08:	11807036 	bltu	r2,r6,10007ecc <_realloc_r+0x4b0>
10007d0c:	00c004c4 	movi	r3,19
10007d10:	19805636 	bltu	r3,r6,10007e6c <_realloc_r+0x450>
10007d14:	8805883a 	mov	r2,r17
10007d18:	9807883a 	mov	r3,r19
10007d1c:	19000017 	ldw	r4,0(r3)
10007d20:	11000015 	stw	r4,0(r2)
10007d24:	19000117 	ldw	r4,4(r3)
10007d28:	11000115 	stw	r4,4(r2)
10007d2c:	18c00217 	ldw	r3,8(r3)
10007d30:	10c00215 	stw	r3,8(r2)
10007d34:	980b883a 	mov	r5,r19
10007d38:	9009883a 	mov	r4,r18
10007d3c:	00088700 	call	10008870 <_free_r>
10007d40:	9009883a 	mov	r4,r18
10007d44:	0009a100 	call	10009a10 <__malloc_unlock>
10007d48:	8805883a 	mov	r2,r17
10007d4c:	003f9a06 	br	10007bb8 <__alt_data_end+0xf8007bb8>
10007d50:	300b883a 	mov	r5,r6
10007d54:	dfc00917 	ldw	ra,36(sp)
10007d58:	df000817 	ldw	fp,32(sp)
10007d5c:	ddc00717 	ldw	r23,28(sp)
10007d60:	dd800617 	ldw	r22,24(sp)
10007d64:	dd400517 	ldw	r21,20(sp)
10007d68:	dd000417 	ldw	r20,16(sp)
10007d6c:	dcc00317 	ldw	r19,12(sp)
10007d70:	dc800217 	ldw	r18,8(sp)
10007d74:	dc400117 	ldw	r17,4(sp)
10007d78:	dc000017 	ldw	r16,0(sp)
10007d7c:	dec00a04 	addi	sp,sp,40
10007d80:	0006ef81 	jmpi	10006ef8 <_malloc_r>
10007d84:	11400317 	ldw	r5,12(r2)
10007d88:	10800217 	ldw	r2,8(r2)
10007d8c:	9823883a 	mov	r17,r19
10007d90:	2021883a 	mov	r16,r4
10007d94:	11400315 	stw	r5,12(r2)
10007d98:	28800215 	stw	r2,8(r5)
10007d9c:	003f7906 	br	10007b84 <__alt_data_end+0xf8007b84>
10007da0:	21000117 	ldw	r4,4(r4)
10007da4:	00bfff04 	movi	r2,-4
10007da8:	a1800404 	addi	r6,r20,16
10007dac:	2088703a 	and	r4,r4,r2
10007db0:	2409883a 	add	r4,r4,r16
10007db4:	2180380e 	bge	r4,r6,10007e98 <_realloc_r+0x47c>
10007db8:	18c0004c 	andi	r3,r3,1
10007dbc:	183fc51e 	bne	r3,zero,10007cd4 <__alt_data_end+0xf8007cd4>
10007dc0:	9dfffe17 	ldw	r23,-8(r19)
10007dc4:	adefc83a 	sub	r23,r21,r23
10007dc8:	b9400117 	ldw	r5,4(r23)
10007dcc:	288a703a 	and	r5,r5,r2
10007dd0:	216d883a 	add	r22,r4,r5
10007dd4:	b1bf8b16 	blt	r22,r6,10007c04 <__alt_data_end+0xf8007c04>
10007dd8:	b8800317 	ldw	r2,12(r23)
10007ddc:	b8c00217 	ldw	r3,8(r23)
10007de0:	81bfff04 	addi	r6,r16,-4
10007de4:	01000904 	movi	r4,36
10007de8:	18800315 	stw	r2,12(r3)
10007dec:	10c00215 	stw	r3,8(r2)
10007df0:	bc400204 	addi	r17,r23,8
10007df4:	21805a36 	bltu	r4,r6,10007f60 <_realloc_r+0x544>
10007df8:	008004c4 	movi	r2,19
10007dfc:	1180562e 	bgeu	r2,r6,10007f58 <_realloc_r+0x53c>
10007e00:	98800017 	ldw	r2,0(r19)
10007e04:	b8800215 	stw	r2,8(r23)
10007e08:	98800117 	ldw	r2,4(r19)
10007e0c:	b8800315 	stw	r2,12(r23)
10007e10:	008006c4 	movi	r2,27
10007e14:	11805636 	bltu	r2,r6,10007f70 <_realloc_r+0x554>
10007e18:	b8800404 	addi	r2,r23,16
10007e1c:	9cc00204 	addi	r19,r19,8
10007e20:	98c00017 	ldw	r3,0(r19)
10007e24:	10c00015 	stw	r3,0(r2)
10007e28:	98c00117 	ldw	r3,4(r19)
10007e2c:	10c00115 	stw	r3,4(r2)
10007e30:	98c00217 	ldw	r3,8(r19)
10007e34:	10c00215 	stw	r3,8(r2)
10007e38:	bd07883a 	add	r3,r23,r20
10007e3c:	b505c83a 	sub	r2,r22,r20
10007e40:	e0c00215 	stw	r3,8(fp)
10007e44:	10800054 	ori	r2,r2,1
10007e48:	18800115 	stw	r2,4(r3)
10007e4c:	b8800117 	ldw	r2,4(r23)
10007e50:	9009883a 	mov	r4,r18
10007e54:	1080004c 	andi	r2,r2,1
10007e58:	a0a8b03a 	or	r20,r20,r2
10007e5c:	bd000115 	stw	r20,4(r23)
10007e60:	0009a100 	call	10009a10 <__malloc_unlock>
10007e64:	8805883a 	mov	r2,r17
10007e68:	003f5306 	br	10007bb8 <__alt_data_end+0xf8007bb8>
10007e6c:	98c00017 	ldw	r3,0(r19)
10007e70:	88c00015 	stw	r3,0(r17)
10007e74:	98c00117 	ldw	r3,4(r19)
10007e78:	88c00115 	stw	r3,4(r17)
10007e7c:	00c006c4 	movi	r3,27
10007e80:	19801d36 	bltu	r3,r6,10007ef8 <_realloc_r+0x4dc>
10007e84:	88800204 	addi	r2,r17,8
10007e88:	98c00204 	addi	r3,r19,8
10007e8c:	003fa306 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007e90:	8807883a 	mov	r3,r17
10007e94:	003f7406 	br	10007c68 <__alt_data_end+0xf8007c68>
10007e98:	ad2b883a 	add	r21,r21,r20
10007e9c:	2505c83a 	sub	r2,r4,r20
10007ea0:	e5400215 	stw	r21,8(fp)
10007ea4:	10800054 	ori	r2,r2,1
10007ea8:	a8800115 	stw	r2,4(r21)
10007eac:	98bfff17 	ldw	r2,-4(r19)
10007eb0:	9009883a 	mov	r4,r18
10007eb4:	1080004c 	andi	r2,r2,1
10007eb8:	a0a8b03a 	or	r20,r20,r2
10007ebc:	9d3fff15 	stw	r20,-4(r19)
10007ec0:	0009a100 	call	10009a10 <__malloc_unlock>
10007ec4:	9805883a 	mov	r2,r19
10007ec8:	003f3b06 	br	10007bb8 <__alt_data_end+0xf8007bb8>
10007ecc:	8809883a 	mov	r4,r17
10007ed0:	980b883a 	mov	r5,r19
10007ed4:	00078c00 	call	100078c0 <memmove>
10007ed8:	003f9606 	br	10007d34 <__alt_data_end+0xf8007d34>
10007edc:	8809883a 	mov	r4,r17
10007ee0:	980b883a 	mov	r5,r19
10007ee4:	00078c00 	call	100078c0 <memmove>
10007ee8:	b8c00117 	ldw	r3,4(r23)
10007eec:	b021883a 	mov	r16,r22
10007ef0:	b82b883a 	mov	r21,r23
10007ef4:	003f2306 	br	10007b84 <__alt_data_end+0xf8007b84>
10007ef8:	98c00217 	ldw	r3,8(r19)
10007efc:	88c00215 	stw	r3,8(r17)
10007f00:	98c00317 	ldw	r3,12(r19)
10007f04:	88c00315 	stw	r3,12(r17)
10007f08:	30800c26 	beq	r6,r2,10007f3c <_realloc_r+0x520>
10007f0c:	88800404 	addi	r2,r17,16
10007f10:	98c00404 	addi	r3,r19,16
10007f14:	003f8106 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007f18:	893fff17 	ldw	r4,-4(r17)
10007f1c:	00bfff04 	movi	r2,-4
10007f20:	9823883a 	mov	r17,r19
10007f24:	2084703a 	and	r2,r4,r2
10007f28:	80a1883a 	add	r16,r16,r2
10007f2c:	003f1506 	br	10007b84 <__alt_data_end+0xf8007b84>
10007f30:	b8c00404 	addi	r3,r23,16
10007f34:	9cc00204 	addi	r19,r19,8
10007f38:	003f4b06 	br	10007c68 <__alt_data_end+0xf8007c68>
10007f3c:	99000417 	ldw	r4,16(r19)
10007f40:	88800604 	addi	r2,r17,24
10007f44:	98c00604 	addi	r3,r19,24
10007f48:	89000415 	stw	r4,16(r17)
10007f4c:	99000517 	ldw	r4,20(r19)
10007f50:	89000515 	stw	r4,20(r17)
10007f54:	003f7106 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007f58:	8805883a 	mov	r2,r17
10007f5c:	003fb006 	br	10007e20 <__alt_data_end+0xf8007e20>
10007f60:	8809883a 	mov	r4,r17
10007f64:	980b883a 	mov	r5,r19
10007f68:	00078c00 	call	100078c0 <memmove>
10007f6c:	003fb206 	br	10007e38 <__alt_data_end+0xf8007e38>
10007f70:	98800217 	ldw	r2,8(r19)
10007f74:	b8800415 	stw	r2,16(r23)
10007f78:	98800317 	ldw	r2,12(r19)
10007f7c:	b8800515 	stw	r2,20(r23)
10007f80:	31000726 	beq	r6,r4,10007fa0 <_realloc_r+0x584>
10007f84:	b8800604 	addi	r2,r23,24
10007f88:	9cc00404 	addi	r19,r19,16
10007f8c:	003fa406 	br	10007e20 <__alt_data_end+0xf8007e20>
10007f90:	9009883a 	mov	r4,r18
10007f94:	0009a100 	call	10009a10 <__malloc_unlock>
10007f98:	0005883a 	mov	r2,zero
10007f9c:	003f0606 	br	10007bb8 <__alt_data_end+0xf8007bb8>
10007fa0:	98c00417 	ldw	r3,16(r19)
10007fa4:	9cc00604 	addi	r19,r19,24
10007fa8:	b8800804 	addi	r2,r23,32
10007fac:	b8c00615 	stw	r3,24(r23)
10007fb0:	98ffff17 	ldw	r3,-4(r19)
10007fb4:	b8c00715 	stw	r3,28(r23)
10007fb8:	003f9906 	br	10007e20 <__alt_data_end+0xf8007e20>

10007fbc <_sbrk_r>:
10007fbc:	defffd04 	addi	sp,sp,-12
10007fc0:	dc000015 	stw	r16,0(sp)
10007fc4:	04040074 	movhi	r16,4097
10007fc8:	dc400115 	stw	r17,4(sp)
10007fcc:	843c9604 	addi	r16,r16,-3496
10007fd0:	2023883a 	mov	r17,r4
10007fd4:	2809883a 	mov	r4,r5
10007fd8:	dfc00215 	stw	ra,8(sp)
10007fdc:	80000015 	stw	zero,0(r16)
10007fe0:	0009c040 	call	10009c04 <sbrk>
10007fe4:	00ffffc4 	movi	r3,-1
10007fe8:	10c00526 	beq	r2,r3,10008000 <_sbrk_r+0x44>
10007fec:	dfc00217 	ldw	ra,8(sp)
10007ff0:	dc400117 	ldw	r17,4(sp)
10007ff4:	dc000017 	ldw	r16,0(sp)
10007ff8:	dec00304 	addi	sp,sp,12
10007ffc:	f800283a 	ret
10008000:	80c00017 	ldw	r3,0(r16)
10008004:	183ff926 	beq	r3,zero,10007fec <__alt_data_end+0xf8007fec>
10008008:	88c00015 	stw	r3,0(r17)
1000800c:	003ff706 	br	10007fec <__alt_data_end+0xf8007fec>

10008010 <__swsetup_r>:
10008010:	00840074 	movhi	r2,4097
10008014:	defffd04 	addi	sp,sp,-12
10008018:	10b5e304 	addi	r2,r2,-10356
1000801c:	dc400115 	stw	r17,4(sp)
10008020:	2023883a 	mov	r17,r4
10008024:	11000017 	ldw	r4,0(r2)
10008028:	dc000015 	stw	r16,0(sp)
1000802c:	dfc00215 	stw	ra,8(sp)
10008030:	2821883a 	mov	r16,r5
10008034:	20000226 	beq	r4,zero,10008040 <__swsetup_r+0x30>
10008038:	20c00e17 	ldw	r3,56(r4)
1000803c:	18002e26 	beq	r3,zero,100080f8 <__swsetup_r+0xe8>
10008040:	8080030b 	ldhu	r2,12(r16)
10008044:	10c0020c 	andi	r3,r2,8
10008048:	100d883a 	mov	r6,r2
1000804c:	18000f26 	beq	r3,zero,1000808c <__swsetup_r+0x7c>
10008050:	80c00417 	ldw	r3,16(r16)
10008054:	18001526 	beq	r3,zero,100080ac <__swsetup_r+0x9c>
10008058:	1100004c 	andi	r4,r2,1
1000805c:	20001c1e 	bne	r4,zero,100080d0 <__swsetup_r+0xc0>
10008060:	1080008c 	andi	r2,r2,2
10008064:	1000261e 	bne	r2,zero,10008100 <__swsetup_r+0xf0>
10008068:	80800517 	ldw	r2,20(r16)
1000806c:	80800215 	stw	r2,8(r16)
10008070:	18001c26 	beq	r3,zero,100080e4 <__swsetup_r+0xd4>
10008074:	0005883a 	mov	r2,zero
10008078:	dfc00217 	ldw	ra,8(sp)
1000807c:	dc400117 	ldw	r17,4(sp)
10008080:	dc000017 	ldw	r16,0(sp)
10008084:	dec00304 	addi	sp,sp,12
10008088:	f800283a 	ret
1000808c:	3080040c 	andi	r2,r6,16
10008090:	10001726 	beq	r2,zero,100080f0 <__swsetup_r+0xe0>
10008094:	3080010c 	andi	r2,r6,4
10008098:	10001b1e 	bne	r2,zero,10008108 <__swsetup_r+0xf8>
1000809c:	80c00417 	ldw	r3,16(r16)
100080a0:	30800214 	ori	r2,r6,8
100080a4:	8080030d 	sth	r2,12(r16)
100080a8:	183feb1e 	bne	r3,zero,10008058 <__alt_data_end+0xf8008058>
100080ac:	1140a00c 	andi	r5,r2,640
100080b0:	01008004 	movi	r4,512
100080b4:	293fe826 	beq	r5,r4,10008058 <__alt_data_end+0xf8008058>
100080b8:	8809883a 	mov	r4,r17
100080bc:	800b883a 	mov	r5,r16
100080c0:	0008cd00 	call	10008cd0 <__smakebuf_r>
100080c4:	8080030b 	ldhu	r2,12(r16)
100080c8:	80c00417 	ldw	r3,16(r16)
100080cc:	003fe206 	br	10008058 <__alt_data_end+0xf8008058>
100080d0:	80800517 	ldw	r2,20(r16)
100080d4:	80000215 	stw	zero,8(r16)
100080d8:	0085c83a 	sub	r2,zero,r2
100080dc:	80800615 	stw	r2,24(r16)
100080e0:	183fe41e 	bne	r3,zero,10008074 <__alt_data_end+0xf8008074>
100080e4:	8080030b 	ldhu	r2,12(r16)
100080e8:	1080200c 	andi	r2,r2,128
100080ec:	103fe226 	beq	r2,zero,10008078 <__alt_data_end+0xf8008078>
100080f0:	00bfffc4 	movi	r2,-1
100080f4:	003fe006 	br	10008078 <__alt_data_end+0xf8008078>
100080f8:	00086fc0 	call	100086fc <__sinit>
100080fc:	003fd006 	br	10008040 <__alt_data_end+0xf8008040>
10008100:	0005883a 	mov	r2,zero
10008104:	003fd906 	br	1000806c <__alt_data_end+0xf800806c>
10008108:	81400c17 	ldw	r5,48(r16)
1000810c:	28000626 	beq	r5,zero,10008128 <__swsetup_r+0x118>
10008110:	80801004 	addi	r2,r16,64
10008114:	28800326 	beq	r5,r2,10008124 <__swsetup_r+0x114>
10008118:	8809883a 	mov	r4,r17
1000811c:	00088700 	call	10008870 <_free_r>
10008120:	8180030b 	ldhu	r6,12(r16)
10008124:	80000c15 	stw	zero,48(r16)
10008128:	80c00417 	ldw	r3,16(r16)
1000812c:	00bff6c4 	movi	r2,-37
10008130:	118c703a 	and	r6,r2,r6
10008134:	80000115 	stw	zero,4(r16)
10008138:	80c00015 	stw	r3,0(r16)
1000813c:	003fd806 	br	100080a0 <__alt_data_end+0xf80080a0>

10008140 <_fflush_r>:
10008140:	defffb04 	addi	sp,sp,-20
10008144:	dcc00315 	stw	r19,12(sp)
10008148:	dc000015 	stw	r16,0(sp)
1000814c:	dfc00415 	stw	ra,16(sp)
10008150:	dc800215 	stw	r18,8(sp)
10008154:	dc400115 	stw	r17,4(sp)
10008158:	2027883a 	mov	r19,r4
1000815c:	2821883a 	mov	r16,r5
10008160:	20000226 	beq	r4,zero,1000816c <_fflush_r+0x2c>
10008164:	20800e17 	ldw	r2,56(r4)
10008168:	10005326 	beq	r2,zero,100082b8 <_fflush_r+0x178>
1000816c:	8080030b 	ldhu	r2,12(r16)
10008170:	10ffffcc 	andi	r3,r2,65535
10008174:	18e0001c 	xori	r3,r3,32768
10008178:	18e00004 	addi	r3,r3,-32768
1000817c:	18002c26 	beq	r3,zero,10008230 <_fflush_r+0xf0>
10008180:	10c0020c 	andi	r3,r2,8
10008184:	1800321e 	bne	r3,zero,10008250 <_fflush_r+0x110>
10008188:	80c00117 	ldw	r3,4(r16)
1000818c:	10820014 	ori	r2,r2,2048
10008190:	8080030d 	sth	r2,12(r16)
10008194:	00c0570e 	bge	zero,r3,100082f4 <_fflush_r+0x1b4>
10008198:	82000a17 	ldw	r8,40(r16)
1000819c:	40002426 	beq	r8,zero,10008230 <_fflush_r+0xf0>
100081a0:	9c400017 	ldw	r17,0(r19)
100081a4:	10c4000c 	andi	r3,r2,4096
100081a8:	98000015 	stw	zero,0(r19)
100081ac:	18004626 	beq	r3,zero,100082c8 <_fflush_r+0x188>
100081b0:	81801417 	ldw	r6,80(r16)
100081b4:	10c0010c 	andi	r3,r2,4
100081b8:	18000626 	beq	r3,zero,100081d4 <_fflush_r+0x94>
100081bc:	80c00117 	ldw	r3,4(r16)
100081c0:	80800c17 	ldw	r2,48(r16)
100081c4:	30cdc83a 	sub	r6,r6,r3
100081c8:	10000226 	beq	r2,zero,100081d4 <_fflush_r+0x94>
100081cc:	80800f17 	ldw	r2,60(r16)
100081d0:	308dc83a 	sub	r6,r6,r2
100081d4:	81400717 	ldw	r5,28(r16)
100081d8:	9809883a 	mov	r4,r19
100081dc:	000f883a 	mov	r7,zero
100081e0:	403ee83a 	callr	r8
100081e4:	00ffffc4 	movi	r3,-1
100081e8:	10c04526 	beq	r2,r3,10008300 <_fflush_r+0x1c0>
100081ec:	80c0030b 	ldhu	r3,12(r16)
100081f0:	81000417 	ldw	r4,16(r16)
100081f4:	80000115 	stw	zero,4(r16)
100081f8:	197dffcc 	andi	r5,r3,63487
100081fc:	8140030d 	sth	r5,12(r16)
10008200:	81000015 	stw	r4,0(r16)
10008204:	18c4000c 	andi	r3,r3,4096
10008208:	18000126 	beq	r3,zero,10008210 <_fflush_r+0xd0>
1000820c:	80801415 	stw	r2,80(r16)
10008210:	81400c17 	ldw	r5,48(r16)
10008214:	9c400015 	stw	r17,0(r19)
10008218:	28000526 	beq	r5,zero,10008230 <_fflush_r+0xf0>
1000821c:	80801004 	addi	r2,r16,64
10008220:	28800226 	beq	r5,r2,1000822c <_fflush_r+0xec>
10008224:	9809883a 	mov	r4,r19
10008228:	00088700 	call	10008870 <_free_r>
1000822c:	80000c15 	stw	zero,48(r16)
10008230:	0005883a 	mov	r2,zero
10008234:	dfc00417 	ldw	ra,16(sp)
10008238:	dcc00317 	ldw	r19,12(sp)
1000823c:	dc800217 	ldw	r18,8(sp)
10008240:	dc400117 	ldw	r17,4(sp)
10008244:	dc000017 	ldw	r16,0(sp)
10008248:	dec00504 	addi	sp,sp,20
1000824c:	f800283a 	ret
10008250:	84800417 	ldw	r18,16(r16)
10008254:	903ff626 	beq	r18,zero,10008230 <__alt_data_end+0xf8008230>
10008258:	84400017 	ldw	r17,0(r16)
1000825c:	108000cc 	andi	r2,r2,3
10008260:	84800015 	stw	r18,0(r16)
10008264:	8ca3c83a 	sub	r17,r17,r18
10008268:	10001526 	beq	r2,zero,100082c0 <_fflush_r+0x180>
1000826c:	0005883a 	mov	r2,zero
10008270:	80800215 	stw	r2,8(r16)
10008274:	04400316 	blt	zero,r17,10008284 <_fflush_r+0x144>
10008278:	003fed06 	br	10008230 <__alt_data_end+0xf8008230>
1000827c:	90a5883a 	add	r18,r18,r2
10008280:	047feb0e 	bge	zero,r17,10008230 <__alt_data_end+0xf8008230>
10008284:	80800917 	ldw	r2,36(r16)
10008288:	81400717 	ldw	r5,28(r16)
1000828c:	880f883a 	mov	r7,r17
10008290:	900d883a 	mov	r6,r18
10008294:	9809883a 	mov	r4,r19
10008298:	103ee83a 	callr	r2
1000829c:	88a3c83a 	sub	r17,r17,r2
100082a0:	00bff616 	blt	zero,r2,1000827c <__alt_data_end+0xf800827c>
100082a4:	80c0030b 	ldhu	r3,12(r16)
100082a8:	00bfffc4 	movi	r2,-1
100082ac:	18c01014 	ori	r3,r3,64
100082b0:	80c0030d 	sth	r3,12(r16)
100082b4:	003fdf06 	br	10008234 <__alt_data_end+0xf8008234>
100082b8:	00086fc0 	call	100086fc <__sinit>
100082bc:	003fab06 	br	1000816c <__alt_data_end+0xf800816c>
100082c0:	80800517 	ldw	r2,20(r16)
100082c4:	003fea06 	br	10008270 <__alt_data_end+0xf8008270>
100082c8:	81400717 	ldw	r5,28(r16)
100082cc:	000d883a 	mov	r6,zero
100082d0:	9809883a 	mov	r4,r19
100082d4:	01c00044 	movi	r7,1
100082d8:	403ee83a 	callr	r8
100082dc:	100d883a 	mov	r6,r2
100082e0:	00bfffc4 	movi	r2,-1
100082e4:	30801326 	beq	r6,r2,10008334 <_fflush_r+0x1f4>
100082e8:	8080030b 	ldhu	r2,12(r16)
100082ec:	82000a17 	ldw	r8,40(r16)
100082f0:	003fb006 	br	100081b4 <__alt_data_end+0xf80081b4>
100082f4:	80c00f17 	ldw	r3,60(r16)
100082f8:	00ffa716 	blt	zero,r3,10008198 <__alt_data_end+0xf8008198>
100082fc:	003fcc06 	br	10008230 <__alt_data_end+0xf8008230>
10008300:	98c00017 	ldw	r3,0(r19)
10008304:	183fb926 	beq	r3,zero,100081ec <__alt_data_end+0xf80081ec>
10008308:	01000744 	movi	r4,29
1000830c:	19000226 	beq	r3,r4,10008318 <_fflush_r+0x1d8>
10008310:	01000584 	movi	r4,22
10008314:	1900101e 	bne	r3,r4,10008358 <_fflush_r+0x218>
10008318:	8080030b 	ldhu	r2,12(r16)
1000831c:	80c00417 	ldw	r3,16(r16)
10008320:	80000115 	stw	zero,4(r16)
10008324:	10bdffcc 	andi	r2,r2,63487
10008328:	8080030d 	sth	r2,12(r16)
1000832c:	80c00015 	stw	r3,0(r16)
10008330:	003fb706 	br	10008210 <__alt_data_end+0xf8008210>
10008334:	98800017 	ldw	r2,0(r19)
10008338:	103feb26 	beq	r2,zero,100082e8 <__alt_data_end+0xf80082e8>
1000833c:	00c00744 	movi	r3,29
10008340:	10c00226 	beq	r2,r3,1000834c <_fflush_r+0x20c>
10008344:	00c00584 	movi	r3,22
10008348:	10ffd61e 	bne	r2,r3,100082a4 <__alt_data_end+0xf80082a4>
1000834c:	9c400015 	stw	r17,0(r19)
10008350:	0005883a 	mov	r2,zero
10008354:	003fb706 	br	10008234 <__alt_data_end+0xf8008234>
10008358:	80c0030b 	ldhu	r3,12(r16)
1000835c:	18c01014 	ori	r3,r3,64
10008360:	80c0030d 	sth	r3,12(r16)
10008364:	003fb306 	br	10008234 <__alt_data_end+0xf8008234>

10008368 <fflush>:
10008368:	20000526 	beq	r4,zero,10008380 <fflush+0x18>
1000836c:	00840074 	movhi	r2,4097
10008370:	10b5e304 	addi	r2,r2,-10356
10008374:	200b883a 	mov	r5,r4
10008378:	11000017 	ldw	r4,0(r2)
1000837c:	00081401 	jmpi	10008140 <_fflush_r>
10008380:	00840074 	movhi	r2,4097
10008384:	10b5e204 	addi	r2,r2,-10360
10008388:	11000017 	ldw	r4,0(r2)
1000838c:	01440074 	movhi	r5,4097
10008390:	29605004 	addi	r5,r5,-32448
10008394:	0008c181 	jmpi	10008c18 <_fwalk_reent>

10008398 <__fp_lock>:
10008398:	0005883a 	mov	r2,zero
1000839c:	f800283a 	ret

100083a0 <__fp_unlock>:
100083a0:	0005883a 	mov	r2,zero
100083a4:	f800283a 	ret

100083a8 <_cleanup_r>:
100083a8:	01440074 	movhi	r5,4097
100083ac:	2964a604 	addi	r5,r5,-28008
100083b0:	0008b601 	jmpi	10008b60 <_fwalk>

100083b4 <__sinit.part.1>:
100083b4:	defff604 	addi	sp,sp,-40
100083b8:	00c40074 	movhi	r3,4097
100083bc:	dfc00915 	stw	ra,36(sp)
100083c0:	df000815 	stw	fp,32(sp)
100083c4:	ddc00715 	stw	r23,28(sp)
100083c8:	dd800615 	stw	r22,24(sp)
100083cc:	dd400515 	stw	r21,20(sp)
100083d0:	dd000415 	stw	r20,16(sp)
100083d4:	dcc00315 	stw	r19,12(sp)
100083d8:	dc800215 	stw	r18,8(sp)
100083dc:	dc400115 	stw	r17,4(sp)
100083e0:	dc000015 	stw	r16,0(sp)
100083e4:	18e0ea04 	addi	r3,r3,-31832
100083e8:	24000117 	ldw	r16,4(r4)
100083ec:	20c00f15 	stw	r3,60(r4)
100083f0:	07000044 	movi	fp,1
100083f4:	00c000c4 	movi	r3,3
100083f8:	2080bb04 	addi	r2,r4,748
100083fc:	20c0b915 	stw	r3,740(r4)
10008400:	27000e15 	stw	fp,56(r4)
10008404:	2080ba15 	stw	r2,744(r4)
10008408:	2000b815 	stw	zero,736(r4)
1000840c:	05c00204 	movi	r23,8
10008410:	00800104 	movi	r2,4
10008414:	2025883a 	mov	r18,r4
10008418:	b80d883a 	mov	r6,r23
1000841c:	81001704 	addi	r4,r16,92
10008420:	000b883a 	mov	r5,zero
10008424:	80000015 	stw	zero,0(r16)
10008428:	80000115 	stw	zero,4(r16)
1000842c:	80000215 	stw	zero,8(r16)
10008430:	8080030d 	sth	r2,12(r16)
10008434:	80001915 	stw	zero,100(r16)
10008438:	8000038d 	sth	zero,14(r16)
1000843c:	80000415 	stw	zero,16(r16)
10008440:	80000515 	stw	zero,20(r16)
10008444:	80000615 	stw	zero,24(r16)
10008448:	0008e880 	call	10008e88 <memset>
1000844c:	05840074 	movhi	r22,4097
10008450:	94400217 	ldw	r17,8(r18)
10008454:	05440074 	movhi	r21,4097
10008458:	05040074 	movhi	r20,4097
1000845c:	04c40074 	movhi	r19,4097
10008460:	b5a3eb04 	addi	r22,r22,-28756
10008464:	ad640204 	addi	r21,r21,-28664
10008468:	a5242104 	addi	r20,r20,-28540
1000846c:	9ce43804 	addi	r19,r19,-28448
10008470:	85800815 	stw	r22,32(r16)
10008474:	85400915 	stw	r21,36(r16)
10008478:	85000a15 	stw	r20,40(r16)
1000847c:	84c00b15 	stw	r19,44(r16)
10008480:	84000715 	stw	r16,28(r16)
10008484:	00800284 	movi	r2,10
10008488:	89001704 	addi	r4,r17,92
1000848c:	b80d883a 	mov	r6,r23
10008490:	000b883a 	mov	r5,zero
10008494:	88000015 	stw	zero,0(r17)
10008498:	88000115 	stw	zero,4(r17)
1000849c:	88000215 	stw	zero,8(r17)
100084a0:	8880030d 	sth	r2,12(r17)
100084a4:	88001915 	stw	zero,100(r17)
100084a8:	8f00038d 	sth	fp,14(r17)
100084ac:	88000415 	stw	zero,16(r17)
100084b0:	88000515 	stw	zero,20(r17)
100084b4:	88000615 	stw	zero,24(r17)
100084b8:	0008e880 	call	10008e88 <memset>
100084bc:	94000317 	ldw	r16,12(r18)
100084c0:	00800484 	movi	r2,18
100084c4:	8c400715 	stw	r17,28(r17)
100084c8:	8d800815 	stw	r22,32(r17)
100084cc:	8d400915 	stw	r21,36(r17)
100084d0:	8d000a15 	stw	r20,40(r17)
100084d4:	8cc00b15 	stw	r19,44(r17)
100084d8:	8080030d 	sth	r2,12(r16)
100084dc:	00800084 	movi	r2,2
100084e0:	80000015 	stw	zero,0(r16)
100084e4:	80000115 	stw	zero,4(r16)
100084e8:	80000215 	stw	zero,8(r16)
100084ec:	80001915 	stw	zero,100(r16)
100084f0:	8080038d 	sth	r2,14(r16)
100084f4:	80000415 	stw	zero,16(r16)
100084f8:	80000515 	stw	zero,20(r16)
100084fc:	80000615 	stw	zero,24(r16)
10008500:	81001704 	addi	r4,r16,92
10008504:	000b883a 	mov	r5,zero
10008508:	b80d883a 	mov	r6,r23
1000850c:	0008e880 	call	10008e88 <memset>
10008510:	84000715 	stw	r16,28(r16)
10008514:	85800815 	stw	r22,32(r16)
10008518:	85400915 	stw	r21,36(r16)
1000851c:	85000a15 	stw	r20,40(r16)
10008520:	84c00b15 	stw	r19,44(r16)
10008524:	dfc00917 	ldw	ra,36(sp)
10008528:	df000817 	ldw	fp,32(sp)
1000852c:	ddc00717 	ldw	r23,28(sp)
10008530:	dd800617 	ldw	r22,24(sp)
10008534:	dd400517 	ldw	r21,20(sp)
10008538:	dd000417 	ldw	r20,16(sp)
1000853c:	dcc00317 	ldw	r19,12(sp)
10008540:	dc800217 	ldw	r18,8(sp)
10008544:	dc400117 	ldw	r17,4(sp)
10008548:	dc000017 	ldw	r16,0(sp)
1000854c:	dec00a04 	addi	sp,sp,40
10008550:	f800283a 	ret

10008554 <__sfmoreglue>:
10008554:	defffc04 	addi	sp,sp,-16
10008558:	dc800215 	stw	r18,8(sp)
1000855c:	2825883a 	mov	r18,r5
10008560:	dc000015 	stw	r16,0(sp)
10008564:	01401a04 	movi	r5,104
10008568:	2021883a 	mov	r16,r4
1000856c:	9009883a 	mov	r4,r18
10008570:	dfc00315 	stw	ra,12(sp)
10008574:	dc400115 	stw	r17,4(sp)
10008578:	00040400 	call	10004040 <__mulsi3>
1000857c:	8009883a 	mov	r4,r16
10008580:	11400304 	addi	r5,r2,12
10008584:	1023883a 	mov	r17,r2
10008588:	0006ef80 	call	10006ef8 <_malloc_r>
1000858c:	1021883a 	mov	r16,r2
10008590:	10000726 	beq	r2,zero,100085b0 <__sfmoreglue+0x5c>
10008594:	11000304 	addi	r4,r2,12
10008598:	10000015 	stw	zero,0(r2)
1000859c:	14800115 	stw	r18,4(r2)
100085a0:	11000215 	stw	r4,8(r2)
100085a4:	000b883a 	mov	r5,zero
100085a8:	880d883a 	mov	r6,r17
100085ac:	0008e880 	call	10008e88 <memset>
100085b0:	8005883a 	mov	r2,r16
100085b4:	dfc00317 	ldw	ra,12(sp)
100085b8:	dc800217 	ldw	r18,8(sp)
100085bc:	dc400117 	ldw	r17,4(sp)
100085c0:	dc000017 	ldw	r16,0(sp)
100085c4:	dec00404 	addi	sp,sp,16
100085c8:	f800283a 	ret

100085cc <__sfp>:
100085cc:	00840074 	movhi	r2,4097
100085d0:	defffb04 	addi	sp,sp,-20
100085d4:	10b5e204 	addi	r2,r2,-10360
100085d8:	dc800215 	stw	r18,8(sp)
100085dc:	14800017 	ldw	r18,0(r2)
100085e0:	dcc00315 	stw	r19,12(sp)
100085e4:	dfc00415 	stw	ra,16(sp)
100085e8:	90800e17 	ldw	r2,56(r18)
100085ec:	dc400115 	stw	r17,4(sp)
100085f0:	dc000015 	stw	r16,0(sp)
100085f4:	2027883a 	mov	r19,r4
100085f8:	1000021e 	bne	r2,zero,10008604 <__sfp+0x38>
100085fc:	9009883a 	mov	r4,r18
10008600:	00083b40 	call	100083b4 <__sinit.part.1>
10008604:	9480b804 	addi	r18,r18,736
10008608:	047fffc4 	movi	r17,-1
1000860c:	91400117 	ldw	r5,4(r18)
10008610:	94000217 	ldw	r16,8(r18)
10008614:	297fffc4 	addi	r5,r5,-1
10008618:	28000a16 	blt	r5,zero,10008644 <__sfp+0x78>
1000861c:	8080030f 	ldh	r2,12(r16)
10008620:	10000c26 	beq	r2,zero,10008654 <__sfp+0x88>
10008624:	80c01d04 	addi	r3,r16,116
10008628:	00000206 	br	10008634 <__sfp+0x68>
1000862c:	18bfe60f 	ldh	r2,-104(r3)
10008630:	10000826 	beq	r2,zero,10008654 <__sfp+0x88>
10008634:	297fffc4 	addi	r5,r5,-1
10008638:	1c3ffd04 	addi	r16,r3,-12
1000863c:	18c01a04 	addi	r3,r3,104
10008640:	2c7ffa1e 	bne	r5,r17,1000862c <__alt_data_end+0xf800862c>
10008644:	90800017 	ldw	r2,0(r18)
10008648:	10001d26 	beq	r2,zero,100086c0 <__sfp+0xf4>
1000864c:	1025883a 	mov	r18,r2
10008650:	003fee06 	br	1000860c <__alt_data_end+0xf800860c>
10008654:	00bfffc4 	movi	r2,-1
10008658:	8080038d 	sth	r2,14(r16)
1000865c:	00800044 	movi	r2,1
10008660:	8080030d 	sth	r2,12(r16)
10008664:	80001915 	stw	zero,100(r16)
10008668:	80000015 	stw	zero,0(r16)
1000866c:	80000215 	stw	zero,8(r16)
10008670:	80000115 	stw	zero,4(r16)
10008674:	80000415 	stw	zero,16(r16)
10008678:	80000515 	stw	zero,20(r16)
1000867c:	80000615 	stw	zero,24(r16)
10008680:	81001704 	addi	r4,r16,92
10008684:	000b883a 	mov	r5,zero
10008688:	01800204 	movi	r6,8
1000868c:	0008e880 	call	10008e88 <memset>
10008690:	8005883a 	mov	r2,r16
10008694:	80000c15 	stw	zero,48(r16)
10008698:	80000d15 	stw	zero,52(r16)
1000869c:	80001115 	stw	zero,68(r16)
100086a0:	80001215 	stw	zero,72(r16)
100086a4:	dfc00417 	ldw	ra,16(sp)
100086a8:	dcc00317 	ldw	r19,12(sp)
100086ac:	dc800217 	ldw	r18,8(sp)
100086b0:	dc400117 	ldw	r17,4(sp)
100086b4:	dc000017 	ldw	r16,0(sp)
100086b8:	dec00504 	addi	sp,sp,20
100086bc:	f800283a 	ret
100086c0:	9809883a 	mov	r4,r19
100086c4:	01400104 	movi	r5,4
100086c8:	00085540 	call	10008554 <__sfmoreglue>
100086cc:	90800015 	stw	r2,0(r18)
100086d0:	103fde1e 	bne	r2,zero,1000864c <__alt_data_end+0xf800864c>
100086d4:	00800304 	movi	r2,12
100086d8:	98800015 	stw	r2,0(r19)
100086dc:	0005883a 	mov	r2,zero
100086e0:	003ff006 	br	100086a4 <__alt_data_end+0xf80086a4>

100086e4 <_cleanup>:
100086e4:	00840074 	movhi	r2,4097
100086e8:	10b5e204 	addi	r2,r2,-10360
100086ec:	11000017 	ldw	r4,0(r2)
100086f0:	01440074 	movhi	r5,4097
100086f4:	2964a604 	addi	r5,r5,-28008
100086f8:	0008b601 	jmpi	10008b60 <_fwalk>

100086fc <__sinit>:
100086fc:	20800e17 	ldw	r2,56(r4)
10008700:	10000126 	beq	r2,zero,10008708 <__sinit+0xc>
10008704:	f800283a 	ret
10008708:	00083b41 	jmpi	100083b4 <__sinit.part.1>

1000870c <__sfp_lock_acquire>:
1000870c:	f800283a 	ret

10008710 <__sfp_lock_release>:
10008710:	f800283a 	ret

10008714 <__sinit_lock_acquire>:
10008714:	f800283a 	ret

10008718 <__sinit_lock_release>:
10008718:	f800283a 	ret

1000871c <__fp_lock_all>:
1000871c:	00840074 	movhi	r2,4097
10008720:	10b5e304 	addi	r2,r2,-10356
10008724:	11000017 	ldw	r4,0(r2)
10008728:	01440074 	movhi	r5,4097
1000872c:	2960e604 	addi	r5,r5,-31848
10008730:	0008b601 	jmpi	10008b60 <_fwalk>

10008734 <__fp_unlock_all>:
10008734:	00840074 	movhi	r2,4097
10008738:	10b5e304 	addi	r2,r2,-10356
1000873c:	11000017 	ldw	r4,0(r2)
10008740:	01440074 	movhi	r5,4097
10008744:	2960e804 	addi	r5,r5,-31840
10008748:	0008b601 	jmpi	10008b60 <_fwalk>

1000874c <_malloc_trim_r>:
1000874c:	defffb04 	addi	sp,sp,-20
10008750:	dcc00315 	stw	r19,12(sp)
10008754:	04c40074 	movhi	r19,4097
10008758:	dc800215 	stw	r18,8(sp)
1000875c:	dc400115 	stw	r17,4(sp)
10008760:	dc000015 	stw	r16,0(sp)
10008764:	dfc00415 	stw	ra,16(sp)
10008768:	2821883a 	mov	r16,r5
1000876c:	9cf05d04 	addi	r19,r19,-16012
10008770:	2025883a 	mov	r18,r4
10008774:	00099f00 	call	100099f0 <__malloc_lock>
10008778:	98800217 	ldw	r2,8(r19)
1000877c:	14400117 	ldw	r17,4(r2)
10008780:	00bfff04 	movi	r2,-4
10008784:	88a2703a 	and	r17,r17,r2
10008788:	8c21c83a 	sub	r16,r17,r16
1000878c:	8403fbc4 	addi	r16,r16,4079
10008790:	8020d33a 	srli	r16,r16,12
10008794:	0083ffc4 	movi	r2,4095
10008798:	843fffc4 	addi	r16,r16,-1
1000879c:	8020933a 	slli	r16,r16,12
100087a0:	1400060e 	bge	r2,r16,100087bc <_malloc_trim_r+0x70>
100087a4:	9009883a 	mov	r4,r18
100087a8:	000b883a 	mov	r5,zero
100087ac:	0007fbc0 	call	10007fbc <_sbrk_r>
100087b0:	98c00217 	ldw	r3,8(r19)
100087b4:	1c47883a 	add	r3,r3,r17
100087b8:	10c00a26 	beq	r2,r3,100087e4 <_malloc_trim_r+0x98>
100087bc:	9009883a 	mov	r4,r18
100087c0:	0009a100 	call	10009a10 <__malloc_unlock>
100087c4:	0005883a 	mov	r2,zero
100087c8:	dfc00417 	ldw	ra,16(sp)
100087cc:	dcc00317 	ldw	r19,12(sp)
100087d0:	dc800217 	ldw	r18,8(sp)
100087d4:	dc400117 	ldw	r17,4(sp)
100087d8:	dc000017 	ldw	r16,0(sp)
100087dc:	dec00504 	addi	sp,sp,20
100087e0:	f800283a 	ret
100087e4:	9009883a 	mov	r4,r18
100087e8:	040bc83a 	sub	r5,zero,r16
100087ec:	0007fbc0 	call	10007fbc <_sbrk_r>
100087f0:	00ffffc4 	movi	r3,-1
100087f4:	10c00d26 	beq	r2,r3,1000882c <_malloc_trim_r+0xe0>
100087f8:	00c40074 	movhi	r3,4097
100087fc:	18fc9e04 	addi	r3,r3,-3464
10008800:	18800017 	ldw	r2,0(r3)
10008804:	99000217 	ldw	r4,8(r19)
10008808:	8c23c83a 	sub	r17,r17,r16
1000880c:	8c400054 	ori	r17,r17,1
10008810:	1421c83a 	sub	r16,r2,r16
10008814:	24400115 	stw	r17,4(r4)
10008818:	9009883a 	mov	r4,r18
1000881c:	1c000015 	stw	r16,0(r3)
10008820:	0009a100 	call	10009a10 <__malloc_unlock>
10008824:	00800044 	movi	r2,1
10008828:	003fe706 	br	100087c8 <__alt_data_end+0xf80087c8>
1000882c:	9009883a 	mov	r4,r18
10008830:	000b883a 	mov	r5,zero
10008834:	0007fbc0 	call	10007fbc <_sbrk_r>
10008838:	99000217 	ldw	r4,8(r19)
1000883c:	014003c4 	movi	r5,15
10008840:	1107c83a 	sub	r3,r2,r4
10008844:	28ffdd0e 	bge	r5,r3,100087bc <__alt_data_end+0xf80087bc>
10008848:	01440074 	movhi	r5,4097
1000884c:	2975e404 	addi	r5,r5,-10352
10008850:	29400017 	ldw	r5,0(r5)
10008854:	18c00054 	ori	r3,r3,1
10008858:	20c00115 	stw	r3,4(r4)
1000885c:	00c40074 	movhi	r3,4097
10008860:	1145c83a 	sub	r2,r2,r5
10008864:	18fc9e04 	addi	r3,r3,-3464
10008868:	18800015 	stw	r2,0(r3)
1000886c:	003fd306 	br	100087bc <__alt_data_end+0xf80087bc>

10008870 <_free_r>:
10008870:	28004c26 	beq	r5,zero,100089a4 <_free_r+0x134>
10008874:	defffd04 	addi	sp,sp,-12
10008878:	dc400115 	stw	r17,4(sp)
1000887c:	dc000015 	stw	r16,0(sp)
10008880:	2023883a 	mov	r17,r4
10008884:	2821883a 	mov	r16,r5
10008888:	dfc00215 	stw	ra,8(sp)
1000888c:	00099f00 	call	100099f0 <__malloc_lock>
10008890:	813fff17 	ldw	r4,-4(r16)
10008894:	00bfff84 	movi	r2,-2
10008898:	02440074 	movhi	r9,4097
1000889c:	81bffe04 	addi	r6,r16,-8
100088a0:	2084703a 	and	r2,r4,r2
100088a4:	4a705d04 	addi	r9,r9,-16012
100088a8:	308b883a 	add	r5,r6,r2
100088ac:	2a000117 	ldw	r8,4(r5)
100088b0:	49c00217 	ldw	r7,8(r9)
100088b4:	00ffff04 	movi	r3,-4
100088b8:	40c6703a 	and	r3,r8,r3
100088bc:	39405326 	beq	r7,r5,10008a0c <_free_r+0x19c>
100088c0:	28c00115 	stw	r3,4(r5)
100088c4:	2100004c 	andi	r4,r4,1
100088c8:	2000091e 	bne	r4,zero,100088f0 <_free_r+0x80>
100088cc:	81fffe17 	ldw	r7,-8(r16)
100088d0:	4a000204 	addi	r8,r9,8
100088d4:	31cdc83a 	sub	r6,r6,r7
100088d8:	31000217 	ldw	r4,8(r6)
100088dc:	11c5883a 	add	r2,r2,r7
100088e0:	22006126 	beq	r4,r8,10008a68 <_free_r+0x1f8>
100088e4:	31c00317 	ldw	r7,12(r6)
100088e8:	21c00315 	stw	r7,12(r4)
100088ec:	39000215 	stw	r4,8(r7)
100088f0:	28c9883a 	add	r4,r5,r3
100088f4:	21c00117 	ldw	r7,4(r4)
100088f8:	39c0004c 	andi	r7,r7,1
100088fc:	38000d1e 	bne	r7,zero,10008934 <_free_r+0xc4>
10008900:	29000217 	ldw	r4,8(r5)
10008904:	10c5883a 	add	r2,r2,r3
10008908:	00c40074 	movhi	r3,4097
1000890c:	18f05f04 	addi	r3,r3,-16004
10008910:	20c07526 	beq	r4,r3,10008ae8 <_free_r+0x278>
10008914:	29c00317 	ldw	r7,12(r5)
10008918:	11400054 	ori	r5,r2,1
1000891c:	3087883a 	add	r3,r6,r2
10008920:	21c00315 	stw	r7,12(r4)
10008924:	39000215 	stw	r4,8(r7)
10008928:	31400115 	stw	r5,4(r6)
1000892c:	18800015 	stw	r2,0(r3)
10008930:	00000406 	br	10008944 <_free_r+0xd4>
10008934:	10c00054 	ori	r3,r2,1
10008938:	30c00115 	stw	r3,4(r6)
1000893c:	3087883a 	add	r3,r6,r2
10008940:	18800015 	stw	r2,0(r3)
10008944:	00c07fc4 	movi	r3,511
10008948:	18801736 	bltu	r3,r2,100089a8 <_free_r+0x138>
1000894c:	1004d0fa 	srli	r2,r2,3
10008950:	01400044 	movi	r5,1
10008954:	49000117 	ldw	r4,4(r9)
10008958:	1087883a 	add	r3,r2,r2
1000895c:	18c7883a 	add	r3,r3,r3
10008960:	1005d0ba 	srai	r2,r2,2
10008964:	18c7883a 	add	r3,r3,r3
10008968:	1a47883a 	add	r3,r3,r9
1000896c:	19c00217 	ldw	r7,8(r3)
10008970:	2884983a 	sll	r2,r5,r2
10008974:	30c00315 	stw	r3,12(r6)
10008978:	31c00215 	stw	r7,8(r6)
1000897c:	1104b03a 	or	r2,r2,r4
10008980:	19800215 	stw	r6,8(r3)
10008984:	48800115 	stw	r2,4(r9)
10008988:	39800315 	stw	r6,12(r7)
1000898c:	8809883a 	mov	r4,r17
10008990:	dfc00217 	ldw	ra,8(sp)
10008994:	dc400117 	ldw	r17,4(sp)
10008998:	dc000017 	ldw	r16,0(sp)
1000899c:	dec00304 	addi	sp,sp,12
100089a0:	0009a101 	jmpi	10009a10 <__malloc_unlock>
100089a4:	f800283a 	ret
100089a8:	1006d27a 	srli	r3,r2,9
100089ac:	01000104 	movi	r4,4
100089b0:	20c04036 	bltu	r4,r3,10008ab4 <_free_r+0x244>
100089b4:	1006d1ba 	srli	r3,r2,6
100089b8:	19400e04 	addi	r5,r3,56
100089bc:	2947883a 	add	r3,r5,r5
100089c0:	18c7883a 	add	r3,r3,r3
100089c4:	18c7883a 	add	r3,r3,r3
100089c8:	1a49883a 	add	r4,r3,r9
100089cc:	20c00217 	ldw	r3,8(r4)
100089d0:	01c40074 	movhi	r7,4097
100089d4:	39f05d04 	addi	r7,r7,-16012
100089d8:	19003b26 	beq	r3,r4,10008ac8 <_free_r+0x258>
100089dc:	01ffff04 	movi	r7,-4
100089e0:	19400117 	ldw	r5,4(r3)
100089e4:	29ca703a 	and	r5,r5,r7
100089e8:	1140022e 	bgeu	r2,r5,100089f4 <_free_r+0x184>
100089ec:	18c00217 	ldw	r3,8(r3)
100089f0:	20fffb1e 	bne	r4,r3,100089e0 <__alt_data_end+0xf80089e0>
100089f4:	18800317 	ldw	r2,12(r3)
100089f8:	30800315 	stw	r2,12(r6)
100089fc:	30c00215 	stw	r3,8(r6)
10008a00:	11800215 	stw	r6,8(r2)
10008a04:	19800315 	stw	r6,12(r3)
10008a08:	003fe006 	br	1000898c <__alt_data_end+0xf800898c>
10008a0c:	2100004c 	andi	r4,r4,1
10008a10:	1885883a 	add	r2,r3,r2
10008a14:	2000071e 	bne	r4,zero,10008a34 <_free_r+0x1c4>
10008a18:	817ffe17 	ldw	r5,-8(r16)
10008a1c:	314dc83a 	sub	r6,r6,r5
10008a20:	30c00317 	ldw	r3,12(r6)
10008a24:	31000217 	ldw	r4,8(r6)
10008a28:	1145883a 	add	r2,r2,r5
10008a2c:	20c00315 	stw	r3,12(r4)
10008a30:	19000215 	stw	r4,8(r3)
10008a34:	10c00054 	ori	r3,r2,1
10008a38:	30c00115 	stw	r3,4(r6)
10008a3c:	00c40074 	movhi	r3,4097
10008a40:	18f5e504 	addi	r3,r3,-10348
10008a44:	18c00017 	ldw	r3,0(r3)
10008a48:	49800215 	stw	r6,8(r9)
10008a4c:	10ffcf36 	bltu	r2,r3,1000898c <__alt_data_end+0xf800898c>
10008a50:	00840074 	movhi	r2,4097
10008a54:	10bc9504 	addi	r2,r2,-3500
10008a58:	11400017 	ldw	r5,0(r2)
10008a5c:	8809883a 	mov	r4,r17
10008a60:	000874c0 	call	1000874c <_malloc_trim_r>
10008a64:	003fc906 	br	1000898c <__alt_data_end+0xf800898c>
10008a68:	28c9883a 	add	r4,r5,r3
10008a6c:	21000117 	ldw	r4,4(r4)
10008a70:	2100004c 	andi	r4,r4,1
10008a74:	20000a1e 	bne	r4,zero,10008aa0 <_free_r+0x230>
10008a78:	29000317 	ldw	r4,12(r5)
10008a7c:	29400217 	ldw	r5,8(r5)
10008a80:	10c5883a 	add	r2,r2,r3
10008a84:	10c00054 	ori	r3,r2,1
10008a88:	29000315 	stw	r4,12(r5)
10008a8c:	21400215 	stw	r5,8(r4)
10008a90:	30c00115 	stw	r3,4(r6)
10008a94:	308d883a 	add	r6,r6,r2
10008a98:	30800015 	stw	r2,0(r6)
10008a9c:	003fbb06 	br	1000898c <__alt_data_end+0xf800898c>
10008aa0:	10c00054 	ori	r3,r2,1
10008aa4:	30c00115 	stw	r3,4(r6)
10008aa8:	308d883a 	add	r6,r6,r2
10008aac:	30800015 	stw	r2,0(r6)
10008ab0:	003fb606 	br	1000898c <__alt_data_end+0xf800898c>
10008ab4:	01000504 	movi	r4,20
10008ab8:	20c01436 	bltu	r4,r3,10008b0c <_free_r+0x29c>
10008abc:	194016c4 	addi	r5,r3,91
10008ac0:	2947883a 	add	r3,r5,r5
10008ac4:	003fbe06 	br	100089c0 <__alt_data_end+0xf80089c0>
10008ac8:	280bd0ba 	srai	r5,r5,2
10008acc:	00800044 	movi	r2,1
10008ad0:	39000117 	ldw	r4,4(r7)
10008ad4:	114a983a 	sll	r5,r2,r5
10008ad8:	1805883a 	mov	r2,r3
10008adc:	2908b03a 	or	r4,r5,r4
10008ae0:	39000115 	stw	r4,4(r7)
10008ae4:	003fc406 	br	100089f8 <__alt_data_end+0xf80089f8>
10008ae8:	49800515 	stw	r6,20(r9)
10008aec:	49800415 	stw	r6,16(r9)
10008af0:	10c00054 	ori	r3,r2,1
10008af4:	31000315 	stw	r4,12(r6)
10008af8:	31000215 	stw	r4,8(r6)
10008afc:	30c00115 	stw	r3,4(r6)
10008b00:	308d883a 	add	r6,r6,r2
10008b04:	30800015 	stw	r2,0(r6)
10008b08:	003fa006 	br	1000898c <__alt_data_end+0xf800898c>
10008b0c:	01001504 	movi	r4,84
10008b10:	20c00436 	bltu	r4,r3,10008b24 <_free_r+0x2b4>
10008b14:	1006d33a 	srli	r3,r2,12
10008b18:	19401b84 	addi	r5,r3,110
10008b1c:	2947883a 	add	r3,r5,r5
10008b20:	003fa706 	br	100089c0 <__alt_data_end+0xf80089c0>
10008b24:	01005504 	movi	r4,340
10008b28:	20c00436 	bltu	r4,r3,10008b3c <_free_r+0x2cc>
10008b2c:	1006d3fa 	srli	r3,r2,15
10008b30:	19401dc4 	addi	r5,r3,119
10008b34:	2947883a 	add	r3,r5,r5
10008b38:	003fa106 	br	100089c0 <__alt_data_end+0xf80089c0>
10008b3c:	01015504 	movi	r4,1364
10008b40:	20c00436 	bltu	r4,r3,10008b54 <_free_r+0x2e4>
10008b44:	1006d4ba 	srli	r3,r2,18
10008b48:	19401f04 	addi	r5,r3,124
10008b4c:	2947883a 	add	r3,r5,r5
10008b50:	003f9b06 	br	100089c0 <__alt_data_end+0xf80089c0>
10008b54:	00c03f04 	movi	r3,252
10008b58:	01401f84 	movi	r5,126
10008b5c:	003f9806 	br	100089c0 <__alt_data_end+0xf80089c0>

10008b60 <_fwalk>:
10008b60:	defff804 	addi	sp,sp,-32
10008b64:	dd400515 	stw	r21,20(sp)
10008b68:	2540b804 	addi	r21,r4,736
10008b6c:	dd800615 	stw	r22,24(sp)
10008b70:	dd000415 	stw	r20,16(sp)
10008b74:	dfc00715 	stw	ra,28(sp)
10008b78:	dcc00315 	stw	r19,12(sp)
10008b7c:	dc800215 	stw	r18,8(sp)
10008b80:	dc400115 	stw	r17,4(sp)
10008b84:	dc000015 	stw	r16,0(sp)
10008b88:	2829883a 	mov	r20,r5
10008b8c:	002d883a 	mov	r22,zero
10008b90:	000870c0 	call	1000870c <__sfp_lock_acquire>
10008b94:	a8001426 	beq	r21,zero,10008be8 <_fwalk+0x88>
10008b98:	04ffffc4 	movi	r19,-1
10008b9c:	ac400117 	ldw	r17,4(r21)
10008ba0:	ac800217 	ldw	r18,8(r21)
10008ba4:	8c7fffc4 	addi	r17,r17,-1
10008ba8:	88000d16 	blt	r17,zero,10008be0 <_fwalk+0x80>
10008bac:	94000304 	addi	r16,r18,12
10008bb0:	94800384 	addi	r18,r18,14
10008bb4:	80c0000f 	ldh	r3,0(r16)
10008bb8:	8c7fffc4 	addi	r17,r17,-1
10008bbc:	813ffd04 	addi	r4,r16,-12
10008bc0:	18000426 	beq	r3,zero,10008bd4 <_fwalk+0x74>
10008bc4:	90c0000f 	ldh	r3,0(r18)
10008bc8:	1cc00226 	beq	r3,r19,10008bd4 <_fwalk+0x74>
10008bcc:	a03ee83a 	callr	r20
10008bd0:	b0acb03a 	or	r22,r22,r2
10008bd4:	84001a04 	addi	r16,r16,104
10008bd8:	94801a04 	addi	r18,r18,104
10008bdc:	8cfff51e 	bne	r17,r19,10008bb4 <__alt_data_end+0xf8008bb4>
10008be0:	ad400017 	ldw	r21,0(r21)
10008be4:	a83fed1e 	bne	r21,zero,10008b9c <__alt_data_end+0xf8008b9c>
10008be8:	00087100 	call	10008710 <__sfp_lock_release>
10008bec:	b005883a 	mov	r2,r22
10008bf0:	dfc00717 	ldw	ra,28(sp)
10008bf4:	dd800617 	ldw	r22,24(sp)
10008bf8:	dd400517 	ldw	r21,20(sp)
10008bfc:	dd000417 	ldw	r20,16(sp)
10008c00:	dcc00317 	ldw	r19,12(sp)
10008c04:	dc800217 	ldw	r18,8(sp)
10008c08:	dc400117 	ldw	r17,4(sp)
10008c0c:	dc000017 	ldw	r16,0(sp)
10008c10:	dec00804 	addi	sp,sp,32
10008c14:	f800283a 	ret

10008c18 <_fwalk_reent>:
10008c18:	defff804 	addi	sp,sp,-32
10008c1c:	dd400515 	stw	r21,20(sp)
10008c20:	2540b804 	addi	r21,r4,736
10008c24:	dd800615 	stw	r22,24(sp)
10008c28:	dd000415 	stw	r20,16(sp)
10008c2c:	dcc00315 	stw	r19,12(sp)
10008c30:	dfc00715 	stw	ra,28(sp)
10008c34:	dc800215 	stw	r18,8(sp)
10008c38:	dc400115 	stw	r17,4(sp)
10008c3c:	dc000015 	stw	r16,0(sp)
10008c40:	2027883a 	mov	r19,r4
10008c44:	2829883a 	mov	r20,r5
10008c48:	002d883a 	mov	r22,zero
10008c4c:	000870c0 	call	1000870c <__sfp_lock_acquire>
10008c50:	a8001326 	beq	r21,zero,10008ca0 <_fwalk_reent+0x88>
10008c54:	04bfffc4 	movi	r18,-1
10008c58:	ac400117 	ldw	r17,4(r21)
10008c5c:	ac000217 	ldw	r16,8(r21)
10008c60:	8c7fffc4 	addi	r17,r17,-1
10008c64:	88000c16 	blt	r17,zero,10008c98 <_fwalk_reent+0x80>
10008c68:	84000304 	addi	r16,r16,12
10008c6c:	80c0000f 	ldh	r3,0(r16)
10008c70:	8c7fffc4 	addi	r17,r17,-1
10008c74:	817ffd04 	addi	r5,r16,-12
10008c78:	18000526 	beq	r3,zero,10008c90 <_fwalk_reent+0x78>
10008c7c:	80c0008f 	ldh	r3,2(r16)
10008c80:	9809883a 	mov	r4,r19
10008c84:	1c800226 	beq	r3,r18,10008c90 <_fwalk_reent+0x78>
10008c88:	a03ee83a 	callr	r20
10008c8c:	b0acb03a 	or	r22,r22,r2
10008c90:	84001a04 	addi	r16,r16,104
10008c94:	8cbff51e 	bne	r17,r18,10008c6c <__alt_data_end+0xf8008c6c>
10008c98:	ad400017 	ldw	r21,0(r21)
10008c9c:	a83fee1e 	bne	r21,zero,10008c58 <__alt_data_end+0xf8008c58>
10008ca0:	00087100 	call	10008710 <__sfp_lock_release>
10008ca4:	b005883a 	mov	r2,r22
10008ca8:	dfc00717 	ldw	ra,28(sp)
10008cac:	dd800617 	ldw	r22,24(sp)
10008cb0:	dd400517 	ldw	r21,20(sp)
10008cb4:	dd000417 	ldw	r20,16(sp)
10008cb8:	dcc00317 	ldw	r19,12(sp)
10008cbc:	dc800217 	ldw	r18,8(sp)
10008cc0:	dc400117 	ldw	r17,4(sp)
10008cc4:	dc000017 	ldw	r16,0(sp)
10008cc8:	dec00804 	addi	sp,sp,32
10008ccc:	f800283a 	ret

10008cd0 <__smakebuf_r>:
10008cd0:	2880030b 	ldhu	r2,12(r5)
10008cd4:	10c0008c 	andi	r3,r2,2
10008cd8:	1800401e 	bne	r3,zero,10008ddc <__smakebuf_r+0x10c>
10008cdc:	deffec04 	addi	sp,sp,-80
10008ce0:	dc000f15 	stw	r16,60(sp)
10008ce4:	2821883a 	mov	r16,r5
10008ce8:	2940038f 	ldh	r5,14(r5)
10008cec:	dc401015 	stw	r17,64(sp)
10008cf0:	dfc01315 	stw	ra,76(sp)
10008cf4:	dcc01215 	stw	r19,72(sp)
10008cf8:	dc801115 	stw	r18,68(sp)
10008cfc:	2023883a 	mov	r17,r4
10008d00:	28001b16 	blt	r5,zero,10008d70 <__smakebuf_r+0xa0>
10008d04:	d80d883a 	mov	r6,sp
10008d08:	00092ac0 	call	100092ac <_fstat_r>
10008d0c:	10001716 	blt	r2,zero,10008d6c <__smakebuf_r+0x9c>
10008d10:	d8800117 	ldw	r2,4(sp)
10008d14:	00e00014 	movui	r3,32768
10008d18:	10bc000c 	andi	r2,r2,61440
10008d1c:	10c03726 	beq	r2,r3,10008dfc <__smakebuf_r+0x12c>
10008d20:	80c0030b 	ldhu	r3,12(r16)
10008d24:	18c20014 	ori	r3,r3,2048
10008d28:	80c0030d 	sth	r3,12(r16)
10008d2c:	00c80004 	movi	r3,8192
10008d30:	10c03c1e 	bne	r2,r3,10008e24 <__smakebuf_r+0x154>
10008d34:	8140038f 	ldh	r5,14(r16)
10008d38:	8809883a 	mov	r4,r17
10008d3c:	00093040 	call	10009304 <_isatty_r>
10008d40:	10004e26 	beq	r2,zero,10008e7c <__smakebuf_r+0x1ac>
10008d44:	8080030b 	ldhu	r2,12(r16)
10008d48:	04c00044 	movi	r19,1
10008d4c:	80c010c4 	addi	r3,r16,67
10008d50:	14c4b03a 	or	r2,r2,r19
10008d54:	8080030d 	sth	r2,12(r16)
10008d58:	80c00015 	stw	r3,0(r16)
10008d5c:	80c00415 	stw	r3,16(r16)
10008d60:	84c00515 	stw	r19,20(r16)
10008d64:	04810004 	movi	r18,1024
10008d68:	00000706 	br	10008d88 <__smakebuf_r+0xb8>
10008d6c:	8080030b 	ldhu	r2,12(r16)
10008d70:	10c0200c 	andi	r3,r2,128
10008d74:	18001f1e 	bne	r3,zero,10008df4 <__smakebuf_r+0x124>
10008d78:	04810004 	movi	r18,1024
10008d7c:	10820014 	ori	r2,r2,2048
10008d80:	8080030d 	sth	r2,12(r16)
10008d84:	0027883a 	mov	r19,zero
10008d88:	8809883a 	mov	r4,r17
10008d8c:	900b883a 	mov	r5,r18
10008d90:	0006ef80 	call	10006ef8 <_malloc_r>
10008d94:	10002e26 	beq	r2,zero,10008e50 <__smakebuf_r+0x180>
10008d98:	80c0030b 	ldhu	r3,12(r16)
10008d9c:	01040074 	movhi	r4,4097
10008da0:	2120ea04 	addi	r4,r4,-31832
10008da4:	89000f15 	stw	r4,60(r17)
10008da8:	18c02014 	ori	r3,r3,128
10008dac:	80c0030d 	sth	r3,12(r16)
10008db0:	80800015 	stw	r2,0(r16)
10008db4:	80800415 	stw	r2,16(r16)
10008db8:	84800515 	stw	r18,20(r16)
10008dbc:	98001c1e 	bne	r19,zero,10008e30 <__smakebuf_r+0x160>
10008dc0:	dfc01317 	ldw	ra,76(sp)
10008dc4:	dcc01217 	ldw	r19,72(sp)
10008dc8:	dc801117 	ldw	r18,68(sp)
10008dcc:	dc401017 	ldw	r17,64(sp)
10008dd0:	dc000f17 	ldw	r16,60(sp)
10008dd4:	dec01404 	addi	sp,sp,80
10008dd8:	f800283a 	ret
10008ddc:	288010c4 	addi	r2,r5,67
10008de0:	28800015 	stw	r2,0(r5)
10008de4:	28800415 	stw	r2,16(r5)
10008de8:	00800044 	movi	r2,1
10008dec:	28800515 	stw	r2,20(r5)
10008df0:	f800283a 	ret
10008df4:	04801004 	movi	r18,64
10008df8:	003fe006 	br	10008d7c <__alt_data_end+0xf8008d7c>
10008dfc:	81000a17 	ldw	r4,40(r16)
10008e00:	00c40074 	movhi	r3,4097
10008e04:	18e42104 	addi	r3,r3,-28540
10008e08:	20ffc51e 	bne	r4,r3,10008d20 <__alt_data_end+0xf8008d20>
10008e0c:	80c0030b 	ldhu	r3,12(r16)
10008e10:	01010004 	movi	r4,1024
10008e14:	81001315 	stw	r4,76(r16)
10008e18:	1906b03a 	or	r3,r3,r4
10008e1c:	80c0030d 	sth	r3,12(r16)
10008e20:	003fc206 	br	10008d2c <__alt_data_end+0xf8008d2c>
10008e24:	0027883a 	mov	r19,zero
10008e28:	04810004 	movi	r18,1024
10008e2c:	003fd606 	br	10008d88 <__alt_data_end+0xf8008d88>
10008e30:	8140038f 	ldh	r5,14(r16)
10008e34:	8809883a 	mov	r4,r17
10008e38:	00093040 	call	10009304 <_isatty_r>
10008e3c:	103fe026 	beq	r2,zero,10008dc0 <__alt_data_end+0xf8008dc0>
10008e40:	8080030b 	ldhu	r2,12(r16)
10008e44:	10800054 	ori	r2,r2,1
10008e48:	8080030d 	sth	r2,12(r16)
10008e4c:	003fdc06 	br	10008dc0 <__alt_data_end+0xf8008dc0>
10008e50:	8080030b 	ldhu	r2,12(r16)
10008e54:	10c0800c 	andi	r3,r2,512
10008e58:	183fd91e 	bne	r3,zero,10008dc0 <__alt_data_end+0xf8008dc0>
10008e5c:	10800094 	ori	r2,r2,2
10008e60:	80c010c4 	addi	r3,r16,67
10008e64:	8080030d 	sth	r2,12(r16)
10008e68:	00800044 	movi	r2,1
10008e6c:	80c00015 	stw	r3,0(r16)
10008e70:	80c00415 	stw	r3,16(r16)
10008e74:	80800515 	stw	r2,20(r16)
10008e78:	003fd106 	br	10008dc0 <__alt_data_end+0xf8008dc0>
10008e7c:	04c00044 	movi	r19,1
10008e80:	04810004 	movi	r18,1024
10008e84:	003fc006 	br	10008d88 <__alt_data_end+0xf8008d88>

10008e88 <memset>:
10008e88:	20c000cc 	andi	r3,r4,3
10008e8c:	2005883a 	mov	r2,r4
10008e90:	18004326 	beq	r3,zero,10008fa0 <memset+0x118>
10008e94:	31ffffc4 	addi	r7,r6,-1
10008e98:	30004026 	beq	r6,zero,10008f9c <memset+0x114>
10008e9c:	2813883a 	mov	r9,r5
10008ea0:	200d883a 	mov	r6,r4
10008ea4:	2007883a 	mov	r3,r4
10008ea8:	00000406 	br	10008ebc <memset+0x34>
10008eac:	3a3fffc4 	addi	r8,r7,-1
10008eb0:	31800044 	addi	r6,r6,1
10008eb4:	38003926 	beq	r7,zero,10008f9c <memset+0x114>
10008eb8:	400f883a 	mov	r7,r8
10008ebc:	18c00044 	addi	r3,r3,1
10008ec0:	32400005 	stb	r9,0(r6)
10008ec4:	1a0000cc 	andi	r8,r3,3
10008ec8:	403ff81e 	bne	r8,zero,10008eac <__alt_data_end+0xf8008eac>
10008ecc:	010000c4 	movi	r4,3
10008ed0:	21c02d2e 	bgeu	r4,r7,10008f88 <memset+0x100>
10008ed4:	29803fcc 	andi	r6,r5,255
10008ed8:	3008923a 	slli	r4,r6,8
10008edc:	218cb03a 	or	r6,r4,r6
10008ee0:	3008943a 	slli	r4,r6,16
10008ee4:	218cb03a 	or	r6,r4,r6
10008ee8:	010003c4 	movi	r4,15
10008eec:	21c0182e 	bgeu	r4,r7,10008f50 <memset+0xc8>
10008ef0:	3b3ffc04 	addi	r12,r7,-16
10008ef4:	6018d13a 	srli	r12,r12,4
10008ef8:	1a000104 	addi	r8,r3,4
10008efc:	1ac00204 	addi	r11,r3,8
10008f00:	6008913a 	slli	r4,r12,4
10008f04:	1a800304 	addi	r10,r3,12
10008f08:	1813883a 	mov	r9,r3
10008f0c:	21000504 	addi	r4,r4,20
10008f10:	1909883a 	add	r4,r3,r4
10008f14:	49800015 	stw	r6,0(r9)
10008f18:	41800015 	stw	r6,0(r8)
10008f1c:	59800015 	stw	r6,0(r11)
10008f20:	51800015 	stw	r6,0(r10)
10008f24:	42000404 	addi	r8,r8,16
10008f28:	4a400404 	addi	r9,r9,16
10008f2c:	5ac00404 	addi	r11,r11,16
10008f30:	52800404 	addi	r10,r10,16
10008f34:	413ff71e 	bne	r8,r4,10008f14 <__alt_data_end+0xf8008f14>
10008f38:	63000044 	addi	r12,r12,1
10008f3c:	6018913a 	slli	r12,r12,4
10008f40:	39c003cc 	andi	r7,r7,15
10008f44:	010000c4 	movi	r4,3
10008f48:	1b07883a 	add	r3,r3,r12
10008f4c:	21c00e2e 	bgeu	r4,r7,10008f88 <memset+0x100>
10008f50:	1813883a 	mov	r9,r3
10008f54:	3811883a 	mov	r8,r7
10008f58:	010000c4 	movi	r4,3
10008f5c:	49800015 	stw	r6,0(r9)
10008f60:	423fff04 	addi	r8,r8,-4
10008f64:	4a400104 	addi	r9,r9,4
10008f68:	223ffc36 	bltu	r4,r8,10008f5c <__alt_data_end+0xf8008f5c>
10008f6c:	393fff04 	addi	r4,r7,-4
10008f70:	2008d0ba 	srli	r4,r4,2
10008f74:	39c000cc 	andi	r7,r7,3
10008f78:	21000044 	addi	r4,r4,1
10008f7c:	2109883a 	add	r4,r4,r4
10008f80:	2109883a 	add	r4,r4,r4
10008f84:	1907883a 	add	r3,r3,r4
10008f88:	38000426 	beq	r7,zero,10008f9c <memset+0x114>
10008f8c:	19cf883a 	add	r7,r3,r7
10008f90:	19400005 	stb	r5,0(r3)
10008f94:	18c00044 	addi	r3,r3,1
10008f98:	19fffd1e 	bne	r3,r7,10008f90 <__alt_data_end+0xf8008f90>
10008f9c:	f800283a 	ret
10008fa0:	2007883a 	mov	r3,r4
10008fa4:	300f883a 	mov	r7,r6
10008fa8:	003fc806 	br	10008ecc <__alt_data_end+0xf8008ecc>

10008fac <__sread>:
10008fac:	defffe04 	addi	sp,sp,-8
10008fb0:	dc000015 	stw	r16,0(sp)
10008fb4:	2821883a 	mov	r16,r5
10008fb8:	2940038f 	ldh	r5,14(r5)
10008fbc:	dfc00115 	stw	ra,4(sp)
10008fc0:	00093b40 	call	100093b4 <_read_r>
10008fc4:	10000716 	blt	r2,zero,10008fe4 <__sread+0x38>
10008fc8:	80c01417 	ldw	r3,80(r16)
10008fcc:	1887883a 	add	r3,r3,r2
10008fd0:	80c01415 	stw	r3,80(r16)
10008fd4:	dfc00117 	ldw	ra,4(sp)
10008fd8:	dc000017 	ldw	r16,0(sp)
10008fdc:	dec00204 	addi	sp,sp,8
10008fe0:	f800283a 	ret
10008fe4:	80c0030b 	ldhu	r3,12(r16)
10008fe8:	18fbffcc 	andi	r3,r3,61439
10008fec:	80c0030d 	sth	r3,12(r16)
10008ff0:	dfc00117 	ldw	ra,4(sp)
10008ff4:	dc000017 	ldw	r16,0(sp)
10008ff8:	dec00204 	addi	sp,sp,8
10008ffc:	f800283a 	ret

10009000 <__seofread>:
10009000:	0005883a 	mov	r2,zero
10009004:	f800283a 	ret

10009008 <__swrite>:
10009008:	2880030b 	ldhu	r2,12(r5)
1000900c:	defffb04 	addi	sp,sp,-20
10009010:	dcc00315 	stw	r19,12(sp)
10009014:	dc800215 	stw	r18,8(sp)
10009018:	dc400115 	stw	r17,4(sp)
1000901c:	dc000015 	stw	r16,0(sp)
10009020:	dfc00415 	stw	ra,16(sp)
10009024:	10c0400c 	andi	r3,r2,256
10009028:	2821883a 	mov	r16,r5
1000902c:	2027883a 	mov	r19,r4
10009030:	3025883a 	mov	r18,r6
10009034:	3823883a 	mov	r17,r7
10009038:	18000526 	beq	r3,zero,10009050 <__swrite+0x48>
1000903c:	2940038f 	ldh	r5,14(r5)
10009040:	000d883a 	mov	r6,zero
10009044:	01c00084 	movi	r7,2
10009048:	00093580 	call	10009358 <_lseek_r>
1000904c:	8080030b 	ldhu	r2,12(r16)
10009050:	8140038f 	ldh	r5,14(r16)
10009054:	10bbffcc 	andi	r2,r2,61439
10009058:	9809883a 	mov	r4,r19
1000905c:	900d883a 	mov	r6,r18
10009060:	880f883a 	mov	r7,r17
10009064:	8080030d 	sth	r2,12(r16)
10009068:	dfc00417 	ldw	ra,16(sp)
1000906c:	dcc00317 	ldw	r19,12(sp)
10009070:	dc800217 	ldw	r18,8(sp)
10009074:	dc400117 	ldw	r17,4(sp)
10009078:	dc000017 	ldw	r16,0(sp)
1000907c:	dec00504 	addi	sp,sp,20
10009080:	00090e81 	jmpi	100090e8 <_write_r>

10009084 <__sseek>:
10009084:	defffe04 	addi	sp,sp,-8
10009088:	dc000015 	stw	r16,0(sp)
1000908c:	2821883a 	mov	r16,r5
10009090:	2940038f 	ldh	r5,14(r5)
10009094:	dfc00115 	stw	ra,4(sp)
10009098:	00093580 	call	10009358 <_lseek_r>
1000909c:	00ffffc4 	movi	r3,-1
100090a0:	10c00826 	beq	r2,r3,100090c4 <__sseek+0x40>
100090a4:	80c0030b 	ldhu	r3,12(r16)
100090a8:	80801415 	stw	r2,80(r16)
100090ac:	18c40014 	ori	r3,r3,4096
100090b0:	80c0030d 	sth	r3,12(r16)
100090b4:	dfc00117 	ldw	ra,4(sp)
100090b8:	dc000017 	ldw	r16,0(sp)
100090bc:	dec00204 	addi	sp,sp,8
100090c0:	f800283a 	ret
100090c4:	80c0030b 	ldhu	r3,12(r16)
100090c8:	18fbffcc 	andi	r3,r3,61439
100090cc:	80c0030d 	sth	r3,12(r16)
100090d0:	dfc00117 	ldw	ra,4(sp)
100090d4:	dc000017 	ldw	r16,0(sp)
100090d8:	dec00204 	addi	sp,sp,8
100090dc:	f800283a 	ret

100090e0 <__sclose>:
100090e0:	2940038f 	ldh	r5,14(r5)
100090e4:	00091441 	jmpi	10009144 <_close_r>

100090e8 <_write_r>:
100090e8:	defffd04 	addi	sp,sp,-12
100090ec:	dc000015 	stw	r16,0(sp)
100090f0:	04040074 	movhi	r16,4097
100090f4:	dc400115 	stw	r17,4(sp)
100090f8:	843c9604 	addi	r16,r16,-3496
100090fc:	2023883a 	mov	r17,r4
10009100:	2809883a 	mov	r4,r5
10009104:	300b883a 	mov	r5,r6
10009108:	380d883a 	mov	r6,r7
1000910c:	dfc00215 	stw	ra,8(sp)
10009110:	80000015 	stw	zero,0(r16)
10009114:	0009d040 	call	10009d04 <write>
10009118:	00ffffc4 	movi	r3,-1
1000911c:	10c00526 	beq	r2,r3,10009134 <_write_r+0x4c>
10009120:	dfc00217 	ldw	ra,8(sp)
10009124:	dc400117 	ldw	r17,4(sp)
10009128:	dc000017 	ldw	r16,0(sp)
1000912c:	dec00304 	addi	sp,sp,12
10009130:	f800283a 	ret
10009134:	80c00017 	ldw	r3,0(r16)
10009138:	183ff926 	beq	r3,zero,10009120 <__alt_data_end+0xf8009120>
1000913c:	88c00015 	stw	r3,0(r17)
10009140:	003ff706 	br	10009120 <__alt_data_end+0xf8009120>

10009144 <_close_r>:
10009144:	defffd04 	addi	sp,sp,-12
10009148:	dc000015 	stw	r16,0(sp)
1000914c:	04040074 	movhi	r16,4097
10009150:	dc400115 	stw	r17,4(sp)
10009154:	843c9604 	addi	r16,r16,-3496
10009158:	2023883a 	mov	r17,r4
1000915c:	2809883a 	mov	r4,r5
10009160:	dfc00215 	stw	ra,8(sp)
10009164:	80000015 	stw	zero,0(r16)
10009168:	00094600 	call	10009460 <close>
1000916c:	00ffffc4 	movi	r3,-1
10009170:	10c00526 	beq	r2,r3,10009188 <_close_r+0x44>
10009174:	dfc00217 	ldw	ra,8(sp)
10009178:	dc400117 	ldw	r17,4(sp)
1000917c:	dc000017 	ldw	r16,0(sp)
10009180:	dec00304 	addi	sp,sp,12
10009184:	f800283a 	ret
10009188:	80c00017 	ldw	r3,0(r16)
1000918c:	183ff926 	beq	r3,zero,10009174 <__alt_data_end+0xf8009174>
10009190:	88c00015 	stw	r3,0(r17)
10009194:	003ff706 	br	10009174 <__alt_data_end+0xf8009174>

10009198 <_fclose_r>:
10009198:	28003226 	beq	r5,zero,10009264 <_fclose_r+0xcc>
1000919c:	defffc04 	addi	sp,sp,-16
100091a0:	dc400115 	stw	r17,4(sp)
100091a4:	2023883a 	mov	r17,r4
100091a8:	dc000015 	stw	r16,0(sp)
100091ac:	dfc00315 	stw	ra,12(sp)
100091b0:	dc800215 	stw	r18,8(sp)
100091b4:	2821883a 	mov	r16,r5
100091b8:	000870c0 	call	1000870c <__sfp_lock_acquire>
100091bc:	88000226 	beq	r17,zero,100091c8 <_fclose_r+0x30>
100091c0:	88800e17 	ldw	r2,56(r17)
100091c4:	10002926 	beq	r2,zero,1000926c <_fclose_r+0xd4>
100091c8:	8080030f 	ldh	r2,12(r16)
100091cc:	10002226 	beq	r2,zero,10009258 <_fclose_r+0xc0>
100091d0:	8809883a 	mov	r4,r17
100091d4:	800b883a 	mov	r5,r16
100091d8:	00081400 	call	10008140 <_fflush_r>
100091dc:	1025883a 	mov	r18,r2
100091e0:	80800b17 	ldw	r2,44(r16)
100091e4:	10000426 	beq	r2,zero,100091f8 <_fclose_r+0x60>
100091e8:	81400717 	ldw	r5,28(r16)
100091ec:	8809883a 	mov	r4,r17
100091f0:	103ee83a 	callr	r2
100091f4:	10002616 	blt	r2,zero,10009290 <_fclose_r+0xf8>
100091f8:	8080030b 	ldhu	r2,12(r16)
100091fc:	1080200c 	andi	r2,r2,128
10009200:	10001f1e 	bne	r2,zero,10009280 <_fclose_r+0xe8>
10009204:	81400c17 	ldw	r5,48(r16)
10009208:	28000526 	beq	r5,zero,10009220 <_fclose_r+0x88>
1000920c:	80801004 	addi	r2,r16,64
10009210:	28800226 	beq	r5,r2,1000921c <_fclose_r+0x84>
10009214:	8809883a 	mov	r4,r17
10009218:	00088700 	call	10008870 <_free_r>
1000921c:	80000c15 	stw	zero,48(r16)
10009220:	81401117 	ldw	r5,68(r16)
10009224:	28000326 	beq	r5,zero,10009234 <_fclose_r+0x9c>
10009228:	8809883a 	mov	r4,r17
1000922c:	00088700 	call	10008870 <_free_r>
10009230:	80001115 	stw	zero,68(r16)
10009234:	8000030d 	sth	zero,12(r16)
10009238:	00087100 	call	10008710 <__sfp_lock_release>
1000923c:	9005883a 	mov	r2,r18
10009240:	dfc00317 	ldw	ra,12(sp)
10009244:	dc800217 	ldw	r18,8(sp)
10009248:	dc400117 	ldw	r17,4(sp)
1000924c:	dc000017 	ldw	r16,0(sp)
10009250:	dec00404 	addi	sp,sp,16
10009254:	f800283a 	ret
10009258:	00087100 	call	10008710 <__sfp_lock_release>
1000925c:	0005883a 	mov	r2,zero
10009260:	003ff706 	br	10009240 <__alt_data_end+0xf8009240>
10009264:	0005883a 	mov	r2,zero
10009268:	f800283a 	ret
1000926c:	8809883a 	mov	r4,r17
10009270:	00086fc0 	call	100086fc <__sinit>
10009274:	8080030f 	ldh	r2,12(r16)
10009278:	103fd51e 	bne	r2,zero,100091d0 <__alt_data_end+0xf80091d0>
1000927c:	003ff606 	br	10009258 <__alt_data_end+0xf8009258>
10009280:	81400417 	ldw	r5,16(r16)
10009284:	8809883a 	mov	r4,r17
10009288:	00088700 	call	10008870 <_free_r>
1000928c:	003fdd06 	br	10009204 <__alt_data_end+0xf8009204>
10009290:	04bfffc4 	movi	r18,-1
10009294:	003fd806 	br	100091f8 <__alt_data_end+0xf80091f8>

10009298 <fclose>:
10009298:	00840074 	movhi	r2,4097
1000929c:	10b5e304 	addi	r2,r2,-10356
100092a0:	200b883a 	mov	r5,r4
100092a4:	11000017 	ldw	r4,0(r2)
100092a8:	00091981 	jmpi	10009198 <_fclose_r>

100092ac <_fstat_r>:
100092ac:	defffd04 	addi	sp,sp,-12
100092b0:	dc000015 	stw	r16,0(sp)
100092b4:	04040074 	movhi	r16,4097
100092b8:	dc400115 	stw	r17,4(sp)
100092bc:	843c9604 	addi	r16,r16,-3496
100092c0:	2023883a 	mov	r17,r4
100092c4:	2809883a 	mov	r4,r5
100092c8:	300b883a 	mov	r5,r6
100092cc:	dfc00215 	stw	ra,8(sp)
100092d0:	80000015 	stw	zero,0(r16)
100092d4:	00095b40 	call	100095b4 <fstat>
100092d8:	00ffffc4 	movi	r3,-1
100092dc:	10c00526 	beq	r2,r3,100092f4 <_fstat_r+0x48>
100092e0:	dfc00217 	ldw	ra,8(sp)
100092e4:	dc400117 	ldw	r17,4(sp)
100092e8:	dc000017 	ldw	r16,0(sp)
100092ec:	dec00304 	addi	sp,sp,12
100092f0:	f800283a 	ret
100092f4:	80c00017 	ldw	r3,0(r16)
100092f8:	183ff926 	beq	r3,zero,100092e0 <__alt_data_end+0xf80092e0>
100092fc:	88c00015 	stw	r3,0(r17)
10009300:	003ff706 	br	100092e0 <__alt_data_end+0xf80092e0>

10009304 <_isatty_r>:
10009304:	defffd04 	addi	sp,sp,-12
10009308:	dc000015 	stw	r16,0(sp)
1000930c:	04040074 	movhi	r16,4097
10009310:	dc400115 	stw	r17,4(sp)
10009314:	843c9604 	addi	r16,r16,-3496
10009318:	2023883a 	mov	r17,r4
1000931c:	2809883a 	mov	r4,r5
10009320:	dfc00215 	stw	ra,8(sp)
10009324:	80000015 	stw	zero,0(r16)
10009328:	00096bc0 	call	100096bc <isatty>
1000932c:	00ffffc4 	movi	r3,-1
10009330:	10c00526 	beq	r2,r3,10009348 <_isatty_r+0x44>
10009334:	dfc00217 	ldw	ra,8(sp)
10009338:	dc400117 	ldw	r17,4(sp)
1000933c:	dc000017 	ldw	r16,0(sp)
10009340:	dec00304 	addi	sp,sp,12
10009344:	f800283a 	ret
10009348:	80c00017 	ldw	r3,0(r16)
1000934c:	183ff926 	beq	r3,zero,10009334 <__alt_data_end+0xf8009334>
10009350:	88c00015 	stw	r3,0(r17)
10009354:	003ff706 	br	10009334 <__alt_data_end+0xf8009334>

10009358 <_lseek_r>:
10009358:	defffd04 	addi	sp,sp,-12
1000935c:	dc000015 	stw	r16,0(sp)
10009360:	04040074 	movhi	r16,4097
10009364:	dc400115 	stw	r17,4(sp)
10009368:	843c9604 	addi	r16,r16,-3496
1000936c:	2023883a 	mov	r17,r4
10009370:	2809883a 	mov	r4,r5
10009374:	300b883a 	mov	r5,r6
10009378:	380d883a 	mov	r6,r7
1000937c:	dfc00215 	stw	ra,8(sp)
10009380:	80000015 	stw	zero,0(r16)
10009384:	000989c0 	call	1000989c <lseek>
10009388:	00ffffc4 	movi	r3,-1
1000938c:	10c00526 	beq	r2,r3,100093a4 <_lseek_r+0x4c>
10009390:	dfc00217 	ldw	ra,8(sp)
10009394:	dc400117 	ldw	r17,4(sp)
10009398:	dc000017 	ldw	r16,0(sp)
1000939c:	dec00304 	addi	sp,sp,12
100093a0:	f800283a 	ret
100093a4:	80c00017 	ldw	r3,0(r16)
100093a8:	183ff926 	beq	r3,zero,10009390 <__alt_data_end+0xf8009390>
100093ac:	88c00015 	stw	r3,0(r17)
100093b0:	003ff706 	br	10009390 <__alt_data_end+0xf8009390>

100093b4 <_read_r>:
100093b4:	defffd04 	addi	sp,sp,-12
100093b8:	dc000015 	stw	r16,0(sp)
100093bc:	04040074 	movhi	r16,4097
100093c0:	dc400115 	stw	r17,4(sp)
100093c4:	843c9604 	addi	r16,r16,-3496
100093c8:	2023883a 	mov	r17,r4
100093cc:	2809883a 	mov	r4,r5
100093d0:	300b883a 	mov	r5,r6
100093d4:	380d883a 	mov	r6,r7
100093d8:	dfc00215 	stw	ra,8(sp)
100093dc:	80000015 	stw	zero,0(r16)
100093e0:	0009a800 	call	10009a80 <read>
100093e4:	00ffffc4 	movi	r3,-1
100093e8:	10c00526 	beq	r2,r3,10009400 <_read_r+0x4c>
100093ec:	dfc00217 	ldw	ra,8(sp)
100093f0:	dc400117 	ldw	r17,4(sp)
100093f4:	dc000017 	ldw	r16,0(sp)
100093f8:	dec00304 	addi	sp,sp,12
100093fc:	f800283a 	ret
10009400:	80c00017 	ldw	r3,0(r16)
10009404:	183ff926 	beq	r3,zero,100093ec <__alt_data_end+0xf80093ec>
10009408:	88c00015 	stw	r3,0(r17)
1000940c:	003ff706 	br	100093ec <__alt_data_end+0xf80093ec>

10009410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009410:	defffe04 	addi	sp,sp,-8
10009414:	dfc00115 	stw	ra,4(sp)
10009418:	df000015 	stw	fp,0(sp)
1000941c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009420:	00840074 	movhi	r2,4097
10009424:	10b5eb04 	addi	r2,r2,-10324
10009428:	10800017 	ldw	r2,0(r2)
1000942c:	10000526 	beq	r2,zero,10009444 <alt_get_errno+0x34>
10009430:	00840074 	movhi	r2,4097
10009434:	10b5eb04 	addi	r2,r2,-10324
10009438:	10800017 	ldw	r2,0(r2)
1000943c:	103ee83a 	callr	r2
10009440:	00000206 	br	1000944c <alt_get_errno+0x3c>
10009444:	00840074 	movhi	r2,4097
10009448:	10bc9604 	addi	r2,r2,-3496
}
1000944c:	e037883a 	mov	sp,fp
10009450:	dfc00117 	ldw	ra,4(sp)
10009454:	df000017 	ldw	fp,0(sp)
10009458:	dec00204 	addi	sp,sp,8
1000945c:	f800283a 	ret

10009460 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10009460:	defffb04 	addi	sp,sp,-20
10009464:	dfc00415 	stw	ra,16(sp)
10009468:	df000315 	stw	fp,12(sp)
1000946c:	df000304 	addi	fp,sp,12
10009470:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10009474:	e0bfff17 	ldw	r2,-4(fp)
10009478:	10000816 	blt	r2,zero,1000949c <close+0x3c>
1000947c:	e13fff17 	ldw	r4,-4(fp)
10009480:	01400304 	movi	r5,12
10009484:	00040400 	call	10004040 <__mulsi3>
10009488:	1007883a 	mov	r3,r2
1000948c:	00840074 	movhi	r2,4097
10009490:	10b16904 	addi	r2,r2,-14940
10009494:	1885883a 	add	r2,r3,r2
10009498:	00000106 	br	100094a0 <close+0x40>
1000949c:	0005883a 	mov	r2,zero
100094a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100094a4:	e0bffd17 	ldw	r2,-12(fp)
100094a8:	10001926 	beq	r2,zero,10009510 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100094ac:	e0bffd17 	ldw	r2,-12(fp)
100094b0:	10800017 	ldw	r2,0(r2)
100094b4:	10800417 	ldw	r2,16(r2)
100094b8:	10000626 	beq	r2,zero,100094d4 <close+0x74>
100094bc:	e0bffd17 	ldw	r2,-12(fp)
100094c0:	10800017 	ldw	r2,0(r2)
100094c4:	10800417 	ldw	r2,16(r2)
100094c8:	e13ffd17 	ldw	r4,-12(fp)
100094cc:	103ee83a 	callr	r2
100094d0:	00000106 	br	100094d8 <close+0x78>
100094d4:	0005883a 	mov	r2,zero
100094d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100094dc:	e13fff17 	ldw	r4,-4(fp)
100094e0:	0009b840 	call	10009b84 <alt_release_fd>
    if (rval < 0)
100094e4:	e0bffe17 	ldw	r2,-8(fp)
100094e8:	1000070e 	bge	r2,zero,10009508 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100094ec:	00094100 	call	10009410 <alt_get_errno>
100094f0:	1007883a 	mov	r3,r2
100094f4:	e0bffe17 	ldw	r2,-8(fp)
100094f8:	0085c83a 	sub	r2,zero,r2
100094fc:	18800015 	stw	r2,0(r3)
      return -1;
10009500:	00bfffc4 	movi	r2,-1
10009504:	00000706 	br	10009524 <close+0xc4>
    }
    return 0;
10009508:	0005883a 	mov	r2,zero
1000950c:	00000506 	br	10009524 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10009510:	00094100 	call	10009410 <alt_get_errno>
10009514:	1007883a 	mov	r3,r2
10009518:	00801444 	movi	r2,81
1000951c:	18800015 	stw	r2,0(r3)
    return -1;
10009520:	00bfffc4 	movi	r2,-1
  }
}
10009524:	e037883a 	mov	sp,fp
10009528:	dfc00117 	ldw	ra,4(sp)
1000952c:	df000017 	ldw	fp,0(sp)
10009530:	dec00204 	addi	sp,sp,8
10009534:	f800283a 	ret

10009538 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10009538:	defffc04 	addi	sp,sp,-16
1000953c:	df000315 	stw	fp,12(sp)
10009540:	df000304 	addi	fp,sp,12
10009544:	e13ffd15 	stw	r4,-12(fp)
10009548:	e17ffe15 	stw	r5,-8(fp)
1000954c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10009550:	e0bfff17 	ldw	r2,-4(fp)
}
10009554:	e037883a 	mov	sp,fp
10009558:	df000017 	ldw	fp,0(sp)
1000955c:	dec00104 	addi	sp,sp,4
10009560:	f800283a 	ret

10009564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009564:	defffe04 	addi	sp,sp,-8
10009568:	dfc00115 	stw	ra,4(sp)
1000956c:	df000015 	stw	fp,0(sp)
10009570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009574:	00840074 	movhi	r2,4097
10009578:	10b5eb04 	addi	r2,r2,-10324
1000957c:	10800017 	ldw	r2,0(r2)
10009580:	10000526 	beq	r2,zero,10009598 <alt_get_errno+0x34>
10009584:	00840074 	movhi	r2,4097
10009588:	10b5eb04 	addi	r2,r2,-10324
1000958c:	10800017 	ldw	r2,0(r2)
10009590:	103ee83a 	callr	r2
10009594:	00000206 	br	100095a0 <alt_get_errno+0x3c>
10009598:	00840074 	movhi	r2,4097
1000959c:	10bc9604 	addi	r2,r2,-3496
}
100095a0:	e037883a 	mov	sp,fp
100095a4:	dfc00117 	ldw	ra,4(sp)
100095a8:	df000017 	ldw	fp,0(sp)
100095ac:	dec00204 	addi	sp,sp,8
100095b0:	f800283a 	ret

100095b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100095b4:	defffb04 	addi	sp,sp,-20
100095b8:	dfc00415 	stw	ra,16(sp)
100095bc:	df000315 	stw	fp,12(sp)
100095c0:	df000304 	addi	fp,sp,12
100095c4:	e13ffe15 	stw	r4,-8(fp)
100095c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100095cc:	e0bffe17 	ldw	r2,-8(fp)
100095d0:	10000816 	blt	r2,zero,100095f4 <fstat+0x40>
100095d4:	e13ffe17 	ldw	r4,-8(fp)
100095d8:	01400304 	movi	r5,12
100095dc:	00040400 	call	10004040 <__mulsi3>
100095e0:	1007883a 	mov	r3,r2
100095e4:	00840074 	movhi	r2,4097
100095e8:	10b16904 	addi	r2,r2,-14940
100095ec:	1885883a 	add	r2,r3,r2
100095f0:	00000106 	br	100095f8 <fstat+0x44>
100095f4:	0005883a 	mov	r2,zero
100095f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100095fc:	e0bffd17 	ldw	r2,-12(fp)
10009600:	10001026 	beq	r2,zero,10009644 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10009604:	e0bffd17 	ldw	r2,-12(fp)
10009608:	10800017 	ldw	r2,0(r2)
1000960c:	10800817 	ldw	r2,32(r2)
10009610:	10000726 	beq	r2,zero,10009630 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10009614:	e0bffd17 	ldw	r2,-12(fp)
10009618:	10800017 	ldw	r2,0(r2)
1000961c:	10800817 	ldw	r2,32(r2)
10009620:	e13ffd17 	ldw	r4,-12(fp)
10009624:	e17fff17 	ldw	r5,-4(fp)
10009628:	103ee83a 	callr	r2
1000962c:	00000a06 	br	10009658 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10009630:	e0bfff17 	ldw	r2,-4(fp)
10009634:	00c80004 	movi	r3,8192
10009638:	10c00115 	stw	r3,4(r2)
      return 0;
1000963c:	0005883a 	mov	r2,zero
10009640:	00000506 	br	10009658 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10009644:	00095640 	call	10009564 <alt_get_errno>
10009648:	1007883a 	mov	r3,r2
1000964c:	00801444 	movi	r2,81
10009650:	18800015 	stw	r2,0(r3)
    return -1;
10009654:	00bfffc4 	movi	r2,-1
  }
}
10009658:	e037883a 	mov	sp,fp
1000965c:	dfc00117 	ldw	ra,4(sp)
10009660:	df000017 	ldw	fp,0(sp)
10009664:	dec00204 	addi	sp,sp,8
10009668:	f800283a 	ret

1000966c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000966c:	defffe04 	addi	sp,sp,-8
10009670:	dfc00115 	stw	ra,4(sp)
10009674:	df000015 	stw	fp,0(sp)
10009678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000967c:	00840074 	movhi	r2,4097
10009680:	10b5eb04 	addi	r2,r2,-10324
10009684:	10800017 	ldw	r2,0(r2)
10009688:	10000526 	beq	r2,zero,100096a0 <alt_get_errno+0x34>
1000968c:	00840074 	movhi	r2,4097
10009690:	10b5eb04 	addi	r2,r2,-10324
10009694:	10800017 	ldw	r2,0(r2)
10009698:	103ee83a 	callr	r2
1000969c:	00000206 	br	100096a8 <alt_get_errno+0x3c>
100096a0:	00840074 	movhi	r2,4097
100096a4:	10bc9604 	addi	r2,r2,-3496
}
100096a8:	e037883a 	mov	sp,fp
100096ac:	dfc00117 	ldw	ra,4(sp)
100096b0:	df000017 	ldw	fp,0(sp)
100096b4:	dec00204 	addi	sp,sp,8
100096b8:	f800283a 	ret

100096bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100096bc:	deffed04 	addi	sp,sp,-76
100096c0:	dfc01215 	stw	ra,72(sp)
100096c4:	df001115 	stw	fp,68(sp)
100096c8:	df001104 	addi	fp,sp,68
100096cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100096d0:	e0bfff17 	ldw	r2,-4(fp)
100096d4:	10000816 	blt	r2,zero,100096f8 <isatty+0x3c>
100096d8:	e13fff17 	ldw	r4,-4(fp)
100096dc:	01400304 	movi	r5,12
100096e0:	00040400 	call	10004040 <__mulsi3>
100096e4:	1007883a 	mov	r3,r2
100096e8:	00840074 	movhi	r2,4097
100096ec:	10b16904 	addi	r2,r2,-14940
100096f0:	1885883a 	add	r2,r3,r2
100096f4:	00000106 	br	100096fc <isatty+0x40>
100096f8:	0005883a 	mov	r2,zero
100096fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10009700:	e0bfef17 	ldw	r2,-68(fp)
10009704:	10000e26 	beq	r2,zero,10009740 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10009708:	e0bfef17 	ldw	r2,-68(fp)
1000970c:	10800017 	ldw	r2,0(r2)
10009710:	10800817 	ldw	r2,32(r2)
10009714:	1000021e 	bne	r2,zero,10009720 <isatty+0x64>
    {
      return 1;
10009718:	00800044 	movi	r2,1
1000971c:	00000d06 	br	10009754 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10009720:	e0bff004 	addi	r2,fp,-64
10009724:	e13fff17 	ldw	r4,-4(fp)
10009728:	100b883a 	mov	r5,r2
1000972c:	00095b40 	call	100095b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10009730:	e0bff117 	ldw	r2,-60(fp)
10009734:	10880020 	cmpeqi	r2,r2,8192
10009738:	10803fcc 	andi	r2,r2,255
1000973c:	00000506 	br	10009754 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10009740:	000966c0 	call	1000966c <alt_get_errno>
10009744:	1007883a 	mov	r3,r2
10009748:	00801444 	movi	r2,81
1000974c:	18800015 	stw	r2,0(r3)
    return 0;
10009750:	0005883a 	mov	r2,zero
  }
}
10009754:	e037883a 	mov	sp,fp
10009758:	dfc00117 	ldw	ra,4(sp)
1000975c:	df000017 	ldw	fp,0(sp)
10009760:	dec00204 	addi	sp,sp,8
10009764:	f800283a 	ret

10009768 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10009768:	defffc04 	addi	sp,sp,-16
1000976c:	df000315 	stw	fp,12(sp)
10009770:	df000304 	addi	fp,sp,12
10009774:	e13ffd15 	stw	r4,-12(fp)
10009778:	e17ffe15 	stw	r5,-8(fp)
1000977c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10009780:	e0fffe17 	ldw	r3,-8(fp)
10009784:	e0bffd17 	ldw	r2,-12(fp)
10009788:	18800c26 	beq	r3,r2,100097bc <alt_load_section+0x54>
  {
    while( to != end )
1000978c:	00000806 	br	100097b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
10009790:	e0bffe17 	ldw	r2,-8(fp)
10009794:	10c00104 	addi	r3,r2,4
10009798:	e0fffe15 	stw	r3,-8(fp)
1000979c:	e0fffd17 	ldw	r3,-12(fp)
100097a0:	19000104 	addi	r4,r3,4
100097a4:	e13ffd15 	stw	r4,-12(fp)
100097a8:	18c00017 	ldw	r3,0(r3)
100097ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100097b0:	e0fffe17 	ldw	r3,-8(fp)
100097b4:	e0bfff17 	ldw	r2,-4(fp)
100097b8:	18bff51e 	bne	r3,r2,10009790 <__alt_data_end+0xf8009790>
    {
      *to++ = *from++;
    }
  }
}
100097bc:	e037883a 	mov	sp,fp
100097c0:	df000017 	ldw	fp,0(sp)
100097c4:	dec00104 	addi	sp,sp,4
100097c8:	f800283a 	ret

100097cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100097cc:	defffe04 	addi	sp,sp,-8
100097d0:	dfc00115 	stw	ra,4(sp)
100097d4:	df000015 	stw	fp,0(sp)
100097d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100097dc:	01040074 	movhi	r4,4097
100097e0:	2135f004 	addi	r4,r4,-10304
100097e4:	01440074 	movhi	r5,4097
100097e8:	296f5404 	addi	r5,r5,-17072
100097ec:	01840074 	movhi	r6,4097
100097f0:	31b5f004 	addi	r6,r6,-10304
100097f4:	00097680 	call	10009768 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100097f8:	01040034 	movhi	r4,4096
100097fc:	21000804 	addi	r4,r4,32
10009800:	01440034 	movhi	r5,4096
10009804:	29400804 	addi	r5,r5,32
10009808:	01840034 	movhi	r6,4096
1000980c:	31808b04 	addi	r6,r6,556
10009810:	00097680 	call	10009768 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10009814:	01040074 	movhi	r4,4097
10009818:	212eda04 	addi	r4,r4,-17560
1000981c:	01440074 	movhi	r5,4097
10009820:	296eda04 	addi	r5,r5,-17560
10009824:	01840074 	movhi	r6,4097
10009828:	31af5404 	addi	r6,r6,-17072
1000982c:	00097680 	call	10009768 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10009830:	000aa440 	call	1000aa44 <alt_dcache_flush_all>
  alt_icache_flush_all();
10009834:	000ac0c0 	call	1000ac0c <alt_icache_flush_all>
}
10009838:	e037883a 	mov	sp,fp
1000983c:	dfc00117 	ldw	ra,4(sp)
10009840:	df000017 	ldw	fp,0(sp)
10009844:	dec00204 	addi	sp,sp,8
10009848:	f800283a 	ret

1000984c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000984c:	defffe04 	addi	sp,sp,-8
10009850:	dfc00115 	stw	ra,4(sp)
10009854:	df000015 	stw	fp,0(sp)
10009858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000985c:	00840074 	movhi	r2,4097
10009860:	10b5eb04 	addi	r2,r2,-10324
10009864:	10800017 	ldw	r2,0(r2)
10009868:	10000526 	beq	r2,zero,10009880 <alt_get_errno+0x34>
1000986c:	00840074 	movhi	r2,4097
10009870:	10b5eb04 	addi	r2,r2,-10324
10009874:	10800017 	ldw	r2,0(r2)
10009878:	103ee83a 	callr	r2
1000987c:	00000206 	br	10009888 <alt_get_errno+0x3c>
10009880:	00840074 	movhi	r2,4097
10009884:	10bc9604 	addi	r2,r2,-3496
}
10009888:	e037883a 	mov	sp,fp
1000988c:	dfc00117 	ldw	ra,4(sp)
10009890:	df000017 	ldw	fp,0(sp)
10009894:	dec00204 	addi	sp,sp,8
10009898:	f800283a 	ret

1000989c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000989c:	defff904 	addi	sp,sp,-28
100098a0:	dfc00615 	stw	ra,24(sp)
100098a4:	df000515 	stw	fp,20(sp)
100098a8:	df000504 	addi	fp,sp,20
100098ac:	e13ffd15 	stw	r4,-12(fp)
100098b0:	e17ffe15 	stw	r5,-8(fp)
100098b4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100098b8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100098bc:	e0bffd17 	ldw	r2,-12(fp)
100098c0:	10000816 	blt	r2,zero,100098e4 <lseek+0x48>
100098c4:	e13ffd17 	ldw	r4,-12(fp)
100098c8:	01400304 	movi	r5,12
100098cc:	00040400 	call	10004040 <__mulsi3>
100098d0:	1007883a 	mov	r3,r2
100098d4:	00840074 	movhi	r2,4097
100098d8:	10b16904 	addi	r2,r2,-14940
100098dc:	1885883a 	add	r2,r3,r2
100098e0:	00000106 	br	100098e8 <lseek+0x4c>
100098e4:	0005883a 	mov	r2,zero
100098e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100098ec:	e0bffc17 	ldw	r2,-16(fp)
100098f0:	10001026 	beq	r2,zero,10009934 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100098f4:	e0bffc17 	ldw	r2,-16(fp)
100098f8:	10800017 	ldw	r2,0(r2)
100098fc:	10800717 	ldw	r2,28(r2)
10009900:	10000926 	beq	r2,zero,10009928 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10009904:	e0bffc17 	ldw	r2,-16(fp)
10009908:	10800017 	ldw	r2,0(r2)
1000990c:	10800717 	ldw	r2,28(r2)
10009910:	e13ffc17 	ldw	r4,-16(fp)
10009914:	e17ffe17 	ldw	r5,-8(fp)
10009918:	e1bfff17 	ldw	r6,-4(fp)
1000991c:	103ee83a 	callr	r2
10009920:	e0bffb15 	stw	r2,-20(fp)
10009924:	00000506 	br	1000993c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10009928:	00bfde84 	movi	r2,-134
1000992c:	e0bffb15 	stw	r2,-20(fp)
10009930:	00000206 	br	1000993c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10009934:	00bfebc4 	movi	r2,-81
10009938:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000993c:	e0bffb17 	ldw	r2,-20(fp)
10009940:	1000070e 	bge	r2,zero,10009960 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10009944:	000984c0 	call	1000984c <alt_get_errno>
10009948:	1007883a 	mov	r3,r2
1000994c:	e0bffb17 	ldw	r2,-20(fp)
10009950:	0085c83a 	sub	r2,zero,r2
10009954:	18800015 	stw	r2,0(r3)
    rc = -1;
10009958:	00bfffc4 	movi	r2,-1
1000995c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10009960:	e0bffb17 	ldw	r2,-20(fp)
}
10009964:	e037883a 	mov	sp,fp
10009968:	dfc00117 	ldw	ra,4(sp)
1000996c:	df000017 	ldw	fp,0(sp)
10009970:	dec00204 	addi	sp,sp,8
10009974:	f800283a 	ret

10009978 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10009978:	defffd04 	addi	sp,sp,-12
1000997c:	dfc00215 	stw	ra,8(sp)
10009980:	df000115 	stw	fp,4(sp)
10009984:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10009988:	0009883a 	mov	r4,zero
1000998c:	0009e3c0 	call	10009e3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10009990:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10009994:	0009e700 	call	10009e70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10009998:	01040074 	movhi	r4,4097
1000999c:	212f4a04 	addi	r4,r4,-17112
100099a0:	01440074 	movhi	r5,4097
100099a4:	296f4a04 	addi	r5,r5,-17112
100099a8:	01840074 	movhi	r6,4097
100099ac:	31af4a04 	addi	r6,r6,-17112
100099b0:	000afd80 	call	1000afd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100099b4:	000ab540 	call	1000ab54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100099b8:	01040074 	movhi	r4,4097
100099bc:	212aec04 	addi	r4,r4,-21584
100099c0:	000b7c40 	call	1000b7c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100099c4:	d126b617 	ldw	r4,-25896(gp)
100099c8:	d0e6b717 	ldw	r3,-25892(gp)
100099cc:	d0a6b817 	ldw	r2,-25888(gp)
100099d0:	180b883a 	mov	r5,r3
100099d4:	100d883a 	mov	r6,r2
100099d8:	00002680 	call	10000268 <main>
100099dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100099e0:	01000044 	movi	r4,1
100099e4:	00094600 	call	10009460 <close>
  exit (result);
100099e8:	e13fff17 	ldw	r4,-4(fp)
100099ec:	000b7d80 	call	1000b7d8 <exit>

100099f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100099f0:	defffe04 	addi	sp,sp,-8
100099f4:	df000115 	stw	fp,4(sp)
100099f8:	df000104 	addi	fp,sp,4
100099fc:	e13fff15 	stw	r4,-4(fp)
}
10009a00:	e037883a 	mov	sp,fp
10009a04:	df000017 	ldw	fp,0(sp)
10009a08:	dec00104 	addi	sp,sp,4
10009a0c:	f800283a 	ret

10009a10 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10009a10:	defffe04 	addi	sp,sp,-8
10009a14:	df000115 	stw	fp,4(sp)
10009a18:	df000104 	addi	fp,sp,4
10009a1c:	e13fff15 	stw	r4,-4(fp)
}
10009a20:	e037883a 	mov	sp,fp
10009a24:	df000017 	ldw	fp,0(sp)
10009a28:	dec00104 	addi	sp,sp,4
10009a2c:	f800283a 	ret

10009a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009a30:	defffe04 	addi	sp,sp,-8
10009a34:	dfc00115 	stw	ra,4(sp)
10009a38:	df000015 	stw	fp,0(sp)
10009a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009a40:	00840074 	movhi	r2,4097
10009a44:	10b5eb04 	addi	r2,r2,-10324
10009a48:	10800017 	ldw	r2,0(r2)
10009a4c:	10000526 	beq	r2,zero,10009a64 <alt_get_errno+0x34>
10009a50:	00840074 	movhi	r2,4097
10009a54:	10b5eb04 	addi	r2,r2,-10324
10009a58:	10800017 	ldw	r2,0(r2)
10009a5c:	103ee83a 	callr	r2
10009a60:	00000206 	br	10009a6c <alt_get_errno+0x3c>
10009a64:	00840074 	movhi	r2,4097
10009a68:	10bc9604 	addi	r2,r2,-3496
}
10009a6c:	e037883a 	mov	sp,fp
10009a70:	dfc00117 	ldw	ra,4(sp)
10009a74:	df000017 	ldw	fp,0(sp)
10009a78:	dec00204 	addi	sp,sp,8
10009a7c:	f800283a 	ret

10009a80 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10009a80:	defff904 	addi	sp,sp,-28
10009a84:	dfc00615 	stw	ra,24(sp)
10009a88:	df000515 	stw	fp,20(sp)
10009a8c:	df000504 	addi	fp,sp,20
10009a90:	e13ffd15 	stw	r4,-12(fp)
10009a94:	e17ffe15 	stw	r5,-8(fp)
10009a98:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10009a9c:	e0bffd17 	ldw	r2,-12(fp)
10009aa0:	10000816 	blt	r2,zero,10009ac4 <read+0x44>
10009aa4:	e13ffd17 	ldw	r4,-12(fp)
10009aa8:	01400304 	movi	r5,12
10009aac:	00040400 	call	10004040 <__mulsi3>
10009ab0:	1007883a 	mov	r3,r2
10009ab4:	00840074 	movhi	r2,4097
10009ab8:	10b16904 	addi	r2,r2,-14940
10009abc:	1885883a 	add	r2,r3,r2
10009ac0:	00000106 	br	10009ac8 <read+0x48>
10009ac4:	0005883a 	mov	r2,zero
10009ac8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10009acc:	e0bffb17 	ldw	r2,-20(fp)
10009ad0:	10002226 	beq	r2,zero,10009b5c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10009ad4:	e0bffb17 	ldw	r2,-20(fp)
10009ad8:	10800217 	ldw	r2,8(r2)
10009adc:	108000cc 	andi	r2,r2,3
10009ae0:	10800060 	cmpeqi	r2,r2,1
10009ae4:	1000181e 	bne	r2,zero,10009b48 <read+0xc8>
        (fd->dev->read))
10009ae8:	e0bffb17 	ldw	r2,-20(fp)
10009aec:	10800017 	ldw	r2,0(r2)
10009af0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10009af4:	10001426 	beq	r2,zero,10009b48 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10009af8:	e0bffb17 	ldw	r2,-20(fp)
10009afc:	10800017 	ldw	r2,0(r2)
10009b00:	10800517 	ldw	r2,20(r2)
10009b04:	e0ffff17 	ldw	r3,-4(fp)
10009b08:	e13ffb17 	ldw	r4,-20(fp)
10009b0c:	e17ffe17 	ldw	r5,-8(fp)
10009b10:	180d883a 	mov	r6,r3
10009b14:	103ee83a 	callr	r2
10009b18:	e0bffc15 	stw	r2,-16(fp)
10009b1c:	e0bffc17 	ldw	r2,-16(fp)
10009b20:	1000070e 	bge	r2,zero,10009b40 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10009b24:	0009a300 	call	10009a30 <alt_get_errno>
10009b28:	1007883a 	mov	r3,r2
10009b2c:	e0bffc17 	ldw	r2,-16(fp)
10009b30:	0085c83a 	sub	r2,zero,r2
10009b34:	18800015 	stw	r2,0(r3)
          return -1;
10009b38:	00bfffc4 	movi	r2,-1
10009b3c:	00000c06 	br	10009b70 <read+0xf0>
        }
        return rval;
10009b40:	e0bffc17 	ldw	r2,-16(fp)
10009b44:	00000a06 	br	10009b70 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10009b48:	0009a300 	call	10009a30 <alt_get_errno>
10009b4c:	1007883a 	mov	r3,r2
10009b50:	00800344 	movi	r2,13
10009b54:	18800015 	stw	r2,0(r3)
10009b58:	00000406 	br	10009b6c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10009b5c:	0009a300 	call	10009a30 <alt_get_errno>
10009b60:	1007883a 	mov	r3,r2
10009b64:	00801444 	movi	r2,81
10009b68:	18800015 	stw	r2,0(r3)
  }
  return -1;
10009b6c:	00bfffc4 	movi	r2,-1
}
10009b70:	e037883a 	mov	sp,fp
10009b74:	dfc00117 	ldw	ra,4(sp)
10009b78:	df000017 	ldw	fp,0(sp)
10009b7c:	dec00204 	addi	sp,sp,8
10009b80:	f800283a 	ret

10009b84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10009b84:	defffc04 	addi	sp,sp,-16
10009b88:	dfc00315 	stw	ra,12(sp)
10009b8c:	df000215 	stw	fp,8(sp)
10009b90:	dc000115 	stw	r16,4(sp)
10009b94:	df000204 	addi	fp,sp,8
10009b98:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10009b9c:	e0bffe17 	ldw	r2,-8(fp)
10009ba0:	108000d0 	cmplti	r2,r2,3
10009ba4:	1000111e 	bne	r2,zero,10009bec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10009ba8:	04040074 	movhi	r16,4097
10009bac:	84316904 	addi	r16,r16,-14940
10009bb0:	e0bffe17 	ldw	r2,-8(fp)
10009bb4:	1009883a 	mov	r4,r2
10009bb8:	01400304 	movi	r5,12
10009bbc:	00040400 	call	10004040 <__mulsi3>
10009bc0:	8085883a 	add	r2,r16,r2
10009bc4:	10800204 	addi	r2,r2,8
10009bc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10009bcc:	04040074 	movhi	r16,4097
10009bd0:	84316904 	addi	r16,r16,-14940
10009bd4:	e0bffe17 	ldw	r2,-8(fp)
10009bd8:	1009883a 	mov	r4,r2
10009bdc:	01400304 	movi	r5,12
10009be0:	00040400 	call	10004040 <__mulsi3>
10009be4:	8085883a 	add	r2,r16,r2
10009be8:	10000015 	stw	zero,0(r2)
  }
}
10009bec:	e6ffff04 	addi	sp,fp,-4
10009bf0:	dfc00217 	ldw	ra,8(sp)
10009bf4:	df000117 	ldw	fp,4(sp)
10009bf8:	dc000017 	ldw	r16,0(sp)
10009bfc:	dec00304 	addi	sp,sp,12
10009c00:	f800283a 	ret

10009c04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10009c04:	defff904 	addi	sp,sp,-28
10009c08:	df000615 	stw	fp,24(sp)
10009c0c:	df000604 	addi	fp,sp,24
10009c10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10009c14:	0005303a 	rdctl	r2,status
10009c18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10009c1c:	e0fffc17 	ldw	r3,-16(fp)
10009c20:	00bfff84 	movi	r2,-2
10009c24:	1884703a 	and	r2,r3,r2
10009c28:	1001703a 	wrctl	status,r2
  
  return context;
10009c2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10009c30:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10009c34:	d0a00b17 	ldw	r2,-32724(gp)
10009c38:	10c000c4 	addi	r3,r2,3
10009c3c:	00bfff04 	movi	r2,-4
10009c40:	1884703a 	and	r2,r3,r2
10009c44:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10009c48:	d0e00b17 	ldw	r3,-32724(gp)
10009c4c:	e0bfff17 	ldw	r2,-4(fp)
10009c50:	1887883a 	add	r3,r3,r2
10009c54:	00860034 	movhi	r2,6144
10009c58:	10800004 	addi	r2,r2,0
10009c5c:	10c0062e 	bgeu	r2,r3,10009c78 <sbrk+0x74>
10009c60:	e0bffa17 	ldw	r2,-24(fp)
10009c64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10009c68:	e0bffd17 	ldw	r2,-12(fp)
10009c6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10009c70:	00bfffc4 	movi	r2,-1
10009c74:	00000b06 	br	10009ca4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10009c78:	d0a00b17 	ldw	r2,-32724(gp)
10009c7c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10009c80:	d0e00b17 	ldw	r3,-32724(gp)
10009c84:	e0bfff17 	ldw	r2,-4(fp)
10009c88:	1885883a 	add	r2,r3,r2
10009c8c:	d0a00b15 	stw	r2,-32724(gp)
10009c90:	e0bffa17 	ldw	r2,-24(fp)
10009c94:	e0bffe15 	stw	r2,-8(fp)
10009c98:	e0bffe17 	ldw	r2,-8(fp)
10009c9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10009ca0:	e0bffb17 	ldw	r2,-20(fp)
} 
10009ca4:	e037883a 	mov	sp,fp
10009ca8:	df000017 	ldw	fp,0(sp)
10009cac:	dec00104 	addi	sp,sp,4
10009cb0:	f800283a 	ret

10009cb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009cb4:	defffe04 	addi	sp,sp,-8
10009cb8:	dfc00115 	stw	ra,4(sp)
10009cbc:	df000015 	stw	fp,0(sp)
10009cc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009cc4:	00840074 	movhi	r2,4097
10009cc8:	10b5eb04 	addi	r2,r2,-10324
10009ccc:	10800017 	ldw	r2,0(r2)
10009cd0:	10000526 	beq	r2,zero,10009ce8 <alt_get_errno+0x34>
10009cd4:	00840074 	movhi	r2,4097
10009cd8:	10b5eb04 	addi	r2,r2,-10324
10009cdc:	10800017 	ldw	r2,0(r2)
10009ce0:	103ee83a 	callr	r2
10009ce4:	00000206 	br	10009cf0 <alt_get_errno+0x3c>
10009ce8:	00840074 	movhi	r2,4097
10009cec:	10bc9604 	addi	r2,r2,-3496
}
10009cf0:	e037883a 	mov	sp,fp
10009cf4:	dfc00117 	ldw	ra,4(sp)
10009cf8:	df000017 	ldw	fp,0(sp)
10009cfc:	dec00204 	addi	sp,sp,8
10009d00:	f800283a 	ret

10009d04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10009d04:	defff904 	addi	sp,sp,-28
10009d08:	dfc00615 	stw	ra,24(sp)
10009d0c:	df000515 	stw	fp,20(sp)
10009d10:	df000504 	addi	fp,sp,20
10009d14:	e13ffd15 	stw	r4,-12(fp)
10009d18:	e17ffe15 	stw	r5,-8(fp)
10009d1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10009d20:	e0bffd17 	ldw	r2,-12(fp)
10009d24:	10000816 	blt	r2,zero,10009d48 <write+0x44>
10009d28:	e13ffd17 	ldw	r4,-12(fp)
10009d2c:	01400304 	movi	r5,12
10009d30:	00040400 	call	10004040 <__mulsi3>
10009d34:	1007883a 	mov	r3,r2
10009d38:	00840074 	movhi	r2,4097
10009d3c:	10b16904 	addi	r2,r2,-14940
10009d40:	1885883a 	add	r2,r3,r2
10009d44:	00000106 	br	10009d4c <write+0x48>
10009d48:	0005883a 	mov	r2,zero
10009d4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10009d50:	e0bffb17 	ldw	r2,-20(fp)
10009d54:	10002126 	beq	r2,zero,10009ddc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10009d58:	e0bffb17 	ldw	r2,-20(fp)
10009d5c:	10800217 	ldw	r2,8(r2)
10009d60:	108000cc 	andi	r2,r2,3
10009d64:	10001826 	beq	r2,zero,10009dc8 <write+0xc4>
10009d68:	e0bffb17 	ldw	r2,-20(fp)
10009d6c:	10800017 	ldw	r2,0(r2)
10009d70:	10800617 	ldw	r2,24(r2)
10009d74:	10001426 	beq	r2,zero,10009dc8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10009d78:	e0bffb17 	ldw	r2,-20(fp)
10009d7c:	10800017 	ldw	r2,0(r2)
10009d80:	10800617 	ldw	r2,24(r2)
10009d84:	e0ffff17 	ldw	r3,-4(fp)
10009d88:	e13ffb17 	ldw	r4,-20(fp)
10009d8c:	e17ffe17 	ldw	r5,-8(fp)
10009d90:	180d883a 	mov	r6,r3
10009d94:	103ee83a 	callr	r2
10009d98:	e0bffc15 	stw	r2,-16(fp)
10009d9c:	e0bffc17 	ldw	r2,-16(fp)
10009da0:	1000070e 	bge	r2,zero,10009dc0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10009da4:	0009cb40 	call	10009cb4 <alt_get_errno>
10009da8:	1007883a 	mov	r3,r2
10009dac:	e0bffc17 	ldw	r2,-16(fp)
10009db0:	0085c83a 	sub	r2,zero,r2
10009db4:	18800015 	stw	r2,0(r3)
        return -1;
10009db8:	00bfffc4 	movi	r2,-1
10009dbc:	00000c06 	br	10009df0 <write+0xec>
      }
      return rval;
10009dc0:	e0bffc17 	ldw	r2,-16(fp)
10009dc4:	00000a06 	br	10009df0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10009dc8:	0009cb40 	call	10009cb4 <alt_get_errno>
10009dcc:	1007883a 	mov	r3,r2
10009dd0:	00800344 	movi	r2,13
10009dd4:	18800015 	stw	r2,0(r3)
10009dd8:	00000406 	br	10009dec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10009ddc:	0009cb40 	call	10009cb4 <alt_get_errno>
10009de0:	1007883a 	mov	r3,r2
10009de4:	00801444 	movi	r2,81
10009de8:	18800015 	stw	r2,0(r3)
  }
  return -1;
10009dec:	00bfffc4 	movi	r2,-1
}
10009df0:	e037883a 	mov	sp,fp
10009df4:	dfc00117 	ldw	ra,4(sp)
10009df8:	df000017 	ldw	fp,0(sp)
10009dfc:	dec00204 	addi	sp,sp,8
10009e00:	f800283a 	ret

10009e04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10009e04:	defffd04 	addi	sp,sp,-12
10009e08:	dfc00215 	stw	ra,8(sp)
10009e0c:	df000115 	stw	fp,4(sp)
10009e10:	df000104 	addi	fp,sp,4
10009e14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10009e18:	e13fff17 	ldw	r4,-4(fp)
10009e1c:	01440074 	movhi	r5,4097
10009e20:	2975e804 	addi	r5,r5,-10336
10009e24:	000aab00 	call	1000aab0 <alt_dev_llist_insert>
}
10009e28:	e037883a 	mov	sp,fp
10009e2c:	dfc00117 	ldw	ra,4(sp)
10009e30:	df000017 	ldw	fp,0(sp)
10009e34:	dec00204 	addi	sp,sp,8
10009e38:	f800283a 	ret

10009e3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10009e3c:	defffd04 	addi	sp,sp,-12
10009e40:	dfc00215 	stw	ra,8(sp)
10009e44:	df000115 	stw	fp,4(sp)
10009e48:	df000104 	addi	fp,sp,4
10009e4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10009e50:	000b4900 	call	1000b490 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10009e54:	00800044 	movi	r2,1
10009e58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10009e5c:	e037883a 	mov	sp,fp
10009e60:	dfc00117 	ldw	ra,4(sp)
10009e64:	df000017 	ldw	fp,0(sp)
10009e68:	dec00204 	addi	sp,sp,8
10009e6c:	f800283a 	ret

10009e70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10009e70:	defffe04 	addi	sp,sp,-8
10009e74:	dfc00115 	stw	ra,4(sp)
10009e78:	df000015 	stw	fp,0(sp)
10009e7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10009e80:	01040074 	movhi	r4,4097
10009e84:	2131d304 	addi	r4,r4,-14516
10009e88:	000b883a 	mov	r5,zero
10009e8c:	01800144 	movi	r6,5
10009e90:	000a01c0 	call	1000a01c <altera_avalon_jtag_uart_init>
10009e94:	01040074 	movhi	r4,4097
10009e98:	2131c904 	addi	r4,r4,-14556
10009e9c:	0009e040 	call	10009e04 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10009ea0:	0001883a 	nop
}
10009ea4:	e037883a 	mov	sp,fp
10009ea8:	dfc00117 	ldw	ra,4(sp)
10009eac:	df000017 	ldw	fp,0(sp)
10009eb0:	dec00204 	addi	sp,sp,8
10009eb4:	f800283a 	ret

10009eb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10009eb8:	defffa04 	addi	sp,sp,-24
10009ebc:	dfc00515 	stw	ra,20(sp)
10009ec0:	df000415 	stw	fp,16(sp)
10009ec4:	df000404 	addi	fp,sp,16
10009ec8:	e13ffd15 	stw	r4,-12(fp)
10009ecc:	e17ffe15 	stw	r5,-8(fp)
10009ed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10009ed4:	e0bffd17 	ldw	r2,-12(fp)
10009ed8:	10800017 	ldw	r2,0(r2)
10009edc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10009ee0:	e0bffc17 	ldw	r2,-16(fp)
10009ee4:	10c00a04 	addi	r3,r2,40
10009ee8:	e0bffd17 	ldw	r2,-12(fp)
10009eec:	10800217 	ldw	r2,8(r2)
10009ef0:	1809883a 	mov	r4,r3
10009ef4:	e17ffe17 	ldw	r5,-8(fp)
10009ef8:	e1bfff17 	ldw	r6,-4(fp)
10009efc:	100f883a 	mov	r7,r2
10009f00:	000a4e00 	call	1000a4e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10009f04:	e037883a 	mov	sp,fp
10009f08:	dfc00117 	ldw	ra,4(sp)
10009f0c:	df000017 	ldw	fp,0(sp)
10009f10:	dec00204 	addi	sp,sp,8
10009f14:	f800283a 	ret

10009f18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10009f18:	defffa04 	addi	sp,sp,-24
10009f1c:	dfc00515 	stw	ra,20(sp)
10009f20:	df000415 	stw	fp,16(sp)
10009f24:	df000404 	addi	fp,sp,16
10009f28:	e13ffd15 	stw	r4,-12(fp)
10009f2c:	e17ffe15 	stw	r5,-8(fp)
10009f30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10009f34:	e0bffd17 	ldw	r2,-12(fp)
10009f38:	10800017 	ldw	r2,0(r2)
10009f3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10009f40:	e0bffc17 	ldw	r2,-16(fp)
10009f44:	10c00a04 	addi	r3,r2,40
10009f48:	e0bffd17 	ldw	r2,-12(fp)
10009f4c:	10800217 	ldw	r2,8(r2)
10009f50:	1809883a 	mov	r4,r3
10009f54:	e17ffe17 	ldw	r5,-8(fp)
10009f58:	e1bfff17 	ldw	r6,-4(fp)
10009f5c:	100f883a 	mov	r7,r2
10009f60:	000a6ec0 	call	1000a6ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10009f64:	e037883a 	mov	sp,fp
10009f68:	dfc00117 	ldw	ra,4(sp)
10009f6c:	df000017 	ldw	fp,0(sp)
10009f70:	dec00204 	addi	sp,sp,8
10009f74:	f800283a 	ret

10009f78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10009f78:	defffc04 	addi	sp,sp,-16
10009f7c:	dfc00315 	stw	ra,12(sp)
10009f80:	df000215 	stw	fp,8(sp)
10009f84:	df000204 	addi	fp,sp,8
10009f88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10009f8c:	e0bfff17 	ldw	r2,-4(fp)
10009f90:	10800017 	ldw	r2,0(r2)
10009f94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10009f98:	e0bffe17 	ldw	r2,-8(fp)
10009f9c:	10c00a04 	addi	r3,r2,40
10009fa0:	e0bfff17 	ldw	r2,-4(fp)
10009fa4:	10800217 	ldw	r2,8(r2)
10009fa8:	1809883a 	mov	r4,r3
10009fac:	100b883a 	mov	r5,r2
10009fb0:	000a38c0 	call	1000a38c <altera_avalon_jtag_uart_close>
}
10009fb4:	e037883a 	mov	sp,fp
10009fb8:	dfc00117 	ldw	ra,4(sp)
10009fbc:	df000017 	ldw	fp,0(sp)
10009fc0:	dec00204 	addi	sp,sp,8
10009fc4:	f800283a 	ret

10009fc8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10009fc8:	defffa04 	addi	sp,sp,-24
10009fcc:	dfc00515 	stw	ra,20(sp)
10009fd0:	df000415 	stw	fp,16(sp)
10009fd4:	df000404 	addi	fp,sp,16
10009fd8:	e13ffd15 	stw	r4,-12(fp)
10009fdc:	e17ffe15 	stw	r5,-8(fp)
10009fe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10009fe4:	e0bffd17 	ldw	r2,-12(fp)
10009fe8:	10800017 	ldw	r2,0(r2)
10009fec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10009ff0:	e0bffc17 	ldw	r2,-16(fp)
10009ff4:	10800a04 	addi	r2,r2,40
10009ff8:	1009883a 	mov	r4,r2
10009ffc:	e17ffe17 	ldw	r5,-8(fp)
1000a000:	e1bfff17 	ldw	r6,-4(fp)
1000a004:	000a3f40 	call	1000a3f4 <altera_avalon_jtag_uart_ioctl>
}
1000a008:	e037883a 	mov	sp,fp
1000a00c:	dfc00117 	ldw	ra,4(sp)
1000a010:	df000017 	ldw	fp,0(sp)
1000a014:	dec00204 	addi	sp,sp,8
1000a018:	f800283a 	ret

1000a01c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000a01c:	defffa04 	addi	sp,sp,-24
1000a020:	dfc00515 	stw	ra,20(sp)
1000a024:	df000415 	stw	fp,16(sp)
1000a028:	df000404 	addi	fp,sp,16
1000a02c:	e13ffd15 	stw	r4,-12(fp)
1000a030:	e17ffe15 	stw	r5,-8(fp)
1000a034:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000a038:	e0bffd17 	ldw	r2,-12(fp)
1000a03c:	00c00044 	movi	r3,1
1000a040:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000a044:	e0bffd17 	ldw	r2,-12(fp)
1000a048:	10800017 	ldw	r2,0(r2)
1000a04c:	10800104 	addi	r2,r2,4
1000a050:	1007883a 	mov	r3,r2
1000a054:	e0bffd17 	ldw	r2,-12(fp)
1000a058:	10800817 	ldw	r2,32(r2)
1000a05c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000a060:	e0fffe17 	ldw	r3,-8(fp)
1000a064:	e0bfff17 	ldw	r2,-4(fp)
1000a068:	d8000015 	stw	zero,0(sp)
1000a06c:	1809883a 	mov	r4,r3
1000a070:	100b883a 	mov	r5,r2
1000a074:	01840074 	movhi	r6,4097
1000a078:	31a83804 	addi	r6,r6,-24352
1000a07c:	e1fffd17 	ldw	r7,-12(fp)
1000a080:	000ac280 	call	1000ac28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000a084:	e0bffd17 	ldw	r2,-12(fp)
1000a088:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000a08c:	e0bffd17 	ldw	r2,-12(fp)
1000a090:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000a094:	00840074 	movhi	r2,4097
1000a098:	10bc9b04 	addi	r2,r2,-3476
1000a09c:	10800017 	ldw	r2,0(r2)
1000a0a0:	1809883a 	mov	r4,r3
1000a0a4:	100b883a 	mov	r5,r2
1000a0a8:	01840074 	movhi	r6,4097
1000a0ac:	31a8b904 	addi	r6,r6,-23836
1000a0b0:	e1fffd17 	ldw	r7,-12(fp)
1000a0b4:	000a9040 	call	1000a904 <alt_alarm_start>
1000a0b8:	1000040e 	bge	r2,zero,1000a0cc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000a0bc:	e0fffd17 	ldw	r3,-12(fp)
1000a0c0:	00a00034 	movhi	r2,32768
1000a0c4:	10bfffc4 	addi	r2,r2,-1
1000a0c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000a0cc:	e037883a 	mov	sp,fp
1000a0d0:	dfc00117 	ldw	ra,4(sp)
1000a0d4:	df000017 	ldw	fp,0(sp)
1000a0d8:	dec00204 	addi	sp,sp,8
1000a0dc:	f800283a 	ret

1000a0e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000a0e0:	defff804 	addi	sp,sp,-32
1000a0e4:	df000715 	stw	fp,28(sp)
1000a0e8:	df000704 	addi	fp,sp,28
1000a0ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000a0f0:	e0bfff17 	ldw	r2,-4(fp)
1000a0f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000a0f8:	e0bffb17 	ldw	r2,-20(fp)
1000a0fc:	10800017 	ldw	r2,0(r2)
1000a100:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000a104:	e0bffc17 	ldw	r2,-16(fp)
1000a108:	10800104 	addi	r2,r2,4
1000a10c:	10800037 	ldwio	r2,0(r2)
1000a110:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000a114:	e0bffd17 	ldw	r2,-12(fp)
1000a118:	1080c00c 	andi	r2,r2,768
1000a11c:	1000011e 	bne	r2,zero,1000a124 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000a120:	00006c06 	br	1000a2d4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000a124:	e0bffd17 	ldw	r2,-12(fp)
1000a128:	1080400c 	andi	r2,r2,256
1000a12c:	10003426 	beq	r2,zero,1000a200 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000a130:	00800074 	movhi	r2,1
1000a134:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000a138:	e0bffb17 	ldw	r2,-20(fp)
1000a13c:	10800a17 	ldw	r2,40(r2)
1000a140:	10800044 	addi	r2,r2,1
1000a144:	1081ffcc 	andi	r2,r2,2047
1000a148:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000a14c:	e0bffb17 	ldw	r2,-20(fp)
1000a150:	10c00b17 	ldw	r3,44(r2)
1000a154:	e0bffe17 	ldw	r2,-8(fp)
1000a158:	1880011e 	bne	r3,r2,1000a160 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000a15c:	00001606 	br	1000a1b8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000a160:	e0bffc17 	ldw	r2,-16(fp)
1000a164:	10800037 	ldwio	r2,0(r2)
1000a168:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000a16c:	e0bff917 	ldw	r2,-28(fp)
1000a170:	10a0000c 	andi	r2,r2,32768
1000a174:	1000011e 	bne	r2,zero,1000a17c <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000a178:	00000f06 	br	1000a1b8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000a17c:	e0bffb17 	ldw	r2,-20(fp)
1000a180:	10800a17 	ldw	r2,40(r2)
1000a184:	e0fff917 	ldw	r3,-28(fp)
1000a188:	1809883a 	mov	r4,r3
1000a18c:	e0fffb17 	ldw	r3,-20(fp)
1000a190:	1885883a 	add	r2,r3,r2
1000a194:	10800e04 	addi	r2,r2,56
1000a198:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000a19c:	e0bffb17 	ldw	r2,-20(fp)
1000a1a0:	10800a17 	ldw	r2,40(r2)
1000a1a4:	10800044 	addi	r2,r2,1
1000a1a8:	10c1ffcc 	andi	r3,r2,2047
1000a1ac:	e0bffb17 	ldw	r2,-20(fp)
1000a1b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000a1b4:	003fe006 	br	1000a138 <__alt_data_end+0xf800a138>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000a1b8:	e0bff917 	ldw	r2,-28(fp)
1000a1bc:	10bfffec 	andhi	r2,r2,65535
1000a1c0:	10000f26 	beq	r2,zero,1000a200 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000a1c4:	e0bffb17 	ldw	r2,-20(fp)
1000a1c8:	10c00817 	ldw	r3,32(r2)
1000a1cc:	00bfff84 	movi	r2,-2
1000a1d0:	1886703a 	and	r3,r3,r2
1000a1d4:	e0bffb17 	ldw	r2,-20(fp)
1000a1d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000a1dc:	e0bffc17 	ldw	r2,-16(fp)
1000a1e0:	10800104 	addi	r2,r2,4
1000a1e4:	1007883a 	mov	r3,r2
1000a1e8:	e0bffb17 	ldw	r2,-20(fp)
1000a1ec:	10800817 	ldw	r2,32(r2)
1000a1f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000a1f4:	e0bffc17 	ldw	r2,-16(fp)
1000a1f8:	10800104 	addi	r2,r2,4
1000a1fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000a200:	e0bffd17 	ldw	r2,-12(fp)
1000a204:	1080800c 	andi	r2,r2,512
1000a208:	10003126 	beq	r2,zero,1000a2d0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000a20c:	e0bffd17 	ldw	r2,-12(fp)
1000a210:	1004d43a 	srli	r2,r2,16
1000a214:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000a218:	00001406 	br	1000a26c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000a21c:	e0bffc17 	ldw	r2,-16(fp)
1000a220:	e0fffb17 	ldw	r3,-20(fp)
1000a224:	18c00d17 	ldw	r3,52(r3)
1000a228:	e13ffb17 	ldw	r4,-20(fp)
1000a22c:	20c7883a 	add	r3,r4,r3
1000a230:	18c20e04 	addi	r3,r3,2104
1000a234:	18c00003 	ldbu	r3,0(r3)
1000a238:	18c03fcc 	andi	r3,r3,255
1000a23c:	18c0201c 	xori	r3,r3,128
1000a240:	18ffe004 	addi	r3,r3,-128
1000a244:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000a248:	e0bffb17 	ldw	r2,-20(fp)
1000a24c:	10800d17 	ldw	r2,52(r2)
1000a250:	10800044 	addi	r2,r2,1
1000a254:	10c1ffcc 	andi	r3,r2,2047
1000a258:	e0bffb17 	ldw	r2,-20(fp)
1000a25c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000a260:	e0bffa17 	ldw	r2,-24(fp)
1000a264:	10bfffc4 	addi	r2,r2,-1
1000a268:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000a26c:	e0bffa17 	ldw	r2,-24(fp)
1000a270:	10000526 	beq	r2,zero,1000a288 <altera_avalon_jtag_uart_irq+0x1a8>
1000a274:	e0bffb17 	ldw	r2,-20(fp)
1000a278:	10c00d17 	ldw	r3,52(r2)
1000a27c:	e0bffb17 	ldw	r2,-20(fp)
1000a280:	10800c17 	ldw	r2,48(r2)
1000a284:	18bfe51e 	bne	r3,r2,1000a21c <__alt_data_end+0xf800a21c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000a288:	e0bffa17 	ldw	r2,-24(fp)
1000a28c:	10001026 	beq	r2,zero,1000a2d0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000a290:	e0bffb17 	ldw	r2,-20(fp)
1000a294:	10c00817 	ldw	r3,32(r2)
1000a298:	00bfff44 	movi	r2,-3
1000a29c:	1886703a 	and	r3,r3,r2
1000a2a0:	e0bffb17 	ldw	r2,-20(fp)
1000a2a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000a2a8:	e0bffb17 	ldw	r2,-20(fp)
1000a2ac:	10800017 	ldw	r2,0(r2)
1000a2b0:	10800104 	addi	r2,r2,4
1000a2b4:	1007883a 	mov	r3,r2
1000a2b8:	e0bffb17 	ldw	r2,-20(fp)
1000a2bc:	10800817 	ldw	r2,32(r2)
1000a2c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000a2c4:	e0bffc17 	ldw	r2,-16(fp)
1000a2c8:	10800104 	addi	r2,r2,4
1000a2cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000a2d0:	003f8c06 	br	1000a104 <__alt_data_end+0xf800a104>
}
1000a2d4:	e037883a 	mov	sp,fp
1000a2d8:	df000017 	ldw	fp,0(sp)
1000a2dc:	dec00104 	addi	sp,sp,4
1000a2e0:	f800283a 	ret

1000a2e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000a2e4:	defff804 	addi	sp,sp,-32
1000a2e8:	df000715 	stw	fp,28(sp)
1000a2ec:	df000704 	addi	fp,sp,28
1000a2f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000a2f4:	e0bffb17 	ldw	r2,-20(fp)
1000a2f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000a2fc:	e0bff917 	ldw	r2,-28(fp)
1000a300:	10800017 	ldw	r2,0(r2)
1000a304:	10800104 	addi	r2,r2,4
1000a308:	10800037 	ldwio	r2,0(r2)
1000a30c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000a310:	e0bffa17 	ldw	r2,-24(fp)
1000a314:	1081000c 	andi	r2,r2,1024
1000a318:	10000b26 	beq	r2,zero,1000a348 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000a31c:	e0bff917 	ldw	r2,-28(fp)
1000a320:	10800017 	ldw	r2,0(r2)
1000a324:	10800104 	addi	r2,r2,4
1000a328:	1007883a 	mov	r3,r2
1000a32c:	e0bff917 	ldw	r2,-28(fp)
1000a330:	10800817 	ldw	r2,32(r2)
1000a334:	10810014 	ori	r2,r2,1024
1000a338:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000a33c:	e0bff917 	ldw	r2,-28(fp)
1000a340:	10000915 	stw	zero,36(r2)
1000a344:	00000a06 	br	1000a370 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000a348:	e0bff917 	ldw	r2,-28(fp)
1000a34c:	10c00917 	ldw	r3,36(r2)
1000a350:	00a00034 	movhi	r2,32768
1000a354:	10bfff04 	addi	r2,r2,-4
1000a358:	10c00536 	bltu	r2,r3,1000a370 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000a35c:	e0bff917 	ldw	r2,-28(fp)
1000a360:	10800917 	ldw	r2,36(r2)
1000a364:	10c00044 	addi	r3,r2,1
1000a368:	e0bff917 	ldw	r2,-28(fp)
1000a36c:	10c00915 	stw	r3,36(r2)
1000a370:	00840074 	movhi	r2,4097
1000a374:	10bc9b04 	addi	r2,r2,-3476
1000a378:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000a37c:	e037883a 	mov	sp,fp
1000a380:	df000017 	ldw	fp,0(sp)
1000a384:	dec00104 	addi	sp,sp,4
1000a388:	f800283a 	ret

1000a38c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000a38c:	defffd04 	addi	sp,sp,-12
1000a390:	df000215 	stw	fp,8(sp)
1000a394:	df000204 	addi	fp,sp,8
1000a398:	e13ffe15 	stw	r4,-8(fp)
1000a39c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000a3a0:	00000506 	br	1000a3b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000a3a4:	e0bfff17 	ldw	r2,-4(fp)
1000a3a8:	1090000c 	andi	r2,r2,16384
1000a3ac:	10000226 	beq	r2,zero,1000a3b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000a3b0:	00bffd44 	movi	r2,-11
1000a3b4:	00000b06 	br	1000a3e4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000a3b8:	e0bffe17 	ldw	r2,-8(fp)
1000a3bc:	10c00d17 	ldw	r3,52(r2)
1000a3c0:	e0bffe17 	ldw	r2,-8(fp)
1000a3c4:	10800c17 	ldw	r2,48(r2)
1000a3c8:	18800526 	beq	r3,r2,1000a3e0 <altera_avalon_jtag_uart_close+0x54>
1000a3cc:	e0bffe17 	ldw	r2,-8(fp)
1000a3d0:	10c00917 	ldw	r3,36(r2)
1000a3d4:	e0bffe17 	ldw	r2,-8(fp)
1000a3d8:	10800117 	ldw	r2,4(r2)
1000a3dc:	18bff136 	bltu	r3,r2,1000a3a4 <__alt_data_end+0xf800a3a4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000a3e0:	0005883a 	mov	r2,zero
}
1000a3e4:	e037883a 	mov	sp,fp
1000a3e8:	df000017 	ldw	fp,0(sp)
1000a3ec:	dec00104 	addi	sp,sp,4
1000a3f0:	f800283a 	ret

1000a3f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000a3f4:	defffa04 	addi	sp,sp,-24
1000a3f8:	df000515 	stw	fp,20(sp)
1000a3fc:	df000504 	addi	fp,sp,20
1000a400:	e13ffd15 	stw	r4,-12(fp)
1000a404:	e17ffe15 	stw	r5,-8(fp)
1000a408:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000a40c:	00bff9c4 	movi	r2,-25
1000a410:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000a414:	e0bffe17 	ldw	r2,-8(fp)
1000a418:	10da8060 	cmpeqi	r3,r2,27137
1000a41c:	1800031e 	bne	r3,zero,1000a42c <altera_avalon_jtag_uart_ioctl+0x38>
1000a420:	109a80a0 	cmpeqi	r2,r2,27138
1000a424:	1000191e 	bne	r2,zero,1000a48c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000a428:	00002806 	br	1000a4cc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000a42c:	e0bffd17 	ldw	r2,-12(fp)
1000a430:	10c00117 	ldw	r3,4(r2)
1000a434:	00a00034 	movhi	r2,32768
1000a438:	10bfffc4 	addi	r2,r2,-1
1000a43c:	18801226 	beq	r3,r2,1000a488 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000a440:	e0bfff17 	ldw	r2,-4(fp)
1000a444:	10800017 	ldw	r2,0(r2)
1000a448:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000a44c:	e0bffc17 	ldw	r2,-16(fp)
1000a450:	10800090 	cmplti	r2,r2,2
1000a454:	1000061e 	bne	r2,zero,1000a470 <altera_avalon_jtag_uart_ioctl+0x7c>
1000a458:	e0fffc17 	ldw	r3,-16(fp)
1000a45c:	00a00034 	movhi	r2,32768
1000a460:	10bfffc4 	addi	r2,r2,-1
1000a464:	18800226 	beq	r3,r2,1000a470 <altera_avalon_jtag_uart_ioctl+0x7c>
1000a468:	e0bffc17 	ldw	r2,-16(fp)
1000a46c:	00000206 	br	1000a478 <altera_avalon_jtag_uart_ioctl+0x84>
1000a470:	00a00034 	movhi	r2,32768
1000a474:	10bfff84 	addi	r2,r2,-2
1000a478:	e0fffd17 	ldw	r3,-12(fp)
1000a47c:	18800115 	stw	r2,4(r3)
      rc = 0;
1000a480:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000a484:	00001106 	br	1000a4cc <altera_avalon_jtag_uart_ioctl+0xd8>
1000a488:	00001006 	br	1000a4cc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000a48c:	e0bffd17 	ldw	r2,-12(fp)
1000a490:	10c00117 	ldw	r3,4(r2)
1000a494:	00a00034 	movhi	r2,32768
1000a498:	10bfffc4 	addi	r2,r2,-1
1000a49c:	18800a26 	beq	r3,r2,1000a4c8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000a4a0:	e0bffd17 	ldw	r2,-12(fp)
1000a4a4:	10c00917 	ldw	r3,36(r2)
1000a4a8:	e0bffd17 	ldw	r2,-12(fp)
1000a4ac:	10800117 	ldw	r2,4(r2)
1000a4b0:	1885803a 	cmpltu	r2,r3,r2
1000a4b4:	10c03fcc 	andi	r3,r2,255
1000a4b8:	e0bfff17 	ldw	r2,-4(fp)
1000a4bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000a4c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000a4c4:	00000006 	br	1000a4c8 <altera_avalon_jtag_uart_ioctl+0xd4>
1000a4c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000a4cc:	e0bffb17 	ldw	r2,-20(fp)
}
1000a4d0:	e037883a 	mov	sp,fp
1000a4d4:	df000017 	ldw	fp,0(sp)
1000a4d8:	dec00104 	addi	sp,sp,4
1000a4dc:	f800283a 	ret

1000a4e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000a4e0:	defff304 	addi	sp,sp,-52
1000a4e4:	dfc00c15 	stw	ra,48(sp)
1000a4e8:	df000b15 	stw	fp,44(sp)
1000a4ec:	df000b04 	addi	fp,sp,44
1000a4f0:	e13ffc15 	stw	r4,-16(fp)
1000a4f4:	e17ffd15 	stw	r5,-12(fp)
1000a4f8:	e1bffe15 	stw	r6,-8(fp)
1000a4fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000a500:	e0bffd17 	ldw	r2,-12(fp)
1000a504:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000a508:	00004906 	br	1000a630 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000a50c:	e0bffc17 	ldw	r2,-16(fp)
1000a510:	10800a17 	ldw	r2,40(r2)
1000a514:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000a518:	e0bffc17 	ldw	r2,-16(fp)
1000a51c:	10800b17 	ldw	r2,44(r2)
1000a520:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000a524:	e0fff717 	ldw	r3,-36(fp)
1000a528:	e0bff817 	ldw	r2,-32(fp)
1000a52c:	18800536 	bltu	r3,r2,1000a544 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000a530:	e0fff717 	ldw	r3,-36(fp)
1000a534:	e0bff817 	ldw	r2,-32(fp)
1000a538:	1885c83a 	sub	r2,r3,r2
1000a53c:	e0bff615 	stw	r2,-40(fp)
1000a540:	00000406 	br	1000a554 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000a544:	00c20004 	movi	r3,2048
1000a548:	e0bff817 	ldw	r2,-32(fp)
1000a54c:	1885c83a 	sub	r2,r3,r2
1000a550:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000a554:	e0bff617 	ldw	r2,-40(fp)
1000a558:	1000011e 	bne	r2,zero,1000a560 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000a55c:	00001d06 	br	1000a5d4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000a560:	e0fffe17 	ldw	r3,-8(fp)
1000a564:	e0bff617 	ldw	r2,-40(fp)
1000a568:	1880022e 	bgeu	r3,r2,1000a574 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000a56c:	e0bffe17 	ldw	r2,-8(fp)
1000a570:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000a574:	e0bff817 	ldw	r2,-32(fp)
1000a578:	10800e04 	addi	r2,r2,56
1000a57c:	e0fffc17 	ldw	r3,-16(fp)
1000a580:	1885883a 	add	r2,r3,r2
1000a584:	e13ff517 	ldw	r4,-44(fp)
1000a588:	100b883a 	mov	r5,r2
1000a58c:	e1bff617 	ldw	r6,-40(fp)
1000a590:	00077880 	call	10007788 <memcpy>
      ptr   += n;
1000a594:	e0fff517 	ldw	r3,-44(fp)
1000a598:	e0bff617 	ldw	r2,-40(fp)
1000a59c:	1885883a 	add	r2,r3,r2
1000a5a0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000a5a4:	e0fffe17 	ldw	r3,-8(fp)
1000a5a8:	e0bff617 	ldw	r2,-40(fp)
1000a5ac:	1885c83a 	sub	r2,r3,r2
1000a5b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000a5b4:	e0fff817 	ldw	r3,-32(fp)
1000a5b8:	e0bff617 	ldw	r2,-40(fp)
1000a5bc:	1885883a 	add	r2,r3,r2
1000a5c0:	10c1ffcc 	andi	r3,r2,2047
1000a5c4:	e0bffc17 	ldw	r2,-16(fp)
1000a5c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000a5cc:	e0bffe17 	ldw	r2,-8(fp)
1000a5d0:	00bfce16 	blt	zero,r2,1000a50c <__alt_data_end+0xf800a50c>

    /* If we read any data then return it */
    if (ptr != buffer)
1000a5d4:	e0fff517 	ldw	r3,-44(fp)
1000a5d8:	e0bffd17 	ldw	r2,-12(fp)
1000a5dc:	18800126 	beq	r3,r2,1000a5e4 <altera_avalon_jtag_uart_read+0x104>
      break;
1000a5e0:	00001506 	br	1000a638 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000a5e4:	e0bfff17 	ldw	r2,-4(fp)
1000a5e8:	1090000c 	andi	r2,r2,16384
1000a5ec:	10000126 	beq	r2,zero,1000a5f4 <altera_avalon_jtag_uart_read+0x114>
      break;
1000a5f0:	00001106 	br	1000a638 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000a5f4:	0001883a 	nop
1000a5f8:	e0bffc17 	ldw	r2,-16(fp)
1000a5fc:	10c00a17 	ldw	r3,40(r2)
1000a600:	e0bff717 	ldw	r2,-36(fp)
1000a604:	1880051e 	bne	r3,r2,1000a61c <altera_avalon_jtag_uart_read+0x13c>
1000a608:	e0bffc17 	ldw	r2,-16(fp)
1000a60c:	10c00917 	ldw	r3,36(r2)
1000a610:	e0bffc17 	ldw	r2,-16(fp)
1000a614:	10800117 	ldw	r2,4(r2)
1000a618:	18bff736 	bltu	r3,r2,1000a5f8 <__alt_data_end+0xf800a5f8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000a61c:	e0bffc17 	ldw	r2,-16(fp)
1000a620:	10c00a17 	ldw	r3,40(r2)
1000a624:	e0bff717 	ldw	r2,-36(fp)
1000a628:	1880011e 	bne	r3,r2,1000a630 <altera_avalon_jtag_uart_read+0x150>
      break;
1000a62c:	00000206 	br	1000a638 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000a630:	e0bffe17 	ldw	r2,-8(fp)
1000a634:	00bfb516 	blt	zero,r2,1000a50c <__alt_data_end+0xf800a50c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000a638:	e0fff517 	ldw	r3,-44(fp)
1000a63c:	e0bffd17 	ldw	r2,-12(fp)
1000a640:	18801826 	beq	r3,r2,1000a6a4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a644:	0005303a 	rdctl	r2,status
1000a648:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a64c:	e0fffa17 	ldw	r3,-24(fp)
1000a650:	00bfff84 	movi	r2,-2
1000a654:	1884703a 	and	r2,r3,r2
1000a658:	1001703a 	wrctl	status,r2
  
  return context;
1000a65c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000a660:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000a664:	e0bffc17 	ldw	r2,-16(fp)
1000a668:	10800817 	ldw	r2,32(r2)
1000a66c:	10c00054 	ori	r3,r2,1
1000a670:	e0bffc17 	ldw	r2,-16(fp)
1000a674:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000a678:	e0bffc17 	ldw	r2,-16(fp)
1000a67c:	10800017 	ldw	r2,0(r2)
1000a680:	10800104 	addi	r2,r2,4
1000a684:	1007883a 	mov	r3,r2
1000a688:	e0bffc17 	ldw	r2,-16(fp)
1000a68c:	10800817 	ldw	r2,32(r2)
1000a690:	18800035 	stwio	r2,0(r3)
1000a694:	e0bff917 	ldw	r2,-28(fp)
1000a698:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000a69c:	e0bffb17 	ldw	r2,-20(fp)
1000a6a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000a6a4:	e0fff517 	ldw	r3,-44(fp)
1000a6a8:	e0bffd17 	ldw	r2,-12(fp)
1000a6ac:	18800426 	beq	r3,r2,1000a6c0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000a6b0:	e0fff517 	ldw	r3,-44(fp)
1000a6b4:	e0bffd17 	ldw	r2,-12(fp)
1000a6b8:	1885c83a 	sub	r2,r3,r2
1000a6bc:	00000606 	br	1000a6d8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000a6c0:	e0bfff17 	ldw	r2,-4(fp)
1000a6c4:	1090000c 	andi	r2,r2,16384
1000a6c8:	10000226 	beq	r2,zero,1000a6d4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000a6cc:	00bffd44 	movi	r2,-11
1000a6d0:	00000106 	br	1000a6d8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000a6d4:	00bffec4 	movi	r2,-5
}
1000a6d8:	e037883a 	mov	sp,fp
1000a6dc:	dfc00117 	ldw	ra,4(sp)
1000a6e0:	df000017 	ldw	fp,0(sp)
1000a6e4:	dec00204 	addi	sp,sp,8
1000a6e8:	f800283a 	ret

1000a6ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000a6ec:	defff304 	addi	sp,sp,-52
1000a6f0:	dfc00c15 	stw	ra,48(sp)
1000a6f4:	df000b15 	stw	fp,44(sp)
1000a6f8:	df000b04 	addi	fp,sp,44
1000a6fc:	e13ffc15 	stw	r4,-16(fp)
1000a700:	e17ffd15 	stw	r5,-12(fp)
1000a704:	e1bffe15 	stw	r6,-8(fp)
1000a708:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000a70c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000a710:	e0bffd17 	ldw	r2,-12(fp)
1000a714:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000a718:	00003806 	br	1000a7fc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000a71c:	e0bffc17 	ldw	r2,-16(fp)
1000a720:	10800c17 	ldw	r2,48(r2)
1000a724:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000a728:	e0bffc17 	ldw	r2,-16(fp)
1000a72c:	10800d17 	ldw	r2,52(r2)
1000a730:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000a734:	e0fff817 	ldw	r3,-32(fp)
1000a738:	e0bff517 	ldw	r2,-44(fp)
1000a73c:	1880062e 	bgeu	r3,r2,1000a758 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000a740:	e0fff517 	ldw	r3,-44(fp)
1000a744:	e0bff817 	ldw	r2,-32(fp)
1000a748:	1885c83a 	sub	r2,r3,r2
1000a74c:	10bfffc4 	addi	r2,r2,-1
1000a750:	e0bff615 	stw	r2,-40(fp)
1000a754:	00000b06 	br	1000a784 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000a758:	e0bff517 	ldw	r2,-44(fp)
1000a75c:	10000526 	beq	r2,zero,1000a774 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000a760:	00c20004 	movi	r3,2048
1000a764:	e0bff817 	ldw	r2,-32(fp)
1000a768:	1885c83a 	sub	r2,r3,r2
1000a76c:	e0bff615 	stw	r2,-40(fp)
1000a770:	00000406 	br	1000a784 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000a774:	00c1ffc4 	movi	r3,2047
1000a778:	e0bff817 	ldw	r2,-32(fp)
1000a77c:	1885c83a 	sub	r2,r3,r2
1000a780:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000a784:	e0bff617 	ldw	r2,-40(fp)
1000a788:	1000011e 	bne	r2,zero,1000a790 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000a78c:	00001d06 	br	1000a804 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000a790:	e0fffe17 	ldw	r3,-8(fp)
1000a794:	e0bff617 	ldw	r2,-40(fp)
1000a798:	1880022e 	bgeu	r3,r2,1000a7a4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000a79c:	e0bffe17 	ldw	r2,-8(fp)
1000a7a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000a7a4:	e0bff817 	ldw	r2,-32(fp)
1000a7a8:	10820e04 	addi	r2,r2,2104
1000a7ac:	e0fffc17 	ldw	r3,-16(fp)
1000a7b0:	1885883a 	add	r2,r3,r2
1000a7b4:	1009883a 	mov	r4,r2
1000a7b8:	e17ffd17 	ldw	r5,-12(fp)
1000a7bc:	e1bff617 	ldw	r6,-40(fp)
1000a7c0:	00077880 	call	10007788 <memcpy>
      ptr   += n;
1000a7c4:	e0fffd17 	ldw	r3,-12(fp)
1000a7c8:	e0bff617 	ldw	r2,-40(fp)
1000a7cc:	1885883a 	add	r2,r3,r2
1000a7d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000a7d4:	e0fffe17 	ldw	r3,-8(fp)
1000a7d8:	e0bff617 	ldw	r2,-40(fp)
1000a7dc:	1885c83a 	sub	r2,r3,r2
1000a7e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000a7e4:	e0fff817 	ldw	r3,-32(fp)
1000a7e8:	e0bff617 	ldw	r2,-40(fp)
1000a7ec:	1885883a 	add	r2,r3,r2
1000a7f0:	10c1ffcc 	andi	r3,r2,2047
1000a7f4:	e0bffc17 	ldw	r2,-16(fp)
1000a7f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000a7fc:	e0bffe17 	ldw	r2,-8(fp)
1000a800:	00bfc616 	blt	zero,r2,1000a71c <__alt_data_end+0xf800a71c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a804:	0005303a 	rdctl	r2,status
1000a808:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a80c:	e0fffa17 	ldw	r3,-24(fp)
1000a810:	00bfff84 	movi	r2,-2
1000a814:	1884703a 	and	r2,r3,r2
1000a818:	1001703a 	wrctl	status,r2
  
  return context;
1000a81c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000a820:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000a824:	e0bffc17 	ldw	r2,-16(fp)
1000a828:	10800817 	ldw	r2,32(r2)
1000a82c:	10c00094 	ori	r3,r2,2
1000a830:	e0bffc17 	ldw	r2,-16(fp)
1000a834:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000a838:	e0bffc17 	ldw	r2,-16(fp)
1000a83c:	10800017 	ldw	r2,0(r2)
1000a840:	10800104 	addi	r2,r2,4
1000a844:	1007883a 	mov	r3,r2
1000a848:	e0bffc17 	ldw	r2,-16(fp)
1000a84c:	10800817 	ldw	r2,32(r2)
1000a850:	18800035 	stwio	r2,0(r3)
1000a854:	e0bff917 	ldw	r2,-28(fp)
1000a858:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000a85c:	e0bffb17 	ldw	r2,-20(fp)
1000a860:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000a864:	e0bffe17 	ldw	r2,-8(fp)
1000a868:	0080120e 	bge	zero,r2,1000a8b4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000a86c:	e0bfff17 	ldw	r2,-4(fp)
1000a870:	1090000c 	andi	r2,r2,16384
1000a874:	10000126 	beq	r2,zero,1000a87c <altera_avalon_jtag_uart_write+0x190>
        break;
1000a878:	00001006 	br	1000a8bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000a87c:	0001883a 	nop
1000a880:	e0bffc17 	ldw	r2,-16(fp)
1000a884:	10c00d17 	ldw	r3,52(r2)
1000a888:	e0bff517 	ldw	r2,-44(fp)
1000a88c:	1880051e 	bne	r3,r2,1000a8a4 <altera_avalon_jtag_uart_write+0x1b8>
1000a890:	e0bffc17 	ldw	r2,-16(fp)
1000a894:	10c00917 	ldw	r3,36(r2)
1000a898:	e0bffc17 	ldw	r2,-16(fp)
1000a89c:	10800117 	ldw	r2,4(r2)
1000a8a0:	18bff736 	bltu	r3,r2,1000a880 <__alt_data_end+0xf800a880>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000a8a4:	e0bffc17 	ldw	r2,-16(fp)
1000a8a8:	10800917 	ldw	r2,36(r2)
1000a8ac:	10000126 	beq	r2,zero,1000a8b4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000a8b0:	00000206 	br	1000a8bc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000a8b4:	e0bffe17 	ldw	r2,-8(fp)
1000a8b8:	00bf9716 	blt	zero,r2,1000a718 <__alt_data_end+0xf800a718>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000a8bc:	e0fffd17 	ldw	r3,-12(fp)
1000a8c0:	e0bff717 	ldw	r2,-36(fp)
1000a8c4:	18800426 	beq	r3,r2,1000a8d8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000a8c8:	e0fffd17 	ldw	r3,-12(fp)
1000a8cc:	e0bff717 	ldw	r2,-36(fp)
1000a8d0:	1885c83a 	sub	r2,r3,r2
1000a8d4:	00000606 	br	1000a8f0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000a8d8:	e0bfff17 	ldw	r2,-4(fp)
1000a8dc:	1090000c 	andi	r2,r2,16384
1000a8e0:	10000226 	beq	r2,zero,1000a8ec <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000a8e4:	00bffd44 	movi	r2,-11
1000a8e8:	00000106 	br	1000a8f0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000a8ec:	00bffec4 	movi	r2,-5
}
1000a8f0:	e037883a 	mov	sp,fp
1000a8f4:	dfc00117 	ldw	ra,4(sp)
1000a8f8:	df000017 	ldw	fp,0(sp)
1000a8fc:	dec00204 	addi	sp,sp,8
1000a900:	f800283a 	ret

1000a904 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000a904:	defff504 	addi	sp,sp,-44
1000a908:	df000a15 	stw	fp,40(sp)
1000a90c:	df000a04 	addi	fp,sp,40
1000a910:	e13ffc15 	stw	r4,-16(fp)
1000a914:	e17ffd15 	stw	r5,-12(fp)
1000a918:	e1bffe15 	stw	r6,-8(fp)
1000a91c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000a920:	e03ff615 	stw	zero,-40(fp)
1000a924:	00840074 	movhi	r2,4097
1000a928:	10bc9b04 	addi	r2,r2,-3476
1000a92c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000a930:	10003f26 	beq	r2,zero,1000aa30 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000a934:	e0bffc17 	ldw	r2,-16(fp)
1000a938:	10003b26 	beq	r2,zero,1000aa28 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000a93c:	e0bffc17 	ldw	r2,-16(fp)
1000a940:	e0fffe17 	ldw	r3,-8(fp)
1000a944:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000a948:	e0bffc17 	ldw	r2,-16(fp)
1000a94c:	e0ffff17 	ldw	r3,-4(fp)
1000a950:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a954:	0005303a 	rdctl	r2,status
1000a958:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a95c:	e0fff817 	ldw	r3,-32(fp)
1000a960:	00bfff84 	movi	r2,-2
1000a964:	1884703a 	and	r2,r3,r2
1000a968:	1001703a 	wrctl	status,r2
  
  return context;
1000a96c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000a970:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000a974:	00840074 	movhi	r2,4097
1000a978:	10bc9c04 	addi	r2,r2,-3472
1000a97c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000a980:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000a984:	e0fffd17 	ldw	r3,-12(fp)
1000a988:	e0bff617 	ldw	r2,-40(fp)
1000a98c:	1885883a 	add	r2,r3,r2
1000a990:	10c00044 	addi	r3,r2,1
1000a994:	e0bffc17 	ldw	r2,-16(fp)
1000a998:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000a99c:	e0bffc17 	ldw	r2,-16(fp)
1000a9a0:	10c00217 	ldw	r3,8(r2)
1000a9a4:	e0bff617 	ldw	r2,-40(fp)
1000a9a8:	1880042e 	bgeu	r3,r2,1000a9bc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000a9ac:	e0bffc17 	ldw	r2,-16(fp)
1000a9b0:	00c00044 	movi	r3,1
1000a9b4:	10c00405 	stb	r3,16(r2)
1000a9b8:	00000206 	br	1000a9c4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000a9bc:	e0bffc17 	ldw	r2,-16(fp)
1000a9c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000a9c4:	e0fffc17 	ldw	r3,-16(fp)
1000a9c8:	00840074 	movhi	r2,4097
1000a9cc:	10b5ee04 	addi	r2,r2,-10312
1000a9d0:	e0bff915 	stw	r2,-28(fp)
1000a9d4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000a9d8:	e0bffa17 	ldw	r2,-24(fp)
1000a9dc:	e0fff917 	ldw	r3,-28(fp)
1000a9e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000a9e4:	e0bff917 	ldw	r2,-28(fp)
1000a9e8:	10c00017 	ldw	r3,0(r2)
1000a9ec:	e0bffa17 	ldw	r2,-24(fp)
1000a9f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000a9f4:	e0bff917 	ldw	r2,-28(fp)
1000a9f8:	10800017 	ldw	r2,0(r2)
1000a9fc:	e0fffa17 	ldw	r3,-24(fp)
1000aa00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000aa04:	e0bff917 	ldw	r2,-28(fp)
1000aa08:	e0fffa17 	ldw	r3,-24(fp)
1000aa0c:	10c00015 	stw	r3,0(r2)
1000aa10:	e0bff717 	ldw	r2,-36(fp)
1000aa14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000aa18:	e0bffb17 	ldw	r2,-20(fp)
1000aa1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000aa20:	0005883a 	mov	r2,zero
1000aa24:	00000306 	br	1000aa34 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000aa28:	00bffa84 	movi	r2,-22
1000aa2c:	00000106 	br	1000aa34 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000aa30:	00bfde84 	movi	r2,-134
  }
}
1000aa34:	e037883a 	mov	sp,fp
1000aa38:	df000017 	ldw	fp,0(sp)
1000aa3c:	dec00104 	addi	sp,sp,4
1000aa40:	f800283a 	ret

1000aa44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000aa44:	deffff04 	addi	sp,sp,-4
1000aa48:	df000015 	stw	fp,0(sp)
1000aa4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000aa50:	e037883a 	mov	sp,fp
1000aa54:	df000017 	ldw	fp,0(sp)
1000aa58:	dec00104 	addi	sp,sp,4
1000aa5c:	f800283a 	ret

1000aa60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000aa60:	defffe04 	addi	sp,sp,-8
1000aa64:	dfc00115 	stw	ra,4(sp)
1000aa68:	df000015 	stw	fp,0(sp)
1000aa6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000aa70:	00840074 	movhi	r2,4097
1000aa74:	10b5eb04 	addi	r2,r2,-10324
1000aa78:	10800017 	ldw	r2,0(r2)
1000aa7c:	10000526 	beq	r2,zero,1000aa94 <alt_get_errno+0x34>
1000aa80:	00840074 	movhi	r2,4097
1000aa84:	10b5eb04 	addi	r2,r2,-10324
1000aa88:	10800017 	ldw	r2,0(r2)
1000aa8c:	103ee83a 	callr	r2
1000aa90:	00000206 	br	1000aa9c <alt_get_errno+0x3c>
1000aa94:	00840074 	movhi	r2,4097
1000aa98:	10bc9604 	addi	r2,r2,-3496
}
1000aa9c:	e037883a 	mov	sp,fp
1000aaa0:	dfc00117 	ldw	ra,4(sp)
1000aaa4:	df000017 	ldw	fp,0(sp)
1000aaa8:	dec00204 	addi	sp,sp,8
1000aaac:	f800283a 	ret

1000aab0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000aab0:	defffa04 	addi	sp,sp,-24
1000aab4:	dfc00515 	stw	ra,20(sp)
1000aab8:	df000415 	stw	fp,16(sp)
1000aabc:	df000404 	addi	fp,sp,16
1000aac0:	e13ffe15 	stw	r4,-8(fp)
1000aac4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000aac8:	e0bffe17 	ldw	r2,-8(fp)
1000aacc:	10000326 	beq	r2,zero,1000aadc <alt_dev_llist_insert+0x2c>
1000aad0:	e0bffe17 	ldw	r2,-8(fp)
1000aad4:	10800217 	ldw	r2,8(r2)
1000aad8:	1000061e 	bne	r2,zero,1000aaf4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000aadc:	000aa600 	call	1000aa60 <alt_get_errno>
1000aae0:	1007883a 	mov	r3,r2
1000aae4:	00800584 	movi	r2,22
1000aae8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000aaec:	00bffa84 	movi	r2,-22
1000aaf0:	00001306 	br	1000ab40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000aaf4:	e0bffe17 	ldw	r2,-8(fp)
1000aaf8:	e0ffff17 	ldw	r3,-4(fp)
1000aafc:	e0fffc15 	stw	r3,-16(fp)
1000ab00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ab04:	e0bffd17 	ldw	r2,-12(fp)
1000ab08:	e0fffc17 	ldw	r3,-16(fp)
1000ab0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ab10:	e0bffc17 	ldw	r2,-16(fp)
1000ab14:	10c00017 	ldw	r3,0(r2)
1000ab18:	e0bffd17 	ldw	r2,-12(fp)
1000ab1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ab20:	e0bffc17 	ldw	r2,-16(fp)
1000ab24:	10800017 	ldw	r2,0(r2)
1000ab28:	e0fffd17 	ldw	r3,-12(fp)
1000ab2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ab30:	e0bffc17 	ldw	r2,-16(fp)
1000ab34:	e0fffd17 	ldw	r3,-12(fp)
1000ab38:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ab3c:	0005883a 	mov	r2,zero
}
1000ab40:	e037883a 	mov	sp,fp
1000ab44:	dfc00117 	ldw	ra,4(sp)
1000ab48:	df000017 	ldw	fp,0(sp)
1000ab4c:	dec00204 	addi	sp,sp,8
1000ab50:	f800283a 	ret

1000ab54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ab54:	defffd04 	addi	sp,sp,-12
1000ab58:	dfc00215 	stw	ra,8(sp)
1000ab5c:	df000115 	stw	fp,4(sp)
1000ab60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ab64:	00840074 	movhi	r2,4097
1000ab68:	10aed904 	addi	r2,r2,-17564
1000ab6c:	e0bfff15 	stw	r2,-4(fp)
1000ab70:	00000606 	br	1000ab8c <_do_ctors+0x38>
        (*ctor) (); 
1000ab74:	e0bfff17 	ldw	r2,-4(fp)
1000ab78:	10800017 	ldw	r2,0(r2)
1000ab7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ab80:	e0bfff17 	ldw	r2,-4(fp)
1000ab84:	10bfff04 	addi	r2,r2,-4
1000ab88:	e0bfff15 	stw	r2,-4(fp)
1000ab8c:	e0ffff17 	ldw	r3,-4(fp)
1000ab90:	00840074 	movhi	r2,4097
1000ab94:	10aeda04 	addi	r2,r2,-17560
1000ab98:	18bff62e 	bgeu	r3,r2,1000ab74 <__alt_data_end+0xf800ab74>
        (*ctor) (); 
}
1000ab9c:	e037883a 	mov	sp,fp
1000aba0:	dfc00117 	ldw	ra,4(sp)
1000aba4:	df000017 	ldw	fp,0(sp)
1000aba8:	dec00204 	addi	sp,sp,8
1000abac:	f800283a 	ret

1000abb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000abb0:	defffd04 	addi	sp,sp,-12
1000abb4:	dfc00215 	stw	ra,8(sp)
1000abb8:	df000115 	stw	fp,4(sp)
1000abbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000abc0:	00840074 	movhi	r2,4097
1000abc4:	10aed904 	addi	r2,r2,-17564
1000abc8:	e0bfff15 	stw	r2,-4(fp)
1000abcc:	00000606 	br	1000abe8 <_do_dtors+0x38>
        (*dtor) (); 
1000abd0:	e0bfff17 	ldw	r2,-4(fp)
1000abd4:	10800017 	ldw	r2,0(r2)
1000abd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000abdc:	e0bfff17 	ldw	r2,-4(fp)
1000abe0:	10bfff04 	addi	r2,r2,-4
1000abe4:	e0bfff15 	stw	r2,-4(fp)
1000abe8:	e0ffff17 	ldw	r3,-4(fp)
1000abec:	00840074 	movhi	r2,4097
1000abf0:	10aeda04 	addi	r2,r2,-17560
1000abf4:	18bff62e 	bgeu	r3,r2,1000abd0 <__alt_data_end+0xf800abd0>
        (*dtor) (); 
}
1000abf8:	e037883a 	mov	sp,fp
1000abfc:	dfc00117 	ldw	ra,4(sp)
1000ac00:	df000017 	ldw	fp,0(sp)
1000ac04:	dec00204 	addi	sp,sp,8
1000ac08:	f800283a 	ret

1000ac0c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000ac0c:	deffff04 	addi	sp,sp,-4
1000ac10:	df000015 	stw	fp,0(sp)
1000ac14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000ac18:	e037883a 	mov	sp,fp
1000ac1c:	df000017 	ldw	fp,0(sp)
1000ac20:	dec00104 	addi	sp,sp,4
1000ac24:	f800283a 	ret

1000ac28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000ac28:	defff904 	addi	sp,sp,-28
1000ac2c:	dfc00615 	stw	ra,24(sp)
1000ac30:	df000515 	stw	fp,20(sp)
1000ac34:	df000504 	addi	fp,sp,20
1000ac38:	e13ffc15 	stw	r4,-16(fp)
1000ac3c:	e17ffd15 	stw	r5,-12(fp)
1000ac40:	e1bffe15 	stw	r6,-8(fp)
1000ac44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000ac48:	e0800217 	ldw	r2,8(fp)
1000ac4c:	d8800015 	stw	r2,0(sp)
1000ac50:	e13ffc17 	ldw	r4,-16(fp)
1000ac54:	e17ffd17 	ldw	r5,-12(fp)
1000ac58:	e1bffe17 	ldw	r6,-8(fp)
1000ac5c:	e1ffff17 	ldw	r7,-4(fp)
1000ac60:	000ae080 	call	1000ae08 <alt_iic_isr_register>
}  
1000ac64:	e037883a 	mov	sp,fp
1000ac68:	dfc00117 	ldw	ra,4(sp)
1000ac6c:	df000017 	ldw	fp,0(sp)
1000ac70:	dec00204 	addi	sp,sp,8
1000ac74:	f800283a 	ret

1000ac78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000ac78:	defff904 	addi	sp,sp,-28
1000ac7c:	df000615 	stw	fp,24(sp)
1000ac80:	df000604 	addi	fp,sp,24
1000ac84:	e13ffe15 	stw	r4,-8(fp)
1000ac88:	e17fff15 	stw	r5,-4(fp)
1000ac8c:	e0bfff17 	ldw	r2,-4(fp)
1000ac90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ac94:	0005303a 	rdctl	r2,status
1000ac98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ac9c:	e0fffb17 	ldw	r3,-20(fp)
1000aca0:	00bfff84 	movi	r2,-2
1000aca4:	1884703a 	and	r2,r3,r2
1000aca8:	1001703a 	wrctl	status,r2
  
  return context;
1000acac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000acb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000acb4:	e0bffa17 	ldw	r2,-24(fp)
1000acb8:	00c00044 	movi	r3,1
1000acbc:	1884983a 	sll	r2,r3,r2
1000acc0:	1007883a 	mov	r3,r2
1000acc4:	00840074 	movhi	r2,4097
1000acc8:	10bc9a04 	addi	r2,r2,-3480
1000accc:	10800017 	ldw	r2,0(r2)
1000acd0:	1886b03a 	or	r3,r3,r2
1000acd4:	00840074 	movhi	r2,4097
1000acd8:	10bc9a04 	addi	r2,r2,-3480
1000acdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000ace0:	00840074 	movhi	r2,4097
1000ace4:	10bc9a04 	addi	r2,r2,-3480
1000ace8:	10800017 	ldw	r2,0(r2)
1000acec:	100170fa 	wrctl	ienable,r2
1000acf0:	e0bffc17 	ldw	r2,-16(fp)
1000acf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000acf8:	e0bffd17 	ldw	r2,-12(fp)
1000acfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000ad00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000ad04:	0001883a 	nop
}
1000ad08:	e037883a 	mov	sp,fp
1000ad0c:	df000017 	ldw	fp,0(sp)
1000ad10:	dec00104 	addi	sp,sp,4
1000ad14:	f800283a 	ret

1000ad18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000ad18:	defff904 	addi	sp,sp,-28
1000ad1c:	df000615 	stw	fp,24(sp)
1000ad20:	df000604 	addi	fp,sp,24
1000ad24:	e13ffe15 	stw	r4,-8(fp)
1000ad28:	e17fff15 	stw	r5,-4(fp)
1000ad2c:	e0bfff17 	ldw	r2,-4(fp)
1000ad30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ad34:	0005303a 	rdctl	r2,status
1000ad38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ad3c:	e0fffb17 	ldw	r3,-20(fp)
1000ad40:	00bfff84 	movi	r2,-2
1000ad44:	1884703a 	and	r2,r3,r2
1000ad48:	1001703a 	wrctl	status,r2
  
  return context;
1000ad4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000ad50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000ad54:	e0bffa17 	ldw	r2,-24(fp)
1000ad58:	00c00044 	movi	r3,1
1000ad5c:	1884983a 	sll	r2,r3,r2
1000ad60:	0084303a 	nor	r2,zero,r2
1000ad64:	1007883a 	mov	r3,r2
1000ad68:	00840074 	movhi	r2,4097
1000ad6c:	10bc9a04 	addi	r2,r2,-3480
1000ad70:	10800017 	ldw	r2,0(r2)
1000ad74:	1886703a 	and	r3,r3,r2
1000ad78:	00840074 	movhi	r2,4097
1000ad7c:	10bc9a04 	addi	r2,r2,-3480
1000ad80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000ad84:	00840074 	movhi	r2,4097
1000ad88:	10bc9a04 	addi	r2,r2,-3480
1000ad8c:	10800017 	ldw	r2,0(r2)
1000ad90:	100170fa 	wrctl	ienable,r2
1000ad94:	e0bffc17 	ldw	r2,-16(fp)
1000ad98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ad9c:	e0bffd17 	ldw	r2,-12(fp)
1000ada0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000ada4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000ada8:	0001883a 	nop
}
1000adac:	e037883a 	mov	sp,fp
1000adb0:	df000017 	ldw	fp,0(sp)
1000adb4:	dec00104 	addi	sp,sp,4
1000adb8:	f800283a 	ret

1000adbc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000adbc:	defffc04 	addi	sp,sp,-16
1000adc0:	df000315 	stw	fp,12(sp)
1000adc4:	df000304 	addi	fp,sp,12
1000adc8:	e13ffe15 	stw	r4,-8(fp)
1000adcc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000add0:	000530fa 	rdctl	r2,ienable
1000add4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000add8:	e0bfff17 	ldw	r2,-4(fp)
1000addc:	00c00044 	movi	r3,1
1000ade0:	1884983a 	sll	r2,r3,r2
1000ade4:	1007883a 	mov	r3,r2
1000ade8:	e0bffd17 	ldw	r2,-12(fp)
1000adec:	1884703a 	and	r2,r3,r2
1000adf0:	1004c03a 	cmpne	r2,r2,zero
1000adf4:	10803fcc 	andi	r2,r2,255
}
1000adf8:	e037883a 	mov	sp,fp
1000adfc:	df000017 	ldw	fp,0(sp)
1000ae00:	dec00104 	addi	sp,sp,4
1000ae04:	f800283a 	ret

1000ae08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000ae08:	defff504 	addi	sp,sp,-44
1000ae0c:	dfc00a15 	stw	ra,40(sp)
1000ae10:	df000915 	stw	fp,36(sp)
1000ae14:	df000904 	addi	fp,sp,36
1000ae18:	e13ffc15 	stw	r4,-16(fp)
1000ae1c:	e17ffd15 	stw	r5,-12(fp)
1000ae20:	e1bffe15 	stw	r6,-8(fp)
1000ae24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000ae28:	00bffa84 	movi	r2,-22
1000ae2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000ae30:	e0bffd17 	ldw	r2,-12(fp)
1000ae34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000ae38:	e0bff817 	ldw	r2,-32(fp)
1000ae3c:	10800808 	cmpgei	r2,r2,32
1000ae40:	1000271e 	bne	r2,zero,1000aee0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ae44:	0005303a 	rdctl	r2,status
1000ae48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ae4c:	e0fffa17 	ldw	r3,-24(fp)
1000ae50:	00bfff84 	movi	r2,-2
1000ae54:	1884703a 	and	r2,r3,r2
1000ae58:	1001703a 	wrctl	status,r2
  
  return context;
1000ae5c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000ae60:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000ae64:	00840074 	movhi	r2,4097
1000ae68:	10bd3804 	addi	r2,r2,-2848
1000ae6c:	e0fff817 	ldw	r3,-32(fp)
1000ae70:	180690fa 	slli	r3,r3,3
1000ae74:	10c5883a 	add	r2,r2,r3
1000ae78:	e0fffe17 	ldw	r3,-8(fp)
1000ae7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000ae80:	00840074 	movhi	r2,4097
1000ae84:	10bd3804 	addi	r2,r2,-2848
1000ae88:	e0fff817 	ldw	r3,-32(fp)
1000ae8c:	180690fa 	slli	r3,r3,3
1000ae90:	10c5883a 	add	r2,r2,r3
1000ae94:	10800104 	addi	r2,r2,4
1000ae98:	e0ffff17 	ldw	r3,-4(fp)
1000ae9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000aea0:	e0bffe17 	ldw	r2,-8(fp)
1000aea4:	10000526 	beq	r2,zero,1000aebc <alt_iic_isr_register+0xb4>
1000aea8:	e0bff817 	ldw	r2,-32(fp)
1000aeac:	e13ffc17 	ldw	r4,-16(fp)
1000aeb0:	100b883a 	mov	r5,r2
1000aeb4:	000ac780 	call	1000ac78 <alt_ic_irq_enable>
1000aeb8:	00000406 	br	1000aecc <alt_iic_isr_register+0xc4>
1000aebc:	e0bff817 	ldw	r2,-32(fp)
1000aec0:	e13ffc17 	ldw	r4,-16(fp)
1000aec4:	100b883a 	mov	r5,r2
1000aec8:	000ad180 	call	1000ad18 <alt_ic_irq_disable>
1000aecc:	e0bff715 	stw	r2,-36(fp)
1000aed0:	e0bff917 	ldw	r2,-28(fp)
1000aed4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000aed8:	e0bffb17 	ldw	r2,-20(fp)
1000aedc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000aee0:	e0bff717 	ldw	r2,-36(fp)
}
1000aee4:	e037883a 	mov	sp,fp
1000aee8:	dfc00117 	ldw	ra,4(sp)
1000aeec:	df000017 	ldw	fp,0(sp)
1000aef0:	dec00204 	addi	sp,sp,8
1000aef4:	f800283a 	ret

1000aef8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000aef8:	defff804 	addi	sp,sp,-32
1000aefc:	dfc00715 	stw	ra,28(sp)
1000af00:	df000615 	stw	fp,24(sp)
1000af04:	dc000515 	stw	r16,20(sp)
1000af08:	df000604 	addi	fp,sp,24
1000af0c:	e13ffb15 	stw	r4,-20(fp)
1000af10:	e17ffc15 	stw	r5,-16(fp)
1000af14:	e1bffd15 	stw	r6,-12(fp)
1000af18:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000af1c:	e13ffc17 	ldw	r4,-16(fp)
1000af20:	e17ffd17 	ldw	r5,-12(fp)
1000af24:	e1bffe17 	ldw	r6,-8(fp)
1000af28:	000b1940 	call	1000b194 <open>
1000af2c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000af30:	e0bffa17 	ldw	r2,-24(fp)
1000af34:	10002216 	blt	r2,zero,1000afc0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000af38:	04040074 	movhi	r16,4097
1000af3c:	84316904 	addi	r16,r16,-14940
1000af40:	e0bffa17 	ldw	r2,-24(fp)
1000af44:	1009883a 	mov	r4,r2
1000af48:	01400304 	movi	r5,12
1000af4c:	00040400 	call	10004040 <__mulsi3>
1000af50:	8085883a 	add	r2,r16,r2
1000af54:	10c00017 	ldw	r3,0(r2)
1000af58:	e0bffb17 	ldw	r2,-20(fp)
1000af5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000af60:	04040074 	movhi	r16,4097
1000af64:	84316904 	addi	r16,r16,-14940
1000af68:	e0bffa17 	ldw	r2,-24(fp)
1000af6c:	1009883a 	mov	r4,r2
1000af70:	01400304 	movi	r5,12
1000af74:	00040400 	call	10004040 <__mulsi3>
1000af78:	8085883a 	add	r2,r16,r2
1000af7c:	10800104 	addi	r2,r2,4
1000af80:	10c00017 	ldw	r3,0(r2)
1000af84:	e0bffb17 	ldw	r2,-20(fp)
1000af88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000af8c:	04040074 	movhi	r16,4097
1000af90:	84316904 	addi	r16,r16,-14940
1000af94:	e0bffa17 	ldw	r2,-24(fp)
1000af98:	1009883a 	mov	r4,r2
1000af9c:	01400304 	movi	r5,12
1000afa0:	00040400 	call	10004040 <__mulsi3>
1000afa4:	8085883a 	add	r2,r16,r2
1000afa8:	10800204 	addi	r2,r2,8
1000afac:	10c00017 	ldw	r3,0(r2)
1000afb0:	e0bffb17 	ldw	r2,-20(fp)
1000afb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000afb8:	e13ffa17 	ldw	r4,-24(fp)
1000afbc:	0009b840 	call	10009b84 <alt_release_fd>
  }
} 
1000afc0:	e6ffff04 	addi	sp,fp,-4
1000afc4:	dfc00217 	ldw	ra,8(sp)
1000afc8:	df000117 	ldw	fp,4(sp)
1000afcc:	dc000017 	ldw	r16,0(sp)
1000afd0:	dec00304 	addi	sp,sp,12
1000afd4:	f800283a 	ret

1000afd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000afd8:	defffb04 	addi	sp,sp,-20
1000afdc:	dfc00415 	stw	ra,16(sp)
1000afe0:	df000315 	stw	fp,12(sp)
1000afe4:	df000304 	addi	fp,sp,12
1000afe8:	e13ffd15 	stw	r4,-12(fp)
1000afec:	e17ffe15 	stw	r5,-8(fp)
1000aff0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000aff4:	01040074 	movhi	r4,4097
1000aff8:	21316c04 	addi	r4,r4,-14928
1000affc:	e17ffd17 	ldw	r5,-12(fp)
1000b000:	01800044 	movi	r6,1
1000b004:	01c07fc4 	movi	r7,511
1000b008:	000aef80 	call	1000aef8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000b00c:	01040074 	movhi	r4,4097
1000b010:	21316904 	addi	r4,r4,-14940
1000b014:	e17ffe17 	ldw	r5,-8(fp)
1000b018:	000d883a 	mov	r6,zero
1000b01c:	01c07fc4 	movi	r7,511
1000b020:	000aef80 	call	1000aef8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000b024:	01040074 	movhi	r4,4097
1000b028:	21316f04 	addi	r4,r4,-14916
1000b02c:	e17fff17 	ldw	r5,-4(fp)
1000b030:	01800044 	movi	r6,1
1000b034:	01c07fc4 	movi	r7,511
1000b038:	000aef80 	call	1000aef8 <alt_open_fd>
}  
1000b03c:	e037883a 	mov	sp,fp
1000b040:	dfc00117 	ldw	ra,4(sp)
1000b044:	df000017 	ldw	fp,0(sp)
1000b048:	dec00204 	addi	sp,sp,8
1000b04c:	f800283a 	ret

1000b050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000b050:	defffe04 	addi	sp,sp,-8
1000b054:	dfc00115 	stw	ra,4(sp)
1000b058:	df000015 	stw	fp,0(sp)
1000b05c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000b060:	00840074 	movhi	r2,4097
1000b064:	10b5eb04 	addi	r2,r2,-10324
1000b068:	10800017 	ldw	r2,0(r2)
1000b06c:	10000526 	beq	r2,zero,1000b084 <alt_get_errno+0x34>
1000b070:	00840074 	movhi	r2,4097
1000b074:	10b5eb04 	addi	r2,r2,-10324
1000b078:	10800017 	ldw	r2,0(r2)
1000b07c:	103ee83a 	callr	r2
1000b080:	00000206 	br	1000b08c <alt_get_errno+0x3c>
1000b084:	00840074 	movhi	r2,4097
1000b088:	10bc9604 	addi	r2,r2,-3496
}
1000b08c:	e037883a 	mov	sp,fp
1000b090:	dfc00117 	ldw	ra,4(sp)
1000b094:	df000017 	ldw	fp,0(sp)
1000b098:	dec00204 	addi	sp,sp,8
1000b09c:	f800283a 	ret

1000b0a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000b0a0:	defffb04 	addi	sp,sp,-20
1000b0a4:	dfc00415 	stw	ra,16(sp)
1000b0a8:	df000315 	stw	fp,12(sp)
1000b0ac:	dc000215 	stw	r16,8(sp)
1000b0b0:	df000304 	addi	fp,sp,12
1000b0b4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000b0b8:	e0bffe17 	ldw	r2,-8(fp)
1000b0bc:	10800217 	ldw	r2,8(r2)
1000b0c0:	10d00034 	orhi	r3,r2,16384
1000b0c4:	e0bffe17 	ldw	r2,-8(fp)
1000b0c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000b0cc:	e03ffd15 	stw	zero,-12(fp)
1000b0d0:	00002306 	br	1000b160 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000b0d4:	04040074 	movhi	r16,4097
1000b0d8:	84316904 	addi	r16,r16,-14940
1000b0dc:	e0bffd17 	ldw	r2,-12(fp)
1000b0e0:	1009883a 	mov	r4,r2
1000b0e4:	01400304 	movi	r5,12
1000b0e8:	00040400 	call	10004040 <__mulsi3>
1000b0ec:	8085883a 	add	r2,r16,r2
1000b0f0:	10c00017 	ldw	r3,0(r2)
1000b0f4:	e0bffe17 	ldw	r2,-8(fp)
1000b0f8:	10800017 	ldw	r2,0(r2)
1000b0fc:	1880151e 	bne	r3,r2,1000b154 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000b100:	04040074 	movhi	r16,4097
1000b104:	84316904 	addi	r16,r16,-14940
1000b108:	e0bffd17 	ldw	r2,-12(fp)
1000b10c:	1009883a 	mov	r4,r2
1000b110:	01400304 	movi	r5,12
1000b114:	00040400 	call	10004040 <__mulsi3>
1000b118:	8085883a 	add	r2,r16,r2
1000b11c:	10800204 	addi	r2,r2,8
1000b120:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000b124:	10000b0e 	bge	r2,zero,1000b154 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000b128:	e13ffd17 	ldw	r4,-12(fp)
1000b12c:	01400304 	movi	r5,12
1000b130:	00040400 	call	10004040 <__mulsi3>
1000b134:	1007883a 	mov	r3,r2
1000b138:	00840074 	movhi	r2,4097
1000b13c:	10b16904 	addi	r2,r2,-14940
1000b140:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000b144:	e0bffe17 	ldw	r2,-8(fp)
1000b148:	18800226 	beq	r3,r2,1000b154 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000b14c:	00bffcc4 	movi	r2,-13
1000b150:	00000a06 	br	1000b17c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000b154:	e0bffd17 	ldw	r2,-12(fp)
1000b158:	10800044 	addi	r2,r2,1
1000b15c:	e0bffd15 	stw	r2,-12(fp)
1000b160:	00840074 	movhi	r2,4097
1000b164:	10b5ea04 	addi	r2,r2,-10328
1000b168:	10800017 	ldw	r2,0(r2)
1000b16c:	1007883a 	mov	r3,r2
1000b170:	e0bffd17 	ldw	r2,-12(fp)
1000b174:	18bfd72e 	bgeu	r3,r2,1000b0d4 <__alt_data_end+0xf800b0d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000b178:	0005883a 	mov	r2,zero
}
1000b17c:	e6ffff04 	addi	sp,fp,-4
1000b180:	dfc00217 	ldw	ra,8(sp)
1000b184:	df000117 	ldw	fp,4(sp)
1000b188:	dc000017 	ldw	r16,0(sp)
1000b18c:	dec00304 	addi	sp,sp,12
1000b190:	f800283a 	ret

1000b194 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000b194:	defff604 	addi	sp,sp,-40
1000b198:	dfc00915 	stw	ra,36(sp)
1000b19c:	df000815 	stw	fp,32(sp)
1000b1a0:	df000804 	addi	fp,sp,32
1000b1a4:	e13ffd15 	stw	r4,-12(fp)
1000b1a8:	e17ffe15 	stw	r5,-8(fp)
1000b1ac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000b1b0:	00bfffc4 	movi	r2,-1
1000b1b4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000b1b8:	00bffb44 	movi	r2,-19
1000b1bc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000b1c0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000b1c4:	e13ffd17 	ldw	r4,-12(fp)
1000b1c8:	01440074 	movhi	r5,4097
1000b1cc:	2975e804 	addi	r5,r5,-10336
1000b1d0:	000b4b00 	call	1000b4b0 <alt_find_dev>
1000b1d4:	e0bff815 	stw	r2,-32(fp)
1000b1d8:	e0bff817 	ldw	r2,-32(fp)
1000b1dc:	1000051e 	bne	r2,zero,1000b1f4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000b1e0:	e13ffd17 	ldw	r4,-12(fp)
1000b1e4:	000b5400 	call	1000b540 <alt_find_file>
1000b1e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000b1ec:	00800044 	movi	r2,1
1000b1f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000b1f4:	e0bff817 	ldw	r2,-32(fp)
1000b1f8:	10002b26 	beq	r2,zero,1000b2a8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000b1fc:	e13ff817 	ldw	r4,-32(fp)
1000b200:	000b6540 	call	1000b654 <alt_get_fd>
1000b204:	e0bff915 	stw	r2,-28(fp)
1000b208:	e0bff917 	ldw	r2,-28(fp)
1000b20c:	1000030e 	bge	r2,zero,1000b21c <open+0x88>
    {
      status = index;
1000b210:	e0bff917 	ldw	r2,-28(fp)
1000b214:	e0bffa15 	stw	r2,-24(fp)
1000b218:	00002506 	br	1000b2b0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000b21c:	e13ff917 	ldw	r4,-28(fp)
1000b220:	01400304 	movi	r5,12
1000b224:	00040400 	call	10004040 <__mulsi3>
1000b228:	1007883a 	mov	r3,r2
1000b22c:	00840074 	movhi	r2,4097
1000b230:	10b16904 	addi	r2,r2,-14940
1000b234:	1885883a 	add	r2,r3,r2
1000b238:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000b23c:	e0fffe17 	ldw	r3,-8(fp)
1000b240:	00900034 	movhi	r2,16384
1000b244:	10bfffc4 	addi	r2,r2,-1
1000b248:	1886703a 	and	r3,r3,r2
1000b24c:	e0bffc17 	ldw	r2,-16(fp)
1000b250:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000b254:	e0bffb17 	ldw	r2,-20(fp)
1000b258:	1000051e 	bne	r2,zero,1000b270 <open+0xdc>
1000b25c:	e13ffc17 	ldw	r4,-16(fp)
1000b260:	000b0a00 	call	1000b0a0 <alt_file_locked>
1000b264:	e0bffa15 	stw	r2,-24(fp)
1000b268:	e0bffa17 	ldw	r2,-24(fp)
1000b26c:	10001016 	blt	r2,zero,1000b2b0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000b270:	e0bff817 	ldw	r2,-32(fp)
1000b274:	10800317 	ldw	r2,12(r2)
1000b278:	10000826 	beq	r2,zero,1000b29c <open+0x108>
1000b27c:	e0bff817 	ldw	r2,-32(fp)
1000b280:	10800317 	ldw	r2,12(r2)
1000b284:	e13ffc17 	ldw	r4,-16(fp)
1000b288:	e17ffd17 	ldw	r5,-12(fp)
1000b28c:	e1bffe17 	ldw	r6,-8(fp)
1000b290:	e1ffff17 	ldw	r7,-4(fp)
1000b294:	103ee83a 	callr	r2
1000b298:	00000106 	br	1000b2a0 <open+0x10c>
1000b29c:	0005883a 	mov	r2,zero
1000b2a0:	e0bffa15 	stw	r2,-24(fp)
1000b2a4:	00000206 	br	1000b2b0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000b2a8:	00bffb44 	movi	r2,-19
1000b2ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000b2b0:	e0bffa17 	ldw	r2,-24(fp)
1000b2b4:	1000090e 	bge	r2,zero,1000b2dc <open+0x148>
  {
    alt_release_fd (index);  
1000b2b8:	e13ff917 	ldw	r4,-28(fp)
1000b2bc:	0009b840 	call	10009b84 <alt_release_fd>
    ALT_ERRNO = -status;
1000b2c0:	000b0500 	call	1000b050 <alt_get_errno>
1000b2c4:	1007883a 	mov	r3,r2
1000b2c8:	e0bffa17 	ldw	r2,-24(fp)
1000b2cc:	0085c83a 	sub	r2,zero,r2
1000b2d0:	18800015 	stw	r2,0(r3)
    return -1;
1000b2d4:	00bfffc4 	movi	r2,-1
1000b2d8:	00000106 	br	1000b2e0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000b2dc:	e0bff917 	ldw	r2,-28(fp)
}
1000b2e0:	e037883a 	mov	sp,fp
1000b2e4:	dfc00117 	ldw	ra,4(sp)
1000b2e8:	df000017 	ldw	fp,0(sp)
1000b2ec:	dec00204 	addi	sp,sp,8
1000b2f0:	f800283a 	ret

1000b2f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000b2f4:	defffa04 	addi	sp,sp,-24
1000b2f8:	df000515 	stw	fp,20(sp)
1000b2fc:	df000504 	addi	fp,sp,20
1000b300:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000b304:	0005303a 	rdctl	r2,status
1000b308:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000b30c:	e0fffc17 	ldw	r3,-16(fp)
1000b310:	00bfff84 	movi	r2,-2
1000b314:	1884703a 	and	r2,r3,r2
1000b318:	1001703a 	wrctl	status,r2
  
  return context;
1000b31c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000b320:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000b324:	e0bfff17 	ldw	r2,-4(fp)
1000b328:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000b32c:	e0bffd17 	ldw	r2,-12(fp)
1000b330:	10800017 	ldw	r2,0(r2)
1000b334:	e0fffd17 	ldw	r3,-12(fp)
1000b338:	18c00117 	ldw	r3,4(r3)
1000b33c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000b340:	e0bffd17 	ldw	r2,-12(fp)
1000b344:	10800117 	ldw	r2,4(r2)
1000b348:	e0fffd17 	ldw	r3,-12(fp)
1000b34c:	18c00017 	ldw	r3,0(r3)
1000b350:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000b354:	e0bffd17 	ldw	r2,-12(fp)
1000b358:	e0fffd17 	ldw	r3,-12(fp)
1000b35c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000b360:	e0bffd17 	ldw	r2,-12(fp)
1000b364:	e0fffd17 	ldw	r3,-12(fp)
1000b368:	10c00015 	stw	r3,0(r2)
1000b36c:	e0bffb17 	ldw	r2,-20(fp)
1000b370:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000b374:	e0bffe17 	ldw	r2,-8(fp)
1000b378:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000b37c:	e037883a 	mov	sp,fp
1000b380:	df000017 	ldw	fp,0(sp)
1000b384:	dec00104 	addi	sp,sp,4
1000b388:	f800283a 	ret

1000b38c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000b38c:	defffb04 	addi	sp,sp,-20
1000b390:	dfc00415 	stw	ra,16(sp)
1000b394:	df000315 	stw	fp,12(sp)
1000b398:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000b39c:	d0a00d17 	ldw	r2,-32716(gp)
1000b3a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000b3a4:	d0a6bb17 	ldw	r2,-25876(gp)
1000b3a8:	10800044 	addi	r2,r2,1
1000b3ac:	d0a6bb15 	stw	r2,-25876(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000b3b0:	00002e06 	br	1000b46c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000b3b4:	e0bffd17 	ldw	r2,-12(fp)
1000b3b8:	10800017 	ldw	r2,0(r2)
1000b3bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000b3c0:	e0bffd17 	ldw	r2,-12(fp)
1000b3c4:	10800403 	ldbu	r2,16(r2)
1000b3c8:	10803fcc 	andi	r2,r2,255
1000b3cc:	10000426 	beq	r2,zero,1000b3e0 <alt_tick+0x54>
1000b3d0:	d0a6bb17 	ldw	r2,-25876(gp)
1000b3d4:	1000021e 	bne	r2,zero,1000b3e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000b3d8:	e0bffd17 	ldw	r2,-12(fp)
1000b3dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000b3e0:	e0bffd17 	ldw	r2,-12(fp)
1000b3e4:	10800217 	ldw	r2,8(r2)
1000b3e8:	d0e6bb17 	ldw	r3,-25876(gp)
1000b3ec:	18801d36 	bltu	r3,r2,1000b464 <alt_tick+0xd8>
1000b3f0:	e0bffd17 	ldw	r2,-12(fp)
1000b3f4:	10800403 	ldbu	r2,16(r2)
1000b3f8:	10803fcc 	andi	r2,r2,255
1000b3fc:	1000191e 	bne	r2,zero,1000b464 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000b400:	e0bffd17 	ldw	r2,-12(fp)
1000b404:	10800317 	ldw	r2,12(r2)
1000b408:	e0fffd17 	ldw	r3,-12(fp)
1000b40c:	18c00517 	ldw	r3,20(r3)
1000b410:	1809883a 	mov	r4,r3
1000b414:	103ee83a 	callr	r2
1000b418:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000b41c:	e0bfff17 	ldw	r2,-4(fp)
1000b420:	1000031e 	bne	r2,zero,1000b430 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000b424:	e13ffd17 	ldw	r4,-12(fp)
1000b428:	000b2f40 	call	1000b2f4 <alt_alarm_stop>
1000b42c:	00000d06 	br	1000b464 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000b430:	e0bffd17 	ldw	r2,-12(fp)
1000b434:	10c00217 	ldw	r3,8(r2)
1000b438:	e0bfff17 	ldw	r2,-4(fp)
1000b43c:	1887883a 	add	r3,r3,r2
1000b440:	e0bffd17 	ldw	r2,-12(fp)
1000b444:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000b448:	e0bffd17 	ldw	r2,-12(fp)
1000b44c:	10c00217 	ldw	r3,8(r2)
1000b450:	d0a6bb17 	ldw	r2,-25876(gp)
1000b454:	1880032e 	bgeu	r3,r2,1000b464 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000b458:	e0bffd17 	ldw	r2,-12(fp)
1000b45c:	00c00044 	movi	r3,1
1000b460:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000b464:	e0bffe17 	ldw	r2,-8(fp)
1000b468:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000b46c:	e0fffd17 	ldw	r3,-12(fp)
1000b470:	d0a00d04 	addi	r2,gp,-32716
1000b474:	18bfcf1e 	bne	r3,r2,1000b3b4 <__alt_data_end+0xf800b3b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000b478:	0001883a 	nop
}
1000b47c:	e037883a 	mov	sp,fp
1000b480:	dfc00117 	ldw	ra,4(sp)
1000b484:	df000017 	ldw	fp,0(sp)
1000b488:	dec00204 	addi	sp,sp,8
1000b48c:	f800283a 	ret

1000b490 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000b490:	deffff04 	addi	sp,sp,-4
1000b494:	df000015 	stw	fp,0(sp)
1000b498:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000b49c:	000170fa 	wrctl	ienable,zero
}
1000b4a0:	e037883a 	mov	sp,fp
1000b4a4:	df000017 	ldw	fp,0(sp)
1000b4a8:	dec00104 	addi	sp,sp,4
1000b4ac:	f800283a 	ret

1000b4b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000b4b0:	defffa04 	addi	sp,sp,-24
1000b4b4:	dfc00515 	stw	ra,20(sp)
1000b4b8:	df000415 	stw	fp,16(sp)
1000b4bc:	df000404 	addi	fp,sp,16
1000b4c0:	e13ffe15 	stw	r4,-8(fp)
1000b4c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000b4c8:	e0bfff17 	ldw	r2,-4(fp)
1000b4cc:	10800017 	ldw	r2,0(r2)
1000b4d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000b4d4:	e13ffe17 	ldw	r4,-8(fp)
1000b4d8:	00069bc0 	call	100069bc <strlen>
1000b4dc:	10800044 	addi	r2,r2,1
1000b4e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000b4e4:	00000d06 	br	1000b51c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000b4e8:	e0bffc17 	ldw	r2,-16(fp)
1000b4ec:	10c00217 	ldw	r3,8(r2)
1000b4f0:	e0bffd17 	ldw	r2,-12(fp)
1000b4f4:	1809883a 	mov	r4,r3
1000b4f8:	e17ffe17 	ldw	r5,-8(fp)
1000b4fc:	100d883a 	mov	r6,r2
1000b500:	000b8100 	call	1000b810 <memcmp>
1000b504:	1000021e 	bne	r2,zero,1000b510 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000b508:	e0bffc17 	ldw	r2,-16(fp)
1000b50c:	00000706 	br	1000b52c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000b510:	e0bffc17 	ldw	r2,-16(fp)
1000b514:	10800017 	ldw	r2,0(r2)
1000b518:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000b51c:	e0fffc17 	ldw	r3,-16(fp)
1000b520:	e0bfff17 	ldw	r2,-4(fp)
1000b524:	18bff01e 	bne	r3,r2,1000b4e8 <__alt_data_end+0xf800b4e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000b528:	0005883a 	mov	r2,zero
}
1000b52c:	e037883a 	mov	sp,fp
1000b530:	dfc00117 	ldw	ra,4(sp)
1000b534:	df000017 	ldw	fp,0(sp)
1000b538:	dec00204 	addi	sp,sp,8
1000b53c:	f800283a 	ret

1000b540 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000b540:	defffb04 	addi	sp,sp,-20
1000b544:	dfc00415 	stw	ra,16(sp)
1000b548:	df000315 	stw	fp,12(sp)
1000b54c:	df000304 	addi	fp,sp,12
1000b550:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000b554:	00840074 	movhi	r2,4097
1000b558:	10b5e604 	addi	r2,r2,-10344
1000b55c:	10800017 	ldw	r2,0(r2)
1000b560:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000b564:	00003106 	br	1000b62c <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000b568:	e0bffd17 	ldw	r2,-12(fp)
1000b56c:	10800217 	ldw	r2,8(r2)
1000b570:	1009883a 	mov	r4,r2
1000b574:	00069bc0 	call	100069bc <strlen>
1000b578:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000b57c:	e0bffd17 	ldw	r2,-12(fp)
1000b580:	10c00217 	ldw	r3,8(r2)
1000b584:	e0bffe17 	ldw	r2,-8(fp)
1000b588:	10bfffc4 	addi	r2,r2,-1
1000b58c:	1885883a 	add	r2,r3,r2
1000b590:	10800003 	ldbu	r2,0(r2)
1000b594:	10803fcc 	andi	r2,r2,255
1000b598:	1080201c 	xori	r2,r2,128
1000b59c:	10bfe004 	addi	r2,r2,-128
1000b5a0:	10800bd8 	cmpnei	r2,r2,47
1000b5a4:	1000031e 	bne	r2,zero,1000b5b4 <alt_find_file+0x74>
    {
      len -= 1;
1000b5a8:	e0bffe17 	ldw	r2,-8(fp)
1000b5ac:	10bfffc4 	addi	r2,r2,-1
1000b5b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000b5b4:	e0bffe17 	ldw	r2,-8(fp)
1000b5b8:	e0ffff17 	ldw	r3,-4(fp)
1000b5bc:	1885883a 	add	r2,r3,r2
1000b5c0:	10800003 	ldbu	r2,0(r2)
1000b5c4:	10803fcc 	andi	r2,r2,255
1000b5c8:	1080201c 	xori	r2,r2,128
1000b5cc:	10bfe004 	addi	r2,r2,-128
1000b5d0:	10800be0 	cmpeqi	r2,r2,47
1000b5d4:	1000081e 	bne	r2,zero,1000b5f8 <alt_find_file+0xb8>
1000b5d8:	e0bffe17 	ldw	r2,-8(fp)
1000b5dc:	e0ffff17 	ldw	r3,-4(fp)
1000b5e0:	1885883a 	add	r2,r3,r2
1000b5e4:	10800003 	ldbu	r2,0(r2)
1000b5e8:	10803fcc 	andi	r2,r2,255
1000b5ec:	1080201c 	xori	r2,r2,128
1000b5f0:	10bfe004 	addi	r2,r2,-128
1000b5f4:	10000a1e 	bne	r2,zero,1000b620 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000b5f8:	e0bffd17 	ldw	r2,-12(fp)
1000b5fc:	10c00217 	ldw	r3,8(r2)
1000b600:	e0bffe17 	ldw	r2,-8(fp)
1000b604:	1809883a 	mov	r4,r3
1000b608:	e17fff17 	ldw	r5,-4(fp)
1000b60c:	100d883a 	mov	r6,r2
1000b610:	000b8100 	call	1000b810 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000b614:	1000021e 	bne	r2,zero,1000b620 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000b618:	e0bffd17 	ldw	r2,-12(fp)
1000b61c:	00000806 	br	1000b640 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000b620:	e0bffd17 	ldw	r2,-12(fp)
1000b624:	10800017 	ldw	r2,0(r2)
1000b628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000b62c:	e0fffd17 	ldw	r3,-12(fp)
1000b630:	00840074 	movhi	r2,4097
1000b634:	10b5e604 	addi	r2,r2,-10344
1000b638:	18bfcb1e 	bne	r3,r2,1000b568 <__alt_data_end+0xf800b568>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000b63c:	0005883a 	mov	r2,zero
}
1000b640:	e037883a 	mov	sp,fp
1000b644:	dfc00117 	ldw	ra,4(sp)
1000b648:	df000017 	ldw	fp,0(sp)
1000b64c:	dec00204 	addi	sp,sp,8
1000b650:	f800283a 	ret

1000b654 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000b654:	defffa04 	addi	sp,sp,-24
1000b658:	dfc00515 	stw	ra,20(sp)
1000b65c:	df000415 	stw	fp,16(sp)
1000b660:	dc000315 	stw	r16,12(sp)
1000b664:	df000404 	addi	fp,sp,16
1000b668:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000b66c:	00bffa04 	movi	r2,-24
1000b670:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000b674:	e03ffc15 	stw	zero,-16(fp)
1000b678:	00002106 	br	1000b700 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000b67c:	04040074 	movhi	r16,4097
1000b680:	84316904 	addi	r16,r16,-14940
1000b684:	e0bffc17 	ldw	r2,-16(fp)
1000b688:	1009883a 	mov	r4,r2
1000b68c:	01400304 	movi	r5,12
1000b690:	00040400 	call	10004040 <__mulsi3>
1000b694:	8085883a 	add	r2,r16,r2
1000b698:	10800017 	ldw	r2,0(r2)
1000b69c:	1000151e 	bne	r2,zero,1000b6f4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000b6a0:	04040074 	movhi	r16,4097
1000b6a4:	84316904 	addi	r16,r16,-14940
1000b6a8:	e0bffc17 	ldw	r2,-16(fp)
1000b6ac:	1009883a 	mov	r4,r2
1000b6b0:	01400304 	movi	r5,12
1000b6b4:	00040400 	call	10004040 <__mulsi3>
1000b6b8:	8085883a 	add	r2,r16,r2
1000b6bc:	e0fffe17 	ldw	r3,-8(fp)
1000b6c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000b6c4:	00840074 	movhi	r2,4097
1000b6c8:	10b5ea04 	addi	r2,r2,-10328
1000b6cc:	10c00017 	ldw	r3,0(r2)
1000b6d0:	e0bffc17 	ldw	r2,-16(fp)
1000b6d4:	1880040e 	bge	r3,r2,1000b6e8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000b6d8:	00840074 	movhi	r2,4097
1000b6dc:	10b5ea04 	addi	r2,r2,-10328
1000b6e0:	e0fffc17 	ldw	r3,-16(fp)
1000b6e4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000b6e8:	e0bffc17 	ldw	r2,-16(fp)
1000b6ec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000b6f0:	00000606 	br	1000b70c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000b6f4:	e0bffc17 	ldw	r2,-16(fp)
1000b6f8:	10800044 	addi	r2,r2,1
1000b6fc:	e0bffc15 	stw	r2,-16(fp)
1000b700:	e0bffc17 	ldw	r2,-16(fp)
1000b704:	10800810 	cmplti	r2,r2,32
1000b708:	103fdc1e 	bne	r2,zero,1000b67c <__alt_data_end+0xf800b67c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000b70c:	e0bffd17 	ldw	r2,-12(fp)
}
1000b710:	e6ffff04 	addi	sp,fp,-4
1000b714:	dfc00217 	ldw	ra,8(sp)
1000b718:	df000117 	ldw	fp,4(sp)
1000b71c:	dc000017 	ldw	r16,0(sp)
1000b720:	dec00304 	addi	sp,sp,12
1000b724:	f800283a 	ret

1000b728 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000b728:	defffe04 	addi	sp,sp,-8
1000b72c:	df000115 	stw	fp,4(sp)
1000b730:	df000104 	addi	fp,sp,4
1000b734:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000b738:	e0bfff17 	ldw	r2,-4(fp)
1000b73c:	10bffe84 	addi	r2,r2,-6
1000b740:	10c00428 	cmpgeui	r3,r2,16
1000b744:	18001a1e 	bne	r3,zero,1000b7b0 <alt_exception_cause_generated_bad_addr+0x88>
1000b748:	100690ba 	slli	r3,r2,2
1000b74c:	00840074 	movhi	r2,4097
1000b750:	10add804 	addi	r2,r2,-18592
1000b754:	1885883a 	add	r2,r3,r2
1000b758:	10800017 	ldw	r2,0(r2)
1000b75c:	1000683a 	jmp	r2
1000b760:	1000b7a0 	cmpeqi	zero,r2,734
1000b764:	1000b7a0 	cmpeqi	zero,r2,734
1000b768:	1000b7b0 	cmpltui	zero,r2,734
1000b76c:	1000b7b0 	cmpltui	zero,r2,734
1000b770:	1000b7b0 	cmpltui	zero,r2,734
1000b774:	1000b7a0 	cmpeqi	zero,r2,734
1000b778:	1000b7a8 	cmpgeui	zero,r2,734
1000b77c:	1000b7b0 	cmpltui	zero,r2,734
1000b780:	1000b7a0 	cmpeqi	zero,r2,734
1000b784:	1000b7a0 	cmpeqi	zero,r2,734
1000b788:	1000b7b0 	cmpltui	zero,r2,734
1000b78c:	1000b7a0 	cmpeqi	zero,r2,734
1000b790:	1000b7a8 	cmpgeui	zero,r2,734
1000b794:	1000b7b0 	cmpltui	zero,r2,734
1000b798:	1000b7b0 	cmpltui	zero,r2,734
1000b79c:	1000b7a0 	cmpeqi	zero,r2,734
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000b7a0:	00800044 	movi	r2,1
1000b7a4:	00000306 	br	1000b7b4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000b7a8:	0005883a 	mov	r2,zero
1000b7ac:	00000106 	br	1000b7b4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000b7b0:	0005883a 	mov	r2,zero
  }
}
1000b7b4:	e037883a 	mov	sp,fp
1000b7b8:	df000017 	ldw	fp,0(sp)
1000b7bc:	dec00104 	addi	sp,sp,4
1000b7c0:	f800283a 	ret

1000b7c4 <atexit>:
1000b7c4:	200b883a 	mov	r5,r4
1000b7c8:	000d883a 	mov	r6,zero
1000b7cc:	0009883a 	mov	r4,zero
1000b7d0:	000f883a 	mov	r7,zero
1000b7d4:	000b88c1 	jmpi	1000b88c <__register_exitproc>

1000b7d8 <exit>:
1000b7d8:	defffe04 	addi	sp,sp,-8
1000b7dc:	000b883a 	mov	r5,zero
1000b7e0:	dc000015 	stw	r16,0(sp)
1000b7e4:	dfc00115 	stw	ra,4(sp)
1000b7e8:	2021883a 	mov	r16,r4
1000b7ec:	000b9a00 	call	1000b9a0 <__call_exitprocs>
1000b7f0:	00840074 	movhi	r2,4097
1000b7f4:	10b5e204 	addi	r2,r2,-10360
1000b7f8:	11000017 	ldw	r4,0(r2)
1000b7fc:	20800f17 	ldw	r2,60(r4)
1000b800:	10000126 	beq	r2,zero,1000b808 <exit+0x30>
1000b804:	103ee83a 	callr	r2
1000b808:	8009883a 	mov	r4,r16
1000b80c:	000bb340 	call	1000bb34 <_exit>

1000b810 <memcmp>:
1000b810:	01c000c4 	movi	r7,3
1000b814:	3980192e 	bgeu	r7,r6,1000b87c <memcmp+0x6c>
1000b818:	2144b03a 	or	r2,r4,r5
1000b81c:	11c4703a 	and	r2,r2,r7
1000b820:	10000f26 	beq	r2,zero,1000b860 <memcmp+0x50>
1000b824:	20800003 	ldbu	r2,0(r4)
1000b828:	28c00003 	ldbu	r3,0(r5)
1000b82c:	10c0151e 	bne	r2,r3,1000b884 <memcmp+0x74>
1000b830:	31bfff84 	addi	r6,r6,-2
1000b834:	01ffffc4 	movi	r7,-1
1000b838:	00000406 	br	1000b84c <memcmp+0x3c>
1000b83c:	20800003 	ldbu	r2,0(r4)
1000b840:	28c00003 	ldbu	r3,0(r5)
1000b844:	31bfffc4 	addi	r6,r6,-1
1000b848:	10c00e1e 	bne	r2,r3,1000b884 <memcmp+0x74>
1000b84c:	21000044 	addi	r4,r4,1
1000b850:	29400044 	addi	r5,r5,1
1000b854:	31fff91e 	bne	r6,r7,1000b83c <__alt_data_end+0xf800b83c>
1000b858:	0005883a 	mov	r2,zero
1000b85c:	f800283a 	ret
1000b860:	20c00017 	ldw	r3,0(r4)
1000b864:	28800017 	ldw	r2,0(r5)
1000b868:	1880041e 	bne	r3,r2,1000b87c <memcmp+0x6c>
1000b86c:	31bfff04 	addi	r6,r6,-4
1000b870:	21000104 	addi	r4,r4,4
1000b874:	29400104 	addi	r5,r5,4
1000b878:	39bff936 	bltu	r7,r6,1000b860 <__alt_data_end+0xf800b860>
1000b87c:	303fe91e 	bne	r6,zero,1000b824 <__alt_data_end+0xf800b824>
1000b880:	003ff506 	br	1000b858 <__alt_data_end+0xf800b858>
1000b884:	10c5c83a 	sub	r2,r2,r3
1000b888:	f800283a 	ret

1000b88c <__register_exitproc>:
1000b88c:	00840074 	movhi	r2,4097
1000b890:	defffa04 	addi	sp,sp,-24
1000b894:	10b5e204 	addi	r2,r2,-10360
1000b898:	dc000315 	stw	r16,12(sp)
1000b89c:	14000017 	ldw	r16,0(r2)
1000b8a0:	dc400415 	stw	r17,16(sp)
1000b8a4:	dfc00515 	stw	ra,20(sp)
1000b8a8:	80805217 	ldw	r2,328(r16)
1000b8ac:	2023883a 	mov	r17,r4
1000b8b0:	10003626 	beq	r2,zero,1000b98c <__register_exitproc+0x100>
1000b8b4:	10c00117 	ldw	r3,4(r2)
1000b8b8:	010007c4 	movi	r4,31
1000b8bc:	20c00e16 	blt	r4,r3,1000b8f8 <__register_exitproc+0x6c>
1000b8c0:	1a400044 	addi	r9,r3,1
1000b8c4:	8800211e 	bne	r17,zero,1000b94c <__register_exitproc+0xc0>
1000b8c8:	18c00084 	addi	r3,r3,2
1000b8cc:	18c7883a 	add	r3,r3,r3
1000b8d0:	18c7883a 	add	r3,r3,r3
1000b8d4:	12400115 	stw	r9,4(r2)
1000b8d8:	10c7883a 	add	r3,r2,r3
1000b8dc:	19400015 	stw	r5,0(r3)
1000b8e0:	0005883a 	mov	r2,zero
1000b8e4:	dfc00517 	ldw	ra,20(sp)
1000b8e8:	dc400417 	ldw	r17,16(sp)
1000b8ec:	dc000317 	ldw	r16,12(sp)
1000b8f0:	dec00604 	addi	sp,sp,24
1000b8f4:	f800283a 	ret
1000b8f8:	00800034 	movhi	r2,0
1000b8fc:	10800004 	addi	r2,r2,0
1000b900:	10002526 	beq	r2,zero,1000b998 <__register_exitproc+0x10c>
1000b904:	01006404 	movi	r4,400
1000b908:	d9400015 	stw	r5,0(sp)
1000b90c:	d9800115 	stw	r6,4(sp)
1000b910:	d9c00215 	stw	r7,8(sp)
1000b914:	00000000 	call	10000000 <__alt_mem_sdram>
1000b918:	d9400017 	ldw	r5,0(sp)
1000b91c:	d9800117 	ldw	r6,4(sp)
1000b920:	d9c00217 	ldw	r7,8(sp)
1000b924:	10001c26 	beq	r2,zero,1000b998 <__register_exitproc+0x10c>
1000b928:	80c05217 	ldw	r3,328(r16)
1000b92c:	10000115 	stw	zero,4(r2)
1000b930:	02400044 	movi	r9,1
1000b934:	10c00015 	stw	r3,0(r2)
1000b938:	80805215 	stw	r2,328(r16)
1000b93c:	10006215 	stw	zero,392(r2)
1000b940:	10006315 	stw	zero,396(r2)
1000b944:	0007883a 	mov	r3,zero
1000b948:	883fdf26 	beq	r17,zero,1000b8c8 <__alt_data_end+0xf800b8c8>
1000b94c:	18d1883a 	add	r8,r3,r3
1000b950:	4211883a 	add	r8,r8,r8
1000b954:	1211883a 	add	r8,r2,r8
1000b958:	41802215 	stw	r6,136(r8)
1000b95c:	01000044 	movi	r4,1
1000b960:	11806217 	ldw	r6,392(r2)
1000b964:	20c8983a 	sll	r4,r4,r3
1000b968:	310cb03a 	or	r6,r6,r4
1000b96c:	11806215 	stw	r6,392(r2)
1000b970:	41c04215 	stw	r7,264(r8)
1000b974:	01800084 	movi	r6,2
1000b978:	89bfd31e 	bne	r17,r6,1000b8c8 <__alt_data_end+0xf800b8c8>
1000b97c:	11806317 	ldw	r6,396(r2)
1000b980:	3108b03a 	or	r4,r6,r4
1000b984:	11006315 	stw	r4,396(r2)
1000b988:	003fcf06 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000b98c:	80805304 	addi	r2,r16,332
1000b990:	80805215 	stw	r2,328(r16)
1000b994:	003fc706 	br	1000b8b4 <__alt_data_end+0xf800b8b4>
1000b998:	00bfffc4 	movi	r2,-1
1000b99c:	003fd106 	br	1000b8e4 <__alt_data_end+0xf800b8e4>

1000b9a0 <__call_exitprocs>:
1000b9a0:	00840074 	movhi	r2,4097
1000b9a4:	10b5e204 	addi	r2,r2,-10360
1000b9a8:	10800017 	ldw	r2,0(r2)
1000b9ac:	defff404 	addi	sp,sp,-48
1000b9b0:	dd800815 	stw	r22,32(sp)
1000b9b4:	d8800015 	stw	r2,0(sp)
1000b9b8:	10805204 	addi	r2,r2,328
1000b9bc:	dd000615 	stw	r20,24(sp)
1000b9c0:	dc800415 	stw	r18,16(sp)
1000b9c4:	dfc00b15 	stw	ra,44(sp)
1000b9c8:	df000a15 	stw	fp,40(sp)
1000b9cc:	ddc00915 	stw	r23,36(sp)
1000b9d0:	dd400715 	stw	r21,28(sp)
1000b9d4:	dcc00515 	stw	r19,20(sp)
1000b9d8:	dc400315 	stw	r17,12(sp)
1000b9dc:	dc000215 	stw	r16,8(sp)
1000b9e0:	2025883a 	mov	r18,r4
1000b9e4:	2829883a 	mov	r20,r5
1000b9e8:	d8800115 	stw	r2,4(sp)
1000b9ec:	05bfffc4 	movi	r22,-1
1000b9f0:	d8800017 	ldw	r2,0(sp)
1000b9f4:	14c05217 	ldw	r19,328(r2)
1000b9f8:	98001d26 	beq	r19,zero,1000ba70 <__call_exitprocs+0xd0>
1000b9fc:	dd400117 	ldw	r21,4(sp)
1000ba00:	98800117 	ldw	r2,4(r19)
1000ba04:	173fffc4 	addi	fp,r2,-1
1000ba08:	e0000d16 	blt	fp,zero,1000ba40 <__call_exitprocs+0xa0>
1000ba0c:	14000044 	addi	r16,r2,1
1000ba10:	8421883a 	add	r16,r16,r16
1000ba14:	8421883a 	add	r16,r16,r16
1000ba18:	84402004 	addi	r17,r16,128
1000ba1c:	9c63883a 	add	r17,r19,r17
1000ba20:	9c21883a 	add	r16,r19,r16
1000ba24:	a0001e26 	beq	r20,zero,1000baa0 <__call_exitprocs+0x100>
1000ba28:	80804017 	ldw	r2,256(r16)
1000ba2c:	15001c26 	beq	r2,r20,1000baa0 <__call_exitprocs+0x100>
1000ba30:	e73fffc4 	addi	fp,fp,-1
1000ba34:	843fff04 	addi	r16,r16,-4
1000ba38:	8c7fff04 	addi	r17,r17,-4
1000ba3c:	e5bff91e 	bne	fp,r22,1000ba24 <__alt_data_end+0xf800ba24>
1000ba40:	00800034 	movhi	r2,0
1000ba44:	10800004 	addi	r2,r2,0
1000ba48:	10000926 	beq	r2,zero,1000ba70 <__call_exitprocs+0xd0>
1000ba4c:	98800117 	ldw	r2,4(r19)
1000ba50:	1000311e 	bne	r2,zero,1000bb18 <__call_exitprocs+0x178>
1000ba54:	98800017 	ldw	r2,0(r19)
1000ba58:	10003426 	beq	r2,zero,1000bb2c <__call_exitprocs+0x18c>
1000ba5c:	9809883a 	mov	r4,r19
1000ba60:	a8800015 	stw	r2,0(r21)
1000ba64:	00000000 	call	10000000 <__alt_mem_sdram>
1000ba68:	acc00017 	ldw	r19,0(r21)
1000ba6c:	983fe41e 	bne	r19,zero,1000ba00 <__alt_data_end+0xf800ba00>
1000ba70:	dfc00b17 	ldw	ra,44(sp)
1000ba74:	df000a17 	ldw	fp,40(sp)
1000ba78:	ddc00917 	ldw	r23,36(sp)
1000ba7c:	dd800817 	ldw	r22,32(sp)
1000ba80:	dd400717 	ldw	r21,28(sp)
1000ba84:	dd000617 	ldw	r20,24(sp)
1000ba88:	dcc00517 	ldw	r19,20(sp)
1000ba8c:	dc800417 	ldw	r18,16(sp)
1000ba90:	dc400317 	ldw	r17,12(sp)
1000ba94:	dc000217 	ldw	r16,8(sp)
1000ba98:	dec00c04 	addi	sp,sp,48
1000ba9c:	f800283a 	ret
1000baa0:	98800117 	ldw	r2,4(r19)
1000baa4:	80c00017 	ldw	r3,0(r16)
1000baa8:	10bfffc4 	addi	r2,r2,-1
1000baac:	17001526 	beq	r2,fp,1000bb04 <__call_exitprocs+0x164>
1000bab0:	80000015 	stw	zero,0(r16)
1000bab4:	183fde26 	beq	r3,zero,1000ba30 <__alt_data_end+0xf800ba30>
1000bab8:	00800044 	movi	r2,1
1000babc:	1708983a 	sll	r4,r2,fp
1000bac0:	98806217 	ldw	r2,392(r19)
1000bac4:	9dc00117 	ldw	r23,4(r19)
1000bac8:	2084703a 	and	r2,r4,r2
1000bacc:	1000061e 	bne	r2,zero,1000bae8 <__call_exitprocs+0x148>
1000bad0:	183ee83a 	callr	r3
1000bad4:	98800117 	ldw	r2,4(r19)
1000bad8:	15ffc51e 	bne	r2,r23,1000b9f0 <__alt_data_end+0xf800b9f0>
1000badc:	a8800017 	ldw	r2,0(r21)
1000bae0:	14ffd326 	beq	r2,r19,1000ba30 <__alt_data_end+0xf800ba30>
1000bae4:	003fc206 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000bae8:	98806317 	ldw	r2,396(r19)
1000baec:	2084703a 	and	r2,r4,r2
1000baf0:	1000061e 	bne	r2,zero,1000bb0c <__call_exitprocs+0x16c>
1000baf4:	89400017 	ldw	r5,0(r17)
1000baf8:	9009883a 	mov	r4,r18
1000bafc:	183ee83a 	callr	r3
1000bb00:	003ff406 	br	1000bad4 <__alt_data_end+0xf800bad4>
1000bb04:	9f000115 	stw	fp,4(r19)
1000bb08:	003fea06 	br	1000bab4 <__alt_data_end+0xf800bab4>
1000bb0c:	89000017 	ldw	r4,0(r17)
1000bb10:	183ee83a 	callr	r3
1000bb14:	003fef06 	br	1000bad4 <__alt_data_end+0xf800bad4>
1000bb18:	98800017 	ldw	r2,0(r19)
1000bb1c:	982b883a 	mov	r21,r19
1000bb20:	1027883a 	mov	r19,r2
1000bb24:	983fb61e 	bne	r19,zero,1000ba00 <__alt_data_end+0xf800ba00>
1000bb28:	003fd106 	br	1000ba70 <__alt_data_end+0xf800ba70>
1000bb2c:	0005883a 	mov	r2,zero
1000bb30:	003ffa06 	br	1000bb1c <__alt_data_end+0xf800bb1c>

1000bb34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000bb34:	defffd04 	addi	sp,sp,-12
1000bb38:	df000215 	stw	fp,8(sp)
1000bb3c:	df000204 	addi	fp,sp,8
1000bb40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000bb44:	0001883a 	nop
1000bb48:	e0bfff17 	ldw	r2,-4(fp)
1000bb4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000bb50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000bb54:	10000226 	beq	r2,zero,1000bb60 <_exit+0x2c>
    ALT_SIM_FAIL();
1000bb58:	002af070 	cmpltui	zero,zero,43969
1000bb5c:	00000106 	br	1000bb64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000bb60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000bb64:	003fff06 	br	1000bb64 <__alt_data_end+0xf800bb64>
