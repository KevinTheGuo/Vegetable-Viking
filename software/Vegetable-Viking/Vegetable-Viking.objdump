
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011e3c memsz 0x00011e3c flags r-x
    LOAD off    0x00012e5c vaddr 0x10011e5c paddr 0x1001394c align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x0001543c vaddr 0x1001543c paddr 0x1001543c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117a8  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000488  100119d4  100119d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10011e5c  1001394c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  1001543c  1001543c  0001543c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001494c  2**0
                  CONTENTS
  7 .sdram        00000000  1001559c  1001559c  0001494c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001494c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e68  00000000  00000000  00014970  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000253ca  00000000  00000000  000157d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000099aa  00000000  00000000  0003aba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c16e  00000000  00000000  0004454c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002364  00000000  00000000  000506bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c3f  00000000  00000000  00052a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018dab  00000000  00000000  0005665f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006f40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001438  00000000  00000000  0006f420  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00073ccd  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00073cd0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00073cdc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00073cdd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00073cde  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00073ce2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00073ce6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00073cea  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00073cf5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00073d00  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00073d0b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00073d16  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00073d30  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a1cc2  00000000  00000000  00078177  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
100119d4 l    d  .rodata	00000000 .rodata
10011e5c l    d  .rwdata	00000000 .rwdata
1001543c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001559c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
10011b3c l     O .rodata	00000010 bp
10011b1c l     O .rodata	00000010 dp_l
10011b2c l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
10011b4c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100035d8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
10011e5c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011ca6 l     O .rodata	00000010 zeroes.4181
10011cb6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100082b0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10009e58 l     F .text	00000008 __fp_lock
10009e60 l     F .text	00000008 __fp_unlock
10009e74 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
100122a0 l     O .rwdata	00000020 lc_ctype_charset
10012280 l     O .rwdata	00000020 lc_message_charset
100122c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011ce4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000d330 l     F .text	000000fc __sprint_r.part.0
10011e18 l     O .rodata	00000010 blanks.4125
10011e08 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f27c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f3a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f3d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f4d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f5d4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f6b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f89c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001393c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000fb20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fc70 l     F .text	00000038 alt_dev_reg
100128a8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000ff4c l     F .text	00000204 altera_avalon_jtag_uart_irq
10010150 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100108cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010d64 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010ebc l     F .text	00000050 alt_get_errno
10010f0c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015470 g     O .bss	00000004 alt_instruction_exception_handler
1000096c g     F .text	000000e0 convertDecimalToBinary
1000c9e4 g     F .text	00000074 _mprec_log10
1000cad0 g     F .text	0000008c __any_on
1000ed5c g     F .text	00000054 _isatty_r
10011cf0 g     O .rodata	00000028 __mprec_tinytens
1000f7e4 g     F .text	00000078 alt_main
10005efc g     F .text	000000b8 _puts_r
1001549c g     O .bss	00000100 alt_irq
100023ec g     F .text	00000014 fabs
1000edb0 g     F .text	0000005c _lseek_r
1001394c g       *ABS*	00000000 __flash_rwdata_start
10004948 g     F .text	00000084 .hidden __eqdf2
1001559c g       *ABS*	00000000 __alt_heap_start
10005ec0 g     F .text	0000003c printf
1000efd8 g     F .text	0000009c _wcrtomb_r
1000d228 g     F .text	0000005c __sseek
1000a1bc g     F .text	00000010 __sinit
1000ee68 g     F .text	00000154 __swbuf_r
1000ac34 g     F .text	0000007c _setlocale_r
1000a014 g     F .text	00000078 __sfmoreglue
1000f87c g     F .text	00000020 __malloc_unlock
1000b894 g     F .text	0000015c memmove
1000a1a4 g     F .text	00000018 _cleanup
1000bb14 g     F .text	000000a8 _Balloc
100049cc g     F .text	000000e0 .hidden __gtdf2
100112fc g     F .text	00000020 altera_nios2_gen2_irq_init
10005e84 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000ed04 g     F .text	00000058 _fstat_r
10015454 g     O .bss	00000004 errno
1000d1a4 g     F .text	00000008 __seofread
1001545c g     O .bss	00000004 alt_argv
1001b908 g       *ABS*	00000000 _gp
10012728 g     O .rwdata	00000180 alt_fd_list
1001131c g     F .text	00000090 alt_find_dev
1000b75c g     F .text	00000138 memcpy
10009e68 g     F .text	0000000c _cleanup_r
10005d50 g     F .text	000000d0 .hidden __floatsidf
10010e44 g     F .text	00000078 alt_io_redirect
10004aac g     F .text	000000e0 .hidden __ltdf2
100119d4 g       *ABS*	00000000 __DTOR_END__
10005fb4 g     F .text	00000014 puts
10011594 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000241c g     F .text	00000074 __fpclassifyd
1000c940 g     F .text	000000a4 __ratio
1000e868 g     F .text	00000024 __vfiprintf_internal
1001034c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10005e94 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100036f4 g     F .text	00000008 .hidden __udivsi3
1000f528 g     F .text	000000ac isatty
10011d40 g     O .rodata	000000c8 __mprec_tens
1000acb0 g     F .text	0000000c __locale_charset
10015450 g     O .bss	00000004 __malloc_top_pad
10013914 g     O .rwdata	00000004 __mb_cur_max
1000ace0 g     F .text	0000000c _localeconv_r
1000bf3c g     F .text	0000003c __i2b
1000a620 g     F .text	000004a4 __sfvwrite_r
1000d0fc g     F .text	00000054 _sbrk_r
1000ee0c g     F .text	0000005c _read_r
10013934 g     O .rwdata	00000004 alt_max_fd
1000ea14 g     F .text	00000100 _fclose_r
10009e28 g     F .text	00000030 fflush
1001544c g     O .bss	00000004 __malloc_max_sbrked_mem
1000372c g     F .text	0000089c .hidden __adddf3
1000c6e8 g     F .text	0000011c __b2d
10002fbc g     F .text	0000061c .hidden __umoddi3
1000f708 g     F .text	000000dc lseek
10013908 g     O .rwdata	00000004 __fdlib_version
1001390c g     O .rwdata	00000004 _global_impure_ptr
1000cb5c g     F .text	000005a0 _realloc_r
1001559c g       *ABS*	00000000 __bss_end
10010c74 g     F .text	000000f0 alt_iic_isr_register
100111f8 g     F .text	00000104 alt_tick
1000297c g     F .text	00000640 .hidden __udivdi3
1000eb28 g     F .text	00000184 _fputwc_r
10011d18 g     O .rodata	00000028 __mprec_bigtens
1000bd20 g     F .text	00000104 __s2b
1000f1d8 g     F .text	000000a4 .hidden __floatunsidf
1000c490 g     F .text	00000060 __mcmp
1000a1dc g     F .text	00000018 __fp_lock_all
10010c28 g     F .text	0000004c alt_ic_irq_enabled
10011160 g     F .text	00000098 alt_alarm_stop
10015464 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10012700 g     O .rwdata	00000028 alt_dev_null
100024a4 g     F .text	000001e4 rint
100108b0 g     F .text	0000001c alt_dcache_flush_all
1000be24 g     F .text	00000068 __hi0bits
10005cc8 g     F .text	00000088 .hidden __fixdfsi
1001394c g       *ABS*	00000000 __ram_rwdata_end
1001392c g     O .rwdata	00000008 alt_dev_list
1000fb70 g     F .text	00000100 write
10011e5c g       *ABS*	00000000 __ram_rodata_end
1000f420 g     F .text	000000b8 fstat
10004aac g     F .text	000000e0 .hidden __ledf2
1000c208 g     F .text	00000140 __pow5mult
1000d444 g     F .text	00001424 ___vfiprintf_internal_r
10015444 g     O .bss	00000004 __nlocale_changed
100036fc g     F .text	00000008 .hidden __umodsi3
1001559c g       *ABS*	00000000 end
1000fe88 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
100119d4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10005e20 g     F .text	00000064 .hidden __clzsi2
10010558 g     F .text	00000218 altera_avalon_jtag_uart_write
1000a1cc g     F .text	00000004 __sfp_lock_acquire
1000b674 g     F .text	000000e8 memchr
10006060 g     F .text	000020fc ___vfprintf_internal_r
1000a330 g     F .text	000002f0 _free_r
1000acbc g     F .text	00000010 __locale_mb_cur_max
1001180c g     F .text	00000194 __call_exitprocs
10015440 g     O .bss	00000004 __mlocale_changed
10013918 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10015468 g     O .bss	00000004 _alt_tick_rate
1000c348 g     F .text	00000148 __lshift
1001546c g     O .bss	00000004 _alt_nticks
1000f8ec g     F .text	00000104 read
1000fcdc g     F .text	00000048 alt_sys_init
100116f8 g     F .text	00000114 __register_exitproc
1000bf78 g     F .text	00000290 __multiply
1000108c g     F .text	000010cc __ieee754_pow
100101f8 g     F .text	00000068 altera_avalon_jtag_uart_close
10000be8 g     F .text	000004a4 pow
10003704 g     F .text	00000028 .hidden __mulsi3
10011e5c g       *ABS*	00000000 __ram_rwdata_start
100119d4 g       *ABS*	00000000 __ram_rodata_start
10015474 g     O .bss	00000028 __malloc_current_mallinfo
1000c804 g     F .text	0000013c __d2b
1000fd24 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100114c0 g     F .text	000000d4 alt_get_fd
1000e8e8 g     F .text	00000054 _close_r
1001167c g     F .text	0000007c memcmp
1000fde4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001559c g       *ABS*	00000000 __alt_stack_base
1000fe34 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10008180 g     F .text	00000130 __swsetup_r
10003fc8 g     F .text	00000980 .hidden __divdf3
1000a08c g     F .text	00000118 __sfp
1000ca58 g     F .text	00000078 __copybits
100122f8 g     O .rwdata	00000408 __malloc_av_
1000a1d8 g     F .text	00000004 __sinit_lock_release
10004b8c g     F .text	0000086c .hidden __muldf3
1000d150 g     F .text	00000054 __sread
100113ac g     F .text	00000114 alt_find_file
1001091c g     F .text	000000a4 alt_dev_llist_insert
1000f85c g     F .text	00000020 __malloc_lock
1000fa70 g     F .text	000000b0 sbrk
10009c00 g     F .text	00000228 _fflush_r
1000e93c g     F .text	000000d8 _calloc_r
1001543c g       *ABS*	00000000 __bss_start
1000b9f0 g     F .text	00000124 memset
10000268 g     F .text	00000138 main
10015460 g     O .bss	00000004 alt_envp
10015448 g     O .bss	00000004 __malloc_max_total_mem
1000fd84 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000efbc g     F .text	0000001c __swbuf
10000a4c g     F .text	0000019c convertBinaryToDecimal
1000d284 g     F .text	00000008 __sclose
10002490 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
1000eb14 g     F .text	00000014 fclose
100084d8 g     F .text	00001728 _dtoa_r
1000aecc g     F .text	000007a8 _malloc_r
1000f14c g     F .text	00000030 __ascii_wctomb
10013938 g     O .rwdata	00000004 alt_errno
1000aac4 g     F .text	000000b8 _fwalk
10003644 g     F .text	00000054 .hidden __divsi3
1000a20c g     F .text	00000124 _malloc_trim_r
100119d4 g       *ABS*	00000000 __CTOR_END__
10002400 g     F .text	0000001c finite
1000d28c g     F .text	000000a4 strcmp
100119d4 g       *ABS*	00000000 __flash_rodata_start
100119d4 g       *ABS*	00000000 __DTOR_LIST__
10002854 g     F .text	0000001c copysign
10004948 g     F .text	00000084 .hidden __nedf2
1000fca8 g     F .text	00000034 alt_irq_init
1000f9f0 g     F .text	00000080 alt_release_fd
10011b5c g     O .rodata	00000100 .hidden __clz_tab
1001543c g     O .bss	00000004 _PathLocale
10011630 g     F .text	00000014 atexit
100003a0 g     F .text	00000410 messagePackager
1000e88c g     F .text	0000005c _write_r
1000acec g     F .text	0000001c setlocale
10013910 g     O .rwdata	00000004 _impure_ptr
10015458 g     O .bss	00000004 alt_argc
10002688 g     F .text	000001cc scalbn
10010a1c g     F .text	0000005c _do_dtors
1000acd8 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000c688 g     F .text	00000060 __ulp
1000a1f4 g     F .text	00000018 __fp_unlock_all
10013924 g     O .rwdata	00000008 alt_fs_list
10002498 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000ad08 g     F .text	0000000c localeconv
10002158 g     F .text	00000294 __ieee754_sqrt
10010a94 g     F .text	00000050 alt_ic_isr_register
1001394c g       *ABS*	00000000 _edata
1001559c g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10010260 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10010b84 g     F .text	000000a4 alt_ic_irq_disable
1000d1ac g     F .text	0000007c __swrite
1001391c g     O .rwdata	00000004 __malloc_trim_threshold
1000accc g     F .text	0000000c __locale_msgcharset
10011644 g     F .text	00000038 exit
1000ab7c g     F .text	000000b8 _fwalk_reent
1000c4f0 g     F .text	00000198 __mdiff
10003698 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000a1d0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100119a0 g     F .text	00000034 _exit
10010770 g     F .text	00000140 alt_alarm_start
10002870 g     F .text	0000010c .hidden __muldi3
1000ad14 g     F .text	000001b8 __smakebuf_r
10005fc8 g     F .text	00000098 strlen
10011000 g     F .text	00000160 open
100049cc g     F .text	000000e0 .hidden __gedf2
10013920 g     O .rwdata	00000004 __wctomb
1000d42c g     F .text	00000018 __sprint_r
10010a78 g     F .text	0000001c alt_icache_flush_all
100007b0 g     F .text	000001bc FPGAcommunicator
10013940 g     O .rwdata	00000004 alt_priority_mask
10010ae4 g     F .text	000000a0 alt_ic_irq_enable
1000815c g     F .text	00000024 __vfprintf_internal
1000f17c g     F .text	0000005c _wctomb_r
100053f8 g     F .text	000008d0 .hidden __subdf3
1000be8c g     F .text	000000b0 __lo0bits
10013944 g     O .rwdata	00000008 alt_alarm_list
100109c0 g     F .text	0000005c _do_ctors
1000f074 g     F .text	000000d8 wcrtomb
1000f2cc g     F .text	000000d8 close
1000f638 g     F .text	00000080 alt_load
1000ecac g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000a1d4 g     F .text	00000004 __sinit_lock_acquire
1000bbe4 g     F .text	0000013c __multadd
1000bbbc g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10952704 	addi	r2,r2,21660
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10952704 	addi	r2,r2,21660
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6da17 	ldw	r2,-25752(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6da17 	ldw	r2,-25752(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6ae4214 	ori	gp,gp,47368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10950f14 	ori	r2,r2,21564

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d56714 	ori	r3,r3,21916

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000f6380 	call	1000f638 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000f7e40 	call	1000f7e4 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertBinaryToDecimal(unsigned long long n);


// our main function!!!
int main()
{
10000268:	deff9b04 	addi	sp,sp,-404
1000026c:	dfc06415 	stw	ra,400(sp)
10000270:	df006315 	stw	fp,396(sp)
10000274:	df006304 	addi	fp,sp,396
	// make our struct
	struct displayPackage gameObject[16];

	gameObject[0].xPosition = 127;
10000278:	00801fc4 	movi	r2,127
1000027c:	e0bfa015 	stw	r2,-384(fp)
	gameObject[0].yPosition = 96;
10000280:	00801804 	movi	r2,96
10000284:	e0bfa115 	stw	r2,-380(fp)
	gameObject[0].objectType = 7;
10000288:	008001c4 	movi	r2,7
1000028c:	e0bfa215 	stw	r2,-376(fp)
	gameObject[0].objectState = 7;
10000290:	008001c4 	movi	r2,7
10000294:	e0bfa315 	stw	r2,-372(fp)
	gameObject[0].packageType = 1;
10000298:	00800044 	movi	r2,1
1000029c:	e0bfa415 	stw	r2,-368(fp)

	gameObject[11].xPosition = 34;
100002a0:	00800884 	movi	r2,34
100002a4:	e0bfd715 	stw	r2,-164(fp)
	gameObject[11].yPosition = 84;
100002a8:	00801504 	movi	r2,84
100002ac:	e0bfd815 	stw	r2,-160(fp)
	gameObject[11].objectType = 2;
100002b0:	00800084 	movi	r2,2
100002b4:	e0bfd915 	stw	r2,-156(fp)
	gameObject[11].objectState = 4;
100002b8:	00800104 	movi	r2,4
100002bc:	e0bfda15 	stw	r2,-152(fp)
	gameObject[11].packageType = 1;
100002c0:	00800044 	movi	r2,1
100002c4:	e0bfdb15 	stw	r2,-148(fp)

	gameObject[12].xPosition = 640;
100002c8:	0080a004 	movi	r2,640
100002cc:	e0bfdc15 	stw	r2,-144(fp)
	gameObject[12].yPosition = 480;
100002d0:	00807804 	movi	r2,480
100002d4:	e0bfdd15 	stw	r2,-140(fp)
	gameObject[12].objectType = 0;
100002d8:	e03fde15 	stw	zero,-136(fp)
	gameObject[12].objectState = 0;
100002dc:	e03fdf15 	stw	zero,-132(fp)
	gameObject[12].packageType = 0;
100002e0:	e03fe015 	stw	zero,-128(fp)

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<1; i++)
100002e4:	e03f9e15 	stw	zero,-392(fp)
100002e8:	00001f06 	br	10000368 <main+0x100>
	{
		unsigned long tempPackage = messagePackager(gameObject[i]);
100002ec:	e0bf9e17 	ldw	r2,-392(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400504 	movi	r5,20
100002f8:	00037040 	call	10003704 <__mulsi3>
100002fc:	e0ff9e04 	addi	r3,fp,-392
10000300:	1885883a 	add	r2,r3,r2
10000304:	10800204 	addi	r2,r2,8
10000308:	10c00417 	ldw	r3,16(r2)
1000030c:	d8c00015 	stw	r3,0(sp)
10000310:	11000017 	ldw	r4,0(r2)
10000314:	11400117 	ldw	r5,4(r2)
10000318:	11800217 	ldw	r6,8(r2)
1000031c:	11c00317 	ldw	r7,12(r2)
10000320:	00003a00 	call	100003a0 <messagePackager>
10000324:	e0bf9f15 	stw	r2,-388(fp)


		printf("Our %dth message is %llu\n", i, tempPackage);
10000328:	01040074 	movhi	r4,4097
1000032c:	21067504 	addi	r4,r4,6612
10000330:	e17f9e17 	ldw	r5,-392(fp)
10000334:	e1bf9f17 	ldw	r6,-388(fp)
10000338:	0005ec00 	call	10005ec0 <printf>

		FPGAmessage[i] = tempPackage;
1000033c:	e0bf9e17 	ldw	r2,-392(fp)
10000340:	1085883a 	add	r2,r2,r2
10000344:	1085883a 	add	r2,r2,r2
10000348:	e0ff9e04 	addi	r3,fp,-392
1000034c:	1885883a 	add	r2,r3,r2
10000350:	10805204 	addi	r2,r2,328
10000354:	e0ff9f17 	ldw	r3,-388(fp)
10000358:	10c00015 	stw	r3,0(r2)

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<1; i++)
1000035c:	e0bf9e17 	ldw	r2,-392(fp)
10000360:	10800044 	addi	r2,r2,1
10000364:	e0bf9e15 	stw	r2,-392(fp)
10000368:	e0bf9e17 	ldw	r2,-392(fp)
1000036c:	00bfdf0e 	bge	zero,r2,100002ec <__alt_data_end+0xf80002ec>
		printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
	}

	printf("Now we doing our communicatin\n");
10000370:	01040074 	movhi	r4,4097
10000374:	21067c04 	addi	r4,r4,6640
10000378:	0005fb40 	call	10005fb4 <puts>
	FPGAcommunicator(FPGAmessage);
1000037c:	e0bff004 	addi	r2,fp,-64
10000380:	1009883a 	mov	r4,r2
10000384:	00007b00 	call	100007b0 <FPGAcommunicator>

	return 0;
10000388:	0005883a 	mov	r2,zero
}
1000038c:	e037883a 	mov	sp,fp
10000390:	dfc00117 	ldw	ra,4(sp)
10000394:	df000017 	ldw	fp,0(sp)
10000398:	dec00204 	addi	sp,sp,8
1000039c:	f800283a 	ret

100003a0 <messagePackager>:

// this function takes a struct and converts it into a message we can send
unsigned long messagePackager(struct displayPackage specifiedObject)
{
100003a0:	deffe304 	addi	sp,sp,-116
100003a4:	dfc01815 	stw	ra,96(sp)
100003a8:	df001715 	stw	fp,92(sp)
100003ac:	dc401615 	stw	r17,88(sp)
100003b0:	dc001515 	stw	r16,84(sp)
100003b4:	df001704 	addi	fp,sp,92
100003b8:	e1000215 	stw	r4,8(fp)
100003bc:	e1400315 	stw	r5,12(fp)
100003c0:	e1800415 	stw	r6,16(fp)
100003c4:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
100003c8:	e0800617 	ldw	r2,24(fp)
100003cc:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 2)
100003d0:	e0bfeb17 	ldw	r2,-84(fp)
100003d4:	10800098 	cmpnei	r2,r2,2
100003d8:	10005c1e 	bne	r2,zero,1000054c <messagePackager+0x1ac>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
100003dc:	e0800217 	ldw	r2,8(fp)
100003e0:	e0bfec15 	stw	r2,-80(fp)
100003e4:	e03fed15 	stw	zero,-76(fp)
		tempTime = specifiedObject.yPosition;
100003e8:	e0800317 	ldw	r2,12(fp)
100003ec:	e0bfee15 	stw	r2,-72(fp)
100003f0:	e03fef15 	stw	zero,-68(fp)
		tempStart = specifiedObject.objectType;
100003f4:	e0800417 	ldw	r2,16(fp)
100003f8:	e0bff015 	stw	r2,-64(fp)
100003fc:	e03ff115 	stw	zero,-60(fp)
		tempEnd = specifiedObject.objectState;
10000400:	e0800517 	ldw	r2,20(fp)
10000404:	e0bff215 	stw	r2,-56(fp)
10000408:	e03ff315 	stw	zero,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
1000040c:	e0bfec17 	ldw	r2,-80(fp)
10000410:	1009883a 	mov	r4,r2
10000414:	000096c0 	call	1000096c <convertDecimalToBinary>
10000418:	e0bfec15 	stw	r2,-80(fp)
1000041c:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000420:	e0bfee17 	ldw	r2,-72(fp)
10000424:	1009883a 	mov	r4,r2
10000428:	000096c0 	call	1000096c <convertDecimalToBinary>
1000042c:	e0bfee15 	stw	r2,-72(fp)
10000430:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000434:	e0bff017 	ldw	r2,-64(fp)
10000438:	1009883a 	mov	r4,r2
1000043c:	000096c0 	call	1000096c <convertDecimalToBinary>
10000440:	e0bff015 	stw	r2,-64(fp)
10000444:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000448:	e0bff217 	ldw	r2,-56(fp)
1000044c:	1009883a 	mov	r4,r2
10000450:	000096c0 	call	1000096c <convertDecimalToBinary>
10000454:	e0bff215 	stw	r2,-56(fp)
10000458:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
1000045c:	00802674 	movhi	r2,153
10000460:	10a5a004 	addi	r2,r2,-27008
10000464:	0007883a 	mov	r3,zero
10000468:	e13fee17 	ldw	r4,-72(fp)
1000046c:	e17fef17 	ldw	r5,-68(fp)
10000470:	100d883a 	mov	r6,r2
10000474:	180f883a 	mov	r7,r3
10000478:	00028700 	call	10002870 <__muldi3>
1000047c:	1009883a 	mov	r4,r2
10000480:	180b883a 	mov	r5,r3
10000484:	2021883a 	mov	r16,r4
10000488:	2823883a 	mov	r17,r5
1000048c:	00841eb4 	movhi	r2,4218
10000490:	10900004 	addi	r2,r2,16384
10000494:	00d6bcc4 	movi	r3,23283
10000498:	e13ff017 	ldw	r4,-64(fp)
1000049c:	e17ff117 	ldw	r5,-60(fp)
100004a0:	100d883a 	mov	r6,r2
100004a4:	180f883a 	mov	r7,r3
100004a8:	00028700 	call	10002870 <__muldi3>
100004ac:	100d883a 	mov	r6,r2
100004b0:	180f883a 	mov	r7,r3
100004b4:	3009883a 	mov	r4,r6
100004b8:	380b883a 	mov	r5,r7
100004bc:	8105883a 	add	r2,r16,r4
100004c0:	140d803a 	cmpltu	r6,r2,r16
100004c4:	8947883a 	add	r3,r17,r5
100004c8:	30c9883a 	add	r4,r6,r3
100004cc:	2007883a 	mov	r3,r4
100004d0:	100d883a 	mov	r6,r2
100004d4:	180f883a 	mov	r7,r3
100004d8:	e13fec17 	ldw	r4,-80(fp)
100004dc:	e17fed17 	ldw	r5,-76(fp)
100004e0:	3105883a 	add	r2,r6,r4
100004e4:	1191803a 	cmpltu	r8,r2,r6
100004e8:	3947883a 	add	r3,r7,r5
100004ec:	40c9883a 	add	r4,r8,r3
100004f0:	2007883a 	mov	r3,r4
100004f4:	1021883a 	mov	r16,r2
100004f8:	1823883a 	mov	r17,r3
100004fc:	009762b4 	movhi	r2,23946
10000500:	00c058f4 	movhi	r3,355
10000504:	18d15e04 	addi	r3,r3,17784
10000508:	e13ff217 	ldw	r4,-56(fp)
1000050c:	e17ff317 	ldw	r5,-52(fp)
10000510:	100d883a 	mov	r6,r2
10000514:	180f883a 	mov	r7,r3
10000518:	00028700 	call	10002870 <__muldi3>
1000051c:	100d883a 	mov	r6,r2
10000520:	180f883a 	mov	r7,r3
10000524:	3009883a 	mov	r4,r6
10000528:	380b883a 	mov	r5,r7
1000052c:	8105883a 	add	r2,r16,r4
10000530:	140d803a 	cmpltu	r6,r2,r16
10000534:	8947883a 	add	r3,r17,r5
10000538:	30c9883a 	add	r4,r6,r3
1000053c:	2007883a 	mov	r3,r4
10000540:	e0bfe915 	stw	r2,-92(fp)
10000544:	e0ffea15 	stw	r3,-88(fp)
10000548:	00008c06 	br	1000077c <messagePackager+0x3dc>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
1000054c:	e0800217 	ldw	r2,8(fp)
10000550:	e0bff415 	stw	r2,-48(fp)
10000554:	e03ff515 	stw	zero,-44(fp)
		tempY = specifiedObject.yPosition;
10000558:	e0800317 	ldw	r2,12(fp)
1000055c:	e0bff615 	stw	r2,-40(fp)
10000560:	e03ff715 	stw	zero,-36(fp)
		tempType = specifiedObject.objectType;
10000564:	e0800417 	ldw	r2,16(fp)
10000568:	e0bff815 	stw	r2,-32(fp)
1000056c:	e03ff915 	stw	zero,-28(fp)
		tempState = specifiedObject.objectState;
10000570:	e0800517 	ldw	r2,20(fp)
10000574:	e0bffa15 	stw	r2,-24(fp)
10000578:	e03ffb15 	stw	zero,-20(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
1000057c:	e0bff417 	ldw	r2,-48(fp)
10000580:	1009883a 	mov	r4,r2
10000584:	000096c0 	call	1000096c <convertDecimalToBinary>
10000588:	e0bff415 	stw	r2,-48(fp)
1000058c:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
10000590:	e0bff617 	ldw	r2,-40(fp)
10000594:	1009883a 	mov	r4,r2
10000598:	000096c0 	call	1000096c <convertDecimalToBinary>
1000059c:	e0bff615 	stw	r2,-40(fp)
100005a0:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
100005a4:	e0bff817 	ldw	r2,-32(fp)
100005a8:	1009883a 	mov	r4,r2
100005ac:	000096c0 	call	1000096c <convertDecimalToBinary>
100005b0:	e0bff815 	stw	r2,-32(fp)
100005b4:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
100005b8:	e0bffa17 	ldw	r2,-24(fp)
100005bc:	1009883a 	mov	r4,r2
100005c0:	000096c0 	call	1000096c <convertDecimalToBinary>
100005c4:	e0bffa15 	stw	r2,-24(fp)
100005c8:	e03ffb15 	stw	zero,-20(fp)

		printf("tempX: %lu   ", tempX);
100005cc:	01040074 	movhi	r4,4097
100005d0:	21068404 	addi	r4,r4,6672
100005d4:	e17ff417 	ldw	r5,-48(fp)
100005d8:	e1bff517 	ldw	r6,-44(fp)
100005dc:	0005ec00 	call	10005ec0 <printf>
		printf("tempY: %lu   ", tempY);
100005e0:	01040074 	movhi	r4,4097
100005e4:	21068804 	addi	r4,r4,6688
100005e8:	e17ff617 	ldw	r5,-40(fp)
100005ec:	e1bff717 	ldw	r6,-36(fp)
100005f0:	0005ec00 	call	10005ec0 <printf>
		printf("tempType: %lu   ", tempType);
100005f4:	01040074 	movhi	r4,4097
100005f8:	21068c04 	addi	r4,r4,6704
100005fc:	e17ff817 	ldw	r5,-32(fp)
10000600:	e1bff917 	ldw	r6,-28(fp)
10000604:	0005ec00 	call	10005ec0 <printf>
		printf("tempState: %lu   ", tempState);
10000608:	01040074 	movhi	r4,4097
1000060c:	21069104 	addi	r4,r4,6724
10000610:	e17ffa17 	ldw	r5,-24(fp)
10000614:	e1bffb17 	ldw	r6,-20(fp)
10000618:	0005ec00 	call	10005ec0 <printf>


		// now we append everything together!
		if (packageType == 0)	// this means we are packaging the cursor
1000061c:	e0bfeb17 	ldw	r2,-84(fp)
10000620:	1000161e 	bne	r2,zero,1000067c <messagePackager+0x2dc>
		{
			// location is important!
			tempBinary = tempX + tempY*1000000000;
10000624:	008ee6f4 	movhi	r2,15259
10000628:	10b28004 	addi	r2,r2,-13824
1000062c:	0007883a 	mov	r3,zero
10000630:	e13ff617 	ldw	r4,-40(fp)
10000634:	e17ff717 	ldw	r5,-36(fp)
10000638:	100d883a 	mov	r6,r2
1000063c:	180f883a 	mov	r7,r3
10000640:	00028700 	call	10002870 <__muldi3>
10000644:	1009883a 	mov	r4,r2
10000648:	180b883a 	mov	r5,r3
1000064c:	200d883a 	mov	r6,r4
10000650:	280f883a 	mov	r7,r5
10000654:	e13ff417 	ldw	r4,-48(fp)
10000658:	e17ff517 	ldw	r5,-44(fp)
1000065c:	3105883a 	add	r2,r6,r4
10000660:	1191803a 	cmpltu	r8,r2,r6
10000664:	3947883a 	add	r3,r7,r5
10000668:	40c9883a 	add	r4,r8,r3
1000066c:	2007883a 	mov	r3,r4
10000670:	e0bfe915 	stw	r2,-92(fp)
10000674:	e0ffea15 	stw	r3,-88(fp)
10000678:	00004006 	br	1000077c <messagePackager+0x3dc>
		}
		else	// this means we are packaging a fruit/bomb
		{
			// location not as important
			tempBinary = tempX + tempY*10000000 + tempType*10000000*10000000 + tempState*1000*10000000*10000000;
1000067c:	00802674 	movhi	r2,153
10000680:	10a5a004 	addi	r2,r2,-27008
10000684:	0007883a 	mov	r3,zero
10000688:	e13ff617 	ldw	r4,-40(fp)
1000068c:	e17ff717 	ldw	r5,-36(fp)
10000690:	100d883a 	mov	r6,r2
10000694:	180f883a 	mov	r7,r3
10000698:	00028700 	call	10002870 <__muldi3>
1000069c:	1009883a 	mov	r4,r2
100006a0:	180b883a 	mov	r5,r3
100006a4:	2021883a 	mov	r16,r4
100006a8:	2823883a 	mov	r17,r5
100006ac:	00841eb4 	movhi	r2,4218
100006b0:	10900004 	addi	r2,r2,16384
100006b4:	00d6bcc4 	movi	r3,23283
100006b8:	e13ff817 	ldw	r4,-32(fp)
100006bc:	e17ff917 	ldw	r5,-28(fp)
100006c0:	100d883a 	mov	r6,r2
100006c4:	180f883a 	mov	r7,r3
100006c8:	00028700 	call	10002870 <__muldi3>
100006cc:	100d883a 	mov	r6,r2
100006d0:	180f883a 	mov	r7,r3
100006d4:	3009883a 	mov	r4,r6
100006d8:	380b883a 	mov	r5,r7
100006dc:	8105883a 	add	r2,r16,r4
100006e0:	140d803a 	cmpltu	r6,r2,r16
100006e4:	8947883a 	add	r3,r17,r5
100006e8:	30c9883a 	add	r4,r6,r3
100006ec:	2007883a 	mov	r3,r4
100006f0:	100d883a 	mov	r6,r2
100006f4:	180f883a 	mov	r7,r3
100006f8:	e13ff417 	ldw	r4,-48(fp)
100006fc:	e17ff517 	ldw	r5,-44(fp)
10000700:	3105883a 	add	r2,r6,r4
10000704:	1191803a 	cmpltu	r8,r2,r6
10000708:	3947883a 	add	r3,r7,r5
1000070c:	40c9883a 	add	r4,r8,r3
10000710:	2007883a 	mov	r3,r4
10000714:	1021883a 	mov	r16,r2
10000718:	1823883a 	mov	r17,r3
1000071c:	009762b4 	movhi	r2,23946
10000720:	00c058f4 	movhi	r3,355
10000724:	18d15e04 	addi	r3,r3,17784
10000728:	e13ffa17 	ldw	r4,-24(fp)
1000072c:	e17ffb17 	ldw	r5,-20(fp)
10000730:	100d883a 	mov	r6,r2
10000734:	180f883a 	mov	r7,r3
10000738:	00028700 	call	10002870 <__muldi3>
1000073c:	100d883a 	mov	r6,r2
10000740:	180f883a 	mov	r7,r3
10000744:	3009883a 	mov	r4,r6
10000748:	380b883a 	mov	r5,r7
1000074c:	8105883a 	add	r2,r16,r4
10000750:	140d803a 	cmpltu	r6,r2,r16
10000754:	8947883a 	add	r3,r17,r5
10000758:	30c9883a 	add	r4,r6,r3
1000075c:	2007883a 	mov	r3,r4
10000760:	e0bfe915 	stw	r2,-92(fp)
10000764:	e0ffea15 	stw	r3,-88(fp)
			printf("tempBinary: %llu   ", tempBinary);
10000768:	01040074 	movhi	r4,4097
1000076c:	21069604 	addi	r4,r4,6744
10000770:	e17fe917 	ldw	r5,-92(fp)
10000774:	e1bfea17 	ldw	r6,-88(fp)
10000778:	0005ec00 	call	10005ec0 <printf>
		}
	}

	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
1000077c:	e13fe917 	ldw	r4,-92(fp)
10000780:	e17fea17 	ldw	r5,-88(fp)
10000784:	0000a4c0 	call	10000a4c <convertBinaryToDecimal>
10000788:	e0bffc15 	stw	r2,-16(fp)
1000078c:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
10000790:	e0bffc17 	ldw	r2,-16(fp)
}
10000794:	e6fffe04 	addi	sp,fp,-8
10000798:	dfc00317 	ldw	ra,12(sp)
1000079c:	df000217 	ldw	fp,8(sp)
100007a0:	dc400117 	ldw	r17,4(sp)
100007a4:	dc000017 	ldw	r16,0(sp)
100007a8:	dec00804 	addi	sp,sp,32
100007ac:	f800283a 	ret

100007b0 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator(unsigned long* FPGAmessage)
{
100007b0:	defffd04 	addi	sp,sp,-12
100007b4:	dfc00215 	stw	ra,8(sp)
100007b8:	df000115 	stw	fp,4(sp)
100007bc:	df000104 	addi	fp,sp,4
100007c0:	e13fff15 	stw	r4,-4(fp)
	*to_hw_sig = 2;	// 2 means we're starting communication
100007c4:	00801c04 	movi	r2,112
100007c8:	00c00084 	movi	r3,2
100007cc:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = 1;
100007d0:	00804004 	movi	r2,256
100007d4:	00c00044 	movi	r3,1
100007d8:	10c00005 	stb	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
100007dc:	00803c04 	movi	r2,240
100007e0:	e0ffff17 	ldw	r3,-4(fp)
100007e4:	18c00104 	addi	r3,r3,4
100007e8:	18c00017 	ldw	r3,0(r3)
100007ec:	10c00005 	stb	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
100007f0:	00803804 	movi	r2,224
100007f4:	e0ffff17 	ldw	r3,-4(fp)
100007f8:	18c00204 	addi	r3,r3,8
100007fc:	18c00017 	ldw	r3,0(r3)
10000800:	10c00005 	stb	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10000804:	00803404 	movi	r2,208
10000808:	e0ffff17 	ldw	r3,-4(fp)
1000080c:	18c00304 	addi	r3,r3,12
10000810:	18c00017 	ldw	r3,0(r3)
10000814:	10c00005 	stb	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10000818:	00803004 	movi	r2,192
1000081c:	e0ffff17 	ldw	r3,-4(fp)
10000820:	18c00404 	addi	r3,r3,16
10000824:	18c00017 	ldw	r3,0(r3)
10000828:	10c00005 	stb	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
1000082c:	00802c04 	movi	r2,176
10000830:	e0ffff17 	ldw	r3,-4(fp)
10000834:	18c00504 	addi	r3,r3,20
10000838:	18c00017 	ldw	r3,0(r3)
1000083c:	10c00005 	stb	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10000840:	00802804 	movi	r2,160
10000844:	e0ffff17 	ldw	r3,-4(fp)
10000848:	18c00604 	addi	r3,r3,24
1000084c:	18c00017 	ldw	r3,0(r3)
10000850:	10c00005 	stb	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10000854:	00801804 	movi	r2,96
10000858:	e0ffff17 	ldw	r3,-4(fp)
1000085c:	18c00704 	addi	r3,r3,28
10000860:	18c00017 	ldw	r3,0(r3)
10000864:	10c00005 	stb	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10000868:	00802404 	movi	r2,144
1000086c:	e0ffff17 	ldw	r3,-4(fp)
10000870:	18c00804 	addi	r3,r3,32
10000874:	18c00017 	ldw	r3,0(r3)
10000878:	10c00005 	stb	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
1000087c:	00802004 	movi	r2,128
10000880:	e0ffff17 	ldw	r3,-4(fp)
10000884:	18c00904 	addi	r3,r3,36
10000888:	18c00017 	ldw	r3,0(r3)
1000088c:	10c00005 	stb	r3,0(r2)
	*to_hw_port10 = FPGAmessage[10];
10000890:	00801004 	movi	r2,64
10000894:	e0ffff17 	ldw	r3,-4(fp)
10000898:	18c00a04 	addi	r3,r3,40
1000089c:	18c00017 	ldw	r3,0(r3)
100008a0:	10c00005 	stb	r3,0(r2)
	*to_hw_port11 = FPGAmessage[11];
100008a4:	00800c04 	movi	r2,48
100008a8:	e0ffff17 	ldw	r3,-4(fp)
100008ac:	18c00b04 	addi	r3,r3,44
100008b0:	18c00017 	ldw	r3,0(r3)
100008b4:	10c00005 	stb	r3,0(r2)
	*to_hw_port12 = FPGAmessage[12];
100008b8:	00800804 	movi	r2,32
100008bc:	e0ffff17 	ldw	r3,-4(fp)
100008c0:	18c00c04 	addi	r3,r3,48
100008c4:	18c00017 	ldw	r3,0(r3)
100008c8:	10c00005 	stb	r3,0(r2)
	printf("FPGAmessage 0 is %llu \n", FPGAmessage[0]);
100008cc:	e0bfff17 	ldw	r2,-4(fp)
100008d0:	10800017 	ldw	r2,0(r2)
100008d4:	01040074 	movhi	r4,4097
100008d8:	21069b04 	addi	r4,r4,6764
100008dc:	100b883a 	mov	r5,r2
100008e0:	0005ec00 	call	10005ec0 <printf>

	printf("got past putting it in\n");
100008e4:	01040074 	movhi	r4,4097
100008e8:	2106a104 	addi	r4,r4,6788
100008ec:	0005fb40 	call	10005fb4 <puts>

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
100008f0:	0001883a 	nop
100008f4:	00801404 	movi	r2,80
100008f8:	10800003 	ldbu	r2,0(r2)
100008fc:	10803fcc 	andi	r2,r2,255
10000900:	1080201c 	xori	r2,r2,128
10000904:	10bfe004 	addi	r2,r2,-128
10000908:	10800098 	cmpnei	r2,r2,2
1000090c:	103ff91e 	bne	r2,zero,100008f4 <__alt_data_end+0xf80008f4>

	*to_hw_sig = 1;		// now we are done putting in messages
10000910:	00801c04 	movi	r2,112
10000914:	00c00044 	movi	r3,1
10000918:	10c00005 	stb	r3,0(r2)

	printf("almost done\n");
1000091c:	01040074 	movhi	r4,4097
10000920:	2106a704 	addi	r4,r4,6812
10000924:	0005fb40 	call	10005fb4 <puts>

	while(*to_sw_sig != 0); // wait for response from hardware
10000928:	0001883a 	nop
1000092c:	00801404 	movi	r2,80
10000930:	10800003 	ldbu	r2,0(r2)
10000934:	10803fcc 	andi	r2,r2,255
10000938:	1080201c 	xori	r2,r2,128
1000093c:	10bfe004 	addi	r2,r2,-128
10000940:	103ffa1e 	bne	r2,zero,1000092c <__alt_data_end+0xf800092c>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000944:	00801c04 	movi	r2,112
10000948:	10000005 	stb	zero,0(r2)

	printf("message stuff done\n");
1000094c:	01040074 	movhi	r4,4097
10000950:	2106aa04 	addi	r4,r4,6824
10000954:	0005fb40 	call	10005fb4 <puts>
}
10000958:	e037883a 	mov	sp,fp
1000095c:	dfc00117 	ldw	ra,4(sp)
10000960:	df000017 	ldw	fp,0(sp)
10000964:	dec00204 	addi	sp,sp,8
10000968:	f800283a 	ret

1000096c <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
1000096c:	defff704 	addi	sp,sp,-36
10000970:	dfc00815 	stw	ra,32(sp)
10000974:	df000715 	stw	fp,28(sp)
10000978:	dc400615 	stw	r17,24(sp)
1000097c:	dc000515 	stw	r16,20(sp)
10000980:	df000704 	addi	fp,sp,28
10000984:	e13ffd15 	stw	r4,-12(fp)
	printf("decimal input: %lu   ", n);
10000988:	01040074 	movhi	r4,4097
1000098c:	2106af04 	addi	r4,r4,6844
10000990:	e17ffd17 	ldw	r5,-12(fp)
10000994:	0005ec00 	call	10005ec0 <printf>
    long long binaryNumber = 0;
10000998:	e03ff915 	stw	zero,-28(fp)
1000099c:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
100009a0:	00800044 	movi	r2,1
100009a4:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
100009a8:	00001906 	br	10000a10 <convertDecimalToBinary+0xa4>
    {
        remainder = n%2;
100009ac:	e0bffd17 	ldw	r2,-12(fp)
100009b0:	1080004c 	andi	r2,r2,1
100009b4:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
100009b8:	e0bffd17 	ldw	r2,-12(fp)
100009bc:	1004d07a 	srli	r2,r2,1
100009c0:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
100009c4:	e13ffc17 	ldw	r4,-16(fp)
100009c8:	e17ffb17 	ldw	r5,-20(fp)
100009cc:	00037040 	call	10003704 <__mulsi3>
100009d0:	1021883a 	mov	r16,r2
100009d4:	1005d7fa 	srai	r2,r2,31
100009d8:	1023883a 	mov	r17,r2
100009dc:	e13ff917 	ldw	r4,-28(fp)
100009e0:	e17ffa17 	ldw	r5,-24(fp)
100009e4:	2405883a 	add	r2,r4,r16
100009e8:	110d803a 	cmpltu	r6,r2,r4
100009ec:	2c47883a 	add	r3,r5,r17
100009f0:	30c9883a 	add	r4,r6,r3
100009f4:	2007883a 	mov	r3,r4
100009f8:	e0bff915 	stw	r2,-28(fp)
100009fc:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
10000a00:	e13ffb17 	ldw	r4,-20(fp)
10000a04:	01400284 	movi	r5,10
10000a08:	00037040 	call	10003704 <__mulsi3>
10000a0c:	e0bffb15 	stw	r2,-20(fp)
{
	printf("decimal input: %lu   ", n);
    long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
10000a10:	e0bffd17 	ldw	r2,-12(fp)
10000a14:	103fe51e 	bne	r2,zero,100009ac <__alt_data_end+0xf80009ac>
        remainder = n%2;
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
    printf("binary ouput: %lu \n", binaryNumber);
10000a18:	01040074 	movhi	r4,4097
10000a1c:	2106b504 	addi	r4,r4,6868
10000a20:	e17ff917 	ldw	r5,-28(fp)
10000a24:	e1bffa17 	ldw	r6,-24(fp)
10000a28:	0005ec00 	call	10005ec0 <printf>
    return binaryNumber;
10000a2c:	e0bff917 	ldw	r2,-28(fp)
}
10000a30:	e6fffe04 	addi	sp,fp,-8
10000a34:	dfc00317 	ldw	ra,12(sp)
10000a38:	df000217 	ldw	fp,8(sp)
10000a3c:	dc400117 	ldw	r17,4(sp)
10000a40:	dc000017 	ldw	r16,0(sp)
10000a44:	dec00404 	addi	sp,sp,16
10000a48:	f800283a 	ret

10000a4c <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10000a4c:	defff704 	addi	sp,sp,-36
10000a50:	dfc00815 	stw	ra,32(sp)
10000a54:	df000715 	stw	fp,28(sp)
10000a58:	dc400615 	stw	r17,24(sp)
10000a5c:	dc000515 	stw	r16,20(sp)
10000a60:	df000704 	addi	fp,sp,28
10000a64:	e13ffc15 	stw	r4,-16(fp)
10000a68:	e17ffd15 	stw	r5,-12(fp)
	printf("binary input: %llu   ", n);
10000a6c:	01040074 	movhi	r4,4097
10000a70:	2106ba04 	addi	r4,r4,6888
10000a74:	e17ffc17 	ldw	r5,-16(fp)
10000a78:	e1bffd17 	ldw	r6,-12(fp)
10000a7c:	0005ec00 	call	10005ec0 <printf>
    int decimalNumber = 0, i = 0, remainder;
10000a80:	e03ff915 	stw	zero,-28(fp)
10000a84:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
10000a88:	00004706 	br	10000ba8 <convertBinaryToDecimal+0x15c>
    {
        remainder = n%10;
10000a8c:	e0bffc17 	ldw	r2,-16(fp)
10000a90:	e0fffd17 	ldw	r3,-12(fp)
10000a94:	01c00284 	movi	r7,10
10000a98:	0011883a 	mov	r8,zero
10000a9c:	1009883a 	mov	r4,r2
10000aa0:	180b883a 	mov	r5,r3
10000aa4:	380d883a 	mov	r6,r7
10000aa8:	400f883a 	mov	r7,r8
10000aac:	0002fbc0 	call	10002fbc <__umoddi3>
10000ab0:	1009883a 	mov	r4,r2
10000ab4:	180b883a 	mov	r5,r3
10000ab8:	2005883a 	mov	r2,r4
10000abc:	2807883a 	mov	r3,r5
10000ac0:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
10000ac4:	e0bffc17 	ldw	r2,-16(fp)
10000ac8:	e0fffd17 	ldw	r3,-12(fp)
10000acc:	01c00284 	movi	r7,10
10000ad0:	0011883a 	mov	r8,zero
10000ad4:	1009883a 	mov	r4,r2
10000ad8:	180b883a 	mov	r5,r3
10000adc:	380d883a 	mov	r6,r7
10000ae0:	400f883a 	mov	r7,r8
10000ae4:	000297c0 	call	1000297c <__udivdi3>
10000ae8:	1009883a 	mov	r4,r2
10000aec:	180b883a 	mov	r5,r3
10000af0:	e13ffc15 	stw	r4,-16(fp)
10000af4:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
10000af8:	e13ffb17 	ldw	r4,-20(fp)
10000afc:	0005d500 	call	10005d50 <__floatsidf>
10000b00:	1021883a 	mov	r16,r2
10000b04:	1823883a 	mov	r17,r3
10000b08:	e13ffa17 	ldw	r4,-24(fp)
10000b0c:	0005d500 	call	10005d50 <__floatsidf>
10000b10:	100f883a 	mov	r7,r2
10000b14:	1811883a 	mov	r8,r3
10000b18:	0009883a 	mov	r4,zero
10000b1c:	01500034 	movhi	r5,16384
10000b20:	380d883a 	mov	r6,r7
10000b24:	400f883a 	mov	r7,r8
10000b28:	0000be80 	call	10000be8 <pow>
10000b2c:	100f883a 	mov	r7,r2
10000b30:	1811883a 	mov	r8,r3
10000b34:	8009883a 	mov	r4,r16
10000b38:	880b883a 	mov	r5,r17
10000b3c:	380d883a 	mov	r6,r7
10000b40:	400f883a 	mov	r7,r8
10000b44:	0004b8c0 	call	10004b8c <__muldf3>
10000b48:	1009883a 	mov	r4,r2
10000b4c:	180b883a 	mov	r5,r3
10000b50:	2021883a 	mov	r16,r4
10000b54:	2823883a 	mov	r17,r5
10000b58:	e13ff917 	ldw	r4,-28(fp)
10000b5c:	0005d500 	call	10005d50 <__floatsidf>
10000b60:	100b883a 	mov	r5,r2
10000b64:	180d883a 	mov	r6,r3
10000b68:	2809883a 	mov	r4,r5
10000b6c:	300b883a 	mov	r5,r6
10000b70:	800d883a 	mov	r6,r16
10000b74:	880f883a 	mov	r7,r17
10000b78:	000372c0 	call	1000372c <__adddf3>
10000b7c:	1009883a 	mov	r4,r2
10000b80:	180b883a 	mov	r5,r3
10000b84:	2005883a 	mov	r2,r4
10000b88:	2807883a 	mov	r3,r5
10000b8c:	1009883a 	mov	r4,r2
10000b90:	180b883a 	mov	r5,r3
10000b94:	0005cc80 	call	10005cc8 <__fixdfsi>
10000b98:	e0bff915 	stw	r2,-28(fp)
        ++i;
10000b9c:	e0bffa17 	ldw	r2,-24(fp)
10000ba0:	10800044 	addi	r2,r2,1
10000ba4:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
	printf("binary input: %llu   ", n);
    int decimalNumber = 0, i = 0, remainder;
    while (n!=0)
10000ba8:	e0bffc17 	ldw	r2,-16(fp)
10000bac:	e0fffd17 	ldw	r3,-12(fp)
10000bb0:	10c4b03a 	or	r2,r2,r3
10000bb4:	103fb51e 	bne	r2,zero,10000a8c <__alt_data_end+0xf8000a8c>
        remainder = n%10;
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
    printf("decimal output: %lu\n", decimalNumber);
10000bb8:	01040074 	movhi	r4,4097
10000bbc:	2106c004 	addi	r4,r4,6912
10000bc0:	e17ff917 	ldw	r5,-28(fp)
10000bc4:	0005ec00 	call	10005ec0 <printf>
    return decimalNumber;
10000bc8:	e0bff917 	ldw	r2,-28(fp)
}
10000bcc:	e6fffe04 	addi	sp,fp,-8
10000bd0:	dfc00317 	ldw	ra,12(sp)
10000bd4:	df000217 	ldw	fp,8(sp)
10000bd8:	dc400117 	ldw	r17,4(sp)
10000bdc:	dc000017 	ldw	r16,0(sp)
10000be0:	dec00404 	addi	sp,sp,16
10000be4:	f800283a 	ret

10000be8 <pow>:
10000be8:	deffee04 	addi	sp,sp,-72
10000bec:	dc800b15 	stw	r18,44(sp)
10000bf0:	04840074 	movhi	r18,4097
10000bf4:	ddc01015 	stw	r23,64(sp)
10000bf8:	dd800f15 	stw	r22,60(sp)
10000bfc:	dd400e15 	stw	r21,56(sp)
10000c00:	dd000d15 	stw	r20,52(sp)
10000c04:	dcc00c15 	stw	r19,48(sp)
10000c08:	dc400a15 	stw	r17,40(sp)
10000c0c:	dc000915 	stw	r16,36(sp)
10000c10:	dfc01115 	stw	ra,68(sp)
10000c14:	948e4204 	addi	r18,r18,14600
10000c18:	202f883a 	mov	r23,r4
10000c1c:	282d883a 	mov	r22,r5
10000c20:	302b883a 	mov	r21,r6
10000c24:	3829883a 	mov	r20,r7
10000c28:	000108c0 	call	1000108c <__ieee754_pow>
10000c2c:	1023883a 	mov	r17,r2
10000c30:	90800017 	ldw	r2,0(r18)
10000c34:	04ffffc4 	movi	r19,-1
10000c38:	1821883a 	mov	r16,r3
10000c3c:	14c00426 	beq	r2,r19,10000c50 <pow+0x68>
10000c40:	a809883a 	mov	r4,r21
10000c44:	a00b883a 	mov	r5,r20
10000c48:	000241c0 	call	1000241c <__fpclassifyd>
10000c4c:	10000d1e 	bne	r2,zero,10000c84 <pow+0x9c>
10000c50:	8805883a 	mov	r2,r17
10000c54:	8007883a 	mov	r3,r16
10000c58:	dfc01117 	ldw	ra,68(sp)
10000c5c:	ddc01017 	ldw	r23,64(sp)
10000c60:	dd800f17 	ldw	r22,60(sp)
10000c64:	dd400e17 	ldw	r21,56(sp)
10000c68:	dd000d17 	ldw	r20,52(sp)
10000c6c:	dcc00c17 	ldw	r19,48(sp)
10000c70:	dc800b17 	ldw	r18,44(sp)
10000c74:	dc400a17 	ldw	r17,40(sp)
10000c78:	dc000917 	ldw	r16,36(sp)
10000c7c:	dec01204 	addi	sp,sp,72
10000c80:	f800283a 	ret
10000c84:	b809883a 	mov	r4,r23
10000c88:	b00b883a 	mov	r5,r22
10000c8c:	000241c0 	call	1000241c <__fpclassifyd>
10000c90:	1000221e 	bne	r2,zero,10000d1c <pow+0x134>
10000c94:	a809883a 	mov	r4,r21
10000c98:	a00b883a 	mov	r5,r20
10000c9c:	000d883a 	mov	r6,zero
10000ca0:	000f883a 	mov	r7,zero
10000ca4:	00049480 	call	10004948 <__eqdf2>
10000ca8:	103fe91e 	bne	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000cac:	00c00044 	movi	r3,1
10000cb0:	d8c00015 	stw	r3,0(sp)
10000cb4:	00c40074 	movhi	r3,4097
10000cb8:	18c6c604 	addi	r3,r3,6936
10000cbc:	90800017 	ldw	r2,0(r18)
10000cc0:	d8c00115 	stw	r3,4(sp)
10000cc4:	00cffc34 	movhi	r3,16368
10000cc8:	d8000815 	stw	zero,32(sp)
10000ccc:	ddc00215 	stw	r23,8(sp)
10000cd0:	dd800315 	stw	r22,12(sp)
10000cd4:	dd400415 	stw	r21,16(sp)
10000cd8:	dd000515 	stw	r20,20(sp)
10000cdc:	d8000615 	stw	zero,24(sp)
10000ce0:	d8c00715 	stw	r3,28(sp)
10000ce4:	14c00a26 	beq	r2,r19,10000d10 <pow+0x128>
10000ce8:	00c00084 	movi	r3,2
10000cec:	10c00826 	beq	r2,r3,10000d10 <pow+0x128>
10000cf0:	d809883a 	mov	r4,sp
10000cf4:	00024900 	call	10002490 <matherr>
10000cf8:	10006b26 	beq	r2,zero,10000ea8 <pow+0x2c0>
10000cfc:	d8800817 	ldw	r2,32(sp)
10000d00:	10000326 	beq	r2,zero,10000d10 <pow+0x128>
10000d04:	0005e840 	call	10005e84 <__errno>
10000d08:	d8c00817 	ldw	r3,32(sp)
10000d0c:	10c00015 	stw	r3,0(r2)
10000d10:	d8800617 	ldw	r2,24(sp)
10000d14:	d8c00717 	ldw	r3,28(sp)
10000d18:	003fcf06 	br	10000c58 <__alt_data_end+0xf8000c58>
10000d1c:	b809883a 	mov	r4,r23
10000d20:	b00b883a 	mov	r5,r22
10000d24:	000d883a 	mov	r6,zero
10000d28:	000f883a 	mov	r7,zero
10000d2c:	00049480 	call	10004948 <__eqdf2>
10000d30:	1000171e 	bne	r2,zero,10000d90 <pow+0x1a8>
10000d34:	a809883a 	mov	r4,r21
10000d38:	a00b883a 	mov	r5,r20
10000d3c:	000d883a 	mov	r6,zero
10000d40:	000f883a 	mov	r7,zero
10000d44:	00049480 	call	10004948 <__eqdf2>
10000d48:	1000381e 	bne	r2,zero,10000e2c <pow+0x244>
10000d4c:	00c00044 	movi	r3,1
10000d50:	d8c00015 	stw	r3,0(sp)
10000d54:	90800017 	ldw	r2,0(r18)
10000d58:	00c40074 	movhi	r3,4097
10000d5c:	18c6c604 	addi	r3,r3,6936
10000d60:	d8c00115 	stw	r3,4(sp)
10000d64:	d8000815 	stw	zero,32(sp)
10000d68:	ddc00215 	stw	r23,8(sp)
10000d6c:	dd800315 	stw	r22,12(sp)
10000d70:	dd400415 	stw	r21,16(sp)
10000d74:	dd000515 	stw	r20,20(sp)
10000d78:	d8000615 	stw	zero,24(sp)
10000d7c:	d8000715 	stw	zero,28(sp)
10000d80:	103fdb26 	beq	r2,zero,10000cf0 <__alt_data_end+0xf8000cf0>
10000d84:	008ffc34 	movhi	r2,16368
10000d88:	d8800715 	stw	r2,28(sp)
10000d8c:	003fe006 	br	10000d10 <__alt_data_end+0xf8000d10>
10000d90:	8809883a 	mov	r4,r17
10000d94:	800b883a 	mov	r5,r16
10000d98:	00024000 	call	10002400 <finite>
10000d9c:	10004626 	beq	r2,zero,10000eb8 <pow+0x2d0>
10000da0:	8809883a 	mov	r4,r17
10000da4:	800b883a 	mov	r5,r16
10000da8:	000d883a 	mov	r6,zero
10000dac:	000f883a 	mov	r7,zero
10000db0:	00049480 	call	10004948 <__eqdf2>
10000db4:	103fa61e 	bne	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000db8:	b809883a 	mov	r4,r23
10000dbc:	b00b883a 	mov	r5,r22
10000dc0:	00024000 	call	10002400 <finite>
10000dc4:	103fa226 	beq	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000dc8:	a809883a 	mov	r4,r21
10000dcc:	a00b883a 	mov	r5,r20
10000dd0:	00024000 	call	10002400 <finite>
10000dd4:	103f9e26 	beq	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000dd8:	00800104 	movi	r2,4
10000ddc:	d8800015 	stw	r2,0(sp)
10000de0:	90c00017 	ldw	r3,0(r18)
10000de4:	00840074 	movhi	r2,4097
10000de8:	1086c604 	addi	r2,r2,6936
10000dec:	d8800115 	stw	r2,4(sp)
10000df0:	d8000815 	stw	zero,32(sp)
10000df4:	ddc00215 	stw	r23,8(sp)
10000df8:	dd800315 	stw	r22,12(sp)
10000dfc:	dd400415 	stw	r21,16(sp)
10000e00:	dd000515 	stw	r20,20(sp)
10000e04:	d8000615 	stw	zero,24(sp)
10000e08:	d8000715 	stw	zero,28(sp)
10000e0c:	00800084 	movi	r2,2
10000e10:	18806126 	beq	r3,r2,10000f98 <pow+0x3b0>
10000e14:	d809883a 	mov	r4,sp
10000e18:	00024900 	call	10002490 <matherr>
10000e1c:	10005e26 	beq	r2,zero,10000f98 <pow+0x3b0>
10000e20:	d8800817 	ldw	r2,32(sp)
10000e24:	103fba26 	beq	r2,zero,10000d10 <__alt_data_end+0xf8000d10>
10000e28:	003fb606 	br	10000d04 <__alt_data_end+0xf8000d04>
10000e2c:	a809883a 	mov	r4,r21
10000e30:	a00b883a 	mov	r5,r20
10000e34:	00024000 	call	10002400 <finite>
10000e38:	103f8526 	beq	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000e3c:	a809883a 	mov	r4,r21
10000e40:	a00b883a 	mov	r5,r20
10000e44:	000d883a 	mov	r6,zero
10000e48:	000f883a 	mov	r7,zero
10000e4c:	0004aac0 	call	10004aac <__ledf2>
10000e50:	103f7f0e 	bge	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000e54:	00c00044 	movi	r3,1
10000e58:	d8c00015 	stw	r3,0(sp)
10000e5c:	90800017 	ldw	r2,0(r18)
10000e60:	00c40074 	movhi	r3,4097
10000e64:	18c6c604 	addi	r3,r3,6936
10000e68:	d8c00115 	stw	r3,4(sp)
10000e6c:	d8000815 	stw	zero,32(sp)
10000e70:	ddc00215 	stw	r23,8(sp)
10000e74:	dd800315 	stw	r22,12(sp)
10000e78:	dd400415 	stw	r21,16(sp)
10000e7c:	dd000515 	stw	r20,20(sp)
10000e80:	d8000615 	stw	zero,24(sp)
10000e84:	10002526 	beq	r2,zero,10000f1c <pow+0x334>
10000e88:	00fffc34 	movhi	r3,65520
10000e8c:	d8c00715 	stw	r3,28(sp)
10000e90:	00c00084 	movi	r3,2
10000e94:	10c0221e 	bne	r2,r3,10000f20 <pow+0x338>
10000e98:	0005e840 	call	10005e84 <__errno>
10000e9c:	00c00844 	movi	r3,33
10000ea0:	10c00015 	stw	r3,0(r2)
10000ea4:	003fde06 	br	10000e20 <__alt_data_end+0xf8000e20>
10000ea8:	0005e840 	call	10005e84 <__errno>
10000eac:	00c00844 	movi	r3,33
10000eb0:	10c00015 	stw	r3,0(r2)
10000eb4:	003f9106 	br	10000cfc <__alt_data_end+0xf8000cfc>
10000eb8:	b809883a 	mov	r4,r23
10000ebc:	b00b883a 	mov	r5,r22
10000ec0:	00024000 	call	10002400 <finite>
10000ec4:	103fb626 	beq	r2,zero,10000da0 <__alt_data_end+0xf8000da0>
10000ec8:	a809883a 	mov	r4,r21
10000ecc:	a00b883a 	mov	r5,r20
10000ed0:	00024000 	call	10002400 <finite>
10000ed4:	103fb226 	beq	r2,zero,10000da0 <__alt_data_end+0xf8000da0>
10000ed8:	8809883a 	mov	r4,r17
10000edc:	800b883a 	mov	r5,r16
10000ee0:	000241c0 	call	1000241c <__fpclassifyd>
10000ee4:	1000121e 	bne	r2,zero,10000f30 <pow+0x348>
10000ee8:	00800044 	movi	r2,1
10000eec:	d8800015 	stw	r2,0(sp)
10000ef0:	94000017 	ldw	r16,0(r18)
10000ef4:	00840074 	movhi	r2,4097
10000ef8:	1086c604 	addi	r2,r2,6936
10000efc:	d8800115 	stw	r2,4(sp)
10000f00:	d8000815 	stw	zero,32(sp)
10000f04:	ddc00215 	stw	r23,8(sp)
10000f08:	dd800315 	stw	r22,12(sp)
10000f0c:	dd400415 	stw	r21,16(sp)
10000f10:	dd000515 	stw	r20,20(sp)
10000f14:	8000241e 	bne	r16,zero,10000fa8 <pow+0x3c0>
10000f18:	d8000615 	stw	zero,24(sp)
10000f1c:	d8000715 	stw	zero,28(sp)
10000f20:	d809883a 	mov	r4,sp
10000f24:	00024900 	call	10002490 <matherr>
10000f28:	103fbd1e 	bne	r2,zero,10000e20 <__alt_data_end+0xf8000e20>
10000f2c:	003fda06 	br	10000e98 <__alt_data_end+0xf8000e98>
10000f30:	00c000c4 	movi	r3,3
10000f34:	d8c00015 	stw	r3,0(sp)
10000f38:	90800017 	ldw	r2,0(r18)
10000f3c:	00c40074 	movhi	r3,4097
10000f40:	18c6c604 	addi	r3,r3,6936
10000f44:	d8c00115 	stw	r3,4(sp)
10000f48:	d8000815 	stw	zero,32(sp)
10000f4c:	ddc00215 	stw	r23,8(sp)
10000f50:	dd800315 	stw	r22,12(sp)
10000f54:	dd400415 	stw	r21,16(sp)
10000f58:	dd000515 	stw	r20,20(sp)
10000f5c:	b809883a 	mov	r4,r23
10000f60:	b00b883a 	mov	r5,r22
10000f64:	000d883a 	mov	r6,zero
10000f68:	000f883a 	mov	r7,zero
10000f6c:	1000181e 	bne	r2,zero,10000fd0 <pow+0x3e8>
10000f70:	00b80034 	movhi	r2,57344
10000f74:	d8800615 	stw	r2,24(sp)
10000f78:	0091fc34 	movhi	r2,18416
10000f7c:	10bfffc4 	addi	r2,r2,-1
10000f80:	d8800715 	stw	r2,28(sp)
10000f84:	0004aac0 	call	10004aac <__ledf2>
10000f88:	10002a16 	blt	r2,zero,10001034 <pow+0x44c>
10000f8c:	90c00017 	ldw	r3,0(r18)
10000f90:	00800084 	movi	r2,2
10000f94:	18bf9f1e 	bne	r3,r2,10000e14 <__alt_data_end+0xf8000e14>
10000f98:	0005e840 	call	10005e84 <__errno>
10000f9c:	00c00884 	movi	r3,34
10000fa0:	10c00015 	stw	r3,0(r2)
10000fa4:	003f9e06 	br	10000e20 <__alt_data_end+0xf8000e20>
10000fa8:	0009883a 	mov	r4,zero
10000fac:	000b883a 	mov	r5,zero
10000fb0:	000d883a 	mov	r6,zero
10000fb4:	000f883a 	mov	r7,zero
10000fb8:	0003fc80 	call	10003fc8 <__divdf3>
10000fbc:	d8800615 	stw	r2,24(sp)
10000fc0:	d8c00715 	stw	r3,28(sp)
10000fc4:	00800084 	movi	r2,2
10000fc8:	80bfb326 	beq	r16,r2,10000e98 <__alt_data_end+0xf8000e98>
10000fcc:	003fd406 	br	10000f20 <__alt_data_end+0xf8000f20>
10000fd0:	009ffc34 	movhi	r2,32752
10000fd4:	d8000615 	stw	zero,24(sp)
10000fd8:	d8800715 	stw	r2,28(sp)
10000fdc:	0004aac0 	call	10004aac <__ledf2>
10000fe0:	103fea0e 	bge	r2,zero,10000f8c <__alt_data_end+0xf8000f8c>
10000fe4:	000d883a 	mov	r6,zero
10000fe8:	01cff834 	movhi	r7,16352
10000fec:	a809883a 	mov	r4,r21
10000ff0:	a00b883a 	mov	r5,r20
10000ff4:	0004b8c0 	call	10004b8c <__muldf3>
10000ff8:	1009883a 	mov	r4,r2
10000ffc:	180b883a 	mov	r5,r3
10001000:	1023883a 	mov	r17,r2
10001004:	1821883a 	mov	r16,r3
10001008:	00024a40 	call	100024a4 <rint>
1000100c:	1009883a 	mov	r4,r2
10001010:	180b883a 	mov	r5,r3
10001014:	880d883a 	mov	r6,r17
10001018:	800f883a 	mov	r7,r16
1000101c:	00049480 	call	10004948 <__eqdf2>
10001020:	103fda26 	beq	r2,zero,10000f8c <__alt_data_end+0xf8000f8c>
10001024:	00bffc34 	movhi	r2,65520
10001028:	d8000615 	stw	zero,24(sp)
1000102c:	d8800715 	stw	r2,28(sp)
10001030:	003fd606 	br	10000f8c <__alt_data_end+0xf8000f8c>
10001034:	000d883a 	mov	r6,zero
10001038:	01cff834 	movhi	r7,16352
1000103c:	a809883a 	mov	r4,r21
10001040:	a00b883a 	mov	r5,r20
10001044:	0004b8c0 	call	10004b8c <__muldf3>
10001048:	1009883a 	mov	r4,r2
1000104c:	180b883a 	mov	r5,r3
10001050:	1023883a 	mov	r17,r2
10001054:	1821883a 	mov	r16,r3
10001058:	00024a40 	call	100024a4 <rint>
1000105c:	1009883a 	mov	r4,r2
10001060:	180b883a 	mov	r5,r3
10001064:	880d883a 	mov	r6,r17
10001068:	800f883a 	mov	r7,r16
1000106c:	00049480 	call	10004948 <__eqdf2>
10001070:	103fc626 	beq	r2,zero,10000f8c <__alt_data_end+0xf8000f8c>
10001074:	00b80034 	movhi	r2,57344
10001078:	d8800615 	stw	r2,24(sp)
1000107c:	00b1fc34 	movhi	r2,51184
10001080:	10bfffc4 	addi	r2,r2,-1
10001084:	d8800715 	stw	r2,28(sp)
10001088:	003fc006 	br	10000f8c <__alt_data_end+0xf8000f8c>

1000108c <__ieee754_pow>:
1000108c:	00a00034 	movhi	r2,32768
10001090:	deffec04 	addi	sp,sp,-80
10001094:	10bfffc4 	addi	r2,r2,-1
10001098:	dc400b15 	stw	r17,44(sp)
1000109c:	38a2703a 	and	r17,r7,r2
100010a0:	dfc01315 	stw	ra,76(sp)
100010a4:	df001215 	stw	fp,72(sp)
100010a8:	ddc01115 	stw	r23,68(sp)
100010ac:	dd801015 	stw	r22,64(sp)
100010b0:	dd400f15 	stw	r21,60(sp)
100010b4:	dd000e15 	stw	r20,56(sp)
100010b8:	dcc00d15 	stw	r19,52(sp)
100010bc:	dc800c15 	stw	r18,48(sp)
100010c0:	dc000a15 	stw	r16,40(sp)
100010c4:	8986b03a 	or	r3,r17,r6
100010c8:	18002a26 	beq	r3,zero,10001174 <__ieee754_pow+0xe8>
100010cc:	28a4703a 	and	r18,r5,r2
100010d0:	009ffc34 	movhi	r2,32752
100010d4:	14802316 	blt	r2,r18,10001164 <__ieee754_pow+0xd8>
100010d8:	90802126 	beq	r18,r2,10001160 <__ieee754_pow+0xd4>
100010dc:	14402116 	blt	r2,r17,10001164 <__ieee754_pow+0xd8>
100010e0:	009ffc34 	movhi	r2,32752
100010e4:	88807326 	beq	r17,r2,100012b4 <__ieee754_pow+0x228>
100010e8:	2827883a 	mov	r19,r5
100010ec:	2021883a 	mov	r16,r4
100010f0:	302b883a 	mov	r21,r6
100010f4:	382f883a 	mov	r23,r7
100010f8:	28007016 	blt	r5,zero,100012bc <__ieee754_pow+0x230>
100010fc:	0039883a 	mov	fp,zero
10001100:	a8003a1e 	bne	r21,zero,100011ec <__ieee754_pow+0x160>
10001104:	009ffc34 	movhi	r2,32752
10001108:	88807e26 	beq	r17,r2,10001304 <__ieee754_pow+0x278>
1000110c:	008ffc34 	movhi	r2,16368
10001110:	88805426 	beq	r17,r2,10001264 <__ieee754_pow+0x1d8>
10001114:	00900034 	movhi	r2,16384
10001118:	b8834926 	beq	r23,r2,10001e40 <__ieee754_pow+0xdb4>
1000111c:	008ff834 	movhi	r2,16352
10001120:	b880321e 	bne	r23,r2,100011ec <__ieee754_pow+0x160>
10001124:	98003116 	blt	r19,zero,100011ec <__ieee754_pow+0x160>
10001128:	8009883a 	mov	r4,r16
1000112c:	980b883a 	mov	r5,r19
10001130:	dfc01317 	ldw	ra,76(sp)
10001134:	df001217 	ldw	fp,72(sp)
10001138:	ddc01117 	ldw	r23,68(sp)
1000113c:	dd801017 	ldw	r22,64(sp)
10001140:	dd400f17 	ldw	r21,60(sp)
10001144:	dd000e17 	ldw	r20,56(sp)
10001148:	dcc00d17 	ldw	r19,52(sp)
1000114c:	dc800c17 	ldw	r18,48(sp)
10001150:	dc400b17 	ldw	r17,44(sp)
10001154:	dc000a17 	ldw	r16,40(sp)
10001158:	dec01404 	addi	sp,sp,80
1000115c:	00021581 	jmpi	10002158 <__ieee754_sqrt>
10001160:	20001226 	beq	r4,zero,100011ac <__ieee754_pow+0x120>
10001164:	00b00434 	movhi	r2,49168
10001168:	9085883a 	add	r2,r18,r2
1000116c:	1108b03a 	or	r4,r2,r4
10001170:	20000f1e 	bne	r4,zero,100011b0 <__ieee754_pow+0x124>
10001174:	0005883a 	mov	r2,zero
10001178:	00cffc34 	movhi	r3,16368
1000117c:	dfc01317 	ldw	ra,76(sp)
10001180:	df001217 	ldw	fp,72(sp)
10001184:	ddc01117 	ldw	r23,68(sp)
10001188:	dd801017 	ldw	r22,64(sp)
1000118c:	dd400f17 	ldw	r21,60(sp)
10001190:	dd000e17 	ldw	r20,56(sp)
10001194:	dcc00d17 	ldw	r19,52(sp)
10001198:	dc800c17 	ldw	r18,48(sp)
1000119c:	dc400b17 	ldw	r17,44(sp)
100011a0:	dc000a17 	ldw	r16,40(sp)
100011a4:	dec01404 	addi	sp,sp,80
100011a8:	f800283a 	ret
100011ac:	947fcc0e 	bge	r18,r17,100010e0 <__alt_data_end+0xf80010e0>
100011b0:	01040074 	movhi	r4,4097
100011b4:	21072104 	addi	r4,r4,7300
100011b8:	dfc01317 	ldw	ra,76(sp)
100011bc:	df001217 	ldw	fp,72(sp)
100011c0:	ddc01117 	ldw	r23,68(sp)
100011c4:	dd801017 	ldw	r22,64(sp)
100011c8:	dd400f17 	ldw	r21,60(sp)
100011cc:	dd000e17 	ldw	r20,56(sp)
100011d0:	dcc00d17 	ldw	r19,52(sp)
100011d4:	dc800c17 	ldw	r18,48(sp)
100011d8:	dc400b17 	ldw	r17,44(sp)
100011dc:	dc000a17 	ldw	r16,40(sp)
100011e0:	dec01404 	addi	sp,sp,80
100011e4:	00024981 	jmpi	10002498 <nan>
100011e8:	0039883a 	mov	fp,zero
100011ec:	8009883a 	mov	r4,r16
100011f0:	980b883a 	mov	r5,r19
100011f4:	00023ec0 	call	100023ec <fabs>
100011f8:	102d883a 	mov	r22,r2
100011fc:	80000f26 	beq	r16,zero,1000123c <__ieee754_pow+0x1b0>
10001200:	9816d7fa 	srli	r11,r19,31
10001204:	5affffc4 	addi	r11,r11,-1
10001208:	e2c4b03a 	or	r2,fp,r11
1000120c:	10004a26 	beq	r2,zero,10001338 <__ieee754_pow+0x2ac>
10001210:	00907834 	movhi	r2,16864
10001214:	1440530e 	bge	r2,r17,10001364 <__ieee754_pow+0x2d8>
10001218:	0090fc34 	movhi	r2,17392
1000121c:	14433e0e 	bge	r2,r17,10001f18 <__ieee754_pow+0xe8c>
10001220:	008ffc34 	movhi	r2,16368
10001224:	10bfffc4 	addi	r2,r2,-1
10001228:	14801916 	blt	r2,r18,10001290 <__ieee754_pow+0x204>
1000122c:	b8001916 	blt	r23,zero,10001294 <__ieee754_pow+0x208>
10001230:	0005883a 	mov	r2,zero
10001234:	0007883a 	mov	r3,zero
10001238:	003fd006 	br	1000117c <__alt_data_end+0xf800117c>
1000123c:	90000526 	beq	r18,zero,10001254 <__ieee754_pow+0x1c8>
10001240:	00900034 	movhi	r2,16384
10001244:	10bfffc4 	addi	r2,r2,-1
10001248:	9884703a 	and	r2,r19,r2
1000124c:	010ffc34 	movhi	r4,16368
10001250:	113feb1e 	bne	r2,r4,10001200 <__alt_data_end+0xf8001200>
10001254:	b8000716 	blt	r23,zero,10001274 <__ieee754_pow+0x1e8>
10001258:	9802f216 	blt	r19,zero,10001e24 <__ieee754_pow+0xd98>
1000125c:	b005883a 	mov	r2,r22
10001260:	003fc606 	br	1000117c <__alt_data_end+0xf800117c>
10001264:	b8038816 	blt	r23,zero,10002088 <__ieee754_pow+0xffc>
10001268:	8005883a 	mov	r2,r16
1000126c:	9807883a 	mov	r3,r19
10001270:	003fc206 	br	1000117c <__alt_data_end+0xf800117c>
10001274:	b00d883a 	mov	r6,r22
10001278:	0009883a 	mov	r4,zero
1000127c:	014ffc34 	movhi	r5,16368
10001280:	180f883a 	mov	r7,r3
10001284:	0003fc80 	call	10003fc8 <__divdf3>
10001288:	102d883a 	mov	r22,r2
1000128c:	003ff206 	br	10001258 <__alt_data_end+0xf8001258>
10001290:	05ffe70e 	bge	zero,r23,10001230 <__alt_data_end+0xf8001230>
10001294:	01220034 	movhi	r4,34816
10001298:	015f8e34 	movhi	r5,32312
1000129c:	211d6704 	addi	r4,r4,30108
100012a0:	29790f04 	addi	r5,r5,-7108
100012a4:	200d883a 	mov	r6,r4
100012a8:	280f883a 	mov	r7,r5
100012ac:	0004b8c0 	call	10004b8c <__muldf3>
100012b0:	003fb206 	br	1000117c <__alt_data_end+0xf800117c>
100012b4:	303f8c26 	beq	r6,zero,100010e8 <__alt_data_end+0xf80010e8>
100012b8:	003faa06 	br	10001164 <__alt_data_end+0xf8001164>
100012bc:	0090d034 	movhi	r2,17216
100012c0:	10bfffc4 	addi	r2,r2,-1
100012c4:	14401a16 	blt	r2,r17,10001330 <__ieee754_pow+0x2a4>
100012c8:	008ffc34 	movhi	r2,16368
100012cc:	10bfffc4 	addi	r2,r2,-1
100012d0:	147f8a0e 	bge	r2,r17,100010fc <__alt_data_end+0xf80010fc>
100012d4:	8809d53a 	srai	r4,r17,20
100012d8:	00c104c4 	movi	r3,1043
100012dc:	1903840e 	bge	r3,r4,100020f0 <__ieee754_pow+0x1064>
100012e0:	00810cc4 	movi	r2,1075
100012e4:	1105c83a 	sub	r2,r2,r4
100012e8:	3086d83a 	srl	r3,r6,r2
100012ec:	1884983a 	sll	r2,r3,r2
100012f0:	11bf821e 	bne	r2,r6,100010fc <__alt_data_end+0xf80010fc>
100012f4:	18c0004c 	andi	r3,r3,1
100012f8:	02800084 	movi	r10,2
100012fc:	50f9c83a 	sub	fp,r10,r3
10001300:	003f7f06 	br	10001100 <__alt_data_end+0xf8001100>
10001304:	01300434 	movhi	r4,49168
10001308:	9109883a 	add	r4,r18,r4
1000130c:	2408b03a 	or	r4,r4,r16
10001310:	203f9826 	beq	r4,zero,10001174 <__alt_data_end+0xf8001174>
10001314:	008ffc34 	movhi	r2,16368
10001318:	10bfffc4 	addi	r2,r2,-1
1000131c:	1482f50e 	bge	r2,r18,10001ef4 <__ieee754_pow+0xe68>
10001320:	b83fc316 	blt	r23,zero,10001230 <__alt_data_end+0xf8001230>
10001324:	0005883a 	mov	r2,zero
10001328:	b807883a 	mov	r3,r23
1000132c:	003f9306 	br	1000117c <__alt_data_end+0xf800117c>
10001330:	07000084 	movi	fp,2
10001334:	003f7206 	br	10001100 <__alt_data_end+0xf8001100>
10001338:	8009883a 	mov	r4,r16
1000133c:	980b883a 	mov	r5,r19
10001340:	200d883a 	mov	r6,r4
10001344:	280f883a 	mov	r7,r5
10001348:	00053f80 	call	100053f8 <__subdf3>
1000134c:	1009883a 	mov	r4,r2
10001350:	180b883a 	mov	r5,r3
10001354:	100d883a 	mov	r6,r2
10001358:	180f883a 	mov	r7,r3
1000135c:	0003fc80 	call	10003fc8 <__divdf3>
10001360:	003f8606 	br	1000117c <__alt_data_end+0xf800117c>
10001364:	00800434 	movhi	r2,16
10001368:	10bfffc4 	addi	r2,r2,-1
1000136c:	1482e816 	blt	r2,r18,10001f10 <__ieee754_pow+0xe84>
10001370:	b009883a 	mov	r4,r22
10001374:	180b883a 	mov	r5,r3
10001378:	000d883a 	mov	r6,zero
1000137c:	01d0d034 	movhi	r7,17216
10001380:	dac00915 	stw	r11,36(sp)
10001384:	0004b8c0 	call	10004b8c <__muldf3>
10001388:	dac00917 	ldw	r11,36(sp)
1000138c:	102d883a 	mov	r22,r2
10001390:	1825883a 	mov	r18,r3
10001394:	013ff2c4 	movi	r4,-53
10001398:	9007d53a 	srai	r3,r18,20
1000139c:	00800434 	movhi	r2,16
100013a0:	10bfffc4 	addi	r2,r2,-1
100013a4:	18ff0044 	addi	r3,r3,-1023
100013a8:	1911883a 	add	r8,r3,r4
100013ac:	00c00134 	movhi	r3,4
100013b0:	9084703a 	and	r2,r18,r2
100013b4:	18e62384 	addi	r3,r3,-26482
100013b8:	14cffc34 	orhi	r19,r2,16368
100013bc:	1882d10e 	bge	r3,r2,10001f04 <__ieee754_pow+0xe78>
100013c0:	00c00334 	movhi	r3,12
100013c4:	18ed9e44 	addi	r3,r3,-18823
100013c8:	1883550e 	bge	r3,r2,10002120 <__ieee754_pow+0x1094>
100013cc:	00bffc34 	movhi	r2,65520
100013d0:	42000044 	addi	r8,r8,1
100013d4:	98a7883a 	add	r19,r19,r2
100013d8:	0021883a 	mov	r16,zero
100013dc:	0019883a 	mov	r12,zero
100013e0:	601890fa 	slli	r12,r12,3
100013e4:	00840074 	movhi	r2,4097
100013e8:	1086cf04 	addi	r2,r2,6972
100013ec:	1305883a 	add	r2,r2,r12
100013f0:	13400017 	ldw	r13,0(r2)
100013f4:	12800117 	ldw	r10,4(r2)
100013f8:	b009883a 	mov	r4,r22
100013fc:	980b883a 	mov	r5,r19
10001400:	680d883a 	mov	r6,r13
10001404:	500f883a 	mov	r7,r10
10001408:	da000815 	stw	r8,32(sp)
1000140c:	dac00915 	stw	r11,36(sp)
10001410:	db000715 	stw	r12,28(sp)
10001414:	da800315 	stw	r10,12(sp)
10001418:	db400415 	stw	r13,16(sp)
1000141c:	00053f80 	call	100053f8 <__subdf3>
10001420:	da800317 	ldw	r10,12(sp)
10001424:	db400417 	ldw	r13,16(sp)
10001428:	b009883a 	mov	r4,r22
1000142c:	500f883a 	mov	r7,r10
10001430:	680d883a 	mov	r6,r13
10001434:	980b883a 	mov	r5,r19
10001438:	1829883a 	mov	r20,r3
1000143c:	d8800015 	stw	r2,0(sp)
10001440:	000372c0 	call	1000372c <__adddf3>
10001444:	0009883a 	mov	r4,zero
10001448:	014ffc34 	movhi	r5,16368
1000144c:	100d883a 	mov	r6,r2
10001450:	180f883a 	mov	r7,r3
10001454:	0003fc80 	call	10003fc8 <__divdf3>
10001458:	d9000017 	ldw	r4,0(sp)
1000145c:	a00b883a 	mov	r5,r20
10001460:	100d883a 	mov	r6,r2
10001464:	180f883a 	mov	r7,r3
10001468:	d8c00615 	stw	r3,24(sp)
1000146c:	d8800515 	stw	r2,20(sp)
10001470:	0004b8c0 	call	10004b8c <__muldf3>
10001474:	1025883a 	mov	r18,r2
10001478:	9805d07a 	srai	r2,r19,1
1000147c:	1823883a 	mov	r17,r3
10001480:	880b883a 	mov	r5,r17
10001484:	10c80034 	orhi	r3,r2,8192
10001488:	00800234 	movhi	r2,8
1000148c:	1885883a 	add	r2,r3,r2
10001490:	1421883a 	add	r16,r2,r16
10001494:	800f883a 	mov	r7,r16
10001498:	0009883a 	mov	r4,zero
1000149c:	000d883a 	mov	r6,zero
100014a0:	0004b8c0 	call	10004b8c <__muldf3>
100014a4:	d9000017 	ldw	r4,0(sp)
100014a8:	a00b883a 	mov	r5,r20
100014ac:	100d883a 	mov	r6,r2
100014b0:	180f883a 	mov	r7,r3
100014b4:	00053f80 	call	100053f8 <__subdf3>
100014b8:	da800317 	ldw	r10,12(sp)
100014bc:	db400417 	ldw	r13,16(sp)
100014c0:	800b883a 	mov	r5,r16
100014c4:	500f883a 	mov	r7,r10
100014c8:	680d883a 	mov	r6,r13
100014cc:	0009883a 	mov	r4,zero
100014d0:	1829883a 	mov	r20,r3
100014d4:	d8800315 	stw	r2,12(sp)
100014d8:	00053f80 	call	100053f8 <__subdf3>
100014dc:	b009883a 	mov	r4,r22
100014e0:	980b883a 	mov	r5,r19
100014e4:	100d883a 	mov	r6,r2
100014e8:	180f883a 	mov	r7,r3
100014ec:	00053f80 	call	100053f8 <__subdf3>
100014f0:	880b883a 	mov	r5,r17
100014f4:	0009883a 	mov	r4,zero
100014f8:	100d883a 	mov	r6,r2
100014fc:	180f883a 	mov	r7,r3
10001500:	0004b8c0 	call	10004b8c <__muldf3>
10001504:	da400317 	ldw	r9,12(sp)
10001508:	a00b883a 	mov	r5,r20
1000150c:	100d883a 	mov	r6,r2
10001510:	4809883a 	mov	r4,r9
10001514:	180f883a 	mov	r7,r3
10001518:	00053f80 	call	100053f8 <__subdf3>
1000151c:	dbc00517 	ldw	r15,20(sp)
10001520:	db800617 	ldw	r14,24(sp)
10001524:	1009883a 	mov	r4,r2
10001528:	780d883a 	mov	r6,r15
1000152c:	700f883a 	mov	r7,r14
10001530:	180b883a 	mov	r5,r3
10001534:	0004b8c0 	call	10004b8c <__muldf3>
10001538:	9009883a 	mov	r4,r18
1000153c:	880b883a 	mov	r5,r17
10001540:	900d883a 	mov	r6,r18
10001544:	880f883a 	mov	r7,r17
10001548:	182d883a 	mov	r22,r3
1000154c:	d8800015 	stw	r2,0(sp)
10001550:	0004b8c0 	call	10004b8c <__muldf3>
10001554:	1009883a 	mov	r4,r2
10001558:	180b883a 	mov	r5,r3
1000155c:	100d883a 	mov	r6,r2
10001560:	180f883a 	mov	r7,r3
10001564:	1027883a 	mov	r19,r2
10001568:	1821883a 	mov	r16,r3
1000156c:	0004b8c0 	call	10004b8c <__muldf3>
10001570:	01929174 	movhi	r6,19013
10001574:	01cff2b4 	movhi	r7,16330
10001578:	9809883a 	mov	r4,r19
1000157c:	800b883a 	mov	r5,r16
10001580:	3193bbc4 	addi	r6,r6,20207
10001584:	39df8a04 	addi	r7,r7,32296
10001588:	1829883a 	mov	r20,r3
1000158c:	d8800315 	stw	r2,12(sp)
10001590:	0004b8c0 	call	10004b8c <__muldf3>
10001594:	01a4f2b4 	movhi	r6,37834
10001598:	01cff3b4 	movhi	r7,16334
1000159c:	1009883a 	mov	r4,r2
100015a0:	180b883a 	mov	r5,r3
100015a4:	31b6d944 	addi	r6,r6,-9371
100015a8:	39e19284 	addi	r7,r7,-31158
100015ac:	000372c0 	call	1000372c <__adddf3>
100015b0:	980d883a 	mov	r6,r19
100015b4:	800f883a 	mov	r7,r16
100015b8:	1009883a 	mov	r4,r2
100015bc:	180b883a 	mov	r5,r3
100015c0:	0004b8c0 	call	10004b8c <__muldf3>
100015c4:	01aa4774 	movhi	r6,43293
100015c8:	01cff474 	movhi	r7,16337
100015cc:	1009883a 	mov	r4,r2
100015d0:	180b883a 	mov	r5,r3
100015d4:	31904044 	addi	r6,r6,16641
100015d8:	39dd1804 	addi	r7,r7,29792
100015dc:	000372c0 	call	1000372c <__adddf3>
100015e0:	980d883a 	mov	r6,r19
100015e4:	800f883a 	mov	r7,r16
100015e8:	1009883a 	mov	r4,r2
100015ec:	180b883a 	mov	r5,r3
100015f0:	0004b8c0 	call	10004b8c <__muldf3>
100015f4:	019463f4 	movhi	r6,20879
100015f8:	01cff574 	movhi	r7,16341
100015fc:	1009883a 	mov	r4,r2
10001600:	180b883a 	mov	r5,r3
10001604:	31899344 	addi	r6,r6,9805
10001608:	39d55544 	addi	r7,r7,21845
1000160c:	000372c0 	call	1000372c <__adddf3>
10001610:	980d883a 	mov	r6,r19
10001614:	800f883a 	mov	r7,r16
10001618:	1009883a 	mov	r4,r2
1000161c:	180b883a 	mov	r5,r3
10001620:	0004b8c0 	call	10004b8c <__muldf3>
10001624:	01b6dc34 	movhi	r6,56176
10001628:	01cff6f4 	movhi	r7,16347
1000162c:	1009883a 	mov	r4,r2
10001630:	180b883a 	mov	r5,r3
10001634:	31aaffc4 	addi	r6,r6,-21505
10001638:	39db6d84 	addi	r7,r7,28086
1000163c:	000372c0 	call	1000372c <__adddf3>
10001640:	980d883a 	mov	r6,r19
10001644:	800f883a 	mov	r7,r16
10001648:	1009883a 	mov	r4,r2
1000164c:	180b883a 	mov	r5,r3
10001650:	0004b8c0 	call	10004b8c <__muldf3>
10001654:	018cccf4 	movhi	r6,13107
10001658:	01cff8f4 	movhi	r7,16355
1000165c:	1009883a 	mov	r4,r2
10001660:	180b883a 	mov	r5,r3
10001664:	318cc0c4 	addi	r6,r6,13059
10001668:	39ccccc4 	addi	r7,r7,13107
1000166c:	000372c0 	call	1000372c <__adddf3>
10001670:	da400317 	ldw	r9,12(sp)
10001674:	a00b883a 	mov	r5,r20
10001678:	100d883a 	mov	r6,r2
1000167c:	4809883a 	mov	r4,r9
10001680:	180f883a 	mov	r7,r3
10001684:	0004b8c0 	call	10004b8c <__muldf3>
10001688:	880b883a 	mov	r5,r17
1000168c:	900d883a 	mov	r6,r18
10001690:	880f883a 	mov	r7,r17
10001694:	0009883a 	mov	r4,zero
10001698:	1027883a 	mov	r19,r2
1000169c:	1821883a 	mov	r16,r3
100016a0:	000372c0 	call	1000372c <__adddf3>
100016a4:	d9800017 	ldw	r6,0(sp)
100016a8:	b00f883a 	mov	r7,r22
100016ac:	1009883a 	mov	r4,r2
100016b0:	180b883a 	mov	r5,r3
100016b4:	0004b8c0 	call	10004b8c <__muldf3>
100016b8:	980d883a 	mov	r6,r19
100016bc:	800f883a 	mov	r7,r16
100016c0:	1009883a 	mov	r4,r2
100016c4:	180b883a 	mov	r5,r3
100016c8:	000372c0 	call	1000372c <__adddf3>
100016cc:	880f883a 	mov	r7,r17
100016d0:	880b883a 	mov	r5,r17
100016d4:	000d883a 	mov	r6,zero
100016d8:	0009883a 	mov	r4,zero
100016dc:	1029883a 	mov	r20,r2
100016e0:	1827883a 	mov	r19,r3
100016e4:	0004b8c0 	call	10004b8c <__muldf3>
100016e8:	1009883a 	mov	r4,r2
100016ec:	180b883a 	mov	r5,r3
100016f0:	000d883a 	mov	r6,zero
100016f4:	01d00234 	movhi	r7,16392
100016f8:	d8c00615 	stw	r3,24(sp)
100016fc:	d8800515 	stw	r2,20(sp)
10001700:	000372c0 	call	1000372c <__adddf3>
10001704:	a00d883a 	mov	r6,r20
10001708:	980f883a 	mov	r7,r19
1000170c:	1009883a 	mov	r4,r2
10001710:	180b883a 	mov	r5,r3
10001714:	000372c0 	call	1000372c <__adddf3>
10001718:	880b883a 	mov	r5,r17
1000171c:	000d883a 	mov	r6,zero
10001720:	180f883a 	mov	r7,r3
10001724:	0009883a 	mov	r4,zero
10001728:	1821883a 	mov	r16,r3
1000172c:	0004b8c0 	call	10004b8c <__muldf3>
10001730:	d9000017 	ldw	r4,0(sp)
10001734:	b00b883a 	mov	r5,r22
10001738:	800f883a 	mov	r7,r16
1000173c:	000d883a 	mov	r6,zero
10001740:	d8800115 	stw	r2,4(sp)
10001744:	d8c00215 	stw	r3,8(sp)
10001748:	0004b8c0 	call	10004b8c <__muldf3>
1000174c:	800b883a 	mov	r5,r16
10001750:	0009883a 	mov	r4,zero
10001754:	000d883a 	mov	r6,zero
10001758:	01d00234 	movhi	r7,16392
1000175c:	182d883a 	mov	r22,r3
10001760:	d8800315 	stw	r2,12(sp)
10001764:	00053f80 	call	100053f8 <__subdf3>
10001768:	dbc00517 	ldw	r15,20(sp)
1000176c:	db800617 	ldw	r14,24(sp)
10001770:	1009883a 	mov	r4,r2
10001774:	780d883a 	mov	r6,r15
10001778:	700f883a 	mov	r7,r14
1000177c:	180b883a 	mov	r5,r3
10001780:	00053f80 	call	100053f8 <__subdf3>
10001784:	a009883a 	mov	r4,r20
10001788:	980b883a 	mov	r5,r19
1000178c:	100d883a 	mov	r6,r2
10001790:	180f883a 	mov	r7,r3
10001794:	00053f80 	call	100053f8 <__subdf3>
10001798:	900d883a 	mov	r6,r18
1000179c:	880f883a 	mov	r7,r17
100017a0:	1009883a 	mov	r4,r2
100017a4:	180b883a 	mov	r5,r3
100017a8:	0004b8c0 	call	10004b8c <__muldf3>
100017ac:	da400317 	ldw	r9,12(sp)
100017b0:	b00b883a 	mov	r5,r22
100017b4:	100d883a 	mov	r6,r2
100017b8:	4809883a 	mov	r4,r9
100017bc:	180f883a 	mov	r7,r3
100017c0:	000372c0 	call	1000372c <__adddf3>
100017c4:	d9000117 	ldw	r4,4(sp)
100017c8:	d9400217 	ldw	r5,8(sp)
100017cc:	100d883a 	mov	r6,r2
100017d0:	180f883a 	mov	r7,r3
100017d4:	102d883a 	mov	r22,r2
100017d8:	1825883a 	mov	r18,r3
100017dc:	000372c0 	call	1000372c <__adddf3>
100017e0:	01cffbf4 	movhi	r7,16367
100017e4:	39f1c244 	addi	r7,r7,-14583
100017e8:	0009883a 	mov	r4,zero
100017ec:	180b883a 	mov	r5,r3
100017f0:	01b80034 	movhi	r6,57344
100017f4:	1823883a 	mov	r17,r3
100017f8:	0004b8c0 	call	10004b8c <__muldf3>
100017fc:	018516f4 	movhi	r6,5211
10001800:	01ef8fb4 	movhi	r7,48702
10001804:	880b883a 	mov	r5,r17
10001808:	31807d44 	addi	r6,r6,501
1000180c:	39cbf804 	addi	r7,r7,12256
10001810:	0009883a 	mov	r4,zero
10001814:	1029883a 	mov	r20,r2
10001818:	1827883a 	mov	r19,r3
1000181c:	0004b8c0 	call	10004b8c <__muldf3>
10001820:	d9800117 	ldw	r6,4(sp)
10001824:	d9c00217 	ldw	r7,8(sp)
10001828:	880b883a 	mov	r5,r17
1000182c:	0009883a 	mov	r4,zero
10001830:	1821883a 	mov	r16,r3
10001834:	d8800415 	stw	r2,16(sp)
10001838:	00053f80 	call	100053f8 <__subdf3>
1000183c:	b009883a 	mov	r4,r22
10001840:	900b883a 	mov	r5,r18
10001844:	100d883a 	mov	r6,r2
10001848:	180f883a 	mov	r7,r3
1000184c:	00053f80 	call	100053f8 <__subdf3>
10001850:	01b70eb4 	movhi	r6,56378
10001854:	01cffbf4 	movhi	r7,16367
10001858:	1009883a 	mov	r4,r2
1000185c:	180b883a 	mov	r5,r3
10001860:	3180ff44 	addi	r6,r6,1021
10001864:	39f1c244 	addi	r7,r7,-14583
10001868:	0004b8c0 	call	10004b8c <__muldf3>
1000186c:	db400417 	ldw	r13,16(sp)
10001870:	800b883a 	mov	r5,r16
10001874:	100d883a 	mov	r6,r2
10001878:	6809883a 	mov	r4,r13
1000187c:	180f883a 	mov	r7,r3
10001880:	000372c0 	call	1000372c <__adddf3>
10001884:	db000717 	ldw	r12,28(sp)
10001888:	1009883a 	mov	r4,r2
1000188c:	00840074 	movhi	r2,4097
10001890:	1086c704 	addi	r2,r2,6940
10001894:	1305883a 	add	r2,r2,r12
10001898:	11800017 	ldw	r6,0(r2)
1000189c:	11c00117 	ldw	r7,4(r2)
100018a0:	180b883a 	mov	r5,r3
100018a4:	000372c0 	call	1000372c <__adddf3>
100018a8:	da000817 	ldw	r8,32(sp)
100018ac:	1025883a 	mov	r18,r2
100018b0:	1823883a 	mov	r17,r3
100018b4:	4009883a 	mov	r4,r8
100018b8:	0005d500 	call	10005d50 <__floatsidf>
100018bc:	db000717 	ldw	r12,28(sp)
100018c0:	d8800115 	stw	r2,4(sp)
100018c4:	00840074 	movhi	r2,4097
100018c8:	1086cb04 	addi	r2,r2,6956
100018cc:	1319883a 	add	r12,r2,r12
100018d0:	65800017 	ldw	r22,0(r12)
100018d4:	63000117 	ldw	r12,4(r12)
100018d8:	a009883a 	mov	r4,r20
100018dc:	980b883a 	mov	r5,r19
100018e0:	900d883a 	mov	r6,r18
100018e4:	880f883a 	mov	r7,r17
100018e8:	db000015 	stw	r12,0(sp)
100018ec:	d8c00215 	stw	r3,8(sp)
100018f0:	000372c0 	call	1000372c <__adddf3>
100018f4:	d9c00017 	ldw	r7,0(sp)
100018f8:	1009883a 	mov	r4,r2
100018fc:	180b883a 	mov	r5,r3
10001900:	b00d883a 	mov	r6,r22
10001904:	000372c0 	call	1000372c <__adddf3>
10001908:	d9800117 	ldw	r6,4(sp)
1000190c:	d9c00217 	ldw	r7,8(sp)
10001910:	1009883a 	mov	r4,r2
10001914:	180b883a 	mov	r5,r3
10001918:	000372c0 	call	1000372c <__adddf3>
1000191c:	d9800117 	ldw	r6,4(sp)
10001920:	d9c00217 	ldw	r7,8(sp)
10001924:	0009883a 	mov	r4,zero
10001928:	180b883a 	mov	r5,r3
1000192c:	1821883a 	mov	r16,r3
10001930:	00053f80 	call	100053f8 <__subdf3>
10001934:	d9c00017 	ldw	r7,0(sp)
10001938:	1009883a 	mov	r4,r2
1000193c:	180b883a 	mov	r5,r3
10001940:	b00d883a 	mov	r6,r22
10001944:	00053f80 	call	100053f8 <__subdf3>
10001948:	1009883a 	mov	r4,r2
1000194c:	180b883a 	mov	r5,r3
10001950:	a00d883a 	mov	r6,r20
10001954:	980f883a 	mov	r7,r19
10001958:	00053f80 	call	100053f8 <__subdf3>
1000195c:	9009883a 	mov	r4,r18
10001960:	880b883a 	mov	r5,r17
10001964:	100d883a 	mov	r6,r2
10001968:	180f883a 	mov	r7,r3
1000196c:	00053f80 	call	100053f8 <__subdf3>
10001970:	dac00917 	ldw	r11,36(sp)
10001974:	e2bfffc4 	addi	r10,fp,-1
10001978:	1027883a 	mov	r19,r2
1000197c:	52d6b03a 	or	r11,r10,r11
10001980:	1823883a 	mov	r17,r3
10001984:	5801591e 	bne	r11,zero,10001eec <__ieee754_pow+0xe60>
10001988:	04affc34 	movhi	r18,49136
1000198c:	b80f883a 	mov	r7,r23
10001990:	a809883a 	mov	r4,r21
10001994:	b80b883a 	mov	r5,r23
10001998:	000d883a 	mov	r6,zero
1000199c:	00053f80 	call	100053f8 <__subdf3>
100019a0:	1009883a 	mov	r4,r2
100019a4:	180b883a 	mov	r5,r3
100019a8:	000d883a 	mov	r6,zero
100019ac:	800f883a 	mov	r7,r16
100019b0:	0004b8c0 	call	10004b8c <__muldf3>
100019b4:	a809883a 	mov	r4,r21
100019b8:	b80b883a 	mov	r5,r23
100019bc:	980d883a 	mov	r6,r19
100019c0:	880f883a 	mov	r7,r17
100019c4:	102d883a 	mov	r22,r2
100019c8:	1829883a 	mov	r20,r3
100019cc:	0004b8c0 	call	10004b8c <__muldf3>
100019d0:	b009883a 	mov	r4,r22
100019d4:	a00b883a 	mov	r5,r20
100019d8:	100d883a 	mov	r6,r2
100019dc:	180f883a 	mov	r7,r3
100019e0:	000372c0 	call	1000372c <__adddf3>
100019e4:	b80b883a 	mov	r5,r23
100019e8:	0009883a 	mov	r4,zero
100019ec:	000d883a 	mov	r6,zero
100019f0:	800f883a 	mov	r7,r16
100019f4:	1027883a 	mov	r19,r2
100019f8:	1823883a 	mov	r17,r3
100019fc:	0004b8c0 	call	10004b8c <__muldf3>
10001a00:	9809883a 	mov	r4,r19
10001a04:	880b883a 	mov	r5,r17
10001a08:	100d883a 	mov	r6,r2
10001a0c:	180f883a 	mov	r7,r3
10001a10:	102d883a 	mov	r22,r2
10001a14:	182b883a 	mov	r21,r3
10001a18:	000372c0 	call	1000372c <__adddf3>
10001a1c:	102f883a 	mov	r23,r2
10001a20:	00902434 	movhi	r2,16528
10001a24:	10bfffc4 	addi	r2,r2,-1
10001a28:	1829883a 	mov	r20,r3
10001a2c:	b013883a 	mov	r9,r22
10001a30:	a811883a 	mov	r8,r21
10001a34:	10c1080e 	bge	r2,r3,10001e58 <__ieee754_pow+0xdcc>
10001a38:	00efdc34 	movhi	r3,49008
10001a3c:	a0c7883a 	add	r3,r20,r3
10001a40:	1dc6b03a 	or	r3,r3,r23
10001a44:	1801961e 	bne	r3,zero,100020a0 <__ieee754_pow+0x1014>
10001a48:	01994b34 	movhi	r6,25900
10001a4c:	01cf25f4 	movhi	r7,15511
10001a50:	31a0bf84 	addi	r6,r6,-32002
10001a54:	39c551c4 	addi	r7,r7,5447
10001a58:	9809883a 	mov	r4,r19
10001a5c:	880b883a 	mov	r5,r17
10001a60:	000372c0 	call	1000372c <__adddf3>
10001a64:	b809883a 	mov	r4,r23
10001a68:	a00b883a 	mov	r5,r20
10001a6c:	b00d883a 	mov	r6,r22
10001a70:	a80f883a 	mov	r7,r21
10001a74:	1039883a 	mov	fp,r2
10001a78:	1821883a 	mov	r16,r3
10001a7c:	00053f80 	call	100053f8 <__subdf3>
10001a80:	e009883a 	mov	r4,fp
10001a84:	800b883a 	mov	r5,r16
10001a88:	100d883a 	mov	r6,r2
10001a8c:	180f883a 	mov	r7,r3
10001a90:	00049cc0 	call	100049cc <__gedf2>
10001a94:	00818216 	blt	zero,r2,100020a0 <__ieee754_pow+0x1014>
10001a98:	a021883a 	mov	r16,r20
10001a9c:	8011d53a 	srai	r8,r16,20
10001aa0:	00800434 	movhi	r2,16
10001aa4:	a02ed7fa 	srli	r23,r20,31
10001aa8:	423f0084 	addi	r8,r8,-1022
10001aac:	1211d83a 	sra	r8,r2,r8
10001ab0:	00c00434 	movhi	r3,16
10001ab4:	18ffffc4 	addi	r3,r3,-1
10001ab8:	4529883a 	add	r20,r8,r20
10001abc:	a00a907a 	slli	r5,r20,1
10001ac0:	a0c4703a 	and	r2,r20,r3
10001ac4:	10800434 	orhi	r2,r2,16
10001ac8:	280ad57a 	srli	r5,r5,21
10001acc:	05cdc83a 	sub	r6,zero,r23
10001ad0:	b009883a 	mov	r4,r22
10001ad4:	29ff0044 	addi	r7,r5,-1023
10001ad8:	19c7d83a 	sra	r3,r3,r7
10001adc:	01c104c4 	movi	r7,1043
10001ae0:	394bc83a 	sub	r5,r7,r5
10001ae4:	1145d83a 	sra	r2,r2,r5
10001ae8:	00ce303a 	nor	r7,zero,r3
10001aec:	3d0e703a 	and	r7,r7,r20
10001af0:	1184f03a 	xor	r2,r2,r6
10001af4:	a80b883a 	mov	r5,r21
10001af8:	000d883a 	mov	r6,zero
10001afc:	15ef883a 	add	r23,r2,r23
10001b00:	ddc00115 	stw	r23,4(sp)
10001b04:	00053f80 	call	100053f8 <__subdf3>
10001b08:	9809883a 	mov	r4,r19
10001b0c:	880b883a 	mov	r5,r17
10001b10:	100d883a 	mov	r6,r2
10001b14:	180f883a 	mov	r7,r3
10001b18:	d8c00815 	stw	r3,32(sp)
10001b1c:	d8800315 	stw	r2,12(sp)
10001b20:	000372c0 	call	1000372c <__adddf3>
10001b24:	d8800117 	ldw	r2,4(sp)
10001b28:	da000817 	ldw	r8,32(sp)
10001b2c:	da400317 	ldw	r9,12(sp)
10001b30:	1004953a 	slli	r2,r2,20
10001b34:	1829883a 	mov	r20,r3
10001b38:	d8800015 	stw	r2,0(sp)
10001b3c:	01cff9b4 	movhi	r7,16358
10001b40:	a00b883a 	mov	r5,r20
10001b44:	39cb90c4 	addi	r7,r7,11843
10001b48:	0009883a 	mov	r4,zero
10001b4c:	000d883a 	mov	r6,zero
10001b50:	da000815 	stw	r8,32(sp)
10001b54:	da400315 	stw	r9,12(sp)
10001b58:	0004b8c0 	call	10004b8c <__muldf3>
10001b5c:	da400317 	ldw	r9,12(sp)
10001b60:	da000817 	ldw	r8,32(sp)
10001b64:	a00b883a 	mov	r5,r20
10001b68:	480d883a 	mov	r6,r9
10001b6c:	400f883a 	mov	r7,r8
10001b70:	0009883a 	mov	r4,zero
10001b74:	1039883a 	mov	fp,r2
10001b78:	182d883a 	mov	r22,r3
10001b7c:	00053f80 	call	100053f8 <__subdf3>
10001b80:	9809883a 	mov	r4,r19
10001b84:	880b883a 	mov	r5,r17
10001b88:	100d883a 	mov	r6,r2
10001b8c:	180f883a 	mov	r7,r3
10001b90:	00053f80 	call	100053f8 <__subdf3>
10001b94:	01bfbeb4 	movhi	r6,65274
10001b98:	01cff9b4 	movhi	r7,16358
10001b9c:	1009883a 	mov	r4,r2
10001ba0:	180b883a 	mov	r5,r3
10001ba4:	318e7bc4 	addi	r6,r6,14831
10001ba8:	39cb9084 	addi	r7,r7,11842
10001bac:	0004b8c0 	call	10004b8c <__muldf3>
10001bb0:	01832a34 	movhi	r6,3240
10001bb4:	01ef8834 	movhi	r7,48672
10001bb8:	a00b883a 	mov	r5,r20
10001bbc:	319b0e44 	addi	r6,r6,27705
10001bc0:	39d71844 	addi	r7,r7,23649
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	1023883a 	mov	r17,r2
10001bcc:	1821883a 	mov	r16,r3
10001bd0:	0004b8c0 	call	10004b8c <__muldf3>
10001bd4:	8809883a 	mov	r4,r17
10001bd8:	800b883a 	mov	r5,r16
10001bdc:	100d883a 	mov	r6,r2
10001be0:	180f883a 	mov	r7,r3
10001be4:	000372c0 	call	1000372c <__adddf3>
10001be8:	e009883a 	mov	r4,fp
10001bec:	b00b883a 	mov	r5,r22
10001bf0:	100d883a 	mov	r6,r2
10001bf4:	180f883a 	mov	r7,r3
10001bf8:	1029883a 	mov	r20,r2
10001bfc:	1827883a 	mov	r19,r3
10001c00:	000372c0 	call	1000372c <__adddf3>
10001c04:	e00d883a 	mov	r6,fp
10001c08:	b00f883a 	mov	r7,r22
10001c0c:	1009883a 	mov	r4,r2
10001c10:	180b883a 	mov	r5,r3
10001c14:	1023883a 	mov	r17,r2
10001c18:	1821883a 	mov	r16,r3
10001c1c:	00053f80 	call	100053f8 <__subdf3>
10001c20:	a009883a 	mov	r4,r20
10001c24:	980b883a 	mov	r5,r19
10001c28:	100d883a 	mov	r6,r2
10001c2c:	180f883a 	mov	r7,r3
10001c30:	00053f80 	call	100053f8 <__subdf3>
10001c34:	8809883a 	mov	r4,r17
10001c38:	800b883a 	mov	r5,r16
10001c3c:	880d883a 	mov	r6,r17
10001c40:	800f883a 	mov	r7,r16
10001c44:	1039883a 	mov	fp,r2
10001c48:	182d883a 	mov	r22,r3
10001c4c:	0004b8c0 	call	10004b8c <__muldf3>
10001c50:	019caff4 	movhi	r6,29375
10001c54:	01cf99b4 	movhi	r7,15974
10001c58:	1009883a 	mov	r4,r2
10001c5c:	180b883a 	mov	r5,r3
10001c60:	31a93404 	addi	r6,r6,-23344
10001c64:	39cdda44 	addi	r7,r7,14185
10001c68:	1029883a 	mov	r20,r2
10001c6c:	1827883a 	mov	r19,r3
10001c70:	0004b8c0 	call	10004b8c <__muldf3>
10001c74:	01b174b4 	movhi	r6,50642
10001c78:	01cfaf34 	movhi	r7,16060
10001c7c:	1009883a 	mov	r4,r2
10001c80:	180b883a 	mov	r5,r3
10001c84:	319afc44 	addi	r6,r6,27633
10001c88:	39ef5044 	addi	r7,r7,-17087
10001c8c:	00053f80 	call	100053f8 <__subdf3>
10001c90:	a00d883a 	mov	r6,r20
10001c94:	980f883a 	mov	r7,r19
10001c98:	1009883a 	mov	r4,r2
10001c9c:	180b883a 	mov	r5,r3
10001ca0:	0004b8c0 	call	10004b8c <__muldf3>
10001ca4:	01abc9b4 	movhi	r6,44838
10001ca8:	01cfc474 	movhi	r7,16145
10001cac:	1009883a 	mov	r4,r2
10001cb0:	180b883a 	mov	r5,r3
10001cb4:	31b78b04 	addi	r6,r6,-8660
10001cb8:	39d59a84 	addi	r7,r7,22122
10001cbc:	000372c0 	call	1000372c <__adddf3>
10001cc0:	a00d883a 	mov	r6,r20
10001cc4:	980f883a 	mov	r7,r19
10001cc8:	1009883a 	mov	r4,r2
10001ccc:	180b883a 	mov	r5,r3
10001cd0:	0004b8c0 	call	10004b8c <__muldf3>
10001cd4:	0185aff4 	movhi	r6,5823
10001cd8:	01cfd9f4 	movhi	r7,16231
10001cdc:	1009883a 	mov	r4,r2
10001ce0:	180b883a 	mov	r5,r3
10001ce4:	31af64c4 	addi	r6,r6,-17005
10001ce8:	39f05b04 	addi	r7,r7,-16020
10001cec:	00053f80 	call	100053f8 <__subdf3>
10001cf0:	a00d883a 	mov	r6,r20
10001cf4:	980f883a 	mov	r7,r19
10001cf8:	1009883a 	mov	r4,r2
10001cfc:	180b883a 	mov	r5,r3
10001d00:	0004b8c0 	call	10004b8c <__muldf3>
10001d04:	01955574 	movhi	r6,21845
10001d08:	01cff174 	movhi	r7,16325
10001d0c:	1009883a 	mov	r4,r2
10001d10:	180b883a 	mov	r5,r3
10001d14:	31954f84 	addi	r6,r6,21822
10001d18:	39d55544 	addi	r7,r7,21845
10001d1c:	000372c0 	call	1000372c <__adddf3>
10001d20:	a00d883a 	mov	r6,r20
10001d24:	980f883a 	mov	r7,r19
10001d28:	1009883a 	mov	r4,r2
10001d2c:	180b883a 	mov	r5,r3
10001d30:	0004b8c0 	call	10004b8c <__muldf3>
10001d34:	8809883a 	mov	r4,r17
10001d38:	800b883a 	mov	r5,r16
10001d3c:	100d883a 	mov	r6,r2
10001d40:	180f883a 	mov	r7,r3
10001d44:	00053f80 	call	100053f8 <__subdf3>
10001d48:	8809883a 	mov	r4,r17
10001d4c:	800b883a 	mov	r5,r16
10001d50:	100d883a 	mov	r6,r2
10001d54:	180f883a 	mov	r7,r3
10001d58:	1029883a 	mov	r20,r2
10001d5c:	1827883a 	mov	r19,r3
10001d60:	0004b8c0 	call	10004b8c <__muldf3>
10001d64:	a009883a 	mov	r4,r20
10001d68:	980b883a 	mov	r5,r19
10001d6c:	000d883a 	mov	r6,zero
10001d70:	01d00034 	movhi	r7,16384
10001d74:	102b883a 	mov	r21,r2
10001d78:	182f883a 	mov	r23,r3
10001d7c:	00053f80 	call	100053f8 <__subdf3>
10001d80:	a809883a 	mov	r4,r21
10001d84:	b80b883a 	mov	r5,r23
10001d88:	100d883a 	mov	r6,r2
10001d8c:	180f883a 	mov	r7,r3
10001d90:	0003fc80 	call	10003fc8 <__divdf3>
10001d94:	8809883a 	mov	r4,r17
10001d98:	800b883a 	mov	r5,r16
10001d9c:	e00d883a 	mov	r6,fp
10001da0:	b00f883a 	mov	r7,r22
10001da4:	1029883a 	mov	r20,r2
10001da8:	1827883a 	mov	r19,r3
10001dac:	0004b8c0 	call	10004b8c <__muldf3>
10001db0:	1009883a 	mov	r4,r2
10001db4:	180b883a 	mov	r5,r3
10001db8:	e00d883a 	mov	r6,fp
10001dbc:	b00f883a 	mov	r7,r22
10001dc0:	000372c0 	call	1000372c <__adddf3>
10001dc4:	a009883a 	mov	r4,r20
10001dc8:	980b883a 	mov	r5,r19
10001dcc:	100d883a 	mov	r6,r2
10001dd0:	180f883a 	mov	r7,r3
10001dd4:	00053f80 	call	100053f8 <__subdf3>
10001dd8:	1009883a 	mov	r4,r2
10001ddc:	180b883a 	mov	r5,r3
10001de0:	880d883a 	mov	r6,r17
10001de4:	800f883a 	mov	r7,r16
10001de8:	00053f80 	call	100053f8 <__subdf3>
10001dec:	0009883a 	mov	r4,zero
10001df0:	180f883a 	mov	r7,r3
10001df4:	014ffc34 	movhi	r5,16368
10001df8:	100d883a 	mov	r6,r2
10001dfc:	00053f80 	call	100053f8 <__subdf3>
10001e00:	d9000017 	ldw	r4,0(sp)
10001e04:	190f883a 	add	r7,r3,r4
10001e08:	3809d53a 	srai	r4,r7,20
10001e0c:	0100c70e 	bge	zero,r4,1000212c <__ieee754_pow+0x10a0>
10001e10:	100d883a 	mov	r6,r2
10001e14:	0009883a 	mov	r4,zero
10001e18:	900b883a 	mov	r5,r18
10001e1c:	0004b8c0 	call	10004b8c <__muldf3>
10001e20:	003cd606 	br	1000117c <__alt_data_end+0xf800117c>
10001e24:	00b00434 	movhi	r2,49168
10001e28:	9085883a 	add	r2,r18,r2
10001e2c:	e084b03a 	or	r2,fp,r2
10001e30:	1000aa1e 	bne	r2,zero,100020dc <__ieee754_pow+0x1050>
10001e34:	b009883a 	mov	r4,r22
10001e38:	180b883a 	mov	r5,r3
10001e3c:	003d4006 	br	10001340 <__alt_data_end+0xf8001340>
10001e40:	8009883a 	mov	r4,r16
10001e44:	980b883a 	mov	r5,r19
10001e48:	800d883a 	mov	r6,r16
10001e4c:	980f883a 	mov	r7,r19
10001e50:	0004b8c0 	call	10004b8c <__muldf3>
10001e54:	003cc906 	br	1000117c <__alt_data_end+0xf800117c>
10001e58:	04200034 	movhi	r16,32768
10001e5c:	843fffc4 	addi	r16,r16,-1
10001e60:	00902474 	movhi	r2,16529
10001e64:	1c20703a 	and	r16,r3,r16
10001e68:	10b2ffc4 	addi	r2,r2,-13313
10001e6c:	1400a70e 	bge	r2,r16,1000210c <__ieee754_pow+0x1080>
10001e70:	008fdbf4 	movhi	r2,16239
10001e74:	108d0004 	addi	r2,r2,13312
10001e78:	1885883a 	add	r2,r3,r2
10001e7c:	15c4b03a 	or	r2,r2,r23
10001e80:	10000b1e 	bne	r2,zero,10001eb0 <__ieee754_pow+0xe24>
10001e84:	b809883a 	mov	r4,r23
10001e88:	180b883a 	mov	r5,r3
10001e8c:	b00d883a 	mov	r6,r22
10001e90:	a80f883a 	mov	r7,r21
10001e94:	00053f80 	call	100053f8 <__subdf3>
10001e98:	9809883a 	mov	r4,r19
10001e9c:	880b883a 	mov	r5,r17
10001ea0:	100d883a 	mov	r6,r2
10001ea4:	180f883a 	mov	r7,r3
10001ea8:	0004aac0 	call	10004aac <__ledf2>
10001eac:	00befb16 	blt	zero,r2,10001a9c <__alt_data_end+0xf8001a9c>
10001eb0:	01b0be74 	movhi	r6,49913
10001eb4:	01c06974 	movhi	r7,421
10001eb8:	900b883a 	mov	r5,r18
10001ebc:	31bcd644 	addi	r6,r6,-3239
10001ec0:	39db87c4 	addi	r7,r7,28191
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	0004b8c0 	call	10004b8c <__muldf3>
10001ecc:	01b0be74 	movhi	r6,49913
10001ed0:	01c06974 	movhi	r7,421
10001ed4:	1009883a 	mov	r4,r2
10001ed8:	180b883a 	mov	r5,r3
10001edc:	31bcd644 	addi	r6,r6,-3239
10001ee0:	39db87c4 	addi	r7,r7,28191
10001ee4:	0004b8c0 	call	10004b8c <__muldf3>
10001ee8:	003ca406 	br	1000117c <__alt_data_end+0xf800117c>
10001eec:	048ffc34 	movhi	r18,16368
10001ef0:	003ea606 	br	1000198c <__alt_data_end+0xf800198c>
10001ef4:	b83cce0e 	bge	r23,zero,10001230 <__alt_data_end+0xf8001230>
10001ef8:	0005883a 	mov	r2,zero
10001efc:	b8e0003c 	xorhi	r3,r23,32768
10001f00:	003c9e06 	br	1000117c <__alt_data_end+0xf800117c>
10001f04:	0021883a 	mov	r16,zero
10001f08:	0019883a 	mov	r12,zero
10001f0c:	003d3406 	br	100013e0 <__alt_data_end+0xf80013e0>
10001f10:	0009883a 	mov	r4,zero
10001f14:	003d2006 	br	10001398 <__alt_data_end+0xf8001398>
10001f18:	008ffc34 	movhi	r2,16368
10001f1c:	10bfff84 	addi	r2,r2,-2
10001f20:	14bcc20e 	bge	r2,r18,1000122c <__alt_data_end+0xf800122c>
10001f24:	01cffc34 	movhi	r7,16368
10001f28:	3cbcd916 	blt	r7,r18,10001290 <__alt_data_end+0xf8001290>
10001f2c:	b009883a 	mov	r4,r22
10001f30:	000d883a 	mov	r6,zero
10001f34:	180b883a 	mov	r5,r3
10001f38:	dac00915 	stw	r11,36(sp)
10001f3c:	00053f80 	call	100053f8 <__subdf3>
10001f40:	01cffdf4 	movhi	r7,16375
10001f44:	1009883a 	mov	r4,r2
10001f48:	180b883a 	mov	r5,r3
10001f4c:	39c551c4 	addi	r7,r7,5447
10001f50:	01980034 	movhi	r6,24576
10001f54:	1023883a 	mov	r17,r2
10001f58:	1821883a 	mov	r16,r3
10001f5c:	0004b8c0 	call	10004b8c <__muldf3>
10001f60:	01be17b4 	movhi	r6,63582
10001f64:	01cf9574 	movhi	r7,15957
10001f68:	8809883a 	mov	r4,r17
10001f6c:	800b883a 	mov	r5,r16
10001f70:	31b7d104 	addi	r6,r6,-8380
10001f74:	39eb82c4 	addi	r7,r7,-20981
10001f78:	1027883a 	mov	r19,r2
10001f7c:	1825883a 	mov	r18,r3
10001f80:	0004b8c0 	call	10004b8c <__muldf3>
10001f84:	8809883a 	mov	r4,r17
10001f88:	800b883a 	mov	r5,r16
10001f8c:	880d883a 	mov	r6,r17
10001f90:	800f883a 	mov	r7,r16
10001f94:	1829883a 	mov	r20,r3
10001f98:	d8800815 	stw	r2,32(sp)
10001f9c:	0004b8c0 	call	10004b8c <__muldf3>
10001fa0:	8809883a 	mov	r4,r17
10001fa4:	800b883a 	mov	r5,r16
10001fa8:	000d883a 	mov	r6,zero
10001fac:	01cff434 	movhi	r7,16336
10001fb0:	182d883a 	mov	r22,r3
10001fb4:	d8800315 	stw	r2,12(sp)
10001fb8:	0004b8c0 	call	10004b8c <__muldf3>
10001fbc:	01155574 	movhi	r4,21845
10001fc0:	014ff574 	movhi	r5,16341
10001fc4:	21155544 	addi	r4,r4,21845
10001fc8:	29555544 	addi	r5,r5,21845
10001fcc:	100d883a 	mov	r6,r2
10001fd0:	180f883a 	mov	r7,r3
10001fd4:	00053f80 	call	100053f8 <__subdf3>
10001fd8:	880d883a 	mov	r6,r17
10001fdc:	800f883a 	mov	r7,r16
10001fe0:	1009883a 	mov	r4,r2
10001fe4:	180b883a 	mov	r5,r3
10001fe8:	0004b8c0 	call	10004b8c <__muldf3>
10001fec:	0009883a 	mov	r4,zero
10001ff0:	014ff834 	movhi	r5,16352
10001ff4:	100d883a 	mov	r6,r2
10001ff8:	180f883a 	mov	r7,r3
10001ffc:	00053f80 	call	100053f8 <__subdf3>
10002000:	da400317 	ldw	r9,12(sp)
10002004:	b00b883a 	mov	r5,r22
10002008:	100d883a 	mov	r6,r2
1000200c:	4809883a 	mov	r4,r9
10002010:	180f883a 	mov	r7,r3
10002014:	0004b8c0 	call	10004b8c <__muldf3>
10002018:	01994b34 	movhi	r6,25900
1000201c:	01cffdf4 	movhi	r7,16375
10002020:	1009883a 	mov	r4,r2
10002024:	180b883a 	mov	r5,r3
10002028:	31a0bf84 	addi	r6,r6,-32002
1000202c:	39c551c4 	addi	r7,r7,5447
10002030:	0004b8c0 	call	10004b8c <__muldf3>
10002034:	da000817 	ldw	r8,32(sp)
10002038:	a00b883a 	mov	r5,r20
1000203c:	100d883a 	mov	r6,r2
10002040:	4009883a 	mov	r4,r8
10002044:	180f883a 	mov	r7,r3
10002048:	00053f80 	call	100053f8 <__subdf3>
1000204c:	9809883a 	mov	r4,r19
10002050:	900b883a 	mov	r5,r18
10002054:	100d883a 	mov	r6,r2
10002058:	180f883a 	mov	r7,r3
1000205c:	1029883a 	mov	r20,r2
10002060:	1823883a 	mov	r17,r3
10002064:	000372c0 	call	1000372c <__adddf3>
10002068:	0009883a 	mov	r4,zero
1000206c:	180b883a 	mov	r5,r3
10002070:	980d883a 	mov	r6,r19
10002074:	900f883a 	mov	r7,r18
10002078:	1821883a 	mov	r16,r3
1000207c:	00053f80 	call	100053f8 <__subdf3>
10002080:	a009883a 	mov	r4,r20
10002084:	003e3606 	br	10001960 <__alt_data_end+0xf8001960>
10002088:	0009883a 	mov	r4,zero
1000208c:	880b883a 	mov	r5,r17
10002090:	800d883a 	mov	r6,r16
10002094:	980f883a 	mov	r7,r19
10002098:	0003fc80 	call	10003fc8 <__divdf3>
1000209c:	003c3706 	br	1000117c <__alt_data_end+0xf800117c>
100020a0:	01a20034 	movhi	r6,34816
100020a4:	01df8e34 	movhi	r7,32312
100020a8:	900b883a 	mov	r5,r18
100020ac:	319d6704 	addi	r6,r6,30108
100020b0:	39f90f04 	addi	r7,r7,-7108
100020b4:	0009883a 	mov	r4,zero
100020b8:	0004b8c0 	call	10004b8c <__muldf3>
100020bc:	01a20034 	movhi	r6,34816
100020c0:	01df8e34 	movhi	r7,32312
100020c4:	1009883a 	mov	r4,r2
100020c8:	180b883a 	mov	r5,r3
100020cc:	319d6704 	addi	r6,r6,30108
100020d0:	39f90f04 	addi	r7,r7,-7108
100020d4:	0004b8c0 	call	10004b8c <__muldf3>
100020d8:	003c2806 	br	1000117c <__alt_data_end+0xf800117c>
100020dc:	00800044 	movi	r2,1
100020e0:	e0bc5e1e 	bne	fp,r2,1000125c <__alt_data_end+0xf800125c>
100020e4:	18e0003c 	xorhi	r3,r3,32768
100020e8:	b005883a 	mov	r2,r22
100020ec:	003c2306 	br	1000117c <__alt_data_end+0xf800117c>
100020f0:	303c3d1e 	bne	r6,zero,100011e8 <__alt_data_end+0xf80011e8>
100020f4:	1907c83a 	sub	r3,r3,r4
100020f8:	88c5d83a 	sra	r2,r17,r3
100020fc:	10c6983a 	sll	r3,r2,r3
10002100:	1c401126 	beq	r3,r17,10002148 <__ieee754_pow+0x10bc>
10002104:	0039883a 	mov	fp,zero
10002108:	003c0006 	br	1000110c <__alt_data_end+0xf800110c>
1000210c:	008ff834 	movhi	r2,16352
10002110:	143e6216 	blt	r2,r16,10001a9c <__alt_data_end+0xf8001a9c>
10002114:	d8000015 	stw	zero,0(sp)
10002118:	d8000115 	stw	zero,4(sp)
1000211c:	003e8706 	br	10001b3c <__alt_data_end+0xf8001b3c>
10002120:	04000134 	movhi	r16,4
10002124:	03000044 	movi	r12,1
10002128:	003cad06 	br	100013e0 <__alt_data_end+0xf80013e0>
1000212c:	d9800117 	ldw	r6,4(sp)
10002130:	1009883a 	mov	r4,r2
10002134:	180b883a 	mov	r5,r3
10002138:	00026880 	call	10002688 <scalbn>
1000213c:	100d883a 	mov	r6,r2
10002140:	180f883a 	mov	r7,r3
10002144:	003f3306 	br	10001e14 <__alt_data_end+0xf8001e14>
10002148:	1080004c 	andi	r2,r2,1
1000214c:	02800084 	movi	r10,2
10002150:	50b9c83a 	sub	fp,r10,r2
10002154:	003bed06 	br	1000110c <__alt_data_end+0xf800110c>

10002158 <__ieee754_sqrt>:
10002158:	defffd04 	addi	sp,sp,-12
1000215c:	dc400115 	stw	r17,4(sp)
10002160:	dc000015 	stw	r16,0(sp)
10002164:	dfc00215 	stw	ra,8(sp)
10002168:	28dffc2c 	andhi	r3,r5,32752
1000216c:	009ffc34 	movhi	r2,32752
10002170:	2821883a 	mov	r16,r5
10002174:	2023883a 	mov	r17,r4
10002178:	18807c26 	beq	r3,r2,1000236c <__ieee754_sqrt+0x214>
1000217c:	2011883a 	mov	r8,r4
10002180:	01405f0e 	bge	zero,r5,10002300 <__ieee754_sqrt+0x1a8>
10002184:	2815d53a 	srai	r10,r5,20
10002188:	50006a26 	beq	r10,zero,10002334 <__ieee754_sqrt+0x1dc>
1000218c:	00800434 	movhi	r2,16
10002190:	52bf0044 	addi	r10,r10,-1023
10002194:	10bfffc4 	addi	r2,r2,-1
10002198:	8084703a 	and	r2,r16,r2
1000219c:	50c0004c 	andi	r3,r10,1
100021a0:	10800434 	orhi	r2,r2,16
100021a4:	18004f1e 	bne	r3,zero,100022e4 <__ieee754_sqrt+0x18c>
100021a8:	4006d7fa 	srli	r3,r8,31
100021ac:	5015d07a 	srai	r10,r10,1
100021b0:	1085883a 	add	r2,r2,r2
100021b4:	10c5883a 	add	r2,r2,r3
100021b8:	01800584 	movi	r6,22
100021bc:	4207883a 	add	r3,r8,r8
100021c0:	0013883a 	mov	r9,zero
100021c4:	000b883a 	mov	r5,zero
100021c8:	01000834 	movhi	r4,32
100021cc:	290f883a 	add	r7,r5,r4
100021d0:	1810d7fa 	srli	r8,r3,31
100021d4:	31bfffc4 	addi	r6,r6,-1
100021d8:	11c00316 	blt	r2,r7,100021e8 <__ieee754_sqrt+0x90>
100021dc:	11c5c83a 	sub	r2,r2,r7
100021e0:	390b883a 	add	r5,r7,r4
100021e4:	4913883a 	add	r9,r9,r4
100021e8:	1085883a 	add	r2,r2,r2
100021ec:	1205883a 	add	r2,r2,r8
100021f0:	18c7883a 	add	r3,r3,r3
100021f4:	2008d07a 	srli	r4,r4,1
100021f8:	303ff41e 	bne	r6,zero,100021cc <__alt_data_end+0xf80021cc>
100021fc:	01200034 	movhi	r4,32768
10002200:	01c00804 	movi	r7,32
10002204:	0011883a 	mov	r8,zero
10002208:	0017883a 	mov	r11,zero
1000220c:	201b883a 	mov	r13,r4
10002210:	00000806 	br	10002234 <__ieee754_sqrt+0xdc>
10002214:	11401726 	beq	r2,r5,10002274 <__ieee754_sqrt+0x11c>
10002218:	180cd7fa 	srli	r6,r3,31
1000221c:	1085883a 	add	r2,r2,r2
10002220:	39ffffc4 	addi	r7,r7,-1
10002224:	1185883a 	add	r2,r2,r6
10002228:	18c7883a 	add	r3,r3,r3
1000222c:	2008d07a 	srli	r4,r4,1
10002230:	38001726 	beq	r7,zero,10002290 <__ieee754_sqrt+0x138>
10002234:	590d883a 	add	r6,r11,r4
10002238:	28bff60e 	bge	r5,r2,10002214 <__alt_data_end+0xf8002214>
1000223c:	3320002c 	andhi	r12,r6,32768
10002240:	3117883a 	add	r11,r6,r4
10002244:	63400826 	beq	r12,r13,10002268 <__ieee754_sqrt+0x110>
10002248:	2819883a 	mov	r12,r5
1000224c:	1145c83a 	sub	r2,r2,r5
10002250:	1980012e 	bgeu	r3,r6,10002258 <__ieee754_sqrt+0x100>
10002254:	10bfffc4 	addi	r2,r2,-1
10002258:	1987c83a 	sub	r3,r3,r6
1000225c:	4111883a 	add	r8,r8,r4
10002260:	600b883a 	mov	r5,r12
10002264:	003fec06 	br	10002218 <__alt_data_end+0xf8002218>
10002268:	583ff716 	blt	r11,zero,10002248 <__alt_data_end+0xf8002248>
1000226c:	2b000044 	addi	r12,r5,1
10002270:	003ff606 	br	1000224c <__alt_data_end+0xf800224c>
10002274:	19801936 	bltu	r3,r6,100022dc <__ieee754_sqrt+0x184>
10002278:	3320002c 	andhi	r12,r6,32768
1000227c:	3117883a 	add	r11,r6,r4
10002280:	63404626 	beq	r12,r13,1000239c <__ieee754_sqrt+0x244>
10002284:	1019883a 	mov	r12,r2
10002288:	0005883a 	mov	r2,zero
1000228c:	003ff206 	br	10002258 <__alt_data_end+0xf8002258>
10002290:	10c4b03a 	or	r2,r2,r3
10002294:	10000426 	beq	r2,zero,100022a8 <__ieee754_sqrt+0x150>
10002298:	00bfffc4 	movi	r2,-1
1000229c:	40804326 	beq	r8,r2,100023ac <__ieee754_sqrt+0x254>
100022a0:	4080004c 	andi	r2,r8,1
100022a4:	1211883a 	add	r8,r2,r8
100022a8:	4004d07a 	srli	r2,r8,1
100022ac:	4807d07a 	srai	r3,r9,1
100022b0:	010ff834 	movhi	r4,16352
100022b4:	4a40004c 	andi	r9,r9,1
100022b8:	1909883a 	add	r4,r3,r4
100022bc:	48000e1e 	bne	r9,zero,100022f8 <__ieee754_sqrt+0x1a0>
100022c0:	5006953a 	slli	r3,r10,20
100022c4:	1907883a 	add	r3,r3,r4
100022c8:	dfc00217 	ldw	ra,8(sp)
100022cc:	dc400117 	ldw	r17,4(sp)
100022d0:	dc000017 	ldw	r16,0(sp)
100022d4:	dec00304 	addi	sp,sp,12
100022d8:	f800283a 	ret
100022dc:	100b883a 	mov	r5,r2
100022e0:	003fcd06 	br	10002218 <__alt_data_end+0xf8002218>
100022e4:	4006d7fa 	srli	r3,r8,31
100022e8:	1085883a 	add	r2,r2,r2
100022ec:	4211883a 	add	r8,r8,r8
100022f0:	10c5883a 	add	r2,r2,r3
100022f4:	003fac06 	br	100021a8 <__alt_data_end+0xf80021a8>
100022f8:	10a00034 	orhi	r2,r2,32768
100022fc:	003ff006 	br	100022c0 <__alt_data_end+0xf80022c0>
10002300:	00a00034 	movhi	r2,32768
10002304:	10bfffc4 	addi	r2,r2,-1
10002308:	2884703a 	and	r2,r5,r2
1000230c:	1104b03a 	or	r2,r2,r4
10002310:	10001f26 	beq	r2,zero,10002390 <__ieee754_sqrt+0x238>
10002314:	28002c1e 	bne	r5,zero,100023c8 <__ieee754_sqrt+0x270>
10002318:	0015883a 	mov	r10,zero
1000231c:	4020d2fa 	srli	r16,r8,11
10002320:	52bffac4 	addi	r10,r10,-21
10002324:	4010957a 	slli	r8,r8,21
10002328:	803ffc26 	beq	r16,zero,1000231c <__alt_data_end+0xf800231c>
1000232c:	8080042c 	andhi	r2,r16,16
10002330:	1000211e 	bne	r2,zero,100023b8 <__ieee754_sqrt+0x260>
10002334:	0005883a 	mov	r2,zero
10002338:	8421883a 	add	r16,r16,r16
1000233c:	80c0042c 	andhi	r3,r16,16
10002340:	10800044 	addi	r2,r2,1
10002344:	183ffc26 	beq	r3,zero,10002338 <__alt_data_end+0xf8002338>
10002348:	01000044 	movi	r4,1
1000234c:	00c00804 	movi	r3,32
10002350:	2089c83a 	sub	r4,r4,r2
10002354:	1887c83a 	sub	r3,r3,r2
10002358:	40c6d83a 	srl	r3,r8,r3
1000235c:	5115883a 	add	r10,r10,r4
10002360:	4090983a 	sll	r8,r8,r2
10002364:	80e0b03a 	or	r16,r16,r3
10002368:	003f8806 	br	1000218c <__alt_data_end+0xf800218c>
1000236c:	200d883a 	mov	r6,r4
10002370:	280f883a 	mov	r7,r5
10002374:	0004b8c0 	call	10004b8c <__muldf3>
10002378:	1009883a 	mov	r4,r2
1000237c:	180b883a 	mov	r5,r3
10002380:	880d883a 	mov	r6,r17
10002384:	800f883a 	mov	r7,r16
10002388:	000372c0 	call	1000372c <__adddf3>
1000238c:	003fce06 	br	100022c8 <__alt_data_end+0xf80022c8>
10002390:	2005883a 	mov	r2,r4
10002394:	2807883a 	mov	r3,r5
10002398:	003fcb06 	br	100022c8 <__alt_data_end+0xf80022c8>
1000239c:	583fb30e 	bge	r11,zero,1000226c <__alt_data_end+0xf800226c>
100023a0:	0005883a 	mov	r2,zero
100023a4:	2819883a 	mov	r12,r5
100023a8:	003fab06 	br	10002258 <__alt_data_end+0xf8002258>
100023ac:	4a400044 	addi	r9,r9,1
100023b0:	0005883a 	mov	r2,zero
100023b4:	003fbd06 	br	100022ac <__alt_data_end+0xf80022ac>
100023b8:	00c00804 	movi	r3,32
100023bc:	01000044 	movi	r4,1
100023c0:	0005883a 	mov	r2,zero
100023c4:	003fe406 	br	10002358 <__alt_data_end+0xf8002358>
100023c8:	200d883a 	mov	r6,r4
100023cc:	280f883a 	mov	r7,r5
100023d0:	00053f80 	call	100053f8 <__subdf3>
100023d4:	1009883a 	mov	r4,r2
100023d8:	180b883a 	mov	r5,r3
100023dc:	100d883a 	mov	r6,r2
100023e0:	180f883a 	mov	r7,r3
100023e4:	0003fc80 	call	10003fc8 <__divdf3>
100023e8:	003fb706 	br	100022c8 <__alt_data_end+0xf80022c8>

100023ec <fabs>:
100023ec:	00e00034 	movhi	r3,32768
100023f0:	18ffffc4 	addi	r3,r3,-1
100023f4:	2005883a 	mov	r2,r4
100023f8:	28c6703a 	and	r3,r5,r3
100023fc:	f800283a 	ret

10002400 <finite>:
10002400:	00a00034 	movhi	r2,32768
10002404:	10bfffc4 	addi	r2,r2,-1
10002408:	288a703a 	and	r5,r5,r2
1000240c:	00e00434 	movhi	r3,32784
10002410:	28c5883a 	add	r2,r5,r3
10002414:	1004d7fa 	srli	r2,r2,31
10002418:	f800283a 	ret

1000241c <__fpclassifyd>:
1000241c:	00a00034 	movhi	r2,32768
10002420:	10bfffc4 	addi	r2,r2,-1
10002424:	2884703a 	and	r2,r5,r2
10002428:	10000726 	beq	r2,zero,10002448 <__fpclassifyd+0x2c>
1000242c:	00fffc34 	movhi	r3,65520
10002430:	019ff834 	movhi	r6,32736
10002434:	28c7883a 	add	r3,r5,r3
10002438:	31bfffc4 	addi	r6,r6,-1
1000243c:	30c00536 	bltu	r6,r3,10002454 <__fpclassifyd+0x38>
10002440:	00800104 	movi	r2,4
10002444:	f800283a 	ret
10002448:	2000021e 	bne	r4,zero,10002454 <__fpclassifyd+0x38>
1000244c:	00800084 	movi	r2,2
10002450:	f800283a 	ret
10002454:	00dffc34 	movhi	r3,32752
10002458:	019ff834 	movhi	r6,32736
1000245c:	28cb883a 	add	r5,r5,r3
10002460:	31bfffc4 	addi	r6,r6,-1
10002464:	317ff62e 	bgeu	r6,r5,10002440 <__alt_data_end+0xf8002440>
10002468:	01400434 	movhi	r5,16
1000246c:	297fffc4 	addi	r5,r5,-1
10002470:	28800236 	bltu	r5,r2,1000247c <__fpclassifyd+0x60>
10002474:	008000c4 	movi	r2,3
10002478:	f800283a 	ret
1000247c:	10c00226 	beq	r2,r3,10002488 <__fpclassifyd+0x6c>
10002480:	0005883a 	mov	r2,zero
10002484:	f800283a 	ret
10002488:	2005003a 	cmpeq	r2,r4,zero
1000248c:	f800283a 	ret

10002490 <matherr>:
10002490:	0005883a 	mov	r2,zero
10002494:	f800283a 	ret

10002498 <nan>:
10002498:	0005883a 	mov	r2,zero
1000249c:	00dffe34 	movhi	r3,32760
100024a0:	f800283a 	ret

100024a4 <rint>:
100024a4:	2813d53a 	srai	r9,r5,20
100024a8:	defff904 	addi	sp,sp,-28
100024ac:	dc400315 	stw	r17,12(sp)
100024b0:	4a41ffcc 	andi	r9,r9,2047
100024b4:	dfc00615 	stw	ra,24(sp)
100024b8:	dcc00515 	stw	r19,20(sp)
100024bc:	dc800415 	stw	r18,16(sp)
100024c0:	dc000215 	stw	r16,8(sp)
100024c4:	02c004c4 	movi	r11,19
100024c8:	4abf0044 	addi	r10,r9,-1023
100024cc:	2811883a 	mov	r8,r5
100024d0:	2005883a 	mov	r2,r4
100024d4:	280f883a 	mov	r7,r5
100024d8:	200d883a 	mov	r6,r4
100024dc:	2822d7fa 	srli	r17,r5,31
100024e0:	5a801316 	blt	r11,r10,10002530 <rint+0x8c>
100024e4:	50003c16 	blt	r10,zero,100025d8 <rint+0x134>
100024e8:	00c00434 	movhi	r3,16
100024ec:	18ffffc4 	addi	r3,r3,-1
100024f0:	1a87d83a 	sra	r3,r3,r10
100024f4:	1948703a 	and	r4,r3,r5
100024f8:	2088b03a 	or	r4,r4,r2
100024fc:	20001026 	beq	r4,zero,10002540 <rint+0x9c>
10002500:	1804d07a 	srli	r2,r3,1
10002504:	1146703a 	and	r3,r2,r5
10002508:	198cb03a 	or	r6,r3,r6
1000250c:	30005526 	beq	r6,zero,10002664 <rint+0x1c0>
10002510:	52c05b26 	beq	r10,r11,10002680 <rint+0x1dc>
10002514:	000d883a 	mov	r6,zero
10002518:	00c00134 	movhi	r3,4
1000251c:	1a87d83a 	sra	r3,r3,r10
10002520:	0084303a 	nor	r2,zero,r2
10002524:	1210703a 	and	r8,r2,r8
10002528:	40ceb03a 	or	r7,r8,r3
1000252c:	00001906 	br	10002594 <rint+0xf0>
10002530:	00c00cc4 	movi	r3,51
10002534:	1a800a0e 	bge	r3,r10,10002560 <rint+0xbc>
10002538:	00c10004 	movi	r3,1024
1000253c:	50c04d26 	beq	r10,r3,10002674 <rint+0x1d0>
10002540:	3807883a 	mov	r3,r7
10002544:	dfc00617 	ldw	ra,24(sp)
10002548:	dcc00517 	ldw	r19,20(sp)
1000254c:	dc800417 	ldw	r18,16(sp)
10002550:	dc400317 	ldw	r17,12(sp)
10002554:	dc000217 	ldw	r16,8(sp)
10002558:	dec00704 	addi	sp,sp,28
1000255c:	f800283a 	ret
10002560:	4a7efb44 	addi	r9,r9,-1043
10002564:	00ffffc4 	movi	r3,-1
10002568:	1a46d83a 	srl	r3,r3,r9
1000256c:	1908703a 	and	r4,r3,r4
10002570:	20003e26 	beq	r4,zero,1000266c <rint+0x1c8>
10002574:	1806d07a 	srli	r3,r3,1
10002578:	1884703a 	and	r2,r3,r2
1000257c:	10000526 	beq	r2,zero,10002594 <rint+0xf0>
10002580:	00900034 	movhi	r2,16384
10002584:	1253d83a 	sra	r9,r2,r9
10002588:	00c6303a 	nor	r3,zero,r3
1000258c:	198c703a 	and	r6,r3,r6
10002590:	324cb03a 	or	r6,r6,r9
10002594:	882290fa 	slli	r17,r17,3
10002598:	00c40074 	movhi	r3,4097
1000259c:	18c6d304 	addi	r3,r3,6988
100025a0:	1c63883a 	add	r17,r3,r17
100025a4:	8c800017 	ldw	r18,0(r17)
100025a8:	8c000117 	ldw	r16,4(r17)
100025ac:	9009883a 	mov	r4,r18
100025b0:	800b883a 	mov	r5,r16
100025b4:	000372c0 	call	1000372c <__adddf3>
100025b8:	d8800015 	stw	r2,0(sp)
100025bc:	d8c00115 	stw	r3,4(sp)
100025c0:	d9000017 	ldw	r4,0(sp)
100025c4:	d9400117 	ldw	r5,4(sp)
100025c8:	900d883a 	mov	r6,r18
100025cc:	800f883a 	mov	r7,r16
100025d0:	00053f80 	call	100053f8 <__subdf3>
100025d4:	003fdb06 	br	10002544 <__alt_data_end+0xf8002544>
100025d8:	04200034 	movhi	r16,32768
100025dc:	843fffc4 	addi	r16,r16,-1
100025e0:	2c06703a 	and	r3,r5,r16
100025e4:	1906b03a 	or	r3,r3,r4
100025e8:	18002026 	beq	r3,zero,1000266c <rint+0x1c8>
100025ec:	00c00434 	movhi	r3,16
100025f0:	18ffffc4 	addi	r3,r3,-1
100025f4:	28c6703a 	and	r3,r5,r3
100025f8:	1886b03a 	or	r3,r3,r2
100025fc:	880890fa 	slli	r4,r17,3
10002600:	00d3c83a 	sub	r9,zero,r3
10002604:	48d2b03a 	or	r9,r9,r3
10002608:	00c40074 	movhi	r3,4097
1000260c:	18c6d304 	addi	r3,r3,6988
10002610:	1907883a 	add	r3,r3,r4
10002614:	4812d33a 	srli	r9,r9,12
10002618:	1cc00017 	ldw	r19,0(r3)
1000261c:	1c800117 	ldw	r18,4(r3)
10002620:	4a40022c 	andhi	r9,r9,8
10002624:	29ffffac 	andhi	r7,r5,65534
10002628:	49ceb03a 	or	r7,r9,r7
1000262c:	9809883a 	mov	r4,r19
10002630:	900b883a 	mov	r5,r18
10002634:	000372c0 	call	1000372c <__adddf3>
10002638:	d8800015 	stw	r2,0(sp)
1000263c:	d8c00115 	stw	r3,4(sp)
10002640:	d9000017 	ldw	r4,0(sp)
10002644:	d9400117 	ldw	r5,4(sp)
10002648:	980d883a 	mov	r6,r19
1000264c:	900f883a 	mov	r7,r18
10002650:	00053f80 	call	100053f8 <__subdf3>
10002654:	881097fa 	slli	r8,r17,31
10002658:	1c06703a 	and	r3,r3,r16
1000265c:	40c6b03a 	or	r3,r8,r3
10002660:	003fb806 	br	10002544 <__alt_data_end+0xf8002544>
10002664:	000d883a 	mov	r6,zero
10002668:	003fca06 	br	10002594 <__alt_data_end+0xf8002594>
1000266c:	4007883a 	mov	r3,r8
10002670:	003fb406 	br	10002544 <__alt_data_end+0xf8002544>
10002674:	200d883a 	mov	r6,r4
10002678:	000372c0 	call	1000372c <__adddf3>
1000267c:	003fb106 	br	10002544 <__alt_data_end+0xf8002544>
10002680:	01a00034 	movhi	r6,32768
10002684:	003fa406 	br	10002518 <__alt_data_end+0xf8002518>

10002688 <scalbn>:
10002688:	2a1ffc2c 	andhi	r8,r5,32752
1000268c:	4011d53a 	srai	r8,r8,20
10002690:	defffe04 	addi	sp,sp,-8
10002694:	dc000015 	stw	r16,0(sp)
10002698:	dfc00115 	stw	ra,4(sp)
1000269c:	280f883a 	mov	r7,r5
100026a0:	2015883a 	mov	r10,r4
100026a4:	3021883a 	mov	r16,r6
100026a8:	4000251e 	bne	r8,zero,10002740 <scalbn+0xb8>
100026ac:	00a00034 	movhi	r2,32768
100026b0:	10bfffc4 	addi	r2,r2,-1
100026b4:	2884703a 	and	r2,r5,r2
100026b8:	1104b03a 	or	r2,r2,r4
100026bc:	10003126 	beq	r2,zero,10002784 <scalbn+0xfc>
100026c0:	01d0d434 	movhi	r7,17232
100026c4:	000d883a 	mov	r6,zero
100026c8:	0004b8c0 	call	10004b8c <__muldf3>
100026cc:	013ffff4 	movhi	r4,65535
100026d0:	210f2c04 	addi	r4,r4,15536
100026d4:	1015883a 	mov	r10,r2
100026d8:	180f883a 	mov	r7,r3
100026dc:	81002f16 	blt	r16,r4,1000279c <scalbn+0x114>
100026e0:	1a5ffc2c 	andhi	r9,r3,32752
100026e4:	4813d53a 	srai	r9,r9,20
100026e8:	0081ff84 	movi	r2,2046
100026ec:	180d883a 	mov	r6,r3
100026f0:	4a3ff284 	addi	r8,r9,-54
100026f4:	4411883a 	add	r8,r8,r16
100026f8:	1200170e 	bge	r2,r8,10002758 <scalbn+0xd0>
100026fc:	01220034 	movhi	r4,34816
10002700:	015f8e34 	movhi	r5,32312
10002704:	500d883a 	mov	r6,r10
10002708:	211d6704 	addi	r4,r4,30108
1000270c:	29790f04 	addi	r5,r5,-7108
10002710:	00028540 	call	10002854 <copysign>
10002714:	01a20034 	movhi	r6,34816
10002718:	01df8e34 	movhi	r7,32312
1000271c:	1009883a 	mov	r4,r2
10002720:	180b883a 	mov	r5,r3
10002724:	319d6704 	addi	r6,r6,30108
10002728:	39f90f04 	addi	r7,r7,-7108
1000272c:	0004b8c0 	call	10004b8c <__muldf3>
10002730:	dfc00117 	ldw	ra,4(sp)
10002734:	dc000017 	ldw	r16,0(sp)
10002738:	dec00204 	addi	sp,sp,8
1000273c:	f800283a 	ret
10002740:	0081ffc4 	movi	r2,2047
10002744:	280d883a 	mov	r6,r5
10002748:	40803126 	beq	r8,r2,10002810 <scalbn+0x188>
1000274c:	4411883a 	add	r8,r8,r16
10002750:	0081ff84 	movi	r2,2046
10002754:	123fe916 	blt	r2,r8,100026fc <__alt_data_end+0xf80026fc>
10002758:	02001b0e 	bge	zero,r8,100027c8 <scalbn+0x140>
1000275c:	4010953a 	slli	r8,r8,20
10002760:	00e00434 	movhi	r3,32784
10002764:	18ffffc4 	addi	r3,r3,-1
10002768:	30ce703a 	and	r7,r6,r3
1000276c:	5005883a 	mov	r2,r10
10002770:	41c6b03a 	or	r3,r8,r7
10002774:	dfc00117 	ldw	ra,4(sp)
10002778:	dc000017 	ldw	r16,0(sp)
1000277c:	dec00204 	addi	sp,sp,8
10002780:	f800283a 	ret
10002784:	2005883a 	mov	r2,r4
10002788:	2807883a 	mov	r3,r5
1000278c:	dfc00117 	ldw	ra,4(sp)
10002790:	dc000017 	ldw	r16,0(sp)
10002794:	dec00204 	addi	sp,sp,8
10002798:	f800283a 	ret
1000279c:	01b0be74 	movhi	r6,49913
100027a0:	01c06974 	movhi	r7,421
100027a4:	31bcd644 	addi	r6,r6,-3239
100027a8:	39db87c4 	addi	r7,r7,28191
100027ac:	1009883a 	mov	r4,r2
100027b0:	180b883a 	mov	r5,r3
100027b4:	0004b8c0 	call	10004b8c <__muldf3>
100027b8:	dfc00117 	ldw	ra,4(sp)
100027bc:	dc000017 	ldw	r16,0(sp)
100027c0:	dec00204 	addi	sp,sp,8
100027c4:	f800283a 	ret
100027c8:	00bff2c4 	movi	r2,-53
100027cc:	4080160e 	bge	r8,r2,10002828 <scalbn+0x1a0>
100027d0:	00b0d414 	movui	r2,50000
100027d4:	143fc916 	blt	r2,r16,100026fc <__alt_data_end+0xf80026fc>
100027d8:	0130be74 	movhi	r4,49913
100027dc:	01406974 	movhi	r5,421
100027e0:	500d883a 	mov	r6,r10
100027e4:	213cd644 	addi	r4,r4,-3239
100027e8:	295b87c4 	addi	r5,r5,28191
100027ec:	00028540 	call	10002854 <copysign>
100027f0:	01b0be74 	movhi	r6,49913
100027f4:	01c06974 	movhi	r7,421
100027f8:	1009883a 	mov	r4,r2
100027fc:	180b883a 	mov	r5,r3
10002800:	31bcd644 	addi	r6,r6,-3239
10002804:	39db87c4 	addi	r7,r7,28191
10002808:	0004b8c0 	call	10004b8c <__muldf3>
1000280c:	003fd906 	br	10002774 <__alt_data_end+0xf8002774>
10002810:	200d883a 	mov	r6,r4
10002814:	000372c0 	call	1000372c <__adddf3>
10002818:	dfc00117 	ldw	ra,4(sp)
1000281c:	dc000017 	ldw	r16,0(sp)
10002820:	dec00204 	addi	sp,sp,8
10002824:	f800283a 	ret
10002828:	42000d84 	addi	r8,r8,54
1000282c:	4012953a 	slli	r9,r8,20
10002830:	01e00434 	movhi	r7,32784
10002834:	39ffffc4 	addi	r7,r7,-1
10002838:	31ca703a 	and	r5,r6,r7
1000283c:	5009883a 	mov	r4,r10
10002840:	494ab03a 	or	r5,r9,r5
10002844:	000d883a 	mov	r6,zero
10002848:	01cf2434 	movhi	r7,15504
1000284c:	0004b8c0 	call	10004b8c <__muldf3>
10002850:	003fc806 	br	10002774 <__alt_data_end+0xf8002774>

10002854 <copysign>:
10002854:	2005883a 	mov	r2,r4
10002858:	01200034 	movhi	r4,32768
1000285c:	213fffc4 	addi	r4,r4,-1
10002860:	38e0002c 	andhi	r3,r7,32768
10002864:	290a703a 	and	r5,r5,r4
10002868:	1946b03a 	or	r3,r3,r5
1000286c:	f800283a 	ret

10002870 <__muldi3>:
10002870:	defff604 	addi	sp,sp,-40
10002874:	dd800615 	stw	r22,24(sp)
10002878:	dd400515 	stw	r21,20(sp)
1000287c:	25bfffcc 	andi	r22,r4,65535
10002880:	357fffcc 	andi	r21,r6,65535
10002884:	dc400115 	stw	r17,4(sp)
10002888:	2022d43a 	srli	r17,r4,16
1000288c:	dcc00315 	stw	r19,12(sp)
10002890:	dc800215 	stw	r18,8(sp)
10002894:	2027883a 	mov	r19,r4
10002898:	2825883a 	mov	r18,r5
1000289c:	a809883a 	mov	r4,r21
100028a0:	b00b883a 	mov	r5,r22
100028a4:	dfc00915 	stw	ra,36(sp)
100028a8:	df000815 	stw	fp,32(sp)
100028ac:	ddc00715 	stw	r23,28(sp)
100028b0:	3839883a 	mov	fp,r7
100028b4:	302ed43a 	srli	r23,r6,16
100028b8:	dd000415 	stw	r20,16(sp)
100028bc:	dc000015 	stw	r16,0(sp)
100028c0:	3029883a 	mov	r20,r6
100028c4:	00037040 	call	10003704 <__mulsi3>
100028c8:	a809883a 	mov	r4,r21
100028cc:	880b883a 	mov	r5,r17
100028d0:	1021883a 	mov	r16,r2
100028d4:	00037040 	call	10003704 <__mulsi3>
100028d8:	880b883a 	mov	r5,r17
100028dc:	b809883a 	mov	r4,r23
100028e0:	102b883a 	mov	r21,r2
100028e4:	00037040 	call	10003704 <__mulsi3>
100028e8:	b809883a 	mov	r4,r23
100028ec:	b00b883a 	mov	r5,r22
100028f0:	1023883a 	mov	r17,r2
100028f4:	00037040 	call	10003704 <__mulsi3>
100028f8:	8012d43a 	srli	r9,r16,16
100028fc:	a885883a 	add	r2,r21,r2
10002900:	1251883a 	add	r8,r2,r9
10002904:	4540022e 	bgeu	r8,r21,10002910 <__muldi3+0xa0>
10002908:	00800074 	movhi	r2,1
1000290c:	88a3883a 	add	r17,r17,r2
10002910:	4006d43a 	srli	r3,r8,16
10002914:	4010943a 	slli	r8,r8,16
10002918:	9809883a 	mov	r4,r19
1000291c:	e00b883a 	mov	r5,fp
10002920:	843fffcc 	andi	r16,r16,65535
10002924:	88e3883a 	add	r17,r17,r3
10002928:	4421883a 	add	r16,r8,r16
1000292c:	00037040 	call	10003704 <__mulsi3>
10002930:	a009883a 	mov	r4,r20
10002934:	900b883a 	mov	r5,r18
10002938:	1027883a 	mov	r19,r2
1000293c:	00037040 	call	10003704 <__mulsi3>
10002940:	9885883a 	add	r2,r19,r2
10002944:	1447883a 	add	r3,r2,r17
10002948:	8005883a 	mov	r2,r16
1000294c:	dfc00917 	ldw	ra,36(sp)
10002950:	df000817 	ldw	fp,32(sp)
10002954:	ddc00717 	ldw	r23,28(sp)
10002958:	dd800617 	ldw	r22,24(sp)
1000295c:	dd400517 	ldw	r21,20(sp)
10002960:	dd000417 	ldw	r20,16(sp)
10002964:	dcc00317 	ldw	r19,12(sp)
10002968:	dc800217 	ldw	r18,8(sp)
1000296c:	dc400117 	ldw	r17,4(sp)
10002970:	dc000017 	ldw	r16,0(sp)
10002974:	dec00a04 	addi	sp,sp,40
10002978:	f800283a 	ret

1000297c <__udivdi3>:
1000297c:	defff504 	addi	sp,sp,-44
10002980:	dcc00415 	stw	r19,16(sp)
10002984:	dc000115 	stw	r16,4(sp)
10002988:	dfc00a15 	stw	ra,40(sp)
1000298c:	df000915 	stw	fp,36(sp)
10002990:	ddc00815 	stw	r23,32(sp)
10002994:	dd800715 	stw	r22,28(sp)
10002998:	dd400615 	stw	r21,24(sp)
1000299c:	dd000515 	stw	r20,20(sp)
100029a0:	dc800315 	stw	r18,12(sp)
100029a4:	dc400215 	stw	r17,8(sp)
100029a8:	2027883a 	mov	r19,r4
100029ac:	2821883a 	mov	r16,r5
100029b0:	3800471e 	bne	r7,zero,10002ad0 <__udivdi3+0x154>
100029b4:	3025883a 	mov	r18,r6
100029b8:	2023883a 	mov	r17,r4
100029bc:	2980592e 	bgeu	r5,r6,10002b24 <__udivdi3+0x1a8>
100029c0:	00bfffd4 	movui	r2,65535
100029c4:	2829883a 	mov	r20,r5
100029c8:	1180b236 	bltu	r2,r6,10002c94 <__udivdi3+0x318>
100029cc:	00803fc4 	movi	r2,255
100029d0:	1181622e 	bgeu	r2,r6,10002f5c <__udivdi3+0x5e0>
100029d4:	00800204 	movi	r2,8
100029d8:	1007883a 	mov	r3,r2
100029dc:	3084d83a 	srl	r2,r6,r2
100029e0:	01040074 	movhi	r4,4097
100029e4:	2106d704 	addi	r4,r4,7004
100029e8:	2085883a 	add	r2,r4,r2
100029ec:	11000003 	ldbu	r4,0(r2)
100029f0:	20c9883a 	add	r4,r4,r3
100029f4:	00c00804 	movi	r3,32
100029f8:	1907c83a 	sub	r3,r3,r4
100029fc:	18000526 	beq	r3,zero,10002a14 <__udivdi3+0x98>
10002a00:	80e0983a 	sll	r16,r16,r3
10002a04:	9908d83a 	srl	r4,r19,r4
10002a08:	30e4983a 	sll	r18,r6,r3
10002a0c:	98e2983a 	sll	r17,r19,r3
10002a10:	8128b03a 	or	r20,r16,r4
10002a14:	902ad43a 	srli	r21,r18,16
10002a18:	a009883a 	mov	r4,r20
10002a1c:	95bfffcc 	andi	r22,r18,65535
10002a20:	a80b883a 	mov	r5,r21
10002a24:	00036fc0 	call	100036fc <__umodsi3>
10002a28:	a009883a 	mov	r4,r20
10002a2c:	a80b883a 	mov	r5,r21
10002a30:	102f883a 	mov	r23,r2
10002a34:	00036f40 	call	100036f4 <__udivsi3>
10002a38:	1009883a 	mov	r4,r2
10002a3c:	b00b883a 	mov	r5,r22
10002a40:	1021883a 	mov	r16,r2
10002a44:	00037040 	call	10003704 <__mulsi3>
10002a48:	b82e943a 	slli	r23,r23,16
10002a4c:	8808d43a 	srli	r4,r17,16
10002a50:	b906b03a 	or	r3,r23,r4
10002a54:	1880052e 	bgeu	r3,r2,10002a6c <__udivdi3+0xf0>
10002a58:	1c87883a 	add	r3,r3,r18
10002a5c:	813fffc4 	addi	r4,r16,-1
10002a60:	1c800136 	bltu	r3,r18,10002a68 <__udivdi3+0xec>
10002a64:	18815236 	bltu	r3,r2,10002fb0 <__udivdi3+0x634>
10002a68:	2021883a 	mov	r16,r4
10002a6c:	18a7c83a 	sub	r19,r3,r2
10002a70:	9809883a 	mov	r4,r19
10002a74:	a80b883a 	mov	r5,r21
10002a78:	00036fc0 	call	100036fc <__umodsi3>
10002a7c:	1029883a 	mov	r20,r2
10002a80:	9809883a 	mov	r4,r19
10002a84:	a80b883a 	mov	r5,r21
10002a88:	a028943a 	slli	r20,r20,16
10002a8c:	00036f40 	call	100036f4 <__udivsi3>
10002a90:	1009883a 	mov	r4,r2
10002a94:	b00b883a 	mov	r5,r22
10002a98:	8c7fffcc 	andi	r17,r17,65535
10002a9c:	1027883a 	mov	r19,r2
10002aa0:	a462b03a 	or	r17,r20,r17
10002aa4:	00037040 	call	10003704 <__mulsi3>
10002aa8:	8880052e 	bgeu	r17,r2,10002ac0 <__udivdi3+0x144>
10002aac:	8ca3883a 	add	r17,r17,r18
10002ab0:	98ffffc4 	addi	r3,r19,-1
10002ab4:	8c811036 	bltu	r17,r18,10002ef8 <__udivdi3+0x57c>
10002ab8:	88810f2e 	bgeu	r17,r2,10002ef8 <__udivdi3+0x57c>
10002abc:	9cffff84 	addi	r19,r19,-2
10002ac0:	8020943a 	slli	r16,r16,16
10002ac4:	0007883a 	mov	r3,zero
10002ac8:	9c04b03a 	or	r2,r19,r16
10002acc:	00006006 	br	10002c50 <__udivdi3+0x2d4>
10002ad0:	29c05d36 	bltu	r5,r7,10002c48 <__udivdi3+0x2cc>
10002ad4:	00bfffd4 	movui	r2,65535
10002ad8:	11c0692e 	bgeu	r2,r7,10002c80 <__udivdi3+0x304>
10002adc:	00804034 	movhi	r2,256
10002ae0:	10bfffc4 	addi	r2,r2,-1
10002ae4:	11c10e2e 	bgeu	r2,r7,10002f20 <__udivdi3+0x5a4>
10002ae8:	01400604 	movi	r5,24
10002aec:	2811883a 	mov	r8,r5
10002af0:	394ad83a 	srl	r5,r7,r5
10002af4:	00840074 	movhi	r2,4097
10002af8:	1086d704 	addi	r2,r2,7004
10002afc:	114b883a 	add	r5,r2,r5
10002b00:	29400003 	ldbu	r5,0(r5)
10002b04:	00c00804 	movi	r3,32
10002b08:	2a0b883a 	add	r5,r5,r8
10002b0c:	196fc83a 	sub	r23,r3,r5
10002b10:	b8006b1e 	bne	r23,zero,10002cc0 <__udivdi3+0x344>
10002b14:	3c011436 	bltu	r7,r16,10002f68 <__udivdi3+0x5ec>
10002b18:	9985403a 	cmpgeu	r2,r19,r6
10002b1c:	0007883a 	mov	r3,zero
10002b20:	00004b06 	br	10002c50 <__udivdi3+0x2d4>
10002b24:	3000041e 	bne	r6,zero,10002b38 <__udivdi3+0x1bc>
10002b28:	01000044 	movi	r4,1
10002b2c:	000b883a 	mov	r5,zero
10002b30:	00036f40 	call	100036f4 <__udivsi3>
10002b34:	1025883a 	mov	r18,r2
10002b38:	00bfffd4 	movui	r2,65535
10002b3c:	14805b2e 	bgeu	r2,r18,10002cac <__udivdi3+0x330>
10002b40:	00804034 	movhi	r2,256
10002b44:	10bfffc4 	addi	r2,r2,-1
10002b48:	1480fe2e 	bgeu	r2,r18,10002f44 <__udivdi3+0x5c8>
10002b4c:	00800604 	movi	r2,24
10002b50:	1007883a 	mov	r3,r2
10002b54:	9084d83a 	srl	r2,r18,r2
10002b58:	01040074 	movhi	r4,4097
10002b5c:	2106d704 	addi	r4,r4,7004
10002b60:	2085883a 	add	r2,r4,r2
10002b64:	11800003 	ldbu	r6,0(r2)
10002b68:	01c00804 	movi	r7,32
10002b6c:	30c7883a 	add	r3,r6,r3
10002b70:	38cfc83a 	sub	r7,r7,r3
10002b74:	3800a71e 	bne	r7,zero,10002e14 <__udivdi3+0x498>
10002b78:	9028d43a 	srli	r20,r18,16
10002b7c:	84a1c83a 	sub	r16,r16,r18
10002b80:	957fffcc 	andi	r21,r18,65535
10002b84:	00c00044 	movi	r3,1
10002b88:	8009883a 	mov	r4,r16
10002b8c:	a00b883a 	mov	r5,r20
10002b90:	d8c00015 	stw	r3,0(sp)
10002b94:	00036fc0 	call	100036fc <__umodsi3>
10002b98:	8009883a 	mov	r4,r16
10002b9c:	a00b883a 	mov	r5,r20
10002ba0:	102d883a 	mov	r22,r2
10002ba4:	00036f40 	call	100036f4 <__udivsi3>
10002ba8:	1009883a 	mov	r4,r2
10002bac:	a80b883a 	mov	r5,r21
10002bb0:	1021883a 	mov	r16,r2
10002bb4:	00037040 	call	10003704 <__mulsi3>
10002bb8:	b02c943a 	slli	r22,r22,16
10002bbc:	880ed43a 	srli	r7,r17,16
10002bc0:	d8c00017 	ldw	r3,0(sp)
10002bc4:	b1ccb03a 	or	r6,r22,r7
10002bc8:	3080052e 	bgeu	r6,r2,10002be0 <__udivdi3+0x264>
10002bcc:	348d883a 	add	r6,r6,r18
10002bd0:	813fffc4 	addi	r4,r16,-1
10002bd4:	34800136 	bltu	r6,r18,10002bdc <__udivdi3+0x260>
10002bd8:	3080f236 	bltu	r6,r2,10002fa4 <__udivdi3+0x628>
10002bdc:	2021883a 	mov	r16,r4
10002be0:	30a7c83a 	sub	r19,r6,r2
10002be4:	9809883a 	mov	r4,r19
10002be8:	a00b883a 	mov	r5,r20
10002bec:	d8c00015 	stw	r3,0(sp)
10002bf0:	00036fc0 	call	100036fc <__umodsi3>
10002bf4:	102d883a 	mov	r22,r2
10002bf8:	9809883a 	mov	r4,r19
10002bfc:	a00b883a 	mov	r5,r20
10002c00:	b02c943a 	slli	r22,r22,16
10002c04:	00036f40 	call	100036f4 <__udivsi3>
10002c08:	1009883a 	mov	r4,r2
10002c0c:	a80b883a 	mov	r5,r21
10002c10:	8c7fffcc 	andi	r17,r17,65535
10002c14:	1027883a 	mov	r19,r2
10002c18:	b462b03a 	or	r17,r22,r17
10002c1c:	00037040 	call	10003704 <__mulsi3>
10002c20:	d8c00017 	ldw	r3,0(sp)
10002c24:	8880052e 	bgeu	r17,r2,10002c3c <__udivdi3+0x2c0>
10002c28:	8ca3883a 	add	r17,r17,r18
10002c2c:	993fffc4 	addi	r4,r19,-1
10002c30:	8c80af36 	bltu	r17,r18,10002ef0 <__udivdi3+0x574>
10002c34:	8880ae2e 	bgeu	r17,r2,10002ef0 <__udivdi3+0x574>
10002c38:	9cffff84 	addi	r19,r19,-2
10002c3c:	8020943a 	slli	r16,r16,16
10002c40:	9c04b03a 	or	r2,r19,r16
10002c44:	00000206 	br	10002c50 <__udivdi3+0x2d4>
10002c48:	0007883a 	mov	r3,zero
10002c4c:	0005883a 	mov	r2,zero
10002c50:	dfc00a17 	ldw	ra,40(sp)
10002c54:	df000917 	ldw	fp,36(sp)
10002c58:	ddc00817 	ldw	r23,32(sp)
10002c5c:	dd800717 	ldw	r22,28(sp)
10002c60:	dd400617 	ldw	r21,24(sp)
10002c64:	dd000517 	ldw	r20,20(sp)
10002c68:	dcc00417 	ldw	r19,16(sp)
10002c6c:	dc800317 	ldw	r18,12(sp)
10002c70:	dc400217 	ldw	r17,8(sp)
10002c74:	dc000117 	ldw	r16,4(sp)
10002c78:	dec00b04 	addi	sp,sp,44
10002c7c:	f800283a 	ret
10002c80:	00803fc4 	movi	r2,255
10002c84:	11c0a92e 	bgeu	r2,r7,10002f2c <__udivdi3+0x5b0>
10002c88:	01400204 	movi	r5,8
10002c8c:	2811883a 	mov	r8,r5
10002c90:	003f9706 	br	10002af0 <__alt_data_end+0xf8002af0>
10002c94:	00804034 	movhi	r2,256
10002c98:	10bfffc4 	addi	r2,r2,-1
10002c9c:	1180a62e 	bgeu	r2,r6,10002f38 <__udivdi3+0x5bc>
10002ca0:	00800604 	movi	r2,24
10002ca4:	1007883a 	mov	r3,r2
10002ca8:	003f4c06 	br	100029dc <__alt_data_end+0xf80029dc>
10002cac:	00803fc4 	movi	r2,255
10002cb0:	1480a72e 	bgeu	r2,r18,10002f50 <__udivdi3+0x5d4>
10002cb4:	00800204 	movi	r2,8
10002cb8:	1007883a 	mov	r3,r2
10002cbc:	003fa506 	br	10002b54 <__alt_data_end+0xf8002b54>
10002cc0:	3178d83a 	srl	fp,r6,r5
10002cc4:	3dce983a 	sll	r7,r7,r23
10002cc8:	8168d83a 	srl	r20,r16,r5
10002ccc:	9950d83a 	srl	r8,r19,r5
10002cd0:	3f38b03a 	or	fp,r7,fp
10002cd4:	e024d43a 	srli	r18,fp,16
10002cd8:	85e0983a 	sll	r16,r16,r23
10002cdc:	a009883a 	mov	r4,r20
10002ce0:	900b883a 	mov	r5,r18
10002ce4:	8220b03a 	or	r16,r16,r8
10002ce8:	35ea983a 	sll	r21,r6,r23
10002cec:	00036fc0 	call	100036fc <__umodsi3>
10002cf0:	a009883a 	mov	r4,r20
10002cf4:	900b883a 	mov	r5,r18
10002cf8:	1023883a 	mov	r17,r2
10002cfc:	e5bfffcc 	andi	r22,fp,65535
10002d00:	00036f40 	call	100036f4 <__udivsi3>
10002d04:	1009883a 	mov	r4,r2
10002d08:	b00b883a 	mov	r5,r22
10002d0c:	1029883a 	mov	r20,r2
10002d10:	00037040 	call	10003704 <__mulsi3>
10002d14:	8806943a 	slli	r3,r17,16
10002d18:	8014d43a 	srli	r10,r16,16
10002d1c:	1a92b03a 	or	r9,r3,r10
10002d20:	4880042e 	bgeu	r9,r2,10002d34 <__udivdi3+0x3b8>
10002d24:	4f13883a 	add	r9,r9,fp
10002d28:	a0ffffc4 	addi	r3,r20,-1
10002d2c:	4f00952e 	bgeu	r9,fp,10002f84 <__udivdi3+0x608>
10002d30:	1829883a 	mov	r20,r3
10002d34:	48a3c83a 	sub	r17,r9,r2
10002d38:	8809883a 	mov	r4,r17
10002d3c:	900b883a 	mov	r5,r18
10002d40:	00036fc0 	call	100036fc <__umodsi3>
10002d44:	8809883a 	mov	r4,r17
10002d48:	900b883a 	mov	r5,r18
10002d4c:	d8800015 	stw	r2,0(sp)
10002d50:	00036f40 	call	100036f4 <__udivsi3>
10002d54:	1009883a 	mov	r4,r2
10002d58:	b00b883a 	mov	r5,r22
10002d5c:	1023883a 	mov	r17,r2
10002d60:	00037040 	call	10003704 <__mulsi3>
10002d64:	d8c00017 	ldw	r3,0(sp)
10002d68:	823fffcc 	andi	r8,r16,65535
10002d6c:	1806943a 	slli	r3,r3,16
10002d70:	1a20b03a 	or	r16,r3,r8
10002d74:	8080042e 	bgeu	r16,r2,10002d88 <__udivdi3+0x40c>
10002d78:	8721883a 	add	r16,r16,fp
10002d7c:	88ffffc4 	addi	r3,r17,-1
10002d80:	87007c2e 	bgeu	r16,fp,10002f74 <__udivdi3+0x5f8>
10002d84:	1823883a 	mov	r17,r3
10002d88:	a028943a 	slli	r20,r20,16
10002d8c:	acbfffcc 	andi	r18,r21,65535
10002d90:	900b883a 	mov	r5,r18
10002d94:	8d28b03a 	or	r20,r17,r20
10002d98:	a022d43a 	srli	r17,r20,16
10002d9c:	a5bfffcc 	andi	r22,r20,65535
10002da0:	b009883a 	mov	r4,r22
10002da4:	a82ad43a 	srli	r21,r21,16
10002da8:	80a1c83a 	sub	r16,r16,r2
10002dac:	00037040 	call	10003704 <__mulsi3>
10002db0:	8809883a 	mov	r4,r17
10002db4:	900b883a 	mov	r5,r18
10002db8:	1039883a 	mov	fp,r2
10002dbc:	00037040 	call	10003704 <__mulsi3>
10002dc0:	8809883a 	mov	r4,r17
10002dc4:	a80b883a 	mov	r5,r21
10002dc8:	1025883a 	mov	r18,r2
10002dcc:	00037040 	call	10003704 <__mulsi3>
10002dd0:	b009883a 	mov	r4,r22
10002dd4:	a80b883a 	mov	r5,r21
10002dd8:	1023883a 	mov	r17,r2
10002ddc:	00037040 	call	10003704 <__mulsi3>
10002de0:	e006d43a 	srli	r3,fp,16
10002de4:	9085883a 	add	r2,r18,r2
10002de8:	10c7883a 	add	r3,r2,r3
10002dec:	1c80022e 	bgeu	r3,r18,10002df8 <__udivdi3+0x47c>
10002df0:	00800074 	movhi	r2,1
10002df4:	88a3883a 	add	r17,r17,r2
10002df8:	1808d43a 	srli	r4,r3,16
10002dfc:	8909883a 	add	r4,r17,r4
10002e00:	81004436 	bltu	r16,r4,10002f14 <__udivdi3+0x598>
10002e04:	81003e26 	beq	r16,r4,10002f00 <__udivdi3+0x584>
10002e08:	a005883a 	mov	r2,r20
10002e0c:	0007883a 	mov	r3,zero
10002e10:	003f8f06 	br	10002c50 <__alt_data_end+0xf8002c50>
10002e14:	91e4983a 	sll	r18,r18,r7
10002e18:	80eed83a 	srl	r23,r16,r3
10002e1c:	81cc983a 	sll	r6,r16,r7
10002e20:	9028d43a 	srli	r20,r18,16
10002e24:	98c6d83a 	srl	r3,r19,r3
10002e28:	b809883a 	mov	r4,r23
10002e2c:	a00b883a 	mov	r5,r20
10002e30:	30ecb03a 	or	r22,r6,r3
10002e34:	99e2983a 	sll	r17,r19,r7
10002e38:	00036fc0 	call	100036fc <__umodsi3>
10002e3c:	b809883a 	mov	r4,r23
10002e40:	a00b883a 	mov	r5,r20
10002e44:	1021883a 	mov	r16,r2
10002e48:	957fffcc 	andi	r21,r18,65535
10002e4c:	00036f40 	call	100036f4 <__udivsi3>
10002e50:	a80b883a 	mov	r5,r21
10002e54:	1009883a 	mov	r4,r2
10002e58:	102f883a 	mov	r23,r2
10002e5c:	00037040 	call	10003704 <__mulsi3>
10002e60:	8020943a 	slli	r16,r16,16
10002e64:	b00ad43a 	srli	r5,r22,16
10002e68:	814cb03a 	or	r6,r16,r5
10002e6c:	3080062e 	bgeu	r6,r2,10002e88 <__udivdi3+0x50c>
10002e70:	348d883a 	add	r6,r6,r18
10002e74:	b8ffffc4 	addi	r3,r23,-1
10002e78:	34804836 	bltu	r6,r18,10002f9c <__udivdi3+0x620>
10002e7c:	3080472e 	bgeu	r6,r2,10002f9c <__udivdi3+0x620>
10002e80:	bdffff84 	addi	r23,r23,-2
10002e84:	348d883a 	add	r6,r6,r18
10002e88:	30a7c83a 	sub	r19,r6,r2
10002e8c:	9809883a 	mov	r4,r19
10002e90:	a00b883a 	mov	r5,r20
10002e94:	00036fc0 	call	100036fc <__umodsi3>
10002e98:	9809883a 	mov	r4,r19
10002e9c:	a00b883a 	mov	r5,r20
10002ea0:	1039883a 	mov	fp,r2
10002ea4:	00036f40 	call	100036f4 <__udivsi3>
10002ea8:	1009883a 	mov	r4,r2
10002eac:	a80b883a 	mov	r5,r21
10002eb0:	e038943a 	slli	fp,fp,16
10002eb4:	1027883a 	mov	r19,r2
10002eb8:	00037040 	call	10003704 <__mulsi3>
10002ebc:	b1bfffcc 	andi	r6,r22,65535
10002ec0:	e18cb03a 	or	r6,fp,r6
10002ec4:	3080062e 	bgeu	r6,r2,10002ee0 <__udivdi3+0x564>
10002ec8:	348d883a 	add	r6,r6,r18
10002ecc:	98ffffc4 	addi	r3,r19,-1
10002ed0:	34803036 	bltu	r6,r18,10002f94 <__udivdi3+0x618>
10002ed4:	30802f2e 	bgeu	r6,r2,10002f94 <__udivdi3+0x618>
10002ed8:	9cffff84 	addi	r19,r19,-2
10002edc:	348d883a 	add	r6,r6,r18
10002ee0:	b82e943a 	slli	r23,r23,16
10002ee4:	30a1c83a 	sub	r16,r6,r2
10002ee8:	9dc6b03a 	or	r3,r19,r23
10002eec:	003f2606 	br	10002b88 <__alt_data_end+0xf8002b88>
10002ef0:	2027883a 	mov	r19,r4
10002ef4:	003f5106 	br	10002c3c <__alt_data_end+0xf8002c3c>
10002ef8:	1827883a 	mov	r19,r3
10002efc:	003ef006 	br	10002ac0 <__alt_data_end+0xf8002ac0>
10002f00:	1808943a 	slli	r4,r3,16
10002f04:	9dc6983a 	sll	r3,r19,r23
10002f08:	e73fffcc 	andi	fp,fp,65535
10002f0c:	2709883a 	add	r4,r4,fp
10002f10:	193fbd2e 	bgeu	r3,r4,10002e08 <__alt_data_end+0xf8002e08>
10002f14:	a0bfffc4 	addi	r2,r20,-1
10002f18:	0007883a 	mov	r3,zero
10002f1c:	003f4c06 	br	10002c50 <__alt_data_end+0xf8002c50>
10002f20:	01400404 	movi	r5,16
10002f24:	2811883a 	mov	r8,r5
10002f28:	003ef106 	br	10002af0 <__alt_data_end+0xf8002af0>
10002f2c:	000b883a 	mov	r5,zero
10002f30:	0011883a 	mov	r8,zero
10002f34:	003eee06 	br	10002af0 <__alt_data_end+0xf8002af0>
10002f38:	00800404 	movi	r2,16
10002f3c:	1007883a 	mov	r3,r2
10002f40:	003ea606 	br	100029dc <__alt_data_end+0xf80029dc>
10002f44:	00800404 	movi	r2,16
10002f48:	1007883a 	mov	r3,r2
10002f4c:	003f0106 	br	10002b54 <__alt_data_end+0xf8002b54>
10002f50:	0005883a 	mov	r2,zero
10002f54:	0007883a 	mov	r3,zero
10002f58:	003efe06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002f5c:	0005883a 	mov	r2,zero
10002f60:	0007883a 	mov	r3,zero
10002f64:	003e9d06 	br	100029dc <__alt_data_end+0xf80029dc>
10002f68:	0007883a 	mov	r3,zero
10002f6c:	00800044 	movi	r2,1
10002f70:	003f3706 	br	10002c50 <__alt_data_end+0xf8002c50>
10002f74:	80bf832e 	bgeu	r16,r2,10002d84 <__alt_data_end+0xf8002d84>
10002f78:	8c7fff84 	addi	r17,r17,-2
10002f7c:	8721883a 	add	r16,r16,fp
10002f80:	003f8106 	br	10002d88 <__alt_data_end+0xf8002d88>
10002f84:	48bf6a2e 	bgeu	r9,r2,10002d30 <__alt_data_end+0xf8002d30>
10002f88:	a53fff84 	addi	r20,r20,-2
10002f8c:	4f13883a 	add	r9,r9,fp
10002f90:	003f6806 	br	10002d34 <__alt_data_end+0xf8002d34>
10002f94:	1827883a 	mov	r19,r3
10002f98:	003fd106 	br	10002ee0 <__alt_data_end+0xf8002ee0>
10002f9c:	182f883a 	mov	r23,r3
10002fa0:	003fb906 	br	10002e88 <__alt_data_end+0xf8002e88>
10002fa4:	843fff84 	addi	r16,r16,-2
10002fa8:	348d883a 	add	r6,r6,r18
10002fac:	003f0c06 	br	10002be0 <__alt_data_end+0xf8002be0>
10002fb0:	843fff84 	addi	r16,r16,-2
10002fb4:	1c87883a 	add	r3,r3,r18
10002fb8:	003eac06 	br	10002a6c <__alt_data_end+0xf8002a6c>

10002fbc <__umoddi3>:
10002fbc:	defff404 	addi	sp,sp,-48
10002fc0:	dd800815 	stw	r22,32(sp)
10002fc4:	dc400315 	stw	r17,12(sp)
10002fc8:	dc000215 	stw	r16,8(sp)
10002fcc:	dfc00b15 	stw	ra,44(sp)
10002fd0:	df000a15 	stw	fp,40(sp)
10002fd4:	ddc00915 	stw	r23,36(sp)
10002fd8:	dd400715 	stw	r21,28(sp)
10002fdc:	dd000615 	stw	r20,24(sp)
10002fe0:	dcc00515 	stw	r19,20(sp)
10002fe4:	dc800415 	stw	r18,16(sp)
10002fe8:	2021883a 	mov	r16,r4
10002fec:	2823883a 	mov	r17,r5
10002ff0:	282d883a 	mov	r22,r5
10002ff4:	38003c1e 	bne	r7,zero,100030e8 <__umoddi3+0x12c>
10002ff8:	3027883a 	mov	r19,r6
10002ffc:	2029883a 	mov	r20,r4
10003000:	2980522e 	bgeu	r5,r6,1000314c <__umoddi3+0x190>
10003004:	00bfffd4 	movui	r2,65535
10003008:	1180a436 	bltu	r2,r6,1000329c <__umoddi3+0x2e0>
1000300c:	00803fc4 	movi	r2,255
10003010:	11815e2e 	bgeu	r2,r6,1000358c <__umoddi3+0x5d0>
10003014:	01400204 	movi	r5,8
10003018:	2805883a 	mov	r2,r5
1000301c:	314ad83a 	srl	r5,r6,r5
10003020:	00c40074 	movhi	r3,4097
10003024:	18c6d704 	addi	r3,r3,7004
10003028:	194b883a 	add	r5,r3,r5
1000302c:	29000003 	ldbu	r4,0(r5)
10003030:	2089883a 	add	r4,r4,r2
10003034:	00800804 	movi	r2,32
10003038:	1105c83a 	sub	r2,r2,r4
1000303c:	10010c26 	beq	r2,zero,10003470 <__umoddi3+0x4b4>
10003040:	88a2983a 	sll	r17,r17,r2
10003044:	8108d83a 	srl	r4,r16,r4
10003048:	30a6983a 	sll	r19,r6,r2
1000304c:	80a8983a 	sll	r20,r16,r2
10003050:	1025883a 	mov	r18,r2
10003054:	892cb03a 	or	r22,r17,r4
10003058:	9822d43a 	srli	r17,r19,16
1000305c:	b009883a 	mov	r4,r22
10003060:	9d7fffcc 	andi	r21,r19,65535
10003064:	880b883a 	mov	r5,r17
10003068:	00036fc0 	call	100036fc <__umodsi3>
1000306c:	b009883a 	mov	r4,r22
10003070:	880b883a 	mov	r5,r17
10003074:	102f883a 	mov	r23,r2
10003078:	00036f40 	call	100036f4 <__udivsi3>
1000307c:	1009883a 	mov	r4,r2
10003080:	a80b883a 	mov	r5,r21
10003084:	00037040 	call	10003704 <__mulsi3>
10003088:	b82e943a 	slli	r23,r23,16
1000308c:	a008d43a 	srli	r4,r20,16
10003090:	b906b03a 	or	r3,r23,r4
10003094:	1880042e 	bgeu	r3,r2,100030a8 <__umoddi3+0xec>
10003098:	1cc7883a 	add	r3,r3,r19
1000309c:	1cc00236 	bltu	r3,r19,100030a8 <__umoddi3+0xec>
100030a0:	1880012e 	bgeu	r3,r2,100030a8 <__umoddi3+0xec>
100030a4:	1cc7883a 	add	r3,r3,r19
100030a8:	18a1c83a 	sub	r16,r3,r2
100030ac:	8009883a 	mov	r4,r16
100030b0:	880b883a 	mov	r5,r17
100030b4:	00036fc0 	call	100036fc <__umodsi3>
100030b8:	8009883a 	mov	r4,r16
100030bc:	880b883a 	mov	r5,r17
100030c0:	102d883a 	mov	r22,r2
100030c4:	00036f40 	call	100036f4 <__udivsi3>
100030c8:	1009883a 	mov	r4,r2
100030cc:	a80b883a 	mov	r5,r21
100030d0:	b02c943a 	slli	r22,r22,16
100030d4:	00037040 	call	10003704 <__mulsi3>
100030d8:	a13fffcc 	andi	r4,r20,65535
100030dc:	b106b03a 	or	r3,r22,r4
100030e0:	1880572e 	bgeu	r3,r2,10003240 <__umoddi3+0x284>
100030e4:	00005206 	br	10003230 <__umoddi3+0x274>
100030e8:	29c05936 	bltu	r5,r7,10003250 <__umoddi3+0x294>
100030ec:	00bfffd4 	movui	r2,65535
100030f0:	11c0652e 	bgeu	r2,r7,10003288 <__umoddi3+0x2cc>
100030f4:	00804034 	movhi	r2,256
100030f8:	10bfffc4 	addi	r2,r2,-1
100030fc:	11c1172e 	bgeu	r2,r7,1000355c <__umoddi3+0x5a0>
10003100:	01400604 	movi	r5,24
10003104:	282b883a 	mov	r21,r5
10003108:	394ad83a 	srl	r5,r7,r5
1000310c:	00c40074 	movhi	r3,4097
10003110:	18c6d704 	addi	r3,r3,7004
10003114:	194b883a 	add	r5,r3,r5
10003118:	28800003 	ldbu	r2,0(r5)
1000311c:	00c00804 	movi	r3,32
10003120:	156b883a 	add	r21,r2,r21
10003124:	1d69c83a 	sub	r20,r3,r21
10003128:	a000671e 	bne	r20,zero,100032c8 <__umoddi3+0x30c>
1000312c:	3c400136 	bltu	r7,r17,10003134 <__umoddi3+0x178>
10003130:	81812336 	bltu	r16,r6,100035c0 <__umoddi3+0x604>
10003134:	8185c83a 	sub	r2,r16,r6
10003138:	89e3c83a 	sub	r17,r17,r7
1000313c:	8087803a 	cmpltu	r3,r16,r2
10003140:	88edc83a 	sub	r22,r17,r3
10003144:	b007883a 	mov	r3,r22
10003148:	00004306 	br	10003258 <__umoddi3+0x29c>
1000314c:	3000041e 	bne	r6,zero,10003160 <__umoddi3+0x1a4>
10003150:	01000044 	movi	r4,1
10003154:	000b883a 	mov	r5,zero
10003158:	00036f40 	call	100036f4 <__udivsi3>
1000315c:	1027883a 	mov	r19,r2
10003160:	00bfffd4 	movui	r2,65535
10003164:	14c0532e 	bgeu	r2,r19,100032b4 <__umoddi3+0x2f8>
10003168:	00804034 	movhi	r2,256
1000316c:	10bfffc4 	addi	r2,r2,-1
10003170:	14c1032e 	bgeu	r2,r19,10003580 <__umoddi3+0x5c4>
10003174:	00800604 	movi	r2,24
10003178:	1007883a 	mov	r3,r2
1000317c:	9884d83a 	srl	r2,r19,r2
10003180:	01040074 	movhi	r4,4097
10003184:	2106d704 	addi	r4,r4,7004
10003188:	2085883a 	add	r2,r4,r2
1000318c:	11000003 	ldbu	r4,0(r2)
10003190:	00800804 	movi	r2,32
10003194:	20c7883a 	add	r3,r4,r3
10003198:	10c5c83a 	sub	r2,r2,r3
1000319c:	1000b61e 	bne	r2,zero,10003478 <__umoddi3+0x4bc>
100031a0:	982ad43a 	srli	r21,r19,16
100031a4:	8ce3c83a 	sub	r17,r17,r19
100031a8:	9dbfffcc 	andi	r22,r19,65535
100031ac:	0025883a 	mov	r18,zero
100031b0:	8809883a 	mov	r4,r17
100031b4:	a80b883a 	mov	r5,r21
100031b8:	00036fc0 	call	100036fc <__umodsi3>
100031bc:	8809883a 	mov	r4,r17
100031c0:	a80b883a 	mov	r5,r21
100031c4:	102f883a 	mov	r23,r2
100031c8:	00036f40 	call	100036f4 <__udivsi3>
100031cc:	1009883a 	mov	r4,r2
100031d0:	b00b883a 	mov	r5,r22
100031d4:	00037040 	call	10003704 <__mulsi3>
100031d8:	b82e943a 	slli	r23,r23,16
100031dc:	a008d43a 	srli	r4,r20,16
100031e0:	b906b03a 	or	r3,r23,r4
100031e4:	1880032e 	bgeu	r3,r2,100031f4 <__umoddi3+0x238>
100031e8:	1cc7883a 	add	r3,r3,r19
100031ec:	1cc00136 	bltu	r3,r19,100031f4 <__umoddi3+0x238>
100031f0:	1880f136 	bltu	r3,r2,100035b8 <__umoddi3+0x5fc>
100031f4:	18a1c83a 	sub	r16,r3,r2
100031f8:	8009883a 	mov	r4,r16
100031fc:	a80b883a 	mov	r5,r21
10003200:	00036fc0 	call	100036fc <__umodsi3>
10003204:	8009883a 	mov	r4,r16
10003208:	a80b883a 	mov	r5,r21
1000320c:	1023883a 	mov	r17,r2
10003210:	00036f40 	call	100036f4 <__udivsi3>
10003214:	1009883a 	mov	r4,r2
10003218:	b00b883a 	mov	r5,r22
1000321c:	8822943a 	slli	r17,r17,16
10003220:	00037040 	call	10003704 <__mulsi3>
10003224:	a13fffcc 	andi	r4,r20,65535
10003228:	8906b03a 	or	r3,r17,r4
1000322c:	1880042e 	bgeu	r3,r2,10003240 <__umoddi3+0x284>
10003230:	1cc7883a 	add	r3,r3,r19
10003234:	1cc00236 	bltu	r3,r19,10003240 <__umoddi3+0x284>
10003238:	1880012e 	bgeu	r3,r2,10003240 <__umoddi3+0x284>
1000323c:	1cc7883a 	add	r3,r3,r19
10003240:	1887c83a 	sub	r3,r3,r2
10003244:	1c84d83a 	srl	r2,r3,r18
10003248:	0007883a 	mov	r3,zero
1000324c:	00000206 	br	10003258 <__umoddi3+0x29c>
10003250:	2005883a 	mov	r2,r4
10003254:	2807883a 	mov	r3,r5
10003258:	dfc00b17 	ldw	ra,44(sp)
1000325c:	df000a17 	ldw	fp,40(sp)
10003260:	ddc00917 	ldw	r23,36(sp)
10003264:	dd800817 	ldw	r22,32(sp)
10003268:	dd400717 	ldw	r21,28(sp)
1000326c:	dd000617 	ldw	r20,24(sp)
10003270:	dcc00517 	ldw	r19,20(sp)
10003274:	dc800417 	ldw	r18,16(sp)
10003278:	dc400317 	ldw	r17,12(sp)
1000327c:	dc000217 	ldw	r16,8(sp)
10003280:	dec00c04 	addi	sp,sp,48
10003284:	f800283a 	ret
10003288:	00803fc4 	movi	r2,255
1000328c:	11c0b02e 	bgeu	r2,r7,10003550 <__umoddi3+0x594>
10003290:	01400204 	movi	r5,8
10003294:	282b883a 	mov	r21,r5
10003298:	003f9b06 	br	10003108 <__alt_data_end+0xf8003108>
1000329c:	00804034 	movhi	r2,256
100032a0:	10bfffc4 	addi	r2,r2,-1
100032a4:	1180b02e 	bgeu	r2,r6,10003568 <__umoddi3+0x5ac>
100032a8:	01400604 	movi	r5,24
100032ac:	2805883a 	mov	r2,r5
100032b0:	003f5a06 	br	1000301c <__alt_data_end+0xf800301c>
100032b4:	00803fc4 	movi	r2,255
100032b8:	14c0ae2e 	bgeu	r2,r19,10003574 <__umoddi3+0x5b8>
100032bc:	00800204 	movi	r2,8
100032c0:	1007883a 	mov	r3,r2
100032c4:	003fad06 	br	1000317c <__alt_data_end+0xf800317c>
100032c8:	3d0a983a 	sll	r5,r7,r20
100032cc:	356cd83a 	srl	r22,r6,r21
100032d0:	8d78d83a 	srl	fp,r17,r21
100032d4:	8d10983a 	sll	r8,r17,r20
100032d8:	2dacb03a 	or	r22,r5,r22
100032dc:	b02ed43a 	srli	r23,r22,16
100032e0:	8564d83a 	srl	r18,r16,r21
100032e4:	e009883a 	mov	r4,fp
100032e8:	b80b883a 	mov	r5,r23
100032ec:	44a4b03a 	or	r18,r8,r18
100032f0:	3526983a 	sll	r19,r6,r20
100032f4:	00036fc0 	call	100036fc <__umodsi3>
100032f8:	e009883a 	mov	r4,fp
100032fc:	b80b883a 	mov	r5,r23
10003300:	b47fffcc 	andi	r17,r22,65535
10003304:	d8800015 	stw	r2,0(sp)
10003308:	00036f40 	call	100036f4 <__udivsi3>
1000330c:	1009883a 	mov	r4,r2
10003310:	880b883a 	mov	r5,r17
10003314:	1039883a 	mov	fp,r2
10003318:	00037040 	call	10003704 <__mulsi3>
1000331c:	d9800017 	ldw	r6,0(sp)
10003320:	9008d43a 	srli	r4,r18,16
10003324:	8520983a 	sll	r16,r16,r20
10003328:	300c943a 	slli	r6,r6,16
1000332c:	3106b03a 	or	r3,r6,r4
10003330:	1880042e 	bgeu	r3,r2,10003344 <__umoddi3+0x388>
10003334:	1d87883a 	add	r3,r3,r22
10003338:	e13fffc4 	addi	r4,fp,-1
1000333c:	1d809a2e 	bgeu	r3,r22,100035a8 <__umoddi3+0x5ec>
10003340:	2039883a 	mov	fp,r4
10003344:	1887c83a 	sub	r3,r3,r2
10003348:	1809883a 	mov	r4,r3
1000334c:	b80b883a 	mov	r5,r23
10003350:	d8c00115 	stw	r3,4(sp)
10003354:	00036fc0 	call	100036fc <__umodsi3>
10003358:	d8c00117 	ldw	r3,4(sp)
1000335c:	b80b883a 	mov	r5,r23
10003360:	d8800015 	stw	r2,0(sp)
10003364:	1809883a 	mov	r4,r3
10003368:	00036f40 	call	100036f4 <__udivsi3>
1000336c:	880b883a 	mov	r5,r17
10003370:	1009883a 	mov	r4,r2
10003374:	102f883a 	mov	r23,r2
10003378:	00037040 	call	10003704 <__mulsi3>
1000337c:	d9800017 	ldw	r6,0(sp)
10003380:	947fffcc 	andi	r17,r18,65535
10003384:	300c943a 	slli	r6,r6,16
10003388:	3464b03a 	or	r18,r6,r17
1000338c:	9080042e 	bgeu	r18,r2,100033a0 <__umoddi3+0x3e4>
10003390:	95a5883a 	add	r18,r18,r22
10003394:	b8ffffc4 	addi	r3,r23,-1
10003398:	95807f2e 	bgeu	r18,r22,10003598 <__umoddi3+0x5dc>
1000339c:	182f883a 	mov	r23,r3
100033a0:	e038943a 	slli	fp,fp,16
100033a4:	980cd43a 	srli	r6,r19,16
100033a8:	98ffffcc 	andi	r3,r19,65535
100033ac:	bf38b03a 	or	fp,r23,fp
100033b0:	e02ed43a 	srli	r23,fp,16
100033b4:	e73fffcc 	andi	fp,fp,65535
100033b8:	180b883a 	mov	r5,r3
100033bc:	e009883a 	mov	r4,fp
100033c0:	d9800015 	stw	r6,0(sp)
100033c4:	d8c00115 	stw	r3,4(sp)
100033c8:	90a5c83a 	sub	r18,r18,r2
100033cc:	00037040 	call	10003704 <__mulsi3>
100033d0:	d8c00117 	ldw	r3,4(sp)
100033d4:	b809883a 	mov	r4,r23
100033d8:	1023883a 	mov	r17,r2
100033dc:	180b883a 	mov	r5,r3
100033e0:	00037040 	call	10003704 <__mulsi3>
100033e4:	d9800017 	ldw	r6,0(sp)
100033e8:	b809883a 	mov	r4,r23
100033ec:	d8800115 	stw	r2,4(sp)
100033f0:	300b883a 	mov	r5,r6
100033f4:	302f883a 	mov	r23,r6
100033f8:	00037040 	call	10003704 <__mulsi3>
100033fc:	e009883a 	mov	r4,fp
10003400:	b80b883a 	mov	r5,r23
10003404:	d8800015 	stw	r2,0(sp)
10003408:	00037040 	call	10003704 <__mulsi3>
1000340c:	d8c00117 	ldw	r3,4(sp)
10003410:	880cd43a 	srli	r6,r17,16
10003414:	d9c00017 	ldw	r7,0(sp)
10003418:	1885883a 	add	r2,r3,r2
1000341c:	118d883a 	add	r6,r2,r6
10003420:	30c0022e 	bgeu	r6,r3,1000342c <__umoddi3+0x470>
10003424:	00800074 	movhi	r2,1
10003428:	388f883a 	add	r7,r7,r2
1000342c:	3006d43a 	srli	r3,r6,16
10003430:	300c943a 	slli	r6,r6,16
10003434:	8c7fffcc 	andi	r17,r17,65535
10003438:	38c7883a 	add	r3,r7,r3
1000343c:	3463883a 	add	r17,r6,r17
10003440:	90c03d36 	bltu	r18,r3,10003538 <__umoddi3+0x57c>
10003444:	90c06026 	beq	r18,r3,100035c8 <__umoddi3+0x60c>
10003448:	90c9c83a 	sub	r4,r18,r3
1000344c:	880f883a 	mov	r7,r17
10003450:	81cfc83a 	sub	r7,r16,r7
10003454:	81c7803a 	cmpltu	r3,r16,r7
10003458:	20c7c83a 	sub	r3,r4,r3
1000345c:	1d44983a 	sll	r2,r3,r21
10003460:	3d0ed83a 	srl	r7,r7,r20
10003464:	1d06d83a 	srl	r3,r3,r20
10003468:	11c4b03a 	or	r2,r2,r7
1000346c:	003f7a06 	br	10003258 <__alt_data_end+0xf8003258>
10003470:	0025883a 	mov	r18,zero
10003474:	003ef806 	br	10003058 <__alt_data_end+0xf8003058>
10003478:	98a6983a 	sll	r19,r19,r2
1000347c:	88e8d83a 	srl	r20,r17,r3
10003480:	80c6d83a 	srl	r3,r16,r3
10003484:	982ad43a 	srli	r21,r19,16
10003488:	88a2983a 	sll	r17,r17,r2
1000348c:	a009883a 	mov	r4,r20
10003490:	a80b883a 	mov	r5,r21
10003494:	88eeb03a 	or	r23,r17,r3
10003498:	1025883a 	mov	r18,r2
1000349c:	00036fc0 	call	100036fc <__umodsi3>
100034a0:	a009883a 	mov	r4,r20
100034a4:	a80b883a 	mov	r5,r21
100034a8:	1023883a 	mov	r17,r2
100034ac:	9dbfffcc 	andi	r22,r19,65535
100034b0:	00036f40 	call	100036f4 <__udivsi3>
100034b4:	1009883a 	mov	r4,r2
100034b8:	b00b883a 	mov	r5,r22
100034bc:	00037040 	call	10003704 <__mulsi3>
100034c0:	8822943a 	slli	r17,r17,16
100034c4:	b808d43a 	srli	r4,r23,16
100034c8:	84a8983a 	sll	r20,r16,r18
100034cc:	8906b03a 	or	r3,r17,r4
100034d0:	1880042e 	bgeu	r3,r2,100034e4 <__umoddi3+0x528>
100034d4:	1cc7883a 	add	r3,r3,r19
100034d8:	1cc00236 	bltu	r3,r19,100034e4 <__umoddi3+0x528>
100034dc:	1880012e 	bgeu	r3,r2,100034e4 <__umoddi3+0x528>
100034e0:	1cc7883a 	add	r3,r3,r19
100034e4:	18a1c83a 	sub	r16,r3,r2
100034e8:	8009883a 	mov	r4,r16
100034ec:	a80b883a 	mov	r5,r21
100034f0:	00036fc0 	call	100036fc <__umodsi3>
100034f4:	8009883a 	mov	r4,r16
100034f8:	a80b883a 	mov	r5,r21
100034fc:	1039883a 	mov	fp,r2
10003500:	00036f40 	call	100036f4 <__udivsi3>
10003504:	1009883a 	mov	r4,r2
10003508:	b00b883a 	mov	r5,r22
1000350c:	00037040 	call	10003704 <__mulsi3>
10003510:	e006943a 	slli	r3,fp,16
10003514:	b93fffcc 	andi	r4,r23,65535
10003518:	1906b03a 	or	r3,r3,r4
1000351c:	1880042e 	bgeu	r3,r2,10003530 <__umoddi3+0x574>
10003520:	1cc7883a 	add	r3,r3,r19
10003524:	1cc00236 	bltu	r3,r19,10003530 <__umoddi3+0x574>
10003528:	1880012e 	bgeu	r3,r2,10003530 <__umoddi3+0x574>
1000352c:	1cc7883a 	add	r3,r3,r19
10003530:	18a3c83a 	sub	r17,r3,r2
10003534:	003f1e06 	br	100031b0 <__alt_data_end+0xf80031b0>
10003538:	8ccfc83a 	sub	r7,r17,r19
1000353c:	1d89c83a 	sub	r4,r3,r22
10003540:	89e3803a 	cmpltu	r17,r17,r7
10003544:	2463c83a 	sub	r17,r4,r17
10003548:	9449c83a 	sub	r4,r18,r17
1000354c:	003fc006 	br	10003450 <__alt_data_end+0xf8003450>
10003550:	000b883a 	mov	r5,zero
10003554:	002b883a 	mov	r21,zero
10003558:	003eeb06 	br	10003108 <__alt_data_end+0xf8003108>
1000355c:	01400404 	movi	r5,16
10003560:	282b883a 	mov	r21,r5
10003564:	003ee806 	br	10003108 <__alt_data_end+0xf8003108>
10003568:	01400404 	movi	r5,16
1000356c:	2805883a 	mov	r2,r5
10003570:	003eaa06 	br	1000301c <__alt_data_end+0xf800301c>
10003574:	0005883a 	mov	r2,zero
10003578:	0007883a 	mov	r3,zero
1000357c:	003eff06 	br	1000317c <__alt_data_end+0xf800317c>
10003580:	00800404 	movi	r2,16
10003584:	1007883a 	mov	r3,r2
10003588:	003efc06 	br	1000317c <__alt_data_end+0xf800317c>
1000358c:	000b883a 	mov	r5,zero
10003590:	0005883a 	mov	r2,zero
10003594:	003ea106 	br	1000301c <__alt_data_end+0xf800301c>
10003598:	90bf802e 	bgeu	r18,r2,1000339c <__alt_data_end+0xf800339c>
1000359c:	bdffff84 	addi	r23,r23,-2
100035a0:	95a5883a 	add	r18,r18,r22
100035a4:	003f7e06 	br	100033a0 <__alt_data_end+0xf80033a0>
100035a8:	18bf652e 	bgeu	r3,r2,10003340 <__alt_data_end+0xf8003340>
100035ac:	e73fff84 	addi	fp,fp,-2
100035b0:	1d87883a 	add	r3,r3,r22
100035b4:	003f6306 	br	10003344 <__alt_data_end+0xf8003344>
100035b8:	1cc7883a 	add	r3,r3,r19
100035bc:	003f0d06 	br	100031f4 <__alt_data_end+0xf80031f4>
100035c0:	8005883a 	mov	r2,r16
100035c4:	003edf06 	br	10003144 <__alt_data_end+0xf8003144>
100035c8:	847fdb36 	bltu	r16,r17,10003538 <__alt_data_end+0xf8003538>
100035cc:	880f883a 	mov	r7,r17
100035d0:	0009883a 	mov	r4,zero
100035d4:	003f9e06 	br	10003450 <__alt_data_end+0xf8003450>

100035d8 <udivmodsi4>:
100035d8:	2900182e 	bgeu	r5,r4,1000363c <udivmodsi4+0x64>
100035dc:	28001716 	blt	r5,zero,1000363c <udivmodsi4+0x64>
100035e0:	00800804 	movi	r2,32
100035e4:	00c00044 	movi	r3,1
100035e8:	00000206 	br	100035f4 <udivmodsi4+0x1c>
100035ec:	10001126 	beq	r2,zero,10003634 <udivmodsi4+0x5c>
100035f0:	28000516 	blt	r5,zero,10003608 <udivmodsi4+0x30>
100035f4:	294b883a 	add	r5,r5,r5
100035f8:	10bfffc4 	addi	r2,r2,-1
100035fc:	18c7883a 	add	r3,r3,r3
10003600:	293ffa36 	bltu	r5,r4,100035ec <__alt_data_end+0xf80035ec>
10003604:	18000b26 	beq	r3,zero,10003634 <udivmodsi4+0x5c>
10003608:	0005883a 	mov	r2,zero
1000360c:	21400236 	bltu	r4,r5,10003618 <udivmodsi4+0x40>
10003610:	2149c83a 	sub	r4,r4,r5
10003614:	10c4b03a 	or	r2,r2,r3
10003618:	1806d07a 	srli	r3,r3,1
1000361c:	280ad07a 	srli	r5,r5,1
10003620:	183ffa1e 	bne	r3,zero,1000360c <__alt_data_end+0xf800360c>
10003624:	3000011e 	bne	r6,zero,1000362c <udivmodsi4+0x54>
10003628:	f800283a 	ret
1000362c:	2005883a 	mov	r2,r4
10003630:	f800283a 	ret
10003634:	0005883a 	mov	r2,zero
10003638:	003ffa06 	br	10003624 <__alt_data_end+0xf8003624>
1000363c:	00c00044 	movi	r3,1
10003640:	003ff106 	br	10003608 <__alt_data_end+0xf8003608>

10003644 <__divsi3>:
10003644:	defffe04 	addi	sp,sp,-8
10003648:	dfc00115 	stw	ra,4(sp)
1000364c:	dc000015 	stw	r16,0(sp)
10003650:	20000b16 	blt	r4,zero,10003680 <__divsi3+0x3c>
10003654:	0021883a 	mov	r16,zero
10003658:	28000c16 	blt	r5,zero,1000368c <__divsi3+0x48>
1000365c:	000d883a 	mov	r6,zero
10003660:	00035d80 	call	100035d8 <udivmodsi4>
10003664:	0407c83a 	sub	r3,zero,r16
10003668:	1884f03a 	xor	r2,r3,r2
1000366c:	1405883a 	add	r2,r2,r16
10003670:	dfc00117 	ldw	ra,4(sp)
10003674:	dc000017 	ldw	r16,0(sp)
10003678:	dec00204 	addi	sp,sp,8
1000367c:	f800283a 	ret
10003680:	0109c83a 	sub	r4,zero,r4
10003684:	04000044 	movi	r16,1
10003688:	283ff40e 	bge	r5,zero,1000365c <__alt_data_end+0xf800365c>
1000368c:	014bc83a 	sub	r5,zero,r5
10003690:	8400005c 	xori	r16,r16,1
10003694:	003ff106 	br	1000365c <__alt_data_end+0xf800365c>

10003698 <__modsi3>:
10003698:	defffd04 	addi	sp,sp,-12
1000369c:	dfc00215 	stw	ra,8(sp)
100036a0:	dc400115 	stw	r17,4(sp)
100036a4:	dc000015 	stw	r16,0(sp)
100036a8:	20000c16 	blt	r4,zero,100036dc <__modsi3+0x44>
100036ac:	0023883a 	mov	r17,zero
100036b0:	0021883a 	mov	r16,zero
100036b4:	28000d16 	blt	r5,zero,100036ec <__modsi3+0x54>
100036b8:	01800044 	movi	r6,1
100036bc:	00035d80 	call	100035d8 <udivmodsi4>
100036c0:	1404f03a 	xor	r2,r2,r16
100036c4:	8885883a 	add	r2,r17,r2
100036c8:	dfc00217 	ldw	ra,8(sp)
100036cc:	dc400117 	ldw	r17,4(sp)
100036d0:	dc000017 	ldw	r16,0(sp)
100036d4:	dec00304 	addi	sp,sp,12
100036d8:	f800283a 	ret
100036dc:	0109c83a 	sub	r4,zero,r4
100036e0:	04400044 	movi	r17,1
100036e4:	043fffc4 	movi	r16,-1
100036e8:	283ff30e 	bge	r5,zero,100036b8 <__alt_data_end+0xf80036b8>
100036ec:	014bc83a 	sub	r5,zero,r5
100036f0:	003ff106 	br	100036b8 <__alt_data_end+0xf80036b8>

100036f4 <__udivsi3>:
100036f4:	000d883a 	mov	r6,zero
100036f8:	00035d81 	jmpi	100035d8 <udivmodsi4>

100036fc <__umodsi3>:
100036fc:	01800044 	movi	r6,1
10003700:	00035d81 	jmpi	100035d8 <udivmodsi4>

10003704 <__mulsi3>:
10003704:	0005883a 	mov	r2,zero
10003708:	20000726 	beq	r4,zero,10003728 <__mulsi3+0x24>
1000370c:	20c0004c 	andi	r3,r4,1
10003710:	2008d07a 	srli	r4,r4,1
10003714:	18000126 	beq	r3,zero,1000371c <__mulsi3+0x18>
10003718:	1145883a 	add	r2,r2,r5
1000371c:	294b883a 	add	r5,r5,r5
10003720:	203ffa1e 	bne	r4,zero,1000370c <__alt_data_end+0xf800370c>
10003724:	f800283a 	ret
10003728:	f800283a 	ret

1000372c <__adddf3>:
1000372c:	02000434 	movhi	r8,16
10003730:	423fffc4 	addi	r8,r8,-1
10003734:	defffb04 	addi	sp,sp,-20
10003738:	2a12703a 	and	r9,r5,r8
1000373c:	2806d7fa 	srli	r3,r5,31
10003740:	3a10703a 	and	r8,r7,r8
10003744:	3804d53a 	srli	r2,r7,20
10003748:	3014d77a 	srli	r10,r6,29
1000374c:	dc000015 	stw	r16,0(sp)
10003750:	481290fa 	slli	r9,r9,3
10003754:	2820d53a 	srli	r16,r5,20
10003758:	401090fa 	slli	r8,r8,3
1000375c:	200ad77a 	srli	r5,r4,29
10003760:	380ed7fa 	srli	r7,r7,31
10003764:	dc800215 	stw	r18,8(sp)
10003768:	dc400115 	stw	r17,4(sp)
1000376c:	dfc00415 	stw	ra,16(sp)
10003770:	dcc00315 	stw	r19,12(sp)
10003774:	1c803fcc 	andi	r18,r3,255
10003778:	8401ffcc 	andi	r16,r16,2047
1000377c:	494ab03a 	or	r5,r9,r5
10003780:	202290fa 	slli	r17,r4,3
10003784:	1081ffcc 	andi	r2,r2,2047
10003788:	4290b03a 	or	r8,r8,r10
1000378c:	300c90fa 	slli	r6,r6,3
10003790:	91c07026 	beq	r18,r7,10003954 <__adddf3+0x228>
10003794:	8087c83a 	sub	r3,r16,r2
10003798:	00c0b30e 	bge	zero,r3,10003a68 <__adddf3+0x33c>
1000379c:	10002a1e 	bne	r2,zero,10003848 <__adddf3+0x11c>
100037a0:	4184b03a 	or	r2,r8,r6
100037a4:	1000991e 	bne	r2,zero,10003a0c <__adddf3+0x2e0>
100037a8:	888001cc 	andi	r2,r17,7
100037ac:	10005b26 	beq	r2,zero,1000391c <__adddf3+0x1f0>
100037b0:	88c003cc 	andi	r3,r17,15
100037b4:	00800104 	movi	r2,4
100037b8:	18805826 	beq	r3,r2,1000391c <__adddf3+0x1f0>
100037bc:	89800104 	addi	r6,r17,4
100037c0:	3463803a 	cmpltu	r17,r6,r17
100037c4:	2c4b883a 	add	r5,r5,r17
100037c8:	2880202c 	andhi	r2,r5,128
100037cc:	9007883a 	mov	r3,r18
100037d0:	3023883a 	mov	r17,r6
100037d4:	10005426 	beq	r2,zero,10003928 <__adddf3+0x1fc>
100037d8:	84000044 	addi	r16,r16,1
100037dc:	0081ffc4 	movi	r2,2047
100037e0:	8080c126 	beq	r16,r2,10003ae8 <__adddf3+0x3bc>
100037e4:	013fe034 	movhi	r4,65408
100037e8:	213fffc4 	addi	r4,r4,-1
100037ec:	290a703a 	and	r5,r5,r4
100037f0:	2804977a 	slli	r2,r5,29
100037f4:	280a927a 	slli	r5,r5,9
100037f8:	8822d0fa 	srli	r17,r17,3
100037fc:	8401ffcc 	andi	r16,r16,2047
10003800:	2808d33a 	srli	r4,r5,12
10003804:	1444b03a 	or	r2,r2,r17
10003808:	8401ffcc 	andi	r16,r16,2047
1000380c:	800a953a 	slli	r5,r16,20
10003810:	18c03fcc 	andi	r3,r3,255
10003814:	04000434 	movhi	r16,16
10003818:	180697fa 	slli	r3,r3,31
1000381c:	843fffc4 	addi	r16,r16,-1
10003820:	2420703a 	and	r16,r4,r16
10003824:	8160b03a 	or	r16,r16,r5
10003828:	80c6b03a 	or	r3,r16,r3
1000382c:	dfc00417 	ldw	ra,16(sp)
10003830:	dcc00317 	ldw	r19,12(sp)
10003834:	dc800217 	ldw	r18,8(sp)
10003838:	dc400117 	ldw	r17,4(sp)
1000383c:	dc000017 	ldw	r16,0(sp)
10003840:	dec00504 	addi	sp,sp,20
10003844:	f800283a 	ret
10003848:	0081ffc4 	movi	r2,2047
1000384c:	80bfd626 	beq	r16,r2,100037a8 <__alt_data_end+0xf80037a8>
10003850:	42002034 	orhi	r8,r8,128
10003854:	00800e04 	movi	r2,56
10003858:	10c0a616 	blt	r2,r3,10003af4 <__adddf3+0x3c8>
1000385c:	008007c4 	movi	r2,31
10003860:	10c0c916 	blt	r2,r3,10003b88 <__adddf3+0x45c>
10003864:	00800804 	movi	r2,32
10003868:	10c5c83a 	sub	r2,r2,r3
1000386c:	408e983a 	sll	r7,r8,r2
10003870:	30c8d83a 	srl	r4,r6,r3
10003874:	3084983a 	sll	r2,r6,r2
10003878:	40c6d83a 	srl	r3,r8,r3
1000387c:	390cb03a 	or	r6,r7,r4
10003880:	1004c03a 	cmpne	r2,r2,zero
10003884:	308cb03a 	or	r6,r6,r2
10003888:	898dc83a 	sub	r6,r17,r6
1000388c:	89a3803a 	cmpltu	r17,r17,r6
10003890:	28cbc83a 	sub	r5,r5,r3
10003894:	2c4bc83a 	sub	r5,r5,r17
10003898:	3023883a 	mov	r17,r6
1000389c:	2880202c 	andhi	r2,r5,128
100038a0:	10006d26 	beq	r2,zero,10003a58 <__adddf3+0x32c>
100038a4:	04c02034 	movhi	r19,128
100038a8:	9cffffc4 	addi	r19,r19,-1
100038ac:	2ce6703a 	and	r19,r5,r19
100038b0:	98007e26 	beq	r19,zero,10003aac <__adddf3+0x380>
100038b4:	9809883a 	mov	r4,r19
100038b8:	0005e200 	call	10005e20 <__clzsi2>
100038bc:	10fffe04 	addi	r3,r2,-8
100038c0:	010007c4 	movi	r4,31
100038c4:	20c07f16 	blt	r4,r3,10003ac4 <__adddf3+0x398>
100038c8:	01400a04 	movi	r5,40
100038cc:	2885c83a 	sub	r2,r5,r2
100038d0:	888ad83a 	srl	r5,r17,r2
100038d4:	98e6983a 	sll	r19,r19,r3
100038d8:	88e2983a 	sll	r17,r17,r3
100038dc:	2ce6b03a 	or	r19,r5,r19
100038e0:	1c007c16 	blt	r3,r16,10003ad4 <__adddf3+0x3a8>
100038e4:	1c21c83a 	sub	r16,r3,r16
100038e8:	81400044 	addi	r5,r16,1
100038ec:	00c007c4 	movi	r3,31
100038f0:	19409816 	blt	r3,r5,10003b54 <__adddf3+0x428>
100038f4:	1c21c83a 	sub	r16,r3,r16
100038f8:	8c08983a 	sll	r4,r17,r16
100038fc:	8946d83a 	srl	r3,r17,r5
10003900:	9c20983a 	sll	r16,r19,r16
10003904:	2008c03a 	cmpne	r4,r4,zero
10003908:	994ad83a 	srl	r5,r19,r5
1000390c:	1c06b03a 	or	r3,r3,r16
10003910:	1922b03a 	or	r17,r3,r4
10003914:	0021883a 	mov	r16,zero
10003918:	003fa306 	br	100037a8 <__alt_data_end+0xf80037a8>
1000391c:	2880202c 	andhi	r2,r5,128
10003920:	9007883a 	mov	r3,r18
10003924:	103fac1e 	bne	r2,zero,100037d8 <__alt_data_end+0xf80037d8>
10003928:	2804977a 	slli	r2,r5,29
1000392c:	8822d0fa 	srli	r17,r17,3
10003930:	0101ffc4 	movi	r4,2047
10003934:	280ad0fa 	srli	r5,r5,3
10003938:	1444b03a 	or	r2,r2,r17
1000393c:	81002c26 	beq	r16,r4,100039f0 <__adddf3+0x2c4>
10003940:	8120703a 	and	r16,r16,r4
10003944:	01000434 	movhi	r4,16
10003948:	213fffc4 	addi	r4,r4,-1
1000394c:	2908703a 	and	r4,r5,r4
10003950:	003fad06 	br	10003808 <__alt_data_end+0xf8003808>
10003954:	8089c83a 	sub	r4,r16,r2
10003958:	01006a0e 	bge	zero,r4,10003b04 <__adddf3+0x3d8>
1000395c:	10003326 	beq	r2,zero,10003a2c <__adddf3+0x300>
10003960:	0081ffc4 	movi	r2,2047
10003964:	80bf9026 	beq	r16,r2,100037a8 <__alt_data_end+0xf80037a8>
10003968:	42002034 	orhi	r8,r8,128
1000396c:	00800e04 	movi	r2,56
10003970:	1100b116 	blt	r2,r4,10003c38 <__adddf3+0x50c>
10003974:	008007c4 	movi	r2,31
10003978:	1100e216 	blt	r2,r4,10003d04 <__adddf3+0x5d8>
1000397c:	00800804 	movi	r2,32
10003980:	1105c83a 	sub	r2,r2,r4
10003984:	4092983a 	sll	r9,r8,r2
10003988:	310ed83a 	srl	r7,r6,r4
1000398c:	3084983a 	sll	r2,r6,r2
10003990:	4110d83a 	srl	r8,r8,r4
10003994:	49ccb03a 	or	r6,r9,r7
10003998:	1004c03a 	cmpne	r2,r2,zero
1000399c:	308cb03a 	or	r6,r6,r2
100039a0:	344d883a 	add	r6,r6,r17
100039a4:	3463803a 	cmpltu	r17,r6,r17
100039a8:	414b883a 	add	r5,r8,r5
100039ac:	2c4b883a 	add	r5,r5,r17
100039b0:	3023883a 	mov	r17,r6
100039b4:	2880202c 	andhi	r2,r5,128
100039b8:	10002726 	beq	r2,zero,10003a58 <__adddf3+0x32c>
100039bc:	84000044 	addi	r16,r16,1
100039c0:	0081ffc4 	movi	r2,2047
100039c4:	8080ae26 	beq	r16,r2,10003c80 <__adddf3+0x554>
100039c8:	00bfe034 	movhi	r2,65408
100039cc:	10bfffc4 	addi	r2,r2,-1
100039d0:	288a703a 	and	r5,r5,r2
100039d4:	880cd07a 	srli	r6,r17,1
100039d8:	280897fa 	slli	r4,r5,31
100039dc:	88c0004c 	andi	r3,r17,1
100039e0:	30e2b03a 	or	r17,r6,r3
100039e4:	280ad07a 	srli	r5,r5,1
100039e8:	8922b03a 	or	r17,r17,r4
100039ec:	003f6e06 	br	100037a8 <__alt_data_end+0xf80037a8>
100039f0:	1148b03a 	or	r4,r2,r5
100039f4:	20003c26 	beq	r4,zero,10003ae8 <__adddf3+0x3bc>
100039f8:	29000234 	orhi	r4,r5,8
100039fc:	01400434 	movhi	r5,16
10003a00:	297fffc4 	addi	r5,r5,-1
10003a04:	2148703a 	and	r4,r4,r5
10003a08:	003f7f06 	br	10003808 <__alt_data_end+0xf8003808>
10003a0c:	18ffffc4 	addi	r3,r3,-1
10003a10:	18004d1e 	bne	r3,zero,10003b48 <__adddf3+0x41c>
10003a14:	898dc83a 	sub	r6,r17,r6
10003a18:	89a3803a 	cmpltu	r17,r17,r6
10003a1c:	2a0bc83a 	sub	r5,r5,r8
10003a20:	2c4bc83a 	sub	r5,r5,r17
10003a24:	3023883a 	mov	r17,r6
10003a28:	003f9c06 	br	1000389c <__alt_data_end+0xf800389c>
10003a2c:	4184b03a 	or	r2,r8,r6
10003a30:	103f5d26 	beq	r2,zero,100037a8 <__alt_data_end+0xf80037a8>
10003a34:	213fffc4 	addi	r4,r4,-1
10003a38:	203fd926 	beq	r4,zero,100039a0 <__alt_data_end+0xf80039a0>
10003a3c:	0081ffc4 	movi	r2,2047
10003a40:	80bfca1e 	bne	r16,r2,1000396c <__alt_data_end+0xf800396c>
10003a44:	003f5806 	br	100037a8 <__alt_data_end+0xf80037a8>
10003a48:	10c8b03a 	or	r4,r2,r3
10003a4c:	20008b26 	beq	r4,zero,10003c7c <__adddf3+0x550>
10003a50:	100b883a 	mov	r5,r2
10003a54:	1823883a 	mov	r17,r3
10003a58:	888001cc 	andi	r2,r17,7
10003a5c:	103f541e 	bne	r2,zero,100037b0 <__alt_data_end+0xf80037b0>
10003a60:	9007883a 	mov	r3,r18
10003a64:	003fb006 	br	10003928 <__alt_data_end+0xf8003928>
10003a68:	1800531e 	bne	r3,zero,10003bb8 <__adddf3+0x48c>
10003a6c:	80800044 	addi	r2,r16,1
10003a70:	1081ffcc 	andi	r2,r2,2047
10003a74:	00c00044 	movi	r3,1
10003a78:	1880990e 	bge	r3,r2,10003ce0 <__adddf3+0x5b4>
10003a7c:	8985c83a 	sub	r2,r17,r6
10003a80:	8887803a 	cmpltu	r3,r17,r2
10003a84:	2a27c83a 	sub	r19,r5,r8
10003a88:	98e7c83a 	sub	r19,r19,r3
10003a8c:	98c0202c 	andhi	r3,r19,128
10003a90:	18006226 	beq	r3,zero,10003c1c <__adddf3+0x4f0>
10003a94:	3463c83a 	sub	r17,r6,r17
10003a98:	4151c83a 	sub	r8,r8,r5
10003a9c:	344d803a 	cmpltu	r6,r6,r17
10003aa0:	41a7c83a 	sub	r19,r8,r6
10003aa4:	3825883a 	mov	r18,r7
10003aa8:	983f821e 	bne	r19,zero,100038b4 <__alt_data_end+0xf80038b4>
10003aac:	8809883a 	mov	r4,r17
10003ab0:	0005e200 	call	10005e20 <__clzsi2>
10003ab4:	10800804 	addi	r2,r2,32
10003ab8:	10fffe04 	addi	r3,r2,-8
10003abc:	010007c4 	movi	r4,31
10003ac0:	20ff810e 	bge	r4,r3,100038c8 <__alt_data_end+0xf80038c8>
10003ac4:	14fff604 	addi	r19,r2,-40
10003ac8:	8ce6983a 	sll	r19,r17,r19
10003acc:	0023883a 	mov	r17,zero
10003ad0:	1c3f840e 	bge	r3,r16,100038e4 <__alt_data_end+0xf80038e4>
10003ad4:	017fe034 	movhi	r5,65408
10003ad8:	297fffc4 	addi	r5,r5,-1
10003adc:	80e1c83a 	sub	r16,r16,r3
10003ae0:	994a703a 	and	r5,r19,r5
10003ae4:	003f3006 	br	100037a8 <__alt_data_end+0xf80037a8>
10003ae8:	0009883a 	mov	r4,zero
10003aec:	0005883a 	mov	r2,zero
10003af0:	003f4506 	br	10003808 <__alt_data_end+0xf8003808>
10003af4:	418cb03a 	or	r6,r8,r6
10003af8:	300cc03a 	cmpne	r6,r6,zero
10003afc:	0007883a 	mov	r3,zero
10003b00:	003f6106 	br	10003888 <__alt_data_end+0xf8003888>
10003b04:	2000921e 	bne	r4,zero,10003d50 <__adddf3+0x624>
10003b08:	80800044 	addi	r2,r16,1
10003b0c:	11c1ffcc 	andi	r7,r2,2047
10003b10:	01000044 	movi	r4,1
10003b14:	21c0610e 	bge	r4,r7,10003c9c <__adddf3+0x570>
10003b18:	0101ffc4 	movi	r4,2047
10003b1c:	1100a326 	beq	r2,r4,10003dac <__adddf3+0x680>
10003b20:	344d883a 	add	r6,r6,r17
10003b24:	3463803a 	cmpltu	r17,r6,r17
10003b28:	414b883a 	add	r5,r8,r5
10003b2c:	2c4b883a 	add	r5,r5,r17
10003b30:	282297fa 	slli	r17,r5,31
10003b34:	300cd07a 	srli	r6,r6,1
10003b38:	280ad07a 	srli	r5,r5,1
10003b3c:	1021883a 	mov	r16,r2
10003b40:	89a2b03a 	or	r17,r17,r6
10003b44:	003f1806 	br	100037a8 <__alt_data_end+0xf80037a8>
10003b48:	0081ffc4 	movi	r2,2047
10003b4c:	80bf411e 	bne	r16,r2,10003854 <__alt_data_end+0xf8003854>
10003b50:	003f1506 	br	100037a8 <__alt_data_end+0xf80037a8>
10003b54:	80bff844 	addi	r2,r16,-31
10003b58:	00c00804 	movi	r3,32
10003b5c:	9884d83a 	srl	r2,r19,r2
10003b60:	28c04a26 	beq	r5,r3,10003c8c <__adddf3+0x560>
10003b64:	00c00fc4 	movi	r3,63
10003b68:	1c21c83a 	sub	r16,r3,r16
10003b6c:	9c26983a 	sll	r19,r19,r16
10003b70:	9c62b03a 	or	r17,r19,r17
10003b74:	8822c03a 	cmpne	r17,r17,zero
10003b78:	88a2b03a 	or	r17,r17,r2
10003b7c:	000b883a 	mov	r5,zero
10003b80:	0021883a 	mov	r16,zero
10003b84:	003fb406 	br	10003a58 <__alt_data_end+0xf8003a58>
10003b88:	18bff804 	addi	r2,r3,-32
10003b8c:	01000804 	movi	r4,32
10003b90:	4084d83a 	srl	r2,r8,r2
10003b94:	19003f26 	beq	r3,r4,10003c94 <__adddf3+0x568>
10003b98:	01001004 	movi	r4,64
10003b9c:	20c7c83a 	sub	r3,r4,r3
10003ba0:	40d0983a 	sll	r8,r8,r3
10003ba4:	418cb03a 	or	r6,r8,r6
10003ba8:	300cc03a 	cmpne	r6,r6,zero
10003bac:	308cb03a 	or	r6,r6,r2
10003bb0:	0007883a 	mov	r3,zero
10003bb4:	003f3406 	br	10003888 <__alt_data_end+0xf8003888>
10003bb8:	80002326 	beq	r16,zero,10003c48 <__adddf3+0x51c>
10003bbc:	0101ffc4 	movi	r4,2047
10003bc0:	11005e26 	beq	r2,r4,10003d3c <__adddf3+0x610>
10003bc4:	00c7c83a 	sub	r3,zero,r3
10003bc8:	29402034 	orhi	r5,r5,128
10003bcc:	01000e04 	movi	r4,56
10003bd0:	20c07216 	blt	r4,r3,10003d9c <__adddf3+0x670>
10003bd4:	010007c4 	movi	r4,31
10003bd8:	20c0ce16 	blt	r4,r3,10003f14 <__adddf3+0x7e8>
10003bdc:	01000804 	movi	r4,32
10003be0:	20c9c83a 	sub	r4,r4,r3
10003be4:	2914983a 	sll	r10,r5,r4
10003be8:	88d2d83a 	srl	r9,r17,r3
10003bec:	8908983a 	sll	r4,r17,r4
10003bf0:	28c6d83a 	srl	r3,r5,r3
10003bf4:	5262b03a 	or	r17,r10,r9
10003bf8:	2008c03a 	cmpne	r4,r4,zero
10003bfc:	8922b03a 	or	r17,r17,r4
10003c00:	3463c83a 	sub	r17,r6,r17
10003c04:	40c7c83a 	sub	r3,r8,r3
10003c08:	344d803a 	cmpltu	r6,r6,r17
10003c0c:	198bc83a 	sub	r5,r3,r6
10003c10:	1021883a 	mov	r16,r2
10003c14:	3825883a 	mov	r18,r7
10003c18:	003f2006 	br	1000389c <__alt_data_end+0xf800389c>
10003c1c:	9886b03a 	or	r3,r19,r2
10003c20:	1800141e 	bne	r3,zero,10003c74 <__adddf3+0x548>
10003c24:	0007883a 	mov	r3,zero
10003c28:	000b883a 	mov	r5,zero
10003c2c:	0023883a 	mov	r17,zero
10003c30:	0021883a 	mov	r16,zero
10003c34:	003f3c06 	br	10003928 <__alt_data_end+0xf8003928>
10003c38:	418cb03a 	or	r6,r8,r6
10003c3c:	300cc03a 	cmpne	r6,r6,zero
10003c40:	0011883a 	mov	r8,zero
10003c44:	003f5606 	br	100039a0 <__alt_data_end+0xf80039a0>
10003c48:	2c48b03a 	or	r4,r5,r17
10003c4c:	20003b26 	beq	r4,zero,10003d3c <__adddf3+0x610>
10003c50:	00c6303a 	nor	r3,zero,r3
10003c54:	1800371e 	bne	r3,zero,10003d34 <__adddf3+0x608>
10003c58:	3463c83a 	sub	r17,r6,r17
10003c5c:	414bc83a 	sub	r5,r8,r5
10003c60:	344d803a 	cmpltu	r6,r6,r17
10003c64:	298bc83a 	sub	r5,r5,r6
10003c68:	1021883a 	mov	r16,r2
10003c6c:	3825883a 	mov	r18,r7
10003c70:	003f0a06 	br	1000389c <__alt_data_end+0xf800389c>
10003c74:	1023883a 	mov	r17,r2
10003c78:	003f0d06 	br	100038b0 <__alt_data_end+0xf80038b0>
10003c7c:	0007883a 	mov	r3,zero
10003c80:	000b883a 	mov	r5,zero
10003c84:	0023883a 	mov	r17,zero
10003c88:	003f2706 	br	10003928 <__alt_data_end+0xf8003928>
10003c8c:	0027883a 	mov	r19,zero
10003c90:	003fb706 	br	10003b70 <__alt_data_end+0xf8003b70>
10003c94:	0011883a 	mov	r8,zero
10003c98:	003fc206 	br	10003ba4 <__alt_data_end+0xf8003ba4>
10003c9c:	2c44b03a 	or	r2,r5,r17
10003ca0:	8000871e 	bne	r16,zero,10003ec0 <__adddf3+0x794>
10003ca4:	1000b126 	beq	r2,zero,10003f6c <__adddf3+0x840>
10003ca8:	4184b03a 	or	r2,r8,r6
10003cac:	103ebe26 	beq	r2,zero,100037a8 <__alt_data_end+0xf80037a8>
10003cb0:	3445883a 	add	r2,r6,r17
10003cb4:	1463803a 	cmpltu	r17,r2,r17
10003cb8:	414b883a 	add	r5,r8,r5
10003cbc:	2c4b883a 	add	r5,r5,r17
10003cc0:	28c0202c 	andhi	r3,r5,128
10003cc4:	1023883a 	mov	r17,r2
10003cc8:	183f6326 	beq	r3,zero,10003a58 <__alt_data_end+0xf8003a58>
10003ccc:	00bfe034 	movhi	r2,65408
10003cd0:	10bfffc4 	addi	r2,r2,-1
10003cd4:	2021883a 	mov	r16,r4
10003cd8:	288a703a 	and	r5,r5,r2
10003cdc:	003eb206 	br	100037a8 <__alt_data_end+0xf80037a8>
10003ce0:	2c44b03a 	or	r2,r5,r17
10003ce4:	8000251e 	bne	r16,zero,10003d7c <__adddf3+0x650>
10003ce8:	10004b1e 	bne	r2,zero,10003e18 <__adddf3+0x6ec>
10003cec:	4184b03a 	or	r2,r8,r6
10003cf0:	103fe226 	beq	r2,zero,10003c7c <__alt_data_end+0xf8003c7c>
10003cf4:	400b883a 	mov	r5,r8
10003cf8:	3023883a 	mov	r17,r6
10003cfc:	3825883a 	mov	r18,r7
10003d00:	003ea906 	br	100037a8 <__alt_data_end+0xf80037a8>
10003d04:	20bff804 	addi	r2,r4,-32
10003d08:	01c00804 	movi	r7,32
10003d0c:	4084d83a 	srl	r2,r8,r2
10003d10:	21c07e26 	beq	r4,r7,10003f0c <__adddf3+0x7e0>
10003d14:	01c01004 	movi	r7,64
10003d18:	3909c83a 	sub	r4,r7,r4
10003d1c:	4110983a 	sll	r8,r8,r4
10003d20:	418cb03a 	or	r6,r8,r6
10003d24:	300cc03a 	cmpne	r6,r6,zero
10003d28:	308cb03a 	or	r6,r6,r2
10003d2c:	0011883a 	mov	r8,zero
10003d30:	003f1b06 	br	100039a0 <__alt_data_end+0xf80039a0>
10003d34:	0101ffc4 	movi	r4,2047
10003d38:	113fa41e 	bne	r2,r4,10003bcc <__alt_data_end+0xf8003bcc>
10003d3c:	400b883a 	mov	r5,r8
10003d40:	3023883a 	mov	r17,r6
10003d44:	1021883a 	mov	r16,r2
10003d48:	3825883a 	mov	r18,r7
10003d4c:	003e9606 	br	100037a8 <__alt_data_end+0xf80037a8>
10003d50:	80001a1e 	bne	r16,zero,10003dbc <__adddf3+0x690>
10003d54:	2c4eb03a 	or	r7,r5,r17
10003d58:	38005526 	beq	r7,zero,10003eb0 <__adddf3+0x784>
10003d5c:	0108303a 	nor	r4,zero,r4
10003d60:	2000511e 	bne	r4,zero,10003ea8 <__adddf3+0x77c>
10003d64:	89a3883a 	add	r17,r17,r6
10003d68:	414b883a 	add	r5,r8,r5
10003d6c:	898d803a 	cmpltu	r6,r17,r6
10003d70:	298b883a 	add	r5,r5,r6
10003d74:	1021883a 	mov	r16,r2
10003d78:	003f0e06 	br	100039b4 <__alt_data_end+0xf80039b4>
10003d7c:	1000341e 	bne	r2,zero,10003e50 <__adddf3+0x724>
10003d80:	4184b03a 	or	r2,r8,r6
10003d84:	10006f26 	beq	r2,zero,10003f44 <__adddf3+0x818>
10003d88:	400b883a 	mov	r5,r8
10003d8c:	3023883a 	mov	r17,r6
10003d90:	3825883a 	mov	r18,r7
10003d94:	0401ffc4 	movi	r16,2047
10003d98:	003e8306 	br	100037a8 <__alt_data_end+0xf80037a8>
10003d9c:	2c62b03a 	or	r17,r5,r17
10003da0:	8822c03a 	cmpne	r17,r17,zero
10003da4:	0007883a 	mov	r3,zero
10003da8:	003f9506 	br	10003c00 <__alt_data_end+0xf8003c00>
10003dac:	1021883a 	mov	r16,r2
10003db0:	000b883a 	mov	r5,zero
10003db4:	0023883a 	mov	r17,zero
10003db8:	003edb06 	br	10003928 <__alt_data_end+0xf8003928>
10003dbc:	01c1ffc4 	movi	r7,2047
10003dc0:	11c03b26 	beq	r2,r7,10003eb0 <__adddf3+0x784>
10003dc4:	0109c83a 	sub	r4,zero,r4
10003dc8:	29402034 	orhi	r5,r5,128
10003dcc:	01c00e04 	movi	r7,56
10003dd0:	39006216 	blt	r7,r4,10003f5c <__adddf3+0x830>
10003dd4:	01c007c4 	movi	r7,31
10003dd8:	39006b16 	blt	r7,r4,10003f88 <__adddf3+0x85c>
10003ddc:	01c00804 	movi	r7,32
10003de0:	390fc83a 	sub	r7,r7,r4
10003de4:	29d4983a 	sll	r10,r5,r7
10003de8:	8912d83a 	srl	r9,r17,r4
10003dec:	89ce983a 	sll	r7,r17,r7
10003df0:	2908d83a 	srl	r4,r5,r4
10003df4:	5262b03a 	or	r17,r10,r9
10003df8:	380ac03a 	cmpne	r5,r7,zero
10003dfc:	8962b03a 	or	r17,r17,r5
10003e00:	89a3883a 	add	r17,r17,r6
10003e04:	2211883a 	add	r8,r4,r8
10003e08:	898d803a 	cmpltu	r6,r17,r6
10003e0c:	418b883a 	add	r5,r8,r6
10003e10:	1021883a 	mov	r16,r2
10003e14:	003ee706 	br	100039b4 <__alt_data_end+0xf80039b4>
10003e18:	4184b03a 	or	r2,r8,r6
10003e1c:	103e6226 	beq	r2,zero,100037a8 <__alt_data_end+0xf80037a8>
10003e20:	8987c83a 	sub	r3,r17,r6
10003e24:	88c9803a 	cmpltu	r4,r17,r3
10003e28:	2a05c83a 	sub	r2,r5,r8
10003e2c:	1105c83a 	sub	r2,r2,r4
10003e30:	1100202c 	andhi	r4,r2,128
10003e34:	203f0426 	beq	r4,zero,10003a48 <__alt_data_end+0xf8003a48>
10003e38:	3463c83a 	sub	r17,r6,r17
10003e3c:	414bc83a 	sub	r5,r8,r5
10003e40:	344d803a 	cmpltu	r6,r6,r17
10003e44:	298bc83a 	sub	r5,r5,r6
10003e48:	3825883a 	mov	r18,r7
10003e4c:	003e5606 	br	100037a8 <__alt_data_end+0xf80037a8>
10003e50:	4184b03a 	or	r2,r8,r6
10003e54:	10002b26 	beq	r2,zero,10003f04 <__adddf3+0x7d8>
10003e58:	2804d0fa 	srli	r2,r5,3
10003e5c:	8822d0fa 	srli	r17,r17,3
10003e60:	280a977a 	slli	r5,r5,29
10003e64:	10c0022c 	andhi	r3,r2,8
10003e68:	2c62b03a 	or	r17,r5,r17
10003e6c:	18000826 	beq	r3,zero,10003e90 <__adddf3+0x764>
10003e70:	4008d0fa 	srli	r4,r8,3
10003e74:	20c0022c 	andhi	r3,r4,8
10003e78:	1800051e 	bne	r3,zero,10003e90 <__adddf3+0x764>
10003e7c:	300cd0fa 	srli	r6,r6,3
10003e80:	4010977a 	slli	r8,r8,29
10003e84:	2005883a 	mov	r2,r4
10003e88:	3825883a 	mov	r18,r7
10003e8c:	41a2b03a 	or	r17,r8,r6
10003e90:	880ad77a 	srli	r5,r17,29
10003e94:	100490fa 	slli	r2,r2,3
10003e98:	882290fa 	slli	r17,r17,3
10003e9c:	0401ffc4 	movi	r16,2047
10003ea0:	288ab03a 	or	r5,r5,r2
10003ea4:	003e4006 	br	100037a8 <__alt_data_end+0xf80037a8>
10003ea8:	01c1ffc4 	movi	r7,2047
10003eac:	11ffc71e 	bne	r2,r7,10003dcc <__alt_data_end+0xf8003dcc>
10003eb0:	400b883a 	mov	r5,r8
10003eb4:	3023883a 	mov	r17,r6
10003eb8:	1021883a 	mov	r16,r2
10003ebc:	003e3a06 	br	100037a8 <__alt_data_end+0xf80037a8>
10003ec0:	10002d26 	beq	r2,zero,10003f78 <__adddf3+0x84c>
10003ec4:	4184b03a 	or	r2,r8,r6
10003ec8:	10000e26 	beq	r2,zero,10003f04 <__adddf3+0x7d8>
10003ecc:	2804d0fa 	srli	r2,r5,3
10003ed0:	8822d0fa 	srli	r17,r17,3
10003ed4:	280a977a 	slli	r5,r5,29
10003ed8:	10c0022c 	andhi	r3,r2,8
10003edc:	2c62b03a 	or	r17,r5,r17
10003ee0:	183feb26 	beq	r3,zero,10003e90 <__alt_data_end+0xf8003e90>
10003ee4:	4008d0fa 	srli	r4,r8,3
10003ee8:	20c0022c 	andhi	r3,r4,8
10003eec:	183fe81e 	bne	r3,zero,10003e90 <__alt_data_end+0xf8003e90>
10003ef0:	300cd0fa 	srli	r6,r6,3
10003ef4:	4010977a 	slli	r8,r8,29
10003ef8:	2005883a 	mov	r2,r4
10003efc:	41a2b03a 	or	r17,r8,r6
10003f00:	003fe306 	br	10003e90 <__alt_data_end+0xf8003e90>
10003f04:	0401ffc4 	movi	r16,2047
10003f08:	003e2706 	br	100037a8 <__alt_data_end+0xf80037a8>
10003f0c:	0011883a 	mov	r8,zero
10003f10:	003f8306 	br	10003d20 <__alt_data_end+0xf8003d20>
10003f14:	193ff804 	addi	r4,r3,-32
10003f18:	02400804 	movi	r9,32
10003f1c:	2908d83a 	srl	r4,r5,r4
10003f20:	1a402526 	beq	r3,r9,10003fb8 <__adddf3+0x88c>
10003f24:	02401004 	movi	r9,64
10003f28:	48c7c83a 	sub	r3,r9,r3
10003f2c:	28ca983a 	sll	r5,r5,r3
10003f30:	2c62b03a 	or	r17,r5,r17
10003f34:	8822c03a 	cmpne	r17,r17,zero
10003f38:	8922b03a 	or	r17,r17,r4
10003f3c:	0007883a 	mov	r3,zero
10003f40:	003f2f06 	br	10003c00 <__alt_data_end+0xf8003c00>
10003f44:	01402034 	movhi	r5,128
10003f48:	0007883a 	mov	r3,zero
10003f4c:	297fffc4 	addi	r5,r5,-1
10003f50:	047ffe04 	movi	r17,-8
10003f54:	0401ffc4 	movi	r16,2047
10003f58:	003e7306 	br	10003928 <__alt_data_end+0xf8003928>
10003f5c:	2c62b03a 	or	r17,r5,r17
10003f60:	8822c03a 	cmpne	r17,r17,zero
10003f64:	0009883a 	mov	r4,zero
10003f68:	003fa506 	br	10003e00 <__alt_data_end+0xf8003e00>
10003f6c:	400b883a 	mov	r5,r8
10003f70:	3023883a 	mov	r17,r6
10003f74:	003e0c06 	br	100037a8 <__alt_data_end+0xf80037a8>
10003f78:	400b883a 	mov	r5,r8
10003f7c:	3023883a 	mov	r17,r6
10003f80:	0401ffc4 	movi	r16,2047
10003f84:	003e0806 	br	100037a8 <__alt_data_end+0xf80037a8>
10003f88:	21fff804 	addi	r7,r4,-32
10003f8c:	02400804 	movi	r9,32
10003f90:	29ced83a 	srl	r7,r5,r7
10003f94:	22400a26 	beq	r4,r9,10003fc0 <__adddf3+0x894>
10003f98:	02401004 	movi	r9,64
10003f9c:	4909c83a 	sub	r4,r9,r4
10003fa0:	290a983a 	sll	r5,r5,r4
10003fa4:	2c62b03a 	or	r17,r5,r17
10003fa8:	8822c03a 	cmpne	r17,r17,zero
10003fac:	89e2b03a 	or	r17,r17,r7
10003fb0:	0009883a 	mov	r4,zero
10003fb4:	003f9206 	br	10003e00 <__alt_data_end+0xf8003e00>
10003fb8:	000b883a 	mov	r5,zero
10003fbc:	003fdc06 	br	10003f30 <__alt_data_end+0xf8003f30>
10003fc0:	000b883a 	mov	r5,zero
10003fc4:	003ff706 	br	10003fa4 <__alt_data_end+0xf8003fa4>

10003fc8 <__divdf3>:
10003fc8:	defff004 	addi	sp,sp,-64
10003fcc:	dc800815 	stw	r18,32(sp)
10003fd0:	2824d53a 	srli	r18,r5,20
10003fd4:	dd800c15 	stw	r22,48(sp)
10003fd8:	282cd7fa 	srli	r22,r5,31
10003fdc:	dc000615 	stw	r16,24(sp)
10003fe0:	04000434 	movhi	r16,16
10003fe4:	df000e15 	stw	fp,56(sp)
10003fe8:	dd000a15 	stw	r20,40(sp)
10003fec:	dcc00915 	stw	r19,36(sp)
10003ff0:	dc400715 	stw	r17,28(sp)
10003ff4:	843fffc4 	addi	r16,r16,-1
10003ff8:	dfc00f15 	stw	ra,60(sp)
10003ffc:	ddc00d15 	stw	r23,52(sp)
10004000:	dd400b15 	stw	r21,44(sp)
10004004:	9481ffcc 	andi	r18,r18,2047
10004008:	2029883a 	mov	r20,r4
1000400c:	2027883a 	mov	r19,r4
10004010:	2c22703a 	and	r17,r5,r16
10004014:	b7003fcc 	andi	fp,r22,255
10004018:	90005e26 	beq	r18,zero,10004194 <__divdf3+0x1cc>
1000401c:	0081ffc4 	movi	r2,2047
10004020:	90803526 	beq	r18,r2,100040f8 <__divdf3+0x130>
10004024:	8c000434 	orhi	r16,r17,16
10004028:	2004d77a 	srli	r2,r4,29
1000402c:	802090fa 	slli	r16,r16,3
10004030:	202690fa 	slli	r19,r4,3
10004034:	94bf0044 	addi	r18,r18,-1023
10004038:	80a2b03a 	or	r17,r16,r2
1000403c:	0029883a 	mov	r20,zero
10004040:	0011883a 	mov	r8,zero
10004044:	380ad53a 	srli	r5,r7,20
10004048:	382ed7fa 	srli	r23,r7,31
1000404c:	04000434 	movhi	r16,16
10004050:	843fffc4 	addi	r16,r16,-1
10004054:	2941ffcc 	andi	r5,r5,2047
10004058:	302b883a 	mov	r21,r6
1000405c:	3c20703a 	and	r16,r7,r16
10004060:	ba403fcc 	andi	r9,r23,255
10004064:	28006726 	beq	r5,zero,10004204 <__divdf3+0x23c>
10004068:	0081ffc4 	movi	r2,2047
1000406c:	28805f26 	beq	r5,r2,100041ec <__divdf3+0x224>
10004070:	84000434 	orhi	r16,r16,16
10004074:	3004d77a 	srli	r2,r6,29
10004078:	802090fa 	slli	r16,r16,3
1000407c:	302a90fa 	slli	r21,r6,3
10004080:	297f0044 	addi	r5,r5,-1023
10004084:	80a0b03a 	or	r16,r16,r2
10004088:	000f883a 	mov	r7,zero
1000408c:	3d06b03a 	or	r3,r7,r20
10004090:	180690ba 	slli	r3,r3,2
10004094:	00840034 	movhi	r2,4096
10004098:	10902e04 	addi	r2,r2,16568
1000409c:	1885883a 	add	r2,r3,r2
100040a0:	10800017 	ldw	r2,0(r2)
100040a4:	b5c8f03a 	xor	r4,r22,r23
100040a8:	200d883a 	mov	r6,r4
100040ac:	25003fcc 	andi	r20,r4,255
100040b0:	9165c83a 	sub	r18,r18,r5
100040b4:	1000683a 	jmp	r2
100040b8:	10004300 	call	11000430 <_gp+0xfe4b28>
100040bc:	10004130 	cmpltui	zero,r2,260
100040c0:	100042c4 	addi	zero,r2,267
100040c4:	10004114 	ori	zero,r2,260
100040c8:	100042c4 	addi	zero,r2,267
100040cc:	10004298 	cmpnei	zero,r2,266
100040d0:	100042c4 	addi	zero,r2,267
100040d4:	10004114 	ori	zero,r2,260
100040d8:	10004130 	cmpltui	zero,r2,260
100040dc:	10004130 	cmpltui	zero,r2,260
100040e0:	10004298 	cmpnei	zero,r2,266
100040e4:	10004114 	ori	zero,r2,260
100040e8:	10004124 	muli	zero,r2,260
100040ec:	10004124 	muli	zero,r2,260
100040f0:	10004124 	muli	zero,r2,260
100040f4:	100042d4 	ori	zero,r2,267
100040f8:	8904b03a 	or	r2,r17,r4
100040fc:	1000631e 	bne	r2,zero,1000428c <__divdf3+0x2c4>
10004100:	05000204 	movi	r20,8
10004104:	0023883a 	mov	r17,zero
10004108:	0027883a 	mov	r19,zero
1000410c:	02000084 	movi	r8,2
10004110:	003fcc06 	br	10004044 <__alt_data_end+0xf8004044>
10004114:	8023883a 	mov	r17,r16
10004118:	a827883a 	mov	r19,r21
1000411c:	4839883a 	mov	fp,r9
10004120:	3811883a 	mov	r8,r7
10004124:	00800084 	movi	r2,2
10004128:	4081531e 	bne	r8,r2,10004678 <__divdf3+0x6b0>
1000412c:	e029883a 	mov	r20,fp
10004130:	a180004c 	andi	r6,r20,1
10004134:	0201ffc4 	movi	r8,2047
10004138:	000b883a 	mov	r5,zero
1000413c:	0027883a 	mov	r19,zero
10004140:	4010953a 	slli	r8,r8,20
10004144:	30c03fcc 	andi	r3,r6,255
10004148:	04000434 	movhi	r16,16
1000414c:	180697fa 	slli	r3,r3,31
10004150:	843fffc4 	addi	r16,r16,-1
10004154:	2c20703a 	and	r16,r5,r16
10004158:	8220b03a 	or	r16,r16,r8
1000415c:	80c6b03a 	or	r3,r16,r3
10004160:	9805883a 	mov	r2,r19
10004164:	dfc00f17 	ldw	ra,60(sp)
10004168:	df000e17 	ldw	fp,56(sp)
1000416c:	ddc00d17 	ldw	r23,52(sp)
10004170:	dd800c17 	ldw	r22,48(sp)
10004174:	dd400b17 	ldw	r21,44(sp)
10004178:	dd000a17 	ldw	r20,40(sp)
1000417c:	dcc00917 	ldw	r19,36(sp)
10004180:	dc800817 	ldw	r18,32(sp)
10004184:	dc400717 	ldw	r17,28(sp)
10004188:	dc000617 	ldw	r16,24(sp)
1000418c:	dec01004 	addi	sp,sp,64
10004190:	f800283a 	ret
10004194:	8904b03a 	or	r2,r17,r4
10004198:	10003726 	beq	r2,zero,10004278 <__divdf3+0x2b0>
1000419c:	88014d26 	beq	r17,zero,100046d4 <__divdf3+0x70c>
100041a0:	8809883a 	mov	r4,r17
100041a4:	d9800215 	stw	r6,8(sp)
100041a8:	d9c00515 	stw	r7,20(sp)
100041ac:	0005e200 	call	10005e20 <__clzsi2>
100041b0:	d9800217 	ldw	r6,8(sp)
100041b4:	d9c00517 	ldw	r7,20(sp)
100041b8:	1007883a 	mov	r3,r2
100041bc:	01000a04 	movi	r4,40
100041c0:	1cfffe04 	addi	r19,r3,-8
100041c4:	20c9c83a 	sub	r4,r4,r3
100041c8:	8cca983a 	sll	r5,r17,r19
100041cc:	a108d83a 	srl	r4,r20,r4
100041d0:	a4e6983a 	sll	r19,r20,r19
100041d4:	2162b03a 	or	r17,r4,r5
100041d8:	04bf0344 	movi	r18,-1011
100041dc:	90e5c83a 	sub	r18,r18,r3
100041e0:	0029883a 	mov	r20,zero
100041e4:	0011883a 	mov	r8,zero
100041e8:	003f9606 	br	10004044 <__alt_data_end+0xf8004044>
100041ec:	8184b03a 	or	r2,r16,r6
100041f0:	10001f1e 	bne	r2,zero,10004270 <__divdf3+0x2a8>
100041f4:	0021883a 	mov	r16,zero
100041f8:	002b883a 	mov	r21,zero
100041fc:	01c00084 	movi	r7,2
10004200:	003fa206 	br	1000408c <__alt_data_end+0xf800408c>
10004204:	8184b03a 	or	r2,r16,r6
10004208:	10001526 	beq	r2,zero,10004260 <__divdf3+0x298>
1000420c:	80013d26 	beq	r16,zero,10004704 <__divdf3+0x73c>
10004210:	8009883a 	mov	r4,r16
10004214:	d9800215 	stw	r6,8(sp)
10004218:	da000315 	stw	r8,12(sp)
1000421c:	da400415 	stw	r9,16(sp)
10004220:	0005e200 	call	10005e20 <__clzsi2>
10004224:	d9800217 	ldw	r6,8(sp)
10004228:	da000317 	ldw	r8,12(sp)
1000422c:	da400417 	ldw	r9,16(sp)
10004230:	1007883a 	mov	r3,r2
10004234:	01000a04 	movi	r4,40
10004238:	1d7ffe04 	addi	r21,r3,-8
1000423c:	20c9c83a 	sub	r4,r4,r3
10004240:	8560983a 	sll	r16,r16,r21
10004244:	3108d83a 	srl	r4,r6,r4
10004248:	356a983a 	sll	r21,r6,r21
1000424c:	2420b03a 	or	r16,r4,r16
10004250:	017f0344 	movi	r5,-1011
10004254:	28cbc83a 	sub	r5,r5,r3
10004258:	000f883a 	mov	r7,zero
1000425c:	003f8b06 	br	1000408c <__alt_data_end+0xf800408c>
10004260:	0021883a 	mov	r16,zero
10004264:	002b883a 	mov	r21,zero
10004268:	01c00044 	movi	r7,1
1000426c:	003f8706 	br	1000408c <__alt_data_end+0xf800408c>
10004270:	01c000c4 	movi	r7,3
10004274:	003f8506 	br	1000408c <__alt_data_end+0xf800408c>
10004278:	05000104 	movi	r20,4
1000427c:	0023883a 	mov	r17,zero
10004280:	0027883a 	mov	r19,zero
10004284:	02000044 	movi	r8,1
10004288:	003f6e06 	br	10004044 <__alt_data_end+0xf8004044>
1000428c:	05000304 	movi	r20,12
10004290:	020000c4 	movi	r8,3
10004294:	003f6b06 	br	10004044 <__alt_data_end+0xf8004044>
10004298:	01400434 	movhi	r5,16
1000429c:	000d883a 	mov	r6,zero
100042a0:	297fffc4 	addi	r5,r5,-1
100042a4:	04ffffc4 	movi	r19,-1
100042a8:	0201ffc4 	movi	r8,2047
100042ac:	003fa406 	br	10004140 <__alt_data_end+0xf8004140>
100042b0:	043f0084 	movi	r16,-1022
100042b4:	84a1c83a 	sub	r16,r16,r18
100042b8:	00800e04 	movi	r2,56
100042bc:	14014d0e 	bge	r2,r16,100047f4 <__divdf3+0x82c>
100042c0:	a180004c 	andi	r6,r20,1
100042c4:	0011883a 	mov	r8,zero
100042c8:	000b883a 	mov	r5,zero
100042cc:	0027883a 	mov	r19,zero
100042d0:	003f9b06 	br	10004140 <__alt_data_end+0xf8004140>
100042d4:	8880022c 	andhi	r2,r17,8
100042d8:	1000f026 	beq	r2,zero,1000469c <__divdf3+0x6d4>
100042dc:	8080022c 	andhi	r2,r16,8
100042e0:	1000ee1e 	bne	r2,zero,1000469c <__divdf3+0x6d4>
100042e4:	00800434 	movhi	r2,16
100042e8:	81400234 	orhi	r5,r16,8
100042ec:	10bfffc4 	addi	r2,r2,-1
100042f0:	b80d883a 	mov	r6,r23
100042f4:	288a703a 	and	r5,r5,r2
100042f8:	a827883a 	mov	r19,r21
100042fc:	003fea06 	br	100042a8 <__alt_data_end+0xf80042a8>
10004300:	84411c36 	bltu	r16,r17,10004774 <__divdf3+0x7ac>
10004304:	8c011a26 	beq	r17,r16,10004770 <__divdf3+0x7a8>
10004308:	94bfffc4 	addi	r18,r18,-1
1000430c:	dcc00015 	stw	r19,0(sp)
10004310:	8811883a 	mov	r8,r17
10004314:	002d883a 	mov	r22,zero
10004318:	a80cd63a 	srli	r6,r21,24
1000431c:	8020923a 	slli	r16,r16,8
10004320:	a82a923a 	slli	r21,r21,8
10004324:	4009883a 	mov	r4,r8
10004328:	342eb03a 	or	r23,r6,r16
1000432c:	dd400115 	stw	r21,4(sp)
10004330:	b82ad43a 	srli	r21,r23,16
10004334:	da000315 	stw	r8,12(sp)
10004338:	bcffffcc 	andi	r19,r23,65535
1000433c:	a80b883a 	mov	r5,r21
10004340:	00036f40 	call	100036f4 <__udivsi3>
10004344:	1009883a 	mov	r4,r2
10004348:	980b883a 	mov	r5,r19
1000434c:	1023883a 	mov	r17,r2
10004350:	00037040 	call	10003704 <__mulsi3>
10004354:	da000317 	ldw	r8,12(sp)
10004358:	a80b883a 	mov	r5,r21
1000435c:	1039883a 	mov	fp,r2
10004360:	4009883a 	mov	r4,r8
10004364:	00036fc0 	call	100036fc <__umodsi3>
10004368:	d8c00017 	ldw	r3,0(sp)
1000436c:	1004943a 	slli	r2,r2,16
10004370:	1810d43a 	srli	r8,r3,16
10004374:	120eb03a 	or	r7,r2,r8
10004378:	3f00062e 	bgeu	r7,fp,10004394 <__divdf3+0x3cc>
1000437c:	3dcf883a 	add	r7,r7,r23
10004380:	88bfffc4 	addi	r2,r17,-1
10004384:	3dc10a36 	bltu	r7,r23,100047b0 <__divdf3+0x7e8>
10004388:	3f01092e 	bgeu	r7,fp,100047b0 <__divdf3+0x7e8>
1000438c:	8c7fff84 	addi	r17,r17,-2
10004390:	3dcf883a 	add	r7,r7,r23
10004394:	3f39c83a 	sub	fp,r7,fp
10004398:	e009883a 	mov	r4,fp
1000439c:	a80b883a 	mov	r5,r21
100043a0:	00036f40 	call	100036f4 <__udivsi3>
100043a4:	1009883a 	mov	r4,r2
100043a8:	980b883a 	mov	r5,r19
100043ac:	1021883a 	mov	r16,r2
100043b0:	00037040 	call	10003704 <__mulsi3>
100043b4:	e009883a 	mov	r4,fp
100043b8:	a80b883a 	mov	r5,r21
100043bc:	d8800315 	stw	r2,12(sp)
100043c0:	00036fc0 	call	100036fc <__umodsi3>
100043c4:	d9000017 	ldw	r4,0(sp)
100043c8:	1004943a 	slli	r2,r2,16
100043cc:	da000317 	ldw	r8,12(sp)
100043d0:	20ffffcc 	andi	r3,r4,65535
100043d4:	10ceb03a 	or	r7,r2,r3
100043d8:	3a00062e 	bgeu	r7,r8,100043f4 <__divdf3+0x42c>
100043dc:	3dcf883a 	add	r7,r7,r23
100043e0:	80bfffc4 	addi	r2,r16,-1
100043e4:	3dc0f036 	bltu	r7,r23,100047a8 <__divdf3+0x7e0>
100043e8:	3a00ef2e 	bgeu	r7,r8,100047a8 <__divdf3+0x7e0>
100043ec:	843fff84 	addi	r16,r16,-2
100043f0:	3dcf883a 	add	r7,r7,r23
100043f4:	d8c00117 	ldw	r3,4(sp)
100043f8:	8822943a 	slli	r17,r17,16
100043fc:	3a0fc83a 	sub	r7,r7,r8
10004400:	1806d43a 	srli	r3,r3,16
10004404:	8462b03a 	or	r17,r16,r17
10004408:	8affffcc 	andi	r11,r17,65535
1000440c:	d8c00015 	stw	r3,0(sp)
10004410:	d8c00117 	ldw	r3,4(sp)
10004414:	8820d43a 	srli	r16,r17,16
10004418:	5809883a 	mov	r4,r11
1000441c:	1f3fffcc 	andi	fp,r3,65535
10004420:	e00b883a 	mov	r5,fp
10004424:	d9c00515 	stw	r7,20(sp)
10004428:	dac00215 	stw	r11,8(sp)
1000442c:	00037040 	call	10003704 <__mulsi3>
10004430:	8009883a 	mov	r4,r16
10004434:	e00b883a 	mov	r5,fp
10004438:	d8800415 	stw	r2,16(sp)
1000443c:	00037040 	call	10003704 <__mulsi3>
10004440:	d9400017 	ldw	r5,0(sp)
10004444:	8009883a 	mov	r4,r16
10004448:	d8800315 	stw	r2,12(sp)
1000444c:	00037040 	call	10003704 <__mulsi3>
10004450:	dac00217 	ldw	r11,8(sp)
10004454:	d9400017 	ldw	r5,0(sp)
10004458:	d8800215 	stw	r2,8(sp)
1000445c:	5809883a 	mov	r4,r11
10004460:	00037040 	call	10003704 <__mulsi3>
10004464:	da400417 	ldw	r9,16(sp)
10004468:	da800317 	ldw	r10,12(sp)
1000446c:	d9c00517 	ldw	r7,20(sp)
10004470:	480ad43a 	srli	r5,r9,16
10004474:	5085883a 	add	r2,r10,r2
10004478:	db000217 	ldw	r12,8(sp)
1000447c:	1151883a 	add	r8,r2,r5
10004480:	4280022e 	bgeu	r8,r10,1000448c <__divdf3+0x4c4>
10004484:	00800074 	movhi	r2,1
10004488:	6099883a 	add	r12,r12,r2
1000448c:	400ad43a 	srli	r5,r8,16
10004490:	4010943a 	slli	r8,r8,16
10004494:	4c3fffcc 	andi	r16,r9,65535
10004498:	6149883a 	add	r4,r12,r5
1000449c:	4411883a 	add	r8,r8,r16
100044a0:	3900a736 	bltu	r7,r4,10004740 <__divdf3+0x778>
100044a4:	3900c426 	beq	r7,r4,100047b8 <__divdf3+0x7f0>
100044a8:	3909c83a 	sub	r4,r7,r4
100044ac:	b221c83a 	sub	r16,r22,r8
100044b0:	b42d803a 	cmpltu	r22,r22,r16
100044b4:	25adc83a 	sub	r22,r4,r22
100044b8:	b5c0c626 	beq	r22,r23,100047d4 <__divdf3+0x80c>
100044bc:	b009883a 	mov	r4,r22
100044c0:	a80b883a 	mov	r5,r21
100044c4:	00036f40 	call	100036f4 <__udivsi3>
100044c8:	1009883a 	mov	r4,r2
100044cc:	980b883a 	mov	r5,r19
100044d0:	d8800315 	stw	r2,12(sp)
100044d4:	00037040 	call	10003704 <__mulsi3>
100044d8:	a80b883a 	mov	r5,r21
100044dc:	b009883a 	mov	r4,r22
100044e0:	d8800415 	stw	r2,16(sp)
100044e4:	00036fc0 	call	100036fc <__umodsi3>
100044e8:	1004943a 	slli	r2,r2,16
100044ec:	800ed43a 	srli	r7,r16,16
100044f0:	da400417 	ldw	r9,16(sp)
100044f4:	da000317 	ldw	r8,12(sp)
100044f8:	11cab03a 	or	r5,r2,r7
100044fc:	2a40062e 	bgeu	r5,r9,10004518 <__divdf3+0x550>
10004500:	2dcb883a 	add	r5,r5,r23
10004504:	40bfffc4 	addi	r2,r8,-1
10004508:	2dc0b436 	bltu	r5,r23,100047dc <__divdf3+0x814>
1000450c:	2a40b32e 	bgeu	r5,r9,100047dc <__divdf3+0x814>
10004510:	423fff84 	addi	r8,r8,-2
10004514:	2dcb883a 	add	r5,r5,r23
10004518:	2a6dc83a 	sub	r22,r5,r9
1000451c:	b009883a 	mov	r4,r22
10004520:	a80b883a 	mov	r5,r21
10004524:	da000315 	stw	r8,12(sp)
10004528:	00036f40 	call	100036f4 <__udivsi3>
1000452c:	980b883a 	mov	r5,r19
10004530:	1009883a 	mov	r4,r2
10004534:	d8800415 	stw	r2,16(sp)
10004538:	00037040 	call	10003704 <__mulsi3>
1000453c:	b009883a 	mov	r4,r22
10004540:	a80b883a 	mov	r5,r21
10004544:	1027883a 	mov	r19,r2
10004548:	00036fc0 	call	100036fc <__umodsi3>
1000454c:	1004943a 	slli	r2,r2,16
10004550:	843fffcc 	andi	r16,r16,65535
10004554:	da000317 	ldw	r8,12(sp)
10004558:	140eb03a 	or	r7,r2,r16
1000455c:	da400417 	ldw	r9,16(sp)
10004560:	3cc0062e 	bgeu	r7,r19,1000457c <__divdf3+0x5b4>
10004564:	3dcf883a 	add	r7,r7,r23
10004568:	48bfffc4 	addi	r2,r9,-1
1000456c:	3dc09d36 	bltu	r7,r23,100047e4 <__divdf3+0x81c>
10004570:	3cc09c2e 	bgeu	r7,r19,100047e4 <__divdf3+0x81c>
10004574:	4a7fff84 	addi	r9,r9,-2
10004578:	3dcf883a 	add	r7,r7,r23
1000457c:	4010943a 	slli	r8,r8,16
10004580:	3cebc83a 	sub	r21,r7,r19
10004584:	e00b883a 	mov	r5,fp
10004588:	4a26b03a 	or	r19,r9,r8
1000458c:	99ffffcc 	andi	r7,r19,65535
10004590:	9820d43a 	srli	r16,r19,16
10004594:	3809883a 	mov	r4,r7
10004598:	d9c00515 	stw	r7,20(sp)
1000459c:	00037040 	call	10003704 <__mulsi3>
100045a0:	8009883a 	mov	r4,r16
100045a4:	e00b883a 	mov	r5,fp
100045a8:	102d883a 	mov	r22,r2
100045ac:	00037040 	call	10003704 <__mulsi3>
100045b0:	d9400017 	ldw	r5,0(sp)
100045b4:	8009883a 	mov	r4,r16
100045b8:	1039883a 	mov	fp,r2
100045bc:	00037040 	call	10003704 <__mulsi3>
100045c0:	d9c00517 	ldw	r7,20(sp)
100045c4:	d9400017 	ldw	r5,0(sp)
100045c8:	1021883a 	mov	r16,r2
100045cc:	3809883a 	mov	r4,r7
100045d0:	00037040 	call	10003704 <__mulsi3>
100045d4:	b008d43a 	srli	r4,r22,16
100045d8:	e085883a 	add	r2,fp,r2
100045dc:	1109883a 	add	r4,r2,r4
100045e0:	2700022e 	bgeu	r4,fp,100045ec <__divdf3+0x624>
100045e4:	00800074 	movhi	r2,1
100045e8:	80a1883a 	add	r16,r16,r2
100045ec:	200ad43a 	srli	r5,r4,16
100045f0:	2008943a 	slli	r4,r4,16
100045f4:	b5bfffcc 	andi	r22,r22,65535
100045f8:	8145883a 	add	r2,r16,r5
100045fc:	2589883a 	add	r4,r4,r22
10004600:	a8802c36 	bltu	r21,r2,100046b4 <__divdf3+0x6ec>
10004604:	a880a426 	beq	r21,r2,10004898 <__divdf3+0x8d0>
10004608:	9cc00054 	ori	r19,r19,1
1000460c:	9200ffc4 	addi	r8,r18,1023
10004610:	023f270e 	bge	zero,r8,100042b0 <__alt_data_end+0xf80042b0>
10004614:	988001cc 	andi	r2,r19,7
10004618:	10000726 	beq	r2,zero,10004638 <__divdf3+0x670>
1000461c:	990003cc 	andi	r4,r19,15
10004620:	00800104 	movi	r2,4
10004624:	20800426 	beq	r4,r2,10004638 <__divdf3+0x670>
10004628:	9885883a 	add	r2,r19,r2
1000462c:	14e7803a 	cmpltu	r19,r2,r19
10004630:	8ce3883a 	add	r17,r17,r19
10004634:	1027883a 	mov	r19,r2
10004638:	8880402c 	andhi	r2,r17,256
1000463c:	10000426 	beq	r2,zero,10004650 <__divdf3+0x688>
10004640:	00bfc034 	movhi	r2,65280
10004644:	10bfffc4 	addi	r2,r2,-1
10004648:	92010004 	addi	r8,r18,1024
1000464c:	88a2703a 	and	r17,r17,r2
10004650:	0081ff84 	movi	r2,2046
10004654:	123eb616 	blt	r2,r8,10004130 <__alt_data_end+0xf8004130>
10004658:	9826d0fa 	srli	r19,r19,3
1000465c:	8804977a 	slli	r2,r17,29
10004660:	8820927a 	slli	r16,r17,9
10004664:	4201ffcc 	andi	r8,r8,2047
10004668:	14e6b03a 	or	r19,r2,r19
1000466c:	800ad33a 	srli	r5,r16,12
10004670:	a180004c 	andi	r6,r20,1
10004674:	003eb206 	br	10004140 <__alt_data_end+0xf8004140>
10004678:	008000c4 	movi	r2,3
1000467c:	4080ac26 	beq	r8,r2,10004930 <__divdf3+0x968>
10004680:	00800044 	movi	r2,1
10004684:	4080591e 	bne	r8,r2,100047ec <__divdf3+0x824>
10004688:	e00d883a 	mov	r6,fp
1000468c:	0011883a 	mov	r8,zero
10004690:	000b883a 	mov	r5,zero
10004694:	0027883a 	mov	r19,zero
10004698:	003ea906 	br	10004140 <__alt_data_end+0xf8004140>
1000469c:	00800434 	movhi	r2,16
100046a0:	89400234 	orhi	r5,r17,8
100046a4:	10bfffc4 	addi	r2,r2,-1
100046a8:	b00d883a 	mov	r6,r22
100046ac:	288a703a 	and	r5,r5,r2
100046b0:	003efd06 	br	100042a8 <__alt_data_end+0xf80042a8>
100046b4:	adcf883a 	add	r7,r21,r23
100046b8:	997fffc4 	addi	r5,r19,-1
100046bc:	3dc0412e 	bgeu	r7,r23,100047c4 <__divdf3+0x7fc>
100046c0:	2827883a 	mov	r19,r5
100046c4:	38bfd01e 	bne	r7,r2,10004608 <__alt_data_end+0xf8004608>
100046c8:	d8c00117 	ldw	r3,4(sp)
100046cc:	193fce1e 	bne	r3,r4,10004608 <__alt_data_end+0xf8004608>
100046d0:	003fce06 	br	1000460c <__alt_data_end+0xf800460c>
100046d4:	d9800215 	stw	r6,8(sp)
100046d8:	d9c00515 	stw	r7,20(sp)
100046dc:	0005e200 	call	10005e20 <__clzsi2>
100046e0:	10c00804 	addi	r3,r2,32
100046e4:	010009c4 	movi	r4,39
100046e8:	d9800217 	ldw	r6,8(sp)
100046ec:	d9c00517 	ldw	r7,20(sp)
100046f0:	20feb20e 	bge	r4,r3,100041bc <__alt_data_end+0xf80041bc>
100046f4:	117ffe04 	addi	r5,r2,-8
100046f8:	a162983a 	sll	r17,r20,r5
100046fc:	0027883a 	mov	r19,zero
10004700:	003eb506 	br	100041d8 <__alt_data_end+0xf80041d8>
10004704:	3009883a 	mov	r4,r6
10004708:	d9800215 	stw	r6,8(sp)
1000470c:	da000315 	stw	r8,12(sp)
10004710:	da400415 	stw	r9,16(sp)
10004714:	0005e200 	call	10005e20 <__clzsi2>
10004718:	10c00804 	addi	r3,r2,32
1000471c:	010009c4 	movi	r4,39
10004720:	d9800217 	ldw	r6,8(sp)
10004724:	da000317 	ldw	r8,12(sp)
10004728:	da400417 	ldw	r9,16(sp)
1000472c:	20fec10e 	bge	r4,r3,10004234 <__alt_data_end+0xf8004234>
10004730:	10bffe04 	addi	r2,r2,-8
10004734:	a8a0983a 	sll	r16,r21,r2
10004738:	002b883a 	mov	r21,zero
1000473c:	003ec406 	br	10004250 <__alt_data_end+0xf8004250>
10004740:	d8c00117 	ldw	r3,4(sp)
10004744:	b0ed883a 	add	r22,r22,r3
10004748:	b0c5803a 	cmpltu	r2,r22,r3
1000474c:	15c5883a 	add	r2,r2,r23
10004750:	11cf883a 	add	r7,r2,r7
10004754:	88bfffc4 	addi	r2,r17,-1
10004758:	b9c00d2e 	bgeu	r23,r7,10004790 <__divdf3+0x7c8>
1000475c:	39003f36 	bltu	r7,r4,1000485c <__divdf3+0x894>
10004760:	21c06a26 	beq	r4,r7,1000490c <__divdf3+0x944>
10004764:	3909c83a 	sub	r4,r7,r4
10004768:	1023883a 	mov	r17,r2
1000476c:	003f4f06 	br	100044ac <__alt_data_end+0xf80044ac>
10004770:	9d7ee536 	bltu	r19,r21,10004308 <__alt_data_end+0xf8004308>
10004774:	982ed07a 	srli	r23,r19,1
10004778:	880497fa 	slli	r2,r17,31
1000477c:	8810d07a 	srli	r8,r17,1
10004780:	982c97fa 	slli	r22,r19,31
10004784:	b884b03a 	or	r2,r23,r2
10004788:	d8800015 	stw	r2,0(sp)
1000478c:	003ee206 	br	10004318 <__alt_data_end+0xf8004318>
10004790:	3dfff41e 	bne	r7,r23,10004764 <__alt_data_end+0xf8004764>
10004794:	d8c00117 	ldw	r3,4(sp)
10004798:	b0fff02e 	bgeu	r22,r3,1000475c <__alt_data_end+0xf800475c>
1000479c:	b909c83a 	sub	r4,r23,r4
100047a0:	1023883a 	mov	r17,r2
100047a4:	003f4106 	br	100044ac <__alt_data_end+0xf80044ac>
100047a8:	1021883a 	mov	r16,r2
100047ac:	003f1106 	br	100043f4 <__alt_data_end+0xf80043f4>
100047b0:	1023883a 	mov	r17,r2
100047b4:	003ef706 	br	10004394 <__alt_data_end+0xf8004394>
100047b8:	b23fe136 	bltu	r22,r8,10004740 <__alt_data_end+0xf8004740>
100047bc:	0009883a 	mov	r4,zero
100047c0:	003f3a06 	br	100044ac <__alt_data_end+0xf80044ac>
100047c4:	38802c36 	bltu	r7,r2,10004878 <__divdf3+0x8b0>
100047c8:	11c05326 	beq	r2,r7,10004918 <__divdf3+0x950>
100047cc:	2827883a 	mov	r19,r5
100047d0:	003f8d06 	br	10004608 <__alt_data_end+0xf8004608>
100047d4:	04ffffc4 	movi	r19,-1
100047d8:	003f8c06 	br	1000460c <__alt_data_end+0xf800460c>
100047dc:	1011883a 	mov	r8,r2
100047e0:	003f4d06 	br	10004518 <__alt_data_end+0xf8004518>
100047e4:	1013883a 	mov	r9,r2
100047e8:	003f6406 	br	1000457c <__alt_data_end+0xf800457c>
100047ec:	e029883a 	mov	r20,fp
100047f0:	003f8606 	br	1000460c <__alt_data_end+0xf800460c>
100047f4:	008007c4 	movi	r2,31
100047f8:	14002a16 	blt	r2,r16,100048a4 <__divdf3+0x8dc>
100047fc:	91410784 	addi	r5,r18,1054
10004800:	9c0cd83a 	srl	r6,r19,r16
10004804:	8948983a 	sll	r4,r17,r5
10004808:	9944983a 	sll	r2,r19,r5
1000480c:	8c20d83a 	srl	r16,r17,r16
10004810:	3108b03a 	or	r4,r6,r4
10004814:	1004c03a 	cmpne	r2,r2,zero
10004818:	2084b03a 	or	r2,r4,r2
1000481c:	110001cc 	andi	r4,r2,7
10004820:	20000726 	beq	r4,zero,10004840 <__divdf3+0x878>
10004824:	114003cc 	andi	r5,r2,15
10004828:	01000104 	movi	r4,4
1000482c:	29000426 	beq	r5,r4,10004840 <__divdf3+0x878>
10004830:	11000104 	addi	r4,r2,4
10004834:	2085803a 	cmpltu	r2,r4,r2
10004838:	80a1883a 	add	r16,r16,r2
1000483c:	2005883a 	mov	r2,r4
10004840:	8100202c 	andhi	r4,r16,128
10004844:	20002d26 	beq	r4,zero,100048fc <__divdf3+0x934>
10004848:	a180004c 	andi	r6,r20,1
1000484c:	02000044 	movi	r8,1
10004850:	000b883a 	mov	r5,zero
10004854:	0027883a 	mov	r19,zero
10004858:	003e3906 	br	10004140 <__alt_data_end+0xf8004140>
1000485c:	d8c00117 	ldw	r3,4(sp)
10004860:	8c7fff84 	addi	r17,r17,-2
10004864:	b0ed883a 	add	r22,r22,r3
10004868:	b0c5803a 	cmpltu	r2,r22,r3
1000486c:	15c5883a 	add	r2,r2,r23
10004870:	11cf883a 	add	r7,r2,r7
10004874:	003f0c06 	br	100044a8 <__alt_data_end+0xf80044a8>
10004878:	d8c00117 	ldw	r3,4(sp)
1000487c:	997fff84 	addi	r5,r19,-2
10004880:	18d1883a 	add	r8,r3,r3
10004884:	40c7803a 	cmpltu	r3,r8,r3
10004888:	1dcd883a 	add	r6,r3,r23
1000488c:	398f883a 	add	r7,r7,r6
10004890:	da000115 	stw	r8,4(sp)
10004894:	003f8a06 	br	100046c0 <__alt_data_end+0xf80046c0>
10004898:	203f861e 	bne	r4,zero,100046b4 <__alt_data_end+0xf80046b4>
1000489c:	d8000115 	stw	zero,4(sp)
100048a0:	003f8906 	br	100046c8 <__alt_data_end+0xf80046c8>
100048a4:	00bef884 	movi	r2,-1054
100048a8:	1485c83a 	sub	r2,r2,r18
100048ac:	01000804 	movi	r4,32
100048b0:	8884d83a 	srl	r2,r17,r2
100048b4:	81001c26 	beq	r16,r4,10004928 <__divdf3+0x960>
100048b8:	91010f84 	addi	r4,r18,1086
100048bc:	8908983a 	sll	r4,r17,r4
100048c0:	24c8b03a 	or	r4,r4,r19
100048c4:	2008c03a 	cmpne	r4,r4,zero
100048c8:	2084b03a 	or	r2,r4,r2
100048cc:	140001cc 	andi	r16,r2,7
100048d0:	8000061e 	bne	r16,zero,100048ec <__divdf3+0x924>
100048d4:	000b883a 	mov	r5,zero
100048d8:	1004d0fa 	srli	r2,r2,3
100048dc:	a180004c 	andi	r6,r20,1
100048e0:	0011883a 	mov	r8,zero
100048e4:	1426b03a 	or	r19,r2,r16
100048e8:	003e1506 	br	10004140 <__alt_data_end+0xf8004140>
100048ec:	114003cc 	andi	r5,r2,15
100048f0:	01000104 	movi	r4,4
100048f4:	0021883a 	mov	r16,zero
100048f8:	293fcd1e 	bne	r5,r4,10004830 <__alt_data_end+0xf8004830>
100048fc:	800a927a 	slli	r5,r16,9
10004900:	8020977a 	slli	r16,r16,29
10004904:	280ad33a 	srli	r5,r5,12
10004908:	003ff306 	br	100048d8 <__alt_data_end+0xf80048d8>
1000490c:	b23fd336 	bltu	r22,r8,1000485c <__alt_data_end+0xf800485c>
10004910:	1023883a 	mov	r17,r2
10004914:	003fa906 	br	100047bc <__alt_data_end+0xf80047bc>
10004918:	d8c00117 	ldw	r3,4(sp)
1000491c:	193fd636 	bltu	r3,r4,10004878 <__alt_data_end+0xf8004878>
10004920:	2827883a 	mov	r19,r5
10004924:	003f6806 	br	100046c8 <__alt_data_end+0xf80046c8>
10004928:	0009883a 	mov	r4,zero
1000492c:	003fe406 	br	100048c0 <__alt_data_end+0xf80048c0>
10004930:	00800434 	movhi	r2,16
10004934:	89400234 	orhi	r5,r17,8
10004938:	10bfffc4 	addi	r2,r2,-1
1000493c:	e00d883a 	mov	r6,fp
10004940:	288a703a 	and	r5,r5,r2
10004944:	003e5806 	br	100042a8 <__alt_data_end+0xf80042a8>

10004948 <__eqdf2>:
10004948:	2804d53a 	srli	r2,r5,20
1000494c:	3806d53a 	srli	r3,r7,20
10004950:	02000434 	movhi	r8,16
10004954:	423fffc4 	addi	r8,r8,-1
10004958:	1081ffcc 	andi	r2,r2,2047
1000495c:	0241ffc4 	movi	r9,2047
10004960:	2a14703a 	and	r10,r5,r8
10004964:	18c1ffcc 	andi	r3,r3,2047
10004968:	3a10703a 	and	r8,r7,r8
1000496c:	280ad7fa 	srli	r5,r5,31
10004970:	380ed7fa 	srli	r7,r7,31
10004974:	12400f26 	beq	r2,r9,100049b4 <__eqdf2+0x6c>
10004978:	0241ffc4 	movi	r9,2047
1000497c:	1a400326 	beq	r3,r9,1000498c <__eqdf2+0x44>
10004980:	10c00526 	beq	r2,r3,10004998 <__eqdf2+0x50>
10004984:	00800044 	movi	r2,1
10004988:	f800283a 	ret
1000498c:	4192b03a 	or	r9,r8,r6
10004990:	483ffc1e 	bne	r9,zero,10004984 <__alt_data_end+0xf8004984>
10004994:	10fffb1e 	bne	r2,r3,10004984 <__alt_data_end+0xf8004984>
10004998:	523ffa1e 	bne	r10,r8,10004984 <__alt_data_end+0xf8004984>
1000499c:	21bff91e 	bne	r4,r6,10004984 <__alt_data_end+0xf8004984>
100049a0:	29c00826 	beq	r5,r7,100049c4 <__eqdf2+0x7c>
100049a4:	103ff71e 	bne	r2,zero,10004984 <__alt_data_end+0xf8004984>
100049a8:	5104b03a 	or	r2,r10,r4
100049ac:	1004c03a 	cmpne	r2,r2,zero
100049b0:	f800283a 	ret
100049b4:	5112b03a 	or	r9,r10,r4
100049b8:	483fef26 	beq	r9,zero,10004978 <__alt_data_end+0xf8004978>
100049bc:	00800044 	movi	r2,1
100049c0:	f800283a 	ret
100049c4:	0005883a 	mov	r2,zero
100049c8:	f800283a 	ret

100049cc <__gedf2>:
100049cc:	2804d53a 	srli	r2,r5,20
100049d0:	3806d53a 	srli	r3,r7,20
100049d4:	02000434 	movhi	r8,16
100049d8:	423fffc4 	addi	r8,r8,-1
100049dc:	0241ffc4 	movi	r9,2047
100049e0:	1081ffcc 	andi	r2,r2,2047
100049e4:	2a14703a 	and	r10,r5,r8
100049e8:	1a46703a 	and	r3,r3,r9
100049ec:	3a10703a 	and	r8,r7,r8
100049f0:	280ad7fa 	srli	r5,r5,31
100049f4:	380ed7fa 	srli	r7,r7,31
100049f8:	12400b26 	beq	r2,r9,10004a28 <__gedf2+0x5c>
100049fc:	1a401626 	beq	r3,r9,10004a58 <__gedf2+0x8c>
10004a00:	10000c1e 	bne	r2,zero,10004a34 <__gedf2+0x68>
10004a04:	5112b03a 	or	r9,r10,r4
10004a08:	4813003a 	cmpeq	r9,r9,zero
10004a0c:	4817883a 	mov	r11,r9
10004a10:	18000c1e 	bne	r3,zero,10004a44 <__gedf2+0x78>
10004a14:	4198b03a 	or	r12,r8,r6
10004a18:	60000a1e 	bne	r12,zero,10004a44 <__gedf2+0x78>
10004a1c:	48001326 	beq	r9,zero,10004a6c <__gedf2+0xa0>
10004a20:	0005883a 	mov	r2,zero
10004a24:	f800283a 	ret
10004a28:	5112b03a 	or	r9,r10,r4
10004a2c:	4800191e 	bne	r9,zero,10004a94 <__gedf2+0xc8>
10004a30:	18800926 	beq	r3,r2,10004a58 <__gedf2+0x8c>
10004a34:	18000b1e 	bne	r3,zero,10004a64 <__gedf2+0x98>
10004a38:	4192b03a 	or	r9,r8,r6
10004a3c:	0017883a 	mov	r11,zero
10004a40:	48000a26 	beq	r9,zero,10004a6c <__gedf2+0xa0>
10004a44:	39c03fcc 	andi	r7,r7,255
10004a48:	58000726 	beq	r11,zero,10004a68 <__gedf2+0x9c>
10004a4c:	3800081e 	bne	r7,zero,10004a70 <__gedf2+0xa4>
10004a50:	00bfffc4 	movi	r2,-1
10004a54:	f800283a 	ret
10004a58:	4192b03a 	or	r9,r8,r6
10004a5c:	48000d1e 	bne	r9,zero,10004a94 <__gedf2+0xc8>
10004a60:	103fe826 	beq	r2,zero,10004a04 <__alt_data_end+0xf8004a04>
10004a64:	39c03fcc 	andi	r7,r7,255
10004a68:	29c00326 	beq	r5,r7,10004a78 <__gedf2+0xac>
10004a6c:	283ff81e 	bne	r5,zero,10004a50 <__alt_data_end+0xf8004a50>
10004a70:	00800044 	movi	r2,1
10004a74:	f800283a 	ret
10004a78:	18bffc16 	blt	r3,r2,10004a6c <__alt_data_end+0xf8004a6c>
10004a7c:	10c00316 	blt	r2,r3,10004a8c <__gedf2+0xc0>
10004a80:	42bffa36 	bltu	r8,r10,10004a6c <__alt_data_end+0xf8004a6c>
10004a84:	52000526 	beq	r10,r8,10004a9c <__gedf2+0xd0>
10004a88:	523fe52e 	bgeu	r10,r8,10004a20 <__alt_data_end+0xf8004a20>
10004a8c:	283ff026 	beq	r5,zero,10004a50 <__alt_data_end+0xf8004a50>
10004a90:	003ff706 	br	10004a70 <__alt_data_end+0xf8004a70>
10004a94:	00bfff84 	movi	r2,-2
10004a98:	f800283a 	ret
10004a9c:	313ff336 	bltu	r6,r4,10004a6c <__alt_data_end+0xf8004a6c>
10004aa0:	21bfdf2e 	bgeu	r4,r6,10004a20 <__alt_data_end+0xf8004a20>
10004aa4:	283fea26 	beq	r5,zero,10004a50 <__alt_data_end+0xf8004a50>
10004aa8:	003ff106 	br	10004a70 <__alt_data_end+0xf8004a70>

10004aac <__ledf2>:
10004aac:	2804d53a 	srli	r2,r5,20
10004ab0:	3810d53a 	srli	r8,r7,20
10004ab4:	00c00434 	movhi	r3,16
10004ab8:	18ffffc4 	addi	r3,r3,-1
10004abc:	0241ffc4 	movi	r9,2047
10004ac0:	1081ffcc 	andi	r2,r2,2047
10004ac4:	28d4703a 	and	r10,r5,r3
10004ac8:	4250703a 	and	r8,r8,r9
10004acc:	38c6703a 	and	r3,r7,r3
10004ad0:	280ad7fa 	srli	r5,r5,31
10004ad4:	380ed7fa 	srli	r7,r7,31
10004ad8:	12400b26 	beq	r2,r9,10004b08 <__ledf2+0x5c>
10004adc:	42401926 	beq	r8,r9,10004b44 <__ledf2+0x98>
10004ae0:	10000c1e 	bne	r2,zero,10004b14 <__ledf2+0x68>
10004ae4:	5112b03a 	or	r9,r10,r4
10004ae8:	4813003a 	cmpeq	r9,r9,zero
10004aec:	4817883a 	mov	r11,r9
10004af0:	40000f26 	beq	r8,zero,10004b30 <__ledf2+0x84>
10004af4:	39c03fcc 	andi	r7,r7,255
10004af8:	58001826 	beq	r11,zero,10004b5c <__ledf2+0xb0>
10004afc:	38000a1e 	bne	r7,zero,10004b28 <__ledf2+0x7c>
10004b00:	00bfffc4 	movi	r2,-1
10004b04:	f800283a 	ret
10004b08:	5112b03a 	or	r9,r10,r4
10004b0c:	48000f1e 	bne	r9,zero,10004b4c <__ledf2+0xa0>
10004b10:	40800c26 	beq	r8,r2,10004b44 <__ledf2+0x98>
10004b14:	4000101e 	bne	r8,zero,10004b58 <__ledf2+0xac>
10004b18:	1992b03a 	or	r9,r3,r6
10004b1c:	0017883a 	mov	r11,zero
10004b20:	483ff41e 	bne	r9,zero,10004af4 <__alt_data_end+0xf8004af4>
10004b24:	283ff61e 	bne	r5,zero,10004b00 <__alt_data_end+0xf8004b00>
10004b28:	00800044 	movi	r2,1
10004b2c:	f800283a 	ret
10004b30:	1998b03a 	or	r12,r3,r6
10004b34:	603fef1e 	bne	r12,zero,10004af4 <__alt_data_end+0xf8004af4>
10004b38:	483ffa26 	beq	r9,zero,10004b24 <__alt_data_end+0xf8004b24>
10004b3c:	0005883a 	mov	r2,zero
10004b40:	f800283a 	ret
10004b44:	1992b03a 	or	r9,r3,r6
10004b48:	48000226 	beq	r9,zero,10004b54 <__ledf2+0xa8>
10004b4c:	00800084 	movi	r2,2
10004b50:	f800283a 	ret
10004b54:	103fe326 	beq	r2,zero,10004ae4 <__alt_data_end+0xf8004ae4>
10004b58:	39c03fcc 	andi	r7,r7,255
10004b5c:	29fff11e 	bne	r5,r7,10004b24 <__alt_data_end+0xf8004b24>
10004b60:	40bff016 	blt	r8,r2,10004b24 <__alt_data_end+0xf8004b24>
10004b64:	12000316 	blt	r2,r8,10004b74 <__ledf2+0xc8>
10004b68:	1abfee36 	bltu	r3,r10,10004b24 <__alt_data_end+0xf8004b24>
10004b6c:	50c00326 	beq	r10,r3,10004b7c <__ledf2+0xd0>
10004b70:	50fff22e 	bgeu	r10,r3,10004b3c <__alt_data_end+0xf8004b3c>
10004b74:	283fe226 	beq	r5,zero,10004b00 <__alt_data_end+0xf8004b00>
10004b78:	003feb06 	br	10004b28 <__alt_data_end+0xf8004b28>
10004b7c:	313fe936 	bltu	r6,r4,10004b24 <__alt_data_end+0xf8004b24>
10004b80:	21bfee2e 	bgeu	r4,r6,10004b3c <__alt_data_end+0xf8004b3c>
10004b84:	283fde26 	beq	r5,zero,10004b00 <__alt_data_end+0xf8004b00>
10004b88:	003fe706 	br	10004b28 <__alt_data_end+0xf8004b28>

10004b8c <__muldf3>:
10004b8c:	deffee04 	addi	sp,sp,-72
10004b90:	dd000c15 	stw	r20,48(sp)
10004b94:	2828d53a 	srli	r20,r5,20
10004b98:	dd400d15 	stw	r21,52(sp)
10004b9c:	282ad7fa 	srli	r21,r5,31
10004ba0:	dc000815 	stw	r16,32(sp)
10004ba4:	04000434 	movhi	r16,16
10004ba8:	ddc00f15 	stw	r23,60(sp)
10004bac:	dcc00b15 	stw	r19,44(sp)
10004bb0:	dc800a15 	stw	r18,40(sp)
10004bb4:	843fffc4 	addi	r16,r16,-1
10004bb8:	dfc01115 	stw	ra,68(sp)
10004bbc:	df001015 	stw	fp,64(sp)
10004bc0:	dd800e15 	stw	r22,56(sp)
10004bc4:	dc400915 	stw	r17,36(sp)
10004bc8:	a501ffcc 	andi	r20,r20,2047
10004bcc:	2025883a 	mov	r18,r4
10004bd0:	202f883a 	mov	r23,r4
10004bd4:	2c20703a 	and	r16,r5,r16
10004bd8:	a827883a 	mov	r19,r21
10004bdc:	aa403fcc 	andi	r9,r21,255
10004be0:	a0005926 	beq	r20,zero,10004d48 <__muldf3+0x1bc>
10004be4:	0081ffc4 	movi	r2,2047
10004be8:	a0803426 	beq	r20,r2,10004cbc <__muldf3+0x130>
10004bec:	84000434 	orhi	r16,r16,16
10004bf0:	2004d77a 	srli	r2,r4,29
10004bf4:	802090fa 	slli	r16,r16,3
10004bf8:	202e90fa 	slli	r23,r4,3
10004bfc:	a53f0044 	addi	r20,r20,-1023
10004c00:	80a0b03a 	or	r16,r16,r2
10004c04:	000b883a 	mov	r5,zero
10004c08:	0039883a 	mov	fp,zero
10004c0c:	3806d53a 	srli	r3,r7,20
10004c10:	382cd7fa 	srli	r22,r7,31
10004c14:	00800434 	movhi	r2,16
10004c18:	10bfffc4 	addi	r2,r2,-1
10004c1c:	18c1ffcc 	andi	r3,r3,2047
10004c20:	3025883a 	mov	r18,r6
10004c24:	38a2703a 	and	r17,r7,r2
10004c28:	b2803fcc 	andi	r10,r22,255
10004c2c:	18006426 	beq	r3,zero,10004dc0 <__muldf3+0x234>
10004c30:	0081ffc4 	movi	r2,2047
10004c34:	18805c26 	beq	r3,r2,10004da8 <__muldf3+0x21c>
10004c38:	8c400434 	orhi	r17,r17,16
10004c3c:	3004d77a 	srli	r2,r6,29
10004c40:	882290fa 	slli	r17,r17,3
10004c44:	302490fa 	slli	r18,r6,3
10004c48:	18ff0044 	addi	r3,r3,-1023
10004c4c:	88a2b03a 	or	r17,r17,r2
10004c50:	000f883a 	mov	r7,zero
10004c54:	394ab03a 	or	r5,r7,r5
10004c58:	280a90ba 	slli	r5,r5,2
10004c5c:	00840034 	movhi	r2,4096
10004c60:	10931f04 	addi	r2,r2,19580
10004c64:	288b883a 	add	r5,r5,r2
10004c68:	28800017 	ldw	r2,0(r5)
10004c6c:	a0c7883a 	add	r3,r20,r3
10004c70:	b54cf03a 	xor	r6,r22,r21
10004c74:	1a000044 	addi	r8,r3,1
10004c78:	1000683a 	jmp	r2
10004c7c:	10004ec0 	call	110004ec <_gp+0xfe4be4>
10004c80:	10004eac 	andhi	zero,r2,314
10004c84:	10004eac 	andhi	zero,r2,314
10004c88:	10004e98 	cmpnei	zero,r2,314
10004c8c:	10004cd8 	cmpnei	zero,r2,307
10004c90:	10004cd8 	cmpnei	zero,r2,307
10004c94:	10004e80 	call	110004e8 <_gp+0xfe4be0>
10004c98:	10004e98 	cmpnei	zero,r2,314
10004c9c:	10004cd8 	cmpnei	zero,r2,307
10004ca0:	10004e80 	call	110004e8 <_gp+0xfe4be0>
10004ca4:	10004cd8 	cmpnei	zero,r2,307
10004ca8:	10004e98 	cmpnei	zero,r2,314
10004cac:	10004cdc 	xori	zero,r2,307
10004cb0:	10004cdc 	xori	zero,r2,307
10004cb4:	10004cdc 	xori	zero,r2,307
10004cb8:	100051fc 	xorhi	zero,r2,327
10004cbc:	8104b03a 	or	r2,r16,r4
10004cc0:	10006c1e 	bne	r2,zero,10004e74 <__muldf3+0x2e8>
10004cc4:	01400204 	movi	r5,8
10004cc8:	0021883a 	mov	r16,zero
10004ccc:	002f883a 	mov	r23,zero
10004cd0:	07000084 	movi	fp,2
10004cd4:	003fcd06 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004cd8:	3013883a 	mov	r9,r6
10004cdc:	00800084 	movi	r2,2
10004ce0:	e080501e 	bne	fp,r2,10004e24 <__muldf3+0x298>
10004ce4:	4cc0004c 	andi	r19,r9,1
10004ce8:	0101ffc4 	movi	r4,2047
10004cec:	0021883a 	mov	r16,zero
10004cf0:	002f883a 	mov	r23,zero
10004cf4:	2008953a 	slli	r4,r4,20
10004cf8:	98c03fcc 	andi	r3,r19,255
10004cfc:	04400434 	movhi	r17,16
10004d00:	8c7fffc4 	addi	r17,r17,-1
10004d04:	180697fa 	slli	r3,r3,31
10004d08:	8460703a 	and	r16,r16,r17
10004d0c:	8120b03a 	or	r16,r16,r4
10004d10:	80c6b03a 	or	r3,r16,r3
10004d14:	b805883a 	mov	r2,r23
10004d18:	dfc01117 	ldw	ra,68(sp)
10004d1c:	df001017 	ldw	fp,64(sp)
10004d20:	ddc00f17 	ldw	r23,60(sp)
10004d24:	dd800e17 	ldw	r22,56(sp)
10004d28:	dd400d17 	ldw	r21,52(sp)
10004d2c:	dd000c17 	ldw	r20,48(sp)
10004d30:	dcc00b17 	ldw	r19,44(sp)
10004d34:	dc800a17 	ldw	r18,40(sp)
10004d38:	dc400917 	ldw	r17,36(sp)
10004d3c:	dc000817 	ldw	r16,32(sp)
10004d40:	dec01204 	addi	sp,sp,72
10004d44:	f800283a 	ret
10004d48:	8104b03a 	or	r2,r16,r4
10004d4c:	10004426 	beq	r2,zero,10004e60 <__muldf3+0x2d4>
10004d50:	80014b26 	beq	r16,zero,10005280 <__muldf3+0x6f4>
10004d54:	8009883a 	mov	r4,r16
10004d58:	d9800715 	stw	r6,28(sp)
10004d5c:	d9c00215 	stw	r7,8(sp)
10004d60:	da400415 	stw	r9,16(sp)
10004d64:	0005e200 	call	10005e20 <__clzsi2>
10004d68:	d9800717 	ldw	r6,28(sp)
10004d6c:	d9c00217 	ldw	r7,8(sp)
10004d70:	da400417 	ldw	r9,16(sp)
10004d74:	1007883a 	mov	r3,r2
10004d78:	01000a04 	movi	r4,40
10004d7c:	1dfffe04 	addi	r23,r3,-8
10004d80:	20c9c83a 	sub	r4,r4,r3
10004d84:	85e0983a 	sll	r16,r16,r23
10004d88:	9108d83a 	srl	r4,r18,r4
10004d8c:	95ee983a 	sll	r23,r18,r23
10004d90:	2420b03a 	or	r16,r4,r16
10004d94:	053f0344 	movi	r20,-1011
10004d98:	a0e9c83a 	sub	r20,r20,r3
10004d9c:	000b883a 	mov	r5,zero
10004da0:	0039883a 	mov	fp,zero
10004da4:	003f9906 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004da8:	8984b03a 	or	r2,r17,r6
10004dac:	10002a1e 	bne	r2,zero,10004e58 <__muldf3+0x2cc>
10004db0:	0023883a 	mov	r17,zero
10004db4:	0025883a 	mov	r18,zero
10004db8:	01c00084 	movi	r7,2
10004dbc:	003fa506 	br	10004c54 <__alt_data_end+0xf8004c54>
10004dc0:	8984b03a 	or	r2,r17,r6
10004dc4:	10002026 	beq	r2,zero,10004e48 <__muldf3+0x2bc>
10004dc8:	88011c26 	beq	r17,zero,1000523c <__muldf3+0x6b0>
10004dcc:	8809883a 	mov	r4,r17
10004dd0:	d9400215 	stw	r5,8(sp)
10004dd4:	d9800715 	stw	r6,28(sp)
10004dd8:	da400415 	stw	r9,16(sp)
10004ddc:	da800315 	stw	r10,12(sp)
10004de0:	0005e200 	call	10005e20 <__clzsi2>
10004de4:	d9400217 	ldw	r5,8(sp)
10004de8:	d9800717 	ldw	r6,28(sp)
10004dec:	da400417 	ldw	r9,16(sp)
10004df0:	da800317 	ldw	r10,12(sp)
10004df4:	1007883a 	mov	r3,r2
10004df8:	01000a04 	movi	r4,40
10004dfc:	1cbffe04 	addi	r18,r3,-8
10004e00:	20c9c83a 	sub	r4,r4,r3
10004e04:	8ca2983a 	sll	r17,r17,r18
10004e08:	3108d83a 	srl	r4,r6,r4
10004e0c:	34a4983a 	sll	r18,r6,r18
10004e10:	2462b03a 	or	r17,r4,r17
10004e14:	00bf0344 	movi	r2,-1011
10004e18:	10c7c83a 	sub	r3,r2,r3
10004e1c:	000f883a 	mov	r7,zero
10004e20:	003f8c06 	br	10004c54 <__alt_data_end+0xf8004c54>
10004e24:	008000c4 	movi	r2,3
10004e28:	e0816d26 	beq	fp,r2,100053e0 <__muldf3+0x854>
10004e2c:	00800044 	movi	r2,1
10004e30:	e081321e 	bne	fp,r2,100052fc <__muldf3+0x770>
10004e34:	48a6703a 	and	r19,r9,r2
10004e38:	0009883a 	mov	r4,zero
10004e3c:	0021883a 	mov	r16,zero
10004e40:	002f883a 	mov	r23,zero
10004e44:	003fab06 	br	10004cf4 <__alt_data_end+0xf8004cf4>
10004e48:	0023883a 	mov	r17,zero
10004e4c:	0025883a 	mov	r18,zero
10004e50:	01c00044 	movi	r7,1
10004e54:	003f7f06 	br	10004c54 <__alt_data_end+0xf8004c54>
10004e58:	01c000c4 	movi	r7,3
10004e5c:	003f7d06 	br	10004c54 <__alt_data_end+0xf8004c54>
10004e60:	01400104 	movi	r5,4
10004e64:	0021883a 	mov	r16,zero
10004e68:	002f883a 	mov	r23,zero
10004e6c:	07000044 	movi	fp,1
10004e70:	003f6606 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004e74:	01400304 	movi	r5,12
10004e78:	070000c4 	movi	fp,3
10004e7c:	003f6306 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004e80:	04000434 	movhi	r16,16
10004e84:	0027883a 	mov	r19,zero
10004e88:	843fffc4 	addi	r16,r16,-1
10004e8c:	05ffffc4 	movi	r23,-1
10004e90:	0101ffc4 	movi	r4,2047
10004e94:	003f9706 	br	10004cf4 <__alt_data_end+0xf8004cf4>
10004e98:	8821883a 	mov	r16,r17
10004e9c:	902f883a 	mov	r23,r18
10004ea0:	5013883a 	mov	r9,r10
10004ea4:	3839883a 	mov	fp,r7
10004ea8:	003f8c06 	br	10004cdc <__alt_data_end+0xf8004cdc>
10004eac:	8821883a 	mov	r16,r17
10004eb0:	902f883a 	mov	r23,r18
10004eb4:	3013883a 	mov	r9,r6
10004eb8:	3839883a 	mov	fp,r7
10004ebc:	003f8706 	br	10004cdc <__alt_data_end+0xf8004cdc>
10004ec0:	b82ad43a 	srli	r21,r23,16
10004ec4:	9038d43a 	srli	fp,r18,16
10004ec8:	bdffffcc 	andi	r23,r23,65535
10004ecc:	94bfffcc 	andi	r18,r18,65535
10004ed0:	9009883a 	mov	r4,r18
10004ed4:	b80b883a 	mov	r5,r23
10004ed8:	d8c00515 	stw	r3,20(sp)
10004edc:	d9800715 	stw	r6,28(sp)
10004ee0:	da000615 	stw	r8,24(sp)
10004ee4:	00037040 	call	10003704 <__mulsi3>
10004ee8:	9009883a 	mov	r4,r18
10004eec:	a80b883a 	mov	r5,r21
10004ef0:	1029883a 	mov	r20,r2
10004ef4:	00037040 	call	10003704 <__mulsi3>
10004ef8:	e009883a 	mov	r4,fp
10004efc:	a80b883a 	mov	r5,r21
10004f00:	102d883a 	mov	r22,r2
10004f04:	00037040 	call	10003704 <__mulsi3>
10004f08:	e009883a 	mov	r4,fp
10004f0c:	b80b883a 	mov	r5,r23
10004f10:	1027883a 	mov	r19,r2
10004f14:	00037040 	call	10003704 <__mulsi3>
10004f18:	a008d43a 	srli	r4,r20,16
10004f1c:	b085883a 	add	r2,r22,r2
10004f20:	d8c00517 	ldw	r3,20(sp)
10004f24:	110f883a 	add	r7,r2,r4
10004f28:	d9800717 	ldw	r6,28(sp)
10004f2c:	da000617 	ldw	r8,24(sp)
10004f30:	3d80022e 	bgeu	r7,r22,10004f3c <__muldf3+0x3b0>
10004f34:	00800074 	movhi	r2,1
10004f38:	98a7883a 	add	r19,r19,r2
10004f3c:	3804943a 	slli	r2,r7,16
10004f40:	380ed43a 	srli	r7,r7,16
10004f44:	882cd43a 	srli	r22,r17,16
10004f48:	a53fffcc 	andi	r20,r20,65535
10004f4c:	8c7fffcc 	andi	r17,r17,65535
10004f50:	1529883a 	add	r20,r2,r20
10004f54:	8809883a 	mov	r4,r17
10004f58:	b80b883a 	mov	r5,r23
10004f5c:	d8c00515 	stw	r3,20(sp)
10004f60:	d9800715 	stw	r6,28(sp)
10004f64:	da000615 	stw	r8,24(sp)
10004f68:	d9c00015 	stw	r7,0(sp)
10004f6c:	dd000115 	stw	r20,4(sp)
10004f70:	00037040 	call	10003704 <__mulsi3>
10004f74:	a80b883a 	mov	r5,r21
10004f78:	8809883a 	mov	r4,r17
10004f7c:	d8800415 	stw	r2,16(sp)
10004f80:	00037040 	call	10003704 <__mulsi3>
10004f84:	a80b883a 	mov	r5,r21
10004f88:	b009883a 	mov	r4,r22
10004f8c:	1029883a 	mov	r20,r2
10004f90:	00037040 	call	10003704 <__mulsi3>
10004f94:	b009883a 	mov	r4,r22
10004f98:	b80b883a 	mov	r5,r23
10004f9c:	102b883a 	mov	r21,r2
10004fa0:	00037040 	call	10003704 <__mulsi3>
10004fa4:	da400417 	ldw	r9,16(sp)
10004fa8:	a085883a 	add	r2,r20,r2
10004fac:	d8c00517 	ldw	r3,20(sp)
10004fb0:	4808d43a 	srli	r4,r9,16
10004fb4:	d9800717 	ldw	r6,28(sp)
10004fb8:	da000617 	ldw	r8,24(sp)
10004fbc:	1109883a 	add	r4,r2,r4
10004fc0:	2500022e 	bgeu	r4,r20,10004fcc <__muldf3+0x440>
10004fc4:	00800074 	movhi	r2,1
10004fc8:	a8ab883a 	add	r21,r21,r2
10004fcc:	200e943a 	slli	r7,r4,16
10004fd0:	2004d43a 	srli	r2,r4,16
10004fd4:	802ed43a 	srli	r23,r16,16
10004fd8:	843fffcc 	andi	r16,r16,65535
10004fdc:	4d3fffcc 	andi	r20,r9,65535
10004fe0:	9009883a 	mov	r4,r18
10004fe4:	800b883a 	mov	r5,r16
10004fe8:	3d29883a 	add	r20,r7,r20
10004fec:	d8c00515 	stw	r3,20(sp)
10004ff0:	d9800715 	stw	r6,28(sp)
10004ff4:	da000615 	stw	r8,24(sp)
10004ff8:	a8ab883a 	add	r21,r21,r2
10004ffc:	00037040 	call	10003704 <__mulsi3>
10005000:	9009883a 	mov	r4,r18
10005004:	b80b883a 	mov	r5,r23
10005008:	d8800315 	stw	r2,12(sp)
1000500c:	00037040 	call	10003704 <__mulsi3>
10005010:	e009883a 	mov	r4,fp
10005014:	b80b883a 	mov	r5,r23
10005018:	1025883a 	mov	r18,r2
1000501c:	00037040 	call	10003704 <__mulsi3>
10005020:	e009883a 	mov	r4,fp
10005024:	800b883a 	mov	r5,r16
10005028:	d8800215 	stw	r2,8(sp)
1000502c:	00037040 	call	10003704 <__mulsi3>
10005030:	da800317 	ldw	r10,12(sp)
10005034:	d9400017 	ldw	r5,0(sp)
10005038:	9085883a 	add	r2,r18,r2
1000503c:	5008d43a 	srli	r4,r10,16
10005040:	a153883a 	add	r9,r20,r5
10005044:	d8c00517 	ldw	r3,20(sp)
10005048:	1109883a 	add	r4,r2,r4
1000504c:	d9800717 	ldw	r6,28(sp)
10005050:	da000617 	ldw	r8,24(sp)
10005054:	dac00217 	ldw	r11,8(sp)
10005058:	2480022e 	bgeu	r4,r18,10005064 <__muldf3+0x4d8>
1000505c:	00800074 	movhi	r2,1
10005060:	5897883a 	add	r11,r11,r2
10005064:	200e943a 	slli	r7,r4,16
10005068:	2038d43a 	srli	fp,r4,16
1000506c:	52bfffcc 	andi	r10,r10,65535
10005070:	3a8f883a 	add	r7,r7,r10
10005074:	8809883a 	mov	r4,r17
10005078:	800b883a 	mov	r5,r16
1000507c:	d8c00515 	stw	r3,20(sp)
10005080:	d9800715 	stw	r6,28(sp)
10005084:	d9c00215 	stw	r7,8(sp)
10005088:	da000615 	stw	r8,24(sp)
1000508c:	da400415 	stw	r9,16(sp)
10005090:	5f39883a 	add	fp,r11,fp
10005094:	00037040 	call	10003704 <__mulsi3>
10005098:	8809883a 	mov	r4,r17
1000509c:	b80b883a 	mov	r5,r23
100050a0:	1025883a 	mov	r18,r2
100050a4:	00037040 	call	10003704 <__mulsi3>
100050a8:	b009883a 	mov	r4,r22
100050ac:	b80b883a 	mov	r5,r23
100050b0:	d8800315 	stw	r2,12(sp)
100050b4:	00037040 	call	10003704 <__mulsi3>
100050b8:	b009883a 	mov	r4,r22
100050bc:	800b883a 	mov	r5,r16
100050c0:	1023883a 	mov	r17,r2
100050c4:	00037040 	call	10003704 <__mulsi3>
100050c8:	da800317 	ldw	r10,12(sp)
100050cc:	9008d43a 	srli	r4,r18,16
100050d0:	d8c00517 	ldw	r3,20(sp)
100050d4:	5085883a 	add	r2,r10,r2
100050d8:	1109883a 	add	r4,r2,r4
100050dc:	d9800717 	ldw	r6,28(sp)
100050e0:	d9c00217 	ldw	r7,8(sp)
100050e4:	da000617 	ldw	r8,24(sp)
100050e8:	da400417 	ldw	r9,16(sp)
100050ec:	2280022e 	bgeu	r4,r10,100050f8 <__muldf3+0x56c>
100050f0:	00800074 	movhi	r2,1
100050f4:	88a3883a 	add	r17,r17,r2
100050f8:	2004943a 	slli	r2,r4,16
100050fc:	94bfffcc 	andi	r18,r18,65535
10005100:	4ce7883a 	add	r19,r9,r19
10005104:	14a5883a 	add	r18,r2,r18
10005108:	9d29803a 	cmpltu	r20,r19,r20
1000510c:	9565883a 	add	r18,r18,r21
10005110:	9505883a 	add	r2,r18,r20
10005114:	99e7883a 	add	r19,r19,r7
10005118:	99cf803a 	cmpltu	r7,r19,r7
1000511c:	e08b883a 	add	r5,fp,r2
10005120:	2008d43a 	srli	r4,r4,16
10005124:	29ef883a 	add	r23,r5,r7
10005128:	1529803a 	cmpltu	r20,r2,r20
1000512c:	956b803a 	cmpltu	r21,r18,r21
10005130:	b9cf803a 	cmpltu	r7,r23,r7
10005134:	a564b03a 	or	r18,r20,r21
10005138:	2f39803a 	cmpltu	fp,r5,fp
1000513c:	9125883a 	add	r18,r18,r4
10005140:	3f38b03a 	or	fp,r7,fp
10005144:	9725883a 	add	r18,r18,fp
10005148:	9804927a 	slli	r2,r19,9
1000514c:	9463883a 	add	r17,r18,r17
10005150:	d9000117 	ldw	r4,4(sp)
10005154:	b820d5fa 	srli	r16,r23,23
10005158:	8822927a 	slli	r17,r17,9
1000515c:	9826d5fa 	srli	r19,r19,23
10005160:	1104b03a 	or	r2,r2,r4
10005164:	b82e927a 	slli	r23,r23,9
10005168:	1004c03a 	cmpne	r2,r2,zero
1000516c:	8c20b03a 	or	r16,r17,r16
10005170:	14e6b03a 	or	r19,r2,r19
10005174:	8080402c 	andhi	r2,r16,256
10005178:	9deeb03a 	or	r23,r19,r23
1000517c:	10000726 	beq	r2,zero,1000519c <__muldf3+0x610>
10005180:	b804d07a 	srli	r2,r23,1
10005184:	800697fa 	slli	r3,r16,31
10005188:	bdc0004c 	andi	r23,r23,1
1000518c:	8020d07a 	srli	r16,r16,1
10005190:	b8aeb03a 	or	r23,r23,r2
10005194:	b8eeb03a 	or	r23,r23,r3
10005198:	4007883a 	mov	r3,r8
1000519c:	1900ffc4 	addi	r4,r3,1023
100051a0:	01004d0e 	bge	zero,r4,100052d8 <__muldf3+0x74c>
100051a4:	b88001cc 	andi	r2,r23,7
100051a8:	10000726 	beq	r2,zero,100051c8 <__muldf3+0x63c>
100051ac:	b94003cc 	andi	r5,r23,15
100051b0:	00800104 	movi	r2,4
100051b4:	28800426 	beq	r5,r2,100051c8 <__muldf3+0x63c>
100051b8:	b885883a 	add	r2,r23,r2
100051bc:	15ef803a 	cmpltu	r23,r2,r23
100051c0:	85e1883a 	add	r16,r16,r23
100051c4:	102f883a 	mov	r23,r2
100051c8:	8080402c 	andhi	r2,r16,256
100051cc:	10000426 	beq	r2,zero,100051e0 <__muldf3+0x654>
100051d0:	00bfc034 	movhi	r2,65280
100051d4:	10bfffc4 	addi	r2,r2,-1
100051d8:	19010004 	addi	r4,r3,1024
100051dc:	80a0703a 	and	r16,r16,r2
100051e0:	0081ff84 	movi	r2,2046
100051e4:	1100340e 	bge	r2,r4,100052b8 <__muldf3+0x72c>
100051e8:	34c0004c 	andi	r19,r6,1
100051ec:	0101ffc4 	movi	r4,2047
100051f0:	0021883a 	mov	r16,zero
100051f4:	002f883a 	mov	r23,zero
100051f8:	003ebe06 	br	10004cf4 <__alt_data_end+0xf8004cf4>
100051fc:	8080022c 	andhi	r2,r16,8
10005200:	10000926 	beq	r2,zero,10005228 <__muldf3+0x69c>
10005204:	8880022c 	andhi	r2,r17,8
10005208:	1000071e 	bne	r2,zero,10005228 <__muldf3+0x69c>
1000520c:	00800434 	movhi	r2,16
10005210:	8c000234 	orhi	r16,r17,8
10005214:	10bfffc4 	addi	r2,r2,-1
10005218:	b027883a 	mov	r19,r22
1000521c:	80a0703a 	and	r16,r16,r2
10005220:	902f883a 	mov	r23,r18
10005224:	003f1a06 	br	10004e90 <__alt_data_end+0xf8004e90>
10005228:	00800434 	movhi	r2,16
1000522c:	84000234 	orhi	r16,r16,8
10005230:	10bfffc4 	addi	r2,r2,-1
10005234:	80a0703a 	and	r16,r16,r2
10005238:	003f1506 	br	10004e90 <__alt_data_end+0xf8004e90>
1000523c:	3009883a 	mov	r4,r6
10005240:	d9400215 	stw	r5,8(sp)
10005244:	d9800715 	stw	r6,28(sp)
10005248:	da400415 	stw	r9,16(sp)
1000524c:	da800315 	stw	r10,12(sp)
10005250:	0005e200 	call	10005e20 <__clzsi2>
10005254:	10c00804 	addi	r3,r2,32
10005258:	010009c4 	movi	r4,39
1000525c:	d9400217 	ldw	r5,8(sp)
10005260:	d9800717 	ldw	r6,28(sp)
10005264:	da400417 	ldw	r9,16(sp)
10005268:	da800317 	ldw	r10,12(sp)
1000526c:	20fee20e 	bge	r4,r3,10004df8 <__alt_data_end+0xf8004df8>
10005270:	147ffe04 	addi	r17,r2,-8
10005274:	9462983a 	sll	r17,r18,r17
10005278:	0025883a 	mov	r18,zero
1000527c:	003ee506 	br	10004e14 <__alt_data_end+0xf8004e14>
10005280:	d9800715 	stw	r6,28(sp)
10005284:	d9c00215 	stw	r7,8(sp)
10005288:	da400415 	stw	r9,16(sp)
1000528c:	0005e200 	call	10005e20 <__clzsi2>
10005290:	10c00804 	addi	r3,r2,32
10005294:	010009c4 	movi	r4,39
10005298:	d9800717 	ldw	r6,28(sp)
1000529c:	d9c00217 	ldw	r7,8(sp)
100052a0:	da400417 	ldw	r9,16(sp)
100052a4:	20feb40e 	bge	r4,r3,10004d78 <__alt_data_end+0xf8004d78>
100052a8:	143ffe04 	addi	r16,r2,-8
100052ac:	9420983a 	sll	r16,r18,r16
100052b0:	002f883a 	mov	r23,zero
100052b4:	003eb706 	br	10004d94 <__alt_data_end+0xf8004d94>
100052b8:	8004977a 	slli	r2,r16,29
100052bc:	b82ed0fa 	srli	r23,r23,3
100052c0:	8020927a 	slli	r16,r16,9
100052c4:	2101ffcc 	andi	r4,r4,2047
100052c8:	15eeb03a 	or	r23,r2,r23
100052cc:	8020d33a 	srli	r16,r16,12
100052d0:	34c0004c 	andi	r19,r6,1
100052d4:	003e8706 	br	10004cf4 <__alt_data_end+0xf8004cf4>
100052d8:	00bf0084 	movi	r2,-1022
100052dc:	10c5c83a 	sub	r2,r2,r3
100052e0:	01000e04 	movi	r4,56
100052e4:	2080080e 	bge	r4,r2,10005308 <__muldf3+0x77c>
100052e8:	34c0004c 	andi	r19,r6,1
100052ec:	0009883a 	mov	r4,zero
100052f0:	0021883a 	mov	r16,zero
100052f4:	002f883a 	mov	r23,zero
100052f8:	003e7e06 	br	10004cf4 <__alt_data_end+0xf8004cf4>
100052fc:	4007883a 	mov	r3,r8
10005300:	480d883a 	mov	r6,r9
10005304:	003fa506 	br	1000519c <__alt_data_end+0xf800519c>
10005308:	010007c4 	movi	r4,31
1000530c:	20801816 	blt	r4,r2,10005370 <__muldf3+0x7e4>
10005310:	18c10784 	addi	r3,r3,1054
10005314:	80c8983a 	sll	r4,r16,r3
10005318:	b88ad83a 	srl	r5,r23,r2
1000531c:	b8c6983a 	sll	r3,r23,r3
10005320:	80a0d83a 	srl	r16,r16,r2
10005324:	2908b03a 	or	r4,r5,r4
10005328:	1804c03a 	cmpne	r2,r3,zero
1000532c:	2088b03a 	or	r4,r4,r2
10005330:	208001cc 	andi	r2,r4,7
10005334:	10000726 	beq	r2,zero,10005354 <__muldf3+0x7c8>
10005338:	20c003cc 	andi	r3,r4,15
1000533c:	00800104 	movi	r2,4
10005340:	18800426 	beq	r3,r2,10005354 <__muldf3+0x7c8>
10005344:	20c00104 	addi	r3,r4,4
10005348:	1905803a 	cmpltu	r2,r3,r4
1000534c:	80a1883a 	add	r16,r16,r2
10005350:	1809883a 	mov	r4,r3
10005354:	8080202c 	andhi	r2,r16,128
10005358:	10001b26 	beq	r2,zero,100053c8 <__muldf3+0x83c>
1000535c:	34c0004c 	andi	r19,r6,1
10005360:	01000044 	movi	r4,1
10005364:	0021883a 	mov	r16,zero
10005368:	002f883a 	mov	r23,zero
1000536c:	003e6106 	br	10004cf4 <__alt_data_end+0xf8004cf4>
10005370:	013ef884 	movi	r4,-1054
10005374:	20c9c83a 	sub	r4,r4,r3
10005378:	01400804 	movi	r5,32
1000537c:	8108d83a 	srl	r4,r16,r4
10005380:	11401526 	beq	r2,r5,100053d8 <__muldf3+0x84c>
10005384:	18c10f84 	addi	r3,r3,1086
10005388:	80e0983a 	sll	r16,r16,r3
1000538c:	85eeb03a 	or	r23,r16,r23
10005390:	b804c03a 	cmpne	r2,r23,zero
10005394:	1108b03a 	or	r4,r2,r4
10005398:	20c001cc 	andi	r3,r4,7
1000539c:	1800061e 	bne	r3,zero,100053b8 <__muldf3+0x82c>
100053a0:	0021883a 	mov	r16,zero
100053a4:	202ed0fa 	srli	r23,r4,3
100053a8:	34c0004c 	andi	r19,r6,1
100053ac:	0009883a 	mov	r4,zero
100053b0:	b8eeb03a 	or	r23,r23,r3
100053b4:	003e4f06 	br	10004cf4 <__alt_data_end+0xf8004cf4>
100053b8:	20c003cc 	andi	r3,r4,15
100053bc:	00800104 	movi	r2,4
100053c0:	0021883a 	mov	r16,zero
100053c4:	18bfdf1e 	bne	r3,r2,10005344 <__alt_data_end+0xf8005344>
100053c8:	8004927a 	slli	r2,r16,9
100053cc:	8006977a 	slli	r3,r16,29
100053d0:	1020d33a 	srli	r16,r2,12
100053d4:	003ff306 	br	100053a4 <__alt_data_end+0xf80053a4>
100053d8:	0021883a 	mov	r16,zero
100053dc:	003feb06 	br	1000538c <__alt_data_end+0xf800538c>
100053e0:	00800434 	movhi	r2,16
100053e4:	84000234 	orhi	r16,r16,8
100053e8:	10bfffc4 	addi	r2,r2,-1
100053ec:	4cc0004c 	andi	r19,r9,1
100053f0:	80a0703a 	and	r16,r16,r2
100053f4:	003ea606 	br	10004e90 <__alt_data_end+0xf8004e90>

100053f8 <__subdf3>:
100053f8:	00c00434 	movhi	r3,16
100053fc:	18ffffc4 	addi	r3,r3,-1
10005400:	defffb04 	addi	sp,sp,-20
10005404:	28d2703a 	and	r9,r5,r3
10005408:	3814d53a 	srli	r10,r7,20
1000540c:	38c6703a 	and	r3,r7,r3
10005410:	3004d77a 	srli	r2,r6,29
10005414:	dc800215 	stw	r18,8(sp)
10005418:	dc000015 	stw	r16,0(sp)
1000541c:	2824d7fa 	srli	r18,r5,31
10005420:	2820d53a 	srli	r16,r5,20
10005424:	481290fa 	slli	r9,r9,3
10005428:	200ad77a 	srli	r5,r4,29
1000542c:	180690fa 	slli	r3,r3,3
10005430:	dc400115 	stw	r17,4(sp)
10005434:	dfc00415 	stw	ra,16(sp)
10005438:	202290fa 	slli	r17,r4,3
1000543c:	dcc00315 	stw	r19,12(sp)
10005440:	5281ffcc 	andi	r10,r10,2047
10005444:	0101ffc4 	movi	r4,2047
10005448:	9011883a 	mov	r8,r18
1000544c:	8401ffcc 	andi	r16,r16,2047
10005450:	94803fcc 	andi	r18,r18,255
10005454:	494ab03a 	or	r5,r9,r5
10005458:	380ed7fa 	srli	r7,r7,31
1000545c:	1886b03a 	or	r3,r3,r2
10005460:	300c90fa 	slli	r6,r6,3
10005464:	51009026 	beq	r10,r4,100056a8 <__subdf3+0x2b0>
10005468:	39c0005c 	xori	r7,r7,1
1000546c:	8285c83a 	sub	r2,r16,r10
10005470:	91c06f26 	beq	r18,r7,10005630 <__subdf3+0x238>
10005474:	0080b10e 	bge	zero,r2,1000573c <__subdf3+0x344>
10005478:	50002a1e 	bne	r10,zero,10005524 <__subdf3+0x12c>
1000547c:	1988b03a 	or	r4,r3,r6
10005480:	2000941e 	bne	r4,zero,100056d4 <__subdf3+0x2dc>
10005484:	888001cc 	andi	r2,r17,7
10005488:	10005b26 	beq	r2,zero,100055f8 <__subdf3+0x200>
1000548c:	88c003cc 	andi	r3,r17,15
10005490:	00800104 	movi	r2,4
10005494:	18805826 	beq	r3,r2,100055f8 <__subdf3+0x200>
10005498:	88c00104 	addi	r3,r17,4
1000549c:	1c63803a 	cmpltu	r17,r3,r17
100054a0:	2c4b883a 	add	r5,r5,r17
100054a4:	2880202c 	andhi	r2,r5,128
100054a8:	9200004c 	andi	r8,r18,1
100054ac:	1823883a 	mov	r17,r3
100054b0:	10005426 	beq	r2,zero,10005604 <__subdf3+0x20c>
100054b4:	84000044 	addi	r16,r16,1
100054b8:	0081ffc4 	movi	r2,2047
100054bc:	8080bf26 	beq	r16,r2,100057bc <__subdf3+0x3c4>
100054c0:	013fe034 	movhi	r4,65408
100054c4:	213fffc4 	addi	r4,r4,-1
100054c8:	290a703a 	and	r5,r5,r4
100054cc:	2804977a 	slli	r2,r5,29
100054d0:	280a927a 	slli	r5,r5,9
100054d4:	8822d0fa 	srli	r17,r17,3
100054d8:	8401ffcc 	andi	r16,r16,2047
100054dc:	2808d33a 	srli	r4,r5,12
100054e0:	1444b03a 	or	r2,r2,r17
100054e4:	8401ffcc 	andi	r16,r16,2047
100054e8:	800a953a 	slli	r5,r16,20
100054ec:	40c03fcc 	andi	r3,r8,255
100054f0:	04000434 	movhi	r16,16
100054f4:	180697fa 	slli	r3,r3,31
100054f8:	843fffc4 	addi	r16,r16,-1
100054fc:	2420703a 	and	r16,r4,r16
10005500:	8160b03a 	or	r16,r16,r5
10005504:	80c6b03a 	or	r3,r16,r3
10005508:	dfc00417 	ldw	ra,16(sp)
1000550c:	dcc00317 	ldw	r19,12(sp)
10005510:	dc800217 	ldw	r18,8(sp)
10005514:	dc400117 	ldw	r17,4(sp)
10005518:	dc000017 	ldw	r16,0(sp)
1000551c:	dec00504 	addi	sp,sp,20
10005520:	f800283a 	ret
10005524:	0101ffc4 	movi	r4,2047
10005528:	813fd626 	beq	r16,r4,10005484 <__alt_data_end+0xf8005484>
1000552c:	18c02034 	orhi	r3,r3,128
10005530:	01000e04 	movi	r4,56
10005534:	2080a416 	blt	r4,r2,100057c8 <__subdf3+0x3d0>
10005538:	010007c4 	movi	r4,31
1000553c:	2080c716 	blt	r4,r2,1000585c <__subdf3+0x464>
10005540:	01000804 	movi	r4,32
10005544:	2089c83a 	sub	r4,r4,r2
10005548:	1910983a 	sll	r8,r3,r4
1000554c:	308ed83a 	srl	r7,r6,r2
10005550:	3108983a 	sll	r4,r6,r4
10005554:	1884d83a 	srl	r2,r3,r2
10005558:	41ccb03a 	or	r6,r8,r7
1000555c:	2008c03a 	cmpne	r4,r4,zero
10005560:	310cb03a 	or	r6,r6,r4
10005564:	898dc83a 	sub	r6,r17,r6
10005568:	89a3803a 	cmpltu	r17,r17,r6
1000556c:	288bc83a 	sub	r5,r5,r2
10005570:	2c4bc83a 	sub	r5,r5,r17
10005574:	3023883a 	mov	r17,r6
10005578:	2880202c 	andhi	r2,r5,128
1000557c:	10006b26 	beq	r2,zero,1000572c <__subdf3+0x334>
10005580:	04c02034 	movhi	r19,128
10005584:	9cffffc4 	addi	r19,r19,-1
10005588:	2ce6703a 	and	r19,r5,r19
1000558c:	98007c26 	beq	r19,zero,10005780 <__subdf3+0x388>
10005590:	9809883a 	mov	r4,r19
10005594:	0005e200 	call	10005e20 <__clzsi2>
10005598:	10fffe04 	addi	r3,r2,-8
1000559c:	010007c4 	movi	r4,31
100055a0:	20c07d16 	blt	r4,r3,10005798 <__subdf3+0x3a0>
100055a4:	01400a04 	movi	r5,40
100055a8:	2885c83a 	sub	r2,r5,r2
100055ac:	888ad83a 	srl	r5,r17,r2
100055b0:	98e6983a 	sll	r19,r19,r3
100055b4:	88e2983a 	sll	r17,r17,r3
100055b8:	2ce6b03a 	or	r19,r5,r19
100055bc:	1c007a16 	blt	r3,r16,100057a8 <__subdf3+0x3b0>
100055c0:	1c21c83a 	sub	r16,r3,r16
100055c4:	81400044 	addi	r5,r16,1
100055c8:	00c007c4 	movi	r3,31
100055cc:	19409616 	blt	r3,r5,10005828 <__subdf3+0x430>
100055d0:	1c21c83a 	sub	r16,r3,r16
100055d4:	8c08983a 	sll	r4,r17,r16
100055d8:	8946d83a 	srl	r3,r17,r5
100055dc:	9c20983a 	sll	r16,r19,r16
100055e0:	2008c03a 	cmpne	r4,r4,zero
100055e4:	994ad83a 	srl	r5,r19,r5
100055e8:	1c06b03a 	or	r3,r3,r16
100055ec:	1922b03a 	or	r17,r3,r4
100055f0:	0021883a 	mov	r16,zero
100055f4:	003fa306 	br	10005484 <__alt_data_end+0xf8005484>
100055f8:	2880202c 	andhi	r2,r5,128
100055fc:	9200004c 	andi	r8,r18,1
10005600:	103fac1e 	bne	r2,zero,100054b4 <__alt_data_end+0xf80054b4>
10005604:	2804977a 	slli	r2,r5,29
10005608:	8822d0fa 	srli	r17,r17,3
1000560c:	00c1ffc4 	movi	r3,2047
10005610:	280ad0fa 	srli	r5,r5,3
10005614:	1444b03a 	or	r2,r2,r17
10005618:	80c02726 	beq	r16,r3,100056b8 <__subdf3+0x2c0>
1000561c:	01000434 	movhi	r4,16
10005620:	213fffc4 	addi	r4,r4,-1
10005624:	80e0703a 	and	r16,r16,r3
10005628:	2908703a 	and	r4,r5,r4
1000562c:	003fad06 	br	100054e4 <__alt_data_end+0xf80054e4>
10005630:	0080690e 	bge	zero,r2,100057d8 <__subdf3+0x3e0>
10005634:	50002f26 	beq	r10,zero,100056f4 <__subdf3+0x2fc>
10005638:	0101ffc4 	movi	r4,2047
1000563c:	813f9126 	beq	r16,r4,10005484 <__alt_data_end+0xf8005484>
10005640:	18c02034 	orhi	r3,r3,128
10005644:	01000e04 	movi	r4,56
10005648:	2080b00e 	bge	r4,r2,1000590c <__subdf3+0x514>
1000564c:	198cb03a 	or	r6,r3,r6
10005650:	300ec03a 	cmpne	r7,r6,zero
10005654:	0005883a 	mov	r2,zero
10005658:	3c4f883a 	add	r7,r7,r17
1000565c:	3c63803a 	cmpltu	r17,r7,r17
10005660:	114b883a 	add	r5,r2,r5
10005664:	2c4b883a 	add	r5,r5,r17
10005668:	3823883a 	mov	r17,r7
1000566c:	2880202c 	andhi	r2,r5,128
10005670:	10002e26 	beq	r2,zero,1000572c <__subdf3+0x334>
10005674:	84000044 	addi	r16,r16,1
10005678:	0081ffc4 	movi	r2,2047
1000567c:	8080de26 	beq	r16,r2,100059f8 <__subdf3+0x600>
10005680:	00bfe034 	movhi	r2,65408
10005684:	10bfffc4 	addi	r2,r2,-1
10005688:	288a703a 	and	r5,r5,r2
1000568c:	880cd07a 	srli	r6,r17,1
10005690:	280897fa 	slli	r4,r5,31
10005694:	88c0004c 	andi	r3,r17,1
10005698:	30e2b03a 	or	r17,r6,r3
1000569c:	280ad07a 	srli	r5,r5,1
100056a0:	8922b03a 	or	r17,r17,r4
100056a4:	003f7706 	br	10005484 <__alt_data_end+0xf8005484>
100056a8:	1984b03a 	or	r2,r3,r6
100056ac:	103f6e26 	beq	r2,zero,10005468 <__alt_data_end+0xf8005468>
100056b0:	39c03fcc 	andi	r7,r7,255
100056b4:	003f6d06 	br	1000546c <__alt_data_end+0xf800546c>
100056b8:	1146b03a 	or	r3,r2,r5
100056bc:	18003f26 	beq	r3,zero,100057bc <__subdf3+0x3c4>
100056c0:	00c00434 	movhi	r3,16
100056c4:	29000234 	orhi	r4,r5,8
100056c8:	18ffffc4 	addi	r3,r3,-1
100056cc:	20c8703a 	and	r4,r4,r3
100056d0:	003f8406 	br	100054e4 <__alt_data_end+0xf80054e4>
100056d4:	10bfffc4 	addi	r2,r2,-1
100056d8:	1000501e 	bne	r2,zero,1000581c <__subdf3+0x424>
100056dc:	898fc83a 	sub	r7,r17,r6
100056e0:	89e3803a 	cmpltu	r17,r17,r7
100056e4:	28cbc83a 	sub	r5,r5,r3
100056e8:	2c4bc83a 	sub	r5,r5,r17
100056ec:	3823883a 	mov	r17,r7
100056f0:	003fa106 	br	10005578 <__alt_data_end+0xf8005578>
100056f4:	1988b03a 	or	r4,r3,r6
100056f8:	203f6226 	beq	r4,zero,10005484 <__alt_data_end+0xf8005484>
100056fc:	10bfffc4 	addi	r2,r2,-1
10005700:	10009b1e 	bne	r2,zero,10005970 <__subdf3+0x578>
10005704:	344d883a 	add	r6,r6,r17
10005708:	3463803a 	cmpltu	r17,r6,r17
1000570c:	194b883a 	add	r5,r3,r5
10005710:	2c4b883a 	add	r5,r5,r17
10005714:	3023883a 	mov	r17,r6
10005718:	003fd406 	br	1000566c <__alt_data_end+0xf800566c>
1000571c:	1106b03a 	or	r3,r2,r4
10005720:	1800b426 	beq	r3,zero,100059f4 <__subdf3+0x5fc>
10005724:	100b883a 	mov	r5,r2
10005728:	2023883a 	mov	r17,r4
1000572c:	888001cc 	andi	r2,r17,7
10005730:	103f561e 	bne	r2,zero,1000548c <__alt_data_end+0xf800548c>
10005734:	9200004c 	andi	r8,r18,1
10005738:	003fb206 	br	10005604 <__alt_data_end+0xf8005604>
1000573c:	1000531e 	bne	r2,zero,1000588c <__subdf3+0x494>
10005740:	80800044 	addi	r2,r16,1
10005744:	1081ffcc 	andi	r2,r2,2047
10005748:	01000044 	movi	r4,1
1000574c:	2080a00e 	bge	r4,r2,100059d0 <__subdf3+0x5d8>
10005750:	8985c83a 	sub	r2,r17,r6
10005754:	8889803a 	cmpltu	r4,r17,r2
10005758:	28e7c83a 	sub	r19,r5,r3
1000575c:	9927c83a 	sub	r19,r19,r4
10005760:	9900202c 	andhi	r4,r19,128
10005764:	20006226 	beq	r4,zero,100058f0 <__subdf3+0x4f8>
10005768:	3463c83a 	sub	r17,r6,r17
1000576c:	194bc83a 	sub	r5,r3,r5
10005770:	344d803a 	cmpltu	r6,r6,r17
10005774:	29a7c83a 	sub	r19,r5,r6
10005778:	3825883a 	mov	r18,r7
1000577c:	983f841e 	bne	r19,zero,10005590 <__alt_data_end+0xf8005590>
10005780:	8809883a 	mov	r4,r17
10005784:	0005e200 	call	10005e20 <__clzsi2>
10005788:	10800804 	addi	r2,r2,32
1000578c:	10fffe04 	addi	r3,r2,-8
10005790:	010007c4 	movi	r4,31
10005794:	20ff830e 	bge	r4,r3,100055a4 <__alt_data_end+0xf80055a4>
10005798:	14fff604 	addi	r19,r2,-40
1000579c:	8ce6983a 	sll	r19,r17,r19
100057a0:	0023883a 	mov	r17,zero
100057a4:	1c3f860e 	bge	r3,r16,100055c0 <__alt_data_end+0xf80055c0>
100057a8:	017fe034 	movhi	r5,65408
100057ac:	297fffc4 	addi	r5,r5,-1
100057b0:	80e1c83a 	sub	r16,r16,r3
100057b4:	994a703a 	and	r5,r19,r5
100057b8:	003f3206 	br	10005484 <__alt_data_end+0xf8005484>
100057bc:	0009883a 	mov	r4,zero
100057c0:	0005883a 	mov	r2,zero
100057c4:	003f4706 	br	100054e4 <__alt_data_end+0xf80054e4>
100057c8:	198cb03a 	or	r6,r3,r6
100057cc:	300cc03a 	cmpne	r6,r6,zero
100057d0:	0005883a 	mov	r2,zero
100057d4:	003f6306 	br	10005564 <__alt_data_end+0xf8005564>
100057d8:	10009d1e 	bne	r2,zero,10005a50 <__subdf3+0x658>
100057dc:	81c00044 	addi	r7,r16,1
100057e0:	3881ffcc 	andi	r2,r7,2047
100057e4:	02400044 	movi	r9,1
100057e8:	4880680e 	bge	r9,r2,1000598c <__subdf3+0x594>
100057ec:	0081ffc4 	movi	r2,2047
100057f0:	3880ae26 	beq	r7,r2,10005aac <__subdf3+0x6b4>
100057f4:	344d883a 	add	r6,r6,r17
100057f8:	3463803a 	cmpltu	r17,r6,r17
100057fc:	194b883a 	add	r5,r3,r5
10005800:	2c4b883a 	add	r5,r5,r17
10005804:	282297fa 	slli	r17,r5,31
10005808:	300cd07a 	srli	r6,r6,1
1000580c:	280ad07a 	srli	r5,r5,1
10005810:	3821883a 	mov	r16,r7
10005814:	89a2b03a 	or	r17,r17,r6
10005818:	003f1a06 	br	10005484 <__alt_data_end+0xf8005484>
1000581c:	0101ffc4 	movi	r4,2047
10005820:	813f431e 	bne	r16,r4,10005530 <__alt_data_end+0xf8005530>
10005824:	003f1706 	br	10005484 <__alt_data_end+0xf8005484>
10005828:	80bff844 	addi	r2,r16,-31
1000582c:	00c00804 	movi	r3,32
10005830:	9884d83a 	srl	r2,r19,r2
10005834:	28c05126 	beq	r5,r3,1000597c <__subdf3+0x584>
10005838:	00c00fc4 	movi	r3,63
1000583c:	1c21c83a 	sub	r16,r3,r16
10005840:	9c26983a 	sll	r19,r19,r16
10005844:	9c62b03a 	or	r17,r19,r17
10005848:	8822c03a 	cmpne	r17,r17,zero
1000584c:	88a2b03a 	or	r17,r17,r2
10005850:	000b883a 	mov	r5,zero
10005854:	0021883a 	mov	r16,zero
10005858:	003fb406 	br	1000572c <__alt_data_end+0xf800572c>
1000585c:	113ff804 	addi	r4,r2,-32
10005860:	01c00804 	movi	r7,32
10005864:	1908d83a 	srl	r4,r3,r4
10005868:	11c04626 	beq	r2,r7,10005984 <__subdf3+0x58c>
1000586c:	01c01004 	movi	r7,64
10005870:	3885c83a 	sub	r2,r7,r2
10005874:	1884983a 	sll	r2,r3,r2
10005878:	118cb03a 	or	r6,r2,r6
1000587c:	300cc03a 	cmpne	r6,r6,zero
10005880:	310cb03a 	or	r6,r6,r4
10005884:	0005883a 	mov	r2,zero
10005888:	003f3606 	br	10005564 <__alt_data_end+0xf8005564>
1000588c:	80002b26 	beq	r16,zero,1000593c <__subdf3+0x544>
10005890:	0101ffc4 	movi	r4,2047
10005894:	51006926 	beq	r10,r4,10005a3c <__subdf3+0x644>
10005898:	0085c83a 	sub	r2,zero,r2
1000589c:	29402034 	orhi	r5,r5,128
100058a0:	01000e04 	movi	r4,56
100058a4:	20807d16 	blt	r4,r2,10005a9c <__subdf3+0x6a4>
100058a8:	010007c4 	movi	r4,31
100058ac:	2080d916 	blt	r4,r2,10005c14 <__subdf3+0x81c>
100058b0:	01000804 	movi	r4,32
100058b4:	2089c83a 	sub	r4,r4,r2
100058b8:	2912983a 	sll	r9,r5,r4
100058bc:	8890d83a 	srl	r8,r17,r2
100058c0:	8908983a 	sll	r4,r17,r4
100058c4:	2884d83a 	srl	r2,r5,r2
100058c8:	4a22b03a 	or	r17,r9,r8
100058cc:	2008c03a 	cmpne	r4,r4,zero
100058d0:	8922b03a 	or	r17,r17,r4
100058d4:	3463c83a 	sub	r17,r6,r17
100058d8:	1885c83a 	sub	r2,r3,r2
100058dc:	344d803a 	cmpltu	r6,r6,r17
100058e0:	118bc83a 	sub	r5,r2,r6
100058e4:	5021883a 	mov	r16,r10
100058e8:	3825883a 	mov	r18,r7
100058ec:	003f2206 	br	10005578 <__alt_data_end+0xf8005578>
100058f0:	9886b03a 	or	r3,r19,r2
100058f4:	18001c1e 	bne	r3,zero,10005968 <__subdf3+0x570>
100058f8:	0011883a 	mov	r8,zero
100058fc:	000b883a 	mov	r5,zero
10005900:	0023883a 	mov	r17,zero
10005904:	0021883a 	mov	r16,zero
10005908:	003f3e06 	br	10005604 <__alt_data_end+0xf8005604>
1000590c:	010007c4 	movi	r4,31
10005910:	20803c16 	blt	r4,r2,10005a04 <__subdf3+0x60c>
10005914:	01000804 	movi	r4,32
10005918:	2089c83a 	sub	r4,r4,r2
1000591c:	1912983a 	sll	r9,r3,r4
10005920:	308ed83a 	srl	r7,r6,r2
10005924:	3108983a 	sll	r4,r6,r4
10005928:	1884d83a 	srl	r2,r3,r2
1000592c:	49ceb03a 	or	r7,r9,r7
10005930:	2008c03a 	cmpne	r4,r4,zero
10005934:	390eb03a 	or	r7,r7,r4
10005938:	003f4706 	br	10005658 <__alt_data_end+0xf8005658>
1000593c:	2c48b03a 	or	r4,r5,r17
10005940:	20003e26 	beq	r4,zero,10005a3c <__subdf3+0x644>
10005944:	0084303a 	nor	r2,zero,r2
10005948:	10003a1e 	bne	r2,zero,10005a34 <__subdf3+0x63c>
1000594c:	3463c83a 	sub	r17,r6,r17
10005950:	194bc83a 	sub	r5,r3,r5
10005954:	344d803a 	cmpltu	r6,r6,r17
10005958:	298bc83a 	sub	r5,r5,r6
1000595c:	5021883a 	mov	r16,r10
10005960:	3825883a 	mov	r18,r7
10005964:	003f0406 	br	10005578 <__alt_data_end+0xf8005578>
10005968:	1023883a 	mov	r17,r2
1000596c:	003f0706 	br	1000558c <__alt_data_end+0xf800558c>
10005970:	0101ffc4 	movi	r4,2047
10005974:	813f331e 	bne	r16,r4,10005644 <__alt_data_end+0xf8005644>
10005978:	003ec206 	br	10005484 <__alt_data_end+0xf8005484>
1000597c:	0027883a 	mov	r19,zero
10005980:	003fb006 	br	10005844 <__alt_data_end+0xf8005844>
10005984:	0005883a 	mov	r2,zero
10005988:	003fbb06 	br	10005878 <__alt_data_end+0xf8005878>
1000598c:	2c44b03a 	or	r2,r5,r17
10005990:	80008b1e 	bne	r16,zero,10005bc0 <__subdf3+0x7c8>
10005994:	1000b526 	beq	r2,zero,10005c6c <__subdf3+0x874>
10005998:	1984b03a 	or	r2,r3,r6
1000599c:	103eb926 	beq	r2,zero,10005484 <__alt_data_end+0xf8005484>
100059a0:	3449883a 	add	r4,r6,r17
100059a4:	2463803a 	cmpltu	r17,r4,r17
100059a8:	194b883a 	add	r5,r3,r5
100059ac:	2c4b883a 	add	r5,r5,r17
100059b0:	2880202c 	andhi	r2,r5,128
100059b4:	2023883a 	mov	r17,r4
100059b8:	103f5c26 	beq	r2,zero,1000572c <__alt_data_end+0xf800572c>
100059bc:	00bfe034 	movhi	r2,65408
100059c0:	10bfffc4 	addi	r2,r2,-1
100059c4:	4821883a 	mov	r16,r9
100059c8:	288a703a 	and	r5,r5,r2
100059cc:	003ead06 	br	10005484 <__alt_data_end+0xf8005484>
100059d0:	2c44b03a 	or	r2,r5,r17
100059d4:	8000291e 	bne	r16,zero,10005a7c <__subdf3+0x684>
100059d8:	10004f1e 	bne	r2,zero,10005b18 <__subdf3+0x720>
100059dc:	1984b03a 	or	r2,r3,r6
100059e0:	10000426 	beq	r2,zero,100059f4 <__subdf3+0x5fc>
100059e4:	180b883a 	mov	r5,r3
100059e8:	3023883a 	mov	r17,r6
100059ec:	3825883a 	mov	r18,r7
100059f0:	003ea406 	br	10005484 <__alt_data_end+0xf8005484>
100059f4:	0011883a 	mov	r8,zero
100059f8:	000b883a 	mov	r5,zero
100059fc:	0023883a 	mov	r17,zero
10005a00:	003f0006 	br	10005604 <__alt_data_end+0xf8005604>
10005a04:	11fff804 	addi	r7,r2,-32
10005a08:	19c8d83a 	srl	r4,r3,r7
10005a0c:	01c00804 	movi	r7,32
10005a10:	11c07e26 	beq	r2,r7,10005c0c <__subdf3+0x814>
10005a14:	01c01004 	movi	r7,64
10005a18:	3885c83a 	sub	r2,r7,r2
10005a1c:	1884983a 	sll	r2,r3,r2
10005a20:	118cb03a 	or	r6,r2,r6
10005a24:	300ec03a 	cmpne	r7,r6,zero
10005a28:	390eb03a 	or	r7,r7,r4
10005a2c:	0005883a 	mov	r2,zero
10005a30:	003f0906 	br	10005658 <__alt_data_end+0xf8005658>
10005a34:	0101ffc4 	movi	r4,2047
10005a38:	513f991e 	bne	r10,r4,100058a0 <__alt_data_end+0xf80058a0>
10005a3c:	180b883a 	mov	r5,r3
10005a40:	3023883a 	mov	r17,r6
10005a44:	5021883a 	mov	r16,r10
10005a48:	3825883a 	mov	r18,r7
10005a4c:	003e8d06 	br	10005484 <__alt_data_end+0xf8005484>
10005a50:	80001a1e 	bne	r16,zero,10005abc <__subdf3+0x6c4>
10005a54:	2c48b03a 	or	r4,r5,r17
10005a58:	20005526 	beq	r4,zero,10005bb0 <__subdf3+0x7b8>
10005a5c:	0084303a 	nor	r2,zero,r2
10005a60:	1000511e 	bne	r2,zero,10005ba8 <__subdf3+0x7b0>
10005a64:	89a3883a 	add	r17,r17,r6
10005a68:	194b883a 	add	r5,r3,r5
10005a6c:	898d803a 	cmpltu	r6,r17,r6
10005a70:	298b883a 	add	r5,r5,r6
10005a74:	5021883a 	mov	r16,r10
10005a78:	003efc06 	br	1000566c <__alt_data_end+0xf800566c>
10005a7c:	1000341e 	bne	r2,zero,10005b50 <__subdf3+0x758>
10005a80:	1984b03a 	or	r2,r3,r6
10005a84:	10006f26 	beq	r2,zero,10005c44 <__subdf3+0x84c>
10005a88:	180b883a 	mov	r5,r3
10005a8c:	3023883a 	mov	r17,r6
10005a90:	3825883a 	mov	r18,r7
10005a94:	0401ffc4 	movi	r16,2047
10005a98:	003e7a06 	br	10005484 <__alt_data_end+0xf8005484>
10005a9c:	2c62b03a 	or	r17,r5,r17
10005aa0:	8822c03a 	cmpne	r17,r17,zero
10005aa4:	0005883a 	mov	r2,zero
10005aa8:	003f8a06 	br	100058d4 <__alt_data_end+0xf80058d4>
10005aac:	3821883a 	mov	r16,r7
10005ab0:	000b883a 	mov	r5,zero
10005ab4:	0023883a 	mov	r17,zero
10005ab8:	003ed206 	br	10005604 <__alt_data_end+0xf8005604>
10005abc:	0101ffc4 	movi	r4,2047
10005ac0:	51003b26 	beq	r10,r4,10005bb0 <__subdf3+0x7b8>
10005ac4:	0085c83a 	sub	r2,zero,r2
10005ac8:	29402034 	orhi	r5,r5,128
10005acc:	01000e04 	movi	r4,56
10005ad0:	20806216 	blt	r4,r2,10005c5c <__subdf3+0x864>
10005ad4:	010007c4 	movi	r4,31
10005ad8:	20806b16 	blt	r4,r2,10005c88 <__subdf3+0x890>
10005adc:	01000804 	movi	r4,32
10005ae0:	2089c83a 	sub	r4,r4,r2
10005ae4:	2912983a 	sll	r9,r5,r4
10005ae8:	888ed83a 	srl	r7,r17,r2
10005aec:	8908983a 	sll	r4,r17,r4
10005af0:	2884d83a 	srl	r2,r5,r2
10005af4:	49e2b03a 	or	r17,r9,r7
10005af8:	2008c03a 	cmpne	r4,r4,zero
10005afc:	8922b03a 	or	r17,r17,r4
10005b00:	89a3883a 	add	r17,r17,r6
10005b04:	10c5883a 	add	r2,r2,r3
10005b08:	898d803a 	cmpltu	r6,r17,r6
10005b0c:	118b883a 	add	r5,r2,r6
10005b10:	5021883a 	mov	r16,r10
10005b14:	003ed506 	br	1000566c <__alt_data_end+0xf800566c>
10005b18:	1984b03a 	or	r2,r3,r6
10005b1c:	103e5926 	beq	r2,zero,10005484 <__alt_data_end+0xf8005484>
10005b20:	8989c83a 	sub	r4,r17,r6
10005b24:	8911803a 	cmpltu	r8,r17,r4
10005b28:	28c5c83a 	sub	r2,r5,r3
10005b2c:	1205c83a 	sub	r2,r2,r8
10005b30:	1200202c 	andhi	r8,r2,128
10005b34:	403ef926 	beq	r8,zero,1000571c <__alt_data_end+0xf800571c>
10005b38:	3463c83a 	sub	r17,r6,r17
10005b3c:	194bc83a 	sub	r5,r3,r5
10005b40:	344d803a 	cmpltu	r6,r6,r17
10005b44:	298bc83a 	sub	r5,r5,r6
10005b48:	3825883a 	mov	r18,r7
10005b4c:	003e4d06 	br	10005484 <__alt_data_end+0xf8005484>
10005b50:	1984b03a 	or	r2,r3,r6
10005b54:	10002b26 	beq	r2,zero,10005c04 <__subdf3+0x80c>
10005b58:	2808d0fa 	srli	r4,r5,3
10005b5c:	8822d0fa 	srli	r17,r17,3
10005b60:	280a977a 	slli	r5,r5,29
10005b64:	2080022c 	andhi	r2,r4,8
10005b68:	2c62b03a 	or	r17,r5,r17
10005b6c:	10000826 	beq	r2,zero,10005b90 <__subdf3+0x798>
10005b70:	1810d0fa 	srli	r8,r3,3
10005b74:	4080022c 	andhi	r2,r8,8
10005b78:	1000051e 	bne	r2,zero,10005b90 <__subdf3+0x798>
10005b7c:	300cd0fa 	srli	r6,r6,3
10005b80:	1804977a 	slli	r2,r3,29
10005b84:	4009883a 	mov	r4,r8
10005b88:	3825883a 	mov	r18,r7
10005b8c:	11a2b03a 	or	r17,r2,r6
10005b90:	880ad77a 	srli	r5,r17,29
10005b94:	200890fa 	slli	r4,r4,3
10005b98:	882290fa 	slli	r17,r17,3
10005b9c:	0401ffc4 	movi	r16,2047
10005ba0:	290ab03a 	or	r5,r5,r4
10005ba4:	003e3706 	br	10005484 <__alt_data_end+0xf8005484>
10005ba8:	0101ffc4 	movi	r4,2047
10005bac:	513fc71e 	bne	r10,r4,10005acc <__alt_data_end+0xf8005acc>
10005bb0:	180b883a 	mov	r5,r3
10005bb4:	3023883a 	mov	r17,r6
10005bb8:	5021883a 	mov	r16,r10
10005bbc:	003e3106 	br	10005484 <__alt_data_end+0xf8005484>
10005bc0:	10002d26 	beq	r2,zero,10005c78 <__subdf3+0x880>
10005bc4:	1984b03a 	or	r2,r3,r6
10005bc8:	10000e26 	beq	r2,zero,10005c04 <__subdf3+0x80c>
10005bcc:	2808d0fa 	srli	r4,r5,3
10005bd0:	8822d0fa 	srli	r17,r17,3
10005bd4:	280a977a 	slli	r5,r5,29
10005bd8:	2080022c 	andhi	r2,r4,8
10005bdc:	2c62b03a 	or	r17,r5,r17
10005be0:	103feb26 	beq	r2,zero,10005b90 <__alt_data_end+0xf8005b90>
10005be4:	180ed0fa 	srli	r7,r3,3
10005be8:	3880022c 	andhi	r2,r7,8
10005bec:	103fe81e 	bne	r2,zero,10005b90 <__alt_data_end+0xf8005b90>
10005bf0:	300cd0fa 	srli	r6,r6,3
10005bf4:	1804977a 	slli	r2,r3,29
10005bf8:	3809883a 	mov	r4,r7
10005bfc:	11a2b03a 	or	r17,r2,r6
10005c00:	003fe306 	br	10005b90 <__alt_data_end+0xf8005b90>
10005c04:	0401ffc4 	movi	r16,2047
10005c08:	003e1e06 	br	10005484 <__alt_data_end+0xf8005484>
10005c0c:	0005883a 	mov	r2,zero
10005c10:	003f8306 	br	10005a20 <__alt_data_end+0xf8005a20>
10005c14:	113ff804 	addi	r4,r2,-32
10005c18:	02000804 	movi	r8,32
10005c1c:	2908d83a 	srl	r4,r5,r4
10005c20:	12002526 	beq	r2,r8,10005cb8 <__subdf3+0x8c0>
10005c24:	02001004 	movi	r8,64
10005c28:	4085c83a 	sub	r2,r8,r2
10005c2c:	288a983a 	sll	r5,r5,r2
10005c30:	2c62b03a 	or	r17,r5,r17
10005c34:	8822c03a 	cmpne	r17,r17,zero
10005c38:	8922b03a 	or	r17,r17,r4
10005c3c:	0005883a 	mov	r2,zero
10005c40:	003f2406 	br	100058d4 <__alt_data_end+0xf80058d4>
10005c44:	01402034 	movhi	r5,128
10005c48:	0011883a 	mov	r8,zero
10005c4c:	297fffc4 	addi	r5,r5,-1
10005c50:	047ffe04 	movi	r17,-8
10005c54:	0401ffc4 	movi	r16,2047
10005c58:	003e6a06 	br	10005604 <__alt_data_end+0xf8005604>
10005c5c:	2c62b03a 	or	r17,r5,r17
10005c60:	8822c03a 	cmpne	r17,r17,zero
10005c64:	0005883a 	mov	r2,zero
10005c68:	003fa506 	br	10005b00 <__alt_data_end+0xf8005b00>
10005c6c:	180b883a 	mov	r5,r3
10005c70:	3023883a 	mov	r17,r6
10005c74:	003e0306 	br	10005484 <__alt_data_end+0xf8005484>
10005c78:	180b883a 	mov	r5,r3
10005c7c:	3023883a 	mov	r17,r6
10005c80:	0401ffc4 	movi	r16,2047
10005c84:	003dff06 	br	10005484 <__alt_data_end+0xf8005484>
10005c88:	113ff804 	addi	r4,r2,-32
10005c8c:	01c00804 	movi	r7,32
10005c90:	2908d83a 	srl	r4,r5,r4
10005c94:	11c00a26 	beq	r2,r7,10005cc0 <__subdf3+0x8c8>
10005c98:	01c01004 	movi	r7,64
10005c9c:	3885c83a 	sub	r2,r7,r2
10005ca0:	288a983a 	sll	r5,r5,r2
10005ca4:	2c62b03a 	or	r17,r5,r17
10005ca8:	8822c03a 	cmpne	r17,r17,zero
10005cac:	8922b03a 	or	r17,r17,r4
10005cb0:	0005883a 	mov	r2,zero
10005cb4:	003f9206 	br	10005b00 <__alt_data_end+0xf8005b00>
10005cb8:	000b883a 	mov	r5,zero
10005cbc:	003fdc06 	br	10005c30 <__alt_data_end+0xf8005c30>
10005cc0:	000b883a 	mov	r5,zero
10005cc4:	003ff706 	br	10005ca4 <__alt_data_end+0xf8005ca4>

10005cc8 <__fixdfsi>:
10005cc8:	2806d53a 	srli	r3,r5,20
10005ccc:	00800434 	movhi	r2,16
10005cd0:	10bfffc4 	addi	r2,r2,-1
10005cd4:	18c1ffcc 	andi	r3,r3,2047
10005cd8:	0180ff84 	movi	r6,1022
10005cdc:	2884703a 	and	r2,r5,r2
10005ce0:	280ad7fa 	srli	r5,r5,31
10005ce4:	30c0130e 	bge	r6,r3,10005d34 <__fixdfsi+0x6c>
10005ce8:	01810744 	movi	r6,1053
10005cec:	30c00d16 	blt	r6,r3,10005d24 <__fixdfsi+0x5c>
10005cf0:	01810cc4 	movi	r6,1075
10005cf4:	30cdc83a 	sub	r6,r6,r3
10005cf8:	01c007c4 	movi	r7,31
10005cfc:	10800434 	orhi	r2,r2,16
10005d00:	39800e0e 	bge	r7,r6,10005d3c <__fixdfsi+0x74>
10005d04:	010104c4 	movi	r4,1043
10005d08:	20c7c83a 	sub	r3,r4,r3
10005d0c:	10c6d83a 	srl	r3,r2,r3
10005d10:	29403fcc 	andi	r5,r5,255
10005d14:	0145c83a 	sub	r2,zero,r5
10005d18:	1884f03a 	xor	r2,r3,r2
10005d1c:	1145883a 	add	r2,r2,r5
10005d20:	f800283a 	ret
10005d24:	00a00034 	movhi	r2,32768
10005d28:	10bfffc4 	addi	r2,r2,-1
10005d2c:	2885883a 	add	r2,r5,r2
10005d30:	f800283a 	ret
10005d34:	0005883a 	mov	r2,zero
10005d38:	f800283a 	ret
10005d3c:	18fefb44 	addi	r3,r3,-1043
10005d40:	2188d83a 	srl	r4,r4,r6
10005d44:	10c6983a 	sll	r3,r2,r3
10005d48:	20c6b03a 	or	r3,r4,r3
10005d4c:	003ff006 	br	10005d10 <__alt_data_end+0xf8005d10>

10005d50 <__floatsidf>:
10005d50:	defffd04 	addi	sp,sp,-12
10005d54:	dc400115 	stw	r17,4(sp)
10005d58:	dfc00215 	stw	ra,8(sp)
10005d5c:	dc000015 	stw	r16,0(sp)
10005d60:	2023883a 	mov	r17,r4
10005d64:	20001426 	beq	r4,zero,10005db8 <__floatsidf+0x68>
10005d68:	2020d7fa 	srli	r16,r4,31
10005d6c:	80000126 	beq	r16,zero,10005d74 <__floatsidf+0x24>
10005d70:	0123c83a 	sub	r17,zero,r4
10005d74:	8809883a 	mov	r4,r17
10005d78:	0005e200 	call	10005e20 <__clzsi2>
10005d7c:	01410784 	movi	r5,1054
10005d80:	00c00284 	movi	r3,10
10005d84:	288bc83a 	sub	r5,r5,r2
10005d88:	18801c16 	blt	r3,r2,10005dfc <__floatsidf+0xac>
10005d8c:	00c002c4 	movi	r3,11
10005d90:	1887c83a 	sub	r3,r3,r2
10005d94:	88c8d83a 	srl	r4,r17,r3
10005d98:	00c00434 	movhi	r3,16
10005d9c:	18ffffc4 	addi	r3,r3,-1
10005da0:	10800544 	addi	r2,r2,21
10005da4:	20c8703a 	and	r4,r4,r3
10005da8:	8884983a 	sll	r2,r17,r2
10005dac:	28c1ffcc 	andi	r3,r5,2047
10005db0:	800d883a 	mov	r6,r16
10005db4:	00000406 	br	10005dc8 <__floatsidf+0x78>
10005db8:	000d883a 	mov	r6,zero
10005dbc:	0007883a 	mov	r3,zero
10005dc0:	0009883a 	mov	r4,zero
10005dc4:	0005883a 	mov	r2,zero
10005dc8:	180a953a 	slli	r5,r3,20
10005dcc:	31803fcc 	andi	r6,r6,255
10005dd0:	00c00434 	movhi	r3,16
10005dd4:	300c97fa 	slli	r6,r6,31
10005dd8:	18ffffc4 	addi	r3,r3,-1
10005ddc:	20c6703a 	and	r3,r4,r3
10005de0:	1946b03a 	or	r3,r3,r5
10005de4:	1986b03a 	or	r3,r3,r6
10005de8:	dfc00217 	ldw	ra,8(sp)
10005dec:	dc400117 	ldw	r17,4(sp)
10005df0:	dc000017 	ldw	r16,0(sp)
10005df4:	dec00304 	addi	sp,sp,12
10005df8:	f800283a 	ret
10005dfc:	10fffd44 	addi	r3,r2,-11
10005e00:	88c8983a 	sll	r4,r17,r3
10005e04:	00800434 	movhi	r2,16
10005e08:	10bfffc4 	addi	r2,r2,-1
10005e0c:	2088703a 	and	r4,r4,r2
10005e10:	28c1ffcc 	andi	r3,r5,2047
10005e14:	800d883a 	mov	r6,r16
10005e18:	0005883a 	mov	r2,zero
10005e1c:	003fea06 	br	10005dc8 <__alt_data_end+0xf8005dc8>

10005e20 <__clzsi2>:
10005e20:	00bfffd4 	movui	r2,65535
10005e24:	11000b36 	bltu	r2,r4,10005e54 <__clzsi2+0x34>
10005e28:	00803fc4 	movi	r2,255
10005e2c:	1100122e 	bgeu	r2,r4,10005e78 <__clzsi2+0x58>
10005e30:	00c00204 	movi	r3,8
10005e34:	01400604 	movi	r5,24
10005e38:	20c8d83a 	srl	r4,r4,r3
10005e3c:	00840074 	movhi	r2,4097
10005e40:	1086d704 	addi	r2,r2,7004
10005e44:	1109883a 	add	r4,r2,r4
10005e48:	20800003 	ldbu	r2,0(r4)
10005e4c:	2885c83a 	sub	r2,r5,r2
10005e50:	f800283a 	ret
10005e54:	00804034 	movhi	r2,256
10005e58:	10bfffc4 	addi	r2,r2,-1
10005e5c:	11000336 	bltu	r2,r4,10005e6c <__clzsi2+0x4c>
10005e60:	00c00404 	movi	r3,16
10005e64:	180b883a 	mov	r5,r3
10005e68:	003ff306 	br	10005e38 <__alt_data_end+0xf8005e38>
10005e6c:	00c00604 	movi	r3,24
10005e70:	01400204 	movi	r5,8
10005e74:	003ff006 	br	10005e38 <__alt_data_end+0xf8005e38>
10005e78:	0007883a 	mov	r3,zero
10005e7c:	01400804 	movi	r5,32
10005e80:	003fed06 	br	10005e38 <__alt_data_end+0xf8005e38>

10005e84 <__errno>:
10005e84:	00840074 	movhi	r2,4097
10005e88:	108e4404 	addi	r2,r2,14608
10005e8c:	10800017 	ldw	r2,0(r2)
10005e90:	f800283a 	ret

10005e94 <_printf_r>:
10005e94:	defffd04 	addi	sp,sp,-12
10005e98:	dfc00015 	stw	ra,0(sp)
10005e9c:	d9800115 	stw	r6,4(sp)
10005ea0:	d9c00215 	stw	r7,8(sp)
10005ea4:	280d883a 	mov	r6,r5
10005ea8:	21400217 	ldw	r5,8(r4)
10005eac:	d9c00104 	addi	r7,sp,4
10005eb0:	00060600 	call	10006060 <___vfprintf_internal_r>
10005eb4:	dfc00017 	ldw	ra,0(sp)
10005eb8:	dec00304 	addi	sp,sp,12
10005ebc:	f800283a 	ret

10005ec0 <printf>:
10005ec0:	defffc04 	addi	sp,sp,-16
10005ec4:	dfc00015 	stw	ra,0(sp)
10005ec8:	d9400115 	stw	r5,4(sp)
10005ecc:	d9800215 	stw	r6,8(sp)
10005ed0:	d9c00315 	stw	r7,12(sp)
10005ed4:	00840074 	movhi	r2,4097
10005ed8:	108e4404 	addi	r2,r2,14608
10005edc:	10800017 	ldw	r2,0(r2)
10005ee0:	200b883a 	mov	r5,r4
10005ee4:	d9800104 	addi	r6,sp,4
10005ee8:	11000217 	ldw	r4,8(r2)
10005eec:	000815c0 	call	1000815c <__vfprintf_internal>
10005ef0:	dfc00017 	ldw	ra,0(sp)
10005ef4:	dec00404 	addi	sp,sp,16
10005ef8:	f800283a 	ret

10005efc <_puts_r>:
10005efc:	defff604 	addi	sp,sp,-40
10005f00:	dc000715 	stw	r16,28(sp)
10005f04:	2021883a 	mov	r16,r4
10005f08:	2809883a 	mov	r4,r5
10005f0c:	dc400815 	stw	r17,32(sp)
10005f10:	dfc00915 	stw	ra,36(sp)
10005f14:	2823883a 	mov	r17,r5
10005f18:	0005fc80 	call	10005fc8 <strlen>
10005f1c:	00c40074 	movhi	r3,4097
10005f20:	18ce4404 	addi	r3,r3,14608
10005f24:	18c00017 	ldw	r3,0(r3)
10005f28:	11000044 	addi	r4,r2,1
10005f2c:	d8800115 	stw	r2,4(sp)
10005f30:	18c00217 	ldw	r3,8(r3)
10005f34:	01440074 	movhi	r5,4097
10005f38:	29471804 	addi	r5,r5,7264
10005f3c:	1880030b 	ldhu	r2,12(r3)
10005f40:	d9400215 	stw	r5,8(sp)
10005f44:	d9000615 	stw	r4,24(sp)
10005f48:	01400044 	movi	r5,1
10005f4c:	01000084 	movi	r4,2
10005f50:	d9000515 	stw	r4,20(sp)
10005f54:	dc400015 	stw	r17,0(sp)
10005f58:	d9400315 	stw	r5,12(sp)
10005f5c:	dec00415 	stw	sp,16(sp)
10005f60:	1108000c 	andi	r4,r2,8192
10005f64:	2000061e 	bne	r4,zero,10005f80 <_puts_r+0x84>
10005f68:	19401917 	ldw	r5,100(r3)
10005f6c:	0137ffc4 	movi	r4,-8193
10005f70:	10880014 	ori	r2,r2,8192
10005f74:	2908703a 	and	r4,r5,r4
10005f78:	1880030d 	sth	r2,12(r3)
10005f7c:	19001915 	stw	r4,100(r3)
10005f80:	81400217 	ldw	r5,8(r16)
10005f84:	8009883a 	mov	r4,r16
10005f88:	d9800404 	addi	r6,sp,16
10005f8c:	000a6200 	call	1000a620 <__sfvwrite_r>
10005f90:	1000061e 	bne	r2,zero,10005fac <_puts_r+0xb0>
10005f94:	00800284 	movi	r2,10
10005f98:	dfc00917 	ldw	ra,36(sp)
10005f9c:	dc400817 	ldw	r17,32(sp)
10005fa0:	dc000717 	ldw	r16,28(sp)
10005fa4:	dec00a04 	addi	sp,sp,40
10005fa8:	f800283a 	ret
10005fac:	00bfffc4 	movi	r2,-1
10005fb0:	003ff906 	br	10005f98 <__alt_data_end+0xf8005f98>

10005fb4 <puts>:
10005fb4:	00840074 	movhi	r2,4097
10005fb8:	108e4404 	addi	r2,r2,14608
10005fbc:	200b883a 	mov	r5,r4
10005fc0:	11000017 	ldw	r4,0(r2)
10005fc4:	0005efc1 	jmpi	10005efc <_puts_r>

10005fc8 <strlen>:
10005fc8:	208000cc 	andi	r2,r4,3
10005fcc:	10002026 	beq	r2,zero,10006050 <strlen+0x88>
10005fd0:	20800007 	ldb	r2,0(r4)
10005fd4:	10002026 	beq	r2,zero,10006058 <strlen+0x90>
10005fd8:	2005883a 	mov	r2,r4
10005fdc:	00000206 	br	10005fe8 <strlen+0x20>
10005fe0:	10c00007 	ldb	r3,0(r2)
10005fe4:	18001826 	beq	r3,zero,10006048 <strlen+0x80>
10005fe8:	10800044 	addi	r2,r2,1
10005fec:	10c000cc 	andi	r3,r2,3
10005ff0:	183ffb1e 	bne	r3,zero,10005fe0 <__alt_data_end+0xf8005fe0>
10005ff4:	10c00017 	ldw	r3,0(r2)
10005ff8:	01ffbff4 	movhi	r7,65279
10005ffc:	39ffbfc4 	addi	r7,r7,-257
10006000:	00ca303a 	nor	r5,zero,r3
10006004:	01a02074 	movhi	r6,32897
10006008:	19c7883a 	add	r3,r3,r7
1000600c:	31a02004 	addi	r6,r6,-32640
10006010:	1946703a 	and	r3,r3,r5
10006014:	1986703a 	and	r3,r3,r6
10006018:	1800091e 	bne	r3,zero,10006040 <strlen+0x78>
1000601c:	10800104 	addi	r2,r2,4
10006020:	10c00017 	ldw	r3,0(r2)
10006024:	19cb883a 	add	r5,r3,r7
10006028:	00c6303a 	nor	r3,zero,r3
1000602c:	28c6703a 	and	r3,r5,r3
10006030:	1986703a 	and	r3,r3,r6
10006034:	183ff926 	beq	r3,zero,1000601c <__alt_data_end+0xf800601c>
10006038:	00000106 	br	10006040 <strlen+0x78>
1000603c:	10800044 	addi	r2,r2,1
10006040:	10c00007 	ldb	r3,0(r2)
10006044:	183ffd1e 	bne	r3,zero,1000603c <__alt_data_end+0xf800603c>
10006048:	1105c83a 	sub	r2,r2,r4
1000604c:	f800283a 	ret
10006050:	2005883a 	mov	r2,r4
10006054:	003fe706 	br	10005ff4 <__alt_data_end+0xf8005ff4>
10006058:	0005883a 	mov	r2,zero
1000605c:	f800283a 	ret

10006060 <___vfprintf_internal_r>:
10006060:	defeb604 	addi	sp,sp,-1320
10006064:	dfc14915 	stw	ra,1316(sp)
10006068:	ddc14715 	stw	r23,1308(sp)
1000606c:	dd814615 	stw	r22,1304(sp)
10006070:	202f883a 	mov	r23,r4
10006074:	282d883a 	mov	r22,r5
10006078:	d9812a15 	stw	r6,1192(sp)
1000607c:	d9c12d15 	stw	r7,1204(sp)
10006080:	df014815 	stw	fp,1312(sp)
10006084:	dd414515 	stw	r21,1300(sp)
10006088:	dd014415 	stw	r20,1296(sp)
1000608c:	dcc14315 	stw	r19,1292(sp)
10006090:	dc814215 	stw	r18,1288(sp)
10006094:	dc414115 	stw	r17,1284(sp)
10006098:	dc014015 	stw	r16,1280(sp)
1000609c:	000ace00 	call	1000ace0 <_localeconv_r>
100060a0:	10800017 	ldw	r2,0(r2)
100060a4:	1009883a 	mov	r4,r2
100060a8:	d8813515 	stw	r2,1236(sp)
100060ac:	0005fc80 	call	10005fc8 <strlen>
100060b0:	d8813815 	stw	r2,1248(sp)
100060b4:	b8000226 	beq	r23,zero,100060c0 <___vfprintf_internal_r+0x60>
100060b8:	b8800e17 	ldw	r2,56(r23)
100060bc:	10010526 	beq	r2,zero,100064d4 <___vfprintf_internal_r+0x474>
100060c0:	b0c0030b 	ldhu	r3,12(r22)
100060c4:	1908000c 	andi	r4,r3,8192
100060c8:	1805883a 	mov	r2,r3
100060cc:	2000071e 	bne	r4,zero,100060ec <___vfprintf_internal_r+0x8c>
100060d0:	b1001917 	ldw	r4,100(r22)
100060d4:	18880014 	ori	r2,r3,8192
100060d8:	00f7ffc4 	movi	r3,-8193
100060dc:	20c8703a 	and	r4,r4,r3
100060e0:	b080030d 	sth	r2,12(r22)
100060e4:	1007883a 	mov	r3,r2
100060e8:	b1001915 	stw	r4,100(r22)
100060ec:	1100020c 	andi	r4,r2,8
100060f0:	2000a826 	beq	r4,zero,10006394 <___vfprintf_internal_r+0x334>
100060f4:	b1000417 	ldw	r4,16(r22)
100060f8:	2000a626 	beq	r4,zero,10006394 <___vfprintf_internal_r+0x334>
100060fc:	1080068c 	andi	r2,r2,26
10006100:	01000284 	movi	r4,10
10006104:	1100ac26 	beq	r2,r4,100063b8 <___vfprintf_internal_r+0x358>
10006108:	d8c10e04 	addi	r3,sp,1080
1000610c:	d9010dc4 	addi	r4,sp,1079
10006110:	d9400404 	addi	r5,sp,16
10006114:	05040074 	movhi	r20,4097
10006118:	1905c83a 	sub	r2,r3,r4
1000611c:	a5072984 	addi	r20,r20,7334
10006120:	d8c12815 	stw	r3,1184(sp)
10006124:	d9012915 	stw	r4,1188(sp)
10006128:	d9411e15 	stw	r5,1144(sp)
1000612c:	d8012015 	stw	zero,1152(sp)
10006130:	d8011f15 	stw	zero,1148(sp)
10006134:	d8013315 	stw	zero,1228(sp)
10006138:	d8013715 	stw	zero,1244(sp)
1000613c:	d8013915 	stw	zero,1252(sp)
10006140:	d8013b15 	stw	zero,1260(sp)
10006144:	d8013a15 	stw	zero,1256(sp)
10006148:	d8012f15 	stw	zero,1212(sp)
1000614c:	2811883a 	mov	r8,r5
10006150:	d8813c15 	stw	r2,1264(sp)
10006154:	d8c12a17 	ldw	r3,1192(sp)
10006158:	18800007 	ldb	r2,0(r3)
1000615c:	10021326 	beq	r2,zero,100069ac <___vfprintf_internal_r+0x94c>
10006160:	00c00944 	movi	r3,37
10006164:	dc012a17 	ldw	r16,1192(sp)
10006168:	10c0021e 	bne	r2,r3,10006174 <___vfprintf_internal_r+0x114>
1000616c:	00001606 	br	100061c8 <___vfprintf_internal_r+0x168>
10006170:	10c08526 	beq	r2,r3,10006388 <___vfprintf_internal_r+0x328>
10006174:	84000044 	addi	r16,r16,1
10006178:	80800007 	ldb	r2,0(r16)
1000617c:	103ffc1e 	bne	r2,zero,10006170 <__alt_data_end+0xf8006170>
10006180:	d9012a17 	ldw	r4,1192(sp)
10006184:	8123c83a 	sub	r17,r16,r4
10006188:	88000f26 	beq	r17,zero,100061c8 <___vfprintf_internal_r+0x168>
1000618c:	d8812a17 	ldw	r2,1192(sp)
10006190:	d8c12017 	ldw	r3,1152(sp)
10006194:	44400115 	stw	r17,4(r8)
10006198:	40800015 	stw	r2,0(r8)
1000619c:	d8811f17 	ldw	r2,1148(sp)
100061a0:	1c47883a 	add	r3,r3,r17
100061a4:	d8c12015 	stw	r3,1152(sp)
100061a8:	10800044 	addi	r2,r2,1
100061ac:	d8811f15 	stw	r2,1148(sp)
100061b0:	00c001c4 	movi	r3,7
100061b4:	1880b516 	blt	r3,r2,1000648c <___vfprintf_internal_r+0x42c>
100061b8:	42000204 	addi	r8,r8,8
100061bc:	d8c12f17 	ldw	r3,1212(sp)
100061c0:	1c47883a 	add	r3,r3,r17
100061c4:	d8c12f15 	stw	r3,1212(sp)
100061c8:	80800007 	ldb	r2,0(r16)
100061cc:	1000b626 	beq	r2,zero,100064a8 <___vfprintf_internal_r+0x448>
100061d0:	80800044 	addi	r2,r16,1
100061d4:	84000047 	ldb	r16,1(r16)
100061d8:	0027883a 	mov	r19,zero
100061dc:	0039883a 	mov	fp,zero
100061e0:	dcc12b05 	stb	r19,1196(sp)
100061e4:	d8012785 	stb	zero,1182(sp)
100061e8:	027fffc4 	movi	r9,-1
100061ec:	d8012e15 	stw	zero,1208(sp)
100061f0:	04401604 	movi	r17,88
100061f4:	04800244 	movi	r18,9
100061f8:	da012a15 	stw	r8,1192(sp)
100061fc:	e027883a 	mov	r19,fp
10006200:	17000044 	addi	fp,r2,1
10006204:	80bff804 	addi	r2,r16,-32
10006208:	88831236 	bltu	r17,r2,10006e54 <___vfprintf_internal_r+0xdf4>
1000620c:	100490ba 	slli	r2,r2,2
10006210:	01040034 	movhi	r4,4096
10006214:	21188904 	addi	r4,r4,25124
10006218:	1105883a 	add	r2,r2,r4
1000621c:	10800017 	ldw	r2,0(r2)
10006220:	1000683a 	jmp	r2
10006224:	10006d70 	cmpltui	zero,r2,437
10006228:	10006e54 	ori	zero,r2,441
1000622c:	10006e54 	ori	zero,r2,441
10006230:	10006d8c 	andi	zero,r2,438
10006234:	10006e54 	ori	zero,r2,441
10006238:	10006e54 	ori	zero,r2,441
1000623c:	10006e54 	ori	zero,r2,441
10006240:	10006e54 	ori	zero,r2,441
10006244:	10006e54 	ori	zero,r2,441
10006248:	10006e54 	ori	zero,r2,441
1000624c:	10006d9c 	xori	zero,r2,438
10006250:	10006dc4 	addi	zero,r2,439
10006254:	10006e54 	ori	zero,r2,441
10006258:	100064e0 	cmpeqi	zero,r2,403
1000625c:	100064f0 	cmpltui	zero,r2,403
10006260:	10006e54 	ori	zero,r2,441
10006264:	10006540 	call	11000654 <_gp+0xfe4d4c>
10006268:	10006550 	cmplti	zero,r2,405
1000626c:	10006550 	cmplti	zero,r2,405
10006270:	10006550 	cmplti	zero,r2,405
10006274:	10006550 	cmplti	zero,r2,405
10006278:	10006550 	cmplti	zero,r2,405
1000627c:	10006550 	cmplti	zero,r2,405
10006280:	10006550 	cmplti	zero,r2,405
10006284:	10006550 	cmplti	zero,r2,405
10006288:	10006550 	cmplti	zero,r2,405
1000628c:	10006e54 	ori	zero,r2,441
10006290:	10006e54 	ori	zero,r2,441
10006294:	10006e54 	ori	zero,r2,441
10006298:	10006e54 	ori	zero,r2,441
1000629c:	10006e54 	ori	zero,r2,441
100062a0:	10006e54 	ori	zero,r2,441
100062a4:	10006e54 	ori	zero,r2,441
100062a8:	10006e54 	ori	zero,r2,441
100062ac:	10006e54 	ori	zero,r2,441
100062b0:	10006e54 	ori	zero,r2,441
100062b4:	10006594 	ori	zero,r2,406
100062b8:	100069b4 	orhi	zero,r2,422
100062bc:	10006e54 	ori	zero,r2,441
100062c0:	100069b4 	orhi	zero,r2,422
100062c4:	10006e54 	ori	zero,r2,441
100062c8:	10006e54 	ori	zero,r2,441
100062cc:	10006e54 	ori	zero,r2,441
100062d0:	10006e54 	ori	zero,r2,441
100062d4:	10006a5c 	xori	zero,r2,425
100062d8:	10006e54 	ori	zero,r2,441
100062dc:	10006e54 	ori	zero,r2,441
100062e0:	10006a6c 	andhi	zero,r2,425
100062e4:	10006e54 	ori	zero,r2,441
100062e8:	10006e54 	ori	zero,r2,441
100062ec:	10006e54 	ori	zero,r2,441
100062f0:	10006e54 	ori	zero,r2,441
100062f4:	10006e54 	ori	zero,r2,441
100062f8:	10006ab0 	cmpltui	zero,r2,426
100062fc:	10006e54 	ori	zero,r2,441
10006300:	10006e54 	ori	zero,r2,441
10006304:	10006ae8 	cmpgeui	zero,r2,427
10006308:	10006e54 	ori	zero,r2,441
1000630c:	10006e54 	ori	zero,r2,441
10006310:	10006e54 	ori	zero,r2,441
10006314:	10006e54 	ori	zero,r2,441
10006318:	10006e54 	ori	zero,r2,441
1000631c:	10006e54 	ori	zero,r2,441
10006320:	10006e54 	ori	zero,r2,441
10006324:	10006e54 	ori	zero,r2,441
10006328:	10006e54 	ori	zero,r2,441
1000632c:	10006e54 	ori	zero,r2,441
10006330:	10006d24 	muli	zero,r2,436
10006334:	10006cd0 	cmplti	zero,r2,435
10006338:	100069b4 	orhi	zero,r2,422
1000633c:	100069b4 	orhi	zero,r2,422
10006340:	100069b4 	orhi	zero,r2,422
10006344:	10006d14 	ori	zero,r2,436
10006348:	10006cd0 	cmplti	zero,r2,435
1000634c:	10006e54 	ori	zero,r2,441
10006350:	10006e54 	ori	zero,r2,441
10006354:	10006bec 	andhi	zero,r2,431
10006358:	10006e54 	ori	zero,r2,441
1000635c:	10006c04 	addi	zero,r2,432
10006360:	10006c44 	addi	zero,r2,433
10006364:	10006c84 	addi	zero,r2,434
10006368:	10006b50 	cmplti	zero,r2,429
1000636c:	10006e54 	ori	zero,r2,441
10006370:	10006dd8 	cmpnei	zero,r2,439
10006374:	10006e54 	ori	zero,r2,441
10006378:	10006b60 	cmpeqi	zero,r2,429
1000637c:	10006e54 	ori	zero,r2,441
10006380:	10006e54 	ori	zero,r2,441
10006384:	10006ba0 	cmpeqi	zero,r2,430
10006388:	d9412a17 	ldw	r5,1192(sp)
1000638c:	8163c83a 	sub	r17,r16,r5
10006390:	003f7d06 	br	10006188 <__alt_data_end+0xf8006188>
10006394:	b809883a 	mov	r4,r23
10006398:	b00b883a 	mov	r5,r22
1000639c:	00081800 	call	10008180 <__swsetup_r>
100063a0:	10002d1e 	bne	r2,zero,10006458 <___vfprintf_internal_r+0x3f8>
100063a4:	b0c0030b 	ldhu	r3,12(r22)
100063a8:	01000284 	movi	r4,10
100063ac:	1805883a 	mov	r2,r3
100063b0:	1080068c 	andi	r2,r2,26
100063b4:	113f541e 	bne	r2,r4,10006108 <__alt_data_end+0xf8006108>
100063b8:	b080038b 	ldhu	r2,14(r22)
100063bc:	113fffcc 	andi	r4,r2,65535
100063c0:	2120001c 	xori	r4,r4,32768
100063c4:	21200004 	addi	r4,r4,-32768
100063c8:	203f4f16 	blt	r4,zero,10006108 <__alt_data_end+0xf8006108>
100063cc:	b2c01917 	ldw	r11,100(r22)
100063d0:	b2800717 	ldw	r10,28(r22)
100063d4:	b2400917 	ldw	r9,36(r22)
100063d8:	d9812a17 	ldw	r6,1192(sp)
100063dc:	d9c12d17 	ldw	r7,1204(sp)
100063e0:	02010004 	movi	r8,1024
100063e4:	18ffff4c 	andi	r3,r3,65533
100063e8:	d881078d 	sth	r2,1054(sp)
100063ec:	b809883a 	mov	r4,r23
100063f0:	d8800404 	addi	r2,sp,16
100063f4:	d9410404 	addi	r5,sp,1040
100063f8:	d8c1070d 	sth	r3,1052(sp)
100063fc:	dac11d15 	stw	r11,1140(sp)
10006400:	da810b15 	stw	r10,1068(sp)
10006404:	da410d15 	stw	r9,1076(sp)
10006408:	d8810415 	stw	r2,1040(sp)
1000640c:	d8810815 	stw	r2,1056(sp)
10006410:	da010615 	stw	r8,1048(sp)
10006414:	da010915 	stw	r8,1060(sp)
10006418:	d8010a15 	stw	zero,1064(sp)
1000641c:	00060600 	call	10006060 <___vfprintf_internal_r>
10006420:	1021883a 	mov	r16,r2
10006424:	10000416 	blt	r2,zero,10006438 <___vfprintf_internal_r+0x3d8>
10006428:	b809883a 	mov	r4,r23
1000642c:	d9410404 	addi	r5,sp,1040
10006430:	0009c000 	call	10009c00 <_fflush_r>
10006434:	1007301e 	bne	r2,zero,100080f8 <___vfprintf_internal_r+0x2098>
10006438:	d881070b 	ldhu	r2,1052(sp)
1000643c:	1080100c 	andi	r2,r2,64
10006440:	10000326 	beq	r2,zero,10006450 <___vfprintf_internal_r+0x3f0>
10006444:	b080030b 	ldhu	r2,12(r22)
10006448:	10801014 	ori	r2,r2,64
1000644c:	b080030d 	sth	r2,12(r22)
10006450:	8005883a 	mov	r2,r16
10006454:	00000106 	br	1000645c <___vfprintf_internal_r+0x3fc>
10006458:	00bfffc4 	movi	r2,-1
1000645c:	dfc14917 	ldw	ra,1316(sp)
10006460:	df014817 	ldw	fp,1312(sp)
10006464:	ddc14717 	ldw	r23,1308(sp)
10006468:	dd814617 	ldw	r22,1304(sp)
1000646c:	dd414517 	ldw	r21,1300(sp)
10006470:	dd014417 	ldw	r20,1296(sp)
10006474:	dcc14317 	ldw	r19,1292(sp)
10006478:	dc814217 	ldw	r18,1288(sp)
1000647c:	dc414117 	ldw	r17,1284(sp)
10006480:	dc014017 	ldw	r16,1280(sp)
10006484:	dec14a04 	addi	sp,sp,1320
10006488:	f800283a 	ret
1000648c:	b809883a 	mov	r4,r23
10006490:	b00b883a 	mov	r5,r22
10006494:	d9811e04 	addi	r6,sp,1144
10006498:	000d42c0 	call	1000d42c <__sprint_r>
1000649c:	1000081e 	bne	r2,zero,100064c0 <___vfprintf_internal_r+0x460>
100064a0:	da000404 	addi	r8,sp,16
100064a4:	003f4506 	br	100061bc <__alt_data_end+0xf80061bc>
100064a8:	d8812017 	ldw	r2,1152(sp)
100064ac:	10000426 	beq	r2,zero,100064c0 <___vfprintf_internal_r+0x460>
100064b0:	b809883a 	mov	r4,r23
100064b4:	b00b883a 	mov	r5,r22
100064b8:	d9811e04 	addi	r6,sp,1144
100064bc:	000d42c0 	call	1000d42c <__sprint_r>
100064c0:	b080030b 	ldhu	r2,12(r22)
100064c4:	1080100c 	andi	r2,r2,64
100064c8:	103fe31e 	bne	r2,zero,10006458 <__alt_data_end+0xf8006458>
100064cc:	d8812f17 	ldw	r2,1212(sp)
100064d0:	003fe206 	br	1000645c <__alt_data_end+0xf800645c>
100064d4:	b809883a 	mov	r4,r23
100064d8:	000a1bc0 	call	1000a1bc <__sinit>
100064dc:	003ef806 	br	100060c0 <__alt_data_end+0xf80060c0>
100064e0:	e005883a 	mov	r2,fp
100064e4:	9cc00114 	ori	r19,r19,4
100064e8:	e4000007 	ldb	r16,0(fp)
100064ec:	003f4406 	br	10006200 <__alt_data_end+0xf8006200>
100064f0:	e4000007 	ldb	r16,0(fp)
100064f4:	01000a84 	movi	r4,42
100064f8:	e0800044 	addi	r2,fp,1
100064fc:	8106f626 	beq	r16,r4,100080d8 <___vfprintf_internal_r+0x2078>
10006500:	857ff404 	addi	r21,r16,-48
10006504:	1039883a 	mov	fp,r2
10006508:	0013883a 	mov	r9,zero
1000650c:	957f3d36 	bltu	r18,r21,10006204 <__alt_data_end+0xf8006204>
10006510:	0009883a 	mov	r4,zero
10006514:	01400284 	movi	r5,10
10006518:	00037040 	call	10003704 <__mulsi3>
1000651c:	e4000007 	ldb	r16,0(fp)
10006520:	a889883a 	add	r4,r21,r2
10006524:	e7000044 	addi	fp,fp,1
10006528:	857ff404 	addi	r21,r16,-48
1000652c:	957ff92e 	bgeu	r18,r21,10006514 <__alt_data_end+0xf8006514>
10006530:	2013883a 	mov	r9,r4
10006534:	203f330e 	bge	r4,zero,10006204 <__alt_data_end+0xf8006204>
10006538:	027fffc4 	movi	r9,-1
1000653c:	003f3106 	br	10006204 <__alt_data_end+0xf8006204>
10006540:	9cc02014 	ori	r19,r19,128
10006544:	e005883a 	mov	r2,fp
10006548:	e4000007 	ldb	r16,0(fp)
1000654c:	003f2c06 	br	10006200 <__alt_data_end+0xf8006200>
10006550:	857ff404 	addi	r21,r16,-48
10006554:	d8012e15 	stw	zero,1208(sp)
10006558:	e021883a 	mov	r16,fp
1000655c:	0009883a 	mov	r4,zero
10006560:	da412c15 	stw	r9,1200(sp)
10006564:	01400284 	movi	r5,10
10006568:	00037040 	call	10003704 <__mulsi3>
1000656c:	81400007 	ldb	r5,0(r16)
10006570:	1549883a 	add	r4,r2,r21
10006574:	e7000044 	addi	fp,fp,1
10006578:	2d7ff404 	addi	r21,r5,-48
1000657c:	e021883a 	mov	r16,fp
10006580:	957ff82e 	bgeu	r18,r21,10006564 <__alt_data_end+0xf8006564>
10006584:	2821883a 	mov	r16,r5
10006588:	d9012e15 	stw	r4,1208(sp)
1000658c:	da412c17 	ldw	r9,1200(sp)
10006590:	003f1c06 	br	10006204 <__alt_data_end+0xf8006204>
10006594:	da012a17 	ldw	r8,1192(sp)
10006598:	df012a15 	stw	fp,1192(sp)
1000659c:	9839883a 	mov	fp,r19
100065a0:	dcc12b03 	ldbu	r19,1196(sp)
100065a4:	e7000414 	ori	fp,fp,16
100065a8:	e080080c 	andi	r2,fp,32
100065ac:	dcc12785 	stb	r19,1182(sp)
100065b0:	d8c12d17 	ldw	r3,1204(sp)
100065b4:	1001ce26 	beq	r2,zero,10006cf0 <___vfprintf_internal_r+0xc90>
100065b8:	d9012d17 	ldw	r4,1204(sp)
100065bc:	18800117 	ldw	r2,4(r3)
100065c0:	1c800017 	ldw	r18,0(r3)
100065c4:	21000204 	addi	r4,r4,8
100065c8:	d9012d15 	stw	r4,1204(sp)
100065cc:	102b883a 	mov	r21,r2
100065d0:	10044916 	blt	r2,zero,100076f8 <___vfprintf_internal_r+0x1698>
100065d4:	dcc12783 	ldbu	r19,1182(sp)
100065d8:	da413215 	stw	r9,1224(sp)
100065dc:	00800044 	movi	r2,1
100065e0:	9546b03a 	or	r3,r18,r21
100065e4:	48000216 	blt	r9,zero,100065f0 <___vfprintf_internal_r+0x590>
100065e8:	013fdfc4 	movi	r4,-129
100065ec:	e138703a 	and	fp,fp,r4
100065f0:	1802251e 	bne	r3,zero,10006e88 <___vfprintf_internal_r+0xe28>
100065f4:	48031726 	beq	r9,zero,10007254 <___vfprintf_internal_r+0x11f4>
100065f8:	10803fcc 	andi	r2,r2,255
100065fc:	00c00044 	movi	r3,1
10006600:	10c24526 	beq	r2,r3,10006f18 <___vfprintf_internal_r+0xeb8>
10006604:	00c00084 	movi	r3,2
10006608:	10c33426 	beq	r2,r3,100072dc <___vfprintf_internal_r+0x127c>
1000660c:	d8c10e04 	addi	r3,sp,1080
10006610:	9008d0fa 	srli	r4,r18,3
10006614:	a80a977a 	slli	r5,r21,29
10006618:	a82ad0fa 	srli	r21,r21,3
1000661c:	948001cc 	andi	r18,r18,7
10006620:	90800c04 	addi	r2,r18,48
10006624:	18ffffc4 	addi	r3,r3,-1
10006628:	2924b03a 	or	r18,r5,r4
1000662c:	18800005 	stb	r2,0(r3)
10006630:	9548b03a 	or	r4,r18,r21
10006634:	203ff61e 	bne	r4,zero,10006610 <__alt_data_end+0xf8006610>
10006638:	e100004c 	andi	r4,fp,1
1000663c:	d8c13115 	stw	r3,1220(sp)
10006640:	20039a1e 	bne	r4,zero,100074ac <___vfprintf_internal_r+0x144c>
10006644:	d8812817 	ldw	r2,1184(sp)
10006648:	10e3c83a 	sub	r17,r2,r3
1000664c:	8805883a 	mov	r2,r17
10006650:	8a40010e 	bge	r17,r9,10006658 <___vfprintf_internal_r+0x5f8>
10006654:	4805883a 	mov	r2,r9
10006658:	d8812b15 	stw	r2,1196(sp)
1000665c:	d8013415 	stw	zero,1232(sp)
10006660:	98803fcc 	andi	r2,r19,255
10006664:	1080201c 	xori	r2,r2,128
10006668:	10bfe004 	addi	r2,r2,-128
1000666c:	10000326 	beq	r2,zero,1000667c <___vfprintf_internal_r+0x61c>
10006670:	d8c12b17 	ldw	r3,1196(sp)
10006674:	18c00044 	addi	r3,r3,1
10006678:	d8c12b15 	stw	r3,1196(sp)
1000667c:	e0c0008c 	andi	r3,fp,2
10006680:	d8c12c15 	stw	r3,1200(sp)
10006684:	18000326 	beq	r3,zero,10006694 <___vfprintf_internal_r+0x634>
10006688:	d8c12b17 	ldw	r3,1196(sp)
1000668c:	18c00084 	addi	r3,r3,2
10006690:	d8c12b15 	stw	r3,1196(sp)
10006694:	e0c0210c 	andi	r3,fp,132
10006698:	d8c13015 	stw	r3,1216(sp)
1000669c:	1801f81e 	bne	r3,zero,10006e80 <___vfprintf_internal_r+0xe20>
100066a0:	d9012e17 	ldw	r4,1208(sp)
100066a4:	d8c12b17 	ldw	r3,1196(sp)
100066a8:	20ebc83a 	sub	r21,r4,r3
100066ac:	0541f40e 	bge	zero,r21,10006e80 <___vfprintf_internal_r+0xe20>
100066b0:	02400404 	movi	r9,16
100066b4:	d8c12017 	ldw	r3,1152(sp)
100066b8:	d8811f17 	ldw	r2,1148(sp)
100066bc:	4d45750e 	bge	r9,r21,10007c94 <___vfprintf_internal_r+0x1c34>
100066c0:	01440074 	movhi	r5,4097
100066c4:	29472d84 	addi	r5,r5,7350
100066c8:	d9413615 	stw	r5,1240(sp)
100066cc:	4827883a 	mov	r19,r9
100066d0:	048001c4 	movi	r18,7
100066d4:	00000306 	br	100066e4 <___vfprintf_internal_r+0x684>
100066d8:	ad7ffc04 	addi	r21,r21,-16
100066dc:	42000204 	addi	r8,r8,8
100066e0:	9d40130e 	bge	r19,r21,10006730 <___vfprintf_internal_r+0x6d0>
100066e4:	01040074 	movhi	r4,4097
100066e8:	18c00404 	addi	r3,r3,16
100066ec:	10800044 	addi	r2,r2,1
100066f0:	21072d84 	addi	r4,r4,7350
100066f4:	41000015 	stw	r4,0(r8)
100066f8:	44c00115 	stw	r19,4(r8)
100066fc:	d8c12015 	stw	r3,1152(sp)
10006700:	d8811f15 	stw	r2,1148(sp)
10006704:	90bff40e 	bge	r18,r2,100066d8 <__alt_data_end+0xf80066d8>
10006708:	b809883a 	mov	r4,r23
1000670c:	b00b883a 	mov	r5,r22
10006710:	d9811e04 	addi	r6,sp,1144
10006714:	000d42c0 	call	1000d42c <__sprint_r>
10006718:	103f691e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
1000671c:	ad7ffc04 	addi	r21,r21,-16
10006720:	d8c12017 	ldw	r3,1152(sp)
10006724:	d8811f17 	ldw	r2,1148(sp)
10006728:	da000404 	addi	r8,sp,16
1000672c:	9d7fed16 	blt	r19,r21,100066e4 <__alt_data_end+0xf80066e4>
10006730:	d9413617 	ldw	r5,1240(sp)
10006734:	a8c7883a 	add	r3,r21,r3
10006738:	10800044 	addi	r2,r2,1
1000673c:	41400015 	stw	r5,0(r8)
10006740:	45400115 	stw	r21,4(r8)
10006744:	d8c12015 	stw	r3,1152(sp)
10006748:	d8811f15 	stw	r2,1148(sp)
1000674c:	010001c4 	movi	r4,7
10006750:	20832b16 	blt	r4,r2,10007400 <___vfprintf_internal_r+0x13a0>
10006754:	d8812787 	ldb	r2,1182(sp)
10006758:	42000204 	addi	r8,r8,8
1000675c:	10000c26 	beq	r2,zero,10006790 <___vfprintf_internal_r+0x730>
10006760:	d8811f17 	ldw	r2,1148(sp)
10006764:	d9012784 	addi	r4,sp,1182
10006768:	18c00044 	addi	r3,r3,1
1000676c:	10800044 	addi	r2,r2,1
10006770:	41000015 	stw	r4,0(r8)
10006774:	01000044 	movi	r4,1
10006778:	41000115 	stw	r4,4(r8)
1000677c:	d8c12015 	stw	r3,1152(sp)
10006780:	d8811f15 	stw	r2,1148(sp)
10006784:	010001c4 	movi	r4,7
10006788:	2082c416 	blt	r4,r2,1000729c <___vfprintf_internal_r+0x123c>
1000678c:	42000204 	addi	r8,r8,8
10006790:	d8812c17 	ldw	r2,1200(sp)
10006794:	10000c26 	beq	r2,zero,100067c8 <___vfprintf_internal_r+0x768>
10006798:	d8811f17 	ldw	r2,1148(sp)
1000679c:	d9012704 	addi	r4,sp,1180
100067a0:	18c00084 	addi	r3,r3,2
100067a4:	10800044 	addi	r2,r2,1
100067a8:	41000015 	stw	r4,0(r8)
100067ac:	01000084 	movi	r4,2
100067b0:	41000115 	stw	r4,4(r8)
100067b4:	d8c12015 	stw	r3,1152(sp)
100067b8:	d8811f15 	stw	r2,1148(sp)
100067bc:	010001c4 	movi	r4,7
100067c0:	2082be16 	blt	r4,r2,100072bc <___vfprintf_internal_r+0x125c>
100067c4:	42000204 	addi	r8,r8,8
100067c8:	d9013017 	ldw	r4,1216(sp)
100067cc:	00802004 	movi	r2,128
100067d0:	20822026 	beq	r4,r2,10007054 <___vfprintf_internal_r+0xff4>
100067d4:	d9413217 	ldw	r5,1224(sp)
100067d8:	2c67c83a 	sub	r19,r5,r17
100067dc:	04c0260e 	bge	zero,r19,10006878 <___vfprintf_internal_r+0x818>
100067e0:	05400404 	movi	r21,16
100067e4:	d8811f17 	ldw	r2,1148(sp)
100067e8:	acc4720e 	bge	r21,r19,100079b4 <___vfprintf_internal_r+0x1954>
100067ec:	01440074 	movhi	r5,4097
100067f0:	29472984 	addi	r5,r5,7334
100067f4:	d9412c15 	stw	r5,1200(sp)
100067f8:	048001c4 	movi	r18,7
100067fc:	00000306 	br	1000680c <___vfprintf_internal_r+0x7ac>
10006800:	9cfffc04 	addi	r19,r19,-16
10006804:	42000204 	addi	r8,r8,8
10006808:	acc0110e 	bge	r21,r19,10006850 <___vfprintf_internal_r+0x7f0>
1000680c:	18c00404 	addi	r3,r3,16
10006810:	10800044 	addi	r2,r2,1
10006814:	45000015 	stw	r20,0(r8)
10006818:	45400115 	stw	r21,4(r8)
1000681c:	d8c12015 	stw	r3,1152(sp)
10006820:	d8811f15 	stw	r2,1148(sp)
10006824:	90bff60e 	bge	r18,r2,10006800 <__alt_data_end+0xf8006800>
10006828:	b809883a 	mov	r4,r23
1000682c:	b00b883a 	mov	r5,r22
10006830:	d9811e04 	addi	r6,sp,1144
10006834:	000d42c0 	call	1000d42c <__sprint_r>
10006838:	103f211e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
1000683c:	9cfffc04 	addi	r19,r19,-16
10006840:	d8c12017 	ldw	r3,1152(sp)
10006844:	d8811f17 	ldw	r2,1148(sp)
10006848:	da000404 	addi	r8,sp,16
1000684c:	acffef16 	blt	r21,r19,1000680c <__alt_data_end+0xf800680c>
10006850:	d9012c17 	ldw	r4,1200(sp)
10006854:	1cc7883a 	add	r3,r3,r19
10006858:	10800044 	addi	r2,r2,1
1000685c:	41000015 	stw	r4,0(r8)
10006860:	44c00115 	stw	r19,4(r8)
10006864:	d8c12015 	stw	r3,1152(sp)
10006868:	d8811f15 	stw	r2,1148(sp)
1000686c:	010001c4 	movi	r4,7
10006870:	20828216 	blt	r4,r2,1000727c <___vfprintf_internal_r+0x121c>
10006874:	42000204 	addi	r8,r8,8
10006878:	e080400c 	andi	r2,fp,256
1000687c:	1001ac1e 	bne	r2,zero,10006f30 <___vfprintf_internal_r+0xed0>
10006880:	d8811f17 	ldw	r2,1148(sp)
10006884:	d9413117 	ldw	r5,1220(sp)
10006888:	1c47883a 	add	r3,r3,r17
1000688c:	10800044 	addi	r2,r2,1
10006890:	41400015 	stw	r5,0(r8)
10006894:	44400115 	stw	r17,4(r8)
10006898:	d8c12015 	stw	r3,1152(sp)
1000689c:	d8811f15 	stw	r2,1148(sp)
100068a0:	010001c4 	movi	r4,7
100068a4:	20825d16 	blt	r4,r2,1000721c <___vfprintf_internal_r+0x11bc>
100068a8:	42000204 	addi	r8,r8,8
100068ac:	e080010c 	andi	r2,fp,4
100068b0:	10003126 	beq	r2,zero,10006978 <___vfprintf_internal_r+0x918>
100068b4:	d8812e17 	ldw	r2,1208(sp)
100068b8:	d9012b17 	ldw	r4,1196(sp)
100068bc:	1121c83a 	sub	r16,r2,r4
100068c0:	04002d0e 	bge	zero,r16,10006978 <___vfprintf_internal_r+0x918>
100068c4:	04400404 	movi	r17,16
100068c8:	d8811f17 	ldw	r2,1148(sp)
100068cc:	8c05340e 	bge	r17,r16,10007da0 <___vfprintf_internal_r+0x1d40>
100068d0:	01040074 	movhi	r4,4097
100068d4:	21072d84 	addi	r4,r4,7350
100068d8:	d9013615 	stw	r4,1240(sp)
100068dc:	048001c4 	movi	r18,7
100068e0:	00000306 	br	100068f0 <___vfprintf_internal_r+0x890>
100068e4:	843ffc04 	addi	r16,r16,-16
100068e8:	42000204 	addi	r8,r8,8
100068ec:	8c00130e 	bge	r17,r16,1000693c <___vfprintf_internal_r+0x8dc>
100068f0:	01440074 	movhi	r5,4097
100068f4:	18c00404 	addi	r3,r3,16
100068f8:	10800044 	addi	r2,r2,1
100068fc:	29472d84 	addi	r5,r5,7350
10006900:	41400015 	stw	r5,0(r8)
10006904:	44400115 	stw	r17,4(r8)
10006908:	d8c12015 	stw	r3,1152(sp)
1000690c:	d8811f15 	stw	r2,1148(sp)
10006910:	90bff40e 	bge	r18,r2,100068e4 <__alt_data_end+0xf80068e4>
10006914:	b809883a 	mov	r4,r23
10006918:	b00b883a 	mov	r5,r22
1000691c:	d9811e04 	addi	r6,sp,1144
10006920:	000d42c0 	call	1000d42c <__sprint_r>
10006924:	103ee61e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10006928:	843ffc04 	addi	r16,r16,-16
1000692c:	d8c12017 	ldw	r3,1152(sp)
10006930:	d8811f17 	ldw	r2,1148(sp)
10006934:	da000404 	addi	r8,sp,16
10006938:	8c3fed16 	blt	r17,r16,100068f0 <__alt_data_end+0xf80068f0>
1000693c:	d9013617 	ldw	r4,1240(sp)
10006940:	1c07883a 	add	r3,r3,r16
10006944:	10800044 	addi	r2,r2,1
10006948:	41000015 	stw	r4,0(r8)
1000694c:	44000115 	stw	r16,4(r8)
10006950:	d8c12015 	stw	r3,1152(sp)
10006954:	d8811f15 	stw	r2,1148(sp)
10006958:	010001c4 	movi	r4,7
1000695c:	2080060e 	bge	r4,r2,10006978 <___vfprintf_internal_r+0x918>
10006960:	b809883a 	mov	r4,r23
10006964:	b00b883a 	mov	r5,r22
10006968:	d9811e04 	addi	r6,sp,1144
1000696c:	000d42c0 	call	1000d42c <__sprint_r>
10006970:	103ed31e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10006974:	d8c12017 	ldw	r3,1152(sp)
10006978:	df012b17 	ldw	fp,1196(sp)
1000697c:	d9412e17 	ldw	r5,1208(sp)
10006980:	e140010e 	bge	fp,r5,10006988 <___vfprintf_internal_r+0x928>
10006984:	2839883a 	mov	fp,r5
10006988:	d8812f17 	ldw	r2,1212(sp)
1000698c:	1705883a 	add	r2,r2,fp
10006990:	d8812f15 	stw	r2,1212(sp)
10006994:	1802291e 	bne	r3,zero,1000723c <___vfprintf_internal_r+0x11dc>
10006998:	d8c12a17 	ldw	r3,1192(sp)
1000699c:	d8011f15 	stw	zero,1148(sp)
100069a0:	da000404 	addi	r8,sp,16
100069a4:	18800007 	ldb	r2,0(r3)
100069a8:	103ded1e 	bne	r2,zero,10006160 <__alt_data_end+0xf8006160>
100069ac:	dc012a17 	ldw	r16,1192(sp)
100069b0:	003e0506 	br	100061c8 <__alt_data_end+0xf80061c8>
100069b4:	d9012d17 	ldw	r4,1204(sp)
100069b8:	d9412d17 	ldw	r5,1204(sp)
100069bc:	da012a17 	ldw	r8,1192(sp)
100069c0:	21000017 	ldw	r4,0(r4)
100069c4:	29400117 	ldw	r5,4(r5)
100069c8:	df012a15 	stw	fp,1192(sp)
100069cc:	9839883a 	mov	fp,r19
100069d0:	dcc12b03 	ldbu	r19,1196(sp)
100069d4:	d9013715 	stw	r4,1244(sp)
100069d8:	d9413915 	stw	r5,1252(sp)
100069dc:	da013f15 	stw	r8,1276(sp)
100069e0:	da413e15 	stw	r9,1272(sp)
100069e4:	dcc12785 	stb	r19,1182(sp)
100069e8:	000241c0 	call	1000241c <__fpclassifyd>
100069ec:	d8c12d17 	ldw	r3,1204(sp)
100069f0:	04400044 	movi	r17,1
100069f4:	da013f17 	ldw	r8,1276(sp)
100069f8:	1c800204 	addi	r18,r3,8
100069fc:	da413e17 	ldw	r9,1272(sp)
10006a00:	d9013717 	ldw	r4,1244(sp)
10006a04:	d9413917 	ldw	r5,1252(sp)
10006a08:	1443451e 	bne	r2,r17,10007720 <___vfprintf_internal_r+0x16c0>
10006a0c:	000d883a 	mov	r6,zero
10006a10:	000f883a 	mov	r7,zero
10006a14:	0004aac0 	call	10004aac <__ledf2>
10006a18:	da013f17 	ldw	r8,1276(sp)
10006a1c:	1004fe16 	blt	r2,zero,10007e18 <___vfprintf_internal_r+0x1db8>
10006a20:	dcc12783 	ldbu	r19,1182(sp)
10006a24:	008011c4 	movi	r2,71
10006a28:	14045d0e 	bge	r2,r16,10007ba0 <___vfprintf_internal_r+0x1b40>
10006a2c:	01440074 	movhi	r5,4097
10006a30:	29471a04 	addi	r5,r5,7272
10006a34:	d9413115 	stw	r5,1220(sp)
10006a38:	00c000c4 	movi	r3,3
10006a3c:	00bfdfc4 	movi	r2,-129
10006a40:	d8c12b15 	stw	r3,1196(sp)
10006a44:	e0b8703a 	and	fp,fp,r2
10006a48:	dc812d15 	stw	r18,1204(sp)
10006a4c:	1823883a 	mov	r17,r3
10006a50:	d8013215 	stw	zero,1224(sp)
10006a54:	d8013415 	stw	zero,1232(sp)
10006a58:	003f0106 	br	10006660 <__alt_data_end+0xf8006660>
10006a5c:	9cc00214 	ori	r19,r19,8
10006a60:	e005883a 	mov	r2,fp
10006a64:	e4000007 	ldb	r16,0(fp)
10006a68:	003de506 	br	10006200 <__alt_data_end+0xf8006200>
10006a6c:	da012a17 	ldw	r8,1192(sp)
10006a70:	df012a15 	stw	fp,1192(sp)
10006a74:	9f000414 	ori	fp,r19,16
10006a78:	e0c0080c 	andi	r3,fp,32
10006a7c:	d8812d17 	ldw	r2,1204(sp)
10006a80:	18007626 	beq	r3,zero,10006c5c <___vfprintf_internal_r+0xbfc>
10006a84:	d9412d17 	ldw	r5,1204(sp)
10006a88:	14800017 	ldw	r18,0(r2)
10006a8c:	15400117 	ldw	r21,4(r2)
10006a90:	29400204 	addi	r5,r5,8
10006a94:	d9412d15 	stw	r5,1204(sp)
10006a98:	0005883a 	mov	r2,zero
10006a9c:	9546b03a 	or	r3,r18,r21
10006aa0:	d8012785 	stb	zero,1182(sp)
10006aa4:	da413215 	stw	r9,1224(sp)
10006aa8:	0027883a 	mov	r19,zero
10006aac:	003ecd06 	br	100065e4 <__alt_data_end+0xf80065e4>
10006ab0:	da012a17 	ldw	r8,1192(sp)
10006ab4:	df012a15 	stw	fp,1192(sp)
10006ab8:	9f000414 	ori	fp,r19,16
10006abc:	e0c0080c 	andi	r3,fp,32
10006ac0:	d8812d17 	ldw	r2,1204(sp)
10006ac4:	18002c26 	beq	r3,zero,10006b78 <___vfprintf_internal_r+0xb18>
10006ac8:	d9012d17 	ldw	r4,1204(sp)
10006acc:	14800017 	ldw	r18,0(r2)
10006ad0:	15400117 	ldw	r21,4(r2)
10006ad4:	21000204 	addi	r4,r4,8
10006ad8:	d9012d15 	stw	r4,1204(sp)
10006adc:	00800044 	movi	r2,1
10006ae0:	9546b03a 	or	r3,r18,r21
10006ae4:	003fee06 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10006ae8:	da012a17 	ldw	r8,1192(sp)
10006aec:	df012a15 	stw	fp,1192(sp)
10006af0:	9839883a 	mov	fp,r19
10006af4:	dcc12b03 	ldbu	r19,1196(sp)
10006af8:	01440074 	movhi	r5,4097
10006afc:	29471d04 	addi	r5,r5,7284
10006b00:	dcc12785 	stb	r19,1182(sp)
10006b04:	d9413b15 	stw	r5,1260(sp)
10006b08:	e0c0080c 	andi	r3,fp,32
10006b0c:	d8812d17 	ldw	r2,1204(sp)
10006b10:	18002e26 	beq	r3,zero,10006bcc <___vfprintf_internal_r+0xb6c>
10006b14:	d9412d17 	ldw	r5,1204(sp)
10006b18:	14800017 	ldw	r18,0(r2)
10006b1c:	15400117 	ldw	r21,4(r2)
10006b20:	29400204 	addi	r5,r5,8
10006b24:	d9412d15 	stw	r5,1204(sp)
10006b28:	e080004c 	andi	r2,fp,1
10006b2c:	10025c26 	beq	r2,zero,100074a0 <___vfprintf_internal_r+0x1440>
10006b30:	9546b03a 	or	r3,r18,r21
10006b34:	18038f26 	beq	r3,zero,10007974 <___vfprintf_internal_r+0x1914>
10006b38:	00800c04 	movi	r2,48
10006b3c:	d8812705 	stb	r2,1180(sp)
10006b40:	dc012745 	stb	r16,1181(sp)
10006b44:	e7000094 	ori	fp,fp,2
10006b48:	00800084 	movi	r2,2
10006b4c:	003fd406 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10006b50:	9cc00814 	ori	r19,r19,32
10006b54:	e005883a 	mov	r2,fp
10006b58:	e4000007 	ldb	r16,0(fp)
10006b5c:	003da806 	br	10006200 <__alt_data_end+0xf8006200>
10006b60:	da012a17 	ldw	r8,1192(sp)
10006b64:	df012a15 	stw	fp,1192(sp)
10006b68:	9839883a 	mov	fp,r19
10006b6c:	e0c0080c 	andi	r3,fp,32
10006b70:	d8812d17 	ldw	r2,1204(sp)
10006b74:	183fd41e 	bne	r3,zero,10006ac8 <__alt_data_end+0xf8006ac8>
10006b78:	e0c0040c 	andi	r3,fp,16
10006b7c:	18035f26 	beq	r3,zero,100078fc <___vfprintf_internal_r+0x189c>
10006b80:	d9412d17 	ldw	r5,1204(sp)
10006b84:	14800017 	ldw	r18,0(r2)
10006b88:	002b883a 	mov	r21,zero
10006b8c:	29400104 	addi	r5,r5,4
10006b90:	d9412d15 	stw	r5,1204(sp)
10006b94:	00800044 	movi	r2,1
10006b98:	9007883a 	mov	r3,r18
10006b9c:	003fc006 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10006ba0:	da012a17 	ldw	r8,1192(sp)
10006ba4:	df012a15 	stw	fp,1192(sp)
10006ba8:	9839883a 	mov	fp,r19
10006bac:	dcc12b03 	ldbu	r19,1196(sp)
10006bb0:	01040074 	movhi	r4,4097
10006bb4:	21072204 	addi	r4,r4,7304
10006bb8:	d9013b15 	stw	r4,1260(sp)
10006bbc:	dcc12785 	stb	r19,1182(sp)
10006bc0:	e0c0080c 	andi	r3,fp,32
10006bc4:	d8812d17 	ldw	r2,1204(sp)
10006bc8:	183fd21e 	bne	r3,zero,10006b14 <__alt_data_end+0xf8006b14>
10006bcc:	e0c0040c 	andi	r3,fp,16
10006bd0:	18035426 	beq	r3,zero,10007924 <___vfprintf_internal_r+0x18c4>
10006bd4:	d8c12d17 	ldw	r3,1204(sp)
10006bd8:	14800017 	ldw	r18,0(r2)
10006bdc:	002b883a 	mov	r21,zero
10006be0:	18c00104 	addi	r3,r3,4
10006be4:	d8c12d15 	stw	r3,1204(sp)
10006be8:	003fcf06 	br	10006b28 <__alt_data_end+0xf8006b28>
10006bec:	e4000007 	ldb	r16,0(fp)
10006bf0:	00801b04 	movi	r2,108
10006bf4:	8083f726 	beq	r16,r2,10007bd4 <___vfprintf_internal_r+0x1b74>
10006bf8:	9cc00414 	ori	r19,r19,16
10006bfc:	e005883a 	mov	r2,fp
10006c00:	003d7f06 	br	10006200 <__alt_data_end+0xf8006200>
10006c04:	da012a17 	ldw	r8,1192(sp)
10006c08:	df012a15 	stw	fp,1192(sp)
10006c0c:	9839883a 	mov	fp,r19
10006c10:	dcc12b03 	ldbu	r19,1196(sp)
10006c14:	e080080c 	andi	r2,fp,32
10006c18:	dcc12785 	stb	r19,1182(sp)
10006c1c:	10032226 	beq	r2,zero,100078a8 <___vfprintf_internal_r+0x1848>
10006c20:	d9412d17 	ldw	r5,1204(sp)
10006c24:	d9012f17 	ldw	r4,1212(sp)
10006c28:	28800017 	ldw	r2,0(r5)
10006c2c:	2007d7fa 	srai	r3,r4,31
10006c30:	29400104 	addi	r5,r5,4
10006c34:	d9412d15 	stw	r5,1204(sp)
10006c38:	11000015 	stw	r4,0(r2)
10006c3c:	10c00115 	stw	r3,4(r2)
10006c40:	003d4406 	br	10006154 <__alt_data_end+0xf8006154>
10006c44:	da012a17 	ldw	r8,1192(sp)
10006c48:	df012a15 	stw	fp,1192(sp)
10006c4c:	9839883a 	mov	fp,r19
10006c50:	e0c0080c 	andi	r3,fp,32
10006c54:	d8812d17 	ldw	r2,1204(sp)
10006c58:	183f8a1e 	bne	r3,zero,10006a84 <__alt_data_end+0xf8006a84>
10006c5c:	e0c0040c 	andi	r3,fp,16
10006c60:	18031c26 	beq	r3,zero,100078d4 <___vfprintf_internal_r+0x1874>
10006c64:	14800017 	ldw	r18,0(r2)
10006c68:	d8812d17 	ldw	r2,1204(sp)
10006c6c:	002b883a 	mov	r21,zero
10006c70:	9007883a 	mov	r3,r18
10006c74:	10800104 	addi	r2,r2,4
10006c78:	d8812d15 	stw	r2,1204(sp)
10006c7c:	0005883a 	mov	r2,zero
10006c80:	003f8706 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10006c84:	d9412d17 	ldw	r5,1204(sp)
10006c88:	00800c04 	movi	r2,48
10006c8c:	d8812705 	stb	r2,1180(sp)
10006c90:	2c800017 	ldw	r18,0(r5)
10006c94:	00801e04 	movi	r2,120
10006c98:	d8812745 	stb	r2,1181(sp)
10006c9c:	00840074 	movhi	r2,4097
10006ca0:	10872204 	addi	r2,r2,7304
10006ca4:	29400104 	addi	r5,r5,4
10006ca8:	da012a17 	ldw	r8,1192(sp)
10006cac:	d8813b15 	stw	r2,1260(sp)
10006cb0:	df012a15 	stw	fp,1192(sp)
10006cb4:	002b883a 	mov	r21,zero
10006cb8:	9f000094 	ori	fp,r19,2
10006cbc:	d9412d15 	stw	r5,1204(sp)
10006cc0:	00800084 	movi	r2,2
10006cc4:	04001e04 	movi	r16,120
10006cc8:	9007883a 	mov	r3,r18
10006ccc:	003f7406 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10006cd0:	da012a17 	ldw	r8,1192(sp)
10006cd4:	df012a15 	stw	fp,1192(sp)
10006cd8:	9839883a 	mov	fp,r19
10006cdc:	dcc12b03 	ldbu	r19,1196(sp)
10006ce0:	e080080c 	andi	r2,fp,32
10006ce4:	d8c12d17 	ldw	r3,1204(sp)
10006ce8:	dcc12785 	stb	r19,1182(sp)
10006cec:	103e321e 	bne	r2,zero,100065b8 <__alt_data_end+0xf80065b8>
10006cf0:	e080040c 	andi	r2,fp,16
10006cf4:	10031326 	beq	r2,zero,10007944 <___vfprintf_internal_r+0x18e4>
10006cf8:	1c800017 	ldw	r18,0(r3)
10006cfc:	d9412d17 	ldw	r5,1204(sp)
10006d00:	902bd7fa 	srai	r21,r18,31
10006d04:	29400104 	addi	r5,r5,4
10006d08:	d9412d15 	stw	r5,1204(sp)
10006d0c:	a805883a 	mov	r2,r21
10006d10:	003e2f06 	br	100065d0 <__alt_data_end+0xf80065d0>
10006d14:	9cc01014 	ori	r19,r19,64
10006d18:	e005883a 	mov	r2,fp
10006d1c:	e4000007 	ldb	r16,0(fp)
10006d20:	003d3706 	br	10006200 <__alt_data_end+0xf8006200>
10006d24:	d8c12d17 	ldw	r3,1204(sp)
10006d28:	d9012d17 	ldw	r4,1204(sp)
10006d2c:	da012a17 	ldw	r8,1192(sp)
10006d30:	18800017 	ldw	r2,0(r3)
10006d34:	21000104 	addi	r4,r4,4
10006d38:	00c00044 	movi	r3,1
10006d3c:	df012a15 	stw	fp,1192(sp)
10006d40:	d8c12b15 	stw	r3,1196(sp)
10006d44:	9839883a 	mov	fp,r19
10006d48:	d8012785 	stb	zero,1182(sp)
10006d4c:	d8810405 	stb	r2,1040(sp)
10006d50:	d9012d15 	stw	r4,1204(sp)
10006d54:	1823883a 	mov	r17,r3
10006d58:	d8c10404 	addi	r3,sp,1040
10006d5c:	d8013215 	stw	zero,1224(sp)
10006d60:	d8013415 	stw	zero,1232(sp)
10006d64:	d8c13115 	stw	r3,1220(sp)
10006d68:	0005883a 	mov	r2,zero
10006d6c:	003e4306 	br	1000667c <__alt_data_end+0xf800667c>
10006d70:	d8812b07 	ldb	r2,1196(sp)
10006d74:	1002fc1e 	bne	r2,zero,10007968 <___vfprintf_internal_r+0x1908>
10006d78:	00c00804 	movi	r3,32
10006d7c:	d8c12b05 	stb	r3,1196(sp)
10006d80:	e005883a 	mov	r2,fp
10006d84:	e4000007 	ldb	r16,0(fp)
10006d88:	003d1d06 	br	10006200 <__alt_data_end+0xf8006200>
10006d8c:	9cc00054 	ori	r19,r19,1
10006d90:	e005883a 	mov	r2,fp
10006d94:	e4000007 	ldb	r16,0(fp)
10006d98:	003d1906 	br	10006200 <__alt_data_end+0xf8006200>
10006d9c:	d9012d17 	ldw	r4,1204(sp)
10006da0:	d9412d17 	ldw	r5,1204(sp)
10006da4:	21000017 	ldw	r4,0(r4)
10006da8:	28c00104 	addi	r3,r5,4
10006dac:	d9012e15 	stw	r4,1208(sp)
10006db0:	20038c16 	blt	r4,zero,10007be4 <___vfprintf_internal_r+0x1b84>
10006db4:	d8c12d15 	stw	r3,1204(sp)
10006db8:	e005883a 	mov	r2,fp
10006dbc:	e4000007 	ldb	r16,0(fp)
10006dc0:	003d0f06 	br	10006200 <__alt_data_end+0xf8006200>
10006dc4:	00c00ac4 	movi	r3,43
10006dc8:	d8c12b05 	stb	r3,1196(sp)
10006dcc:	e005883a 	mov	r2,fp
10006dd0:	e4000007 	ldb	r16,0(fp)
10006dd4:	003d0a06 	br	10006200 <__alt_data_end+0xf8006200>
10006dd8:	d8c12d17 	ldw	r3,1204(sp)
10006ddc:	d9012d17 	ldw	r4,1204(sp)
10006de0:	da012a17 	ldw	r8,1192(sp)
10006de4:	18c00017 	ldw	r3,0(r3)
10006de8:	df012a15 	stw	fp,1192(sp)
10006dec:	d8012785 	stb	zero,1182(sp)
10006df0:	d8c13115 	stw	r3,1220(sp)
10006df4:	9839883a 	mov	fp,r19
10006df8:	24800104 	addi	r18,r4,4
10006dfc:	1803f726 	beq	r3,zero,10007ddc <___vfprintf_internal_r+0x1d7c>
10006e00:	d9013117 	ldw	r4,1220(sp)
10006e04:	48038916 	blt	r9,zero,10007c2c <___vfprintf_internal_r+0x1bcc>
10006e08:	480d883a 	mov	r6,r9
10006e0c:	000b883a 	mov	r5,zero
10006e10:	da013f15 	stw	r8,1276(sp)
10006e14:	da413e15 	stw	r9,1272(sp)
10006e18:	000b6740 	call	1000b674 <memchr>
10006e1c:	da013f17 	ldw	r8,1276(sp)
10006e20:	da413e17 	ldw	r9,1272(sp)
10006e24:	10045926 	beq	r2,zero,10007f8c <___vfprintf_internal_r+0x1f2c>
10006e28:	d8c13117 	ldw	r3,1220(sp)
10006e2c:	10e3c83a 	sub	r17,r2,r3
10006e30:	4c433516 	blt	r9,r17,10007b08 <___vfprintf_internal_r+0x1aa8>
10006e34:	8805883a 	mov	r2,r17
10006e38:	88038116 	blt	r17,zero,10007c40 <___vfprintf_internal_r+0x1be0>
10006e3c:	dcc12783 	ldbu	r19,1182(sp)
10006e40:	d8812b15 	stw	r2,1196(sp)
10006e44:	dc812d15 	stw	r18,1204(sp)
10006e48:	d8013215 	stw	zero,1224(sp)
10006e4c:	d8013415 	stw	zero,1232(sp)
10006e50:	003e0306 	br	10006660 <__alt_data_end+0xf8006660>
10006e54:	da012a17 	ldw	r8,1192(sp)
10006e58:	df012a15 	stw	fp,1192(sp)
10006e5c:	9839883a 	mov	fp,r19
10006e60:	dcc12b03 	ldbu	r19,1196(sp)
10006e64:	dcc12785 	stb	r19,1182(sp)
10006e68:	803d8f26 	beq	r16,zero,100064a8 <__alt_data_end+0xf80064a8>
10006e6c:	00c00044 	movi	r3,1
10006e70:	d8c12b15 	stw	r3,1196(sp)
10006e74:	dc010405 	stb	r16,1040(sp)
10006e78:	d8012785 	stb	zero,1182(sp)
10006e7c:	003fb506 	br	10006d54 <__alt_data_end+0xf8006d54>
10006e80:	d8c12017 	ldw	r3,1152(sp)
10006e84:	003e3506 	br	1000675c <__alt_data_end+0xf800675c>
10006e88:	10803fcc 	andi	r2,r2,255
10006e8c:	00c00044 	movi	r3,1
10006e90:	10fddc1e 	bne	r2,r3,10006604 <__alt_data_end+0xf8006604>
10006e94:	a800021e 	bne	r21,zero,10006ea0 <___vfprintf_internal_r+0xe40>
10006e98:	00800244 	movi	r2,9
10006e9c:	14801e2e 	bgeu	r2,r18,10006f18 <___vfprintf_internal_r+0xeb8>
10006ea0:	dc012b15 	stw	r16,1196(sp)
10006ea4:	dc410e04 	addi	r17,sp,1080
10006ea8:	9021883a 	mov	r16,r18
10006eac:	da012c15 	stw	r8,1200(sp)
10006eb0:	a825883a 	mov	r18,r21
10006eb4:	482b883a 	mov	r21,r9
10006eb8:	8009883a 	mov	r4,r16
10006ebc:	900b883a 	mov	r5,r18
10006ec0:	01800284 	movi	r6,10
10006ec4:	000f883a 	mov	r7,zero
10006ec8:	0002fbc0 	call	10002fbc <__umoddi3>
10006ecc:	10800c04 	addi	r2,r2,48
10006ed0:	8c7fffc4 	addi	r17,r17,-1
10006ed4:	8009883a 	mov	r4,r16
10006ed8:	900b883a 	mov	r5,r18
10006edc:	01800284 	movi	r6,10
10006ee0:	000f883a 	mov	r7,zero
10006ee4:	88800005 	stb	r2,0(r17)
10006ee8:	000297c0 	call	1000297c <__udivdi3>
10006eec:	1021883a 	mov	r16,r2
10006ef0:	10c4b03a 	or	r2,r2,r3
10006ef4:	1825883a 	mov	r18,r3
10006ef8:	103fef1e 	bne	r2,zero,10006eb8 <__alt_data_end+0xf8006eb8>
10006efc:	d9012817 	ldw	r4,1184(sp)
10006f00:	dc413115 	stw	r17,1220(sp)
10006f04:	dc012b17 	ldw	r16,1196(sp)
10006f08:	da012c17 	ldw	r8,1200(sp)
10006f0c:	a813883a 	mov	r9,r21
10006f10:	2463c83a 	sub	r17,r4,r17
10006f14:	003dcd06 	br	1000664c <__alt_data_end+0xf800664c>
10006f18:	94800c04 	addi	r18,r18,48
10006f1c:	d8c10dc4 	addi	r3,sp,1079
10006f20:	dc810dc5 	stb	r18,1079(sp)
10006f24:	dc413c17 	ldw	r17,1264(sp)
10006f28:	d8c13115 	stw	r3,1220(sp)
10006f2c:	003dc706 	br	1000664c <__alt_data_end+0xf800664c>
10006f30:	00801944 	movi	r2,101
10006f34:	1400720e 	bge	r2,r16,10007100 <___vfprintf_internal_r+0x10a0>
10006f38:	d9013717 	ldw	r4,1244(sp)
10006f3c:	d9413917 	ldw	r5,1252(sp)
10006f40:	000d883a 	mov	r6,zero
10006f44:	000f883a 	mov	r7,zero
10006f48:	d8c13d15 	stw	r3,1268(sp)
10006f4c:	da013f15 	stw	r8,1276(sp)
10006f50:	00049480 	call	10004948 <__eqdf2>
10006f54:	d8c13d17 	ldw	r3,1268(sp)
10006f58:	da013f17 	ldw	r8,1276(sp)
10006f5c:	1000f41e 	bne	r2,zero,10007330 <___vfprintf_internal_r+0x12d0>
10006f60:	d8811f17 	ldw	r2,1148(sp)
10006f64:	01040074 	movhi	r4,4097
10006f68:	21072904 	addi	r4,r4,7332
10006f6c:	18c00044 	addi	r3,r3,1
10006f70:	10800044 	addi	r2,r2,1
10006f74:	41000015 	stw	r4,0(r8)
10006f78:	01000044 	movi	r4,1
10006f7c:	41000115 	stw	r4,4(r8)
10006f80:	d8c12015 	stw	r3,1152(sp)
10006f84:	d8811f15 	stw	r2,1148(sp)
10006f88:	010001c4 	movi	r4,7
10006f8c:	20828d16 	blt	r4,r2,100079c4 <___vfprintf_internal_r+0x1964>
10006f90:	42000204 	addi	r8,r8,8
10006f94:	d8812617 	ldw	r2,1176(sp)
10006f98:	d9413317 	ldw	r5,1228(sp)
10006f9c:	11400216 	blt	r2,r5,10006fa8 <___vfprintf_internal_r+0xf48>
10006fa0:	e080004c 	andi	r2,fp,1
10006fa4:	103e4126 	beq	r2,zero,100068ac <__alt_data_end+0xf80068ac>
10006fa8:	d8813817 	ldw	r2,1248(sp)
10006fac:	d9013517 	ldw	r4,1236(sp)
10006fb0:	d9413817 	ldw	r5,1248(sp)
10006fb4:	1887883a 	add	r3,r3,r2
10006fb8:	d8811f17 	ldw	r2,1148(sp)
10006fbc:	41000015 	stw	r4,0(r8)
10006fc0:	41400115 	stw	r5,4(r8)
10006fc4:	10800044 	addi	r2,r2,1
10006fc8:	d8c12015 	stw	r3,1152(sp)
10006fcc:	d8811f15 	stw	r2,1148(sp)
10006fd0:	010001c4 	movi	r4,7
10006fd4:	20830916 	blt	r4,r2,10007bfc <___vfprintf_internal_r+0x1b9c>
10006fd8:	42000204 	addi	r8,r8,8
10006fdc:	d8813317 	ldw	r2,1228(sp)
10006fe0:	143fffc4 	addi	r16,r2,-1
10006fe4:	043e310e 	bge	zero,r16,100068ac <__alt_data_end+0xf80068ac>
10006fe8:	04400404 	movi	r17,16
10006fec:	d8811f17 	ldw	r2,1148(sp)
10006ff0:	8c007e0e 	bge	r17,r16,100071ec <___vfprintf_internal_r+0x118c>
10006ff4:	01440074 	movhi	r5,4097
10006ff8:	29472984 	addi	r5,r5,7334
10006ffc:	d9412c15 	stw	r5,1200(sp)
10007000:	04c001c4 	movi	r19,7
10007004:	00000306 	br	10007014 <___vfprintf_internal_r+0xfb4>
10007008:	42000204 	addi	r8,r8,8
1000700c:	843ffc04 	addi	r16,r16,-16
10007010:	8c00790e 	bge	r17,r16,100071f8 <___vfprintf_internal_r+0x1198>
10007014:	18c00404 	addi	r3,r3,16
10007018:	10800044 	addi	r2,r2,1
1000701c:	45000015 	stw	r20,0(r8)
10007020:	44400115 	stw	r17,4(r8)
10007024:	d8c12015 	stw	r3,1152(sp)
10007028:	d8811f15 	stw	r2,1148(sp)
1000702c:	98bff60e 	bge	r19,r2,10007008 <__alt_data_end+0xf8007008>
10007030:	b809883a 	mov	r4,r23
10007034:	b00b883a 	mov	r5,r22
10007038:	d9811e04 	addi	r6,sp,1144
1000703c:	000d42c0 	call	1000d42c <__sprint_r>
10007040:	103d1f1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007044:	d8c12017 	ldw	r3,1152(sp)
10007048:	d8811f17 	ldw	r2,1148(sp)
1000704c:	da000404 	addi	r8,sp,16
10007050:	003fee06 	br	1000700c <__alt_data_end+0xf800700c>
10007054:	d9412e17 	ldw	r5,1208(sp)
10007058:	d8812b17 	ldw	r2,1196(sp)
1000705c:	28a7c83a 	sub	r19,r5,r2
10007060:	04fddc0e 	bge	zero,r19,100067d4 <__alt_data_end+0xf80067d4>
10007064:	05400404 	movi	r21,16
10007068:	d8811f17 	ldw	r2,1148(sp)
1000706c:	acc3870e 	bge	r21,r19,10007e8c <___vfprintf_internal_r+0x1e2c>
10007070:	01440074 	movhi	r5,4097
10007074:	29472984 	addi	r5,r5,7334
10007078:	d9412c15 	stw	r5,1200(sp)
1000707c:	048001c4 	movi	r18,7
10007080:	00000306 	br	10007090 <___vfprintf_internal_r+0x1030>
10007084:	9cfffc04 	addi	r19,r19,-16
10007088:	42000204 	addi	r8,r8,8
1000708c:	acc0110e 	bge	r21,r19,100070d4 <___vfprintf_internal_r+0x1074>
10007090:	18c00404 	addi	r3,r3,16
10007094:	10800044 	addi	r2,r2,1
10007098:	45000015 	stw	r20,0(r8)
1000709c:	45400115 	stw	r21,4(r8)
100070a0:	d8c12015 	stw	r3,1152(sp)
100070a4:	d8811f15 	stw	r2,1148(sp)
100070a8:	90bff60e 	bge	r18,r2,10007084 <__alt_data_end+0xf8007084>
100070ac:	b809883a 	mov	r4,r23
100070b0:	b00b883a 	mov	r5,r22
100070b4:	d9811e04 	addi	r6,sp,1144
100070b8:	000d42c0 	call	1000d42c <__sprint_r>
100070bc:	103d001e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100070c0:	9cfffc04 	addi	r19,r19,-16
100070c4:	d8c12017 	ldw	r3,1152(sp)
100070c8:	d8811f17 	ldw	r2,1148(sp)
100070cc:	da000404 	addi	r8,sp,16
100070d0:	acffef16 	blt	r21,r19,10007090 <__alt_data_end+0xf8007090>
100070d4:	d9012c17 	ldw	r4,1200(sp)
100070d8:	1cc7883a 	add	r3,r3,r19
100070dc:	10800044 	addi	r2,r2,1
100070e0:	41000015 	stw	r4,0(r8)
100070e4:	44c00115 	stw	r19,4(r8)
100070e8:	d8c12015 	stw	r3,1152(sp)
100070ec:	d8811f15 	stw	r2,1148(sp)
100070f0:	010001c4 	movi	r4,7
100070f4:	20817816 	blt	r4,r2,100076d8 <___vfprintf_internal_r+0x1678>
100070f8:	42000204 	addi	r8,r8,8
100070fc:	003db506 	br	100067d4 <__alt_data_end+0xf80067d4>
10007100:	d9413317 	ldw	r5,1228(sp)
10007104:	00800044 	movi	r2,1
10007108:	18c00044 	addi	r3,r3,1
1000710c:	11413e0e 	bge	r2,r5,10007608 <___vfprintf_internal_r+0x15a8>
10007110:	dc011f17 	ldw	r16,1148(sp)
10007114:	d8813117 	ldw	r2,1220(sp)
10007118:	d8c12015 	stw	r3,1152(sp)
1000711c:	84000044 	addi	r16,r16,1
10007120:	40800015 	stw	r2,0(r8)
10007124:	00800044 	movi	r2,1
10007128:	40800115 	stw	r2,4(r8)
1000712c:	dc011f15 	stw	r16,1148(sp)
10007130:	008001c4 	movi	r2,7
10007134:	14015616 	blt	r2,r16,10007690 <___vfprintf_internal_r+0x1630>
10007138:	42000204 	addi	r8,r8,8
1000713c:	d9013817 	ldw	r4,1248(sp)
10007140:	d9413517 	ldw	r5,1236(sp)
10007144:	84000044 	addi	r16,r16,1
10007148:	1907883a 	add	r3,r3,r4
1000714c:	41400015 	stw	r5,0(r8)
10007150:	41000115 	stw	r4,4(r8)
10007154:	d8c12015 	stw	r3,1152(sp)
10007158:	dc011f15 	stw	r16,1148(sp)
1000715c:	008001c4 	movi	r2,7
10007160:	14015416 	blt	r2,r16,100076b4 <___vfprintf_internal_r+0x1654>
10007164:	44400204 	addi	r17,r8,8
10007168:	d9013717 	ldw	r4,1244(sp)
1000716c:	d9413917 	ldw	r5,1252(sp)
10007170:	000d883a 	mov	r6,zero
10007174:	000f883a 	mov	r7,zero
10007178:	d8c13d15 	stw	r3,1268(sp)
1000717c:	00049480 	call	10004948 <__eqdf2>
10007180:	d8c13d17 	ldw	r3,1268(sp)
10007184:	1000a726 	beq	r2,zero,10007424 <___vfprintf_internal_r+0x13c4>
10007188:	d9013317 	ldw	r4,1228(sp)
1000718c:	d9413117 	ldw	r5,1220(sp)
10007190:	84000044 	addi	r16,r16,1
10007194:	20bfffc4 	addi	r2,r4,-1
10007198:	1887883a 	add	r3,r3,r2
1000719c:	29000044 	addi	r4,r5,1
100071a0:	88800115 	stw	r2,4(r17)
100071a4:	89000015 	stw	r4,0(r17)
100071a8:	d8c12015 	stw	r3,1152(sp)
100071ac:	dc011f15 	stw	r16,1148(sp)
100071b0:	008001c4 	movi	r2,7
100071b4:	14012d16 	blt	r2,r16,1000766c <___vfprintf_internal_r+0x160c>
100071b8:	8c400204 	addi	r17,r17,8
100071bc:	d9413a17 	ldw	r5,1256(sp)
100071c0:	dcc122c4 	addi	r19,sp,1163
100071c4:	84000044 	addi	r16,r16,1
100071c8:	28c7883a 	add	r3,r5,r3
100071cc:	8cc00015 	stw	r19,0(r17)
100071d0:	89400115 	stw	r5,4(r17)
100071d4:	d8c12015 	stw	r3,1152(sp)
100071d8:	dc011f15 	stw	r16,1148(sp)
100071dc:	008001c4 	movi	r2,7
100071e0:	14000e16 	blt	r2,r16,1000721c <___vfprintf_internal_r+0x11bc>
100071e4:	8a000204 	addi	r8,r17,8
100071e8:	003db006 	br	100068ac <__alt_data_end+0xf80068ac>
100071ec:	01040074 	movhi	r4,4097
100071f0:	21072984 	addi	r4,r4,7334
100071f4:	d9012c15 	stw	r4,1200(sp)
100071f8:	d9012c17 	ldw	r4,1200(sp)
100071fc:	1c07883a 	add	r3,r3,r16
10007200:	44000115 	stw	r16,4(r8)
10007204:	41000015 	stw	r4,0(r8)
10007208:	10800044 	addi	r2,r2,1
1000720c:	d8c12015 	stw	r3,1152(sp)
10007210:	d8811f15 	stw	r2,1148(sp)
10007214:	010001c4 	movi	r4,7
10007218:	20bda30e 	bge	r4,r2,100068a8 <__alt_data_end+0xf80068a8>
1000721c:	b809883a 	mov	r4,r23
10007220:	b00b883a 	mov	r5,r22
10007224:	d9811e04 	addi	r6,sp,1144
10007228:	000d42c0 	call	1000d42c <__sprint_r>
1000722c:	103ca41e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007230:	d8c12017 	ldw	r3,1152(sp)
10007234:	da000404 	addi	r8,sp,16
10007238:	003d9c06 	br	100068ac <__alt_data_end+0xf80068ac>
1000723c:	b809883a 	mov	r4,r23
10007240:	b00b883a 	mov	r5,r22
10007244:	d9811e04 	addi	r6,sp,1144
10007248:	000d42c0 	call	1000d42c <__sprint_r>
1000724c:	103dd226 	beq	r2,zero,10006998 <__alt_data_end+0xf8006998>
10007250:	003c9b06 	br	100064c0 <__alt_data_end+0xf80064c0>
10007254:	10803fcc 	andi	r2,r2,255
10007258:	1000311e 	bne	r2,zero,10007320 <___vfprintf_internal_r+0x12c0>
1000725c:	e080004c 	andi	r2,fp,1
10007260:	10002f26 	beq	r2,zero,10007320 <___vfprintf_internal_r+0x12c0>
10007264:	00800c04 	movi	r2,48
10007268:	d8c10dc4 	addi	r3,sp,1079
1000726c:	d8810dc5 	stb	r2,1079(sp)
10007270:	dc413c17 	ldw	r17,1264(sp)
10007274:	d8c13115 	stw	r3,1220(sp)
10007278:	003cf406 	br	1000664c <__alt_data_end+0xf800664c>
1000727c:	b809883a 	mov	r4,r23
10007280:	b00b883a 	mov	r5,r22
10007284:	d9811e04 	addi	r6,sp,1144
10007288:	000d42c0 	call	1000d42c <__sprint_r>
1000728c:	103c8c1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007290:	d8c12017 	ldw	r3,1152(sp)
10007294:	da000404 	addi	r8,sp,16
10007298:	003d7706 	br	10006878 <__alt_data_end+0xf8006878>
1000729c:	b809883a 	mov	r4,r23
100072a0:	b00b883a 	mov	r5,r22
100072a4:	d9811e04 	addi	r6,sp,1144
100072a8:	000d42c0 	call	1000d42c <__sprint_r>
100072ac:	103c841e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100072b0:	d8c12017 	ldw	r3,1152(sp)
100072b4:	da000404 	addi	r8,sp,16
100072b8:	003d3506 	br	10006790 <__alt_data_end+0xf8006790>
100072bc:	b809883a 	mov	r4,r23
100072c0:	b00b883a 	mov	r5,r22
100072c4:	d9811e04 	addi	r6,sp,1144
100072c8:	000d42c0 	call	1000d42c <__sprint_r>
100072cc:	103c7c1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100072d0:	d8c12017 	ldw	r3,1152(sp)
100072d4:	da000404 	addi	r8,sp,16
100072d8:	003d3b06 	br	100067c8 <__alt_data_end+0xf80067c8>
100072dc:	d9413b17 	ldw	r5,1260(sp)
100072e0:	d8c10e04 	addi	r3,sp,1080
100072e4:	908003cc 	andi	r2,r18,15
100072e8:	a808973a 	slli	r4,r21,28
100072ec:	2885883a 	add	r2,r5,r2
100072f0:	9024d13a 	srli	r18,r18,4
100072f4:	10800003 	ldbu	r2,0(r2)
100072f8:	a82ad13a 	srli	r21,r21,4
100072fc:	18ffffc4 	addi	r3,r3,-1
10007300:	24a4b03a 	or	r18,r4,r18
10007304:	18800005 	stb	r2,0(r3)
10007308:	9544b03a 	or	r2,r18,r21
1000730c:	103ff51e 	bne	r2,zero,100072e4 <__alt_data_end+0xf80072e4>
10007310:	d9412817 	ldw	r5,1184(sp)
10007314:	d8c13115 	stw	r3,1220(sp)
10007318:	28e3c83a 	sub	r17,r5,r3
1000731c:	003ccb06 	br	1000664c <__alt_data_end+0xf800664c>
10007320:	d8c10e04 	addi	r3,sp,1080
10007324:	0023883a 	mov	r17,zero
10007328:	d8c13115 	stw	r3,1220(sp)
1000732c:	003cc706 	br	1000664c <__alt_data_end+0xf800664c>
10007330:	dc012617 	ldw	r16,1176(sp)
10007334:	0401ab0e 	bge	zero,r16,100079e4 <___vfprintf_internal_r+0x1984>
10007338:	d8813317 	ldw	r2,1228(sp)
1000733c:	d9413117 	ldw	r5,1220(sp)
10007340:	d9013417 	ldw	r4,1232(sp)
10007344:	1023883a 	mov	r17,r2
10007348:	28a1883a 	add	r16,r5,r2
1000734c:	2080010e 	bge	r4,r2,10007354 <___vfprintf_internal_r+0x12f4>
10007350:	2023883a 	mov	r17,r4
10007354:	04400b0e 	bge	zero,r17,10007384 <___vfprintf_internal_r+0x1324>
10007358:	d8811f17 	ldw	r2,1148(sp)
1000735c:	d9413117 	ldw	r5,1220(sp)
10007360:	1c47883a 	add	r3,r3,r17
10007364:	10800044 	addi	r2,r2,1
10007368:	41400015 	stw	r5,0(r8)
1000736c:	44400115 	stw	r17,4(r8)
10007370:	d8c12015 	stw	r3,1152(sp)
10007374:	d8811f15 	stw	r2,1148(sp)
10007378:	010001c4 	movi	r4,7
1000737c:	20826716 	blt	r4,r2,10007d1c <___vfprintf_internal_r+0x1cbc>
10007380:	42000204 	addi	r8,r8,8
10007384:	88026316 	blt	r17,zero,10007d14 <___vfprintf_internal_r+0x1cb4>
10007388:	d8813417 	ldw	r2,1232(sp)
1000738c:	1463c83a 	sub	r17,r2,r17
10007390:	0440590e 	bge	zero,r17,100074f8 <___vfprintf_internal_r+0x1498>
10007394:	04c00404 	movi	r19,16
10007398:	d8811f17 	ldw	r2,1148(sp)
1000739c:	9c41770e 	bge	r19,r17,1000797c <___vfprintf_internal_r+0x191c>
100073a0:	01440074 	movhi	r5,4097
100073a4:	29472984 	addi	r5,r5,7334
100073a8:	d9412c15 	stw	r5,1200(sp)
100073ac:	054001c4 	movi	r21,7
100073b0:	00000306 	br	100073c0 <___vfprintf_internal_r+0x1360>
100073b4:	42000204 	addi	r8,r8,8
100073b8:	8c7ffc04 	addi	r17,r17,-16
100073bc:	9c41720e 	bge	r19,r17,10007988 <___vfprintf_internal_r+0x1928>
100073c0:	18c00404 	addi	r3,r3,16
100073c4:	10800044 	addi	r2,r2,1
100073c8:	45000015 	stw	r20,0(r8)
100073cc:	44c00115 	stw	r19,4(r8)
100073d0:	d8c12015 	stw	r3,1152(sp)
100073d4:	d8811f15 	stw	r2,1148(sp)
100073d8:	a8bff60e 	bge	r21,r2,100073b4 <__alt_data_end+0xf80073b4>
100073dc:	b809883a 	mov	r4,r23
100073e0:	b00b883a 	mov	r5,r22
100073e4:	d9811e04 	addi	r6,sp,1144
100073e8:	000d42c0 	call	1000d42c <__sprint_r>
100073ec:	103c341e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100073f0:	d8c12017 	ldw	r3,1152(sp)
100073f4:	d8811f17 	ldw	r2,1148(sp)
100073f8:	da000404 	addi	r8,sp,16
100073fc:	003fee06 	br	100073b8 <__alt_data_end+0xf80073b8>
10007400:	b809883a 	mov	r4,r23
10007404:	b00b883a 	mov	r5,r22
10007408:	d9811e04 	addi	r6,sp,1144
1000740c:	000d42c0 	call	1000d42c <__sprint_r>
10007410:	103c2b1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007414:	d8c12017 	ldw	r3,1152(sp)
10007418:	d8812787 	ldb	r2,1182(sp)
1000741c:	da000404 	addi	r8,sp,16
10007420:	003cce06 	br	1000675c <__alt_data_end+0xf800675c>
10007424:	d8813317 	ldw	r2,1228(sp)
10007428:	14ffffc4 	addi	r19,r2,-1
1000742c:	04ff630e 	bge	zero,r19,100071bc <__alt_data_end+0xf80071bc>
10007430:	05400404 	movi	r21,16
10007434:	acc0810e 	bge	r21,r19,1000763c <___vfprintf_internal_r+0x15dc>
10007438:	01440074 	movhi	r5,4097
1000743c:	29472984 	addi	r5,r5,7334
10007440:	d9412c15 	stw	r5,1200(sp)
10007444:	01c001c4 	movi	r7,7
10007448:	00000306 	br	10007458 <___vfprintf_internal_r+0x13f8>
1000744c:	8c400204 	addi	r17,r17,8
10007450:	9cfffc04 	addi	r19,r19,-16
10007454:	acc07c0e 	bge	r21,r19,10007648 <___vfprintf_internal_r+0x15e8>
10007458:	18c00404 	addi	r3,r3,16
1000745c:	84000044 	addi	r16,r16,1
10007460:	8d000015 	stw	r20,0(r17)
10007464:	8d400115 	stw	r21,4(r17)
10007468:	d8c12015 	stw	r3,1152(sp)
1000746c:	dc011f15 	stw	r16,1148(sp)
10007470:	3c3ff60e 	bge	r7,r16,1000744c <__alt_data_end+0xf800744c>
10007474:	b809883a 	mov	r4,r23
10007478:	b00b883a 	mov	r5,r22
1000747c:	d9811e04 	addi	r6,sp,1144
10007480:	d9c13d15 	stw	r7,1268(sp)
10007484:	000d42c0 	call	1000d42c <__sprint_r>
10007488:	d9c13d17 	ldw	r7,1268(sp)
1000748c:	103c0c1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007490:	d8c12017 	ldw	r3,1152(sp)
10007494:	dc011f17 	ldw	r16,1148(sp)
10007498:	dc400404 	addi	r17,sp,16
1000749c:	003fec06 	br	10007450 <__alt_data_end+0xf8007450>
100074a0:	00800084 	movi	r2,2
100074a4:	9546b03a 	or	r3,r18,r21
100074a8:	003d7d06 	br	10006aa0 <__alt_data_end+0xf8006aa0>
100074ac:	10803fcc 	andi	r2,r2,255
100074b0:	1080201c 	xori	r2,r2,128
100074b4:	10bfe004 	addi	r2,r2,-128
100074b8:	01000c04 	movi	r4,48
100074bc:	1101d726 	beq	r2,r4,10007c1c <___vfprintf_internal_r+0x1bbc>
100074c0:	d9413117 	ldw	r5,1220(sp)
100074c4:	d8812817 	ldw	r2,1184(sp)
100074c8:	193fffc5 	stb	r4,-1(r3)
100074cc:	297fffc4 	addi	r5,r5,-1
100074d0:	d9413115 	stw	r5,1220(sp)
100074d4:	1163c83a 	sub	r17,r2,r5
100074d8:	003c5c06 	br	1000664c <__alt_data_end+0xf800664c>
100074dc:	b809883a 	mov	r4,r23
100074e0:	b00b883a 	mov	r5,r22
100074e4:	d9811e04 	addi	r6,sp,1144
100074e8:	000d42c0 	call	1000d42c <__sprint_r>
100074ec:	103bf41e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100074f0:	d8c12017 	ldw	r3,1152(sp)
100074f4:	da000404 	addi	r8,sp,16
100074f8:	d9413117 	ldw	r5,1220(sp)
100074fc:	d9013417 	ldw	r4,1232(sp)
10007500:	d8812617 	ldw	r2,1176(sp)
10007504:	2923883a 	add	r17,r5,r4
10007508:	d9413317 	ldw	r5,1228(sp)
1000750c:	11400216 	blt	r2,r5,10007518 <___vfprintf_internal_r+0x14b8>
10007510:	e100004c 	andi	r4,fp,1
10007514:	20000d26 	beq	r4,zero,1000754c <___vfprintf_internal_r+0x14ec>
10007518:	d9013817 	ldw	r4,1248(sp)
1000751c:	d9413517 	ldw	r5,1236(sp)
10007520:	1907883a 	add	r3,r3,r4
10007524:	d9011f17 	ldw	r4,1148(sp)
10007528:	41400015 	stw	r5,0(r8)
1000752c:	d9413817 	ldw	r5,1248(sp)
10007530:	21000044 	addi	r4,r4,1
10007534:	d8c12015 	stw	r3,1152(sp)
10007538:	41400115 	stw	r5,4(r8)
1000753c:	d9011f15 	stw	r4,1148(sp)
10007540:	014001c4 	movi	r5,7
10007544:	2901fd16 	blt	r5,r4,10007d3c <___vfprintf_internal_r+0x1cdc>
10007548:	42000204 	addi	r8,r8,8
1000754c:	d9013317 	ldw	r4,1228(sp)
10007550:	2085c83a 	sub	r2,r4,r2
10007554:	8449c83a 	sub	r4,r16,r17
10007558:	1021883a 	mov	r16,r2
1000755c:	2080010e 	bge	r4,r2,10007564 <___vfprintf_internal_r+0x1504>
10007560:	2021883a 	mov	r16,r4
10007564:	04000a0e 	bge	zero,r16,10007590 <___vfprintf_internal_r+0x1530>
10007568:	d9011f17 	ldw	r4,1148(sp)
1000756c:	1c07883a 	add	r3,r3,r16
10007570:	44400015 	stw	r17,0(r8)
10007574:	21000044 	addi	r4,r4,1
10007578:	44000115 	stw	r16,4(r8)
1000757c:	d8c12015 	stw	r3,1152(sp)
10007580:	d9011f15 	stw	r4,1148(sp)
10007584:	014001c4 	movi	r5,7
10007588:	29020916 	blt	r5,r4,10007db0 <___vfprintf_internal_r+0x1d50>
1000758c:	42000204 	addi	r8,r8,8
10007590:	80020116 	blt	r16,zero,10007d98 <___vfprintf_internal_r+0x1d38>
10007594:	1421c83a 	sub	r16,r2,r16
10007598:	043cc40e 	bge	zero,r16,100068ac <__alt_data_end+0xf80068ac>
1000759c:	04400404 	movi	r17,16
100075a0:	d8811f17 	ldw	r2,1148(sp)
100075a4:	8c3f110e 	bge	r17,r16,100071ec <__alt_data_end+0xf80071ec>
100075a8:	01440074 	movhi	r5,4097
100075ac:	29472984 	addi	r5,r5,7334
100075b0:	d9412c15 	stw	r5,1200(sp)
100075b4:	04c001c4 	movi	r19,7
100075b8:	00000306 	br	100075c8 <___vfprintf_internal_r+0x1568>
100075bc:	42000204 	addi	r8,r8,8
100075c0:	843ffc04 	addi	r16,r16,-16
100075c4:	8c3f0c0e 	bge	r17,r16,100071f8 <__alt_data_end+0xf80071f8>
100075c8:	18c00404 	addi	r3,r3,16
100075cc:	10800044 	addi	r2,r2,1
100075d0:	45000015 	stw	r20,0(r8)
100075d4:	44400115 	stw	r17,4(r8)
100075d8:	d8c12015 	stw	r3,1152(sp)
100075dc:	d8811f15 	stw	r2,1148(sp)
100075e0:	98bff60e 	bge	r19,r2,100075bc <__alt_data_end+0xf80075bc>
100075e4:	b809883a 	mov	r4,r23
100075e8:	b00b883a 	mov	r5,r22
100075ec:	d9811e04 	addi	r6,sp,1144
100075f0:	000d42c0 	call	1000d42c <__sprint_r>
100075f4:	103bb21e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100075f8:	d8c12017 	ldw	r3,1152(sp)
100075fc:	d8811f17 	ldw	r2,1148(sp)
10007600:	da000404 	addi	r8,sp,16
10007604:	003fee06 	br	100075c0 <__alt_data_end+0xf80075c0>
10007608:	e088703a 	and	r4,fp,r2
1000760c:	203ec01e 	bne	r4,zero,10007110 <__alt_data_end+0xf8007110>
10007610:	dc011f17 	ldw	r16,1148(sp)
10007614:	d9013117 	ldw	r4,1220(sp)
10007618:	40800115 	stw	r2,4(r8)
1000761c:	84000044 	addi	r16,r16,1
10007620:	41000015 	stw	r4,0(r8)
10007624:	d8c12015 	stw	r3,1152(sp)
10007628:	dc011f15 	stw	r16,1148(sp)
1000762c:	008001c4 	movi	r2,7
10007630:	14000e16 	blt	r2,r16,1000766c <___vfprintf_internal_r+0x160c>
10007634:	44400204 	addi	r17,r8,8
10007638:	003ee006 	br	100071bc <__alt_data_end+0xf80071bc>
1000763c:	01040074 	movhi	r4,4097
10007640:	21072984 	addi	r4,r4,7334
10007644:	d9012c15 	stw	r4,1200(sp)
10007648:	d8812c17 	ldw	r2,1200(sp)
1000764c:	1cc7883a 	add	r3,r3,r19
10007650:	84000044 	addi	r16,r16,1
10007654:	88800015 	stw	r2,0(r17)
10007658:	8cc00115 	stw	r19,4(r17)
1000765c:	d8c12015 	stw	r3,1152(sp)
10007660:	dc011f15 	stw	r16,1148(sp)
10007664:	008001c4 	movi	r2,7
10007668:	143ed30e 	bge	r2,r16,100071b8 <__alt_data_end+0xf80071b8>
1000766c:	b809883a 	mov	r4,r23
10007670:	b00b883a 	mov	r5,r22
10007674:	d9811e04 	addi	r6,sp,1144
10007678:	000d42c0 	call	1000d42c <__sprint_r>
1000767c:	103b901e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007680:	d8c12017 	ldw	r3,1152(sp)
10007684:	dc011f17 	ldw	r16,1148(sp)
10007688:	dc400404 	addi	r17,sp,16
1000768c:	003ecb06 	br	100071bc <__alt_data_end+0xf80071bc>
10007690:	b809883a 	mov	r4,r23
10007694:	b00b883a 	mov	r5,r22
10007698:	d9811e04 	addi	r6,sp,1144
1000769c:	000d42c0 	call	1000d42c <__sprint_r>
100076a0:	103b871e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100076a4:	d8c12017 	ldw	r3,1152(sp)
100076a8:	dc011f17 	ldw	r16,1148(sp)
100076ac:	da000404 	addi	r8,sp,16
100076b0:	003ea206 	br	1000713c <__alt_data_end+0xf800713c>
100076b4:	b809883a 	mov	r4,r23
100076b8:	b00b883a 	mov	r5,r22
100076bc:	d9811e04 	addi	r6,sp,1144
100076c0:	000d42c0 	call	1000d42c <__sprint_r>
100076c4:	103b7e1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100076c8:	d8c12017 	ldw	r3,1152(sp)
100076cc:	dc011f17 	ldw	r16,1148(sp)
100076d0:	dc400404 	addi	r17,sp,16
100076d4:	003ea406 	br	10007168 <__alt_data_end+0xf8007168>
100076d8:	b809883a 	mov	r4,r23
100076dc:	b00b883a 	mov	r5,r22
100076e0:	d9811e04 	addi	r6,sp,1144
100076e4:	000d42c0 	call	1000d42c <__sprint_r>
100076e8:	103b751e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100076ec:	d8c12017 	ldw	r3,1152(sp)
100076f0:	da000404 	addi	r8,sp,16
100076f4:	003c3706 	br	100067d4 <__alt_data_end+0xf80067d4>
100076f8:	04a5c83a 	sub	r18,zero,r18
100076fc:	9004c03a 	cmpne	r2,r18,zero
10007700:	056bc83a 	sub	r21,zero,r21
10007704:	a8abc83a 	sub	r21,r21,r2
10007708:	04c00b44 	movi	r19,45
1000770c:	dcc12785 	stb	r19,1182(sp)
10007710:	da413215 	stw	r9,1224(sp)
10007714:	00800044 	movi	r2,1
10007718:	9546b03a 	or	r3,r18,r21
1000771c:	003bb106 	br	100065e4 <__alt_data_end+0xf80065e4>
10007720:	da013f15 	stw	r8,1276(sp)
10007724:	da413e15 	stw	r9,1272(sp)
10007728:	000241c0 	call	1000241c <__fpclassifyd>
1000772c:	da013f17 	ldw	r8,1276(sp)
10007730:	da413e17 	ldw	r9,1272(sp)
10007734:	1000e526 	beq	r2,zero,10007acc <___vfprintf_internal_r+0x1a6c>
10007738:	04fff7c4 	movi	r19,-33
1000773c:	00bfffc4 	movi	r2,-1
10007740:	84e6703a 	and	r19,r16,r19
10007744:	48822926 	beq	r9,r2,10007fec <___vfprintf_internal_r+0x1f8c>
10007748:	008011c4 	movi	r2,71
1000774c:	98821626 	beq	r19,r2,10007fa8 <___vfprintf_internal_r+0x1f48>
10007750:	d9013917 	ldw	r4,1252(sp)
10007754:	e0c04014 	ori	r3,fp,256
10007758:	d8c12d15 	stw	r3,1204(sp)
1000775c:	20021f16 	blt	r4,zero,10007fdc <___vfprintf_internal_r+0x1f7c>
10007760:	dc413917 	ldw	r17,1252(sp)
10007764:	d8012b05 	stb	zero,1196(sp)
10007768:	00801984 	movi	r2,102
1000776c:	80814d26 	beq	r16,r2,10007ca4 <___vfprintf_internal_r+0x1c44>
10007770:	00801184 	movi	r2,70
10007774:	80814b26 	beq	r16,r2,10007ca4 <___vfprintf_internal_r+0x1c44>
10007778:	00801144 	movi	r2,69
1000777c:	98821d26 	beq	r19,r2,10007ff4 <___vfprintf_internal_r+0x1f94>
10007780:	482b883a 	mov	r21,r9
10007784:	d8812604 	addi	r2,sp,1176
10007788:	d8800115 	stw	r2,4(sp)
1000778c:	d9413717 	ldw	r5,1244(sp)
10007790:	d8812504 	addi	r2,sp,1172
10007794:	d8800215 	stw	r2,8(sp)
10007798:	d8812104 	addi	r2,sp,1156
1000779c:	dd400015 	stw	r21,0(sp)
100077a0:	d8800315 	stw	r2,12(sp)
100077a4:	b809883a 	mov	r4,r23
100077a8:	880d883a 	mov	r6,r17
100077ac:	01c00084 	movi	r7,2
100077b0:	da013f15 	stw	r8,1276(sp)
100077b4:	da413e15 	stw	r9,1272(sp)
100077b8:	00084d80 	call	100084d8 <_dtoa_r>
100077bc:	d8813115 	stw	r2,1220(sp)
100077c0:	008019c4 	movi	r2,103
100077c4:	da013f17 	ldw	r8,1276(sp)
100077c8:	da413e17 	ldw	r9,1272(sp)
100077cc:	80800226 	beq	r16,r2,100077d8 <___vfprintf_internal_r+0x1778>
100077d0:	008011c4 	movi	r2,71
100077d4:	8081451e 	bne	r16,r2,10007cec <___vfprintf_internal_r+0x1c8c>
100077d8:	e080004c 	andi	r2,fp,1
100077dc:	10021e26 	beq	r2,zero,10008058 <___vfprintf_internal_r+0x1ff8>
100077e0:	d8c13117 	ldw	r3,1220(sp)
100077e4:	1d55883a 	add	r10,r3,r21
100077e8:	d9013717 	ldw	r4,1244(sp)
100077ec:	880b883a 	mov	r5,r17
100077f0:	000d883a 	mov	r6,zero
100077f4:	000f883a 	mov	r7,zero
100077f8:	da013f15 	stw	r8,1276(sp)
100077fc:	da413e15 	stw	r9,1272(sp)
10007800:	da813d15 	stw	r10,1268(sp)
10007804:	00049480 	call	10004948 <__eqdf2>
10007808:	da013f17 	ldw	r8,1276(sp)
1000780c:	da413e17 	ldw	r9,1272(sp)
10007810:	da813d17 	ldw	r10,1268(sp)
10007814:	1001a126 	beq	r2,zero,10007e9c <___vfprintf_internal_r+0x1e3c>
10007818:	d8812117 	ldw	r2,1156(sp)
1000781c:	1280062e 	bgeu	r2,r10,10007838 <___vfprintf_internal_r+0x17d8>
10007820:	01000c04 	movi	r4,48
10007824:	10c00044 	addi	r3,r2,1
10007828:	d8c12115 	stw	r3,1156(sp)
1000782c:	11000005 	stb	r4,0(r2)
10007830:	d8812117 	ldw	r2,1156(sp)
10007834:	12bffb36 	bltu	r2,r10,10007824 <__alt_data_end+0xf8007824>
10007838:	d8c13117 	ldw	r3,1220(sp)
1000783c:	10c5c83a 	sub	r2,r2,r3
10007840:	d8813315 	stw	r2,1228(sp)
10007844:	008011c4 	movi	r2,71
10007848:	98818926 	beq	r19,r2,10007e70 <___vfprintf_internal_r+0x1e10>
1000784c:	00801944 	movi	r2,101
10007850:	14023c0e 	bge	r2,r16,10008144 <___vfprintf_internal_r+0x20e4>
10007854:	d8c12617 	ldw	r3,1176(sp)
10007858:	00801984 	movi	r2,102
1000785c:	d8c13415 	stw	r3,1232(sp)
10007860:	8081ef26 	beq	r16,r2,10008020 <___vfprintf_internal_r+0x1fc0>
10007864:	d8c13417 	ldw	r3,1232(sp)
10007868:	d9013317 	ldw	r4,1228(sp)
1000786c:	1901e316 	blt	r3,r4,10007ffc <___vfprintf_internal_r+0x1f9c>
10007870:	e080004c 	andi	r2,fp,1
10007874:	1001f426 	beq	r2,zero,10008048 <___vfprintf_internal_r+0x1fe8>
10007878:	d8c13417 	ldw	r3,1232(sp)
1000787c:	1c400044 	addi	r17,r3,1
10007880:	8839883a 	mov	fp,r17
10007884:	8801e416 	blt	r17,zero,10008018 <___vfprintf_internal_r+0x1fb8>
10007888:	dd412b07 	ldb	r21,1196(sp)
1000788c:	a801701e 	bne	r21,zero,10007e50 <___vfprintf_internal_r+0x1df0>
10007890:	df012b15 	stw	fp,1196(sp)
10007894:	dcc12783 	ldbu	r19,1182(sp)
10007898:	df012d17 	ldw	fp,1204(sp)
1000789c:	d8013215 	stw	zero,1224(sp)
100078a0:	dc812d15 	stw	r18,1204(sp)
100078a4:	003b6e06 	br	10006660 <__alt_data_end+0xf8006660>
100078a8:	e080040c 	andi	r2,fp,16
100078ac:	1000b51e 	bne	r2,zero,10007b84 <___vfprintf_internal_r+0x1b24>
100078b0:	e080100c 	andi	r2,fp,64
100078b4:	10015b26 	beq	r2,zero,10007e24 <___vfprintf_internal_r+0x1dc4>
100078b8:	d9012d17 	ldw	r4,1204(sp)
100078bc:	d9412f17 	ldw	r5,1212(sp)
100078c0:	20800017 	ldw	r2,0(r4)
100078c4:	21000104 	addi	r4,r4,4
100078c8:	d9012d15 	stw	r4,1204(sp)
100078cc:	1140000d 	sth	r5,0(r2)
100078d0:	003a2006 	br	10006154 <__alt_data_end+0xf8006154>
100078d4:	e0c0100c 	andi	r3,fp,64
100078d8:	1800a226 	beq	r3,zero,10007b64 <___vfprintf_internal_r+0x1b04>
100078dc:	d8c12d17 	ldw	r3,1204(sp)
100078e0:	1480000b 	ldhu	r18,0(r2)
100078e4:	002b883a 	mov	r21,zero
100078e8:	18c00104 	addi	r3,r3,4
100078ec:	d8c12d15 	stw	r3,1204(sp)
100078f0:	0005883a 	mov	r2,zero
100078f4:	9007883a 	mov	r3,r18
100078f8:	003c6906 	br	10006aa0 <__alt_data_end+0xf8006aa0>
100078fc:	e0c0100c 	andi	r3,fp,64
10007900:	18009026 	beq	r3,zero,10007b44 <___vfprintf_internal_r+0x1ae4>
10007904:	1480000b 	ldhu	r18,0(r2)
10007908:	d8812d17 	ldw	r2,1204(sp)
1000790c:	002b883a 	mov	r21,zero
10007910:	9007883a 	mov	r3,r18
10007914:	10800104 	addi	r2,r2,4
10007918:	d8812d15 	stw	r2,1204(sp)
1000791c:	00800044 	movi	r2,1
10007920:	003c5f06 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10007924:	e0c0100c 	andi	r3,fp,64
10007928:	18008026 	beq	r3,zero,10007b2c <___vfprintf_internal_r+0x1acc>
1000792c:	d9012d17 	ldw	r4,1204(sp)
10007930:	1480000b 	ldhu	r18,0(r2)
10007934:	002b883a 	mov	r21,zero
10007938:	21000104 	addi	r4,r4,4
1000793c:	d9012d15 	stw	r4,1204(sp)
10007940:	003c7906 	br	10006b28 <__alt_data_end+0xf8006b28>
10007944:	e080100c 	andi	r2,fp,64
10007948:	10007126 	beq	r2,zero,10007b10 <___vfprintf_internal_r+0x1ab0>
1000794c:	1c80000f 	ldh	r18,0(r3)
10007950:	d8812d17 	ldw	r2,1204(sp)
10007954:	902bd7fa 	srai	r21,r18,31
10007958:	10800104 	addi	r2,r2,4
1000795c:	d8812d15 	stw	r2,1204(sp)
10007960:	a805883a 	mov	r2,r21
10007964:	003b1a06 	br	100065d0 <__alt_data_end+0xf80065d0>
10007968:	e4000007 	ldb	r16,0(fp)
1000796c:	e005883a 	mov	r2,fp
10007970:	003a2306 	br	10006200 <__alt_data_end+0xf8006200>
10007974:	00800084 	movi	r2,2
10007978:	003c4906 	br	10006aa0 <__alt_data_end+0xf8006aa0>
1000797c:	01040074 	movhi	r4,4097
10007980:	21072984 	addi	r4,r4,7334
10007984:	d9012c15 	stw	r4,1200(sp)
10007988:	d9012c17 	ldw	r4,1200(sp)
1000798c:	1c47883a 	add	r3,r3,r17
10007990:	10800044 	addi	r2,r2,1
10007994:	41000015 	stw	r4,0(r8)
10007998:	44400115 	stw	r17,4(r8)
1000799c:	d8c12015 	stw	r3,1152(sp)
100079a0:	d8811f15 	stw	r2,1148(sp)
100079a4:	010001c4 	movi	r4,7
100079a8:	20becc16 	blt	r4,r2,100074dc <__alt_data_end+0xf80074dc>
100079ac:	42000204 	addi	r8,r8,8
100079b0:	003ed106 	br	100074f8 <__alt_data_end+0xf80074f8>
100079b4:	01040074 	movhi	r4,4097
100079b8:	21072984 	addi	r4,r4,7334
100079bc:	d9012c15 	stw	r4,1200(sp)
100079c0:	003ba306 	br	10006850 <__alt_data_end+0xf8006850>
100079c4:	b809883a 	mov	r4,r23
100079c8:	b00b883a 	mov	r5,r22
100079cc:	d9811e04 	addi	r6,sp,1144
100079d0:	000d42c0 	call	1000d42c <__sprint_r>
100079d4:	103aba1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
100079d8:	d8c12017 	ldw	r3,1152(sp)
100079dc:	da000404 	addi	r8,sp,16
100079e0:	003d6c06 	br	10006f94 <__alt_data_end+0xf8006f94>
100079e4:	d8811f17 	ldw	r2,1148(sp)
100079e8:	01440074 	movhi	r5,4097
100079ec:	01000044 	movi	r4,1
100079f0:	18c00044 	addi	r3,r3,1
100079f4:	10800044 	addi	r2,r2,1
100079f8:	29472904 	addi	r5,r5,7332
100079fc:	41000115 	stw	r4,4(r8)
10007a00:	41400015 	stw	r5,0(r8)
10007a04:	d8c12015 	stw	r3,1152(sp)
10007a08:	d8811f15 	stw	r2,1148(sp)
10007a0c:	010001c4 	movi	r4,7
10007a10:	20806716 	blt	r4,r2,10007bb0 <___vfprintf_internal_r+0x1b50>
10007a14:	42000204 	addi	r8,r8,8
10007a18:	8000041e 	bne	r16,zero,10007a2c <___vfprintf_internal_r+0x19cc>
10007a1c:	d8813317 	ldw	r2,1228(sp)
10007a20:	1000021e 	bne	r2,zero,10007a2c <___vfprintf_internal_r+0x19cc>
10007a24:	e080004c 	andi	r2,fp,1
10007a28:	103ba026 	beq	r2,zero,100068ac <__alt_data_end+0xf80068ac>
10007a2c:	d9013817 	ldw	r4,1248(sp)
10007a30:	d8811f17 	ldw	r2,1148(sp)
10007a34:	d9413517 	ldw	r5,1236(sp)
10007a38:	1907883a 	add	r3,r3,r4
10007a3c:	10800044 	addi	r2,r2,1
10007a40:	41000115 	stw	r4,4(r8)
10007a44:	41400015 	stw	r5,0(r8)
10007a48:	d8c12015 	stw	r3,1152(sp)
10007a4c:	d8811f15 	stw	r2,1148(sp)
10007a50:	010001c4 	movi	r4,7
10007a54:	20815716 	blt	r4,r2,10007fb4 <___vfprintf_internal_r+0x1f54>
10007a58:	42000204 	addi	r8,r8,8
10007a5c:	0421c83a 	sub	r16,zero,r16
10007a60:	0400810e 	bge	zero,r16,10007c68 <___vfprintf_internal_r+0x1c08>
10007a64:	04400404 	movi	r17,16
10007a68:	8c00bd0e 	bge	r17,r16,10007d60 <___vfprintf_internal_r+0x1d00>
10007a6c:	01440074 	movhi	r5,4097
10007a70:	29472984 	addi	r5,r5,7334
10007a74:	d9412c15 	stw	r5,1200(sp)
10007a78:	04c001c4 	movi	r19,7
10007a7c:	00000306 	br	10007a8c <___vfprintf_internal_r+0x1a2c>
10007a80:	42000204 	addi	r8,r8,8
10007a84:	843ffc04 	addi	r16,r16,-16
10007a88:	8c00b80e 	bge	r17,r16,10007d6c <___vfprintf_internal_r+0x1d0c>
10007a8c:	18c00404 	addi	r3,r3,16
10007a90:	10800044 	addi	r2,r2,1
10007a94:	45000015 	stw	r20,0(r8)
10007a98:	44400115 	stw	r17,4(r8)
10007a9c:	d8c12015 	stw	r3,1152(sp)
10007aa0:	d8811f15 	stw	r2,1148(sp)
10007aa4:	98bff60e 	bge	r19,r2,10007a80 <__alt_data_end+0xf8007a80>
10007aa8:	b809883a 	mov	r4,r23
10007aac:	b00b883a 	mov	r5,r22
10007ab0:	d9811e04 	addi	r6,sp,1144
10007ab4:	000d42c0 	call	1000d42c <__sprint_r>
10007ab8:	103a811e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007abc:	d8c12017 	ldw	r3,1152(sp)
10007ac0:	d8811f17 	ldw	r2,1148(sp)
10007ac4:	da000404 	addi	r8,sp,16
10007ac8:	003fee06 	br	10007a84 <__alt_data_end+0xf8007a84>
10007acc:	008011c4 	movi	r2,71
10007ad0:	1400db16 	blt	r2,r16,10007e40 <___vfprintf_internal_r+0x1de0>
10007ad4:	01040074 	movhi	r4,4097
10007ad8:	21071b04 	addi	r4,r4,7276
10007adc:	d9013115 	stw	r4,1220(sp)
10007ae0:	00c000c4 	movi	r3,3
10007ae4:	00bfdfc4 	movi	r2,-129
10007ae8:	d8c12b15 	stw	r3,1196(sp)
10007aec:	e0b8703a 	and	fp,fp,r2
10007af0:	dcc12783 	ldbu	r19,1182(sp)
10007af4:	dc812d15 	stw	r18,1204(sp)
10007af8:	1823883a 	mov	r17,r3
10007afc:	d8013215 	stw	zero,1224(sp)
10007b00:	d8013415 	stw	zero,1232(sp)
10007b04:	003ad606 	br	10006660 <__alt_data_end+0xf8006660>
10007b08:	4823883a 	mov	r17,r9
10007b0c:	003cc906 	br	10006e34 <__alt_data_end+0xf8006e34>
10007b10:	1c800017 	ldw	r18,0(r3)
10007b14:	d8c12d17 	ldw	r3,1204(sp)
10007b18:	902bd7fa 	srai	r21,r18,31
10007b1c:	18c00104 	addi	r3,r3,4
10007b20:	d8c12d15 	stw	r3,1204(sp)
10007b24:	a805883a 	mov	r2,r21
10007b28:	003aa906 	br	100065d0 <__alt_data_end+0xf80065d0>
10007b2c:	d9412d17 	ldw	r5,1204(sp)
10007b30:	14800017 	ldw	r18,0(r2)
10007b34:	002b883a 	mov	r21,zero
10007b38:	29400104 	addi	r5,r5,4
10007b3c:	d9412d15 	stw	r5,1204(sp)
10007b40:	003bf906 	br	10006b28 <__alt_data_end+0xf8006b28>
10007b44:	d8c12d17 	ldw	r3,1204(sp)
10007b48:	14800017 	ldw	r18,0(r2)
10007b4c:	002b883a 	mov	r21,zero
10007b50:	18c00104 	addi	r3,r3,4
10007b54:	d8c12d15 	stw	r3,1204(sp)
10007b58:	00800044 	movi	r2,1
10007b5c:	9007883a 	mov	r3,r18
10007b60:	003bcf06 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10007b64:	d9012d17 	ldw	r4,1204(sp)
10007b68:	14800017 	ldw	r18,0(r2)
10007b6c:	002b883a 	mov	r21,zero
10007b70:	21000104 	addi	r4,r4,4
10007b74:	d9012d15 	stw	r4,1204(sp)
10007b78:	0005883a 	mov	r2,zero
10007b7c:	9007883a 	mov	r3,r18
10007b80:	003bc706 	br	10006aa0 <__alt_data_end+0xf8006aa0>
10007b84:	d9412d17 	ldw	r5,1204(sp)
10007b88:	d8c12f17 	ldw	r3,1212(sp)
10007b8c:	28800017 	ldw	r2,0(r5)
10007b90:	29400104 	addi	r5,r5,4
10007b94:	d9412d15 	stw	r5,1204(sp)
10007b98:	10c00015 	stw	r3,0(r2)
10007b9c:	00396d06 	br	10006154 <__alt_data_end+0xf8006154>
10007ba0:	01040074 	movhi	r4,4097
10007ba4:	21071904 	addi	r4,r4,7268
10007ba8:	d9013115 	stw	r4,1220(sp)
10007bac:	003ba206 	br	10006a38 <__alt_data_end+0xf8006a38>
10007bb0:	b809883a 	mov	r4,r23
10007bb4:	b00b883a 	mov	r5,r22
10007bb8:	d9811e04 	addi	r6,sp,1144
10007bbc:	000d42c0 	call	1000d42c <__sprint_r>
10007bc0:	103a3f1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007bc4:	dc012617 	ldw	r16,1176(sp)
10007bc8:	d8c12017 	ldw	r3,1152(sp)
10007bcc:	da000404 	addi	r8,sp,16
10007bd0:	003f9106 	br	10007a18 <__alt_data_end+0xf8007a18>
10007bd4:	e0800044 	addi	r2,fp,1
10007bd8:	9cc00814 	ori	r19,r19,32
10007bdc:	e4000047 	ldb	r16,1(fp)
10007be0:	00398706 	br	10006200 <__alt_data_end+0xf8006200>
10007be4:	d8812e17 	ldw	r2,1208(sp)
10007be8:	d8c12d15 	stw	r3,1204(sp)
10007bec:	0085c83a 	sub	r2,zero,r2
10007bf0:	d8812e15 	stw	r2,1208(sp)
10007bf4:	e005883a 	mov	r2,fp
10007bf8:	003a3a06 	br	100064e4 <__alt_data_end+0xf80064e4>
10007bfc:	b809883a 	mov	r4,r23
10007c00:	b00b883a 	mov	r5,r22
10007c04:	d9811e04 	addi	r6,sp,1144
10007c08:	000d42c0 	call	1000d42c <__sprint_r>
10007c0c:	103a2c1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007c10:	d8c12017 	ldw	r3,1152(sp)
10007c14:	da000404 	addi	r8,sp,16
10007c18:	003cf006 	br	10006fdc <__alt_data_end+0xf8006fdc>
10007c1c:	d8c12817 	ldw	r3,1184(sp)
10007c20:	d9013117 	ldw	r4,1220(sp)
10007c24:	1923c83a 	sub	r17,r3,r4
10007c28:	003a8806 	br	1000664c <__alt_data_end+0xf800664c>
10007c2c:	da013f15 	stw	r8,1276(sp)
10007c30:	0005fc80 	call	10005fc8 <strlen>
10007c34:	1023883a 	mov	r17,r2
10007c38:	da013f17 	ldw	r8,1276(sp)
10007c3c:	883c7f0e 	bge	r17,zero,10006e3c <__alt_data_end+0xf8006e3c>
10007c40:	0005883a 	mov	r2,zero
10007c44:	003c7d06 	br	10006e3c <__alt_data_end+0xf8006e3c>
10007c48:	b809883a 	mov	r4,r23
10007c4c:	b00b883a 	mov	r5,r22
10007c50:	d9811e04 	addi	r6,sp,1144
10007c54:	000d42c0 	call	1000d42c <__sprint_r>
10007c58:	103a191e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007c5c:	d8c12017 	ldw	r3,1152(sp)
10007c60:	d8811f17 	ldw	r2,1148(sp)
10007c64:	da000404 	addi	r8,sp,16
10007c68:	d9413317 	ldw	r5,1228(sp)
10007c6c:	d9013117 	ldw	r4,1220(sp)
10007c70:	10800044 	addi	r2,r2,1
10007c74:	28c7883a 	add	r3,r5,r3
10007c78:	41000015 	stw	r4,0(r8)
10007c7c:	41400115 	stw	r5,4(r8)
10007c80:	d8c12015 	stw	r3,1152(sp)
10007c84:	d8811f15 	stw	r2,1148(sp)
10007c88:	010001c4 	movi	r4,7
10007c8c:	20bb060e 	bge	r4,r2,100068a8 <__alt_data_end+0xf80068a8>
10007c90:	003d6206 	br	1000721c <__alt_data_end+0xf800721c>
10007c94:	01040074 	movhi	r4,4097
10007c98:	21072d84 	addi	r4,r4,7350
10007c9c:	d9013615 	stw	r4,1240(sp)
10007ca0:	003aa306 	br	10006730 <__alt_data_end+0xf8006730>
10007ca4:	d8812604 	addi	r2,sp,1176
10007ca8:	d8800115 	stw	r2,4(sp)
10007cac:	d9413717 	ldw	r5,1244(sp)
10007cb0:	d8812504 	addi	r2,sp,1172
10007cb4:	d8800215 	stw	r2,8(sp)
10007cb8:	d8812104 	addi	r2,sp,1156
10007cbc:	da400015 	stw	r9,0(sp)
10007cc0:	d8800315 	stw	r2,12(sp)
10007cc4:	b809883a 	mov	r4,r23
10007cc8:	880d883a 	mov	r6,r17
10007ccc:	01c000c4 	movi	r7,3
10007cd0:	da013f15 	stw	r8,1276(sp)
10007cd4:	da413e15 	stw	r9,1272(sp)
10007cd8:	00084d80 	call	100084d8 <_dtoa_r>
10007cdc:	da413e17 	ldw	r9,1272(sp)
10007ce0:	da013f17 	ldw	r8,1276(sp)
10007ce4:	d8813115 	stw	r2,1220(sp)
10007ce8:	482b883a 	mov	r21,r9
10007cec:	d8c13117 	ldw	r3,1220(sp)
10007cf0:	00801184 	movi	r2,70
10007cf4:	1d55883a 	add	r10,r3,r21
10007cf8:	98bebb1e 	bne	r19,r2,100077e8 <__alt_data_end+0xf80077e8>
10007cfc:	19000007 	ldb	r4,0(r3)
10007d00:	00800c04 	movi	r2,48
10007d04:	2080dd26 	beq	r4,r2,1000807c <___vfprintf_internal_r+0x201c>
10007d08:	d8c12617 	ldw	r3,1176(sp)
10007d0c:	50d5883a 	add	r10,r10,r3
10007d10:	003eb506 	br	100077e8 <__alt_data_end+0xf80077e8>
10007d14:	0023883a 	mov	r17,zero
10007d18:	003d9b06 	br	10007388 <__alt_data_end+0xf8007388>
10007d1c:	b809883a 	mov	r4,r23
10007d20:	b00b883a 	mov	r5,r22
10007d24:	d9811e04 	addi	r6,sp,1144
10007d28:	000d42c0 	call	1000d42c <__sprint_r>
10007d2c:	1039e41e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007d30:	d8c12017 	ldw	r3,1152(sp)
10007d34:	da000404 	addi	r8,sp,16
10007d38:	003d9206 	br	10007384 <__alt_data_end+0xf8007384>
10007d3c:	b809883a 	mov	r4,r23
10007d40:	b00b883a 	mov	r5,r22
10007d44:	d9811e04 	addi	r6,sp,1144
10007d48:	000d42c0 	call	1000d42c <__sprint_r>
10007d4c:	1039dc1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007d50:	d8812617 	ldw	r2,1176(sp)
10007d54:	d8c12017 	ldw	r3,1152(sp)
10007d58:	da000404 	addi	r8,sp,16
10007d5c:	003dfb06 	br	1000754c <__alt_data_end+0xf800754c>
10007d60:	01040074 	movhi	r4,4097
10007d64:	21072984 	addi	r4,r4,7334
10007d68:	d9012c15 	stw	r4,1200(sp)
10007d6c:	d9012c17 	ldw	r4,1200(sp)
10007d70:	1c07883a 	add	r3,r3,r16
10007d74:	10800044 	addi	r2,r2,1
10007d78:	41000015 	stw	r4,0(r8)
10007d7c:	44000115 	stw	r16,4(r8)
10007d80:	d8c12015 	stw	r3,1152(sp)
10007d84:	d8811f15 	stw	r2,1148(sp)
10007d88:	010001c4 	movi	r4,7
10007d8c:	20bfae16 	blt	r4,r2,10007c48 <__alt_data_end+0xf8007c48>
10007d90:	42000204 	addi	r8,r8,8
10007d94:	003fb406 	br	10007c68 <__alt_data_end+0xf8007c68>
10007d98:	0021883a 	mov	r16,zero
10007d9c:	003dfd06 	br	10007594 <__alt_data_end+0xf8007594>
10007da0:	01440074 	movhi	r5,4097
10007da4:	29472d84 	addi	r5,r5,7350
10007da8:	d9413615 	stw	r5,1240(sp)
10007dac:	003ae306 	br	1000693c <__alt_data_end+0xf800693c>
10007db0:	b809883a 	mov	r4,r23
10007db4:	b00b883a 	mov	r5,r22
10007db8:	d9811e04 	addi	r6,sp,1144
10007dbc:	000d42c0 	call	1000d42c <__sprint_r>
10007dc0:	1039bf1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007dc4:	d8812617 	ldw	r2,1176(sp)
10007dc8:	d9413317 	ldw	r5,1228(sp)
10007dcc:	d8c12017 	ldw	r3,1152(sp)
10007dd0:	da000404 	addi	r8,sp,16
10007dd4:	2885c83a 	sub	r2,r5,r2
10007dd8:	003ded06 	br	10007590 <__alt_data_end+0xf8007590>
10007ddc:	00800184 	movi	r2,6
10007de0:	1240012e 	bgeu	r2,r9,10007de8 <___vfprintf_internal_r+0x1d88>
10007de4:	1013883a 	mov	r9,r2
10007de8:	4823883a 	mov	r17,r9
10007dec:	4805883a 	mov	r2,r9
10007df0:	4800b216 	blt	r9,zero,100080bc <___vfprintf_internal_r+0x205c>
10007df4:	01440074 	movhi	r5,4097
10007df8:	29472704 	addi	r5,r5,7324
10007dfc:	d8812b15 	stw	r2,1196(sp)
10007e00:	dc812d15 	stw	r18,1204(sp)
10007e04:	d8013215 	stw	zero,1224(sp)
10007e08:	d8013415 	stw	zero,1232(sp)
10007e0c:	d9413115 	stw	r5,1220(sp)
10007e10:	0005883a 	mov	r2,zero
10007e14:	003a1906 	br	1000667c <__alt_data_end+0xf800667c>
10007e18:	04c00b44 	movi	r19,45
10007e1c:	dcc12785 	stb	r19,1182(sp)
10007e20:	003b0006 	br	10006a24 <__alt_data_end+0xf8006a24>
10007e24:	d8c12d17 	ldw	r3,1204(sp)
10007e28:	d9012f17 	ldw	r4,1212(sp)
10007e2c:	18800017 	ldw	r2,0(r3)
10007e30:	18c00104 	addi	r3,r3,4
10007e34:	d8c12d15 	stw	r3,1204(sp)
10007e38:	11000015 	stw	r4,0(r2)
10007e3c:	0038c506 	br	10006154 <__alt_data_end+0xf8006154>
10007e40:	01440074 	movhi	r5,4097
10007e44:	29471c04 	addi	r5,r5,7280
10007e48:	d9413115 	stw	r5,1220(sp)
10007e4c:	003f2406 	br	10007ae0 <__alt_data_end+0xf8007ae0>
10007e50:	00800b44 	movi	r2,45
10007e54:	d8812785 	stb	r2,1182(sp)
10007e58:	df012b15 	stw	fp,1196(sp)
10007e5c:	d8013215 	stw	zero,1224(sp)
10007e60:	df012d17 	ldw	fp,1204(sp)
10007e64:	00800b44 	movi	r2,45
10007e68:	dc812d15 	stw	r18,1204(sp)
10007e6c:	003a0006 	br	10006670 <__alt_data_end+0xf8006670>
10007e70:	d8c12617 	ldw	r3,1176(sp)
10007e74:	00bfff44 	movi	r2,-3
10007e78:	18800a16 	blt	r3,r2,10007ea4 <___vfprintf_internal_r+0x1e44>
10007e7c:	48c00916 	blt	r9,r3,10007ea4 <___vfprintf_internal_r+0x1e44>
10007e80:	d8c13415 	stw	r3,1232(sp)
10007e84:	040019c4 	movi	r16,103
10007e88:	003e7606 	br	10007864 <__alt_data_end+0xf8007864>
10007e8c:	01040074 	movhi	r4,4097
10007e90:	21072984 	addi	r4,r4,7334
10007e94:	d9012c15 	stw	r4,1200(sp)
10007e98:	003c8e06 	br	100070d4 <__alt_data_end+0xf80070d4>
10007e9c:	5005883a 	mov	r2,r10
10007ea0:	003e6506 	br	10007838 <__alt_data_end+0xf8007838>
10007ea4:	843fff84 	addi	r16,r16,-2
10007ea8:	1d7fffc4 	addi	r21,r3,-1
10007eac:	dd412615 	stw	r21,1176(sp)
10007eb0:	dc0122c5 	stb	r16,1163(sp)
10007eb4:	a8009216 	blt	r21,zero,10008100 <___vfprintf_internal_r+0x20a0>
10007eb8:	00800ac4 	movi	r2,43
10007ebc:	d8812305 	stb	r2,1164(sp)
10007ec0:	00800244 	movi	r2,9
10007ec4:	1540660e 	bge	r2,r21,10008060 <___vfprintf_internal_r+0x2000>
10007ec8:	dcc122c4 	addi	r19,sp,1163
10007ecc:	dc012c15 	stw	r16,1200(sp)
10007ed0:	4023883a 	mov	r17,r8
10007ed4:	9821883a 	mov	r16,r19
10007ed8:	a809883a 	mov	r4,r21
10007edc:	01400284 	movi	r5,10
10007ee0:	00036980 	call	10003698 <__modsi3>
10007ee4:	10800c04 	addi	r2,r2,48
10007ee8:	843fffc4 	addi	r16,r16,-1
10007eec:	a809883a 	mov	r4,r21
10007ef0:	01400284 	movi	r5,10
10007ef4:	80800005 	stb	r2,0(r16)
10007ef8:	00036440 	call	10003644 <__divsi3>
10007efc:	01000244 	movi	r4,9
10007f00:	102b883a 	mov	r21,r2
10007f04:	20bff416 	blt	r4,r2,10007ed8 <__alt_data_end+0xf8007ed8>
10007f08:	8811883a 	mov	r8,r17
10007f0c:	10800c04 	addi	r2,r2,48
10007f10:	8023883a 	mov	r17,r16
10007f14:	897fffc4 	addi	r5,r17,-1
10007f18:	88bfffc5 	stb	r2,-1(r17)
10007f1c:	dc012c17 	ldw	r16,1200(sp)
10007f20:	2cc08a2e 	bgeu	r5,r19,1000814c <___vfprintf_internal_r+0x20ec>
10007f24:	d9812384 	addi	r6,sp,1166
10007f28:	344dc83a 	sub	r6,r6,r17
10007f2c:	d9012344 	addi	r4,sp,1165
10007f30:	998d883a 	add	r6,r19,r6
10007f34:	00000106 	br	10007f3c <___vfprintf_internal_r+0x1edc>
10007f38:	28800003 	ldbu	r2,0(r5)
10007f3c:	20800005 	stb	r2,0(r4)
10007f40:	21000044 	addi	r4,r4,1
10007f44:	29400044 	addi	r5,r5,1
10007f48:	21bffb1e 	bne	r4,r6,10007f38 <__alt_data_end+0xf8007f38>
10007f4c:	d8812304 	addi	r2,sp,1164
10007f50:	1445c83a 	sub	r2,r2,r17
10007f54:	d9412344 	addi	r5,sp,1165
10007f58:	2885883a 	add	r2,r5,r2
10007f5c:	14e7c83a 	sub	r19,r2,r19
10007f60:	d8813317 	ldw	r2,1228(sp)
10007f64:	d8c13317 	ldw	r3,1228(sp)
10007f68:	dcc13a15 	stw	r19,1256(sp)
10007f6c:	14e3883a 	add	r17,r2,r19
10007f70:	00800044 	movi	r2,1
10007f74:	10c0550e 	bge	r2,r3,100080cc <___vfprintf_internal_r+0x206c>
10007f78:	8c400044 	addi	r17,r17,1
10007f7c:	8839883a 	mov	fp,r17
10007f80:	88005016 	blt	r17,zero,100080c4 <___vfprintf_internal_r+0x2064>
10007f84:	d8013415 	stw	zero,1232(sp)
10007f88:	003e3f06 	br	10007888 <__alt_data_end+0xf8007888>
10007f8c:	da412b15 	stw	r9,1196(sp)
10007f90:	dcc12783 	ldbu	r19,1182(sp)
10007f94:	4823883a 	mov	r17,r9
10007f98:	dc812d15 	stw	r18,1204(sp)
10007f9c:	d8013215 	stw	zero,1224(sp)
10007fa0:	d8013415 	stw	zero,1232(sp)
10007fa4:	0039ae06 	br	10006660 <__alt_data_end+0xf8006660>
10007fa8:	483de91e 	bne	r9,zero,10007750 <__alt_data_end+0xf8007750>
10007fac:	8813883a 	mov	r9,r17
10007fb0:	003de706 	br	10007750 <__alt_data_end+0xf8007750>
10007fb4:	b809883a 	mov	r4,r23
10007fb8:	b00b883a 	mov	r5,r22
10007fbc:	d9811e04 	addi	r6,sp,1144
10007fc0:	000d42c0 	call	1000d42c <__sprint_r>
10007fc4:	10393e1e 	bne	r2,zero,100064c0 <__alt_data_end+0xf80064c0>
10007fc8:	dc012617 	ldw	r16,1176(sp)
10007fcc:	d8c12017 	ldw	r3,1152(sp)
10007fd0:	d8811f17 	ldw	r2,1148(sp)
10007fd4:	da000404 	addi	r8,sp,16
10007fd8:	003ea006 	br	10007a5c <__alt_data_end+0xf8007a5c>
10007fdc:	00c00b44 	movi	r3,45
10007fe0:	2460003c 	xorhi	r17,r4,32768
10007fe4:	d8c12b05 	stb	r3,1196(sp)
10007fe8:	003ddf06 	br	10007768 <__alt_data_end+0xf8007768>
10007fec:	02400184 	movi	r9,6
10007ff0:	003dd706 	br	10007750 <__alt_data_end+0xf8007750>
10007ff4:	4d400044 	addi	r21,r9,1
10007ff8:	003de206 	br	10007784 <__alt_data_end+0xf8007784>
10007ffc:	d8c13417 	ldw	r3,1232(sp)
10008000:	00c0490e 	bge	zero,r3,10008128 <___vfprintf_internal_r+0x20c8>
10008004:	04400044 	movi	r17,1
10008008:	d9013317 	ldw	r4,1228(sp)
1000800c:	8923883a 	add	r17,r17,r4
10008010:	8839883a 	mov	fp,r17
10008014:	883e1c0e 	bge	r17,zero,10007888 <__alt_data_end+0xf8007888>
10008018:	0039883a 	mov	fp,zero
1000801c:	003e1a06 	br	10007888 <__alt_data_end+0xf8007888>
10008020:	00c03b0e 	bge	zero,r3,10008110 <___vfprintf_internal_r+0x20b0>
10008024:	4800021e 	bne	r9,zero,10008030 <___vfprintf_internal_r+0x1fd0>
10008028:	e080004c 	andi	r2,fp,1
1000802c:	10000626 	beq	r2,zero,10008048 <___vfprintf_internal_r+0x1fe8>
10008030:	d8c13417 	ldw	r3,1232(sp)
10008034:	4a400044 	addi	r9,r9,1
10008038:	1a63883a 	add	r17,r3,r9
1000803c:	8839883a 	mov	fp,r17
10008040:	883e110e 	bge	r17,zero,10007888 <__alt_data_end+0xf8007888>
10008044:	003ff406 	br	10008018 <__alt_data_end+0xf8008018>
10008048:	1839883a 	mov	fp,r3
1000804c:	18004116 	blt	r3,zero,10008154 <___vfprintf_internal_r+0x20f4>
10008050:	dc413417 	ldw	r17,1232(sp)
10008054:	003e0c06 	br	10007888 <__alt_data_end+0xf8007888>
10008058:	d8812117 	ldw	r2,1156(sp)
1000805c:	003df606 	br	10007838 <__alt_data_end+0xf8007838>
10008060:	00800c04 	movi	r2,48
10008064:	a8c00c04 	addi	r3,r21,48
10008068:	d8812345 	stb	r2,1165(sp)
1000806c:	d8c12385 	stb	r3,1166(sp)
10008070:	d88123c4 	addi	r2,sp,1167
10008074:	dcc122c4 	addi	r19,sp,1163
10008078:	003fb806 	br	10007f5c <__alt_data_end+0xf8007f5c>
1000807c:	d9013717 	ldw	r4,1244(sp)
10008080:	880b883a 	mov	r5,r17
10008084:	000d883a 	mov	r6,zero
10008088:	000f883a 	mov	r7,zero
1000808c:	da013f15 	stw	r8,1276(sp)
10008090:	da413e15 	stw	r9,1272(sp)
10008094:	da813d15 	stw	r10,1268(sp)
10008098:	00049480 	call	10004948 <__eqdf2>
1000809c:	da013f17 	ldw	r8,1276(sp)
100080a0:	da413e17 	ldw	r9,1272(sp)
100080a4:	da813d17 	ldw	r10,1268(sp)
100080a8:	103f1726 	beq	r2,zero,10007d08 <__alt_data_end+0xf8007d08>
100080ac:	00800044 	movi	r2,1
100080b0:	1547c83a 	sub	r3,r2,r21
100080b4:	d8c12615 	stw	r3,1176(sp)
100080b8:	003f1406 	br	10007d0c <__alt_data_end+0xf8007d0c>
100080bc:	0005883a 	mov	r2,zero
100080c0:	003f4c06 	br	10007df4 <__alt_data_end+0xf8007df4>
100080c4:	0039883a 	mov	fp,zero
100080c8:	003fae06 	br	10007f84 <__alt_data_end+0xf8007f84>
100080cc:	e084703a 	and	r2,fp,r2
100080d0:	103faa26 	beq	r2,zero,10007f7c <__alt_data_end+0xf8007f7c>
100080d4:	003fa806 	br	10007f78 <__alt_data_end+0xf8007f78>
100080d8:	d9412d17 	ldw	r5,1204(sp)
100080dc:	2a400017 	ldw	r9,0(r5)
100080e0:	28c00104 	addi	r3,r5,4
100080e4:	d8c12d15 	stw	r3,1204(sp)
100080e8:	483ebc0e 	bge	r9,zero,10007bdc <__alt_data_end+0xf8007bdc>
100080ec:	027fffc4 	movi	r9,-1
100080f0:	e4000047 	ldb	r16,1(fp)
100080f4:	00384206 	br	10006200 <__alt_data_end+0xf8006200>
100080f8:	043fffc4 	movi	r16,-1
100080fc:	0038ce06 	br	10006438 <__alt_data_end+0xf8006438>
10008100:	00800b44 	movi	r2,45
10008104:	056bc83a 	sub	r21,zero,r21
10008108:	d8812305 	stb	r2,1164(sp)
1000810c:	003f6c06 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008110:	4800081e 	bne	r9,zero,10008134 <___vfprintf_internal_r+0x20d4>
10008114:	e080004c 	andi	r2,fp,1
10008118:	1000061e 	bne	r2,zero,10008134 <___vfprintf_internal_r+0x20d4>
1000811c:	07000044 	movi	fp,1
10008120:	e023883a 	mov	r17,fp
10008124:	003dd806 	br	10007888 <__alt_data_end+0xf8007888>
10008128:	04400084 	movi	r17,2
1000812c:	88e3c83a 	sub	r17,r17,r3
10008130:	003fb506 	br	10008008 <__alt_data_end+0xf8008008>
10008134:	4c400084 	addi	r17,r9,2
10008138:	8839883a 	mov	fp,r17
1000813c:	883dd20e 	bge	r17,zero,10007888 <__alt_data_end+0xf8007888>
10008140:	003fb506 	br	10008018 <__alt_data_end+0xf8008018>
10008144:	d8c12617 	ldw	r3,1176(sp)
10008148:	003f5706 	br	10007ea8 <__alt_data_end+0xf8007ea8>
1000814c:	d8812344 	addi	r2,sp,1165
10008150:	003f8206 	br	10007f5c <__alt_data_end+0xf8007f5c>
10008154:	0039883a 	mov	fp,zero
10008158:	003fbd06 	br	10008050 <__alt_data_end+0xf8008050>

1000815c <__vfprintf_internal>:
1000815c:	2007883a 	mov	r3,r4
10008160:	01040074 	movhi	r4,4097
10008164:	210e4404 	addi	r4,r4,14608
10008168:	21000017 	ldw	r4,0(r4)
1000816c:	2805883a 	mov	r2,r5
10008170:	300f883a 	mov	r7,r6
10008174:	180b883a 	mov	r5,r3
10008178:	100d883a 	mov	r6,r2
1000817c:	00060601 	jmpi	10006060 <___vfprintf_internal_r>

10008180 <__swsetup_r>:
10008180:	00840074 	movhi	r2,4097
10008184:	defffd04 	addi	sp,sp,-12
10008188:	108e4404 	addi	r2,r2,14608
1000818c:	dc400115 	stw	r17,4(sp)
10008190:	2023883a 	mov	r17,r4
10008194:	11000017 	ldw	r4,0(r2)
10008198:	dc000015 	stw	r16,0(sp)
1000819c:	dfc00215 	stw	ra,8(sp)
100081a0:	2821883a 	mov	r16,r5
100081a4:	20000226 	beq	r4,zero,100081b0 <__swsetup_r+0x30>
100081a8:	20c00e17 	ldw	r3,56(r4)
100081ac:	18002e26 	beq	r3,zero,10008268 <__swsetup_r+0xe8>
100081b0:	8080030b 	ldhu	r2,12(r16)
100081b4:	10c0020c 	andi	r3,r2,8
100081b8:	100d883a 	mov	r6,r2
100081bc:	18000f26 	beq	r3,zero,100081fc <__swsetup_r+0x7c>
100081c0:	80c00417 	ldw	r3,16(r16)
100081c4:	18001526 	beq	r3,zero,1000821c <__swsetup_r+0x9c>
100081c8:	1100004c 	andi	r4,r2,1
100081cc:	20001c1e 	bne	r4,zero,10008240 <__swsetup_r+0xc0>
100081d0:	1080008c 	andi	r2,r2,2
100081d4:	1000261e 	bne	r2,zero,10008270 <__swsetup_r+0xf0>
100081d8:	80800517 	ldw	r2,20(r16)
100081dc:	80800215 	stw	r2,8(r16)
100081e0:	18001c26 	beq	r3,zero,10008254 <__swsetup_r+0xd4>
100081e4:	0005883a 	mov	r2,zero
100081e8:	dfc00217 	ldw	ra,8(sp)
100081ec:	dc400117 	ldw	r17,4(sp)
100081f0:	dc000017 	ldw	r16,0(sp)
100081f4:	dec00304 	addi	sp,sp,12
100081f8:	f800283a 	ret
100081fc:	3080040c 	andi	r2,r6,16
10008200:	10001726 	beq	r2,zero,10008260 <__swsetup_r+0xe0>
10008204:	3080010c 	andi	r2,r6,4
10008208:	10001b1e 	bne	r2,zero,10008278 <__swsetup_r+0xf8>
1000820c:	80c00417 	ldw	r3,16(r16)
10008210:	30800214 	ori	r2,r6,8
10008214:	8080030d 	sth	r2,12(r16)
10008218:	183feb1e 	bne	r3,zero,100081c8 <__alt_data_end+0xf80081c8>
1000821c:	1140a00c 	andi	r5,r2,640
10008220:	01008004 	movi	r4,512
10008224:	293fe826 	beq	r5,r4,100081c8 <__alt_data_end+0xf80081c8>
10008228:	8809883a 	mov	r4,r17
1000822c:	800b883a 	mov	r5,r16
10008230:	000ad140 	call	1000ad14 <__smakebuf_r>
10008234:	8080030b 	ldhu	r2,12(r16)
10008238:	80c00417 	ldw	r3,16(r16)
1000823c:	003fe206 	br	100081c8 <__alt_data_end+0xf80081c8>
10008240:	80800517 	ldw	r2,20(r16)
10008244:	80000215 	stw	zero,8(r16)
10008248:	0085c83a 	sub	r2,zero,r2
1000824c:	80800615 	stw	r2,24(r16)
10008250:	183fe41e 	bne	r3,zero,100081e4 <__alt_data_end+0xf80081e4>
10008254:	8080030b 	ldhu	r2,12(r16)
10008258:	1080200c 	andi	r2,r2,128
1000825c:	103fe226 	beq	r2,zero,100081e8 <__alt_data_end+0xf80081e8>
10008260:	00bfffc4 	movi	r2,-1
10008264:	003fe006 	br	100081e8 <__alt_data_end+0xf80081e8>
10008268:	000a1bc0 	call	1000a1bc <__sinit>
1000826c:	003fd006 	br	100081b0 <__alt_data_end+0xf80081b0>
10008270:	0005883a 	mov	r2,zero
10008274:	003fd906 	br	100081dc <__alt_data_end+0xf80081dc>
10008278:	81400c17 	ldw	r5,48(r16)
1000827c:	28000626 	beq	r5,zero,10008298 <__swsetup_r+0x118>
10008280:	80801004 	addi	r2,r16,64
10008284:	28800326 	beq	r5,r2,10008294 <__swsetup_r+0x114>
10008288:	8809883a 	mov	r4,r17
1000828c:	000a3300 	call	1000a330 <_free_r>
10008290:	8180030b 	ldhu	r6,12(r16)
10008294:	80000c15 	stw	zero,48(r16)
10008298:	80c00417 	ldw	r3,16(r16)
1000829c:	00bff6c4 	movi	r2,-37
100082a0:	118c703a 	and	r6,r2,r6
100082a4:	80000115 	stw	zero,4(r16)
100082a8:	80c00015 	stw	r3,0(r16)
100082ac:	003fd806 	br	10008210 <__alt_data_end+0xf8008210>

100082b0 <quorem>:
100082b0:	defff204 	addi	sp,sp,-56
100082b4:	ddc00b15 	stw	r23,44(sp)
100082b8:	20800417 	ldw	r2,16(r4)
100082bc:	2dc00417 	ldw	r23,16(r5)
100082c0:	dfc00d15 	stw	ra,52(sp)
100082c4:	df000c15 	stw	fp,48(sp)
100082c8:	dd800a15 	stw	r22,40(sp)
100082cc:	dd400915 	stw	r21,36(sp)
100082d0:	dd000815 	stw	r20,32(sp)
100082d4:	dcc00715 	stw	r19,28(sp)
100082d8:	dc800615 	stw	r18,24(sp)
100082dc:	dc400515 	stw	r17,20(sp)
100082e0:	dc000415 	stw	r16,16(sp)
100082e4:	15c07a16 	blt	r2,r23,100084d0 <quorem+0x220>
100082e8:	bdffffc4 	addi	r23,r23,-1
100082ec:	bde9883a 	add	r20,r23,r23
100082f0:	28c00504 	addi	r3,r5,20
100082f4:	a529883a 	add	r20,r20,r20
100082f8:	1d39883a 	add	fp,r3,r20
100082fc:	24c00504 	addi	r19,r4,20
10008300:	d9400215 	stw	r5,8(sp)
10008304:	9d29883a 	add	r20,r19,r20
10008308:	e1400017 	ldw	r5,0(fp)
1000830c:	d9000015 	stw	r4,0(sp)
10008310:	a1000017 	ldw	r4,0(r20)
10008314:	29400044 	addi	r5,r5,1
10008318:	d8c00115 	stw	r3,4(sp)
1000831c:	dd000315 	stw	r20,12(sp)
10008320:	00036f40 	call	100036f4 <__udivsi3>
10008324:	1025883a 	mov	r18,r2
10008328:	10003026 	beq	r2,zero,100083ec <quorem+0x13c>
1000832c:	dc400117 	ldw	r17,4(sp)
10008330:	9829883a 	mov	r20,r19
10008334:	002d883a 	mov	r22,zero
10008338:	0021883a 	mov	r16,zero
1000833c:	8d400017 	ldw	r21,0(r17)
10008340:	900b883a 	mov	r5,r18
10008344:	8c400104 	addi	r17,r17,4
10008348:	a93fffcc 	andi	r4,r21,65535
1000834c:	00037040 	call	10003704 <__mulsi3>
10008350:	a808d43a 	srli	r4,r21,16
10008354:	900b883a 	mov	r5,r18
10008358:	b0ad883a 	add	r22,r22,r2
1000835c:	00037040 	call	10003704 <__mulsi3>
10008360:	a1000017 	ldw	r4,0(r20)
10008364:	b00cd43a 	srli	r6,r22,16
10008368:	b0ffffcc 	andi	r3,r22,65535
1000836c:	217fffcc 	andi	r5,r4,65535
10008370:	2c21883a 	add	r16,r5,r16
10008374:	80c7c83a 	sub	r3,r16,r3
10008378:	2008d43a 	srli	r4,r4,16
1000837c:	3085883a 	add	r2,r6,r2
10008380:	1821d43a 	srai	r16,r3,16
10008384:	117fffcc 	andi	r5,r2,65535
10008388:	2149c83a 	sub	r4,r4,r5
1000838c:	2421883a 	add	r16,r4,r16
10008390:	8008943a 	slli	r4,r16,16
10008394:	18ffffcc 	andi	r3,r3,65535
10008398:	102cd43a 	srli	r22,r2,16
1000839c:	20c8b03a 	or	r4,r4,r3
100083a0:	a1000015 	stw	r4,0(r20)
100083a4:	8021d43a 	srai	r16,r16,16
100083a8:	a5000104 	addi	r20,r20,4
100083ac:	e47fe32e 	bgeu	fp,r17,1000833c <__alt_data_end+0xf800833c>
100083b0:	d8c00317 	ldw	r3,12(sp)
100083b4:	18800017 	ldw	r2,0(r3)
100083b8:	10000c1e 	bne	r2,zero,100083ec <quorem+0x13c>
100083bc:	18bfff04 	addi	r2,r3,-4
100083c0:	9880082e 	bgeu	r19,r2,100083e4 <quorem+0x134>
100083c4:	18ffff17 	ldw	r3,-4(r3)
100083c8:	18000326 	beq	r3,zero,100083d8 <quorem+0x128>
100083cc:	00000506 	br	100083e4 <quorem+0x134>
100083d0:	10c00017 	ldw	r3,0(r2)
100083d4:	1800031e 	bne	r3,zero,100083e4 <quorem+0x134>
100083d8:	10bfff04 	addi	r2,r2,-4
100083dc:	bdffffc4 	addi	r23,r23,-1
100083e0:	98bffb36 	bltu	r19,r2,100083d0 <__alt_data_end+0xf80083d0>
100083e4:	d8c00017 	ldw	r3,0(sp)
100083e8:	1dc00415 	stw	r23,16(r3)
100083ec:	d9000017 	ldw	r4,0(sp)
100083f0:	d9400217 	ldw	r5,8(sp)
100083f4:	000c4900 	call	1000c490 <__mcmp>
100083f8:	10002816 	blt	r2,zero,1000849c <quorem+0x1ec>
100083fc:	dc400117 	ldw	r17,4(sp)
10008400:	94800044 	addi	r18,r18,1
10008404:	980d883a 	mov	r6,r19
10008408:	0007883a 	mov	r3,zero
1000840c:	31000017 	ldw	r4,0(r6)
10008410:	89400017 	ldw	r5,0(r17)
10008414:	31800104 	addi	r6,r6,4
10008418:	20bfffcc 	andi	r2,r4,65535
1000841c:	10c7883a 	add	r3,r2,r3
10008420:	28bfffcc 	andi	r2,r5,65535
10008424:	1885c83a 	sub	r2,r3,r2
10008428:	280ad43a 	srli	r5,r5,16
1000842c:	2008d43a 	srli	r4,r4,16
10008430:	1007d43a 	srai	r3,r2,16
10008434:	10bfffcc 	andi	r2,r2,65535
10008438:	2149c83a 	sub	r4,r4,r5
1000843c:	20c9883a 	add	r4,r4,r3
10008440:	200a943a 	slli	r5,r4,16
10008444:	8c400104 	addi	r17,r17,4
10008448:	2007d43a 	srai	r3,r4,16
1000844c:	2884b03a 	or	r2,r5,r2
10008450:	30bfff15 	stw	r2,-4(r6)
10008454:	e47fed2e 	bgeu	fp,r17,1000840c <__alt_data_end+0xf800840c>
10008458:	bdc5883a 	add	r2,r23,r23
1000845c:	1085883a 	add	r2,r2,r2
10008460:	9887883a 	add	r3,r19,r2
10008464:	18800017 	ldw	r2,0(r3)
10008468:	10000c1e 	bne	r2,zero,1000849c <quorem+0x1ec>
1000846c:	18bfff04 	addi	r2,r3,-4
10008470:	9880082e 	bgeu	r19,r2,10008494 <quorem+0x1e4>
10008474:	18ffff17 	ldw	r3,-4(r3)
10008478:	18000326 	beq	r3,zero,10008488 <quorem+0x1d8>
1000847c:	00000506 	br	10008494 <quorem+0x1e4>
10008480:	10c00017 	ldw	r3,0(r2)
10008484:	1800031e 	bne	r3,zero,10008494 <quorem+0x1e4>
10008488:	10bfff04 	addi	r2,r2,-4
1000848c:	bdffffc4 	addi	r23,r23,-1
10008490:	98bffb36 	bltu	r19,r2,10008480 <__alt_data_end+0xf8008480>
10008494:	d8c00017 	ldw	r3,0(sp)
10008498:	1dc00415 	stw	r23,16(r3)
1000849c:	9005883a 	mov	r2,r18
100084a0:	dfc00d17 	ldw	ra,52(sp)
100084a4:	df000c17 	ldw	fp,48(sp)
100084a8:	ddc00b17 	ldw	r23,44(sp)
100084ac:	dd800a17 	ldw	r22,40(sp)
100084b0:	dd400917 	ldw	r21,36(sp)
100084b4:	dd000817 	ldw	r20,32(sp)
100084b8:	dcc00717 	ldw	r19,28(sp)
100084bc:	dc800617 	ldw	r18,24(sp)
100084c0:	dc400517 	ldw	r17,20(sp)
100084c4:	dc000417 	ldw	r16,16(sp)
100084c8:	dec00e04 	addi	sp,sp,56
100084cc:	f800283a 	ret
100084d0:	0005883a 	mov	r2,zero
100084d4:	003ff206 	br	100084a0 <__alt_data_end+0xf80084a0>

100084d8 <_dtoa_r>:
100084d8:	20801017 	ldw	r2,64(r4)
100084dc:	deffde04 	addi	sp,sp,-136
100084e0:	dd401d15 	stw	r21,116(sp)
100084e4:	dcc01b15 	stw	r19,108(sp)
100084e8:	dc801a15 	stw	r18,104(sp)
100084ec:	dc401915 	stw	r17,100(sp)
100084f0:	dc001815 	stw	r16,96(sp)
100084f4:	dfc02115 	stw	ra,132(sp)
100084f8:	df002015 	stw	fp,128(sp)
100084fc:	ddc01f15 	stw	r23,124(sp)
10008500:	dd801e15 	stw	r22,120(sp)
10008504:	dd001c15 	stw	r20,112(sp)
10008508:	d9c00315 	stw	r7,12(sp)
1000850c:	2021883a 	mov	r16,r4
10008510:	302b883a 	mov	r21,r6
10008514:	2825883a 	mov	r18,r5
10008518:	dc402417 	ldw	r17,144(sp)
1000851c:	3027883a 	mov	r19,r6
10008520:	10000826 	beq	r2,zero,10008544 <_dtoa_r+0x6c>
10008524:	21801117 	ldw	r6,68(r4)
10008528:	00c00044 	movi	r3,1
1000852c:	100b883a 	mov	r5,r2
10008530:	1986983a 	sll	r3,r3,r6
10008534:	11800115 	stw	r6,4(r2)
10008538:	10c00215 	stw	r3,8(r2)
1000853c:	000bbbc0 	call	1000bbbc <_Bfree>
10008540:	80001015 	stw	zero,64(r16)
10008544:	a8002d16 	blt	r21,zero,100085fc <_dtoa_r+0x124>
10008548:	88000015 	stw	zero,0(r17)
1000854c:	a8dffc2c 	andhi	r3,r21,32752
10008550:	009ffc34 	movhi	r2,32752
10008554:	18801b26 	beq	r3,r2,100085c4 <_dtoa_r+0xec>
10008558:	9009883a 	mov	r4,r18
1000855c:	980b883a 	mov	r5,r19
10008560:	000d883a 	mov	r6,zero
10008564:	000f883a 	mov	r7,zero
10008568:	00049480 	call	10004948 <__eqdf2>
1000856c:	10002a1e 	bne	r2,zero,10008618 <_dtoa_r+0x140>
10008570:	d8c02317 	ldw	r3,140(sp)
10008574:	d9002517 	ldw	r4,148(sp)
10008578:	00800044 	movi	r2,1
1000857c:	18800015 	stw	r2,0(r3)
10008580:	2001a226 	beq	r4,zero,10008c0c <_dtoa_r+0x734>
10008584:	00840074 	movhi	r2,4097
10008588:	10872944 	addi	r2,r2,7333
1000858c:	20800015 	stw	r2,0(r4)
10008590:	10bfffc4 	addi	r2,r2,-1
10008594:	dfc02117 	ldw	ra,132(sp)
10008598:	df002017 	ldw	fp,128(sp)
1000859c:	ddc01f17 	ldw	r23,124(sp)
100085a0:	dd801e17 	ldw	r22,120(sp)
100085a4:	dd401d17 	ldw	r21,116(sp)
100085a8:	dd001c17 	ldw	r20,112(sp)
100085ac:	dcc01b17 	ldw	r19,108(sp)
100085b0:	dc801a17 	ldw	r18,104(sp)
100085b4:	dc401917 	ldw	r17,100(sp)
100085b8:	dc001817 	ldw	r16,96(sp)
100085bc:	dec02204 	addi	sp,sp,136
100085c0:	f800283a 	ret
100085c4:	d8c02317 	ldw	r3,140(sp)
100085c8:	0089c3c4 	movi	r2,9999
100085cc:	18800015 	stw	r2,0(r3)
100085d0:	90017c26 	beq	r18,zero,10008bc4 <_dtoa_r+0x6ec>
100085d4:	00840074 	movhi	r2,4097
100085d8:	10873504 	addi	r2,r2,7380
100085dc:	d9002517 	ldw	r4,148(sp)
100085e0:	203fec26 	beq	r4,zero,10008594 <__alt_data_end+0xf8008594>
100085e4:	10c000c7 	ldb	r3,3(r2)
100085e8:	18017d1e 	bne	r3,zero,10008be0 <_dtoa_r+0x708>
100085ec:	10c000c4 	addi	r3,r2,3
100085f0:	d9802517 	ldw	r6,148(sp)
100085f4:	30c00015 	stw	r3,0(r6)
100085f8:	003fe606 	br	10008594 <__alt_data_end+0xf8008594>
100085fc:	04e00034 	movhi	r19,32768
10008600:	9cffffc4 	addi	r19,r19,-1
10008604:	00800044 	movi	r2,1
10008608:	ace6703a 	and	r19,r21,r19
1000860c:	88800015 	stw	r2,0(r17)
10008610:	982b883a 	mov	r21,r19
10008614:	003fcd06 	br	1000854c <__alt_data_end+0xf800854c>
10008618:	d8800204 	addi	r2,sp,8
1000861c:	a822d53a 	srli	r17,r21,20
10008620:	d8800015 	stw	r2,0(sp)
10008624:	8009883a 	mov	r4,r16
10008628:	900b883a 	mov	r5,r18
1000862c:	980d883a 	mov	r6,r19
10008630:	d9c00104 	addi	r7,sp,4
10008634:	000c8040 	call	1000c804 <__d2b>
10008638:	1039883a 	mov	fp,r2
1000863c:	88016a1e 	bne	r17,zero,10008be8 <_dtoa_r+0x710>
10008640:	dd000217 	ldw	r20,8(sp)
10008644:	dc400117 	ldw	r17,4(sp)
10008648:	00befbc4 	movi	r2,-1041
1000864c:	a463883a 	add	r17,r20,r17
10008650:	8882ea16 	blt	r17,r2,100091fc <_dtoa_r+0xd24>
10008654:	00bf0384 	movi	r2,-1010
10008658:	1445c83a 	sub	r2,r2,r17
1000865c:	89010484 	addi	r4,r17,1042
10008660:	a8aa983a 	sll	r21,r21,r2
10008664:	9108d83a 	srl	r4,r18,r4
10008668:	a908b03a 	or	r4,r21,r4
1000866c:	000f1d80 	call	1000f1d8 <__floatunsidf>
10008670:	017f8434 	movhi	r5,65040
10008674:	01800044 	movi	r6,1
10008678:	1009883a 	mov	r4,r2
1000867c:	194b883a 	add	r5,r3,r5
10008680:	8c7fffc4 	addi	r17,r17,-1
10008684:	d9800f15 	stw	r6,60(sp)
10008688:	000d883a 	mov	r6,zero
1000868c:	01cffe34 	movhi	r7,16376
10008690:	00053f80 	call	100053f8 <__subdf3>
10008694:	0198dbf4 	movhi	r6,25455
10008698:	01cff4f4 	movhi	r7,16339
1000869c:	1009883a 	mov	r4,r2
100086a0:	180b883a 	mov	r5,r3
100086a4:	3190d844 	addi	r6,r6,17249
100086a8:	39e1e9c4 	addi	r7,r7,-30809
100086ac:	0004b8c0 	call	10004b8c <__muldf3>
100086b0:	01a2d874 	movhi	r6,35681
100086b4:	01cff1f4 	movhi	r7,16327
100086b8:	180b883a 	mov	r5,r3
100086bc:	31b22cc4 	addi	r6,r6,-14157
100086c0:	39e28a04 	addi	r7,r7,-30168
100086c4:	1009883a 	mov	r4,r2
100086c8:	000372c0 	call	1000372c <__adddf3>
100086cc:	8809883a 	mov	r4,r17
100086d0:	102d883a 	mov	r22,r2
100086d4:	182b883a 	mov	r21,r3
100086d8:	0005d500 	call	10005d50 <__floatsidf>
100086dc:	019427f4 	movhi	r6,20639
100086e0:	01cff4f4 	movhi	r7,16339
100086e4:	1009883a 	mov	r4,r2
100086e8:	180b883a 	mov	r5,r3
100086ec:	319e7ec4 	addi	r6,r6,31227
100086f0:	39d104c4 	addi	r7,r7,17427
100086f4:	0004b8c0 	call	10004b8c <__muldf3>
100086f8:	b009883a 	mov	r4,r22
100086fc:	a80b883a 	mov	r5,r21
10008700:	100d883a 	mov	r6,r2
10008704:	180f883a 	mov	r7,r3
10008708:	000372c0 	call	1000372c <__adddf3>
1000870c:	1009883a 	mov	r4,r2
10008710:	180b883a 	mov	r5,r3
10008714:	102d883a 	mov	r22,r2
10008718:	182b883a 	mov	r21,r3
1000871c:	0005cc80 	call	10005cc8 <__fixdfsi>
10008720:	b009883a 	mov	r4,r22
10008724:	a80b883a 	mov	r5,r21
10008728:	000d883a 	mov	r6,zero
1000872c:	000f883a 	mov	r7,zero
10008730:	d8800515 	stw	r2,20(sp)
10008734:	0004aac0 	call	10004aac <__ledf2>
10008738:	10023116 	blt	r2,zero,10009000 <_dtoa_r+0xb28>
1000873c:	d8c00517 	ldw	r3,20(sp)
10008740:	00800584 	movi	r2,22
10008744:	10c21f36 	bltu	r2,r3,10008fc4 <_dtoa_r+0xaec>
10008748:	180490fa 	slli	r2,r3,3
1000874c:	00c40074 	movhi	r3,4097
10008750:	18c75004 	addi	r3,r3,7488
10008754:	1885883a 	add	r2,r3,r2
10008758:	11000017 	ldw	r4,0(r2)
1000875c:	11400117 	ldw	r5,4(r2)
10008760:	900d883a 	mov	r6,r18
10008764:	980f883a 	mov	r7,r19
10008768:	00049cc0 	call	100049cc <__gedf2>
1000876c:	0082a70e 	bge	zero,r2,1000920c <_dtoa_r+0xd34>
10008770:	d9000517 	ldw	r4,20(sp)
10008774:	d8000c15 	stw	zero,48(sp)
10008778:	213fffc4 	addi	r4,r4,-1
1000877c:	d9000515 	stw	r4,20(sp)
10008780:	a463c83a 	sub	r17,r20,r17
10008784:	8dbfffc4 	addi	r22,r17,-1
10008788:	b0021916 	blt	r22,zero,10008ff0 <_dtoa_r+0xb18>
1000878c:	d8000815 	stw	zero,32(sp)
10008790:	d8800517 	ldw	r2,20(sp)
10008794:	10020e16 	blt	r2,zero,10008fd0 <_dtoa_r+0xaf8>
10008798:	b0ad883a 	add	r22,r22,r2
1000879c:	d8800a15 	stw	r2,40(sp)
100087a0:	d8000915 	stw	zero,36(sp)
100087a4:	d8c00317 	ldw	r3,12(sp)
100087a8:	00800244 	movi	r2,9
100087ac:	10c11a36 	bltu	r2,r3,10008c18 <_dtoa_r+0x740>
100087b0:	00800144 	movi	r2,5
100087b4:	10c4fc0e 	bge	r2,r3,10009ba8 <_dtoa_r+0x16d0>
100087b8:	18ffff04 	addi	r3,r3,-4
100087bc:	d8c00315 	stw	r3,12(sp)
100087c0:	0029883a 	mov	r20,zero
100087c4:	d9800317 	ldw	r6,12(sp)
100087c8:	008000c4 	movi	r2,3
100087cc:	3083bd26 	beq	r6,r2,100096c4 <_dtoa_r+0x11ec>
100087d0:	1183670e 	bge	r2,r6,10009570 <_dtoa_r+0x1098>
100087d4:	d8c00317 	ldw	r3,12(sp)
100087d8:	00800104 	movi	r2,4
100087dc:	1882e726 	beq	r3,r2,1000937c <_dtoa_r+0xea4>
100087e0:	00800144 	movi	r2,5
100087e4:	1884f21e 	bne	r3,r2,10009bb0 <_dtoa_r+0x16d8>
100087e8:	00800044 	movi	r2,1
100087ec:	d8800b15 	stw	r2,44(sp)
100087f0:	d8c02217 	ldw	r3,136(sp)
100087f4:	d9000517 	ldw	r4,20(sp)
100087f8:	1907883a 	add	r3,r3,r4
100087fc:	19800044 	addi	r6,r3,1
10008800:	d8c00d15 	stw	r3,52(sp)
10008804:	d9800615 	stw	r6,24(sp)
10008808:	0183c30e 	bge	zero,r6,10009718 <_dtoa_r+0x1240>
1000880c:	d9800617 	ldw	r6,24(sp)
10008810:	3023883a 	mov	r17,r6
10008814:	80001115 	stw	zero,68(r16)
10008818:	008005c4 	movi	r2,23
1000881c:	1184f62e 	bgeu	r2,r6,10009bf8 <_dtoa_r+0x1720>
10008820:	00c00044 	movi	r3,1
10008824:	00800104 	movi	r2,4
10008828:	1085883a 	add	r2,r2,r2
1000882c:	11000504 	addi	r4,r2,20
10008830:	180b883a 	mov	r5,r3
10008834:	18c00044 	addi	r3,r3,1
10008838:	313ffb2e 	bgeu	r6,r4,10008828 <__alt_data_end+0xf8008828>
1000883c:	81401115 	stw	r5,68(r16)
10008840:	8009883a 	mov	r4,r16
10008844:	000bb140 	call	1000bb14 <_Balloc>
10008848:	d8800715 	stw	r2,28(sp)
1000884c:	80801015 	stw	r2,64(r16)
10008850:	00800384 	movi	r2,14
10008854:	1440fd36 	bltu	r2,r17,10008c4c <_dtoa_r+0x774>
10008858:	a000fc26 	beq	r20,zero,10008c4c <_dtoa_r+0x774>
1000885c:	d8800517 	ldw	r2,20(sp)
10008860:	0083b90e 	bge	zero,r2,10009748 <_dtoa_r+0x1270>
10008864:	d8c00517 	ldw	r3,20(sp)
10008868:	108003cc 	andi	r2,r2,15
1000886c:	100490fa 	slli	r2,r2,3
10008870:	182fd13a 	srai	r23,r3,4
10008874:	00c40074 	movhi	r3,4097
10008878:	18c75004 	addi	r3,r3,7488
1000887c:	1885883a 	add	r2,r3,r2
10008880:	b8c0040c 	andi	r3,r23,16
10008884:	12c00017 	ldw	r11,0(r2)
10008888:	12800117 	ldw	r10,4(r2)
1000888c:	18039726 	beq	r3,zero,100096ec <_dtoa_r+0x1214>
10008890:	00840074 	movhi	r2,4097
10008894:	10874604 	addi	r2,r2,7448
10008898:	11800817 	ldw	r6,32(r2)
1000889c:	11c00917 	ldw	r7,36(r2)
100088a0:	9009883a 	mov	r4,r18
100088a4:	980b883a 	mov	r5,r19
100088a8:	da801615 	stw	r10,88(sp)
100088ac:	dac01515 	stw	r11,84(sp)
100088b0:	0003fc80 	call	10003fc8 <__divdf3>
100088b4:	da801617 	ldw	r10,88(sp)
100088b8:	dac01517 	ldw	r11,84(sp)
100088bc:	bdc003cc 	andi	r23,r23,15
100088c0:	044000c4 	movi	r17,3
100088c4:	d8800e15 	stw	r2,56(sp)
100088c8:	182b883a 	mov	r21,r3
100088cc:	b8001126 	beq	r23,zero,10008914 <_dtoa_r+0x43c>
100088d0:	05040074 	movhi	r20,4097
100088d4:	a5074604 	addi	r20,r20,7448
100088d8:	5805883a 	mov	r2,r11
100088dc:	5007883a 	mov	r3,r10
100088e0:	b980004c 	andi	r6,r23,1
100088e4:	1009883a 	mov	r4,r2
100088e8:	b82fd07a 	srai	r23,r23,1
100088ec:	180b883a 	mov	r5,r3
100088f0:	30000426 	beq	r6,zero,10008904 <_dtoa_r+0x42c>
100088f4:	a1800017 	ldw	r6,0(r20)
100088f8:	a1c00117 	ldw	r7,4(r20)
100088fc:	8c400044 	addi	r17,r17,1
10008900:	0004b8c0 	call	10004b8c <__muldf3>
10008904:	a5000204 	addi	r20,r20,8
10008908:	b83ff51e 	bne	r23,zero,100088e0 <__alt_data_end+0xf80088e0>
1000890c:	1017883a 	mov	r11,r2
10008910:	1815883a 	mov	r10,r3
10008914:	d9000e17 	ldw	r4,56(sp)
10008918:	a80b883a 	mov	r5,r21
1000891c:	580d883a 	mov	r6,r11
10008920:	500f883a 	mov	r7,r10
10008924:	0003fc80 	call	10003fc8 <__divdf3>
10008928:	1029883a 	mov	r20,r2
1000892c:	182b883a 	mov	r21,r3
10008930:	d9800c17 	ldw	r6,48(sp)
10008934:	30000626 	beq	r6,zero,10008950 <_dtoa_r+0x478>
10008938:	a009883a 	mov	r4,r20
1000893c:	a80b883a 	mov	r5,r21
10008940:	000d883a 	mov	r6,zero
10008944:	01cffc34 	movhi	r7,16368
10008948:	0004aac0 	call	10004aac <__ledf2>
1000894c:	10043216 	blt	r2,zero,10009a18 <_dtoa_r+0x1540>
10008950:	8809883a 	mov	r4,r17
10008954:	0005d500 	call	10005d50 <__floatsidf>
10008958:	1009883a 	mov	r4,r2
1000895c:	180b883a 	mov	r5,r3
10008960:	a00d883a 	mov	r6,r20
10008964:	a80f883a 	mov	r7,r21
10008968:	0004b8c0 	call	10004b8c <__muldf3>
1000896c:	000d883a 	mov	r6,zero
10008970:	1009883a 	mov	r4,r2
10008974:	180b883a 	mov	r5,r3
10008978:	01d00734 	movhi	r7,16412
1000897c:	000372c0 	call	1000372c <__adddf3>
10008980:	1023883a 	mov	r17,r2
10008984:	d9800617 	ldw	r6,24(sp)
10008988:	00bf3034 	movhi	r2,64704
1000898c:	1885883a 	add	r2,r3,r2
10008990:	d8800e15 	stw	r2,56(sp)
10008994:	30032e26 	beq	r6,zero,10009650 <_dtoa_r+0x1178>
10008998:	d8c00517 	ldw	r3,20(sp)
1000899c:	da800617 	ldw	r10,24(sp)
100089a0:	d8c01215 	stw	r3,72(sp)
100089a4:	d9000b17 	ldw	r4,44(sp)
100089a8:	2003b026 	beq	r4,zero,1000986c <_dtoa_r+0x1394>
100089ac:	50bfffc4 	addi	r2,r10,-1
100089b0:	100490fa 	slli	r2,r2,3
100089b4:	00c40074 	movhi	r3,4097
100089b8:	18c75004 	addi	r3,r3,7488
100089bc:	1885883a 	add	r2,r3,r2
100089c0:	11800017 	ldw	r6,0(r2)
100089c4:	11c00117 	ldw	r7,4(r2)
100089c8:	d8800717 	ldw	r2,28(sp)
100089cc:	0009883a 	mov	r4,zero
100089d0:	014ff834 	movhi	r5,16352
100089d4:	da801615 	stw	r10,88(sp)
100089d8:	15c00044 	addi	r23,r2,1
100089dc:	0003fc80 	call	10003fc8 <__divdf3>
100089e0:	d9c00e17 	ldw	r7,56(sp)
100089e4:	880d883a 	mov	r6,r17
100089e8:	1009883a 	mov	r4,r2
100089ec:	180b883a 	mov	r5,r3
100089f0:	00053f80 	call	100053f8 <__subdf3>
100089f4:	a80b883a 	mov	r5,r21
100089f8:	a009883a 	mov	r4,r20
100089fc:	d8c01015 	stw	r3,64(sp)
10008a00:	d8800e15 	stw	r2,56(sp)
10008a04:	0005cc80 	call	10005cc8 <__fixdfsi>
10008a08:	1009883a 	mov	r4,r2
10008a0c:	d8801715 	stw	r2,92(sp)
10008a10:	0005d500 	call	10005d50 <__floatsidf>
10008a14:	a009883a 	mov	r4,r20
10008a18:	a80b883a 	mov	r5,r21
10008a1c:	100d883a 	mov	r6,r2
10008a20:	180f883a 	mov	r7,r3
10008a24:	00053f80 	call	100053f8 <__subdf3>
10008a28:	da001717 	ldw	r8,92(sp)
10008a2c:	1829883a 	mov	r20,r3
10008a30:	d8c00717 	ldw	r3,28(sp)
10008a34:	d9000e17 	ldw	r4,56(sp)
10008a38:	d9401017 	ldw	r5,64(sp)
10008a3c:	42000c04 	addi	r8,r8,48
10008a40:	1023883a 	mov	r17,r2
10008a44:	1a000005 	stb	r8,0(r3)
10008a48:	880d883a 	mov	r6,r17
10008a4c:	a00f883a 	mov	r7,r20
10008a50:	402b883a 	mov	r21,r8
10008a54:	00049cc0 	call	100049cc <__gedf2>
10008a58:	00844516 	blt	zero,r2,10009b70 <_dtoa_r+0x1698>
10008a5c:	0009883a 	mov	r4,zero
10008a60:	014ffc34 	movhi	r5,16368
10008a64:	880d883a 	mov	r6,r17
10008a68:	a00f883a 	mov	r7,r20
10008a6c:	00053f80 	call	100053f8 <__subdf3>
10008a70:	d9000e17 	ldw	r4,56(sp)
10008a74:	d9401017 	ldw	r5,64(sp)
10008a78:	100d883a 	mov	r6,r2
10008a7c:	180f883a 	mov	r7,r3
10008a80:	00049cc0 	call	100049cc <__gedf2>
10008a84:	da801617 	ldw	r10,88(sp)
10008a88:	00843616 	blt	zero,r2,10009b64 <_dtoa_r+0x168c>
10008a8c:	00800044 	movi	r2,1
10008a90:	12806e0e 	bge	r2,r10,10008c4c <_dtoa_r+0x774>
10008a94:	d9000717 	ldw	r4,28(sp)
10008a98:	dd801315 	stw	r22,76(sp)
10008a9c:	dc001115 	stw	r16,68(sp)
10008aa0:	2295883a 	add	r10,r4,r10
10008aa4:	dcc01415 	stw	r19,80(sp)
10008aa8:	502d883a 	mov	r22,r10
10008aac:	dcc01017 	ldw	r19,64(sp)
10008ab0:	b821883a 	mov	r16,r23
10008ab4:	dc801015 	stw	r18,64(sp)
10008ab8:	dc800e17 	ldw	r18,56(sp)
10008abc:	00000906 	br	10008ae4 <_dtoa_r+0x60c>
10008ac0:	00053f80 	call	100053f8 <__subdf3>
10008ac4:	1009883a 	mov	r4,r2
10008ac8:	180b883a 	mov	r5,r3
10008acc:	900d883a 	mov	r6,r18
10008ad0:	980f883a 	mov	r7,r19
10008ad4:	0004aac0 	call	10004aac <__ledf2>
10008ad8:	10040e16 	blt	r2,zero,10009b14 <_dtoa_r+0x163c>
10008adc:	b821883a 	mov	r16,r23
10008ae0:	bd841026 	beq	r23,r22,10009b24 <_dtoa_r+0x164c>
10008ae4:	9009883a 	mov	r4,r18
10008ae8:	980b883a 	mov	r5,r19
10008aec:	000d883a 	mov	r6,zero
10008af0:	01d00934 	movhi	r7,16420
10008af4:	0004b8c0 	call	10004b8c <__muldf3>
10008af8:	000d883a 	mov	r6,zero
10008afc:	01d00934 	movhi	r7,16420
10008b00:	8809883a 	mov	r4,r17
10008b04:	a00b883a 	mov	r5,r20
10008b08:	1025883a 	mov	r18,r2
10008b0c:	1827883a 	mov	r19,r3
10008b10:	0004b8c0 	call	10004b8c <__muldf3>
10008b14:	180b883a 	mov	r5,r3
10008b18:	1009883a 	mov	r4,r2
10008b1c:	1823883a 	mov	r17,r3
10008b20:	1029883a 	mov	r20,r2
10008b24:	0005cc80 	call	10005cc8 <__fixdfsi>
10008b28:	1009883a 	mov	r4,r2
10008b2c:	102b883a 	mov	r21,r2
10008b30:	0005d500 	call	10005d50 <__floatsidf>
10008b34:	a009883a 	mov	r4,r20
10008b38:	880b883a 	mov	r5,r17
10008b3c:	100d883a 	mov	r6,r2
10008b40:	180f883a 	mov	r7,r3
10008b44:	00053f80 	call	100053f8 <__subdf3>
10008b48:	ad400c04 	addi	r21,r21,48
10008b4c:	1009883a 	mov	r4,r2
10008b50:	180b883a 	mov	r5,r3
10008b54:	900d883a 	mov	r6,r18
10008b58:	980f883a 	mov	r7,r19
10008b5c:	85400005 	stb	r21,0(r16)
10008b60:	1023883a 	mov	r17,r2
10008b64:	1829883a 	mov	r20,r3
10008b68:	0004aac0 	call	10004aac <__ledf2>
10008b6c:	bdc00044 	addi	r23,r23,1
10008b70:	0009883a 	mov	r4,zero
10008b74:	014ffc34 	movhi	r5,16368
10008b78:	880d883a 	mov	r6,r17
10008b7c:	a00f883a 	mov	r7,r20
10008b80:	103fcf0e 	bge	r2,zero,10008ac0 <__alt_data_end+0xf8008ac0>
10008b84:	d9801217 	ldw	r6,72(sp)
10008b88:	dc001117 	ldw	r16,68(sp)
10008b8c:	d9800515 	stw	r6,20(sp)
10008b90:	8009883a 	mov	r4,r16
10008b94:	e00b883a 	mov	r5,fp
10008b98:	000bbbc0 	call	1000bbbc <_Bfree>
10008b9c:	d8c00517 	ldw	r3,20(sp)
10008ba0:	d9002317 	ldw	r4,140(sp)
10008ba4:	d9802517 	ldw	r6,148(sp)
10008ba8:	b8000005 	stb	zero,0(r23)
10008bac:	18800044 	addi	r2,r3,1
10008bb0:	20800015 	stw	r2,0(r4)
10008bb4:	30027226 	beq	r6,zero,10009580 <_dtoa_r+0x10a8>
10008bb8:	35c00015 	stw	r23,0(r6)
10008bbc:	d8800717 	ldw	r2,28(sp)
10008bc0:	003e7406 	br	10008594 <__alt_data_end+0xf8008594>
10008bc4:	00800434 	movhi	r2,16
10008bc8:	10bfffc4 	addi	r2,r2,-1
10008bcc:	a8aa703a 	and	r21,r21,r2
10008bd0:	a83e801e 	bne	r21,zero,100085d4 <__alt_data_end+0xf80085d4>
10008bd4:	00840074 	movhi	r2,4097
10008bd8:	10873204 	addi	r2,r2,7368
10008bdc:	003e7f06 	br	100085dc <__alt_data_end+0xf80085dc>
10008be0:	10c00204 	addi	r3,r2,8
10008be4:	003e8206 	br	100085f0 <__alt_data_end+0xf80085f0>
10008be8:	01400434 	movhi	r5,16
10008bec:	297fffc4 	addi	r5,r5,-1
10008bf0:	994a703a 	and	r5,r19,r5
10008bf4:	9009883a 	mov	r4,r18
10008bf8:	8c7f0044 	addi	r17,r17,-1023
10008bfc:	294ffc34 	orhi	r5,r5,16368
10008c00:	dd000217 	ldw	r20,8(sp)
10008c04:	d8000f15 	stw	zero,60(sp)
10008c08:	003e9f06 	br	10008688 <__alt_data_end+0xf8008688>
10008c0c:	00840074 	movhi	r2,4097
10008c10:	10872904 	addi	r2,r2,7332
10008c14:	003e5f06 	br	10008594 <__alt_data_end+0xf8008594>
10008c18:	80001115 	stw	zero,68(r16)
10008c1c:	8009883a 	mov	r4,r16
10008c20:	000b883a 	mov	r5,zero
10008c24:	000bb140 	call	1000bb14 <_Balloc>
10008c28:	01bfffc4 	movi	r6,-1
10008c2c:	d8800715 	stw	r2,28(sp)
10008c30:	80801015 	stw	r2,64(r16)
10008c34:	00800044 	movi	r2,1
10008c38:	d9800615 	stw	r6,24(sp)
10008c3c:	d8800b15 	stw	r2,44(sp)
10008c40:	d8002215 	stw	zero,136(sp)
10008c44:	d9800d15 	stw	r6,52(sp)
10008c48:	d8000315 	stw	zero,12(sp)
10008c4c:	d8800117 	ldw	r2,4(sp)
10008c50:	10008e16 	blt	r2,zero,10008e8c <_dtoa_r+0x9b4>
10008c54:	d9000517 	ldw	r4,20(sp)
10008c58:	00c00384 	movi	r3,14
10008c5c:	19008b16 	blt	r3,r4,10008e8c <_dtoa_r+0x9b4>
10008c60:	200490fa 	slli	r2,r4,3
10008c64:	00c40074 	movhi	r3,4097
10008c68:	d9802217 	ldw	r6,136(sp)
10008c6c:	18c75004 	addi	r3,r3,7488
10008c70:	1885883a 	add	r2,r3,r2
10008c74:	14400017 	ldw	r17,0(r2)
10008c78:	15000117 	ldw	r20,4(r2)
10008c7c:	3001c716 	blt	r6,zero,1000939c <_dtoa_r+0xec4>
10008c80:	880d883a 	mov	r6,r17
10008c84:	a00f883a 	mov	r7,r20
10008c88:	9009883a 	mov	r4,r18
10008c8c:	980b883a 	mov	r5,r19
10008c90:	0003fc80 	call	10003fc8 <__divdf3>
10008c94:	180b883a 	mov	r5,r3
10008c98:	1009883a 	mov	r4,r2
10008c9c:	0005cc80 	call	10005cc8 <__fixdfsi>
10008ca0:	1009883a 	mov	r4,r2
10008ca4:	102d883a 	mov	r22,r2
10008ca8:	0005d500 	call	10005d50 <__floatsidf>
10008cac:	1009883a 	mov	r4,r2
10008cb0:	180b883a 	mov	r5,r3
10008cb4:	880d883a 	mov	r6,r17
10008cb8:	a00f883a 	mov	r7,r20
10008cbc:	0004b8c0 	call	10004b8c <__muldf3>
10008cc0:	9009883a 	mov	r4,r18
10008cc4:	980b883a 	mov	r5,r19
10008cc8:	100d883a 	mov	r6,r2
10008ccc:	180f883a 	mov	r7,r3
10008cd0:	00053f80 	call	100053f8 <__subdf3>
10008cd4:	d9000717 	ldw	r4,28(sp)
10008cd8:	d9800617 	ldw	r6,24(sp)
10008cdc:	180b883a 	mov	r5,r3
10008ce0:	b0c00c04 	addi	r3,r22,48
10008ce4:	20c00005 	stb	r3,0(r4)
10008ce8:	25c00044 	addi	r23,r4,1
10008cec:	01000044 	movi	r4,1
10008cf0:	1011883a 	mov	r8,r2
10008cf4:	2807883a 	mov	r3,r5
10008cf8:	31003d26 	beq	r6,r4,10008df0 <_dtoa_r+0x918>
10008cfc:	000d883a 	mov	r6,zero
10008d00:	01d00934 	movhi	r7,16420
10008d04:	1009883a 	mov	r4,r2
10008d08:	0004b8c0 	call	10004b8c <__muldf3>
10008d0c:	1009883a 	mov	r4,r2
10008d10:	180b883a 	mov	r5,r3
10008d14:	000d883a 	mov	r6,zero
10008d18:	000f883a 	mov	r7,zero
10008d1c:	1027883a 	mov	r19,r2
10008d20:	182b883a 	mov	r21,r3
10008d24:	00049480 	call	10004948 <__eqdf2>
10008d28:	103f9926 	beq	r2,zero,10008b90 <__alt_data_end+0xf8008b90>
10008d2c:	d8c00617 	ldw	r3,24(sp)
10008d30:	d9000717 	ldw	r4,28(sp)
10008d34:	b825883a 	mov	r18,r23
10008d38:	18bfffc4 	addi	r2,r3,-1
10008d3c:	20ad883a 	add	r22,r4,r2
10008d40:	dc000315 	stw	r16,12(sp)
10008d44:	00000a06 	br	10008d70 <_dtoa_r+0x898>
10008d48:	0004b8c0 	call	10004b8c <__muldf3>
10008d4c:	1009883a 	mov	r4,r2
10008d50:	180b883a 	mov	r5,r3
10008d54:	000d883a 	mov	r6,zero
10008d58:	000f883a 	mov	r7,zero
10008d5c:	1027883a 	mov	r19,r2
10008d60:	182b883a 	mov	r21,r3
10008d64:	b825883a 	mov	r18,r23
10008d68:	00049480 	call	10004948 <__eqdf2>
10008d6c:	10022626 	beq	r2,zero,10009608 <_dtoa_r+0x1130>
10008d70:	880d883a 	mov	r6,r17
10008d74:	a00f883a 	mov	r7,r20
10008d78:	9809883a 	mov	r4,r19
10008d7c:	a80b883a 	mov	r5,r21
10008d80:	0003fc80 	call	10003fc8 <__divdf3>
10008d84:	180b883a 	mov	r5,r3
10008d88:	1009883a 	mov	r4,r2
10008d8c:	0005cc80 	call	10005cc8 <__fixdfsi>
10008d90:	1009883a 	mov	r4,r2
10008d94:	1021883a 	mov	r16,r2
10008d98:	0005d500 	call	10005d50 <__floatsidf>
10008d9c:	1009883a 	mov	r4,r2
10008da0:	180b883a 	mov	r5,r3
10008da4:	880d883a 	mov	r6,r17
10008da8:	a00f883a 	mov	r7,r20
10008dac:	0004b8c0 	call	10004b8c <__muldf3>
10008db0:	9809883a 	mov	r4,r19
10008db4:	a80b883a 	mov	r5,r21
10008db8:	100d883a 	mov	r6,r2
10008dbc:	180f883a 	mov	r7,r3
10008dc0:	00053f80 	call	100053f8 <__subdf3>
10008dc4:	82000c04 	addi	r8,r16,48
10008dc8:	92000005 	stb	r8,0(r18)
10008dcc:	1009883a 	mov	r4,r2
10008dd0:	180b883a 	mov	r5,r3
10008dd4:	000d883a 	mov	r6,zero
10008dd8:	01d00934 	movhi	r7,16420
10008ddc:	1011883a 	mov	r8,r2
10008de0:	bdc00044 	addi	r23,r23,1
10008de4:	95bfd81e 	bne	r18,r22,10008d48 <__alt_data_end+0xf8008d48>
10008de8:	802d883a 	mov	r22,r16
10008dec:	dc000317 	ldw	r16,12(sp)
10008df0:	4009883a 	mov	r4,r8
10008df4:	180b883a 	mov	r5,r3
10008df8:	400d883a 	mov	r6,r8
10008dfc:	180f883a 	mov	r7,r3
10008e00:	000372c0 	call	1000372c <__adddf3>
10008e04:	8809883a 	mov	r4,r17
10008e08:	a00b883a 	mov	r5,r20
10008e0c:	100d883a 	mov	r6,r2
10008e10:	180f883a 	mov	r7,r3
10008e14:	1027883a 	mov	r19,r2
10008e18:	1825883a 	mov	r18,r3
10008e1c:	0004aac0 	call	10004aac <__ledf2>
10008e20:	10000816 	blt	r2,zero,10008e44 <_dtoa_r+0x96c>
10008e24:	8809883a 	mov	r4,r17
10008e28:	a00b883a 	mov	r5,r20
10008e2c:	980d883a 	mov	r6,r19
10008e30:	900f883a 	mov	r7,r18
10008e34:	00049480 	call	10004948 <__eqdf2>
10008e38:	103f551e 	bne	r2,zero,10008b90 <__alt_data_end+0xf8008b90>
10008e3c:	b580004c 	andi	r22,r22,1
10008e40:	b03f5326 	beq	r22,zero,10008b90 <__alt_data_end+0xf8008b90>
10008e44:	bd7fffc3 	ldbu	r21,-1(r23)
10008e48:	b8bfffc4 	addi	r2,r23,-1
10008e4c:	1007883a 	mov	r3,r2
10008e50:	01400e44 	movi	r5,57
10008e54:	d9800717 	ldw	r6,28(sp)
10008e58:	00000506 	br	10008e70 <_dtoa_r+0x998>
10008e5c:	18ffffc4 	addi	r3,r3,-1
10008e60:	30825e26 	beq	r6,r2,100097dc <_dtoa_r+0x1304>
10008e64:	1d400003 	ldbu	r21,0(r3)
10008e68:	102f883a 	mov	r23,r2
10008e6c:	10bfffc4 	addi	r2,r2,-1
10008e70:	a9003fcc 	andi	r4,r21,255
10008e74:	2100201c 	xori	r4,r4,128
10008e78:	213fe004 	addi	r4,r4,-128
10008e7c:	217ff726 	beq	r4,r5,10008e5c <__alt_data_end+0xf8008e5c>
10008e80:	aa000044 	addi	r8,r21,1
10008e84:	12000005 	stb	r8,0(r2)
10008e88:	003f4106 	br	10008b90 <__alt_data_end+0xf8008b90>
10008e8c:	d8c00b17 	ldw	r3,44(sp)
10008e90:	18006726 	beq	r3,zero,10009030 <_dtoa_r+0xb58>
10008e94:	d9000317 	ldw	r4,12(sp)
10008e98:	00c00044 	movi	r3,1
10008e9c:	19016a0e 	bge	r3,r4,10009448 <_dtoa_r+0xf70>
10008ea0:	d8800617 	ldw	r2,24(sp)
10008ea4:	d8c00917 	ldw	r3,36(sp)
10008ea8:	157fffc4 	addi	r21,r2,-1
10008eac:	1d420716 	blt	r3,r21,100096cc <_dtoa_r+0x11f4>
10008eb0:	1d6bc83a 	sub	r21,r3,r21
10008eb4:	d8800617 	ldw	r2,24(sp)
10008eb8:	1002c716 	blt	r2,zero,100099d8 <_dtoa_r+0x1500>
10008ebc:	dd000817 	ldw	r20,32(sp)
10008ec0:	d8800617 	ldw	r2,24(sp)
10008ec4:	d9800817 	ldw	r6,32(sp)
10008ec8:	8009883a 	mov	r4,r16
10008ecc:	01400044 	movi	r5,1
10008ed0:	308d883a 	add	r6,r6,r2
10008ed4:	d9800815 	stw	r6,32(sp)
10008ed8:	b0ad883a 	add	r22,r22,r2
10008edc:	000bf3c0 	call	1000bf3c <__i2b>
10008ee0:	1023883a 	mov	r17,r2
10008ee4:	a0000826 	beq	r20,zero,10008f08 <_dtoa_r+0xa30>
10008ee8:	0580070e 	bge	zero,r22,10008f08 <_dtoa_r+0xa30>
10008eec:	b005883a 	mov	r2,r22
10008ef0:	a5812016 	blt	r20,r22,10009374 <_dtoa_r+0xe9c>
10008ef4:	d8c00817 	ldw	r3,32(sp)
10008ef8:	a0a9c83a 	sub	r20,r20,r2
10008efc:	b0adc83a 	sub	r22,r22,r2
10008f00:	1887c83a 	sub	r3,r3,r2
10008f04:	d8c00815 	stw	r3,32(sp)
10008f08:	d9000917 	ldw	r4,36(sp)
10008f0c:	0100140e 	bge	zero,r4,10008f60 <_dtoa_r+0xa88>
10008f10:	d9800b17 	ldw	r6,44(sp)
10008f14:	3001e526 	beq	r6,zero,100096ac <_dtoa_r+0x11d4>
10008f18:	05400e0e 	bge	zero,r21,10008f54 <_dtoa_r+0xa7c>
10008f1c:	880b883a 	mov	r5,r17
10008f20:	8009883a 	mov	r4,r16
10008f24:	a80d883a 	mov	r6,r21
10008f28:	000c2080 	call	1000c208 <__pow5mult>
10008f2c:	e00d883a 	mov	r6,fp
10008f30:	8009883a 	mov	r4,r16
10008f34:	100b883a 	mov	r5,r2
10008f38:	1023883a 	mov	r17,r2
10008f3c:	000bf780 	call	1000bf78 <__multiply>
10008f40:	102f883a 	mov	r23,r2
10008f44:	e00b883a 	mov	r5,fp
10008f48:	8009883a 	mov	r4,r16
10008f4c:	000bbbc0 	call	1000bbbc <_Bfree>
10008f50:	b839883a 	mov	fp,r23
10008f54:	d8800917 	ldw	r2,36(sp)
10008f58:	154dc83a 	sub	r6,r2,r21
10008f5c:	3001281e 	bne	r6,zero,10009400 <_dtoa_r+0xf28>
10008f60:	05c00044 	movi	r23,1
10008f64:	8009883a 	mov	r4,r16
10008f68:	b80b883a 	mov	r5,r23
10008f6c:	000bf3c0 	call	1000bf3c <__i2b>
10008f70:	d8c00a17 	ldw	r3,40(sp)
10008f74:	102b883a 	mov	r21,r2
10008f78:	00c0310e 	bge	zero,r3,10009040 <_dtoa_r+0xb68>
10008f7c:	8009883a 	mov	r4,r16
10008f80:	100b883a 	mov	r5,r2
10008f84:	180d883a 	mov	r6,r3
10008f88:	000c2080 	call	1000c208 <__pow5mult>
10008f8c:	d9000317 	ldw	r4,12(sp)
10008f90:	102b883a 	mov	r21,r2
10008f94:	b9011f0e 	bge	r23,r4,10009414 <_dtoa_r+0xf3c>
10008f98:	0027883a 	mov	r19,zero
10008f9c:	a8800417 	ldw	r2,16(r21)
10008fa0:	10800104 	addi	r2,r2,4
10008fa4:	1085883a 	add	r2,r2,r2
10008fa8:	1085883a 	add	r2,r2,r2
10008fac:	a885883a 	add	r2,r21,r2
10008fb0:	11000017 	ldw	r4,0(r2)
10008fb4:	000be240 	call	1000be24 <__hi0bits>
10008fb8:	00c00804 	movi	r3,32
10008fbc:	1885c83a 	sub	r2,r3,r2
10008fc0:	00002506 	br	10009058 <_dtoa_r+0xb80>
10008fc4:	01800044 	movi	r6,1
10008fc8:	d9800c15 	stw	r6,48(sp)
10008fcc:	003dec06 	br	10008780 <__alt_data_end+0xf8008780>
10008fd0:	d8c00817 	ldw	r3,32(sp)
10008fd4:	d9000517 	ldw	r4,20(sp)
10008fd8:	d8000a15 	stw	zero,40(sp)
10008fdc:	1907c83a 	sub	r3,r3,r4
10008fe0:	010dc83a 	sub	r6,zero,r4
10008fe4:	d8c00815 	stw	r3,32(sp)
10008fe8:	d9800915 	stw	r6,36(sp)
10008fec:	003ded06 	br	100087a4 <__alt_data_end+0xf80087a4>
10008ff0:	05adc83a 	sub	r22,zero,r22
10008ff4:	dd800815 	stw	r22,32(sp)
10008ff8:	002d883a 	mov	r22,zero
10008ffc:	003de406 	br	10008790 <__alt_data_end+0xf8008790>
10009000:	d9000517 	ldw	r4,20(sp)
10009004:	0005d500 	call	10005d50 <__floatsidf>
10009008:	1009883a 	mov	r4,r2
1000900c:	180b883a 	mov	r5,r3
10009010:	b00d883a 	mov	r6,r22
10009014:	a80f883a 	mov	r7,r21
10009018:	00049480 	call	10004948 <__eqdf2>
1000901c:	103dc726 	beq	r2,zero,1000873c <__alt_data_end+0xf800873c>
10009020:	d8800517 	ldw	r2,20(sp)
10009024:	10bfffc4 	addi	r2,r2,-1
10009028:	d8800515 	stw	r2,20(sp)
1000902c:	003dc306 	br	1000873c <__alt_data_end+0xf800873c>
10009030:	dd400917 	ldw	r21,36(sp)
10009034:	dd000817 	ldw	r20,32(sp)
10009038:	0023883a 	mov	r17,zero
1000903c:	003fa906 	br	10008ee4 <__alt_data_end+0xf8008ee4>
10009040:	d9800317 	ldw	r6,12(sp)
10009044:	b981670e 	bge	r23,r6,100095e4 <_dtoa_r+0x110c>
10009048:	0027883a 	mov	r19,zero
1000904c:	d8c00a17 	ldw	r3,40(sp)
10009050:	183fd21e 	bne	r3,zero,10008f9c <__alt_data_end+0xf8008f9c>
10009054:	00800044 	movi	r2,1
10009058:	1585883a 	add	r2,r2,r22
1000905c:	108007cc 	andi	r2,r2,31
10009060:	10005f26 	beq	r2,zero,100091e0 <_dtoa_r+0xd08>
10009064:	00c00804 	movi	r3,32
10009068:	1887c83a 	sub	r3,r3,r2
1000906c:	01000104 	movi	r4,4
10009070:	20c2dd0e 	bge	r4,r3,10009be8 <_dtoa_r+0x1710>
10009074:	d9000817 	ldw	r4,32(sp)
10009078:	00c00704 	movi	r3,28
1000907c:	1885c83a 	sub	r2,r3,r2
10009080:	2089883a 	add	r4,r4,r2
10009084:	d9000815 	stw	r4,32(sp)
10009088:	a0a9883a 	add	r20,r20,r2
1000908c:	b0ad883a 	add	r22,r22,r2
10009090:	d8800817 	ldw	r2,32(sp)
10009094:	0080050e 	bge	zero,r2,100090ac <_dtoa_r+0xbd4>
10009098:	e00b883a 	mov	r5,fp
1000909c:	8009883a 	mov	r4,r16
100090a0:	100d883a 	mov	r6,r2
100090a4:	000c3480 	call	1000c348 <__lshift>
100090a8:	1039883a 	mov	fp,r2
100090ac:	0580050e 	bge	zero,r22,100090c4 <_dtoa_r+0xbec>
100090b0:	a80b883a 	mov	r5,r21
100090b4:	8009883a 	mov	r4,r16
100090b8:	b00d883a 	mov	r6,r22
100090bc:	000c3480 	call	1000c348 <__lshift>
100090c0:	102b883a 	mov	r21,r2
100090c4:	d8c00c17 	ldw	r3,48(sp)
100090c8:	1801161e 	bne	r3,zero,10009524 <_dtoa_r+0x104c>
100090cc:	d8c00617 	ldw	r3,24(sp)
100090d0:	00c12d0e 	bge	zero,r3,10009588 <_dtoa_r+0x10b0>
100090d4:	d8c00b17 	ldw	r3,44(sp)
100090d8:	1800571e 	bne	r3,zero,10009238 <_dtoa_r+0xd60>
100090dc:	dc800717 	ldw	r18,28(sp)
100090e0:	dcc00617 	ldw	r19,24(sp)
100090e4:	9029883a 	mov	r20,r18
100090e8:	00000206 	br	100090f4 <_dtoa_r+0xc1c>
100090ec:	000bbe40 	call	1000bbe4 <__multadd>
100090f0:	1039883a 	mov	fp,r2
100090f4:	e009883a 	mov	r4,fp
100090f8:	a80b883a 	mov	r5,r21
100090fc:	00082b00 	call	100082b0 <quorem>
10009100:	10800c04 	addi	r2,r2,48
10009104:	90800005 	stb	r2,0(r18)
10009108:	94800044 	addi	r18,r18,1
1000910c:	9507c83a 	sub	r3,r18,r20
10009110:	8009883a 	mov	r4,r16
10009114:	e00b883a 	mov	r5,fp
10009118:	01800284 	movi	r6,10
1000911c:	000f883a 	mov	r7,zero
10009120:	1cfff216 	blt	r3,r19,100090ec <__alt_data_end+0xf80090ec>
10009124:	1011883a 	mov	r8,r2
10009128:	d8800617 	ldw	r2,24(sp)
1000912c:	00822e0e 	bge	zero,r2,100099e8 <_dtoa_r+0x1510>
10009130:	d9000717 	ldw	r4,28(sp)
10009134:	0025883a 	mov	r18,zero
10009138:	20af883a 	add	r23,r4,r2
1000913c:	e00b883a 	mov	r5,fp
10009140:	01800044 	movi	r6,1
10009144:	8009883a 	mov	r4,r16
10009148:	da001715 	stw	r8,92(sp)
1000914c:	000c3480 	call	1000c348 <__lshift>
10009150:	1009883a 	mov	r4,r2
10009154:	a80b883a 	mov	r5,r21
10009158:	1039883a 	mov	fp,r2
1000915c:	000c4900 	call	1000c490 <__mcmp>
10009160:	da001717 	ldw	r8,92(sp)
10009164:	00816e0e 	bge	zero,r2,10009720 <_dtoa_r+0x1248>
10009168:	b93fffc3 	ldbu	r4,-1(r23)
1000916c:	b8bfffc4 	addi	r2,r23,-1
10009170:	1007883a 	mov	r3,r2
10009174:	01800e44 	movi	r6,57
10009178:	d9c00717 	ldw	r7,28(sp)
1000917c:	00000506 	br	10009194 <_dtoa_r+0xcbc>
10009180:	18ffffc4 	addi	r3,r3,-1
10009184:	38811926 	beq	r7,r2,100095ec <_dtoa_r+0x1114>
10009188:	19000003 	ldbu	r4,0(r3)
1000918c:	102f883a 	mov	r23,r2
10009190:	10bfffc4 	addi	r2,r2,-1
10009194:	21403fcc 	andi	r5,r4,255
10009198:	2940201c 	xori	r5,r5,128
1000919c:	297fe004 	addi	r5,r5,-128
100091a0:	29bff726 	beq	r5,r6,10009180 <__alt_data_end+0xf8009180>
100091a4:	21000044 	addi	r4,r4,1
100091a8:	11000005 	stb	r4,0(r2)
100091ac:	8009883a 	mov	r4,r16
100091b0:	a80b883a 	mov	r5,r21
100091b4:	000bbbc0 	call	1000bbbc <_Bfree>
100091b8:	883e7526 	beq	r17,zero,10008b90 <__alt_data_end+0xf8008b90>
100091bc:	90000426 	beq	r18,zero,100091d0 <_dtoa_r+0xcf8>
100091c0:	94400326 	beq	r18,r17,100091d0 <_dtoa_r+0xcf8>
100091c4:	8009883a 	mov	r4,r16
100091c8:	900b883a 	mov	r5,r18
100091cc:	000bbbc0 	call	1000bbbc <_Bfree>
100091d0:	8009883a 	mov	r4,r16
100091d4:	880b883a 	mov	r5,r17
100091d8:	000bbbc0 	call	1000bbbc <_Bfree>
100091dc:	003e6c06 	br	10008b90 <__alt_data_end+0xf8008b90>
100091e0:	00800704 	movi	r2,28
100091e4:	d9800817 	ldw	r6,32(sp)
100091e8:	a0a9883a 	add	r20,r20,r2
100091ec:	b0ad883a 	add	r22,r22,r2
100091f0:	308d883a 	add	r6,r6,r2
100091f4:	d9800815 	stw	r6,32(sp)
100091f8:	003fa506 	br	10009090 <__alt_data_end+0xf8009090>
100091fc:	013efb84 	movi	r4,-1042
10009200:	246bc83a 	sub	r21,r4,r17
10009204:	9548983a 	sll	r4,r18,r21
10009208:	003d1806 	br	1000866c <__alt_data_end+0xf800866c>
1000920c:	d8000c15 	stw	zero,48(sp)
10009210:	003d5b06 	br	10008780 <__alt_data_end+0xf8008780>
10009214:	880b883a 	mov	r5,r17
10009218:	8009883a 	mov	r4,r16
1000921c:	01800284 	movi	r6,10
10009220:	000f883a 	mov	r7,zero
10009224:	000bbe40 	call	1000bbe4 <__multadd>
10009228:	1023883a 	mov	r17,r2
1000922c:	d8800d17 	ldw	r2,52(sp)
10009230:	0082550e 	bge	zero,r2,10009b88 <_dtoa_r+0x16b0>
10009234:	d8800615 	stw	r2,24(sp)
10009238:	0500050e 	bge	zero,r20,10009250 <_dtoa_r+0xd78>
1000923c:	880b883a 	mov	r5,r17
10009240:	8009883a 	mov	r4,r16
10009244:	a00d883a 	mov	r6,r20
10009248:	000c3480 	call	1000c348 <__lshift>
1000924c:	1023883a 	mov	r17,r2
10009250:	98016a1e 	bne	r19,zero,100097fc <_dtoa_r+0x1324>
10009254:	8829883a 	mov	r20,r17
10009258:	d9000617 	ldw	r4,24(sp)
1000925c:	dcc00717 	ldw	r19,28(sp)
10009260:	9480004c 	andi	r18,r18,1
10009264:	20bfffc4 	addi	r2,r4,-1
10009268:	9885883a 	add	r2,r19,r2
1000926c:	d8800415 	stw	r2,16(sp)
10009270:	dc800615 	stw	r18,24(sp)
10009274:	e009883a 	mov	r4,fp
10009278:	a80b883a 	mov	r5,r21
1000927c:	00082b00 	call	100082b0 <quorem>
10009280:	e009883a 	mov	r4,fp
10009284:	880b883a 	mov	r5,r17
10009288:	102f883a 	mov	r23,r2
1000928c:	000c4900 	call	1000c490 <__mcmp>
10009290:	8009883a 	mov	r4,r16
10009294:	a80b883a 	mov	r5,r21
10009298:	a00d883a 	mov	r6,r20
1000929c:	102d883a 	mov	r22,r2
100092a0:	000c4f00 	call	1000c4f0 <__mdiff>
100092a4:	1007883a 	mov	r3,r2
100092a8:	10800317 	ldw	r2,12(r2)
100092ac:	bc800c04 	addi	r18,r23,48
100092b0:	1000971e 	bne	r2,zero,10009510 <_dtoa_r+0x1038>
100092b4:	180b883a 	mov	r5,r3
100092b8:	e009883a 	mov	r4,fp
100092bc:	d8c01515 	stw	r3,84(sp)
100092c0:	000c4900 	call	1000c490 <__mcmp>
100092c4:	d8c01517 	ldw	r3,84(sp)
100092c8:	8009883a 	mov	r4,r16
100092cc:	d8801515 	stw	r2,84(sp)
100092d0:	180b883a 	mov	r5,r3
100092d4:	000bbbc0 	call	1000bbbc <_Bfree>
100092d8:	d8801517 	ldw	r2,84(sp)
100092dc:	1000041e 	bne	r2,zero,100092f0 <_dtoa_r+0xe18>
100092e0:	d9800317 	ldw	r6,12(sp)
100092e4:	3000021e 	bne	r6,zero,100092f0 <_dtoa_r+0xe18>
100092e8:	d8c00617 	ldw	r3,24(sp)
100092ec:	18007626 	beq	r3,zero,100094c8 <_dtoa_r+0xff0>
100092f0:	b0005b16 	blt	r22,zero,10009460 <_dtoa_r+0xf88>
100092f4:	b000041e 	bne	r22,zero,10009308 <_dtoa_r+0xe30>
100092f8:	d9000317 	ldw	r4,12(sp)
100092fc:	2000021e 	bne	r4,zero,10009308 <_dtoa_r+0xe30>
10009300:	d8c00617 	ldw	r3,24(sp)
10009304:	18005626 	beq	r3,zero,10009460 <_dtoa_r+0xf88>
10009308:	00814d16 	blt	zero,r2,10009840 <_dtoa_r+0x1368>
1000930c:	d8c00417 	ldw	r3,16(sp)
10009310:	9d800044 	addi	r22,r19,1
10009314:	9c800005 	stb	r18,0(r19)
10009318:	b02f883a 	mov	r23,r22
1000931c:	98c14c26 	beq	r19,r3,10009850 <_dtoa_r+0x1378>
10009320:	e00b883a 	mov	r5,fp
10009324:	8009883a 	mov	r4,r16
10009328:	01800284 	movi	r6,10
1000932c:	000f883a 	mov	r7,zero
10009330:	000bbe40 	call	1000bbe4 <__multadd>
10009334:	1039883a 	mov	fp,r2
10009338:	8d006d26 	beq	r17,r20,100094f0 <_dtoa_r+0x1018>
1000933c:	880b883a 	mov	r5,r17
10009340:	01800284 	movi	r6,10
10009344:	000f883a 	mov	r7,zero
10009348:	8009883a 	mov	r4,r16
1000934c:	000bbe40 	call	1000bbe4 <__multadd>
10009350:	a00b883a 	mov	r5,r20
10009354:	8009883a 	mov	r4,r16
10009358:	01800284 	movi	r6,10
1000935c:	000f883a 	mov	r7,zero
10009360:	1023883a 	mov	r17,r2
10009364:	000bbe40 	call	1000bbe4 <__multadd>
10009368:	1029883a 	mov	r20,r2
1000936c:	b027883a 	mov	r19,r22
10009370:	003fc006 	br	10009274 <__alt_data_end+0xf8009274>
10009374:	a005883a 	mov	r2,r20
10009378:	003ede06 	br	10008ef4 <__alt_data_end+0xf8008ef4>
1000937c:	01000044 	movi	r4,1
10009380:	d9000b15 	stw	r4,44(sp)
10009384:	d9802217 	ldw	r6,136(sp)
10009388:	0180dc0e 	bge	zero,r6,100096fc <_dtoa_r+0x1224>
1000938c:	3023883a 	mov	r17,r6
10009390:	d9800d15 	stw	r6,52(sp)
10009394:	d9800615 	stw	r6,24(sp)
10009398:	003d1e06 	br	10008814 <__alt_data_end+0xf8008814>
1000939c:	d8800617 	ldw	r2,24(sp)
100093a0:	00be3716 	blt	zero,r2,10008c80 <__alt_data_end+0xf8008c80>
100093a4:	1000be1e 	bne	r2,zero,100096a0 <_dtoa_r+0x11c8>
100093a8:	8809883a 	mov	r4,r17
100093ac:	a00b883a 	mov	r5,r20
100093b0:	000d883a 	mov	r6,zero
100093b4:	01d00534 	movhi	r7,16404
100093b8:	0004b8c0 	call	10004b8c <__muldf3>
100093bc:	1009883a 	mov	r4,r2
100093c0:	180b883a 	mov	r5,r3
100093c4:	900d883a 	mov	r6,r18
100093c8:	980f883a 	mov	r7,r19
100093cc:	00049cc0 	call	100049cc <__gedf2>
100093d0:	002b883a 	mov	r21,zero
100093d4:	0023883a 	mov	r17,zero
100093d8:	10007a16 	blt	r2,zero,100095c4 <_dtoa_r+0x10ec>
100093dc:	d9002217 	ldw	r4,136(sp)
100093e0:	ddc00717 	ldw	r23,28(sp)
100093e4:	0108303a 	nor	r4,zero,r4
100093e8:	d9000515 	stw	r4,20(sp)
100093ec:	8009883a 	mov	r4,r16
100093f0:	a80b883a 	mov	r5,r21
100093f4:	000bbbc0 	call	1000bbbc <_Bfree>
100093f8:	883f751e 	bne	r17,zero,100091d0 <__alt_data_end+0xf80091d0>
100093fc:	003de406 	br	10008b90 <__alt_data_end+0xf8008b90>
10009400:	e00b883a 	mov	r5,fp
10009404:	8009883a 	mov	r4,r16
10009408:	000c2080 	call	1000c208 <__pow5mult>
1000940c:	1039883a 	mov	fp,r2
10009410:	003ed306 	br	10008f60 <__alt_data_end+0xf8008f60>
10009414:	903ee01e 	bne	r18,zero,10008f98 <__alt_data_end+0xf8008f98>
10009418:	00800434 	movhi	r2,16
1000941c:	10bfffc4 	addi	r2,r2,-1
10009420:	9884703a 	and	r2,r19,r2
10009424:	103f081e 	bne	r2,zero,10009048 <__alt_data_end+0xf8009048>
10009428:	9cdffc2c 	andhi	r19,r19,32752
1000942c:	983f0626 	beq	r19,zero,10009048 <__alt_data_end+0xf8009048>
10009430:	d8800817 	ldw	r2,32(sp)
10009434:	b5800044 	addi	r22,r22,1
10009438:	04c00044 	movi	r19,1
1000943c:	10800044 	addi	r2,r2,1
10009440:	d8800815 	stw	r2,32(sp)
10009444:	003f0106 	br	1000904c <__alt_data_end+0xf800904c>
10009448:	d9800f17 	ldw	r6,60(sp)
1000944c:	30016826 	beq	r6,zero,100099f0 <_dtoa_r+0x1518>
10009450:	10810cc4 	addi	r2,r2,1075
10009454:	dd400917 	ldw	r21,36(sp)
10009458:	dd000817 	ldw	r20,32(sp)
1000945c:	003e9906 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10009460:	9011883a 	mov	r8,r18
10009464:	4007883a 	mov	r3,r8
10009468:	e02d883a 	mov	r22,fp
1000946c:	0080100e 	bge	zero,r2,100094b0 <_dtoa_r+0xfd8>
10009470:	01800044 	movi	r6,1
10009474:	8009883a 	mov	r4,r16
10009478:	e00b883a 	mov	r5,fp
1000947c:	da001515 	stw	r8,84(sp)
10009480:	da001715 	stw	r8,92(sp)
10009484:	000c3480 	call	1000c348 <__lshift>
10009488:	1009883a 	mov	r4,r2
1000948c:	a80b883a 	mov	r5,r21
10009490:	102d883a 	mov	r22,r2
10009494:	000c4900 	call	1000c490 <__mcmp>
10009498:	d8c01517 	ldw	r3,84(sp)
1000949c:	da001717 	ldw	r8,92(sp)
100094a0:	0081a50e 	bge	zero,r2,10009b38 <_dtoa_r+0x1660>
100094a4:	00800e44 	movi	r2,57
100094a8:	40817b26 	beq	r8,r2,10009a98 <_dtoa_r+0x15c0>
100094ac:	40c00044 	addi	r3,r8,1
100094b0:	8825883a 	mov	r18,r17
100094b4:	9dc00044 	addi	r23,r19,1
100094b8:	98c00005 	stb	r3,0(r19)
100094bc:	a023883a 	mov	r17,r20
100094c0:	b039883a 	mov	fp,r22
100094c4:	003f3906 	br	100091ac <__alt_data_end+0xf80091ac>
100094c8:	00800e44 	movi	r2,57
100094cc:	9011883a 	mov	r8,r18
100094d0:	90817226 	beq	r18,r2,10009a9c <_dtoa_r+0x15c4>
100094d4:	0580010e 	bge	zero,r22,100094dc <_dtoa_r+0x1004>
100094d8:	ba000c44 	addi	r8,r23,49
100094dc:	8825883a 	mov	r18,r17
100094e0:	9dc00044 	addi	r23,r19,1
100094e4:	9a000005 	stb	r8,0(r19)
100094e8:	a023883a 	mov	r17,r20
100094ec:	003f2f06 	br	100091ac <__alt_data_end+0xf80091ac>
100094f0:	880b883a 	mov	r5,r17
100094f4:	8009883a 	mov	r4,r16
100094f8:	01800284 	movi	r6,10
100094fc:	000f883a 	mov	r7,zero
10009500:	000bbe40 	call	1000bbe4 <__multadd>
10009504:	1023883a 	mov	r17,r2
10009508:	1029883a 	mov	r20,r2
1000950c:	003f9706 	br	1000936c <__alt_data_end+0xf800936c>
10009510:	8009883a 	mov	r4,r16
10009514:	180b883a 	mov	r5,r3
10009518:	000bbbc0 	call	1000bbbc <_Bfree>
1000951c:	00800044 	movi	r2,1
10009520:	003f7306 	br	100092f0 <__alt_data_end+0xf80092f0>
10009524:	e009883a 	mov	r4,fp
10009528:	a80b883a 	mov	r5,r21
1000952c:	000c4900 	call	1000c490 <__mcmp>
10009530:	103ee60e 	bge	r2,zero,100090cc <__alt_data_end+0xf80090cc>
10009534:	8009883a 	mov	r4,r16
10009538:	e00b883a 	mov	r5,fp
1000953c:	01800284 	movi	r6,10
10009540:	000f883a 	mov	r7,zero
10009544:	000bbe40 	call	1000bbe4 <__multadd>
10009548:	d9000517 	ldw	r4,20(sp)
1000954c:	d9800b17 	ldw	r6,44(sp)
10009550:	1039883a 	mov	fp,r2
10009554:	213fffc4 	addi	r4,r4,-1
10009558:	d9000515 	stw	r4,20(sp)
1000955c:	303f2d1e 	bne	r6,zero,10009214 <__alt_data_end+0xf8009214>
10009560:	d9000d17 	ldw	r4,52(sp)
10009564:	0101780e 	bge	zero,r4,10009b48 <_dtoa_r+0x1670>
10009568:	d9000615 	stw	r4,24(sp)
1000956c:	003edb06 	br	100090dc <__alt_data_end+0xf80090dc>
10009570:	00800084 	movi	r2,2
10009574:	30818e1e 	bne	r6,r2,10009bb0 <_dtoa_r+0x16d8>
10009578:	d8000b15 	stw	zero,44(sp)
1000957c:	003f8106 	br	10009384 <__alt_data_end+0xf8009384>
10009580:	d8800717 	ldw	r2,28(sp)
10009584:	003c0306 	br	10008594 <__alt_data_end+0xf8008594>
10009588:	d9000317 	ldw	r4,12(sp)
1000958c:	00800084 	movi	r2,2
10009590:	113ed00e 	bge	r2,r4,100090d4 <__alt_data_end+0xf80090d4>
10009594:	d8c00617 	ldw	r3,24(sp)
10009598:	183f901e 	bne	r3,zero,100093dc <__alt_data_end+0xf80093dc>
1000959c:	a80b883a 	mov	r5,r21
100095a0:	8009883a 	mov	r4,r16
100095a4:	01800144 	movi	r6,5
100095a8:	000f883a 	mov	r7,zero
100095ac:	000bbe40 	call	1000bbe4 <__multadd>
100095b0:	e009883a 	mov	r4,fp
100095b4:	100b883a 	mov	r5,r2
100095b8:	102b883a 	mov	r21,r2
100095bc:	000c4900 	call	1000c490 <__mcmp>
100095c0:	00bf860e 	bge	zero,r2,100093dc <__alt_data_end+0xf80093dc>
100095c4:	d9800717 	ldw	r6,28(sp)
100095c8:	00800c44 	movi	r2,49
100095cc:	30800005 	stb	r2,0(r6)
100095d0:	d8800517 	ldw	r2,20(sp)
100095d4:	35c00044 	addi	r23,r6,1
100095d8:	10800044 	addi	r2,r2,1
100095dc:	d8800515 	stw	r2,20(sp)
100095e0:	003f8206 	br	100093ec <__alt_data_end+0xf80093ec>
100095e4:	903e981e 	bne	r18,zero,10009048 <__alt_data_end+0xf8009048>
100095e8:	003f8b06 	br	10009418 <__alt_data_end+0xf8009418>
100095ec:	d9800517 	ldw	r6,20(sp)
100095f0:	d8c00717 	ldw	r3,28(sp)
100095f4:	00800c44 	movi	r2,49
100095f8:	31800044 	addi	r6,r6,1
100095fc:	d9800515 	stw	r6,20(sp)
10009600:	18800005 	stb	r2,0(r3)
10009604:	003ee906 	br	100091ac <__alt_data_end+0xf80091ac>
10009608:	dc000317 	ldw	r16,12(sp)
1000960c:	003d6006 	br	10008b90 <__alt_data_end+0xf8008b90>
10009610:	8809883a 	mov	r4,r17
10009614:	0005d500 	call	10005d50 <__floatsidf>
10009618:	a009883a 	mov	r4,r20
1000961c:	a80b883a 	mov	r5,r21
10009620:	100d883a 	mov	r6,r2
10009624:	180f883a 	mov	r7,r3
10009628:	0004b8c0 	call	10004b8c <__muldf3>
1000962c:	1009883a 	mov	r4,r2
10009630:	180b883a 	mov	r5,r3
10009634:	000d883a 	mov	r6,zero
10009638:	01d00734 	movhi	r7,16412
1000963c:	000372c0 	call	1000372c <__adddf3>
10009640:	1023883a 	mov	r17,r2
10009644:	00bf3034 	movhi	r2,64704
10009648:	1885883a 	add	r2,r3,r2
1000964c:	d8800e15 	stw	r2,56(sp)
10009650:	a009883a 	mov	r4,r20
10009654:	a80b883a 	mov	r5,r21
10009658:	000d883a 	mov	r6,zero
1000965c:	01d00534 	movhi	r7,16404
10009660:	00053f80 	call	100053f8 <__subdf3>
10009664:	d9c00e17 	ldw	r7,56(sp)
10009668:	1009883a 	mov	r4,r2
1000966c:	180b883a 	mov	r5,r3
10009670:	880d883a 	mov	r6,r17
10009674:	102b883a 	mov	r21,r2
10009678:	1829883a 	mov	r20,r3
1000967c:	00049cc0 	call	100049cc <__gedf2>
10009680:	00807716 	blt	zero,r2,10009860 <_dtoa_r+0x1388>
10009684:	d8800e17 	ldw	r2,56(sp)
10009688:	a809883a 	mov	r4,r21
1000968c:	a00b883a 	mov	r5,r20
10009690:	11e0003c 	xorhi	r7,r2,32768
10009694:	880d883a 	mov	r6,r17
10009698:	0004aac0 	call	10004aac <__ledf2>
1000969c:	103d6b0e 	bge	r2,zero,10008c4c <__alt_data_end+0xf8008c4c>
100096a0:	002b883a 	mov	r21,zero
100096a4:	0023883a 	mov	r17,zero
100096a8:	003f4c06 	br	100093dc <__alt_data_end+0xf80093dc>
100096ac:	d9800917 	ldw	r6,36(sp)
100096b0:	e00b883a 	mov	r5,fp
100096b4:	8009883a 	mov	r4,r16
100096b8:	000c2080 	call	1000c208 <__pow5mult>
100096bc:	1039883a 	mov	fp,r2
100096c0:	003e2706 	br	10008f60 <__alt_data_end+0xf8008f60>
100096c4:	d8000b15 	stw	zero,44(sp)
100096c8:	003c4906 	br	100087f0 <__alt_data_end+0xf80087f0>
100096cc:	d9000917 	ldw	r4,36(sp)
100096d0:	d9800a17 	ldw	r6,40(sp)
100096d4:	dd400915 	stw	r21,36(sp)
100096d8:	a905c83a 	sub	r2,r21,r4
100096dc:	308d883a 	add	r6,r6,r2
100096e0:	d9800a15 	stw	r6,40(sp)
100096e4:	002b883a 	mov	r21,zero
100096e8:	003df206 	br	10008eb4 <__alt_data_end+0xf8008eb4>
100096ec:	dc800e15 	stw	r18,56(sp)
100096f0:	982b883a 	mov	r21,r19
100096f4:	04400084 	movi	r17,2
100096f8:	003c7406 	br	100088cc <__alt_data_end+0xf80088cc>
100096fc:	04400044 	movi	r17,1
10009700:	dc400d15 	stw	r17,52(sp)
10009704:	dc400615 	stw	r17,24(sp)
10009708:	dc402215 	stw	r17,136(sp)
1000970c:	80001115 	stw	zero,68(r16)
10009710:	000b883a 	mov	r5,zero
10009714:	003c4a06 	br	10008840 <__alt_data_end+0xf8008840>
10009718:	3023883a 	mov	r17,r6
1000971c:	003ffb06 	br	1000970c <__alt_data_end+0xf800970c>
10009720:	1000021e 	bne	r2,zero,1000972c <_dtoa_r+0x1254>
10009724:	4200004c 	andi	r8,r8,1
10009728:	403e8f1e 	bne	r8,zero,10009168 <__alt_data_end+0xf8009168>
1000972c:	01000c04 	movi	r4,48
10009730:	00000106 	br	10009738 <_dtoa_r+0x1260>
10009734:	102f883a 	mov	r23,r2
10009738:	b8bfffc4 	addi	r2,r23,-1
1000973c:	10c00007 	ldb	r3,0(r2)
10009740:	193ffc26 	beq	r3,r4,10009734 <__alt_data_end+0xf8009734>
10009744:	003e9906 	br	100091ac <__alt_data_end+0xf80091ac>
10009748:	d9000517 	ldw	r4,20(sp)
1000974c:	012fc83a 	sub	r23,zero,r4
10009750:	b800ad26 	beq	r23,zero,10009a08 <_dtoa_r+0x1530>
10009754:	b88003cc 	andi	r2,r23,15
10009758:	100490fa 	slli	r2,r2,3
1000975c:	00c40074 	movhi	r3,4097
10009760:	18c75004 	addi	r3,r3,7488
10009764:	1885883a 	add	r2,r3,r2
10009768:	11800017 	ldw	r6,0(r2)
1000976c:	11c00117 	ldw	r7,4(r2)
10009770:	b82fd13a 	srai	r23,r23,4
10009774:	9009883a 	mov	r4,r18
10009778:	980b883a 	mov	r5,r19
1000977c:	0004b8c0 	call	10004b8c <__muldf3>
10009780:	1029883a 	mov	r20,r2
10009784:	182b883a 	mov	r21,r3
10009788:	b800f426 	beq	r23,zero,10009b5c <_dtoa_r+0x1684>
1000978c:	02040074 	movhi	r8,4097
10009790:	42074604 	addi	r8,r8,7448
10009794:	8029883a 	mov	r20,r16
10009798:	04400084 	movi	r17,2
1000979c:	4021883a 	mov	r16,r8
100097a0:	b980004c 	andi	r6,r23,1
100097a4:	1009883a 	mov	r4,r2
100097a8:	b82fd07a 	srai	r23,r23,1
100097ac:	180b883a 	mov	r5,r3
100097b0:	30000426 	beq	r6,zero,100097c4 <_dtoa_r+0x12ec>
100097b4:	81800017 	ldw	r6,0(r16)
100097b8:	81c00117 	ldw	r7,4(r16)
100097bc:	8c400044 	addi	r17,r17,1
100097c0:	0004b8c0 	call	10004b8c <__muldf3>
100097c4:	84000204 	addi	r16,r16,8
100097c8:	b83ff51e 	bne	r23,zero,100097a0 <__alt_data_end+0xf80097a0>
100097cc:	a021883a 	mov	r16,r20
100097d0:	182b883a 	mov	r21,r3
100097d4:	1029883a 	mov	r20,r2
100097d8:	003c5506 	br	10008930 <__alt_data_end+0xf8008930>
100097dc:	d9800517 	ldw	r6,20(sp)
100097e0:	d9000717 	ldw	r4,28(sp)
100097e4:	00c00c04 	movi	r3,48
100097e8:	31800044 	addi	r6,r6,1
100097ec:	d9800515 	stw	r6,20(sp)
100097f0:	20c00005 	stb	r3,0(r4)
100097f4:	02000c44 	movi	r8,49
100097f8:	003da206 	br	10008e84 <__alt_data_end+0xf8008e84>
100097fc:	89400117 	ldw	r5,4(r17)
10009800:	8009883a 	mov	r4,r16
10009804:	000bb140 	call	1000bb14 <_Balloc>
10009808:	89800417 	ldw	r6,16(r17)
1000980c:	11000304 	addi	r4,r2,12
10009810:	89400304 	addi	r5,r17,12
10009814:	31800084 	addi	r6,r6,2
10009818:	318d883a 	add	r6,r6,r6
1000981c:	318d883a 	add	r6,r6,r6
10009820:	1027883a 	mov	r19,r2
10009824:	000b75c0 	call	1000b75c <memcpy>
10009828:	8009883a 	mov	r4,r16
1000982c:	980b883a 	mov	r5,r19
10009830:	01800044 	movi	r6,1
10009834:	000c3480 	call	1000c348 <__lshift>
10009838:	1029883a 	mov	r20,r2
1000983c:	003e8606 	br	10009258 <__alt_data_end+0xf8009258>
10009840:	00800e44 	movi	r2,57
10009844:	90809526 	beq	r18,r2,10009a9c <_dtoa_r+0x15c4>
10009848:	92000044 	addi	r8,r18,1
1000984c:	003f2306 	br	100094dc <__alt_data_end+0xf80094dc>
10009850:	9011883a 	mov	r8,r18
10009854:	8825883a 	mov	r18,r17
10009858:	a023883a 	mov	r17,r20
1000985c:	003e3706 	br	1000913c <__alt_data_end+0xf800913c>
10009860:	002b883a 	mov	r21,zero
10009864:	0023883a 	mov	r17,zero
10009868:	003f5606 	br	100095c4 <__alt_data_end+0xf80095c4>
1000986c:	51bfffc4 	addi	r6,r10,-1
10009870:	300490fa 	slli	r2,r6,3
10009874:	00c40074 	movhi	r3,4097
10009878:	18c75004 	addi	r3,r3,7488
1000987c:	1885883a 	add	r2,r3,r2
10009880:	d9c00e17 	ldw	r7,56(sp)
10009884:	11000017 	ldw	r4,0(r2)
10009888:	11400117 	ldw	r5,4(r2)
1000988c:	d8800717 	ldw	r2,28(sp)
10009890:	d9801015 	stw	r6,64(sp)
10009894:	880d883a 	mov	r6,r17
10009898:	da801615 	stw	r10,88(sp)
1000989c:	15c00044 	addi	r23,r2,1
100098a0:	0004b8c0 	call	10004b8c <__muldf3>
100098a4:	a80b883a 	mov	r5,r21
100098a8:	a009883a 	mov	r4,r20
100098ac:	d8c01115 	stw	r3,68(sp)
100098b0:	d8800e15 	stw	r2,56(sp)
100098b4:	0005cc80 	call	10005cc8 <__fixdfsi>
100098b8:	1009883a 	mov	r4,r2
100098bc:	1023883a 	mov	r17,r2
100098c0:	0005d500 	call	10005d50 <__floatsidf>
100098c4:	a009883a 	mov	r4,r20
100098c8:	a80b883a 	mov	r5,r21
100098cc:	100d883a 	mov	r6,r2
100098d0:	180f883a 	mov	r7,r3
100098d4:	00053f80 	call	100053f8 <__subdf3>
100098d8:	1813883a 	mov	r9,r3
100098dc:	d8c00717 	ldw	r3,28(sp)
100098e0:	8c400c04 	addi	r17,r17,48
100098e4:	1011883a 	mov	r8,r2
100098e8:	1c400005 	stb	r17,0(r3)
100098ec:	da801617 	ldw	r10,88(sp)
100098f0:	00800044 	movi	r2,1
100098f4:	50802326 	beq	r10,r2,10009984 <_dtoa_r+0x14ac>
100098f8:	d8800717 	ldw	r2,28(sp)
100098fc:	b82b883a 	mov	r21,r23
10009900:	dc001315 	stw	r16,76(sp)
10009904:	12a9883a 	add	r20,r2,r10
10009908:	4807883a 	mov	r3,r9
1000990c:	4005883a 	mov	r2,r8
10009910:	dc801415 	stw	r18,80(sp)
10009914:	000d883a 	mov	r6,zero
10009918:	01d00934 	movhi	r7,16420
1000991c:	1009883a 	mov	r4,r2
10009920:	180b883a 	mov	r5,r3
10009924:	0004b8c0 	call	10004b8c <__muldf3>
10009928:	180b883a 	mov	r5,r3
1000992c:	1009883a 	mov	r4,r2
10009930:	1821883a 	mov	r16,r3
10009934:	1025883a 	mov	r18,r2
10009938:	0005cc80 	call	10005cc8 <__fixdfsi>
1000993c:	1009883a 	mov	r4,r2
10009940:	1023883a 	mov	r17,r2
10009944:	0005d500 	call	10005d50 <__floatsidf>
10009948:	9009883a 	mov	r4,r18
1000994c:	800b883a 	mov	r5,r16
10009950:	100d883a 	mov	r6,r2
10009954:	180f883a 	mov	r7,r3
10009958:	8c400c04 	addi	r17,r17,48
1000995c:	00053f80 	call	100053f8 <__subdf3>
10009960:	ad400044 	addi	r21,r21,1
10009964:	ac7fffc5 	stb	r17,-1(r21)
10009968:	ad3fea1e 	bne	r21,r20,10009914 <__alt_data_end+0xf8009914>
1000996c:	1813883a 	mov	r9,r3
10009970:	d8c01017 	ldw	r3,64(sp)
10009974:	dc001317 	ldw	r16,76(sp)
10009978:	dc801417 	ldw	r18,80(sp)
1000997c:	1011883a 	mov	r8,r2
10009980:	b8ef883a 	add	r23,r23,r3
10009984:	d9000e17 	ldw	r4,56(sp)
10009988:	d9401117 	ldw	r5,68(sp)
1000998c:	000d883a 	mov	r6,zero
10009990:	01cff834 	movhi	r7,16352
10009994:	da001715 	stw	r8,92(sp)
10009998:	da401515 	stw	r9,84(sp)
1000999c:	000372c0 	call	1000372c <__adddf3>
100099a0:	da001717 	ldw	r8,92(sp)
100099a4:	da401517 	ldw	r9,84(sp)
100099a8:	1009883a 	mov	r4,r2
100099ac:	400d883a 	mov	r6,r8
100099b0:	480f883a 	mov	r7,r9
100099b4:	180b883a 	mov	r5,r3
100099b8:	0004aac0 	call	10004aac <__ledf2>
100099bc:	da001717 	ldw	r8,92(sp)
100099c0:	da401517 	ldw	r9,84(sp)
100099c4:	10003b0e 	bge	r2,zero,10009ab4 <_dtoa_r+0x15dc>
100099c8:	d9001217 	ldw	r4,72(sp)
100099cc:	bd7fffc3 	ldbu	r21,-1(r23)
100099d0:	d9000515 	stw	r4,20(sp)
100099d4:	003d1c06 	br	10008e48 <__alt_data_end+0xf8008e48>
100099d8:	d8c00817 	ldw	r3,32(sp)
100099dc:	18a9c83a 	sub	r20,r3,r2
100099e0:	0005883a 	mov	r2,zero
100099e4:	003d3706 	br	10008ec4 <__alt_data_end+0xf8008ec4>
100099e8:	00800044 	movi	r2,1
100099ec:	003dd006 	br	10009130 <__alt_data_end+0xf8009130>
100099f0:	d8c00217 	ldw	r3,8(sp)
100099f4:	00800d84 	movi	r2,54
100099f8:	dd400917 	ldw	r21,36(sp)
100099fc:	10c5c83a 	sub	r2,r2,r3
10009a00:	dd000817 	ldw	r20,32(sp)
10009a04:	003d2f06 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10009a08:	9029883a 	mov	r20,r18
10009a0c:	982b883a 	mov	r21,r19
10009a10:	04400084 	movi	r17,2
10009a14:	003bc606 	br	10008930 <__alt_data_end+0xf8008930>
10009a18:	d8800617 	ldw	r2,24(sp)
10009a1c:	103efc26 	beq	r2,zero,10009610 <__alt_data_end+0xf8009610>
10009a20:	d8c00d17 	ldw	r3,52(sp)
10009a24:	00fc890e 	bge	zero,r3,10008c4c <__alt_data_end+0xf8008c4c>
10009a28:	a80b883a 	mov	r5,r21
10009a2c:	a009883a 	mov	r4,r20
10009a30:	000d883a 	mov	r6,zero
10009a34:	01d00934 	movhi	r7,16420
10009a38:	0004b8c0 	call	10004b8c <__muldf3>
10009a3c:	89000044 	addi	r4,r17,1
10009a40:	1029883a 	mov	r20,r2
10009a44:	182b883a 	mov	r21,r3
10009a48:	0005d500 	call	10005d50 <__floatsidf>
10009a4c:	a009883a 	mov	r4,r20
10009a50:	a80b883a 	mov	r5,r21
10009a54:	100d883a 	mov	r6,r2
10009a58:	180f883a 	mov	r7,r3
10009a5c:	0004b8c0 	call	10004b8c <__muldf3>
10009a60:	1009883a 	mov	r4,r2
10009a64:	180b883a 	mov	r5,r3
10009a68:	000d883a 	mov	r6,zero
10009a6c:	01d00734 	movhi	r7,16412
10009a70:	000372c0 	call	1000372c <__adddf3>
10009a74:	d9000517 	ldw	r4,20(sp)
10009a78:	1023883a 	mov	r17,r2
10009a7c:	00bf3034 	movhi	r2,64704
10009a80:	213fffc4 	addi	r4,r4,-1
10009a84:	1885883a 	add	r2,r3,r2
10009a88:	d9001215 	stw	r4,72(sp)
10009a8c:	d8800e15 	stw	r2,56(sp)
10009a90:	da800d17 	ldw	r10,52(sp)
10009a94:	003bc306 	br	100089a4 <__alt_data_end+0xf80089a4>
10009a98:	b039883a 	mov	fp,r22
10009a9c:	01000e44 	movi	r4,57
10009aa0:	8825883a 	mov	r18,r17
10009aa4:	9dc00044 	addi	r23,r19,1
10009aa8:	99000005 	stb	r4,0(r19)
10009aac:	a023883a 	mov	r17,r20
10009ab0:	003dae06 	br	1000916c <__alt_data_end+0xf800916c>
10009ab4:	d9800e17 	ldw	r6,56(sp)
10009ab8:	d9c01117 	ldw	r7,68(sp)
10009abc:	0009883a 	mov	r4,zero
10009ac0:	014ff834 	movhi	r5,16352
10009ac4:	da001715 	stw	r8,92(sp)
10009ac8:	da401515 	stw	r9,84(sp)
10009acc:	00053f80 	call	100053f8 <__subdf3>
10009ad0:	da001717 	ldw	r8,92(sp)
10009ad4:	da401517 	ldw	r9,84(sp)
10009ad8:	1009883a 	mov	r4,r2
10009adc:	180b883a 	mov	r5,r3
10009ae0:	400d883a 	mov	r6,r8
10009ae4:	480f883a 	mov	r7,r9
10009ae8:	00049cc0 	call	100049cc <__gedf2>
10009aec:	00bc570e 	bge	zero,r2,10008c4c <__alt_data_end+0xf8008c4c>
10009af0:	01000c04 	movi	r4,48
10009af4:	00000106 	br	10009afc <_dtoa_r+0x1624>
10009af8:	102f883a 	mov	r23,r2
10009afc:	b8bfffc4 	addi	r2,r23,-1
10009b00:	10c00007 	ldb	r3,0(r2)
10009b04:	193ffc26 	beq	r3,r4,10009af8 <__alt_data_end+0xf8009af8>
10009b08:	d9801217 	ldw	r6,72(sp)
10009b0c:	d9800515 	stw	r6,20(sp)
10009b10:	003c1f06 	br	10008b90 <__alt_data_end+0xf8008b90>
10009b14:	d8801217 	ldw	r2,72(sp)
10009b18:	dc001117 	ldw	r16,68(sp)
10009b1c:	d8800515 	stw	r2,20(sp)
10009b20:	003cc906 	br	10008e48 <__alt_data_end+0xf8008e48>
10009b24:	dd801317 	ldw	r22,76(sp)
10009b28:	dc001117 	ldw	r16,68(sp)
10009b2c:	dcc01417 	ldw	r19,80(sp)
10009b30:	dc801017 	ldw	r18,64(sp)
10009b34:	003c4506 	br	10008c4c <__alt_data_end+0xf8008c4c>
10009b38:	103e5d1e 	bne	r2,zero,100094b0 <__alt_data_end+0xf80094b0>
10009b3c:	4080004c 	andi	r2,r8,1
10009b40:	103e5b26 	beq	r2,zero,100094b0 <__alt_data_end+0xf80094b0>
10009b44:	003e5706 	br	100094a4 <__alt_data_end+0xf80094a4>
10009b48:	d8c00317 	ldw	r3,12(sp)
10009b4c:	00800084 	movi	r2,2
10009b50:	10c00a16 	blt	r2,r3,10009b7c <_dtoa_r+0x16a4>
10009b54:	d9000d17 	ldw	r4,52(sp)
10009b58:	003e8306 	br	10009568 <__alt_data_end+0xf8009568>
10009b5c:	04400084 	movi	r17,2
10009b60:	003b7306 	br	10008930 <__alt_data_end+0xf8008930>
10009b64:	d9801217 	ldw	r6,72(sp)
10009b68:	d9800515 	stw	r6,20(sp)
10009b6c:	003cb606 	br	10008e48 <__alt_data_end+0xf8008e48>
10009b70:	d9001217 	ldw	r4,72(sp)
10009b74:	d9000515 	stw	r4,20(sp)
10009b78:	003c0506 	br	10008b90 <__alt_data_end+0xf8008b90>
10009b7c:	d9800d17 	ldw	r6,52(sp)
10009b80:	d9800615 	stw	r6,24(sp)
10009b84:	003e8306 	br	10009594 <__alt_data_end+0xf8009594>
10009b88:	d9800317 	ldw	r6,12(sp)
10009b8c:	00800084 	movi	r2,2
10009b90:	11800216 	blt	r2,r6,10009b9c <_dtoa_r+0x16c4>
10009b94:	d8800d17 	ldw	r2,52(sp)
10009b98:	003da606 	br	10009234 <__alt_data_end+0xf8009234>
10009b9c:	d8800d17 	ldw	r2,52(sp)
10009ba0:	d8800615 	stw	r2,24(sp)
10009ba4:	003e7b06 	br	10009594 <__alt_data_end+0xf8009594>
10009ba8:	05000044 	movi	r20,1
10009bac:	003b0506 	br	100087c4 <__alt_data_end+0xf80087c4>
10009bb0:	8009883a 	mov	r4,r16
10009bb4:	80001115 	stw	zero,68(r16)
10009bb8:	000b883a 	mov	r5,zero
10009bbc:	000bb140 	call	1000bb14 <_Balloc>
10009bc0:	d8800715 	stw	r2,28(sp)
10009bc4:	d8c00717 	ldw	r3,28(sp)
10009bc8:	00bfffc4 	movi	r2,-1
10009bcc:	01000044 	movi	r4,1
10009bd0:	d8800615 	stw	r2,24(sp)
10009bd4:	80c01015 	stw	r3,64(r16)
10009bd8:	d9000b15 	stw	r4,44(sp)
10009bdc:	d8002215 	stw	zero,136(sp)
10009be0:	d8800d15 	stw	r2,52(sp)
10009be4:	003c1906 	br	10008c4c <__alt_data_end+0xf8008c4c>
10009be8:	193d2926 	beq	r3,r4,10009090 <__alt_data_end+0xf8009090>
10009bec:	00c00f04 	movi	r3,60
10009bf0:	1885c83a 	sub	r2,r3,r2
10009bf4:	003d7b06 	br	100091e4 <__alt_data_end+0xf80091e4>
10009bf8:	000b883a 	mov	r5,zero
10009bfc:	003b1006 	br	10008840 <__alt_data_end+0xf8008840>

10009c00 <_fflush_r>:
10009c00:	defffb04 	addi	sp,sp,-20
10009c04:	dcc00315 	stw	r19,12(sp)
10009c08:	dc000015 	stw	r16,0(sp)
10009c0c:	dfc00415 	stw	ra,16(sp)
10009c10:	dc800215 	stw	r18,8(sp)
10009c14:	dc400115 	stw	r17,4(sp)
10009c18:	2027883a 	mov	r19,r4
10009c1c:	2821883a 	mov	r16,r5
10009c20:	20000226 	beq	r4,zero,10009c2c <_fflush_r+0x2c>
10009c24:	20800e17 	ldw	r2,56(r4)
10009c28:	10005326 	beq	r2,zero,10009d78 <_fflush_r+0x178>
10009c2c:	8080030b 	ldhu	r2,12(r16)
10009c30:	10ffffcc 	andi	r3,r2,65535
10009c34:	18e0001c 	xori	r3,r3,32768
10009c38:	18e00004 	addi	r3,r3,-32768
10009c3c:	18002c26 	beq	r3,zero,10009cf0 <_fflush_r+0xf0>
10009c40:	10c0020c 	andi	r3,r2,8
10009c44:	1800321e 	bne	r3,zero,10009d10 <_fflush_r+0x110>
10009c48:	80c00117 	ldw	r3,4(r16)
10009c4c:	10820014 	ori	r2,r2,2048
10009c50:	8080030d 	sth	r2,12(r16)
10009c54:	00c0570e 	bge	zero,r3,10009db4 <_fflush_r+0x1b4>
10009c58:	82000a17 	ldw	r8,40(r16)
10009c5c:	40002426 	beq	r8,zero,10009cf0 <_fflush_r+0xf0>
10009c60:	9c400017 	ldw	r17,0(r19)
10009c64:	10c4000c 	andi	r3,r2,4096
10009c68:	98000015 	stw	zero,0(r19)
10009c6c:	18004626 	beq	r3,zero,10009d88 <_fflush_r+0x188>
10009c70:	81801417 	ldw	r6,80(r16)
10009c74:	10c0010c 	andi	r3,r2,4
10009c78:	18000626 	beq	r3,zero,10009c94 <_fflush_r+0x94>
10009c7c:	80c00117 	ldw	r3,4(r16)
10009c80:	80800c17 	ldw	r2,48(r16)
10009c84:	30cdc83a 	sub	r6,r6,r3
10009c88:	10000226 	beq	r2,zero,10009c94 <_fflush_r+0x94>
10009c8c:	80800f17 	ldw	r2,60(r16)
10009c90:	308dc83a 	sub	r6,r6,r2
10009c94:	81400717 	ldw	r5,28(r16)
10009c98:	9809883a 	mov	r4,r19
10009c9c:	000f883a 	mov	r7,zero
10009ca0:	403ee83a 	callr	r8
10009ca4:	00ffffc4 	movi	r3,-1
10009ca8:	10c04526 	beq	r2,r3,10009dc0 <_fflush_r+0x1c0>
10009cac:	80c0030b 	ldhu	r3,12(r16)
10009cb0:	81000417 	ldw	r4,16(r16)
10009cb4:	80000115 	stw	zero,4(r16)
10009cb8:	197dffcc 	andi	r5,r3,63487
10009cbc:	8140030d 	sth	r5,12(r16)
10009cc0:	81000015 	stw	r4,0(r16)
10009cc4:	18c4000c 	andi	r3,r3,4096
10009cc8:	18000126 	beq	r3,zero,10009cd0 <_fflush_r+0xd0>
10009ccc:	80801415 	stw	r2,80(r16)
10009cd0:	81400c17 	ldw	r5,48(r16)
10009cd4:	9c400015 	stw	r17,0(r19)
10009cd8:	28000526 	beq	r5,zero,10009cf0 <_fflush_r+0xf0>
10009cdc:	80801004 	addi	r2,r16,64
10009ce0:	28800226 	beq	r5,r2,10009cec <_fflush_r+0xec>
10009ce4:	9809883a 	mov	r4,r19
10009ce8:	000a3300 	call	1000a330 <_free_r>
10009cec:	80000c15 	stw	zero,48(r16)
10009cf0:	0005883a 	mov	r2,zero
10009cf4:	dfc00417 	ldw	ra,16(sp)
10009cf8:	dcc00317 	ldw	r19,12(sp)
10009cfc:	dc800217 	ldw	r18,8(sp)
10009d00:	dc400117 	ldw	r17,4(sp)
10009d04:	dc000017 	ldw	r16,0(sp)
10009d08:	dec00504 	addi	sp,sp,20
10009d0c:	f800283a 	ret
10009d10:	84800417 	ldw	r18,16(r16)
10009d14:	903ff626 	beq	r18,zero,10009cf0 <__alt_data_end+0xf8009cf0>
10009d18:	84400017 	ldw	r17,0(r16)
10009d1c:	108000cc 	andi	r2,r2,3
10009d20:	84800015 	stw	r18,0(r16)
10009d24:	8ca3c83a 	sub	r17,r17,r18
10009d28:	10001526 	beq	r2,zero,10009d80 <_fflush_r+0x180>
10009d2c:	0005883a 	mov	r2,zero
10009d30:	80800215 	stw	r2,8(r16)
10009d34:	04400316 	blt	zero,r17,10009d44 <_fflush_r+0x144>
10009d38:	003fed06 	br	10009cf0 <__alt_data_end+0xf8009cf0>
10009d3c:	90a5883a 	add	r18,r18,r2
10009d40:	047feb0e 	bge	zero,r17,10009cf0 <__alt_data_end+0xf8009cf0>
10009d44:	80800917 	ldw	r2,36(r16)
10009d48:	81400717 	ldw	r5,28(r16)
10009d4c:	880f883a 	mov	r7,r17
10009d50:	900d883a 	mov	r6,r18
10009d54:	9809883a 	mov	r4,r19
10009d58:	103ee83a 	callr	r2
10009d5c:	88a3c83a 	sub	r17,r17,r2
10009d60:	00bff616 	blt	zero,r2,10009d3c <__alt_data_end+0xf8009d3c>
10009d64:	80c0030b 	ldhu	r3,12(r16)
10009d68:	00bfffc4 	movi	r2,-1
10009d6c:	18c01014 	ori	r3,r3,64
10009d70:	80c0030d 	sth	r3,12(r16)
10009d74:	003fdf06 	br	10009cf4 <__alt_data_end+0xf8009cf4>
10009d78:	000a1bc0 	call	1000a1bc <__sinit>
10009d7c:	003fab06 	br	10009c2c <__alt_data_end+0xf8009c2c>
10009d80:	80800517 	ldw	r2,20(r16)
10009d84:	003fea06 	br	10009d30 <__alt_data_end+0xf8009d30>
10009d88:	81400717 	ldw	r5,28(r16)
10009d8c:	000d883a 	mov	r6,zero
10009d90:	9809883a 	mov	r4,r19
10009d94:	01c00044 	movi	r7,1
10009d98:	403ee83a 	callr	r8
10009d9c:	100d883a 	mov	r6,r2
10009da0:	00bfffc4 	movi	r2,-1
10009da4:	30801326 	beq	r6,r2,10009df4 <_fflush_r+0x1f4>
10009da8:	8080030b 	ldhu	r2,12(r16)
10009dac:	82000a17 	ldw	r8,40(r16)
10009db0:	003fb006 	br	10009c74 <__alt_data_end+0xf8009c74>
10009db4:	80c00f17 	ldw	r3,60(r16)
10009db8:	00ffa716 	blt	zero,r3,10009c58 <__alt_data_end+0xf8009c58>
10009dbc:	003fcc06 	br	10009cf0 <__alt_data_end+0xf8009cf0>
10009dc0:	98c00017 	ldw	r3,0(r19)
10009dc4:	183fb926 	beq	r3,zero,10009cac <__alt_data_end+0xf8009cac>
10009dc8:	01000744 	movi	r4,29
10009dcc:	19000226 	beq	r3,r4,10009dd8 <_fflush_r+0x1d8>
10009dd0:	01000584 	movi	r4,22
10009dd4:	1900101e 	bne	r3,r4,10009e18 <_fflush_r+0x218>
10009dd8:	8080030b 	ldhu	r2,12(r16)
10009ddc:	80c00417 	ldw	r3,16(r16)
10009de0:	80000115 	stw	zero,4(r16)
10009de4:	10bdffcc 	andi	r2,r2,63487
10009de8:	8080030d 	sth	r2,12(r16)
10009dec:	80c00015 	stw	r3,0(r16)
10009df0:	003fb706 	br	10009cd0 <__alt_data_end+0xf8009cd0>
10009df4:	98800017 	ldw	r2,0(r19)
10009df8:	103feb26 	beq	r2,zero,10009da8 <__alt_data_end+0xf8009da8>
10009dfc:	00c00744 	movi	r3,29
10009e00:	10c00226 	beq	r2,r3,10009e0c <_fflush_r+0x20c>
10009e04:	00c00584 	movi	r3,22
10009e08:	10ffd61e 	bne	r2,r3,10009d64 <__alt_data_end+0xf8009d64>
10009e0c:	9c400015 	stw	r17,0(r19)
10009e10:	0005883a 	mov	r2,zero
10009e14:	003fb706 	br	10009cf4 <__alt_data_end+0xf8009cf4>
10009e18:	80c0030b 	ldhu	r3,12(r16)
10009e1c:	18c01014 	ori	r3,r3,64
10009e20:	80c0030d 	sth	r3,12(r16)
10009e24:	003fb306 	br	10009cf4 <__alt_data_end+0xf8009cf4>

10009e28 <fflush>:
10009e28:	20000526 	beq	r4,zero,10009e40 <fflush+0x18>
10009e2c:	00840074 	movhi	r2,4097
10009e30:	108e4404 	addi	r2,r2,14608
10009e34:	200b883a 	mov	r5,r4
10009e38:	11000017 	ldw	r4,0(r2)
10009e3c:	0009c001 	jmpi	10009c00 <_fflush_r>
10009e40:	00840074 	movhi	r2,4097
10009e44:	108e4304 	addi	r2,r2,14604
10009e48:	11000017 	ldw	r4,0(r2)
10009e4c:	01440074 	movhi	r5,4097
10009e50:	29670004 	addi	r5,r5,-25600
10009e54:	000ab7c1 	jmpi	1000ab7c <_fwalk_reent>

10009e58 <__fp_lock>:
10009e58:	0005883a 	mov	r2,zero
10009e5c:	f800283a 	ret

10009e60 <__fp_unlock>:
10009e60:	0005883a 	mov	r2,zero
10009e64:	f800283a 	ret

10009e68 <_cleanup_r>:
10009e68:	01440074 	movhi	r5,4097
10009e6c:	297ac504 	addi	r5,r5,-5356
10009e70:	000aac41 	jmpi	1000aac4 <_fwalk>

10009e74 <__sinit.part.1>:
10009e74:	defff604 	addi	sp,sp,-40
10009e78:	00c40074 	movhi	r3,4097
10009e7c:	dfc00915 	stw	ra,36(sp)
10009e80:	df000815 	stw	fp,32(sp)
10009e84:	ddc00715 	stw	r23,28(sp)
10009e88:	dd800615 	stw	r22,24(sp)
10009e8c:	dd400515 	stw	r21,20(sp)
10009e90:	dd000415 	stw	r20,16(sp)
10009e94:	dcc00315 	stw	r19,12(sp)
10009e98:	dc800215 	stw	r18,8(sp)
10009e9c:	dc400115 	stw	r17,4(sp)
10009ea0:	dc000015 	stw	r16,0(sp)
10009ea4:	18e79a04 	addi	r3,r3,-24984
10009ea8:	24000117 	ldw	r16,4(r4)
10009eac:	20c00f15 	stw	r3,60(r4)
10009eb0:	07000044 	movi	fp,1
10009eb4:	00c000c4 	movi	r3,3
10009eb8:	2080bb04 	addi	r2,r4,748
10009ebc:	20c0b915 	stw	r3,740(r4)
10009ec0:	27000e15 	stw	fp,56(r4)
10009ec4:	2080ba15 	stw	r2,744(r4)
10009ec8:	2000b815 	stw	zero,736(r4)
10009ecc:	05c00204 	movi	r23,8
10009ed0:	00800104 	movi	r2,4
10009ed4:	2025883a 	mov	r18,r4
10009ed8:	b80d883a 	mov	r6,r23
10009edc:	81001704 	addi	r4,r16,92
10009ee0:	000b883a 	mov	r5,zero
10009ee4:	80000015 	stw	zero,0(r16)
10009ee8:	80000115 	stw	zero,4(r16)
10009eec:	80000215 	stw	zero,8(r16)
10009ef0:	8080030d 	sth	r2,12(r16)
10009ef4:	80001915 	stw	zero,100(r16)
10009ef8:	8000038d 	sth	zero,14(r16)
10009efc:	80000415 	stw	zero,16(r16)
10009f00:	80000515 	stw	zero,20(r16)
10009f04:	80000615 	stw	zero,24(r16)
10009f08:	000b9f00 	call	1000b9f0 <memset>
10009f0c:	05840074 	movhi	r22,4097
10009f10:	94400217 	ldw	r17,8(r18)
10009f14:	05440074 	movhi	r21,4097
10009f18:	05040074 	movhi	r20,4097
10009f1c:	04c40074 	movhi	r19,4097
10009f20:	b5b45404 	addi	r22,r22,-11952
10009f24:	ad746b04 	addi	r21,r21,-11860
10009f28:	a5348a04 	addi	r20,r20,-11736
10009f2c:	9cf4a104 	addi	r19,r19,-11644
10009f30:	85800815 	stw	r22,32(r16)
10009f34:	85400915 	stw	r21,36(r16)
10009f38:	85000a15 	stw	r20,40(r16)
10009f3c:	84c00b15 	stw	r19,44(r16)
10009f40:	84000715 	stw	r16,28(r16)
10009f44:	00800284 	movi	r2,10
10009f48:	89001704 	addi	r4,r17,92
10009f4c:	b80d883a 	mov	r6,r23
10009f50:	000b883a 	mov	r5,zero
10009f54:	88000015 	stw	zero,0(r17)
10009f58:	88000115 	stw	zero,4(r17)
10009f5c:	88000215 	stw	zero,8(r17)
10009f60:	8880030d 	sth	r2,12(r17)
10009f64:	88001915 	stw	zero,100(r17)
10009f68:	8f00038d 	sth	fp,14(r17)
10009f6c:	88000415 	stw	zero,16(r17)
10009f70:	88000515 	stw	zero,20(r17)
10009f74:	88000615 	stw	zero,24(r17)
10009f78:	000b9f00 	call	1000b9f0 <memset>
10009f7c:	94000317 	ldw	r16,12(r18)
10009f80:	00800484 	movi	r2,18
10009f84:	8c400715 	stw	r17,28(r17)
10009f88:	8d800815 	stw	r22,32(r17)
10009f8c:	8d400915 	stw	r21,36(r17)
10009f90:	8d000a15 	stw	r20,40(r17)
10009f94:	8cc00b15 	stw	r19,44(r17)
10009f98:	8080030d 	sth	r2,12(r16)
10009f9c:	00800084 	movi	r2,2
10009fa0:	80000015 	stw	zero,0(r16)
10009fa4:	80000115 	stw	zero,4(r16)
10009fa8:	80000215 	stw	zero,8(r16)
10009fac:	80001915 	stw	zero,100(r16)
10009fb0:	8080038d 	sth	r2,14(r16)
10009fb4:	80000415 	stw	zero,16(r16)
10009fb8:	80000515 	stw	zero,20(r16)
10009fbc:	80000615 	stw	zero,24(r16)
10009fc0:	81001704 	addi	r4,r16,92
10009fc4:	000b883a 	mov	r5,zero
10009fc8:	b80d883a 	mov	r6,r23
10009fcc:	000b9f00 	call	1000b9f0 <memset>
10009fd0:	84000715 	stw	r16,28(r16)
10009fd4:	85800815 	stw	r22,32(r16)
10009fd8:	85400915 	stw	r21,36(r16)
10009fdc:	85000a15 	stw	r20,40(r16)
10009fe0:	84c00b15 	stw	r19,44(r16)
10009fe4:	dfc00917 	ldw	ra,36(sp)
10009fe8:	df000817 	ldw	fp,32(sp)
10009fec:	ddc00717 	ldw	r23,28(sp)
10009ff0:	dd800617 	ldw	r22,24(sp)
10009ff4:	dd400517 	ldw	r21,20(sp)
10009ff8:	dd000417 	ldw	r20,16(sp)
10009ffc:	dcc00317 	ldw	r19,12(sp)
1000a000:	dc800217 	ldw	r18,8(sp)
1000a004:	dc400117 	ldw	r17,4(sp)
1000a008:	dc000017 	ldw	r16,0(sp)
1000a00c:	dec00a04 	addi	sp,sp,40
1000a010:	f800283a 	ret

1000a014 <__sfmoreglue>:
1000a014:	defffc04 	addi	sp,sp,-16
1000a018:	dc800215 	stw	r18,8(sp)
1000a01c:	2825883a 	mov	r18,r5
1000a020:	dc000015 	stw	r16,0(sp)
1000a024:	01401a04 	movi	r5,104
1000a028:	2021883a 	mov	r16,r4
1000a02c:	9009883a 	mov	r4,r18
1000a030:	dfc00315 	stw	ra,12(sp)
1000a034:	dc400115 	stw	r17,4(sp)
1000a038:	00037040 	call	10003704 <__mulsi3>
1000a03c:	8009883a 	mov	r4,r16
1000a040:	11400304 	addi	r5,r2,12
1000a044:	1023883a 	mov	r17,r2
1000a048:	000aecc0 	call	1000aecc <_malloc_r>
1000a04c:	1021883a 	mov	r16,r2
1000a050:	10000726 	beq	r2,zero,1000a070 <__sfmoreglue+0x5c>
1000a054:	11000304 	addi	r4,r2,12
1000a058:	10000015 	stw	zero,0(r2)
1000a05c:	14800115 	stw	r18,4(r2)
1000a060:	11000215 	stw	r4,8(r2)
1000a064:	000b883a 	mov	r5,zero
1000a068:	880d883a 	mov	r6,r17
1000a06c:	000b9f00 	call	1000b9f0 <memset>
1000a070:	8005883a 	mov	r2,r16
1000a074:	dfc00317 	ldw	ra,12(sp)
1000a078:	dc800217 	ldw	r18,8(sp)
1000a07c:	dc400117 	ldw	r17,4(sp)
1000a080:	dc000017 	ldw	r16,0(sp)
1000a084:	dec00404 	addi	sp,sp,16
1000a088:	f800283a 	ret

1000a08c <__sfp>:
1000a08c:	00840074 	movhi	r2,4097
1000a090:	defffb04 	addi	sp,sp,-20
1000a094:	108e4304 	addi	r2,r2,14604
1000a098:	dc800215 	stw	r18,8(sp)
1000a09c:	14800017 	ldw	r18,0(r2)
1000a0a0:	dcc00315 	stw	r19,12(sp)
1000a0a4:	dfc00415 	stw	ra,16(sp)
1000a0a8:	90800e17 	ldw	r2,56(r18)
1000a0ac:	dc400115 	stw	r17,4(sp)
1000a0b0:	dc000015 	stw	r16,0(sp)
1000a0b4:	2027883a 	mov	r19,r4
1000a0b8:	1000021e 	bne	r2,zero,1000a0c4 <__sfp+0x38>
1000a0bc:	9009883a 	mov	r4,r18
1000a0c0:	0009e740 	call	10009e74 <__sinit.part.1>
1000a0c4:	9480b804 	addi	r18,r18,736
1000a0c8:	047fffc4 	movi	r17,-1
1000a0cc:	91400117 	ldw	r5,4(r18)
1000a0d0:	94000217 	ldw	r16,8(r18)
1000a0d4:	297fffc4 	addi	r5,r5,-1
1000a0d8:	28000a16 	blt	r5,zero,1000a104 <__sfp+0x78>
1000a0dc:	8080030f 	ldh	r2,12(r16)
1000a0e0:	10000c26 	beq	r2,zero,1000a114 <__sfp+0x88>
1000a0e4:	80c01d04 	addi	r3,r16,116
1000a0e8:	00000206 	br	1000a0f4 <__sfp+0x68>
1000a0ec:	18bfe60f 	ldh	r2,-104(r3)
1000a0f0:	10000826 	beq	r2,zero,1000a114 <__sfp+0x88>
1000a0f4:	297fffc4 	addi	r5,r5,-1
1000a0f8:	1c3ffd04 	addi	r16,r3,-12
1000a0fc:	18c01a04 	addi	r3,r3,104
1000a100:	2c7ffa1e 	bne	r5,r17,1000a0ec <__alt_data_end+0xf800a0ec>
1000a104:	90800017 	ldw	r2,0(r18)
1000a108:	10001d26 	beq	r2,zero,1000a180 <__sfp+0xf4>
1000a10c:	1025883a 	mov	r18,r2
1000a110:	003fee06 	br	1000a0cc <__alt_data_end+0xf800a0cc>
1000a114:	00bfffc4 	movi	r2,-1
1000a118:	8080038d 	sth	r2,14(r16)
1000a11c:	00800044 	movi	r2,1
1000a120:	8080030d 	sth	r2,12(r16)
1000a124:	80001915 	stw	zero,100(r16)
1000a128:	80000015 	stw	zero,0(r16)
1000a12c:	80000215 	stw	zero,8(r16)
1000a130:	80000115 	stw	zero,4(r16)
1000a134:	80000415 	stw	zero,16(r16)
1000a138:	80000515 	stw	zero,20(r16)
1000a13c:	80000615 	stw	zero,24(r16)
1000a140:	81001704 	addi	r4,r16,92
1000a144:	000b883a 	mov	r5,zero
1000a148:	01800204 	movi	r6,8
1000a14c:	000b9f00 	call	1000b9f0 <memset>
1000a150:	8005883a 	mov	r2,r16
1000a154:	80000c15 	stw	zero,48(r16)
1000a158:	80000d15 	stw	zero,52(r16)
1000a15c:	80001115 	stw	zero,68(r16)
1000a160:	80001215 	stw	zero,72(r16)
1000a164:	dfc00417 	ldw	ra,16(sp)
1000a168:	dcc00317 	ldw	r19,12(sp)
1000a16c:	dc800217 	ldw	r18,8(sp)
1000a170:	dc400117 	ldw	r17,4(sp)
1000a174:	dc000017 	ldw	r16,0(sp)
1000a178:	dec00504 	addi	sp,sp,20
1000a17c:	f800283a 	ret
1000a180:	9809883a 	mov	r4,r19
1000a184:	01400104 	movi	r5,4
1000a188:	000a0140 	call	1000a014 <__sfmoreglue>
1000a18c:	90800015 	stw	r2,0(r18)
1000a190:	103fde1e 	bne	r2,zero,1000a10c <__alt_data_end+0xf800a10c>
1000a194:	00800304 	movi	r2,12
1000a198:	98800015 	stw	r2,0(r19)
1000a19c:	0005883a 	mov	r2,zero
1000a1a0:	003ff006 	br	1000a164 <__alt_data_end+0xf800a164>

1000a1a4 <_cleanup>:
1000a1a4:	00840074 	movhi	r2,4097
1000a1a8:	108e4304 	addi	r2,r2,14604
1000a1ac:	11000017 	ldw	r4,0(r2)
1000a1b0:	01440074 	movhi	r5,4097
1000a1b4:	297ac504 	addi	r5,r5,-5356
1000a1b8:	000aac41 	jmpi	1000aac4 <_fwalk>

1000a1bc <__sinit>:
1000a1bc:	20800e17 	ldw	r2,56(r4)
1000a1c0:	10000126 	beq	r2,zero,1000a1c8 <__sinit+0xc>
1000a1c4:	f800283a 	ret
1000a1c8:	0009e741 	jmpi	10009e74 <__sinit.part.1>

1000a1cc <__sfp_lock_acquire>:
1000a1cc:	f800283a 	ret

1000a1d0 <__sfp_lock_release>:
1000a1d0:	f800283a 	ret

1000a1d4 <__sinit_lock_acquire>:
1000a1d4:	f800283a 	ret

1000a1d8 <__sinit_lock_release>:
1000a1d8:	f800283a 	ret

1000a1dc <__fp_lock_all>:
1000a1dc:	00840074 	movhi	r2,4097
1000a1e0:	108e4404 	addi	r2,r2,14608
1000a1e4:	11000017 	ldw	r4,0(r2)
1000a1e8:	01440074 	movhi	r5,4097
1000a1ec:	29679604 	addi	r5,r5,-25000
1000a1f0:	000aac41 	jmpi	1000aac4 <_fwalk>

1000a1f4 <__fp_unlock_all>:
1000a1f4:	00840074 	movhi	r2,4097
1000a1f8:	108e4404 	addi	r2,r2,14608
1000a1fc:	11000017 	ldw	r4,0(r2)
1000a200:	01440074 	movhi	r5,4097
1000a204:	29679804 	addi	r5,r5,-24992
1000a208:	000aac41 	jmpi	1000aac4 <_fwalk>

1000a20c <_malloc_trim_r>:
1000a20c:	defffb04 	addi	sp,sp,-20
1000a210:	dcc00315 	stw	r19,12(sp)
1000a214:	04c40074 	movhi	r19,4097
1000a218:	dc800215 	stw	r18,8(sp)
1000a21c:	dc400115 	stw	r17,4(sp)
1000a220:	dc000015 	stw	r16,0(sp)
1000a224:	dfc00415 	stw	ra,16(sp)
1000a228:	2821883a 	mov	r16,r5
1000a22c:	9cc8be04 	addi	r19,r19,8952
1000a230:	2025883a 	mov	r18,r4
1000a234:	000f85c0 	call	1000f85c <__malloc_lock>
1000a238:	98800217 	ldw	r2,8(r19)
1000a23c:	14400117 	ldw	r17,4(r2)
1000a240:	00bfff04 	movi	r2,-4
1000a244:	88a2703a 	and	r17,r17,r2
1000a248:	8c21c83a 	sub	r16,r17,r16
1000a24c:	8403fbc4 	addi	r16,r16,4079
1000a250:	8020d33a 	srli	r16,r16,12
1000a254:	0083ffc4 	movi	r2,4095
1000a258:	843fffc4 	addi	r16,r16,-1
1000a25c:	8020933a 	slli	r16,r16,12
1000a260:	1400060e 	bge	r2,r16,1000a27c <_malloc_trim_r+0x70>
1000a264:	9009883a 	mov	r4,r18
1000a268:	000b883a 	mov	r5,zero
1000a26c:	000d0fc0 	call	1000d0fc <_sbrk_r>
1000a270:	98c00217 	ldw	r3,8(r19)
1000a274:	1c47883a 	add	r3,r3,r17
1000a278:	10c00a26 	beq	r2,r3,1000a2a4 <_malloc_trim_r+0x98>
1000a27c:	9009883a 	mov	r4,r18
1000a280:	000f87c0 	call	1000f87c <__malloc_unlock>
1000a284:	0005883a 	mov	r2,zero
1000a288:	dfc00417 	ldw	ra,16(sp)
1000a28c:	dcc00317 	ldw	r19,12(sp)
1000a290:	dc800217 	ldw	r18,8(sp)
1000a294:	dc400117 	ldw	r17,4(sp)
1000a298:	dc000017 	ldw	r16,0(sp)
1000a29c:	dec00504 	addi	sp,sp,20
1000a2a0:	f800283a 	ret
1000a2a4:	9009883a 	mov	r4,r18
1000a2a8:	040bc83a 	sub	r5,zero,r16
1000a2ac:	000d0fc0 	call	1000d0fc <_sbrk_r>
1000a2b0:	00ffffc4 	movi	r3,-1
1000a2b4:	10c00d26 	beq	r2,r3,1000a2ec <_malloc_trim_r+0xe0>
1000a2b8:	00c40074 	movhi	r3,4097
1000a2bc:	18d51d04 	addi	r3,r3,21620
1000a2c0:	18800017 	ldw	r2,0(r3)
1000a2c4:	99000217 	ldw	r4,8(r19)
1000a2c8:	8c23c83a 	sub	r17,r17,r16
1000a2cc:	8c400054 	ori	r17,r17,1
1000a2d0:	1421c83a 	sub	r16,r2,r16
1000a2d4:	24400115 	stw	r17,4(r4)
1000a2d8:	9009883a 	mov	r4,r18
1000a2dc:	1c000015 	stw	r16,0(r3)
1000a2e0:	000f87c0 	call	1000f87c <__malloc_unlock>
1000a2e4:	00800044 	movi	r2,1
1000a2e8:	003fe706 	br	1000a288 <__alt_data_end+0xf800a288>
1000a2ec:	9009883a 	mov	r4,r18
1000a2f0:	000b883a 	mov	r5,zero
1000a2f4:	000d0fc0 	call	1000d0fc <_sbrk_r>
1000a2f8:	99000217 	ldw	r4,8(r19)
1000a2fc:	014003c4 	movi	r5,15
1000a300:	1107c83a 	sub	r3,r2,r4
1000a304:	28ffdd0e 	bge	r5,r3,1000a27c <__alt_data_end+0xf800a27c>
1000a308:	01440074 	movhi	r5,4097
1000a30c:	294e4604 	addi	r5,r5,14616
1000a310:	29400017 	ldw	r5,0(r5)
1000a314:	18c00054 	ori	r3,r3,1
1000a318:	20c00115 	stw	r3,4(r4)
1000a31c:	00c40074 	movhi	r3,4097
1000a320:	1145c83a 	sub	r2,r2,r5
1000a324:	18d51d04 	addi	r3,r3,21620
1000a328:	18800015 	stw	r2,0(r3)
1000a32c:	003fd306 	br	1000a27c <__alt_data_end+0xf800a27c>

1000a330 <_free_r>:
1000a330:	28004c26 	beq	r5,zero,1000a464 <_free_r+0x134>
1000a334:	defffd04 	addi	sp,sp,-12
1000a338:	dc400115 	stw	r17,4(sp)
1000a33c:	dc000015 	stw	r16,0(sp)
1000a340:	2023883a 	mov	r17,r4
1000a344:	2821883a 	mov	r16,r5
1000a348:	dfc00215 	stw	ra,8(sp)
1000a34c:	000f85c0 	call	1000f85c <__malloc_lock>
1000a350:	813fff17 	ldw	r4,-4(r16)
1000a354:	00bfff84 	movi	r2,-2
1000a358:	02440074 	movhi	r9,4097
1000a35c:	81bffe04 	addi	r6,r16,-8
1000a360:	2084703a 	and	r2,r4,r2
1000a364:	4a48be04 	addi	r9,r9,8952
1000a368:	308b883a 	add	r5,r6,r2
1000a36c:	2a000117 	ldw	r8,4(r5)
1000a370:	49c00217 	ldw	r7,8(r9)
1000a374:	00ffff04 	movi	r3,-4
1000a378:	40c6703a 	and	r3,r8,r3
1000a37c:	39405326 	beq	r7,r5,1000a4cc <_free_r+0x19c>
1000a380:	28c00115 	stw	r3,4(r5)
1000a384:	2100004c 	andi	r4,r4,1
1000a388:	2000091e 	bne	r4,zero,1000a3b0 <_free_r+0x80>
1000a38c:	81fffe17 	ldw	r7,-8(r16)
1000a390:	4a000204 	addi	r8,r9,8
1000a394:	31cdc83a 	sub	r6,r6,r7
1000a398:	31000217 	ldw	r4,8(r6)
1000a39c:	11c5883a 	add	r2,r2,r7
1000a3a0:	22006126 	beq	r4,r8,1000a528 <_free_r+0x1f8>
1000a3a4:	31c00317 	ldw	r7,12(r6)
1000a3a8:	21c00315 	stw	r7,12(r4)
1000a3ac:	39000215 	stw	r4,8(r7)
1000a3b0:	28c9883a 	add	r4,r5,r3
1000a3b4:	21c00117 	ldw	r7,4(r4)
1000a3b8:	39c0004c 	andi	r7,r7,1
1000a3bc:	38000d1e 	bne	r7,zero,1000a3f4 <_free_r+0xc4>
1000a3c0:	29000217 	ldw	r4,8(r5)
1000a3c4:	10c5883a 	add	r2,r2,r3
1000a3c8:	00c40074 	movhi	r3,4097
1000a3cc:	18c8c004 	addi	r3,r3,8960
1000a3d0:	20c07526 	beq	r4,r3,1000a5a8 <_free_r+0x278>
1000a3d4:	29c00317 	ldw	r7,12(r5)
1000a3d8:	11400054 	ori	r5,r2,1
1000a3dc:	3087883a 	add	r3,r6,r2
1000a3e0:	21c00315 	stw	r7,12(r4)
1000a3e4:	39000215 	stw	r4,8(r7)
1000a3e8:	31400115 	stw	r5,4(r6)
1000a3ec:	18800015 	stw	r2,0(r3)
1000a3f0:	00000406 	br	1000a404 <_free_r+0xd4>
1000a3f4:	10c00054 	ori	r3,r2,1
1000a3f8:	30c00115 	stw	r3,4(r6)
1000a3fc:	3087883a 	add	r3,r6,r2
1000a400:	18800015 	stw	r2,0(r3)
1000a404:	00c07fc4 	movi	r3,511
1000a408:	18801736 	bltu	r3,r2,1000a468 <_free_r+0x138>
1000a40c:	1004d0fa 	srli	r2,r2,3
1000a410:	01400044 	movi	r5,1
1000a414:	49000117 	ldw	r4,4(r9)
1000a418:	1087883a 	add	r3,r2,r2
1000a41c:	18c7883a 	add	r3,r3,r3
1000a420:	1005d0ba 	srai	r2,r2,2
1000a424:	18c7883a 	add	r3,r3,r3
1000a428:	1a47883a 	add	r3,r3,r9
1000a42c:	19c00217 	ldw	r7,8(r3)
1000a430:	2884983a 	sll	r2,r5,r2
1000a434:	30c00315 	stw	r3,12(r6)
1000a438:	31c00215 	stw	r7,8(r6)
1000a43c:	1104b03a 	or	r2,r2,r4
1000a440:	19800215 	stw	r6,8(r3)
1000a444:	48800115 	stw	r2,4(r9)
1000a448:	39800315 	stw	r6,12(r7)
1000a44c:	8809883a 	mov	r4,r17
1000a450:	dfc00217 	ldw	ra,8(sp)
1000a454:	dc400117 	ldw	r17,4(sp)
1000a458:	dc000017 	ldw	r16,0(sp)
1000a45c:	dec00304 	addi	sp,sp,12
1000a460:	000f87c1 	jmpi	1000f87c <__malloc_unlock>
1000a464:	f800283a 	ret
1000a468:	1006d27a 	srli	r3,r2,9
1000a46c:	01000104 	movi	r4,4
1000a470:	20c04036 	bltu	r4,r3,1000a574 <_free_r+0x244>
1000a474:	1006d1ba 	srli	r3,r2,6
1000a478:	19400e04 	addi	r5,r3,56
1000a47c:	2947883a 	add	r3,r5,r5
1000a480:	18c7883a 	add	r3,r3,r3
1000a484:	18c7883a 	add	r3,r3,r3
1000a488:	1a49883a 	add	r4,r3,r9
1000a48c:	20c00217 	ldw	r3,8(r4)
1000a490:	01c40074 	movhi	r7,4097
1000a494:	39c8be04 	addi	r7,r7,8952
1000a498:	19003b26 	beq	r3,r4,1000a588 <_free_r+0x258>
1000a49c:	01ffff04 	movi	r7,-4
1000a4a0:	19400117 	ldw	r5,4(r3)
1000a4a4:	29ca703a 	and	r5,r5,r7
1000a4a8:	1140022e 	bgeu	r2,r5,1000a4b4 <_free_r+0x184>
1000a4ac:	18c00217 	ldw	r3,8(r3)
1000a4b0:	20fffb1e 	bne	r4,r3,1000a4a0 <__alt_data_end+0xf800a4a0>
1000a4b4:	18800317 	ldw	r2,12(r3)
1000a4b8:	30800315 	stw	r2,12(r6)
1000a4bc:	30c00215 	stw	r3,8(r6)
1000a4c0:	11800215 	stw	r6,8(r2)
1000a4c4:	19800315 	stw	r6,12(r3)
1000a4c8:	003fe006 	br	1000a44c <__alt_data_end+0xf800a44c>
1000a4cc:	2100004c 	andi	r4,r4,1
1000a4d0:	1885883a 	add	r2,r3,r2
1000a4d4:	2000071e 	bne	r4,zero,1000a4f4 <_free_r+0x1c4>
1000a4d8:	817ffe17 	ldw	r5,-8(r16)
1000a4dc:	314dc83a 	sub	r6,r6,r5
1000a4e0:	30c00317 	ldw	r3,12(r6)
1000a4e4:	31000217 	ldw	r4,8(r6)
1000a4e8:	1145883a 	add	r2,r2,r5
1000a4ec:	20c00315 	stw	r3,12(r4)
1000a4f0:	19000215 	stw	r4,8(r3)
1000a4f4:	10c00054 	ori	r3,r2,1
1000a4f8:	30c00115 	stw	r3,4(r6)
1000a4fc:	00c40074 	movhi	r3,4097
1000a500:	18ce4704 	addi	r3,r3,14620
1000a504:	18c00017 	ldw	r3,0(r3)
1000a508:	49800215 	stw	r6,8(r9)
1000a50c:	10ffcf36 	bltu	r2,r3,1000a44c <__alt_data_end+0xf800a44c>
1000a510:	00840074 	movhi	r2,4097
1000a514:	10951404 	addi	r2,r2,21584
1000a518:	11400017 	ldw	r5,0(r2)
1000a51c:	8809883a 	mov	r4,r17
1000a520:	000a20c0 	call	1000a20c <_malloc_trim_r>
1000a524:	003fc906 	br	1000a44c <__alt_data_end+0xf800a44c>
1000a528:	28c9883a 	add	r4,r5,r3
1000a52c:	21000117 	ldw	r4,4(r4)
1000a530:	2100004c 	andi	r4,r4,1
1000a534:	20000a1e 	bne	r4,zero,1000a560 <_free_r+0x230>
1000a538:	29000317 	ldw	r4,12(r5)
1000a53c:	29400217 	ldw	r5,8(r5)
1000a540:	10c5883a 	add	r2,r2,r3
1000a544:	10c00054 	ori	r3,r2,1
1000a548:	29000315 	stw	r4,12(r5)
1000a54c:	21400215 	stw	r5,8(r4)
1000a550:	30c00115 	stw	r3,4(r6)
1000a554:	308d883a 	add	r6,r6,r2
1000a558:	30800015 	stw	r2,0(r6)
1000a55c:	003fbb06 	br	1000a44c <__alt_data_end+0xf800a44c>
1000a560:	10c00054 	ori	r3,r2,1
1000a564:	30c00115 	stw	r3,4(r6)
1000a568:	308d883a 	add	r6,r6,r2
1000a56c:	30800015 	stw	r2,0(r6)
1000a570:	003fb606 	br	1000a44c <__alt_data_end+0xf800a44c>
1000a574:	01000504 	movi	r4,20
1000a578:	20c01436 	bltu	r4,r3,1000a5cc <_free_r+0x29c>
1000a57c:	194016c4 	addi	r5,r3,91
1000a580:	2947883a 	add	r3,r5,r5
1000a584:	003fbe06 	br	1000a480 <__alt_data_end+0xf800a480>
1000a588:	280bd0ba 	srai	r5,r5,2
1000a58c:	00800044 	movi	r2,1
1000a590:	39000117 	ldw	r4,4(r7)
1000a594:	114a983a 	sll	r5,r2,r5
1000a598:	1805883a 	mov	r2,r3
1000a59c:	2908b03a 	or	r4,r5,r4
1000a5a0:	39000115 	stw	r4,4(r7)
1000a5a4:	003fc406 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a5a8:	49800515 	stw	r6,20(r9)
1000a5ac:	49800415 	stw	r6,16(r9)
1000a5b0:	10c00054 	ori	r3,r2,1
1000a5b4:	31000315 	stw	r4,12(r6)
1000a5b8:	31000215 	stw	r4,8(r6)
1000a5bc:	30c00115 	stw	r3,4(r6)
1000a5c0:	308d883a 	add	r6,r6,r2
1000a5c4:	30800015 	stw	r2,0(r6)
1000a5c8:	003fa006 	br	1000a44c <__alt_data_end+0xf800a44c>
1000a5cc:	01001504 	movi	r4,84
1000a5d0:	20c00436 	bltu	r4,r3,1000a5e4 <_free_r+0x2b4>
1000a5d4:	1006d33a 	srli	r3,r2,12
1000a5d8:	19401b84 	addi	r5,r3,110
1000a5dc:	2947883a 	add	r3,r5,r5
1000a5e0:	003fa706 	br	1000a480 <__alt_data_end+0xf800a480>
1000a5e4:	01005504 	movi	r4,340
1000a5e8:	20c00436 	bltu	r4,r3,1000a5fc <_free_r+0x2cc>
1000a5ec:	1006d3fa 	srli	r3,r2,15
1000a5f0:	19401dc4 	addi	r5,r3,119
1000a5f4:	2947883a 	add	r3,r5,r5
1000a5f8:	003fa106 	br	1000a480 <__alt_data_end+0xf800a480>
1000a5fc:	01015504 	movi	r4,1364
1000a600:	20c00436 	bltu	r4,r3,1000a614 <_free_r+0x2e4>
1000a604:	1006d4ba 	srli	r3,r2,18
1000a608:	19401f04 	addi	r5,r3,124
1000a60c:	2947883a 	add	r3,r5,r5
1000a610:	003f9b06 	br	1000a480 <__alt_data_end+0xf800a480>
1000a614:	00c03f04 	movi	r3,252
1000a618:	01401f84 	movi	r5,126
1000a61c:	003f9806 	br	1000a480 <__alt_data_end+0xf800a480>

1000a620 <__sfvwrite_r>:
1000a620:	30800217 	ldw	r2,8(r6)
1000a624:	10004526 	beq	r2,zero,1000a73c <__sfvwrite_r+0x11c>
1000a628:	28c0030b 	ldhu	r3,12(r5)
1000a62c:	defff404 	addi	sp,sp,-48
1000a630:	dd400715 	stw	r21,28(sp)
1000a634:	dcc00515 	stw	r19,20(sp)
1000a638:	dc000215 	stw	r16,8(sp)
1000a63c:	dfc00b15 	stw	ra,44(sp)
1000a640:	df000a15 	stw	fp,40(sp)
1000a644:	ddc00915 	stw	r23,36(sp)
1000a648:	dd800815 	stw	r22,32(sp)
1000a64c:	dd000615 	stw	r20,24(sp)
1000a650:	dc800415 	stw	r18,16(sp)
1000a654:	dc400315 	stw	r17,12(sp)
1000a658:	1880020c 	andi	r2,r3,8
1000a65c:	2821883a 	mov	r16,r5
1000a660:	202b883a 	mov	r21,r4
1000a664:	3027883a 	mov	r19,r6
1000a668:	10002526 	beq	r2,zero,1000a700 <__sfvwrite_r+0xe0>
1000a66c:	28800417 	ldw	r2,16(r5)
1000a670:	10002326 	beq	r2,zero,1000a700 <__sfvwrite_r+0xe0>
1000a674:	1880008c 	andi	r2,r3,2
1000a678:	9c400017 	ldw	r17,0(r19)
1000a67c:	10003126 	beq	r2,zero,1000a744 <__sfvwrite_r+0x124>
1000a680:	0029883a 	mov	r20,zero
1000a684:	0025883a 	mov	r18,zero
1000a688:	05810004 	movi	r22,1024
1000a68c:	a00d883a 	mov	r6,r20
1000a690:	a809883a 	mov	r4,r21
1000a694:	90002526 	beq	r18,zero,1000a72c <__sfvwrite_r+0x10c>
1000a698:	900f883a 	mov	r7,r18
1000a69c:	81400717 	ldw	r5,28(r16)
1000a6a0:	b480012e 	bgeu	r22,r18,1000a6a8 <__sfvwrite_r+0x88>
1000a6a4:	01c10004 	movi	r7,1024
1000a6a8:	80800917 	ldw	r2,36(r16)
1000a6ac:	103ee83a 	callr	r2
1000a6b0:	0080510e 	bge	zero,r2,1000a7f8 <__sfvwrite_r+0x1d8>
1000a6b4:	98c00217 	ldw	r3,8(r19)
1000a6b8:	a0a9883a 	add	r20,r20,r2
1000a6bc:	90a5c83a 	sub	r18,r18,r2
1000a6c0:	1885c83a 	sub	r2,r3,r2
1000a6c4:	98800215 	stw	r2,8(r19)
1000a6c8:	103ff01e 	bne	r2,zero,1000a68c <__alt_data_end+0xf800a68c>
1000a6cc:	0005883a 	mov	r2,zero
1000a6d0:	dfc00b17 	ldw	ra,44(sp)
1000a6d4:	df000a17 	ldw	fp,40(sp)
1000a6d8:	ddc00917 	ldw	r23,36(sp)
1000a6dc:	dd800817 	ldw	r22,32(sp)
1000a6e0:	dd400717 	ldw	r21,28(sp)
1000a6e4:	dd000617 	ldw	r20,24(sp)
1000a6e8:	dcc00517 	ldw	r19,20(sp)
1000a6ec:	dc800417 	ldw	r18,16(sp)
1000a6f0:	dc400317 	ldw	r17,12(sp)
1000a6f4:	dc000217 	ldw	r16,8(sp)
1000a6f8:	dec00c04 	addi	sp,sp,48
1000a6fc:	f800283a 	ret
1000a700:	a809883a 	mov	r4,r21
1000a704:	800b883a 	mov	r5,r16
1000a708:	00081800 	call	10008180 <__swsetup_r>
1000a70c:	80c0030b 	ldhu	r3,12(r16)
1000a710:	103fd826 	beq	r2,zero,1000a674 <__alt_data_end+0xf800a674>
1000a714:	18c01014 	ori	r3,r3,64
1000a718:	80c0030d 	sth	r3,12(r16)
1000a71c:	00c00244 	movi	r3,9
1000a720:	00bfffc4 	movi	r2,-1
1000a724:	a8c00015 	stw	r3,0(r21)
1000a728:	003fe906 	br	1000a6d0 <__alt_data_end+0xf800a6d0>
1000a72c:	8d000017 	ldw	r20,0(r17)
1000a730:	8c800117 	ldw	r18,4(r17)
1000a734:	8c400204 	addi	r17,r17,8
1000a738:	003fd406 	br	1000a68c <__alt_data_end+0xf800a68c>
1000a73c:	0005883a 	mov	r2,zero
1000a740:	f800283a 	ret
1000a744:	1880004c 	andi	r2,r3,1
1000a748:	1000301e 	bne	r2,zero,1000a80c <__sfvwrite_r+0x1ec>
1000a74c:	002f883a 	mov	r23,zero
1000a750:	0025883a 	mov	r18,zero
1000a754:	90001c26 	beq	r18,zero,1000a7c8 <__sfvwrite_r+0x1a8>
1000a758:	1880800c 	andi	r2,r3,512
1000a75c:	85000217 	ldw	r20,8(r16)
1000a760:	10006c26 	beq	r2,zero,1000a914 <__sfvwrite_r+0x2f4>
1000a764:	a02d883a 	mov	r22,r20
1000a768:	95008536 	bltu	r18,r20,1000a980 <__sfvwrite_r+0x360>
1000a76c:	1881200c 	andi	r2,r3,1152
1000a770:	10009d1e 	bne	r2,zero,1000a9e8 <__sfvwrite_r+0x3c8>
1000a774:	81000017 	ldw	r4,0(r16)
1000a778:	a039883a 	mov	fp,r20
1000a77c:	9029883a 	mov	r20,r18
1000a780:	b80b883a 	mov	r5,r23
1000a784:	b00d883a 	mov	r6,r22
1000a788:	000b8940 	call	1000b894 <memmove>
1000a78c:	80c00217 	ldw	r3,8(r16)
1000a790:	81000017 	ldw	r4,0(r16)
1000a794:	9005883a 	mov	r2,r18
1000a798:	1f39c83a 	sub	fp,r3,fp
1000a79c:	258f883a 	add	r7,r4,r22
1000a7a0:	87000215 	stw	fp,8(r16)
1000a7a4:	81c00015 	stw	r7,0(r16)
1000a7a8:	98c00217 	ldw	r3,8(r19)
1000a7ac:	b8af883a 	add	r23,r23,r2
1000a7b0:	90a5c83a 	sub	r18,r18,r2
1000a7b4:	1d05c83a 	sub	r2,r3,r20
1000a7b8:	98800215 	stw	r2,8(r19)
1000a7bc:	103fc326 	beq	r2,zero,1000a6cc <__alt_data_end+0xf800a6cc>
1000a7c0:	80c0030b 	ldhu	r3,12(r16)
1000a7c4:	903fe41e 	bne	r18,zero,1000a758 <__alt_data_end+0xf800a758>
1000a7c8:	8dc00017 	ldw	r23,0(r17)
1000a7cc:	8c800117 	ldw	r18,4(r17)
1000a7d0:	8c400204 	addi	r17,r17,8
1000a7d4:	003fdf06 	br	1000a754 <__alt_data_end+0xf800a754>
1000a7d8:	000cb5c0 	call	1000cb5c <_realloc_r>
1000a7dc:	102d883a 	mov	r22,r2
1000a7e0:	1000a01e 	bne	r2,zero,1000aa64 <__sfvwrite_r+0x444>
1000a7e4:	81400417 	ldw	r5,16(r16)
1000a7e8:	a809883a 	mov	r4,r21
1000a7ec:	000a3300 	call	1000a330 <_free_r>
1000a7f0:	00800304 	movi	r2,12
1000a7f4:	a8800015 	stw	r2,0(r21)
1000a7f8:	80c0030b 	ldhu	r3,12(r16)
1000a7fc:	00bfffc4 	movi	r2,-1
1000a800:	18c01014 	ori	r3,r3,64
1000a804:	80c0030d 	sth	r3,12(r16)
1000a808:	003fb106 	br	1000a6d0 <__alt_data_end+0xf800a6d0>
1000a80c:	0029883a 	mov	r20,zero
1000a810:	0011883a 	mov	r8,zero
1000a814:	0039883a 	mov	fp,zero
1000a818:	0025883a 	mov	r18,zero
1000a81c:	90001f26 	beq	r18,zero,1000a89c <__sfvwrite_r+0x27c>
1000a820:	40006826 	beq	r8,zero,1000a9c4 <__sfvwrite_r+0x3a4>
1000a824:	a02f883a 	mov	r23,r20
1000a828:	9500012e 	bgeu	r18,r20,1000a830 <__sfvwrite_r+0x210>
1000a82c:	902f883a 	mov	r23,r18
1000a830:	81000017 	ldw	r4,0(r16)
1000a834:	80800417 	ldw	r2,16(r16)
1000a838:	b82d883a 	mov	r22,r23
1000a83c:	81800217 	ldw	r6,8(r16)
1000a840:	81c00517 	ldw	r7,20(r16)
1000a844:	1100022e 	bgeu	r2,r4,1000a850 <__sfvwrite_r+0x230>
1000a848:	31c7883a 	add	r3,r6,r7
1000a84c:	1dc01816 	blt	r3,r23,1000a8b0 <__sfvwrite_r+0x290>
1000a850:	b9c03f16 	blt	r23,r7,1000a950 <__sfvwrite_r+0x330>
1000a854:	80800917 	ldw	r2,36(r16)
1000a858:	81400717 	ldw	r5,28(r16)
1000a85c:	a809883a 	mov	r4,r21
1000a860:	da000115 	stw	r8,4(sp)
1000a864:	e00d883a 	mov	r6,fp
1000a868:	103ee83a 	callr	r2
1000a86c:	102d883a 	mov	r22,r2
1000a870:	da000117 	ldw	r8,4(sp)
1000a874:	00bfe00e 	bge	zero,r2,1000a7f8 <__alt_data_end+0xf800a7f8>
1000a878:	a5a9c83a 	sub	r20,r20,r22
1000a87c:	a0001f26 	beq	r20,zero,1000a8fc <__sfvwrite_r+0x2dc>
1000a880:	98800217 	ldw	r2,8(r19)
1000a884:	e5b9883a 	add	fp,fp,r22
1000a888:	95a5c83a 	sub	r18,r18,r22
1000a88c:	15adc83a 	sub	r22,r2,r22
1000a890:	9d800215 	stw	r22,8(r19)
1000a894:	b03f8d26 	beq	r22,zero,1000a6cc <__alt_data_end+0xf800a6cc>
1000a898:	903fe11e 	bne	r18,zero,1000a820 <__alt_data_end+0xf800a820>
1000a89c:	8f000017 	ldw	fp,0(r17)
1000a8a0:	8c800117 	ldw	r18,4(r17)
1000a8a4:	0011883a 	mov	r8,zero
1000a8a8:	8c400204 	addi	r17,r17,8
1000a8ac:	003fdb06 	br	1000a81c <__alt_data_end+0xf800a81c>
1000a8b0:	180d883a 	mov	r6,r3
1000a8b4:	e00b883a 	mov	r5,fp
1000a8b8:	da000115 	stw	r8,4(sp)
1000a8bc:	d8c00015 	stw	r3,0(sp)
1000a8c0:	000b8940 	call	1000b894 <memmove>
1000a8c4:	d8c00017 	ldw	r3,0(sp)
1000a8c8:	80800017 	ldw	r2,0(r16)
1000a8cc:	a809883a 	mov	r4,r21
1000a8d0:	800b883a 	mov	r5,r16
1000a8d4:	10c5883a 	add	r2,r2,r3
1000a8d8:	80800015 	stw	r2,0(r16)
1000a8dc:	d8c00015 	stw	r3,0(sp)
1000a8e0:	0009c000 	call	10009c00 <_fflush_r>
1000a8e4:	d8c00017 	ldw	r3,0(sp)
1000a8e8:	da000117 	ldw	r8,4(sp)
1000a8ec:	103fc21e 	bne	r2,zero,1000a7f8 <__alt_data_end+0xf800a7f8>
1000a8f0:	182d883a 	mov	r22,r3
1000a8f4:	a5a9c83a 	sub	r20,r20,r22
1000a8f8:	a03fe11e 	bne	r20,zero,1000a880 <__alt_data_end+0xf800a880>
1000a8fc:	a809883a 	mov	r4,r21
1000a900:	800b883a 	mov	r5,r16
1000a904:	0009c000 	call	10009c00 <_fflush_r>
1000a908:	103fbb1e 	bne	r2,zero,1000a7f8 <__alt_data_end+0xf800a7f8>
1000a90c:	0011883a 	mov	r8,zero
1000a910:	003fdb06 	br	1000a880 <__alt_data_end+0xf800a880>
1000a914:	81000017 	ldw	r4,0(r16)
1000a918:	80800417 	ldw	r2,16(r16)
1000a91c:	1100012e 	bgeu	r2,r4,1000a924 <__sfvwrite_r+0x304>
1000a920:	a4805a36 	bltu	r20,r18,1000aa8c <__sfvwrite_r+0x46c>
1000a924:	81c00517 	ldw	r7,20(r16)
1000a928:	91c01a36 	bltu	r18,r7,1000a994 <__sfvwrite_r+0x374>
1000a92c:	80800917 	ldw	r2,36(r16)
1000a930:	81400717 	ldw	r5,28(r16)
1000a934:	a809883a 	mov	r4,r21
1000a938:	b80d883a 	mov	r6,r23
1000a93c:	103ee83a 	callr	r2
1000a940:	1029883a 	mov	r20,r2
1000a944:	00bfac0e 	bge	zero,r2,1000a7f8 <__alt_data_end+0xf800a7f8>
1000a948:	a005883a 	mov	r2,r20
1000a94c:	003f9606 	br	1000a7a8 <__alt_data_end+0xf800a7a8>
1000a950:	b80d883a 	mov	r6,r23
1000a954:	e00b883a 	mov	r5,fp
1000a958:	da000115 	stw	r8,4(sp)
1000a95c:	000b8940 	call	1000b894 <memmove>
1000a960:	80800217 	ldw	r2,8(r16)
1000a964:	80c00017 	ldw	r3,0(r16)
1000a968:	da000117 	ldw	r8,4(sp)
1000a96c:	15c5c83a 	sub	r2,r2,r23
1000a970:	1def883a 	add	r23,r3,r23
1000a974:	80800215 	stw	r2,8(r16)
1000a978:	85c00015 	stw	r23,0(r16)
1000a97c:	003fbe06 	br	1000a878 <__alt_data_end+0xf800a878>
1000a980:	81000017 	ldw	r4,0(r16)
1000a984:	9039883a 	mov	fp,r18
1000a988:	9029883a 	mov	r20,r18
1000a98c:	902d883a 	mov	r22,r18
1000a990:	003f7b06 	br	1000a780 <__alt_data_end+0xf800a780>
1000a994:	b80b883a 	mov	r5,r23
1000a998:	900d883a 	mov	r6,r18
1000a99c:	000b8940 	call	1000b894 <memmove>
1000a9a0:	80c00217 	ldw	r3,8(r16)
1000a9a4:	80800017 	ldw	r2,0(r16)
1000a9a8:	9029883a 	mov	r20,r18
1000a9ac:	1c87c83a 	sub	r3,r3,r18
1000a9b0:	1485883a 	add	r2,r2,r18
1000a9b4:	80800015 	stw	r2,0(r16)
1000a9b8:	80c00215 	stw	r3,8(r16)
1000a9bc:	9005883a 	mov	r2,r18
1000a9c0:	003f7906 	br	1000a7a8 <__alt_data_end+0xf800a7a8>
1000a9c4:	e009883a 	mov	r4,fp
1000a9c8:	01400284 	movi	r5,10
1000a9cc:	900d883a 	mov	r6,r18
1000a9d0:	000b6740 	call	1000b674 <memchr>
1000a9d4:	10003826 	beq	r2,zero,1000aab8 <__sfvwrite_r+0x498>
1000a9d8:	10800044 	addi	r2,r2,1
1000a9dc:	1729c83a 	sub	r20,r2,fp
1000a9e0:	02000044 	movi	r8,1
1000a9e4:	003f8f06 	br	1000a824 <__alt_data_end+0xf800a824>
1000a9e8:	80800517 	ldw	r2,20(r16)
1000a9ec:	81400417 	ldw	r5,16(r16)
1000a9f0:	87000017 	ldw	fp,0(r16)
1000a9f4:	10a9883a 	add	r20,r2,r2
1000a9f8:	a085883a 	add	r2,r20,r2
1000a9fc:	1028d7fa 	srli	r20,r2,31
1000aa00:	e179c83a 	sub	fp,fp,r5
1000aa04:	e1000044 	addi	r4,fp,1
1000aa08:	a085883a 	add	r2,r20,r2
1000aa0c:	1029d07a 	srai	r20,r2,1
1000aa10:	2485883a 	add	r2,r4,r18
1000aa14:	a00d883a 	mov	r6,r20
1000aa18:	a080022e 	bgeu	r20,r2,1000aa24 <__sfvwrite_r+0x404>
1000aa1c:	1029883a 	mov	r20,r2
1000aa20:	100d883a 	mov	r6,r2
1000aa24:	18c1000c 	andi	r3,r3,1024
1000aa28:	a809883a 	mov	r4,r21
1000aa2c:	183f6a26 	beq	r3,zero,1000a7d8 <__alt_data_end+0xf800a7d8>
1000aa30:	300b883a 	mov	r5,r6
1000aa34:	000aecc0 	call	1000aecc <_malloc_r>
1000aa38:	102d883a 	mov	r22,r2
1000aa3c:	103f6c26 	beq	r2,zero,1000a7f0 <__alt_data_end+0xf800a7f0>
1000aa40:	81400417 	ldw	r5,16(r16)
1000aa44:	1009883a 	mov	r4,r2
1000aa48:	e00d883a 	mov	r6,fp
1000aa4c:	000b75c0 	call	1000b75c <memcpy>
1000aa50:	8080030b 	ldhu	r2,12(r16)
1000aa54:	00fedfc4 	movi	r3,-1153
1000aa58:	10c4703a 	and	r2,r2,r3
1000aa5c:	10802014 	ori	r2,r2,128
1000aa60:	8080030d 	sth	r2,12(r16)
1000aa64:	b709883a 	add	r4,r22,fp
1000aa68:	a707c83a 	sub	r3,r20,fp
1000aa6c:	85800415 	stw	r22,16(r16)
1000aa70:	85000515 	stw	r20,20(r16)
1000aa74:	81000015 	stw	r4,0(r16)
1000aa78:	9039883a 	mov	fp,r18
1000aa7c:	80c00215 	stw	r3,8(r16)
1000aa80:	9029883a 	mov	r20,r18
1000aa84:	902d883a 	mov	r22,r18
1000aa88:	003f3d06 	br	1000a780 <__alt_data_end+0xf800a780>
1000aa8c:	b80b883a 	mov	r5,r23
1000aa90:	a00d883a 	mov	r6,r20
1000aa94:	000b8940 	call	1000b894 <memmove>
1000aa98:	80800017 	ldw	r2,0(r16)
1000aa9c:	a809883a 	mov	r4,r21
1000aaa0:	800b883a 	mov	r5,r16
1000aaa4:	1505883a 	add	r2,r2,r20
1000aaa8:	80800015 	stw	r2,0(r16)
1000aaac:	0009c000 	call	10009c00 <_fflush_r>
1000aab0:	103fa526 	beq	r2,zero,1000a948 <__alt_data_end+0xf800a948>
1000aab4:	003f5006 	br	1000a7f8 <__alt_data_end+0xf800a7f8>
1000aab8:	95000044 	addi	r20,r18,1
1000aabc:	02000044 	movi	r8,1
1000aac0:	003f5806 	br	1000a824 <__alt_data_end+0xf800a824>

1000aac4 <_fwalk>:
1000aac4:	defff804 	addi	sp,sp,-32
1000aac8:	dd400515 	stw	r21,20(sp)
1000aacc:	2540b804 	addi	r21,r4,736
1000aad0:	dd800615 	stw	r22,24(sp)
1000aad4:	dd000415 	stw	r20,16(sp)
1000aad8:	dfc00715 	stw	ra,28(sp)
1000aadc:	dcc00315 	stw	r19,12(sp)
1000aae0:	dc800215 	stw	r18,8(sp)
1000aae4:	dc400115 	stw	r17,4(sp)
1000aae8:	dc000015 	stw	r16,0(sp)
1000aaec:	2829883a 	mov	r20,r5
1000aaf0:	002d883a 	mov	r22,zero
1000aaf4:	000a1cc0 	call	1000a1cc <__sfp_lock_acquire>
1000aaf8:	a8001426 	beq	r21,zero,1000ab4c <_fwalk+0x88>
1000aafc:	04ffffc4 	movi	r19,-1
1000ab00:	ac400117 	ldw	r17,4(r21)
1000ab04:	ac800217 	ldw	r18,8(r21)
1000ab08:	8c7fffc4 	addi	r17,r17,-1
1000ab0c:	88000d16 	blt	r17,zero,1000ab44 <_fwalk+0x80>
1000ab10:	94000304 	addi	r16,r18,12
1000ab14:	94800384 	addi	r18,r18,14
1000ab18:	80c0000f 	ldh	r3,0(r16)
1000ab1c:	8c7fffc4 	addi	r17,r17,-1
1000ab20:	813ffd04 	addi	r4,r16,-12
1000ab24:	18000426 	beq	r3,zero,1000ab38 <_fwalk+0x74>
1000ab28:	90c0000f 	ldh	r3,0(r18)
1000ab2c:	1cc00226 	beq	r3,r19,1000ab38 <_fwalk+0x74>
1000ab30:	a03ee83a 	callr	r20
1000ab34:	b0acb03a 	or	r22,r22,r2
1000ab38:	84001a04 	addi	r16,r16,104
1000ab3c:	94801a04 	addi	r18,r18,104
1000ab40:	8cfff51e 	bne	r17,r19,1000ab18 <__alt_data_end+0xf800ab18>
1000ab44:	ad400017 	ldw	r21,0(r21)
1000ab48:	a83fed1e 	bne	r21,zero,1000ab00 <__alt_data_end+0xf800ab00>
1000ab4c:	000a1d00 	call	1000a1d0 <__sfp_lock_release>
1000ab50:	b005883a 	mov	r2,r22
1000ab54:	dfc00717 	ldw	ra,28(sp)
1000ab58:	dd800617 	ldw	r22,24(sp)
1000ab5c:	dd400517 	ldw	r21,20(sp)
1000ab60:	dd000417 	ldw	r20,16(sp)
1000ab64:	dcc00317 	ldw	r19,12(sp)
1000ab68:	dc800217 	ldw	r18,8(sp)
1000ab6c:	dc400117 	ldw	r17,4(sp)
1000ab70:	dc000017 	ldw	r16,0(sp)
1000ab74:	dec00804 	addi	sp,sp,32
1000ab78:	f800283a 	ret

1000ab7c <_fwalk_reent>:
1000ab7c:	defff804 	addi	sp,sp,-32
1000ab80:	dd400515 	stw	r21,20(sp)
1000ab84:	2540b804 	addi	r21,r4,736
1000ab88:	dd800615 	stw	r22,24(sp)
1000ab8c:	dd000415 	stw	r20,16(sp)
1000ab90:	dcc00315 	stw	r19,12(sp)
1000ab94:	dfc00715 	stw	ra,28(sp)
1000ab98:	dc800215 	stw	r18,8(sp)
1000ab9c:	dc400115 	stw	r17,4(sp)
1000aba0:	dc000015 	stw	r16,0(sp)
1000aba4:	2027883a 	mov	r19,r4
1000aba8:	2829883a 	mov	r20,r5
1000abac:	002d883a 	mov	r22,zero
1000abb0:	000a1cc0 	call	1000a1cc <__sfp_lock_acquire>
1000abb4:	a8001326 	beq	r21,zero,1000ac04 <_fwalk_reent+0x88>
1000abb8:	04bfffc4 	movi	r18,-1
1000abbc:	ac400117 	ldw	r17,4(r21)
1000abc0:	ac000217 	ldw	r16,8(r21)
1000abc4:	8c7fffc4 	addi	r17,r17,-1
1000abc8:	88000c16 	blt	r17,zero,1000abfc <_fwalk_reent+0x80>
1000abcc:	84000304 	addi	r16,r16,12
1000abd0:	80c0000f 	ldh	r3,0(r16)
1000abd4:	8c7fffc4 	addi	r17,r17,-1
1000abd8:	817ffd04 	addi	r5,r16,-12
1000abdc:	18000526 	beq	r3,zero,1000abf4 <_fwalk_reent+0x78>
1000abe0:	80c0008f 	ldh	r3,2(r16)
1000abe4:	9809883a 	mov	r4,r19
1000abe8:	1c800226 	beq	r3,r18,1000abf4 <_fwalk_reent+0x78>
1000abec:	a03ee83a 	callr	r20
1000abf0:	b0acb03a 	or	r22,r22,r2
1000abf4:	84001a04 	addi	r16,r16,104
1000abf8:	8cbff51e 	bne	r17,r18,1000abd0 <__alt_data_end+0xf800abd0>
1000abfc:	ad400017 	ldw	r21,0(r21)
1000ac00:	a83fee1e 	bne	r21,zero,1000abbc <__alt_data_end+0xf800abbc>
1000ac04:	000a1d00 	call	1000a1d0 <__sfp_lock_release>
1000ac08:	b005883a 	mov	r2,r22
1000ac0c:	dfc00717 	ldw	ra,28(sp)
1000ac10:	dd800617 	ldw	r22,24(sp)
1000ac14:	dd400517 	ldw	r21,20(sp)
1000ac18:	dd000417 	ldw	r20,16(sp)
1000ac1c:	dcc00317 	ldw	r19,12(sp)
1000ac20:	dc800217 	ldw	r18,8(sp)
1000ac24:	dc400117 	ldw	r17,4(sp)
1000ac28:	dc000017 	ldw	r16,0(sp)
1000ac2c:	dec00804 	addi	sp,sp,32
1000ac30:	f800283a 	ret

1000ac34 <_setlocale_r>:
1000ac34:	30001b26 	beq	r6,zero,1000aca4 <_setlocale_r+0x70>
1000ac38:	01440074 	movhi	r5,4097
1000ac3c:	defffe04 	addi	sp,sp,-8
1000ac40:	29473604 	addi	r5,r5,7384
1000ac44:	3009883a 	mov	r4,r6
1000ac48:	dc000015 	stw	r16,0(sp)
1000ac4c:	dfc00115 	stw	ra,4(sp)
1000ac50:	3021883a 	mov	r16,r6
1000ac54:	000d28c0 	call	1000d28c <strcmp>
1000ac58:	1000061e 	bne	r2,zero,1000ac74 <_setlocale_r+0x40>
1000ac5c:	00840074 	movhi	r2,4097
1000ac60:	10871704 	addi	r2,r2,7260
1000ac64:	dfc00117 	ldw	ra,4(sp)
1000ac68:	dc000017 	ldw	r16,0(sp)
1000ac6c:	dec00204 	addi	sp,sp,8
1000ac70:	f800283a 	ret
1000ac74:	01440074 	movhi	r5,4097
1000ac78:	29471704 	addi	r5,r5,7260
1000ac7c:	8009883a 	mov	r4,r16
1000ac80:	000d28c0 	call	1000d28c <strcmp>
1000ac84:	103ff526 	beq	r2,zero,1000ac5c <__alt_data_end+0xf800ac5c>
1000ac88:	01440074 	movhi	r5,4097
1000ac8c:	29472104 	addi	r5,r5,7300
1000ac90:	8009883a 	mov	r4,r16
1000ac94:	000d28c0 	call	1000d28c <strcmp>
1000ac98:	103ff026 	beq	r2,zero,1000ac5c <__alt_data_end+0xf800ac5c>
1000ac9c:	0005883a 	mov	r2,zero
1000aca0:	003ff006 	br	1000ac64 <__alt_data_end+0xf800ac64>
1000aca4:	00840074 	movhi	r2,4097
1000aca8:	10871704 	addi	r2,r2,7260
1000acac:	f800283a 	ret

1000acb0 <__locale_charset>:
1000acb0:	00840074 	movhi	r2,4097
1000acb4:	1088a804 	addi	r2,r2,8864
1000acb8:	f800283a 	ret

1000acbc <__locale_mb_cur_max>:
1000acbc:	00840074 	movhi	r2,4097
1000acc0:	108e4504 	addi	r2,r2,14612
1000acc4:	10800017 	ldw	r2,0(r2)
1000acc8:	f800283a 	ret

1000accc <__locale_msgcharset>:
1000accc:	00840074 	movhi	r2,4097
1000acd0:	1088a004 	addi	r2,r2,8832
1000acd4:	f800283a 	ret

1000acd8 <__locale_cjk_lang>:
1000acd8:	0005883a 	mov	r2,zero
1000acdc:	f800283a 	ret

1000ace0 <_localeconv_r>:
1000ace0:	00840074 	movhi	r2,4097
1000ace4:	1088b004 	addi	r2,r2,8896
1000ace8:	f800283a 	ret

1000acec <setlocale>:
1000acec:	00c40074 	movhi	r3,4097
1000acf0:	18ce4404 	addi	r3,r3,14608
1000acf4:	2005883a 	mov	r2,r4
1000acf8:	19000017 	ldw	r4,0(r3)
1000acfc:	280d883a 	mov	r6,r5
1000ad00:	100b883a 	mov	r5,r2
1000ad04:	000ac341 	jmpi	1000ac34 <_setlocale_r>

1000ad08 <localeconv>:
1000ad08:	00840074 	movhi	r2,4097
1000ad0c:	1088b004 	addi	r2,r2,8896
1000ad10:	f800283a 	ret

1000ad14 <__smakebuf_r>:
1000ad14:	2880030b 	ldhu	r2,12(r5)
1000ad18:	10c0008c 	andi	r3,r2,2
1000ad1c:	1800401e 	bne	r3,zero,1000ae20 <__smakebuf_r+0x10c>
1000ad20:	deffec04 	addi	sp,sp,-80
1000ad24:	dc000f15 	stw	r16,60(sp)
1000ad28:	2821883a 	mov	r16,r5
1000ad2c:	2940038f 	ldh	r5,14(r5)
1000ad30:	dc401015 	stw	r17,64(sp)
1000ad34:	dfc01315 	stw	ra,76(sp)
1000ad38:	dcc01215 	stw	r19,72(sp)
1000ad3c:	dc801115 	stw	r18,68(sp)
1000ad40:	2023883a 	mov	r17,r4
1000ad44:	28001b16 	blt	r5,zero,1000adb4 <__smakebuf_r+0xa0>
1000ad48:	d80d883a 	mov	r6,sp
1000ad4c:	000ed040 	call	1000ed04 <_fstat_r>
1000ad50:	10001716 	blt	r2,zero,1000adb0 <__smakebuf_r+0x9c>
1000ad54:	d8800117 	ldw	r2,4(sp)
1000ad58:	00e00014 	movui	r3,32768
1000ad5c:	10bc000c 	andi	r2,r2,61440
1000ad60:	10c03726 	beq	r2,r3,1000ae40 <__smakebuf_r+0x12c>
1000ad64:	80c0030b 	ldhu	r3,12(r16)
1000ad68:	18c20014 	ori	r3,r3,2048
1000ad6c:	80c0030d 	sth	r3,12(r16)
1000ad70:	00c80004 	movi	r3,8192
1000ad74:	10c03c1e 	bne	r2,r3,1000ae68 <__smakebuf_r+0x154>
1000ad78:	8140038f 	ldh	r5,14(r16)
1000ad7c:	8809883a 	mov	r4,r17
1000ad80:	000ed5c0 	call	1000ed5c <_isatty_r>
1000ad84:	10004e26 	beq	r2,zero,1000aec0 <__smakebuf_r+0x1ac>
1000ad88:	8080030b 	ldhu	r2,12(r16)
1000ad8c:	04c00044 	movi	r19,1
1000ad90:	80c010c4 	addi	r3,r16,67
1000ad94:	14c4b03a 	or	r2,r2,r19
1000ad98:	8080030d 	sth	r2,12(r16)
1000ad9c:	80c00015 	stw	r3,0(r16)
1000ada0:	80c00415 	stw	r3,16(r16)
1000ada4:	84c00515 	stw	r19,20(r16)
1000ada8:	04810004 	movi	r18,1024
1000adac:	00000706 	br	1000adcc <__smakebuf_r+0xb8>
1000adb0:	8080030b 	ldhu	r2,12(r16)
1000adb4:	10c0200c 	andi	r3,r2,128
1000adb8:	18001f1e 	bne	r3,zero,1000ae38 <__smakebuf_r+0x124>
1000adbc:	04810004 	movi	r18,1024
1000adc0:	10820014 	ori	r2,r2,2048
1000adc4:	8080030d 	sth	r2,12(r16)
1000adc8:	0027883a 	mov	r19,zero
1000adcc:	8809883a 	mov	r4,r17
1000add0:	900b883a 	mov	r5,r18
1000add4:	000aecc0 	call	1000aecc <_malloc_r>
1000add8:	10002e26 	beq	r2,zero,1000ae94 <__smakebuf_r+0x180>
1000addc:	80c0030b 	ldhu	r3,12(r16)
1000ade0:	01040074 	movhi	r4,4097
1000ade4:	21279a04 	addi	r4,r4,-24984
1000ade8:	89000f15 	stw	r4,60(r17)
1000adec:	18c02014 	ori	r3,r3,128
1000adf0:	80c0030d 	sth	r3,12(r16)
1000adf4:	80800015 	stw	r2,0(r16)
1000adf8:	80800415 	stw	r2,16(r16)
1000adfc:	84800515 	stw	r18,20(r16)
1000ae00:	98001c1e 	bne	r19,zero,1000ae74 <__smakebuf_r+0x160>
1000ae04:	dfc01317 	ldw	ra,76(sp)
1000ae08:	dcc01217 	ldw	r19,72(sp)
1000ae0c:	dc801117 	ldw	r18,68(sp)
1000ae10:	dc401017 	ldw	r17,64(sp)
1000ae14:	dc000f17 	ldw	r16,60(sp)
1000ae18:	dec01404 	addi	sp,sp,80
1000ae1c:	f800283a 	ret
1000ae20:	288010c4 	addi	r2,r5,67
1000ae24:	28800015 	stw	r2,0(r5)
1000ae28:	28800415 	stw	r2,16(r5)
1000ae2c:	00800044 	movi	r2,1
1000ae30:	28800515 	stw	r2,20(r5)
1000ae34:	f800283a 	ret
1000ae38:	04801004 	movi	r18,64
1000ae3c:	003fe006 	br	1000adc0 <__alt_data_end+0xf800adc0>
1000ae40:	81000a17 	ldw	r4,40(r16)
1000ae44:	00c40074 	movhi	r3,4097
1000ae48:	18f48a04 	addi	r3,r3,-11736
1000ae4c:	20ffc51e 	bne	r4,r3,1000ad64 <__alt_data_end+0xf800ad64>
1000ae50:	80c0030b 	ldhu	r3,12(r16)
1000ae54:	01010004 	movi	r4,1024
1000ae58:	81001315 	stw	r4,76(r16)
1000ae5c:	1906b03a 	or	r3,r3,r4
1000ae60:	80c0030d 	sth	r3,12(r16)
1000ae64:	003fc206 	br	1000ad70 <__alt_data_end+0xf800ad70>
1000ae68:	0027883a 	mov	r19,zero
1000ae6c:	04810004 	movi	r18,1024
1000ae70:	003fd606 	br	1000adcc <__alt_data_end+0xf800adcc>
1000ae74:	8140038f 	ldh	r5,14(r16)
1000ae78:	8809883a 	mov	r4,r17
1000ae7c:	000ed5c0 	call	1000ed5c <_isatty_r>
1000ae80:	103fe026 	beq	r2,zero,1000ae04 <__alt_data_end+0xf800ae04>
1000ae84:	8080030b 	ldhu	r2,12(r16)
1000ae88:	10800054 	ori	r2,r2,1
1000ae8c:	8080030d 	sth	r2,12(r16)
1000ae90:	003fdc06 	br	1000ae04 <__alt_data_end+0xf800ae04>
1000ae94:	8080030b 	ldhu	r2,12(r16)
1000ae98:	10c0800c 	andi	r3,r2,512
1000ae9c:	183fd91e 	bne	r3,zero,1000ae04 <__alt_data_end+0xf800ae04>
1000aea0:	10800094 	ori	r2,r2,2
1000aea4:	80c010c4 	addi	r3,r16,67
1000aea8:	8080030d 	sth	r2,12(r16)
1000aeac:	00800044 	movi	r2,1
1000aeb0:	80c00015 	stw	r3,0(r16)
1000aeb4:	80c00415 	stw	r3,16(r16)
1000aeb8:	80800515 	stw	r2,20(r16)
1000aebc:	003fd106 	br	1000ae04 <__alt_data_end+0xf800ae04>
1000aec0:	04c00044 	movi	r19,1
1000aec4:	04810004 	movi	r18,1024
1000aec8:	003fc006 	br	1000adcc <__alt_data_end+0xf800adcc>

1000aecc <_malloc_r>:
1000aecc:	defff504 	addi	sp,sp,-44
1000aed0:	dc800315 	stw	r18,12(sp)
1000aed4:	dfc00a15 	stw	ra,40(sp)
1000aed8:	df000915 	stw	fp,36(sp)
1000aedc:	ddc00815 	stw	r23,32(sp)
1000aee0:	dd800715 	stw	r22,28(sp)
1000aee4:	dd400615 	stw	r21,24(sp)
1000aee8:	dd000515 	stw	r20,20(sp)
1000aeec:	dcc00415 	stw	r19,16(sp)
1000aef0:	dc400215 	stw	r17,8(sp)
1000aef4:	dc000115 	stw	r16,4(sp)
1000aef8:	288002c4 	addi	r2,r5,11
1000aefc:	00c00584 	movi	r3,22
1000af00:	2025883a 	mov	r18,r4
1000af04:	18802a2e 	bgeu	r3,r2,1000afb0 <_malloc_r+0xe4>
1000af08:	047ffe04 	movi	r17,-8
1000af0c:	1462703a 	and	r17,r2,r17
1000af10:	88009e16 	blt	r17,zero,1000b18c <_malloc_r+0x2c0>
1000af14:	89409d36 	bltu	r17,r5,1000b18c <_malloc_r+0x2c0>
1000af18:	000f85c0 	call	1000f85c <__malloc_lock>
1000af1c:	00807dc4 	movi	r2,503
1000af20:	14402736 	bltu	r2,r17,1000afc0 <_malloc_r+0xf4>
1000af24:	8806d0fa 	srli	r3,r17,3
1000af28:	04c40074 	movhi	r19,4097
1000af2c:	9cc8be04 	addi	r19,r19,8952
1000af30:	18c5883a 	add	r2,r3,r3
1000af34:	1085883a 	add	r2,r2,r2
1000af38:	1085883a 	add	r2,r2,r2
1000af3c:	9885883a 	add	r2,r19,r2
1000af40:	14000317 	ldw	r16,12(r2)
1000af44:	80814a26 	beq	r16,r2,1000b470 <_malloc_r+0x5a4>
1000af48:	80c00117 	ldw	r3,4(r16)
1000af4c:	81000317 	ldw	r4,12(r16)
1000af50:	00bfff04 	movi	r2,-4
1000af54:	1884703a 	and	r2,r3,r2
1000af58:	81400217 	ldw	r5,8(r16)
1000af5c:	8085883a 	add	r2,r16,r2
1000af60:	10c00117 	ldw	r3,4(r2)
1000af64:	29000315 	stw	r4,12(r5)
1000af68:	21400215 	stw	r5,8(r4)
1000af6c:	18c00054 	ori	r3,r3,1
1000af70:	10c00115 	stw	r3,4(r2)
1000af74:	9009883a 	mov	r4,r18
1000af78:	000f87c0 	call	1000f87c <__malloc_unlock>
1000af7c:	80800204 	addi	r2,r16,8
1000af80:	dfc00a17 	ldw	ra,40(sp)
1000af84:	df000917 	ldw	fp,36(sp)
1000af88:	ddc00817 	ldw	r23,32(sp)
1000af8c:	dd800717 	ldw	r22,28(sp)
1000af90:	dd400617 	ldw	r21,24(sp)
1000af94:	dd000517 	ldw	r20,20(sp)
1000af98:	dcc00417 	ldw	r19,16(sp)
1000af9c:	dc800317 	ldw	r18,12(sp)
1000afa0:	dc400217 	ldw	r17,8(sp)
1000afa4:	dc000117 	ldw	r16,4(sp)
1000afa8:	dec00b04 	addi	sp,sp,44
1000afac:	f800283a 	ret
1000afb0:	04400404 	movi	r17,16
1000afb4:	89407536 	bltu	r17,r5,1000b18c <_malloc_r+0x2c0>
1000afb8:	000f85c0 	call	1000f85c <__malloc_lock>
1000afbc:	003fd906 	br	1000af24 <__alt_data_end+0xf800af24>
1000afc0:	8806d27a 	srli	r3,r17,9
1000afc4:	18007526 	beq	r3,zero,1000b19c <_malloc_r+0x2d0>
1000afc8:	00800104 	movi	r2,4
1000afcc:	10c0ef36 	bltu	r2,r3,1000b38c <_malloc_r+0x4c0>
1000afd0:	8806d1ba 	srli	r3,r17,6
1000afd4:	19c00e04 	addi	r7,r3,56
1000afd8:	39cb883a 	add	r5,r7,r7
1000afdc:	04c40074 	movhi	r19,4097
1000afe0:	294b883a 	add	r5,r5,r5
1000afe4:	9cc8be04 	addi	r19,r19,8952
1000afe8:	294b883a 	add	r5,r5,r5
1000afec:	994b883a 	add	r5,r19,r5
1000aff0:	2c000317 	ldw	r16,12(r5)
1000aff4:	2c000e26 	beq	r5,r16,1000b030 <_malloc_r+0x164>
1000aff8:	80800117 	ldw	r2,4(r16)
1000affc:	01bfff04 	movi	r6,-4
1000b000:	010003c4 	movi	r4,15
1000b004:	1184703a 	and	r2,r2,r6
1000b008:	1447c83a 	sub	r3,r2,r17
1000b00c:	20c00716 	blt	r4,r3,1000b02c <_malloc_r+0x160>
1000b010:	1800650e 	bge	r3,zero,1000b1a8 <_malloc_r+0x2dc>
1000b014:	84000317 	ldw	r16,12(r16)
1000b018:	2c000526 	beq	r5,r16,1000b030 <_malloc_r+0x164>
1000b01c:	80800117 	ldw	r2,4(r16)
1000b020:	1184703a 	and	r2,r2,r6
1000b024:	1447c83a 	sub	r3,r2,r17
1000b028:	20fff90e 	bge	r4,r3,1000b010 <__alt_data_end+0xf800b010>
1000b02c:	39ffffc4 	addi	r7,r7,-1
1000b030:	38c00044 	addi	r3,r7,1
1000b034:	01840074 	movhi	r6,4097
1000b038:	9c000417 	ldw	r16,16(r19)
1000b03c:	3188be04 	addi	r6,r6,8952
1000b040:	32400204 	addi	r9,r6,8
1000b044:	82410326 	beq	r16,r9,1000b454 <_malloc_r+0x588>
1000b048:	81000117 	ldw	r4,4(r16)
1000b04c:	00bfff04 	movi	r2,-4
1000b050:	208e703a 	and	r7,r4,r2
1000b054:	3c45c83a 	sub	r2,r7,r17
1000b058:	010003c4 	movi	r4,15
1000b05c:	2080ee16 	blt	r4,r2,1000b418 <_malloc_r+0x54c>
1000b060:	32400515 	stw	r9,20(r6)
1000b064:	32400415 	stw	r9,16(r6)
1000b068:	1000510e 	bge	r2,zero,1000b1b0 <_malloc_r+0x2e4>
1000b06c:	00807fc4 	movi	r2,511
1000b070:	11c0ce36 	bltu	r2,r7,1000b3ac <_malloc_r+0x4e0>
1000b074:	3808d0fa 	srli	r4,r7,3
1000b078:	01c00044 	movi	r7,1
1000b07c:	30800117 	ldw	r2,4(r6)
1000b080:	210b883a 	add	r5,r4,r4
1000b084:	294b883a 	add	r5,r5,r5
1000b088:	2009d0ba 	srai	r4,r4,2
1000b08c:	294b883a 	add	r5,r5,r5
1000b090:	298b883a 	add	r5,r5,r6
1000b094:	2a000217 	ldw	r8,8(r5)
1000b098:	3908983a 	sll	r4,r7,r4
1000b09c:	81400315 	stw	r5,12(r16)
1000b0a0:	82000215 	stw	r8,8(r16)
1000b0a4:	2088b03a 	or	r4,r4,r2
1000b0a8:	2c000215 	stw	r16,8(r5)
1000b0ac:	31000115 	stw	r4,4(r6)
1000b0b0:	44000315 	stw	r16,12(r8)
1000b0b4:	1805d0ba 	srai	r2,r3,2
1000b0b8:	01400044 	movi	r5,1
1000b0bc:	288a983a 	sll	r5,r5,r2
1000b0c0:	21404336 	bltu	r4,r5,1000b1d0 <_malloc_r+0x304>
1000b0c4:	2144703a 	and	r2,r4,r5
1000b0c8:	10000a1e 	bne	r2,zero,1000b0f4 <_malloc_r+0x228>
1000b0cc:	00bfff04 	movi	r2,-4
1000b0d0:	294b883a 	add	r5,r5,r5
1000b0d4:	1886703a 	and	r3,r3,r2
1000b0d8:	2144703a 	and	r2,r4,r5
1000b0dc:	18c00104 	addi	r3,r3,4
1000b0e0:	1000041e 	bne	r2,zero,1000b0f4 <_malloc_r+0x228>
1000b0e4:	294b883a 	add	r5,r5,r5
1000b0e8:	2144703a 	and	r2,r4,r5
1000b0ec:	18c00104 	addi	r3,r3,4
1000b0f0:	103ffc26 	beq	r2,zero,1000b0e4 <__alt_data_end+0xf800b0e4>
1000b0f4:	023fff04 	movi	r8,-4
1000b0f8:	01c003c4 	movi	r7,15
1000b0fc:	18c5883a 	add	r2,r3,r3
1000b100:	1085883a 	add	r2,r2,r2
1000b104:	1085883a 	add	r2,r2,r2
1000b108:	9895883a 	add	r10,r19,r2
1000b10c:	52c00304 	addi	r11,r10,12
1000b110:	1819883a 	mov	r12,r3
1000b114:	5c000017 	ldw	r16,0(r11)
1000b118:	59bffd04 	addi	r6,r11,-12
1000b11c:	8180041e 	bne	r16,r6,1000b130 <_malloc_r+0x264>
1000b120:	0000ce06 	br	1000b45c <_malloc_r+0x590>
1000b124:	2000d70e 	bge	r4,zero,1000b484 <_malloc_r+0x5b8>
1000b128:	84000317 	ldw	r16,12(r16)
1000b12c:	8180cb26 	beq	r16,r6,1000b45c <_malloc_r+0x590>
1000b130:	80800117 	ldw	r2,4(r16)
1000b134:	1204703a 	and	r2,r2,r8
1000b138:	1449c83a 	sub	r4,r2,r17
1000b13c:	393ff90e 	bge	r7,r4,1000b124 <__alt_data_end+0xf800b124>
1000b140:	80800317 	ldw	r2,12(r16)
1000b144:	80c00217 	ldw	r3,8(r16)
1000b148:	89400054 	ori	r5,r17,1
1000b14c:	81400115 	stw	r5,4(r16)
1000b150:	18800315 	stw	r2,12(r3)
1000b154:	10c00215 	stw	r3,8(r2)
1000b158:	8463883a 	add	r17,r16,r17
1000b15c:	9c400515 	stw	r17,20(r19)
1000b160:	9c400415 	stw	r17,16(r19)
1000b164:	20800054 	ori	r2,r4,1
1000b168:	88800115 	stw	r2,4(r17)
1000b16c:	8a400315 	stw	r9,12(r17)
1000b170:	8a400215 	stw	r9,8(r17)
1000b174:	8923883a 	add	r17,r17,r4
1000b178:	89000015 	stw	r4,0(r17)
1000b17c:	9009883a 	mov	r4,r18
1000b180:	000f87c0 	call	1000f87c <__malloc_unlock>
1000b184:	80800204 	addi	r2,r16,8
1000b188:	003f7d06 	br	1000af80 <__alt_data_end+0xf800af80>
1000b18c:	00800304 	movi	r2,12
1000b190:	90800015 	stw	r2,0(r18)
1000b194:	0005883a 	mov	r2,zero
1000b198:	003f7906 	br	1000af80 <__alt_data_end+0xf800af80>
1000b19c:	01401f84 	movi	r5,126
1000b1a0:	01c00fc4 	movi	r7,63
1000b1a4:	003f8d06 	br	1000afdc <__alt_data_end+0xf800afdc>
1000b1a8:	81000317 	ldw	r4,12(r16)
1000b1ac:	003f6a06 	br	1000af58 <__alt_data_end+0xf800af58>
1000b1b0:	81c5883a 	add	r2,r16,r7
1000b1b4:	10c00117 	ldw	r3,4(r2)
1000b1b8:	9009883a 	mov	r4,r18
1000b1bc:	18c00054 	ori	r3,r3,1
1000b1c0:	10c00115 	stw	r3,4(r2)
1000b1c4:	000f87c0 	call	1000f87c <__malloc_unlock>
1000b1c8:	80800204 	addi	r2,r16,8
1000b1cc:	003f6c06 	br	1000af80 <__alt_data_end+0xf800af80>
1000b1d0:	9c000217 	ldw	r16,8(r19)
1000b1d4:	00bfff04 	movi	r2,-4
1000b1d8:	85800117 	ldw	r22,4(r16)
1000b1dc:	b0ac703a 	and	r22,r22,r2
1000b1e0:	b4400336 	bltu	r22,r17,1000b1f0 <_malloc_r+0x324>
1000b1e4:	b445c83a 	sub	r2,r22,r17
1000b1e8:	00c003c4 	movi	r3,15
1000b1ec:	18805d16 	blt	r3,r2,1000b364 <_malloc_r+0x498>
1000b1f0:	05c40074 	movhi	r23,4097
1000b1f4:	00840074 	movhi	r2,4097
1000b1f8:	bdce4604 	addi	r23,r23,14616
1000b1fc:	10951404 	addi	r2,r2,21584
1000b200:	15400017 	ldw	r21,0(r2)
1000b204:	b9000017 	ldw	r4,0(r23)
1000b208:	00ffffc4 	movi	r3,-1
1000b20c:	858d883a 	add	r6,r16,r22
1000b210:	8d6b883a 	add	r21,r17,r21
1000b214:	20c0e426 	beq	r4,r3,1000b5a8 <_malloc_r+0x6dc>
1000b218:	ad4403c4 	addi	r21,r21,4111
1000b21c:	00fc0004 	movi	r3,-4096
1000b220:	a8ea703a 	and	r21,r21,r3
1000b224:	9009883a 	mov	r4,r18
1000b228:	a80b883a 	mov	r5,r21
1000b22c:	d9800015 	stw	r6,0(sp)
1000b230:	000d0fc0 	call	1000d0fc <_sbrk_r>
1000b234:	00ffffc4 	movi	r3,-1
1000b238:	1029883a 	mov	r20,r2
1000b23c:	d9800017 	ldw	r6,0(sp)
1000b240:	10c0a426 	beq	r2,r3,1000b4d4 <_malloc_r+0x608>
1000b244:	1180a236 	bltu	r2,r6,1000b4d0 <_malloc_r+0x604>
1000b248:	07040074 	movhi	fp,4097
1000b24c:	e7151d04 	addi	fp,fp,21620
1000b250:	e0c00017 	ldw	r3,0(fp)
1000b254:	a8c7883a 	add	r3,r21,r3
1000b258:	e0c00015 	stw	r3,0(fp)
1000b25c:	3500da26 	beq	r6,r20,1000b5c8 <_malloc_r+0x6fc>
1000b260:	b9000017 	ldw	r4,0(r23)
1000b264:	00bfffc4 	movi	r2,-1
1000b268:	2080e426 	beq	r4,r2,1000b5fc <_malloc_r+0x730>
1000b26c:	a185c83a 	sub	r2,r20,r6
1000b270:	1885883a 	add	r2,r3,r2
1000b274:	e0800015 	stw	r2,0(fp)
1000b278:	a0c001cc 	andi	r3,r20,7
1000b27c:	1800b526 	beq	r3,zero,1000b554 <_malloc_r+0x688>
1000b280:	a0e9c83a 	sub	r20,r20,r3
1000b284:	00840204 	movi	r2,4104
1000b288:	a5000204 	addi	r20,r20,8
1000b28c:	10c7c83a 	sub	r3,r2,r3
1000b290:	a545883a 	add	r2,r20,r21
1000b294:	1083ffcc 	andi	r2,r2,4095
1000b298:	18abc83a 	sub	r21,r3,r2
1000b29c:	9009883a 	mov	r4,r18
1000b2a0:	a80b883a 	mov	r5,r21
1000b2a4:	000d0fc0 	call	1000d0fc <_sbrk_r>
1000b2a8:	00ffffc4 	movi	r3,-1
1000b2ac:	10c0d026 	beq	r2,r3,1000b5f0 <_malloc_r+0x724>
1000b2b0:	1507c83a 	sub	r3,r2,r20
1000b2b4:	a8c7883a 	add	r3,r21,r3
1000b2b8:	18c00054 	ori	r3,r3,1
1000b2bc:	e0800017 	ldw	r2,0(fp)
1000b2c0:	9d000215 	stw	r20,8(r19)
1000b2c4:	a0c00115 	stw	r3,4(r20)
1000b2c8:	a887883a 	add	r3,r21,r2
1000b2cc:	e0c00015 	stw	r3,0(fp)
1000b2d0:	84c00e26 	beq	r16,r19,1000b30c <_malloc_r+0x440>
1000b2d4:	018003c4 	movi	r6,15
1000b2d8:	3580a02e 	bgeu	r6,r22,1000b55c <_malloc_r+0x690>
1000b2dc:	81400117 	ldw	r5,4(r16)
1000b2e0:	013ffe04 	movi	r4,-8
1000b2e4:	b0bffd04 	addi	r2,r22,-12
1000b2e8:	1104703a 	and	r2,r2,r4
1000b2ec:	2900004c 	andi	r4,r5,1
1000b2f0:	1108b03a 	or	r4,r2,r4
1000b2f4:	81000115 	stw	r4,4(r16)
1000b2f8:	01400144 	movi	r5,5
1000b2fc:	8089883a 	add	r4,r16,r2
1000b300:	21400115 	stw	r5,4(r4)
1000b304:	21400215 	stw	r5,8(r4)
1000b308:	3080c036 	bltu	r6,r2,1000b60c <_malloc_r+0x740>
1000b30c:	00840074 	movhi	r2,4097
1000b310:	10951304 	addi	r2,r2,21580
1000b314:	11000017 	ldw	r4,0(r2)
1000b318:	20c0012e 	bgeu	r4,r3,1000b320 <_malloc_r+0x454>
1000b31c:	10c00015 	stw	r3,0(r2)
1000b320:	00840074 	movhi	r2,4097
1000b324:	10951204 	addi	r2,r2,21576
1000b328:	11000017 	ldw	r4,0(r2)
1000b32c:	9c000217 	ldw	r16,8(r19)
1000b330:	20c0012e 	bgeu	r4,r3,1000b338 <_malloc_r+0x46c>
1000b334:	10c00015 	stw	r3,0(r2)
1000b338:	80c00117 	ldw	r3,4(r16)
1000b33c:	00bfff04 	movi	r2,-4
1000b340:	1886703a 	and	r3,r3,r2
1000b344:	1c45c83a 	sub	r2,r3,r17
1000b348:	1c400236 	bltu	r3,r17,1000b354 <_malloc_r+0x488>
1000b34c:	00c003c4 	movi	r3,15
1000b350:	18800416 	blt	r3,r2,1000b364 <_malloc_r+0x498>
1000b354:	9009883a 	mov	r4,r18
1000b358:	000f87c0 	call	1000f87c <__malloc_unlock>
1000b35c:	0005883a 	mov	r2,zero
1000b360:	003f0706 	br	1000af80 <__alt_data_end+0xf800af80>
1000b364:	88c00054 	ori	r3,r17,1
1000b368:	80c00115 	stw	r3,4(r16)
1000b36c:	8463883a 	add	r17,r16,r17
1000b370:	10800054 	ori	r2,r2,1
1000b374:	9c400215 	stw	r17,8(r19)
1000b378:	88800115 	stw	r2,4(r17)
1000b37c:	9009883a 	mov	r4,r18
1000b380:	000f87c0 	call	1000f87c <__malloc_unlock>
1000b384:	80800204 	addi	r2,r16,8
1000b388:	003efd06 	br	1000af80 <__alt_data_end+0xf800af80>
1000b38c:	00800504 	movi	r2,20
1000b390:	10c0482e 	bgeu	r2,r3,1000b4b4 <_malloc_r+0x5e8>
1000b394:	00801504 	movi	r2,84
1000b398:	10c06836 	bltu	r2,r3,1000b53c <_malloc_r+0x670>
1000b39c:	8806d33a 	srli	r3,r17,12
1000b3a0:	19c01b84 	addi	r7,r3,110
1000b3a4:	39cb883a 	add	r5,r7,r7
1000b3a8:	003f0c06 	br	1000afdc <__alt_data_end+0xf800afdc>
1000b3ac:	3804d27a 	srli	r2,r7,9
1000b3b0:	01000104 	movi	r4,4
1000b3b4:	2080422e 	bgeu	r4,r2,1000b4c0 <_malloc_r+0x5f4>
1000b3b8:	01000504 	movi	r4,20
1000b3bc:	20807c36 	bltu	r4,r2,1000b5b0 <_malloc_r+0x6e4>
1000b3c0:	110016c4 	addi	r4,r2,91
1000b3c4:	210b883a 	add	r5,r4,r4
1000b3c8:	294b883a 	add	r5,r5,r5
1000b3cc:	294b883a 	add	r5,r5,r5
1000b3d0:	994b883a 	add	r5,r19,r5
1000b3d4:	28800217 	ldw	r2,8(r5)
1000b3d8:	02040074 	movhi	r8,4097
1000b3dc:	4208be04 	addi	r8,r8,8952
1000b3e0:	11406326 	beq	r2,r5,1000b570 <_malloc_r+0x6a4>
1000b3e4:	01bfff04 	movi	r6,-4
1000b3e8:	11000117 	ldw	r4,4(r2)
1000b3ec:	2188703a 	and	r4,r4,r6
1000b3f0:	3900022e 	bgeu	r7,r4,1000b3fc <_malloc_r+0x530>
1000b3f4:	10800217 	ldw	r2,8(r2)
1000b3f8:	28bffb1e 	bne	r5,r2,1000b3e8 <__alt_data_end+0xf800b3e8>
1000b3fc:	11800317 	ldw	r6,12(r2)
1000b400:	99000117 	ldw	r4,4(r19)
1000b404:	81800315 	stw	r6,12(r16)
1000b408:	80800215 	stw	r2,8(r16)
1000b40c:	34000215 	stw	r16,8(r6)
1000b410:	14000315 	stw	r16,12(r2)
1000b414:	003f2706 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b418:	88c00054 	ori	r3,r17,1
1000b41c:	80c00115 	stw	r3,4(r16)
1000b420:	8463883a 	add	r17,r16,r17
1000b424:	34400515 	stw	r17,20(r6)
1000b428:	34400415 	stw	r17,16(r6)
1000b42c:	10c00054 	ori	r3,r2,1
1000b430:	8a400315 	stw	r9,12(r17)
1000b434:	8a400215 	stw	r9,8(r17)
1000b438:	88c00115 	stw	r3,4(r17)
1000b43c:	88a3883a 	add	r17,r17,r2
1000b440:	88800015 	stw	r2,0(r17)
1000b444:	9009883a 	mov	r4,r18
1000b448:	000f87c0 	call	1000f87c <__malloc_unlock>
1000b44c:	80800204 	addi	r2,r16,8
1000b450:	003ecb06 	br	1000af80 <__alt_data_end+0xf800af80>
1000b454:	31000117 	ldw	r4,4(r6)
1000b458:	003f1606 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b45c:	63000044 	addi	r12,r12,1
1000b460:	608000cc 	andi	r2,r12,3
1000b464:	5ac00204 	addi	r11,r11,8
1000b468:	103f2a1e 	bne	r2,zero,1000b114 <__alt_data_end+0xf800b114>
1000b46c:	00002106 	br	1000b4f4 <_malloc_r+0x628>
1000b470:	80800204 	addi	r2,r16,8
1000b474:	84000517 	ldw	r16,20(r16)
1000b478:	143eb31e 	bne	r2,r16,1000af48 <__alt_data_end+0xf800af48>
1000b47c:	18c00084 	addi	r3,r3,2
1000b480:	003eec06 	br	1000b034 <__alt_data_end+0xf800b034>
1000b484:	8085883a 	add	r2,r16,r2
1000b488:	10c00117 	ldw	r3,4(r2)
1000b48c:	81000317 	ldw	r4,12(r16)
1000b490:	81400217 	ldw	r5,8(r16)
1000b494:	18c00054 	ori	r3,r3,1
1000b498:	10c00115 	stw	r3,4(r2)
1000b49c:	29000315 	stw	r4,12(r5)
1000b4a0:	21400215 	stw	r5,8(r4)
1000b4a4:	9009883a 	mov	r4,r18
1000b4a8:	000f87c0 	call	1000f87c <__malloc_unlock>
1000b4ac:	80800204 	addi	r2,r16,8
1000b4b0:	003eb306 	br	1000af80 <__alt_data_end+0xf800af80>
1000b4b4:	19c016c4 	addi	r7,r3,91
1000b4b8:	39cb883a 	add	r5,r7,r7
1000b4bc:	003ec706 	br	1000afdc <__alt_data_end+0xf800afdc>
1000b4c0:	3804d1ba 	srli	r2,r7,6
1000b4c4:	11000e04 	addi	r4,r2,56
1000b4c8:	210b883a 	add	r5,r4,r4
1000b4cc:	003fbe06 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b4d0:	84ff5d26 	beq	r16,r19,1000b248 <__alt_data_end+0xf800b248>
1000b4d4:	9c000217 	ldw	r16,8(r19)
1000b4d8:	00bfff04 	movi	r2,-4
1000b4dc:	80c00117 	ldw	r3,4(r16)
1000b4e0:	1886703a 	and	r3,r3,r2
1000b4e4:	003f9706 	br	1000b344 <__alt_data_end+0xf800b344>
1000b4e8:	52800017 	ldw	r10,0(r10)
1000b4ec:	18ffffc4 	addi	r3,r3,-1
1000b4f0:	50805c1e 	bne	r10,r2,1000b664 <_malloc_r+0x798>
1000b4f4:	190000cc 	andi	r4,r3,3
1000b4f8:	50bffe04 	addi	r2,r10,-8
1000b4fc:	203ffa1e 	bne	r4,zero,1000b4e8 <__alt_data_end+0xf800b4e8>
1000b500:	98800117 	ldw	r2,4(r19)
1000b504:	0146303a 	nor	r3,zero,r5
1000b508:	1884703a 	and	r2,r3,r2
1000b50c:	98800115 	stw	r2,4(r19)
1000b510:	294b883a 	add	r5,r5,r5
1000b514:	117f2e36 	bltu	r2,r5,1000b1d0 <__alt_data_end+0xf800b1d0>
1000b518:	283f2d26 	beq	r5,zero,1000b1d0 <__alt_data_end+0xf800b1d0>
1000b51c:	1146703a 	and	r3,r2,r5
1000b520:	1800521e 	bne	r3,zero,1000b66c <_malloc_r+0x7a0>
1000b524:	6007883a 	mov	r3,r12
1000b528:	294b883a 	add	r5,r5,r5
1000b52c:	1148703a 	and	r4,r2,r5
1000b530:	18c00104 	addi	r3,r3,4
1000b534:	203ffc26 	beq	r4,zero,1000b528 <__alt_data_end+0xf800b528>
1000b538:	003ef006 	br	1000b0fc <__alt_data_end+0xf800b0fc>
1000b53c:	00805504 	movi	r2,340
1000b540:	10c01336 	bltu	r2,r3,1000b590 <_malloc_r+0x6c4>
1000b544:	8806d3fa 	srli	r3,r17,15
1000b548:	19c01dc4 	addi	r7,r3,119
1000b54c:	39cb883a 	add	r5,r7,r7
1000b550:	003ea206 	br	1000afdc <__alt_data_end+0xf800afdc>
1000b554:	00c40004 	movi	r3,4096
1000b558:	003f4d06 	br	1000b290 <__alt_data_end+0xf800b290>
1000b55c:	00800044 	movi	r2,1
1000b560:	a0800115 	stw	r2,4(r20)
1000b564:	a021883a 	mov	r16,r20
1000b568:	0007883a 	mov	r3,zero
1000b56c:	003f7506 	br	1000b344 <__alt_data_end+0xf800b344>
1000b570:	200bd0ba 	srai	r5,r4,2
1000b574:	01800044 	movi	r6,1
1000b578:	41000117 	ldw	r4,4(r8)
1000b57c:	314a983a 	sll	r5,r6,r5
1000b580:	100d883a 	mov	r6,r2
1000b584:	2908b03a 	or	r4,r5,r4
1000b588:	41000115 	stw	r4,4(r8)
1000b58c:	003f9d06 	br	1000b404 <__alt_data_end+0xf800b404>
1000b590:	00815504 	movi	r2,1364
1000b594:	10c01336 	bltu	r2,r3,1000b5e4 <_malloc_r+0x718>
1000b598:	8806d4ba 	srli	r3,r17,18
1000b59c:	19c01f04 	addi	r7,r3,124
1000b5a0:	39cb883a 	add	r5,r7,r7
1000b5a4:	003e8d06 	br	1000afdc <__alt_data_end+0xf800afdc>
1000b5a8:	ad400404 	addi	r21,r21,16
1000b5ac:	003f1d06 	br	1000b224 <__alt_data_end+0xf800b224>
1000b5b0:	01001504 	movi	r4,84
1000b5b4:	20801c36 	bltu	r4,r2,1000b628 <_malloc_r+0x75c>
1000b5b8:	3804d33a 	srli	r2,r7,12
1000b5bc:	11001b84 	addi	r4,r2,110
1000b5c0:	210b883a 	add	r5,r4,r4
1000b5c4:	003f8006 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b5c8:	3083ffcc 	andi	r2,r6,4095
1000b5cc:	103f241e 	bne	r2,zero,1000b260 <__alt_data_end+0xf800b260>
1000b5d0:	99000217 	ldw	r4,8(r19)
1000b5d4:	ad85883a 	add	r2,r21,r22
1000b5d8:	10800054 	ori	r2,r2,1
1000b5dc:	20800115 	stw	r2,4(r4)
1000b5e0:	003f4a06 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b5e4:	01403f04 	movi	r5,252
1000b5e8:	01c01f84 	movi	r7,126
1000b5ec:	003e7b06 	br	1000afdc <__alt_data_end+0xf800afdc>
1000b5f0:	00c00044 	movi	r3,1
1000b5f4:	002b883a 	mov	r21,zero
1000b5f8:	003f3006 	br	1000b2bc <__alt_data_end+0xf800b2bc>
1000b5fc:	00840074 	movhi	r2,4097
1000b600:	108e4604 	addi	r2,r2,14616
1000b604:	15000015 	stw	r20,0(r2)
1000b608:	003f1b06 	br	1000b278 <__alt_data_end+0xf800b278>
1000b60c:	9009883a 	mov	r4,r18
1000b610:	81400204 	addi	r5,r16,8
1000b614:	000a3300 	call	1000a330 <_free_r>
1000b618:	00840074 	movhi	r2,4097
1000b61c:	10951d04 	addi	r2,r2,21620
1000b620:	10c00017 	ldw	r3,0(r2)
1000b624:	003f3906 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b628:	01005504 	movi	r4,340
1000b62c:	20800436 	bltu	r4,r2,1000b640 <_malloc_r+0x774>
1000b630:	3804d3fa 	srli	r2,r7,15
1000b634:	11001dc4 	addi	r4,r2,119
1000b638:	210b883a 	add	r5,r4,r4
1000b63c:	003f6206 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b640:	01015504 	movi	r4,1364
1000b644:	20800436 	bltu	r4,r2,1000b658 <_malloc_r+0x78c>
1000b648:	3804d4ba 	srli	r2,r7,18
1000b64c:	11001f04 	addi	r4,r2,124
1000b650:	210b883a 	add	r5,r4,r4
1000b654:	003f5c06 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b658:	01403f04 	movi	r5,252
1000b65c:	01001f84 	movi	r4,126
1000b660:	003f5906 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b664:	98800117 	ldw	r2,4(r19)
1000b668:	003fa906 	br	1000b510 <__alt_data_end+0xf800b510>
1000b66c:	6007883a 	mov	r3,r12
1000b670:	003ea206 	br	1000b0fc <__alt_data_end+0xf800b0fc>

1000b674 <memchr>:
1000b674:	208000cc 	andi	r2,r4,3
1000b678:	280f883a 	mov	r7,r5
1000b67c:	10003526 	beq	r2,zero,1000b754 <memchr+0xe0>
1000b680:	30bfffc4 	addi	r2,r6,-1
1000b684:	30001b26 	beq	r6,zero,1000b6f4 <memchr+0x80>
1000b688:	21800003 	ldbu	r6,0(r4)
1000b68c:	28c03fcc 	andi	r3,r5,255
1000b690:	30c01a26 	beq	r6,r3,1000b6fc <memchr+0x88>
1000b694:	180d883a 	mov	r6,r3
1000b698:	00000406 	br	1000b6ac <memchr+0x38>
1000b69c:	10001526 	beq	r2,zero,1000b6f4 <memchr+0x80>
1000b6a0:	20c00003 	ldbu	r3,0(r4)
1000b6a4:	10bfffc4 	addi	r2,r2,-1
1000b6a8:	19801426 	beq	r3,r6,1000b6fc <memchr+0x88>
1000b6ac:	21000044 	addi	r4,r4,1
1000b6b0:	20c000cc 	andi	r3,r4,3
1000b6b4:	183ff91e 	bne	r3,zero,1000b69c <__alt_data_end+0xf800b69c>
1000b6b8:	024000c4 	movi	r9,3
1000b6bc:	48801136 	bltu	r9,r2,1000b704 <memchr+0x90>
1000b6c0:	10000c26 	beq	r2,zero,1000b6f4 <memchr+0x80>
1000b6c4:	20c00003 	ldbu	r3,0(r4)
1000b6c8:	29403fcc 	andi	r5,r5,255
1000b6cc:	19400b26 	beq	r3,r5,1000b6fc <memchr+0x88>
1000b6d0:	20c00044 	addi	r3,r4,1
1000b6d4:	2085883a 	add	r2,r4,r2
1000b6d8:	39803fcc 	andi	r6,r7,255
1000b6dc:	00000306 	br	1000b6ec <memchr+0x78>
1000b6e0:	18c00044 	addi	r3,r3,1
1000b6e4:	197fffc3 	ldbu	r5,-1(r3)
1000b6e8:	29800426 	beq	r5,r6,1000b6fc <memchr+0x88>
1000b6ec:	1809883a 	mov	r4,r3
1000b6f0:	18bffb1e 	bne	r3,r2,1000b6e0 <__alt_data_end+0xf800b6e0>
1000b6f4:	0005883a 	mov	r2,zero
1000b6f8:	f800283a 	ret
1000b6fc:	2005883a 	mov	r2,r4
1000b700:	f800283a 	ret
1000b704:	28c03fcc 	andi	r3,r5,255
1000b708:	1810923a 	slli	r8,r3,8
1000b70c:	02ffbff4 	movhi	r11,65279
1000b710:	02a02074 	movhi	r10,32897
1000b714:	40c6b03a 	or	r3,r8,r3
1000b718:	1810943a 	slli	r8,r3,16
1000b71c:	5affbfc4 	addi	r11,r11,-257
1000b720:	52a02004 	addi	r10,r10,-32640
1000b724:	40d0b03a 	or	r8,r8,r3
1000b728:	20c00017 	ldw	r3,0(r4)
1000b72c:	40c6f03a 	xor	r3,r8,r3
1000b730:	1acd883a 	add	r6,r3,r11
1000b734:	00c6303a 	nor	r3,zero,r3
1000b738:	30c6703a 	and	r3,r6,r3
1000b73c:	1a86703a 	and	r3,r3,r10
1000b740:	183fdf1e 	bne	r3,zero,1000b6c0 <__alt_data_end+0xf800b6c0>
1000b744:	10bfff04 	addi	r2,r2,-4
1000b748:	21000104 	addi	r4,r4,4
1000b74c:	48bff636 	bltu	r9,r2,1000b728 <__alt_data_end+0xf800b728>
1000b750:	003fdb06 	br	1000b6c0 <__alt_data_end+0xf800b6c0>
1000b754:	3005883a 	mov	r2,r6
1000b758:	003fd706 	br	1000b6b8 <__alt_data_end+0xf800b6b8>

1000b75c <memcpy>:
1000b75c:	deffff04 	addi	sp,sp,-4
1000b760:	dc000015 	stw	r16,0(sp)
1000b764:	00c003c4 	movi	r3,15
1000b768:	2005883a 	mov	r2,r4
1000b76c:	1980432e 	bgeu	r3,r6,1000b87c <memcpy+0x120>
1000b770:	2146b03a 	or	r3,r4,r5
1000b774:	18c000cc 	andi	r3,r3,3
1000b778:	1800421e 	bne	r3,zero,1000b884 <memcpy+0x128>
1000b77c:	343ffc04 	addi	r16,r6,-16
1000b780:	8020d13a 	srli	r16,r16,4
1000b784:	28c00104 	addi	r3,r5,4
1000b788:	23400104 	addi	r13,r4,4
1000b78c:	801e913a 	slli	r15,r16,4
1000b790:	2b000204 	addi	r12,r5,8
1000b794:	22c00204 	addi	r11,r4,8
1000b798:	7bc00504 	addi	r15,r15,20
1000b79c:	2a800304 	addi	r10,r5,12
1000b7a0:	22400304 	addi	r9,r4,12
1000b7a4:	2bdf883a 	add	r15,r5,r15
1000b7a8:	2811883a 	mov	r8,r5
1000b7ac:	200f883a 	mov	r7,r4
1000b7b0:	41000017 	ldw	r4,0(r8)
1000b7b4:	39c00404 	addi	r7,r7,16
1000b7b8:	18c00404 	addi	r3,r3,16
1000b7bc:	393ffc15 	stw	r4,-16(r7)
1000b7c0:	1bbffc17 	ldw	r14,-16(r3)
1000b7c4:	6b400404 	addi	r13,r13,16
1000b7c8:	5ac00404 	addi	r11,r11,16
1000b7cc:	6bbffc15 	stw	r14,-16(r13)
1000b7d0:	63800017 	ldw	r14,0(r12)
1000b7d4:	4a400404 	addi	r9,r9,16
1000b7d8:	42000404 	addi	r8,r8,16
1000b7dc:	5bbffc15 	stw	r14,-16(r11)
1000b7e0:	53800017 	ldw	r14,0(r10)
1000b7e4:	63000404 	addi	r12,r12,16
1000b7e8:	52800404 	addi	r10,r10,16
1000b7ec:	4bbffc15 	stw	r14,-16(r9)
1000b7f0:	1bffef1e 	bne	r3,r15,1000b7b0 <__alt_data_end+0xf800b7b0>
1000b7f4:	81c00044 	addi	r7,r16,1
1000b7f8:	380e913a 	slli	r7,r7,4
1000b7fc:	310003cc 	andi	r4,r6,15
1000b800:	02c000c4 	movi	r11,3
1000b804:	11c7883a 	add	r3,r2,r7
1000b808:	29cb883a 	add	r5,r5,r7
1000b80c:	59001f2e 	bgeu	r11,r4,1000b88c <memcpy+0x130>
1000b810:	1813883a 	mov	r9,r3
1000b814:	2811883a 	mov	r8,r5
1000b818:	200f883a 	mov	r7,r4
1000b81c:	42800017 	ldw	r10,0(r8)
1000b820:	4a400104 	addi	r9,r9,4
1000b824:	39ffff04 	addi	r7,r7,-4
1000b828:	4abfff15 	stw	r10,-4(r9)
1000b82c:	42000104 	addi	r8,r8,4
1000b830:	59fffa36 	bltu	r11,r7,1000b81c <__alt_data_end+0xf800b81c>
1000b834:	213fff04 	addi	r4,r4,-4
1000b838:	2008d0ba 	srli	r4,r4,2
1000b83c:	318000cc 	andi	r6,r6,3
1000b840:	21000044 	addi	r4,r4,1
1000b844:	2109883a 	add	r4,r4,r4
1000b848:	2109883a 	add	r4,r4,r4
1000b84c:	1907883a 	add	r3,r3,r4
1000b850:	290b883a 	add	r5,r5,r4
1000b854:	30000626 	beq	r6,zero,1000b870 <memcpy+0x114>
1000b858:	198d883a 	add	r6,r3,r6
1000b85c:	29c00003 	ldbu	r7,0(r5)
1000b860:	18c00044 	addi	r3,r3,1
1000b864:	29400044 	addi	r5,r5,1
1000b868:	19ffffc5 	stb	r7,-1(r3)
1000b86c:	19bffb1e 	bne	r3,r6,1000b85c <__alt_data_end+0xf800b85c>
1000b870:	dc000017 	ldw	r16,0(sp)
1000b874:	dec00104 	addi	sp,sp,4
1000b878:	f800283a 	ret
1000b87c:	2007883a 	mov	r3,r4
1000b880:	003ff406 	br	1000b854 <__alt_data_end+0xf800b854>
1000b884:	2007883a 	mov	r3,r4
1000b888:	003ff306 	br	1000b858 <__alt_data_end+0xf800b858>
1000b88c:	200d883a 	mov	r6,r4
1000b890:	003ff006 	br	1000b854 <__alt_data_end+0xf800b854>

1000b894 <memmove>:
1000b894:	2005883a 	mov	r2,r4
1000b898:	29000b2e 	bgeu	r5,r4,1000b8c8 <memmove+0x34>
1000b89c:	298f883a 	add	r7,r5,r6
1000b8a0:	21c0092e 	bgeu	r4,r7,1000b8c8 <memmove+0x34>
1000b8a4:	2187883a 	add	r3,r4,r6
1000b8a8:	198bc83a 	sub	r5,r3,r6
1000b8ac:	30004b26 	beq	r6,zero,1000b9dc <memmove+0x148>
1000b8b0:	39ffffc4 	addi	r7,r7,-1
1000b8b4:	39000003 	ldbu	r4,0(r7)
1000b8b8:	18ffffc4 	addi	r3,r3,-1
1000b8bc:	19000005 	stb	r4,0(r3)
1000b8c0:	197ffb1e 	bne	r3,r5,1000b8b0 <__alt_data_end+0xf800b8b0>
1000b8c4:	f800283a 	ret
1000b8c8:	00c003c4 	movi	r3,15
1000b8cc:	1980412e 	bgeu	r3,r6,1000b9d4 <memmove+0x140>
1000b8d0:	1146b03a 	or	r3,r2,r5
1000b8d4:	18c000cc 	andi	r3,r3,3
1000b8d8:	1800411e 	bne	r3,zero,1000b9e0 <memmove+0x14c>
1000b8dc:	33fffc04 	addi	r15,r6,-16
1000b8e0:	781ed13a 	srli	r15,r15,4
1000b8e4:	28c00104 	addi	r3,r5,4
1000b8e8:	13400104 	addi	r13,r2,4
1000b8ec:	781c913a 	slli	r14,r15,4
1000b8f0:	2b000204 	addi	r12,r5,8
1000b8f4:	12c00204 	addi	r11,r2,8
1000b8f8:	73800504 	addi	r14,r14,20
1000b8fc:	2a800304 	addi	r10,r5,12
1000b900:	12400304 	addi	r9,r2,12
1000b904:	2b9d883a 	add	r14,r5,r14
1000b908:	2811883a 	mov	r8,r5
1000b90c:	100f883a 	mov	r7,r2
1000b910:	41000017 	ldw	r4,0(r8)
1000b914:	39c00404 	addi	r7,r7,16
1000b918:	18c00404 	addi	r3,r3,16
1000b91c:	393ffc15 	stw	r4,-16(r7)
1000b920:	193ffc17 	ldw	r4,-16(r3)
1000b924:	6b400404 	addi	r13,r13,16
1000b928:	5ac00404 	addi	r11,r11,16
1000b92c:	693ffc15 	stw	r4,-16(r13)
1000b930:	61000017 	ldw	r4,0(r12)
1000b934:	4a400404 	addi	r9,r9,16
1000b938:	42000404 	addi	r8,r8,16
1000b93c:	593ffc15 	stw	r4,-16(r11)
1000b940:	51000017 	ldw	r4,0(r10)
1000b944:	63000404 	addi	r12,r12,16
1000b948:	52800404 	addi	r10,r10,16
1000b94c:	493ffc15 	stw	r4,-16(r9)
1000b950:	1bbfef1e 	bne	r3,r14,1000b910 <__alt_data_end+0xf800b910>
1000b954:	79000044 	addi	r4,r15,1
1000b958:	2008913a 	slli	r4,r4,4
1000b95c:	328003cc 	andi	r10,r6,15
1000b960:	02c000c4 	movi	r11,3
1000b964:	1107883a 	add	r3,r2,r4
1000b968:	290b883a 	add	r5,r5,r4
1000b96c:	5a801e2e 	bgeu	r11,r10,1000b9e8 <memmove+0x154>
1000b970:	1813883a 	mov	r9,r3
1000b974:	2811883a 	mov	r8,r5
1000b978:	500f883a 	mov	r7,r10
1000b97c:	41000017 	ldw	r4,0(r8)
1000b980:	4a400104 	addi	r9,r9,4
1000b984:	39ffff04 	addi	r7,r7,-4
1000b988:	493fff15 	stw	r4,-4(r9)
1000b98c:	42000104 	addi	r8,r8,4
1000b990:	59fffa36 	bltu	r11,r7,1000b97c <__alt_data_end+0xf800b97c>
1000b994:	513fff04 	addi	r4,r10,-4
1000b998:	2008d0ba 	srli	r4,r4,2
1000b99c:	318000cc 	andi	r6,r6,3
1000b9a0:	21000044 	addi	r4,r4,1
1000b9a4:	2109883a 	add	r4,r4,r4
1000b9a8:	2109883a 	add	r4,r4,r4
1000b9ac:	1907883a 	add	r3,r3,r4
1000b9b0:	290b883a 	add	r5,r5,r4
1000b9b4:	30000926 	beq	r6,zero,1000b9dc <memmove+0x148>
1000b9b8:	198d883a 	add	r6,r3,r6
1000b9bc:	29c00003 	ldbu	r7,0(r5)
1000b9c0:	18c00044 	addi	r3,r3,1
1000b9c4:	29400044 	addi	r5,r5,1
1000b9c8:	19ffffc5 	stb	r7,-1(r3)
1000b9cc:	19bffb1e 	bne	r3,r6,1000b9bc <__alt_data_end+0xf800b9bc>
1000b9d0:	f800283a 	ret
1000b9d4:	1007883a 	mov	r3,r2
1000b9d8:	003ff606 	br	1000b9b4 <__alt_data_end+0xf800b9b4>
1000b9dc:	f800283a 	ret
1000b9e0:	1007883a 	mov	r3,r2
1000b9e4:	003ff406 	br	1000b9b8 <__alt_data_end+0xf800b9b8>
1000b9e8:	500d883a 	mov	r6,r10
1000b9ec:	003ff106 	br	1000b9b4 <__alt_data_end+0xf800b9b4>

1000b9f0 <memset>:
1000b9f0:	20c000cc 	andi	r3,r4,3
1000b9f4:	2005883a 	mov	r2,r4
1000b9f8:	18004326 	beq	r3,zero,1000bb08 <memset+0x118>
1000b9fc:	31ffffc4 	addi	r7,r6,-1
1000ba00:	30004026 	beq	r6,zero,1000bb04 <memset+0x114>
1000ba04:	2813883a 	mov	r9,r5
1000ba08:	200d883a 	mov	r6,r4
1000ba0c:	2007883a 	mov	r3,r4
1000ba10:	00000406 	br	1000ba24 <memset+0x34>
1000ba14:	3a3fffc4 	addi	r8,r7,-1
1000ba18:	31800044 	addi	r6,r6,1
1000ba1c:	38003926 	beq	r7,zero,1000bb04 <memset+0x114>
1000ba20:	400f883a 	mov	r7,r8
1000ba24:	18c00044 	addi	r3,r3,1
1000ba28:	32400005 	stb	r9,0(r6)
1000ba2c:	1a0000cc 	andi	r8,r3,3
1000ba30:	403ff81e 	bne	r8,zero,1000ba14 <__alt_data_end+0xf800ba14>
1000ba34:	010000c4 	movi	r4,3
1000ba38:	21c02d2e 	bgeu	r4,r7,1000baf0 <memset+0x100>
1000ba3c:	29803fcc 	andi	r6,r5,255
1000ba40:	3008923a 	slli	r4,r6,8
1000ba44:	218cb03a 	or	r6,r4,r6
1000ba48:	3008943a 	slli	r4,r6,16
1000ba4c:	218cb03a 	or	r6,r4,r6
1000ba50:	010003c4 	movi	r4,15
1000ba54:	21c0182e 	bgeu	r4,r7,1000bab8 <memset+0xc8>
1000ba58:	3b3ffc04 	addi	r12,r7,-16
1000ba5c:	6018d13a 	srli	r12,r12,4
1000ba60:	1a000104 	addi	r8,r3,4
1000ba64:	1ac00204 	addi	r11,r3,8
1000ba68:	6008913a 	slli	r4,r12,4
1000ba6c:	1a800304 	addi	r10,r3,12
1000ba70:	1813883a 	mov	r9,r3
1000ba74:	21000504 	addi	r4,r4,20
1000ba78:	1909883a 	add	r4,r3,r4
1000ba7c:	49800015 	stw	r6,0(r9)
1000ba80:	41800015 	stw	r6,0(r8)
1000ba84:	59800015 	stw	r6,0(r11)
1000ba88:	51800015 	stw	r6,0(r10)
1000ba8c:	42000404 	addi	r8,r8,16
1000ba90:	4a400404 	addi	r9,r9,16
1000ba94:	5ac00404 	addi	r11,r11,16
1000ba98:	52800404 	addi	r10,r10,16
1000ba9c:	413ff71e 	bne	r8,r4,1000ba7c <__alt_data_end+0xf800ba7c>
1000baa0:	63000044 	addi	r12,r12,1
1000baa4:	6018913a 	slli	r12,r12,4
1000baa8:	39c003cc 	andi	r7,r7,15
1000baac:	010000c4 	movi	r4,3
1000bab0:	1b07883a 	add	r3,r3,r12
1000bab4:	21c00e2e 	bgeu	r4,r7,1000baf0 <memset+0x100>
1000bab8:	1813883a 	mov	r9,r3
1000babc:	3811883a 	mov	r8,r7
1000bac0:	010000c4 	movi	r4,3
1000bac4:	49800015 	stw	r6,0(r9)
1000bac8:	423fff04 	addi	r8,r8,-4
1000bacc:	4a400104 	addi	r9,r9,4
1000bad0:	223ffc36 	bltu	r4,r8,1000bac4 <__alt_data_end+0xf800bac4>
1000bad4:	393fff04 	addi	r4,r7,-4
1000bad8:	2008d0ba 	srli	r4,r4,2
1000badc:	39c000cc 	andi	r7,r7,3
1000bae0:	21000044 	addi	r4,r4,1
1000bae4:	2109883a 	add	r4,r4,r4
1000bae8:	2109883a 	add	r4,r4,r4
1000baec:	1907883a 	add	r3,r3,r4
1000baf0:	38000426 	beq	r7,zero,1000bb04 <memset+0x114>
1000baf4:	19cf883a 	add	r7,r3,r7
1000baf8:	19400005 	stb	r5,0(r3)
1000bafc:	18c00044 	addi	r3,r3,1
1000bb00:	19fffd1e 	bne	r3,r7,1000baf8 <__alt_data_end+0xf800baf8>
1000bb04:	f800283a 	ret
1000bb08:	2007883a 	mov	r3,r4
1000bb0c:	300f883a 	mov	r7,r6
1000bb10:	003fc806 	br	1000ba34 <__alt_data_end+0xf800ba34>

1000bb14 <_Balloc>:
1000bb14:	20801317 	ldw	r2,76(r4)
1000bb18:	defffc04 	addi	sp,sp,-16
1000bb1c:	dc400115 	stw	r17,4(sp)
1000bb20:	dc000015 	stw	r16,0(sp)
1000bb24:	dfc00315 	stw	ra,12(sp)
1000bb28:	dc800215 	stw	r18,8(sp)
1000bb2c:	2023883a 	mov	r17,r4
1000bb30:	2821883a 	mov	r16,r5
1000bb34:	10000f26 	beq	r2,zero,1000bb74 <_Balloc+0x60>
1000bb38:	8407883a 	add	r3,r16,r16
1000bb3c:	18c7883a 	add	r3,r3,r3
1000bb40:	10c7883a 	add	r3,r2,r3
1000bb44:	18800017 	ldw	r2,0(r3)
1000bb48:	10001126 	beq	r2,zero,1000bb90 <_Balloc+0x7c>
1000bb4c:	11000017 	ldw	r4,0(r2)
1000bb50:	19000015 	stw	r4,0(r3)
1000bb54:	10000415 	stw	zero,16(r2)
1000bb58:	10000315 	stw	zero,12(r2)
1000bb5c:	dfc00317 	ldw	ra,12(sp)
1000bb60:	dc800217 	ldw	r18,8(sp)
1000bb64:	dc400117 	ldw	r17,4(sp)
1000bb68:	dc000017 	ldw	r16,0(sp)
1000bb6c:	dec00404 	addi	sp,sp,16
1000bb70:	f800283a 	ret
1000bb74:	01400104 	movi	r5,4
1000bb78:	01800844 	movi	r6,33
1000bb7c:	000e93c0 	call	1000e93c <_calloc_r>
1000bb80:	88801315 	stw	r2,76(r17)
1000bb84:	103fec1e 	bne	r2,zero,1000bb38 <__alt_data_end+0xf800bb38>
1000bb88:	0005883a 	mov	r2,zero
1000bb8c:	003ff306 	br	1000bb5c <__alt_data_end+0xf800bb5c>
1000bb90:	01400044 	movi	r5,1
1000bb94:	2c24983a 	sll	r18,r5,r16
1000bb98:	8809883a 	mov	r4,r17
1000bb9c:	91800144 	addi	r6,r18,5
1000bba0:	318d883a 	add	r6,r6,r6
1000bba4:	318d883a 	add	r6,r6,r6
1000bba8:	000e93c0 	call	1000e93c <_calloc_r>
1000bbac:	103ff626 	beq	r2,zero,1000bb88 <__alt_data_end+0xf800bb88>
1000bbb0:	14000115 	stw	r16,4(r2)
1000bbb4:	14800215 	stw	r18,8(r2)
1000bbb8:	003fe606 	br	1000bb54 <__alt_data_end+0xf800bb54>

1000bbbc <_Bfree>:
1000bbbc:	28000826 	beq	r5,zero,1000bbe0 <_Bfree+0x24>
1000bbc0:	28c00117 	ldw	r3,4(r5)
1000bbc4:	20801317 	ldw	r2,76(r4)
1000bbc8:	18c7883a 	add	r3,r3,r3
1000bbcc:	18c7883a 	add	r3,r3,r3
1000bbd0:	10c5883a 	add	r2,r2,r3
1000bbd4:	10c00017 	ldw	r3,0(r2)
1000bbd8:	28c00015 	stw	r3,0(r5)
1000bbdc:	11400015 	stw	r5,0(r2)
1000bbe0:	f800283a 	ret

1000bbe4 <__multadd>:
1000bbe4:	defff704 	addi	sp,sp,-36
1000bbe8:	dc800215 	stw	r18,8(sp)
1000bbec:	2c800417 	ldw	r18,16(r5)
1000bbf0:	ddc00715 	stw	r23,28(sp)
1000bbf4:	dd800615 	stw	r22,24(sp)
1000bbf8:	dd000415 	stw	r20,16(sp)
1000bbfc:	dcc00315 	stw	r19,12(sp)
1000bc00:	dc400115 	stw	r17,4(sp)
1000bc04:	dc000015 	stw	r16,0(sp)
1000bc08:	dfc00815 	stw	ra,32(sp)
1000bc0c:	dd400515 	stw	r21,20(sp)
1000bc10:	2827883a 	mov	r19,r5
1000bc14:	2029883a 	mov	r20,r4
1000bc18:	3023883a 	mov	r17,r6
1000bc1c:	3821883a 	mov	r16,r7
1000bc20:	2d800504 	addi	r22,r5,20
1000bc24:	002f883a 	mov	r23,zero
1000bc28:	b5400017 	ldw	r21,0(r22)
1000bc2c:	880b883a 	mov	r5,r17
1000bc30:	bdc00044 	addi	r23,r23,1
1000bc34:	a93fffcc 	andi	r4,r21,65535
1000bc38:	00037040 	call	10003704 <__mulsi3>
1000bc3c:	1421883a 	add	r16,r2,r16
1000bc40:	a808d43a 	srli	r4,r21,16
1000bc44:	802ad43a 	srli	r21,r16,16
1000bc48:	880b883a 	mov	r5,r17
1000bc4c:	00037040 	call	10003704 <__mulsi3>
1000bc50:	a88f883a 	add	r7,r21,r2
1000bc54:	3804943a 	slli	r2,r7,16
1000bc58:	80ffffcc 	andi	r3,r16,65535
1000bc5c:	b5800104 	addi	r22,r22,4
1000bc60:	10c7883a 	add	r3,r2,r3
1000bc64:	b0ffff15 	stw	r3,-4(r22)
1000bc68:	3820d43a 	srli	r16,r7,16
1000bc6c:	bcbfee16 	blt	r23,r18,1000bc28 <__alt_data_end+0xf800bc28>
1000bc70:	80000926 	beq	r16,zero,1000bc98 <__multadd+0xb4>
1000bc74:	98800217 	ldw	r2,8(r19)
1000bc78:	9080130e 	bge	r18,r2,1000bcc8 <__multadd+0xe4>
1000bc7c:	90800144 	addi	r2,r18,5
1000bc80:	1085883a 	add	r2,r2,r2
1000bc84:	1085883a 	add	r2,r2,r2
1000bc88:	9885883a 	add	r2,r19,r2
1000bc8c:	14000015 	stw	r16,0(r2)
1000bc90:	94800044 	addi	r18,r18,1
1000bc94:	9c800415 	stw	r18,16(r19)
1000bc98:	9805883a 	mov	r2,r19
1000bc9c:	dfc00817 	ldw	ra,32(sp)
1000bca0:	ddc00717 	ldw	r23,28(sp)
1000bca4:	dd800617 	ldw	r22,24(sp)
1000bca8:	dd400517 	ldw	r21,20(sp)
1000bcac:	dd000417 	ldw	r20,16(sp)
1000bcb0:	dcc00317 	ldw	r19,12(sp)
1000bcb4:	dc800217 	ldw	r18,8(sp)
1000bcb8:	dc400117 	ldw	r17,4(sp)
1000bcbc:	dc000017 	ldw	r16,0(sp)
1000bcc0:	dec00904 	addi	sp,sp,36
1000bcc4:	f800283a 	ret
1000bcc8:	99400117 	ldw	r5,4(r19)
1000bccc:	a009883a 	mov	r4,r20
1000bcd0:	29400044 	addi	r5,r5,1
1000bcd4:	000bb140 	call	1000bb14 <_Balloc>
1000bcd8:	99800417 	ldw	r6,16(r19)
1000bcdc:	99400304 	addi	r5,r19,12
1000bce0:	11000304 	addi	r4,r2,12
1000bce4:	31800084 	addi	r6,r6,2
1000bce8:	318d883a 	add	r6,r6,r6
1000bcec:	318d883a 	add	r6,r6,r6
1000bcf0:	1023883a 	mov	r17,r2
1000bcf4:	000b75c0 	call	1000b75c <memcpy>
1000bcf8:	99000117 	ldw	r4,4(r19)
1000bcfc:	a0c01317 	ldw	r3,76(r20)
1000bd00:	2109883a 	add	r4,r4,r4
1000bd04:	2109883a 	add	r4,r4,r4
1000bd08:	1907883a 	add	r3,r3,r4
1000bd0c:	18800017 	ldw	r2,0(r3)
1000bd10:	98800015 	stw	r2,0(r19)
1000bd14:	1cc00015 	stw	r19,0(r3)
1000bd18:	8827883a 	mov	r19,r17
1000bd1c:	003fd706 	br	1000bc7c <__alt_data_end+0xf800bc7c>

1000bd20 <__s2b>:
1000bd20:	defff904 	addi	sp,sp,-28
1000bd24:	dc400115 	stw	r17,4(sp)
1000bd28:	dc000015 	stw	r16,0(sp)
1000bd2c:	2023883a 	mov	r17,r4
1000bd30:	2821883a 	mov	r16,r5
1000bd34:	39000204 	addi	r4,r7,8
1000bd38:	01400244 	movi	r5,9
1000bd3c:	dcc00315 	stw	r19,12(sp)
1000bd40:	dc800215 	stw	r18,8(sp)
1000bd44:	dfc00615 	stw	ra,24(sp)
1000bd48:	dd400515 	stw	r21,20(sp)
1000bd4c:	dd000415 	stw	r20,16(sp)
1000bd50:	3825883a 	mov	r18,r7
1000bd54:	3027883a 	mov	r19,r6
1000bd58:	00036440 	call	10003644 <__divsi3>
1000bd5c:	00c00044 	movi	r3,1
1000bd60:	000b883a 	mov	r5,zero
1000bd64:	1880030e 	bge	r3,r2,1000bd74 <__s2b+0x54>
1000bd68:	18c7883a 	add	r3,r3,r3
1000bd6c:	29400044 	addi	r5,r5,1
1000bd70:	18bffd16 	blt	r3,r2,1000bd68 <__alt_data_end+0xf800bd68>
1000bd74:	8809883a 	mov	r4,r17
1000bd78:	000bb140 	call	1000bb14 <_Balloc>
1000bd7c:	d8c00717 	ldw	r3,28(sp)
1000bd80:	10c00515 	stw	r3,20(r2)
1000bd84:	00c00044 	movi	r3,1
1000bd88:	10c00415 	stw	r3,16(r2)
1000bd8c:	00c00244 	movi	r3,9
1000bd90:	1cc0210e 	bge	r3,r19,1000be18 <__s2b+0xf8>
1000bd94:	80eb883a 	add	r21,r16,r3
1000bd98:	a829883a 	mov	r20,r21
1000bd9c:	84e1883a 	add	r16,r16,r19
1000bda0:	a1c00007 	ldb	r7,0(r20)
1000bda4:	8809883a 	mov	r4,r17
1000bda8:	a5000044 	addi	r20,r20,1
1000bdac:	100b883a 	mov	r5,r2
1000bdb0:	01800284 	movi	r6,10
1000bdb4:	39fff404 	addi	r7,r7,-48
1000bdb8:	000bbe40 	call	1000bbe4 <__multadd>
1000bdbc:	a43ff81e 	bne	r20,r16,1000bda0 <__alt_data_end+0xf800bda0>
1000bdc0:	ace1883a 	add	r16,r21,r19
1000bdc4:	843ffe04 	addi	r16,r16,-8
1000bdc8:	9c800a0e 	bge	r19,r18,1000bdf4 <__s2b+0xd4>
1000bdcc:	94e5c83a 	sub	r18,r18,r19
1000bdd0:	84a5883a 	add	r18,r16,r18
1000bdd4:	81c00007 	ldb	r7,0(r16)
1000bdd8:	8809883a 	mov	r4,r17
1000bddc:	84000044 	addi	r16,r16,1
1000bde0:	100b883a 	mov	r5,r2
1000bde4:	01800284 	movi	r6,10
1000bde8:	39fff404 	addi	r7,r7,-48
1000bdec:	000bbe40 	call	1000bbe4 <__multadd>
1000bdf0:	84bff81e 	bne	r16,r18,1000bdd4 <__alt_data_end+0xf800bdd4>
1000bdf4:	dfc00617 	ldw	ra,24(sp)
1000bdf8:	dd400517 	ldw	r21,20(sp)
1000bdfc:	dd000417 	ldw	r20,16(sp)
1000be00:	dcc00317 	ldw	r19,12(sp)
1000be04:	dc800217 	ldw	r18,8(sp)
1000be08:	dc400117 	ldw	r17,4(sp)
1000be0c:	dc000017 	ldw	r16,0(sp)
1000be10:	dec00704 	addi	sp,sp,28
1000be14:	f800283a 	ret
1000be18:	84000284 	addi	r16,r16,10
1000be1c:	1827883a 	mov	r19,r3
1000be20:	003fe906 	br	1000bdc8 <__alt_data_end+0xf800bdc8>

1000be24 <__hi0bits>:
1000be24:	20bfffec 	andhi	r2,r4,65535
1000be28:	1000141e 	bne	r2,zero,1000be7c <__hi0bits+0x58>
1000be2c:	2008943a 	slli	r4,r4,16
1000be30:	00800404 	movi	r2,16
1000be34:	20ffc02c 	andhi	r3,r4,65280
1000be38:	1800021e 	bne	r3,zero,1000be44 <__hi0bits+0x20>
1000be3c:	2008923a 	slli	r4,r4,8
1000be40:	10800204 	addi	r2,r2,8
1000be44:	20fc002c 	andhi	r3,r4,61440
1000be48:	1800021e 	bne	r3,zero,1000be54 <__hi0bits+0x30>
1000be4c:	2008913a 	slli	r4,r4,4
1000be50:	10800104 	addi	r2,r2,4
1000be54:	20f0002c 	andhi	r3,r4,49152
1000be58:	1800031e 	bne	r3,zero,1000be68 <__hi0bits+0x44>
1000be5c:	2109883a 	add	r4,r4,r4
1000be60:	10800084 	addi	r2,r2,2
1000be64:	2109883a 	add	r4,r4,r4
1000be68:	20000316 	blt	r4,zero,1000be78 <__hi0bits+0x54>
1000be6c:	2110002c 	andhi	r4,r4,16384
1000be70:	2000041e 	bne	r4,zero,1000be84 <__hi0bits+0x60>
1000be74:	00800804 	movi	r2,32
1000be78:	f800283a 	ret
1000be7c:	0005883a 	mov	r2,zero
1000be80:	003fec06 	br	1000be34 <__alt_data_end+0xf800be34>
1000be84:	10800044 	addi	r2,r2,1
1000be88:	f800283a 	ret

1000be8c <__lo0bits>:
1000be8c:	20c00017 	ldw	r3,0(r4)
1000be90:	188001cc 	andi	r2,r3,7
1000be94:	10000826 	beq	r2,zero,1000beb8 <__lo0bits+0x2c>
1000be98:	1880004c 	andi	r2,r3,1
1000be9c:	1000211e 	bne	r2,zero,1000bf24 <__lo0bits+0x98>
1000bea0:	1880008c 	andi	r2,r3,2
1000bea4:	1000211e 	bne	r2,zero,1000bf2c <__lo0bits+0xa0>
1000bea8:	1806d0ba 	srli	r3,r3,2
1000beac:	00800084 	movi	r2,2
1000beb0:	20c00015 	stw	r3,0(r4)
1000beb4:	f800283a 	ret
1000beb8:	18bfffcc 	andi	r2,r3,65535
1000bebc:	10001326 	beq	r2,zero,1000bf0c <__lo0bits+0x80>
1000bec0:	0005883a 	mov	r2,zero
1000bec4:	19403fcc 	andi	r5,r3,255
1000bec8:	2800021e 	bne	r5,zero,1000bed4 <__lo0bits+0x48>
1000becc:	1806d23a 	srli	r3,r3,8
1000bed0:	10800204 	addi	r2,r2,8
1000bed4:	194003cc 	andi	r5,r3,15
1000bed8:	2800021e 	bne	r5,zero,1000bee4 <__lo0bits+0x58>
1000bedc:	1806d13a 	srli	r3,r3,4
1000bee0:	10800104 	addi	r2,r2,4
1000bee4:	194000cc 	andi	r5,r3,3
1000bee8:	2800021e 	bne	r5,zero,1000bef4 <__lo0bits+0x68>
1000beec:	1806d0ba 	srli	r3,r3,2
1000bef0:	10800084 	addi	r2,r2,2
1000bef4:	1940004c 	andi	r5,r3,1
1000bef8:	2800081e 	bne	r5,zero,1000bf1c <__lo0bits+0x90>
1000befc:	1806d07a 	srli	r3,r3,1
1000bf00:	1800051e 	bne	r3,zero,1000bf18 <__lo0bits+0x8c>
1000bf04:	00800804 	movi	r2,32
1000bf08:	f800283a 	ret
1000bf0c:	1806d43a 	srli	r3,r3,16
1000bf10:	00800404 	movi	r2,16
1000bf14:	003feb06 	br	1000bec4 <__alt_data_end+0xf800bec4>
1000bf18:	10800044 	addi	r2,r2,1
1000bf1c:	20c00015 	stw	r3,0(r4)
1000bf20:	f800283a 	ret
1000bf24:	0005883a 	mov	r2,zero
1000bf28:	f800283a 	ret
1000bf2c:	1806d07a 	srli	r3,r3,1
1000bf30:	00800044 	movi	r2,1
1000bf34:	20c00015 	stw	r3,0(r4)
1000bf38:	f800283a 	ret

1000bf3c <__i2b>:
1000bf3c:	defffd04 	addi	sp,sp,-12
1000bf40:	dc000015 	stw	r16,0(sp)
1000bf44:	04000044 	movi	r16,1
1000bf48:	dc400115 	stw	r17,4(sp)
1000bf4c:	2823883a 	mov	r17,r5
1000bf50:	800b883a 	mov	r5,r16
1000bf54:	dfc00215 	stw	ra,8(sp)
1000bf58:	000bb140 	call	1000bb14 <_Balloc>
1000bf5c:	14400515 	stw	r17,20(r2)
1000bf60:	14000415 	stw	r16,16(r2)
1000bf64:	dfc00217 	ldw	ra,8(sp)
1000bf68:	dc400117 	ldw	r17,4(sp)
1000bf6c:	dc000017 	ldw	r16,0(sp)
1000bf70:	dec00304 	addi	sp,sp,12
1000bf74:	f800283a 	ret

1000bf78 <__multiply>:
1000bf78:	deffef04 	addi	sp,sp,-68
1000bf7c:	dc400815 	stw	r17,32(sp)
1000bf80:	dc000715 	stw	r16,28(sp)
1000bf84:	2c400417 	ldw	r17,16(r5)
1000bf88:	34000417 	ldw	r16,16(r6)
1000bf8c:	dd800d15 	stw	r22,52(sp)
1000bf90:	dc800915 	stw	r18,36(sp)
1000bf94:	dfc01015 	stw	ra,64(sp)
1000bf98:	df000f15 	stw	fp,60(sp)
1000bf9c:	ddc00e15 	stw	r23,56(sp)
1000bfa0:	dd400c15 	stw	r21,48(sp)
1000bfa4:	dd000b15 	stw	r20,44(sp)
1000bfa8:	dcc00a15 	stw	r19,40(sp)
1000bfac:	2825883a 	mov	r18,r5
1000bfb0:	302d883a 	mov	r22,r6
1000bfb4:	8c009116 	blt	r17,r16,1000c1fc <__multiply+0x284>
1000bfb8:	8005883a 	mov	r2,r16
1000bfbc:	8821883a 	mov	r16,r17
1000bfc0:	1023883a 	mov	r17,r2
1000bfc4:	90800217 	ldw	r2,8(r18)
1000bfc8:	8447883a 	add	r3,r16,r17
1000bfcc:	d8c00215 	stw	r3,8(sp)
1000bfd0:	91400117 	ldw	r5,4(r18)
1000bfd4:	10c0010e 	bge	r2,r3,1000bfdc <__multiply+0x64>
1000bfd8:	29400044 	addi	r5,r5,1
1000bfdc:	000bb140 	call	1000bb14 <_Balloc>
1000bfe0:	d8c00217 	ldw	r3,8(sp)
1000bfe4:	d8800615 	stw	r2,24(sp)
1000bfe8:	18eb883a 	add	r21,r3,r3
1000bfec:	ad6b883a 	add	r21,r21,r21
1000bff0:	10c00504 	addi	r3,r2,20
1000bff4:	1d6b883a 	add	r21,r3,r21
1000bff8:	d8c00115 	stw	r3,4(sp)
1000bffc:	dd400315 	stw	r21,12(sp)
1000c000:	1805883a 	mov	r2,r3
1000c004:	1d40042e 	bgeu	r3,r21,1000c018 <__multiply+0xa0>
1000c008:	d8c00317 	ldw	r3,12(sp)
1000c00c:	10000015 	stw	zero,0(r2)
1000c010:	10800104 	addi	r2,r2,4
1000c014:	10fffc36 	bltu	r2,r3,1000c008 <__alt_data_end+0xf800c008>
1000c018:	8c63883a 	add	r17,r17,r17
1000c01c:	b5800504 	addi	r22,r22,20
1000c020:	8c63883a 	add	r17,r17,r17
1000c024:	94800504 	addi	r18,r18,20
1000c028:	8421883a 	add	r16,r16,r16
1000c02c:	b463883a 	add	r17,r22,r17
1000c030:	8421883a 	add	r16,r16,r16
1000c034:	dd800015 	stw	r22,0(sp)
1000c038:	dc800415 	stw	r18,16(sp)
1000c03c:	dc400515 	stw	r17,20(sp)
1000c040:	9429883a 	add	r20,r18,r16
1000c044:	b4404f2e 	bgeu	r22,r17,1000c184 <__multiply+0x20c>
1000c048:	d8c00017 	ldw	r3,0(sp)
1000c04c:	1c800017 	ldw	r18,0(r3)
1000c050:	943fffcc 	andi	r16,r18,65535
1000c054:	80001e26 	beq	r16,zero,1000c0d0 <__multiply+0x158>
1000c058:	dd800117 	ldw	r22,4(sp)
1000c05c:	dd400417 	ldw	r21,16(sp)
1000c060:	0025883a 	mov	r18,zero
1000c064:	adc00017 	ldw	r23,0(r21)
1000c068:	b4c00017 	ldw	r19,0(r22)
1000c06c:	800b883a 	mov	r5,r16
1000c070:	b93fffcc 	andi	r4,r23,65535
1000c074:	00037040 	call	10003704 <__mulsi3>
1000c078:	9c7fffcc 	andi	r17,r19,65535
1000c07c:	8885883a 	add	r2,r17,r2
1000c080:	b808d43a 	srli	r4,r23,16
1000c084:	14a3883a 	add	r17,r2,r18
1000c088:	9826d43a 	srli	r19,r19,16
1000c08c:	8824d43a 	srli	r18,r17,16
1000c090:	800b883a 	mov	r5,r16
1000c094:	00037040 	call	10003704 <__mulsi3>
1000c098:	9885883a 	add	r2,r19,r2
1000c09c:	14a7883a 	add	r19,r2,r18
1000c0a0:	88ffffcc 	andi	r3,r17,65535
1000c0a4:	9822943a 	slli	r17,r19,16
1000c0a8:	ad400104 	addi	r21,r21,4
1000c0ac:	b005883a 	mov	r2,r22
1000c0b0:	88c6b03a 	or	r3,r17,r3
1000c0b4:	b0c00015 	stw	r3,0(r22)
1000c0b8:	9824d43a 	srli	r18,r19,16
1000c0bc:	b5800104 	addi	r22,r22,4
1000c0c0:	ad3fe836 	bltu	r21,r20,1000c064 <__alt_data_end+0xf800c064>
1000c0c4:	d8c00017 	ldw	r3,0(sp)
1000c0c8:	14800115 	stw	r18,4(r2)
1000c0cc:	1c800017 	ldw	r18,0(r3)
1000c0d0:	9024d43a 	srli	r18,r18,16
1000c0d4:	90002226 	beq	r18,zero,1000c160 <__multiply+0x1e8>
1000c0d8:	d8c00117 	ldw	r3,4(sp)
1000c0dc:	dd800417 	ldw	r22,16(sp)
1000c0e0:	002f883a 	mov	r23,zero
1000c0e4:	1f000017 	ldw	fp,0(r3)
1000c0e8:	1823883a 	mov	r17,r3
1000c0ec:	182b883a 	mov	r21,r3
1000c0f0:	e021883a 	mov	r16,fp
1000c0f4:	00000106 	br	1000c0fc <__multiply+0x184>
1000c0f8:	982b883a 	mov	r21,r19
1000c0fc:	b100000b 	ldhu	r4,0(r22)
1000c100:	8020d43a 	srli	r16,r16,16
1000c104:	900b883a 	mov	r5,r18
1000c108:	00037040 	call	10003704 <__mulsi3>
1000c10c:	1405883a 	add	r2,r2,r16
1000c110:	15ef883a 	add	r23,r2,r23
1000c114:	b804943a 	slli	r2,r23,16
1000c118:	e0ffffcc 	andi	r3,fp,65535
1000c11c:	8c400104 	addi	r17,r17,4
1000c120:	10c6b03a 	or	r3,r2,r3
1000c124:	88ffff15 	stw	r3,-4(r17)
1000c128:	b5800104 	addi	r22,r22,4
1000c12c:	b13fff17 	ldw	r4,-4(r22)
1000c130:	acc00104 	addi	r19,r21,4
1000c134:	900b883a 	mov	r5,r18
1000c138:	2008d43a 	srli	r4,r4,16
1000c13c:	9c000017 	ldw	r16,0(r19)
1000c140:	00037040 	call	10003704 <__mulsi3>
1000c144:	b806d43a 	srli	r3,r23,16
1000c148:	813fffcc 	andi	r4,r16,65535
1000c14c:	1105883a 	add	r2,r2,r4
1000c150:	10f9883a 	add	fp,r2,r3
1000c154:	e02ed43a 	srli	r23,fp,16
1000c158:	b53fe736 	bltu	r22,r20,1000c0f8 <__alt_data_end+0xf800c0f8>
1000c15c:	af000115 	stw	fp,4(r21)
1000c160:	d8c00017 	ldw	r3,0(sp)
1000c164:	d9000517 	ldw	r4,20(sp)
1000c168:	18c00104 	addi	r3,r3,4
1000c16c:	d8c00015 	stw	r3,0(sp)
1000c170:	d8c00117 	ldw	r3,4(sp)
1000c174:	18c00104 	addi	r3,r3,4
1000c178:	d8c00115 	stw	r3,4(sp)
1000c17c:	d8c00017 	ldw	r3,0(sp)
1000c180:	193fb136 	bltu	r3,r4,1000c048 <__alt_data_end+0xf800c048>
1000c184:	d8c00217 	ldw	r3,8(sp)
1000c188:	00c00c0e 	bge	zero,r3,1000c1bc <__multiply+0x244>
1000c18c:	d8c00317 	ldw	r3,12(sp)
1000c190:	18bfff17 	ldw	r2,-4(r3)
1000c194:	1d7fff04 	addi	r21,r3,-4
1000c198:	10000326 	beq	r2,zero,1000c1a8 <__multiply+0x230>
1000c19c:	00000706 	br	1000c1bc <__multiply+0x244>
1000c1a0:	a8800017 	ldw	r2,0(r21)
1000c1a4:	1000051e 	bne	r2,zero,1000c1bc <__multiply+0x244>
1000c1a8:	d8c00217 	ldw	r3,8(sp)
1000c1ac:	ad7fff04 	addi	r21,r21,-4
1000c1b0:	18ffffc4 	addi	r3,r3,-1
1000c1b4:	d8c00215 	stw	r3,8(sp)
1000c1b8:	183ff91e 	bne	r3,zero,1000c1a0 <__alt_data_end+0xf800c1a0>
1000c1bc:	d8c00617 	ldw	r3,24(sp)
1000c1c0:	d9000217 	ldw	r4,8(sp)
1000c1c4:	1805883a 	mov	r2,r3
1000c1c8:	19000415 	stw	r4,16(r3)
1000c1cc:	dfc01017 	ldw	ra,64(sp)
1000c1d0:	df000f17 	ldw	fp,60(sp)
1000c1d4:	ddc00e17 	ldw	r23,56(sp)
1000c1d8:	dd800d17 	ldw	r22,52(sp)
1000c1dc:	dd400c17 	ldw	r21,48(sp)
1000c1e0:	dd000b17 	ldw	r20,44(sp)
1000c1e4:	dcc00a17 	ldw	r19,40(sp)
1000c1e8:	dc800917 	ldw	r18,36(sp)
1000c1ec:	dc400817 	ldw	r17,32(sp)
1000c1f0:	dc000717 	ldw	r16,28(sp)
1000c1f4:	dec01104 	addi	sp,sp,68
1000c1f8:	f800283a 	ret
1000c1fc:	3025883a 	mov	r18,r6
1000c200:	282d883a 	mov	r22,r5
1000c204:	003f6f06 	br	1000bfc4 <__alt_data_end+0xf800bfc4>

1000c208 <__pow5mult>:
1000c208:	defffa04 	addi	sp,sp,-24
1000c20c:	dcc00315 	stw	r19,12(sp)
1000c210:	dc800215 	stw	r18,8(sp)
1000c214:	dc000015 	stw	r16,0(sp)
1000c218:	dfc00515 	stw	ra,20(sp)
1000c21c:	dd000415 	stw	r20,16(sp)
1000c220:	dc400115 	stw	r17,4(sp)
1000c224:	308000cc 	andi	r2,r6,3
1000c228:	3021883a 	mov	r16,r6
1000c22c:	2027883a 	mov	r19,r4
1000c230:	2825883a 	mov	r18,r5
1000c234:	10002e1e 	bne	r2,zero,1000c2f0 <__pow5mult+0xe8>
1000c238:	8021d0ba 	srai	r16,r16,2
1000c23c:	80001a26 	beq	r16,zero,1000c2a8 <__pow5mult+0xa0>
1000c240:	9c401217 	ldw	r17,72(r19)
1000c244:	8800061e 	bne	r17,zero,1000c260 <__pow5mult+0x58>
1000c248:	00003406 	br	1000c31c <__pow5mult+0x114>
1000c24c:	8021d07a 	srai	r16,r16,1
1000c250:	80001526 	beq	r16,zero,1000c2a8 <__pow5mult+0xa0>
1000c254:	88800017 	ldw	r2,0(r17)
1000c258:	10001c26 	beq	r2,zero,1000c2cc <__pow5mult+0xc4>
1000c25c:	1023883a 	mov	r17,r2
1000c260:	80c0004c 	andi	r3,r16,1
1000c264:	183ff926 	beq	r3,zero,1000c24c <__alt_data_end+0xf800c24c>
1000c268:	900b883a 	mov	r5,r18
1000c26c:	880d883a 	mov	r6,r17
1000c270:	9809883a 	mov	r4,r19
1000c274:	000bf780 	call	1000bf78 <__multiply>
1000c278:	90001b26 	beq	r18,zero,1000c2e8 <__pow5mult+0xe0>
1000c27c:	91c00117 	ldw	r7,4(r18)
1000c280:	98c01317 	ldw	r3,76(r19)
1000c284:	8021d07a 	srai	r16,r16,1
1000c288:	39cf883a 	add	r7,r7,r7
1000c28c:	39cf883a 	add	r7,r7,r7
1000c290:	19c7883a 	add	r3,r3,r7
1000c294:	19000017 	ldw	r4,0(r3)
1000c298:	91000015 	stw	r4,0(r18)
1000c29c:	1c800015 	stw	r18,0(r3)
1000c2a0:	1025883a 	mov	r18,r2
1000c2a4:	803feb1e 	bne	r16,zero,1000c254 <__alt_data_end+0xf800c254>
1000c2a8:	9005883a 	mov	r2,r18
1000c2ac:	dfc00517 	ldw	ra,20(sp)
1000c2b0:	dd000417 	ldw	r20,16(sp)
1000c2b4:	dcc00317 	ldw	r19,12(sp)
1000c2b8:	dc800217 	ldw	r18,8(sp)
1000c2bc:	dc400117 	ldw	r17,4(sp)
1000c2c0:	dc000017 	ldw	r16,0(sp)
1000c2c4:	dec00604 	addi	sp,sp,24
1000c2c8:	f800283a 	ret
1000c2cc:	9809883a 	mov	r4,r19
1000c2d0:	880b883a 	mov	r5,r17
1000c2d4:	880d883a 	mov	r6,r17
1000c2d8:	000bf780 	call	1000bf78 <__multiply>
1000c2dc:	88800015 	stw	r2,0(r17)
1000c2e0:	10000015 	stw	zero,0(r2)
1000c2e4:	003fdd06 	br	1000c25c <__alt_data_end+0xf800c25c>
1000c2e8:	1025883a 	mov	r18,r2
1000c2ec:	003fd706 	br	1000c24c <__alt_data_end+0xf800c24c>
1000c2f0:	10bfffc4 	addi	r2,r2,-1
1000c2f4:	1085883a 	add	r2,r2,r2
1000c2f8:	00c40074 	movhi	r3,4097
1000c2fc:	18c73904 	addi	r3,r3,7396
1000c300:	1085883a 	add	r2,r2,r2
1000c304:	1885883a 	add	r2,r3,r2
1000c308:	11800017 	ldw	r6,0(r2)
1000c30c:	000f883a 	mov	r7,zero
1000c310:	000bbe40 	call	1000bbe4 <__multadd>
1000c314:	1025883a 	mov	r18,r2
1000c318:	003fc706 	br	1000c238 <__alt_data_end+0xf800c238>
1000c31c:	05000044 	movi	r20,1
1000c320:	9809883a 	mov	r4,r19
1000c324:	a00b883a 	mov	r5,r20
1000c328:	000bb140 	call	1000bb14 <_Balloc>
1000c32c:	1023883a 	mov	r17,r2
1000c330:	00809c44 	movi	r2,625
1000c334:	88800515 	stw	r2,20(r17)
1000c338:	8d000415 	stw	r20,16(r17)
1000c33c:	9c401215 	stw	r17,72(r19)
1000c340:	88000015 	stw	zero,0(r17)
1000c344:	003fc606 	br	1000c260 <__alt_data_end+0xf800c260>

1000c348 <__lshift>:
1000c348:	defff904 	addi	sp,sp,-28
1000c34c:	dd000415 	stw	r20,16(sp)
1000c350:	dcc00315 	stw	r19,12(sp)
1000c354:	3029d17a 	srai	r20,r6,5
1000c358:	2cc00417 	ldw	r19,16(r5)
1000c35c:	28800217 	ldw	r2,8(r5)
1000c360:	dd400515 	stw	r21,20(sp)
1000c364:	a4e7883a 	add	r19,r20,r19
1000c368:	dc800215 	stw	r18,8(sp)
1000c36c:	dc400115 	stw	r17,4(sp)
1000c370:	dc000015 	stw	r16,0(sp)
1000c374:	dfc00615 	stw	ra,24(sp)
1000c378:	9c000044 	addi	r16,r19,1
1000c37c:	2823883a 	mov	r17,r5
1000c380:	302b883a 	mov	r21,r6
1000c384:	2025883a 	mov	r18,r4
1000c388:	29400117 	ldw	r5,4(r5)
1000c38c:	1400030e 	bge	r2,r16,1000c39c <__lshift+0x54>
1000c390:	1085883a 	add	r2,r2,r2
1000c394:	29400044 	addi	r5,r5,1
1000c398:	143ffd16 	blt	r2,r16,1000c390 <__alt_data_end+0xf800c390>
1000c39c:	9009883a 	mov	r4,r18
1000c3a0:	000bb140 	call	1000bb14 <_Balloc>
1000c3a4:	11c00504 	addi	r7,r2,20
1000c3a8:	0500090e 	bge	zero,r20,1000c3d0 <__lshift+0x88>
1000c3ac:	3811883a 	mov	r8,r7
1000c3b0:	0007883a 	mov	r3,zero
1000c3b4:	40000015 	stw	zero,0(r8)
1000c3b8:	18c00044 	addi	r3,r3,1
1000c3bc:	42000104 	addi	r8,r8,4
1000c3c0:	1d3ffc1e 	bne	r3,r20,1000c3b4 <__alt_data_end+0xf800c3b4>
1000c3c4:	18c7883a 	add	r3,r3,r3
1000c3c8:	18c7883a 	add	r3,r3,r3
1000c3cc:	38cf883a 	add	r7,r7,r3
1000c3d0:	89000417 	ldw	r4,16(r17)
1000c3d4:	88c00504 	addi	r3,r17,20
1000c3d8:	a98007cc 	andi	r6,r21,31
1000c3dc:	2109883a 	add	r4,r4,r4
1000c3e0:	2109883a 	add	r4,r4,r4
1000c3e4:	1909883a 	add	r4,r3,r4
1000c3e8:	30002326 	beq	r6,zero,1000c478 <__lshift+0x130>
1000c3ec:	01400804 	movi	r5,32
1000c3f0:	298bc83a 	sub	r5,r5,r6
1000c3f4:	0013883a 	mov	r9,zero
1000c3f8:	1a000017 	ldw	r8,0(r3)
1000c3fc:	3815883a 	mov	r10,r7
1000c400:	39c00104 	addi	r7,r7,4
1000c404:	4190983a 	sll	r8,r8,r6
1000c408:	18c00104 	addi	r3,r3,4
1000c40c:	4a10b03a 	or	r8,r9,r8
1000c410:	3a3fff15 	stw	r8,-4(r7)
1000c414:	1a3fff17 	ldw	r8,-4(r3)
1000c418:	4152d83a 	srl	r9,r8,r5
1000c41c:	193ff636 	bltu	r3,r4,1000c3f8 <__alt_data_end+0xf800c3f8>
1000c420:	52400115 	stw	r9,4(r10)
1000c424:	48000126 	beq	r9,zero,1000c42c <__lshift+0xe4>
1000c428:	9c000084 	addi	r16,r19,2
1000c42c:	89000117 	ldw	r4,4(r17)
1000c430:	90c01317 	ldw	r3,76(r18)
1000c434:	843fffc4 	addi	r16,r16,-1
1000c438:	2109883a 	add	r4,r4,r4
1000c43c:	2109883a 	add	r4,r4,r4
1000c440:	1907883a 	add	r3,r3,r4
1000c444:	19000017 	ldw	r4,0(r3)
1000c448:	14000415 	stw	r16,16(r2)
1000c44c:	89000015 	stw	r4,0(r17)
1000c450:	1c400015 	stw	r17,0(r3)
1000c454:	dfc00617 	ldw	ra,24(sp)
1000c458:	dd400517 	ldw	r21,20(sp)
1000c45c:	dd000417 	ldw	r20,16(sp)
1000c460:	dcc00317 	ldw	r19,12(sp)
1000c464:	dc800217 	ldw	r18,8(sp)
1000c468:	dc400117 	ldw	r17,4(sp)
1000c46c:	dc000017 	ldw	r16,0(sp)
1000c470:	dec00704 	addi	sp,sp,28
1000c474:	f800283a 	ret
1000c478:	19400017 	ldw	r5,0(r3)
1000c47c:	39c00104 	addi	r7,r7,4
1000c480:	18c00104 	addi	r3,r3,4
1000c484:	397fff15 	stw	r5,-4(r7)
1000c488:	193ffb36 	bltu	r3,r4,1000c478 <__alt_data_end+0xf800c478>
1000c48c:	003fe706 	br	1000c42c <__alt_data_end+0xf800c42c>

1000c490 <__mcmp>:
1000c490:	20800417 	ldw	r2,16(r4)
1000c494:	28c00417 	ldw	r3,16(r5)
1000c498:	10c5c83a 	sub	r2,r2,r3
1000c49c:	1000111e 	bne	r2,zero,1000c4e4 <__mcmp+0x54>
1000c4a0:	18c7883a 	add	r3,r3,r3
1000c4a4:	18c7883a 	add	r3,r3,r3
1000c4a8:	21000504 	addi	r4,r4,20
1000c4ac:	29400504 	addi	r5,r5,20
1000c4b0:	20c5883a 	add	r2,r4,r3
1000c4b4:	28cb883a 	add	r5,r5,r3
1000c4b8:	00000106 	br	1000c4c0 <__mcmp+0x30>
1000c4bc:	20800a2e 	bgeu	r4,r2,1000c4e8 <__mcmp+0x58>
1000c4c0:	10bfff04 	addi	r2,r2,-4
1000c4c4:	297fff04 	addi	r5,r5,-4
1000c4c8:	11800017 	ldw	r6,0(r2)
1000c4cc:	28c00017 	ldw	r3,0(r5)
1000c4d0:	30fffa26 	beq	r6,r3,1000c4bc <__alt_data_end+0xf800c4bc>
1000c4d4:	30c00236 	bltu	r6,r3,1000c4e0 <__mcmp+0x50>
1000c4d8:	00800044 	movi	r2,1
1000c4dc:	f800283a 	ret
1000c4e0:	00bfffc4 	movi	r2,-1
1000c4e4:	f800283a 	ret
1000c4e8:	0005883a 	mov	r2,zero
1000c4ec:	f800283a 	ret

1000c4f0 <__mdiff>:
1000c4f0:	defffb04 	addi	sp,sp,-20
1000c4f4:	dc000015 	stw	r16,0(sp)
1000c4f8:	2821883a 	mov	r16,r5
1000c4fc:	dcc00315 	stw	r19,12(sp)
1000c500:	300b883a 	mov	r5,r6
1000c504:	2027883a 	mov	r19,r4
1000c508:	8009883a 	mov	r4,r16
1000c50c:	dc800215 	stw	r18,8(sp)
1000c510:	dfc00415 	stw	ra,16(sp)
1000c514:	dc400115 	stw	r17,4(sp)
1000c518:	3025883a 	mov	r18,r6
1000c51c:	000c4900 	call	1000c490 <__mcmp>
1000c520:	10005226 	beq	r2,zero,1000c66c <__mdiff+0x17c>
1000c524:	10004c16 	blt	r2,zero,1000c658 <__mdiff+0x168>
1000c528:	0023883a 	mov	r17,zero
1000c52c:	81400117 	ldw	r5,4(r16)
1000c530:	9809883a 	mov	r4,r19
1000c534:	000bb140 	call	1000bb14 <_Balloc>
1000c538:	83400417 	ldw	r13,16(r16)
1000c53c:	93800417 	ldw	r14,16(r18)
1000c540:	81000504 	addi	r4,r16,20
1000c544:	6b59883a 	add	r12,r13,r13
1000c548:	739d883a 	add	r14,r14,r14
1000c54c:	6319883a 	add	r12,r12,r12
1000c550:	91800504 	addi	r6,r18,20
1000c554:	739d883a 	add	r14,r14,r14
1000c558:	14400315 	stw	r17,12(r2)
1000c55c:	2319883a 	add	r12,r4,r12
1000c560:	339d883a 	add	r14,r6,r14
1000c564:	12400504 	addi	r9,r2,20
1000c568:	0007883a 	mov	r3,zero
1000c56c:	22000017 	ldw	r8,0(r4)
1000c570:	32800017 	ldw	r10,0(r6)
1000c574:	4ac00104 	addi	r11,r9,4
1000c578:	41ffffcc 	andi	r7,r8,65535
1000c57c:	38c7883a 	add	r3,r7,r3
1000c580:	51ffffcc 	andi	r7,r10,65535
1000c584:	19cfc83a 	sub	r7,r3,r7
1000c588:	4010d43a 	srli	r8,r8,16
1000c58c:	5014d43a 	srli	r10,r10,16
1000c590:	3807d43a 	srai	r3,r7,16
1000c594:	39ffffcc 	andi	r7,r7,65535
1000c598:	4291c83a 	sub	r8,r8,r10
1000c59c:	40c7883a 	add	r3,r8,r3
1000c5a0:	1810943a 	slli	r8,r3,16
1000c5a4:	31800104 	addi	r6,r6,4
1000c5a8:	21000104 	addi	r4,r4,4
1000c5ac:	41ceb03a 	or	r7,r8,r7
1000c5b0:	49c00015 	stw	r7,0(r9)
1000c5b4:	1807d43a 	srai	r3,r3,16
1000c5b8:	580b883a 	mov	r5,r11
1000c5bc:	5813883a 	mov	r9,r11
1000c5c0:	33bfea36 	bltu	r6,r14,1000c56c <__alt_data_end+0xf800c56c>
1000c5c4:	2011883a 	mov	r8,r4
1000c5c8:	2300152e 	bgeu	r4,r12,1000c620 <__mdiff+0x130>
1000c5cc:	21400017 	ldw	r5,0(r4)
1000c5d0:	4a400104 	addi	r9,r9,4
1000c5d4:	21000104 	addi	r4,r4,4
1000c5d8:	29ffffcc 	andi	r7,r5,65535
1000c5dc:	38c7883a 	add	r3,r7,r3
1000c5e0:	280ad43a 	srli	r5,r5,16
1000c5e4:	180dd43a 	srai	r6,r3,16
1000c5e8:	19ffffcc 	andi	r7,r3,65535
1000c5ec:	3147883a 	add	r3,r6,r5
1000c5f0:	180a943a 	slli	r5,r3,16
1000c5f4:	1807d43a 	srai	r3,r3,16
1000c5f8:	29ceb03a 	or	r7,r5,r7
1000c5fc:	49ffff15 	stw	r7,-4(r9)
1000c600:	233ff236 	bltu	r4,r12,1000c5cc <__alt_data_end+0xf800c5cc>
1000c604:	0206303a 	nor	r3,zero,r8
1000c608:	1b07883a 	add	r3,r3,r12
1000c60c:	1806d0ba 	srli	r3,r3,2
1000c610:	18c00044 	addi	r3,r3,1
1000c614:	18c7883a 	add	r3,r3,r3
1000c618:	18c7883a 	add	r3,r3,r3
1000c61c:	58cb883a 	add	r5,r11,r3
1000c620:	28ffff04 	addi	r3,r5,-4
1000c624:	3800041e 	bne	r7,zero,1000c638 <__mdiff+0x148>
1000c628:	18ffff04 	addi	r3,r3,-4
1000c62c:	19000017 	ldw	r4,0(r3)
1000c630:	6b7fffc4 	addi	r13,r13,-1
1000c634:	203ffc26 	beq	r4,zero,1000c628 <__alt_data_end+0xf800c628>
1000c638:	13400415 	stw	r13,16(r2)
1000c63c:	dfc00417 	ldw	ra,16(sp)
1000c640:	dcc00317 	ldw	r19,12(sp)
1000c644:	dc800217 	ldw	r18,8(sp)
1000c648:	dc400117 	ldw	r17,4(sp)
1000c64c:	dc000017 	ldw	r16,0(sp)
1000c650:	dec00504 	addi	sp,sp,20
1000c654:	f800283a 	ret
1000c658:	8005883a 	mov	r2,r16
1000c65c:	04400044 	movi	r17,1
1000c660:	9021883a 	mov	r16,r18
1000c664:	1025883a 	mov	r18,r2
1000c668:	003fb006 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c66c:	9809883a 	mov	r4,r19
1000c670:	000b883a 	mov	r5,zero
1000c674:	000bb140 	call	1000bb14 <_Balloc>
1000c678:	00c00044 	movi	r3,1
1000c67c:	10c00415 	stw	r3,16(r2)
1000c680:	10000515 	stw	zero,20(r2)
1000c684:	003fed06 	br	1000c63c <__alt_data_end+0xf800c63c>

1000c688 <__ulp>:
1000c688:	295ffc2c 	andhi	r5,r5,32752
1000c68c:	00bf3034 	movhi	r2,64704
1000c690:	2887883a 	add	r3,r5,r2
1000c694:	00c0020e 	bge	zero,r3,1000c6a0 <__ulp+0x18>
1000c698:	0005883a 	mov	r2,zero
1000c69c:	f800283a 	ret
1000c6a0:	00c7c83a 	sub	r3,zero,r3
1000c6a4:	180bd53a 	srai	r5,r3,20
1000c6a8:	008004c4 	movi	r2,19
1000c6ac:	11400a0e 	bge	r2,r5,1000c6d8 <__ulp+0x50>
1000c6b0:	00800c84 	movi	r2,50
1000c6b4:	0007883a 	mov	r3,zero
1000c6b8:	11400516 	blt	r2,r5,1000c6d0 <__ulp+0x48>
1000c6bc:	00800cc4 	movi	r2,51
1000c6c0:	114bc83a 	sub	r5,r2,r5
1000c6c4:	00800044 	movi	r2,1
1000c6c8:	1144983a 	sll	r2,r2,r5
1000c6cc:	f800283a 	ret
1000c6d0:	00800044 	movi	r2,1
1000c6d4:	f800283a 	ret
1000c6d8:	00800234 	movhi	r2,8
1000c6dc:	1147d83a 	sra	r3,r2,r5
1000c6e0:	0005883a 	mov	r2,zero
1000c6e4:	f800283a 	ret

1000c6e8 <__b2d>:
1000c6e8:	defffa04 	addi	sp,sp,-24
1000c6ec:	dc000015 	stw	r16,0(sp)
1000c6f0:	24000417 	ldw	r16,16(r4)
1000c6f4:	dc400115 	stw	r17,4(sp)
1000c6f8:	24400504 	addi	r17,r4,20
1000c6fc:	8421883a 	add	r16,r16,r16
1000c700:	8421883a 	add	r16,r16,r16
1000c704:	8c21883a 	add	r16,r17,r16
1000c708:	dc800215 	stw	r18,8(sp)
1000c70c:	84bfff17 	ldw	r18,-4(r16)
1000c710:	dd000415 	stw	r20,16(sp)
1000c714:	dcc00315 	stw	r19,12(sp)
1000c718:	9009883a 	mov	r4,r18
1000c71c:	2829883a 	mov	r20,r5
1000c720:	dfc00515 	stw	ra,20(sp)
1000c724:	000be240 	call	1000be24 <__hi0bits>
1000c728:	00c00804 	movi	r3,32
1000c72c:	1887c83a 	sub	r3,r3,r2
1000c730:	a0c00015 	stw	r3,0(r20)
1000c734:	00c00284 	movi	r3,10
1000c738:	84ffff04 	addi	r19,r16,-4
1000c73c:	18801216 	blt	r3,r2,1000c788 <__b2d+0xa0>
1000c740:	014002c4 	movi	r5,11
1000c744:	2889c83a 	sub	r4,r5,r2
1000c748:	9106d83a 	srl	r3,r18,r4
1000c74c:	18cffc34 	orhi	r3,r3,16368
1000c750:	8cc0282e 	bgeu	r17,r19,1000c7f4 <__b2d+0x10c>
1000c754:	817ffe17 	ldw	r5,-8(r16)
1000c758:	290ad83a 	srl	r5,r5,r4
1000c75c:	10800544 	addi	r2,r2,21
1000c760:	9084983a 	sll	r2,r18,r2
1000c764:	2884b03a 	or	r2,r5,r2
1000c768:	dfc00517 	ldw	ra,20(sp)
1000c76c:	dd000417 	ldw	r20,16(sp)
1000c770:	dcc00317 	ldw	r19,12(sp)
1000c774:	dc800217 	ldw	r18,8(sp)
1000c778:	dc400117 	ldw	r17,4(sp)
1000c77c:	dc000017 	ldw	r16,0(sp)
1000c780:	dec00604 	addi	sp,sp,24
1000c784:	f800283a 	ret
1000c788:	113ffd44 	addi	r4,r2,-11
1000c78c:	8cc00f2e 	bgeu	r17,r19,1000c7cc <__b2d+0xe4>
1000c790:	81bffe04 	addi	r6,r16,-8
1000c794:	817ffe17 	ldw	r5,-8(r16)
1000c798:	20001326 	beq	r4,zero,1000c7e8 <__b2d+0x100>
1000c79c:	00c00ac4 	movi	r3,43
1000c7a0:	1885c83a 	sub	r2,r3,r2
1000c7a4:	2886d83a 	srl	r3,r5,r2
1000c7a8:	9124983a 	sll	r18,r18,r4
1000c7ac:	90e4b03a 	or	r18,r18,r3
1000c7b0:	90cffc34 	orhi	r3,r18,16368
1000c7b4:	8980112e 	bgeu	r17,r6,1000c7fc <__b2d+0x114>
1000c7b8:	81bffd17 	ldw	r6,-12(r16)
1000c7bc:	308cd83a 	srl	r6,r6,r2
1000c7c0:	2904983a 	sll	r2,r5,r4
1000c7c4:	1184b03a 	or	r2,r2,r6
1000c7c8:	003fe706 	br	1000c768 <__alt_data_end+0xf800c768>
1000c7cc:	20000526 	beq	r4,zero,1000c7e4 <__b2d+0xfc>
1000c7d0:	9124983a 	sll	r18,r18,r4
1000c7d4:	000d883a 	mov	r6,zero
1000c7d8:	000b883a 	mov	r5,zero
1000c7dc:	90cffc34 	orhi	r3,r18,16368
1000c7e0:	003ff706 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000c7e4:	000b883a 	mov	r5,zero
1000c7e8:	90cffc34 	orhi	r3,r18,16368
1000c7ec:	2805883a 	mov	r2,r5
1000c7f0:	003fdd06 	br	1000c768 <__alt_data_end+0xf800c768>
1000c7f4:	000b883a 	mov	r5,zero
1000c7f8:	003fd806 	br	1000c75c <__alt_data_end+0xf800c75c>
1000c7fc:	000d883a 	mov	r6,zero
1000c800:	003fef06 	br	1000c7c0 <__alt_data_end+0xf800c7c0>

1000c804 <__d2b>:
1000c804:	defff704 	addi	sp,sp,-36
1000c808:	dc000215 	stw	r16,8(sp)
1000c80c:	3021883a 	mov	r16,r6
1000c810:	dc400315 	stw	r17,12(sp)
1000c814:	8022907a 	slli	r17,r16,1
1000c818:	dd400715 	stw	r21,28(sp)
1000c81c:	282b883a 	mov	r21,r5
1000c820:	01400044 	movi	r5,1
1000c824:	dd000615 	stw	r20,24(sp)
1000c828:	dcc00515 	stw	r19,20(sp)
1000c82c:	dc800415 	stw	r18,16(sp)
1000c830:	dfc00815 	stw	ra,32(sp)
1000c834:	3829883a 	mov	r20,r7
1000c838:	dc800917 	ldw	r18,36(sp)
1000c83c:	8822d57a 	srli	r17,r17,21
1000c840:	000bb140 	call	1000bb14 <_Balloc>
1000c844:	1027883a 	mov	r19,r2
1000c848:	00800434 	movhi	r2,16
1000c84c:	10bfffc4 	addi	r2,r2,-1
1000c850:	808c703a 	and	r6,r16,r2
1000c854:	88000126 	beq	r17,zero,1000c85c <__d2b+0x58>
1000c858:	31800434 	orhi	r6,r6,16
1000c85c:	d9800015 	stw	r6,0(sp)
1000c860:	a8001f26 	beq	r21,zero,1000c8e0 <__d2b+0xdc>
1000c864:	d9000104 	addi	r4,sp,4
1000c868:	dd400115 	stw	r21,4(sp)
1000c86c:	000be8c0 	call	1000be8c <__lo0bits>
1000c870:	d8c00017 	ldw	r3,0(sp)
1000c874:	1000291e 	bne	r2,zero,1000c91c <__d2b+0x118>
1000c878:	d9000117 	ldw	r4,4(sp)
1000c87c:	99000515 	stw	r4,20(r19)
1000c880:	1820c03a 	cmpne	r16,r3,zero
1000c884:	84000044 	addi	r16,r16,1
1000c888:	98c00615 	stw	r3,24(r19)
1000c88c:	9c000415 	stw	r16,16(r19)
1000c890:	88001b1e 	bne	r17,zero,1000c900 <__d2b+0xfc>
1000c894:	800690ba 	slli	r3,r16,2
1000c898:	10bef384 	addi	r2,r2,-1074
1000c89c:	a0800015 	stw	r2,0(r20)
1000c8a0:	98c5883a 	add	r2,r19,r3
1000c8a4:	11000417 	ldw	r4,16(r2)
1000c8a8:	8020917a 	slli	r16,r16,5
1000c8ac:	000be240 	call	1000be24 <__hi0bits>
1000c8b0:	8085c83a 	sub	r2,r16,r2
1000c8b4:	90800015 	stw	r2,0(r18)
1000c8b8:	9805883a 	mov	r2,r19
1000c8bc:	dfc00817 	ldw	ra,32(sp)
1000c8c0:	dd400717 	ldw	r21,28(sp)
1000c8c4:	dd000617 	ldw	r20,24(sp)
1000c8c8:	dcc00517 	ldw	r19,20(sp)
1000c8cc:	dc800417 	ldw	r18,16(sp)
1000c8d0:	dc400317 	ldw	r17,12(sp)
1000c8d4:	dc000217 	ldw	r16,8(sp)
1000c8d8:	dec00904 	addi	sp,sp,36
1000c8dc:	f800283a 	ret
1000c8e0:	d809883a 	mov	r4,sp
1000c8e4:	000be8c0 	call	1000be8c <__lo0bits>
1000c8e8:	d8c00017 	ldw	r3,0(sp)
1000c8ec:	04000044 	movi	r16,1
1000c8f0:	9c000415 	stw	r16,16(r19)
1000c8f4:	98c00515 	stw	r3,20(r19)
1000c8f8:	10800804 	addi	r2,r2,32
1000c8fc:	883fe526 	beq	r17,zero,1000c894 <__alt_data_end+0xf800c894>
1000c900:	8c7ef344 	addi	r17,r17,-1075
1000c904:	88a3883a 	add	r17,r17,r2
1000c908:	00c00d44 	movi	r3,53
1000c90c:	a4400015 	stw	r17,0(r20)
1000c910:	1885c83a 	sub	r2,r3,r2
1000c914:	90800015 	stw	r2,0(r18)
1000c918:	003fe706 	br	1000c8b8 <__alt_data_end+0xf800c8b8>
1000c91c:	01000804 	movi	r4,32
1000c920:	2089c83a 	sub	r4,r4,r2
1000c924:	1908983a 	sll	r4,r3,r4
1000c928:	d9400117 	ldw	r5,4(sp)
1000c92c:	1886d83a 	srl	r3,r3,r2
1000c930:	2148b03a 	or	r4,r4,r5
1000c934:	99000515 	stw	r4,20(r19)
1000c938:	d8c00015 	stw	r3,0(sp)
1000c93c:	003fd006 	br	1000c880 <__alt_data_end+0xf800c880>

1000c940 <__ratio>:
1000c940:	defff904 	addi	sp,sp,-28
1000c944:	dc400315 	stw	r17,12(sp)
1000c948:	2823883a 	mov	r17,r5
1000c94c:	d9400104 	addi	r5,sp,4
1000c950:	dfc00615 	stw	ra,24(sp)
1000c954:	dcc00515 	stw	r19,20(sp)
1000c958:	dc800415 	stw	r18,16(sp)
1000c95c:	2027883a 	mov	r19,r4
1000c960:	dc000215 	stw	r16,8(sp)
1000c964:	000c6e80 	call	1000c6e8 <__b2d>
1000c968:	8809883a 	mov	r4,r17
1000c96c:	d80b883a 	mov	r5,sp
1000c970:	1025883a 	mov	r18,r2
1000c974:	1821883a 	mov	r16,r3
1000c978:	000c6e80 	call	1000c6e8 <__b2d>
1000c97c:	8a400417 	ldw	r9,16(r17)
1000c980:	9a000417 	ldw	r8,16(r19)
1000c984:	100d883a 	mov	r6,r2
1000c988:	d8800017 	ldw	r2,0(sp)
1000c98c:	4251c83a 	sub	r8,r8,r9
1000c990:	4012917a 	slli	r9,r8,5
1000c994:	da000117 	ldw	r8,4(sp)
1000c998:	4091c83a 	sub	r8,r8,r2
1000c99c:	4251883a 	add	r8,r8,r9
1000c9a0:	02000d0e 	bge	zero,r8,1000c9d8 <__ratio+0x98>
1000c9a4:	4010953a 	slli	r8,r8,20
1000c9a8:	4421883a 	add	r16,r8,r16
1000c9ac:	9009883a 	mov	r4,r18
1000c9b0:	800b883a 	mov	r5,r16
1000c9b4:	180f883a 	mov	r7,r3
1000c9b8:	0003fc80 	call	10003fc8 <__divdf3>
1000c9bc:	dfc00617 	ldw	ra,24(sp)
1000c9c0:	dcc00517 	ldw	r19,20(sp)
1000c9c4:	dc800417 	ldw	r18,16(sp)
1000c9c8:	dc400317 	ldw	r17,12(sp)
1000c9cc:	dc000217 	ldw	r16,8(sp)
1000c9d0:	dec00704 	addi	sp,sp,28
1000c9d4:	f800283a 	ret
1000c9d8:	4010953a 	slli	r8,r8,20
1000c9dc:	1a07c83a 	sub	r3,r3,r8
1000c9e0:	003ff206 	br	1000c9ac <__alt_data_end+0xf800c9ac>

1000c9e4 <_mprec_log10>:
1000c9e4:	defffe04 	addi	sp,sp,-8
1000c9e8:	dc000015 	stw	r16,0(sp)
1000c9ec:	dfc00115 	stw	ra,4(sp)
1000c9f0:	008005c4 	movi	r2,23
1000c9f4:	2021883a 	mov	r16,r4
1000c9f8:	11000d0e 	bge	r2,r4,1000ca30 <_mprec_log10+0x4c>
1000c9fc:	0005883a 	mov	r2,zero
1000ca00:	00cffc34 	movhi	r3,16368
1000ca04:	843fffc4 	addi	r16,r16,-1
1000ca08:	1009883a 	mov	r4,r2
1000ca0c:	180b883a 	mov	r5,r3
1000ca10:	000d883a 	mov	r6,zero
1000ca14:	01d00934 	movhi	r7,16420
1000ca18:	0004b8c0 	call	10004b8c <__muldf3>
1000ca1c:	803ff91e 	bne	r16,zero,1000ca04 <__alt_data_end+0xf800ca04>
1000ca20:	dfc00117 	ldw	ra,4(sp)
1000ca24:	dc000017 	ldw	r16,0(sp)
1000ca28:	dec00204 	addi	sp,sp,8
1000ca2c:	f800283a 	ret
1000ca30:	202090fa 	slli	r16,r4,3
1000ca34:	00840074 	movhi	r2,4097
1000ca38:	10875004 	addi	r2,r2,7488
1000ca3c:	1421883a 	add	r16,r2,r16
1000ca40:	80800017 	ldw	r2,0(r16)
1000ca44:	80c00117 	ldw	r3,4(r16)
1000ca48:	dfc00117 	ldw	ra,4(sp)
1000ca4c:	dc000017 	ldw	r16,0(sp)
1000ca50:	dec00204 	addi	sp,sp,8
1000ca54:	f800283a 	ret

1000ca58 <__copybits>:
1000ca58:	297fffc4 	addi	r5,r5,-1
1000ca5c:	280fd17a 	srai	r7,r5,5
1000ca60:	30c00417 	ldw	r3,16(r6)
1000ca64:	30800504 	addi	r2,r6,20
1000ca68:	39c00044 	addi	r7,r7,1
1000ca6c:	18c7883a 	add	r3,r3,r3
1000ca70:	39cf883a 	add	r7,r7,r7
1000ca74:	18c7883a 	add	r3,r3,r3
1000ca78:	39cf883a 	add	r7,r7,r7
1000ca7c:	10c7883a 	add	r3,r2,r3
1000ca80:	21cf883a 	add	r7,r4,r7
1000ca84:	10c00d2e 	bgeu	r2,r3,1000cabc <__copybits+0x64>
1000ca88:	200b883a 	mov	r5,r4
1000ca8c:	12000017 	ldw	r8,0(r2)
1000ca90:	29400104 	addi	r5,r5,4
1000ca94:	10800104 	addi	r2,r2,4
1000ca98:	2a3fff15 	stw	r8,-4(r5)
1000ca9c:	10fffb36 	bltu	r2,r3,1000ca8c <__alt_data_end+0xf800ca8c>
1000caa0:	1985c83a 	sub	r2,r3,r6
1000caa4:	10bffac4 	addi	r2,r2,-21
1000caa8:	1004d0ba 	srli	r2,r2,2
1000caac:	10800044 	addi	r2,r2,1
1000cab0:	1085883a 	add	r2,r2,r2
1000cab4:	1085883a 	add	r2,r2,r2
1000cab8:	2089883a 	add	r4,r4,r2
1000cabc:	21c0032e 	bgeu	r4,r7,1000cacc <__copybits+0x74>
1000cac0:	20000015 	stw	zero,0(r4)
1000cac4:	21000104 	addi	r4,r4,4
1000cac8:	21fffd36 	bltu	r4,r7,1000cac0 <__alt_data_end+0xf800cac0>
1000cacc:	f800283a 	ret

1000cad0 <__any_on>:
1000cad0:	20c00417 	ldw	r3,16(r4)
1000cad4:	2805d17a 	srai	r2,r5,5
1000cad8:	21000504 	addi	r4,r4,20
1000cadc:	18800d0e 	bge	r3,r2,1000cb14 <__any_on+0x44>
1000cae0:	18c7883a 	add	r3,r3,r3
1000cae4:	18c7883a 	add	r3,r3,r3
1000cae8:	20c7883a 	add	r3,r4,r3
1000caec:	20c0192e 	bgeu	r4,r3,1000cb54 <__any_on+0x84>
1000caf0:	18bfff17 	ldw	r2,-4(r3)
1000caf4:	18ffff04 	addi	r3,r3,-4
1000caf8:	1000041e 	bne	r2,zero,1000cb0c <__any_on+0x3c>
1000cafc:	20c0142e 	bgeu	r4,r3,1000cb50 <__any_on+0x80>
1000cb00:	18ffff04 	addi	r3,r3,-4
1000cb04:	19400017 	ldw	r5,0(r3)
1000cb08:	283ffc26 	beq	r5,zero,1000cafc <__alt_data_end+0xf800cafc>
1000cb0c:	00800044 	movi	r2,1
1000cb10:	f800283a 	ret
1000cb14:	10c00a0e 	bge	r2,r3,1000cb40 <__any_on+0x70>
1000cb18:	1085883a 	add	r2,r2,r2
1000cb1c:	1085883a 	add	r2,r2,r2
1000cb20:	294007cc 	andi	r5,r5,31
1000cb24:	2087883a 	add	r3,r4,r2
1000cb28:	283ff026 	beq	r5,zero,1000caec <__alt_data_end+0xf800caec>
1000cb2c:	19800017 	ldw	r6,0(r3)
1000cb30:	3144d83a 	srl	r2,r6,r5
1000cb34:	114a983a 	sll	r5,r2,r5
1000cb38:	29bff41e 	bne	r5,r6,1000cb0c <__alt_data_end+0xf800cb0c>
1000cb3c:	003feb06 	br	1000caec <__alt_data_end+0xf800caec>
1000cb40:	1085883a 	add	r2,r2,r2
1000cb44:	1085883a 	add	r2,r2,r2
1000cb48:	2087883a 	add	r3,r4,r2
1000cb4c:	003fe706 	br	1000caec <__alt_data_end+0xf800caec>
1000cb50:	f800283a 	ret
1000cb54:	0005883a 	mov	r2,zero
1000cb58:	f800283a 	ret

1000cb5c <_realloc_r>:
1000cb5c:	defff604 	addi	sp,sp,-40
1000cb60:	dcc00315 	stw	r19,12(sp)
1000cb64:	dc400115 	stw	r17,4(sp)
1000cb68:	dfc00915 	stw	ra,36(sp)
1000cb6c:	df000815 	stw	fp,32(sp)
1000cb70:	ddc00715 	stw	r23,28(sp)
1000cb74:	dd800615 	stw	r22,24(sp)
1000cb78:	dd400515 	stw	r21,20(sp)
1000cb7c:	dd000415 	stw	r20,16(sp)
1000cb80:	dc800215 	stw	r18,8(sp)
1000cb84:	dc000015 	stw	r16,0(sp)
1000cb88:	2827883a 	mov	r19,r5
1000cb8c:	3023883a 	mov	r17,r6
1000cb90:	2800bf26 	beq	r5,zero,1000ce90 <_realloc_r+0x334>
1000cb94:	2025883a 	mov	r18,r4
1000cb98:	000f85c0 	call	1000f85c <__malloc_lock>
1000cb9c:	98ffff17 	ldw	r3,-4(r19)
1000cba0:	01bfff04 	movi	r6,-4
1000cba4:	890002c4 	addi	r4,r17,11
1000cba8:	01c00584 	movi	r7,22
1000cbac:	9d7ffe04 	addi	r21,r19,-8
1000cbb0:	19a0703a 	and	r16,r3,r6
1000cbb4:	39003f2e 	bgeu	r7,r4,1000ccb4 <_realloc_r+0x158>
1000cbb8:	053ffe04 	movi	r20,-8
1000cbbc:	2528703a 	and	r20,r4,r20
1000cbc0:	a00f883a 	mov	r7,r20
1000cbc4:	a0008216 	blt	r20,zero,1000cdd0 <_realloc_r+0x274>
1000cbc8:	a4408136 	bltu	r20,r17,1000cdd0 <_realloc_r+0x274>
1000cbcc:	81c03c0e 	bge	r16,r7,1000ccc0 <_realloc_r+0x164>
1000cbd0:	07040074 	movhi	fp,4097
1000cbd4:	e708be04 	addi	fp,fp,8952
1000cbd8:	e1000217 	ldw	r4,8(fp)
1000cbdc:	ac05883a 	add	r2,r21,r16
1000cbe0:	2080bf26 	beq	r4,r2,1000cee0 <_realloc_r+0x384>
1000cbe4:	11000117 	ldw	r4,4(r2)
1000cbe8:	023fff84 	movi	r8,-2
1000cbec:	2210703a 	and	r8,r4,r8
1000cbf0:	1211883a 	add	r8,r2,r8
1000cbf4:	41400117 	ldw	r5,4(r8)
1000cbf8:	2940004c 	andi	r5,r5,1
1000cbfc:	28004a1e 	bne	r5,zero,1000cd28 <_realloc_r+0x1cc>
1000cc00:	017fff04 	movi	r5,-4
1000cc04:	2148703a 	and	r4,r4,r5
1000cc08:	2409883a 	add	r4,r4,r16
1000cc0c:	21c0ad0e 	bge	r4,r7,1000cec4 <_realloc_r+0x368>
1000cc10:	18c0004c 	andi	r3,r3,1
1000cc14:	18007f1e 	bne	r3,zero,1000ce14 <_realloc_r+0x2b8>
1000cc18:	9dfffe17 	ldw	r23,-8(r19)
1000cc1c:	adefc83a 	sub	r23,r21,r23
1000cc20:	bd800117 	ldw	r22,4(r23)
1000cc24:	b14a703a 	and	r5,r22,r5
1000cc28:	216d883a 	add	r22,r4,r5
1000cc2c:	b1c04516 	blt	r22,r7,1000cd44 <_realloc_r+0x1e8>
1000cc30:	10c00317 	ldw	r3,12(r2)
1000cc34:	10800217 	ldw	r2,8(r2)
1000cc38:	81bfff04 	addi	r6,r16,-4
1000cc3c:	bc400204 	addi	r17,r23,8
1000cc40:	10c00315 	stw	r3,12(r2)
1000cc44:	18800215 	stw	r2,8(r3)
1000cc48:	b9400217 	ldw	r5,8(r23)
1000cc4c:	b8c00317 	ldw	r3,12(r23)
1000cc50:	00800904 	movi	r2,36
1000cc54:	28c00315 	stw	r3,12(r5)
1000cc58:	19400215 	stw	r5,8(r3)
1000cc5c:	1180ef36 	bltu	r2,r6,1000d01c <_realloc_r+0x4c0>
1000cc60:	008004c4 	movi	r2,19
1000cc64:	1180da2e 	bgeu	r2,r6,1000cfd0 <_realloc_r+0x474>
1000cc68:	98800017 	ldw	r2,0(r19)
1000cc6c:	b8800215 	stw	r2,8(r23)
1000cc70:	98800117 	ldw	r2,4(r19)
1000cc74:	b8800315 	stw	r2,12(r23)
1000cc78:	008006c4 	movi	r2,27
1000cc7c:	1180fc2e 	bgeu	r2,r6,1000d070 <_realloc_r+0x514>
1000cc80:	98800217 	ldw	r2,8(r19)
1000cc84:	b8800415 	stw	r2,16(r23)
1000cc88:	98800317 	ldw	r2,12(r19)
1000cc8c:	b8800515 	stw	r2,20(r23)
1000cc90:	00800904 	movi	r2,36
1000cc94:	3080421e 	bne	r6,r2,1000cda0 <_realloc_r+0x244>
1000cc98:	98800417 	ldw	r2,16(r19)
1000cc9c:	9cc00604 	addi	r19,r19,24
1000cca0:	b8c00804 	addi	r3,r23,32
1000cca4:	b8800615 	stw	r2,24(r23)
1000cca8:	98bfff17 	ldw	r2,-4(r19)
1000ccac:	b8800715 	stw	r2,28(r23)
1000ccb0:	00003d06 	br	1000cda8 <_realloc_r+0x24c>
1000ccb4:	01c00404 	movi	r7,16
1000ccb8:	3829883a 	mov	r20,r7
1000ccbc:	003fc206 	br	1000cbc8 <__alt_data_end+0xf800cbc8>
1000ccc0:	9823883a 	mov	r17,r19
1000ccc4:	850fc83a 	sub	r7,r16,r20
1000ccc8:	008003c4 	movi	r2,15
1000cccc:	18c0004c 	andi	r3,r3,1
1000ccd0:	11c04336 	bltu	r2,r7,1000cde0 <_realloc_r+0x284>
1000ccd4:	1c06b03a 	or	r3,r3,r16
1000ccd8:	a8c00115 	stw	r3,4(r21)
1000ccdc:	ac21883a 	add	r16,r21,r16
1000cce0:	80c00117 	ldw	r3,4(r16)
1000cce4:	18c00054 	ori	r3,r3,1
1000cce8:	80c00115 	stw	r3,4(r16)
1000ccec:	9009883a 	mov	r4,r18
1000ccf0:	000f87c0 	call	1000f87c <__malloc_unlock>
1000ccf4:	8805883a 	mov	r2,r17
1000ccf8:	dfc00917 	ldw	ra,36(sp)
1000ccfc:	df000817 	ldw	fp,32(sp)
1000cd00:	ddc00717 	ldw	r23,28(sp)
1000cd04:	dd800617 	ldw	r22,24(sp)
1000cd08:	dd400517 	ldw	r21,20(sp)
1000cd0c:	dd000417 	ldw	r20,16(sp)
1000cd10:	dcc00317 	ldw	r19,12(sp)
1000cd14:	dc800217 	ldw	r18,8(sp)
1000cd18:	dc400117 	ldw	r17,4(sp)
1000cd1c:	dc000017 	ldw	r16,0(sp)
1000cd20:	dec00a04 	addi	sp,sp,40
1000cd24:	f800283a 	ret
1000cd28:	18c0004c 	andi	r3,r3,1
1000cd2c:	1800391e 	bne	r3,zero,1000ce14 <_realloc_r+0x2b8>
1000cd30:	9dfffe17 	ldw	r23,-8(r19)
1000cd34:	00bfff04 	movi	r2,-4
1000cd38:	adefc83a 	sub	r23,r21,r23
1000cd3c:	b9400117 	ldw	r5,4(r23)
1000cd40:	288a703a 	and	r5,r5,r2
1000cd44:	2c2d883a 	add	r22,r5,r16
1000cd48:	b1c03216 	blt	r22,r7,1000ce14 <_realloc_r+0x2b8>
1000cd4c:	b8800317 	ldw	r2,12(r23)
1000cd50:	b8c00217 	ldw	r3,8(r23)
1000cd54:	81bfff04 	addi	r6,r16,-4
1000cd58:	01000904 	movi	r4,36
1000cd5c:	18800315 	stw	r2,12(r3)
1000cd60:	10c00215 	stw	r3,8(r2)
1000cd64:	bc400204 	addi	r17,r23,8
1000cd68:	2180ac36 	bltu	r4,r6,1000d01c <_realloc_r+0x4c0>
1000cd6c:	008004c4 	movi	r2,19
1000cd70:	1180972e 	bgeu	r2,r6,1000cfd0 <_realloc_r+0x474>
1000cd74:	98800017 	ldw	r2,0(r19)
1000cd78:	b8800215 	stw	r2,8(r23)
1000cd7c:	98800117 	ldw	r2,4(r19)
1000cd80:	b8800315 	stw	r2,12(r23)
1000cd84:	008006c4 	movi	r2,27
1000cd88:	1180b92e 	bgeu	r2,r6,1000d070 <_realloc_r+0x514>
1000cd8c:	98800217 	ldw	r2,8(r19)
1000cd90:	b8800415 	stw	r2,16(r23)
1000cd94:	98800317 	ldw	r2,12(r19)
1000cd98:	b8800515 	stw	r2,20(r23)
1000cd9c:	313fbe26 	beq	r6,r4,1000cc98 <__alt_data_end+0xf800cc98>
1000cda0:	b8c00604 	addi	r3,r23,24
1000cda4:	9cc00404 	addi	r19,r19,16
1000cda8:	98800017 	ldw	r2,0(r19)
1000cdac:	b021883a 	mov	r16,r22
1000cdb0:	b82b883a 	mov	r21,r23
1000cdb4:	18800015 	stw	r2,0(r3)
1000cdb8:	98800117 	ldw	r2,4(r19)
1000cdbc:	18800115 	stw	r2,4(r3)
1000cdc0:	98800217 	ldw	r2,8(r19)
1000cdc4:	18800215 	stw	r2,8(r3)
1000cdc8:	b8c00117 	ldw	r3,4(r23)
1000cdcc:	003fbd06 	br	1000ccc4 <__alt_data_end+0xf800ccc4>
1000cdd0:	00800304 	movi	r2,12
1000cdd4:	90800015 	stw	r2,0(r18)
1000cdd8:	0005883a 	mov	r2,zero
1000cddc:	003fc606 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000cde0:	1d06b03a 	or	r3,r3,r20
1000cde4:	ad0b883a 	add	r5,r21,r20
1000cde8:	a8c00115 	stw	r3,4(r21)
1000cdec:	38800054 	ori	r2,r7,1
1000cdf0:	28800115 	stw	r2,4(r5)
1000cdf4:	29cf883a 	add	r7,r5,r7
1000cdf8:	38800117 	ldw	r2,4(r7)
1000cdfc:	9009883a 	mov	r4,r18
1000ce00:	29400204 	addi	r5,r5,8
1000ce04:	10800054 	ori	r2,r2,1
1000ce08:	38800115 	stw	r2,4(r7)
1000ce0c:	000a3300 	call	1000a330 <_free_r>
1000ce10:	003fb606 	br	1000ccec <__alt_data_end+0xf800ccec>
1000ce14:	880b883a 	mov	r5,r17
1000ce18:	9009883a 	mov	r4,r18
1000ce1c:	000aecc0 	call	1000aecc <_malloc_r>
1000ce20:	1023883a 	mov	r17,r2
1000ce24:	1000aa26 	beq	r2,zero,1000d0d0 <_realloc_r+0x574>
1000ce28:	98ffff17 	ldw	r3,-4(r19)
1000ce2c:	113ffe04 	addi	r4,r2,-8
1000ce30:	00bfff84 	movi	r2,-2
1000ce34:	1884703a 	and	r2,r3,r2
1000ce38:	a885883a 	add	r2,r21,r2
1000ce3c:	20808626 	beq	r4,r2,1000d058 <_realloc_r+0x4fc>
1000ce40:	81bfff04 	addi	r6,r16,-4
1000ce44:	00800904 	movi	r2,36
1000ce48:	11807036 	bltu	r2,r6,1000d00c <_realloc_r+0x4b0>
1000ce4c:	00c004c4 	movi	r3,19
1000ce50:	19805636 	bltu	r3,r6,1000cfac <_realloc_r+0x450>
1000ce54:	8805883a 	mov	r2,r17
1000ce58:	9807883a 	mov	r3,r19
1000ce5c:	19000017 	ldw	r4,0(r3)
1000ce60:	11000015 	stw	r4,0(r2)
1000ce64:	19000117 	ldw	r4,4(r3)
1000ce68:	11000115 	stw	r4,4(r2)
1000ce6c:	18c00217 	ldw	r3,8(r3)
1000ce70:	10c00215 	stw	r3,8(r2)
1000ce74:	980b883a 	mov	r5,r19
1000ce78:	9009883a 	mov	r4,r18
1000ce7c:	000a3300 	call	1000a330 <_free_r>
1000ce80:	9009883a 	mov	r4,r18
1000ce84:	000f87c0 	call	1000f87c <__malloc_unlock>
1000ce88:	8805883a 	mov	r2,r17
1000ce8c:	003f9a06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000ce90:	300b883a 	mov	r5,r6
1000ce94:	dfc00917 	ldw	ra,36(sp)
1000ce98:	df000817 	ldw	fp,32(sp)
1000ce9c:	ddc00717 	ldw	r23,28(sp)
1000cea0:	dd800617 	ldw	r22,24(sp)
1000cea4:	dd400517 	ldw	r21,20(sp)
1000cea8:	dd000417 	ldw	r20,16(sp)
1000ceac:	dcc00317 	ldw	r19,12(sp)
1000ceb0:	dc800217 	ldw	r18,8(sp)
1000ceb4:	dc400117 	ldw	r17,4(sp)
1000ceb8:	dc000017 	ldw	r16,0(sp)
1000cebc:	dec00a04 	addi	sp,sp,40
1000cec0:	000aecc1 	jmpi	1000aecc <_malloc_r>
1000cec4:	11400317 	ldw	r5,12(r2)
1000cec8:	10800217 	ldw	r2,8(r2)
1000cecc:	9823883a 	mov	r17,r19
1000ced0:	2021883a 	mov	r16,r4
1000ced4:	11400315 	stw	r5,12(r2)
1000ced8:	28800215 	stw	r2,8(r5)
1000cedc:	003f7906 	br	1000ccc4 <__alt_data_end+0xf800ccc4>
1000cee0:	21000117 	ldw	r4,4(r4)
1000cee4:	00bfff04 	movi	r2,-4
1000cee8:	a1800404 	addi	r6,r20,16
1000ceec:	2088703a 	and	r4,r4,r2
1000cef0:	2409883a 	add	r4,r4,r16
1000cef4:	2180380e 	bge	r4,r6,1000cfd8 <_realloc_r+0x47c>
1000cef8:	18c0004c 	andi	r3,r3,1
1000cefc:	183fc51e 	bne	r3,zero,1000ce14 <__alt_data_end+0xf800ce14>
1000cf00:	9dfffe17 	ldw	r23,-8(r19)
1000cf04:	adefc83a 	sub	r23,r21,r23
1000cf08:	b9400117 	ldw	r5,4(r23)
1000cf0c:	288a703a 	and	r5,r5,r2
1000cf10:	216d883a 	add	r22,r4,r5
1000cf14:	b1bf8b16 	blt	r22,r6,1000cd44 <__alt_data_end+0xf800cd44>
1000cf18:	b8800317 	ldw	r2,12(r23)
1000cf1c:	b8c00217 	ldw	r3,8(r23)
1000cf20:	81bfff04 	addi	r6,r16,-4
1000cf24:	01000904 	movi	r4,36
1000cf28:	18800315 	stw	r2,12(r3)
1000cf2c:	10c00215 	stw	r3,8(r2)
1000cf30:	bc400204 	addi	r17,r23,8
1000cf34:	21805a36 	bltu	r4,r6,1000d0a0 <_realloc_r+0x544>
1000cf38:	008004c4 	movi	r2,19
1000cf3c:	1180562e 	bgeu	r2,r6,1000d098 <_realloc_r+0x53c>
1000cf40:	98800017 	ldw	r2,0(r19)
1000cf44:	b8800215 	stw	r2,8(r23)
1000cf48:	98800117 	ldw	r2,4(r19)
1000cf4c:	b8800315 	stw	r2,12(r23)
1000cf50:	008006c4 	movi	r2,27
1000cf54:	11805636 	bltu	r2,r6,1000d0b0 <_realloc_r+0x554>
1000cf58:	b8800404 	addi	r2,r23,16
1000cf5c:	9cc00204 	addi	r19,r19,8
1000cf60:	98c00017 	ldw	r3,0(r19)
1000cf64:	10c00015 	stw	r3,0(r2)
1000cf68:	98c00117 	ldw	r3,4(r19)
1000cf6c:	10c00115 	stw	r3,4(r2)
1000cf70:	98c00217 	ldw	r3,8(r19)
1000cf74:	10c00215 	stw	r3,8(r2)
1000cf78:	bd07883a 	add	r3,r23,r20
1000cf7c:	b505c83a 	sub	r2,r22,r20
1000cf80:	e0c00215 	stw	r3,8(fp)
1000cf84:	10800054 	ori	r2,r2,1
1000cf88:	18800115 	stw	r2,4(r3)
1000cf8c:	b8800117 	ldw	r2,4(r23)
1000cf90:	9009883a 	mov	r4,r18
1000cf94:	1080004c 	andi	r2,r2,1
1000cf98:	a0a8b03a 	or	r20,r20,r2
1000cf9c:	bd000115 	stw	r20,4(r23)
1000cfa0:	000f87c0 	call	1000f87c <__malloc_unlock>
1000cfa4:	8805883a 	mov	r2,r17
1000cfa8:	003f5306 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000cfac:	98c00017 	ldw	r3,0(r19)
1000cfb0:	88c00015 	stw	r3,0(r17)
1000cfb4:	98c00117 	ldw	r3,4(r19)
1000cfb8:	88c00115 	stw	r3,4(r17)
1000cfbc:	00c006c4 	movi	r3,27
1000cfc0:	19801d36 	bltu	r3,r6,1000d038 <_realloc_r+0x4dc>
1000cfc4:	88800204 	addi	r2,r17,8
1000cfc8:	98c00204 	addi	r3,r19,8
1000cfcc:	003fa306 	br	1000ce5c <__alt_data_end+0xf800ce5c>
1000cfd0:	8807883a 	mov	r3,r17
1000cfd4:	003f7406 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000cfd8:	ad2b883a 	add	r21,r21,r20
1000cfdc:	2505c83a 	sub	r2,r4,r20
1000cfe0:	e5400215 	stw	r21,8(fp)
1000cfe4:	10800054 	ori	r2,r2,1
1000cfe8:	a8800115 	stw	r2,4(r21)
1000cfec:	98bfff17 	ldw	r2,-4(r19)
1000cff0:	9009883a 	mov	r4,r18
1000cff4:	1080004c 	andi	r2,r2,1
1000cff8:	a0a8b03a 	or	r20,r20,r2
1000cffc:	9d3fff15 	stw	r20,-4(r19)
1000d000:	000f87c0 	call	1000f87c <__malloc_unlock>
1000d004:	9805883a 	mov	r2,r19
1000d008:	003f3b06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d00c:	8809883a 	mov	r4,r17
1000d010:	980b883a 	mov	r5,r19
1000d014:	000b8940 	call	1000b894 <memmove>
1000d018:	003f9606 	br	1000ce74 <__alt_data_end+0xf800ce74>
1000d01c:	8809883a 	mov	r4,r17
1000d020:	980b883a 	mov	r5,r19
1000d024:	000b8940 	call	1000b894 <memmove>
1000d028:	b8c00117 	ldw	r3,4(r23)
1000d02c:	b021883a 	mov	r16,r22
1000d030:	b82b883a 	mov	r21,r23
1000d034:	003f2306 	br	1000ccc4 <__alt_data_end+0xf800ccc4>
1000d038:	98c00217 	ldw	r3,8(r19)
1000d03c:	88c00215 	stw	r3,8(r17)
1000d040:	98c00317 	ldw	r3,12(r19)
1000d044:	88c00315 	stw	r3,12(r17)
1000d048:	30800c26 	beq	r6,r2,1000d07c <_realloc_r+0x520>
1000d04c:	88800404 	addi	r2,r17,16
1000d050:	98c00404 	addi	r3,r19,16
1000d054:	003f8106 	br	1000ce5c <__alt_data_end+0xf800ce5c>
1000d058:	893fff17 	ldw	r4,-4(r17)
1000d05c:	00bfff04 	movi	r2,-4
1000d060:	9823883a 	mov	r17,r19
1000d064:	2084703a 	and	r2,r4,r2
1000d068:	80a1883a 	add	r16,r16,r2
1000d06c:	003f1506 	br	1000ccc4 <__alt_data_end+0xf800ccc4>
1000d070:	b8c00404 	addi	r3,r23,16
1000d074:	9cc00204 	addi	r19,r19,8
1000d078:	003f4b06 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d07c:	99000417 	ldw	r4,16(r19)
1000d080:	88800604 	addi	r2,r17,24
1000d084:	98c00604 	addi	r3,r19,24
1000d088:	89000415 	stw	r4,16(r17)
1000d08c:	99000517 	ldw	r4,20(r19)
1000d090:	89000515 	stw	r4,20(r17)
1000d094:	003f7106 	br	1000ce5c <__alt_data_end+0xf800ce5c>
1000d098:	8805883a 	mov	r2,r17
1000d09c:	003fb006 	br	1000cf60 <__alt_data_end+0xf800cf60>
1000d0a0:	8809883a 	mov	r4,r17
1000d0a4:	980b883a 	mov	r5,r19
1000d0a8:	000b8940 	call	1000b894 <memmove>
1000d0ac:	003fb206 	br	1000cf78 <__alt_data_end+0xf800cf78>
1000d0b0:	98800217 	ldw	r2,8(r19)
1000d0b4:	b8800415 	stw	r2,16(r23)
1000d0b8:	98800317 	ldw	r2,12(r19)
1000d0bc:	b8800515 	stw	r2,20(r23)
1000d0c0:	31000726 	beq	r6,r4,1000d0e0 <_realloc_r+0x584>
1000d0c4:	b8800604 	addi	r2,r23,24
1000d0c8:	9cc00404 	addi	r19,r19,16
1000d0cc:	003fa406 	br	1000cf60 <__alt_data_end+0xf800cf60>
1000d0d0:	9009883a 	mov	r4,r18
1000d0d4:	000f87c0 	call	1000f87c <__malloc_unlock>
1000d0d8:	0005883a 	mov	r2,zero
1000d0dc:	003f0606 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d0e0:	98c00417 	ldw	r3,16(r19)
1000d0e4:	9cc00604 	addi	r19,r19,24
1000d0e8:	b8800804 	addi	r2,r23,32
1000d0ec:	b8c00615 	stw	r3,24(r23)
1000d0f0:	98ffff17 	ldw	r3,-4(r19)
1000d0f4:	b8c00715 	stw	r3,28(r23)
1000d0f8:	003f9906 	br	1000cf60 <__alt_data_end+0xf800cf60>

1000d0fc <_sbrk_r>:
1000d0fc:	defffd04 	addi	sp,sp,-12
1000d100:	dc000015 	stw	r16,0(sp)
1000d104:	04040074 	movhi	r16,4097
1000d108:	dc400115 	stw	r17,4(sp)
1000d10c:	84151504 	addi	r16,r16,21588
1000d110:	2023883a 	mov	r17,r4
1000d114:	2809883a 	mov	r4,r5
1000d118:	dfc00215 	stw	ra,8(sp)
1000d11c:	80000015 	stw	zero,0(r16)
1000d120:	000fa700 	call	1000fa70 <sbrk>
1000d124:	00ffffc4 	movi	r3,-1
1000d128:	10c00526 	beq	r2,r3,1000d140 <_sbrk_r+0x44>
1000d12c:	dfc00217 	ldw	ra,8(sp)
1000d130:	dc400117 	ldw	r17,4(sp)
1000d134:	dc000017 	ldw	r16,0(sp)
1000d138:	dec00304 	addi	sp,sp,12
1000d13c:	f800283a 	ret
1000d140:	80c00017 	ldw	r3,0(r16)
1000d144:	183ff926 	beq	r3,zero,1000d12c <__alt_data_end+0xf800d12c>
1000d148:	88c00015 	stw	r3,0(r17)
1000d14c:	003ff706 	br	1000d12c <__alt_data_end+0xf800d12c>

1000d150 <__sread>:
1000d150:	defffe04 	addi	sp,sp,-8
1000d154:	dc000015 	stw	r16,0(sp)
1000d158:	2821883a 	mov	r16,r5
1000d15c:	2940038f 	ldh	r5,14(r5)
1000d160:	dfc00115 	stw	ra,4(sp)
1000d164:	000ee0c0 	call	1000ee0c <_read_r>
1000d168:	10000716 	blt	r2,zero,1000d188 <__sread+0x38>
1000d16c:	80c01417 	ldw	r3,80(r16)
1000d170:	1887883a 	add	r3,r3,r2
1000d174:	80c01415 	stw	r3,80(r16)
1000d178:	dfc00117 	ldw	ra,4(sp)
1000d17c:	dc000017 	ldw	r16,0(sp)
1000d180:	dec00204 	addi	sp,sp,8
1000d184:	f800283a 	ret
1000d188:	80c0030b 	ldhu	r3,12(r16)
1000d18c:	18fbffcc 	andi	r3,r3,61439
1000d190:	80c0030d 	sth	r3,12(r16)
1000d194:	dfc00117 	ldw	ra,4(sp)
1000d198:	dc000017 	ldw	r16,0(sp)
1000d19c:	dec00204 	addi	sp,sp,8
1000d1a0:	f800283a 	ret

1000d1a4 <__seofread>:
1000d1a4:	0005883a 	mov	r2,zero
1000d1a8:	f800283a 	ret

1000d1ac <__swrite>:
1000d1ac:	2880030b 	ldhu	r2,12(r5)
1000d1b0:	defffb04 	addi	sp,sp,-20
1000d1b4:	dcc00315 	stw	r19,12(sp)
1000d1b8:	dc800215 	stw	r18,8(sp)
1000d1bc:	dc400115 	stw	r17,4(sp)
1000d1c0:	dc000015 	stw	r16,0(sp)
1000d1c4:	dfc00415 	stw	ra,16(sp)
1000d1c8:	10c0400c 	andi	r3,r2,256
1000d1cc:	2821883a 	mov	r16,r5
1000d1d0:	2027883a 	mov	r19,r4
1000d1d4:	3025883a 	mov	r18,r6
1000d1d8:	3823883a 	mov	r17,r7
1000d1dc:	18000526 	beq	r3,zero,1000d1f4 <__swrite+0x48>
1000d1e0:	2940038f 	ldh	r5,14(r5)
1000d1e4:	000d883a 	mov	r6,zero
1000d1e8:	01c00084 	movi	r7,2
1000d1ec:	000edb00 	call	1000edb0 <_lseek_r>
1000d1f0:	8080030b 	ldhu	r2,12(r16)
1000d1f4:	8140038f 	ldh	r5,14(r16)
1000d1f8:	10bbffcc 	andi	r2,r2,61439
1000d1fc:	9809883a 	mov	r4,r19
1000d200:	900d883a 	mov	r6,r18
1000d204:	880f883a 	mov	r7,r17
1000d208:	8080030d 	sth	r2,12(r16)
1000d20c:	dfc00417 	ldw	ra,16(sp)
1000d210:	dcc00317 	ldw	r19,12(sp)
1000d214:	dc800217 	ldw	r18,8(sp)
1000d218:	dc400117 	ldw	r17,4(sp)
1000d21c:	dc000017 	ldw	r16,0(sp)
1000d220:	dec00504 	addi	sp,sp,20
1000d224:	000e88c1 	jmpi	1000e88c <_write_r>

1000d228 <__sseek>:
1000d228:	defffe04 	addi	sp,sp,-8
1000d22c:	dc000015 	stw	r16,0(sp)
1000d230:	2821883a 	mov	r16,r5
1000d234:	2940038f 	ldh	r5,14(r5)
1000d238:	dfc00115 	stw	ra,4(sp)
1000d23c:	000edb00 	call	1000edb0 <_lseek_r>
1000d240:	00ffffc4 	movi	r3,-1
1000d244:	10c00826 	beq	r2,r3,1000d268 <__sseek+0x40>
1000d248:	80c0030b 	ldhu	r3,12(r16)
1000d24c:	80801415 	stw	r2,80(r16)
1000d250:	18c40014 	ori	r3,r3,4096
1000d254:	80c0030d 	sth	r3,12(r16)
1000d258:	dfc00117 	ldw	ra,4(sp)
1000d25c:	dc000017 	ldw	r16,0(sp)
1000d260:	dec00204 	addi	sp,sp,8
1000d264:	f800283a 	ret
1000d268:	80c0030b 	ldhu	r3,12(r16)
1000d26c:	18fbffcc 	andi	r3,r3,61439
1000d270:	80c0030d 	sth	r3,12(r16)
1000d274:	dfc00117 	ldw	ra,4(sp)
1000d278:	dc000017 	ldw	r16,0(sp)
1000d27c:	dec00204 	addi	sp,sp,8
1000d280:	f800283a 	ret

1000d284 <__sclose>:
1000d284:	2940038f 	ldh	r5,14(r5)
1000d288:	000e8e81 	jmpi	1000e8e8 <_close_r>

1000d28c <strcmp>:
1000d28c:	2144b03a 	or	r2,r4,r5
1000d290:	108000cc 	andi	r2,r2,3
1000d294:	1000171e 	bne	r2,zero,1000d2f4 <strcmp+0x68>
1000d298:	20800017 	ldw	r2,0(r4)
1000d29c:	28c00017 	ldw	r3,0(r5)
1000d2a0:	10c0141e 	bne	r2,r3,1000d2f4 <strcmp+0x68>
1000d2a4:	027fbff4 	movhi	r9,65279
1000d2a8:	4a7fbfc4 	addi	r9,r9,-257
1000d2ac:	0086303a 	nor	r3,zero,r2
1000d2b0:	02202074 	movhi	r8,32897
1000d2b4:	1245883a 	add	r2,r2,r9
1000d2b8:	42202004 	addi	r8,r8,-32640
1000d2bc:	10c4703a 	and	r2,r2,r3
1000d2c0:	1204703a 	and	r2,r2,r8
1000d2c4:	10000226 	beq	r2,zero,1000d2d0 <strcmp+0x44>
1000d2c8:	00001706 	br	1000d328 <strcmp+0x9c>
1000d2cc:	1000161e 	bne	r2,zero,1000d328 <strcmp+0x9c>
1000d2d0:	21000104 	addi	r4,r4,4
1000d2d4:	20c00017 	ldw	r3,0(r4)
1000d2d8:	29400104 	addi	r5,r5,4
1000d2dc:	29800017 	ldw	r6,0(r5)
1000d2e0:	1a4f883a 	add	r7,r3,r9
1000d2e4:	00c4303a 	nor	r2,zero,r3
1000d2e8:	3884703a 	and	r2,r7,r2
1000d2ec:	1204703a 	and	r2,r2,r8
1000d2f0:	19bff626 	beq	r3,r6,1000d2cc <__alt_data_end+0xf800d2cc>
1000d2f4:	20800007 	ldb	r2,0(r4)
1000d2f8:	1000051e 	bne	r2,zero,1000d310 <strcmp+0x84>
1000d2fc:	00000606 	br	1000d318 <strcmp+0x8c>
1000d300:	21000044 	addi	r4,r4,1
1000d304:	20800007 	ldb	r2,0(r4)
1000d308:	29400044 	addi	r5,r5,1
1000d30c:	10000226 	beq	r2,zero,1000d318 <strcmp+0x8c>
1000d310:	28c00007 	ldb	r3,0(r5)
1000d314:	10fffa26 	beq	r2,r3,1000d300 <__alt_data_end+0xf800d300>
1000d318:	20800003 	ldbu	r2,0(r4)
1000d31c:	28c00003 	ldbu	r3,0(r5)
1000d320:	10c5c83a 	sub	r2,r2,r3
1000d324:	f800283a 	ret
1000d328:	0005883a 	mov	r2,zero
1000d32c:	f800283a 	ret

1000d330 <__sprint_r.part.0>:
1000d330:	28801917 	ldw	r2,100(r5)
1000d334:	defff604 	addi	sp,sp,-40
1000d338:	dd400515 	stw	r21,20(sp)
1000d33c:	dcc00315 	stw	r19,12(sp)
1000d340:	dfc00915 	stw	ra,36(sp)
1000d344:	df000815 	stw	fp,32(sp)
1000d348:	ddc00715 	stw	r23,28(sp)
1000d34c:	dd800615 	stw	r22,24(sp)
1000d350:	dd000415 	stw	r20,16(sp)
1000d354:	dc800215 	stw	r18,8(sp)
1000d358:	dc400115 	stw	r17,4(sp)
1000d35c:	dc000015 	stw	r16,0(sp)
1000d360:	1088000c 	andi	r2,r2,8192
1000d364:	2827883a 	mov	r19,r5
1000d368:	302b883a 	mov	r21,r6
1000d36c:	10002d26 	beq	r2,zero,1000d424 <__sprint_r.part.0+0xf4>
1000d370:	30800217 	ldw	r2,8(r6)
1000d374:	35800017 	ldw	r22,0(r6)
1000d378:	10002826 	beq	r2,zero,1000d41c <__sprint_r.part.0+0xec>
1000d37c:	2029883a 	mov	r20,r4
1000d380:	b5c00104 	addi	r23,r22,4
1000d384:	04bfffc4 	movi	r18,-1
1000d388:	bc400017 	ldw	r17,0(r23)
1000d38c:	b4000017 	ldw	r16,0(r22)
1000d390:	0039883a 	mov	fp,zero
1000d394:	8822d0ba 	srli	r17,r17,2
1000d398:	04400316 	blt	zero,r17,1000d3a8 <__sprint_r.part.0+0x78>
1000d39c:	00001706 	br	1000d3fc <__sprint_r.part.0+0xcc>
1000d3a0:	84000104 	addi	r16,r16,4
1000d3a4:	8f001526 	beq	r17,fp,1000d3fc <__sprint_r.part.0+0xcc>
1000d3a8:	81400017 	ldw	r5,0(r16)
1000d3ac:	a009883a 	mov	r4,r20
1000d3b0:	980d883a 	mov	r6,r19
1000d3b4:	000eb280 	call	1000eb28 <_fputwc_r>
1000d3b8:	e7000044 	addi	fp,fp,1
1000d3bc:	14bff81e 	bne	r2,r18,1000d3a0 <__alt_data_end+0xf800d3a0>
1000d3c0:	9005883a 	mov	r2,r18
1000d3c4:	a8000215 	stw	zero,8(r21)
1000d3c8:	a8000115 	stw	zero,4(r21)
1000d3cc:	dfc00917 	ldw	ra,36(sp)
1000d3d0:	df000817 	ldw	fp,32(sp)
1000d3d4:	ddc00717 	ldw	r23,28(sp)
1000d3d8:	dd800617 	ldw	r22,24(sp)
1000d3dc:	dd400517 	ldw	r21,20(sp)
1000d3e0:	dd000417 	ldw	r20,16(sp)
1000d3e4:	dcc00317 	ldw	r19,12(sp)
1000d3e8:	dc800217 	ldw	r18,8(sp)
1000d3ec:	dc400117 	ldw	r17,4(sp)
1000d3f0:	dc000017 	ldw	r16,0(sp)
1000d3f4:	dec00a04 	addi	sp,sp,40
1000d3f8:	f800283a 	ret
1000d3fc:	a8c00217 	ldw	r3,8(r21)
1000d400:	8c63883a 	add	r17,r17,r17
1000d404:	8c63883a 	add	r17,r17,r17
1000d408:	1c45c83a 	sub	r2,r3,r17
1000d40c:	a8800215 	stw	r2,8(r21)
1000d410:	b5800204 	addi	r22,r22,8
1000d414:	bdc00204 	addi	r23,r23,8
1000d418:	103fdb1e 	bne	r2,zero,1000d388 <__alt_data_end+0xf800d388>
1000d41c:	0005883a 	mov	r2,zero
1000d420:	003fe806 	br	1000d3c4 <__alt_data_end+0xf800d3c4>
1000d424:	000a6200 	call	1000a620 <__sfvwrite_r>
1000d428:	003fe606 	br	1000d3c4 <__alt_data_end+0xf800d3c4>

1000d42c <__sprint_r>:
1000d42c:	30c00217 	ldw	r3,8(r6)
1000d430:	18000126 	beq	r3,zero,1000d438 <__sprint_r+0xc>
1000d434:	000d3301 	jmpi	1000d330 <__sprint_r.part.0>
1000d438:	30000115 	stw	zero,4(r6)
1000d43c:	0005883a 	mov	r2,zero
1000d440:	f800283a 	ret

1000d444 <___vfiprintf_internal_r>:
1000d444:	defeca04 	addi	sp,sp,-1240
1000d448:	dcc12f15 	stw	r19,1212(sp)
1000d44c:	dfc13515 	stw	ra,1236(sp)
1000d450:	df013415 	stw	fp,1232(sp)
1000d454:	ddc13315 	stw	r23,1228(sp)
1000d458:	dd813215 	stw	r22,1224(sp)
1000d45c:	dd413115 	stw	r21,1220(sp)
1000d460:	dd013015 	stw	r20,1216(sp)
1000d464:	dc812e15 	stw	r18,1208(sp)
1000d468:	dc412d15 	stw	r17,1204(sp)
1000d46c:	dc012c15 	stw	r16,1200(sp)
1000d470:	d9012115 	stw	r4,1156(sp)
1000d474:	d9412015 	stw	r5,1152(sp)
1000d478:	d9c12315 	stw	r7,1164(sp)
1000d47c:	3027883a 	mov	r19,r6
1000d480:	20000226 	beq	r4,zero,1000d48c <___vfiprintf_internal_r+0x48>
1000d484:	20800e17 	ldw	r2,56(r4)
1000d488:	1000f726 	beq	r2,zero,1000d868 <___vfiprintf_internal_r+0x424>
1000d48c:	d8812017 	ldw	r2,1152(sp)
1000d490:	10c0030b 	ldhu	r3,12(r2)
1000d494:	1908000c 	andi	r4,r3,8192
1000d498:	1805883a 	mov	r2,r3
1000d49c:	2000081e 	bne	r4,zero,1000d4c0 <___vfiprintf_internal_r+0x7c>
1000d4a0:	d9412017 	ldw	r5,1152(sp)
1000d4a4:	18880014 	ori	r2,r3,8192
1000d4a8:	00f7ffc4 	movi	r3,-8193
1000d4ac:	29001917 	ldw	r4,100(r5)
1000d4b0:	2880030d 	sth	r2,12(r5)
1000d4b4:	20c8703a 	and	r4,r4,r3
1000d4b8:	29001915 	stw	r4,100(r5)
1000d4bc:	1007883a 	mov	r3,r2
1000d4c0:	1100020c 	andi	r4,r2,8
1000d4c4:	2000a726 	beq	r4,zero,1000d764 <___vfiprintf_internal_r+0x320>
1000d4c8:	d9412017 	ldw	r5,1152(sp)
1000d4cc:	29000417 	ldw	r4,16(r5)
1000d4d0:	2000a426 	beq	r4,zero,1000d764 <___vfiprintf_internal_r+0x320>
1000d4d4:	1080068c 	andi	r2,r2,26
1000d4d8:	01000284 	movi	r4,10
1000d4dc:	1100ab26 	beq	r2,r4,1000d78c <___vfiprintf_internal_r+0x348>
1000d4e0:	d9010a04 	addi	r4,sp,1064
1000d4e4:	d94109c4 	addi	r5,sp,1063
1000d4e8:	07040074 	movhi	fp,4097
1000d4ec:	04440074 	movhi	r17,4097
1000d4f0:	2145c83a 	sub	r2,r4,r5
1000d4f4:	e7078604 	addi	fp,fp,7704
1000d4f8:	8c478204 	addi	r17,r17,7688
1000d4fc:	d9011e15 	stw	r4,1144(sp)
1000d500:	d9411f15 	stw	r5,1148(sp)
1000d504:	dec11a15 	stw	sp,1128(sp)
1000d508:	d8011c15 	stw	zero,1136(sp)
1000d50c:	d8011b15 	stw	zero,1132(sp)
1000d510:	d8012715 	stw	zero,1180(sp)
1000d514:	d8012515 	stw	zero,1172(sp)
1000d518:	d811883a 	mov	r8,sp
1000d51c:	d8812815 	stw	r2,1184(sp)
1000d520:	982f883a 	mov	r23,r19
1000d524:	b8800007 	ldb	r2,0(r23)
1000d528:	1003b026 	beq	r2,zero,1000e3ec <___vfiprintf_internal_r+0xfa8>
1000d52c:	01000944 	movi	r4,37
1000d530:	1103ae26 	beq	r2,r4,1000e3ec <___vfiprintf_internal_r+0xfa8>
1000d534:	b805883a 	mov	r2,r23
1000d538:	00000106 	br	1000d540 <___vfiprintf_internal_r+0xfc>
1000d53c:	19000326 	beq	r3,r4,1000d54c <___vfiprintf_internal_r+0x108>
1000d540:	10800044 	addi	r2,r2,1
1000d544:	10c00007 	ldb	r3,0(r2)
1000d548:	183ffc1e 	bne	r3,zero,1000d53c <__alt_data_end+0xf800d53c>
1000d54c:	15e1c83a 	sub	r16,r2,r23
1000d550:	1029883a 	mov	r20,r2
1000d554:	80001026 	beq	r16,zero,1000d598 <___vfiprintf_internal_r+0x154>
1000d558:	d8c11c17 	ldw	r3,1136(sp)
1000d55c:	d8811b17 	ldw	r2,1132(sp)
1000d560:	45c00015 	stw	r23,0(r8)
1000d564:	80c7883a 	add	r3,r16,r3
1000d568:	10800044 	addi	r2,r2,1
1000d56c:	44000115 	stw	r16,4(r8)
1000d570:	d8c11c15 	stw	r3,1136(sp)
1000d574:	d8811b15 	stw	r2,1132(sp)
1000d578:	010001c4 	movi	r4,7
1000d57c:	2080740e 	bge	r4,r2,1000d750 <___vfiprintf_internal_r+0x30c>
1000d580:	1803a71e 	bne	r3,zero,1000e420 <___vfiprintf_internal_r+0xfdc>
1000d584:	d8c12517 	ldw	r3,1172(sp)
1000d588:	d8011b15 	stw	zero,1132(sp)
1000d58c:	d811883a 	mov	r8,sp
1000d590:	1c07883a 	add	r3,r3,r16
1000d594:	d8c12515 	stw	r3,1172(sp)
1000d598:	a0800007 	ldb	r2,0(r20)
1000d59c:	1002bf26 	beq	r2,zero,1000e09c <___vfiprintf_internal_r+0xc58>
1000d5a0:	a5c00044 	addi	r23,r20,1
1000d5a4:	a1800047 	ldb	r6,1(r20)
1000d5a8:	d8011d85 	stb	zero,1142(sp)
1000d5ac:	d8012205 	stb	zero,1160(sp)
1000d5b0:	043fffc4 	movi	r16,-1
1000d5b4:	d8012415 	stw	zero,1168(sp)
1000d5b8:	0025883a 	mov	r18,zero
1000d5bc:	05001604 	movi	r20,88
1000d5c0:	05400244 	movi	r21,9
1000d5c4:	4027883a 	mov	r19,r8
1000d5c8:	bdc00044 	addi	r23,r23,1
1000d5cc:	30bff804 	addi	r2,r6,-32
1000d5d0:	a0825636 	bltu	r20,r2,1000df2c <___vfiprintf_internal_r+0xae8>
1000d5d4:	100490ba 	slli	r2,r2,2
1000d5d8:	01040074 	movhi	r4,4097
1000d5dc:	21357b04 	addi	r4,r4,-10772
1000d5e0:	1105883a 	add	r2,r2,r4
1000d5e4:	10800017 	ldw	r2,0(r2)
1000d5e8:	1000683a 	jmp	r2
1000d5ec:	1000debc 	xorhi	zero,r2,890
1000d5f0:	1000df2c 	andhi	zero,r2,892
1000d5f4:	1000df2c 	andhi	zero,r2,892
1000d5f8:	1000df20 	cmpeqi	zero,r2,892
1000d5fc:	1000df2c 	andhi	zero,r2,892
1000d600:	1000df2c 	andhi	zero,r2,892
1000d604:	1000df2c 	andhi	zero,r2,892
1000d608:	1000df2c 	andhi	zero,r2,892
1000d60c:	1000df2c 	andhi	zero,r2,892
1000d610:	1000df2c 	andhi	zero,r2,892
1000d614:	1000dcac 	andhi	zero,r2,882
1000d618:	1000ded4 	ori	zero,r2,891
1000d61c:	1000df2c 	andhi	zero,r2,892
1000d620:	1000d880 	call	11000d88 <_gp+0xfe5480>
1000d624:	1000dcd0 	cmplti	zero,r2,883
1000d628:	1000df2c 	andhi	zero,r2,892
1000d62c:	1000d88c 	andi	zero,r2,866
1000d630:	1000d898 	cmpnei	zero,r2,866
1000d634:	1000d898 	cmpnei	zero,r2,866
1000d638:	1000d898 	cmpnei	zero,r2,866
1000d63c:	1000d898 	cmpnei	zero,r2,866
1000d640:	1000d898 	cmpnei	zero,r2,866
1000d644:	1000d898 	cmpnei	zero,r2,866
1000d648:	1000d898 	cmpnei	zero,r2,866
1000d64c:	1000d898 	cmpnei	zero,r2,866
1000d650:	1000d898 	cmpnei	zero,r2,866
1000d654:	1000df2c 	andhi	zero,r2,892
1000d658:	1000df2c 	andhi	zero,r2,892
1000d65c:	1000df2c 	andhi	zero,r2,892
1000d660:	1000df2c 	andhi	zero,r2,892
1000d664:	1000df2c 	andhi	zero,r2,892
1000d668:	1000df2c 	andhi	zero,r2,892
1000d66c:	1000df2c 	andhi	zero,r2,892
1000d670:	1000df2c 	andhi	zero,r2,892
1000d674:	1000df2c 	andhi	zero,r2,892
1000d678:	1000df2c 	andhi	zero,r2,892
1000d67c:	1000d8d8 	cmpnei	zero,r2,867
1000d680:	1000df2c 	andhi	zero,r2,892
1000d684:	1000df2c 	andhi	zero,r2,892
1000d688:	1000df2c 	andhi	zero,r2,892
1000d68c:	1000df2c 	andhi	zero,r2,892
1000d690:	1000df2c 	andhi	zero,r2,892
1000d694:	1000df2c 	andhi	zero,r2,892
1000d698:	1000df2c 	andhi	zero,r2,892
1000d69c:	1000df2c 	andhi	zero,r2,892
1000d6a0:	1000df2c 	andhi	zero,r2,892
1000d6a4:	1000df2c 	andhi	zero,r2,892
1000d6a8:	1000dbc8 	cmpgei	zero,r2,879
1000d6ac:	1000df2c 	andhi	zero,r2,892
1000d6b0:	1000df2c 	andhi	zero,r2,892
1000d6b4:	1000df2c 	andhi	zero,r2,892
1000d6b8:	1000df2c 	andhi	zero,r2,892
1000d6bc:	1000df2c 	andhi	zero,r2,892
1000d6c0:	1000dc08 	cmpgei	zero,r2,880
1000d6c4:	1000df2c 	andhi	zero,r2,892
1000d6c8:	1000df2c 	andhi	zero,r2,892
1000d6cc:	1000dc4c 	andi	zero,r2,881
1000d6d0:	1000df2c 	andhi	zero,r2,892
1000d6d4:	1000df2c 	andhi	zero,r2,892
1000d6d8:	1000df2c 	andhi	zero,r2,892
1000d6dc:	1000df2c 	andhi	zero,r2,892
1000d6e0:	1000df2c 	andhi	zero,r2,892
1000d6e4:	1000df2c 	andhi	zero,r2,892
1000d6e8:	1000df2c 	andhi	zero,r2,892
1000d6ec:	1000df2c 	andhi	zero,r2,892
1000d6f0:	1000df2c 	andhi	zero,r2,892
1000d6f4:	1000df2c 	andhi	zero,r2,892
1000d6f8:	1000db94 	ori	zero,r2,878
1000d6fc:	1000dee4 	muli	zero,r2,891
1000d700:	1000df2c 	andhi	zero,r2,892
1000d704:	1000df2c 	andhi	zero,r2,892
1000d708:	1000df2c 	andhi	zero,r2,892
1000d70c:	1000dd20 	cmpeqi	zero,r2,884
1000d710:	1000dee4 	muli	zero,r2,891
1000d714:	1000df2c 	andhi	zero,r2,892
1000d718:	1000df2c 	andhi	zero,r2,892
1000d71c:	1000dc38 	rdprs	zero,r2,880
1000d720:	1000df2c 	andhi	zero,r2,892
1000d724:	1000de84 	addi	zero,r2,890
1000d728:	1000de0c 	andi	zero,r2,888
1000d72c:	1000de40 	call	11000de4 <_gp+0xfe54dc>
1000d730:	1000dd2c 	andhi	zero,r2,884
1000d734:	1000df2c 	andhi	zero,r2,892
1000d738:	1000dd38 	rdprs	zero,r2,884
1000d73c:	1000df2c 	andhi	zero,r2,892
1000d740:	1000dd94 	ori	zero,r2,886
1000d744:	1000df2c 	andhi	zero,r2,892
1000d748:	1000df2c 	andhi	zero,r2,892
1000d74c:	1000ddc8 	cmpgei	zero,r2,887
1000d750:	42000204 	addi	r8,r8,8
1000d754:	d8c12517 	ldw	r3,1172(sp)
1000d758:	1c07883a 	add	r3,r3,r16
1000d75c:	d8c12515 	stw	r3,1172(sp)
1000d760:	003f8d06 	br	1000d598 <__alt_data_end+0xf800d598>
1000d764:	d9012117 	ldw	r4,1156(sp)
1000d768:	d9412017 	ldw	r5,1152(sp)
1000d76c:	00081800 	call	10008180 <__swsetup_r>
1000d770:	1000301e 	bne	r2,zero,1000d834 <___vfiprintf_internal_r+0x3f0>
1000d774:	d8812017 	ldw	r2,1152(sp)
1000d778:	01000284 	movi	r4,10
1000d77c:	10c0030b 	ldhu	r3,12(r2)
1000d780:	1805883a 	mov	r2,r3
1000d784:	1080068c 	andi	r2,r2,26
1000d788:	113f551e 	bne	r2,r4,1000d4e0 <__alt_data_end+0xf800d4e0>
1000d78c:	d9012017 	ldw	r4,1152(sp)
1000d790:	2080038b 	ldhu	r2,14(r4)
1000d794:	113fffcc 	andi	r4,r2,65535
1000d798:	2120001c 	xori	r4,r4,32768
1000d79c:	21200004 	addi	r4,r4,-32768
1000d7a0:	203f4f16 	blt	r4,zero,1000d4e0 <__alt_data_end+0xf800d4e0>
1000d7a4:	d9412017 	ldw	r5,1152(sp)
1000d7a8:	d9012117 	ldw	r4,1156(sp)
1000d7ac:	d9c12317 	ldw	r7,1164(sp)
1000d7b0:	2b001917 	ldw	r12,100(r5)
1000d7b4:	2ac00717 	ldw	r11,28(r5)
1000d7b8:	2a800917 	ldw	r10,36(r5)
1000d7bc:	02010004 	movi	r8,1024
1000d7c0:	18ffff4c 	andi	r3,r3,65533
1000d7c4:	da0b883a 	add	r5,sp,r8
1000d7c8:	980d883a 	mov	r6,r19
1000d7cc:	d8c1030d 	sth	r3,1036(sp)
1000d7d0:	db011915 	stw	r12,1124(sp)
1000d7d4:	d881038d 	sth	r2,1038(sp)
1000d7d8:	dac10715 	stw	r11,1052(sp)
1000d7dc:	da810915 	stw	r10,1060(sp)
1000d7e0:	dec10015 	stw	sp,1024(sp)
1000d7e4:	dec10415 	stw	sp,1040(sp)
1000d7e8:	da010215 	stw	r8,1032(sp)
1000d7ec:	da010515 	stw	r8,1044(sp)
1000d7f0:	d8010615 	stw	zero,1048(sp)
1000d7f4:	000d4440 	call	1000d444 <___vfiprintf_internal_r>
1000d7f8:	1021883a 	mov	r16,r2
1000d7fc:	10000416 	blt	r2,zero,1000d810 <___vfiprintf_internal_r+0x3cc>
1000d800:	d9012117 	ldw	r4,1156(sp)
1000d804:	d9410004 	addi	r5,sp,1024
1000d808:	0009c000 	call	10009c00 <_fflush_r>
1000d80c:	10040f1e 	bne	r2,zero,1000e84c <___vfiprintf_internal_r+0x1408>
1000d810:	d881030b 	ldhu	r2,1036(sp)
1000d814:	1080100c 	andi	r2,r2,64
1000d818:	10000426 	beq	r2,zero,1000d82c <___vfiprintf_internal_r+0x3e8>
1000d81c:	d8c12017 	ldw	r3,1152(sp)
1000d820:	1880030b 	ldhu	r2,12(r3)
1000d824:	10801014 	ori	r2,r2,64
1000d828:	1880030d 	sth	r2,12(r3)
1000d82c:	8005883a 	mov	r2,r16
1000d830:	00000106 	br	1000d838 <___vfiprintf_internal_r+0x3f4>
1000d834:	00bfffc4 	movi	r2,-1
1000d838:	dfc13517 	ldw	ra,1236(sp)
1000d83c:	df013417 	ldw	fp,1232(sp)
1000d840:	ddc13317 	ldw	r23,1228(sp)
1000d844:	dd813217 	ldw	r22,1224(sp)
1000d848:	dd413117 	ldw	r21,1220(sp)
1000d84c:	dd013017 	ldw	r20,1216(sp)
1000d850:	dcc12f17 	ldw	r19,1212(sp)
1000d854:	dc812e17 	ldw	r18,1208(sp)
1000d858:	dc412d17 	ldw	r17,1204(sp)
1000d85c:	dc012c17 	ldw	r16,1200(sp)
1000d860:	dec13604 	addi	sp,sp,1240
1000d864:	f800283a 	ret
1000d868:	000a1bc0 	call	1000a1bc <__sinit>
1000d86c:	003f0706 	br	1000d48c <__alt_data_end+0xf800d48c>
1000d870:	d8c12417 	ldw	r3,1168(sp)
1000d874:	d8812315 	stw	r2,1164(sp)
1000d878:	00c7c83a 	sub	r3,zero,r3
1000d87c:	d8c12415 	stw	r3,1168(sp)
1000d880:	94800114 	ori	r18,r18,4
1000d884:	b9800007 	ldb	r6,0(r23)
1000d888:	003f4f06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d88c:	94802014 	ori	r18,r18,128
1000d890:	b9800007 	ldb	r6,0(r23)
1000d894:	003f4c06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d898:	dc012615 	stw	r16,1176(sp)
1000d89c:	d8012415 	stw	zero,1168(sp)
1000d8a0:	35bff404 	addi	r22,r6,-48
1000d8a4:	0009883a 	mov	r4,zero
1000d8a8:	b821883a 	mov	r16,r23
1000d8ac:	01400284 	movi	r5,10
1000d8b0:	00037040 	call	10003704 <__mulsi3>
1000d8b4:	81800007 	ldb	r6,0(r16)
1000d8b8:	1589883a 	add	r4,r2,r22
1000d8bc:	bdc00044 	addi	r23,r23,1
1000d8c0:	35bff404 	addi	r22,r6,-48
1000d8c4:	b821883a 	mov	r16,r23
1000d8c8:	adbff82e 	bgeu	r21,r22,1000d8ac <__alt_data_end+0xf800d8ac>
1000d8cc:	d9012415 	stw	r4,1168(sp)
1000d8d0:	dc012617 	ldw	r16,1176(sp)
1000d8d4:	003f3d06 	br	1000d5cc <__alt_data_end+0xf800d5cc>
1000d8d8:	d8c12203 	ldbu	r3,1160(sp)
1000d8dc:	94800414 	ori	r18,r18,16
1000d8e0:	9080080c 	andi	r2,r18,32
1000d8e4:	d8c11d85 	stb	r3,1142(sp)
1000d8e8:	9811883a 	mov	r8,r19
1000d8ec:	d8c12317 	ldw	r3,1164(sp)
1000d8f0:	10018226 	beq	r2,zero,1000defc <___vfiprintf_internal_r+0xab8>
1000d8f4:	d9012317 	ldw	r4,1164(sp)
1000d8f8:	18800117 	ldw	r2,4(r3)
1000d8fc:	1cc00017 	ldw	r19,0(r3)
1000d900:	21000204 	addi	r4,r4,8
1000d904:	d9012315 	stw	r4,1164(sp)
1000d908:	102b883a 	mov	r21,r2
1000d90c:	10030016 	blt	r2,zero,1000e510 <___vfiprintf_internal_r+0x10cc>
1000d910:	dd811d83 	ldbu	r22,1142(sp)
1000d914:	8029883a 	mov	r20,r16
1000d918:	00800044 	movi	r2,1
1000d91c:	9d46b03a 	or	r3,r19,r21
1000d920:	80000216 	blt	r16,zero,1000d92c <___vfiprintf_internal_r+0x4e8>
1000d924:	013fdfc4 	movi	r4,-129
1000d928:	9124703a 	and	r18,r18,r4
1000d92c:	1801b41e 	bne	r3,zero,1000e000 <___vfiprintf_internal_r+0xbbc>
1000d930:	80028126 	beq	r16,zero,1000e338 <___vfiprintf_internal_r+0xef4>
1000d934:	10803fcc 	andi	r2,r2,255
1000d938:	00c00044 	movi	r3,1
1000d93c:	10c1d126 	beq	r2,r3,1000e084 <___vfiprintf_internal_r+0xc40>
1000d940:	00c00084 	movi	r3,2
1000d944:	10c28626 	beq	r2,r3,1000e360 <___vfiprintf_internal_r+0xf1c>
1000d948:	d8c10a04 	addi	r3,sp,1064
1000d94c:	9808d0fa 	srli	r4,r19,3
1000d950:	a80a977a 	slli	r5,r21,29
1000d954:	a82ad0fa 	srli	r21,r21,3
1000d958:	9cc001cc 	andi	r19,r19,7
1000d95c:	98800c04 	addi	r2,r19,48
1000d960:	18ffffc4 	addi	r3,r3,-1
1000d964:	2926b03a 	or	r19,r5,r4
1000d968:	18800005 	stb	r2,0(r3)
1000d96c:	9d48b03a 	or	r4,r19,r21
1000d970:	203ff61e 	bne	r4,zero,1000d94c <__alt_data_end+0xf800d94c>
1000d974:	9100004c 	andi	r4,r18,1
1000d978:	d8c12215 	stw	r3,1160(sp)
1000d97c:	2002b31e 	bne	r4,zero,1000e44c <___vfiprintf_internal_r+0x1008>
1000d980:	d9411e17 	ldw	r5,1144(sp)
1000d984:	28e9c83a 	sub	r20,r5,r3
1000d988:	a02b883a 	mov	r21,r20
1000d98c:	a400010e 	bge	r20,r16,1000d994 <___vfiprintf_internal_r+0x550>
1000d990:	802b883a 	mov	r21,r16
1000d994:	b5803fcc 	andi	r22,r22,255
1000d998:	b580201c 	xori	r22,r22,128
1000d99c:	b5bfe004 	addi	r22,r22,-128
1000d9a0:	b0000126 	beq	r22,zero,1000d9a8 <___vfiprintf_internal_r+0x564>
1000d9a4:	ad400044 	addi	r21,r21,1
1000d9a8:	9280008c 	andi	r10,r18,2
1000d9ac:	50000126 	beq	r10,zero,1000d9b4 <___vfiprintf_internal_r+0x570>
1000d9b0:	ad400084 	addi	r21,r21,2
1000d9b4:	9580210c 	andi	r22,r18,132
1000d9b8:	b001751e 	bne	r22,zero,1000df90 <___vfiprintf_internal_r+0xb4c>
1000d9bc:	d9012417 	ldw	r4,1168(sp)
1000d9c0:	2567c83a 	sub	r19,r4,r21
1000d9c4:	04c1720e 	bge	zero,r19,1000df90 <___vfiprintf_internal_r+0xb4c>
1000d9c8:	01c00404 	movi	r7,16
1000d9cc:	d8c11c17 	ldw	r3,1136(sp)
1000d9d0:	3cc36b0e 	bge	r7,r19,1000e780 <___vfiprintf_internal_r+0x133c>
1000d9d4:	00840074 	movhi	r2,4097
1000d9d8:	10878604 	addi	r2,r2,7704
1000d9dc:	dc012915 	stw	r16,1188(sp)
1000d9e0:	d9011b17 	ldw	r4,1132(sp)
1000d9e4:	9821883a 	mov	r16,r19
1000d9e8:	d8812615 	stw	r2,1176(sp)
1000d9ec:	030001c4 	movi	r12,7
1000d9f0:	5027883a 	mov	r19,r10
1000d9f4:	00000506 	br	1000da0c <___vfiprintf_internal_r+0x5c8>
1000d9f8:	21400084 	addi	r5,r4,2
1000d9fc:	42000204 	addi	r8,r8,8
1000da00:	1009883a 	mov	r4,r2
1000da04:	843ffc04 	addi	r16,r16,-16
1000da08:	3c000d0e 	bge	r7,r16,1000da40 <___vfiprintf_internal_r+0x5fc>
1000da0c:	18c00404 	addi	r3,r3,16
1000da10:	20800044 	addi	r2,r4,1
1000da14:	47000015 	stw	fp,0(r8)
1000da18:	41c00115 	stw	r7,4(r8)
1000da1c:	d8c11c15 	stw	r3,1136(sp)
1000da20:	d8811b15 	stw	r2,1132(sp)
1000da24:	60bff40e 	bge	r12,r2,1000d9f8 <__alt_data_end+0xf800d9f8>
1000da28:	18014b1e 	bne	r3,zero,1000df58 <___vfiprintf_internal_r+0xb14>
1000da2c:	843ffc04 	addi	r16,r16,-16
1000da30:	0009883a 	mov	r4,zero
1000da34:	01400044 	movi	r5,1
1000da38:	d811883a 	mov	r8,sp
1000da3c:	3c3ff316 	blt	r7,r16,1000da0c <__alt_data_end+0xf800da0c>
1000da40:	9815883a 	mov	r10,r19
1000da44:	8027883a 	mov	r19,r16
1000da48:	dc012917 	ldw	r16,1188(sp)
1000da4c:	d9012617 	ldw	r4,1176(sp)
1000da50:	98c7883a 	add	r3,r19,r3
1000da54:	44c00115 	stw	r19,4(r8)
1000da58:	41000015 	stw	r4,0(r8)
1000da5c:	d8c11c15 	stw	r3,1136(sp)
1000da60:	d9411b15 	stw	r5,1132(sp)
1000da64:	008001c4 	movi	r2,7
1000da68:	11425116 	blt	r2,r5,1000e3b0 <___vfiprintf_internal_r+0xf6c>
1000da6c:	d9011d87 	ldb	r4,1142(sp)
1000da70:	42000204 	addi	r8,r8,8
1000da74:	28800044 	addi	r2,r5,1
1000da78:	20014a1e 	bne	r4,zero,1000dfa4 <___vfiprintf_internal_r+0xb60>
1000da7c:	50000c26 	beq	r10,zero,1000dab0 <___vfiprintf_internal_r+0x66c>
1000da80:	d9011d04 	addi	r4,sp,1140
1000da84:	18c00084 	addi	r3,r3,2
1000da88:	41000015 	stw	r4,0(r8)
1000da8c:	01000084 	movi	r4,2
1000da90:	41000115 	stw	r4,4(r8)
1000da94:	d8c11c15 	stw	r3,1136(sp)
1000da98:	d8811b15 	stw	r2,1132(sp)
1000da9c:	010001c4 	movi	r4,7
1000daa0:	20822016 	blt	r4,r2,1000e324 <___vfiprintf_internal_r+0xee0>
1000daa4:	100b883a 	mov	r5,r2
1000daa8:	42000204 	addi	r8,r8,8
1000daac:	10800044 	addi	r2,r2,1
1000dab0:	01002004 	movi	r4,128
1000dab4:	b101de26 	beq	r22,r4,1000e230 <___vfiprintf_internal_r+0xdec>
1000dab8:	8521c83a 	sub	r16,r16,r20
1000dabc:	0400230e 	bge	zero,r16,1000db4c <___vfiprintf_internal_r+0x708>
1000dac0:	04c00404 	movi	r19,16
1000dac4:	9c030d0e 	bge	r19,r16,1000e6fc <___vfiprintf_internal_r+0x12b8>
1000dac8:	00840074 	movhi	r2,4097
1000dacc:	10878204 	addi	r2,r2,7688
1000dad0:	d8812615 	stw	r2,1176(sp)
1000dad4:	058001c4 	movi	r22,7
1000dad8:	00000506 	br	1000daf0 <___vfiprintf_internal_r+0x6ac>
1000dadc:	28800084 	addi	r2,r5,2
1000dae0:	42000204 	addi	r8,r8,8
1000dae4:	200b883a 	mov	r5,r4
1000dae8:	843ffc04 	addi	r16,r16,-16
1000daec:	9c000d0e 	bge	r19,r16,1000db24 <___vfiprintf_internal_r+0x6e0>
1000daf0:	18c00404 	addi	r3,r3,16
1000daf4:	29000044 	addi	r4,r5,1
1000daf8:	44400015 	stw	r17,0(r8)
1000dafc:	44c00115 	stw	r19,4(r8)
1000db00:	d8c11c15 	stw	r3,1136(sp)
1000db04:	d9011b15 	stw	r4,1132(sp)
1000db08:	b13ff40e 	bge	r22,r4,1000dadc <__alt_data_end+0xf800dadc>
1000db0c:	1801321e 	bne	r3,zero,1000dfd8 <___vfiprintf_internal_r+0xb94>
1000db10:	843ffc04 	addi	r16,r16,-16
1000db14:	000b883a 	mov	r5,zero
1000db18:	00800044 	movi	r2,1
1000db1c:	d811883a 	mov	r8,sp
1000db20:	9c3ff316 	blt	r19,r16,1000daf0 <__alt_data_end+0xf800daf0>
1000db24:	d9012617 	ldw	r4,1176(sp)
1000db28:	1c07883a 	add	r3,r3,r16
1000db2c:	44000115 	stw	r16,4(r8)
1000db30:	41000015 	stw	r4,0(r8)
1000db34:	d8c11c15 	stw	r3,1136(sp)
1000db38:	d8811b15 	stw	r2,1132(sp)
1000db3c:	010001c4 	movi	r4,7
1000db40:	20816216 	blt	r4,r2,1000e0cc <___vfiprintf_internal_r+0xc88>
1000db44:	42000204 	addi	r8,r8,8
1000db48:	10800044 	addi	r2,r2,1
1000db4c:	d9012217 	ldw	r4,1160(sp)
1000db50:	1d07883a 	add	r3,r3,r20
1000db54:	45000115 	stw	r20,4(r8)
1000db58:	41000015 	stw	r4,0(r8)
1000db5c:	d8c11c15 	stw	r3,1136(sp)
1000db60:	d8811b15 	stw	r2,1132(sp)
1000db64:	010001c4 	movi	r4,7
1000db68:	2081610e 	bge	r4,r2,1000e0f0 <___vfiprintf_internal_r+0xcac>
1000db6c:	1802211e 	bne	r3,zero,1000e3f4 <___vfiprintf_internal_r+0xfb0>
1000db70:	d8011b15 	stw	zero,1132(sp)
1000db74:	9480010c 	andi	r18,r18,4
1000db78:	9002171e 	bne	r18,zero,1000e3d8 <___vfiprintf_internal_r+0xf94>
1000db7c:	d9412417 	ldw	r5,1168(sp)
1000db80:	a9433716 	blt	r21,r5,1000e860 <___vfiprintf_internal_r+0x141c>
1000db84:	d8812517 	ldw	r2,1172(sp)
1000db88:	1545883a 	add	r2,r2,r21
1000db8c:	d8812515 	stw	r2,1172(sp)
1000db90:	00019a06 	br	1000e1fc <___vfiprintf_internal_r+0xdb8>
1000db94:	d8c12317 	ldw	r3,1164(sp)
1000db98:	05400044 	movi	r21,1
1000db9c:	9811883a 	mov	r8,r19
1000dba0:	18800017 	ldw	r2,0(r3)
1000dba4:	18c00104 	addi	r3,r3,4
1000dba8:	d8c12315 	stw	r3,1164(sp)
1000dbac:	d8c10004 	addi	r3,sp,1024
1000dbb0:	d8011d85 	stb	zero,1142(sp)
1000dbb4:	d8810005 	stb	r2,1024(sp)
1000dbb8:	a829883a 	mov	r20,r21
1000dbbc:	d8c12215 	stw	r3,1160(sp)
1000dbc0:	0021883a 	mov	r16,zero
1000dbc4:	003f7806 	br	1000d9a8 <__alt_data_end+0xf800d9a8>
1000dbc8:	94800414 	ori	r18,r18,16
1000dbcc:	9080080c 	andi	r2,r18,32
1000dbd0:	9811883a 	mov	r8,r19
1000dbd4:	10009026 	beq	r2,zero,1000de18 <___vfiprintf_internal_r+0x9d4>
1000dbd8:	d8812317 	ldw	r2,1164(sp)
1000dbdc:	d8c12317 	ldw	r3,1164(sp)
1000dbe0:	14c00017 	ldw	r19,0(r2)
1000dbe4:	15400117 	ldw	r21,4(r2)
1000dbe8:	18c00204 	addi	r3,r3,8
1000dbec:	d8c12315 	stw	r3,1164(sp)
1000dbf0:	0005883a 	mov	r2,zero
1000dbf4:	9d46b03a 	or	r3,r19,r21
1000dbf8:	d8011d85 	stb	zero,1142(sp)
1000dbfc:	8029883a 	mov	r20,r16
1000dc00:	002d883a 	mov	r22,zero
1000dc04:	003f4606 	br	1000d920 <__alt_data_end+0xf800d920>
1000dc08:	94800414 	ori	r18,r18,16
1000dc0c:	9080080c 	andi	r2,r18,32
1000dc10:	9811883a 	mov	r8,r19
1000dc14:	10006226 	beq	r2,zero,1000dda0 <___vfiprintf_internal_r+0x95c>
1000dc18:	d9012317 	ldw	r4,1164(sp)
1000dc1c:	00800044 	movi	r2,1
1000dc20:	24c00017 	ldw	r19,0(r4)
1000dc24:	25400117 	ldw	r21,4(r4)
1000dc28:	21000204 	addi	r4,r4,8
1000dc2c:	d9012315 	stw	r4,1164(sp)
1000dc30:	9d46b03a 	or	r3,r19,r21
1000dc34:	003ff006 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000dc38:	b9800007 	ldb	r6,0(r23)
1000dc3c:	00801b04 	movi	r2,108
1000dc40:	3082b226 	beq	r6,r2,1000e70c <___vfiprintf_internal_r+0x12c8>
1000dc44:	94800414 	ori	r18,r18,16
1000dc48:	003e5f06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000dc4c:	d8c12203 	ldbu	r3,1160(sp)
1000dc50:	01040074 	movhi	r4,4097
1000dc54:	21071d04 	addi	r4,r4,7284
1000dc58:	d8c11d85 	stb	r3,1142(sp)
1000dc5c:	d9012715 	stw	r4,1180(sp)
1000dc60:	90c0080c 	andi	r3,r18,32
1000dc64:	9811883a 	mov	r8,r19
1000dc68:	d8812317 	ldw	r2,1164(sp)
1000dc6c:	18005f26 	beq	r3,zero,1000ddec <___vfiprintf_internal_r+0x9a8>
1000dc70:	d9012317 	ldw	r4,1164(sp)
1000dc74:	14c00017 	ldw	r19,0(r2)
1000dc78:	15400117 	ldw	r21,4(r2)
1000dc7c:	21000204 	addi	r4,r4,8
1000dc80:	d9012315 	stw	r4,1164(sp)
1000dc84:	9080004c 	andi	r2,r18,1
1000dc88:	1001e226 	beq	r2,zero,1000e414 <___vfiprintf_internal_r+0xfd0>
1000dc8c:	9d46b03a 	or	r3,r19,r21
1000dc90:	18024e26 	beq	r3,zero,1000e5cc <___vfiprintf_internal_r+0x1188>
1000dc94:	00800c04 	movi	r2,48
1000dc98:	d8811d05 	stb	r2,1140(sp)
1000dc9c:	d9811d45 	stb	r6,1141(sp)
1000dca0:	94800094 	ori	r18,r18,2
1000dca4:	00800084 	movi	r2,2
1000dca8:	003fd306 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000dcac:	d9012317 	ldw	r4,1164(sp)
1000dcb0:	d9412317 	ldw	r5,1164(sp)
1000dcb4:	21000017 	ldw	r4,0(r4)
1000dcb8:	28800104 	addi	r2,r5,4
1000dcbc:	d9012415 	stw	r4,1168(sp)
1000dcc0:	203eeb16 	blt	r4,zero,1000d870 <__alt_data_end+0xf800d870>
1000dcc4:	d8812315 	stw	r2,1164(sp)
1000dcc8:	b9800007 	ldb	r6,0(r23)
1000dccc:	003e3e06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000dcd0:	b9800007 	ldb	r6,0(r23)
1000dcd4:	01000a84 	movi	r4,42
1000dcd8:	b8800044 	addi	r2,r23,1
1000dcdc:	3102d226 	beq	r6,r4,1000e828 <___vfiprintf_internal_r+0x13e4>
1000dce0:	35bff404 	addi	r22,r6,-48
1000dce4:	102f883a 	mov	r23,r2
1000dce8:	0021883a 	mov	r16,zero
1000dcec:	adbe3736 	bltu	r21,r22,1000d5cc <__alt_data_end+0xf800d5cc>
1000dcf0:	0009883a 	mov	r4,zero
1000dcf4:	01400284 	movi	r5,10
1000dcf8:	00037040 	call	10003704 <__mulsi3>
1000dcfc:	b9800007 	ldb	r6,0(r23)
1000dd00:	b089883a 	add	r4,r22,r2
1000dd04:	bdc00044 	addi	r23,r23,1
1000dd08:	35bff404 	addi	r22,r6,-48
1000dd0c:	adbff92e 	bgeu	r21,r22,1000dcf4 <__alt_data_end+0xf800dcf4>
1000dd10:	2021883a 	mov	r16,r4
1000dd14:	203e2d0e 	bge	r4,zero,1000d5cc <__alt_data_end+0xf800d5cc>
1000dd18:	043fffc4 	movi	r16,-1
1000dd1c:	003e2b06 	br	1000d5cc <__alt_data_end+0xf800d5cc>
1000dd20:	94801014 	ori	r18,r18,64
1000dd24:	b9800007 	ldb	r6,0(r23)
1000dd28:	003e2706 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000dd2c:	94800814 	ori	r18,r18,32
1000dd30:	b9800007 	ldb	r6,0(r23)
1000dd34:	003e2406 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000dd38:	d9412317 	ldw	r5,1164(sp)
1000dd3c:	d8812317 	ldw	r2,1164(sp)
1000dd40:	d8011d85 	stb	zero,1142(sp)
1000dd44:	29400017 	ldw	r5,0(r5)
1000dd48:	9811883a 	mov	r8,r19
1000dd4c:	14c00104 	addi	r19,r2,4
1000dd50:	d9412215 	stw	r5,1160(sp)
1000dd54:	28029026 	beq	r5,zero,1000e798 <___vfiprintf_internal_r+0x1354>
1000dd58:	d9012217 	ldw	r4,1160(sp)
1000dd5c:	80027616 	blt	r16,zero,1000e738 <___vfiprintf_internal_r+0x12f4>
1000dd60:	000b883a 	mov	r5,zero
1000dd64:	800d883a 	mov	r6,r16
1000dd68:	da012a15 	stw	r8,1192(sp)
1000dd6c:	000b6740 	call	1000b674 <memchr>
1000dd70:	da012a17 	ldw	r8,1192(sp)
1000dd74:	1002a026 	beq	r2,zero,1000e7f8 <___vfiprintf_internal_r+0x13b4>
1000dd78:	d8c12217 	ldw	r3,1160(sp)
1000dd7c:	10e9c83a 	sub	r20,r2,r3
1000dd80:	85023816 	blt	r16,r20,1000e664 <___vfiprintf_internal_r+0x1220>
1000dd84:	dd811d83 	ldbu	r22,1142(sp)
1000dd88:	dcc12315 	stw	r19,1164(sp)
1000dd8c:	0021883a 	mov	r16,zero
1000dd90:	003efd06 	br	1000d988 <__alt_data_end+0xf800d988>
1000dd94:	9080080c 	andi	r2,r18,32
1000dd98:	9811883a 	mov	r8,r19
1000dd9c:	103f9e1e 	bne	r2,zero,1000dc18 <__alt_data_end+0xf800dc18>
1000dda0:	9080040c 	andi	r2,r18,16
1000dda4:	10021726 	beq	r2,zero,1000e604 <___vfiprintf_internal_r+0x11c0>
1000dda8:	d9412317 	ldw	r5,1164(sp)
1000ddac:	002b883a 	mov	r21,zero
1000ddb0:	00800044 	movi	r2,1
1000ddb4:	2cc00017 	ldw	r19,0(r5)
1000ddb8:	29400104 	addi	r5,r5,4
1000ddbc:	d9412315 	stw	r5,1164(sp)
1000ddc0:	9807883a 	mov	r3,r19
1000ddc4:	003f8c06 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000ddc8:	d8c12203 	ldbu	r3,1160(sp)
1000ddcc:	01040074 	movhi	r4,4097
1000ddd0:	21072204 	addi	r4,r4,7304
1000ddd4:	d8c11d85 	stb	r3,1142(sp)
1000ddd8:	d9012715 	stw	r4,1180(sp)
1000dddc:	90c0080c 	andi	r3,r18,32
1000dde0:	9811883a 	mov	r8,r19
1000dde4:	d8812317 	ldw	r2,1164(sp)
1000dde8:	183fa11e 	bne	r3,zero,1000dc70 <__alt_data_end+0xf800dc70>
1000ddec:	90c0040c 	andi	r3,r18,16
1000ddf0:	1801e526 	beq	r3,zero,1000e588 <___vfiprintf_internal_r+0x1144>
1000ddf4:	d9412317 	ldw	r5,1164(sp)
1000ddf8:	14c00017 	ldw	r19,0(r2)
1000ddfc:	002b883a 	mov	r21,zero
1000de00:	29400104 	addi	r5,r5,4
1000de04:	d9412315 	stw	r5,1164(sp)
1000de08:	003f9e06 	br	1000dc84 <__alt_data_end+0xf800dc84>
1000de0c:	9080080c 	andi	r2,r18,32
1000de10:	9811883a 	mov	r8,r19
1000de14:	103f701e 	bne	r2,zero,1000dbd8 <__alt_data_end+0xf800dbd8>
1000de18:	9080040c 	andi	r2,r18,16
1000de1c:	1001ef26 	beq	r2,zero,1000e5dc <___vfiprintf_internal_r+0x1198>
1000de20:	d9012317 	ldw	r4,1164(sp)
1000de24:	002b883a 	mov	r21,zero
1000de28:	0005883a 	mov	r2,zero
1000de2c:	24c00017 	ldw	r19,0(r4)
1000de30:	21000104 	addi	r4,r4,4
1000de34:	d9012315 	stw	r4,1164(sp)
1000de38:	9807883a 	mov	r3,r19
1000de3c:	003f6e06 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000de40:	d8c12317 	ldw	r3,1164(sp)
1000de44:	9811883a 	mov	r8,r19
1000de48:	00800c04 	movi	r2,48
1000de4c:	1cc00017 	ldw	r19,0(r3)
1000de50:	01040074 	movhi	r4,4097
1000de54:	18c00104 	addi	r3,r3,4
1000de58:	d8811d05 	stb	r2,1140(sp)
1000de5c:	21072204 	addi	r4,r4,7304
1000de60:	00801e04 	movi	r2,120
1000de64:	d8811d45 	stb	r2,1141(sp)
1000de68:	d8c12315 	stw	r3,1164(sp)
1000de6c:	002b883a 	mov	r21,zero
1000de70:	94800094 	ori	r18,r18,2
1000de74:	d9012715 	stw	r4,1180(sp)
1000de78:	00800084 	movi	r2,2
1000de7c:	9807883a 	mov	r3,r19
1000de80:	003f5d06 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000de84:	d8c12203 	ldbu	r3,1160(sp)
1000de88:	9080080c 	andi	r2,r18,32
1000de8c:	9811883a 	mov	r8,r19
1000de90:	d8c11d85 	stb	r3,1142(sp)
1000de94:	1001b126 	beq	r2,zero,1000e55c <___vfiprintf_internal_r+0x1118>
1000de98:	d9012317 	ldw	r4,1164(sp)
1000de9c:	d9412517 	ldw	r5,1172(sp)
1000dea0:	20800017 	ldw	r2,0(r4)
1000dea4:	2807d7fa 	srai	r3,r5,31
1000dea8:	21000104 	addi	r4,r4,4
1000deac:	d9012315 	stw	r4,1164(sp)
1000deb0:	11400015 	stw	r5,0(r2)
1000deb4:	10c00115 	stw	r3,4(r2)
1000deb8:	003d9a06 	br	1000d524 <__alt_data_end+0xf800d524>
1000debc:	d8812207 	ldb	r2,1160(sp)
1000dec0:	1001c41e 	bne	r2,zero,1000e5d4 <___vfiprintf_internal_r+0x1190>
1000dec4:	00c00804 	movi	r3,32
1000dec8:	d8c12205 	stb	r3,1160(sp)
1000decc:	b9800007 	ldb	r6,0(r23)
1000ded0:	003dbd06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000ded4:	00c00ac4 	movi	r3,43
1000ded8:	d8c12205 	stb	r3,1160(sp)
1000dedc:	b9800007 	ldb	r6,0(r23)
1000dee0:	003db906 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000dee4:	d8c12203 	ldbu	r3,1160(sp)
1000dee8:	9080080c 	andi	r2,r18,32
1000deec:	9811883a 	mov	r8,r19
1000def0:	d8c11d85 	stb	r3,1142(sp)
1000def4:	d8c12317 	ldw	r3,1164(sp)
1000def8:	103e7e1e 	bne	r2,zero,1000d8f4 <__alt_data_end+0xf800d8f4>
1000defc:	9080040c 	andi	r2,r18,16
1000df00:	1001a926 	beq	r2,zero,1000e5a8 <___vfiprintf_internal_r+0x1164>
1000df04:	1cc00017 	ldw	r19,0(r3)
1000df08:	d9412317 	ldw	r5,1164(sp)
1000df0c:	982bd7fa 	srai	r21,r19,31
1000df10:	29400104 	addi	r5,r5,4
1000df14:	d9412315 	stw	r5,1164(sp)
1000df18:	a805883a 	mov	r2,r21
1000df1c:	003e7b06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000df20:	94800054 	ori	r18,r18,1
1000df24:	b9800007 	ldb	r6,0(r23)
1000df28:	003da706 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000df2c:	d8c12203 	ldbu	r3,1160(sp)
1000df30:	9811883a 	mov	r8,r19
1000df34:	d8c11d85 	stb	r3,1142(sp)
1000df38:	30005826 	beq	r6,zero,1000e09c <___vfiprintf_internal_r+0xc58>
1000df3c:	05400044 	movi	r21,1
1000df40:	d8c10004 	addi	r3,sp,1024
1000df44:	d9810005 	stb	r6,1024(sp)
1000df48:	d8011d85 	stb	zero,1142(sp)
1000df4c:	a829883a 	mov	r20,r21
1000df50:	d8c12215 	stw	r3,1160(sp)
1000df54:	003f1a06 	br	1000dbc0 <__alt_data_end+0xf800dbc0>
1000df58:	d9012117 	ldw	r4,1156(sp)
1000df5c:	d9412017 	ldw	r5,1152(sp)
1000df60:	d9811a04 	addi	r6,sp,1128
1000df64:	d9c12a15 	stw	r7,1192(sp)
1000df68:	db012b15 	stw	r12,1196(sp)
1000df6c:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000df70:	d9c12a17 	ldw	r7,1192(sp)
1000df74:	db012b17 	ldw	r12,1196(sp)
1000df78:	10004e1e 	bne	r2,zero,1000e0b4 <___vfiprintf_internal_r+0xc70>
1000df7c:	d9011b17 	ldw	r4,1132(sp)
1000df80:	d8c11c17 	ldw	r3,1136(sp)
1000df84:	d811883a 	mov	r8,sp
1000df88:	21400044 	addi	r5,r4,1
1000df8c:	003e9d06 	br	1000da04 <__alt_data_end+0xf800da04>
1000df90:	d9411b17 	ldw	r5,1132(sp)
1000df94:	d8c11c17 	ldw	r3,1136(sp)
1000df98:	28800044 	addi	r2,r5,1
1000df9c:	d9011d87 	ldb	r4,1142(sp)
1000dfa0:	203eb626 	beq	r4,zero,1000da7c <__alt_data_end+0xf800da7c>
1000dfa4:	01000044 	movi	r4,1
1000dfa8:	d9411d84 	addi	r5,sp,1142
1000dfac:	1907883a 	add	r3,r3,r4
1000dfb0:	41400015 	stw	r5,0(r8)
1000dfb4:	41000115 	stw	r4,4(r8)
1000dfb8:	d8c11c15 	stw	r3,1136(sp)
1000dfbc:	d8811b15 	stw	r2,1132(sp)
1000dfc0:	014001c4 	movi	r5,7
1000dfc4:	2880ce16 	blt	r5,r2,1000e300 <___vfiprintf_internal_r+0xebc>
1000dfc8:	100b883a 	mov	r5,r2
1000dfcc:	42000204 	addi	r8,r8,8
1000dfd0:	10800044 	addi	r2,r2,1
1000dfd4:	003ea906 	br	1000da7c <__alt_data_end+0xf800da7c>
1000dfd8:	d9012117 	ldw	r4,1156(sp)
1000dfdc:	d9412017 	ldw	r5,1152(sp)
1000dfe0:	d9811a04 	addi	r6,sp,1128
1000dfe4:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000dfe8:	1000321e 	bne	r2,zero,1000e0b4 <___vfiprintf_internal_r+0xc70>
1000dfec:	d9411b17 	ldw	r5,1132(sp)
1000dff0:	d8c11c17 	ldw	r3,1136(sp)
1000dff4:	d811883a 	mov	r8,sp
1000dff8:	28800044 	addi	r2,r5,1
1000dffc:	003eba06 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000e000:	10803fcc 	andi	r2,r2,255
1000e004:	00c00044 	movi	r3,1
1000e008:	10fe4d1e 	bne	r2,r3,1000d940 <__alt_data_end+0xf800d940>
1000e00c:	a800021e 	bne	r21,zero,1000e018 <___vfiprintf_internal_r+0xbd4>
1000e010:	00800244 	movi	r2,9
1000e014:	14c01b2e 	bgeu	r2,r19,1000e084 <___vfiprintf_internal_r+0xc40>
1000e018:	dc012215 	stw	r16,1160(sp)
1000e01c:	dd010a04 	addi	r20,sp,1064
1000e020:	a821883a 	mov	r16,r21
1000e024:	402b883a 	mov	r21,r8
1000e028:	9809883a 	mov	r4,r19
1000e02c:	800b883a 	mov	r5,r16
1000e030:	01800284 	movi	r6,10
1000e034:	000f883a 	mov	r7,zero
1000e038:	0002fbc0 	call	10002fbc <__umoddi3>
1000e03c:	10800c04 	addi	r2,r2,48
1000e040:	a53fffc4 	addi	r20,r20,-1
1000e044:	9809883a 	mov	r4,r19
1000e048:	800b883a 	mov	r5,r16
1000e04c:	01800284 	movi	r6,10
1000e050:	000f883a 	mov	r7,zero
1000e054:	a0800005 	stb	r2,0(r20)
1000e058:	000297c0 	call	1000297c <__udivdi3>
1000e05c:	1027883a 	mov	r19,r2
1000e060:	10c4b03a 	or	r2,r2,r3
1000e064:	1821883a 	mov	r16,r3
1000e068:	103fef1e 	bne	r2,zero,1000e028 <__alt_data_end+0xf800e028>
1000e06c:	d9011e17 	ldw	r4,1144(sp)
1000e070:	dc012217 	ldw	r16,1160(sp)
1000e074:	a811883a 	mov	r8,r21
1000e078:	dd012215 	stw	r20,1160(sp)
1000e07c:	2529c83a 	sub	r20,r4,r20
1000e080:	003e4106 	br	1000d988 <__alt_data_end+0xf800d988>
1000e084:	9cc00c04 	addi	r19,r19,48
1000e088:	d8c109c4 	addi	r3,sp,1063
1000e08c:	dcc109c5 	stb	r19,1063(sp)
1000e090:	dd012817 	ldw	r20,1184(sp)
1000e094:	d8c12215 	stw	r3,1160(sp)
1000e098:	003e3b06 	br	1000d988 <__alt_data_end+0xf800d988>
1000e09c:	d8811c17 	ldw	r2,1136(sp)
1000e0a0:	10000426 	beq	r2,zero,1000e0b4 <___vfiprintf_internal_r+0xc70>
1000e0a4:	d9012117 	ldw	r4,1156(sp)
1000e0a8:	d9412017 	ldw	r5,1152(sp)
1000e0ac:	d9811a04 	addi	r6,sp,1128
1000e0b0:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e0b4:	d9412017 	ldw	r5,1152(sp)
1000e0b8:	2880030b 	ldhu	r2,12(r5)
1000e0bc:	1080100c 	andi	r2,r2,64
1000e0c0:	103ddc1e 	bne	r2,zero,1000d834 <__alt_data_end+0xf800d834>
1000e0c4:	d8812517 	ldw	r2,1172(sp)
1000e0c8:	003ddb06 	br	1000d838 <__alt_data_end+0xf800d838>
1000e0cc:	1801061e 	bne	r3,zero,1000e4e8 <___vfiprintf_internal_r+0x10a4>
1000e0d0:	d8c12217 	ldw	r3,1160(sp)
1000e0d4:	00800044 	movi	r2,1
1000e0d8:	dd000115 	stw	r20,4(sp)
1000e0dc:	d8c00015 	stw	r3,0(sp)
1000e0e0:	dd011c15 	stw	r20,1136(sp)
1000e0e4:	d8811b15 	stw	r2,1132(sp)
1000e0e8:	a007883a 	mov	r3,r20
1000e0ec:	d811883a 	mov	r8,sp
1000e0f0:	42000204 	addi	r8,r8,8
1000e0f4:	9480010c 	andi	r18,r18,4
1000e0f8:	90003426 	beq	r18,zero,1000e1cc <___vfiprintf_internal_r+0xd88>
1000e0fc:	d9412417 	ldw	r5,1168(sp)
1000e100:	2d65c83a 	sub	r18,r5,r21
1000e104:	0480310e 	bge	zero,r18,1000e1cc <___vfiprintf_internal_r+0xd88>
1000e108:	04000404 	movi	r16,16
1000e10c:	8481ad0e 	bge	r16,r18,1000e7c4 <___vfiprintf_internal_r+0x1380>
1000e110:	01440074 	movhi	r5,4097
1000e114:	29478604 	addi	r5,r5,7704
1000e118:	d9011b17 	ldw	r4,1132(sp)
1000e11c:	d9412615 	stw	r5,1176(sp)
1000e120:	04c001c4 	movi	r19,7
1000e124:	dd012117 	ldw	r20,1156(sp)
1000e128:	dd812017 	ldw	r22,1152(sp)
1000e12c:	00000506 	br	1000e144 <___vfiprintf_internal_r+0xd00>
1000e130:	21400084 	addi	r5,r4,2
1000e134:	42000204 	addi	r8,r8,8
1000e138:	1009883a 	mov	r4,r2
1000e13c:	94bffc04 	addi	r18,r18,-16
1000e140:	84800d0e 	bge	r16,r18,1000e178 <___vfiprintf_internal_r+0xd34>
1000e144:	18c00404 	addi	r3,r3,16
1000e148:	20800044 	addi	r2,r4,1
1000e14c:	47000015 	stw	fp,0(r8)
1000e150:	44000115 	stw	r16,4(r8)
1000e154:	d8c11c15 	stw	r3,1136(sp)
1000e158:	d8811b15 	stw	r2,1132(sp)
1000e15c:	98bff40e 	bge	r19,r2,1000e130 <__alt_data_end+0xf800e130>
1000e160:	1800291e 	bne	r3,zero,1000e208 <___vfiprintf_internal_r+0xdc4>
1000e164:	94bffc04 	addi	r18,r18,-16
1000e168:	0009883a 	mov	r4,zero
1000e16c:	01400044 	movi	r5,1
1000e170:	d811883a 	mov	r8,sp
1000e174:	84bff316 	blt	r16,r18,1000e144 <__alt_data_end+0xf800e144>
1000e178:	d8812617 	ldw	r2,1176(sp)
1000e17c:	1c87883a 	add	r3,r3,r18
1000e180:	44800115 	stw	r18,4(r8)
1000e184:	40800015 	stw	r2,0(r8)
1000e188:	d8c11c15 	stw	r3,1136(sp)
1000e18c:	d9411b15 	stw	r5,1132(sp)
1000e190:	008001c4 	movi	r2,7
1000e194:	11400d0e 	bge	r2,r5,1000e1cc <___vfiprintf_internal_r+0xd88>
1000e198:	1800061e 	bne	r3,zero,1000e1b4 <___vfiprintf_internal_r+0xd70>
1000e19c:	d8c12417 	ldw	r3,1168(sp)
1000e1a0:	a8c12e16 	blt	r21,r3,1000e65c <___vfiprintf_internal_r+0x1218>
1000e1a4:	d9012517 	ldw	r4,1172(sp)
1000e1a8:	2549883a 	add	r4,r4,r21
1000e1ac:	d9012515 	stw	r4,1172(sp)
1000e1b0:	00001206 	br	1000e1fc <___vfiprintf_internal_r+0xdb8>
1000e1b4:	d9012117 	ldw	r4,1156(sp)
1000e1b8:	d9412017 	ldw	r5,1152(sp)
1000e1bc:	d9811a04 	addi	r6,sp,1128
1000e1c0:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e1c4:	103fbb1e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e1c8:	d8c11c17 	ldw	r3,1136(sp)
1000e1cc:	d8812417 	ldw	r2,1168(sp)
1000e1d0:	a880010e 	bge	r21,r2,1000e1d8 <___vfiprintf_internal_r+0xd94>
1000e1d4:	102b883a 	mov	r21,r2
1000e1d8:	d9012517 	ldw	r4,1172(sp)
1000e1dc:	2549883a 	add	r4,r4,r21
1000e1e0:	d9012515 	stw	r4,1172(sp)
1000e1e4:	18000526 	beq	r3,zero,1000e1fc <___vfiprintf_internal_r+0xdb8>
1000e1e8:	d9012117 	ldw	r4,1156(sp)
1000e1ec:	d9412017 	ldw	r5,1152(sp)
1000e1f0:	d9811a04 	addi	r6,sp,1128
1000e1f4:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e1f8:	103fae1e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e1fc:	d8011b15 	stw	zero,1132(sp)
1000e200:	d811883a 	mov	r8,sp
1000e204:	003cc706 	br	1000d524 <__alt_data_end+0xf800d524>
1000e208:	a009883a 	mov	r4,r20
1000e20c:	b00b883a 	mov	r5,r22
1000e210:	d9811a04 	addi	r6,sp,1128
1000e214:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e218:	103fa61e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e21c:	d9011b17 	ldw	r4,1132(sp)
1000e220:	d8c11c17 	ldw	r3,1136(sp)
1000e224:	d811883a 	mov	r8,sp
1000e228:	21400044 	addi	r5,r4,1
1000e22c:	003fc306 	br	1000e13c <__alt_data_end+0xf800e13c>
1000e230:	d9012417 	ldw	r4,1168(sp)
1000e234:	256dc83a 	sub	r22,r4,r21
1000e238:	05be1f0e 	bge	zero,r22,1000dab8 <__alt_data_end+0xf800dab8>
1000e23c:	04c00404 	movi	r19,16
1000e240:	9d81720e 	bge	r19,r22,1000e80c <___vfiprintf_internal_r+0x13c8>
1000e244:	00840074 	movhi	r2,4097
1000e248:	10878204 	addi	r2,r2,7688
1000e24c:	d8812615 	stw	r2,1176(sp)
1000e250:	028001c4 	movi	r10,7
1000e254:	00000506 	br	1000e26c <___vfiprintf_internal_r+0xe28>
1000e258:	29000084 	addi	r4,r5,2
1000e25c:	42000204 	addi	r8,r8,8
1000e260:	100b883a 	mov	r5,r2
1000e264:	b5bffc04 	addi	r22,r22,-16
1000e268:	9d800d0e 	bge	r19,r22,1000e2a0 <___vfiprintf_internal_r+0xe5c>
1000e26c:	18c00404 	addi	r3,r3,16
1000e270:	28800044 	addi	r2,r5,1
1000e274:	44400015 	stw	r17,0(r8)
1000e278:	44c00115 	stw	r19,4(r8)
1000e27c:	d8c11c15 	stw	r3,1136(sp)
1000e280:	d8811b15 	stw	r2,1132(sp)
1000e284:	50bff40e 	bge	r10,r2,1000e258 <__alt_data_end+0xf800e258>
1000e288:	1800111e 	bne	r3,zero,1000e2d0 <___vfiprintf_internal_r+0xe8c>
1000e28c:	b5bffc04 	addi	r22,r22,-16
1000e290:	000b883a 	mov	r5,zero
1000e294:	01000044 	movi	r4,1
1000e298:	d811883a 	mov	r8,sp
1000e29c:	9dbff316 	blt	r19,r22,1000e26c <__alt_data_end+0xf800e26c>
1000e2a0:	d9412617 	ldw	r5,1176(sp)
1000e2a4:	1d87883a 	add	r3,r3,r22
1000e2a8:	45800115 	stw	r22,4(r8)
1000e2ac:	41400015 	stw	r5,0(r8)
1000e2b0:	d8c11c15 	stw	r3,1136(sp)
1000e2b4:	d9011b15 	stw	r4,1132(sp)
1000e2b8:	008001c4 	movi	r2,7
1000e2bc:	11008516 	blt	r2,r4,1000e4d4 <___vfiprintf_internal_r+0x1090>
1000e2c0:	42000204 	addi	r8,r8,8
1000e2c4:	20800044 	addi	r2,r4,1
1000e2c8:	200b883a 	mov	r5,r4
1000e2cc:	003dfa06 	br	1000dab8 <__alt_data_end+0xf800dab8>
1000e2d0:	d9012117 	ldw	r4,1156(sp)
1000e2d4:	d9412017 	ldw	r5,1152(sp)
1000e2d8:	d9811a04 	addi	r6,sp,1128
1000e2dc:	da812a15 	stw	r10,1192(sp)
1000e2e0:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e2e4:	da812a17 	ldw	r10,1192(sp)
1000e2e8:	103f721e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e2ec:	d9411b17 	ldw	r5,1132(sp)
1000e2f0:	d8c11c17 	ldw	r3,1136(sp)
1000e2f4:	d811883a 	mov	r8,sp
1000e2f8:	29000044 	addi	r4,r5,1
1000e2fc:	003fd906 	br	1000e264 <__alt_data_end+0xf800e264>
1000e300:	1800681e 	bne	r3,zero,1000e4a4 <___vfiprintf_internal_r+0x1060>
1000e304:	50004d26 	beq	r10,zero,1000e43c <___vfiprintf_internal_r+0xff8>
1000e308:	d8811d04 	addi	r2,sp,1140
1000e30c:	00c00084 	movi	r3,2
1000e310:	d8800015 	stw	r2,0(sp)
1000e314:	d8c00115 	stw	r3,4(sp)
1000e318:	2005883a 	mov	r2,r4
1000e31c:	d811883a 	mov	r8,sp
1000e320:	003de006 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e324:	1800551e 	bne	r3,zero,1000e47c <___vfiprintf_internal_r+0x1038>
1000e328:	000b883a 	mov	r5,zero
1000e32c:	00800044 	movi	r2,1
1000e330:	d811883a 	mov	r8,sp
1000e334:	003dde06 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000e338:	10803fcc 	andi	r2,r2,255
1000e33c:	1000191e 	bne	r2,zero,1000e3a4 <___vfiprintf_internal_r+0xf60>
1000e340:	9080004c 	andi	r2,r18,1
1000e344:	10001726 	beq	r2,zero,1000e3a4 <___vfiprintf_internal_r+0xf60>
1000e348:	00800c04 	movi	r2,48
1000e34c:	d8c109c4 	addi	r3,sp,1063
1000e350:	d88109c5 	stb	r2,1063(sp)
1000e354:	dd012817 	ldw	r20,1184(sp)
1000e358:	d8c12215 	stw	r3,1160(sp)
1000e35c:	003d8a06 	br	1000d988 <__alt_data_end+0xf800d988>
1000e360:	d9012717 	ldw	r4,1180(sp)
1000e364:	dd010a04 	addi	r20,sp,1064
1000e368:	988003cc 	andi	r2,r19,15
1000e36c:	a806973a 	slli	r3,r21,28
1000e370:	2085883a 	add	r2,r4,r2
1000e374:	9826d13a 	srli	r19,r19,4
1000e378:	10800003 	ldbu	r2,0(r2)
1000e37c:	a82ad13a 	srli	r21,r21,4
1000e380:	a53fffc4 	addi	r20,r20,-1
1000e384:	1ce6b03a 	or	r19,r3,r19
1000e388:	a0800005 	stb	r2,0(r20)
1000e38c:	9d44b03a 	or	r2,r19,r21
1000e390:	103ff51e 	bne	r2,zero,1000e368 <__alt_data_end+0xf800e368>
1000e394:	d9411e17 	ldw	r5,1144(sp)
1000e398:	dd012215 	stw	r20,1160(sp)
1000e39c:	2d29c83a 	sub	r20,r5,r20
1000e3a0:	003d7906 	br	1000d988 <__alt_data_end+0xf800d988>
1000e3a4:	d8c10a04 	addi	r3,sp,1064
1000e3a8:	d8c12215 	stw	r3,1160(sp)
1000e3ac:	003d7606 	br	1000d988 <__alt_data_end+0xf800d988>
1000e3b0:	18009e1e 	bne	r3,zero,1000e62c <___vfiprintf_internal_r+0x11e8>
1000e3b4:	d8811d87 	ldb	r2,1142(sp)
1000e3b8:	10005f26 	beq	r2,zero,1000e538 <___vfiprintf_internal_r+0x10f4>
1000e3bc:	00c00044 	movi	r3,1
1000e3c0:	d9011d84 	addi	r4,sp,1142
1000e3c4:	1805883a 	mov	r2,r3
1000e3c8:	d9000015 	stw	r4,0(sp)
1000e3cc:	d8c00115 	stw	r3,4(sp)
1000e3d0:	d811883a 	mov	r8,sp
1000e3d4:	003efc06 	br	1000dfc8 <__alt_data_end+0xf800dfc8>
1000e3d8:	d9412417 	ldw	r5,1168(sp)
1000e3dc:	d811883a 	mov	r8,sp
1000e3e0:	2d65c83a 	sub	r18,r5,r21
1000e3e4:	04bf4816 	blt	zero,r18,1000e108 <__alt_data_end+0xf800e108>
1000e3e8:	003f6c06 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e3ec:	b829883a 	mov	r20,r23
1000e3f0:	003c6906 	br	1000d598 <__alt_data_end+0xf800d598>
1000e3f4:	d9012117 	ldw	r4,1156(sp)
1000e3f8:	d9412017 	ldw	r5,1152(sp)
1000e3fc:	d9811a04 	addi	r6,sp,1128
1000e400:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e404:	103f2b1e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e408:	d8c11c17 	ldw	r3,1136(sp)
1000e40c:	d811883a 	mov	r8,sp
1000e410:	003f3806 	br	1000e0f4 <__alt_data_end+0xf800e0f4>
1000e414:	00800084 	movi	r2,2
1000e418:	9d46b03a 	or	r3,r19,r21
1000e41c:	003df606 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000e420:	d9012117 	ldw	r4,1156(sp)
1000e424:	d9412017 	ldw	r5,1152(sp)
1000e428:	d9811a04 	addi	r6,sp,1128
1000e42c:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e430:	103f201e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e434:	d811883a 	mov	r8,sp
1000e438:	003cc606 	br	1000d754 <__alt_data_end+0xf800d754>
1000e43c:	000b883a 	mov	r5,zero
1000e440:	2005883a 	mov	r2,r4
1000e444:	d811883a 	mov	r8,sp
1000e448:	003d9906 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000e44c:	10803fcc 	andi	r2,r2,255
1000e450:	1080201c 	xori	r2,r2,128
1000e454:	10bfe004 	addi	r2,r2,-128
1000e458:	01000c04 	movi	r4,48
1000e45c:	1100b226 	beq	r2,r4,1000e728 <___vfiprintf_internal_r+0x12e4>
1000e460:	d9412217 	ldw	r5,1160(sp)
1000e464:	d8811e17 	ldw	r2,1144(sp)
1000e468:	193fffc5 	stb	r4,-1(r3)
1000e46c:	297fffc4 	addi	r5,r5,-1
1000e470:	d9412215 	stw	r5,1160(sp)
1000e474:	1169c83a 	sub	r20,r2,r5
1000e478:	003d4306 	br	1000d988 <__alt_data_end+0xf800d988>
1000e47c:	d9012117 	ldw	r4,1156(sp)
1000e480:	d9412017 	ldw	r5,1152(sp)
1000e484:	d9811a04 	addi	r6,sp,1128
1000e488:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e48c:	103f091e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e490:	d9411b17 	ldw	r5,1132(sp)
1000e494:	d8c11c17 	ldw	r3,1136(sp)
1000e498:	d811883a 	mov	r8,sp
1000e49c:	28800044 	addi	r2,r5,1
1000e4a0:	003d8306 	br	1000dab0 <__alt_data_end+0xf800dab0>
1000e4a4:	d9012117 	ldw	r4,1156(sp)
1000e4a8:	d9412017 	ldw	r5,1152(sp)
1000e4ac:	d9811a04 	addi	r6,sp,1128
1000e4b0:	da812a15 	stw	r10,1192(sp)
1000e4b4:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e4b8:	da812a17 	ldw	r10,1192(sp)
1000e4bc:	103efd1e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e4c0:	d9411b17 	ldw	r5,1132(sp)
1000e4c4:	d8c11c17 	ldw	r3,1136(sp)
1000e4c8:	d811883a 	mov	r8,sp
1000e4cc:	28800044 	addi	r2,r5,1
1000e4d0:	003d6a06 	br	1000da7c <__alt_data_end+0xf800da7c>
1000e4d4:	1800a01e 	bne	r3,zero,1000e758 <___vfiprintf_internal_r+0x1314>
1000e4d8:	000b883a 	mov	r5,zero
1000e4dc:	00800044 	movi	r2,1
1000e4e0:	d811883a 	mov	r8,sp
1000e4e4:	003d7406 	br	1000dab8 <__alt_data_end+0xf800dab8>
1000e4e8:	d9012117 	ldw	r4,1156(sp)
1000e4ec:	d9412017 	ldw	r5,1152(sp)
1000e4f0:	d9811a04 	addi	r6,sp,1128
1000e4f4:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e4f8:	103eee1e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e4fc:	d8811b17 	ldw	r2,1132(sp)
1000e500:	d8c11c17 	ldw	r3,1136(sp)
1000e504:	d811883a 	mov	r8,sp
1000e508:	10800044 	addi	r2,r2,1
1000e50c:	003d8f06 	br	1000db4c <__alt_data_end+0xf800db4c>
1000e510:	04e7c83a 	sub	r19,zero,r19
1000e514:	9804c03a 	cmpne	r2,r19,zero
1000e518:	056bc83a 	sub	r21,zero,r21
1000e51c:	a8abc83a 	sub	r21,r21,r2
1000e520:	05800b44 	movi	r22,45
1000e524:	dd811d85 	stb	r22,1142(sp)
1000e528:	8029883a 	mov	r20,r16
1000e52c:	00800044 	movi	r2,1
1000e530:	9d46b03a 	or	r3,r19,r21
1000e534:	003cfa06 	br	1000d920 <__alt_data_end+0xf800d920>
1000e538:	000b883a 	mov	r5,zero
1000e53c:	00800044 	movi	r2,1
1000e540:	d811883a 	mov	r8,sp
1000e544:	503d5a26 	beq	r10,zero,1000dab0 <__alt_data_end+0xf800dab0>
1000e548:	00c00084 	movi	r3,2
1000e54c:	d9011d04 	addi	r4,sp,1140
1000e550:	d9000015 	stw	r4,0(sp)
1000e554:	d8c00115 	stw	r3,4(sp)
1000e558:	003d5206 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e55c:	9080040c 	andi	r2,r18,16
1000e560:	1000421e 	bne	r2,zero,1000e66c <___vfiprintf_internal_r+0x1228>
1000e564:	9480100c 	andi	r18,r18,64
1000e568:	90009c26 	beq	r18,zero,1000e7dc <___vfiprintf_internal_r+0x1398>
1000e56c:	d9412317 	ldw	r5,1164(sp)
1000e570:	d8c12517 	ldw	r3,1172(sp)
1000e574:	28800017 	ldw	r2,0(r5)
1000e578:	29400104 	addi	r5,r5,4
1000e57c:	d9412315 	stw	r5,1164(sp)
1000e580:	10c0000d 	sth	r3,0(r2)
1000e584:	003be706 	br	1000d524 <__alt_data_end+0xf800d524>
1000e588:	90c0100c 	andi	r3,r18,64
1000e58c:	18003e26 	beq	r3,zero,1000e688 <___vfiprintf_internal_r+0x1244>
1000e590:	d8c12317 	ldw	r3,1164(sp)
1000e594:	14c0000b 	ldhu	r19,0(r2)
1000e598:	002b883a 	mov	r21,zero
1000e59c:	18c00104 	addi	r3,r3,4
1000e5a0:	d8c12315 	stw	r3,1164(sp)
1000e5a4:	003db706 	br	1000dc84 <__alt_data_end+0xf800dc84>
1000e5a8:	9080100c 	andi	r2,r18,64
1000e5ac:	10004c26 	beq	r2,zero,1000e6e0 <___vfiprintf_internal_r+0x129c>
1000e5b0:	1cc0000f 	ldh	r19,0(r3)
1000e5b4:	d8812317 	ldw	r2,1164(sp)
1000e5b8:	982bd7fa 	srai	r21,r19,31
1000e5bc:	10800104 	addi	r2,r2,4
1000e5c0:	d8812315 	stw	r2,1164(sp)
1000e5c4:	a805883a 	mov	r2,r21
1000e5c8:	003cd006 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e5cc:	00800084 	movi	r2,2
1000e5d0:	003d8906 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000e5d4:	b9800007 	ldb	r6,0(r23)
1000e5d8:	003bfb06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000e5dc:	9080100c 	andi	r2,r18,64
1000e5e0:	10003726 	beq	r2,zero,1000e6c0 <___vfiprintf_internal_r+0x127c>
1000e5e4:	d9412317 	ldw	r5,1164(sp)
1000e5e8:	002b883a 	mov	r21,zero
1000e5ec:	0005883a 	mov	r2,zero
1000e5f0:	2cc0000b 	ldhu	r19,0(r5)
1000e5f4:	29400104 	addi	r5,r5,4
1000e5f8:	d9412315 	stw	r5,1164(sp)
1000e5fc:	9807883a 	mov	r3,r19
1000e600:	003d7d06 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000e604:	9080100c 	andi	r2,r18,64
1000e608:	10002526 	beq	r2,zero,1000e6a0 <___vfiprintf_internal_r+0x125c>
1000e60c:	d8812317 	ldw	r2,1164(sp)
1000e610:	002b883a 	mov	r21,zero
1000e614:	14c0000b 	ldhu	r19,0(r2)
1000e618:	10800104 	addi	r2,r2,4
1000e61c:	d8812315 	stw	r2,1164(sp)
1000e620:	9807883a 	mov	r3,r19
1000e624:	00800044 	movi	r2,1
1000e628:	003d7306 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000e62c:	d9012117 	ldw	r4,1156(sp)
1000e630:	d9412017 	ldw	r5,1152(sp)
1000e634:	d9811a04 	addi	r6,sp,1128
1000e638:	da812a15 	stw	r10,1192(sp)
1000e63c:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e640:	da812a17 	ldw	r10,1192(sp)
1000e644:	103e9b1e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e648:	d9411b17 	ldw	r5,1132(sp)
1000e64c:	d8c11c17 	ldw	r3,1136(sp)
1000e650:	d811883a 	mov	r8,sp
1000e654:	28800044 	addi	r2,r5,1
1000e658:	003e5006 	br	1000df9c <__alt_data_end+0xf800df9c>
1000e65c:	182b883a 	mov	r21,r3
1000e660:	003ed006 	br	1000e1a4 <__alt_data_end+0xf800e1a4>
1000e664:	8029883a 	mov	r20,r16
1000e668:	003dc606 	br	1000dd84 <__alt_data_end+0xf800dd84>
1000e66c:	d8c12317 	ldw	r3,1164(sp)
1000e670:	d9012517 	ldw	r4,1172(sp)
1000e674:	18800017 	ldw	r2,0(r3)
1000e678:	18c00104 	addi	r3,r3,4
1000e67c:	d8c12315 	stw	r3,1164(sp)
1000e680:	11000015 	stw	r4,0(r2)
1000e684:	003ba706 	br	1000d524 <__alt_data_end+0xf800d524>
1000e688:	d9012317 	ldw	r4,1164(sp)
1000e68c:	14c00017 	ldw	r19,0(r2)
1000e690:	002b883a 	mov	r21,zero
1000e694:	21000104 	addi	r4,r4,4
1000e698:	d9012315 	stw	r4,1164(sp)
1000e69c:	003d7906 	br	1000dc84 <__alt_data_end+0xf800dc84>
1000e6a0:	d8c12317 	ldw	r3,1164(sp)
1000e6a4:	002b883a 	mov	r21,zero
1000e6a8:	00800044 	movi	r2,1
1000e6ac:	1cc00017 	ldw	r19,0(r3)
1000e6b0:	18c00104 	addi	r3,r3,4
1000e6b4:	d8c12315 	stw	r3,1164(sp)
1000e6b8:	9807883a 	mov	r3,r19
1000e6bc:	003d4e06 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000e6c0:	d8812317 	ldw	r2,1164(sp)
1000e6c4:	002b883a 	mov	r21,zero
1000e6c8:	14c00017 	ldw	r19,0(r2)
1000e6cc:	10800104 	addi	r2,r2,4
1000e6d0:	d8812315 	stw	r2,1164(sp)
1000e6d4:	9807883a 	mov	r3,r19
1000e6d8:	0005883a 	mov	r2,zero
1000e6dc:	003d4606 	br	1000dbf8 <__alt_data_end+0xf800dbf8>
1000e6e0:	1cc00017 	ldw	r19,0(r3)
1000e6e4:	d8c12317 	ldw	r3,1164(sp)
1000e6e8:	982bd7fa 	srai	r21,r19,31
1000e6ec:	18c00104 	addi	r3,r3,4
1000e6f0:	d8c12315 	stw	r3,1164(sp)
1000e6f4:	a805883a 	mov	r2,r21
1000e6f8:	003c8406 	br	1000d90c <__alt_data_end+0xf800d90c>
1000e6fc:	01040074 	movhi	r4,4097
1000e700:	21078204 	addi	r4,r4,7688
1000e704:	d9012615 	stw	r4,1176(sp)
1000e708:	003d0606 	br	1000db24 <__alt_data_end+0xf800db24>
1000e70c:	b9800043 	ldbu	r6,1(r23)
1000e710:	94800814 	ori	r18,r18,32
1000e714:	bdc00044 	addi	r23,r23,1
1000e718:	31803fcc 	andi	r6,r6,255
1000e71c:	3180201c 	xori	r6,r6,128
1000e720:	31bfe004 	addi	r6,r6,-128
1000e724:	003ba806 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000e728:	d8811e17 	ldw	r2,1144(sp)
1000e72c:	d8c12217 	ldw	r3,1160(sp)
1000e730:	10e9c83a 	sub	r20,r2,r3
1000e734:	003c9406 	br	1000d988 <__alt_data_end+0xf800d988>
1000e738:	da012a15 	stw	r8,1192(sp)
1000e73c:	0005fc80 	call	10005fc8 <strlen>
1000e740:	1029883a 	mov	r20,r2
1000e744:	dd811d83 	ldbu	r22,1142(sp)
1000e748:	dcc12315 	stw	r19,1164(sp)
1000e74c:	0021883a 	mov	r16,zero
1000e750:	da012a17 	ldw	r8,1192(sp)
1000e754:	003c8c06 	br	1000d988 <__alt_data_end+0xf800d988>
1000e758:	d9012117 	ldw	r4,1156(sp)
1000e75c:	d9412017 	ldw	r5,1152(sp)
1000e760:	d9811a04 	addi	r6,sp,1128
1000e764:	000d3300 	call	1000d330 <__sprint_r.part.0>
1000e768:	103e521e 	bne	r2,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e76c:	d9411b17 	ldw	r5,1132(sp)
1000e770:	d8c11c17 	ldw	r3,1136(sp)
1000e774:	d811883a 	mov	r8,sp
1000e778:	28800044 	addi	r2,r5,1
1000e77c:	003cce06 	br	1000dab8 <__alt_data_end+0xf800dab8>
1000e780:	01440074 	movhi	r5,4097
1000e784:	29478604 	addi	r5,r5,7704
1000e788:	d9412615 	stw	r5,1176(sp)
1000e78c:	d9411b17 	ldw	r5,1132(sp)
1000e790:	29400044 	addi	r5,r5,1
1000e794:	003cad06 	br	1000da4c <__alt_data_end+0xf800da4c>
1000e798:	00800184 	movi	r2,6
1000e79c:	1400012e 	bgeu	r2,r16,1000e7a4 <___vfiprintf_internal_r+0x1360>
1000e7a0:	1021883a 	mov	r16,r2
1000e7a4:	8029883a 	mov	r20,r16
1000e7a8:	802b883a 	mov	r21,r16
1000e7ac:	80001c16 	blt	r16,zero,1000e820 <___vfiprintf_internal_r+0x13dc>
1000e7b0:	00c40074 	movhi	r3,4097
1000e7b4:	18c72704 	addi	r3,r3,7324
1000e7b8:	dcc12315 	stw	r19,1164(sp)
1000e7bc:	d8c12215 	stw	r3,1160(sp)
1000e7c0:	003cff06 	br	1000dbc0 <__alt_data_end+0xf800dbc0>
1000e7c4:	d9411b17 	ldw	r5,1132(sp)
1000e7c8:	00840074 	movhi	r2,4097
1000e7cc:	10878604 	addi	r2,r2,7704
1000e7d0:	d8812615 	stw	r2,1176(sp)
1000e7d4:	29400044 	addi	r5,r5,1
1000e7d8:	003e6706 	br	1000e178 <__alt_data_end+0xf800e178>
1000e7dc:	d9012317 	ldw	r4,1164(sp)
1000e7e0:	d9412517 	ldw	r5,1172(sp)
1000e7e4:	20800017 	ldw	r2,0(r4)
1000e7e8:	21000104 	addi	r4,r4,4
1000e7ec:	d9012315 	stw	r4,1164(sp)
1000e7f0:	11400015 	stw	r5,0(r2)
1000e7f4:	003b4b06 	br	1000d524 <__alt_data_end+0xf800d524>
1000e7f8:	8029883a 	mov	r20,r16
1000e7fc:	dd811d83 	ldbu	r22,1142(sp)
1000e800:	dcc12315 	stw	r19,1164(sp)
1000e804:	0021883a 	mov	r16,zero
1000e808:	003c5f06 	br	1000d988 <__alt_data_end+0xf800d988>
1000e80c:	01040074 	movhi	r4,4097
1000e810:	21078204 	addi	r4,r4,7688
1000e814:	d9012615 	stw	r4,1176(sp)
1000e818:	1009883a 	mov	r4,r2
1000e81c:	003ea006 	br	1000e2a0 <__alt_data_end+0xf800e2a0>
1000e820:	002b883a 	mov	r21,zero
1000e824:	003fe206 	br	1000e7b0 <__alt_data_end+0xf800e7b0>
1000e828:	d9412317 	ldw	r5,1164(sp)
1000e82c:	b807883a 	mov	r3,r23
1000e830:	102f883a 	mov	r23,r2
1000e834:	2c000017 	ldw	r16,0(r5)
1000e838:	29000104 	addi	r4,r5,4
1000e83c:	d9012315 	stw	r4,1164(sp)
1000e840:	80000416 	blt	r16,zero,1000e854 <___vfiprintf_internal_r+0x1410>
1000e844:	19800047 	ldb	r6,1(r3)
1000e848:	003b5f06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000e84c:	043fffc4 	movi	r16,-1
1000e850:	003bef06 	br	1000d810 <__alt_data_end+0xf800d810>
1000e854:	043fffc4 	movi	r16,-1
1000e858:	19800047 	ldb	r6,1(r3)
1000e85c:	003b5a06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000e860:	282b883a 	mov	r21,r5
1000e864:	003cc706 	br	1000db84 <__alt_data_end+0xf800db84>

1000e868 <__vfiprintf_internal>:
1000e868:	2007883a 	mov	r3,r4
1000e86c:	01040074 	movhi	r4,4097
1000e870:	210e4404 	addi	r4,r4,14608
1000e874:	21000017 	ldw	r4,0(r4)
1000e878:	2805883a 	mov	r2,r5
1000e87c:	300f883a 	mov	r7,r6
1000e880:	180b883a 	mov	r5,r3
1000e884:	100d883a 	mov	r6,r2
1000e888:	000d4441 	jmpi	1000d444 <___vfiprintf_internal_r>

1000e88c <_write_r>:
1000e88c:	defffd04 	addi	sp,sp,-12
1000e890:	dc000015 	stw	r16,0(sp)
1000e894:	04040074 	movhi	r16,4097
1000e898:	dc400115 	stw	r17,4(sp)
1000e89c:	84151504 	addi	r16,r16,21588
1000e8a0:	2023883a 	mov	r17,r4
1000e8a4:	2809883a 	mov	r4,r5
1000e8a8:	300b883a 	mov	r5,r6
1000e8ac:	380d883a 	mov	r6,r7
1000e8b0:	dfc00215 	stw	ra,8(sp)
1000e8b4:	80000015 	stw	zero,0(r16)
1000e8b8:	000fb700 	call	1000fb70 <write>
1000e8bc:	00ffffc4 	movi	r3,-1
1000e8c0:	10c00526 	beq	r2,r3,1000e8d8 <_write_r+0x4c>
1000e8c4:	dfc00217 	ldw	ra,8(sp)
1000e8c8:	dc400117 	ldw	r17,4(sp)
1000e8cc:	dc000017 	ldw	r16,0(sp)
1000e8d0:	dec00304 	addi	sp,sp,12
1000e8d4:	f800283a 	ret
1000e8d8:	80c00017 	ldw	r3,0(r16)
1000e8dc:	183ff926 	beq	r3,zero,1000e8c4 <__alt_data_end+0xf800e8c4>
1000e8e0:	88c00015 	stw	r3,0(r17)
1000e8e4:	003ff706 	br	1000e8c4 <__alt_data_end+0xf800e8c4>

1000e8e8 <_close_r>:
1000e8e8:	defffd04 	addi	sp,sp,-12
1000e8ec:	dc000015 	stw	r16,0(sp)
1000e8f0:	04040074 	movhi	r16,4097
1000e8f4:	dc400115 	stw	r17,4(sp)
1000e8f8:	84151504 	addi	r16,r16,21588
1000e8fc:	2023883a 	mov	r17,r4
1000e900:	2809883a 	mov	r4,r5
1000e904:	dfc00215 	stw	ra,8(sp)
1000e908:	80000015 	stw	zero,0(r16)
1000e90c:	000f2cc0 	call	1000f2cc <close>
1000e910:	00ffffc4 	movi	r3,-1
1000e914:	10c00526 	beq	r2,r3,1000e92c <_close_r+0x44>
1000e918:	dfc00217 	ldw	ra,8(sp)
1000e91c:	dc400117 	ldw	r17,4(sp)
1000e920:	dc000017 	ldw	r16,0(sp)
1000e924:	dec00304 	addi	sp,sp,12
1000e928:	f800283a 	ret
1000e92c:	80c00017 	ldw	r3,0(r16)
1000e930:	183ff926 	beq	r3,zero,1000e918 <__alt_data_end+0xf800e918>
1000e934:	88c00015 	stw	r3,0(r17)
1000e938:	003ff706 	br	1000e918 <__alt_data_end+0xf800e918>

1000e93c <_calloc_r>:
1000e93c:	defffe04 	addi	sp,sp,-8
1000e940:	dc000015 	stw	r16,0(sp)
1000e944:	2021883a 	mov	r16,r4
1000e948:	2809883a 	mov	r4,r5
1000e94c:	300b883a 	mov	r5,r6
1000e950:	dfc00115 	stw	ra,4(sp)
1000e954:	00037040 	call	10003704 <__mulsi3>
1000e958:	8009883a 	mov	r4,r16
1000e95c:	100b883a 	mov	r5,r2
1000e960:	000aecc0 	call	1000aecc <_malloc_r>
1000e964:	1021883a 	mov	r16,r2
1000e968:	10002826 	beq	r2,zero,1000ea0c <_calloc_r+0xd0>
1000e96c:	11bfff17 	ldw	r6,-4(r2)
1000e970:	00bfff04 	movi	r2,-4
1000e974:	00c00904 	movi	r3,36
1000e978:	308c703a 	and	r6,r6,r2
1000e97c:	308d883a 	add	r6,r6,r2
1000e980:	19801436 	bltu	r3,r6,1000e9d4 <_calloc_r+0x98>
1000e984:	008004c4 	movi	r2,19
1000e988:	11800936 	bltu	r2,r6,1000e9b0 <_calloc_r+0x74>
1000e98c:	8005883a 	mov	r2,r16
1000e990:	10000015 	stw	zero,0(r2)
1000e994:	10000115 	stw	zero,4(r2)
1000e998:	10000215 	stw	zero,8(r2)
1000e99c:	8005883a 	mov	r2,r16
1000e9a0:	dfc00117 	ldw	ra,4(sp)
1000e9a4:	dc000017 	ldw	r16,0(sp)
1000e9a8:	dec00204 	addi	sp,sp,8
1000e9ac:	f800283a 	ret
1000e9b0:	80000015 	stw	zero,0(r16)
1000e9b4:	80000115 	stw	zero,4(r16)
1000e9b8:	008006c4 	movi	r2,27
1000e9bc:	11800d2e 	bgeu	r2,r6,1000e9f4 <_calloc_r+0xb8>
1000e9c0:	80000215 	stw	zero,8(r16)
1000e9c4:	80000315 	stw	zero,12(r16)
1000e9c8:	30c00c26 	beq	r6,r3,1000e9fc <_calloc_r+0xc0>
1000e9cc:	80800404 	addi	r2,r16,16
1000e9d0:	003fef06 	br	1000e990 <__alt_data_end+0xf800e990>
1000e9d4:	8009883a 	mov	r4,r16
1000e9d8:	000b883a 	mov	r5,zero
1000e9dc:	000b9f00 	call	1000b9f0 <memset>
1000e9e0:	8005883a 	mov	r2,r16
1000e9e4:	dfc00117 	ldw	ra,4(sp)
1000e9e8:	dc000017 	ldw	r16,0(sp)
1000e9ec:	dec00204 	addi	sp,sp,8
1000e9f0:	f800283a 	ret
1000e9f4:	80800204 	addi	r2,r16,8
1000e9f8:	003fe506 	br	1000e990 <__alt_data_end+0xf800e990>
1000e9fc:	80000415 	stw	zero,16(r16)
1000ea00:	80800604 	addi	r2,r16,24
1000ea04:	80000515 	stw	zero,20(r16)
1000ea08:	003fe106 	br	1000e990 <__alt_data_end+0xf800e990>
1000ea0c:	0005883a 	mov	r2,zero
1000ea10:	003fe306 	br	1000e9a0 <__alt_data_end+0xf800e9a0>

1000ea14 <_fclose_r>:
1000ea14:	28003226 	beq	r5,zero,1000eae0 <_fclose_r+0xcc>
1000ea18:	defffc04 	addi	sp,sp,-16
1000ea1c:	dc400115 	stw	r17,4(sp)
1000ea20:	2023883a 	mov	r17,r4
1000ea24:	dc000015 	stw	r16,0(sp)
1000ea28:	dfc00315 	stw	ra,12(sp)
1000ea2c:	dc800215 	stw	r18,8(sp)
1000ea30:	2821883a 	mov	r16,r5
1000ea34:	000a1cc0 	call	1000a1cc <__sfp_lock_acquire>
1000ea38:	88000226 	beq	r17,zero,1000ea44 <_fclose_r+0x30>
1000ea3c:	88800e17 	ldw	r2,56(r17)
1000ea40:	10002926 	beq	r2,zero,1000eae8 <_fclose_r+0xd4>
1000ea44:	8080030f 	ldh	r2,12(r16)
1000ea48:	10002226 	beq	r2,zero,1000ead4 <_fclose_r+0xc0>
1000ea4c:	8809883a 	mov	r4,r17
1000ea50:	800b883a 	mov	r5,r16
1000ea54:	0009c000 	call	10009c00 <_fflush_r>
1000ea58:	1025883a 	mov	r18,r2
1000ea5c:	80800b17 	ldw	r2,44(r16)
1000ea60:	10000426 	beq	r2,zero,1000ea74 <_fclose_r+0x60>
1000ea64:	81400717 	ldw	r5,28(r16)
1000ea68:	8809883a 	mov	r4,r17
1000ea6c:	103ee83a 	callr	r2
1000ea70:	10002616 	blt	r2,zero,1000eb0c <_fclose_r+0xf8>
1000ea74:	8080030b 	ldhu	r2,12(r16)
1000ea78:	1080200c 	andi	r2,r2,128
1000ea7c:	10001f1e 	bne	r2,zero,1000eafc <_fclose_r+0xe8>
1000ea80:	81400c17 	ldw	r5,48(r16)
1000ea84:	28000526 	beq	r5,zero,1000ea9c <_fclose_r+0x88>
1000ea88:	80801004 	addi	r2,r16,64
1000ea8c:	28800226 	beq	r5,r2,1000ea98 <_fclose_r+0x84>
1000ea90:	8809883a 	mov	r4,r17
1000ea94:	000a3300 	call	1000a330 <_free_r>
1000ea98:	80000c15 	stw	zero,48(r16)
1000ea9c:	81401117 	ldw	r5,68(r16)
1000eaa0:	28000326 	beq	r5,zero,1000eab0 <_fclose_r+0x9c>
1000eaa4:	8809883a 	mov	r4,r17
1000eaa8:	000a3300 	call	1000a330 <_free_r>
1000eaac:	80001115 	stw	zero,68(r16)
1000eab0:	8000030d 	sth	zero,12(r16)
1000eab4:	000a1d00 	call	1000a1d0 <__sfp_lock_release>
1000eab8:	9005883a 	mov	r2,r18
1000eabc:	dfc00317 	ldw	ra,12(sp)
1000eac0:	dc800217 	ldw	r18,8(sp)
1000eac4:	dc400117 	ldw	r17,4(sp)
1000eac8:	dc000017 	ldw	r16,0(sp)
1000eacc:	dec00404 	addi	sp,sp,16
1000ead0:	f800283a 	ret
1000ead4:	000a1d00 	call	1000a1d0 <__sfp_lock_release>
1000ead8:	0005883a 	mov	r2,zero
1000eadc:	003ff706 	br	1000eabc <__alt_data_end+0xf800eabc>
1000eae0:	0005883a 	mov	r2,zero
1000eae4:	f800283a 	ret
1000eae8:	8809883a 	mov	r4,r17
1000eaec:	000a1bc0 	call	1000a1bc <__sinit>
1000eaf0:	8080030f 	ldh	r2,12(r16)
1000eaf4:	103fd51e 	bne	r2,zero,1000ea4c <__alt_data_end+0xf800ea4c>
1000eaf8:	003ff606 	br	1000ead4 <__alt_data_end+0xf800ead4>
1000eafc:	81400417 	ldw	r5,16(r16)
1000eb00:	8809883a 	mov	r4,r17
1000eb04:	000a3300 	call	1000a330 <_free_r>
1000eb08:	003fdd06 	br	1000ea80 <__alt_data_end+0xf800ea80>
1000eb0c:	04bfffc4 	movi	r18,-1
1000eb10:	003fd806 	br	1000ea74 <__alt_data_end+0xf800ea74>

1000eb14 <fclose>:
1000eb14:	00840074 	movhi	r2,4097
1000eb18:	108e4404 	addi	r2,r2,14608
1000eb1c:	200b883a 	mov	r5,r4
1000eb20:	11000017 	ldw	r4,0(r2)
1000eb24:	000ea141 	jmpi	1000ea14 <_fclose_r>

1000eb28 <_fputwc_r>:
1000eb28:	3080030b 	ldhu	r2,12(r6)
1000eb2c:	defff804 	addi	sp,sp,-32
1000eb30:	dcc00415 	stw	r19,16(sp)
1000eb34:	dc800315 	stw	r18,12(sp)
1000eb38:	dc000115 	stw	r16,4(sp)
1000eb3c:	dfc00715 	stw	ra,28(sp)
1000eb40:	dd400615 	stw	r21,24(sp)
1000eb44:	dd000515 	stw	r20,20(sp)
1000eb48:	dc400215 	stw	r17,8(sp)
1000eb4c:	10c8000c 	andi	r3,r2,8192
1000eb50:	3021883a 	mov	r16,r6
1000eb54:	2027883a 	mov	r19,r4
1000eb58:	2825883a 	mov	r18,r5
1000eb5c:	1800051e 	bne	r3,zero,1000eb74 <_fputwc_r+0x4c>
1000eb60:	30c01917 	ldw	r3,100(r6)
1000eb64:	10880014 	ori	r2,r2,8192
1000eb68:	3080030d 	sth	r2,12(r6)
1000eb6c:	18880014 	ori	r2,r3,8192
1000eb70:	30801915 	stw	r2,100(r6)
1000eb74:	000acbc0 	call	1000acbc <__locale_mb_cur_max>
1000eb78:	00c00044 	movi	r3,1
1000eb7c:	10c03e26 	beq	r2,r3,1000ec78 <_fputwc_r+0x150>
1000eb80:	9809883a 	mov	r4,r19
1000eb84:	d80b883a 	mov	r5,sp
1000eb88:	900d883a 	mov	r6,r18
1000eb8c:	81c01704 	addi	r7,r16,92
1000eb90:	000efd80 	call	1000efd8 <_wcrtomb_r>
1000eb94:	1029883a 	mov	r20,r2
1000eb98:	00bfffc4 	movi	r2,-1
1000eb9c:	a0802026 	beq	r20,r2,1000ec20 <_fputwc_r+0xf8>
1000eba0:	d9400003 	ldbu	r5,0(sp)
1000eba4:	a0001c26 	beq	r20,zero,1000ec18 <_fputwc_r+0xf0>
1000eba8:	0023883a 	mov	r17,zero
1000ebac:	05400284 	movi	r21,10
1000ebb0:	00000906 	br	1000ebd8 <_fputwc_r+0xb0>
1000ebb4:	80800017 	ldw	r2,0(r16)
1000ebb8:	11400005 	stb	r5,0(r2)
1000ebbc:	80c00017 	ldw	r3,0(r16)
1000ebc0:	18c00044 	addi	r3,r3,1
1000ebc4:	80c00015 	stw	r3,0(r16)
1000ebc8:	8c400044 	addi	r17,r17,1
1000ebcc:	dc45883a 	add	r2,sp,r17
1000ebd0:	8d00112e 	bgeu	r17,r20,1000ec18 <_fputwc_r+0xf0>
1000ebd4:	11400003 	ldbu	r5,0(r2)
1000ebd8:	80c00217 	ldw	r3,8(r16)
1000ebdc:	18ffffc4 	addi	r3,r3,-1
1000ebe0:	80c00215 	stw	r3,8(r16)
1000ebe4:	183ff30e 	bge	r3,zero,1000ebb4 <__alt_data_end+0xf800ebb4>
1000ebe8:	80800617 	ldw	r2,24(r16)
1000ebec:	18801916 	blt	r3,r2,1000ec54 <_fputwc_r+0x12c>
1000ebf0:	80800017 	ldw	r2,0(r16)
1000ebf4:	11400005 	stb	r5,0(r2)
1000ebf8:	80800017 	ldw	r2,0(r16)
1000ebfc:	10c00003 	ldbu	r3,0(r2)
1000ec00:	10800044 	addi	r2,r2,1
1000ec04:	1d402326 	beq	r3,r21,1000ec94 <_fputwc_r+0x16c>
1000ec08:	80800015 	stw	r2,0(r16)
1000ec0c:	8c400044 	addi	r17,r17,1
1000ec10:	dc45883a 	add	r2,sp,r17
1000ec14:	8d3fef36 	bltu	r17,r20,1000ebd4 <__alt_data_end+0xf800ebd4>
1000ec18:	9005883a 	mov	r2,r18
1000ec1c:	00000406 	br	1000ec30 <_fputwc_r+0x108>
1000ec20:	80c0030b 	ldhu	r3,12(r16)
1000ec24:	a005883a 	mov	r2,r20
1000ec28:	18c01014 	ori	r3,r3,64
1000ec2c:	80c0030d 	sth	r3,12(r16)
1000ec30:	dfc00717 	ldw	ra,28(sp)
1000ec34:	dd400617 	ldw	r21,24(sp)
1000ec38:	dd000517 	ldw	r20,20(sp)
1000ec3c:	dcc00417 	ldw	r19,16(sp)
1000ec40:	dc800317 	ldw	r18,12(sp)
1000ec44:	dc400217 	ldw	r17,8(sp)
1000ec48:	dc000117 	ldw	r16,4(sp)
1000ec4c:	dec00804 	addi	sp,sp,32
1000ec50:	f800283a 	ret
1000ec54:	9809883a 	mov	r4,r19
1000ec58:	29403fcc 	andi	r5,r5,255
1000ec5c:	800d883a 	mov	r6,r16
1000ec60:	000ee680 	call	1000ee68 <__swbuf_r>
1000ec64:	10bfffe0 	cmpeqi	r2,r2,-1
1000ec68:	10803fcc 	andi	r2,r2,255
1000ec6c:	103fd626 	beq	r2,zero,1000ebc8 <__alt_data_end+0xf800ebc8>
1000ec70:	00bfffc4 	movi	r2,-1
1000ec74:	003fee06 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000ec78:	90ffffc4 	addi	r3,r18,-1
1000ec7c:	01003f84 	movi	r4,254
1000ec80:	20ffbf36 	bltu	r4,r3,1000eb80 <__alt_data_end+0xf800eb80>
1000ec84:	900b883a 	mov	r5,r18
1000ec88:	dc800005 	stb	r18,0(sp)
1000ec8c:	1029883a 	mov	r20,r2
1000ec90:	003fc506 	br	1000eba8 <__alt_data_end+0xf800eba8>
1000ec94:	9809883a 	mov	r4,r19
1000ec98:	a80b883a 	mov	r5,r21
1000ec9c:	800d883a 	mov	r6,r16
1000eca0:	000ee680 	call	1000ee68 <__swbuf_r>
1000eca4:	10bfffe0 	cmpeqi	r2,r2,-1
1000eca8:	003fef06 	br	1000ec68 <__alt_data_end+0xf800ec68>

1000ecac <fputwc>:
1000ecac:	defffc04 	addi	sp,sp,-16
1000ecb0:	dc000115 	stw	r16,4(sp)
1000ecb4:	04040074 	movhi	r16,4097
1000ecb8:	840e4404 	addi	r16,r16,14608
1000ecbc:	dc400215 	stw	r17,8(sp)
1000ecc0:	2023883a 	mov	r17,r4
1000ecc4:	81000017 	ldw	r4,0(r16)
1000ecc8:	dfc00315 	stw	ra,12(sp)
1000eccc:	280d883a 	mov	r6,r5
1000ecd0:	20000626 	beq	r4,zero,1000ecec <fputwc+0x40>
1000ecd4:	20800e17 	ldw	r2,56(r4)
1000ecd8:	1000041e 	bne	r2,zero,1000ecec <fputwc+0x40>
1000ecdc:	d9400015 	stw	r5,0(sp)
1000ece0:	000a1bc0 	call	1000a1bc <__sinit>
1000ece4:	81000017 	ldw	r4,0(r16)
1000ece8:	d9800017 	ldw	r6,0(sp)
1000ecec:	880b883a 	mov	r5,r17
1000ecf0:	dfc00317 	ldw	ra,12(sp)
1000ecf4:	dc400217 	ldw	r17,8(sp)
1000ecf8:	dc000117 	ldw	r16,4(sp)
1000ecfc:	dec00404 	addi	sp,sp,16
1000ed00:	000eb281 	jmpi	1000eb28 <_fputwc_r>

1000ed04 <_fstat_r>:
1000ed04:	defffd04 	addi	sp,sp,-12
1000ed08:	dc000015 	stw	r16,0(sp)
1000ed0c:	04040074 	movhi	r16,4097
1000ed10:	dc400115 	stw	r17,4(sp)
1000ed14:	84151504 	addi	r16,r16,21588
1000ed18:	2023883a 	mov	r17,r4
1000ed1c:	2809883a 	mov	r4,r5
1000ed20:	300b883a 	mov	r5,r6
1000ed24:	dfc00215 	stw	ra,8(sp)
1000ed28:	80000015 	stw	zero,0(r16)
1000ed2c:	000f4200 	call	1000f420 <fstat>
1000ed30:	00ffffc4 	movi	r3,-1
1000ed34:	10c00526 	beq	r2,r3,1000ed4c <_fstat_r+0x48>
1000ed38:	dfc00217 	ldw	ra,8(sp)
1000ed3c:	dc400117 	ldw	r17,4(sp)
1000ed40:	dc000017 	ldw	r16,0(sp)
1000ed44:	dec00304 	addi	sp,sp,12
1000ed48:	f800283a 	ret
1000ed4c:	80c00017 	ldw	r3,0(r16)
1000ed50:	183ff926 	beq	r3,zero,1000ed38 <__alt_data_end+0xf800ed38>
1000ed54:	88c00015 	stw	r3,0(r17)
1000ed58:	003ff706 	br	1000ed38 <__alt_data_end+0xf800ed38>

1000ed5c <_isatty_r>:
1000ed5c:	defffd04 	addi	sp,sp,-12
1000ed60:	dc000015 	stw	r16,0(sp)
1000ed64:	04040074 	movhi	r16,4097
1000ed68:	dc400115 	stw	r17,4(sp)
1000ed6c:	84151504 	addi	r16,r16,21588
1000ed70:	2023883a 	mov	r17,r4
1000ed74:	2809883a 	mov	r4,r5
1000ed78:	dfc00215 	stw	ra,8(sp)
1000ed7c:	80000015 	stw	zero,0(r16)
1000ed80:	000f5280 	call	1000f528 <isatty>
1000ed84:	00ffffc4 	movi	r3,-1
1000ed88:	10c00526 	beq	r2,r3,1000eda0 <_isatty_r+0x44>
1000ed8c:	dfc00217 	ldw	ra,8(sp)
1000ed90:	dc400117 	ldw	r17,4(sp)
1000ed94:	dc000017 	ldw	r16,0(sp)
1000ed98:	dec00304 	addi	sp,sp,12
1000ed9c:	f800283a 	ret
1000eda0:	80c00017 	ldw	r3,0(r16)
1000eda4:	183ff926 	beq	r3,zero,1000ed8c <__alt_data_end+0xf800ed8c>
1000eda8:	88c00015 	stw	r3,0(r17)
1000edac:	003ff706 	br	1000ed8c <__alt_data_end+0xf800ed8c>

1000edb0 <_lseek_r>:
1000edb0:	defffd04 	addi	sp,sp,-12
1000edb4:	dc000015 	stw	r16,0(sp)
1000edb8:	04040074 	movhi	r16,4097
1000edbc:	dc400115 	stw	r17,4(sp)
1000edc0:	84151504 	addi	r16,r16,21588
1000edc4:	2023883a 	mov	r17,r4
1000edc8:	2809883a 	mov	r4,r5
1000edcc:	300b883a 	mov	r5,r6
1000edd0:	380d883a 	mov	r6,r7
1000edd4:	dfc00215 	stw	ra,8(sp)
1000edd8:	80000015 	stw	zero,0(r16)
1000eddc:	000f7080 	call	1000f708 <lseek>
1000ede0:	00ffffc4 	movi	r3,-1
1000ede4:	10c00526 	beq	r2,r3,1000edfc <_lseek_r+0x4c>
1000ede8:	dfc00217 	ldw	ra,8(sp)
1000edec:	dc400117 	ldw	r17,4(sp)
1000edf0:	dc000017 	ldw	r16,0(sp)
1000edf4:	dec00304 	addi	sp,sp,12
1000edf8:	f800283a 	ret
1000edfc:	80c00017 	ldw	r3,0(r16)
1000ee00:	183ff926 	beq	r3,zero,1000ede8 <__alt_data_end+0xf800ede8>
1000ee04:	88c00015 	stw	r3,0(r17)
1000ee08:	003ff706 	br	1000ede8 <__alt_data_end+0xf800ede8>

1000ee0c <_read_r>:
1000ee0c:	defffd04 	addi	sp,sp,-12
1000ee10:	dc000015 	stw	r16,0(sp)
1000ee14:	04040074 	movhi	r16,4097
1000ee18:	dc400115 	stw	r17,4(sp)
1000ee1c:	84151504 	addi	r16,r16,21588
1000ee20:	2023883a 	mov	r17,r4
1000ee24:	2809883a 	mov	r4,r5
1000ee28:	300b883a 	mov	r5,r6
1000ee2c:	380d883a 	mov	r6,r7
1000ee30:	dfc00215 	stw	ra,8(sp)
1000ee34:	80000015 	stw	zero,0(r16)
1000ee38:	000f8ec0 	call	1000f8ec <read>
1000ee3c:	00ffffc4 	movi	r3,-1
1000ee40:	10c00526 	beq	r2,r3,1000ee58 <_read_r+0x4c>
1000ee44:	dfc00217 	ldw	ra,8(sp)
1000ee48:	dc400117 	ldw	r17,4(sp)
1000ee4c:	dc000017 	ldw	r16,0(sp)
1000ee50:	dec00304 	addi	sp,sp,12
1000ee54:	f800283a 	ret
1000ee58:	80c00017 	ldw	r3,0(r16)
1000ee5c:	183ff926 	beq	r3,zero,1000ee44 <__alt_data_end+0xf800ee44>
1000ee60:	88c00015 	stw	r3,0(r17)
1000ee64:	003ff706 	br	1000ee44 <__alt_data_end+0xf800ee44>

1000ee68 <__swbuf_r>:
1000ee68:	defffc04 	addi	sp,sp,-16
1000ee6c:	dc800215 	stw	r18,8(sp)
1000ee70:	dc400115 	stw	r17,4(sp)
1000ee74:	dc000015 	stw	r16,0(sp)
1000ee78:	dfc00315 	stw	ra,12(sp)
1000ee7c:	2025883a 	mov	r18,r4
1000ee80:	2823883a 	mov	r17,r5
1000ee84:	3021883a 	mov	r16,r6
1000ee88:	20000226 	beq	r4,zero,1000ee94 <__swbuf_r+0x2c>
1000ee8c:	20800e17 	ldw	r2,56(r4)
1000ee90:	10004126 	beq	r2,zero,1000ef98 <__swbuf_r+0x130>
1000ee94:	80c00617 	ldw	r3,24(r16)
1000ee98:	8180030b 	ldhu	r6,12(r16)
1000ee9c:	80c00215 	stw	r3,8(r16)
1000eea0:	30c0020c 	andi	r3,r6,8
1000eea4:	18003526 	beq	r3,zero,1000ef7c <__swbuf_r+0x114>
1000eea8:	80c00417 	ldw	r3,16(r16)
1000eeac:	18003326 	beq	r3,zero,1000ef7c <__swbuf_r+0x114>
1000eeb0:	3088000c 	andi	r2,r6,8192
1000eeb4:	8c403fcc 	andi	r17,r17,255
1000eeb8:	10001726 	beq	r2,zero,1000ef18 <__swbuf_r+0xb0>
1000eebc:	80800017 	ldw	r2,0(r16)
1000eec0:	81000517 	ldw	r4,20(r16)
1000eec4:	10c7c83a 	sub	r3,r2,r3
1000eec8:	19001d0e 	bge	r3,r4,1000ef40 <__swbuf_r+0xd8>
1000eecc:	18c00044 	addi	r3,r3,1
1000eed0:	81400217 	ldw	r5,8(r16)
1000eed4:	11000044 	addi	r4,r2,1
1000eed8:	81000015 	stw	r4,0(r16)
1000eedc:	297fffc4 	addi	r5,r5,-1
1000eee0:	81400215 	stw	r5,8(r16)
1000eee4:	14400005 	stb	r17,0(r2)
1000eee8:	80800517 	ldw	r2,20(r16)
1000eeec:	10c01d26 	beq	r2,r3,1000ef64 <__swbuf_r+0xfc>
1000eef0:	8080030b 	ldhu	r2,12(r16)
1000eef4:	1080004c 	andi	r2,r2,1
1000eef8:	1000181e 	bne	r2,zero,1000ef5c <__swbuf_r+0xf4>
1000eefc:	8805883a 	mov	r2,r17
1000ef00:	dfc00317 	ldw	ra,12(sp)
1000ef04:	dc800217 	ldw	r18,8(sp)
1000ef08:	dc400117 	ldw	r17,4(sp)
1000ef0c:	dc000017 	ldw	r16,0(sp)
1000ef10:	dec00404 	addi	sp,sp,16
1000ef14:	f800283a 	ret
1000ef18:	81001917 	ldw	r4,100(r16)
1000ef1c:	00b7ffc4 	movi	r2,-8193
1000ef20:	31880014 	ori	r6,r6,8192
1000ef24:	2084703a 	and	r2,r4,r2
1000ef28:	80801915 	stw	r2,100(r16)
1000ef2c:	80800017 	ldw	r2,0(r16)
1000ef30:	81000517 	ldw	r4,20(r16)
1000ef34:	8180030d 	sth	r6,12(r16)
1000ef38:	10c7c83a 	sub	r3,r2,r3
1000ef3c:	193fe316 	blt	r3,r4,1000eecc <__alt_data_end+0xf800eecc>
1000ef40:	9009883a 	mov	r4,r18
1000ef44:	800b883a 	mov	r5,r16
1000ef48:	0009c000 	call	10009c00 <_fflush_r>
1000ef4c:	1000091e 	bne	r2,zero,1000ef74 <__swbuf_r+0x10c>
1000ef50:	80800017 	ldw	r2,0(r16)
1000ef54:	00c00044 	movi	r3,1
1000ef58:	003fdd06 	br	1000eed0 <__alt_data_end+0xf800eed0>
1000ef5c:	00800284 	movi	r2,10
1000ef60:	88bfe61e 	bne	r17,r2,1000eefc <__alt_data_end+0xf800eefc>
1000ef64:	9009883a 	mov	r4,r18
1000ef68:	800b883a 	mov	r5,r16
1000ef6c:	0009c000 	call	10009c00 <_fflush_r>
1000ef70:	103fe226 	beq	r2,zero,1000eefc <__alt_data_end+0xf800eefc>
1000ef74:	00bfffc4 	movi	r2,-1
1000ef78:	003fe106 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000ef7c:	9009883a 	mov	r4,r18
1000ef80:	800b883a 	mov	r5,r16
1000ef84:	00081800 	call	10008180 <__swsetup_r>
1000ef88:	1000051e 	bne	r2,zero,1000efa0 <__swbuf_r+0x138>
1000ef8c:	8180030b 	ldhu	r6,12(r16)
1000ef90:	80c00417 	ldw	r3,16(r16)
1000ef94:	003fc606 	br	1000eeb0 <__alt_data_end+0xf800eeb0>
1000ef98:	000a1bc0 	call	1000a1bc <__sinit>
1000ef9c:	003fbd06 	br	1000ee94 <__alt_data_end+0xf800ee94>
1000efa0:	80c0030b 	ldhu	r3,12(r16)
1000efa4:	00bfffc4 	movi	r2,-1
1000efa8:	18c01014 	ori	r3,r3,64
1000efac:	80c0030d 	sth	r3,12(r16)
1000efb0:	00c00244 	movi	r3,9
1000efb4:	90c00015 	stw	r3,0(r18)
1000efb8:	003fd106 	br	1000ef00 <__alt_data_end+0xf800ef00>

1000efbc <__swbuf>:
1000efbc:	00c40074 	movhi	r3,4097
1000efc0:	18ce4404 	addi	r3,r3,14608
1000efc4:	2005883a 	mov	r2,r4
1000efc8:	19000017 	ldw	r4,0(r3)
1000efcc:	280d883a 	mov	r6,r5
1000efd0:	100b883a 	mov	r5,r2
1000efd4:	000ee681 	jmpi	1000ee68 <__swbuf_r>

1000efd8 <_wcrtomb_r>:
1000efd8:	defff604 	addi	sp,sp,-40
1000efdc:	00840074 	movhi	r2,4097
1000efe0:	dc800815 	stw	r18,32(sp)
1000efe4:	dc400715 	stw	r17,28(sp)
1000efe8:	dc000615 	stw	r16,24(sp)
1000efec:	108e4804 	addi	r2,r2,14624
1000eff0:	dfc00915 	stw	ra,36(sp)
1000eff4:	2021883a 	mov	r16,r4
1000eff8:	3823883a 	mov	r17,r7
1000effc:	14800017 	ldw	r18,0(r2)
1000f000:	28001426 	beq	r5,zero,1000f054 <_wcrtomb_r+0x7c>
1000f004:	d9400415 	stw	r5,16(sp)
1000f008:	d9800515 	stw	r6,20(sp)
1000f00c:	000acb00 	call	1000acb0 <__locale_charset>
1000f010:	d9400417 	ldw	r5,16(sp)
1000f014:	d9800517 	ldw	r6,20(sp)
1000f018:	8009883a 	mov	r4,r16
1000f01c:	dc400015 	stw	r17,0(sp)
1000f020:	100f883a 	mov	r7,r2
1000f024:	903ee83a 	callr	r18
1000f028:	00ffffc4 	movi	r3,-1
1000f02c:	10c0031e 	bne	r2,r3,1000f03c <_wcrtomb_r+0x64>
1000f030:	88000015 	stw	zero,0(r17)
1000f034:	00c02284 	movi	r3,138
1000f038:	80c00015 	stw	r3,0(r16)
1000f03c:	dfc00917 	ldw	ra,36(sp)
1000f040:	dc800817 	ldw	r18,32(sp)
1000f044:	dc400717 	ldw	r17,28(sp)
1000f048:	dc000617 	ldw	r16,24(sp)
1000f04c:	dec00a04 	addi	sp,sp,40
1000f050:	f800283a 	ret
1000f054:	000acb00 	call	1000acb0 <__locale_charset>
1000f058:	8009883a 	mov	r4,r16
1000f05c:	dc400015 	stw	r17,0(sp)
1000f060:	d9400104 	addi	r5,sp,4
1000f064:	000d883a 	mov	r6,zero
1000f068:	100f883a 	mov	r7,r2
1000f06c:	903ee83a 	callr	r18
1000f070:	003fed06 	br	1000f028 <__alt_data_end+0xf800f028>

1000f074 <wcrtomb>:
1000f074:	defff504 	addi	sp,sp,-44
1000f078:	dc400515 	stw	r17,20(sp)
1000f07c:	dc000415 	stw	r16,16(sp)
1000f080:	dfc00a15 	stw	ra,40(sp)
1000f084:	dd400915 	stw	r21,36(sp)
1000f088:	dd000815 	stw	r20,32(sp)
1000f08c:	dcc00715 	stw	r19,28(sp)
1000f090:	dc800615 	stw	r18,24(sp)
1000f094:	2021883a 	mov	r16,r4
1000f098:	3023883a 	mov	r17,r6
1000f09c:	20001d26 	beq	r4,zero,1000f114 <wcrtomb+0xa0>
1000f0a0:	04840074 	movhi	r18,4097
1000f0a4:	948e4404 	addi	r18,r18,14608
1000f0a8:	00840074 	movhi	r2,4097
1000f0ac:	95400017 	ldw	r21,0(r18)
1000f0b0:	108e4804 	addi	r2,r2,14624
1000f0b4:	15000017 	ldw	r20,0(r2)
1000f0b8:	2827883a 	mov	r19,r5
1000f0bc:	000acb00 	call	1000acb0 <__locale_charset>
1000f0c0:	a809883a 	mov	r4,r21
1000f0c4:	dc400015 	stw	r17,0(sp)
1000f0c8:	800b883a 	mov	r5,r16
1000f0cc:	980d883a 	mov	r6,r19
1000f0d0:	100f883a 	mov	r7,r2
1000f0d4:	a03ee83a 	callr	r20
1000f0d8:	00ffffc4 	movi	r3,-1
1000f0dc:	10c0041e 	bne	r2,r3,1000f0f0 <wcrtomb+0x7c>
1000f0e0:	90c00017 	ldw	r3,0(r18)
1000f0e4:	01002284 	movi	r4,138
1000f0e8:	88000015 	stw	zero,0(r17)
1000f0ec:	19000015 	stw	r4,0(r3)
1000f0f0:	dfc00a17 	ldw	ra,40(sp)
1000f0f4:	dd400917 	ldw	r21,36(sp)
1000f0f8:	dd000817 	ldw	r20,32(sp)
1000f0fc:	dcc00717 	ldw	r19,28(sp)
1000f100:	dc800617 	ldw	r18,24(sp)
1000f104:	dc400517 	ldw	r17,20(sp)
1000f108:	dc000417 	ldw	r16,16(sp)
1000f10c:	dec00b04 	addi	sp,sp,44
1000f110:	f800283a 	ret
1000f114:	04840074 	movhi	r18,4097
1000f118:	948e4404 	addi	r18,r18,14608
1000f11c:	00840074 	movhi	r2,4097
1000f120:	94c00017 	ldw	r19,0(r18)
1000f124:	108e4804 	addi	r2,r2,14624
1000f128:	14000017 	ldw	r16,0(r2)
1000f12c:	000acb00 	call	1000acb0 <__locale_charset>
1000f130:	9809883a 	mov	r4,r19
1000f134:	dc400015 	stw	r17,0(sp)
1000f138:	d9400104 	addi	r5,sp,4
1000f13c:	000d883a 	mov	r6,zero
1000f140:	100f883a 	mov	r7,r2
1000f144:	803ee83a 	callr	r16
1000f148:	003fe306 	br	1000f0d8 <__alt_data_end+0xf800f0d8>

1000f14c <__ascii_wctomb>:
1000f14c:	28000526 	beq	r5,zero,1000f164 <__ascii_wctomb+0x18>
1000f150:	00803fc4 	movi	r2,255
1000f154:	11800536 	bltu	r2,r6,1000f16c <__ascii_wctomb+0x20>
1000f158:	29800005 	stb	r6,0(r5)
1000f15c:	00800044 	movi	r2,1
1000f160:	f800283a 	ret
1000f164:	0005883a 	mov	r2,zero
1000f168:	f800283a 	ret
1000f16c:	00802284 	movi	r2,138
1000f170:	20800015 	stw	r2,0(r4)
1000f174:	00bfffc4 	movi	r2,-1
1000f178:	f800283a 	ret

1000f17c <_wctomb_r>:
1000f17c:	00840074 	movhi	r2,4097
1000f180:	defff904 	addi	sp,sp,-28
1000f184:	108e4804 	addi	r2,r2,14624
1000f188:	dfc00615 	stw	ra,24(sp)
1000f18c:	dc400515 	stw	r17,20(sp)
1000f190:	dc000415 	stw	r16,16(sp)
1000f194:	3823883a 	mov	r17,r7
1000f198:	14000017 	ldw	r16,0(r2)
1000f19c:	d9000115 	stw	r4,4(sp)
1000f1a0:	d9400215 	stw	r5,8(sp)
1000f1a4:	d9800315 	stw	r6,12(sp)
1000f1a8:	000acb00 	call	1000acb0 <__locale_charset>
1000f1ac:	d9000117 	ldw	r4,4(sp)
1000f1b0:	d9400217 	ldw	r5,8(sp)
1000f1b4:	d9800317 	ldw	r6,12(sp)
1000f1b8:	dc400015 	stw	r17,0(sp)
1000f1bc:	100f883a 	mov	r7,r2
1000f1c0:	803ee83a 	callr	r16
1000f1c4:	dfc00617 	ldw	ra,24(sp)
1000f1c8:	dc400517 	ldw	r17,20(sp)
1000f1cc:	dc000417 	ldw	r16,16(sp)
1000f1d0:	dec00704 	addi	sp,sp,28
1000f1d4:	f800283a 	ret

1000f1d8 <__floatunsidf>:
1000f1d8:	defffe04 	addi	sp,sp,-8
1000f1dc:	dc000015 	stw	r16,0(sp)
1000f1e0:	dfc00115 	stw	ra,4(sp)
1000f1e4:	2021883a 	mov	r16,r4
1000f1e8:	20001026 	beq	r4,zero,1000f22c <__floatunsidf+0x54>
1000f1ec:	0005e200 	call	10005e20 <__clzsi2>
1000f1f0:	01410784 	movi	r5,1054
1000f1f4:	100d883a 	mov	r6,r2
1000f1f8:	288bc83a 	sub	r5,r5,r2
1000f1fc:	00800284 	movi	r2,10
1000f200:	11801616 	blt	r2,r6,1000f25c <__floatunsidf+0x84>
1000f204:	008002c4 	movi	r2,11
1000f208:	1185c83a 	sub	r2,r2,r6
1000f20c:	8084d83a 	srl	r2,r16,r2
1000f210:	00c00434 	movhi	r3,16
1000f214:	31c00544 	addi	r7,r6,21
1000f218:	18ffffc4 	addi	r3,r3,-1
1000f21c:	81e0983a 	sll	r16,r16,r7
1000f220:	10cc703a 	and	r6,r2,r3
1000f224:	2941ffcc 	andi	r5,r5,2047
1000f228:	00000206 	br	1000f234 <__floatunsidf+0x5c>
1000f22c:	000b883a 	mov	r5,zero
1000f230:	000d883a 	mov	r6,zero
1000f234:	280a953a 	slli	r5,r5,20
1000f238:	00c00434 	movhi	r3,16
1000f23c:	18ffffc4 	addi	r3,r3,-1
1000f240:	30c6703a 	and	r3,r6,r3
1000f244:	8005883a 	mov	r2,r16
1000f248:	1946b03a 	or	r3,r3,r5
1000f24c:	dfc00117 	ldw	ra,4(sp)
1000f250:	dc000017 	ldw	r16,0(sp)
1000f254:	dec00204 	addi	sp,sp,8
1000f258:	f800283a 	ret
1000f25c:	31bffd44 	addi	r6,r6,-11
1000f260:	818c983a 	sll	r6,r16,r6
1000f264:	00800434 	movhi	r2,16
1000f268:	10bfffc4 	addi	r2,r2,-1
1000f26c:	2941ffcc 	andi	r5,r5,2047
1000f270:	0021883a 	mov	r16,zero
1000f274:	308c703a 	and	r6,r6,r2
1000f278:	003fee06 	br	1000f234 <__alt_data_end+0xf800f234>

1000f27c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f27c:	defffe04 	addi	sp,sp,-8
1000f280:	dfc00115 	stw	ra,4(sp)
1000f284:	df000015 	stw	fp,0(sp)
1000f288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f28c:	00840074 	movhi	r2,4097
1000f290:	108e4e04 	addi	r2,r2,14648
1000f294:	10800017 	ldw	r2,0(r2)
1000f298:	10000526 	beq	r2,zero,1000f2b0 <alt_get_errno+0x34>
1000f29c:	00840074 	movhi	r2,4097
1000f2a0:	108e4e04 	addi	r2,r2,14648
1000f2a4:	10800017 	ldw	r2,0(r2)
1000f2a8:	103ee83a 	callr	r2
1000f2ac:	00000206 	br	1000f2b8 <alt_get_errno+0x3c>
1000f2b0:	00840074 	movhi	r2,4097
1000f2b4:	10951504 	addi	r2,r2,21588
}
1000f2b8:	e037883a 	mov	sp,fp
1000f2bc:	dfc00117 	ldw	ra,4(sp)
1000f2c0:	df000017 	ldw	fp,0(sp)
1000f2c4:	dec00204 	addi	sp,sp,8
1000f2c8:	f800283a 	ret

1000f2cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f2cc:	defffb04 	addi	sp,sp,-20
1000f2d0:	dfc00415 	stw	ra,16(sp)
1000f2d4:	df000315 	stw	fp,12(sp)
1000f2d8:	df000304 	addi	fp,sp,12
1000f2dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f2e0:	e0bfff17 	ldw	r2,-4(fp)
1000f2e4:	10000816 	blt	r2,zero,1000f308 <close+0x3c>
1000f2e8:	e13fff17 	ldw	r4,-4(fp)
1000f2ec:	01400304 	movi	r5,12
1000f2f0:	00037040 	call	10003704 <__mulsi3>
1000f2f4:	1007883a 	mov	r3,r2
1000f2f8:	00840074 	movhi	r2,4097
1000f2fc:	1089ca04 	addi	r2,r2,10024
1000f300:	1885883a 	add	r2,r3,r2
1000f304:	00000106 	br	1000f30c <close+0x40>
1000f308:	0005883a 	mov	r2,zero
1000f30c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f310:	e0bffd17 	ldw	r2,-12(fp)
1000f314:	10001926 	beq	r2,zero,1000f37c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f318:	e0bffd17 	ldw	r2,-12(fp)
1000f31c:	10800017 	ldw	r2,0(r2)
1000f320:	10800417 	ldw	r2,16(r2)
1000f324:	10000626 	beq	r2,zero,1000f340 <close+0x74>
1000f328:	e0bffd17 	ldw	r2,-12(fp)
1000f32c:	10800017 	ldw	r2,0(r2)
1000f330:	10800417 	ldw	r2,16(r2)
1000f334:	e13ffd17 	ldw	r4,-12(fp)
1000f338:	103ee83a 	callr	r2
1000f33c:	00000106 	br	1000f344 <close+0x78>
1000f340:	0005883a 	mov	r2,zero
1000f344:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f348:	e13fff17 	ldw	r4,-4(fp)
1000f34c:	000f9f00 	call	1000f9f0 <alt_release_fd>
    if (rval < 0)
1000f350:	e0bffe17 	ldw	r2,-8(fp)
1000f354:	1000070e 	bge	r2,zero,1000f374 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f358:	000f27c0 	call	1000f27c <alt_get_errno>
1000f35c:	1007883a 	mov	r3,r2
1000f360:	e0bffe17 	ldw	r2,-8(fp)
1000f364:	0085c83a 	sub	r2,zero,r2
1000f368:	18800015 	stw	r2,0(r3)
      return -1;
1000f36c:	00bfffc4 	movi	r2,-1
1000f370:	00000706 	br	1000f390 <close+0xc4>
    }
    return 0;
1000f374:	0005883a 	mov	r2,zero
1000f378:	00000506 	br	1000f390 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f37c:	000f27c0 	call	1000f27c <alt_get_errno>
1000f380:	1007883a 	mov	r3,r2
1000f384:	00801444 	movi	r2,81
1000f388:	18800015 	stw	r2,0(r3)
    return -1;
1000f38c:	00bfffc4 	movi	r2,-1
  }
}
1000f390:	e037883a 	mov	sp,fp
1000f394:	dfc00117 	ldw	ra,4(sp)
1000f398:	df000017 	ldw	fp,0(sp)
1000f39c:	dec00204 	addi	sp,sp,8
1000f3a0:	f800283a 	ret

1000f3a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f3a4:	defffc04 	addi	sp,sp,-16
1000f3a8:	df000315 	stw	fp,12(sp)
1000f3ac:	df000304 	addi	fp,sp,12
1000f3b0:	e13ffd15 	stw	r4,-12(fp)
1000f3b4:	e17ffe15 	stw	r5,-8(fp)
1000f3b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f3bc:	e0bfff17 	ldw	r2,-4(fp)
}
1000f3c0:	e037883a 	mov	sp,fp
1000f3c4:	df000017 	ldw	fp,0(sp)
1000f3c8:	dec00104 	addi	sp,sp,4
1000f3cc:	f800283a 	ret

1000f3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f3d0:	defffe04 	addi	sp,sp,-8
1000f3d4:	dfc00115 	stw	ra,4(sp)
1000f3d8:	df000015 	stw	fp,0(sp)
1000f3dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f3e0:	00840074 	movhi	r2,4097
1000f3e4:	108e4e04 	addi	r2,r2,14648
1000f3e8:	10800017 	ldw	r2,0(r2)
1000f3ec:	10000526 	beq	r2,zero,1000f404 <alt_get_errno+0x34>
1000f3f0:	00840074 	movhi	r2,4097
1000f3f4:	108e4e04 	addi	r2,r2,14648
1000f3f8:	10800017 	ldw	r2,0(r2)
1000f3fc:	103ee83a 	callr	r2
1000f400:	00000206 	br	1000f40c <alt_get_errno+0x3c>
1000f404:	00840074 	movhi	r2,4097
1000f408:	10951504 	addi	r2,r2,21588
}
1000f40c:	e037883a 	mov	sp,fp
1000f410:	dfc00117 	ldw	ra,4(sp)
1000f414:	df000017 	ldw	fp,0(sp)
1000f418:	dec00204 	addi	sp,sp,8
1000f41c:	f800283a 	ret

1000f420 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f420:	defffb04 	addi	sp,sp,-20
1000f424:	dfc00415 	stw	ra,16(sp)
1000f428:	df000315 	stw	fp,12(sp)
1000f42c:	df000304 	addi	fp,sp,12
1000f430:	e13ffe15 	stw	r4,-8(fp)
1000f434:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f438:	e0bffe17 	ldw	r2,-8(fp)
1000f43c:	10000816 	blt	r2,zero,1000f460 <fstat+0x40>
1000f440:	e13ffe17 	ldw	r4,-8(fp)
1000f444:	01400304 	movi	r5,12
1000f448:	00037040 	call	10003704 <__mulsi3>
1000f44c:	1007883a 	mov	r3,r2
1000f450:	00840074 	movhi	r2,4097
1000f454:	1089ca04 	addi	r2,r2,10024
1000f458:	1885883a 	add	r2,r3,r2
1000f45c:	00000106 	br	1000f464 <fstat+0x44>
1000f460:	0005883a 	mov	r2,zero
1000f464:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f468:	e0bffd17 	ldw	r2,-12(fp)
1000f46c:	10001026 	beq	r2,zero,1000f4b0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f470:	e0bffd17 	ldw	r2,-12(fp)
1000f474:	10800017 	ldw	r2,0(r2)
1000f478:	10800817 	ldw	r2,32(r2)
1000f47c:	10000726 	beq	r2,zero,1000f49c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f480:	e0bffd17 	ldw	r2,-12(fp)
1000f484:	10800017 	ldw	r2,0(r2)
1000f488:	10800817 	ldw	r2,32(r2)
1000f48c:	e13ffd17 	ldw	r4,-12(fp)
1000f490:	e17fff17 	ldw	r5,-4(fp)
1000f494:	103ee83a 	callr	r2
1000f498:	00000a06 	br	1000f4c4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f49c:	e0bfff17 	ldw	r2,-4(fp)
1000f4a0:	00c80004 	movi	r3,8192
1000f4a4:	10c00115 	stw	r3,4(r2)
      return 0;
1000f4a8:	0005883a 	mov	r2,zero
1000f4ac:	00000506 	br	1000f4c4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f4b0:	000f3d00 	call	1000f3d0 <alt_get_errno>
1000f4b4:	1007883a 	mov	r3,r2
1000f4b8:	00801444 	movi	r2,81
1000f4bc:	18800015 	stw	r2,0(r3)
    return -1;
1000f4c0:	00bfffc4 	movi	r2,-1
  }
}
1000f4c4:	e037883a 	mov	sp,fp
1000f4c8:	dfc00117 	ldw	ra,4(sp)
1000f4cc:	df000017 	ldw	fp,0(sp)
1000f4d0:	dec00204 	addi	sp,sp,8
1000f4d4:	f800283a 	ret

1000f4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f4d8:	defffe04 	addi	sp,sp,-8
1000f4dc:	dfc00115 	stw	ra,4(sp)
1000f4e0:	df000015 	stw	fp,0(sp)
1000f4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f4e8:	00840074 	movhi	r2,4097
1000f4ec:	108e4e04 	addi	r2,r2,14648
1000f4f0:	10800017 	ldw	r2,0(r2)
1000f4f4:	10000526 	beq	r2,zero,1000f50c <alt_get_errno+0x34>
1000f4f8:	00840074 	movhi	r2,4097
1000f4fc:	108e4e04 	addi	r2,r2,14648
1000f500:	10800017 	ldw	r2,0(r2)
1000f504:	103ee83a 	callr	r2
1000f508:	00000206 	br	1000f514 <alt_get_errno+0x3c>
1000f50c:	00840074 	movhi	r2,4097
1000f510:	10951504 	addi	r2,r2,21588
}
1000f514:	e037883a 	mov	sp,fp
1000f518:	dfc00117 	ldw	ra,4(sp)
1000f51c:	df000017 	ldw	fp,0(sp)
1000f520:	dec00204 	addi	sp,sp,8
1000f524:	f800283a 	ret

1000f528 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f528:	deffed04 	addi	sp,sp,-76
1000f52c:	dfc01215 	stw	ra,72(sp)
1000f530:	df001115 	stw	fp,68(sp)
1000f534:	df001104 	addi	fp,sp,68
1000f538:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f53c:	e0bfff17 	ldw	r2,-4(fp)
1000f540:	10000816 	blt	r2,zero,1000f564 <isatty+0x3c>
1000f544:	e13fff17 	ldw	r4,-4(fp)
1000f548:	01400304 	movi	r5,12
1000f54c:	00037040 	call	10003704 <__mulsi3>
1000f550:	1007883a 	mov	r3,r2
1000f554:	00840074 	movhi	r2,4097
1000f558:	1089ca04 	addi	r2,r2,10024
1000f55c:	1885883a 	add	r2,r3,r2
1000f560:	00000106 	br	1000f568 <isatty+0x40>
1000f564:	0005883a 	mov	r2,zero
1000f568:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f56c:	e0bfef17 	ldw	r2,-68(fp)
1000f570:	10000e26 	beq	r2,zero,1000f5ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f574:	e0bfef17 	ldw	r2,-68(fp)
1000f578:	10800017 	ldw	r2,0(r2)
1000f57c:	10800817 	ldw	r2,32(r2)
1000f580:	1000021e 	bne	r2,zero,1000f58c <isatty+0x64>
    {
      return 1;
1000f584:	00800044 	movi	r2,1
1000f588:	00000d06 	br	1000f5c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f58c:	e0bff004 	addi	r2,fp,-64
1000f590:	e13fff17 	ldw	r4,-4(fp)
1000f594:	100b883a 	mov	r5,r2
1000f598:	000f4200 	call	1000f420 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f59c:	e0bff117 	ldw	r2,-60(fp)
1000f5a0:	10880020 	cmpeqi	r2,r2,8192
1000f5a4:	10803fcc 	andi	r2,r2,255
1000f5a8:	00000506 	br	1000f5c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f5ac:	000f4d80 	call	1000f4d8 <alt_get_errno>
1000f5b0:	1007883a 	mov	r3,r2
1000f5b4:	00801444 	movi	r2,81
1000f5b8:	18800015 	stw	r2,0(r3)
    return 0;
1000f5bc:	0005883a 	mov	r2,zero
  }
}
1000f5c0:	e037883a 	mov	sp,fp
1000f5c4:	dfc00117 	ldw	ra,4(sp)
1000f5c8:	df000017 	ldw	fp,0(sp)
1000f5cc:	dec00204 	addi	sp,sp,8
1000f5d0:	f800283a 	ret

1000f5d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f5d4:	defffc04 	addi	sp,sp,-16
1000f5d8:	df000315 	stw	fp,12(sp)
1000f5dc:	df000304 	addi	fp,sp,12
1000f5e0:	e13ffd15 	stw	r4,-12(fp)
1000f5e4:	e17ffe15 	stw	r5,-8(fp)
1000f5e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f5ec:	e0fffe17 	ldw	r3,-8(fp)
1000f5f0:	e0bffd17 	ldw	r2,-12(fp)
1000f5f4:	18800c26 	beq	r3,r2,1000f628 <alt_load_section+0x54>
  {
    while( to != end )
1000f5f8:	00000806 	br	1000f61c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f5fc:	e0bffe17 	ldw	r2,-8(fp)
1000f600:	10c00104 	addi	r3,r2,4
1000f604:	e0fffe15 	stw	r3,-8(fp)
1000f608:	e0fffd17 	ldw	r3,-12(fp)
1000f60c:	19000104 	addi	r4,r3,4
1000f610:	e13ffd15 	stw	r4,-12(fp)
1000f614:	18c00017 	ldw	r3,0(r3)
1000f618:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f61c:	e0fffe17 	ldw	r3,-8(fp)
1000f620:	e0bfff17 	ldw	r2,-4(fp)
1000f624:	18bff51e 	bne	r3,r2,1000f5fc <__alt_data_end+0xf800f5fc>
    {
      *to++ = *from++;
    }
  }
}
1000f628:	e037883a 	mov	sp,fp
1000f62c:	df000017 	ldw	fp,0(sp)
1000f630:	dec00104 	addi	sp,sp,4
1000f634:	f800283a 	ret

1000f638 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f638:	defffe04 	addi	sp,sp,-8
1000f63c:	dfc00115 	stw	ra,4(sp)
1000f640:	df000015 	stw	fp,0(sp)
1000f644:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f648:	01040074 	movhi	r4,4097
1000f64c:	210e5304 	addi	r4,r4,14668
1000f650:	01440074 	movhi	r5,4097
1000f654:	29479704 	addi	r5,r5,7772
1000f658:	01840074 	movhi	r6,4097
1000f65c:	318e5304 	addi	r6,r6,14668
1000f660:	000f5d40 	call	1000f5d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f664:	01040034 	movhi	r4,4096
1000f668:	21000804 	addi	r4,r4,32
1000f66c:	01440034 	movhi	r5,4096
1000f670:	29400804 	addi	r5,r5,32
1000f674:	01840034 	movhi	r6,4096
1000f678:	31808b04 	addi	r6,r6,556
1000f67c:	000f5d40 	call	1000f5d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f680:	01040074 	movhi	r4,4097
1000f684:	21067504 	addi	r4,r4,6612
1000f688:	01440074 	movhi	r5,4097
1000f68c:	29467504 	addi	r5,r5,6612
1000f690:	01840074 	movhi	r6,4097
1000f694:	31879704 	addi	r6,r6,7772
1000f698:	000f5d40 	call	1000f5d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f69c:	00108b00 	call	100108b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f6a0:	0010a780 	call	10010a78 <alt_icache_flush_all>
}
1000f6a4:	e037883a 	mov	sp,fp
1000f6a8:	dfc00117 	ldw	ra,4(sp)
1000f6ac:	df000017 	ldw	fp,0(sp)
1000f6b0:	dec00204 	addi	sp,sp,8
1000f6b4:	f800283a 	ret

1000f6b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f6b8:	defffe04 	addi	sp,sp,-8
1000f6bc:	dfc00115 	stw	ra,4(sp)
1000f6c0:	df000015 	stw	fp,0(sp)
1000f6c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f6c8:	00840074 	movhi	r2,4097
1000f6cc:	108e4e04 	addi	r2,r2,14648
1000f6d0:	10800017 	ldw	r2,0(r2)
1000f6d4:	10000526 	beq	r2,zero,1000f6ec <alt_get_errno+0x34>
1000f6d8:	00840074 	movhi	r2,4097
1000f6dc:	108e4e04 	addi	r2,r2,14648
1000f6e0:	10800017 	ldw	r2,0(r2)
1000f6e4:	103ee83a 	callr	r2
1000f6e8:	00000206 	br	1000f6f4 <alt_get_errno+0x3c>
1000f6ec:	00840074 	movhi	r2,4097
1000f6f0:	10951504 	addi	r2,r2,21588
}
1000f6f4:	e037883a 	mov	sp,fp
1000f6f8:	dfc00117 	ldw	ra,4(sp)
1000f6fc:	df000017 	ldw	fp,0(sp)
1000f700:	dec00204 	addi	sp,sp,8
1000f704:	f800283a 	ret

1000f708 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f708:	defff904 	addi	sp,sp,-28
1000f70c:	dfc00615 	stw	ra,24(sp)
1000f710:	df000515 	stw	fp,20(sp)
1000f714:	df000504 	addi	fp,sp,20
1000f718:	e13ffd15 	stw	r4,-12(fp)
1000f71c:	e17ffe15 	stw	r5,-8(fp)
1000f720:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f724:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f728:	e0bffd17 	ldw	r2,-12(fp)
1000f72c:	10000816 	blt	r2,zero,1000f750 <lseek+0x48>
1000f730:	e13ffd17 	ldw	r4,-12(fp)
1000f734:	01400304 	movi	r5,12
1000f738:	00037040 	call	10003704 <__mulsi3>
1000f73c:	1007883a 	mov	r3,r2
1000f740:	00840074 	movhi	r2,4097
1000f744:	1089ca04 	addi	r2,r2,10024
1000f748:	1885883a 	add	r2,r3,r2
1000f74c:	00000106 	br	1000f754 <lseek+0x4c>
1000f750:	0005883a 	mov	r2,zero
1000f754:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f758:	e0bffc17 	ldw	r2,-16(fp)
1000f75c:	10001026 	beq	r2,zero,1000f7a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f760:	e0bffc17 	ldw	r2,-16(fp)
1000f764:	10800017 	ldw	r2,0(r2)
1000f768:	10800717 	ldw	r2,28(r2)
1000f76c:	10000926 	beq	r2,zero,1000f794 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f770:	e0bffc17 	ldw	r2,-16(fp)
1000f774:	10800017 	ldw	r2,0(r2)
1000f778:	10800717 	ldw	r2,28(r2)
1000f77c:	e13ffc17 	ldw	r4,-16(fp)
1000f780:	e17ffe17 	ldw	r5,-8(fp)
1000f784:	e1bfff17 	ldw	r6,-4(fp)
1000f788:	103ee83a 	callr	r2
1000f78c:	e0bffb15 	stw	r2,-20(fp)
1000f790:	00000506 	br	1000f7a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f794:	00bfde84 	movi	r2,-134
1000f798:	e0bffb15 	stw	r2,-20(fp)
1000f79c:	00000206 	br	1000f7a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f7a0:	00bfebc4 	movi	r2,-81
1000f7a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f7a8:	e0bffb17 	ldw	r2,-20(fp)
1000f7ac:	1000070e 	bge	r2,zero,1000f7cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f7b0:	000f6b80 	call	1000f6b8 <alt_get_errno>
1000f7b4:	1007883a 	mov	r3,r2
1000f7b8:	e0bffb17 	ldw	r2,-20(fp)
1000f7bc:	0085c83a 	sub	r2,zero,r2
1000f7c0:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f7c4:	00bfffc4 	movi	r2,-1
1000f7c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f7cc:	e0bffb17 	ldw	r2,-20(fp)
}
1000f7d0:	e037883a 	mov	sp,fp
1000f7d4:	dfc00117 	ldw	ra,4(sp)
1000f7d8:	df000017 	ldw	fp,0(sp)
1000f7dc:	dec00204 	addi	sp,sp,8
1000f7e0:	f800283a 	ret

1000f7e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f7e4:	defffd04 	addi	sp,sp,-12
1000f7e8:	dfc00215 	stw	ra,8(sp)
1000f7ec:	df000115 	stw	fp,4(sp)
1000f7f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f7f4:	0009883a 	mov	r4,zero
1000f7f8:	000fca80 	call	1000fca8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f7fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f800:	000fcdc0 	call	1000fcdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f804:	01040074 	movhi	r4,4097
1000f808:	21078d04 	addi	r4,r4,7732
1000f80c:	01440074 	movhi	r5,4097
1000f810:	29478d04 	addi	r5,r5,7732
1000f814:	01840074 	movhi	r6,4097
1000f818:	31878d04 	addi	r6,r6,7732
1000f81c:	0010e440 	call	10010e44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f820:	00109c00 	call	100109c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f824:	01040074 	movhi	r4,4097
1000f828:	21028704 	addi	r4,r4,2588
1000f82c:	00116300 	call	10011630 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f830:	d126d417 	ldw	r4,-25776(gp)
1000f834:	d0e6d517 	ldw	r3,-25772(gp)
1000f838:	d0a6d617 	ldw	r2,-25768(gp)
1000f83c:	180b883a 	mov	r5,r3
1000f840:	100d883a 	mov	r6,r2
1000f844:	00002680 	call	10000268 <main>
1000f848:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f84c:	01000044 	movi	r4,1
1000f850:	000f2cc0 	call	1000f2cc <close>
  exit (result);
1000f854:	e13fff17 	ldw	r4,-4(fp)
1000f858:	00116440 	call	10011644 <exit>

1000f85c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f85c:	defffe04 	addi	sp,sp,-8
1000f860:	df000115 	stw	fp,4(sp)
1000f864:	df000104 	addi	fp,sp,4
1000f868:	e13fff15 	stw	r4,-4(fp)
}
1000f86c:	e037883a 	mov	sp,fp
1000f870:	df000017 	ldw	fp,0(sp)
1000f874:	dec00104 	addi	sp,sp,4
1000f878:	f800283a 	ret

1000f87c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f87c:	defffe04 	addi	sp,sp,-8
1000f880:	df000115 	stw	fp,4(sp)
1000f884:	df000104 	addi	fp,sp,4
1000f888:	e13fff15 	stw	r4,-4(fp)
}
1000f88c:	e037883a 	mov	sp,fp
1000f890:	df000017 	ldw	fp,0(sp)
1000f894:	dec00104 	addi	sp,sp,4
1000f898:	f800283a 	ret

1000f89c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f89c:	defffe04 	addi	sp,sp,-8
1000f8a0:	dfc00115 	stw	ra,4(sp)
1000f8a4:	df000015 	stw	fp,0(sp)
1000f8a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f8ac:	00840074 	movhi	r2,4097
1000f8b0:	108e4e04 	addi	r2,r2,14648
1000f8b4:	10800017 	ldw	r2,0(r2)
1000f8b8:	10000526 	beq	r2,zero,1000f8d0 <alt_get_errno+0x34>
1000f8bc:	00840074 	movhi	r2,4097
1000f8c0:	108e4e04 	addi	r2,r2,14648
1000f8c4:	10800017 	ldw	r2,0(r2)
1000f8c8:	103ee83a 	callr	r2
1000f8cc:	00000206 	br	1000f8d8 <alt_get_errno+0x3c>
1000f8d0:	00840074 	movhi	r2,4097
1000f8d4:	10951504 	addi	r2,r2,21588
}
1000f8d8:	e037883a 	mov	sp,fp
1000f8dc:	dfc00117 	ldw	ra,4(sp)
1000f8e0:	df000017 	ldw	fp,0(sp)
1000f8e4:	dec00204 	addi	sp,sp,8
1000f8e8:	f800283a 	ret

1000f8ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f8ec:	defff904 	addi	sp,sp,-28
1000f8f0:	dfc00615 	stw	ra,24(sp)
1000f8f4:	df000515 	stw	fp,20(sp)
1000f8f8:	df000504 	addi	fp,sp,20
1000f8fc:	e13ffd15 	stw	r4,-12(fp)
1000f900:	e17ffe15 	stw	r5,-8(fp)
1000f904:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f908:	e0bffd17 	ldw	r2,-12(fp)
1000f90c:	10000816 	blt	r2,zero,1000f930 <read+0x44>
1000f910:	e13ffd17 	ldw	r4,-12(fp)
1000f914:	01400304 	movi	r5,12
1000f918:	00037040 	call	10003704 <__mulsi3>
1000f91c:	1007883a 	mov	r3,r2
1000f920:	00840074 	movhi	r2,4097
1000f924:	1089ca04 	addi	r2,r2,10024
1000f928:	1885883a 	add	r2,r3,r2
1000f92c:	00000106 	br	1000f934 <read+0x48>
1000f930:	0005883a 	mov	r2,zero
1000f934:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f938:	e0bffb17 	ldw	r2,-20(fp)
1000f93c:	10002226 	beq	r2,zero,1000f9c8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f940:	e0bffb17 	ldw	r2,-20(fp)
1000f944:	10800217 	ldw	r2,8(r2)
1000f948:	108000cc 	andi	r2,r2,3
1000f94c:	10800060 	cmpeqi	r2,r2,1
1000f950:	1000181e 	bne	r2,zero,1000f9b4 <read+0xc8>
        (fd->dev->read))
1000f954:	e0bffb17 	ldw	r2,-20(fp)
1000f958:	10800017 	ldw	r2,0(r2)
1000f95c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f960:	10001426 	beq	r2,zero,1000f9b4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f964:	e0bffb17 	ldw	r2,-20(fp)
1000f968:	10800017 	ldw	r2,0(r2)
1000f96c:	10800517 	ldw	r2,20(r2)
1000f970:	e0ffff17 	ldw	r3,-4(fp)
1000f974:	e13ffb17 	ldw	r4,-20(fp)
1000f978:	e17ffe17 	ldw	r5,-8(fp)
1000f97c:	180d883a 	mov	r6,r3
1000f980:	103ee83a 	callr	r2
1000f984:	e0bffc15 	stw	r2,-16(fp)
1000f988:	e0bffc17 	ldw	r2,-16(fp)
1000f98c:	1000070e 	bge	r2,zero,1000f9ac <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f990:	000f89c0 	call	1000f89c <alt_get_errno>
1000f994:	1007883a 	mov	r3,r2
1000f998:	e0bffc17 	ldw	r2,-16(fp)
1000f99c:	0085c83a 	sub	r2,zero,r2
1000f9a0:	18800015 	stw	r2,0(r3)
          return -1;
1000f9a4:	00bfffc4 	movi	r2,-1
1000f9a8:	00000c06 	br	1000f9dc <read+0xf0>
        }
        return rval;
1000f9ac:	e0bffc17 	ldw	r2,-16(fp)
1000f9b0:	00000a06 	br	1000f9dc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f9b4:	000f89c0 	call	1000f89c <alt_get_errno>
1000f9b8:	1007883a 	mov	r3,r2
1000f9bc:	00800344 	movi	r2,13
1000f9c0:	18800015 	stw	r2,0(r3)
1000f9c4:	00000406 	br	1000f9d8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f9c8:	000f89c0 	call	1000f89c <alt_get_errno>
1000f9cc:	1007883a 	mov	r3,r2
1000f9d0:	00801444 	movi	r2,81
1000f9d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f9d8:	00bfffc4 	movi	r2,-1
}
1000f9dc:	e037883a 	mov	sp,fp
1000f9e0:	dfc00117 	ldw	ra,4(sp)
1000f9e4:	df000017 	ldw	fp,0(sp)
1000f9e8:	dec00204 	addi	sp,sp,8
1000f9ec:	f800283a 	ret

1000f9f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f9f0:	defffc04 	addi	sp,sp,-16
1000f9f4:	dfc00315 	stw	ra,12(sp)
1000f9f8:	df000215 	stw	fp,8(sp)
1000f9fc:	dc000115 	stw	r16,4(sp)
1000fa00:	df000204 	addi	fp,sp,8
1000fa04:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000fa08:	e0bffe17 	ldw	r2,-8(fp)
1000fa0c:	108000d0 	cmplti	r2,r2,3
1000fa10:	1000111e 	bne	r2,zero,1000fa58 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fa14:	04040074 	movhi	r16,4097
1000fa18:	8409ca04 	addi	r16,r16,10024
1000fa1c:	e0bffe17 	ldw	r2,-8(fp)
1000fa20:	1009883a 	mov	r4,r2
1000fa24:	01400304 	movi	r5,12
1000fa28:	00037040 	call	10003704 <__mulsi3>
1000fa2c:	8085883a 	add	r2,r16,r2
1000fa30:	10800204 	addi	r2,r2,8
1000fa34:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000fa38:	04040074 	movhi	r16,4097
1000fa3c:	8409ca04 	addi	r16,r16,10024
1000fa40:	e0bffe17 	ldw	r2,-8(fp)
1000fa44:	1009883a 	mov	r4,r2
1000fa48:	01400304 	movi	r5,12
1000fa4c:	00037040 	call	10003704 <__mulsi3>
1000fa50:	8085883a 	add	r2,r16,r2
1000fa54:	10000015 	stw	zero,0(r2)
  }
}
1000fa58:	e6ffff04 	addi	sp,fp,-4
1000fa5c:	dfc00217 	ldw	ra,8(sp)
1000fa60:	df000117 	ldw	fp,4(sp)
1000fa64:	dc000017 	ldw	r16,0(sp)
1000fa68:	dec00304 	addi	sp,sp,12
1000fa6c:	f800283a 	ret

1000fa70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fa70:	defff904 	addi	sp,sp,-28
1000fa74:	df000615 	stw	fp,24(sp)
1000fa78:	df000604 	addi	fp,sp,24
1000fa7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fa80:	0005303a 	rdctl	r2,status
1000fa84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fa88:	e0fffc17 	ldw	r3,-16(fp)
1000fa8c:	00bfff84 	movi	r2,-2
1000fa90:	1884703a 	and	r2,r3,r2
1000fa94:	1001703a 	wrctl	status,r2
  
  return context;
1000fa98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000fa9c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000faa0:	d0a00d17 	ldw	r2,-32716(gp)
1000faa4:	10c000c4 	addi	r3,r2,3
1000faa8:	00bfff04 	movi	r2,-4
1000faac:	1884703a 	and	r2,r3,r2
1000fab0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fab4:	d0e00d17 	ldw	r3,-32716(gp)
1000fab8:	e0bfff17 	ldw	r2,-4(fp)
1000fabc:	1887883a 	add	r3,r3,r2
1000fac0:	00860034 	movhi	r2,6144
1000fac4:	10800004 	addi	r2,r2,0
1000fac8:	10c0062e 	bgeu	r2,r3,1000fae4 <sbrk+0x74>
1000facc:	e0bffa17 	ldw	r2,-24(fp)
1000fad0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fad4:	e0bffd17 	ldw	r2,-12(fp)
1000fad8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fadc:	00bfffc4 	movi	r2,-1
1000fae0:	00000b06 	br	1000fb10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000fae4:	d0a00d17 	ldw	r2,-32716(gp)
1000fae8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000faec:	d0e00d17 	ldw	r3,-32716(gp)
1000faf0:	e0bfff17 	ldw	r2,-4(fp)
1000faf4:	1885883a 	add	r2,r3,r2
1000faf8:	d0a00d15 	stw	r2,-32716(gp)
1000fafc:	e0bffa17 	ldw	r2,-24(fp)
1000fb00:	e0bffe15 	stw	r2,-8(fp)
1000fb04:	e0bffe17 	ldw	r2,-8(fp)
1000fb08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fb0c:	e0bffb17 	ldw	r2,-20(fp)
} 
1000fb10:	e037883a 	mov	sp,fp
1000fb14:	df000017 	ldw	fp,0(sp)
1000fb18:	dec00104 	addi	sp,sp,4
1000fb1c:	f800283a 	ret

1000fb20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fb20:	defffe04 	addi	sp,sp,-8
1000fb24:	dfc00115 	stw	ra,4(sp)
1000fb28:	df000015 	stw	fp,0(sp)
1000fb2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fb30:	00840074 	movhi	r2,4097
1000fb34:	108e4e04 	addi	r2,r2,14648
1000fb38:	10800017 	ldw	r2,0(r2)
1000fb3c:	10000526 	beq	r2,zero,1000fb54 <alt_get_errno+0x34>
1000fb40:	00840074 	movhi	r2,4097
1000fb44:	108e4e04 	addi	r2,r2,14648
1000fb48:	10800017 	ldw	r2,0(r2)
1000fb4c:	103ee83a 	callr	r2
1000fb50:	00000206 	br	1000fb5c <alt_get_errno+0x3c>
1000fb54:	00840074 	movhi	r2,4097
1000fb58:	10951504 	addi	r2,r2,21588
}
1000fb5c:	e037883a 	mov	sp,fp
1000fb60:	dfc00117 	ldw	ra,4(sp)
1000fb64:	df000017 	ldw	fp,0(sp)
1000fb68:	dec00204 	addi	sp,sp,8
1000fb6c:	f800283a 	ret

1000fb70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fb70:	defff904 	addi	sp,sp,-28
1000fb74:	dfc00615 	stw	ra,24(sp)
1000fb78:	df000515 	stw	fp,20(sp)
1000fb7c:	df000504 	addi	fp,sp,20
1000fb80:	e13ffd15 	stw	r4,-12(fp)
1000fb84:	e17ffe15 	stw	r5,-8(fp)
1000fb88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fb8c:	e0bffd17 	ldw	r2,-12(fp)
1000fb90:	10000816 	blt	r2,zero,1000fbb4 <write+0x44>
1000fb94:	e13ffd17 	ldw	r4,-12(fp)
1000fb98:	01400304 	movi	r5,12
1000fb9c:	00037040 	call	10003704 <__mulsi3>
1000fba0:	1007883a 	mov	r3,r2
1000fba4:	00840074 	movhi	r2,4097
1000fba8:	1089ca04 	addi	r2,r2,10024
1000fbac:	1885883a 	add	r2,r3,r2
1000fbb0:	00000106 	br	1000fbb8 <write+0x48>
1000fbb4:	0005883a 	mov	r2,zero
1000fbb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fbbc:	e0bffb17 	ldw	r2,-20(fp)
1000fbc0:	10002126 	beq	r2,zero,1000fc48 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000fbc4:	e0bffb17 	ldw	r2,-20(fp)
1000fbc8:	10800217 	ldw	r2,8(r2)
1000fbcc:	108000cc 	andi	r2,r2,3
1000fbd0:	10001826 	beq	r2,zero,1000fc34 <write+0xc4>
1000fbd4:	e0bffb17 	ldw	r2,-20(fp)
1000fbd8:	10800017 	ldw	r2,0(r2)
1000fbdc:	10800617 	ldw	r2,24(r2)
1000fbe0:	10001426 	beq	r2,zero,1000fc34 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fbe4:	e0bffb17 	ldw	r2,-20(fp)
1000fbe8:	10800017 	ldw	r2,0(r2)
1000fbec:	10800617 	ldw	r2,24(r2)
1000fbf0:	e0ffff17 	ldw	r3,-4(fp)
1000fbf4:	e13ffb17 	ldw	r4,-20(fp)
1000fbf8:	e17ffe17 	ldw	r5,-8(fp)
1000fbfc:	180d883a 	mov	r6,r3
1000fc00:	103ee83a 	callr	r2
1000fc04:	e0bffc15 	stw	r2,-16(fp)
1000fc08:	e0bffc17 	ldw	r2,-16(fp)
1000fc0c:	1000070e 	bge	r2,zero,1000fc2c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fc10:	000fb200 	call	1000fb20 <alt_get_errno>
1000fc14:	1007883a 	mov	r3,r2
1000fc18:	e0bffc17 	ldw	r2,-16(fp)
1000fc1c:	0085c83a 	sub	r2,zero,r2
1000fc20:	18800015 	stw	r2,0(r3)
        return -1;
1000fc24:	00bfffc4 	movi	r2,-1
1000fc28:	00000c06 	br	1000fc5c <write+0xec>
      }
      return rval;
1000fc2c:	e0bffc17 	ldw	r2,-16(fp)
1000fc30:	00000a06 	br	1000fc5c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fc34:	000fb200 	call	1000fb20 <alt_get_errno>
1000fc38:	1007883a 	mov	r3,r2
1000fc3c:	00800344 	movi	r2,13
1000fc40:	18800015 	stw	r2,0(r3)
1000fc44:	00000406 	br	1000fc58 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fc48:	000fb200 	call	1000fb20 <alt_get_errno>
1000fc4c:	1007883a 	mov	r3,r2
1000fc50:	00801444 	movi	r2,81
1000fc54:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fc58:	00bfffc4 	movi	r2,-1
}
1000fc5c:	e037883a 	mov	sp,fp
1000fc60:	dfc00117 	ldw	ra,4(sp)
1000fc64:	df000017 	ldw	fp,0(sp)
1000fc68:	dec00204 	addi	sp,sp,8
1000fc6c:	f800283a 	ret

1000fc70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fc70:	defffd04 	addi	sp,sp,-12
1000fc74:	dfc00215 	stw	ra,8(sp)
1000fc78:	df000115 	stw	fp,4(sp)
1000fc7c:	df000104 	addi	fp,sp,4
1000fc80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fc84:	e13fff17 	ldw	r4,-4(fp)
1000fc88:	01440074 	movhi	r5,4097
1000fc8c:	294e4b04 	addi	r5,r5,14636
1000fc90:	001091c0 	call	1001091c <alt_dev_llist_insert>
}
1000fc94:	e037883a 	mov	sp,fp
1000fc98:	dfc00117 	ldw	ra,4(sp)
1000fc9c:	df000017 	ldw	fp,0(sp)
1000fca0:	dec00204 	addi	sp,sp,8
1000fca4:	f800283a 	ret

1000fca8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fca8:	defffd04 	addi	sp,sp,-12
1000fcac:	dfc00215 	stw	ra,8(sp)
1000fcb0:	df000115 	stw	fp,4(sp)
1000fcb4:	df000104 	addi	fp,sp,4
1000fcb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000fcbc:	00112fc0 	call	100112fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fcc0:	00800044 	movi	r2,1
1000fcc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fcc8:	e037883a 	mov	sp,fp
1000fccc:	dfc00117 	ldw	ra,4(sp)
1000fcd0:	df000017 	ldw	fp,0(sp)
1000fcd4:	dec00204 	addi	sp,sp,8
1000fcd8:	f800283a 	ret

1000fcdc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fcdc:	defffe04 	addi	sp,sp,-8
1000fce0:	dfc00115 	stw	ra,4(sp)
1000fce4:	df000015 	stw	fp,0(sp)
1000fce8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fcec:	01040074 	movhi	r4,4097
1000fcf0:	210a3404 	addi	r4,r4,10448
1000fcf4:	000b883a 	mov	r5,zero
1000fcf8:	01800144 	movi	r6,5
1000fcfc:	000fe880 	call	1000fe88 <altera_avalon_jtag_uart_init>
1000fd00:	01040074 	movhi	r4,4097
1000fd04:	210a2a04 	addi	r4,r4,10408
1000fd08:	000fc700 	call	1000fc70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fd0c:	0001883a 	nop
}
1000fd10:	e037883a 	mov	sp,fp
1000fd14:	dfc00117 	ldw	ra,4(sp)
1000fd18:	df000017 	ldw	fp,0(sp)
1000fd1c:	dec00204 	addi	sp,sp,8
1000fd20:	f800283a 	ret

1000fd24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fd24:	defffa04 	addi	sp,sp,-24
1000fd28:	dfc00515 	stw	ra,20(sp)
1000fd2c:	df000415 	stw	fp,16(sp)
1000fd30:	df000404 	addi	fp,sp,16
1000fd34:	e13ffd15 	stw	r4,-12(fp)
1000fd38:	e17ffe15 	stw	r5,-8(fp)
1000fd3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fd40:	e0bffd17 	ldw	r2,-12(fp)
1000fd44:	10800017 	ldw	r2,0(r2)
1000fd48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fd4c:	e0bffc17 	ldw	r2,-16(fp)
1000fd50:	10c00a04 	addi	r3,r2,40
1000fd54:	e0bffd17 	ldw	r2,-12(fp)
1000fd58:	10800217 	ldw	r2,8(r2)
1000fd5c:	1809883a 	mov	r4,r3
1000fd60:	e17ffe17 	ldw	r5,-8(fp)
1000fd64:	e1bfff17 	ldw	r6,-4(fp)
1000fd68:	100f883a 	mov	r7,r2
1000fd6c:	001034c0 	call	1001034c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fd70:	e037883a 	mov	sp,fp
1000fd74:	dfc00117 	ldw	ra,4(sp)
1000fd78:	df000017 	ldw	fp,0(sp)
1000fd7c:	dec00204 	addi	sp,sp,8
1000fd80:	f800283a 	ret

1000fd84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fd84:	defffa04 	addi	sp,sp,-24
1000fd88:	dfc00515 	stw	ra,20(sp)
1000fd8c:	df000415 	stw	fp,16(sp)
1000fd90:	df000404 	addi	fp,sp,16
1000fd94:	e13ffd15 	stw	r4,-12(fp)
1000fd98:	e17ffe15 	stw	r5,-8(fp)
1000fd9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fda0:	e0bffd17 	ldw	r2,-12(fp)
1000fda4:	10800017 	ldw	r2,0(r2)
1000fda8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fdac:	e0bffc17 	ldw	r2,-16(fp)
1000fdb0:	10c00a04 	addi	r3,r2,40
1000fdb4:	e0bffd17 	ldw	r2,-12(fp)
1000fdb8:	10800217 	ldw	r2,8(r2)
1000fdbc:	1809883a 	mov	r4,r3
1000fdc0:	e17ffe17 	ldw	r5,-8(fp)
1000fdc4:	e1bfff17 	ldw	r6,-4(fp)
1000fdc8:	100f883a 	mov	r7,r2
1000fdcc:	00105580 	call	10010558 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fdd0:	e037883a 	mov	sp,fp
1000fdd4:	dfc00117 	ldw	ra,4(sp)
1000fdd8:	df000017 	ldw	fp,0(sp)
1000fddc:	dec00204 	addi	sp,sp,8
1000fde0:	f800283a 	ret

1000fde4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fde4:	defffc04 	addi	sp,sp,-16
1000fde8:	dfc00315 	stw	ra,12(sp)
1000fdec:	df000215 	stw	fp,8(sp)
1000fdf0:	df000204 	addi	fp,sp,8
1000fdf4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fdf8:	e0bfff17 	ldw	r2,-4(fp)
1000fdfc:	10800017 	ldw	r2,0(r2)
1000fe00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fe04:	e0bffe17 	ldw	r2,-8(fp)
1000fe08:	10c00a04 	addi	r3,r2,40
1000fe0c:	e0bfff17 	ldw	r2,-4(fp)
1000fe10:	10800217 	ldw	r2,8(r2)
1000fe14:	1809883a 	mov	r4,r3
1000fe18:	100b883a 	mov	r5,r2
1000fe1c:	00101f80 	call	100101f8 <altera_avalon_jtag_uart_close>
}
1000fe20:	e037883a 	mov	sp,fp
1000fe24:	dfc00117 	ldw	ra,4(sp)
1000fe28:	df000017 	ldw	fp,0(sp)
1000fe2c:	dec00204 	addi	sp,sp,8
1000fe30:	f800283a 	ret

1000fe34 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fe34:	defffa04 	addi	sp,sp,-24
1000fe38:	dfc00515 	stw	ra,20(sp)
1000fe3c:	df000415 	stw	fp,16(sp)
1000fe40:	df000404 	addi	fp,sp,16
1000fe44:	e13ffd15 	stw	r4,-12(fp)
1000fe48:	e17ffe15 	stw	r5,-8(fp)
1000fe4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fe50:	e0bffd17 	ldw	r2,-12(fp)
1000fe54:	10800017 	ldw	r2,0(r2)
1000fe58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fe5c:	e0bffc17 	ldw	r2,-16(fp)
1000fe60:	10800a04 	addi	r2,r2,40
1000fe64:	1009883a 	mov	r4,r2
1000fe68:	e17ffe17 	ldw	r5,-8(fp)
1000fe6c:	e1bfff17 	ldw	r6,-4(fp)
1000fe70:	00102600 	call	10010260 <altera_avalon_jtag_uart_ioctl>
}
1000fe74:	e037883a 	mov	sp,fp
1000fe78:	dfc00117 	ldw	ra,4(sp)
1000fe7c:	df000017 	ldw	fp,0(sp)
1000fe80:	dec00204 	addi	sp,sp,8
1000fe84:	f800283a 	ret

1000fe88 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fe88:	defffa04 	addi	sp,sp,-24
1000fe8c:	dfc00515 	stw	ra,20(sp)
1000fe90:	df000415 	stw	fp,16(sp)
1000fe94:	df000404 	addi	fp,sp,16
1000fe98:	e13ffd15 	stw	r4,-12(fp)
1000fe9c:	e17ffe15 	stw	r5,-8(fp)
1000fea0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fea4:	e0bffd17 	ldw	r2,-12(fp)
1000fea8:	00c00044 	movi	r3,1
1000feac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000feb0:	e0bffd17 	ldw	r2,-12(fp)
1000feb4:	10800017 	ldw	r2,0(r2)
1000feb8:	10800104 	addi	r2,r2,4
1000febc:	1007883a 	mov	r3,r2
1000fec0:	e0bffd17 	ldw	r2,-12(fp)
1000fec4:	10800817 	ldw	r2,32(r2)
1000fec8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fecc:	e0fffe17 	ldw	r3,-8(fp)
1000fed0:	e0bfff17 	ldw	r2,-4(fp)
1000fed4:	d8000015 	stw	zero,0(sp)
1000fed8:	1809883a 	mov	r4,r3
1000fedc:	100b883a 	mov	r5,r2
1000fee0:	01840074 	movhi	r6,4097
1000fee4:	31bfd304 	addi	r6,r6,-180
1000fee8:	e1fffd17 	ldw	r7,-12(fp)
1000feec:	0010a940 	call	10010a94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fef0:	e0bffd17 	ldw	r2,-12(fp)
1000fef4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fef8:	e0bffd17 	ldw	r2,-12(fp)
1000fefc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000ff00:	00840074 	movhi	r2,4097
1000ff04:	10951a04 	addi	r2,r2,21608
1000ff08:	10800017 	ldw	r2,0(r2)
1000ff0c:	1809883a 	mov	r4,r3
1000ff10:	100b883a 	mov	r5,r2
1000ff14:	01840074 	movhi	r6,4097
1000ff18:	31805404 	addi	r6,r6,336
1000ff1c:	e1fffd17 	ldw	r7,-12(fp)
1000ff20:	00107700 	call	10010770 <alt_alarm_start>
1000ff24:	1000040e 	bge	r2,zero,1000ff38 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000ff28:	e0fffd17 	ldw	r3,-12(fp)
1000ff2c:	00a00034 	movhi	r2,32768
1000ff30:	10bfffc4 	addi	r2,r2,-1
1000ff34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000ff38:	e037883a 	mov	sp,fp
1000ff3c:	dfc00117 	ldw	ra,4(sp)
1000ff40:	df000017 	ldw	fp,0(sp)
1000ff44:	dec00204 	addi	sp,sp,8
1000ff48:	f800283a 	ret

1000ff4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000ff4c:	defff804 	addi	sp,sp,-32
1000ff50:	df000715 	stw	fp,28(sp)
1000ff54:	df000704 	addi	fp,sp,28
1000ff58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000ff5c:	e0bfff17 	ldw	r2,-4(fp)
1000ff60:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000ff64:	e0bffb17 	ldw	r2,-20(fp)
1000ff68:	10800017 	ldw	r2,0(r2)
1000ff6c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ff70:	e0bffc17 	ldw	r2,-16(fp)
1000ff74:	10800104 	addi	r2,r2,4
1000ff78:	10800037 	ldwio	r2,0(r2)
1000ff7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000ff80:	e0bffd17 	ldw	r2,-12(fp)
1000ff84:	1080c00c 	andi	r2,r2,768
1000ff88:	1000011e 	bne	r2,zero,1000ff90 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000ff8c:	00006c06 	br	10010140 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000ff90:	e0bffd17 	ldw	r2,-12(fp)
1000ff94:	1080400c 	andi	r2,r2,256
1000ff98:	10003426 	beq	r2,zero,1001006c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000ff9c:	00800074 	movhi	r2,1
1000ffa0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ffa4:	e0bffb17 	ldw	r2,-20(fp)
1000ffa8:	10800a17 	ldw	r2,40(r2)
1000ffac:	10800044 	addi	r2,r2,1
1000ffb0:	1081ffcc 	andi	r2,r2,2047
1000ffb4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000ffb8:	e0bffb17 	ldw	r2,-20(fp)
1000ffbc:	10c00b17 	ldw	r3,44(r2)
1000ffc0:	e0bffe17 	ldw	r2,-8(fp)
1000ffc4:	1880011e 	bne	r3,r2,1000ffcc <altera_avalon_jtag_uart_irq+0x80>
          break;
1000ffc8:	00001606 	br	10010024 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000ffcc:	e0bffc17 	ldw	r2,-16(fp)
1000ffd0:	10800037 	ldwio	r2,0(r2)
1000ffd4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000ffd8:	e0bff917 	ldw	r2,-28(fp)
1000ffdc:	10a0000c 	andi	r2,r2,32768
1000ffe0:	1000011e 	bne	r2,zero,1000ffe8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000ffe4:	00000f06 	br	10010024 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000ffe8:	e0bffb17 	ldw	r2,-20(fp)
1000ffec:	10800a17 	ldw	r2,40(r2)
1000fff0:	e0fff917 	ldw	r3,-28(fp)
1000fff4:	1809883a 	mov	r4,r3
1000fff8:	e0fffb17 	ldw	r3,-20(fp)
1000fffc:	1885883a 	add	r2,r3,r2
10010000:	10800e04 	addi	r2,r2,56
10010004:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010008:	e0bffb17 	ldw	r2,-20(fp)
1001000c:	10800a17 	ldw	r2,40(r2)
10010010:	10800044 	addi	r2,r2,1
10010014:	10c1ffcc 	andi	r3,r2,2047
10010018:	e0bffb17 	ldw	r2,-20(fp)
1001001c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010020:	003fe006 	br	1000ffa4 <__alt_data_end+0xf800ffa4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010024:	e0bff917 	ldw	r2,-28(fp)
10010028:	10bfffec 	andhi	r2,r2,65535
1001002c:	10000f26 	beq	r2,zero,1001006c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010030:	e0bffb17 	ldw	r2,-20(fp)
10010034:	10c00817 	ldw	r3,32(r2)
10010038:	00bfff84 	movi	r2,-2
1001003c:	1886703a 	and	r3,r3,r2
10010040:	e0bffb17 	ldw	r2,-20(fp)
10010044:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010048:	e0bffc17 	ldw	r2,-16(fp)
1001004c:	10800104 	addi	r2,r2,4
10010050:	1007883a 	mov	r3,r2
10010054:	e0bffb17 	ldw	r2,-20(fp)
10010058:	10800817 	ldw	r2,32(r2)
1001005c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010060:	e0bffc17 	ldw	r2,-16(fp)
10010064:	10800104 	addi	r2,r2,4
10010068:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1001006c:	e0bffd17 	ldw	r2,-12(fp)
10010070:	1080800c 	andi	r2,r2,512
10010074:	10003126 	beq	r2,zero,1001013c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010078:	e0bffd17 	ldw	r2,-12(fp)
1001007c:	1004d43a 	srli	r2,r2,16
10010080:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010084:	00001406 	br	100100d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010088:	e0bffc17 	ldw	r2,-16(fp)
1001008c:	e0fffb17 	ldw	r3,-20(fp)
10010090:	18c00d17 	ldw	r3,52(r3)
10010094:	e13ffb17 	ldw	r4,-20(fp)
10010098:	20c7883a 	add	r3,r4,r3
1001009c:	18c20e04 	addi	r3,r3,2104
100100a0:	18c00003 	ldbu	r3,0(r3)
100100a4:	18c03fcc 	andi	r3,r3,255
100100a8:	18c0201c 	xori	r3,r3,128
100100ac:	18ffe004 	addi	r3,r3,-128
100100b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100100b4:	e0bffb17 	ldw	r2,-20(fp)
100100b8:	10800d17 	ldw	r2,52(r2)
100100bc:	10800044 	addi	r2,r2,1
100100c0:	10c1ffcc 	andi	r3,r2,2047
100100c4:	e0bffb17 	ldw	r2,-20(fp)
100100c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100100cc:	e0bffa17 	ldw	r2,-24(fp)
100100d0:	10bfffc4 	addi	r2,r2,-1
100100d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100100d8:	e0bffa17 	ldw	r2,-24(fp)
100100dc:	10000526 	beq	r2,zero,100100f4 <altera_avalon_jtag_uart_irq+0x1a8>
100100e0:	e0bffb17 	ldw	r2,-20(fp)
100100e4:	10c00d17 	ldw	r3,52(r2)
100100e8:	e0bffb17 	ldw	r2,-20(fp)
100100ec:	10800c17 	ldw	r2,48(r2)
100100f0:	18bfe51e 	bne	r3,r2,10010088 <__alt_data_end+0xf8010088>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100100f4:	e0bffa17 	ldw	r2,-24(fp)
100100f8:	10001026 	beq	r2,zero,1001013c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100100fc:	e0bffb17 	ldw	r2,-20(fp)
10010100:	10c00817 	ldw	r3,32(r2)
10010104:	00bfff44 	movi	r2,-3
10010108:	1886703a 	and	r3,r3,r2
1001010c:	e0bffb17 	ldw	r2,-20(fp)
10010110:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010114:	e0bffb17 	ldw	r2,-20(fp)
10010118:	10800017 	ldw	r2,0(r2)
1001011c:	10800104 	addi	r2,r2,4
10010120:	1007883a 	mov	r3,r2
10010124:	e0bffb17 	ldw	r2,-20(fp)
10010128:	10800817 	ldw	r2,32(r2)
1001012c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010130:	e0bffc17 	ldw	r2,-16(fp)
10010134:	10800104 	addi	r2,r2,4
10010138:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1001013c:	003f8c06 	br	1000ff70 <__alt_data_end+0xf800ff70>
}
10010140:	e037883a 	mov	sp,fp
10010144:	df000017 	ldw	fp,0(sp)
10010148:	dec00104 	addi	sp,sp,4
1001014c:	f800283a 	ret

10010150 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010150:	defff804 	addi	sp,sp,-32
10010154:	df000715 	stw	fp,28(sp)
10010158:	df000704 	addi	fp,sp,28
1001015c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010160:	e0bffb17 	ldw	r2,-20(fp)
10010164:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010168:	e0bff917 	ldw	r2,-28(fp)
1001016c:	10800017 	ldw	r2,0(r2)
10010170:	10800104 	addi	r2,r2,4
10010174:	10800037 	ldwio	r2,0(r2)
10010178:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001017c:	e0bffa17 	ldw	r2,-24(fp)
10010180:	1081000c 	andi	r2,r2,1024
10010184:	10000b26 	beq	r2,zero,100101b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010188:	e0bff917 	ldw	r2,-28(fp)
1001018c:	10800017 	ldw	r2,0(r2)
10010190:	10800104 	addi	r2,r2,4
10010194:	1007883a 	mov	r3,r2
10010198:	e0bff917 	ldw	r2,-28(fp)
1001019c:	10800817 	ldw	r2,32(r2)
100101a0:	10810014 	ori	r2,r2,1024
100101a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100101a8:	e0bff917 	ldw	r2,-28(fp)
100101ac:	10000915 	stw	zero,36(r2)
100101b0:	00000a06 	br	100101dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100101b4:	e0bff917 	ldw	r2,-28(fp)
100101b8:	10c00917 	ldw	r3,36(r2)
100101bc:	00a00034 	movhi	r2,32768
100101c0:	10bfff04 	addi	r2,r2,-4
100101c4:	10c00536 	bltu	r2,r3,100101dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100101c8:	e0bff917 	ldw	r2,-28(fp)
100101cc:	10800917 	ldw	r2,36(r2)
100101d0:	10c00044 	addi	r3,r2,1
100101d4:	e0bff917 	ldw	r2,-28(fp)
100101d8:	10c00915 	stw	r3,36(r2)
100101dc:	00840074 	movhi	r2,4097
100101e0:	10951a04 	addi	r2,r2,21608
100101e4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100101e8:	e037883a 	mov	sp,fp
100101ec:	df000017 	ldw	fp,0(sp)
100101f0:	dec00104 	addi	sp,sp,4
100101f4:	f800283a 	ret

100101f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100101f8:	defffd04 	addi	sp,sp,-12
100101fc:	df000215 	stw	fp,8(sp)
10010200:	df000204 	addi	fp,sp,8
10010204:	e13ffe15 	stw	r4,-8(fp)
10010208:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001020c:	00000506 	br	10010224 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010210:	e0bfff17 	ldw	r2,-4(fp)
10010214:	1090000c 	andi	r2,r2,16384
10010218:	10000226 	beq	r2,zero,10010224 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001021c:	00bffd44 	movi	r2,-11
10010220:	00000b06 	br	10010250 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010224:	e0bffe17 	ldw	r2,-8(fp)
10010228:	10c00d17 	ldw	r3,52(r2)
1001022c:	e0bffe17 	ldw	r2,-8(fp)
10010230:	10800c17 	ldw	r2,48(r2)
10010234:	18800526 	beq	r3,r2,1001024c <altera_avalon_jtag_uart_close+0x54>
10010238:	e0bffe17 	ldw	r2,-8(fp)
1001023c:	10c00917 	ldw	r3,36(r2)
10010240:	e0bffe17 	ldw	r2,-8(fp)
10010244:	10800117 	ldw	r2,4(r2)
10010248:	18bff136 	bltu	r3,r2,10010210 <__alt_data_end+0xf8010210>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1001024c:	0005883a 	mov	r2,zero
}
10010250:	e037883a 	mov	sp,fp
10010254:	df000017 	ldw	fp,0(sp)
10010258:	dec00104 	addi	sp,sp,4
1001025c:	f800283a 	ret

10010260 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010260:	defffa04 	addi	sp,sp,-24
10010264:	df000515 	stw	fp,20(sp)
10010268:	df000504 	addi	fp,sp,20
1001026c:	e13ffd15 	stw	r4,-12(fp)
10010270:	e17ffe15 	stw	r5,-8(fp)
10010274:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010278:	00bff9c4 	movi	r2,-25
1001027c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010280:	e0bffe17 	ldw	r2,-8(fp)
10010284:	10da8060 	cmpeqi	r3,r2,27137
10010288:	1800031e 	bne	r3,zero,10010298 <altera_avalon_jtag_uart_ioctl+0x38>
1001028c:	109a80a0 	cmpeqi	r2,r2,27138
10010290:	1000191e 	bne	r2,zero,100102f8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010294:	00002806 	br	10010338 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010298:	e0bffd17 	ldw	r2,-12(fp)
1001029c:	10c00117 	ldw	r3,4(r2)
100102a0:	00a00034 	movhi	r2,32768
100102a4:	10bfffc4 	addi	r2,r2,-1
100102a8:	18801226 	beq	r3,r2,100102f4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100102ac:	e0bfff17 	ldw	r2,-4(fp)
100102b0:	10800017 	ldw	r2,0(r2)
100102b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100102b8:	e0bffc17 	ldw	r2,-16(fp)
100102bc:	10800090 	cmplti	r2,r2,2
100102c0:	1000061e 	bne	r2,zero,100102dc <altera_avalon_jtag_uart_ioctl+0x7c>
100102c4:	e0fffc17 	ldw	r3,-16(fp)
100102c8:	00a00034 	movhi	r2,32768
100102cc:	10bfffc4 	addi	r2,r2,-1
100102d0:	18800226 	beq	r3,r2,100102dc <altera_avalon_jtag_uart_ioctl+0x7c>
100102d4:	e0bffc17 	ldw	r2,-16(fp)
100102d8:	00000206 	br	100102e4 <altera_avalon_jtag_uart_ioctl+0x84>
100102dc:	00a00034 	movhi	r2,32768
100102e0:	10bfff84 	addi	r2,r2,-2
100102e4:	e0fffd17 	ldw	r3,-12(fp)
100102e8:	18800115 	stw	r2,4(r3)
      rc = 0;
100102ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100102f0:	00001106 	br	10010338 <altera_avalon_jtag_uart_ioctl+0xd8>
100102f4:	00001006 	br	10010338 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100102f8:	e0bffd17 	ldw	r2,-12(fp)
100102fc:	10c00117 	ldw	r3,4(r2)
10010300:	00a00034 	movhi	r2,32768
10010304:	10bfffc4 	addi	r2,r2,-1
10010308:	18800a26 	beq	r3,r2,10010334 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001030c:	e0bffd17 	ldw	r2,-12(fp)
10010310:	10c00917 	ldw	r3,36(r2)
10010314:	e0bffd17 	ldw	r2,-12(fp)
10010318:	10800117 	ldw	r2,4(r2)
1001031c:	1885803a 	cmpltu	r2,r3,r2
10010320:	10c03fcc 	andi	r3,r2,255
10010324:	e0bfff17 	ldw	r2,-4(fp)
10010328:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001032c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010330:	00000006 	br	10010334 <altera_avalon_jtag_uart_ioctl+0xd4>
10010334:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010338:	e0bffb17 	ldw	r2,-20(fp)
}
1001033c:	e037883a 	mov	sp,fp
10010340:	df000017 	ldw	fp,0(sp)
10010344:	dec00104 	addi	sp,sp,4
10010348:	f800283a 	ret

1001034c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1001034c:	defff304 	addi	sp,sp,-52
10010350:	dfc00c15 	stw	ra,48(sp)
10010354:	df000b15 	stw	fp,44(sp)
10010358:	df000b04 	addi	fp,sp,44
1001035c:	e13ffc15 	stw	r4,-16(fp)
10010360:	e17ffd15 	stw	r5,-12(fp)
10010364:	e1bffe15 	stw	r6,-8(fp)
10010368:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1001036c:	e0bffd17 	ldw	r2,-12(fp)
10010370:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010374:	00004906 	br	1001049c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010378:	e0bffc17 	ldw	r2,-16(fp)
1001037c:	10800a17 	ldw	r2,40(r2)
10010380:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010384:	e0bffc17 	ldw	r2,-16(fp)
10010388:	10800b17 	ldw	r2,44(r2)
1001038c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010390:	e0fff717 	ldw	r3,-36(fp)
10010394:	e0bff817 	ldw	r2,-32(fp)
10010398:	18800536 	bltu	r3,r2,100103b0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1001039c:	e0fff717 	ldw	r3,-36(fp)
100103a0:	e0bff817 	ldw	r2,-32(fp)
100103a4:	1885c83a 	sub	r2,r3,r2
100103a8:	e0bff615 	stw	r2,-40(fp)
100103ac:	00000406 	br	100103c0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100103b0:	00c20004 	movi	r3,2048
100103b4:	e0bff817 	ldw	r2,-32(fp)
100103b8:	1885c83a 	sub	r2,r3,r2
100103bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100103c0:	e0bff617 	ldw	r2,-40(fp)
100103c4:	1000011e 	bne	r2,zero,100103cc <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100103c8:	00001d06 	br	10010440 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
100103cc:	e0fffe17 	ldw	r3,-8(fp)
100103d0:	e0bff617 	ldw	r2,-40(fp)
100103d4:	1880022e 	bgeu	r3,r2,100103e0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
100103d8:	e0bffe17 	ldw	r2,-8(fp)
100103dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100103e0:	e0bff817 	ldw	r2,-32(fp)
100103e4:	10800e04 	addi	r2,r2,56
100103e8:	e0fffc17 	ldw	r3,-16(fp)
100103ec:	1885883a 	add	r2,r3,r2
100103f0:	e13ff517 	ldw	r4,-44(fp)
100103f4:	100b883a 	mov	r5,r2
100103f8:	e1bff617 	ldw	r6,-40(fp)
100103fc:	000b75c0 	call	1000b75c <memcpy>
      ptr   += n;
10010400:	e0fff517 	ldw	r3,-44(fp)
10010404:	e0bff617 	ldw	r2,-40(fp)
10010408:	1885883a 	add	r2,r3,r2
1001040c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010410:	e0fffe17 	ldw	r3,-8(fp)
10010414:	e0bff617 	ldw	r2,-40(fp)
10010418:	1885c83a 	sub	r2,r3,r2
1001041c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010420:	e0fff817 	ldw	r3,-32(fp)
10010424:	e0bff617 	ldw	r2,-40(fp)
10010428:	1885883a 	add	r2,r3,r2
1001042c:	10c1ffcc 	andi	r3,r2,2047
10010430:	e0bffc17 	ldw	r2,-16(fp)
10010434:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010438:	e0bffe17 	ldw	r2,-8(fp)
1001043c:	00bfce16 	blt	zero,r2,10010378 <__alt_data_end+0xf8010378>

    /* If we read any data then return it */
    if (ptr != buffer)
10010440:	e0fff517 	ldw	r3,-44(fp)
10010444:	e0bffd17 	ldw	r2,-12(fp)
10010448:	18800126 	beq	r3,r2,10010450 <altera_avalon_jtag_uart_read+0x104>
      break;
1001044c:	00001506 	br	100104a4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010450:	e0bfff17 	ldw	r2,-4(fp)
10010454:	1090000c 	andi	r2,r2,16384
10010458:	10000126 	beq	r2,zero,10010460 <altera_avalon_jtag_uart_read+0x114>
      break;
1001045c:	00001106 	br	100104a4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010460:	0001883a 	nop
10010464:	e0bffc17 	ldw	r2,-16(fp)
10010468:	10c00a17 	ldw	r3,40(r2)
1001046c:	e0bff717 	ldw	r2,-36(fp)
10010470:	1880051e 	bne	r3,r2,10010488 <altera_avalon_jtag_uart_read+0x13c>
10010474:	e0bffc17 	ldw	r2,-16(fp)
10010478:	10c00917 	ldw	r3,36(r2)
1001047c:	e0bffc17 	ldw	r2,-16(fp)
10010480:	10800117 	ldw	r2,4(r2)
10010484:	18bff736 	bltu	r3,r2,10010464 <__alt_data_end+0xf8010464>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010488:	e0bffc17 	ldw	r2,-16(fp)
1001048c:	10c00a17 	ldw	r3,40(r2)
10010490:	e0bff717 	ldw	r2,-36(fp)
10010494:	1880011e 	bne	r3,r2,1001049c <altera_avalon_jtag_uart_read+0x150>
      break;
10010498:	00000206 	br	100104a4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001049c:	e0bffe17 	ldw	r2,-8(fp)
100104a0:	00bfb516 	blt	zero,r2,10010378 <__alt_data_end+0xf8010378>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100104a4:	e0fff517 	ldw	r3,-44(fp)
100104a8:	e0bffd17 	ldw	r2,-12(fp)
100104ac:	18801826 	beq	r3,r2,10010510 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100104b0:	0005303a 	rdctl	r2,status
100104b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100104b8:	e0fffa17 	ldw	r3,-24(fp)
100104bc:	00bfff84 	movi	r2,-2
100104c0:	1884703a 	and	r2,r3,r2
100104c4:	1001703a 	wrctl	status,r2
  
  return context;
100104c8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100104cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100104d0:	e0bffc17 	ldw	r2,-16(fp)
100104d4:	10800817 	ldw	r2,32(r2)
100104d8:	10c00054 	ori	r3,r2,1
100104dc:	e0bffc17 	ldw	r2,-16(fp)
100104e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100104e4:	e0bffc17 	ldw	r2,-16(fp)
100104e8:	10800017 	ldw	r2,0(r2)
100104ec:	10800104 	addi	r2,r2,4
100104f0:	1007883a 	mov	r3,r2
100104f4:	e0bffc17 	ldw	r2,-16(fp)
100104f8:	10800817 	ldw	r2,32(r2)
100104fc:	18800035 	stwio	r2,0(r3)
10010500:	e0bff917 	ldw	r2,-28(fp)
10010504:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010508:	e0bffb17 	ldw	r2,-20(fp)
1001050c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010510:	e0fff517 	ldw	r3,-44(fp)
10010514:	e0bffd17 	ldw	r2,-12(fp)
10010518:	18800426 	beq	r3,r2,1001052c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1001051c:	e0fff517 	ldw	r3,-44(fp)
10010520:	e0bffd17 	ldw	r2,-12(fp)
10010524:	1885c83a 	sub	r2,r3,r2
10010528:	00000606 	br	10010544 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1001052c:	e0bfff17 	ldw	r2,-4(fp)
10010530:	1090000c 	andi	r2,r2,16384
10010534:	10000226 	beq	r2,zero,10010540 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010538:	00bffd44 	movi	r2,-11
1001053c:	00000106 	br	10010544 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10010540:	00bffec4 	movi	r2,-5
}
10010544:	e037883a 	mov	sp,fp
10010548:	dfc00117 	ldw	ra,4(sp)
1001054c:	df000017 	ldw	fp,0(sp)
10010550:	dec00204 	addi	sp,sp,8
10010554:	f800283a 	ret

10010558 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010558:	defff304 	addi	sp,sp,-52
1001055c:	dfc00c15 	stw	ra,48(sp)
10010560:	df000b15 	stw	fp,44(sp)
10010564:	df000b04 	addi	fp,sp,44
10010568:	e13ffc15 	stw	r4,-16(fp)
1001056c:	e17ffd15 	stw	r5,-12(fp)
10010570:	e1bffe15 	stw	r6,-8(fp)
10010574:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010578:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001057c:	e0bffd17 	ldw	r2,-12(fp)
10010580:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010584:	00003806 	br	10010668 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010588:	e0bffc17 	ldw	r2,-16(fp)
1001058c:	10800c17 	ldw	r2,48(r2)
10010590:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10010594:	e0bffc17 	ldw	r2,-16(fp)
10010598:	10800d17 	ldw	r2,52(r2)
1001059c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100105a0:	e0fff817 	ldw	r3,-32(fp)
100105a4:	e0bff517 	ldw	r2,-44(fp)
100105a8:	1880062e 	bgeu	r3,r2,100105c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100105ac:	e0fff517 	ldw	r3,-44(fp)
100105b0:	e0bff817 	ldw	r2,-32(fp)
100105b4:	1885c83a 	sub	r2,r3,r2
100105b8:	10bfffc4 	addi	r2,r2,-1
100105bc:	e0bff615 	stw	r2,-40(fp)
100105c0:	00000b06 	br	100105f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100105c4:	e0bff517 	ldw	r2,-44(fp)
100105c8:	10000526 	beq	r2,zero,100105e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100105cc:	00c20004 	movi	r3,2048
100105d0:	e0bff817 	ldw	r2,-32(fp)
100105d4:	1885c83a 	sub	r2,r3,r2
100105d8:	e0bff615 	stw	r2,-40(fp)
100105dc:	00000406 	br	100105f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100105e0:	00c1ffc4 	movi	r3,2047
100105e4:	e0bff817 	ldw	r2,-32(fp)
100105e8:	1885c83a 	sub	r2,r3,r2
100105ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100105f0:	e0bff617 	ldw	r2,-40(fp)
100105f4:	1000011e 	bne	r2,zero,100105fc <altera_avalon_jtag_uart_write+0xa4>
        break;
100105f8:	00001d06 	br	10010670 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100105fc:	e0fffe17 	ldw	r3,-8(fp)
10010600:	e0bff617 	ldw	r2,-40(fp)
10010604:	1880022e 	bgeu	r3,r2,10010610 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10010608:	e0bffe17 	ldw	r2,-8(fp)
1001060c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010610:	e0bff817 	ldw	r2,-32(fp)
10010614:	10820e04 	addi	r2,r2,2104
10010618:	e0fffc17 	ldw	r3,-16(fp)
1001061c:	1885883a 	add	r2,r3,r2
10010620:	1009883a 	mov	r4,r2
10010624:	e17ffd17 	ldw	r5,-12(fp)
10010628:	e1bff617 	ldw	r6,-40(fp)
1001062c:	000b75c0 	call	1000b75c <memcpy>
      ptr   += n;
10010630:	e0fffd17 	ldw	r3,-12(fp)
10010634:	e0bff617 	ldw	r2,-40(fp)
10010638:	1885883a 	add	r2,r3,r2
1001063c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010640:	e0fffe17 	ldw	r3,-8(fp)
10010644:	e0bff617 	ldw	r2,-40(fp)
10010648:	1885c83a 	sub	r2,r3,r2
1001064c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010650:	e0fff817 	ldw	r3,-32(fp)
10010654:	e0bff617 	ldw	r2,-40(fp)
10010658:	1885883a 	add	r2,r3,r2
1001065c:	10c1ffcc 	andi	r3,r2,2047
10010660:	e0bffc17 	ldw	r2,-16(fp)
10010664:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010668:	e0bffe17 	ldw	r2,-8(fp)
1001066c:	00bfc616 	blt	zero,r2,10010588 <__alt_data_end+0xf8010588>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010670:	0005303a 	rdctl	r2,status
10010674:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010678:	e0fffa17 	ldw	r3,-24(fp)
1001067c:	00bfff84 	movi	r2,-2
10010680:	1884703a 	and	r2,r3,r2
10010684:	1001703a 	wrctl	status,r2
  
  return context;
10010688:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1001068c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010690:	e0bffc17 	ldw	r2,-16(fp)
10010694:	10800817 	ldw	r2,32(r2)
10010698:	10c00094 	ori	r3,r2,2
1001069c:	e0bffc17 	ldw	r2,-16(fp)
100106a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100106a4:	e0bffc17 	ldw	r2,-16(fp)
100106a8:	10800017 	ldw	r2,0(r2)
100106ac:	10800104 	addi	r2,r2,4
100106b0:	1007883a 	mov	r3,r2
100106b4:	e0bffc17 	ldw	r2,-16(fp)
100106b8:	10800817 	ldw	r2,32(r2)
100106bc:	18800035 	stwio	r2,0(r3)
100106c0:	e0bff917 	ldw	r2,-28(fp)
100106c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100106c8:	e0bffb17 	ldw	r2,-20(fp)
100106cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100106d0:	e0bffe17 	ldw	r2,-8(fp)
100106d4:	0080120e 	bge	zero,r2,10010720 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100106d8:	e0bfff17 	ldw	r2,-4(fp)
100106dc:	1090000c 	andi	r2,r2,16384
100106e0:	10000126 	beq	r2,zero,100106e8 <altera_avalon_jtag_uart_write+0x190>
        break;
100106e4:	00001006 	br	10010728 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100106e8:	0001883a 	nop
100106ec:	e0bffc17 	ldw	r2,-16(fp)
100106f0:	10c00d17 	ldw	r3,52(r2)
100106f4:	e0bff517 	ldw	r2,-44(fp)
100106f8:	1880051e 	bne	r3,r2,10010710 <altera_avalon_jtag_uart_write+0x1b8>
100106fc:	e0bffc17 	ldw	r2,-16(fp)
10010700:	10c00917 	ldw	r3,36(r2)
10010704:	e0bffc17 	ldw	r2,-16(fp)
10010708:	10800117 	ldw	r2,4(r2)
1001070c:	18bff736 	bltu	r3,r2,100106ec <__alt_data_end+0xf80106ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010710:	e0bffc17 	ldw	r2,-16(fp)
10010714:	10800917 	ldw	r2,36(r2)
10010718:	10000126 	beq	r2,zero,10010720 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1001071c:	00000206 	br	10010728 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10010720:	e0bffe17 	ldw	r2,-8(fp)
10010724:	00bf9716 	blt	zero,r2,10010584 <__alt_data_end+0xf8010584>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010728:	e0fffd17 	ldw	r3,-12(fp)
1001072c:	e0bff717 	ldw	r2,-36(fp)
10010730:	18800426 	beq	r3,r2,10010744 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10010734:	e0fffd17 	ldw	r3,-12(fp)
10010738:	e0bff717 	ldw	r2,-36(fp)
1001073c:	1885c83a 	sub	r2,r3,r2
10010740:	00000606 	br	1001075c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10010744:	e0bfff17 	ldw	r2,-4(fp)
10010748:	1090000c 	andi	r2,r2,16384
1001074c:	10000226 	beq	r2,zero,10010758 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10010750:	00bffd44 	movi	r2,-11
10010754:	00000106 	br	1001075c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010758:	00bffec4 	movi	r2,-5
}
1001075c:	e037883a 	mov	sp,fp
10010760:	dfc00117 	ldw	ra,4(sp)
10010764:	df000017 	ldw	fp,0(sp)
10010768:	dec00204 	addi	sp,sp,8
1001076c:	f800283a 	ret

10010770 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010770:	defff504 	addi	sp,sp,-44
10010774:	df000a15 	stw	fp,40(sp)
10010778:	df000a04 	addi	fp,sp,40
1001077c:	e13ffc15 	stw	r4,-16(fp)
10010780:	e17ffd15 	stw	r5,-12(fp)
10010784:	e1bffe15 	stw	r6,-8(fp)
10010788:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001078c:	e03ff615 	stw	zero,-40(fp)
10010790:	00840074 	movhi	r2,4097
10010794:	10951a04 	addi	r2,r2,21608
10010798:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1001079c:	10003f26 	beq	r2,zero,1001089c <alt_alarm_start+0x12c>
  {
    if (alarm)
100107a0:	e0bffc17 	ldw	r2,-16(fp)
100107a4:	10003b26 	beq	r2,zero,10010894 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100107a8:	e0bffc17 	ldw	r2,-16(fp)
100107ac:	e0fffe17 	ldw	r3,-8(fp)
100107b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100107b4:	e0bffc17 	ldw	r2,-16(fp)
100107b8:	e0ffff17 	ldw	r3,-4(fp)
100107bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100107c0:	0005303a 	rdctl	r2,status
100107c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100107c8:	e0fff817 	ldw	r3,-32(fp)
100107cc:	00bfff84 	movi	r2,-2
100107d0:	1884703a 	and	r2,r3,r2
100107d4:	1001703a 	wrctl	status,r2
  
  return context;
100107d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100107dc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100107e0:	00840074 	movhi	r2,4097
100107e4:	10951b04 	addi	r2,r2,21612
100107e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100107ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100107f0:	e0fffd17 	ldw	r3,-12(fp)
100107f4:	e0bff617 	ldw	r2,-40(fp)
100107f8:	1885883a 	add	r2,r3,r2
100107fc:	10c00044 	addi	r3,r2,1
10010800:	e0bffc17 	ldw	r2,-16(fp)
10010804:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010808:	e0bffc17 	ldw	r2,-16(fp)
1001080c:	10c00217 	ldw	r3,8(r2)
10010810:	e0bff617 	ldw	r2,-40(fp)
10010814:	1880042e 	bgeu	r3,r2,10010828 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10010818:	e0bffc17 	ldw	r2,-16(fp)
1001081c:	00c00044 	movi	r3,1
10010820:	10c00405 	stb	r3,16(r2)
10010824:	00000206 	br	10010830 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010828:	e0bffc17 	ldw	r2,-16(fp)
1001082c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010830:	e0fffc17 	ldw	r3,-16(fp)
10010834:	00840074 	movhi	r2,4097
10010838:	108e5104 	addi	r2,r2,14660
1001083c:	e0bff915 	stw	r2,-28(fp)
10010840:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010844:	e0bffa17 	ldw	r2,-24(fp)
10010848:	e0fff917 	ldw	r3,-28(fp)
1001084c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010850:	e0bff917 	ldw	r2,-28(fp)
10010854:	10c00017 	ldw	r3,0(r2)
10010858:	e0bffa17 	ldw	r2,-24(fp)
1001085c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010860:	e0bff917 	ldw	r2,-28(fp)
10010864:	10800017 	ldw	r2,0(r2)
10010868:	e0fffa17 	ldw	r3,-24(fp)
1001086c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010870:	e0bff917 	ldw	r2,-28(fp)
10010874:	e0fffa17 	ldw	r3,-24(fp)
10010878:	10c00015 	stw	r3,0(r2)
1001087c:	e0bff717 	ldw	r2,-36(fp)
10010880:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010884:	e0bffb17 	ldw	r2,-20(fp)
10010888:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1001088c:	0005883a 	mov	r2,zero
10010890:	00000306 	br	100108a0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10010894:	00bffa84 	movi	r2,-22
10010898:	00000106 	br	100108a0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1001089c:	00bfde84 	movi	r2,-134
  }
}
100108a0:	e037883a 	mov	sp,fp
100108a4:	df000017 	ldw	fp,0(sp)
100108a8:	dec00104 	addi	sp,sp,4
100108ac:	f800283a 	ret

100108b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100108b0:	deffff04 	addi	sp,sp,-4
100108b4:	df000015 	stw	fp,0(sp)
100108b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100108bc:	e037883a 	mov	sp,fp
100108c0:	df000017 	ldw	fp,0(sp)
100108c4:	dec00104 	addi	sp,sp,4
100108c8:	f800283a 	ret

100108cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100108cc:	defffe04 	addi	sp,sp,-8
100108d0:	dfc00115 	stw	ra,4(sp)
100108d4:	df000015 	stw	fp,0(sp)
100108d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100108dc:	00840074 	movhi	r2,4097
100108e0:	108e4e04 	addi	r2,r2,14648
100108e4:	10800017 	ldw	r2,0(r2)
100108e8:	10000526 	beq	r2,zero,10010900 <alt_get_errno+0x34>
100108ec:	00840074 	movhi	r2,4097
100108f0:	108e4e04 	addi	r2,r2,14648
100108f4:	10800017 	ldw	r2,0(r2)
100108f8:	103ee83a 	callr	r2
100108fc:	00000206 	br	10010908 <alt_get_errno+0x3c>
10010900:	00840074 	movhi	r2,4097
10010904:	10951504 	addi	r2,r2,21588
}
10010908:	e037883a 	mov	sp,fp
1001090c:	dfc00117 	ldw	ra,4(sp)
10010910:	df000017 	ldw	fp,0(sp)
10010914:	dec00204 	addi	sp,sp,8
10010918:	f800283a 	ret

1001091c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1001091c:	defffa04 	addi	sp,sp,-24
10010920:	dfc00515 	stw	ra,20(sp)
10010924:	df000415 	stw	fp,16(sp)
10010928:	df000404 	addi	fp,sp,16
1001092c:	e13ffe15 	stw	r4,-8(fp)
10010930:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010934:	e0bffe17 	ldw	r2,-8(fp)
10010938:	10000326 	beq	r2,zero,10010948 <alt_dev_llist_insert+0x2c>
1001093c:	e0bffe17 	ldw	r2,-8(fp)
10010940:	10800217 	ldw	r2,8(r2)
10010944:	1000061e 	bne	r2,zero,10010960 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010948:	00108cc0 	call	100108cc <alt_get_errno>
1001094c:	1007883a 	mov	r3,r2
10010950:	00800584 	movi	r2,22
10010954:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010958:	00bffa84 	movi	r2,-22
1001095c:	00001306 	br	100109ac <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010960:	e0bffe17 	ldw	r2,-8(fp)
10010964:	e0ffff17 	ldw	r3,-4(fp)
10010968:	e0fffc15 	stw	r3,-16(fp)
1001096c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010970:	e0bffd17 	ldw	r2,-12(fp)
10010974:	e0fffc17 	ldw	r3,-16(fp)
10010978:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001097c:	e0bffc17 	ldw	r2,-16(fp)
10010980:	10c00017 	ldw	r3,0(r2)
10010984:	e0bffd17 	ldw	r2,-12(fp)
10010988:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001098c:	e0bffc17 	ldw	r2,-16(fp)
10010990:	10800017 	ldw	r2,0(r2)
10010994:	e0fffd17 	ldw	r3,-12(fp)
10010998:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001099c:	e0bffc17 	ldw	r2,-16(fp)
100109a0:	e0fffd17 	ldw	r3,-12(fp)
100109a4:	10c00015 	stw	r3,0(r2)

  return 0;  
100109a8:	0005883a 	mov	r2,zero
}
100109ac:	e037883a 	mov	sp,fp
100109b0:	dfc00117 	ldw	ra,4(sp)
100109b4:	df000017 	ldw	fp,0(sp)
100109b8:	dec00204 	addi	sp,sp,8
100109bc:	f800283a 	ret

100109c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100109c0:	defffd04 	addi	sp,sp,-12
100109c4:	dfc00215 	stw	ra,8(sp)
100109c8:	df000115 	stw	fp,4(sp)
100109cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100109d0:	00840074 	movhi	r2,4097
100109d4:	10867404 	addi	r2,r2,6608
100109d8:	e0bfff15 	stw	r2,-4(fp)
100109dc:	00000606 	br	100109f8 <_do_ctors+0x38>
        (*ctor) (); 
100109e0:	e0bfff17 	ldw	r2,-4(fp)
100109e4:	10800017 	ldw	r2,0(r2)
100109e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100109ec:	e0bfff17 	ldw	r2,-4(fp)
100109f0:	10bfff04 	addi	r2,r2,-4
100109f4:	e0bfff15 	stw	r2,-4(fp)
100109f8:	e0ffff17 	ldw	r3,-4(fp)
100109fc:	00840074 	movhi	r2,4097
10010a00:	10867504 	addi	r2,r2,6612
10010a04:	18bff62e 	bgeu	r3,r2,100109e0 <__alt_data_end+0xf80109e0>
        (*ctor) (); 
}
10010a08:	e037883a 	mov	sp,fp
10010a0c:	dfc00117 	ldw	ra,4(sp)
10010a10:	df000017 	ldw	fp,0(sp)
10010a14:	dec00204 	addi	sp,sp,8
10010a18:	f800283a 	ret

10010a1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010a1c:	defffd04 	addi	sp,sp,-12
10010a20:	dfc00215 	stw	ra,8(sp)
10010a24:	df000115 	stw	fp,4(sp)
10010a28:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010a2c:	00840074 	movhi	r2,4097
10010a30:	10867404 	addi	r2,r2,6608
10010a34:	e0bfff15 	stw	r2,-4(fp)
10010a38:	00000606 	br	10010a54 <_do_dtors+0x38>
        (*dtor) (); 
10010a3c:	e0bfff17 	ldw	r2,-4(fp)
10010a40:	10800017 	ldw	r2,0(r2)
10010a44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010a48:	e0bfff17 	ldw	r2,-4(fp)
10010a4c:	10bfff04 	addi	r2,r2,-4
10010a50:	e0bfff15 	stw	r2,-4(fp)
10010a54:	e0ffff17 	ldw	r3,-4(fp)
10010a58:	00840074 	movhi	r2,4097
10010a5c:	10867504 	addi	r2,r2,6612
10010a60:	18bff62e 	bgeu	r3,r2,10010a3c <__alt_data_end+0xf8010a3c>
        (*dtor) (); 
}
10010a64:	e037883a 	mov	sp,fp
10010a68:	dfc00117 	ldw	ra,4(sp)
10010a6c:	df000017 	ldw	fp,0(sp)
10010a70:	dec00204 	addi	sp,sp,8
10010a74:	f800283a 	ret

10010a78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010a78:	deffff04 	addi	sp,sp,-4
10010a7c:	df000015 	stw	fp,0(sp)
10010a80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010a84:	e037883a 	mov	sp,fp
10010a88:	df000017 	ldw	fp,0(sp)
10010a8c:	dec00104 	addi	sp,sp,4
10010a90:	f800283a 	ret

10010a94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010a94:	defff904 	addi	sp,sp,-28
10010a98:	dfc00615 	stw	ra,24(sp)
10010a9c:	df000515 	stw	fp,20(sp)
10010aa0:	df000504 	addi	fp,sp,20
10010aa4:	e13ffc15 	stw	r4,-16(fp)
10010aa8:	e17ffd15 	stw	r5,-12(fp)
10010aac:	e1bffe15 	stw	r6,-8(fp)
10010ab0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010ab4:	e0800217 	ldw	r2,8(fp)
10010ab8:	d8800015 	stw	r2,0(sp)
10010abc:	e13ffc17 	ldw	r4,-16(fp)
10010ac0:	e17ffd17 	ldw	r5,-12(fp)
10010ac4:	e1bffe17 	ldw	r6,-8(fp)
10010ac8:	e1ffff17 	ldw	r7,-4(fp)
10010acc:	0010c740 	call	10010c74 <alt_iic_isr_register>
}  
10010ad0:	e037883a 	mov	sp,fp
10010ad4:	dfc00117 	ldw	ra,4(sp)
10010ad8:	df000017 	ldw	fp,0(sp)
10010adc:	dec00204 	addi	sp,sp,8
10010ae0:	f800283a 	ret

10010ae4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010ae4:	defff904 	addi	sp,sp,-28
10010ae8:	df000615 	stw	fp,24(sp)
10010aec:	df000604 	addi	fp,sp,24
10010af0:	e13ffe15 	stw	r4,-8(fp)
10010af4:	e17fff15 	stw	r5,-4(fp)
10010af8:	e0bfff17 	ldw	r2,-4(fp)
10010afc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b00:	0005303a 	rdctl	r2,status
10010b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b08:	e0fffb17 	ldw	r3,-20(fp)
10010b0c:	00bfff84 	movi	r2,-2
10010b10:	1884703a 	and	r2,r3,r2
10010b14:	1001703a 	wrctl	status,r2
  
  return context;
10010b18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010b1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010b20:	e0bffa17 	ldw	r2,-24(fp)
10010b24:	00c00044 	movi	r3,1
10010b28:	1884983a 	sll	r2,r3,r2
10010b2c:	1007883a 	mov	r3,r2
10010b30:	00840074 	movhi	r2,4097
10010b34:	10951904 	addi	r2,r2,21604
10010b38:	10800017 	ldw	r2,0(r2)
10010b3c:	1886b03a 	or	r3,r3,r2
10010b40:	00840074 	movhi	r2,4097
10010b44:	10951904 	addi	r2,r2,21604
10010b48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010b4c:	00840074 	movhi	r2,4097
10010b50:	10951904 	addi	r2,r2,21604
10010b54:	10800017 	ldw	r2,0(r2)
10010b58:	100170fa 	wrctl	ienable,r2
10010b5c:	e0bffc17 	ldw	r2,-16(fp)
10010b60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b64:	e0bffd17 	ldw	r2,-12(fp)
10010b68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010b6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010b70:	0001883a 	nop
}
10010b74:	e037883a 	mov	sp,fp
10010b78:	df000017 	ldw	fp,0(sp)
10010b7c:	dec00104 	addi	sp,sp,4
10010b80:	f800283a 	ret

10010b84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010b84:	defff904 	addi	sp,sp,-28
10010b88:	df000615 	stw	fp,24(sp)
10010b8c:	df000604 	addi	fp,sp,24
10010b90:	e13ffe15 	stw	r4,-8(fp)
10010b94:	e17fff15 	stw	r5,-4(fp)
10010b98:	e0bfff17 	ldw	r2,-4(fp)
10010b9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010ba0:	0005303a 	rdctl	r2,status
10010ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010ba8:	e0fffb17 	ldw	r3,-20(fp)
10010bac:	00bfff84 	movi	r2,-2
10010bb0:	1884703a 	and	r2,r3,r2
10010bb4:	1001703a 	wrctl	status,r2
  
  return context;
10010bb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010bbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010bc0:	e0bffa17 	ldw	r2,-24(fp)
10010bc4:	00c00044 	movi	r3,1
10010bc8:	1884983a 	sll	r2,r3,r2
10010bcc:	0084303a 	nor	r2,zero,r2
10010bd0:	1007883a 	mov	r3,r2
10010bd4:	00840074 	movhi	r2,4097
10010bd8:	10951904 	addi	r2,r2,21604
10010bdc:	10800017 	ldw	r2,0(r2)
10010be0:	1886703a 	and	r3,r3,r2
10010be4:	00840074 	movhi	r2,4097
10010be8:	10951904 	addi	r2,r2,21604
10010bec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010bf0:	00840074 	movhi	r2,4097
10010bf4:	10951904 	addi	r2,r2,21604
10010bf8:	10800017 	ldw	r2,0(r2)
10010bfc:	100170fa 	wrctl	ienable,r2
10010c00:	e0bffc17 	ldw	r2,-16(fp)
10010c04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010c08:	e0bffd17 	ldw	r2,-12(fp)
10010c0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010c10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010c14:	0001883a 	nop
}
10010c18:	e037883a 	mov	sp,fp
10010c1c:	df000017 	ldw	fp,0(sp)
10010c20:	dec00104 	addi	sp,sp,4
10010c24:	f800283a 	ret

10010c28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010c28:	defffc04 	addi	sp,sp,-16
10010c2c:	df000315 	stw	fp,12(sp)
10010c30:	df000304 	addi	fp,sp,12
10010c34:	e13ffe15 	stw	r4,-8(fp)
10010c38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010c3c:	000530fa 	rdctl	r2,ienable
10010c40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010c44:	e0bfff17 	ldw	r2,-4(fp)
10010c48:	00c00044 	movi	r3,1
10010c4c:	1884983a 	sll	r2,r3,r2
10010c50:	1007883a 	mov	r3,r2
10010c54:	e0bffd17 	ldw	r2,-12(fp)
10010c58:	1884703a 	and	r2,r3,r2
10010c5c:	1004c03a 	cmpne	r2,r2,zero
10010c60:	10803fcc 	andi	r2,r2,255
}
10010c64:	e037883a 	mov	sp,fp
10010c68:	df000017 	ldw	fp,0(sp)
10010c6c:	dec00104 	addi	sp,sp,4
10010c70:	f800283a 	ret

10010c74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010c74:	defff504 	addi	sp,sp,-44
10010c78:	dfc00a15 	stw	ra,40(sp)
10010c7c:	df000915 	stw	fp,36(sp)
10010c80:	df000904 	addi	fp,sp,36
10010c84:	e13ffc15 	stw	r4,-16(fp)
10010c88:	e17ffd15 	stw	r5,-12(fp)
10010c8c:	e1bffe15 	stw	r6,-8(fp)
10010c90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010c94:	00bffa84 	movi	r2,-22
10010c98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010c9c:	e0bffd17 	ldw	r2,-12(fp)
10010ca0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010ca4:	e0bff817 	ldw	r2,-32(fp)
10010ca8:	10800808 	cmpgei	r2,r2,32
10010cac:	1000271e 	bne	r2,zero,10010d4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010cb0:	0005303a 	rdctl	r2,status
10010cb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010cb8:	e0fffa17 	ldw	r3,-24(fp)
10010cbc:	00bfff84 	movi	r2,-2
10010cc0:	1884703a 	and	r2,r3,r2
10010cc4:	1001703a 	wrctl	status,r2
  
  return context;
10010cc8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010ccc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10010cd0:	00840074 	movhi	r2,4097
10010cd4:	10952704 	addi	r2,r2,21660
10010cd8:	e0fff817 	ldw	r3,-32(fp)
10010cdc:	180690fa 	slli	r3,r3,3
10010ce0:	10c5883a 	add	r2,r2,r3
10010ce4:	e0fffe17 	ldw	r3,-8(fp)
10010ce8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010cec:	00840074 	movhi	r2,4097
10010cf0:	10952704 	addi	r2,r2,21660
10010cf4:	e0fff817 	ldw	r3,-32(fp)
10010cf8:	180690fa 	slli	r3,r3,3
10010cfc:	10c5883a 	add	r2,r2,r3
10010d00:	10800104 	addi	r2,r2,4
10010d04:	e0ffff17 	ldw	r3,-4(fp)
10010d08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010d0c:	e0bffe17 	ldw	r2,-8(fp)
10010d10:	10000526 	beq	r2,zero,10010d28 <alt_iic_isr_register+0xb4>
10010d14:	e0bff817 	ldw	r2,-32(fp)
10010d18:	e13ffc17 	ldw	r4,-16(fp)
10010d1c:	100b883a 	mov	r5,r2
10010d20:	0010ae40 	call	10010ae4 <alt_ic_irq_enable>
10010d24:	00000406 	br	10010d38 <alt_iic_isr_register+0xc4>
10010d28:	e0bff817 	ldw	r2,-32(fp)
10010d2c:	e13ffc17 	ldw	r4,-16(fp)
10010d30:	100b883a 	mov	r5,r2
10010d34:	0010b840 	call	10010b84 <alt_ic_irq_disable>
10010d38:	e0bff715 	stw	r2,-36(fp)
10010d3c:	e0bff917 	ldw	r2,-28(fp)
10010d40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010d44:	e0bffb17 	ldw	r2,-20(fp)
10010d48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010d4c:	e0bff717 	ldw	r2,-36(fp)
}
10010d50:	e037883a 	mov	sp,fp
10010d54:	dfc00117 	ldw	ra,4(sp)
10010d58:	df000017 	ldw	fp,0(sp)
10010d5c:	dec00204 	addi	sp,sp,8
10010d60:	f800283a 	ret

10010d64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010d64:	defff804 	addi	sp,sp,-32
10010d68:	dfc00715 	stw	ra,28(sp)
10010d6c:	df000615 	stw	fp,24(sp)
10010d70:	dc000515 	stw	r16,20(sp)
10010d74:	df000604 	addi	fp,sp,24
10010d78:	e13ffb15 	stw	r4,-20(fp)
10010d7c:	e17ffc15 	stw	r5,-16(fp)
10010d80:	e1bffd15 	stw	r6,-12(fp)
10010d84:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010d88:	e13ffc17 	ldw	r4,-16(fp)
10010d8c:	e17ffd17 	ldw	r5,-12(fp)
10010d90:	e1bffe17 	ldw	r6,-8(fp)
10010d94:	00110000 	call	10011000 <open>
10010d98:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010d9c:	e0bffa17 	ldw	r2,-24(fp)
10010da0:	10002216 	blt	r2,zero,10010e2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010da4:	04040074 	movhi	r16,4097
10010da8:	8409ca04 	addi	r16,r16,10024
10010dac:	e0bffa17 	ldw	r2,-24(fp)
10010db0:	1009883a 	mov	r4,r2
10010db4:	01400304 	movi	r5,12
10010db8:	00037040 	call	10003704 <__mulsi3>
10010dbc:	8085883a 	add	r2,r16,r2
10010dc0:	10c00017 	ldw	r3,0(r2)
10010dc4:	e0bffb17 	ldw	r2,-20(fp)
10010dc8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010dcc:	04040074 	movhi	r16,4097
10010dd0:	8409ca04 	addi	r16,r16,10024
10010dd4:	e0bffa17 	ldw	r2,-24(fp)
10010dd8:	1009883a 	mov	r4,r2
10010ddc:	01400304 	movi	r5,12
10010de0:	00037040 	call	10003704 <__mulsi3>
10010de4:	8085883a 	add	r2,r16,r2
10010de8:	10800104 	addi	r2,r2,4
10010dec:	10c00017 	ldw	r3,0(r2)
10010df0:	e0bffb17 	ldw	r2,-20(fp)
10010df4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010df8:	04040074 	movhi	r16,4097
10010dfc:	8409ca04 	addi	r16,r16,10024
10010e00:	e0bffa17 	ldw	r2,-24(fp)
10010e04:	1009883a 	mov	r4,r2
10010e08:	01400304 	movi	r5,12
10010e0c:	00037040 	call	10003704 <__mulsi3>
10010e10:	8085883a 	add	r2,r16,r2
10010e14:	10800204 	addi	r2,r2,8
10010e18:	10c00017 	ldw	r3,0(r2)
10010e1c:	e0bffb17 	ldw	r2,-20(fp)
10010e20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010e24:	e13ffa17 	ldw	r4,-24(fp)
10010e28:	000f9f00 	call	1000f9f0 <alt_release_fd>
  }
} 
10010e2c:	e6ffff04 	addi	sp,fp,-4
10010e30:	dfc00217 	ldw	ra,8(sp)
10010e34:	df000117 	ldw	fp,4(sp)
10010e38:	dc000017 	ldw	r16,0(sp)
10010e3c:	dec00304 	addi	sp,sp,12
10010e40:	f800283a 	ret

10010e44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010e44:	defffb04 	addi	sp,sp,-20
10010e48:	dfc00415 	stw	ra,16(sp)
10010e4c:	df000315 	stw	fp,12(sp)
10010e50:	df000304 	addi	fp,sp,12
10010e54:	e13ffd15 	stw	r4,-12(fp)
10010e58:	e17ffe15 	stw	r5,-8(fp)
10010e5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010e60:	01040074 	movhi	r4,4097
10010e64:	2109cd04 	addi	r4,r4,10036
10010e68:	e17ffd17 	ldw	r5,-12(fp)
10010e6c:	01800044 	movi	r6,1
10010e70:	01c07fc4 	movi	r7,511
10010e74:	0010d640 	call	10010d64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010e78:	01040074 	movhi	r4,4097
10010e7c:	2109ca04 	addi	r4,r4,10024
10010e80:	e17ffe17 	ldw	r5,-8(fp)
10010e84:	000d883a 	mov	r6,zero
10010e88:	01c07fc4 	movi	r7,511
10010e8c:	0010d640 	call	10010d64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010e90:	01040074 	movhi	r4,4097
10010e94:	2109d004 	addi	r4,r4,10048
10010e98:	e17fff17 	ldw	r5,-4(fp)
10010e9c:	01800044 	movi	r6,1
10010ea0:	01c07fc4 	movi	r7,511
10010ea4:	0010d640 	call	10010d64 <alt_open_fd>
}  
10010ea8:	e037883a 	mov	sp,fp
10010eac:	dfc00117 	ldw	ra,4(sp)
10010eb0:	df000017 	ldw	fp,0(sp)
10010eb4:	dec00204 	addi	sp,sp,8
10010eb8:	f800283a 	ret

10010ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010ebc:	defffe04 	addi	sp,sp,-8
10010ec0:	dfc00115 	stw	ra,4(sp)
10010ec4:	df000015 	stw	fp,0(sp)
10010ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010ecc:	00840074 	movhi	r2,4097
10010ed0:	108e4e04 	addi	r2,r2,14648
10010ed4:	10800017 	ldw	r2,0(r2)
10010ed8:	10000526 	beq	r2,zero,10010ef0 <alt_get_errno+0x34>
10010edc:	00840074 	movhi	r2,4097
10010ee0:	108e4e04 	addi	r2,r2,14648
10010ee4:	10800017 	ldw	r2,0(r2)
10010ee8:	103ee83a 	callr	r2
10010eec:	00000206 	br	10010ef8 <alt_get_errno+0x3c>
10010ef0:	00840074 	movhi	r2,4097
10010ef4:	10951504 	addi	r2,r2,21588
}
10010ef8:	e037883a 	mov	sp,fp
10010efc:	dfc00117 	ldw	ra,4(sp)
10010f00:	df000017 	ldw	fp,0(sp)
10010f04:	dec00204 	addi	sp,sp,8
10010f08:	f800283a 	ret

10010f0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010f0c:	defffb04 	addi	sp,sp,-20
10010f10:	dfc00415 	stw	ra,16(sp)
10010f14:	df000315 	stw	fp,12(sp)
10010f18:	dc000215 	stw	r16,8(sp)
10010f1c:	df000304 	addi	fp,sp,12
10010f20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010f24:	e0bffe17 	ldw	r2,-8(fp)
10010f28:	10800217 	ldw	r2,8(r2)
10010f2c:	10d00034 	orhi	r3,r2,16384
10010f30:	e0bffe17 	ldw	r2,-8(fp)
10010f34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010f38:	e03ffd15 	stw	zero,-12(fp)
10010f3c:	00002306 	br	10010fcc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010f40:	04040074 	movhi	r16,4097
10010f44:	8409ca04 	addi	r16,r16,10024
10010f48:	e0bffd17 	ldw	r2,-12(fp)
10010f4c:	1009883a 	mov	r4,r2
10010f50:	01400304 	movi	r5,12
10010f54:	00037040 	call	10003704 <__mulsi3>
10010f58:	8085883a 	add	r2,r16,r2
10010f5c:	10c00017 	ldw	r3,0(r2)
10010f60:	e0bffe17 	ldw	r2,-8(fp)
10010f64:	10800017 	ldw	r2,0(r2)
10010f68:	1880151e 	bne	r3,r2,10010fc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010f6c:	04040074 	movhi	r16,4097
10010f70:	8409ca04 	addi	r16,r16,10024
10010f74:	e0bffd17 	ldw	r2,-12(fp)
10010f78:	1009883a 	mov	r4,r2
10010f7c:	01400304 	movi	r5,12
10010f80:	00037040 	call	10003704 <__mulsi3>
10010f84:	8085883a 	add	r2,r16,r2
10010f88:	10800204 	addi	r2,r2,8
10010f8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010f90:	10000b0e 	bge	r2,zero,10010fc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010f94:	e13ffd17 	ldw	r4,-12(fp)
10010f98:	01400304 	movi	r5,12
10010f9c:	00037040 	call	10003704 <__mulsi3>
10010fa0:	1007883a 	mov	r3,r2
10010fa4:	00840074 	movhi	r2,4097
10010fa8:	1089ca04 	addi	r2,r2,10024
10010fac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010fb0:	e0bffe17 	ldw	r2,-8(fp)
10010fb4:	18800226 	beq	r3,r2,10010fc0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010fb8:	00bffcc4 	movi	r2,-13
10010fbc:	00000a06 	br	10010fe8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010fc0:	e0bffd17 	ldw	r2,-12(fp)
10010fc4:	10800044 	addi	r2,r2,1
10010fc8:	e0bffd15 	stw	r2,-12(fp)
10010fcc:	00840074 	movhi	r2,4097
10010fd0:	108e4d04 	addi	r2,r2,14644
10010fd4:	10800017 	ldw	r2,0(r2)
10010fd8:	1007883a 	mov	r3,r2
10010fdc:	e0bffd17 	ldw	r2,-12(fp)
10010fe0:	18bfd72e 	bgeu	r3,r2,10010f40 <__alt_data_end+0xf8010f40>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010fe4:	0005883a 	mov	r2,zero
}
10010fe8:	e6ffff04 	addi	sp,fp,-4
10010fec:	dfc00217 	ldw	ra,8(sp)
10010ff0:	df000117 	ldw	fp,4(sp)
10010ff4:	dc000017 	ldw	r16,0(sp)
10010ff8:	dec00304 	addi	sp,sp,12
10010ffc:	f800283a 	ret

10011000 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011000:	defff604 	addi	sp,sp,-40
10011004:	dfc00915 	stw	ra,36(sp)
10011008:	df000815 	stw	fp,32(sp)
1001100c:	df000804 	addi	fp,sp,32
10011010:	e13ffd15 	stw	r4,-12(fp)
10011014:	e17ffe15 	stw	r5,-8(fp)
10011018:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001101c:	00bfffc4 	movi	r2,-1
10011020:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011024:	00bffb44 	movi	r2,-19
10011028:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001102c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011030:	e13ffd17 	ldw	r4,-12(fp)
10011034:	01440074 	movhi	r5,4097
10011038:	294e4b04 	addi	r5,r5,14636
1001103c:	001131c0 	call	1001131c <alt_find_dev>
10011040:	e0bff815 	stw	r2,-32(fp)
10011044:	e0bff817 	ldw	r2,-32(fp)
10011048:	1000051e 	bne	r2,zero,10011060 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001104c:	e13ffd17 	ldw	r4,-12(fp)
10011050:	00113ac0 	call	100113ac <alt_find_file>
10011054:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011058:	00800044 	movi	r2,1
1001105c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011060:	e0bff817 	ldw	r2,-32(fp)
10011064:	10002b26 	beq	r2,zero,10011114 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011068:	e13ff817 	ldw	r4,-32(fp)
1001106c:	00114c00 	call	100114c0 <alt_get_fd>
10011070:	e0bff915 	stw	r2,-28(fp)
10011074:	e0bff917 	ldw	r2,-28(fp)
10011078:	1000030e 	bge	r2,zero,10011088 <open+0x88>
    {
      status = index;
1001107c:	e0bff917 	ldw	r2,-28(fp)
10011080:	e0bffa15 	stw	r2,-24(fp)
10011084:	00002506 	br	1001111c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011088:	e13ff917 	ldw	r4,-28(fp)
1001108c:	01400304 	movi	r5,12
10011090:	00037040 	call	10003704 <__mulsi3>
10011094:	1007883a 	mov	r3,r2
10011098:	00840074 	movhi	r2,4097
1001109c:	1089ca04 	addi	r2,r2,10024
100110a0:	1885883a 	add	r2,r3,r2
100110a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100110a8:	e0fffe17 	ldw	r3,-8(fp)
100110ac:	00900034 	movhi	r2,16384
100110b0:	10bfffc4 	addi	r2,r2,-1
100110b4:	1886703a 	and	r3,r3,r2
100110b8:	e0bffc17 	ldw	r2,-16(fp)
100110bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100110c0:	e0bffb17 	ldw	r2,-20(fp)
100110c4:	1000051e 	bne	r2,zero,100110dc <open+0xdc>
100110c8:	e13ffc17 	ldw	r4,-16(fp)
100110cc:	0010f0c0 	call	10010f0c <alt_file_locked>
100110d0:	e0bffa15 	stw	r2,-24(fp)
100110d4:	e0bffa17 	ldw	r2,-24(fp)
100110d8:	10001016 	blt	r2,zero,1001111c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100110dc:	e0bff817 	ldw	r2,-32(fp)
100110e0:	10800317 	ldw	r2,12(r2)
100110e4:	10000826 	beq	r2,zero,10011108 <open+0x108>
100110e8:	e0bff817 	ldw	r2,-32(fp)
100110ec:	10800317 	ldw	r2,12(r2)
100110f0:	e13ffc17 	ldw	r4,-16(fp)
100110f4:	e17ffd17 	ldw	r5,-12(fp)
100110f8:	e1bffe17 	ldw	r6,-8(fp)
100110fc:	e1ffff17 	ldw	r7,-4(fp)
10011100:	103ee83a 	callr	r2
10011104:	00000106 	br	1001110c <open+0x10c>
10011108:	0005883a 	mov	r2,zero
1001110c:	e0bffa15 	stw	r2,-24(fp)
10011110:	00000206 	br	1001111c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011114:	00bffb44 	movi	r2,-19
10011118:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001111c:	e0bffa17 	ldw	r2,-24(fp)
10011120:	1000090e 	bge	r2,zero,10011148 <open+0x148>
  {
    alt_release_fd (index);  
10011124:	e13ff917 	ldw	r4,-28(fp)
10011128:	000f9f00 	call	1000f9f0 <alt_release_fd>
    ALT_ERRNO = -status;
1001112c:	0010ebc0 	call	10010ebc <alt_get_errno>
10011130:	1007883a 	mov	r3,r2
10011134:	e0bffa17 	ldw	r2,-24(fp)
10011138:	0085c83a 	sub	r2,zero,r2
1001113c:	18800015 	stw	r2,0(r3)
    return -1;
10011140:	00bfffc4 	movi	r2,-1
10011144:	00000106 	br	1001114c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10011148:	e0bff917 	ldw	r2,-28(fp)
}
1001114c:	e037883a 	mov	sp,fp
10011150:	dfc00117 	ldw	ra,4(sp)
10011154:	df000017 	ldw	fp,0(sp)
10011158:	dec00204 	addi	sp,sp,8
1001115c:	f800283a 	ret

10011160 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011160:	defffa04 	addi	sp,sp,-24
10011164:	df000515 	stw	fp,20(sp)
10011168:	df000504 	addi	fp,sp,20
1001116c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011170:	0005303a 	rdctl	r2,status
10011174:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011178:	e0fffc17 	ldw	r3,-16(fp)
1001117c:	00bfff84 	movi	r2,-2
10011180:	1884703a 	and	r2,r3,r2
10011184:	1001703a 	wrctl	status,r2
  
  return context;
10011188:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001118c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011190:	e0bfff17 	ldw	r2,-4(fp)
10011194:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011198:	e0bffd17 	ldw	r2,-12(fp)
1001119c:	10800017 	ldw	r2,0(r2)
100111a0:	e0fffd17 	ldw	r3,-12(fp)
100111a4:	18c00117 	ldw	r3,4(r3)
100111a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100111ac:	e0bffd17 	ldw	r2,-12(fp)
100111b0:	10800117 	ldw	r2,4(r2)
100111b4:	e0fffd17 	ldw	r3,-12(fp)
100111b8:	18c00017 	ldw	r3,0(r3)
100111bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100111c0:	e0bffd17 	ldw	r2,-12(fp)
100111c4:	e0fffd17 	ldw	r3,-12(fp)
100111c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100111cc:	e0bffd17 	ldw	r2,-12(fp)
100111d0:	e0fffd17 	ldw	r3,-12(fp)
100111d4:	10c00015 	stw	r3,0(r2)
100111d8:	e0bffb17 	ldw	r2,-20(fp)
100111dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100111e0:	e0bffe17 	ldw	r2,-8(fp)
100111e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100111e8:	e037883a 	mov	sp,fp
100111ec:	df000017 	ldw	fp,0(sp)
100111f0:	dec00104 	addi	sp,sp,4
100111f4:	f800283a 	ret

100111f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100111f8:	defffb04 	addi	sp,sp,-20
100111fc:	dfc00415 	stw	ra,16(sp)
10011200:	df000315 	stw	fp,12(sp)
10011204:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011208:	d0a00f17 	ldw	r2,-32708(gp)
1001120c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011210:	d0a6d917 	ldw	r2,-25756(gp)
10011214:	10800044 	addi	r2,r2,1
10011218:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001121c:	00002e06 	br	100112d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011220:	e0bffd17 	ldw	r2,-12(fp)
10011224:	10800017 	ldw	r2,0(r2)
10011228:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001122c:	e0bffd17 	ldw	r2,-12(fp)
10011230:	10800403 	ldbu	r2,16(r2)
10011234:	10803fcc 	andi	r2,r2,255
10011238:	10000426 	beq	r2,zero,1001124c <alt_tick+0x54>
1001123c:	d0a6d917 	ldw	r2,-25756(gp)
10011240:	1000021e 	bne	r2,zero,1001124c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011244:	e0bffd17 	ldw	r2,-12(fp)
10011248:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001124c:	e0bffd17 	ldw	r2,-12(fp)
10011250:	10800217 	ldw	r2,8(r2)
10011254:	d0e6d917 	ldw	r3,-25756(gp)
10011258:	18801d36 	bltu	r3,r2,100112d0 <alt_tick+0xd8>
1001125c:	e0bffd17 	ldw	r2,-12(fp)
10011260:	10800403 	ldbu	r2,16(r2)
10011264:	10803fcc 	andi	r2,r2,255
10011268:	1000191e 	bne	r2,zero,100112d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001126c:	e0bffd17 	ldw	r2,-12(fp)
10011270:	10800317 	ldw	r2,12(r2)
10011274:	e0fffd17 	ldw	r3,-12(fp)
10011278:	18c00517 	ldw	r3,20(r3)
1001127c:	1809883a 	mov	r4,r3
10011280:	103ee83a 	callr	r2
10011284:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011288:	e0bfff17 	ldw	r2,-4(fp)
1001128c:	1000031e 	bne	r2,zero,1001129c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011290:	e13ffd17 	ldw	r4,-12(fp)
10011294:	00111600 	call	10011160 <alt_alarm_stop>
10011298:	00000d06 	br	100112d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001129c:	e0bffd17 	ldw	r2,-12(fp)
100112a0:	10c00217 	ldw	r3,8(r2)
100112a4:	e0bfff17 	ldw	r2,-4(fp)
100112a8:	1887883a 	add	r3,r3,r2
100112ac:	e0bffd17 	ldw	r2,-12(fp)
100112b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100112b4:	e0bffd17 	ldw	r2,-12(fp)
100112b8:	10c00217 	ldw	r3,8(r2)
100112bc:	d0a6d917 	ldw	r2,-25756(gp)
100112c0:	1880032e 	bgeu	r3,r2,100112d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100112c4:	e0bffd17 	ldw	r2,-12(fp)
100112c8:	00c00044 	movi	r3,1
100112cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100112d0:	e0bffe17 	ldw	r2,-8(fp)
100112d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100112d8:	e0fffd17 	ldw	r3,-12(fp)
100112dc:	d0a00f04 	addi	r2,gp,-32708
100112e0:	18bfcf1e 	bne	r3,r2,10011220 <__alt_data_end+0xf8011220>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100112e4:	0001883a 	nop
}
100112e8:	e037883a 	mov	sp,fp
100112ec:	dfc00117 	ldw	ra,4(sp)
100112f0:	df000017 	ldw	fp,0(sp)
100112f4:	dec00204 	addi	sp,sp,8
100112f8:	f800283a 	ret

100112fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100112fc:	deffff04 	addi	sp,sp,-4
10011300:	df000015 	stw	fp,0(sp)
10011304:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011308:	000170fa 	wrctl	ienable,zero
}
1001130c:	e037883a 	mov	sp,fp
10011310:	df000017 	ldw	fp,0(sp)
10011314:	dec00104 	addi	sp,sp,4
10011318:	f800283a 	ret

1001131c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001131c:	defffa04 	addi	sp,sp,-24
10011320:	dfc00515 	stw	ra,20(sp)
10011324:	df000415 	stw	fp,16(sp)
10011328:	df000404 	addi	fp,sp,16
1001132c:	e13ffe15 	stw	r4,-8(fp)
10011330:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011334:	e0bfff17 	ldw	r2,-4(fp)
10011338:	10800017 	ldw	r2,0(r2)
1001133c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011340:	e13ffe17 	ldw	r4,-8(fp)
10011344:	0005fc80 	call	10005fc8 <strlen>
10011348:	10800044 	addi	r2,r2,1
1001134c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011350:	00000d06 	br	10011388 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011354:	e0bffc17 	ldw	r2,-16(fp)
10011358:	10c00217 	ldw	r3,8(r2)
1001135c:	e0bffd17 	ldw	r2,-12(fp)
10011360:	1809883a 	mov	r4,r3
10011364:	e17ffe17 	ldw	r5,-8(fp)
10011368:	100d883a 	mov	r6,r2
1001136c:	001167c0 	call	1001167c <memcmp>
10011370:	1000021e 	bne	r2,zero,1001137c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011374:	e0bffc17 	ldw	r2,-16(fp)
10011378:	00000706 	br	10011398 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001137c:	e0bffc17 	ldw	r2,-16(fp)
10011380:	10800017 	ldw	r2,0(r2)
10011384:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011388:	e0fffc17 	ldw	r3,-16(fp)
1001138c:	e0bfff17 	ldw	r2,-4(fp)
10011390:	18bff01e 	bne	r3,r2,10011354 <__alt_data_end+0xf8011354>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011394:	0005883a 	mov	r2,zero
}
10011398:	e037883a 	mov	sp,fp
1001139c:	dfc00117 	ldw	ra,4(sp)
100113a0:	df000017 	ldw	fp,0(sp)
100113a4:	dec00204 	addi	sp,sp,8
100113a8:	f800283a 	ret

100113ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100113ac:	defffb04 	addi	sp,sp,-20
100113b0:	dfc00415 	stw	ra,16(sp)
100113b4:	df000315 	stw	fp,12(sp)
100113b8:	df000304 	addi	fp,sp,12
100113bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100113c0:	00840074 	movhi	r2,4097
100113c4:	108e4904 	addi	r2,r2,14628
100113c8:	10800017 	ldw	r2,0(r2)
100113cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100113d0:	00003106 	br	10011498 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100113d4:	e0bffd17 	ldw	r2,-12(fp)
100113d8:	10800217 	ldw	r2,8(r2)
100113dc:	1009883a 	mov	r4,r2
100113e0:	0005fc80 	call	10005fc8 <strlen>
100113e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100113e8:	e0bffd17 	ldw	r2,-12(fp)
100113ec:	10c00217 	ldw	r3,8(r2)
100113f0:	e0bffe17 	ldw	r2,-8(fp)
100113f4:	10bfffc4 	addi	r2,r2,-1
100113f8:	1885883a 	add	r2,r3,r2
100113fc:	10800003 	ldbu	r2,0(r2)
10011400:	10803fcc 	andi	r2,r2,255
10011404:	1080201c 	xori	r2,r2,128
10011408:	10bfe004 	addi	r2,r2,-128
1001140c:	10800bd8 	cmpnei	r2,r2,47
10011410:	1000031e 	bne	r2,zero,10011420 <alt_find_file+0x74>
    {
      len -= 1;
10011414:	e0bffe17 	ldw	r2,-8(fp)
10011418:	10bfffc4 	addi	r2,r2,-1
1001141c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011420:	e0bffe17 	ldw	r2,-8(fp)
10011424:	e0ffff17 	ldw	r3,-4(fp)
10011428:	1885883a 	add	r2,r3,r2
1001142c:	10800003 	ldbu	r2,0(r2)
10011430:	10803fcc 	andi	r2,r2,255
10011434:	1080201c 	xori	r2,r2,128
10011438:	10bfe004 	addi	r2,r2,-128
1001143c:	10800be0 	cmpeqi	r2,r2,47
10011440:	1000081e 	bne	r2,zero,10011464 <alt_find_file+0xb8>
10011444:	e0bffe17 	ldw	r2,-8(fp)
10011448:	e0ffff17 	ldw	r3,-4(fp)
1001144c:	1885883a 	add	r2,r3,r2
10011450:	10800003 	ldbu	r2,0(r2)
10011454:	10803fcc 	andi	r2,r2,255
10011458:	1080201c 	xori	r2,r2,128
1001145c:	10bfe004 	addi	r2,r2,-128
10011460:	10000a1e 	bne	r2,zero,1001148c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011464:	e0bffd17 	ldw	r2,-12(fp)
10011468:	10c00217 	ldw	r3,8(r2)
1001146c:	e0bffe17 	ldw	r2,-8(fp)
10011470:	1809883a 	mov	r4,r3
10011474:	e17fff17 	ldw	r5,-4(fp)
10011478:	100d883a 	mov	r6,r2
1001147c:	001167c0 	call	1001167c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011480:	1000021e 	bne	r2,zero,1001148c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011484:	e0bffd17 	ldw	r2,-12(fp)
10011488:	00000806 	br	100114ac <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1001148c:	e0bffd17 	ldw	r2,-12(fp)
10011490:	10800017 	ldw	r2,0(r2)
10011494:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011498:	e0fffd17 	ldw	r3,-12(fp)
1001149c:	00840074 	movhi	r2,4097
100114a0:	108e4904 	addi	r2,r2,14628
100114a4:	18bfcb1e 	bne	r3,r2,100113d4 <__alt_data_end+0xf80113d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100114a8:	0005883a 	mov	r2,zero
}
100114ac:	e037883a 	mov	sp,fp
100114b0:	dfc00117 	ldw	ra,4(sp)
100114b4:	df000017 	ldw	fp,0(sp)
100114b8:	dec00204 	addi	sp,sp,8
100114bc:	f800283a 	ret

100114c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100114c0:	defffa04 	addi	sp,sp,-24
100114c4:	dfc00515 	stw	ra,20(sp)
100114c8:	df000415 	stw	fp,16(sp)
100114cc:	dc000315 	stw	r16,12(sp)
100114d0:	df000404 	addi	fp,sp,16
100114d4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100114d8:	00bffa04 	movi	r2,-24
100114dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100114e0:	e03ffc15 	stw	zero,-16(fp)
100114e4:	00002106 	br	1001156c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100114e8:	04040074 	movhi	r16,4097
100114ec:	8409ca04 	addi	r16,r16,10024
100114f0:	e0bffc17 	ldw	r2,-16(fp)
100114f4:	1009883a 	mov	r4,r2
100114f8:	01400304 	movi	r5,12
100114fc:	00037040 	call	10003704 <__mulsi3>
10011500:	8085883a 	add	r2,r16,r2
10011504:	10800017 	ldw	r2,0(r2)
10011508:	1000151e 	bne	r2,zero,10011560 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1001150c:	04040074 	movhi	r16,4097
10011510:	8409ca04 	addi	r16,r16,10024
10011514:	e0bffc17 	ldw	r2,-16(fp)
10011518:	1009883a 	mov	r4,r2
1001151c:	01400304 	movi	r5,12
10011520:	00037040 	call	10003704 <__mulsi3>
10011524:	8085883a 	add	r2,r16,r2
10011528:	e0fffe17 	ldw	r3,-8(fp)
1001152c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011530:	00840074 	movhi	r2,4097
10011534:	108e4d04 	addi	r2,r2,14644
10011538:	10c00017 	ldw	r3,0(r2)
1001153c:	e0bffc17 	ldw	r2,-16(fp)
10011540:	1880040e 	bge	r3,r2,10011554 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10011544:	00840074 	movhi	r2,4097
10011548:	108e4d04 	addi	r2,r2,14644
1001154c:	e0fffc17 	ldw	r3,-16(fp)
10011550:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10011554:	e0bffc17 	ldw	r2,-16(fp)
10011558:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1001155c:	00000606 	br	10011578 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011560:	e0bffc17 	ldw	r2,-16(fp)
10011564:	10800044 	addi	r2,r2,1
10011568:	e0bffc15 	stw	r2,-16(fp)
1001156c:	e0bffc17 	ldw	r2,-16(fp)
10011570:	10800810 	cmplti	r2,r2,32
10011574:	103fdc1e 	bne	r2,zero,100114e8 <__alt_data_end+0xf80114e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011578:	e0bffd17 	ldw	r2,-12(fp)
}
1001157c:	e6ffff04 	addi	sp,fp,-4
10011580:	dfc00217 	ldw	ra,8(sp)
10011584:	df000117 	ldw	fp,4(sp)
10011588:	dc000017 	ldw	r16,0(sp)
1001158c:	dec00304 	addi	sp,sp,12
10011590:	f800283a 	ret

10011594 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011594:	defffe04 	addi	sp,sp,-8
10011598:	df000115 	stw	fp,4(sp)
1001159c:	df000104 	addi	fp,sp,4
100115a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100115a4:	e0bfff17 	ldw	r2,-4(fp)
100115a8:	10bffe84 	addi	r2,r2,-6
100115ac:	10c00428 	cmpgeui	r3,r2,16
100115b0:	18001a1e 	bne	r3,zero,1001161c <alt_exception_cause_generated_bad_addr+0x88>
100115b4:	100690ba 	slli	r3,r2,2
100115b8:	00840074 	movhi	r2,4097
100115bc:	10857304 	addi	r2,r2,5580
100115c0:	1885883a 	add	r2,r3,r2
100115c4:	10800017 	ldw	r2,0(r2)
100115c8:	1000683a 	jmp	r2
100115cc:	1001160c 	andi	zero,r2,1112
100115d0:	1001160c 	andi	zero,r2,1112
100115d4:	1001161c 	xori	zero,r2,1112
100115d8:	1001161c 	xori	zero,r2,1112
100115dc:	1001161c 	xori	zero,r2,1112
100115e0:	1001160c 	andi	zero,r2,1112
100115e4:	10011614 	ori	zero,r2,1112
100115e8:	1001161c 	xori	zero,r2,1112
100115ec:	1001160c 	andi	zero,r2,1112
100115f0:	1001160c 	andi	zero,r2,1112
100115f4:	1001161c 	xori	zero,r2,1112
100115f8:	1001160c 	andi	zero,r2,1112
100115fc:	10011614 	ori	zero,r2,1112
10011600:	1001161c 	xori	zero,r2,1112
10011604:	1001161c 	xori	zero,r2,1112
10011608:	1001160c 	andi	zero,r2,1112
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1001160c:	00800044 	movi	r2,1
10011610:	00000306 	br	10011620 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011614:	0005883a 	mov	r2,zero
10011618:	00000106 	br	10011620 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1001161c:	0005883a 	mov	r2,zero
  }
}
10011620:	e037883a 	mov	sp,fp
10011624:	df000017 	ldw	fp,0(sp)
10011628:	dec00104 	addi	sp,sp,4
1001162c:	f800283a 	ret

10011630 <atexit>:
10011630:	200b883a 	mov	r5,r4
10011634:	000d883a 	mov	r6,zero
10011638:	0009883a 	mov	r4,zero
1001163c:	000f883a 	mov	r7,zero
10011640:	00116f81 	jmpi	100116f8 <__register_exitproc>

10011644 <exit>:
10011644:	defffe04 	addi	sp,sp,-8
10011648:	000b883a 	mov	r5,zero
1001164c:	dc000015 	stw	r16,0(sp)
10011650:	dfc00115 	stw	ra,4(sp)
10011654:	2021883a 	mov	r16,r4
10011658:	001180c0 	call	1001180c <__call_exitprocs>
1001165c:	00840074 	movhi	r2,4097
10011660:	108e4304 	addi	r2,r2,14604
10011664:	11000017 	ldw	r4,0(r2)
10011668:	20800f17 	ldw	r2,60(r4)
1001166c:	10000126 	beq	r2,zero,10011674 <exit+0x30>
10011670:	103ee83a 	callr	r2
10011674:	8009883a 	mov	r4,r16
10011678:	00119a00 	call	100119a0 <_exit>

1001167c <memcmp>:
1001167c:	01c000c4 	movi	r7,3
10011680:	3980192e 	bgeu	r7,r6,100116e8 <memcmp+0x6c>
10011684:	2144b03a 	or	r2,r4,r5
10011688:	11c4703a 	and	r2,r2,r7
1001168c:	10000f26 	beq	r2,zero,100116cc <memcmp+0x50>
10011690:	20800003 	ldbu	r2,0(r4)
10011694:	28c00003 	ldbu	r3,0(r5)
10011698:	10c0151e 	bne	r2,r3,100116f0 <memcmp+0x74>
1001169c:	31bfff84 	addi	r6,r6,-2
100116a0:	01ffffc4 	movi	r7,-1
100116a4:	00000406 	br	100116b8 <memcmp+0x3c>
100116a8:	20800003 	ldbu	r2,0(r4)
100116ac:	28c00003 	ldbu	r3,0(r5)
100116b0:	31bfffc4 	addi	r6,r6,-1
100116b4:	10c00e1e 	bne	r2,r3,100116f0 <memcmp+0x74>
100116b8:	21000044 	addi	r4,r4,1
100116bc:	29400044 	addi	r5,r5,1
100116c0:	31fff91e 	bne	r6,r7,100116a8 <__alt_data_end+0xf80116a8>
100116c4:	0005883a 	mov	r2,zero
100116c8:	f800283a 	ret
100116cc:	20c00017 	ldw	r3,0(r4)
100116d0:	28800017 	ldw	r2,0(r5)
100116d4:	1880041e 	bne	r3,r2,100116e8 <memcmp+0x6c>
100116d8:	31bfff04 	addi	r6,r6,-4
100116dc:	21000104 	addi	r4,r4,4
100116e0:	29400104 	addi	r5,r5,4
100116e4:	39bff936 	bltu	r7,r6,100116cc <__alt_data_end+0xf80116cc>
100116e8:	303fe91e 	bne	r6,zero,10011690 <__alt_data_end+0xf8011690>
100116ec:	003ff506 	br	100116c4 <__alt_data_end+0xf80116c4>
100116f0:	10c5c83a 	sub	r2,r2,r3
100116f4:	f800283a 	ret

100116f8 <__register_exitproc>:
100116f8:	00840074 	movhi	r2,4097
100116fc:	defffa04 	addi	sp,sp,-24
10011700:	108e4304 	addi	r2,r2,14604
10011704:	dc000315 	stw	r16,12(sp)
10011708:	14000017 	ldw	r16,0(r2)
1001170c:	dc400415 	stw	r17,16(sp)
10011710:	dfc00515 	stw	ra,20(sp)
10011714:	80805217 	ldw	r2,328(r16)
10011718:	2023883a 	mov	r17,r4
1001171c:	10003626 	beq	r2,zero,100117f8 <__register_exitproc+0x100>
10011720:	10c00117 	ldw	r3,4(r2)
10011724:	010007c4 	movi	r4,31
10011728:	20c00e16 	blt	r4,r3,10011764 <__register_exitproc+0x6c>
1001172c:	1a400044 	addi	r9,r3,1
10011730:	8800211e 	bne	r17,zero,100117b8 <__register_exitproc+0xc0>
10011734:	18c00084 	addi	r3,r3,2
10011738:	18c7883a 	add	r3,r3,r3
1001173c:	18c7883a 	add	r3,r3,r3
10011740:	12400115 	stw	r9,4(r2)
10011744:	10c7883a 	add	r3,r2,r3
10011748:	19400015 	stw	r5,0(r3)
1001174c:	0005883a 	mov	r2,zero
10011750:	dfc00517 	ldw	ra,20(sp)
10011754:	dc400417 	ldw	r17,16(sp)
10011758:	dc000317 	ldw	r16,12(sp)
1001175c:	dec00604 	addi	sp,sp,24
10011760:	f800283a 	ret
10011764:	00800034 	movhi	r2,0
10011768:	10800004 	addi	r2,r2,0
1001176c:	10002526 	beq	r2,zero,10011804 <__register_exitproc+0x10c>
10011770:	01006404 	movi	r4,400
10011774:	d9400015 	stw	r5,0(sp)
10011778:	d9800115 	stw	r6,4(sp)
1001177c:	d9c00215 	stw	r7,8(sp)
10011780:	00000000 	call	10000000 <__alt_mem_sdram>
10011784:	d9400017 	ldw	r5,0(sp)
10011788:	d9800117 	ldw	r6,4(sp)
1001178c:	d9c00217 	ldw	r7,8(sp)
10011790:	10001c26 	beq	r2,zero,10011804 <__register_exitproc+0x10c>
10011794:	80c05217 	ldw	r3,328(r16)
10011798:	10000115 	stw	zero,4(r2)
1001179c:	02400044 	movi	r9,1
100117a0:	10c00015 	stw	r3,0(r2)
100117a4:	80805215 	stw	r2,328(r16)
100117a8:	10006215 	stw	zero,392(r2)
100117ac:	10006315 	stw	zero,396(r2)
100117b0:	0007883a 	mov	r3,zero
100117b4:	883fdf26 	beq	r17,zero,10011734 <__alt_data_end+0xf8011734>
100117b8:	18d1883a 	add	r8,r3,r3
100117bc:	4211883a 	add	r8,r8,r8
100117c0:	1211883a 	add	r8,r2,r8
100117c4:	41802215 	stw	r6,136(r8)
100117c8:	01000044 	movi	r4,1
100117cc:	11806217 	ldw	r6,392(r2)
100117d0:	20c8983a 	sll	r4,r4,r3
100117d4:	310cb03a 	or	r6,r6,r4
100117d8:	11806215 	stw	r6,392(r2)
100117dc:	41c04215 	stw	r7,264(r8)
100117e0:	01800084 	movi	r6,2
100117e4:	89bfd31e 	bne	r17,r6,10011734 <__alt_data_end+0xf8011734>
100117e8:	11806317 	ldw	r6,396(r2)
100117ec:	3108b03a 	or	r4,r6,r4
100117f0:	11006315 	stw	r4,396(r2)
100117f4:	003fcf06 	br	10011734 <__alt_data_end+0xf8011734>
100117f8:	80805304 	addi	r2,r16,332
100117fc:	80805215 	stw	r2,328(r16)
10011800:	003fc706 	br	10011720 <__alt_data_end+0xf8011720>
10011804:	00bfffc4 	movi	r2,-1
10011808:	003fd106 	br	10011750 <__alt_data_end+0xf8011750>

1001180c <__call_exitprocs>:
1001180c:	00840074 	movhi	r2,4097
10011810:	108e4304 	addi	r2,r2,14604
10011814:	10800017 	ldw	r2,0(r2)
10011818:	defff404 	addi	sp,sp,-48
1001181c:	dd800815 	stw	r22,32(sp)
10011820:	d8800015 	stw	r2,0(sp)
10011824:	10805204 	addi	r2,r2,328
10011828:	dd000615 	stw	r20,24(sp)
1001182c:	dc800415 	stw	r18,16(sp)
10011830:	dfc00b15 	stw	ra,44(sp)
10011834:	df000a15 	stw	fp,40(sp)
10011838:	ddc00915 	stw	r23,36(sp)
1001183c:	dd400715 	stw	r21,28(sp)
10011840:	dcc00515 	stw	r19,20(sp)
10011844:	dc400315 	stw	r17,12(sp)
10011848:	dc000215 	stw	r16,8(sp)
1001184c:	2025883a 	mov	r18,r4
10011850:	2829883a 	mov	r20,r5
10011854:	d8800115 	stw	r2,4(sp)
10011858:	05bfffc4 	movi	r22,-1
1001185c:	d8800017 	ldw	r2,0(sp)
10011860:	14c05217 	ldw	r19,328(r2)
10011864:	98001d26 	beq	r19,zero,100118dc <__call_exitprocs+0xd0>
10011868:	dd400117 	ldw	r21,4(sp)
1001186c:	98800117 	ldw	r2,4(r19)
10011870:	173fffc4 	addi	fp,r2,-1
10011874:	e0000d16 	blt	fp,zero,100118ac <__call_exitprocs+0xa0>
10011878:	14000044 	addi	r16,r2,1
1001187c:	8421883a 	add	r16,r16,r16
10011880:	8421883a 	add	r16,r16,r16
10011884:	84402004 	addi	r17,r16,128
10011888:	9c63883a 	add	r17,r19,r17
1001188c:	9c21883a 	add	r16,r19,r16
10011890:	a0001e26 	beq	r20,zero,1001190c <__call_exitprocs+0x100>
10011894:	80804017 	ldw	r2,256(r16)
10011898:	15001c26 	beq	r2,r20,1001190c <__call_exitprocs+0x100>
1001189c:	e73fffc4 	addi	fp,fp,-1
100118a0:	843fff04 	addi	r16,r16,-4
100118a4:	8c7fff04 	addi	r17,r17,-4
100118a8:	e5bff91e 	bne	fp,r22,10011890 <__alt_data_end+0xf8011890>
100118ac:	00800034 	movhi	r2,0
100118b0:	10800004 	addi	r2,r2,0
100118b4:	10000926 	beq	r2,zero,100118dc <__call_exitprocs+0xd0>
100118b8:	98800117 	ldw	r2,4(r19)
100118bc:	1000311e 	bne	r2,zero,10011984 <__call_exitprocs+0x178>
100118c0:	98800017 	ldw	r2,0(r19)
100118c4:	10003426 	beq	r2,zero,10011998 <__call_exitprocs+0x18c>
100118c8:	9809883a 	mov	r4,r19
100118cc:	a8800015 	stw	r2,0(r21)
100118d0:	00000000 	call	10000000 <__alt_mem_sdram>
100118d4:	acc00017 	ldw	r19,0(r21)
100118d8:	983fe41e 	bne	r19,zero,1001186c <__alt_data_end+0xf801186c>
100118dc:	dfc00b17 	ldw	ra,44(sp)
100118e0:	df000a17 	ldw	fp,40(sp)
100118e4:	ddc00917 	ldw	r23,36(sp)
100118e8:	dd800817 	ldw	r22,32(sp)
100118ec:	dd400717 	ldw	r21,28(sp)
100118f0:	dd000617 	ldw	r20,24(sp)
100118f4:	dcc00517 	ldw	r19,20(sp)
100118f8:	dc800417 	ldw	r18,16(sp)
100118fc:	dc400317 	ldw	r17,12(sp)
10011900:	dc000217 	ldw	r16,8(sp)
10011904:	dec00c04 	addi	sp,sp,48
10011908:	f800283a 	ret
1001190c:	98800117 	ldw	r2,4(r19)
10011910:	80c00017 	ldw	r3,0(r16)
10011914:	10bfffc4 	addi	r2,r2,-1
10011918:	17001526 	beq	r2,fp,10011970 <__call_exitprocs+0x164>
1001191c:	80000015 	stw	zero,0(r16)
10011920:	183fde26 	beq	r3,zero,1001189c <__alt_data_end+0xf801189c>
10011924:	00800044 	movi	r2,1
10011928:	1708983a 	sll	r4,r2,fp
1001192c:	98806217 	ldw	r2,392(r19)
10011930:	9dc00117 	ldw	r23,4(r19)
10011934:	2084703a 	and	r2,r4,r2
10011938:	1000061e 	bne	r2,zero,10011954 <__call_exitprocs+0x148>
1001193c:	183ee83a 	callr	r3
10011940:	98800117 	ldw	r2,4(r19)
10011944:	15ffc51e 	bne	r2,r23,1001185c <__alt_data_end+0xf801185c>
10011948:	a8800017 	ldw	r2,0(r21)
1001194c:	14ffd326 	beq	r2,r19,1001189c <__alt_data_end+0xf801189c>
10011950:	003fc206 	br	1001185c <__alt_data_end+0xf801185c>
10011954:	98806317 	ldw	r2,396(r19)
10011958:	2084703a 	and	r2,r4,r2
1001195c:	1000061e 	bne	r2,zero,10011978 <__call_exitprocs+0x16c>
10011960:	89400017 	ldw	r5,0(r17)
10011964:	9009883a 	mov	r4,r18
10011968:	183ee83a 	callr	r3
1001196c:	003ff406 	br	10011940 <__alt_data_end+0xf8011940>
10011970:	9f000115 	stw	fp,4(r19)
10011974:	003fea06 	br	10011920 <__alt_data_end+0xf8011920>
10011978:	89000017 	ldw	r4,0(r17)
1001197c:	183ee83a 	callr	r3
10011980:	003fef06 	br	10011940 <__alt_data_end+0xf8011940>
10011984:	98800017 	ldw	r2,0(r19)
10011988:	982b883a 	mov	r21,r19
1001198c:	1027883a 	mov	r19,r2
10011990:	983fb61e 	bne	r19,zero,1001186c <__alt_data_end+0xf801186c>
10011994:	003fd106 	br	100118dc <__alt_data_end+0xf80118dc>
10011998:	0005883a 	mov	r2,zero
1001199c:	003ffa06 	br	10011988 <__alt_data_end+0xf8011988>

100119a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100119a0:	defffd04 	addi	sp,sp,-12
100119a4:	df000215 	stw	fp,8(sp)
100119a8:	df000204 	addi	fp,sp,8
100119ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100119b0:	0001883a 	nop
100119b4:	e0bfff17 	ldw	r2,-4(fp)
100119b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100119bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100119c0:	10000226 	beq	r2,zero,100119cc <_exit+0x2c>
    ALT_SIM_FAIL();
100119c4:	002af070 	cmpltui	zero,zero,43969
100119c8:	00000106 	br	100119d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100119cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100119d0:	003fff06 	br	100119d0 <__alt_data_end+0xf80119d0>
