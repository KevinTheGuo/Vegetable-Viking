
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000892c memsz 0x0000892c flags r-x
    LOAD off    0x0000994c vaddr 0x1000894c paddr 0x1000a3b8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000be24 vaddr 0x1000be24 paddr 0x1000be24 align 2**12
         filesz 0x00000000 memsz 0x00000290 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000085dc  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  10008808  10008808  00009808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  1000894c  1000a3b8  0000994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000290  1000be24  1000be24  0000be24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000b3b8  2**0
                  CONTENTS
  7 .sdram        00000000  1000c0b4  1000c0b4  0000b3b8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b3b8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ab0  00000000  00000000  0000b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018d03  00000000  00000000  0000be90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006ac6  00000000  00000000  00024b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007712  00000000  00000000  0002b659  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000018d0  00000000  00000000  00032d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c55  00000000  00000000  0003463c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009c80  00000000  00000000  00037291  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00040f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000b30  00000000  00000000  00040f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000443f4  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000443f7  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00044403  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00044404  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00044405  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00044409  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0004440d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00044411  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0004441c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00044427  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00044432  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0004443d  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00044457  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  0004889e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10008808 l    d  .rodata	00000000 .rodata
1000894c l    d  .rwdata	00000000 .rwdata
1000be24 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1000c0b4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10001f8c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
1000894c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004f2c l     F .text	00000008 __fp_lock
10004f34 l     F .text	00000008 __fp_unlock
10004f48 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
100060b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100061d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10006204 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000630c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10006408 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100064ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100066d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1000a3a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10006954 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10006aa4 l     F .text	00000038 alt_dev_reg
10009320 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10006d80 l     F .text	00000204 altera_avalon_jtag_uart_irq
10006f84 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10007700 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10007b98 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10007cf0 l     F .text	00000050 alt_get_errno
10007d40 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000be68 g     O .bss	00000004 alt_instruction_exception_handler
100011e0 g     F .text	00000068 convertDecimalToBinary
10005e98 g     F .text	00000054 _isatty_r
10006618 g     F .text	00000078 alt_main
10003408 g     F .text	000000b8 _puts_r
1000bfb4 g     O .bss	00000100 alt_irq
10005eec g     F .text	0000005c _lseek_r
1000a3b8 g       *ABS*	00000000 __flash_rwdata_start
1000c0b4 g       *ABS*	00000000 __alt_heap_start
10005c18 g     F .text	0000005c __sseek
10005290 g     F .text	00000010 __sinit
100050e8 g     F .text	00000078 __sfmoreglue
100066b0 g     F .text	00000020 __malloc_unlock
100008b0 g     F .text	00000294 spawningEngine
10004454 g     F .text	0000015c memmove
10005278 g     F .text	00000018 _cleanup
10008130 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10005e40 g     F .text	00000058 _fstat_r
1000be4c g     O .bss	00000004 errno
10005b94 g     F .text	00000008 __seofread
1000be54 g     O .bss	00000004 alt_argv
10012380 g       *ABS*	00000000 _gp
1000be24 g     O .bss	00000004 yCursor
100091a0 g     O .rwdata	00000180 alt_fd_list
10008150 g     F .text	00000090 alt_find_dev
1000431c g     F .text	00000138 memcpy
10004f3c g     F .text	0000000c _cleanup_r
100032d4 g     F .text	000000d0 .hidden __floatsidf
10007c78 g     F .text	00000078 alt_io_redirect
1000be28 g     O .bss	00000004 xCursor
10008808 g       *ABS*	00000000 __DTOR_END__
100034c0 g     F .text	00000014 puts
100083c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10007180 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100020a8 g     F .text	00000008 .hidden __udivsi3
1000635c g     F .text	000000ac isatty
1000be48 g     O .bss	00000004 __malloc_top_pad
100035e8 g     F .text	000004a4 __sfvwrite_r
10004b50 g     F .text	00000054 _sbrk_r
1000be2c g     O .bss	00000004 cursorClicked
10005f48 g     F .text	0000005c _read_r
1000a3a0 g     O .rwdata	00000004 alt_max_fd
10005d2c g     F .text	00000100 _fclose_r
10004efc g     F .text	00000030 fflush
1000be44 g     O .bss	00000004 __malloc_max_sbrked_mem
100020e0 g     F .text	0000089c .hidden __adddf3
10001970 g     F .text	0000061c .hidden __umoddi3
1000653c g     F .text	000000dc lseek
1000a380 g     O .rwdata	00000004 _global_impure_ptr
100045b0 g     F .text	000005a0 _realloc_r
1000c0b4 g       *ABS*	00000000 __bss_end
10007aa8 g     F .text	000000f0 alt_iic_isr_register
1000be94 g     O .bss	00000120 veggieObject
1000802c g     F .text	00000104 alt_tick
1000be30 g     O .bss	00000004 cursorStreak
10001330 g     F .text	00000640 .hidden __udivdi3
100052b0 g     F .text	00000018 __fp_lock_all
10007a5c g     F .text	0000004c alt_ic_irq_enabled
10007f94 g     F .text	00000098 alt_alarm_stop
1000be5c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10009178 g     O .rwdata	00000028 alt_dev_null
1000110c g     F .text	000000d4 port2Unpackager
100076e4 g     F .text	0000001c alt_dcache_flush_all
1000324c g     F .text	00000088 .hidden __fixdfsi
1000a3b8 g       *ABS*	00000000 __ram_rwdata_end
1000a398 g     O .rwdata	00000008 alt_dev_list
100069a4 g     F .text	00000100 write
1000894c g       *ABS*	00000000 __ram_rodata_end
10006254 g     F .text	000000b8 fstat
100020b0 g     F .text	00000008 .hidden __umodsi3
1000c0b4 g       *ABS*	00000000 end
1000be34 g     O .bss	00000004 key1
10006cbc g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10008808 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100033a4 g     F .text	00000064 .hidden __clzsi2
1000738c g     F .text	00000218 altera_avalon_jtag_uart_write
100052a0 g     F .text	00000004 __sfp_lock_acquire
10004234 g     F .text	000000e8 memchr
10005404 g     F .text	000002f0 _free_r
10008640 g     F .text	00000194 __call_exitprocs
1000a388 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
1000be60 g     O .bss	00000004 _alt_tick_rate
100034ec g     F .text	00000064 rand
1000be64 g     O .bss	00000004 _alt_nticks
10006720 g     F .text	00000104 read
10006b10 g     F .text	00000048 alt_sys_init
1000852c g     F .text	00000114 __register_exitproc
1000702c g     F .text	00000068 altera_avalon_jtag_uart_close
100020b8 g     F .text	00000028 .hidden __mulsi3
1000894c g       *ABS*	00000000 __ram_rwdata_start
10008808 g       *ABS*	00000000 __ram_rodata_start
1000be6c g     O .bss	00000028 __malloc_current_mallinfo
10006b58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100082f4 g     F .text	000000d4 alt_get_fd
10005cd8 g     F .text	00000054 _close_r
100084b0 g     F .text	0000007c memcmp
10006c18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000c0b4 g       *ABS*	00000000 __alt_stack_base
10006c68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004ba4 g     F .text	00000130 __swsetup_r
10005160 g     F .text	00000118 __sfp
10008d70 g     O .rwdata	00000408 __malloc_av_
100052ac g     F .text	00000004 __sinit_lock_release
10005b40 g     F .text	00000054 __sread
100081e0 g     F .text	00000114 alt_find_file
10007750 g     F .text	000000a4 alt_dev_llist_insert
10006690 g     F .text	00000020 __malloc_lock
100068a4 g     F .text	000000b0 sbrk
10004cd4 g     F .text	00000228 _fflush_r
1000be24 g       *ABS*	00000000 __bss_start
10005a1c g     F .text	00000124 memset
10000268 g     F .text	00000274 main
1000be58 g     O .bss	00000004 alt_envp
1000be40 g     O .bss	00000004 __malloc_max_total_mem
10006bb8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100034d4 g     F .text	00000018 srand
10001248 g     F .text	000000e8 convertBinaryToDecimal
10005c74 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10005e2c g     F .text	00000014 fclose
10003a8c g     F .text	000007a8 _malloc_r
1000a3a4 g     O .rwdata	00000004 alt_errno
100056f4 g     F .text	000000b8 _fwalk
10001ff8 g     F .text	00000054 .hidden __divsi3
100052e0 g     F .text	00000124 _malloc_trim_r
10008808 g       *ABS*	00000000 __CTOR_END__
10008808 g       *ABS*	00000000 __flash_rodata_start
10008808 g       *ABS*	00000000 __DTOR_LIST__
1000be38 g     O .bss	00000004 key3
10006adc g     F .text	00000034 alt_irq_init
10006824 g     F .text	00000080 alt_release_fd
10008810 g     O .rodata	00000100 .hidden __clz_tab
10008464 g     F .text	00000014 atexit
10000fb0 g     F .text	0000015c messagePackager
10005c7c g     F .text	0000005c _write_r
1000a384 g     O .rwdata	00000004 _impure_ptr
1000be50 g     O .bss	00000004 alt_argc
10007850 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100052c8 g     F .text	00000018 __fp_unlock_all
1000a390 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100078c8 g     F .text	00000050 alt_ic_isr_register
1000a3b8 g       *ABS*	00000000 _edata
1000c0b4 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10007094 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000be3c g     O .bss	00000004 key2
100079b8 g     F .text	000000a4 alt_ic_irq_disable
10005b9c g     F .text	0000007c __swrite
1000a38c g     O .rwdata	00000004 __malloc_trim_threshold
10008478 g     F .text	00000038 exit
100057ac g     F .text	000000b8 _fwalk_reent
100004dc g     F .text	000003d4 physicsEngine
1000204c g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100052a4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100087d4 g     F .text	00000034 _exit
100075a4 g     F .text	00000140 alt_alarm_start
10005fa4 g     F .text	0000010c .hidden __muldi3
10005864 g     F .text	000001b8 __smakebuf_r
10003550 g     F .text	00000098 strlen
10007e34 g     F .text	00000160 open
100078ac g     F .text	0000001c alt_icache_flush_all
10000b44 g     F .text	0000046c FPGAcommunicator
1000a3ac g     O .rwdata	00000004 alt_priority_mask
10007918 g     F .text	000000a0 alt_ic_irq_enable
1000297c g     F .text	000008d0 .hidden __subdf3
1000a3b0 g     O .rwdata	00000008 alt_alarm_list
100077f4 g     F .text	0000005c _do_ctors
10006100 g     F .text	000000d8 close
1000646c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
100052a8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10afed04 	addi	r2,r2,-16460
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10afed04 	addi	r2,r2,-16460
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6ba17 	ldw	r2,-25880(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6ba17 	ldw	r2,-25880(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d688e014 	ori	gp,gp,9088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10af8914 	ori	r2,r2,48676

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18f02d14 	ori	r3,r3,49332

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000646c0 	call	1000646c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00066180 	call	10006618 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00034d40 	call	100034d4 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a6aa15 	stw	r2,-25944(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a6a915 	stw	r2,-25948(gp)
	port2Unpackager();
100002b8:	000110c0 	call	1000110c <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<8; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	842fa504 	addi	r16,r16,-16748
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	00020b80 	call	100020b8 <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	842fa504 	addi	r16,r16,-16748
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00020b80 	call	100020b8 <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	842fa504 	addi	r16,r16,-16748
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	00020b80 	call	100020b8 <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	842fa504 	addi	r16,r16,-16748
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	00020b80 	call	100020b8 <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	842fa504 	addi	r16,r16,-16748
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	00020b80 	call	100020b8 <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	842fa504 	addi	r16,r16,-16748
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	00020b80 	call	100020b8 <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	842fa504 	addi	r16,r16,-16748
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	00020b80 	call	100020b8 <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<8; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800210 	cmplti	r2,r2,8
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	10afa504 	addi	r2,r2,-16748
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	10afa504 	addi	r2,r2,-16748
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	10afa504 	addi	r2,r2,-16748
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	10afa504 	addi	r2,r2,-16748
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10afa504 	addi	r2,r2,-16748
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	10afa504 	addi	r2,r2,-16748
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10afa504 	addi	r2,r2,-16748
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	10afa504 	addi	r2,r2,-16748
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
//		printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .02 seconds pass
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	e0bff817 	ldw	r2,-32(fp)
10000480:	1885c83a 	sub	r2,r3,r2
10000484:	108000b0 	cmpltui	r2,r2,2
10000488:	1000031e 	bne	r2,zero,10000498 <main+0x230>
		{
			physicsEngine();	// call our physics engine!
1000048c:	00004dc0 	call	100004dc <physicsEngine>
			lastPhysixed = elapsedTime;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000498:	e0fffe17 	ldw	r3,-8(fp)
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	1885c83a 	sub	r2,r3,r2
100004a4:	e0fffa17 	ldw	r3,-24(fp)
100004a8:	1880092e 	bgeu	r3,r2,100004d0 <main+0x268>
		{
			spawningEngine();	// call our spawning engine!
100004ac:	00008b00 	call	100008b0 <spawningEngine>
			lastSpawned = elapsedTime;
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 50) + 50;
100004b8:	00034ec0 	call	100034ec <rand>
100004bc:	1009883a 	mov	r4,r2
100004c0:	01400c84 	movi	r5,50
100004c4:	000204c0 	call	1000204c <__modsi3>
100004c8:	10800c84 	addi	r2,r2,50
100004cc:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}
	port2Unpackager();	// keep unpacking our stuff!
100004d0:	000110c0 	call	1000110c <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
100004d4:	0000b440 	call	10000b44 <FPGAcommunicator>
	}
100004d8:	003fe006 	br	1000045c <__alt_data_end+0xf800045c>

100004dc <physicsEngine>:
	return 0;
}

void physicsEngine()
{
100004dc:	defffa04 	addi	sp,sp,-24
100004e0:	dfc00515 	stw	ra,20(sp)
100004e4:	df000415 	stw	fp,16(sp)
100004e8:	dc800315 	stw	r18,12(sp)
100004ec:	dc400215 	stw	r17,8(sp)
100004f0:	dc000115 	stw	r16,4(sp)
100004f4:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<8; i++)	// update all our physics of all objects!
100004f8:	00800044 	movi	r2,1
100004fc:	e0bffc15 	stw	r2,-16(fp)
10000500:	0000df06 	br	10000880 <physicsEngine+0x3a4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000504:	04040074 	movhi	r16,4097
10000508:	842fa504 	addi	r16,r16,-16748
1000050c:	e0bffc17 	ldw	r2,-16(fp)
10000510:	1009883a 	mov	r4,r2
10000514:	01400904 	movi	r5,36
10000518:	00020b80 	call	100020b8 <__mulsi3>
1000051c:	8085883a 	add	r2,r16,r2
10000520:	10800304 	addi	r2,r2,12
10000524:	10800017 	ldw	r2,0(r2)
10000528:	1000d226 	beq	r2,zero,10000874 <physicsEngine+0x398>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
1000052c:	04040074 	movhi	r16,4097
10000530:	842fa504 	addi	r16,r16,-16748
10000534:	e0bffc17 	ldw	r2,-16(fp)
10000538:	1009883a 	mov	r4,r2
1000053c:	01400904 	movi	r5,36
10000540:	00020b80 	call	100020b8 <__mulsi3>
10000544:	8085883a 	add	r2,r16,r2
10000548:	10800017 	ldw	r2,0(r2)
1000054c:	1009883a 	mov	r4,r2
10000550:	00032d40 	call	100032d4 <__floatsidf>
10000554:	1023883a 	mov	r17,r2
10000558:	1825883a 	mov	r18,r3
1000055c:	04040074 	movhi	r16,4097
10000560:	842fa504 	addi	r16,r16,-16748
10000564:	e0bffc17 	ldw	r2,-16(fp)
10000568:	1009883a 	mov	r4,r2
1000056c:	01400904 	movi	r5,36
10000570:	00020b80 	call	100020b8 <__mulsi3>
10000574:	8085883a 	add	r2,r16,r2
10000578:	11000504 	addi	r4,r2,20
1000057c:	20800017 	ldw	r2,0(r4)
10000580:	20c00117 	ldw	r3,4(r4)
10000584:	8809883a 	mov	r4,r17
10000588:	900b883a 	mov	r5,r18
1000058c:	100d883a 	mov	r6,r2
10000590:	180f883a 	mov	r7,r3
10000594:	00020e00 	call	100020e0 <__adddf3>
10000598:	1009883a 	mov	r4,r2
1000059c:	180b883a 	mov	r5,r3
100005a0:	2005883a 	mov	r2,r4
100005a4:	2807883a 	mov	r3,r5
100005a8:	1009883a 	mov	r4,r2
100005ac:	180b883a 	mov	r5,r3
100005b0:	000324c0 	call	1000324c <__fixdfsi>
100005b4:	1023883a 	mov	r17,r2
100005b8:	04040074 	movhi	r16,4097
100005bc:	842fa504 	addi	r16,r16,-16748
100005c0:	e0bffc17 	ldw	r2,-16(fp)
100005c4:	1009883a 	mov	r4,r2
100005c8:	01400904 	movi	r5,36
100005cc:	00020b80 	call	100020b8 <__mulsi3>
100005d0:	8085883a 	add	r2,r16,r2
100005d4:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
100005d8:	04040074 	movhi	r16,4097
100005dc:	842fa504 	addi	r16,r16,-16748
100005e0:	e0bffc17 	ldw	r2,-16(fp)
100005e4:	1009883a 	mov	r4,r2
100005e8:	01400904 	movi	r5,36
100005ec:	00020b80 	call	100020b8 <__mulsi3>
100005f0:	8085883a 	add	r2,r16,r2
100005f4:	10800104 	addi	r2,r2,4
100005f8:	10800017 	ldw	r2,0(r2)
100005fc:	1009883a 	mov	r4,r2
10000600:	00032d40 	call	100032d4 <__floatsidf>
10000604:	1023883a 	mov	r17,r2
10000608:	1825883a 	mov	r18,r3
1000060c:	04040074 	movhi	r16,4097
10000610:	842fa504 	addi	r16,r16,-16748
10000614:	e0bffc17 	ldw	r2,-16(fp)
10000618:	1009883a 	mov	r4,r2
1000061c:	01400904 	movi	r5,36
10000620:	00020b80 	call	100020b8 <__mulsi3>
10000624:	8085883a 	add	r2,r16,r2
10000628:	11000704 	addi	r4,r2,28
1000062c:	20800017 	ldw	r2,0(r4)
10000630:	20c00117 	ldw	r3,4(r4)
10000634:	8809883a 	mov	r4,r17
10000638:	900b883a 	mov	r5,r18
1000063c:	100d883a 	mov	r6,r2
10000640:	180f883a 	mov	r7,r3
10000644:	00020e00 	call	100020e0 <__adddf3>
10000648:	1009883a 	mov	r4,r2
1000064c:	180b883a 	mov	r5,r3
10000650:	2005883a 	mov	r2,r4
10000654:	2807883a 	mov	r3,r5
10000658:	1009883a 	mov	r4,r2
1000065c:	180b883a 	mov	r5,r3
10000660:	000324c0 	call	1000324c <__fixdfsi>
10000664:	1023883a 	mov	r17,r2
10000668:	04040074 	movhi	r16,4097
1000066c:	842fa504 	addi	r16,r16,-16748
10000670:	e0bffc17 	ldw	r2,-16(fp)
10000674:	1009883a 	mov	r4,r2
10000678:	01400904 	movi	r5,36
1000067c:	00020b80 	call	100020b8 <__mulsi3>
10000680:	8085883a 	add	r2,r16,r2
10000684:	10800104 	addi	r2,r2,4
10000688:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 5;
1000068c:	04040074 	movhi	r16,4097
10000690:	842fa504 	addi	r16,r16,-16748
10000694:	e0bffc17 	ldw	r2,-16(fp)
10000698:	1009883a 	mov	r4,r2
1000069c:	01400904 	movi	r5,36
100006a0:	00020b80 	call	100020b8 <__mulsi3>
100006a4:	8085883a 	add	r2,r16,r2
100006a8:	11000704 	addi	r4,r2,28
100006ac:	20800017 	ldw	r2,0(r4)
100006b0:	20c00117 	ldw	r3,4(r4)
100006b4:	1009883a 	mov	r4,r2
100006b8:	180b883a 	mov	r5,r3
100006bc:	000d883a 	mov	r6,zero
100006c0:	01d00534 	movhi	r7,16404
100006c4:	000297c0 	call	1000297c <__subdf3>
100006c8:	1009883a 	mov	r4,r2
100006cc:	180b883a 	mov	r5,r3
100006d0:	2021883a 	mov	r16,r4
100006d4:	2823883a 	mov	r17,r5
100006d8:	04840074 	movhi	r18,4097
100006dc:	94afa504 	addi	r18,r18,-16748
100006e0:	e0bffc17 	ldw	r2,-16(fp)
100006e4:	1009883a 	mov	r4,r2
100006e8:	01400904 	movi	r5,36
100006ec:	00020b80 	call	100020b8 <__mulsi3>
100006f0:	9085883a 	add	r2,r18,r2
100006f4:	10800704 	addi	r2,r2,28
100006f8:	14000015 	stw	r16,0(r2)
100006fc:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are below the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000700:	04040074 	movhi	r16,4097
10000704:	842fa504 	addi	r16,r16,-16748
10000708:	e0bffc17 	ldw	r2,-16(fp)
1000070c:	1009883a 	mov	r4,r2
10000710:	01400904 	movi	r5,36
10000714:	00020b80 	call	100020b8 <__mulsi3>
10000718:	8085883a 	add	r2,r16,r2
1000071c:	10800104 	addi	r2,r2,4
10000720:	10800017 	ldw	r2,0(r2)
10000724:	10001316 	blt	r2,zero,10000774 <physicsEngine+0x298>
10000728:	04040074 	movhi	r16,4097
1000072c:	842fa504 	addi	r16,r16,-16748
10000730:	e0bffc17 	ldw	r2,-16(fp)
10000734:	1009883a 	mov	r4,r2
10000738:	01400904 	movi	r5,36
1000073c:	00020b80 	call	100020b8 <__mulsi3>
10000740:	8085883a 	add	r2,r16,r2
10000744:	10800017 	ldw	r2,0(r2)
10000748:	10000a16 	blt	r2,zero,10000774 <physicsEngine+0x298>
1000074c:	04040074 	movhi	r16,4097
10000750:	842fa504 	addi	r16,r16,-16748
10000754:	e0bffc17 	ldw	r2,-16(fp)
10000758:	1009883a 	mov	r4,r2
1000075c:	01400904 	movi	r5,36
10000760:	00020b80 	call	100020b8 <__mulsi3>
10000764:	8085883a 	add	r2,r16,r2
10000768:	10800017 	ldw	r2,0(r2)
1000076c:	1080a050 	cmplti	r2,r2,641
10000770:	1000401e 	bne	r2,zero,10000874 <physicsEngine+0x398>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000774:	04040074 	movhi	r16,4097
10000778:	842fa504 	addi	r16,r16,-16748
1000077c:	e0bffc17 	ldw	r2,-16(fp)
10000780:	1009883a 	mov	r4,r2
10000784:	01400904 	movi	r5,36
10000788:	00020b80 	call	100020b8 <__mulsi3>
1000078c:	8085883a 	add	r2,r16,r2
10000790:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000794:	04040074 	movhi	r16,4097
10000798:	842fa504 	addi	r16,r16,-16748
1000079c:	e0bffc17 	ldw	r2,-16(fp)
100007a0:	1009883a 	mov	r4,r2
100007a4:	01400904 	movi	r5,36
100007a8:	00020b80 	call	100020b8 <__mulsi3>
100007ac:	8085883a 	add	r2,r16,r2
100007b0:	10800104 	addi	r2,r2,4
100007b4:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
100007b8:	04040074 	movhi	r16,4097
100007bc:	842fa504 	addi	r16,r16,-16748
100007c0:	e0bffc17 	ldw	r2,-16(fp)
100007c4:	1009883a 	mov	r4,r2
100007c8:	01400904 	movi	r5,36
100007cc:	00020b80 	call	100020b8 <__mulsi3>
100007d0:	8085883a 	add	r2,r16,r2
100007d4:	10800204 	addi	r2,r2,8
100007d8:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
100007dc:	04040074 	movhi	r16,4097
100007e0:	842fa504 	addi	r16,r16,-16748
100007e4:	e0bffc17 	ldw	r2,-16(fp)
100007e8:	1009883a 	mov	r4,r2
100007ec:	01400904 	movi	r5,36
100007f0:	00020b80 	call	100020b8 <__mulsi3>
100007f4:	8085883a 	add	r2,r16,r2
100007f8:	10800304 	addi	r2,r2,12
100007fc:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000800:	04040074 	movhi	r16,4097
10000804:	842fa504 	addi	r16,r16,-16748
10000808:	e0bffc17 	ldw	r2,-16(fp)
1000080c:	1009883a 	mov	r4,r2
10000810:	01400904 	movi	r5,36
10000814:	00020b80 	call	100020b8 <__mulsi3>
10000818:	8085883a 	add	r2,r16,r2
1000081c:	10800404 	addi	r2,r2,16
10000820:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000824:	04040074 	movhi	r16,4097
10000828:	842fa504 	addi	r16,r16,-16748
1000082c:	e0bffc17 	ldw	r2,-16(fp)
10000830:	1009883a 	mov	r4,r2
10000834:	01400904 	movi	r5,36
10000838:	00020b80 	call	100020b8 <__mulsi3>
1000083c:	8085883a 	add	r2,r16,r2
10000840:	10800504 	addi	r2,r2,20
10000844:	10000015 	stw	zero,0(r2)
10000848:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
1000084c:	04040074 	movhi	r16,4097
10000850:	842fa504 	addi	r16,r16,-16748
10000854:	e0bffc17 	ldw	r2,-16(fp)
10000858:	1009883a 	mov	r4,r2
1000085c:	01400904 	movi	r5,36
10000860:	00020b80 	call	100020b8 <__mulsi3>
10000864:	8085883a 	add	r2,r16,r2
10000868:	10800704 	addi	r2,r2,28
1000086c:	10000015 	stw	zero,0(r2)
10000870:	10000115 	stw	zero,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<8; i++)	// update all our physics of all objects!
10000874:	e0bffc17 	ldw	r2,-16(fp)
10000878:	10800044 	addi	r2,r2,1
1000087c:	e0bffc15 	stw	r2,-16(fp)
10000880:	e0bffc17 	ldw	r2,-16(fp)
10000884:	10800210 	cmplti	r2,r2,8
10000888:	103f1e1e 	bne	r2,zero,10000504 <__alt_data_end+0xf8000504>
				veggieObject[i].yVelocity = 0;
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
1000088c:	0001883a 	nop
}
10000890:	e6fffd04 	addi	sp,fp,-12
10000894:	dfc00417 	ldw	ra,16(sp)
10000898:	df000317 	ldw	fp,12(sp)
1000089c:	dc800217 	ldw	r18,8(sp)
100008a0:	dc400117 	ldw	r17,4(sp)
100008a4:	dc000017 	ldw	r16,0(sp)
100008a8:	dec00504 	addi	sp,sp,20
100008ac:	f800283a 	ret

100008b0 <spawningEngine>:

void spawningEngine()
{
100008b0:	defff504 	addi	sp,sp,-44
100008b4:	dfc00a15 	stw	ra,40(sp)
100008b8:	df000915 	stw	fp,36(sp)
100008bc:	dc400815 	stw	r17,32(sp)
100008c0:	dc000715 	stw	r16,28(sp)
100008c4:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<8; i++)	// let's go through our objects and see which ones are free
100008c8:	00800044 	movi	r2,1
100008cc:	e0bff715 	stw	r2,-36(fp)
100008d0:	00009206 	br	10000b1c <spawningEngine+0x26c>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
100008d4:	04040074 	movhi	r16,4097
100008d8:	842fa504 	addi	r16,r16,-16748
100008dc:	e0bff717 	ldw	r2,-36(fp)
100008e0:	1009883a 	mov	r4,r2
100008e4:	01400904 	movi	r5,36
100008e8:	00020b80 	call	100020b8 <__mulsi3>
100008ec:	8085883a 	add	r2,r16,r2
100008f0:	10800304 	addi	r2,r2,12
100008f4:	10800017 	ldw	r2,0(r2)
100008f8:	1000851e 	bne	r2,zero,10000b10 <spawningEngine+0x260>
		{
			// RANDOM GENERATION!!
			unsigned int randomX = (rand() % 540) + 50;
100008fc:	00034ec0 	call	100034ec <rand>
10000900:	1009883a 	mov	r4,r2
10000904:	01408704 	movi	r5,540
10000908:	000204c0 	call	1000204c <__modsi3>
1000090c:	10800c84 	addi	r2,r2,50
10000910:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
10000914:	00034ec0 	call	100034ec <rand>
10000918:	1007883a 	mov	r3,r2
1000091c:	00a00034 	movhi	r2,32768
10000920:	108001c4 	addi	r2,r2,7
10000924:	1884703a 	and	r2,r3,r2
10000928:	1000040e 	bge	r2,zero,1000093c <spawningEngine+0x8c>
1000092c:	10bfffc4 	addi	r2,r2,-1
10000930:	00fffe04 	movi	r3,-8
10000934:	10c4b03a 	or	r2,r2,r3
10000938:	10800044 	addi	r2,r2,1
1000093c:	10800044 	addi	r2,r2,1
10000940:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 22) + 45;
10000944:	00034ec0 	call	100034ec <rand>
10000948:	1009883a 	mov	r4,r2
1000094c:	01400584 	movi	r5,22
10000950:	000204c0 	call	1000204c <__modsi3>
10000954:	10800b44 	addi	r2,r2,45
10000958:	1009883a 	mov	r4,r2
1000095c:	00032d40 	call	100032d4 <__floatsidf>
10000960:	1009883a 	mov	r4,r2
10000964:	180b883a 	mov	r5,r3
10000968:	e13ffc15 	stw	r4,-16(fp)
1000096c:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 40) - 20;
10000970:	00034ec0 	call	100034ec <rand>
10000974:	1009883a 	mov	r4,r2
10000978:	01400a04 	movi	r5,40
1000097c:	000204c0 	call	1000204c <__modsi3>
10000980:	10bffb04 	addi	r2,r2,-20
10000984:	1009883a 	mov	r4,r2
10000988:	00032d40 	call	100032d4 <__floatsidf>
1000098c:	1009883a 	mov	r4,r2
10000990:	180b883a 	mov	r5,r3
10000994:	e13ff815 	stw	r4,-32(fp)
10000998:	e17ff915 	stw	r5,-28(fp)

			if (randomX < 100)
1000099c:	e0bffa17 	ldw	r2,-24(fp)
100009a0:	10801928 	cmpgeui	r2,r2,100
100009a4:	10000b1e 	bne	r2,zero,100009d4 <spawningEngine+0x124>
			{
				randomSpeedX = (rand() % 40);
100009a8:	00034ec0 	call	100034ec <rand>
100009ac:	1009883a 	mov	r4,r2
100009b0:	01400a04 	movi	r5,40
100009b4:	000204c0 	call	1000204c <__modsi3>
100009b8:	1009883a 	mov	r4,r2
100009bc:	00032d40 	call	100032d4 <__floatsidf>
100009c0:	1009883a 	mov	r4,r2
100009c4:	180b883a 	mov	r5,r3
100009c8:	e13ff815 	stw	r4,-32(fp)
100009cc:	e17ff915 	stw	r5,-28(fp)
100009d0:	00000e06 	br	10000a0c <spawningEngine+0x15c>
			}
			else if (randomX > 540)
100009d4:	e0bffa17 	ldw	r2,-24(fp)
100009d8:	10808770 	cmpltui	r2,r2,541
100009dc:	10000b1e 	bne	r2,zero,10000a0c <spawningEngine+0x15c>
			{
				randomSpeedX = (rand() % 40) - 40;
100009e0:	00034ec0 	call	100034ec <rand>
100009e4:	1009883a 	mov	r4,r2
100009e8:	01400a04 	movi	r5,40
100009ec:	000204c0 	call	1000204c <__modsi3>
100009f0:	10bff604 	addi	r2,r2,-40
100009f4:	1009883a 	mov	r4,r2
100009f8:	00032d40 	call	100032d4 <__floatsidf>
100009fc:	1009883a 	mov	r4,r2
10000a00:	180b883a 	mov	r5,r3
10000a04:	e13ff815 	stw	r4,-32(fp)
10000a08:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000a0c:	e47ffa17 	ldw	r17,-24(fp)
10000a10:	04040074 	movhi	r16,4097
10000a14:	842fa504 	addi	r16,r16,-16748
10000a18:	e0bff717 	ldw	r2,-36(fp)
10000a1c:	1009883a 	mov	r4,r2
10000a20:	01400904 	movi	r5,36
10000a24:	00020b80 	call	100020b8 <__mulsi3>
10000a28:	8085883a 	add	r2,r16,r2
10000a2c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000a30:	04040074 	movhi	r16,4097
10000a34:	842fa504 	addi	r16,r16,-16748
10000a38:	e0bff717 	ldw	r2,-36(fp)
10000a3c:	1009883a 	mov	r4,r2
10000a40:	01400904 	movi	r5,36
10000a44:	00020b80 	call	100020b8 <__mulsi3>
10000a48:	8085883a 	add	r2,r16,r2
10000a4c:	10800104 	addi	r2,r2,4
10000a50:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000a54:	04040074 	movhi	r16,4097
10000a58:	842fa504 	addi	r16,r16,-16748
10000a5c:	e0bff717 	ldw	r2,-36(fp)
10000a60:	1009883a 	mov	r4,r2
10000a64:	01400904 	movi	r5,36
10000a68:	00020b80 	call	100020b8 <__mulsi3>
10000a6c:	8085883a 	add	r2,r16,r2
10000a70:	10800204 	addi	r2,r2,8
10000a74:	e0fffb17 	ldw	r3,-20(fp)
10000a78:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
10000a7c:	04040074 	movhi	r16,4097
10000a80:	842fa504 	addi	r16,r16,-16748
10000a84:	e0bff717 	ldw	r2,-36(fp)
10000a88:	1009883a 	mov	r4,r2
10000a8c:	01400904 	movi	r5,36
10000a90:	00020b80 	call	100020b8 <__mulsi3>
10000a94:	8085883a 	add	r2,r16,r2
10000a98:	10800304 	addi	r2,r2,12
10000a9c:	00c00044 	movi	r3,1
10000aa0:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10000aa4:	04040074 	movhi	r16,4097
10000aa8:	842fa504 	addi	r16,r16,-16748
10000aac:	e0bff717 	ldw	r2,-36(fp)
10000ab0:	1009883a 	mov	r4,r2
10000ab4:	01400904 	movi	r5,36
10000ab8:	00020b80 	call	100020b8 <__mulsi3>
10000abc:	8085883a 	add	r2,r16,r2
10000ac0:	10800504 	addi	r2,r2,20
10000ac4:	e0fff817 	ldw	r3,-32(fp)
10000ac8:	10c00015 	stw	r3,0(r2)
10000acc:	e0fff917 	ldw	r3,-28(fp)
10000ad0:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000ad4:	04040074 	movhi	r16,4097
10000ad8:	842fa504 	addi	r16,r16,-16748
10000adc:	e0bff717 	ldw	r2,-36(fp)
10000ae0:	1009883a 	mov	r4,r2
10000ae4:	01400904 	movi	r5,36
10000ae8:	00020b80 	call	100020b8 <__mulsi3>
10000aec:	8085883a 	add	r2,r16,r2
10000af0:	10800704 	addi	r2,r2,28
10000af4:	e0fffc17 	ldw	r3,-16(fp)
10000af8:	10c00015 	stw	r3,0(r2)
10000afc:	e0fffd17 	ldw	r3,-12(fp)
10000b00:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000b04:	00800a84 	movi	r2,42
10000b08:	e0bff715 	stw	r2,-36(fp)
			break;
10000b0c:	00000606 	br	10000b28 <spawningEngine+0x278>
}

void spawningEngine()
{
	int i;
	for(i=1; i<8; i++)	// let's go through our objects and see which ones are free
10000b10:	e0bff717 	ldw	r2,-36(fp)
10000b14:	10800044 	addi	r2,r2,1
10000b18:	e0bff715 	stw	r2,-36(fp)
10000b1c:	e0bff717 	ldw	r2,-36(fp)
10000b20:	10800210 	cmplti	r2,r2,8
10000b24:	103f6b1e 	bne	r2,zero,100008d4 <__alt_data_end+0xf80008d4>
			// now let's break
			i = 42;
			break;
		}
	}
}
10000b28:	e6fffe04 	addi	sp,fp,-8
10000b2c:	dfc00317 	ldw	ra,12(sp)
10000b30:	df000217 	ldw	fp,8(sp)
10000b34:	dc400117 	ldw	r17,4(sp)
10000b38:	dc000017 	ldw	r16,0(sp)
10000b3c:	dec00404 	addi	sp,sp,16
10000b40:	f800283a 	ret

10000b44 <FPGAcommunicator>:
	}
}
*/
// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000b44:	deffe704 	addi	sp,sp,-100
10000b48:	dfc01815 	stw	ra,96(sp)
10000b4c:	df001715 	stw	fp,92(sp)
10000b50:	dc001615 	stw	r16,88(sp)
10000b54:	df001704 	addi	fp,sp,92
	// start putting in our xcoords
	printf("start!\n");
10000b58:	01040074 	movhi	r4,4097
10000b5c:	21220204 	addi	r4,r4,-30712
10000b60:	00034c00 	call	100034c0 <puts>
	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10000b64:	00801c04 	movi	r2,112
10000b68:	00c00044 	movi	r3,1
10000b6c:	10c00005 	stb	r3,0(r2)
//	*to_hw_port0 = FPGAmessage[0];
	*to_hw_port1 = 428;
10000b70:	00803c04 	movi	r2,240
10000b74:	00c06b04 	movi	r3,428
10000b78:	10c00015 	stw	r3,0(r2)
//	*to_hw_port1 = veggieObject[1].xPosition;
	*to_hw_port2 = veggieObject[2].xPosition;
10000b7c:	00c03804 	movi	r3,224
10000b80:	00840074 	movhi	r2,4097
10000b84:	10afa504 	addi	r2,r2,-16748
10000b88:	10801217 	ldw	r2,72(r2)
10000b8c:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].xPosition;
10000b90:	00c03404 	movi	r3,208
10000b94:	00840074 	movhi	r2,4097
10000b98:	10afa504 	addi	r2,r2,-16748
10000b9c:	10801b17 	ldw	r2,108(r2)
10000ba0:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].xPosition;
10000ba4:	00c03004 	movi	r3,192
10000ba8:	00840074 	movhi	r2,4097
10000bac:	10afa504 	addi	r2,r2,-16748
10000bb0:	10802417 	ldw	r2,144(r2)
10000bb4:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].xPosition;
10000bb8:	00c02c04 	movi	r3,176
10000bbc:	00840074 	movhi	r2,4097
10000bc0:	10afa504 	addi	r2,r2,-16748
10000bc4:	10802d17 	ldw	r2,180(r2)
10000bc8:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].xPosition;
10000bcc:	00c02804 	movi	r3,160
10000bd0:	00840074 	movhi	r2,4097
10000bd4:	10afa504 	addi	r2,r2,-16748
10000bd8:	10803617 	ldw	r2,216(r2)
10000bdc:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].xPosition;
10000be0:	00c01804 	movi	r3,96
10000be4:	00840074 	movhi	r2,4097
10000be8:	10afa504 	addi	r2,r2,-16748
10000bec:	10803f17 	ldw	r2,252(r2)
10000bf0:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].xPosition;
10000bf4:	00c02404 	movi	r3,144
10000bf8:	00840074 	movhi	r2,4097
10000bfc:	10afa504 	addi	r2,r2,-16748
10000c00:	10804817 	ldw	r2,288(r2)
10000c04:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].xPosition;
10000c08:	00c02004 	movi	r3,128
10000c0c:	00840074 	movhi	r2,4097
10000c10:	10afa504 	addi	r2,r2,-16748
10000c14:	10805117 	ldw	r2,324(r2)
10000c18:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].xPosition;
10000c1c:	00c01004 	movi	r3,64
10000c20:	00840074 	movhi	r2,4097
10000c24:	10afa504 	addi	r2,r2,-16748
10000c28:	10805a17 	ldw	r2,360(r2)
10000c2c:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].xPosition;
10000c30:	00c00c04 	movi	r3,48
10000c34:	00840074 	movhi	r2,4097
10000c38:	10afa504 	addi	r2,r2,-16748
10000c3c:	10806317 	ldw	r2,396(r2)
10000c40:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].xPosition;
10000c44:	00c00804 	movi	r3,32
10000c48:	00840074 	movhi	r2,4097
10000c4c:	10afa504 	addi	r2,r2,-16748
10000c50:	10806c17 	ldw	r2,432(r2)
10000c54:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].xPosition;
10000c58:	00c05804 	movi	r3,352
10000c5c:	00840074 	movhi	r2,4097
10000c60:	10afa504 	addi	r2,r2,-16748
10000c64:	10807517 	ldw	r2,468(r2)
10000c68:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].xPosition;
10000c6c:	00c05404 	movi	r3,336
10000c70:	00840074 	movhi	r2,4097
10000c74:	10afa504 	addi	r2,r2,-16748
10000c78:	10807e17 	ldw	r2,504(r2)
10000c7c:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].xPosition;
10000c80:	00c05004 	movi	r3,320
10000c84:	00840074 	movhi	r2,4097
10000c88:	10afa504 	addi	r2,r2,-16748
10000c8c:	10808717 	ldw	r2,540(r2)
10000c90:	18800015 	stw	r2,0(r3)

	// wait for response
	while(*to_sw_sig != 1);
10000c94:	0001883a 	nop
10000c98:	00801404 	movi	r2,80
10000c9c:	10800003 	ldbu	r2,0(r2)
10000ca0:	10803fcc 	andi	r2,r2,255
10000ca4:	1080201c 	xori	r2,r2,128
10000ca8:	10bfe004 	addi	r2,r2,-128
10000cac:	10800058 	cmpnei	r2,r2,1
10000cb0:	103ff91e 	bne	r2,zero,10000c98 <__alt_data_end+0xf8000c98>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
10000cb4:	00801c04 	movi	r2,112
10000cb8:	00c00084 	movi	r3,2
10000cbc:	10c00005 	stb	r3,0(r2)
//	*to_hw_port0 = FPGAmessage[0];
	*to_hw_port1 = 98;
10000cc0:	00803c04 	movi	r2,240
10000cc4:	00c01884 	movi	r3,98
10000cc8:	10c00015 	stw	r3,0(r2)
//	*to_hw_port1 = veggieObject[1].yPosition;
	*to_hw_port2 = veggieObject[2].yPosition;
10000ccc:	00c03804 	movi	r3,224
10000cd0:	00840074 	movhi	r2,4097
10000cd4:	10afa504 	addi	r2,r2,-16748
10000cd8:	10801317 	ldw	r2,76(r2)
10000cdc:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].yPosition;
10000ce0:	00c03404 	movi	r3,208
10000ce4:	00840074 	movhi	r2,4097
10000ce8:	10afa504 	addi	r2,r2,-16748
10000cec:	10801c17 	ldw	r2,112(r2)
10000cf0:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].yPosition;
10000cf4:	00c03004 	movi	r3,192
10000cf8:	00840074 	movhi	r2,4097
10000cfc:	10afa504 	addi	r2,r2,-16748
10000d00:	10802517 	ldw	r2,148(r2)
10000d04:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].yPosition;
10000d08:	00c02c04 	movi	r3,176
10000d0c:	00840074 	movhi	r2,4097
10000d10:	10afa504 	addi	r2,r2,-16748
10000d14:	10802e17 	ldw	r2,184(r2)
10000d18:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].yPosition;
10000d1c:	00c02804 	movi	r3,160
10000d20:	00840074 	movhi	r2,4097
10000d24:	10afa504 	addi	r2,r2,-16748
10000d28:	10803717 	ldw	r2,220(r2)
10000d2c:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].yPosition;
10000d30:	00c01804 	movi	r3,96
10000d34:	00840074 	movhi	r2,4097
10000d38:	10afa504 	addi	r2,r2,-16748
10000d3c:	10804017 	ldw	r2,256(r2)
10000d40:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].yPosition;
10000d44:	00c02404 	movi	r3,144
10000d48:	00840074 	movhi	r2,4097
10000d4c:	10afa504 	addi	r2,r2,-16748
10000d50:	10804917 	ldw	r2,292(r2)
10000d54:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].yPosition;
10000d58:	00c02004 	movi	r3,128
10000d5c:	00840074 	movhi	r2,4097
10000d60:	10afa504 	addi	r2,r2,-16748
10000d64:	10805217 	ldw	r2,328(r2)
10000d68:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].yPosition;
10000d6c:	00c01004 	movi	r3,64
10000d70:	00840074 	movhi	r2,4097
10000d74:	10afa504 	addi	r2,r2,-16748
10000d78:	10805b17 	ldw	r2,364(r2)
10000d7c:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].yPosition;
10000d80:	00c00c04 	movi	r3,48
10000d84:	00840074 	movhi	r2,4097
10000d88:	10afa504 	addi	r2,r2,-16748
10000d8c:	10806417 	ldw	r2,400(r2)
10000d90:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].yPosition;
10000d94:	00c00804 	movi	r3,32
10000d98:	00840074 	movhi	r2,4097
10000d9c:	10afa504 	addi	r2,r2,-16748
10000da0:	10806d17 	ldw	r2,436(r2)
10000da4:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].yPosition;
10000da8:	00c05804 	movi	r3,352
10000dac:	00840074 	movhi	r2,4097
10000db0:	10afa504 	addi	r2,r2,-16748
10000db4:	10807617 	ldw	r2,472(r2)
10000db8:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].yPosition;
10000dbc:	00c05404 	movi	r3,336
10000dc0:	00840074 	movhi	r2,4097
10000dc4:	10afa504 	addi	r2,r2,-16748
10000dc8:	10807f17 	ldw	r2,508(r2)
10000dcc:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].yPosition;
10000dd0:	00c05004 	movi	r3,320
10000dd4:	00840074 	movhi	r2,4097
10000dd8:	10afa504 	addi	r2,r2,-16748
10000ddc:	10808817 	ldw	r2,544(r2)
10000de0:	18800015 	stw	r2,0(r3)

	// wait for confirmation
	while(*to_sw_sig != 2);
10000de4:	0001883a 	nop
10000de8:	00801404 	movi	r2,80
10000dec:	10800003 	ldbu	r2,0(r2)
10000df0:	10803fcc 	andi	r2,r2,255
10000df4:	1080201c 	xori	r2,r2,128
10000df8:	10bfe004 	addi	r2,r2,-128
10000dfc:	10800098 	cmpnei	r2,r2,2
10000e00:	103ff91e 	bne	r2,zero,10000de8 <__alt_data_end+0xf8000de8>
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000e04:	e03fee15 	stw	zero,-72(fp)
10000e08:	00002206 	br	10000e94 <FPGAcommunicator+0x350>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
10000e0c:	04040074 	movhi	r16,4097
10000e10:	842fa504 	addi	r16,r16,-16748
10000e14:	e0bfee17 	ldw	r2,-72(fp)
10000e18:	1009883a 	mov	r4,r2
10000e1c:	01400904 	movi	r5,36
10000e20:	00020b80 	call	100020b8 <__mulsi3>
10000e24:	8085883a 	add	r2,r16,r2
10000e28:	10c00417 	ldw	r3,16(r2)
10000e2c:	d8c00015 	stw	r3,0(sp)
10000e30:	10c00517 	ldw	r3,20(r2)
10000e34:	d8c00115 	stw	r3,4(sp)
10000e38:	10c00617 	ldw	r3,24(r2)
10000e3c:	d8c00215 	stw	r3,8(sp)
10000e40:	10c00717 	ldw	r3,28(r2)
10000e44:	d8c00315 	stw	r3,12(sp)
10000e48:	10c00817 	ldw	r3,32(r2)
10000e4c:	d8c00415 	stw	r3,16(sp)
10000e50:	11000017 	ldw	r4,0(r2)
10000e54:	11400117 	ldw	r5,4(r2)
10000e58:	11800217 	ldw	r6,8(r2)
10000e5c:	11c00317 	ldw	r7,12(r2)
10000e60:	0000fb00 	call	10000fb0 <messagePackager>
10000e64:	e0bfef15 	stw	r2,-68(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000e68:	e0bfee17 	ldw	r2,-72(fp)
10000e6c:	1085883a 	add	r2,r2,r2
10000e70:	1085883a 	add	r2,r2,r2
10000e74:	e0ffee04 	addi	r3,fp,-72
10000e78:	1885883a 	add	r2,r3,r2
10000e7c:	10800204 	addi	r2,r2,8
10000e80:	e0ffef17 	ldw	r3,-68(fp)
10000e84:	10c00015 	stw	r3,0(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000e88:	e0bfee17 	ldw	r2,-72(fp)
10000e8c:	10800044 	addi	r2,r2,1
10000e90:	e0bfee15 	stw	r2,-72(fp)
10000e94:	e0bfee17 	ldw	r2,-72(fp)
10000e98:	10800410 	cmplti	r2,r2,16
10000e9c:	103fdb1e 	bne	r2,zero,10000e0c <__alt_data_end+0xf8000e0c>
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
	}

	*to_hw_sig = 3;		// our final sending
10000ea0:	00801c04 	movi	r2,112
10000ea4:	00c000c4 	movi	r3,3
10000ea8:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
10000eac:	00804004 	movi	r2,256
10000eb0:	e0fff017 	ldw	r3,-64(fp)
10000eb4:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10000eb8:	00803c04 	movi	r2,240
10000ebc:	e0fff117 	ldw	r3,-60(fp)
10000ec0:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
10000ec4:	00803804 	movi	r2,224
10000ec8:	e0fff217 	ldw	r3,-56(fp)
10000ecc:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
10000ed0:	00803404 	movi	r2,208
10000ed4:	e0fff317 	ldw	r3,-52(fp)
10000ed8:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10000edc:	00803004 	movi	r2,192
10000ee0:	e0fff417 	ldw	r3,-48(fp)
10000ee4:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10000ee8:	00802c04 	movi	r2,176
10000eec:	e0fff517 	ldw	r3,-44(fp)
10000ef0:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
10000ef4:	00802804 	movi	r2,160
10000ef8:	e0fff617 	ldw	r3,-40(fp)
10000efc:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10000f00:	00801804 	movi	r2,96
10000f04:	e0fff717 	ldw	r3,-36(fp)
10000f08:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10000f0c:	00802404 	movi	r2,144
10000f10:	e0fff817 	ldw	r3,-32(fp)
10000f14:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10000f18:	00802004 	movi	r2,128
10000f1c:	e0fff917 	ldw	r3,-28(fp)
10000f20:	10c00015 	stw	r3,0(r2)
	*to_hw_port10 = FPGAmessage[10];
10000f24:	00801004 	movi	r2,64
10000f28:	e0fffa17 	ldw	r3,-24(fp)
10000f2c:	10c00015 	stw	r3,0(r2)
	*to_hw_port11 = FPGAmessage[11];
10000f30:	00800c04 	movi	r2,48
10000f34:	e0fffb17 	ldw	r3,-20(fp)
10000f38:	10c00015 	stw	r3,0(r2)
	*to_hw_port12 = FPGAmessage[12];
10000f3c:	00800804 	movi	r2,32
10000f40:	e0fffc17 	ldw	r3,-16(fp)
10000f44:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = FPGAmessage[13];
10000f48:	00805804 	movi	r2,352
10000f4c:	e0fffd17 	ldw	r3,-12(fp)
10000f50:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = FPGAmessage[14];
10000f54:	00805404 	movi	r2,336
10000f58:	e0fffe17 	ldw	r3,-8(fp)
10000f5c:	10c00015 	stw	r3,0(r2)
	*to_hw_port15 = FPGAmessage[15];
10000f60:	00805004 	movi	r2,320
10000f64:	e0ffff17 	ldw	r3,-4(fp)
10000f68:	10c00015 	stw	r3,0(r2)

	// last confirmation
	while(*to_sw_sig != 3);
10000f6c:	0001883a 	nop
10000f70:	00801404 	movi	r2,80
10000f74:	10800003 	ldbu	r2,0(r2)
10000f78:	10803fcc 	andi	r2,r2,255
10000f7c:	1080201c 	xori	r2,r2,128
10000f80:	10bfe004 	addi	r2,r2,-128
10000f84:	108000d8 	cmpnei	r2,r2,3
10000f88:	103ff91e 	bne	r2,zero,10000f70 <__alt_data_end+0xf8000f70>
	*to_hw_sig = 0;
10000f8c:	00801c04 	movi	r2,112
10000f90:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000f94:	0001883a 	nop
}
10000f98:	e6ffff04 	addi	sp,fp,-4
10000f9c:	dfc00217 	ldw	ra,8(sp)
10000fa0:	df000117 	ldw	fp,4(sp)
10000fa4:	dc000017 	ldw	r16,0(sp)
10000fa8:	dec00304 	addi	sp,sp,12
10000fac:	f800283a 	ret

10000fb0 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000fb0:	deffee04 	addi	sp,sp,-72
10000fb4:	dfc00d15 	stw	ra,52(sp)
10000fb8:	df000c15 	stw	fp,48(sp)
10000fbc:	dc800b15 	stw	r18,44(sp)
10000fc0:	dc400a15 	stw	r17,40(sp)
10000fc4:	dc000915 	stw	r16,36(sp)
10000fc8:	df000c04 	addi	fp,sp,48
10000fcc:	e1000215 	stw	r4,8(fp)
10000fd0:	e1400315 	stw	r5,12(fp)
10000fd4:	e1800415 	stw	r6,16(fp)
10000fd8:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned int tempDecimal;
	unsigned long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000fdc:	e0800617 	ldw	r2,24(fp)
10000fe0:	e0bff515 	stw	r2,-44(fp)

	if (packageType == 100)		// impossible number for now
10000fe4:	e0bff517 	ldw	r2,-44(fp)
10000fe8:	10801918 	cmpnei	r2,r2,100
10000fec:	1000261e 	bne	r2,zero,10001088 <messagePackager+0xd8>
	{
		// this means we are packaging our game package instead
		unsigned long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000ff0:	e0800217 	ldw	r2,8(fp)
10000ff4:	e0bff615 	stw	r2,-40(fp)
		tempTime = specifiedObject.yPosition;
10000ff8:	e0800317 	ldw	r2,12(fp)
10000ffc:	e0bff715 	stw	r2,-36(fp)
		tempStart = specifiedObject.objectType;
10001000:	e0800417 	ldw	r2,16(fp)
10001004:	e0bff815 	stw	r2,-32(fp)
		tempEnd = specifiedObject.objectState;
10001008:	e0800517 	ldw	r2,20(fp)
1000100c:	e0bff915 	stw	r2,-28(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10001010:	e13ff617 	ldw	r4,-40(fp)
10001014:	00011e00 	call	100011e0 <convertDecimalToBinary>
10001018:	e0bff615 	stw	r2,-40(fp)
		tempTime = convertDecimalToBinary(tempTime);
1000101c:	e13ff717 	ldw	r4,-36(fp)
10001020:	00011e00 	call	100011e0 <convertDecimalToBinary>
10001024:	e0bff715 	stw	r2,-36(fp)
		tempStart = convertDecimalToBinary(tempStart);
10001028:	e13ff817 	ldw	r4,-32(fp)
1000102c:	00011e00 	call	100011e0 <convertDecimalToBinary>
10001030:	e0bff815 	stw	r2,-32(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10001034:	e13ff917 	ldw	r4,-28(fp)
10001038:	00011e00 	call	100011e0 <convertDecimalToBinary>
1000103c:	e0bff915 	stw	r2,-28(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10001040:	e13ff717 	ldw	r4,-36(fp)
10001044:	01402674 	movhi	r5,153
10001048:	2965a004 	addi	r5,r5,-27008
1000104c:	00020b80 	call	100020b8 <__mulsi3>
10001050:	1025883a 	mov	r18,r2
10001054:	e13ff817 	ldw	r4,-32(fp)
10001058:	01441eb4 	movhi	r5,4218
1000105c:	29500004 	addi	r5,r5,16384
10001060:	00020b80 	call	100020b8 <__mulsi3>
10001064:	9087883a 	add	r3,r18,r2
10001068:	e0bff617 	ldw	r2,-40(fp)
1000106c:	18a5883a 	add	r18,r3,r2
10001070:	e13ff917 	ldw	r4,-28(fp)
10001074:	015762b4 	movhi	r5,23946
10001078:	00020b80 	call	100020b8 <__mulsi3>
1000107c:	9085883a 	add	r2,r18,r2
10001080:	e0bff415 	stw	r2,-48(fp)
10001084:	00001106 	br	100010cc <messagePackager+0x11c>
		unsigned long tempType, tempState;

		// grab our stuff from the struct
//		tempType = specifiedObject.objectType;
//		tempState = specifiedObject.objectState;
		tempType = 4;
10001088:	00800104 	movi	r2,4
1000108c:	e0bffa15 	stw	r2,-24(fp)
		tempState = 7;
10001090:	008001c4 	movi	r2,7
10001094:	e0bffb15 	stw	r2,-20(fp)

		// and convert stuff to binary!
		tempType = convertDecimalToBinary(tempType);
10001098:	e13ffa17 	ldw	r4,-24(fp)
1000109c:	00011e00 	call	100011e0 <convertDecimalToBinary>
100010a0:	e0bffa15 	stw	r2,-24(fp)
		tempState = convertDecimalToBinary(tempState);
100010a4:	e13ffb17 	ldw	r4,-20(fp)
100010a8:	00011e00 	call	100011e0 <convertDecimalToBinary>
100010ac:	e0bffb15 	stw	r2,-20(fp)
		printf("tempY: %llu   ", tempY);
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/
		// now we append everything together!
		tempBinary = tempState + tempType*1000;
100010b0:	e13ffa17 	ldw	r4,-24(fp)
100010b4:	0140fa04 	movi	r5,1000
100010b8:	00020b80 	call	100020b8 <__mulsi3>
100010bc:	1007883a 	mov	r3,r2
100010c0:	e0bffb17 	ldw	r2,-20(fp)
100010c4:	1885883a 	add	r2,r3,r2
100010c8:	e0bff415 	stw	r2,-48(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
100010cc:	e0bff417 	ldw	r2,-48(fp)
100010d0:	1021883a 	mov	r16,r2
100010d4:	0023883a 	mov	r17,zero
100010d8:	8009883a 	mov	r4,r16
100010dc:	880b883a 	mov	r5,r17
100010e0:	00012480 	call	10001248 <convertBinaryToDecimal>
100010e4:	e0bffc15 	stw	r2,-16(fp)

	// and return it!
	return tempDecimal;
100010e8:	e0bffc17 	ldw	r2,-16(fp)
}
100010ec:	e6fffd04 	addi	sp,fp,-12
100010f0:	dfc00417 	ldw	ra,16(sp)
100010f4:	df000317 	ldw	fp,12(sp)
100010f8:	dc800217 	ldw	r18,8(sp)
100010fc:	dc400117 	ldw	r17,4(sp)
10001100:	dc000017 	ldw	r16,0(sp)
10001104:	dec00904 	addi	sp,sp,36
10001108:	f800283a 	ret

1000110c <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
1000110c:	defff704 	addi	sp,sp,-36
10001110:	dfc00815 	stw	ra,32(sp)
10001114:	df000715 	stw	fp,28(sp)
10001118:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
1000111c:	00804404 	movi	r2,272
10001120:	10800003 	ldbu	r2,0(r2)
10001124:	10803fcc 	andi	r2,r2,255
10001128:	1080201c 	xori	r2,r2,128
1000112c:	10bfe004 	addi	r2,r2,-128
10001130:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001134:	e13ff917 	ldw	r4,-28(fp)
10001138:	00011e00 	call	100011e0 <convertDecimalToBinary>
1000113c:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001140:	e03ffa15 	stw	zero,-24(fp)
10001144:	00001406 	br	10001198 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001148:	e0bff917 	ldw	r2,-28(fp)
1000114c:	1009883a 	mov	r4,r2
10001150:	01400284 	movi	r5,10
10001154:	00020b00 	call	100020b0 <__umodsi3>
10001158:	1007883a 	mov	r3,r2
1000115c:	e0bffa17 	ldw	r2,-24(fp)
10001160:	1085883a 	add	r2,r2,r2
10001164:	1085883a 	add	r2,r2,r2
10001168:	e13ff904 	addi	r4,fp,-28
1000116c:	2085883a 	add	r2,r4,r2
10001170:	10800204 	addi	r2,r2,8
10001174:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001178:	e0bff917 	ldw	r2,-28(fp)
1000117c:	1009883a 	mov	r4,r2
10001180:	01400284 	movi	r5,10
10001184:	00020a80 	call	100020a8 <__udivsi3>
10001188:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
1000118c:	e0bffa17 	ldw	r2,-24(fp)
10001190:	10800044 	addi	r2,r2,1
10001194:	e0bffa15 	stw	r2,-24(fp)
10001198:	e0bffa17 	ldw	r2,-24(fp)
1000119c:	10800150 	cmplti	r2,r2,5
100011a0:	103fe91e 	bne	r2,zero,10001148 <__alt_data_end+0xf8001148>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
100011a4:	e0bffd17 	ldw	r2,-12(fp)
100011a8:	d0a6ad15 	stw	r2,-25932(gp)
	key2 = unpackaged[3];
100011ac:	e0bffe17 	ldw	r2,-8(fp)
100011b0:	d0a6af15 	stw	r2,-25924(gp)
	key3 = unpackaged[4];
100011b4:	e0bfff17 	ldw	r2,-4(fp)
100011b8:	d0a6ae15 	stw	r2,-25928(gp)
	cursorStreak = unpackaged[0];
100011bc:	e0bffb17 	ldw	r2,-20(fp)
100011c0:	d0a6ac15 	stw	r2,-25936(gp)
	cursorClicked = unpackaged[1];
100011c4:	e0bffc17 	ldw	r2,-16(fp)
100011c8:	d0a6ab15 	stw	r2,-25940(gp)
}
100011cc:	e037883a 	mov	sp,fp
100011d0:	dfc00117 	ldw	ra,4(sp)
100011d4:	df000017 	ldw	fp,0(sp)
100011d8:	dec00204 	addi	sp,sp,8
100011dc:	f800283a 	ret

100011e0 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
100011e0:	defffc04 	addi	sp,sp,-16
100011e4:	dfc00315 	stw	ra,12(sp)
100011e8:	df000215 	stw	fp,8(sp)
100011ec:	dc000115 	stw	r16,4(sp)
100011f0:	df000204 	addi	fp,sp,8
100011f4:	e13ffe15 	stw	r4,-8(fp)
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
    */

    if (n == 0)
100011f8:	e0bffe17 	ldw	r2,-8(fp)
100011fc:	1000021e 	bne	r2,zero,10001208 <convertDecimalToBinary+0x28>
    {
        return 0;
10001200:	0005883a 	mov	r2,zero
10001204:	00000a06 	br	10001230 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001208:	e0bffe17 	ldw	r2,-8(fp)
1000120c:	1400004c 	andi	r16,r2,1
10001210:	e0bffe17 	ldw	r2,-8(fp)
10001214:	1004d07a 	srli	r2,r2,1
10001218:	1009883a 	mov	r4,r2
1000121c:	00011e00 	call	100011e0 <convertDecimalToBinary>
10001220:	1009883a 	mov	r4,r2
10001224:	01400284 	movi	r5,10
10001228:	00020b80 	call	100020b8 <__mulsi3>
1000122c:	8085883a 	add	r2,r16,r2
    }
}
10001230:	e6ffff04 	addi	sp,fp,-4
10001234:	dfc00217 	ldw	ra,8(sp)
10001238:	df000117 	ldw	fp,4(sp)
1000123c:	dc000017 	ldw	r16,0(sp)
10001240:	dec00304 	addi	sp,sp,12
10001244:	f800283a 	ret

10001248 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001248:	defffa04 	addi	sp,sp,-24
1000124c:	dfc00515 	stw	ra,20(sp)
10001250:	df000415 	stw	fp,16(sp)
10001254:	df000404 	addi	fp,sp,16
10001258:	e13ffe15 	stw	r4,-8(fp)
1000125c:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001260:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001264:	e03ffd15 	stw	zero,-12(fp)
10001268:	00002706 	br	10001308 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
1000126c:	e0bffe17 	ldw	r2,-8(fp)
10001270:	e0ffff17 	ldw	r3,-4(fp)
10001274:	01c00284 	movi	r7,10
10001278:	0011883a 	mov	r8,zero
1000127c:	1009883a 	mov	r4,r2
10001280:	180b883a 	mov	r5,r3
10001284:	380d883a 	mov	r6,r7
10001288:	400f883a 	mov	r7,r8
1000128c:	00019700 	call	10001970 <__umoddi3>
10001290:	1009883a 	mov	r4,r2
10001294:	180b883a 	mov	r5,r3
10001298:	2005883a 	mov	r2,r4
1000129c:	2807883a 	mov	r3,r5
100012a0:	11000058 	cmpnei	r4,r2,1
100012a4:	2000081e 	bne	r4,zero,100012c8 <convertBinaryToDecimal+0x80>
100012a8:	1800071e 	bne	r3,zero,100012c8 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
100012ac:	00c00044 	movi	r3,1
100012b0:	e0bffd17 	ldw	r2,-12(fp)
100012b4:	1884983a 	sll	r2,r3,r2
100012b8:	1007883a 	mov	r3,r2
100012bc:	e0bffc17 	ldw	r2,-16(fp)
100012c0:	10c5883a 	add	r2,r2,r3
100012c4:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
100012c8:	e0bffe17 	ldw	r2,-8(fp)
100012cc:	e0ffff17 	ldw	r3,-4(fp)
100012d0:	01c00284 	movi	r7,10
100012d4:	0011883a 	mov	r8,zero
100012d8:	1009883a 	mov	r4,r2
100012dc:	180b883a 	mov	r5,r3
100012e0:	380d883a 	mov	r6,r7
100012e4:	400f883a 	mov	r7,r8
100012e8:	00013300 	call	10001330 <__udivdi3>
100012ec:	1009883a 	mov	r4,r2
100012f0:	180b883a 	mov	r5,r3
100012f4:	e13ffe15 	stw	r4,-8(fp)
100012f8:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
100012fc:	e0bffd17 	ldw	r2,-12(fp)
10001300:	10800044 	addi	r2,r2,1
10001304:	e0bffd15 	stw	r2,-12(fp)
10001308:	e0bffe17 	ldw	r2,-8(fp)
1000130c:	e0ffff17 	ldw	r3,-4(fp)
10001310:	10c4b03a 	or	r2,r2,r3
10001314:	103fd51e 	bne	r2,zero,1000126c <__alt_data_end+0xf800126c>
            decimal += (1 << i);

        n /= 10;
    }

    return decimal;
10001318:	e0bffc17 	ldw	r2,-16(fp)
}
1000131c:	e037883a 	mov	sp,fp
10001320:	dfc00117 	ldw	ra,4(sp)
10001324:	df000017 	ldw	fp,0(sp)
10001328:	dec00204 	addi	sp,sp,8
1000132c:	f800283a 	ret

10001330 <__udivdi3>:
10001330:	defff504 	addi	sp,sp,-44
10001334:	dcc00415 	stw	r19,16(sp)
10001338:	dc000115 	stw	r16,4(sp)
1000133c:	dfc00a15 	stw	ra,40(sp)
10001340:	df000915 	stw	fp,36(sp)
10001344:	ddc00815 	stw	r23,32(sp)
10001348:	dd800715 	stw	r22,28(sp)
1000134c:	dd400615 	stw	r21,24(sp)
10001350:	dd000515 	stw	r20,20(sp)
10001354:	dc800315 	stw	r18,12(sp)
10001358:	dc400215 	stw	r17,8(sp)
1000135c:	2027883a 	mov	r19,r4
10001360:	2821883a 	mov	r16,r5
10001364:	3800471e 	bne	r7,zero,10001484 <__udivdi3+0x154>
10001368:	3025883a 	mov	r18,r6
1000136c:	2023883a 	mov	r17,r4
10001370:	2980592e 	bgeu	r5,r6,100014d8 <__udivdi3+0x1a8>
10001374:	00bfffd4 	movui	r2,65535
10001378:	2829883a 	mov	r20,r5
1000137c:	1180b236 	bltu	r2,r6,10001648 <__udivdi3+0x318>
10001380:	00803fc4 	movi	r2,255
10001384:	1181622e 	bgeu	r2,r6,10001910 <__udivdi3+0x5e0>
10001388:	00800204 	movi	r2,8
1000138c:	1007883a 	mov	r3,r2
10001390:	3084d83a 	srl	r2,r6,r2
10001394:	01040074 	movhi	r4,4097
10001398:	21220404 	addi	r4,r4,-30704
1000139c:	2085883a 	add	r2,r4,r2
100013a0:	11000003 	ldbu	r4,0(r2)
100013a4:	20c9883a 	add	r4,r4,r3
100013a8:	00c00804 	movi	r3,32
100013ac:	1907c83a 	sub	r3,r3,r4
100013b0:	18000526 	beq	r3,zero,100013c8 <__udivdi3+0x98>
100013b4:	80e0983a 	sll	r16,r16,r3
100013b8:	9908d83a 	srl	r4,r19,r4
100013bc:	30e4983a 	sll	r18,r6,r3
100013c0:	98e2983a 	sll	r17,r19,r3
100013c4:	8128b03a 	or	r20,r16,r4
100013c8:	902ad43a 	srli	r21,r18,16
100013cc:	a009883a 	mov	r4,r20
100013d0:	95bfffcc 	andi	r22,r18,65535
100013d4:	a80b883a 	mov	r5,r21
100013d8:	00020b00 	call	100020b0 <__umodsi3>
100013dc:	a009883a 	mov	r4,r20
100013e0:	a80b883a 	mov	r5,r21
100013e4:	102f883a 	mov	r23,r2
100013e8:	00020a80 	call	100020a8 <__udivsi3>
100013ec:	1009883a 	mov	r4,r2
100013f0:	b00b883a 	mov	r5,r22
100013f4:	1021883a 	mov	r16,r2
100013f8:	00020b80 	call	100020b8 <__mulsi3>
100013fc:	b82e943a 	slli	r23,r23,16
10001400:	8808d43a 	srli	r4,r17,16
10001404:	b906b03a 	or	r3,r23,r4
10001408:	1880052e 	bgeu	r3,r2,10001420 <__udivdi3+0xf0>
1000140c:	1c87883a 	add	r3,r3,r18
10001410:	813fffc4 	addi	r4,r16,-1
10001414:	1c800136 	bltu	r3,r18,1000141c <__udivdi3+0xec>
10001418:	18815236 	bltu	r3,r2,10001964 <__udivdi3+0x634>
1000141c:	2021883a 	mov	r16,r4
10001420:	18a7c83a 	sub	r19,r3,r2
10001424:	9809883a 	mov	r4,r19
10001428:	a80b883a 	mov	r5,r21
1000142c:	00020b00 	call	100020b0 <__umodsi3>
10001430:	1029883a 	mov	r20,r2
10001434:	9809883a 	mov	r4,r19
10001438:	a80b883a 	mov	r5,r21
1000143c:	a028943a 	slli	r20,r20,16
10001440:	00020a80 	call	100020a8 <__udivsi3>
10001444:	1009883a 	mov	r4,r2
10001448:	b00b883a 	mov	r5,r22
1000144c:	8c7fffcc 	andi	r17,r17,65535
10001450:	1027883a 	mov	r19,r2
10001454:	a462b03a 	or	r17,r20,r17
10001458:	00020b80 	call	100020b8 <__mulsi3>
1000145c:	8880052e 	bgeu	r17,r2,10001474 <__udivdi3+0x144>
10001460:	8ca3883a 	add	r17,r17,r18
10001464:	98ffffc4 	addi	r3,r19,-1
10001468:	8c811036 	bltu	r17,r18,100018ac <__udivdi3+0x57c>
1000146c:	88810f2e 	bgeu	r17,r2,100018ac <__udivdi3+0x57c>
10001470:	9cffff84 	addi	r19,r19,-2
10001474:	8020943a 	slli	r16,r16,16
10001478:	0007883a 	mov	r3,zero
1000147c:	9c04b03a 	or	r2,r19,r16
10001480:	00006006 	br	10001604 <__udivdi3+0x2d4>
10001484:	29c05d36 	bltu	r5,r7,100015fc <__udivdi3+0x2cc>
10001488:	00bfffd4 	movui	r2,65535
1000148c:	11c0692e 	bgeu	r2,r7,10001634 <__udivdi3+0x304>
10001490:	00804034 	movhi	r2,256
10001494:	10bfffc4 	addi	r2,r2,-1
10001498:	11c10e2e 	bgeu	r2,r7,100018d4 <__udivdi3+0x5a4>
1000149c:	01400604 	movi	r5,24
100014a0:	2811883a 	mov	r8,r5
100014a4:	394ad83a 	srl	r5,r7,r5
100014a8:	00840074 	movhi	r2,4097
100014ac:	10a20404 	addi	r2,r2,-30704
100014b0:	114b883a 	add	r5,r2,r5
100014b4:	29400003 	ldbu	r5,0(r5)
100014b8:	00c00804 	movi	r3,32
100014bc:	2a0b883a 	add	r5,r5,r8
100014c0:	196fc83a 	sub	r23,r3,r5
100014c4:	b8006b1e 	bne	r23,zero,10001674 <__udivdi3+0x344>
100014c8:	3c011436 	bltu	r7,r16,1000191c <__udivdi3+0x5ec>
100014cc:	9985403a 	cmpgeu	r2,r19,r6
100014d0:	0007883a 	mov	r3,zero
100014d4:	00004b06 	br	10001604 <__udivdi3+0x2d4>
100014d8:	3000041e 	bne	r6,zero,100014ec <__udivdi3+0x1bc>
100014dc:	01000044 	movi	r4,1
100014e0:	000b883a 	mov	r5,zero
100014e4:	00020a80 	call	100020a8 <__udivsi3>
100014e8:	1025883a 	mov	r18,r2
100014ec:	00bfffd4 	movui	r2,65535
100014f0:	14805b2e 	bgeu	r2,r18,10001660 <__udivdi3+0x330>
100014f4:	00804034 	movhi	r2,256
100014f8:	10bfffc4 	addi	r2,r2,-1
100014fc:	1480fe2e 	bgeu	r2,r18,100018f8 <__udivdi3+0x5c8>
10001500:	00800604 	movi	r2,24
10001504:	1007883a 	mov	r3,r2
10001508:	9084d83a 	srl	r2,r18,r2
1000150c:	01040074 	movhi	r4,4097
10001510:	21220404 	addi	r4,r4,-30704
10001514:	2085883a 	add	r2,r4,r2
10001518:	11800003 	ldbu	r6,0(r2)
1000151c:	01c00804 	movi	r7,32
10001520:	30c7883a 	add	r3,r6,r3
10001524:	38cfc83a 	sub	r7,r7,r3
10001528:	3800a71e 	bne	r7,zero,100017c8 <__udivdi3+0x498>
1000152c:	9028d43a 	srli	r20,r18,16
10001530:	84a1c83a 	sub	r16,r16,r18
10001534:	957fffcc 	andi	r21,r18,65535
10001538:	00c00044 	movi	r3,1
1000153c:	8009883a 	mov	r4,r16
10001540:	a00b883a 	mov	r5,r20
10001544:	d8c00015 	stw	r3,0(sp)
10001548:	00020b00 	call	100020b0 <__umodsi3>
1000154c:	8009883a 	mov	r4,r16
10001550:	a00b883a 	mov	r5,r20
10001554:	102d883a 	mov	r22,r2
10001558:	00020a80 	call	100020a8 <__udivsi3>
1000155c:	1009883a 	mov	r4,r2
10001560:	a80b883a 	mov	r5,r21
10001564:	1021883a 	mov	r16,r2
10001568:	00020b80 	call	100020b8 <__mulsi3>
1000156c:	b02c943a 	slli	r22,r22,16
10001570:	880ed43a 	srli	r7,r17,16
10001574:	d8c00017 	ldw	r3,0(sp)
10001578:	b1ccb03a 	or	r6,r22,r7
1000157c:	3080052e 	bgeu	r6,r2,10001594 <__udivdi3+0x264>
10001580:	348d883a 	add	r6,r6,r18
10001584:	813fffc4 	addi	r4,r16,-1
10001588:	34800136 	bltu	r6,r18,10001590 <__udivdi3+0x260>
1000158c:	3080f236 	bltu	r6,r2,10001958 <__udivdi3+0x628>
10001590:	2021883a 	mov	r16,r4
10001594:	30a7c83a 	sub	r19,r6,r2
10001598:	9809883a 	mov	r4,r19
1000159c:	a00b883a 	mov	r5,r20
100015a0:	d8c00015 	stw	r3,0(sp)
100015a4:	00020b00 	call	100020b0 <__umodsi3>
100015a8:	102d883a 	mov	r22,r2
100015ac:	9809883a 	mov	r4,r19
100015b0:	a00b883a 	mov	r5,r20
100015b4:	b02c943a 	slli	r22,r22,16
100015b8:	00020a80 	call	100020a8 <__udivsi3>
100015bc:	1009883a 	mov	r4,r2
100015c0:	a80b883a 	mov	r5,r21
100015c4:	8c7fffcc 	andi	r17,r17,65535
100015c8:	1027883a 	mov	r19,r2
100015cc:	b462b03a 	or	r17,r22,r17
100015d0:	00020b80 	call	100020b8 <__mulsi3>
100015d4:	d8c00017 	ldw	r3,0(sp)
100015d8:	8880052e 	bgeu	r17,r2,100015f0 <__udivdi3+0x2c0>
100015dc:	8ca3883a 	add	r17,r17,r18
100015e0:	993fffc4 	addi	r4,r19,-1
100015e4:	8c80af36 	bltu	r17,r18,100018a4 <__udivdi3+0x574>
100015e8:	8880ae2e 	bgeu	r17,r2,100018a4 <__udivdi3+0x574>
100015ec:	9cffff84 	addi	r19,r19,-2
100015f0:	8020943a 	slli	r16,r16,16
100015f4:	9c04b03a 	or	r2,r19,r16
100015f8:	00000206 	br	10001604 <__udivdi3+0x2d4>
100015fc:	0007883a 	mov	r3,zero
10001600:	0005883a 	mov	r2,zero
10001604:	dfc00a17 	ldw	ra,40(sp)
10001608:	df000917 	ldw	fp,36(sp)
1000160c:	ddc00817 	ldw	r23,32(sp)
10001610:	dd800717 	ldw	r22,28(sp)
10001614:	dd400617 	ldw	r21,24(sp)
10001618:	dd000517 	ldw	r20,20(sp)
1000161c:	dcc00417 	ldw	r19,16(sp)
10001620:	dc800317 	ldw	r18,12(sp)
10001624:	dc400217 	ldw	r17,8(sp)
10001628:	dc000117 	ldw	r16,4(sp)
1000162c:	dec00b04 	addi	sp,sp,44
10001630:	f800283a 	ret
10001634:	00803fc4 	movi	r2,255
10001638:	11c0a92e 	bgeu	r2,r7,100018e0 <__udivdi3+0x5b0>
1000163c:	01400204 	movi	r5,8
10001640:	2811883a 	mov	r8,r5
10001644:	003f9706 	br	100014a4 <__alt_data_end+0xf80014a4>
10001648:	00804034 	movhi	r2,256
1000164c:	10bfffc4 	addi	r2,r2,-1
10001650:	1180a62e 	bgeu	r2,r6,100018ec <__udivdi3+0x5bc>
10001654:	00800604 	movi	r2,24
10001658:	1007883a 	mov	r3,r2
1000165c:	003f4c06 	br	10001390 <__alt_data_end+0xf8001390>
10001660:	00803fc4 	movi	r2,255
10001664:	1480a72e 	bgeu	r2,r18,10001904 <__udivdi3+0x5d4>
10001668:	00800204 	movi	r2,8
1000166c:	1007883a 	mov	r3,r2
10001670:	003fa506 	br	10001508 <__alt_data_end+0xf8001508>
10001674:	3178d83a 	srl	fp,r6,r5
10001678:	3dce983a 	sll	r7,r7,r23
1000167c:	8168d83a 	srl	r20,r16,r5
10001680:	9950d83a 	srl	r8,r19,r5
10001684:	3f38b03a 	or	fp,r7,fp
10001688:	e024d43a 	srli	r18,fp,16
1000168c:	85e0983a 	sll	r16,r16,r23
10001690:	a009883a 	mov	r4,r20
10001694:	900b883a 	mov	r5,r18
10001698:	8220b03a 	or	r16,r16,r8
1000169c:	35ea983a 	sll	r21,r6,r23
100016a0:	00020b00 	call	100020b0 <__umodsi3>
100016a4:	a009883a 	mov	r4,r20
100016a8:	900b883a 	mov	r5,r18
100016ac:	1023883a 	mov	r17,r2
100016b0:	e5bfffcc 	andi	r22,fp,65535
100016b4:	00020a80 	call	100020a8 <__udivsi3>
100016b8:	1009883a 	mov	r4,r2
100016bc:	b00b883a 	mov	r5,r22
100016c0:	1029883a 	mov	r20,r2
100016c4:	00020b80 	call	100020b8 <__mulsi3>
100016c8:	8806943a 	slli	r3,r17,16
100016cc:	8014d43a 	srli	r10,r16,16
100016d0:	1a92b03a 	or	r9,r3,r10
100016d4:	4880042e 	bgeu	r9,r2,100016e8 <__udivdi3+0x3b8>
100016d8:	4f13883a 	add	r9,r9,fp
100016dc:	a0ffffc4 	addi	r3,r20,-1
100016e0:	4f00952e 	bgeu	r9,fp,10001938 <__udivdi3+0x608>
100016e4:	1829883a 	mov	r20,r3
100016e8:	48a3c83a 	sub	r17,r9,r2
100016ec:	8809883a 	mov	r4,r17
100016f0:	900b883a 	mov	r5,r18
100016f4:	00020b00 	call	100020b0 <__umodsi3>
100016f8:	8809883a 	mov	r4,r17
100016fc:	900b883a 	mov	r5,r18
10001700:	d8800015 	stw	r2,0(sp)
10001704:	00020a80 	call	100020a8 <__udivsi3>
10001708:	1009883a 	mov	r4,r2
1000170c:	b00b883a 	mov	r5,r22
10001710:	1023883a 	mov	r17,r2
10001714:	00020b80 	call	100020b8 <__mulsi3>
10001718:	d8c00017 	ldw	r3,0(sp)
1000171c:	823fffcc 	andi	r8,r16,65535
10001720:	1806943a 	slli	r3,r3,16
10001724:	1a20b03a 	or	r16,r3,r8
10001728:	8080042e 	bgeu	r16,r2,1000173c <__udivdi3+0x40c>
1000172c:	8721883a 	add	r16,r16,fp
10001730:	88ffffc4 	addi	r3,r17,-1
10001734:	87007c2e 	bgeu	r16,fp,10001928 <__udivdi3+0x5f8>
10001738:	1823883a 	mov	r17,r3
1000173c:	a028943a 	slli	r20,r20,16
10001740:	acbfffcc 	andi	r18,r21,65535
10001744:	900b883a 	mov	r5,r18
10001748:	8d28b03a 	or	r20,r17,r20
1000174c:	a022d43a 	srli	r17,r20,16
10001750:	a5bfffcc 	andi	r22,r20,65535
10001754:	b009883a 	mov	r4,r22
10001758:	a82ad43a 	srli	r21,r21,16
1000175c:	80a1c83a 	sub	r16,r16,r2
10001760:	00020b80 	call	100020b8 <__mulsi3>
10001764:	8809883a 	mov	r4,r17
10001768:	900b883a 	mov	r5,r18
1000176c:	1039883a 	mov	fp,r2
10001770:	00020b80 	call	100020b8 <__mulsi3>
10001774:	8809883a 	mov	r4,r17
10001778:	a80b883a 	mov	r5,r21
1000177c:	1025883a 	mov	r18,r2
10001780:	00020b80 	call	100020b8 <__mulsi3>
10001784:	b009883a 	mov	r4,r22
10001788:	a80b883a 	mov	r5,r21
1000178c:	1023883a 	mov	r17,r2
10001790:	00020b80 	call	100020b8 <__mulsi3>
10001794:	e006d43a 	srli	r3,fp,16
10001798:	9085883a 	add	r2,r18,r2
1000179c:	10c7883a 	add	r3,r2,r3
100017a0:	1c80022e 	bgeu	r3,r18,100017ac <__udivdi3+0x47c>
100017a4:	00800074 	movhi	r2,1
100017a8:	88a3883a 	add	r17,r17,r2
100017ac:	1808d43a 	srli	r4,r3,16
100017b0:	8909883a 	add	r4,r17,r4
100017b4:	81004436 	bltu	r16,r4,100018c8 <__udivdi3+0x598>
100017b8:	81003e26 	beq	r16,r4,100018b4 <__udivdi3+0x584>
100017bc:	a005883a 	mov	r2,r20
100017c0:	0007883a 	mov	r3,zero
100017c4:	003f8f06 	br	10001604 <__alt_data_end+0xf8001604>
100017c8:	91e4983a 	sll	r18,r18,r7
100017cc:	80eed83a 	srl	r23,r16,r3
100017d0:	81cc983a 	sll	r6,r16,r7
100017d4:	9028d43a 	srli	r20,r18,16
100017d8:	98c6d83a 	srl	r3,r19,r3
100017dc:	b809883a 	mov	r4,r23
100017e0:	a00b883a 	mov	r5,r20
100017e4:	30ecb03a 	or	r22,r6,r3
100017e8:	99e2983a 	sll	r17,r19,r7
100017ec:	00020b00 	call	100020b0 <__umodsi3>
100017f0:	b809883a 	mov	r4,r23
100017f4:	a00b883a 	mov	r5,r20
100017f8:	1021883a 	mov	r16,r2
100017fc:	957fffcc 	andi	r21,r18,65535
10001800:	00020a80 	call	100020a8 <__udivsi3>
10001804:	a80b883a 	mov	r5,r21
10001808:	1009883a 	mov	r4,r2
1000180c:	102f883a 	mov	r23,r2
10001810:	00020b80 	call	100020b8 <__mulsi3>
10001814:	8020943a 	slli	r16,r16,16
10001818:	b00ad43a 	srli	r5,r22,16
1000181c:	814cb03a 	or	r6,r16,r5
10001820:	3080062e 	bgeu	r6,r2,1000183c <__udivdi3+0x50c>
10001824:	348d883a 	add	r6,r6,r18
10001828:	b8ffffc4 	addi	r3,r23,-1
1000182c:	34804836 	bltu	r6,r18,10001950 <__udivdi3+0x620>
10001830:	3080472e 	bgeu	r6,r2,10001950 <__udivdi3+0x620>
10001834:	bdffff84 	addi	r23,r23,-2
10001838:	348d883a 	add	r6,r6,r18
1000183c:	30a7c83a 	sub	r19,r6,r2
10001840:	9809883a 	mov	r4,r19
10001844:	a00b883a 	mov	r5,r20
10001848:	00020b00 	call	100020b0 <__umodsi3>
1000184c:	9809883a 	mov	r4,r19
10001850:	a00b883a 	mov	r5,r20
10001854:	1039883a 	mov	fp,r2
10001858:	00020a80 	call	100020a8 <__udivsi3>
1000185c:	1009883a 	mov	r4,r2
10001860:	a80b883a 	mov	r5,r21
10001864:	e038943a 	slli	fp,fp,16
10001868:	1027883a 	mov	r19,r2
1000186c:	00020b80 	call	100020b8 <__mulsi3>
10001870:	b1bfffcc 	andi	r6,r22,65535
10001874:	e18cb03a 	or	r6,fp,r6
10001878:	3080062e 	bgeu	r6,r2,10001894 <__udivdi3+0x564>
1000187c:	348d883a 	add	r6,r6,r18
10001880:	98ffffc4 	addi	r3,r19,-1
10001884:	34803036 	bltu	r6,r18,10001948 <__udivdi3+0x618>
10001888:	30802f2e 	bgeu	r6,r2,10001948 <__udivdi3+0x618>
1000188c:	9cffff84 	addi	r19,r19,-2
10001890:	348d883a 	add	r6,r6,r18
10001894:	b82e943a 	slli	r23,r23,16
10001898:	30a1c83a 	sub	r16,r6,r2
1000189c:	9dc6b03a 	or	r3,r19,r23
100018a0:	003f2606 	br	1000153c <__alt_data_end+0xf800153c>
100018a4:	2027883a 	mov	r19,r4
100018a8:	003f5106 	br	100015f0 <__alt_data_end+0xf80015f0>
100018ac:	1827883a 	mov	r19,r3
100018b0:	003ef006 	br	10001474 <__alt_data_end+0xf8001474>
100018b4:	1808943a 	slli	r4,r3,16
100018b8:	9dc6983a 	sll	r3,r19,r23
100018bc:	e73fffcc 	andi	fp,fp,65535
100018c0:	2709883a 	add	r4,r4,fp
100018c4:	193fbd2e 	bgeu	r3,r4,100017bc <__alt_data_end+0xf80017bc>
100018c8:	a0bfffc4 	addi	r2,r20,-1
100018cc:	0007883a 	mov	r3,zero
100018d0:	003f4c06 	br	10001604 <__alt_data_end+0xf8001604>
100018d4:	01400404 	movi	r5,16
100018d8:	2811883a 	mov	r8,r5
100018dc:	003ef106 	br	100014a4 <__alt_data_end+0xf80014a4>
100018e0:	000b883a 	mov	r5,zero
100018e4:	0011883a 	mov	r8,zero
100018e8:	003eee06 	br	100014a4 <__alt_data_end+0xf80014a4>
100018ec:	00800404 	movi	r2,16
100018f0:	1007883a 	mov	r3,r2
100018f4:	003ea606 	br	10001390 <__alt_data_end+0xf8001390>
100018f8:	00800404 	movi	r2,16
100018fc:	1007883a 	mov	r3,r2
10001900:	003f0106 	br	10001508 <__alt_data_end+0xf8001508>
10001904:	0005883a 	mov	r2,zero
10001908:	0007883a 	mov	r3,zero
1000190c:	003efe06 	br	10001508 <__alt_data_end+0xf8001508>
10001910:	0005883a 	mov	r2,zero
10001914:	0007883a 	mov	r3,zero
10001918:	003e9d06 	br	10001390 <__alt_data_end+0xf8001390>
1000191c:	0007883a 	mov	r3,zero
10001920:	00800044 	movi	r2,1
10001924:	003f3706 	br	10001604 <__alt_data_end+0xf8001604>
10001928:	80bf832e 	bgeu	r16,r2,10001738 <__alt_data_end+0xf8001738>
1000192c:	8c7fff84 	addi	r17,r17,-2
10001930:	8721883a 	add	r16,r16,fp
10001934:	003f8106 	br	1000173c <__alt_data_end+0xf800173c>
10001938:	48bf6a2e 	bgeu	r9,r2,100016e4 <__alt_data_end+0xf80016e4>
1000193c:	a53fff84 	addi	r20,r20,-2
10001940:	4f13883a 	add	r9,r9,fp
10001944:	003f6806 	br	100016e8 <__alt_data_end+0xf80016e8>
10001948:	1827883a 	mov	r19,r3
1000194c:	003fd106 	br	10001894 <__alt_data_end+0xf8001894>
10001950:	182f883a 	mov	r23,r3
10001954:	003fb906 	br	1000183c <__alt_data_end+0xf800183c>
10001958:	843fff84 	addi	r16,r16,-2
1000195c:	348d883a 	add	r6,r6,r18
10001960:	003f0c06 	br	10001594 <__alt_data_end+0xf8001594>
10001964:	843fff84 	addi	r16,r16,-2
10001968:	1c87883a 	add	r3,r3,r18
1000196c:	003eac06 	br	10001420 <__alt_data_end+0xf8001420>

10001970 <__umoddi3>:
10001970:	defff404 	addi	sp,sp,-48
10001974:	dd800815 	stw	r22,32(sp)
10001978:	dc400315 	stw	r17,12(sp)
1000197c:	dc000215 	stw	r16,8(sp)
10001980:	dfc00b15 	stw	ra,44(sp)
10001984:	df000a15 	stw	fp,40(sp)
10001988:	ddc00915 	stw	r23,36(sp)
1000198c:	dd400715 	stw	r21,28(sp)
10001990:	dd000615 	stw	r20,24(sp)
10001994:	dcc00515 	stw	r19,20(sp)
10001998:	dc800415 	stw	r18,16(sp)
1000199c:	2021883a 	mov	r16,r4
100019a0:	2823883a 	mov	r17,r5
100019a4:	282d883a 	mov	r22,r5
100019a8:	38003c1e 	bne	r7,zero,10001a9c <__umoddi3+0x12c>
100019ac:	3027883a 	mov	r19,r6
100019b0:	2029883a 	mov	r20,r4
100019b4:	2980522e 	bgeu	r5,r6,10001b00 <__umoddi3+0x190>
100019b8:	00bfffd4 	movui	r2,65535
100019bc:	1180a436 	bltu	r2,r6,10001c50 <__umoddi3+0x2e0>
100019c0:	00803fc4 	movi	r2,255
100019c4:	11815e2e 	bgeu	r2,r6,10001f40 <__umoddi3+0x5d0>
100019c8:	01400204 	movi	r5,8
100019cc:	2805883a 	mov	r2,r5
100019d0:	314ad83a 	srl	r5,r6,r5
100019d4:	00c40074 	movhi	r3,4097
100019d8:	18e20404 	addi	r3,r3,-30704
100019dc:	194b883a 	add	r5,r3,r5
100019e0:	29000003 	ldbu	r4,0(r5)
100019e4:	2089883a 	add	r4,r4,r2
100019e8:	00800804 	movi	r2,32
100019ec:	1105c83a 	sub	r2,r2,r4
100019f0:	10010c26 	beq	r2,zero,10001e24 <__umoddi3+0x4b4>
100019f4:	88a2983a 	sll	r17,r17,r2
100019f8:	8108d83a 	srl	r4,r16,r4
100019fc:	30a6983a 	sll	r19,r6,r2
10001a00:	80a8983a 	sll	r20,r16,r2
10001a04:	1025883a 	mov	r18,r2
10001a08:	892cb03a 	or	r22,r17,r4
10001a0c:	9822d43a 	srli	r17,r19,16
10001a10:	b009883a 	mov	r4,r22
10001a14:	9d7fffcc 	andi	r21,r19,65535
10001a18:	880b883a 	mov	r5,r17
10001a1c:	00020b00 	call	100020b0 <__umodsi3>
10001a20:	b009883a 	mov	r4,r22
10001a24:	880b883a 	mov	r5,r17
10001a28:	102f883a 	mov	r23,r2
10001a2c:	00020a80 	call	100020a8 <__udivsi3>
10001a30:	1009883a 	mov	r4,r2
10001a34:	a80b883a 	mov	r5,r21
10001a38:	00020b80 	call	100020b8 <__mulsi3>
10001a3c:	b82e943a 	slli	r23,r23,16
10001a40:	a008d43a 	srli	r4,r20,16
10001a44:	b906b03a 	or	r3,r23,r4
10001a48:	1880042e 	bgeu	r3,r2,10001a5c <__umoddi3+0xec>
10001a4c:	1cc7883a 	add	r3,r3,r19
10001a50:	1cc00236 	bltu	r3,r19,10001a5c <__umoddi3+0xec>
10001a54:	1880012e 	bgeu	r3,r2,10001a5c <__umoddi3+0xec>
10001a58:	1cc7883a 	add	r3,r3,r19
10001a5c:	18a1c83a 	sub	r16,r3,r2
10001a60:	8009883a 	mov	r4,r16
10001a64:	880b883a 	mov	r5,r17
10001a68:	00020b00 	call	100020b0 <__umodsi3>
10001a6c:	8009883a 	mov	r4,r16
10001a70:	880b883a 	mov	r5,r17
10001a74:	102d883a 	mov	r22,r2
10001a78:	00020a80 	call	100020a8 <__udivsi3>
10001a7c:	1009883a 	mov	r4,r2
10001a80:	a80b883a 	mov	r5,r21
10001a84:	b02c943a 	slli	r22,r22,16
10001a88:	00020b80 	call	100020b8 <__mulsi3>
10001a8c:	a13fffcc 	andi	r4,r20,65535
10001a90:	b106b03a 	or	r3,r22,r4
10001a94:	1880572e 	bgeu	r3,r2,10001bf4 <__umoddi3+0x284>
10001a98:	00005206 	br	10001be4 <__umoddi3+0x274>
10001a9c:	29c05936 	bltu	r5,r7,10001c04 <__umoddi3+0x294>
10001aa0:	00bfffd4 	movui	r2,65535
10001aa4:	11c0652e 	bgeu	r2,r7,10001c3c <__umoddi3+0x2cc>
10001aa8:	00804034 	movhi	r2,256
10001aac:	10bfffc4 	addi	r2,r2,-1
10001ab0:	11c1172e 	bgeu	r2,r7,10001f10 <__umoddi3+0x5a0>
10001ab4:	01400604 	movi	r5,24
10001ab8:	282b883a 	mov	r21,r5
10001abc:	394ad83a 	srl	r5,r7,r5
10001ac0:	00c40074 	movhi	r3,4097
10001ac4:	18e20404 	addi	r3,r3,-30704
10001ac8:	194b883a 	add	r5,r3,r5
10001acc:	28800003 	ldbu	r2,0(r5)
10001ad0:	00c00804 	movi	r3,32
10001ad4:	156b883a 	add	r21,r2,r21
10001ad8:	1d69c83a 	sub	r20,r3,r21
10001adc:	a000671e 	bne	r20,zero,10001c7c <__umoddi3+0x30c>
10001ae0:	3c400136 	bltu	r7,r17,10001ae8 <__umoddi3+0x178>
10001ae4:	81812336 	bltu	r16,r6,10001f74 <__umoddi3+0x604>
10001ae8:	8185c83a 	sub	r2,r16,r6
10001aec:	89e3c83a 	sub	r17,r17,r7
10001af0:	8087803a 	cmpltu	r3,r16,r2
10001af4:	88edc83a 	sub	r22,r17,r3
10001af8:	b007883a 	mov	r3,r22
10001afc:	00004306 	br	10001c0c <__umoddi3+0x29c>
10001b00:	3000041e 	bne	r6,zero,10001b14 <__umoddi3+0x1a4>
10001b04:	01000044 	movi	r4,1
10001b08:	000b883a 	mov	r5,zero
10001b0c:	00020a80 	call	100020a8 <__udivsi3>
10001b10:	1027883a 	mov	r19,r2
10001b14:	00bfffd4 	movui	r2,65535
10001b18:	14c0532e 	bgeu	r2,r19,10001c68 <__umoddi3+0x2f8>
10001b1c:	00804034 	movhi	r2,256
10001b20:	10bfffc4 	addi	r2,r2,-1
10001b24:	14c1032e 	bgeu	r2,r19,10001f34 <__umoddi3+0x5c4>
10001b28:	00800604 	movi	r2,24
10001b2c:	1007883a 	mov	r3,r2
10001b30:	9884d83a 	srl	r2,r19,r2
10001b34:	01040074 	movhi	r4,4097
10001b38:	21220404 	addi	r4,r4,-30704
10001b3c:	2085883a 	add	r2,r4,r2
10001b40:	11000003 	ldbu	r4,0(r2)
10001b44:	00800804 	movi	r2,32
10001b48:	20c7883a 	add	r3,r4,r3
10001b4c:	10c5c83a 	sub	r2,r2,r3
10001b50:	1000b61e 	bne	r2,zero,10001e2c <__umoddi3+0x4bc>
10001b54:	982ad43a 	srli	r21,r19,16
10001b58:	8ce3c83a 	sub	r17,r17,r19
10001b5c:	9dbfffcc 	andi	r22,r19,65535
10001b60:	0025883a 	mov	r18,zero
10001b64:	8809883a 	mov	r4,r17
10001b68:	a80b883a 	mov	r5,r21
10001b6c:	00020b00 	call	100020b0 <__umodsi3>
10001b70:	8809883a 	mov	r4,r17
10001b74:	a80b883a 	mov	r5,r21
10001b78:	102f883a 	mov	r23,r2
10001b7c:	00020a80 	call	100020a8 <__udivsi3>
10001b80:	1009883a 	mov	r4,r2
10001b84:	b00b883a 	mov	r5,r22
10001b88:	00020b80 	call	100020b8 <__mulsi3>
10001b8c:	b82e943a 	slli	r23,r23,16
10001b90:	a008d43a 	srli	r4,r20,16
10001b94:	b906b03a 	or	r3,r23,r4
10001b98:	1880032e 	bgeu	r3,r2,10001ba8 <__umoddi3+0x238>
10001b9c:	1cc7883a 	add	r3,r3,r19
10001ba0:	1cc00136 	bltu	r3,r19,10001ba8 <__umoddi3+0x238>
10001ba4:	1880f136 	bltu	r3,r2,10001f6c <__umoddi3+0x5fc>
10001ba8:	18a1c83a 	sub	r16,r3,r2
10001bac:	8009883a 	mov	r4,r16
10001bb0:	a80b883a 	mov	r5,r21
10001bb4:	00020b00 	call	100020b0 <__umodsi3>
10001bb8:	8009883a 	mov	r4,r16
10001bbc:	a80b883a 	mov	r5,r21
10001bc0:	1023883a 	mov	r17,r2
10001bc4:	00020a80 	call	100020a8 <__udivsi3>
10001bc8:	1009883a 	mov	r4,r2
10001bcc:	b00b883a 	mov	r5,r22
10001bd0:	8822943a 	slli	r17,r17,16
10001bd4:	00020b80 	call	100020b8 <__mulsi3>
10001bd8:	a13fffcc 	andi	r4,r20,65535
10001bdc:	8906b03a 	or	r3,r17,r4
10001be0:	1880042e 	bgeu	r3,r2,10001bf4 <__umoddi3+0x284>
10001be4:	1cc7883a 	add	r3,r3,r19
10001be8:	1cc00236 	bltu	r3,r19,10001bf4 <__umoddi3+0x284>
10001bec:	1880012e 	bgeu	r3,r2,10001bf4 <__umoddi3+0x284>
10001bf0:	1cc7883a 	add	r3,r3,r19
10001bf4:	1887c83a 	sub	r3,r3,r2
10001bf8:	1c84d83a 	srl	r2,r3,r18
10001bfc:	0007883a 	mov	r3,zero
10001c00:	00000206 	br	10001c0c <__umoddi3+0x29c>
10001c04:	2005883a 	mov	r2,r4
10001c08:	2807883a 	mov	r3,r5
10001c0c:	dfc00b17 	ldw	ra,44(sp)
10001c10:	df000a17 	ldw	fp,40(sp)
10001c14:	ddc00917 	ldw	r23,36(sp)
10001c18:	dd800817 	ldw	r22,32(sp)
10001c1c:	dd400717 	ldw	r21,28(sp)
10001c20:	dd000617 	ldw	r20,24(sp)
10001c24:	dcc00517 	ldw	r19,20(sp)
10001c28:	dc800417 	ldw	r18,16(sp)
10001c2c:	dc400317 	ldw	r17,12(sp)
10001c30:	dc000217 	ldw	r16,8(sp)
10001c34:	dec00c04 	addi	sp,sp,48
10001c38:	f800283a 	ret
10001c3c:	00803fc4 	movi	r2,255
10001c40:	11c0b02e 	bgeu	r2,r7,10001f04 <__umoddi3+0x594>
10001c44:	01400204 	movi	r5,8
10001c48:	282b883a 	mov	r21,r5
10001c4c:	003f9b06 	br	10001abc <__alt_data_end+0xf8001abc>
10001c50:	00804034 	movhi	r2,256
10001c54:	10bfffc4 	addi	r2,r2,-1
10001c58:	1180b02e 	bgeu	r2,r6,10001f1c <__umoddi3+0x5ac>
10001c5c:	01400604 	movi	r5,24
10001c60:	2805883a 	mov	r2,r5
10001c64:	003f5a06 	br	100019d0 <__alt_data_end+0xf80019d0>
10001c68:	00803fc4 	movi	r2,255
10001c6c:	14c0ae2e 	bgeu	r2,r19,10001f28 <__umoddi3+0x5b8>
10001c70:	00800204 	movi	r2,8
10001c74:	1007883a 	mov	r3,r2
10001c78:	003fad06 	br	10001b30 <__alt_data_end+0xf8001b30>
10001c7c:	3d0a983a 	sll	r5,r7,r20
10001c80:	356cd83a 	srl	r22,r6,r21
10001c84:	8d78d83a 	srl	fp,r17,r21
10001c88:	8d10983a 	sll	r8,r17,r20
10001c8c:	2dacb03a 	or	r22,r5,r22
10001c90:	b02ed43a 	srli	r23,r22,16
10001c94:	8564d83a 	srl	r18,r16,r21
10001c98:	e009883a 	mov	r4,fp
10001c9c:	b80b883a 	mov	r5,r23
10001ca0:	44a4b03a 	or	r18,r8,r18
10001ca4:	3526983a 	sll	r19,r6,r20
10001ca8:	00020b00 	call	100020b0 <__umodsi3>
10001cac:	e009883a 	mov	r4,fp
10001cb0:	b80b883a 	mov	r5,r23
10001cb4:	b47fffcc 	andi	r17,r22,65535
10001cb8:	d8800015 	stw	r2,0(sp)
10001cbc:	00020a80 	call	100020a8 <__udivsi3>
10001cc0:	1009883a 	mov	r4,r2
10001cc4:	880b883a 	mov	r5,r17
10001cc8:	1039883a 	mov	fp,r2
10001ccc:	00020b80 	call	100020b8 <__mulsi3>
10001cd0:	d9800017 	ldw	r6,0(sp)
10001cd4:	9008d43a 	srli	r4,r18,16
10001cd8:	8520983a 	sll	r16,r16,r20
10001cdc:	300c943a 	slli	r6,r6,16
10001ce0:	3106b03a 	or	r3,r6,r4
10001ce4:	1880042e 	bgeu	r3,r2,10001cf8 <__umoddi3+0x388>
10001ce8:	1d87883a 	add	r3,r3,r22
10001cec:	e13fffc4 	addi	r4,fp,-1
10001cf0:	1d809a2e 	bgeu	r3,r22,10001f5c <__umoddi3+0x5ec>
10001cf4:	2039883a 	mov	fp,r4
10001cf8:	1887c83a 	sub	r3,r3,r2
10001cfc:	1809883a 	mov	r4,r3
10001d00:	b80b883a 	mov	r5,r23
10001d04:	d8c00115 	stw	r3,4(sp)
10001d08:	00020b00 	call	100020b0 <__umodsi3>
10001d0c:	d8c00117 	ldw	r3,4(sp)
10001d10:	b80b883a 	mov	r5,r23
10001d14:	d8800015 	stw	r2,0(sp)
10001d18:	1809883a 	mov	r4,r3
10001d1c:	00020a80 	call	100020a8 <__udivsi3>
10001d20:	880b883a 	mov	r5,r17
10001d24:	1009883a 	mov	r4,r2
10001d28:	102f883a 	mov	r23,r2
10001d2c:	00020b80 	call	100020b8 <__mulsi3>
10001d30:	d9800017 	ldw	r6,0(sp)
10001d34:	947fffcc 	andi	r17,r18,65535
10001d38:	300c943a 	slli	r6,r6,16
10001d3c:	3464b03a 	or	r18,r6,r17
10001d40:	9080042e 	bgeu	r18,r2,10001d54 <__umoddi3+0x3e4>
10001d44:	95a5883a 	add	r18,r18,r22
10001d48:	b8ffffc4 	addi	r3,r23,-1
10001d4c:	95807f2e 	bgeu	r18,r22,10001f4c <__umoddi3+0x5dc>
10001d50:	182f883a 	mov	r23,r3
10001d54:	e038943a 	slli	fp,fp,16
10001d58:	980cd43a 	srli	r6,r19,16
10001d5c:	98ffffcc 	andi	r3,r19,65535
10001d60:	bf38b03a 	or	fp,r23,fp
10001d64:	e02ed43a 	srli	r23,fp,16
10001d68:	e73fffcc 	andi	fp,fp,65535
10001d6c:	180b883a 	mov	r5,r3
10001d70:	e009883a 	mov	r4,fp
10001d74:	d9800015 	stw	r6,0(sp)
10001d78:	d8c00115 	stw	r3,4(sp)
10001d7c:	90a5c83a 	sub	r18,r18,r2
10001d80:	00020b80 	call	100020b8 <__mulsi3>
10001d84:	d8c00117 	ldw	r3,4(sp)
10001d88:	b809883a 	mov	r4,r23
10001d8c:	1023883a 	mov	r17,r2
10001d90:	180b883a 	mov	r5,r3
10001d94:	00020b80 	call	100020b8 <__mulsi3>
10001d98:	d9800017 	ldw	r6,0(sp)
10001d9c:	b809883a 	mov	r4,r23
10001da0:	d8800115 	stw	r2,4(sp)
10001da4:	300b883a 	mov	r5,r6
10001da8:	302f883a 	mov	r23,r6
10001dac:	00020b80 	call	100020b8 <__mulsi3>
10001db0:	e009883a 	mov	r4,fp
10001db4:	b80b883a 	mov	r5,r23
10001db8:	d8800015 	stw	r2,0(sp)
10001dbc:	00020b80 	call	100020b8 <__mulsi3>
10001dc0:	d8c00117 	ldw	r3,4(sp)
10001dc4:	880cd43a 	srli	r6,r17,16
10001dc8:	d9c00017 	ldw	r7,0(sp)
10001dcc:	1885883a 	add	r2,r3,r2
10001dd0:	118d883a 	add	r6,r2,r6
10001dd4:	30c0022e 	bgeu	r6,r3,10001de0 <__umoddi3+0x470>
10001dd8:	00800074 	movhi	r2,1
10001ddc:	388f883a 	add	r7,r7,r2
10001de0:	3006d43a 	srli	r3,r6,16
10001de4:	300c943a 	slli	r6,r6,16
10001de8:	8c7fffcc 	andi	r17,r17,65535
10001dec:	38c7883a 	add	r3,r7,r3
10001df0:	3463883a 	add	r17,r6,r17
10001df4:	90c03d36 	bltu	r18,r3,10001eec <__umoddi3+0x57c>
10001df8:	90c06026 	beq	r18,r3,10001f7c <__umoddi3+0x60c>
10001dfc:	90c9c83a 	sub	r4,r18,r3
10001e00:	880f883a 	mov	r7,r17
10001e04:	81cfc83a 	sub	r7,r16,r7
10001e08:	81c7803a 	cmpltu	r3,r16,r7
10001e0c:	20c7c83a 	sub	r3,r4,r3
10001e10:	1d44983a 	sll	r2,r3,r21
10001e14:	3d0ed83a 	srl	r7,r7,r20
10001e18:	1d06d83a 	srl	r3,r3,r20
10001e1c:	11c4b03a 	or	r2,r2,r7
10001e20:	003f7a06 	br	10001c0c <__alt_data_end+0xf8001c0c>
10001e24:	0025883a 	mov	r18,zero
10001e28:	003ef806 	br	10001a0c <__alt_data_end+0xf8001a0c>
10001e2c:	98a6983a 	sll	r19,r19,r2
10001e30:	88e8d83a 	srl	r20,r17,r3
10001e34:	80c6d83a 	srl	r3,r16,r3
10001e38:	982ad43a 	srli	r21,r19,16
10001e3c:	88a2983a 	sll	r17,r17,r2
10001e40:	a009883a 	mov	r4,r20
10001e44:	a80b883a 	mov	r5,r21
10001e48:	88eeb03a 	or	r23,r17,r3
10001e4c:	1025883a 	mov	r18,r2
10001e50:	00020b00 	call	100020b0 <__umodsi3>
10001e54:	a009883a 	mov	r4,r20
10001e58:	a80b883a 	mov	r5,r21
10001e5c:	1023883a 	mov	r17,r2
10001e60:	9dbfffcc 	andi	r22,r19,65535
10001e64:	00020a80 	call	100020a8 <__udivsi3>
10001e68:	1009883a 	mov	r4,r2
10001e6c:	b00b883a 	mov	r5,r22
10001e70:	00020b80 	call	100020b8 <__mulsi3>
10001e74:	8822943a 	slli	r17,r17,16
10001e78:	b808d43a 	srli	r4,r23,16
10001e7c:	84a8983a 	sll	r20,r16,r18
10001e80:	8906b03a 	or	r3,r17,r4
10001e84:	1880042e 	bgeu	r3,r2,10001e98 <__umoddi3+0x528>
10001e88:	1cc7883a 	add	r3,r3,r19
10001e8c:	1cc00236 	bltu	r3,r19,10001e98 <__umoddi3+0x528>
10001e90:	1880012e 	bgeu	r3,r2,10001e98 <__umoddi3+0x528>
10001e94:	1cc7883a 	add	r3,r3,r19
10001e98:	18a1c83a 	sub	r16,r3,r2
10001e9c:	8009883a 	mov	r4,r16
10001ea0:	a80b883a 	mov	r5,r21
10001ea4:	00020b00 	call	100020b0 <__umodsi3>
10001ea8:	8009883a 	mov	r4,r16
10001eac:	a80b883a 	mov	r5,r21
10001eb0:	1039883a 	mov	fp,r2
10001eb4:	00020a80 	call	100020a8 <__udivsi3>
10001eb8:	1009883a 	mov	r4,r2
10001ebc:	b00b883a 	mov	r5,r22
10001ec0:	00020b80 	call	100020b8 <__mulsi3>
10001ec4:	e006943a 	slli	r3,fp,16
10001ec8:	b93fffcc 	andi	r4,r23,65535
10001ecc:	1906b03a 	or	r3,r3,r4
10001ed0:	1880042e 	bgeu	r3,r2,10001ee4 <__umoddi3+0x574>
10001ed4:	1cc7883a 	add	r3,r3,r19
10001ed8:	1cc00236 	bltu	r3,r19,10001ee4 <__umoddi3+0x574>
10001edc:	1880012e 	bgeu	r3,r2,10001ee4 <__umoddi3+0x574>
10001ee0:	1cc7883a 	add	r3,r3,r19
10001ee4:	18a3c83a 	sub	r17,r3,r2
10001ee8:	003f1e06 	br	10001b64 <__alt_data_end+0xf8001b64>
10001eec:	8ccfc83a 	sub	r7,r17,r19
10001ef0:	1d89c83a 	sub	r4,r3,r22
10001ef4:	89e3803a 	cmpltu	r17,r17,r7
10001ef8:	2463c83a 	sub	r17,r4,r17
10001efc:	9449c83a 	sub	r4,r18,r17
10001f00:	003fc006 	br	10001e04 <__alt_data_end+0xf8001e04>
10001f04:	000b883a 	mov	r5,zero
10001f08:	002b883a 	mov	r21,zero
10001f0c:	003eeb06 	br	10001abc <__alt_data_end+0xf8001abc>
10001f10:	01400404 	movi	r5,16
10001f14:	282b883a 	mov	r21,r5
10001f18:	003ee806 	br	10001abc <__alt_data_end+0xf8001abc>
10001f1c:	01400404 	movi	r5,16
10001f20:	2805883a 	mov	r2,r5
10001f24:	003eaa06 	br	100019d0 <__alt_data_end+0xf80019d0>
10001f28:	0005883a 	mov	r2,zero
10001f2c:	0007883a 	mov	r3,zero
10001f30:	003eff06 	br	10001b30 <__alt_data_end+0xf8001b30>
10001f34:	00800404 	movi	r2,16
10001f38:	1007883a 	mov	r3,r2
10001f3c:	003efc06 	br	10001b30 <__alt_data_end+0xf8001b30>
10001f40:	000b883a 	mov	r5,zero
10001f44:	0005883a 	mov	r2,zero
10001f48:	003ea106 	br	100019d0 <__alt_data_end+0xf80019d0>
10001f4c:	90bf802e 	bgeu	r18,r2,10001d50 <__alt_data_end+0xf8001d50>
10001f50:	bdffff84 	addi	r23,r23,-2
10001f54:	95a5883a 	add	r18,r18,r22
10001f58:	003f7e06 	br	10001d54 <__alt_data_end+0xf8001d54>
10001f5c:	18bf652e 	bgeu	r3,r2,10001cf4 <__alt_data_end+0xf8001cf4>
10001f60:	e73fff84 	addi	fp,fp,-2
10001f64:	1d87883a 	add	r3,r3,r22
10001f68:	003f6306 	br	10001cf8 <__alt_data_end+0xf8001cf8>
10001f6c:	1cc7883a 	add	r3,r3,r19
10001f70:	003f0d06 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10001f74:	8005883a 	mov	r2,r16
10001f78:	003edf06 	br	10001af8 <__alt_data_end+0xf8001af8>
10001f7c:	847fdb36 	bltu	r16,r17,10001eec <__alt_data_end+0xf8001eec>
10001f80:	880f883a 	mov	r7,r17
10001f84:	0009883a 	mov	r4,zero
10001f88:	003f9e06 	br	10001e04 <__alt_data_end+0xf8001e04>

10001f8c <udivmodsi4>:
10001f8c:	2900182e 	bgeu	r5,r4,10001ff0 <udivmodsi4+0x64>
10001f90:	28001716 	blt	r5,zero,10001ff0 <udivmodsi4+0x64>
10001f94:	00800804 	movi	r2,32
10001f98:	00c00044 	movi	r3,1
10001f9c:	00000206 	br	10001fa8 <udivmodsi4+0x1c>
10001fa0:	10001126 	beq	r2,zero,10001fe8 <udivmodsi4+0x5c>
10001fa4:	28000516 	blt	r5,zero,10001fbc <udivmodsi4+0x30>
10001fa8:	294b883a 	add	r5,r5,r5
10001fac:	10bfffc4 	addi	r2,r2,-1
10001fb0:	18c7883a 	add	r3,r3,r3
10001fb4:	293ffa36 	bltu	r5,r4,10001fa0 <__alt_data_end+0xf8001fa0>
10001fb8:	18000b26 	beq	r3,zero,10001fe8 <udivmodsi4+0x5c>
10001fbc:	0005883a 	mov	r2,zero
10001fc0:	21400236 	bltu	r4,r5,10001fcc <udivmodsi4+0x40>
10001fc4:	2149c83a 	sub	r4,r4,r5
10001fc8:	10c4b03a 	or	r2,r2,r3
10001fcc:	1806d07a 	srli	r3,r3,1
10001fd0:	280ad07a 	srli	r5,r5,1
10001fd4:	183ffa1e 	bne	r3,zero,10001fc0 <__alt_data_end+0xf8001fc0>
10001fd8:	3000011e 	bne	r6,zero,10001fe0 <udivmodsi4+0x54>
10001fdc:	f800283a 	ret
10001fe0:	2005883a 	mov	r2,r4
10001fe4:	f800283a 	ret
10001fe8:	0005883a 	mov	r2,zero
10001fec:	003ffa06 	br	10001fd8 <__alt_data_end+0xf8001fd8>
10001ff0:	00c00044 	movi	r3,1
10001ff4:	003ff106 	br	10001fbc <__alt_data_end+0xf8001fbc>

10001ff8 <__divsi3>:
10001ff8:	defffe04 	addi	sp,sp,-8
10001ffc:	dfc00115 	stw	ra,4(sp)
10002000:	dc000015 	stw	r16,0(sp)
10002004:	20000b16 	blt	r4,zero,10002034 <__divsi3+0x3c>
10002008:	0021883a 	mov	r16,zero
1000200c:	28000c16 	blt	r5,zero,10002040 <__divsi3+0x48>
10002010:	000d883a 	mov	r6,zero
10002014:	0001f8c0 	call	10001f8c <udivmodsi4>
10002018:	0407c83a 	sub	r3,zero,r16
1000201c:	1884f03a 	xor	r2,r3,r2
10002020:	1405883a 	add	r2,r2,r16
10002024:	dfc00117 	ldw	ra,4(sp)
10002028:	dc000017 	ldw	r16,0(sp)
1000202c:	dec00204 	addi	sp,sp,8
10002030:	f800283a 	ret
10002034:	0109c83a 	sub	r4,zero,r4
10002038:	04000044 	movi	r16,1
1000203c:	283ff40e 	bge	r5,zero,10002010 <__alt_data_end+0xf8002010>
10002040:	014bc83a 	sub	r5,zero,r5
10002044:	8400005c 	xori	r16,r16,1
10002048:	003ff106 	br	10002010 <__alt_data_end+0xf8002010>

1000204c <__modsi3>:
1000204c:	defffd04 	addi	sp,sp,-12
10002050:	dfc00215 	stw	ra,8(sp)
10002054:	dc400115 	stw	r17,4(sp)
10002058:	dc000015 	stw	r16,0(sp)
1000205c:	20000c16 	blt	r4,zero,10002090 <__modsi3+0x44>
10002060:	0023883a 	mov	r17,zero
10002064:	0021883a 	mov	r16,zero
10002068:	28000d16 	blt	r5,zero,100020a0 <__modsi3+0x54>
1000206c:	01800044 	movi	r6,1
10002070:	0001f8c0 	call	10001f8c <udivmodsi4>
10002074:	1404f03a 	xor	r2,r2,r16
10002078:	8885883a 	add	r2,r17,r2
1000207c:	dfc00217 	ldw	ra,8(sp)
10002080:	dc400117 	ldw	r17,4(sp)
10002084:	dc000017 	ldw	r16,0(sp)
10002088:	dec00304 	addi	sp,sp,12
1000208c:	f800283a 	ret
10002090:	0109c83a 	sub	r4,zero,r4
10002094:	04400044 	movi	r17,1
10002098:	043fffc4 	movi	r16,-1
1000209c:	283ff30e 	bge	r5,zero,1000206c <__alt_data_end+0xf800206c>
100020a0:	014bc83a 	sub	r5,zero,r5
100020a4:	003ff106 	br	1000206c <__alt_data_end+0xf800206c>

100020a8 <__udivsi3>:
100020a8:	000d883a 	mov	r6,zero
100020ac:	0001f8c1 	jmpi	10001f8c <udivmodsi4>

100020b0 <__umodsi3>:
100020b0:	01800044 	movi	r6,1
100020b4:	0001f8c1 	jmpi	10001f8c <udivmodsi4>

100020b8 <__mulsi3>:
100020b8:	0005883a 	mov	r2,zero
100020bc:	20000726 	beq	r4,zero,100020dc <__mulsi3+0x24>
100020c0:	20c0004c 	andi	r3,r4,1
100020c4:	2008d07a 	srli	r4,r4,1
100020c8:	18000126 	beq	r3,zero,100020d0 <__mulsi3+0x18>
100020cc:	1145883a 	add	r2,r2,r5
100020d0:	294b883a 	add	r5,r5,r5
100020d4:	203ffa1e 	bne	r4,zero,100020c0 <__alt_data_end+0xf80020c0>
100020d8:	f800283a 	ret
100020dc:	f800283a 	ret

100020e0 <__adddf3>:
100020e0:	02000434 	movhi	r8,16
100020e4:	423fffc4 	addi	r8,r8,-1
100020e8:	defffb04 	addi	sp,sp,-20
100020ec:	2a12703a 	and	r9,r5,r8
100020f0:	2806d7fa 	srli	r3,r5,31
100020f4:	3a10703a 	and	r8,r7,r8
100020f8:	3804d53a 	srli	r2,r7,20
100020fc:	3014d77a 	srli	r10,r6,29
10002100:	dc000015 	stw	r16,0(sp)
10002104:	481290fa 	slli	r9,r9,3
10002108:	2820d53a 	srli	r16,r5,20
1000210c:	401090fa 	slli	r8,r8,3
10002110:	200ad77a 	srli	r5,r4,29
10002114:	380ed7fa 	srli	r7,r7,31
10002118:	dc800215 	stw	r18,8(sp)
1000211c:	dc400115 	stw	r17,4(sp)
10002120:	dfc00415 	stw	ra,16(sp)
10002124:	dcc00315 	stw	r19,12(sp)
10002128:	1c803fcc 	andi	r18,r3,255
1000212c:	8401ffcc 	andi	r16,r16,2047
10002130:	494ab03a 	or	r5,r9,r5
10002134:	202290fa 	slli	r17,r4,3
10002138:	1081ffcc 	andi	r2,r2,2047
1000213c:	4290b03a 	or	r8,r8,r10
10002140:	300c90fa 	slli	r6,r6,3
10002144:	91c07026 	beq	r18,r7,10002308 <__adddf3+0x228>
10002148:	8087c83a 	sub	r3,r16,r2
1000214c:	00c0b30e 	bge	zero,r3,1000241c <__adddf3+0x33c>
10002150:	10002a1e 	bne	r2,zero,100021fc <__adddf3+0x11c>
10002154:	4184b03a 	or	r2,r8,r6
10002158:	1000991e 	bne	r2,zero,100023c0 <__adddf3+0x2e0>
1000215c:	888001cc 	andi	r2,r17,7
10002160:	10005b26 	beq	r2,zero,100022d0 <__adddf3+0x1f0>
10002164:	88c003cc 	andi	r3,r17,15
10002168:	00800104 	movi	r2,4
1000216c:	18805826 	beq	r3,r2,100022d0 <__adddf3+0x1f0>
10002170:	89800104 	addi	r6,r17,4
10002174:	3463803a 	cmpltu	r17,r6,r17
10002178:	2c4b883a 	add	r5,r5,r17
1000217c:	2880202c 	andhi	r2,r5,128
10002180:	9007883a 	mov	r3,r18
10002184:	3023883a 	mov	r17,r6
10002188:	10005426 	beq	r2,zero,100022dc <__adddf3+0x1fc>
1000218c:	84000044 	addi	r16,r16,1
10002190:	0081ffc4 	movi	r2,2047
10002194:	8080c126 	beq	r16,r2,1000249c <__adddf3+0x3bc>
10002198:	013fe034 	movhi	r4,65408
1000219c:	213fffc4 	addi	r4,r4,-1
100021a0:	290a703a 	and	r5,r5,r4
100021a4:	2804977a 	slli	r2,r5,29
100021a8:	280a927a 	slli	r5,r5,9
100021ac:	8822d0fa 	srli	r17,r17,3
100021b0:	8401ffcc 	andi	r16,r16,2047
100021b4:	2808d33a 	srli	r4,r5,12
100021b8:	1444b03a 	or	r2,r2,r17
100021bc:	8401ffcc 	andi	r16,r16,2047
100021c0:	800a953a 	slli	r5,r16,20
100021c4:	18c03fcc 	andi	r3,r3,255
100021c8:	04000434 	movhi	r16,16
100021cc:	180697fa 	slli	r3,r3,31
100021d0:	843fffc4 	addi	r16,r16,-1
100021d4:	2420703a 	and	r16,r4,r16
100021d8:	8160b03a 	or	r16,r16,r5
100021dc:	80c6b03a 	or	r3,r16,r3
100021e0:	dfc00417 	ldw	ra,16(sp)
100021e4:	dcc00317 	ldw	r19,12(sp)
100021e8:	dc800217 	ldw	r18,8(sp)
100021ec:	dc400117 	ldw	r17,4(sp)
100021f0:	dc000017 	ldw	r16,0(sp)
100021f4:	dec00504 	addi	sp,sp,20
100021f8:	f800283a 	ret
100021fc:	0081ffc4 	movi	r2,2047
10002200:	80bfd626 	beq	r16,r2,1000215c <__alt_data_end+0xf800215c>
10002204:	42002034 	orhi	r8,r8,128
10002208:	00800e04 	movi	r2,56
1000220c:	10c0a616 	blt	r2,r3,100024a8 <__adddf3+0x3c8>
10002210:	008007c4 	movi	r2,31
10002214:	10c0c916 	blt	r2,r3,1000253c <__adddf3+0x45c>
10002218:	00800804 	movi	r2,32
1000221c:	10c5c83a 	sub	r2,r2,r3
10002220:	408e983a 	sll	r7,r8,r2
10002224:	30c8d83a 	srl	r4,r6,r3
10002228:	3084983a 	sll	r2,r6,r2
1000222c:	40c6d83a 	srl	r3,r8,r3
10002230:	390cb03a 	or	r6,r7,r4
10002234:	1004c03a 	cmpne	r2,r2,zero
10002238:	308cb03a 	or	r6,r6,r2
1000223c:	898dc83a 	sub	r6,r17,r6
10002240:	89a3803a 	cmpltu	r17,r17,r6
10002244:	28cbc83a 	sub	r5,r5,r3
10002248:	2c4bc83a 	sub	r5,r5,r17
1000224c:	3023883a 	mov	r17,r6
10002250:	2880202c 	andhi	r2,r5,128
10002254:	10006d26 	beq	r2,zero,1000240c <__adddf3+0x32c>
10002258:	04c02034 	movhi	r19,128
1000225c:	9cffffc4 	addi	r19,r19,-1
10002260:	2ce6703a 	and	r19,r5,r19
10002264:	98007e26 	beq	r19,zero,10002460 <__adddf3+0x380>
10002268:	9809883a 	mov	r4,r19
1000226c:	00033a40 	call	100033a4 <__clzsi2>
10002270:	10fffe04 	addi	r3,r2,-8
10002274:	010007c4 	movi	r4,31
10002278:	20c07f16 	blt	r4,r3,10002478 <__adddf3+0x398>
1000227c:	01400a04 	movi	r5,40
10002280:	2885c83a 	sub	r2,r5,r2
10002284:	888ad83a 	srl	r5,r17,r2
10002288:	98e6983a 	sll	r19,r19,r3
1000228c:	88e2983a 	sll	r17,r17,r3
10002290:	2ce6b03a 	or	r19,r5,r19
10002294:	1c007c16 	blt	r3,r16,10002488 <__adddf3+0x3a8>
10002298:	1c21c83a 	sub	r16,r3,r16
1000229c:	81400044 	addi	r5,r16,1
100022a0:	00c007c4 	movi	r3,31
100022a4:	19409816 	blt	r3,r5,10002508 <__adddf3+0x428>
100022a8:	1c21c83a 	sub	r16,r3,r16
100022ac:	8c08983a 	sll	r4,r17,r16
100022b0:	8946d83a 	srl	r3,r17,r5
100022b4:	9c20983a 	sll	r16,r19,r16
100022b8:	2008c03a 	cmpne	r4,r4,zero
100022bc:	994ad83a 	srl	r5,r19,r5
100022c0:	1c06b03a 	or	r3,r3,r16
100022c4:	1922b03a 	or	r17,r3,r4
100022c8:	0021883a 	mov	r16,zero
100022cc:	003fa306 	br	1000215c <__alt_data_end+0xf800215c>
100022d0:	2880202c 	andhi	r2,r5,128
100022d4:	9007883a 	mov	r3,r18
100022d8:	103fac1e 	bne	r2,zero,1000218c <__alt_data_end+0xf800218c>
100022dc:	2804977a 	slli	r2,r5,29
100022e0:	8822d0fa 	srli	r17,r17,3
100022e4:	0101ffc4 	movi	r4,2047
100022e8:	280ad0fa 	srli	r5,r5,3
100022ec:	1444b03a 	or	r2,r2,r17
100022f0:	81002c26 	beq	r16,r4,100023a4 <__adddf3+0x2c4>
100022f4:	8120703a 	and	r16,r16,r4
100022f8:	01000434 	movhi	r4,16
100022fc:	213fffc4 	addi	r4,r4,-1
10002300:	2908703a 	and	r4,r5,r4
10002304:	003fad06 	br	100021bc <__alt_data_end+0xf80021bc>
10002308:	8089c83a 	sub	r4,r16,r2
1000230c:	01006a0e 	bge	zero,r4,100024b8 <__adddf3+0x3d8>
10002310:	10003326 	beq	r2,zero,100023e0 <__adddf3+0x300>
10002314:	0081ffc4 	movi	r2,2047
10002318:	80bf9026 	beq	r16,r2,1000215c <__alt_data_end+0xf800215c>
1000231c:	42002034 	orhi	r8,r8,128
10002320:	00800e04 	movi	r2,56
10002324:	1100b116 	blt	r2,r4,100025ec <__adddf3+0x50c>
10002328:	008007c4 	movi	r2,31
1000232c:	1100e216 	blt	r2,r4,100026b8 <__adddf3+0x5d8>
10002330:	00800804 	movi	r2,32
10002334:	1105c83a 	sub	r2,r2,r4
10002338:	4092983a 	sll	r9,r8,r2
1000233c:	310ed83a 	srl	r7,r6,r4
10002340:	3084983a 	sll	r2,r6,r2
10002344:	4110d83a 	srl	r8,r8,r4
10002348:	49ccb03a 	or	r6,r9,r7
1000234c:	1004c03a 	cmpne	r2,r2,zero
10002350:	308cb03a 	or	r6,r6,r2
10002354:	344d883a 	add	r6,r6,r17
10002358:	3463803a 	cmpltu	r17,r6,r17
1000235c:	414b883a 	add	r5,r8,r5
10002360:	2c4b883a 	add	r5,r5,r17
10002364:	3023883a 	mov	r17,r6
10002368:	2880202c 	andhi	r2,r5,128
1000236c:	10002726 	beq	r2,zero,1000240c <__adddf3+0x32c>
10002370:	84000044 	addi	r16,r16,1
10002374:	0081ffc4 	movi	r2,2047
10002378:	8080ae26 	beq	r16,r2,10002634 <__adddf3+0x554>
1000237c:	00bfe034 	movhi	r2,65408
10002380:	10bfffc4 	addi	r2,r2,-1
10002384:	288a703a 	and	r5,r5,r2
10002388:	880cd07a 	srli	r6,r17,1
1000238c:	280897fa 	slli	r4,r5,31
10002390:	88c0004c 	andi	r3,r17,1
10002394:	30e2b03a 	or	r17,r6,r3
10002398:	280ad07a 	srli	r5,r5,1
1000239c:	8922b03a 	or	r17,r17,r4
100023a0:	003f6e06 	br	1000215c <__alt_data_end+0xf800215c>
100023a4:	1148b03a 	or	r4,r2,r5
100023a8:	20003c26 	beq	r4,zero,1000249c <__adddf3+0x3bc>
100023ac:	29000234 	orhi	r4,r5,8
100023b0:	01400434 	movhi	r5,16
100023b4:	297fffc4 	addi	r5,r5,-1
100023b8:	2148703a 	and	r4,r4,r5
100023bc:	003f7f06 	br	100021bc <__alt_data_end+0xf80021bc>
100023c0:	18ffffc4 	addi	r3,r3,-1
100023c4:	18004d1e 	bne	r3,zero,100024fc <__adddf3+0x41c>
100023c8:	898dc83a 	sub	r6,r17,r6
100023cc:	89a3803a 	cmpltu	r17,r17,r6
100023d0:	2a0bc83a 	sub	r5,r5,r8
100023d4:	2c4bc83a 	sub	r5,r5,r17
100023d8:	3023883a 	mov	r17,r6
100023dc:	003f9c06 	br	10002250 <__alt_data_end+0xf8002250>
100023e0:	4184b03a 	or	r2,r8,r6
100023e4:	103f5d26 	beq	r2,zero,1000215c <__alt_data_end+0xf800215c>
100023e8:	213fffc4 	addi	r4,r4,-1
100023ec:	203fd926 	beq	r4,zero,10002354 <__alt_data_end+0xf8002354>
100023f0:	0081ffc4 	movi	r2,2047
100023f4:	80bfca1e 	bne	r16,r2,10002320 <__alt_data_end+0xf8002320>
100023f8:	003f5806 	br	1000215c <__alt_data_end+0xf800215c>
100023fc:	10c8b03a 	or	r4,r2,r3
10002400:	20008b26 	beq	r4,zero,10002630 <__adddf3+0x550>
10002404:	100b883a 	mov	r5,r2
10002408:	1823883a 	mov	r17,r3
1000240c:	888001cc 	andi	r2,r17,7
10002410:	103f541e 	bne	r2,zero,10002164 <__alt_data_end+0xf8002164>
10002414:	9007883a 	mov	r3,r18
10002418:	003fb006 	br	100022dc <__alt_data_end+0xf80022dc>
1000241c:	1800531e 	bne	r3,zero,1000256c <__adddf3+0x48c>
10002420:	80800044 	addi	r2,r16,1
10002424:	1081ffcc 	andi	r2,r2,2047
10002428:	00c00044 	movi	r3,1
1000242c:	1880990e 	bge	r3,r2,10002694 <__adddf3+0x5b4>
10002430:	8985c83a 	sub	r2,r17,r6
10002434:	8887803a 	cmpltu	r3,r17,r2
10002438:	2a27c83a 	sub	r19,r5,r8
1000243c:	98e7c83a 	sub	r19,r19,r3
10002440:	98c0202c 	andhi	r3,r19,128
10002444:	18006226 	beq	r3,zero,100025d0 <__adddf3+0x4f0>
10002448:	3463c83a 	sub	r17,r6,r17
1000244c:	4151c83a 	sub	r8,r8,r5
10002450:	344d803a 	cmpltu	r6,r6,r17
10002454:	41a7c83a 	sub	r19,r8,r6
10002458:	3825883a 	mov	r18,r7
1000245c:	983f821e 	bne	r19,zero,10002268 <__alt_data_end+0xf8002268>
10002460:	8809883a 	mov	r4,r17
10002464:	00033a40 	call	100033a4 <__clzsi2>
10002468:	10800804 	addi	r2,r2,32
1000246c:	10fffe04 	addi	r3,r2,-8
10002470:	010007c4 	movi	r4,31
10002474:	20ff810e 	bge	r4,r3,1000227c <__alt_data_end+0xf800227c>
10002478:	14fff604 	addi	r19,r2,-40
1000247c:	8ce6983a 	sll	r19,r17,r19
10002480:	0023883a 	mov	r17,zero
10002484:	1c3f840e 	bge	r3,r16,10002298 <__alt_data_end+0xf8002298>
10002488:	017fe034 	movhi	r5,65408
1000248c:	297fffc4 	addi	r5,r5,-1
10002490:	80e1c83a 	sub	r16,r16,r3
10002494:	994a703a 	and	r5,r19,r5
10002498:	003f3006 	br	1000215c <__alt_data_end+0xf800215c>
1000249c:	0009883a 	mov	r4,zero
100024a0:	0005883a 	mov	r2,zero
100024a4:	003f4506 	br	100021bc <__alt_data_end+0xf80021bc>
100024a8:	418cb03a 	or	r6,r8,r6
100024ac:	300cc03a 	cmpne	r6,r6,zero
100024b0:	0007883a 	mov	r3,zero
100024b4:	003f6106 	br	1000223c <__alt_data_end+0xf800223c>
100024b8:	2000921e 	bne	r4,zero,10002704 <__adddf3+0x624>
100024bc:	80800044 	addi	r2,r16,1
100024c0:	11c1ffcc 	andi	r7,r2,2047
100024c4:	01000044 	movi	r4,1
100024c8:	21c0610e 	bge	r4,r7,10002650 <__adddf3+0x570>
100024cc:	0101ffc4 	movi	r4,2047
100024d0:	1100a326 	beq	r2,r4,10002760 <__adddf3+0x680>
100024d4:	344d883a 	add	r6,r6,r17
100024d8:	3463803a 	cmpltu	r17,r6,r17
100024dc:	414b883a 	add	r5,r8,r5
100024e0:	2c4b883a 	add	r5,r5,r17
100024e4:	282297fa 	slli	r17,r5,31
100024e8:	300cd07a 	srli	r6,r6,1
100024ec:	280ad07a 	srli	r5,r5,1
100024f0:	1021883a 	mov	r16,r2
100024f4:	89a2b03a 	or	r17,r17,r6
100024f8:	003f1806 	br	1000215c <__alt_data_end+0xf800215c>
100024fc:	0081ffc4 	movi	r2,2047
10002500:	80bf411e 	bne	r16,r2,10002208 <__alt_data_end+0xf8002208>
10002504:	003f1506 	br	1000215c <__alt_data_end+0xf800215c>
10002508:	80bff844 	addi	r2,r16,-31
1000250c:	00c00804 	movi	r3,32
10002510:	9884d83a 	srl	r2,r19,r2
10002514:	28c04a26 	beq	r5,r3,10002640 <__adddf3+0x560>
10002518:	00c00fc4 	movi	r3,63
1000251c:	1c21c83a 	sub	r16,r3,r16
10002520:	9c26983a 	sll	r19,r19,r16
10002524:	9c62b03a 	or	r17,r19,r17
10002528:	8822c03a 	cmpne	r17,r17,zero
1000252c:	88a2b03a 	or	r17,r17,r2
10002530:	000b883a 	mov	r5,zero
10002534:	0021883a 	mov	r16,zero
10002538:	003fb406 	br	1000240c <__alt_data_end+0xf800240c>
1000253c:	18bff804 	addi	r2,r3,-32
10002540:	01000804 	movi	r4,32
10002544:	4084d83a 	srl	r2,r8,r2
10002548:	19003f26 	beq	r3,r4,10002648 <__adddf3+0x568>
1000254c:	01001004 	movi	r4,64
10002550:	20c7c83a 	sub	r3,r4,r3
10002554:	40d0983a 	sll	r8,r8,r3
10002558:	418cb03a 	or	r6,r8,r6
1000255c:	300cc03a 	cmpne	r6,r6,zero
10002560:	308cb03a 	or	r6,r6,r2
10002564:	0007883a 	mov	r3,zero
10002568:	003f3406 	br	1000223c <__alt_data_end+0xf800223c>
1000256c:	80002326 	beq	r16,zero,100025fc <__adddf3+0x51c>
10002570:	0101ffc4 	movi	r4,2047
10002574:	11005e26 	beq	r2,r4,100026f0 <__adddf3+0x610>
10002578:	00c7c83a 	sub	r3,zero,r3
1000257c:	29402034 	orhi	r5,r5,128
10002580:	01000e04 	movi	r4,56
10002584:	20c07216 	blt	r4,r3,10002750 <__adddf3+0x670>
10002588:	010007c4 	movi	r4,31
1000258c:	20c0ce16 	blt	r4,r3,100028c8 <__adddf3+0x7e8>
10002590:	01000804 	movi	r4,32
10002594:	20c9c83a 	sub	r4,r4,r3
10002598:	2914983a 	sll	r10,r5,r4
1000259c:	88d2d83a 	srl	r9,r17,r3
100025a0:	8908983a 	sll	r4,r17,r4
100025a4:	28c6d83a 	srl	r3,r5,r3
100025a8:	5262b03a 	or	r17,r10,r9
100025ac:	2008c03a 	cmpne	r4,r4,zero
100025b0:	8922b03a 	or	r17,r17,r4
100025b4:	3463c83a 	sub	r17,r6,r17
100025b8:	40c7c83a 	sub	r3,r8,r3
100025bc:	344d803a 	cmpltu	r6,r6,r17
100025c0:	198bc83a 	sub	r5,r3,r6
100025c4:	1021883a 	mov	r16,r2
100025c8:	3825883a 	mov	r18,r7
100025cc:	003f2006 	br	10002250 <__alt_data_end+0xf8002250>
100025d0:	9886b03a 	or	r3,r19,r2
100025d4:	1800141e 	bne	r3,zero,10002628 <__adddf3+0x548>
100025d8:	0007883a 	mov	r3,zero
100025dc:	000b883a 	mov	r5,zero
100025e0:	0023883a 	mov	r17,zero
100025e4:	0021883a 	mov	r16,zero
100025e8:	003f3c06 	br	100022dc <__alt_data_end+0xf80022dc>
100025ec:	418cb03a 	or	r6,r8,r6
100025f0:	300cc03a 	cmpne	r6,r6,zero
100025f4:	0011883a 	mov	r8,zero
100025f8:	003f5606 	br	10002354 <__alt_data_end+0xf8002354>
100025fc:	2c48b03a 	or	r4,r5,r17
10002600:	20003b26 	beq	r4,zero,100026f0 <__adddf3+0x610>
10002604:	00c6303a 	nor	r3,zero,r3
10002608:	1800371e 	bne	r3,zero,100026e8 <__adddf3+0x608>
1000260c:	3463c83a 	sub	r17,r6,r17
10002610:	414bc83a 	sub	r5,r8,r5
10002614:	344d803a 	cmpltu	r6,r6,r17
10002618:	298bc83a 	sub	r5,r5,r6
1000261c:	1021883a 	mov	r16,r2
10002620:	3825883a 	mov	r18,r7
10002624:	003f0a06 	br	10002250 <__alt_data_end+0xf8002250>
10002628:	1023883a 	mov	r17,r2
1000262c:	003f0d06 	br	10002264 <__alt_data_end+0xf8002264>
10002630:	0007883a 	mov	r3,zero
10002634:	000b883a 	mov	r5,zero
10002638:	0023883a 	mov	r17,zero
1000263c:	003f2706 	br	100022dc <__alt_data_end+0xf80022dc>
10002640:	0027883a 	mov	r19,zero
10002644:	003fb706 	br	10002524 <__alt_data_end+0xf8002524>
10002648:	0011883a 	mov	r8,zero
1000264c:	003fc206 	br	10002558 <__alt_data_end+0xf8002558>
10002650:	2c44b03a 	or	r2,r5,r17
10002654:	8000871e 	bne	r16,zero,10002874 <__adddf3+0x794>
10002658:	1000b126 	beq	r2,zero,10002920 <__adddf3+0x840>
1000265c:	4184b03a 	or	r2,r8,r6
10002660:	103ebe26 	beq	r2,zero,1000215c <__alt_data_end+0xf800215c>
10002664:	3445883a 	add	r2,r6,r17
10002668:	1463803a 	cmpltu	r17,r2,r17
1000266c:	414b883a 	add	r5,r8,r5
10002670:	2c4b883a 	add	r5,r5,r17
10002674:	28c0202c 	andhi	r3,r5,128
10002678:	1023883a 	mov	r17,r2
1000267c:	183f6326 	beq	r3,zero,1000240c <__alt_data_end+0xf800240c>
10002680:	00bfe034 	movhi	r2,65408
10002684:	10bfffc4 	addi	r2,r2,-1
10002688:	2021883a 	mov	r16,r4
1000268c:	288a703a 	and	r5,r5,r2
10002690:	003eb206 	br	1000215c <__alt_data_end+0xf800215c>
10002694:	2c44b03a 	or	r2,r5,r17
10002698:	8000251e 	bne	r16,zero,10002730 <__adddf3+0x650>
1000269c:	10004b1e 	bne	r2,zero,100027cc <__adddf3+0x6ec>
100026a0:	4184b03a 	or	r2,r8,r6
100026a4:	103fe226 	beq	r2,zero,10002630 <__alt_data_end+0xf8002630>
100026a8:	400b883a 	mov	r5,r8
100026ac:	3023883a 	mov	r17,r6
100026b0:	3825883a 	mov	r18,r7
100026b4:	003ea906 	br	1000215c <__alt_data_end+0xf800215c>
100026b8:	20bff804 	addi	r2,r4,-32
100026bc:	01c00804 	movi	r7,32
100026c0:	4084d83a 	srl	r2,r8,r2
100026c4:	21c07e26 	beq	r4,r7,100028c0 <__adddf3+0x7e0>
100026c8:	01c01004 	movi	r7,64
100026cc:	3909c83a 	sub	r4,r7,r4
100026d0:	4110983a 	sll	r8,r8,r4
100026d4:	418cb03a 	or	r6,r8,r6
100026d8:	300cc03a 	cmpne	r6,r6,zero
100026dc:	308cb03a 	or	r6,r6,r2
100026e0:	0011883a 	mov	r8,zero
100026e4:	003f1b06 	br	10002354 <__alt_data_end+0xf8002354>
100026e8:	0101ffc4 	movi	r4,2047
100026ec:	113fa41e 	bne	r2,r4,10002580 <__alt_data_end+0xf8002580>
100026f0:	400b883a 	mov	r5,r8
100026f4:	3023883a 	mov	r17,r6
100026f8:	1021883a 	mov	r16,r2
100026fc:	3825883a 	mov	r18,r7
10002700:	003e9606 	br	1000215c <__alt_data_end+0xf800215c>
10002704:	80001a1e 	bne	r16,zero,10002770 <__adddf3+0x690>
10002708:	2c4eb03a 	or	r7,r5,r17
1000270c:	38005526 	beq	r7,zero,10002864 <__adddf3+0x784>
10002710:	0108303a 	nor	r4,zero,r4
10002714:	2000511e 	bne	r4,zero,1000285c <__adddf3+0x77c>
10002718:	89a3883a 	add	r17,r17,r6
1000271c:	414b883a 	add	r5,r8,r5
10002720:	898d803a 	cmpltu	r6,r17,r6
10002724:	298b883a 	add	r5,r5,r6
10002728:	1021883a 	mov	r16,r2
1000272c:	003f0e06 	br	10002368 <__alt_data_end+0xf8002368>
10002730:	1000341e 	bne	r2,zero,10002804 <__adddf3+0x724>
10002734:	4184b03a 	or	r2,r8,r6
10002738:	10006f26 	beq	r2,zero,100028f8 <__adddf3+0x818>
1000273c:	400b883a 	mov	r5,r8
10002740:	3023883a 	mov	r17,r6
10002744:	3825883a 	mov	r18,r7
10002748:	0401ffc4 	movi	r16,2047
1000274c:	003e8306 	br	1000215c <__alt_data_end+0xf800215c>
10002750:	2c62b03a 	or	r17,r5,r17
10002754:	8822c03a 	cmpne	r17,r17,zero
10002758:	0007883a 	mov	r3,zero
1000275c:	003f9506 	br	100025b4 <__alt_data_end+0xf80025b4>
10002760:	1021883a 	mov	r16,r2
10002764:	000b883a 	mov	r5,zero
10002768:	0023883a 	mov	r17,zero
1000276c:	003edb06 	br	100022dc <__alt_data_end+0xf80022dc>
10002770:	01c1ffc4 	movi	r7,2047
10002774:	11c03b26 	beq	r2,r7,10002864 <__adddf3+0x784>
10002778:	0109c83a 	sub	r4,zero,r4
1000277c:	29402034 	orhi	r5,r5,128
10002780:	01c00e04 	movi	r7,56
10002784:	39006216 	blt	r7,r4,10002910 <__adddf3+0x830>
10002788:	01c007c4 	movi	r7,31
1000278c:	39006b16 	blt	r7,r4,1000293c <__adddf3+0x85c>
10002790:	01c00804 	movi	r7,32
10002794:	390fc83a 	sub	r7,r7,r4
10002798:	29d4983a 	sll	r10,r5,r7
1000279c:	8912d83a 	srl	r9,r17,r4
100027a0:	89ce983a 	sll	r7,r17,r7
100027a4:	2908d83a 	srl	r4,r5,r4
100027a8:	5262b03a 	or	r17,r10,r9
100027ac:	380ac03a 	cmpne	r5,r7,zero
100027b0:	8962b03a 	or	r17,r17,r5
100027b4:	89a3883a 	add	r17,r17,r6
100027b8:	2211883a 	add	r8,r4,r8
100027bc:	898d803a 	cmpltu	r6,r17,r6
100027c0:	418b883a 	add	r5,r8,r6
100027c4:	1021883a 	mov	r16,r2
100027c8:	003ee706 	br	10002368 <__alt_data_end+0xf8002368>
100027cc:	4184b03a 	or	r2,r8,r6
100027d0:	103e6226 	beq	r2,zero,1000215c <__alt_data_end+0xf800215c>
100027d4:	8987c83a 	sub	r3,r17,r6
100027d8:	88c9803a 	cmpltu	r4,r17,r3
100027dc:	2a05c83a 	sub	r2,r5,r8
100027e0:	1105c83a 	sub	r2,r2,r4
100027e4:	1100202c 	andhi	r4,r2,128
100027e8:	203f0426 	beq	r4,zero,100023fc <__alt_data_end+0xf80023fc>
100027ec:	3463c83a 	sub	r17,r6,r17
100027f0:	414bc83a 	sub	r5,r8,r5
100027f4:	344d803a 	cmpltu	r6,r6,r17
100027f8:	298bc83a 	sub	r5,r5,r6
100027fc:	3825883a 	mov	r18,r7
10002800:	003e5606 	br	1000215c <__alt_data_end+0xf800215c>
10002804:	4184b03a 	or	r2,r8,r6
10002808:	10002b26 	beq	r2,zero,100028b8 <__adddf3+0x7d8>
1000280c:	2804d0fa 	srli	r2,r5,3
10002810:	8822d0fa 	srli	r17,r17,3
10002814:	280a977a 	slli	r5,r5,29
10002818:	10c0022c 	andhi	r3,r2,8
1000281c:	2c62b03a 	or	r17,r5,r17
10002820:	18000826 	beq	r3,zero,10002844 <__adddf3+0x764>
10002824:	4008d0fa 	srli	r4,r8,3
10002828:	20c0022c 	andhi	r3,r4,8
1000282c:	1800051e 	bne	r3,zero,10002844 <__adddf3+0x764>
10002830:	300cd0fa 	srli	r6,r6,3
10002834:	4010977a 	slli	r8,r8,29
10002838:	2005883a 	mov	r2,r4
1000283c:	3825883a 	mov	r18,r7
10002840:	41a2b03a 	or	r17,r8,r6
10002844:	880ad77a 	srli	r5,r17,29
10002848:	100490fa 	slli	r2,r2,3
1000284c:	882290fa 	slli	r17,r17,3
10002850:	0401ffc4 	movi	r16,2047
10002854:	288ab03a 	or	r5,r5,r2
10002858:	003e4006 	br	1000215c <__alt_data_end+0xf800215c>
1000285c:	01c1ffc4 	movi	r7,2047
10002860:	11ffc71e 	bne	r2,r7,10002780 <__alt_data_end+0xf8002780>
10002864:	400b883a 	mov	r5,r8
10002868:	3023883a 	mov	r17,r6
1000286c:	1021883a 	mov	r16,r2
10002870:	003e3a06 	br	1000215c <__alt_data_end+0xf800215c>
10002874:	10002d26 	beq	r2,zero,1000292c <__adddf3+0x84c>
10002878:	4184b03a 	or	r2,r8,r6
1000287c:	10000e26 	beq	r2,zero,100028b8 <__adddf3+0x7d8>
10002880:	2804d0fa 	srli	r2,r5,3
10002884:	8822d0fa 	srli	r17,r17,3
10002888:	280a977a 	slli	r5,r5,29
1000288c:	10c0022c 	andhi	r3,r2,8
10002890:	2c62b03a 	or	r17,r5,r17
10002894:	183feb26 	beq	r3,zero,10002844 <__alt_data_end+0xf8002844>
10002898:	4008d0fa 	srli	r4,r8,3
1000289c:	20c0022c 	andhi	r3,r4,8
100028a0:	183fe81e 	bne	r3,zero,10002844 <__alt_data_end+0xf8002844>
100028a4:	300cd0fa 	srli	r6,r6,3
100028a8:	4010977a 	slli	r8,r8,29
100028ac:	2005883a 	mov	r2,r4
100028b0:	41a2b03a 	or	r17,r8,r6
100028b4:	003fe306 	br	10002844 <__alt_data_end+0xf8002844>
100028b8:	0401ffc4 	movi	r16,2047
100028bc:	003e2706 	br	1000215c <__alt_data_end+0xf800215c>
100028c0:	0011883a 	mov	r8,zero
100028c4:	003f8306 	br	100026d4 <__alt_data_end+0xf80026d4>
100028c8:	193ff804 	addi	r4,r3,-32
100028cc:	02400804 	movi	r9,32
100028d0:	2908d83a 	srl	r4,r5,r4
100028d4:	1a402526 	beq	r3,r9,1000296c <__adddf3+0x88c>
100028d8:	02401004 	movi	r9,64
100028dc:	48c7c83a 	sub	r3,r9,r3
100028e0:	28ca983a 	sll	r5,r5,r3
100028e4:	2c62b03a 	or	r17,r5,r17
100028e8:	8822c03a 	cmpne	r17,r17,zero
100028ec:	8922b03a 	or	r17,r17,r4
100028f0:	0007883a 	mov	r3,zero
100028f4:	003f2f06 	br	100025b4 <__alt_data_end+0xf80025b4>
100028f8:	01402034 	movhi	r5,128
100028fc:	0007883a 	mov	r3,zero
10002900:	297fffc4 	addi	r5,r5,-1
10002904:	047ffe04 	movi	r17,-8
10002908:	0401ffc4 	movi	r16,2047
1000290c:	003e7306 	br	100022dc <__alt_data_end+0xf80022dc>
10002910:	2c62b03a 	or	r17,r5,r17
10002914:	8822c03a 	cmpne	r17,r17,zero
10002918:	0009883a 	mov	r4,zero
1000291c:	003fa506 	br	100027b4 <__alt_data_end+0xf80027b4>
10002920:	400b883a 	mov	r5,r8
10002924:	3023883a 	mov	r17,r6
10002928:	003e0c06 	br	1000215c <__alt_data_end+0xf800215c>
1000292c:	400b883a 	mov	r5,r8
10002930:	3023883a 	mov	r17,r6
10002934:	0401ffc4 	movi	r16,2047
10002938:	003e0806 	br	1000215c <__alt_data_end+0xf800215c>
1000293c:	21fff804 	addi	r7,r4,-32
10002940:	02400804 	movi	r9,32
10002944:	29ced83a 	srl	r7,r5,r7
10002948:	22400a26 	beq	r4,r9,10002974 <__adddf3+0x894>
1000294c:	02401004 	movi	r9,64
10002950:	4909c83a 	sub	r4,r9,r4
10002954:	290a983a 	sll	r5,r5,r4
10002958:	2c62b03a 	or	r17,r5,r17
1000295c:	8822c03a 	cmpne	r17,r17,zero
10002960:	89e2b03a 	or	r17,r17,r7
10002964:	0009883a 	mov	r4,zero
10002968:	003f9206 	br	100027b4 <__alt_data_end+0xf80027b4>
1000296c:	000b883a 	mov	r5,zero
10002970:	003fdc06 	br	100028e4 <__alt_data_end+0xf80028e4>
10002974:	000b883a 	mov	r5,zero
10002978:	003ff706 	br	10002958 <__alt_data_end+0xf8002958>

1000297c <__subdf3>:
1000297c:	00c00434 	movhi	r3,16
10002980:	18ffffc4 	addi	r3,r3,-1
10002984:	defffb04 	addi	sp,sp,-20
10002988:	28d2703a 	and	r9,r5,r3
1000298c:	3814d53a 	srli	r10,r7,20
10002990:	38c6703a 	and	r3,r7,r3
10002994:	3004d77a 	srli	r2,r6,29
10002998:	dc800215 	stw	r18,8(sp)
1000299c:	dc000015 	stw	r16,0(sp)
100029a0:	2824d7fa 	srli	r18,r5,31
100029a4:	2820d53a 	srli	r16,r5,20
100029a8:	481290fa 	slli	r9,r9,3
100029ac:	200ad77a 	srli	r5,r4,29
100029b0:	180690fa 	slli	r3,r3,3
100029b4:	dc400115 	stw	r17,4(sp)
100029b8:	dfc00415 	stw	ra,16(sp)
100029bc:	202290fa 	slli	r17,r4,3
100029c0:	dcc00315 	stw	r19,12(sp)
100029c4:	5281ffcc 	andi	r10,r10,2047
100029c8:	0101ffc4 	movi	r4,2047
100029cc:	9011883a 	mov	r8,r18
100029d0:	8401ffcc 	andi	r16,r16,2047
100029d4:	94803fcc 	andi	r18,r18,255
100029d8:	494ab03a 	or	r5,r9,r5
100029dc:	380ed7fa 	srli	r7,r7,31
100029e0:	1886b03a 	or	r3,r3,r2
100029e4:	300c90fa 	slli	r6,r6,3
100029e8:	51009026 	beq	r10,r4,10002c2c <__subdf3+0x2b0>
100029ec:	39c0005c 	xori	r7,r7,1
100029f0:	8285c83a 	sub	r2,r16,r10
100029f4:	91c06f26 	beq	r18,r7,10002bb4 <__subdf3+0x238>
100029f8:	0080b10e 	bge	zero,r2,10002cc0 <__subdf3+0x344>
100029fc:	50002a1e 	bne	r10,zero,10002aa8 <__subdf3+0x12c>
10002a00:	1988b03a 	or	r4,r3,r6
10002a04:	2000941e 	bne	r4,zero,10002c58 <__subdf3+0x2dc>
10002a08:	888001cc 	andi	r2,r17,7
10002a0c:	10005b26 	beq	r2,zero,10002b7c <__subdf3+0x200>
10002a10:	88c003cc 	andi	r3,r17,15
10002a14:	00800104 	movi	r2,4
10002a18:	18805826 	beq	r3,r2,10002b7c <__subdf3+0x200>
10002a1c:	88c00104 	addi	r3,r17,4
10002a20:	1c63803a 	cmpltu	r17,r3,r17
10002a24:	2c4b883a 	add	r5,r5,r17
10002a28:	2880202c 	andhi	r2,r5,128
10002a2c:	9200004c 	andi	r8,r18,1
10002a30:	1823883a 	mov	r17,r3
10002a34:	10005426 	beq	r2,zero,10002b88 <__subdf3+0x20c>
10002a38:	84000044 	addi	r16,r16,1
10002a3c:	0081ffc4 	movi	r2,2047
10002a40:	8080bf26 	beq	r16,r2,10002d40 <__subdf3+0x3c4>
10002a44:	013fe034 	movhi	r4,65408
10002a48:	213fffc4 	addi	r4,r4,-1
10002a4c:	290a703a 	and	r5,r5,r4
10002a50:	2804977a 	slli	r2,r5,29
10002a54:	280a927a 	slli	r5,r5,9
10002a58:	8822d0fa 	srli	r17,r17,3
10002a5c:	8401ffcc 	andi	r16,r16,2047
10002a60:	2808d33a 	srli	r4,r5,12
10002a64:	1444b03a 	or	r2,r2,r17
10002a68:	8401ffcc 	andi	r16,r16,2047
10002a6c:	800a953a 	slli	r5,r16,20
10002a70:	40c03fcc 	andi	r3,r8,255
10002a74:	04000434 	movhi	r16,16
10002a78:	180697fa 	slli	r3,r3,31
10002a7c:	843fffc4 	addi	r16,r16,-1
10002a80:	2420703a 	and	r16,r4,r16
10002a84:	8160b03a 	or	r16,r16,r5
10002a88:	80c6b03a 	or	r3,r16,r3
10002a8c:	dfc00417 	ldw	ra,16(sp)
10002a90:	dcc00317 	ldw	r19,12(sp)
10002a94:	dc800217 	ldw	r18,8(sp)
10002a98:	dc400117 	ldw	r17,4(sp)
10002a9c:	dc000017 	ldw	r16,0(sp)
10002aa0:	dec00504 	addi	sp,sp,20
10002aa4:	f800283a 	ret
10002aa8:	0101ffc4 	movi	r4,2047
10002aac:	813fd626 	beq	r16,r4,10002a08 <__alt_data_end+0xf8002a08>
10002ab0:	18c02034 	orhi	r3,r3,128
10002ab4:	01000e04 	movi	r4,56
10002ab8:	2080a416 	blt	r4,r2,10002d4c <__subdf3+0x3d0>
10002abc:	010007c4 	movi	r4,31
10002ac0:	2080c716 	blt	r4,r2,10002de0 <__subdf3+0x464>
10002ac4:	01000804 	movi	r4,32
10002ac8:	2089c83a 	sub	r4,r4,r2
10002acc:	1910983a 	sll	r8,r3,r4
10002ad0:	308ed83a 	srl	r7,r6,r2
10002ad4:	3108983a 	sll	r4,r6,r4
10002ad8:	1884d83a 	srl	r2,r3,r2
10002adc:	41ccb03a 	or	r6,r8,r7
10002ae0:	2008c03a 	cmpne	r4,r4,zero
10002ae4:	310cb03a 	or	r6,r6,r4
10002ae8:	898dc83a 	sub	r6,r17,r6
10002aec:	89a3803a 	cmpltu	r17,r17,r6
10002af0:	288bc83a 	sub	r5,r5,r2
10002af4:	2c4bc83a 	sub	r5,r5,r17
10002af8:	3023883a 	mov	r17,r6
10002afc:	2880202c 	andhi	r2,r5,128
10002b00:	10006b26 	beq	r2,zero,10002cb0 <__subdf3+0x334>
10002b04:	04c02034 	movhi	r19,128
10002b08:	9cffffc4 	addi	r19,r19,-1
10002b0c:	2ce6703a 	and	r19,r5,r19
10002b10:	98007c26 	beq	r19,zero,10002d04 <__subdf3+0x388>
10002b14:	9809883a 	mov	r4,r19
10002b18:	00033a40 	call	100033a4 <__clzsi2>
10002b1c:	10fffe04 	addi	r3,r2,-8
10002b20:	010007c4 	movi	r4,31
10002b24:	20c07d16 	blt	r4,r3,10002d1c <__subdf3+0x3a0>
10002b28:	01400a04 	movi	r5,40
10002b2c:	2885c83a 	sub	r2,r5,r2
10002b30:	888ad83a 	srl	r5,r17,r2
10002b34:	98e6983a 	sll	r19,r19,r3
10002b38:	88e2983a 	sll	r17,r17,r3
10002b3c:	2ce6b03a 	or	r19,r5,r19
10002b40:	1c007a16 	blt	r3,r16,10002d2c <__subdf3+0x3b0>
10002b44:	1c21c83a 	sub	r16,r3,r16
10002b48:	81400044 	addi	r5,r16,1
10002b4c:	00c007c4 	movi	r3,31
10002b50:	19409616 	blt	r3,r5,10002dac <__subdf3+0x430>
10002b54:	1c21c83a 	sub	r16,r3,r16
10002b58:	8c08983a 	sll	r4,r17,r16
10002b5c:	8946d83a 	srl	r3,r17,r5
10002b60:	9c20983a 	sll	r16,r19,r16
10002b64:	2008c03a 	cmpne	r4,r4,zero
10002b68:	994ad83a 	srl	r5,r19,r5
10002b6c:	1c06b03a 	or	r3,r3,r16
10002b70:	1922b03a 	or	r17,r3,r4
10002b74:	0021883a 	mov	r16,zero
10002b78:	003fa306 	br	10002a08 <__alt_data_end+0xf8002a08>
10002b7c:	2880202c 	andhi	r2,r5,128
10002b80:	9200004c 	andi	r8,r18,1
10002b84:	103fac1e 	bne	r2,zero,10002a38 <__alt_data_end+0xf8002a38>
10002b88:	2804977a 	slli	r2,r5,29
10002b8c:	8822d0fa 	srli	r17,r17,3
10002b90:	00c1ffc4 	movi	r3,2047
10002b94:	280ad0fa 	srli	r5,r5,3
10002b98:	1444b03a 	or	r2,r2,r17
10002b9c:	80c02726 	beq	r16,r3,10002c3c <__subdf3+0x2c0>
10002ba0:	01000434 	movhi	r4,16
10002ba4:	213fffc4 	addi	r4,r4,-1
10002ba8:	80e0703a 	and	r16,r16,r3
10002bac:	2908703a 	and	r4,r5,r4
10002bb0:	003fad06 	br	10002a68 <__alt_data_end+0xf8002a68>
10002bb4:	0080690e 	bge	zero,r2,10002d5c <__subdf3+0x3e0>
10002bb8:	50002f26 	beq	r10,zero,10002c78 <__subdf3+0x2fc>
10002bbc:	0101ffc4 	movi	r4,2047
10002bc0:	813f9126 	beq	r16,r4,10002a08 <__alt_data_end+0xf8002a08>
10002bc4:	18c02034 	orhi	r3,r3,128
10002bc8:	01000e04 	movi	r4,56
10002bcc:	2080b00e 	bge	r4,r2,10002e90 <__subdf3+0x514>
10002bd0:	198cb03a 	or	r6,r3,r6
10002bd4:	300ec03a 	cmpne	r7,r6,zero
10002bd8:	0005883a 	mov	r2,zero
10002bdc:	3c4f883a 	add	r7,r7,r17
10002be0:	3c63803a 	cmpltu	r17,r7,r17
10002be4:	114b883a 	add	r5,r2,r5
10002be8:	2c4b883a 	add	r5,r5,r17
10002bec:	3823883a 	mov	r17,r7
10002bf0:	2880202c 	andhi	r2,r5,128
10002bf4:	10002e26 	beq	r2,zero,10002cb0 <__subdf3+0x334>
10002bf8:	84000044 	addi	r16,r16,1
10002bfc:	0081ffc4 	movi	r2,2047
10002c00:	8080de26 	beq	r16,r2,10002f7c <__subdf3+0x600>
10002c04:	00bfe034 	movhi	r2,65408
10002c08:	10bfffc4 	addi	r2,r2,-1
10002c0c:	288a703a 	and	r5,r5,r2
10002c10:	880cd07a 	srli	r6,r17,1
10002c14:	280897fa 	slli	r4,r5,31
10002c18:	88c0004c 	andi	r3,r17,1
10002c1c:	30e2b03a 	or	r17,r6,r3
10002c20:	280ad07a 	srli	r5,r5,1
10002c24:	8922b03a 	or	r17,r17,r4
10002c28:	003f7706 	br	10002a08 <__alt_data_end+0xf8002a08>
10002c2c:	1984b03a 	or	r2,r3,r6
10002c30:	103f6e26 	beq	r2,zero,100029ec <__alt_data_end+0xf80029ec>
10002c34:	39c03fcc 	andi	r7,r7,255
10002c38:	003f6d06 	br	100029f0 <__alt_data_end+0xf80029f0>
10002c3c:	1146b03a 	or	r3,r2,r5
10002c40:	18003f26 	beq	r3,zero,10002d40 <__subdf3+0x3c4>
10002c44:	00c00434 	movhi	r3,16
10002c48:	29000234 	orhi	r4,r5,8
10002c4c:	18ffffc4 	addi	r3,r3,-1
10002c50:	20c8703a 	and	r4,r4,r3
10002c54:	003f8406 	br	10002a68 <__alt_data_end+0xf8002a68>
10002c58:	10bfffc4 	addi	r2,r2,-1
10002c5c:	1000501e 	bne	r2,zero,10002da0 <__subdf3+0x424>
10002c60:	898fc83a 	sub	r7,r17,r6
10002c64:	89e3803a 	cmpltu	r17,r17,r7
10002c68:	28cbc83a 	sub	r5,r5,r3
10002c6c:	2c4bc83a 	sub	r5,r5,r17
10002c70:	3823883a 	mov	r17,r7
10002c74:	003fa106 	br	10002afc <__alt_data_end+0xf8002afc>
10002c78:	1988b03a 	or	r4,r3,r6
10002c7c:	203f6226 	beq	r4,zero,10002a08 <__alt_data_end+0xf8002a08>
10002c80:	10bfffc4 	addi	r2,r2,-1
10002c84:	10009b1e 	bne	r2,zero,10002ef4 <__subdf3+0x578>
10002c88:	344d883a 	add	r6,r6,r17
10002c8c:	3463803a 	cmpltu	r17,r6,r17
10002c90:	194b883a 	add	r5,r3,r5
10002c94:	2c4b883a 	add	r5,r5,r17
10002c98:	3023883a 	mov	r17,r6
10002c9c:	003fd406 	br	10002bf0 <__alt_data_end+0xf8002bf0>
10002ca0:	1106b03a 	or	r3,r2,r4
10002ca4:	1800b426 	beq	r3,zero,10002f78 <__subdf3+0x5fc>
10002ca8:	100b883a 	mov	r5,r2
10002cac:	2023883a 	mov	r17,r4
10002cb0:	888001cc 	andi	r2,r17,7
10002cb4:	103f561e 	bne	r2,zero,10002a10 <__alt_data_end+0xf8002a10>
10002cb8:	9200004c 	andi	r8,r18,1
10002cbc:	003fb206 	br	10002b88 <__alt_data_end+0xf8002b88>
10002cc0:	1000531e 	bne	r2,zero,10002e10 <__subdf3+0x494>
10002cc4:	80800044 	addi	r2,r16,1
10002cc8:	1081ffcc 	andi	r2,r2,2047
10002ccc:	01000044 	movi	r4,1
10002cd0:	2080a00e 	bge	r4,r2,10002f54 <__subdf3+0x5d8>
10002cd4:	8985c83a 	sub	r2,r17,r6
10002cd8:	8889803a 	cmpltu	r4,r17,r2
10002cdc:	28e7c83a 	sub	r19,r5,r3
10002ce0:	9927c83a 	sub	r19,r19,r4
10002ce4:	9900202c 	andhi	r4,r19,128
10002ce8:	20006226 	beq	r4,zero,10002e74 <__subdf3+0x4f8>
10002cec:	3463c83a 	sub	r17,r6,r17
10002cf0:	194bc83a 	sub	r5,r3,r5
10002cf4:	344d803a 	cmpltu	r6,r6,r17
10002cf8:	29a7c83a 	sub	r19,r5,r6
10002cfc:	3825883a 	mov	r18,r7
10002d00:	983f841e 	bne	r19,zero,10002b14 <__alt_data_end+0xf8002b14>
10002d04:	8809883a 	mov	r4,r17
10002d08:	00033a40 	call	100033a4 <__clzsi2>
10002d0c:	10800804 	addi	r2,r2,32
10002d10:	10fffe04 	addi	r3,r2,-8
10002d14:	010007c4 	movi	r4,31
10002d18:	20ff830e 	bge	r4,r3,10002b28 <__alt_data_end+0xf8002b28>
10002d1c:	14fff604 	addi	r19,r2,-40
10002d20:	8ce6983a 	sll	r19,r17,r19
10002d24:	0023883a 	mov	r17,zero
10002d28:	1c3f860e 	bge	r3,r16,10002b44 <__alt_data_end+0xf8002b44>
10002d2c:	017fe034 	movhi	r5,65408
10002d30:	297fffc4 	addi	r5,r5,-1
10002d34:	80e1c83a 	sub	r16,r16,r3
10002d38:	994a703a 	and	r5,r19,r5
10002d3c:	003f3206 	br	10002a08 <__alt_data_end+0xf8002a08>
10002d40:	0009883a 	mov	r4,zero
10002d44:	0005883a 	mov	r2,zero
10002d48:	003f4706 	br	10002a68 <__alt_data_end+0xf8002a68>
10002d4c:	198cb03a 	or	r6,r3,r6
10002d50:	300cc03a 	cmpne	r6,r6,zero
10002d54:	0005883a 	mov	r2,zero
10002d58:	003f6306 	br	10002ae8 <__alt_data_end+0xf8002ae8>
10002d5c:	10009d1e 	bne	r2,zero,10002fd4 <__subdf3+0x658>
10002d60:	81c00044 	addi	r7,r16,1
10002d64:	3881ffcc 	andi	r2,r7,2047
10002d68:	02400044 	movi	r9,1
10002d6c:	4880680e 	bge	r9,r2,10002f10 <__subdf3+0x594>
10002d70:	0081ffc4 	movi	r2,2047
10002d74:	3880ae26 	beq	r7,r2,10003030 <__subdf3+0x6b4>
10002d78:	344d883a 	add	r6,r6,r17
10002d7c:	3463803a 	cmpltu	r17,r6,r17
10002d80:	194b883a 	add	r5,r3,r5
10002d84:	2c4b883a 	add	r5,r5,r17
10002d88:	282297fa 	slli	r17,r5,31
10002d8c:	300cd07a 	srli	r6,r6,1
10002d90:	280ad07a 	srli	r5,r5,1
10002d94:	3821883a 	mov	r16,r7
10002d98:	89a2b03a 	or	r17,r17,r6
10002d9c:	003f1a06 	br	10002a08 <__alt_data_end+0xf8002a08>
10002da0:	0101ffc4 	movi	r4,2047
10002da4:	813f431e 	bne	r16,r4,10002ab4 <__alt_data_end+0xf8002ab4>
10002da8:	003f1706 	br	10002a08 <__alt_data_end+0xf8002a08>
10002dac:	80bff844 	addi	r2,r16,-31
10002db0:	00c00804 	movi	r3,32
10002db4:	9884d83a 	srl	r2,r19,r2
10002db8:	28c05126 	beq	r5,r3,10002f00 <__subdf3+0x584>
10002dbc:	00c00fc4 	movi	r3,63
10002dc0:	1c21c83a 	sub	r16,r3,r16
10002dc4:	9c26983a 	sll	r19,r19,r16
10002dc8:	9c62b03a 	or	r17,r19,r17
10002dcc:	8822c03a 	cmpne	r17,r17,zero
10002dd0:	88a2b03a 	or	r17,r17,r2
10002dd4:	000b883a 	mov	r5,zero
10002dd8:	0021883a 	mov	r16,zero
10002ddc:	003fb406 	br	10002cb0 <__alt_data_end+0xf8002cb0>
10002de0:	113ff804 	addi	r4,r2,-32
10002de4:	01c00804 	movi	r7,32
10002de8:	1908d83a 	srl	r4,r3,r4
10002dec:	11c04626 	beq	r2,r7,10002f08 <__subdf3+0x58c>
10002df0:	01c01004 	movi	r7,64
10002df4:	3885c83a 	sub	r2,r7,r2
10002df8:	1884983a 	sll	r2,r3,r2
10002dfc:	118cb03a 	or	r6,r2,r6
10002e00:	300cc03a 	cmpne	r6,r6,zero
10002e04:	310cb03a 	or	r6,r6,r4
10002e08:	0005883a 	mov	r2,zero
10002e0c:	003f3606 	br	10002ae8 <__alt_data_end+0xf8002ae8>
10002e10:	80002b26 	beq	r16,zero,10002ec0 <__subdf3+0x544>
10002e14:	0101ffc4 	movi	r4,2047
10002e18:	51006926 	beq	r10,r4,10002fc0 <__subdf3+0x644>
10002e1c:	0085c83a 	sub	r2,zero,r2
10002e20:	29402034 	orhi	r5,r5,128
10002e24:	01000e04 	movi	r4,56
10002e28:	20807d16 	blt	r4,r2,10003020 <__subdf3+0x6a4>
10002e2c:	010007c4 	movi	r4,31
10002e30:	2080d916 	blt	r4,r2,10003198 <__subdf3+0x81c>
10002e34:	01000804 	movi	r4,32
10002e38:	2089c83a 	sub	r4,r4,r2
10002e3c:	2912983a 	sll	r9,r5,r4
10002e40:	8890d83a 	srl	r8,r17,r2
10002e44:	8908983a 	sll	r4,r17,r4
10002e48:	2884d83a 	srl	r2,r5,r2
10002e4c:	4a22b03a 	or	r17,r9,r8
10002e50:	2008c03a 	cmpne	r4,r4,zero
10002e54:	8922b03a 	or	r17,r17,r4
10002e58:	3463c83a 	sub	r17,r6,r17
10002e5c:	1885c83a 	sub	r2,r3,r2
10002e60:	344d803a 	cmpltu	r6,r6,r17
10002e64:	118bc83a 	sub	r5,r2,r6
10002e68:	5021883a 	mov	r16,r10
10002e6c:	3825883a 	mov	r18,r7
10002e70:	003f2206 	br	10002afc <__alt_data_end+0xf8002afc>
10002e74:	9886b03a 	or	r3,r19,r2
10002e78:	18001c1e 	bne	r3,zero,10002eec <__subdf3+0x570>
10002e7c:	0011883a 	mov	r8,zero
10002e80:	000b883a 	mov	r5,zero
10002e84:	0023883a 	mov	r17,zero
10002e88:	0021883a 	mov	r16,zero
10002e8c:	003f3e06 	br	10002b88 <__alt_data_end+0xf8002b88>
10002e90:	010007c4 	movi	r4,31
10002e94:	20803c16 	blt	r4,r2,10002f88 <__subdf3+0x60c>
10002e98:	01000804 	movi	r4,32
10002e9c:	2089c83a 	sub	r4,r4,r2
10002ea0:	1912983a 	sll	r9,r3,r4
10002ea4:	308ed83a 	srl	r7,r6,r2
10002ea8:	3108983a 	sll	r4,r6,r4
10002eac:	1884d83a 	srl	r2,r3,r2
10002eb0:	49ceb03a 	or	r7,r9,r7
10002eb4:	2008c03a 	cmpne	r4,r4,zero
10002eb8:	390eb03a 	or	r7,r7,r4
10002ebc:	003f4706 	br	10002bdc <__alt_data_end+0xf8002bdc>
10002ec0:	2c48b03a 	or	r4,r5,r17
10002ec4:	20003e26 	beq	r4,zero,10002fc0 <__subdf3+0x644>
10002ec8:	0084303a 	nor	r2,zero,r2
10002ecc:	10003a1e 	bne	r2,zero,10002fb8 <__subdf3+0x63c>
10002ed0:	3463c83a 	sub	r17,r6,r17
10002ed4:	194bc83a 	sub	r5,r3,r5
10002ed8:	344d803a 	cmpltu	r6,r6,r17
10002edc:	298bc83a 	sub	r5,r5,r6
10002ee0:	5021883a 	mov	r16,r10
10002ee4:	3825883a 	mov	r18,r7
10002ee8:	003f0406 	br	10002afc <__alt_data_end+0xf8002afc>
10002eec:	1023883a 	mov	r17,r2
10002ef0:	003f0706 	br	10002b10 <__alt_data_end+0xf8002b10>
10002ef4:	0101ffc4 	movi	r4,2047
10002ef8:	813f331e 	bne	r16,r4,10002bc8 <__alt_data_end+0xf8002bc8>
10002efc:	003ec206 	br	10002a08 <__alt_data_end+0xf8002a08>
10002f00:	0027883a 	mov	r19,zero
10002f04:	003fb006 	br	10002dc8 <__alt_data_end+0xf8002dc8>
10002f08:	0005883a 	mov	r2,zero
10002f0c:	003fbb06 	br	10002dfc <__alt_data_end+0xf8002dfc>
10002f10:	2c44b03a 	or	r2,r5,r17
10002f14:	80008b1e 	bne	r16,zero,10003144 <__subdf3+0x7c8>
10002f18:	1000b526 	beq	r2,zero,100031f0 <__subdf3+0x874>
10002f1c:	1984b03a 	or	r2,r3,r6
10002f20:	103eb926 	beq	r2,zero,10002a08 <__alt_data_end+0xf8002a08>
10002f24:	3449883a 	add	r4,r6,r17
10002f28:	2463803a 	cmpltu	r17,r4,r17
10002f2c:	194b883a 	add	r5,r3,r5
10002f30:	2c4b883a 	add	r5,r5,r17
10002f34:	2880202c 	andhi	r2,r5,128
10002f38:	2023883a 	mov	r17,r4
10002f3c:	103f5c26 	beq	r2,zero,10002cb0 <__alt_data_end+0xf8002cb0>
10002f40:	00bfe034 	movhi	r2,65408
10002f44:	10bfffc4 	addi	r2,r2,-1
10002f48:	4821883a 	mov	r16,r9
10002f4c:	288a703a 	and	r5,r5,r2
10002f50:	003ead06 	br	10002a08 <__alt_data_end+0xf8002a08>
10002f54:	2c44b03a 	or	r2,r5,r17
10002f58:	8000291e 	bne	r16,zero,10003000 <__subdf3+0x684>
10002f5c:	10004f1e 	bne	r2,zero,1000309c <__subdf3+0x720>
10002f60:	1984b03a 	or	r2,r3,r6
10002f64:	10000426 	beq	r2,zero,10002f78 <__subdf3+0x5fc>
10002f68:	180b883a 	mov	r5,r3
10002f6c:	3023883a 	mov	r17,r6
10002f70:	3825883a 	mov	r18,r7
10002f74:	003ea406 	br	10002a08 <__alt_data_end+0xf8002a08>
10002f78:	0011883a 	mov	r8,zero
10002f7c:	000b883a 	mov	r5,zero
10002f80:	0023883a 	mov	r17,zero
10002f84:	003f0006 	br	10002b88 <__alt_data_end+0xf8002b88>
10002f88:	11fff804 	addi	r7,r2,-32
10002f8c:	19c8d83a 	srl	r4,r3,r7
10002f90:	01c00804 	movi	r7,32
10002f94:	11c07e26 	beq	r2,r7,10003190 <__subdf3+0x814>
10002f98:	01c01004 	movi	r7,64
10002f9c:	3885c83a 	sub	r2,r7,r2
10002fa0:	1884983a 	sll	r2,r3,r2
10002fa4:	118cb03a 	or	r6,r2,r6
10002fa8:	300ec03a 	cmpne	r7,r6,zero
10002fac:	390eb03a 	or	r7,r7,r4
10002fb0:	0005883a 	mov	r2,zero
10002fb4:	003f0906 	br	10002bdc <__alt_data_end+0xf8002bdc>
10002fb8:	0101ffc4 	movi	r4,2047
10002fbc:	513f991e 	bne	r10,r4,10002e24 <__alt_data_end+0xf8002e24>
10002fc0:	180b883a 	mov	r5,r3
10002fc4:	3023883a 	mov	r17,r6
10002fc8:	5021883a 	mov	r16,r10
10002fcc:	3825883a 	mov	r18,r7
10002fd0:	003e8d06 	br	10002a08 <__alt_data_end+0xf8002a08>
10002fd4:	80001a1e 	bne	r16,zero,10003040 <__subdf3+0x6c4>
10002fd8:	2c48b03a 	or	r4,r5,r17
10002fdc:	20005526 	beq	r4,zero,10003134 <__subdf3+0x7b8>
10002fe0:	0084303a 	nor	r2,zero,r2
10002fe4:	1000511e 	bne	r2,zero,1000312c <__subdf3+0x7b0>
10002fe8:	89a3883a 	add	r17,r17,r6
10002fec:	194b883a 	add	r5,r3,r5
10002ff0:	898d803a 	cmpltu	r6,r17,r6
10002ff4:	298b883a 	add	r5,r5,r6
10002ff8:	5021883a 	mov	r16,r10
10002ffc:	003efc06 	br	10002bf0 <__alt_data_end+0xf8002bf0>
10003000:	1000341e 	bne	r2,zero,100030d4 <__subdf3+0x758>
10003004:	1984b03a 	or	r2,r3,r6
10003008:	10006f26 	beq	r2,zero,100031c8 <__subdf3+0x84c>
1000300c:	180b883a 	mov	r5,r3
10003010:	3023883a 	mov	r17,r6
10003014:	3825883a 	mov	r18,r7
10003018:	0401ffc4 	movi	r16,2047
1000301c:	003e7a06 	br	10002a08 <__alt_data_end+0xf8002a08>
10003020:	2c62b03a 	or	r17,r5,r17
10003024:	8822c03a 	cmpne	r17,r17,zero
10003028:	0005883a 	mov	r2,zero
1000302c:	003f8a06 	br	10002e58 <__alt_data_end+0xf8002e58>
10003030:	3821883a 	mov	r16,r7
10003034:	000b883a 	mov	r5,zero
10003038:	0023883a 	mov	r17,zero
1000303c:	003ed206 	br	10002b88 <__alt_data_end+0xf8002b88>
10003040:	0101ffc4 	movi	r4,2047
10003044:	51003b26 	beq	r10,r4,10003134 <__subdf3+0x7b8>
10003048:	0085c83a 	sub	r2,zero,r2
1000304c:	29402034 	orhi	r5,r5,128
10003050:	01000e04 	movi	r4,56
10003054:	20806216 	blt	r4,r2,100031e0 <__subdf3+0x864>
10003058:	010007c4 	movi	r4,31
1000305c:	20806b16 	blt	r4,r2,1000320c <__subdf3+0x890>
10003060:	01000804 	movi	r4,32
10003064:	2089c83a 	sub	r4,r4,r2
10003068:	2912983a 	sll	r9,r5,r4
1000306c:	888ed83a 	srl	r7,r17,r2
10003070:	8908983a 	sll	r4,r17,r4
10003074:	2884d83a 	srl	r2,r5,r2
10003078:	49e2b03a 	or	r17,r9,r7
1000307c:	2008c03a 	cmpne	r4,r4,zero
10003080:	8922b03a 	or	r17,r17,r4
10003084:	89a3883a 	add	r17,r17,r6
10003088:	10c5883a 	add	r2,r2,r3
1000308c:	898d803a 	cmpltu	r6,r17,r6
10003090:	118b883a 	add	r5,r2,r6
10003094:	5021883a 	mov	r16,r10
10003098:	003ed506 	br	10002bf0 <__alt_data_end+0xf8002bf0>
1000309c:	1984b03a 	or	r2,r3,r6
100030a0:	103e5926 	beq	r2,zero,10002a08 <__alt_data_end+0xf8002a08>
100030a4:	8989c83a 	sub	r4,r17,r6
100030a8:	8911803a 	cmpltu	r8,r17,r4
100030ac:	28c5c83a 	sub	r2,r5,r3
100030b0:	1205c83a 	sub	r2,r2,r8
100030b4:	1200202c 	andhi	r8,r2,128
100030b8:	403ef926 	beq	r8,zero,10002ca0 <__alt_data_end+0xf8002ca0>
100030bc:	3463c83a 	sub	r17,r6,r17
100030c0:	194bc83a 	sub	r5,r3,r5
100030c4:	344d803a 	cmpltu	r6,r6,r17
100030c8:	298bc83a 	sub	r5,r5,r6
100030cc:	3825883a 	mov	r18,r7
100030d0:	003e4d06 	br	10002a08 <__alt_data_end+0xf8002a08>
100030d4:	1984b03a 	or	r2,r3,r6
100030d8:	10002b26 	beq	r2,zero,10003188 <__subdf3+0x80c>
100030dc:	2808d0fa 	srli	r4,r5,3
100030e0:	8822d0fa 	srli	r17,r17,3
100030e4:	280a977a 	slli	r5,r5,29
100030e8:	2080022c 	andhi	r2,r4,8
100030ec:	2c62b03a 	or	r17,r5,r17
100030f0:	10000826 	beq	r2,zero,10003114 <__subdf3+0x798>
100030f4:	1810d0fa 	srli	r8,r3,3
100030f8:	4080022c 	andhi	r2,r8,8
100030fc:	1000051e 	bne	r2,zero,10003114 <__subdf3+0x798>
10003100:	300cd0fa 	srli	r6,r6,3
10003104:	1804977a 	slli	r2,r3,29
10003108:	4009883a 	mov	r4,r8
1000310c:	3825883a 	mov	r18,r7
10003110:	11a2b03a 	or	r17,r2,r6
10003114:	880ad77a 	srli	r5,r17,29
10003118:	200890fa 	slli	r4,r4,3
1000311c:	882290fa 	slli	r17,r17,3
10003120:	0401ffc4 	movi	r16,2047
10003124:	290ab03a 	or	r5,r5,r4
10003128:	003e3706 	br	10002a08 <__alt_data_end+0xf8002a08>
1000312c:	0101ffc4 	movi	r4,2047
10003130:	513fc71e 	bne	r10,r4,10003050 <__alt_data_end+0xf8003050>
10003134:	180b883a 	mov	r5,r3
10003138:	3023883a 	mov	r17,r6
1000313c:	5021883a 	mov	r16,r10
10003140:	003e3106 	br	10002a08 <__alt_data_end+0xf8002a08>
10003144:	10002d26 	beq	r2,zero,100031fc <__subdf3+0x880>
10003148:	1984b03a 	or	r2,r3,r6
1000314c:	10000e26 	beq	r2,zero,10003188 <__subdf3+0x80c>
10003150:	2808d0fa 	srli	r4,r5,3
10003154:	8822d0fa 	srli	r17,r17,3
10003158:	280a977a 	slli	r5,r5,29
1000315c:	2080022c 	andhi	r2,r4,8
10003160:	2c62b03a 	or	r17,r5,r17
10003164:	103feb26 	beq	r2,zero,10003114 <__alt_data_end+0xf8003114>
10003168:	180ed0fa 	srli	r7,r3,3
1000316c:	3880022c 	andhi	r2,r7,8
10003170:	103fe81e 	bne	r2,zero,10003114 <__alt_data_end+0xf8003114>
10003174:	300cd0fa 	srli	r6,r6,3
10003178:	1804977a 	slli	r2,r3,29
1000317c:	3809883a 	mov	r4,r7
10003180:	11a2b03a 	or	r17,r2,r6
10003184:	003fe306 	br	10003114 <__alt_data_end+0xf8003114>
10003188:	0401ffc4 	movi	r16,2047
1000318c:	003e1e06 	br	10002a08 <__alt_data_end+0xf8002a08>
10003190:	0005883a 	mov	r2,zero
10003194:	003f8306 	br	10002fa4 <__alt_data_end+0xf8002fa4>
10003198:	113ff804 	addi	r4,r2,-32
1000319c:	02000804 	movi	r8,32
100031a0:	2908d83a 	srl	r4,r5,r4
100031a4:	12002526 	beq	r2,r8,1000323c <__subdf3+0x8c0>
100031a8:	02001004 	movi	r8,64
100031ac:	4085c83a 	sub	r2,r8,r2
100031b0:	288a983a 	sll	r5,r5,r2
100031b4:	2c62b03a 	or	r17,r5,r17
100031b8:	8822c03a 	cmpne	r17,r17,zero
100031bc:	8922b03a 	or	r17,r17,r4
100031c0:	0005883a 	mov	r2,zero
100031c4:	003f2406 	br	10002e58 <__alt_data_end+0xf8002e58>
100031c8:	01402034 	movhi	r5,128
100031cc:	0011883a 	mov	r8,zero
100031d0:	297fffc4 	addi	r5,r5,-1
100031d4:	047ffe04 	movi	r17,-8
100031d8:	0401ffc4 	movi	r16,2047
100031dc:	003e6a06 	br	10002b88 <__alt_data_end+0xf8002b88>
100031e0:	2c62b03a 	or	r17,r5,r17
100031e4:	8822c03a 	cmpne	r17,r17,zero
100031e8:	0005883a 	mov	r2,zero
100031ec:	003fa506 	br	10003084 <__alt_data_end+0xf8003084>
100031f0:	180b883a 	mov	r5,r3
100031f4:	3023883a 	mov	r17,r6
100031f8:	003e0306 	br	10002a08 <__alt_data_end+0xf8002a08>
100031fc:	180b883a 	mov	r5,r3
10003200:	3023883a 	mov	r17,r6
10003204:	0401ffc4 	movi	r16,2047
10003208:	003dff06 	br	10002a08 <__alt_data_end+0xf8002a08>
1000320c:	113ff804 	addi	r4,r2,-32
10003210:	01c00804 	movi	r7,32
10003214:	2908d83a 	srl	r4,r5,r4
10003218:	11c00a26 	beq	r2,r7,10003244 <__subdf3+0x8c8>
1000321c:	01c01004 	movi	r7,64
10003220:	3885c83a 	sub	r2,r7,r2
10003224:	288a983a 	sll	r5,r5,r2
10003228:	2c62b03a 	or	r17,r5,r17
1000322c:	8822c03a 	cmpne	r17,r17,zero
10003230:	8922b03a 	or	r17,r17,r4
10003234:	0005883a 	mov	r2,zero
10003238:	003f9206 	br	10003084 <__alt_data_end+0xf8003084>
1000323c:	000b883a 	mov	r5,zero
10003240:	003fdc06 	br	100031b4 <__alt_data_end+0xf80031b4>
10003244:	000b883a 	mov	r5,zero
10003248:	003ff706 	br	10003228 <__alt_data_end+0xf8003228>

1000324c <__fixdfsi>:
1000324c:	2806d53a 	srli	r3,r5,20
10003250:	00800434 	movhi	r2,16
10003254:	10bfffc4 	addi	r2,r2,-1
10003258:	18c1ffcc 	andi	r3,r3,2047
1000325c:	0180ff84 	movi	r6,1022
10003260:	2884703a 	and	r2,r5,r2
10003264:	280ad7fa 	srli	r5,r5,31
10003268:	30c0130e 	bge	r6,r3,100032b8 <__fixdfsi+0x6c>
1000326c:	01810744 	movi	r6,1053
10003270:	30c00d16 	blt	r6,r3,100032a8 <__fixdfsi+0x5c>
10003274:	01810cc4 	movi	r6,1075
10003278:	30cdc83a 	sub	r6,r6,r3
1000327c:	01c007c4 	movi	r7,31
10003280:	10800434 	orhi	r2,r2,16
10003284:	39800e0e 	bge	r7,r6,100032c0 <__fixdfsi+0x74>
10003288:	010104c4 	movi	r4,1043
1000328c:	20c7c83a 	sub	r3,r4,r3
10003290:	10c6d83a 	srl	r3,r2,r3
10003294:	29403fcc 	andi	r5,r5,255
10003298:	0145c83a 	sub	r2,zero,r5
1000329c:	1884f03a 	xor	r2,r3,r2
100032a0:	1145883a 	add	r2,r2,r5
100032a4:	f800283a 	ret
100032a8:	00a00034 	movhi	r2,32768
100032ac:	10bfffc4 	addi	r2,r2,-1
100032b0:	2885883a 	add	r2,r5,r2
100032b4:	f800283a 	ret
100032b8:	0005883a 	mov	r2,zero
100032bc:	f800283a 	ret
100032c0:	18fefb44 	addi	r3,r3,-1043
100032c4:	2188d83a 	srl	r4,r4,r6
100032c8:	10c6983a 	sll	r3,r2,r3
100032cc:	20c6b03a 	or	r3,r4,r3
100032d0:	003ff006 	br	10003294 <__alt_data_end+0xf8003294>

100032d4 <__floatsidf>:
100032d4:	defffd04 	addi	sp,sp,-12
100032d8:	dc400115 	stw	r17,4(sp)
100032dc:	dfc00215 	stw	ra,8(sp)
100032e0:	dc000015 	stw	r16,0(sp)
100032e4:	2023883a 	mov	r17,r4
100032e8:	20001426 	beq	r4,zero,1000333c <__floatsidf+0x68>
100032ec:	2020d7fa 	srli	r16,r4,31
100032f0:	80000126 	beq	r16,zero,100032f8 <__floatsidf+0x24>
100032f4:	0123c83a 	sub	r17,zero,r4
100032f8:	8809883a 	mov	r4,r17
100032fc:	00033a40 	call	100033a4 <__clzsi2>
10003300:	01410784 	movi	r5,1054
10003304:	00c00284 	movi	r3,10
10003308:	288bc83a 	sub	r5,r5,r2
1000330c:	18801c16 	blt	r3,r2,10003380 <__floatsidf+0xac>
10003310:	00c002c4 	movi	r3,11
10003314:	1887c83a 	sub	r3,r3,r2
10003318:	88c8d83a 	srl	r4,r17,r3
1000331c:	00c00434 	movhi	r3,16
10003320:	18ffffc4 	addi	r3,r3,-1
10003324:	10800544 	addi	r2,r2,21
10003328:	20c8703a 	and	r4,r4,r3
1000332c:	8884983a 	sll	r2,r17,r2
10003330:	28c1ffcc 	andi	r3,r5,2047
10003334:	800d883a 	mov	r6,r16
10003338:	00000406 	br	1000334c <__floatsidf+0x78>
1000333c:	000d883a 	mov	r6,zero
10003340:	0007883a 	mov	r3,zero
10003344:	0009883a 	mov	r4,zero
10003348:	0005883a 	mov	r2,zero
1000334c:	180a953a 	slli	r5,r3,20
10003350:	31803fcc 	andi	r6,r6,255
10003354:	00c00434 	movhi	r3,16
10003358:	300c97fa 	slli	r6,r6,31
1000335c:	18ffffc4 	addi	r3,r3,-1
10003360:	20c6703a 	and	r3,r4,r3
10003364:	1946b03a 	or	r3,r3,r5
10003368:	1986b03a 	or	r3,r3,r6
1000336c:	dfc00217 	ldw	ra,8(sp)
10003370:	dc400117 	ldw	r17,4(sp)
10003374:	dc000017 	ldw	r16,0(sp)
10003378:	dec00304 	addi	sp,sp,12
1000337c:	f800283a 	ret
10003380:	10fffd44 	addi	r3,r2,-11
10003384:	88c8983a 	sll	r4,r17,r3
10003388:	00800434 	movhi	r2,16
1000338c:	10bfffc4 	addi	r2,r2,-1
10003390:	2088703a 	and	r4,r4,r2
10003394:	28c1ffcc 	andi	r3,r5,2047
10003398:	800d883a 	mov	r6,r16
1000339c:	0005883a 	mov	r2,zero
100033a0:	003fea06 	br	1000334c <__alt_data_end+0xf800334c>

100033a4 <__clzsi2>:
100033a4:	00bfffd4 	movui	r2,65535
100033a8:	11000b36 	bltu	r2,r4,100033d8 <__clzsi2+0x34>
100033ac:	00803fc4 	movi	r2,255
100033b0:	1100122e 	bgeu	r2,r4,100033fc <__clzsi2+0x58>
100033b4:	00c00204 	movi	r3,8
100033b8:	01400604 	movi	r5,24
100033bc:	20c8d83a 	srl	r4,r4,r3
100033c0:	00840074 	movhi	r2,4097
100033c4:	10a20404 	addi	r2,r2,-30704
100033c8:	1109883a 	add	r4,r2,r4
100033cc:	20800003 	ldbu	r2,0(r4)
100033d0:	2885c83a 	sub	r2,r5,r2
100033d4:	f800283a 	ret
100033d8:	00804034 	movhi	r2,256
100033dc:	10bfffc4 	addi	r2,r2,-1
100033e0:	11000336 	bltu	r2,r4,100033f0 <__clzsi2+0x4c>
100033e4:	00c00404 	movi	r3,16
100033e8:	180b883a 	mov	r5,r3
100033ec:	003ff306 	br	100033bc <__alt_data_end+0xf80033bc>
100033f0:	00c00604 	movi	r3,24
100033f4:	01400204 	movi	r5,8
100033f8:	003ff006 	br	100033bc <__alt_data_end+0xf80033bc>
100033fc:	0007883a 	mov	r3,zero
10003400:	01400804 	movi	r5,32
10003404:	003fed06 	br	100033bc <__alt_data_end+0xf80033bc>

10003408 <_puts_r>:
10003408:	defff604 	addi	sp,sp,-40
1000340c:	dc000715 	stw	r16,28(sp)
10003410:	2021883a 	mov	r16,r4
10003414:	2809883a 	mov	r4,r5
10003418:	dc400815 	stw	r17,32(sp)
1000341c:	dfc00915 	stw	ra,36(sp)
10003420:	2823883a 	mov	r17,r5
10003424:	00035500 	call	10003550 <strlen>
10003428:	00c40074 	movhi	r3,4097
1000342c:	18e8e104 	addi	r3,r3,-23676
10003430:	18c00017 	ldw	r3,0(r3)
10003434:	11000044 	addi	r4,r2,1
10003438:	d8800115 	stw	r2,4(sp)
1000343c:	18c00217 	ldw	r3,8(r3)
10003440:	01440074 	movhi	r5,4097
10003444:	29624404 	addi	r5,r5,-30448
10003448:	1880030b 	ldhu	r2,12(r3)
1000344c:	d9400215 	stw	r5,8(sp)
10003450:	d9000615 	stw	r4,24(sp)
10003454:	01400044 	movi	r5,1
10003458:	01000084 	movi	r4,2
1000345c:	d9000515 	stw	r4,20(sp)
10003460:	dc400015 	stw	r17,0(sp)
10003464:	d9400315 	stw	r5,12(sp)
10003468:	dec00415 	stw	sp,16(sp)
1000346c:	1108000c 	andi	r4,r2,8192
10003470:	2000061e 	bne	r4,zero,1000348c <_puts_r+0x84>
10003474:	19401917 	ldw	r5,100(r3)
10003478:	0137ffc4 	movi	r4,-8193
1000347c:	10880014 	ori	r2,r2,8192
10003480:	2908703a 	and	r4,r5,r4
10003484:	1880030d 	sth	r2,12(r3)
10003488:	19001915 	stw	r4,100(r3)
1000348c:	81400217 	ldw	r5,8(r16)
10003490:	8009883a 	mov	r4,r16
10003494:	d9800404 	addi	r6,sp,16
10003498:	00035e80 	call	100035e8 <__sfvwrite_r>
1000349c:	1000061e 	bne	r2,zero,100034b8 <_puts_r+0xb0>
100034a0:	00800284 	movi	r2,10
100034a4:	dfc00917 	ldw	ra,36(sp)
100034a8:	dc400817 	ldw	r17,32(sp)
100034ac:	dc000717 	ldw	r16,28(sp)
100034b0:	dec00a04 	addi	sp,sp,40
100034b4:	f800283a 	ret
100034b8:	00bfffc4 	movi	r2,-1
100034bc:	003ff906 	br	100034a4 <__alt_data_end+0xf80034a4>

100034c0 <puts>:
100034c0:	00840074 	movhi	r2,4097
100034c4:	10a8e104 	addi	r2,r2,-23676
100034c8:	200b883a 	mov	r5,r4
100034cc:	11000017 	ldw	r4,0(r2)
100034d0:	00034081 	jmpi	10003408 <_puts_r>

100034d4 <srand>:
100034d4:	00840074 	movhi	r2,4097
100034d8:	10a8e104 	addi	r2,r2,-23676
100034dc:	10800017 	ldw	r2,0(r2)
100034e0:	11002915 	stw	r4,164(r2)
100034e4:	10002a15 	stw	zero,168(r2)
100034e8:	f800283a 	ret

100034ec <rand>:
100034ec:	00840074 	movhi	r2,4097
100034f0:	defffe04 	addi	sp,sp,-8
100034f4:	10a8e104 	addi	r2,r2,-23676
100034f8:	dc000015 	stw	r16,0(sp)
100034fc:	14000017 	ldw	r16,0(r2)
10003500:	dfc00115 	stw	ra,4(sp)
10003504:	01932574 	movhi	r6,19605
10003508:	81002917 	ldw	r4,164(r16)
1000350c:	81402a17 	ldw	r5,168(r16)
10003510:	01d614b4 	movhi	r7,22610
10003514:	319fcb44 	addi	r6,r6,32557
10003518:	39fd0b44 	addi	r7,r7,-3027
1000351c:	0005fa40 	call	10005fa4 <__muldi3>
10003520:	11000044 	addi	r4,r2,1
10003524:	2085803a 	cmpltu	r2,r4,r2
10003528:	10c7883a 	add	r3,r2,r3
1000352c:	00a00034 	movhi	r2,32768
10003530:	10bfffc4 	addi	r2,r2,-1
10003534:	1884703a 	and	r2,r3,r2
10003538:	81002915 	stw	r4,164(r16)
1000353c:	80c02a15 	stw	r3,168(r16)
10003540:	dfc00117 	ldw	ra,4(sp)
10003544:	dc000017 	ldw	r16,0(sp)
10003548:	dec00204 	addi	sp,sp,8
1000354c:	f800283a 	ret

10003550 <strlen>:
10003550:	208000cc 	andi	r2,r4,3
10003554:	10002026 	beq	r2,zero,100035d8 <strlen+0x88>
10003558:	20800007 	ldb	r2,0(r4)
1000355c:	10002026 	beq	r2,zero,100035e0 <strlen+0x90>
10003560:	2005883a 	mov	r2,r4
10003564:	00000206 	br	10003570 <strlen+0x20>
10003568:	10c00007 	ldb	r3,0(r2)
1000356c:	18001826 	beq	r3,zero,100035d0 <strlen+0x80>
10003570:	10800044 	addi	r2,r2,1
10003574:	10c000cc 	andi	r3,r2,3
10003578:	183ffb1e 	bne	r3,zero,10003568 <__alt_data_end+0xf8003568>
1000357c:	10c00017 	ldw	r3,0(r2)
10003580:	01ffbff4 	movhi	r7,65279
10003584:	39ffbfc4 	addi	r7,r7,-257
10003588:	00ca303a 	nor	r5,zero,r3
1000358c:	01a02074 	movhi	r6,32897
10003590:	19c7883a 	add	r3,r3,r7
10003594:	31a02004 	addi	r6,r6,-32640
10003598:	1946703a 	and	r3,r3,r5
1000359c:	1986703a 	and	r3,r3,r6
100035a0:	1800091e 	bne	r3,zero,100035c8 <strlen+0x78>
100035a4:	10800104 	addi	r2,r2,4
100035a8:	10c00017 	ldw	r3,0(r2)
100035ac:	19cb883a 	add	r5,r3,r7
100035b0:	00c6303a 	nor	r3,zero,r3
100035b4:	28c6703a 	and	r3,r5,r3
100035b8:	1986703a 	and	r3,r3,r6
100035bc:	183ff926 	beq	r3,zero,100035a4 <__alt_data_end+0xf80035a4>
100035c0:	00000106 	br	100035c8 <strlen+0x78>
100035c4:	10800044 	addi	r2,r2,1
100035c8:	10c00007 	ldb	r3,0(r2)
100035cc:	183ffd1e 	bne	r3,zero,100035c4 <__alt_data_end+0xf80035c4>
100035d0:	1105c83a 	sub	r2,r2,r4
100035d4:	f800283a 	ret
100035d8:	2005883a 	mov	r2,r4
100035dc:	003fe706 	br	1000357c <__alt_data_end+0xf800357c>
100035e0:	0005883a 	mov	r2,zero
100035e4:	f800283a 	ret

100035e8 <__sfvwrite_r>:
100035e8:	30800217 	ldw	r2,8(r6)
100035ec:	10004526 	beq	r2,zero,10003704 <__sfvwrite_r+0x11c>
100035f0:	28c0030b 	ldhu	r3,12(r5)
100035f4:	defff404 	addi	sp,sp,-48
100035f8:	dd400715 	stw	r21,28(sp)
100035fc:	dcc00515 	stw	r19,20(sp)
10003600:	dc000215 	stw	r16,8(sp)
10003604:	dfc00b15 	stw	ra,44(sp)
10003608:	df000a15 	stw	fp,40(sp)
1000360c:	ddc00915 	stw	r23,36(sp)
10003610:	dd800815 	stw	r22,32(sp)
10003614:	dd000615 	stw	r20,24(sp)
10003618:	dc800415 	stw	r18,16(sp)
1000361c:	dc400315 	stw	r17,12(sp)
10003620:	1880020c 	andi	r2,r3,8
10003624:	2821883a 	mov	r16,r5
10003628:	202b883a 	mov	r21,r4
1000362c:	3027883a 	mov	r19,r6
10003630:	10002526 	beq	r2,zero,100036c8 <__sfvwrite_r+0xe0>
10003634:	28800417 	ldw	r2,16(r5)
10003638:	10002326 	beq	r2,zero,100036c8 <__sfvwrite_r+0xe0>
1000363c:	1880008c 	andi	r2,r3,2
10003640:	9c400017 	ldw	r17,0(r19)
10003644:	10003126 	beq	r2,zero,1000370c <__sfvwrite_r+0x124>
10003648:	0029883a 	mov	r20,zero
1000364c:	0025883a 	mov	r18,zero
10003650:	05810004 	movi	r22,1024
10003654:	a00d883a 	mov	r6,r20
10003658:	a809883a 	mov	r4,r21
1000365c:	90002526 	beq	r18,zero,100036f4 <__sfvwrite_r+0x10c>
10003660:	900f883a 	mov	r7,r18
10003664:	81400717 	ldw	r5,28(r16)
10003668:	b480012e 	bgeu	r22,r18,10003670 <__sfvwrite_r+0x88>
1000366c:	01c10004 	movi	r7,1024
10003670:	80800917 	ldw	r2,36(r16)
10003674:	103ee83a 	callr	r2
10003678:	0080510e 	bge	zero,r2,100037c0 <__sfvwrite_r+0x1d8>
1000367c:	98c00217 	ldw	r3,8(r19)
10003680:	a0a9883a 	add	r20,r20,r2
10003684:	90a5c83a 	sub	r18,r18,r2
10003688:	1885c83a 	sub	r2,r3,r2
1000368c:	98800215 	stw	r2,8(r19)
10003690:	103ff01e 	bne	r2,zero,10003654 <__alt_data_end+0xf8003654>
10003694:	0005883a 	mov	r2,zero
10003698:	dfc00b17 	ldw	ra,44(sp)
1000369c:	df000a17 	ldw	fp,40(sp)
100036a0:	ddc00917 	ldw	r23,36(sp)
100036a4:	dd800817 	ldw	r22,32(sp)
100036a8:	dd400717 	ldw	r21,28(sp)
100036ac:	dd000617 	ldw	r20,24(sp)
100036b0:	dcc00517 	ldw	r19,20(sp)
100036b4:	dc800417 	ldw	r18,16(sp)
100036b8:	dc400317 	ldw	r17,12(sp)
100036bc:	dc000217 	ldw	r16,8(sp)
100036c0:	dec00c04 	addi	sp,sp,48
100036c4:	f800283a 	ret
100036c8:	a809883a 	mov	r4,r21
100036cc:	800b883a 	mov	r5,r16
100036d0:	0004ba40 	call	10004ba4 <__swsetup_r>
100036d4:	80c0030b 	ldhu	r3,12(r16)
100036d8:	103fd826 	beq	r2,zero,1000363c <__alt_data_end+0xf800363c>
100036dc:	18c01014 	ori	r3,r3,64
100036e0:	80c0030d 	sth	r3,12(r16)
100036e4:	00c00244 	movi	r3,9
100036e8:	00bfffc4 	movi	r2,-1
100036ec:	a8c00015 	stw	r3,0(r21)
100036f0:	003fe906 	br	10003698 <__alt_data_end+0xf8003698>
100036f4:	8d000017 	ldw	r20,0(r17)
100036f8:	8c800117 	ldw	r18,4(r17)
100036fc:	8c400204 	addi	r17,r17,8
10003700:	003fd406 	br	10003654 <__alt_data_end+0xf8003654>
10003704:	0005883a 	mov	r2,zero
10003708:	f800283a 	ret
1000370c:	1880004c 	andi	r2,r3,1
10003710:	1000301e 	bne	r2,zero,100037d4 <__sfvwrite_r+0x1ec>
10003714:	002f883a 	mov	r23,zero
10003718:	0025883a 	mov	r18,zero
1000371c:	90001c26 	beq	r18,zero,10003790 <__sfvwrite_r+0x1a8>
10003720:	1880800c 	andi	r2,r3,512
10003724:	85000217 	ldw	r20,8(r16)
10003728:	10006c26 	beq	r2,zero,100038dc <__sfvwrite_r+0x2f4>
1000372c:	a02d883a 	mov	r22,r20
10003730:	95008536 	bltu	r18,r20,10003948 <__sfvwrite_r+0x360>
10003734:	1881200c 	andi	r2,r3,1152
10003738:	10009d1e 	bne	r2,zero,100039b0 <__sfvwrite_r+0x3c8>
1000373c:	81000017 	ldw	r4,0(r16)
10003740:	a039883a 	mov	fp,r20
10003744:	9029883a 	mov	r20,r18
10003748:	b80b883a 	mov	r5,r23
1000374c:	b00d883a 	mov	r6,r22
10003750:	00044540 	call	10004454 <memmove>
10003754:	80c00217 	ldw	r3,8(r16)
10003758:	81000017 	ldw	r4,0(r16)
1000375c:	9005883a 	mov	r2,r18
10003760:	1f39c83a 	sub	fp,r3,fp
10003764:	258f883a 	add	r7,r4,r22
10003768:	87000215 	stw	fp,8(r16)
1000376c:	81c00015 	stw	r7,0(r16)
10003770:	98c00217 	ldw	r3,8(r19)
10003774:	b8af883a 	add	r23,r23,r2
10003778:	90a5c83a 	sub	r18,r18,r2
1000377c:	1d05c83a 	sub	r2,r3,r20
10003780:	98800215 	stw	r2,8(r19)
10003784:	103fc326 	beq	r2,zero,10003694 <__alt_data_end+0xf8003694>
10003788:	80c0030b 	ldhu	r3,12(r16)
1000378c:	903fe41e 	bne	r18,zero,10003720 <__alt_data_end+0xf8003720>
10003790:	8dc00017 	ldw	r23,0(r17)
10003794:	8c800117 	ldw	r18,4(r17)
10003798:	8c400204 	addi	r17,r17,8
1000379c:	003fdf06 	br	1000371c <__alt_data_end+0xf800371c>
100037a0:	00045b00 	call	100045b0 <_realloc_r>
100037a4:	102d883a 	mov	r22,r2
100037a8:	1000a01e 	bne	r2,zero,10003a2c <__sfvwrite_r+0x444>
100037ac:	81400417 	ldw	r5,16(r16)
100037b0:	a809883a 	mov	r4,r21
100037b4:	00054040 	call	10005404 <_free_r>
100037b8:	00800304 	movi	r2,12
100037bc:	a8800015 	stw	r2,0(r21)
100037c0:	80c0030b 	ldhu	r3,12(r16)
100037c4:	00bfffc4 	movi	r2,-1
100037c8:	18c01014 	ori	r3,r3,64
100037cc:	80c0030d 	sth	r3,12(r16)
100037d0:	003fb106 	br	10003698 <__alt_data_end+0xf8003698>
100037d4:	0029883a 	mov	r20,zero
100037d8:	0011883a 	mov	r8,zero
100037dc:	0039883a 	mov	fp,zero
100037e0:	0025883a 	mov	r18,zero
100037e4:	90001f26 	beq	r18,zero,10003864 <__sfvwrite_r+0x27c>
100037e8:	40006826 	beq	r8,zero,1000398c <__sfvwrite_r+0x3a4>
100037ec:	a02f883a 	mov	r23,r20
100037f0:	9500012e 	bgeu	r18,r20,100037f8 <__sfvwrite_r+0x210>
100037f4:	902f883a 	mov	r23,r18
100037f8:	81000017 	ldw	r4,0(r16)
100037fc:	80800417 	ldw	r2,16(r16)
10003800:	b82d883a 	mov	r22,r23
10003804:	81800217 	ldw	r6,8(r16)
10003808:	81c00517 	ldw	r7,20(r16)
1000380c:	1100022e 	bgeu	r2,r4,10003818 <__sfvwrite_r+0x230>
10003810:	31c7883a 	add	r3,r6,r7
10003814:	1dc01816 	blt	r3,r23,10003878 <__sfvwrite_r+0x290>
10003818:	b9c03f16 	blt	r23,r7,10003918 <__sfvwrite_r+0x330>
1000381c:	80800917 	ldw	r2,36(r16)
10003820:	81400717 	ldw	r5,28(r16)
10003824:	a809883a 	mov	r4,r21
10003828:	da000115 	stw	r8,4(sp)
1000382c:	e00d883a 	mov	r6,fp
10003830:	103ee83a 	callr	r2
10003834:	102d883a 	mov	r22,r2
10003838:	da000117 	ldw	r8,4(sp)
1000383c:	00bfe00e 	bge	zero,r2,100037c0 <__alt_data_end+0xf80037c0>
10003840:	a5a9c83a 	sub	r20,r20,r22
10003844:	a0001f26 	beq	r20,zero,100038c4 <__sfvwrite_r+0x2dc>
10003848:	98800217 	ldw	r2,8(r19)
1000384c:	e5b9883a 	add	fp,fp,r22
10003850:	95a5c83a 	sub	r18,r18,r22
10003854:	15adc83a 	sub	r22,r2,r22
10003858:	9d800215 	stw	r22,8(r19)
1000385c:	b03f8d26 	beq	r22,zero,10003694 <__alt_data_end+0xf8003694>
10003860:	903fe11e 	bne	r18,zero,100037e8 <__alt_data_end+0xf80037e8>
10003864:	8f000017 	ldw	fp,0(r17)
10003868:	8c800117 	ldw	r18,4(r17)
1000386c:	0011883a 	mov	r8,zero
10003870:	8c400204 	addi	r17,r17,8
10003874:	003fdb06 	br	100037e4 <__alt_data_end+0xf80037e4>
10003878:	180d883a 	mov	r6,r3
1000387c:	e00b883a 	mov	r5,fp
10003880:	da000115 	stw	r8,4(sp)
10003884:	d8c00015 	stw	r3,0(sp)
10003888:	00044540 	call	10004454 <memmove>
1000388c:	d8c00017 	ldw	r3,0(sp)
10003890:	80800017 	ldw	r2,0(r16)
10003894:	a809883a 	mov	r4,r21
10003898:	800b883a 	mov	r5,r16
1000389c:	10c5883a 	add	r2,r2,r3
100038a0:	80800015 	stw	r2,0(r16)
100038a4:	d8c00015 	stw	r3,0(sp)
100038a8:	0004cd40 	call	10004cd4 <_fflush_r>
100038ac:	d8c00017 	ldw	r3,0(sp)
100038b0:	da000117 	ldw	r8,4(sp)
100038b4:	103fc21e 	bne	r2,zero,100037c0 <__alt_data_end+0xf80037c0>
100038b8:	182d883a 	mov	r22,r3
100038bc:	a5a9c83a 	sub	r20,r20,r22
100038c0:	a03fe11e 	bne	r20,zero,10003848 <__alt_data_end+0xf8003848>
100038c4:	a809883a 	mov	r4,r21
100038c8:	800b883a 	mov	r5,r16
100038cc:	0004cd40 	call	10004cd4 <_fflush_r>
100038d0:	103fbb1e 	bne	r2,zero,100037c0 <__alt_data_end+0xf80037c0>
100038d4:	0011883a 	mov	r8,zero
100038d8:	003fdb06 	br	10003848 <__alt_data_end+0xf8003848>
100038dc:	81000017 	ldw	r4,0(r16)
100038e0:	80800417 	ldw	r2,16(r16)
100038e4:	1100012e 	bgeu	r2,r4,100038ec <__sfvwrite_r+0x304>
100038e8:	a4805a36 	bltu	r20,r18,10003a54 <__sfvwrite_r+0x46c>
100038ec:	81c00517 	ldw	r7,20(r16)
100038f0:	91c01a36 	bltu	r18,r7,1000395c <__sfvwrite_r+0x374>
100038f4:	80800917 	ldw	r2,36(r16)
100038f8:	81400717 	ldw	r5,28(r16)
100038fc:	a809883a 	mov	r4,r21
10003900:	b80d883a 	mov	r6,r23
10003904:	103ee83a 	callr	r2
10003908:	1029883a 	mov	r20,r2
1000390c:	00bfac0e 	bge	zero,r2,100037c0 <__alt_data_end+0xf80037c0>
10003910:	a005883a 	mov	r2,r20
10003914:	003f9606 	br	10003770 <__alt_data_end+0xf8003770>
10003918:	b80d883a 	mov	r6,r23
1000391c:	e00b883a 	mov	r5,fp
10003920:	da000115 	stw	r8,4(sp)
10003924:	00044540 	call	10004454 <memmove>
10003928:	80800217 	ldw	r2,8(r16)
1000392c:	80c00017 	ldw	r3,0(r16)
10003930:	da000117 	ldw	r8,4(sp)
10003934:	15c5c83a 	sub	r2,r2,r23
10003938:	1def883a 	add	r23,r3,r23
1000393c:	80800215 	stw	r2,8(r16)
10003940:	85c00015 	stw	r23,0(r16)
10003944:	003fbe06 	br	10003840 <__alt_data_end+0xf8003840>
10003948:	81000017 	ldw	r4,0(r16)
1000394c:	9039883a 	mov	fp,r18
10003950:	9029883a 	mov	r20,r18
10003954:	902d883a 	mov	r22,r18
10003958:	003f7b06 	br	10003748 <__alt_data_end+0xf8003748>
1000395c:	b80b883a 	mov	r5,r23
10003960:	900d883a 	mov	r6,r18
10003964:	00044540 	call	10004454 <memmove>
10003968:	80c00217 	ldw	r3,8(r16)
1000396c:	80800017 	ldw	r2,0(r16)
10003970:	9029883a 	mov	r20,r18
10003974:	1c87c83a 	sub	r3,r3,r18
10003978:	1485883a 	add	r2,r2,r18
1000397c:	80800015 	stw	r2,0(r16)
10003980:	80c00215 	stw	r3,8(r16)
10003984:	9005883a 	mov	r2,r18
10003988:	003f7906 	br	10003770 <__alt_data_end+0xf8003770>
1000398c:	e009883a 	mov	r4,fp
10003990:	01400284 	movi	r5,10
10003994:	900d883a 	mov	r6,r18
10003998:	00042340 	call	10004234 <memchr>
1000399c:	10003826 	beq	r2,zero,10003a80 <__sfvwrite_r+0x498>
100039a0:	10800044 	addi	r2,r2,1
100039a4:	1729c83a 	sub	r20,r2,fp
100039a8:	02000044 	movi	r8,1
100039ac:	003f8f06 	br	100037ec <__alt_data_end+0xf80037ec>
100039b0:	80800517 	ldw	r2,20(r16)
100039b4:	81400417 	ldw	r5,16(r16)
100039b8:	87000017 	ldw	fp,0(r16)
100039bc:	10a9883a 	add	r20,r2,r2
100039c0:	a085883a 	add	r2,r20,r2
100039c4:	1028d7fa 	srli	r20,r2,31
100039c8:	e179c83a 	sub	fp,fp,r5
100039cc:	e1000044 	addi	r4,fp,1
100039d0:	a085883a 	add	r2,r20,r2
100039d4:	1029d07a 	srai	r20,r2,1
100039d8:	2485883a 	add	r2,r4,r18
100039dc:	a00d883a 	mov	r6,r20
100039e0:	a080022e 	bgeu	r20,r2,100039ec <__sfvwrite_r+0x404>
100039e4:	1029883a 	mov	r20,r2
100039e8:	100d883a 	mov	r6,r2
100039ec:	18c1000c 	andi	r3,r3,1024
100039f0:	a809883a 	mov	r4,r21
100039f4:	183f6a26 	beq	r3,zero,100037a0 <__alt_data_end+0xf80037a0>
100039f8:	300b883a 	mov	r5,r6
100039fc:	0003a8c0 	call	10003a8c <_malloc_r>
10003a00:	102d883a 	mov	r22,r2
10003a04:	103f6c26 	beq	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
10003a08:	81400417 	ldw	r5,16(r16)
10003a0c:	1009883a 	mov	r4,r2
10003a10:	e00d883a 	mov	r6,fp
10003a14:	000431c0 	call	1000431c <memcpy>
10003a18:	8080030b 	ldhu	r2,12(r16)
10003a1c:	00fedfc4 	movi	r3,-1153
10003a20:	10c4703a 	and	r2,r2,r3
10003a24:	10802014 	ori	r2,r2,128
10003a28:	8080030d 	sth	r2,12(r16)
10003a2c:	b709883a 	add	r4,r22,fp
10003a30:	a707c83a 	sub	r3,r20,fp
10003a34:	85800415 	stw	r22,16(r16)
10003a38:	85000515 	stw	r20,20(r16)
10003a3c:	81000015 	stw	r4,0(r16)
10003a40:	9039883a 	mov	fp,r18
10003a44:	80c00215 	stw	r3,8(r16)
10003a48:	9029883a 	mov	r20,r18
10003a4c:	902d883a 	mov	r22,r18
10003a50:	003f3d06 	br	10003748 <__alt_data_end+0xf8003748>
10003a54:	b80b883a 	mov	r5,r23
10003a58:	a00d883a 	mov	r6,r20
10003a5c:	00044540 	call	10004454 <memmove>
10003a60:	80800017 	ldw	r2,0(r16)
10003a64:	a809883a 	mov	r4,r21
10003a68:	800b883a 	mov	r5,r16
10003a6c:	1505883a 	add	r2,r2,r20
10003a70:	80800015 	stw	r2,0(r16)
10003a74:	0004cd40 	call	10004cd4 <_fflush_r>
10003a78:	103fa526 	beq	r2,zero,10003910 <__alt_data_end+0xf8003910>
10003a7c:	003f5006 	br	100037c0 <__alt_data_end+0xf80037c0>
10003a80:	95000044 	addi	r20,r18,1
10003a84:	02000044 	movi	r8,1
10003a88:	003f5806 	br	100037ec <__alt_data_end+0xf80037ec>

10003a8c <_malloc_r>:
10003a8c:	defff504 	addi	sp,sp,-44
10003a90:	dc800315 	stw	r18,12(sp)
10003a94:	dfc00a15 	stw	ra,40(sp)
10003a98:	df000915 	stw	fp,36(sp)
10003a9c:	ddc00815 	stw	r23,32(sp)
10003aa0:	dd800715 	stw	r22,28(sp)
10003aa4:	dd400615 	stw	r21,24(sp)
10003aa8:	dd000515 	stw	r20,20(sp)
10003aac:	dcc00415 	stw	r19,16(sp)
10003ab0:	dc400215 	stw	r17,8(sp)
10003ab4:	dc000115 	stw	r16,4(sp)
10003ab8:	288002c4 	addi	r2,r5,11
10003abc:	00c00584 	movi	r3,22
10003ac0:	2025883a 	mov	r18,r4
10003ac4:	18802a2e 	bgeu	r3,r2,10003b70 <_malloc_r+0xe4>
10003ac8:	047ffe04 	movi	r17,-8
10003acc:	1462703a 	and	r17,r2,r17
10003ad0:	88009e16 	blt	r17,zero,10003d4c <_malloc_r+0x2c0>
10003ad4:	89409d36 	bltu	r17,r5,10003d4c <_malloc_r+0x2c0>
10003ad8:	00066900 	call	10006690 <__malloc_lock>
10003adc:	00807dc4 	movi	r2,503
10003ae0:	14402736 	bltu	r2,r17,10003b80 <_malloc_r+0xf4>
10003ae4:	8806d0fa 	srli	r3,r17,3
10003ae8:	04c40074 	movhi	r19,4097
10003aec:	9ce35c04 	addi	r19,r19,-29328
10003af0:	18c5883a 	add	r2,r3,r3
10003af4:	1085883a 	add	r2,r2,r2
10003af8:	1085883a 	add	r2,r2,r2
10003afc:	9885883a 	add	r2,r19,r2
10003b00:	14000317 	ldw	r16,12(r2)
10003b04:	80814a26 	beq	r16,r2,10004030 <_malloc_r+0x5a4>
10003b08:	80c00117 	ldw	r3,4(r16)
10003b0c:	81000317 	ldw	r4,12(r16)
10003b10:	00bfff04 	movi	r2,-4
10003b14:	1884703a 	and	r2,r3,r2
10003b18:	81400217 	ldw	r5,8(r16)
10003b1c:	8085883a 	add	r2,r16,r2
10003b20:	10c00117 	ldw	r3,4(r2)
10003b24:	29000315 	stw	r4,12(r5)
10003b28:	21400215 	stw	r5,8(r4)
10003b2c:	18c00054 	ori	r3,r3,1
10003b30:	10c00115 	stw	r3,4(r2)
10003b34:	9009883a 	mov	r4,r18
10003b38:	00066b00 	call	100066b0 <__malloc_unlock>
10003b3c:	80800204 	addi	r2,r16,8
10003b40:	dfc00a17 	ldw	ra,40(sp)
10003b44:	df000917 	ldw	fp,36(sp)
10003b48:	ddc00817 	ldw	r23,32(sp)
10003b4c:	dd800717 	ldw	r22,28(sp)
10003b50:	dd400617 	ldw	r21,24(sp)
10003b54:	dd000517 	ldw	r20,20(sp)
10003b58:	dcc00417 	ldw	r19,16(sp)
10003b5c:	dc800317 	ldw	r18,12(sp)
10003b60:	dc400217 	ldw	r17,8(sp)
10003b64:	dc000117 	ldw	r16,4(sp)
10003b68:	dec00b04 	addi	sp,sp,44
10003b6c:	f800283a 	ret
10003b70:	04400404 	movi	r17,16
10003b74:	89407536 	bltu	r17,r5,10003d4c <_malloc_r+0x2c0>
10003b78:	00066900 	call	10006690 <__malloc_lock>
10003b7c:	003fd906 	br	10003ae4 <__alt_data_end+0xf8003ae4>
10003b80:	8806d27a 	srli	r3,r17,9
10003b84:	18007526 	beq	r3,zero,10003d5c <_malloc_r+0x2d0>
10003b88:	00800104 	movi	r2,4
10003b8c:	10c0ef36 	bltu	r2,r3,10003f4c <_malloc_r+0x4c0>
10003b90:	8806d1ba 	srli	r3,r17,6
10003b94:	19c00e04 	addi	r7,r3,56
10003b98:	39cb883a 	add	r5,r7,r7
10003b9c:	04c40074 	movhi	r19,4097
10003ba0:	294b883a 	add	r5,r5,r5
10003ba4:	9ce35c04 	addi	r19,r19,-29328
10003ba8:	294b883a 	add	r5,r5,r5
10003bac:	994b883a 	add	r5,r19,r5
10003bb0:	2c000317 	ldw	r16,12(r5)
10003bb4:	2c000e26 	beq	r5,r16,10003bf0 <_malloc_r+0x164>
10003bb8:	80800117 	ldw	r2,4(r16)
10003bbc:	01bfff04 	movi	r6,-4
10003bc0:	010003c4 	movi	r4,15
10003bc4:	1184703a 	and	r2,r2,r6
10003bc8:	1447c83a 	sub	r3,r2,r17
10003bcc:	20c00716 	blt	r4,r3,10003bec <_malloc_r+0x160>
10003bd0:	1800650e 	bge	r3,zero,10003d68 <_malloc_r+0x2dc>
10003bd4:	84000317 	ldw	r16,12(r16)
10003bd8:	2c000526 	beq	r5,r16,10003bf0 <_malloc_r+0x164>
10003bdc:	80800117 	ldw	r2,4(r16)
10003be0:	1184703a 	and	r2,r2,r6
10003be4:	1447c83a 	sub	r3,r2,r17
10003be8:	20fff90e 	bge	r4,r3,10003bd0 <__alt_data_end+0xf8003bd0>
10003bec:	39ffffc4 	addi	r7,r7,-1
10003bf0:	38c00044 	addi	r3,r7,1
10003bf4:	01840074 	movhi	r6,4097
10003bf8:	9c000417 	ldw	r16,16(r19)
10003bfc:	31a35c04 	addi	r6,r6,-29328
10003c00:	32400204 	addi	r9,r6,8
10003c04:	82410326 	beq	r16,r9,10004014 <_malloc_r+0x588>
10003c08:	81000117 	ldw	r4,4(r16)
10003c0c:	00bfff04 	movi	r2,-4
10003c10:	208e703a 	and	r7,r4,r2
10003c14:	3c45c83a 	sub	r2,r7,r17
10003c18:	010003c4 	movi	r4,15
10003c1c:	2080ee16 	blt	r4,r2,10003fd8 <_malloc_r+0x54c>
10003c20:	32400515 	stw	r9,20(r6)
10003c24:	32400415 	stw	r9,16(r6)
10003c28:	1000510e 	bge	r2,zero,10003d70 <_malloc_r+0x2e4>
10003c2c:	00807fc4 	movi	r2,511
10003c30:	11c0ce36 	bltu	r2,r7,10003f6c <_malloc_r+0x4e0>
10003c34:	3808d0fa 	srli	r4,r7,3
10003c38:	01c00044 	movi	r7,1
10003c3c:	30800117 	ldw	r2,4(r6)
10003c40:	210b883a 	add	r5,r4,r4
10003c44:	294b883a 	add	r5,r5,r5
10003c48:	2009d0ba 	srai	r4,r4,2
10003c4c:	294b883a 	add	r5,r5,r5
10003c50:	298b883a 	add	r5,r5,r6
10003c54:	2a000217 	ldw	r8,8(r5)
10003c58:	3908983a 	sll	r4,r7,r4
10003c5c:	81400315 	stw	r5,12(r16)
10003c60:	82000215 	stw	r8,8(r16)
10003c64:	2088b03a 	or	r4,r4,r2
10003c68:	2c000215 	stw	r16,8(r5)
10003c6c:	31000115 	stw	r4,4(r6)
10003c70:	44000315 	stw	r16,12(r8)
10003c74:	1805d0ba 	srai	r2,r3,2
10003c78:	01400044 	movi	r5,1
10003c7c:	288a983a 	sll	r5,r5,r2
10003c80:	21404336 	bltu	r4,r5,10003d90 <_malloc_r+0x304>
10003c84:	2144703a 	and	r2,r4,r5
10003c88:	10000a1e 	bne	r2,zero,10003cb4 <_malloc_r+0x228>
10003c8c:	00bfff04 	movi	r2,-4
10003c90:	294b883a 	add	r5,r5,r5
10003c94:	1886703a 	and	r3,r3,r2
10003c98:	2144703a 	and	r2,r4,r5
10003c9c:	18c00104 	addi	r3,r3,4
10003ca0:	1000041e 	bne	r2,zero,10003cb4 <_malloc_r+0x228>
10003ca4:	294b883a 	add	r5,r5,r5
10003ca8:	2144703a 	and	r2,r4,r5
10003cac:	18c00104 	addi	r3,r3,4
10003cb0:	103ffc26 	beq	r2,zero,10003ca4 <__alt_data_end+0xf8003ca4>
10003cb4:	023fff04 	movi	r8,-4
10003cb8:	01c003c4 	movi	r7,15
10003cbc:	18c5883a 	add	r2,r3,r3
10003cc0:	1085883a 	add	r2,r2,r2
10003cc4:	1085883a 	add	r2,r2,r2
10003cc8:	9895883a 	add	r10,r19,r2
10003ccc:	52c00304 	addi	r11,r10,12
10003cd0:	1819883a 	mov	r12,r3
10003cd4:	5c000017 	ldw	r16,0(r11)
10003cd8:	59bffd04 	addi	r6,r11,-12
10003cdc:	8180041e 	bne	r16,r6,10003cf0 <_malloc_r+0x264>
10003ce0:	0000ce06 	br	1000401c <_malloc_r+0x590>
10003ce4:	2000d70e 	bge	r4,zero,10004044 <_malloc_r+0x5b8>
10003ce8:	84000317 	ldw	r16,12(r16)
10003cec:	8180cb26 	beq	r16,r6,1000401c <_malloc_r+0x590>
10003cf0:	80800117 	ldw	r2,4(r16)
10003cf4:	1204703a 	and	r2,r2,r8
10003cf8:	1449c83a 	sub	r4,r2,r17
10003cfc:	393ff90e 	bge	r7,r4,10003ce4 <__alt_data_end+0xf8003ce4>
10003d00:	80800317 	ldw	r2,12(r16)
10003d04:	80c00217 	ldw	r3,8(r16)
10003d08:	89400054 	ori	r5,r17,1
10003d0c:	81400115 	stw	r5,4(r16)
10003d10:	18800315 	stw	r2,12(r3)
10003d14:	10c00215 	stw	r3,8(r2)
10003d18:	8463883a 	add	r17,r16,r17
10003d1c:	9c400515 	stw	r17,20(r19)
10003d20:	9c400415 	stw	r17,16(r19)
10003d24:	20800054 	ori	r2,r4,1
10003d28:	88800115 	stw	r2,4(r17)
10003d2c:	8a400315 	stw	r9,12(r17)
10003d30:	8a400215 	stw	r9,8(r17)
10003d34:	8923883a 	add	r17,r17,r4
10003d38:	89000015 	stw	r4,0(r17)
10003d3c:	9009883a 	mov	r4,r18
10003d40:	00066b00 	call	100066b0 <__malloc_unlock>
10003d44:	80800204 	addi	r2,r16,8
10003d48:	003f7d06 	br	10003b40 <__alt_data_end+0xf8003b40>
10003d4c:	00800304 	movi	r2,12
10003d50:	90800015 	stw	r2,0(r18)
10003d54:	0005883a 	mov	r2,zero
10003d58:	003f7906 	br	10003b40 <__alt_data_end+0xf8003b40>
10003d5c:	01401f84 	movi	r5,126
10003d60:	01c00fc4 	movi	r7,63
10003d64:	003f8d06 	br	10003b9c <__alt_data_end+0xf8003b9c>
10003d68:	81000317 	ldw	r4,12(r16)
10003d6c:	003f6a06 	br	10003b18 <__alt_data_end+0xf8003b18>
10003d70:	81c5883a 	add	r2,r16,r7
10003d74:	10c00117 	ldw	r3,4(r2)
10003d78:	9009883a 	mov	r4,r18
10003d7c:	18c00054 	ori	r3,r3,1
10003d80:	10c00115 	stw	r3,4(r2)
10003d84:	00066b00 	call	100066b0 <__malloc_unlock>
10003d88:	80800204 	addi	r2,r16,8
10003d8c:	003f6c06 	br	10003b40 <__alt_data_end+0xf8003b40>
10003d90:	9c000217 	ldw	r16,8(r19)
10003d94:	00bfff04 	movi	r2,-4
10003d98:	85800117 	ldw	r22,4(r16)
10003d9c:	b0ac703a 	and	r22,r22,r2
10003da0:	b4400336 	bltu	r22,r17,10003db0 <_malloc_r+0x324>
10003da4:	b445c83a 	sub	r2,r22,r17
10003da8:	00c003c4 	movi	r3,15
10003dac:	18805d16 	blt	r3,r2,10003f24 <_malloc_r+0x498>
10003db0:	05c40074 	movhi	r23,4097
10003db4:	00840074 	movhi	r2,4097
10003db8:	bde8e204 	addi	r23,r23,-23672
10003dbc:	10af9204 	addi	r2,r2,-16824
10003dc0:	15400017 	ldw	r21,0(r2)
10003dc4:	b9000017 	ldw	r4,0(r23)
10003dc8:	00ffffc4 	movi	r3,-1
10003dcc:	858d883a 	add	r6,r16,r22
10003dd0:	8d6b883a 	add	r21,r17,r21
10003dd4:	20c0e426 	beq	r4,r3,10004168 <_malloc_r+0x6dc>
10003dd8:	ad4403c4 	addi	r21,r21,4111
10003ddc:	00fc0004 	movi	r3,-4096
10003de0:	a8ea703a 	and	r21,r21,r3
10003de4:	9009883a 	mov	r4,r18
10003de8:	a80b883a 	mov	r5,r21
10003dec:	d9800015 	stw	r6,0(sp)
10003df0:	0004b500 	call	10004b50 <_sbrk_r>
10003df4:	00ffffc4 	movi	r3,-1
10003df8:	1029883a 	mov	r20,r2
10003dfc:	d9800017 	ldw	r6,0(sp)
10003e00:	10c0a426 	beq	r2,r3,10004094 <_malloc_r+0x608>
10003e04:	1180a236 	bltu	r2,r6,10004090 <_malloc_r+0x604>
10003e08:	07040074 	movhi	fp,4097
10003e0c:	e72f9b04 	addi	fp,fp,-16788
10003e10:	e0c00017 	ldw	r3,0(fp)
10003e14:	a8c7883a 	add	r3,r21,r3
10003e18:	e0c00015 	stw	r3,0(fp)
10003e1c:	3500da26 	beq	r6,r20,10004188 <_malloc_r+0x6fc>
10003e20:	b9000017 	ldw	r4,0(r23)
10003e24:	00bfffc4 	movi	r2,-1
10003e28:	2080e426 	beq	r4,r2,100041bc <_malloc_r+0x730>
10003e2c:	a185c83a 	sub	r2,r20,r6
10003e30:	1885883a 	add	r2,r3,r2
10003e34:	e0800015 	stw	r2,0(fp)
10003e38:	a0c001cc 	andi	r3,r20,7
10003e3c:	1800b526 	beq	r3,zero,10004114 <_malloc_r+0x688>
10003e40:	a0e9c83a 	sub	r20,r20,r3
10003e44:	00840204 	movi	r2,4104
10003e48:	a5000204 	addi	r20,r20,8
10003e4c:	10c7c83a 	sub	r3,r2,r3
10003e50:	a545883a 	add	r2,r20,r21
10003e54:	1083ffcc 	andi	r2,r2,4095
10003e58:	18abc83a 	sub	r21,r3,r2
10003e5c:	9009883a 	mov	r4,r18
10003e60:	a80b883a 	mov	r5,r21
10003e64:	0004b500 	call	10004b50 <_sbrk_r>
10003e68:	00ffffc4 	movi	r3,-1
10003e6c:	10c0d026 	beq	r2,r3,100041b0 <_malloc_r+0x724>
10003e70:	1507c83a 	sub	r3,r2,r20
10003e74:	a8c7883a 	add	r3,r21,r3
10003e78:	18c00054 	ori	r3,r3,1
10003e7c:	e0800017 	ldw	r2,0(fp)
10003e80:	9d000215 	stw	r20,8(r19)
10003e84:	a0c00115 	stw	r3,4(r20)
10003e88:	a887883a 	add	r3,r21,r2
10003e8c:	e0c00015 	stw	r3,0(fp)
10003e90:	84c00e26 	beq	r16,r19,10003ecc <_malloc_r+0x440>
10003e94:	018003c4 	movi	r6,15
10003e98:	3580a02e 	bgeu	r6,r22,1000411c <_malloc_r+0x690>
10003e9c:	81400117 	ldw	r5,4(r16)
10003ea0:	013ffe04 	movi	r4,-8
10003ea4:	b0bffd04 	addi	r2,r22,-12
10003ea8:	1104703a 	and	r2,r2,r4
10003eac:	2900004c 	andi	r4,r5,1
10003eb0:	1108b03a 	or	r4,r2,r4
10003eb4:	81000115 	stw	r4,4(r16)
10003eb8:	01400144 	movi	r5,5
10003ebc:	8089883a 	add	r4,r16,r2
10003ec0:	21400115 	stw	r5,4(r4)
10003ec4:	21400215 	stw	r5,8(r4)
10003ec8:	3080c036 	bltu	r6,r2,100041cc <_malloc_r+0x740>
10003ecc:	00840074 	movhi	r2,4097
10003ed0:	10af9104 	addi	r2,r2,-16828
10003ed4:	11000017 	ldw	r4,0(r2)
10003ed8:	20c0012e 	bgeu	r4,r3,10003ee0 <_malloc_r+0x454>
10003edc:	10c00015 	stw	r3,0(r2)
10003ee0:	00840074 	movhi	r2,4097
10003ee4:	10af9004 	addi	r2,r2,-16832
10003ee8:	11000017 	ldw	r4,0(r2)
10003eec:	9c000217 	ldw	r16,8(r19)
10003ef0:	20c0012e 	bgeu	r4,r3,10003ef8 <_malloc_r+0x46c>
10003ef4:	10c00015 	stw	r3,0(r2)
10003ef8:	80c00117 	ldw	r3,4(r16)
10003efc:	00bfff04 	movi	r2,-4
10003f00:	1886703a 	and	r3,r3,r2
10003f04:	1c45c83a 	sub	r2,r3,r17
10003f08:	1c400236 	bltu	r3,r17,10003f14 <_malloc_r+0x488>
10003f0c:	00c003c4 	movi	r3,15
10003f10:	18800416 	blt	r3,r2,10003f24 <_malloc_r+0x498>
10003f14:	9009883a 	mov	r4,r18
10003f18:	00066b00 	call	100066b0 <__malloc_unlock>
10003f1c:	0005883a 	mov	r2,zero
10003f20:	003f0706 	br	10003b40 <__alt_data_end+0xf8003b40>
10003f24:	88c00054 	ori	r3,r17,1
10003f28:	80c00115 	stw	r3,4(r16)
10003f2c:	8463883a 	add	r17,r16,r17
10003f30:	10800054 	ori	r2,r2,1
10003f34:	9c400215 	stw	r17,8(r19)
10003f38:	88800115 	stw	r2,4(r17)
10003f3c:	9009883a 	mov	r4,r18
10003f40:	00066b00 	call	100066b0 <__malloc_unlock>
10003f44:	80800204 	addi	r2,r16,8
10003f48:	003efd06 	br	10003b40 <__alt_data_end+0xf8003b40>
10003f4c:	00800504 	movi	r2,20
10003f50:	10c0482e 	bgeu	r2,r3,10004074 <_malloc_r+0x5e8>
10003f54:	00801504 	movi	r2,84
10003f58:	10c06836 	bltu	r2,r3,100040fc <_malloc_r+0x670>
10003f5c:	8806d33a 	srli	r3,r17,12
10003f60:	19c01b84 	addi	r7,r3,110
10003f64:	39cb883a 	add	r5,r7,r7
10003f68:	003f0c06 	br	10003b9c <__alt_data_end+0xf8003b9c>
10003f6c:	3804d27a 	srli	r2,r7,9
10003f70:	01000104 	movi	r4,4
10003f74:	2080422e 	bgeu	r4,r2,10004080 <_malloc_r+0x5f4>
10003f78:	01000504 	movi	r4,20
10003f7c:	20807c36 	bltu	r4,r2,10004170 <_malloc_r+0x6e4>
10003f80:	110016c4 	addi	r4,r2,91
10003f84:	210b883a 	add	r5,r4,r4
10003f88:	294b883a 	add	r5,r5,r5
10003f8c:	294b883a 	add	r5,r5,r5
10003f90:	994b883a 	add	r5,r19,r5
10003f94:	28800217 	ldw	r2,8(r5)
10003f98:	02040074 	movhi	r8,4097
10003f9c:	42235c04 	addi	r8,r8,-29328
10003fa0:	11406326 	beq	r2,r5,10004130 <_malloc_r+0x6a4>
10003fa4:	01bfff04 	movi	r6,-4
10003fa8:	11000117 	ldw	r4,4(r2)
10003fac:	2188703a 	and	r4,r4,r6
10003fb0:	3900022e 	bgeu	r7,r4,10003fbc <_malloc_r+0x530>
10003fb4:	10800217 	ldw	r2,8(r2)
10003fb8:	28bffb1e 	bne	r5,r2,10003fa8 <__alt_data_end+0xf8003fa8>
10003fbc:	11800317 	ldw	r6,12(r2)
10003fc0:	99000117 	ldw	r4,4(r19)
10003fc4:	81800315 	stw	r6,12(r16)
10003fc8:	80800215 	stw	r2,8(r16)
10003fcc:	34000215 	stw	r16,8(r6)
10003fd0:	14000315 	stw	r16,12(r2)
10003fd4:	003f2706 	br	10003c74 <__alt_data_end+0xf8003c74>
10003fd8:	88c00054 	ori	r3,r17,1
10003fdc:	80c00115 	stw	r3,4(r16)
10003fe0:	8463883a 	add	r17,r16,r17
10003fe4:	34400515 	stw	r17,20(r6)
10003fe8:	34400415 	stw	r17,16(r6)
10003fec:	10c00054 	ori	r3,r2,1
10003ff0:	8a400315 	stw	r9,12(r17)
10003ff4:	8a400215 	stw	r9,8(r17)
10003ff8:	88c00115 	stw	r3,4(r17)
10003ffc:	88a3883a 	add	r17,r17,r2
10004000:	88800015 	stw	r2,0(r17)
10004004:	9009883a 	mov	r4,r18
10004008:	00066b00 	call	100066b0 <__malloc_unlock>
1000400c:	80800204 	addi	r2,r16,8
10004010:	003ecb06 	br	10003b40 <__alt_data_end+0xf8003b40>
10004014:	31000117 	ldw	r4,4(r6)
10004018:	003f1606 	br	10003c74 <__alt_data_end+0xf8003c74>
1000401c:	63000044 	addi	r12,r12,1
10004020:	608000cc 	andi	r2,r12,3
10004024:	5ac00204 	addi	r11,r11,8
10004028:	103f2a1e 	bne	r2,zero,10003cd4 <__alt_data_end+0xf8003cd4>
1000402c:	00002106 	br	100040b4 <_malloc_r+0x628>
10004030:	80800204 	addi	r2,r16,8
10004034:	84000517 	ldw	r16,20(r16)
10004038:	143eb31e 	bne	r2,r16,10003b08 <__alt_data_end+0xf8003b08>
1000403c:	18c00084 	addi	r3,r3,2
10004040:	003eec06 	br	10003bf4 <__alt_data_end+0xf8003bf4>
10004044:	8085883a 	add	r2,r16,r2
10004048:	10c00117 	ldw	r3,4(r2)
1000404c:	81000317 	ldw	r4,12(r16)
10004050:	81400217 	ldw	r5,8(r16)
10004054:	18c00054 	ori	r3,r3,1
10004058:	10c00115 	stw	r3,4(r2)
1000405c:	29000315 	stw	r4,12(r5)
10004060:	21400215 	stw	r5,8(r4)
10004064:	9009883a 	mov	r4,r18
10004068:	00066b00 	call	100066b0 <__malloc_unlock>
1000406c:	80800204 	addi	r2,r16,8
10004070:	003eb306 	br	10003b40 <__alt_data_end+0xf8003b40>
10004074:	19c016c4 	addi	r7,r3,91
10004078:	39cb883a 	add	r5,r7,r7
1000407c:	003ec706 	br	10003b9c <__alt_data_end+0xf8003b9c>
10004080:	3804d1ba 	srli	r2,r7,6
10004084:	11000e04 	addi	r4,r2,56
10004088:	210b883a 	add	r5,r4,r4
1000408c:	003fbe06 	br	10003f88 <__alt_data_end+0xf8003f88>
10004090:	84ff5d26 	beq	r16,r19,10003e08 <__alt_data_end+0xf8003e08>
10004094:	9c000217 	ldw	r16,8(r19)
10004098:	00bfff04 	movi	r2,-4
1000409c:	80c00117 	ldw	r3,4(r16)
100040a0:	1886703a 	and	r3,r3,r2
100040a4:	003f9706 	br	10003f04 <__alt_data_end+0xf8003f04>
100040a8:	52800017 	ldw	r10,0(r10)
100040ac:	18ffffc4 	addi	r3,r3,-1
100040b0:	50805c1e 	bne	r10,r2,10004224 <_malloc_r+0x798>
100040b4:	190000cc 	andi	r4,r3,3
100040b8:	50bffe04 	addi	r2,r10,-8
100040bc:	203ffa1e 	bne	r4,zero,100040a8 <__alt_data_end+0xf80040a8>
100040c0:	98800117 	ldw	r2,4(r19)
100040c4:	0146303a 	nor	r3,zero,r5
100040c8:	1884703a 	and	r2,r3,r2
100040cc:	98800115 	stw	r2,4(r19)
100040d0:	294b883a 	add	r5,r5,r5
100040d4:	117f2e36 	bltu	r2,r5,10003d90 <__alt_data_end+0xf8003d90>
100040d8:	283f2d26 	beq	r5,zero,10003d90 <__alt_data_end+0xf8003d90>
100040dc:	1146703a 	and	r3,r2,r5
100040e0:	1800521e 	bne	r3,zero,1000422c <_malloc_r+0x7a0>
100040e4:	6007883a 	mov	r3,r12
100040e8:	294b883a 	add	r5,r5,r5
100040ec:	1148703a 	and	r4,r2,r5
100040f0:	18c00104 	addi	r3,r3,4
100040f4:	203ffc26 	beq	r4,zero,100040e8 <__alt_data_end+0xf80040e8>
100040f8:	003ef006 	br	10003cbc <__alt_data_end+0xf8003cbc>
100040fc:	00805504 	movi	r2,340
10004100:	10c01336 	bltu	r2,r3,10004150 <_malloc_r+0x6c4>
10004104:	8806d3fa 	srli	r3,r17,15
10004108:	19c01dc4 	addi	r7,r3,119
1000410c:	39cb883a 	add	r5,r7,r7
10004110:	003ea206 	br	10003b9c <__alt_data_end+0xf8003b9c>
10004114:	00c40004 	movi	r3,4096
10004118:	003f4d06 	br	10003e50 <__alt_data_end+0xf8003e50>
1000411c:	00800044 	movi	r2,1
10004120:	a0800115 	stw	r2,4(r20)
10004124:	a021883a 	mov	r16,r20
10004128:	0007883a 	mov	r3,zero
1000412c:	003f7506 	br	10003f04 <__alt_data_end+0xf8003f04>
10004130:	200bd0ba 	srai	r5,r4,2
10004134:	01800044 	movi	r6,1
10004138:	41000117 	ldw	r4,4(r8)
1000413c:	314a983a 	sll	r5,r6,r5
10004140:	100d883a 	mov	r6,r2
10004144:	2908b03a 	or	r4,r5,r4
10004148:	41000115 	stw	r4,4(r8)
1000414c:	003f9d06 	br	10003fc4 <__alt_data_end+0xf8003fc4>
10004150:	00815504 	movi	r2,1364
10004154:	10c01336 	bltu	r2,r3,100041a4 <_malloc_r+0x718>
10004158:	8806d4ba 	srli	r3,r17,18
1000415c:	19c01f04 	addi	r7,r3,124
10004160:	39cb883a 	add	r5,r7,r7
10004164:	003e8d06 	br	10003b9c <__alt_data_end+0xf8003b9c>
10004168:	ad400404 	addi	r21,r21,16
1000416c:	003f1d06 	br	10003de4 <__alt_data_end+0xf8003de4>
10004170:	01001504 	movi	r4,84
10004174:	20801c36 	bltu	r4,r2,100041e8 <_malloc_r+0x75c>
10004178:	3804d33a 	srli	r2,r7,12
1000417c:	11001b84 	addi	r4,r2,110
10004180:	210b883a 	add	r5,r4,r4
10004184:	003f8006 	br	10003f88 <__alt_data_end+0xf8003f88>
10004188:	3083ffcc 	andi	r2,r6,4095
1000418c:	103f241e 	bne	r2,zero,10003e20 <__alt_data_end+0xf8003e20>
10004190:	99000217 	ldw	r4,8(r19)
10004194:	ad85883a 	add	r2,r21,r22
10004198:	10800054 	ori	r2,r2,1
1000419c:	20800115 	stw	r2,4(r4)
100041a0:	003f4a06 	br	10003ecc <__alt_data_end+0xf8003ecc>
100041a4:	01403f04 	movi	r5,252
100041a8:	01c01f84 	movi	r7,126
100041ac:	003e7b06 	br	10003b9c <__alt_data_end+0xf8003b9c>
100041b0:	00c00044 	movi	r3,1
100041b4:	002b883a 	mov	r21,zero
100041b8:	003f3006 	br	10003e7c <__alt_data_end+0xf8003e7c>
100041bc:	00840074 	movhi	r2,4097
100041c0:	10a8e204 	addi	r2,r2,-23672
100041c4:	15000015 	stw	r20,0(r2)
100041c8:	003f1b06 	br	10003e38 <__alt_data_end+0xf8003e38>
100041cc:	9009883a 	mov	r4,r18
100041d0:	81400204 	addi	r5,r16,8
100041d4:	00054040 	call	10005404 <_free_r>
100041d8:	00840074 	movhi	r2,4097
100041dc:	10af9b04 	addi	r2,r2,-16788
100041e0:	10c00017 	ldw	r3,0(r2)
100041e4:	003f3906 	br	10003ecc <__alt_data_end+0xf8003ecc>
100041e8:	01005504 	movi	r4,340
100041ec:	20800436 	bltu	r4,r2,10004200 <_malloc_r+0x774>
100041f0:	3804d3fa 	srli	r2,r7,15
100041f4:	11001dc4 	addi	r4,r2,119
100041f8:	210b883a 	add	r5,r4,r4
100041fc:	003f6206 	br	10003f88 <__alt_data_end+0xf8003f88>
10004200:	01015504 	movi	r4,1364
10004204:	20800436 	bltu	r4,r2,10004218 <_malloc_r+0x78c>
10004208:	3804d4ba 	srli	r2,r7,18
1000420c:	11001f04 	addi	r4,r2,124
10004210:	210b883a 	add	r5,r4,r4
10004214:	003f5c06 	br	10003f88 <__alt_data_end+0xf8003f88>
10004218:	01403f04 	movi	r5,252
1000421c:	01001f84 	movi	r4,126
10004220:	003f5906 	br	10003f88 <__alt_data_end+0xf8003f88>
10004224:	98800117 	ldw	r2,4(r19)
10004228:	003fa906 	br	100040d0 <__alt_data_end+0xf80040d0>
1000422c:	6007883a 	mov	r3,r12
10004230:	003ea206 	br	10003cbc <__alt_data_end+0xf8003cbc>

10004234 <memchr>:
10004234:	208000cc 	andi	r2,r4,3
10004238:	280f883a 	mov	r7,r5
1000423c:	10003526 	beq	r2,zero,10004314 <memchr+0xe0>
10004240:	30bfffc4 	addi	r2,r6,-1
10004244:	30001b26 	beq	r6,zero,100042b4 <memchr+0x80>
10004248:	21800003 	ldbu	r6,0(r4)
1000424c:	28c03fcc 	andi	r3,r5,255
10004250:	30c01a26 	beq	r6,r3,100042bc <memchr+0x88>
10004254:	180d883a 	mov	r6,r3
10004258:	00000406 	br	1000426c <memchr+0x38>
1000425c:	10001526 	beq	r2,zero,100042b4 <memchr+0x80>
10004260:	20c00003 	ldbu	r3,0(r4)
10004264:	10bfffc4 	addi	r2,r2,-1
10004268:	19801426 	beq	r3,r6,100042bc <memchr+0x88>
1000426c:	21000044 	addi	r4,r4,1
10004270:	20c000cc 	andi	r3,r4,3
10004274:	183ff91e 	bne	r3,zero,1000425c <__alt_data_end+0xf800425c>
10004278:	024000c4 	movi	r9,3
1000427c:	48801136 	bltu	r9,r2,100042c4 <memchr+0x90>
10004280:	10000c26 	beq	r2,zero,100042b4 <memchr+0x80>
10004284:	20c00003 	ldbu	r3,0(r4)
10004288:	29403fcc 	andi	r5,r5,255
1000428c:	19400b26 	beq	r3,r5,100042bc <memchr+0x88>
10004290:	20c00044 	addi	r3,r4,1
10004294:	2085883a 	add	r2,r4,r2
10004298:	39803fcc 	andi	r6,r7,255
1000429c:	00000306 	br	100042ac <memchr+0x78>
100042a0:	18c00044 	addi	r3,r3,1
100042a4:	197fffc3 	ldbu	r5,-1(r3)
100042a8:	29800426 	beq	r5,r6,100042bc <memchr+0x88>
100042ac:	1809883a 	mov	r4,r3
100042b0:	18bffb1e 	bne	r3,r2,100042a0 <__alt_data_end+0xf80042a0>
100042b4:	0005883a 	mov	r2,zero
100042b8:	f800283a 	ret
100042bc:	2005883a 	mov	r2,r4
100042c0:	f800283a 	ret
100042c4:	28c03fcc 	andi	r3,r5,255
100042c8:	1810923a 	slli	r8,r3,8
100042cc:	02ffbff4 	movhi	r11,65279
100042d0:	02a02074 	movhi	r10,32897
100042d4:	40c6b03a 	or	r3,r8,r3
100042d8:	1810943a 	slli	r8,r3,16
100042dc:	5affbfc4 	addi	r11,r11,-257
100042e0:	52a02004 	addi	r10,r10,-32640
100042e4:	40d0b03a 	or	r8,r8,r3
100042e8:	20c00017 	ldw	r3,0(r4)
100042ec:	40c6f03a 	xor	r3,r8,r3
100042f0:	1acd883a 	add	r6,r3,r11
100042f4:	00c6303a 	nor	r3,zero,r3
100042f8:	30c6703a 	and	r3,r6,r3
100042fc:	1a86703a 	and	r3,r3,r10
10004300:	183fdf1e 	bne	r3,zero,10004280 <__alt_data_end+0xf8004280>
10004304:	10bfff04 	addi	r2,r2,-4
10004308:	21000104 	addi	r4,r4,4
1000430c:	48bff636 	bltu	r9,r2,100042e8 <__alt_data_end+0xf80042e8>
10004310:	003fdb06 	br	10004280 <__alt_data_end+0xf8004280>
10004314:	3005883a 	mov	r2,r6
10004318:	003fd706 	br	10004278 <__alt_data_end+0xf8004278>

1000431c <memcpy>:
1000431c:	deffff04 	addi	sp,sp,-4
10004320:	dc000015 	stw	r16,0(sp)
10004324:	00c003c4 	movi	r3,15
10004328:	2005883a 	mov	r2,r4
1000432c:	1980432e 	bgeu	r3,r6,1000443c <memcpy+0x120>
10004330:	2146b03a 	or	r3,r4,r5
10004334:	18c000cc 	andi	r3,r3,3
10004338:	1800421e 	bne	r3,zero,10004444 <memcpy+0x128>
1000433c:	343ffc04 	addi	r16,r6,-16
10004340:	8020d13a 	srli	r16,r16,4
10004344:	28c00104 	addi	r3,r5,4
10004348:	23400104 	addi	r13,r4,4
1000434c:	801e913a 	slli	r15,r16,4
10004350:	2b000204 	addi	r12,r5,8
10004354:	22c00204 	addi	r11,r4,8
10004358:	7bc00504 	addi	r15,r15,20
1000435c:	2a800304 	addi	r10,r5,12
10004360:	22400304 	addi	r9,r4,12
10004364:	2bdf883a 	add	r15,r5,r15
10004368:	2811883a 	mov	r8,r5
1000436c:	200f883a 	mov	r7,r4
10004370:	41000017 	ldw	r4,0(r8)
10004374:	39c00404 	addi	r7,r7,16
10004378:	18c00404 	addi	r3,r3,16
1000437c:	393ffc15 	stw	r4,-16(r7)
10004380:	1bbffc17 	ldw	r14,-16(r3)
10004384:	6b400404 	addi	r13,r13,16
10004388:	5ac00404 	addi	r11,r11,16
1000438c:	6bbffc15 	stw	r14,-16(r13)
10004390:	63800017 	ldw	r14,0(r12)
10004394:	4a400404 	addi	r9,r9,16
10004398:	42000404 	addi	r8,r8,16
1000439c:	5bbffc15 	stw	r14,-16(r11)
100043a0:	53800017 	ldw	r14,0(r10)
100043a4:	63000404 	addi	r12,r12,16
100043a8:	52800404 	addi	r10,r10,16
100043ac:	4bbffc15 	stw	r14,-16(r9)
100043b0:	1bffef1e 	bne	r3,r15,10004370 <__alt_data_end+0xf8004370>
100043b4:	81c00044 	addi	r7,r16,1
100043b8:	380e913a 	slli	r7,r7,4
100043bc:	310003cc 	andi	r4,r6,15
100043c0:	02c000c4 	movi	r11,3
100043c4:	11c7883a 	add	r3,r2,r7
100043c8:	29cb883a 	add	r5,r5,r7
100043cc:	59001f2e 	bgeu	r11,r4,1000444c <memcpy+0x130>
100043d0:	1813883a 	mov	r9,r3
100043d4:	2811883a 	mov	r8,r5
100043d8:	200f883a 	mov	r7,r4
100043dc:	42800017 	ldw	r10,0(r8)
100043e0:	4a400104 	addi	r9,r9,4
100043e4:	39ffff04 	addi	r7,r7,-4
100043e8:	4abfff15 	stw	r10,-4(r9)
100043ec:	42000104 	addi	r8,r8,4
100043f0:	59fffa36 	bltu	r11,r7,100043dc <__alt_data_end+0xf80043dc>
100043f4:	213fff04 	addi	r4,r4,-4
100043f8:	2008d0ba 	srli	r4,r4,2
100043fc:	318000cc 	andi	r6,r6,3
10004400:	21000044 	addi	r4,r4,1
10004404:	2109883a 	add	r4,r4,r4
10004408:	2109883a 	add	r4,r4,r4
1000440c:	1907883a 	add	r3,r3,r4
10004410:	290b883a 	add	r5,r5,r4
10004414:	30000626 	beq	r6,zero,10004430 <memcpy+0x114>
10004418:	198d883a 	add	r6,r3,r6
1000441c:	29c00003 	ldbu	r7,0(r5)
10004420:	18c00044 	addi	r3,r3,1
10004424:	29400044 	addi	r5,r5,1
10004428:	19ffffc5 	stb	r7,-1(r3)
1000442c:	19bffb1e 	bne	r3,r6,1000441c <__alt_data_end+0xf800441c>
10004430:	dc000017 	ldw	r16,0(sp)
10004434:	dec00104 	addi	sp,sp,4
10004438:	f800283a 	ret
1000443c:	2007883a 	mov	r3,r4
10004440:	003ff406 	br	10004414 <__alt_data_end+0xf8004414>
10004444:	2007883a 	mov	r3,r4
10004448:	003ff306 	br	10004418 <__alt_data_end+0xf8004418>
1000444c:	200d883a 	mov	r6,r4
10004450:	003ff006 	br	10004414 <__alt_data_end+0xf8004414>

10004454 <memmove>:
10004454:	2005883a 	mov	r2,r4
10004458:	29000b2e 	bgeu	r5,r4,10004488 <memmove+0x34>
1000445c:	298f883a 	add	r7,r5,r6
10004460:	21c0092e 	bgeu	r4,r7,10004488 <memmove+0x34>
10004464:	2187883a 	add	r3,r4,r6
10004468:	198bc83a 	sub	r5,r3,r6
1000446c:	30004b26 	beq	r6,zero,1000459c <memmove+0x148>
10004470:	39ffffc4 	addi	r7,r7,-1
10004474:	39000003 	ldbu	r4,0(r7)
10004478:	18ffffc4 	addi	r3,r3,-1
1000447c:	19000005 	stb	r4,0(r3)
10004480:	197ffb1e 	bne	r3,r5,10004470 <__alt_data_end+0xf8004470>
10004484:	f800283a 	ret
10004488:	00c003c4 	movi	r3,15
1000448c:	1980412e 	bgeu	r3,r6,10004594 <memmove+0x140>
10004490:	1146b03a 	or	r3,r2,r5
10004494:	18c000cc 	andi	r3,r3,3
10004498:	1800411e 	bne	r3,zero,100045a0 <memmove+0x14c>
1000449c:	33fffc04 	addi	r15,r6,-16
100044a0:	781ed13a 	srli	r15,r15,4
100044a4:	28c00104 	addi	r3,r5,4
100044a8:	13400104 	addi	r13,r2,4
100044ac:	781c913a 	slli	r14,r15,4
100044b0:	2b000204 	addi	r12,r5,8
100044b4:	12c00204 	addi	r11,r2,8
100044b8:	73800504 	addi	r14,r14,20
100044bc:	2a800304 	addi	r10,r5,12
100044c0:	12400304 	addi	r9,r2,12
100044c4:	2b9d883a 	add	r14,r5,r14
100044c8:	2811883a 	mov	r8,r5
100044cc:	100f883a 	mov	r7,r2
100044d0:	41000017 	ldw	r4,0(r8)
100044d4:	39c00404 	addi	r7,r7,16
100044d8:	18c00404 	addi	r3,r3,16
100044dc:	393ffc15 	stw	r4,-16(r7)
100044e0:	193ffc17 	ldw	r4,-16(r3)
100044e4:	6b400404 	addi	r13,r13,16
100044e8:	5ac00404 	addi	r11,r11,16
100044ec:	693ffc15 	stw	r4,-16(r13)
100044f0:	61000017 	ldw	r4,0(r12)
100044f4:	4a400404 	addi	r9,r9,16
100044f8:	42000404 	addi	r8,r8,16
100044fc:	593ffc15 	stw	r4,-16(r11)
10004500:	51000017 	ldw	r4,0(r10)
10004504:	63000404 	addi	r12,r12,16
10004508:	52800404 	addi	r10,r10,16
1000450c:	493ffc15 	stw	r4,-16(r9)
10004510:	1bbfef1e 	bne	r3,r14,100044d0 <__alt_data_end+0xf80044d0>
10004514:	79000044 	addi	r4,r15,1
10004518:	2008913a 	slli	r4,r4,4
1000451c:	328003cc 	andi	r10,r6,15
10004520:	02c000c4 	movi	r11,3
10004524:	1107883a 	add	r3,r2,r4
10004528:	290b883a 	add	r5,r5,r4
1000452c:	5a801e2e 	bgeu	r11,r10,100045a8 <memmove+0x154>
10004530:	1813883a 	mov	r9,r3
10004534:	2811883a 	mov	r8,r5
10004538:	500f883a 	mov	r7,r10
1000453c:	41000017 	ldw	r4,0(r8)
10004540:	4a400104 	addi	r9,r9,4
10004544:	39ffff04 	addi	r7,r7,-4
10004548:	493fff15 	stw	r4,-4(r9)
1000454c:	42000104 	addi	r8,r8,4
10004550:	59fffa36 	bltu	r11,r7,1000453c <__alt_data_end+0xf800453c>
10004554:	513fff04 	addi	r4,r10,-4
10004558:	2008d0ba 	srli	r4,r4,2
1000455c:	318000cc 	andi	r6,r6,3
10004560:	21000044 	addi	r4,r4,1
10004564:	2109883a 	add	r4,r4,r4
10004568:	2109883a 	add	r4,r4,r4
1000456c:	1907883a 	add	r3,r3,r4
10004570:	290b883a 	add	r5,r5,r4
10004574:	30000926 	beq	r6,zero,1000459c <memmove+0x148>
10004578:	198d883a 	add	r6,r3,r6
1000457c:	29c00003 	ldbu	r7,0(r5)
10004580:	18c00044 	addi	r3,r3,1
10004584:	29400044 	addi	r5,r5,1
10004588:	19ffffc5 	stb	r7,-1(r3)
1000458c:	19bffb1e 	bne	r3,r6,1000457c <__alt_data_end+0xf800457c>
10004590:	f800283a 	ret
10004594:	1007883a 	mov	r3,r2
10004598:	003ff606 	br	10004574 <__alt_data_end+0xf8004574>
1000459c:	f800283a 	ret
100045a0:	1007883a 	mov	r3,r2
100045a4:	003ff406 	br	10004578 <__alt_data_end+0xf8004578>
100045a8:	500d883a 	mov	r6,r10
100045ac:	003ff106 	br	10004574 <__alt_data_end+0xf8004574>

100045b0 <_realloc_r>:
100045b0:	defff604 	addi	sp,sp,-40
100045b4:	dcc00315 	stw	r19,12(sp)
100045b8:	dc400115 	stw	r17,4(sp)
100045bc:	dfc00915 	stw	ra,36(sp)
100045c0:	df000815 	stw	fp,32(sp)
100045c4:	ddc00715 	stw	r23,28(sp)
100045c8:	dd800615 	stw	r22,24(sp)
100045cc:	dd400515 	stw	r21,20(sp)
100045d0:	dd000415 	stw	r20,16(sp)
100045d4:	dc800215 	stw	r18,8(sp)
100045d8:	dc000015 	stw	r16,0(sp)
100045dc:	2827883a 	mov	r19,r5
100045e0:	3023883a 	mov	r17,r6
100045e4:	2800bf26 	beq	r5,zero,100048e4 <_realloc_r+0x334>
100045e8:	2025883a 	mov	r18,r4
100045ec:	00066900 	call	10006690 <__malloc_lock>
100045f0:	98ffff17 	ldw	r3,-4(r19)
100045f4:	01bfff04 	movi	r6,-4
100045f8:	890002c4 	addi	r4,r17,11
100045fc:	01c00584 	movi	r7,22
10004600:	9d7ffe04 	addi	r21,r19,-8
10004604:	19a0703a 	and	r16,r3,r6
10004608:	39003f2e 	bgeu	r7,r4,10004708 <_realloc_r+0x158>
1000460c:	053ffe04 	movi	r20,-8
10004610:	2528703a 	and	r20,r4,r20
10004614:	a00f883a 	mov	r7,r20
10004618:	a0008216 	blt	r20,zero,10004824 <_realloc_r+0x274>
1000461c:	a4408136 	bltu	r20,r17,10004824 <_realloc_r+0x274>
10004620:	81c03c0e 	bge	r16,r7,10004714 <_realloc_r+0x164>
10004624:	07040074 	movhi	fp,4097
10004628:	e7235c04 	addi	fp,fp,-29328
1000462c:	e1000217 	ldw	r4,8(fp)
10004630:	ac05883a 	add	r2,r21,r16
10004634:	2080bf26 	beq	r4,r2,10004934 <_realloc_r+0x384>
10004638:	11000117 	ldw	r4,4(r2)
1000463c:	023fff84 	movi	r8,-2
10004640:	2210703a 	and	r8,r4,r8
10004644:	1211883a 	add	r8,r2,r8
10004648:	41400117 	ldw	r5,4(r8)
1000464c:	2940004c 	andi	r5,r5,1
10004650:	28004a1e 	bne	r5,zero,1000477c <_realloc_r+0x1cc>
10004654:	017fff04 	movi	r5,-4
10004658:	2148703a 	and	r4,r4,r5
1000465c:	2409883a 	add	r4,r4,r16
10004660:	21c0ad0e 	bge	r4,r7,10004918 <_realloc_r+0x368>
10004664:	18c0004c 	andi	r3,r3,1
10004668:	18007f1e 	bne	r3,zero,10004868 <_realloc_r+0x2b8>
1000466c:	9dfffe17 	ldw	r23,-8(r19)
10004670:	adefc83a 	sub	r23,r21,r23
10004674:	bd800117 	ldw	r22,4(r23)
10004678:	b14a703a 	and	r5,r22,r5
1000467c:	216d883a 	add	r22,r4,r5
10004680:	b1c04516 	blt	r22,r7,10004798 <_realloc_r+0x1e8>
10004684:	10c00317 	ldw	r3,12(r2)
10004688:	10800217 	ldw	r2,8(r2)
1000468c:	81bfff04 	addi	r6,r16,-4
10004690:	bc400204 	addi	r17,r23,8
10004694:	10c00315 	stw	r3,12(r2)
10004698:	18800215 	stw	r2,8(r3)
1000469c:	b9400217 	ldw	r5,8(r23)
100046a0:	b8c00317 	ldw	r3,12(r23)
100046a4:	00800904 	movi	r2,36
100046a8:	28c00315 	stw	r3,12(r5)
100046ac:	19400215 	stw	r5,8(r3)
100046b0:	1180ef36 	bltu	r2,r6,10004a70 <_realloc_r+0x4c0>
100046b4:	008004c4 	movi	r2,19
100046b8:	1180da2e 	bgeu	r2,r6,10004a24 <_realloc_r+0x474>
100046bc:	98800017 	ldw	r2,0(r19)
100046c0:	b8800215 	stw	r2,8(r23)
100046c4:	98800117 	ldw	r2,4(r19)
100046c8:	b8800315 	stw	r2,12(r23)
100046cc:	008006c4 	movi	r2,27
100046d0:	1180fc2e 	bgeu	r2,r6,10004ac4 <_realloc_r+0x514>
100046d4:	98800217 	ldw	r2,8(r19)
100046d8:	b8800415 	stw	r2,16(r23)
100046dc:	98800317 	ldw	r2,12(r19)
100046e0:	b8800515 	stw	r2,20(r23)
100046e4:	00800904 	movi	r2,36
100046e8:	3080421e 	bne	r6,r2,100047f4 <_realloc_r+0x244>
100046ec:	98800417 	ldw	r2,16(r19)
100046f0:	9cc00604 	addi	r19,r19,24
100046f4:	b8c00804 	addi	r3,r23,32
100046f8:	b8800615 	stw	r2,24(r23)
100046fc:	98bfff17 	ldw	r2,-4(r19)
10004700:	b8800715 	stw	r2,28(r23)
10004704:	00003d06 	br	100047fc <_realloc_r+0x24c>
10004708:	01c00404 	movi	r7,16
1000470c:	3829883a 	mov	r20,r7
10004710:	003fc206 	br	1000461c <__alt_data_end+0xf800461c>
10004714:	9823883a 	mov	r17,r19
10004718:	850fc83a 	sub	r7,r16,r20
1000471c:	008003c4 	movi	r2,15
10004720:	18c0004c 	andi	r3,r3,1
10004724:	11c04336 	bltu	r2,r7,10004834 <_realloc_r+0x284>
10004728:	1c06b03a 	or	r3,r3,r16
1000472c:	a8c00115 	stw	r3,4(r21)
10004730:	ac21883a 	add	r16,r21,r16
10004734:	80c00117 	ldw	r3,4(r16)
10004738:	18c00054 	ori	r3,r3,1
1000473c:	80c00115 	stw	r3,4(r16)
10004740:	9009883a 	mov	r4,r18
10004744:	00066b00 	call	100066b0 <__malloc_unlock>
10004748:	8805883a 	mov	r2,r17
1000474c:	dfc00917 	ldw	ra,36(sp)
10004750:	df000817 	ldw	fp,32(sp)
10004754:	ddc00717 	ldw	r23,28(sp)
10004758:	dd800617 	ldw	r22,24(sp)
1000475c:	dd400517 	ldw	r21,20(sp)
10004760:	dd000417 	ldw	r20,16(sp)
10004764:	dcc00317 	ldw	r19,12(sp)
10004768:	dc800217 	ldw	r18,8(sp)
1000476c:	dc400117 	ldw	r17,4(sp)
10004770:	dc000017 	ldw	r16,0(sp)
10004774:	dec00a04 	addi	sp,sp,40
10004778:	f800283a 	ret
1000477c:	18c0004c 	andi	r3,r3,1
10004780:	1800391e 	bne	r3,zero,10004868 <_realloc_r+0x2b8>
10004784:	9dfffe17 	ldw	r23,-8(r19)
10004788:	00bfff04 	movi	r2,-4
1000478c:	adefc83a 	sub	r23,r21,r23
10004790:	b9400117 	ldw	r5,4(r23)
10004794:	288a703a 	and	r5,r5,r2
10004798:	2c2d883a 	add	r22,r5,r16
1000479c:	b1c03216 	blt	r22,r7,10004868 <_realloc_r+0x2b8>
100047a0:	b8800317 	ldw	r2,12(r23)
100047a4:	b8c00217 	ldw	r3,8(r23)
100047a8:	81bfff04 	addi	r6,r16,-4
100047ac:	01000904 	movi	r4,36
100047b0:	18800315 	stw	r2,12(r3)
100047b4:	10c00215 	stw	r3,8(r2)
100047b8:	bc400204 	addi	r17,r23,8
100047bc:	2180ac36 	bltu	r4,r6,10004a70 <_realloc_r+0x4c0>
100047c0:	008004c4 	movi	r2,19
100047c4:	1180972e 	bgeu	r2,r6,10004a24 <_realloc_r+0x474>
100047c8:	98800017 	ldw	r2,0(r19)
100047cc:	b8800215 	stw	r2,8(r23)
100047d0:	98800117 	ldw	r2,4(r19)
100047d4:	b8800315 	stw	r2,12(r23)
100047d8:	008006c4 	movi	r2,27
100047dc:	1180b92e 	bgeu	r2,r6,10004ac4 <_realloc_r+0x514>
100047e0:	98800217 	ldw	r2,8(r19)
100047e4:	b8800415 	stw	r2,16(r23)
100047e8:	98800317 	ldw	r2,12(r19)
100047ec:	b8800515 	stw	r2,20(r23)
100047f0:	313fbe26 	beq	r6,r4,100046ec <__alt_data_end+0xf80046ec>
100047f4:	b8c00604 	addi	r3,r23,24
100047f8:	9cc00404 	addi	r19,r19,16
100047fc:	98800017 	ldw	r2,0(r19)
10004800:	b021883a 	mov	r16,r22
10004804:	b82b883a 	mov	r21,r23
10004808:	18800015 	stw	r2,0(r3)
1000480c:	98800117 	ldw	r2,4(r19)
10004810:	18800115 	stw	r2,4(r3)
10004814:	98800217 	ldw	r2,8(r19)
10004818:	18800215 	stw	r2,8(r3)
1000481c:	b8c00117 	ldw	r3,4(r23)
10004820:	003fbd06 	br	10004718 <__alt_data_end+0xf8004718>
10004824:	00800304 	movi	r2,12
10004828:	90800015 	stw	r2,0(r18)
1000482c:	0005883a 	mov	r2,zero
10004830:	003fc606 	br	1000474c <__alt_data_end+0xf800474c>
10004834:	1d06b03a 	or	r3,r3,r20
10004838:	ad0b883a 	add	r5,r21,r20
1000483c:	a8c00115 	stw	r3,4(r21)
10004840:	38800054 	ori	r2,r7,1
10004844:	28800115 	stw	r2,4(r5)
10004848:	29cf883a 	add	r7,r5,r7
1000484c:	38800117 	ldw	r2,4(r7)
10004850:	9009883a 	mov	r4,r18
10004854:	29400204 	addi	r5,r5,8
10004858:	10800054 	ori	r2,r2,1
1000485c:	38800115 	stw	r2,4(r7)
10004860:	00054040 	call	10005404 <_free_r>
10004864:	003fb606 	br	10004740 <__alt_data_end+0xf8004740>
10004868:	880b883a 	mov	r5,r17
1000486c:	9009883a 	mov	r4,r18
10004870:	0003a8c0 	call	10003a8c <_malloc_r>
10004874:	1023883a 	mov	r17,r2
10004878:	1000aa26 	beq	r2,zero,10004b24 <_realloc_r+0x574>
1000487c:	98ffff17 	ldw	r3,-4(r19)
10004880:	113ffe04 	addi	r4,r2,-8
10004884:	00bfff84 	movi	r2,-2
10004888:	1884703a 	and	r2,r3,r2
1000488c:	a885883a 	add	r2,r21,r2
10004890:	20808626 	beq	r4,r2,10004aac <_realloc_r+0x4fc>
10004894:	81bfff04 	addi	r6,r16,-4
10004898:	00800904 	movi	r2,36
1000489c:	11807036 	bltu	r2,r6,10004a60 <_realloc_r+0x4b0>
100048a0:	00c004c4 	movi	r3,19
100048a4:	19805636 	bltu	r3,r6,10004a00 <_realloc_r+0x450>
100048a8:	8805883a 	mov	r2,r17
100048ac:	9807883a 	mov	r3,r19
100048b0:	19000017 	ldw	r4,0(r3)
100048b4:	11000015 	stw	r4,0(r2)
100048b8:	19000117 	ldw	r4,4(r3)
100048bc:	11000115 	stw	r4,4(r2)
100048c0:	18c00217 	ldw	r3,8(r3)
100048c4:	10c00215 	stw	r3,8(r2)
100048c8:	980b883a 	mov	r5,r19
100048cc:	9009883a 	mov	r4,r18
100048d0:	00054040 	call	10005404 <_free_r>
100048d4:	9009883a 	mov	r4,r18
100048d8:	00066b00 	call	100066b0 <__malloc_unlock>
100048dc:	8805883a 	mov	r2,r17
100048e0:	003f9a06 	br	1000474c <__alt_data_end+0xf800474c>
100048e4:	300b883a 	mov	r5,r6
100048e8:	dfc00917 	ldw	ra,36(sp)
100048ec:	df000817 	ldw	fp,32(sp)
100048f0:	ddc00717 	ldw	r23,28(sp)
100048f4:	dd800617 	ldw	r22,24(sp)
100048f8:	dd400517 	ldw	r21,20(sp)
100048fc:	dd000417 	ldw	r20,16(sp)
10004900:	dcc00317 	ldw	r19,12(sp)
10004904:	dc800217 	ldw	r18,8(sp)
10004908:	dc400117 	ldw	r17,4(sp)
1000490c:	dc000017 	ldw	r16,0(sp)
10004910:	dec00a04 	addi	sp,sp,40
10004914:	0003a8c1 	jmpi	10003a8c <_malloc_r>
10004918:	11400317 	ldw	r5,12(r2)
1000491c:	10800217 	ldw	r2,8(r2)
10004920:	9823883a 	mov	r17,r19
10004924:	2021883a 	mov	r16,r4
10004928:	11400315 	stw	r5,12(r2)
1000492c:	28800215 	stw	r2,8(r5)
10004930:	003f7906 	br	10004718 <__alt_data_end+0xf8004718>
10004934:	21000117 	ldw	r4,4(r4)
10004938:	00bfff04 	movi	r2,-4
1000493c:	a1800404 	addi	r6,r20,16
10004940:	2088703a 	and	r4,r4,r2
10004944:	2409883a 	add	r4,r4,r16
10004948:	2180380e 	bge	r4,r6,10004a2c <_realloc_r+0x47c>
1000494c:	18c0004c 	andi	r3,r3,1
10004950:	183fc51e 	bne	r3,zero,10004868 <__alt_data_end+0xf8004868>
10004954:	9dfffe17 	ldw	r23,-8(r19)
10004958:	adefc83a 	sub	r23,r21,r23
1000495c:	b9400117 	ldw	r5,4(r23)
10004960:	288a703a 	and	r5,r5,r2
10004964:	216d883a 	add	r22,r4,r5
10004968:	b1bf8b16 	blt	r22,r6,10004798 <__alt_data_end+0xf8004798>
1000496c:	b8800317 	ldw	r2,12(r23)
10004970:	b8c00217 	ldw	r3,8(r23)
10004974:	81bfff04 	addi	r6,r16,-4
10004978:	01000904 	movi	r4,36
1000497c:	18800315 	stw	r2,12(r3)
10004980:	10c00215 	stw	r3,8(r2)
10004984:	bc400204 	addi	r17,r23,8
10004988:	21805a36 	bltu	r4,r6,10004af4 <_realloc_r+0x544>
1000498c:	008004c4 	movi	r2,19
10004990:	1180562e 	bgeu	r2,r6,10004aec <_realloc_r+0x53c>
10004994:	98800017 	ldw	r2,0(r19)
10004998:	b8800215 	stw	r2,8(r23)
1000499c:	98800117 	ldw	r2,4(r19)
100049a0:	b8800315 	stw	r2,12(r23)
100049a4:	008006c4 	movi	r2,27
100049a8:	11805636 	bltu	r2,r6,10004b04 <_realloc_r+0x554>
100049ac:	b8800404 	addi	r2,r23,16
100049b0:	9cc00204 	addi	r19,r19,8
100049b4:	98c00017 	ldw	r3,0(r19)
100049b8:	10c00015 	stw	r3,0(r2)
100049bc:	98c00117 	ldw	r3,4(r19)
100049c0:	10c00115 	stw	r3,4(r2)
100049c4:	98c00217 	ldw	r3,8(r19)
100049c8:	10c00215 	stw	r3,8(r2)
100049cc:	bd07883a 	add	r3,r23,r20
100049d0:	b505c83a 	sub	r2,r22,r20
100049d4:	e0c00215 	stw	r3,8(fp)
100049d8:	10800054 	ori	r2,r2,1
100049dc:	18800115 	stw	r2,4(r3)
100049e0:	b8800117 	ldw	r2,4(r23)
100049e4:	9009883a 	mov	r4,r18
100049e8:	1080004c 	andi	r2,r2,1
100049ec:	a0a8b03a 	or	r20,r20,r2
100049f0:	bd000115 	stw	r20,4(r23)
100049f4:	00066b00 	call	100066b0 <__malloc_unlock>
100049f8:	8805883a 	mov	r2,r17
100049fc:	003f5306 	br	1000474c <__alt_data_end+0xf800474c>
10004a00:	98c00017 	ldw	r3,0(r19)
10004a04:	88c00015 	stw	r3,0(r17)
10004a08:	98c00117 	ldw	r3,4(r19)
10004a0c:	88c00115 	stw	r3,4(r17)
10004a10:	00c006c4 	movi	r3,27
10004a14:	19801d36 	bltu	r3,r6,10004a8c <_realloc_r+0x4dc>
10004a18:	88800204 	addi	r2,r17,8
10004a1c:	98c00204 	addi	r3,r19,8
10004a20:	003fa306 	br	100048b0 <__alt_data_end+0xf80048b0>
10004a24:	8807883a 	mov	r3,r17
10004a28:	003f7406 	br	100047fc <__alt_data_end+0xf80047fc>
10004a2c:	ad2b883a 	add	r21,r21,r20
10004a30:	2505c83a 	sub	r2,r4,r20
10004a34:	e5400215 	stw	r21,8(fp)
10004a38:	10800054 	ori	r2,r2,1
10004a3c:	a8800115 	stw	r2,4(r21)
10004a40:	98bfff17 	ldw	r2,-4(r19)
10004a44:	9009883a 	mov	r4,r18
10004a48:	1080004c 	andi	r2,r2,1
10004a4c:	a0a8b03a 	or	r20,r20,r2
10004a50:	9d3fff15 	stw	r20,-4(r19)
10004a54:	00066b00 	call	100066b0 <__malloc_unlock>
10004a58:	9805883a 	mov	r2,r19
10004a5c:	003f3b06 	br	1000474c <__alt_data_end+0xf800474c>
10004a60:	8809883a 	mov	r4,r17
10004a64:	980b883a 	mov	r5,r19
10004a68:	00044540 	call	10004454 <memmove>
10004a6c:	003f9606 	br	100048c8 <__alt_data_end+0xf80048c8>
10004a70:	8809883a 	mov	r4,r17
10004a74:	980b883a 	mov	r5,r19
10004a78:	00044540 	call	10004454 <memmove>
10004a7c:	b8c00117 	ldw	r3,4(r23)
10004a80:	b021883a 	mov	r16,r22
10004a84:	b82b883a 	mov	r21,r23
10004a88:	003f2306 	br	10004718 <__alt_data_end+0xf8004718>
10004a8c:	98c00217 	ldw	r3,8(r19)
10004a90:	88c00215 	stw	r3,8(r17)
10004a94:	98c00317 	ldw	r3,12(r19)
10004a98:	88c00315 	stw	r3,12(r17)
10004a9c:	30800c26 	beq	r6,r2,10004ad0 <_realloc_r+0x520>
10004aa0:	88800404 	addi	r2,r17,16
10004aa4:	98c00404 	addi	r3,r19,16
10004aa8:	003f8106 	br	100048b0 <__alt_data_end+0xf80048b0>
10004aac:	893fff17 	ldw	r4,-4(r17)
10004ab0:	00bfff04 	movi	r2,-4
10004ab4:	9823883a 	mov	r17,r19
10004ab8:	2084703a 	and	r2,r4,r2
10004abc:	80a1883a 	add	r16,r16,r2
10004ac0:	003f1506 	br	10004718 <__alt_data_end+0xf8004718>
10004ac4:	b8c00404 	addi	r3,r23,16
10004ac8:	9cc00204 	addi	r19,r19,8
10004acc:	003f4b06 	br	100047fc <__alt_data_end+0xf80047fc>
10004ad0:	99000417 	ldw	r4,16(r19)
10004ad4:	88800604 	addi	r2,r17,24
10004ad8:	98c00604 	addi	r3,r19,24
10004adc:	89000415 	stw	r4,16(r17)
10004ae0:	99000517 	ldw	r4,20(r19)
10004ae4:	89000515 	stw	r4,20(r17)
10004ae8:	003f7106 	br	100048b0 <__alt_data_end+0xf80048b0>
10004aec:	8805883a 	mov	r2,r17
10004af0:	003fb006 	br	100049b4 <__alt_data_end+0xf80049b4>
10004af4:	8809883a 	mov	r4,r17
10004af8:	980b883a 	mov	r5,r19
10004afc:	00044540 	call	10004454 <memmove>
10004b00:	003fb206 	br	100049cc <__alt_data_end+0xf80049cc>
10004b04:	98800217 	ldw	r2,8(r19)
10004b08:	b8800415 	stw	r2,16(r23)
10004b0c:	98800317 	ldw	r2,12(r19)
10004b10:	b8800515 	stw	r2,20(r23)
10004b14:	31000726 	beq	r6,r4,10004b34 <_realloc_r+0x584>
10004b18:	b8800604 	addi	r2,r23,24
10004b1c:	9cc00404 	addi	r19,r19,16
10004b20:	003fa406 	br	100049b4 <__alt_data_end+0xf80049b4>
10004b24:	9009883a 	mov	r4,r18
10004b28:	00066b00 	call	100066b0 <__malloc_unlock>
10004b2c:	0005883a 	mov	r2,zero
10004b30:	003f0606 	br	1000474c <__alt_data_end+0xf800474c>
10004b34:	98c00417 	ldw	r3,16(r19)
10004b38:	9cc00604 	addi	r19,r19,24
10004b3c:	b8800804 	addi	r2,r23,32
10004b40:	b8c00615 	stw	r3,24(r23)
10004b44:	98ffff17 	ldw	r3,-4(r19)
10004b48:	b8c00715 	stw	r3,28(r23)
10004b4c:	003f9906 	br	100049b4 <__alt_data_end+0xf80049b4>

10004b50 <_sbrk_r>:
10004b50:	defffd04 	addi	sp,sp,-12
10004b54:	dc000015 	stw	r16,0(sp)
10004b58:	04040074 	movhi	r16,4097
10004b5c:	dc400115 	stw	r17,4(sp)
10004b60:	842f9304 	addi	r16,r16,-16820
10004b64:	2023883a 	mov	r17,r4
10004b68:	2809883a 	mov	r4,r5
10004b6c:	dfc00215 	stw	ra,8(sp)
10004b70:	80000015 	stw	zero,0(r16)
10004b74:	00068a40 	call	100068a4 <sbrk>
10004b78:	00ffffc4 	movi	r3,-1
10004b7c:	10c00526 	beq	r2,r3,10004b94 <_sbrk_r+0x44>
10004b80:	dfc00217 	ldw	ra,8(sp)
10004b84:	dc400117 	ldw	r17,4(sp)
10004b88:	dc000017 	ldw	r16,0(sp)
10004b8c:	dec00304 	addi	sp,sp,12
10004b90:	f800283a 	ret
10004b94:	80c00017 	ldw	r3,0(r16)
10004b98:	183ff926 	beq	r3,zero,10004b80 <__alt_data_end+0xf8004b80>
10004b9c:	88c00015 	stw	r3,0(r17)
10004ba0:	003ff706 	br	10004b80 <__alt_data_end+0xf8004b80>

10004ba4 <__swsetup_r>:
10004ba4:	00840074 	movhi	r2,4097
10004ba8:	defffd04 	addi	sp,sp,-12
10004bac:	10a8e104 	addi	r2,r2,-23676
10004bb0:	dc400115 	stw	r17,4(sp)
10004bb4:	2023883a 	mov	r17,r4
10004bb8:	11000017 	ldw	r4,0(r2)
10004bbc:	dc000015 	stw	r16,0(sp)
10004bc0:	dfc00215 	stw	ra,8(sp)
10004bc4:	2821883a 	mov	r16,r5
10004bc8:	20000226 	beq	r4,zero,10004bd4 <__swsetup_r+0x30>
10004bcc:	20c00e17 	ldw	r3,56(r4)
10004bd0:	18002e26 	beq	r3,zero,10004c8c <__swsetup_r+0xe8>
10004bd4:	8080030b 	ldhu	r2,12(r16)
10004bd8:	10c0020c 	andi	r3,r2,8
10004bdc:	100d883a 	mov	r6,r2
10004be0:	18000f26 	beq	r3,zero,10004c20 <__swsetup_r+0x7c>
10004be4:	80c00417 	ldw	r3,16(r16)
10004be8:	18001526 	beq	r3,zero,10004c40 <__swsetup_r+0x9c>
10004bec:	1100004c 	andi	r4,r2,1
10004bf0:	20001c1e 	bne	r4,zero,10004c64 <__swsetup_r+0xc0>
10004bf4:	1080008c 	andi	r2,r2,2
10004bf8:	1000261e 	bne	r2,zero,10004c94 <__swsetup_r+0xf0>
10004bfc:	80800517 	ldw	r2,20(r16)
10004c00:	80800215 	stw	r2,8(r16)
10004c04:	18001c26 	beq	r3,zero,10004c78 <__swsetup_r+0xd4>
10004c08:	0005883a 	mov	r2,zero
10004c0c:	dfc00217 	ldw	ra,8(sp)
10004c10:	dc400117 	ldw	r17,4(sp)
10004c14:	dc000017 	ldw	r16,0(sp)
10004c18:	dec00304 	addi	sp,sp,12
10004c1c:	f800283a 	ret
10004c20:	3080040c 	andi	r2,r6,16
10004c24:	10001726 	beq	r2,zero,10004c84 <__swsetup_r+0xe0>
10004c28:	3080010c 	andi	r2,r6,4
10004c2c:	10001b1e 	bne	r2,zero,10004c9c <__swsetup_r+0xf8>
10004c30:	80c00417 	ldw	r3,16(r16)
10004c34:	30800214 	ori	r2,r6,8
10004c38:	8080030d 	sth	r2,12(r16)
10004c3c:	183feb1e 	bne	r3,zero,10004bec <__alt_data_end+0xf8004bec>
10004c40:	1140a00c 	andi	r5,r2,640
10004c44:	01008004 	movi	r4,512
10004c48:	293fe826 	beq	r5,r4,10004bec <__alt_data_end+0xf8004bec>
10004c4c:	8809883a 	mov	r4,r17
10004c50:	800b883a 	mov	r5,r16
10004c54:	00058640 	call	10005864 <__smakebuf_r>
10004c58:	8080030b 	ldhu	r2,12(r16)
10004c5c:	80c00417 	ldw	r3,16(r16)
10004c60:	003fe206 	br	10004bec <__alt_data_end+0xf8004bec>
10004c64:	80800517 	ldw	r2,20(r16)
10004c68:	80000215 	stw	zero,8(r16)
10004c6c:	0085c83a 	sub	r2,zero,r2
10004c70:	80800615 	stw	r2,24(r16)
10004c74:	183fe41e 	bne	r3,zero,10004c08 <__alt_data_end+0xf8004c08>
10004c78:	8080030b 	ldhu	r2,12(r16)
10004c7c:	1080200c 	andi	r2,r2,128
10004c80:	103fe226 	beq	r2,zero,10004c0c <__alt_data_end+0xf8004c0c>
10004c84:	00bfffc4 	movi	r2,-1
10004c88:	003fe006 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004c8c:	00052900 	call	10005290 <__sinit>
10004c90:	003fd006 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004c94:	0005883a 	mov	r2,zero
10004c98:	003fd906 	br	10004c00 <__alt_data_end+0xf8004c00>
10004c9c:	81400c17 	ldw	r5,48(r16)
10004ca0:	28000626 	beq	r5,zero,10004cbc <__swsetup_r+0x118>
10004ca4:	80801004 	addi	r2,r16,64
10004ca8:	28800326 	beq	r5,r2,10004cb8 <__swsetup_r+0x114>
10004cac:	8809883a 	mov	r4,r17
10004cb0:	00054040 	call	10005404 <_free_r>
10004cb4:	8180030b 	ldhu	r6,12(r16)
10004cb8:	80000c15 	stw	zero,48(r16)
10004cbc:	80c00417 	ldw	r3,16(r16)
10004cc0:	00bff6c4 	movi	r2,-37
10004cc4:	118c703a 	and	r6,r2,r6
10004cc8:	80000115 	stw	zero,4(r16)
10004ccc:	80c00015 	stw	r3,0(r16)
10004cd0:	003fd806 	br	10004c34 <__alt_data_end+0xf8004c34>

10004cd4 <_fflush_r>:
10004cd4:	defffb04 	addi	sp,sp,-20
10004cd8:	dcc00315 	stw	r19,12(sp)
10004cdc:	dc000015 	stw	r16,0(sp)
10004ce0:	dfc00415 	stw	ra,16(sp)
10004ce4:	dc800215 	stw	r18,8(sp)
10004ce8:	dc400115 	stw	r17,4(sp)
10004cec:	2027883a 	mov	r19,r4
10004cf0:	2821883a 	mov	r16,r5
10004cf4:	20000226 	beq	r4,zero,10004d00 <_fflush_r+0x2c>
10004cf8:	20800e17 	ldw	r2,56(r4)
10004cfc:	10005326 	beq	r2,zero,10004e4c <_fflush_r+0x178>
10004d00:	8080030b 	ldhu	r2,12(r16)
10004d04:	10ffffcc 	andi	r3,r2,65535
10004d08:	18e0001c 	xori	r3,r3,32768
10004d0c:	18e00004 	addi	r3,r3,-32768
10004d10:	18002c26 	beq	r3,zero,10004dc4 <_fflush_r+0xf0>
10004d14:	10c0020c 	andi	r3,r2,8
10004d18:	1800321e 	bne	r3,zero,10004de4 <_fflush_r+0x110>
10004d1c:	80c00117 	ldw	r3,4(r16)
10004d20:	10820014 	ori	r2,r2,2048
10004d24:	8080030d 	sth	r2,12(r16)
10004d28:	00c0570e 	bge	zero,r3,10004e88 <_fflush_r+0x1b4>
10004d2c:	82000a17 	ldw	r8,40(r16)
10004d30:	40002426 	beq	r8,zero,10004dc4 <_fflush_r+0xf0>
10004d34:	9c400017 	ldw	r17,0(r19)
10004d38:	10c4000c 	andi	r3,r2,4096
10004d3c:	98000015 	stw	zero,0(r19)
10004d40:	18004626 	beq	r3,zero,10004e5c <_fflush_r+0x188>
10004d44:	81801417 	ldw	r6,80(r16)
10004d48:	10c0010c 	andi	r3,r2,4
10004d4c:	18000626 	beq	r3,zero,10004d68 <_fflush_r+0x94>
10004d50:	80c00117 	ldw	r3,4(r16)
10004d54:	80800c17 	ldw	r2,48(r16)
10004d58:	30cdc83a 	sub	r6,r6,r3
10004d5c:	10000226 	beq	r2,zero,10004d68 <_fflush_r+0x94>
10004d60:	80800f17 	ldw	r2,60(r16)
10004d64:	308dc83a 	sub	r6,r6,r2
10004d68:	81400717 	ldw	r5,28(r16)
10004d6c:	9809883a 	mov	r4,r19
10004d70:	000f883a 	mov	r7,zero
10004d74:	403ee83a 	callr	r8
10004d78:	00ffffc4 	movi	r3,-1
10004d7c:	10c04526 	beq	r2,r3,10004e94 <_fflush_r+0x1c0>
10004d80:	80c0030b 	ldhu	r3,12(r16)
10004d84:	81000417 	ldw	r4,16(r16)
10004d88:	80000115 	stw	zero,4(r16)
10004d8c:	197dffcc 	andi	r5,r3,63487
10004d90:	8140030d 	sth	r5,12(r16)
10004d94:	81000015 	stw	r4,0(r16)
10004d98:	18c4000c 	andi	r3,r3,4096
10004d9c:	18000126 	beq	r3,zero,10004da4 <_fflush_r+0xd0>
10004da0:	80801415 	stw	r2,80(r16)
10004da4:	81400c17 	ldw	r5,48(r16)
10004da8:	9c400015 	stw	r17,0(r19)
10004dac:	28000526 	beq	r5,zero,10004dc4 <_fflush_r+0xf0>
10004db0:	80801004 	addi	r2,r16,64
10004db4:	28800226 	beq	r5,r2,10004dc0 <_fflush_r+0xec>
10004db8:	9809883a 	mov	r4,r19
10004dbc:	00054040 	call	10005404 <_free_r>
10004dc0:	80000c15 	stw	zero,48(r16)
10004dc4:	0005883a 	mov	r2,zero
10004dc8:	dfc00417 	ldw	ra,16(sp)
10004dcc:	dcc00317 	ldw	r19,12(sp)
10004dd0:	dc800217 	ldw	r18,8(sp)
10004dd4:	dc400117 	ldw	r17,4(sp)
10004dd8:	dc000017 	ldw	r16,0(sp)
10004ddc:	dec00504 	addi	sp,sp,20
10004de0:	f800283a 	ret
10004de4:	84800417 	ldw	r18,16(r16)
10004de8:	903ff626 	beq	r18,zero,10004dc4 <__alt_data_end+0xf8004dc4>
10004dec:	84400017 	ldw	r17,0(r16)
10004df0:	108000cc 	andi	r2,r2,3
10004df4:	84800015 	stw	r18,0(r16)
10004df8:	8ca3c83a 	sub	r17,r17,r18
10004dfc:	10001526 	beq	r2,zero,10004e54 <_fflush_r+0x180>
10004e00:	0005883a 	mov	r2,zero
10004e04:	80800215 	stw	r2,8(r16)
10004e08:	04400316 	blt	zero,r17,10004e18 <_fflush_r+0x144>
10004e0c:	003fed06 	br	10004dc4 <__alt_data_end+0xf8004dc4>
10004e10:	90a5883a 	add	r18,r18,r2
10004e14:	047feb0e 	bge	zero,r17,10004dc4 <__alt_data_end+0xf8004dc4>
10004e18:	80800917 	ldw	r2,36(r16)
10004e1c:	81400717 	ldw	r5,28(r16)
10004e20:	880f883a 	mov	r7,r17
10004e24:	900d883a 	mov	r6,r18
10004e28:	9809883a 	mov	r4,r19
10004e2c:	103ee83a 	callr	r2
10004e30:	88a3c83a 	sub	r17,r17,r2
10004e34:	00bff616 	blt	zero,r2,10004e10 <__alt_data_end+0xf8004e10>
10004e38:	80c0030b 	ldhu	r3,12(r16)
10004e3c:	00bfffc4 	movi	r2,-1
10004e40:	18c01014 	ori	r3,r3,64
10004e44:	80c0030d 	sth	r3,12(r16)
10004e48:	003fdf06 	br	10004dc8 <__alt_data_end+0xf8004dc8>
10004e4c:	00052900 	call	10005290 <__sinit>
10004e50:	003fab06 	br	10004d00 <__alt_data_end+0xf8004d00>
10004e54:	80800517 	ldw	r2,20(r16)
10004e58:	003fea06 	br	10004e04 <__alt_data_end+0xf8004e04>
10004e5c:	81400717 	ldw	r5,28(r16)
10004e60:	000d883a 	mov	r6,zero
10004e64:	9809883a 	mov	r4,r19
10004e68:	01c00044 	movi	r7,1
10004e6c:	403ee83a 	callr	r8
10004e70:	100d883a 	mov	r6,r2
10004e74:	00bfffc4 	movi	r2,-1
10004e78:	30801326 	beq	r6,r2,10004ec8 <_fflush_r+0x1f4>
10004e7c:	8080030b 	ldhu	r2,12(r16)
10004e80:	82000a17 	ldw	r8,40(r16)
10004e84:	003fb006 	br	10004d48 <__alt_data_end+0xf8004d48>
10004e88:	80c00f17 	ldw	r3,60(r16)
10004e8c:	00ffa716 	blt	zero,r3,10004d2c <__alt_data_end+0xf8004d2c>
10004e90:	003fcc06 	br	10004dc4 <__alt_data_end+0xf8004dc4>
10004e94:	98c00017 	ldw	r3,0(r19)
10004e98:	183fb926 	beq	r3,zero,10004d80 <__alt_data_end+0xf8004d80>
10004e9c:	01000744 	movi	r4,29
10004ea0:	19000226 	beq	r3,r4,10004eac <_fflush_r+0x1d8>
10004ea4:	01000584 	movi	r4,22
10004ea8:	1900101e 	bne	r3,r4,10004eec <_fflush_r+0x218>
10004eac:	8080030b 	ldhu	r2,12(r16)
10004eb0:	80c00417 	ldw	r3,16(r16)
10004eb4:	80000115 	stw	zero,4(r16)
10004eb8:	10bdffcc 	andi	r2,r2,63487
10004ebc:	8080030d 	sth	r2,12(r16)
10004ec0:	80c00015 	stw	r3,0(r16)
10004ec4:	003fb706 	br	10004da4 <__alt_data_end+0xf8004da4>
10004ec8:	98800017 	ldw	r2,0(r19)
10004ecc:	103feb26 	beq	r2,zero,10004e7c <__alt_data_end+0xf8004e7c>
10004ed0:	00c00744 	movi	r3,29
10004ed4:	10c00226 	beq	r2,r3,10004ee0 <_fflush_r+0x20c>
10004ed8:	00c00584 	movi	r3,22
10004edc:	10ffd61e 	bne	r2,r3,10004e38 <__alt_data_end+0xf8004e38>
10004ee0:	9c400015 	stw	r17,0(r19)
10004ee4:	0005883a 	mov	r2,zero
10004ee8:	003fb706 	br	10004dc8 <__alt_data_end+0xf8004dc8>
10004eec:	80c0030b 	ldhu	r3,12(r16)
10004ef0:	18c01014 	ori	r3,r3,64
10004ef4:	80c0030d 	sth	r3,12(r16)
10004ef8:	003fb306 	br	10004dc8 <__alt_data_end+0xf8004dc8>

10004efc <fflush>:
10004efc:	20000526 	beq	r4,zero,10004f14 <fflush+0x18>
10004f00:	00840074 	movhi	r2,4097
10004f04:	10a8e104 	addi	r2,r2,-23676
10004f08:	200b883a 	mov	r5,r4
10004f0c:	11000017 	ldw	r4,0(r2)
10004f10:	0004cd41 	jmpi	10004cd4 <_fflush_r>
10004f14:	00840074 	movhi	r2,4097
10004f18:	10a8e004 	addi	r2,r2,-23680
10004f1c:	11000017 	ldw	r4,0(r2)
10004f20:	01440034 	movhi	r5,4096
10004f24:	29533504 	addi	r5,r5,19668
10004f28:	00057ac1 	jmpi	100057ac <_fwalk_reent>

10004f2c <__fp_lock>:
10004f2c:	0005883a 	mov	r2,zero
10004f30:	f800283a 	ret

10004f34 <__fp_unlock>:
10004f34:	0005883a 	mov	r2,zero
10004f38:	f800283a 	ret

10004f3c <_cleanup_r>:
10004f3c:	01440034 	movhi	r5,4096
10004f40:	29578b04 	addi	r5,r5,24108
10004f44:	00056f41 	jmpi	100056f4 <_fwalk>

10004f48 <__sinit.part.1>:
10004f48:	defff604 	addi	sp,sp,-40
10004f4c:	00c40034 	movhi	r3,4096
10004f50:	dfc00915 	stw	ra,36(sp)
10004f54:	df000815 	stw	fp,32(sp)
10004f58:	ddc00715 	stw	r23,28(sp)
10004f5c:	dd800615 	stw	r22,24(sp)
10004f60:	dd400515 	stw	r21,20(sp)
10004f64:	dd000415 	stw	r20,16(sp)
10004f68:	dcc00315 	stw	r19,12(sp)
10004f6c:	dc800215 	stw	r18,8(sp)
10004f70:	dc400115 	stw	r17,4(sp)
10004f74:	dc000015 	stw	r16,0(sp)
10004f78:	18d3cf04 	addi	r3,r3,20284
10004f7c:	24000117 	ldw	r16,4(r4)
10004f80:	20c00f15 	stw	r3,60(r4)
10004f84:	07000044 	movi	fp,1
10004f88:	00c000c4 	movi	r3,3
10004f8c:	2080bb04 	addi	r2,r4,748
10004f90:	20c0b915 	stw	r3,740(r4)
10004f94:	27000e15 	stw	fp,56(r4)
10004f98:	2080ba15 	stw	r2,744(r4)
10004f9c:	2000b815 	stw	zero,736(r4)
10004fa0:	05c00204 	movi	r23,8
10004fa4:	00800104 	movi	r2,4
10004fa8:	2025883a 	mov	r18,r4
10004fac:	b80d883a 	mov	r6,r23
10004fb0:	81001704 	addi	r4,r16,92
10004fb4:	000b883a 	mov	r5,zero
10004fb8:	80000015 	stw	zero,0(r16)
10004fbc:	80000115 	stw	zero,4(r16)
10004fc0:	80000215 	stw	zero,8(r16)
10004fc4:	8080030d 	sth	r2,12(r16)
10004fc8:	80001915 	stw	zero,100(r16)
10004fcc:	8000038d 	sth	zero,14(r16)
10004fd0:	80000415 	stw	zero,16(r16)
10004fd4:	80000515 	stw	zero,20(r16)
10004fd8:	80000615 	stw	zero,24(r16)
10004fdc:	0005a1c0 	call	10005a1c <memset>
10004fe0:	05840034 	movhi	r22,4096
10004fe4:	94400217 	ldw	r17,8(r18)
10004fe8:	05440034 	movhi	r21,4096
10004fec:	05040034 	movhi	r20,4096
10004ff0:	04c40034 	movhi	r19,4096
10004ff4:	b596d004 	addi	r22,r22,23360
10004ff8:	ad56e704 	addi	r21,r21,23452
10004ffc:	a5170604 	addi	r20,r20,23576
10005000:	9cd71d04 	addi	r19,r19,23668
10005004:	85800815 	stw	r22,32(r16)
10005008:	85400915 	stw	r21,36(r16)
1000500c:	85000a15 	stw	r20,40(r16)
10005010:	84c00b15 	stw	r19,44(r16)
10005014:	84000715 	stw	r16,28(r16)
10005018:	00800284 	movi	r2,10
1000501c:	89001704 	addi	r4,r17,92
10005020:	b80d883a 	mov	r6,r23
10005024:	000b883a 	mov	r5,zero
10005028:	88000015 	stw	zero,0(r17)
1000502c:	88000115 	stw	zero,4(r17)
10005030:	88000215 	stw	zero,8(r17)
10005034:	8880030d 	sth	r2,12(r17)
10005038:	88001915 	stw	zero,100(r17)
1000503c:	8f00038d 	sth	fp,14(r17)
10005040:	88000415 	stw	zero,16(r17)
10005044:	88000515 	stw	zero,20(r17)
10005048:	88000615 	stw	zero,24(r17)
1000504c:	0005a1c0 	call	10005a1c <memset>
10005050:	94000317 	ldw	r16,12(r18)
10005054:	00800484 	movi	r2,18
10005058:	8c400715 	stw	r17,28(r17)
1000505c:	8d800815 	stw	r22,32(r17)
10005060:	8d400915 	stw	r21,36(r17)
10005064:	8d000a15 	stw	r20,40(r17)
10005068:	8cc00b15 	stw	r19,44(r17)
1000506c:	8080030d 	sth	r2,12(r16)
10005070:	00800084 	movi	r2,2
10005074:	80000015 	stw	zero,0(r16)
10005078:	80000115 	stw	zero,4(r16)
1000507c:	80000215 	stw	zero,8(r16)
10005080:	80001915 	stw	zero,100(r16)
10005084:	8080038d 	sth	r2,14(r16)
10005088:	80000415 	stw	zero,16(r16)
1000508c:	80000515 	stw	zero,20(r16)
10005090:	80000615 	stw	zero,24(r16)
10005094:	81001704 	addi	r4,r16,92
10005098:	000b883a 	mov	r5,zero
1000509c:	b80d883a 	mov	r6,r23
100050a0:	0005a1c0 	call	10005a1c <memset>
100050a4:	84000715 	stw	r16,28(r16)
100050a8:	85800815 	stw	r22,32(r16)
100050ac:	85400915 	stw	r21,36(r16)
100050b0:	85000a15 	stw	r20,40(r16)
100050b4:	84c00b15 	stw	r19,44(r16)
100050b8:	dfc00917 	ldw	ra,36(sp)
100050bc:	df000817 	ldw	fp,32(sp)
100050c0:	ddc00717 	ldw	r23,28(sp)
100050c4:	dd800617 	ldw	r22,24(sp)
100050c8:	dd400517 	ldw	r21,20(sp)
100050cc:	dd000417 	ldw	r20,16(sp)
100050d0:	dcc00317 	ldw	r19,12(sp)
100050d4:	dc800217 	ldw	r18,8(sp)
100050d8:	dc400117 	ldw	r17,4(sp)
100050dc:	dc000017 	ldw	r16,0(sp)
100050e0:	dec00a04 	addi	sp,sp,40
100050e4:	f800283a 	ret

100050e8 <__sfmoreglue>:
100050e8:	defffc04 	addi	sp,sp,-16
100050ec:	dc800215 	stw	r18,8(sp)
100050f0:	2825883a 	mov	r18,r5
100050f4:	dc000015 	stw	r16,0(sp)
100050f8:	01401a04 	movi	r5,104
100050fc:	2021883a 	mov	r16,r4
10005100:	9009883a 	mov	r4,r18
10005104:	dfc00315 	stw	ra,12(sp)
10005108:	dc400115 	stw	r17,4(sp)
1000510c:	00020b80 	call	100020b8 <__mulsi3>
10005110:	8009883a 	mov	r4,r16
10005114:	11400304 	addi	r5,r2,12
10005118:	1023883a 	mov	r17,r2
1000511c:	0003a8c0 	call	10003a8c <_malloc_r>
10005120:	1021883a 	mov	r16,r2
10005124:	10000726 	beq	r2,zero,10005144 <__sfmoreglue+0x5c>
10005128:	11000304 	addi	r4,r2,12
1000512c:	10000015 	stw	zero,0(r2)
10005130:	14800115 	stw	r18,4(r2)
10005134:	11000215 	stw	r4,8(r2)
10005138:	000b883a 	mov	r5,zero
1000513c:	880d883a 	mov	r6,r17
10005140:	0005a1c0 	call	10005a1c <memset>
10005144:	8005883a 	mov	r2,r16
10005148:	dfc00317 	ldw	ra,12(sp)
1000514c:	dc800217 	ldw	r18,8(sp)
10005150:	dc400117 	ldw	r17,4(sp)
10005154:	dc000017 	ldw	r16,0(sp)
10005158:	dec00404 	addi	sp,sp,16
1000515c:	f800283a 	ret

10005160 <__sfp>:
10005160:	00840074 	movhi	r2,4097
10005164:	defffb04 	addi	sp,sp,-20
10005168:	10a8e004 	addi	r2,r2,-23680
1000516c:	dc800215 	stw	r18,8(sp)
10005170:	14800017 	ldw	r18,0(r2)
10005174:	dcc00315 	stw	r19,12(sp)
10005178:	dfc00415 	stw	ra,16(sp)
1000517c:	90800e17 	ldw	r2,56(r18)
10005180:	dc400115 	stw	r17,4(sp)
10005184:	dc000015 	stw	r16,0(sp)
10005188:	2027883a 	mov	r19,r4
1000518c:	1000021e 	bne	r2,zero,10005198 <__sfp+0x38>
10005190:	9009883a 	mov	r4,r18
10005194:	0004f480 	call	10004f48 <__sinit.part.1>
10005198:	9480b804 	addi	r18,r18,736
1000519c:	047fffc4 	movi	r17,-1
100051a0:	91400117 	ldw	r5,4(r18)
100051a4:	94000217 	ldw	r16,8(r18)
100051a8:	297fffc4 	addi	r5,r5,-1
100051ac:	28000a16 	blt	r5,zero,100051d8 <__sfp+0x78>
100051b0:	8080030f 	ldh	r2,12(r16)
100051b4:	10000c26 	beq	r2,zero,100051e8 <__sfp+0x88>
100051b8:	80c01d04 	addi	r3,r16,116
100051bc:	00000206 	br	100051c8 <__sfp+0x68>
100051c0:	18bfe60f 	ldh	r2,-104(r3)
100051c4:	10000826 	beq	r2,zero,100051e8 <__sfp+0x88>
100051c8:	297fffc4 	addi	r5,r5,-1
100051cc:	1c3ffd04 	addi	r16,r3,-12
100051d0:	18c01a04 	addi	r3,r3,104
100051d4:	2c7ffa1e 	bne	r5,r17,100051c0 <__alt_data_end+0xf80051c0>
100051d8:	90800017 	ldw	r2,0(r18)
100051dc:	10001d26 	beq	r2,zero,10005254 <__sfp+0xf4>
100051e0:	1025883a 	mov	r18,r2
100051e4:	003fee06 	br	100051a0 <__alt_data_end+0xf80051a0>
100051e8:	00bfffc4 	movi	r2,-1
100051ec:	8080038d 	sth	r2,14(r16)
100051f0:	00800044 	movi	r2,1
100051f4:	8080030d 	sth	r2,12(r16)
100051f8:	80001915 	stw	zero,100(r16)
100051fc:	80000015 	stw	zero,0(r16)
10005200:	80000215 	stw	zero,8(r16)
10005204:	80000115 	stw	zero,4(r16)
10005208:	80000415 	stw	zero,16(r16)
1000520c:	80000515 	stw	zero,20(r16)
10005210:	80000615 	stw	zero,24(r16)
10005214:	81001704 	addi	r4,r16,92
10005218:	000b883a 	mov	r5,zero
1000521c:	01800204 	movi	r6,8
10005220:	0005a1c0 	call	10005a1c <memset>
10005224:	8005883a 	mov	r2,r16
10005228:	80000c15 	stw	zero,48(r16)
1000522c:	80000d15 	stw	zero,52(r16)
10005230:	80001115 	stw	zero,68(r16)
10005234:	80001215 	stw	zero,72(r16)
10005238:	dfc00417 	ldw	ra,16(sp)
1000523c:	dcc00317 	ldw	r19,12(sp)
10005240:	dc800217 	ldw	r18,8(sp)
10005244:	dc400117 	ldw	r17,4(sp)
10005248:	dc000017 	ldw	r16,0(sp)
1000524c:	dec00504 	addi	sp,sp,20
10005250:	f800283a 	ret
10005254:	9809883a 	mov	r4,r19
10005258:	01400104 	movi	r5,4
1000525c:	00050e80 	call	100050e8 <__sfmoreglue>
10005260:	90800015 	stw	r2,0(r18)
10005264:	103fde1e 	bne	r2,zero,100051e0 <__alt_data_end+0xf80051e0>
10005268:	00800304 	movi	r2,12
1000526c:	98800015 	stw	r2,0(r19)
10005270:	0005883a 	mov	r2,zero
10005274:	003ff006 	br	10005238 <__alt_data_end+0xf8005238>

10005278 <_cleanup>:
10005278:	00840074 	movhi	r2,4097
1000527c:	10a8e004 	addi	r2,r2,-23680
10005280:	11000017 	ldw	r4,0(r2)
10005284:	01440034 	movhi	r5,4096
10005288:	29578b04 	addi	r5,r5,24108
1000528c:	00056f41 	jmpi	100056f4 <_fwalk>

10005290 <__sinit>:
10005290:	20800e17 	ldw	r2,56(r4)
10005294:	10000126 	beq	r2,zero,1000529c <__sinit+0xc>
10005298:	f800283a 	ret
1000529c:	0004f481 	jmpi	10004f48 <__sinit.part.1>

100052a0 <__sfp_lock_acquire>:
100052a0:	f800283a 	ret

100052a4 <__sfp_lock_release>:
100052a4:	f800283a 	ret

100052a8 <__sinit_lock_acquire>:
100052a8:	f800283a 	ret

100052ac <__sinit_lock_release>:
100052ac:	f800283a 	ret

100052b0 <__fp_lock_all>:
100052b0:	00840074 	movhi	r2,4097
100052b4:	10a8e104 	addi	r2,r2,-23676
100052b8:	11000017 	ldw	r4,0(r2)
100052bc:	01440034 	movhi	r5,4096
100052c0:	2953cb04 	addi	r5,r5,20268
100052c4:	00056f41 	jmpi	100056f4 <_fwalk>

100052c8 <__fp_unlock_all>:
100052c8:	00840074 	movhi	r2,4097
100052cc:	10a8e104 	addi	r2,r2,-23676
100052d0:	11000017 	ldw	r4,0(r2)
100052d4:	01440034 	movhi	r5,4096
100052d8:	2953cd04 	addi	r5,r5,20276
100052dc:	00056f41 	jmpi	100056f4 <_fwalk>

100052e0 <_malloc_trim_r>:
100052e0:	defffb04 	addi	sp,sp,-20
100052e4:	dcc00315 	stw	r19,12(sp)
100052e8:	04c40074 	movhi	r19,4097
100052ec:	dc800215 	stw	r18,8(sp)
100052f0:	dc400115 	stw	r17,4(sp)
100052f4:	dc000015 	stw	r16,0(sp)
100052f8:	dfc00415 	stw	ra,16(sp)
100052fc:	2821883a 	mov	r16,r5
10005300:	9ce35c04 	addi	r19,r19,-29328
10005304:	2025883a 	mov	r18,r4
10005308:	00066900 	call	10006690 <__malloc_lock>
1000530c:	98800217 	ldw	r2,8(r19)
10005310:	14400117 	ldw	r17,4(r2)
10005314:	00bfff04 	movi	r2,-4
10005318:	88a2703a 	and	r17,r17,r2
1000531c:	8c21c83a 	sub	r16,r17,r16
10005320:	8403fbc4 	addi	r16,r16,4079
10005324:	8020d33a 	srli	r16,r16,12
10005328:	0083ffc4 	movi	r2,4095
1000532c:	843fffc4 	addi	r16,r16,-1
10005330:	8020933a 	slli	r16,r16,12
10005334:	1400060e 	bge	r2,r16,10005350 <_malloc_trim_r+0x70>
10005338:	9009883a 	mov	r4,r18
1000533c:	000b883a 	mov	r5,zero
10005340:	0004b500 	call	10004b50 <_sbrk_r>
10005344:	98c00217 	ldw	r3,8(r19)
10005348:	1c47883a 	add	r3,r3,r17
1000534c:	10c00a26 	beq	r2,r3,10005378 <_malloc_trim_r+0x98>
10005350:	9009883a 	mov	r4,r18
10005354:	00066b00 	call	100066b0 <__malloc_unlock>
10005358:	0005883a 	mov	r2,zero
1000535c:	dfc00417 	ldw	ra,16(sp)
10005360:	dcc00317 	ldw	r19,12(sp)
10005364:	dc800217 	ldw	r18,8(sp)
10005368:	dc400117 	ldw	r17,4(sp)
1000536c:	dc000017 	ldw	r16,0(sp)
10005370:	dec00504 	addi	sp,sp,20
10005374:	f800283a 	ret
10005378:	9009883a 	mov	r4,r18
1000537c:	040bc83a 	sub	r5,zero,r16
10005380:	0004b500 	call	10004b50 <_sbrk_r>
10005384:	00ffffc4 	movi	r3,-1
10005388:	10c00d26 	beq	r2,r3,100053c0 <_malloc_trim_r+0xe0>
1000538c:	00c40074 	movhi	r3,4097
10005390:	18ef9b04 	addi	r3,r3,-16788
10005394:	18800017 	ldw	r2,0(r3)
10005398:	99000217 	ldw	r4,8(r19)
1000539c:	8c23c83a 	sub	r17,r17,r16
100053a0:	8c400054 	ori	r17,r17,1
100053a4:	1421c83a 	sub	r16,r2,r16
100053a8:	24400115 	stw	r17,4(r4)
100053ac:	9009883a 	mov	r4,r18
100053b0:	1c000015 	stw	r16,0(r3)
100053b4:	00066b00 	call	100066b0 <__malloc_unlock>
100053b8:	00800044 	movi	r2,1
100053bc:	003fe706 	br	1000535c <__alt_data_end+0xf800535c>
100053c0:	9009883a 	mov	r4,r18
100053c4:	000b883a 	mov	r5,zero
100053c8:	0004b500 	call	10004b50 <_sbrk_r>
100053cc:	99000217 	ldw	r4,8(r19)
100053d0:	014003c4 	movi	r5,15
100053d4:	1107c83a 	sub	r3,r2,r4
100053d8:	28ffdd0e 	bge	r5,r3,10005350 <__alt_data_end+0xf8005350>
100053dc:	01440074 	movhi	r5,4097
100053e0:	2968e204 	addi	r5,r5,-23672
100053e4:	29400017 	ldw	r5,0(r5)
100053e8:	18c00054 	ori	r3,r3,1
100053ec:	20c00115 	stw	r3,4(r4)
100053f0:	00c40074 	movhi	r3,4097
100053f4:	1145c83a 	sub	r2,r2,r5
100053f8:	18ef9b04 	addi	r3,r3,-16788
100053fc:	18800015 	stw	r2,0(r3)
10005400:	003fd306 	br	10005350 <__alt_data_end+0xf8005350>

10005404 <_free_r>:
10005404:	28004c26 	beq	r5,zero,10005538 <_free_r+0x134>
10005408:	defffd04 	addi	sp,sp,-12
1000540c:	dc400115 	stw	r17,4(sp)
10005410:	dc000015 	stw	r16,0(sp)
10005414:	2023883a 	mov	r17,r4
10005418:	2821883a 	mov	r16,r5
1000541c:	dfc00215 	stw	ra,8(sp)
10005420:	00066900 	call	10006690 <__malloc_lock>
10005424:	813fff17 	ldw	r4,-4(r16)
10005428:	00bfff84 	movi	r2,-2
1000542c:	02440074 	movhi	r9,4097
10005430:	81bffe04 	addi	r6,r16,-8
10005434:	2084703a 	and	r2,r4,r2
10005438:	4a635c04 	addi	r9,r9,-29328
1000543c:	308b883a 	add	r5,r6,r2
10005440:	2a000117 	ldw	r8,4(r5)
10005444:	49c00217 	ldw	r7,8(r9)
10005448:	00ffff04 	movi	r3,-4
1000544c:	40c6703a 	and	r3,r8,r3
10005450:	39405326 	beq	r7,r5,100055a0 <_free_r+0x19c>
10005454:	28c00115 	stw	r3,4(r5)
10005458:	2100004c 	andi	r4,r4,1
1000545c:	2000091e 	bne	r4,zero,10005484 <_free_r+0x80>
10005460:	81fffe17 	ldw	r7,-8(r16)
10005464:	4a000204 	addi	r8,r9,8
10005468:	31cdc83a 	sub	r6,r6,r7
1000546c:	31000217 	ldw	r4,8(r6)
10005470:	11c5883a 	add	r2,r2,r7
10005474:	22006126 	beq	r4,r8,100055fc <_free_r+0x1f8>
10005478:	31c00317 	ldw	r7,12(r6)
1000547c:	21c00315 	stw	r7,12(r4)
10005480:	39000215 	stw	r4,8(r7)
10005484:	28c9883a 	add	r4,r5,r3
10005488:	21c00117 	ldw	r7,4(r4)
1000548c:	39c0004c 	andi	r7,r7,1
10005490:	38000d1e 	bne	r7,zero,100054c8 <_free_r+0xc4>
10005494:	29000217 	ldw	r4,8(r5)
10005498:	10c5883a 	add	r2,r2,r3
1000549c:	00c40074 	movhi	r3,4097
100054a0:	18e35e04 	addi	r3,r3,-29320
100054a4:	20c07526 	beq	r4,r3,1000567c <_free_r+0x278>
100054a8:	29c00317 	ldw	r7,12(r5)
100054ac:	11400054 	ori	r5,r2,1
100054b0:	3087883a 	add	r3,r6,r2
100054b4:	21c00315 	stw	r7,12(r4)
100054b8:	39000215 	stw	r4,8(r7)
100054bc:	31400115 	stw	r5,4(r6)
100054c0:	18800015 	stw	r2,0(r3)
100054c4:	00000406 	br	100054d8 <_free_r+0xd4>
100054c8:	10c00054 	ori	r3,r2,1
100054cc:	30c00115 	stw	r3,4(r6)
100054d0:	3087883a 	add	r3,r6,r2
100054d4:	18800015 	stw	r2,0(r3)
100054d8:	00c07fc4 	movi	r3,511
100054dc:	18801736 	bltu	r3,r2,1000553c <_free_r+0x138>
100054e0:	1004d0fa 	srli	r2,r2,3
100054e4:	01400044 	movi	r5,1
100054e8:	49000117 	ldw	r4,4(r9)
100054ec:	1087883a 	add	r3,r2,r2
100054f0:	18c7883a 	add	r3,r3,r3
100054f4:	1005d0ba 	srai	r2,r2,2
100054f8:	18c7883a 	add	r3,r3,r3
100054fc:	1a47883a 	add	r3,r3,r9
10005500:	19c00217 	ldw	r7,8(r3)
10005504:	2884983a 	sll	r2,r5,r2
10005508:	30c00315 	stw	r3,12(r6)
1000550c:	31c00215 	stw	r7,8(r6)
10005510:	1104b03a 	or	r2,r2,r4
10005514:	19800215 	stw	r6,8(r3)
10005518:	48800115 	stw	r2,4(r9)
1000551c:	39800315 	stw	r6,12(r7)
10005520:	8809883a 	mov	r4,r17
10005524:	dfc00217 	ldw	ra,8(sp)
10005528:	dc400117 	ldw	r17,4(sp)
1000552c:	dc000017 	ldw	r16,0(sp)
10005530:	dec00304 	addi	sp,sp,12
10005534:	00066b01 	jmpi	100066b0 <__malloc_unlock>
10005538:	f800283a 	ret
1000553c:	1006d27a 	srli	r3,r2,9
10005540:	01000104 	movi	r4,4
10005544:	20c04036 	bltu	r4,r3,10005648 <_free_r+0x244>
10005548:	1006d1ba 	srli	r3,r2,6
1000554c:	19400e04 	addi	r5,r3,56
10005550:	2947883a 	add	r3,r5,r5
10005554:	18c7883a 	add	r3,r3,r3
10005558:	18c7883a 	add	r3,r3,r3
1000555c:	1a49883a 	add	r4,r3,r9
10005560:	20c00217 	ldw	r3,8(r4)
10005564:	01c40074 	movhi	r7,4097
10005568:	39e35c04 	addi	r7,r7,-29328
1000556c:	19003b26 	beq	r3,r4,1000565c <_free_r+0x258>
10005570:	01ffff04 	movi	r7,-4
10005574:	19400117 	ldw	r5,4(r3)
10005578:	29ca703a 	and	r5,r5,r7
1000557c:	1140022e 	bgeu	r2,r5,10005588 <_free_r+0x184>
10005580:	18c00217 	ldw	r3,8(r3)
10005584:	20fffb1e 	bne	r4,r3,10005574 <__alt_data_end+0xf8005574>
10005588:	18800317 	ldw	r2,12(r3)
1000558c:	30800315 	stw	r2,12(r6)
10005590:	30c00215 	stw	r3,8(r6)
10005594:	11800215 	stw	r6,8(r2)
10005598:	19800315 	stw	r6,12(r3)
1000559c:	003fe006 	br	10005520 <__alt_data_end+0xf8005520>
100055a0:	2100004c 	andi	r4,r4,1
100055a4:	1885883a 	add	r2,r3,r2
100055a8:	2000071e 	bne	r4,zero,100055c8 <_free_r+0x1c4>
100055ac:	817ffe17 	ldw	r5,-8(r16)
100055b0:	314dc83a 	sub	r6,r6,r5
100055b4:	30c00317 	ldw	r3,12(r6)
100055b8:	31000217 	ldw	r4,8(r6)
100055bc:	1145883a 	add	r2,r2,r5
100055c0:	20c00315 	stw	r3,12(r4)
100055c4:	19000215 	stw	r4,8(r3)
100055c8:	10c00054 	ori	r3,r2,1
100055cc:	30c00115 	stw	r3,4(r6)
100055d0:	00c40074 	movhi	r3,4097
100055d4:	18e8e304 	addi	r3,r3,-23668
100055d8:	18c00017 	ldw	r3,0(r3)
100055dc:	49800215 	stw	r6,8(r9)
100055e0:	10ffcf36 	bltu	r2,r3,10005520 <__alt_data_end+0xf8005520>
100055e4:	00840074 	movhi	r2,4097
100055e8:	10af9204 	addi	r2,r2,-16824
100055ec:	11400017 	ldw	r5,0(r2)
100055f0:	8809883a 	mov	r4,r17
100055f4:	00052e00 	call	100052e0 <_malloc_trim_r>
100055f8:	003fc906 	br	10005520 <__alt_data_end+0xf8005520>
100055fc:	28c9883a 	add	r4,r5,r3
10005600:	21000117 	ldw	r4,4(r4)
10005604:	2100004c 	andi	r4,r4,1
10005608:	20000a1e 	bne	r4,zero,10005634 <_free_r+0x230>
1000560c:	29000317 	ldw	r4,12(r5)
10005610:	29400217 	ldw	r5,8(r5)
10005614:	10c5883a 	add	r2,r2,r3
10005618:	10c00054 	ori	r3,r2,1
1000561c:	29000315 	stw	r4,12(r5)
10005620:	21400215 	stw	r5,8(r4)
10005624:	30c00115 	stw	r3,4(r6)
10005628:	308d883a 	add	r6,r6,r2
1000562c:	30800015 	stw	r2,0(r6)
10005630:	003fbb06 	br	10005520 <__alt_data_end+0xf8005520>
10005634:	10c00054 	ori	r3,r2,1
10005638:	30c00115 	stw	r3,4(r6)
1000563c:	308d883a 	add	r6,r6,r2
10005640:	30800015 	stw	r2,0(r6)
10005644:	003fb606 	br	10005520 <__alt_data_end+0xf8005520>
10005648:	01000504 	movi	r4,20
1000564c:	20c01436 	bltu	r4,r3,100056a0 <_free_r+0x29c>
10005650:	194016c4 	addi	r5,r3,91
10005654:	2947883a 	add	r3,r5,r5
10005658:	003fbe06 	br	10005554 <__alt_data_end+0xf8005554>
1000565c:	280bd0ba 	srai	r5,r5,2
10005660:	00800044 	movi	r2,1
10005664:	39000117 	ldw	r4,4(r7)
10005668:	114a983a 	sll	r5,r2,r5
1000566c:	1805883a 	mov	r2,r3
10005670:	2908b03a 	or	r4,r5,r4
10005674:	39000115 	stw	r4,4(r7)
10005678:	003fc406 	br	1000558c <__alt_data_end+0xf800558c>
1000567c:	49800515 	stw	r6,20(r9)
10005680:	49800415 	stw	r6,16(r9)
10005684:	10c00054 	ori	r3,r2,1
10005688:	31000315 	stw	r4,12(r6)
1000568c:	31000215 	stw	r4,8(r6)
10005690:	30c00115 	stw	r3,4(r6)
10005694:	308d883a 	add	r6,r6,r2
10005698:	30800015 	stw	r2,0(r6)
1000569c:	003fa006 	br	10005520 <__alt_data_end+0xf8005520>
100056a0:	01001504 	movi	r4,84
100056a4:	20c00436 	bltu	r4,r3,100056b8 <_free_r+0x2b4>
100056a8:	1006d33a 	srli	r3,r2,12
100056ac:	19401b84 	addi	r5,r3,110
100056b0:	2947883a 	add	r3,r5,r5
100056b4:	003fa706 	br	10005554 <__alt_data_end+0xf8005554>
100056b8:	01005504 	movi	r4,340
100056bc:	20c00436 	bltu	r4,r3,100056d0 <_free_r+0x2cc>
100056c0:	1006d3fa 	srli	r3,r2,15
100056c4:	19401dc4 	addi	r5,r3,119
100056c8:	2947883a 	add	r3,r5,r5
100056cc:	003fa106 	br	10005554 <__alt_data_end+0xf8005554>
100056d0:	01015504 	movi	r4,1364
100056d4:	20c00436 	bltu	r4,r3,100056e8 <_free_r+0x2e4>
100056d8:	1006d4ba 	srli	r3,r2,18
100056dc:	19401f04 	addi	r5,r3,124
100056e0:	2947883a 	add	r3,r5,r5
100056e4:	003f9b06 	br	10005554 <__alt_data_end+0xf8005554>
100056e8:	00c03f04 	movi	r3,252
100056ec:	01401f84 	movi	r5,126
100056f0:	003f9806 	br	10005554 <__alt_data_end+0xf8005554>

100056f4 <_fwalk>:
100056f4:	defff804 	addi	sp,sp,-32
100056f8:	dd400515 	stw	r21,20(sp)
100056fc:	2540b804 	addi	r21,r4,736
10005700:	dd800615 	stw	r22,24(sp)
10005704:	dd000415 	stw	r20,16(sp)
10005708:	dfc00715 	stw	ra,28(sp)
1000570c:	dcc00315 	stw	r19,12(sp)
10005710:	dc800215 	stw	r18,8(sp)
10005714:	dc400115 	stw	r17,4(sp)
10005718:	dc000015 	stw	r16,0(sp)
1000571c:	2829883a 	mov	r20,r5
10005720:	002d883a 	mov	r22,zero
10005724:	00052a00 	call	100052a0 <__sfp_lock_acquire>
10005728:	a8001426 	beq	r21,zero,1000577c <_fwalk+0x88>
1000572c:	04ffffc4 	movi	r19,-1
10005730:	ac400117 	ldw	r17,4(r21)
10005734:	ac800217 	ldw	r18,8(r21)
10005738:	8c7fffc4 	addi	r17,r17,-1
1000573c:	88000d16 	blt	r17,zero,10005774 <_fwalk+0x80>
10005740:	94000304 	addi	r16,r18,12
10005744:	94800384 	addi	r18,r18,14
10005748:	80c0000f 	ldh	r3,0(r16)
1000574c:	8c7fffc4 	addi	r17,r17,-1
10005750:	813ffd04 	addi	r4,r16,-12
10005754:	18000426 	beq	r3,zero,10005768 <_fwalk+0x74>
10005758:	90c0000f 	ldh	r3,0(r18)
1000575c:	1cc00226 	beq	r3,r19,10005768 <_fwalk+0x74>
10005760:	a03ee83a 	callr	r20
10005764:	b0acb03a 	or	r22,r22,r2
10005768:	84001a04 	addi	r16,r16,104
1000576c:	94801a04 	addi	r18,r18,104
10005770:	8cfff51e 	bne	r17,r19,10005748 <__alt_data_end+0xf8005748>
10005774:	ad400017 	ldw	r21,0(r21)
10005778:	a83fed1e 	bne	r21,zero,10005730 <__alt_data_end+0xf8005730>
1000577c:	00052a40 	call	100052a4 <__sfp_lock_release>
10005780:	b005883a 	mov	r2,r22
10005784:	dfc00717 	ldw	ra,28(sp)
10005788:	dd800617 	ldw	r22,24(sp)
1000578c:	dd400517 	ldw	r21,20(sp)
10005790:	dd000417 	ldw	r20,16(sp)
10005794:	dcc00317 	ldw	r19,12(sp)
10005798:	dc800217 	ldw	r18,8(sp)
1000579c:	dc400117 	ldw	r17,4(sp)
100057a0:	dc000017 	ldw	r16,0(sp)
100057a4:	dec00804 	addi	sp,sp,32
100057a8:	f800283a 	ret

100057ac <_fwalk_reent>:
100057ac:	defff804 	addi	sp,sp,-32
100057b0:	dd400515 	stw	r21,20(sp)
100057b4:	2540b804 	addi	r21,r4,736
100057b8:	dd800615 	stw	r22,24(sp)
100057bc:	dd000415 	stw	r20,16(sp)
100057c0:	dcc00315 	stw	r19,12(sp)
100057c4:	dfc00715 	stw	ra,28(sp)
100057c8:	dc800215 	stw	r18,8(sp)
100057cc:	dc400115 	stw	r17,4(sp)
100057d0:	dc000015 	stw	r16,0(sp)
100057d4:	2027883a 	mov	r19,r4
100057d8:	2829883a 	mov	r20,r5
100057dc:	002d883a 	mov	r22,zero
100057e0:	00052a00 	call	100052a0 <__sfp_lock_acquire>
100057e4:	a8001326 	beq	r21,zero,10005834 <_fwalk_reent+0x88>
100057e8:	04bfffc4 	movi	r18,-1
100057ec:	ac400117 	ldw	r17,4(r21)
100057f0:	ac000217 	ldw	r16,8(r21)
100057f4:	8c7fffc4 	addi	r17,r17,-1
100057f8:	88000c16 	blt	r17,zero,1000582c <_fwalk_reent+0x80>
100057fc:	84000304 	addi	r16,r16,12
10005800:	80c0000f 	ldh	r3,0(r16)
10005804:	8c7fffc4 	addi	r17,r17,-1
10005808:	817ffd04 	addi	r5,r16,-12
1000580c:	18000526 	beq	r3,zero,10005824 <_fwalk_reent+0x78>
10005810:	80c0008f 	ldh	r3,2(r16)
10005814:	9809883a 	mov	r4,r19
10005818:	1c800226 	beq	r3,r18,10005824 <_fwalk_reent+0x78>
1000581c:	a03ee83a 	callr	r20
10005820:	b0acb03a 	or	r22,r22,r2
10005824:	84001a04 	addi	r16,r16,104
10005828:	8cbff51e 	bne	r17,r18,10005800 <__alt_data_end+0xf8005800>
1000582c:	ad400017 	ldw	r21,0(r21)
10005830:	a83fee1e 	bne	r21,zero,100057ec <__alt_data_end+0xf80057ec>
10005834:	00052a40 	call	100052a4 <__sfp_lock_release>
10005838:	b005883a 	mov	r2,r22
1000583c:	dfc00717 	ldw	ra,28(sp)
10005840:	dd800617 	ldw	r22,24(sp)
10005844:	dd400517 	ldw	r21,20(sp)
10005848:	dd000417 	ldw	r20,16(sp)
1000584c:	dcc00317 	ldw	r19,12(sp)
10005850:	dc800217 	ldw	r18,8(sp)
10005854:	dc400117 	ldw	r17,4(sp)
10005858:	dc000017 	ldw	r16,0(sp)
1000585c:	dec00804 	addi	sp,sp,32
10005860:	f800283a 	ret

10005864 <__smakebuf_r>:
10005864:	2880030b 	ldhu	r2,12(r5)
10005868:	10c0008c 	andi	r3,r2,2
1000586c:	1800401e 	bne	r3,zero,10005970 <__smakebuf_r+0x10c>
10005870:	deffec04 	addi	sp,sp,-80
10005874:	dc000f15 	stw	r16,60(sp)
10005878:	2821883a 	mov	r16,r5
1000587c:	2940038f 	ldh	r5,14(r5)
10005880:	dc401015 	stw	r17,64(sp)
10005884:	dfc01315 	stw	ra,76(sp)
10005888:	dcc01215 	stw	r19,72(sp)
1000588c:	dc801115 	stw	r18,68(sp)
10005890:	2023883a 	mov	r17,r4
10005894:	28001b16 	blt	r5,zero,10005904 <__smakebuf_r+0xa0>
10005898:	d80d883a 	mov	r6,sp
1000589c:	0005e400 	call	10005e40 <_fstat_r>
100058a0:	10001716 	blt	r2,zero,10005900 <__smakebuf_r+0x9c>
100058a4:	d8800117 	ldw	r2,4(sp)
100058a8:	00e00014 	movui	r3,32768
100058ac:	10bc000c 	andi	r2,r2,61440
100058b0:	10c03726 	beq	r2,r3,10005990 <__smakebuf_r+0x12c>
100058b4:	80c0030b 	ldhu	r3,12(r16)
100058b8:	18c20014 	ori	r3,r3,2048
100058bc:	80c0030d 	sth	r3,12(r16)
100058c0:	00c80004 	movi	r3,8192
100058c4:	10c03c1e 	bne	r2,r3,100059b8 <__smakebuf_r+0x154>
100058c8:	8140038f 	ldh	r5,14(r16)
100058cc:	8809883a 	mov	r4,r17
100058d0:	0005e980 	call	10005e98 <_isatty_r>
100058d4:	10004e26 	beq	r2,zero,10005a10 <__smakebuf_r+0x1ac>
100058d8:	8080030b 	ldhu	r2,12(r16)
100058dc:	04c00044 	movi	r19,1
100058e0:	80c010c4 	addi	r3,r16,67
100058e4:	14c4b03a 	or	r2,r2,r19
100058e8:	8080030d 	sth	r2,12(r16)
100058ec:	80c00015 	stw	r3,0(r16)
100058f0:	80c00415 	stw	r3,16(r16)
100058f4:	84c00515 	stw	r19,20(r16)
100058f8:	04810004 	movi	r18,1024
100058fc:	00000706 	br	1000591c <__smakebuf_r+0xb8>
10005900:	8080030b 	ldhu	r2,12(r16)
10005904:	10c0200c 	andi	r3,r2,128
10005908:	18001f1e 	bne	r3,zero,10005988 <__smakebuf_r+0x124>
1000590c:	04810004 	movi	r18,1024
10005910:	10820014 	ori	r2,r2,2048
10005914:	8080030d 	sth	r2,12(r16)
10005918:	0027883a 	mov	r19,zero
1000591c:	8809883a 	mov	r4,r17
10005920:	900b883a 	mov	r5,r18
10005924:	0003a8c0 	call	10003a8c <_malloc_r>
10005928:	10002e26 	beq	r2,zero,100059e4 <__smakebuf_r+0x180>
1000592c:	80c0030b 	ldhu	r3,12(r16)
10005930:	01040034 	movhi	r4,4096
10005934:	2113cf04 	addi	r4,r4,20284
10005938:	89000f15 	stw	r4,60(r17)
1000593c:	18c02014 	ori	r3,r3,128
10005940:	80c0030d 	sth	r3,12(r16)
10005944:	80800015 	stw	r2,0(r16)
10005948:	80800415 	stw	r2,16(r16)
1000594c:	84800515 	stw	r18,20(r16)
10005950:	98001c1e 	bne	r19,zero,100059c4 <__smakebuf_r+0x160>
10005954:	dfc01317 	ldw	ra,76(sp)
10005958:	dcc01217 	ldw	r19,72(sp)
1000595c:	dc801117 	ldw	r18,68(sp)
10005960:	dc401017 	ldw	r17,64(sp)
10005964:	dc000f17 	ldw	r16,60(sp)
10005968:	dec01404 	addi	sp,sp,80
1000596c:	f800283a 	ret
10005970:	288010c4 	addi	r2,r5,67
10005974:	28800015 	stw	r2,0(r5)
10005978:	28800415 	stw	r2,16(r5)
1000597c:	00800044 	movi	r2,1
10005980:	28800515 	stw	r2,20(r5)
10005984:	f800283a 	ret
10005988:	04801004 	movi	r18,64
1000598c:	003fe006 	br	10005910 <__alt_data_end+0xf8005910>
10005990:	81000a17 	ldw	r4,40(r16)
10005994:	00c40034 	movhi	r3,4096
10005998:	18d70604 	addi	r3,r3,23576
1000599c:	20ffc51e 	bne	r4,r3,100058b4 <__alt_data_end+0xf80058b4>
100059a0:	80c0030b 	ldhu	r3,12(r16)
100059a4:	01010004 	movi	r4,1024
100059a8:	81001315 	stw	r4,76(r16)
100059ac:	1906b03a 	or	r3,r3,r4
100059b0:	80c0030d 	sth	r3,12(r16)
100059b4:	003fc206 	br	100058c0 <__alt_data_end+0xf80058c0>
100059b8:	0027883a 	mov	r19,zero
100059bc:	04810004 	movi	r18,1024
100059c0:	003fd606 	br	1000591c <__alt_data_end+0xf800591c>
100059c4:	8140038f 	ldh	r5,14(r16)
100059c8:	8809883a 	mov	r4,r17
100059cc:	0005e980 	call	10005e98 <_isatty_r>
100059d0:	103fe026 	beq	r2,zero,10005954 <__alt_data_end+0xf8005954>
100059d4:	8080030b 	ldhu	r2,12(r16)
100059d8:	10800054 	ori	r2,r2,1
100059dc:	8080030d 	sth	r2,12(r16)
100059e0:	003fdc06 	br	10005954 <__alt_data_end+0xf8005954>
100059e4:	8080030b 	ldhu	r2,12(r16)
100059e8:	10c0800c 	andi	r3,r2,512
100059ec:	183fd91e 	bne	r3,zero,10005954 <__alt_data_end+0xf8005954>
100059f0:	10800094 	ori	r2,r2,2
100059f4:	80c010c4 	addi	r3,r16,67
100059f8:	8080030d 	sth	r2,12(r16)
100059fc:	00800044 	movi	r2,1
10005a00:	80c00015 	stw	r3,0(r16)
10005a04:	80c00415 	stw	r3,16(r16)
10005a08:	80800515 	stw	r2,20(r16)
10005a0c:	003fd106 	br	10005954 <__alt_data_end+0xf8005954>
10005a10:	04c00044 	movi	r19,1
10005a14:	04810004 	movi	r18,1024
10005a18:	003fc006 	br	1000591c <__alt_data_end+0xf800591c>

10005a1c <memset>:
10005a1c:	20c000cc 	andi	r3,r4,3
10005a20:	2005883a 	mov	r2,r4
10005a24:	18004326 	beq	r3,zero,10005b34 <memset+0x118>
10005a28:	31ffffc4 	addi	r7,r6,-1
10005a2c:	30004026 	beq	r6,zero,10005b30 <memset+0x114>
10005a30:	2813883a 	mov	r9,r5
10005a34:	200d883a 	mov	r6,r4
10005a38:	2007883a 	mov	r3,r4
10005a3c:	00000406 	br	10005a50 <memset+0x34>
10005a40:	3a3fffc4 	addi	r8,r7,-1
10005a44:	31800044 	addi	r6,r6,1
10005a48:	38003926 	beq	r7,zero,10005b30 <memset+0x114>
10005a4c:	400f883a 	mov	r7,r8
10005a50:	18c00044 	addi	r3,r3,1
10005a54:	32400005 	stb	r9,0(r6)
10005a58:	1a0000cc 	andi	r8,r3,3
10005a5c:	403ff81e 	bne	r8,zero,10005a40 <__alt_data_end+0xf8005a40>
10005a60:	010000c4 	movi	r4,3
10005a64:	21c02d2e 	bgeu	r4,r7,10005b1c <memset+0x100>
10005a68:	29803fcc 	andi	r6,r5,255
10005a6c:	3008923a 	slli	r4,r6,8
10005a70:	218cb03a 	or	r6,r4,r6
10005a74:	3008943a 	slli	r4,r6,16
10005a78:	218cb03a 	or	r6,r4,r6
10005a7c:	010003c4 	movi	r4,15
10005a80:	21c0182e 	bgeu	r4,r7,10005ae4 <memset+0xc8>
10005a84:	3b3ffc04 	addi	r12,r7,-16
10005a88:	6018d13a 	srli	r12,r12,4
10005a8c:	1a000104 	addi	r8,r3,4
10005a90:	1ac00204 	addi	r11,r3,8
10005a94:	6008913a 	slli	r4,r12,4
10005a98:	1a800304 	addi	r10,r3,12
10005a9c:	1813883a 	mov	r9,r3
10005aa0:	21000504 	addi	r4,r4,20
10005aa4:	1909883a 	add	r4,r3,r4
10005aa8:	49800015 	stw	r6,0(r9)
10005aac:	41800015 	stw	r6,0(r8)
10005ab0:	59800015 	stw	r6,0(r11)
10005ab4:	51800015 	stw	r6,0(r10)
10005ab8:	42000404 	addi	r8,r8,16
10005abc:	4a400404 	addi	r9,r9,16
10005ac0:	5ac00404 	addi	r11,r11,16
10005ac4:	52800404 	addi	r10,r10,16
10005ac8:	413ff71e 	bne	r8,r4,10005aa8 <__alt_data_end+0xf8005aa8>
10005acc:	63000044 	addi	r12,r12,1
10005ad0:	6018913a 	slli	r12,r12,4
10005ad4:	39c003cc 	andi	r7,r7,15
10005ad8:	010000c4 	movi	r4,3
10005adc:	1b07883a 	add	r3,r3,r12
10005ae0:	21c00e2e 	bgeu	r4,r7,10005b1c <memset+0x100>
10005ae4:	1813883a 	mov	r9,r3
10005ae8:	3811883a 	mov	r8,r7
10005aec:	010000c4 	movi	r4,3
10005af0:	49800015 	stw	r6,0(r9)
10005af4:	423fff04 	addi	r8,r8,-4
10005af8:	4a400104 	addi	r9,r9,4
10005afc:	223ffc36 	bltu	r4,r8,10005af0 <__alt_data_end+0xf8005af0>
10005b00:	393fff04 	addi	r4,r7,-4
10005b04:	2008d0ba 	srli	r4,r4,2
10005b08:	39c000cc 	andi	r7,r7,3
10005b0c:	21000044 	addi	r4,r4,1
10005b10:	2109883a 	add	r4,r4,r4
10005b14:	2109883a 	add	r4,r4,r4
10005b18:	1907883a 	add	r3,r3,r4
10005b1c:	38000426 	beq	r7,zero,10005b30 <memset+0x114>
10005b20:	19cf883a 	add	r7,r3,r7
10005b24:	19400005 	stb	r5,0(r3)
10005b28:	18c00044 	addi	r3,r3,1
10005b2c:	19fffd1e 	bne	r3,r7,10005b24 <__alt_data_end+0xf8005b24>
10005b30:	f800283a 	ret
10005b34:	2007883a 	mov	r3,r4
10005b38:	300f883a 	mov	r7,r6
10005b3c:	003fc806 	br	10005a60 <__alt_data_end+0xf8005a60>

10005b40 <__sread>:
10005b40:	defffe04 	addi	sp,sp,-8
10005b44:	dc000015 	stw	r16,0(sp)
10005b48:	2821883a 	mov	r16,r5
10005b4c:	2940038f 	ldh	r5,14(r5)
10005b50:	dfc00115 	stw	ra,4(sp)
10005b54:	0005f480 	call	10005f48 <_read_r>
10005b58:	10000716 	blt	r2,zero,10005b78 <__sread+0x38>
10005b5c:	80c01417 	ldw	r3,80(r16)
10005b60:	1887883a 	add	r3,r3,r2
10005b64:	80c01415 	stw	r3,80(r16)
10005b68:	dfc00117 	ldw	ra,4(sp)
10005b6c:	dc000017 	ldw	r16,0(sp)
10005b70:	dec00204 	addi	sp,sp,8
10005b74:	f800283a 	ret
10005b78:	80c0030b 	ldhu	r3,12(r16)
10005b7c:	18fbffcc 	andi	r3,r3,61439
10005b80:	80c0030d 	sth	r3,12(r16)
10005b84:	dfc00117 	ldw	ra,4(sp)
10005b88:	dc000017 	ldw	r16,0(sp)
10005b8c:	dec00204 	addi	sp,sp,8
10005b90:	f800283a 	ret

10005b94 <__seofread>:
10005b94:	0005883a 	mov	r2,zero
10005b98:	f800283a 	ret

10005b9c <__swrite>:
10005b9c:	2880030b 	ldhu	r2,12(r5)
10005ba0:	defffb04 	addi	sp,sp,-20
10005ba4:	dcc00315 	stw	r19,12(sp)
10005ba8:	dc800215 	stw	r18,8(sp)
10005bac:	dc400115 	stw	r17,4(sp)
10005bb0:	dc000015 	stw	r16,0(sp)
10005bb4:	dfc00415 	stw	ra,16(sp)
10005bb8:	10c0400c 	andi	r3,r2,256
10005bbc:	2821883a 	mov	r16,r5
10005bc0:	2027883a 	mov	r19,r4
10005bc4:	3025883a 	mov	r18,r6
10005bc8:	3823883a 	mov	r17,r7
10005bcc:	18000526 	beq	r3,zero,10005be4 <__swrite+0x48>
10005bd0:	2940038f 	ldh	r5,14(r5)
10005bd4:	000d883a 	mov	r6,zero
10005bd8:	01c00084 	movi	r7,2
10005bdc:	0005eec0 	call	10005eec <_lseek_r>
10005be0:	8080030b 	ldhu	r2,12(r16)
10005be4:	8140038f 	ldh	r5,14(r16)
10005be8:	10bbffcc 	andi	r2,r2,61439
10005bec:	9809883a 	mov	r4,r19
10005bf0:	900d883a 	mov	r6,r18
10005bf4:	880f883a 	mov	r7,r17
10005bf8:	8080030d 	sth	r2,12(r16)
10005bfc:	dfc00417 	ldw	ra,16(sp)
10005c00:	dcc00317 	ldw	r19,12(sp)
10005c04:	dc800217 	ldw	r18,8(sp)
10005c08:	dc400117 	ldw	r17,4(sp)
10005c0c:	dc000017 	ldw	r16,0(sp)
10005c10:	dec00504 	addi	sp,sp,20
10005c14:	0005c7c1 	jmpi	10005c7c <_write_r>

10005c18 <__sseek>:
10005c18:	defffe04 	addi	sp,sp,-8
10005c1c:	dc000015 	stw	r16,0(sp)
10005c20:	2821883a 	mov	r16,r5
10005c24:	2940038f 	ldh	r5,14(r5)
10005c28:	dfc00115 	stw	ra,4(sp)
10005c2c:	0005eec0 	call	10005eec <_lseek_r>
10005c30:	00ffffc4 	movi	r3,-1
10005c34:	10c00826 	beq	r2,r3,10005c58 <__sseek+0x40>
10005c38:	80c0030b 	ldhu	r3,12(r16)
10005c3c:	80801415 	stw	r2,80(r16)
10005c40:	18c40014 	ori	r3,r3,4096
10005c44:	80c0030d 	sth	r3,12(r16)
10005c48:	dfc00117 	ldw	ra,4(sp)
10005c4c:	dc000017 	ldw	r16,0(sp)
10005c50:	dec00204 	addi	sp,sp,8
10005c54:	f800283a 	ret
10005c58:	80c0030b 	ldhu	r3,12(r16)
10005c5c:	18fbffcc 	andi	r3,r3,61439
10005c60:	80c0030d 	sth	r3,12(r16)
10005c64:	dfc00117 	ldw	ra,4(sp)
10005c68:	dc000017 	ldw	r16,0(sp)
10005c6c:	dec00204 	addi	sp,sp,8
10005c70:	f800283a 	ret

10005c74 <__sclose>:
10005c74:	2940038f 	ldh	r5,14(r5)
10005c78:	0005cd81 	jmpi	10005cd8 <_close_r>

10005c7c <_write_r>:
10005c7c:	defffd04 	addi	sp,sp,-12
10005c80:	dc000015 	stw	r16,0(sp)
10005c84:	04040074 	movhi	r16,4097
10005c88:	dc400115 	stw	r17,4(sp)
10005c8c:	842f9304 	addi	r16,r16,-16820
10005c90:	2023883a 	mov	r17,r4
10005c94:	2809883a 	mov	r4,r5
10005c98:	300b883a 	mov	r5,r6
10005c9c:	380d883a 	mov	r6,r7
10005ca0:	dfc00215 	stw	ra,8(sp)
10005ca4:	80000015 	stw	zero,0(r16)
10005ca8:	00069a40 	call	100069a4 <write>
10005cac:	00ffffc4 	movi	r3,-1
10005cb0:	10c00526 	beq	r2,r3,10005cc8 <_write_r+0x4c>
10005cb4:	dfc00217 	ldw	ra,8(sp)
10005cb8:	dc400117 	ldw	r17,4(sp)
10005cbc:	dc000017 	ldw	r16,0(sp)
10005cc0:	dec00304 	addi	sp,sp,12
10005cc4:	f800283a 	ret
10005cc8:	80c00017 	ldw	r3,0(r16)
10005ccc:	183ff926 	beq	r3,zero,10005cb4 <__alt_data_end+0xf8005cb4>
10005cd0:	88c00015 	stw	r3,0(r17)
10005cd4:	003ff706 	br	10005cb4 <__alt_data_end+0xf8005cb4>

10005cd8 <_close_r>:
10005cd8:	defffd04 	addi	sp,sp,-12
10005cdc:	dc000015 	stw	r16,0(sp)
10005ce0:	04040074 	movhi	r16,4097
10005ce4:	dc400115 	stw	r17,4(sp)
10005ce8:	842f9304 	addi	r16,r16,-16820
10005cec:	2023883a 	mov	r17,r4
10005cf0:	2809883a 	mov	r4,r5
10005cf4:	dfc00215 	stw	ra,8(sp)
10005cf8:	80000015 	stw	zero,0(r16)
10005cfc:	00061000 	call	10006100 <close>
10005d00:	00ffffc4 	movi	r3,-1
10005d04:	10c00526 	beq	r2,r3,10005d1c <_close_r+0x44>
10005d08:	dfc00217 	ldw	ra,8(sp)
10005d0c:	dc400117 	ldw	r17,4(sp)
10005d10:	dc000017 	ldw	r16,0(sp)
10005d14:	dec00304 	addi	sp,sp,12
10005d18:	f800283a 	ret
10005d1c:	80c00017 	ldw	r3,0(r16)
10005d20:	183ff926 	beq	r3,zero,10005d08 <__alt_data_end+0xf8005d08>
10005d24:	88c00015 	stw	r3,0(r17)
10005d28:	003ff706 	br	10005d08 <__alt_data_end+0xf8005d08>

10005d2c <_fclose_r>:
10005d2c:	28003226 	beq	r5,zero,10005df8 <_fclose_r+0xcc>
10005d30:	defffc04 	addi	sp,sp,-16
10005d34:	dc400115 	stw	r17,4(sp)
10005d38:	2023883a 	mov	r17,r4
10005d3c:	dc000015 	stw	r16,0(sp)
10005d40:	dfc00315 	stw	ra,12(sp)
10005d44:	dc800215 	stw	r18,8(sp)
10005d48:	2821883a 	mov	r16,r5
10005d4c:	00052a00 	call	100052a0 <__sfp_lock_acquire>
10005d50:	88000226 	beq	r17,zero,10005d5c <_fclose_r+0x30>
10005d54:	88800e17 	ldw	r2,56(r17)
10005d58:	10002926 	beq	r2,zero,10005e00 <_fclose_r+0xd4>
10005d5c:	8080030f 	ldh	r2,12(r16)
10005d60:	10002226 	beq	r2,zero,10005dec <_fclose_r+0xc0>
10005d64:	8809883a 	mov	r4,r17
10005d68:	800b883a 	mov	r5,r16
10005d6c:	0004cd40 	call	10004cd4 <_fflush_r>
10005d70:	1025883a 	mov	r18,r2
10005d74:	80800b17 	ldw	r2,44(r16)
10005d78:	10000426 	beq	r2,zero,10005d8c <_fclose_r+0x60>
10005d7c:	81400717 	ldw	r5,28(r16)
10005d80:	8809883a 	mov	r4,r17
10005d84:	103ee83a 	callr	r2
10005d88:	10002616 	blt	r2,zero,10005e24 <_fclose_r+0xf8>
10005d8c:	8080030b 	ldhu	r2,12(r16)
10005d90:	1080200c 	andi	r2,r2,128
10005d94:	10001f1e 	bne	r2,zero,10005e14 <_fclose_r+0xe8>
10005d98:	81400c17 	ldw	r5,48(r16)
10005d9c:	28000526 	beq	r5,zero,10005db4 <_fclose_r+0x88>
10005da0:	80801004 	addi	r2,r16,64
10005da4:	28800226 	beq	r5,r2,10005db0 <_fclose_r+0x84>
10005da8:	8809883a 	mov	r4,r17
10005dac:	00054040 	call	10005404 <_free_r>
10005db0:	80000c15 	stw	zero,48(r16)
10005db4:	81401117 	ldw	r5,68(r16)
10005db8:	28000326 	beq	r5,zero,10005dc8 <_fclose_r+0x9c>
10005dbc:	8809883a 	mov	r4,r17
10005dc0:	00054040 	call	10005404 <_free_r>
10005dc4:	80001115 	stw	zero,68(r16)
10005dc8:	8000030d 	sth	zero,12(r16)
10005dcc:	00052a40 	call	100052a4 <__sfp_lock_release>
10005dd0:	9005883a 	mov	r2,r18
10005dd4:	dfc00317 	ldw	ra,12(sp)
10005dd8:	dc800217 	ldw	r18,8(sp)
10005ddc:	dc400117 	ldw	r17,4(sp)
10005de0:	dc000017 	ldw	r16,0(sp)
10005de4:	dec00404 	addi	sp,sp,16
10005de8:	f800283a 	ret
10005dec:	00052a40 	call	100052a4 <__sfp_lock_release>
10005df0:	0005883a 	mov	r2,zero
10005df4:	003ff706 	br	10005dd4 <__alt_data_end+0xf8005dd4>
10005df8:	0005883a 	mov	r2,zero
10005dfc:	f800283a 	ret
10005e00:	8809883a 	mov	r4,r17
10005e04:	00052900 	call	10005290 <__sinit>
10005e08:	8080030f 	ldh	r2,12(r16)
10005e0c:	103fd51e 	bne	r2,zero,10005d64 <__alt_data_end+0xf8005d64>
10005e10:	003ff606 	br	10005dec <__alt_data_end+0xf8005dec>
10005e14:	81400417 	ldw	r5,16(r16)
10005e18:	8809883a 	mov	r4,r17
10005e1c:	00054040 	call	10005404 <_free_r>
10005e20:	003fdd06 	br	10005d98 <__alt_data_end+0xf8005d98>
10005e24:	04bfffc4 	movi	r18,-1
10005e28:	003fd806 	br	10005d8c <__alt_data_end+0xf8005d8c>

10005e2c <fclose>:
10005e2c:	00840074 	movhi	r2,4097
10005e30:	10a8e104 	addi	r2,r2,-23676
10005e34:	200b883a 	mov	r5,r4
10005e38:	11000017 	ldw	r4,0(r2)
10005e3c:	0005d2c1 	jmpi	10005d2c <_fclose_r>

10005e40 <_fstat_r>:
10005e40:	defffd04 	addi	sp,sp,-12
10005e44:	dc000015 	stw	r16,0(sp)
10005e48:	04040074 	movhi	r16,4097
10005e4c:	dc400115 	stw	r17,4(sp)
10005e50:	842f9304 	addi	r16,r16,-16820
10005e54:	2023883a 	mov	r17,r4
10005e58:	2809883a 	mov	r4,r5
10005e5c:	300b883a 	mov	r5,r6
10005e60:	dfc00215 	stw	ra,8(sp)
10005e64:	80000015 	stw	zero,0(r16)
10005e68:	00062540 	call	10006254 <fstat>
10005e6c:	00ffffc4 	movi	r3,-1
10005e70:	10c00526 	beq	r2,r3,10005e88 <_fstat_r+0x48>
10005e74:	dfc00217 	ldw	ra,8(sp)
10005e78:	dc400117 	ldw	r17,4(sp)
10005e7c:	dc000017 	ldw	r16,0(sp)
10005e80:	dec00304 	addi	sp,sp,12
10005e84:	f800283a 	ret
10005e88:	80c00017 	ldw	r3,0(r16)
10005e8c:	183ff926 	beq	r3,zero,10005e74 <__alt_data_end+0xf8005e74>
10005e90:	88c00015 	stw	r3,0(r17)
10005e94:	003ff706 	br	10005e74 <__alt_data_end+0xf8005e74>

10005e98 <_isatty_r>:
10005e98:	defffd04 	addi	sp,sp,-12
10005e9c:	dc000015 	stw	r16,0(sp)
10005ea0:	04040074 	movhi	r16,4097
10005ea4:	dc400115 	stw	r17,4(sp)
10005ea8:	842f9304 	addi	r16,r16,-16820
10005eac:	2023883a 	mov	r17,r4
10005eb0:	2809883a 	mov	r4,r5
10005eb4:	dfc00215 	stw	ra,8(sp)
10005eb8:	80000015 	stw	zero,0(r16)
10005ebc:	000635c0 	call	1000635c <isatty>
10005ec0:	00ffffc4 	movi	r3,-1
10005ec4:	10c00526 	beq	r2,r3,10005edc <_isatty_r+0x44>
10005ec8:	dfc00217 	ldw	ra,8(sp)
10005ecc:	dc400117 	ldw	r17,4(sp)
10005ed0:	dc000017 	ldw	r16,0(sp)
10005ed4:	dec00304 	addi	sp,sp,12
10005ed8:	f800283a 	ret
10005edc:	80c00017 	ldw	r3,0(r16)
10005ee0:	183ff926 	beq	r3,zero,10005ec8 <__alt_data_end+0xf8005ec8>
10005ee4:	88c00015 	stw	r3,0(r17)
10005ee8:	003ff706 	br	10005ec8 <__alt_data_end+0xf8005ec8>

10005eec <_lseek_r>:
10005eec:	defffd04 	addi	sp,sp,-12
10005ef0:	dc000015 	stw	r16,0(sp)
10005ef4:	04040074 	movhi	r16,4097
10005ef8:	dc400115 	stw	r17,4(sp)
10005efc:	842f9304 	addi	r16,r16,-16820
10005f00:	2023883a 	mov	r17,r4
10005f04:	2809883a 	mov	r4,r5
10005f08:	300b883a 	mov	r5,r6
10005f0c:	380d883a 	mov	r6,r7
10005f10:	dfc00215 	stw	ra,8(sp)
10005f14:	80000015 	stw	zero,0(r16)
10005f18:	000653c0 	call	1000653c <lseek>
10005f1c:	00ffffc4 	movi	r3,-1
10005f20:	10c00526 	beq	r2,r3,10005f38 <_lseek_r+0x4c>
10005f24:	dfc00217 	ldw	ra,8(sp)
10005f28:	dc400117 	ldw	r17,4(sp)
10005f2c:	dc000017 	ldw	r16,0(sp)
10005f30:	dec00304 	addi	sp,sp,12
10005f34:	f800283a 	ret
10005f38:	80c00017 	ldw	r3,0(r16)
10005f3c:	183ff926 	beq	r3,zero,10005f24 <__alt_data_end+0xf8005f24>
10005f40:	88c00015 	stw	r3,0(r17)
10005f44:	003ff706 	br	10005f24 <__alt_data_end+0xf8005f24>

10005f48 <_read_r>:
10005f48:	defffd04 	addi	sp,sp,-12
10005f4c:	dc000015 	stw	r16,0(sp)
10005f50:	04040074 	movhi	r16,4097
10005f54:	dc400115 	stw	r17,4(sp)
10005f58:	842f9304 	addi	r16,r16,-16820
10005f5c:	2023883a 	mov	r17,r4
10005f60:	2809883a 	mov	r4,r5
10005f64:	300b883a 	mov	r5,r6
10005f68:	380d883a 	mov	r6,r7
10005f6c:	dfc00215 	stw	ra,8(sp)
10005f70:	80000015 	stw	zero,0(r16)
10005f74:	00067200 	call	10006720 <read>
10005f78:	00ffffc4 	movi	r3,-1
10005f7c:	10c00526 	beq	r2,r3,10005f94 <_read_r+0x4c>
10005f80:	dfc00217 	ldw	ra,8(sp)
10005f84:	dc400117 	ldw	r17,4(sp)
10005f88:	dc000017 	ldw	r16,0(sp)
10005f8c:	dec00304 	addi	sp,sp,12
10005f90:	f800283a 	ret
10005f94:	80c00017 	ldw	r3,0(r16)
10005f98:	183ff926 	beq	r3,zero,10005f80 <__alt_data_end+0xf8005f80>
10005f9c:	88c00015 	stw	r3,0(r17)
10005fa0:	003ff706 	br	10005f80 <__alt_data_end+0xf8005f80>

10005fa4 <__muldi3>:
10005fa4:	defff604 	addi	sp,sp,-40
10005fa8:	dd800615 	stw	r22,24(sp)
10005fac:	dd400515 	stw	r21,20(sp)
10005fb0:	25bfffcc 	andi	r22,r4,65535
10005fb4:	357fffcc 	andi	r21,r6,65535
10005fb8:	dc400115 	stw	r17,4(sp)
10005fbc:	2022d43a 	srli	r17,r4,16
10005fc0:	dcc00315 	stw	r19,12(sp)
10005fc4:	dc800215 	stw	r18,8(sp)
10005fc8:	2027883a 	mov	r19,r4
10005fcc:	2825883a 	mov	r18,r5
10005fd0:	a809883a 	mov	r4,r21
10005fd4:	b00b883a 	mov	r5,r22
10005fd8:	dfc00915 	stw	ra,36(sp)
10005fdc:	df000815 	stw	fp,32(sp)
10005fe0:	ddc00715 	stw	r23,28(sp)
10005fe4:	3839883a 	mov	fp,r7
10005fe8:	302ed43a 	srli	r23,r6,16
10005fec:	dd000415 	stw	r20,16(sp)
10005ff0:	dc000015 	stw	r16,0(sp)
10005ff4:	3029883a 	mov	r20,r6
10005ff8:	00020b80 	call	100020b8 <__mulsi3>
10005ffc:	a809883a 	mov	r4,r21
10006000:	880b883a 	mov	r5,r17
10006004:	1021883a 	mov	r16,r2
10006008:	00020b80 	call	100020b8 <__mulsi3>
1000600c:	880b883a 	mov	r5,r17
10006010:	b809883a 	mov	r4,r23
10006014:	102b883a 	mov	r21,r2
10006018:	00020b80 	call	100020b8 <__mulsi3>
1000601c:	b809883a 	mov	r4,r23
10006020:	b00b883a 	mov	r5,r22
10006024:	1023883a 	mov	r17,r2
10006028:	00020b80 	call	100020b8 <__mulsi3>
1000602c:	8012d43a 	srli	r9,r16,16
10006030:	a885883a 	add	r2,r21,r2
10006034:	1251883a 	add	r8,r2,r9
10006038:	4540022e 	bgeu	r8,r21,10006044 <__muldi3+0xa0>
1000603c:	00800074 	movhi	r2,1
10006040:	88a3883a 	add	r17,r17,r2
10006044:	4006d43a 	srli	r3,r8,16
10006048:	4010943a 	slli	r8,r8,16
1000604c:	9809883a 	mov	r4,r19
10006050:	e00b883a 	mov	r5,fp
10006054:	843fffcc 	andi	r16,r16,65535
10006058:	88e3883a 	add	r17,r17,r3
1000605c:	4421883a 	add	r16,r8,r16
10006060:	00020b80 	call	100020b8 <__mulsi3>
10006064:	a009883a 	mov	r4,r20
10006068:	900b883a 	mov	r5,r18
1000606c:	1027883a 	mov	r19,r2
10006070:	00020b80 	call	100020b8 <__mulsi3>
10006074:	9885883a 	add	r2,r19,r2
10006078:	1447883a 	add	r3,r2,r17
1000607c:	8005883a 	mov	r2,r16
10006080:	dfc00917 	ldw	ra,36(sp)
10006084:	df000817 	ldw	fp,32(sp)
10006088:	ddc00717 	ldw	r23,28(sp)
1000608c:	dd800617 	ldw	r22,24(sp)
10006090:	dd400517 	ldw	r21,20(sp)
10006094:	dd000417 	ldw	r20,16(sp)
10006098:	dcc00317 	ldw	r19,12(sp)
1000609c:	dc800217 	ldw	r18,8(sp)
100060a0:	dc400117 	ldw	r17,4(sp)
100060a4:	dc000017 	ldw	r16,0(sp)
100060a8:	dec00a04 	addi	sp,sp,40
100060ac:	f800283a 	ret

100060b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100060b0:	defffe04 	addi	sp,sp,-8
100060b4:	dfc00115 	stw	ra,4(sp)
100060b8:	df000015 	stw	fp,0(sp)
100060bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100060c0:	00840074 	movhi	r2,4097
100060c4:	10a8e904 	addi	r2,r2,-23644
100060c8:	10800017 	ldw	r2,0(r2)
100060cc:	10000526 	beq	r2,zero,100060e4 <alt_get_errno+0x34>
100060d0:	00840074 	movhi	r2,4097
100060d4:	10a8e904 	addi	r2,r2,-23644
100060d8:	10800017 	ldw	r2,0(r2)
100060dc:	103ee83a 	callr	r2
100060e0:	00000206 	br	100060ec <alt_get_errno+0x3c>
100060e4:	00840074 	movhi	r2,4097
100060e8:	10af9304 	addi	r2,r2,-16820
}
100060ec:	e037883a 	mov	sp,fp
100060f0:	dfc00117 	ldw	ra,4(sp)
100060f4:	df000017 	ldw	fp,0(sp)
100060f8:	dec00204 	addi	sp,sp,8
100060fc:	f800283a 	ret

10006100 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10006100:	defffb04 	addi	sp,sp,-20
10006104:	dfc00415 	stw	ra,16(sp)
10006108:	df000315 	stw	fp,12(sp)
1000610c:	df000304 	addi	fp,sp,12
10006110:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10006114:	e0bfff17 	ldw	r2,-4(fp)
10006118:	10000816 	blt	r2,zero,1000613c <close+0x3c>
1000611c:	e13fff17 	ldw	r4,-4(fp)
10006120:	01400304 	movi	r5,12
10006124:	00020b80 	call	100020b8 <__mulsi3>
10006128:	1007883a 	mov	r3,r2
1000612c:	00840074 	movhi	r2,4097
10006130:	10a46804 	addi	r2,r2,-28256
10006134:	1885883a 	add	r2,r3,r2
10006138:	00000106 	br	10006140 <close+0x40>
1000613c:	0005883a 	mov	r2,zero
10006140:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10006144:	e0bffd17 	ldw	r2,-12(fp)
10006148:	10001926 	beq	r2,zero,100061b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000614c:	e0bffd17 	ldw	r2,-12(fp)
10006150:	10800017 	ldw	r2,0(r2)
10006154:	10800417 	ldw	r2,16(r2)
10006158:	10000626 	beq	r2,zero,10006174 <close+0x74>
1000615c:	e0bffd17 	ldw	r2,-12(fp)
10006160:	10800017 	ldw	r2,0(r2)
10006164:	10800417 	ldw	r2,16(r2)
10006168:	e13ffd17 	ldw	r4,-12(fp)
1000616c:	103ee83a 	callr	r2
10006170:	00000106 	br	10006178 <close+0x78>
10006174:	0005883a 	mov	r2,zero
10006178:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000617c:	e13fff17 	ldw	r4,-4(fp)
10006180:	00068240 	call	10006824 <alt_release_fd>
    if (rval < 0)
10006184:	e0bffe17 	ldw	r2,-8(fp)
10006188:	1000070e 	bge	r2,zero,100061a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000618c:	00060b00 	call	100060b0 <alt_get_errno>
10006190:	1007883a 	mov	r3,r2
10006194:	e0bffe17 	ldw	r2,-8(fp)
10006198:	0085c83a 	sub	r2,zero,r2
1000619c:	18800015 	stw	r2,0(r3)
      return -1;
100061a0:	00bfffc4 	movi	r2,-1
100061a4:	00000706 	br	100061c4 <close+0xc4>
    }
    return 0;
100061a8:	0005883a 	mov	r2,zero
100061ac:	00000506 	br	100061c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100061b0:	00060b00 	call	100060b0 <alt_get_errno>
100061b4:	1007883a 	mov	r3,r2
100061b8:	00801444 	movi	r2,81
100061bc:	18800015 	stw	r2,0(r3)
    return -1;
100061c0:	00bfffc4 	movi	r2,-1
  }
}
100061c4:	e037883a 	mov	sp,fp
100061c8:	dfc00117 	ldw	ra,4(sp)
100061cc:	df000017 	ldw	fp,0(sp)
100061d0:	dec00204 	addi	sp,sp,8
100061d4:	f800283a 	ret

100061d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100061d8:	defffc04 	addi	sp,sp,-16
100061dc:	df000315 	stw	fp,12(sp)
100061e0:	df000304 	addi	fp,sp,12
100061e4:	e13ffd15 	stw	r4,-12(fp)
100061e8:	e17ffe15 	stw	r5,-8(fp)
100061ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
100061f0:	e0bfff17 	ldw	r2,-4(fp)
}
100061f4:	e037883a 	mov	sp,fp
100061f8:	df000017 	ldw	fp,0(sp)
100061fc:	dec00104 	addi	sp,sp,4
10006200:	f800283a 	ret

10006204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10006204:	defffe04 	addi	sp,sp,-8
10006208:	dfc00115 	stw	ra,4(sp)
1000620c:	df000015 	stw	fp,0(sp)
10006210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10006214:	00840074 	movhi	r2,4097
10006218:	10a8e904 	addi	r2,r2,-23644
1000621c:	10800017 	ldw	r2,0(r2)
10006220:	10000526 	beq	r2,zero,10006238 <alt_get_errno+0x34>
10006224:	00840074 	movhi	r2,4097
10006228:	10a8e904 	addi	r2,r2,-23644
1000622c:	10800017 	ldw	r2,0(r2)
10006230:	103ee83a 	callr	r2
10006234:	00000206 	br	10006240 <alt_get_errno+0x3c>
10006238:	00840074 	movhi	r2,4097
1000623c:	10af9304 	addi	r2,r2,-16820
}
10006240:	e037883a 	mov	sp,fp
10006244:	dfc00117 	ldw	ra,4(sp)
10006248:	df000017 	ldw	fp,0(sp)
1000624c:	dec00204 	addi	sp,sp,8
10006250:	f800283a 	ret

10006254 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10006254:	defffb04 	addi	sp,sp,-20
10006258:	dfc00415 	stw	ra,16(sp)
1000625c:	df000315 	stw	fp,12(sp)
10006260:	df000304 	addi	fp,sp,12
10006264:	e13ffe15 	stw	r4,-8(fp)
10006268:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000626c:	e0bffe17 	ldw	r2,-8(fp)
10006270:	10000816 	blt	r2,zero,10006294 <fstat+0x40>
10006274:	e13ffe17 	ldw	r4,-8(fp)
10006278:	01400304 	movi	r5,12
1000627c:	00020b80 	call	100020b8 <__mulsi3>
10006280:	1007883a 	mov	r3,r2
10006284:	00840074 	movhi	r2,4097
10006288:	10a46804 	addi	r2,r2,-28256
1000628c:	1885883a 	add	r2,r3,r2
10006290:	00000106 	br	10006298 <fstat+0x44>
10006294:	0005883a 	mov	r2,zero
10006298:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000629c:	e0bffd17 	ldw	r2,-12(fp)
100062a0:	10001026 	beq	r2,zero,100062e4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100062a4:	e0bffd17 	ldw	r2,-12(fp)
100062a8:	10800017 	ldw	r2,0(r2)
100062ac:	10800817 	ldw	r2,32(r2)
100062b0:	10000726 	beq	r2,zero,100062d0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100062b4:	e0bffd17 	ldw	r2,-12(fp)
100062b8:	10800017 	ldw	r2,0(r2)
100062bc:	10800817 	ldw	r2,32(r2)
100062c0:	e13ffd17 	ldw	r4,-12(fp)
100062c4:	e17fff17 	ldw	r5,-4(fp)
100062c8:	103ee83a 	callr	r2
100062cc:	00000a06 	br	100062f8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100062d0:	e0bfff17 	ldw	r2,-4(fp)
100062d4:	00c80004 	movi	r3,8192
100062d8:	10c00115 	stw	r3,4(r2)
      return 0;
100062dc:	0005883a 	mov	r2,zero
100062e0:	00000506 	br	100062f8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100062e4:	00062040 	call	10006204 <alt_get_errno>
100062e8:	1007883a 	mov	r3,r2
100062ec:	00801444 	movi	r2,81
100062f0:	18800015 	stw	r2,0(r3)
    return -1;
100062f4:	00bfffc4 	movi	r2,-1
  }
}
100062f8:	e037883a 	mov	sp,fp
100062fc:	dfc00117 	ldw	ra,4(sp)
10006300:	df000017 	ldw	fp,0(sp)
10006304:	dec00204 	addi	sp,sp,8
10006308:	f800283a 	ret

1000630c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000630c:	defffe04 	addi	sp,sp,-8
10006310:	dfc00115 	stw	ra,4(sp)
10006314:	df000015 	stw	fp,0(sp)
10006318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000631c:	00840074 	movhi	r2,4097
10006320:	10a8e904 	addi	r2,r2,-23644
10006324:	10800017 	ldw	r2,0(r2)
10006328:	10000526 	beq	r2,zero,10006340 <alt_get_errno+0x34>
1000632c:	00840074 	movhi	r2,4097
10006330:	10a8e904 	addi	r2,r2,-23644
10006334:	10800017 	ldw	r2,0(r2)
10006338:	103ee83a 	callr	r2
1000633c:	00000206 	br	10006348 <alt_get_errno+0x3c>
10006340:	00840074 	movhi	r2,4097
10006344:	10af9304 	addi	r2,r2,-16820
}
10006348:	e037883a 	mov	sp,fp
1000634c:	dfc00117 	ldw	ra,4(sp)
10006350:	df000017 	ldw	fp,0(sp)
10006354:	dec00204 	addi	sp,sp,8
10006358:	f800283a 	ret

1000635c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000635c:	deffed04 	addi	sp,sp,-76
10006360:	dfc01215 	stw	ra,72(sp)
10006364:	df001115 	stw	fp,68(sp)
10006368:	df001104 	addi	fp,sp,68
1000636c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10006370:	e0bfff17 	ldw	r2,-4(fp)
10006374:	10000816 	blt	r2,zero,10006398 <isatty+0x3c>
10006378:	e13fff17 	ldw	r4,-4(fp)
1000637c:	01400304 	movi	r5,12
10006380:	00020b80 	call	100020b8 <__mulsi3>
10006384:	1007883a 	mov	r3,r2
10006388:	00840074 	movhi	r2,4097
1000638c:	10a46804 	addi	r2,r2,-28256
10006390:	1885883a 	add	r2,r3,r2
10006394:	00000106 	br	1000639c <isatty+0x40>
10006398:	0005883a 	mov	r2,zero
1000639c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100063a0:	e0bfef17 	ldw	r2,-68(fp)
100063a4:	10000e26 	beq	r2,zero,100063e0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100063a8:	e0bfef17 	ldw	r2,-68(fp)
100063ac:	10800017 	ldw	r2,0(r2)
100063b0:	10800817 	ldw	r2,32(r2)
100063b4:	1000021e 	bne	r2,zero,100063c0 <isatty+0x64>
    {
      return 1;
100063b8:	00800044 	movi	r2,1
100063bc:	00000d06 	br	100063f4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100063c0:	e0bff004 	addi	r2,fp,-64
100063c4:	e13fff17 	ldw	r4,-4(fp)
100063c8:	100b883a 	mov	r5,r2
100063cc:	00062540 	call	10006254 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100063d0:	e0bff117 	ldw	r2,-60(fp)
100063d4:	10880020 	cmpeqi	r2,r2,8192
100063d8:	10803fcc 	andi	r2,r2,255
100063dc:	00000506 	br	100063f4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100063e0:	000630c0 	call	1000630c <alt_get_errno>
100063e4:	1007883a 	mov	r3,r2
100063e8:	00801444 	movi	r2,81
100063ec:	18800015 	stw	r2,0(r3)
    return 0;
100063f0:	0005883a 	mov	r2,zero
  }
}
100063f4:	e037883a 	mov	sp,fp
100063f8:	dfc00117 	ldw	ra,4(sp)
100063fc:	df000017 	ldw	fp,0(sp)
10006400:	dec00204 	addi	sp,sp,8
10006404:	f800283a 	ret

10006408 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10006408:	defffc04 	addi	sp,sp,-16
1000640c:	df000315 	stw	fp,12(sp)
10006410:	df000304 	addi	fp,sp,12
10006414:	e13ffd15 	stw	r4,-12(fp)
10006418:	e17ffe15 	stw	r5,-8(fp)
1000641c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10006420:	e0fffe17 	ldw	r3,-8(fp)
10006424:	e0bffd17 	ldw	r2,-12(fp)
10006428:	18800c26 	beq	r3,r2,1000645c <alt_load_section+0x54>
  {
    while( to != end )
1000642c:	00000806 	br	10006450 <alt_load_section+0x48>
    {
      *to++ = *from++;
10006430:	e0bffe17 	ldw	r2,-8(fp)
10006434:	10c00104 	addi	r3,r2,4
10006438:	e0fffe15 	stw	r3,-8(fp)
1000643c:	e0fffd17 	ldw	r3,-12(fp)
10006440:	19000104 	addi	r4,r3,4
10006444:	e13ffd15 	stw	r4,-12(fp)
10006448:	18c00017 	ldw	r3,0(r3)
1000644c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10006450:	e0fffe17 	ldw	r3,-8(fp)
10006454:	e0bfff17 	ldw	r2,-4(fp)
10006458:	18bff51e 	bne	r3,r2,10006430 <__alt_data_end+0xf8006430>
    {
      *to++ = *from++;
    }
  }
}
1000645c:	e037883a 	mov	sp,fp
10006460:	df000017 	ldw	fp,0(sp)
10006464:	dec00104 	addi	sp,sp,4
10006468:	f800283a 	ret

1000646c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000646c:	defffe04 	addi	sp,sp,-8
10006470:	dfc00115 	stw	ra,4(sp)
10006474:	df000015 	stw	fp,0(sp)
10006478:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000647c:	01040074 	movhi	r4,4097
10006480:	2128ee04 	addi	r4,r4,-23624
10006484:	01440074 	movhi	r5,4097
10006488:	29625304 	addi	r5,r5,-30388
1000648c:	01840074 	movhi	r6,4097
10006490:	31a8ee04 	addi	r6,r6,-23624
10006494:	00064080 	call	10006408 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10006498:	01040034 	movhi	r4,4096
1000649c:	21000804 	addi	r4,r4,32
100064a0:	01440034 	movhi	r5,4096
100064a4:	29400804 	addi	r5,r5,32
100064a8:	01840034 	movhi	r6,4096
100064ac:	31808b04 	addi	r6,r6,556
100064b0:	00064080 	call	10006408 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100064b4:	01040074 	movhi	r4,4097
100064b8:	21220204 	addi	r4,r4,-30712
100064bc:	01440074 	movhi	r5,4097
100064c0:	29620204 	addi	r5,r5,-30712
100064c4:	01840074 	movhi	r6,4097
100064c8:	31a25304 	addi	r6,r6,-30388
100064cc:	00064080 	call	10006408 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100064d0:	00076e40 	call	100076e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
100064d4:	00078ac0 	call	100078ac <alt_icache_flush_all>
}
100064d8:	e037883a 	mov	sp,fp
100064dc:	dfc00117 	ldw	ra,4(sp)
100064e0:	df000017 	ldw	fp,0(sp)
100064e4:	dec00204 	addi	sp,sp,8
100064e8:	f800283a 	ret

100064ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100064ec:	defffe04 	addi	sp,sp,-8
100064f0:	dfc00115 	stw	ra,4(sp)
100064f4:	df000015 	stw	fp,0(sp)
100064f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100064fc:	00840074 	movhi	r2,4097
10006500:	10a8e904 	addi	r2,r2,-23644
10006504:	10800017 	ldw	r2,0(r2)
10006508:	10000526 	beq	r2,zero,10006520 <alt_get_errno+0x34>
1000650c:	00840074 	movhi	r2,4097
10006510:	10a8e904 	addi	r2,r2,-23644
10006514:	10800017 	ldw	r2,0(r2)
10006518:	103ee83a 	callr	r2
1000651c:	00000206 	br	10006528 <alt_get_errno+0x3c>
10006520:	00840074 	movhi	r2,4097
10006524:	10af9304 	addi	r2,r2,-16820
}
10006528:	e037883a 	mov	sp,fp
1000652c:	dfc00117 	ldw	ra,4(sp)
10006530:	df000017 	ldw	fp,0(sp)
10006534:	dec00204 	addi	sp,sp,8
10006538:	f800283a 	ret

1000653c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000653c:	defff904 	addi	sp,sp,-28
10006540:	dfc00615 	stw	ra,24(sp)
10006544:	df000515 	stw	fp,20(sp)
10006548:	df000504 	addi	fp,sp,20
1000654c:	e13ffd15 	stw	r4,-12(fp)
10006550:	e17ffe15 	stw	r5,-8(fp)
10006554:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10006558:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000655c:	e0bffd17 	ldw	r2,-12(fp)
10006560:	10000816 	blt	r2,zero,10006584 <lseek+0x48>
10006564:	e13ffd17 	ldw	r4,-12(fp)
10006568:	01400304 	movi	r5,12
1000656c:	00020b80 	call	100020b8 <__mulsi3>
10006570:	1007883a 	mov	r3,r2
10006574:	00840074 	movhi	r2,4097
10006578:	10a46804 	addi	r2,r2,-28256
1000657c:	1885883a 	add	r2,r3,r2
10006580:	00000106 	br	10006588 <lseek+0x4c>
10006584:	0005883a 	mov	r2,zero
10006588:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000658c:	e0bffc17 	ldw	r2,-16(fp)
10006590:	10001026 	beq	r2,zero,100065d4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10006594:	e0bffc17 	ldw	r2,-16(fp)
10006598:	10800017 	ldw	r2,0(r2)
1000659c:	10800717 	ldw	r2,28(r2)
100065a0:	10000926 	beq	r2,zero,100065c8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100065a4:	e0bffc17 	ldw	r2,-16(fp)
100065a8:	10800017 	ldw	r2,0(r2)
100065ac:	10800717 	ldw	r2,28(r2)
100065b0:	e13ffc17 	ldw	r4,-16(fp)
100065b4:	e17ffe17 	ldw	r5,-8(fp)
100065b8:	e1bfff17 	ldw	r6,-4(fp)
100065bc:	103ee83a 	callr	r2
100065c0:	e0bffb15 	stw	r2,-20(fp)
100065c4:	00000506 	br	100065dc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100065c8:	00bfde84 	movi	r2,-134
100065cc:	e0bffb15 	stw	r2,-20(fp)
100065d0:	00000206 	br	100065dc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100065d4:	00bfebc4 	movi	r2,-81
100065d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100065dc:	e0bffb17 	ldw	r2,-20(fp)
100065e0:	1000070e 	bge	r2,zero,10006600 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100065e4:	00064ec0 	call	100064ec <alt_get_errno>
100065e8:	1007883a 	mov	r3,r2
100065ec:	e0bffb17 	ldw	r2,-20(fp)
100065f0:	0085c83a 	sub	r2,zero,r2
100065f4:	18800015 	stw	r2,0(r3)
    rc = -1;
100065f8:	00bfffc4 	movi	r2,-1
100065fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10006600:	e0bffb17 	ldw	r2,-20(fp)
}
10006604:	e037883a 	mov	sp,fp
10006608:	dfc00117 	ldw	ra,4(sp)
1000660c:	df000017 	ldw	fp,0(sp)
10006610:	dec00204 	addi	sp,sp,8
10006614:	f800283a 	ret

10006618 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10006618:	defffd04 	addi	sp,sp,-12
1000661c:	dfc00215 	stw	ra,8(sp)
10006620:	df000115 	stw	fp,4(sp)
10006624:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10006628:	0009883a 	mov	r4,zero
1000662c:	0006adc0 	call	10006adc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10006630:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10006634:	0006b100 	call	10006b10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10006638:	01040074 	movhi	r4,4097
1000663c:	21224904 	addi	r4,r4,-30428
10006640:	01440074 	movhi	r5,4097
10006644:	29624904 	addi	r5,r5,-30428
10006648:	01840074 	movhi	r6,4097
1000664c:	31a24904 	addi	r6,r6,-30428
10006650:	0007c780 	call	10007c78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10006654:	00077f40 	call	100077f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10006658:	01040034 	movhi	r4,4096
1000665c:	211e1404 	addi	r4,r4,30800
10006660:	00084640 	call	10008464 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10006664:	d126b417 	ldw	r4,-25904(gp)
10006668:	d0e6b517 	ldw	r3,-25900(gp)
1000666c:	d0a6b617 	ldw	r2,-25896(gp)
10006670:	180b883a 	mov	r5,r3
10006674:	100d883a 	mov	r6,r2
10006678:	00002680 	call	10000268 <main>
1000667c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10006680:	01000044 	movi	r4,1
10006684:	00061000 	call	10006100 <close>
  exit (result);
10006688:	e13fff17 	ldw	r4,-4(fp)
1000668c:	00084780 	call	10008478 <exit>

10006690 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10006690:	defffe04 	addi	sp,sp,-8
10006694:	df000115 	stw	fp,4(sp)
10006698:	df000104 	addi	fp,sp,4
1000669c:	e13fff15 	stw	r4,-4(fp)
}
100066a0:	e037883a 	mov	sp,fp
100066a4:	df000017 	ldw	fp,0(sp)
100066a8:	dec00104 	addi	sp,sp,4
100066ac:	f800283a 	ret

100066b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100066b0:	defffe04 	addi	sp,sp,-8
100066b4:	df000115 	stw	fp,4(sp)
100066b8:	df000104 	addi	fp,sp,4
100066bc:	e13fff15 	stw	r4,-4(fp)
}
100066c0:	e037883a 	mov	sp,fp
100066c4:	df000017 	ldw	fp,0(sp)
100066c8:	dec00104 	addi	sp,sp,4
100066cc:	f800283a 	ret

100066d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100066d0:	defffe04 	addi	sp,sp,-8
100066d4:	dfc00115 	stw	ra,4(sp)
100066d8:	df000015 	stw	fp,0(sp)
100066dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100066e0:	00840074 	movhi	r2,4097
100066e4:	10a8e904 	addi	r2,r2,-23644
100066e8:	10800017 	ldw	r2,0(r2)
100066ec:	10000526 	beq	r2,zero,10006704 <alt_get_errno+0x34>
100066f0:	00840074 	movhi	r2,4097
100066f4:	10a8e904 	addi	r2,r2,-23644
100066f8:	10800017 	ldw	r2,0(r2)
100066fc:	103ee83a 	callr	r2
10006700:	00000206 	br	1000670c <alt_get_errno+0x3c>
10006704:	00840074 	movhi	r2,4097
10006708:	10af9304 	addi	r2,r2,-16820
}
1000670c:	e037883a 	mov	sp,fp
10006710:	dfc00117 	ldw	ra,4(sp)
10006714:	df000017 	ldw	fp,0(sp)
10006718:	dec00204 	addi	sp,sp,8
1000671c:	f800283a 	ret

10006720 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10006720:	defff904 	addi	sp,sp,-28
10006724:	dfc00615 	stw	ra,24(sp)
10006728:	df000515 	stw	fp,20(sp)
1000672c:	df000504 	addi	fp,sp,20
10006730:	e13ffd15 	stw	r4,-12(fp)
10006734:	e17ffe15 	stw	r5,-8(fp)
10006738:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000673c:	e0bffd17 	ldw	r2,-12(fp)
10006740:	10000816 	blt	r2,zero,10006764 <read+0x44>
10006744:	e13ffd17 	ldw	r4,-12(fp)
10006748:	01400304 	movi	r5,12
1000674c:	00020b80 	call	100020b8 <__mulsi3>
10006750:	1007883a 	mov	r3,r2
10006754:	00840074 	movhi	r2,4097
10006758:	10a46804 	addi	r2,r2,-28256
1000675c:	1885883a 	add	r2,r3,r2
10006760:	00000106 	br	10006768 <read+0x48>
10006764:	0005883a 	mov	r2,zero
10006768:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000676c:	e0bffb17 	ldw	r2,-20(fp)
10006770:	10002226 	beq	r2,zero,100067fc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10006774:	e0bffb17 	ldw	r2,-20(fp)
10006778:	10800217 	ldw	r2,8(r2)
1000677c:	108000cc 	andi	r2,r2,3
10006780:	10800060 	cmpeqi	r2,r2,1
10006784:	1000181e 	bne	r2,zero,100067e8 <read+0xc8>
        (fd->dev->read))
10006788:	e0bffb17 	ldw	r2,-20(fp)
1000678c:	10800017 	ldw	r2,0(r2)
10006790:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10006794:	10001426 	beq	r2,zero,100067e8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10006798:	e0bffb17 	ldw	r2,-20(fp)
1000679c:	10800017 	ldw	r2,0(r2)
100067a0:	10800517 	ldw	r2,20(r2)
100067a4:	e0ffff17 	ldw	r3,-4(fp)
100067a8:	e13ffb17 	ldw	r4,-20(fp)
100067ac:	e17ffe17 	ldw	r5,-8(fp)
100067b0:	180d883a 	mov	r6,r3
100067b4:	103ee83a 	callr	r2
100067b8:	e0bffc15 	stw	r2,-16(fp)
100067bc:	e0bffc17 	ldw	r2,-16(fp)
100067c0:	1000070e 	bge	r2,zero,100067e0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100067c4:	00066d00 	call	100066d0 <alt_get_errno>
100067c8:	1007883a 	mov	r3,r2
100067cc:	e0bffc17 	ldw	r2,-16(fp)
100067d0:	0085c83a 	sub	r2,zero,r2
100067d4:	18800015 	stw	r2,0(r3)
          return -1;
100067d8:	00bfffc4 	movi	r2,-1
100067dc:	00000c06 	br	10006810 <read+0xf0>
        }
        return rval;
100067e0:	e0bffc17 	ldw	r2,-16(fp)
100067e4:	00000a06 	br	10006810 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100067e8:	00066d00 	call	100066d0 <alt_get_errno>
100067ec:	1007883a 	mov	r3,r2
100067f0:	00800344 	movi	r2,13
100067f4:	18800015 	stw	r2,0(r3)
100067f8:	00000406 	br	1000680c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100067fc:	00066d00 	call	100066d0 <alt_get_errno>
10006800:	1007883a 	mov	r3,r2
10006804:	00801444 	movi	r2,81
10006808:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000680c:	00bfffc4 	movi	r2,-1
}
10006810:	e037883a 	mov	sp,fp
10006814:	dfc00117 	ldw	ra,4(sp)
10006818:	df000017 	ldw	fp,0(sp)
1000681c:	dec00204 	addi	sp,sp,8
10006820:	f800283a 	ret

10006824 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10006824:	defffc04 	addi	sp,sp,-16
10006828:	dfc00315 	stw	ra,12(sp)
1000682c:	df000215 	stw	fp,8(sp)
10006830:	dc000115 	stw	r16,4(sp)
10006834:	df000204 	addi	fp,sp,8
10006838:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000683c:	e0bffe17 	ldw	r2,-8(fp)
10006840:	108000d0 	cmplti	r2,r2,3
10006844:	1000111e 	bne	r2,zero,1000688c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10006848:	04040074 	movhi	r16,4097
1000684c:	84246804 	addi	r16,r16,-28256
10006850:	e0bffe17 	ldw	r2,-8(fp)
10006854:	1009883a 	mov	r4,r2
10006858:	01400304 	movi	r5,12
1000685c:	00020b80 	call	100020b8 <__mulsi3>
10006860:	8085883a 	add	r2,r16,r2
10006864:	10800204 	addi	r2,r2,8
10006868:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000686c:	04040074 	movhi	r16,4097
10006870:	84246804 	addi	r16,r16,-28256
10006874:	e0bffe17 	ldw	r2,-8(fp)
10006878:	1009883a 	mov	r4,r2
1000687c:	01400304 	movi	r5,12
10006880:	00020b80 	call	100020b8 <__mulsi3>
10006884:	8085883a 	add	r2,r16,r2
10006888:	10000015 	stw	zero,0(r2)
  }
}
1000688c:	e6ffff04 	addi	sp,fp,-4
10006890:	dfc00217 	ldw	ra,8(sp)
10006894:	df000117 	ldw	fp,4(sp)
10006898:	dc000017 	ldw	r16,0(sp)
1000689c:	dec00304 	addi	sp,sp,12
100068a0:	f800283a 	ret

100068a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100068a4:	defff904 	addi	sp,sp,-28
100068a8:	df000615 	stw	fp,24(sp)
100068ac:	df000604 	addi	fp,sp,24
100068b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100068b4:	0005303a 	rdctl	r2,status
100068b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100068bc:	e0fffc17 	ldw	r3,-16(fp)
100068c0:	00bfff84 	movi	r2,-2
100068c4:	1884703a 	and	r2,r3,r2
100068c8:	1001703a 	wrctl	status,r2
  
  return context;
100068cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100068d0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100068d4:	d0a00a17 	ldw	r2,-32728(gp)
100068d8:	10c000c4 	addi	r3,r2,3
100068dc:	00bfff04 	movi	r2,-4
100068e0:	1884703a 	and	r2,r3,r2
100068e4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100068e8:	d0e00a17 	ldw	r3,-32728(gp)
100068ec:	e0bfff17 	ldw	r2,-4(fp)
100068f0:	1887883a 	add	r3,r3,r2
100068f4:	00860034 	movhi	r2,6144
100068f8:	10800004 	addi	r2,r2,0
100068fc:	10c0062e 	bgeu	r2,r3,10006918 <sbrk+0x74>
10006900:	e0bffa17 	ldw	r2,-24(fp)
10006904:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10006908:	e0bffd17 	ldw	r2,-12(fp)
1000690c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10006910:	00bfffc4 	movi	r2,-1
10006914:	00000b06 	br	10006944 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10006918:	d0a00a17 	ldw	r2,-32728(gp)
1000691c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10006920:	d0e00a17 	ldw	r3,-32728(gp)
10006924:	e0bfff17 	ldw	r2,-4(fp)
10006928:	1885883a 	add	r2,r3,r2
1000692c:	d0a00a15 	stw	r2,-32728(gp)
10006930:	e0bffa17 	ldw	r2,-24(fp)
10006934:	e0bffe15 	stw	r2,-8(fp)
10006938:	e0bffe17 	ldw	r2,-8(fp)
1000693c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10006940:	e0bffb17 	ldw	r2,-20(fp)
} 
10006944:	e037883a 	mov	sp,fp
10006948:	df000017 	ldw	fp,0(sp)
1000694c:	dec00104 	addi	sp,sp,4
10006950:	f800283a 	ret

10006954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10006954:	defffe04 	addi	sp,sp,-8
10006958:	dfc00115 	stw	ra,4(sp)
1000695c:	df000015 	stw	fp,0(sp)
10006960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10006964:	00840074 	movhi	r2,4097
10006968:	10a8e904 	addi	r2,r2,-23644
1000696c:	10800017 	ldw	r2,0(r2)
10006970:	10000526 	beq	r2,zero,10006988 <alt_get_errno+0x34>
10006974:	00840074 	movhi	r2,4097
10006978:	10a8e904 	addi	r2,r2,-23644
1000697c:	10800017 	ldw	r2,0(r2)
10006980:	103ee83a 	callr	r2
10006984:	00000206 	br	10006990 <alt_get_errno+0x3c>
10006988:	00840074 	movhi	r2,4097
1000698c:	10af9304 	addi	r2,r2,-16820
}
10006990:	e037883a 	mov	sp,fp
10006994:	dfc00117 	ldw	ra,4(sp)
10006998:	df000017 	ldw	fp,0(sp)
1000699c:	dec00204 	addi	sp,sp,8
100069a0:	f800283a 	ret

100069a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100069a4:	defff904 	addi	sp,sp,-28
100069a8:	dfc00615 	stw	ra,24(sp)
100069ac:	df000515 	stw	fp,20(sp)
100069b0:	df000504 	addi	fp,sp,20
100069b4:	e13ffd15 	stw	r4,-12(fp)
100069b8:	e17ffe15 	stw	r5,-8(fp)
100069bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100069c0:	e0bffd17 	ldw	r2,-12(fp)
100069c4:	10000816 	blt	r2,zero,100069e8 <write+0x44>
100069c8:	e13ffd17 	ldw	r4,-12(fp)
100069cc:	01400304 	movi	r5,12
100069d0:	00020b80 	call	100020b8 <__mulsi3>
100069d4:	1007883a 	mov	r3,r2
100069d8:	00840074 	movhi	r2,4097
100069dc:	10a46804 	addi	r2,r2,-28256
100069e0:	1885883a 	add	r2,r3,r2
100069e4:	00000106 	br	100069ec <write+0x48>
100069e8:	0005883a 	mov	r2,zero
100069ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100069f0:	e0bffb17 	ldw	r2,-20(fp)
100069f4:	10002126 	beq	r2,zero,10006a7c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100069f8:	e0bffb17 	ldw	r2,-20(fp)
100069fc:	10800217 	ldw	r2,8(r2)
10006a00:	108000cc 	andi	r2,r2,3
10006a04:	10001826 	beq	r2,zero,10006a68 <write+0xc4>
10006a08:	e0bffb17 	ldw	r2,-20(fp)
10006a0c:	10800017 	ldw	r2,0(r2)
10006a10:	10800617 	ldw	r2,24(r2)
10006a14:	10001426 	beq	r2,zero,10006a68 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10006a18:	e0bffb17 	ldw	r2,-20(fp)
10006a1c:	10800017 	ldw	r2,0(r2)
10006a20:	10800617 	ldw	r2,24(r2)
10006a24:	e0ffff17 	ldw	r3,-4(fp)
10006a28:	e13ffb17 	ldw	r4,-20(fp)
10006a2c:	e17ffe17 	ldw	r5,-8(fp)
10006a30:	180d883a 	mov	r6,r3
10006a34:	103ee83a 	callr	r2
10006a38:	e0bffc15 	stw	r2,-16(fp)
10006a3c:	e0bffc17 	ldw	r2,-16(fp)
10006a40:	1000070e 	bge	r2,zero,10006a60 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10006a44:	00069540 	call	10006954 <alt_get_errno>
10006a48:	1007883a 	mov	r3,r2
10006a4c:	e0bffc17 	ldw	r2,-16(fp)
10006a50:	0085c83a 	sub	r2,zero,r2
10006a54:	18800015 	stw	r2,0(r3)
        return -1;
10006a58:	00bfffc4 	movi	r2,-1
10006a5c:	00000c06 	br	10006a90 <write+0xec>
      }
      return rval;
10006a60:	e0bffc17 	ldw	r2,-16(fp)
10006a64:	00000a06 	br	10006a90 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10006a68:	00069540 	call	10006954 <alt_get_errno>
10006a6c:	1007883a 	mov	r3,r2
10006a70:	00800344 	movi	r2,13
10006a74:	18800015 	stw	r2,0(r3)
10006a78:	00000406 	br	10006a8c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10006a7c:	00069540 	call	10006954 <alt_get_errno>
10006a80:	1007883a 	mov	r3,r2
10006a84:	00801444 	movi	r2,81
10006a88:	18800015 	stw	r2,0(r3)
  }
  return -1;
10006a8c:	00bfffc4 	movi	r2,-1
}
10006a90:	e037883a 	mov	sp,fp
10006a94:	dfc00117 	ldw	ra,4(sp)
10006a98:	df000017 	ldw	fp,0(sp)
10006a9c:	dec00204 	addi	sp,sp,8
10006aa0:	f800283a 	ret

10006aa4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10006aa4:	defffd04 	addi	sp,sp,-12
10006aa8:	dfc00215 	stw	ra,8(sp)
10006aac:	df000115 	stw	fp,4(sp)
10006ab0:	df000104 	addi	fp,sp,4
10006ab4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10006ab8:	e13fff17 	ldw	r4,-4(fp)
10006abc:	01440074 	movhi	r5,4097
10006ac0:	2968e604 	addi	r5,r5,-23656
10006ac4:	00077500 	call	10007750 <alt_dev_llist_insert>
}
10006ac8:	e037883a 	mov	sp,fp
10006acc:	dfc00117 	ldw	ra,4(sp)
10006ad0:	df000017 	ldw	fp,0(sp)
10006ad4:	dec00204 	addi	sp,sp,8
10006ad8:	f800283a 	ret

10006adc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10006adc:	defffd04 	addi	sp,sp,-12
10006ae0:	dfc00215 	stw	ra,8(sp)
10006ae4:	df000115 	stw	fp,4(sp)
10006ae8:	df000104 	addi	fp,sp,4
10006aec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10006af0:	00081300 	call	10008130 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10006af4:	00800044 	movi	r2,1
10006af8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10006afc:	e037883a 	mov	sp,fp
10006b00:	dfc00117 	ldw	ra,4(sp)
10006b04:	df000017 	ldw	fp,0(sp)
10006b08:	dec00204 	addi	sp,sp,8
10006b0c:	f800283a 	ret

10006b10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10006b10:	defffe04 	addi	sp,sp,-8
10006b14:	dfc00115 	stw	ra,4(sp)
10006b18:	df000015 	stw	fp,0(sp)
10006b1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10006b20:	01040074 	movhi	r4,4097
10006b24:	2124d204 	addi	r4,r4,-27832
10006b28:	000b883a 	mov	r5,zero
10006b2c:	01800144 	movi	r6,5
10006b30:	0006cbc0 	call	10006cbc <altera_avalon_jtag_uart_init>
10006b34:	01040074 	movhi	r4,4097
10006b38:	2124c804 	addi	r4,r4,-27872
10006b3c:	0006aa40 	call	10006aa4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10006b40:	0001883a 	nop
}
10006b44:	e037883a 	mov	sp,fp
10006b48:	dfc00117 	ldw	ra,4(sp)
10006b4c:	df000017 	ldw	fp,0(sp)
10006b50:	dec00204 	addi	sp,sp,8
10006b54:	f800283a 	ret

10006b58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10006b58:	defffa04 	addi	sp,sp,-24
10006b5c:	dfc00515 	stw	ra,20(sp)
10006b60:	df000415 	stw	fp,16(sp)
10006b64:	df000404 	addi	fp,sp,16
10006b68:	e13ffd15 	stw	r4,-12(fp)
10006b6c:	e17ffe15 	stw	r5,-8(fp)
10006b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10006b74:	e0bffd17 	ldw	r2,-12(fp)
10006b78:	10800017 	ldw	r2,0(r2)
10006b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10006b80:	e0bffc17 	ldw	r2,-16(fp)
10006b84:	10c00a04 	addi	r3,r2,40
10006b88:	e0bffd17 	ldw	r2,-12(fp)
10006b8c:	10800217 	ldw	r2,8(r2)
10006b90:	1809883a 	mov	r4,r3
10006b94:	e17ffe17 	ldw	r5,-8(fp)
10006b98:	e1bfff17 	ldw	r6,-4(fp)
10006b9c:	100f883a 	mov	r7,r2
10006ba0:	00071800 	call	10007180 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10006ba4:	e037883a 	mov	sp,fp
10006ba8:	dfc00117 	ldw	ra,4(sp)
10006bac:	df000017 	ldw	fp,0(sp)
10006bb0:	dec00204 	addi	sp,sp,8
10006bb4:	f800283a 	ret

10006bb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10006bb8:	defffa04 	addi	sp,sp,-24
10006bbc:	dfc00515 	stw	ra,20(sp)
10006bc0:	df000415 	stw	fp,16(sp)
10006bc4:	df000404 	addi	fp,sp,16
10006bc8:	e13ffd15 	stw	r4,-12(fp)
10006bcc:	e17ffe15 	stw	r5,-8(fp)
10006bd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10006bd4:	e0bffd17 	ldw	r2,-12(fp)
10006bd8:	10800017 	ldw	r2,0(r2)
10006bdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10006be0:	e0bffc17 	ldw	r2,-16(fp)
10006be4:	10c00a04 	addi	r3,r2,40
10006be8:	e0bffd17 	ldw	r2,-12(fp)
10006bec:	10800217 	ldw	r2,8(r2)
10006bf0:	1809883a 	mov	r4,r3
10006bf4:	e17ffe17 	ldw	r5,-8(fp)
10006bf8:	e1bfff17 	ldw	r6,-4(fp)
10006bfc:	100f883a 	mov	r7,r2
10006c00:	000738c0 	call	1000738c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10006c04:	e037883a 	mov	sp,fp
10006c08:	dfc00117 	ldw	ra,4(sp)
10006c0c:	df000017 	ldw	fp,0(sp)
10006c10:	dec00204 	addi	sp,sp,8
10006c14:	f800283a 	ret

10006c18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10006c18:	defffc04 	addi	sp,sp,-16
10006c1c:	dfc00315 	stw	ra,12(sp)
10006c20:	df000215 	stw	fp,8(sp)
10006c24:	df000204 	addi	fp,sp,8
10006c28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10006c2c:	e0bfff17 	ldw	r2,-4(fp)
10006c30:	10800017 	ldw	r2,0(r2)
10006c34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10006c38:	e0bffe17 	ldw	r2,-8(fp)
10006c3c:	10c00a04 	addi	r3,r2,40
10006c40:	e0bfff17 	ldw	r2,-4(fp)
10006c44:	10800217 	ldw	r2,8(r2)
10006c48:	1809883a 	mov	r4,r3
10006c4c:	100b883a 	mov	r5,r2
10006c50:	000702c0 	call	1000702c <altera_avalon_jtag_uart_close>
}
10006c54:	e037883a 	mov	sp,fp
10006c58:	dfc00117 	ldw	ra,4(sp)
10006c5c:	df000017 	ldw	fp,0(sp)
10006c60:	dec00204 	addi	sp,sp,8
10006c64:	f800283a 	ret

10006c68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10006c68:	defffa04 	addi	sp,sp,-24
10006c6c:	dfc00515 	stw	ra,20(sp)
10006c70:	df000415 	stw	fp,16(sp)
10006c74:	df000404 	addi	fp,sp,16
10006c78:	e13ffd15 	stw	r4,-12(fp)
10006c7c:	e17ffe15 	stw	r5,-8(fp)
10006c80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10006c84:	e0bffd17 	ldw	r2,-12(fp)
10006c88:	10800017 	ldw	r2,0(r2)
10006c8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10006c90:	e0bffc17 	ldw	r2,-16(fp)
10006c94:	10800a04 	addi	r2,r2,40
10006c98:	1009883a 	mov	r4,r2
10006c9c:	e17ffe17 	ldw	r5,-8(fp)
10006ca0:	e1bfff17 	ldw	r6,-4(fp)
10006ca4:	00070940 	call	10007094 <altera_avalon_jtag_uart_ioctl>
}
10006ca8:	e037883a 	mov	sp,fp
10006cac:	dfc00117 	ldw	ra,4(sp)
10006cb0:	df000017 	ldw	fp,0(sp)
10006cb4:	dec00204 	addi	sp,sp,8
10006cb8:	f800283a 	ret

10006cbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10006cbc:	defffa04 	addi	sp,sp,-24
10006cc0:	dfc00515 	stw	ra,20(sp)
10006cc4:	df000415 	stw	fp,16(sp)
10006cc8:	df000404 	addi	fp,sp,16
10006ccc:	e13ffd15 	stw	r4,-12(fp)
10006cd0:	e17ffe15 	stw	r5,-8(fp)
10006cd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10006cd8:	e0bffd17 	ldw	r2,-12(fp)
10006cdc:	00c00044 	movi	r3,1
10006ce0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10006ce4:	e0bffd17 	ldw	r2,-12(fp)
10006ce8:	10800017 	ldw	r2,0(r2)
10006cec:	10800104 	addi	r2,r2,4
10006cf0:	1007883a 	mov	r3,r2
10006cf4:	e0bffd17 	ldw	r2,-12(fp)
10006cf8:	10800817 	ldw	r2,32(r2)
10006cfc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10006d00:	e0fffe17 	ldw	r3,-8(fp)
10006d04:	e0bfff17 	ldw	r2,-4(fp)
10006d08:	d8000015 	stw	zero,0(sp)
10006d0c:	1809883a 	mov	r4,r3
10006d10:	100b883a 	mov	r5,r2
10006d14:	01840034 	movhi	r6,4096
10006d18:	319b6004 	addi	r6,r6,28032
10006d1c:	e1fffd17 	ldw	r7,-12(fp)
10006d20:	00078c80 	call	100078c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10006d24:	e0bffd17 	ldw	r2,-12(fp)
10006d28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10006d2c:	e0bffd17 	ldw	r2,-12(fp)
10006d30:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10006d34:	00840074 	movhi	r2,4097
10006d38:	10af9804 	addi	r2,r2,-16800
10006d3c:	10800017 	ldw	r2,0(r2)
10006d40:	1809883a 	mov	r4,r3
10006d44:	100b883a 	mov	r5,r2
10006d48:	01840034 	movhi	r6,4096
10006d4c:	319be104 	addi	r6,r6,28548
10006d50:	e1fffd17 	ldw	r7,-12(fp)
10006d54:	00075a40 	call	100075a4 <alt_alarm_start>
10006d58:	1000040e 	bge	r2,zero,10006d6c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10006d5c:	e0fffd17 	ldw	r3,-12(fp)
10006d60:	00a00034 	movhi	r2,32768
10006d64:	10bfffc4 	addi	r2,r2,-1
10006d68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10006d6c:	e037883a 	mov	sp,fp
10006d70:	dfc00117 	ldw	ra,4(sp)
10006d74:	df000017 	ldw	fp,0(sp)
10006d78:	dec00204 	addi	sp,sp,8
10006d7c:	f800283a 	ret

10006d80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10006d80:	defff804 	addi	sp,sp,-32
10006d84:	df000715 	stw	fp,28(sp)
10006d88:	df000704 	addi	fp,sp,28
10006d8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10006d90:	e0bfff17 	ldw	r2,-4(fp)
10006d94:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10006d98:	e0bffb17 	ldw	r2,-20(fp)
10006d9c:	10800017 	ldw	r2,0(r2)
10006da0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10006da4:	e0bffc17 	ldw	r2,-16(fp)
10006da8:	10800104 	addi	r2,r2,4
10006dac:	10800037 	ldwio	r2,0(r2)
10006db0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10006db4:	e0bffd17 	ldw	r2,-12(fp)
10006db8:	1080c00c 	andi	r2,r2,768
10006dbc:	1000011e 	bne	r2,zero,10006dc4 <altera_avalon_jtag_uart_irq+0x44>
      break;
10006dc0:	00006c06 	br	10006f74 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10006dc4:	e0bffd17 	ldw	r2,-12(fp)
10006dc8:	1080400c 	andi	r2,r2,256
10006dcc:	10003426 	beq	r2,zero,10006ea0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10006dd0:	00800074 	movhi	r2,1
10006dd4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10006dd8:	e0bffb17 	ldw	r2,-20(fp)
10006ddc:	10800a17 	ldw	r2,40(r2)
10006de0:	10800044 	addi	r2,r2,1
10006de4:	1081ffcc 	andi	r2,r2,2047
10006de8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10006dec:	e0bffb17 	ldw	r2,-20(fp)
10006df0:	10c00b17 	ldw	r3,44(r2)
10006df4:	e0bffe17 	ldw	r2,-8(fp)
10006df8:	1880011e 	bne	r3,r2,10006e00 <altera_avalon_jtag_uart_irq+0x80>
          break;
10006dfc:	00001606 	br	10006e58 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10006e00:	e0bffc17 	ldw	r2,-16(fp)
10006e04:	10800037 	ldwio	r2,0(r2)
10006e08:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10006e0c:	e0bff917 	ldw	r2,-28(fp)
10006e10:	10a0000c 	andi	r2,r2,32768
10006e14:	1000011e 	bne	r2,zero,10006e1c <altera_avalon_jtag_uart_irq+0x9c>
          break;
10006e18:	00000f06 	br	10006e58 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10006e1c:	e0bffb17 	ldw	r2,-20(fp)
10006e20:	10800a17 	ldw	r2,40(r2)
10006e24:	e0fff917 	ldw	r3,-28(fp)
10006e28:	1809883a 	mov	r4,r3
10006e2c:	e0fffb17 	ldw	r3,-20(fp)
10006e30:	1885883a 	add	r2,r3,r2
10006e34:	10800e04 	addi	r2,r2,56
10006e38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10006e3c:	e0bffb17 	ldw	r2,-20(fp)
10006e40:	10800a17 	ldw	r2,40(r2)
10006e44:	10800044 	addi	r2,r2,1
10006e48:	10c1ffcc 	andi	r3,r2,2047
10006e4c:	e0bffb17 	ldw	r2,-20(fp)
10006e50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10006e54:	003fe006 	br	10006dd8 <__alt_data_end+0xf8006dd8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10006e58:	e0bff917 	ldw	r2,-28(fp)
10006e5c:	10bfffec 	andhi	r2,r2,65535
10006e60:	10000f26 	beq	r2,zero,10006ea0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10006e64:	e0bffb17 	ldw	r2,-20(fp)
10006e68:	10c00817 	ldw	r3,32(r2)
10006e6c:	00bfff84 	movi	r2,-2
10006e70:	1886703a 	and	r3,r3,r2
10006e74:	e0bffb17 	ldw	r2,-20(fp)
10006e78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10006e7c:	e0bffc17 	ldw	r2,-16(fp)
10006e80:	10800104 	addi	r2,r2,4
10006e84:	1007883a 	mov	r3,r2
10006e88:	e0bffb17 	ldw	r2,-20(fp)
10006e8c:	10800817 	ldw	r2,32(r2)
10006e90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10006e94:	e0bffc17 	ldw	r2,-16(fp)
10006e98:	10800104 	addi	r2,r2,4
10006e9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10006ea0:	e0bffd17 	ldw	r2,-12(fp)
10006ea4:	1080800c 	andi	r2,r2,512
10006ea8:	10003126 	beq	r2,zero,10006f70 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10006eac:	e0bffd17 	ldw	r2,-12(fp)
10006eb0:	1004d43a 	srli	r2,r2,16
10006eb4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10006eb8:	00001406 	br	10006f0c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10006ebc:	e0bffc17 	ldw	r2,-16(fp)
10006ec0:	e0fffb17 	ldw	r3,-20(fp)
10006ec4:	18c00d17 	ldw	r3,52(r3)
10006ec8:	e13ffb17 	ldw	r4,-20(fp)
10006ecc:	20c7883a 	add	r3,r4,r3
10006ed0:	18c20e04 	addi	r3,r3,2104
10006ed4:	18c00003 	ldbu	r3,0(r3)
10006ed8:	18c03fcc 	andi	r3,r3,255
10006edc:	18c0201c 	xori	r3,r3,128
10006ee0:	18ffe004 	addi	r3,r3,-128
10006ee4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10006ee8:	e0bffb17 	ldw	r2,-20(fp)
10006eec:	10800d17 	ldw	r2,52(r2)
10006ef0:	10800044 	addi	r2,r2,1
10006ef4:	10c1ffcc 	andi	r3,r2,2047
10006ef8:	e0bffb17 	ldw	r2,-20(fp)
10006efc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10006f00:	e0bffa17 	ldw	r2,-24(fp)
10006f04:	10bfffc4 	addi	r2,r2,-1
10006f08:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10006f0c:	e0bffa17 	ldw	r2,-24(fp)
10006f10:	10000526 	beq	r2,zero,10006f28 <altera_avalon_jtag_uart_irq+0x1a8>
10006f14:	e0bffb17 	ldw	r2,-20(fp)
10006f18:	10c00d17 	ldw	r3,52(r2)
10006f1c:	e0bffb17 	ldw	r2,-20(fp)
10006f20:	10800c17 	ldw	r2,48(r2)
10006f24:	18bfe51e 	bne	r3,r2,10006ebc <__alt_data_end+0xf8006ebc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10006f28:	e0bffa17 	ldw	r2,-24(fp)
10006f2c:	10001026 	beq	r2,zero,10006f70 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10006f30:	e0bffb17 	ldw	r2,-20(fp)
10006f34:	10c00817 	ldw	r3,32(r2)
10006f38:	00bfff44 	movi	r2,-3
10006f3c:	1886703a 	and	r3,r3,r2
10006f40:	e0bffb17 	ldw	r2,-20(fp)
10006f44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10006f48:	e0bffb17 	ldw	r2,-20(fp)
10006f4c:	10800017 	ldw	r2,0(r2)
10006f50:	10800104 	addi	r2,r2,4
10006f54:	1007883a 	mov	r3,r2
10006f58:	e0bffb17 	ldw	r2,-20(fp)
10006f5c:	10800817 	ldw	r2,32(r2)
10006f60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10006f64:	e0bffc17 	ldw	r2,-16(fp)
10006f68:	10800104 	addi	r2,r2,4
10006f6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10006f70:	003f8c06 	br	10006da4 <__alt_data_end+0xf8006da4>
}
10006f74:	e037883a 	mov	sp,fp
10006f78:	df000017 	ldw	fp,0(sp)
10006f7c:	dec00104 	addi	sp,sp,4
10006f80:	f800283a 	ret

10006f84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10006f84:	defff804 	addi	sp,sp,-32
10006f88:	df000715 	stw	fp,28(sp)
10006f8c:	df000704 	addi	fp,sp,28
10006f90:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10006f94:	e0bffb17 	ldw	r2,-20(fp)
10006f98:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10006f9c:	e0bff917 	ldw	r2,-28(fp)
10006fa0:	10800017 	ldw	r2,0(r2)
10006fa4:	10800104 	addi	r2,r2,4
10006fa8:	10800037 	ldwio	r2,0(r2)
10006fac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10006fb0:	e0bffa17 	ldw	r2,-24(fp)
10006fb4:	1081000c 	andi	r2,r2,1024
10006fb8:	10000b26 	beq	r2,zero,10006fe8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10006fbc:	e0bff917 	ldw	r2,-28(fp)
10006fc0:	10800017 	ldw	r2,0(r2)
10006fc4:	10800104 	addi	r2,r2,4
10006fc8:	1007883a 	mov	r3,r2
10006fcc:	e0bff917 	ldw	r2,-28(fp)
10006fd0:	10800817 	ldw	r2,32(r2)
10006fd4:	10810014 	ori	r2,r2,1024
10006fd8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10006fdc:	e0bff917 	ldw	r2,-28(fp)
10006fe0:	10000915 	stw	zero,36(r2)
10006fe4:	00000a06 	br	10007010 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10006fe8:	e0bff917 	ldw	r2,-28(fp)
10006fec:	10c00917 	ldw	r3,36(r2)
10006ff0:	00a00034 	movhi	r2,32768
10006ff4:	10bfff04 	addi	r2,r2,-4
10006ff8:	10c00536 	bltu	r2,r3,10007010 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10006ffc:	e0bff917 	ldw	r2,-28(fp)
10007000:	10800917 	ldw	r2,36(r2)
10007004:	10c00044 	addi	r3,r2,1
10007008:	e0bff917 	ldw	r2,-28(fp)
1000700c:	10c00915 	stw	r3,36(r2)
10007010:	00840074 	movhi	r2,4097
10007014:	10af9804 	addi	r2,r2,-16800
10007018:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000701c:	e037883a 	mov	sp,fp
10007020:	df000017 	ldw	fp,0(sp)
10007024:	dec00104 	addi	sp,sp,4
10007028:	f800283a 	ret

1000702c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000702c:	defffd04 	addi	sp,sp,-12
10007030:	df000215 	stw	fp,8(sp)
10007034:	df000204 	addi	fp,sp,8
10007038:	e13ffe15 	stw	r4,-8(fp)
1000703c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10007040:	00000506 	br	10007058 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10007044:	e0bfff17 	ldw	r2,-4(fp)
10007048:	1090000c 	andi	r2,r2,16384
1000704c:	10000226 	beq	r2,zero,10007058 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10007050:	00bffd44 	movi	r2,-11
10007054:	00000b06 	br	10007084 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10007058:	e0bffe17 	ldw	r2,-8(fp)
1000705c:	10c00d17 	ldw	r3,52(r2)
10007060:	e0bffe17 	ldw	r2,-8(fp)
10007064:	10800c17 	ldw	r2,48(r2)
10007068:	18800526 	beq	r3,r2,10007080 <altera_avalon_jtag_uart_close+0x54>
1000706c:	e0bffe17 	ldw	r2,-8(fp)
10007070:	10c00917 	ldw	r3,36(r2)
10007074:	e0bffe17 	ldw	r2,-8(fp)
10007078:	10800117 	ldw	r2,4(r2)
1000707c:	18bff136 	bltu	r3,r2,10007044 <__alt_data_end+0xf8007044>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10007080:	0005883a 	mov	r2,zero
}
10007084:	e037883a 	mov	sp,fp
10007088:	df000017 	ldw	fp,0(sp)
1000708c:	dec00104 	addi	sp,sp,4
10007090:	f800283a 	ret

10007094 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10007094:	defffa04 	addi	sp,sp,-24
10007098:	df000515 	stw	fp,20(sp)
1000709c:	df000504 	addi	fp,sp,20
100070a0:	e13ffd15 	stw	r4,-12(fp)
100070a4:	e17ffe15 	stw	r5,-8(fp)
100070a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100070ac:	00bff9c4 	movi	r2,-25
100070b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100070b4:	e0bffe17 	ldw	r2,-8(fp)
100070b8:	10da8060 	cmpeqi	r3,r2,27137
100070bc:	1800031e 	bne	r3,zero,100070cc <altera_avalon_jtag_uart_ioctl+0x38>
100070c0:	109a80a0 	cmpeqi	r2,r2,27138
100070c4:	1000191e 	bne	r2,zero,1000712c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100070c8:	00002806 	br	1000716c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100070cc:	e0bffd17 	ldw	r2,-12(fp)
100070d0:	10c00117 	ldw	r3,4(r2)
100070d4:	00a00034 	movhi	r2,32768
100070d8:	10bfffc4 	addi	r2,r2,-1
100070dc:	18801226 	beq	r3,r2,10007128 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100070e0:	e0bfff17 	ldw	r2,-4(fp)
100070e4:	10800017 	ldw	r2,0(r2)
100070e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100070ec:	e0bffc17 	ldw	r2,-16(fp)
100070f0:	10800090 	cmplti	r2,r2,2
100070f4:	1000061e 	bne	r2,zero,10007110 <altera_avalon_jtag_uart_ioctl+0x7c>
100070f8:	e0fffc17 	ldw	r3,-16(fp)
100070fc:	00a00034 	movhi	r2,32768
10007100:	10bfffc4 	addi	r2,r2,-1
10007104:	18800226 	beq	r3,r2,10007110 <altera_avalon_jtag_uart_ioctl+0x7c>
10007108:	e0bffc17 	ldw	r2,-16(fp)
1000710c:	00000206 	br	10007118 <altera_avalon_jtag_uart_ioctl+0x84>
10007110:	00a00034 	movhi	r2,32768
10007114:	10bfff84 	addi	r2,r2,-2
10007118:	e0fffd17 	ldw	r3,-12(fp)
1000711c:	18800115 	stw	r2,4(r3)
      rc = 0;
10007120:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10007124:	00001106 	br	1000716c <altera_avalon_jtag_uart_ioctl+0xd8>
10007128:	00001006 	br	1000716c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000712c:	e0bffd17 	ldw	r2,-12(fp)
10007130:	10c00117 	ldw	r3,4(r2)
10007134:	00a00034 	movhi	r2,32768
10007138:	10bfffc4 	addi	r2,r2,-1
1000713c:	18800a26 	beq	r3,r2,10007168 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10007140:	e0bffd17 	ldw	r2,-12(fp)
10007144:	10c00917 	ldw	r3,36(r2)
10007148:	e0bffd17 	ldw	r2,-12(fp)
1000714c:	10800117 	ldw	r2,4(r2)
10007150:	1885803a 	cmpltu	r2,r3,r2
10007154:	10c03fcc 	andi	r3,r2,255
10007158:	e0bfff17 	ldw	r2,-4(fp)
1000715c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10007160:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10007164:	00000006 	br	10007168 <altera_avalon_jtag_uart_ioctl+0xd4>
10007168:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000716c:	e0bffb17 	ldw	r2,-20(fp)
}
10007170:	e037883a 	mov	sp,fp
10007174:	df000017 	ldw	fp,0(sp)
10007178:	dec00104 	addi	sp,sp,4
1000717c:	f800283a 	ret

10007180 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10007180:	defff304 	addi	sp,sp,-52
10007184:	dfc00c15 	stw	ra,48(sp)
10007188:	df000b15 	stw	fp,44(sp)
1000718c:	df000b04 	addi	fp,sp,44
10007190:	e13ffc15 	stw	r4,-16(fp)
10007194:	e17ffd15 	stw	r5,-12(fp)
10007198:	e1bffe15 	stw	r6,-8(fp)
1000719c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100071a0:	e0bffd17 	ldw	r2,-12(fp)
100071a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100071a8:	00004906 	br	100072d0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100071ac:	e0bffc17 	ldw	r2,-16(fp)
100071b0:	10800a17 	ldw	r2,40(r2)
100071b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100071b8:	e0bffc17 	ldw	r2,-16(fp)
100071bc:	10800b17 	ldw	r2,44(r2)
100071c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100071c4:	e0fff717 	ldw	r3,-36(fp)
100071c8:	e0bff817 	ldw	r2,-32(fp)
100071cc:	18800536 	bltu	r3,r2,100071e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100071d0:	e0fff717 	ldw	r3,-36(fp)
100071d4:	e0bff817 	ldw	r2,-32(fp)
100071d8:	1885c83a 	sub	r2,r3,r2
100071dc:	e0bff615 	stw	r2,-40(fp)
100071e0:	00000406 	br	100071f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100071e4:	00c20004 	movi	r3,2048
100071e8:	e0bff817 	ldw	r2,-32(fp)
100071ec:	1885c83a 	sub	r2,r3,r2
100071f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100071f4:	e0bff617 	ldw	r2,-40(fp)
100071f8:	1000011e 	bne	r2,zero,10007200 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100071fc:	00001d06 	br	10007274 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10007200:	e0fffe17 	ldw	r3,-8(fp)
10007204:	e0bff617 	ldw	r2,-40(fp)
10007208:	1880022e 	bgeu	r3,r2,10007214 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000720c:	e0bffe17 	ldw	r2,-8(fp)
10007210:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10007214:	e0bff817 	ldw	r2,-32(fp)
10007218:	10800e04 	addi	r2,r2,56
1000721c:	e0fffc17 	ldw	r3,-16(fp)
10007220:	1885883a 	add	r2,r3,r2
10007224:	e13ff517 	ldw	r4,-44(fp)
10007228:	100b883a 	mov	r5,r2
1000722c:	e1bff617 	ldw	r6,-40(fp)
10007230:	000431c0 	call	1000431c <memcpy>
      ptr   += n;
10007234:	e0fff517 	ldw	r3,-44(fp)
10007238:	e0bff617 	ldw	r2,-40(fp)
1000723c:	1885883a 	add	r2,r3,r2
10007240:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10007244:	e0fffe17 	ldw	r3,-8(fp)
10007248:	e0bff617 	ldw	r2,-40(fp)
1000724c:	1885c83a 	sub	r2,r3,r2
10007250:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10007254:	e0fff817 	ldw	r3,-32(fp)
10007258:	e0bff617 	ldw	r2,-40(fp)
1000725c:	1885883a 	add	r2,r3,r2
10007260:	10c1ffcc 	andi	r3,r2,2047
10007264:	e0bffc17 	ldw	r2,-16(fp)
10007268:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000726c:	e0bffe17 	ldw	r2,-8(fp)
10007270:	00bfce16 	blt	zero,r2,100071ac <__alt_data_end+0xf80071ac>

    /* If we read any data then return it */
    if (ptr != buffer)
10007274:	e0fff517 	ldw	r3,-44(fp)
10007278:	e0bffd17 	ldw	r2,-12(fp)
1000727c:	18800126 	beq	r3,r2,10007284 <altera_avalon_jtag_uart_read+0x104>
      break;
10007280:	00001506 	br	100072d8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10007284:	e0bfff17 	ldw	r2,-4(fp)
10007288:	1090000c 	andi	r2,r2,16384
1000728c:	10000126 	beq	r2,zero,10007294 <altera_avalon_jtag_uart_read+0x114>
      break;
10007290:	00001106 	br	100072d8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10007294:	0001883a 	nop
10007298:	e0bffc17 	ldw	r2,-16(fp)
1000729c:	10c00a17 	ldw	r3,40(r2)
100072a0:	e0bff717 	ldw	r2,-36(fp)
100072a4:	1880051e 	bne	r3,r2,100072bc <altera_avalon_jtag_uart_read+0x13c>
100072a8:	e0bffc17 	ldw	r2,-16(fp)
100072ac:	10c00917 	ldw	r3,36(r2)
100072b0:	e0bffc17 	ldw	r2,-16(fp)
100072b4:	10800117 	ldw	r2,4(r2)
100072b8:	18bff736 	bltu	r3,r2,10007298 <__alt_data_end+0xf8007298>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100072bc:	e0bffc17 	ldw	r2,-16(fp)
100072c0:	10c00a17 	ldw	r3,40(r2)
100072c4:	e0bff717 	ldw	r2,-36(fp)
100072c8:	1880011e 	bne	r3,r2,100072d0 <altera_avalon_jtag_uart_read+0x150>
      break;
100072cc:	00000206 	br	100072d8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100072d0:	e0bffe17 	ldw	r2,-8(fp)
100072d4:	00bfb516 	blt	zero,r2,100071ac <__alt_data_end+0xf80071ac>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100072d8:	e0fff517 	ldw	r3,-44(fp)
100072dc:	e0bffd17 	ldw	r2,-12(fp)
100072e0:	18801826 	beq	r3,r2,10007344 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100072e4:	0005303a 	rdctl	r2,status
100072e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100072ec:	e0fffa17 	ldw	r3,-24(fp)
100072f0:	00bfff84 	movi	r2,-2
100072f4:	1884703a 	and	r2,r3,r2
100072f8:	1001703a 	wrctl	status,r2
  
  return context;
100072fc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10007300:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10007304:	e0bffc17 	ldw	r2,-16(fp)
10007308:	10800817 	ldw	r2,32(r2)
1000730c:	10c00054 	ori	r3,r2,1
10007310:	e0bffc17 	ldw	r2,-16(fp)
10007314:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10007318:	e0bffc17 	ldw	r2,-16(fp)
1000731c:	10800017 	ldw	r2,0(r2)
10007320:	10800104 	addi	r2,r2,4
10007324:	1007883a 	mov	r3,r2
10007328:	e0bffc17 	ldw	r2,-16(fp)
1000732c:	10800817 	ldw	r2,32(r2)
10007330:	18800035 	stwio	r2,0(r3)
10007334:	e0bff917 	ldw	r2,-28(fp)
10007338:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000733c:	e0bffb17 	ldw	r2,-20(fp)
10007340:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10007344:	e0fff517 	ldw	r3,-44(fp)
10007348:	e0bffd17 	ldw	r2,-12(fp)
1000734c:	18800426 	beq	r3,r2,10007360 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10007350:	e0fff517 	ldw	r3,-44(fp)
10007354:	e0bffd17 	ldw	r2,-12(fp)
10007358:	1885c83a 	sub	r2,r3,r2
1000735c:	00000606 	br	10007378 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10007360:	e0bfff17 	ldw	r2,-4(fp)
10007364:	1090000c 	andi	r2,r2,16384
10007368:	10000226 	beq	r2,zero,10007374 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000736c:	00bffd44 	movi	r2,-11
10007370:	00000106 	br	10007378 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10007374:	00bffec4 	movi	r2,-5
}
10007378:	e037883a 	mov	sp,fp
1000737c:	dfc00117 	ldw	ra,4(sp)
10007380:	df000017 	ldw	fp,0(sp)
10007384:	dec00204 	addi	sp,sp,8
10007388:	f800283a 	ret

1000738c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000738c:	defff304 	addi	sp,sp,-52
10007390:	dfc00c15 	stw	ra,48(sp)
10007394:	df000b15 	stw	fp,44(sp)
10007398:	df000b04 	addi	fp,sp,44
1000739c:	e13ffc15 	stw	r4,-16(fp)
100073a0:	e17ffd15 	stw	r5,-12(fp)
100073a4:	e1bffe15 	stw	r6,-8(fp)
100073a8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100073ac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100073b0:	e0bffd17 	ldw	r2,-12(fp)
100073b4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100073b8:	00003806 	br	1000749c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100073bc:	e0bffc17 	ldw	r2,-16(fp)
100073c0:	10800c17 	ldw	r2,48(r2)
100073c4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100073c8:	e0bffc17 	ldw	r2,-16(fp)
100073cc:	10800d17 	ldw	r2,52(r2)
100073d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100073d4:	e0fff817 	ldw	r3,-32(fp)
100073d8:	e0bff517 	ldw	r2,-44(fp)
100073dc:	1880062e 	bgeu	r3,r2,100073f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100073e0:	e0fff517 	ldw	r3,-44(fp)
100073e4:	e0bff817 	ldw	r2,-32(fp)
100073e8:	1885c83a 	sub	r2,r3,r2
100073ec:	10bfffc4 	addi	r2,r2,-1
100073f0:	e0bff615 	stw	r2,-40(fp)
100073f4:	00000b06 	br	10007424 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100073f8:	e0bff517 	ldw	r2,-44(fp)
100073fc:	10000526 	beq	r2,zero,10007414 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10007400:	00c20004 	movi	r3,2048
10007404:	e0bff817 	ldw	r2,-32(fp)
10007408:	1885c83a 	sub	r2,r3,r2
1000740c:	e0bff615 	stw	r2,-40(fp)
10007410:	00000406 	br	10007424 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10007414:	00c1ffc4 	movi	r3,2047
10007418:	e0bff817 	ldw	r2,-32(fp)
1000741c:	1885c83a 	sub	r2,r3,r2
10007420:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10007424:	e0bff617 	ldw	r2,-40(fp)
10007428:	1000011e 	bne	r2,zero,10007430 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000742c:	00001d06 	br	100074a4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10007430:	e0fffe17 	ldw	r3,-8(fp)
10007434:	e0bff617 	ldw	r2,-40(fp)
10007438:	1880022e 	bgeu	r3,r2,10007444 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000743c:	e0bffe17 	ldw	r2,-8(fp)
10007440:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10007444:	e0bff817 	ldw	r2,-32(fp)
10007448:	10820e04 	addi	r2,r2,2104
1000744c:	e0fffc17 	ldw	r3,-16(fp)
10007450:	1885883a 	add	r2,r3,r2
10007454:	1009883a 	mov	r4,r2
10007458:	e17ffd17 	ldw	r5,-12(fp)
1000745c:	e1bff617 	ldw	r6,-40(fp)
10007460:	000431c0 	call	1000431c <memcpy>
      ptr   += n;
10007464:	e0fffd17 	ldw	r3,-12(fp)
10007468:	e0bff617 	ldw	r2,-40(fp)
1000746c:	1885883a 	add	r2,r3,r2
10007470:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10007474:	e0fffe17 	ldw	r3,-8(fp)
10007478:	e0bff617 	ldw	r2,-40(fp)
1000747c:	1885c83a 	sub	r2,r3,r2
10007480:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10007484:	e0fff817 	ldw	r3,-32(fp)
10007488:	e0bff617 	ldw	r2,-40(fp)
1000748c:	1885883a 	add	r2,r3,r2
10007490:	10c1ffcc 	andi	r3,r2,2047
10007494:	e0bffc17 	ldw	r2,-16(fp)
10007498:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000749c:	e0bffe17 	ldw	r2,-8(fp)
100074a0:	00bfc616 	blt	zero,r2,100073bc <__alt_data_end+0xf80073bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100074a4:	0005303a 	rdctl	r2,status
100074a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100074ac:	e0fffa17 	ldw	r3,-24(fp)
100074b0:	00bfff84 	movi	r2,-2
100074b4:	1884703a 	and	r2,r3,r2
100074b8:	1001703a 	wrctl	status,r2
  
  return context;
100074bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100074c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100074c4:	e0bffc17 	ldw	r2,-16(fp)
100074c8:	10800817 	ldw	r2,32(r2)
100074cc:	10c00094 	ori	r3,r2,2
100074d0:	e0bffc17 	ldw	r2,-16(fp)
100074d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100074d8:	e0bffc17 	ldw	r2,-16(fp)
100074dc:	10800017 	ldw	r2,0(r2)
100074e0:	10800104 	addi	r2,r2,4
100074e4:	1007883a 	mov	r3,r2
100074e8:	e0bffc17 	ldw	r2,-16(fp)
100074ec:	10800817 	ldw	r2,32(r2)
100074f0:	18800035 	stwio	r2,0(r3)
100074f4:	e0bff917 	ldw	r2,-28(fp)
100074f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100074fc:	e0bffb17 	ldw	r2,-20(fp)
10007500:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10007504:	e0bffe17 	ldw	r2,-8(fp)
10007508:	0080120e 	bge	zero,r2,10007554 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000750c:	e0bfff17 	ldw	r2,-4(fp)
10007510:	1090000c 	andi	r2,r2,16384
10007514:	10000126 	beq	r2,zero,1000751c <altera_avalon_jtag_uart_write+0x190>
        break;
10007518:	00001006 	br	1000755c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000751c:	0001883a 	nop
10007520:	e0bffc17 	ldw	r2,-16(fp)
10007524:	10c00d17 	ldw	r3,52(r2)
10007528:	e0bff517 	ldw	r2,-44(fp)
1000752c:	1880051e 	bne	r3,r2,10007544 <altera_avalon_jtag_uart_write+0x1b8>
10007530:	e0bffc17 	ldw	r2,-16(fp)
10007534:	10c00917 	ldw	r3,36(r2)
10007538:	e0bffc17 	ldw	r2,-16(fp)
1000753c:	10800117 	ldw	r2,4(r2)
10007540:	18bff736 	bltu	r3,r2,10007520 <__alt_data_end+0xf8007520>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10007544:	e0bffc17 	ldw	r2,-16(fp)
10007548:	10800917 	ldw	r2,36(r2)
1000754c:	10000126 	beq	r2,zero,10007554 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10007550:	00000206 	br	1000755c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10007554:	e0bffe17 	ldw	r2,-8(fp)
10007558:	00bf9716 	blt	zero,r2,100073b8 <__alt_data_end+0xf80073b8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000755c:	e0fffd17 	ldw	r3,-12(fp)
10007560:	e0bff717 	ldw	r2,-36(fp)
10007564:	18800426 	beq	r3,r2,10007578 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10007568:	e0fffd17 	ldw	r3,-12(fp)
1000756c:	e0bff717 	ldw	r2,-36(fp)
10007570:	1885c83a 	sub	r2,r3,r2
10007574:	00000606 	br	10007590 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10007578:	e0bfff17 	ldw	r2,-4(fp)
1000757c:	1090000c 	andi	r2,r2,16384
10007580:	10000226 	beq	r2,zero,1000758c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10007584:	00bffd44 	movi	r2,-11
10007588:	00000106 	br	10007590 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000758c:	00bffec4 	movi	r2,-5
}
10007590:	e037883a 	mov	sp,fp
10007594:	dfc00117 	ldw	ra,4(sp)
10007598:	df000017 	ldw	fp,0(sp)
1000759c:	dec00204 	addi	sp,sp,8
100075a0:	f800283a 	ret

100075a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100075a4:	defff504 	addi	sp,sp,-44
100075a8:	df000a15 	stw	fp,40(sp)
100075ac:	df000a04 	addi	fp,sp,40
100075b0:	e13ffc15 	stw	r4,-16(fp)
100075b4:	e17ffd15 	stw	r5,-12(fp)
100075b8:	e1bffe15 	stw	r6,-8(fp)
100075bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100075c0:	e03ff615 	stw	zero,-40(fp)
100075c4:	00840074 	movhi	r2,4097
100075c8:	10af9804 	addi	r2,r2,-16800
100075cc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100075d0:	10003f26 	beq	r2,zero,100076d0 <alt_alarm_start+0x12c>
  {
    if (alarm)
100075d4:	e0bffc17 	ldw	r2,-16(fp)
100075d8:	10003b26 	beq	r2,zero,100076c8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100075dc:	e0bffc17 	ldw	r2,-16(fp)
100075e0:	e0fffe17 	ldw	r3,-8(fp)
100075e4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100075e8:	e0bffc17 	ldw	r2,-16(fp)
100075ec:	e0ffff17 	ldw	r3,-4(fp)
100075f0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100075f4:	0005303a 	rdctl	r2,status
100075f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100075fc:	e0fff817 	ldw	r3,-32(fp)
10007600:	00bfff84 	movi	r2,-2
10007604:	1884703a 	and	r2,r3,r2
10007608:	1001703a 	wrctl	status,r2
  
  return context;
1000760c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10007610:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10007614:	00840074 	movhi	r2,4097
10007618:	10af9904 	addi	r2,r2,-16796
1000761c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10007620:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10007624:	e0fffd17 	ldw	r3,-12(fp)
10007628:	e0bff617 	ldw	r2,-40(fp)
1000762c:	1885883a 	add	r2,r3,r2
10007630:	10c00044 	addi	r3,r2,1
10007634:	e0bffc17 	ldw	r2,-16(fp)
10007638:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000763c:	e0bffc17 	ldw	r2,-16(fp)
10007640:	10c00217 	ldw	r3,8(r2)
10007644:	e0bff617 	ldw	r2,-40(fp)
10007648:	1880042e 	bgeu	r3,r2,1000765c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000764c:	e0bffc17 	ldw	r2,-16(fp)
10007650:	00c00044 	movi	r3,1
10007654:	10c00405 	stb	r3,16(r2)
10007658:	00000206 	br	10007664 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000765c:	e0bffc17 	ldw	r2,-16(fp)
10007660:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10007664:	e0fffc17 	ldw	r3,-16(fp)
10007668:	00840074 	movhi	r2,4097
1000766c:	10a8ec04 	addi	r2,r2,-23632
10007670:	e0bff915 	stw	r2,-28(fp)
10007674:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10007678:	e0bffa17 	ldw	r2,-24(fp)
1000767c:	e0fff917 	ldw	r3,-28(fp)
10007680:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10007684:	e0bff917 	ldw	r2,-28(fp)
10007688:	10c00017 	ldw	r3,0(r2)
1000768c:	e0bffa17 	ldw	r2,-24(fp)
10007690:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10007694:	e0bff917 	ldw	r2,-28(fp)
10007698:	10800017 	ldw	r2,0(r2)
1000769c:	e0fffa17 	ldw	r3,-24(fp)
100076a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100076a4:	e0bff917 	ldw	r2,-28(fp)
100076a8:	e0fffa17 	ldw	r3,-24(fp)
100076ac:	10c00015 	stw	r3,0(r2)
100076b0:	e0bff717 	ldw	r2,-36(fp)
100076b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100076b8:	e0bffb17 	ldw	r2,-20(fp)
100076bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100076c0:	0005883a 	mov	r2,zero
100076c4:	00000306 	br	100076d4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100076c8:	00bffa84 	movi	r2,-22
100076cc:	00000106 	br	100076d4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100076d0:	00bfde84 	movi	r2,-134
  }
}
100076d4:	e037883a 	mov	sp,fp
100076d8:	df000017 	ldw	fp,0(sp)
100076dc:	dec00104 	addi	sp,sp,4
100076e0:	f800283a 	ret

100076e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100076e4:	deffff04 	addi	sp,sp,-4
100076e8:	df000015 	stw	fp,0(sp)
100076ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100076f0:	e037883a 	mov	sp,fp
100076f4:	df000017 	ldw	fp,0(sp)
100076f8:	dec00104 	addi	sp,sp,4
100076fc:	f800283a 	ret

10007700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007700:	defffe04 	addi	sp,sp,-8
10007704:	dfc00115 	stw	ra,4(sp)
10007708:	df000015 	stw	fp,0(sp)
1000770c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007710:	00840074 	movhi	r2,4097
10007714:	10a8e904 	addi	r2,r2,-23644
10007718:	10800017 	ldw	r2,0(r2)
1000771c:	10000526 	beq	r2,zero,10007734 <alt_get_errno+0x34>
10007720:	00840074 	movhi	r2,4097
10007724:	10a8e904 	addi	r2,r2,-23644
10007728:	10800017 	ldw	r2,0(r2)
1000772c:	103ee83a 	callr	r2
10007730:	00000206 	br	1000773c <alt_get_errno+0x3c>
10007734:	00840074 	movhi	r2,4097
10007738:	10af9304 	addi	r2,r2,-16820
}
1000773c:	e037883a 	mov	sp,fp
10007740:	dfc00117 	ldw	ra,4(sp)
10007744:	df000017 	ldw	fp,0(sp)
10007748:	dec00204 	addi	sp,sp,8
1000774c:	f800283a 	ret

10007750 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10007750:	defffa04 	addi	sp,sp,-24
10007754:	dfc00515 	stw	ra,20(sp)
10007758:	df000415 	stw	fp,16(sp)
1000775c:	df000404 	addi	fp,sp,16
10007760:	e13ffe15 	stw	r4,-8(fp)
10007764:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10007768:	e0bffe17 	ldw	r2,-8(fp)
1000776c:	10000326 	beq	r2,zero,1000777c <alt_dev_llist_insert+0x2c>
10007770:	e0bffe17 	ldw	r2,-8(fp)
10007774:	10800217 	ldw	r2,8(r2)
10007778:	1000061e 	bne	r2,zero,10007794 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000777c:	00077000 	call	10007700 <alt_get_errno>
10007780:	1007883a 	mov	r3,r2
10007784:	00800584 	movi	r2,22
10007788:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000778c:	00bffa84 	movi	r2,-22
10007790:	00001306 	br	100077e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10007794:	e0bffe17 	ldw	r2,-8(fp)
10007798:	e0ffff17 	ldw	r3,-4(fp)
1000779c:	e0fffc15 	stw	r3,-16(fp)
100077a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100077a4:	e0bffd17 	ldw	r2,-12(fp)
100077a8:	e0fffc17 	ldw	r3,-16(fp)
100077ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100077b0:	e0bffc17 	ldw	r2,-16(fp)
100077b4:	10c00017 	ldw	r3,0(r2)
100077b8:	e0bffd17 	ldw	r2,-12(fp)
100077bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100077c0:	e0bffc17 	ldw	r2,-16(fp)
100077c4:	10800017 	ldw	r2,0(r2)
100077c8:	e0fffd17 	ldw	r3,-12(fp)
100077cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100077d0:	e0bffc17 	ldw	r2,-16(fp)
100077d4:	e0fffd17 	ldw	r3,-12(fp)
100077d8:	10c00015 	stw	r3,0(r2)

  return 0;  
100077dc:	0005883a 	mov	r2,zero
}
100077e0:	e037883a 	mov	sp,fp
100077e4:	dfc00117 	ldw	ra,4(sp)
100077e8:	df000017 	ldw	fp,0(sp)
100077ec:	dec00204 	addi	sp,sp,8
100077f0:	f800283a 	ret

100077f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100077f4:	defffd04 	addi	sp,sp,-12
100077f8:	dfc00215 	stw	ra,8(sp)
100077fc:	df000115 	stw	fp,4(sp)
10007800:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10007804:	00840074 	movhi	r2,4097
10007808:	10a20104 	addi	r2,r2,-30716
1000780c:	e0bfff15 	stw	r2,-4(fp)
10007810:	00000606 	br	1000782c <_do_ctors+0x38>
        (*ctor) (); 
10007814:	e0bfff17 	ldw	r2,-4(fp)
10007818:	10800017 	ldw	r2,0(r2)
1000781c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10007820:	e0bfff17 	ldw	r2,-4(fp)
10007824:	10bfff04 	addi	r2,r2,-4
10007828:	e0bfff15 	stw	r2,-4(fp)
1000782c:	e0ffff17 	ldw	r3,-4(fp)
10007830:	00840074 	movhi	r2,4097
10007834:	10a20204 	addi	r2,r2,-30712
10007838:	18bff62e 	bgeu	r3,r2,10007814 <__alt_data_end+0xf8007814>
        (*ctor) (); 
}
1000783c:	e037883a 	mov	sp,fp
10007840:	dfc00117 	ldw	ra,4(sp)
10007844:	df000017 	ldw	fp,0(sp)
10007848:	dec00204 	addi	sp,sp,8
1000784c:	f800283a 	ret

10007850 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10007850:	defffd04 	addi	sp,sp,-12
10007854:	dfc00215 	stw	ra,8(sp)
10007858:	df000115 	stw	fp,4(sp)
1000785c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10007860:	00840074 	movhi	r2,4097
10007864:	10a20104 	addi	r2,r2,-30716
10007868:	e0bfff15 	stw	r2,-4(fp)
1000786c:	00000606 	br	10007888 <_do_dtors+0x38>
        (*dtor) (); 
10007870:	e0bfff17 	ldw	r2,-4(fp)
10007874:	10800017 	ldw	r2,0(r2)
10007878:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000787c:	e0bfff17 	ldw	r2,-4(fp)
10007880:	10bfff04 	addi	r2,r2,-4
10007884:	e0bfff15 	stw	r2,-4(fp)
10007888:	e0ffff17 	ldw	r3,-4(fp)
1000788c:	00840074 	movhi	r2,4097
10007890:	10a20204 	addi	r2,r2,-30712
10007894:	18bff62e 	bgeu	r3,r2,10007870 <__alt_data_end+0xf8007870>
        (*dtor) (); 
}
10007898:	e037883a 	mov	sp,fp
1000789c:	dfc00117 	ldw	ra,4(sp)
100078a0:	df000017 	ldw	fp,0(sp)
100078a4:	dec00204 	addi	sp,sp,8
100078a8:	f800283a 	ret

100078ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100078ac:	deffff04 	addi	sp,sp,-4
100078b0:	df000015 	stw	fp,0(sp)
100078b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100078b8:	e037883a 	mov	sp,fp
100078bc:	df000017 	ldw	fp,0(sp)
100078c0:	dec00104 	addi	sp,sp,4
100078c4:	f800283a 	ret

100078c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100078c8:	defff904 	addi	sp,sp,-28
100078cc:	dfc00615 	stw	ra,24(sp)
100078d0:	df000515 	stw	fp,20(sp)
100078d4:	df000504 	addi	fp,sp,20
100078d8:	e13ffc15 	stw	r4,-16(fp)
100078dc:	e17ffd15 	stw	r5,-12(fp)
100078e0:	e1bffe15 	stw	r6,-8(fp)
100078e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100078e8:	e0800217 	ldw	r2,8(fp)
100078ec:	d8800015 	stw	r2,0(sp)
100078f0:	e13ffc17 	ldw	r4,-16(fp)
100078f4:	e17ffd17 	ldw	r5,-12(fp)
100078f8:	e1bffe17 	ldw	r6,-8(fp)
100078fc:	e1ffff17 	ldw	r7,-4(fp)
10007900:	0007aa80 	call	10007aa8 <alt_iic_isr_register>
}  
10007904:	e037883a 	mov	sp,fp
10007908:	dfc00117 	ldw	ra,4(sp)
1000790c:	df000017 	ldw	fp,0(sp)
10007910:	dec00204 	addi	sp,sp,8
10007914:	f800283a 	ret

10007918 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10007918:	defff904 	addi	sp,sp,-28
1000791c:	df000615 	stw	fp,24(sp)
10007920:	df000604 	addi	fp,sp,24
10007924:	e13ffe15 	stw	r4,-8(fp)
10007928:	e17fff15 	stw	r5,-4(fp)
1000792c:	e0bfff17 	ldw	r2,-4(fp)
10007930:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007934:	0005303a 	rdctl	r2,status
10007938:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000793c:	e0fffb17 	ldw	r3,-20(fp)
10007940:	00bfff84 	movi	r2,-2
10007944:	1884703a 	and	r2,r3,r2
10007948:	1001703a 	wrctl	status,r2
  
  return context;
1000794c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10007950:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10007954:	e0bffa17 	ldw	r2,-24(fp)
10007958:	00c00044 	movi	r3,1
1000795c:	1884983a 	sll	r2,r3,r2
10007960:	1007883a 	mov	r3,r2
10007964:	00840074 	movhi	r2,4097
10007968:	10af9704 	addi	r2,r2,-16804
1000796c:	10800017 	ldw	r2,0(r2)
10007970:	1886b03a 	or	r3,r3,r2
10007974:	00840074 	movhi	r2,4097
10007978:	10af9704 	addi	r2,r2,-16804
1000797c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10007980:	00840074 	movhi	r2,4097
10007984:	10af9704 	addi	r2,r2,-16804
10007988:	10800017 	ldw	r2,0(r2)
1000798c:	100170fa 	wrctl	ienable,r2
10007990:	e0bffc17 	ldw	r2,-16(fp)
10007994:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007998:	e0bffd17 	ldw	r2,-12(fp)
1000799c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100079a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100079a4:	0001883a 	nop
}
100079a8:	e037883a 	mov	sp,fp
100079ac:	df000017 	ldw	fp,0(sp)
100079b0:	dec00104 	addi	sp,sp,4
100079b4:	f800283a 	ret

100079b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100079b8:	defff904 	addi	sp,sp,-28
100079bc:	df000615 	stw	fp,24(sp)
100079c0:	df000604 	addi	fp,sp,24
100079c4:	e13ffe15 	stw	r4,-8(fp)
100079c8:	e17fff15 	stw	r5,-4(fp)
100079cc:	e0bfff17 	ldw	r2,-4(fp)
100079d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100079d4:	0005303a 	rdctl	r2,status
100079d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100079dc:	e0fffb17 	ldw	r3,-20(fp)
100079e0:	00bfff84 	movi	r2,-2
100079e4:	1884703a 	and	r2,r3,r2
100079e8:	1001703a 	wrctl	status,r2
  
  return context;
100079ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100079f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100079f4:	e0bffa17 	ldw	r2,-24(fp)
100079f8:	00c00044 	movi	r3,1
100079fc:	1884983a 	sll	r2,r3,r2
10007a00:	0084303a 	nor	r2,zero,r2
10007a04:	1007883a 	mov	r3,r2
10007a08:	00840074 	movhi	r2,4097
10007a0c:	10af9704 	addi	r2,r2,-16804
10007a10:	10800017 	ldw	r2,0(r2)
10007a14:	1886703a 	and	r3,r3,r2
10007a18:	00840074 	movhi	r2,4097
10007a1c:	10af9704 	addi	r2,r2,-16804
10007a20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10007a24:	00840074 	movhi	r2,4097
10007a28:	10af9704 	addi	r2,r2,-16804
10007a2c:	10800017 	ldw	r2,0(r2)
10007a30:	100170fa 	wrctl	ienable,r2
10007a34:	e0bffc17 	ldw	r2,-16(fp)
10007a38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007a3c:	e0bffd17 	ldw	r2,-12(fp)
10007a40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10007a44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10007a48:	0001883a 	nop
}
10007a4c:	e037883a 	mov	sp,fp
10007a50:	df000017 	ldw	fp,0(sp)
10007a54:	dec00104 	addi	sp,sp,4
10007a58:	f800283a 	ret

10007a5c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10007a5c:	defffc04 	addi	sp,sp,-16
10007a60:	df000315 	stw	fp,12(sp)
10007a64:	df000304 	addi	fp,sp,12
10007a68:	e13ffe15 	stw	r4,-8(fp)
10007a6c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10007a70:	000530fa 	rdctl	r2,ienable
10007a74:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10007a78:	e0bfff17 	ldw	r2,-4(fp)
10007a7c:	00c00044 	movi	r3,1
10007a80:	1884983a 	sll	r2,r3,r2
10007a84:	1007883a 	mov	r3,r2
10007a88:	e0bffd17 	ldw	r2,-12(fp)
10007a8c:	1884703a 	and	r2,r3,r2
10007a90:	1004c03a 	cmpne	r2,r2,zero
10007a94:	10803fcc 	andi	r2,r2,255
}
10007a98:	e037883a 	mov	sp,fp
10007a9c:	df000017 	ldw	fp,0(sp)
10007aa0:	dec00104 	addi	sp,sp,4
10007aa4:	f800283a 	ret

10007aa8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10007aa8:	defff504 	addi	sp,sp,-44
10007aac:	dfc00a15 	stw	ra,40(sp)
10007ab0:	df000915 	stw	fp,36(sp)
10007ab4:	df000904 	addi	fp,sp,36
10007ab8:	e13ffc15 	stw	r4,-16(fp)
10007abc:	e17ffd15 	stw	r5,-12(fp)
10007ac0:	e1bffe15 	stw	r6,-8(fp)
10007ac4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10007ac8:	00bffa84 	movi	r2,-22
10007acc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10007ad0:	e0bffd17 	ldw	r2,-12(fp)
10007ad4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10007ad8:	e0bff817 	ldw	r2,-32(fp)
10007adc:	10800808 	cmpgei	r2,r2,32
10007ae0:	1000271e 	bne	r2,zero,10007b80 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007ae4:	0005303a 	rdctl	r2,status
10007ae8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007aec:	e0fffa17 	ldw	r3,-24(fp)
10007af0:	00bfff84 	movi	r2,-2
10007af4:	1884703a 	and	r2,r3,r2
10007af8:	1001703a 	wrctl	status,r2
  
  return context;
10007afc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10007b00:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10007b04:	00840074 	movhi	r2,4097
10007b08:	10afed04 	addi	r2,r2,-16460
10007b0c:	e0fff817 	ldw	r3,-32(fp)
10007b10:	180690fa 	slli	r3,r3,3
10007b14:	10c5883a 	add	r2,r2,r3
10007b18:	e0fffe17 	ldw	r3,-8(fp)
10007b1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10007b20:	00840074 	movhi	r2,4097
10007b24:	10afed04 	addi	r2,r2,-16460
10007b28:	e0fff817 	ldw	r3,-32(fp)
10007b2c:	180690fa 	slli	r3,r3,3
10007b30:	10c5883a 	add	r2,r2,r3
10007b34:	10800104 	addi	r2,r2,4
10007b38:	e0ffff17 	ldw	r3,-4(fp)
10007b3c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10007b40:	e0bffe17 	ldw	r2,-8(fp)
10007b44:	10000526 	beq	r2,zero,10007b5c <alt_iic_isr_register+0xb4>
10007b48:	e0bff817 	ldw	r2,-32(fp)
10007b4c:	e13ffc17 	ldw	r4,-16(fp)
10007b50:	100b883a 	mov	r5,r2
10007b54:	00079180 	call	10007918 <alt_ic_irq_enable>
10007b58:	00000406 	br	10007b6c <alt_iic_isr_register+0xc4>
10007b5c:	e0bff817 	ldw	r2,-32(fp)
10007b60:	e13ffc17 	ldw	r4,-16(fp)
10007b64:	100b883a 	mov	r5,r2
10007b68:	00079b80 	call	100079b8 <alt_ic_irq_disable>
10007b6c:	e0bff715 	stw	r2,-36(fp)
10007b70:	e0bff917 	ldw	r2,-28(fp)
10007b74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007b78:	e0bffb17 	ldw	r2,-20(fp)
10007b7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10007b80:	e0bff717 	ldw	r2,-36(fp)
}
10007b84:	e037883a 	mov	sp,fp
10007b88:	dfc00117 	ldw	ra,4(sp)
10007b8c:	df000017 	ldw	fp,0(sp)
10007b90:	dec00204 	addi	sp,sp,8
10007b94:	f800283a 	ret

10007b98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10007b98:	defff804 	addi	sp,sp,-32
10007b9c:	dfc00715 	stw	ra,28(sp)
10007ba0:	df000615 	stw	fp,24(sp)
10007ba4:	dc000515 	stw	r16,20(sp)
10007ba8:	df000604 	addi	fp,sp,24
10007bac:	e13ffb15 	stw	r4,-20(fp)
10007bb0:	e17ffc15 	stw	r5,-16(fp)
10007bb4:	e1bffd15 	stw	r6,-12(fp)
10007bb8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10007bbc:	e13ffc17 	ldw	r4,-16(fp)
10007bc0:	e17ffd17 	ldw	r5,-12(fp)
10007bc4:	e1bffe17 	ldw	r6,-8(fp)
10007bc8:	0007e340 	call	10007e34 <open>
10007bcc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10007bd0:	e0bffa17 	ldw	r2,-24(fp)
10007bd4:	10002216 	blt	r2,zero,10007c60 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10007bd8:	04040074 	movhi	r16,4097
10007bdc:	84246804 	addi	r16,r16,-28256
10007be0:	e0bffa17 	ldw	r2,-24(fp)
10007be4:	1009883a 	mov	r4,r2
10007be8:	01400304 	movi	r5,12
10007bec:	00020b80 	call	100020b8 <__mulsi3>
10007bf0:	8085883a 	add	r2,r16,r2
10007bf4:	10c00017 	ldw	r3,0(r2)
10007bf8:	e0bffb17 	ldw	r2,-20(fp)
10007bfc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10007c00:	04040074 	movhi	r16,4097
10007c04:	84246804 	addi	r16,r16,-28256
10007c08:	e0bffa17 	ldw	r2,-24(fp)
10007c0c:	1009883a 	mov	r4,r2
10007c10:	01400304 	movi	r5,12
10007c14:	00020b80 	call	100020b8 <__mulsi3>
10007c18:	8085883a 	add	r2,r16,r2
10007c1c:	10800104 	addi	r2,r2,4
10007c20:	10c00017 	ldw	r3,0(r2)
10007c24:	e0bffb17 	ldw	r2,-20(fp)
10007c28:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10007c2c:	04040074 	movhi	r16,4097
10007c30:	84246804 	addi	r16,r16,-28256
10007c34:	e0bffa17 	ldw	r2,-24(fp)
10007c38:	1009883a 	mov	r4,r2
10007c3c:	01400304 	movi	r5,12
10007c40:	00020b80 	call	100020b8 <__mulsi3>
10007c44:	8085883a 	add	r2,r16,r2
10007c48:	10800204 	addi	r2,r2,8
10007c4c:	10c00017 	ldw	r3,0(r2)
10007c50:	e0bffb17 	ldw	r2,-20(fp)
10007c54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10007c58:	e13ffa17 	ldw	r4,-24(fp)
10007c5c:	00068240 	call	10006824 <alt_release_fd>
  }
} 
10007c60:	e6ffff04 	addi	sp,fp,-4
10007c64:	dfc00217 	ldw	ra,8(sp)
10007c68:	df000117 	ldw	fp,4(sp)
10007c6c:	dc000017 	ldw	r16,0(sp)
10007c70:	dec00304 	addi	sp,sp,12
10007c74:	f800283a 	ret

10007c78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10007c78:	defffb04 	addi	sp,sp,-20
10007c7c:	dfc00415 	stw	ra,16(sp)
10007c80:	df000315 	stw	fp,12(sp)
10007c84:	df000304 	addi	fp,sp,12
10007c88:	e13ffd15 	stw	r4,-12(fp)
10007c8c:	e17ffe15 	stw	r5,-8(fp)
10007c90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10007c94:	01040074 	movhi	r4,4097
10007c98:	21246b04 	addi	r4,r4,-28244
10007c9c:	e17ffd17 	ldw	r5,-12(fp)
10007ca0:	01800044 	movi	r6,1
10007ca4:	01c07fc4 	movi	r7,511
10007ca8:	0007b980 	call	10007b98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10007cac:	01040074 	movhi	r4,4097
10007cb0:	21246804 	addi	r4,r4,-28256
10007cb4:	e17ffe17 	ldw	r5,-8(fp)
10007cb8:	000d883a 	mov	r6,zero
10007cbc:	01c07fc4 	movi	r7,511
10007cc0:	0007b980 	call	10007b98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10007cc4:	01040074 	movhi	r4,4097
10007cc8:	21246e04 	addi	r4,r4,-28232
10007ccc:	e17fff17 	ldw	r5,-4(fp)
10007cd0:	01800044 	movi	r6,1
10007cd4:	01c07fc4 	movi	r7,511
10007cd8:	0007b980 	call	10007b98 <alt_open_fd>
}  
10007cdc:	e037883a 	mov	sp,fp
10007ce0:	dfc00117 	ldw	ra,4(sp)
10007ce4:	df000017 	ldw	fp,0(sp)
10007ce8:	dec00204 	addi	sp,sp,8
10007cec:	f800283a 	ret

10007cf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007cf0:	defffe04 	addi	sp,sp,-8
10007cf4:	dfc00115 	stw	ra,4(sp)
10007cf8:	df000015 	stw	fp,0(sp)
10007cfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007d00:	00840074 	movhi	r2,4097
10007d04:	10a8e904 	addi	r2,r2,-23644
10007d08:	10800017 	ldw	r2,0(r2)
10007d0c:	10000526 	beq	r2,zero,10007d24 <alt_get_errno+0x34>
10007d10:	00840074 	movhi	r2,4097
10007d14:	10a8e904 	addi	r2,r2,-23644
10007d18:	10800017 	ldw	r2,0(r2)
10007d1c:	103ee83a 	callr	r2
10007d20:	00000206 	br	10007d2c <alt_get_errno+0x3c>
10007d24:	00840074 	movhi	r2,4097
10007d28:	10af9304 	addi	r2,r2,-16820
}
10007d2c:	e037883a 	mov	sp,fp
10007d30:	dfc00117 	ldw	ra,4(sp)
10007d34:	df000017 	ldw	fp,0(sp)
10007d38:	dec00204 	addi	sp,sp,8
10007d3c:	f800283a 	ret

10007d40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10007d40:	defffb04 	addi	sp,sp,-20
10007d44:	dfc00415 	stw	ra,16(sp)
10007d48:	df000315 	stw	fp,12(sp)
10007d4c:	dc000215 	stw	r16,8(sp)
10007d50:	df000304 	addi	fp,sp,12
10007d54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10007d58:	e0bffe17 	ldw	r2,-8(fp)
10007d5c:	10800217 	ldw	r2,8(r2)
10007d60:	10d00034 	orhi	r3,r2,16384
10007d64:	e0bffe17 	ldw	r2,-8(fp)
10007d68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10007d6c:	e03ffd15 	stw	zero,-12(fp)
10007d70:	00002306 	br	10007e00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10007d74:	04040074 	movhi	r16,4097
10007d78:	84246804 	addi	r16,r16,-28256
10007d7c:	e0bffd17 	ldw	r2,-12(fp)
10007d80:	1009883a 	mov	r4,r2
10007d84:	01400304 	movi	r5,12
10007d88:	00020b80 	call	100020b8 <__mulsi3>
10007d8c:	8085883a 	add	r2,r16,r2
10007d90:	10c00017 	ldw	r3,0(r2)
10007d94:	e0bffe17 	ldw	r2,-8(fp)
10007d98:	10800017 	ldw	r2,0(r2)
10007d9c:	1880151e 	bne	r3,r2,10007df4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10007da0:	04040074 	movhi	r16,4097
10007da4:	84246804 	addi	r16,r16,-28256
10007da8:	e0bffd17 	ldw	r2,-12(fp)
10007dac:	1009883a 	mov	r4,r2
10007db0:	01400304 	movi	r5,12
10007db4:	00020b80 	call	100020b8 <__mulsi3>
10007db8:	8085883a 	add	r2,r16,r2
10007dbc:	10800204 	addi	r2,r2,8
10007dc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10007dc4:	10000b0e 	bge	r2,zero,10007df4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10007dc8:	e13ffd17 	ldw	r4,-12(fp)
10007dcc:	01400304 	movi	r5,12
10007dd0:	00020b80 	call	100020b8 <__mulsi3>
10007dd4:	1007883a 	mov	r3,r2
10007dd8:	00840074 	movhi	r2,4097
10007ddc:	10a46804 	addi	r2,r2,-28256
10007de0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10007de4:	e0bffe17 	ldw	r2,-8(fp)
10007de8:	18800226 	beq	r3,r2,10007df4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10007dec:	00bffcc4 	movi	r2,-13
10007df0:	00000a06 	br	10007e1c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10007df4:	e0bffd17 	ldw	r2,-12(fp)
10007df8:	10800044 	addi	r2,r2,1
10007dfc:	e0bffd15 	stw	r2,-12(fp)
10007e00:	00840074 	movhi	r2,4097
10007e04:	10a8e804 	addi	r2,r2,-23648
10007e08:	10800017 	ldw	r2,0(r2)
10007e0c:	1007883a 	mov	r3,r2
10007e10:	e0bffd17 	ldw	r2,-12(fp)
10007e14:	18bfd72e 	bgeu	r3,r2,10007d74 <__alt_data_end+0xf8007d74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10007e18:	0005883a 	mov	r2,zero
}
10007e1c:	e6ffff04 	addi	sp,fp,-4
10007e20:	dfc00217 	ldw	ra,8(sp)
10007e24:	df000117 	ldw	fp,4(sp)
10007e28:	dc000017 	ldw	r16,0(sp)
10007e2c:	dec00304 	addi	sp,sp,12
10007e30:	f800283a 	ret

10007e34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10007e34:	defff604 	addi	sp,sp,-40
10007e38:	dfc00915 	stw	ra,36(sp)
10007e3c:	df000815 	stw	fp,32(sp)
10007e40:	df000804 	addi	fp,sp,32
10007e44:	e13ffd15 	stw	r4,-12(fp)
10007e48:	e17ffe15 	stw	r5,-8(fp)
10007e4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10007e50:	00bfffc4 	movi	r2,-1
10007e54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10007e58:	00bffb44 	movi	r2,-19
10007e5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10007e60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10007e64:	e13ffd17 	ldw	r4,-12(fp)
10007e68:	01440074 	movhi	r5,4097
10007e6c:	2968e604 	addi	r5,r5,-23656
10007e70:	00081500 	call	10008150 <alt_find_dev>
10007e74:	e0bff815 	stw	r2,-32(fp)
10007e78:	e0bff817 	ldw	r2,-32(fp)
10007e7c:	1000051e 	bne	r2,zero,10007e94 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10007e80:	e13ffd17 	ldw	r4,-12(fp)
10007e84:	00081e00 	call	100081e0 <alt_find_file>
10007e88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10007e8c:	00800044 	movi	r2,1
10007e90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10007e94:	e0bff817 	ldw	r2,-32(fp)
10007e98:	10002b26 	beq	r2,zero,10007f48 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10007e9c:	e13ff817 	ldw	r4,-32(fp)
10007ea0:	00082f40 	call	100082f4 <alt_get_fd>
10007ea4:	e0bff915 	stw	r2,-28(fp)
10007ea8:	e0bff917 	ldw	r2,-28(fp)
10007eac:	1000030e 	bge	r2,zero,10007ebc <open+0x88>
    {
      status = index;
10007eb0:	e0bff917 	ldw	r2,-28(fp)
10007eb4:	e0bffa15 	stw	r2,-24(fp)
10007eb8:	00002506 	br	10007f50 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10007ebc:	e13ff917 	ldw	r4,-28(fp)
10007ec0:	01400304 	movi	r5,12
10007ec4:	00020b80 	call	100020b8 <__mulsi3>
10007ec8:	1007883a 	mov	r3,r2
10007ecc:	00840074 	movhi	r2,4097
10007ed0:	10a46804 	addi	r2,r2,-28256
10007ed4:	1885883a 	add	r2,r3,r2
10007ed8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10007edc:	e0fffe17 	ldw	r3,-8(fp)
10007ee0:	00900034 	movhi	r2,16384
10007ee4:	10bfffc4 	addi	r2,r2,-1
10007ee8:	1886703a 	and	r3,r3,r2
10007eec:	e0bffc17 	ldw	r2,-16(fp)
10007ef0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10007ef4:	e0bffb17 	ldw	r2,-20(fp)
10007ef8:	1000051e 	bne	r2,zero,10007f10 <open+0xdc>
10007efc:	e13ffc17 	ldw	r4,-16(fp)
10007f00:	0007d400 	call	10007d40 <alt_file_locked>
10007f04:	e0bffa15 	stw	r2,-24(fp)
10007f08:	e0bffa17 	ldw	r2,-24(fp)
10007f0c:	10001016 	blt	r2,zero,10007f50 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10007f10:	e0bff817 	ldw	r2,-32(fp)
10007f14:	10800317 	ldw	r2,12(r2)
10007f18:	10000826 	beq	r2,zero,10007f3c <open+0x108>
10007f1c:	e0bff817 	ldw	r2,-32(fp)
10007f20:	10800317 	ldw	r2,12(r2)
10007f24:	e13ffc17 	ldw	r4,-16(fp)
10007f28:	e17ffd17 	ldw	r5,-12(fp)
10007f2c:	e1bffe17 	ldw	r6,-8(fp)
10007f30:	e1ffff17 	ldw	r7,-4(fp)
10007f34:	103ee83a 	callr	r2
10007f38:	00000106 	br	10007f40 <open+0x10c>
10007f3c:	0005883a 	mov	r2,zero
10007f40:	e0bffa15 	stw	r2,-24(fp)
10007f44:	00000206 	br	10007f50 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10007f48:	00bffb44 	movi	r2,-19
10007f4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10007f50:	e0bffa17 	ldw	r2,-24(fp)
10007f54:	1000090e 	bge	r2,zero,10007f7c <open+0x148>
  {
    alt_release_fd (index);  
10007f58:	e13ff917 	ldw	r4,-28(fp)
10007f5c:	00068240 	call	10006824 <alt_release_fd>
    ALT_ERRNO = -status;
10007f60:	0007cf00 	call	10007cf0 <alt_get_errno>
10007f64:	1007883a 	mov	r3,r2
10007f68:	e0bffa17 	ldw	r2,-24(fp)
10007f6c:	0085c83a 	sub	r2,zero,r2
10007f70:	18800015 	stw	r2,0(r3)
    return -1;
10007f74:	00bfffc4 	movi	r2,-1
10007f78:	00000106 	br	10007f80 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10007f7c:	e0bff917 	ldw	r2,-28(fp)
}
10007f80:	e037883a 	mov	sp,fp
10007f84:	dfc00117 	ldw	ra,4(sp)
10007f88:	df000017 	ldw	fp,0(sp)
10007f8c:	dec00204 	addi	sp,sp,8
10007f90:	f800283a 	ret

10007f94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10007f94:	defffa04 	addi	sp,sp,-24
10007f98:	df000515 	stw	fp,20(sp)
10007f9c:	df000504 	addi	fp,sp,20
10007fa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007fa4:	0005303a 	rdctl	r2,status
10007fa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007fac:	e0fffc17 	ldw	r3,-16(fp)
10007fb0:	00bfff84 	movi	r2,-2
10007fb4:	1884703a 	and	r2,r3,r2
10007fb8:	1001703a 	wrctl	status,r2
  
  return context;
10007fbc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10007fc0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10007fc4:	e0bfff17 	ldw	r2,-4(fp)
10007fc8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10007fcc:	e0bffd17 	ldw	r2,-12(fp)
10007fd0:	10800017 	ldw	r2,0(r2)
10007fd4:	e0fffd17 	ldw	r3,-12(fp)
10007fd8:	18c00117 	ldw	r3,4(r3)
10007fdc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10007fe0:	e0bffd17 	ldw	r2,-12(fp)
10007fe4:	10800117 	ldw	r2,4(r2)
10007fe8:	e0fffd17 	ldw	r3,-12(fp)
10007fec:	18c00017 	ldw	r3,0(r3)
10007ff0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10007ff4:	e0bffd17 	ldw	r2,-12(fp)
10007ff8:	e0fffd17 	ldw	r3,-12(fp)
10007ffc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10008000:	e0bffd17 	ldw	r2,-12(fp)
10008004:	e0fffd17 	ldw	r3,-12(fp)
10008008:	10c00015 	stw	r3,0(r2)
1000800c:	e0bffb17 	ldw	r2,-20(fp)
10008010:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10008014:	e0bffe17 	ldw	r2,-8(fp)
10008018:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000801c:	e037883a 	mov	sp,fp
10008020:	df000017 	ldw	fp,0(sp)
10008024:	dec00104 	addi	sp,sp,4
10008028:	f800283a 	ret

1000802c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000802c:	defffb04 	addi	sp,sp,-20
10008030:	dfc00415 	stw	ra,16(sp)
10008034:	df000315 	stw	fp,12(sp)
10008038:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000803c:	d0a00c17 	ldw	r2,-32720(gp)
10008040:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10008044:	d0a6b917 	ldw	r2,-25884(gp)
10008048:	10800044 	addi	r2,r2,1
1000804c:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10008050:	00002e06 	br	1000810c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10008054:	e0bffd17 	ldw	r2,-12(fp)
10008058:	10800017 	ldw	r2,0(r2)
1000805c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10008060:	e0bffd17 	ldw	r2,-12(fp)
10008064:	10800403 	ldbu	r2,16(r2)
10008068:	10803fcc 	andi	r2,r2,255
1000806c:	10000426 	beq	r2,zero,10008080 <alt_tick+0x54>
10008070:	d0a6b917 	ldw	r2,-25884(gp)
10008074:	1000021e 	bne	r2,zero,10008080 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10008078:	e0bffd17 	ldw	r2,-12(fp)
1000807c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10008080:	e0bffd17 	ldw	r2,-12(fp)
10008084:	10800217 	ldw	r2,8(r2)
10008088:	d0e6b917 	ldw	r3,-25884(gp)
1000808c:	18801d36 	bltu	r3,r2,10008104 <alt_tick+0xd8>
10008090:	e0bffd17 	ldw	r2,-12(fp)
10008094:	10800403 	ldbu	r2,16(r2)
10008098:	10803fcc 	andi	r2,r2,255
1000809c:	1000191e 	bne	r2,zero,10008104 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100080a0:	e0bffd17 	ldw	r2,-12(fp)
100080a4:	10800317 	ldw	r2,12(r2)
100080a8:	e0fffd17 	ldw	r3,-12(fp)
100080ac:	18c00517 	ldw	r3,20(r3)
100080b0:	1809883a 	mov	r4,r3
100080b4:	103ee83a 	callr	r2
100080b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100080bc:	e0bfff17 	ldw	r2,-4(fp)
100080c0:	1000031e 	bne	r2,zero,100080d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100080c4:	e13ffd17 	ldw	r4,-12(fp)
100080c8:	0007f940 	call	10007f94 <alt_alarm_stop>
100080cc:	00000d06 	br	10008104 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100080d0:	e0bffd17 	ldw	r2,-12(fp)
100080d4:	10c00217 	ldw	r3,8(r2)
100080d8:	e0bfff17 	ldw	r2,-4(fp)
100080dc:	1887883a 	add	r3,r3,r2
100080e0:	e0bffd17 	ldw	r2,-12(fp)
100080e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100080e8:	e0bffd17 	ldw	r2,-12(fp)
100080ec:	10c00217 	ldw	r3,8(r2)
100080f0:	d0a6b917 	ldw	r2,-25884(gp)
100080f4:	1880032e 	bgeu	r3,r2,10008104 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100080f8:	e0bffd17 	ldw	r2,-12(fp)
100080fc:	00c00044 	movi	r3,1
10008100:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10008104:	e0bffe17 	ldw	r2,-8(fp)
10008108:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000810c:	e0fffd17 	ldw	r3,-12(fp)
10008110:	d0a00c04 	addi	r2,gp,-32720
10008114:	18bfcf1e 	bne	r3,r2,10008054 <__alt_data_end+0xf8008054>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10008118:	0001883a 	nop
}
1000811c:	e037883a 	mov	sp,fp
10008120:	dfc00117 	ldw	ra,4(sp)
10008124:	df000017 	ldw	fp,0(sp)
10008128:	dec00204 	addi	sp,sp,8
1000812c:	f800283a 	ret

10008130 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10008130:	deffff04 	addi	sp,sp,-4
10008134:	df000015 	stw	fp,0(sp)
10008138:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000813c:	000170fa 	wrctl	ienable,zero
}
10008140:	e037883a 	mov	sp,fp
10008144:	df000017 	ldw	fp,0(sp)
10008148:	dec00104 	addi	sp,sp,4
1000814c:	f800283a 	ret

10008150 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10008150:	defffa04 	addi	sp,sp,-24
10008154:	dfc00515 	stw	ra,20(sp)
10008158:	df000415 	stw	fp,16(sp)
1000815c:	df000404 	addi	fp,sp,16
10008160:	e13ffe15 	stw	r4,-8(fp)
10008164:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10008168:	e0bfff17 	ldw	r2,-4(fp)
1000816c:	10800017 	ldw	r2,0(r2)
10008170:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10008174:	e13ffe17 	ldw	r4,-8(fp)
10008178:	00035500 	call	10003550 <strlen>
1000817c:	10800044 	addi	r2,r2,1
10008180:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10008184:	00000d06 	br	100081bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10008188:	e0bffc17 	ldw	r2,-16(fp)
1000818c:	10c00217 	ldw	r3,8(r2)
10008190:	e0bffd17 	ldw	r2,-12(fp)
10008194:	1809883a 	mov	r4,r3
10008198:	e17ffe17 	ldw	r5,-8(fp)
1000819c:	100d883a 	mov	r6,r2
100081a0:	00084b00 	call	100084b0 <memcmp>
100081a4:	1000021e 	bne	r2,zero,100081b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100081a8:	e0bffc17 	ldw	r2,-16(fp)
100081ac:	00000706 	br	100081cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100081b0:	e0bffc17 	ldw	r2,-16(fp)
100081b4:	10800017 	ldw	r2,0(r2)
100081b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100081bc:	e0fffc17 	ldw	r3,-16(fp)
100081c0:	e0bfff17 	ldw	r2,-4(fp)
100081c4:	18bff01e 	bne	r3,r2,10008188 <__alt_data_end+0xf8008188>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100081c8:	0005883a 	mov	r2,zero
}
100081cc:	e037883a 	mov	sp,fp
100081d0:	dfc00117 	ldw	ra,4(sp)
100081d4:	df000017 	ldw	fp,0(sp)
100081d8:	dec00204 	addi	sp,sp,8
100081dc:	f800283a 	ret

100081e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100081e0:	defffb04 	addi	sp,sp,-20
100081e4:	dfc00415 	stw	ra,16(sp)
100081e8:	df000315 	stw	fp,12(sp)
100081ec:	df000304 	addi	fp,sp,12
100081f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100081f4:	00840074 	movhi	r2,4097
100081f8:	10a8e404 	addi	r2,r2,-23664
100081fc:	10800017 	ldw	r2,0(r2)
10008200:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10008204:	00003106 	br	100082cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
10008208:	e0bffd17 	ldw	r2,-12(fp)
1000820c:	10800217 	ldw	r2,8(r2)
10008210:	1009883a 	mov	r4,r2
10008214:	00035500 	call	10003550 <strlen>
10008218:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000821c:	e0bffd17 	ldw	r2,-12(fp)
10008220:	10c00217 	ldw	r3,8(r2)
10008224:	e0bffe17 	ldw	r2,-8(fp)
10008228:	10bfffc4 	addi	r2,r2,-1
1000822c:	1885883a 	add	r2,r3,r2
10008230:	10800003 	ldbu	r2,0(r2)
10008234:	10803fcc 	andi	r2,r2,255
10008238:	1080201c 	xori	r2,r2,128
1000823c:	10bfe004 	addi	r2,r2,-128
10008240:	10800bd8 	cmpnei	r2,r2,47
10008244:	1000031e 	bne	r2,zero,10008254 <alt_find_file+0x74>
    {
      len -= 1;
10008248:	e0bffe17 	ldw	r2,-8(fp)
1000824c:	10bfffc4 	addi	r2,r2,-1
10008250:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10008254:	e0bffe17 	ldw	r2,-8(fp)
10008258:	e0ffff17 	ldw	r3,-4(fp)
1000825c:	1885883a 	add	r2,r3,r2
10008260:	10800003 	ldbu	r2,0(r2)
10008264:	10803fcc 	andi	r2,r2,255
10008268:	1080201c 	xori	r2,r2,128
1000826c:	10bfe004 	addi	r2,r2,-128
10008270:	10800be0 	cmpeqi	r2,r2,47
10008274:	1000081e 	bne	r2,zero,10008298 <alt_find_file+0xb8>
10008278:	e0bffe17 	ldw	r2,-8(fp)
1000827c:	e0ffff17 	ldw	r3,-4(fp)
10008280:	1885883a 	add	r2,r3,r2
10008284:	10800003 	ldbu	r2,0(r2)
10008288:	10803fcc 	andi	r2,r2,255
1000828c:	1080201c 	xori	r2,r2,128
10008290:	10bfe004 	addi	r2,r2,-128
10008294:	10000a1e 	bne	r2,zero,100082c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10008298:	e0bffd17 	ldw	r2,-12(fp)
1000829c:	10c00217 	ldw	r3,8(r2)
100082a0:	e0bffe17 	ldw	r2,-8(fp)
100082a4:	1809883a 	mov	r4,r3
100082a8:	e17fff17 	ldw	r5,-4(fp)
100082ac:	100d883a 	mov	r6,r2
100082b0:	00084b00 	call	100084b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100082b4:	1000021e 	bne	r2,zero,100082c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100082b8:	e0bffd17 	ldw	r2,-12(fp)
100082bc:	00000806 	br	100082e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100082c0:	e0bffd17 	ldw	r2,-12(fp)
100082c4:	10800017 	ldw	r2,0(r2)
100082c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100082cc:	e0fffd17 	ldw	r3,-12(fp)
100082d0:	00840074 	movhi	r2,4097
100082d4:	10a8e404 	addi	r2,r2,-23664
100082d8:	18bfcb1e 	bne	r3,r2,10008208 <__alt_data_end+0xf8008208>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100082dc:	0005883a 	mov	r2,zero
}
100082e0:	e037883a 	mov	sp,fp
100082e4:	dfc00117 	ldw	ra,4(sp)
100082e8:	df000017 	ldw	fp,0(sp)
100082ec:	dec00204 	addi	sp,sp,8
100082f0:	f800283a 	ret

100082f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100082f4:	defffa04 	addi	sp,sp,-24
100082f8:	dfc00515 	stw	ra,20(sp)
100082fc:	df000415 	stw	fp,16(sp)
10008300:	dc000315 	stw	r16,12(sp)
10008304:	df000404 	addi	fp,sp,16
10008308:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000830c:	00bffa04 	movi	r2,-24
10008310:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10008314:	e03ffc15 	stw	zero,-16(fp)
10008318:	00002106 	br	100083a0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000831c:	04040074 	movhi	r16,4097
10008320:	84246804 	addi	r16,r16,-28256
10008324:	e0bffc17 	ldw	r2,-16(fp)
10008328:	1009883a 	mov	r4,r2
1000832c:	01400304 	movi	r5,12
10008330:	00020b80 	call	100020b8 <__mulsi3>
10008334:	8085883a 	add	r2,r16,r2
10008338:	10800017 	ldw	r2,0(r2)
1000833c:	1000151e 	bne	r2,zero,10008394 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10008340:	04040074 	movhi	r16,4097
10008344:	84246804 	addi	r16,r16,-28256
10008348:	e0bffc17 	ldw	r2,-16(fp)
1000834c:	1009883a 	mov	r4,r2
10008350:	01400304 	movi	r5,12
10008354:	00020b80 	call	100020b8 <__mulsi3>
10008358:	8085883a 	add	r2,r16,r2
1000835c:	e0fffe17 	ldw	r3,-8(fp)
10008360:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10008364:	00840074 	movhi	r2,4097
10008368:	10a8e804 	addi	r2,r2,-23648
1000836c:	10c00017 	ldw	r3,0(r2)
10008370:	e0bffc17 	ldw	r2,-16(fp)
10008374:	1880040e 	bge	r3,r2,10008388 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10008378:	00840074 	movhi	r2,4097
1000837c:	10a8e804 	addi	r2,r2,-23648
10008380:	e0fffc17 	ldw	r3,-16(fp)
10008384:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10008388:	e0bffc17 	ldw	r2,-16(fp)
1000838c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10008390:	00000606 	br	100083ac <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10008394:	e0bffc17 	ldw	r2,-16(fp)
10008398:	10800044 	addi	r2,r2,1
1000839c:	e0bffc15 	stw	r2,-16(fp)
100083a0:	e0bffc17 	ldw	r2,-16(fp)
100083a4:	10800810 	cmplti	r2,r2,32
100083a8:	103fdc1e 	bne	r2,zero,1000831c <__alt_data_end+0xf800831c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100083ac:	e0bffd17 	ldw	r2,-12(fp)
}
100083b0:	e6ffff04 	addi	sp,fp,-4
100083b4:	dfc00217 	ldw	ra,8(sp)
100083b8:	df000117 	ldw	fp,4(sp)
100083bc:	dc000017 	ldw	r16,0(sp)
100083c0:	dec00304 	addi	sp,sp,12
100083c4:	f800283a 	ret

100083c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100083c8:	defffe04 	addi	sp,sp,-8
100083cc:	df000115 	stw	fp,4(sp)
100083d0:	df000104 	addi	fp,sp,4
100083d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100083d8:	e0bfff17 	ldw	r2,-4(fp)
100083dc:	10bffe84 	addi	r2,r2,-6
100083e0:	10c00428 	cmpgeui	r3,r2,16
100083e4:	18001a1e 	bne	r3,zero,10008450 <alt_exception_cause_generated_bad_addr+0x88>
100083e8:	100690ba 	slli	r3,r2,2
100083ec:	00840074 	movhi	r2,4097
100083f0:	10a10004 	addi	r2,r2,-31744
100083f4:	1885883a 	add	r2,r3,r2
100083f8:	10800017 	ldw	r2,0(r2)
100083fc:	1000683a 	jmp	r2
10008400:	10008440 	call	11000844 <_gp+0xfee4c4>
10008404:	10008440 	call	11000844 <_gp+0xfee4c4>
10008408:	10008450 	cmplti	zero,r2,529
1000840c:	10008450 	cmplti	zero,r2,529
10008410:	10008450 	cmplti	zero,r2,529
10008414:	10008440 	call	11000844 <_gp+0xfee4c4>
10008418:	10008448 	cmpgei	zero,r2,529
1000841c:	10008450 	cmplti	zero,r2,529
10008420:	10008440 	call	11000844 <_gp+0xfee4c4>
10008424:	10008440 	call	11000844 <_gp+0xfee4c4>
10008428:	10008450 	cmplti	zero,r2,529
1000842c:	10008440 	call	11000844 <_gp+0xfee4c4>
10008430:	10008448 	cmpgei	zero,r2,529
10008434:	10008450 	cmplti	zero,r2,529
10008438:	10008450 	cmplti	zero,r2,529
1000843c:	10008440 	call	11000844 <_gp+0xfee4c4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10008440:	00800044 	movi	r2,1
10008444:	00000306 	br	10008454 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10008448:	0005883a 	mov	r2,zero
1000844c:	00000106 	br	10008454 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10008450:	0005883a 	mov	r2,zero
  }
}
10008454:	e037883a 	mov	sp,fp
10008458:	df000017 	ldw	fp,0(sp)
1000845c:	dec00104 	addi	sp,sp,4
10008460:	f800283a 	ret

10008464 <atexit>:
10008464:	200b883a 	mov	r5,r4
10008468:	000d883a 	mov	r6,zero
1000846c:	0009883a 	mov	r4,zero
10008470:	000f883a 	mov	r7,zero
10008474:	000852c1 	jmpi	1000852c <__register_exitproc>

10008478 <exit>:
10008478:	defffe04 	addi	sp,sp,-8
1000847c:	000b883a 	mov	r5,zero
10008480:	dc000015 	stw	r16,0(sp)
10008484:	dfc00115 	stw	ra,4(sp)
10008488:	2021883a 	mov	r16,r4
1000848c:	00086400 	call	10008640 <__call_exitprocs>
10008490:	00840074 	movhi	r2,4097
10008494:	10a8e004 	addi	r2,r2,-23680
10008498:	11000017 	ldw	r4,0(r2)
1000849c:	20800f17 	ldw	r2,60(r4)
100084a0:	10000126 	beq	r2,zero,100084a8 <exit+0x30>
100084a4:	103ee83a 	callr	r2
100084a8:	8009883a 	mov	r4,r16
100084ac:	00087d40 	call	100087d4 <_exit>

100084b0 <memcmp>:
100084b0:	01c000c4 	movi	r7,3
100084b4:	3980192e 	bgeu	r7,r6,1000851c <memcmp+0x6c>
100084b8:	2144b03a 	or	r2,r4,r5
100084bc:	11c4703a 	and	r2,r2,r7
100084c0:	10000f26 	beq	r2,zero,10008500 <memcmp+0x50>
100084c4:	20800003 	ldbu	r2,0(r4)
100084c8:	28c00003 	ldbu	r3,0(r5)
100084cc:	10c0151e 	bne	r2,r3,10008524 <memcmp+0x74>
100084d0:	31bfff84 	addi	r6,r6,-2
100084d4:	01ffffc4 	movi	r7,-1
100084d8:	00000406 	br	100084ec <memcmp+0x3c>
100084dc:	20800003 	ldbu	r2,0(r4)
100084e0:	28c00003 	ldbu	r3,0(r5)
100084e4:	31bfffc4 	addi	r6,r6,-1
100084e8:	10c00e1e 	bne	r2,r3,10008524 <memcmp+0x74>
100084ec:	21000044 	addi	r4,r4,1
100084f0:	29400044 	addi	r5,r5,1
100084f4:	31fff91e 	bne	r6,r7,100084dc <__alt_data_end+0xf80084dc>
100084f8:	0005883a 	mov	r2,zero
100084fc:	f800283a 	ret
10008500:	20c00017 	ldw	r3,0(r4)
10008504:	28800017 	ldw	r2,0(r5)
10008508:	1880041e 	bne	r3,r2,1000851c <memcmp+0x6c>
1000850c:	31bfff04 	addi	r6,r6,-4
10008510:	21000104 	addi	r4,r4,4
10008514:	29400104 	addi	r5,r5,4
10008518:	39bff936 	bltu	r7,r6,10008500 <__alt_data_end+0xf8008500>
1000851c:	303fe91e 	bne	r6,zero,100084c4 <__alt_data_end+0xf80084c4>
10008520:	003ff506 	br	100084f8 <__alt_data_end+0xf80084f8>
10008524:	10c5c83a 	sub	r2,r2,r3
10008528:	f800283a 	ret

1000852c <__register_exitproc>:
1000852c:	00840074 	movhi	r2,4097
10008530:	defffa04 	addi	sp,sp,-24
10008534:	10a8e004 	addi	r2,r2,-23680
10008538:	dc000315 	stw	r16,12(sp)
1000853c:	14000017 	ldw	r16,0(r2)
10008540:	dc400415 	stw	r17,16(sp)
10008544:	dfc00515 	stw	ra,20(sp)
10008548:	80805217 	ldw	r2,328(r16)
1000854c:	2023883a 	mov	r17,r4
10008550:	10003626 	beq	r2,zero,1000862c <__register_exitproc+0x100>
10008554:	10c00117 	ldw	r3,4(r2)
10008558:	010007c4 	movi	r4,31
1000855c:	20c00e16 	blt	r4,r3,10008598 <__register_exitproc+0x6c>
10008560:	1a400044 	addi	r9,r3,1
10008564:	8800211e 	bne	r17,zero,100085ec <__register_exitproc+0xc0>
10008568:	18c00084 	addi	r3,r3,2
1000856c:	18c7883a 	add	r3,r3,r3
10008570:	18c7883a 	add	r3,r3,r3
10008574:	12400115 	stw	r9,4(r2)
10008578:	10c7883a 	add	r3,r2,r3
1000857c:	19400015 	stw	r5,0(r3)
10008580:	0005883a 	mov	r2,zero
10008584:	dfc00517 	ldw	ra,20(sp)
10008588:	dc400417 	ldw	r17,16(sp)
1000858c:	dc000317 	ldw	r16,12(sp)
10008590:	dec00604 	addi	sp,sp,24
10008594:	f800283a 	ret
10008598:	00800034 	movhi	r2,0
1000859c:	10800004 	addi	r2,r2,0
100085a0:	10002526 	beq	r2,zero,10008638 <__register_exitproc+0x10c>
100085a4:	01006404 	movi	r4,400
100085a8:	d9400015 	stw	r5,0(sp)
100085ac:	d9800115 	stw	r6,4(sp)
100085b0:	d9c00215 	stw	r7,8(sp)
100085b4:	00000000 	call	10000000 <__alt_mem_sdram>
100085b8:	d9400017 	ldw	r5,0(sp)
100085bc:	d9800117 	ldw	r6,4(sp)
100085c0:	d9c00217 	ldw	r7,8(sp)
100085c4:	10001c26 	beq	r2,zero,10008638 <__register_exitproc+0x10c>
100085c8:	80c05217 	ldw	r3,328(r16)
100085cc:	10000115 	stw	zero,4(r2)
100085d0:	02400044 	movi	r9,1
100085d4:	10c00015 	stw	r3,0(r2)
100085d8:	80805215 	stw	r2,328(r16)
100085dc:	10006215 	stw	zero,392(r2)
100085e0:	10006315 	stw	zero,396(r2)
100085e4:	0007883a 	mov	r3,zero
100085e8:	883fdf26 	beq	r17,zero,10008568 <__alt_data_end+0xf8008568>
100085ec:	18d1883a 	add	r8,r3,r3
100085f0:	4211883a 	add	r8,r8,r8
100085f4:	1211883a 	add	r8,r2,r8
100085f8:	41802215 	stw	r6,136(r8)
100085fc:	01000044 	movi	r4,1
10008600:	11806217 	ldw	r6,392(r2)
10008604:	20c8983a 	sll	r4,r4,r3
10008608:	310cb03a 	or	r6,r6,r4
1000860c:	11806215 	stw	r6,392(r2)
10008610:	41c04215 	stw	r7,264(r8)
10008614:	01800084 	movi	r6,2
10008618:	89bfd31e 	bne	r17,r6,10008568 <__alt_data_end+0xf8008568>
1000861c:	11806317 	ldw	r6,396(r2)
10008620:	3108b03a 	or	r4,r6,r4
10008624:	11006315 	stw	r4,396(r2)
10008628:	003fcf06 	br	10008568 <__alt_data_end+0xf8008568>
1000862c:	80805304 	addi	r2,r16,332
10008630:	80805215 	stw	r2,328(r16)
10008634:	003fc706 	br	10008554 <__alt_data_end+0xf8008554>
10008638:	00bfffc4 	movi	r2,-1
1000863c:	003fd106 	br	10008584 <__alt_data_end+0xf8008584>

10008640 <__call_exitprocs>:
10008640:	00840074 	movhi	r2,4097
10008644:	10a8e004 	addi	r2,r2,-23680
10008648:	10800017 	ldw	r2,0(r2)
1000864c:	defff404 	addi	sp,sp,-48
10008650:	dd800815 	stw	r22,32(sp)
10008654:	d8800015 	stw	r2,0(sp)
10008658:	10805204 	addi	r2,r2,328
1000865c:	dd000615 	stw	r20,24(sp)
10008660:	dc800415 	stw	r18,16(sp)
10008664:	dfc00b15 	stw	ra,44(sp)
10008668:	df000a15 	stw	fp,40(sp)
1000866c:	ddc00915 	stw	r23,36(sp)
10008670:	dd400715 	stw	r21,28(sp)
10008674:	dcc00515 	stw	r19,20(sp)
10008678:	dc400315 	stw	r17,12(sp)
1000867c:	dc000215 	stw	r16,8(sp)
10008680:	2025883a 	mov	r18,r4
10008684:	2829883a 	mov	r20,r5
10008688:	d8800115 	stw	r2,4(sp)
1000868c:	05bfffc4 	movi	r22,-1
10008690:	d8800017 	ldw	r2,0(sp)
10008694:	14c05217 	ldw	r19,328(r2)
10008698:	98001d26 	beq	r19,zero,10008710 <__call_exitprocs+0xd0>
1000869c:	dd400117 	ldw	r21,4(sp)
100086a0:	98800117 	ldw	r2,4(r19)
100086a4:	173fffc4 	addi	fp,r2,-1
100086a8:	e0000d16 	blt	fp,zero,100086e0 <__call_exitprocs+0xa0>
100086ac:	14000044 	addi	r16,r2,1
100086b0:	8421883a 	add	r16,r16,r16
100086b4:	8421883a 	add	r16,r16,r16
100086b8:	84402004 	addi	r17,r16,128
100086bc:	9c63883a 	add	r17,r19,r17
100086c0:	9c21883a 	add	r16,r19,r16
100086c4:	a0001e26 	beq	r20,zero,10008740 <__call_exitprocs+0x100>
100086c8:	80804017 	ldw	r2,256(r16)
100086cc:	15001c26 	beq	r2,r20,10008740 <__call_exitprocs+0x100>
100086d0:	e73fffc4 	addi	fp,fp,-1
100086d4:	843fff04 	addi	r16,r16,-4
100086d8:	8c7fff04 	addi	r17,r17,-4
100086dc:	e5bff91e 	bne	fp,r22,100086c4 <__alt_data_end+0xf80086c4>
100086e0:	00800034 	movhi	r2,0
100086e4:	10800004 	addi	r2,r2,0
100086e8:	10000926 	beq	r2,zero,10008710 <__call_exitprocs+0xd0>
100086ec:	98800117 	ldw	r2,4(r19)
100086f0:	1000311e 	bne	r2,zero,100087b8 <__call_exitprocs+0x178>
100086f4:	98800017 	ldw	r2,0(r19)
100086f8:	10003426 	beq	r2,zero,100087cc <__call_exitprocs+0x18c>
100086fc:	9809883a 	mov	r4,r19
10008700:	a8800015 	stw	r2,0(r21)
10008704:	00000000 	call	10000000 <__alt_mem_sdram>
10008708:	acc00017 	ldw	r19,0(r21)
1000870c:	983fe41e 	bne	r19,zero,100086a0 <__alt_data_end+0xf80086a0>
10008710:	dfc00b17 	ldw	ra,44(sp)
10008714:	df000a17 	ldw	fp,40(sp)
10008718:	ddc00917 	ldw	r23,36(sp)
1000871c:	dd800817 	ldw	r22,32(sp)
10008720:	dd400717 	ldw	r21,28(sp)
10008724:	dd000617 	ldw	r20,24(sp)
10008728:	dcc00517 	ldw	r19,20(sp)
1000872c:	dc800417 	ldw	r18,16(sp)
10008730:	dc400317 	ldw	r17,12(sp)
10008734:	dc000217 	ldw	r16,8(sp)
10008738:	dec00c04 	addi	sp,sp,48
1000873c:	f800283a 	ret
10008740:	98800117 	ldw	r2,4(r19)
10008744:	80c00017 	ldw	r3,0(r16)
10008748:	10bfffc4 	addi	r2,r2,-1
1000874c:	17001526 	beq	r2,fp,100087a4 <__call_exitprocs+0x164>
10008750:	80000015 	stw	zero,0(r16)
10008754:	183fde26 	beq	r3,zero,100086d0 <__alt_data_end+0xf80086d0>
10008758:	00800044 	movi	r2,1
1000875c:	1708983a 	sll	r4,r2,fp
10008760:	98806217 	ldw	r2,392(r19)
10008764:	9dc00117 	ldw	r23,4(r19)
10008768:	2084703a 	and	r2,r4,r2
1000876c:	1000061e 	bne	r2,zero,10008788 <__call_exitprocs+0x148>
10008770:	183ee83a 	callr	r3
10008774:	98800117 	ldw	r2,4(r19)
10008778:	15ffc51e 	bne	r2,r23,10008690 <__alt_data_end+0xf8008690>
1000877c:	a8800017 	ldw	r2,0(r21)
10008780:	14ffd326 	beq	r2,r19,100086d0 <__alt_data_end+0xf80086d0>
10008784:	003fc206 	br	10008690 <__alt_data_end+0xf8008690>
10008788:	98806317 	ldw	r2,396(r19)
1000878c:	2084703a 	and	r2,r4,r2
10008790:	1000061e 	bne	r2,zero,100087ac <__call_exitprocs+0x16c>
10008794:	89400017 	ldw	r5,0(r17)
10008798:	9009883a 	mov	r4,r18
1000879c:	183ee83a 	callr	r3
100087a0:	003ff406 	br	10008774 <__alt_data_end+0xf8008774>
100087a4:	9f000115 	stw	fp,4(r19)
100087a8:	003fea06 	br	10008754 <__alt_data_end+0xf8008754>
100087ac:	89000017 	ldw	r4,0(r17)
100087b0:	183ee83a 	callr	r3
100087b4:	003fef06 	br	10008774 <__alt_data_end+0xf8008774>
100087b8:	98800017 	ldw	r2,0(r19)
100087bc:	982b883a 	mov	r21,r19
100087c0:	1027883a 	mov	r19,r2
100087c4:	983fb61e 	bne	r19,zero,100086a0 <__alt_data_end+0xf80086a0>
100087c8:	003fd106 	br	10008710 <__alt_data_end+0xf8008710>
100087cc:	0005883a 	mov	r2,zero
100087d0:	003ffa06 	br	100087bc <__alt_data_end+0xf80087bc>

100087d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100087d4:	defffd04 	addi	sp,sp,-12
100087d8:	df000215 	stw	fp,8(sp)
100087dc:	df000204 	addi	fp,sp,8
100087e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100087e4:	0001883a 	nop
100087e8:	e0bfff17 	ldw	r2,-4(fp)
100087ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100087f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100087f4:	10000226 	beq	r2,zero,10008800 <_exit+0x2c>
    ALT_SIM_FAIL();
100087f8:	002af070 	cmpltui	zero,zero,43969
100087fc:	00000106 	br	10008804 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10008800:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10008804:	003fff06 	br	10008804 <__alt_data_end+0xf8008804>
