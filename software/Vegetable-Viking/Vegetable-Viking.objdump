
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012870 memsz 0x00012870 flags r-x
    LOAD off    0x00013890 vaddr 0x10012890 paddr 0x10014380 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00015e70 vaddr 0x10015e70 paddr 0x10015e70 align 2**12
         filesz 0x00000000 memsz 0x000003bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000122d4  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  10012500  10012500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10012890  10014380  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003bc  10015e70  10015e70  00015e70  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015380  2**0
                  CONTENTS
  7 .sdram        00000000  1001622c  1001622c  00015380  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ec8  00000000  00000000  000153a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002679f  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009dcf  00000000  00000000  0003ca0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c6f4  00000000  00000000  000467de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024cc  00000000  00000000  00052ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003de6  00000000  00000000  000553a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018f33  00000000  00000000  00059186  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000720bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001438  00000000  00000000  000720d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00076b5d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00076b60  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00076b6c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00076b6d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00076b6e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00076b72  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076b76  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00076b7a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00076b85  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00076b90  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00076b9b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00076ba6  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00076bc0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  0007b007  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10012500 l    d  .rodata	00000000 .rodata
10012890 l    d  .rwdata	00000000 .rwdata
10015e70 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001622c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
10012574 l     O .rodata	00000010 bp
10012554 l     O .rodata	00000010 dp_l
10012564 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
10012584 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003fcc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
10012890 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
100126da l     O .rodata	00000010 zeroes.4181
100126ea l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10008c80 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000a828 l     F .text	00000008 __fp_lock
1000a830 l     F .text	00000008 __fp_unlock
1000a844 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
10012cd4 l     O .rwdata	00000020 lc_ctype_charset
10012cb4 l     O .rwdata	00000020 lc_message_charset
10012cf4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012718 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000d360 l     F .text	000000fc __sprint_r.part.0
1001284c l     O .rodata	00000010 blanks.4125
1001283c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 alt_close.c
1000fda8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fed0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fefc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010004 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10010100 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100101e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100103c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014370 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1001064c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1001079c l     F .text	00000038 alt_dev_reg
100132dc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010a78 l     F .text	00000204 altera_avalon_jtag_uart_irq
10010c7c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100113f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011890 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100119e8 l     F .text	00000050 alt_get_errno
10011a38 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015ec0 g     O .bss	00000004 alt_instruction_exception_handler
10001334 g     F .text	000000bc convertDecimalToBinary
1000699c g     F .text	00000018 putchar
1000cdb4 g     F .text	00000074 _mprec_log10
1000cea0 g     F .text	0000008c __any_on
1000f3a0 g     F .text	00000054 _isatty_r
10012724 g     O .rodata	00000028 __mprec_tinytens
10010310 g     F .text	00000078 alt_main
1001612c g     O .bss	00000100 alt_irq
10002d6c g     F .text	00000014 fabs
1000f3f4 g     F .text	0000005c _lseek_r
10014380 g       *ABS*	00000000 __flash_rwdata_start
1000533c g     F .text	00000084 .hidden __eqdf2
1001622c g       *ABS*	00000000 __alt_heap_start
10006958 g     F .text	0000003c printf
1000fba8 g     F .text	0000009c _wcrtomb_r
1000d1c0 g     F .text	0000005c __sseek
1000ab8c g     F .text	00000010 __sinit
1000e8bc g     F .text	00000154 __swbuf_r
1000b160 g     F .text	0000007c _setlocale_r
1000a9e4 g     F .text	00000078 __sfmoreglue
100103a8 g     F .text	00000020 __malloc_unlock
100004dc g     F .text	000002ac spawningEngine
1000f450 g     F .text	0000015c memmove
1000ab74 g     F .text	00000018 _cleanup
1000bee4 g     F .text	000000a8 _Balloc
100053c0 g     F .text	000000e0 .hidden __gtdf2
10011e28 g     F .text	00000020 altera_nios2_gen2_irq_init
1000691c g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000eea4 g     F .text	00000058 _fstat_r
10015ea4 g     O .bss	00000004 errno
1000d13c g     F .text	00000008 __seofread
10015eac g     O .bss	00000004 alt_argv
1001c33c g       *ABS*	00000000 _gp
10015e70 g     O .bss	00000004 yCursor
1001315c g     O .rwdata	00000180 alt_fd_list
10006994 g     F .text	00000008 _putchar_r
10011e48 g     F .text	00000090 alt_find_dev
1000bc88 g     F .text	00000138 memcpy
1000a838 g     F .text	0000000c _cleanup_r
10006744 g     F .text	000000d0 .hidden __floatsidf
10011970 g     F .text	00000078 alt_io_redirect
100054a0 g     F .text	000000e0 .hidden __ltdf2
10015e74 g     O .bss	00000004 xCursor
10012500 g       *ABS*	00000000 __DTOR_END__
100120c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002d9c g     F .text	00000074 __fpclassifyd
1000cd10 g     F .text	000000a4 __ratio
1000e898 g     F .text	00000024 __vfiprintf_internal
10010e78 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000692c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100040e8 g     F .text	00000008 .hidden __udivsi3
10010054 g     F .text	000000ac isatty
10012774 g     O .rodata	000000c8 __mprec_tens
1000b1dc g     F .text	0000000c __locale_charset
100032fc g     F .text	00000074 .hidden __fixunsdfsi
10015ea0 g     O .bss	00000004 __malloc_top_pad
10014348 g     O .rwdata	00000004 __mb_cur_max
1000b20c g     F .text	0000000c _localeconv_r
1000eefc g     F .text	000004a4 __sfvwrite_r
1000c30c g     F .text	0000003c __i2b
1000d094 g     F .text	00000054 _sbrk_r
10015e78 g     O .bss	00000004 cursorClicked
1000f5ac g     F .text	0000005c _read_r
10014368 g     O .rwdata	00000004 alt_max_fd
1000ebb4 g     F .text	00000100 _fclose_r
1000a7f8 g     F .text	00000030 fflush
10015e9c g     O .bss	00000004 __malloc_max_sbrked_mem
10004120 g     F .text	0000089c .hidden __adddf3
1000cab8 g     F .text	0000011c __b2d
100039b0 g     F .text	0000061c .hidden __umoddi3
10010234 g     F .text	000000dc lseek
1001433c g     O .rwdata	00000004 __fdlib_version
10014340 g     O .rwdata	00000004 _global_impure_ptr
1000f608 g     F .text	000005a0 _realloc_r
1001622c g       *ABS*	00000000 __bss_end
100117a0 g     F .text	000000f0 alt_iic_isr_register
10015eec g     O .bss	00000240 veggieObject
10011d24 g     F .text	00000104 alt_tick
10015e7c g     O .bss	00000004 cursorStreak
10003370 g     F .text	00000640 .hidden __udivdi3
1000ecc8 g     F .text	00000184 _fputwc_r
1001274c g     O .rodata	00000028 __mprec_bigtens
1000c0f0 g     F .text	00000104 __s2b
10006814 g     F .text	000000a4 .hidden __floatunsidf
1000c860 g     F .text	00000060 __mcmp
1000abac g     F .text	00000018 __fp_lock_all
10011754 g     F .text	0000004c alt_ic_irq_enabled
10011c8c g     F .text	00000098 alt_alarm_stop
10015eb4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10013134 g     O .rwdata	00000028 alt_dev_null
100011a8 g     F .text	0000018c port2Unpackager
10002e24 g     F .text	000001e4 rint
100113dc g     F .text	0000001c alt_dcache_flush_all
1000c1f4 g     F .text	00000068 __hi0bits
100066bc g     F .text	00000088 .hidden __fixdfsi
10014380 g       *ABS*	00000000 __ram_rwdata_end
10014360 g     O .rwdata	00000008 alt_dev_list
1001069c g     F .text	00000100 write
1000cf2c g     F .text	000000a0 _putc_r
10012890 g       *ABS*	00000000 __ram_rodata_end
1000ff4c g     F .text	000000b8 fstat
100054a0 g     F .text	000000e0 .hidden __ledf2
1000c5d8 g     F .text	00000140 __pow5mult
1000d474 g     F .text	00001424 ___vfiprintf_internal_r
10015e94 g     O .bss	00000004 __nlocale_changed
100040f0 g     F .text	00000008 .hidden __umodsi3
1001622c g       *ABS*	00000000 end
10015e80 g     O .bss	00000004 key1
100109b4 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10012500 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100068b8 g     F .text	00000064 .hidden __clzsi2
10011084 g     F .text	00000218 altera_avalon_jtag_uart_write
1000ab9c g     F .text	00000004 __sfp_lock_acquire
1000bba0 g     F .text	000000e8 memchr
10006a30 g     F .text	000020fc ___vfprintf_internal_r
1000ad00 g     F .text	000002f0 _free_r
1000b1e8 g     F .text	00000010 __locale_mb_cur_max
10012338 g     F .text	00000194 __call_exitprocs
10015e90 g     O .bss	00000004 __mlocale_changed
1001434c g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10015eb8 g     O .bss	00000004 _alt_tick_rate
100069cc g     F .text	00000064 rand
1000c718 g     F .text	00000148 __lshift
10015ebc g     O .bss	00000004 _alt_nticks
10010418 g     F .text	00000104 read
10010808 g     F .text	00000048 alt_sys_init
10012224 g     F .text	00000114 __register_exitproc
1000c348 g     F .text	00000290 __multiply
10001a0c g     F .text	000010cc __ieee754_pow
10010d24 g     F .text	00000068 altera_avalon_jtag_uart_close
10001568 g     F .text	000004a4 pow
100040f8 g     F .text	00000028 .hidden __mulsi3
10012890 g       *ABS*	00000000 __ram_rwdata_start
10012500 g       *ABS*	00000000 __ram_rodata_start
10015ec4 g     O .bss	00000028 __malloc_current_mallinfo
1000cbd4 g     F .text	0000013c __d2b
10010850 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011fec g     F .text	000000d4 alt_get_fd
1000ea88 g     F .text	00000054 _close_r
100121a8 g     F .text	0000007c memcmp
10010910 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001622c g       *ABS*	00000000 __alt_stack_base
10010960 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10008b50 g     F .text	00000130 __swsetup_r
100049bc g     F .text	00000980 .hidden __divdf3
1000aa5c g     F .text	00000118 __sfp
1000ce28 g     F .text	00000078 __copybits
10012d2c g     O .rwdata	00000408 __malloc_av_
1000aba8 g     F .text	00000004 __sinit_lock_release
10005580 g     F .text	0000086c .hidden __muldf3
1000d0e8 g     F .text	00000054 __sread
10011ed8 g     F .text	00000114 alt_find_file
10011448 g     F .text	000000a4 alt_dev_llist_insert
10010388 g     F .text	00000020 __malloc_lock
1001059c g     F .text	000000b0 sbrk
1000a5d0 g     F .text	00000228 _fflush_r
1000eadc g     F .text	000000d8 _calloc_r
10015e70 g       *ABS*	00000000 __bss_start
1000bdc0 g     F .text	00000124 memset
10000268 g     F .text	00000274 main
10015eb0 g     O .bss	00000004 alt_envp
10015e98 g     O .bss	00000004 __malloc_max_total_mem
100108b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000ea10 g     F .text	0000001c __swbuf
100069b4 g     F .text	00000018 srand
100013f0 g     F .text	00000178 convertBinaryToDecimal
1000d21c g     F .text	00000008 __sclose
10002e10 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
1000ecb4 g     F .text	00000014 fclose
10008ea8 g     F .text	00001728 _dtoa_r
1000b3f8 g     F .text	000007a8 _malloc_r
1000fd1c g     F .text	00000030 __ascii_wctomb
1001436c g     O .rwdata	00000004 alt_errno
1000aff0 g     F .text	000000b8 _fwalk
1000cfcc g     F .text	000000c8 putc
10004038 g     F .text	00000054 .hidden __divsi3
1000abdc g     F .text	00000124 _malloc_trim_r
10012500 g       *ABS*	00000000 __CTOR_END__
10002d80 g     F .text	0000001c finite
1000d224 g     F .text	000000a4 strcmp
10012500 g       *ABS*	00000000 __flash_rodata_start
10012500 g       *ABS*	00000000 __DTOR_LIST__
10015e84 g     O .bss	00000004 key3
100031d4 g     F .text	0000001c copysign
1000533c g     F .text	00000084 .hidden __nedf2
100107d4 g     F .text	00000034 alt_irq_init
1001051c g     F .text	00000080 alt_release_fd
10012594 g     O .rodata	00000100 .hidden __clz_tab
10015e8c g     O .bss	00000004 _PathLocale
1001215c g     F .text	00000014 atexit
10000d8c g     F .text	0000041c messagePackager
1000ea2c g     F .text	0000005c _write_r
1000b218 g     F .text	0000001c setlocale
10014344 g     O .rwdata	00000004 _impure_ptr
10015ea8 g     O .bss	00000004 alt_argc
10003008 g     F .text	000001cc scalbn
10011548 g     F .text	0000005c _do_dtors
1000b204 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000ca58 g     F .text	00000060 __ulp
1000abc4 g     F .text	00000018 __fp_unlock_all
10014358 g     O .rwdata	00000008 alt_fs_list
10002e18 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000b234 g     F .text	0000000c localeconv
10002ad8 g     F .text	00000294 __ieee754_sqrt
100115c0 g     F .text	00000050 alt_ic_isr_register
10014380 g       *ABS*	00000000 _edata
1001622c g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10010d8c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10015e88 g     O .bss	00000004 key2
100116b0 g     F .text	000000a4 alt_ic_irq_disable
1000d144 g     F .text	0000007c __swrite
10014350 g     O .rwdata	00000004 __malloc_trim_threshold
1000b1f8 g     F .text	0000000c __locale_msgcharset
10012170 g     F .text	00000038 exit
1000b0a8 g     F .text	000000b8 _fwalk_reent
1000c8c0 g     F .text	00000198 __mdiff
10000788 g     F .text	000003d4 physicsEngine
1000408c g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000aba0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100124cc g     F .text	00000034 _exit
1001129c g     F .text	00000140 alt_alarm_start
100031f0 g     F .text	0000010c .hidden __muldi3
1000b240 g     F .text	000001b8 __smakebuf_r
1000d2c8 g     F .text	00000098 strlen
10011b2c g     F .text	00000160 open
100053c0 g     F .text	000000e0 .hidden __gedf2
10014354 g     O .rwdata	00000004 __wctomb
1000d45c g     F .text	00000018 __sprint_r
100115a4 g     F .text	0000001c alt_icache_flush_all
10000b5c g     F .text	00000230 FPGAcommunicator
10014374 g     O .rwdata	00000004 alt_priority_mask
10011610 g     F .text	000000a0 alt_ic_irq_enable
10008b2c g     F .text	00000024 __vfprintf_internal
1000fd4c g     F .text	0000005c _wctomb_r
10005dec g     F .text	000008d0 .hidden __subdf3
1000c25c g     F .text	000000b0 __lo0bits
10014378 g     O .rwdata	00000008 alt_alarm_list
100114ec g     F .text	0000005c _do_ctors
1000fc44 g     F .text	000000d8 wcrtomb
1000fdf8 g     F .text	000000d8 close
10010164 g     F .text	00000080 alt_load
1000ee4c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000aba4 g     F .text	00000004 __sinit_lock_acquire
1000bfb4 g     F .text	0000013c __multadd
1000bf8c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10984b04 	addi	r2,r2,24876
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10984b04 	addi	r2,r2,24876
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e117 	ldw	r2,-25724(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e117 	ldw	r2,-25724(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6b0cf14 	ori	gp,gp,49980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10979c14 	ori	r2,r2,24176

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d88b14 	ori	r3,r3,25132

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	00101640 	call	10010164 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00103100 	call	10010310 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00069b40 	call	100069b4 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a6cd15 	stw	r2,-25804(gp)
	port2Unpackager();
100002b8:	00011a80 	call	100011a8 <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	8417bb04 	addi	r16,r16,24300
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	00040f80 	call	100040f8 <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	8417bb04 	addi	r16,r16,24300
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00040f80 	call	100040f8 <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	8417bb04 	addi	r16,r16,24300
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	00040f80 	call	100040f8 <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	8417bb04 	addi	r16,r16,24300
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	00040f80 	call	100040f8 <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	8417bb04 	addi	r16,r16,24300
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	00040f80 	call	100040f8 <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	8417bb04 	addi	r16,r16,24300
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	00040f80 	call	100040f8 <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	8417bb04 	addi	r16,r16,24300
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	00040f80 	call	100040f8 <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800410 	cmplti	r2,r2,16
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	1097bb04 	addi	r2,r2,24300
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	1097bb04 	addi	r2,r2,24300
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	1097bb04 	addi	r2,r2,24300
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	1097bb04 	addi	r2,r2,24300
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	1097bb04 	addi	r2,r2,24300
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	1097bb04 	addi	r2,r2,24300
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	1097bb04 	addi	r2,r2,24300
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	1097bb04 	addi	r2,r2,24300
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
	//	printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
	//	printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .1 seconds pass
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	e0bff817 	ldw	r2,-32(fp)
10000480:	1885c83a 	sub	r2,r3,r2
10000484:	108000b0 	cmpltui	r2,r2,2
10000488:	1000031e 	bne	r2,zero,10000498 <main+0x230>
		{
			physicsEngine();	// call our physics engine!
1000048c:	00007880 	call	10000788 <physicsEngine>
			lastPhysixed = elapsedTime;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000498:	e0fffe17 	ldw	r3,-8(fp)
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	1885c83a 	sub	r2,r3,r2
100004a4:	e0fffa17 	ldw	r3,-24(fp)
100004a8:	1880092e 	bgeu	r3,r2,100004d0 <main+0x268>
		{
			spawningEngine();	// call our spawning engine!
100004ac:	00004dc0 	call	100004dc <spawningEngine>
			lastSpawned = elapsedTime;
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 60) + 20;
100004b8:	00069cc0 	call	100069cc <rand>
100004bc:	1009883a 	mov	r4,r2
100004c0:	01400f04 	movi	r5,60
100004c4:	000408c0 	call	1000408c <__modsi3>
100004c8:	10800504 	addi	r2,r2,20
100004cc:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}

	port2Unpackager();	// keep unpacking our stuff!
100004d0:	00011a80 	call	100011a8 <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
100004d4:	0000b5c0 	call	10000b5c <FPGAcommunicator>
	}
100004d8:	003fe006 	br	1000045c <__alt_data_end+0xf800045c>

100004dc <spawningEngine>:
	return 0;
}

void spawningEngine()
{
100004dc:	defff504 	addi	sp,sp,-44
100004e0:	dfc00a15 	stw	ra,40(sp)
100004e4:	df000915 	stw	fp,36(sp)
100004e8:	dc400815 	stw	r17,32(sp)
100004ec:	dc000715 	stw	r16,28(sp)
100004f0:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
100004f4:	00800044 	movi	r2,1
100004f8:	e0bff715 	stw	r2,-36(fp)
100004fc:	00009806 	br	10000760 <spawningEngine+0x284>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000500:	04040074 	movhi	r16,4097
10000504:	8417bb04 	addi	r16,r16,24300
10000508:	e0bff717 	ldw	r2,-36(fp)
1000050c:	1009883a 	mov	r4,r2
10000510:	01400904 	movi	r5,36
10000514:	00040f80 	call	100040f8 <__mulsi3>
10000518:	8085883a 	add	r2,r16,r2
1000051c:	10800304 	addi	r2,r2,12
10000520:	10800017 	ldw	r2,0(r2)
10000524:	10008b1e 	bne	r2,zero,10000754 <spawningEngine+0x278>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 104) + 14;
10000528:	00069cc0 	call	100069cc <rand>
1000052c:	1009883a 	mov	r4,r2
10000530:	01401a04 	movi	r5,104
10000534:	000408c0 	call	1000408c <__modsi3>
10000538:	10800384 	addi	r2,r2,14
1000053c:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
10000540:	00069cc0 	call	100069cc <rand>
10000544:	1007883a 	mov	r3,r2
10000548:	00a00034 	movhi	r2,32768
1000054c:	108001c4 	addi	r2,r2,7
10000550:	1884703a 	and	r2,r3,r2
10000554:	1000040e 	bge	r2,zero,10000568 <spawningEngine+0x8c>
10000558:	10bfffc4 	addi	r2,r2,-1
1000055c:	00fffe04 	movi	r3,-8
10000560:	10c4b03a 	or	r2,r2,r3
10000564:	10800044 	addi	r2,r2,1
10000568:	10800044 	addi	r2,r2,1
1000056c:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 30) + 30;
10000570:	00069cc0 	call	100069cc <rand>
10000574:	1009883a 	mov	r4,r2
10000578:	01400784 	movi	r5,30
1000057c:	000408c0 	call	1000408c <__modsi3>
10000580:	10800784 	addi	r2,r2,30
10000584:	1009883a 	mov	r4,r2
10000588:	00067440 	call	10006744 <__floatsidf>
1000058c:	1009883a 	mov	r4,r2
10000590:	180b883a 	mov	r5,r3
10000594:	e13ffc15 	stw	r4,-16(fp)
10000598:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 15) - 7.5;
1000059c:	00069cc0 	call	100069cc <rand>
100005a0:	1009883a 	mov	r4,r2
100005a4:	014003c4 	movi	r5,15
100005a8:	000408c0 	call	1000408c <__modsi3>
100005ac:	1009883a 	mov	r4,r2
100005b0:	00067440 	call	10006744 <__floatsidf>
100005b4:	100b883a 	mov	r5,r2
100005b8:	180d883a 	mov	r6,r3
100005bc:	2809883a 	mov	r4,r5
100005c0:	300b883a 	mov	r5,r6
100005c4:	000d883a 	mov	r6,zero
100005c8:	01d007b4 	movhi	r7,16414
100005cc:	0005dec0 	call	10005dec <__subdf3>
100005d0:	1009883a 	mov	r4,r2
100005d4:	180b883a 	mov	r5,r3
100005d8:	e13ff815 	stw	r4,-32(fp)
100005dc:	e17ff915 	stw	r5,-28(fp)

			if (randomX > 80)
100005e0:	e0bffa17 	ldw	r2,-24(fp)
100005e4:	10801470 	cmpltui	r2,r2,81
100005e8:	10000b1e 	bne	r2,zero,10000618 <spawningEngine+0x13c>
			{
				randomSpeedX = (rand() % 15);
100005ec:	00069cc0 	call	100069cc <rand>
100005f0:	1009883a 	mov	r4,r2
100005f4:	014003c4 	movi	r5,15
100005f8:	000408c0 	call	1000408c <__modsi3>
100005fc:	1009883a 	mov	r4,r2
10000600:	00067440 	call	10006744 <__floatsidf>
10000604:	1009883a 	mov	r4,r2
10000608:	180b883a 	mov	r5,r3
1000060c:	e13ff815 	stw	r4,-32(fp)
10000610:	e17ff915 	stw	r5,-28(fp)
10000614:	00000e06 	br	10000650 <spawningEngine+0x174>
			}
			else if (randomX < 40)
10000618:	e0bffa17 	ldw	r2,-24(fp)
1000061c:	10800a28 	cmpgeui	r2,r2,40
10000620:	10000b1e 	bne	r2,zero,10000650 <spawningEngine+0x174>
			{
				randomSpeedX = (rand() % 15) - 15;
10000624:	00069cc0 	call	100069cc <rand>
10000628:	1009883a 	mov	r4,r2
1000062c:	014003c4 	movi	r5,15
10000630:	000408c0 	call	1000408c <__modsi3>
10000634:	10bffc44 	addi	r2,r2,-15
10000638:	1009883a 	mov	r4,r2
1000063c:	00067440 	call	10006744 <__floatsidf>
10000640:	1009883a 	mov	r4,r2
10000644:	180b883a 	mov	r5,r3
10000648:	e13ff815 	stw	r4,-32(fp)
1000064c:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000650:	e47ffa17 	ldw	r17,-24(fp)
10000654:	04040074 	movhi	r16,4097
10000658:	8417bb04 	addi	r16,r16,24300
1000065c:	e0bff717 	ldw	r2,-36(fp)
10000660:	1009883a 	mov	r4,r2
10000664:	01400904 	movi	r5,36
10000668:	00040f80 	call	100040f8 <__mulsi3>
1000066c:	8085883a 	add	r2,r16,r2
10000670:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000674:	04040074 	movhi	r16,4097
10000678:	8417bb04 	addi	r16,r16,24300
1000067c:	e0bff717 	ldw	r2,-36(fp)
10000680:	1009883a 	mov	r4,r2
10000684:	01400904 	movi	r5,36
10000688:	00040f80 	call	100040f8 <__mulsi3>
1000068c:	8085883a 	add	r2,r16,r2
10000690:	10800104 	addi	r2,r2,4
10000694:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000698:	04040074 	movhi	r16,4097
1000069c:	8417bb04 	addi	r16,r16,24300
100006a0:	e0bff717 	ldw	r2,-36(fp)
100006a4:	1009883a 	mov	r4,r2
100006a8:	01400904 	movi	r5,36
100006ac:	00040f80 	call	100040f8 <__mulsi3>
100006b0:	8085883a 	add	r2,r16,r2
100006b4:	10800204 	addi	r2,r2,8
100006b8:	e0fffb17 	ldw	r3,-20(fp)
100006bc:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
100006c0:	04040074 	movhi	r16,4097
100006c4:	8417bb04 	addi	r16,r16,24300
100006c8:	e0bff717 	ldw	r2,-36(fp)
100006cc:	1009883a 	mov	r4,r2
100006d0:	01400904 	movi	r5,36
100006d4:	00040f80 	call	100040f8 <__mulsi3>
100006d8:	8085883a 	add	r2,r16,r2
100006dc:	10800304 	addi	r2,r2,12
100006e0:	00c00044 	movi	r3,1
100006e4:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
100006e8:	04040074 	movhi	r16,4097
100006ec:	8417bb04 	addi	r16,r16,24300
100006f0:	e0bff717 	ldw	r2,-36(fp)
100006f4:	1009883a 	mov	r4,r2
100006f8:	01400904 	movi	r5,36
100006fc:	00040f80 	call	100040f8 <__mulsi3>
10000700:	8085883a 	add	r2,r16,r2
10000704:	10800504 	addi	r2,r2,20
10000708:	e0fff817 	ldw	r3,-32(fp)
1000070c:	10c00015 	stw	r3,0(r2)
10000710:	e0fff917 	ldw	r3,-28(fp)
10000714:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000718:	04040074 	movhi	r16,4097
1000071c:	8417bb04 	addi	r16,r16,24300
10000720:	e0bff717 	ldw	r2,-36(fp)
10000724:	1009883a 	mov	r4,r2
10000728:	01400904 	movi	r5,36
1000072c:	00040f80 	call	100040f8 <__mulsi3>
10000730:	8085883a 	add	r2,r16,r2
10000734:	10800704 	addi	r2,r2,28
10000738:	e0fffc17 	ldw	r3,-16(fp)
1000073c:	10c00015 	stw	r3,0(r2)
10000740:	e0fffd17 	ldw	r3,-12(fp)
10000744:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000748:	00800a84 	movi	r2,42
1000074c:	e0bff715 	stw	r2,-36(fp)
			break;
10000750:	00000606 	br	1000076c <spawningEngine+0x290>
}

void spawningEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000754:	e0bff717 	ldw	r2,-36(fp)
10000758:	10800044 	addi	r2,r2,1
1000075c:	e0bff715 	stw	r2,-36(fp)
10000760:	e0bff717 	ldw	r2,-36(fp)
10000764:	10800410 	cmplti	r2,r2,16
10000768:	103f651e 	bne	r2,zero,10000500 <__alt_data_end+0xf8000500>
			// now let's break
			i = 42;
			break;
		}
	}
}
1000076c:	e6fffe04 	addi	sp,fp,-8
10000770:	dfc00317 	ldw	ra,12(sp)
10000774:	df000217 	ldw	fp,8(sp)
10000778:	dc400117 	ldw	r17,4(sp)
1000077c:	dc000017 	ldw	r16,0(sp)
10000780:	dec00404 	addi	sp,sp,16
10000784:	f800283a 	ret

10000788 <physicsEngine>:

void physicsEngine()
{
10000788:	defffa04 	addi	sp,sp,-24
1000078c:	dfc00515 	stw	ra,20(sp)
10000790:	df000415 	stw	fp,16(sp)
10000794:	dc800315 	stw	r18,12(sp)
10000798:	dc400215 	stw	r17,8(sp)
1000079c:	dc000115 	stw	r16,4(sp)
100007a0:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100007a4:	00800044 	movi	r2,1
100007a8:	e0bffc15 	stw	r2,-16(fp)
100007ac:	0000df06 	br	10000b2c <physicsEngine+0x3a4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
100007b0:	04040074 	movhi	r16,4097
100007b4:	8417bb04 	addi	r16,r16,24300
100007b8:	e0bffc17 	ldw	r2,-16(fp)
100007bc:	1009883a 	mov	r4,r2
100007c0:	01400904 	movi	r5,36
100007c4:	00040f80 	call	100040f8 <__mulsi3>
100007c8:	8085883a 	add	r2,r16,r2
100007cc:	10800304 	addi	r2,r2,12
100007d0:	10800017 	ldw	r2,0(r2)
100007d4:	1000d226 	beq	r2,zero,10000b20 <physicsEngine+0x398>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
100007d8:	04040074 	movhi	r16,4097
100007dc:	8417bb04 	addi	r16,r16,24300
100007e0:	e0bffc17 	ldw	r2,-16(fp)
100007e4:	1009883a 	mov	r4,r2
100007e8:	01400904 	movi	r5,36
100007ec:	00040f80 	call	100040f8 <__mulsi3>
100007f0:	8085883a 	add	r2,r16,r2
100007f4:	10800017 	ldw	r2,0(r2)
100007f8:	1009883a 	mov	r4,r2
100007fc:	00067440 	call	10006744 <__floatsidf>
10000800:	1023883a 	mov	r17,r2
10000804:	1825883a 	mov	r18,r3
10000808:	04040074 	movhi	r16,4097
1000080c:	8417bb04 	addi	r16,r16,24300
10000810:	e0bffc17 	ldw	r2,-16(fp)
10000814:	1009883a 	mov	r4,r2
10000818:	01400904 	movi	r5,36
1000081c:	00040f80 	call	100040f8 <__mulsi3>
10000820:	8085883a 	add	r2,r16,r2
10000824:	11000504 	addi	r4,r2,20
10000828:	20800017 	ldw	r2,0(r4)
1000082c:	20c00117 	ldw	r3,4(r4)
10000830:	8809883a 	mov	r4,r17
10000834:	900b883a 	mov	r5,r18
10000838:	100d883a 	mov	r6,r2
1000083c:	180f883a 	mov	r7,r3
10000840:	00041200 	call	10004120 <__adddf3>
10000844:	1009883a 	mov	r4,r2
10000848:	180b883a 	mov	r5,r3
1000084c:	2005883a 	mov	r2,r4
10000850:	2807883a 	mov	r3,r5
10000854:	1009883a 	mov	r4,r2
10000858:	180b883a 	mov	r5,r3
1000085c:	00066bc0 	call	100066bc <__fixdfsi>
10000860:	1023883a 	mov	r17,r2
10000864:	04040074 	movhi	r16,4097
10000868:	8417bb04 	addi	r16,r16,24300
1000086c:	e0bffc17 	ldw	r2,-16(fp)
10000870:	1009883a 	mov	r4,r2
10000874:	01400904 	movi	r5,36
10000878:	00040f80 	call	100040f8 <__mulsi3>
1000087c:	8085883a 	add	r2,r16,r2
10000880:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000884:	04040074 	movhi	r16,4097
10000888:	8417bb04 	addi	r16,r16,24300
1000088c:	e0bffc17 	ldw	r2,-16(fp)
10000890:	1009883a 	mov	r4,r2
10000894:	01400904 	movi	r5,36
10000898:	00040f80 	call	100040f8 <__mulsi3>
1000089c:	8085883a 	add	r2,r16,r2
100008a0:	10800104 	addi	r2,r2,4
100008a4:	10800017 	ldw	r2,0(r2)
100008a8:	1009883a 	mov	r4,r2
100008ac:	00067440 	call	10006744 <__floatsidf>
100008b0:	1023883a 	mov	r17,r2
100008b4:	1825883a 	mov	r18,r3
100008b8:	04040074 	movhi	r16,4097
100008bc:	8417bb04 	addi	r16,r16,24300
100008c0:	e0bffc17 	ldw	r2,-16(fp)
100008c4:	1009883a 	mov	r4,r2
100008c8:	01400904 	movi	r5,36
100008cc:	00040f80 	call	100040f8 <__mulsi3>
100008d0:	8085883a 	add	r2,r16,r2
100008d4:	11000704 	addi	r4,r2,28
100008d8:	20800017 	ldw	r2,0(r4)
100008dc:	20c00117 	ldw	r3,4(r4)
100008e0:	8809883a 	mov	r4,r17
100008e4:	900b883a 	mov	r5,r18
100008e8:	100d883a 	mov	r6,r2
100008ec:	180f883a 	mov	r7,r3
100008f0:	00041200 	call	10004120 <__adddf3>
100008f4:	1009883a 	mov	r4,r2
100008f8:	180b883a 	mov	r5,r3
100008fc:	2005883a 	mov	r2,r4
10000900:	2807883a 	mov	r3,r5
10000904:	1009883a 	mov	r4,r2
10000908:	180b883a 	mov	r5,r3
1000090c:	00066bc0 	call	100066bc <__fixdfsi>
10000910:	1023883a 	mov	r17,r2
10000914:	04040074 	movhi	r16,4097
10000918:	8417bb04 	addi	r16,r16,24300
1000091c:	e0bffc17 	ldw	r2,-16(fp)
10000920:	1009883a 	mov	r4,r2
10000924:	01400904 	movi	r5,36
10000928:	00040f80 	call	100040f8 <__mulsi3>
1000092c:	8085883a 	add	r2,r16,r2
10000930:	10800104 	addi	r2,r2,4
10000934:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 3;
10000938:	04040074 	movhi	r16,4097
1000093c:	8417bb04 	addi	r16,r16,24300
10000940:	e0bffc17 	ldw	r2,-16(fp)
10000944:	1009883a 	mov	r4,r2
10000948:	01400904 	movi	r5,36
1000094c:	00040f80 	call	100040f8 <__mulsi3>
10000950:	8085883a 	add	r2,r16,r2
10000954:	11000704 	addi	r4,r2,28
10000958:	20800017 	ldw	r2,0(r4)
1000095c:	20c00117 	ldw	r3,4(r4)
10000960:	1009883a 	mov	r4,r2
10000964:	180b883a 	mov	r5,r3
10000968:	000d883a 	mov	r6,zero
1000096c:	01d00234 	movhi	r7,16392
10000970:	0005dec0 	call	10005dec <__subdf3>
10000974:	1009883a 	mov	r4,r2
10000978:	180b883a 	mov	r5,r3
1000097c:	2021883a 	mov	r16,r4
10000980:	2823883a 	mov	r17,r5
10000984:	04840074 	movhi	r18,4097
10000988:	9497bb04 	addi	r18,r18,24300
1000098c:	e0bffc17 	ldw	r2,-16(fp)
10000990:	1009883a 	mov	r4,r2
10000994:	01400904 	movi	r5,36
10000998:	00040f80 	call	100040f8 <__mulsi3>
1000099c:	9085883a 	add	r2,r18,r2
100009a0:	10800704 	addi	r2,r2,28
100009a4:	14000015 	stw	r16,0(r2)
100009a8:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are below the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
100009ac:	04040074 	movhi	r16,4097
100009b0:	8417bb04 	addi	r16,r16,24300
100009b4:	e0bffc17 	ldw	r2,-16(fp)
100009b8:	1009883a 	mov	r4,r2
100009bc:	01400904 	movi	r5,36
100009c0:	00040f80 	call	100040f8 <__mulsi3>
100009c4:	8085883a 	add	r2,r16,r2
100009c8:	10800104 	addi	r2,r2,4
100009cc:	10800017 	ldw	r2,0(r2)
100009d0:	10001316 	blt	r2,zero,10000a20 <physicsEngine+0x298>
100009d4:	04040074 	movhi	r16,4097
100009d8:	8417bb04 	addi	r16,r16,24300
100009dc:	e0bffc17 	ldw	r2,-16(fp)
100009e0:	1009883a 	mov	r4,r2
100009e4:	01400904 	movi	r5,36
100009e8:	00040f80 	call	100040f8 <__mulsi3>
100009ec:	8085883a 	add	r2,r16,r2
100009f0:	10800017 	ldw	r2,0(r2)
100009f4:	10000a16 	blt	r2,zero,10000a20 <physicsEngine+0x298>
100009f8:	04040074 	movhi	r16,4097
100009fc:	8417bb04 	addi	r16,r16,24300
10000a00:	e0bffc17 	ldw	r2,-16(fp)
10000a04:	1009883a 	mov	r4,r2
10000a08:	01400904 	movi	r5,36
10000a0c:	00040f80 	call	100040f8 <__mulsi3>
10000a10:	8085883a 	add	r2,r16,r2
10000a14:	10800017 	ldw	r2,0(r2)
10000a18:	1080a050 	cmplti	r2,r2,641
10000a1c:	1000401e 	bne	r2,zero,10000b20 <physicsEngine+0x398>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000a20:	04040074 	movhi	r16,4097
10000a24:	8417bb04 	addi	r16,r16,24300
10000a28:	e0bffc17 	ldw	r2,-16(fp)
10000a2c:	1009883a 	mov	r4,r2
10000a30:	01400904 	movi	r5,36
10000a34:	00040f80 	call	100040f8 <__mulsi3>
10000a38:	8085883a 	add	r2,r16,r2
10000a3c:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000a40:	04040074 	movhi	r16,4097
10000a44:	8417bb04 	addi	r16,r16,24300
10000a48:	e0bffc17 	ldw	r2,-16(fp)
10000a4c:	1009883a 	mov	r4,r2
10000a50:	01400904 	movi	r5,36
10000a54:	00040f80 	call	100040f8 <__mulsi3>
10000a58:	8085883a 	add	r2,r16,r2
10000a5c:	10800104 	addi	r2,r2,4
10000a60:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000a64:	04040074 	movhi	r16,4097
10000a68:	8417bb04 	addi	r16,r16,24300
10000a6c:	e0bffc17 	ldw	r2,-16(fp)
10000a70:	1009883a 	mov	r4,r2
10000a74:	01400904 	movi	r5,36
10000a78:	00040f80 	call	100040f8 <__mulsi3>
10000a7c:	8085883a 	add	r2,r16,r2
10000a80:	10800204 	addi	r2,r2,8
10000a84:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000a88:	04040074 	movhi	r16,4097
10000a8c:	8417bb04 	addi	r16,r16,24300
10000a90:	e0bffc17 	ldw	r2,-16(fp)
10000a94:	1009883a 	mov	r4,r2
10000a98:	01400904 	movi	r5,36
10000a9c:	00040f80 	call	100040f8 <__mulsi3>
10000aa0:	8085883a 	add	r2,r16,r2
10000aa4:	10800304 	addi	r2,r2,12
10000aa8:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000aac:	04040074 	movhi	r16,4097
10000ab0:	8417bb04 	addi	r16,r16,24300
10000ab4:	e0bffc17 	ldw	r2,-16(fp)
10000ab8:	1009883a 	mov	r4,r2
10000abc:	01400904 	movi	r5,36
10000ac0:	00040f80 	call	100040f8 <__mulsi3>
10000ac4:	8085883a 	add	r2,r16,r2
10000ac8:	10800404 	addi	r2,r2,16
10000acc:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000ad0:	04040074 	movhi	r16,4097
10000ad4:	8417bb04 	addi	r16,r16,24300
10000ad8:	e0bffc17 	ldw	r2,-16(fp)
10000adc:	1009883a 	mov	r4,r2
10000ae0:	01400904 	movi	r5,36
10000ae4:	00040f80 	call	100040f8 <__mulsi3>
10000ae8:	8085883a 	add	r2,r16,r2
10000aec:	10800504 	addi	r2,r2,20
10000af0:	10000015 	stw	zero,0(r2)
10000af4:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000af8:	04040074 	movhi	r16,4097
10000afc:	8417bb04 	addi	r16,r16,24300
10000b00:	e0bffc17 	ldw	r2,-16(fp)
10000b04:	1009883a 	mov	r4,r2
10000b08:	01400904 	movi	r5,36
10000b0c:	00040f80 	call	100040f8 <__mulsi3>
10000b10:	8085883a 	add	r2,r16,r2
10000b14:	10800704 	addi	r2,r2,28
10000b18:	10000015 	stw	zero,0(r2)
10000b1c:	10000115 	stw	zero,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000b20:	e0bffc17 	ldw	r2,-16(fp)
10000b24:	10800044 	addi	r2,r2,1
10000b28:	e0bffc15 	stw	r2,-16(fp)
10000b2c:	e0bffc17 	ldw	r2,-16(fp)
10000b30:	10800410 	cmplti	r2,r2,16
10000b34:	103f1e1e 	bne	r2,zero,100007b0 <__alt_data_end+0xf80007b0>
				veggieObject[i].yVelocity = 0;
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000b38:	0001883a 	nop
}
10000b3c:	e6fffd04 	addi	sp,fp,-12
10000b40:	dfc00417 	ldw	ra,16(sp)
10000b44:	df000317 	ldw	fp,12(sp)
10000b48:	dc800217 	ldw	r18,8(sp)
10000b4c:	dc400117 	ldw	r17,4(sp)
10000b50:	dc000017 	ldw	r16,0(sp)
10000b54:	dec00504 	addi	sp,sp,20
10000b58:	f800283a 	ret

10000b5c <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000b5c:	deffd504 	addi	sp,sp,-172
10000b60:	dfc02a15 	stw	ra,168(sp)
10000b64:	df002915 	stw	fp,164(sp)
10000b68:	dc002815 	stw	r16,160(sp)
10000b6c:	df002904 	addi	fp,sp,164
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000b70:	e03fdc15 	stw	zero,-144(fp)
10000b74:	00002406 	br	10000c08 <FPGAcommunicator+0xac>
	{
		unsigned long long tempPackage = messagePackager(veggieObject[i]);
10000b78:	04040074 	movhi	r16,4097
10000b7c:	8417bb04 	addi	r16,r16,24300
10000b80:	e0bfdc17 	ldw	r2,-144(fp)
10000b84:	1009883a 	mov	r4,r2
10000b88:	01400904 	movi	r5,36
10000b8c:	00040f80 	call	100040f8 <__mulsi3>
10000b90:	8085883a 	add	r2,r16,r2
10000b94:	10c00417 	ldw	r3,16(r2)
10000b98:	d8c00015 	stw	r3,0(sp)
10000b9c:	10c00517 	ldw	r3,20(r2)
10000ba0:	d8c00115 	stw	r3,4(sp)
10000ba4:	10c00617 	ldw	r3,24(r2)
10000ba8:	d8c00215 	stw	r3,8(sp)
10000bac:	10c00717 	ldw	r3,28(r2)
10000bb0:	d8c00315 	stw	r3,12(sp)
10000bb4:	10c00817 	ldw	r3,32(r2)
10000bb8:	d8c00415 	stw	r3,16(sp)
10000bbc:	11000017 	ldw	r4,0(r2)
10000bc0:	11400117 	ldw	r5,4(r2)
10000bc4:	11800217 	ldw	r6,8(r2)
10000bc8:	11c00317 	ldw	r7,12(r2)
10000bcc:	0000d8c0 	call	10000d8c <messagePackager>
10000bd0:	e0bfdd15 	stw	r2,-140(fp)
10000bd4:	e03fde15 	stw	zero,-136(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000bd8:	e0bfdc17 	ldw	r2,-144(fp)
10000bdc:	100490fa 	slli	r2,r2,3
10000be0:	e0ffdc04 	addi	r3,fp,-144
10000be4:	1885883a 	add	r2,r3,r2
10000be8:	10800304 	addi	r2,r2,12
10000bec:	e0ffdd17 	ldw	r3,-140(fp)
10000bf0:	10c00015 	stw	r3,0(r2)
10000bf4:	e0ffde17 	ldw	r3,-136(fp)
10000bf8:	10c00115 	stw	r3,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000bfc:	e0bfdc17 	ldw	r2,-144(fp)
10000c00:	10800044 	addi	r2,r2,1
10000c04:	e0bfdc15 	stw	r2,-144(fp)
10000c08:	e0bfdc17 	ldw	r2,-144(fp)
10000c0c:	10800410 	cmplti	r2,r2,16
10000c10:	103fd91e 	bne	r2,zero,10000b78 <__alt_data_end+0xf8000b78>

		FPGAmessage[i] = tempPackage;
	}


	*to_hw_sig = 2;	// 2 means we're starting communication
10000c14:	00801c04 	movi	r2,112
10000c18:	00c00084 	movi	r3,2
10000c1c:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000c20:	01004004 	movi	r4,256
10000c24:	e0bfdf17 	ldw	r2,-132(fp)
10000c28:	e0ffe017 	ldw	r3,-128(fp)
10000c2c:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000c30:	01003c04 	movi	r4,240
10000c34:	e0bfe117 	ldw	r2,-124(fp)
10000c38:	e0ffe217 	ldw	r3,-120(fp)
10000c3c:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000c40:	01003804 	movi	r4,224
10000c44:	e0bfe317 	ldw	r2,-116(fp)
10000c48:	e0ffe417 	ldw	r3,-112(fp)
10000c4c:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000c50:	01003404 	movi	r4,208
10000c54:	e0bfe517 	ldw	r2,-108(fp)
10000c58:	e0ffe617 	ldw	r3,-104(fp)
10000c5c:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000c60:	01003004 	movi	r4,192
10000c64:	e0bfe717 	ldw	r2,-100(fp)
10000c68:	e0ffe817 	ldw	r3,-96(fp)
10000c6c:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000c70:	01002c04 	movi	r4,176
10000c74:	e0bfe917 	ldw	r2,-92(fp)
10000c78:	e0ffea17 	ldw	r3,-88(fp)
10000c7c:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000c80:	01002804 	movi	r4,160
10000c84:	e0bfeb17 	ldw	r2,-84(fp)
10000c88:	e0ffec17 	ldw	r3,-80(fp)
10000c8c:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000c90:	01001804 	movi	r4,96
10000c94:	e0bfed17 	ldw	r2,-76(fp)
10000c98:	e0ffee17 	ldw	r3,-72(fp)
10000c9c:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000ca0:	01002404 	movi	r4,144
10000ca4:	e0bfef17 	ldw	r2,-68(fp)
10000ca8:	e0fff017 	ldw	r3,-64(fp)
10000cac:	20800015 	stw	r2,0(r4)
	*to_hw_port9 = FPGAmessage[9];
10000cb0:	01002004 	movi	r4,128
10000cb4:	e0bff117 	ldw	r2,-60(fp)
10000cb8:	e0fff217 	ldw	r3,-56(fp)
10000cbc:	20800015 	stw	r2,0(r4)
	*to_hw_port10 = FPGAmessage[10];
10000cc0:	01001004 	movi	r4,64
10000cc4:	e0bff317 	ldw	r2,-52(fp)
10000cc8:	e0fff417 	ldw	r3,-48(fp)
10000ccc:	20800015 	stw	r2,0(r4)
	*to_hw_port11 = FPGAmessage[11];
10000cd0:	01000c04 	movi	r4,48
10000cd4:	e0bff517 	ldw	r2,-44(fp)
10000cd8:	e0fff617 	ldw	r3,-40(fp)
10000cdc:	20800015 	stw	r2,0(r4)
	*to_hw_port12 = FPGAmessage[12];
10000ce0:	01000804 	movi	r4,32
10000ce4:	e0bff717 	ldw	r2,-36(fp)
10000ce8:	e0fff817 	ldw	r3,-32(fp)
10000cec:	20800015 	stw	r2,0(r4)
	*to_hw_port13 = FPGAmessage[13];
10000cf0:	01005804 	movi	r4,352
10000cf4:	e0bff917 	ldw	r2,-28(fp)
10000cf8:	e0fffa17 	ldw	r3,-24(fp)
10000cfc:	20800015 	stw	r2,0(r4)
	*to_hw_port14 = FPGAmessage[14];
10000d00:	01005404 	movi	r4,336
10000d04:	e0bffb17 	ldw	r2,-20(fp)
10000d08:	e0fffc17 	ldw	r3,-16(fp)
10000d0c:	20800015 	stw	r2,0(r4)
	*to_hw_port15 = FPGAmessage[15];
10000d10:	01005004 	movi	r4,320
10000d14:	e0bffd17 	ldw	r2,-12(fp)
10000d18:	e0fffe17 	ldw	r3,-8(fp)
10000d1c:	20800015 	stw	r2,0(r4)
//	printf("FPGAmessage 11 is %llu \n", FPGAmessage[11]);

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000d20:	0001883a 	nop
10000d24:	00801404 	movi	r2,80
10000d28:	10800003 	ldbu	r2,0(r2)
10000d2c:	10803fcc 	andi	r2,r2,255
10000d30:	1080201c 	xori	r2,r2,128
10000d34:	10bfe004 	addi	r2,r2,-128
10000d38:	10800098 	cmpnei	r2,r2,2
10000d3c:	103ff91e 	bne	r2,zero,10000d24 <__alt_data_end+0xf8000d24>

	*to_hw_sig = 1;		// now we are done putting in messages
10000d40:	00801c04 	movi	r2,112
10000d44:	00c00044 	movi	r3,1
10000d48:	10c00005 	stb	r3,0(r2)

	while(*to_sw_sig != 0); // wait for response from hardware
10000d4c:	0001883a 	nop
10000d50:	00801404 	movi	r2,80
10000d54:	10800003 	ldbu	r2,0(r2)
10000d58:	10803fcc 	andi	r2,r2,255
10000d5c:	1080201c 	xori	r2,r2,128
10000d60:	10bfe004 	addi	r2,r2,-128
10000d64:	103ffa1e 	bne	r2,zero,10000d50 <__alt_data_end+0xf8000d50>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000d68:	00801c04 	movi	r2,112
10000d6c:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000d70:	0001883a 	nop
}
10000d74:	e6ffff04 	addi	sp,fp,-4
10000d78:	dfc00217 	ldw	ra,8(sp)
10000d7c:	df000117 	ldw	fp,4(sp)
10000d80:	dc000017 	ldw	r16,0(sp)
10000d84:	dec00304 	addi	sp,sp,12
10000d88:	f800283a 	ret

10000d8c <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000d8c:	deffe304 	addi	sp,sp,-116
10000d90:	dfc01815 	stw	ra,96(sp)
10000d94:	df001715 	stw	fp,92(sp)
10000d98:	dc401615 	stw	r17,88(sp)
10000d9c:	dc001515 	stw	r16,84(sp)
10000da0:	df001704 	addi	fp,sp,92
10000da4:	e1000215 	stw	r4,8(fp)
10000da8:	e1400315 	stw	r5,12(fp)
10000dac:	e1800415 	stw	r6,16(fp)
10000db0:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000db4:	e0800617 	ldw	r2,24(fp)
10000db8:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 1)
10000dbc:	e0bfeb17 	ldw	r2,-84(fp)
10000dc0:	10800058 	cmpnei	r2,r2,1
10000dc4:	1000601e 	bne	r2,zero,10000f48 <messagePackager+0x1bc>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000dc8:	e0800217 	ldw	r2,8(fp)
10000dcc:	e0bfec15 	stw	r2,-80(fp)
10000dd0:	1005d7fa 	srai	r2,r2,31
10000dd4:	e0bfed15 	stw	r2,-76(fp)
		tempTime = specifiedObject.yPosition;
10000dd8:	e0800317 	ldw	r2,12(fp)
10000ddc:	e0bfee15 	stw	r2,-72(fp)
10000de0:	1005d7fa 	srai	r2,r2,31
10000de4:	e0bfef15 	stw	r2,-68(fp)
		tempStart = specifiedObject.objectType;
10000de8:	e0800417 	ldw	r2,16(fp)
10000dec:	e0bff015 	stw	r2,-64(fp)
10000df0:	1005d7fa 	srai	r2,r2,31
10000df4:	e0bff115 	stw	r2,-60(fp)
		tempEnd = specifiedObject.objectState;
10000df8:	e0800517 	ldw	r2,20(fp)
10000dfc:	e0bff215 	stw	r2,-56(fp)
10000e00:	1005d7fa 	srai	r2,r2,31
10000e04:	e0bff315 	stw	r2,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000e08:	e0bfec17 	ldw	r2,-80(fp)
10000e0c:	1009883a 	mov	r4,r2
10000e10:	00013340 	call	10001334 <convertDecimalToBinary>
10000e14:	e0bfec15 	stw	r2,-80(fp)
10000e18:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000e1c:	e0bfee17 	ldw	r2,-72(fp)
10000e20:	1009883a 	mov	r4,r2
10000e24:	00013340 	call	10001334 <convertDecimalToBinary>
10000e28:	e0bfee15 	stw	r2,-72(fp)
10000e2c:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000e30:	e0bff017 	ldw	r2,-64(fp)
10000e34:	1009883a 	mov	r4,r2
10000e38:	00013340 	call	10001334 <convertDecimalToBinary>
10000e3c:	e0bff015 	stw	r2,-64(fp)
10000e40:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000e44:	e0bff217 	ldw	r2,-56(fp)
10000e48:	1009883a 	mov	r4,r2
10000e4c:	00013340 	call	10001334 <convertDecimalToBinary>
10000e50:	e0bff215 	stw	r2,-56(fp)
10000e54:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000e58:	00802674 	movhi	r2,153
10000e5c:	10a5a004 	addi	r2,r2,-27008
10000e60:	0007883a 	mov	r3,zero
10000e64:	e13fee17 	ldw	r4,-72(fp)
10000e68:	e17fef17 	ldw	r5,-68(fp)
10000e6c:	100d883a 	mov	r6,r2
10000e70:	180f883a 	mov	r7,r3
10000e74:	00031f00 	call	100031f0 <__muldi3>
10000e78:	1009883a 	mov	r4,r2
10000e7c:	180b883a 	mov	r5,r3
10000e80:	2021883a 	mov	r16,r4
10000e84:	2823883a 	mov	r17,r5
10000e88:	00841eb4 	movhi	r2,4218
10000e8c:	10900004 	addi	r2,r2,16384
10000e90:	00d6bcc4 	movi	r3,23283
10000e94:	e13ff017 	ldw	r4,-64(fp)
10000e98:	e17ff117 	ldw	r5,-60(fp)
10000e9c:	100d883a 	mov	r6,r2
10000ea0:	180f883a 	mov	r7,r3
10000ea4:	00031f00 	call	100031f0 <__muldi3>
10000ea8:	100d883a 	mov	r6,r2
10000eac:	180f883a 	mov	r7,r3
10000eb0:	3009883a 	mov	r4,r6
10000eb4:	380b883a 	mov	r5,r7
10000eb8:	8105883a 	add	r2,r16,r4
10000ebc:	140d803a 	cmpltu	r6,r2,r16
10000ec0:	8947883a 	add	r3,r17,r5
10000ec4:	30c9883a 	add	r4,r6,r3
10000ec8:	2007883a 	mov	r3,r4
10000ecc:	100d883a 	mov	r6,r2
10000ed0:	180f883a 	mov	r7,r3
10000ed4:	e13fec17 	ldw	r4,-80(fp)
10000ed8:	e17fed17 	ldw	r5,-76(fp)
10000edc:	3105883a 	add	r2,r6,r4
10000ee0:	1191803a 	cmpltu	r8,r2,r6
10000ee4:	3947883a 	add	r3,r7,r5
10000ee8:	40c9883a 	add	r4,r8,r3
10000eec:	2007883a 	mov	r3,r4
10000ef0:	1021883a 	mov	r16,r2
10000ef4:	1823883a 	mov	r17,r3
10000ef8:	009762b4 	movhi	r2,23946
10000efc:	00c058f4 	movhi	r3,355
10000f00:	18d15e04 	addi	r3,r3,17784
10000f04:	e13ff217 	ldw	r4,-56(fp)
10000f08:	e17ff317 	ldw	r5,-52(fp)
10000f0c:	100d883a 	mov	r6,r2
10000f10:	180f883a 	mov	r7,r3
10000f14:	00031f00 	call	100031f0 <__muldi3>
10000f18:	100d883a 	mov	r6,r2
10000f1c:	180f883a 	mov	r7,r3
10000f20:	3009883a 	mov	r4,r6
10000f24:	380b883a 	mov	r5,r7
10000f28:	8105883a 	add	r2,r16,r4
10000f2c:	140d803a 	cmpltu	r6,r2,r16
10000f30:	8947883a 	add	r3,r17,r5
10000f34:	30c9883a 	add	r4,r6,r3
10000f38:	2007883a 	mov	r3,r4
10000f3c:	e0bfe915 	stw	r2,-92(fp)
10000f40:	e0ffea15 	stw	r3,-88(fp)
10000f44:	00008b06 	br	10001174 <messagePackager+0x3e8>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000f48:	e0800217 	ldw	r2,8(fp)
10000f4c:	e0bff415 	stw	r2,-48(fp)
10000f50:	1005d7fa 	srai	r2,r2,31
10000f54:	e0bff515 	stw	r2,-44(fp)
		tempY = specifiedObject.yPosition;
10000f58:	e0800317 	ldw	r2,12(fp)
10000f5c:	e0bff615 	stw	r2,-40(fp)
10000f60:	1005d7fa 	srai	r2,r2,31
10000f64:	e0bff715 	stw	r2,-36(fp)
		tempType = specifiedObject.objectType;
10000f68:	e0800417 	ldw	r2,16(fp)
10000f6c:	e0bff815 	stw	r2,-32(fp)
10000f70:	1005d7fa 	srai	r2,r2,31
10000f74:	e0bff915 	stw	r2,-28(fp)
		tempState = specifiedObject.objectState;
10000f78:	e0800517 	ldw	r2,20(fp)
10000f7c:	e0bffa15 	stw	r2,-24(fp)
10000f80:	1005d7fa 	srai	r2,r2,31
10000f84:	e0bffb15 	stw	r2,-20(fp)

		// take X and Y and divide them by 5 to fit in our message
		tempX = tempX/5 - 1;
10000f88:	e0bff417 	ldw	r2,-48(fp)
10000f8c:	e0fff517 	ldw	r3,-44(fp)
10000f90:	01c00144 	movi	r7,5
10000f94:	0011883a 	mov	r8,zero
10000f98:	1009883a 	mov	r4,r2
10000f9c:	180b883a 	mov	r5,r3
10000fa0:	380d883a 	mov	r6,r7
10000fa4:	400f883a 	mov	r7,r8
10000fa8:	00033700 	call	10003370 <__udivdi3>
10000fac:	1009883a 	mov	r4,r2
10000fb0:	180b883a 	mov	r5,r3
10000fb4:	200d883a 	mov	r6,r4
10000fb8:	280f883a 	mov	r7,r5
10000fbc:	013fffc4 	movi	r4,-1
10000fc0:	017fffc4 	movi	r5,-1
10000fc4:	3105883a 	add	r2,r6,r4
10000fc8:	1191803a 	cmpltu	r8,r2,r6
10000fcc:	3947883a 	add	r3,r7,r5
10000fd0:	40c9883a 	add	r4,r8,r3
10000fd4:	2007883a 	mov	r3,r4
10000fd8:	e0bff415 	stw	r2,-48(fp)
10000fdc:	e0fff515 	stw	r3,-44(fp)
		tempY = tempY/5 - 1;
10000fe0:	e0bff617 	ldw	r2,-40(fp)
10000fe4:	e0fff717 	ldw	r3,-36(fp)
10000fe8:	01c00144 	movi	r7,5
10000fec:	0011883a 	mov	r8,zero
10000ff0:	1009883a 	mov	r4,r2
10000ff4:	180b883a 	mov	r5,r3
10000ff8:	380d883a 	mov	r6,r7
10000ffc:	400f883a 	mov	r7,r8
10001000:	00033700 	call	10003370 <__udivdi3>
10001004:	1009883a 	mov	r4,r2
10001008:	180b883a 	mov	r5,r3
1000100c:	200d883a 	mov	r6,r4
10001010:	280f883a 	mov	r7,r5
10001014:	013fffc4 	movi	r4,-1
10001018:	017fffc4 	movi	r5,-1
1000101c:	3105883a 	add	r2,r6,r4
10001020:	1191803a 	cmpltu	r8,r2,r6
10001024:	3947883a 	add	r3,r7,r5
10001028:	40c9883a 	add	r4,r8,r3
1000102c:	2007883a 	mov	r3,r4
10001030:	e0bff615 	stw	r2,-40(fp)
10001034:	e0fff715 	stw	r3,-36(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
10001038:	e0bff417 	ldw	r2,-48(fp)
1000103c:	1009883a 	mov	r4,r2
10001040:	00013340 	call	10001334 <convertDecimalToBinary>
10001044:	e0bff415 	stw	r2,-48(fp)
10001048:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
1000104c:	e0bff617 	ldw	r2,-40(fp)
10001050:	1009883a 	mov	r4,r2
10001054:	00013340 	call	10001334 <convertDecimalToBinary>
10001058:	e0bff615 	stw	r2,-40(fp)
1000105c:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
10001060:	e0bff817 	ldw	r2,-32(fp)
10001064:	1009883a 	mov	r4,r2
10001068:	00013340 	call	10001334 <convertDecimalToBinary>
1000106c:	e0bff815 	stw	r2,-32(fp)
10001070:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
10001074:	e0bffa17 	ldw	r2,-24(fp)
10001078:	1009883a 	mov	r4,r2
1000107c:	00013340 	call	10001334 <convertDecimalToBinary>
10001080:	e0bffa15 	stw	r2,-24(fp)
10001084:	e03ffb15 	stw	zero,-20(fp)
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/

		// now we append everything together!
		tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
10001088:	00802674 	movhi	r2,153
1000108c:	10a5a004 	addi	r2,r2,-27008
10001090:	0007883a 	mov	r3,zero
10001094:	e13ff617 	ldw	r4,-40(fp)
10001098:	e17ff717 	ldw	r5,-36(fp)
1000109c:	100d883a 	mov	r6,r2
100010a0:	180f883a 	mov	r7,r3
100010a4:	00031f00 	call	100031f0 <__muldi3>
100010a8:	1009883a 	mov	r4,r2
100010ac:	180b883a 	mov	r5,r3
100010b0:	2021883a 	mov	r16,r4
100010b4:	2823883a 	mov	r17,r5
100010b8:	00841eb4 	movhi	r2,4218
100010bc:	10900004 	addi	r2,r2,16384
100010c0:	00d6bcc4 	movi	r3,23283
100010c4:	e13ff817 	ldw	r4,-32(fp)
100010c8:	e17ff917 	ldw	r5,-28(fp)
100010cc:	100d883a 	mov	r6,r2
100010d0:	180f883a 	mov	r7,r3
100010d4:	00031f00 	call	100031f0 <__muldi3>
100010d8:	100d883a 	mov	r6,r2
100010dc:	180f883a 	mov	r7,r3
100010e0:	3009883a 	mov	r4,r6
100010e4:	380b883a 	mov	r5,r7
100010e8:	8105883a 	add	r2,r16,r4
100010ec:	140d803a 	cmpltu	r6,r2,r16
100010f0:	8947883a 	add	r3,r17,r5
100010f4:	30c9883a 	add	r4,r6,r3
100010f8:	2007883a 	mov	r3,r4
100010fc:	100d883a 	mov	r6,r2
10001100:	180f883a 	mov	r7,r3
10001104:	e13ff417 	ldw	r4,-48(fp)
10001108:	e17ff517 	ldw	r5,-44(fp)
1000110c:	3105883a 	add	r2,r6,r4
10001110:	1191803a 	cmpltu	r8,r2,r6
10001114:	3947883a 	add	r3,r7,r5
10001118:	40c9883a 	add	r4,r8,r3
1000111c:	2007883a 	mov	r3,r4
10001120:	1021883a 	mov	r16,r2
10001124:	1823883a 	mov	r17,r3
10001128:	009762b4 	movhi	r2,23946
1000112c:	00c058f4 	movhi	r3,355
10001130:	18d15e04 	addi	r3,r3,17784
10001134:	e13ffa17 	ldw	r4,-24(fp)
10001138:	e17ffb17 	ldw	r5,-20(fp)
1000113c:	100d883a 	mov	r6,r2
10001140:	180f883a 	mov	r7,r3
10001144:	00031f00 	call	100031f0 <__muldi3>
10001148:	100d883a 	mov	r6,r2
1000114c:	180f883a 	mov	r7,r3
10001150:	3009883a 	mov	r4,r6
10001154:	380b883a 	mov	r5,r7
10001158:	8105883a 	add	r2,r16,r4
1000115c:	140d803a 	cmpltu	r6,r2,r16
10001160:	8947883a 	add	r3,r17,r5
10001164:	30c9883a 	add	r4,r6,r3
10001168:	2007883a 	mov	r3,r4
1000116c:	e0bfe915 	stw	r2,-92(fp)
10001170:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001174:	e13fe917 	ldw	r4,-92(fp)
10001178:	e17fea17 	ldw	r5,-88(fp)
1000117c:	00013f00 	call	100013f0 <convertBinaryToDecimal>
10001180:	e0bffc15 	stw	r2,-16(fp)
10001184:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
10001188:	e0bffc17 	ldw	r2,-16(fp)
}
1000118c:	e6fffe04 	addi	sp,fp,-8
10001190:	dfc00317 	ldw	ra,12(sp)
10001194:	df000217 	ldw	fp,8(sp)
10001198:	dc400117 	ldw	r17,4(sp)
1000119c:	dc000017 	ldw	r16,0(sp)
100011a0:	dec00804 	addi	sp,sp,32
100011a4:	f800283a 	ret

100011a8 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
100011a8:	defff704 	addi	sp,sp,-36
100011ac:	dfc00815 	stw	ra,32(sp)
100011b0:	df000715 	stw	fp,28(sp)
100011b4:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
100011b8:	00804404 	movi	r2,272
100011bc:	10800003 	ldbu	r2,0(r2)
100011c0:	10803fcc 	andi	r2,r2,255
100011c4:	1080201c 	xori	r2,r2,128
100011c8:	10bfe004 	addi	r2,r2,-128
100011cc:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
100011d0:	e13ff917 	ldw	r4,-28(fp)
100011d4:	00013340 	call	10001334 <convertDecimalToBinary>
100011d8:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100011dc:	e03ffa15 	stw	zero,-24(fp)
100011e0:	00001406 	br	10001234 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
100011e4:	e0bff917 	ldw	r2,-28(fp)
100011e8:	1009883a 	mov	r4,r2
100011ec:	01400284 	movi	r5,10
100011f0:	00040f00 	call	100040f0 <__umodsi3>
100011f4:	1007883a 	mov	r3,r2
100011f8:	e0bffa17 	ldw	r2,-24(fp)
100011fc:	1085883a 	add	r2,r2,r2
10001200:	1085883a 	add	r2,r2,r2
10001204:	e13ff904 	addi	r4,fp,-28
10001208:	2085883a 	add	r2,r4,r2
1000120c:	10800204 	addi	r2,r2,8
10001210:	10c00015 	stw	r3,0(r2)

		port2 /= 10;
10001214:	e0bff917 	ldw	r2,-28(fp)
10001218:	1009883a 	mov	r4,r2
1000121c:	01400284 	movi	r5,10
10001220:	00040e80 	call	100040e8 <__udivsi3>
10001224:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001228:	e0bffa17 	ldw	r2,-24(fp)
1000122c:	10800044 	addi	r2,r2,1
10001230:	e0bffa15 	stw	r2,-24(fp)
10001234:	e0bffa17 	ldw	r2,-24(fp)
10001238:	10800150 	cmplti	r2,r2,5
1000123c:	103fe91e 	bne	r2,zero,100011e4 <__alt_data_end+0xf80011e4>

		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001240:	e0bffd17 	ldw	r2,-12(fp)
10001244:	d0a6d115 	stw	r2,-25788(gp)
	key2 = unpackaged[3];
10001248:	e0bffe17 	ldw	r2,-8(fp)
1000124c:	d0a6d315 	stw	r2,-25780(gp)
	key3 = unpackaged[4];
10001250:	e0bfff17 	ldw	r2,-4(fp)
10001254:	d0a6d215 	stw	r2,-25784(gp)
	cursorStreak = unpackaged[0];
10001258:	e0bffb17 	ldw	r2,-20(fp)
1000125c:	d0a6d015 	stw	r2,-25792(gp)
	cursorClicked = unpackaged[1];
10001260:	e0bffc17 	ldw	r2,-16(fp)
10001264:	d0a6cf15 	stw	r2,-25796(gp)

	for(i=4; i>=0; i--)
10001268:	00800104 	movi	r2,4
1000126c:	e0bffa15 	stw	r2,-24(fp)
10001270:	00000e06 	br	100012ac <port2Unpackager+0x104>
	{
		printf("%d", unpackaged[i]);
10001274:	e0bffa17 	ldw	r2,-24(fp)
10001278:	1085883a 	add	r2,r2,r2
1000127c:	1085883a 	add	r2,r2,r2
10001280:	e0fff904 	addi	r3,fp,-28
10001284:	1885883a 	add	r2,r3,r2
10001288:	10800204 	addi	r2,r2,8
1000128c:	10800017 	ldw	r2,0(r2)
10001290:	01040074 	movhi	r4,4097
10001294:	21094004 	addi	r4,r4,9472
10001298:	100b883a 	mov	r5,r2
1000129c:	00069580 	call	10006958 <printf>
	key2 = unpackaged[3];
	key3 = unpackaged[4];
	cursorStreak = unpackaged[0];
	cursorClicked = unpackaged[1];

	for(i=4; i>=0; i--)
100012a0:	e0bffa17 	ldw	r2,-24(fp)
100012a4:	10bfffc4 	addi	r2,r2,-1
100012a8:	e0bffa15 	stw	r2,-24(fp)
100012ac:	e0bffa17 	ldw	r2,-24(fp)
100012b0:	103ff00e 	bge	r2,zero,10001274 <__alt_data_end+0xf8001274>
	{
		printf("%d", unpackaged[i]);
	}
	printf("\n");
100012b4:	01000284 	movi	r4,10
100012b8:	000699c0 	call	1000699c <putchar>
	if(key1)
100012bc:	d0a6d117 	ldw	r2,-25788(gp)
100012c0:	10000326 	beq	r2,zero,100012d0 <port2Unpackager+0x128>
	{
		printf("key1 pressed!");
100012c4:	01040074 	movhi	r4,4097
100012c8:	21094104 	addi	r4,r4,9476
100012cc:	00069580 	call	10006958 <printf>
	}
	if(key2)
100012d0:	d0a6d317 	ldw	r2,-25780(gp)
100012d4:	10000326 	beq	r2,zero,100012e4 <port2Unpackager+0x13c>
	{
		printf("key2 pressed!");
100012d8:	01040074 	movhi	r4,4097
100012dc:	21094504 	addi	r4,r4,9492
100012e0:	00069580 	call	10006958 <printf>
	}
	if(key3)
100012e4:	d0a6d217 	ldw	r2,-25784(gp)
100012e8:	10000326 	beq	r2,zero,100012f8 <port2Unpackager+0x150>
	{
		printf("key3 pressed!");
100012ec:	01040074 	movhi	r4,4097
100012f0:	21094904 	addi	r4,r4,9508
100012f4:	00069580 	call	10006958 <printf>
	}
	if(cursorStreak)
100012f8:	d0a6d017 	ldw	r2,-25792(gp)
100012fc:	10000326 	beq	r2,zero,1000130c <port2Unpackager+0x164>
	{
		printf("cursorstreak!");
10001300:	01040074 	movhi	r4,4097
10001304:	21094d04 	addi	r4,r4,9524
10001308:	00069580 	call	10006958 <printf>
	}
	if(cursorClicked)
1000130c:	d0a6cf17 	ldw	r2,-25796(gp)
10001310:	10000326 	beq	r2,zero,10001320 <port2Unpackager+0x178>
	{
		printf("clicked!");
10001314:	01040074 	movhi	r4,4097
10001318:	21095104 	addi	r4,r4,9540
1000131c:	00069580 	call	10006958 <printf>
	}

}
10001320:	e037883a 	mov	sp,fp
10001324:	dfc00117 	ldw	ra,4(sp)
10001328:	df000017 	ldw	fp,0(sp)
1000132c:	dec00204 	addi	sp,sp,8
10001330:	f800283a 	ret

10001334 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001334:	defff704 	addi	sp,sp,-36
10001338:	dfc00815 	stw	ra,32(sp)
1000133c:	df000715 	stw	fp,28(sp)
10001340:	dc400615 	stw	r17,24(sp)
10001344:	dc000515 	stw	r16,20(sp)
10001348:	df000704 	addi	fp,sp,28
1000134c:	e13ffd15 	stw	r4,-12(fp)
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
10001350:	e03ff915 	stw	zero,-28(fp)
10001354:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
10001358:	00800044 	movi	r2,1
1000135c:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
10001360:	00001906 	br	100013c8 <convertDecimalToBinary+0x94>
    {
        remainder = n%2;
10001364:	e0bffd17 	ldw	r2,-12(fp)
10001368:	1080004c 	andi	r2,r2,1
1000136c:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
10001370:	e0bffd17 	ldw	r2,-12(fp)
10001374:	1004d07a 	srli	r2,r2,1
10001378:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
1000137c:	e13ffc17 	ldw	r4,-16(fp)
10001380:	e17ffb17 	ldw	r5,-20(fp)
10001384:	00040f80 	call	100040f8 <__mulsi3>
10001388:	1021883a 	mov	r16,r2
1000138c:	1005d7fa 	srai	r2,r2,31
10001390:	1023883a 	mov	r17,r2
10001394:	e13ff917 	ldw	r4,-28(fp)
10001398:	e17ffa17 	ldw	r5,-24(fp)
1000139c:	2405883a 	add	r2,r4,r16
100013a0:	110d803a 	cmpltu	r6,r2,r4
100013a4:	2c47883a 	add	r3,r5,r17
100013a8:	30c9883a 	add	r4,r6,r3
100013ac:	2007883a 	mov	r3,r4
100013b0:	e0bff915 	stw	r2,-28(fp)
100013b4:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
100013b8:	e13ffb17 	ldw	r4,-20(fp)
100013bc:	01400284 	movi	r5,10
100013c0:	00040f80 	call	100040f8 <__mulsi3>
100013c4:	e0bffb15 	stw	r2,-20(fp)
{
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
100013c8:	e0bffd17 	ldw	r2,-12(fp)
100013cc:	103fe51e 	bne	r2,zero,10001364 <__alt_data_end+0xf8001364>
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
100013d0:	e0bff917 	ldw	r2,-28(fp)
}
100013d4:	e6fffe04 	addi	sp,fp,-8
100013d8:	dfc00317 	ldw	ra,12(sp)
100013dc:	df000217 	ldw	fp,8(sp)
100013e0:	dc400117 	ldw	r17,4(sp)
100013e4:	dc000017 	ldw	r16,0(sp)
100013e8:	dec00404 	addi	sp,sp,16
100013ec:	f800283a 	ret

100013f0 <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
100013f0:	defff704 	addi	sp,sp,-36
100013f4:	dfc00815 	stw	ra,32(sp)
100013f8:	df000715 	stw	fp,28(sp)
100013fc:	dc400615 	stw	r17,24(sp)
10001400:	dc000515 	stw	r16,20(sp)
10001404:	df000704 	addi	fp,sp,28
10001408:	e13ffc15 	stw	r4,-16(fp)
1000140c:	e17ffd15 	stw	r5,-12(fp)
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
10001410:	e03ff915 	stw	zero,-28(fp)
10001414:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
10001418:	00004706 	br	10001538 <convertBinaryToDecimal+0x148>
    {
        remainder = n%10;
1000141c:	e0bffc17 	ldw	r2,-16(fp)
10001420:	e0fffd17 	ldw	r3,-12(fp)
10001424:	01c00284 	movi	r7,10
10001428:	0011883a 	mov	r8,zero
1000142c:	1009883a 	mov	r4,r2
10001430:	180b883a 	mov	r5,r3
10001434:	380d883a 	mov	r6,r7
10001438:	400f883a 	mov	r7,r8
1000143c:	00039b00 	call	100039b0 <__umoddi3>
10001440:	1009883a 	mov	r4,r2
10001444:	180b883a 	mov	r5,r3
10001448:	2005883a 	mov	r2,r4
1000144c:	2807883a 	mov	r3,r5
10001450:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
10001454:	e0bffc17 	ldw	r2,-16(fp)
10001458:	e0fffd17 	ldw	r3,-12(fp)
1000145c:	01c00284 	movi	r7,10
10001460:	0011883a 	mov	r8,zero
10001464:	1009883a 	mov	r4,r2
10001468:	180b883a 	mov	r5,r3
1000146c:	380d883a 	mov	r6,r7
10001470:	400f883a 	mov	r7,r8
10001474:	00033700 	call	10003370 <__udivdi3>
10001478:	1009883a 	mov	r4,r2
1000147c:	180b883a 	mov	r5,r3
10001480:	e13ffc15 	stw	r4,-16(fp)
10001484:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
10001488:	e13ffb17 	ldw	r4,-20(fp)
1000148c:	00068140 	call	10006814 <__floatunsidf>
10001490:	1021883a 	mov	r16,r2
10001494:	1823883a 	mov	r17,r3
10001498:	e13ffa17 	ldw	r4,-24(fp)
1000149c:	00068140 	call	10006814 <__floatunsidf>
100014a0:	100f883a 	mov	r7,r2
100014a4:	1811883a 	mov	r8,r3
100014a8:	0009883a 	mov	r4,zero
100014ac:	01500034 	movhi	r5,16384
100014b0:	380d883a 	mov	r6,r7
100014b4:	400f883a 	mov	r7,r8
100014b8:	00015680 	call	10001568 <pow>
100014bc:	100f883a 	mov	r7,r2
100014c0:	1811883a 	mov	r8,r3
100014c4:	8009883a 	mov	r4,r16
100014c8:	880b883a 	mov	r5,r17
100014cc:	380d883a 	mov	r6,r7
100014d0:	400f883a 	mov	r7,r8
100014d4:	00055800 	call	10005580 <__muldf3>
100014d8:	1009883a 	mov	r4,r2
100014dc:	180b883a 	mov	r5,r3
100014e0:	2021883a 	mov	r16,r4
100014e4:	2823883a 	mov	r17,r5
100014e8:	e13ff917 	ldw	r4,-28(fp)
100014ec:	00068140 	call	10006814 <__floatunsidf>
100014f0:	100b883a 	mov	r5,r2
100014f4:	180d883a 	mov	r6,r3
100014f8:	2809883a 	mov	r4,r5
100014fc:	300b883a 	mov	r5,r6
10001500:	800d883a 	mov	r6,r16
10001504:	880f883a 	mov	r7,r17
10001508:	00041200 	call	10004120 <__adddf3>
1000150c:	1009883a 	mov	r4,r2
10001510:	180b883a 	mov	r5,r3
10001514:	2005883a 	mov	r2,r4
10001518:	2807883a 	mov	r3,r5
1000151c:	1009883a 	mov	r4,r2
10001520:	180b883a 	mov	r5,r3
10001524:	00032fc0 	call	100032fc <__fixunsdfsi>
10001528:	e0bff915 	stw	r2,-28(fp)
        ++i;
1000152c:	e0bffa17 	ldw	r2,-24(fp)
10001530:	10800044 	addi	r2,r2,1
10001534:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
    while (n!=0)
10001538:	e0bffc17 	ldw	r2,-16(fp)
1000153c:	e0fffd17 	ldw	r3,-12(fp)
10001540:	10c4b03a 	or	r2,r2,r3
10001544:	103fb51e 	bne	r2,zero,1000141c <__alt_data_end+0xf800141c>
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
  //  printf("decimal output: %lu\n", decimalNumber);
    return decimalNumber;
10001548:	e0bff917 	ldw	r2,-28(fp)
}
1000154c:	e6fffe04 	addi	sp,fp,-8
10001550:	dfc00317 	ldw	ra,12(sp)
10001554:	df000217 	ldw	fp,8(sp)
10001558:	dc400117 	ldw	r17,4(sp)
1000155c:	dc000017 	ldw	r16,0(sp)
10001560:	dec00404 	addi	sp,sp,16
10001564:	f800283a 	ret

10001568 <pow>:
10001568:	deffee04 	addi	sp,sp,-72
1000156c:	dc800b15 	stw	r18,44(sp)
10001570:	04840074 	movhi	r18,4097
10001574:	ddc01015 	stw	r23,64(sp)
10001578:	dd800f15 	stw	r22,60(sp)
1000157c:	dd400e15 	stw	r21,56(sp)
10001580:	dd000d15 	stw	r20,52(sp)
10001584:	dcc00c15 	stw	r19,48(sp)
10001588:	dc400a15 	stw	r17,40(sp)
1000158c:	dc000915 	stw	r16,36(sp)
10001590:	dfc01115 	stw	ra,68(sp)
10001594:	9490cf04 	addi	r18,r18,17212
10001598:	202f883a 	mov	r23,r4
1000159c:	282d883a 	mov	r22,r5
100015a0:	302b883a 	mov	r21,r6
100015a4:	3829883a 	mov	r20,r7
100015a8:	0001a0c0 	call	10001a0c <__ieee754_pow>
100015ac:	1023883a 	mov	r17,r2
100015b0:	90800017 	ldw	r2,0(r18)
100015b4:	04ffffc4 	movi	r19,-1
100015b8:	1821883a 	mov	r16,r3
100015bc:	14c00426 	beq	r2,r19,100015d0 <pow+0x68>
100015c0:	a809883a 	mov	r4,r21
100015c4:	a00b883a 	mov	r5,r20
100015c8:	0002d9c0 	call	10002d9c <__fpclassifyd>
100015cc:	10000d1e 	bne	r2,zero,10001604 <pow+0x9c>
100015d0:	8805883a 	mov	r2,r17
100015d4:	8007883a 	mov	r3,r16
100015d8:	dfc01117 	ldw	ra,68(sp)
100015dc:	ddc01017 	ldw	r23,64(sp)
100015e0:	dd800f17 	ldw	r22,60(sp)
100015e4:	dd400e17 	ldw	r21,56(sp)
100015e8:	dd000d17 	ldw	r20,52(sp)
100015ec:	dcc00c17 	ldw	r19,48(sp)
100015f0:	dc800b17 	ldw	r18,44(sp)
100015f4:	dc400a17 	ldw	r17,40(sp)
100015f8:	dc000917 	ldw	r16,36(sp)
100015fc:	dec01204 	addi	sp,sp,72
10001600:	f800283a 	ret
10001604:	b809883a 	mov	r4,r23
10001608:	b00b883a 	mov	r5,r22
1000160c:	0002d9c0 	call	10002d9c <__fpclassifyd>
10001610:	1000221e 	bne	r2,zero,1000169c <pow+0x134>
10001614:	a809883a 	mov	r4,r21
10001618:	a00b883a 	mov	r5,r20
1000161c:	000d883a 	mov	r6,zero
10001620:	000f883a 	mov	r7,zero
10001624:	000533c0 	call	1000533c <__eqdf2>
10001628:	103fe91e 	bne	r2,zero,100015d0 <__alt_data_end+0xf80015d0>
1000162c:	00c00044 	movi	r3,1
10001630:	d8c00015 	stw	r3,0(sp)
10001634:	00c40074 	movhi	r3,4097
10001638:	18c95404 	addi	r3,r3,9552
1000163c:	90800017 	ldw	r2,0(r18)
10001640:	d8c00115 	stw	r3,4(sp)
10001644:	00cffc34 	movhi	r3,16368
10001648:	d8000815 	stw	zero,32(sp)
1000164c:	ddc00215 	stw	r23,8(sp)
10001650:	dd800315 	stw	r22,12(sp)
10001654:	dd400415 	stw	r21,16(sp)
10001658:	dd000515 	stw	r20,20(sp)
1000165c:	d8000615 	stw	zero,24(sp)
10001660:	d8c00715 	stw	r3,28(sp)
10001664:	14c00a26 	beq	r2,r19,10001690 <pow+0x128>
10001668:	00c00084 	movi	r3,2
1000166c:	10c00826 	beq	r2,r3,10001690 <pow+0x128>
10001670:	d809883a 	mov	r4,sp
10001674:	0002e100 	call	10002e10 <matherr>
10001678:	10006b26 	beq	r2,zero,10001828 <pow+0x2c0>
1000167c:	d8800817 	ldw	r2,32(sp)
10001680:	10000326 	beq	r2,zero,10001690 <pow+0x128>
10001684:	000691c0 	call	1000691c <__errno>
10001688:	d8c00817 	ldw	r3,32(sp)
1000168c:	10c00015 	stw	r3,0(r2)
10001690:	d8800617 	ldw	r2,24(sp)
10001694:	d8c00717 	ldw	r3,28(sp)
10001698:	003fcf06 	br	100015d8 <__alt_data_end+0xf80015d8>
1000169c:	b809883a 	mov	r4,r23
100016a0:	b00b883a 	mov	r5,r22
100016a4:	000d883a 	mov	r6,zero
100016a8:	000f883a 	mov	r7,zero
100016ac:	000533c0 	call	1000533c <__eqdf2>
100016b0:	1000171e 	bne	r2,zero,10001710 <pow+0x1a8>
100016b4:	a809883a 	mov	r4,r21
100016b8:	a00b883a 	mov	r5,r20
100016bc:	000d883a 	mov	r6,zero
100016c0:	000f883a 	mov	r7,zero
100016c4:	000533c0 	call	1000533c <__eqdf2>
100016c8:	1000381e 	bne	r2,zero,100017ac <pow+0x244>
100016cc:	00c00044 	movi	r3,1
100016d0:	d8c00015 	stw	r3,0(sp)
100016d4:	90800017 	ldw	r2,0(r18)
100016d8:	00c40074 	movhi	r3,4097
100016dc:	18c95404 	addi	r3,r3,9552
100016e0:	d8c00115 	stw	r3,4(sp)
100016e4:	d8000815 	stw	zero,32(sp)
100016e8:	ddc00215 	stw	r23,8(sp)
100016ec:	dd800315 	stw	r22,12(sp)
100016f0:	dd400415 	stw	r21,16(sp)
100016f4:	dd000515 	stw	r20,20(sp)
100016f8:	d8000615 	stw	zero,24(sp)
100016fc:	d8000715 	stw	zero,28(sp)
10001700:	103fdb26 	beq	r2,zero,10001670 <__alt_data_end+0xf8001670>
10001704:	008ffc34 	movhi	r2,16368
10001708:	d8800715 	stw	r2,28(sp)
1000170c:	003fe006 	br	10001690 <__alt_data_end+0xf8001690>
10001710:	8809883a 	mov	r4,r17
10001714:	800b883a 	mov	r5,r16
10001718:	0002d800 	call	10002d80 <finite>
1000171c:	10004626 	beq	r2,zero,10001838 <pow+0x2d0>
10001720:	8809883a 	mov	r4,r17
10001724:	800b883a 	mov	r5,r16
10001728:	000d883a 	mov	r6,zero
1000172c:	000f883a 	mov	r7,zero
10001730:	000533c0 	call	1000533c <__eqdf2>
10001734:	103fa61e 	bne	r2,zero,100015d0 <__alt_data_end+0xf80015d0>
10001738:	b809883a 	mov	r4,r23
1000173c:	b00b883a 	mov	r5,r22
10001740:	0002d800 	call	10002d80 <finite>
10001744:	103fa226 	beq	r2,zero,100015d0 <__alt_data_end+0xf80015d0>
10001748:	a809883a 	mov	r4,r21
1000174c:	a00b883a 	mov	r5,r20
10001750:	0002d800 	call	10002d80 <finite>
10001754:	103f9e26 	beq	r2,zero,100015d0 <__alt_data_end+0xf80015d0>
10001758:	00800104 	movi	r2,4
1000175c:	d8800015 	stw	r2,0(sp)
10001760:	90c00017 	ldw	r3,0(r18)
10001764:	00840074 	movhi	r2,4097
10001768:	10895404 	addi	r2,r2,9552
1000176c:	d8800115 	stw	r2,4(sp)
10001770:	d8000815 	stw	zero,32(sp)
10001774:	ddc00215 	stw	r23,8(sp)
10001778:	dd800315 	stw	r22,12(sp)
1000177c:	dd400415 	stw	r21,16(sp)
10001780:	dd000515 	stw	r20,20(sp)
10001784:	d8000615 	stw	zero,24(sp)
10001788:	d8000715 	stw	zero,28(sp)
1000178c:	00800084 	movi	r2,2
10001790:	18806126 	beq	r3,r2,10001918 <pow+0x3b0>
10001794:	d809883a 	mov	r4,sp
10001798:	0002e100 	call	10002e10 <matherr>
1000179c:	10005e26 	beq	r2,zero,10001918 <pow+0x3b0>
100017a0:	d8800817 	ldw	r2,32(sp)
100017a4:	103fba26 	beq	r2,zero,10001690 <__alt_data_end+0xf8001690>
100017a8:	003fb606 	br	10001684 <__alt_data_end+0xf8001684>
100017ac:	a809883a 	mov	r4,r21
100017b0:	a00b883a 	mov	r5,r20
100017b4:	0002d800 	call	10002d80 <finite>
100017b8:	103f8526 	beq	r2,zero,100015d0 <__alt_data_end+0xf80015d0>
100017bc:	a809883a 	mov	r4,r21
100017c0:	a00b883a 	mov	r5,r20
100017c4:	000d883a 	mov	r6,zero
100017c8:	000f883a 	mov	r7,zero
100017cc:	00054a00 	call	100054a0 <__ledf2>
100017d0:	103f7f0e 	bge	r2,zero,100015d0 <__alt_data_end+0xf80015d0>
100017d4:	00c00044 	movi	r3,1
100017d8:	d8c00015 	stw	r3,0(sp)
100017dc:	90800017 	ldw	r2,0(r18)
100017e0:	00c40074 	movhi	r3,4097
100017e4:	18c95404 	addi	r3,r3,9552
100017e8:	d8c00115 	stw	r3,4(sp)
100017ec:	d8000815 	stw	zero,32(sp)
100017f0:	ddc00215 	stw	r23,8(sp)
100017f4:	dd800315 	stw	r22,12(sp)
100017f8:	dd400415 	stw	r21,16(sp)
100017fc:	dd000515 	stw	r20,20(sp)
10001800:	d8000615 	stw	zero,24(sp)
10001804:	10002526 	beq	r2,zero,1000189c <pow+0x334>
10001808:	00fffc34 	movhi	r3,65520
1000180c:	d8c00715 	stw	r3,28(sp)
10001810:	00c00084 	movi	r3,2
10001814:	10c0221e 	bne	r2,r3,100018a0 <pow+0x338>
10001818:	000691c0 	call	1000691c <__errno>
1000181c:	00c00844 	movi	r3,33
10001820:	10c00015 	stw	r3,0(r2)
10001824:	003fde06 	br	100017a0 <__alt_data_end+0xf80017a0>
10001828:	000691c0 	call	1000691c <__errno>
1000182c:	00c00844 	movi	r3,33
10001830:	10c00015 	stw	r3,0(r2)
10001834:	003f9106 	br	1000167c <__alt_data_end+0xf800167c>
10001838:	b809883a 	mov	r4,r23
1000183c:	b00b883a 	mov	r5,r22
10001840:	0002d800 	call	10002d80 <finite>
10001844:	103fb626 	beq	r2,zero,10001720 <__alt_data_end+0xf8001720>
10001848:	a809883a 	mov	r4,r21
1000184c:	a00b883a 	mov	r5,r20
10001850:	0002d800 	call	10002d80 <finite>
10001854:	103fb226 	beq	r2,zero,10001720 <__alt_data_end+0xf8001720>
10001858:	8809883a 	mov	r4,r17
1000185c:	800b883a 	mov	r5,r16
10001860:	0002d9c0 	call	10002d9c <__fpclassifyd>
10001864:	1000121e 	bne	r2,zero,100018b0 <pow+0x348>
10001868:	00800044 	movi	r2,1
1000186c:	d8800015 	stw	r2,0(sp)
10001870:	94000017 	ldw	r16,0(r18)
10001874:	00840074 	movhi	r2,4097
10001878:	10895404 	addi	r2,r2,9552
1000187c:	d8800115 	stw	r2,4(sp)
10001880:	d8000815 	stw	zero,32(sp)
10001884:	ddc00215 	stw	r23,8(sp)
10001888:	dd800315 	stw	r22,12(sp)
1000188c:	dd400415 	stw	r21,16(sp)
10001890:	dd000515 	stw	r20,20(sp)
10001894:	8000241e 	bne	r16,zero,10001928 <pow+0x3c0>
10001898:	d8000615 	stw	zero,24(sp)
1000189c:	d8000715 	stw	zero,28(sp)
100018a0:	d809883a 	mov	r4,sp
100018a4:	0002e100 	call	10002e10 <matherr>
100018a8:	103fbd1e 	bne	r2,zero,100017a0 <__alt_data_end+0xf80017a0>
100018ac:	003fda06 	br	10001818 <__alt_data_end+0xf8001818>
100018b0:	00c000c4 	movi	r3,3
100018b4:	d8c00015 	stw	r3,0(sp)
100018b8:	90800017 	ldw	r2,0(r18)
100018bc:	00c40074 	movhi	r3,4097
100018c0:	18c95404 	addi	r3,r3,9552
100018c4:	d8c00115 	stw	r3,4(sp)
100018c8:	d8000815 	stw	zero,32(sp)
100018cc:	ddc00215 	stw	r23,8(sp)
100018d0:	dd800315 	stw	r22,12(sp)
100018d4:	dd400415 	stw	r21,16(sp)
100018d8:	dd000515 	stw	r20,20(sp)
100018dc:	b809883a 	mov	r4,r23
100018e0:	b00b883a 	mov	r5,r22
100018e4:	000d883a 	mov	r6,zero
100018e8:	000f883a 	mov	r7,zero
100018ec:	1000181e 	bne	r2,zero,10001950 <pow+0x3e8>
100018f0:	00b80034 	movhi	r2,57344
100018f4:	d8800615 	stw	r2,24(sp)
100018f8:	0091fc34 	movhi	r2,18416
100018fc:	10bfffc4 	addi	r2,r2,-1
10001900:	d8800715 	stw	r2,28(sp)
10001904:	00054a00 	call	100054a0 <__ledf2>
10001908:	10002a16 	blt	r2,zero,100019b4 <pow+0x44c>
1000190c:	90c00017 	ldw	r3,0(r18)
10001910:	00800084 	movi	r2,2
10001914:	18bf9f1e 	bne	r3,r2,10001794 <__alt_data_end+0xf8001794>
10001918:	000691c0 	call	1000691c <__errno>
1000191c:	00c00884 	movi	r3,34
10001920:	10c00015 	stw	r3,0(r2)
10001924:	003f9e06 	br	100017a0 <__alt_data_end+0xf80017a0>
10001928:	0009883a 	mov	r4,zero
1000192c:	000b883a 	mov	r5,zero
10001930:	000d883a 	mov	r6,zero
10001934:	000f883a 	mov	r7,zero
10001938:	00049bc0 	call	100049bc <__divdf3>
1000193c:	d8800615 	stw	r2,24(sp)
10001940:	d8c00715 	stw	r3,28(sp)
10001944:	00800084 	movi	r2,2
10001948:	80bfb326 	beq	r16,r2,10001818 <__alt_data_end+0xf8001818>
1000194c:	003fd406 	br	100018a0 <__alt_data_end+0xf80018a0>
10001950:	009ffc34 	movhi	r2,32752
10001954:	d8000615 	stw	zero,24(sp)
10001958:	d8800715 	stw	r2,28(sp)
1000195c:	00054a00 	call	100054a0 <__ledf2>
10001960:	103fea0e 	bge	r2,zero,1000190c <__alt_data_end+0xf800190c>
10001964:	000d883a 	mov	r6,zero
10001968:	01cff834 	movhi	r7,16352
1000196c:	a809883a 	mov	r4,r21
10001970:	a00b883a 	mov	r5,r20
10001974:	00055800 	call	10005580 <__muldf3>
10001978:	1009883a 	mov	r4,r2
1000197c:	180b883a 	mov	r5,r3
10001980:	1023883a 	mov	r17,r2
10001984:	1821883a 	mov	r16,r3
10001988:	0002e240 	call	10002e24 <rint>
1000198c:	1009883a 	mov	r4,r2
10001990:	180b883a 	mov	r5,r3
10001994:	880d883a 	mov	r6,r17
10001998:	800f883a 	mov	r7,r16
1000199c:	000533c0 	call	1000533c <__eqdf2>
100019a0:	103fda26 	beq	r2,zero,1000190c <__alt_data_end+0xf800190c>
100019a4:	00bffc34 	movhi	r2,65520
100019a8:	d8000615 	stw	zero,24(sp)
100019ac:	d8800715 	stw	r2,28(sp)
100019b0:	003fd606 	br	1000190c <__alt_data_end+0xf800190c>
100019b4:	000d883a 	mov	r6,zero
100019b8:	01cff834 	movhi	r7,16352
100019bc:	a809883a 	mov	r4,r21
100019c0:	a00b883a 	mov	r5,r20
100019c4:	00055800 	call	10005580 <__muldf3>
100019c8:	1009883a 	mov	r4,r2
100019cc:	180b883a 	mov	r5,r3
100019d0:	1023883a 	mov	r17,r2
100019d4:	1821883a 	mov	r16,r3
100019d8:	0002e240 	call	10002e24 <rint>
100019dc:	1009883a 	mov	r4,r2
100019e0:	180b883a 	mov	r5,r3
100019e4:	880d883a 	mov	r6,r17
100019e8:	800f883a 	mov	r7,r16
100019ec:	000533c0 	call	1000533c <__eqdf2>
100019f0:	103fc626 	beq	r2,zero,1000190c <__alt_data_end+0xf800190c>
100019f4:	00b80034 	movhi	r2,57344
100019f8:	d8800615 	stw	r2,24(sp)
100019fc:	00b1fc34 	movhi	r2,51184
10001a00:	10bfffc4 	addi	r2,r2,-1
10001a04:	d8800715 	stw	r2,28(sp)
10001a08:	003fc006 	br	1000190c <__alt_data_end+0xf800190c>

10001a0c <__ieee754_pow>:
10001a0c:	00a00034 	movhi	r2,32768
10001a10:	deffec04 	addi	sp,sp,-80
10001a14:	10bfffc4 	addi	r2,r2,-1
10001a18:	dc400b15 	stw	r17,44(sp)
10001a1c:	38a2703a 	and	r17,r7,r2
10001a20:	dfc01315 	stw	ra,76(sp)
10001a24:	df001215 	stw	fp,72(sp)
10001a28:	ddc01115 	stw	r23,68(sp)
10001a2c:	dd801015 	stw	r22,64(sp)
10001a30:	dd400f15 	stw	r21,60(sp)
10001a34:	dd000e15 	stw	r20,56(sp)
10001a38:	dcc00d15 	stw	r19,52(sp)
10001a3c:	dc800c15 	stw	r18,48(sp)
10001a40:	dc000a15 	stw	r16,40(sp)
10001a44:	8986b03a 	or	r3,r17,r6
10001a48:	18002a26 	beq	r3,zero,10001af4 <__ieee754_pow+0xe8>
10001a4c:	28a4703a 	and	r18,r5,r2
10001a50:	009ffc34 	movhi	r2,32752
10001a54:	14802316 	blt	r2,r18,10001ae4 <__ieee754_pow+0xd8>
10001a58:	90802126 	beq	r18,r2,10001ae0 <__ieee754_pow+0xd4>
10001a5c:	14402116 	blt	r2,r17,10001ae4 <__ieee754_pow+0xd8>
10001a60:	009ffc34 	movhi	r2,32752
10001a64:	88807326 	beq	r17,r2,10001c34 <__ieee754_pow+0x228>
10001a68:	2827883a 	mov	r19,r5
10001a6c:	2021883a 	mov	r16,r4
10001a70:	302b883a 	mov	r21,r6
10001a74:	382f883a 	mov	r23,r7
10001a78:	28007016 	blt	r5,zero,10001c3c <__ieee754_pow+0x230>
10001a7c:	0039883a 	mov	fp,zero
10001a80:	a8003a1e 	bne	r21,zero,10001b6c <__ieee754_pow+0x160>
10001a84:	009ffc34 	movhi	r2,32752
10001a88:	88807e26 	beq	r17,r2,10001c84 <__ieee754_pow+0x278>
10001a8c:	008ffc34 	movhi	r2,16368
10001a90:	88805426 	beq	r17,r2,10001be4 <__ieee754_pow+0x1d8>
10001a94:	00900034 	movhi	r2,16384
10001a98:	b8834926 	beq	r23,r2,100027c0 <__ieee754_pow+0xdb4>
10001a9c:	008ff834 	movhi	r2,16352
10001aa0:	b880321e 	bne	r23,r2,10001b6c <__ieee754_pow+0x160>
10001aa4:	98003116 	blt	r19,zero,10001b6c <__ieee754_pow+0x160>
10001aa8:	8009883a 	mov	r4,r16
10001aac:	980b883a 	mov	r5,r19
10001ab0:	dfc01317 	ldw	ra,76(sp)
10001ab4:	df001217 	ldw	fp,72(sp)
10001ab8:	ddc01117 	ldw	r23,68(sp)
10001abc:	dd801017 	ldw	r22,64(sp)
10001ac0:	dd400f17 	ldw	r21,60(sp)
10001ac4:	dd000e17 	ldw	r20,56(sp)
10001ac8:	dcc00d17 	ldw	r19,52(sp)
10001acc:	dc800c17 	ldw	r18,48(sp)
10001ad0:	dc400b17 	ldw	r17,44(sp)
10001ad4:	dc000a17 	ldw	r16,40(sp)
10001ad8:	dec01404 	addi	sp,sp,80
10001adc:	0002ad81 	jmpi	10002ad8 <__ieee754_sqrt>
10001ae0:	20001226 	beq	r4,zero,10001b2c <__ieee754_pow+0x120>
10001ae4:	00b00434 	movhi	r2,49168
10001ae8:	9085883a 	add	r2,r18,r2
10001aec:	1108b03a 	or	r4,r2,r4
10001af0:	20000f1e 	bne	r4,zero,10001b30 <__ieee754_pow+0x124>
10001af4:	0005883a 	mov	r2,zero
10001af8:	00cffc34 	movhi	r3,16368
10001afc:	dfc01317 	ldw	ra,76(sp)
10001b00:	df001217 	ldw	fp,72(sp)
10001b04:	ddc01117 	ldw	r23,68(sp)
10001b08:	dd801017 	ldw	r22,64(sp)
10001b0c:	dd400f17 	ldw	r21,60(sp)
10001b10:	dd000e17 	ldw	r20,56(sp)
10001b14:	dcc00d17 	ldw	r19,52(sp)
10001b18:	dc800c17 	ldw	r18,48(sp)
10001b1c:	dc400b17 	ldw	r17,44(sp)
10001b20:	dc000a17 	ldw	r16,40(sp)
10001b24:	dec01404 	addi	sp,sp,80
10001b28:	f800283a 	ret
10001b2c:	947fcc0e 	bge	r18,r17,10001a60 <__alt_data_end+0xf8001a60>
10001b30:	01040074 	movhi	r4,4097
10001b34:	2109ae04 	addi	r4,r4,9912
10001b38:	dfc01317 	ldw	ra,76(sp)
10001b3c:	df001217 	ldw	fp,72(sp)
10001b40:	ddc01117 	ldw	r23,68(sp)
10001b44:	dd801017 	ldw	r22,64(sp)
10001b48:	dd400f17 	ldw	r21,60(sp)
10001b4c:	dd000e17 	ldw	r20,56(sp)
10001b50:	dcc00d17 	ldw	r19,52(sp)
10001b54:	dc800c17 	ldw	r18,48(sp)
10001b58:	dc400b17 	ldw	r17,44(sp)
10001b5c:	dc000a17 	ldw	r16,40(sp)
10001b60:	dec01404 	addi	sp,sp,80
10001b64:	0002e181 	jmpi	10002e18 <nan>
10001b68:	0039883a 	mov	fp,zero
10001b6c:	8009883a 	mov	r4,r16
10001b70:	980b883a 	mov	r5,r19
10001b74:	0002d6c0 	call	10002d6c <fabs>
10001b78:	102d883a 	mov	r22,r2
10001b7c:	80000f26 	beq	r16,zero,10001bbc <__ieee754_pow+0x1b0>
10001b80:	9816d7fa 	srli	r11,r19,31
10001b84:	5affffc4 	addi	r11,r11,-1
10001b88:	e2c4b03a 	or	r2,fp,r11
10001b8c:	10004a26 	beq	r2,zero,10001cb8 <__ieee754_pow+0x2ac>
10001b90:	00907834 	movhi	r2,16864
10001b94:	1440530e 	bge	r2,r17,10001ce4 <__ieee754_pow+0x2d8>
10001b98:	0090fc34 	movhi	r2,17392
10001b9c:	14433e0e 	bge	r2,r17,10002898 <__ieee754_pow+0xe8c>
10001ba0:	008ffc34 	movhi	r2,16368
10001ba4:	10bfffc4 	addi	r2,r2,-1
10001ba8:	14801916 	blt	r2,r18,10001c10 <__ieee754_pow+0x204>
10001bac:	b8001916 	blt	r23,zero,10001c14 <__ieee754_pow+0x208>
10001bb0:	0005883a 	mov	r2,zero
10001bb4:	0007883a 	mov	r3,zero
10001bb8:	003fd006 	br	10001afc <__alt_data_end+0xf8001afc>
10001bbc:	90000526 	beq	r18,zero,10001bd4 <__ieee754_pow+0x1c8>
10001bc0:	00900034 	movhi	r2,16384
10001bc4:	10bfffc4 	addi	r2,r2,-1
10001bc8:	9884703a 	and	r2,r19,r2
10001bcc:	010ffc34 	movhi	r4,16368
10001bd0:	113feb1e 	bne	r2,r4,10001b80 <__alt_data_end+0xf8001b80>
10001bd4:	b8000716 	blt	r23,zero,10001bf4 <__ieee754_pow+0x1e8>
10001bd8:	9802f216 	blt	r19,zero,100027a4 <__ieee754_pow+0xd98>
10001bdc:	b005883a 	mov	r2,r22
10001be0:	003fc606 	br	10001afc <__alt_data_end+0xf8001afc>
10001be4:	b8038816 	blt	r23,zero,10002a08 <__ieee754_pow+0xffc>
10001be8:	8005883a 	mov	r2,r16
10001bec:	9807883a 	mov	r3,r19
10001bf0:	003fc206 	br	10001afc <__alt_data_end+0xf8001afc>
10001bf4:	b00d883a 	mov	r6,r22
10001bf8:	0009883a 	mov	r4,zero
10001bfc:	014ffc34 	movhi	r5,16368
10001c00:	180f883a 	mov	r7,r3
10001c04:	00049bc0 	call	100049bc <__divdf3>
10001c08:	102d883a 	mov	r22,r2
10001c0c:	003ff206 	br	10001bd8 <__alt_data_end+0xf8001bd8>
10001c10:	05ffe70e 	bge	zero,r23,10001bb0 <__alt_data_end+0xf8001bb0>
10001c14:	01220034 	movhi	r4,34816
10001c18:	015f8e34 	movhi	r5,32312
10001c1c:	211d6704 	addi	r4,r4,30108
10001c20:	29790f04 	addi	r5,r5,-7108
10001c24:	200d883a 	mov	r6,r4
10001c28:	280f883a 	mov	r7,r5
10001c2c:	00055800 	call	10005580 <__muldf3>
10001c30:	003fb206 	br	10001afc <__alt_data_end+0xf8001afc>
10001c34:	303f8c26 	beq	r6,zero,10001a68 <__alt_data_end+0xf8001a68>
10001c38:	003faa06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001c3c:	0090d034 	movhi	r2,17216
10001c40:	10bfffc4 	addi	r2,r2,-1
10001c44:	14401a16 	blt	r2,r17,10001cb0 <__ieee754_pow+0x2a4>
10001c48:	008ffc34 	movhi	r2,16368
10001c4c:	10bfffc4 	addi	r2,r2,-1
10001c50:	147f8a0e 	bge	r2,r17,10001a7c <__alt_data_end+0xf8001a7c>
10001c54:	8809d53a 	srai	r4,r17,20
10001c58:	00c104c4 	movi	r3,1043
10001c5c:	1903840e 	bge	r3,r4,10002a70 <__ieee754_pow+0x1064>
10001c60:	00810cc4 	movi	r2,1075
10001c64:	1105c83a 	sub	r2,r2,r4
10001c68:	3086d83a 	srl	r3,r6,r2
10001c6c:	1884983a 	sll	r2,r3,r2
10001c70:	11bf821e 	bne	r2,r6,10001a7c <__alt_data_end+0xf8001a7c>
10001c74:	18c0004c 	andi	r3,r3,1
10001c78:	02800084 	movi	r10,2
10001c7c:	50f9c83a 	sub	fp,r10,r3
10001c80:	003f7f06 	br	10001a80 <__alt_data_end+0xf8001a80>
10001c84:	01300434 	movhi	r4,49168
10001c88:	9109883a 	add	r4,r18,r4
10001c8c:	2408b03a 	or	r4,r4,r16
10001c90:	203f9826 	beq	r4,zero,10001af4 <__alt_data_end+0xf8001af4>
10001c94:	008ffc34 	movhi	r2,16368
10001c98:	10bfffc4 	addi	r2,r2,-1
10001c9c:	1482f50e 	bge	r2,r18,10002874 <__ieee754_pow+0xe68>
10001ca0:	b83fc316 	blt	r23,zero,10001bb0 <__alt_data_end+0xf8001bb0>
10001ca4:	0005883a 	mov	r2,zero
10001ca8:	b807883a 	mov	r3,r23
10001cac:	003f9306 	br	10001afc <__alt_data_end+0xf8001afc>
10001cb0:	07000084 	movi	fp,2
10001cb4:	003f7206 	br	10001a80 <__alt_data_end+0xf8001a80>
10001cb8:	8009883a 	mov	r4,r16
10001cbc:	980b883a 	mov	r5,r19
10001cc0:	200d883a 	mov	r6,r4
10001cc4:	280f883a 	mov	r7,r5
10001cc8:	0005dec0 	call	10005dec <__subdf3>
10001ccc:	1009883a 	mov	r4,r2
10001cd0:	180b883a 	mov	r5,r3
10001cd4:	100d883a 	mov	r6,r2
10001cd8:	180f883a 	mov	r7,r3
10001cdc:	00049bc0 	call	100049bc <__divdf3>
10001ce0:	003f8606 	br	10001afc <__alt_data_end+0xf8001afc>
10001ce4:	00800434 	movhi	r2,16
10001ce8:	10bfffc4 	addi	r2,r2,-1
10001cec:	1482e816 	blt	r2,r18,10002890 <__ieee754_pow+0xe84>
10001cf0:	b009883a 	mov	r4,r22
10001cf4:	180b883a 	mov	r5,r3
10001cf8:	000d883a 	mov	r6,zero
10001cfc:	01d0d034 	movhi	r7,17216
10001d00:	dac00915 	stw	r11,36(sp)
10001d04:	00055800 	call	10005580 <__muldf3>
10001d08:	dac00917 	ldw	r11,36(sp)
10001d0c:	102d883a 	mov	r22,r2
10001d10:	1825883a 	mov	r18,r3
10001d14:	013ff2c4 	movi	r4,-53
10001d18:	9007d53a 	srai	r3,r18,20
10001d1c:	00800434 	movhi	r2,16
10001d20:	10bfffc4 	addi	r2,r2,-1
10001d24:	18ff0044 	addi	r3,r3,-1023
10001d28:	1911883a 	add	r8,r3,r4
10001d2c:	00c00134 	movhi	r3,4
10001d30:	9084703a 	and	r2,r18,r2
10001d34:	18e62384 	addi	r3,r3,-26482
10001d38:	14cffc34 	orhi	r19,r2,16368
10001d3c:	1882d10e 	bge	r3,r2,10002884 <__ieee754_pow+0xe78>
10001d40:	00c00334 	movhi	r3,12
10001d44:	18ed9e44 	addi	r3,r3,-18823
10001d48:	1883550e 	bge	r3,r2,10002aa0 <__ieee754_pow+0x1094>
10001d4c:	00bffc34 	movhi	r2,65520
10001d50:	42000044 	addi	r8,r8,1
10001d54:	98a7883a 	add	r19,r19,r2
10001d58:	0021883a 	mov	r16,zero
10001d5c:	0019883a 	mov	r12,zero
10001d60:	601890fa 	slli	r12,r12,3
10001d64:	00840074 	movhi	r2,4097
10001d68:	10895d04 	addi	r2,r2,9588
10001d6c:	1305883a 	add	r2,r2,r12
10001d70:	13400017 	ldw	r13,0(r2)
10001d74:	12800117 	ldw	r10,4(r2)
10001d78:	b009883a 	mov	r4,r22
10001d7c:	980b883a 	mov	r5,r19
10001d80:	680d883a 	mov	r6,r13
10001d84:	500f883a 	mov	r7,r10
10001d88:	da000815 	stw	r8,32(sp)
10001d8c:	dac00915 	stw	r11,36(sp)
10001d90:	db000715 	stw	r12,28(sp)
10001d94:	da800315 	stw	r10,12(sp)
10001d98:	db400415 	stw	r13,16(sp)
10001d9c:	0005dec0 	call	10005dec <__subdf3>
10001da0:	da800317 	ldw	r10,12(sp)
10001da4:	db400417 	ldw	r13,16(sp)
10001da8:	b009883a 	mov	r4,r22
10001dac:	500f883a 	mov	r7,r10
10001db0:	680d883a 	mov	r6,r13
10001db4:	980b883a 	mov	r5,r19
10001db8:	1829883a 	mov	r20,r3
10001dbc:	d8800015 	stw	r2,0(sp)
10001dc0:	00041200 	call	10004120 <__adddf3>
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	014ffc34 	movhi	r5,16368
10001dcc:	100d883a 	mov	r6,r2
10001dd0:	180f883a 	mov	r7,r3
10001dd4:	00049bc0 	call	100049bc <__divdf3>
10001dd8:	d9000017 	ldw	r4,0(sp)
10001ddc:	a00b883a 	mov	r5,r20
10001de0:	100d883a 	mov	r6,r2
10001de4:	180f883a 	mov	r7,r3
10001de8:	d8c00615 	stw	r3,24(sp)
10001dec:	d8800515 	stw	r2,20(sp)
10001df0:	00055800 	call	10005580 <__muldf3>
10001df4:	1025883a 	mov	r18,r2
10001df8:	9805d07a 	srai	r2,r19,1
10001dfc:	1823883a 	mov	r17,r3
10001e00:	880b883a 	mov	r5,r17
10001e04:	10c80034 	orhi	r3,r2,8192
10001e08:	00800234 	movhi	r2,8
10001e0c:	1885883a 	add	r2,r3,r2
10001e10:	1421883a 	add	r16,r2,r16
10001e14:	800f883a 	mov	r7,r16
10001e18:	0009883a 	mov	r4,zero
10001e1c:	000d883a 	mov	r6,zero
10001e20:	00055800 	call	10005580 <__muldf3>
10001e24:	d9000017 	ldw	r4,0(sp)
10001e28:	a00b883a 	mov	r5,r20
10001e2c:	100d883a 	mov	r6,r2
10001e30:	180f883a 	mov	r7,r3
10001e34:	0005dec0 	call	10005dec <__subdf3>
10001e38:	da800317 	ldw	r10,12(sp)
10001e3c:	db400417 	ldw	r13,16(sp)
10001e40:	800b883a 	mov	r5,r16
10001e44:	500f883a 	mov	r7,r10
10001e48:	680d883a 	mov	r6,r13
10001e4c:	0009883a 	mov	r4,zero
10001e50:	1829883a 	mov	r20,r3
10001e54:	d8800315 	stw	r2,12(sp)
10001e58:	0005dec0 	call	10005dec <__subdf3>
10001e5c:	b009883a 	mov	r4,r22
10001e60:	980b883a 	mov	r5,r19
10001e64:	100d883a 	mov	r6,r2
10001e68:	180f883a 	mov	r7,r3
10001e6c:	0005dec0 	call	10005dec <__subdf3>
10001e70:	880b883a 	mov	r5,r17
10001e74:	0009883a 	mov	r4,zero
10001e78:	100d883a 	mov	r6,r2
10001e7c:	180f883a 	mov	r7,r3
10001e80:	00055800 	call	10005580 <__muldf3>
10001e84:	da400317 	ldw	r9,12(sp)
10001e88:	a00b883a 	mov	r5,r20
10001e8c:	100d883a 	mov	r6,r2
10001e90:	4809883a 	mov	r4,r9
10001e94:	180f883a 	mov	r7,r3
10001e98:	0005dec0 	call	10005dec <__subdf3>
10001e9c:	dbc00517 	ldw	r15,20(sp)
10001ea0:	db800617 	ldw	r14,24(sp)
10001ea4:	1009883a 	mov	r4,r2
10001ea8:	780d883a 	mov	r6,r15
10001eac:	700f883a 	mov	r7,r14
10001eb0:	180b883a 	mov	r5,r3
10001eb4:	00055800 	call	10005580 <__muldf3>
10001eb8:	9009883a 	mov	r4,r18
10001ebc:	880b883a 	mov	r5,r17
10001ec0:	900d883a 	mov	r6,r18
10001ec4:	880f883a 	mov	r7,r17
10001ec8:	182d883a 	mov	r22,r3
10001ecc:	d8800015 	stw	r2,0(sp)
10001ed0:	00055800 	call	10005580 <__muldf3>
10001ed4:	1009883a 	mov	r4,r2
10001ed8:	180b883a 	mov	r5,r3
10001edc:	100d883a 	mov	r6,r2
10001ee0:	180f883a 	mov	r7,r3
10001ee4:	1027883a 	mov	r19,r2
10001ee8:	1821883a 	mov	r16,r3
10001eec:	00055800 	call	10005580 <__muldf3>
10001ef0:	01929174 	movhi	r6,19013
10001ef4:	01cff2b4 	movhi	r7,16330
10001ef8:	9809883a 	mov	r4,r19
10001efc:	800b883a 	mov	r5,r16
10001f00:	3193bbc4 	addi	r6,r6,20207
10001f04:	39df8a04 	addi	r7,r7,32296
10001f08:	1829883a 	mov	r20,r3
10001f0c:	d8800315 	stw	r2,12(sp)
10001f10:	00055800 	call	10005580 <__muldf3>
10001f14:	01a4f2b4 	movhi	r6,37834
10001f18:	01cff3b4 	movhi	r7,16334
10001f1c:	1009883a 	mov	r4,r2
10001f20:	180b883a 	mov	r5,r3
10001f24:	31b6d944 	addi	r6,r6,-9371
10001f28:	39e19284 	addi	r7,r7,-31158
10001f2c:	00041200 	call	10004120 <__adddf3>
10001f30:	980d883a 	mov	r6,r19
10001f34:	800f883a 	mov	r7,r16
10001f38:	1009883a 	mov	r4,r2
10001f3c:	180b883a 	mov	r5,r3
10001f40:	00055800 	call	10005580 <__muldf3>
10001f44:	01aa4774 	movhi	r6,43293
10001f48:	01cff474 	movhi	r7,16337
10001f4c:	1009883a 	mov	r4,r2
10001f50:	180b883a 	mov	r5,r3
10001f54:	31904044 	addi	r6,r6,16641
10001f58:	39dd1804 	addi	r7,r7,29792
10001f5c:	00041200 	call	10004120 <__adddf3>
10001f60:	980d883a 	mov	r6,r19
10001f64:	800f883a 	mov	r7,r16
10001f68:	1009883a 	mov	r4,r2
10001f6c:	180b883a 	mov	r5,r3
10001f70:	00055800 	call	10005580 <__muldf3>
10001f74:	019463f4 	movhi	r6,20879
10001f78:	01cff574 	movhi	r7,16341
10001f7c:	1009883a 	mov	r4,r2
10001f80:	180b883a 	mov	r5,r3
10001f84:	31899344 	addi	r6,r6,9805
10001f88:	39d55544 	addi	r7,r7,21845
10001f8c:	00041200 	call	10004120 <__adddf3>
10001f90:	980d883a 	mov	r6,r19
10001f94:	800f883a 	mov	r7,r16
10001f98:	1009883a 	mov	r4,r2
10001f9c:	180b883a 	mov	r5,r3
10001fa0:	00055800 	call	10005580 <__muldf3>
10001fa4:	01b6dc34 	movhi	r6,56176
10001fa8:	01cff6f4 	movhi	r7,16347
10001fac:	1009883a 	mov	r4,r2
10001fb0:	180b883a 	mov	r5,r3
10001fb4:	31aaffc4 	addi	r6,r6,-21505
10001fb8:	39db6d84 	addi	r7,r7,28086
10001fbc:	00041200 	call	10004120 <__adddf3>
10001fc0:	980d883a 	mov	r6,r19
10001fc4:	800f883a 	mov	r7,r16
10001fc8:	1009883a 	mov	r4,r2
10001fcc:	180b883a 	mov	r5,r3
10001fd0:	00055800 	call	10005580 <__muldf3>
10001fd4:	018cccf4 	movhi	r6,13107
10001fd8:	01cff8f4 	movhi	r7,16355
10001fdc:	1009883a 	mov	r4,r2
10001fe0:	180b883a 	mov	r5,r3
10001fe4:	318cc0c4 	addi	r6,r6,13059
10001fe8:	39ccccc4 	addi	r7,r7,13107
10001fec:	00041200 	call	10004120 <__adddf3>
10001ff0:	da400317 	ldw	r9,12(sp)
10001ff4:	a00b883a 	mov	r5,r20
10001ff8:	100d883a 	mov	r6,r2
10001ffc:	4809883a 	mov	r4,r9
10002000:	180f883a 	mov	r7,r3
10002004:	00055800 	call	10005580 <__muldf3>
10002008:	880b883a 	mov	r5,r17
1000200c:	900d883a 	mov	r6,r18
10002010:	880f883a 	mov	r7,r17
10002014:	0009883a 	mov	r4,zero
10002018:	1027883a 	mov	r19,r2
1000201c:	1821883a 	mov	r16,r3
10002020:	00041200 	call	10004120 <__adddf3>
10002024:	d9800017 	ldw	r6,0(sp)
10002028:	b00f883a 	mov	r7,r22
1000202c:	1009883a 	mov	r4,r2
10002030:	180b883a 	mov	r5,r3
10002034:	00055800 	call	10005580 <__muldf3>
10002038:	980d883a 	mov	r6,r19
1000203c:	800f883a 	mov	r7,r16
10002040:	1009883a 	mov	r4,r2
10002044:	180b883a 	mov	r5,r3
10002048:	00041200 	call	10004120 <__adddf3>
1000204c:	880f883a 	mov	r7,r17
10002050:	880b883a 	mov	r5,r17
10002054:	000d883a 	mov	r6,zero
10002058:	0009883a 	mov	r4,zero
1000205c:	1029883a 	mov	r20,r2
10002060:	1827883a 	mov	r19,r3
10002064:	00055800 	call	10005580 <__muldf3>
10002068:	1009883a 	mov	r4,r2
1000206c:	180b883a 	mov	r5,r3
10002070:	000d883a 	mov	r6,zero
10002074:	01d00234 	movhi	r7,16392
10002078:	d8c00615 	stw	r3,24(sp)
1000207c:	d8800515 	stw	r2,20(sp)
10002080:	00041200 	call	10004120 <__adddf3>
10002084:	a00d883a 	mov	r6,r20
10002088:	980f883a 	mov	r7,r19
1000208c:	1009883a 	mov	r4,r2
10002090:	180b883a 	mov	r5,r3
10002094:	00041200 	call	10004120 <__adddf3>
10002098:	880b883a 	mov	r5,r17
1000209c:	000d883a 	mov	r6,zero
100020a0:	180f883a 	mov	r7,r3
100020a4:	0009883a 	mov	r4,zero
100020a8:	1821883a 	mov	r16,r3
100020ac:	00055800 	call	10005580 <__muldf3>
100020b0:	d9000017 	ldw	r4,0(sp)
100020b4:	b00b883a 	mov	r5,r22
100020b8:	800f883a 	mov	r7,r16
100020bc:	000d883a 	mov	r6,zero
100020c0:	d8800115 	stw	r2,4(sp)
100020c4:	d8c00215 	stw	r3,8(sp)
100020c8:	00055800 	call	10005580 <__muldf3>
100020cc:	800b883a 	mov	r5,r16
100020d0:	0009883a 	mov	r4,zero
100020d4:	000d883a 	mov	r6,zero
100020d8:	01d00234 	movhi	r7,16392
100020dc:	182d883a 	mov	r22,r3
100020e0:	d8800315 	stw	r2,12(sp)
100020e4:	0005dec0 	call	10005dec <__subdf3>
100020e8:	dbc00517 	ldw	r15,20(sp)
100020ec:	db800617 	ldw	r14,24(sp)
100020f0:	1009883a 	mov	r4,r2
100020f4:	780d883a 	mov	r6,r15
100020f8:	700f883a 	mov	r7,r14
100020fc:	180b883a 	mov	r5,r3
10002100:	0005dec0 	call	10005dec <__subdf3>
10002104:	a009883a 	mov	r4,r20
10002108:	980b883a 	mov	r5,r19
1000210c:	100d883a 	mov	r6,r2
10002110:	180f883a 	mov	r7,r3
10002114:	0005dec0 	call	10005dec <__subdf3>
10002118:	900d883a 	mov	r6,r18
1000211c:	880f883a 	mov	r7,r17
10002120:	1009883a 	mov	r4,r2
10002124:	180b883a 	mov	r5,r3
10002128:	00055800 	call	10005580 <__muldf3>
1000212c:	da400317 	ldw	r9,12(sp)
10002130:	b00b883a 	mov	r5,r22
10002134:	100d883a 	mov	r6,r2
10002138:	4809883a 	mov	r4,r9
1000213c:	180f883a 	mov	r7,r3
10002140:	00041200 	call	10004120 <__adddf3>
10002144:	d9000117 	ldw	r4,4(sp)
10002148:	d9400217 	ldw	r5,8(sp)
1000214c:	100d883a 	mov	r6,r2
10002150:	180f883a 	mov	r7,r3
10002154:	102d883a 	mov	r22,r2
10002158:	1825883a 	mov	r18,r3
1000215c:	00041200 	call	10004120 <__adddf3>
10002160:	01cffbf4 	movhi	r7,16367
10002164:	39f1c244 	addi	r7,r7,-14583
10002168:	0009883a 	mov	r4,zero
1000216c:	180b883a 	mov	r5,r3
10002170:	01b80034 	movhi	r6,57344
10002174:	1823883a 	mov	r17,r3
10002178:	00055800 	call	10005580 <__muldf3>
1000217c:	018516f4 	movhi	r6,5211
10002180:	01ef8fb4 	movhi	r7,48702
10002184:	880b883a 	mov	r5,r17
10002188:	31807d44 	addi	r6,r6,501
1000218c:	39cbf804 	addi	r7,r7,12256
10002190:	0009883a 	mov	r4,zero
10002194:	1029883a 	mov	r20,r2
10002198:	1827883a 	mov	r19,r3
1000219c:	00055800 	call	10005580 <__muldf3>
100021a0:	d9800117 	ldw	r6,4(sp)
100021a4:	d9c00217 	ldw	r7,8(sp)
100021a8:	880b883a 	mov	r5,r17
100021ac:	0009883a 	mov	r4,zero
100021b0:	1821883a 	mov	r16,r3
100021b4:	d8800415 	stw	r2,16(sp)
100021b8:	0005dec0 	call	10005dec <__subdf3>
100021bc:	b009883a 	mov	r4,r22
100021c0:	900b883a 	mov	r5,r18
100021c4:	100d883a 	mov	r6,r2
100021c8:	180f883a 	mov	r7,r3
100021cc:	0005dec0 	call	10005dec <__subdf3>
100021d0:	01b70eb4 	movhi	r6,56378
100021d4:	01cffbf4 	movhi	r7,16367
100021d8:	1009883a 	mov	r4,r2
100021dc:	180b883a 	mov	r5,r3
100021e0:	3180ff44 	addi	r6,r6,1021
100021e4:	39f1c244 	addi	r7,r7,-14583
100021e8:	00055800 	call	10005580 <__muldf3>
100021ec:	db400417 	ldw	r13,16(sp)
100021f0:	800b883a 	mov	r5,r16
100021f4:	100d883a 	mov	r6,r2
100021f8:	6809883a 	mov	r4,r13
100021fc:	180f883a 	mov	r7,r3
10002200:	00041200 	call	10004120 <__adddf3>
10002204:	db000717 	ldw	r12,28(sp)
10002208:	1009883a 	mov	r4,r2
1000220c:	00840074 	movhi	r2,4097
10002210:	10895504 	addi	r2,r2,9556
10002214:	1305883a 	add	r2,r2,r12
10002218:	11800017 	ldw	r6,0(r2)
1000221c:	11c00117 	ldw	r7,4(r2)
10002220:	180b883a 	mov	r5,r3
10002224:	00041200 	call	10004120 <__adddf3>
10002228:	da000817 	ldw	r8,32(sp)
1000222c:	1025883a 	mov	r18,r2
10002230:	1823883a 	mov	r17,r3
10002234:	4009883a 	mov	r4,r8
10002238:	00067440 	call	10006744 <__floatsidf>
1000223c:	db000717 	ldw	r12,28(sp)
10002240:	d8800115 	stw	r2,4(sp)
10002244:	00840074 	movhi	r2,4097
10002248:	10895904 	addi	r2,r2,9572
1000224c:	1319883a 	add	r12,r2,r12
10002250:	65800017 	ldw	r22,0(r12)
10002254:	63000117 	ldw	r12,4(r12)
10002258:	a009883a 	mov	r4,r20
1000225c:	980b883a 	mov	r5,r19
10002260:	900d883a 	mov	r6,r18
10002264:	880f883a 	mov	r7,r17
10002268:	db000015 	stw	r12,0(sp)
1000226c:	d8c00215 	stw	r3,8(sp)
10002270:	00041200 	call	10004120 <__adddf3>
10002274:	d9c00017 	ldw	r7,0(sp)
10002278:	1009883a 	mov	r4,r2
1000227c:	180b883a 	mov	r5,r3
10002280:	b00d883a 	mov	r6,r22
10002284:	00041200 	call	10004120 <__adddf3>
10002288:	d9800117 	ldw	r6,4(sp)
1000228c:	d9c00217 	ldw	r7,8(sp)
10002290:	1009883a 	mov	r4,r2
10002294:	180b883a 	mov	r5,r3
10002298:	00041200 	call	10004120 <__adddf3>
1000229c:	d9800117 	ldw	r6,4(sp)
100022a0:	d9c00217 	ldw	r7,8(sp)
100022a4:	0009883a 	mov	r4,zero
100022a8:	180b883a 	mov	r5,r3
100022ac:	1821883a 	mov	r16,r3
100022b0:	0005dec0 	call	10005dec <__subdf3>
100022b4:	d9c00017 	ldw	r7,0(sp)
100022b8:	1009883a 	mov	r4,r2
100022bc:	180b883a 	mov	r5,r3
100022c0:	b00d883a 	mov	r6,r22
100022c4:	0005dec0 	call	10005dec <__subdf3>
100022c8:	1009883a 	mov	r4,r2
100022cc:	180b883a 	mov	r5,r3
100022d0:	a00d883a 	mov	r6,r20
100022d4:	980f883a 	mov	r7,r19
100022d8:	0005dec0 	call	10005dec <__subdf3>
100022dc:	9009883a 	mov	r4,r18
100022e0:	880b883a 	mov	r5,r17
100022e4:	100d883a 	mov	r6,r2
100022e8:	180f883a 	mov	r7,r3
100022ec:	0005dec0 	call	10005dec <__subdf3>
100022f0:	dac00917 	ldw	r11,36(sp)
100022f4:	e2bfffc4 	addi	r10,fp,-1
100022f8:	1027883a 	mov	r19,r2
100022fc:	52d6b03a 	or	r11,r10,r11
10002300:	1823883a 	mov	r17,r3
10002304:	5801591e 	bne	r11,zero,1000286c <__ieee754_pow+0xe60>
10002308:	04affc34 	movhi	r18,49136
1000230c:	b80f883a 	mov	r7,r23
10002310:	a809883a 	mov	r4,r21
10002314:	b80b883a 	mov	r5,r23
10002318:	000d883a 	mov	r6,zero
1000231c:	0005dec0 	call	10005dec <__subdf3>
10002320:	1009883a 	mov	r4,r2
10002324:	180b883a 	mov	r5,r3
10002328:	000d883a 	mov	r6,zero
1000232c:	800f883a 	mov	r7,r16
10002330:	00055800 	call	10005580 <__muldf3>
10002334:	a809883a 	mov	r4,r21
10002338:	b80b883a 	mov	r5,r23
1000233c:	980d883a 	mov	r6,r19
10002340:	880f883a 	mov	r7,r17
10002344:	102d883a 	mov	r22,r2
10002348:	1829883a 	mov	r20,r3
1000234c:	00055800 	call	10005580 <__muldf3>
10002350:	b009883a 	mov	r4,r22
10002354:	a00b883a 	mov	r5,r20
10002358:	100d883a 	mov	r6,r2
1000235c:	180f883a 	mov	r7,r3
10002360:	00041200 	call	10004120 <__adddf3>
10002364:	b80b883a 	mov	r5,r23
10002368:	0009883a 	mov	r4,zero
1000236c:	000d883a 	mov	r6,zero
10002370:	800f883a 	mov	r7,r16
10002374:	1027883a 	mov	r19,r2
10002378:	1823883a 	mov	r17,r3
1000237c:	00055800 	call	10005580 <__muldf3>
10002380:	9809883a 	mov	r4,r19
10002384:	880b883a 	mov	r5,r17
10002388:	100d883a 	mov	r6,r2
1000238c:	180f883a 	mov	r7,r3
10002390:	102d883a 	mov	r22,r2
10002394:	182b883a 	mov	r21,r3
10002398:	00041200 	call	10004120 <__adddf3>
1000239c:	102f883a 	mov	r23,r2
100023a0:	00902434 	movhi	r2,16528
100023a4:	10bfffc4 	addi	r2,r2,-1
100023a8:	1829883a 	mov	r20,r3
100023ac:	b013883a 	mov	r9,r22
100023b0:	a811883a 	mov	r8,r21
100023b4:	10c1080e 	bge	r2,r3,100027d8 <__ieee754_pow+0xdcc>
100023b8:	00efdc34 	movhi	r3,49008
100023bc:	a0c7883a 	add	r3,r20,r3
100023c0:	1dc6b03a 	or	r3,r3,r23
100023c4:	1801961e 	bne	r3,zero,10002a20 <__ieee754_pow+0x1014>
100023c8:	01994b34 	movhi	r6,25900
100023cc:	01cf25f4 	movhi	r7,15511
100023d0:	31a0bf84 	addi	r6,r6,-32002
100023d4:	39c551c4 	addi	r7,r7,5447
100023d8:	9809883a 	mov	r4,r19
100023dc:	880b883a 	mov	r5,r17
100023e0:	00041200 	call	10004120 <__adddf3>
100023e4:	b809883a 	mov	r4,r23
100023e8:	a00b883a 	mov	r5,r20
100023ec:	b00d883a 	mov	r6,r22
100023f0:	a80f883a 	mov	r7,r21
100023f4:	1039883a 	mov	fp,r2
100023f8:	1821883a 	mov	r16,r3
100023fc:	0005dec0 	call	10005dec <__subdf3>
10002400:	e009883a 	mov	r4,fp
10002404:	800b883a 	mov	r5,r16
10002408:	100d883a 	mov	r6,r2
1000240c:	180f883a 	mov	r7,r3
10002410:	00053c00 	call	100053c0 <__gedf2>
10002414:	00818216 	blt	zero,r2,10002a20 <__ieee754_pow+0x1014>
10002418:	a021883a 	mov	r16,r20
1000241c:	8011d53a 	srai	r8,r16,20
10002420:	00800434 	movhi	r2,16
10002424:	a02ed7fa 	srli	r23,r20,31
10002428:	423f0084 	addi	r8,r8,-1022
1000242c:	1211d83a 	sra	r8,r2,r8
10002430:	00c00434 	movhi	r3,16
10002434:	18ffffc4 	addi	r3,r3,-1
10002438:	4529883a 	add	r20,r8,r20
1000243c:	a00a907a 	slli	r5,r20,1
10002440:	a0c4703a 	and	r2,r20,r3
10002444:	10800434 	orhi	r2,r2,16
10002448:	280ad57a 	srli	r5,r5,21
1000244c:	05cdc83a 	sub	r6,zero,r23
10002450:	b009883a 	mov	r4,r22
10002454:	29ff0044 	addi	r7,r5,-1023
10002458:	19c7d83a 	sra	r3,r3,r7
1000245c:	01c104c4 	movi	r7,1043
10002460:	394bc83a 	sub	r5,r7,r5
10002464:	1145d83a 	sra	r2,r2,r5
10002468:	00ce303a 	nor	r7,zero,r3
1000246c:	3d0e703a 	and	r7,r7,r20
10002470:	1184f03a 	xor	r2,r2,r6
10002474:	a80b883a 	mov	r5,r21
10002478:	000d883a 	mov	r6,zero
1000247c:	15ef883a 	add	r23,r2,r23
10002480:	ddc00115 	stw	r23,4(sp)
10002484:	0005dec0 	call	10005dec <__subdf3>
10002488:	9809883a 	mov	r4,r19
1000248c:	880b883a 	mov	r5,r17
10002490:	100d883a 	mov	r6,r2
10002494:	180f883a 	mov	r7,r3
10002498:	d8c00815 	stw	r3,32(sp)
1000249c:	d8800315 	stw	r2,12(sp)
100024a0:	00041200 	call	10004120 <__adddf3>
100024a4:	d8800117 	ldw	r2,4(sp)
100024a8:	da000817 	ldw	r8,32(sp)
100024ac:	da400317 	ldw	r9,12(sp)
100024b0:	1004953a 	slli	r2,r2,20
100024b4:	1829883a 	mov	r20,r3
100024b8:	d8800015 	stw	r2,0(sp)
100024bc:	01cff9b4 	movhi	r7,16358
100024c0:	a00b883a 	mov	r5,r20
100024c4:	39cb90c4 	addi	r7,r7,11843
100024c8:	0009883a 	mov	r4,zero
100024cc:	000d883a 	mov	r6,zero
100024d0:	da000815 	stw	r8,32(sp)
100024d4:	da400315 	stw	r9,12(sp)
100024d8:	00055800 	call	10005580 <__muldf3>
100024dc:	da400317 	ldw	r9,12(sp)
100024e0:	da000817 	ldw	r8,32(sp)
100024e4:	a00b883a 	mov	r5,r20
100024e8:	480d883a 	mov	r6,r9
100024ec:	400f883a 	mov	r7,r8
100024f0:	0009883a 	mov	r4,zero
100024f4:	1039883a 	mov	fp,r2
100024f8:	182d883a 	mov	r22,r3
100024fc:	0005dec0 	call	10005dec <__subdf3>
10002500:	9809883a 	mov	r4,r19
10002504:	880b883a 	mov	r5,r17
10002508:	100d883a 	mov	r6,r2
1000250c:	180f883a 	mov	r7,r3
10002510:	0005dec0 	call	10005dec <__subdf3>
10002514:	01bfbeb4 	movhi	r6,65274
10002518:	01cff9b4 	movhi	r7,16358
1000251c:	1009883a 	mov	r4,r2
10002520:	180b883a 	mov	r5,r3
10002524:	318e7bc4 	addi	r6,r6,14831
10002528:	39cb9084 	addi	r7,r7,11842
1000252c:	00055800 	call	10005580 <__muldf3>
10002530:	01832a34 	movhi	r6,3240
10002534:	01ef8834 	movhi	r7,48672
10002538:	a00b883a 	mov	r5,r20
1000253c:	319b0e44 	addi	r6,r6,27705
10002540:	39d71844 	addi	r7,r7,23649
10002544:	0009883a 	mov	r4,zero
10002548:	1023883a 	mov	r17,r2
1000254c:	1821883a 	mov	r16,r3
10002550:	00055800 	call	10005580 <__muldf3>
10002554:	8809883a 	mov	r4,r17
10002558:	800b883a 	mov	r5,r16
1000255c:	100d883a 	mov	r6,r2
10002560:	180f883a 	mov	r7,r3
10002564:	00041200 	call	10004120 <__adddf3>
10002568:	e009883a 	mov	r4,fp
1000256c:	b00b883a 	mov	r5,r22
10002570:	100d883a 	mov	r6,r2
10002574:	180f883a 	mov	r7,r3
10002578:	1029883a 	mov	r20,r2
1000257c:	1827883a 	mov	r19,r3
10002580:	00041200 	call	10004120 <__adddf3>
10002584:	e00d883a 	mov	r6,fp
10002588:	b00f883a 	mov	r7,r22
1000258c:	1009883a 	mov	r4,r2
10002590:	180b883a 	mov	r5,r3
10002594:	1023883a 	mov	r17,r2
10002598:	1821883a 	mov	r16,r3
1000259c:	0005dec0 	call	10005dec <__subdf3>
100025a0:	a009883a 	mov	r4,r20
100025a4:	980b883a 	mov	r5,r19
100025a8:	100d883a 	mov	r6,r2
100025ac:	180f883a 	mov	r7,r3
100025b0:	0005dec0 	call	10005dec <__subdf3>
100025b4:	8809883a 	mov	r4,r17
100025b8:	800b883a 	mov	r5,r16
100025bc:	880d883a 	mov	r6,r17
100025c0:	800f883a 	mov	r7,r16
100025c4:	1039883a 	mov	fp,r2
100025c8:	182d883a 	mov	r22,r3
100025cc:	00055800 	call	10005580 <__muldf3>
100025d0:	019caff4 	movhi	r6,29375
100025d4:	01cf99b4 	movhi	r7,15974
100025d8:	1009883a 	mov	r4,r2
100025dc:	180b883a 	mov	r5,r3
100025e0:	31a93404 	addi	r6,r6,-23344
100025e4:	39cdda44 	addi	r7,r7,14185
100025e8:	1029883a 	mov	r20,r2
100025ec:	1827883a 	mov	r19,r3
100025f0:	00055800 	call	10005580 <__muldf3>
100025f4:	01b174b4 	movhi	r6,50642
100025f8:	01cfaf34 	movhi	r7,16060
100025fc:	1009883a 	mov	r4,r2
10002600:	180b883a 	mov	r5,r3
10002604:	319afc44 	addi	r6,r6,27633
10002608:	39ef5044 	addi	r7,r7,-17087
1000260c:	0005dec0 	call	10005dec <__subdf3>
10002610:	a00d883a 	mov	r6,r20
10002614:	980f883a 	mov	r7,r19
10002618:	1009883a 	mov	r4,r2
1000261c:	180b883a 	mov	r5,r3
10002620:	00055800 	call	10005580 <__muldf3>
10002624:	01abc9b4 	movhi	r6,44838
10002628:	01cfc474 	movhi	r7,16145
1000262c:	1009883a 	mov	r4,r2
10002630:	180b883a 	mov	r5,r3
10002634:	31b78b04 	addi	r6,r6,-8660
10002638:	39d59a84 	addi	r7,r7,22122
1000263c:	00041200 	call	10004120 <__adddf3>
10002640:	a00d883a 	mov	r6,r20
10002644:	980f883a 	mov	r7,r19
10002648:	1009883a 	mov	r4,r2
1000264c:	180b883a 	mov	r5,r3
10002650:	00055800 	call	10005580 <__muldf3>
10002654:	0185aff4 	movhi	r6,5823
10002658:	01cfd9f4 	movhi	r7,16231
1000265c:	1009883a 	mov	r4,r2
10002660:	180b883a 	mov	r5,r3
10002664:	31af64c4 	addi	r6,r6,-17005
10002668:	39f05b04 	addi	r7,r7,-16020
1000266c:	0005dec0 	call	10005dec <__subdf3>
10002670:	a00d883a 	mov	r6,r20
10002674:	980f883a 	mov	r7,r19
10002678:	1009883a 	mov	r4,r2
1000267c:	180b883a 	mov	r5,r3
10002680:	00055800 	call	10005580 <__muldf3>
10002684:	01955574 	movhi	r6,21845
10002688:	01cff174 	movhi	r7,16325
1000268c:	1009883a 	mov	r4,r2
10002690:	180b883a 	mov	r5,r3
10002694:	31954f84 	addi	r6,r6,21822
10002698:	39d55544 	addi	r7,r7,21845
1000269c:	00041200 	call	10004120 <__adddf3>
100026a0:	a00d883a 	mov	r6,r20
100026a4:	980f883a 	mov	r7,r19
100026a8:	1009883a 	mov	r4,r2
100026ac:	180b883a 	mov	r5,r3
100026b0:	00055800 	call	10005580 <__muldf3>
100026b4:	8809883a 	mov	r4,r17
100026b8:	800b883a 	mov	r5,r16
100026bc:	100d883a 	mov	r6,r2
100026c0:	180f883a 	mov	r7,r3
100026c4:	0005dec0 	call	10005dec <__subdf3>
100026c8:	8809883a 	mov	r4,r17
100026cc:	800b883a 	mov	r5,r16
100026d0:	100d883a 	mov	r6,r2
100026d4:	180f883a 	mov	r7,r3
100026d8:	1029883a 	mov	r20,r2
100026dc:	1827883a 	mov	r19,r3
100026e0:	00055800 	call	10005580 <__muldf3>
100026e4:	a009883a 	mov	r4,r20
100026e8:	980b883a 	mov	r5,r19
100026ec:	000d883a 	mov	r6,zero
100026f0:	01d00034 	movhi	r7,16384
100026f4:	102b883a 	mov	r21,r2
100026f8:	182f883a 	mov	r23,r3
100026fc:	0005dec0 	call	10005dec <__subdf3>
10002700:	a809883a 	mov	r4,r21
10002704:	b80b883a 	mov	r5,r23
10002708:	100d883a 	mov	r6,r2
1000270c:	180f883a 	mov	r7,r3
10002710:	00049bc0 	call	100049bc <__divdf3>
10002714:	8809883a 	mov	r4,r17
10002718:	800b883a 	mov	r5,r16
1000271c:	e00d883a 	mov	r6,fp
10002720:	b00f883a 	mov	r7,r22
10002724:	1029883a 	mov	r20,r2
10002728:	1827883a 	mov	r19,r3
1000272c:	00055800 	call	10005580 <__muldf3>
10002730:	1009883a 	mov	r4,r2
10002734:	180b883a 	mov	r5,r3
10002738:	e00d883a 	mov	r6,fp
1000273c:	b00f883a 	mov	r7,r22
10002740:	00041200 	call	10004120 <__adddf3>
10002744:	a009883a 	mov	r4,r20
10002748:	980b883a 	mov	r5,r19
1000274c:	100d883a 	mov	r6,r2
10002750:	180f883a 	mov	r7,r3
10002754:	0005dec0 	call	10005dec <__subdf3>
10002758:	1009883a 	mov	r4,r2
1000275c:	180b883a 	mov	r5,r3
10002760:	880d883a 	mov	r6,r17
10002764:	800f883a 	mov	r7,r16
10002768:	0005dec0 	call	10005dec <__subdf3>
1000276c:	0009883a 	mov	r4,zero
10002770:	180f883a 	mov	r7,r3
10002774:	014ffc34 	movhi	r5,16368
10002778:	100d883a 	mov	r6,r2
1000277c:	0005dec0 	call	10005dec <__subdf3>
10002780:	d9000017 	ldw	r4,0(sp)
10002784:	190f883a 	add	r7,r3,r4
10002788:	3809d53a 	srai	r4,r7,20
1000278c:	0100c70e 	bge	zero,r4,10002aac <__ieee754_pow+0x10a0>
10002790:	100d883a 	mov	r6,r2
10002794:	0009883a 	mov	r4,zero
10002798:	900b883a 	mov	r5,r18
1000279c:	00055800 	call	10005580 <__muldf3>
100027a0:	003cd606 	br	10001afc <__alt_data_end+0xf8001afc>
100027a4:	00b00434 	movhi	r2,49168
100027a8:	9085883a 	add	r2,r18,r2
100027ac:	e084b03a 	or	r2,fp,r2
100027b0:	1000aa1e 	bne	r2,zero,10002a5c <__ieee754_pow+0x1050>
100027b4:	b009883a 	mov	r4,r22
100027b8:	180b883a 	mov	r5,r3
100027bc:	003d4006 	br	10001cc0 <__alt_data_end+0xf8001cc0>
100027c0:	8009883a 	mov	r4,r16
100027c4:	980b883a 	mov	r5,r19
100027c8:	800d883a 	mov	r6,r16
100027cc:	980f883a 	mov	r7,r19
100027d0:	00055800 	call	10005580 <__muldf3>
100027d4:	003cc906 	br	10001afc <__alt_data_end+0xf8001afc>
100027d8:	04200034 	movhi	r16,32768
100027dc:	843fffc4 	addi	r16,r16,-1
100027e0:	00902474 	movhi	r2,16529
100027e4:	1c20703a 	and	r16,r3,r16
100027e8:	10b2ffc4 	addi	r2,r2,-13313
100027ec:	1400a70e 	bge	r2,r16,10002a8c <__ieee754_pow+0x1080>
100027f0:	008fdbf4 	movhi	r2,16239
100027f4:	108d0004 	addi	r2,r2,13312
100027f8:	1885883a 	add	r2,r3,r2
100027fc:	15c4b03a 	or	r2,r2,r23
10002800:	10000b1e 	bne	r2,zero,10002830 <__ieee754_pow+0xe24>
10002804:	b809883a 	mov	r4,r23
10002808:	180b883a 	mov	r5,r3
1000280c:	b00d883a 	mov	r6,r22
10002810:	a80f883a 	mov	r7,r21
10002814:	0005dec0 	call	10005dec <__subdf3>
10002818:	9809883a 	mov	r4,r19
1000281c:	880b883a 	mov	r5,r17
10002820:	100d883a 	mov	r6,r2
10002824:	180f883a 	mov	r7,r3
10002828:	00054a00 	call	100054a0 <__ledf2>
1000282c:	00befb16 	blt	zero,r2,1000241c <__alt_data_end+0xf800241c>
10002830:	01b0be74 	movhi	r6,49913
10002834:	01c06974 	movhi	r7,421
10002838:	900b883a 	mov	r5,r18
1000283c:	31bcd644 	addi	r6,r6,-3239
10002840:	39db87c4 	addi	r7,r7,28191
10002844:	0009883a 	mov	r4,zero
10002848:	00055800 	call	10005580 <__muldf3>
1000284c:	01b0be74 	movhi	r6,49913
10002850:	01c06974 	movhi	r7,421
10002854:	1009883a 	mov	r4,r2
10002858:	180b883a 	mov	r5,r3
1000285c:	31bcd644 	addi	r6,r6,-3239
10002860:	39db87c4 	addi	r7,r7,28191
10002864:	00055800 	call	10005580 <__muldf3>
10002868:	003ca406 	br	10001afc <__alt_data_end+0xf8001afc>
1000286c:	048ffc34 	movhi	r18,16368
10002870:	003ea606 	br	1000230c <__alt_data_end+0xf800230c>
10002874:	b83cce0e 	bge	r23,zero,10001bb0 <__alt_data_end+0xf8001bb0>
10002878:	0005883a 	mov	r2,zero
1000287c:	b8e0003c 	xorhi	r3,r23,32768
10002880:	003c9e06 	br	10001afc <__alt_data_end+0xf8001afc>
10002884:	0021883a 	mov	r16,zero
10002888:	0019883a 	mov	r12,zero
1000288c:	003d3406 	br	10001d60 <__alt_data_end+0xf8001d60>
10002890:	0009883a 	mov	r4,zero
10002894:	003d2006 	br	10001d18 <__alt_data_end+0xf8001d18>
10002898:	008ffc34 	movhi	r2,16368
1000289c:	10bfff84 	addi	r2,r2,-2
100028a0:	14bcc20e 	bge	r2,r18,10001bac <__alt_data_end+0xf8001bac>
100028a4:	01cffc34 	movhi	r7,16368
100028a8:	3cbcd916 	blt	r7,r18,10001c10 <__alt_data_end+0xf8001c10>
100028ac:	b009883a 	mov	r4,r22
100028b0:	000d883a 	mov	r6,zero
100028b4:	180b883a 	mov	r5,r3
100028b8:	dac00915 	stw	r11,36(sp)
100028bc:	0005dec0 	call	10005dec <__subdf3>
100028c0:	01cffdf4 	movhi	r7,16375
100028c4:	1009883a 	mov	r4,r2
100028c8:	180b883a 	mov	r5,r3
100028cc:	39c551c4 	addi	r7,r7,5447
100028d0:	01980034 	movhi	r6,24576
100028d4:	1023883a 	mov	r17,r2
100028d8:	1821883a 	mov	r16,r3
100028dc:	00055800 	call	10005580 <__muldf3>
100028e0:	01be17b4 	movhi	r6,63582
100028e4:	01cf9574 	movhi	r7,15957
100028e8:	8809883a 	mov	r4,r17
100028ec:	800b883a 	mov	r5,r16
100028f0:	31b7d104 	addi	r6,r6,-8380
100028f4:	39eb82c4 	addi	r7,r7,-20981
100028f8:	1027883a 	mov	r19,r2
100028fc:	1825883a 	mov	r18,r3
10002900:	00055800 	call	10005580 <__muldf3>
10002904:	8809883a 	mov	r4,r17
10002908:	800b883a 	mov	r5,r16
1000290c:	880d883a 	mov	r6,r17
10002910:	800f883a 	mov	r7,r16
10002914:	1829883a 	mov	r20,r3
10002918:	d8800815 	stw	r2,32(sp)
1000291c:	00055800 	call	10005580 <__muldf3>
10002920:	8809883a 	mov	r4,r17
10002924:	800b883a 	mov	r5,r16
10002928:	000d883a 	mov	r6,zero
1000292c:	01cff434 	movhi	r7,16336
10002930:	182d883a 	mov	r22,r3
10002934:	d8800315 	stw	r2,12(sp)
10002938:	00055800 	call	10005580 <__muldf3>
1000293c:	01155574 	movhi	r4,21845
10002940:	014ff574 	movhi	r5,16341
10002944:	21155544 	addi	r4,r4,21845
10002948:	29555544 	addi	r5,r5,21845
1000294c:	100d883a 	mov	r6,r2
10002950:	180f883a 	mov	r7,r3
10002954:	0005dec0 	call	10005dec <__subdf3>
10002958:	880d883a 	mov	r6,r17
1000295c:	800f883a 	mov	r7,r16
10002960:	1009883a 	mov	r4,r2
10002964:	180b883a 	mov	r5,r3
10002968:	00055800 	call	10005580 <__muldf3>
1000296c:	0009883a 	mov	r4,zero
10002970:	014ff834 	movhi	r5,16352
10002974:	100d883a 	mov	r6,r2
10002978:	180f883a 	mov	r7,r3
1000297c:	0005dec0 	call	10005dec <__subdf3>
10002980:	da400317 	ldw	r9,12(sp)
10002984:	b00b883a 	mov	r5,r22
10002988:	100d883a 	mov	r6,r2
1000298c:	4809883a 	mov	r4,r9
10002990:	180f883a 	mov	r7,r3
10002994:	00055800 	call	10005580 <__muldf3>
10002998:	01994b34 	movhi	r6,25900
1000299c:	01cffdf4 	movhi	r7,16375
100029a0:	1009883a 	mov	r4,r2
100029a4:	180b883a 	mov	r5,r3
100029a8:	31a0bf84 	addi	r6,r6,-32002
100029ac:	39c551c4 	addi	r7,r7,5447
100029b0:	00055800 	call	10005580 <__muldf3>
100029b4:	da000817 	ldw	r8,32(sp)
100029b8:	a00b883a 	mov	r5,r20
100029bc:	100d883a 	mov	r6,r2
100029c0:	4009883a 	mov	r4,r8
100029c4:	180f883a 	mov	r7,r3
100029c8:	0005dec0 	call	10005dec <__subdf3>
100029cc:	9809883a 	mov	r4,r19
100029d0:	900b883a 	mov	r5,r18
100029d4:	100d883a 	mov	r6,r2
100029d8:	180f883a 	mov	r7,r3
100029dc:	1029883a 	mov	r20,r2
100029e0:	1823883a 	mov	r17,r3
100029e4:	00041200 	call	10004120 <__adddf3>
100029e8:	0009883a 	mov	r4,zero
100029ec:	180b883a 	mov	r5,r3
100029f0:	980d883a 	mov	r6,r19
100029f4:	900f883a 	mov	r7,r18
100029f8:	1821883a 	mov	r16,r3
100029fc:	0005dec0 	call	10005dec <__subdf3>
10002a00:	a009883a 	mov	r4,r20
10002a04:	003e3606 	br	100022e0 <__alt_data_end+0xf80022e0>
10002a08:	0009883a 	mov	r4,zero
10002a0c:	880b883a 	mov	r5,r17
10002a10:	800d883a 	mov	r6,r16
10002a14:	980f883a 	mov	r7,r19
10002a18:	00049bc0 	call	100049bc <__divdf3>
10002a1c:	003c3706 	br	10001afc <__alt_data_end+0xf8001afc>
10002a20:	01a20034 	movhi	r6,34816
10002a24:	01df8e34 	movhi	r7,32312
10002a28:	900b883a 	mov	r5,r18
10002a2c:	319d6704 	addi	r6,r6,30108
10002a30:	39f90f04 	addi	r7,r7,-7108
10002a34:	0009883a 	mov	r4,zero
10002a38:	00055800 	call	10005580 <__muldf3>
10002a3c:	01a20034 	movhi	r6,34816
10002a40:	01df8e34 	movhi	r7,32312
10002a44:	1009883a 	mov	r4,r2
10002a48:	180b883a 	mov	r5,r3
10002a4c:	319d6704 	addi	r6,r6,30108
10002a50:	39f90f04 	addi	r7,r7,-7108
10002a54:	00055800 	call	10005580 <__muldf3>
10002a58:	003c2806 	br	10001afc <__alt_data_end+0xf8001afc>
10002a5c:	00800044 	movi	r2,1
10002a60:	e0bc5e1e 	bne	fp,r2,10001bdc <__alt_data_end+0xf8001bdc>
10002a64:	18e0003c 	xorhi	r3,r3,32768
10002a68:	b005883a 	mov	r2,r22
10002a6c:	003c2306 	br	10001afc <__alt_data_end+0xf8001afc>
10002a70:	303c3d1e 	bne	r6,zero,10001b68 <__alt_data_end+0xf8001b68>
10002a74:	1907c83a 	sub	r3,r3,r4
10002a78:	88c5d83a 	sra	r2,r17,r3
10002a7c:	10c6983a 	sll	r3,r2,r3
10002a80:	1c401126 	beq	r3,r17,10002ac8 <__ieee754_pow+0x10bc>
10002a84:	0039883a 	mov	fp,zero
10002a88:	003c0006 	br	10001a8c <__alt_data_end+0xf8001a8c>
10002a8c:	008ff834 	movhi	r2,16352
10002a90:	143e6216 	blt	r2,r16,1000241c <__alt_data_end+0xf800241c>
10002a94:	d8000015 	stw	zero,0(sp)
10002a98:	d8000115 	stw	zero,4(sp)
10002a9c:	003e8706 	br	100024bc <__alt_data_end+0xf80024bc>
10002aa0:	04000134 	movhi	r16,4
10002aa4:	03000044 	movi	r12,1
10002aa8:	003cad06 	br	10001d60 <__alt_data_end+0xf8001d60>
10002aac:	d9800117 	ldw	r6,4(sp)
10002ab0:	1009883a 	mov	r4,r2
10002ab4:	180b883a 	mov	r5,r3
10002ab8:	00030080 	call	10003008 <scalbn>
10002abc:	100d883a 	mov	r6,r2
10002ac0:	180f883a 	mov	r7,r3
10002ac4:	003f3306 	br	10002794 <__alt_data_end+0xf8002794>
10002ac8:	1080004c 	andi	r2,r2,1
10002acc:	02800084 	movi	r10,2
10002ad0:	50b9c83a 	sub	fp,r10,r2
10002ad4:	003bed06 	br	10001a8c <__alt_data_end+0xf8001a8c>

10002ad8 <__ieee754_sqrt>:
10002ad8:	defffd04 	addi	sp,sp,-12
10002adc:	dc400115 	stw	r17,4(sp)
10002ae0:	dc000015 	stw	r16,0(sp)
10002ae4:	dfc00215 	stw	ra,8(sp)
10002ae8:	28dffc2c 	andhi	r3,r5,32752
10002aec:	009ffc34 	movhi	r2,32752
10002af0:	2821883a 	mov	r16,r5
10002af4:	2023883a 	mov	r17,r4
10002af8:	18807c26 	beq	r3,r2,10002cec <__ieee754_sqrt+0x214>
10002afc:	2011883a 	mov	r8,r4
10002b00:	01405f0e 	bge	zero,r5,10002c80 <__ieee754_sqrt+0x1a8>
10002b04:	2815d53a 	srai	r10,r5,20
10002b08:	50006a26 	beq	r10,zero,10002cb4 <__ieee754_sqrt+0x1dc>
10002b0c:	00800434 	movhi	r2,16
10002b10:	52bf0044 	addi	r10,r10,-1023
10002b14:	10bfffc4 	addi	r2,r2,-1
10002b18:	8084703a 	and	r2,r16,r2
10002b1c:	50c0004c 	andi	r3,r10,1
10002b20:	10800434 	orhi	r2,r2,16
10002b24:	18004f1e 	bne	r3,zero,10002c64 <__ieee754_sqrt+0x18c>
10002b28:	4006d7fa 	srli	r3,r8,31
10002b2c:	5015d07a 	srai	r10,r10,1
10002b30:	1085883a 	add	r2,r2,r2
10002b34:	10c5883a 	add	r2,r2,r3
10002b38:	01800584 	movi	r6,22
10002b3c:	4207883a 	add	r3,r8,r8
10002b40:	0013883a 	mov	r9,zero
10002b44:	000b883a 	mov	r5,zero
10002b48:	01000834 	movhi	r4,32
10002b4c:	290f883a 	add	r7,r5,r4
10002b50:	1810d7fa 	srli	r8,r3,31
10002b54:	31bfffc4 	addi	r6,r6,-1
10002b58:	11c00316 	blt	r2,r7,10002b68 <__ieee754_sqrt+0x90>
10002b5c:	11c5c83a 	sub	r2,r2,r7
10002b60:	390b883a 	add	r5,r7,r4
10002b64:	4913883a 	add	r9,r9,r4
10002b68:	1085883a 	add	r2,r2,r2
10002b6c:	1205883a 	add	r2,r2,r8
10002b70:	18c7883a 	add	r3,r3,r3
10002b74:	2008d07a 	srli	r4,r4,1
10002b78:	303ff41e 	bne	r6,zero,10002b4c <__alt_data_end+0xf8002b4c>
10002b7c:	01200034 	movhi	r4,32768
10002b80:	01c00804 	movi	r7,32
10002b84:	0011883a 	mov	r8,zero
10002b88:	0017883a 	mov	r11,zero
10002b8c:	201b883a 	mov	r13,r4
10002b90:	00000806 	br	10002bb4 <__ieee754_sqrt+0xdc>
10002b94:	11401726 	beq	r2,r5,10002bf4 <__ieee754_sqrt+0x11c>
10002b98:	180cd7fa 	srli	r6,r3,31
10002b9c:	1085883a 	add	r2,r2,r2
10002ba0:	39ffffc4 	addi	r7,r7,-1
10002ba4:	1185883a 	add	r2,r2,r6
10002ba8:	18c7883a 	add	r3,r3,r3
10002bac:	2008d07a 	srli	r4,r4,1
10002bb0:	38001726 	beq	r7,zero,10002c10 <__ieee754_sqrt+0x138>
10002bb4:	590d883a 	add	r6,r11,r4
10002bb8:	28bff60e 	bge	r5,r2,10002b94 <__alt_data_end+0xf8002b94>
10002bbc:	3320002c 	andhi	r12,r6,32768
10002bc0:	3117883a 	add	r11,r6,r4
10002bc4:	63400826 	beq	r12,r13,10002be8 <__ieee754_sqrt+0x110>
10002bc8:	2819883a 	mov	r12,r5
10002bcc:	1145c83a 	sub	r2,r2,r5
10002bd0:	1980012e 	bgeu	r3,r6,10002bd8 <__ieee754_sqrt+0x100>
10002bd4:	10bfffc4 	addi	r2,r2,-1
10002bd8:	1987c83a 	sub	r3,r3,r6
10002bdc:	4111883a 	add	r8,r8,r4
10002be0:	600b883a 	mov	r5,r12
10002be4:	003fec06 	br	10002b98 <__alt_data_end+0xf8002b98>
10002be8:	583ff716 	blt	r11,zero,10002bc8 <__alt_data_end+0xf8002bc8>
10002bec:	2b000044 	addi	r12,r5,1
10002bf0:	003ff606 	br	10002bcc <__alt_data_end+0xf8002bcc>
10002bf4:	19801936 	bltu	r3,r6,10002c5c <__ieee754_sqrt+0x184>
10002bf8:	3320002c 	andhi	r12,r6,32768
10002bfc:	3117883a 	add	r11,r6,r4
10002c00:	63404626 	beq	r12,r13,10002d1c <__ieee754_sqrt+0x244>
10002c04:	1019883a 	mov	r12,r2
10002c08:	0005883a 	mov	r2,zero
10002c0c:	003ff206 	br	10002bd8 <__alt_data_end+0xf8002bd8>
10002c10:	10c4b03a 	or	r2,r2,r3
10002c14:	10000426 	beq	r2,zero,10002c28 <__ieee754_sqrt+0x150>
10002c18:	00bfffc4 	movi	r2,-1
10002c1c:	40804326 	beq	r8,r2,10002d2c <__ieee754_sqrt+0x254>
10002c20:	4080004c 	andi	r2,r8,1
10002c24:	1211883a 	add	r8,r2,r8
10002c28:	4004d07a 	srli	r2,r8,1
10002c2c:	4807d07a 	srai	r3,r9,1
10002c30:	010ff834 	movhi	r4,16352
10002c34:	4a40004c 	andi	r9,r9,1
10002c38:	1909883a 	add	r4,r3,r4
10002c3c:	48000e1e 	bne	r9,zero,10002c78 <__ieee754_sqrt+0x1a0>
10002c40:	5006953a 	slli	r3,r10,20
10002c44:	1907883a 	add	r3,r3,r4
10002c48:	dfc00217 	ldw	ra,8(sp)
10002c4c:	dc400117 	ldw	r17,4(sp)
10002c50:	dc000017 	ldw	r16,0(sp)
10002c54:	dec00304 	addi	sp,sp,12
10002c58:	f800283a 	ret
10002c5c:	100b883a 	mov	r5,r2
10002c60:	003fcd06 	br	10002b98 <__alt_data_end+0xf8002b98>
10002c64:	4006d7fa 	srli	r3,r8,31
10002c68:	1085883a 	add	r2,r2,r2
10002c6c:	4211883a 	add	r8,r8,r8
10002c70:	10c5883a 	add	r2,r2,r3
10002c74:	003fac06 	br	10002b28 <__alt_data_end+0xf8002b28>
10002c78:	10a00034 	orhi	r2,r2,32768
10002c7c:	003ff006 	br	10002c40 <__alt_data_end+0xf8002c40>
10002c80:	00a00034 	movhi	r2,32768
10002c84:	10bfffc4 	addi	r2,r2,-1
10002c88:	2884703a 	and	r2,r5,r2
10002c8c:	1104b03a 	or	r2,r2,r4
10002c90:	10001f26 	beq	r2,zero,10002d10 <__ieee754_sqrt+0x238>
10002c94:	28002c1e 	bne	r5,zero,10002d48 <__ieee754_sqrt+0x270>
10002c98:	0015883a 	mov	r10,zero
10002c9c:	4020d2fa 	srli	r16,r8,11
10002ca0:	52bffac4 	addi	r10,r10,-21
10002ca4:	4010957a 	slli	r8,r8,21
10002ca8:	803ffc26 	beq	r16,zero,10002c9c <__alt_data_end+0xf8002c9c>
10002cac:	8080042c 	andhi	r2,r16,16
10002cb0:	1000211e 	bne	r2,zero,10002d38 <__ieee754_sqrt+0x260>
10002cb4:	0005883a 	mov	r2,zero
10002cb8:	8421883a 	add	r16,r16,r16
10002cbc:	80c0042c 	andhi	r3,r16,16
10002cc0:	10800044 	addi	r2,r2,1
10002cc4:	183ffc26 	beq	r3,zero,10002cb8 <__alt_data_end+0xf8002cb8>
10002cc8:	01000044 	movi	r4,1
10002ccc:	00c00804 	movi	r3,32
10002cd0:	2089c83a 	sub	r4,r4,r2
10002cd4:	1887c83a 	sub	r3,r3,r2
10002cd8:	40c6d83a 	srl	r3,r8,r3
10002cdc:	5115883a 	add	r10,r10,r4
10002ce0:	4090983a 	sll	r8,r8,r2
10002ce4:	80e0b03a 	or	r16,r16,r3
10002ce8:	003f8806 	br	10002b0c <__alt_data_end+0xf8002b0c>
10002cec:	200d883a 	mov	r6,r4
10002cf0:	280f883a 	mov	r7,r5
10002cf4:	00055800 	call	10005580 <__muldf3>
10002cf8:	1009883a 	mov	r4,r2
10002cfc:	180b883a 	mov	r5,r3
10002d00:	880d883a 	mov	r6,r17
10002d04:	800f883a 	mov	r7,r16
10002d08:	00041200 	call	10004120 <__adddf3>
10002d0c:	003fce06 	br	10002c48 <__alt_data_end+0xf8002c48>
10002d10:	2005883a 	mov	r2,r4
10002d14:	2807883a 	mov	r3,r5
10002d18:	003fcb06 	br	10002c48 <__alt_data_end+0xf8002c48>
10002d1c:	583fb30e 	bge	r11,zero,10002bec <__alt_data_end+0xf8002bec>
10002d20:	0005883a 	mov	r2,zero
10002d24:	2819883a 	mov	r12,r5
10002d28:	003fab06 	br	10002bd8 <__alt_data_end+0xf8002bd8>
10002d2c:	4a400044 	addi	r9,r9,1
10002d30:	0005883a 	mov	r2,zero
10002d34:	003fbd06 	br	10002c2c <__alt_data_end+0xf8002c2c>
10002d38:	00c00804 	movi	r3,32
10002d3c:	01000044 	movi	r4,1
10002d40:	0005883a 	mov	r2,zero
10002d44:	003fe406 	br	10002cd8 <__alt_data_end+0xf8002cd8>
10002d48:	200d883a 	mov	r6,r4
10002d4c:	280f883a 	mov	r7,r5
10002d50:	0005dec0 	call	10005dec <__subdf3>
10002d54:	1009883a 	mov	r4,r2
10002d58:	180b883a 	mov	r5,r3
10002d5c:	100d883a 	mov	r6,r2
10002d60:	180f883a 	mov	r7,r3
10002d64:	00049bc0 	call	100049bc <__divdf3>
10002d68:	003fb706 	br	10002c48 <__alt_data_end+0xf8002c48>

10002d6c <fabs>:
10002d6c:	00e00034 	movhi	r3,32768
10002d70:	18ffffc4 	addi	r3,r3,-1
10002d74:	2005883a 	mov	r2,r4
10002d78:	28c6703a 	and	r3,r5,r3
10002d7c:	f800283a 	ret

10002d80 <finite>:
10002d80:	00a00034 	movhi	r2,32768
10002d84:	10bfffc4 	addi	r2,r2,-1
10002d88:	288a703a 	and	r5,r5,r2
10002d8c:	00e00434 	movhi	r3,32784
10002d90:	28c5883a 	add	r2,r5,r3
10002d94:	1004d7fa 	srli	r2,r2,31
10002d98:	f800283a 	ret

10002d9c <__fpclassifyd>:
10002d9c:	00a00034 	movhi	r2,32768
10002da0:	10bfffc4 	addi	r2,r2,-1
10002da4:	2884703a 	and	r2,r5,r2
10002da8:	10000726 	beq	r2,zero,10002dc8 <__fpclassifyd+0x2c>
10002dac:	00fffc34 	movhi	r3,65520
10002db0:	019ff834 	movhi	r6,32736
10002db4:	28c7883a 	add	r3,r5,r3
10002db8:	31bfffc4 	addi	r6,r6,-1
10002dbc:	30c00536 	bltu	r6,r3,10002dd4 <__fpclassifyd+0x38>
10002dc0:	00800104 	movi	r2,4
10002dc4:	f800283a 	ret
10002dc8:	2000021e 	bne	r4,zero,10002dd4 <__fpclassifyd+0x38>
10002dcc:	00800084 	movi	r2,2
10002dd0:	f800283a 	ret
10002dd4:	00dffc34 	movhi	r3,32752
10002dd8:	019ff834 	movhi	r6,32736
10002ddc:	28cb883a 	add	r5,r5,r3
10002de0:	31bfffc4 	addi	r6,r6,-1
10002de4:	317ff62e 	bgeu	r6,r5,10002dc0 <__alt_data_end+0xf8002dc0>
10002de8:	01400434 	movhi	r5,16
10002dec:	297fffc4 	addi	r5,r5,-1
10002df0:	28800236 	bltu	r5,r2,10002dfc <__fpclassifyd+0x60>
10002df4:	008000c4 	movi	r2,3
10002df8:	f800283a 	ret
10002dfc:	10c00226 	beq	r2,r3,10002e08 <__fpclassifyd+0x6c>
10002e00:	0005883a 	mov	r2,zero
10002e04:	f800283a 	ret
10002e08:	2005003a 	cmpeq	r2,r4,zero
10002e0c:	f800283a 	ret

10002e10 <matherr>:
10002e10:	0005883a 	mov	r2,zero
10002e14:	f800283a 	ret

10002e18 <nan>:
10002e18:	0005883a 	mov	r2,zero
10002e1c:	00dffe34 	movhi	r3,32760
10002e20:	f800283a 	ret

10002e24 <rint>:
10002e24:	2813d53a 	srai	r9,r5,20
10002e28:	defff904 	addi	sp,sp,-28
10002e2c:	dc400315 	stw	r17,12(sp)
10002e30:	4a41ffcc 	andi	r9,r9,2047
10002e34:	dfc00615 	stw	ra,24(sp)
10002e38:	dcc00515 	stw	r19,20(sp)
10002e3c:	dc800415 	stw	r18,16(sp)
10002e40:	dc000215 	stw	r16,8(sp)
10002e44:	02c004c4 	movi	r11,19
10002e48:	4abf0044 	addi	r10,r9,-1023
10002e4c:	2811883a 	mov	r8,r5
10002e50:	2005883a 	mov	r2,r4
10002e54:	280f883a 	mov	r7,r5
10002e58:	200d883a 	mov	r6,r4
10002e5c:	2822d7fa 	srli	r17,r5,31
10002e60:	5a801316 	blt	r11,r10,10002eb0 <rint+0x8c>
10002e64:	50003c16 	blt	r10,zero,10002f58 <rint+0x134>
10002e68:	00c00434 	movhi	r3,16
10002e6c:	18ffffc4 	addi	r3,r3,-1
10002e70:	1a87d83a 	sra	r3,r3,r10
10002e74:	1948703a 	and	r4,r3,r5
10002e78:	2088b03a 	or	r4,r4,r2
10002e7c:	20001026 	beq	r4,zero,10002ec0 <rint+0x9c>
10002e80:	1804d07a 	srli	r2,r3,1
10002e84:	1146703a 	and	r3,r2,r5
10002e88:	198cb03a 	or	r6,r3,r6
10002e8c:	30005526 	beq	r6,zero,10002fe4 <rint+0x1c0>
10002e90:	52c05b26 	beq	r10,r11,10003000 <rint+0x1dc>
10002e94:	000d883a 	mov	r6,zero
10002e98:	00c00134 	movhi	r3,4
10002e9c:	1a87d83a 	sra	r3,r3,r10
10002ea0:	0084303a 	nor	r2,zero,r2
10002ea4:	1210703a 	and	r8,r2,r8
10002ea8:	40ceb03a 	or	r7,r8,r3
10002eac:	00001906 	br	10002f14 <rint+0xf0>
10002eb0:	00c00cc4 	movi	r3,51
10002eb4:	1a800a0e 	bge	r3,r10,10002ee0 <rint+0xbc>
10002eb8:	00c10004 	movi	r3,1024
10002ebc:	50c04d26 	beq	r10,r3,10002ff4 <rint+0x1d0>
10002ec0:	3807883a 	mov	r3,r7
10002ec4:	dfc00617 	ldw	ra,24(sp)
10002ec8:	dcc00517 	ldw	r19,20(sp)
10002ecc:	dc800417 	ldw	r18,16(sp)
10002ed0:	dc400317 	ldw	r17,12(sp)
10002ed4:	dc000217 	ldw	r16,8(sp)
10002ed8:	dec00704 	addi	sp,sp,28
10002edc:	f800283a 	ret
10002ee0:	4a7efb44 	addi	r9,r9,-1043
10002ee4:	00ffffc4 	movi	r3,-1
10002ee8:	1a46d83a 	srl	r3,r3,r9
10002eec:	1908703a 	and	r4,r3,r4
10002ef0:	20003e26 	beq	r4,zero,10002fec <rint+0x1c8>
10002ef4:	1806d07a 	srli	r3,r3,1
10002ef8:	1884703a 	and	r2,r3,r2
10002efc:	10000526 	beq	r2,zero,10002f14 <rint+0xf0>
10002f00:	00900034 	movhi	r2,16384
10002f04:	1253d83a 	sra	r9,r2,r9
10002f08:	00c6303a 	nor	r3,zero,r3
10002f0c:	198c703a 	and	r6,r3,r6
10002f10:	324cb03a 	or	r6,r6,r9
10002f14:	882290fa 	slli	r17,r17,3
10002f18:	00c40074 	movhi	r3,4097
10002f1c:	18c96104 	addi	r3,r3,9604
10002f20:	1c63883a 	add	r17,r3,r17
10002f24:	8c800017 	ldw	r18,0(r17)
10002f28:	8c000117 	ldw	r16,4(r17)
10002f2c:	9009883a 	mov	r4,r18
10002f30:	800b883a 	mov	r5,r16
10002f34:	00041200 	call	10004120 <__adddf3>
10002f38:	d8800015 	stw	r2,0(sp)
10002f3c:	d8c00115 	stw	r3,4(sp)
10002f40:	d9000017 	ldw	r4,0(sp)
10002f44:	d9400117 	ldw	r5,4(sp)
10002f48:	900d883a 	mov	r6,r18
10002f4c:	800f883a 	mov	r7,r16
10002f50:	0005dec0 	call	10005dec <__subdf3>
10002f54:	003fdb06 	br	10002ec4 <__alt_data_end+0xf8002ec4>
10002f58:	04200034 	movhi	r16,32768
10002f5c:	843fffc4 	addi	r16,r16,-1
10002f60:	2c06703a 	and	r3,r5,r16
10002f64:	1906b03a 	or	r3,r3,r4
10002f68:	18002026 	beq	r3,zero,10002fec <rint+0x1c8>
10002f6c:	00c00434 	movhi	r3,16
10002f70:	18ffffc4 	addi	r3,r3,-1
10002f74:	28c6703a 	and	r3,r5,r3
10002f78:	1886b03a 	or	r3,r3,r2
10002f7c:	880890fa 	slli	r4,r17,3
10002f80:	00d3c83a 	sub	r9,zero,r3
10002f84:	48d2b03a 	or	r9,r9,r3
10002f88:	00c40074 	movhi	r3,4097
10002f8c:	18c96104 	addi	r3,r3,9604
10002f90:	1907883a 	add	r3,r3,r4
10002f94:	4812d33a 	srli	r9,r9,12
10002f98:	1cc00017 	ldw	r19,0(r3)
10002f9c:	1c800117 	ldw	r18,4(r3)
10002fa0:	4a40022c 	andhi	r9,r9,8
10002fa4:	29ffffac 	andhi	r7,r5,65534
10002fa8:	49ceb03a 	or	r7,r9,r7
10002fac:	9809883a 	mov	r4,r19
10002fb0:	900b883a 	mov	r5,r18
10002fb4:	00041200 	call	10004120 <__adddf3>
10002fb8:	d8800015 	stw	r2,0(sp)
10002fbc:	d8c00115 	stw	r3,4(sp)
10002fc0:	d9000017 	ldw	r4,0(sp)
10002fc4:	d9400117 	ldw	r5,4(sp)
10002fc8:	980d883a 	mov	r6,r19
10002fcc:	900f883a 	mov	r7,r18
10002fd0:	0005dec0 	call	10005dec <__subdf3>
10002fd4:	881097fa 	slli	r8,r17,31
10002fd8:	1c06703a 	and	r3,r3,r16
10002fdc:	40c6b03a 	or	r3,r8,r3
10002fe0:	003fb806 	br	10002ec4 <__alt_data_end+0xf8002ec4>
10002fe4:	000d883a 	mov	r6,zero
10002fe8:	003fca06 	br	10002f14 <__alt_data_end+0xf8002f14>
10002fec:	4007883a 	mov	r3,r8
10002ff0:	003fb406 	br	10002ec4 <__alt_data_end+0xf8002ec4>
10002ff4:	200d883a 	mov	r6,r4
10002ff8:	00041200 	call	10004120 <__adddf3>
10002ffc:	003fb106 	br	10002ec4 <__alt_data_end+0xf8002ec4>
10003000:	01a00034 	movhi	r6,32768
10003004:	003fa406 	br	10002e98 <__alt_data_end+0xf8002e98>

10003008 <scalbn>:
10003008:	2a1ffc2c 	andhi	r8,r5,32752
1000300c:	4011d53a 	srai	r8,r8,20
10003010:	defffe04 	addi	sp,sp,-8
10003014:	dc000015 	stw	r16,0(sp)
10003018:	dfc00115 	stw	ra,4(sp)
1000301c:	280f883a 	mov	r7,r5
10003020:	2015883a 	mov	r10,r4
10003024:	3021883a 	mov	r16,r6
10003028:	4000251e 	bne	r8,zero,100030c0 <scalbn+0xb8>
1000302c:	00a00034 	movhi	r2,32768
10003030:	10bfffc4 	addi	r2,r2,-1
10003034:	2884703a 	and	r2,r5,r2
10003038:	1104b03a 	or	r2,r2,r4
1000303c:	10003126 	beq	r2,zero,10003104 <scalbn+0xfc>
10003040:	01d0d434 	movhi	r7,17232
10003044:	000d883a 	mov	r6,zero
10003048:	00055800 	call	10005580 <__muldf3>
1000304c:	013ffff4 	movhi	r4,65535
10003050:	210f2c04 	addi	r4,r4,15536
10003054:	1015883a 	mov	r10,r2
10003058:	180f883a 	mov	r7,r3
1000305c:	81002f16 	blt	r16,r4,1000311c <scalbn+0x114>
10003060:	1a5ffc2c 	andhi	r9,r3,32752
10003064:	4813d53a 	srai	r9,r9,20
10003068:	0081ff84 	movi	r2,2046
1000306c:	180d883a 	mov	r6,r3
10003070:	4a3ff284 	addi	r8,r9,-54
10003074:	4411883a 	add	r8,r8,r16
10003078:	1200170e 	bge	r2,r8,100030d8 <scalbn+0xd0>
1000307c:	01220034 	movhi	r4,34816
10003080:	015f8e34 	movhi	r5,32312
10003084:	500d883a 	mov	r6,r10
10003088:	211d6704 	addi	r4,r4,30108
1000308c:	29790f04 	addi	r5,r5,-7108
10003090:	00031d40 	call	100031d4 <copysign>
10003094:	01a20034 	movhi	r6,34816
10003098:	01df8e34 	movhi	r7,32312
1000309c:	1009883a 	mov	r4,r2
100030a0:	180b883a 	mov	r5,r3
100030a4:	319d6704 	addi	r6,r6,30108
100030a8:	39f90f04 	addi	r7,r7,-7108
100030ac:	00055800 	call	10005580 <__muldf3>
100030b0:	dfc00117 	ldw	ra,4(sp)
100030b4:	dc000017 	ldw	r16,0(sp)
100030b8:	dec00204 	addi	sp,sp,8
100030bc:	f800283a 	ret
100030c0:	0081ffc4 	movi	r2,2047
100030c4:	280d883a 	mov	r6,r5
100030c8:	40803126 	beq	r8,r2,10003190 <scalbn+0x188>
100030cc:	4411883a 	add	r8,r8,r16
100030d0:	0081ff84 	movi	r2,2046
100030d4:	123fe916 	blt	r2,r8,1000307c <__alt_data_end+0xf800307c>
100030d8:	02001b0e 	bge	zero,r8,10003148 <scalbn+0x140>
100030dc:	4010953a 	slli	r8,r8,20
100030e0:	00e00434 	movhi	r3,32784
100030e4:	18ffffc4 	addi	r3,r3,-1
100030e8:	30ce703a 	and	r7,r6,r3
100030ec:	5005883a 	mov	r2,r10
100030f0:	41c6b03a 	or	r3,r8,r7
100030f4:	dfc00117 	ldw	ra,4(sp)
100030f8:	dc000017 	ldw	r16,0(sp)
100030fc:	dec00204 	addi	sp,sp,8
10003100:	f800283a 	ret
10003104:	2005883a 	mov	r2,r4
10003108:	2807883a 	mov	r3,r5
1000310c:	dfc00117 	ldw	ra,4(sp)
10003110:	dc000017 	ldw	r16,0(sp)
10003114:	dec00204 	addi	sp,sp,8
10003118:	f800283a 	ret
1000311c:	01b0be74 	movhi	r6,49913
10003120:	01c06974 	movhi	r7,421
10003124:	31bcd644 	addi	r6,r6,-3239
10003128:	39db87c4 	addi	r7,r7,28191
1000312c:	1009883a 	mov	r4,r2
10003130:	180b883a 	mov	r5,r3
10003134:	00055800 	call	10005580 <__muldf3>
10003138:	dfc00117 	ldw	ra,4(sp)
1000313c:	dc000017 	ldw	r16,0(sp)
10003140:	dec00204 	addi	sp,sp,8
10003144:	f800283a 	ret
10003148:	00bff2c4 	movi	r2,-53
1000314c:	4080160e 	bge	r8,r2,100031a8 <scalbn+0x1a0>
10003150:	00b0d414 	movui	r2,50000
10003154:	143fc916 	blt	r2,r16,1000307c <__alt_data_end+0xf800307c>
10003158:	0130be74 	movhi	r4,49913
1000315c:	01406974 	movhi	r5,421
10003160:	500d883a 	mov	r6,r10
10003164:	213cd644 	addi	r4,r4,-3239
10003168:	295b87c4 	addi	r5,r5,28191
1000316c:	00031d40 	call	100031d4 <copysign>
10003170:	01b0be74 	movhi	r6,49913
10003174:	01c06974 	movhi	r7,421
10003178:	1009883a 	mov	r4,r2
1000317c:	180b883a 	mov	r5,r3
10003180:	31bcd644 	addi	r6,r6,-3239
10003184:	39db87c4 	addi	r7,r7,28191
10003188:	00055800 	call	10005580 <__muldf3>
1000318c:	003fd906 	br	100030f4 <__alt_data_end+0xf80030f4>
10003190:	200d883a 	mov	r6,r4
10003194:	00041200 	call	10004120 <__adddf3>
10003198:	dfc00117 	ldw	ra,4(sp)
1000319c:	dc000017 	ldw	r16,0(sp)
100031a0:	dec00204 	addi	sp,sp,8
100031a4:	f800283a 	ret
100031a8:	42000d84 	addi	r8,r8,54
100031ac:	4012953a 	slli	r9,r8,20
100031b0:	01e00434 	movhi	r7,32784
100031b4:	39ffffc4 	addi	r7,r7,-1
100031b8:	31ca703a 	and	r5,r6,r7
100031bc:	5009883a 	mov	r4,r10
100031c0:	494ab03a 	or	r5,r9,r5
100031c4:	000d883a 	mov	r6,zero
100031c8:	01cf2434 	movhi	r7,15504
100031cc:	00055800 	call	10005580 <__muldf3>
100031d0:	003fc806 	br	100030f4 <__alt_data_end+0xf80030f4>

100031d4 <copysign>:
100031d4:	2005883a 	mov	r2,r4
100031d8:	01200034 	movhi	r4,32768
100031dc:	213fffc4 	addi	r4,r4,-1
100031e0:	38e0002c 	andhi	r3,r7,32768
100031e4:	290a703a 	and	r5,r5,r4
100031e8:	1946b03a 	or	r3,r3,r5
100031ec:	f800283a 	ret

100031f0 <__muldi3>:
100031f0:	defff604 	addi	sp,sp,-40
100031f4:	dd800615 	stw	r22,24(sp)
100031f8:	dd400515 	stw	r21,20(sp)
100031fc:	25bfffcc 	andi	r22,r4,65535
10003200:	357fffcc 	andi	r21,r6,65535
10003204:	dc400115 	stw	r17,4(sp)
10003208:	2022d43a 	srli	r17,r4,16
1000320c:	dcc00315 	stw	r19,12(sp)
10003210:	dc800215 	stw	r18,8(sp)
10003214:	2027883a 	mov	r19,r4
10003218:	2825883a 	mov	r18,r5
1000321c:	a809883a 	mov	r4,r21
10003220:	b00b883a 	mov	r5,r22
10003224:	dfc00915 	stw	ra,36(sp)
10003228:	df000815 	stw	fp,32(sp)
1000322c:	ddc00715 	stw	r23,28(sp)
10003230:	3839883a 	mov	fp,r7
10003234:	302ed43a 	srli	r23,r6,16
10003238:	dd000415 	stw	r20,16(sp)
1000323c:	dc000015 	stw	r16,0(sp)
10003240:	3029883a 	mov	r20,r6
10003244:	00040f80 	call	100040f8 <__mulsi3>
10003248:	a809883a 	mov	r4,r21
1000324c:	880b883a 	mov	r5,r17
10003250:	1021883a 	mov	r16,r2
10003254:	00040f80 	call	100040f8 <__mulsi3>
10003258:	880b883a 	mov	r5,r17
1000325c:	b809883a 	mov	r4,r23
10003260:	102b883a 	mov	r21,r2
10003264:	00040f80 	call	100040f8 <__mulsi3>
10003268:	b809883a 	mov	r4,r23
1000326c:	b00b883a 	mov	r5,r22
10003270:	1023883a 	mov	r17,r2
10003274:	00040f80 	call	100040f8 <__mulsi3>
10003278:	8012d43a 	srli	r9,r16,16
1000327c:	a885883a 	add	r2,r21,r2
10003280:	1251883a 	add	r8,r2,r9
10003284:	4540022e 	bgeu	r8,r21,10003290 <__muldi3+0xa0>
10003288:	00800074 	movhi	r2,1
1000328c:	88a3883a 	add	r17,r17,r2
10003290:	4006d43a 	srli	r3,r8,16
10003294:	4010943a 	slli	r8,r8,16
10003298:	9809883a 	mov	r4,r19
1000329c:	e00b883a 	mov	r5,fp
100032a0:	843fffcc 	andi	r16,r16,65535
100032a4:	88e3883a 	add	r17,r17,r3
100032a8:	4421883a 	add	r16,r8,r16
100032ac:	00040f80 	call	100040f8 <__mulsi3>
100032b0:	a009883a 	mov	r4,r20
100032b4:	900b883a 	mov	r5,r18
100032b8:	1027883a 	mov	r19,r2
100032bc:	00040f80 	call	100040f8 <__mulsi3>
100032c0:	9885883a 	add	r2,r19,r2
100032c4:	1447883a 	add	r3,r2,r17
100032c8:	8005883a 	mov	r2,r16
100032cc:	dfc00917 	ldw	ra,36(sp)
100032d0:	df000817 	ldw	fp,32(sp)
100032d4:	ddc00717 	ldw	r23,28(sp)
100032d8:	dd800617 	ldw	r22,24(sp)
100032dc:	dd400517 	ldw	r21,20(sp)
100032e0:	dd000417 	ldw	r20,16(sp)
100032e4:	dcc00317 	ldw	r19,12(sp)
100032e8:	dc800217 	ldw	r18,8(sp)
100032ec:	dc400117 	ldw	r17,4(sp)
100032f0:	dc000017 	ldw	r16,0(sp)
100032f4:	dec00a04 	addi	sp,sp,40
100032f8:	f800283a 	ret

100032fc <__fixunsdfsi>:
100032fc:	defffd04 	addi	sp,sp,-12
10003300:	000d883a 	mov	r6,zero
10003304:	01d07834 	movhi	r7,16864
10003308:	dc400115 	stw	r17,4(sp)
1000330c:	dc000015 	stw	r16,0(sp)
10003310:	dfc00215 	stw	ra,8(sp)
10003314:	2023883a 	mov	r17,r4
10003318:	2821883a 	mov	r16,r5
1000331c:	00053c00 	call	100053c0 <__gedf2>
10003320:	1000080e 	bge	r2,zero,10003344 <__fixunsdfsi+0x48>
10003324:	8809883a 	mov	r4,r17
10003328:	800b883a 	mov	r5,r16
1000332c:	00066bc0 	call	100066bc <__fixdfsi>
10003330:	dfc00217 	ldw	ra,8(sp)
10003334:	dc400117 	ldw	r17,4(sp)
10003338:	dc000017 	ldw	r16,0(sp)
1000333c:	dec00304 	addi	sp,sp,12
10003340:	f800283a 	ret
10003344:	000d883a 	mov	r6,zero
10003348:	01d07834 	movhi	r7,16864
1000334c:	8809883a 	mov	r4,r17
10003350:	800b883a 	mov	r5,r16
10003354:	0005dec0 	call	10005dec <__subdf3>
10003358:	180b883a 	mov	r5,r3
1000335c:	1009883a 	mov	r4,r2
10003360:	00066bc0 	call	100066bc <__fixdfsi>
10003364:	00e00034 	movhi	r3,32768
10003368:	10c5883a 	add	r2,r2,r3
1000336c:	003ff006 	br	10003330 <__alt_data_end+0xf8003330>

10003370 <__udivdi3>:
10003370:	defff504 	addi	sp,sp,-44
10003374:	dcc00415 	stw	r19,16(sp)
10003378:	dc000115 	stw	r16,4(sp)
1000337c:	dfc00a15 	stw	ra,40(sp)
10003380:	df000915 	stw	fp,36(sp)
10003384:	ddc00815 	stw	r23,32(sp)
10003388:	dd800715 	stw	r22,28(sp)
1000338c:	dd400615 	stw	r21,24(sp)
10003390:	dd000515 	stw	r20,20(sp)
10003394:	dc800315 	stw	r18,12(sp)
10003398:	dc400215 	stw	r17,8(sp)
1000339c:	2027883a 	mov	r19,r4
100033a0:	2821883a 	mov	r16,r5
100033a4:	3800471e 	bne	r7,zero,100034c4 <__udivdi3+0x154>
100033a8:	3025883a 	mov	r18,r6
100033ac:	2023883a 	mov	r17,r4
100033b0:	2980592e 	bgeu	r5,r6,10003518 <__udivdi3+0x1a8>
100033b4:	00bfffd4 	movui	r2,65535
100033b8:	2829883a 	mov	r20,r5
100033bc:	1180b236 	bltu	r2,r6,10003688 <__udivdi3+0x318>
100033c0:	00803fc4 	movi	r2,255
100033c4:	1181622e 	bgeu	r2,r6,10003950 <__udivdi3+0x5e0>
100033c8:	00800204 	movi	r2,8
100033cc:	1007883a 	mov	r3,r2
100033d0:	3084d83a 	srl	r2,r6,r2
100033d4:	01040074 	movhi	r4,4097
100033d8:	21096504 	addi	r4,r4,9620
100033dc:	2085883a 	add	r2,r4,r2
100033e0:	11000003 	ldbu	r4,0(r2)
100033e4:	20c9883a 	add	r4,r4,r3
100033e8:	00c00804 	movi	r3,32
100033ec:	1907c83a 	sub	r3,r3,r4
100033f0:	18000526 	beq	r3,zero,10003408 <__udivdi3+0x98>
100033f4:	80e0983a 	sll	r16,r16,r3
100033f8:	9908d83a 	srl	r4,r19,r4
100033fc:	30e4983a 	sll	r18,r6,r3
10003400:	98e2983a 	sll	r17,r19,r3
10003404:	8128b03a 	or	r20,r16,r4
10003408:	902ad43a 	srli	r21,r18,16
1000340c:	a009883a 	mov	r4,r20
10003410:	95bfffcc 	andi	r22,r18,65535
10003414:	a80b883a 	mov	r5,r21
10003418:	00040f00 	call	100040f0 <__umodsi3>
1000341c:	a009883a 	mov	r4,r20
10003420:	a80b883a 	mov	r5,r21
10003424:	102f883a 	mov	r23,r2
10003428:	00040e80 	call	100040e8 <__udivsi3>
1000342c:	1009883a 	mov	r4,r2
10003430:	b00b883a 	mov	r5,r22
10003434:	1021883a 	mov	r16,r2
10003438:	00040f80 	call	100040f8 <__mulsi3>
1000343c:	b82e943a 	slli	r23,r23,16
10003440:	8808d43a 	srli	r4,r17,16
10003444:	b906b03a 	or	r3,r23,r4
10003448:	1880052e 	bgeu	r3,r2,10003460 <__udivdi3+0xf0>
1000344c:	1c87883a 	add	r3,r3,r18
10003450:	813fffc4 	addi	r4,r16,-1
10003454:	1c800136 	bltu	r3,r18,1000345c <__udivdi3+0xec>
10003458:	18815236 	bltu	r3,r2,100039a4 <__udivdi3+0x634>
1000345c:	2021883a 	mov	r16,r4
10003460:	18a7c83a 	sub	r19,r3,r2
10003464:	9809883a 	mov	r4,r19
10003468:	a80b883a 	mov	r5,r21
1000346c:	00040f00 	call	100040f0 <__umodsi3>
10003470:	1029883a 	mov	r20,r2
10003474:	9809883a 	mov	r4,r19
10003478:	a80b883a 	mov	r5,r21
1000347c:	a028943a 	slli	r20,r20,16
10003480:	00040e80 	call	100040e8 <__udivsi3>
10003484:	1009883a 	mov	r4,r2
10003488:	b00b883a 	mov	r5,r22
1000348c:	8c7fffcc 	andi	r17,r17,65535
10003490:	1027883a 	mov	r19,r2
10003494:	a462b03a 	or	r17,r20,r17
10003498:	00040f80 	call	100040f8 <__mulsi3>
1000349c:	8880052e 	bgeu	r17,r2,100034b4 <__udivdi3+0x144>
100034a0:	8ca3883a 	add	r17,r17,r18
100034a4:	98ffffc4 	addi	r3,r19,-1
100034a8:	8c811036 	bltu	r17,r18,100038ec <__udivdi3+0x57c>
100034ac:	88810f2e 	bgeu	r17,r2,100038ec <__udivdi3+0x57c>
100034b0:	9cffff84 	addi	r19,r19,-2
100034b4:	8020943a 	slli	r16,r16,16
100034b8:	0007883a 	mov	r3,zero
100034bc:	9c04b03a 	or	r2,r19,r16
100034c0:	00006006 	br	10003644 <__udivdi3+0x2d4>
100034c4:	29c05d36 	bltu	r5,r7,1000363c <__udivdi3+0x2cc>
100034c8:	00bfffd4 	movui	r2,65535
100034cc:	11c0692e 	bgeu	r2,r7,10003674 <__udivdi3+0x304>
100034d0:	00804034 	movhi	r2,256
100034d4:	10bfffc4 	addi	r2,r2,-1
100034d8:	11c10e2e 	bgeu	r2,r7,10003914 <__udivdi3+0x5a4>
100034dc:	01400604 	movi	r5,24
100034e0:	2811883a 	mov	r8,r5
100034e4:	394ad83a 	srl	r5,r7,r5
100034e8:	00840074 	movhi	r2,4097
100034ec:	10896504 	addi	r2,r2,9620
100034f0:	114b883a 	add	r5,r2,r5
100034f4:	29400003 	ldbu	r5,0(r5)
100034f8:	00c00804 	movi	r3,32
100034fc:	2a0b883a 	add	r5,r5,r8
10003500:	196fc83a 	sub	r23,r3,r5
10003504:	b8006b1e 	bne	r23,zero,100036b4 <__udivdi3+0x344>
10003508:	3c011436 	bltu	r7,r16,1000395c <__udivdi3+0x5ec>
1000350c:	9985403a 	cmpgeu	r2,r19,r6
10003510:	0007883a 	mov	r3,zero
10003514:	00004b06 	br	10003644 <__udivdi3+0x2d4>
10003518:	3000041e 	bne	r6,zero,1000352c <__udivdi3+0x1bc>
1000351c:	01000044 	movi	r4,1
10003520:	000b883a 	mov	r5,zero
10003524:	00040e80 	call	100040e8 <__udivsi3>
10003528:	1025883a 	mov	r18,r2
1000352c:	00bfffd4 	movui	r2,65535
10003530:	14805b2e 	bgeu	r2,r18,100036a0 <__udivdi3+0x330>
10003534:	00804034 	movhi	r2,256
10003538:	10bfffc4 	addi	r2,r2,-1
1000353c:	1480fe2e 	bgeu	r2,r18,10003938 <__udivdi3+0x5c8>
10003540:	00800604 	movi	r2,24
10003544:	1007883a 	mov	r3,r2
10003548:	9084d83a 	srl	r2,r18,r2
1000354c:	01040074 	movhi	r4,4097
10003550:	21096504 	addi	r4,r4,9620
10003554:	2085883a 	add	r2,r4,r2
10003558:	11800003 	ldbu	r6,0(r2)
1000355c:	01c00804 	movi	r7,32
10003560:	30c7883a 	add	r3,r6,r3
10003564:	38cfc83a 	sub	r7,r7,r3
10003568:	3800a71e 	bne	r7,zero,10003808 <__udivdi3+0x498>
1000356c:	9028d43a 	srli	r20,r18,16
10003570:	84a1c83a 	sub	r16,r16,r18
10003574:	957fffcc 	andi	r21,r18,65535
10003578:	00c00044 	movi	r3,1
1000357c:	8009883a 	mov	r4,r16
10003580:	a00b883a 	mov	r5,r20
10003584:	d8c00015 	stw	r3,0(sp)
10003588:	00040f00 	call	100040f0 <__umodsi3>
1000358c:	8009883a 	mov	r4,r16
10003590:	a00b883a 	mov	r5,r20
10003594:	102d883a 	mov	r22,r2
10003598:	00040e80 	call	100040e8 <__udivsi3>
1000359c:	1009883a 	mov	r4,r2
100035a0:	a80b883a 	mov	r5,r21
100035a4:	1021883a 	mov	r16,r2
100035a8:	00040f80 	call	100040f8 <__mulsi3>
100035ac:	b02c943a 	slli	r22,r22,16
100035b0:	880ed43a 	srli	r7,r17,16
100035b4:	d8c00017 	ldw	r3,0(sp)
100035b8:	b1ccb03a 	or	r6,r22,r7
100035bc:	3080052e 	bgeu	r6,r2,100035d4 <__udivdi3+0x264>
100035c0:	348d883a 	add	r6,r6,r18
100035c4:	813fffc4 	addi	r4,r16,-1
100035c8:	34800136 	bltu	r6,r18,100035d0 <__udivdi3+0x260>
100035cc:	3080f236 	bltu	r6,r2,10003998 <__udivdi3+0x628>
100035d0:	2021883a 	mov	r16,r4
100035d4:	30a7c83a 	sub	r19,r6,r2
100035d8:	9809883a 	mov	r4,r19
100035dc:	a00b883a 	mov	r5,r20
100035e0:	d8c00015 	stw	r3,0(sp)
100035e4:	00040f00 	call	100040f0 <__umodsi3>
100035e8:	102d883a 	mov	r22,r2
100035ec:	9809883a 	mov	r4,r19
100035f0:	a00b883a 	mov	r5,r20
100035f4:	b02c943a 	slli	r22,r22,16
100035f8:	00040e80 	call	100040e8 <__udivsi3>
100035fc:	1009883a 	mov	r4,r2
10003600:	a80b883a 	mov	r5,r21
10003604:	8c7fffcc 	andi	r17,r17,65535
10003608:	1027883a 	mov	r19,r2
1000360c:	b462b03a 	or	r17,r22,r17
10003610:	00040f80 	call	100040f8 <__mulsi3>
10003614:	d8c00017 	ldw	r3,0(sp)
10003618:	8880052e 	bgeu	r17,r2,10003630 <__udivdi3+0x2c0>
1000361c:	8ca3883a 	add	r17,r17,r18
10003620:	993fffc4 	addi	r4,r19,-1
10003624:	8c80af36 	bltu	r17,r18,100038e4 <__udivdi3+0x574>
10003628:	8880ae2e 	bgeu	r17,r2,100038e4 <__udivdi3+0x574>
1000362c:	9cffff84 	addi	r19,r19,-2
10003630:	8020943a 	slli	r16,r16,16
10003634:	9c04b03a 	or	r2,r19,r16
10003638:	00000206 	br	10003644 <__udivdi3+0x2d4>
1000363c:	0007883a 	mov	r3,zero
10003640:	0005883a 	mov	r2,zero
10003644:	dfc00a17 	ldw	ra,40(sp)
10003648:	df000917 	ldw	fp,36(sp)
1000364c:	ddc00817 	ldw	r23,32(sp)
10003650:	dd800717 	ldw	r22,28(sp)
10003654:	dd400617 	ldw	r21,24(sp)
10003658:	dd000517 	ldw	r20,20(sp)
1000365c:	dcc00417 	ldw	r19,16(sp)
10003660:	dc800317 	ldw	r18,12(sp)
10003664:	dc400217 	ldw	r17,8(sp)
10003668:	dc000117 	ldw	r16,4(sp)
1000366c:	dec00b04 	addi	sp,sp,44
10003670:	f800283a 	ret
10003674:	00803fc4 	movi	r2,255
10003678:	11c0a92e 	bgeu	r2,r7,10003920 <__udivdi3+0x5b0>
1000367c:	01400204 	movi	r5,8
10003680:	2811883a 	mov	r8,r5
10003684:	003f9706 	br	100034e4 <__alt_data_end+0xf80034e4>
10003688:	00804034 	movhi	r2,256
1000368c:	10bfffc4 	addi	r2,r2,-1
10003690:	1180a62e 	bgeu	r2,r6,1000392c <__udivdi3+0x5bc>
10003694:	00800604 	movi	r2,24
10003698:	1007883a 	mov	r3,r2
1000369c:	003f4c06 	br	100033d0 <__alt_data_end+0xf80033d0>
100036a0:	00803fc4 	movi	r2,255
100036a4:	1480a72e 	bgeu	r2,r18,10003944 <__udivdi3+0x5d4>
100036a8:	00800204 	movi	r2,8
100036ac:	1007883a 	mov	r3,r2
100036b0:	003fa506 	br	10003548 <__alt_data_end+0xf8003548>
100036b4:	3178d83a 	srl	fp,r6,r5
100036b8:	3dce983a 	sll	r7,r7,r23
100036bc:	8168d83a 	srl	r20,r16,r5
100036c0:	9950d83a 	srl	r8,r19,r5
100036c4:	3f38b03a 	or	fp,r7,fp
100036c8:	e024d43a 	srli	r18,fp,16
100036cc:	85e0983a 	sll	r16,r16,r23
100036d0:	a009883a 	mov	r4,r20
100036d4:	900b883a 	mov	r5,r18
100036d8:	8220b03a 	or	r16,r16,r8
100036dc:	35ea983a 	sll	r21,r6,r23
100036e0:	00040f00 	call	100040f0 <__umodsi3>
100036e4:	a009883a 	mov	r4,r20
100036e8:	900b883a 	mov	r5,r18
100036ec:	1023883a 	mov	r17,r2
100036f0:	e5bfffcc 	andi	r22,fp,65535
100036f4:	00040e80 	call	100040e8 <__udivsi3>
100036f8:	1009883a 	mov	r4,r2
100036fc:	b00b883a 	mov	r5,r22
10003700:	1029883a 	mov	r20,r2
10003704:	00040f80 	call	100040f8 <__mulsi3>
10003708:	8806943a 	slli	r3,r17,16
1000370c:	8014d43a 	srli	r10,r16,16
10003710:	1a92b03a 	or	r9,r3,r10
10003714:	4880042e 	bgeu	r9,r2,10003728 <__udivdi3+0x3b8>
10003718:	4f13883a 	add	r9,r9,fp
1000371c:	a0ffffc4 	addi	r3,r20,-1
10003720:	4f00952e 	bgeu	r9,fp,10003978 <__udivdi3+0x608>
10003724:	1829883a 	mov	r20,r3
10003728:	48a3c83a 	sub	r17,r9,r2
1000372c:	8809883a 	mov	r4,r17
10003730:	900b883a 	mov	r5,r18
10003734:	00040f00 	call	100040f0 <__umodsi3>
10003738:	8809883a 	mov	r4,r17
1000373c:	900b883a 	mov	r5,r18
10003740:	d8800015 	stw	r2,0(sp)
10003744:	00040e80 	call	100040e8 <__udivsi3>
10003748:	1009883a 	mov	r4,r2
1000374c:	b00b883a 	mov	r5,r22
10003750:	1023883a 	mov	r17,r2
10003754:	00040f80 	call	100040f8 <__mulsi3>
10003758:	d8c00017 	ldw	r3,0(sp)
1000375c:	823fffcc 	andi	r8,r16,65535
10003760:	1806943a 	slli	r3,r3,16
10003764:	1a20b03a 	or	r16,r3,r8
10003768:	8080042e 	bgeu	r16,r2,1000377c <__udivdi3+0x40c>
1000376c:	8721883a 	add	r16,r16,fp
10003770:	88ffffc4 	addi	r3,r17,-1
10003774:	87007c2e 	bgeu	r16,fp,10003968 <__udivdi3+0x5f8>
10003778:	1823883a 	mov	r17,r3
1000377c:	a028943a 	slli	r20,r20,16
10003780:	acbfffcc 	andi	r18,r21,65535
10003784:	900b883a 	mov	r5,r18
10003788:	8d28b03a 	or	r20,r17,r20
1000378c:	a022d43a 	srli	r17,r20,16
10003790:	a5bfffcc 	andi	r22,r20,65535
10003794:	b009883a 	mov	r4,r22
10003798:	a82ad43a 	srli	r21,r21,16
1000379c:	80a1c83a 	sub	r16,r16,r2
100037a0:	00040f80 	call	100040f8 <__mulsi3>
100037a4:	8809883a 	mov	r4,r17
100037a8:	900b883a 	mov	r5,r18
100037ac:	1039883a 	mov	fp,r2
100037b0:	00040f80 	call	100040f8 <__mulsi3>
100037b4:	8809883a 	mov	r4,r17
100037b8:	a80b883a 	mov	r5,r21
100037bc:	1025883a 	mov	r18,r2
100037c0:	00040f80 	call	100040f8 <__mulsi3>
100037c4:	b009883a 	mov	r4,r22
100037c8:	a80b883a 	mov	r5,r21
100037cc:	1023883a 	mov	r17,r2
100037d0:	00040f80 	call	100040f8 <__mulsi3>
100037d4:	e006d43a 	srli	r3,fp,16
100037d8:	9085883a 	add	r2,r18,r2
100037dc:	10c7883a 	add	r3,r2,r3
100037e0:	1c80022e 	bgeu	r3,r18,100037ec <__udivdi3+0x47c>
100037e4:	00800074 	movhi	r2,1
100037e8:	88a3883a 	add	r17,r17,r2
100037ec:	1808d43a 	srli	r4,r3,16
100037f0:	8909883a 	add	r4,r17,r4
100037f4:	81004436 	bltu	r16,r4,10003908 <__udivdi3+0x598>
100037f8:	81003e26 	beq	r16,r4,100038f4 <__udivdi3+0x584>
100037fc:	a005883a 	mov	r2,r20
10003800:	0007883a 	mov	r3,zero
10003804:	003f8f06 	br	10003644 <__alt_data_end+0xf8003644>
10003808:	91e4983a 	sll	r18,r18,r7
1000380c:	80eed83a 	srl	r23,r16,r3
10003810:	81cc983a 	sll	r6,r16,r7
10003814:	9028d43a 	srli	r20,r18,16
10003818:	98c6d83a 	srl	r3,r19,r3
1000381c:	b809883a 	mov	r4,r23
10003820:	a00b883a 	mov	r5,r20
10003824:	30ecb03a 	or	r22,r6,r3
10003828:	99e2983a 	sll	r17,r19,r7
1000382c:	00040f00 	call	100040f0 <__umodsi3>
10003830:	b809883a 	mov	r4,r23
10003834:	a00b883a 	mov	r5,r20
10003838:	1021883a 	mov	r16,r2
1000383c:	957fffcc 	andi	r21,r18,65535
10003840:	00040e80 	call	100040e8 <__udivsi3>
10003844:	a80b883a 	mov	r5,r21
10003848:	1009883a 	mov	r4,r2
1000384c:	102f883a 	mov	r23,r2
10003850:	00040f80 	call	100040f8 <__mulsi3>
10003854:	8020943a 	slli	r16,r16,16
10003858:	b00ad43a 	srli	r5,r22,16
1000385c:	814cb03a 	or	r6,r16,r5
10003860:	3080062e 	bgeu	r6,r2,1000387c <__udivdi3+0x50c>
10003864:	348d883a 	add	r6,r6,r18
10003868:	b8ffffc4 	addi	r3,r23,-1
1000386c:	34804836 	bltu	r6,r18,10003990 <__udivdi3+0x620>
10003870:	3080472e 	bgeu	r6,r2,10003990 <__udivdi3+0x620>
10003874:	bdffff84 	addi	r23,r23,-2
10003878:	348d883a 	add	r6,r6,r18
1000387c:	30a7c83a 	sub	r19,r6,r2
10003880:	9809883a 	mov	r4,r19
10003884:	a00b883a 	mov	r5,r20
10003888:	00040f00 	call	100040f0 <__umodsi3>
1000388c:	9809883a 	mov	r4,r19
10003890:	a00b883a 	mov	r5,r20
10003894:	1039883a 	mov	fp,r2
10003898:	00040e80 	call	100040e8 <__udivsi3>
1000389c:	1009883a 	mov	r4,r2
100038a0:	a80b883a 	mov	r5,r21
100038a4:	e038943a 	slli	fp,fp,16
100038a8:	1027883a 	mov	r19,r2
100038ac:	00040f80 	call	100040f8 <__mulsi3>
100038b0:	b1bfffcc 	andi	r6,r22,65535
100038b4:	e18cb03a 	or	r6,fp,r6
100038b8:	3080062e 	bgeu	r6,r2,100038d4 <__udivdi3+0x564>
100038bc:	348d883a 	add	r6,r6,r18
100038c0:	98ffffc4 	addi	r3,r19,-1
100038c4:	34803036 	bltu	r6,r18,10003988 <__udivdi3+0x618>
100038c8:	30802f2e 	bgeu	r6,r2,10003988 <__udivdi3+0x618>
100038cc:	9cffff84 	addi	r19,r19,-2
100038d0:	348d883a 	add	r6,r6,r18
100038d4:	b82e943a 	slli	r23,r23,16
100038d8:	30a1c83a 	sub	r16,r6,r2
100038dc:	9dc6b03a 	or	r3,r19,r23
100038e0:	003f2606 	br	1000357c <__alt_data_end+0xf800357c>
100038e4:	2027883a 	mov	r19,r4
100038e8:	003f5106 	br	10003630 <__alt_data_end+0xf8003630>
100038ec:	1827883a 	mov	r19,r3
100038f0:	003ef006 	br	100034b4 <__alt_data_end+0xf80034b4>
100038f4:	1808943a 	slli	r4,r3,16
100038f8:	9dc6983a 	sll	r3,r19,r23
100038fc:	e73fffcc 	andi	fp,fp,65535
10003900:	2709883a 	add	r4,r4,fp
10003904:	193fbd2e 	bgeu	r3,r4,100037fc <__alt_data_end+0xf80037fc>
10003908:	a0bfffc4 	addi	r2,r20,-1
1000390c:	0007883a 	mov	r3,zero
10003910:	003f4c06 	br	10003644 <__alt_data_end+0xf8003644>
10003914:	01400404 	movi	r5,16
10003918:	2811883a 	mov	r8,r5
1000391c:	003ef106 	br	100034e4 <__alt_data_end+0xf80034e4>
10003920:	000b883a 	mov	r5,zero
10003924:	0011883a 	mov	r8,zero
10003928:	003eee06 	br	100034e4 <__alt_data_end+0xf80034e4>
1000392c:	00800404 	movi	r2,16
10003930:	1007883a 	mov	r3,r2
10003934:	003ea606 	br	100033d0 <__alt_data_end+0xf80033d0>
10003938:	00800404 	movi	r2,16
1000393c:	1007883a 	mov	r3,r2
10003940:	003f0106 	br	10003548 <__alt_data_end+0xf8003548>
10003944:	0005883a 	mov	r2,zero
10003948:	0007883a 	mov	r3,zero
1000394c:	003efe06 	br	10003548 <__alt_data_end+0xf8003548>
10003950:	0005883a 	mov	r2,zero
10003954:	0007883a 	mov	r3,zero
10003958:	003e9d06 	br	100033d0 <__alt_data_end+0xf80033d0>
1000395c:	0007883a 	mov	r3,zero
10003960:	00800044 	movi	r2,1
10003964:	003f3706 	br	10003644 <__alt_data_end+0xf8003644>
10003968:	80bf832e 	bgeu	r16,r2,10003778 <__alt_data_end+0xf8003778>
1000396c:	8c7fff84 	addi	r17,r17,-2
10003970:	8721883a 	add	r16,r16,fp
10003974:	003f8106 	br	1000377c <__alt_data_end+0xf800377c>
10003978:	48bf6a2e 	bgeu	r9,r2,10003724 <__alt_data_end+0xf8003724>
1000397c:	a53fff84 	addi	r20,r20,-2
10003980:	4f13883a 	add	r9,r9,fp
10003984:	003f6806 	br	10003728 <__alt_data_end+0xf8003728>
10003988:	1827883a 	mov	r19,r3
1000398c:	003fd106 	br	100038d4 <__alt_data_end+0xf80038d4>
10003990:	182f883a 	mov	r23,r3
10003994:	003fb906 	br	1000387c <__alt_data_end+0xf800387c>
10003998:	843fff84 	addi	r16,r16,-2
1000399c:	348d883a 	add	r6,r6,r18
100039a0:	003f0c06 	br	100035d4 <__alt_data_end+0xf80035d4>
100039a4:	843fff84 	addi	r16,r16,-2
100039a8:	1c87883a 	add	r3,r3,r18
100039ac:	003eac06 	br	10003460 <__alt_data_end+0xf8003460>

100039b0 <__umoddi3>:
100039b0:	defff404 	addi	sp,sp,-48
100039b4:	dd800815 	stw	r22,32(sp)
100039b8:	dc400315 	stw	r17,12(sp)
100039bc:	dc000215 	stw	r16,8(sp)
100039c0:	dfc00b15 	stw	ra,44(sp)
100039c4:	df000a15 	stw	fp,40(sp)
100039c8:	ddc00915 	stw	r23,36(sp)
100039cc:	dd400715 	stw	r21,28(sp)
100039d0:	dd000615 	stw	r20,24(sp)
100039d4:	dcc00515 	stw	r19,20(sp)
100039d8:	dc800415 	stw	r18,16(sp)
100039dc:	2021883a 	mov	r16,r4
100039e0:	2823883a 	mov	r17,r5
100039e4:	282d883a 	mov	r22,r5
100039e8:	38003c1e 	bne	r7,zero,10003adc <__umoddi3+0x12c>
100039ec:	3027883a 	mov	r19,r6
100039f0:	2029883a 	mov	r20,r4
100039f4:	2980522e 	bgeu	r5,r6,10003b40 <__umoddi3+0x190>
100039f8:	00bfffd4 	movui	r2,65535
100039fc:	1180a436 	bltu	r2,r6,10003c90 <__umoddi3+0x2e0>
10003a00:	00803fc4 	movi	r2,255
10003a04:	11815e2e 	bgeu	r2,r6,10003f80 <__umoddi3+0x5d0>
10003a08:	01400204 	movi	r5,8
10003a0c:	2805883a 	mov	r2,r5
10003a10:	314ad83a 	srl	r5,r6,r5
10003a14:	00c40074 	movhi	r3,4097
10003a18:	18c96504 	addi	r3,r3,9620
10003a1c:	194b883a 	add	r5,r3,r5
10003a20:	29000003 	ldbu	r4,0(r5)
10003a24:	2089883a 	add	r4,r4,r2
10003a28:	00800804 	movi	r2,32
10003a2c:	1105c83a 	sub	r2,r2,r4
10003a30:	10010c26 	beq	r2,zero,10003e64 <__umoddi3+0x4b4>
10003a34:	88a2983a 	sll	r17,r17,r2
10003a38:	8108d83a 	srl	r4,r16,r4
10003a3c:	30a6983a 	sll	r19,r6,r2
10003a40:	80a8983a 	sll	r20,r16,r2
10003a44:	1025883a 	mov	r18,r2
10003a48:	892cb03a 	or	r22,r17,r4
10003a4c:	9822d43a 	srli	r17,r19,16
10003a50:	b009883a 	mov	r4,r22
10003a54:	9d7fffcc 	andi	r21,r19,65535
10003a58:	880b883a 	mov	r5,r17
10003a5c:	00040f00 	call	100040f0 <__umodsi3>
10003a60:	b009883a 	mov	r4,r22
10003a64:	880b883a 	mov	r5,r17
10003a68:	102f883a 	mov	r23,r2
10003a6c:	00040e80 	call	100040e8 <__udivsi3>
10003a70:	1009883a 	mov	r4,r2
10003a74:	a80b883a 	mov	r5,r21
10003a78:	00040f80 	call	100040f8 <__mulsi3>
10003a7c:	b82e943a 	slli	r23,r23,16
10003a80:	a008d43a 	srli	r4,r20,16
10003a84:	b906b03a 	or	r3,r23,r4
10003a88:	1880042e 	bgeu	r3,r2,10003a9c <__umoddi3+0xec>
10003a8c:	1cc7883a 	add	r3,r3,r19
10003a90:	1cc00236 	bltu	r3,r19,10003a9c <__umoddi3+0xec>
10003a94:	1880012e 	bgeu	r3,r2,10003a9c <__umoddi3+0xec>
10003a98:	1cc7883a 	add	r3,r3,r19
10003a9c:	18a1c83a 	sub	r16,r3,r2
10003aa0:	8009883a 	mov	r4,r16
10003aa4:	880b883a 	mov	r5,r17
10003aa8:	00040f00 	call	100040f0 <__umodsi3>
10003aac:	8009883a 	mov	r4,r16
10003ab0:	880b883a 	mov	r5,r17
10003ab4:	102d883a 	mov	r22,r2
10003ab8:	00040e80 	call	100040e8 <__udivsi3>
10003abc:	1009883a 	mov	r4,r2
10003ac0:	a80b883a 	mov	r5,r21
10003ac4:	b02c943a 	slli	r22,r22,16
10003ac8:	00040f80 	call	100040f8 <__mulsi3>
10003acc:	a13fffcc 	andi	r4,r20,65535
10003ad0:	b106b03a 	or	r3,r22,r4
10003ad4:	1880572e 	bgeu	r3,r2,10003c34 <__umoddi3+0x284>
10003ad8:	00005206 	br	10003c24 <__umoddi3+0x274>
10003adc:	29c05936 	bltu	r5,r7,10003c44 <__umoddi3+0x294>
10003ae0:	00bfffd4 	movui	r2,65535
10003ae4:	11c0652e 	bgeu	r2,r7,10003c7c <__umoddi3+0x2cc>
10003ae8:	00804034 	movhi	r2,256
10003aec:	10bfffc4 	addi	r2,r2,-1
10003af0:	11c1172e 	bgeu	r2,r7,10003f50 <__umoddi3+0x5a0>
10003af4:	01400604 	movi	r5,24
10003af8:	282b883a 	mov	r21,r5
10003afc:	394ad83a 	srl	r5,r7,r5
10003b00:	00c40074 	movhi	r3,4097
10003b04:	18c96504 	addi	r3,r3,9620
10003b08:	194b883a 	add	r5,r3,r5
10003b0c:	28800003 	ldbu	r2,0(r5)
10003b10:	00c00804 	movi	r3,32
10003b14:	156b883a 	add	r21,r2,r21
10003b18:	1d69c83a 	sub	r20,r3,r21
10003b1c:	a000671e 	bne	r20,zero,10003cbc <__umoddi3+0x30c>
10003b20:	3c400136 	bltu	r7,r17,10003b28 <__umoddi3+0x178>
10003b24:	81812336 	bltu	r16,r6,10003fb4 <__umoddi3+0x604>
10003b28:	8185c83a 	sub	r2,r16,r6
10003b2c:	89e3c83a 	sub	r17,r17,r7
10003b30:	8087803a 	cmpltu	r3,r16,r2
10003b34:	88edc83a 	sub	r22,r17,r3
10003b38:	b007883a 	mov	r3,r22
10003b3c:	00004306 	br	10003c4c <__umoddi3+0x29c>
10003b40:	3000041e 	bne	r6,zero,10003b54 <__umoddi3+0x1a4>
10003b44:	01000044 	movi	r4,1
10003b48:	000b883a 	mov	r5,zero
10003b4c:	00040e80 	call	100040e8 <__udivsi3>
10003b50:	1027883a 	mov	r19,r2
10003b54:	00bfffd4 	movui	r2,65535
10003b58:	14c0532e 	bgeu	r2,r19,10003ca8 <__umoddi3+0x2f8>
10003b5c:	00804034 	movhi	r2,256
10003b60:	10bfffc4 	addi	r2,r2,-1
10003b64:	14c1032e 	bgeu	r2,r19,10003f74 <__umoddi3+0x5c4>
10003b68:	00800604 	movi	r2,24
10003b6c:	1007883a 	mov	r3,r2
10003b70:	9884d83a 	srl	r2,r19,r2
10003b74:	01040074 	movhi	r4,4097
10003b78:	21096504 	addi	r4,r4,9620
10003b7c:	2085883a 	add	r2,r4,r2
10003b80:	11000003 	ldbu	r4,0(r2)
10003b84:	00800804 	movi	r2,32
10003b88:	20c7883a 	add	r3,r4,r3
10003b8c:	10c5c83a 	sub	r2,r2,r3
10003b90:	1000b61e 	bne	r2,zero,10003e6c <__umoddi3+0x4bc>
10003b94:	982ad43a 	srli	r21,r19,16
10003b98:	8ce3c83a 	sub	r17,r17,r19
10003b9c:	9dbfffcc 	andi	r22,r19,65535
10003ba0:	0025883a 	mov	r18,zero
10003ba4:	8809883a 	mov	r4,r17
10003ba8:	a80b883a 	mov	r5,r21
10003bac:	00040f00 	call	100040f0 <__umodsi3>
10003bb0:	8809883a 	mov	r4,r17
10003bb4:	a80b883a 	mov	r5,r21
10003bb8:	102f883a 	mov	r23,r2
10003bbc:	00040e80 	call	100040e8 <__udivsi3>
10003bc0:	1009883a 	mov	r4,r2
10003bc4:	b00b883a 	mov	r5,r22
10003bc8:	00040f80 	call	100040f8 <__mulsi3>
10003bcc:	b82e943a 	slli	r23,r23,16
10003bd0:	a008d43a 	srli	r4,r20,16
10003bd4:	b906b03a 	or	r3,r23,r4
10003bd8:	1880032e 	bgeu	r3,r2,10003be8 <__umoddi3+0x238>
10003bdc:	1cc7883a 	add	r3,r3,r19
10003be0:	1cc00136 	bltu	r3,r19,10003be8 <__umoddi3+0x238>
10003be4:	1880f136 	bltu	r3,r2,10003fac <__umoddi3+0x5fc>
10003be8:	18a1c83a 	sub	r16,r3,r2
10003bec:	8009883a 	mov	r4,r16
10003bf0:	a80b883a 	mov	r5,r21
10003bf4:	00040f00 	call	100040f0 <__umodsi3>
10003bf8:	8009883a 	mov	r4,r16
10003bfc:	a80b883a 	mov	r5,r21
10003c00:	1023883a 	mov	r17,r2
10003c04:	00040e80 	call	100040e8 <__udivsi3>
10003c08:	1009883a 	mov	r4,r2
10003c0c:	b00b883a 	mov	r5,r22
10003c10:	8822943a 	slli	r17,r17,16
10003c14:	00040f80 	call	100040f8 <__mulsi3>
10003c18:	a13fffcc 	andi	r4,r20,65535
10003c1c:	8906b03a 	or	r3,r17,r4
10003c20:	1880042e 	bgeu	r3,r2,10003c34 <__umoddi3+0x284>
10003c24:	1cc7883a 	add	r3,r3,r19
10003c28:	1cc00236 	bltu	r3,r19,10003c34 <__umoddi3+0x284>
10003c2c:	1880012e 	bgeu	r3,r2,10003c34 <__umoddi3+0x284>
10003c30:	1cc7883a 	add	r3,r3,r19
10003c34:	1887c83a 	sub	r3,r3,r2
10003c38:	1c84d83a 	srl	r2,r3,r18
10003c3c:	0007883a 	mov	r3,zero
10003c40:	00000206 	br	10003c4c <__umoddi3+0x29c>
10003c44:	2005883a 	mov	r2,r4
10003c48:	2807883a 	mov	r3,r5
10003c4c:	dfc00b17 	ldw	ra,44(sp)
10003c50:	df000a17 	ldw	fp,40(sp)
10003c54:	ddc00917 	ldw	r23,36(sp)
10003c58:	dd800817 	ldw	r22,32(sp)
10003c5c:	dd400717 	ldw	r21,28(sp)
10003c60:	dd000617 	ldw	r20,24(sp)
10003c64:	dcc00517 	ldw	r19,20(sp)
10003c68:	dc800417 	ldw	r18,16(sp)
10003c6c:	dc400317 	ldw	r17,12(sp)
10003c70:	dc000217 	ldw	r16,8(sp)
10003c74:	dec00c04 	addi	sp,sp,48
10003c78:	f800283a 	ret
10003c7c:	00803fc4 	movi	r2,255
10003c80:	11c0b02e 	bgeu	r2,r7,10003f44 <__umoddi3+0x594>
10003c84:	01400204 	movi	r5,8
10003c88:	282b883a 	mov	r21,r5
10003c8c:	003f9b06 	br	10003afc <__alt_data_end+0xf8003afc>
10003c90:	00804034 	movhi	r2,256
10003c94:	10bfffc4 	addi	r2,r2,-1
10003c98:	1180b02e 	bgeu	r2,r6,10003f5c <__umoddi3+0x5ac>
10003c9c:	01400604 	movi	r5,24
10003ca0:	2805883a 	mov	r2,r5
10003ca4:	003f5a06 	br	10003a10 <__alt_data_end+0xf8003a10>
10003ca8:	00803fc4 	movi	r2,255
10003cac:	14c0ae2e 	bgeu	r2,r19,10003f68 <__umoddi3+0x5b8>
10003cb0:	00800204 	movi	r2,8
10003cb4:	1007883a 	mov	r3,r2
10003cb8:	003fad06 	br	10003b70 <__alt_data_end+0xf8003b70>
10003cbc:	3d0a983a 	sll	r5,r7,r20
10003cc0:	356cd83a 	srl	r22,r6,r21
10003cc4:	8d78d83a 	srl	fp,r17,r21
10003cc8:	8d10983a 	sll	r8,r17,r20
10003ccc:	2dacb03a 	or	r22,r5,r22
10003cd0:	b02ed43a 	srli	r23,r22,16
10003cd4:	8564d83a 	srl	r18,r16,r21
10003cd8:	e009883a 	mov	r4,fp
10003cdc:	b80b883a 	mov	r5,r23
10003ce0:	44a4b03a 	or	r18,r8,r18
10003ce4:	3526983a 	sll	r19,r6,r20
10003ce8:	00040f00 	call	100040f0 <__umodsi3>
10003cec:	e009883a 	mov	r4,fp
10003cf0:	b80b883a 	mov	r5,r23
10003cf4:	b47fffcc 	andi	r17,r22,65535
10003cf8:	d8800015 	stw	r2,0(sp)
10003cfc:	00040e80 	call	100040e8 <__udivsi3>
10003d00:	1009883a 	mov	r4,r2
10003d04:	880b883a 	mov	r5,r17
10003d08:	1039883a 	mov	fp,r2
10003d0c:	00040f80 	call	100040f8 <__mulsi3>
10003d10:	d9800017 	ldw	r6,0(sp)
10003d14:	9008d43a 	srli	r4,r18,16
10003d18:	8520983a 	sll	r16,r16,r20
10003d1c:	300c943a 	slli	r6,r6,16
10003d20:	3106b03a 	or	r3,r6,r4
10003d24:	1880042e 	bgeu	r3,r2,10003d38 <__umoddi3+0x388>
10003d28:	1d87883a 	add	r3,r3,r22
10003d2c:	e13fffc4 	addi	r4,fp,-1
10003d30:	1d809a2e 	bgeu	r3,r22,10003f9c <__umoddi3+0x5ec>
10003d34:	2039883a 	mov	fp,r4
10003d38:	1887c83a 	sub	r3,r3,r2
10003d3c:	1809883a 	mov	r4,r3
10003d40:	b80b883a 	mov	r5,r23
10003d44:	d8c00115 	stw	r3,4(sp)
10003d48:	00040f00 	call	100040f0 <__umodsi3>
10003d4c:	d8c00117 	ldw	r3,4(sp)
10003d50:	b80b883a 	mov	r5,r23
10003d54:	d8800015 	stw	r2,0(sp)
10003d58:	1809883a 	mov	r4,r3
10003d5c:	00040e80 	call	100040e8 <__udivsi3>
10003d60:	880b883a 	mov	r5,r17
10003d64:	1009883a 	mov	r4,r2
10003d68:	102f883a 	mov	r23,r2
10003d6c:	00040f80 	call	100040f8 <__mulsi3>
10003d70:	d9800017 	ldw	r6,0(sp)
10003d74:	947fffcc 	andi	r17,r18,65535
10003d78:	300c943a 	slli	r6,r6,16
10003d7c:	3464b03a 	or	r18,r6,r17
10003d80:	9080042e 	bgeu	r18,r2,10003d94 <__umoddi3+0x3e4>
10003d84:	95a5883a 	add	r18,r18,r22
10003d88:	b8ffffc4 	addi	r3,r23,-1
10003d8c:	95807f2e 	bgeu	r18,r22,10003f8c <__umoddi3+0x5dc>
10003d90:	182f883a 	mov	r23,r3
10003d94:	e038943a 	slli	fp,fp,16
10003d98:	980cd43a 	srli	r6,r19,16
10003d9c:	98ffffcc 	andi	r3,r19,65535
10003da0:	bf38b03a 	or	fp,r23,fp
10003da4:	e02ed43a 	srli	r23,fp,16
10003da8:	e73fffcc 	andi	fp,fp,65535
10003dac:	180b883a 	mov	r5,r3
10003db0:	e009883a 	mov	r4,fp
10003db4:	d9800015 	stw	r6,0(sp)
10003db8:	d8c00115 	stw	r3,4(sp)
10003dbc:	90a5c83a 	sub	r18,r18,r2
10003dc0:	00040f80 	call	100040f8 <__mulsi3>
10003dc4:	d8c00117 	ldw	r3,4(sp)
10003dc8:	b809883a 	mov	r4,r23
10003dcc:	1023883a 	mov	r17,r2
10003dd0:	180b883a 	mov	r5,r3
10003dd4:	00040f80 	call	100040f8 <__mulsi3>
10003dd8:	d9800017 	ldw	r6,0(sp)
10003ddc:	b809883a 	mov	r4,r23
10003de0:	d8800115 	stw	r2,4(sp)
10003de4:	300b883a 	mov	r5,r6
10003de8:	302f883a 	mov	r23,r6
10003dec:	00040f80 	call	100040f8 <__mulsi3>
10003df0:	e009883a 	mov	r4,fp
10003df4:	b80b883a 	mov	r5,r23
10003df8:	d8800015 	stw	r2,0(sp)
10003dfc:	00040f80 	call	100040f8 <__mulsi3>
10003e00:	d8c00117 	ldw	r3,4(sp)
10003e04:	880cd43a 	srli	r6,r17,16
10003e08:	d9c00017 	ldw	r7,0(sp)
10003e0c:	1885883a 	add	r2,r3,r2
10003e10:	118d883a 	add	r6,r2,r6
10003e14:	30c0022e 	bgeu	r6,r3,10003e20 <__umoddi3+0x470>
10003e18:	00800074 	movhi	r2,1
10003e1c:	388f883a 	add	r7,r7,r2
10003e20:	3006d43a 	srli	r3,r6,16
10003e24:	300c943a 	slli	r6,r6,16
10003e28:	8c7fffcc 	andi	r17,r17,65535
10003e2c:	38c7883a 	add	r3,r7,r3
10003e30:	3463883a 	add	r17,r6,r17
10003e34:	90c03d36 	bltu	r18,r3,10003f2c <__umoddi3+0x57c>
10003e38:	90c06026 	beq	r18,r3,10003fbc <__umoddi3+0x60c>
10003e3c:	90c9c83a 	sub	r4,r18,r3
10003e40:	880f883a 	mov	r7,r17
10003e44:	81cfc83a 	sub	r7,r16,r7
10003e48:	81c7803a 	cmpltu	r3,r16,r7
10003e4c:	20c7c83a 	sub	r3,r4,r3
10003e50:	1d44983a 	sll	r2,r3,r21
10003e54:	3d0ed83a 	srl	r7,r7,r20
10003e58:	1d06d83a 	srl	r3,r3,r20
10003e5c:	11c4b03a 	or	r2,r2,r7
10003e60:	003f7a06 	br	10003c4c <__alt_data_end+0xf8003c4c>
10003e64:	0025883a 	mov	r18,zero
10003e68:	003ef806 	br	10003a4c <__alt_data_end+0xf8003a4c>
10003e6c:	98a6983a 	sll	r19,r19,r2
10003e70:	88e8d83a 	srl	r20,r17,r3
10003e74:	80c6d83a 	srl	r3,r16,r3
10003e78:	982ad43a 	srli	r21,r19,16
10003e7c:	88a2983a 	sll	r17,r17,r2
10003e80:	a009883a 	mov	r4,r20
10003e84:	a80b883a 	mov	r5,r21
10003e88:	88eeb03a 	or	r23,r17,r3
10003e8c:	1025883a 	mov	r18,r2
10003e90:	00040f00 	call	100040f0 <__umodsi3>
10003e94:	a009883a 	mov	r4,r20
10003e98:	a80b883a 	mov	r5,r21
10003e9c:	1023883a 	mov	r17,r2
10003ea0:	9dbfffcc 	andi	r22,r19,65535
10003ea4:	00040e80 	call	100040e8 <__udivsi3>
10003ea8:	1009883a 	mov	r4,r2
10003eac:	b00b883a 	mov	r5,r22
10003eb0:	00040f80 	call	100040f8 <__mulsi3>
10003eb4:	8822943a 	slli	r17,r17,16
10003eb8:	b808d43a 	srli	r4,r23,16
10003ebc:	84a8983a 	sll	r20,r16,r18
10003ec0:	8906b03a 	or	r3,r17,r4
10003ec4:	1880042e 	bgeu	r3,r2,10003ed8 <__umoddi3+0x528>
10003ec8:	1cc7883a 	add	r3,r3,r19
10003ecc:	1cc00236 	bltu	r3,r19,10003ed8 <__umoddi3+0x528>
10003ed0:	1880012e 	bgeu	r3,r2,10003ed8 <__umoddi3+0x528>
10003ed4:	1cc7883a 	add	r3,r3,r19
10003ed8:	18a1c83a 	sub	r16,r3,r2
10003edc:	8009883a 	mov	r4,r16
10003ee0:	a80b883a 	mov	r5,r21
10003ee4:	00040f00 	call	100040f0 <__umodsi3>
10003ee8:	8009883a 	mov	r4,r16
10003eec:	a80b883a 	mov	r5,r21
10003ef0:	1039883a 	mov	fp,r2
10003ef4:	00040e80 	call	100040e8 <__udivsi3>
10003ef8:	1009883a 	mov	r4,r2
10003efc:	b00b883a 	mov	r5,r22
10003f00:	00040f80 	call	100040f8 <__mulsi3>
10003f04:	e006943a 	slli	r3,fp,16
10003f08:	b93fffcc 	andi	r4,r23,65535
10003f0c:	1906b03a 	or	r3,r3,r4
10003f10:	1880042e 	bgeu	r3,r2,10003f24 <__umoddi3+0x574>
10003f14:	1cc7883a 	add	r3,r3,r19
10003f18:	1cc00236 	bltu	r3,r19,10003f24 <__umoddi3+0x574>
10003f1c:	1880012e 	bgeu	r3,r2,10003f24 <__umoddi3+0x574>
10003f20:	1cc7883a 	add	r3,r3,r19
10003f24:	18a3c83a 	sub	r17,r3,r2
10003f28:	003f1e06 	br	10003ba4 <__alt_data_end+0xf8003ba4>
10003f2c:	8ccfc83a 	sub	r7,r17,r19
10003f30:	1d89c83a 	sub	r4,r3,r22
10003f34:	89e3803a 	cmpltu	r17,r17,r7
10003f38:	2463c83a 	sub	r17,r4,r17
10003f3c:	9449c83a 	sub	r4,r18,r17
10003f40:	003fc006 	br	10003e44 <__alt_data_end+0xf8003e44>
10003f44:	000b883a 	mov	r5,zero
10003f48:	002b883a 	mov	r21,zero
10003f4c:	003eeb06 	br	10003afc <__alt_data_end+0xf8003afc>
10003f50:	01400404 	movi	r5,16
10003f54:	282b883a 	mov	r21,r5
10003f58:	003ee806 	br	10003afc <__alt_data_end+0xf8003afc>
10003f5c:	01400404 	movi	r5,16
10003f60:	2805883a 	mov	r2,r5
10003f64:	003eaa06 	br	10003a10 <__alt_data_end+0xf8003a10>
10003f68:	0005883a 	mov	r2,zero
10003f6c:	0007883a 	mov	r3,zero
10003f70:	003eff06 	br	10003b70 <__alt_data_end+0xf8003b70>
10003f74:	00800404 	movi	r2,16
10003f78:	1007883a 	mov	r3,r2
10003f7c:	003efc06 	br	10003b70 <__alt_data_end+0xf8003b70>
10003f80:	000b883a 	mov	r5,zero
10003f84:	0005883a 	mov	r2,zero
10003f88:	003ea106 	br	10003a10 <__alt_data_end+0xf8003a10>
10003f8c:	90bf802e 	bgeu	r18,r2,10003d90 <__alt_data_end+0xf8003d90>
10003f90:	bdffff84 	addi	r23,r23,-2
10003f94:	95a5883a 	add	r18,r18,r22
10003f98:	003f7e06 	br	10003d94 <__alt_data_end+0xf8003d94>
10003f9c:	18bf652e 	bgeu	r3,r2,10003d34 <__alt_data_end+0xf8003d34>
10003fa0:	e73fff84 	addi	fp,fp,-2
10003fa4:	1d87883a 	add	r3,r3,r22
10003fa8:	003f6306 	br	10003d38 <__alt_data_end+0xf8003d38>
10003fac:	1cc7883a 	add	r3,r3,r19
10003fb0:	003f0d06 	br	10003be8 <__alt_data_end+0xf8003be8>
10003fb4:	8005883a 	mov	r2,r16
10003fb8:	003edf06 	br	10003b38 <__alt_data_end+0xf8003b38>
10003fbc:	847fdb36 	bltu	r16,r17,10003f2c <__alt_data_end+0xf8003f2c>
10003fc0:	880f883a 	mov	r7,r17
10003fc4:	0009883a 	mov	r4,zero
10003fc8:	003f9e06 	br	10003e44 <__alt_data_end+0xf8003e44>

10003fcc <udivmodsi4>:
10003fcc:	2900182e 	bgeu	r5,r4,10004030 <udivmodsi4+0x64>
10003fd0:	28001716 	blt	r5,zero,10004030 <udivmodsi4+0x64>
10003fd4:	00800804 	movi	r2,32
10003fd8:	00c00044 	movi	r3,1
10003fdc:	00000206 	br	10003fe8 <udivmodsi4+0x1c>
10003fe0:	10001126 	beq	r2,zero,10004028 <udivmodsi4+0x5c>
10003fe4:	28000516 	blt	r5,zero,10003ffc <udivmodsi4+0x30>
10003fe8:	294b883a 	add	r5,r5,r5
10003fec:	10bfffc4 	addi	r2,r2,-1
10003ff0:	18c7883a 	add	r3,r3,r3
10003ff4:	293ffa36 	bltu	r5,r4,10003fe0 <__alt_data_end+0xf8003fe0>
10003ff8:	18000b26 	beq	r3,zero,10004028 <udivmodsi4+0x5c>
10003ffc:	0005883a 	mov	r2,zero
10004000:	21400236 	bltu	r4,r5,1000400c <udivmodsi4+0x40>
10004004:	2149c83a 	sub	r4,r4,r5
10004008:	10c4b03a 	or	r2,r2,r3
1000400c:	1806d07a 	srli	r3,r3,1
10004010:	280ad07a 	srli	r5,r5,1
10004014:	183ffa1e 	bne	r3,zero,10004000 <__alt_data_end+0xf8004000>
10004018:	3000011e 	bne	r6,zero,10004020 <udivmodsi4+0x54>
1000401c:	f800283a 	ret
10004020:	2005883a 	mov	r2,r4
10004024:	f800283a 	ret
10004028:	0005883a 	mov	r2,zero
1000402c:	003ffa06 	br	10004018 <__alt_data_end+0xf8004018>
10004030:	00c00044 	movi	r3,1
10004034:	003ff106 	br	10003ffc <__alt_data_end+0xf8003ffc>

10004038 <__divsi3>:
10004038:	defffe04 	addi	sp,sp,-8
1000403c:	dfc00115 	stw	ra,4(sp)
10004040:	dc000015 	stw	r16,0(sp)
10004044:	20000b16 	blt	r4,zero,10004074 <__divsi3+0x3c>
10004048:	0021883a 	mov	r16,zero
1000404c:	28000c16 	blt	r5,zero,10004080 <__divsi3+0x48>
10004050:	000d883a 	mov	r6,zero
10004054:	0003fcc0 	call	10003fcc <udivmodsi4>
10004058:	0407c83a 	sub	r3,zero,r16
1000405c:	1884f03a 	xor	r2,r3,r2
10004060:	1405883a 	add	r2,r2,r16
10004064:	dfc00117 	ldw	ra,4(sp)
10004068:	dc000017 	ldw	r16,0(sp)
1000406c:	dec00204 	addi	sp,sp,8
10004070:	f800283a 	ret
10004074:	0109c83a 	sub	r4,zero,r4
10004078:	04000044 	movi	r16,1
1000407c:	283ff40e 	bge	r5,zero,10004050 <__alt_data_end+0xf8004050>
10004080:	014bc83a 	sub	r5,zero,r5
10004084:	8400005c 	xori	r16,r16,1
10004088:	003ff106 	br	10004050 <__alt_data_end+0xf8004050>

1000408c <__modsi3>:
1000408c:	defffd04 	addi	sp,sp,-12
10004090:	dfc00215 	stw	ra,8(sp)
10004094:	dc400115 	stw	r17,4(sp)
10004098:	dc000015 	stw	r16,0(sp)
1000409c:	20000c16 	blt	r4,zero,100040d0 <__modsi3+0x44>
100040a0:	0023883a 	mov	r17,zero
100040a4:	0021883a 	mov	r16,zero
100040a8:	28000d16 	blt	r5,zero,100040e0 <__modsi3+0x54>
100040ac:	01800044 	movi	r6,1
100040b0:	0003fcc0 	call	10003fcc <udivmodsi4>
100040b4:	1404f03a 	xor	r2,r2,r16
100040b8:	8885883a 	add	r2,r17,r2
100040bc:	dfc00217 	ldw	ra,8(sp)
100040c0:	dc400117 	ldw	r17,4(sp)
100040c4:	dc000017 	ldw	r16,0(sp)
100040c8:	dec00304 	addi	sp,sp,12
100040cc:	f800283a 	ret
100040d0:	0109c83a 	sub	r4,zero,r4
100040d4:	04400044 	movi	r17,1
100040d8:	043fffc4 	movi	r16,-1
100040dc:	283ff30e 	bge	r5,zero,100040ac <__alt_data_end+0xf80040ac>
100040e0:	014bc83a 	sub	r5,zero,r5
100040e4:	003ff106 	br	100040ac <__alt_data_end+0xf80040ac>

100040e8 <__udivsi3>:
100040e8:	000d883a 	mov	r6,zero
100040ec:	0003fcc1 	jmpi	10003fcc <udivmodsi4>

100040f0 <__umodsi3>:
100040f0:	01800044 	movi	r6,1
100040f4:	0003fcc1 	jmpi	10003fcc <udivmodsi4>

100040f8 <__mulsi3>:
100040f8:	0005883a 	mov	r2,zero
100040fc:	20000726 	beq	r4,zero,1000411c <__mulsi3+0x24>
10004100:	20c0004c 	andi	r3,r4,1
10004104:	2008d07a 	srli	r4,r4,1
10004108:	18000126 	beq	r3,zero,10004110 <__mulsi3+0x18>
1000410c:	1145883a 	add	r2,r2,r5
10004110:	294b883a 	add	r5,r5,r5
10004114:	203ffa1e 	bne	r4,zero,10004100 <__alt_data_end+0xf8004100>
10004118:	f800283a 	ret
1000411c:	f800283a 	ret

10004120 <__adddf3>:
10004120:	02000434 	movhi	r8,16
10004124:	423fffc4 	addi	r8,r8,-1
10004128:	defffb04 	addi	sp,sp,-20
1000412c:	2a12703a 	and	r9,r5,r8
10004130:	2806d7fa 	srli	r3,r5,31
10004134:	3a10703a 	and	r8,r7,r8
10004138:	3804d53a 	srli	r2,r7,20
1000413c:	3014d77a 	srli	r10,r6,29
10004140:	dc000015 	stw	r16,0(sp)
10004144:	481290fa 	slli	r9,r9,3
10004148:	2820d53a 	srli	r16,r5,20
1000414c:	401090fa 	slli	r8,r8,3
10004150:	200ad77a 	srli	r5,r4,29
10004154:	380ed7fa 	srli	r7,r7,31
10004158:	dc800215 	stw	r18,8(sp)
1000415c:	dc400115 	stw	r17,4(sp)
10004160:	dfc00415 	stw	ra,16(sp)
10004164:	dcc00315 	stw	r19,12(sp)
10004168:	1c803fcc 	andi	r18,r3,255
1000416c:	8401ffcc 	andi	r16,r16,2047
10004170:	494ab03a 	or	r5,r9,r5
10004174:	202290fa 	slli	r17,r4,3
10004178:	1081ffcc 	andi	r2,r2,2047
1000417c:	4290b03a 	or	r8,r8,r10
10004180:	300c90fa 	slli	r6,r6,3
10004184:	91c07026 	beq	r18,r7,10004348 <__adddf3+0x228>
10004188:	8087c83a 	sub	r3,r16,r2
1000418c:	00c0b30e 	bge	zero,r3,1000445c <__adddf3+0x33c>
10004190:	10002a1e 	bne	r2,zero,1000423c <__adddf3+0x11c>
10004194:	4184b03a 	or	r2,r8,r6
10004198:	1000991e 	bne	r2,zero,10004400 <__adddf3+0x2e0>
1000419c:	888001cc 	andi	r2,r17,7
100041a0:	10005b26 	beq	r2,zero,10004310 <__adddf3+0x1f0>
100041a4:	88c003cc 	andi	r3,r17,15
100041a8:	00800104 	movi	r2,4
100041ac:	18805826 	beq	r3,r2,10004310 <__adddf3+0x1f0>
100041b0:	89800104 	addi	r6,r17,4
100041b4:	3463803a 	cmpltu	r17,r6,r17
100041b8:	2c4b883a 	add	r5,r5,r17
100041bc:	2880202c 	andhi	r2,r5,128
100041c0:	9007883a 	mov	r3,r18
100041c4:	3023883a 	mov	r17,r6
100041c8:	10005426 	beq	r2,zero,1000431c <__adddf3+0x1fc>
100041cc:	84000044 	addi	r16,r16,1
100041d0:	0081ffc4 	movi	r2,2047
100041d4:	8080c126 	beq	r16,r2,100044dc <__adddf3+0x3bc>
100041d8:	013fe034 	movhi	r4,65408
100041dc:	213fffc4 	addi	r4,r4,-1
100041e0:	290a703a 	and	r5,r5,r4
100041e4:	2804977a 	slli	r2,r5,29
100041e8:	280a927a 	slli	r5,r5,9
100041ec:	8822d0fa 	srli	r17,r17,3
100041f0:	8401ffcc 	andi	r16,r16,2047
100041f4:	2808d33a 	srli	r4,r5,12
100041f8:	1444b03a 	or	r2,r2,r17
100041fc:	8401ffcc 	andi	r16,r16,2047
10004200:	800a953a 	slli	r5,r16,20
10004204:	18c03fcc 	andi	r3,r3,255
10004208:	04000434 	movhi	r16,16
1000420c:	180697fa 	slli	r3,r3,31
10004210:	843fffc4 	addi	r16,r16,-1
10004214:	2420703a 	and	r16,r4,r16
10004218:	8160b03a 	or	r16,r16,r5
1000421c:	80c6b03a 	or	r3,r16,r3
10004220:	dfc00417 	ldw	ra,16(sp)
10004224:	dcc00317 	ldw	r19,12(sp)
10004228:	dc800217 	ldw	r18,8(sp)
1000422c:	dc400117 	ldw	r17,4(sp)
10004230:	dc000017 	ldw	r16,0(sp)
10004234:	dec00504 	addi	sp,sp,20
10004238:	f800283a 	ret
1000423c:	0081ffc4 	movi	r2,2047
10004240:	80bfd626 	beq	r16,r2,1000419c <__alt_data_end+0xf800419c>
10004244:	42002034 	orhi	r8,r8,128
10004248:	00800e04 	movi	r2,56
1000424c:	10c0a616 	blt	r2,r3,100044e8 <__adddf3+0x3c8>
10004250:	008007c4 	movi	r2,31
10004254:	10c0c916 	blt	r2,r3,1000457c <__adddf3+0x45c>
10004258:	00800804 	movi	r2,32
1000425c:	10c5c83a 	sub	r2,r2,r3
10004260:	408e983a 	sll	r7,r8,r2
10004264:	30c8d83a 	srl	r4,r6,r3
10004268:	3084983a 	sll	r2,r6,r2
1000426c:	40c6d83a 	srl	r3,r8,r3
10004270:	390cb03a 	or	r6,r7,r4
10004274:	1004c03a 	cmpne	r2,r2,zero
10004278:	308cb03a 	or	r6,r6,r2
1000427c:	898dc83a 	sub	r6,r17,r6
10004280:	89a3803a 	cmpltu	r17,r17,r6
10004284:	28cbc83a 	sub	r5,r5,r3
10004288:	2c4bc83a 	sub	r5,r5,r17
1000428c:	3023883a 	mov	r17,r6
10004290:	2880202c 	andhi	r2,r5,128
10004294:	10006d26 	beq	r2,zero,1000444c <__adddf3+0x32c>
10004298:	04c02034 	movhi	r19,128
1000429c:	9cffffc4 	addi	r19,r19,-1
100042a0:	2ce6703a 	and	r19,r5,r19
100042a4:	98007e26 	beq	r19,zero,100044a0 <__adddf3+0x380>
100042a8:	9809883a 	mov	r4,r19
100042ac:	00068b80 	call	100068b8 <__clzsi2>
100042b0:	10fffe04 	addi	r3,r2,-8
100042b4:	010007c4 	movi	r4,31
100042b8:	20c07f16 	blt	r4,r3,100044b8 <__adddf3+0x398>
100042bc:	01400a04 	movi	r5,40
100042c0:	2885c83a 	sub	r2,r5,r2
100042c4:	888ad83a 	srl	r5,r17,r2
100042c8:	98e6983a 	sll	r19,r19,r3
100042cc:	88e2983a 	sll	r17,r17,r3
100042d0:	2ce6b03a 	or	r19,r5,r19
100042d4:	1c007c16 	blt	r3,r16,100044c8 <__adddf3+0x3a8>
100042d8:	1c21c83a 	sub	r16,r3,r16
100042dc:	81400044 	addi	r5,r16,1
100042e0:	00c007c4 	movi	r3,31
100042e4:	19409816 	blt	r3,r5,10004548 <__adddf3+0x428>
100042e8:	1c21c83a 	sub	r16,r3,r16
100042ec:	8c08983a 	sll	r4,r17,r16
100042f0:	8946d83a 	srl	r3,r17,r5
100042f4:	9c20983a 	sll	r16,r19,r16
100042f8:	2008c03a 	cmpne	r4,r4,zero
100042fc:	994ad83a 	srl	r5,r19,r5
10004300:	1c06b03a 	or	r3,r3,r16
10004304:	1922b03a 	or	r17,r3,r4
10004308:	0021883a 	mov	r16,zero
1000430c:	003fa306 	br	1000419c <__alt_data_end+0xf800419c>
10004310:	2880202c 	andhi	r2,r5,128
10004314:	9007883a 	mov	r3,r18
10004318:	103fac1e 	bne	r2,zero,100041cc <__alt_data_end+0xf80041cc>
1000431c:	2804977a 	slli	r2,r5,29
10004320:	8822d0fa 	srli	r17,r17,3
10004324:	0101ffc4 	movi	r4,2047
10004328:	280ad0fa 	srli	r5,r5,3
1000432c:	1444b03a 	or	r2,r2,r17
10004330:	81002c26 	beq	r16,r4,100043e4 <__adddf3+0x2c4>
10004334:	8120703a 	and	r16,r16,r4
10004338:	01000434 	movhi	r4,16
1000433c:	213fffc4 	addi	r4,r4,-1
10004340:	2908703a 	and	r4,r5,r4
10004344:	003fad06 	br	100041fc <__alt_data_end+0xf80041fc>
10004348:	8089c83a 	sub	r4,r16,r2
1000434c:	01006a0e 	bge	zero,r4,100044f8 <__adddf3+0x3d8>
10004350:	10003326 	beq	r2,zero,10004420 <__adddf3+0x300>
10004354:	0081ffc4 	movi	r2,2047
10004358:	80bf9026 	beq	r16,r2,1000419c <__alt_data_end+0xf800419c>
1000435c:	42002034 	orhi	r8,r8,128
10004360:	00800e04 	movi	r2,56
10004364:	1100b116 	blt	r2,r4,1000462c <__adddf3+0x50c>
10004368:	008007c4 	movi	r2,31
1000436c:	1100e216 	blt	r2,r4,100046f8 <__adddf3+0x5d8>
10004370:	00800804 	movi	r2,32
10004374:	1105c83a 	sub	r2,r2,r4
10004378:	4092983a 	sll	r9,r8,r2
1000437c:	310ed83a 	srl	r7,r6,r4
10004380:	3084983a 	sll	r2,r6,r2
10004384:	4110d83a 	srl	r8,r8,r4
10004388:	49ccb03a 	or	r6,r9,r7
1000438c:	1004c03a 	cmpne	r2,r2,zero
10004390:	308cb03a 	or	r6,r6,r2
10004394:	344d883a 	add	r6,r6,r17
10004398:	3463803a 	cmpltu	r17,r6,r17
1000439c:	414b883a 	add	r5,r8,r5
100043a0:	2c4b883a 	add	r5,r5,r17
100043a4:	3023883a 	mov	r17,r6
100043a8:	2880202c 	andhi	r2,r5,128
100043ac:	10002726 	beq	r2,zero,1000444c <__adddf3+0x32c>
100043b0:	84000044 	addi	r16,r16,1
100043b4:	0081ffc4 	movi	r2,2047
100043b8:	8080ae26 	beq	r16,r2,10004674 <__adddf3+0x554>
100043bc:	00bfe034 	movhi	r2,65408
100043c0:	10bfffc4 	addi	r2,r2,-1
100043c4:	288a703a 	and	r5,r5,r2
100043c8:	880cd07a 	srli	r6,r17,1
100043cc:	280897fa 	slli	r4,r5,31
100043d0:	88c0004c 	andi	r3,r17,1
100043d4:	30e2b03a 	or	r17,r6,r3
100043d8:	280ad07a 	srli	r5,r5,1
100043dc:	8922b03a 	or	r17,r17,r4
100043e0:	003f6e06 	br	1000419c <__alt_data_end+0xf800419c>
100043e4:	1148b03a 	or	r4,r2,r5
100043e8:	20003c26 	beq	r4,zero,100044dc <__adddf3+0x3bc>
100043ec:	29000234 	orhi	r4,r5,8
100043f0:	01400434 	movhi	r5,16
100043f4:	297fffc4 	addi	r5,r5,-1
100043f8:	2148703a 	and	r4,r4,r5
100043fc:	003f7f06 	br	100041fc <__alt_data_end+0xf80041fc>
10004400:	18ffffc4 	addi	r3,r3,-1
10004404:	18004d1e 	bne	r3,zero,1000453c <__adddf3+0x41c>
10004408:	898dc83a 	sub	r6,r17,r6
1000440c:	89a3803a 	cmpltu	r17,r17,r6
10004410:	2a0bc83a 	sub	r5,r5,r8
10004414:	2c4bc83a 	sub	r5,r5,r17
10004418:	3023883a 	mov	r17,r6
1000441c:	003f9c06 	br	10004290 <__alt_data_end+0xf8004290>
10004420:	4184b03a 	or	r2,r8,r6
10004424:	103f5d26 	beq	r2,zero,1000419c <__alt_data_end+0xf800419c>
10004428:	213fffc4 	addi	r4,r4,-1
1000442c:	203fd926 	beq	r4,zero,10004394 <__alt_data_end+0xf8004394>
10004430:	0081ffc4 	movi	r2,2047
10004434:	80bfca1e 	bne	r16,r2,10004360 <__alt_data_end+0xf8004360>
10004438:	003f5806 	br	1000419c <__alt_data_end+0xf800419c>
1000443c:	10c8b03a 	or	r4,r2,r3
10004440:	20008b26 	beq	r4,zero,10004670 <__adddf3+0x550>
10004444:	100b883a 	mov	r5,r2
10004448:	1823883a 	mov	r17,r3
1000444c:	888001cc 	andi	r2,r17,7
10004450:	103f541e 	bne	r2,zero,100041a4 <__alt_data_end+0xf80041a4>
10004454:	9007883a 	mov	r3,r18
10004458:	003fb006 	br	1000431c <__alt_data_end+0xf800431c>
1000445c:	1800531e 	bne	r3,zero,100045ac <__adddf3+0x48c>
10004460:	80800044 	addi	r2,r16,1
10004464:	1081ffcc 	andi	r2,r2,2047
10004468:	00c00044 	movi	r3,1
1000446c:	1880990e 	bge	r3,r2,100046d4 <__adddf3+0x5b4>
10004470:	8985c83a 	sub	r2,r17,r6
10004474:	8887803a 	cmpltu	r3,r17,r2
10004478:	2a27c83a 	sub	r19,r5,r8
1000447c:	98e7c83a 	sub	r19,r19,r3
10004480:	98c0202c 	andhi	r3,r19,128
10004484:	18006226 	beq	r3,zero,10004610 <__adddf3+0x4f0>
10004488:	3463c83a 	sub	r17,r6,r17
1000448c:	4151c83a 	sub	r8,r8,r5
10004490:	344d803a 	cmpltu	r6,r6,r17
10004494:	41a7c83a 	sub	r19,r8,r6
10004498:	3825883a 	mov	r18,r7
1000449c:	983f821e 	bne	r19,zero,100042a8 <__alt_data_end+0xf80042a8>
100044a0:	8809883a 	mov	r4,r17
100044a4:	00068b80 	call	100068b8 <__clzsi2>
100044a8:	10800804 	addi	r2,r2,32
100044ac:	10fffe04 	addi	r3,r2,-8
100044b0:	010007c4 	movi	r4,31
100044b4:	20ff810e 	bge	r4,r3,100042bc <__alt_data_end+0xf80042bc>
100044b8:	14fff604 	addi	r19,r2,-40
100044bc:	8ce6983a 	sll	r19,r17,r19
100044c0:	0023883a 	mov	r17,zero
100044c4:	1c3f840e 	bge	r3,r16,100042d8 <__alt_data_end+0xf80042d8>
100044c8:	017fe034 	movhi	r5,65408
100044cc:	297fffc4 	addi	r5,r5,-1
100044d0:	80e1c83a 	sub	r16,r16,r3
100044d4:	994a703a 	and	r5,r19,r5
100044d8:	003f3006 	br	1000419c <__alt_data_end+0xf800419c>
100044dc:	0009883a 	mov	r4,zero
100044e0:	0005883a 	mov	r2,zero
100044e4:	003f4506 	br	100041fc <__alt_data_end+0xf80041fc>
100044e8:	418cb03a 	or	r6,r8,r6
100044ec:	300cc03a 	cmpne	r6,r6,zero
100044f0:	0007883a 	mov	r3,zero
100044f4:	003f6106 	br	1000427c <__alt_data_end+0xf800427c>
100044f8:	2000921e 	bne	r4,zero,10004744 <__adddf3+0x624>
100044fc:	80800044 	addi	r2,r16,1
10004500:	11c1ffcc 	andi	r7,r2,2047
10004504:	01000044 	movi	r4,1
10004508:	21c0610e 	bge	r4,r7,10004690 <__adddf3+0x570>
1000450c:	0101ffc4 	movi	r4,2047
10004510:	1100a326 	beq	r2,r4,100047a0 <__adddf3+0x680>
10004514:	344d883a 	add	r6,r6,r17
10004518:	3463803a 	cmpltu	r17,r6,r17
1000451c:	414b883a 	add	r5,r8,r5
10004520:	2c4b883a 	add	r5,r5,r17
10004524:	282297fa 	slli	r17,r5,31
10004528:	300cd07a 	srli	r6,r6,1
1000452c:	280ad07a 	srli	r5,r5,1
10004530:	1021883a 	mov	r16,r2
10004534:	89a2b03a 	or	r17,r17,r6
10004538:	003f1806 	br	1000419c <__alt_data_end+0xf800419c>
1000453c:	0081ffc4 	movi	r2,2047
10004540:	80bf411e 	bne	r16,r2,10004248 <__alt_data_end+0xf8004248>
10004544:	003f1506 	br	1000419c <__alt_data_end+0xf800419c>
10004548:	80bff844 	addi	r2,r16,-31
1000454c:	00c00804 	movi	r3,32
10004550:	9884d83a 	srl	r2,r19,r2
10004554:	28c04a26 	beq	r5,r3,10004680 <__adddf3+0x560>
10004558:	00c00fc4 	movi	r3,63
1000455c:	1c21c83a 	sub	r16,r3,r16
10004560:	9c26983a 	sll	r19,r19,r16
10004564:	9c62b03a 	or	r17,r19,r17
10004568:	8822c03a 	cmpne	r17,r17,zero
1000456c:	88a2b03a 	or	r17,r17,r2
10004570:	000b883a 	mov	r5,zero
10004574:	0021883a 	mov	r16,zero
10004578:	003fb406 	br	1000444c <__alt_data_end+0xf800444c>
1000457c:	18bff804 	addi	r2,r3,-32
10004580:	01000804 	movi	r4,32
10004584:	4084d83a 	srl	r2,r8,r2
10004588:	19003f26 	beq	r3,r4,10004688 <__adddf3+0x568>
1000458c:	01001004 	movi	r4,64
10004590:	20c7c83a 	sub	r3,r4,r3
10004594:	40d0983a 	sll	r8,r8,r3
10004598:	418cb03a 	or	r6,r8,r6
1000459c:	300cc03a 	cmpne	r6,r6,zero
100045a0:	308cb03a 	or	r6,r6,r2
100045a4:	0007883a 	mov	r3,zero
100045a8:	003f3406 	br	1000427c <__alt_data_end+0xf800427c>
100045ac:	80002326 	beq	r16,zero,1000463c <__adddf3+0x51c>
100045b0:	0101ffc4 	movi	r4,2047
100045b4:	11005e26 	beq	r2,r4,10004730 <__adddf3+0x610>
100045b8:	00c7c83a 	sub	r3,zero,r3
100045bc:	29402034 	orhi	r5,r5,128
100045c0:	01000e04 	movi	r4,56
100045c4:	20c07216 	blt	r4,r3,10004790 <__adddf3+0x670>
100045c8:	010007c4 	movi	r4,31
100045cc:	20c0ce16 	blt	r4,r3,10004908 <__adddf3+0x7e8>
100045d0:	01000804 	movi	r4,32
100045d4:	20c9c83a 	sub	r4,r4,r3
100045d8:	2914983a 	sll	r10,r5,r4
100045dc:	88d2d83a 	srl	r9,r17,r3
100045e0:	8908983a 	sll	r4,r17,r4
100045e4:	28c6d83a 	srl	r3,r5,r3
100045e8:	5262b03a 	or	r17,r10,r9
100045ec:	2008c03a 	cmpne	r4,r4,zero
100045f0:	8922b03a 	or	r17,r17,r4
100045f4:	3463c83a 	sub	r17,r6,r17
100045f8:	40c7c83a 	sub	r3,r8,r3
100045fc:	344d803a 	cmpltu	r6,r6,r17
10004600:	198bc83a 	sub	r5,r3,r6
10004604:	1021883a 	mov	r16,r2
10004608:	3825883a 	mov	r18,r7
1000460c:	003f2006 	br	10004290 <__alt_data_end+0xf8004290>
10004610:	9886b03a 	or	r3,r19,r2
10004614:	1800141e 	bne	r3,zero,10004668 <__adddf3+0x548>
10004618:	0007883a 	mov	r3,zero
1000461c:	000b883a 	mov	r5,zero
10004620:	0023883a 	mov	r17,zero
10004624:	0021883a 	mov	r16,zero
10004628:	003f3c06 	br	1000431c <__alt_data_end+0xf800431c>
1000462c:	418cb03a 	or	r6,r8,r6
10004630:	300cc03a 	cmpne	r6,r6,zero
10004634:	0011883a 	mov	r8,zero
10004638:	003f5606 	br	10004394 <__alt_data_end+0xf8004394>
1000463c:	2c48b03a 	or	r4,r5,r17
10004640:	20003b26 	beq	r4,zero,10004730 <__adddf3+0x610>
10004644:	00c6303a 	nor	r3,zero,r3
10004648:	1800371e 	bne	r3,zero,10004728 <__adddf3+0x608>
1000464c:	3463c83a 	sub	r17,r6,r17
10004650:	414bc83a 	sub	r5,r8,r5
10004654:	344d803a 	cmpltu	r6,r6,r17
10004658:	298bc83a 	sub	r5,r5,r6
1000465c:	1021883a 	mov	r16,r2
10004660:	3825883a 	mov	r18,r7
10004664:	003f0a06 	br	10004290 <__alt_data_end+0xf8004290>
10004668:	1023883a 	mov	r17,r2
1000466c:	003f0d06 	br	100042a4 <__alt_data_end+0xf80042a4>
10004670:	0007883a 	mov	r3,zero
10004674:	000b883a 	mov	r5,zero
10004678:	0023883a 	mov	r17,zero
1000467c:	003f2706 	br	1000431c <__alt_data_end+0xf800431c>
10004680:	0027883a 	mov	r19,zero
10004684:	003fb706 	br	10004564 <__alt_data_end+0xf8004564>
10004688:	0011883a 	mov	r8,zero
1000468c:	003fc206 	br	10004598 <__alt_data_end+0xf8004598>
10004690:	2c44b03a 	or	r2,r5,r17
10004694:	8000871e 	bne	r16,zero,100048b4 <__adddf3+0x794>
10004698:	1000b126 	beq	r2,zero,10004960 <__adddf3+0x840>
1000469c:	4184b03a 	or	r2,r8,r6
100046a0:	103ebe26 	beq	r2,zero,1000419c <__alt_data_end+0xf800419c>
100046a4:	3445883a 	add	r2,r6,r17
100046a8:	1463803a 	cmpltu	r17,r2,r17
100046ac:	414b883a 	add	r5,r8,r5
100046b0:	2c4b883a 	add	r5,r5,r17
100046b4:	28c0202c 	andhi	r3,r5,128
100046b8:	1023883a 	mov	r17,r2
100046bc:	183f6326 	beq	r3,zero,1000444c <__alt_data_end+0xf800444c>
100046c0:	00bfe034 	movhi	r2,65408
100046c4:	10bfffc4 	addi	r2,r2,-1
100046c8:	2021883a 	mov	r16,r4
100046cc:	288a703a 	and	r5,r5,r2
100046d0:	003eb206 	br	1000419c <__alt_data_end+0xf800419c>
100046d4:	2c44b03a 	or	r2,r5,r17
100046d8:	8000251e 	bne	r16,zero,10004770 <__adddf3+0x650>
100046dc:	10004b1e 	bne	r2,zero,1000480c <__adddf3+0x6ec>
100046e0:	4184b03a 	or	r2,r8,r6
100046e4:	103fe226 	beq	r2,zero,10004670 <__alt_data_end+0xf8004670>
100046e8:	400b883a 	mov	r5,r8
100046ec:	3023883a 	mov	r17,r6
100046f0:	3825883a 	mov	r18,r7
100046f4:	003ea906 	br	1000419c <__alt_data_end+0xf800419c>
100046f8:	20bff804 	addi	r2,r4,-32
100046fc:	01c00804 	movi	r7,32
10004700:	4084d83a 	srl	r2,r8,r2
10004704:	21c07e26 	beq	r4,r7,10004900 <__adddf3+0x7e0>
10004708:	01c01004 	movi	r7,64
1000470c:	3909c83a 	sub	r4,r7,r4
10004710:	4110983a 	sll	r8,r8,r4
10004714:	418cb03a 	or	r6,r8,r6
10004718:	300cc03a 	cmpne	r6,r6,zero
1000471c:	308cb03a 	or	r6,r6,r2
10004720:	0011883a 	mov	r8,zero
10004724:	003f1b06 	br	10004394 <__alt_data_end+0xf8004394>
10004728:	0101ffc4 	movi	r4,2047
1000472c:	113fa41e 	bne	r2,r4,100045c0 <__alt_data_end+0xf80045c0>
10004730:	400b883a 	mov	r5,r8
10004734:	3023883a 	mov	r17,r6
10004738:	1021883a 	mov	r16,r2
1000473c:	3825883a 	mov	r18,r7
10004740:	003e9606 	br	1000419c <__alt_data_end+0xf800419c>
10004744:	80001a1e 	bne	r16,zero,100047b0 <__adddf3+0x690>
10004748:	2c4eb03a 	or	r7,r5,r17
1000474c:	38005526 	beq	r7,zero,100048a4 <__adddf3+0x784>
10004750:	0108303a 	nor	r4,zero,r4
10004754:	2000511e 	bne	r4,zero,1000489c <__adddf3+0x77c>
10004758:	89a3883a 	add	r17,r17,r6
1000475c:	414b883a 	add	r5,r8,r5
10004760:	898d803a 	cmpltu	r6,r17,r6
10004764:	298b883a 	add	r5,r5,r6
10004768:	1021883a 	mov	r16,r2
1000476c:	003f0e06 	br	100043a8 <__alt_data_end+0xf80043a8>
10004770:	1000341e 	bne	r2,zero,10004844 <__adddf3+0x724>
10004774:	4184b03a 	or	r2,r8,r6
10004778:	10006f26 	beq	r2,zero,10004938 <__adddf3+0x818>
1000477c:	400b883a 	mov	r5,r8
10004780:	3023883a 	mov	r17,r6
10004784:	3825883a 	mov	r18,r7
10004788:	0401ffc4 	movi	r16,2047
1000478c:	003e8306 	br	1000419c <__alt_data_end+0xf800419c>
10004790:	2c62b03a 	or	r17,r5,r17
10004794:	8822c03a 	cmpne	r17,r17,zero
10004798:	0007883a 	mov	r3,zero
1000479c:	003f9506 	br	100045f4 <__alt_data_end+0xf80045f4>
100047a0:	1021883a 	mov	r16,r2
100047a4:	000b883a 	mov	r5,zero
100047a8:	0023883a 	mov	r17,zero
100047ac:	003edb06 	br	1000431c <__alt_data_end+0xf800431c>
100047b0:	01c1ffc4 	movi	r7,2047
100047b4:	11c03b26 	beq	r2,r7,100048a4 <__adddf3+0x784>
100047b8:	0109c83a 	sub	r4,zero,r4
100047bc:	29402034 	orhi	r5,r5,128
100047c0:	01c00e04 	movi	r7,56
100047c4:	39006216 	blt	r7,r4,10004950 <__adddf3+0x830>
100047c8:	01c007c4 	movi	r7,31
100047cc:	39006b16 	blt	r7,r4,1000497c <__adddf3+0x85c>
100047d0:	01c00804 	movi	r7,32
100047d4:	390fc83a 	sub	r7,r7,r4
100047d8:	29d4983a 	sll	r10,r5,r7
100047dc:	8912d83a 	srl	r9,r17,r4
100047e0:	89ce983a 	sll	r7,r17,r7
100047e4:	2908d83a 	srl	r4,r5,r4
100047e8:	5262b03a 	or	r17,r10,r9
100047ec:	380ac03a 	cmpne	r5,r7,zero
100047f0:	8962b03a 	or	r17,r17,r5
100047f4:	89a3883a 	add	r17,r17,r6
100047f8:	2211883a 	add	r8,r4,r8
100047fc:	898d803a 	cmpltu	r6,r17,r6
10004800:	418b883a 	add	r5,r8,r6
10004804:	1021883a 	mov	r16,r2
10004808:	003ee706 	br	100043a8 <__alt_data_end+0xf80043a8>
1000480c:	4184b03a 	or	r2,r8,r6
10004810:	103e6226 	beq	r2,zero,1000419c <__alt_data_end+0xf800419c>
10004814:	8987c83a 	sub	r3,r17,r6
10004818:	88c9803a 	cmpltu	r4,r17,r3
1000481c:	2a05c83a 	sub	r2,r5,r8
10004820:	1105c83a 	sub	r2,r2,r4
10004824:	1100202c 	andhi	r4,r2,128
10004828:	203f0426 	beq	r4,zero,1000443c <__alt_data_end+0xf800443c>
1000482c:	3463c83a 	sub	r17,r6,r17
10004830:	414bc83a 	sub	r5,r8,r5
10004834:	344d803a 	cmpltu	r6,r6,r17
10004838:	298bc83a 	sub	r5,r5,r6
1000483c:	3825883a 	mov	r18,r7
10004840:	003e5606 	br	1000419c <__alt_data_end+0xf800419c>
10004844:	4184b03a 	or	r2,r8,r6
10004848:	10002b26 	beq	r2,zero,100048f8 <__adddf3+0x7d8>
1000484c:	2804d0fa 	srli	r2,r5,3
10004850:	8822d0fa 	srli	r17,r17,3
10004854:	280a977a 	slli	r5,r5,29
10004858:	10c0022c 	andhi	r3,r2,8
1000485c:	2c62b03a 	or	r17,r5,r17
10004860:	18000826 	beq	r3,zero,10004884 <__adddf3+0x764>
10004864:	4008d0fa 	srli	r4,r8,3
10004868:	20c0022c 	andhi	r3,r4,8
1000486c:	1800051e 	bne	r3,zero,10004884 <__adddf3+0x764>
10004870:	300cd0fa 	srli	r6,r6,3
10004874:	4010977a 	slli	r8,r8,29
10004878:	2005883a 	mov	r2,r4
1000487c:	3825883a 	mov	r18,r7
10004880:	41a2b03a 	or	r17,r8,r6
10004884:	880ad77a 	srli	r5,r17,29
10004888:	100490fa 	slli	r2,r2,3
1000488c:	882290fa 	slli	r17,r17,3
10004890:	0401ffc4 	movi	r16,2047
10004894:	288ab03a 	or	r5,r5,r2
10004898:	003e4006 	br	1000419c <__alt_data_end+0xf800419c>
1000489c:	01c1ffc4 	movi	r7,2047
100048a0:	11ffc71e 	bne	r2,r7,100047c0 <__alt_data_end+0xf80047c0>
100048a4:	400b883a 	mov	r5,r8
100048a8:	3023883a 	mov	r17,r6
100048ac:	1021883a 	mov	r16,r2
100048b0:	003e3a06 	br	1000419c <__alt_data_end+0xf800419c>
100048b4:	10002d26 	beq	r2,zero,1000496c <__adddf3+0x84c>
100048b8:	4184b03a 	or	r2,r8,r6
100048bc:	10000e26 	beq	r2,zero,100048f8 <__adddf3+0x7d8>
100048c0:	2804d0fa 	srli	r2,r5,3
100048c4:	8822d0fa 	srli	r17,r17,3
100048c8:	280a977a 	slli	r5,r5,29
100048cc:	10c0022c 	andhi	r3,r2,8
100048d0:	2c62b03a 	or	r17,r5,r17
100048d4:	183feb26 	beq	r3,zero,10004884 <__alt_data_end+0xf8004884>
100048d8:	4008d0fa 	srli	r4,r8,3
100048dc:	20c0022c 	andhi	r3,r4,8
100048e0:	183fe81e 	bne	r3,zero,10004884 <__alt_data_end+0xf8004884>
100048e4:	300cd0fa 	srli	r6,r6,3
100048e8:	4010977a 	slli	r8,r8,29
100048ec:	2005883a 	mov	r2,r4
100048f0:	41a2b03a 	or	r17,r8,r6
100048f4:	003fe306 	br	10004884 <__alt_data_end+0xf8004884>
100048f8:	0401ffc4 	movi	r16,2047
100048fc:	003e2706 	br	1000419c <__alt_data_end+0xf800419c>
10004900:	0011883a 	mov	r8,zero
10004904:	003f8306 	br	10004714 <__alt_data_end+0xf8004714>
10004908:	193ff804 	addi	r4,r3,-32
1000490c:	02400804 	movi	r9,32
10004910:	2908d83a 	srl	r4,r5,r4
10004914:	1a402526 	beq	r3,r9,100049ac <__adddf3+0x88c>
10004918:	02401004 	movi	r9,64
1000491c:	48c7c83a 	sub	r3,r9,r3
10004920:	28ca983a 	sll	r5,r5,r3
10004924:	2c62b03a 	or	r17,r5,r17
10004928:	8822c03a 	cmpne	r17,r17,zero
1000492c:	8922b03a 	or	r17,r17,r4
10004930:	0007883a 	mov	r3,zero
10004934:	003f2f06 	br	100045f4 <__alt_data_end+0xf80045f4>
10004938:	01402034 	movhi	r5,128
1000493c:	0007883a 	mov	r3,zero
10004940:	297fffc4 	addi	r5,r5,-1
10004944:	047ffe04 	movi	r17,-8
10004948:	0401ffc4 	movi	r16,2047
1000494c:	003e7306 	br	1000431c <__alt_data_end+0xf800431c>
10004950:	2c62b03a 	or	r17,r5,r17
10004954:	8822c03a 	cmpne	r17,r17,zero
10004958:	0009883a 	mov	r4,zero
1000495c:	003fa506 	br	100047f4 <__alt_data_end+0xf80047f4>
10004960:	400b883a 	mov	r5,r8
10004964:	3023883a 	mov	r17,r6
10004968:	003e0c06 	br	1000419c <__alt_data_end+0xf800419c>
1000496c:	400b883a 	mov	r5,r8
10004970:	3023883a 	mov	r17,r6
10004974:	0401ffc4 	movi	r16,2047
10004978:	003e0806 	br	1000419c <__alt_data_end+0xf800419c>
1000497c:	21fff804 	addi	r7,r4,-32
10004980:	02400804 	movi	r9,32
10004984:	29ced83a 	srl	r7,r5,r7
10004988:	22400a26 	beq	r4,r9,100049b4 <__adddf3+0x894>
1000498c:	02401004 	movi	r9,64
10004990:	4909c83a 	sub	r4,r9,r4
10004994:	290a983a 	sll	r5,r5,r4
10004998:	2c62b03a 	or	r17,r5,r17
1000499c:	8822c03a 	cmpne	r17,r17,zero
100049a0:	89e2b03a 	or	r17,r17,r7
100049a4:	0009883a 	mov	r4,zero
100049a8:	003f9206 	br	100047f4 <__alt_data_end+0xf80047f4>
100049ac:	000b883a 	mov	r5,zero
100049b0:	003fdc06 	br	10004924 <__alt_data_end+0xf8004924>
100049b4:	000b883a 	mov	r5,zero
100049b8:	003ff706 	br	10004998 <__alt_data_end+0xf8004998>

100049bc <__divdf3>:
100049bc:	defff004 	addi	sp,sp,-64
100049c0:	dc800815 	stw	r18,32(sp)
100049c4:	2824d53a 	srli	r18,r5,20
100049c8:	dd800c15 	stw	r22,48(sp)
100049cc:	282cd7fa 	srli	r22,r5,31
100049d0:	dc000615 	stw	r16,24(sp)
100049d4:	04000434 	movhi	r16,16
100049d8:	df000e15 	stw	fp,56(sp)
100049dc:	dd000a15 	stw	r20,40(sp)
100049e0:	dcc00915 	stw	r19,36(sp)
100049e4:	dc400715 	stw	r17,28(sp)
100049e8:	843fffc4 	addi	r16,r16,-1
100049ec:	dfc00f15 	stw	ra,60(sp)
100049f0:	ddc00d15 	stw	r23,52(sp)
100049f4:	dd400b15 	stw	r21,44(sp)
100049f8:	9481ffcc 	andi	r18,r18,2047
100049fc:	2029883a 	mov	r20,r4
10004a00:	2027883a 	mov	r19,r4
10004a04:	2c22703a 	and	r17,r5,r16
10004a08:	b7003fcc 	andi	fp,r22,255
10004a0c:	90005e26 	beq	r18,zero,10004b88 <__divdf3+0x1cc>
10004a10:	0081ffc4 	movi	r2,2047
10004a14:	90803526 	beq	r18,r2,10004aec <__divdf3+0x130>
10004a18:	8c000434 	orhi	r16,r17,16
10004a1c:	2004d77a 	srli	r2,r4,29
10004a20:	802090fa 	slli	r16,r16,3
10004a24:	202690fa 	slli	r19,r4,3
10004a28:	94bf0044 	addi	r18,r18,-1023
10004a2c:	80a2b03a 	or	r17,r16,r2
10004a30:	0029883a 	mov	r20,zero
10004a34:	0011883a 	mov	r8,zero
10004a38:	380ad53a 	srli	r5,r7,20
10004a3c:	382ed7fa 	srli	r23,r7,31
10004a40:	04000434 	movhi	r16,16
10004a44:	843fffc4 	addi	r16,r16,-1
10004a48:	2941ffcc 	andi	r5,r5,2047
10004a4c:	302b883a 	mov	r21,r6
10004a50:	3c20703a 	and	r16,r7,r16
10004a54:	ba403fcc 	andi	r9,r23,255
10004a58:	28006726 	beq	r5,zero,10004bf8 <__divdf3+0x23c>
10004a5c:	0081ffc4 	movi	r2,2047
10004a60:	28805f26 	beq	r5,r2,10004be0 <__divdf3+0x224>
10004a64:	84000434 	orhi	r16,r16,16
10004a68:	3004d77a 	srli	r2,r6,29
10004a6c:	802090fa 	slli	r16,r16,3
10004a70:	302a90fa 	slli	r21,r6,3
10004a74:	297f0044 	addi	r5,r5,-1023
10004a78:	80a0b03a 	or	r16,r16,r2
10004a7c:	000f883a 	mov	r7,zero
10004a80:	3d06b03a 	or	r3,r7,r20
10004a84:	180690ba 	slli	r3,r3,2
10004a88:	00840034 	movhi	r2,4096
10004a8c:	1092ab04 	addi	r2,r2,19116
10004a90:	1885883a 	add	r2,r3,r2
10004a94:	10800017 	ldw	r2,0(r2)
10004a98:	b5c8f03a 	xor	r4,r22,r23
10004a9c:	200d883a 	mov	r6,r4
10004aa0:	25003fcc 	andi	r20,r4,255
10004aa4:	9165c83a 	sub	r18,r18,r5
10004aa8:	1000683a 	jmp	r2
10004aac:	10004cf4 	orhi	zero,r2,307
10004ab0:	10004b24 	muli	zero,r2,300
10004ab4:	10004cb8 	rdprs	zero,r2,306
10004ab8:	10004b08 	cmpgei	zero,r2,300
10004abc:	10004cb8 	rdprs	zero,r2,306
10004ac0:	10004c8c 	andi	zero,r2,306
10004ac4:	10004cb8 	rdprs	zero,r2,306
10004ac8:	10004b08 	cmpgei	zero,r2,300
10004acc:	10004b24 	muli	zero,r2,300
10004ad0:	10004b24 	muli	zero,r2,300
10004ad4:	10004c8c 	andi	zero,r2,306
10004ad8:	10004b08 	cmpgei	zero,r2,300
10004adc:	10004b18 	cmpnei	zero,r2,300
10004ae0:	10004b18 	cmpnei	zero,r2,300
10004ae4:	10004b18 	cmpnei	zero,r2,300
10004ae8:	10004cc8 	cmpgei	zero,r2,307
10004aec:	8904b03a 	or	r2,r17,r4
10004af0:	1000631e 	bne	r2,zero,10004c80 <__divdf3+0x2c4>
10004af4:	05000204 	movi	r20,8
10004af8:	0023883a 	mov	r17,zero
10004afc:	0027883a 	mov	r19,zero
10004b00:	02000084 	movi	r8,2
10004b04:	003fcc06 	br	10004a38 <__alt_data_end+0xf8004a38>
10004b08:	8023883a 	mov	r17,r16
10004b0c:	a827883a 	mov	r19,r21
10004b10:	4839883a 	mov	fp,r9
10004b14:	3811883a 	mov	r8,r7
10004b18:	00800084 	movi	r2,2
10004b1c:	4081531e 	bne	r8,r2,1000506c <__divdf3+0x6b0>
10004b20:	e029883a 	mov	r20,fp
10004b24:	a180004c 	andi	r6,r20,1
10004b28:	0201ffc4 	movi	r8,2047
10004b2c:	000b883a 	mov	r5,zero
10004b30:	0027883a 	mov	r19,zero
10004b34:	4010953a 	slli	r8,r8,20
10004b38:	30c03fcc 	andi	r3,r6,255
10004b3c:	04000434 	movhi	r16,16
10004b40:	180697fa 	slli	r3,r3,31
10004b44:	843fffc4 	addi	r16,r16,-1
10004b48:	2c20703a 	and	r16,r5,r16
10004b4c:	8220b03a 	or	r16,r16,r8
10004b50:	80c6b03a 	or	r3,r16,r3
10004b54:	9805883a 	mov	r2,r19
10004b58:	dfc00f17 	ldw	ra,60(sp)
10004b5c:	df000e17 	ldw	fp,56(sp)
10004b60:	ddc00d17 	ldw	r23,52(sp)
10004b64:	dd800c17 	ldw	r22,48(sp)
10004b68:	dd400b17 	ldw	r21,44(sp)
10004b6c:	dd000a17 	ldw	r20,40(sp)
10004b70:	dcc00917 	ldw	r19,36(sp)
10004b74:	dc800817 	ldw	r18,32(sp)
10004b78:	dc400717 	ldw	r17,28(sp)
10004b7c:	dc000617 	ldw	r16,24(sp)
10004b80:	dec01004 	addi	sp,sp,64
10004b84:	f800283a 	ret
10004b88:	8904b03a 	or	r2,r17,r4
10004b8c:	10003726 	beq	r2,zero,10004c6c <__divdf3+0x2b0>
10004b90:	88014d26 	beq	r17,zero,100050c8 <__divdf3+0x70c>
10004b94:	8809883a 	mov	r4,r17
10004b98:	d9800215 	stw	r6,8(sp)
10004b9c:	d9c00515 	stw	r7,20(sp)
10004ba0:	00068b80 	call	100068b8 <__clzsi2>
10004ba4:	d9800217 	ldw	r6,8(sp)
10004ba8:	d9c00517 	ldw	r7,20(sp)
10004bac:	1007883a 	mov	r3,r2
10004bb0:	01000a04 	movi	r4,40
10004bb4:	1cfffe04 	addi	r19,r3,-8
10004bb8:	20c9c83a 	sub	r4,r4,r3
10004bbc:	8cca983a 	sll	r5,r17,r19
10004bc0:	a108d83a 	srl	r4,r20,r4
10004bc4:	a4e6983a 	sll	r19,r20,r19
10004bc8:	2162b03a 	or	r17,r4,r5
10004bcc:	04bf0344 	movi	r18,-1011
10004bd0:	90e5c83a 	sub	r18,r18,r3
10004bd4:	0029883a 	mov	r20,zero
10004bd8:	0011883a 	mov	r8,zero
10004bdc:	003f9606 	br	10004a38 <__alt_data_end+0xf8004a38>
10004be0:	8184b03a 	or	r2,r16,r6
10004be4:	10001f1e 	bne	r2,zero,10004c64 <__divdf3+0x2a8>
10004be8:	0021883a 	mov	r16,zero
10004bec:	002b883a 	mov	r21,zero
10004bf0:	01c00084 	movi	r7,2
10004bf4:	003fa206 	br	10004a80 <__alt_data_end+0xf8004a80>
10004bf8:	8184b03a 	or	r2,r16,r6
10004bfc:	10001526 	beq	r2,zero,10004c54 <__divdf3+0x298>
10004c00:	80013d26 	beq	r16,zero,100050f8 <__divdf3+0x73c>
10004c04:	8009883a 	mov	r4,r16
10004c08:	d9800215 	stw	r6,8(sp)
10004c0c:	da000315 	stw	r8,12(sp)
10004c10:	da400415 	stw	r9,16(sp)
10004c14:	00068b80 	call	100068b8 <__clzsi2>
10004c18:	d9800217 	ldw	r6,8(sp)
10004c1c:	da000317 	ldw	r8,12(sp)
10004c20:	da400417 	ldw	r9,16(sp)
10004c24:	1007883a 	mov	r3,r2
10004c28:	01000a04 	movi	r4,40
10004c2c:	1d7ffe04 	addi	r21,r3,-8
10004c30:	20c9c83a 	sub	r4,r4,r3
10004c34:	8560983a 	sll	r16,r16,r21
10004c38:	3108d83a 	srl	r4,r6,r4
10004c3c:	356a983a 	sll	r21,r6,r21
10004c40:	2420b03a 	or	r16,r4,r16
10004c44:	017f0344 	movi	r5,-1011
10004c48:	28cbc83a 	sub	r5,r5,r3
10004c4c:	000f883a 	mov	r7,zero
10004c50:	003f8b06 	br	10004a80 <__alt_data_end+0xf8004a80>
10004c54:	0021883a 	mov	r16,zero
10004c58:	002b883a 	mov	r21,zero
10004c5c:	01c00044 	movi	r7,1
10004c60:	003f8706 	br	10004a80 <__alt_data_end+0xf8004a80>
10004c64:	01c000c4 	movi	r7,3
10004c68:	003f8506 	br	10004a80 <__alt_data_end+0xf8004a80>
10004c6c:	05000104 	movi	r20,4
10004c70:	0023883a 	mov	r17,zero
10004c74:	0027883a 	mov	r19,zero
10004c78:	02000044 	movi	r8,1
10004c7c:	003f6e06 	br	10004a38 <__alt_data_end+0xf8004a38>
10004c80:	05000304 	movi	r20,12
10004c84:	020000c4 	movi	r8,3
10004c88:	003f6b06 	br	10004a38 <__alt_data_end+0xf8004a38>
10004c8c:	01400434 	movhi	r5,16
10004c90:	000d883a 	mov	r6,zero
10004c94:	297fffc4 	addi	r5,r5,-1
10004c98:	04ffffc4 	movi	r19,-1
10004c9c:	0201ffc4 	movi	r8,2047
10004ca0:	003fa406 	br	10004b34 <__alt_data_end+0xf8004b34>
10004ca4:	043f0084 	movi	r16,-1022
10004ca8:	84a1c83a 	sub	r16,r16,r18
10004cac:	00800e04 	movi	r2,56
10004cb0:	14014d0e 	bge	r2,r16,100051e8 <__divdf3+0x82c>
10004cb4:	a180004c 	andi	r6,r20,1
10004cb8:	0011883a 	mov	r8,zero
10004cbc:	000b883a 	mov	r5,zero
10004cc0:	0027883a 	mov	r19,zero
10004cc4:	003f9b06 	br	10004b34 <__alt_data_end+0xf8004b34>
10004cc8:	8880022c 	andhi	r2,r17,8
10004ccc:	1000f026 	beq	r2,zero,10005090 <__divdf3+0x6d4>
10004cd0:	8080022c 	andhi	r2,r16,8
10004cd4:	1000ee1e 	bne	r2,zero,10005090 <__divdf3+0x6d4>
10004cd8:	00800434 	movhi	r2,16
10004cdc:	81400234 	orhi	r5,r16,8
10004ce0:	10bfffc4 	addi	r2,r2,-1
10004ce4:	b80d883a 	mov	r6,r23
10004ce8:	288a703a 	and	r5,r5,r2
10004cec:	a827883a 	mov	r19,r21
10004cf0:	003fea06 	br	10004c9c <__alt_data_end+0xf8004c9c>
10004cf4:	84411c36 	bltu	r16,r17,10005168 <__divdf3+0x7ac>
10004cf8:	8c011a26 	beq	r17,r16,10005164 <__divdf3+0x7a8>
10004cfc:	94bfffc4 	addi	r18,r18,-1
10004d00:	dcc00015 	stw	r19,0(sp)
10004d04:	8811883a 	mov	r8,r17
10004d08:	002d883a 	mov	r22,zero
10004d0c:	a80cd63a 	srli	r6,r21,24
10004d10:	8020923a 	slli	r16,r16,8
10004d14:	a82a923a 	slli	r21,r21,8
10004d18:	4009883a 	mov	r4,r8
10004d1c:	342eb03a 	or	r23,r6,r16
10004d20:	dd400115 	stw	r21,4(sp)
10004d24:	b82ad43a 	srli	r21,r23,16
10004d28:	da000315 	stw	r8,12(sp)
10004d2c:	bcffffcc 	andi	r19,r23,65535
10004d30:	a80b883a 	mov	r5,r21
10004d34:	00040e80 	call	100040e8 <__udivsi3>
10004d38:	1009883a 	mov	r4,r2
10004d3c:	980b883a 	mov	r5,r19
10004d40:	1023883a 	mov	r17,r2
10004d44:	00040f80 	call	100040f8 <__mulsi3>
10004d48:	da000317 	ldw	r8,12(sp)
10004d4c:	a80b883a 	mov	r5,r21
10004d50:	1039883a 	mov	fp,r2
10004d54:	4009883a 	mov	r4,r8
10004d58:	00040f00 	call	100040f0 <__umodsi3>
10004d5c:	d8c00017 	ldw	r3,0(sp)
10004d60:	1004943a 	slli	r2,r2,16
10004d64:	1810d43a 	srli	r8,r3,16
10004d68:	120eb03a 	or	r7,r2,r8
10004d6c:	3f00062e 	bgeu	r7,fp,10004d88 <__divdf3+0x3cc>
10004d70:	3dcf883a 	add	r7,r7,r23
10004d74:	88bfffc4 	addi	r2,r17,-1
10004d78:	3dc10a36 	bltu	r7,r23,100051a4 <__divdf3+0x7e8>
10004d7c:	3f01092e 	bgeu	r7,fp,100051a4 <__divdf3+0x7e8>
10004d80:	8c7fff84 	addi	r17,r17,-2
10004d84:	3dcf883a 	add	r7,r7,r23
10004d88:	3f39c83a 	sub	fp,r7,fp
10004d8c:	e009883a 	mov	r4,fp
10004d90:	a80b883a 	mov	r5,r21
10004d94:	00040e80 	call	100040e8 <__udivsi3>
10004d98:	1009883a 	mov	r4,r2
10004d9c:	980b883a 	mov	r5,r19
10004da0:	1021883a 	mov	r16,r2
10004da4:	00040f80 	call	100040f8 <__mulsi3>
10004da8:	e009883a 	mov	r4,fp
10004dac:	a80b883a 	mov	r5,r21
10004db0:	d8800315 	stw	r2,12(sp)
10004db4:	00040f00 	call	100040f0 <__umodsi3>
10004db8:	d9000017 	ldw	r4,0(sp)
10004dbc:	1004943a 	slli	r2,r2,16
10004dc0:	da000317 	ldw	r8,12(sp)
10004dc4:	20ffffcc 	andi	r3,r4,65535
10004dc8:	10ceb03a 	or	r7,r2,r3
10004dcc:	3a00062e 	bgeu	r7,r8,10004de8 <__divdf3+0x42c>
10004dd0:	3dcf883a 	add	r7,r7,r23
10004dd4:	80bfffc4 	addi	r2,r16,-1
10004dd8:	3dc0f036 	bltu	r7,r23,1000519c <__divdf3+0x7e0>
10004ddc:	3a00ef2e 	bgeu	r7,r8,1000519c <__divdf3+0x7e0>
10004de0:	843fff84 	addi	r16,r16,-2
10004de4:	3dcf883a 	add	r7,r7,r23
10004de8:	d8c00117 	ldw	r3,4(sp)
10004dec:	8822943a 	slli	r17,r17,16
10004df0:	3a0fc83a 	sub	r7,r7,r8
10004df4:	1806d43a 	srli	r3,r3,16
10004df8:	8462b03a 	or	r17,r16,r17
10004dfc:	8affffcc 	andi	r11,r17,65535
10004e00:	d8c00015 	stw	r3,0(sp)
10004e04:	d8c00117 	ldw	r3,4(sp)
10004e08:	8820d43a 	srli	r16,r17,16
10004e0c:	5809883a 	mov	r4,r11
10004e10:	1f3fffcc 	andi	fp,r3,65535
10004e14:	e00b883a 	mov	r5,fp
10004e18:	d9c00515 	stw	r7,20(sp)
10004e1c:	dac00215 	stw	r11,8(sp)
10004e20:	00040f80 	call	100040f8 <__mulsi3>
10004e24:	8009883a 	mov	r4,r16
10004e28:	e00b883a 	mov	r5,fp
10004e2c:	d8800415 	stw	r2,16(sp)
10004e30:	00040f80 	call	100040f8 <__mulsi3>
10004e34:	d9400017 	ldw	r5,0(sp)
10004e38:	8009883a 	mov	r4,r16
10004e3c:	d8800315 	stw	r2,12(sp)
10004e40:	00040f80 	call	100040f8 <__mulsi3>
10004e44:	dac00217 	ldw	r11,8(sp)
10004e48:	d9400017 	ldw	r5,0(sp)
10004e4c:	d8800215 	stw	r2,8(sp)
10004e50:	5809883a 	mov	r4,r11
10004e54:	00040f80 	call	100040f8 <__mulsi3>
10004e58:	da400417 	ldw	r9,16(sp)
10004e5c:	da800317 	ldw	r10,12(sp)
10004e60:	d9c00517 	ldw	r7,20(sp)
10004e64:	480ad43a 	srli	r5,r9,16
10004e68:	5085883a 	add	r2,r10,r2
10004e6c:	db000217 	ldw	r12,8(sp)
10004e70:	1151883a 	add	r8,r2,r5
10004e74:	4280022e 	bgeu	r8,r10,10004e80 <__divdf3+0x4c4>
10004e78:	00800074 	movhi	r2,1
10004e7c:	6099883a 	add	r12,r12,r2
10004e80:	400ad43a 	srli	r5,r8,16
10004e84:	4010943a 	slli	r8,r8,16
10004e88:	4c3fffcc 	andi	r16,r9,65535
10004e8c:	6149883a 	add	r4,r12,r5
10004e90:	4411883a 	add	r8,r8,r16
10004e94:	3900a736 	bltu	r7,r4,10005134 <__divdf3+0x778>
10004e98:	3900c426 	beq	r7,r4,100051ac <__divdf3+0x7f0>
10004e9c:	3909c83a 	sub	r4,r7,r4
10004ea0:	b221c83a 	sub	r16,r22,r8
10004ea4:	b42d803a 	cmpltu	r22,r22,r16
10004ea8:	25adc83a 	sub	r22,r4,r22
10004eac:	b5c0c626 	beq	r22,r23,100051c8 <__divdf3+0x80c>
10004eb0:	b009883a 	mov	r4,r22
10004eb4:	a80b883a 	mov	r5,r21
10004eb8:	00040e80 	call	100040e8 <__udivsi3>
10004ebc:	1009883a 	mov	r4,r2
10004ec0:	980b883a 	mov	r5,r19
10004ec4:	d8800315 	stw	r2,12(sp)
10004ec8:	00040f80 	call	100040f8 <__mulsi3>
10004ecc:	a80b883a 	mov	r5,r21
10004ed0:	b009883a 	mov	r4,r22
10004ed4:	d8800415 	stw	r2,16(sp)
10004ed8:	00040f00 	call	100040f0 <__umodsi3>
10004edc:	1004943a 	slli	r2,r2,16
10004ee0:	800ed43a 	srli	r7,r16,16
10004ee4:	da400417 	ldw	r9,16(sp)
10004ee8:	da000317 	ldw	r8,12(sp)
10004eec:	11cab03a 	or	r5,r2,r7
10004ef0:	2a40062e 	bgeu	r5,r9,10004f0c <__divdf3+0x550>
10004ef4:	2dcb883a 	add	r5,r5,r23
10004ef8:	40bfffc4 	addi	r2,r8,-1
10004efc:	2dc0b436 	bltu	r5,r23,100051d0 <__divdf3+0x814>
10004f00:	2a40b32e 	bgeu	r5,r9,100051d0 <__divdf3+0x814>
10004f04:	423fff84 	addi	r8,r8,-2
10004f08:	2dcb883a 	add	r5,r5,r23
10004f0c:	2a6dc83a 	sub	r22,r5,r9
10004f10:	b009883a 	mov	r4,r22
10004f14:	a80b883a 	mov	r5,r21
10004f18:	da000315 	stw	r8,12(sp)
10004f1c:	00040e80 	call	100040e8 <__udivsi3>
10004f20:	980b883a 	mov	r5,r19
10004f24:	1009883a 	mov	r4,r2
10004f28:	d8800415 	stw	r2,16(sp)
10004f2c:	00040f80 	call	100040f8 <__mulsi3>
10004f30:	b009883a 	mov	r4,r22
10004f34:	a80b883a 	mov	r5,r21
10004f38:	1027883a 	mov	r19,r2
10004f3c:	00040f00 	call	100040f0 <__umodsi3>
10004f40:	1004943a 	slli	r2,r2,16
10004f44:	843fffcc 	andi	r16,r16,65535
10004f48:	da000317 	ldw	r8,12(sp)
10004f4c:	140eb03a 	or	r7,r2,r16
10004f50:	da400417 	ldw	r9,16(sp)
10004f54:	3cc0062e 	bgeu	r7,r19,10004f70 <__divdf3+0x5b4>
10004f58:	3dcf883a 	add	r7,r7,r23
10004f5c:	48bfffc4 	addi	r2,r9,-1
10004f60:	3dc09d36 	bltu	r7,r23,100051d8 <__divdf3+0x81c>
10004f64:	3cc09c2e 	bgeu	r7,r19,100051d8 <__divdf3+0x81c>
10004f68:	4a7fff84 	addi	r9,r9,-2
10004f6c:	3dcf883a 	add	r7,r7,r23
10004f70:	4010943a 	slli	r8,r8,16
10004f74:	3cebc83a 	sub	r21,r7,r19
10004f78:	e00b883a 	mov	r5,fp
10004f7c:	4a26b03a 	or	r19,r9,r8
10004f80:	99ffffcc 	andi	r7,r19,65535
10004f84:	9820d43a 	srli	r16,r19,16
10004f88:	3809883a 	mov	r4,r7
10004f8c:	d9c00515 	stw	r7,20(sp)
10004f90:	00040f80 	call	100040f8 <__mulsi3>
10004f94:	8009883a 	mov	r4,r16
10004f98:	e00b883a 	mov	r5,fp
10004f9c:	102d883a 	mov	r22,r2
10004fa0:	00040f80 	call	100040f8 <__mulsi3>
10004fa4:	d9400017 	ldw	r5,0(sp)
10004fa8:	8009883a 	mov	r4,r16
10004fac:	1039883a 	mov	fp,r2
10004fb0:	00040f80 	call	100040f8 <__mulsi3>
10004fb4:	d9c00517 	ldw	r7,20(sp)
10004fb8:	d9400017 	ldw	r5,0(sp)
10004fbc:	1021883a 	mov	r16,r2
10004fc0:	3809883a 	mov	r4,r7
10004fc4:	00040f80 	call	100040f8 <__mulsi3>
10004fc8:	b008d43a 	srli	r4,r22,16
10004fcc:	e085883a 	add	r2,fp,r2
10004fd0:	1109883a 	add	r4,r2,r4
10004fd4:	2700022e 	bgeu	r4,fp,10004fe0 <__divdf3+0x624>
10004fd8:	00800074 	movhi	r2,1
10004fdc:	80a1883a 	add	r16,r16,r2
10004fe0:	200ad43a 	srli	r5,r4,16
10004fe4:	2008943a 	slli	r4,r4,16
10004fe8:	b5bfffcc 	andi	r22,r22,65535
10004fec:	8145883a 	add	r2,r16,r5
10004ff0:	2589883a 	add	r4,r4,r22
10004ff4:	a8802c36 	bltu	r21,r2,100050a8 <__divdf3+0x6ec>
10004ff8:	a880a426 	beq	r21,r2,1000528c <__divdf3+0x8d0>
10004ffc:	9cc00054 	ori	r19,r19,1
10005000:	9200ffc4 	addi	r8,r18,1023
10005004:	023f270e 	bge	zero,r8,10004ca4 <__alt_data_end+0xf8004ca4>
10005008:	988001cc 	andi	r2,r19,7
1000500c:	10000726 	beq	r2,zero,1000502c <__divdf3+0x670>
10005010:	990003cc 	andi	r4,r19,15
10005014:	00800104 	movi	r2,4
10005018:	20800426 	beq	r4,r2,1000502c <__divdf3+0x670>
1000501c:	9885883a 	add	r2,r19,r2
10005020:	14e7803a 	cmpltu	r19,r2,r19
10005024:	8ce3883a 	add	r17,r17,r19
10005028:	1027883a 	mov	r19,r2
1000502c:	8880402c 	andhi	r2,r17,256
10005030:	10000426 	beq	r2,zero,10005044 <__divdf3+0x688>
10005034:	00bfc034 	movhi	r2,65280
10005038:	10bfffc4 	addi	r2,r2,-1
1000503c:	92010004 	addi	r8,r18,1024
10005040:	88a2703a 	and	r17,r17,r2
10005044:	0081ff84 	movi	r2,2046
10005048:	123eb616 	blt	r2,r8,10004b24 <__alt_data_end+0xf8004b24>
1000504c:	9826d0fa 	srli	r19,r19,3
10005050:	8804977a 	slli	r2,r17,29
10005054:	8820927a 	slli	r16,r17,9
10005058:	4201ffcc 	andi	r8,r8,2047
1000505c:	14e6b03a 	or	r19,r2,r19
10005060:	800ad33a 	srli	r5,r16,12
10005064:	a180004c 	andi	r6,r20,1
10005068:	003eb206 	br	10004b34 <__alt_data_end+0xf8004b34>
1000506c:	008000c4 	movi	r2,3
10005070:	4080ac26 	beq	r8,r2,10005324 <__divdf3+0x968>
10005074:	00800044 	movi	r2,1
10005078:	4080591e 	bne	r8,r2,100051e0 <__divdf3+0x824>
1000507c:	e00d883a 	mov	r6,fp
10005080:	0011883a 	mov	r8,zero
10005084:	000b883a 	mov	r5,zero
10005088:	0027883a 	mov	r19,zero
1000508c:	003ea906 	br	10004b34 <__alt_data_end+0xf8004b34>
10005090:	00800434 	movhi	r2,16
10005094:	89400234 	orhi	r5,r17,8
10005098:	10bfffc4 	addi	r2,r2,-1
1000509c:	b00d883a 	mov	r6,r22
100050a0:	288a703a 	and	r5,r5,r2
100050a4:	003efd06 	br	10004c9c <__alt_data_end+0xf8004c9c>
100050a8:	adcf883a 	add	r7,r21,r23
100050ac:	997fffc4 	addi	r5,r19,-1
100050b0:	3dc0412e 	bgeu	r7,r23,100051b8 <__divdf3+0x7fc>
100050b4:	2827883a 	mov	r19,r5
100050b8:	38bfd01e 	bne	r7,r2,10004ffc <__alt_data_end+0xf8004ffc>
100050bc:	d8c00117 	ldw	r3,4(sp)
100050c0:	193fce1e 	bne	r3,r4,10004ffc <__alt_data_end+0xf8004ffc>
100050c4:	003fce06 	br	10005000 <__alt_data_end+0xf8005000>
100050c8:	d9800215 	stw	r6,8(sp)
100050cc:	d9c00515 	stw	r7,20(sp)
100050d0:	00068b80 	call	100068b8 <__clzsi2>
100050d4:	10c00804 	addi	r3,r2,32
100050d8:	010009c4 	movi	r4,39
100050dc:	d9800217 	ldw	r6,8(sp)
100050e0:	d9c00517 	ldw	r7,20(sp)
100050e4:	20feb20e 	bge	r4,r3,10004bb0 <__alt_data_end+0xf8004bb0>
100050e8:	117ffe04 	addi	r5,r2,-8
100050ec:	a162983a 	sll	r17,r20,r5
100050f0:	0027883a 	mov	r19,zero
100050f4:	003eb506 	br	10004bcc <__alt_data_end+0xf8004bcc>
100050f8:	3009883a 	mov	r4,r6
100050fc:	d9800215 	stw	r6,8(sp)
10005100:	da000315 	stw	r8,12(sp)
10005104:	da400415 	stw	r9,16(sp)
10005108:	00068b80 	call	100068b8 <__clzsi2>
1000510c:	10c00804 	addi	r3,r2,32
10005110:	010009c4 	movi	r4,39
10005114:	d9800217 	ldw	r6,8(sp)
10005118:	da000317 	ldw	r8,12(sp)
1000511c:	da400417 	ldw	r9,16(sp)
10005120:	20fec10e 	bge	r4,r3,10004c28 <__alt_data_end+0xf8004c28>
10005124:	10bffe04 	addi	r2,r2,-8
10005128:	a8a0983a 	sll	r16,r21,r2
1000512c:	002b883a 	mov	r21,zero
10005130:	003ec406 	br	10004c44 <__alt_data_end+0xf8004c44>
10005134:	d8c00117 	ldw	r3,4(sp)
10005138:	b0ed883a 	add	r22,r22,r3
1000513c:	b0c5803a 	cmpltu	r2,r22,r3
10005140:	15c5883a 	add	r2,r2,r23
10005144:	11cf883a 	add	r7,r2,r7
10005148:	88bfffc4 	addi	r2,r17,-1
1000514c:	b9c00d2e 	bgeu	r23,r7,10005184 <__divdf3+0x7c8>
10005150:	39003f36 	bltu	r7,r4,10005250 <__divdf3+0x894>
10005154:	21c06a26 	beq	r4,r7,10005300 <__divdf3+0x944>
10005158:	3909c83a 	sub	r4,r7,r4
1000515c:	1023883a 	mov	r17,r2
10005160:	003f4f06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10005164:	9d7ee536 	bltu	r19,r21,10004cfc <__alt_data_end+0xf8004cfc>
10005168:	982ed07a 	srli	r23,r19,1
1000516c:	880497fa 	slli	r2,r17,31
10005170:	8810d07a 	srli	r8,r17,1
10005174:	982c97fa 	slli	r22,r19,31
10005178:	b884b03a 	or	r2,r23,r2
1000517c:	d8800015 	stw	r2,0(sp)
10005180:	003ee206 	br	10004d0c <__alt_data_end+0xf8004d0c>
10005184:	3dfff41e 	bne	r7,r23,10005158 <__alt_data_end+0xf8005158>
10005188:	d8c00117 	ldw	r3,4(sp)
1000518c:	b0fff02e 	bgeu	r22,r3,10005150 <__alt_data_end+0xf8005150>
10005190:	b909c83a 	sub	r4,r23,r4
10005194:	1023883a 	mov	r17,r2
10005198:	003f4106 	br	10004ea0 <__alt_data_end+0xf8004ea0>
1000519c:	1021883a 	mov	r16,r2
100051a0:	003f1106 	br	10004de8 <__alt_data_end+0xf8004de8>
100051a4:	1023883a 	mov	r17,r2
100051a8:	003ef706 	br	10004d88 <__alt_data_end+0xf8004d88>
100051ac:	b23fe136 	bltu	r22,r8,10005134 <__alt_data_end+0xf8005134>
100051b0:	0009883a 	mov	r4,zero
100051b4:	003f3a06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
100051b8:	38802c36 	bltu	r7,r2,1000526c <__divdf3+0x8b0>
100051bc:	11c05326 	beq	r2,r7,1000530c <__divdf3+0x950>
100051c0:	2827883a 	mov	r19,r5
100051c4:	003f8d06 	br	10004ffc <__alt_data_end+0xf8004ffc>
100051c8:	04ffffc4 	movi	r19,-1
100051cc:	003f8c06 	br	10005000 <__alt_data_end+0xf8005000>
100051d0:	1011883a 	mov	r8,r2
100051d4:	003f4d06 	br	10004f0c <__alt_data_end+0xf8004f0c>
100051d8:	1013883a 	mov	r9,r2
100051dc:	003f6406 	br	10004f70 <__alt_data_end+0xf8004f70>
100051e0:	e029883a 	mov	r20,fp
100051e4:	003f8606 	br	10005000 <__alt_data_end+0xf8005000>
100051e8:	008007c4 	movi	r2,31
100051ec:	14002a16 	blt	r2,r16,10005298 <__divdf3+0x8dc>
100051f0:	91410784 	addi	r5,r18,1054
100051f4:	9c0cd83a 	srl	r6,r19,r16
100051f8:	8948983a 	sll	r4,r17,r5
100051fc:	9944983a 	sll	r2,r19,r5
10005200:	8c20d83a 	srl	r16,r17,r16
10005204:	3108b03a 	or	r4,r6,r4
10005208:	1004c03a 	cmpne	r2,r2,zero
1000520c:	2084b03a 	or	r2,r4,r2
10005210:	110001cc 	andi	r4,r2,7
10005214:	20000726 	beq	r4,zero,10005234 <__divdf3+0x878>
10005218:	114003cc 	andi	r5,r2,15
1000521c:	01000104 	movi	r4,4
10005220:	29000426 	beq	r5,r4,10005234 <__divdf3+0x878>
10005224:	11000104 	addi	r4,r2,4
10005228:	2085803a 	cmpltu	r2,r4,r2
1000522c:	80a1883a 	add	r16,r16,r2
10005230:	2005883a 	mov	r2,r4
10005234:	8100202c 	andhi	r4,r16,128
10005238:	20002d26 	beq	r4,zero,100052f0 <__divdf3+0x934>
1000523c:	a180004c 	andi	r6,r20,1
10005240:	02000044 	movi	r8,1
10005244:	000b883a 	mov	r5,zero
10005248:	0027883a 	mov	r19,zero
1000524c:	003e3906 	br	10004b34 <__alt_data_end+0xf8004b34>
10005250:	d8c00117 	ldw	r3,4(sp)
10005254:	8c7fff84 	addi	r17,r17,-2
10005258:	b0ed883a 	add	r22,r22,r3
1000525c:	b0c5803a 	cmpltu	r2,r22,r3
10005260:	15c5883a 	add	r2,r2,r23
10005264:	11cf883a 	add	r7,r2,r7
10005268:	003f0c06 	br	10004e9c <__alt_data_end+0xf8004e9c>
1000526c:	d8c00117 	ldw	r3,4(sp)
10005270:	997fff84 	addi	r5,r19,-2
10005274:	18d1883a 	add	r8,r3,r3
10005278:	40c7803a 	cmpltu	r3,r8,r3
1000527c:	1dcd883a 	add	r6,r3,r23
10005280:	398f883a 	add	r7,r7,r6
10005284:	da000115 	stw	r8,4(sp)
10005288:	003f8a06 	br	100050b4 <__alt_data_end+0xf80050b4>
1000528c:	203f861e 	bne	r4,zero,100050a8 <__alt_data_end+0xf80050a8>
10005290:	d8000115 	stw	zero,4(sp)
10005294:	003f8906 	br	100050bc <__alt_data_end+0xf80050bc>
10005298:	00bef884 	movi	r2,-1054
1000529c:	1485c83a 	sub	r2,r2,r18
100052a0:	01000804 	movi	r4,32
100052a4:	8884d83a 	srl	r2,r17,r2
100052a8:	81001c26 	beq	r16,r4,1000531c <__divdf3+0x960>
100052ac:	91010f84 	addi	r4,r18,1086
100052b0:	8908983a 	sll	r4,r17,r4
100052b4:	24c8b03a 	or	r4,r4,r19
100052b8:	2008c03a 	cmpne	r4,r4,zero
100052bc:	2084b03a 	or	r2,r4,r2
100052c0:	140001cc 	andi	r16,r2,7
100052c4:	8000061e 	bne	r16,zero,100052e0 <__divdf3+0x924>
100052c8:	000b883a 	mov	r5,zero
100052cc:	1004d0fa 	srli	r2,r2,3
100052d0:	a180004c 	andi	r6,r20,1
100052d4:	0011883a 	mov	r8,zero
100052d8:	1426b03a 	or	r19,r2,r16
100052dc:	003e1506 	br	10004b34 <__alt_data_end+0xf8004b34>
100052e0:	114003cc 	andi	r5,r2,15
100052e4:	01000104 	movi	r4,4
100052e8:	0021883a 	mov	r16,zero
100052ec:	293fcd1e 	bne	r5,r4,10005224 <__alt_data_end+0xf8005224>
100052f0:	800a927a 	slli	r5,r16,9
100052f4:	8020977a 	slli	r16,r16,29
100052f8:	280ad33a 	srli	r5,r5,12
100052fc:	003ff306 	br	100052cc <__alt_data_end+0xf80052cc>
10005300:	b23fd336 	bltu	r22,r8,10005250 <__alt_data_end+0xf8005250>
10005304:	1023883a 	mov	r17,r2
10005308:	003fa906 	br	100051b0 <__alt_data_end+0xf80051b0>
1000530c:	d8c00117 	ldw	r3,4(sp)
10005310:	193fd636 	bltu	r3,r4,1000526c <__alt_data_end+0xf800526c>
10005314:	2827883a 	mov	r19,r5
10005318:	003f6806 	br	100050bc <__alt_data_end+0xf80050bc>
1000531c:	0009883a 	mov	r4,zero
10005320:	003fe406 	br	100052b4 <__alt_data_end+0xf80052b4>
10005324:	00800434 	movhi	r2,16
10005328:	89400234 	orhi	r5,r17,8
1000532c:	10bfffc4 	addi	r2,r2,-1
10005330:	e00d883a 	mov	r6,fp
10005334:	288a703a 	and	r5,r5,r2
10005338:	003e5806 	br	10004c9c <__alt_data_end+0xf8004c9c>

1000533c <__eqdf2>:
1000533c:	2804d53a 	srli	r2,r5,20
10005340:	3806d53a 	srli	r3,r7,20
10005344:	02000434 	movhi	r8,16
10005348:	423fffc4 	addi	r8,r8,-1
1000534c:	1081ffcc 	andi	r2,r2,2047
10005350:	0241ffc4 	movi	r9,2047
10005354:	2a14703a 	and	r10,r5,r8
10005358:	18c1ffcc 	andi	r3,r3,2047
1000535c:	3a10703a 	and	r8,r7,r8
10005360:	280ad7fa 	srli	r5,r5,31
10005364:	380ed7fa 	srli	r7,r7,31
10005368:	12400f26 	beq	r2,r9,100053a8 <__eqdf2+0x6c>
1000536c:	0241ffc4 	movi	r9,2047
10005370:	1a400326 	beq	r3,r9,10005380 <__eqdf2+0x44>
10005374:	10c00526 	beq	r2,r3,1000538c <__eqdf2+0x50>
10005378:	00800044 	movi	r2,1
1000537c:	f800283a 	ret
10005380:	4192b03a 	or	r9,r8,r6
10005384:	483ffc1e 	bne	r9,zero,10005378 <__alt_data_end+0xf8005378>
10005388:	10fffb1e 	bne	r2,r3,10005378 <__alt_data_end+0xf8005378>
1000538c:	523ffa1e 	bne	r10,r8,10005378 <__alt_data_end+0xf8005378>
10005390:	21bff91e 	bne	r4,r6,10005378 <__alt_data_end+0xf8005378>
10005394:	29c00826 	beq	r5,r7,100053b8 <__eqdf2+0x7c>
10005398:	103ff71e 	bne	r2,zero,10005378 <__alt_data_end+0xf8005378>
1000539c:	5104b03a 	or	r2,r10,r4
100053a0:	1004c03a 	cmpne	r2,r2,zero
100053a4:	f800283a 	ret
100053a8:	5112b03a 	or	r9,r10,r4
100053ac:	483fef26 	beq	r9,zero,1000536c <__alt_data_end+0xf800536c>
100053b0:	00800044 	movi	r2,1
100053b4:	f800283a 	ret
100053b8:	0005883a 	mov	r2,zero
100053bc:	f800283a 	ret

100053c0 <__gedf2>:
100053c0:	2804d53a 	srli	r2,r5,20
100053c4:	3806d53a 	srli	r3,r7,20
100053c8:	02000434 	movhi	r8,16
100053cc:	423fffc4 	addi	r8,r8,-1
100053d0:	0241ffc4 	movi	r9,2047
100053d4:	1081ffcc 	andi	r2,r2,2047
100053d8:	2a14703a 	and	r10,r5,r8
100053dc:	1a46703a 	and	r3,r3,r9
100053e0:	3a10703a 	and	r8,r7,r8
100053e4:	280ad7fa 	srli	r5,r5,31
100053e8:	380ed7fa 	srli	r7,r7,31
100053ec:	12400b26 	beq	r2,r9,1000541c <__gedf2+0x5c>
100053f0:	1a401626 	beq	r3,r9,1000544c <__gedf2+0x8c>
100053f4:	10000c1e 	bne	r2,zero,10005428 <__gedf2+0x68>
100053f8:	5112b03a 	or	r9,r10,r4
100053fc:	4813003a 	cmpeq	r9,r9,zero
10005400:	4817883a 	mov	r11,r9
10005404:	18000c1e 	bne	r3,zero,10005438 <__gedf2+0x78>
10005408:	4198b03a 	or	r12,r8,r6
1000540c:	60000a1e 	bne	r12,zero,10005438 <__gedf2+0x78>
10005410:	48001326 	beq	r9,zero,10005460 <__gedf2+0xa0>
10005414:	0005883a 	mov	r2,zero
10005418:	f800283a 	ret
1000541c:	5112b03a 	or	r9,r10,r4
10005420:	4800191e 	bne	r9,zero,10005488 <__gedf2+0xc8>
10005424:	18800926 	beq	r3,r2,1000544c <__gedf2+0x8c>
10005428:	18000b1e 	bne	r3,zero,10005458 <__gedf2+0x98>
1000542c:	4192b03a 	or	r9,r8,r6
10005430:	0017883a 	mov	r11,zero
10005434:	48000a26 	beq	r9,zero,10005460 <__gedf2+0xa0>
10005438:	39c03fcc 	andi	r7,r7,255
1000543c:	58000726 	beq	r11,zero,1000545c <__gedf2+0x9c>
10005440:	3800081e 	bne	r7,zero,10005464 <__gedf2+0xa4>
10005444:	00bfffc4 	movi	r2,-1
10005448:	f800283a 	ret
1000544c:	4192b03a 	or	r9,r8,r6
10005450:	48000d1e 	bne	r9,zero,10005488 <__gedf2+0xc8>
10005454:	103fe826 	beq	r2,zero,100053f8 <__alt_data_end+0xf80053f8>
10005458:	39c03fcc 	andi	r7,r7,255
1000545c:	29c00326 	beq	r5,r7,1000546c <__gedf2+0xac>
10005460:	283ff81e 	bne	r5,zero,10005444 <__alt_data_end+0xf8005444>
10005464:	00800044 	movi	r2,1
10005468:	f800283a 	ret
1000546c:	18bffc16 	blt	r3,r2,10005460 <__alt_data_end+0xf8005460>
10005470:	10c00316 	blt	r2,r3,10005480 <__gedf2+0xc0>
10005474:	42bffa36 	bltu	r8,r10,10005460 <__alt_data_end+0xf8005460>
10005478:	52000526 	beq	r10,r8,10005490 <__gedf2+0xd0>
1000547c:	523fe52e 	bgeu	r10,r8,10005414 <__alt_data_end+0xf8005414>
10005480:	283ff026 	beq	r5,zero,10005444 <__alt_data_end+0xf8005444>
10005484:	003ff706 	br	10005464 <__alt_data_end+0xf8005464>
10005488:	00bfff84 	movi	r2,-2
1000548c:	f800283a 	ret
10005490:	313ff336 	bltu	r6,r4,10005460 <__alt_data_end+0xf8005460>
10005494:	21bfdf2e 	bgeu	r4,r6,10005414 <__alt_data_end+0xf8005414>
10005498:	283fea26 	beq	r5,zero,10005444 <__alt_data_end+0xf8005444>
1000549c:	003ff106 	br	10005464 <__alt_data_end+0xf8005464>

100054a0 <__ledf2>:
100054a0:	2804d53a 	srli	r2,r5,20
100054a4:	3810d53a 	srli	r8,r7,20
100054a8:	00c00434 	movhi	r3,16
100054ac:	18ffffc4 	addi	r3,r3,-1
100054b0:	0241ffc4 	movi	r9,2047
100054b4:	1081ffcc 	andi	r2,r2,2047
100054b8:	28d4703a 	and	r10,r5,r3
100054bc:	4250703a 	and	r8,r8,r9
100054c0:	38c6703a 	and	r3,r7,r3
100054c4:	280ad7fa 	srli	r5,r5,31
100054c8:	380ed7fa 	srli	r7,r7,31
100054cc:	12400b26 	beq	r2,r9,100054fc <__ledf2+0x5c>
100054d0:	42401926 	beq	r8,r9,10005538 <__ledf2+0x98>
100054d4:	10000c1e 	bne	r2,zero,10005508 <__ledf2+0x68>
100054d8:	5112b03a 	or	r9,r10,r4
100054dc:	4813003a 	cmpeq	r9,r9,zero
100054e0:	4817883a 	mov	r11,r9
100054e4:	40000f26 	beq	r8,zero,10005524 <__ledf2+0x84>
100054e8:	39c03fcc 	andi	r7,r7,255
100054ec:	58001826 	beq	r11,zero,10005550 <__ledf2+0xb0>
100054f0:	38000a1e 	bne	r7,zero,1000551c <__ledf2+0x7c>
100054f4:	00bfffc4 	movi	r2,-1
100054f8:	f800283a 	ret
100054fc:	5112b03a 	or	r9,r10,r4
10005500:	48000f1e 	bne	r9,zero,10005540 <__ledf2+0xa0>
10005504:	40800c26 	beq	r8,r2,10005538 <__ledf2+0x98>
10005508:	4000101e 	bne	r8,zero,1000554c <__ledf2+0xac>
1000550c:	1992b03a 	or	r9,r3,r6
10005510:	0017883a 	mov	r11,zero
10005514:	483ff41e 	bne	r9,zero,100054e8 <__alt_data_end+0xf80054e8>
10005518:	283ff61e 	bne	r5,zero,100054f4 <__alt_data_end+0xf80054f4>
1000551c:	00800044 	movi	r2,1
10005520:	f800283a 	ret
10005524:	1998b03a 	or	r12,r3,r6
10005528:	603fef1e 	bne	r12,zero,100054e8 <__alt_data_end+0xf80054e8>
1000552c:	483ffa26 	beq	r9,zero,10005518 <__alt_data_end+0xf8005518>
10005530:	0005883a 	mov	r2,zero
10005534:	f800283a 	ret
10005538:	1992b03a 	or	r9,r3,r6
1000553c:	48000226 	beq	r9,zero,10005548 <__ledf2+0xa8>
10005540:	00800084 	movi	r2,2
10005544:	f800283a 	ret
10005548:	103fe326 	beq	r2,zero,100054d8 <__alt_data_end+0xf80054d8>
1000554c:	39c03fcc 	andi	r7,r7,255
10005550:	29fff11e 	bne	r5,r7,10005518 <__alt_data_end+0xf8005518>
10005554:	40bff016 	blt	r8,r2,10005518 <__alt_data_end+0xf8005518>
10005558:	12000316 	blt	r2,r8,10005568 <__ledf2+0xc8>
1000555c:	1abfee36 	bltu	r3,r10,10005518 <__alt_data_end+0xf8005518>
10005560:	50c00326 	beq	r10,r3,10005570 <__ledf2+0xd0>
10005564:	50fff22e 	bgeu	r10,r3,10005530 <__alt_data_end+0xf8005530>
10005568:	283fe226 	beq	r5,zero,100054f4 <__alt_data_end+0xf80054f4>
1000556c:	003feb06 	br	1000551c <__alt_data_end+0xf800551c>
10005570:	313fe936 	bltu	r6,r4,10005518 <__alt_data_end+0xf8005518>
10005574:	21bfee2e 	bgeu	r4,r6,10005530 <__alt_data_end+0xf8005530>
10005578:	283fde26 	beq	r5,zero,100054f4 <__alt_data_end+0xf80054f4>
1000557c:	003fe706 	br	1000551c <__alt_data_end+0xf800551c>

10005580 <__muldf3>:
10005580:	deffee04 	addi	sp,sp,-72
10005584:	dd000c15 	stw	r20,48(sp)
10005588:	2828d53a 	srli	r20,r5,20
1000558c:	dd400d15 	stw	r21,52(sp)
10005590:	282ad7fa 	srli	r21,r5,31
10005594:	dc000815 	stw	r16,32(sp)
10005598:	04000434 	movhi	r16,16
1000559c:	ddc00f15 	stw	r23,60(sp)
100055a0:	dcc00b15 	stw	r19,44(sp)
100055a4:	dc800a15 	stw	r18,40(sp)
100055a8:	843fffc4 	addi	r16,r16,-1
100055ac:	dfc01115 	stw	ra,68(sp)
100055b0:	df001015 	stw	fp,64(sp)
100055b4:	dd800e15 	stw	r22,56(sp)
100055b8:	dc400915 	stw	r17,36(sp)
100055bc:	a501ffcc 	andi	r20,r20,2047
100055c0:	2025883a 	mov	r18,r4
100055c4:	202f883a 	mov	r23,r4
100055c8:	2c20703a 	and	r16,r5,r16
100055cc:	a827883a 	mov	r19,r21
100055d0:	aa403fcc 	andi	r9,r21,255
100055d4:	a0005926 	beq	r20,zero,1000573c <__muldf3+0x1bc>
100055d8:	0081ffc4 	movi	r2,2047
100055dc:	a0803426 	beq	r20,r2,100056b0 <__muldf3+0x130>
100055e0:	84000434 	orhi	r16,r16,16
100055e4:	2004d77a 	srli	r2,r4,29
100055e8:	802090fa 	slli	r16,r16,3
100055ec:	202e90fa 	slli	r23,r4,3
100055f0:	a53f0044 	addi	r20,r20,-1023
100055f4:	80a0b03a 	or	r16,r16,r2
100055f8:	000b883a 	mov	r5,zero
100055fc:	0039883a 	mov	fp,zero
10005600:	3806d53a 	srli	r3,r7,20
10005604:	382cd7fa 	srli	r22,r7,31
10005608:	00800434 	movhi	r2,16
1000560c:	10bfffc4 	addi	r2,r2,-1
10005610:	18c1ffcc 	andi	r3,r3,2047
10005614:	3025883a 	mov	r18,r6
10005618:	38a2703a 	and	r17,r7,r2
1000561c:	b2803fcc 	andi	r10,r22,255
10005620:	18006426 	beq	r3,zero,100057b4 <__muldf3+0x234>
10005624:	0081ffc4 	movi	r2,2047
10005628:	18805c26 	beq	r3,r2,1000579c <__muldf3+0x21c>
1000562c:	8c400434 	orhi	r17,r17,16
10005630:	3004d77a 	srli	r2,r6,29
10005634:	882290fa 	slli	r17,r17,3
10005638:	302490fa 	slli	r18,r6,3
1000563c:	18ff0044 	addi	r3,r3,-1023
10005640:	88a2b03a 	or	r17,r17,r2
10005644:	000f883a 	mov	r7,zero
10005648:	394ab03a 	or	r5,r7,r5
1000564c:	280a90ba 	slli	r5,r5,2
10005650:	00840034 	movhi	r2,4096
10005654:	10959c04 	addi	r2,r2,22128
10005658:	288b883a 	add	r5,r5,r2
1000565c:	28800017 	ldw	r2,0(r5)
10005660:	a0c7883a 	add	r3,r20,r3
10005664:	b54cf03a 	xor	r6,r22,r21
10005668:	1a000044 	addi	r8,r3,1
1000566c:	1000683a 	jmp	r2
10005670:	100058b4 	orhi	zero,r2,354
10005674:	100058a0 	cmpeqi	zero,r2,354
10005678:	100058a0 	cmpeqi	zero,r2,354
1000567c:	1000588c 	andi	zero,r2,354
10005680:	100056cc 	andi	zero,r2,347
10005684:	100056cc 	andi	zero,r2,347
10005688:	10005874 	orhi	zero,r2,353
1000568c:	1000588c 	andi	zero,r2,354
10005690:	100056cc 	andi	zero,r2,347
10005694:	10005874 	orhi	zero,r2,353
10005698:	100056cc 	andi	zero,r2,347
1000569c:	1000588c 	andi	zero,r2,354
100056a0:	100056d0 	cmplti	zero,r2,347
100056a4:	100056d0 	cmplti	zero,r2,347
100056a8:	100056d0 	cmplti	zero,r2,347
100056ac:	10005bf0 	cmpltui	zero,r2,367
100056b0:	8104b03a 	or	r2,r16,r4
100056b4:	10006c1e 	bne	r2,zero,10005868 <__muldf3+0x2e8>
100056b8:	01400204 	movi	r5,8
100056bc:	0021883a 	mov	r16,zero
100056c0:	002f883a 	mov	r23,zero
100056c4:	07000084 	movi	fp,2
100056c8:	003fcd06 	br	10005600 <__alt_data_end+0xf8005600>
100056cc:	3013883a 	mov	r9,r6
100056d0:	00800084 	movi	r2,2
100056d4:	e080501e 	bne	fp,r2,10005818 <__muldf3+0x298>
100056d8:	4cc0004c 	andi	r19,r9,1
100056dc:	0101ffc4 	movi	r4,2047
100056e0:	0021883a 	mov	r16,zero
100056e4:	002f883a 	mov	r23,zero
100056e8:	2008953a 	slli	r4,r4,20
100056ec:	98c03fcc 	andi	r3,r19,255
100056f0:	04400434 	movhi	r17,16
100056f4:	8c7fffc4 	addi	r17,r17,-1
100056f8:	180697fa 	slli	r3,r3,31
100056fc:	8460703a 	and	r16,r16,r17
10005700:	8120b03a 	or	r16,r16,r4
10005704:	80c6b03a 	or	r3,r16,r3
10005708:	b805883a 	mov	r2,r23
1000570c:	dfc01117 	ldw	ra,68(sp)
10005710:	df001017 	ldw	fp,64(sp)
10005714:	ddc00f17 	ldw	r23,60(sp)
10005718:	dd800e17 	ldw	r22,56(sp)
1000571c:	dd400d17 	ldw	r21,52(sp)
10005720:	dd000c17 	ldw	r20,48(sp)
10005724:	dcc00b17 	ldw	r19,44(sp)
10005728:	dc800a17 	ldw	r18,40(sp)
1000572c:	dc400917 	ldw	r17,36(sp)
10005730:	dc000817 	ldw	r16,32(sp)
10005734:	dec01204 	addi	sp,sp,72
10005738:	f800283a 	ret
1000573c:	8104b03a 	or	r2,r16,r4
10005740:	10004426 	beq	r2,zero,10005854 <__muldf3+0x2d4>
10005744:	80014b26 	beq	r16,zero,10005c74 <__muldf3+0x6f4>
10005748:	8009883a 	mov	r4,r16
1000574c:	d9800715 	stw	r6,28(sp)
10005750:	d9c00215 	stw	r7,8(sp)
10005754:	da400415 	stw	r9,16(sp)
10005758:	00068b80 	call	100068b8 <__clzsi2>
1000575c:	d9800717 	ldw	r6,28(sp)
10005760:	d9c00217 	ldw	r7,8(sp)
10005764:	da400417 	ldw	r9,16(sp)
10005768:	1007883a 	mov	r3,r2
1000576c:	01000a04 	movi	r4,40
10005770:	1dfffe04 	addi	r23,r3,-8
10005774:	20c9c83a 	sub	r4,r4,r3
10005778:	85e0983a 	sll	r16,r16,r23
1000577c:	9108d83a 	srl	r4,r18,r4
10005780:	95ee983a 	sll	r23,r18,r23
10005784:	2420b03a 	or	r16,r4,r16
10005788:	053f0344 	movi	r20,-1011
1000578c:	a0e9c83a 	sub	r20,r20,r3
10005790:	000b883a 	mov	r5,zero
10005794:	0039883a 	mov	fp,zero
10005798:	003f9906 	br	10005600 <__alt_data_end+0xf8005600>
1000579c:	8984b03a 	or	r2,r17,r6
100057a0:	10002a1e 	bne	r2,zero,1000584c <__muldf3+0x2cc>
100057a4:	0023883a 	mov	r17,zero
100057a8:	0025883a 	mov	r18,zero
100057ac:	01c00084 	movi	r7,2
100057b0:	003fa506 	br	10005648 <__alt_data_end+0xf8005648>
100057b4:	8984b03a 	or	r2,r17,r6
100057b8:	10002026 	beq	r2,zero,1000583c <__muldf3+0x2bc>
100057bc:	88011c26 	beq	r17,zero,10005c30 <__muldf3+0x6b0>
100057c0:	8809883a 	mov	r4,r17
100057c4:	d9400215 	stw	r5,8(sp)
100057c8:	d9800715 	stw	r6,28(sp)
100057cc:	da400415 	stw	r9,16(sp)
100057d0:	da800315 	stw	r10,12(sp)
100057d4:	00068b80 	call	100068b8 <__clzsi2>
100057d8:	d9400217 	ldw	r5,8(sp)
100057dc:	d9800717 	ldw	r6,28(sp)
100057e0:	da400417 	ldw	r9,16(sp)
100057e4:	da800317 	ldw	r10,12(sp)
100057e8:	1007883a 	mov	r3,r2
100057ec:	01000a04 	movi	r4,40
100057f0:	1cbffe04 	addi	r18,r3,-8
100057f4:	20c9c83a 	sub	r4,r4,r3
100057f8:	8ca2983a 	sll	r17,r17,r18
100057fc:	3108d83a 	srl	r4,r6,r4
10005800:	34a4983a 	sll	r18,r6,r18
10005804:	2462b03a 	or	r17,r4,r17
10005808:	00bf0344 	movi	r2,-1011
1000580c:	10c7c83a 	sub	r3,r2,r3
10005810:	000f883a 	mov	r7,zero
10005814:	003f8c06 	br	10005648 <__alt_data_end+0xf8005648>
10005818:	008000c4 	movi	r2,3
1000581c:	e0816d26 	beq	fp,r2,10005dd4 <__muldf3+0x854>
10005820:	00800044 	movi	r2,1
10005824:	e081321e 	bne	fp,r2,10005cf0 <__muldf3+0x770>
10005828:	48a6703a 	and	r19,r9,r2
1000582c:	0009883a 	mov	r4,zero
10005830:	0021883a 	mov	r16,zero
10005834:	002f883a 	mov	r23,zero
10005838:	003fab06 	br	100056e8 <__alt_data_end+0xf80056e8>
1000583c:	0023883a 	mov	r17,zero
10005840:	0025883a 	mov	r18,zero
10005844:	01c00044 	movi	r7,1
10005848:	003f7f06 	br	10005648 <__alt_data_end+0xf8005648>
1000584c:	01c000c4 	movi	r7,3
10005850:	003f7d06 	br	10005648 <__alt_data_end+0xf8005648>
10005854:	01400104 	movi	r5,4
10005858:	0021883a 	mov	r16,zero
1000585c:	002f883a 	mov	r23,zero
10005860:	07000044 	movi	fp,1
10005864:	003f6606 	br	10005600 <__alt_data_end+0xf8005600>
10005868:	01400304 	movi	r5,12
1000586c:	070000c4 	movi	fp,3
10005870:	003f6306 	br	10005600 <__alt_data_end+0xf8005600>
10005874:	04000434 	movhi	r16,16
10005878:	0027883a 	mov	r19,zero
1000587c:	843fffc4 	addi	r16,r16,-1
10005880:	05ffffc4 	movi	r23,-1
10005884:	0101ffc4 	movi	r4,2047
10005888:	003f9706 	br	100056e8 <__alt_data_end+0xf80056e8>
1000588c:	8821883a 	mov	r16,r17
10005890:	902f883a 	mov	r23,r18
10005894:	5013883a 	mov	r9,r10
10005898:	3839883a 	mov	fp,r7
1000589c:	003f8c06 	br	100056d0 <__alt_data_end+0xf80056d0>
100058a0:	8821883a 	mov	r16,r17
100058a4:	902f883a 	mov	r23,r18
100058a8:	3013883a 	mov	r9,r6
100058ac:	3839883a 	mov	fp,r7
100058b0:	003f8706 	br	100056d0 <__alt_data_end+0xf80056d0>
100058b4:	b82ad43a 	srli	r21,r23,16
100058b8:	9038d43a 	srli	fp,r18,16
100058bc:	bdffffcc 	andi	r23,r23,65535
100058c0:	94bfffcc 	andi	r18,r18,65535
100058c4:	9009883a 	mov	r4,r18
100058c8:	b80b883a 	mov	r5,r23
100058cc:	d8c00515 	stw	r3,20(sp)
100058d0:	d9800715 	stw	r6,28(sp)
100058d4:	da000615 	stw	r8,24(sp)
100058d8:	00040f80 	call	100040f8 <__mulsi3>
100058dc:	9009883a 	mov	r4,r18
100058e0:	a80b883a 	mov	r5,r21
100058e4:	1029883a 	mov	r20,r2
100058e8:	00040f80 	call	100040f8 <__mulsi3>
100058ec:	e009883a 	mov	r4,fp
100058f0:	a80b883a 	mov	r5,r21
100058f4:	102d883a 	mov	r22,r2
100058f8:	00040f80 	call	100040f8 <__mulsi3>
100058fc:	e009883a 	mov	r4,fp
10005900:	b80b883a 	mov	r5,r23
10005904:	1027883a 	mov	r19,r2
10005908:	00040f80 	call	100040f8 <__mulsi3>
1000590c:	a008d43a 	srli	r4,r20,16
10005910:	b085883a 	add	r2,r22,r2
10005914:	d8c00517 	ldw	r3,20(sp)
10005918:	110f883a 	add	r7,r2,r4
1000591c:	d9800717 	ldw	r6,28(sp)
10005920:	da000617 	ldw	r8,24(sp)
10005924:	3d80022e 	bgeu	r7,r22,10005930 <__muldf3+0x3b0>
10005928:	00800074 	movhi	r2,1
1000592c:	98a7883a 	add	r19,r19,r2
10005930:	3804943a 	slli	r2,r7,16
10005934:	380ed43a 	srli	r7,r7,16
10005938:	882cd43a 	srli	r22,r17,16
1000593c:	a53fffcc 	andi	r20,r20,65535
10005940:	8c7fffcc 	andi	r17,r17,65535
10005944:	1529883a 	add	r20,r2,r20
10005948:	8809883a 	mov	r4,r17
1000594c:	b80b883a 	mov	r5,r23
10005950:	d8c00515 	stw	r3,20(sp)
10005954:	d9800715 	stw	r6,28(sp)
10005958:	da000615 	stw	r8,24(sp)
1000595c:	d9c00015 	stw	r7,0(sp)
10005960:	dd000115 	stw	r20,4(sp)
10005964:	00040f80 	call	100040f8 <__mulsi3>
10005968:	a80b883a 	mov	r5,r21
1000596c:	8809883a 	mov	r4,r17
10005970:	d8800415 	stw	r2,16(sp)
10005974:	00040f80 	call	100040f8 <__mulsi3>
10005978:	a80b883a 	mov	r5,r21
1000597c:	b009883a 	mov	r4,r22
10005980:	1029883a 	mov	r20,r2
10005984:	00040f80 	call	100040f8 <__mulsi3>
10005988:	b009883a 	mov	r4,r22
1000598c:	b80b883a 	mov	r5,r23
10005990:	102b883a 	mov	r21,r2
10005994:	00040f80 	call	100040f8 <__mulsi3>
10005998:	da400417 	ldw	r9,16(sp)
1000599c:	a085883a 	add	r2,r20,r2
100059a0:	d8c00517 	ldw	r3,20(sp)
100059a4:	4808d43a 	srli	r4,r9,16
100059a8:	d9800717 	ldw	r6,28(sp)
100059ac:	da000617 	ldw	r8,24(sp)
100059b0:	1109883a 	add	r4,r2,r4
100059b4:	2500022e 	bgeu	r4,r20,100059c0 <__muldf3+0x440>
100059b8:	00800074 	movhi	r2,1
100059bc:	a8ab883a 	add	r21,r21,r2
100059c0:	200e943a 	slli	r7,r4,16
100059c4:	2004d43a 	srli	r2,r4,16
100059c8:	802ed43a 	srli	r23,r16,16
100059cc:	843fffcc 	andi	r16,r16,65535
100059d0:	4d3fffcc 	andi	r20,r9,65535
100059d4:	9009883a 	mov	r4,r18
100059d8:	800b883a 	mov	r5,r16
100059dc:	3d29883a 	add	r20,r7,r20
100059e0:	d8c00515 	stw	r3,20(sp)
100059e4:	d9800715 	stw	r6,28(sp)
100059e8:	da000615 	stw	r8,24(sp)
100059ec:	a8ab883a 	add	r21,r21,r2
100059f0:	00040f80 	call	100040f8 <__mulsi3>
100059f4:	9009883a 	mov	r4,r18
100059f8:	b80b883a 	mov	r5,r23
100059fc:	d8800315 	stw	r2,12(sp)
10005a00:	00040f80 	call	100040f8 <__mulsi3>
10005a04:	e009883a 	mov	r4,fp
10005a08:	b80b883a 	mov	r5,r23
10005a0c:	1025883a 	mov	r18,r2
10005a10:	00040f80 	call	100040f8 <__mulsi3>
10005a14:	e009883a 	mov	r4,fp
10005a18:	800b883a 	mov	r5,r16
10005a1c:	d8800215 	stw	r2,8(sp)
10005a20:	00040f80 	call	100040f8 <__mulsi3>
10005a24:	da800317 	ldw	r10,12(sp)
10005a28:	d9400017 	ldw	r5,0(sp)
10005a2c:	9085883a 	add	r2,r18,r2
10005a30:	5008d43a 	srli	r4,r10,16
10005a34:	a153883a 	add	r9,r20,r5
10005a38:	d8c00517 	ldw	r3,20(sp)
10005a3c:	1109883a 	add	r4,r2,r4
10005a40:	d9800717 	ldw	r6,28(sp)
10005a44:	da000617 	ldw	r8,24(sp)
10005a48:	dac00217 	ldw	r11,8(sp)
10005a4c:	2480022e 	bgeu	r4,r18,10005a58 <__muldf3+0x4d8>
10005a50:	00800074 	movhi	r2,1
10005a54:	5897883a 	add	r11,r11,r2
10005a58:	200e943a 	slli	r7,r4,16
10005a5c:	2038d43a 	srli	fp,r4,16
10005a60:	52bfffcc 	andi	r10,r10,65535
10005a64:	3a8f883a 	add	r7,r7,r10
10005a68:	8809883a 	mov	r4,r17
10005a6c:	800b883a 	mov	r5,r16
10005a70:	d8c00515 	stw	r3,20(sp)
10005a74:	d9800715 	stw	r6,28(sp)
10005a78:	d9c00215 	stw	r7,8(sp)
10005a7c:	da000615 	stw	r8,24(sp)
10005a80:	da400415 	stw	r9,16(sp)
10005a84:	5f39883a 	add	fp,r11,fp
10005a88:	00040f80 	call	100040f8 <__mulsi3>
10005a8c:	8809883a 	mov	r4,r17
10005a90:	b80b883a 	mov	r5,r23
10005a94:	1025883a 	mov	r18,r2
10005a98:	00040f80 	call	100040f8 <__mulsi3>
10005a9c:	b009883a 	mov	r4,r22
10005aa0:	b80b883a 	mov	r5,r23
10005aa4:	d8800315 	stw	r2,12(sp)
10005aa8:	00040f80 	call	100040f8 <__mulsi3>
10005aac:	b009883a 	mov	r4,r22
10005ab0:	800b883a 	mov	r5,r16
10005ab4:	1023883a 	mov	r17,r2
10005ab8:	00040f80 	call	100040f8 <__mulsi3>
10005abc:	da800317 	ldw	r10,12(sp)
10005ac0:	9008d43a 	srli	r4,r18,16
10005ac4:	d8c00517 	ldw	r3,20(sp)
10005ac8:	5085883a 	add	r2,r10,r2
10005acc:	1109883a 	add	r4,r2,r4
10005ad0:	d9800717 	ldw	r6,28(sp)
10005ad4:	d9c00217 	ldw	r7,8(sp)
10005ad8:	da000617 	ldw	r8,24(sp)
10005adc:	da400417 	ldw	r9,16(sp)
10005ae0:	2280022e 	bgeu	r4,r10,10005aec <__muldf3+0x56c>
10005ae4:	00800074 	movhi	r2,1
10005ae8:	88a3883a 	add	r17,r17,r2
10005aec:	2004943a 	slli	r2,r4,16
10005af0:	94bfffcc 	andi	r18,r18,65535
10005af4:	4ce7883a 	add	r19,r9,r19
10005af8:	14a5883a 	add	r18,r2,r18
10005afc:	9d29803a 	cmpltu	r20,r19,r20
10005b00:	9565883a 	add	r18,r18,r21
10005b04:	9505883a 	add	r2,r18,r20
10005b08:	99e7883a 	add	r19,r19,r7
10005b0c:	99cf803a 	cmpltu	r7,r19,r7
10005b10:	e08b883a 	add	r5,fp,r2
10005b14:	2008d43a 	srli	r4,r4,16
10005b18:	29ef883a 	add	r23,r5,r7
10005b1c:	1529803a 	cmpltu	r20,r2,r20
10005b20:	956b803a 	cmpltu	r21,r18,r21
10005b24:	b9cf803a 	cmpltu	r7,r23,r7
10005b28:	a564b03a 	or	r18,r20,r21
10005b2c:	2f39803a 	cmpltu	fp,r5,fp
10005b30:	9125883a 	add	r18,r18,r4
10005b34:	3f38b03a 	or	fp,r7,fp
10005b38:	9725883a 	add	r18,r18,fp
10005b3c:	9804927a 	slli	r2,r19,9
10005b40:	9463883a 	add	r17,r18,r17
10005b44:	d9000117 	ldw	r4,4(sp)
10005b48:	b820d5fa 	srli	r16,r23,23
10005b4c:	8822927a 	slli	r17,r17,9
10005b50:	9826d5fa 	srli	r19,r19,23
10005b54:	1104b03a 	or	r2,r2,r4
10005b58:	b82e927a 	slli	r23,r23,9
10005b5c:	1004c03a 	cmpne	r2,r2,zero
10005b60:	8c20b03a 	or	r16,r17,r16
10005b64:	14e6b03a 	or	r19,r2,r19
10005b68:	8080402c 	andhi	r2,r16,256
10005b6c:	9deeb03a 	or	r23,r19,r23
10005b70:	10000726 	beq	r2,zero,10005b90 <__muldf3+0x610>
10005b74:	b804d07a 	srli	r2,r23,1
10005b78:	800697fa 	slli	r3,r16,31
10005b7c:	bdc0004c 	andi	r23,r23,1
10005b80:	8020d07a 	srli	r16,r16,1
10005b84:	b8aeb03a 	or	r23,r23,r2
10005b88:	b8eeb03a 	or	r23,r23,r3
10005b8c:	4007883a 	mov	r3,r8
10005b90:	1900ffc4 	addi	r4,r3,1023
10005b94:	01004d0e 	bge	zero,r4,10005ccc <__muldf3+0x74c>
10005b98:	b88001cc 	andi	r2,r23,7
10005b9c:	10000726 	beq	r2,zero,10005bbc <__muldf3+0x63c>
10005ba0:	b94003cc 	andi	r5,r23,15
10005ba4:	00800104 	movi	r2,4
10005ba8:	28800426 	beq	r5,r2,10005bbc <__muldf3+0x63c>
10005bac:	b885883a 	add	r2,r23,r2
10005bb0:	15ef803a 	cmpltu	r23,r2,r23
10005bb4:	85e1883a 	add	r16,r16,r23
10005bb8:	102f883a 	mov	r23,r2
10005bbc:	8080402c 	andhi	r2,r16,256
10005bc0:	10000426 	beq	r2,zero,10005bd4 <__muldf3+0x654>
10005bc4:	00bfc034 	movhi	r2,65280
10005bc8:	10bfffc4 	addi	r2,r2,-1
10005bcc:	19010004 	addi	r4,r3,1024
10005bd0:	80a0703a 	and	r16,r16,r2
10005bd4:	0081ff84 	movi	r2,2046
10005bd8:	1100340e 	bge	r2,r4,10005cac <__muldf3+0x72c>
10005bdc:	34c0004c 	andi	r19,r6,1
10005be0:	0101ffc4 	movi	r4,2047
10005be4:	0021883a 	mov	r16,zero
10005be8:	002f883a 	mov	r23,zero
10005bec:	003ebe06 	br	100056e8 <__alt_data_end+0xf80056e8>
10005bf0:	8080022c 	andhi	r2,r16,8
10005bf4:	10000926 	beq	r2,zero,10005c1c <__muldf3+0x69c>
10005bf8:	8880022c 	andhi	r2,r17,8
10005bfc:	1000071e 	bne	r2,zero,10005c1c <__muldf3+0x69c>
10005c00:	00800434 	movhi	r2,16
10005c04:	8c000234 	orhi	r16,r17,8
10005c08:	10bfffc4 	addi	r2,r2,-1
10005c0c:	b027883a 	mov	r19,r22
10005c10:	80a0703a 	and	r16,r16,r2
10005c14:	902f883a 	mov	r23,r18
10005c18:	003f1a06 	br	10005884 <__alt_data_end+0xf8005884>
10005c1c:	00800434 	movhi	r2,16
10005c20:	84000234 	orhi	r16,r16,8
10005c24:	10bfffc4 	addi	r2,r2,-1
10005c28:	80a0703a 	and	r16,r16,r2
10005c2c:	003f1506 	br	10005884 <__alt_data_end+0xf8005884>
10005c30:	3009883a 	mov	r4,r6
10005c34:	d9400215 	stw	r5,8(sp)
10005c38:	d9800715 	stw	r6,28(sp)
10005c3c:	da400415 	stw	r9,16(sp)
10005c40:	da800315 	stw	r10,12(sp)
10005c44:	00068b80 	call	100068b8 <__clzsi2>
10005c48:	10c00804 	addi	r3,r2,32
10005c4c:	010009c4 	movi	r4,39
10005c50:	d9400217 	ldw	r5,8(sp)
10005c54:	d9800717 	ldw	r6,28(sp)
10005c58:	da400417 	ldw	r9,16(sp)
10005c5c:	da800317 	ldw	r10,12(sp)
10005c60:	20fee20e 	bge	r4,r3,100057ec <__alt_data_end+0xf80057ec>
10005c64:	147ffe04 	addi	r17,r2,-8
10005c68:	9462983a 	sll	r17,r18,r17
10005c6c:	0025883a 	mov	r18,zero
10005c70:	003ee506 	br	10005808 <__alt_data_end+0xf8005808>
10005c74:	d9800715 	stw	r6,28(sp)
10005c78:	d9c00215 	stw	r7,8(sp)
10005c7c:	da400415 	stw	r9,16(sp)
10005c80:	00068b80 	call	100068b8 <__clzsi2>
10005c84:	10c00804 	addi	r3,r2,32
10005c88:	010009c4 	movi	r4,39
10005c8c:	d9800717 	ldw	r6,28(sp)
10005c90:	d9c00217 	ldw	r7,8(sp)
10005c94:	da400417 	ldw	r9,16(sp)
10005c98:	20feb40e 	bge	r4,r3,1000576c <__alt_data_end+0xf800576c>
10005c9c:	143ffe04 	addi	r16,r2,-8
10005ca0:	9420983a 	sll	r16,r18,r16
10005ca4:	002f883a 	mov	r23,zero
10005ca8:	003eb706 	br	10005788 <__alt_data_end+0xf8005788>
10005cac:	8004977a 	slli	r2,r16,29
10005cb0:	b82ed0fa 	srli	r23,r23,3
10005cb4:	8020927a 	slli	r16,r16,9
10005cb8:	2101ffcc 	andi	r4,r4,2047
10005cbc:	15eeb03a 	or	r23,r2,r23
10005cc0:	8020d33a 	srli	r16,r16,12
10005cc4:	34c0004c 	andi	r19,r6,1
10005cc8:	003e8706 	br	100056e8 <__alt_data_end+0xf80056e8>
10005ccc:	00bf0084 	movi	r2,-1022
10005cd0:	10c5c83a 	sub	r2,r2,r3
10005cd4:	01000e04 	movi	r4,56
10005cd8:	2080080e 	bge	r4,r2,10005cfc <__muldf3+0x77c>
10005cdc:	34c0004c 	andi	r19,r6,1
10005ce0:	0009883a 	mov	r4,zero
10005ce4:	0021883a 	mov	r16,zero
10005ce8:	002f883a 	mov	r23,zero
10005cec:	003e7e06 	br	100056e8 <__alt_data_end+0xf80056e8>
10005cf0:	4007883a 	mov	r3,r8
10005cf4:	480d883a 	mov	r6,r9
10005cf8:	003fa506 	br	10005b90 <__alt_data_end+0xf8005b90>
10005cfc:	010007c4 	movi	r4,31
10005d00:	20801816 	blt	r4,r2,10005d64 <__muldf3+0x7e4>
10005d04:	18c10784 	addi	r3,r3,1054
10005d08:	80c8983a 	sll	r4,r16,r3
10005d0c:	b88ad83a 	srl	r5,r23,r2
10005d10:	b8c6983a 	sll	r3,r23,r3
10005d14:	80a0d83a 	srl	r16,r16,r2
10005d18:	2908b03a 	or	r4,r5,r4
10005d1c:	1804c03a 	cmpne	r2,r3,zero
10005d20:	2088b03a 	or	r4,r4,r2
10005d24:	208001cc 	andi	r2,r4,7
10005d28:	10000726 	beq	r2,zero,10005d48 <__muldf3+0x7c8>
10005d2c:	20c003cc 	andi	r3,r4,15
10005d30:	00800104 	movi	r2,4
10005d34:	18800426 	beq	r3,r2,10005d48 <__muldf3+0x7c8>
10005d38:	20c00104 	addi	r3,r4,4
10005d3c:	1905803a 	cmpltu	r2,r3,r4
10005d40:	80a1883a 	add	r16,r16,r2
10005d44:	1809883a 	mov	r4,r3
10005d48:	8080202c 	andhi	r2,r16,128
10005d4c:	10001b26 	beq	r2,zero,10005dbc <__muldf3+0x83c>
10005d50:	34c0004c 	andi	r19,r6,1
10005d54:	01000044 	movi	r4,1
10005d58:	0021883a 	mov	r16,zero
10005d5c:	002f883a 	mov	r23,zero
10005d60:	003e6106 	br	100056e8 <__alt_data_end+0xf80056e8>
10005d64:	013ef884 	movi	r4,-1054
10005d68:	20c9c83a 	sub	r4,r4,r3
10005d6c:	01400804 	movi	r5,32
10005d70:	8108d83a 	srl	r4,r16,r4
10005d74:	11401526 	beq	r2,r5,10005dcc <__muldf3+0x84c>
10005d78:	18c10f84 	addi	r3,r3,1086
10005d7c:	80e0983a 	sll	r16,r16,r3
10005d80:	85eeb03a 	or	r23,r16,r23
10005d84:	b804c03a 	cmpne	r2,r23,zero
10005d88:	1108b03a 	or	r4,r2,r4
10005d8c:	20c001cc 	andi	r3,r4,7
10005d90:	1800061e 	bne	r3,zero,10005dac <__muldf3+0x82c>
10005d94:	0021883a 	mov	r16,zero
10005d98:	202ed0fa 	srli	r23,r4,3
10005d9c:	34c0004c 	andi	r19,r6,1
10005da0:	0009883a 	mov	r4,zero
10005da4:	b8eeb03a 	or	r23,r23,r3
10005da8:	003e4f06 	br	100056e8 <__alt_data_end+0xf80056e8>
10005dac:	20c003cc 	andi	r3,r4,15
10005db0:	00800104 	movi	r2,4
10005db4:	0021883a 	mov	r16,zero
10005db8:	18bfdf1e 	bne	r3,r2,10005d38 <__alt_data_end+0xf8005d38>
10005dbc:	8004927a 	slli	r2,r16,9
10005dc0:	8006977a 	slli	r3,r16,29
10005dc4:	1020d33a 	srli	r16,r2,12
10005dc8:	003ff306 	br	10005d98 <__alt_data_end+0xf8005d98>
10005dcc:	0021883a 	mov	r16,zero
10005dd0:	003feb06 	br	10005d80 <__alt_data_end+0xf8005d80>
10005dd4:	00800434 	movhi	r2,16
10005dd8:	84000234 	orhi	r16,r16,8
10005ddc:	10bfffc4 	addi	r2,r2,-1
10005de0:	4cc0004c 	andi	r19,r9,1
10005de4:	80a0703a 	and	r16,r16,r2
10005de8:	003ea606 	br	10005884 <__alt_data_end+0xf8005884>

10005dec <__subdf3>:
10005dec:	00c00434 	movhi	r3,16
10005df0:	18ffffc4 	addi	r3,r3,-1
10005df4:	defffb04 	addi	sp,sp,-20
10005df8:	28d2703a 	and	r9,r5,r3
10005dfc:	3814d53a 	srli	r10,r7,20
10005e00:	38c6703a 	and	r3,r7,r3
10005e04:	3004d77a 	srli	r2,r6,29
10005e08:	dc800215 	stw	r18,8(sp)
10005e0c:	dc000015 	stw	r16,0(sp)
10005e10:	2824d7fa 	srli	r18,r5,31
10005e14:	2820d53a 	srli	r16,r5,20
10005e18:	481290fa 	slli	r9,r9,3
10005e1c:	200ad77a 	srli	r5,r4,29
10005e20:	180690fa 	slli	r3,r3,3
10005e24:	dc400115 	stw	r17,4(sp)
10005e28:	dfc00415 	stw	ra,16(sp)
10005e2c:	202290fa 	slli	r17,r4,3
10005e30:	dcc00315 	stw	r19,12(sp)
10005e34:	5281ffcc 	andi	r10,r10,2047
10005e38:	0101ffc4 	movi	r4,2047
10005e3c:	9011883a 	mov	r8,r18
10005e40:	8401ffcc 	andi	r16,r16,2047
10005e44:	94803fcc 	andi	r18,r18,255
10005e48:	494ab03a 	or	r5,r9,r5
10005e4c:	380ed7fa 	srli	r7,r7,31
10005e50:	1886b03a 	or	r3,r3,r2
10005e54:	300c90fa 	slli	r6,r6,3
10005e58:	51009026 	beq	r10,r4,1000609c <__subdf3+0x2b0>
10005e5c:	39c0005c 	xori	r7,r7,1
10005e60:	8285c83a 	sub	r2,r16,r10
10005e64:	91c06f26 	beq	r18,r7,10006024 <__subdf3+0x238>
10005e68:	0080b10e 	bge	zero,r2,10006130 <__subdf3+0x344>
10005e6c:	50002a1e 	bne	r10,zero,10005f18 <__subdf3+0x12c>
10005e70:	1988b03a 	or	r4,r3,r6
10005e74:	2000941e 	bne	r4,zero,100060c8 <__subdf3+0x2dc>
10005e78:	888001cc 	andi	r2,r17,7
10005e7c:	10005b26 	beq	r2,zero,10005fec <__subdf3+0x200>
10005e80:	88c003cc 	andi	r3,r17,15
10005e84:	00800104 	movi	r2,4
10005e88:	18805826 	beq	r3,r2,10005fec <__subdf3+0x200>
10005e8c:	88c00104 	addi	r3,r17,4
10005e90:	1c63803a 	cmpltu	r17,r3,r17
10005e94:	2c4b883a 	add	r5,r5,r17
10005e98:	2880202c 	andhi	r2,r5,128
10005e9c:	9200004c 	andi	r8,r18,1
10005ea0:	1823883a 	mov	r17,r3
10005ea4:	10005426 	beq	r2,zero,10005ff8 <__subdf3+0x20c>
10005ea8:	84000044 	addi	r16,r16,1
10005eac:	0081ffc4 	movi	r2,2047
10005eb0:	8080bf26 	beq	r16,r2,100061b0 <__subdf3+0x3c4>
10005eb4:	013fe034 	movhi	r4,65408
10005eb8:	213fffc4 	addi	r4,r4,-1
10005ebc:	290a703a 	and	r5,r5,r4
10005ec0:	2804977a 	slli	r2,r5,29
10005ec4:	280a927a 	slli	r5,r5,9
10005ec8:	8822d0fa 	srli	r17,r17,3
10005ecc:	8401ffcc 	andi	r16,r16,2047
10005ed0:	2808d33a 	srli	r4,r5,12
10005ed4:	1444b03a 	or	r2,r2,r17
10005ed8:	8401ffcc 	andi	r16,r16,2047
10005edc:	800a953a 	slli	r5,r16,20
10005ee0:	40c03fcc 	andi	r3,r8,255
10005ee4:	04000434 	movhi	r16,16
10005ee8:	180697fa 	slli	r3,r3,31
10005eec:	843fffc4 	addi	r16,r16,-1
10005ef0:	2420703a 	and	r16,r4,r16
10005ef4:	8160b03a 	or	r16,r16,r5
10005ef8:	80c6b03a 	or	r3,r16,r3
10005efc:	dfc00417 	ldw	ra,16(sp)
10005f00:	dcc00317 	ldw	r19,12(sp)
10005f04:	dc800217 	ldw	r18,8(sp)
10005f08:	dc400117 	ldw	r17,4(sp)
10005f0c:	dc000017 	ldw	r16,0(sp)
10005f10:	dec00504 	addi	sp,sp,20
10005f14:	f800283a 	ret
10005f18:	0101ffc4 	movi	r4,2047
10005f1c:	813fd626 	beq	r16,r4,10005e78 <__alt_data_end+0xf8005e78>
10005f20:	18c02034 	orhi	r3,r3,128
10005f24:	01000e04 	movi	r4,56
10005f28:	2080a416 	blt	r4,r2,100061bc <__subdf3+0x3d0>
10005f2c:	010007c4 	movi	r4,31
10005f30:	2080c716 	blt	r4,r2,10006250 <__subdf3+0x464>
10005f34:	01000804 	movi	r4,32
10005f38:	2089c83a 	sub	r4,r4,r2
10005f3c:	1910983a 	sll	r8,r3,r4
10005f40:	308ed83a 	srl	r7,r6,r2
10005f44:	3108983a 	sll	r4,r6,r4
10005f48:	1884d83a 	srl	r2,r3,r2
10005f4c:	41ccb03a 	or	r6,r8,r7
10005f50:	2008c03a 	cmpne	r4,r4,zero
10005f54:	310cb03a 	or	r6,r6,r4
10005f58:	898dc83a 	sub	r6,r17,r6
10005f5c:	89a3803a 	cmpltu	r17,r17,r6
10005f60:	288bc83a 	sub	r5,r5,r2
10005f64:	2c4bc83a 	sub	r5,r5,r17
10005f68:	3023883a 	mov	r17,r6
10005f6c:	2880202c 	andhi	r2,r5,128
10005f70:	10006b26 	beq	r2,zero,10006120 <__subdf3+0x334>
10005f74:	04c02034 	movhi	r19,128
10005f78:	9cffffc4 	addi	r19,r19,-1
10005f7c:	2ce6703a 	and	r19,r5,r19
10005f80:	98007c26 	beq	r19,zero,10006174 <__subdf3+0x388>
10005f84:	9809883a 	mov	r4,r19
10005f88:	00068b80 	call	100068b8 <__clzsi2>
10005f8c:	10fffe04 	addi	r3,r2,-8
10005f90:	010007c4 	movi	r4,31
10005f94:	20c07d16 	blt	r4,r3,1000618c <__subdf3+0x3a0>
10005f98:	01400a04 	movi	r5,40
10005f9c:	2885c83a 	sub	r2,r5,r2
10005fa0:	888ad83a 	srl	r5,r17,r2
10005fa4:	98e6983a 	sll	r19,r19,r3
10005fa8:	88e2983a 	sll	r17,r17,r3
10005fac:	2ce6b03a 	or	r19,r5,r19
10005fb0:	1c007a16 	blt	r3,r16,1000619c <__subdf3+0x3b0>
10005fb4:	1c21c83a 	sub	r16,r3,r16
10005fb8:	81400044 	addi	r5,r16,1
10005fbc:	00c007c4 	movi	r3,31
10005fc0:	19409616 	blt	r3,r5,1000621c <__subdf3+0x430>
10005fc4:	1c21c83a 	sub	r16,r3,r16
10005fc8:	8c08983a 	sll	r4,r17,r16
10005fcc:	8946d83a 	srl	r3,r17,r5
10005fd0:	9c20983a 	sll	r16,r19,r16
10005fd4:	2008c03a 	cmpne	r4,r4,zero
10005fd8:	994ad83a 	srl	r5,r19,r5
10005fdc:	1c06b03a 	or	r3,r3,r16
10005fe0:	1922b03a 	or	r17,r3,r4
10005fe4:	0021883a 	mov	r16,zero
10005fe8:	003fa306 	br	10005e78 <__alt_data_end+0xf8005e78>
10005fec:	2880202c 	andhi	r2,r5,128
10005ff0:	9200004c 	andi	r8,r18,1
10005ff4:	103fac1e 	bne	r2,zero,10005ea8 <__alt_data_end+0xf8005ea8>
10005ff8:	2804977a 	slli	r2,r5,29
10005ffc:	8822d0fa 	srli	r17,r17,3
10006000:	00c1ffc4 	movi	r3,2047
10006004:	280ad0fa 	srli	r5,r5,3
10006008:	1444b03a 	or	r2,r2,r17
1000600c:	80c02726 	beq	r16,r3,100060ac <__subdf3+0x2c0>
10006010:	01000434 	movhi	r4,16
10006014:	213fffc4 	addi	r4,r4,-1
10006018:	80e0703a 	and	r16,r16,r3
1000601c:	2908703a 	and	r4,r5,r4
10006020:	003fad06 	br	10005ed8 <__alt_data_end+0xf8005ed8>
10006024:	0080690e 	bge	zero,r2,100061cc <__subdf3+0x3e0>
10006028:	50002f26 	beq	r10,zero,100060e8 <__subdf3+0x2fc>
1000602c:	0101ffc4 	movi	r4,2047
10006030:	813f9126 	beq	r16,r4,10005e78 <__alt_data_end+0xf8005e78>
10006034:	18c02034 	orhi	r3,r3,128
10006038:	01000e04 	movi	r4,56
1000603c:	2080b00e 	bge	r4,r2,10006300 <__subdf3+0x514>
10006040:	198cb03a 	or	r6,r3,r6
10006044:	300ec03a 	cmpne	r7,r6,zero
10006048:	0005883a 	mov	r2,zero
1000604c:	3c4f883a 	add	r7,r7,r17
10006050:	3c63803a 	cmpltu	r17,r7,r17
10006054:	114b883a 	add	r5,r2,r5
10006058:	2c4b883a 	add	r5,r5,r17
1000605c:	3823883a 	mov	r17,r7
10006060:	2880202c 	andhi	r2,r5,128
10006064:	10002e26 	beq	r2,zero,10006120 <__subdf3+0x334>
10006068:	84000044 	addi	r16,r16,1
1000606c:	0081ffc4 	movi	r2,2047
10006070:	8080de26 	beq	r16,r2,100063ec <__subdf3+0x600>
10006074:	00bfe034 	movhi	r2,65408
10006078:	10bfffc4 	addi	r2,r2,-1
1000607c:	288a703a 	and	r5,r5,r2
10006080:	880cd07a 	srli	r6,r17,1
10006084:	280897fa 	slli	r4,r5,31
10006088:	88c0004c 	andi	r3,r17,1
1000608c:	30e2b03a 	or	r17,r6,r3
10006090:	280ad07a 	srli	r5,r5,1
10006094:	8922b03a 	or	r17,r17,r4
10006098:	003f7706 	br	10005e78 <__alt_data_end+0xf8005e78>
1000609c:	1984b03a 	or	r2,r3,r6
100060a0:	103f6e26 	beq	r2,zero,10005e5c <__alt_data_end+0xf8005e5c>
100060a4:	39c03fcc 	andi	r7,r7,255
100060a8:	003f6d06 	br	10005e60 <__alt_data_end+0xf8005e60>
100060ac:	1146b03a 	or	r3,r2,r5
100060b0:	18003f26 	beq	r3,zero,100061b0 <__subdf3+0x3c4>
100060b4:	00c00434 	movhi	r3,16
100060b8:	29000234 	orhi	r4,r5,8
100060bc:	18ffffc4 	addi	r3,r3,-1
100060c0:	20c8703a 	and	r4,r4,r3
100060c4:	003f8406 	br	10005ed8 <__alt_data_end+0xf8005ed8>
100060c8:	10bfffc4 	addi	r2,r2,-1
100060cc:	1000501e 	bne	r2,zero,10006210 <__subdf3+0x424>
100060d0:	898fc83a 	sub	r7,r17,r6
100060d4:	89e3803a 	cmpltu	r17,r17,r7
100060d8:	28cbc83a 	sub	r5,r5,r3
100060dc:	2c4bc83a 	sub	r5,r5,r17
100060e0:	3823883a 	mov	r17,r7
100060e4:	003fa106 	br	10005f6c <__alt_data_end+0xf8005f6c>
100060e8:	1988b03a 	or	r4,r3,r6
100060ec:	203f6226 	beq	r4,zero,10005e78 <__alt_data_end+0xf8005e78>
100060f0:	10bfffc4 	addi	r2,r2,-1
100060f4:	10009b1e 	bne	r2,zero,10006364 <__subdf3+0x578>
100060f8:	344d883a 	add	r6,r6,r17
100060fc:	3463803a 	cmpltu	r17,r6,r17
10006100:	194b883a 	add	r5,r3,r5
10006104:	2c4b883a 	add	r5,r5,r17
10006108:	3023883a 	mov	r17,r6
1000610c:	003fd406 	br	10006060 <__alt_data_end+0xf8006060>
10006110:	1106b03a 	or	r3,r2,r4
10006114:	1800b426 	beq	r3,zero,100063e8 <__subdf3+0x5fc>
10006118:	100b883a 	mov	r5,r2
1000611c:	2023883a 	mov	r17,r4
10006120:	888001cc 	andi	r2,r17,7
10006124:	103f561e 	bne	r2,zero,10005e80 <__alt_data_end+0xf8005e80>
10006128:	9200004c 	andi	r8,r18,1
1000612c:	003fb206 	br	10005ff8 <__alt_data_end+0xf8005ff8>
10006130:	1000531e 	bne	r2,zero,10006280 <__subdf3+0x494>
10006134:	80800044 	addi	r2,r16,1
10006138:	1081ffcc 	andi	r2,r2,2047
1000613c:	01000044 	movi	r4,1
10006140:	2080a00e 	bge	r4,r2,100063c4 <__subdf3+0x5d8>
10006144:	8985c83a 	sub	r2,r17,r6
10006148:	8889803a 	cmpltu	r4,r17,r2
1000614c:	28e7c83a 	sub	r19,r5,r3
10006150:	9927c83a 	sub	r19,r19,r4
10006154:	9900202c 	andhi	r4,r19,128
10006158:	20006226 	beq	r4,zero,100062e4 <__subdf3+0x4f8>
1000615c:	3463c83a 	sub	r17,r6,r17
10006160:	194bc83a 	sub	r5,r3,r5
10006164:	344d803a 	cmpltu	r6,r6,r17
10006168:	29a7c83a 	sub	r19,r5,r6
1000616c:	3825883a 	mov	r18,r7
10006170:	983f841e 	bne	r19,zero,10005f84 <__alt_data_end+0xf8005f84>
10006174:	8809883a 	mov	r4,r17
10006178:	00068b80 	call	100068b8 <__clzsi2>
1000617c:	10800804 	addi	r2,r2,32
10006180:	10fffe04 	addi	r3,r2,-8
10006184:	010007c4 	movi	r4,31
10006188:	20ff830e 	bge	r4,r3,10005f98 <__alt_data_end+0xf8005f98>
1000618c:	14fff604 	addi	r19,r2,-40
10006190:	8ce6983a 	sll	r19,r17,r19
10006194:	0023883a 	mov	r17,zero
10006198:	1c3f860e 	bge	r3,r16,10005fb4 <__alt_data_end+0xf8005fb4>
1000619c:	017fe034 	movhi	r5,65408
100061a0:	297fffc4 	addi	r5,r5,-1
100061a4:	80e1c83a 	sub	r16,r16,r3
100061a8:	994a703a 	and	r5,r19,r5
100061ac:	003f3206 	br	10005e78 <__alt_data_end+0xf8005e78>
100061b0:	0009883a 	mov	r4,zero
100061b4:	0005883a 	mov	r2,zero
100061b8:	003f4706 	br	10005ed8 <__alt_data_end+0xf8005ed8>
100061bc:	198cb03a 	or	r6,r3,r6
100061c0:	300cc03a 	cmpne	r6,r6,zero
100061c4:	0005883a 	mov	r2,zero
100061c8:	003f6306 	br	10005f58 <__alt_data_end+0xf8005f58>
100061cc:	10009d1e 	bne	r2,zero,10006444 <__subdf3+0x658>
100061d0:	81c00044 	addi	r7,r16,1
100061d4:	3881ffcc 	andi	r2,r7,2047
100061d8:	02400044 	movi	r9,1
100061dc:	4880680e 	bge	r9,r2,10006380 <__subdf3+0x594>
100061e0:	0081ffc4 	movi	r2,2047
100061e4:	3880ae26 	beq	r7,r2,100064a0 <__subdf3+0x6b4>
100061e8:	344d883a 	add	r6,r6,r17
100061ec:	3463803a 	cmpltu	r17,r6,r17
100061f0:	194b883a 	add	r5,r3,r5
100061f4:	2c4b883a 	add	r5,r5,r17
100061f8:	282297fa 	slli	r17,r5,31
100061fc:	300cd07a 	srli	r6,r6,1
10006200:	280ad07a 	srli	r5,r5,1
10006204:	3821883a 	mov	r16,r7
10006208:	89a2b03a 	or	r17,r17,r6
1000620c:	003f1a06 	br	10005e78 <__alt_data_end+0xf8005e78>
10006210:	0101ffc4 	movi	r4,2047
10006214:	813f431e 	bne	r16,r4,10005f24 <__alt_data_end+0xf8005f24>
10006218:	003f1706 	br	10005e78 <__alt_data_end+0xf8005e78>
1000621c:	80bff844 	addi	r2,r16,-31
10006220:	00c00804 	movi	r3,32
10006224:	9884d83a 	srl	r2,r19,r2
10006228:	28c05126 	beq	r5,r3,10006370 <__subdf3+0x584>
1000622c:	00c00fc4 	movi	r3,63
10006230:	1c21c83a 	sub	r16,r3,r16
10006234:	9c26983a 	sll	r19,r19,r16
10006238:	9c62b03a 	or	r17,r19,r17
1000623c:	8822c03a 	cmpne	r17,r17,zero
10006240:	88a2b03a 	or	r17,r17,r2
10006244:	000b883a 	mov	r5,zero
10006248:	0021883a 	mov	r16,zero
1000624c:	003fb406 	br	10006120 <__alt_data_end+0xf8006120>
10006250:	113ff804 	addi	r4,r2,-32
10006254:	01c00804 	movi	r7,32
10006258:	1908d83a 	srl	r4,r3,r4
1000625c:	11c04626 	beq	r2,r7,10006378 <__subdf3+0x58c>
10006260:	01c01004 	movi	r7,64
10006264:	3885c83a 	sub	r2,r7,r2
10006268:	1884983a 	sll	r2,r3,r2
1000626c:	118cb03a 	or	r6,r2,r6
10006270:	300cc03a 	cmpne	r6,r6,zero
10006274:	310cb03a 	or	r6,r6,r4
10006278:	0005883a 	mov	r2,zero
1000627c:	003f3606 	br	10005f58 <__alt_data_end+0xf8005f58>
10006280:	80002b26 	beq	r16,zero,10006330 <__subdf3+0x544>
10006284:	0101ffc4 	movi	r4,2047
10006288:	51006926 	beq	r10,r4,10006430 <__subdf3+0x644>
1000628c:	0085c83a 	sub	r2,zero,r2
10006290:	29402034 	orhi	r5,r5,128
10006294:	01000e04 	movi	r4,56
10006298:	20807d16 	blt	r4,r2,10006490 <__subdf3+0x6a4>
1000629c:	010007c4 	movi	r4,31
100062a0:	2080d916 	blt	r4,r2,10006608 <__subdf3+0x81c>
100062a4:	01000804 	movi	r4,32
100062a8:	2089c83a 	sub	r4,r4,r2
100062ac:	2912983a 	sll	r9,r5,r4
100062b0:	8890d83a 	srl	r8,r17,r2
100062b4:	8908983a 	sll	r4,r17,r4
100062b8:	2884d83a 	srl	r2,r5,r2
100062bc:	4a22b03a 	or	r17,r9,r8
100062c0:	2008c03a 	cmpne	r4,r4,zero
100062c4:	8922b03a 	or	r17,r17,r4
100062c8:	3463c83a 	sub	r17,r6,r17
100062cc:	1885c83a 	sub	r2,r3,r2
100062d0:	344d803a 	cmpltu	r6,r6,r17
100062d4:	118bc83a 	sub	r5,r2,r6
100062d8:	5021883a 	mov	r16,r10
100062dc:	3825883a 	mov	r18,r7
100062e0:	003f2206 	br	10005f6c <__alt_data_end+0xf8005f6c>
100062e4:	9886b03a 	or	r3,r19,r2
100062e8:	18001c1e 	bne	r3,zero,1000635c <__subdf3+0x570>
100062ec:	0011883a 	mov	r8,zero
100062f0:	000b883a 	mov	r5,zero
100062f4:	0023883a 	mov	r17,zero
100062f8:	0021883a 	mov	r16,zero
100062fc:	003f3e06 	br	10005ff8 <__alt_data_end+0xf8005ff8>
10006300:	010007c4 	movi	r4,31
10006304:	20803c16 	blt	r4,r2,100063f8 <__subdf3+0x60c>
10006308:	01000804 	movi	r4,32
1000630c:	2089c83a 	sub	r4,r4,r2
10006310:	1912983a 	sll	r9,r3,r4
10006314:	308ed83a 	srl	r7,r6,r2
10006318:	3108983a 	sll	r4,r6,r4
1000631c:	1884d83a 	srl	r2,r3,r2
10006320:	49ceb03a 	or	r7,r9,r7
10006324:	2008c03a 	cmpne	r4,r4,zero
10006328:	390eb03a 	or	r7,r7,r4
1000632c:	003f4706 	br	1000604c <__alt_data_end+0xf800604c>
10006330:	2c48b03a 	or	r4,r5,r17
10006334:	20003e26 	beq	r4,zero,10006430 <__subdf3+0x644>
10006338:	0084303a 	nor	r2,zero,r2
1000633c:	10003a1e 	bne	r2,zero,10006428 <__subdf3+0x63c>
10006340:	3463c83a 	sub	r17,r6,r17
10006344:	194bc83a 	sub	r5,r3,r5
10006348:	344d803a 	cmpltu	r6,r6,r17
1000634c:	298bc83a 	sub	r5,r5,r6
10006350:	5021883a 	mov	r16,r10
10006354:	3825883a 	mov	r18,r7
10006358:	003f0406 	br	10005f6c <__alt_data_end+0xf8005f6c>
1000635c:	1023883a 	mov	r17,r2
10006360:	003f0706 	br	10005f80 <__alt_data_end+0xf8005f80>
10006364:	0101ffc4 	movi	r4,2047
10006368:	813f331e 	bne	r16,r4,10006038 <__alt_data_end+0xf8006038>
1000636c:	003ec206 	br	10005e78 <__alt_data_end+0xf8005e78>
10006370:	0027883a 	mov	r19,zero
10006374:	003fb006 	br	10006238 <__alt_data_end+0xf8006238>
10006378:	0005883a 	mov	r2,zero
1000637c:	003fbb06 	br	1000626c <__alt_data_end+0xf800626c>
10006380:	2c44b03a 	or	r2,r5,r17
10006384:	80008b1e 	bne	r16,zero,100065b4 <__subdf3+0x7c8>
10006388:	1000b526 	beq	r2,zero,10006660 <__subdf3+0x874>
1000638c:	1984b03a 	or	r2,r3,r6
10006390:	103eb926 	beq	r2,zero,10005e78 <__alt_data_end+0xf8005e78>
10006394:	3449883a 	add	r4,r6,r17
10006398:	2463803a 	cmpltu	r17,r4,r17
1000639c:	194b883a 	add	r5,r3,r5
100063a0:	2c4b883a 	add	r5,r5,r17
100063a4:	2880202c 	andhi	r2,r5,128
100063a8:	2023883a 	mov	r17,r4
100063ac:	103f5c26 	beq	r2,zero,10006120 <__alt_data_end+0xf8006120>
100063b0:	00bfe034 	movhi	r2,65408
100063b4:	10bfffc4 	addi	r2,r2,-1
100063b8:	4821883a 	mov	r16,r9
100063bc:	288a703a 	and	r5,r5,r2
100063c0:	003ead06 	br	10005e78 <__alt_data_end+0xf8005e78>
100063c4:	2c44b03a 	or	r2,r5,r17
100063c8:	8000291e 	bne	r16,zero,10006470 <__subdf3+0x684>
100063cc:	10004f1e 	bne	r2,zero,1000650c <__subdf3+0x720>
100063d0:	1984b03a 	or	r2,r3,r6
100063d4:	10000426 	beq	r2,zero,100063e8 <__subdf3+0x5fc>
100063d8:	180b883a 	mov	r5,r3
100063dc:	3023883a 	mov	r17,r6
100063e0:	3825883a 	mov	r18,r7
100063e4:	003ea406 	br	10005e78 <__alt_data_end+0xf8005e78>
100063e8:	0011883a 	mov	r8,zero
100063ec:	000b883a 	mov	r5,zero
100063f0:	0023883a 	mov	r17,zero
100063f4:	003f0006 	br	10005ff8 <__alt_data_end+0xf8005ff8>
100063f8:	11fff804 	addi	r7,r2,-32
100063fc:	19c8d83a 	srl	r4,r3,r7
10006400:	01c00804 	movi	r7,32
10006404:	11c07e26 	beq	r2,r7,10006600 <__subdf3+0x814>
10006408:	01c01004 	movi	r7,64
1000640c:	3885c83a 	sub	r2,r7,r2
10006410:	1884983a 	sll	r2,r3,r2
10006414:	118cb03a 	or	r6,r2,r6
10006418:	300ec03a 	cmpne	r7,r6,zero
1000641c:	390eb03a 	or	r7,r7,r4
10006420:	0005883a 	mov	r2,zero
10006424:	003f0906 	br	1000604c <__alt_data_end+0xf800604c>
10006428:	0101ffc4 	movi	r4,2047
1000642c:	513f991e 	bne	r10,r4,10006294 <__alt_data_end+0xf8006294>
10006430:	180b883a 	mov	r5,r3
10006434:	3023883a 	mov	r17,r6
10006438:	5021883a 	mov	r16,r10
1000643c:	3825883a 	mov	r18,r7
10006440:	003e8d06 	br	10005e78 <__alt_data_end+0xf8005e78>
10006444:	80001a1e 	bne	r16,zero,100064b0 <__subdf3+0x6c4>
10006448:	2c48b03a 	or	r4,r5,r17
1000644c:	20005526 	beq	r4,zero,100065a4 <__subdf3+0x7b8>
10006450:	0084303a 	nor	r2,zero,r2
10006454:	1000511e 	bne	r2,zero,1000659c <__subdf3+0x7b0>
10006458:	89a3883a 	add	r17,r17,r6
1000645c:	194b883a 	add	r5,r3,r5
10006460:	898d803a 	cmpltu	r6,r17,r6
10006464:	298b883a 	add	r5,r5,r6
10006468:	5021883a 	mov	r16,r10
1000646c:	003efc06 	br	10006060 <__alt_data_end+0xf8006060>
10006470:	1000341e 	bne	r2,zero,10006544 <__subdf3+0x758>
10006474:	1984b03a 	or	r2,r3,r6
10006478:	10006f26 	beq	r2,zero,10006638 <__subdf3+0x84c>
1000647c:	180b883a 	mov	r5,r3
10006480:	3023883a 	mov	r17,r6
10006484:	3825883a 	mov	r18,r7
10006488:	0401ffc4 	movi	r16,2047
1000648c:	003e7a06 	br	10005e78 <__alt_data_end+0xf8005e78>
10006490:	2c62b03a 	or	r17,r5,r17
10006494:	8822c03a 	cmpne	r17,r17,zero
10006498:	0005883a 	mov	r2,zero
1000649c:	003f8a06 	br	100062c8 <__alt_data_end+0xf80062c8>
100064a0:	3821883a 	mov	r16,r7
100064a4:	000b883a 	mov	r5,zero
100064a8:	0023883a 	mov	r17,zero
100064ac:	003ed206 	br	10005ff8 <__alt_data_end+0xf8005ff8>
100064b0:	0101ffc4 	movi	r4,2047
100064b4:	51003b26 	beq	r10,r4,100065a4 <__subdf3+0x7b8>
100064b8:	0085c83a 	sub	r2,zero,r2
100064bc:	29402034 	orhi	r5,r5,128
100064c0:	01000e04 	movi	r4,56
100064c4:	20806216 	blt	r4,r2,10006650 <__subdf3+0x864>
100064c8:	010007c4 	movi	r4,31
100064cc:	20806b16 	blt	r4,r2,1000667c <__subdf3+0x890>
100064d0:	01000804 	movi	r4,32
100064d4:	2089c83a 	sub	r4,r4,r2
100064d8:	2912983a 	sll	r9,r5,r4
100064dc:	888ed83a 	srl	r7,r17,r2
100064e0:	8908983a 	sll	r4,r17,r4
100064e4:	2884d83a 	srl	r2,r5,r2
100064e8:	49e2b03a 	or	r17,r9,r7
100064ec:	2008c03a 	cmpne	r4,r4,zero
100064f0:	8922b03a 	or	r17,r17,r4
100064f4:	89a3883a 	add	r17,r17,r6
100064f8:	10c5883a 	add	r2,r2,r3
100064fc:	898d803a 	cmpltu	r6,r17,r6
10006500:	118b883a 	add	r5,r2,r6
10006504:	5021883a 	mov	r16,r10
10006508:	003ed506 	br	10006060 <__alt_data_end+0xf8006060>
1000650c:	1984b03a 	or	r2,r3,r6
10006510:	103e5926 	beq	r2,zero,10005e78 <__alt_data_end+0xf8005e78>
10006514:	8989c83a 	sub	r4,r17,r6
10006518:	8911803a 	cmpltu	r8,r17,r4
1000651c:	28c5c83a 	sub	r2,r5,r3
10006520:	1205c83a 	sub	r2,r2,r8
10006524:	1200202c 	andhi	r8,r2,128
10006528:	403ef926 	beq	r8,zero,10006110 <__alt_data_end+0xf8006110>
1000652c:	3463c83a 	sub	r17,r6,r17
10006530:	194bc83a 	sub	r5,r3,r5
10006534:	344d803a 	cmpltu	r6,r6,r17
10006538:	298bc83a 	sub	r5,r5,r6
1000653c:	3825883a 	mov	r18,r7
10006540:	003e4d06 	br	10005e78 <__alt_data_end+0xf8005e78>
10006544:	1984b03a 	or	r2,r3,r6
10006548:	10002b26 	beq	r2,zero,100065f8 <__subdf3+0x80c>
1000654c:	2808d0fa 	srli	r4,r5,3
10006550:	8822d0fa 	srli	r17,r17,3
10006554:	280a977a 	slli	r5,r5,29
10006558:	2080022c 	andhi	r2,r4,8
1000655c:	2c62b03a 	or	r17,r5,r17
10006560:	10000826 	beq	r2,zero,10006584 <__subdf3+0x798>
10006564:	1810d0fa 	srli	r8,r3,3
10006568:	4080022c 	andhi	r2,r8,8
1000656c:	1000051e 	bne	r2,zero,10006584 <__subdf3+0x798>
10006570:	300cd0fa 	srli	r6,r6,3
10006574:	1804977a 	slli	r2,r3,29
10006578:	4009883a 	mov	r4,r8
1000657c:	3825883a 	mov	r18,r7
10006580:	11a2b03a 	or	r17,r2,r6
10006584:	880ad77a 	srli	r5,r17,29
10006588:	200890fa 	slli	r4,r4,3
1000658c:	882290fa 	slli	r17,r17,3
10006590:	0401ffc4 	movi	r16,2047
10006594:	290ab03a 	or	r5,r5,r4
10006598:	003e3706 	br	10005e78 <__alt_data_end+0xf8005e78>
1000659c:	0101ffc4 	movi	r4,2047
100065a0:	513fc71e 	bne	r10,r4,100064c0 <__alt_data_end+0xf80064c0>
100065a4:	180b883a 	mov	r5,r3
100065a8:	3023883a 	mov	r17,r6
100065ac:	5021883a 	mov	r16,r10
100065b0:	003e3106 	br	10005e78 <__alt_data_end+0xf8005e78>
100065b4:	10002d26 	beq	r2,zero,1000666c <__subdf3+0x880>
100065b8:	1984b03a 	or	r2,r3,r6
100065bc:	10000e26 	beq	r2,zero,100065f8 <__subdf3+0x80c>
100065c0:	2808d0fa 	srli	r4,r5,3
100065c4:	8822d0fa 	srli	r17,r17,3
100065c8:	280a977a 	slli	r5,r5,29
100065cc:	2080022c 	andhi	r2,r4,8
100065d0:	2c62b03a 	or	r17,r5,r17
100065d4:	103feb26 	beq	r2,zero,10006584 <__alt_data_end+0xf8006584>
100065d8:	180ed0fa 	srli	r7,r3,3
100065dc:	3880022c 	andhi	r2,r7,8
100065e0:	103fe81e 	bne	r2,zero,10006584 <__alt_data_end+0xf8006584>
100065e4:	300cd0fa 	srli	r6,r6,3
100065e8:	1804977a 	slli	r2,r3,29
100065ec:	3809883a 	mov	r4,r7
100065f0:	11a2b03a 	or	r17,r2,r6
100065f4:	003fe306 	br	10006584 <__alt_data_end+0xf8006584>
100065f8:	0401ffc4 	movi	r16,2047
100065fc:	003e1e06 	br	10005e78 <__alt_data_end+0xf8005e78>
10006600:	0005883a 	mov	r2,zero
10006604:	003f8306 	br	10006414 <__alt_data_end+0xf8006414>
10006608:	113ff804 	addi	r4,r2,-32
1000660c:	02000804 	movi	r8,32
10006610:	2908d83a 	srl	r4,r5,r4
10006614:	12002526 	beq	r2,r8,100066ac <__subdf3+0x8c0>
10006618:	02001004 	movi	r8,64
1000661c:	4085c83a 	sub	r2,r8,r2
10006620:	288a983a 	sll	r5,r5,r2
10006624:	2c62b03a 	or	r17,r5,r17
10006628:	8822c03a 	cmpne	r17,r17,zero
1000662c:	8922b03a 	or	r17,r17,r4
10006630:	0005883a 	mov	r2,zero
10006634:	003f2406 	br	100062c8 <__alt_data_end+0xf80062c8>
10006638:	01402034 	movhi	r5,128
1000663c:	0011883a 	mov	r8,zero
10006640:	297fffc4 	addi	r5,r5,-1
10006644:	047ffe04 	movi	r17,-8
10006648:	0401ffc4 	movi	r16,2047
1000664c:	003e6a06 	br	10005ff8 <__alt_data_end+0xf8005ff8>
10006650:	2c62b03a 	or	r17,r5,r17
10006654:	8822c03a 	cmpne	r17,r17,zero
10006658:	0005883a 	mov	r2,zero
1000665c:	003fa506 	br	100064f4 <__alt_data_end+0xf80064f4>
10006660:	180b883a 	mov	r5,r3
10006664:	3023883a 	mov	r17,r6
10006668:	003e0306 	br	10005e78 <__alt_data_end+0xf8005e78>
1000666c:	180b883a 	mov	r5,r3
10006670:	3023883a 	mov	r17,r6
10006674:	0401ffc4 	movi	r16,2047
10006678:	003dff06 	br	10005e78 <__alt_data_end+0xf8005e78>
1000667c:	113ff804 	addi	r4,r2,-32
10006680:	01c00804 	movi	r7,32
10006684:	2908d83a 	srl	r4,r5,r4
10006688:	11c00a26 	beq	r2,r7,100066b4 <__subdf3+0x8c8>
1000668c:	01c01004 	movi	r7,64
10006690:	3885c83a 	sub	r2,r7,r2
10006694:	288a983a 	sll	r5,r5,r2
10006698:	2c62b03a 	or	r17,r5,r17
1000669c:	8822c03a 	cmpne	r17,r17,zero
100066a0:	8922b03a 	or	r17,r17,r4
100066a4:	0005883a 	mov	r2,zero
100066a8:	003f9206 	br	100064f4 <__alt_data_end+0xf80064f4>
100066ac:	000b883a 	mov	r5,zero
100066b0:	003fdc06 	br	10006624 <__alt_data_end+0xf8006624>
100066b4:	000b883a 	mov	r5,zero
100066b8:	003ff706 	br	10006698 <__alt_data_end+0xf8006698>

100066bc <__fixdfsi>:
100066bc:	2806d53a 	srli	r3,r5,20
100066c0:	00800434 	movhi	r2,16
100066c4:	10bfffc4 	addi	r2,r2,-1
100066c8:	18c1ffcc 	andi	r3,r3,2047
100066cc:	0180ff84 	movi	r6,1022
100066d0:	2884703a 	and	r2,r5,r2
100066d4:	280ad7fa 	srli	r5,r5,31
100066d8:	30c0130e 	bge	r6,r3,10006728 <__fixdfsi+0x6c>
100066dc:	01810744 	movi	r6,1053
100066e0:	30c00d16 	blt	r6,r3,10006718 <__fixdfsi+0x5c>
100066e4:	01810cc4 	movi	r6,1075
100066e8:	30cdc83a 	sub	r6,r6,r3
100066ec:	01c007c4 	movi	r7,31
100066f0:	10800434 	orhi	r2,r2,16
100066f4:	39800e0e 	bge	r7,r6,10006730 <__fixdfsi+0x74>
100066f8:	010104c4 	movi	r4,1043
100066fc:	20c7c83a 	sub	r3,r4,r3
10006700:	10c6d83a 	srl	r3,r2,r3
10006704:	29403fcc 	andi	r5,r5,255
10006708:	0145c83a 	sub	r2,zero,r5
1000670c:	1884f03a 	xor	r2,r3,r2
10006710:	1145883a 	add	r2,r2,r5
10006714:	f800283a 	ret
10006718:	00a00034 	movhi	r2,32768
1000671c:	10bfffc4 	addi	r2,r2,-1
10006720:	2885883a 	add	r2,r5,r2
10006724:	f800283a 	ret
10006728:	0005883a 	mov	r2,zero
1000672c:	f800283a 	ret
10006730:	18fefb44 	addi	r3,r3,-1043
10006734:	2188d83a 	srl	r4,r4,r6
10006738:	10c6983a 	sll	r3,r2,r3
1000673c:	20c6b03a 	or	r3,r4,r3
10006740:	003ff006 	br	10006704 <__alt_data_end+0xf8006704>

10006744 <__floatsidf>:
10006744:	defffd04 	addi	sp,sp,-12
10006748:	dc400115 	stw	r17,4(sp)
1000674c:	dfc00215 	stw	ra,8(sp)
10006750:	dc000015 	stw	r16,0(sp)
10006754:	2023883a 	mov	r17,r4
10006758:	20001426 	beq	r4,zero,100067ac <__floatsidf+0x68>
1000675c:	2020d7fa 	srli	r16,r4,31
10006760:	80000126 	beq	r16,zero,10006768 <__floatsidf+0x24>
10006764:	0123c83a 	sub	r17,zero,r4
10006768:	8809883a 	mov	r4,r17
1000676c:	00068b80 	call	100068b8 <__clzsi2>
10006770:	01410784 	movi	r5,1054
10006774:	00c00284 	movi	r3,10
10006778:	288bc83a 	sub	r5,r5,r2
1000677c:	18801c16 	blt	r3,r2,100067f0 <__floatsidf+0xac>
10006780:	00c002c4 	movi	r3,11
10006784:	1887c83a 	sub	r3,r3,r2
10006788:	88c8d83a 	srl	r4,r17,r3
1000678c:	00c00434 	movhi	r3,16
10006790:	18ffffc4 	addi	r3,r3,-1
10006794:	10800544 	addi	r2,r2,21
10006798:	20c8703a 	and	r4,r4,r3
1000679c:	8884983a 	sll	r2,r17,r2
100067a0:	28c1ffcc 	andi	r3,r5,2047
100067a4:	800d883a 	mov	r6,r16
100067a8:	00000406 	br	100067bc <__floatsidf+0x78>
100067ac:	000d883a 	mov	r6,zero
100067b0:	0007883a 	mov	r3,zero
100067b4:	0009883a 	mov	r4,zero
100067b8:	0005883a 	mov	r2,zero
100067bc:	180a953a 	slli	r5,r3,20
100067c0:	31803fcc 	andi	r6,r6,255
100067c4:	00c00434 	movhi	r3,16
100067c8:	300c97fa 	slli	r6,r6,31
100067cc:	18ffffc4 	addi	r3,r3,-1
100067d0:	20c6703a 	and	r3,r4,r3
100067d4:	1946b03a 	or	r3,r3,r5
100067d8:	1986b03a 	or	r3,r3,r6
100067dc:	dfc00217 	ldw	ra,8(sp)
100067e0:	dc400117 	ldw	r17,4(sp)
100067e4:	dc000017 	ldw	r16,0(sp)
100067e8:	dec00304 	addi	sp,sp,12
100067ec:	f800283a 	ret
100067f0:	10fffd44 	addi	r3,r2,-11
100067f4:	88c8983a 	sll	r4,r17,r3
100067f8:	00800434 	movhi	r2,16
100067fc:	10bfffc4 	addi	r2,r2,-1
10006800:	2088703a 	and	r4,r4,r2
10006804:	28c1ffcc 	andi	r3,r5,2047
10006808:	800d883a 	mov	r6,r16
1000680c:	0005883a 	mov	r2,zero
10006810:	003fea06 	br	100067bc <__alt_data_end+0xf80067bc>

10006814 <__floatunsidf>:
10006814:	defffe04 	addi	sp,sp,-8
10006818:	dc000015 	stw	r16,0(sp)
1000681c:	dfc00115 	stw	ra,4(sp)
10006820:	2021883a 	mov	r16,r4
10006824:	20001026 	beq	r4,zero,10006868 <__floatunsidf+0x54>
10006828:	00068b80 	call	100068b8 <__clzsi2>
1000682c:	01410784 	movi	r5,1054
10006830:	100d883a 	mov	r6,r2
10006834:	288bc83a 	sub	r5,r5,r2
10006838:	00800284 	movi	r2,10
1000683c:	11801616 	blt	r2,r6,10006898 <__floatunsidf+0x84>
10006840:	008002c4 	movi	r2,11
10006844:	1185c83a 	sub	r2,r2,r6
10006848:	8084d83a 	srl	r2,r16,r2
1000684c:	00c00434 	movhi	r3,16
10006850:	31c00544 	addi	r7,r6,21
10006854:	18ffffc4 	addi	r3,r3,-1
10006858:	81e0983a 	sll	r16,r16,r7
1000685c:	10cc703a 	and	r6,r2,r3
10006860:	2941ffcc 	andi	r5,r5,2047
10006864:	00000206 	br	10006870 <__floatunsidf+0x5c>
10006868:	000b883a 	mov	r5,zero
1000686c:	000d883a 	mov	r6,zero
10006870:	280a953a 	slli	r5,r5,20
10006874:	00c00434 	movhi	r3,16
10006878:	18ffffc4 	addi	r3,r3,-1
1000687c:	30c6703a 	and	r3,r6,r3
10006880:	8005883a 	mov	r2,r16
10006884:	1946b03a 	or	r3,r3,r5
10006888:	dfc00117 	ldw	ra,4(sp)
1000688c:	dc000017 	ldw	r16,0(sp)
10006890:	dec00204 	addi	sp,sp,8
10006894:	f800283a 	ret
10006898:	31bffd44 	addi	r6,r6,-11
1000689c:	818c983a 	sll	r6,r16,r6
100068a0:	00800434 	movhi	r2,16
100068a4:	10bfffc4 	addi	r2,r2,-1
100068a8:	2941ffcc 	andi	r5,r5,2047
100068ac:	0021883a 	mov	r16,zero
100068b0:	308c703a 	and	r6,r6,r2
100068b4:	003fee06 	br	10006870 <__alt_data_end+0xf8006870>

100068b8 <__clzsi2>:
100068b8:	00bfffd4 	movui	r2,65535
100068bc:	11000b36 	bltu	r2,r4,100068ec <__clzsi2+0x34>
100068c0:	00803fc4 	movi	r2,255
100068c4:	1100122e 	bgeu	r2,r4,10006910 <__clzsi2+0x58>
100068c8:	00c00204 	movi	r3,8
100068cc:	01400604 	movi	r5,24
100068d0:	20c8d83a 	srl	r4,r4,r3
100068d4:	00840074 	movhi	r2,4097
100068d8:	10896504 	addi	r2,r2,9620
100068dc:	1109883a 	add	r4,r2,r4
100068e0:	20800003 	ldbu	r2,0(r4)
100068e4:	2885c83a 	sub	r2,r5,r2
100068e8:	f800283a 	ret
100068ec:	00804034 	movhi	r2,256
100068f0:	10bfffc4 	addi	r2,r2,-1
100068f4:	11000336 	bltu	r2,r4,10006904 <__clzsi2+0x4c>
100068f8:	00c00404 	movi	r3,16
100068fc:	180b883a 	mov	r5,r3
10006900:	003ff306 	br	100068d0 <__alt_data_end+0xf80068d0>
10006904:	00c00604 	movi	r3,24
10006908:	01400204 	movi	r5,8
1000690c:	003ff006 	br	100068d0 <__alt_data_end+0xf80068d0>
10006910:	0007883a 	mov	r3,zero
10006914:	01400804 	movi	r5,32
10006918:	003fed06 	br	100068d0 <__alt_data_end+0xf80068d0>

1000691c <__errno>:
1000691c:	00840074 	movhi	r2,4097
10006920:	1090d104 	addi	r2,r2,17220
10006924:	10800017 	ldw	r2,0(r2)
10006928:	f800283a 	ret

1000692c <_printf_r>:
1000692c:	defffd04 	addi	sp,sp,-12
10006930:	dfc00015 	stw	ra,0(sp)
10006934:	d9800115 	stw	r6,4(sp)
10006938:	d9c00215 	stw	r7,8(sp)
1000693c:	280d883a 	mov	r6,r5
10006940:	21400217 	ldw	r5,8(r4)
10006944:	d9c00104 	addi	r7,sp,4
10006948:	0006a300 	call	10006a30 <___vfprintf_internal_r>
1000694c:	dfc00017 	ldw	ra,0(sp)
10006950:	dec00304 	addi	sp,sp,12
10006954:	f800283a 	ret

10006958 <printf>:
10006958:	defffc04 	addi	sp,sp,-16
1000695c:	dfc00015 	stw	ra,0(sp)
10006960:	d9400115 	stw	r5,4(sp)
10006964:	d9800215 	stw	r6,8(sp)
10006968:	d9c00315 	stw	r7,12(sp)
1000696c:	00840074 	movhi	r2,4097
10006970:	1090d104 	addi	r2,r2,17220
10006974:	10800017 	ldw	r2,0(r2)
10006978:	200b883a 	mov	r5,r4
1000697c:	d9800104 	addi	r6,sp,4
10006980:	11000217 	ldw	r4,8(r2)
10006984:	0008b2c0 	call	10008b2c <__vfprintf_internal>
10006988:	dfc00017 	ldw	ra,0(sp)
1000698c:	dec00404 	addi	sp,sp,16
10006990:	f800283a 	ret

10006994 <_putchar_r>:
10006994:	21800217 	ldw	r6,8(r4)
10006998:	000cf2c1 	jmpi	1000cf2c <_putc_r>

1000699c <putchar>:
1000699c:	00840074 	movhi	r2,4097
100069a0:	1090d104 	addi	r2,r2,17220
100069a4:	200b883a 	mov	r5,r4
100069a8:	11000017 	ldw	r4,0(r2)
100069ac:	21800217 	ldw	r6,8(r4)
100069b0:	000cf2c1 	jmpi	1000cf2c <_putc_r>

100069b4 <srand>:
100069b4:	00840074 	movhi	r2,4097
100069b8:	1090d104 	addi	r2,r2,17220
100069bc:	10800017 	ldw	r2,0(r2)
100069c0:	11002915 	stw	r4,164(r2)
100069c4:	10002a15 	stw	zero,168(r2)
100069c8:	f800283a 	ret

100069cc <rand>:
100069cc:	00840074 	movhi	r2,4097
100069d0:	defffe04 	addi	sp,sp,-8
100069d4:	1090d104 	addi	r2,r2,17220
100069d8:	dc000015 	stw	r16,0(sp)
100069dc:	14000017 	ldw	r16,0(r2)
100069e0:	dfc00115 	stw	ra,4(sp)
100069e4:	01932574 	movhi	r6,19605
100069e8:	81002917 	ldw	r4,164(r16)
100069ec:	81402a17 	ldw	r5,168(r16)
100069f0:	01d614b4 	movhi	r7,22610
100069f4:	319fcb44 	addi	r6,r6,32557
100069f8:	39fd0b44 	addi	r7,r7,-3027
100069fc:	00031f00 	call	100031f0 <__muldi3>
10006a00:	11000044 	addi	r4,r2,1
10006a04:	2085803a 	cmpltu	r2,r4,r2
10006a08:	10c7883a 	add	r3,r2,r3
10006a0c:	00a00034 	movhi	r2,32768
10006a10:	10bfffc4 	addi	r2,r2,-1
10006a14:	1884703a 	and	r2,r3,r2
10006a18:	81002915 	stw	r4,164(r16)
10006a1c:	80c02a15 	stw	r3,168(r16)
10006a20:	dfc00117 	ldw	ra,4(sp)
10006a24:	dc000017 	ldw	r16,0(sp)
10006a28:	dec00204 	addi	sp,sp,8
10006a2c:	f800283a 	ret

10006a30 <___vfprintf_internal_r>:
10006a30:	defeb604 	addi	sp,sp,-1320
10006a34:	dfc14915 	stw	ra,1316(sp)
10006a38:	ddc14715 	stw	r23,1308(sp)
10006a3c:	dd814615 	stw	r22,1304(sp)
10006a40:	202f883a 	mov	r23,r4
10006a44:	282d883a 	mov	r22,r5
10006a48:	d9812a15 	stw	r6,1192(sp)
10006a4c:	d9c12d15 	stw	r7,1204(sp)
10006a50:	df014815 	stw	fp,1312(sp)
10006a54:	dd414515 	stw	r21,1300(sp)
10006a58:	dd014415 	stw	r20,1296(sp)
10006a5c:	dcc14315 	stw	r19,1292(sp)
10006a60:	dc814215 	stw	r18,1288(sp)
10006a64:	dc414115 	stw	r17,1284(sp)
10006a68:	dc014015 	stw	r16,1280(sp)
10006a6c:	000b20c0 	call	1000b20c <_localeconv_r>
10006a70:	10800017 	ldw	r2,0(r2)
10006a74:	1009883a 	mov	r4,r2
10006a78:	d8813515 	stw	r2,1236(sp)
10006a7c:	000d2c80 	call	1000d2c8 <strlen>
10006a80:	d8813815 	stw	r2,1248(sp)
10006a84:	b8000226 	beq	r23,zero,10006a90 <___vfprintf_internal_r+0x60>
10006a88:	b8800e17 	ldw	r2,56(r23)
10006a8c:	10010526 	beq	r2,zero,10006ea4 <___vfprintf_internal_r+0x474>
10006a90:	b0c0030b 	ldhu	r3,12(r22)
10006a94:	1908000c 	andi	r4,r3,8192
10006a98:	1805883a 	mov	r2,r3
10006a9c:	2000071e 	bne	r4,zero,10006abc <___vfprintf_internal_r+0x8c>
10006aa0:	b1001917 	ldw	r4,100(r22)
10006aa4:	18880014 	ori	r2,r3,8192
10006aa8:	00f7ffc4 	movi	r3,-8193
10006aac:	20c8703a 	and	r4,r4,r3
10006ab0:	b080030d 	sth	r2,12(r22)
10006ab4:	1007883a 	mov	r3,r2
10006ab8:	b1001915 	stw	r4,100(r22)
10006abc:	1100020c 	andi	r4,r2,8
10006ac0:	2000a826 	beq	r4,zero,10006d64 <___vfprintf_internal_r+0x334>
10006ac4:	b1000417 	ldw	r4,16(r22)
10006ac8:	2000a626 	beq	r4,zero,10006d64 <___vfprintf_internal_r+0x334>
10006acc:	1080068c 	andi	r2,r2,26
10006ad0:	01000284 	movi	r4,10
10006ad4:	1100ac26 	beq	r2,r4,10006d88 <___vfprintf_internal_r+0x358>
10006ad8:	d8c10e04 	addi	r3,sp,1080
10006adc:	d9010dc4 	addi	r4,sp,1079
10006ae0:	d9400404 	addi	r5,sp,16
10006ae4:	05040074 	movhi	r20,4097
10006ae8:	1905c83a 	sub	r2,r3,r4
10006aec:	a509b684 	addi	r20,r20,9946
10006af0:	d8c12815 	stw	r3,1184(sp)
10006af4:	d9012915 	stw	r4,1188(sp)
10006af8:	d9411e15 	stw	r5,1144(sp)
10006afc:	d8012015 	stw	zero,1152(sp)
10006b00:	d8011f15 	stw	zero,1148(sp)
10006b04:	d8013315 	stw	zero,1228(sp)
10006b08:	d8013715 	stw	zero,1244(sp)
10006b0c:	d8013915 	stw	zero,1252(sp)
10006b10:	d8013b15 	stw	zero,1260(sp)
10006b14:	d8013a15 	stw	zero,1256(sp)
10006b18:	d8012f15 	stw	zero,1212(sp)
10006b1c:	2811883a 	mov	r8,r5
10006b20:	d8813c15 	stw	r2,1264(sp)
10006b24:	d8c12a17 	ldw	r3,1192(sp)
10006b28:	18800007 	ldb	r2,0(r3)
10006b2c:	10021326 	beq	r2,zero,1000737c <___vfprintf_internal_r+0x94c>
10006b30:	00c00944 	movi	r3,37
10006b34:	dc012a17 	ldw	r16,1192(sp)
10006b38:	10c0021e 	bne	r2,r3,10006b44 <___vfprintf_internal_r+0x114>
10006b3c:	00001606 	br	10006b98 <___vfprintf_internal_r+0x168>
10006b40:	10c08526 	beq	r2,r3,10006d58 <___vfprintf_internal_r+0x328>
10006b44:	84000044 	addi	r16,r16,1
10006b48:	80800007 	ldb	r2,0(r16)
10006b4c:	103ffc1e 	bne	r2,zero,10006b40 <__alt_data_end+0xf8006b40>
10006b50:	d9012a17 	ldw	r4,1192(sp)
10006b54:	8123c83a 	sub	r17,r16,r4
10006b58:	88000f26 	beq	r17,zero,10006b98 <___vfprintf_internal_r+0x168>
10006b5c:	d8812a17 	ldw	r2,1192(sp)
10006b60:	d8c12017 	ldw	r3,1152(sp)
10006b64:	44400115 	stw	r17,4(r8)
10006b68:	40800015 	stw	r2,0(r8)
10006b6c:	d8811f17 	ldw	r2,1148(sp)
10006b70:	1c47883a 	add	r3,r3,r17
10006b74:	d8c12015 	stw	r3,1152(sp)
10006b78:	10800044 	addi	r2,r2,1
10006b7c:	d8811f15 	stw	r2,1148(sp)
10006b80:	00c001c4 	movi	r3,7
10006b84:	1880b516 	blt	r3,r2,10006e5c <___vfprintf_internal_r+0x42c>
10006b88:	42000204 	addi	r8,r8,8
10006b8c:	d8c12f17 	ldw	r3,1212(sp)
10006b90:	1c47883a 	add	r3,r3,r17
10006b94:	d8c12f15 	stw	r3,1212(sp)
10006b98:	80800007 	ldb	r2,0(r16)
10006b9c:	1000b626 	beq	r2,zero,10006e78 <___vfprintf_internal_r+0x448>
10006ba0:	80800044 	addi	r2,r16,1
10006ba4:	84000047 	ldb	r16,1(r16)
10006ba8:	0027883a 	mov	r19,zero
10006bac:	0039883a 	mov	fp,zero
10006bb0:	dcc12b05 	stb	r19,1196(sp)
10006bb4:	d8012785 	stb	zero,1182(sp)
10006bb8:	027fffc4 	movi	r9,-1
10006bbc:	d8012e15 	stw	zero,1208(sp)
10006bc0:	04401604 	movi	r17,88
10006bc4:	04800244 	movi	r18,9
10006bc8:	da012a15 	stw	r8,1192(sp)
10006bcc:	e027883a 	mov	r19,fp
10006bd0:	17000044 	addi	fp,r2,1
10006bd4:	80bff804 	addi	r2,r16,-32
10006bd8:	88831236 	bltu	r17,r2,10007824 <___vfprintf_internal_r+0xdf4>
10006bdc:	100490ba 	slli	r2,r2,2
10006be0:	01040034 	movhi	r4,4096
10006be4:	211afd04 	addi	r4,r4,27636
10006be8:	1105883a 	add	r2,r2,r4
10006bec:	10800017 	ldw	r2,0(r2)
10006bf0:	1000683a 	jmp	r2
10006bf4:	10007740 	call	11000774 <_gp+0xfe4438>
10006bf8:	10007824 	muli	zero,r2,480
10006bfc:	10007824 	muli	zero,r2,480
10006c00:	1000775c 	xori	zero,r2,477
10006c04:	10007824 	muli	zero,r2,480
10006c08:	10007824 	muli	zero,r2,480
10006c0c:	10007824 	muli	zero,r2,480
10006c10:	10007824 	muli	zero,r2,480
10006c14:	10007824 	muli	zero,r2,480
10006c18:	10007824 	muli	zero,r2,480
10006c1c:	1000776c 	andhi	zero,r2,477
10006c20:	10007794 	ori	zero,r2,478
10006c24:	10007824 	muli	zero,r2,480
10006c28:	10006eb0 	cmpltui	zero,r2,442
10006c2c:	10006ec0 	call	110006ec <_gp+0xfe43b0>
10006c30:	10007824 	muli	zero,r2,480
10006c34:	10006f10 	cmplti	zero,r2,444
10006c38:	10006f20 	cmpeqi	zero,r2,444
10006c3c:	10006f20 	cmpeqi	zero,r2,444
10006c40:	10006f20 	cmpeqi	zero,r2,444
10006c44:	10006f20 	cmpeqi	zero,r2,444
10006c48:	10006f20 	cmpeqi	zero,r2,444
10006c4c:	10006f20 	cmpeqi	zero,r2,444
10006c50:	10006f20 	cmpeqi	zero,r2,444
10006c54:	10006f20 	cmpeqi	zero,r2,444
10006c58:	10006f20 	cmpeqi	zero,r2,444
10006c5c:	10007824 	muli	zero,r2,480
10006c60:	10007824 	muli	zero,r2,480
10006c64:	10007824 	muli	zero,r2,480
10006c68:	10007824 	muli	zero,r2,480
10006c6c:	10007824 	muli	zero,r2,480
10006c70:	10007824 	muli	zero,r2,480
10006c74:	10007824 	muli	zero,r2,480
10006c78:	10007824 	muli	zero,r2,480
10006c7c:	10007824 	muli	zero,r2,480
10006c80:	10007824 	muli	zero,r2,480
10006c84:	10006f64 	muli	zero,r2,445
10006c88:	10007384 	addi	zero,r2,462
10006c8c:	10007824 	muli	zero,r2,480
10006c90:	10007384 	addi	zero,r2,462
10006c94:	10007824 	muli	zero,r2,480
10006c98:	10007824 	muli	zero,r2,480
10006c9c:	10007824 	muli	zero,r2,480
10006ca0:	10007824 	muli	zero,r2,480
10006ca4:	1000742c 	andhi	zero,r2,464
10006ca8:	10007824 	muli	zero,r2,480
10006cac:	10007824 	muli	zero,r2,480
10006cb0:	1000743c 	xorhi	zero,r2,464
10006cb4:	10007824 	muli	zero,r2,480
10006cb8:	10007824 	muli	zero,r2,480
10006cbc:	10007824 	muli	zero,r2,480
10006cc0:	10007824 	muli	zero,r2,480
10006cc4:	10007824 	muli	zero,r2,480
10006cc8:	10007480 	call	11000748 <_gp+0xfe440c>
10006ccc:	10007824 	muli	zero,r2,480
10006cd0:	10007824 	muli	zero,r2,480
10006cd4:	100074b8 	rdprs	zero,r2,466
10006cd8:	10007824 	muli	zero,r2,480
10006cdc:	10007824 	muli	zero,r2,480
10006ce0:	10007824 	muli	zero,r2,480
10006ce4:	10007824 	muli	zero,r2,480
10006ce8:	10007824 	muli	zero,r2,480
10006cec:	10007824 	muli	zero,r2,480
10006cf0:	10007824 	muli	zero,r2,480
10006cf4:	10007824 	muli	zero,r2,480
10006cf8:	10007824 	muli	zero,r2,480
10006cfc:	10007824 	muli	zero,r2,480
10006d00:	100076f4 	orhi	zero,r2,475
10006d04:	100076a0 	cmpeqi	zero,r2,474
10006d08:	10007384 	addi	zero,r2,462
10006d0c:	10007384 	addi	zero,r2,462
10006d10:	10007384 	addi	zero,r2,462
10006d14:	100076e4 	muli	zero,r2,475
10006d18:	100076a0 	cmpeqi	zero,r2,474
10006d1c:	10007824 	muli	zero,r2,480
10006d20:	10007824 	muli	zero,r2,480
10006d24:	100075bc 	xorhi	zero,r2,470
10006d28:	10007824 	muli	zero,r2,480
10006d2c:	100075d4 	ori	zero,r2,471
10006d30:	10007614 	ori	zero,r2,472
10006d34:	10007654 	ori	zero,r2,473
10006d38:	10007520 	cmpeqi	zero,r2,468
10006d3c:	10007824 	muli	zero,r2,480
10006d40:	100077a8 	cmpgeui	zero,r2,478
10006d44:	10007824 	muli	zero,r2,480
10006d48:	10007530 	cmpltui	zero,r2,468
10006d4c:	10007824 	muli	zero,r2,480
10006d50:	10007824 	muli	zero,r2,480
10006d54:	10007570 	cmpltui	zero,r2,469
10006d58:	d9412a17 	ldw	r5,1192(sp)
10006d5c:	8163c83a 	sub	r17,r16,r5
10006d60:	003f7d06 	br	10006b58 <__alt_data_end+0xf8006b58>
10006d64:	b809883a 	mov	r4,r23
10006d68:	b00b883a 	mov	r5,r22
10006d6c:	0008b500 	call	10008b50 <__swsetup_r>
10006d70:	10002d1e 	bne	r2,zero,10006e28 <___vfprintf_internal_r+0x3f8>
10006d74:	b0c0030b 	ldhu	r3,12(r22)
10006d78:	01000284 	movi	r4,10
10006d7c:	1805883a 	mov	r2,r3
10006d80:	1080068c 	andi	r2,r2,26
10006d84:	113f541e 	bne	r2,r4,10006ad8 <__alt_data_end+0xf8006ad8>
10006d88:	b080038b 	ldhu	r2,14(r22)
10006d8c:	113fffcc 	andi	r4,r2,65535
10006d90:	2120001c 	xori	r4,r4,32768
10006d94:	21200004 	addi	r4,r4,-32768
10006d98:	203f4f16 	blt	r4,zero,10006ad8 <__alt_data_end+0xf8006ad8>
10006d9c:	b2c01917 	ldw	r11,100(r22)
10006da0:	b2800717 	ldw	r10,28(r22)
10006da4:	b2400917 	ldw	r9,36(r22)
10006da8:	d9812a17 	ldw	r6,1192(sp)
10006dac:	d9c12d17 	ldw	r7,1204(sp)
10006db0:	02010004 	movi	r8,1024
10006db4:	18ffff4c 	andi	r3,r3,65533
10006db8:	d881078d 	sth	r2,1054(sp)
10006dbc:	b809883a 	mov	r4,r23
10006dc0:	d8800404 	addi	r2,sp,16
10006dc4:	d9410404 	addi	r5,sp,1040
10006dc8:	d8c1070d 	sth	r3,1052(sp)
10006dcc:	dac11d15 	stw	r11,1140(sp)
10006dd0:	da810b15 	stw	r10,1068(sp)
10006dd4:	da410d15 	stw	r9,1076(sp)
10006dd8:	d8810415 	stw	r2,1040(sp)
10006ddc:	d8810815 	stw	r2,1056(sp)
10006de0:	da010615 	stw	r8,1048(sp)
10006de4:	da010915 	stw	r8,1060(sp)
10006de8:	d8010a15 	stw	zero,1064(sp)
10006dec:	0006a300 	call	10006a30 <___vfprintf_internal_r>
10006df0:	1021883a 	mov	r16,r2
10006df4:	10000416 	blt	r2,zero,10006e08 <___vfprintf_internal_r+0x3d8>
10006df8:	b809883a 	mov	r4,r23
10006dfc:	d9410404 	addi	r5,sp,1040
10006e00:	000a5d00 	call	1000a5d0 <_fflush_r>
10006e04:	1007301e 	bne	r2,zero,10008ac8 <___vfprintf_internal_r+0x2098>
10006e08:	d881070b 	ldhu	r2,1052(sp)
10006e0c:	1080100c 	andi	r2,r2,64
10006e10:	10000326 	beq	r2,zero,10006e20 <___vfprintf_internal_r+0x3f0>
10006e14:	b080030b 	ldhu	r2,12(r22)
10006e18:	10801014 	ori	r2,r2,64
10006e1c:	b080030d 	sth	r2,12(r22)
10006e20:	8005883a 	mov	r2,r16
10006e24:	00000106 	br	10006e2c <___vfprintf_internal_r+0x3fc>
10006e28:	00bfffc4 	movi	r2,-1
10006e2c:	dfc14917 	ldw	ra,1316(sp)
10006e30:	df014817 	ldw	fp,1312(sp)
10006e34:	ddc14717 	ldw	r23,1308(sp)
10006e38:	dd814617 	ldw	r22,1304(sp)
10006e3c:	dd414517 	ldw	r21,1300(sp)
10006e40:	dd014417 	ldw	r20,1296(sp)
10006e44:	dcc14317 	ldw	r19,1292(sp)
10006e48:	dc814217 	ldw	r18,1288(sp)
10006e4c:	dc414117 	ldw	r17,1284(sp)
10006e50:	dc014017 	ldw	r16,1280(sp)
10006e54:	dec14a04 	addi	sp,sp,1320
10006e58:	f800283a 	ret
10006e5c:	b809883a 	mov	r4,r23
10006e60:	b00b883a 	mov	r5,r22
10006e64:	d9811e04 	addi	r6,sp,1144
10006e68:	000d45c0 	call	1000d45c <__sprint_r>
10006e6c:	1000081e 	bne	r2,zero,10006e90 <___vfprintf_internal_r+0x460>
10006e70:	da000404 	addi	r8,sp,16
10006e74:	003f4506 	br	10006b8c <__alt_data_end+0xf8006b8c>
10006e78:	d8812017 	ldw	r2,1152(sp)
10006e7c:	10000426 	beq	r2,zero,10006e90 <___vfprintf_internal_r+0x460>
10006e80:	b809883a 	mov	r4,r23
10006e84:	b00b883a 	mov	r5,r22
10006e88:	d9811e04 	addi	r6,sp,1144
10006e8c:	000d45c0 	call	1000d45c <__sprint_r>
10006e90:	b080030b 	ldhu	r2,12(r22)
10006e94:	1080100c 	andi	r2,r2,64
10006e98:	103fe31e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10006e9c:	d8812f17 	ldw	r2,1212(sp)
10006ea0:	003fe206 	br	10006e2c <__alt_data_end+0xf8006e2c>
10006ea4:	b809883a 	mov	r4,r23
10006ea8:	000ab8c0 	call	1000ab8c <__sinit>
10006eac:	003ef806 	br	10006a90 <__alt_data_end+0xf8006a90>
10006eb0:	e005883a 	mov	r2,fp
10006eb4:	9cc00114 	ori	r19,r19,4
10006eb8:	e4000007 	ldb	r16,0(fp)
10006ebc:	003f4406 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006ec0:	e4000007 	ldb	r16,0(fp)
10006ec4:	01000a84 	movi	r4,42
10006ec8:	e0800044 	addi	r2,fp,1
10006ecc:	8106f626 	beq	r16,r4,10008aa8 <___vfprintf_internal_r+0x2078>
10006ed0:	857ff404 	addi	r21,r16,-48
10006ed4:	1039883a 	mov	fp,r2
10006ed8:	0013883a 	mov	r9,zero
10006edc:	957f3d36 	bltu	r18,r21,10006bd4 <__alt_data_end+0xf8006bd4>
10006ee0:	0009883a 	mov	r4,zero
10006ee4:	01400284 	movi	r5,10
10006ee8:	00040f80 	call	100040f8 <__mulsi3>
10006eec:	e4000007 	ldb	r16,0(fp)
10006ef0:	a889883a 	add	r4,r21,r2
10006ef4:	e7000044 	addi	fp,fp,1
10006ef8:	857ff404 	addi	r21,r16,-48
10006efc:	957ff92e 	bgeu	r18,r21,10006ee4 <__alt_data_end+0xf8006ee4>
10006f00:	2013883a 	mov	r9,r4
10006f04:	203f330e 	bge	r4,zero,10006bd4 <__alt_data_end+0xf8006bd4>
10006f08:	027fffc4 	movi	r9,-1
10006f0c:	003f3106 	br	10006bd4 <__alt_data_end+0xf8006bd4>
10006f10:	9cc02014 	ori	r19,r19,128
10006f14:	e005883a 	mov	r2,fp
10006f18:	e4000007 	ldb	r16,0(fp)
10006f1c:	003f2c06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006f20:	857ff404 	addi	r21,r16,-48
10006f24:	d8012e15 	stw	zero,1208(sp)
10006f28:	e021883a 	mov	r16,fp
10006f2c:	0009883a 	mov	r4,zero
10006f30:	da412c15 	stw	r9,1200(sp)
10006f34:	01400284 	movi	r5,10
10006f38:	00040f80 	call	100040f8 <__mulsi3>
10006f3c:	81400007 	ldb	r5,0(r16)
10006f40:	1549883a 	add	r4,r2,r21
10006f44:	e7000044 	addi	fp,fp,1
10006f48:	2d7ff404 	addi	r21,r5,-48
10006f4c:	e021883a 	mov	r16,fp
10006f50:	957ff82e 	bgeu	r18,r21,10006f34 <__alt_data_end+0xf8006f34>
10006f54:	2821883a 	mov	r16,r5
10006f58:	d9012e15 	stw	r4,1208(sp)
10006f5c:	da412c17 	ldw	r9,1200(sp)
10006f60:	003f1c06 	br	10006bd4 <__alt_data_end+0xf8006bd4>
10006f64:	da012a17 	ldw	r8,1192(sp)
10006f68:	df012a15 	stw	fp,1192(sp)
10006f6c:	9839883a 	mov	fp,r19
10006f70:	dcc12b03 	ldbu	r19,1196(sp)
10006f74:	e7000414 	ori	fp,fp,16
10006f78:	e080080c 	andi	r2,fp,32
10006f7c:	dcc12785 	stb	r19,1182(sp)
10006f80:	d8c12d17 	ldw	r3,1204(sp)
10006f84:	1001ce26 	beq	r2,zero,100076c0 <___vfprintf_internal_r+0xc90>
10006f88:	d9012d17 	ldw	r4,1204(sp)
10006f8c:	18800117 	ldw	r2,4(r3)
10006f90:	1c800017 	ldw	r18,0(r3)
10006f94:	21000204 	addi	r4,r4,8
10006f98:	d9012d15 	stw	r4,1204(sp)
10006f9c:	102b883a 	mov	r21,r2
10006fa0:	10044916 	blt	r2,zero,100080c8 <___vfprintf_internal_r+0x1698>
10006fa4:	dcc12783 	ldbu	r19,1182(sp)
10006fa8:	da413215 	stw	r9,1224(sp)
10006fac:	00800044 	movi	r2,1
10006fb0:	9546b03a 	or	r3,r18,r21
10006fb4:	48000216 	blt	r9,zero,10006fc0 <___vfprintf_internal_r+0x590>
10006fb8:	013fdfc4 	movi	r4,-129
10006fbc:	e138703a 	and	fp,fp,r4
10006fc0:	1802251e 	bne	r3,zero,10007858 <___vfprintf_internal_r+0xe28>
10006fc4:	48031726 	beq	r9,zero,10007c24 <___vfprintf_internal_r+0x11f4>
10006fc8:	10803fcc 	andi	r2,r2,255
10006fcc:	00c00044 	movi	r3,1
10006fd0:	10c24526 	beq	r2,r3,100078e8 <___vfprintf_internal_r+0xeb8>
10006fd4:	00c00084 	movi	r3,2
10006fd8:	10c33426 	beq	r2,r3,10007cac <___vfprintf_internal_r+0x127c>
10006fdc:	d8c10e04 	addi	r3,sp,1080
10006fe0:	9008d0fa 	srli	r4,r18,3
10006fe4:	a80a977a 	slli	r5,r21,29
10006fe8:	a82ad0fa 	srli	r21,r21,3
10006fec:	948001cc 	andi	r18,r18,7
10006ff0:	90800c04 	addi	r2,r18,48
10006ff4:	18ffffc4 	addi	r3,r3,-1
10006ff8:	2924b03a 	or	r18,r5,r4
10006ffc:	18800005 	stb	r2,0(r3)
10007000:	9548b03a 	or	r4,r18,r21
10007004:	203ff61e 	bne	r4,zero,10006fe0 <__alt_data_end+0xf8006fe0>
10007008:	e100004c 	andi	r4,fp,1
1000700c:	d8c13115 	stw	r3,1220(sp)
10007010:	20039a1e 	bne	r4,zero,10007e7c <___vfprintf_internal_r+0x144c>
10007014:	d8812817 	ldw	r2,1184(sp)
10007018:	10e3c83a 	sub	r17,r2,r3
1000701c:	8805883a 	mov	r2,r17
10007020:	8a40010e 	bge	r17,r9,10007028 <___vfprintf_internal_r+0x5f8>
10007024:	4805883a 	mov	r2,r9
10007028:	d8812b15 	stw	r2,1196(sp)
1000702c:	d8013415 	stw	zero,1232(sp)
10007030:	98803fcc 	andi	r2,r19,255
10007034:	1080201c 	xori	r2,r2,128
10007038:	10bfe004 	addi	r2,r2,-128
1000703c:	10000326 	beq	r2,zero,1000704c <___vfprintf_internal_r+0x61c>
10007040:	d8c12b17 	ldw	r3,1196(sp)
10007044:	18c00044 	addi	r3,r3,1
10007048:	d8c12b15 	stw	r3,1196(sp)
1000704c:	e0c0008c 	andi	r3,fp,2
10007050:	d8c12c15 	stw	r3,1200(sp)
10007054:	18000326 	beq	r3,zero,10007064 <___vfprintf_internal_r+0x634>
10007058:	d8c12b17 	ldw	r3,1196(sp)
1000705c:	18c00084 	addi	r3,r3,2
10007060:	d8c12b15 	stw	r3,1196(sp)
10007064:	e0c0210c 	andi	r3,fp,132
10007068:	d8c13015 	stw	r3,1216(sp)
1000706c:	1801f81e 	bne	r3,zero,10007850 <___vfprintf_internal_r+0xe20>
10007070:	d9012e17 	ldw	r4,1208(sp)
10007074:	d8c12b17 	ldw	r3,1196(sp)
10007078:	20ebc83a 	sub	r21,r4,r3
1000707c:	0541f40e 	bge	zero,r21,10007850 <___vfprintf_internal_r+0xe20>
10007080:	02400404 	movi	r9,16
10007084:	d8c12017 	ldw	r3,1152(sp)
10007088:	d8811f17 	ldw	r2,1148(sp)
1000708c:	4d45750e 	bge	r9,r21,10008664 <___vfprintf_internal_r+0x1c34>
10007090:	01440074 	movhi	r5,4097
10007094:	2949ba84 	addi	r5,r5,9962
10007098:	d9413615 	stw	r5,1240(sp)
1000709c:	4827883a 	mov	r19,r9
100070a0:	048001c4 	movi	r18,7
100070a4:	00000306 	br	100070b4 <___vfprintf_internal_r+0x684>
100070a8:	ad7ffc04 	addi	r21,r21,-16
100070ac:	42000204 	addi	r8,r8,8
100070b0:	9d40130e 	bge	r19,r21,10007100 <___vfprintf_internal_r+0x6d0>
100070b4:	01040074 	movhi	r4,4097
100070b8:	18c00404 	addi	r3,r3,16
100070bc:	10800044 	addi	r2,r2,1
100070c0:	2109ba84 	addi	r4,r4,9962
100070c4:	41000015 	stw	r4,0(r8)
100070c8:	44c00115 	stw	r19,4(r8)
100070cc:	d8c12015 	stw	r3,1152(sp)
100070d0:	d8811f15 	stw	r2,1148(sp)
100070d4:	90bff40e 	bge	r18,r2,100070a8 <__alt_data_end+0xf80070a8>
100070d8:	b809883a 	mov	r4,r23
100070dc:	b00b883a 	mov	r5,r22
100070e0:	d9811e04 	addi	r6,sp,1144
100070e4:	000d45c0 	call	1000d45c <__sprint_r>
100070e8:	103f691e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
100070ec:	ad7ffc04 	addi	r21,r21,-16
100070f0:	d8c12017 	ldw	r3,1152(sp)
100070f4:	d8811f17 	ldw	r2,1148(sp)
100070f8:	da000404 	addi	r8,sp,16
100070fc:	9d7fed16 	blt	r19,r21,100070b4 <__alt_data_end+0xf80070b4>
10007100:	d9413617 	ldw	r5,1240(sp)
10007104:	a8c7883a 	add	r3,r21,r3
10007108:	10800044 	addi	r2,r2,1
1000710c:	41400015 	stw	r5,0(r8)
10007110:	45400115 	stw	r21,4(r8)
10007114:	d8c12015 	stw	r3,1152(sp)
10007118:	d8811f15 	stw	r2,1148(sp)
1000711c:	010001c4 	movi	r4,7
10007120:	20832b16 	blt	r4,r2,10007dd0 <___vfprintf_internal_r+0x13a0>
10007124:	d8812787 	ldb	r2,1182(sp)
10007128:	42000204 	addi	r8,r8,8
1000712c:	10000c26 	beq	r2,zero,10007160 <___vfprintf_internal_r+0x730>
10007130:	d8811f17 	ldw	r2,1148(sp)
10007134:	d9012784 	addi	r4,sp,1182
10007138:	18c00044 	addi	r3,r3,1
1000713c:	10800044 	addi	r2,r2,1
10007140:	41000015 	stw	r4,0(r8)
10007144:	01000044 	movi	r4,1
10007148:	41000115 	stw	r4,4(r8)
1000714c:	d8c12015 	stw	r3,1152(sp)
10007150:	d8811f15 	stw	r2,1148(sp)
10007154:	010001c4 	movi	r4,7
10007158:	2082c416 	blt	r4,r2,10007c6c <___vfprintf_internal_r+0x123c>
1000715c:	42000204 	addi	r8,r8,8
10007160:	d8812c17 	ldw	r2,1200(sp)
10007164:	10000c26 	beq	r2,zero,10007198 <___vfprintf_internal_r+0x768>
10007168:	d8811f17 	ldw	r2,1148(sp)
1000716c:	d9012704 	addi	r4,sp,1180
10007170:	18c00084 	addi	r3,r3,2
10007174:	10800044 	addi	r2,r2,1
10007178:	41000015 	stw	r4,0(r8)
1000717c:	01000084 	movi	r4,2
10007180:	41000115 	stw	r4,4(r8)
10007184:	d8c12015 	stw	r3,1152(sp)
10007188:	d8811f15 	stw	r2,1148(sp)
1000718c:	010001c4 	movi	r4,7
10007190:	2082be16 	blt	r4,r2,10007c8c <___vfprintf_internal_r+0x125c>
10007194:	42000204 	addi	r8,r8,8
10007198:	d9013017 	ldw	r4,1216(sp)
1000719c:	00802004 	movi	r2,128
100071a0:	20822026 	beq	r4,r2,10007a24 <___vfprintf_internal_r+0xff4>
100071a4:	d9413217 	ldw	r5,1224(sp)
100071a8:	2c67c83a 	sub	r19,r5,r17
100071ac:	04c0260e 	bge	zero,r19,10007248 <___vfprintf_internal_r+0x818>
100071b0:	05400404 	movi	r21,16
100071b4:	d8811f17 	ldw	r2,1148(sp)
100071b8:	acc4720e 	bge	r21,r19,10008384 <___vfprintf_internal_r+0x1954>
100071bc:	01440074 	movhi	r5,4097
100071c0:	2949b684 	addi	r5,r5,9946
100071c4:	d9412c15 	stw	r5,1200(sp)
100071c8:	048001c4 	movi	r18,7
100071cc:	00000306 	br	100071dc <___vfprintf_internal_r+0x7ac>
100071d0:	9cfffc04 	addi	r19,r19,-16
100071d4:	42000204 	addi	r8,r8,8
100071d8:	acc0110e 	bge	r21,r19,10007220 <___vfprintf_internal_r+0x7f0>
100071dc:	18c00404 	addi	r3,r3,16
100071e0:	10800044 	addi	r2,r2,1
100071e4:	45000015 	stw	r20,0(r8)
100071e8:	45400115 	stw	r21,4(r8)
100071ec:	d8c12015 	stw	r3,1152(sp)
100071f0:	d8811f15 	stw	r2,1148(sp)
100071f4:	90bff60e 	bge	r18,r2,100071d0 <__alt_data_end+0xf80071d0>
100071f8:	b809883a 	mov	r4,r23
100071fc:	b00b883a 	mov	r5,r22
10007200:	d9811e04 	addi	r6,sp,1144
10007204:	000d45c0 	call	1000d45c <__sprint_r>
10007208:	103f211e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
1000720c:	9cfffc04 	addi	r19,r19,-16
10007210:	d8c12017 	ldw	r3,1152(sp)
10007214:	d8811f17 	ldw	r2,1148(sp)
10007218:	da000404 	addi	r8,sp,16
1000721c:	acffef16 	blt	r21,r19,100071dc <__alt_data_end+0xf80071dc>
10007220:	d9012c17 	ldw	r4,1200(sp)
10007224:	1cc7883a 	add	r3,r3,r19
10007228:	10800044 	addi	r2,r2,1
1000722c:	41000015 	stw	r4,0(r8)
10007230:	44c00115 	stw	r19,4(r8)
10007234:	d8c12015 	stw	r3,1152(sp)
10007238:	d8811f15 	stw	r2,1148(sp)
1000723c:	010001c4 	movi	r4,7
10007240:	20828216 	blt	r4,r2,10007c4c <___vfprintf_internal_r+0x121c>
10007244:	42000204 	addi	r8,r8,8
10007248:	e080400c 	andi	r2,fp,256
1000724c:	1001ac1e 	bne	r2,zero,10007900 <___vfprintf_internal_r+0xed0>
10007250:	d8811f17 	ldw	r2,1148(sp)
10007254:	d9413117 	ldw	r5,1220(sp)
10007258:	1c47883a 	add	r3,r3,r17
1000725c:	10800044 	addi	r2,r2,1
10007260:	41400015 	stw	r5,0(r8)
10007264:	44400115 	stw	r17,4(r8)
10007268:	d8c12015 	stw	r3,1152(sp)
1000726c:	d8811f15 	stw	r2,1148(sp)
10007270:	010001c4 	movi	r4,7
10007274:	20825d16 	blt	r4,r2,10007bec <___vfprintf_internal_r+0x11bc>
10007278:	42000204 	addi	r8,r8,8
1000727c:	e080010c 	andi	r2,fp,4
10007280:	10003126 	beq	r2,zero,10007348 <___vfprintf_internal_r+0x918>
10007284:	d8812e17 	ldw	r2,1208(sp)
10007288:	d9012b17 	ldw	r4,1196(sp)
1000728c:	1121c83a 	sub	r16,r2,r4
10007290:	04002d0e 	bge	zero,r16,10007348 <___vfprintf_internal_r+0x918>
10007294:	04400404 	movi	r17,16
10007298:	d8811f17 	ldw	r2,1148(sp)
1000729c:	8c05340e 	bge	r17,r16,10008770 <___vfprintf_internal_r+0x1d40>
100072a0:	01040074 	movhi	r4,4097
100072a4:	2109ba84 	addi	r4,r4,9962
100072a8:	d9013615 	stw	r4,1240(sp)
100072ac:	048001c4 	movi	r18,7
100072b0:	00000306 	br	100072c0 <___vfprintf_internal_r+0x890>
100072b4:	843ffc04 	addi	r16,r16,-16
100072b8:	42000204 	addi	r8,r8,8
100072bc:	8c00130e 	bge	r17,r16,1000730c <___vfprintf_internal_r+0x8dc>
100072c0:	01440074 	movhi	r5,4097
100072c4:	18c00404 	addi	r3,r3,16
100072c8:	10800044 	addi	r2,r2,1
100072cc:	2949ba84 	addi	r5,r5,9962
100072d0:	41400015 	stw	r5,0(r8)
100072d4:	44400115 	stw	r17,4(r8)
100072d8:	d8c12015 	stw	r3,1152(sp)
100072dc:	d8811f15 	stw	r2,1148(sp)
100072e0:	90bff40e 	bge	r18,r2,100072b4 <__alt_data_end+0xf80072b4>
100072e4:	b809883a 	mov	r4,r23
100072e8:	b00b883a 	mov	r5,r22
100072ec:	d9811e04 	addi	r6,sp,1144
100072f0:	000d45c0 	call	1000d45c <__sprint_r>
100072f4:	103ee61e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
100072f8:	843ffc04 	addi	r16,r16,-16
100072fc:	d8c12017 	ldw	r3,1152(sp)
10007300:	d8811f17 	ldw	r2,1148(sp)
10007304:	da000404 	addi	r8,sp,16
10007308:	8c3fed16 	blt	r17,r16,100072c0 <__alt_data_end+0xf80072c0>
1000730c:	d9013617 	ldw	r4,1240(sp)
10007310:	1c07883a 	add	r3,r3,r16
10007314:	10800044 	addi	r2,r2,1
10007318:	41000015 	stw	r4,0(r8)
1000731c:	44000115 	stw	r16,4(r8)
10007320:	d8c12015 	stw	r3,1152(sp)
10007324:	d8811f15 	stw	r2,1148(sp)
10007328:	010001c4 	movi	r4,7
1000732c:	2080060e 	bge	r4,r2,10007348 <___vfprintf_internal_r+0x918>
10007330:	b809883a 	mov	r4,r23
10007334:	b00b883a 	mov	r5,r22
10007338:	d9811e04 	addi	r6,sp,1144
1000733c:	000d45c0 	call	1000d45c <__sprint_r>
10007340:	103ed31e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007344:	d8c12017 	ldw	r3,1152(sp)
10007348:	df012b17 	ldw	fp,1196(sp)
1000734c:	d9412e17 	ldw	r5,1208(sp)
10007350:	e140010e 	bge	fp,r5,10007358 <___vfprintf_internal_r+0x928>
10007354:	2839883a 	mov	fp,r5
10007358:	d8812f17 	ldw	r2,1212(sp)
1000735c:	1705883a 	add	r2,r2,fp
10007360:	d8812f15 	stw	r2,1212(sp)
10007364:	1802291e 	bne	r3,zero,10007c0c <___vfprintf_internal_r+0x11dc>
10007368:	d8c12a17 	ldw	r3,1192(sp)
1000736c:	d8011f15 	stw	zero,1148(sp)
10007370:	da000404 	addi	r8,sp,16
10007374:	18800007 	ldb	r2,0(r3)
10007378:	103ded1e 	bne	r2,zero,10006b30 <__alt_data_end+0xf8006b30>
1000737c:	dc012a17 	ldw	r16,1192(sp)
10007380:	003e0506 	br	10006b98 <__alt_data_end+0xf8006b98>
10007384:	d9012d17 	ldw	r4,1204(sp)
10007388:	d9412d17 	ldw	r5,1204(sp)
1000738c:	da012a17 	ldw	r8,1192(sp)
10007390:	21000017 	ldw	r4,0(r4)
10007394:	29400117 	ldw	r5,4(r5)
10007398:	df012a15 	stw	fp,1192(sp)
1000739c:	9839883a 	mov	fp,r19
100073a0:	dcc12b03 	ldbu	r19,1196(sp)
100073a4:	d9013715 	stw	r4,1244(sp)
100073a8:	d9413915 	stw	r5,1252(sp)
100073ac:	da013f15 	stw	r8,1276(sp)
100073b0:	da413e15 	stw	r9,1272(sp)
100073b4:	dcc12785 	stb	r19,1182(sp)
100073b8:	0002d9c0 	call	10002d9c <__fpclassifyd>
100073bc:	d8c12d17 	ldw	r3,1204(sp)
100073c0:	04400044 	movi	r17,1
100073c4:	da013f17 	ldw	r8,1276(sp)
100073c8:	1c800204 	addi	r18,r3,8
100073cc:	da413e17 	ldw	r9,1272(sp)
100073d0:	d9013717 	ldw	r4,1244(sp)
100073d4:	d9413917 	ldw	r5,1252(sp)
100073d8:	1443451e 	bne	r2,r17,100080f0 <___vfprintf_internal_r+0x16c0>
100073dc:	000d883a 	mov	r6,zero
100073e0:	000f883a 	mov	r7,zero
100073e4:	00054a00 	call	100054a0 <__ledf2>
100073e8:	da013f17 	ldw	r8,1276(sp)
100073ec:	1004fe16 	blt	r2,zero,100087e8 <___vfprintf_internal_r+0x1db8>
100073f0:	dcc12783 	ldbu	r19,1182(sp)
100073f4:	008011c4 	movi	r2,71
100073f8:	14045d0e 	bge	r2,r16,10008570 <___vfprintf_internal_r+0x1b40>
100073fc:	01440074 	movhi	r5,4097
10007400:	2949a704 	addi	r5,r5,9884
10007404:	d9413115 	stw	r5,1220(sp)
10007408:	00c000c4 	movi	r3,3
1000740c:	00bfdfc4 	movi	r2,-129
10007410:	d8c12b15 	stw	r3,1196(sp)
10007414:	e0b8703a 	and	fp,fp,r2
10007418:	dc812d15 	stw	r18,1204(sp)
1000741c:	1823883a 	mov	r17,r3
10007420:	d8013215 	stw	zero,1224(sp)
10007424:	d8013415 	stw	zero,1232(sp)
10007428:	003f0106 	br	10007030 <__alt_data_end+0xf8007030>
1000742c:	9cc00214 	ori	r19,r19,8
10007430:	e005883a 	mov	r2,fp
10007434:	e4000007 	ldb	r16,0(fp)
10007438:	003de506 	br	10006bd0 <__alt_data_end+0xf8006bd0>
1000743c:	da012a17 	ldw	r8,1192(sp)
10007440:	df012a15 	stw	fp,1192(sp)
10007444:	9f000414 	ori	fp,r19,16
10007448:	e0c0080c 	andi	r3,fp,32
1000744c:	d8812d17 	ldw	r2,1204(sp)
10007450:	18007626 	beq	r3,zero,1000762c <___vfprintf_internal_r+0xbfc>
10007454:	d9412d17 	ldw	r5,1204(sp)
10007458:	14800017 	ldw	r18,0(r2)
1000745c:	15400117 	ldw	r21,4(r2)
10007460:	29400204 	addi	r5,r5,8
10007464:	d9412d15 	stw	r5,1204(sp)
10007468:	0005883a 	mov	r2,zero
1000746c:	9546b03a 	or	r3,r18,r21
10007470:	d8012785 	stb	zero,1182(sp)
10007474:	da413215 	stw	r9,1224(sp)
10007478:	0027883a 	mov	r19,zero
1000747c:	003ecd06 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007480:	da012a17 	ldw	r8,1192(sp)
10007484:	df012a15 	stw	fp,1192(sp)
10007488:	9f000414 	ori	fp,r19,16
1000748c:	e0c0080c 	andi	r3,fp,32
10007490:	d8812d17 	ldw	r2,1204(sp)
10007494:	18002c26 	beq	r3,zero,10007548 <___vfprintf_internal_r+0xb18>
10007498:	d9012d17 	ldw	r4,1204(sp)
1000749c:	14800017 	ldw	r18,0(r2)
100074a0:	15400117 	ldw	r21,4(r2)
100074a4:	21000204 	addi	r4,r4,8
100074a8:	d9012d15 	stw	r4,1204(sp)
100074ac:	00800044 	movi	r2,1
100074b0:	9546b03a 	or	r3,r18,r21
100074b4:	003fee06 	br	10007470 <__alt_data_end+0xf8007470>
100074b8:	da012a17 	ldw	r8,1192(sp)
100074bc:	df012a15 	stw	fp,1192(sp)
100074c0:	9839883a 	mov	fp,r19
100074c4:	dcc12b03 	ldbu	r19,1196(sp)
100074c8:	01440074 	movhi	r5,4097
100074cc:	2949aa04 	addi	r5,r5,9896
100074d0:	dcc12785 	stb	r19,1182(sp)
100074d4:	d9413b15 	stw	r5,1260(sp)
100074d8:	e0c0080c 	andi	r3,fp,32
100074dc:	d8812d17 	ldw	r2,1204(sp)
100074e0:	18002e26 	beq	r3,zero,1000759c <___vfprintf_internal_r+0xb6c>
100074e4:	d9412d17 	ldw	r5,1204(sp)
100074e8:	14800017 	ldw	r18,0(r2)
100074ec:	15400117 	ldw	r21,4(r2)
100074f0:	29400204 	addi	r5,r5,8
100074f4:	d9412d15 	stw	r5,1204(sp)
100074f8:	e080004c 	andi	r2,fp,1
100074fc:	10025c26 	beq	r2,zero,10007e70 <___vfprintf_internal_r+0x1440>
10007500:	9546b03a 	or	r3,r18,r21
10007504:	18038f26 	beq	r3,zero,10008344 <___vfprintf_internal_r+0x1914>
10007508:	00800c04 	movi	r2,48
1000750c:	d8812705 	stb	r2,1180(sp)
10007510:	dc012745 	stb	r16,1181(sp)
10007514:	e7000094 	ori	fp,fp,2
10007518:	00800084 	movi	r2,2
1000751c:	003fd406 	br	10007470 <__alt_data_end+0xf8007470>
10007520:	9cc00814 	ori	r19,r19,32
10007524:	e005883a 	mov	r2,fp
10007528:	e4000007 	ldb	r16,0(fp)
1000752c:	003da806 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10007530:	da012a17 	ldw	r8,1192(sp)
10007534:	df012a15 	stw	fp,1192(sp)
10007538:	9839883a 	mov	fp,r19
1000753c:	e0c0080c 	andi	r3,fp,32
10007540:	d8812d17 	ldw	r2,1204(sp)
10007544:	183fd41e 	bne	r3,zero,10007498 <__alt_data_end+0xf8007498>
10007548:	e0c0040c 	andi	r3,fp,16
1000754c:	18035f26 	beq	r3,zero,100082cc <___vfprintf_internal_r+0x189c>
10007550:	d9412d17 	ldw	r5,1204(sp)
10007554:	14800017 	ldw	r18,0(r2)
10007558:	002b883a 	mov	r21,zero
1000755c:	29400104 	addi	r5,r5,4
10007560:	d9412d15 	stw	r5,1204(sp)
10007564:	00800044 	movi	r2,1
10007568:	9007883a 	mov	r3,r18
1000756c:	003fc006 	br	10007470 <__alt_data_end+0xf8007470>
10007570:	da012a17 	ldw	r8,1192(sp)
10007574:	df012a15 	stw	fp,1192(sp)
10007578:	9839883a 	mov	fp,r19
1000757c:	dcc12b03 	ldbu	r19,1196(sp)
10007580:	01040074 	movhi	r4,4097
10007584:	2109af04 	addi	r4,r4,9916
10007588:	d9013b15 	stw	r4,1260(sp)
1000758c:	dcc12785 	stb	r19,1182(sp)
10007590:	e0c0080c 	andi	r3,fp,32
10007594:	d8812d17 	ldw	r2,1204(sp)
10007598:	183fd21e 	bne	r3,zero,100074e4 <__alt_data_end+0xf80074e4>
1000759c:	e0c0040c 	andi	r3,fp,16
100075a0:	18035426 	beq	r3,zero,100082f4 <___vfprintf_internal_r+0x18c4>
100075a4:	d8c12d17 	ldw	r3,1204(sp)
100075a8:	14800017 	ldw	r18,0(r2)
100075ac:	002b883a 	mov	r21,zero
100075b0:	18c00104 	addi	r3,r3,4
100075b4:	d8c12d15 	stw	r3,1204(sp)
100075b8:	003fcf06 	br	100074f8 <__alt_data_end+0xf80074f8>
100075bc:	e4000007 	ldb	r16,0(fp)
100075c0:	00801b04 	movi	r2,108
100075c4:	8083f726 	beq	r16,r2,100085a4 <___vfprintf_internal_r+0x1b74>
100075c8:	9cc00414 	ori	r19,r19,16
100075cc:	e005883a 	mov	r2,fp
100075d0:	003d7f06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
100075d4:	da012a17 	ldw	r8,1192(sp)
100075d8:	df012a15 	stw	fp,1192(sp)
100075dc:	9839883a 	mov	fp,r19
100075e0:	dcc12b03 	ldbu	r19,1196(sp)
100075e4:	e080080c 	andi	r2,fp,32
100075e8:	dcc12785 	stb	r19,1182(sp)
100075ec:	10032226 	beq	r2,zero,10008278 <___vfprintf_internal_r+0x1848>
100075f0:	d9412d17 	ldw	r5,1204(sp)
100075f4:	d9012f17 	ldw	r4,1212(sp)
100075f8:	28800017 	ldw	r2,0(r5)
100075fc:	2007d7fa 	srai	r3,r4,31
10007600:	29400104 	addi	r5,r5,4
10007604:	d9412d15 	stw	r5,1204(sp)
10007608:	11000015 	stw	r4,0(r2)
1000760c:	10c00115 	stw	r3,4(r2)
10007610:	003d4406 	br	10006b24 <__alt_data_end+0xf8006b24>
10007614:	da012a17 	ldw	r8,1192(sp)
10007618:	df012a15 	stw	fp,1192(sp)
1000761c:	9839883a 	mov	fp,r19
10007620:	e0c0080c 	andi	r3,fp,32
10007624:	d8812d17 	ldw	r2,1204(sp)
10007628:	183f8a1e 	bne	r3,zero,10007454 <__alt_data_end+0xf8007454>
1000762c:	e0c0040c 	andi	r3,fp,16
10007630:	18031c26 	beq	r3,zero,100082a4 <___vfprintf_internal_r+0x1874>
10007634:	14800017 	ldw	r18,0(r2)
10007638:	d8812d17 	ldw	r2,1204(sp)
1000763c:	002b883a 	mov	r21,zero
10007640:	9007883a 	mov	r3,r18
10007644:	10800104 	addi	r2,r2,4
10007648:	d8812d15 	stw	r2,1204(sp)
1000764c:	0005883a 	mov	r2,zero
10007650:	003f8706 	br	10007470 <__alt_data_end+0xf8007470>
10007654:	d9412d17 	ldw	r5,1204(sp)
10007658:	00800c04 	movi	r2,48
1000765c:	d8812705 	stb	r2,1180(sp)
10007660:	2c800017 	ldw	r18,0(r5)
10007664:	00801e04 	movi	r2,120
10007668:	d8812745 	stb	r2,1181(sp)
1000766c:	00840074 	movhi	r2,4097
10007670:	1089af04 	addi	r2,r2,9916
10007674:	29400104 	addi	r5,r5,4
10007678:	da012a17 	ldw	r8,1192(sp)
1000767c:	d8813b15 	stw	r2,1260(sp)
10007680:	df012a15 	stw	fp,1192(sp)
10007684:	002b883a 	mov	r21,zero
10007688:	9f000094 	ori	fp,r19,2
1000768c:	d9412d15 	stw	r5,1204(sp)
10007690:	00800084 	movi	r2,2
10007694:	04001e04 	movi	r16,120
10007698:	9007883a 	mov	r3,r18
1000769c:	003f7406 	br	10007470 <__alt_data_end+0xf8007470>
100076a0:	da012a17 	ldw	r8,1192(sp)
100076a4:	df012a15 	stw	fp,1192(sp)
100076a8:	9839883a 	mov	fp,r19
100076ac:	dcc12b03 	ldbu	r19,1196(sp)
100076b0:	e080080c 	andi	r2,fp,32
100076b4:	d8c12d17 	ldw	r3,1204(sp)
100076b8:	dcc12785 	stb	r19,1182(sp)
100076bc:	103e321e 	bne	r2,zero,10006f88 <__alt_data_end+0xf8006f88>
100076c0:	e080040c 	andi	r2,fp,16
100076c4:	10031326 	beq	r2,zero,10008314 <___vfprintf_internal_r+0x18e4>
100076c8:	1c800017 	ldw	r18,0(r3)
100076cc:	d9412d17 	ldw	r5,1204(sp)
100076d0:	902bd7fa 	srai	r21,r18,31
100076d4:	29400104 	addi	r5,r5,4
100076d8:	d9412d15 	stw	r5,1204(sp)
100076dc:	a805883a 	mov	r2,r21
100076e0:	003e2f06 	br	10006fa0 <__alt_data_end+0xf8006fa0>
100076e4:	9cc01014 	ori	r19,r19,64
100076e8:	e005883a 	mov	r2,fp
100076ec:	e4000007 	ldb	r16,0(fp)
100076f0:	003d3706 	br	10006bd0 <__alt_data_end+0xf8006bd0>
100076f4:	d8c12d17 	ldw	r3,1204(sp)
100076f8:	d9012d17 	ldw	r4,1204(sp)
100076fc:	da012a17 	ldw	r8,1192(sp)
10007700:	18800017 	ldw	r2,0(r3)
10007704:	21000104 	addi	r4,r4,4
10007708:	00c00044 	movi	r3,1
1000770c:	df012a15 	stw	fp,1192(sp)
10007710:	d8c12b15 	stw	r3,1196(sp)
10007714:	9839883a 	mov	fp,r19
10007718:	d8012785 	stb	zero,1182(sp)
1000771c:	d8810405 	stb	r2,1040(sp)
10007720:	d9012d15 	stw	r4,1204(sp)
10007724:	1823883a 	mov	r17,r3
10007728:	d8c10404 	addi	r3,sp,1040
1000772c:	d8013215 	stw	zero,1224(sp)
10007730:	d8013415 	stw	zero,1232(sp)
10007734:	d8c13115 	stw	r3,1220(sp)
10007738:	0005883a 	mov	r2,zero
1000773c:	003e4306 	br	1000704c <__alt_data_end+0xf800704c>
10007740:	d8812b07 	ldb	r2,1196(sp)
10007744:	1002fc1e 	bne	r2,zero,10008338 <___vfprintf_internal_r+0x1908>
10007748:	00c00804 	movi	r3,32
1000774c:	d8c12b05 	stb	r3,1196(sp)
10007750:	e005883a 	mov	r2,fp
10007754:	e4000007 	ldb	r16,0(fp)
10007758:	003d1d06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
1000775c:	9cc00054 	ori	r19,r19,1
10007760:	e005883a 	mov	r2,fp
10007764:	e4000007 	ldb	r16,0(fp)
10007768:	003d1906 	br	10006bd0 <__alt_data_end+0xf8006bd0>
1000776c:	d9012d17 	ldw	r4,1204(sp)
10007770:	d9412d17 	ldw	r5,1204(sp)
10007774:	21000017 	ldw	r4,0(r4)
10007778:	28c00104 	addi	r3,r5,4
1000777c:	d9012e15 	stw	r4,1208(sp)
10007780:	20038c16 	blt	r4,zero,100085b4 <___vfprintf_internal_r+0x1b84>
10007784:	d8c12d15 	stw	r3,1204(sp)
10007788:	e005883a 	mov	r2,fp
1000778c:	e4000007 	ldb	r16,0(fp)
10007790:	003d0f06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10007794:	00c00ac4 	movi	r3,43
10007798:	d8c12b05 	stb	r3,1196(sp)
1000779c:	e005883a 	mov	r2,fp
100077a0:	e4000007 	ldb	r16,0(fp)
100077a4:	003d0a06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
100077a8:	d8c12d17 	ldw	r3,1204(sp)
100077ac:	d9012d17 	ldw	r4,1204(sp)
100077b0:	da012a17 	ldw	r8,1192(sp)
100077b4:	18c00017 	ldw	r3,0(r3)
100077b8:	df012a15 	stw	fp,1192(sp)
100077bc:	d8012785 	stb	zero,1182(sp)
100077c0:	d8c13115 	stw	r3,1220(sp)
100077c4:	9839883a 	mov	fp,r19
100077c8:	24800104 	addi	r18,r4,4
100077cc:	1803f726 	beq	r3,zero,100087ac <___vfprintf_internal_r+0x1d7c>
100077d0:	d9013117 	ldw	r4,1220(sp)
100077d4:	48038916 	blt	r9,zero,100085fc <___vfprintf_internal_r+0x1bcc>
100077d8:	480d883a 	mov	r6,r9
100077dc:	000b883a 	mov	r5,zero
100077e0:	da013f15 	stw	r8,1276(sp)
100077e4:	da413e15 	stw	r9,1272(sp)
100077e8:	000bba00 	call	1000bba0 <memchr>
100077ec:	da013f17 	ldw	r8,1276(sp)
100077f0:	da413e17 	ldw	r9,1272(sp)
100077f4:	10045926 	beq	r2,zero,1000895c <___vfprintf_internal_r+0x1f2c>
100077f8:	d8c13117 	ldw	r3,1220(sp)
100077fc:	10e3c83a 	sub	r17,r2,r3
10007800:	4c433516 	blt	r9,r17,100084d8 <___vfprintf_internal_r+0x1aa8>
10007804:	8805883a 	mov	r2,r17
10007808:	88038116 	blt	r17,zero,10008610 <___vfprintf_internal_r+0x1be0>
1000780c:	dcc12783 	ldbu	r19,1182(sp)
10007810:	d8812b15 	stw	r2,1196(sp)
10007814:	dc812d15 	stw	r18,1204(sp)
10007818:	d8013215 	stw	zero,1224(sp)
1000781c:	d8013415 	stw	zero,1232(sp)
10007820:	003e0306 	br	10007030 <__alt_data_end+0xf8007030>
10007824:	da012a17 	ldw	r8,1192(sp)
10007828:	df012a15 	stw	fp,1192(sp)
1000782c:	9839883a 	mov	fp,r19
10007830:	dcc12b03 	ldbu	r19,1196(sp)
10007834:	dcc12785 	stb	r19,1182(sp)
10007838:	803d8f26 	beq	r16,zero,10006e78 <__alt_data_end+0xf8006e78>
1000783c:	00c00044 	movi	r3,1
10007840:	d8c12b15 	stw	r3,1196(sp)
10007844:	dc010405 	stb	r16,1040(sp)
10007848:	d8012785 	stb	zero,1182(sp)
1000784c:	003fb506 	br	10007724 <__alt_data_end+0xf8007724>
10007850:	d8c12017 	ldw	r3,1152(sp)
10007854:	003e3506 	br	1000712c <__alt_data_end+0xf800712c>
10007858:	10803fcc 	andi	r2,r2,255
1000785c:	00c00044 	movi	r3,1
10007860:	10fddc1e 	bne	r2,r3,10006fd4 <__alt_data_end+0xf8006fd4>
10007864:	a800021e 	bne	r21,zero,10007870 <___vfprintf_internal_r+0xe40>
10007868:	00800244 	movi	r2,9
1000786c:	14801e2e 	bgeu	r2,r18,100078e8 <___vfprintf_internal_r+0xeb8>
10007870:	dc012b15 	stw	r16,1196(sp)
10007874:	dc410e04 	addi	r17,sp,1080
10007878:	9021883a 	mov	r16,r18
1000787c:	da012c15 	stw	r8,1200(sp)
10007880:	a825883a 	mov	r18,r21
10007884:	482b883a 	mov	r21,r9
10007888:	8009883a 	mov	r4,r16
1000788c:	900b883a 	mov	r5,r18
10007890:	01800284 	movi	r6,10
10007894:	000f883a 	mov	r7,zero
10007898:	00039b00 	call	100039b0 <__umoddi3>
1000789c:	10800c04 	addi	r2,r2,48
100078a0:	8c7fffc4 	addi	r17,r17,-1
100078a4:	8009883a 	mov	r4,r16
100078a8:	900b883a 	mov	r5,r18
100078ac:	01800284 	movi	r6,10
100078b0:	000f883a 	mov	r7,zero
100078b4:	88800005 	stb	r2,0(r17)
100078b8:	00033700 	call	10003370 <__udivdi3>
100078bc:	1021883a 	mov	r16,r2
100078c0:	10c4b03a 	or	r2,r2,r3
100078c4:	1825883a 	mov	r18,r3
100078c8:	103fef1e 	bne	r2,zero,10007888 <__alt_data_end+0xf8007888>
100078cc:	d9012817 	ldw	r4,1184(sp)
100078d0:	dc413115 	stw	r17,1220(sp)
100078d4:	dc012b17 	ldw	r16,1196(sp)
100078d8:	da012c17 	ldw	r8,1200(sp)
100078dc:	a813883a 	mov	r9,r21
100078e0:	2463c83a 	sub	r17,r4,r17
100078e4:	003dcd06 	br	1000701c <__alt_data_end+0xf800701c>
100078e8:	94800c04 	addi	r18,r18,48
100078ec:	d8c10dc4 	addi	r3,sp,1079
100078f0:	dc810dc5 	stb	r18,1079(sp)
100078f4:	dc413c17 	ldw	r17,1264(sp)
100078f8:	d8c13115 	stw	r3,1220(sp)
100078fc:	003dc706 	br	1000701c <__alt_data_end+0xf800701c>
10007900:	00801944 	movi	r2,101
10007904:	1400720e 	bge	r2,r16,10007ad0 <___vfprintf_internal_r+0x10a0>
10007908:	d9013717 	ldw	r4,1244(sp)
1000790c:	d9413917 	ldw	r5,1252(sp)
10007910:	000d883a 	mov	r6,zero
10007914:	000f883a 	mov	r7,zero
10007918:	d8c13d15 	stw	r3,1268(sp)
1000791c:	da013f15 	stw	r8,1276(sp)
10007920:	000533c0 	call	1000533c <__eqdf2>
10007924:	d8c13d17 	ldw	r3,1268(sp)
10007928:	da013f17 	ldw	r8,1276(sp)
1000792c:	1000f41e 	bne	r2,zero,10007d00 <___vfprintf_internal_r+0x12d0>
10007930:	d8811f17 	ldw	r2,1148(sp)
10007934:	01040074 	movhi	r4,4097
10007938:	2109b604 	addi	r4,r4,9944
1000793c:	18c00044 	addi	r3,r3,1
10007940:	10800044 	addi	r2,r2,1
10007944:	41000015 	stw	r4,0(r8)
10007948:	01000044 	movi	r4,1
1000794c:	41000115 	stw	r4,4(r8)
10007950:	d8c12015 	stw	r3,1152(sp)
10007954:	d8811f15 	stw	r2,1148(sp)
10007958:	010001c4 	movi	r4,7
1000795c:	20828d16 	blt	r4,r2,10008394 <___vfprintf_internal_r+0x1964>
10007960:	42000204 	addi	r8,r8,8
10007964:	d8812617 	ldw	r2,1176(sp)
10007968:	d9413317 	ldw	r5,1228(sp)
1000796c:	11400216 	blt	r2,r5,10007978 <___vfprintf_internal_r+0xf48>
10007970:	e080004c 	andi	r2,fp,1
10007974:	103e4126 	beq	r2,zero,1000727c <__alt_data_end+0xf800727c>
10007978:	d8813817 	ldw	r2,1248(sp)
1000797c:	d9013517 	ldw	r4,1236(sp)
10007980:	d9413817 	ldw	r5,1248(sp)
10007984:	1887883a 	add	r3,r3,r2
10007988:	d8811f17 	ldw	r2,1148(sp)
1000798c:	41000015 	stw	r4,0(r8)
10007990:	41400115 	stw	r5,4(r8)
10007994:	10800044 	addi	r2,r2,1
10007998:	d8c12015 	stw	r3,1152(sp)
1000799c:	d8811f15 	stw	r2,1148(sp)
100079a0:	010001c4 	movi	r4,7
100079a4:	20830916 	blt	r4,r2,100085cc <___vfprintf_internal_r+0x1b9c>
100079a8:	42000204 	addi	r8,r8,8
100079ac:	d8813317 	ldw	r2,1228(sp)
100079b0:	143fffc4 	addi	r16,r2,-1
100079b4:	043e310e 	bge	zero,r16,1000727c <__alt_data_end+0xf800727c>
100079b8:	04400404 	movi	r17,16
100079bc:	d8811f17 	ldw	r2,1148(sp)
100079c0:	8c007e0e 	bge	r17,r16,10007bbc <___vfprintf_internal_r+0x118c>
100079c4:	01440074 	movhi	r5,4097
100079c8:	2949b684 	addi	r5,r5,9946
100079cc:	d9412c15 	stw	r5,1200(sp)
100079d0:	04c001c4 	movi	r19,7
100079d4:	00000306 	br	100079e4 <___vfprintf_internal_r+0xfb4>
100079d8:	42000204 	addi	r8,r8,8
100079dc:	843ffc04 	addi	r16,r16,-16
100079e0:	8c00790e 	bge	r17,r16,10007bc8 <___vfprintf_internal_r+0x1198>
100079e4:	18c00404 	addi	r3,r3,16
100079e8:	10800044 	addi	r2,r2,1
100079ec:	45000015 	stw	r20,0(r8)
100079f0:	44400115 	stw	r17,4(r8)
100079f4:	d8c12015 	stw	r3,1152(sp)
100079f8:	d8811f15 	stw	r2,1148(sp)
100079fc:	98bff60e 	bge	r19,r2,100079d8 <__alt_data_end+0xf80079d8>
10007a00:	b809883a 	mov	r4,r23
10007a04:	b00b883a 	mov	r5,r22
10007a08:	d9811e04 	addi	r6,sp,1144
10007a0c:	000d45c0 	call	1000d45c <__sprint_r>
10007a10:	103d1f1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007a14:	d8c12017 	ldw	r3,1152(sp)
10007a18:	d8811f17 	ldw	r2,1148(sp)
10007a1c:	da000404 	addi	r8,sp,16
10007a20:	003fee06 	br	100079dc <__alt_data_end+0xf80079dc>
10007a24:	d9412e17 	ldw	r5,1208(sp)
10007a28:	d8812b17 	ldw	r2,1196(sp)
10007a2c:	28a7c83a 	sub	r19,r5,r2
10007a30:	04fddc0e 	bge	zero,r19,100071a4 <__alt_data_end+0xf80071a4>
10007a34:	05400404 	movi	r21,16
10007a38:	d8811f17 	ldw	r2,1148(sp)
10007a3c:	acc3870e 	bge	r21,r19,1000885c <___vfprintf_internal_r+0x1e2c>
10007a40:	01440074 	movhi	r5,4097
10007a44:	2949b684 	addi	r5,r5,9946
10007a48:	d9412c15 	stw	r5,1200(sp)
10007a4c:	048001c4 	movi	r18,7
10007a50:	00000306 	br	10007a60 <___vfprintf_internal_r+0x1030>
10007a54:	9cfffc04 	addi	r19,r19,-16
10007a58:	42000204 	addi	r8,r8,8
10007a5c:	acc0110e 	bge	r21,r19,10007aa4 <___vfprintf_internal_r+0x1074>
10007a60:	18c00404 	addi	r3,r3,16
10007a64:	10800044 	addi	r2,r2,1
10007a68:	45000015 	stw	r20,0(r8)
10007a6c:	45400115 	stw	r21,4(r8)
10007a70:	d8c12015 	stw	r3,1152(sp)
10007a74:	d8811f15 	stw	r2,1148(sp)
10007a78:	90bff60e 	bge	r18,r2,10007a54 <__alt_data_end+0xf8007a54>
10007a7c:	b809883a 	mov	r4,r23
10007a80:	b00b883a 	mov	r5,r22
10007a84:	d9811e04 	addi	r6,sp,1144
10007a88:	000d45c0 	call	1000d45c <__sprint_r>
10007a8c:	103d001e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007a90:	9cfffc04 	addi	r19,r19,-16
10007a94:	d8c12017 	ldw	r3,1152(sp)
10007a98:	d8811f17 	ldw	r2,1148(sp)
10007a9c:	da000404 	addi	r8,sp,16
10007aa0:	acffef16 	blt	r21,r19,10007a60 <__alt_data_end+0xf8007a60>
10007aa4:	d9012c17 	ldw	r4,1200(sp)
10007aa8:	1cc7883a 	add	r3,r3,r19
10007aac:	10800044 	addi	r2,r2,1
10007ab0:	41000015 	stw	r4,0(r8)
10007ab4:	44c00115 	stw	r19,4(r8)
10007ab8:	d8c12015 	stw	r3,1152(sp)
10007abc:	d8811f15 	stw	r2,1148(sp)
10007ac0:	010001c4 	movi	r4,7
10007ac4:	20817816 	blt	r4,r2,100080a8 <___vfprintf_internal_r+0x1678>
10007ac8:	42000204 	addi	r8,r8,8
10007acc:	003db506 	br	100071a4 <__alt_data_end+0xf80071a4>
10007ad0:	d9413317 	ldw	r5,1228(sp)
10007ad4:	00800044 	movi	r2,1
10007ad8:	18c00044 	addi	r3,r3,1
10007adc:	11413e0e 	bge	r2,r5,10007fd8 <___vfprintf_internal_r+0x15a8>
10007ae0:	dc011f17 	ldw	r16,1148(sp)
10007ae4:	d8813117 	ldw	r2,1220(sp)
10007ae8:	d8c12015 	stw	r3,1152(sp)
10007aec:	84000044 	addi	r16,r16,1
10007af0:	40800015 	stw	r2,0(r8)
10007af4:	00800044 	movi	r2,1
10007af8:	40800115 	stw	r2,4(r8)
10007afc:	dc011f15 	stw	r16,1148(sp)
10007b00:	008001c4 	movi	r2,7
10007b04:	14015616 	blt	r2,r16,10008060 <___vfprintf_internal_r+0x1630>
10007b08:	42000204 	addi	r8,r8,8
10007b0c:	d9013817 	ldw	r4,1248(sp)
10007b10:	d9413517 	ldw	r5,1236(sp)
10007b14:	84000044 	addi	r16,r16,1
10007b18:	1907883a 	add	r3,r3,r4
10007b1c:	41400015 	stw	r5,0(r8)
10007b20:	41000115 	stw	r4,4(r8)
10007b24:	d8c12015 	stw	r3,1152(sp)
10007b28:	dc011f15 	stw	r16,1148(sp)
10007b2c:	008001c4 	movi	r2,7
10007b30:	14015416 	blt	r2,r16,10008084 <___vfprintf_internal_r+0x1654>
10007b34:	44400204 	addi	r17,r8,8
10007b38:	d9013717 	ldw	r4,1244(sp)
10007b3c:	d9413917 	ldw	r5,1252(sp)
10007b40:	000d883a 	mov	r6,zero
10007b44:	000f883a 	mov	r7,zero
10007b48:	d8c13d15 	stw	r3,1268(sp)
10007b4c:	000533c0 	call	1000533c <__eqdf2>
10007b50:	d8c13d17 	ldw	r3,1268(sp)
10007b54:	1000a726 	beq	r2,zero,10007df4 <___vfprintf_internal_r+0x13c4>
10007b58:	d9013317 	ldw	r4,1228(sp)
10007b5c:	d9413117 	ldw	r5,1220(sp)
10007b60:	84000044 	addi	r16,r16,1
10007b64:	20bfffc4 	addi	r2,r4,-1
10007b68:	1887883a 	add	r3,r3,r2
10007b6c:	29000044 	addi	r4,r5,1
10007b70:	88800115 	stw	r2,4(r17)
10007b74:	89000015 	stw	r4,0(r17)
10007b78:	d8c12015 	stw	r3,1152(sp)
10007b7c:	dc011f15 	stw	r16,1148(sp)
10007b80:	008001c4 	movi	r2,7
10007b84:	14012d16 	blt	r2,r16,1000803c <___vfprintf_internal_r+0x160c>
10007b88:	8c400204 	addi	r17,r17,8
10007b8c:	d9413a17 	ldw	r5,1256(sp)
10007b90:	dcc122c4 	addi	r19,sp,1163
10007b94:	84000044 	addi	r16,r16,1
10007b98:	28c7883a 	add	r3,r5,r3
10007b9c:	8cc00015 	stw	r19,0(r17)
10007ba0:	89400115 	stw	r5,4(r17)
10007ba4:	d8c12015 	stw	r3,1152(sp)
10007ba8:	dc011f15 	stw	r16,1148(sp)
10007bac:	008001c4 	movi	r2,7
10007bb0:	14000e16 	blt	r2,r16,10007bec <___vfprintf_internal_r+0x11bc>
10007bb4:	8a000204 	addi	r8,r17,8
10007bb8:	003db006 	br	1000727c <__alt_data_end+0xf800727c>
10007bbc:	01040074 	movhi	r4,4097
10007bc0:	2109b684 	addi	r4,r4,9946
10007bc4:	d9012c15 	stw	r4,1200(sp)
10007bc8:	d9012c17 	ldw	r4,1200(sp)
10007bcc:	1c07883a 	add	r3,r3,r16
10007bd0:	44000115 	stw	r16,4(r8)
10007bd4:	41000015 	stw	r4,0(r8)
10007bd8:	10800044 	addi	r2,r2,1
10007bdc:	d8c12015 	stw	r3,1152(sp)
10007be0:	d8811f15 	stw	r2,1148(sp)
10007be4:	010001c4 	movi	r4,7
10007be8:	20bda30e 	bge	r4,r2,10007278 <__alt_data_end+0xf8007278>
10007bec:	b809883a 	mov	r4,r23
10007bf0:	b00b883a 	mov	r5,r22
10007bf4:	d9811e04 	addi	r6,sp,1144
10007bf8:	000d45c0 	call	1000d45c <__sprint_r>
10007bfc:	103ca41e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007c00:	d8c12017 	ldw	r3,1152(sp)
10007c04:	da000404 	addi	r8,sp,16
10007c08:	003d9c06 	br	1000727c <__alt_data_end+0xf800727c>
10007c0c:	b809883a 	mov	r4,r23
10007c10:	b00b883a 	mov	r5,r22
10007c14:	d9811e04 	addi	r6,sp,1144
10007c18:	000d45c0 	call	1000d45c <__sprint_r>
10007c1c:	103dd226 	beq	r2,zero,10007368 <__alt_data_end+0xf8007368>
10007c20:	003c9b06 	br	10006e90 <__alt_data_end+0xf8006e90>
10007c24:	10803fcc 	andi	r2,r2,255
10007c28:	1000311e 	bne	r2,zero,10007cf0 <___vfprintf_internal_r+0x12c0>
10007c2c:	e080004c 	andi	r2,fp,1
10007c30:	10002f26 	beq	r2,zero,10007cf0 <___vfprintf_internal_r+0x12c0>
10007c34:	00800c04 	movi	r2,48
10007c38:	d8c10dc4 	addi	r3,sp,1079
10007c3c:	d8810dc5 	stb	r2,1079(sp)
10007c40:	dc413c17 	ldw	r17,1264(sp)
10007c44:	d8c13115 	stw	r3,1220(sp)
10007c48:	003cf406 	br	1000701c <__alt_data_end+0xf800701c>
10007c4c:	b809883a 	mov	r4,r23
10007c50:	b00b883a 	mov	r5,r22
10007c54:	d9811e04 	addi	r6,sp,1144
10007c58:	000d45c0 	call	1000d45c <__sprint_r>
10007c5c:	103c8c1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007c60:	d8c12017 	ldw	r3,1152(sp)
10007c64:	da000404 	addi	r8,sp,16
10007c68:	003d7706 	br	10007248 <__alt_data_end+0xf8007248>
10007c6c:	b809883a 	mov	r4,r23
10007c70:	b00b883a 	mov	r5,r22
10007c74:	d9811e04 	addi	r6,sp,1144
10007c78:	000d45c0 	call	1000d45c <__sprint_r>
10007c7c:	103c841e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007c80:	d8c12017 	ldw	r3,1152(sp)
10007c84:	da000404 	addi	r8,sp,16
10007c88:	003d3506 	br	10007160 <__alt_data_end+0xf8007160>
10007c8c:	b809883a 	mov	r4,r23
10007c90:	b00b883a 	mov	r5,r22
10007c94:	d9811e04 	addi	r6,sp,1144
10007c98:	000d45c0 	call	1000d45c <__sprint_r>
10007c9c:	103c7c1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007ca0:	d8c12017 	ldw	r3,1152(sp)
10007ca4:	da000404 	addi	r8,sp,16
10007ca8:	003d3b06 	br	10007198 <__alt_data_end+0xf8007198>
10007cac:	d9413b17 	ldw	r5,1260(sp)
10007cb0:	d8c10e04 	addi	r3,sp,1080
10007cb4:	908003cc 	andi	r2,r18,15
10007cb8:	a808973a 	slli	r4,r21,28
10007cbc:	2885883a 	add	r2,r5,r2
10007cc0:	9024d13a 	srli	r18,r18,4
10007cc4:	10800003 	ldbu	r2,0(r2)
10007cc8:	a82ad13a 	srli	r21,r21,4
10007ccc:	18ffffc4 	addi	r3,r3,-1
10007cd0:	24a4b03a 	or	r18,r4,r18
10007cd4:	18800005 	stb	r2,0(r3)
10007cd8:	9544b03a 	or	r2,r18,r21
10007cdc:	103ff51e 	bne	r2,zero,10007cb4 <__alt_data_end+0xf8007cb4>
10007ce0:	d9412817 	ldw	r5,1184(sp)
10007ce4:	d8c13115 	stw	r3,1220(sp)
10007ce8:	28e3c83a 	sub	r17,r5,r3
10007cec:	003ccb06 	br	1000701c <__alt_data_end+0xf800701c>
10007cf0:	d8c10e04 	addi	r3,sp,1080
10007cf4:	0023883a 	mov	r17,zero
10007cf8:	d8c13115 	stw	r3,1220(sp)
10007cfc:	003cc706 	br	1000701c <__alt_data_end+0xf800701c>
10007d00:	dc012617 	ldw	r16,1176(sp)
10007d04:	0401ab0e 	bge	zero,r16,100083b4 <___vfprintf_internal_r+0x1984>
10007d08:	d8813317 	ldw	r2,1228(sp)
10007d0c:	d9413117 	ldw	r5,1220(sp)
10007d10:	d9013417 	ldw	r4,1232(sp)
10007d14:	1023883a 	mov	r17,r2
10007d18:	28a1883a 	add	r16,r5,r2
10007d1c:	2080010e 	bge	r4,r2,10007d24 <___vfprintf_internal_r+0x12f4>
10007d20:	2023883a 	mov	r17,r4
10007d24:	04400b0e 	bge	zero,r17,10007d54 <___vfprintf_internal_r+0x1324>
10007d28:	d8811f17 	ldw	r2,1148(sp)
10007d2c:	d9413117 	ldw	r5,1220(sp)
10007d30:	1c47883a 	add	r3,r3,r17
10007d34:	10800044 	addi	r2,r2,1
10007d38:	41400015 	stw	r5,0(r8)
10007d3c:	44400115 	stw	r17,4(r8)
10007d40:	d8c12015 	stw	r3,1152(sp)
10007d44:	d8811f15 	stw	r2,1148(sp)
10007d48:	010001c4 	movi	r4,7
10007d4c:	20826716 	blt	r4,r2,100086ec <___vfprintf_internal_r+0x1cbc>
10007d50:	42000204 	addi	r8,r8,8
10007d54:	88026316 	blt	r17,zero,100086e4 <___vfprintf_internal_r+0x1cb4>
10007d58:	d8813417 	ldw	r2,1232(sp)
10007d5c:	1463c83a 	sub	r17,r2,r17
10007d60:	0440590e 	bge	zero,r17,10007ec8 <___vfprintf_internal_r+0x1498>
10007d64:	04c00404 	movi	r19,16
10007d68:	d8811f17 	ldw	r2,1148(sp)
10007d6c:	9c41770e 	bge	r19,r17,1000834c <___vfprintf_internal_r+0x191c>
10007d70:	01440074 	movhi	r5,4097
10007d74:	2949b684 	addi	r5,r5,9946
10007d78:	d9412c15 	stw	r5,1200(sp)
10007d7c:	054001c4 	movi	r21,7
10007d80:	00000306 	br	10007d90 <___vfprintf_internal_r+0x1360>
10007d84:	42000204 	addi	r8,r8,8
10007d88:	8c7ffc04 	addi	r17,r17,-16
10007d8c:	9c41720e 	bge	r19,r17,10008358 <___vfprintf_internal_r+0x1928>
10007d90:	18c00404 	addi	r3,r3,16
10007d94:	10800044 	addi	r2,r2,1
10007d98:	45000015 	stw	r20,0(r8)
10007d9c:	44c00115 	stw	r19,4(r8)
10007da0:	d8c12015 	stw	r3,1152(sp)
10007da4:	d8811f15 	stw	r2,1148(sp)
10007da8:	a8bff60e 	bge	r21,r2,10007d84 <__alt_data_end+0xf8007d84>
10007dac:	b809883a 	mov	r4,r23
10007db0:	b00b883a 	mov	r5,r22
10007db4:	d9811e04 	addi	r6,sp,1144
10007db8:	000d45c0 	call	1000d45c <__sprint_r>
10007dbc:	103c341e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007dc0:	d8c12017 	ldw	r3,1152(sp)
10007dc4:	d8811f17 	ldw	r2,1148(sp)
10007dc8:	da000404 	addi	r8,sp,16
10007dcc:	003fee06 	br	10007d88 <__alt_data_end+0xf8007d88>
10007dd0:	b809883a 	mov	r4,r23
10007dd4:	b00b883a 	mov	r5,r22
10007dd8:	d9811e04 	addi	r6,sp,1144
10007ddc:	000d45c0 	call	1000d45c <__sprint_r>
10007de0:	103c2b1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007de4:	d8c12017 	ldw	r3,1152(sp)
10007de8:	d8812787 	ldb	r2,1182(sp)
10007dec:	da000404 	addi	r8,sp,16
10007df0:	003cce06 	br	1000712c <__alt_data_end+0xf800712c>
10007df4:	d8813317 	ldw	r2,1228(sp)
10007df8:	14ffffc4 	addi	r19,r2,-1
10007dfc:	04ff630e 	bge	zero,r19,10007b8c <__alt_data_end+0xf8007b8c>
10007e00:	05400404 	movi	r21,16
10007e04:	acc0810e 	bge	r21,r19,1000800c <___vfprintf_internal_r+0x15dc>
10007e08:	01440074 	movhi	r5,4097
10007e0c:	2949b684 	addi	r5,r5,9946
10007e10:	d9412c15 	stw	r5,1200(sp)
10007e14:	01c001c4 	movi	r7,7
10007e18:	00000306 	br	10007e28 <___vfprintf_internal_r+0x13f8>
10007e1c:	8c400204 	addi	r17,r17,8
10007e20:	9cfffc04 	addi	r19,r19,-16
10007e24:	acc07c0e 	bge	r21,r19,10008018 <___vfprintf_internal_r+0x15e8>
10007e28:	18c00404 	addi	r3,r3,16
10007e2c:	84000044 	addi	r16,r16,1
10007e30:	8d000015 	stw	r20,0(r17)
10007e34:	8d400115 	stw	r21,4(r17)
10007e38:	d8c12015 	stw	r3,1152(sp)
10007e3c:	dc011f15 	stw	r16,1148(sp)
10007e40:	3c3ff60e 	bge	r7,r16,10007e1c <__alt_data_end+0xf8007e1c>
10007e44:	b809883a 	mov	r4,r23
10007e48:	b00b883a 	mov	r5,r22
10007e4c:	d9811e04 	addi	r6,sp,1144
10007e50:	d9c13d15 	stw	r7,1268(sp)
10007e54:	000d45c0 	call	1000d45c <__sprint_r>
10007e58:	d9c13d17 	ldw	r7,1268(sp)
10007e5c:	103c0c1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007e60:	d8c12017 	ldw	r3,1152(sp)
10007e64:	dc011f17 	ldw	r16,1148(sp)
10007e68:	dc400404 	addi	r17,sp,16
10007e6c:	003fec06 	br	10007e20 <__alt_data_end+0xf8007e20>
10007e70:	00800084 	movi	r2,2
10007e74:	9546b03a 	or	r3,r18,r21
10007e78:	003d7d06 	br	10007470 <__alt_data_end+0xf8007470>
10007e7c:	10803fcc 	andi	r2,r2,255
10007e80:	1080201c 	xori	r2,r2,128
10007e84:	10bfe004 	addi	r2,r2,-128
10007e88:	01000c04 	movi	r4,48
10007e8c:	1101d726 	beq	r2,r4,100085ec <___vfprintf_internal_r+0x1bbc>
10007e90:	d9413117 	ldw	r5,1220(sp)
10007e94:	d8812817 	ldw	r2,1184(sp)
10007e98:	193fffc5 	stb	r4,-1(r3)
10007e9c:	297fffc4 	addi	r5,r5,-1
10007ea0:	d9413115 	stw	r5,1220(sp)
10007ea4:	1163c83a 	sub	r17,r2,r5
10007ea8:	003c5c06 	br	1000701c <__alt_data_end+0xf800701c>
10007eac:	b809883a 	mov	r4,r23
10007eb0:	b00b883a 	mov	r5,r22
10007eb4:	d9811e04 	addi	r6,sp,1144
10007eb8:	000d45c0 	call	1000d45c <__sprint_r>
10007ebc:	103bf41e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007ec0:	d8c12017 	ldw	r3,1152(sp)
10007ec4:	da000404 	addi	r8,sp,16
10007ec8:	d9413117 	ldw	r5,1220(sp)
10007ecc:	d9013417 	ldw	r4,1232(sp)
10007ed0:	d8812617 	ldw	r2,1176(sp)
10007ed4:	2923883a 	add	r17,r5,r4
10007ed8:	d9413317 	ldw	r5,1228(sp)
10007edc:	11400216 	blt	r2,r5,10007ee8 <___vfprintf_internal_r+0x14b8>
10007ee0:	e100004c 	andi	r4,fp,1
10007ee4:	20000d26 	beq	r4,zero,10007f1c <___vfprintf_internal_r+0x14ec>
10007ee8:	d9013817 	ldw	r4,1248(sp)
10007eec:	d9413517 	ldw	r5,1236(sp)
10007ef0:	1907883a 	add	r3,r3,r4
10007ef4:	d9011f17 	ldw	r4,1148(sp)
10007ef8:	41400015 	stw	r5,0(r8)
10007efc:	d9413817 	ldw	r5,1248(sp)
10007f00:	21000044 	addi	r4,r4,1
10007f04:	d8c12015 	stw	r3,1152(sp)
10007f08:	41400115 	stw	r5,4(r8)
10007f0c:	d9011f15 	stw	r4,1148(sp)
10007f10:	014001c4 	movi	r5,7
10007f14:	2901fd16 	blt	r5,r4,1000870c <___vfprintf_internal_r+0x1cdc>
10007f18:	42000204 	addi	r8,r8,8
10007f1c:	d9013317 	ldw	r4,1228(sp)
10007f20:	2085c83a 	sub	r2,r4,r2
10007f24:	8449c83a 	sub	r4,r16,r17
10007f28:	1021883a 	mov	r16,r2
10007f2c:	2080010e 	bge	r4,r2,10007f34 <___vfprintf_internal_r+0x1504>
10007f30:	2021883a 	mov	r16,r4
10007f34:	04000a0e 	bge	zero,r16,10007f60 <___vfprintf_internal_r+0x1530>
10007f38:	d9011f17 	ldw	r4,1148(sp)
10007f3c:	1c07883a 	add	r3,r3,r16
10007f40:	44400015 	stw	r17,0(r8)
10007f44:	21000044 	addi	r4,r4,1
10007f48:	44000115 	stw	r16,4(r8)
10007f4c:	d8c12015 	stw	r3,1152(sp)
10007f50:	d9011f15 	stw	r4,1148(sp)
10007f54:	014001c4 	movi	r5,7
10007f58:	29020916 	blt	r5,r4,10008780 <___vfprintf_internal_r+0x1d50>
10007f5c:	42000204 	addi	r8,r8,8
10007f60:	80020116 	blt	r16,zero,10008768 <___vfprintf_internal_r+0x1d38>
10007f64:	1421c83a 	sub	r16,r2,r16
10007f68:	043cc40e 	bge	zero,r16,1000727c <__alt_data_end+0xf800727c>
10007f6c:	04400404 	movi	r17,16
10007f70:	d8811f17 	ldw	r2,1148(sp)
10007f74:	8c3f110e 	bge	r17,r16,10007bbc <__alt_data_end+0xf8007bbc>
10007f78:	01440074 	movhi	r5,4097
10007f7c:	2949b684 	addi	r5,r5,9946
10007f80:	d9412c15 	stw	r5,1200(sp)
10007f84:	04c001c4 	movi	r19,7
10007f88:	00000306 	br	10007f98 <___vfprintf_internal_r+0x1568>
10007f8c:	42000204 	addi	r8,r8,8
10007f90:	843ffc04 	addi	r16,r16,-16
10007f94:	8c3f0c0e 	bge	r17,r16,10007bc8 <__alt_data_end+0xf8007bc8>
10007f98:	18c00404 	addi	r3,r3,16
10007f9c:	10800044 	addi	r2,r2,1
10007fa0:	45000015 	stw	r20,0(r8)
10007fa4:	44400115 	stw	r17,4(r8)
10007fa8:	d8c12015 	stw	r3,1152(sp)
10007fac:	d8811f15 	stw	r2,1148(sp)
10007fb0:	98bff60e 	bge	r19,r2,10007f8c <__alt_data_end+0xf8007f8c>
10007fb4:	b809883a 	mov	r4,r23
10007fb8:	b00b883a 	mov	r5,r22
10007fbc:	d9811e04 	addi	r6,sp,1144
10007fc0:	000d45c0 	call	1000d45c <__sprint_r>
10007fc4:	103bb21e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10007fc8:	d8c12017 	ldw	r3,1152(sp)
10007fcc:	d8811f17 	ldw	r2,1148(sp)
10007fd0:	da000404 	addi	r8,sp,16
10007fd4:	003fee06 	br	10007f90 <__alt_data_end+0xf8007f90>
10007fd8:	e088703a 	and	r4,fp,r2
10007fdc:	203ec01e 	bne	r4,zero,10007ae0 <__alt_data_end+0xf8007ae0>
10007fe0:	dc011f17 	ldw	r16,1148(sp)
10007fe4:	d9013117 	ldw	r4,1220(sp)
10007fe8:	40800115 	stw	r2,4(r8)
10007fec:	84000044 	addi	r16,r16,1
10007ff0:	41000015 	stw	r4,0(r8)
10007ff4:	d8c12015 	stw	r3,1152(sp)
10007ff8:	dc011f15 	stw	r16,1148(sp)
10007ffc:	008001c4 	movi	r2,7
10008000:	14000e16 	blt	r2,r16,1000803c <___vfprintf_internal_r+0x160c>
10008004:	44400204 	addi	r17,r8,8
10008008:	003ee006 	br	10007b8c <__alt_data_end+0xf8007b8c>
1000800c:	01040074 	movhi	r4,4097
10008010:	2109b684 	addi	r4,r4,9946
10008014:	d9012c15 	stw	r4,1200(sp)
10008018:	d8812c17 	ldw	r2,1200(sp)
1000801c:	1cc7883a 	add	r3,r3,r19
10008020:	84000044 	addi	r16,r16,1
10008024:	88800015 	stw	r2,0(r17)
10008028:	8cc00115 	stw	r19,4(r17)
1000802c:	d8c12015 	stw	r3,1152(sp)
10008030:	dc011f15 	stw	r16,1148(sp)
10008034:	008001c4 	movi	r2,7
10008038:	143ed30e 	bge	r2,r16,10007b88 <__alt_data_end+0xf8007b88>
1000803c:	b809883a 	mov	r4,r23
10008040:	b00b883a 	mov	r5,r22
10008044:	d9811e04 	addi	r6,sp,1144
10008048:	000d45c0 	call	1000d45c <__sprint_r>
1000804c:	103b901e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008050:	d8c12017 	ldw	r3,1152(sp)
10008054:	dc011f17 	ldw	r16,1148(sp)
10008058:	dc400404 	addi	r17,sp,16
1000805c:	003ecb06 	br	10007b8c <__alt_data_end+0xf8007b8c>
10008060:	b809883a 	mov	r4,r23
10008064:	b00b883a 	mov	r5,r22
10008068:	d9811e04 	addi	r6,sp,1144
1000806c:	000d45c0 	call	1000d45c <__sprint_r>
10008070:	103b871e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008074:	d8c12017 	ldw	r3,1152(sp)
10008078:	dc011f17 	ldw	r16,1148(sp)
1000807c:	da000404 	addi	r8,sp,16
10008080:	003ea206 	br	10007b0c <__alt_data_end+0xf8007b0c>
10008084:	b809883a 	mov	r4,r23
10008088:	b00b883a 	mov	r5,r22
1000808c:	d9811e04 	addi	r6,sp,1144
10008090:	000d45c0 	call	1000d45c <__sprint_r>
10008094:	103b7e1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008098:	d8c12017 	ldw	r3,1152(sp)
1000809c:	dc011f17 	ldw	r16,1148(sp)
100080a0:	dc400404 	addi	r17,sp,16
100080a4:	003ea406 	br	10007b38 <__alt_data_end+0xf8007b38>
100080a8:	b809883a 	mov	r4,r23
100080ac:	b00b883a 	mov	r5,r22
100080b0:	d9811e04 	addi	r6,sp,1144
100080b4:	000d45c0 	call	1000d45c <__sprint_r>
100080b8:	103b751e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
100080bc:	d8c12017 	ldw	r3,1152(sp)
100080c0:	da000404 	addi	r8,sp,16
100080c4:	003c3706 	br	100071a4 <__alt_data_end+0xf80071a4>
100080c8:	04a5c83a 	sub	r18,zero,r18
100080cc:	9004c03a 	cmpne	r2,r18,zero
100080d0:	056bc83a 	sub	r21,zero,r21
100080d4:	a8abc83a 	sub	r21,r21,r2
100080d8:	04c00b44 	movi	r19,45
100080dc:	dcc12785 	stb	r19,1182(sp)
100080e0:	da413215 	stw	r9,1224(sp)
100080e4:	00800044 	movi	r2,1
100080e8:	9546b03a 	or	r3,r18,r21
100080ec:	003bb106 	br	10006fb4 <__alt_data_end+0xf8006fb4>
100080f0:	da013f15 	stw	r8,1276(sp)
100080f4:	da413e15 	stw	r9,1272(sp)
100080f8:	0002d9c0 	call	10002d9c <__fpclassifyd>
100080fc:	da013f17 	ldw	r8,1276(sp)
10008100:	da413e17 	ldw	r9,1272(sp)
10008104:	1000e526 	beq	r2,zero,1000849c <___vfprintf_internal_r+0x1a6c>
10008108:	04fff7c4 	movi	r19,-33
1000810c:	00bfffc4 	movi	r2,-1
10008110:	84e6703a 	and	r19,r16,r19
10008114:	48822926 	beq	r9,r2,100089bc <___vfprintf_internal_r+0x1f8c>
10008118:	008011c4 	movi	r2,71
1000811c:	98821626 	beq	r19,r2,10008978 <___vfprintf_internal_r+0x1f48>
10008120:	d9013917 	ldw	r4,1252(sp)
10008124:	e0c04014 	ori	r3,fp,256
10008128:	d8c12d15 	stw	r3,1204(sp)
1000812c:	20021f16 	blt	r4,zero,100089ac <___vfprintf_internal_r+0x1f7c>
10008130:	dc413917 	ldw	r17,1252(sp)
10008134:	d8012b05 	stb	zero,1196(sp)
10008138:	00801984 	movi	r2,102
1000813c:	80814d26 	beq	r16,r2,10008674 <___vfprintf_internal_r+0x1c44>
10008140:	00801184 	movi	r2,70
10008144:	80814b26 	beq	r16,r2,10008674 <___vfprintf_internal_r+0x1c44>
10008148:	00801144 	movi	r2,69
1000814c:	98821d26 	beq	r19,r2,100089c4 <___vfprintf_internal_r+0x1f94>
10008150:	482b883a 	mov	r21,r9
10008154:	d8812604 	addi	r2,sp,1176
10008158:	d8800115 	stw	r2,4(sp)
1000815c:	d9413717 	ldw	r5,1244(sp)
10008160:	d8812504 	addi	r2,sp,1172
10008164:	d8800215 	stw	r2,8(sp)
10008168:	d8812104 	addi	r2,sp,1156
1000816c:	dd400015 	stw	r21,0(sp)
10008170:	d8800315 	stw	r2,12(sp)
10008174:	b809883a 	mov	r4,r23
10008178:	880d883a 	mov	r6,r17
1000817c:	01c00084 	movi	r7,2
10008180:	da013f15 	stw	r8,1276(sp)
10008184:	da413e15 	stw	r9,1272(sp)
10008188:	0008ea80 	call	10008ea8 <_dtoa_r>
1000818c:	d8813115 	stw	r2,1220(sp)
10008190:	008019c4 	movi	r2,103
10008194:	da013f17 	ldw	r8,1276(sp)
10008198:	da413e17 	ldw	r9,1272(sp)
1000819c:	80800226 	beq	r16,r2,100081a8 <___vfprintf_internal_r+0x1778>
100081a0:	008011c4 	movi	r2,71
100081a4:	8081451e 	bne	r16,r2,100086bc <___vfprintf_internal_r+0x1c8c>
100081a8:	e080004c 	andi	r2,fp,1
100081ac:	10021e26 	beq	r2,zero,10008a28 <___vfprintf_internal_r+0x1ff8>
100081b0:	d8c13117 	ldw	r3,1220(sp)
100081b4:	1d55883a 	add	r10,r3,r21
100081b8:	d9013717 	ldw	r4,1244(sp)
100081bc:	880b883a 	mov	r5,r17
100081c0:	000d883a 	mov	r6,zero
100081c4:	000f883a 	mov	r7,zero
100081c8:	da013f15 	stw	r8,1276(sp)
100081cc:	da413e15 	stw	r9,1272(sp)
100081d0:	da813d15 	stw	r10,1268(sp)
100081d4:	000533c0 	call	1000533c <__eqdf2>
100081d8:	da013f17 	ldw	r8,1276(sp)
100081dc:	da413e17 	ldw	r9,1272(sp)
100081e0:	da813d17 	ldw	r10,1268(sp)
100081e4:	1001a126 	beq	r2,zero,1000886c <___vfprintf_internal_r+0x1e3c>
100081e8:	d8812117 	ldw	r2,1156(sp)
100081ec:	1280062e 	bgeu	r2,r10,10008208 <___vfprintf_internal_r+0x17d8>
100081f0:	01000c04 	movi	r4,48
100081f4:	10c00044 	addi	r3,r2,1
100081f8:	d8c12115 	stw	r3,1156(sp)
100081fc:	11000005 	stb	r4,0(r2)
10008200:	d8812117 	ldw	r2,1156(sp)
10008204:	12bffb36 	bltu	r2,r10,100081f4 <__alt_data_end+0xf80081f4>
10008208:	d8c13117 	ldw	r3,1220(sp)
1000820c:	10c5c83a 	sub	r2,r2,r3
10008210:	d8813315 	stw	r2,1228(sp)
10008214:	008011c4 	movi	r2,71
10008218:	98818926 	beq	r19,r2,10008840 <___vfprintf_internal_r+0x1e10>
1000821c:	00801944 	movi	r2,101
10008220:	14023c0e 	bge	r2,r16,10008b14 <___vfprintf_internal_r+0x20e4>
10008224:	d8c12617 	ldw	r3,1176(sp)
10008228:	00801984 	movi	r2,102
1000822c:	d8c13415 	stw	r3,1232(sp)
10008230:	8081ef26 	beq	r16,r2,100089f0 <___vfprintf_internal_r+0x1fc0>
10008234:	d8c13417 	ldw	r3,1232(sp)
10008238:	d9013317 	ldw	r4,1228(sp)
1000823c:	1901e316 	blt	r3,r4,100089cc <___vfprintf_internal_r+0x1f9c>
10008240:	e080004c 	andi	r2,fp,1
10008244:	1001f426 	beq	r2,zero,10008a18 <___vfprintf_internal_r+0x1fe8>
10008248:	d8c13417 	ldw	r3,1232(sp)
1000824c:	1c400044 	addi	r17,r3,1
10008250:	8839883a 	mov	fp,r17
10008254:	8801e416 	blt	r17,zero,100089e8 <___vfprintf_internal_r+0x1fb8>
10008258:	dd412b07 	ldb	r21,1196(sp)
1000825c:	a801701e 	bne	r21,zero,10008820 <___vfprintf_internal_r+0x1df0>
10008260:	df012b15 	stw	fp,1196(sp)
10008264:	dcc12783 	ldbu	r19,1182(sp)
10008268:	df012d17 	ldw	fp,1204(sp)
1000826c:	d8013215 	stw	zero,1224(sp)
10008270:	dc812d15 	stw	r18,1204(sp)
10008274:	003b6e06 	br	10007030 <__alt_data_end+0xf8007030>
10008278:	e080040c 	andi	r2,fp,16
1000827c:	1000b51e 	bne	r2,zero,10008554 <___vfprintf_internal_r+0x1b24>
10008280:	e080100c 	andi	r2,fp,64
10008284:	10015b26 	beq	r2,zero,100087f4 <___vfprintf_internal_r+0x1dc4>
10008288:	d9012d17 	ldw	r4,1204(sp)
1000828c:	d9412f17 	ldw	r5,1212(sp)
10008290:	20800017 	ldw	r2,0(r4)
10008294:	21000104 	addi	r4,r4,4
10008298:	d9012d15 	stw	r4,1204(sp)
1000829c:	1140000d 	sth	r5,0(r2)
100082a0:	003a2006 	br	10006b24 <__alt_data_end+0xf8006b24>
100082a4:	e0c0100c 	andi	r3,fp,64
100082a8:	1800a226 	beq	r3,zero,10008534 <___vfprintf_internal_r+0x1b04>
100082ac:	d8c12d17 	ldw	r3,1204(sp)
100082b0:	1480000b 	ldhu	r18,0(r2)
100082b4:	002b883a 	mov	r21,zero
100082b8:	18c00104 	addi	r3,r3,4
100082bc:	d8c12d15 	stw	r3,1204(sp)
100082c0:	0005883a 	mov	r2,zero
100082c4:	9007883a 	mov	r3,r18
100082c8:	003c6906 	br	10007470 <__alt_data_end+0xf8007470>
100082cc:	e0c0100c 	andi	r3,fp,64
100082d0:	18009026 	beq	r3,zero,10008514 <___vfprintf_internal_r+0x1ae4>
100082d4:	1480000b 	ldhu	r18,0(r2)
100082d8:	d8812d17 	ldw	r2,1204(sp)
100082dc:	002b883a 	mov	r21,zero
100082e0:	9007883a 	mov	r3,r18
100082e4:	10800104 	addi	r2,r2,4
100082e8:	d8812d15 	stw	r2,1204(sp)
100082ec:	00800044 	movi	r2,1
100082f0:	003c5f06 	br	10007470 <__alt_data_end+0xf8007470>
100082f4:	e0c0100c 	andi	r3,fp,64
100082f8:	18008026 	beq	r3,zero,100084fc <___vfprintf_internal_r+0x1acc>
100082fc:	d9012d17 	ldw	r4,1204(sp)
10008300:	1480000b 	ldhu	r18,0(r2)
10008304:	002b883a 	mov	r21,zero
10008308:	21000104 	addi	r4,r4,4
1000830c:	d9012d15 	stw	r4,1204(sp)
10008310:	003c7906 	br	100074f8 <__alt_data_end+0xf80074f8>
10008314:	e080100c 	andi	r2,fp,64
10008318:	10007126 	beq	r2,zero,100084e0 <___vfprintf_internal_r+0x1ab0>
1000831c:	1c80000f 	ldh	r18,0(r3)
10008320:	d8812d17 	ldw	r2,1204(sp)
10008324:	902bd7fa 	srai	r21,r18,31
10008328:	10800104 	addi	r2,r2,4
1000832c:	d8812d15 	stw	r2,1204(sp)
10008330:	a805883a 	mov	r2,r21
10008334:	003b1a06 	br	10006fa0 <__alt_data_end+0xf8006fa0>
10008338:	e4000007 	ldb	r16,0(fp)
1000833c:	e005883a 	mov	r2,fp
10008340:	003a2306 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10008344:	00800084 	movi	r2,2
10008348:	003c4906 	br	10007470 <__alt_data_end+0xf8007470>
1000834c:	01040074 	movhi	r4,4097
10008350:	2109b684 	addi	r4,r4,9946
10008354:	d9012c15 	stw	r4,1200(sp)
10008358:	d9012c17 	ldw	r4,1200(sp)
1000835c:	1c47883a 	add	r3,r3,r17
10008360:	10800044 	addi	r2,r2,1
10008364:	41000015 	stw	r4,0(r8)
10008368:	44400115 	stw	r17,4(r8)
1000836c:	d8c12015 	stw	r3,1152(sp)
10008370:	d8811f15 	stw	r2,1148(sp)
10008374:	010001c4 	movi	r4,7
10008378:	20becc16 	blt	r4,r2,10007eac <__alt_data_end+0xf8007eac>
1000837c:	42000204 	addi	r8,r8,8
10008380:	003ed106 	br	10007ec8 <__alt_data_end+0xf8007ec8>
10008384:	01040074 	movhi	r4,4097
10008388:	2109b684 	addi	r4,r4,9946
1000838c:	d9012c15 	stw	r4,1200(sp)
10008390:	003ba306 	br	10007220 <__alt_data_end+0xf8007220>
10008394:	b809883a 	mov	r4,r23
10008398:	b00b883a 	mov	r5,r22
1000839c:	d9811e04 	addi	r6,sp,1144
100083a0:	000d45c0 	call	1000d45c <__sprint_r>
100083a4:	103aba1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
100083a8:	d8c12017 	ldw	r3,1152(sp)
100083ac:	da000404 	addi	r8,sp,16
100083b0:	003d6c06 	br	10007964 <__alt_data_end+0xf8007964>
100083b4:	d8811f17 	ldw	r2,1148(sp)
100083b8:	01440074 	movhi	r5,4097
100083bc:	01000044 	movi	r4,1
100083c0:	18c00044 	addi	r3,r3,1
100083c4:	10800044 	addi	r2,r2,1
100083c8:	2949b604 	addi	r5,r5,9944
100083cc:	41000115 	stw	r4,4(r8)
100083d0:	41400015 	stw	r5,0(r8)
100083d4:	d8c12015 	stw	r3,1152(sp)
100083d8:	d8811f15 	stw	r2,1148(sp)
100083dc:	010001c4 	movi	r4,7
100083e0:	20806716 	blt	r4,r2,10008580 <___vfprintf_internal_r+0x1b50>
100083e4:	42000204 	addi	r8,r8,8
100083e8:	8000041e 	bne	r16,zero,100083fc <___vfprintf_internal_r+0x19cc>
100083ec:	d8813317 	ldw	r2,1228(sp)
100083f0:	1000021e 	bne	r2,zero,100083fc <___vfprintf_internal_r+0x19cc>
100083f4:	e080004c 	andi	r2,fp,1
100083f8:	103ba026 	beq	r2,zero,1000727c <__alt_data_end+0xf800727c>
100083fc:	d9013817 	ldw	r4,1248(sp)
10008400:	d8811f17 	ldw	r2,1148(sp)
10008404:	d9413517 	ldw	r5,1236(sp)
10008408:	1907883a 	add	r3,r3,r4
1000840c:	10800044 	addi	r2,r2,1
10008410:	41000115 	stw	r4,4(r8)
10008414:	41400015 	stw	r5,0(r8)
10008418:	d8c12015 	stw	r3,1152(sp)
1000841c:	d8811f15 	stw	r2,1148(sp)
10008420:	010001c4 	movi	r4,7
10008424:	20815716 	blt	r4,r2,10008984 <___vfprintf_internal_r+0x1f54>
10008428:	42000204 	addi	r8,r8,8
1000842c:	0421c83a 	sub	r16,zero,r16
10008430:	0400810e 	bge	zero,r16,10008638 <___vfprintf_internal_r+0x1c08>
10008434:	04400404 	movi	r17,16
10008438:	8c00bd0e 	bge	r17,r16,10008730 <___vfprintf_internal_r+0x1d00>
1000843c:	01440074 	movhi	r5,4097
10008440:	2949b684 	addi	r5,r5,9946
10008444:	d9412c15 	stw	r5,1200(sp)
10008448:	04c001c4 	movi	r19,7
1000844c:	00000306 	br	1000845c <___vfprintf_internal_r+0x1a2c>
10008450:	42000204 	addi	r8,r8,8
10008454:	843ffc04 	addi	r16,r16,-16
10008458:	8c00b80e 	bge	r17,r16,1000873c <___vfprintf_internal_r+0x1d0c>
1000845c:	18c00404 	addi	r3,r3,16
10008460:	10800044 	addi	r2,r2,1
10008464:	45000015 	stw	r20,0(r8)
10008468:	44400115 	stw	r17,4(r8)
1000846c:	d8c12015 	stw	r3,1152(sp)
10008470:	d8811f15 	stw	r2,1148(sp)
10008474:	98bff60e 	bge	r19,r2,10008450 <__alt_data_end+0xf8008450>
10008478:	b809883a 	mov	r4,r23
1000847c:	b00b883a 	mov	r5,r22
10008480:	d9811e04 	addi	r6,sp,1144
10008484:	000d45c0 	call	1000d45c <__sprint_r>
10008488:	103a811e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
1000848c:	d8c12017 	ldw	r3,1152(sp)
10008490:	d8811f17 	ldw	r2,1148(sp)
10008494:	da000404 	addi	r8,sp,16
10008498:	003fee06 	br	10008454 <__alt_data_end+0xf8008454>
1000849c:	008011c4 	movi	r2,71
100084a0:	1400db16 	blt	r2,r16,10008810 <___vfprintf_internal_r+0x1de0>
100084a4:	01040074 	movhi	r4,4097
100084a8:	2109a804 	addi	r4,r4,9888
100084ac:	d9013115 	stw	r4,1220(sp)
100084b0:	00c000c4 	movi	r3,3
100084b4:	00bfdfc4 	movi	r2,-129
100084b8:	d8c12b15 	stw	r3,1196(sp)
100084bc:	e0b8703a 	and	fp,fp,r2
100084c0:	dcc12783 	ldbu	r19,1182(sp)
100084c4:	dc812d15 	stw	r18,1204(sp)
100084c8:	1823883a 	mov	r17,r3
100084cc:	d8013215 	stw	zero,1224(sp)
100084d0:	d8013415 	stw	zero,1232(sp)
100084d4:	003ad606 	br	10007030 <__alt_data_end+0xf8007030>
100084d8:	4823883a 	mov	r17,r9
100084dc:	003cc906 	br	10007804 <__alt_data_end+0xf8007804>
100084e0:	1c800017 	ldw	r18,0(r3)
100084e4:	d8c12d17 	ldw	r3,1204(sp)
100084e8:	902bd7fa 	srai	r21,r18,31
100084ec:	18c00104 	addi	r3,r3,4
100084f0:	d8c12d15 	stw	r3,1204(sp)
100084f4:	a805883a 	mov	r2,r21
100084f8:	003aa906 	br	10006fa0 <__alt_data_end+0xf8006fa0>
100084fc:	d9412d17 	ldw	r5,1204(sp)
10008500:	14800017 	ldw	r18,0(r2)
10008504:	002b883a 	mov	r21,zero
10008508:	29400104 	addi	r5,r5,4
1000850c:	d9412d15 	stw	r5,1204(sp)
10008510:	003bf906 	br	100074f8 <__alt_data_end+0xf80074f8>
10008514:	d8c12d17 	ldw	r3,1204(sp)
10008518:	14800017 	ldw	r18,0(r2)
1000851c:	002b883a 	mov	r21,zero
10008520:	18c00104 	addi	r3,r3,4
10008524:	d8c12d15 	stw	r3,1204(sp)
10008528:	00800044 	movi	r2,1
1000852c:	9007883a 	mov	r3,r18
10008530:	003bcf06 	br	10007470 <__alt_data_end+0xf8007470>
10008534:	d9012d17 	ldw	r4,1204(sp)
10008538:	14800017 	ldw	r18,0(r2)
1000853c:	002b883a 	mov	r21,zero
10008540:	21000104 	addi	r4,r4,4
10008544:	d9012d15 	stw	r4,1204(sp)
10008548:	0005883a 	mov	r2,zero
1000854c:	9007883a 	mov	r3,r18
10008550:	003bc706 	br	10007470 <__alt_data_end+0xf8007470>
10008554:	d9412d17 	ldw	r5,1204(sp)
10008558:	d8c12f17 	ldw	r3,1212(sp)
1000855c:	28800017 	ldw	r2,0(r5)
10008560:	29400104 	addi	r5,r5,4
10008564:	d9412d15 	stw	r5,1204(sp)
10008568:	10c00015 	stw	r3,0(r2)
1000856c:	00396d06 	br	10006b24 <__alt_data_end+0xf8006b24>
10008570:	01040074 	movhi	r4,4097
10008574:	2109a604 	addi	r4,r4,9880
10008578:	d9013115 	stw	r4,1220(sp)
1000857c:	003ba206 	br	10007408 <__alt_data_end+0xf8007408>
10008580:	b809883a 	mov	r4,r23
10008584:	b00b883a 	mov	r5,r22
10008588:	d9811e04 	addi	r6,sp,1144
1000858c:	000d45c0 	call	1000d45c <__sprint_r>
10008590:	103a3f1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008594:	dc012617 	ldw	r16,1176(sp)
10008598:	d8c12017 	ldw	r3,1152(sp)
1000859c:	da000404 	addi	r8,sp,16
100085a0:	003f9106 	br	100083e8 <__alt_data_end+0xf80083e8>
100085a4:	e0800044 	addi	r2,fp,1
100085a8:	9cc00814 	ori	r19,r19,32
100085ac:	e4000047 	ldb	r16,1(fp)
100085b0:	00398706 	br	10006bd0 <__alt_data_end+0xf8006bd0>
100085b4:	d8812e17 	ldw	r2,1208(sp)
100085b8:	d8c12d15 	stw	r3,1204(sp)
100085bc:	0085c83a 	sub	r2,zero,r2
100085c0:	d8812e15 	stw	r2,1208(sp)
100085c4:	e005883a 	mov	r2,fp
100085c8:	003a3a06 	br	10006eb4 <__alt_data_end+0xf8006eb4>
100085cc:	b809883a 	mov	r4,r23
100085d0:	b00b883a 	mov	r5,r22
100085d4:	d9811e04 	addi	r6,sp,1144
100085d8:	000d45c0 	call	1000d45c <__sprint_r>
100085dc:	103a2c1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
100085e0:	d8c12017 	ldw	r3,1152(sp)
100085e4:	da000404 	addi	r8,sp,16
100085e8:	003cf006 	br	100079ac <__alt_data_end+0xf80079ac>
100085ec:	d8c12817 	ldw	r3,1184(sp)
100085f0:	d9013117 	ldw	r4,1220(sp)
100085f4:	1923c83a 	sub	r17,r3,r4
100085f8:	003a8806 	br	1000701c <__alt_data_end+0xf800701c>
100085fc:	da013f15 	stw	r8,1276(sp)
10008600:	000d2c80 	call	1000d2c8 <strlen>
10008604:	1023883a 	mov	r17,r2
10008608:	da013f17 	ldw	r8,1276(sp)
1000860c:	883c7f0e 	bge	r17,zero,1000780c <__alt_data_end+0xf800780c>
10008610:	0005883a 	mov	r2,zero
10008614:	003c7d06 	br	1000780c <__alt_data_end+0xf800780c>
10008618:	b809883a 	mov	r4,r23
1000861c:	b00b883a 	mov	r5,r22
10008620:	d9811e04 	addi	r6,sp,1144
10008624:	000d45c0 	call	1000d45c <__sprint_r>
10008628:	103a191e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
1000862c:	d8c12017 	ldw	r3,1152(sp)
10008630:	d8811f17 	ldw	r2,1148(sp)
10008634:	da000404 	addi	r8,sp,16
10008638:	d9413317 	ldw	r5,1228(sp)
1000863c:	d9013117 	ldw	r4,1220(sp)
10008640:	10800044 	addi	r2,r2,1
10008644:	28c7883a 	add	r3,r5,r3
10008648:	41000015 	stw	r4,0(r8)
1000864c:	41400115 	stw	r5,4(r8)
10008650:	d8c12015 	stw	r3,1152(sp)
10008654:	d8811f15 	stw	r2,1148(sp)
10008658:	010001c4 	movi	r4,7
1000865c:	20bb060e 	bge	r4,r2,10007278 <__alt_data_end+0xf8007278>
10008660:	003d6206 	br	10007bec <__alt_data_end+0xf8007bec>
10008664:	01040074 	movhi	r4,4097
10008668:	2109ba84 	addi	r4,r4,9962
1000866c:	d9013615 	stw	r4,1240(sp)
10008670:	003aa306 	br	10007100 <__alt_data_end+0xf8007100>
10008674:	d8812604 	addi	r2,sp,1176
10008678:	d8800115 	stw	r2,4(sp)
1000867c:	d9413717 	ldw	r5,1244(sp)
10008680:	d8812504 	addi	r2,sp,1172
10008684:	d8800215 	stw	r2,8(sp)
10008688:	d8812104 	addi	r2,sp,1156
1000868c:	da400015 	stw	r9,0(sp)
10008690:	d8800315 	stw	r2,12(sp)
10008694:	b809883a 	mov	r4,r23
10008698:	880d883a 	mov	r6,r17
1000869c:	01c000c4 	movi	r7,3
100086a0:	da013f15 	stw	r8,1276(sp)
100086a4:	da413e15 	stw	r9,1272(sp)
100086a8:	0008ea80 	call	10008ea8 <_dtoa_r>
100086ac:	da413e17 	ldw	r9,1272(sp)
100086b0:	da013f17 	ldw	r8,1276(sp)
100086b4:	d8813115 	stw	r2,1220(sp)
100086b8:	482b883a 	mov	r21,r9
100086bc:	d8c13117 	ldw	r3,1220(sp)
100086c0:	00801184 	movi	r2,70
100086c4:	1d55883a 	add	r10,r3,r21
100086c8:	98bebb1e 	bne	r19,r2,100081b8 <__alt_data_end+0xf80081b8>
100086cc:	19000007 	ldb	r4,0(r3)
100086d0:	00800c04 	movi	r2,48
100086d4:	2080dd26 	beq	r4,r2,10008a4c <___vfprintf_internal_r+0x201c>
100086d8:	d8c12617 	ldw	r3,1176(sp)
100086dc:	50d5883a 	add	r10,r10,r3
100086e0:	003eb506 	br	100081b8 <__alt_data_end+0xf80081b8>
100086e4:	0023883a 	mov	r17,zero
100086e8:	003d9b06 	br	10007d58 <__alt_data_end+0xf8007d58>
100086ec:	b809883a 	mov	r4,r23
100086f0:	b00b883a 	mov	r5,r22
100086f4:	d9811e04 	addi	r6,sp,1144
100086f8:	000d45c0 	call	1000d45c <__sprint_r>
100086fc:	1039e41e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008700:	d8c12017 	ldw	r3,1152(sp)
10008704:	da000404 	addi	r8,sp,16
10008708:	003d9206 	br	10007d54 <__alt_data_end+0xf8007d54>
1000870c:	b809883a 	mov	r4,r23
10008710:	b00b883a 	mov	r5,r22
10008714:	d9811e04 	addi	r6,sp,1144
10008718:	000d45c0 	call	1000d45c <__sprint_r>
1000871c:	1039dc1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008720:	d8812617 	ldw	r2,1176(sp)
10008724:	d8c12017 	ldw	r3,1152(sp)
10008728:	da000404 	addi	r8,sp,16
1000872c:	003dfb06 	br	10007f1c <__alt_data_end+0xf8007f1c>
10008730:	01040074 	movhi	r4,4097
10008734:	2109b684 	addi	r4,r4,9946
10008738:	d9012c15 	stw	r4,1200(sp)
1000873c:	d9012c17 	ldw	r4,1200(sp)
10008740:	1c07883a 	add	r3,r3,r16
10008744:	10800044 	addi	r2,r2,1
10008748:	41000015 	stw	r4,0(r8)
1000874c:	44000115 	stw	r16,4(r8)
10008750:	d8c12015 	stw	r3,1152(sp)
10008754:	d8811f15 	stw	r2,1148(sp)
10008758:	010001c4 	movi	r4,7
1000875c:	20bfae16 	blt	r4,r2,10008618 <__alt_data_end+0xf8008618>
10008760:	42000204 	addi	r8,r8,8
10008764:	003fb406 	br	10008638 <__alt_data_end+0xf8008638>
10008768:	0021883a 	mov	r16,zero
1000876c:	003dfd06 	br	10007f64 <__alt_data_end+0xf8007f64>
10008770:	01440074 	movhi	r5,4097
10008774:	2949ba84 	addi	r5,r5,9962
10008778:	d9413615 	stw	r5,1240(sp)
1000877c:	003ae306 	br	1000730c <__alt_data_end+0xf800730c>
10008780:	b809883a 	mov	r4,r23
10008784:	b00b883a 	mov	r5,r22
10008788:	d9811e04 	addi	r6,sp,1144
1000878c:	000d45c0 	call	1000d45c <__sprint_r>
10008790:	1039bf1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008794:	d8812617 	ldw	r2,1176(sp)
10008798:	d9413317 	ldw	r5,1228(sp)
1000879c:	d8c12017 	ldw	r3,1152(sp)
100087a0:	da000404 	addi	r8,sp,16
100087a4:	2885c83a 	sub	r2,r5,r2
100087a8:	003ded06 	br	10007f60 <__alt_data_end+0xf8007f60>
100087ac:	00800184 	movi	r2,6
100087b0:	1240012e 	bgeu	r2,r9,100087b8 <___vfprintf_internal_r+0x1d88>
100087b4:	1013883a 	mov	r9,r2
100087b8:	4823883a 	mov	r17,r9
100087bc:	4805883a 	mov	r2,r9
100087c0:	4800b216 	blt	r9,zero,10008a8c <___vfprintf_internal_r+0x205c>
100087c4:	01440074 	movhi	r5,4097
100087c8:	2949b404 	addi	r5,r5,9936
100087cc:	d8812b15 	stw	r2,1196(sp)
100087d0:	dc812d15 	stw	r18,1204(sp)
100087d4:	d8013215 	stw	zero,1224(sp)
100087d8:	d8013415 	stw	zero,1232(sp)
100087dc:	d9413115 	stw	r5,1220(sp)
100087e0:	0005883a 	mov	r2,zero
100087e4:	003a1906 	br	1000704c <__alt_data_end+0xf800704c>
100087e8:	04c00b44 	movi	r19,45
100087ec:	dcc12785 	stb	r19,1182(sp)
100087f0:	003b0006 	br	100073f4 <__alt_data_end+0xf80073f4>
100087f4:	d8c12d17 	ldw	r3,1204(sp)
100087f8:	d9012f17 	ldw	r4,1212(sp)
100087fc:	18800017 	ldw	r2,0(r3)
10008800:	18c00104 	addi	r3,r3,4
10008804:	d8c12d15 	stw	r3,1204(sp)
10008808:	11000015 	stw	r4,0(r2)
1000880c:	0038c506 	br	10006b24 <__alt_data_end+0xf8006b24>
10008810:	01440074 	movhi	r5,4097
10008814:	2949a904 	addi	r5,r5,9892
10008818:	d9413115 	stw	r5,1220(sp)
1000881c:	003f2406 	br	100084b0 <__alt_data_end+0xf80084b0>
10008820:	00800b44 	movi	r2,45
10008824:	d8812785 	stb	r2,1182(sp)
10008828:	df012b15 	stw	fp,1196(sp)
1000882c:	d8013215 	stw	zero,1224(sp)
10008830:	df012d17 	ldw	fp,1204(sp)
10008834:	00800b44 	movi	r2,45
10008838:	dc812d15 	stw	r18,1204(sp)
1000883c:	003a0006 	br	10007040 <__alt_data_end+0xf8007040>
10008840:	d8c12617 	ldw	r3,1176(sp)
10008844:	00bfff44 	movi	r2,-3
10008848:	18800a16 	blt	r3,r2,10008874 <___vfprintf_internal_r+0x1e44>
1000884c:	48c00916 	blt	r9,r3,10008874 <___vfprintf_internal_r+0x1e44>
10008850:	d8c13415 	stw	r3,1232(sp)
10008854:	040019c4 	movi	r16,103
10008858:	003e7606 	br	10008234 <__alt_data_end+0xf8008234>
1000885c:	01040074 	movhi	r4,4097
10008860:	2109b684 	addi	r4,r4,9946
10008864:	d9012c15 	stw	r4,1200(sp)
10008868:	003c8e06 	br	10007aa4 <__alt_data_end+0xf8007aa4>
1000886c:	5005883a 	mov	r2,r10
10008870:	003e6506 	br	10008208 <__alt_data_end+0xf8008208>
10008874:	843fff84 	addi	r16,r16,-2
10008878:	1d7fffc4 	addi	r21,r3,-1
1000887c:	dd412615 	stw	r21,1176(sp)
10008880:	dc0122c5 	stb	r16,1163(sp)
10008884:	a8009216 	blt	r21,zero,10008ad0 <___vfprintf_internal_r+0x20a0>
10008888:	00800ac4 	movi	r2,43
1000888c:	d8812305 	stb	r2,1164(sp)
10008890:	00800244 	movi	r2,9
10008894:	1540660e 	bge	r2,r21,10008a30 <___vfprintf_internal_r+0x2000>
10008898:	dcc122c4 	addi	r19,sp,1163
1000889c:	dc012c15 	stw	r16,1200(sp)
100088a0:	4023883a 	mov	r17,r8
100088a4:	9821883a 	mov	r16,r19
100088a8:	a809883a 	mov	r4,r21
100088ac:	01400284 	movi	r5,10
100088b0:	000408c0 	call	1000408c <__modsi3>
100088b4:	10800c04 	addi	r2,r2,48
100088b8:	843fffc4 	addi	r16,r16,-1
100088bc:	a809883a 	mov	r4,r21
100088c0:	01400284 	movi	r5,10
100088c4:	80800005 	stb	r2,0(r16)
100088c8:	00040380 	call	10004038 <__divsi3>
100088cc:	01000244 	movi	r4,9
100088d0:	102b883a 	mov	r21,r2
100088d4:	20bff416 	blt	r4,r2,100088a8 <__alt_data_end+0xf80088a8>
100088d8:	8811883a 	mov	r8,r17
100088dc:	10800c04 	addi	r2,r2,48
100088e0:	8023883a 	mov	r17,r16
100088e4:	897fffc4 	addi	r5,r17,-1
100088e8:	88bfffc5 	stb	r2,-1(r17)
100088ec:	dc012c17 	ldw	r16,1200(sp)
100088f0:	2cc08a2e 	bgeu	r5,r19,10008b1c <___vfprintf_internal_r+0x20ec>
100088f4:	d9812384 	addi	r6,sp,1166
100088f8:	344dc83a 	sub	r6,r6,r17
100088fc:	d9012344 	addi	r4,sp,1165
10008900:	998d883a 	add	r6,r19,r6
10008904:	00000106 	br	1000890c <___vfprintf_internal_r+0x1edc>
10008908:	28800003 	ldbu	r2,0(r5)
1000890c:	20800005 	stb	r2,0(r4)
10008910:	21000044 	addi	r4,r4,1
10008914:	29400044 	addi	r5,r5,1
10008918:	21bffb1e 	bne	r4,r6,10008908 <__alt_data_end+0xf8008908>
1000891c:	d8812304 	addi	r2,sp,1164
10008920:	1445c83a 	sub	r2,r2,r17
10008924:	d9412344 	addi	r5,sp,1165
10008928:	2885883a 	add	r2,r5,r2
1000892c:	14e7c83a 	sub	r19,r2,r19
10008930:	d8813317 	ldw	r2,1228(sp)
10008934:	d8c13317 	ldw	r3,1228(sp)
10008938:	dcc13a15 	stw	r19,1256(sp)
1000893c:	14e3883a 	add	r17,r2,r19
10008940:	00800044 	movi	r2,1
10008944:	10c0550e 	bge	r2,r3,10008a9c <___vfprintf_internal_r+0x206c>
10008948:	8c400044 	addi	r17,r17,1
1000894c:	8839883a 	mov	fp,r17
10008950:	88005016 	blt	r17,zero,10008a94 <___vfprintf_internal_r+0x2064>
10008954:	d8013415 	stw	zero,1232(sp)
10008958:	003e3f06 	br	10008258 <__alt_data_end+0xf8008258>
1000895c:	da412b15 	stw	r9,1196(sp)
10008960:	dcc12783 	ldbu	r19,1182(sp)
10008964:	4823883a 	mov	r17,r9
10008968:	dc812d15 	stw	r18,1204(sp)
1000896c:	d8013215 	stw	zero,1224(sp)
10008970:	d8013415 	stw	zero,1232(sp)
10008974:	0039ae06 	br	10007030 <__alt_data_end+0xf8007030>
10008978:	483de91e 	bne	r9,zero,10008120 <__alt_data_end+0xf8008120>
1000897c:	8813883a 	mov	r9,r17
10008980:	003de706 	br	10008120 <__alt_data_end+0xf8008120>
10008984:	b809883a 	mov	r4,r23
10008988:	b00b883a 	mov	r5,r22
1000898c:	d9811e04 	addi	r6,sp,1144
10008990:	000d45c0 	call	1000d45c <__sprint_r>
10008994:	10393e1e 	bne	r2,zero,10006e90 <__alt_data_end+0xf8006e90>
10008998:	dc012617 	ldw	r16,1176(sp)
1000899c:	d8c12017 	ldw	r3,1152(sp)
100089a0:	d8811f17 	ldw	r2,1148(sp)
100089a4:	da000404 	addi	r8,sp,16
100089a8:	003ea006 	br	1000842c <__alt_data_end+0xf800842c>
100089ac:	00c00b44 	movi	r3,45
100089b0:	2460003c 	xorhi	r17,r4,32768
100089b4:	d8c12b05 	stb	r3,1196(sp)
100089b8:	003ddf06 	br	10008138 <__alt_data_end+0xf8008138>
100089bc:	02400184 	movi	r9,6
100089c0:	003dd706 	br	10008120 <__alt_data_end+0xf8008120>
100089c4:	4d400044 	addi	r21,r9,1
100089c8:	003de206 	br	10008154 <__alt_data_end+0xf8008154>
100089cc:	d8c13417 	ldw	r3,1232(sp)
100089d0:	00c0490e 	bge	zero,r3,10008af8 <___vfprintf_internal_r+0x20c8>
100089d4:	04400044 	movi	r17,1
100089d8:	d9013317 	ldw	r4,1228(sp)
100089dc:	8923883a 	add	r17,r17,r4
100089e0:	8839883a 	mov	fp,r17
100089e4:	883e1c0e 	bge	r17,zero,10008258 <__alt_data_end+0xf8008258>
100089e8:	0039883a 	mov	fp,zero
100089ec:	003e1a06 	br	10008258 <__alt_data_end+0xf8008258>
100089f0:	00c03b0e 	bge	zero,r3,10008ae0 <___vfprintf_internal_r+0x20b0>
100089f4:	4800021e 	bne	r9,zero,10008a00 <___vfprintf_internal_r+0x1fd0>
100089f8:	e080004c 	andi	r2,fp,1
100089fc:	10000626 	beq	r2,zero,10008a18 <___vfprintf_internal_r+0x1fe8>
10008a00:	d8c13417 	ldw	r3,1232(sp)
10008a04:	4a400044 	addi	r9,r9,1
10008a08:	1a63883a 	add	r17,r3,r9
10008a0c:	8839883a 	mov	fp,r17
10008a10:	883e110e 	bge	r17,zero,10008258 <__alt_data_end+0xf8008258>
10008a14:	003ff406 	br	100089e8 <__alt_data_end+0xf80089e8>
10008a18:	1839883a 	mov	fp,r3
10008a1c:	18004116 	blt	r3,zero,10008b24 <___vfprintf_internal_r+0x20f4>
10008a20:	dc413417 	ldw	r17,1232(sp)
10008a24:	003e0c06 	br	10008258 <__alt_data_end+0xf8008258>
10008a28:	d8812117 	ldw	r2,1156(sp)
10008a2c:	003df606 	br	10008208 <__alt_data_end+0xf8008208>
10008a30:	00800c04 	movi	r2,48
10008a34:	a8c00c04 	addi	r3,r21,48
10008a38:	d8812345 	stb	r2,1165(sp)
10008a3c:	d8c12385 	stb	r3,1166(sp)
10008a40:	d88123c4 	addi	r2,sp,1167
10008a44:	dcc122c4 	addi	r19,sp,1163
10008a48:	003fb806 	br	1000892c <__alt_data_end+0xf800892c>
10008a4c:	d9013717 	ldw	r4,1244(sp)
10008a50:	880b883a 	mov	r5,r17
10008a54:	000d883a 	mov	r6,zero
10008a58:	000f883a 	mov	r7,zero
10008a5c:	da013f15 	stw	r8,1276(sp)
10008a60:	da413e15 	stw	r9,1272(sp)
10008a64:	da813d15 	stw	r10,1268(sp)
10008a68:	000533c0 	call	1000533c <__eqdf2>
10008a6c:	da013f17 	ldw	r8,1276(sp)
10008a70:	da413e17 	ldw	r9,1272(sp)
10008a74:	da813d17 	ldw	r10,1268(sp)
10008a78:	103f1726 	beq	r2,zero,100086d8 <__alt_data_end+0xf80086d8>
10008a7c:	00800044 	movi	r2,1
10008a80:	1547c83a 	sub	r3,r2,r21
10008a84:	d8c12615 	stw	r3,1176(sp)
10008a88:	003f1406 	br	100086dc <__alt_data_end+0xf80086dc>
10008a8c:	0005883a 	mov	r2,zero
10008a90:	003f4c06 	br	100087c4 <__alt_data_end+0xf80087c4>
10008a94:	0039883a 	mov	fp,zero
10008a98:	003fae06 	br	10008954 <__alt_data_end+0xf8008954>
10008a9c:	e084703a 	and	r2,fp,r2
10008aa0:	103faa26 	beq	r2,zero,1000894c <__alt_data_end+0xf800894c>
10008aa4:	003fa806 	br	10008948 <__alt_data_end+0xf8008948>
10008aa8:	d9412d17 	ldw	r5,1204(sp)
10008aac:	2a400017 	ldw	r9,0(r5)
10008ab0:	28c00104 	addi	r3,r5,4
10008ab4:	d8c12d15 	stw	r3,1204(sp)
10008ab8:	483ebc0e 	bge	r9,zero,100085ac <__alt_data_end+0xf80085ac>
10008abc:	027fffc4 	movi	r9,-1
10008ac0:	e4000047 	ldb	r16,1(fp)
10008ac4:	00384206 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10008ac8:	043fffc4 	movi	r16,-1
10008acc:	0038ce06 	br	10006e08 <__alt_data_end+0xf8006e08>
10008ad0:	00800b44 	movi	r2,45
10008ad4:	056bc83a 	sub	r21,zero,r21
10008ad8:	d8812305 	stb	r2,1164(sp)
10008adc:	003f6c06 	br	10008890 <__alt_data_end+0xf8008890>
10008ae0:	4800081e 	bne	r9,zero,10008b04 <___vfprintf_internal_r+0x20d4>
10008ae4:	e080004c 	andi	r2,fp,1
10008ae8:	1000061e 	bne	r2,zero,10008b04 <___vfprintf_internal_r+0x20d4>
10008aec:	07000044 	movi	fp,1
10008af0:	e023883a 	mov	r17,fp
10008af4:	003dd806 	br	10008258 <__alt_data_end+0xf8008258>
10008af8:	04400084 	movi	r17,2
10008afc:	88e3c83a 	sub	r17,r17,r3
10008b00:	003fb506 	br	100089d8 <__alt_data_end+0xf80089d8>
10008b04:	4c400084 	addi	r17,r9,2
10008b08:	8839883a 	mov	fp,r17
10008b0c:	883dd20e 	bge	r17,zero,10008258 <__alt_data_end+0xf8008258>
10008b10:	003fb506 	br	100089e8 <__alt_data_end+0xf80089e8>
10008b14:	d8c12617 	ldw	r3,1176(sp)
10008b18:	003f5706 	br	10008878 <__alt_data_end+0xf8008878>
10008b1c:	d8812344 	addi	r2,sp,1165
10008b20:	003f8206 	br	1000892c <__alt_data_end+0xf800892c>
10008b24:	0039883a 	mov	fp,zero
10008b28:	003fbd06 	br	10008a20 <__alt_data_end+0xf8008a20>

10008b2c <__vfprintf_internal>:
10008b2c:	2007883a 	mov	r3,r4
10008b30:	01040074 	movhi	r4,4097
10008b34:	2110d104 	addi	r4,r4,17220
10008b38:	21000017 	ldw	r4,0(r4)
10008b3c:	2805883a 	mov	r2,r5
10008b40:	300f883a 	mov	r7,r6
10008b44:	180b883a 	mov	r5,r3
10008b48:	100d883a 	mov	r6,r2
10008b4c:	0006a301 	jmpi	10006a30 <___vfprintf_internal_r>

10008b50 <__swsetup_r>:
10008b50:	00840074 	movhi	r2,4097
10008b54:	defffd04 	addi	sp,sp,-12
10008b58:	1090d104 	addi	r2,r2,17220
10008b5c:	dc400115 	stw	r17,4(sp)
10008b60:	2023883a 	mov	r17,r4
10008b64:	11000017 	ldw	r4,0(r2)
10008b68:	dc000015 	stw	r16,0(sp)
10008b6c:	dfc00215 	stw	ra,8(sp)
10008b70:	2821883a 	mov	r16,r5
10008b74:	20000226 	beq	r4,zero,10008b80 <__swsetup_r+0x30>
10008b78:	20c00e17 	ldw	r3,56(r4)
10008b7c:	18002e26 	beq	r3,zero,10008c38 <__swsetup_r+0xe8>
10008b80:	8080030b 	ldhu	r2,12(r16)
10008b84:	10c0020c 	andi	r3,r2,8
10008b88:	100d883a 	mov	r6,r2
10008b8c:	18000f26 	beq	r3,zero,10008bcc <__swsetup_r+0x7c>
10008b90:	80c00417 	ldw	r3,16(r16)
10008b94:	18001526 	beq	r3,zero,10008bec <__swsetup_r+0x9c>
10008b98:	1100004c 	andi	r4,r2,1
10008b9c:	20001c1e 	bne	r4,zero,10008c10 <__swsetup_r+0xc0>
10008ba0:	1080008c 	andi	r2,r2,2
10008ba4:	1000261e 	bne	r2,zero,10008c40 <__swsetup_r+0xf0>
10008ba8:	80800517 	ldw	r2,20(r16)
10008bac:	80800215 	stw	r2,8(r16)
10008bb0:	18001c26 	beq	r3,zero,10008c24 <__swsetup_r+0xd4>
10008bb4:	0005883a 	mov	r2,zero
10008bb8:	dfc00217 	ldw	ra,8(sp)
10008bbc:	dc400117 	ldw	r17,4(sp)
10008bc0:	dc000017 	ldw	r16,0(sp)
10008bc4:	dec00304 	addi	sp,sp,12
10008bc8:	f800283a 	ret
10008bcc:	3080040c 	andi	r2,r6,16
10008bd0:	10001726 	beq	r2,zero,10008c30 <__swsetup_r+0xe0>
10008bd4:	3080010c 	andi	r2,r6,4
10008bd8:	10001b1e 	bne	r2,zero,10008c48 <__swsetup_r+0xf8>
10008bdc:	80c00417 	ldw	r3,16(r16)
10008be0:	30800214 	ori	r2,r6,8
10008be4:	8080030d 	sth	r2,12(r16)
10008be8:	183feb1e 	bne	r3,zero,10008b98 <__alt_data_end+0xf8008b98>
10008bec:	1140a00c 	andi	r5,r2,640
10008bf0:	01008004 	movi	r4,512
10008bf4:	293fe826 	beq	r5,r4,10008b98 <__alt_data_end+0xf8008b98>
10008bf8:	8809883a 	mov	r4,r17
10008bfc:	800b883a 	mov	r5,r16
10008c00:	000b2400 	call	1000b240 <__smakebuf_r>
10008c04:	8080030b 	ldhu	r2,12(r16)
10008c08:	80c00417 	ldw	r3,16(r16)
10008c0c:	003fe206 	br	10008b98 <__alt_data_end+0xf8008b98>
10008c10:	80800517 	ldw	r2,20(r16)
10008c14:	80000215 	stw	zero,8(r16)
10008c18:	0085c83a 	sub	r2,zero,r2
10008c1c:	80800615 	stw	r2,24(r16)
10008c20:	183fe41e 	bne	r3,zero,10008bb4 <__alt_data_end+0xf8008bb4>
10008c24:	8080030b 	ldhu	r2,12(r16)
10008c28:	1080200c 	andi	r2,r2,128
10008c2c:	103fe226 	beq	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008c30:	00bfffc4 	movi	r2,-1
10008c34:	003fe006 	br	10008bb8 <__alt_data_end+0xf8008bb8>
10008c38:	000ab8c0 	call	1000ab8c <__sinit>
10008c3c:	003fd006 	br	10008b80 <__alt_data_end+0xf8008b80>
10008c40:	0005883a 	mov	r2,zero
10008c44:	003fd906 	br	10008bac <__alt_data_end+0xf8008bac>
10008c48:	81400c17 	ldw	r5,48(r16)
10008c4c:	28000626 	beq	r5,zero,10008c68 <__swsetup_r+0x118>
10008c50:	80801004 	addi	r2,r16,64
10008c54:	28800326 	beq	r5,r2,10008c64 <__swsetup_r+0x114>
10008c58:	8809883a 	mov	r4,r17
10008c5c:	000ad000 	call	1000ad00 <_free_r>
10008c60:	8180030b 	ldhu	r6,12(r16)
10008c64:	80000c15 	stw	zero,48(r16)
10008c68:	80c00417 	ldw	r3,16(r16)
10008c6c:	00bff6c4 	movi	r2,-37
10008c70:	118c703a 	and	r6,r2,r6
10008c74:	80000115 	stw	zero,4(r16)
10008c78:	80c00015 	stw	r3,0(r16)
10008c7c:	003fd806 	br	10008be0 <__alt_data_end+0xf8008be0>

10008c80 <quorem>:
10008c80:	defff204 	addi	sp,sp,-56
10008c84:	ddc00b15 	stw	r23,44(sp)
10008c88:	20800417 	ldw	r2,16(r4)
10008c8c:	2dc00417 	ldw	r23,16(r5)
10008c90:	dfc00d15 	stw	ra,52(sp)
10008c94:	df000c15 	stw	fp,48(sp)
10008c98:	dd800a15 	stw	r22,40(sp)
10008c9c:	dd400915 	stw	r21,36(sp)
10008ca0:	dd000815 	stw	r20,32(sp)
10008ca4:	dcc00715 	stw	r19,28(sp)
10008ca8:	dc800615 	stw	r18,24(sp)
10008cac:	dc400515 	stw	r17,20(sp)
10008cb0:	dc000415 	stw	r16,16(sp)
10008cb4:	15c07a16 	blt	r2,r23,10008ea0 <quorem+0x220>
10008cb8:	bdffffc4 	addi	r23,r23,-1
10008cbc:	bde9883a 	add	r20,r23,r23
10008cc0:	28c00504 	addi	r3,r5,20
10008cc4:	a529883a 	add	r20,r20,r20
10008cc8:	1d39883a 	add	fp,r3,r20
10008ccc:	24c00504 	addi	r19,r4,20
10008cd0:	d9400215 	stw	r5,8(sp)
10008cd4:	9d29883a 	add	r20,r19,r20
10008cd8:	e1400017 	ldw	r5,0(fp)
10008cdc:	d9000015 	stw	r4,0(sp)
10008ce0:	a1000017 	ldw	r4,0(r20)
10008ce4:	29400044 	addi	r5,r5,1
10008ce8:	d8c00115 	stw	r3,4(sp)
10008cec:	dd000315 	stw	r20,12(sp)
10008cf0:	00040e80 	call	100040e8 <__udivsi3>
10008cf4:	1025883a 	mov	r18,r2
10008cf8:	10003026 	beq	r2,zero,10008dbc <quorem+0x13c>
10008cfc:	dc400117 	ldw	r17,4(sp)
10008d00:	9829883a 	mov	r20,r19
10008d04:	002d883a 	mov	r22,zero
10008d08:	0021883a 	mov	r16,zero
10008d0c:	8d400017 	ldw	r21,0(r17)
10008d10:	900b883a 	mov	r5,r18
10008d14:	8c400104 	addi	r17,r17,4
10008d18:	a93fffcc 	andi	r4,r21,65535
10008d1c:	00040f80 	call	100040f8 <__mulsi3>
10008d20:	a808d43a 	srli	r4,r21,16
10008d24:	900b883a 	mov	r5,r18
10008d28:	b0ad883a 	add	r22,r22,r2
10008d2c:	00040f80 	call	100040f8 <__mulsi3>
10008d30:	a1000017 	ldw	r4,0(r20)
10008d34:	b00cd43a 	srli	r6,r22,16
10008d38:	b0ffffcc 	andi	r3,r22,65535
10008d3c:	217fffcc 	andi	r5,r4,65535
10008d40:	2c21883a 	add	r16,r5,r16
10008d44:	80c7c83a 	sub	r3,r16,r3
10008d48:	2008d43a 	srli	r4,r4,16
10008d4c:	3085883a 	add	r2,r6,r2
10008d50:	1821d43a 	srai	r16,r3,16
10008d54:	117fffcc 	andi	r5,r2,65535
10008d58:	2149c83a 	sub	r4,r4,r5
10008d5c:	2421883a 	add	r16,r4,r16
10008d60:	8008943a 	slli	r4,r16,16
10008d64:	18ffffcc 	andi	r3,r3,65535
10008d68:	102cd43a 	srli	r22,r2,16
10008d6c:	20c8b03a 	or	r4,r4,r3
10008d70:	a1000015 	stw	r4,0(r20)
10008d74:	8021d43a 	srai	r16,r16,16
10008d78:	a5000104 	addi	r20,r20,4
10008d7c:	e47fe32e 	bgeu	fp,r17,10008d0c <__alt_data_end+0xf8008d0c>
10008d80:	d8c00317 	ldw	r3,12(sp)
10008d84:	18800017 	ldw	r2,0(r3)
10008d88:	10000c1e 	bne	r2,zero,10008dbc <quorem+0x13c>
10008d8c:	18bfff04 	addi	r2,r3,-4
10008d90:	9880082e 	bgeu	r19,r2,10008db4 <quorem+0x134>
10008d94:	18ffff17 	ldw	r3,-4(r3)
10008d98:	18000326 	beq	r3,zero,10008da8 <quorem+0x128>
10008d9c:	00000506 	br	10008db4 <quorem+0x134>
10008da0:	10c00017 	ldw	r3,0(r2)
10008da4:	1800031e 	bne	r3,zero,10008db4 <quorem+0x134>
10008da8:	10bfff04 	addi	r2,r2,-4
10008dac:	bdffffc4 	addi	r23,r23,-1
10008db0:	98bffb36 	bltu	r19,r2,10008da0 <__alt_data_end+0xf8008da0>
10008db4:	d8c00017 	ldw	r3,0(sp)
10008db8:	1dc00415 	stw	r23,16(r3)
10008dbc:	d9000017 	ldw	r4,0(sp)
10008dc0:	d9400217 	ldw	r5,8(sp)
10008dc4:	000c8600 	call	1000c860 <__mcmp>
10008dc8:	10002816 	blt	r2,zero,10008e6c <quorem+0x1ec>
10008dcc:	dc400117 	ldw	r17,4(sp)
10008dd0:	94800044 	addi	r18,r18,1
10008dd4:	980d883a 	mov	r6,r19
10008dd8:	0007883a 	mov	r3,zero
10008ddc:	31000017 	ldw	r4,0(r6)
10008de0:	89400017 	ldw	r5,0(r17)
10008de4:	31800104 	addi	r6,r6,4
10008de8:	20bfffcc 	andi	r2,r4,65535
10008dec:	10c7883a 	add	r3,r2,r3
10008df0:	28bfffcc 	andi	r2,r5,65535
10008df4:	1885c83a 	sub	r2,r3,r2
10008df8:	280ad43a 	srli	r5,r5,16
10008dfc:	2008d43a 	srli	r4,r4,16
10008e00:	1007d43a 	srai	r3,r2,16
10008e04:	10bfffcc 	andi	r2,r2,65535
10008e08:	2149c83a 	sub	r4,r4,r5
10008e0c:	20c9883a 	add	r4,r4,r3
10008e10:	200a943a 	slli	r5,r4,16
10008e14:	8c400104 	addi	r17,r17,4
10008e18:	2007d43a 	srai	r3,r4,16
10008e1c:	2884b03a 	or	r2,r5,r2
10008e20:	30bfff15 	stw	r2,-4(r6)
10008e24:	e47fed2e 	bgeu	fp,r17,10008ddc <__alt_data_end+0xf8008ddc>
10008e28:	bdc5883a 	add	r2,r23,r23
10008e2c:	1085883a 	add	r2,r2,r2
10008e30:	9887883a 	add	r3,r19,r2
10008e34:	18800017 	ldw	r2,0(r3)
10008e38:	10000c1e 	bne	r2,zero,10008e6c <quorem+0x1ec>
10008e3c:	18bfff04 	addi	r2,r3,-4
10008e40:	9880082e 	bgeu	r19,r2,10008e64 <quorem+0x1e4>
10008e44:	18ffff17 	ldw	r3,-4(r3)
10008e48:	18000326 	beq	r3,zero,10008e58 <quorem+0x1d8>
10008e4c:	00000506 	br	10008e64 <quorem+0x1e4>
10008e50:	10c00017 	ldw	r3,0(r2)
10008e54:	1800031e 	bne	r3,zero,10008e64 <quorem+0x1e4>
10008e58:	10bfff04 	addi	r2,r2,-4
10008e5c:	bdffffc4 	addi	r23,r23,-1
10008e60:	98bffb36 	bltu	r19,r2,10008e50 <__alt_data_end+0xf8008e50>
10008e64:	d8c00017 	ldw	r3,0(sp)
10008e68:	1dc00415 	stw	r23,16(r3)
10008e6c:	9005883a 	mov	r2,r18
10008e70:	dfc00d17 	ldw	ra,52(sp)
10008e74:	df000c17 	ldw	fp,48(sp)
10008e78:	ddc00b17 	ldw	r23,44(sp)
10008e7c:	dd800a17 	ldw	r22,40(sp)
10008e80:	dd400917 	ldw	r21,36(sp)
10008e84:	dd000817 	ldw	r20,32(sp)
10008e88:	dcc00717 	ldw	r19,28(sp)
10008e8c:	dc800617 	ldw	r18,24(sp)
10008e90:	dc400517 	ldw	r17,20(sp)
10008e94:	dc000417 	ldw	r16,16(sp)
10008e98:	dec00e04 	addi	sp,sp,56
10008e9c:	f800283a 	ret
10008ea0:	0005883a 	mov	r2,zero
10008ea4:	003ff206 	br	10008e70 <__alt_data_end+0xf8008e70>

10008ea8 <_dtoa_r>:
10008ea8:	20801017 	ldw	r2,64(r4)
10008eac:	deffde04 	addi	sp,sp,-136
10008eb0:	dd401d15 	stw	r21,116(sp)
10008eb4:	dcc01b15 	stw	r19,108(sp)
10008eb8:	dc801a15 	stw	r18,104(sp)
10008ebc:	dc401915 	stw	r17,100(sp)
10008ec0:	dc001815 	stw	r16,96(sp)
10008ec4:	dfc02115 	stw	ra,132(sp)
10008ec8:	df002015 	stw	fp,128(sp)
10008ecc:	ddc01f15 	stw	r23,124(sp)
10008ed0:	dd801e15 	stw	r22,120(sp)
10008ed4:	dd001c15 	stw	r20,112(sp)
10008ed8:	d9c00315 	stw	r7,12(sp)
10008edc:	2021883a 	mov	r16,r4
10008ee0:	302b883a 	mov	r21,r6
10008ee4:	2825883a 	mov	r18,r5
10008ee8:	dc402417 	ldw	r17,144(sp)
10008eec:	3027883a 	mov	r19,r6
10008ef0:	10000826 	beq	r2,zero,10008f14 <_dtoa_r+0x6c>
10008ef4:	21801117 	ldw	r6,68(r4)
10008ef8:	00c00044 	movi	r3,1
10008efc:	100b883a 	mov	r5,r2
10008f00:	1986983a 	sll	r3,r3,r6
10008f04:	11800115 	stw	r6,4(r2)
10008f08:	10c00215 	stw	r3,8(r2)
10008f0c:	000bf8c0 	call	1000bf8c <_Bfree>
10008f10:	80001015 	stw	zero,64(r16)
10008f14:	a8002d16 	blt	r21,zero,10008fcc <_dtoa_r+0x124>
10008f18:	88000015 	stw	zero,0(r17)
10008f1c:	a8dffc2c 	andhi	r3,r21,32752
10008f20:	009ffc34 	movhi	r2,32752
10008f24:	18801b26 	beq	r3,r2,10008f94 <_dtoa_r+0xec>
10008f28:	9009883a 	mov	r4,r18
10008f2c:	980b883a 	mov	r5,r19
10008f30:	000d883a 	mov	r6,zero
10008f34:	000f883a 	mov	r7,zero
10008f38:	000533c0 	call	1000533c <__eqdf2>
10008f3c:	10002a1e 	bne	r2,zero,10008fe8 <_dtoa_r+0x140>
10008f40:	d8c02317 	ldw	r3,140(sp)
10008f44:	d9002517 	ldw	r4,148(sp)
10008f48:	00800044 	movi	r2,1
10008f4c:	18800015 	stw	r2,0(r3)
10008f50:	2001a226 	beq	r4,zero,100095dc <_dtoa_r+0x734>
10008f54:	00840074 	movhi	r2,4097
10008f58:	1089b644 	addi	r2,r2,9945
10008f5c:	20800015 	stw	r2,0(r4)
10008f60:	10bfffc4 	addi	r2,r2,-1
10008f64:	dfc02117 	ldw	ra,132(sp)
10008f68:	df002017 	ldw	fp,128(sp)
10008f6c:	ddc01f17 	ldw	r23,124(sp)
10008f70:	dd801e17 	ldw	r22,120(sp)
10008f74:	dd401d17 	ldw	r21,116(sp)
10008f78:	dd001c17 	ldw	r20,112(sp)
10008f7c:	dcc01b17 	ldw	r19,108(sp)
10008f80:	dc801a17 	ldw	r18,104(sp)
10008f84:	dc401917 	ldw	r17,100(sp)
10008f88:	dc001817 	ldw	r16,96(sp)
10008f8c:	dec02204 	addi	sp,sp,136
10008f90:	f800283a 	ret
10008f94:	d8c02317 	ldw	r3,140(sp)
10008f98:	0089c3c4 	movi	r2,9999
10008f9c:	18800015 	stw	r2,0(r3)
10008fa0:	90017c26 	beq	r18,zero,10009594 <_dtoa_r+0x6ec>
10008fa4:	00840074 	movhi	r2,4097
10008fa8:	1089c204 	addi	r2,r2,9992
10008fac:	d9002517 	ldw	r4,148(sp)
10008fb0:	203fec26 	beq	r4,zero,10008f64 <__alt_data_end+0xf8008f64>
10008fb4:	10c000c7 	ldb	r3,3(r2)
10008fb8:	18017d1e 	bne	r3,zero,100095b0 <_dtoa_r+0x708>
10008fbc:	10c000c4 	addi	r3,r2,3
10008fc0:	d9802517 	ldw	r6,148(sp)
10008fc4:	30c00015 	stw	r3,0(r6)
10008fc8:	003fe606 	br	10008f64 <__alt_data_end+0xf8008f64>
10008fcc:	04e00034 	movhi	r19,32768
10008fd0:	9cffffc4 	addi	r19,r19,-1
10008fd4:	00800044 	movi	r2,1
10008fd8:	ace6703a 	and	r19,r21,r19
10008fdc:	88800015 	stw	r2,0(r17)
10008fe0:	982b883a 	mov	r21,r19
10008fe4:	003fcd06 	br	10008f1c <__alt_data_end+0xf8008f1c>
10008fe8:	d8800204 	addi	r2,sp,8
10008fec:	a822d53a 	srli	r17,r21,20
10008ff0:	d8800015 	stw	r2,0(sp)
10008ff4:	8009883a 	mov	r4,r16
10008ff8:	900b883a 	mov	r5,r18
10008ffc:	980d883a 	mov	r6,r19
10009000:	d9c00104 	addi	r7,sp,4
10009004:	000cbd40 	call	1000cbd4 <__d2b>
10009008:	1039883a 	mov	fp,r2
1000900c:	88016a1e 	bne	r17,zero,100095b8 <_dtoa_r+0x710>
10009010:	dd000217 	ldw	r20,8(sp)
10009014:	dc400117 	ldw	r17,4(sp)
10009018:	00befbc4 	movi	r2,-1041
1000901c:	a463883a 	add	r17,r20,r17
10009020:	8882ea16 	blt	r17,r2,10009bcc <_dtoa_r+0xd24>
10009024:	00bf0384 	movi	r2,-1010
10009028:	1445c83a 	sub	r2,r2,r17
1000902c:	89010484 	addi	r4,r17,1042
10009030:	a8aa983a 	sll	r21,r21,r2
10009034:	9108d83a 	srl	r4,r18,r4
10009038:	a908b03a 	or	r4,r21,r4
1000903c:	00068140 	call	10006814 <__floatunsidf>
10009040:	017f8434 	movhi	r5,65040
10009044:	01800044 	movi	r6,1
10009048:	1009883a 	mov	r4,r2
1000904c:	194b883a 	add	r5,r3,r5
10009050:	8c7fffc4 	addi	r17,r17,-1
10009054:	d9800f15 	stw	r6,60(sp)
10009058:	000d883a 	mov	r6,zero
1000905c:	01cffe34 	movhi	r7,16376
10009060:	0005dec0 	call	10005dec <__subdf3>
10009064:	0198dbf4 	movhi	r6,25455
10009068:	01cff4f4 	movhi	r7,16339
1000906c:	1009883a 	mov	r4,r2
10009070:	180b883a 	mov	r5,r3
10009074:	3190d844 	addi	r6,r6,17249
10009078:	39e1e9c4 	addi	r7,r7,-30809
1000907c:	00055800 	call	10005580 <__muldf3>
10009080:	01a2d874 	movhi	r6,35681
10009084:	01cff1f4 	movhi	r7,16327
10009088:	180b883a 	mov	r5,r3
1000908c:	31b22cc4 	addi	r6,r6,-14157
10009090:	39e28a04 	addi	r7,r7,-30168
10009094:	1009883a 	mov	r4,r2
10009098:	00041200 	call	10004120 <__adddf3>
1000909c:	8809883a 	mov	r4,r17
100090a0:	102d883a 	mov	r22,r2
100090a4:	182b883a 	mov	r21,r3
100090a8:	00067440 	call	10006744 <__floatsidf>
100090ac:	019427f4 	movhi	r6,20639
100090b0:	01cff4f4 	movhi	r7,16339
100090b4:	1009883a 	mov	r4,r2
100090b8:	180b883a 	mov	r5,r3
100090bc:	319e7ec4 	addi	r6,r6,31227
100090c0:	39d104c4 	addi	r7,r7,17427
100090c4:	00055800 	call	10005580 <__muldf3>
100090c8:	b009883a 	mov	r4,r22
100090cc:	a80b883a 	mov	r5,r21
100090d0:	100d883a 	mov	r6,r2
100090d4:	180f883a 	mov	r7,r3
100090d8:	00041200 	call	10004120 <__adddf3>
100090dc:	1009883a 	mov	r4,r2
100090e0:	180b883a 	mov	r5,r3
100090e4:	102d883a 	mov	r22,r2
100090e8:	182b883a 	mov	r21,r3
100090ec:	00066bc0 	call	100066bc <__fixdfsi>
100090f0:	b009883a 	mov	r4,r22
100090f4:	a80b883a 	mov	r5,r21
100090f8:	000d883a 	mov	r6,zero
100090fc:	000f883a 	mov	r7,zero
10009100:	d8800515 	stw	r2,20(sp)
10009104:	00054a00 	call	100054a0 <__ledf2>
10009108:	10023116 	blt	r2,zero,100099d0 <_dtoa_r+0xb28>
1000910c:	d8c00517 	ldw	r3,20(sp)
10009110:	00800584 	movi	r2,22
10009114:	10c21f36 	bltu	r2,r3,10009994 <_dtoa_r+0xaec>
10009118:	180490fa 	slli	r2,r3,3
1000911c:	00c40074 	movhi	r3,4097
10009120:	18c9dd04 	addi	r3,r3,10100
10009124:	1885883a 	add	r2,r3,r2
10009128:	11000017 	ldw	r4,0(r2)
1000912c:	11400117 	ldw	r5,4(r2)
10009130:	900d883a 	mov	r6,r18
10009134:	980f883a 	mov	r7,r19
10009138:	00053c00 	call	100053c0 <__gedf2>
1000913c:	0082a70e 	bge	zero,r2,10009bdc <_dtoa_r+0xd34>
10009140:	d9000517 	ldw	r4,20(sp)
10009144:	d8000c15 	stw	zero,48(sp)
10009148:	213fffc4 	addi	r4,r4,-1
1000914c:	d9000515 	stw	r4,20(sp)
10009150:	a463c83a 	sub	r17,r20,r17
10009154:	8dbfffc4 	addi	r22,r17,-1
10009158:	b0021916 	blt	r22,zero,100099c0 <_dtoa_r+0xb18>
1000915c:	d8000815 	stw	zero,32(sp)
10009160:	d8800517 	ldw	r2,20(sp)
10009164:	10020e16 	blt	r2,zero,100099a0 <_dtoa_r+0xaf8>
10009168:	b0ad883a 	add	r22,r22,r2
1000916c:	d8800a15 	stw	r2,40(sp)
10009170:	d8000915 	stw	zero,36(sp)
10009174:	d8c00317 	ldw	r3,12(sp)
10009178:	00800244 	movi	r2,9
1000917c:	10c11a36 	bltu	r2,r3,100095e8 <_dtoa_r+0x740>
10009180:	00800144 	movi	r2,5
10009184:	10c4fc0e 	bge	r2,r3,1000a578 <_dtoa_r+0x16d0>
10009188:	18ffff04 	addi	r3,r3,-4
1000918c:	d8c00315 	stw	r3,12(sp)
10009190:	0029883a 	mov	r20,zero
10009194:	d9800317 	ldw	r6,12(sp)
10009198:	008000c4 	movi	r2,3
1000919c:	3083bd26 	beq	r6,r2,1000a094 <_dtoa_r+0x11ec>
100091a0:	1183670e 	bge	r2,r6,10009f40 <_dtoa_r+0x1098>
100091a4:	d8c00317 	ldw	r3,12(sp)
100091a8:	00800104 	movi	r2,4
100091ac:	1882e726 	beq	r3,r2,10009d4c <_dtoa_r+0xea4>
100091b0:	00800144 	movi	r2,5
100091b4:	1884f21e 	bne	r3,r2,1000a580 <_dtoa_r+0x16d8>
100091b8:	00800044 	movi	r2,1
100091bc:	d8800b15 	stw	r2,44(sp)
100091c0:	d8c02217 	ldw	r3,136(sp)
100091c4:	d9000517 	ldw	r4,20(sp)
100091c8:	1907883a 	add	r3,r3,r4
100091cc:	19800044 	addi	r6,r3,1
100091d0:	d8c00d15 	stw	r3,52(sp)
100091d4:	d9800615 	stw	r6,24(sp)
100091d8:	0183c30e 	bge	zero,r6,1000a0e8 <_dtoa_r+0x1240>
100091dc:	d9800617 	ldw	r6,24(sp)
100091e0:	3023883a 	mov	r17,r6
100091e4:	80001115 	stw	zero,68(r16)
100091e8:	008005c4 	movi	r2,23
100091ec:	1184f62e 	bgeu	r2,r6,1000a5c8 <_dtoa_r+0x1720>
100091f0:	00c00044 	movi	r3,1
100091f4:	00800104 	movi	r2,4
100091f8:	1085883a 	add	r2,r2,r2
100091fc:	11000504 	addi	r4,r2,20
10009200:	180b883a 	mov	r5,r3
10009204:	18c00044 	addi	r3,r3,1
10009208:	313ffb2e 	bgeu	r6,r4,100091f8 <__alt_data_end+0xf80091f8>
1000920c:	81401115 	stw	r5,68(r16)
10009210:	8009883a 	mov	r4,r16
10009214:	000bee40 	call	1000bee4 <_Balloc>
10009218:	d8800715 	stw	r2,28(sp)
1000921c:	80801015 	stw	r2,64(r16)
10009220:	00800384 	movi	r2,14
10009224:	1440fd36 	bltu	r2,r17,1000961c <_dtoa_r+0x774>
10009228:	a000fc26 	beq	r20,zero,1000961c <_dtoa_r+0x774>
1000922c:	d8800517 	ldw	r2,20(sp)
10009230:	0083b90e 	bge	zero,r2,1000a118 <_dtoa_r+0x1270>
10009234:	d8c00517 	ldw	r3,20(sp)
10009238:	108003cc 	andi	r2,r2,15
1000923c:	100490fa 	slli	r2,r2,3
10009240:	182fd13a 	srai	r23,r3,4
10009244:	00c40074 	movhi	r3,4097
10009248:	18c9dd04 	addi	r3,r3,10100
1000924c:	1885883a 	add	r2,r3,r2
10009250:	b8c0040c 	andi	r3,r23,16
10009254:	12c00017 	ldw	r11,0(r2)
10009258:	12800117 	ldw	r10,4(r2)
1000925c:	18039726 	beq	r3,zero,1000a0bc <_dtoa_r+0x1214>
10009260:	00840074 	movhi	r2,4097
10009264:	1089d304 	addi	r2,r2,10060
10009268:	11800817 	ldw	r6,32(r2)
1000926c:	11c00917 	ldw	r7,36(r2)
10009270:	9009883a 	mov	r4,r18
10009274:	980b883a 	mov	r5,r19
10009278:	da801615 	stw	r10,88(sp)
1000927c:	dac01515 	stw	r11,84(sp)
10009280:	00049bc0 	call	100049bc <__divdf3>
10009284:	da801617 	ldw	r10,88(sp)
10009288:	dac01517 	ldw	r11,84(sp)
1000928c:	bdc003cc 	andi	r23,r23,15
10009290:	044000c4 	movi	r17,3
10009294:	d8800e15 	stw	r2,56(sp)
10009298:	182b883a 	mov	r21,r3
1000929c:	b8001126 	beq	r23,zero,100092e4 <_dtoa_r+0x43c>
100092a0:	05040074 	movhi	r20,4097
100092a4:	a509d304 	addi	r20,r20,10060
100092a8:	5805883a 	mov	r2,r11
100092ac:	5007883a 	mov	r3,r10
100092b0:	b980004c 	andi	r6,r23,1
100092b4:	1009883a 	mov	r4,r2
100092b8:	b82fd07a 	srai	r23,r23,1
100092bc:	180b883a 	mov	r5,r3
100092c0:	30000426 	beq	r6,zero,100092d4 <_dtoa_r+0x42c>
100092c4:	a1800017 	ldw	r6,0(r20)
100092c8:	a1c00117 	ldw	r7,4(r20)
100092cc:	8c400044 	addi	r17,r17,1
100092d0:	00055800 	call	10005580 <__muldf3>
100092d4:	a5000204 	addi	r20,r20,8
100092d8:	b83ff51e 	bne	r23,zero,100092b0 <__alt_data_end+0xf80092b0>
100092dc:	1017883a 	mov	r11,r2
100092e0:	1815883a 	mov	r10,r3
100092e4:	d9000e17 	ldw	r4,56(sp)
100092e8:	a80b883a 	mov	r5,r21
100092ec:	580d883a 	mov	r6,r11
100092f0:	500f883a 	mov	r7,r10
100092f4:	00049bc0 	call	100049bc <__divdf3>
100092f8:	1029883a 	mov	r20,r2
100092fc:	182b883a 	mov	r21,r3
10009300:	d9800c17 	ldw	r6,48(sp)
10009304:	30000626 	beq	r6,zero,10009320 <_dtoa_r+0x478>
10009308:	a009883a 	mov	r4,r20
1000930c:	a80b883a 	mov	r5,r21
10009310:	000d883a 	mov	r6,zero
10009314:	01cffc34 	movhi	r7,16368
10009318:	00054a00 	call	100054a0 <__ledf2>
1000931c:	10043216 	blt	r2,zero,1000a3e8 <_dtoa_r+0x1540>
10009320:	8809883a 	mov	r4,r17
10009324:	00067440 	call	10006744 <__floatsidf>
10009328:	1009883a 	mov	r4,r2
1000932c:	180b883a 	mov	r5,r3
10009330:	a00d883a 	mov	r6,r20
10009334:	a80f883a 	mov	r7,r21
10009338:	00055800 	call	10005580 <__muldf3>
1000933c:	000d883a 	mov	r6,zero
10009340:	1009883a 	mov	r4,r2
10009344:	180b883a 	mov	r5,r3
10009348:	01d00734 	movhi	r7,16412
1000934c:	00041200 	call	10004120 <__adddf3>
10009350:	1023883a 	mov	r17,r2
10009354:	d9800617 	ldw	r6,24(sp)
10009358:	00bf3034 	movhi	r2,64704
1000935c:	1885883a 	add	r2,r3,r2
10009360:	d8800e15 	stw	r2,56(sp)
10009364:	30032e26 	beq	r6,zero,1000a020 <_dtoa_r+0x1178>
10009368:	d8c00517 	ldw	r3,20(sp)
1000936c:	da800617 	ldw	r10,24(sp)
10009370:	d8c01215 	stw	r3,72(sp)
10009374:	d9000b17 	ldw	r4,44(sp)
10009378:	2003b026 	beq	r4,zero,1000a23c <_dtoa_r+0x1394>
1000937c:	50bfffc4 	addi	r2,r10,-1
10009380:	100490fa 	slli	r2,r2,3
10009384:	00c40074 	movhi	r3,4097
10009388:	18c9dd04 	addi	r3,r3,10100
1000938c:	1885883a 	add	r2,r3,r2
10009390:	11800017 	ldw	r6,0(r2)
10009394:	11c00117 	ldw	r7,4(r2)
10009398:	d8800717 	ldw	r2,28(sp)
1000939c:	0009883a 	mov	r4,zero
100093a0:	014ff834 	movhi	r5,16352
100093a4:	da801615 	stw	r10,88(sp)
100093a8:	15c00044 	addi	r23,r2,1
100093ac:	00049bc0 	call	100049bc <__divdf3>
100093b0:	d9c00e17 	ldw	r7,56(sp)
100093b4:	880d883a 	mov	r6,r17
100093b8:	1009883a 	mov	r4,r2
100093bc:	180b883a 	mov	r5,r3
100093c0:	0005dec0 	call	10005dec <__subdf3>
100093c4:	a80b883a 	mov	r5,r21
100093c8:	a009883a 	mov	r4,r20
100093cc:	d8c01015 	stw	r3,64(sp)
100093d0:	d8800e15 	stw	r2,56(sp)
100093d4:	00066bc0 	call	100066bc <__fixdfsi>
100093d8:	1009883a 	mov	r4,r2
100093dc:	d8801715 	stw	r2,92(sp)
100093e0:	00067440 	call	10006744 <__floatsidf>
100093e4:	a009883a 	mov	r4,r20
100093e8:	a80b883a 	mov	r5,r21
100093ec:	100d883a 	mov	r6,r2
100093f0:	180f883a 	mov	r7,r3
100093f4:	0005dec0 	call	10005dec <__subdf3>
100093f8:	da001717 	ldw	r8,92(sp)
100093fc:	1829883a 	mov	r20,r3
10009400:	d8c00717 	ldw	r3,28(sp)
10009404:	d9000e17 	ldw	r4,56(sp)
10009408:	d9401017 	ldw	r5,64(sp)
1000940c:	42000c04 	addi	r8,r8,48
10009410:	1023883a 	mov	r17,r2
10009414:	1a000005 	stb	r8,0(r3)
10009418:	880d883a 	mov	r6,r17
1000941c:	a00f883a 	mov	r7,r20
10009420:	402b883a 	mov	r21,r8
10009424:	00053c00 	call	100053c0 <__gedf2>
10009428:	00844516 	blt	zero,r2,1000a540 <_dtoa_r+0x1698>
1000942c:	0009883a 	mov	r4,zero
10009430:	014ffc34 	movhi	r5,16368
10009434:	880d883a 	mov	r6,r17
10009438:	a00f883a 	mov	r7,r20
1000943c:	0005dec0 	call	10005dec <__subdf3>
10009440:	d9000e17 	ldw	r4,56(sp)
10009444:	d9401017 	ldw	r5,64(sp)
10009448:	100d883a 	mov	r6,r2
1000944c:	180f883a 	mov	r7,r3
10009450:	00053c00 	call	100053c0 <__gedf2>
10009454:	da801617 	ldw	r10,88(sp)
10009458:	00843616 	blt	zero,r2,1000a534 <_dtoa_r+0x168c>
1000945c:	00800044 	movi	r2,1
10009460:	12806e0e 	bge	r2,r10,1000961c <_dtoa_r+0x774>
10009464:	d9000717 	ldw	r4,28(sp)
10009468:	dd801315 	stw	r22,76(sp)
1000946c:	dc001115 	stw	r16,68(sp)
10009470:	2295883a 	add	r10,r4,r10
10009474:	dcc01415 	stw	r19,80(sp)
10009478:	502d883a 	mov	r22,r10
1000947c:	dcc01017 	ldw	r19,64(sp)
10009480:	b821883a 	mov	r16,r23
10009484:	dc801015 	stw	r18,64(sp)
10009488:	dc800e17 	ldw	r18,56(sp)
1000948c:	00000906 	br	100094b4 <_dtoa_r+0x60c>
10009490:	0005dec0 	call	10005dec <__subdf3>
10009494:	1009883a 	mov	r4,r2
10009498:	180b883a 	mov	r5,r3
1000949c:	900d883a 	mov	r6,r18
100094a0:	980f883a 	mov	r7,r19
100094a4:	00054a00 	call	100054a0 <__ledf2>
100094a8:	10040e16 	blt	r2,zero,1000a4e4 <_dtoa_r+0x163c>
100094ac:	b821883a 	mov	r16,r23
100094b0:	bd841026 	beq	r23,r22,1000a4f4 <_dtoa_r+0x164c>
100094b4:	9009883a 	mov	r4,r18
100094b8:	980b883a 	mov	r5,r19
100094bc:	000d883a 	mov	r6,zero
100094c0:	01d00934 	movhi	r7,16420
100094c4:	00055800 	call	10005580 <__muldf3>
100094c8:	000d883a 	mov	r6,zero
100094cc:	01d00934 	movhi	r7,16420
100094d0:	8809883a 	mov	r4,r17
100094d4:	a00b883a 	mov	r5,r20
100094d8:	1025883a 	mov	r18,r2
100094dc:	1827883a 	mov	r19,r3
100094e0:	00055800 	call	10005580 <__muldf3>
100094e4:	180b883a 	mov	r5,r3
100094e8:	1009883a 	mov	r4,r2
100094ec:	1823883a 	mov	r17,r3
100094f0:	1029883a 	mov	r20,r2
100094f4:	00066bc0 	call	100066bc <__fixdfsi>
100094f8:	1009883a 	mov	r4,r2
100094fc:	102b883a 	mov	r21,r2
10009500:	00067440 	call	10006744 <__floatsidf>
10009504:	a009883a 	mov	r4,r20
10009508:	880b883a 	mov	r5,r17
1000950c:	100d883a 	mov	r6,r2
10009510:	180f883a 	mov	r7,r3
10009514:	0005dec0 	call	10005dec <__subdf3>
10009518:	ad400c04 	addi	r21,r21,48
1000951c:	1009883a 	mov	r4,r2
10009520:	180b883a 	mov	r5,r3
10009524:	900d883a 	mov	r6,r18
10009528:	980f883a 	mov	r7,r19
1000952c:	85400005 	stb	r21,0(r16)
10009530:	1023883a 	mov	r17,r2
10009534:	1829883a 	mov	r20,r3
10009538:	00054a00 	call	100054a0 <__ledf2>
1000953c:	bdc00044 	addi	r23,r23,1
10009540:	0009883a 	mov	r4,zero
10009544:	014ffc34 	movhi	r5,16368
10009548:	880d883a 	mov	r6,r17
1000954c:	a00f883a 	mov	r7,r20
10009550:	103fcf0e 	bge	r2,zero,10009490 <__alt_data_end+0xf8009490>
10009554:	d9801217 	ldw	r6,72(sp)
10009558:	dc001117 	ldw	r16,68(sp)
1000955c:	d9800515 	stw	r6,20(sp)
10009560:	8009883a 	mov	r4,r16
10009564:	e00b883a 	mov	r5,fp
10009568:	000bf8c0 	call	1000bf8c <_Bfree>
1000956c:	d8c00517 	ldw	r3,20(sp)
10009570:	d9002317 	ldw	r4,140(sp)
10009574:	d9802517 	ldw	r6,148(sp)
10009578:	b8000005 	stb	zero,0(r23)
1000957c:	18800044 	addi	r2,r3,1
10009580:	20800015 	stw	r2,0(r4)
10009584:	30027226 	beq	r6,zero,10009f50 <_dtoa_r+0x10a8>
10009588:	35c00015 	stw	r23,0(r6)
1000958c:	d8800717 	ldw	r2,28(sp)
10009590:	003e7406 	br	10008f64 <__alt_data_end+0xf8008f64>
10009594:	00800434 	movhi	r2,16
10009598:	10bfffc4 	addi	r2,r2,-1
1000959c:	a8aa703a 	and	r21,r21,r2
100095a0:	a83e801e 	bne	r21,zero,10008fa4 <__alt_data_end+0xf8008fa4>
100095a4:	00840074 	movhi	r2,4097
100095a8:	1089bf04 	addi	r2,r2,9980
100095ac:	003e7f06 	br	10008fac <__alt_data_end+0xf8008fac>
100095b0:	10c00204 	addi	r3,r2,8
100095b4:	003e8206 	br	10008fc0 <__alt_data_end+0xf8008fc0>
100095b8:	01400434 	movhi	r5,16
100095bc:	297fffc4 	addi	r5,r5,-1
100095c0:	994a703a 	and	r5,r19,r5
100095c4:	9009883a 	mov	r4,r18
100095c8:	8c7f0044 	addi	r17,r17,-1023
100095cc:	294ffc34 	orhi	r5,r5,16368
100095d0:	dd000217 	ldw	r20,8(sp)
100095d4:	d8000f15 	stw	zero,60(sp)
100095d8:	003e9f06 	br	10009058 <__alt_data_end+0xf8009058>
100095dc:	00840074 	movhi	r2,4097
100095e0:	1089b604 	addi	r2,r2,9944
100095e4:	003e5f06 	br	10008f64 <__alt_data_end+0xf8008f64>
100095e8:	80001115 	stw	zero,68(r16)
100095ec:	8009883a 	mov	r4,r16
100095f0:	000b883a 	mov	r5,zero
100095f4:	000bee40 	call	1000bee4 <_Balloc>
100095f8:	01bfffc4 	movi	r6,-1
100095fc:	d8800715 	stw	r2,28(sp)
10009600:	80801015 	stw	r2,64(r16)
10009604:	00800044 	movi	r2,1
10009608:	d9800615 	stw	r6,24(sp)
1000960c:	d8800b15 	stw	r2,44(sp)
10009610:	d8002215 	stw	zero,136(sp)
10009614:	d9800d15 	stw	r6,52(sp)
10009618:	d8000315 	stw	zero,12(sp)
1000961c:	d8800117 	ldw	r2,4(sp)
10009620:	10008e16 	blt	r2,zero,1000985c <_dtoa_r+0x9b4>
10009624:	d9000517 	ldw	r4,20(sp)
10009628:	00c00384 	movi	r3,14
1000962c:	19008b16 	blt	r3,r4,1000985c <_dtoa_r+0x9b4>
10009630:	200490fa 	slli	r2,r4,3
10009634:	00c40074 	movhi	r3,4097
10009638:	d9802217 	ldw	r6,136(sp)
1000963c:	18c9dd04 	addi	r3,r3,10100
10009640:	1885883a 	add	r2,r3,r2
10009644:	14400017 	ldw	r17,0(r2)
10009648:	15000117 	ldw	r20,4(r2)
1000964c:	3001c716 	blt	r6,zero,10009d6c <_dtoa_r+0xec4>
10009650:	880d883a 	mov	r6,r17
10009654:	a00f883a 	mov	r7,r20
10009658:	9009883a 	mov	r4,r18
1000965c:	980b883a 	mov	r5,r19
10009660:	00049bc0 	call	100049bc <__divdf3>
10009664:	180b883a 	mov	r5,r3
10009668:	1009883a 	mov	r4,r2
1000966c:	00066bc0 	call	100066bc <__fixdfsi>
10009670:	1009883a 	mov	r4,r2
10009674:	102d883a 	mov	r22,r2
10009678:	00067440 	call	10006744 <__floatsidf>
1000967c:	1009883a 	mov	r4,r2
10009680:	180b883a 	mov	r5,r3
10009684:	880d883a 	mov	r6,r17
10009688:	a00f883a 	mov	r7,r20
1000968c:	00055800 	call	10005580 <__muldf3>
10009690:	9009883a 	mov	r4,r18
10009694:	980b883a 	mov	r5,r19
10009698:	100d883a 	mov	r6,r2
1000969c:	180f883a 	mov	r7,r3
100096a0:	0005dec0 	call	10005dec <__subdf3>
100096a4:	d9000717 	ldw	r4,28(sp)
100096a8:	d9800617 	ldw	r6,24(sp)
100096ac:	180b883a 	mov	r5,r3
100096b0:	b0c00c04 	addi	r3,r22,48
100096b4:	20c00005 	stb	r3,0(r4)
100096b8:	25c00044 	addi	r23,r4,1
100096bc:	01000044 	movi	r4,1
100096c0:	1011883a 	mov	r8,r2
100096c4:	2807883a 	mov	r3,r5
100096c8:	31003d26 	beq	r6,r4,100097c0 <_dtoa_r+0x918>
100096cc:	000d883a 	mov	r6,zero
100096d0:	01d00934 	movhi	r7,16420
100096d4:	1009883a 	mov	r4,r2
100096d8:	00055800 	call	10005580 <__muldf3>
100096dc:	1009883a 	mov	r4,r2
100096e0:	180b883a 	mov	r5,r3
100096e4:	000d883a 	mov	r6,zero
100096e8:	000f883a 	mov	r7,zero
100096ec:	1027883a 	mov	r19,r2
100096f0:	182b883a 	mov	r21,r3
100096f4:	000533c0 	call	1000533c <__eqdf2>
100096f8:	103f9926 	beq	r2,zero,10009560 <__alt_data_end+0xf8009560>
100096fc:	d8c00617 	ldw	r3,24(sp)
10009700:	d9000717 	ldw	r4,28(sp)
10009704:	b825883a 	mov	r18,r23
10009708:	18bfffc4 	addi	r2,r3,-1
1000970c:	20ad883a 	add	r22,r4,r2
10009710:	dc000315 	stw	r16,12(sp)
10009714:	00000a06 	br	10009740 <_dtoa_r+0x898>
10009718:	00055800 	call	10005580 <__muldf3>
1000971c:	1009883a 	mov	r4,r2
10009720:	180b883a 	mov	r5,r3
10009724:	000d883a 	mov	r6,zero
10009728:	000f883a 	mov	r7,zero
1000972c:	1027883a 	mov	r19,r2
10009730:	182b883a 	mov	r21,r3
10009734:	b825883a 	mov	r18,r23
10009738:	000533c0 	call	1000533c <__eqdf2>
1000973c:	10022626 	beq	r2,zero,10009fd8 <_dtoa_r+0x1130>
10009740:	880d883a 	mov	r6,r17
10009744:	a00f883a 	mov	r7,r20
10009748:	9809883a 	mov	r4,r19
1000974c:	a80b883a 	mov	r5,r21
10009750:	00049bc0 	call	100049bc <__divdf3>
10009754:	180b883a 	mov	r5,r3
10009758:	1009883a 	mov	r4,r2
1000975c:	00066bc0 	call	100066bc <__fixdfsi>
10009760:	1009883a 	mov	r4,r2
10009764:	1021883a 	mov	r16,r2
10009768:	00067440 	call	10006744 <__floatsidf>
1000976c:	1009883a 	mov	r4,r2
10009770:	180b883a 	mov	r5,r3
10009774:	880d883a 	mov	r6,r17
10009778:	a00f883a 	mov	r7,r20
1000977c:	00055800 	call	10005580 <__muldf3>
10009780:	9809883a 	mov	r4,r19
10009784:	a80b883a 	mov	r5,r21
10009788:	100d883a 	mov	r6,r2
1000978c:	180f883a 	mov	r7,r3
10009790:	0005dec0 	call	10005dec <__subdf3>
10009794:	82000c04 	addi	r8,r16,48
10009798:	92000005 	stb	r8,0(r18)
1000979c:	1009883a 	mov	r4,r2
100097a0:	180b883a 	mov	r5,r3
100097a4:	000d883a 	mov	r6,zero
100097a8:	01d00934 	movhi	r7,16420
100097ac:	1011883a 	mov	r8,r2
100097b0:	bdc00044 	addi	r23,r23,1
100097b4:	95bfd81e 	bne	r18,r22,10009718 <__alt_data_end+0xf8009718>
100097b8:	802d883a 	mov	r22,r16
100097bc:	dc000317 	ldw	r16,12(sp)
100097c0:	4009883a 	mov	r4,r8
100097c4:	180b883a 	mov	r5,r3
100097c8:	400d883a 	mov	r6,r8
100097cc:	180f883a 	mov	r7,r3
100097d0:	00041200 	call	10004120 <__adddf3>
100097d4:	8809883a 	mov	r4,r17
100097d8:	a00b883a 	mov	r5,r20
100097dc:	100d883a 	mov	r6,r2
100097e0:	180f883a 	mov	r7,r3
100097e4:	1027883a 	mov	r19,r2
100097e8:	1825883a 	mov	r18,r3
100097ec:	00054a00 	call	100054a0 <__ledf2>
100097f0:	10000816 	blt	r2,zero,10009814 <_dtoa_r+0x96c>
100097f4:	8809883a 	mov	r4,r17
100097f8:	a00b883a 	mov	r5,r20
100097fc:	980d883a 	mov	r6,r19
10009800:	900f883a 	mov	r7,r18
10009804:	000533c0 	call	1000533c <__eqdf2>
10009808:	103f551e 	bne	r2,zero,10009560 <__alt_data_end+0xf8009560>
1000980c:	b580004c 	andi	r22,r22,1
10009810:	b03f5326 	beq	r22,zero,10009560 <__alt_data_end+0xf8009560>
10009814:	bd7fffc3 	ldbu	r21,-1(r23)
10009818:	b8bfffc4 	addi	r2,r23,-1
1000981c:	1007883a 	mov	r3,r2
10009820:	01400e44 	movi	r5,57
10009824:	d9800717 	ldw	r6,28(sp)
10009828:	00000506 	br	10009840 <_dtoa_r+0x998>
1000982c:	18ffffc4 	addi	r3,r3,-1
10009830:	30825e26 	beq	r6,r2,1000a1ac <_dtoa_r+0x1304>
10009834:	1d400003 	ldbu	r21,0(r3)
10009838:	102f883a 	mov	r23,r2
1000983c:	10bfffc4 	addi	r2,r2,-1
10009840:	a9003fcc 	andi	r4,r21,255
10009844:	2100201c 	xori	r4,r4,128
10009848:	213fe004 	addi	r4,r4,-128
1000984c:	217ff726 	beq	r4,r5,1000982c <__alt_data_end+0xf800982c>
10009850:	aa000044 	addi	r8,r21,1
10009854:	12000005 	stb	r8,0(r2)
10009858:	003f4106 	br	10009560 <__alt_data_end+0xf8009560>
1000985c:	d8c00b17 	ldw	r3,44(sp)
10009860:	18006726 	beq	r3,zero,10009a00 <_dtoa_r+0xb58>
10009864:	d9000317 	ldw	r4,12(sp)
10009868:	00c00044 	movi	r3,1
1000986c:	19016a0e 	bge	r3,r4,10009e18 <_dtoa_r+0xf70>
10009870:	d8800617 	ldw	r2,24(sp)
10009874:	d8c00917 	ldw	r3,36(sp)
10009878:	157fffc4 	addi	r21,r2,-1
1000987c:	1d420716 	blt	r3,r21,1000a09c <_dtoa_r+0x11f4>
10009880:	1d6bc83a 	sub	r21,r3,r21
10009884:	d8800617 	ldw	r2,24(sp)
10009888:	1002c716 	blt	r2,zero,1000a3a8 <_dtoa_r+0x1500>
1000988c:	dd000817 	ldw	r20,32(sp)
10009890:	d8800617 	ldw	r2,24(sp)
10009894:	d9800817 	ldw	r6,32(sp)
10009898:	8009883a 	mov	r4,r16
1000989c:	01400044 	movi	r5,1
100098a0:	308d883a 	add	r6,r6,r2
100098a4:	d9800815 	stw	r6,32(sp)
100098a8:	b0ad883a 	add	r22,r22,r2
100098ac:	000c30c0 	call	1000c30c <__i2b>
100098b0:	1023883a 	mov	r17,r2
100098b4:	a0000826 	beq	r20,zero,100098d8 <_dtoa_r+0xa30>
100098b8:	0580070e 	bge	zero,r22,100098d8 <_dtoa_r+0xa30>
100098bc:	b005883a 	mov	r2,r22
100098c0:	a5812016 	blt	r20,r22,10009d44 <_dtoa_r+0xe9c>
100098c4:	d8c00817 	ldw	r3,32(sp)
100098c8:	a0a9c83a 	sub	r20,r20,r2
100098cc:	b0adc83a 	sub	r22,r22,r2
100098d0:	1887c83a 	sub	r3,r3,r2
100098d4:	d8c00815 	stw	r3,32(sp)
100098d8:	d9000917 	ldw	r4,36(sp)
100098dc:	0100140e 	bge	zero,r4,10009930 <_dtoa_r+0xa88>
100098e0:	d9800b17 	ldw	r6,44(sp)
100098e4:	3001e526 	beq	r6,zero,1000a07c <_dtoa_r+0x11d4>
100098e8:	05400e0e 	bge	zero,r21,10009924 <_dtoa_r+0xa7c>
100098ec:	880b883a 	mov	r5,r17
100098f0:	8009883a 	mov	r4,r16
100098f4:	a80d883a 	mov	r6,r21
100098f8:	000c5d80 	call	1000c5d8 <__pow5mult>
100098fc:	e00d883a 	mov	r6,fp
10009900:	8009883a 	mov	r4,r16
10009904:	100b883a 	mov	r5,r2
10009908:	1023883a 	mov	r17,r2
1000990c:	000c3480 	call	1000c348 <__multiply>
10009910:	102f883a 	mov	r23,r2
10009914:	e00b883a 	mov	r5,fp
10009918:	8009883a 	mov	r4,r16
1000991c:	000bf8c0 	call	1000bf8c <_Bfree>
10009920:	b839883a 	mov	fp,r23
10009924:	d8800917 	ldw	r2,36(sp)
10009928:	154dc83a 	sub	r6,r2,r21
1000992c:	3001281e 	bne	r6,zero,10009dd0 <_dtoa_r+0xf28>
10009930:	05c00044 	movi	r23,1
10009934:	8009883a 	mov	r4,r16
10009938:	b80b883a 	mov	r5,r23
1000993c:	000c30c0 	call	1000c30c <__i2b>
10009940:	d8c00a17 	ldw	r3,40(sp)
10009944:	102b883a 	mov	r21,r2
10009948:	00c0310e 	bge	zero,r3,10009a10 <_dtoa_r+0xb68>
1000994c:	8009883a 	mov	r4,r16
10009950:	100b883a 	mov	r5,r2
10009954:	180d883a 	mov	r6,r3
10009958:	000c5d80 	call	1000c5d8 <__pow5mult>
1000995c:	d9000317 	ldw	r4,12(sp)
10009960:	102b883a 	mov	r21,r2
10009964:	b9011f0e 	bge	r23,r4,10009de4 <_dtoa_r+0xf3c>
10009968:	0027883a 	mov	r19,zero
1000996c:	a8800417 	ldw	r2,16(r21)
10009970:	10800104 	addi	r2,r2,4
10009974:	1085883a 	add	r2,r2,r2
10009978:	1085883a 	add	r2,r2,r2
1000997c:	a885883a 	add	r2,r21,r2
10009980:	11000017 	ldw	r4,0(r2)
10009984:	000c1f40 	call	1000c1f4 <__hi0bits>
10009988:	00c00804 	movi	r3,32
1000998c:	1885c83a 	sub	r2,r3,r2
10009990:	00002506 	br	10009a28 <_dtoa_r+0xb80>
10009994:	01800044 	movi	r6,1
10009998:	d9800c15 	stw	r6,48(sp)
1000999c:	003dec06 	br	10009150 <__alt_data_end+0xf8009150>
100099a0:	d8c00817 	ldw	r3,32(sp)
100099a4:	d9000517 	ldw	r4,20(sp)
100099a8:	d8000a15 	stw	zero,40(sp)
100099ac:	1907c83a 	sub	r3,r3,r4
100099b0:	010dc83a 	sub	r6,zero,r4
100099b4:	d8c00815 	stw	r3,32(sp)
100099b8:	d9800915 	stw	r6,36(sp)
100099bc:	003ded06 	br	10009174 <__alt_data_end+0xf8009174>
100099c0:	05adc83a 	sub	r22,zero,r22
100099c4:	dd800815 	stw	r22,32(sp)
100099c8:	002d883a 	mov	r22,zero
100099cc:	003de406 	br	10009160 <__alt_data_end+0xf8009160>
100099d0:	d9000517 	ldw	r4,20(sp)
100099d4:	00067440 	call	10006744 <__floatsidf>
100099d8:	1009883a 	mov	r4,r2
100099dc:	180b883a 	mov	r5,r3
100099e0:	b00d883a 	mov	r6,r22
100099e4:	a80f883a 	mov	r7,r21
100099e8:	000533c0 	call	1000533c <__eqdf2>
100099ec:	103dc726 	beq	r2,zero,1000910c <__alt_data_end+0xf800910c>
100099f0:	d8800517 	ldw	r2,20(sp)
100099f4:	10bfffc4 	addi	r2,r2,-1
100099f8:	d8800515 	stw	r2,20(sp)
100099fc:	003dc306 	br	1000910c <__alt_data_end+0xf800910c>
10009a00:	dd400917 	ldw	r21,36(sp)
10009a04:	dd000817 	ldw	r20,32(sp)
10009a08:	0023883a 	mov	r17,zero
10009a0c:	003fa906 	br	100098b4 <__alt_data_end+0xf80098b4>
10009a10:	d9800317 	ldw	r6,12(sp)
10009a14:	b981670e 	bge	r23,r6,10009fb4 <_dtoa_r+0x110c>
10009a18:	0027883a 	mov	r19,zero
10009a1c:	d8c00a17 	ldw	r3,40(sp)
10009a20:	183fd21e 	bne	r3,zero,1000996c <__alt_data_end+0xf800996c>
10009a24:	00800044 	movi	r2,1
10009a28:	1585883a 	add	r2,r2,r22
10009a2c:	108007cc 	andi	r2,r2,31
10009a30:	10005f26 	beq	r2,zero,10009bb0 <_dtoa_r+0xd08>
10009a34:	00c00804 	movi	r3,32
10009a38:	1887c83a 	sub	r3,r3,r2
10009a3c:	01000104 	movi	r4,4
10009a40:	20c2dd0e 	bge	r4,r3,1000a5b8 <_dtoa_r+0x1710>
10009a44:	d9000817 	ldw	r4,32(sp)
10009a48:	00c00704 	movi	r3,28
10009a4c:	1885c83a 	sub	r2,r3,r2
10009a50:	2089883a 	add	r4,r4,r2
10009a54:	d9000815 	stw	r4,32(sp)
10009a58:	a0a9883a 	add	r20,r20,r2
10009a5c:	b0ad883a 	add	r22,r22,r2
10009a60:	d8800817 	ldw	r2,32(sp)
10009a64:	0080050e 	bge	zero,r2,10009a7c <_dtoa_r+0xbd4>
10009a68:	e00b883a 	mov	r5,fp
10009a6c:	8009883a 	mov	r4,r16
10009a70:	100d883a 	mov	r6,r2
10009a74:	000c7180 	call	1000c718 <__lshift>
10009a78:	1039883a 	mov	fp,r2
10009a7c:	0580050e 	bge	zero,r22,10009a94 <_dtoa_r+0xbec>
10009a80:	a80b883a 	mov	r5,r21
10009a84:	8009883a 	mov	r4,r16
10009a88:	b00d883a 	mov	r6,r22
10009a8c:	000c7180 	call	1000c718 <__lshift>
10009a90:	102b883a 	mov	r21,r2
10009a94:	d8c00c17 	ldw	r3,48(sp)
10009a98:	1801161e 	bne	r3,zero,10009ef4 <_dtoa_r+0x104c>
10009a9c:	d8c00617 	ldw	r3,24(sp)
10009aa0:	00c12d0e 	bge	zero,r3,10009f58 <_dtoa_r+0x10b0>
10009aa4:	d8c00b17 	ldw	r3,44(sp)
10009aa8:	1800571e 	bne	r3,zero,10009c08 <_dtoa_r+0xd60>
10009aac:	dc800717 	ldw	r18,28(sp)
10009ab0:	dcc00617 	ldw	r19,24(sp)
10009ab4:	9029883a 	mov	r20,r18
10009ab8:	00000206 	br	10009ac4 <_dtoa_r+0xc1c>
10009abc:	000bfb40 	call	1000bfb4 <__multadd>
10009ac0:	1039883a 	mov	fp,r2
10009ac4:	e009883a 	mov	r4,fp
10009ac8:	a80b883a 	mov	r5,r21
10009acc:	0008c800 	call	10008c80 <quorem>
10009ad0:	10800c04 	addi	r2,r2,48
10009ad4:	90800005 	stb	r2,0(r18)
10009ad8:	94800044 	addi	r18,r18,1
10009adc:	9507c83a 	sub	r3,r18,r20
10009ae0:	8009883a 	mov	r4,r16
10009ae4:	e00b883a 	mov	r5,fp
10009ae8:	01800284 	movi	r6,10
10009aec:	000f883a 	mov	r7,zero
10009af0:	1cfff216 	blt	r3,r19,10009abc <__alt_data_end+0xf8009abc>
10009af4:	1011883a 	mov	r8,r2
10009af8:	d8800617 	ldw	r2,24(sp)
10009afc:	00822e0e 	bge	zero,r2,1000a3b8 <_dtoa_r+0x1510>
10009b00:	d9000717 	ldw	r4,28(sp)
10009b04:	0025883a 	mov	r18,zero
10009b08:	20af883a 	add	r23,r4,r2
10009b0c:	e00b883a 	mov	r5,fp
10009b10:	01800044 	movi	r6,1
10009b14:	8009883a 	mov	r4,r16
10009b18:	da001715 	stw	r8,92(sp)
10009b1c:	000c7180 	call	1000c718 <__lshift>
10009b20:	1009883a 	mov	r4,r2
10009b24:	a80b883a 	mov	r5,r21
10009b28:	1039883a 	mov	fp,r2
10009b2c:	000c8600 	call	1000c860 <__mcmp>
10009b30:	da001717 	ldw	r8,92(sp)
10009b34:	00816e0e 	bge	zero,r2,1000a0f0 <_dtoa_r+0x1248>
10009b38:	b93fffc3 	ldbu	r4,-1(r23)
10009b3c:	b8bfffc4 	addi	r2,r23,-1
10009b40:	1007883a 	mov	r3,r2
10009b44:	01800e44 	movi	r6,57
10009b48:	d9c00717 	ldw	r7,28(sp)
10009b4c:	00000506 	br	10009b64 <_dtoa_r+0xcbc>
10009b50:	18ffffc4 	addi	r3,r3,-1
10009b54:	38811926 	beq	r7,r2,10009fbc <_dtoa_r+0x1114>
10009b58:	19000003 	ldbu	r4,0(r3)
10009b5c:	102f883a 	mov	r23,r2
10009b60:	10bfffc4 	addi	r2,r2,-1
10009b64:	21403fcc 	andi	r5,r4,255
10009b68:	2940201c 	xori	r5,r5,128
10009b6c:	297fe004 	addi	r5,r5,-128
10009b70:	29bff726 	beq	r5,r6,10009b50 <__alt_data_end+0xf8009b50>
10009b74:	21000044 	addi	r4,r4,1
10009b78:	11000005 	stb	r4,0(r2)
10009b7c:	8009883a 	mov	r4,r16
10009b80:	a80b883a 	mov	r5,r21
10009b84:	000bf8c0 	call	1000bf8c <_Bfree>
10009b88:	883e7526 	beq	r17,zero,10009560 <__alt_data_end+0xf8009560>
10009b8c:	90000426 	beq	r18,zero,10009ba0 <_dtoa_r+0xcf8>
10009b90:	94400326 	beq	r18,r17,10009ba0 <_dtoa_r+0xcf8>
10009b94:	8009883a 	mov	r4,r16
10009b98:	900b883a 	mov	r5,r18
10009b9c:	000bf8c0 	call	1000bf8c <_Bfree>
10009ba0:	8009883a 	mov	r4,r16
10009ba4:	880b883a 	mov	r5,r17
10009ba8:	000bf8c0 	call	1000bf8c <_Bfree>
10009bac:	003e6c06 	br	10009560 <__alt_data_end+0xf8009560>
10009bb0:	00800704 	movi	r2,28
10009bb4:	d9800817 	ldw	r6,32(sp)
10009bb8:	a0a9883a 	add	r20,r20,r2
10009bbc:	b0ad883a 	add	r22,r22,r2
10009bc0:	308d883a 	add	r6,r6,r2
10009bc4:	d9800815 	stw	r6,32(sp)
10009bc8:	003fa506 	br	10009a60 <__alt_data_end+0xf8009a60>
10009bcc:	013efb84 	movi	r4,-1042
10009bd0:	246bc83a 	sub	r21,r4,r17
10009bd4:	9548983a 	sll	r4,r18,r21
10009bd8:	003d1806 	br	1000903c <__alt_data_end+0xf800903c>
10009bdc:	d8000c15 	stw	zero,48(sp)
10009be0:	003d5b06 	br	10009150 <__alt_data_end+0xf8009150>
10009be4:	880b883a 	mov	r5,r17
10009be8:	8009883a 	mov	r4,r16
10009bec:	01800284 	movi	r6,10
10009bf0:	000f883a 	mov	r7,zero
10009bf4:	000bfb40 	call	1000bfb4 <__multadd>
10009bf8:	1023883a 	mov	r17,r2
10009bfc:	d8800d17 	ldw	r2,52(sp)
10009c00:	0082550e 	bge	zero,r2,1000a558 <_dtoa_r+0x16b0>
10009c04:	d8800615 	stw	r2,24(sp)
10009c08:	0500050e 	bge	zero,r20,10009c20 <_dtoa_r+0xd78>
10009c0c:	880b883a 	mov	r5,r17
10009c10:	8009883a 	mov	r4,r16
10009c14:	a00d883a 	mov	r6,r20
10009c18:	000c7180 	call	1000c718 <__lshift>
10009c1c:	1023883a 	mov	r17,r2
10009c20:	98016a1e 	bne	r19,zero,1000a1cc <_dtoa_r+0x1324>
10009c24:	8829883a 	mov	r20,r17
10009c28:	d9000617 	ldw	r4,24(sp)
10009c2c:	dcc00717 	ldw	r19,28(sp)
10009c30:	9480004c 	andi	r18,r18,1
10009c34:	20bfffc4 	addi	r2,r4,-1
10009c38:	9885883a 	add	r2,r19,r2
10009c3c:	d8800415 	stw	r2,16(sp)
10009c40:	dc800615 	stw	r18,24(sp)
10009c44:	e009883a 	mov	r4,fp
10009c48:	a80b883a 	mov	r5,r21
10009c4c:	0008c800 	call	10008c80 <quorem>
10009c50:	e009883a 	mov	r4,fp
10009c54:	880b883a 	mov	r5,r17
10009c58:	102f883a 	mov	r23,r2
10009c5c:	000c8600 	call	1000c860 <__mcmp>
10009c60:	8009883a 	mov	r4,r16
10009c64:	a80b883a 	mov	r5,r21
10009c68:	a00d883a 	mov	r6,r20
10009c6c:	102d883a 	mov	r22,r2
10009c70:	000c8c00 	call	1000c8c0 <__mdiff>
10009c74:	1007883a 	mov	r3,r2
10009c78:	10800317 	ldw	r2,12(r2)
10009c7c:	bc800c04 	addi	r18,r23,48
10009c80:	1000971e 	bne	r2,zero,10009ee0 <_dtoa_r+0x1038>
10009c84:	180b883a 	mov	r5,r3
10009c88:	e009883a 	mov	r4,fp
10009c8c:	d8c01515 	stw	r3,84(sp)
10009c90:	000c8600 	call	1000c860 <__mcmp>
10009c94:	d8c01517 	ldw	r3,84(sp)
10009c98:	8009883a 	mov	r4,r16
10009c9c:	d8801515 	stw	r2,84(sp)
10009ca0:	180b883a 	mov	r5,r3
10009ca4:	000bf8c0 	call	1000bf8c <_Bfree>
10009ca8:	d8801517 	ldw	r2,84(sp)
10009cac:	1000041e 	bne	r2,zero,10009cc0 <_dtoa_r+0xe18>
10009cb0:	d9800317 	ldw	r6,12(sp)
10009cb4:	3000021e 	bne	r6,zero,10009cc0 <_dtoa_r+0xe18>
10009cb8:	d8c00617 	ldw	r3,24(sp)
10009cbc:	18007626 	beq	r3,zero,10009e98 <_dtoa_r+0xff0>
10009cc0:	b0005b16 	blt	r22,zero,10009e30 <_dtoa_r+0xf88>
10009cc4:	b000041e 	bne	r22,zero,10009cd8 <_dtoa_r+0xe30>
10009cc8:	d9000317 	ldw	r4,12(sp)
10009ccc:	2000021e 	bne	r4,zero,10009cd8 <_dtoa_r+0xe30>
10009cd0:	d8c00617 	ldw	r3,24(sp)
10009cd4:	18005626 	beq	r3,zero,10009e30 <_dtoa_r+0xf88>
10009cd8:	00814d16 	blt	zero,r2,1000a210 <_dtoa_r+0x1368>
10009cdc:	d8c00417 	ldw	r3,16(sp)
10009ce0:	9d800044 	addi	r22,r19,1
10009ce4:	9c800005 	stb	r18,0(r19)
10009ce8:	b02f883a 	mov	r23,r22
10009cec:	98c14c26 	beq	r19,r3,1000a220 <_dtoa_r+0x1378>
10009cf0:	e00b883a 	mov	r5,fp
10009cf4:	8009883a 	mov	r4,r16
10009cf8:	01800284 	movi	r6,10
10009cfc:	000f883a 	mov	r7,zero
10009d00:	000bfb40 	call	1000bfb4 <__multadd>
10009d04:	1039883a 	mov	fp,r2
10009d08:	8d006d26 	beq	r17,r20,10009ec0 <_dtoa_r+0x1018>
10009d0c:	880b883a 	mov	r5,r17
10009d10:	01800284 	movi	r6,10
10009d14:	000f883a 	mov	r7,zero
10009d18:	8009883a 	mov	r4,r16
10009d1c:	000bfb40 	call	1000bfb4 <__multadd>
10009d20:	a00b883a 	mov	r5,r20
10009d24:	8009883a 	mov	r4,r16
10009d28:	01800284 	movi	r6,10
10009d2c:	000f883a 	mov	r7,zero
10009d30:	1023883a 	mov	r17,r2
10009d34:	000bfb40 	call	1000bfb4 <__multadd>
10009d38:	1029883a 	mov	r20,r2
10009d3c:	b027883a 	mov	r19,r22
10009d40:	003fc006 	br	10009c44 <__alt_data_end+0xf8009c44>
10009d44:	a005883a 	mov	r2,r20
10009d48:	003ede06 	br	100098c4 <__alt_data_end+0xf80098c4>
10009d4c:	01000044 	movi	r4,1
10009d50:	d9000b15 	stw	r4,44(sp)
10009d54:	d9802217 	ldw	r6,136(sp)
10009d58:	0180dc0e 	bge	zero,r6,1000a0cc <_dtoa_r+0x1224>
10009d5c:	3023883a 	mov	r17,r6
10009d60:	d9800d15 	stw	r6,52(sp)
10009d64:	d9800615 	stw	r6,24(sp)
10009d68:	003d1e06 	br	100091e4 <__alt_data_end+0xf80091e4>
10009d6c:	d8800617 	ldw	r2,24(sp)
10009d70:	00be3716 	blt	zero,r2,10009650 <__alt_data_end+0xf8009650>
10009d74:	1000be1e 	bne	r2,zero,1000a070 <_dtoa_r+0x11c8>
10009d78:	8809883a 	mov	r4,r17
10009d7c:	a00b883a 	mov	r5,r20
10009d80:	000d883a 	mov	r6,zero
10009d84:	01d00534 	movhi	r7,16404
10009d88:	00055800 	call	10005580 <__muldf3>
10009d8c:	1009883a 	mov	r4,r2
10009d90:	180b883a 	mov	r5,r3
10009d94:	900d883a 	mov	r6,r18
10009d98:	980f883a 	mov	r7,r19
10009d9c:	00053c00 	call	100053c0 <__gedf2>
10009da0:	002b883a 	mov	r21,zero
10009da4:	0023883a 	mov	r17,zero
10009da8:	10007a16 	blt	r2,zero,10009f94 <_dtoa_r+0x10ec>
10009dac:	d9002217 	ldw	r4,136(sp)
10009db0:	ddc00717 	ldw	r23,28(sp)
10009db4:	0108303a 	nor	r4,zero,r4
10009db8:	d9000515 	stw	r4,20(sp)
10009dbc:	8009883a 	mov	r4,r16
10009dc0:	a80b883a 	mov	r5,r21
10009dc4:	000bf8c0 	call	1000bf8c <_Bfree>
10009dc8:	883f751e 	bne	r17,zero,10009ba0 <__alt_data_end+0xf8009ba0>
10009dcc:	003de406 	br	10009560 <__alt_data_end+0xf8009560>
10009dd0:	e00b883a 	mov	r5,fp
10009dd4:	8009883a 	mov	r4,r16
10009dd8:	000c5d80 	call	1000c5d8 <__pow5mult>
10009ddc:	1039883a 	mov	fp,r2
10009de0:	003ed306 	br	10009930 <__alt_data_end+0xf8009930>
10009de4:	903ee01e 	bne	r18,zero,10009968 <__alt_data_end+0xf8009968>
10009de8:	00800434 	movhi	r2,16
10009dec:	10bfffc4 	addi	r2,r2,-1
10009df0:	9884703a 	and	r2,r19,r2
10009df4:	103f081e 	bne	r2,zero,10009a18 <__alt_data_end+0xf8009a18>
10009df8:	9cdffc2c 	andhi	r19,r19,32752
10009dfc:	983f0626 	beq	r19,zero,10009a18 <__alt_data_end+0xf8009a18>
10009e00:	d8800817 	ldw	r2,32(sp)
10009e04:	b5800044 	addi	r22,r22,1
10009e08:	04c00044 	movi	r19,1
10009e0c:	10800044 	addi	r2,r2,1
10009e10:	d8800815 	stw	r2,32(sp)
10009e14:	003f0106 	br	10009a1c <__alt_data_end+0xf8009a1c>
10009e18:	d9800f17 	ldw	r6,60(sp)
10009e1c:	30016826 	beq	r6,zero,1000a3c0 <_dtoa_r+0x1518>
10009e20:	10810cc4 	addi	r2,r2,1075
10009e24:	dd400917 	ldw	r21,36(sp)
10009e28:	dd000817 	ldw	r20,32(sp)
10009e2c:	003e9906 	br	10009894 <__alt_data_end+0xf8009894>
10009e30:	9011883a 	mov	r8,r18
10009e34:	4007883a 	mov	r3,r8
10009e38:	e02d883a 	mov	r22,fp
10009e3c:	0080100e 	bge	zero,r2,10009e80 <_dtoa_r+0xfd8>
10009e40:	01800044 	movi	r6,1
10009e44:	8009883a 	mov	r4,r16
10009e48:	e00b883a 	mov	r5,fp
10009e4c:	da001515 	stw	r8,84(sp)
10009e50:	da001715 	stw	r8,92(sp)
10009e54:	000c7180 	call	1000c718 <__lshift>
10009e58:	1009883a 	mov	r4,r2
10009e5c:	a80b883a 	mov	r5,r21
10009e60:	102d883a 	mov	r22,r2
10009e64:	000c8600 	call	1000c860 <__mcmp>
10009e68:	d8c01517 	ldw	r3,84(sp)
10009e6c:	da001717 	ldw	r8,92(sp)
10009e70:	0081a50e 	bge	zero,r2,1000a508 <_dtoa_r+0x1660>
10009e74:	00800e44 	movi	r2,57
10009e78:	40817b26 	beq	r8,r2,1000a468 <_dtoa_r+0x15c0>
10009e7c:	40c00044 	addi	r3,r8,1
10009e80:	8825883a 	mov	r18,r17
10009e84:	9dc00044 	addi	r23,r19,1
10009e88:	98c00005 	stb	r3,0(r19)
10009e8c:	a023883a 	mov	r17,r20
10009e90:	b039883a 	mov	fp,r22
10009e94:	003f3906 	br	10009b7c <__alt_data_end+0xf8009b7c>
10009e98:	00800e44 	movi	r2,57
10009e9c:	9011883a 	mov	r8,r18
10009ea0:	90817226 	beq	r18,r2,1000a46c <_dtoa_r+0x15c4>
10009ea4:	0580010e 	bge	zero,r22,10009eac <_dtoa_r+0x1004>
10009ea8:	ba000c44 	addi	r8,r23,49
10009eac:	8825883a 	mov	r18,r17
10009eb0:	9dc00044 	addi	r23,r19,1
10009eb4:	9a000005 	stb	r8,0(r19)
10009eb8:	a023883a 	mov	r17,r20
10009ebc:	003f2f06 	br	10009b7c <__alt_data_end+0xf8009b7c>
10009ec0:	880b883a 	mov	r5,r17
10009ec4:	8009883a 	mov	r4,r16
10009ec8:	01800284 	movi	r6,10
10009ecc:	000f883a 	mov	r7,zero
10009ed0:	000bfb40 	call	1000bfb4 <__multadd>
10009ed4:	1023883a 	mov	r17,r2
10009ed8:	1029883a 	mov	r20,r2
10009edc:	003f9706 	br	10009d3c <__alt_data_end+0xf8009d3c>
10009ee0:	8009883a 	mov	r4,r16
10009ee4:	180b883a 	mov	r5,r3
10009ee8:	000bf8c0 	call	1000bf8c <_Bfree>
10009eec:	00800044 	movi	r2,1
10009ef0:	003f7306 	br	10009cc0 <__alt_data_end+0xf8009cc0>
10009ef4:	e009883a 	mov	r4,fp
10009ef8:	a80b883a 	mov	r5,r21
10009efc:	000c8600 	call	1000c860 <__mcmp>
10009f00:	103ee60e 	bge	r2,zero,10009a9c <__alt_data_end+0xf8009a9c>
10009f04:	8009883a 	mov	r4,r16
10009f08:	e00b883a 	mov	r5,fp
10009f0c:	01800284 	movi	r6,10
10009f10:	000f883a 	mov	r7,zero
10009f14:	000bfb40 	call	1000bfb4 <__multadd>
10009f18:	d9000517 	ldw	r4,20(sp)
10009f1c:	d9800b17 	ldw	r6,44(sp)
10009f20:	1039883a 	mov	fp,r2
10009f24:	213fffc4 	addi	r4,r4,-1
10009f28:	d9000515 	stw	r4,20(sp)
10009f2c:	303f2d1e 	bne	r6,zero,10009be4 <__alt_data_end+0xf8009be4>
10009f30:	d9000d17 	ldw	r4,52(sp)
10009f34:	0101780e 	bge	zero,r4,1000a518 <_dtoa_r+0x1670>
10009f38:	d9000615 	stw	r4,24(sp)
10009f3c:	003edb06 	br	10009aac <__alt_data_end+0xf8009aac>
10009f40:	00800084 	movi	r2,2
10009f44:	30818e1e 	bne	r6,r2,1000a580 <_dtoa_r+0x16d8>
10009f48:	d8000b15 	stw	zero,44(sp)
10009f4c:	003f8106 	br	10009d54 <__alt_data_end+0xf8009d54>
10009f50:	d8800717 	ldw	r2,28(sp)
10009f54:	003c0306 	br	10008f64 <__alt_data_end+0xf8008f64>
10009f58:	d9000317 	ldw	r4,12(sp)
10009f5c:	00800084 	movi	r2,2
10009f60:	113ed00e 	bge	r2,r4,10009aa4 <__alt_data_end+0xf8009aa4>
10009f64:	d8c00617 	ldw	r3,24(sp)
10009f68:	183f901e 	bne	r3,zero,10009dac <__alt_data_end+0xf8009dac>
10009f6c:	a80b883a 	mov	r5,r21
10009f70:	8009883a 	mov	r4,r16
10009f74:	01800144 	movi	r6,5
10009f78:	000f883a 	mov	r7,zero
10009f7c:	000bfb40 	call	1000bfb4 <__multadd>
10009f80:	e009883a 	mov	r4,fp
10009f84:	100b883a 	mov	r5,r2
10009f88:	102b883a 	mov	r21,r2
10009f8c:	000c8600 	call	1000c860 <__mcmp>
10009f90:	00bf860e 	bge	zero,r2,10009dac <__alt_data_end+0xf8009dac>
10009f94:	d9800717 	ldw	r6,28(sp)
10009f98:	00800c44 	movi	r2,49
10009f9c:	30800005 	stb	r2,0(r6)
10009fa0:	d8800517 	ldw	r2,20(sp)
10009fa4:	35c00044 	addi	r23,r6,1
10009fa8:	10800044 	addi	r2,r2,1
10009fac:	d8800515 	stw	r2,20(sp)
10009fb0:	003f8206 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009fb4:	903e981e 	bne	r18,zero,10009a18 <__alt_data_end+0xf8009a18>
10009fb8:	003f8b06 	br	10009de8 <__alt_data_end+0xf8009de8>
10009fbc:	d9800517 	ldw	r6,20(sp)
10009fc0:	d8c00717 	ldw	r3,28(sp)
10009fc4:	00800c44 	movi	r2,49
10009fc8:	31800044 	addi	r6,r6,1
10009fcc:	d9800515 	stw	r6,20(sp)
10009fd0:	18800005 	stb	r2,0(r3)
10009fd4:	003ee906 	br	10009b7c <__alt_data_end+0xf8009b7c>
10009fd8:	dc000317 	ldw	r16,12(sp)
10009fdc:	003d6006 	br	10009560 <__alt_data_end+0xf8009560>
10009fe0:	8809883a 	mov	r4,r17
10009fe4:	00067440 	call	10006744 <__floatsidf>
10009fe8:	a009883a 	mov	r4,r20
10009fec:	a80b883a 	mov	r5,r21
10009ff0:	100d883a 	mov	r6,r2
10009ff4:	180f883a 	mov	r7,r3
10009ff8:	00055800 	call	10005580 <__muldf3>
10009ffc:	1009883a 	mov	r4,r2
1000a000:	180b883a 	mov	r5,r3
1000a004:	000d883a 	mov	r6,zero
1000a008:	01d00734 	movhi	r7,16412
1000a00c:	00041200 	call	10004120 <__adddf3>
1000a010:	1023883a 	mov	r17,r2
1000a014:	00bf3034 	movhi	r2,64704
1000a018:	1885883a 	add	r2,r3,r2
1000a01c:	d8800e15 	stw	r2,56(sp)
1000a020:	a009883a 	mov	r4,r20
1000a024:	a80b883a 	mov	r5,r21
1000a028:	000d883a 	mov	r6,zero
1000a02c:	01d00534 	movhi	r7,16404
1000a030:	0005dec0 	call	10005dec <__subdf3>
1000a034:	d9c00e17 	ldw	r7,56(sp)
1000a038:	1009883a 	mov	r4,r2
1000a03c:	180b883a 	mov	r5,r3
1000a040:	880d883a 	mov	r6,r17
1000a044:	102b883a 	mov	r21,r2
1000a048:	1829883a 	mov	r20,r3
1000a04c:	00053c00 	call	100053c0 <__gedf2>
1000a050:	00807716 	blt	zero,r2,1000a230 <_dtoa_r+0x1388>
1000a054:	d8800e17 	ldw	r2,56(sp)
1000a058:	a809883a 	mov	r4,r21
1000a05c:	a00b883a 	mov	r5,r20
1000a060:	11e0003c 	xorhi	r7,r2,32768
1000a064:	880d883a 	mov	r6,r17
1000a068:	00054a00 	call	100054a0 <__ledf2>
1000a06c:	103d6b0e 	bge	r2,zero,1000961c <__alt_data_end+0xf800961c>
1000a070:	002b883a 	mov	r21,zero
1000a074:	0023883a 	mov	r17,zero
1000a078:	003f4c06 	br	10009dac <__alt_data_end+0xf8009dac>
1000a07c:	d9800917 	ldw	r6,36(sp)
1000a080:	e00b883a 	mov	r5,fp
1000a084:	8009883a 	mov	r4,r16
1000a088:	000c5d80 	call	1000c5d8 <__pow5mult>
1000a08c:	1039883a 	mov	fp,r2
1000a090:	003e2706 	br	10009930 <__alt_data_end+0xf8009930>
1000a094:	d8000b15 	stw	zero,44(sp)
1000a098:	003c4906 	br	100091c0 <__alt_data_end+0xf80091c0>
1000a09c:	d9000917 	ldw	r4,36(sp)
1000a0a0:	d9800a17 	ldw	r6,40(sp)
1000a0a4:	dd400915 	stw	r21,36(sp)
1000a0a8:	a905c83a 	sub	r2,r21,r4
1000a0ac:	308d883a 	add	r6,r6,r2
1000a0b0:	d9800a15 	stw	r6,40(sp)
1000a0b4:	002b883a 	mov	r21,zero
1000a0b8:	003df206 	br	10009884 <__alt_data_end+0xf8009884>
1000a0bc:	dc800e15 	stw	r18,56(sp)
1000a0c0:	982b883a 	mov	r21,r19
1000a0c4:	04400084 	movi	r17,2
1000a0c8:	003c7406 	br	1000929c <__alt_data_end+0xf800929c>
1000a0cc:	04400044 	movi	r17,1
1000a0d0:	dc400d15 	stw	r17,52(sp)
1000a0d4:	dc400615 	stw	r17,24(sp)
1000a0d8:	dc402215 	stw	r17,136(sp)
1000a0dc:	80001115 	stw	zero,68(r16)
1000a0e0:	000b883a 	mov	r5,zero
1000a0e4:	003c4a06 	br	10009210 <__alt_data_end+0xf8009210>
1000a0e8:	3023883a 	mov	r17,r6
1000a0ec:	003ffb06 	br	1000a0dc <__alt_data_end+0xf800a0dc>
1000a0f0:	1000021e 	bne	r2,zero,1000a0fc <_dtoa_r+0x1254>
1000a0f4:	4200004c 	andi	r8,r8,1
1000a0f8:	403e8f1e 	bne	r8,zero,10009b38 <__alt_data_end+0xf8009b38>
1000a0fc:	01000c04 	movi	r4,48
1000a100:	00000106 	br	1000a108 <_dtoa_r+0x1260>
1000a104:	102f883a 	mov	r23,r2
1000a108:	b8bfffc4 	addi	r2,r23,-1
1000a10c:	10c00007 	ldb	r3,0(r2)
1000a110:	193ffc26 	beq	r3,r4,1000a104 <__alt_data_end+0xf800a104>
1000a114:	003e9906 	br	10009b7c <__alt_data_end+0xf8009b7c>
1000a118:	d9000517 	ldw	r4,20(sp)
1000a11c:	012fc83a 	sub	r23,zero,r4
1000a120:	b800ad26 	beq	r23,zero,1000a3d8 <_dtoa_r+0x1530>
1000a124:	b88003cc 	andi	r2,r23,15
1000a128:	100490fa 	slli	r2,r2,3
1000a12c:	00c40074 	movhi	r3,4097
1000a130:	18c9dd04 	addi	r3,r3,10100
1000a134:	1885883a 	add	r2,r3,r2
1000a138:	11800017 	ldw	r6,0(r2)
1000a13c:	11c00117 	ldw	r7,4(r2)
1000a140:	b82fd13a 	srai	r23,r23,4
1000a144:	9009883a 	mov	r4,r18
1000a148:	980b883a 	mov	r5,r19
1000a14c:	00055800 	call	10005580 <__muldf3>
1000a150:	1029883a 	mov	r20,r2
1000a154:	182b883a 	mov	r21,r3
1000a158:	b800f426 	beq	r23,zero,1000a52c <_dtoa_r+0x1684>
1000a15c:	02040074 	movhi	r8,4097
1000a160:	4209d304 	addi	r8,r8,10060
1000a164:	8029883a 	mov	r20,r16
1000a168:	04400084 	movi	r17,2
1000a16c:	4021883a 	mov	r16,r8
1000a170:	b980004c 	andi	r6,r23,1
1000a174:	1009883a 	mov	r4,r2
1000a178:	b82fd07a 	srai	r23,r23,1
1000a17c:	180b883a 	mov	r5,r3
1000a180:	30000426 	beq	r6,zero,1000a194 <_dtoa_r+0x12ec>
1000a184:	81800017 	ldw	r6,0(r16)
1000a188:	81c00117 	ldw	r7,4(r16)
1000a18c:	8c400044 	addi	r17,r17,1
1000a190:	00055800 	call	10005580 <__muldf3>
1000a194:	84000204 	addi	r16,r16,8
1000a198:	b83ff51e 	bne	r23,zero,1000a170 <__alt_data_end+0xf800a170>
1000a19c:	a021883a 	mov	r16,r20
1000a1a0:	182b883a 	mov	r21,r3
1000a1a4:	1029883a 	mov	r20,r2
1000a1a8:	003c5506 	br	10009300 <__alt_data_end+0xf8009300>
1000a1ac:	d9800517 	ldw	r6,20(sp)
1000a1b0:	d9000717 	ldw	r4,28(sp)
1000a1b4:	00c00c04 	movi	r3,48
1000a1b8:	31800044 	addi	r6,r6,1
1000a1bc:	d9800515 	stw	r6,20(sp)
1000a1c0:	20c00005 	stb	r3,0(r4)
1000a1c4:	02000c44 	movi	r8,49
1000a1c8:	003da206 	br	10009854 <__alt_data_end+0xf8009854>
1000a1cc:	89400117 	ldw	r5,4(r17)
1000a1d0:	8009883a 	mov	r4,r16
1000a1d4:	000bee40 	call	1000bee4 <_Balloc>
1000a1d8:	89800417 	ldw	r6,16(r17)
1000a1dc:	11000304 	addi	r4,r2,12
1000a1e0:	89400304 	addi	r5,r17,12
1000a1e4:	31800084 	addi	r6,r6,2
1000a1e8:	318d883a 	add	r6,r6,r6
1000a1ec:	318d883a 	add	r6,r6,r6
1000a1f0:	1027883a 	mov	r19,r2
1000a1f4:	000bc880 	call	1000bc88 <memcpy>
1000a1f8:	8009883a 	mov	r4,r16
1000a1fc:	980b883a 	mov	r5,r19
1000a200:	01800044 	movi	r6,1
1000a204:	000c7180 	call	1000c718 <__lshift>
1000a208:	1029883a 	mov	r20,r2
1000a20c:	003e8606 	br	10009c28 <__alt_data_end+0xf8009c28>
1000a210:	00800e44 	movi	r2,57
1000a214:	90809526 	beq	r18,r2,1000a46c <_dtoa_r+0x15c4>
1000a218:	92000044 	addi	r8,r18,1
1000a21c:	003f2306 	br	10009eac <__alt_data_end+0xf8009eac>
1000a220:	9011883a 	mov	r8,r18
1000a224:	8825883a 	mov	r18,r17
1000a228:	a023883a 	mov	r17,r20
1000a22c:	003e3706 	br	10009b0c <__alt_data_end+0xf8009b0c>
1000a230:	002b883a 	mov	r21,zero
1000a234:	0023883a 	mov	r17,zero
1000a238:	003f5606 	br	10009f94 <__alt_data_end+0xf8009f94>
1000a23c:	51bfffc4 	addi	r6,r10,-1
1000a240:	300490fa 	slli	r2,r6,3
1000a244:	00c40074 	movhi	r3,4097
1000a248:	18c9dd04 	addi	r3,r3,10100
1000a24c:	1885883a 	add	r2,r3,r2
1000a250:	d9c00e17 	ldw	r7,56(sp)
1000a254:	11000017 	ldw	r4,0(r2)
1000a258:	11400117 	ldw	r5,4(r2)
1000a25c:	d8800717 	ldw	r2,28(sp)
1000a260:	d9801015 	stw	r6,64(sp)
1000a264:	880d883a 	mov	r6,r17
1000a268:	da801615 	stw	r10,88(sp)
1000a26c:	15c00044 	addi	r23,r2,1
1000a270:	00055800 	call	10005580 <__muldf3>
1000a274:	a80b883a 	mov	r5,r21
1000a278:	a009883a 	mov	r4,r20
1000a27c:	d8c01115 	stw	r3,68(sp)
1000a280:	d8800e15 	stw	r2,56(sp)
1000a284:	00066bc0 	call	100066bc <__fixdfsi>
1000a288:	1009883a 	mov	r4,r2
1000a28c:	1023883a 	mov	r17,r2
1000a290:	00067440 	call	10006744 <__floatsidf>
1000a294:	a009883a 	mov	r4,r20
1000a298:	a80b883a 	mov	r5,r21
1000a29c:	100d883a 	mov	r6,r2
1000a2a0:	180f883a 	mov	r7,r3
1000a2a4:	0005dec0 	call	10005dec <__subdf3>
1000a2a8:	1813883a 	mov	r9,r3
1000a2ac:	d8c00717 	ldw	r3,28(sp)
1000a2b0:	8c400c04 	addi	r17,r17,48
1000a2b4:	1011883a 	mov	r8,r2
1000a2b8:	1c400005 	stb	r17,0(r3)
1000a2bc:	da801617 	ldw	r10,88(sp)
1000a2c0:	00800044 	movi	r2,1
1000a2c4:	50802326 	beq	r10,r2,1000a354 <_dtoa_r+0x14ac>
1000a2c8:	d8800717 	ldw	r2,28(sp)
1000a2cc:	b82b883a 	mov	r21,r23
1000a2d0:	dc001315 	stw	r16,76(sp)
1000a2d4:	12a9883a 	add	r20,r2,r10
1000a2d8:	4807883a 	mov	r3,r9
1000a2dc:	4005883a 	mov	r2,r8
1000a2e0:	dc801415 	stw	r18,80(sp)
1000a2e4:	000d883a 	mov	r6,zero
1000a2e8:	01d00934 	movhi	r7,16420
1000a2ec:	1009883a 	mov	r4,r2
1000a2f0:	180b883a 	mov	r5,r3
1000a2f4:	00055800 	call	10005580 <__muldf3>
1000a2f8:	180b883a 	mov	r5,r3
1000a2fc:	1009883a 	mov	r4,r2
1000a300:	1821883a 	mov	r16,r3
1000a304:	1025883a 	mov	r18,r2
1000a308:	00066bc0 	call	100066bc <__fixdfsi>
1000a30c:	1009883a 	mov	r4,r2
1000a310:	1023883a 	mov	r17,r2
1000a314:	00067440 	call	10006744 <__floatsidf>
1000a318:	9009883a 	mov	r4,r18
1000a31c:	800b883a 	mov	r5,r16
1000a320:	100d883a 	mov	r6,r2
1000a324:	180f883a 	mov	r7,r3
1000a328:	8c400c04 	addi	r17,r17,48
1000a32c:	0005dec0 	call	10005dec <__subdf3>
1000a330:	ad400044 	addi	r21,r21,1
1000a334:	ac7fffc5 	stb	r17,-1(r21)
1000a338:	ad3fea1e 	bne	r21,r20,1000a2e4 <__alt_data_end+0xf800a2e4>
1000a33c:	1813883a 	mov	r9,r3
1000a340:	d8c01017 	ldw	r3,64(sp)
1000a344:	dc001317 	ldw	r16,76(sp)
1000a348:	dc801417 	ldw	r18,80(sp)
1000a34c:	1011883a 	mov	r8,r2
1000a350:	b8ef883a 	add	r23,r23,r3
1000a354:	d9000e17 	ldw	r4,56(sp)
1000a358:	d9401117 	ldw	r5,68(sp)
1000a35c:	000d883a 	mov	r6,zero
1000a360:	01cff834 	movhi	r7,16352
1000a364:	da001715 	stw	r8,92(sp)
1000a368:	da401515 	stw	r9,84(sp)
1000a36c:	00041200 	call	10004120 <__adddf3>
1000a370:	da001717 	ldw	r8,92(sp)
1000a374:	da401517 	ldw	r9,84(sp)
1000a378:	1009883a 	mov	r4,r2
1000a37c:	400d883a 	mov	r6,r8
1000a380:	480f883a 	mov	r7,r9
1000a384:	180b883a 	mov	r5,r3
1000a388:	00054a00 	call	100054a0 <__ledf2>
1000a38c:	da001717 	ldw	r8,92(sp)
1000a390:	da401517 	ldw	r9,84(sp)
1000a394:	10003b0e 	bge	r2,zero,1000a484 <_dtoa_r+0x15dc>
1000a398:	d9001217 	ldw	r4,72(sp)
1000a39c:	bd7fffc3 	ldbu	r21,-1(r23)
1000a3a0:	d9000515 	stw	r4,20(sp)
1000a3a4:	003d1c06 	br	10009818 <__alt_data_end+0xf8009818>
1000a3a8:	d8c00817 	ldw	r3,32(sp)
1000a3ac:	18a9c83a 	sub	r20,r3,r2
1000a3b0:	0005883a 	mov	r2,zero
1000a3b4:	003d3706 	br	10009894 <__alt_data_end+0xf8009894>
1000a3b8:	00800044 	movi	r2,1
1000a3bc:	003dd006 	br	10009b00 <__alt_data_end+0xf8009b00>
1000a3c0:	d8c00217 	ldw	r3,8(sp)
1000a3c4:	00800d84 	movi	r2,54
1000a3c8:	dd400917 	ldw	r21,36(sp)
1000a3cc:	10c5c83a 	sub	r2,r2,r3
1000a3d0:	dd000817 	ldw	r20,32(sp)
1000a3d4:	003d2f06 	br	10009894 <__alt_data_end+0xf8009894>
1000a3d8:	9029883a 	mov	r20,r18
1000a3dc:	982b883a 	mov	r21,r19
1000a3e0:	04400084 	movi	r17,2
1000a3e4:	003bc606 	br	10009300 <__alt_data_end+0xf8009300>
1000a3e8:	d8800617 	ldw	r2,24(sp)
1000a3ec:	103efc26 	beq	r2,zero,10009fe0 <__alt_data_end+0xf8009fe0>
1000a3f0:	d8c00d17 	ldw	r3,52(sp)
1000a3f4:	00fc890e 	bge	zero,r3,1000961c <__alt_data_end+0xf800961c>
1000a3f8:	a80b883a 	mov	r5,r21
1000a3fc:	a009883a 	mov	r4,r20
1000a400:	000d883a 	mov	r6,zero
1000a404:	01d00934 	movhi	r7,16420
1000a408:	00055800 	call	10005580 <__muldf3>
1000a40c:	89000044 	addi	r4,r17,1
1000a410:	1029883a 	mov	r20,r2
1000a414:	182b883a 	mov	r21,r3
1000a418:	00067440 	call	10006744 <__floatsidf>
1000a41c:	a009883a 	mov	r4,r20
1000a420:	a80b883a 	mov	r5,r21
1000a424:	100d883a 	mov	r6,r2
1000a428:	180f883a 	mov	r7,r3
1000a42c:	00055800 	call	10005580 <__muldf3>
1000a430:	1009883a 	mov	r4,r2
1000a434:	180b883a 	mov	r5,r3
1000a438:	000d883a 	mov	r6,zero
1000a43c:	01d00734 	movhi	r7,16412
1000a440:	00041200 	call	10004120 <__adddf3>
1000a444:	d9000517 	ldw	r4,20(sp)
1000a448:	1023883a 	mov	r17,r2
1000a44c:	00bf3034 	movhi	r2,64704
1000a450:	213fffc4 	addi	r4,r4,-1
1000a454:	1885883a 	add	r2,r3,r2
1000a458:	d9001215 	stw	r4,72(sp)
1000a45c:	d8800e15 	stw	r2,56(sp)
1000a460:	da800d17 	ldw	r10,52(sp)
1000a464:	003bc306 	br	10009374 <__alt_data_end+0xf8009374>
1000a468:	b039883a 	mov	fp,r22
1000a46c:	01000e44 	movi	r4,57
1000a470:	8825883a 	mov	r18,r17
1000a474:	9dc00044 	addi	r23,r19,1
1000a478:	99000005 	stb	r4,0(r19)
1000a47c:	a023883a 	mov	r17,r20
1000a480:	003dae06 	br	10009b3c <__alt_data_end+0xf8009b3c>
1000a484:	d9800e17 	ldw	r6,56(sp)
1000a488:	d9c01117 	ldw	r7,68(sp)
1000a48c:	0009883a 	mov	r4,zero
1000a490:	014ff834 	movhi	r5,16352
1000a494:	da001715 	stw	r8,92(sp)
1000a498:	da401515 	stw	r9,84(sp)
1000a49c:	0005dec0 	call	10005dec <__subdf3>
1000a4a0:	da001717 	ldw	r8,92(sp)
1000a4a4:	da401517 	ldw	r9,84(sp)
1000a4a8:	1009883a 	mov	r4,r2
1000a4ac:	180b883a 	mov	r5,r3
1000a4b0:	400d883a 	mov	r6,r8
1000a4b4:	480f883a 	mov	r7,r9
1000a4b8:	00053c00 	call	100053c0 <__gedf2>
1000a4bc:	00bc570e 	bge	zero,r2,1000961c <__alt_data_end+0xf800961c>
1000a4c0:	01000c04 	movi	r4,48
1000a4c4:	00000106 	br	1000a4cc <_dtoa_r+0x1624>
1000a4c8:	102f883a 	mov	r23,r2
1000a4cc:	b8bfffc4 	addi	r2,r23,-1
1000a4d0:	10c00007 	ldb	r3,0(r2)
1000a4d4:	193ffc26 	beq	r3,r4,1000a4c8 <__alt_data_end+0xf800a4c8>
1000a4d8:	d9801217 	ldw	r6,72(sp)
1000a4dc:	d9800515 	stw	r6,20(sp)
1000a4e0:	003c1f06 	br	10009560 <__alt_data_end+0xf8009560>
1000a4e4:	d8801217 	ldw	r2,72(sp)
1000a4e8:	dc001117 	ldw	r16,68(sp)
1000a4ec:	d8800515 	stw	r2,20(sp)
1000a4f0:	003cc906 	br	10009818 <__alt_data_end+0xf8009818>
1000a4f4:	dd801317 	ldw	r22,76(sp)
1000a4f8:	dc001117 	ldw	r16,68(sp)
1000a4fc:	dcc01417 	ldw	r19,80(sp)
1000a500:	dc801017 	ldw	r18,64(sp)
1000a504:	003c4506 	br	1000961c <__alt_data_end+0xf800961c>
1000a508:	103e5d1e 	bne	r2,zero,10009e80 <__alt_data_end+0xf8009e80>
1000a50c:	4080004c 	andi	r2,r8,1
1000a510:	103e5b26 	beq	r2,zero,10009e80 <__alt_data_end+0xf8009e80>
1000a514:	003e5706 	br	10009e74 <__alt_data_end+0xf8009e74>
1000a518:	d8c00317 	ldw	r3,12(sp)
1000a51c:	00800084 	movi	r2,2
1000a520:	10c00a16 	blt	r2,r3,1000a54c <_dtoa_r+0x16a4>
1000a524:	d9000d17 	ldw	r4,52(sp)
1000a528:	003e8306 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a52c:	04400084 	movi	r17,2
1000a530:	003b7306 	br	10009300 <__alt_data_end+0xf8009300>
1000a534:	d9801217 	ldw	r6,72(sp)
1000a538:	d9800515 	stw	r6,20(sp)
1000a53c:	003cb606 	br	10009818 <__alt_data_end+0xf8009818>
1000a540:	d9001217 	ldw	r4,72(sp)
1000a544:	d9000515 	stw	r4,20(sp)
1000a548:	003c0506 	br	10009560 <__alt_data_end+0xf8009560>
1000a54c:	d9800d17 	ldw	r6,52(sp)
1000a550:	d9800615 	stw	r6,24(sp)
1000a554:	003e8306 	br	10009f64 <__alt_data_end+0xf8009f64>
1000a558:	d9800317 	ldw	r6,12(sp)
1000a55c:	00800084 	movi	r2,2
1000a560:	11800216 	blt	r2,r6,1000a56c <_dtoa_r+0x16c4>
1000a564:	d8800d17 	ldw	r2,52(sp)
1000a568:	003da606 	br	10009c04 <__alt_data_end+0xf8009c04>
1000a56c:	d8800d17 	ldw	r2,52(sp)
1000a570:	d8800615 	stw	r2,24(sp)
1000a574:	003e7b06 	br	10009f64 <__alt_data_end+0xf8009f64>
1000a578:	05000044 	movi	r20,1
1000a57c:	003b0506 	br	10009194 <__alt_data_end+0xf8009194>
1000a580:	8009883a 	mov	r4,r16
1000a584:	80001115 	stw	zero,68(r16)
1000a588:	000b883a 	mov	r5,zero
1000a58c:	000bee40 	call	1000bee4 <_Balloc>
1000a590:	d8800715 	stw	r2,28(sp)
1000a594:	d8c00717 	ldw	r3,28(sp)
1000a598:	00bfffc4 	movi	r2,-1
1000a59c:	01000044 	movi	r4,1
1000a5a0:	d8800615 	stw	r2,24(sp)
1000a5a4:	80c01015 	stw	r3,64(r16)
1000a5a8:	d9000b15 	stw	r4,44(sp)
1000a5ac:	d8002215 	stw	zero,136(sp)
1000a5b0:	d8800d15 	stw	r2,52(sp)
1000a5b4:	003c1906 	br	1000961c <__alt_data_end+0xf800961c>
1000a5b8:	193d2926 	beq	r3,r4,10009a60 <__alt_data_end+0xf8009a60>
1000a5bc:	00c00f04 	movi	r3,60
1000a5c0:	1885c83a 	sub	r2,r3,r2
1000a5c4:	003d7b06 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a5c8:	000b883a 	mov	r5,zero
1000a5cc:	003b1006 	br	10009210 <__alt_data_end+0xf8009210>

1000a5d0 <_fflush_r>:
1000a5d0:	defffb04 	addi	sp,sp,-20
1000a5d4:	dcc00315 	stw	r19,12(sp)
1000a5d8:	dc000015 	stw	r16,0(sp)
1000a5dc:	dfc00415 	stw	ra,16(sp)
1000a5e0:	dc800215 	stw	r18,8(sp)
1000a5e4:	dc400115 	stw	r17,4(sp)
1000a5e8:	2027883a 	mov	r19,r4
1000a5ec:	2821883a 	mov	r16,r5
1000a5f0:	20000226 	beq	r4,zero,1000a5fc <_fflush_r+0x2c>
1000a5f4:	20800e17 	ldw	r2,56(r4)
1000a5f8:	10005326 	beq	r2,zero,1000a748 <_fflush_r+0x178>
1000a5fc:	8080030b 	ldhu	r2,12(r16)
1000a600:	10ffffcc 	andi	r3,r2,65535
1000a604:	18e0001c 	xori	r3,r3,32768
1000a608:	18e00004 	addi	r3,r3,-32768
1000a60c:	18002c26 	beq	r3,zero,1000a6c0 <_fflush_r+0xf0>
1000a610:	10c0020c 	andi	r3,r2,8
1000a614:	1800321e 	bne	r3,zero,1000a6e0 <_fflush_r+0x110>
1000a618:	80c00117 	ldw	r3,4(r16)
1000a61c:	10820014 	ori	r2,r2,2048
1000a620:	8080030d 	sth	r2,12(r16)
1000a624:	00c0570e 	bge	zero,r3,1000a784 <_fflush_r+0x1b4>
1000a628:	82000a17 	ldw	r8,40(r16)
1000a62c:	40002426 	beq	r8,zero,1000a6c0 <_fflush_r+0xf0>
1000a630:	9c400017 	ldw	r17,0(r19)
1000a634:	10c4000c 	andi	r3,r2,4096
1000a638:	98000015 	stw	zero,0(r19)
1000a63c:	18004626 	beq	r3,zero,1000a758 <_fflush_r+0x188>
1000a640:	81801417 	ldw	r6,80(r16)
1000a644:	10c0010c 	andi	r3,r2,4
1000a648:	18000626 	beq	r3,zero,1000a664 <_fflush_r+0x94>
1000a64c:	80c00117 	ldw	r3,4(r16)
1000a650:	80800c17 	ldw	r2,48(r16)
1000a654:	30cdc83a 	sub	r6,r6,r3
1000a658:	10000226 	beq	r2,zero,1000a664 <_fflush_r+0x94>
1000a65c:	80800f17 	ldw	r2,60(r16)
1000a660:	308dc83a 	sub	r6,r6,r2
1000a664:	81400717 	ldw	r5,28(r16)
1000a668:	9809883a 	mov	r4,r19
1000a66c:	000f883a 	mov	r7,zero
1000a670:	403ee83a 	callr	r8
1000a674:	00ffffc4 	movi	r3,-1
1000a678:	10c04526 	beq	r2,r3,1000a790 <_fflush_r+0x1c0>
1000a67c:	80c0030b 	ldhu	r3,12(r16)
1000a680:	81000417 	ldw	r4,16(r16)
1000a684:	80000115 	stw	zero,4(r16)
1000a688:	197dffcc 	andi	r5,r3,63487
1000a68c:	8140030d 	sth	r5,12(r16)
1000a690:	81000015 	stw	r4,0(r16)
1000a694:	18c4000c 	andi	r3,r3,4096
1000a698:	18000126 	beq	r3,zero,1000a6a0 <_fflush_r+0xd0>
1000a69c:	80801415 	stw	r2,80(r16)
1000a6a0:	81400c17 	ldw	r5,48(r16)
1000a6a4:	9c400015 	stw	r17,0(r19)
1000a6a8:	28000526 	beq	r5,zero,1000a6c0 <_fflush_r+0xf0>
1000a6ac:	80801004 	addi	r2,r16,64
1000a6b0:	28800226 	beq	r5,r2,1000a6bc <_fflush_r+0xec>
1000a6b4:	9809883a 	mov	r4,r19
1000a6b8:	000ad000 	call	1000ad00 <_free_r>
1000a6bc:	80000c15 	stw	zero,48(r16)
1000a6c0:	0005883a 	mov	r2,zero
1000a6c4:	dfc00417 	ldw	ra,16(sp)
1000a6c8:	dcc00317 	ldw	r19,12(sp)
1000a6cc:	dc800217 	ldw	r18,8(sp)
1000a6d0:	dc400117 	ldw	r17,4(sp)
1000a6d4:	dc000017 	ldw	r16,0(sp)
1000a6d8:	dec00504 	addi	sp,sp,20
1000a6dc:	f800283a 	ret
1000a6e0:	84800417 	ldw	r18,16(r16)
1000a6e4:	903ff626 	beq	r18,zero,1000a6c0 <__alt_data_end+0xf800a6c0>
1000a6e8:	84400017 	ldw	r17,0(r16)
1000a6ec:	108000cc 	andi	r2,r2,3
1000a6f0:	84800015 	stw	r18,0(r16)
1000a6f4:	8ca3c83a 	sub	r17,r17,r18
1000a6f8:	10001526 	beq	r2,zero,1000a750 <_fflush_r+0x180>
1000a6fc:	0005883a 	mov	r2,zero
1000a700:	80800215 	stw	r2,8(r16)
1000a704:	04400316 	blt	zero,r17,1000a714 <_fflush_r+0x144>
1000a708:	003fed06 	br	1000a6c0 <__alt_data_end+0xf800a6c0>
1000a70c:	90a5883a 	add	r18,r18,r2
1000a710:	047feb0e 	bge	zero,r17,1000a6c0 <__alt_data_end+0xf800a6c0>
1000a714:	80800917 	ldw	r2,36(r16)
1000a718:	81400717 	ldw	r5,28(r16)
1000a71c:	880f883a 	mov	r7,r17
1000a720:	900d883a 	mov	r6,r18
1000a724:	9809883a 	mov	r4,r19
1000a728:	103ee83a 	callr	r2
1000a72c:	88a3c83a 	sub	r17,r17,r2
1000a730:	00bff616 	blt	zero,r2,1000a70c <__alt_data_end+0xf800a70c>
1000a734:	80c0030b 	ldhu	r3,12(r16)
1000a738:	00bfffc4 	movi	r2,-1
1000a73c:	18c01014 	ori	r3,r3,64
1000a740:	80c0030d 	sth	r3,12(r16)
1000a744:	003fdf06 	br	1000a6c4 <__alt_data_end+0xf800a6c4>
1000a748:	000ab8c0 	call	1000ab8c <__sinit>
1000a74c:	003fab06 	br	1000a5fc <__alt_data_end+0xf800a5fc>
1000a750:	80800517 	ldw	r2,20(r16)
1000a754:	003fea06 	br	1000a700 <__alt_data_end+0xf800a700>
1000a758:	81400717 	ldw	r5,28(r16)
1000a75c:	000d883a 	mov	r6,zero
1000a760:	9809883a 	mov	r4,r19
1000a764:	01c00044 	movi	r7,1
1000a768:	403ee83a 	callr	r8
1000a76c:	100d883a 	mov	r6,r2
1000a770:	00bfffc4 	movi	r2,-1
1000a774:	30801326 	beq	r6,r2,1000a7c4 <_fflush_r+0x1f4>
1000a778:	8080030b 	ldhu	r2,12(r16)
1000a77c:	82000a17 	ldw	r8,40(r16)
1000a780:	003fb006 	br	1000a644 <__alt_data_end+0xf800a644>
1000a784:	80c00f17 	ldw	r3,60(r16)
1000a788:	00ffa716 	blt	zero,r3,1000a628 <__alt_data_end+0xf800a628>
1000a78c:	003fcc06 	br	1000a6c0 <__alt_data_end+0xf800a6c0>
1000a790:	98c00017 	ldw	r3,0(r19)
1000a794:	183fb926 	beq	r3,zero,1000a67c <__alt_data_end+0xf800a67c>
1000a798:	01000744 	movi	r4,29
1000a79c:	19000226 	beq	r3,r4,1000a7a8 <_fflush_r+0x1d8>
1000a7a0:	01000584 	movi	r4,22
1000a7a4:	1900101e 	bne	r3,r4,1000a7e8 <_fflush_r+0x218>
1000a7a8:	8080030b 	ldhu	r2,12(r16)
1000a7ac:	80c00417 	ldw	r3,16(r16)
1000a7b0:	80000115 	stw	zero,4(r16)
1000a7b4:	10bdffcc 	andi	r2,r2,63487
1000a7b8:	8080030d 	sth	r2,12(r16)
1000a7bc:	80c00015 	stw	r3,0(r16)
1000a7c0:	003fb706 	br	1000a6a0 <__alt_data_end+0xf800a6a0>
1000a7c4:	98800017 	ldw	r2,0(r19)
1000a7c8:	103feb26 	beq	r2,zero,1000a778 <__alt_data_end+0xf800a778>
1000a7cc:	00c00744 	movi	r3,29
1000a7d0:	10c00226 	beq	r2,r3,1000a7dc <_fflush_r+0x20c>
1000a7d4:	00c00584 	movi	r3,22
1000a7d8:	10ffd61e 	bne	r2,r3,1000a734 <__alt_data_end+0xf800a734>
1000a7dc:	9c400015 	stw	r17,0(r19)
1000a7e0:	0005883a 	mov	r2,zero
1000a7e4:	003fb706 	br	1000a6c4 <__alt_data_end+0xf800a6c4>
1000a7e8:	80c0030b 	ldhu	r3,12(r16)
1000a7ec:	18c01014 	ori	r3,r3,64
1000a7f0:	80c0030d 	sth	r3,12(r16)
1000a7f4:	003fb306 	br	1000a6c4 <__alt_data_end+0xf800a6c4>

1000a7f8 <fflush>:
1000a7f8:	20000526 	beq	r4,zero,1000a810 <fflush+0x18>
1000a7fc:	00840074 	movhi	r2,4097
1000a800:	1090d104 	addi	r2,r2,17220
1000a804:	200b883a 	mov	r5,r4
1000a808:	11000017 	ldw	r4,0(r2)
1000a80c:	000a5d01 	jmpi	1000a5d0 <_fflush_r>
1000a810:	00840074 	movhi	r2,4097
1000a814:	1090d004 	addi	r2,r2,17216
1000a818:	11000017 	ldw	r4,0(r2)
1000a81c:	01440074 	movhi	r5,4097
1000a820:	29697404 	addi	r5,r5,-23088
1000a824:	000b0a81 	jmpi	1000b0a8 <_fwalk_reent>

1000a828 <__fp_lock>:
1000a828:	0005883a 	mov	r2,zero
1000a82c:	f800283a 	ret

1000a830 <__fp_unlock>:
1000a830:	0005883a 	mov	r2,zero
1000a834:	f800283a 	ret

1000a838 <_cleanup_r>:
1000a838:	01440074 	movhi	r5,4097
1000a83c:	297b2d04 	addi	r5,r5,-4940
1000a840:	000aff01 	jmpi	1000aff0 <_fwalk>

1000a844 <__sinit.part.1>:
1000a844:	defff604 	addi	sp,sp,-40
1000a848:	00c40074 	movhi	r3,4097
1000a84c:	dfc00915 	stw	ra,36(sp)
1000a850:	df000815 	stw	fp,32(sp)
1000a854:	ddc00715 	stw	r23,28(sp)
1000a858:	dd800615 	stw	r22,24(sp)
1000a85c:	dd400515 	stw	r21,20(sp)
1000a860:	dd000415 	stw	r20,16(sp)
1000a864:	dcc00315 	stw	r19,12(sp)
1000a868:	dc800215 	stw	r18,8(sp)
1000a86c:	dc400115 	stw	r17,4(sp)
1000a870:	dc000015 	stw	r16,0(sp)
1000a874:	18ea0e04 	addi	r3,r3,-22472
1000a878:	24000117 	ldw	r16,4(r4)
1000a87c:	20c00f15 	stw	r3,60(r4)
1000a880:	07000044 	movi	fp,1
1000a884:	00c000c4 	movi	r3,3
1000a888:	2080bb04 	addi	r2,r4,748
1000a88c:	20c0b915 	stw	r3,740(r4)
1000a890:	27000e15 	stw	fp,56(r4)
1000a894:	2080ba15 	stw	r2,744(r4)
1000a898:	2000b815 	stw	zero,736(r4)
1000a89c:	05c00204 	movi	r23,8
1000a8a0:	00800104 	movi	r2,4
1000a8a4:	2025883a 	mov	r18,r4
1000a8a8:	b80d883a 	mov	r6,r23
1000a8ac:	81001704 	addi	r4,r16,92
1000a8b0:	000b883a 	mov	r5,zero
1000a8b4:	80000015 	stw	zero,0(r16)
1000a8b8:	80000115 	stw	zero,4(r16)
1000a8bc:	80000215 	stw	zero,8(r16)
1000a8c0:	8080030d 	sth	r2,12(r16)
1000a8c4:	80001915 	stw	zero,100(r16)
1000a8c8:	8000038d 	sth	zero,14(r16)
1000a8cc:	80000415 	stw	zero,16(r16)
1000a8d0:	80000515 	stw	zero,20(r16)
1000a8d4:	80000615 	stw	zero,24(r16)
1000a8d8:	000bdc00 	call	1000bdc0 <memset>
1000a8dc:	05840074 	movhi	r22,4097
1000a8e0:	94400217 	ldw	r17,8(r18)
1000a8e4:	05440074 	movhi	r21,4097
1000a8e8:	05040074 	movhi	r20,4097
1000a8ec:	04c40074 	movhi	r19,4097
1000a8f0:	b5b43a04 	addi	r22,r22,-12056
1000a8f4:	ad745104 	addi	r21,r21,-11964
1000a8f8:	a5347004 	addi	r20,r20,-11840
1000a8fc:	9cf48704 	addi	r19,r19,-11748
1000a900:	85800815 	stw	r22,32(r16)
1000a904:	85400915 	stw	r21,36(r16)
1000a908:	85000a15 	stw	r20,40(r16)
1000a90c:	84c00b15 	stw	r19,44(r16)
1000a910:	84000715 	stw	r16,28(r16)
1000a914:	00800284 	movi	r2,10
1000a918:	89001704 	addi	r4,r17,92
1000a91c:	b80d883a 	mov	r6,r23
1000a920:	000b883a 	mov	r5,zero
1000a924:	88000015 	stw	zero,0(r17)
1000a928:	88000115 	stw	zero,4(r17)
1000a92c:	88000215 	stw	zero,8(r17)
1000a930:	8880030d 	sth	r2,12(r17)
1000a934:	88001915 	stw	zero,100(r17)
1000a938:	8f00038d 	sth	fp,14(r17)
1000a93c:	88000415 	stw	zero,16(r17)
1000a940:	88000515 	stw	zero,20(r17)
1000a944:	88000615 	stw	zero,24(r17)
1000a948:	000bdc00 	call	1000bdc0 <memset>
1000a94c:	94000317 	ldw	r16,12(r18)
1000a950:	00800484 	movi	r2,18
1000a954:	8c400715 	stw	r17,28(r17)
1000a958:	8d800815 	stw	r22,32(r17)
1000a95c:	8d400915 	stw	r21,36(r17)
1000a960:	8d000a15 	stw	r20,40(r17)
1000a964:	8cc00b15 	stw	r19,44(r17)
1000a968:	8080030d 	sth	r2,12(r16)
1000a96c:	00800084 	movi	r2,2
1000a970:	80000015 	stw	zero,0(r16)
1000a974:	80000115 	stw	zero,4(r16)
1000a978:	80000215 	stw	zero,8(r16)
1000a97c:	80001915 	stw	zero,100(r16)
1000a980:	8080038d 	sth	r2,14(r16)
1000a984:	80000415 	stw	zero,16(r16)
1000a988:	80000515 	stw	zero,20(r16)
1000a98c:	80000615 	stw	zero,24(r16)
1000a990:	81001704 	addi	r4,r16,92
1000a994:	000b883a 	mov	r5,zero
1000a998:	b80d883a 	mov	r6,r23
1000a99c:	000bdc00 	call	1000bdc0 <memset>
1000a9a0:	84000715 	stw	r16,28(r16)
1000a9a4:	85800815 	stw	r22,32(r16)
1000a9a8:	85400915 	stw	r21,36(r16)
1000a9ac:	85000a15 	stw	r20,40(r16)
1000a9b0:	84c00b15 	stw	r19,44(r16)
1000a9b4:	dfc00917 	ldw	ra,36(sp)
1000a9b8:	df000817 	ldw	fp,32(sp)
1000a9bc:	ddc00717 	ldw	r23,28(sp)
1000a9c0:	dd800617 	ldw	r22,24(sp)
1000a9c4:	dd400517 	ldw	r21,20(sp)
1000a9c8:	dd000417 	ldw	r20,16(sp)
1000a9cc:	dcc00317 	ldw	r19,12(sp)
1000a9d0:	dc800217 	ldw	r18,8(sp)
1000a9d4:	dc400117 	ldw	r17,4(sp)
1000a9d8:	dc000017 	ldw	r16,0(sp)
1000a9dc:	dec00a04 	addi	sp,sp,40
1000a9e0:	f800283a 	ret

1000a9e4 <__sfmoreglue>:
1000a9e4:	defffc04 	addi	sp,sp,-16
1000a9e8:	dc800215 	stw	r18,8(sp)
1000a9ec:	2825883a 	mov	r18,r5
1000a9f0:	dc000015 	stw	r16,0(sp)
1000a9f4:	01401a04 	movi	r5,104
1000a9f8:	2021883a 	mov	r16,r4
1000a9fc:	9009883a 	mov	r4,r18
1000aa00:	dfc00315 	stw	ra,12(sp)
1000aa04:	dc400115 	stw	r17,4(sp)
1000aa08:	00040f80 	call	100040f8 <__mulsi3>
1000aa0c:	8009883a 	mov	r4,r16
1000aa10:	11400304 	addi	r5,r2,12
1000aa14:	1023883a 	mov	r17,r2
1000aa18:	000b3f80 	call	1000b3f8 <_malloc_r>
1000aa1c:	1021883a 	mov	r16,r2
1000aa20:	10000726 	beq	r2,zero,1000aa40 <__sfmoreglue+0x5c>
1000aa24:	11000304 	addi	r4,r2,12
1000aa28:	10000015 	stw	zero,0(r2)
1000aa2c:	14800115 	stw	r18,4(r2)
1000aa30:	11000215 	stw	r4,8(r2)
1000aa34:	000b883a 	mov	r5,zero
1000aa38:	880d883a 	mov	r6,r17
1000aa3c:	000bdc00 	call	1000bdc0 <memset>
1000aa40:	8005883a 	mov	r2,r16
1000aa44:	dfc00317 	ldw	ra,12(sp)
1000aa48:	dc800217 	ldw	r18,8(sp)
1000aa4c:	dc400117 	ldw	r17,4(sp)
1000aa50:	dc000017 	ldw	r16,0(sp)
1000aa54:	dec00404 	addi	sp,sp,16
1000aa58:	f800283a 	ret

1000aa5c <__sfp>:
1000aa5c:	00840074 	movhi	r2,4097
1000aa60:	defffb04 	addi	sp,sp,-20
1000aa64:	1090d004 	addi	r2,r2,17216
1000aa68:	dc800215 	stw	r18,8(sp)
1000aa6c:	14800017 	ldw	r18,0(r2)
1000aa70:	dcc00315 	stw	r19,12(sp)
1000aa74:	dfc00415 	stw	ra,16(sp)
1000aa78:	90800e17 	ldw	r2,56(r18)
1000aa7c:	dc400115 	stw	r17,4(sp)
1000aa80:	dc000015 	stw	r16,0(sp)
1000aa84:	2027883a 	mov	r19,r4
1000aa88:	1000021e 	bne	r2,zero,1000aa94 <__sfp+0x38>
1000aa8c:	9009883a 	mov	r4,r18
1000aa90:	000a8440 	call	1000a844 <__sinit.part.1>
1000aa94:	9480b804 	addi	r18,r18,736
1000aa98:	047fffc4 	movi	r17,-1
1000aa9c:	91400117 	ldw	r5,4(r18)
1000aaa0:	94000217 	ldw	r16,8(r18)
1000aaa4:	297fffc4 	addi	r5,r5,-1
1000aaa8:	28000a16 	blt	r5,zero,1000aad4 <__sfp+0x78>
1000aaac:	8080030f 	ldh	r2,12(r16)
1000aab0:	10000c26 	beq	r2,zero,1000aae4 <__sfp+0x88>
1000aab4:	80c01d04 	addi	r3,r16,116
1000aab8:	00000206 	br	1000aac4 <__sfp+0x68>
1000aabc:	18bfe60f 	ldh	r2,-104(r3)
1000aac0:	10000826 	beq	r2,zero,1000aae4 <__sfp+0x88>
1000aac4:	297fffc4 	addi	r5,r5,-1
1000aac8:	1c3ffd04 	addi	r16,r3,-12
1000aacc:	18c01a04 	addi	r3,r3,104
1000aad0:	2c7ffa1e 	bne	r5,r17,1000aabc <__alt_data_end+0xf800aabc>
1000aad4:	90800017 	ldw	r2,0(r18)
1000aad8:	10001d26 	beq	r2,zero,1000ab50 <__sfp+0xf4>
1000aadc:	1025883a 	mov	r18,r2
1000aae0:	003fee06 	br	1000aa9c <__alt_data_end+0xf800aa9c>
1000aae4:	00bfffc4 	movi	r2,-1
1000aae8:	8080038d 	sth	r2,14(r16)
1000aaec:	00800044 	movi	r2,1
1000aaf0:	8080030d 	sth	r2,12(r16)
1000aaf4:	80001915 	stw	zero,100(r16)
1000aaf8:	80000015 	stw	zero,0(r16)
1000aafc:	80000215 	stw	zero,8(r16)
1000ab00:	80000115 	stw	zero,4(r16)
1000ab04:	80000415 	stw	zero,16(r16)
1000ab08:	80000515 	stw	zero,20(r16)
1000ab0c:	80000615 	stw	zero,24(r16)
1000ab10:	81001704 	addi	r4,r16,92
1000ab14:	000b883a 	mov	r5,zero
1000ab18:	01800204 	movi	r6,8
1000ab1c:	000bdc00 	call	1000bdc0 <memset>
1000ab20:	8005883a 	mov	r2,r16
1000ab24:	80000c15 	stw	zero,48(r16)
1000ab28:	80000d15 	stw	zero,52(r16)
1000ab2c:	80001115 	stw	zero,68(r16)
1000ab30:	80001215 	stw	zero,72(r16)
1000ab34:	dfc00417 	ldw	ra,16(sp)
1000ab38:	dcc00317 	ldw	r19,12(sp)
1000ab3c:	dc800217 	ldw	r18,8(sp)
1000ab40:	dc400117 	ldw	r17,4(sp)
1000ab44:	dc000017 	ldw	r16,0(sp)
1000ab48:	dec00504 	addi	sp,sp,20
1000ab4c:	f800283a 	ret
1000ab50:	9809883a 	mov	r4,r19
1000ab54:	01400104 	movi	r5,4
1000ab58:	000a9e40 	call	1000a9e4 <__sfmoreglue>
1000ab5c:	90800015 	stw	r2,0(r18)
1000ab60:	103fde1e 	bne	r2,zero,1000aadc <__alt_data_end+0xf800aadc>
1000ab64:	00800304 	movi	r2,12
1000ab68:	98800015 	stw	r2,0(r19)
1000ab6c:	0005883a 	mov	r2,zero
1000ab70:	003ff006 	br	1000ab34 <__alt_data_end+0xf800ab34>

1000ab74 <_cleanup>:
1000ab74:	00840074 	movhi	r2,4097
1000ab78:	1090d004 	addi	r2,r2,17216
1000ab7c:	11000017 	ldw	r4,0(r2)
1000ab80:	01440074 	movhi	r5,4097
1000ab84:	297b2d04 	addi	r5,r5,-4940
1000ab88:	000aff01 	jmpi	1000aff0 <_fwalk>

1000ab8c <__sinit>:
1000ab8c:	20800e17 	ldw	r2,56(r4)
1000ab90:	10000126 	beq	r2,zero,1000ab98 <__sinit+0xc>
1000ab94:	f800283a 	ret
1000ab98:	000a8441 	jmpi	1000a844 <__sinit.part.1>

1000ab9c <__sfp_lock_acquire>:
1000ab9c:	f800283a 	ret

1000aba0 <__sfp_lock_release>:
1000aba0:	f800283a 	ret

1000aba4 <__sinit_lock_acquire>:
1000aba4:	f800283a 	ret

1000aba8 <__sinit_lock_release>:
1000aba8:	f800283a 	ret

1000abac <__fp_lock_all>:
1000abac:	00840074 	movhi	r2,4097
1000abb0:	1090d104 	addi	r2,r2,17220
1000abb4:	11000017 	ldw	r4,0(r2)
1000abb8:	01440074 	movhi	r5,4097
1000abbc:	296a0a04 	addi	r5,r5,-22488
1000abc0:	000aff01 	jmpi	1000aff0 <_fwalk>

1000abc4 <__fp_unlock_all>:
1000abc4:	00840074 	movhi	r2,4097
1000abc8:	1090d104 	addi	r2,r2,17220
1000abcc:	11000017 	ldw	r4,0(r2)
1000abd0:	01440074 	movhi	r5,4097
1000abd4:	296a0c04 	addi	r5,r5,-22480
1000abd8:	000aff01 	jmpi	1000aff0 <_fwalk>

1000abdc <_malloc_trim_r>:
1000abdc:	defffb04 	addi	sp,sp,-20
1000abe0:	dcc00315 	stw	r19,12(sp)
1000abe4:	04c40074 	movhi	r19,4097
1000abe8:	dc800215 	stw	r18,8(sp)
1000abec:	dc400115 	stw	r17,4(sp)
1000abf0:	dc000015 	stw	r16,0(sp)
1000abf4:	dfc00415 	stw	ra,16(sp)
1000abf8:	2821883a 	mov	r16,r5
1000abfc:	9ccb4b04 	addi	r19,r19,11564
1000ac00:	2025883a 	mov	r18,r4
1000ac04:	00103880 	call	10010388 <__malloc_lock>
1000ac08:	98800217 	ldw	r2,8(r19)
1000ac0c:	14400117 	ldw	r17,4(r2)
1000ac10:	00bfff04 	movi	r2,-4
1000ac14:	88a2703a 	and	r17,r17,r2
1000ac18:	8c21c83a 	sub	r16,r17,r16
1000ac1c:	8403fbc4 	addi	r16,r16,4079
1000ac20:	8020d33a 	srli	r16,r16,12
1000ac24:	0083ffc4 	movi	r2,4095
1000ac28:	843fffc4 	addi	r16,r16,-1
1000ac2c:	8020933a 	slli	r16,r16,12
1000ac30:	1400060e 	bge	r2,r16,1000ac4c <_malloc_trim_r+0x70>
1000ac34:	9009883a 	mov	r4,r18
1000ac38:	000b883a 	mov	r5,zero
1000ac3c:	000d0940 	call	1000d094 <_sbrk_r>
1000ac40:	98c00217 	ldw	r3,8(r19)
1000ac44:	1c47883a 	add	r3,r3,r17
1000ac48:	10c00a26 	beq	r2,r3,1000ac74 <_malloc_trim_r+0x98>
1000ac4c:	9009883a 	mov	r4,r18
1000ac50:	00103a80 	call	100103a8 <__malloc_unlock>
1000ac54:	0005883a 	mov	r2,zero
1000ac58:	dfc00417 	ldw	ra,16(sp)
1000ac5c:	dcc00317 	ldw	r19,12(sp)
1000ac60:	dc800217 	ldw	r18,8(sp)
1000ac64:	dc400117 	ldw	r17,4(sp)
1000ac68:	dc000017 	ldw	r16,0(sp)
1000ac6c:	dec00504 	addi	sp,sp,20
1000ac70:	f800283a 	ret
1000ac74:	9009883a 	mov	r4,r18
1000ac78:	040bc83a 	sub	r5,zero,r16
1000ac7c:	000d0940 	call	1000d094 <_sbrk_r>
1000ac80:	00ffffc4 	movi	r3,-1
1000ac84:	10c00d26 	beq	r2,r3,1000acbc <_malloc_trim_r+0xe0>
1000ac88:	00c40074 	movhi	r3,4097
1000ac8c:	18d7b104 	addi	r3,r3,24260
1000ac90:	18800017 	ldw	r2,0(r3)
1000ac94:	99000217 	ldw	r4,8(r19)
1000ac98:	8c23c83a 	sub	r17,r17,r16
1000ac9c:	8c400054 	ori	r17,r17,1
1000aca0:	1421c83a 	sub	r16,r2,r16
1000aca4:	24400115 	stw	r17,4(r4)
1000aca8:	9009883a 	mov	r4,r18
1000acac:	1c000015 	stw	r16,0(r3)
1000acb0:	00103a80 	call	100103a8 <__malloc_unlock>
1000acb4:	00800044 	movi	r2,1
1000acb8:	003fe706 	br	1000ac58 <__alt_data_end+0xf800ac58>
1000acbc:	9009883a 	mov	r4,r18
1000acc0:	000b883a 	mov	r5,zero
1000acc4:	000d0940 	call	1000d094 <_sbrk_r>
1000acc8:	99000217 	ldw	r4,8(r19)
1000accc:	014003c4 	movi	r5,15
1000acd0:	1107c83a 	sub	r3,r2,r4
1000acd4:	28ffdd0e 	bge	r5,r3,1000ac4c <__alt_data_end+0xf800ac4c>
1000acd8:	01440074 	movhi	r5,4097
1000acdc:	2950d304 	addi	r5,r5,17228
1000ace0:	29400017 	ldw	r5,0(r5)
1000ace4:	18c00054 	ori	r3,r3,1
1000ace8:	20c00115 	stw	r3,4(r4)
1000acec:	00c40074 	movhi	r3,4097
1000acf0:	1145c83a 	sub	r2,r2,r5
1000acf4:	18d7b104 	addi	r3,r3,24260
1000acf8:	18800015 	stw	r2,0(r3)
1000acfc:	003fd306 	br	1000ac4c <__alt_data_end+0xf800ac4c>

1000ad00 <_free_r>:
1000ad00:	28004c26 	beq	r5,zero,1000ae34 <_free_r+0x134>
1000ad04:	defffd04 	addi	sp,sp,-12
1000ad08:	dc400115 	stw	r17,4(sp)
1000ad0c:	dc000015 	stw	r16,0(sp)
1000ad10:	2023883a 	mov	r17,r4
1000ad14:	2821883a 	mov	r16,r5
1000ad18:	dfc00215 	stw	ra,8(sp)
1000ad1c:	00103880 	call	10010388 <__malloc_lock>
1000ad20:	813fff17 	ldw	r4,-4(r16)
1000ad24:	00bfff84 	movi	r2,-2
1000ad28:	02440074 	movhi	r9,4097
1000ad2c:	81bffe04 	addi	r6,r16,-8
1000ad30:	2084703a 	and	r2,r4,r2
1000ad34:	4a4b4b04 	addi	r9,r9,11564
1000ad38:	308b883a 	add	r5,r6,r2
1000ad3c:	2a000117 	ldw	r8,4(r5)
1000ad40:	49c00217 	ldw	r7,8(r9)
1000ad44:	00ffff04 	movi	r3,-4
1000ad48:	40c6703a 	and	r3,r8,r3
1000ad4c:	39405326 	beq	r7,r5,1000ae9c <_free_r+0x19c>
1000ad50:	28c00115 	stw	r3,4(r5)
1000ad54:	2100004c 	andi	r4,r4,1
1000ad58:	2000091e 	bne	r4,zero,1000ad80 <_free_r+0x80>
1000ad5c:	81fffe17 	ldw	r7,-8(r16)
1000ad60:	4a000204 	addi	r8,r9,8
1000ad64:	31cdc83a 	sub	r6,r6,r7
1000ad68:	31000217 	ldw	r4,8(r6)
1000ad6c:	11c5883a 	add	r2,r2,r7
1000ad70:	22006126 	beq	r4,r8,1000aef8 <_free_r+0x1f8>
1000ad74:	31c00317 	ldw	r7,12(r6)
1000ad78:	21c00315 	stw	r7,12(r4)
1000ad7c:	39000215 	stw	r4,8(r7)
1000ad80:	28c9883a 	add	r4,r5,r3
1000ad84:	21c00117 	ldw	r7,4(r4)
1000ad88:	39c0004c 	andi	r7,r7,1
1000ad8c:	38000d1e 	bne	r7,zero,1000adc4 <_free_r+0xc4>
1000ad90:	29000217 	ldw	r4,8(r5)
1000ad94:	10c5883a 	add	r2,r2,r3
1000ad98:	00c40074 	movhi	r3,4097
1000ad9c:	18cb4d04 	addi	r3,r3,11572
1000ada0:	20c07526 	beq	r4,r3,1000af78 <_free_r+0x278>
1000ada4:	29c00317 	ldw	r7,12(r5)
1000ada8:	11400054 	ori	r5,r2,1
1000adac:	3087883a 	add	r3,r6,r2
1000adb0:	21c00315 	stw	r7,12(r4)
1000adb4:	39000215 	stw	r4,8(r7)
1000adb8:	31400115 	stw	r5,4(r6)
1000adbc:	18800015 	stw	r2,0(r3)
1000adc0:	00000406 	br	1000add4 <_free_r+0xd4>
1000adc4:	10c00054 	ori	r3,r2,1
1000adc8:	30c00115 	stw	r3,4(r6)
1000adcc:	3087883a 	add	r3,r6,r2
1000add0:	18800015 	stw	r2,0(r3)
1000add4:	00c07fc4 	movi	r3,511
1000add8:	18801736 	bltu	r3,r2,1000ae38 <_free_r+0x138>
1000addc:	1004d0fa 	srli	r2,r2,3
1000ade0:	01400044 	movi	r5,1
1000ade4:	49000117 	ldw	r4,4(r9)
1000ade8:	1087883a 	add	r3,r2,r2
1000adec:	18c7883a 	add	r3,r3,r3
1000adf0:	1005d0ba 	srai	r2,r2,2
1000adf4:	18c7883a 	add	r3,r3,r3
1000adf8:	1a47883a 	add	r3,r3,r9
1000adfc:	19c00217 	ldw	r7,8(r3)
1000ae00:	2884983a 	sll	r2,r5,r2
1000ae04:	30c00315 	stw	r3,12(r6)
1000ae08:	31c00215 	stw	r7,8(r6)
1000ae0c:	1104b03a 	or	r2,r2,r4
1000ae10:	19800215 	stw	r6,8(r3)
1000ae14:	48800115 	stw	r2,4(r9)
1000ae18:	39800315 	stw	r6,12(r7)
1000ae1c:	8809883a 	mov	r4,r17
1000ae20:	dfc00217 	ldw	ra,8(sp)
1000ae24:	dc400117 	ldw	r17,4(sp)
1000ae28:	dc000017 	ldw	r16,0(sp)
1000ae2c:	dec00304 	addi	sp,sp,12
1000ae30:	00103a81 	jmpi	100103a8 <__malloc_unlock>
1000ae34:	f800283a 	ret
1000ae38:	1006d27a 	srli	r3,r2,9
1000ae3c:	01000104 	movi	r4,4
1000ae40:	20c04036 	bltu	r4,r3,1000af44 <_free_r+0x244>
1000ae44:	1006d1ba 	srli	r3,r2,6
1000ae48:	19400e04 	addi	r5,r3,56
1000ae4c:	2947883a 	add	r3,r5,r5
1000ae50:	18c7883a 	add	r3,r3,r3
1000ae54:	18c7883a 	add	r3,r3,r3
1000ae58:	1a49883a 	add	r4,r3,r9
1000ae5c:	20c00217 	ldw	r3,8(r4)
1000ae60:	01c40074 	movhi	r7,4097
1000ae64:	39cb4b04 	addi	r7,r7,11564
1000ae68:	19003b26 	beq	r3,r4,1000af58 <_free_r+0x258>
1000ae6c:	01ffff04 	movi	r7,-4
1000ae70:	19400117 	ldw	r5,4(r3)
1000ae74:	29ca703a 	and	r5,r5,r7
1000ae78:	1140022e 	bgeu	r2,r5,1000ae84 <_free_r+0x184>
1000ae7c:	18c00217 	ldw	r3,8(r3)
1000ae80:	20fffb1e 	bne	r4,r3,1000ae70 <__alt_data_end+0xf800ae70>
1000ae84:	18800317 	ldw	r2,12(r3)
1000ae88:	30800315 	stw	r2,12(r6)
1000ae8c:	30c00215 	stw	r3,8(r6)
1000ae90:	11800215 	stw	r6,8(r2)
1000ae94:	19800315 	stw	r6,12(r3)
1000ae98:	003fe006 	br	1000ae1c <__alt_data_end+0xf800ae1c>
1000ae9c:	2100004c 	andi	r4,r4,1
1000aea0:	1885883a 	add	r2,r3,r2
1000aea4:	2000071e 	bne	r4,zero,1000aec4 <_free_r+0x1c4>
1000aea8:	817ffe17 	ldw	r5,-8(r16)
1000aeac:	314dc83a 	sub	r6,r6,r5
1000aeb0:	30c00317 	ldw	r3,12(r6)
1000aeb4:	31000217 	ldw	r4,8(r6)
1000aeb8:	1145883a 	add	r2,r2,r5
1000aebc:	20c00315 	stw	r3,12(r4)
1000aec0:	19000215 	stw	r4,8(r3)
1000aec4:	10c00054 	ori	r3,r2,1
1000aec8:	30c00115 	stw	r3,4(r6)
1000aecc:	00c40074 	movhi	r3,4097
1000aed0:	18d0d404 	addi	r3,r3,17232
1000aed4:	18c00017 	ldw	r3,0(r3)
1000aed8:	49800215 	stw	r6,8(r9)
1000aedc:	10ffcf36 	bltu	r2,r3,1000ae1c <__alt_data_end+0xf800ae1c>
1000aee0:	00840074 	movhi	r2,4097
1000aee4:	1097a804 	addi	r2,r2,24224
1000aee8:	11400017 	ldw	r5,0(r2)
1000aeec:	8809883a 	mov	r4,r17
1000aef0:	000abdc0 	call	1000abdc <_malloc_trim_r>
1000aef4:	003fc906 	br	1000ae1c <__alt_data_end+0xf800ae1c>
1000aef8:	28c9883a 	add	r4,r5,r3
1000aefc:	21000117 	ldw	r4,4(r4)
1000af00:	2100004c 	andi	r4,r4,1
1000af04:	20000a1e 	bne	r4,zero,1000af30 <_free_r+0x230>
1000af08:	29000317 	ldw	r4,12(r5)
1000af0c:	29400217 	ldw	r5,8(r5)
1000af10:	10c5883a 	add	r2,r2,r3
1000af14:	10c00054 	ori	r3,r2,1
1000af18:	29000315 	stw	r4,12(r5)
1000af1c:	21400215 	stw	r5,8(r4)
1000af20:	30c00115 	stw	r3,4(r6)
1000af24:	308d883a 	add	r6,r6,r2
1000af28:	30800015 	stw	r2,0(r6)
1000af2c:	003fbb06 	br	1000ae1c <__alt_data_end+0xf800ae1c>
1000af30:	10c00054 	ori	r3,r2,1
1000af34:	30c00115 	stw	r3,4(r6)
1000af38:	308d883a 	add	r6,r6,r2
1000af3c:	30800015 	stw	r2,0(r6)
1000af40:	003fb606 	br	1000ae1c <__alt_data_end+0xf800ae1c>
1000af44:	01000504 	movi	r4,20
1000af48:	20c01436 	bltu	r4,r3,1000af9c <_free_r+0x29c>
1000af4c:	194016c4 	addi	r5,r3,91
1000af50:	2947883a 	add	r3,r5,r5
1000af54:	003fbe06 	br	1000ae50 <__alt_data_end+0xf800ae50>
1000af58:	280bd0ba 	srai	r5,r5,2
1000af5c:	00800044 	movi	r2,1
1000af60:	39000117 	ldw	r4,4(r7)
1000af64:	114a983a 	sll	r5,r2,r5
1000af68:	1805883a 	mov	r2,r3
1000af6c:	2908b03a 	or	r4,r5,r4
1000af70:	39000115 	stw	r4,4(r7)
1000af74:	003fc406 	br	1000ae88 <__alt_data_end+0xf800ae88>
1000af78:	49800515 	stw	r6,20(r9)
1000af7c:	49800415 	stw	r6,16(r9)
1000af80:	10c00054 	ori	r3,r2,1
1000af84:	31000315 	stw	r4,12(r6)
1000af88:	31000215 	stw	r4,8(r6)
1000af8c:	30c00115 	stw	r3,4(r6)
1000af90:	308d883a 	add	r6,r6,r2
1000af94:	30800015 	stw	r2,0(r6)
1000af98:	003fa006 	br	1000ae1c <__alt_data_end+0xf800ae1c>
1000af9c:	01001504 	movi	r4,84
1000afa0:	20c00436 	bltu	r4,r3,1000afb4 <_free_r+0x2b4>
1000afa4:	1006d33a 	srli	r3,r2,12
1000afa8:	19401b84 	addi	r5,r3,110
1000afac:	2947883a 	add	r3,r5,r5
1000afb0:	003fa706 	br	1000ae50 <__alt_data_end+0xf800ae50>
1000afb4:	01005504 	movi	r4,340
1000afb8:	20c00436 	bltu	r4,r3,1000afcc <_free_r+0x2cc>
1000afbc:	1006d3fa 	srli	r3,r2,15
1000afc0:	19401dc4 	addi	r5,r3,119
1000afc4:	2947883a 	add	r3,r5,r5
1000afc8:	003fa106 	br	1000ae50 <__alt_data_end+0xf800ae50>
1000afcc:	01015504 	movi	r4,1364
1000afd0:	20c00436 	bltu	r4,r3,1000afe4 <_free_r+0x2e4>
1000afd4:	1006d4ba 	srli	r3,r2,18
1000afd8:	19401f04 	addi	r5,r3,124
1000afdc:	2947883a 	add	r3,r5,r5
1000afe0:	003f9b06 	br	1000ae50 <__alt_data_end+0xf800ae50>
1000afe4:	00c03f04 	movi	r3,252
1000afe8:	01401f84 	movi	r5,126
1000afec:	003f9806 	br	1000ae50 <__alt_data_end+0xf800ae50>

1000aff0 <_fwalk>:
1000aff0:	defff804 	addi	sp,sp,-32
1000aff4:	dd400515 	stw	r21,20(sp)
1000aff8:	2540b804 	addi	r21,r4,736
1000affc:	dd800615 	stw	r22,24(sp)
1000b000:	dd000415 	stw	r20,16(sp)
1000b004:	dfc00715 	stw	ra,28(sp)
1000b008:	dcc00315 	stw	r19,12(sp)
1000b00c:	dc800215 	stw	r18,8(sp)
1000b010:	dc400115 	stw	r17,4(sp)
1000b014:	dc000015 	stw	r16,0(sp)
1000b018:	2829883a 	mov	r20,r5
1000b01c:	002d883a 	mov	r22,zero
1000b020:	000ab9c0 	call	1000ab9c <__sfp_lock_acquire>
1000b024:	a8001426 	beq	r21,zero,1000b078 <_fwalk+0x88>
1000b028:	04ffffc4 	movi	r19,-1
1000b02c:	ac400117 	ldw	r17,4(r21)
1000b030:	ac800217 	ldw	r18,8(r21)
1000b034:	8c7fffc4 	addi	r17,r17,-1
1000b038:	88000d16 	blt	r17,zero,1000b070 <_fwalk+0x80>
1000b03c:	94000304 	addi	r16,r18,12
1000b040:	94800384 	addi	r18,r18,14
1000b044:	80c0000f 	ldh	r3,0(r16)
1000b048:	8c7fffc4 	addi	r17,r17,-1
1000b04c:	813ffd04 	addi	r4,r16,-12
1000b050:	18000426 	beq	r3,zero,1000b064 <_fwalk+0x74>
1000b054:	90c0000f 	ldh	r3,0(r18)
1000b058:	1cc00226 	beq	r3,r19,1000b064 <_fwalk+0x74>
1000b05c:	a03ee83a 	callr	r20
1000b060:	b0acb03a 	or	r22,r22,r2
1000b064:	84001a04 	addi	r16,r16,104
1000b068:	94801a04 	addi	r18,r18,104
1000b06c:	8cfff51e 	bne	r17,r19,1000b044 <__alt_data_end+0xf800b044>
1000b070:	ad400017 	ldw	r21,0(r21)
1000b074:	a83fed1e 	bne	r21,zero,1000b02c <__alt_data_end+0xf800b02c>
1000b078:	000aba00 	call	1000aba0 <__sfp_lock_release>
1000b07c:	b005883a 	mov	r2,r22
1000b080:	dfc00717 	ldw	ra,28(sp)
1000b084:	dd800617 	ldw	r22,24(sp)
1000b088:	dd400517 	ldw	r21,20(sp)
1000b08c:	dd000417 	ldw	r20,16(sp)
1000b090:	dcc00317 	ldw	r19,12(sp)
1000b094:	dc800217 	ldw	r18,8(sp)
1000b098:	dc400117 	ldw	r17,4(sp)
1000b09c:	dc000017 	ldw	r16,0(sp)
1000b0a0:	dec00804 	addi	sp,sp,32
1000b0a4:	f800283a 	ret

1000b0a8 <_fwalk_reent>:
1000b0a8:	defff804 	addi	sp,sp,-32
1000b0ac:	dd400515 	stw	r21,20(sp)
1000b0b0:	2540b804 	addi	r21,r4,736
1000b0b4:	dd800615 	stw	r22,24(sp)
1000b0b8:	dd000415 	stw	r20,16(sp)
1000b0bc:	dcc00315 	stw	r19,12(sp)
1000b0c0:	dfc00715 	stw	ra,28(sp)
1000b0c4:	dc800215 	stw	r18,8(sp)
1000b0c8:	dc400115 	stw	r17,4(sp)
1000b0cc:	dc000015 	stw	r16,0(sp)
1000b0d0:	2027883a 	mov	r19,r4
1000b0d4:	2829883a 	mov	r20,r5
1000b0d8:	002d883a 	mov	r22,zero
1000b0dc:	000ab9c0 	call	1000ab9c <__sfp_lock_acquire>
1000b0e0:	a8001326 	beq	r21,zero,1000b130 <_fwalk_reent+0x88>
1000b0e4:	04bfffc4 	movi	r18,-1
1000b0e8:	ac400117 	ldw	r17,4(r21)
1000b0ec:	ac000217 	ldw	r16,8(r21)
1000b0f0:	8c7fffc4 	addi	r17,r17,-1
1000b0f4:	88000c16 	blt	r17,zero,1000b128 <_fwalk_reent+0x80>
1000b0f8:	84000304 	addi	r16,r16,12
1000b0fc:	80c0000f 	ldh	r3,0(r16)
1000b100:	8c7fffc4 	addi	r17,r17,-1
1000b104:	817ffd04 	addi	r5,r16,-12
1000b108:	18000526 	beq	r3,zero,1000b120 <_fwalk_reent+0x78>
1000b10c:	80c0008f 	ldh	r3,2(r16)
1000b110:	9809883a 	mov	r4,r19
1000b114:	1c800226 	beq	r3,r18,1000b120 <_fwalk_reent+0x78>
1000b118:	a03ee83a 	callr	r20
1000b11c:	b0acb03a 	or	r22,r22,r2
1000b120:	84001a04 	addi	r16,r16,104
1000b124:	8cbff51e 	bne	r17,r18,1000b0fc <__alt_data_end+0xf800b0fc>
1000b128:	ad400017 	ldw	r21,0(r21)
1000b12c:	a83fee1e 	bne	r21,zero,1000b0e8 <__alt_data_end+0xf800b0e8>
1000b130:	000aba00 	call	1000aba0 <__sfp_lock_release>
1000b134:	b005883a 	mov	r2,r22
1000b138:	dfc00717 	ldw	ra,28(sp)
1000b13c:	dd800617 	ldw	r22,24(sp)
1000b140:	dd400517 	ldw	r21,20(sp)
1000b144:	dd000417 	ldw	r20,16(sp)
1000b148:	dcc00317 	ldw	r19,12(sp)
1000b14c:	dc800217 	ldw	r18,8(sp)
1000b150:	dc400117 	ldw	r17,4(sp)
1000b154:	dc000017 	ldw	r16,0(sp)
1000b158:	dec00804 	addi	sp,sp,32
1000b15c:	f800283a 	ret

1000b160 <_setlocale_r>:
1000b160:	30001b26 	beq	r6,zero,1000b1d0 <_setlocale_r+0x70>
1000b164:	01440074 	movhi	r5,4097
1000b168:	defffe04 	addi	sp,sp,-8
1000b16c:	2949c304 	addi	r5,r5,9996
1000b170:	3009883a 	mov	r4,r6
1000b174:	dc000015 	stw	r16,0(sp)
1000b178:	dfc00115 	stw	ra,4(sp)
1000b17c:	3021883a 	mov	r16,r6
1000b180:	000d2240 	call	1000d224 <strcmp>
1000b184:	1000061e 	bne	r2,zero,1000b1a0 <_setlocale_r+0x40>
1000b188:	00840074 	movhi	r2,4097
1000b18c:	1089a504 	addi	r2,r2,9876
1000b190:	dfc00117 	ldw	ra,4(sp)
1000b194:	dc000017 	ldw	r16,0(sp)
1000b198:	dec00204 	addi	sp,sp,8
1000b19c:	f800283a 	ret
1000b1a0:	01440074 	movhi	r5,4097
1000b1a4:	2949a504 	addi	r5,r5,9876
1000b1a8:	8009883a 	mov	r4,r16
1000b1ac:	000d2240 	call	1000d224 <strcmp>
1000b1b0:	103ff526 	beq	r2,zero,1000b188 <__alt_data_end+0xf800b188>
1000b1b4:	01440074 	movhi	r5,4097
1000b1b8:	2949ae04 	addi	r5,r5,9912
1000b1bc:	8009883a 	mov	r4,r16
1000b1c0:	000d2240 	call	1000d224 <strcmp>
1000b1c4:	103ff026 	beq	r2,zero,1000b188 <__alt_data_end+0xf800b188>
1000b1c8:	0005883a 	mov	r2,zero
1000b1cc:	003ff006 	br	1000b190 <__alt_data_end+0xf800b190>
1000b1d0:	00840074 	movhi	r2,4097
1000b1d4:	1089a504 	addi	r2,r2,9876
1000b1d8:	f800283a 	ret

1000b1dc <__locale_charset>:
1000b1dc:	00840074 	movhi	r2,4097
1000b1e0:	108b3504 	addi	r2,r2,11476
1000b1e4:	f800283a 	ret

1000b1e8 <__locale_mb_cur_max>:
1000b1e8:	00840074 	movhi	r2,4097
1000b1ec:	1090d204 	addi	r2,r2,17224
1000b1f0:	10800017 	ldw	r2,0(r2)
1000b1f4:	f800283a 	ret

1000b1f8 <__locale_msgcharset>:
1000b1f8:	00840074 	movhi	r2,4097
1000b1fc:	108b2d04 	addi	r2,r2,11444
1000b200:	f800283a 	ret

1000b204 <__locale_cjk_lang>:
1000b204:	0005883a 	mov	r2,zero
1000b208:	f800283a 	ret

1000b20c <_localeconv_r>:
1000b20c:	00840074 	movhi	r2,4097
1000b210:	108b3d04 	addi	r2,r2,11508
1000b214:	f800283a 	ret

1000b218 <setlocale>:
1000b218:	00c40074 	movhi	r3,4097
1000b21c:	18d0d104 	addi	r3,r3,17220
1000b220:	2005883a 	mov	r2,r4
1000b224:	19000017 	ldw	r4,0(r3)
1000b228:	280d883a 	mov	r6,r5
1000b22c:	100b883a 	mov	r5,r2
1000b230:	000b1601 	jmpi	1000b160 <_setlocale_r>

1000b234 <localeconv>:
1000b234:	00840074 	movhi	r2,4097
1000b238:	108b3d04 	addi	r2,r2,11508
1000b23c:	f800283a 	ret

1000b240 <__smakebuf_r>:
1000b240:	2880030b 	ldhu	r2,12(r5)
1000b244:	10c0008c 	andi	r3,r2,2
1000b248:	1800401e 	bne	r3,zero,1000b34c <__smakebuf_r+0x10c>
1000b24c:	deffec04 	addi	sp,sp,-80
1000b250:	dc000f15 	stw	r16,60(sp)
1000b254:	2821883a 	mov	r16,r5
1000b258:	2940038f 	ldh	r5,14(r5)
1000b25c:	dc401015 	stw	r17,64(sp)
1000b260:	dfc01315 	stw	ra,76(sp)
1000b264:	dcc01215 	stw	r19,72(sp)
1000b268:	dc801115 	stw	r18,68(sp)
1000b26c:	2023883a 	mov	r17,r4
1000b270:	28001b16 	blt	r5,zero,1000b2e0 <__smakebuf_r+0xa0>
1000b274:	d80d883a 	mov	r6,sp
1000b278:	000eea40 	call	1000eea4 <_fstat_r>
1000b27c:	10001716 	blt	r2,zero,1000b2dc <__smakebuf_r+0x9c>
1000b280:	d8800117 	ldw	r2,4(sp)
1000b284:	00e00014 	movui	r3,32768
1000b288:	10bc000c 	andi	r2,r2,61440
1000b28c:	10c03726 	beq	r2,r3,1000b36c <__smakebuf_r+0x12c>
1000b290:	80c0030b 	ldhu	r3,12(r16)
1000b294:	18c20014 	ori	r3,r3,2048
1000b298:	80c0030d 	sth	r3,12(r16)
1000b29c:	00c80004 	movi	r3,8192
1000b2a0:	10c03c1e 	bne	r2,r3,1000b394 <__smakebuf_r+0x154>
1000b2a4:	8140038f 	ldh	r5,14(r16)
1000b2a8:	8809883a 	mov	r4,r17
1000b2ac:	000f3a00 	call	1000f3a0 <_isatty_r>
1000b2b0:	10004e26 	beq	r2,zero,1000b3ec <__smakebuf_r+0x1ac>
1000b2b4:	8080030b 	ldhu	r2,12(r16)
1000b2b8:	04c00044 	movi	r19,1
1000b2bc:	80c010c4 	addi	r3,r16,67
1000b2c0:	14c4b03a 	or	r2,r2,r19
1000b2c4:	8080030d 	sth	r2,12(r16)
1000b2c8:	80c00015 	stw	r3,0(r16)
1000b2cc:	80c00415 	stw	r3,16(r16)
1000b2d0:	84c00515 	stw	r19,20(r16)
1000b2d4:	04810004 	movi	r18,1024
1000b2d8:	00000706 	br	1000b2f8 <__smakebuf_r+0xb8>
1000b2dc:	8080030b 	ldhu	r2,12(r16)
1000b2e0:	10c0200c 	andi	r3,r2,128
1000b2e4:	18001f1e 	bne	r3,zero,1000b364 <__smakebuf_r+0x124>
1000b2e8:	04810004 	movi	r18,1024
1000b2ec:	10820014 	ori	r2,r2,2048
1000b2f0:	8080030d 	sth	r2,12(r16)
1000b2f4:	0027883a 	mov	r19,zero
1000b2f8:	8809883a 	mov	r4,r17
1000b2fc:	900b883a 	mov	r5,r18
1000b300:	000b3f80 	call	1000b3f8 <_malloc_r>
1000b304:	10002e26 	beq	r2,zero,1000b3c0 <__smakebuf_r+0x180>
1000b308:	80c0030b 	ldhu	r3,12(r16)
1000b30c:	01040074 	movhi	r4,4097
1000b310:	212a0e04 	addi	r4,r4,-22472
1000b314:	89000f15 	stw	r4,60(r17)
1000b318:	18c02014 	ori	r3,r3,128
1000b31c:	80c0030d 	sth	r3,12(r16)
1000b320:	80800015 	stw	r2,0(r16)
1000b324:	80800415 	stw	r2,16(r16)
1000b328:	84800515 	stw	r18,20(r16)
1000b32c:	98001c1e 	bne	r19,zero,1000b3a0 <__smakebuf_r+0x160>
1000b330:	dfc01317 	ldw	ra,76(sp)
1000b334:	dcc01217 	ldw	r19,72(sp)
1000b338:	dc801117 	ldw	r18,68(sp)
1000b33c:	dc401017 	ldw	r17,64(sp)
1000b340:	dc000f17 	ldw	r16,60(sp)
1000b344:	dec01404 	addi	sp,sp,80
1000b348:	f800283a 	ret
1000b34c:	288010c4 	addi	r2,r5,67
1000b350:	28800015 	stw	r2,0(r5)
1000b354:	28800415 	stw	r2,16(r5)
1000b358:	00800044 	movi	r2,1
1000b35c:	28800515 	stw	r2,20(r5)
1000b360:	f800283a 	ret
1000b364:	04801004 	movi	r18,64
1000b368:	003fe006 	br	1000b2ec <__alt_data_end+0xf800b2ec>
1000b36c:	81000a17 	ldw	r4,40(r16)
1000b370:	00c40074 	movhi	r3,4097
1000b374:	18f47004 	addi	r3,r3,-11840
1000b378:	20ffc51e 	bne	r4,r3,1000b290 <__alt_data_end+0xf800b290>
1000b37c:	80c0030b 	ldhu	r3,12(r16)
1000b380:	01010004 	movi	r4,1024
1000b384:	81001315 	stw	r4,76(r16)
1000b388:	1906b03a 	or	r3,r3,r4
1000b38c:	80c0030d 	sth	r3,12(r16)
1000b390:	003fc206 	br	1000b29c <__alt_data_end+0xf800b29c>
1000b394:	0027883a 	mov	r19,zero
1000b398:	04810004 	movi	r18,1024
1000b39c:	003fd606 	br	1000b2f8 <__alt_data_end+0xf800b2f8>
1000b3a0:	8140038f 	ldh	r5,14(r16)
1000b3a4:	8809883a 	mov	r4,r17
1000b3a8:	000f3a00 	call	1000f3a0 <_isatty_r>
1000b3ac:	103fe026 	beq	r2,zero,1000b330 <__alt_data_end+0xf800b330>
1000b3b0:	8080030b 	ldhu	r2,12(r16)
1000b3b4:	10800054 	ori	r2,r2,1
1000b3b8:	8080030d 	sth	r2,12(r16)
1000b3bc:	003fdc06 	br	1000b330 <__alt_data_end+0xf800b330>
1000b3c0:	8080030b 	ldhu	r2,12(r16)
1000b3c4:	10c0800c 	andi	r3,r2,512
1000b3c8:	183fd91e 	bne	r3,zero,1000b330 <__alt_data_end+0xf800b330>
1000b3cc:	10800094 	ori	r2,r2,2
1000b3d0:	80c010c4 	addi	r3,r16,67
1000b3d4:	8080030d 	sth	r2,12(r16)
1000b3d8:	00800044 	movi	r2,1
1000b3dc:	80c00015 	stw	r3,0(r16)
1000b3e0:	80c00415 	stw	r3,16(r16)
1000b3e4:	80800515 	stw	r2,20(r16)
1000b3e8:	003fd106 	br	1000b330 <__alt_data_end+0xf800b330>
1000b3ec:	04c00044 	movi	r19,1
1000b3f0:	04810004 	movi	r18,1024
1000b3f4:	003fc006 	br	1000b2f8 <__alt_data_end+0xf800b2f8>

1000b3f8 <_malloc_r>:
1000b3f8:	defff504 	addi	sp,sp,-44
1000b3fc:	dc800315 	stw	r18,12(sp)
1000b400:	dfc00a15 	stw	ra,40(sp)
1000b404:	df000915 	stw	fp,36(sp)
1000b408:	ddc00815 	stw	r23,32(sp)
1000b40c:	dd800715 	stw	r22,28(sp)
1000b410:	dd400615 	stw	r21,24(sp)
1000b414:	dd000515 	stw	r20,20(sp)
1000b418:	dcc00415 	stw	r19,16(sp)
1000b41c:	dc400215 	stw	r17,8(sp)
1000b420:	dc000115 	stw	r16,4(sp)
1000b424:	288002c4 	addi	r2,r5,11
1000b428:	00c00584 	movi	r3,22
1000b42c:	2025883a 	mov	r18,r4
1000b430:	18802a2e 	bgeu	r3,r2,1000b4dc <_malloc_r+0xe4>
1000b434:	047ffe04 	movi	r17,-8
1000b438:	1462703a 	and	r17,r2,r17
1000b43c:	88009e16 	blt	r17,zero,1000b6b8 <_malloc_r+0x2c0>
1000b440:	89409d36 	bltu	r17,r5,1000b6b8 <_malloc_r+0x2c0>
1000b444:	00103880 	call	10010388 <__malloc_lock>
1000b448:	00807dc4 	movi	r2,503
1000b44c:	14402736 	bltu	r2,r17,1000b4ec <_malloc_r+0xf4>
1000b450:	8806d0fa 	srli	r3,r17,3
1000b454:	04c40074 	movhi	r19,4097
1000b458:	9ccb4b04 	addi	r19,r19,11564
1000b45c:	18c5883a 	add	r2,r3,r3
1000b460:	1085883a 	add	r2,r2,r2
1000b464:	1085883a 	add	r2,r2,r2
1000b468:	9885883a 	add	r2,r19,r2
1000b46c:	14000317 	ldw	r16,12(r2)
1000b470:	80814a26 	beq	r16,r2,1000b99c <_malloc_r+0x5a4>
1000b474:	80c00117 	ldw	r3,4(r16)
1000b478:	81000317 	ldw	r4,12(r16)
1000b47c:	00bfff04 	movi	r2,-4
1000b480:	1884703a 	and	r2,r3,r2
1000b484:	81400217 	ldw	r5,8(r16)
1000b488:	8085883a 	add	r2,r16,r2
1000b48c:	10c00117 	ldw	r3,4(r2)
1000b490:	29000315 	stw	r4,12(r5)
1000b494:	21400215 	stw	r5,8(r4)
1000b498:	18c00054 	ori	r3,r3,1
1000b49c:	10c00115 	stw	r3,4(r2)
1000b4a0:	9009883a 	mov	r4,r18
1000b4a4:	00103a80 	call	100103a8 <__malloc_unlock>
1000b4a8:	80800204 	addi	r2,r16,8
1000b4ac:	dfc00a17 	ldw	ra,40(sp)
1000b4b0:	df000917 	ldw	fp,36(sp)
1000b4b4:	ddc00817 	ldw	r23,32(sp)
1000b4b8:	dd800717 	ldw	r22,28(sp)
1000b4bc:	dd400617 	ldw	r21,24(sp)
1000b4c0:	dd000517 	ldw	r20,20(sp)
1000b4c4:	dcc00417 	ldw	r19,16(sp)
1000b4c8:	dc800317 	ldw	r18,12(sp)
1000b4cc:	dc400217 	ldw	r17,8(sp)
1000b4d0:	dc000117 	ldw	r16,4(sp)
1000b4d4:	dec00b04 	addi	sp,sp,44
1000b4d8:	f800283a 	ret
1000b4dc:	04400404 	movi	r17,16
1000b4e0:	89407536 	bltu	r17,r5,1000b6b8 <_malloc_r+0x2c0>
1000b4e4:	00103880 	call	10010388 <__malloc_lock>
1000b4e8:	003fd906 	br	1000b450 <__alt_data_end+0xf800b450>
1000b4ec:	8806d27a 	srli	r3,r17,9
1000b4f0:	18007526 	beq	r3,zero,1000b6c8 <_malloc_r+0x2d0>
1000b4f4:	00800104 	movi	r2,4
1000b4f8:	10c0ef36 	bltu	r2,r3,1000b8b8 <_malloc_r+0x4c0>
1000b4fc:	8806d1ba 	srli	r3,r17,6
1000b500:	19c00e04 	addi	r7,r3,56
1000b504:	39cb883a 	add	r5,r7,r7
1000b508:	04c40074 	movhi	r19,4097
1000b50c:	294b883a 	add	r5,r5,r5
1000b510:	9ccb4b04 	addi	r19,r19,11564
1000b514:	294b883a 	add	r5,r5,r5
1000b518:	994b883a 	add	r5,r19,r5
1000b51c:	2c000317 	ldw	r16,12(r5)
1000b520:	2c000e26 	beq	r5,r16,1000b55c <_malloc_r+0x164>
1000b524:	80800117 	ldw	r2,4(r16)
1000b528:	01bfff04 	movi	r6,-4
1000b52c:	010003c4 	movi	r4,15
1000b530:	1184703a 	and	r2,r2,r6
1000b534:	1447c83a 	sub	r3,r2,r17
1000b538:	20c00716 	blt	r4,r3,1000b558 <_malloc_r+0x160>
1000b53c:	1800650e 	bge	r3,zero,1000b6d4 <_malloc_r+0x2dc>
1000b540:	84000317 	ldw	r16,12(r16)
1000b544:	2c000526 	beq	r5,r16,1000b55c <_malloc_r+0x164>
1000b548:	80800117 	ldw	r2,4(r16)
1000b54c:	1184703a 	and	r2,r2,r6
1000b550:	1447c83a 	sub	r3,r2,r17
1000b554:	20fff90e 	bge	r4,r3,1000b53c <__alt_data_end+0xf800b53c>
1000b558:	39ffffc4 	addi	r7,r7,-1
1000b55c:	38c00044 	addi	r3,r7,1
1000b560:	01840074 	movhi	r6,4097
1000b564:	9c000417 	ldw	r16,16(r19)
1000b568:	318b4b04 	addi	r6,r6,11564
1000b56c:	32400204 	addi	r9,r6,8
1000b570:	82410326 	beq	r16,r9,1000b980 <_malloc_r+0x588>
1000b574:	81000117 	ldw	r4,4(r16)
1000b578:	00bfff04 	movi	r2,-4
1000b57c:	208e703a 	and	r7,r4,r2
1000b580:	3c45c83a 	sub	r2,r7,r17
1000b584:	010003c4 	movi	r4,15
1000b588:	2080ee16 	blt	r4,r2,1000b944 <_malloc_r+0x54c>
1000b58c:	32400515 	stw	r9,20(r6)
1000b590:	32400415 	stw	r9,16(r6)
1000b594:	1000510e 	bge	r2,zero,1000b6dc <_malloc_r+0x2e4>
1000b598:	00807fc4 	movi	r2,511
1000b59c:	11c0ce36 	bltu	r2,r7,1000b8d8 <_malloc_r+0x4e0>
1000b5a0:	3808d0fa 	srli	r4,r7,3
1000b5a4:	01c00044 	movi	r7,1
1000b5a8:	30800117 	ldw	r2,4(r6)
1000b5ac:	210b883a 	add	r5,r4,r4
1000b5b0:	294b883a 	add	r5,r5,r5
1000b5b4:	2009d0ba 	srai	r4,r4,2
1000b5b8:	294b883a 	add	r5,r5,r5
1000b5bc:	298b883a 	add	r5,r5,r6
1000b5c0:	2a000217 	ldw	r8,8(r5)
1000b5c4:	3908983a 	sll	r4,r7,r4
1000b5c8:	81400315 	stw	r5,12(r16)
1000b5cc:	82000215 	stw	r8,8(r16)
1000b5d0:	2088b03a 	or	r4,r4,r2
1000b5d4:	2c000215 	stw	r16,8(r5)
1000b5d8:	31000115 	stw	r4,4(r6)
1000b5dc:	44000315 	stw	r16,12(r8)
1000b5e0:	1805d0ba 	srai	r2,r3,2
1000b5e4:	01400044 	movi	r5,1
1000b5e8:	288a983a 	sll	r5,r5,r2
1000b5ec:	21404336 	bltu	r4,r5,1000b6fc <_malloc_r+0x304>
1000b5f0:	2144703a 	and	r2,r4,r5
1000b5f4:	10000a1e 	bne	r2,zero,1000b620 <_malloc_r+0x228>
1000b5f8:	00bfff04 	movi	r2,-4
1000b5fc:	294b883a 	add	r5,r5,r5
1000b600:	1886703a 	and	r3,r3,r2
1000b604:	2144703a 	and	r2,r4,r5
1000b608:	18c00104 	addi	r3,r3,4
1000b60c:	1000041e 	bne	r2,zero,1000b620 <_malloc_r+0x228>
1000b610:	294b883a 	add	r5,r5,r5
1000b614:	2144703a 	and	r2,r4,r5
1000b618:	18c00104 	addi	r3,r3,4
1000b61c:	103ffc26 	beq	r2,zero,1000b610 <__alt_data_end+0xf800b610>
1000b620:	023fff04 	movi	r8,-4
1000b624:	01c003c4 	movi	r7,15
1000b628:	18c5883a 	add	r2,r3,r3
1000b62c:	1085883a 	add	r2,r2,r2
1000b630:	1085883a 	add	r2,r2,r2
1000b634:	9895883a 	add	r10,r19,r2
1000b638:	52c00304 	addi	r11,r10,12
1000b63c:	1819883a 	mov	r12,r3
1000b640:	5c000017 	ldw	r16,0(r11)
1000b644:	59bffd04 	addi	r6,r11,-12
1000b648:	8180041e 	bne	r16,r6,1000b65c <_malloc_r+0x264>
1000b64c:	0000ce06 	br	1000b988 <_malloc_r+0x590>
1000b650:	2000d70e 	bge	r4,zero,1000b9b0 <_malloc_r+0x5b8>
1000b654:	84000317 	ldw	r16,12(r16)
1000b658:	8180cb26 	beq	r16,r6,1000b988 <_malloc_r+0x590>
1000b65c:	80800117 	ldw	r2,4(r16)
1000b660:	1204703a 	and	r2,r2,r8
1000b664:	1449c83a 	sub	r4,r2,r17
1000b668:	393ff90e 	bge	r7,r4,1000b650 <__alt_data_end+0xf800b650>
1000b66c:	80800317 	ldw	r2,12(r16)
1000b670:	80c00217 	ldw	r3,8(r16)
1000b674:	89400054 	ori	r5,r17,1
1000b678:	81400115 	stw	r5,4(r16)
1000b67c:	18800315 	stw	r2,12(r3)
1000b680:	10c00215 	stw	r3,8(r2)
1000b684:	8463883a 	add	r17,r16,r17
1000b688:	9c400515 	stw	r17,20(r19)
1000b68c:	9c400415 	stw	r17,16(r19)
1000b690:	20800054 	ori	r2,r4,1
1000b694:	88800115 	stw	r2,4(r17)
1000b698:	8a400315 	stw	r9,12(r17)
1000b69c:	8a400215 	stw	r9,8(r17)
1000b6a0:	8923883a 	add	r17,r17,r4
1000b6a4:	89000015 	stw	r4,0(r17)
1000b6a8:	9009883a 	mov	r4,r18
1000b6ac:	00103a80 	call	100103a8 <__malloc_unlock>
1000b6b0:	80800204 	addi	r2,r16,8
1000b6b4:	003f7d06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b6b8:	00800304 	movi	r2,12
1000b6bc:	90800015 	stw	r2,0(r18)
1000b6c0:	0005883a 	mov	r2,zero
1000b6c4:	003f7906 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b6c8:	01401f84 	movi	r5,126
1000b6cc:	01c00fc4 	movi	r7,63
1000b6d0:	003f8d06 	br	1000b508 <__alt_data_end+0xf800b508>
1000b6d4:	81000317 	ldw	r4,12(r16)
1000b6d8:	003f6a06 	br	1000b484 <__alt_data_end+0xf800b484>
1000b6dc:	81c5883a 	add	r2,r16,r7
1000b6e0:	10c00117 	ldw	r3,4(r2)
1000b6e4:	9009883a 	mov	r4,r18
1000b6e8:	18c00054 	ori	r3,r3,1
1000b6ec:	10c00115 	stw	r3,4(r2)
1000b6f0:	00103a80 	call	100103a8 <__malloc_unlock>
1000b6f4:	80800204 	addi	r2,r16,8
1000b6f8:	003f6c06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b6fc:	9c000217 	ldw	r16,8(r19)
1000b700:	00bfff04 	movi	r2,-4
1000b704:	85800117 	ldw	r22,4(r16)
1000b708:	b0ac703a 	and	r22,r22,r2
1000b70c:	b4400336 	bltu	r22,r17,1000b71c <_malloc_r+0x324>
1000b710:	b445c83a 	sub	r2,r22,r17
1000b714:	00c003c4 	movi	r3,15
1000b718:	18805d16 	blt	r3,r2,1000b890 <_malloc_r+0x498>
1000b71c:	05c40074 	movhi	r23,4097
1000b720:	00840074 	movhi	r2,4097
1000b724:	bdd0d304 	addi	r23,r23,17228
1000b728:	1097a804 	addi	r2,r2,24224
1000b72c:	15400017 	ldw	r21,0(r2)
1000b730:	b9000017 	ldw	r4,0(r23)
1000b734:	00ffffc4 	movi	r3,-1
1000b738:	858d883a 	add	r6,r16,r22
1000b73c:	8d6b883a 	add	r21,r17,r21
1000b740:	20c0e426 	beq	r4,r3,1000bad4 <_malloc_r+0x6dc>
1000b744:	ad4403c4 	addi	r21,r21,4111
1000b748:	00fc0004 	movi	r3,-4096
1000b74c:	a8ea703a 	and	r21,r21,r3
1000b750:	9009883a 	mov	r4,r18
1000b754:	a80b883a 	mov	r5,r21
1000b758:	d9800015 	stw	r6,0(sp)
1000b75c:	000d0940 	call	1000d094 <_sbrk_r>
1000b760:	00ffffc4 	movi	r3,-1
1000b764:	1029883a 	mov	r20,r2
1000b768:	d9800017 	ldw	r6,0(sp)
1000b76c:	10c0a426 	beq	r2,r3,1000ba00 <_malloc_r+0x608>
1000b770:	1180a236 	bltu	r2,r6,1000b9fc <_malloc_r+0x604>
1000b774:	07040074 	movhi	fp,4097
1000b778:	e717b104 	addi	fp,fp,24260
1000b77c:	e0c00017 	ldw	r3,0(fp)
1000b780:	a8c7883a 	add	r3,r21,r3
1000b784:	e0c00015 	stw	r3,0(fp)
1000b788:	3500da26 	beq	r6,r20,1000baf4 <_malloc_r+0x6fc>
1000b78c:	b9000017 	ldw	r4,0(r23)
1000b790:	00bfffc4 	movi	r2,-1
1000b794:	2080e426 	beq	r4,r2,1000bb28 <_malloc_r+0x730>
1000b798:	a185c83a 	sub	r2,r20,r6
1000b79c:	1885883a 	add	r2,r3,r2
1000b7a0:	e0800015 	stw	r2,0(fp)
1000b7a4:	a0c001cc 	andi	r3,r20,7
1000b7a8:	1800b526 	beq	r3,zero,1000ba80 <_malloc_r+0x688>
1000b7ac:	a0e9c83a 	sub	r20,r20,r3
1000b7b0:	00840204 	movi	r2,4104
1000b7b4:	a5000204 	addi	r20,r20,8
1000b7b8:	10c7c83a 	sub	r3,r2,r3
1000b7bc:	a545883a 	add	r2,r20,r21
1000b7c0:	1083ffcc 	andi	r2,r2,4095
1000b7c4:	18abc83a 	sub	r21,r3,r2
1000b7c8:	9009883a 	mov	r4,r18
1000b7cc:	a80b883a 	mov	r5,r21
1000b7d0:	000d0940 	call	1000d094 <_sbrk_r>
1000b7d4:	00ffffc4 	movi	r3,-1
1000b7d8:	10c0d026 	beq	r2,r3,1000bb1c <_malloc_r+0x724>
1000b7dc:	1507c83a 	sub	r3,r2,r20
1000b7e0:	a8c7883a 	add	r3,r21,r3
1000b7e4:	18c00054 	ori	r3,r3,1
1000b7e8:	e0800017 	ldw	r2,0(fp)
1000b7ec:	9d000215 	stw	r20,8(r19)
1000b7f0:	a0c00115 	stw	r3,4(r20)
1000b7f4:	a887883a 	add	r3,r21,r2
1000b7f8:	e0c00015 	stw	r3,0(fp)
1000b7fc:	84c00e26 	beq	r16,r19,1000b838 <_malloc_r+0x440>
1000b800:	018003c4 	movi	r6,15
1000b804:	3580a02e 	bgeu	r6,r22,1000ba88 <_malloc_r+0x690>
1000b808:	81400117 	ldw	r5,4(r16)
1000b80c:	013ffe04 	movi	r4,-8
1000b810:	b0bffd04 	addi	r2,r22,-12
1000b814:	1104703a 	and	r2,r2,r4
1000b818:	2900004c 	andi	r4,r5,1
1000b81c:	1108b03a 	or	r4,r2,r4
1000b820:	81000115 	stw	r4,4(r16)
1000b824:	01400144 	movi	r5,5
1000b828:	8089883a 	add	r4,r16,r2
1000b82c:	21400115 	stw	r5,4(r4)
1000b830:	21400215 	stw	r5,8(r4)
1000b834:	3080c036 	bltu	r6,r2,1000bb38 <_malloc_r+0x740>
1000b838:	00840074 	movhi	r2,4097
1000b83c:	1097a704 	addi	r2,r2,24220
1000b840:	11000017 	ldw	r4,0(r2)
1000b844:	20c0012e 	bgeu	r4,r3,1000b84c <_malloc_r+0x454>
1000b848:	10c00015 	stw	r3,0(r2)
1000b84c:	00840074 	movhi	r2,4097
1000b850:	1097a604 	addi	r2,r2,24216
1000b854:	11000017 	ldw	r4,0(r2)
1000b858:	9c000217 	ldw	r16,8(r19)
1000b85c:	20c0012e 	bgeu	r4,r3,1000b864 <_malloc_r+0x46c>
1000b860:	10c00015 	stw	r3,0(r2)
1000b864:	80c00117 	ldw	r3,4(r16)
1000b868:	00bfff04 	movi	r2,-4
1000b86c:	1886703a 	and	r3,r3,r2
1000b870:	1c45c83a 	sub	r2,r3,r17
1000b874:	1c400236 	bltu	r3,r17,1000b880 <_malloc_r+0x488>
1000b878:	00c003c4 	movi	r3,15
1000b87c:	18800416 	blt	r3,r2,1000b890 <_malloc_r+0x498>
1000b880:	9009883a 	mov	r4,r18
1000b884:	00103a80 	call	100103a8 <__malloc_unlock>
1000b888:	0005883a 	mov	r2,zero
1000b88c:	003f0706 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b890:	88c00054 	ori	r3,r17,1
1000b894:	80c00115 	stw	r3,4(r16)
1000b898:	8463883a 	add	r17,r16,r17
1000b89c:	10800054 	ori	r2,r2,1
1000b8a0:	9c400215 	stw	r17,8(r19)
1000b8a4:	88800115 	stw	r2,4(r17)
1000b8a8:	9009883a 	mov	r4,r18
1000b8ac:	00103a80 	call	100103a8 <__malloc_unlock>
1000b8b0:	80800204 	addi	r2,r16,8
1000b8b4:	003efd06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b8b8:	00800504 	movi	r2,20
1000b8bc:	10c0482e 	bgeu	r2,r3,1000b9e0 <_malloc_r+0x5e8>
1000b8c0:	00801504 	movi	r2,84
1000b8c4:	10c06836 	bltu	r2,r3,1000ba68 <_malloc_r+0x670>
1000b8c8:	8806d33a 	srli	r3,r17,12
1000b8cc:	19c01b84 	addi	r7,r3,110
1000b8d0:	39cb883a 	add	r5,r7,r7
1000b8d4:	003f0c06 	br	1000b508 <__alt_data_end+0xf800b508>
1000b8d8:	3804d27a 	srli	r2,r7,9
1000b8dc:	01000104 	movi	r4,4
1000b8e0:	2080422e 	bgeu	r4,r2,1000b9ec <_malloc_r+0x5f4>
1000b8e4:	01000504 	movi	r4,20
1000b8e8:	20807c36 	bltu	r4,r2,1000badc <_malloc_r+0x6e4>
1000b8ec:	110016c4 	addi	r4,r2,91
1000b8f0:	210b883a 	add	r5,r4,r4
1000b8f4:	294b883a 	add	r5,r5,r5
1000b8f8:	294b883a 	add	r5,r5,r5
1000b8fc:	994b883a 	add	r5,r19,r5
1000b900:	28800217 	ldw	r2,8(r5)
1000b904:	02040074 	movhi	r8,4097
1000b908:	420b4b04 	addi	r8,r8,11564
1000b90c:	11406326 	beq	r2,r5,1000ba9c <_malloc_r+0x6a4>
1000b910:	01bfff04 	movi	r6,-4
1000b914:	11000117 	ldw	r4,4(r2)
1000b918:	2188703a 	and	r4,r4,r6
1000b91c:	3900022e 	bgeu	r7,r4,1000b928 <_malloc_r+0x530>
1000b920:	10800217 	ldw	r2,8(r2)
1000b924:	28bffb1e 	bne	r5,r2,1000b914 <__alt_data_end+0xf800b914>
1000b928:	11800317 	ldw	r6,12(r2)
1000b92c:	99000117 	ldw	r4,4(r19)
1000b930:	81800315 	stw	r6,12(r16)
1000b934:	80800215 	stw	r2,8(r16)
1000b938:	34000215 	stw	r16,8(r6)
1000b93c:	14000315 	stw	r16,12(r2)
1000b940:	003f2706 	br	1000b5e0 <__alt_data_end+0xf800b5e0>
1000b944:	88c00054 	ori	r3,r17,1
1000b948:	80c00115 	stw	r3,4(r16)
1000b94c:	8463883a 	add	r17,r16,r17
1000b950:	34400515 	stw	r17,20(r6)
1000b954:	34400415 	stw	r17,16(r6)
1000b958:	10c00054 	ori	r3,r2,1
1000b95c:	8a400315 	stw	r9,12(r17)
1000b960:	8a400215 	stw	r9,8(r17)
1000b964:	88c00115 	stw	r3,4(r17)
1000b968:	88a3883a 	add	r17,r17,r2
1000b96c:	88800015 	stw	r2,0(r17)
1000b970:	9009883a 	mov	r4,r18
1000b974:	00103a80 	call	100103a8 <__malloc_unlock>
1000b978:	80800204 	addi	r2,r16,8
1000b97c:	003ecb06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b980:	31000117 	ldw	r4,4(r6)
1000b984:	003f1606 	br	1000b5e0 <__alt_data_end+0xf800b5e0>
1000b988:	63000044 	addi	r12,r12,1
1000b98c:	608000cc 	andi	r2,r12,3
1000b990:	5ac00204 	addi	r11,r11,8
1000b994:	103f2a1e 	bne	r2,zero,1000b640 <__alt_data_end+0xf800b640>
1000b998:	00002106 	br	1000ba20 <_malloc_r+0x628>
1000b99c:	80800204 	addi	r2,r16,8
1000b9a0:	84000517 	ldw	r16,20(r16)
1000b9a4:	143eb31e 	bne	r2,r16,1000b474 <__alt_data_end+0xf800b474>
1000b9a8:	18c00084 	addi	r3,r3,2
1000b9ac:	003eec06 	br	1000b560 <__alt_data_end+0xf800b560>
1000b9b0:	8085883a 	add	r2,r16,r2
1000b9b4:	10c00117 	ldw	r3,4(r2)
1000b9b8:	81000317 	ldw	r4,12(r16)
1000b9bc:	81400217 	ldw	r5,8(r16)
1000b9c0:	18c00054 	ori	r3,r3,1
1000b9c4:	10c00115 	stw	r3,4(r2)
1000b9c8:	29000315 	stw	r4,12(r5)
1000b9cc:	21400215 	stw	r5,8(r4)
1000b9d0:	9009883a 	mov	r4,r18
1000b9d4:	00103a80 	call	100103a8 <__malloc_unlock>
1000b9d8:	80800204 	addi	r2,r16,8
1000b9dc:	003eb306 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b9e0:	19c016c4 	addi	r7,r3,91
1000b9e4:	39cb883a 	add	r5,r7,r7
1000b9e8:	003ec706 	br	1000b508 <__alt_data_end+0xf800b508>
1000b9ec:	3804d1ba 	srli	r2,r7,6
1000b9f0:	11000e04 	addi	r4,r2,56
1000b9f4:	210b883a 	add	r5,r4,r4
1000b9f8:	003fbe06 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000b9fc:	84ff5d26 	beq	r16,r19,1000b774 <__alt_data_end+0xf800b774>
1000ba00:	9c000217 	ldw	r16,8(r19)
1000ba04:	00bfff04 	movi	r2,-4
1000ba08:	80c00117 	ldw	r3,4(r16)
1000ba0c:	1886703a 	and	r3,r3,r2
1000ba10:	003f9706 	br	1000b870 <__alt_data_end+0xf800b870>
1000ba14:	52800017 	ldw	r10,0(r10)
1000ba18:	18ffffc4 	addi	r3,r3,-1
1000ba1c:	50805c1e 	bne	r10,r2,1000bb90 <_malloc_r+0x798>
1000ba20:	190000cc 	andi	r4,r3,3
1000ba24:	50bffe04 	addi	r2,r10,-8
1000ba28:	203ffa1e 	bne	r4,zero,1000ba14 <__alt_data_end+0xf800ba14>
1000ba2c:	98800117 	ldw	r2,4(r19)
1000ba30:	0146303a 	nor	r3,zero,r5
1000ba34:	1884703a 	and	r2,r3,r2
1000ba38:	98800115 	stw	r2,4(r19)
1000ba3c:	294b883a 	add	r5,r5,r5
1000ba40:	117f2e36 	bltu	r2,r5,1000b6fc <__alt_data_end+0xf800b6fc>
1000ba44:	283f2d26 	beq	r5,zero,1000b6fc <__alt_data_end+0xf800b6fc>
1000ba48:	1146703a 	and	r3,r2,r5
1000ba4c:	1800521e 	bne	r3,zero,1000bb98 <_malloc_r+0x7a0>
1000ba50:	6007883a 	mov	r3,r12
1000ba54:	294b883a 	add	r5,r5,r5
1000ba58:	1148703a 	and	r4,r2,r5
1000ba5c:	18c00104 	addi	r3,r3,4
1000ba60:	203ffc26 	beq	r4,zero,1000ba54 <__alt_data_end+0xf800ba54>
1000ba64:	003ef006 	br	1000b628 <__alt_data_end+0xf800b628>
1000ba68:	00805504 	movi	r2,340
1000ba6c:	10c01336 	bltu	r2,r3,1000babc <_malloc_r+0x6c4>
1000ba70:	8806d3fa 	srli	r3,r17,15
1000ba74:	19c01dc4 	addi	r7,r3,119
1000ba78:	39cb883a 	add	r5,r7,r7
1000ba7c:	003ea206 	br	1000b508 <__alt_data_end+0xf800b508>
1000ba80:	00c40004 	movi	r3,4096
1000ba84:	003f4d06 	br	1000b7bc <__alt_data_end+0xf800b7bc>
1000ba88:	00800044 	movi	r2,1
1000ba8c:	a0800115 	stw	r2,4(r20)
1000ba90:	a021883a 	mov	r16,r20
1000ba94:	0007883a 	mov	r3,zero
1000ba98:	003f7506 	br	1000b870 <__alt_data_end+0xf800b870>
1000ba9c:	200bd0ba 	srai	r5,r4,2
1000baa0:	01800044 	movi	r6,1
1000baa4:	41000117 	ldw	r4,4(r8)
1000baa8:	314a983a 	sll	r5,r6,r5
1000baac:	100d883a 	mov	r6,r2
1000bab0:	2908b03a 	or	r4,r5,r4
1000bab4:	41000115 	stw	r4,4(r8)
1000bab8:	003f9d06 	br	1000b930 <__alt_data_end+0xf800b930>
1000babc:	00815504 	movi	r2,1364
1000bac0:	10c01336 	bltu	r2,r3,1000bb10 <_malloc_r+0x718>
1000bac4:	8806d4ba 	srli	r3,r17,18
1000bac8:	19c01f04 	addi	r7,r3,124
1000bacc:	39cb883a 	add	r5,r7,r7
1000bad0:	003e8d06 	br	1000b508 <__alt_data_end+0xf800b508>
1000bad4:	ad400404 	addi	r21,r21,16
1000bad8:	003f1d06 	br	1000b750 <__alt_data_end+0xf800b750>
1000badc:	01001504 	movi	r4,84
1000bae0:	20801c36 	bltu	r4,r2,1000bb54 <_malloc_r+0x75c>
1000bae4:	3804d33a 	srli	r2,r7,12
1000bae8:	11001b84 	addi	r4,r2,110
1000baec:	210b883a 	add	r5,r4,r4
1000baf0:	003f8006 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000baf4:	3083ffcc 	andi	r2,r6,4095
1000baf8:	103f241e 	bne	r2,zero,1000b78c <__alt_data_end+0xf800b78c>
1000bafc:	99000217 	ldw	r4,8(r19)
1000bb00:	ad85883a 	add	r2,r21,r22
1000bb04:	10800054 	ori	r2,r2,1
1000bb08:	20800115 	stw	r2,4(r4)
1000bb0c:	003f4a06 	br	1000b838 <__alt_data_end+0xf800b838>
1000bb10:	01403f04 	movi	r5,252
1000bb14:	01c01f84 	movi	r7,126
1000bb18:	003e7b06 	br	1000b508 <__alt_data_end+0xf800b508>
1000bb1c:	00c00044 	movi	r3,1
1000bb20:	002b883a 	mov	r21,zero
1000bb24:	003f3006 	br	1000b7e8 <__alt_data_end+0xf800b7e8>
1000bb28:	00840074 	movhi	r2,4097
1000bb2c:	1090d304 	addi	r2,r2,17228
1000bb30:	15000015 	stw	r20,0(r2)
1000bb34:	003f1b06 	br	1000b7a4 <__alt_data_end+0xf800b7a4>
1000bb38:	9009883a 	mov	r4,r18
1000bb3c:	81400204 	addi	r5,r16,8
1000bb40:	000ad000 	call	1000ad00 <_free_r>
1000bb44:	00840074 	movhi	r2,4097
1000bb48:	1097b104 	addi	r2,r2,24260
1000bb4c:	10c00017 	ldw	r3,0(r2)
1000bb50:	003f3906 	br	1000b838 <__alt_data_end+0xf800b838>
1000bb54:	01005504 	movi	r4,340
1000bb58:	20800436 	bltu	r4,r2,1000bb6c <_malloc_r+0x774>
1000bb5c:	3804d3fa 	srli	r2,r7,15
1000bb60:	11001dc4 	addi	r4,r2,119
1000bb64:	210b883a 	add	r5,r4,r4
1000bb68:	003f6206 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000bb6c:	01015504 	movi	r4,1364
1000bb70:	20800436 	bltu	r4,r2,1000bb84 <_malloc_r+0x78c>
1000bb74:	3804d4ba 	srli	r2,r7,18
1000bb78:	11001f04 	addi	r4,r2,124
1000bb7c:	210b883a 	add	r5,r4,r4
1000bb80:	003f5c06 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000bb84:	01403f04 	movi	r5,252
1000bb88:	01001f84 	movi	r4,126
1000bb8c:	003f5906 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000bb90:	98800117 	ldw	r2,4(r19)
1000bb94:	003fa906 	br	1000ba3c <__alt_data_end+0xf800ba3c>
1000bb98:	6007883a 	mov	r3,r12
1000bb9c:	003ea206 	br	1000b628 <__alt_data_end+0xf800b628>

1000bba0 <memchr>:
1000bba0:	208000cc 	andi	r2,r4,3
1000bba4:	280f883a 	mov	r7,r5
1000bba8:	10003526 	beq	r2,zero,1000bc80 <memchr+0xe0>
1000bbac:	30bfffc4 	addi	r2,r6,-1
1000bbb0:	30001b26 	beq	r6,zero,1000bc20 <memchr+0x80>
1000bbb4:	21800003 	ldbu	r6,0(r4)
1000bbb8:	28c03fcc 	andi	r3,r5,255
1000bbbc:	30c01a26 	beq	r6,r3,1000bc28 <memchr+0x88>
1000bbc0:	180d883a 	mov	r6,r3
1000bbc4:	00000406 	br	1000bbd8 <memchr+0x38>
1000bbc8:	10001526 	beq	r2,zero,1000bc20 <memchr+0x80>
1000bbcc:	20c00003 	ldbu	r3,0(r4)
1000bbd0:	10bfffc4 	addi	r2,r2,-1
1000bbd4:	19801426 	beq	r3,r6,1000bc28 <memchr+0x88>
1000bbd8:	21000044 	addi	r4,r4,1
1000bbdc:	20c000cc 	andi	r3,r4,3
1000bbe0:	183ff91e 	bne	r3,zero,1000bbc8 <__alt_data_end+0xf800bbc8>
1000bbe4:	024000c4 	movi	r9,3
1000bbe8:	48801136 	bltu	r9,r2,1000bc30 <memchr+0x90>
1000bbec:	10000c26 	beq	r2,zero,1000bc20 <memchr+0x80>
1000bbf0:	20c00003 	ldbu	r3,0(r4)
1000bbf4:	29403fcc 	andi	r5,r5,255
1000bbf8:	19400b26 	beq	r3,r5,1000bc28 <memchr+0x88>
1000bbfc:	20c00044 	addi	r3,r4,1
1000bc00:	2085883a 	add	r2,r4,r2
1000bc04:	39803fcc 	andi	r6,r7,255
1000bc08:	00000306 	br	1000bc18 <memchr+0x78>
1000bc0c:	18c00044 	addi	r3,r3,1
1000bc10:	197fffc3 	ldbu	r5,-1(r3)
1000bc14:	29800426 	beq	r5,r6,1000bc28 <memchr+0x88>
1000bc18:	1809883a 	mov	r4,r3
1000bc1c:	18bffb1e 	bne	r3,r2,1000bc0c <__alt_data_end+0xf800bc0c>
1000bc20:	0005883a 	mov	r2,zero
1000bc24:	f800283a 	ret
1000bc28:	2005883a 	mov	r2,r4
1000bc2c:	f800283a 	ret
1000bc30:	28c03fcc 	andi	r3,r5,255
1000bc34:	1810923a 	slli	r8,r3,8
1000bc38:	02ffbff4 	movhi	r11,65279
1000bc3c:	02a02074 	movhi	r10,32897
1000bc40:	40c6b03a 	or	r3,r8,r3
1000bc44:	1810943a 	slli	r8,r3,16
1000bc48:	5affbfc4 	addi	r11,r11,-257
1000bc4c:	52a02004 	addi	r10,r10,-32640
1000bc50:	40d0b03a 	or	r8,r8,r3
1000bc54:	20c00017 	ldw	r3,0(r4)
1000bc58:	40c6f03a 	xor	r3,r8,r3
1000bc5c:	1acd883a 	add	r6,r3,r11
1000bc60:	00c6303a 	nor	r3,zero,r3
1000bc64:	30c6703a 	and	r3,r6,r3
1000bc68:	1a86703a 	and	r3,r3,r10
1000bc6c:	183fdf1e 	bne	r3,zero,1000bbec <__alt_data_end+0xf800bbec>
1000bc70:	10bfff04 	addi	r2,r2,-4
1000bc74:	21000104 	addi	r4,r4,4
1000bc78:	48bff636 	bltu	r9,r2,1000bc54 <__alt_data_end+0xf800bc54>
1000bc7c:	003fdb06 	br	1000bbec <__alt_data_end+0xf800bbec>
1000bc80:	3005883a 	mov	r2,r6
1000bc84:	003fd706 	br	1000bbe4 <__alt_data_end+0xf800bbe4>

1000bc88 <memcpy>:
1000bc88:	deffff04 	addi	sp,sp,-4
1000bc8c:	dc000015 	stw	r16,0(sp)
1000bc90:	00c003c4 	movi	r3,15
1000bc94:	2005883a 	mov	r2,r4
1000bc98:	1980432e 	bgeu	r3,r6,1000bda8 <memcpy+0x120>
1000bc9c:	2146b03a 	or	r3,r4,r5
1000bca0:	18c000cc 	andi	r3,r3,3
1000bca4:	1800421e 	bne	r3,zero,1000bdb0 <memcpy+0x128>
1000bca8:	343ffc04 	addi	r16,r6,-16
1000bcac:	8020d13a 	srli	r16,r16,4
1000bcb0:	28c00104 	addi	r3,r5,4
1000bcb4:	23400104 	addi	r13,r4,4
1000bcb8:	801e913a 	slli	r15,r16,4
1000bcbc:	2b000204 	addi	r12,r5,8
1000bcc0:	22c00204 	addi	r11,r4,8
1000bcc4:	7bc00504 	addi	r15,r15,20
1000bcc8:	2a800304 	addi	r10,r5,12
1000bccc:	22400304 	addi	r9,r4,12
1000bcd0:	2bdf883a 	add	r15,r5,r15
1000bcd4:	2811883a 	mov	r8,r5
1000bcd8:	200f883a 	mov	r7,r4
1000bcdc:	41000017 	ldw	r4,0(r8)
1000bce0:	39c00404 	addi	r7,r7,16
1000bce4:	18c00404 	addi	r3,r3,16
1000bce8:	393ffc15 	stw	r4,-16(r7)
1000bcec:	1bbffc17 	ldw	r14,-16(r3)
1000bcf0:	6b400404 	addi	r13,r13,16
1000bcf4:	5ac00404 	addi	r11,r11,16
1000bcf8:	6bbffc15 	stw	r14,-16(r13)
1000bcfc:	63800017 	ldw	r14,0(r12)
1000bd00:	4a400404 	addi	r9,r9,16
1000bd04:	42000404 	addi	r8,r8,16
1000bd08:	5bbffc15 	stw	r14,-16(r11)
1000bd0c:	53800017 	ldw	r14,0(r10)
1000bd10:	63000404 	addi	r12,r12,16
1000bd14:	52800404 	addi	r10,r10,16
1000bd18:	4bbffc15 	stw	r14,-16(r9)
1000bd1c:	1bffef1e 	bne	r3,r15,1000bcdc <__alt_data_end+0xf800bcdc>
1000bd20:	81c00044 	addi	r7,r16,1
1000bd24:	380e913a 	slli	r7,r7,4
1000bd28:	310003cc 	andi	r4,r6,15
1000bd2c:	02c000c4 	movi	r11,3
1000bd30:	11c7883a 	add	r3,r2,r7
1000bd34:	29cb883a 	add	r5,r5,r7
1000bd38:	59001f2e 	bgeu	r11,r4,1000bdb8 <memcpy+0x130>
1000bd3c:	1813883a 	mov	r9,r3
1000bd40:	2811883a 	mov	r8,r5
1000bd44:	200f883a 	mov	r7,r4
1000bd48:	42800017 	ldw	r10,0(r8)
1000bd4c:	4a400104 	addi	r9,r9,4
1000bd50:	39ffff04 	addi	r7,r7,-4
1000bd54:	4abfff15 	stw	r10,-4(r9)
1000bd58:	42000104 	addi	r8,r8,4
1000bd5c:	59fffa36 	bltu	r11,r7,1000bd48 <__alt_data_end+0xf800bd48>
1000bd60:	213fff04 	addi	r4,r4,-4
1000bd64:	2008d0ba 	srli	r4,r4,2
1000bd68:	318000cc 	andi	r6,r6,3
1000bd6c:	21000044 	addi	r4,r4,1
1000bd70:	2109883a 	add	r4,r4,r4
1000bd74:	2109883a 	add	r4,r4,r4
1000bd78:	1907883a 	add	r3,r3,r4
1000bd7c:	290b883a 	add	r5,r5,r4
1000bd80:	30000626 	beq	r6,zero,1000bd9c <memcpy+0x114>
1000bd84:	198d883a 	add	r6,r3,r6
1000bd88:	29c00003 	ldbu	r7,0(r5)
1000bd8c:	18c00044 	addi	r3,r3,1
1000bd90:	29400044 	addi	r5,r5,1
1000bd94:	19ffffc5 	stb	r7,-1(r3)
1000bd98:	19bffb1e 	bne	r3,r6,1000bd88 <__alt_data_end+0xf800bd88>
1000bd9c:	dc000017 	ldw	r16,0(sp)
1000bda0:	dec00104 	addi	sp,sp,4
1000bda4:	f800283a 	ret
1000bda8:	2007883a 	mov	r3,r4
1000bdac:	003ff406 	br	1000bd80 <__alt_data_end+0xf800bd80>
1000bdb0:	2007883a 	mov	r3,r4
1000bdb4:	003ff306 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000bdb8:	200d883a 	mov	r6,r4
1000bdbc:	003ff006 	br	1000bd80 <__alt_data_end+0xf800bd80>

1000bdc0 <memset>:
1000bdc0:	20c000cc 	andi	r3,r4,3
1000bdc4:	2005883a 	mov	r2,r4
1000bdc8:	18004326 	beq	r3,zero,1000bed8 <memset+0x118>
1000bdcc:	31ffffc4 	addi	r7,r6,-1
1000bdd0:	30004026 	beq	r6,zero,1000bed4 <memset+0x114>
1000bdd4:	2813883a 	mov	r9,r5
1000bdd8:	200d883a 	mov	r6,r4
1000bddc:	2007883a 	mov	r3,r4
1000bde0:	00000406 	br	1000bdf4 <memset+0x34>
1000bde4:	3a3fffc4 	addi	r8,r7,-1
1000bde8:	31800044 	addi	r6,r6,1
1000bdec:	38003926 	beq	r7,zero,1000bed4 <memset+0x114>
1000bdf0:	400f883a 	mov	r7,r8
1000bdf4:	18c00044 	addi	r3,r3,1
1000bdf8:	32400005 	stb	r9,0(r6)
1000bdfc:	1a0000cc 	andi	r8,r3,3
1000be00:	403ff81e 	bne	r8,zero,1000bde4 <__alt_data_end+0xf800bde4>
1000be04:	010000c4 	movi	r4,3
1000be08:	21c02d2e 	bgeu	r4,r7,1000bec0 <memset+0x100>
1000be0c:	29803fcc 	andi	r6,r5,255
1000be10:	3008923a 	slli	r4,r6,8
1000be14:	218cb03a 	or	r6,r4,r6
1000be18:	3008943a 	slli	r4,r6,16
1000be1c:	218cb03a 	or	r6,r4,r6
1000be20:	010003c4 	movi	r4,15
1000be24:	21c0182e 	bgeu	r4,r7,1000be88 <memset+0xc8>
1000be28:	3b3ffc04 	addi	r12,r7,-16
1000be2c:	6018d13a 	srli	r12,r12,4
1000be30:	1a000104 	addi	r8,r3,4
1000be34:	1ac00204 	addi	r11,r3,8
1000be38:	6008913a 	slli	r4,r12,4
1000be3c:	1a800304 	addi	r10,r3,12
1000be40:	1813883a 	mov	r9,r3
1000be44:	21000504 	addi	r4,r4,20
1000be48:	1909883a 	add	r4,r3,r4
1000be4c:	49800015 	stw	r6,0(r9)
1000be50:	41800015 	stw	r6,0(r8)
1000be54:	59800015 	stw	r6,0(r11)
1000be58:	51800015 	stw	r6,0(r10)
1000be5c:	42000404 	addi	r8,r8,16
1000be60:	4a400404 	addi	r9,r9,16
1000be64:	5ac00404 	addi	r11,r11,16
1000be68:	52800404 	addi	r10,r10,16
1000be6c:	413ff71e 	bne	r8,r4,1000be4c <__alt_data_end+0xf800be4c>
1000be70:	63000044 	addi	r12,r12,1
1000be74:	6018913a 	slli	r12,r12,4
1000be78:	39c003cc 	andi	r7,r7,15
1000be7c:	010000c4 	movi	r4,3
1000be80:	1b07883a 	add	r3,r3,r12
1000be84:	21c00e2e 	bgeu	r4,r7,1000bec0 <memset+0x100>
1000be88:	1813883a 	mov	r9,r3
1000be8c:	3811883a 	mov	r8,r7
1000be90:	010000c4 	movi	r4,3
1000be94:	49800015 	stw	r6,0(r9)
1000be98:	423fff04 	addi	r8,r8,-4
1000be9c:	4a400104 	addi	r9,r9,4
1000bea0:	223ffc36 	bltu	r4,r8,1000be94 <__alt_data_end+0xf800be94>
1000bea4:	393fff04 	addi	r4,r7,-4
1000bea8:	2008d0ba 	srli	r4,r4,2
1000beac:	39c000cc 	andi	r7,r7,3
1000beb0:	21000044 	addi	r4,r4,1
1000beb4:	2109883a 	add	r4,r4,r4
1000beb8:	2109883a 	add	r4,r4,r4
1000bebc:	1907883a 	add	r3,r3,r4
1000bec0:	38000426 	beq	r7,zero,1000bed4 <memset+0x114>
1000bec4:	19cf883a 	add	r7,r3,r7
1000bec8:	19400005 	stb	r5,0(r3)
1000becc:	18c00044 	addi	r3,r3,1
1000bed0:	19fffd1e 	bne	r3,r7,1000bec8 <__alt_data_end+0xf800bec8>
1000bed4:	f800283a 	ret
1000bed8:	2007883a 	mov	r3,r4
1000bedc:	300f883a 	mov	r7,r6
1000bee0:	003fc806 	br	1000be04 <__alt_data_end+0xf800be04>

1000bee4 <_Balloc>:
1000bee4:	20801317 	ldw	r2,76(r4)
1000bee8:	defffc04 	addi	sp,sp,-16
1000beec:	dc400115 	stw	r17,4(sp)
1000bef0:	dc000015 	stw	r16,0(sp)
1000bef4:	dfc00315 	stw	ra,12(sp)
1000bef8:	dc800215 	stw	r18,8(sp)
1000befc:	2023883a 	mov	r17,r4
1000bf00:	2821883a 	mov	r16,r5
1000bf04:	10000f26 	beq	r2,zero,1000bf44 <_Balloc+0x60>
1000bf08:	8407883a 	add	r3,r16,r16
1000bf0c:	18c7883a 	add	r3,r3,r3
1000bf10:	10c7883a 	add	r3,r2,r3
1000bf14:	18800017 	ldw	r2,0(r3)
1000bf18:	10001126 	beq	r2,zero,1000bf60 <_Balloc+0x7c>
1000bf1c:	11000017 	ldw	r4,0(r2)
1000bf20:	19000015 	stw	r4,0(r3)
1000bf24:	10000415 	stw	zero,16(r2)
1000bf28:	10000315 	stw	zero,12(r2)
1000bf2c:	dfc00317 	ldw	ra,12(sp)
1000bf30:	dc800217 	ldw	r18,8(sp)
1000bf34:	dc400117 	ldw	r17,4(sp)
1000bf38:	dc000017 	ldw	r16,0(sp)
1000bf3c:	dec00404 	addi	sp,sp,16
1000bf40:	f800283a 	ret
1000bf44:	01400104 	movi	r5,4
1000bf48:	01800844 	movi	r6,33
1000bf4c:	000eadc0 	call	1000eadc <_calloc_r>
1000bf50:	88801315 	stw	r2,76(r17)
1000bf54:	103fec1e 	bne	r2,zero,1000bf08 <__alt_data_end+0xf800bf08>
1000bf58:	0005883a 	mov	r2,zero
1000bf5c:	003ff306 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000bf60:	01400044 	movi	r5,1
1000bf64:	2c24983a 	sll	r18,r5,r16
1000bf68:	8809883a 	mov	r4,r17
1000bf6c:	91800144 	addi	r6,r18,5
1000bf70:	318d883a 	add	r6,r6,r6
1000bf74:	318d883a 	add	r6,r6,r6
1000bf78:	000eadc0 	call	1000eadc <_calloc_r>
1000bf7c:	103ff626 	beq	r2,zero,1000bf58 <__alt_data_end+0xf800bf58>
1000bf80:	14000115 	stw	r16,4(r2)
1000bf84:	14800215 	stw	r18,8(r2)
1000bf88:	003fe606 	br	1000bf24 <__alt_data_end+0xf800bf24>

1000bf8c <_Bfree>:
1000bf8c:	28000826 	beq	r5,zero,1000bfb0 <_Bfree+0x24>
1000bf90:	28c00117 	ldw	r3,4(r5)
1000bf94:	20801317 	ldw	r2,76(r4)
1000bf98:	18c7883a 	add	r3,r3,r3
1000bf9c:	18c7883a 	add	r3,r3,r3
1000bfa0:	10c5883a 	add	r2,r2,r3
1000bfa4:	10c00017 	ldw	r3,0(r2)
1000bfa8:	28c00015 	stw	r3,0(r5)
1000bfac:	11400015 	stw	r5,0(r2)
1000bfb0:	f800283a 	ret

1000bfb4 <__multadd>:
1000bfb4:	defff704 	addi	sp,sp,-36
1000bfb8:	dc800215 	stw	r18,8(sp)
1000bfbc:	2c800417 	ldw	r18,16(r5)
1000bfc0:	ddc00715 	stw	r23,28(sp)
1000bfc4:	dd800615 	stw	r22,24(sp)
1000bfc8:	dd000415 	stw	r20,16(sp)
1000bfcc:	dcc00315 	stw	r19,12(sp)
1000bfd0:	dc400115 	stw	r17,4(sp)
1000bfd4:	dc000015 	stw	r16,0(sp)
1000bfd8:	dfc00815 	stw	ra,32(sp)
1000bfdc:	dd400515 	stw	r21,20(sp)
1000bfe0:	2827883a 	mov	r19,r5
1000bfe4:	2029883a 	mov	r20,r4
1000bfe8:	3023883a 	mov	r17,r6
1000bfec:	3821883a 	mov	r16,r7
1000bff0:	2d800504 	addi	r22,r5,20
1000bff4:	002f883a 	mov	r23,zero
1000bff8:	b5400017 	ldw	r21,0(r22)
1000bffc:	880b883a 	mov	r5,r17
1000c000:	bdc00044 	addi	r23,r23,1
1000c004:	a93fffcc 	andi	r4,r21,65535
1000c008:	00040f80 	call	100040f8 <__mulsi3>
1000c00c:	1421883a 	add	r16,r2,r16
1000c010:	a808d43a 	srli	r4,r21,16
1000c014:	802ad43a 	srli	r21,r16,16
1000c018:	880b883a 	mov	r5,r17
1000c01c:	00040f80 	call	100040f8 <__mulsi3>
1000c020:	a88f883a 	add	r7,r21,r2
1000c024:	3804943a 	slli	r2,r7,16
1000c028:	80ffffcc 	andi	r3,r16,65535
1000c02c:	b5800104 	addi	r22,r22,4
1000c030:	10c7883a 	add	r3,r2,r3
1000c034:	b0ffff15 	stw	r3,-4(r22)
1000c038:	3820d43a 	srli	r16,r7,16
1000c03c:	bcbfee16 	blt	r23,r18,1000bff8 <__alt_data_end+0xf800bff8>
1000c040:	80000926 	beq	r16,zero,1000c068 <__multadd+0xb4>
1000c044:	98800217 	ldw	r2,8(r19)
1000c048:	9080130e 	bge	r18,r2,1000c098 <__multadd+0xe4>
1000c04c:	90800144 	addi	r2,r18,5
1000c050:	1085883a 	add	r2,r2,r2
1000c054:	1085883a 	add	r2,r2,r2
1000c058:	9885883a 	add	r2,r19,r2
1000c05c:	14000015 	stw	r16,0(r2)
1000c060:	94800044 	addi	r18,r18,1
1000c064:	9c800415 	stw	r18,16(r19)
1000c068:	9805883a 	mov	r2,r19
1000c06c:	dfc00817 	ldw	ra,32(sp)
1000c070:	ddc00717 	ldw	r23,28(sp)
1000c074:	dd800617 	ldw	r22,24(sp)
1000c078:	dd400517 	ldw	r21,20(sp)
1000c07c:	dd000417 	ldw	r20,16(sp)
1000c080:	dcc00317 	ldw	r19,12(sp)
1000c084:	dc800217 	ldw	r18,8(sp)
1000c088:	dc400117 	ldw	r17,4(sp)
1000c08c:	dc000017 	ldw	r16,0(sp)
1000c090:	dec00904 	addi	sp,sp,36
1000c094:	f800283a 	ret
1000c098:	99400117 	ldw	r5,4(r19)
1000c09c:	a009883a 	mov	r4,r20
1000c0a0:	29400044 	addi	r5,r5,1
1000c0a4:	000bee40 	call	1000bee4 <_Balloc>
1000c0a8:	99800417 	ldw	r6,16(r19)
1000c0ac:	99400304 	addi	r5,r19,12
1000c0b0:	11000304 	addi	r4,r2,12
1000c0b4:	31800084 	addi	r6,r6,2
1000c0b8:	318d883a 	add	r6,r6,r6
1000c0bc:	318d883a 	add	r6,r6,r6
1000c0c0:	1023883a 	mov	r17,r2
1000c0c4:	000bc880 	call	1000bc88 <memcpy>
1000c0c8:	99000117 	ldw	r4,4(r19)
1000c0cc:	a0c01317 	ldw	r3,76(r20)
1000c0d0:	2109883a 	add	r4,r4,r4
1000c0d4:	2109883a 	add	r4,r4,r4
1000c0d8:	1907883a 	add	r3,r3,r4
1000c0dc:	18800017 	ldw	r2,0(r3)
1000c0e0:	98800015 	stw	r2,0(r19)
1000c0e4:	1cc00015 	stw	r19,0(r3)
1000c0e8:	8827883a 	mov	r19,r17
1000c0ec:	003fd706 	br	1000c04c <__alt_data_end+0xf800c04c>

1000c0f0 <__s2b>:
1000c0f0:	defff904 	addi	sp,sp,-28
1000c0f4:	dc400115 	stw	r17,4(sp)
1000c0f8:	dc000015 	stw	r16,0(sp)
1000c0fc:	2023883a 	mov	r17,r4
1000c100:	2821883a 	mov	r16,r5
1000c104:	39000204 	addi	r4,r7,8
1000c108:	01400244 	movi	r5,9
1000c10c:	dcc00315 	stw	r19,12(sp)
1000c110:	dc800215 	stw	r18,8(sp)
1000c114:	dfc00615 	stw	ra,24(sp)
1000c118:	dd400515 	stw	r21,20(sp)
1000c11c:	dd000415 	stw	r20,16(sp)
1000c120:	3825883a 	mov	r18,r7
1000c124:	3027883a 	mov	r19,r6
1000c128:	00040380 	call	10004038 <__divsi3>
1000c12c:	00c00044 	movi	r3,1
1000c130:	000b883a 	mov	r5,zero
1000c134:	1880030e 	bge	r3,r2,1000c144 <__s2b+0x54>
1000c138:	18c7883a 	add	r3,r3,r3
1000c13c:	29400044 	addi	r5,r5,1
1000c140:	18bffd16 	blt	r3,r2,1000c138 <__alt_data_end+0xf800c138>
1000c144:	8809883a 	mov	r4,r17
1000c148:	000bee40 	call	1000bee4 <_Balloc>
1000c14c:	d8c00717 	ldw	r3,28(sp)
1000c150:	10c00515 	stw	r3,20(r2)
1000c154:	00c00044 	movi	r3,1
1000c158:	10c00415 	stw	r3,16(r2)
1000c15c:	00c00244 	movi	r3,9
1000c160:	1cc0210e 	bge	r3,r19,1000c1e8 <__s2b+0xf8>
1000c164:	80eb883a 	add	r21,r16,r3
1000c168:	a829883a 	mov	r20,r21
1000c16c:	84e1883a 	add	r16,r16,r19
1000c170:	a1c00007 	ldb	r7,0(r20)
1000c174:	8809883a 	mov	r4,r17
1000c178:	a5000044 	addi	r20,r20,1
1000c17c:	100b883a 	mov	r5,r2
1000c180:	01800284 	movi	r6,10
1000c184:	39fff404 	addi	r7,r7,-48
1000c188:	000bfb40 	call	1000bfb4 <__multadd>
1000c18c:	a43ff81e 	bne	r20,r16,1000c170 <__alt_data_end+0xf800c170>
1000c190:	ace1883a 	add	r16,r21,r19
1000c194:	843ffe04 	addi	r16,r16,-8
1000c198:	9c800a0e 	bge	r19,r18,1000c1c4 <__s2b+0xd4>
1000c19c:	94e5c83a 	sub	r18,r18,r19
1000c1a0:	84a5883a 	add	r18,r16,r18
1000c1a4:	81c00007 	ldb	r7,0(r16)
1000c1a8:	8809883a 	mov	r4,r17
1000c1ac:	84000044 	addi	r16,r16,1
1000c1b0:	100b883a 	mov	r5,r2
1000c1b4:	01800284 	movi	r6,10
1000c1b8:	39fff404 	addi	r7,r7,-48
1000c1bc:	000bfb40 	call	1000bfb4 <__multadd>
1000c1c0:	84bff81e 	bne	r16,r18,1000c1a4 <__alt_data_end+0xf800c1a4>
1000c1c4:	dfc00617 	ldw	ra,24(sp)
1000c1c8:	dd400517 	ldw	r21,20(sp)
1000c1cc:	dd000417 	ldw	r20,16(sp)
1000c1d0:	dcc00317 	ldw	r19,12(sp)
1000c1d4:	dc800217 	ldw	r18,8(sp)
1000c1d8:	dc400117 	ldw	r17,4(sp)
1000c1dc:	dc000017 	ldw	r16,0(sp)
1000c1e0:	dec00704 	addi	sp,sp,28
1000c1e4:	f800283a 	ret
1000c1e8:	84000284 	addi	r16,r16,10
1000c1ec:	1827883a 	mov	r19,r3
1000c1f0:	003fe906 	br	1000c198 <__alt_data_end+0xf800c198>

1000c1f4 <__hi0bits>:
1000c1f4:	20bfffec 	andhi	r2,r4,65535
1000c1f8:	1000141e 	bne	r2,zero,1000c24c <__hi0bits+0x58>
1000c1fc:	2008943a 	slli	r4,r4,16
1000c200:	00800404 	movi	r2,16
1000c204:	20ffc02c 	andhi	r3,r4,65280
1000c208:	1800021e 	bne	r3,zero,1000c214 <__hi0bits+0x20>
1000c20c:	2008923a 	slli	r4,r4,8
1000c210:	10800204 	addi	r2,r2,8
1000c214:	20fc002c 	andhi	r3,r4,61440
1000c218:	1800021e 	bne	r3,zero,1000c224 <__hi0bits+0x30>
1000c21c:	2008913a 	slli	r4,r4,4
1000c220:	10800104 	addi	r2,r2,4
1000c224:	20f0002c 	andhi	r3,r4,49152
1000c228:	1800031e 	bne	r3,zero,1000c238 <__hi0bits+0x44>
1000c22c:	2109883a 	add	r4,r4,r4
1000c230:	10800084 	addi	r2,r2,2
1000c234:	2109883a 	add	r4,r4,r4
1000c238:	20000316 	blt	r4,zero,1000c248 <__hi0bits+0x54>
1000c23c:	2110002c 	andhi	r4,r4,16384
1000c240:	2000041e 	bne	r4,zero,1000c254 <__hi0bits+0x60>
1000c244:	00800804 	movi	r2,32
1000c248:	f800283a 	ret
1000c24c:	0005883a 	mov	r2,zero
1000c250:	003fec06 	br	1000c204 <__alt_data_end+0xf800c204>
1000c254:	10800044 	addi	r2,r2,1
1000c258:	f800283a 	ret

1000c25c <__lo0bits>:
1000c25c:	20c00017 	ldw	r3,0(r4)
1000c260:	188001cc 	andi	r2,r3,7
1000c264:	10000826 	beq	r2,zero,1000c288 <__lo0bits+0x2c>
1000c268:	1880004c 	andi	r2,r3,1
1000c26c:	1000211e 	bne	r2,zero,1000c2f4 <__lo0bits+0x98>
1000c270:	1880008c 	andi	r2,r3,2
1000c274:	1000211e 	bne	r2,zero,1000c2fc <__lo0bits+0xa0>
1000c278:	1806d0ba 	srli	r3,r3,2
1000c27c:	00800084 	movi	r2,2
1000c280:	20c00015 	stw	r3,0(r4)
1000c284:	f800283a 	ret
1000c288:	18bfffcc 	andi	r2,r3,65535
1000c28c:	10001326 	beq	r2,zero,1000c2dc <__lo0bits+0x80>
1000c290:	0005883a 	mov	r2,zero
1000c294:	19403fcc 	andi	r5,r3,255
1000c298:	2800021e 	bne	r5,zero,1000c2a4 <__lo0bits+0x48>
1000c29c:	1806d23a 	srli	r3,r3,8
1000c2a0:	10800204 	addi	r2,r2,8
1000c2a4:	194003cc 	andi	r5,r3,15
1000c2a8:	2800021e 	bne	r5,zero,1000c2b4 <__lo0bits+0x58>
1000c2ac:	1806d13a 	srli	r3,r3,4
1000c2b0:	10800104 	addi	r2,r2,4
1000c2b4:	194000cc 	andi	r5,r3,3
1000c2b8:	2800021e 	bne	r5,zero,1000c2c4 <__lo0bits+0x68>
1000c2bc:	1806d0ba 	srli	r3,r3,2
1000c2c0:	10800084 	addi	r2,r2,2
1000c2c4:	1940004c 	andi	r5,r3,1
1000c2c8:	2800081e 	bne	r5,zero,1000c2ec <__lo0bits+0x90>
1000c2cc:	1806d07a 	srli	r3,r3,1
1000c2d0:	1800051e 	bne	r3,zero,1000c2e8 <__lo0bits+0x8c>
1000c2d4:	00800804 	movi	r2,32
1000c2d8:	f800283a 	ret
1000c2dc:	1806d43a 	srli	r3,r3,16
1000c2e0:	00800404 	movi	r2,16
1000c2e4:	003feb06 	br	1000c294 <__alt_data_end+0xf800c294>
1000c2e8:	10800044 	addi	r2,r2,1
1000c2ec:	20c00015 	stw	r3,0(r4)
1000c2f0:	f800283a 	ret
1000c2f4:	0005883a 	mov	r2,zero
1000c2f8:	f800283a 	ret
1000c2fc:	1806d07a 	srli	r3,r3,1
1000c300:	00800044 	movi	r2,1
1000c304:	20c00015 	stw	r3,0(r4)
1000c308:	f800283a 	ret

1000c30c <__i2b>:
1000c30c:	defffd04 	addi	sp,sp,-12
1000c310:	dc000015 	stw	r16,0(sp)
1000c314:	04000044 	movi	r16,1
1000c318:	dc400115 	stw	r17,4(sp)
1000c31c:	2823883a 	mov	r17,r5
1000c320:	800b883a 	mov	r5,r16
1000c324:	dfc00215 	stw	ra,8(sp)
1000c328:	000bee40 	call	1000bee4 <_Balloc>
1000c32c:	14400515 	stw	r17,20(r2)
1000c330:	14000415 	stw	r16,16(r2)
1000c334:	dfc00217 	ldw	ra,8(sp)
1000c338:	dc400117 	ldw	r17,4(sp)
1000c33c:	dc000017 	ldw	r16,0(sp)
1000c340:	dec00304 	addi	sp,sp,12
1000c344:	f800283a 	ret

1000c348 <__multiply>:
1000c348:	deffef04 	addi	sp,sp,-68
1000c34c:	dc400815 	stw	r17,32(sp)
1000c350:	dc000715 	stw	r16,28(sp)
1000c354:	2c400417 	ldw	r17,16(r5)
1000c358:	34000417 	ldw	r16,16(r6)
1000c35c:	dd800d15 	stw	r22,52(sp)
1000c360:	dc800915 	stw	r18,36(sp)
1000c364:	dfc01015 	stw	ra,64(sp)
1000c368:	df000f15 	stw	fp,60(sp)
1000c36c:	ddc00e15 	stw	r23,56(sp)
1000c370:	dd400c15 	stw	r21,48(sp)
1000c374:	dd000b15 	stw	r20,44(sp)
1000c378:	dcc00a15 	stw	r19,40(sp)
1000c37c:	2825883a 	mov	r18,r5
1000c380:	302d883a 	mov	r22,r6
1000c384:	8c009116 	blt	r17,r16,1000c5cc <__multiply+0x284>
1000c388:	8005883a 	mov	r2,r16
1000c38c:	8821883a 	mov	r16,r17
1000c390:	1023883a 	mov	r17,r2
1000c394:	90800217 	ldw	r2,8(r18)
1000c398:	8447883a 	add	r3,r16,r17
1000c39c:	d8c00215 	stw	r3,8(sp)
1000c3a0:	91400117 	ldw	r5,4(r18)
1000c3a4:	10c0010e 	bge	r2,r3,1000c3ac <__multiply+0x64>
1000c3a8:	29400044 	addi	r5,r5,1
1000c3ac:	000bee40 	call	1000bee4 <_Balloc>
1000c3b0:	d8c00217 	ldw	r3,8(sp)
1000c3b4:	d8800615 	stw	r2,24(sp)
1000c3b8:	18eb883a 	add	r21,r3,r3
1000c3bc:	ad6b883a 	add	r21,r21,r21
1000c3c0:	10c00504 	addi	r3,r2,20
1000c3c4:	1d6b883a 	add	r21,r3,r21
1000c3c8:	d8c00115 	stw	r3,4(sp)
1000c3cc:	dd400315 	stw	r21,12(sp)
1000c3d0:	1805883a 	mov	r2,r3
1000c3d4:	1d40042e 	bgeu	r3,r21,1000c3e8 <__multiply+0xa0>
1000c3d8:	d8c00317 	ldw	r3,12(sp)
1000c3dc:	10000015 	stw	zero,0(r2)
1000c3e0:	10800104 	addi	r2,r2,4
1000c3e4:	10fffc36 	bltu	r2,r3,1000c3d8 <__alt_data_end+0xf800c3d8>
1000c3e8:	8c63883a 	add	r17,r17,r17
1000c3ec:	b5800504 	addi	r22,r22,20
1000c3f0:	8c63883a 	add	r17,r17,r17
1000c3f4:	94800504 	addi	r18,r18,20
1000c3f8:	8421883a 	add	r16,r16,r16
1000c3fc:	b463883a 	add	r17,r22,r17
1000c400:	8421883a 	add	r16,r16,r16
1000c404:	dd800015 	stw	r22,0(sp)
1000c408:	dc800415 	stw	r18,16(sp)
1000c40c:	dc400515 	stw	r17,20(sp)
1000c410:	9429883a 	add	r20,r18,r16
1000c414:	b4404f2e 	bgeu	r22,r17,1000c554 <__multiply+0x20c>
1000c418:	d8c00017 	ldw	r3,0(sp)
1000c41c:	1c800017 	ldw	r18,0(r3)
1000c420:	943fffcc 	andi	r16,r18,65535
1000c424:	80001e26 	beq	r16,zero,1000c4a0 <__multiply+0x158>
1000c428:	dd800117 	ldw	r22,4(sp)
1000c42c:	dd400417 	ldw	r21,16(sp)
1000c430:	0025883a 	mov	r18,zero
1000c434:	adc00017 	ldw	r23,0(r21)
1000c438:	b4c00017 	ldw	r19,0(r22)
1000c43c:	800b883a 	mov	r5,r16
1000c440:	b93fffcc 	andi	r4,r23,65535
1000c444:	00040f80 	call	100040f8 <__mulsi3>
1000c448:	9c7fffcc 	andi	r17,r19,65535
1000c44c:	8885883a 	add	r2,r17,r2
1000c450:	b808d43a 	srli	r4,r23,16
1000c454:	14a3883a 	add	r17,r2,r18
1000c458:	9826d43a 	srli	r19,r19,16
1000c45c:	8824d43a 	srli	r18,r17,16
1000c460:	800b883a 	mov	r5,r16
1000c464:	00040f80 	call	100040f8 <__mulsi3>
1000c468:	9885883a 	add	r2,r19,r2
1000c46c:	14a7883a 	add	r19,r2,r18
1000c470:	88ffffcc 	andi	r3,r17,65535
1000c474:	9822943a 	slli	r17,r19,16
1000c478:	ad400104 	addi	r21,r21,4
1000c47c:	b005883a 	mov	r2,r22
1000c480:	88c6b03a 	or	r3,r17,r3
1000c484:	b0c00015 	stw	r3,0(r22)
1000c488:	9824d43a 	srli	r18,r19,16
1000c48c:	b5800104 	addi	r22,r22,4
1000c490:	ad3fe836 	bltu	r21,r20,1000c434 <__alt_data_end+0xf800c434>
1000c494:	d8c00017 	ldw	r3,0(sp)
1000c498:	14800115 	stw	r18,4(r2)
1000c49c:	1c800017 	ldw	r18,0(r3)
1000c4a0:	9024d43a 	srli	r18,r18,16
1000c4a4:	90002226 	beq	r18,zero,1000c530 <__multiply+0x1e8>
1000c4a8:	d8c00117 	ldw	r3,4(sp)
1000c4ac:	dd800417 	ldw	r22,16(sp)
1000c4b0:	002f883a 	mov	r23,zero
1000c4b4:	1f000017 	ldw	fp,0(r3)
1000c4b8:	1823883a 	mov	r17,r3
1000c4bc:	182b883a 	mov	r21,r3
1000c4c0:	e021883a 	mov	r16,fp
1000c4c4:	00000106 	br	1000c4cc <__multiply+0x184>
1000c4c8:	982b883a 	mov	r21,r19
1000c4cc:	b100000b 	ldhu	r4,0(r22)
1000c4d0:	8020d43a 	srli	r16,r16,16
1000c4d4:	900b883a 	mov	r5,r18
1000c4d8:	00040f80 	call	100040f8 <__mulsi3>
1000c4dc:	1405883a 	add	r2,r2,r16
1000c4e0:	15ef883a 	add	r23,r2,r23
1000c4e4:	b804943a 	slli	r2,r23,16
1000c4e8:	e0ffffcc 	andi	r3,fp,65535
1000c4ec:	8c400104 	addi	r17,r17,4
1000c4f0:	10c6b03a 	or	r3,r2,r3
1000c4f4:	88ffff15 	stw	r3,-4(r17)
1000c4f8:	b5800104 	addi	r22,r22,4
1000c4fc:	b13fff17 	ldw	r4,-4(r22)
1000c500:	acc00104 	addi	r19,r21,4
1000c504:	900b883a 	mov	r5,r18
1000c508:	2008d43a 	srli	r4,r4,16
1000c50c:	9c000017 	ldw	r16,0(r19)
1000c510:	00040f80 	call	100040f8 <__mulsi3>
1000c514:	b806d43a 	srli	r3,r23,16
1000c518:	813fffcc 	andi	r4,r16,65535
1000c51c:	1105883a 	add	r2,r2,r4
1000c520:	10f9883a 	add	fp,r2,r3
1000c524:	e02ed43a 	srli	r23,fp,16
1000c528:	b53fe736 	bltu	r22,r20,1000c4c8 <__alt_data_end+0xf800c4c8>
1000c52c:	af000115 	stw	fp,4(r21)
1000c530:	d8c00017 	ldw	r3,0(sp)
1000c534:	d9000517 	ldw	r4,20(sp)
1000c538:	18c00104 	addi	r3,r3,4
1000c53c:	d8c00015 	stw	r3,0(sp)
1000c540:	d8c00117 	ldw	r3,4(sp)
1000c544:	18c00104 	addi	r3,r3,4
1000c548:	d8c00115 	stw	r3,4(sp)
1000c54c:	d8c00017 	ldw	r3,0(sp)
1000c550:	193fb136 	bltu	r3,r4,1000c418 <__alt_data_end+0xf800c418>
1000c554:	d8c00217 	ldw	r3,8(sp)
1000c558:	00c00c0e 	bge	zero,r3,1000c58c <__multiply+0x244>
1000c55c:	d8c00317 	ldw	r3,12(sp)
1000c560:	18bfff17 	ldw	r2,-4(r3)
1000c564:	1d7fff04 	addi	r21,r3,-4
1000c568:	10000326 	beq	r2,zero,1000c578 <__multiply+0x230>
1000c56c:	00000706 	br	1000c58c <__multiply+0x244>
1000c570:	a8800017 	ldw	r2,0(r21)
1000c574:	1000051e 	bne	r2,zero,1000c58c <__multiply+0x244>
1000c578:	d8c00217 	ldw	r3,8(sp)
1000c57c:	ad7fff04 	addi	r21,r21,-4
1000c580:	18ffffc4 	addi	r3,r3,-1
1000c584:	d8c00215 	stw	r3,8(sp)
1000c588:	183ff91e 	bne	r3,zero,1000c570 <__alt_data_end+0xf800c570>
1000c58c:	d8c00617 	ldw	r3,24(sp)
1000c590:	d9000217 	ldw	r4,8(sp)
1000c594:	1805883a 	mov	r2,r3
1000c598:	19000415 	stw	r4,16(r3)
1000c59c:	dfc01017 	ldw	ra,64(sp)
1000c5a0:	df000f17 	ldw	fp,60(sp)
1000c5a4:	ddc00e17 	ldw	r23,56(sp)
1000c5a8:	dd800d17 	ldw	r22,52(sp)
1000c5ac:	dd400c17 	ldw	r21,48(sp)
1000c5b0:	dd000b17 	ldw	r20,44(sp)
1000c5b4:	dcc00a17 	ldw	r19,40(sp)
1000c5b8:	dc800917 	ldw	r18,36(sp)
1000c5bc:	dc400817 	ldw	r17,32(sp)
1000c5c0:	dc000717 	ldw	r16,28(sp)
1000c5c4:	dec01104 	addi	sp,sp,68
1000c5c8:	f800283a 	ret
1000c5cc:	3025883a 	mov	r18,r6
1000c5d0:	282d883a 	mov	r22,r5
1000c5d4:	003f6f06 	br	1000c394 <__alt_data_end+0xf800c394>

1000c5d8 <__pow5mult>:
1000c5d8:	defffa04 	addi	sp,sp,-24
1000c5dc:	dcc00315 	stw	r19,12(sp)
1000c5e0:	dc800215 	stw	r18,8(sp)
1000c5e4:	dc000015 	stw	r16,0(sp)
1000c5e8:	dfc00515 	stw	ra,20(sp)
1000c5ec:	dd000415 	stw	r20,16(sp)
1000c5f0:	dc400115 	stw	r17,4(sp)
1000c5f4:	308000cc 	andi	r2,r6,3
1000c5f8:	3021883a 	mov	r16,r6
1000c5fc:	2027883a 	mov	r19,r4
1000c600:	2825883a 	mov	r18,r5
1000c604:	10002e1e 	bne	r2,zero,1000c6c0 <__pow5mult+0xe8>
1000c608:	8021d0ba 	srai	r16,r16,2
1000c60c:	80001a26 	beq	r16,zero,1000c678 <__pow5mult+0xa0>
1000c610:	9c401217 	ldw	r17,72(r19)
1000c614:	8800061e 	bne	r17,zero,1000c630 <__pow5mult+0x58>
1000c618:	00003406 	br	1000c6ec <__pow5mult+0x114>
1000c61c:	8021d07a 	srai	r16,r16,1
1000c620:	80001526 	beq	r16,zero,1000c678 <__pow5mult+0xa0>
1000c624:	88800017 	ldw	r2,0(r17)
1000c628:	10001c26 	beq	r2,zero,1000c69c <__pow5mult+0xc4>
1000c62c:	1023883a 	mov	r17,r2
1000c630:	80c0004c 	andi	r3,r16,1
1000c634:	183ff926 	beq	r3,zero,1000c61c <__alt_data_end+0xf800c61c>
1000c638:	900b883a 	mov	r5,r18
1000c63c:	880d883a 	mov	r6,r17
1000c640:	9809883a 	mov	r4,r19
1000c644:	000c3480 	call	1000c348 <__multiply>
1000c648:	90001b26 	beq	r18,zero,1000c6b8 <__pow5mult+0xe0>
1000c64c:	91c00117 	ldw	r7,4(r18)
1000c650:	98c01317 	ldw	r3,76(r19)
1000c654:	8021d07a 	srai	r16,r16,1
1000c658:	39cf883a 	add	r7,r7,r7
1000c65c:	39cf883a 	add	r7,r7,r7
1000c660:	19c7883a 	add	r3,r3,r7
1000c664:	19000017 	ldw	r4,0(r3)
1000c668:	91000015 	stw	r4,0(r18)
1000c66c:	1c800015 	stw	r18,0(r3)
1000c670:	1025883a 	mov	r18,r2
1000c674:	803feb1e 	bne	r16,zero,1000c624 <__alt_data_end+0xf800c624>
1000c678:	9005883a 	mov	r2,r18
1000c67c:	dfc00517 	ldw	ra,20(sp)
1000c680:	dd000417 	ldw	r20,16(sp)
1000c684:	dcc00317 	ldw	r19,12(sp)
1000c688:	dc800217 	ldw	r18,8(sp)
1000c68c:	dc400117 	ldw	r17,4(sp)
1000c690:	dc000017 	ldw	r16,0(sp)
1000c694:	dec00604 	addi	sp,sp,24
1000c698:	f800283a 	ret
1000c69c:	9809883a 	mov	r4,r19
1000c6a0:	880b883a 	mov	r5,r17
1000c6a4:	880d883a 	mov	r6,r17
1000c6a8:	000c3480 	call	1000c348 <__multiply>
1000c6ac:	88800015 	stw	r2,0(r17)
1000c6b0:	10000015 	stw	zero,0(r2)
1000c6b4:	003fdd06 	br	1000c62c <__alt_data_end+0xf800c62c>
1000c6b8:	1025883a 	mov	r18,r2
1000c6bc:	003fd706 	br	1000c61c <__alt_data_end+0xf800c61c>
1000c6c0:	10bfffc4 	addi	r2,r2,-1
1000c6c4:	1085883a 	add	r2,r2,r2
1000c6c8:	00c40074 	movhi	r3,4097
1000c6cc:	18c9c604 	addi	r3,r3,10008
1000c6d0:	1085883a 	add	r2,r2,r2
1000c6d4:	1885883a 	add	r2,r3,r2
1000c6d8:	11800017 	ldw	r6,0(r2)
1000c6dc:	000f883a 	mov	r7,zero
1000c6e0:	000bfb40 	call	1000bfb4 <__multadd>
1000c6e4:	1025883a 	mov	r18,r2
1000c6e8:	003fc706 	br	1000c608 <__alt_data_end+0xf800c608>
1000c6ec:	05000044 	movi	r20,1
1000c6f0:	9809883a 	mov	r4,r19
1000c6f4:	a00b883a 	mov	r5,r20
1000c6f8:	000bee40 	call	1000bee4 <_Balloc>
1000c6fc:	1023883a 	mov	r17,r2
1000c700:	00809c44 	movi	r2,625
1000c704:	88800515 	stw	r2,20(r17)
1000c708:	8d000415 	stw	r20,16(r17)
1000c70c:	9c401215 	stw	r17,72(r19)
1000c710:	88000015 	stw	zero,0(r17)
1000c714:	003fc606 	br	1000c630 <__alt_data_end+0xf800c630>

1000c718 <__lshift>:
1000c718:	defff904 	addi	sp,sp,-28
1000c71c:	dd000415 	stw	r20,16(sp)
1000c720:	dcc00315 	stw	r19,12(sp)
1000c724:	3029d17a 	srai	r20,r6,5
1000c728:	2cc00417 	ldw	r19,16(r5)
1000c72c:	28800217 	ldw	r2,8(r5)
1000c730:	dd400515 	stw	r21,20(sp)
1000c734:	a4e7883a 	add	r19,r20,r19
1000c738:	dc800215 	stw	r18,8(sp)
1000c73c:	dc400115 	stw	r17,4(sp)
1000c740:	dc000015 	stw	r16,0(sp)
1000c744:	dfc00615 	stw	ra,24(sp)
1000c748:	9c000044 	addi	r16,r19,1
1000c74c:	2823883a 	mov	r17,r5
1000c750:	302b883a 	mov	r21,r6
1000c754:	2025883a 	mov	r18,r4
1000c758:	29400117 	ldw	r5,4(r5)
1000c75c:	1400030e 	bge	r2,r16,1000c76c <__lshift+0x54>
1000c760:	1085883a 	add	r2,r2,r2
1000c764:	29400044 	addi	r5,r5,1
1000c768:	143ffd16 	blt	r2,r16,1000c760 <__alt_data_end+0xf800c760>
1000c76c:	9009883a 	mov	r4,r18
1000c770:	000bee40 	call	1000bee4 <_Balloc>
1000c774:	11c00504 	addi	r7,r2,20
1000c778:	0500090e 	bge	zero,r20,1000c7a0 <__lshift+0x88>
1000c77c:	3811883a 	mov	r8,r7
1000c780:	0007883a 	mov	r3,zero
1000c784:	40000015 	stw	zero,0(r8)
1000c788:	18c00044 	addi	r3,r3,1
1000c78c:	42000104 	addi	r8,r8,4
1000c790:	1d3ffc1e 	bne	r3,r20,1000c784 <__alt_data_end+0xf800c784>
1000c794:	18c7883a 	add	r3,r3,r3
1000c798:	18c7883a 	add	r3,r3,r3
1000c79c:	38cf883a 	add	r7,r7,r3
1000c7a0:	89000417 	ldw	r4,16(r17)
1000c7a4:	88c00504 	addi	r3,r17,20
1000c7a8:	a98007cc 	andi	r6,r21,31
1000c7ac:	2109883a 	add	r4,r4,r4
1000c7b0:	2109883a 	add	r4,r4,r4
1000c7b4:	1909883a 	add	r4,r3,r4
1000c7b8:	30002326 	beq	r6,zero,1000c848 <__lshift+0x130>
1000c7bc:	01400804 	movi	r5,32
1000c7c0:	298bc83a 	sub	r5,r5,r6
1000c7c4:	0013883a 	mov	r9,zero
1000c7c8:	1a000017 	ldw	r8,0(r3)
1000c7cc:	3815883a 	mov	r10,r7
1000c7d0:	39c00104 	addi	r7,r7,4
1000c7d4:	4190983a 	sll	r8,r8,r6
1000c7d8:	18c00104 	addi	r3,r3,4
1000c7dc:	4a10b03a 	or	r8,r9,r8
1000c7e0:	3a3fff15 	stw	r8,-4(r7)
1000c7e4:	1a3fff17 	ldw	r8,-4(r3)
1000c7e8:	4152d83a 	srl	r9,r8,r5
1000c7ec:	193ff636 	bltu	r3,r4,1000c7c8 <__alt_data_end+0xf800c7c8>
1000c7f0:	52400115 	stw	r9,4(r10)
1000c7f4:	48000126 	beq	r9,zero,1000c7fc <__lshift+0xe4>
1000c7f8:	9c000084 	addi	r16,r19,2
1000c7fc:	89000117 	ldw	r4,4(r17)
1000c800:	90c01317 	ldw	r3,76(r18)
1000c804:	843fffc4 	addi	r16,r16,-1
1000c808:	2109883a 	add	r4,r4,r4
1000c80c:	2109883a 	add	r4,r4,r4
1000c810:	1907883a 	add	r3,r3,r4
1000c814:	19000017 	ldw	r4,0(r3)
1000c818:	14000415 	stw	r16,16(r2)
1000c81c:	89000015 	stw	r4,0(r17)
1000c820:	1c400015 	stw	r17,0(r3)
1000c824:	dfc00617 	ldw	ra,24(sp)
1000c828:	dd400517 	ldw	r21,20(sp)
1000c82c:	dd000417 	ldw	r20,16(sp)
1000c830:	dcc00317 	ldw	r19,12(sp)
1000c834:	dc800217 	ldw	r18,8(sp)
1000c838:	dc400117 	ldw	r17,4(sp)
1000c83c:	dc000017 	ldw	r16,0(sp)
1000c840:	dec00704 	addi	sp,sp,28
1000c844:	f800283a 	ret
1000c848:	19400017 	ldw	r5,0(r3)
1000c84c:	39c00104 	addi	r7,r7,4
1000c850:	18c00104 	addi	r3,r3,4
1000c854:	397fff15 	stw	r5,-4(r7)
1000c858:	193ffb36 	bltu	r3,r4,1000c848 <__alt_data_end+0xf800c848>
1000c85c:	003fe706 	br	1000c7fc <__alt_data_end+0xf800c7fc>

1000c860 <__mcmp>:
1000c860:	20800417 	ldw	r2,16(r4)
1000c864:	28c00417 	ldw	r3,16(r5)
1000c868:	10c5c83a 	sub	r2,r2,r3
1000c86c:	1000111e 	bne	r2,zero,1000c8b4 <__mcmp+0x54>
1000c870:	18c7883a 	add	r3,r3,r3
1000c874:	18c7883a 	add	r3,r3,r3
1000c878:	21000504 	addi	r4,r4,20
1000c87c:	29400504 	addi	r5,r5,20
1000c880:	20c5883a 	add	r2,r4,r3
1000c884:	28cb883a 	add	r5,r5,r3
1000c888:	00000106 	br	1000c890 <__mcmp+0x30>
1000c88c:	20800a2e 	bgeu	r4,r2,1000c8b8 <__mcmp+0x58>
1000c890:	10bfff04 	addi	r2,r2,-4
1000c894:	297fff04 	addi	r5,r5,-4
1000c898:	11800017 	ldw	r6,0(r2)
1000c89c:	28c00017 	ldw	r3,0(r5)
1000c8a0:	30fffa26 	beq	r6,r3,1000c88c <__alt_data_end+0xf800c88c>
1000c8a4:	30c00236 	bltu	r6,r3,1000c8b0 <__mcmp+0x50>
1000c8a8:	00800044 	movi	r2,1
1000c8ac:	f800283a 	ret
1000c8b0:	00bfffc4 	movi	r2,-1
1000c8b4:	f800283a 	ret
1000c8b8:	0005883a 	mov	r2,zero
1000c8bc:	f800283a 	ret

1000c8c0 <__mdiff>:
1000c8c0:	defffb04 	addi	sp,sp,-20
1000c8c4:	dc000015 	stw	r16,0(sp)
1000c8c8:	2821883a 	mov	r16,r5
1000c8cc:	dcc00315 	stw	r19,12(sp)
1000c8d0:	300b883a 	mov	r5,r6
1000c8d4:	2027883a 	mov	r19,r4
1000c8d8:	8009883a 	mov	r4,r16
1000c8dc:	dc800215 	stw	r18,8(sp)
1000c8e0:	dfc00415 	stw	ra,16(sp)
1000c8e4:	dc400115 	stw	r17,4(sp)
1000c8e8:	3025883a 	mov	r18,r6
1000c8ec:	000c8600 	call	1000c860 <__mcmp>
1000c8f0:	10005226 	beq	r2,zero,1000ca3c <__mdiff+0x17c>
1000c8f4:	10004c16 	blt	r2,zero,1000ca28 <__mdiff+0x168>
1000c8f8:	0023883a 	mov	r17,zero
1000c8fc:	81400117 	ldw	r5,4(r16)
1000c900:	9809883a 	mov	r4,r19
1000c904:	000bee40 	call	1000bee4 <_Balloc>
1000c908:	83400417 	ldw	r13,16(r16)
1000c90c:	93800417 	ldw	r14,16(r18)
1000c910:	81000504 	addi	r4,r16,20
1000c914:	6b59883a 	add	r12,r13,r13
1000c918:	739d883a 	add	r14,r14,r14
1000c91c:	6319883a 	add	r12,r12,r12
1000c920:	91800504 	addi	r6,r18,20
1000c924:	739d883a 	add	r14,r14,r14
1000c928:	14400315 	stw	r17,12(r2)
1000c92c:	2319883a 	add	r12,r4,r12
1000c930:	339d883a 	add	r14,r6,r14
1000c934:	12400504 	addi	r9,r2,20
1000c938:	0007883a 	mov	r3,zero
1000c93c:	22000017 	ldw	r8,0(r4)
1000c940:	32800017 	ldw	r10,0(r6)
1000c944:	4ac00104 	addi	r11,r9,4
1000c948:	41ffffcc 	andi	r7,r8,65535
1000c94c:	38c7883a 	add	r3,r7,r3
1000c950:	51ffffcc 	andi	r7,r10,65535
1000c954:	19cfc83a 	sub	r7,r3,r7
1000c958:	4010d43a 	srli	r8,r8,16
1000c95c:	5014d43a 	srli	r10,r10,16
1000c960:	3807d43a 	srai	r3,r7,16
1000c964:	39ffffcc 	andi	r7,r7,65535
1000c968:	4291c83a 	sub	r8,r8,r10
1000c96c:	40c7883a 	add	r3,r8,r3
1000c970:	1810943a 	slli	r8,r3,16
1000c974:	31800104 	addi	r6,r6,4
1000c978:	21000104 	addi	r4,r4,4
1000c97c:	41ceb03a 	or	r7,r8,r7
1000c980:	49c00015 	stw	r7,0(r9)
1000c984:	1807d43a 	srai	r3,r3,16
1000c988:	580b883a 	mov	r5,r11
1000c98c:	5813883a 	mov	r9,r11
1000c990:	33bfea36 	bltu	r6,r14,1000c93c <__alt_data_end+0xf800c93c>
1000c994:	2011883a 	mov	r8,r4
1000c998:	2300152e 	bgeu	r4,r12,1000c9f0 <__mdiff+0x130>
1000c99c:	21400017 	ldw	r5,0(r4)
1000c9a0:	4a400104 	addi	r9,r9,4
1000c9a4:	21000104 	addi	r4,r4,4
1000c9a8:	29ffffcc 	andi	r7,r5,65535
1000c9ac:	38c7883a 	add	r3,r7,r3
1000c9b0:	280ad43a 	srli	r5,r5,16
1000c9b4:	180dd43a 	srai	r6,r3,16
1000c9b8:	19ffffcc 	andi	r7,r3,65535
1000c9bc:	3147883a 	add	r3,r6,r5
1000c9c0:	180a943a 	slli	r5,r3,16
1000c9c4:	1807d43a 	srai	r3,r3,16
1000c9c8:	29ceb03a 	or	r7,r5,r7
1000c9cc:	49ffff15 	stw	r7,-4(r9)
1000c9d0:	233ff236 	bltu	r4,r12,1000c99c <__alt_data_end+0xf800c99c>
1000c9d4:	0206303a 	nor	r3,zero,r8
1000c9d8:	1b07883a 	add	r3,r3,r12
1000c9dc:	1806d0ba 	srli	r3,r3,2
1000c9e0:	18c00044 	addi	r3,r3,1
1000c9e4:	18c7883a 	add	r3,r3,r3
1000c9e8:	18c7883a 	add	r3,r3,r3
1000c9ec:	58cb883a 	add	r5,r11,r3
1000c9f0:	28ffff04 	addi	r3,r5,-4
1000c9f4:	3800041e 	bne	r7,zero,1000ca08 <__mdiff+0x148>
1000c9f8:	18ffff04 	addi	r3,r3,-4
1000c9fc:	19000017 	ldw	r4,0(r3)
1000ca00:	6b7fffc4 	addi	r13,r13,-1
1000ca04:	203ffc26 	beq	r4,zero,1000c9f8 <__alt_data_end+0xf800c9f8>
1000ca08:	13400415 	stw	r13,16(r2)
1000ca0c:	dfc00417 	ldw	ra,16(sp)
1000ca10:	dcc00317 	ldw	r19,12(sp)
1000ca14:	dc800217 	ldw	r18,8(sp)
1000ca18:	dc400117 	ldw	r17,4(sp)
1000ca1c:	dc000017 	ldw	r16,0(sp)
1000ca20:	dec00504 	addi	sp,sp,20
1000ca24:	f800283a 	ret
1000ca28:	8005883a 	mov	r2,r16
1000ca2c:	04400044 	movi	r17,1
1000ca30:	9021883a 	mov	r16,r18
1000ca34:	1025883a 	mov	r18,r2
1000ca38:	003fb006 	br	1000c8fc <__alt_data_end+0xf800c8fc>
1000ca3c:	9809883a 	mov	r4,r19
1000ca40:	000b883a 	mov	r5,zero
1000ca44:	000bee40 	call	1000bee4 <_Balloc>
1000ca48:	00c00044 	movi	r3,1
1000ca4c:	10c00415 	stw	r3,16(r2)
1000ca50:	10000515 	stw	zero,20(r2)
1000ca54:	003fed06 	br	1000ca0c <__alt_data_end+0xf800ca0c>

1000ca58 <__ulp>:
1000ca58:	295ffc2c 	andhi	r5,r5,32752
1000ca5c:	00bf3034 	movhi	r2,64704
1000ca60:	2887883a 	add	r3,r5,r2
1000ca64:	00c0020e 	bge	zero,r3,1000ca70 <__ulp+0x18>
1000ca68:	0005883a 	mov	r2,zero
1000ca6c:	f800283a 	ret
1000ca70:	00c7c83a 	sub	r3,zero,r3
1000ca74:	180bd53a 	srai	r5,r3,20
1000ca78:	008004c4 	movi	r2,19
1000ca7c:	11400a0e 	bge	r2,r5,1000caa8 <__ulp+0x50>
1000ca80:	00800c84 	movi	r2,50
1000ca84:	0007883a 	mov	r3,zero
1000ca88:	11400516 	blt	r2,r5,1000caa0 <__ulp+0x48>
1000ca8c:	00800cc4 	movi	r2,51
1000ca90:	114bc83a 	sub	r5,r2,r5
1000ca94:	00800044 	movi	r2,1
1000ca98:	1144983a 	sll	r2,r2,r5
1000ca9c:	f800283a 	ret
1000caa0:	00800044 	movi	r2,1
1000caa4:	f800283a 	ret
1000caa8:	00800234 	movhi	r2,8
1000caac:	1147d83a 	sra	r3,r2,r5
1000cab0:	0005883a 	mov	r2,zero
1000cab4:	f800283a 	ret

1000cab8 <__b2d>:
1000cab8:	defffa04 	addi	sp,sp,-24
1000cabc:	dc000015 	stw	r16,0(sp)
1000cac0:	24000417 	ldw	r16,16(r4)
1000cac4:	dc400115 	stw	r17,4(sp)
1000cac8:	24400504 	addi	r17,r4,20
1000cacc:	8421883a 	add	r16,r16,r16
1000cad0:	8421883a 	add	r16,r16,r16
1000cad4:	8c21883a 	add	r16,r17,r16
1000cad8:	dc800215 	stw	r18,8(sp)
1000cadc:	84bfff17 	ldw	r18,-4(r16)
1000cae0:	dd000415 	stw	r20,16(sp)
1000cae4:	dcc00315 	stw	r19,12(sp)
1000cae8:	9009883a 	mov	r4,r18
1000caec:	2829883a 	mov	r20,r5
1000caf0:	dfc00515 	stw	ra,20(sp)
1000caf4:	000c1f40 	call	1000c1f4 <__hi0bits>
1000caf8:	00c00804 	movi	r3,32
1000cafc:	1887c83a 	sub	r3,r3,r2
1000cb00:	a0c00015 	stw	r3,0(r20)
1000cb04:	00c00284 	movi	r3,10
1000cb08:	84ffff04 	addi	r19,r16,-4
1000cb0c:	18801216 	blt	r3,r2,1000cb58 <__b2d+0xa0>
1000cb10:	014002c4 	movi	r5,11
1000cb14:	2889c83a 	sub	r4,r5,r2
1000cb18:	9106d83a 	srl	r3,r18,r4
1000cb1c:	18cffc34 	orhi	r3,r3,16368
1000cb20:	8cc0282e 	bgeu	r17,r19,1000cbc4 <__b2d+0x10c>
1000cb24:	817ffe17 	ldw	r5,-8(r16)
1000cb28:	290ad83a 	srl	r5,r5,r4
1000cb2c:	10800544 	addi	r2,r2,21
1000cb30:	9084983a 	sll	r2,r18,r2
1000cb34:	2884b03a 	or	r2,r5,r2
1000cb38:	dfc00517 	ldw	ra,20(sp)
1000cb3c:	dd000417 	ldw	r20,16(sp)
1000cb40:	dcc00317 	ldw	r19,12(sp)
1000cb44:	dc800217 	ldw	r18,8(sp)
1000cb48:	dc400117 	ldw	r17,4(sp)
1000cb4c:	dc000017 	ldw	r16,0(sp)
1000cb50:	dec00604 	addi	sp,sp,24
1000cb54:	f800283a 	ret
1000cb58:	113ffd44 	addi	r4,r2,-11
1000cb5c:	8cc00f2e 	bgeu	r17,r19,1000cb9c <__b2d+0xe4>
1000cb60:	81bffe04 	addi	r6,r16,-8
1000cb64:	817ffe17 	ldw	r5,-8(r16)
1000cb68:	20001326 	beq	r4,zero,1000cbb8 <__b2d+0x100>
1000cb6c:	00c00ac4 	movi	r3,43
1000cb70:	1885c83a 	sub	r2,r3,r2
1000cb74:	2886d83a 	srl	r3,r5,r2
1000cb78:	9124983a 	sll	r18,r18,r4
1000cb7c:	90e4b03a 	or	r18,r18,r3
1000cb80:	90cffc34 	orhi	r3,r18,16368
1000cb84:	8980112e 	bgeu	r17,r6,1000cbcc <__b2d+0x114>
1000cb88:	81bffd17 	ldw	r6,-12(r16)
1000cb8c:	308cd83a 	srl	r6,r6,r2
1000cb90:	2904983a 	sll	r2,r5,r4
1000cb94:	1184b03a 	or	r2,r2,r6
1000cb98:	003fe706 	br	1000cb38 <__alt_data_end+0xf800cb38>
1000cb9c:	20000526 	beq	r4,zero,1000cbb4 <__b2d+0xfc>
1000cba0:	9124983a 	sll	r18,r18,r4
1000cba4:	000d883a 	mov	r6,zero
1000cba8:	000b883a 	mov	r5,zero
1000cbac:	90cffc34 	orhi	r3,r18,16368
1000cbb0:	003ff706 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000cbb4:	000b883a 	mov	r5,zero
1000cbb8:	90cffc34 	orhi	r3,r18,16368
1000cbbc:	2805883a 	mov	r2,r5
1000cbc0:	003fdd06 	br	1000cb38 <__alt_data_end+0xf800cb38>
1000cbc4:	000b883a 	mov	r5,zero
1000cbc8:	003fd806 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000cbcc:	000d883a 	mov	r6,zero
1000cbd0:	003fef06 	br	1000cb90 <__alt_data_end+0xf800cb90>

1000cbd4 <__d2b>:
1000cbd4:	defff704 	addi	sp,sp,-36
1000cbd8:	dc000215 	stw	r16,8(sp)
1000cbdc:	3021883a 	mov	r16,r6
1000cbe0:	dc400315 	stw	r17,12(sp)
1000cbe4:	8022907a 	slli	r17,r16,1
1000cbe8:	dd400715 	stw	r21,28(sp)
1000cbec:	282b883a 	mov	r21,r5
1000cbf0:	01400044 	movi	r5,1
1000cbf4:	dd000615 	stw	r20,24(sp)
1000cbf8:	dcc00515 	stw	r19,20(sp)
1000cbfc:	dc800415 	stw	r18,16(sp)
1000cc00:	dfc00815 	stw	ra,32(sp)
1000cc04:	3829883a 	mov	r20,r7
1000cc08:	dc800917 	ldw	r18,36(sp)
1000cc0c:	8822d57a 	srli	r17,r17,21
1000cc10:	000bee40 	call	1000bee4 <_Balloc>
1000cc14:	1027883a 	mov	r19,r2
1000cc18:	00800434 	movhi	r2,16
1000cc1c:	10bfffc4 	addi	r2,r2,-1
1000cc20:	808c703a 	and	r6,r16,r2
1000cc24:	88000126 	beq	r17,zero,1000cc2c <__d2b+0x58>
1000cc28:	31800434 	orhi	r6,r6,16
1000cc2c:	d9800015 	stw	r6,0(sp)
1000cc30:	a8001f26 	beq	r21,zero,1000ccb0 <__d2b+0xdc>
1000cc34:	d9000104 	addi	r4,sp,4
1000cc38:	dd400115 	stw	r21,4(sp)
1000cc3c:	000c25c0 	call	1000c25c <__lo0bits>
1000cc40:	d8c00017 	ldw	r3,0(sp)
1000cc44:	1000291e 	bne	r2,zero,1000ccec <__d2b+0x118>
1000cc48:	d9000117 	ldw	r4,4(sp)
1000cc4c:	99000515 	stw	r4,20(r19)
1000cc50:	1820c03a 	cmpne	r16,r3,zero
1000cc54:	84000044 	addi	r16,r16,1
1000cc58:	98c00615 	stw	r3,24(r19)
1000cc5c:	9c000415 	stw	r16,16(r19)
1000cc60:	88001b1e 	bne	r17,zero,1000ccd0 <__d2b+0xfc>
1000cc64:	800690ba 	slli	r3,r16,2
1000cc68:	10bef384 	addi	r2,r2,-1074
1000cc6c:	a0800015 	stw	r2,0(r20)
1000cc70:	98c5883a 	add	r2,r19,r3
1000cc74:	11000417 	ldw	r4,16(r2)
1000cc78:	8020917a 	slli	r16,r16,5
1000cc7c:	000c1f40 	call	1000c1f4 <__hi0bits>
1000cc80:	8085c83a 	sub	r2,r16,r2
1000cc84:	90800015 	stw	r2,0(r18)
1000cc88:	9805883a 	mov	r2,r19
1000cc8c:	dfc00817 	ldw	ra,32(sp)
1000cc90:	dd400717 	ldw	r21,28(sp)
1000cc94:	dd000617 	ldw	r20,24(sp)
1000cc98:	dcc00517 	ldw	r19,20(sp)
1000cc9c:	dc800417 	ldw	r18,16(sp)
1000cca0:	dc400317 	ldw	r17,12(sp)
1000cca4:	dc000217 	ldw	r16,8(sp)
1000cca8:	dec00904 	addi	sp,sp,36
1000ccac:	f800283a 	ret
1000ccb0:	d809883a 	mov	r4,sp
1000ccb4:	000c25c0 	call	1000c25c <__lo0bits>
1000ccb8:	d8c00017 	ldw	r3,0(sp)
1000ccbc:	04000044 	movi	r16,1
1000ccc0:	9c000415 	stw	r16,16(r19)
1000ccc4:	98c00515 	stw	r3,20(r19)
1000ccc8:	10800804 	addi	r2,r2,32
1000cccc:	883fe526 	beq	r17,zero,1000cc64 <__alt_data_end+0xf800cc64>
1000ccd0:	8c7ef344 	addi	r17,r17,-1075
1000ccd4:	88a3883a 	add	r17,r17,r2
1000ccd8:	00c00d44 	movi	r3,53
1000ccdc:	a4400015 	stw	r17,0(r20)
1000cce0:	1885c83a 	sub	r2,r3,r2
1000cce4:	90800015 	stw	r2,0(r18)
1000cce8:	003fe706 	br	1000cc88 <__alt_data_end+0xf800cc88>
1000ccec:	01000804 	movi	r4,32
1000ccf0:	2089c83a 	sub	r4,r4,r2
1000ccf4:	1908983a 	sll	r4,r3,r4
1000ccf8:	d9400117 	ldw	r5,4(sp)
1000ccfc:	1886d83a 	srl	r3,r3,r2
1000cd00:	2148b03a 	or	r4,r4,r5
1000cd04:	99000515 	stw	r4,20(r19)
1000cd08:	d8c00015 	stw	r3,0(sp)
1000cd0c:	003fd006 	br	1000cc50 <__alt_data_end+0xf800cc50>

1000cd10 <__ratio>:
1000cd10:	defff904 	addi	sp,sp,-28
1000cd14:	dc400315 	stw	r17,12(sp)
1000cd18:	2823883a 	mov	r17,r5
1000cd1c:	d9400104 	addi	r5,sp,4
1000cd20:	dfc00615 	stw	ra,24(sp)
1000cd24:	dcc00515 	stw	r19,20(sp)
1000cd28:	dc800415 	stw	r18,16(sp)
1000cd2c:	2027883a 	mov	r19,r4
1000cd30:	dc000215 	stw	r16,8(sp)
1000cd34:	000cab80 	call	1000cab8 <__b2d>
1000cd38:	8809883a 	mov	r4,r17
1000cd3c:	d80b883a 	mov	r5,sp
1000cd40:	1025883a 	mov	r18,r2
1000cd44:	1821883a 	mov	r16,r3
1000cd48:	000cab80 	call	1000cab8 <__b2d>
1000cd4c:	8a400417 	ldw	r9,16(r17)
1000cd50:	9a000417 	ldw	r8,16(r19)
1000cd54:	100d883a 	mov	r6,r2
1000cd58:	d8800017 	ldw	r2,0(sp)
1000cd5c:	4251c83a 	sub	r8,r8,r9
1000cd60:	4012917a 	slli	r9,r8,5
1000cd64:	da000117 	ldw	r8,4(sp)
1000cd68:	4091c83a 	sub	r8,r8,r2
1000cd6c:	4251883a 	add	r8,r8,r9
1000cd70:	02000d0e 	bge	zero,r8,1000cda8 <__ratio+0x98>
1000cd74:	4010953a 	slli	r8,r8,20
1000cd78:	4421883a 	add	r16,r8,r16
1000cd7c:	9009883a 	mov	r4,r18
1000cd80:	800b883a 	mov	r5,r16
1000cd84:	180f883a 	mov	r7,r3
1000cd88:	00049bc0 	call	100049bc <__divdf3>
1000cd8c:	dfc00617 	ldw	ra,24(sp)
1000cd90:	dcc00517 	ldw	r19,20(sp)
1000cd94:	dc800417 	ldw	r18,16(sp)
1000cd98:	dc400317 	ldw	r17,12(sp)
1000cd9c:	dc000217 	ldw	r16,8(sp)
1000cda0:	dec00704 	addi	sp,sp,28
1000cda4:	f800283a 	ret
1000cda8:	4010953a 	slli	r8,r8,20
1000cdac:	1a07c83a 	sub	r3,r3,r8
1000cdb0:	003ff206 	br	1000cd7c <__alt_data_end+0xf800cd7c>

1000cdb4 <_mprec_log10>:
1000cdb4:	defffe04 	addi	sp,sp,-8
1000cdb8:	dc000015 	stw	r16,0(sp)
1000cdbc:	dfc00115 	stw	ra,4(sp)
1000cdc0:	008005c4 	movi	r2,23
1000cdc4:	2021883a 	mov	r16,r4
1000cdc8:	11000d0e 	bge	r2,r4,1000ce00 <_mprec_log10+0x4c>
1000cdcc:	0005883a 	mov	r2,zero
1000cdd0:	00cffc34 	movhi	r3,16368
1000cdd4:	843fffc4 	addi	r16,r16,-1
1000cdd8:	1009883a 	mov	r4,r2
1000cddc:	180b883a 	mov	r5,r3
1000cde0:	000d883a 	mov	r6,zero
1000cde4:	01d00934 	movhi	r7,16420
1000cde8:	00055800 	call	10005580 <__muldf3>
1000cdec:	803ff91e 	bne	r16,zero,1000cdd4 <__alt_data_end+0xf800cdd4>
1000cdf0:	dfc00117 	ldw	ra,4(sp)
1000cdf4:	dc000017 	ldw	r16,0(sp)
1000cdf8:	dec00204 	addi	sp,sp,8
1000cdfc:	f800283a 	ret
1000ce00:	202090fa 	slli	r16,r4,3
1000ce04:	00840074 	movhi	r2,4097
1000ce08:	1089dd04 	addi	r2,r2,10100
1000ce0c:	1421883a 	add	r16,r2,r16
1000ce10:	80800017 	ldw	r2,0(r16)
1000ce14:	80c00117 	ldw	r3,4(r16)
1000ce18:	dfc00117 	ldw	ra,4(sp)
1000ce1c:	dc000017 	ldw	r16,0(sp)
1000ce20:	dec00204 	addi	sp,sp,8
1000ce24:	f800283a 	ret

1000ce28 <__copybits>:
1000ce28:	297fffc4 	addi	r5,r5,-1
1000ce2c:	280fd17a 	srai	r7,r5,5
1000ce30:	30c00417 	ldw	r3,16(r6)
1000ce34:	30800504 	addi	r2,r6,20
1000ce38:	39c00044 	addi	r7,r7,1
1000ce3c:	18c7883a 	add	r3,r3,r3
1000ce40:	39cf883a 	add	r7,r7,r7
1000ce44:	18c7883a 	add	r3,r3,r3
1000ce48:	39cf883a 	add	r7,r7,r7
1000ce4c:	10c7883a 	add	r3,r2,r3
1000ce50:	21cf883a 	add	r7,r4,r7
1000ce54:	10c00d2e 	bgeu	r2,r3,1000ce8c <__copybits+0x64>
1000ce58:	200b883a 	mov	r5,r4
1000ce5c:	12000017 	ldw	r8,0(r2)
1000ce60:	29400104 	addi	r5,r5,4
1000ce64:	10800104 	addi	r2,r2,4
1000ce68:	2a3fff15 	stw	r8,-4(r5)
1000ce6c:	10fffb36 	bltu	r2,r3,1000ce5c <__alt_data_end+0xf800ce5c>
1000ce70:	1985c83a 	sub	r2,r3,r6
1000ce74:	10bffac4 	addi	r2,r2,-21
1000ce78:	1004d0ba 	srli	r2,r2,2
1000ce7c:	10800044 	addi	r2,r2,1
1000ce80:	1085883a 	add	r2,r2,r2
1000ce84:	1085883a 	add	r2,r2,r2
1000ce88:	2089883a 	add	r4,r4,r2
1000ce8c:	21c0032e 	bgeu	r4,r7,1000ce9c <__copybits+0x74>
1000ce90:	20000015 	stw	zero,0(r4)
1000ce94:	21000104 	addi	r4,r4,4
1000ce98:	21fffd36 	bltu	r4,r7,1000ce90 <__alt_data_end+0xf800ce90>
1000ce9c:	f800283a 	ret

1000cea0 <__any_on>:
1000cea0:	20c00417 	ldw	r3,16(r4)
1000cea4:	2805d17a 	srai	r2,r5,5
1000cea8:	21000504 	addi	r4,r4,20
1000ceac:	18800d0e 	bge	r3,r2,1000cee4 <__any_on+0x44>
1000ceb0:	18c7883a 	add	r3,r3,r3
1000ceb4:	18c7883a 	add	r3,r3,r3
1000ceb8:	20c7883a 	add	r3,r4,r3
1000cebc:	20c0192e 	bgeu	r4,r3,1000cf24 <__any_on+0x84>
1000cec0:	18bfff17 	ldw	r2,-4(r3)
1000cec4:	18ffff04 	addi	r3,r3,-4
1000cec8:	1000041e 	bne	r2,zero,1000cedc <__any_on+0x3c>
1000cecc:	20c0142e 	bgeu	r4,r3,1000cf20 <__any_on+0x80>
1000ced0:	18ffff04 	addi	r3,r3,-4
1000ced4:	19400017 	ldw	r5,0(r3)
1000ced8:	283ffc26 	beq	r5,zero,1000cecc <__alt_data_end+0xf800cecc>
1000cedc:	00800044 	movi	r2,1
1000cee0:	f800283a 	ret
1000cee4:	10c00a0e 	bge	r2,r3,1000cf10 <__any_on+0x70>
1000cee8:	1085883a 	add	r2,r2,r2
1000ceec:	1085883a 	add	r2,r2,r2
1000cef0:	294007cc 	andi	r5,r5,31
1000cef4:	2087883a 	add	r3,r4,r2
1000cef8:	283ff026 	beq	r5,zero,1000cebc <__alt_data_end+0xf800cebc>
1000cefc:	19800017 	ldw	r6,0(r3)
1000cf00:	3144d83a 	srl	r2,r6,r5
1000cf04:	114a983a 	sll	r5,r2,r5
1000cf08:	29bff41e 	bne	r5,r6,1000cedc <__alt_data_end+0xf800cedc>
1000cf0c:	003feb06 	br	1000cebc <__alt_data_end+0xf800cebc>
1000cf10:	1085883a 	add	r2,r2,r2
1000cf14:	1085883a 	add	r2,r2,r2
1000cf18:	2087883a 	add	r3,r4,r2
1000cf1c:	003fe706 	br	1000cebc <__alt_data_end+0xf800cebc>
1000cf20:	f800283a 	ret
1000cf24:	0005883a 	mov	r2,zero
1000cf28:	f800283a 	ret

1000cf2c <_putc_r>:
1000cf2c:	defffc04 	addi	sp,sp,-16
1000cf30:	dc000215 	stw	r16,8(sp)
1000cf34:	dfc00315 	stw	ra,12(sp)
1000cf38:	2021883a 	mov	r16,r4
1000cf3c:	20000226 	beq	r4,zero,1000cf48 <_putc_r+0x1c>
1000cf40:	20800e17 	ldw	r2,56(r4)
1000cf44:	10001b26 	beq	r2,zero,1000cfb4 <_putc_r+0x88>
1000cf48:	30800217 	ldw	r2,8(r6)
1000cf4c:	10bfffc4 	addi	r2,r2,-1
1000cf50:	30800215 	stw	r2,8(r6)
1000cf54:	10000a16 	blt	r2,zero,1000cf80 <_putc_r+0x54>
1000cf58:	30800017 	ldw	r2,0(r6)
1000cf5c:	11400005 	stb	r5,0(r2)
1000cf60:	30800017 	ldw	r2,0(r6)
1000cf64:	10c00044 	addi	r3,r2,1
1000cf68:	30c00015 	stw	r3,0(r6)
1000cf6c:	10800003 	ldbu	r2,0(r2)
1000cf70:	dfc00317 	ldw	ra,12(sp)
1000cf74:	dc000217 	ldw	r16,8(sp)
1000cf78:	dec00404 	addi	sp,sp,16
1000cf7c:	f800283a 	ret
1000cf80:	30c00617 	ldw	r3,24(r6)
1000cf84:	10c00616 	blt	r2,r3,1000cfa0 <_putc_r+0x74>
1000cf88:	30800017 	ldw	r2,0(r6)
1000cf8c:	00c00284 	movi	r3,10
1000cf90:	11400005 	stb	r5,0(r2)
1000cf94:	30800017 	ldw	r2,0(r6)
1000cf98:	11400003 	ldbu	r5,0(r2)
1000cf9c:	28fff11e 	bne	r5,r3,1000cf64 <__alt_data_end+0xf800cf64>
1000cfa0:	8009883a 	mov	r4,r16
1000cfa4:	dfc00317 	ldw	ra,12(sp)
1000cfa8:	dc000217 	ldw	r16,8(sp)
1000cfac:	dec00404 	addi	sp,sp,16
1000cfb0:	000e8bc1 	jmpi	1000e8bc <__swbuf_r>
1000cfb4:	d9400015 	stw	r5,0(sp)
1000cfb8:	d9800115 	stw	r6,4(sp)
1000cfbc:	000ab8c0 	call	1000ab8c <__sinit>
1000cfc0:	d9800117 	ldw	r6,4(sp)
1000cfc4:	d9400017 	ldw	r5,0(sp)
1000cfc8:	003fdf06 	br	1000cf48 <__alt_data_end+0xf800cf48>

1000cfcc <putc>:
1000cfcc:	defffc04 	addi	sp,sp,-16
1000cfd0:	dc400115 	stw	r17,4(sp)
1000cfd4:	04440074 	movhi	r17,4097
1000cfd8:	8c50d104 	addi	r17,r17,17220
1000cfdc:	dc800215 	stw	r18,8(sp)
1000cfe0:	2025883a 	mov	r18,r4
1000cfe4:	89000017 	ldw	r4,0(r17)
1000cfe8:	dc000015 	stw	r16,0(sp)
1000cfec:	dfc00315 	stw	ra,12(sp)
1000cff0:	2821883a 	mov	r16,r5
1000cff4:	20000226 	beq	r4,zero,1000d000 <putc+0x34>
1000cff8:	20c00e17 	ldw	r3,56(r4)
1000cffc:	18001a26 	beq	r3,zero,1000d068 <putc+0x9c>
1000d000:	80800217 	ldw	r2,8(r16)
1000d004:	10bfffc4 	addi	r2,r2,-1
1000d008:	80800215 	stw	r2,8(r16)
1000d00c:	10000c16 	blt	r2,zero,1000d040 <putc+0x74>
1000d010:	80800017 	ldw	r2,0(r16)
1000d014:	14800005 	stb	r18,0(r2)
1000d018:	80800017 	ldw	r2,0(r16)
1000d01c:	10c00044 	addi	r3,r2,1
1000d020:	80c00015 	stw	r3,0(r16)
1000d024:	10800003 	ldbu	r2,0(r2)
1000d028:	dfc00317 	ldw	ra,12(sp)
1000d02c:	dc800217 	ldw	r18,8(sp)
1000d030:	dc400117 	ldw	r17,4(sp)
1000d034:	dc000017 	ldw	r16,0(sp)
1000d038:	dec00404 	addi	sp,sp,16
1000d03c:	f800283a 	ret
1000d040:	80c00617 	ldw	r3,24(r16)
1000d044:	10c00a16 	blt	r2,r3,1000d070 <putc+0xa4>
1000d048:	80800017 	ldw	r2,0(r16)
1000d04c:	00c00284 	movi	r3,10
1000d050:	14800005 	stb	r18,0(r2)
1000d054:	80800017 	ldw	r2,0(r16)
1000d058:	11400003 	ldbu	r5,0(r2)
1000d05c:	28ffef1e 	bne	r5,r3,1000d01c <__alt_data_end+0xf800d01c>
1000d060:	89000017 	ldw	r4,0(r17)
1000d064:	00000406 	br	1000d078 <putc+0xac>
1000d068:	000ab8c0 	call	1000ab8c <__sinit>
1000d06c:	003fe406 	br	1000d000 <__alt_data_end+0xf800d000>
1000d070:	89000017 	ldw	r4,0(r17)
1000d074:	900b883a 	mov	r5,r18
1000d078:	800d883a 	mov	r6,r16
1000d07c:	dfc00317 	ldw	ra,12(sp)
1000d080:	dc800217 	ldw	r18,8(sp)
1000d084:	dc400117 	ldw	r17,4(sp)
1000d088:	dc000017 	ldw	r16,0(sp)
1000d08c:	dec00404 	addi	sp,sp,16
1000d090:	000e8bc1 	jmpi	1000e8bc <__swbuf_r>

1000d094 <_sbrk_r>:
1000d094:	defffd04 	addi	sp,sp,-12
1000d098:	dc000015 	stw	r16,0(sp)
1000d09c:	04040074 	movhi	r16,4097
1000d0a0:	dc400115 	stw	r17,4(sp)
1000d0a4:	8417a904 	addi	r16,r16,24228
1000d0a8:	2023883a 	mov	r17,r4
1000d0ac:	2809883a 	mov	r4,r5
1000d0b0:	dfc00215 	stw	ra,8(sp)
1000d0b4:	80000015 	stw	zero,0(r16)
1000d0b8:	001059c0 	call	1001059c <sbrk>
1000d0bc:	00ffffc4 	movi	r3,-1
1000d0c0:	10c00526 	beq	r2,r3,1000d0d8 <_sbrk_r+0x44>
1000d0c4:	dfc00217 	ldw	ra,8(sp)
1000d0c8:	dc400117 	ldw	r17,4(sp)
1000d0cc:	dc000017 	ldw	r16,0(sp)
1000d0d0:	dec00304 	addi	sp,sp,12
1000d0d4:	f800283a 	ret
1000d0d8:	80c00017 	ldw	r3,0(r16)
1000d0dc:	183ff926 	beq	r3,zero,1000d0c4 <__alt_data_end+0xf800d0c4>
1000d0e0:	88c00015 	stw	r3,0(r17)
1000d0e4:	003ff706 	br	1000d0c4 <__alt_data_end+0xf800d0c4>

1000d0e8 <__sread>:
1000d0e8:	defffe04 	addi	sp,sp,-8
1000d0ec:	dc000015 	stw	r16,0(sp)
1000d0f0:	2821883a 	mov	r16,r5
1000d0f4:	2940038f 	ldh	r5,14(r5)
1000d0f8:	dfc00115 	stw	ra,4(sp)
1000d0fc:	000f5ac0 	call	1000f5ac <_read_r>
1000d100:	10000716 	blt	r2,zero,1000d120 <__sread+0x38>
1000d104:	80c01417 	ldw	r3,80(r16)
1000d108:	1887883a 	add	r3,r3,r2
1000d10c:	80c01415 	stw	r3,80(r16)
1000d110:	dfc00117 	ldw	ra,4(sp)
1000d114:	dc000017 	ldw	r16,0(sp)
1000d118:	dec00204 	addi	sp,sp,8
1000d11c:	f800283a 	ret
1000d120:	80c0030b 	ldhu	r3,12(r16)
1000d124:	18fbffcc 	andi	r3,r3,61439
1000d128:	80c0030d 	sth	r3,12(r16)
1000d12c:	dfc00117 	ldw	ra,4(sp)
1000d130:	dc000017 	ldw	r16,0(sp)
1000d134:	dec00204 	addi	sp,sp,8
1000d138:	f800283a 	ret

1000d13c <__seofread>:
1000d13c:	0005883a 	mov	r2,zero
1000d140:	f800283a 	ret

1000d144 <__swrite>:
1000d144:	2880030b 	ldhu	r2,12(r5)
1000d148:	defffb04 	addi	sp,sp,-20
1000d14c:	dcc00315 	stw	r19,12(sp)
1000d150:	dc800215 	stw	r18,8(sp)
1000d154:	dc400115 	stw	r17,4(sp)
1000d158:	dc000015 	stw	r16,0(sp)
1000d15c:	dfc00415 	stw	ra,16(sp)
1000d160:	10c0400c 	andi	r3,r2,256
1000d164:	2821883a 	mov	r16,r5
1000d168:	2027883a 	mov	r19,r4
1000d16c:	3025883a 	mov	r18,r6
1000d170:	3823883a 	mov	r17,r7
1000d174:	18000526 	beq	r3,zero,1000d18c <__swrite+0x48>
1000d178:	2940038f 	ldh	r5,14(r5)
1000d17c:	000d883a 	mov	r6,zero
1000d180:	01c00084 	movi	r7,2
1000d184:	000f3f40 	call	1000f3f4 <_lseek_r>
1000d188:	8080030b 	ldhu	r2,12(r16)
1000d18c:	8140038f 	ldh	r5,14(r16)
1000d190:	10bbffcc 	andi	r2,r2,61439
1000d194:	9809883a 	mov	r4,r19
1000d198:	900d883a 	mov	r6,r18
1000d19c:	880f883a 	mov	r7,r17
1000d1a0:	8080030d 	sth	r2,12(r16)
1000d1a4:	dfc00417 	ldw	ra,16(sp)
1000d1a8:	dcc00317 	ldw	r19,12(sp)
1000d1ac:	dc800217 	ldw	r18,8(sp)
1000d1b0:	dc400117 	ldw	r17,4(sp)
1000d1b4:	dc000017 	ldw	r16,0(sp)
1000d1b8:	dec00504 	addi	sp,sp,20
1000d1bc:	000ea2c1 	jmpi	1000ea2c <_write_r>

1000d1c0 <__sseek>:
1000d1c0:	defffe04 	addi	sp,sp,-8
1000d1c4:	dc000015 	stw	r16,0(sp)
1000d1c8:	2821883a 	mov	r16,r5
1000d1cc:	2940038f 	ldh	r5,14(r5)
1000d1d0:	dfc00115 	stw	ra,4(sp)
1000d1d4:	000f3f40 	call	1000f3f4 <_lseek_r>
1000d1d8:	00ffffc4 	movi	r3,-1
1000d1dc:	10c00826 	beq	r2,r3,1000d200 <__sseek+0x40>
1000d1e0:	80c0030b 	ldhu	r3,12(r16)
1000d1e4:	80801415 	stw	r2,80(r16)
1000d1e8:	18c40014 	ori	r3,r3,4096
1000d1ec:	80c0030d 	sth	r3,12(r16)
1000d1f0:	dfc00117 	ldw	ra,4(sp)
1000d1f4:	dc000017 	ldw	r16,0(sp)
1000d1f8:	dec00204 	addi	sp,sp,8
1000d1fc:	f800283a 	ret
1000d200:	80c0030b 	ldhu	r3,12(r16)
1000d204:	18fbffcc 	andi	r3,r3,61439
1000d208:	80c0030d 	sth	r3,12(r16)
1000d20c:	dfc00117 	ldw	ra,4(sp)
1000d210:	dc000017 	ldw	r16,0(sp)
1000d214:	dec00204 	addi	sp,sp,8
1000d218:	f800283a 	ret

1000d21c <__sclose>:
1000d21c:	2940038f 	ldh	r5,14(r5)
1000d220:	000ea881 	jmpi	1000ea88 <_close_r>

1000d224 <strcmp>:
1000d224:	2144b03a 	or	r2,r4,r5
1000d228:	108000cc 	andi	r2,r2,3
1000d22c:	1000171e 	bne	r2,zero,1000d28c <strcmp+0x68>
1000d230:	20800017 	ldw	r2,0(r4)
1000d234:	28c00017 	ldw	r3,0(r5)
1000d238:	10c0141e 	bne	r2,r3,1000d28c <strcmp+0x68>
1000d23c:	027fbff4 	movhi	r9,65279
1000d240:	4a7fbfc4 	addi	r9,r9,-257
1000d244:	0086303a 	nor	r3,zero,r2
1000d248:	02202074 	movhi	r8,32897
1000d24c:	1245883a 	add	r2,r2,r9
1000d250:	42202004 	addi	r8,r8,-32640
1000d254:	10c4703a 	and	r2,r2,r3
1000d258:	1204703a 	and	r2,r2,r8
1000d25c:	10000226 	beq	r2,zero,1000d268 <strcmp+0x44>
1000d260:	00001706 	br	1000d2c0 <strcmp+0x9c>
1000d264:	1000161e 	bne	r2,zero,1000d2c0 <strcmp+0x9c>
1000d268:	21000104 	addi	r4,r4,4
1000d26c:	20c00017 	ldw	r3,0(r4)
1000d270:	29400104 	addi	r5,r5,4
1000d274:	29800017 	ldw	r6,0(r5)
1000d278:	1a4f883a 	add	r7,r3,r9
1000d27c:	00c4303a 	nor	r2,zero,r3
1000d280:	3884703a 	and	r2,r7,r2
1000d284:	1204703a 	and	r2,r2,r8
1000d288:	19bff626 	beq	r3,r6,1000d264 <__alt_data_end+0xf800d264>
1000d28c:	20800007 	ldb	r2,0(r4)
1000d290:	1000051e 	bne	r2,zero,1000d2a8 <strcmp+0x84>
1000d294:	00000606 	br	1000d2b0 <strcmp+0x8c>
1000d298:	21000044 	addi	r4,r4,1
1000d29c:	20800007 	ldb	r2,0(r4)
1000d2a0:	29400044 	addi	r5,r5,1
1000d2a4:	10000226 	beq	r2,zero,1000d2b0 <strcmp+0x8c>
1000d2a8:	28c00007 	ldb	r3,0(r5)
1000d2ac:	10fffa26 	beq	r2,r3,1000d298 <__alt_data_end+0xf800d298>
1000d2b0:	20800003 	ldbu	r2,0(r4)
1000d2b4:	28c00003 	ldbu	r3,0(r5)
1000d2b8:	10c5c83a 	sub	r2,r2,r3
1000d2bc:	f800283a 	ret
1000d2c0:	0005883a 	mov	r2,zero
1000d2c4:	f800283a 	ret

1000d2c8 <strlen>:
1000d2c8:	208000cc 	andi	r2,r4,3
1000d2cc:	10002026 	beq	r2,zero,1000d350 <strlen+0x88>
1000d2d0:	20800007 	ldb	r2,0(r4)
1000d2d4:	10002026 	beq	r2,zero,1000d358 <strlen+0x90>
1000d2d8:	2005883a 	mov	r2,r4
1000d2dc:	00000206 	br	1000d2e8 <strlen+0x20>
1000d2e0:	10c00007 	ldb	r3,0(r2)
1000d2e4:	18001826 	beq	r3,zero,1000d348 <strlen+0x80>
1000d2e8:	10800044 	addi	r2,r2,1
1000d2ec:	10c000cc 	andi	r3,r2,3
1000d2f0:	183ffb1e 	bne	r3,zero,1000d2e0 <__alt_data_end+0xf800d2e0>
1000d2f4:	10c00017 	ldw	r3,0(r2)
1000d2f8:	01ffbff4 	movhi	r7,65279
1000d2fc:	39ffbfc4 	addi	r7,r7,-257
1000d300:	00ca303a 	nor	r5,zero,r3
1000d304:	01a02074 	movhi	r6,32897
1000d308:	19c7883a 	add	r3,r3,r7
1000d30c:	31a02004 	addi	r6,r6,-32640
1000d310:	1946703a 	and	r3,r3,r5
1000d314:	1986703a 	and	r3,r3,r6
1000d318:	1800091e 	bne	r3,zero,1000d340 <strlen+0x78>
1000d31c:	10800104 	addi	r2,r2,4
1000d320:	10c00017 	ldw	r3,0(r2)
1000d324:	19cb883a 	add	r5,r3,r7
1000d328:	00c6303a 	nor	r3,zero,r3
1000d32c:	28c6703a 	and	r3,r5,r3
1000d330:	1986703a 	and	r3,r3,r6
1000d334:	183ff926 	beq	r3,zero,1000d31c <__alt_data_end+0xf800d31c>
1000d338:	00000106 	br	1000d340 <strlen+0x78>
1000d33c:	10800044 	addi	r2,r2,1
1000d340:	10c00007 	ldb	r3,0(r2)
1000d344:	183ffd1e 	bne	r3,zero,1000d33c <__alt_data_end+0xf800d33c>
1000d348:	1105c83a 	sub	r2,r2,r4
1000d34c:	f800283a 	ret
1000d350:	2005883a 	mov	r2,r4
1000d354:	003fe706 	br	1000d2f4 <__alt_data_end+0xf800d2f4>
1000d358:	0005883a 	mov	r2,zero
1000d35c:	f800283a 	ret

1000d360 <__sprint_r.part.0>:
1000d360:	28801917 	ldw	r2,100(r5)
1000d364:	defff604 	addi	sp,sp,-40
1000d368:	dd400515 	stw	r21,20(sp)
1000d36c:	dcc00315 	stw	r19,12(sp)
1000d370:	dfc00915 	stw	ra,36(sp)
1000d374:	df000815 	stw	fp,32(sp)
1000d378:	ddc00715 	stw	r23,28(sp)
1000d37c:	dd800615 	stw	r22,24(sp)
1000d380:	dd000415 	stw	r20,16(sp)
1000d384:	dc800215 	stw	r18,8(sp)
1000d388:	dc400115 	stw	r17,4(sp)
1000d38c:	dc000015 	stw	r16,0(sp)
1000d390:	1088000c 	andi	r2,r2,8192
1000d394:	2827883a 	mov	r19,r5
1000d398:	302b883a 	mov	r21,r6
1000d39c:	10002d26 	beq	r2,zero,1000d454 <__sprint_r.part.0+0xf4>
1000d3a0:	30800217 	ldw	r2,8(r6)
1000d3a4:	35800017 	ldw	r22,0(r6)
1000d3a8:	10002826 	beq	r2,zero,1000d44c <__sprint_r.part.0+0xec>
1000d3ac:	2029883a 	mov	r20,r4
1000d3b0:	b5c00104 	addi	r23,r22,4
1000d3b4:	04bfffc4 	movi	r18,-1
1000d3b8:	bc400017 	ldw	r17,0(r23)
1000d3bc:	b4000017 	ldw	r16,0(r22)
1000d3c0:	0039883a 	mov	fp,zero
1000d3c4:	8822d0ba 	srli	r17,r17,2
1000d3c8:	04400316 	blt	zero,r17,1000d3d8 <__sprint_r.part.0+0x78>
1000d3cc:	00001706 	br	1000d42c <__sprint_r.part.0+0xcc>
1000d3d0:	84000104 	addi	r16,r16,4
1000d3d4:	8f001526 	beq	r17,fp,1000d42c <__sprint_r.part.0+0xcc>
1000d3d8:	81400017 	ldw	r5,0(r16)
1000d3dc:	a009883a 	mov	r4,r20
1000d3e0:	980d883a 	mov	r6,r19
1000d3e4:	000ecc80 	call	1000ecc8 <_fputwc_r>
1000d3e8:	e7000044 	addi	fp,fp,1
1000d3ec:	14bff81e 	bne	r2,r18,1000d3d0 <__alt_data_end+0xf800d3d0>
1000d3f0:	9005883a 	mov	r2,r18
1000d3f4:	a8000215 	stw	zero,8(r21)
1000d3f8:	a8000115 	stw	zero,4(r21)
1000d3fc:	dfc00917 	ldw	ra,36(sp)
1000d400:	df000817 	ldw	fp,32(sp)
1000d404:	ddc00717 	ldw	r23,28(sp)
1000d408:	dd800617 	ldw	r22,24(sp)
1000d40c:	dd400517 	ldw	r21,20(sp)
1000d410:	dd000417 	ldw	r20,16(sp)
1000d414:	dcc00317 	ldw	r19,12(sp)
1000d418:	dc800217 	ldw	r18,8(sp)
1000d41c:	dc400117 	ldw	r17,4(sp)
1000d420:	dc000017 	ldw	r16,0(sp)
1000d424:	dec00a04 	addi	sp,sp,40
1000d428:	f800283a 	ret
1000d42c:	a8c00217 	ldw	r3,8(r21)
1000d430:	8c63883a 	add	r17,r17,r17
1000d434:	8c63883a 	add	r17,r17,r17
1000d438:	1c45c83a 	sub	r2,r3,r17
1000d43c:	a8800215 	stw	r2,8(r21)
1000d440:	b5800204 	addi	r22,r22,8
1000d444:	bdc00204 	addi	r23,r23,8
1000d448:	103fdb1e 	bne	r2,zero,1000d3b8 <__alt_data_end+0xf800d3b8>
1000d44c:	0005883a 	mov	r2,zero
1000d450:	003fe806 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000d454:	000eefc0 	call	1000eefc <__sfvwrite_r>
1000d458:	003fe606 	br	1000d3f4 <__alt_data_end+0xf800d3f4>

1000d45c <__sprint_r>:
1000d45c:	30c00217 	ldw	r3,8(r6)
1000d460:	18000126 	beq	r3,zero,1000d468 <__sprint_r+0xc>
1000d464:	000d3601 	jmpi	1000d360 <__sprint_r.part.0>
1000d468:	30000115 	stw	zero,4(r6)
1000d46c:	0005883a 	mov	r2,zero
1000d470:	f800283a 	ret

1000d474 <___vfiprintf_internal_r>:
1000d474:	defeca04 	addi	sp,sp,-1240
1000d478:	dcc12f15 	stw	r19,1212(sp)
1000d47c:	dfc13515 	stw	ra,1236(sp)
1000d480:	df013415 	stw	fp,1232(sp)
1000d484:	ddc13315 	stw	r23,1228(sp)
1000d488:	dd813215 	stw	r22,1224(sp)
1000d48c:	dd413115 	stw	r21,1220(sp)
1000d490:	dd013015 	stw	r20,1216(sp)
1000d494:	dc812e15 	stw	r18,1208(sp)
1000d498:	dc412d15 	stw	r17,1204(sp)
1000d49c:	dc012c15 	stw	r16,1200(sp)
1000d4a0:	d9012115 	stw	r4,1156(sp)
1000d4a4:	d9412015 	stw	r5,1152(sp)
1000d4a8:	d9c12315 	stw	r7,1164(sp)
1000d4ac:	3027883a 	mov	r19,r6
1000d4b0:	20000226 	beq	r4,zero,1000d4bc <___vfiprintf_internal_r+0x48>
1000d4b4:	20800e17 	ldw	r2,56(r4)
1000d4b8:	1000f726 	beq	r2,zero,1000d898 <___vfiprintf_internal_r+0x424>
1000d4bc:	d8812017 	ldw	r2,1152(sp)
1000d4c0:	10c0030b 	ldhu	r3,12(r2)
1000d4c4:	1908000c 	andi	r4,r3,8192
1000d4c8:	1805883a 	mov	r2,r3
1000d4cc:	2000081e 	bne	r4,zero,1000d4f0 <___vfiprintf_internal_r+0x7c>
1000d4d0:	d9412017 	ldw	r5,1152(sp)
1000d4d4:	18880014 	ori	r2,r3,8192
1000d4d8:	00f7ffc4 	movi	r3,-8193
1000d4dc:	29001917 	ldw	r4,100(r5)
1000d4e0:	2880030d 	sth	r2,12(r5)
1000d4e4:	20c8703a 	and	r4,r4,r3
1000d4e8:	29001915 	stw	r4,100(r5)
1000d4ec:	1007883a 	mov	r3,r2
1000d4f0:	1100020c 	andi	r4,r2,8
1000d4f4:	2000a726 	beq	r4,zero,1000d794 <___vfiprintf_internal_r+0x320>
1000d4f8:	d9412017 	ldw	r5,1152(sp)
1000d4fc:	29000417 	ldw	r4,16(r5)
1000d500:	2000a426 	beq	r4,zero,1000d794 <___vfiprintf_internal_r+0x320>
1000d504:	1080068c 	andi	r2,r2,26
1000d508:	01000284 	movi	r4,10
1000d50c:	1100ab26 	beq	r2,r4,1000d7bc <___vfiprintf_internal_r+0x348>
1000d510:	d9010a04 	addi	r4,sp,1064
1000d514:	d94109c4 	addi	r5,sp,1063
1000d518:	07040074 	movhi	fp,4097
1000d51c:	04440074 	movhi	r17,4097
1000d520:	2145c83a 	sub	r2,r4,r5
1000d524:	e70a1304 	addi	fp,fp,10316
1000d528:	8c4a0f04 	addi	r17,r17,10300
1000d52c:	d9011e15 	stw	r4,1144(sp)
1000d530:	d9411f15 	stw	r5,1148(sp)
1000d534:	dec11a15 	stw	sp,1128(sp)
1000d538:	d8011c15 	stw	zero,1136(sp)
1000d53c:	d8011b15 	stw	zero,1132(sp)
1000d540:	d8012715 	stw	zero,1180(sp)
1000d544:	d8012515 	stw	zero,1172(sp)
1000d548:	d811883a 	mov	r8,sp
1000d54c:	d8812815 	stw	r2,1184(sp)
1000d550:	982f883a 	mov	r23,r19
1000d554:	b8800007 	ldb	r2,0(r23)
1000d558:	1003b026 	beq	r2,zero,1000e41c <___vfiprintf_internal_r+0xfa8>
1000d55c:	01000944 	movi	r4,37
1000d560:	1103ae26 	beq	r2,r4,1000e41c <___vfiprintf_internal_r+0xfa8>
1000d564:	b805883a 	mov	r2,r23
1000d568:	00000106 	br	1000d570 <___vfiprintf_internal_r+0xfc>
1000d56c:	19000326 	beq	r3,r4,1000d57c <___vfiprintf_internal_r+0x108>
1000d570:	10800044 	addi	r2,r2,1
1000d574:	10c00007 	ldb	r3,0(r2)
1000d578:	183ffc1e 	bne	r3,zero,1000d56c <__alt_data_end+0xf800d56c>
1000d57c:	15e1c83a 	sub	r16,r2,r23
1000d580:	1029883a 	mov	r20,r2
1000d584:	80001026 	beq	r16,zero,1000d5c8 <___vfiprintf_internal_r+0x154>
1000d588:	d8c11c17 	ldw	r3,1136(sp)
1000d58c:	d8811b17 	ldw	r2,1132(sp)
1000d590:	45c00015 	stw	r23,0(r8)
1000d594:	80c7883a 	add	r3,r16,r3
1000d598:	10800044 	addi	r2,r2,1
1000d59c:	44000115 	stw	r16,4(r8)
1000d5a0:	d8c11c15 	stw	r3,1136(sp)
1000d5a4:	d8811b15 	stw	r2,1132(sp)
1000d5a8:	010001c4 	movi	r4,7
1000d5ac:	2080740e 	bge	r4,r2,1000d780 <___vfiprintf_internal_r+0x30c>
1000d5b0:	1803a71e 	bne	r3,zero,1000e450 <___vfiprintf_internal_r+0xfdc>
1000d5b4:	d8c12517 	ldw	r3,1172(sp)
1000d5b8:	d8011b15 	stw	zero,1132(sp)
1000d5bc:	d811883a 	mov	r8,sp
1000d5c0:	1c07883a 	add	r3,r3,r16
1000d5c4:	d8c12515 	stw	r3,1172(sp)
1000d5c8:	a0800007 	ldb	r2,0(r20)
1000d5cc:	1002bf26 	beq	r2,zero,1000e0cc <___vfiprintf_internal_r+0xc58>
1000d5d0:	a5c00044 	addi	r23,r20,1
1000d5d4:	a1800047 	ldb	r6,1(r20)
1000d5d8:	d8011d85 	stb	zero,1142(sp)
1000d5dc:	d8012205 	stb	zero,1160(sp)
1000d5e0:	043fffc4 	movi	r16,-1
1000d5e4:	d8012415 	stw	zero,1168(sp)
1000d5e8:	0025883a 	mov	r18,zero
1000d5ec:	05001604 	movi	r20,88
1000d5f0:	05400244 	movi	r21,9
1000d5f4:	4027883a 	mov	r19,r8
1000d5f8:	bdc00044 	addi	r23,r23,1
1000d5fc:	30bff804 	addi	r2,r6,-32
1000d600:	a0825636 	bltu	r20,r2,1000df5c <___vfiprintf_internal_r+0xae8>
1000d604:	100490ba 	slli	r2,r2,2
1000d608:	01040074 	movhi	r4,4097
1000d60c:	21358704 	addi	r4,r4,-10724
1000d610:	1105883a 	add	r2,r2,r4
1000d614:	10800017 	ldw	r2,0(r2)
1000d618:	1000683a 	jmp	r2
1000d61c:	1000deec 	andhi	zero,r2,891
1000d620:	1000df5c 	xori	zero,r2,893
1000d624:	1000df5c 	xori	zero,r2,893
1000d628:	1000df50 	cmplti	zero,r2,893
1000d62c:	1000df5c 	xori	zero,r2,893
1000d630:	1000df5c 	xori	zero,r2,893
1000d634:	1000df5c 	xori	zero,r2,893
1000d638:	1000df5c 	xori	zero,r2,893
1000d63c:	1000df5c 	xori	zero,r2,893
1000d640:	1000df5c 	xori	zero,r2,893
1000d644:	1000dcdc 	xori	zero,r2,883
1000d648:	1000df04 	addi	zero,r2,892
1000d64c:	1000df5c 	xori	zero,r2,893
1000d650:	1000d8b0 	cmpltui	zero,r2,866
1000d654:	1000dd00 	call	11000dd0 <_gp+0xfe4a94>
1000d658:	1000df5c 	xori	zero,r2,893
1000d65c:	1000d8bc 	xorhi	zero,r2,866
1000d660:	1000d8c8 	cmpgei	zero,r2,867
1000d664:	1000d8c8 	cmpgei	zero,r2,867
1000d668:	1000d8c8 	cmpgei	zero,r2,867
1000d66c:	1000d8c8 	cmpgei	zero,r2,867
1000d670:	1000d8c8 	cmpgei	zero,r2,867
1000d674:	1000d8c8 	cmpgei	zero,r2,867
1000d678:	1000d8c8 	cmpgei	zero,r2,867
1000d67c:	1000d8c8 	cmpgei	zero,r2,867
1000d680:	1000d8c8 	cmpgei	zero,r2,867
1000d684:	1000df5c 	xori	zero,r2,893
1000d688:	1000df5c 	xori	zero,r2,893
1000d68c:	1000df5c 	xori	zero,r2,893
1000d690:	1000df5c 	xori	zero,r2,893
1000d694:	1000df5c 	xori	zero,r2,893
1000d698:	1000df5c 	xori	zero,r2,893
1000d69c:	1000df5c 	xori	zero,r2,893
1000d6a0:	1000df5c 	xori	zero,r2,893
1000d6a4:	1000df5c 	xori	zero,r2,893
1000d6a8:	1000df5c 	xori	zero,r2,893
1000d6ac:	1000d908 	cmpgei	zero,r2,868
1000d6b0:	1000df5c 	xori	zero,r2,893
1000d6b4:	1000df5c 	xori	zero,r2,893
1000d6b8:	1000df5c 	xori	zero,r2,893
1000d6bc:	1000df5c 	xori	zero,r2,893
1000d6c0:	1000df5c 	xori	zero,r2,893
1000d6c4:	1000df5c 	xori	zero,r2,893
1000d6c8:	1000df5c 	xori	zero,r2,893
1000d6cc:	1000df5c 	xori	zero,r2,893
1000d6d0:	1000df5c 	xori	zero,r2,893
1000d6d4:	1000df5c 	xori	zero,r2,893
1000d6d8:	1000dbf8 	rdprs	zero,r2,879
1000d6dc:	1000df5c 	xori	zero,r2,893
1000d6e0:	1000df5c 	xori	zero,r2,893
1000d6e4:	1000df5c 	xori	zero,r2,893
1000d6e8:	1000df5c 	xori	zero,r2,893
1000d6ec:	1000df5c 	xori	zero,r2,893
1000d6f0:	1000dc38 	rdprs	zero,r2,880
1000d6f4:	1000df5c 	xori	zero,r2,893
1000d6f8:	1000df5c 	xori	zero,r2,893
1000d6fc:	1000dc7c 	xorhi	zero,r2,881
1000d700:	1000df5c 	xori	zero,r2,893
1000d704:	1000df5c 	xori	zero,r2,893
1000d708:	1000df5c 	xori	zero,r2,893
1000d70c:	1000df5c 	xori	zero,r2,893
1000d710:	1000df5c 	xori	zero,r2,893
1000d714:	1000df5c 	xori	zero,r2,893
1000d718:	1000df5c 	xori	zero,r2,893
1000d71c:	1000df5c 	xori	zero,r2,893
1000d720:	1000df5c 	xori	zero,r2,893
1000d724:	1000df5c 	xori	zero,r2,893
1000d728:	1000dbc4 	addi	zero,r2,879
1000d72c:	1000df14 	ori	zero,r2,892
1000d730:	1000df5c 	xori	zero,r2,893
1000d734:	1000df5c 	xori	zero,r2,893
1000d738:	1000df5c 	xori	zero,r2,893
1000d73c:	1000dd50 	cmplti	zero,r2,885
1000d740:	1000df14 	ori	zero,r2,892
1000d744:	1000df5c 	xori	zero,r2,893
1000d748:	1000df5c 	xori	zero,r2,893
1000d74c:	1000dc68 	cmpgeui	zero,r2,881
1000d750:	1000df5c 	xori	zero,r2,893
1000d754:	1000deb4 	orhi	zero,r2,890
1000d758:	1000de3c 	xorhi	zero,r2,888
1000d75c:	1000de70 	cmpltui	zero,r2,889
1000d760:	1000dd5c 	xori	zero,r2,885
1000d764:	1000df5c 	xori	zero,r2,893
1000d768:	1000dd68 	cmpgeui	zero,r2,885
1000d76c:	1000df5c 	xori	zero,r2,893
1000d770:	1000ddc4 	addi	zero,r2,887
1000d774:	1000df5c 	xori	zero,r2,893
1000d778:	1000df5c 	xori	zero,r2,893
1000d77c:	1000ddf8 	rdprs	zero,r2,887
1000d780:	42000204 	addi	r8,r8,8
1000d784:	d8c12517 	ldw	r3,1172(sp)
1000d788:	1c07883a 	add	r3,r3,r16
1000d78c:	d8c12515 	stw	r3,1172(sp)
1000d790:	003f8d06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d794:	d9012117 	ldw	r4,1156(sp)
1000d798:	d9412017 	ldw	r5,1152(sp)
1000d79c:	0008b500 	call	10008b50 <__swsetup_r>
1000d7a0:	1000301e 	bne	r2,zero,1000d864 <___vfiprintf_internal_r+0x3f0>
1000d7a4:	d8812017 	ldw	r2,1152(sp)
1000d7a8:	01000284 	movi	r4,10
1000d7ac:	10c0030b 	ldhu	r3,12(r2)
1000d7b0:	1805883a 	mov	r2,r3
1000d7b4:	1080068c 	andi	r2,r2,26
1000d7b8:	113f551e 	bne	r2,r4,1000d510 <__alt_data_end+0xf800d510>
1000d7bc:	d9012017 	ldw	r4,1152(sp)
1000d7c0:	2080038b 	ldhu	r2,14(r4)
1000d7c4:	113fffcc 	andi	r4,r2,65535
1000d7c8:	2120001c 	xori	r4,r4,32768
1000d7cc:	21200004 	addi	r4,r4,-32768
1000d7d0:	203f4f16 	blt	r4,zero,1000d510 <__alt_data_end+0xf800d510>
1000d7d4:	d9412017 	ldw	r5,1152(sp)
1000d7d8:	d9012117 	ldw	r4,1156(sp)
1000d7dc:	d9c12317 	ldw	r7,1164(sp)
1000d7e0:	2b001917 	ldw	r12,100(r5)
1000d7e4:	2ac00717 	ldw	r11,28(r5)
1000d7e8:	2a800917 	ldw	r10,36(r5)
1000d7ec:	02010004 	movi	r8,1024
1000d7f0:	18ffff4c 	andi	r3,r3,65533
1000d7f4:	da0b883a 	add	r5,sp,r8
1000d7f8:	980d883a 	mov	r6,r19
1000d7fc:	d8c1030d 	sth	r3,1036(sp)
1000d800:	db011915 	stw	r12,1124(sp)
1000d804:	d881038d 	sth	r2,1038(sp)
1000d808:	dac10715 	stw	r11,1052(sp)
1000d80c:	da810915 	stw	r10,1060(sp)
1000d810:	dec10015 	stw	sp,1024(sp)
1000d814:	dec10415 	stw	sp,1040(sp)
1000d818:	da010215 	stw	r8,1032(sp)
1000d81c:	da010515 	stw	r8,1044(sp)
1000d820:	d8010615 	stw	zero,1048(sp)
1000d824:	000d4740 	call	1000d474 <___vfiprintf_internal_r>
1000d828:	1021883a 	mov	r16,r2
1000d82c:	10000416 	blt	r2,zero,1000d840 <___vfiprintf_internal_r+0x3cc>
1000d830:	d9012117 	ldw	r4,1156(sp)
1000d834:	d9410004 	addi	r5,sp,1024
1000d838:	000a5d00 	call	1000a5d0 <_fflush_r>
1000d83c:	10040f1e 	bne	r2,zero,1000e87c <___vfiprintf_internal_r+0x1408>
1000d840:	d881030b 	ldhu	r2,1036(sp)
1000d844:	1080100c 	andi	r2,r2,64
1000d848:	10000426 	beq	r2,zero,1000d85c <___vfiprintf_internal_r+0x3e8>
1000d84c:	d8c12017 	ldw	r3,1152(sp)
1000d850:	1880030b 	ldhu	r2,12(r3)
1000d854:	10801014 	ori	r2,r2,64
1000d858:	1880030d 	sth	r2,12(r3)
1000d85c:	8005883a 	mov	r2,r16
1000d860:	00000106 	br	1000d868 <___vfiprintf_internal_r+0x3f4>
1000d864:	00bfffc4 	movi	r2,-1
1000d868:	dfc13517 	ldw	ra,1236(sp)
1000d86c:	df013417 	ldw	fp,1232(sp)
1000d870:	ddc13317 	ldw	r23,1228(sp)
1000d874:	dd813217 	ldw	r22,1224(sp)
1000d878:	dd413117 	ldw	r21,1220(sp)
1000d87c:	dd013017 	ldw	r20,1216(sp)
1000d880:	dcc12f17 	ldw	r19,1212(sp)
1000d884:	dc812e17 	ldw	r18,1208(sp)
1000d888:	dc412d17 	ldw	r17,1204(sp)
1000d88c:	dc012c17 	ldw	r16,1200(sp)
1000d890:	dec13604 	addi	sp,sp,1240
1000d894:	f800283a 	ret
1000d898:	000ab8c0 	call	1000ab8c <__sinit>
1000d89c:	003f0706 	br	1000d4bc <__alt_data_end+0xf800d4bc>
1000d8a0:	d8c12417 	ldw	r3,1168(sp)
1000d8a4:	d8812315 	stw	r2,1164(sp)
1000d8a8:	00c7c83a 	sub	r3,zero,r3
1000d8ac:	d8c12415 	stw	r3,1168(sp)
1000d8b0:	94800114 	ori	r18,r18,4
1000d8b4:	b9800007 	ldb	r6,0(r23)
1000d8b8:	003f4f06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000d8bc:	94802014 	ori	r18,r18,128
1000d8c0:	b9800007 	ldb	r6,0(r23)
1000d8c4:	003f4c06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000d8c8:	dc012615 	stw	r16,1176(sp)
1000d8cc:	d8012415 	stw	zero,1168(sp)
1000d8d0:	35bff404 	addi	r22,r6,-48
1000d8d4:	0009883a 	mov	r4,zero
1000d8d8:	b821883a 	mov	r16,r23
1000d8dc:	01400284 	movi	r5,10
1000d8e0:	00040f80 	call	100040f8 <__mulsi3>
1000d8e4:	81800007 	ldb	r6,0(r16)
1000d8e8:	1589883a 	add	r4,r2,r22
1000d8ec:	bdc00044 	addi	r23,r23,1
1000d8f0:	35bff404 	addi	r22,r6,-48
1000d8f4:	b821883a 	mov	r16,r23
1000d8f8:	adbff82e 	bgeu	r21,r22,1000d8dc <__alt_data_end+0xf800d8dc>
1000d8fc:	d9012415 	stw	r4,1168(sp)
1000d900:	dc012617 	ldw	r16,1176(sp)
1000d904:	003f3d06 	br	1000d5fc <__alt_data_end+0xf800d5fc>
1000d908:	d8c12203 	ldbu	r3,1160(sp)
1000d90c:	94800414 	ori	r18,r18,16
1000d910:	9080080c 	andi	r2,r18,32
1000d914:	d8c11d85 	stb	r3,1142(sp)
1000d918:	9811883a 	mov	r8,r19
1000d91c:	d8c12317 	ldw	r3,1164(sp)
1000d920:	10018226 	beq	r2,zero,1000df2c <___vfiprintf_internal_r+0xab8>
1000d924:	d9012317 	ldw	r4,1164(sp)
1000d928:	18800117 	ldw	r2,4(r3)
1000d92c:	1cc00017 	ldw	r19,0(r3)
1000d930:	21000204 	addi	r4,r4,8
1000d934:	d9012315 	stw	r4,1164(sp)
1000d938:	102b883a 	mov	r21,r2
1000d93c:	10030016 	blt	r2,zero,1000e540 <___vfiprintf_internal_r+0x10cc>
1000d940:	dd811d83 	ldbu	r22,1142(sp)
1000d944:	8029883a 	mov	r20,r16
1000d948:	00800044 	movi	r2,1
1000d94c:	9d46b03a 	or	r3,r19,r21
1000d950:	80000216 	blt	r16,zero,1000d95c <___vfiprintf_internal_r+0x4e8>
1000d954:	013fdfc4 	movi	r4,-129
1000d958:	9124703a 	and	r18,r18,r4
1000d95c:	1801b41e 	bne	r3,zero,1000e030 <___vfiprintf_internal_r+0xbbc>
1000d960:	80028126 	beq	r16,zero,1000e368 <___vfiprintf_internal_r+0xef4>
1000d964:	10803fcc 	andi	r2,r2,255
1000d968:	00c00044 	movi	r3,1
1000d96c:	10c1d126 	beq	r2,r3,1000e0b4 <___vfiprintf_internal_r+0xc40>
1000d970:	00c00084 	movi	r3,2
1000d974:	10c28626 	beq	r2,r3,1000e390 <___vfiprintf_internal_r+0xf1c>
1000d978:	d8c10a04 	addi	r3,sp,1064
1000d97c:	9808d0fa 	srli	r4,r19,3
1000d980:	a80a977a 	slli	r5,r21,29
1000d984:	a82ad0fa 	srli	r21,r21,3
1000d988:	9cc001cc 	andi	r19,r19,7
1000d98c:	98800c04 	addi	r2,r19,48
1000d990:	18ffffc4 	addi	r3,r3,-1
1000d994:	2926b03a 	or	r19,r5,r4
1000d998:	18800005 	stb	r2,0(r3)
1000d99c:	9d48b03a 	or	r4,r19,r21
1000d9a0:	203ff61e 	bne	r4,zero,1000d97c <__alt_data_end+0xf800d97c>
1000d9a4:	9100004c 	andi	r4,r18,1
1000d9a8:	d8c12215 	stw	r3,1160(sp)
1000d9ac:	2002b31e 	bne	r4,zero,1000e47c <___vfiprintf_internal_r+0x1008>
1000d9b0:	d9411e17 	ldw	r5,1144(sp)
1000d9b4:	28e9c83a 	sub	r20,r5,r3
1000d9b8:	a02b883a 	mov	r21,r20
1000d9bc:	a400010e 	bge	r20,r16,1000d9c4 <___vfiprintf_internal_r+0x550>
1000d9c0:	802b883a 	mov	r21,r16
1000d9c4:	b5803fcc 	andi	r22,r22,255
1000d9c8:	b580201c 	xori	r22,r22,128
1000d9cc:	b5bfe004 	addi	r22,r22,-128
1000d9d0:	b0000126 	beq	r22,zero,1000d9d8 <___vfiprintf_internal_r+0x564>
1000d9d4:	ad400044 	addi	r21,r21,1
1000d9d8:	9280008c 	andi	r10,r18,2
1000d9dc:	50000126 	beq	r10,zero,1000d9e4 <___vfiprintf_internal_r+0x570>
1000d9e0:	ad400084 	addi	r21,r21,2
1000d9e4:	9580210c 	andi	r22,r18,132
1000d9e8:	b001751e 	bne	r22,zero,1000dfc0 <___vfiprintf_internal_r+0xb4c>
1000d9ec:	d9012417 	ldw	r4,1168(sp)
1000d9f0:	2567c83a 	sub	r19,r4,r21
1000d9f4:	04c1720e 	bge	zero,r19,1000dfc0 <___vfiprintf_internal_r+0xb4c>
1000d9f8:	01c00404 	movi	r7,16
1000d9fc:	d8c11c17 	ldw	r3,1136(sp)
1000da00:	3cc36b0e 	bge	r7,r19,1000e7b0 <___vfiprintf_internal_r+0x133c>
1000da04:	00840074 	movhi	r2,4097
1000da08:	108a1304 	addi	r2,r2,10316
1000da0c:	dc012915 	stw	r16,1188(sp)
1000da10:	d9011b17 	ldw	r4,1132(sp)
1000da14:	9821883a 	mov	r16,r19
1000da18:	d8812615 	stw	r2,1176(sp)
1000da1c:	030001c4 	movi	r12,7
1000da20:	5027883a 	mov	r19,r10
1000da24:	00000506 	br	1000da3c <___vfiprintf_internal_r+0x5c8>
1000da28:	21400084 	addi	r5,r4,2
1000da2c:	42000204 	addi	r8,r8,8
1000da30:	1009883a 	mov	r4,r2
1000da34:	843ffc04 	addi	r16,r16,-16
1000da38:	3c000d0e 	bge	r7,r16,1000da70 <___vfiprintf_internal_r+0x5fc>
1000da3c:	18c00404 	addi	r3,r3,16
1000da40:	20800044 	addi	r2,r4,1
1000da44:	47000015 	stw	fp,0(r8)
1000da48:	41c00115 	stw	r7,4(r8)
1000da4c:	d8c11c15 	stw	r3,1136(sp)
1000da50:	d8811b15 	stw	r2,1132(sp)
1000da54:	60bff40e 	bge	r12,r2,1000da28 <__alt_data_end+0xf800da28>
1000da58:	18014b1e 	bne	r3,zero,1000df88 <___vfiprintf_internal_r+0xb14>
1000da5c:	843ffc04 	addi	r16,r16,-16
1000da60:	0009883a 	mov	r4,zero
1000da64:	01400044 	movi	r5,1
1000da68:	d811883a 	mov	r8,sp
1000da6c:	3c3ff316 	blt	r7,r16,1000da3c <__alt_data_end+0xf800da3c>
1000da70:	9815883a 	mov	r10,r19
1000da74:	8027883a 	mov	r19,r16
1000da78:	dc012917 	ldw	r16,1188(sp)
1000da7c:	d9012617 	ldw	r4,1176(sp)
1000da80:	98c7883a 	add	r3,r19,r3
1000da84:	44c00115 	stw	r19,4(r8)
1000da88:	41000015 	stw	r4,0(r8)
1000da8c:	d8c11c15 	stw	r3,1136(sp)
1000da90:	d9411b15 	stw	r5,1132(sp)
1000da94:	008001c4 	movi	r2,7
1000da98:	11425116 	blt	r2,r5,1000e3e0 <___vfiprintf_internal_r+0xf6c>
1000da9c:	d9011d87 	ldb	r4,1142(sp)
1000daa0:	42000204 	addi	r8,r8,8
1000daa4:	28800044 	addi	r2,r5,1
1000daa8:	20014a1e 	bne	r4,zero,1000dfd4 <___vfiprintf_internal_r+0xb60>
1000daac:	50000c26 	beq	r10,zero,1000dae0 <___vfiprintf_internal_r+0x66c>
1000dab0:	d9011d04 	addi	r4,sp,1140
1000dab4:	18c00084 	addi	r3,r3,2
1000dab8:	41000015 	stw	r4,0(r8)
1000dabc:	01000084 	movi	r4,2
1000dac0:	41000115 	stw	r4,4(r8)
1000dac4:	d8c11c15 	stw	r3,1136(sp)
1000dac8:	d8811b15 	stw	r2,1132(sp)
1000dacc:	010001c4 	movi	r4,7
1000dad0:	20822016 	blt	r4,r2,1000e354 <___vfiprintf_internal_r+0xee0>
1000dad4:	100b883a 	mov	r5,r2
1000dad8:	42000204 	addi	r8,r8,8
1000dadc:	10800044 	addi	r2,r2,1
1000dae0:	01002004 	movi	r4,128
1000dae4:	b101de26 	beq	r22,r4,1000e260 <___vfiprintf_internal_r+0xdec>
1000dae8:	8521c83a 	sub	r16,r16,r20
1000daec:	0400230e 	bge	zero,r16,1000db7c <___vfiprintf_internal_r+0x708>
1000daf0:	04c00404 	movi	r19,16
1000daf4:	9c030d0e 	bge	r19,r16,1000e72c <___vfiprintf_internal_r+0x12b8>
1000daf8:	00840074 	movhi	r2,4097
1000dafc:	108a0f04 	addi	r2,r2,10300
1000db00:	d8812615 	stw	r2,1176(sp)
1000db04:	058001c4 	movi	r22,7
1000db08:	00000506 	br	1000db20 <___vfiprintf_internal_r+0x6ac>
1000db0c:	28800084 	addi	r2,r5,2
1000db10:	42000204 	addi	r8,r8,8
1000db14:	200b883a 	mov	r5,r4
1000db18:	843ffc04 	addi	r16,r16,-16
1000db1c:	9c000d0e 	bge	r19,r16,1000db54 <___vfiprintf_internal_r+0x6e0>
1000db20:	18c00404 	addi	r3,r3,16
1000db24:	29000044 	addi	r4,r5,1
1000db28:	44400015 	stw	r17,0(r8)
1000db2c:	44c00115 	stw	r19,4(r8)
1000db30:	d8c11c15 	stw	r3,1136(sp)
1000db34:	d9011b15 	stw	r4,1132(sp)
1000db38:	b13ff40e 	bge	r22,r4,1000db0c <__alt_data_end+0xf800db0c>
1000db3c:	1801321e 	bne	r3,zero,1000e008 <___vfiprintf_internal_r+0xb94>
1000db40:	843ffc04 	addi	r16,r16,-16
1000db44:	000b883a 	mov	r5,zero
1000db48:	00800044 	movi	r2,1
1000db4c:	d811883a 	mov	r8,sp
1000db50:	9c3ff316 	blt	r19,r16,1000db20 <__alt_data_end+0xf800db20>
1000db54:	d9012617 	ldw	r4,1176(sp)
1000db58:	1c07883a 	add	r3,r3,r16
1000db5c:	44000115 	stw	r16,4(r8)
1000db60:	41000015 	stw	r4,0(r8)
1000db64:	d8c11c15 	stw	r3,1136(sp)
1000db68:	d8811b15 	stw	r2,1132(sp)
1000db6c:	010001c4 	movi	r4,7
1000db70:	20816216 	blt	r4,r2,1000e0fc <___vfiprintf_internal_r+0xc88>
1000db74:	42000204 	addi	r8,r8,8
1000db78:	10800044 	addi	r2,r2,1
1000db7c:	d9012217 	ldw	r4,1160(sp)
1000db80:	1d07883a 	add	r3,r3,r20
1000db84:	45000115 	stw	r20,4(r8)
1000db88:	41000015 	stw	r4,0(r8)
1000db8c:	d8c11c15 	stw	r3,1136(sp)
1000db90:	d8811b15 	stw	r2,1132(sp)
1000db94:	010001c4 	movi	r4,7
1000db98:	2081610e 	bge	r4,r2,1000e120 <___vfiprintf_internal_r+0xcac>
1000db9c:	1802211e 	bne	r3,zero,1000e424 <___vfiprintf_internal_r+0xfb0>
1000dba0:	d8011b15 	stw	zero,1132(sp)
1000dba4:	9480010c 	andi	r18,r18,4
1000dba8:	9002171e 	bne	r18,zero,1000e408 <___vfiprintf_internal_r+0xf94>
1000dbac:	d9412417 	ldw	r5,1168(sp)
1000dbb0:	a9433716 	blt	r21,r5,1000e890 <___vfiprintf_internal_r+0x141c>
1000dbb4:	d8812517 	ldw	r2,1172(sp)
1000dbb8:	1545883a 	add	r2,r2,r21
1000dbbc:	d8812515 	stw	r2,1172(sp)
1000dbc0:	00019a06 	br	1000e22c <___vfiprintf_internal_r+0xdb8>
1000dbc4:	d8c12317 	ldw	r3,1164(sp)
1000dbc8:	05400044 	movi	r21,1
1000dbcc:	9811883a 	mov	r8,r19
1000dbd0:	18800017 	ldw	r2,0(r3)
1000dbd4:	18c00104 	addi	r3,r3,4
1000dbd8:	d8c12315 	stw	r3,1164(sp)
1000dbdc:	d8c10004 	addi	r3,sp,1024
1000dbe0:	d8011d85 	stb	zero,1142(sp)
1000dbe4:	d8810005 	stb	r2,1024(sp)
1000dbe8:	a829883a 	mov	r20,r21
1000dbec:	d8c12215 	stw	r3,1160(sp)
1000dbf0:	0021883a 	mov	r16,zero
1000dbf4:	003f7806 	br	1000d9d8 <__alt_data_end+0xf800d9d8>
1000dbf8:	94800414 	ori	r18,r18,16
1000dbfc:	9080080c 	andi	r2,r18,32
1000dc00:	9811883a 	mov	r8,r19
1000dc04:	10009026 	beq	r2,zero,1000de48 <___vfiprintf_internal_r+0x9d4>
1000dc08:	d8812317 	ldw	r2,1164(sp)
1000dc0c:	d8c12317 	ldw	r3,1164(sp)
1000dc10:	14c00017 	ldw	r19,0(r2)
1000dc14:	15400117 	ldw	r21,4(r2)
1000dc18:	18c00204 	addi	r3,r3,8
1000dc1c:	d8c12315 	stw	r3,1164(sp)
1000dc20:	0005883a 	mov	r2,zero
1000dc24:	9d46b03a 	or	r3,r19,r21
1000dc28:	d8011d85 	stb	zero,1142(sp)
1000dc2c:	8029883a 	mov	r20,r16
1000dc30:	002d883a 	mov	r22,zero
1000dc34:	003f4606 	br	1000d950 <__alt_data_end+0xf800d950>
1000dc38:	94800414 	ori	r18,r18,16
1000dc3c:	9080080c 	andi	r2,r18,32
1000dc40:	9811883a 	mov	r8,r19
1000dc44:	10006226 	beq	r2,zero,1000ddd0 <___vfiprintf_internal_r+0x95c>
1000dc48:	d9012317 	ldw	r4,1164(sp)
1000dc4c:	00800044 	movi	r2,1
1000dc50:	24c00017 	ldw	r19,0(r4)
1000dc54:	25400117 	ldw	r21,4(r4)
1000dc58:	21000204 	addi	r4,r4,8
1000dc5c:	d9012315 	stw	r4,1164(sp)
1000dc60:	9d46b03a 	or	r3,r19,r21
1000dc64:	003ff006 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000dc68:	b9800007 	ldb	r6,0(r23)
1000dc6c:	00801b04 	movi	r2,108
1000dc70:	3082b226 	beq	r6,r2,1000e73c <___vfiprintf_internal_r+0x12c8>
1000dc74:	94800414 	ori	r18,r18,16
1000dc78:	003e5f06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000dc7c:	d8c12203 	ldbu	r3,1160(sp)
1000dc80:	01040074 	movhi	r4,4097
1000dc84:	2109aa04 	addi	r4,r4,9896
1000dc88:	d8c11d85 	stb	r3,1142(sp)
1000dc8c:	d9012715 	stw	r4,1180(sp)
1000dc90:	90c0080c 	andi	r3,r18,32
1000dc94:	9811883a 	mov	r8,r19
1000dc98:	d8812317 	ldw	r2,1164(sp)
1000dc9c:	18005f26 	beq	r3,zero,1000de1c <___vfiprintf_internal_r+0x9a8>
1000dca0:	d9012317 	ldw	r4,1164(sp)
1000dca4:	14c00017 	ldw	r19,0(r2)
1000dca8:	15400117 	ldw	r21,4(r2)
1000dcac:	21000204 	addi	r4,r4,8
1000dcb0:	d9012315 	stw	r4,1164(sp)
1000dcb4:	9080004c 	andi	r2,r18,1
1000dcb8:	1001e226 	beq	r2,zero,1000e444 <___vfiprintf_internal_r+0xfd0>
1000dcbc:	9d46b03a 	or	r3,r19,r21
1000dcc0:	18024e26 	beq	r3,zero,1000e5fc <___vfiprintf_internal_r+0x1188>
1000dcc4:	00800c04 	movi	r2,48
1000dcc8:	d8811d05 	stb	r2,1140(sp)
1000dccc:	d9811d45 	stb	r6,1141(sp)
1000dcd0:	94800094 	ori	r18,r18,2
1000dcd4:	00800084 	movi	r2,2
1000dcd8:	003fd306 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000dcdc:	d9012317 	ldw	r4,1164(sp)
1000dce0:	d9412317 	ldw	r5,1164(sp)
1000dce4:	21000017 	ldw	r4,0(r4)
1000dce8:	28800104 	addi	r2,r5,4
1000dcec:	d9012415 	stw	r4,1168(sp)
1000dcf0:	203eeb16 	blt	r4,zero,1000d8a0 <__alt_data_end+0xf800d8a0>
1000dcf4:	d8812315 	stw	r2,1164(sp)
1000dcf8:	b9800007 	ldb	r6,0(r23)
1000dcfc:	003e3e06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000dd00:	b9800007 	ldb	r6,0(r23)
1000dd04:	01000a84 	movi	r4,42
1000dd08:	b8800044 	addi	r2,r23,1
1000dd0c:	3102d226 	beq	r6,r4,1000e858 <___vfiprintf_internal_r+0x13e4>
1000dd10:	35bff404 	addi	r22,r6,-48
1000dd14:	102f883a 	mov	r23,r2
1000dd18:	0021883a 	mov	r16,zero
1000dd1c:	adbe3736 	bltu	r21,r22,1000d5fc <__alt_data_end+0xf800d5fc>
1000dd20:	0009883a 	mov	r4,zero
1000dd24:	01400284 	movi	r5,10
1000dd28:	00040f80 	call	100040f8 <__mulsi3>
1000dd2c:	b9800007 	ldb	r6,0(r23)
1000dd30:	b089883a 	add	r4,r22,r2
1000dd34:	bdc00044 	addi	r23,r23,1
1000dd38:	35bff404 	addi	r22,r6,-48
1000dd3c:	adbff92e 	bgeu	r21,r22,1000dd24 <__alt_data_end+0xf800dd24>
1000dd40:	2021883a 	mov	r16,r4
1000dd44:	203e2d0e 	bge	r4,zero,1000d5fc <__alt_data_end+0xf800d5fc>
1000dd48:	043fffc4 	movi	r16,-1
1000dd4c:	003e2b06 	br	1000d5fc <__alt_data_end+0xf800d5fc>
1000dd50:	94801014 	ori	r18,r18,64
1000dd54:	b9800007 	ldb	r6,0(r23)
1000dd58:	003e2706 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000dd5c:	94800814 	ori	r18,r18,32
1000dd60:	b9800007 	ldb	r6,0(r23)
1000dd64:	003e2406 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000dd68:	d9412317 	ldw	r5,1164(sp)
1000dd6c:	d8812317 	ldw	r2,1164(sp)
1000dd70:	d8011d85 	stb	zero,1142(sp)
1000dd74:	29400017 	ldw	r5,0(r5)
1000dd78:	9811883a 	mov	r8,r19
1000dd7c:	14c00104 	addi	r19,r2,4
1000dd80:	d9412215 	stw	r5,1160(sp)
1000dd84:	28029026 	beq	r5,zero,1000e7c8 <___vfiprintf_internal_r+0x1354>
1000dd88:	d9012217 	ldw	r4,1160(sp)
1000dd8c:	80027616 	blt	r16,zero,1000e768 <___vfiprintf_internal_r+0x12f4>
1000dd90:	000b883a 	mov	r5,zero
1000dd94:	800d883a 	mov	r6,r16
1000dd98:	da012a15 	stw	r8,1192(sp)
1000dd9c:	000bba00 	call	1000bba0 <memchr>
1000dda0:	da012a17 	ldw	r8,1192(sp)
1000dda4:	1002a026 	beq	r2,zero,1000e828 <___vfiprintf_internal_r+0x13b4>
1000dda8:	d8c12217 	ldw	r3,1160(sp)
1000ddac:	10e9c83a 	sub	r20,r2,r3
1000ddb0:	85023816 	blt	r16,r20,1000e694 <___vfiprintf_internal_r+0x1220>
1000ddb4:	dd811d83 	ldbu	r22,1142(sp)
1000ddb8:	dcc12315 	stw	r19,1164(sp)
1000ddbc:	0021883a 	mov	r16,zero
1000ddc0:	003efd06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000ddc4:	9080080c 	andi	r2,r18,32
1000ddc8:	9811883a 	mov	r8,r19
1000ddcc:	103f9e1e 	bne	r2,zero,1000dc48 <__alt_data_end+0xf800dc48>
1000ddd0:	9080040c 	andi	r2,r18,16
1000ddd4:	10021726 	beq	r2,zero,1000e634 <___vfiprintf_internal_r+0x11c0>
1000ddd8:	d9412317 	ldw	r5,1164(sp)
1000dddc:	002b883a 	mov	r21,zero
1000dde0:	00800044 	movi	r2,1
1000dde4:	2cc00017 	ldw	r19,0(r5)
1000dde8:	29400104 	addi	r5,r5,4
1000ddec:	d9412315 	stw	r5,1164(sp)
1000ddf0:	9807883a 	mov	r3,r19
1000ddf4:	003f8c06 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000ddf8:	d8c12203 	ldbu	r3,1160(sp)
1000ddfc:	01040074 	movhi	r4,4097
1000de00:	2109af04 	addi	r4,r4,9916
1000de04:	d8c11d85 	stb	r3,1142(sp)
1000de08:	d9012715 	stw	r4,1180(sp)
1000de0c:	90c0080c 	andi	r3,r18,32
1000de10:	9811883a 	mov	r8,r19
1000de14:	d8812317 	ldw	r2,1164(sp)
1000de18:	183fa11e 	bne	r3,zero,1000dca0 <__alt_data_end+0xf800dca0>
1000de1c:	90c0040c 	andi	r3,r18,16
1000de20:	1801e526 	beq	r3,zero,1000e5b8 <___vfiprintf_internal_r+0x1144>
1000de24:	d9412317 	ldw	r5,1164(sp)
1000de28:	14c00017 	ldw	r19,0(r2)
1000de2c:	002b883a 	mov	r21,zero
1000de30:	29400104 	addi	r5,r5,4
1000de34:	d9412315 	stw	r5,1164(sp)
1000de38:	003f9e06 	br	1000dcb4 <__alt_data_end+0xf800dcb4>
1000de3c:	9080080c 	andi	r2,r18,32
1000de40:	9811883a 	mov	r8,r19
1000de44:	103f701e 	bne	r2,zero,1000dc08 <__alt_data_end+0xf800dc08>
1000de48:	9080040c 	andi	r2,r18,16
1000de4c:	1001ef26 	beq	r2,zero,1000e60c <___vfiprintf_internal_r+0x1198>
1000de50:	d9012317 	ldw	r4,1164(sp)
1000de54:	002b883a 	mov	r21,zero
1000de58:	0005883a 	mov	r2,zero
1000de5c:	24c00017 	ldw	r19,0(r4)
1000de60:	21000104 	addi	r4,r4,4
1000de64:	d9012315 	stw	r4,1164(sp)
1000de68:	9807883a 	mov	r3,r19
1000de6c:	003f6e06 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000de70:	d8c12317 	ldw	r3,1164(sp)
1000de74:	9811883a 	mov	r8,r19
1000de78:	00800c04 	movi	r2,48
1000de7c:	1cc00017 	ldw	r19,0(r3)
1000de80:	01040074 	movhi	r4,4097
1000de84:	18c00104 	addi	r3,r3,4
1000de88:	d8811d05 	stb	r2,1140(sp)
1000de8c:	2109af04 	addi	r4,r4,9916
1000de90:	00801e04 	movi	r2,120
1000de94:	d8811d45 	stb	r2,1141(sp)
1000de98:	d8c12315 	stw	r3,1164(sp)
1000de9c:	002b883a 	mov	r21,zero
1000dea0:	94800094 	ori	r18,r18,2
1000dea4:	d9012715 	stw	r4,1180(sp)
1000dea8:	00800084 	movi	r2,2
1000deac:	9807883a 	mov	r3,r19
1000deb0:	003f5d06 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000deb4:	d8c12203 	ldbu	r3,1160(sp)
1000deb8:	9080080c 	andi	r2,r18,32
1000debc:	9811883a 	mov	r8,r19
1000dec0:	d8c11d85 	stb	r3,1142(sp)
1000dec4:	1001b126 	beq	r2,zero,1000e58c <___vfiprintf_internal_r+0x1118>
1000dec8:	d9012317 	ldw	r4,1164(sp)
1000decc:	d9412517 	ldw	r5,1172(sp)
1000ded0:	20800017 	ldw	r2,0(r4)
1000ded4:	2807d7fa 	srai	r3,r5,31
1000ded8:	21000104 	addi	r4,r4,4
1000dedc:	d9012315 	stw	r4,1164(sp)
1000dee0:	11400015 	stw	r5,0(r2)
1000dee4:	10c00115 	stw	r3,4(r2)
1000dee8:	003d9a06 	br	1000d554 <__alt_data_end+0xf800d554>
1000deec:	d8812207 	ldb	r2,1160(sp)
1000def0:	1001c41e 	bne	r2,zero,1000e604 <___vfiprintf_internal_r+0x1190>
1000def4:	00c00804 	movi	r3,32
1000def8:	d8c12205 	stb	r3,1160(sp)
1000defc:	b9800007 	ldb	r6,0(r23)
1000df00:	003dbd06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000df04:	00c00ac4 	movi	r3,43
1000df08:	d8c12205 	stb	r3,1160(sp)
1000df0c:	b9800007 	ldb	r6,0(r23)
1000df10:	003db906 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000df14:	d8c12203 	ldbu	r3,1160(sp)
1000df18:	9080080c 	andi	r2,r18,32
1000df1c:	9811883a 	mov	r8,r19
1000df20:	d8c11d85 	stb	r3,1142(sp)
1000df24:	d8c12317 	ldw	r3,1164(sp)
1000df28:	103e7e1e 	bne	r2,zero,1000d924 <__alt_data_end+0xf800d924>
1000df2c:	9080040c 	andi	r2,r18,16
1000df30:	1001a926 	beq	r2,zero,1000e5d8 <___vfiprintf_internal_r+0x1164>
1000df34:	1cc00017 	ldw	r19,0(r3)
1000df38:	d9412317 	ldw	r5,1164(sp)
1000df3c:	982bd7fa 	srai	r21,r19,31
1000df40:	29400104 	addi	r5,r5,4
1000df44:	d9412315 	stw	r5,1164(sp)
1000df48:	a805883a 	mov	r2,r21
1000df4c:	003e7b06 	br	1000d93c <__alt_data_end+0xf800d93c>
1000df50:	94800054 	ori	r18,r18,1
1000df54:	b9800007 	ldb	r6,0(r23)
1000df58:	003da706 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000df5c:	d8c12203 	ldbu	r3,1160(sp)
1000df60:	9811883a 	mov	r8,r19
1000df64:	d8c11d85 	stb	r3,1142(sp)
1000df68:	30005826 	beq	r6,zero,1000e0cc <___vfiprintf_internal_r+0xc58>
1000df6c:	05400044 	movi	r21,1
1000df70:	d8c10004 	addi	r3,sp,1024
1000df74:	d9810005 	stb	r6,1024(sp)
1000df78:	d8011d85 	stb	zero,1142(sp)
1000df7c:	a829883a 	mov	r20,r21
1000df80:	d8c12215 	stw	r3,1160(sp)
1000df84:	003f1a06 	br	1000dbf0 <__alt_data_end+0xf800dbf0>
1000df88:	d9012117 	ldw	r4,1156(sp)
1000df8c:	d9412017 	ldw	r5,1152(sp)
1000df90:	d9811a04 	addi	r6,sp,1128
1000df94:	d9c12a15 	stw	r7,1192(sp)
1000df98:	db012b15 	stw	r12,1196(sp)
1000df9c:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000dfa0:	d9c12a17 	ldw	r7,1192(sp)
1000dfa4:	db012b17 	ldw	r12,1196(sp)
1000dfa8:	10004e1e 	bne	r2,zero,1000e0e4 <___vfiprintf_internal_r+0xc70>
1000dfac:	d9011b17 	ldw	r4,1132(sp)
1000dfb0:	d8c11c17 	ldw	r3,1136(sp)
1000dfb4:	d811883a 	mov	r8,sp
1000dfb8:	21400044 	addi	r5,r4,1
1000dfbc:	003e9d06 	br	1000da34 <__alt_data_end+0xf800da34>
1000dfc0:	d9411b17 	ldw	r5,1132(sp)
1000dfc4:	d8c11c17 	ldw	r3,1136(sp)
1000dfc8:	28800044 	addi	r2,r5,1
1000dfcc:	d9011d87 	ldb	r4,1142(sp)
1000dfd0:	203eb626 	beq	r4,zero,1000daac <__alt_data_end+0xf800daac>
1000dfd4:	01000044 	movi	r4,1
1000dfd8:	d9411d84 	addi	r5,sp,1142
1000dfdc:	1907883a 	add	r3,r3,r4
1000dfe0:	41400015 	stw	r5,0(r8)
1000dfe4:	41000115 	stw	r4,4(r8)
1000dfe8:	d8c11c15 	stw	r3,1136(sp)
1000dfec:	d8811b15 	stw	r2,1132(sp)
1000dff0:	014001c4 	movi	r5,7
1000dff4:	2880ce16 	blt	r5,r2,1000e330 <___vfiprintf_internal_r+0xebc>
1000dff8:	100b883a 	mov	r5,r2
1000dffc:	42000204 	addi	r8,r8,8
1000e000:	10800044 	addi	r2,r2,1
1000e004:	003ea906 	br	1000daac <__alt_data_end+0xf800daac>
1000e008:	d9012117 	ldw	r4,1156(sp)
1000e00c:	d9412017 	ldw	r5,1152(sp)
1000e010:	d9811a04 	addi	r6,sp,1128
1000e014:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e018:	1000321e 	bne	r2,zero,1000e0e4 <___vfiprintf_internal_r+0xc70>
1000e01c:	d9411b17 	ldw	r5,1132(sp)
1000e020:	d8c11c17 	ldw	r3,1136(sp)
1000e024:	d811883a 	mov	r8,sp
1000e028:	28800044 	addi	r2,r5,1
1000e02c:	003eba06 	br	1000db18 <__alt_data_end+0xf800db18>
1000e030:	10803fcc 	andi	r2,r2,255
1000e034:	00c00044 	movi	r3,1
1000e038:	10fe4d1e 	bne	r2,r3,1000d970 <__alt_data_end+0xf800d970>
1000e03c:	a800021e 	bne	r21,zero,1000e048 <___vfiprintf_internal_r+0xbd4>
1000e040:	00800244 	movi	r2,9
1000e044:	14c01b2e 	bgeu	r2,r19,1000e0b4 <___vfiprintf_internal_r+0xc40>
1000e048:	dc012215 	stw	r16,1160(sp)
1000e04c:	dd010a04 	addi	r20,sp,1064
1000e050:	a821883a 	mov	r16,r21
1000e054:	402b883a 	mov	r21,r8
1000e058:	9809883a 	mov	r4,r19
1000e05c:	800b883a 	mov	r5,r16
1000e060:	01800284 	movi	r6,10
1000e064:	000f883a 	mov	r7,zero
1000e068:	00039b00 	call	100039b0 <__umoddi3>
1000e06c:	10800c04 	addi	r2,r2,48
1000e070:	a53fffc4 	addi	r20,r20,-1
1000e074:	9809883a 	mov	r4,r19
1000e078:	800b883a 	mov	r5,r16
1000e07c:	01800284 	movi	r6,10
1000e080:	000f883a 	mov	r7,zero
1000e084:	a0800005 	stb	r2,0(r20)
1000e088:	00033700 	call	10003370 <__udivdi3>
1000e08c:	1027883a 	mov	r19,r2
1000e090:	10c4b03a 	or	r2,r2,r3
1000e094:	1821883a 	mov	r16,r3
1000e098:	103fef1e 	bne	r2,zero,1000e058 <__alt_data_end+0xf800e058>
1000e09c:	d9011e17 	ldw	r4,1144(sp)
1000e0a0:	dc012217 	ldw	r16,1160(sp)
1000e0a4:	a811883a 	mov	r8,r21
1000e0a8:	dd012215 	stw	r20,1160(sp)
1000e0ac:	2529c83a 	sub	r20,r4,r20
1000e0b0:	003e4106 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e0b4:	9cc00c04 	addi	r19,r19,48
1000e0b8:	d8c109c4 	addi	r3,sp,1063
1000e0bc:	dcc109c5 	stb	r19,1063(sp)
1000e0c0:	dd012817 	ldw	r20,1184(sp)
1000e0c4:	d8c12215 	stw	r3,1160(sp)
1000e0c8:	003e3b06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e0cc:	d8811c17 	ldw	r2,1136(sp)
1000e0d0:	10000426 	beq	r2,zero,1000e0e4 <___vfiprintf_internal_r+0xc70>
1000e0d4:	d9012117 	ldw	r4,1156(sp)
1000e0d8:	d9412017 	ldw	r5,1152(sp)
1000e0dc:	d9811a04 	addi	r6,sp,1128
1000e0e0:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e0e4:	d9412017 	ldw	r5,1152(sp)
1000e0e8:	2880030b 	ldhu	r2,12(r5)
1000e0ec:	1080100c 	andi	r2,r2,64
1000e0f0:	103ddc1e 	bne	r2,zero,1000d864 <__alt_data_end+0xf800d864>
1000e0f4:	d8812517 	ldw	r2,1172(sp)
1000e0f8:	003ddb06 	br	1000d868 <__alt_data_end+0xf800d868>
1000e0fc:	1801061e 	bne	r3,zero,1000e518 <___vfiprintf_internal_r+0x10a4>
1000e100:	d8c12217 	ldw	r3,1160(sp)
1000e104:	00800044 	movi	r2,1
1000e108:	dd000115 	stw	r20,4(sp)
1000e10c:	d8c00015 	stw	r3,0(sp)
1000e110:	dd011c15 	stw	r20,1136(sp)
1000e114:	d8811b15 	stw	r2,1132(sp)
1000e118:	a007883a 	mov	r3,r20
1000e11c:	d811883a 	mov	r8,sp
1000e120:	42000204 	addi	r8,r8,8
1000e124:	9480010c 	andi	r18,r18,4
1000e128:	90003426 	beq	r18,zero,1000e1fc <___vfiprintf_internal_r+0xd88>
1000e12c:	d9412417 	ldw	r5,1168(sp)
1000e130:	2d65c83a 	sub	r18,r5,r21
1000e134:	0480310e 	bge	zero,r18,1000e1fc <___vfiprintf_internal_r+0xd88>
1000e138:	04000404 	movi	r16,16
1000e13c:	8481ad0e 	bge	r16,r18,1000e7f4 <___vfiprintf_internal_r+0x1380>
1000e140:	01440074 	movhi	r5,4097
1000e144:	294a1304 	addi	r5,r5,10316
1000e148:	d9011b17 	ldw	r4,1132(sp)
1000e14c:	d9412615 	stw	r5,1176(sp)
1000e150:	04c001c4 	movi	r19,7
1000e154:	dd012117 	ldw	r20,1156(sp)
1000e158:	dd812017 	ldw	r22,1152(sp)
1000e15c:	00000506 	br	1000e174 <___vfiprintf_internal_r+0xd00>
1000e160:	21400084 	addi	r5,r4,2
1000e164:	42000204 	addi	r8,r8,8
1000e168:	1009883a 	mov	r4,r2
1000e16c:	94bffc04 	addi	r18,r18,-16
1000e170:	84800d0e 	bge	r16,r18,1000e1a8 <___vfiprintf_internal_r+0xd34>
1000e174:	18c00404 	addi	r3,r3,16
1000e178:	20800044 	addi	r2,r4,1
1000e17c:	47000015 	stw	fp,0(r8)
1000e180:	44000115 	stw	r16,4(r8)
1000e184:	d8c11c15 	stw	r3,1136(sp)
1000e188:	d8811b15 	stw	r2,1132(sp)
1000e18c:	98bff40e 	bge	r19,r2,1000e160 <__alt_data_end+0xf800e160>
1000e190:	1800291e 	bne	r3,zero,1000e238 <___vfiprintf_internal_r+0xdc4>
1000e194:	94bffc04 	addi	r18,r18,-16
1000e198:	0009883a 	mov	r4,zero
1000e19c:	01400044 	movi	r5,1
1000e1a0:	d811883a 	mov	r8,sp
1000e1a4:	84bff316 	blt	r16,r18,1000e174 <__alt_data_end+0xf800e174>
1000e1a8:	d8812617 	ldw	r2,1176(sp)
1000e1ac:	1c87883a 	add	r3,r3,r18
1000e1b0:	44800115 	stw	r18,4(r8)
1000e1b4:	40800015 	stw	r2,0(r8)
1000e1b8:	d8c11c15 	stw	r3,1136(sp)
1000e1bc:	d9411b15 	stw	r5,1132(sp)
1000e1c0:	008001c4 	movi	r2,7
1000e1c4:	11400d0e 	bge	r2,r5,1000e1fc <___vfiprintf_internal_r+0xd88>
1000e1c8:	1800061e 	bne	r3,zero,1000e1e4 <___vfiprintf_internal_r+0xd70>
1000e1cc:	d8c12417 	ldw	r3,1168(sp)
1000e1d0:	a8c12e16 	blt	r21,r3,1000e68c <___vfiprintf_internal_r+0x1218>
1000e1d4:	d9012517 	ldw	r4,1172(sp)
1000e1d8:	2549883a 	add	r4,r4,r21
1000e1dc:	d9012515 	stw	r4,1172(sp)
1000e1e0:	00001206 	br	1000e22c <___vfiprintf_internal_r+0xdb8>
1000e1e4:	d9012117 	ldw	r4,1156(sp)
1000e1e8:	d9412017 	ldw	r5,1152(sp)
1000e1ec:	d9811a04 	addi	r6,sp,1128
1000e1f0:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e1f4:	103fbb1e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e1f8:	d8c11c17 	ldw	r3,1136(sp)
1000e1fc:	d8812417 	ldw	r2,1168(sp)
1000e200:	a880010e 	bge	r21,r2,1000e208 <___vfiprintf_internal_r+0xd94>
1000e204:	102b883a 	mov	r21,r2
1000e208:	d9012517 	ldw	r4,1172(sp)
1000e20c:	2549883a 	add	r4,r4,r21
1000e210:	d9012515 	stw	r4,1172(sp)
1000e214:	18000526 	beq	r3,zero,1000e22c <___vfiprintf_internal_r+0xdb8>
1000e218:	d9012117 	ldw	r4,1156(sp)
1000e21c:	d9412017 	ldw	r5,1152(sp)
1000e220:	d9811a04 	addi	r6,sp,1128
1000e224:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e228:	103fae1e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e22c:	d8011b15 	stw	zero,1132(sp)
1000e230:	d811883a 	mov	r8,sp
1000e234:	003cc706 	br	1000d554 <__alt_data_end+0xf800d554>
1000e238:	a009883a 	mov	r4,r20
1000e23c:	b00b883a 	mov	r5,r22
1000e240:	d9811a04 	addi	r6,sp,1128
1000e244:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e248:	103fa61e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e24c:	d9011b17 	ldw	r4,1132(sp)
1000e250:	d8c11c17 	ldw	r3,1136(sp)
1000e254:	d811883a 	mov	r8,sp
1000e258:	21400044 	addi	r5,r4,1
1000e25c:	003fc306 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e260:	d9012417 	ldw	r4,1168(sp)
1000e264:	256dc83a 	sub	r22,r4,r21
1000e268:	05be1f0e 	bge	zero,r22,1000dae8 <__alt_data_end+0xf800dae8>
1000e26c:	04c00404 	movi	r19,16
1000e270:	9d81720e 	bge	r19,r22,1000e83c <___vfiprintf_internal_r+0x13c8>
1000e274:	00840074 	movhi	r2,4097
1000e278:	108a0f04 	addi	r2,r2,10300
1000e27c:	d8812615 	stw	r2,1176(sp)
1000e280:	028001c4 	movi	r10,7
1000e284:	00000506 	br	1000e29c <___vfiprintf_internal_r+0xe28>
1000e288:	29000084 	addi	r4,r5,2
1000e28c:	42000204 	addi	r8,r8,8
1000e290:	100b883a 	mov	r5,r2
1000e294:	b5bffc04 	addi	r22,r22,-16
1000e298:	9d800d0e 	bge	r19,r22,1000e2d0 <___vfiprintf_internal_r+0xe5c>
1000e29c:	18c00404 	addi	r3,r3,16
1000e2a0:	28800044 	addi	r2,r5,1
1000e2a4:	44400015 	stw	r17,0(r8)
1000e2a8:	44c00115 	stw	r19,4(r8)
1000e2ac:	d8c11c15 	stw	r3,1136(sp)
1000e2b0:	d8811b15 	stw	r2,1132(sp)
1000e2b4:	50bff40e 	bge	r10,r2,1000e288 <__alt_data_end+0xf800e288>
1000e2b8:	1800111e 	bne	r3,zero,1000e300 <___vfiprintf_internal_r+0xe8c>
1000e2bc:	b5bffc04 	addi	r22,r22,-16
1000e2c0:	000b883a 	mov	r5,zero
1000e2c4:	01000044 	movi	r4,1
1000e2c8:	d811883a 	mov	r8,sp
1000e2cc:	9dbff316 	blt	r19,r22,1000e29c <__alt_data_end+0xf800e29c>
1000e2d0:	d9412617 	ldw	r5,1176(sp)
1000e2d4:	1d87883a 	add	r3,r3,r22
1000e2d8:	45800115 	stw	r22,4(r8)
1000e2dc:	41400015 	stw	r5,0(r8)
1000e2e0:	d8c11c15 	stw	r3,1136(sp)
1000e2e4:	d9011b15 	stw	r4,1132(sp)
1000e2e8:	008001c4 	movi	r2,7
1000e2ec:	11008516 	blt	r2,r4,1000e504 <___vfiprintf_internal_r+0x1090>
1000e2f0:	42000204 	addi	r8,r8,8
1000e2f4:	20800044 	addi	r2,r4,1
1000e2f8:	200b883a 	mov	r5,r4
1000e2fc:	003dfa06 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000e300:	d9012117 	ldw	r4,1156(sp)
1000e304:	d9412017 	ldw	r5,1152(sp)
1000e308:	d9811a04 	addi	r6,sp,1128
1000e30c:	da812a15 	stw	r10,1192(sp)
1000e310:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e314:	da812a17 	ldw	r10,1192(sp)
1000e318:	103f721e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e31c:	d9411b17 	ldw	r5,1132(sp)
1000e320:	d8c11c17 	ldw	r3,1136(sp)
1000e324:	d811883a 	mov	r8,sp
1000e328:	29000044 	addi	r4,r5,1
1000e32c:	003fd906 	br	1000e294 <__alt_data_end+0xf800e294>
1000e330:	1800681e 	bne	r3,zero,1000e4d4 <___vfiprintf_internal_r+0x1060>
1000e334:	50004d26 	beq	r10,zero,1000e46c <___vfiprintf_internal_r+0xff8>
1000e338:	d8811d04 	addi	r2,sp,1140
1000e33c:	00c00084 	movi	r3,2
1000e340:	d8800015 	stw	r2,0(sp)
1000e344:	d8c00115 	stw	r3,4(sp)
1000e348:	2005883a 	mov	r2,r4
1000e34c:	d811883a 	mov	r8,sp
1000e350:	003de006 	br	1000dad4 <__alt_data_end+0xf800dad4>
1000e354:	1800551e 	bne	r3,zero,1000e4ac <___vfiprintf_internal_r+0x1038>
1000e358:	000b883a 	mov	r5,zero
1000e35c:	00800044 	movi	r2,1
1000e360:	d811883a 	mov	r8,sp
1000e364:	003dde06 	br	1000dae0 <__alt_data_end+0xf800dae0>
1000e368:	10803fcc 	andi	r2,r2,255
1000e36c:	1000191e 	bne	r2,zero,1000e3d4 <___vfiprintf_internal_r+0xf60>
1000e370:	9080004c 	andi	r2,r18,1
1000e374:	10001726 	beq	r2,zero,1000e3d4 <___vfiprintf_internal_r+0xf60>
1000e378:	00800c04 	movi	r2,48
1000e37c:	d8c109c4 	addi	r3,sp,1063
1000e380:	d88109c5 	stb	r2,1063(sp)
1000e384:	dd012817 	ldw	r20,1184(sp)
1000e388:	d8c12215 	stw	r3,1160(sp)
1000e38c:	003d8a06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e390:	d9012717 	ldw	r4,1180(sp)
1000e394:	dd010a04 	addi	r20,sp,1064
1000e398:	988003cc 	andi	r2,r19,15
1000e39c:	a806973a 	slli	r3,r21,28
1000e3a0:	2085883a 	add	r2,r4,r2
1000e3a4:	9826d13a 	srli	r19,r19,4
1000e3a8:	10800003 	ldbu	r2,0(r2)
1000e3ac:	a82ad13a 	srli	r21,r21,4
1000e3b0:	a53fffc4 	addi	r20,r20,-1
1000e3b4:	1ce6b03a 	or	r19,r3,r19
1000e3b8:	a0800005 	stb	r2,0(r20)
1000e3bc:	9d44b03a 	or	r2,r19,r21
1000e3c0:	103ff51e 	bne	r2,zero,1000e398 <__alt_data_end+0xf800e398>
1000e3c4:	d9411e17 	ldw	r5,1144(sp)
1000e3c8:	dd012215 	stw	r20,1160(sp)
1000e3cc:	2d29c83a 	sub	r20,r5,r20
1000e3d0:	003d7906 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e3d4:	d8c10a04 	addi	r3,sp,1064
1000e3d8:	d8c12215 	stw	r3,1160(sp)
1000e3dc:	003d7606 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e3e0:	18009e1e 	bne	r3,zero,1000e65c <___vfiprintf_internal_r+0x11e8>
1000e3e4:	d8811d87 	ldb	r2,1142(sp)
1000e3e8:	10005f26 	beq	r2,zero,1000e568 <___vfiprintf_internal_r+0x10f4>
1000e3ec:	00c00044 	movi	r3,1
1000e3f0:	d9011d84 	addi	r4,sp,1142
1000e3f4:	1805883a 	mov	r2,r3
1000e3f8:	d9000015 	stw	r4,0(sp)
1000e3fc:	d8c00115 	stw	r3,4(sp)
1000e400:	d811883a 	mov	r8,sp
1000e404:	003efc06 	br	1000dff8 <__alt_data_end+0xf800dff8>
1000e408:	d9412417 	ldw	r5,1168(sp)
1000e40c:	d811883a 	mov	r8,sp
1000e410:	2d65c83a 	sub	r18,r5,r21
1000e414:	04bf4816 	blt	zero,r18,1000e138 <__alt_data_end+0xf800e138>
1000e418:	003f6c06 	br	1000e1cc <__alt_data_end+0xf800e1cc>
1000e41c:	b829883a 	mov	r20,r23
1000e420:	003c6906 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000e424:	d9012117 	ldw	r4,1156(sp)
1000e428:	d9412017 	ldw	r5,1152(sp)
1000e42c:	d9811a04 	addi	r6,sp,1128
1000e430:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e434:	103f2b1e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e438:	d8c11c17 	ldw	r3,1136(sp)
1000e43c:	d811883a 	mov	r8,sp
1000e440:	003f3806 	br	1000e124 <__alt_data_end+0xf800e124>
1000e444:	00800084 	movi	r2,2
1000e448:	9d46b03a 	or	r3,r19,r21
1000e44c:	003df606 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000e450:	d9012117 	ldw	r4,1156(sp)
1000e454:	d9412017 	ldw	r5,1152(sp)
1000e458:	d9811a04 	addi	r6,sp,1128
1000e45c:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e460:	103f201e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e464:	d811883a 	mov	r8,sp
1000e468:	003cc606 	br	1000d784 <__alt_data_end+0xf800d784>
1000e46c:	000b883a 	mov	r5,zero
1000e470:	2005883a 	mov	r2,r4
1000e474:	d811883a 	mov	r8,sp
1000e478:	003d9906 	br	1000dae0 <__alt_data_end+0xf800dae0>
1000e47c:	10803fcc 	andi	r2,r2,255
1000e480:	1080201c 	xori	r2,r2,128
1000e484:	10bfe004 	addi	r2,r2,-128
1000e488:	01000c04 	movi	r4,48
1000e48c:	1100b226 	beq	r2,r4,1000e758 <___vfiprintf_internal_r+0x12e4>
1000e490:	d9412217 	ldw	r5,1160(sp)
1000e494:	d8811e17 	ldw	r2,1144(sp)
1000e498:	193fffc5 	stb	r4,-1(r3)
1000e49c:	297fffc4 	addi	r5,r5,-1
1000e4a0:	d9412215 	stw	r5,1160(sp)
1000e4a4:	1169c83a 	sub	r20,r2,r5
1000e4a8:	003d4306 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e4ac:	d9012117 	ldw	r4,1156(sp)
1000e4b0:	d9412017 	ldw	r5,1152(sp)
1000e4b4:	d9811a04 	addi	r6,sp,1128
1000e4b8:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e4bc:	103f091e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e4c0:	d9411b17 	ldw	r5,1132(sp)
1000e4c4:	d8c11c17 	ldw	r3,1136(sp)
1000e4c8:	d811883a 	mov	r8,sp
1000e4cc:	28800044 	addi	r2,r5,1
1000e4d0:	003d8306 	br	1000dae0 <__alt_data_end+0xf800dae0>
1000e4d4:	d9012117 	ldw	r4,1156(sp)
1000e4d8:	d9412017 	ldw	r5,1152(sp)
1000e4dc:	d9811a04 	addi	r6,sp,1128
1000e4e0:	da812a15 	stw	r10,1192(sp)
1000e4e4:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e4e8:	da812a17 	ldw	r10,1192(sp)
1000e4ec:	103efd1e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e4f0:	d9411b17 	ldw	r5,1132(sp)
1000e4f4:	d8c11c17 	ldw	r3,1136(sp)
1000e4f8:	d811883a 	mov	r8,sp
1000e4fc:	28800044 	addi	r2,r5,1
1000e500:	003d6a06 	br	1000daac <__alt_data_end+0xf800daac>
1000e504:	1800a01e 	bne	r3,zero,1000e788 <___vfiprintf_internal_r+0x1314>
1000e508:	000b883a 	mov	r5,zero
1000e50c:	00800044 	movi	r2,1
1000e510:	d811883a 	mov	r8,sp
1000e514:	003d7406 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000e518:	d9012117 	ldw	r4,1156(sp)
1000e51c:	d9412017 	ldw	r5,1152(sp)
1000e520:	d9811a04 	addi	r6,sp,1128
1000e524:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e528:	103eee1e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e52c:	d8811b17 	ldw	r2,1132(sp)
1000e530:	d8c11c17 	ldw	r3,1136(sp)
1000e534:	d811883a 	mov	r8,sp
1000e538:	10800044 	addi	r2,r2,1
1000e53c:	003d8f06 	br	1000db7c <__alt_data_end+0xf800db7c>
1000e540:	04e7c83a 	sub	r19,zero,r19
1000e544:	9804c03a 	cmpne	r2,r19,zero
1000e548:	056bc83a 	sub	r21,zero,r21
1000e54c:	a8abc83a 	sub	r21,r21,r2
1000e550:	05800b44 	movi	r22,45
1000e554:	dd811d85 	stb	r22,1142(sp)
1000e558:	8029883a 	mov	r20,r16
1000e55c:	00800044 	movi	r2,1
1000e560:	9d46b03a 	or	r3,r19,r21
1000e564:	003cfa06 	br	1000d950 <__alt_data_end+0xf800d950>
1000e568:	000b883a 	mov	r5,zero
1000e56c:	00800044 	movi	r2,1
1000e570:	d811883a 	mov	r8,sp
1000e574:	503d5a26 	beq	r10,zero,1000dae0 <__alt_data_end+0xf800dae0>
1000e578:	00c00084 	movi	r3,2
1000e57c:	d9011d04 	addi	r4,sp,1140
1000e580:	d9000015 	stw	r4,0(sp)
1000e584:	d8c00115 	stw	r3,4(sp)
1000e588:	003d5206 	br	1000dad4 <__alt_data_end+0xf800dad4>
1000e58c:	9080040c 	andi	r2,r18,16
1000e590:	1000421e 	bne	r2,zero,1000e69c <___vfiprintf_internal_r+0x1228>
1000e594:	9480100c 	andi	r18,r18,64
1000e598:	90009c26 	beq	r18,zero,1000e80c <___vfiprintf_internal_r+0x1398>
1000e59c:	d9412317 	ldw	r5,1164(sp)
1000e5a0:	d8c12517 	ldw	r3,1172(sp)
1000e5a4:	28800017 	ldw	r2,0(r5)
1000e5a8:	29400104 	addi	r5,r5,4
1000e5ac:	d9412315 	stw	r5,1164(sp)
1000e5b0:	10c0000d 	sth	r3,0(r2)
1000e5b4:	003be706 	br	1000d554 <__alt_data_end+0xf800d554>
1000e5b8:	90c0100c 	andi	r3,r18,64
1000e5bc:	18003e26 	beq	r3,zero,1000e6b8 <___vfiprintf_internal_r+0x1244>
1000e5c0:	d8c12317 	ldw	r3,1164(sp)
1000e5c4:	14c0000b 	ldhu	r19,0(r2)
1000e5c8:	002b883a 	mov	r21,zero
1000e5cc:	18c00104 	addi	r3,r3,4
1000e5d0:	d8c12315 	stw	r3,1164(sp)
1000e5d4:	003db706 	br	1000dcb4 <__alt_data_end+0xf800dcb4>
1000e5d8:	9080100c 	andi	r2,r18,64
1000e5dc:	10004c26 	beq	r2,zero,1000e710 <___vfiprintf_internal_r+0x129c>
1000e5e0:	1cc0000f 	ldh	r19,0(r3)
1000e5e4:	d8812317 	ldw	r2,1164(sp)
1000e5e8:	982bd7fa 	srai	r21,r19,31
1000e5ec:	10800104 	addi	r2,r2,4
1000e5f0:	d8812315 	stw	r2,1164(sp)
1000e5f4:	a805883a 	mov	r2,r21
1000e5f8:	003cd006 	br	1000d93c <__alt_data_end+0xf800d93c>
1000e5fc:	00800084 	movi	r2,2
1000e600:	003d8906 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000e604:	b9800007 	ldb	r6,0(r23)
1000e608:	003bfb06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000e60c:	9080100c 	andi	r2,r18,64
1000e610:	10003726 	beq	r2,zero,1000e6f0 <___vfiprintf_internal_r+0x127c>
1000e614:	d9412317 	ldw	r5,1164(sp)
1000e618:	002b883a 	mov	r21,zero
1000e61c:	0005883a 	mov	r2,zero
1000e620:	2cc0000b 	ldhu	r19,0(r5)
1000e624:	29400104 	addi	r5,r5,4
1000e628:	d9412315 	stw	r5,1164(sp)
1000e62c:	9807883a 	mov	r3,r19
1000e630:	003d7d06 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000e634:	9080100c 	andi	r2,r18,64
1000e638:	10002526 	beq	r2,zero,1000e6d0 <___vfiprintf_internal_r+0x125c>
1000e63c:	d8812317 	ldw	r2,1164(sp)
1000e640:	002b883a 	mov	r21,zero
1000e644:	14c0000b 	ldhu	r19,0(r2)
1000e648:	10800104 	addi	r2,r2,4
1000e64c:	d8812315 	stw	r2,1164(sp)
1000e650:	9807883a 	mov	r3,r19
1000e654:	00800044 	movi	r2,1
1000e658:	003d7306 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000e65c:	d9012117 	ldw	r4,1156(sp)
1000e660:	d9412017 	ldw	r5,1152(sp)
1000e664:	d9811a04 	addi	r6,sp,1128
1000e668:	da812a15 	stw	r10,1192(sp)
1000e66c:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e670:	da812a17 	ldw	r10,1192(sp)
1000e674:	103e9b1e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e678:	d9411b17 	ldw	r5,1132(sp)
1000e67c:	d8c11c17 	ldw	r3,1136(sp)
1000e680:	d811883a 	mov	r8,sp
1000e684:	28800044 	addi	r2,r5,1
1000e688:	003e5006 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e68c:	182b883a 	mov	r21,r3
1000e690:	003ed006 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e694:	8029883a 	mov	r20,r16
1000e698:	003dc606 	br	1000ddb4 <__alt_data_end+0xf800ddb4>
1000e69c:	d8c12317 	ldw	r3,1164(sp)
1000e6a0:	d9012517 	ldw	r4,1172(sp)
1000e6a4:	18800017 	ldw	r2,0(r3)
1000e6a8:	18c00104 	addi	r3,r3,4
1000e6ac:	d8c12315 	stw	r3,1164(sp)
1000e6b0:	11000015 	stw	r4,0(r2)
1000e6b4:	003ba706 	br	1000d554 <__alt_data_end+0xf800d554>
1000e6b8:	d9012317 	ldw	r4,1164(sp)
1000e6bc:	14c00017 	ldw	r19,0(r2)
1000e6c0:	002b883a 	mov	r21,zero
1000e6c4:	21000104 	addi	r4,r4,4
1000e6c8:	d9012315 	stw	r4,1164(sp)
1000e6cc:	003d7906 	br	1000dcb4 <__alt_data_end+0xf800dcb4>
1000e6d0:	d8c12317 	ldw	r3,1164(sp)
1000e6d4:	002b883a 	mov	r21,zero
1000e6d8:	00800044 	movi	r2,1
1000e6dc:	1cc00017 	ldw	r19,0(r3)
1000e6e0:	18c00104 	addi	r3,r3,4
1000e6e4:	d8c12315 	stw	r3,1164(sp)
1000e6e8:	9807883a 	mov	r3,r19
1000e6ec:	003d4e06 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000e6f0:	d8812317 	ldw	r2,1164(sp)
1000e6f4:	002b883a 	mov	r21,zero
1000e6f8:	14c00017 	ldw	r19,0(r2)
1000e6fc:	10800104 	addi	r2,r2,4
1000e700:	d8812315 	stw	r2,1164(sp)
1000e704:	9807883a 	mov	r3,r19
1000e708:	0005883a 	mov	r2,zero
1000e70c:	003d4606 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000e710:	1cc00017 	ldw	r19,0(r3)
1000e714:	d8c12317 	ldw	r3,1164(sp)
1000e718:	982bd7fa 	srai	r21,r19,31
1000e71c:	18c00104 	addi	r3,r3,4
1000e720:	d8c12315 	stw	r3,1164(sp)
1000e724:	a805883a 	mov	r2,r21
1000e728:	003c8406 	br	1000d93c <__alt_data_end+0xf800d93c>
1000e72c:	01040074 	movhi	r4,4097
1000e730:	210a0f04 	addi	r4,r4,10300
1000e734:	d9012615 	stw	r4,1176(sp)
1000e738:	003d0606 	br	1000db54 <__alt_data_end+0xf800db54>
1000e73c:	b9800043 	ldbu	r6,1(r23)
1000e740:	94800814 	ori	r18,r18,32
1000e744:	bdc00044 	addi	r23,r23,1
1000e748:	31803fcc 	andi	r6,r6,255
1000e74c:	3180201c 	xori	r6,r6,128
1000e750:	31bfe004 	addi	r6,r6,-128
1000e754:	003ba806 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000e758:	d8811e17 	ldw	r2,1144(sp)
1000e75c:	d8c12217 	ldw	r3,1160(sp)
1000e760:	10e9c83a 	sub	r20,r2,r3
1000e764:	003c9406 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e768:	da012a15 	stw	r8,1192(sp)
1000e76c:	000d2c80 	call	1000d2c8 <strlen>
1000e770:	1029883a 	mov	r20,r2
1000e774:	dd811d83 	ldbu	r22,1142(sp)
1000e778:	dcc12315 	stw	r19,1164(sp)
1000e77c:	0021883a 	mov	r16,zero
1000e780:	da012a17 	ldw	r8,1192(sp)
1000e784:	003c8c06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e788:	d9012117 	ldw	r4,1156(sp)
1000e78c:	d9412017 	ldw	r5,1152(sp)
1000e790:	d9811a04 	addi	r6,sp,1128
1000e794:	000d3600 	call	1000d360 <__sprint_r.part.0>
1000e798:	103e521e 	bne	r2,zero,1000e0e4 <__alt_data_end+0xf800e0e4>
1000e79c:	d9411b17 	ldw	r5,1132(sp)
1000e7a0:	d8c11c17 	ldw	r3,1136(sp)
1000e7a4:	d811883a 	mov	r8,sp
1000e7a8:	28800044 	addi	r2,r5,1
1000e7ac:	003cce06 	br	1000dae8 <__alt_data_end+0xf800dae8>
1000e7b0:	01440074 	movhi	r5,4097
1000e7b4:	294a1304 	addi	r5,r5,10316
1000e7b8:	d9412615 	stw	r5,1176(sp)
1000e7bc:	d9411b17 	ldw	r5,1132(sp)
1000e7c0:	29400044 	addi	r5,r5,1
1000e7c4:	003cad06 	br	1000da7c <__alt_data_end+0xf800da7c>
1000e7c8:	00800184 	movi	r2,6
1000e7cc:	1400012e 	bgeu	r2,r16,1000e7d4 <___vfiprintf_internal_r+0x1360>
1000e7d0:	1021883a 	mov	r16,r2
1000e7d4:	8029883a 	mov	r20,r16
1000e7d8:	802b883a 	mov	r21,r16
1000e7dc:	80001c16 	blt	r16,zero,1000e850 <___vfiprintf_internal_r+0x13dc>
1000e7e0:	00c40074 	movhi	r3,4097
1000e7e4:	18c9b404 	addi	r3,r3,9936
1000e7e8:	dcc12315 	stw	r19,1164(sp)
1000e7ec:	d8c12215 	stw	r3,1160(sp)
1000e7f0:	003cff06 	br	1000dbf0 <__alt_data_end+0xf800dbf0>
1000e7f4:	d9411b17 	ldw	r5,1132(sp)
1000e7f8:	00840074 	movhi	r2,4097
1000e7fc:	108a1304 	addi	r2,r2,10316
1000e800:	d8812615 	stw	r2,1176(sp)
1000e804:	29400044 	addi	r5,r5,1
1000e808:	003e6706 	br	1000e1a8 <__alt_data_end+0xf800e1a8>
1000e80c:	d9012317 	ldw	r4,1164(sp)
1000e810:	d9412517 	ldw	r5,1172(sp)
1000e814:	20800017 	ldw	r2,0(r4)
1000e818:	21000104 	addi	r4,r4,4
1000e81c:	d9012315 	stw	r4,1164(sp)
1000e820:	11400015 	stw	r5,0(r2)
1000e824:	003b4b06 	br	1000d554 <__alt_data_end+0xf800d554>
1000e828:	8029883a 	mov	r20,r16
1000e82c:	dd811d83 	ldbu	r22,1142(sp)
1000e830:	dcc12315 	stw	r19,1164(sp)
1000e834:	0021883a 	mov	r16,zero
1000e838:	003c5f06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000e83c:	01040074 	movhi	r4,4097
1000e840:	210a0f04 	addi	r4,r4,10300
1000e844:	d9012615 	stw	r4,1176(sp)
1000e848:	1009883a 	mov	r4,r2
1000e84c:	003ea006 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000e850:	002b883a 	mov	r21,zero
1000e854:	003fe206 	br	1000e7e0 <__alt_data_end+0xf800e7e0>
1000e858:	d9412317 	ldw	r5,1164(sp)
1000e85c:	b807883a 	mov	r3,r23
1000e860:	102f883a 	mov	r23,r2
1000e864:	2c000017 	ldw	r16,0(r5)
1000e868:	29000104 	addi	r4,r5,4
1000e86c:	d9012315 	stw	r4,1164(sp)
1000e870:	80000416 	blt	r16,zero,1000e884 <___vfiprintf_internal_r+0x1410>
1000e874:	19800047 	ldb	r6,1(r3)
1000e878:	003b5f06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000e87c:	043fffc4 	movi	r16,-1
1000e880:	003bef06 	br	1000d840 <__alt_data_end+0xf800d840>
1000e884:	043fffc4 	movi	r16,-1
1000e888:	19800047 	ldb	r6,1(r3)
1000e88c:	003b5a06 	br	1000d5f8 <__alt_data_end+0xf800d5f8>
1000e890:	282b883a 	mov	r21,r5
1000e894:	003cc706 	br	1000dbb4 <__alt_data_end+0xf800dbb4>

1000e898 <__vfiprintf_internal>:
1000e898:	2007883a 	mov	r3,r4
1000e89c:	01040074 	movhi	r4,4097
1000e8a0:	2110d104 	addi	r4,r4,17220
1000e8a4:	21000017 	ldw	r4,0(r4)
1000e8a8:	2805883a 	mov	r2,r5
1000e8ac:	300f883a 	mov	r7,r6
1000e8b0:	180b883a 	mov	r5,r3
1000e8b4:	100d883a 	mov	r6,r2
1000e8b8:	000d4741 	jmpi	1000d474 <___vfiprintf_internal_r>

1000e8bc <__swbuf_r>:
1000e8bc:	defffc04 	addi	sp,sp,-16
1000e8c0:	dc800215 	stw	r18,8(sp)
1000e8c4:	dc400115 	stw	r17,4(sp)
1000e8c8:	dc000015 	stw	r16,0(sp)
1000e8cc:	dfc00315 	stw	ra,12(sp)
1000e8d0:	2025883a 	mov	r18,r4
1000e8d4:	2823883a 	mov	r17,r5
1000e8d8:	3021883a 	mov	r16,r6
1000e8dc:	20000226 	beq	r4,zero,1000e8e8 <__swbuf_r+0x2c>
1000e8e0:	20800e17 	ldw	r2,56(r4)
1000e8e4:	10004126 	beq	r2,zero,1000e9ec <__swbuf_r+0x130>
1000e8e8:	80c00617 	ldw	r3,24(r16)
1000e8ec:	8180030b 	ldhu	r6,12(r16)
1000e8f0:	80c00215 	stw	r3,8(r16)
1000e8f4:	30c0020c 	andi	r3,r6,8
1000e8f8:	18003526 	beq	r3,zero,1000e9d0 <__swbuf_r+0x114>
1000e8fc:	80c00417 	ldw	r3,16(r16)
1000e900:	18003326 	beq	r3,zero,1000e9d0 <__swbuf_r+0x114>
1000e904:	3088000c 	andi	r2,r6,8192
1000e908:	8c403fcc 	andi	r17,r17,255
1000e90c:	10001726 	beq	r2,zero,1000e96c <__swbuf_r+0xb0>
1000e910:	80800017 	ldw	r2,0(r16)
1000e914:	81000517 	ldw	r4,20(r16)
1000e918:	10c7c83a 	sub	r3,r2,r3
1000e91c:	19001d0e 	bge	r3,r4,1000e994 <__swbuf_r+0xd8>
1000e920:	18c00044 	addi	r3,r3,1
1000e924:	81400217 	ldw	r5,8(r16)
1000e928:	11000044 	addi	r4,r2,1
1000e92c:	81000015 	stw	r4,0(r16)
1000e930:	297fffc4 	addi	r5,r5,-1
1000e934:	81400215 	stw	r5,8(r16)
1000e938:	14400005 	stb	r17,0(r2)
1000e93c:	80800517 	ldw	r2,20(r16)
1000e940:	10c01d26 	beq	r2,r3,1000e9b8 <__swbuf_r+0xfc>
1000e944:	8080030b 	ldhu	r2,12(r16)
1000e948:	1080004c 	andi	r2,r2,1
1000e94c:	1000181e 	bne	r2,zero,1000e9b0 <__swbuf_r+0xf4>
1000e950:	8805883a 	mov	r2,r17
1000e954:	dfc00317 	ldw	ra,12(sp)
1000e958:	dc800217 	ldw	r18,8(sp)
1000e95c:	dc400117 	ldw	r17,4(sp)
1000e960:	dc000017 	ldw	r16,0(sp)
1000e964:	dec00404 	addi	sp,sp,16
1000e968:	f800283a 	ret
1000e96c:	81001917 	ldw	r4,100(r16)
1000e970:	00b7ffc4 	movi	r2,-8193
1000e974:	31880014 	ori	r6,r6,8192
1000e978:	2084703a 	and	r2,r4,r2
1000e97c:	80801915 	stw	r2,100(r16)
1000e980:	80800017 	ldw	r2,0(r16)
1000e984:	81000517 	ldw	r4,20(r16)
1000e988:	8180030d 	sth	r6,12(r16)
1000e98c:	10c7c83a 	sub	r3,r2,r3
1000e990:	193fe316 	blt	r3,r4,1000e920 <__alt_data_end+0xf800e920>
1000e994:	9009883a 	mov	r4,r18
1000e998:	800b883a 	mov	r5,r16
1000e99c:	000a5d00 	call	1000a5d0 <_fflush_r>
1000e9a0:	1000091e 	bne	r2,zero,1000e9c8 <__swbuf_r+0x10c>
1000e9a4:	80800017 	ldw	r2,0(r16)
1000e9a8:	00c00044 	movi	r3,1
1000e9ac:	003fdd06 	br	1000e924 <__alt_data_end+0xf800e924>
1000e9b0:	00800284 	movi	r2,10
1000e9b4:	88bfe61e 	bne	r17,r2,1000e950 <__alt_data_end+0xf800e950>
1000e9b8:	9009883a 	mov	r4,r18
1000e9bc:	800b883a 	mov	r5,r16
1000e9c0:	000a5d00 	call	1000a5d0 <_fflush_r>
1000e9c4:	103fe226 	beq	r2,zero,1000e950 <__alt_data_end+0xf800e950>
1000e9c8:	00bfffc4 	movi	r2,-1
1000e9cc:	003fe106 	br	1000e954 <__alt_data_end+0xf800e954>
1000e9d0:	9009883a 	mov	r4,r18
1000e9d4:	800b883a 	mov	r5,r16
1000e9d8:	0008b500 	call	10008b50 <__swsetup_r>
1000e9dc:	1000051e 	bne	r2,zero,1000e9f4 <__swbuf_r+0x138>
1000e9e0:	8180030b 	ldhu	r6,12(r16)
1000e9e4:	80c00417 	ldw	r3,16(r16)
1000e9e8:	003fc606 	br	1000e904 <__alt_data_end+0xf800e904>
1000e9ec:	000ab8c0 	call	1000ab8c <__sinit>
1000e9f0:	003fbd06 	br	1000e8e8 <__alt_data_end+0xf800e8e8>
1000e9f4:	80c0030b 	ldhu	r3,12(r16)
1000e9f8:	00bfffc4 	movi	r2,-1
1000e9fc:	18c01014 	ori	r3,r3,64
1000ea00:	80c0030d 	sth	r3,12(r16)
1000ea04:	00c00244 	movi	r3,9
1000ea08:	90c00015 	stw	r3,0(r18)
1000ea0c:	003fd106 	br	1000e954 <__alt_data_end+0xf800e954>

1000ea10 <__swbuf>:
1000ea10:	00c40074 	movhi	r3,4097
1000ea14:	18d0d104 	addi	r3,r3,17220
1000ea18:	2005883a 	mov	r2,r4
1000ea1c:	19000017 	ldw	r4,0(r3)
1000ea20:	280d883a 	mov	r6,r5
1000ea24:	100b883a 	mov	r5,r2
1000ea28:	000e8bc1 	jmpi	1000e8bc <__swbuf_r>

1000ea2c <_write_r>:
1000ea2c:	defffd04 	addi	sp,sp,-12
1000ea30:	dc000015 	stw	r16,0(sp)
1000ea34:	04040074 	movhi	r16,4097
1000ea38:	dc400115 	stw	r17,4(sp)
1000ea3c:	8417a904 	addi	r16,r16,24228
1000ea40:	2023883a 	mov	r17,r4
1000ea44:	2809883a 	mov	r4,r5
1000ea48:	300b883a 	mov	r5,r6
1000ea4c:	380d883a 	mov	r6,r7
1000ea50:	dfc00215 	stw	ra,8(sp)
1000ea54:	80000015 	stw	zero,0(r16)
1000ea58:	001069c0 	call	1001069c <write>
1000ea5c:	00ffffc4 	movi	r3,-1
1000ea60:	10c00526 	beq	r2,r3,1000ea78 <_write_r+0x4c>
1000ea64:	dfc00217 	ldw	ra,8(sp)
1000ea68:	dc400117 	ldw	r17,4(sp)
1000ea6c:	dc000017 	ldw	r16,0(sp)
1000ea70:	dec00304 	addi	sp,sp,12
1000ea74:	f800283a 	ret
1000ea78:	80c00017 	ldw	r3,0(r16)
1000ea7c:	183ff926 	beq	r3,zero,1000ea64 <__alt_data_end+0xf800ea64>
1000ea80:	88c00015 	stw	r3,0(r17)
1000ea84:	003ff706 	br	1000ea64 <__alt_data_end+0xf800ea64>

1000ea88 <_close_r>:
1000ea88:	defffd04 	addi	sp,sp,-12
1000ea8c:	dc000015 	stw	r16,0(sp)
1000ea90:	04040074 	movhi	r16,4097
1000ea94:	dc400115 	stw	r17,4(sp)
1000ea98:	8417a904 	addi	r16,r16,24228
1000ea9c:	2023883a 	mov	r17,r4
1000eaa0:	2809883a 	mov	r4,r5
1000eaa4:	dfc00215 	stw	ra,8(sp)
1000eaa8:	80000015 	stw	zero,0(r16)
1000eaac:	000fdf80 	call	1000fdf8 <close>
1000eab0:	00ffffc4 	movi	r3,-1
1000eab4:	10c00526 	beq	r2,r3,1000eacc <_close_r+0x44>
1000eab8:	dfc00217 	ldw	ra,8(sp)
1000eabc:	dc400117 	ldw	r17,4(sp)
1000eac0:	dc000017 	ldw	r16,0(sp)
1000eac4:	dec00304 	addi	sp,sp,12
1000eac8:	f800283a 	ret
1000eacc:	80c00017 	ldw	r3,0(r16)
1000ead0:	183ff926 	beq	r3,zero,1000eab8 <__alt_data_end+0xf800eab8>
1000ead4:	88c00015 	stw	r3,0(r17)
1000ead8:	003ff706 	br	1000eab8 <__alt_data_end+0xf800eab8>

1000eadc <_calloc_r>:
1000eadc:	defffe04 	addi	sp,sp,-8
1000eae0:	dc000015 	stw	r16,0(sp)
1000eae4:	2021883a 	mov	r16,r4
1000eae8:	2809883a 	mov	r4,r5
1000eaec:	300b883a 	mov	r5,r6
1000eaf0:	dfc00115 	stw	ra,4(sp)
1000eaf4:	00040f80 	call	100040f8 <__mulsi3>
1000eaf8:	8009883a 	mov	r4,r16
1000eafc:	100b883a 	mov	r5,r2
1000eb00:	000b3f80 	call	1000b3f8 <_malloc_r>
1000eb04:	1021883a 	mov	r16,r2
1000eb08:	10002826 	beq	r2,zero,1000ebac <_calloc_r+0xd0>
1000eb0c:	11bfff17 	ldw	r6,-4(r2)
1000eb10:	00bfff04 	movi	r2,-4
1000eb14:	00c00904 	movi	r3,36
1000eb18:	308c703a 	and	r6,r6,r2
1000eb1c:	308d883a 	add	r6,r6,r2
1000eb20:	19801436 	bltu	r3,r6,1000eb74 <_calloc_r+0x98>
1000eb24:	008004c4 	movi	r2,19
1000eb28:	11800936 	bltu	r2,r6,1000eb50 <_calloc_r+0x74>
1000eb2c:	8005883a 	mov	r2,r16
1000eb30:	10000015 	stw	zero,0(r2)
1000eb34:	10000115 	stw	zero,4(r2)
1000eb38:	10000215 	stw	zero,8(r2)
1000eb3c:	8005883a 	mov	r2,r16
1000eb40:	dfc00117 	ldw	ra,4(sp)
1000eb44:	dc000017 	ldw	r16,0(sp)
1000eb48:	dec00204 	addi	sp,sp,8
1000eb4c:	f800283a 	ret
1000eb50:	80000015 	stw	zero,0(r16)
1000eb54:	80000115 	stw	zero,4(r16)
1000eb58:	008006c4 	movi	r2,27
1000eb5c:	11800d2e 	bgeu	r2,r6,1000eb94 <_calloc_r+0xb8>
1000eb60:	80000215 	stw	zero,8(r16)
1000eb64:	80000315 	stw	zero,12(r16)
1000eb68:	30c00c26 	beq	r6,r3,1000eb9c <_calloc_r+0xc0>
1000eb6c:	80800404 	addi	r2,r16,16
1000eb70:	003fef06 	br	1000eb30 <__alt_data_end+0xf800eb30>
1000eb74:	8009883a 	mov	r4,r16
1000eb78:	000b883a 	mov	r5,zero
1000eb7c:	000bdc00 	call	1000bdc0 <memset>
1000eb80:	8005883a 	mov	r2,r16
1000eb84:	dfc00117 	ldw	ra,4(sp)
1000eb88:	dc000017 	ldw	r16,0(sp)
1000eb8c:	dec00204 	addi	sp,sp,8
1000eb90:	f800283a 	ret
1000eb94:	80800204 	addi	r2,r16,8
1000eb98:	003fe506 	br	1000eb30 <__alt_data_end+0xf800eb30>
1000eb9c:	80000415 	stw	zero,16(r16)
1000eba0:	80800604 	addi	r2,r16,24
1000eba4:	80000515 	stw	zero,20(r16)
1000eba8:	003fe106 	br	1000eb30 <__alt_data_end+0xf800eb30>
1000ebac:	0005883a 	mov	r2,zero
1000ebb0:	003fe306 	br	1000eb40 <__alt_data_end+0xf800eb40>

1000ebb4 <_fclose_r>:
1000ebb4:	28003226 	beq	r5,zero,1000ec80 <_fclose_r+0xcc>
1000ebb8:	defffc04 	addi	sp,sp,-16
1000ebbc:	dc400115 	stw	r17,4(sp)
1000ebc0:	2023883a 	mov	r17,r4
1000ebc4:	dc000015 	stw	r16,0(sp)
1000ebc8:	dfc00315 	stw	ra,12(sp)
1000ebcc:	dc800215 	stw	r18,8(sp)
1000ebd0:	2821883a 	mov	r16,r5
1000ebd4:	000ab9c0 	call	1000ab9c <__sfp_lock_acquire>
1000ebd8:	88000226 	beq	r17,zero,1000ebe4 <_fclose_r+0x30>
1000ebdc:	88800e17 	ldw	r2,56(r17)
1000ebe0:	10002926 	beq	r2,zero,1000ec88 <_fclose_r+0xd4>
1000ebe4:	8080030f 	ldh	r2,12(r16)
1000ebe8:	10002226 	beq	r2,zero,1000ec74 <_fclose_r+0xc0>
1000ebec:	8809883a 	mov	r4,r17
1000ebf0:	800b883a 	mov	r5,r16
1000ebf4:	000a5d00 	call	1000a5d0 <_fflush_r>
1000ebf8:	1025883a 	mov	r18,r2
1000ebfc:	80800b17 	ldw	r2,44(r16)
1000ec00:	10000426 	beq	r2,zero,1000ec14 <_fclose_r+0x60>
1000ec04:	81400717 	ldw	r5,28(r16)
1000ec08:	8809883a 	mov	r4,r17
1000ec0c:	103ee83a 	callr	r2
1000ec10:	10002616 	blt	r2,zero,1000ecac <_fclose_r+0xf8>
1000ec14:	8080030b 	ldhu	r2,12(r16)
1000ec18:	1080200c 	andi	r2,r2,128
1000ec1c:	10001f1e 	bne	r2,zero,1000ec9c <_fclose_r+0xe8>
1000ec20:	81400c17 	ldw	r5,48(r16)
1000ec24:	28000526 	beq	r5,zero,1000ec3c <_fclose_r+0x88>
1000ec28:	80801004 	addi	r2,r16,64
1000ec2c:	28800226 	beq	r5,r2,1000ec38 <_fclose_r+0x84>
1000ec30:	8809883a 	mov	r4,r17
1000ec34:	000ad000 	call	1000ad00 <_free_r>
1000ec38:	80000c15 	stw	zero,48(r16)
1000ec3c:	81401117 	ldw	r5,68(r16)
1000ec40:	28000326 	beq	r5,zero,1000ec50 <_fclose_r+0x9c>
1000ec44:	8809883a 	mov	r4,r17
1000ec48:	000ad000 	call	1000ad00 <_free_r>
1000ec4c:	80001115 	stw	zero,68(r16)
1000ec50:	8000030d 	sth	zero,12(r16)
1000ec54:	000aba00 	call	1000aba0 <__sfp_lock_release>
1000ec58:	9005883a 	mov	r2,r18
1000ec5c:	dfc00317 	ldw	ra,12(sp)
1000ec60:	dc800217 	ldw	r18,8(sp)
1000ec64:	dc400117 	ldw	r17,4(sp)
1000ec68:	dc000017 	ldw	r16,0(sp)
1000ec6c:	dec00404 	addi	sp,sp,16
1000ec70:	f800283a 	ret
1000ec74:	000aba00 	call	1000aba0 <__sfp_lock_release>
1000ec78:	0005883a 	mov	r2,zero
1000ec7c:	003ff706 	br	1000ec5c <__alt_data_end+0xf800ec5c>
1000ec80:	0005883a 	mov	r2,zero
1000ec84:	f800283a 	ret
1000ec88:	8809883a 	mov	r4,r17
1000ec8c:	000ab8c0 	call	1000ab8c <__sinit>
1000ec90:	8080030f 	ldh	r2,12(r16)
1000ec94:	103fd51e 	bne	r2,zero,1000ebec <__alt_data_end+0xf800ebec>
1000ec98:	003ff606 	br	1000ec74 <__alt_data_end+0xf800ec74>
1000ec9c:	81400417 	ldw	r5,16(r16)
1000eca0:	8809883a 	mov	r4,r17
1000eca4:	000ad000 	call	1000ad00 <_free_r>
1000eca8:	003fdd06 	br	1000ec20 <__alt_data_end+0xf800ec20>
1000ecac:	04bfffc4 	movi	r18,-1
1000ecb0:	003fd806 	br	1000ec14 <__alt_data_end+0xf800ec14>

1000ecb4 <fclose>:
1000ecb4:	00840074 	movhi	r2,4097
1000ecb8:	1090d104 	addi	r2,r2,17220
1000ecbc:	200b883a 	mov	r5,r4
1000ecc0:	11000017 	ldw	r4,0(r2)
1000ecc4:	000ebb41 	jmpi	1000ebb4 <_fclose_r>

1000ecc8 <_fputwc_r>:
1000ecc8:	3080030b 	ldhu	r2,12(r6)
1000eccc:	defff804 	addi	sp,sp,-32
1000ecd0:	dcc00415 	stw	r19,16(sp)
1000ecd4:	dc800315 	stw	r18,12(sp)
1000ecd8:	dc000115 	stw	r16,4(sp)
1000ecdc:	dfc00715 	stw	ra,28(sp)
1000ece0:	dd400615 	stw	r21,24(sp)
1000ece4:	dd000515 	stw	r20,20(sp)
1000ece8:	dc400215 	stw	r17,8(sp)
1000ecec:	10c8000c 	andi	r3,r2,8192
1000ecf0:	3021883a 	mov	r16,r6
1000ecf4:	2027883a 	mov	r19,r4
1000ecf8:	2825883a 	mov	r18,r5
1000ecfc:	1800051e 	bne	r3,zero,1000ed14 <_fputwc_r+0x4c>
1000ed00:	30c01917 	ldw	r3,100(r6)
1000ed04:	10880014 	ori	r2,r2,8192
1000ed08:	3080030d 	sth	r2,12(r6)
1000ed0c:	18880014 	ori	r2,r3,8192
1000ed10:	30801915 	stw	r2,100(r6)
1000ed14:	000b1e80 	call	1000b1e8 <__locale_mb_cur_max>
1000ed18:	00c00044 	movi	r3,1
1000ed1c:	10c03e26 	beq	r2,r3,1000ee18 <_fputwc_r+0x150>
1000ed20:	9809883a 	mov	r4,r19
1000ed24:	d80b883a 	mov	r5,sp
1000ed28:	900d883a 	mov	r6,r18
1000ed2c:	81c01704 	addi	r7,r16,92
1000ed30:	000fba80 	call	1000fba8 <_wcrtomb_r>
1000ed34:	1029883a 	mov	r20,r2
1000ed38:	00bfffc4 	movi	r2,-1
1000ed3c:	a0802026 	beq	r20,r2,1000edc0 <_fputwc_r+0xf8>
1000ed40:	d9400003 	ldbu	r5,0(sp)
1000ed44:	a0001c26 	beq	r20,zero,1000edb8 <_fputwc_r+0xf0>
1000ed48:	0023883a 	mov	r17,zero
1000ed4c:	05400284 	movi	r21,10
1000ed50:	00000906 	br	1000ed78 <_fputwc_r+0xb0>
1000ed54:	80800017 	ldw	r2,0(r16)
1000ed58:	11400005 	stb	r5,0(r2)
1000ed5c:	80c00017 	ldw	r3,0(r16)
1000ed60:	18c00044 	addi	r3,r3,1
1000ed64:	80c00015 	stw	r3,0(r16)
1000ed68:	8c400044 	addi	r17,r17,1
1000ed6c:	dc45883a 	add	r2,sp,r17
1000ed70:	8d00112e 	bgeu	r17,r20,1000edb8 <_fputwc_r+0xf0>
1000ed74:	11400003 	ldbu	r5,0(r2)
1000ed78:	80c00217 	ldw	r3,8(r16)
1000ed7c:	18ffffc4 	addi	r3,r3,-1
1000ed80:	80c00215 	stw	r3,8(r16)
1000ed84:	183ff30e 	bge	r3,zero,1000ed54 <__alt_data_end+0xf800ed54>
1000ed88:	80800617 	ldw	r2,24(r16)
1000ed8c:	18801916 	blt	r3,r2,1000edf4 <_fputwc_r+0x12c>
1000ed90:	80800017 	ldw	r2,0(r16)
1000ed94:	11400005 	stb	r5,0(r2)
1000ed98:	80800017 	ldw	r2,0(r16)
1000ed9c:	10c00003 	ldbu	r3,0(r2)
1000eda0:	10800044 	addi	r2,r2,1
1000eda4:	1d402326 	beq	r3,r21,1000ee34 <_fputwc_r+0x16c>
1000eda8:	80800015 	stw	r2,0(r16)
1000edac:	8c400044 	addi	r17,r17,1
1000edb0:	dc45883a 	add	r2,sp,r17
1000edb4:	8d3fef36 	bltu	r17,r20,1000ed74 <__alt_data_end+0xf800ed74>
1000edb8:	9005883a 	mov	r2,r18
1000edbc:	00000406 	br	1000edd0 <_fputwc_r+0x108>
1000edc0:	80c0030b 	ldhu	r3,12(r16)
1000edc4:	a005883a 	mov	r2,r20
1000edc8:	18c01014 	ori	r3,r3,64
1000edcc:	80c0030d 	sth	r3,12(r16)
1000edd0:	dfc00717 	ldw	ra,28(sp)
1000edd4:	dd400617 	ldw	r21,24(sp)
1000edd8:	dd000517 	ldw	r20,20(sp)
1000eddc:	dcc00417 	ldw	r19,16(sp)
1000ede0:	dc800317 	ldw	r18,12(sp)
1000ede4:	dc400217 	ldw	r17,8(sp)
1000ede8:	dc000117 	ldw	r16,4(sp)
1000edec:	dec00804 	addi	sp,sp,32
1000edf0:	f800283a 	ret
1000edf4:	9809883a 	mov	r4,r19
1000edf8:	29403fcc 	andi	r5,r5,255
1000edfc:	800d883a 	mov	r6,r16
1000ee00:	000e8bc0 	call	1000e8bc <__swbuf_r>
1000ee04:	10bfffe0 	cmpeqi	r2,r2,-1
1000ee08:	10803fcc 	andi	r2,r2,255
1000ee0c:	103fd626 	beq	r2,zero,1000ed68 <__alt_data_end+0xf800ed68>
1000ee10:	00bfffc4 	movi	r2,-1
1000ee14:	003fee06 	br	1000edd0 <__alt_data_end+0xf800edd0>
1000ee18:	90ffffc4 	addi	r3,r18,-1
1000ee1c:	01003f84 	movi	r4,254
1000ee20:	20ffbf36 	bltu	r4,r3,1000ed20 <__alt_data_end+0xf800ed20>
1000ee24:	900b883a 	mov	r5,r18
1000ee28:	dc800005 	stb	r18,0(sp)
1000ee2c:	1029883a 	mov	r20,r2
1000ee30:	003fc506 	br	1000ed48 <__alt_data_end+0xf800ed48>
1000ee34:	9809883a 	mov	r4,r19
1000ee38:	a80b883a 	mov	r5,r21
1000ee3c:	800d883a 	mov	r6,r16
1000ee40:	000e8bc0 	call	1000e8bc <__swbuf_r>
1000ee44:	10bfffe0 	cmpeqi	r2,r2,-1
1000ee48:	003fef06 	br	1000ee08 <__alt_data_end+0xf800ee08>

1000ee4c <fputwc>:
1000ee4c:	defffc04 	addi	sp,sp,-16
1000ee50:	dc000115 	stw	r16,4(sp)
1000ee54:	04040074 	movhi	r16,4097
1000ee58:	8410d104 	addi	r16,r16,17220
1000ee5c:	dc400215 	stw	r17,8(sp)
1000ee60:	2023883a 	mov	r17,r4
1000ee64:	81000017 	ldw	r4,0(r16)
1000ee68:	dfc00315 	stw	ra,12(sp)
1000ee6c:	280d883a 	mov	r6,r5
1000ee70:	20000626 	beq	r4,zero,1000ee8c <fputwc+0x40>
1000ee74:	20800e17 	ldw	r2,56(r4)
1000ee78:	1000041e 	bne	r2,zero,1000ee8c <fputwc+0x40>
1000ee7c:	d9400015 	stw	r5,0(sp)
1000ee80:	000ab8c0 	call	1000ab8c <__sinit>
1000ee84:	81000017 	ldw	r4,0(r16)
1000ee88:	d9800017 	ldw	r6,0(sp)
1000ee8c:	880b883a 	mov	r5,r17
1000ee90:	dfc00317 	ldw	ra,12(sp)
1000ee94:	dc400217 	ldw	r17,8(sp)
1000ee98:	dc000117 	ldw	r16,4(sp)
1000ee9c:	dec00404 	addi	sp,sp,16
1000eea0:	000ecc81 	jmpi	1000ecc8 <_fputwc_r>

1000eea4 <_fstat_r>:
1000eea4:	defffd04 	addi	sp,sp,-12
1000eea8:	dc000015 	stw	r16,0(sp)
1000eeac:	04040074 	movhi	r16,4097
1000eeb0:	dc400115 	stw	r17,4(sp)
1000eeb4:	8417a904 	addi	r16,r16,24228
1000eeb8:	2023883a 	mov	r17,r4
1000eebc:	2809883a 	mov	r4,r5
1000eec0:	300b883a 	mov	r5,r6
1000eec4:	dfc00215 	stw	ra,8(sp)
1000eec8:	80000015 	stw	zero,0(r16)
1000eecc:	000ff4c0 	call	1000ff4c <fstat>
1000eed0:	00ffffc4 	movi	r3,-1
1000eed4:	10c00526 	beq	r2,r3,1000eeec <_fstat_r+0x48>
1000eed8:	dfc00217 	ldw	ra,8(sp)
1000eedc:	dc400117 	ldw	r17,4(sp)
1000eee0:	dc000017 	ldw	r16,0(sp)
1000eee4:	dec00304 	addi	sp,sp,12
1000eee8:	f800283a 	ret
1000eeec:	80c00017 	ldw	r3,0(r16)
1000eef0:	183ff926 	beq	r3,zero,1000eed8 <__alt_data_end+0xf800eed8>
1000eef4:	88c00015 	stw	r3,0(r17)
1000eef8:	003ff706 	br	1000eed8 <__alt_data_end+0xf800eed8>

1000eefc <__sfvwrite_r>:
1000eefc:	30800217 	ldw	r2,8(r6)
1000ef00:	10004526 	beq	r2,zero,1000f018 <__sfvwrite_r+0x11c>
1000ef04:	28c0030b 	ldhu	r3,12(r5)
1000ef08:	defff404 	addi	sp,sp,-48
1000ef0c:	dd400715 	stw	r21,28(sp)
1000ef10:	dcc00515 	stw	r19,20(sp)
1000ef14:	dc000215 	stw	r16,8(sp)
1000ef18:	dfc00b15 	stw	ra,44(sp)
1000ef1c:	df000a15 	stw	fp,40(sp)
1000ef20:	ddc00915 	stw	r23,36(sp)
1000ef24:	dd800815 	stw	r22,32(sp)
1000ef28:	dd000615 	stw	r20,24(sp)
1000ef2c:	dc800415 	stw	r18,16(sp)
1000ef30:	dc400315 	stw	r17,12(sp)
1000ef34:	1880020c 	andi	r2,r3,8
1000ef38:	2821883a 	mov	r16,r5
1000ef3c:	202b883a 	mov	r21,r4
1000ef40:	3027883a 	mov	r19,r6
1000ef44:	10002526 	beq	r2,zero,1000efdc <__sfvwrite_r+0xe0>
1000ef48:	28800417 	ldw	r2,16(r5)
1000ef4c:	10002326 	beq	r2,zero,1000efdc <__sfvwrite_r+0xe0>
1000ef50:	1880008c 	andi	r2,r3,2
1000ef54:	9c400017 	ldw	r17,0(r19)
1000ef58:	10003126 	beq	r2,zero,1000f020 <__sfvwrite_r+0x124>
1000ef5c:	0029883a 	mov	r20,zero
1000ef60:	0025883a 	mov	r18,zero
1000ef64:	05810004 	movi	r22,1024
1000ef68:	a00d883a 	mov	r6,r20
1000ef6c:	a809883a 	mov	r4,r21
1000ef70:	90002526 	beq	r18,zero,1000f008 <__sfvwrite_r+0x10c>
1000ef74:	900f883a 	mov	r7,r18
1000ef78:	81400717 	ldw	r5,28(r16)
1000ef7c:	b480012e 	bgeu	r22,r18,1000ef84 <__sfvwrite_r+0x88>
1000ef80:	01c10004 	movi	r7,1024
1000ef84:	80800917 	ldw	r2,36(r16)
1000ef88:	103ee83a 	callr	r2
1000ef8c:	0080510e 	bge	zero,r2,1000f0d4 <__sfvwrite_r+0x1d8>
1000ef90:	98c00217 	ldw	r3,8(r19)
1000ef94:	a0a9883a 	add	r20,r20,r2
1000ef98:	90a5c83a 	sub	r18,r18,r2
1000ef9c:	1885c83a 	sub	r2,r3,r2
1000efa0:	98800215 	stw	r2,8(r19)
1000efa4:	103ff01e 	bne	r2,zero,1000ef68 <__alt_data_end+0xf800ef68>
1000efa8:	0005883a 	mov	r2,zero
1000efac:	dfc00b17 	ldw	ra,44(sp)
1000efb0:	df000a17 	ldw	fp,40(sp)
1000efb4:	ddc00917 	ldw	r23,36(sp)
1000efb8:	dd800817 	ldw	r22,32(sp)
1000efbc:	dd400717 	ldw	r21,28(sp)
1000efc0:	dd000617 	ldw	r20,24(sp)
1000efc4:	dcc00517 	ldw	r19,20(sp)
1000efc8:	dc800417 	ldw	r18,16(sp)
1000efcc:	dc400317 	ldw	r17,12(sp)
1000efd0:	dc000217 	ldw	r16,8(sp)
1000efd4:	dec00c04 	addi	sp,sp,48
1000efd8:	f800283a 	ret
1000efdc:	a809883a 	mov	r4,r21
1000efe0:	800b883a 	mov	r5,r16
1000efe4:	0008b500 	call	10008b50 <__swsetup_r>
1000efe8:	80c0030b 	ldhu	r3,12(r16)
1000efec:	103fd826 	beq	r2,zero,1000ef50 <__alt_data_end+0xf800ef50>
1000eff0:	18c01014 	ori	r3,r3,64
1000eff4:	80c0030d 	sth	r3,12(r16)
1000eff8:	00c00244 	movi	r3,9
1000effc:	00bfffc4 	movi	r2,-1
1000f000:	a8c00015 	stw	r3,0(r21)
1000f004:	003fe906 	br	1000efac <__alt_data_end+0xf800efac>
1000f008:	8d000017 	ldw	r20,0(r17)
1000f00c:	8c800117 	ldw	r18,4(r17)
1000f010:	8c400204 	addi	r17,r17,8
1000f014:	003fd406 	br	1000ef68 <__alt_data_end+0xf800ef68>
1000f018:	0005883a 	mov	r2,zero
1000f01c:	f800283a 	ret
1000f020:	1880004c 	andi	r2,r3,1
1000f024:	1000301e 	bne	r2,zero,1000f0e8 <__sfvwrite_r+0x1ec>
1000f028:	002f883a 	mov	r23,zero
1000f02c:	0025883a 	mov	r18,zero
1000f030:	90001c26 	beq	r18,zero,1000f0a4 <__sfvwrite_r+0x1a8>
1000f034:	1880800c 	andi	r2,r3,512
1000f038:	85000217 	ldw	r20,8(r16)
1000f03c:	10006c26 	beq	r2,zero,1000f1f0 <__sfvwrite_r+0x2f4>
1000f040:	a02d883a 	mov	r22,r20
1000f044:	95008536 	bltu	r18,r20,1000f25c <__sfvwrite_r+0x360>
1000f048:	1881200c 	andi	r2,r3,1152
1000f04c:	10009d1e 	bne	r2,zero,1000f2c4 <__sfvwrite_r+0x3c8>
1000f050:	81000017 	ldw	r4,0(r16)
1000f054:	a039883a 	mov	fp,r20
1000f058:	9029883a 	mov	r20,r18
1000f05c:	b80b883a 	mov	r5,r23
1000f060:	b00d883a 	mov	r6,r22
1000f064:	000f4500 	call	1000f450 <memmove>
1000f068:	80c00217 	ldw	r3,8(r16)
1000f06c:	81000017 	ldw	r4,0(r16)
1000f070:	9005883a 	mov	r2,r18
1000f074:	1f39c83a 	sub	fp,r3,fp
1000f078:	258f883a 	add	r7,r4,r22
1000f07c:	87000215 	stw	fp,8(r16)
1000f080:	81c00015 	stw	r7,0(r16)
1000f084:	98c00217 	ldw	r3,8(r19)
1000f088:	b8af883a 	add	r23,r23,r2
1000f08c:	90a5c83a 	sub	r18,r18,r2
1000f090:	1d05c83a 	sub	r2,r3,r20
1000f094:	98800215 	stw	r2,8(r19)
1000f098:	103fc326 	beq	r2,zero,1000efa8 <__alt_data_end+0xf800efa8>
1000f09c:	80c0030b 	ldhu	r3,12(r16)
1000f0a0:	903fe41e 	bne	r18,zero,1000f034 <__alt_data_end+0xf800f034>
1000f0a4:	8dc00017 	ldw	r23,0(r17)
1000f0a8:	8c800117 	ldw	r18,4(r17)
1000f0ac:	8c400204 	addi	r17,r17,8
1000f0b0:	003fdf06 	br	1000f030 <__alt_data_end+0xf800f030>
1000f0b4:	000f6080 	call	1000f608 <_realloc_r>
1000f0b8:	102d883a 	mov	r22,r2
1000f0bc:	1000a01e 	bne	r2,zero,1000f340 <__sfvwrite_r+0x444>
1000f0c0:	81400417 	ldw	r5,16(r16)
1000f0c4:	a809883a 	mov	r4,r21
1000f0c8:	000ad000 	call	1000ad00 <_free_r>
1000f0cc:	00800304 	movi	r2,12
1000f0d0:	a8800015 	stw	r2,0(r21)
1000f0d4:	80c0030b 	ldhu	r3,12(r16)
1000f0d8:	00bfffc4 	movi	r2,-1
1000f0dc:	18c01014 	ori	r3,r3,64
1000f0e0:	80c0030d 	sth	r3,12(r16)
1000f0e4:	003fb106 	br	1000efac <__alt_data_end+0xf800efac>
1000f0e8:	0029883a 	mov	r20,zero
1000f0ec:	0011883a 	mov	r8,zero
1000f0f0:	0039883a 	mov	fp,zero
1000f0f4:	0025883a 	mov	r18,zero
1000f0f8:	90001f26 	beq	r18,zero,1000f178 <__sfvwrite_r+0x27c>
1000f0fc:	40006826 	beq	r8,zero,1000f2a0 <__sfvwrite_r+0x3a4>
1000f100:	a02f883a 	mov	r23,r20
1000f104:	9500012e 	bgeu	r18,r20,1000f10c <__sfvwrite_r+0x210>
1000f108:	902f883a 	mov	r23,r18
1000f10c:	81000017 	ldw	r4,0(r16)
1000f110:	80800417 	ldw	r2,16(r16)
1000f114:	b82d883a 	mov	r22,r23
1000f118:	81800217 	ldw	r6,8(r16)
1000f11c:	81c00517 	ldw	r7,20(r16)
1000f120:	1100022e 	bgeu	r2,r4,1000f12c <__sfvwrite_r+0x230>
1000f124:	31c7883a 	add	r3,r6,r7
1000f128:	1dc01816 	blt	r3,r23,1000f18c <__sfvwrite_r+0x290>
1000f12c:	b9c03f16 	blt	r23,r7,1000f22c <__sfvwrite_r+0x330>
1000f130:	80800917 	ldw	r2,36(r16)
1000f134:	81400717 	ldw	r5,28(r16)
1000f138:	a809883a 	mov	r4,r21
1000f13c:	da000115 	stw	r8,4(sp)
1000f140:	e00d883a 	mov	r6,fp
1000f144:	103ee83a 	callr	r2
1000f148:	102d883a 	mov	r22,r2
1000f14c:	da000117 	ldw	r8,4(sp)
1000f150:	00bfe00e 	bge	zero,r2,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f154:	a5a9c83a 	sub	r20,r20,r22
1000f158:	a0001f26 	beq	r20,zero,1000f1d8 <__sfvwrite_r+0x2dc>
1000f15c:	98800217 	ldw	r2,8(r19)
1000f160:	e5b9883a 	add	fp,fp,r22
1000f164:	95a5c83a 	sub	r18,r18,r22
1000f168:	15adc83a 	sub	r22,r2,r22
1000f16c:	9d800215 	stw	r22,8(r19)
1000f170:	b03f8d26 	beq	r22,zero,1000efa8 <__alt_data_end+0xf800efa8>
1000f174:	903fe11e 	bne	r18,zero,1000f0fc <__alt_data_end+0xf800f0fc>
1000f178:	8f000017 	ldw	fp,0(r17)
1000f17c:	8c800117 	ldw	r18,4(r17)
1000f180:	0011883a 	mov	r8,zero
1000f184:	8c400204 	addi	r17,r17,8
1000f188:	003fdb06 	br	1000f0f8 <__alt_data_end+0xf800f0f8>
1000f18c:	180d883a 	mov	r6,r3
1000f190:	e00b883a 	mov	r5,fp
1000f194:	da000115 	stw	r8,4(sp)
1000f198:	d8c00015 	stw	r3,0(sp)
1000f19c:	000f4500 	call	1000f450 <memmove>
1000f1a0:	d8c00017 	ldw	r3,0(sp)
1000f1a4:	80800017 	ldw	r2,0(r16)
1000f1a8:	a809883a 	mov	r4,r21
1000f1ac:	800b883a 	mov	r5,r16
1000f1b0:	10c5883a 	add	r2,r2,r3
1000f1b4:	80800015 	stw	r2,0(r16)
1000f1b8:	d8c00015 	stw	r3,0(sp)
1000f1bc:	000a5d00 	call	1000a5d0 <_fflush_r>
1000f1c0:	d8c00017 	ldw	r3,0(sp)
1000f1c4:	da000117 	ldw	r8,4(sp)
1000f1c8:	103fc21e 	bne	r2,zero,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f1cc:	182d883a 	mov	r22,r3
1000f1d0:	a5a9c83a 	sub	r20,r20,r22
1000f1d4:	a03fe11e 	bne	r20,zero,1000f15c <__alt_data_end+0xf800f15c>
1000f1d8:	a809883a 	mov	r4,r21
1000f1dc:	800b883a 	mov	r5,r16
1000f1e0:	000a5d00 	call	1000a5d0 <_fflush_r>
1000f1e4:	103fbb1e 	bne	r2,zero,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f1e8:	0011883a 	mov	r8,zero
1000f1ec:	003fdb06 	br	1000f15c <__alt_data_end+0xf800f15c>
1000f1f0:	81000017 	ldw	r4,0(r16)
1000f1f4:	80800417 	ldw	r2,16(r16)
1000f1f8:	1100012e 	bgeu	r2,r4,1000f200 <__sfvwrite_r+0x304>
1000f1fc:	a4805a36 	bltu	r20,r18,1000f368 <__sfvwrite_r+0x46c>
1000f200:	81c00517 	ldw	r7,20(r16)
1000f204:	91c01a36 	bltu	r18,r7,1000f270 <__sfvwrite_r+0x374>
1000f208:	80800917 	ldw	r2,36(r16)
1000f20c:	81400717 	ldw	r5,28(r16)
1000f210:	a809883a 	mov	r4,r21
1000f214:	b80d883a 	mov	r6,r23
1000f218:	103ee83a 	callr	r2
1000f21c:	1029883a 	mov	r20,r2
1000f220:	00bfac0e 	bge	zero,r2,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f224:	a005883a 	mov	r2,r20
1000f228:	003f9606 	br	1000f084 <__alt_data_end+0xf800f084>
1000f22c:	b80d883a 	mov	r6,r23
1000f230:	e00b883a 	mov	r5,fp
1000f234:	da000115 	stw	r8,4(sp)
1000f238:	000f4500 	call	1000f450 <memmove>
1000f23c:	80800217 	ldw	r2,8(r16)
1000f240:	80c00017 	ldw	r3,0(r16)
1000f244:	da000117 	ldw	r8,4(sp)
1000f248:	15c5c83a 	sub	r2,r2,r23
1000f24c:	1def883a 	add	r23,r3,r23
1000f250:	80800215 	stw	r2,8(r16)
1000f254:	85c00015 	stw	r23,0(r16)
1000f258:	003fbe06 	br	1000f154 <__alt_data_end+0xf800f154>
1000f25c:	81000017 	ldw	r4,0(r16)
1000f260:	9039883a 	mov	fp,r18
1000f264:	9029883a 	mov	r20,r18
1000f268:	902d883a 	mov	r22,r18
1000f26c:	003f7b06 	br	1000f05c <__alt_data_end+0xf800f05c>
1000f270:	b80b883a 	mov	r5,r23
1000f274:	900d883a 	mov	r6,r18
1000f278:	000f4500 	call	1000f450 <memmove>
1000f27c:	80c00217 	ldw	r3,8(r16)
1000f280:	80800017 	ldw	r2,0(r16)
1000f284:	9029883a 	mov	r20,r18
1000f288:	1c87c83a 	sub	r3,r3,r18
1000f28c:	1485883a 	add	r2,r2,r18
1000f290:	80800015 	stw	r2,0(r16)
1000f294:	80c00215 	stw	r3,8(r16)
1000f298:	9005883a 	mov	r2,r18
1000f29c:	003f7906 	br	1000f084 <__alt_data_end+0xf800f084>
1000f2a0:	e009883a 	mov	r4,fp
1000f2a4:	01400284 	movi	r5,10
1000f2a8:	900d883a 	mov	r6,r18
1000f2ac:	000bba00 	call	1000bba0 <memchr>
1000f2b0:	10003826 	beq	r2,zero,1000f394 <__sfvwrite_r+0x498>
1000f2b4:	10800044 	addi	r2,r2,1
1000f2b8:	1729c83a 	sub	r20,r2,fp
1000f2bc:	02000044 	movi	r8,1
1000f2c0:	003f8f06 	br	1000f100 <__alt_data_end+0xf800f100>
1000f2c4:	80800517 	ldw	r2,20(r16)
1000f2c8:	81400417 	ldw	r5,16(r16)
1000f2cc:	87000017 	ldw	fp,0(r16)
1000f2d0:	10a9883a 	add	r20,r2,r2
1000f2d4:	a085883a 	add	r2,r20,r2
1000f2d8:	1028d7fa 	srli	r20,r2,31
1000f2dc:	e179c83a 	sub	fp,fp,r5
1000f2e0:	e1000044 	addi	r4,fp,1
1000f2e4:	a085883a 	add	r2,r20,r2
1000f2e8:	1029d07a 	srai	r20,r2,1
1000f2ec:	2485883a 	add	r2,r4,r18
1000f2f0:	a00d883a 	mov	r6,r20
1000f2f4:	a080022e 	bgeu	r20,r2,1000f300 <__sfvwrite_r+0x404>
1000f2f8:	1029883a 	mov	r20,r2
1000f2fc:	100d883a 	mov	r6,r2
1000f300:	18c1000c 	andi	r3,r3,1024
1000f304:	a809883a 	mov	r4,r21
1000f308:	183f6a26 	beq	r3,zero,1000f0b4 <__alt_data_end+0xf800f0b4>
1000f30c:	300b883a 	mov	r5,r6
1000f310:	000b3f80 	call	1000b3f8 <_malloc_r>
1000f314:	102d883a 	mov	r22,r2
1000f318:	103f6c26 	beq	r2,zero,1000f0cc <__alt_data_end+0xf800f0cc>
1000f31c:	81400417 	ldw	r5,16(r16)
1000f320:	1009883a 	mov	r4,r2
1000f324:	e00d883a 	mov	r6,fp
1000f328:	000bc880 	call	1000bc88 <memcpy>
1000f32c:	8080030b 	ldhu	r2,12(r16)
1000f330:	00fedfc4 	movi	r3,-1153
1000f334:	10c4703a 	and	r2,r2,r3
1000f338:	10802014 	ori	r2,r2,128
1000f33c:	8080030d 	sth	r2,12(r16)
1000f340:	b709883a 	add	r4,r22,fp
1000f344:	a707c83a 	sub	r3,r20,fp
1000f348:	85800415 	stw	r22,16(r16)
1000f34c:	85000515 	stw	r20,20(r16)
1000f350:	81000015 	stw	r4,0(r16)
1000f354:	9039883a 	mov	fp,r18
1000f358:	80c00215 	stw	r3,8(r16)
1000f35c:	9029883a 	mov	r20,r18
1000f360:	902d883a 	mov	r22,r18
1000f364:	003f3d06 	br	1000f05c <__alt_data_end+0xf800f05c>
1000f368:	b80b883a 	mov	r5,r23
1000f36c:	a00d883a 	mov	r6,r20
1000f370:	000f4500 	call	1000f450 <memmove>
1000f374:	80800017 	ldw	r2,0(r16)
1000f378:	a809883a 	mov	r4,r21
1000f37c:	800b883a 	mov	r5,r16
1000f380:	1505883a 	add	r2,r2,r20
1000f384:	80800015 	stw	r2,0(r16)
1000f388:	000a5d00 	call	1000a5d0 <_fflush_r>
1000f38c:	103fa526 	beq	r2,zero,1000f224 <__alt_data_end+0xf800f224>
1000f390:	003f5006 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f394:	95000044 	addi	r20,r18,1
1000f398:	02000044 	movi	r8,1
1000f39c:	003f5806 	br	1000f100 <__alt_data_end+0xf800f100>

1000f3a0 <_isatty_r>:
1000f3a0:	defffd04 	addi	sp,sp,-12
1000f3a4:	dc000015 	stw	r16,0(sp)
1000f3a8:	04040074 	movhi	r16,4097
1000f3ac:	dc400115 	stw	r17,4(sp)
1000f3b0:	8417a904 	addi	r16,r16,24228
1000f3b4:	2023883a 	mov	r17,r4
1000f3b8:	2809883a 	mov	r4,r5
1000f3bc:	dfc00215 	stw	ra,8(sp)
1000f3c0:	80000015 	stw	zero,0(r16)
1000f3c4:	00100540 	call	10010054 <isatty>
1000f3c8:	00ffffc4 	movi	r3,-1
1000f3cc:	10c00526 	beq	r2,r3,1000f3e4 <_isatty_r+0x44>
1000f3d0:	dfc00217 	ldw	ra,8(sp)
1000f3d4:	dc400117 	ldw	r17,4(sp)
1000f3d8:	dc000017 	ldw	r16,0(sp)
1000f3dc:	dec00304 	addi	sp,sp,12
1000f3e0:	f800283a 	ret
1000f3e4:	80c00017 	ldw	r3,0(r16)
1000f3e8:	183ff926 	beq	r3,zero,1000f3d0 <__alt_data_end+0xf800f3d0>
1000f3ec:	88c00015 	stw	r3,0(r17)
1000f3f0:	003ff706 	br	1000f3d0 <__alt_data_end+0xf800f3d0>

1000f3f4 <_lseek_r>:
1000f3f4:	defffd04 	addi	sp,sp,-12
1000f3f8:	dc000015 	stw	r16,0(sp)
1000f3fc:	04040074 	movhi	r16,4097
1000f400:	dc400115 	stw	r17,4(sp)
1000f404:	8417a904 	addi	r16,r16,24228
1000f408:	2023883a 	mov	r17,r4
1000f40c:	2809883a 	mov	r4,r5
1000f410:	300b883a 	mov	r5,r6
1000f414:	380d883a 	mov	r6,r7
1000f418:	dfc00215 	stw	ra,8(sp)
1000f41c:	80000015 	stw	zero,0(r16)
1000f420:	00102340 	call	10010234 <lseek>
1000f424:	00ffffc4 	movi	r3,-1
1000f428:	10c00526 	beq	r2,r3,1000f440 <_lseek_r+0x4c>
1000f42c:	dfc00217 	ldw	ra,8(sp)
1000f430:	dc400117 	ldw	r17,4(sp)
1000f434:	dc000017 	ldw	r16,0(sp)
1000f438:	dec00304 	addi	sp,sp,12
1000f43c:	f800283a 	ret
1000f440:	80c00017 	ldw	r3,0(r16)
1000f444:	183ff926 	beq	r3,zero,1000f42c <__alt_data_end+0xf800f42c>
1000f448:	88c00015 	stw	r3,0(r17)
1000f44c:	003ff706 	br	1000f42c <__alt_data_end+0xf800f42c>

1000f450 <memmove>:
1000f450:	2005883a 	mov	r2,r4
1000f454:	29000b2e 	bgeu	r5,r4,1000f484 <memmove+0x34>
1000f458:	298f883a 	add	r7,r5,r6
1000f45c:	21c0092e 	bgeu	r4,r7,1000f484 <memmove+0x34>
1000f460:	2187883a 	add	r3,r4,r6
1000f464:	198bc83a 	sub	r5,r3,r6
1000f468:	30004b26 	beq	r6,zero,1000f598 <memmove+0x148>
1000f46c:	39ffffc4 	addi	r7,r7,-1
1000f470:	39000003 	ldbu	r4,0(r7)
1000f474:	18ffffc4 	addi	r3,r3,-1
1000f478:	19000005 	stb	r4,0(r3)
1000f47c:	197ffb1e 	bne	r3,r5,1000f46c <__alt_data_end+0xf800f46c>
1000f480:	f800283a 	ret
1000f484:	00c003c4 	movi	r3,15
1000f488:	1980412e 	bgeu	r3,r6,1000f590 <memmove+0x140>
1000f48c:	1146b03a 	or	r3,r2,r5
1000f490:	18c000cc 	andi	r3,r3,3
1000f494:	1800411e 	bne	r3,zero,1000f59c <memmove+0x14c>
1000f498:	33fffc04 	addi	r15,r6,-16
1000f49c:	781ed13a 	srli	r15,r15,4
1000f4a0:	28c00104 	addi	r3,r5,4
1000f4a4:	13400104 	addi	r13,r2,4
1000f4a8:	781c913a 	slli	r14,r15,4
1000f4ac:	2b000204 	addi	r12,r5,8
1000f4b0:	12c00204 	addi	r11,r2,8
1000f4b4:	73800504 	addi	r14,r14,20
1000f4b8:	2a800304 	addi	r10,r5,12
1000f4bc:	12400304 	addi	r9,r2,12
1000f4c0:	2b9d883a 	add	r14,r5,r14
1000f4c4:	2811883a 	mov	r8,r5
1000f4c8:	100f883a 	mov	r7,r2
1000f4cc:	41000017 	ldw	r4,0(r8)
1000f4d0:	39c00404 	addi	r7,r7,16
1000f4d4:	18c00404 	addi	r3,r3,16
1000f4d8:	393ffc15 	stw	r4,-16(r7)
1000f4dc:	193ffc17 	ldw	r4,-16(r3)
1000f4e0:	6b400404 	addi	r13,r13,16
1000f4e4:	5ac00404 	addi	r11,r11,16
1000f4e8:	693ffc15 	stw	r4,-16(r13)
1000f4ec:	61000017 	ldw	r4,0(r12)
1000f4f0:	4a400404 	addi	r9,r9,16
1000f4f4:	42000404 	addi	r8,r8,16
1000f4f8:	593ffc15 	stw	r4,-16(r11)
1000f4fc:	51000017 	ldw	r4,0(r10)
1000f500:	63000404 	addi	r12,r12,16
1000f504:	52800404 	addi	r10,r10,16
1000f508:	493ffc15 	stw	r4,-16(r9)
1000f50c:	1bbfef1e 	bne	r3,r14,1000f4cc <__alt_data_end+0xf800f4cc>
1000f510:	79000044 	addi	r4,r15,1
1000f514:	2008913a 	slli	r4,r4,4
1000f518:	328003cc 	andi	r10,r6,15
1000f51c:	02c000c4 	movi	r11,3
1000f520:	1107883a 	add	r3,r2,r4
1000f524:	290b883a 	add	r5,r5,r4
1000f528:	5a801e2e 	bgeu	r11,r10,1000f5a4 <memmove+0x154>
1000f52c:	1813883a 	mov	r9,r3
1000f530:	2811883a 	mov	r8,r5
1000f534:	500f883a 	mov	r7,r10
1000f538:	41000017 	ldw	r4,0(r8)
1000f53c:	4a400104 	addi	r9,r9,4
1000f540:	39ffff04 	addi	r7,r7,-4
1000f544:	493fff15 	stw	r4,-4(r9)
1000f548:	42000104 	addi	r8,r8,4
1000f54c:	59fffa36 	bltu	r11,r7,1000f538 <__alt_data_end+0xf800f538>
1000f550:	513fff04 	addi	r4,r10,-4
1000f554:	2008d0ba 	srli	r4,r4,2
1000f558:	318000cc 	andi	r6,r6,3
1000f55c:	21000044 	addi	r4,r4,1
1000f560:	2109883a 	add	r4,r4,r4
1000f564:	2109883a 	add	r4,r4,r4
1000f568:	1907883a 	add	r3,r3,r4
1000f56c:	290b883a 	add	r5,r5,r4
1000f570:	30000926 	beq	r6,zero,1000f598 <memmove+0x148>
1000f574:	198d883a 	add	r6,r3,r6
1000f578:	29c00003 	ldbu	r7,0(r5)
1000f57c:	18c00044 	addi	r3,r3,1
1000f580:	29400044 	addi	r5,r5,1
1000f584:	19ffffc5 	stb	r7,-1(r3)
1000f588:	19bffb1e 	bne	r3,r6,1000f578 <__alt_data_end+0xf800f578>
1000f58c:	f800283a 	ret
1000f590:	1007883a 	mov	r3,r2
1000f594:	003ff606 	br	1000f570 <__alt_data_end+0xf800f570>
1000f598:	f800283a 	ret
1000f59c:	1007883a 	mov	r3,r2
1000f5a0:	003ff406 	br	1000f574 <__alt_data_end+0xf800f574>
1000f5a4:	500d883a 	mov	r6,r10
1000f5a8:	003ff106 	br	1000f570 <__alt_data_end+0xf800f570>

1000f5ac <_read_r>:
1000f5ac:	defffd04 	addi	sp,sp,-12
1000f5b0:	dc000015 	stw	r16,0(sp)
1000f5b4:	04040074 	movhi	r16,4097
1000f5b8:	dc400115 	stw	r17,4(sp)
1000f5bc:	8417a904 	addi	r16,r16,24228
1000f5c0:	2023883a 	mov	r17,r4
1000f5c4:	2809883a 	mov	r4,r5
1000f5c8:	300b883a 	mov	r5,r6
1000f5cc:	380d883a 	mov	r6,r7
1000f5d0:	dfc00215 	stw	ra,8(sp)
1000f5d4:	80000015 	stw	zero,0(r16)
1000f5d8:	00104180 	call	10010418 <read>
1000f5dc:	00ffffc4 	movi	r3,-1
1000f5e0:	10c00526 	beq	r2,r3,1000f5f8 <_read_r+0x4c>
1000f5e4:	dfc00217 	ldw	ra,8(sp)
1000f5e8:	dc400117 	ldw	r17,4(sp)
1000f5ec:	dc000017 	ldw	r16,0(sp)
1000f5f0:	dec00304 	addi	sp,sp,12
1000f5f4:	f800283a 	ret
1000f5f8:	80c00017 	ldw	r3,0(r16)
1000f5fc:	183ff926 	beq	r3,zero,1000f5e4 <__alt_data_end+0xf800f5e4>
1000f600:	88c00015 	stw	r3,0(r17)
1000f604:	003ff706 	br	1000f5e4 <__alt_data_end+0xf800f5e4>

1000f608 <_realloc_r>:
1000f608:	defff604 	addi	sp,sp,-40
1000f60c:	dcc00315 	stw	r19,12(sp)
1000f610:	dc400115 	stw	r17,4(sp)
1000f614:	dfc00915 	stw	ra,36(sp)
1000f618:	df000815 	stw	fp,32(sp)
1000f61c:	ddc00715 	stw	r23,28(sp)
1000f620:	dd800615 	stw	r22,24(sp)
1000f624:	dd400515 	stw	r21,20(sp)
1000f628:	dd000415 	stw	r20,16(sp)
1000f62c:	dc800215 	stw	r18,8(sp)
1000f630:	dc000015 	stw	r16,0(sp)
1000f634:	2827883a 	mov	r19,r5
1000f638:	3023883a 	mov	r17,r6
1000f63c:	2800bf26 	beq	r5,zero,1000f93c <_realloc_r+0x334>
1000f640:	2025883a 	mov	r18,r4
1000f644:	00103880 	call	10010388 <__malloc_lock>
1000f648:	98ffff17 	ldw	r3,-4(r19)
1000f64c:	01bfff04 	movi	r6,-4
1000f650:	890002c4 	addi	r4,r17,11
1000f654:	01c00584 	movi	r7,22
1000f658:	9d7ffe04 	addi	r21,r19,-8
1000f65c:	19a0703a 	and	r16,r3,r6
1000f660:	39003f2e 	bgeu	r7,r4,1000f760 <_realloc_r+0x158>
1000f664:	053ffe04 	movi	r20,-8
1000f668:	2528703a 	and	r20,r4,r20
1000f66c:	a00f883a 	mov	r7,r20
1000f670:	a0008216 	blt	r20,zero,1000f87c <_realloc_r+0x274>
1000f674:	a4408136 	bltu	r20,r17,1000f87c <_realloc_r+0x274>
1000f678:	81c03c0e 	bge	r16,r7,1000f76c <_realloc_r+0x164>
1000f67c:	07040074 	movhi	fp,4097
1000f680:	e70b4b04 	addi	fp,fp,11564
1000f684:	e1000217 	ldw	r4,8(fp)
1000f688:	ac05883a 	add	r2,r21,r16
1000f68c:	2080bf26 	beq	r4,r2,1000f98c <_realloc_r+0x384>
1000f690:	11000117 	ldw	r4,4(r2)
1000f694:	023fff84 	movi	r8,-2
1000f698:	2210703a 	and	r8,r4,r8
1000f69c:	1211883a 	add	r8,r2,r8
1000f6a0:	41400117 	ldw	r5,4(r8)
1000f6a4:	2940004c 	andi	r5,r5,1
1000f6a8:	28004a1e 	bne	r5,zero,1000f7d4 <_realloc_r+0x1cc>
1000f6ac:	017fff04 	movi	r5,-4
1000f6b0:	2148703a 	and	r4,r4,r5
1000f6b4:	2409883a 	add	r4,r4,r16
1000f6b8:	21c0ad0e 	bge	r4,r7,1000f970 <_realloc_r+0x368>
1000f6bc:	18c0004c 	andi	r3,r3,1
1000f6c0:	18007f1e 	bne	r3,zero,1000f8c0 <_realloc_r+0x2b8>
1000f6c4:	9dfffe17 	ldw	r23,-8(r19)
1000f6c8:	adefc83a 	sub	r23,r21,r23
1000f6cc:	bd800117 	ldw	r22,4(r23)
1000f6d0:	b14a703a 	and	r5,r22,r5
1000f6d4:	216d883a 	add	r22,r4,r5
1000f6d8:	b1c04516 	blt	r22,r7,1000f7f0 <_realloc_r+0x1e8>
1000f6dc:	10c00317 	ldw	r3,12(r2)
1000f6e0:	10800217 	ldw	r2,8(r2)
1000f6e4:	81bfff04 	addi	r6,r16,-4
1000f6e8:	bc400204 	addi	r17,r23,8
1000f6ec:	10c00315 	stw	r3,12(r2)
1000f6f0:	18800215 	stw	r2,8(r3)
1000f6f4:	b9400217 	ldw	r5,8(r23)
1000f6f8:	b8c00317 	ldw	r3,12(r23)
1000f6fc:	00800904 	movi	r2,36
1000f700:	28c00315 	stw	r3,12(r5)
1000f704:	19400215 	stw	r5,8(r3)
1000f708:	1180ef36 	bltu	r2,r6,1000fac8 <_realloc_r+0x4c0>
1000f70c:	008004c4 	movi	r2,19
1000f710:	1180da2e 	bgeu	r2,r6,1000fa7c <_realloc_r+0x474>
1000f714:	98800017 	ldw	r2,0(r19)
1000f718:	b8800215 	stw	r2,8(r23)
1000f71c:	98800117 	ldw	r2,4(r19)
1000f720:	b8800315 	stw	r2,12(r23)
1000f724:	008006c4 	movi	r2,27
1000f728:	1180fc2e 	bgeu	r2,r6,1000fb1c <_realloc_r+0x514>
1000f72c:	98800217 	ldw	r2,8(r19)
1000f730:	b8800415 	stw	r2,16(r23)
1000f734:	98800317 	ldw	r2,12(r19)
1000f738:	b8800515 	stw	r2,20(r23)
1000f73c:	00800904 	movi	r2,36
1000f740:	3080421e 	bne	r6,r2,1000f84c <_realloc_r+0x244>
1000f744:	98800417 	ldw	r2,16(r19)
1000f748:	9cc00604 	addi	r19,r19,24
1000f74c:	b8c00804 	addi	r3,r23,32
1000f750:	b8800615 	stw	r2,24(r23)
1000f754:	98bfff17 	ldw	r2,-4(r19)
1000f758:	b8800715 	stw	r2,28(r23)
1000f75c:	00003d06 	br	1000f854 <_realloc_r+0x24c>
1000f760:	01c00404 	movi	r7,16
1000f764:	3829883a 	mov	r20,r7
1000f768:	003fc206 	br	1000f674 <__alt_data_end+0xf800f674>
1000f76c:	9823883a 	mov	r17,r19
1000f770:	850fc83a 	sub	r7,r16,r20
1000f774:	008003c4 	movi	r2,15
1000f778:	18c0004c 	andi	r3,r3,1
1000f77c:	11c04336 	bltu	r2,r7,1000f88c <_realloc_r+0x284>
1000f780:	1c06b03a 	or	r3,r3,r16
1000f784:	a8c00115 	stw	r3,4(r21)
1000f788:	ac21883a 	add	r16,r21,r16
1000f78c:	80c00117 	ldw	r3,4(r16)
1000f790:	18c00054 	ori	r3,r3,1
1000f794:	80c00115 	stw	r3,4(r16)
1000f798:	9009883a 	mov	r4,r18
1000f79c:	00103a80 	call	100103a8 <__malloc_unlock>
1000f7a0:	8805883a 	mov	r2,r17
1000f7a4:	dfc00917 	ldw	ra,36(sp)
1000f7a8:	df000817 	ldw	fp,32(sp)
1000f7ac:	ddc00717 	ldw	r23,28(sp)
1000f7b0:	dd800617 	ldw	r22,24(sp)
1000f7b4:	dd400517 	ldw	r21,20(sp)
1000f7b8:	dd000417 	ldw	r20,16(sp)
1000f7bc:	dcc00317 	ldw	r19,12(sp)
1000f7c0:	dc800217 	ldw	r18,8(sp)
1000f7c4:	dc400117 	ldw	r17,4(sp)
1000f7c8:	dc000017 	ldw	r16,0(sp)
1000f7cc:	dec00a04 	addi	sp,sp,40
1000f7d0:	f800283a 	ret
1000f7d4:	18c0004c 	andi	r3,r3,1
1000f7d8:	1800391e 	bne	r3,zero,1000f8c0 <_realloc_r+0x2b8>
1000f7dc:	9dfffe17 	ldw	r23,-8(r19)
1000f7e0:	00bfff04 	movi	r2,-4
1000f7e4:	adefc83a 	sub	r23,r21,r23
1000f7e8:	b9400117 	ldw	r5,4(r23)
1000f7ec:	288a703a 	and	r5,r5,r2
1000f7f0:	2c2d883a 	add	r22,r5,r16
1000f7f4:	b1c03216 	blt	r22,r7,1000f8c0 <_realloc_r+0x2b8>
1000f7f8:	b8800317 	ldw	r2,12(r23)
1000f7fc:	b8c00217 	ldw	r3,8(r23)
1000f800:	81bfff04 	addi	r6,r16,-4
1000f804:	01000904 	movi	r4,36
1000f808:	18800315 	stw	r2,12(r3)
1000f80c:	10c00215 	stw	r3,8(r2)
1000f810:	bc400204 	addi	r17,r23,8
1000f814:	2180ac36 	bltu	r4,r6,1000fac8 <_realloc_r+0x4c0>
1000f818:	008004c4 	movi	r2,19
1000f81c:	1180972e 	bgeu	r2,r6,1000fa7c <_realloc_r+0x474>
1000f820:	98800017 	ldw	r2,0(r19)
1000f824:	b8800215 	stw	r2,8(r23)
1000f828:	98800117 	ldw	r2,4(r19)
1000f82c:	b8800315 	stw	r2,12(r23)
1000f830:	008006c4 	movi	r2,27
1000f834:	1180b92e 	bgeu	r2,r6,1000fb1c <_realloc_r+0x514>
1000f838:	98800217 	ldw	r2,8(r19)
1000f83c:	b8800415 	stw	r2,16(r23)
1000f840:	98800317 	ldw	r2,12(r19)
1000f844:	b8800515 	stw	r2,20(r23)
1000f848:	313fbe26 	beq	r6,r4,1000f744 <__alt_data_end+0xf800f744>
1000f84c:	b8c00604 	addi	r3,r23,24
1000f850:	9cc00404 	addi	r19,r19,16
1000f854:	98800017 	ldw	r2,0(r19)
1000f858:	b021883a 	mov	r16,r22
1000f85c:	b82b883a 	mov	r21,r23
1000f860:	18800015 	stw	r2,0(r3)
1000f864:	98800117 	ldw	r2,4(r19)
1000f868:	18800115 	stw	r2,4(r3)
1000f86c:	98800217 	ldw	r2,8(r19)
1000f870:	18800215 	stw	r2,8(r3)
1000f874:	b8c00117 	ldw	r3,4(r23)
1000f878:	003fbd06 	br	1000f770 <__alt_data_end+0xf800f770>
1000f87c:	00800304 	movi	r2,12
1000f880:	90800015 	stw	r2,0(r18)
1000f884:	0005883a 	mov	r2,zero
1000f888:	003fc606 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000f88c:	1d06b03a 	or	r3,r3,r20
1000f890:	ad0b883a 	add	r5,r21,r20
1000f894:	a8c00115 	stw	r3,4(r21)
1000f898:	38800054 	ori	r2,r7,1
1000f89c:	28800115 	stw	r2,4(r5)
1000f8a0:	29cf883a 	add	r7,r5,r7
1000f8a4:	38800117 	ldw	r2,4(r7)
1000f8a8:	9009883a 	mov	r4,r18
1000f8ac:	29400204 	addi	r5,r5,8
1000f8b0:	10800054 	ori	r2,r2,1
1000f8b4:	38800115 	stw	r2,4(r7)
1000f8b8:	000ad000 	call	1000ad00 <_free_r>
1000f8bc:	003fb606 	br	1000f798 <__alt_data_end+0xf800f798>
1000f8c0:	880b883a 	mov	r5,r17
1000f8c4:	9009883a 	mov	r4,r18
1000f8c8:	000b3f80 	call	1000b3f8 <_malloc_r>
1000f8cc:	1023883a 	mov	r17,r2
1000f8d0:	1000aa26 	beq	r2,zero,1000fb7c <_realloc_r+0x574>
1000f8d4:	98ffff17 	ldw	r3,-4(r19)
1000f8d8:	113ffe04 	addi	r4,r2,-8
1000f8dc:	00bfff84 	movi	r2,-2
1000f8e0:	1884703a 	and	r2,r3,r2
1000f8e4:	a885883a 	add	r2,r21,r2
1000f8e8:	20808626 	beq	r4,r2,1000fb04 <_realloc_r+0x4fc>
1000f8ec:	81bfff04 	addi	r6,r16,-4
1000f8f0:	00800904 	movi	r2,36
1000f8f4:	11807036 	bltu	r2,r6,1000fab8 <_realloc_r+0x4b0>
1000f8f8:	00c004c4 	movi	r3,19
1000f8fc:	19805636 	bltu	r3,r6,1000fa58 <_realloc_r+0x450>
1000f900:	8805883a 	mov	r2,r17
1000f904:	9807883a 	mov	r3,r19
1000f908:	19000017 	ldw	r4,0(r3)
1000f90c:	11000015 	stw	r4,0(r2)
1000f910:	19000117 	ldw	r4,4(r3)
1000f914:	11000115 	stw	r4,4(r2)
1000f918:	18c00217 	ldw	r3,8(r3)
1000f91c:	10c00215 	stw	r3,8(r2)
1000f920:	980b883a 	mov	r5,r19
1000f924:	9009883a 	mov	r4,r18
1000f928:	000ad000 	call	1000ad00 <_free_r>
1000f92c:	9009883a 	mov	r4,r18
1000f930:	00103a80 	call	100103a8 <__malloc_unlock>
1000f934:	8805883a 	mov	r2,r17
1000f938:	003f9a06 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000f93c:	300b883a 	mov	r5,r6
1000f940:	dfc00917 	ldw	ra,36(sp)
1000f944:	df000817 	ldw	fp,32(sp)
1000f948:	ddc00717 	ldw	r23,28(sp)
1000f94c:	dd800617 	ldw	r22,24(sp)
1000f950:	dd400517 	ldw	r21,20(sp)
1000f954:	dd000417 	ldw	r20,16(sp)
1000f958:	dcc00317 	ldw	r19,12(sp)
1000f95c:	dc800217 	ldw	r18,8(sp)
1000f960:	dc400117 	ldw	r17,4(sp)
1000f964:	dc000017 	ldw	r16,0(sp)
1000f968:	dec00a04 	addi	sp,sp,40
1000f96c:	000b3f81 	jmpi	1000b3f8 <_malloc_r>
1000f970:	11400317 	ldw	r5,12(r2)
1000f974:	10800217 	ldw	r2,8(r2)
1000f978:	9823883a 	mov	r17,r19
1000f97c:	2021883a 	mov	r16,r4
1000f980:	11400315 	stw	r5,12(r2)
1000f984:	28800215 	stw	r2,8(r5)
1000f988:	003f7906 	br	1000f770 <__alt_data_end+0xf800f770>
1000f98c:	21000117 	ldw	r4,4(r4)
1000f990:	00bfff04 	movi	r2,-4
1000f994:	a1800404 	addi	r6,r20,16
1000f998:	2088703a 	and	r4,r4,r2
1000f99c:	2409883a 	add	r4,r4,r16
1000f9a0:	2180380e 	bge	r4,r6,1000fa84 <_realloc_r+0x47c>
1000f9a4:	18c0004c 	andi	r3,r3,1
1000f9a8:	183fc51e 	bne	r3,zero,1000f8c0 <__alt_data_end+0xf800f8c0>
1000f9ac:	9dfffe17 	ldw	r23,-8(r19)
1000f9b0:	adefc83a 	sub	r23,r21,r23
1000f9b4:	b9400117 	ldw	r5,4(r23)
1000f9b8:	288a703a 	and	r5,r5,r2
1000f9bc:	216d883a 	add	r22,r4,r5
1000f9c0:	b1bf8b16 	blt	r22,r6,1000f7f0 <__alt_data_end+0xf800f7f0>
1000f9c4:	b8800317 	ldw	r2,12(r23)
1000f9c8:	b8c00217 	ldw	r3,8(r23)
1000f9cc:	81bfff04 	addi	r6,r16,-4
1000f9d0:	01000904 	movi	r4,36
1000f9d4:	18800315 	stw	r2,12(r3)
1000f9d8:	10c00215 	stw	r3,8(r2)
1000f9dc:	bc400204 	addi	r17,r23,8
1000f9e0:	21805a36 	bltu	r4,r6,1000fb4c <_realloc_r+0x544>
1000f9e4:	008004c4 	movi	r2,19
1000f9e8:	1180562e 	bgeu	r2,r6,1000fb44 <_realloc_r+0x53c>
1000f9ec:	98800017 	ldw	r2,0(r19)
1000f9f0:	b8800215 	stw	r2,8(r23)
1000f9f4:	98800117 	ldw	r2,4(r19)
1000f9f8:	b8800315 	stw	r2,12(r23)
1000f9fc:	008006c4 	movi	r2,27
1000fa00:	11805636 	bltu	r2,r6,1000fb5c <_realloc_r+0x554>
1000fa04:	b8800404 	addi	r2,r23,16
1000fa08:	9cc00204 	addi	r19,r19,8
1000fa0c:	98c00017 	ldw	r3,0(r19)
1000fa10:	10c00015 	stw	r3,0(r2)
1000fa14:	98c00117 	ldw	r3,4(r19)
1000fa18:	10c00115 	stw	r3,4(r2)
1000fa1c:	98c00217 	ldw	r3,8(r19)
1000fa20:	10c00215 	stw	r3,8(r2)
1000fa24:	bd07883a 	add	r3,r23,r20
1000fa28:	b505c83a 	sub	r2,r22,r20
1000fa2c:	e0c00215 	stw	r3,8(fp)
1000fa30:	10800054 	ori	r2,r2,1
1000fa34:	18800115 	stw	r2,4(r3)
1000fa38:	b8800117 	ldw	r2,4(r23)
1000fa3c:	9009883a 	mov	r4,r18
1000fa40:	1080004c 	andi	r2,r2,1
1000fa44:	a0a8b03a 	or	r20,r20,r2
1000fa48:	bd000115 	stw	r20,4(r23)
1000fa4c:	00103a80 	call	100103a8 <__malloc_unlock>
1000fa50:	8805883a 	mov	r2,r17
1000fa54:	003f5306 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000fa58:	98c00017 	ldw	r3,0(r19)
1000fa5c:	88c00015 	stw	r3,0(r17)
1000fa60:	98c00117 	ldw	r3,4(r19)
1000fa64:	88c00115 	stw	r3,4(r17)
1000fa68:	00c006c4 	movi	r3,27
1000fa6c:	19801d36 	bltu	r3,r6,1000fae4 <_realloc_r+0x4dc>
1000fa70:	88800204 	addi	r2,r17,8
1000fa74:	98c00204 	addi	r3,r19,8
1000fa78:	003fa306 	br	1000f908 <__alt_data_end+0xf800f908>
1000fa7c:	8807883a 	mov	r3,r17
1000fa80:	003f7406 	br	1000f854 <__alt_data_end+0xf800f854>
1000fa84:	ad2b883a 	add	r21,r21,r20
1000fa88:	2505c83a 	sub	r2,r4,r20
1000fa8c:	e5400215 	stw	r21,8(fp)
1000fa90:	10800054 	ori	r2,r2,1
1000fa94:	a8800115 	stw	r2,4(r21)
1000fa98:	98bfff17 	ldw	r2,-4(r19)
1000fa9c:	9009883a 	mov	r4,r18
1000faa0:	1080004c 	andi	r2,r2,1
1000faa4:	a0a8b03a 	or	r20,r20,r2
1000faa8:	9d3fff15 	stw	r20,-4(r19)
1000faac:	00103a80 	call	100103a8 <__malloc_unlock>
1000fab0:	9805883a 	mov	r2,r19
1000fab4:	003f3b06 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000fab8:	8809883a 	mov	r4,r17
1000fabc:	980b883a 	mov	r5,r19
1000fac0:	000f4500 	call	1000f450 <memmove>
1000fac4:	003f9606 	br	1000f920 <__alt_data_end+0xf800f920>
1000fac8:	8809883a 	mov	r4,r17
1000facc:	980b883a 	mov	r5,r19
1000fad0:	000f4500 	call	1000f450 <memmove>
1000fad4:	b8c00117 	ldw	r3,4(r23)
1000fad8:	b021883a 	mov	r16,r22
1000fadc:	b82b883a 	mov	r21,r23
1000fae0:	003f2306 	br	1000f770 <__alt_data_end+0xf800f770>
1000fae4:	98c00217 	ldw	r3,8(r19)
1000fae8:	88c00215 	stw	r3,8(r17)
1000faec:	98c00317 	ldw	r3,12(r19)
1000faf0:	88c00315 	stw	r3,12(r17)
1000faf4:	30800c26 	beq	r6,r2,1000fb28 <_realloc_r+0x520>
1000faf8:	88800404 	addi	r2,r17,16
1000fafc:	98c00404 	addi	r3,r19,16
1000fb00:	003f8106 	br	1000f908 <__alt_data_end+0xf800f908>
1000fb04:	893fff17 	ldw	r4,-4(r17)
1000fb08:	00bfff04 	movi	r2,-4
1000fb0c:	9823883a 	mov	r17,r19
1000fb10:	2084703a 	and	r2,r4,r2
1000fb14:	80a1883a 	add	r16,r16,r2
1000fb18:	003f1506 	br	1000f770 <__alt_data_end+0xf800f770>
1000fb1c:	b8c00404 	addi	r3,r23,16
1000fb20:	9cc00204 	addi	r19,r19,8
1000fb24:	003f4b06 	br	1000f854 <__alt_data_end+0xf800f854>
1000fb28:	99000417 	ldw	r4,16(r19)
1000fb2c:	88800604 	addi	r2,r17,24
1000fb30:	98c00604 	addi	r3,r19,24
1000fb34:	89000415 	stw	r4,16(r17)
1000fb38:	99000517 	ldw	r4,20(r19)
1000fb3c:	89000515 	stw	r4,20(r17)
1000fb40:	003f7106 	br	1000f908 <__alt_data_end+0xf800f908>
1000fb44:	8805883a 	mov	r2,r17
1000fb48:	003fb006 	br	1000fa0c <__alt_data_end+0xf800fa0c>
1000fb4c:	8809883a 	mov	r4,r17
1000fb50:	980b883a 	mov	r5,r19
1000fb54:	000f4500 	call	1000f450 <memmove>
1000fb58:	003fb206 	br	1000fa24 <__alt_data_end+0xf800fa24>
1000fb5c:	98800217 	ldw	r2,8(r19)
1000fb60:	b8800415 	stw	r2,16(r23)
1000fb64:	98800317 	ldw	r2,12(r19)
1000fb68:	b8800515 	stw	r2,20(r23)
1000fb6c:	31000726 	beq	r6,r4,1000fb8c <_realloc_r+0x584>
1000fb70:	b8800604 	addi	r2,r23,24
1000fb74:	9cc00404 	addi	r19,r19,16
1000fb78:	003fa406 	br	1000fa0c <__alt_data_end+0xf800fa0c>
1000fb7c:	9009883a 	mov	r4,r18
1000fb80:	00103a80 	call	100103a8 <__malloc_unlock>
1000fb84:	0005883a 	mov	r2,zero
1000fb88:	003f0606 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000fb8c:	98c00417 	ldw	r3,16(r19)
1000fb90:	9cc00604 	addi	r19,r19,24
1000fb94:	b8800804 	addi	r2,r23,32
1000fb98:	b8c00615 	stw	r3,24(r23)
1000fb9c:	98ffff17 	ldw	r3,-4(r19)
1000fba0:	b8c00715 	stw	r3,28(r23)
1000fba4:	003f9906 	br	1000fa0c <__alt_data_end+0xf800fa0c>

1000fba8 <_wcrtomb_r>:
1000fba8:	defff604 	addi	sp,sp,-40
1000fbac:	00840074 	movhi	r2,4097
1000fbb0:	dc800815 	stw	r18,32(sp)
1000fbb4:	dc400715 	stw	r17,28(sp)
1000fbb8:	dc000615 	stw	r16,24(sp)
1000fbbc:	1090d504 	addi	r2,r2,17236
1000fbc0:	dfc00915 	stw	ra,36(sp)
1000fbc4:	2021883a 	mov	r16,r4
1000fbc8:	3823883a 	mov	r17,r7
1000fbcc:	14800017 	ldw	r18,0(r2)
1000fbd0:	28001426 	beq	r5,zero,1000fc24 <_wcrtomb_r+0x7c>
1000fbd4:	d9400415 	stw	r5,16(sp)
1000fbd8:	d9800515 	stw	r6,20(sp)
1000fbdc:	000b1dc0 	call	1000b1dc <__locale_charset>
1000fbe0:	d9400417 	ldw	r5,16(sp)
1000fbe4:	d9800517 	ldw	r6,20(sp)
1000fbe8:	8009883a 	mov	r4,r16
1000fbec:	dc400015 	stw	r17,0(sp)
1000fbf0:	100f883a 	mov	r7,r2
1000fbf4:	903ee83a 	callr	r18
1000fbf8:	00ffffc4 	movi	r3,-1
1000fbfc:	10c0031e 	bne	r2,r3,1000fc0c <_wcrtomb_r+0x64>
1000fc00:	88000015 	stw	zero,0(r17)
1000fc04:	00c02284 	movi	r3,138
1000fc08:	80c00015 	stw	r3,0(r16)
1000fc0c:	dfc00917 	ldw	ra,36(sp)
1000fc10:	dc800817 	ldw	r18,32(sp)
1000fc14:	dc400717 	ldw	r17,28(sp)
1000fc18:	dc000617 	ldw	r16,24(sp)
1000fc1c:	dec00a04 	addi	sp,sp,40
1000fc20:	f800283a 	ret
1000fc24:	000b1dc0 	call	1000b1dc <__locale_charset>
1000fc28:	8009883a 	mov	r4,r16
1000fc2c:	dc400015 	stw	r17,0(sp)
1000fc30:	d9400104 	addi	r5,sp,4
1000fc34:	000d883a 	mov	r6,zero
1000fc38:	100f883a 	mov	r7,r2
1000fc3c:	903ee83a 	callr	r18
1000fc40:	003fed06 	br	1000fbf8 <__alt_data_end+0xf800fbf8>

1000fc44 <wcrtomb>:
1000fc44:	defff504 	addi	sp,sp,-44
1000fc48:	dc400515 	stw	r17,20(sp)
1000fc4c:	dc000415 	stw	r16,16(sp)
1000fc50:	dfc00a15 	stw	ra,40(sp)
1000fc54:	dd400915 	stw	r21,36(sp)
1000fc58:	dd000815 	stw	r20,32(sp)
1000fc5c:	dcc00715 	stw	r19,28(sp)
1000fc60:	dc800615 	stw	r18,24(sp)
1000fc64:	2021883a 	mov	r16,r4
1000fc68:	3023883a 	mov	r17,r6
1000fc6c:	20001d26 	beq	r4,zero,1000fce4 <wcrtomb+0xa0>
1000fc70:	04840074 	movhi	r18,4097
1000fc74:	9490d104 	addi	r18,r18,17220
1000fc78:	00840074 	movhi	r2,4097
1000fc7c:	95400017 	ldw	r21,0(r18)
1000fc80:	1090d504 	addi	r2,r2,17236
1000fc84:	15000017 	ldw	r20,0(r2)
1000fc88:	2827883a 	mov	r19,r5
1000fc8c:	000b1dc0 	call	1000b1dc <__locale_charset>
1000fc90:	a809883a 	mov	r4,r21
1000fc94:	dc400015 	stw	r17,0(sp)
1000fc98:	800b883a 	mov	r5,r16
1000fc9c:	980d883a 	mov	r6,r19
1000fca0:	100f883a 	mov	r7,r2
1000fca4:	a03ee83a 	callr	r20
1000fca8:	00ffffc4 	movi	r3,-1
1000fcac:	10c0041e 	bne	r2,r3,1000fcc0 <wcrtomb+0x7c>
1000fcb0:	90c00017 	ldw	r3,0(r18)
1000fcb4:	01002284 	movi	r4,138
1000fcb8:	88000015 	stw	zero,0(r17)
1000fcbc:	19000015 	stw	r4,0(r3)
1000fcc0:	dfc00a17 	ldw	ra,40(sp)
1000fcc4:	dd400917 	ldw	r21,36(sp)
1000fcc8:	dd000817 	ldw	r20,32(sp)
1000fccc:	dcc00717 	ldw	r19,28(sp)
1000fcd0:	dc800617 	ldw	r18,24(sp)
1000fcd4:	dc400517 	ldw	r17,20(sp)
1000fcd8:	dc000417 	ldw	r16,16(sp)
1000fcdc:	dec00b04 	addi	sp,sp,44
1000fce0:	f800283a 	ret
1000fce4:	04840074 	movhi	r18,4097
1000fce8:	9490d104 	addi	r18,r18,17220
1000fcec:	00840074 	movhi	r2,4097
1000fcf0:	94c00017 	ldw	r19,0(r18)
1000fcf4:	1090d504 	addi	r2,r2,17236
1000fcf8:	14000017 	ldw	r16,0(r2)
1000fcfc:	000b1dc0 	call	1000b1dc <__locale_charset>
1000fd00:	9809883a 	mov	r4,r19
1000fd04:	dc400015 	stw	r17,0(sp)
1000fd08:	d9400104 	addi	r5,sp,4
1000fd0c:	000d883a 	mov	r6,zero
1000fd10:	100f883a 	mov	r7,r2
1000fd14:	803ee83a 	callr	r16
1000fd18:	003fe306 	br	1000fca8 <__alt_data_end+0xf800fca8>

1000fd1c <__ascii_wctomb>:
1000fd1c:	28000526 	beq	r5,zero,1000fd34 <__ascii_wctomb+0x18>
1000fd20:	00803fc4 	movi	r2,255
1000fd24:	11800536 	bltu	r2,r6,1000fd3c <__ascii_wctomb+0x20>
1000fd28:	29800005 	stb	r6,0(r5)
1000fd2c:	00800044 	movi	r2,1
1000fd30:	f800283a 	ret
1000fd34:	0005883a 	mov	r2,zero
1000fd38:	f800283a 	ret
1000fd3c:	00802284 	movi	r2,138
1000fd40:	20800015 	stw	r2,0(r4)
1000fd44:	00bfffc4 	movi	r2,-1
1000fd48:	f800283a 	ret

1000fd4c <_wctomb_r>:
1000fd4c:	00840074 	movhi	r2,4097
1000fd50:	defff904 	addi	sp,sp,-28
1000fd54:	1090d504 	addi	r2,r2,17236
1000fd58:	dfc00615 	stw	ra,24(sp)
1000fd5c:	dc400515 	stw	r17,20(sp)
1000fd60:	dc000415 	stw	r16,16(sp)
1000fd64:	3823883a 	mov	r17,r7
1000fd68:	14000017 	ldw	r16,0(r2)
1000fd6c:	d9000115 	stw	r4,4(sp)
1000fd70:	d9400215 	stw	r5,8(sp)
1000fd74:	d9800315 	stw	r6,12(sp)
1000fd78:	000b1dc0 	call	1000b1dc <__locale_charset>
1000fd7c:	d9000117 	ldw	r4,4(sp)
1000fd80:	d9400217 	ldw	r5,8(sp)
1000fd84:	d9800317 	ldw	r6,12(sp)
1000fd88:	dc400015 	stw	r17,0(sp)
1000fd8c:	100f883a 	mov	r7,r2
1000fd90:	803ee83a 	callr	r16
1000fd94:	dfc00617 	ldw	ra,24(sp)
1000fd98:	dc400517 	ldw	r17,20(sp)
1000fd9c:	dc000417 	ldw	r16,16(sp)
1000fda0:	dec00704 	addi	sp,sp,28
1000fda4:	f800283a 	ret

1000fda8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fda8:	defffe04 	addi	sp,sp,-8
1000fdac:	dfc00115 	stw	ra,4(sp)
1000fdb0:	df000015 	stw	fp,0(sp)
1000fdb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fdb8:	00840074 	movhi	r2,4097
1000fdbc:	1090db04 	addi	r2,r2,17260
1000fdc0:	10800017 	ldw	r2,0(r2)
1000fdc4:	10000526 	beq	r2,zero,1000fddc <alt_get_errno+0x34>
1000fdc8:	00840074 	movhi	r2,4097
1000fdcc:	1090db04 	addi	r2,r2,17260
1000fdd0:	10800017 	ldw	r2,0(r2)
1000fdd4:	103ee83a 	callr	r2
1000fdd8:	00000206 	br	1000fde4 <alt_get_errno+0x3c>
1000fddc:	00840074 	movhi	r2,4097
1000fde0:	1097a904 	addi	r2,r2,24228
}
1000fde4:	e037883a 	mov	sp,fp
1000fde8:	dfc00117 	ldw	ra,4(sp)
1000fdec:	df000017 	ldw	fp,0(sp)
1000fdf0:	dec00204 	addi	sp,sp,8
1000fdf4:	f800283a 	ret

1000fdf8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000fdf8:	defffb04 	addi	sp,sp,-20
1000fdfc:	dfc00415 	stw	ra,16(sp)
1000fe00:	df000315 	stw	fp,12(sp)
1000fe04:	df000304 	addi	fp,sp,12
1000fe08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000fe0c:	e0bfff17 	ldw	r2,-4(fp)
1000fe10:	10000816 	blt	r2,zero,1000fe34 <close+0x3c>
1000fe14:	e13fff17 	ldw	r4,-4(fp)
1000fe18:	01400304 	movi	r5,12
1000fe1c:	00040f80 	call	100040f8 <__mulsi3>
1000fe20:	1007883a 	mov	r3,r2
1000fe24:	00840074 	movhi	r2,4097
1000fe28:	108c5704 	addi	r2,r2,12636
1000fe2c:	1885883a 	add	r2,r3,r2
1000fe30:	00000106 	br	1000fe38 <close+0x40>
1000fe34:	0005883a 	mov	r2,zero
1000fe38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000fe3c:	e0bffd17 	ldw	r2,-12(fp)
1000fe40:	10001926 	beq	r2,zero,1000fea8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000fe44:	e0bffd17 	ldw	r2,-12(fp)
1000fe48:	10800017 	ldw	r2,0(r2)
1000fe4c:	10800417 	ldw	r2,16(r2)
1000fe50:	10000626 	beq	r2,zero,1000fe6c <close+0x74>
1000fe54:	e0bffd17 	ldw	r2,-12(fp)
1000fe58:	10800017 	ldw	r2,0(r2)
1000fe5c:	10800417 	ldw	r2,16(r2)
1000fe60:	e13ffd17 	ldw	r4,-12(fp)
1000fe64:	103ee83a 	callr	r2
1000fe68:	00000106 	br	1000fe70 <close+0x78>
1000fe6c:	0005883a 	mov	r2,zero
1000fe70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000fe74:	e13fff17 	ldw	r4,-4(fp)
1000fe78:	001051c0 	call	1001051c <alt_release_fd>
    if (rval < 0)
1000fe7c:	e0bffe17 	ldw	r2,-8(fp)
1000fe80:	1000070e 	bge	r2,zero,1000fea0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000fe84:	000fda80 	call	1000fda8 <alt_get_errno>
1000fe88:	1007883a 	mov	r3,r2
1000fe8c:	e0bffe17 	ldw	r2,-8(fp)
1000fe90:	0085c83a 	sub	r2,zero,r2
1000fe94:	18800015 	stw	r2,0(r3)
      return -1;
1000fe98:	00bfffc4 	movi	r2,-1
1000fe9c:	00000706 	br	1000febc <close+0xc4>
    }
    return 0;
1000fea0:	0005883a 	mov	r2,zero
1000fea4:	00000506 	br	1000febc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fea8:	000fda80 	call	1000fda8 <alt_get_errno>
1000feac:	1007883a 	mov	r3,r2
1000feb0:	00801444 	movi	r2,81
1000feb4:	18800015 	stw	r2,0(r3)
    return -1;
1000feb8:	00bfffc4 	movi	r2,-1
  }
}
1000febc:	e037883a 	mov	sp,fp
1000fec0:	dfc00117 	ldw	ra,4(sp)
1000fec4:	df000017 	ldw	fp,0(sp)
1000fec8:	dec00204 	addi	sp,sp,8
1000fecc:	f800283a 	ret

1000fed0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fed0:	defffc04 	addi	sp,sp,-16
1000fed4:	df000315 	stw	fp,12(sp)
1000fed8:	df000304 	addi	fp,sp,12
1000fedc:	e13ffd15 	stw	r4,-12(fp)
1000fee0:	e17ffe15 	stw	r5,-8(fp)
1000fee4:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fee8:	e0bfff17 	ldw	r2,-4(fp)
}
1000feec:	e037883a 	mov	sp,fp
1000fef0:	df000017 	ldw	fp,0(sp)
1000fef4:	dec00104 	addi	sp,sp,4
1000fef8:	f800283a 	ret

1000fefc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fefc:	defffe04 	addi	sp,sp,-8
1000ff00:	dfc00115 	stw	ra,4(sp)
1000ff04:	df000015 	stw	fp,0(sp)
1000ff08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ff0c:	00840074 	movhi	r2,4097
1000ff10:	1090db04 	addi	r2,r2,17260
1000ff14:	10800017 	ldw	r2,0(r2)
1000ff18:	10000526 	beq	r2,zero,1000ff30 <alt_get_errno+0x34>
1000ff1c:	00840074 	movhi	r2,4097
1000ff20:	1090db04 	addi	r2,r2,17260
1000ff24:	10800017 	ldw	r2,0(r2)
1000ff28:	103ee83a 	callr	r2
1000ff2c:	00000206 	br	1000ff38 <alt_get_errno+0x3c>
1000ff30:	00840074 	movhi	r2,4097
1000ff34:	1097a904 	addi	r2,r2,24228
}
1000ff38:	e037883a 	mov	sp,fp
1000ff3c:	dfc00117 	ldw	ra,4(sp)
1000ff40:	df000017 	ldw	fp,0(sp)
1000ff44:	dec00204 	addi	sp,sp,8
1000ff48:	f800283a 	ret

1000ff4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000ff4c:	defffb04 	addi	sp,sp,-20
1000ff50:	dfc00415 	stw	ra,16(sp)
1000ff54:	df000315 	stw	fp,12(sp)
1000ff58:	df000304 	addi	fp,sp,12
1000ff5c:	e13ffe15 	stw	r4,-8(fp)
1000ff60:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ff64:	e0bffe17 	ldw	r2,-8(fp)
1000ff68:	10000816 	blt	r2,zero,1000ff8c <fstat+0x40>
1000ff6c:	e13ffe17 	ldw	r4,-8(fp)
1000ff70:	01400304 	movi	r5,12
1000ff74:	00040f80 	call	100040f8 <__mulsi3>
1000ff78:	1007883a 	mov	r3,r2
1000ff7c:	00840074 	movhi	r2,4097
1000ff80:	108c5704 	addi	r2,r2,12636
1000ff84:	1885883a 	add	r2,r3,r2
1000ff88:	00000106 	br	1000ff90 <fstat+0x44>
1000ff8c:	0005883a 	mov	r2,zero
1000ff90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000ff94:	e0bffd17 	ldw	r2,-12(fp)
1000ff98:	10001026 	beq	r2,zero,1000ffdc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000ff9c:	e0bffd17 	ldw	r2,-12(fp)
1000ffa0:	10800017 	ldw	r2,0(r2)
1000ffa4:	10800817 	ldw	r2,32(r2)
1000ffa8:	10000726 	beq	r2,zero,1000ffc8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000ffac:	e0bffd17 	ldw	r2,-12(fp)
1000ffb0:	10800017 	ldw	r2,0(r2)
1000ffb4:	10800817 	ldw	r2,32(r2)
1000ffb8:	e13ffd17 	ldw	r4,-12(fp)
1000ffbc:	e17fff17 	ldw	r5,-4(fp)
1000ffc0:	103ee83a 	callr	r2
1000ffc4:	00000a06 	br	1000fff0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000ffc8:	e0bfff17 	ldw	r2,-4(fp)
1000ffcc:	00c80004 	movi	r3,8192
1000ffd0:	10c00115 	stw	r3,4(r2)
      return 0;
1000ffd4:	0005883a 	mov	r2,zero
1000ffd8:	00000506 	br	1000fff0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ffdc:	000fefc0 	call	1000fefc <alt_get_errno>
1000ffe0:	1007883a 	mov	r3,r2
1000ffe4:	00801444 	movi	r2,81
1000ffe8:	18800015 	stw	r2,0(r3)
    return -1;
1000ffec:	00bfffc4 	movi	r2,-1
  }
}
1000fff0:	e037883a 	mov	sp,fp
1000fff4:	dfc00117 	ldw	ra,4(sp)
1000fff8:	df000017 	ldw	fp,0(sp)
1000fffc:	dec00204 	addi	sp,sp,8
10010000:	f800283a 	ret

10010004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010004:	defffe04 	addi	sp,sp,-8
10010008:	dfc00115 	stw	ra,4(sp)
1001000c:	df000015 	stw	fp,0(sp)
10010010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010014:	00840074 	movhi	r2,4097
10010018:	1090db04 	addi	r2,r2,17260
1001001c:	10800017 	ldw	r2,0(r2)
10010020:	10000526 	beq	r2,zero,10010038 <alt_get_errno+0x34>
10010024:	00840074 	movhi	r2,4097
10010028:	1090db04 	addi	r2,r2,17260
1001002c:	10800017 	ldw	r2,0(r2)
10010030:	103ee83a 	callr	r2
10010034:	00000206 	br	10010040 <alt_get_errno+0x3c>
10010038:	00840074 	movhi	r2,4097
1001003c:	1097a904 	addi	r2,r2,24228
}
10010040:	e037883a 	mov	sp,fp
10010044:	dfc00117 	ldw	ra,4(sp)
10010048:	df000017 	ldw	fp,0(sp)
1001004c:	dec00204 	addi	sp,sp,8
10010050:	f800283a 	ret

10010054 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10010054:	deffed04 	addi	sp,sp,-76
10010058:	dfc01215 	stw	ra,72(sp)
1001005c:	df001115 	stw	fp,68(sp)
10010060:	df001104 	addi	fp,sp,68
10010064:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010068:	e0bfff17 	ldw	r2,-4(fp)
1001006c:	10000816 	blt	r2,zero,10010090 <isatty+0x3c>
10010070:	e13fff17 	ldw	r4,-4(fp)
10010074:	01400304 	movi	r5,12
10010078:	00040f80 	call	100040f8 <__mulsi3>
1001007c:	1007883a 	mov	r3,r2
10010080:	00840074 	movhi	r2,4097
10010084:	108c5704 	addi	r2,r2,12636
10010088:	1885883a 	add	r2,r3,r2
1001008c:	00000106 	br	10010094 <isatty+0x40>
10010090:	0005883a 	mov	r2,zero
10010094:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10010098:	e0bfef17 	ldw	r2,-68(fp)
1001009c:	10000e26 	beq	r2,zero,100100d8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100100a0:	e0bfef17 	ldw	r2,-68(fp)
100100a4:	10800017 	ldw	r2,0(r2)
100100a8:	10800817 	ldw	r2,32(r2)
100100ac:	1000021e 	bne	r2,zero,100100b8 <isatty+0x64>
    {
      return 1;
100100b0:	00800044 	movi	r2,1
100100b4:	00000d06 	br	100100ec <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100100b8:	e0bff004 	addi	r2,fp,-64
100100bc:	e13fff17 	ldw	r4,-4(fp)
100100c0:	100b883a 	mov	r5,r2
100100c4:	000ff4c0 	call	1000ff4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100100c8:	e0bff117 	ldw	r2,-60(fp)
100100cc:	10880020 	cmpeqi	r2,r2,8192
100100d0:	10803fcc 	andi	r2,r2,255
100100d4:	00000506 	br	100100ec <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100100d8:	00100040 	call	10010004 <alt_get_errno>
100100dc:	1007883a 	mov	r3,r2
100100e0:	00801444 	movi	r2,81
100100e4:	18800015 	stw	r2,0(r3)
    return 0;
100100e8:	0005883a 	mov	r2,zero
  }
}
100100ec:	e037883a 	mov	sp,fp
100100f0:	dfc00117 	ldw	ra,4(sp)
100100f4:	df000017 	ldw	fp,0(sp)
100100f8:	dec00204 	addi	sp,sp,8
100100fc:	f800283a 	ret

10010100 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10010100:	defffc04 	addi	sp,sp,-16
10010104:	df000315 	stw	fp,12(sp)
10010108:	df000304 	addi	fp,sp,12
1001010c:	e13ffd15 	stw	r4,-12(fp)
10010110:	e17ffe15 	stw	r5,-8(fp)
10010114:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10010118:	e0fffe17 	ldw	r3,-8(fp)
1001011c:	e0bffd17 	ldw	r2,-12(fp)
10010120:	18800c26 	beq	r3,r2,10010154 <alt_load_section+0x54>
  {
    while( to != end )
10010124:	00000806 	br	10010148 <alt_load_section+0x48>
    {
      *to++ = *from++;
10010128:	e0bffe17 	ldw	r2,-8(fp)
1001012c:	10c00104 	addi	r3,r2,4
10010130:	e0fffe15 	stw	r3,-8(fp)
10010134:	e0fffd17 	ldw	r3,-12(fp)
10010138:	19000104 	addi	r4,r3,4
1001013c:	e13ffd15 	stw	r4,-12(fp)
10010140:	18c00017 	ldw	r3,0(r3)
10010144:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10010148:	e0fffe17 	ldw	r3,-8(fp)
1001014c:	e0bfff17 	ldw	r2,-4(fp)
10010150:	18bff51e 	bne	r3,r2,10010128 <__alt_data_end+0xf8010128>
    {
      *to++ = *from++;
    }
  }
}
10010154:	e037883a 	mov	sp,fp
10010158:	df000017 	ldw	fp,0(sp)
1001015c:	dec00104 	addi	sp,sp,4
10010160:	f800283a 	ret

10010164 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10010164:	defffe04 	addi	sp,sp,-8
10010168:	dfc00115 	stw	ra,4(sp)
1001016c:	df000015 	stw	fp,0(sp)
10010170:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10010174:	01040074 	movhi	r4,4097
10010178:	2110e004 	addi	r4,r4,17280
1001017c:	01440074 	movhi	r5,4097
10010180:	294a2404 	addi	r5,r5,10384
10010184:	01840074 	movhi	r6,4097
10010188:	3190e004 	addi	r6,r6,17280
1001018c:	00101000 	call	10010100 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10010190:	01040034 	movhi	r4,4096
10010194:	21000804 	addi	r4,r4,32
10010198:	01440034 	movhi	r5,4096
1001019c:	29400804 	addi	r5,r5,32
100101a0:	01840034 	movhi	r6,4096
100101a4:	31808b04 	addi	r6,r6,556
100101a8:	00101000 	call	10010100 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100101ac:	01040074 	movhi	r4,4097
100101b0:	21094004 	addi	r4,r4,9472
100101b4:	01440074 	movhi	r5,4097
100101b8:	29494004 	addi	r5,r5,9472
100101bc:	01840074 	movhi	r6,4097
100101c0:	318a2404 	addi	r6,r6,10384
100101c4:	00101000 	call	10010100 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100101c8:	00113dc0 	call	100113dc <alt_dcache_flush_all>
  alt_icache_flush_all();
100101cc:	00115a40 	call	100115a4 <alt_icache_flush_all>
}
100101d0:	e037883a 	mov	sp,fp
100101d4:	dfc00117 	ldw	ra,4(sp)
100101d8:	df000017 	ldw	fp,0(sp)
100101dc:	dec00204 	addi	sp,sp,8
100101e0:	f800283a 	ret

100101e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100101e4:	defffe04 	addi	sp,sp,-8
100101e8:	dfc00115 	stw	ra,4(sp)
100101ec:	df000015 	stw	fp,0(sp)
100101f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100101f4:	00840074 	movhi	r2,4097
100101f8:	1090db04 	addi	r2,r2,17260
100101fc:	10800017 	ldw	r2,0(r2)
10010200:	10000526 	beq	r2,zero,10010218 <alt_get_errno+0x34>
10010204:	00840074 	movhi	r2,4097
10010208:	1090db04 	addi	r2,r2,17260
1001020c:	10800017 	ldw	r2,0(r2)
10010210:	103ee83a 	callr	r2
10010214:	00000206 	br	10010220 <alt_get_errno+0x3c>
10010218:	00840074 	movhi	r2,4097
1001021c:	1097a904 	addi	r2,r2,24228
}
10010220:	e037883a 	mov	sp,fp
10010224:	dfc00117 	ldw	ra,4(sp)
10010228:	df000017 	ldw	fp,0(sp)
1001022c:	dec00204 	addi	sp,sp,8
10010230:	f800283a 	ret

10010234 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010234:	defff904 	addi	sp,sp,-28
10010238:	dfc00615 	stw	ra,24(sp)
1001023c:	df000515 	stw	fp,20(sp)
10010240:	df000504 	addi	fp,sp,20
10010244:	e13ffd15 	stw	r4,-12(fp)
10010248:	e17ffe15 	stw	r5,-8(fp)
1001024c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010250:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010254:	e0bffd17 	ldw	r2,-12(fp)
10010258:	10000816 	blt	r2,zero,1001027c <lseek+0x48>
1001025c:	e13ffd17 	ldw	r4,-12(fp)
10010260:	01400304 	movi	r5,12
10010264:	00040f80 	call	100040f8 <__mulsi3>
10010268:	1007883a 	mov	r3,r2
1001026c:	00840074 	movhi	r2,4097
10010270:	108c5704 	addi	r2,r2,12636
10010274:	1885883a 	add	r2,r3,r2
10010278:	00000106 	br	10010280 <lseek+0x4c>
1001027c:	0005883a 	mov	r2,zero
10010280:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010284:	e0bffc17 	ldw	r2,-16(fp)
10010288:	10001026 	beq	r2,zero,100102cc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1001028c:	e0bffc17 	ldw	r2,-16(fp)
10010290:	10800017 	ldw	r2,0(r2)
10010294:	10800717 	ldw	r2,28(r2)
10010298:	10000926 	beq	r2,zero,100102c0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1001029c:	e0bffc17 	ldw	r2,-16(fp)
100102a0:	10800017 	ldw	r2,0(r2)
100102a4:	10800717 	ldw	r2,28(r2)
100102a8:	e13ffc17 	ldw	r4,-16(fp)
100102ac:	e17ffe17 	ldw	r5,-8(fp)
100102b0:	e1bfff17 	ldw	r6,-4(fp)
100102b4:	103ee83a 	callr	r2
100102b8:	e0bffb15 	stw	r2,-20(fp)
100102bc:	00000506 	br	100102d4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100102c0:	00bfde84 	movi	r2,-134
100102c4:	e0bffb15 	stw	r2,-20(fp)
100102c8:	00000206 	br	100102d4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100102cc:	00bfebc4 	movi	r2,-81
100102d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100102d4:	e0bffb17 	ldw	r2,-20(fp)
100102d8:	1000070e 	bge	r2,zero,100102f8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100102dc:	00101e40 	call	100101e4 <alt_get_errno>
100102e0:	1007883a 	mov	r3,r2
100102e4:	e0bffb17 	ldw	r2,-20(fp)
100102e8:	0085c83a 	sub	r2,zero,r2
100102ec:	18800015 	stw	r2,0(r3)
    rc = -1;
100102f0:	00bfffc4 	movi	r2,-1
100102f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100102f8:	e0bffb17 	ldw	r2,-20(fp)
}
100102fc:	e037883a 	mov	sp,fp
10010300:	dfc00117 	ldw	ra,4(sp)
10010304:	df000017 	ldw	fp,0(sp)
10010308:	dec00204 	addi	sp,sp,8
1001030c:	f800283a 	ret

10010310 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010310:	defffd04 	addi	sp,sp,-12
10010314:	dfc00215 	stw	ra,8(sp)
10010318:	df000115 	stw	fp,4(sp)
1001031c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010320:	0009883a 	mov	r4,zero
10010324:	00107d40 	call	100107d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010328:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001032c:	00108080 	call	10010808 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010330:	01040074 	movhi	r4,4097
10010334:	210a1a04 	addi	r4,r4,10344
10010338:	01440074 	movhi	r5,4097
1001033c:	294a1a04 	addi	r5,r5,10344
10010340:	01840074 	movhi	r6,4097
10010344:	318a1a04 	addi	r6,r6,10344
10010348:	00119700 	call	10011970 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1001034c:	00114ec0 	call	100114ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010350:	01040074 	movhi	r4,4097
10010354:	21055204 	addi	r4,r4,5448
10010358:	001215c0 	call	1001215c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001035c:	d126db17 	ldw	r4,-25748(gp)
10010360:	d0e6dc17 	ldw	r3,-25744(gp)
10010364:	d0a6dd17 	ldw	r2,-25740(gp)
10010368:	180b883a 	mov	r5,r3
1001036c:	100d883a 	mov	r6,r2
10010370:	00002680 	call	10000268 <main>
10010374:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10010378:	01000044 	movi	r4,1
1001037c:	000fdf80 	call	1000fdf8 <close>
  exit (result);
10010380:	e13fff17 	ldw	r4,-4(fp)
10010384:	00121700 	call	10012170 <exit>

10010388 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10010388:	defffe04 	addi	sp,sp,-8
1001038c:	df000115 	stw	fp,4(sp)
10010390:	df000104 	addi	fp,sp,4
10010394:	e13fff15 	stw	r4,-4(fp)
}
10010398:	e037883a 	mov	sp,fp
1001039c:	df000017 	ldw	fp,0(sp)
100103a0:	dec00104 	addi	sp,sp,4
100103a4:	f800283a 	ret

100103a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100103a8:	defffe04 	addi	sp,sp,-8
100103ac:	df000115 	stw	fp,4(sp)
100103b0:	df000104 	addi	fp,sp,4
100103b4:	e13fff15 	stw	r4,-4(fp)
}
100103b8:	e037883a 	mov	sp,fp
100103bc:	df000017 	ldw	fp,0(sp)
100103c0:	dec00104 	addi	sp,sp,4
100103c4:	f800283a 	ret

100103c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100103c8:	defffe04 	addi	sp,sp,-8
100103cc:	dfc00115 	stw	ra,4(sp)
100103d0:	df000015 	stw	fp,0(sp)
100103d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100103d8:	00840074 	movhi	r2,4097
100103dc:	1090db04 	addi	r2,r2,17260
100103e0:	10800017 	ldw	r2,0(r2)
100103e4:	10000526 	beq	r2,zero,100103fc <alt_get_errno+0x34>
100103e8:	00840074 	movhi	r2,4097
100103ec:	1090db04 	addi	r2,r2,17260
100103f0:	10800017 	ldw	r2,0(r2)
100103f4:	103ee83a 	callr	r2
100103f8:	00000206 	br	10010404 <alt_get_errno+0x3c>
100103fc:	00840074 	movhi	r2,4097
10010400:	1097a904 	addi	r2,r2,24228
}
10010404:	e037883a 	mov	sp,fp
10010408:	dfc00117 	ldw	ra,4(sp)
1001040c:	df000017 	ldw	fp,0(sp)
10010410:	dec00204 	addi	sp,sp,8
10010414:	f800283a 	ret

10010418 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010418:	defff904 	addi	sp,sp,-28
1001041c:	dfc00615 	stw	ra,24(sp)
10010420:	df000515 	stw	fp,20(sp)
10010424:	df000504 	addi	fp,sp,20
10010428:	e13ffd15 	stw	r4,-12(fp)
1001042c:	e17ffe15 	stw	r5,-8(fp)
10010430:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010434:	e0bffd17 	ldw	r2,-12(fp)
10010438:	10000816 	blt	r2,zero,1001045c <read+0x44>
1001043c:	e13ffd17 	ldw	r4,-12(fp)
10010440:	01400304 	movi	r5,12
10010444:	00040f80 	call	100040f8 <__mulsi3>
10010448:	1007883a 	mov	r3,r2
1001044c:	00840074 	movhi	r2,4097
10010450:	108c5704 	addi	r2,r2,12636
10010454:	1885883a 	add	r2,r3,r2
10010458:	00000106 	br	10010460 <read+0x48>
1001045c:	0005883a 	mov	r2,zero
10010460:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010464:	e0bffb17 	ldw	r2,-20(fp)
10010468:	10002226 	beq	r2,zero,100104f4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001046c:	e0bffb17 	ldw	r2,-20(fp)
10010470:	10800217 	ldw	r2,8(r2)
10010474:	108000cc 	andi	r2,r2,3
10010478:	10800060 	cmpeqi	r2,r2,1
1001047c:	1000181e 	bne	r2,zero,100104e0 <read+0xc8>
        (fd->dev->read))
10010480:	e0bffb17 	ldw	r2,-20(fp)
10010484:	10800017 	ldw	r2,0(r2)
10010488:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001048c:	10001426 	beq	r2,zero,100104e0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10010490:	e0bffb17 	ldw	r2,-20(fp)
10010494:	10800017 	ldw	r2,0(r2)
10010498:	10800517 	ldw	r2,20(r2)
1001049c:	e0ffff17 	ldw	r3,-4(fp)
100104a0:	e13ffb17 	ldw	r4,-20(fp)
100104a4:	e17ffe17 	ldw	r5,-8(fp)
100104a8:	180d883a 	mov	r6,r3
100104ac:	103ee83a 	callr	r2
100104b0:	e0bffc15 	stw	r2,-16(fp)
100104b4:	e0bffc17 	ldw	r2,-16(fp)
100104b8:	1000070e 	bge	r2,zero,100104d8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100104bc:	00103c80 	call	100103c8 <alt_get_errno>
100104c0:	1007883a 	mov	r3,r2
100104c4:	e0bffc17 	ldw	r2,-16(fp)
100104c8:	0085c83a 	sub	r2,zero,r2
100104cc:	18800015 	stw	r2,0(r3)
          return -1;
100104d0:	00bfffc4 	movi	r2,-1
100104d4:	00000c06 	br	10010508 <read+0xf0>
        }
        return rval;
100104d8:	e0bffc17 	ldw	r2,-16(fp)
100104dc:	00000a06 	br	10010508 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100104e0:	00103c80 	call	100103c8 <alt_get_errno>
100104e4:	1007883a 	mov	r3,r2
100104e8:	00800344 	movi	r2,13
100104ec:	18800015 	stw	r2,0(r3)
100104f0:	00000406 	br	10010504 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100104f4:	00103c80 	call	100103c8 <alt_get_errno>
100104f8:	1007883a 	mov	r3,r2
100104fc:	00801444 	movi	r2,81
10010500:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010504:	00bfffc4 	movi	r2,-1
}
10010508:	e037883a 	mov	sp,fp
1001050c:	dfc00117 	ldw	ra,4(sp)
10010510:	df000017 	ldw	fp,0(sp)
10010514:	dec00204 	addi	sp,sp,8
10010518:	f800283a 	ret

1001051c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001051c:	defffc04 	addi	sp,sp,-16
10010520:	dfc00315 	stw	ra,12(sp)
10010524:	df000215 	stw	fp,8(sp)
10010528:	dc000115 	stw	r16,4(sp)
1001052c:	df000204 	addi	fp,sp,8
10010530:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010534:	e0bffe17 	ldw	r2,-8(fp)
10010538:	108000d0 	cmplti	r2,r2,3
1001053c:	1000111e 	bne	r2,zero,10010584 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010540:	04040074 	movhi	r16,4097
10010544:	840c5704 	addi	r16,r16,12636
10010548:	e0bffe17 	ldw	r2,-8(fp)
1001054c:	1009883a 	mov	r4,r2
10010550:	01400304 	movi	r5,12
10010554:	00040f80 	call	100040f8 <__mulsi3>
10010558:	8085883a 	add	r2,r16,r2
1001055c:	10800204 	addi	r2,r2,8
10010560:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010564:	04040074 	movhi	r16,4097
10010568:	840c5704 	addi	r16,r16,12636
1001056c:	e0bffe17 	ldw	r2,-8(fp)
10010570:	1009883a 	mov	r4,r2
10010574:	01400304 	movi	r5,12
10010578:	00040f80 	call	100040f8 <__mulsi3>
1001057c:	8085883a 	add	r2,r16,r2
10010580:	10000015 	stw	zero,0(r2)
  }
}
10010584:	e6ffff04 	addi	sp,fp,-4
10010588:	dfc00217 	ldw	ra,8(sp)
1001058c:	df000117 	ldw	fp,4(sp)
10010590:	dc000017 	ldw	r16,0(sp)
10010594:	dec00304 	addi	sp,sp,12
10010598:	f800283a 	ret

1001059c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1001059c:	defff904 	addi	sp,sp,-28
100105a0:	df000615 	stw	fp,24(sp)
100105a4:	df000604 	addi	fp,sp,24
100105a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105ac:	0005303a 	rdctl	r2,status
100105b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105b4:	e0fffc17 	ldw	r3,-16(fp)
100105b8:	00bfff84 	movi	r2,-2
100105bc:	1884703a 	and	r2,r3,r2
100105c0:	1001703a 	wrctl	status,r2
  
  return context;
100105c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100105c8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100105cc:	d0a00d17 	ldw	r2,-32716(gp)
100105d0:	10c000c4 	addi	r3,r2,3
100105d4:	00bfff04 	movi	r2,-4
100105d8:	1884703a 	and	r2,r3,r2
100105dc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100105e0:	d0e00d17 	ldw	r3,-32716(gp)
100105e4:	e0bfff17 	ldw	r2,-4(fp)
100105e8:	1887883a 	add	r3,r3,r2
100105ec:	00860034 	movhi	r2,6144
100105f0:	10800004 	addi	r2,r2,0
100105f4:	10c0062e 	bgeu	r2,r3,10010610 <sbrk+0x74>
100105f8:	e0bffa17 	ldw	r2,-24(fp)
100105fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010600:	e0bffd17 	ldw	r2,-12(fp)
10010604:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010608:	00bfffc4 	movi	r2,-1
1001060c:	00000b06 	br	1001063c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010610:	d0a00d17 	ldw	r2,-32716(gp)
10010614:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010618:	d0e00d17 	ldw	r3,-32716(gp)
1001061c:	e0bfff17 	ldw	r2,-4(fp)
10010620:	1885883a 	add	r2,r3,r2
10010624:	d0a00d15 	stw	r2,-32716(gp)
10010628:	e0bffa17 	ldw	r2,-24(fp)
1001062c:	e0bffe15 	stw	r2,-8(fp)
10010630:	e0bffe17 	ldw	r2,-8(fp)
10010634:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010638:	e0bffb17 	ldw	r2,-20(fp)
} 
1001063c:	e037883a 	mov	sp,fp
10010640:	df000017 	ldw	fp,0(sp)
10010644:	dec00104 	addi	sp,sp,4
10010648:	f800283a 	ret

1001064c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001064c:	defffe04 	addi	sp,sp,-8
10010650:	dfc00115 	stw	ra,4(sp)
10010654:	df000015 	stw	fp,0(sp)
10010658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001065c:	00840074 	movhi	r2,4097
10010660:	1090db04 	addi	r2,r2,17260
10010664:	10800017 	ldw	r2,0(r2)
10010668:	10000526 	beq	r2,zero,10010680 <alt_get_errno+0x34>
1001066c:	00840074 	movhi	r2,4097
10010670:	1090db04 	addi	r2,r2,17260
10010674:	10800017 	ldw	r2,0(r2)
10010678:	103ee83a 	callr	r2
1001067c:	00000206 	br	10010688 <alt_get_errno+0x3c>
10010680:	00840074 	movhi	r2,4097
10010684:	1097a904 	addi	r2,r2,24228
}
10010688:	e037883a 	mov	sp,fp
1001068c:	dfc00117 	ldw	ra,4(sp)
10010690:	df000017 	ldw	fp,0(sp)
10010694:	dec00204 	addi	sp,sp,8
10010698:	f800283a 	ret

1001069c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1001069c:	defff904 	addi	sp,sp,-28
100106a0:	dfc00615 	stw	ra,24(sp)
100106a4:	df000515 	stw	fp,20(sp)
100106a8:	df000504 	addi	fp,sp,20
100106ac:	e13ffd15 	stw	r4,-12(fp)
100106b0:	e17ffe15 	stw	r5,-8(fp)
100106b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100106b8:	e0bffd17 	ldw	r2,-12(fp)
100106bc:	10000816 	blt	r2,zero,100106e0 <write+0x44>
100106c0:	e13ffd17 	ldw	r4,-12(fp)
100106c4:	01400304 	movi	r5,12
100106c8:	00040f80 	call	100040f8 <__mulsi3>
100106cc:	1007883a 	mov	r3,r2
100106d0:	00840074 	movhi	r2,4097
100106d4:	108c5704 	addi	r2,r2,12636
100106d8:	1885883a 	add	r2,r3,r2
100106dc:	00000106 	br	100106e4 <write+0x48>
100106e0:	0005883a 	mov	r2,zero
100106e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100106e8:	e0bffb17 	ldw	r2,-20(fp)
100106ec:	10002126 	beq	r2,zero,10010774 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100106f0:	e0bffb17 	ldw	r2,-20(fp)
100106f4:	10800217 	ldw	r2,8(r2)
100106f8:	108000cc 	andi	r2,r2,3
100106fc:	10001826 	beq	r2,zero,10010760 <write+0xc4>
10010700:	e0bffb17 	ldw	r2,-20(fp)
10010704:	10800017 	ldw	r2,0(r2)
10010708:	10800617 	ldw	r2,24(r2)
1001070c:	10001426 	beq	r2,zero,10010760 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010710:	e0bffb17 	ldw	r2,-20(fp)
10010714:	10800017 	ldw	r2,0(r2)
10010718:	10800617 	ldw	r2,24(r2)
1001071c:	e0ffff17 	ldw	r3,-4(fp)
10010720:	e13ffb17 	ldw	r4,-20(fp)
10010724:	e17ffe17 	ldw	r5,-8(fp)
10010728:	180d883a 	mov	r6,r3
1001072c:	103ee83a 	callr	r2
10010730:	e0bffc15 	stw	r2,-16(fp)
10010734:	e0bffc17 	ldw	r2,-16(fp)
10010738:	1000070e 	bge	r2,zero,10010758 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001073c:	001064c0 	call	1001064c <alt_get_errno>
10010740:	1007883a 	mov	r3,r2
10010744:	e0bffc17 	ldw	r2,-16(fp)
10010748:	0085c83a 	sub	r2,zero,r2
1001074c:	18800015 	stw	r2,0(r3)
        return -1;
10010750:	00bfffc4 	movi	r2,-1
10010754:	00000c06 	br	10010788 <write+0xec>
      }
      return rval;
10010758:	e0bffc17 	ldw	r2,-16(fp)
1001075c:	00000a06 	br	10010788 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010760:	001064c0 	call	1001064c <alt_get_errno>
10010764:	1007883a 	mov	r3,r2
10010768:	00800344 	movi	r2,13
1001076c:	18800015 	stw	r2,0(r3)
10010770:	00000406 	br	10010784 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010774:	001064c0 	call	1001064c <alt_get_errno>
10010778:	1007883a 	mov	r3,r2
1001077c:	00801444 	movi	r2,81
10010780:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010784:	00bfffc4 	movi	r2,-1
}
10010788:	e037883a 	mov	sp,fp
1001078c:	dfc00117 	ldw	ra,4(sp)
10010790:	df000017 	ldw	fp,0(sp)
10010794:	dec00204 	addi	sp,sp,8
10010798:	f800283a 	ret

1001079c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1001079c:	defffd04 	addi	sp,sp,-12
100107a0:	dfc00215 	stw	ra,8(sp)
100107a4:	df000115 	stw	fp,4(sp)
100107a8:	df000104 	addi	fp,sp,4
100107ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100107b0:	e13fff17 	ldw	r4,-4(fp)
100107b4:	01440074 	movhi	r5,4097
100107b8:	2950d804 	addi	r5,r5,17248
100107bc:	00114480 	call	10011448 <alt_dev_llist_insert>
}
100107c0:	e037883a 	mov	sp,fp
100107c4:	dfc00117 	ldw	ra,4(sp)
100107c8:	df000017 	ldw	fp,0(sp)
100107cc:	dec00204 	addi	sp,sp,8
100107d0:	f800283a 	ret

100107d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100107d4:	defffd04 	addi	sp,sp,-12
100107d8:	dfc00215 	stw	ra,8(sp)
100107dc:	df000115 	stw	fp,4(sp)
100107e0:	df000104 	addi	fp,sp,4
100107e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
100107e8:	0011e280 	call	10011e28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100107ec:	00800044 	movi	r2,1
100107f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100107f4:	e037883a 	mov	sp,fp
100107f8:	dfc00117 	ldw	ra,4(sp)
100107fc:	df000017 	ldw	fp,0(sp)
10010800:	dec00204 	addi	sp,sp,8
10010804:	f800283a 	ret

10010808 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010808:	defffe04 	addi	sp,sp,-8
1001080c:	dfc00115 	stw	ra,4(sp)
10010810:	df000015 	stw	fp,0(sp)
10010814:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010818:	01040074 	movhi	r4,4097
1001081c:	210cc104 	addi	r4,r4,13060
10010820:	000b883a 	mov	r5,zero
10010824:	01800144 	movi	r6,5
10010828:	00109b40 	call	100109b4 <altera_avalon_jtag_uart_init>
1001082c:	01040074 	movhi	r4,4097
10010830:	210cb704 	addi	r4,r4,13020
10010834:	001079c0 	call	1001079c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010838:	0001883a 	nop
}
1001083c:	e037883a 	mov	sp,fp
10010840:	dfc00117 	ldw	ra,4(sp)
10010844:	df000017 	ldw	fp,0(sp)
10010848:	dec00204 	addi	sp,sp,8
1001084c:	f800283a 	ret

10010850 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010850:	defffa04 	addi	sp,sp,-24
10010854:	dfc00515 	stw	ra,20(sp)
10010858:	df000415 	stw	fp,16(sp)
1001085c:	df000404 	addi	fp,sp,16
10010860:	e13ffd15 	stw	r4,-12(fp)
10010864:	e17ffe15 	stw	r5,-8(fp)
10010868:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001086c:	e0bffd17 	ldw	r2,-12(fp)
10010870:	10800017 	ldw	r2,0(r2)
10010874:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010878:	e0bffc17 	ldw	r2,-16(fp)
1001087c:	10c00a04 	addi	r3,r2,40
10010880:	e0bffd17 	ldw	r2,-12(fp)
10010884:	10800217 	ldw	r2,8(r2)
10010888:	1809883a 	mov	r4,r3
1001088c:	e17ffe17 	ldw	r5,-8(fp)
10010890:	e1bfff17 	ldw	r6,-4(fp)
10010894:	100f883a 	mov	r7,r2
10010898:	0010e780 	call	10010e78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1001089c:	e037883a 	mov	sp,fp
100108a0:	dfc00117 	ldw	ra,4(sp)
100108a4:	df000017 	ldw	fp,0(sp)
100108a8:	dec00204 	addi	sp,sp,8
100108ac:	f800283a 	ret

100108b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100108b0:	defffa04 	addi	sp,sp,-24
100108b4:	dfc00515 	stw	ra,20(sp)
100108b8:	df000415 	stw	fp,16(sp)
100108bc:	df000404 	addi	fp,sp,16
100108c0:	e13ffd15 	stw	r4,-12(fp)
100108c4:	e17ffe15 	stw	r5,-8(fp)
100108c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100108cc:	e0bffd17 	ldw	r2,-12(fp)
100108d0:	10800017 	ldw	r2,0(r2)
100108d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100108d8:	e0bffc17 	ldw	r2,-16(fp)
100108dc:	10c00a04 	addi	r3,r2,40
100108e0:	e0bffd17 	ldw	r2,-12(fp)
100108e4:	10800217 	ldw	r2,8(r2)
100108e8:	1809883a 	mov	r4,r3
100108ec:	e17ffe17 	ldw	r5,-8(fp)
100108f0:	e1bfff17 	ldw	r6,-4(fp)
100108f4:	100f883a 	mov	r7,r2
100108f8:	00110840 	call	10011084 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100108fc:	e037883a 	mov	sp,fp
10010900:	dfc00117 	ldw	ra,4(sp)
10010904:	df000017 	ldw	fp,0(sp)
10010908:	dec00204 	addi	sp,sp,8
1001090c:	f800283a 	ret

10010910 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010910:	defffc04 	addi	sp,sp,-16
10010914:	dfc00315 	stw	ra,12(sp)
10010918:	df000215 	stw	fp,8(sp)
1001091c:	df000204 	addi	fp,sp,8
10010920:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010924:	e0bfff17 	ldw	r2,-4(fp)
10010928:	10800017 	ldw	r2,0(r2)
1001092c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010930:	e0bffe17 	ldw	r2,-8(fp)
10010934:	10c00a04 	addi	r3,r2,40
10010938:	e0bfff17 	ldw	r2,-4(fp)
1001093c:	10800217 	ldw	r2,8(r2)
10010940:	1809883a 	mov	r4,r3
10010944:	100b883a 	mov	r5,r2
10010948:	0010d240 	call	10010d24 <altera_avalon_jtag_uart_close>
}
1001094c:	e037883a 	mov	sp,fp
10010950:	dfc00117 	ldw	ra,4(sp)
10010954:	df000017 	ldw	fp,0(sp)
10010958:	dec00204 	addi	sp,sp,8
1001095c:	f800283a 	ret

10010960 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010960:	defffa04 	addi	sp,sp,-24
10010964:	dfc00515 	stw	ra,20(sp)
10010968:	df000415 	stw	fp,16(sp)
1001096c:	df000404 	addi	fp,sp,16
10010970:	e13ffd15 	stw	r4,-12(fp)
10010974:	e17ffe15 	stw	r5,-8(fp)
10010978:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1001097c:	e0bffd17 	ldw	r2,-12(fp)
10010980:	10800017 	ldw	r2,0(r2)
10010984:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010988:	e0bffc17 	ldw	r2,-16(fp)
1001098c:	10800a04 	addi	r2,r2,40
10010990:	1009883a 	mov	r4,r2
10010994:	e17ffe17 	ldw	r5,-8(fp)
10010998:	e1bfff17 	ldw	r6,-4(fp)
1001099c:	0010d8c0 	call	10010d8c <altera_avalon_jtag_uart_ioctl>
}
100109a0:	e037883a 	mov	sp,fp
100109a4:	dfc00117 	ldw	ra,4(sp)
100109a8:	df000017 	ldw	fp,0(sp)
100109ac:	dec00204 	addi	sp,sp,8
100109b0:	f800283a 	ret

100109b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100109b4:	defffa04 	addi	sp,sp,-24
100109b8:	dfc00515 	stw	ra,20(sp)
100109bc:	df000415 	stw	fp,16(sp)
100109c0:	df000404 	addi	fp,sp,16
100109c4:	e13ffd15 	stw	r4,-12(fp)
100109c8:	e17ffe15 	stw	r5,-8(fp)
100109cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100109d0:	e0bffd17 	ldw	r2,-12(fp)
100109d4:	00c00044 	movi	r3,1
100109d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100109dc:	e0bffd17 	ldw	r2,-12(fp)
100109e0:	10800017 	ldw	r2,0(r2)
100109e4:	10800104 	addi	r2,r2,4
100109e8:	1007883a 	mov	r3,r2
100109ec:	e0bffd17 	ldw	r2,-12(fp)
100109f0:	10800817 	ldw	r2,32(r2)
100109f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100109f8:	e0fffe17 	ldw	r3,-8(fp)
100109fc:	e0bfff17 	ldw	r2,-4(fp)
10010a00:	d8000015 	stw	zero,0(sp)
10010a04:	1809883a 	mov	r4,r3
10010a08:	100b883a 	mov	r5,r2
10010a0c:	01840074 	movhi	r6,4097
10010a10:	31829e04 	addi	r6,r6,2680
10010a14:	e1fffd17 	ldw	r7,-12(fp)
10010a18:	00115c00 	call	100115c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010a1c:	e0bffd17 	ldw	r2,-12(fp)
10010a20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010a24:	e0bffd17 	ldw	r2,-12(fp)
10010a28:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010a2c:	00840074 	movhi	r2,4097
10010a30:	1097ae04 	addi	r2,r2,24248
10010a34:	10800017 	ldw	r2,0(r2)
10010a38:	1809883a 	mov	r4,r3
10010a3c:	100b883a 	mov	r5,r2
10010a40:	01840074 	movhi	r6,4097
10010a44:	31831f04 	addi	r6,r6,3196
10010a48:	e1fffd17 	ldw	r7,-12(fp)
10010a4c:	001129c0 	call	1001129c <alt_alarm_start>
10010a50:	1000040e 	bge	r2,zero,10010a64 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010a54:	e0fffd17 	ldw	r3,-12(fp)
10010a58:	00a00034 	movhi	r2,32768
10010a5c:	10bfffc4 	addi	r2,r2,-1
10010a60:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010a64:	e037883a 	mov	sp,fp
10010a68:	dfc00117 	ldw	ra,4(sp)
10010a6c:	df000017 	ldw	fp,0(sp)
10010a70:	dec00204 	addi	sp,sp,8
10010a74:	f800283a 	ret

10010a78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010a78:	defff804 	addi	sp,sp,-32
10010a7c:	df000715 	stw	fp,28(sp)
10010a80:	df000704 	addi	fp,sp,28
10010a84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010a88:	e0bfff17 	ldw	r2,-4(fp)
10010a8c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010a90:	e0bffb17 	ldw	r2,-20(fp)
10010a94:	10800017 	ldw	r2,0(r2)
10010a98:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010a9c:	e0bffc17 	ldw	r2,-16(fp)
10010aa0:	10800104 	addi	r2,r2,4
10010aa4:	10800037 	ldwio	r2,0(r2)
10010aa8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010aac:	e0bffd17 	ldw	r2,-12(fp)
10010ab0:	1080c00c 	andi	r2,r2,768
10010ab4:	1000011e 	bne	r2,zero,10010abc <altera_avalon_jtag_uart_irq+0x44>
      break;
10010ab8:	00006c06 	br	10010c6c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010abc:	e0bffd17 	ldw	r2,-12(fp)
10010ac0:	1080400c 	andi	r2,r2,256
10010ac4:	10003426 	beq	r2,zero,10010b98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010ac8:	00800074 	movhi	r2,1
10010acc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010ad0:	e0bffb17 	ldw	r2,-20(fp)
10010ad4:	10800a17 	ldw	r2,40(r2)
10010ad8:	10800044 	addi	r2,r2,1
10010adc:	1081ffcc 	andi	r2,r2,2047
10010ae0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010ae4:	e0bffb17 	ldw	r2,-20(fp)
10010ae8:	10c00b17 	ldw	r3,44(r2)
10010aec:	e0bffe17 	ldw	r2,-8(fp)
10010af0:	1880011e 	bne	r3,r2,10010af8 <altera_avalon_jtag_uart_irq+0x80>
          break;
10010af4:	00001606 	br	10010b50 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010af8:	e0bffc17 	ldw	r2,-16(fp)
10010afc:	10800037 	ldwio	r2,0(r2)
10010b00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010b04:	e0bff917 	ldw	r2,-28(fp)
10010b08:	10a0000c 	andi	r2,r2,32768
10010b0c:	1000011e 	bne	r2,zero,10010b14 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10010b10:	00000f06 	br	10010b50 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010b14:	e0bffb17 	ldw	r2,-20(fp)
10010b18:	10800a17 	ldw	r2,40(r2)
10010b1c:	e0fff917 	ldw	r3,-28(fp)
10010b20:	1809883a 	mov	r4,r3
10010b24:	e0fffb17 	ldw	r3,-20(fp)
10010b28:	1885883a 	add	r2,r3,r2
10010b2c:	10800e04 	addi	r2,r2,56
10010b30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010b34:	e0bffb17 	ldw	r2,-20(fp)
10010b38:	10800a17 	ldw	r2,40(r2)
10010b3c:	10800044 	addi	r2,r2,1
10010b40:	10c1ffcc 	andi	r3,r2,2047
10010b44:	e0bffb17 	ldw	r2,-20(fp)
10010b48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010b4c:	003fe006 	br	10010ad0 <__alt_data_end+0xf8010ad0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010b50:	e0bff917 	ldw	r2,-28(fp)
10010b54:	10bfffec 	andhi	r2,r2,65535
10010b58:	10000f26 	beq	r2,zero,10010b98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010b5c:	e0bffb17 	ldw	r2,-20(fp)
10010b60:	10c00817 	ldw	r3,32(r2)
10010b64:	00bfff84 	movi	r2,-2
10010b68:	1886703a 	and	r3,r3,r2
10010b6c:	e0bffb17 	ldw	r2,-20(fp)
10010b70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010b74:	e0bffc17 	ldw	r2,-16(fp)
10010b78:	10800104 	addi	r2,r2,4
10010b7c:	1007883a 	mov	r3,r2
10010b80:	e0bffb17 	ldw	r2,-20(fp)
10010b84:	10800817 	ldw	r2,32(r2)
10010b88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010b8c:	e0bffc17 	ldw	r2,-16(fp)
10010b90:	10800104 	addi	r2,r2,4
10010b94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010b98:	e0bffd17 	ldw	r2,-12(fp)
10010b9c:	1080800c 	andi	r2,r2,512
10010ba0:	10003126 	beq	r2,zero,10010c68 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010ba4:	e0bffd17 	ldw	r2,-12(fp)
10010ba8:	1004d43a 	srli	r2,r2,16
10010bac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010bb0:	00001406 	br	10010c04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010bb4:	e0bffc17 	ldw	r2,-16(fp)
10010bb8:	e0fffb17 	ldw	r3,-20(fp)
10010bbc:	18c00d17 	ldw	r3,52(r3)
10010bc0:	e13ffb17 	ldw	r4,-20(fp)
10010bc4:	20c7883a 	add	r3,r4,r3
10010bc8:	18c20e04 	addi	r3,r3,2104
10010bcc:	18c00003 	ldbu	r3,0(r3)
10010bd0:	18c03fcc 	andi	r3,r3,255
10010bd4:	18c0201c 	xori	r3,r3,128
10010bd8:	18ffe004 	addi	r3,r3,-128
10010bdc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010be0:	e0bffb17 	ldw	r2,-20(fp)
10010be4:	10800d17 	ldw	r2,52(r2)
10010be8:	10800044 	addi	r2,r2,1
10010bec:	10c1ffcc 	andi	r3,r2,2047
10010bf0:	e0bffb17 	ldw	r2,-20(fp)
10010bf4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010bf8:	e0bffa17 	ldw	r2,-24(fp)
10010bfc:	10bfffc4 	addi	r2,r2,-1
10010c00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010c04:	e0bffa17 	ldw	r2,-24(fp)
10010c08:	10000526 	beq	r2,zero,10010c20 <altera_avalon_jtag_uart_irq+0x1a8>
10010c0c:	e0bffb17 	ldw	r2,-20(fp)
10010c10:	10c00d17 	ldw	r3,52(r2)
10010c14:	e0bffb17 	ldw	r2,-20(fp)
10010c18:	10800c17 	ldw	r2,48(r2)
10010c1c:	18bfe51e 	bne	r3,r2,10010bb4 <__alt_data_end+0xf8010bb4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010c20:	e0bffa17 	ldw	r2,-24(fp)
10010c24:	10001026 	beq	r2,zero,10010c68 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010c28:	e0bffb17 	ldw	r2,-20(fp)
10010c2c:	10c00817 	ldw	r3,32(r2)
10010c30:	00bfff44 	movi	r2,-3
10010c34:	1886703a 	and	r3,r3,r2
10010c38:	e0bffb17 	ldw	r2,-20(fp)
10010c3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010c40:	e0bffb17 	ldw	r2,-20(fp)
10010c44:	10800017 	ldw	r2,0(r2)
10010c48:	10800104 	addi	r2,r2,4
10010c4c:	1007883a 	mov	r3,r2
10010c50:	e0bffb17 	ldw	r2,-20(fp)
10010c54:	10800817 	ldw	r2,32(r2)
10010c58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010c5c:	e0bffc17 	ldw	r2,-16(fp)
10010c60:	10800104 	addi	r2,r2,4
10010c64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010c68:	003f8c06 	br	10010a9c <__alt_data_end+0xf8010a9c>
}
10010c6c:	e037883a 	mov	sp,fp
10010c70:	df000017 	ldw	fp,0(sp)
10010c74:	dec00104 	addi	sp,sp,4
10010c78:	f800283a 	ret

10010c7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010c7c:	defff804 	addi	sp,sp,-32
10010c80:	df000715 	stw	fp,28(sp)
10010c84:	df000704 	addi	fp,sp,28
10010c88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010c8c:	e0bffb17 	ldw	r2,-20(fp)
10010c90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010c94:	e0bff917 	ldw	r2,-28(fp)
10010c98:	10800017 	ldw	r2,0(r2)
10010c9c:	10800104 	addi	r2,r2,4
10010ca0:	10800037 	ldwio	r2,0(r2)
10010ca4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010ca8:	e0bffa17 	ldw	r2,-24(fp)
10010cac:	1081000c 	andi	r2,r2,1024
10010cb0:	10000b26 	beq	r2,zero,10010ce0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010cb4:	e0bff917 	ldw	r2,-28(fp)
10010cb8:	10800017 	ldw	r2,0(r2)
10010cbc:	10800104 	addi	r2,r2,4
10010cc0:	1007883a 	mov	r3,r2
10010cc4:	e0bff917 	ldw	r2,-28(fp)
10010cc8:	10800817 	ldw	r2,32(r2)
10010ccc:	10810014 	ori	r2,r2,1024
10010cd0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010cd4:	e0bff917 	ldw	r2,-28(fp)
10010cd8:	10000915 	stw	zero,36(r2)
10010cdc:	00000a06 	br	10010d08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010ce0:	e0bff917 	ldw	r2,-28(fp)
10010ce4:	10c00917 	ldw	r3,36(r2)
10010ce8:	00a00034 	movhi	r2,32768
10010cec:	10bfff04 	addi	r2,r2,-4
10010cf0:	10c00536 	bltu	r2,r3,10010d08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010cf4:	e0bff917 	ldw	r2,-28(fp)
10010cf8:	10800917 	ldw	r2,36(r2)
10010cfc:	10c00044 	addi	r3,r2,1
10010d00:	e0bff917 	ldw	r2,-28(fp)
10010d04:	10c00915 	stw	r3,36(r2)
10010d08:	00840074 	movhi	r2,4097
10010d0c:	1097ae04 	addi	r2,r2,24248
10010d10:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010d14:	e037883a 	mov	sp,fp
10010d18:	df000017 	ldw	fp,0(sp)
10010d1c:	dec00104 	addi	sp,sp,4
10010d20:	f800283a 	ret

10010d24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010d24:	defffd04 	addi	sp,sp,-12
10010d28:	df000215 	stw	fp,8(sp)
10010d2c:	df000204 	addi	fp,sp,8
10010d30:	e13ffe15 	stw	r4,-8(fp)
10010d34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010d38:	00000506 	br	10010d50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010d3c:	e0bfff17 	ldw	r2,-4(fp)
10010d40:	1090000c 	andi	r2,r2,16384
10010d44:	10000226 	beq	r2,zero,10010d50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010d48:	00bffd44 	movi	r2,-11
10010d4c:	00000b06 	br	10010d7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010d50:	e0bffe17 	ldw	r2,-8(fp)
10010d54:	10c00d17 	ldw	r3,52(r2)
10010d58:	e0bffe17 	ldw	r2,-8(fp)
10010d5c:	10800c17 	ldw	r2,48(r2)
10010d60:	18800526 	beq	r3,r2,10010d78 <altera_avalon_jtag_uart_close+0x54>
10010d64:	e0bffe17 	ldw	r2,-8(fp)
10010d68:	10c00917 	ldw	r3,36(r2)
10010d6c:	e0bffe17 	ldw	r2,-8(fp)
10010d70:	10800117 	ldw	r2,4(r2)
10010d74:	18bff136 	bltu	r3,r2,10010d3c <__alt_data_end+0xf8010d3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010d78:	0005883a 	mov	r2,zero
}
10010d7c:	e037883a 	mov	sp,fp
10010d80:	df000017 	ldw	fp,0(sp)
10010d84:	dec00104 	addi	sp,sp,4
10010d88:	f800283a 	ret

10010d8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010d8c:	defffa04 	addi	sp,sp,-24
10010d90:	df000515 	stw	fp,20(sp)
10010d94:	df000504 	addi	fp,sp,20
10010d98:	e13ffd15 	stw	r4,-12(fp)
10010d9c:	e17ffe15 	stw	r5,-8(fp)
10010da0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010da4:	00bff9c4 	movi	r2,-25
10010da8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010dac:	e0bffe17 	ldw	r2,-8(fp)
10010db0:	10da8060 	cmpeqi	r3,r2,27137
10010db4:	1800031e 	bne	r3,zero,10010dc4 <altera_avalon_jtag_uart_ioctl+0x38>
10010db8:	109a80a0 	cmpeqi	r2,r2,27138
10010dbc:	1000191e 	bne	r2,zero,10010e24 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010dc0:	00002806 	br	10010e64 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010dc4:	e0bffd17 	ldw	r2,-12(fp)
10010dc8:	10c00117 	ldw	r3,4(r2)
10010dcc:	00a00034 	movhi	r2,32768
10010dd0:	10bfffc4 	addi	r2,r2,-1
10010dd4:	18801226 	beq	r3,r2,10010e20 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10010dd8:	e0bfff17 	ldw	r2,-4(fp)
10010ddc:	10800017 	ldw	r2,0(r2)
10010de0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010de4:	e0bffc17 	ldw	r2,-16(fp)
10010de8:	10800090 	cmplti	r2,r2,2
10010dec:	1000061e 	bne	r2,zero,10010e08 <altera_avalon_jtag_uart_ioctl+0x7c>
10010df0:	e0fffc17 	ldw	r3,-16(fp)
10010df4:	00a00034 	movhi	r2,32768
10010df8:	10bfffc4 	addi	r2,r2,-1
10010dfc:	18800226 	beq	r3,r2,10010e08 <altera_avalon_jtag_uart_ioctl+0x7c>
10010e00:	e0bffc17 	ldw	r2,-16(fp)
10010e04:	00000206 	br	10010e10 <altera_avalon_jtag_uart_ioctl+0x84>
10010e08:	00a00034 	movhi	r2,32768
10010e0c:	10bfff84 	addi	r2,r2,-2
10010e10:	e0fffd17 	ldw	r3,-12(fp)
10010e14:	18800115 	stw	r2,4(r3)
      rc = 0;
10010e18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010e1c:	00001106 	br	10010e64 <altera_avalon_jtag_uart_ioctl+0xd8>
10010e20:	00001006 	br	10010e64 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010e24:	e0bffd17 	ldw	r2,-12(fp)
10010e28:	10c00117 	ldw	r3,4(r2)
10010e2c:	00a00034 	movhi	r2,32768
10010e30:	10bfffc4 	addi	r2,r2,-1
10010e34:	18800a26 	beq	r3,r2,10010e60 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010e38:	e0bffd17 	ldw	r2,-12(fp)
10010e3c:	10c00917 	ldw	r3,36(r2)
10010e40:	e0bffd17 	ldw	r2,-12(fp)
10010e44:	10800117 	ldw	r2,4(r2)
10010e48:	1885803a 	cmpltu	r2,r3,r2
10010e4c:	10c03fcc 	andi	r3,r2,255
10010e50:	e0bfff17 	ldw	r2,-4(fp)
10010e54:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010e58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010e5c:	00000006 	br	10010e60 <altera_avalon_jtag_uart_ioctl+0xd4>
10010e60:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010e64:	e0bffb17 	ldw	r2,-20(fp)
}
10010e68:	e037883a 	mov	sp,fp
10010e6c:	df000017 	ldw	fp,0(sp)
10010e70:	dec00104 	addi	sp,sp,4
10010e74:	f800283a 	ret

10010e78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010e78:	defff304 	addi	sp,sp,-52
10010e7c:	dfc00c15 	stw	ra,48(sp)
10010e80:	df000b15 	stw	fp,44(sp)
10010e84:	df000b04 	addi	fp,sp,44
10010e88:	e13ffc15 	stw	r4,-16(fp)
10010e8c:	e17ffd15 	stw	r5,-12(fp)
10010e90:	e1bffe15 	stw	r6,-8(fp)
10010e94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010e98:	e0bffd17 	ldw	r2,-12(fp)
10010e9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010ea0:	00004906 	br	10010fc8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010ea4:	e0bffc17 	ldw	r2,-16(fp)
10010ea8:	10800a17 	ldw	r2,40(r2)
10010eac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010eb0:	e0bffc17 	ldw	r2,-16(fp)
10010eb4:	10800b17 	ldw	r2,44(r2)
10010eb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010ebc:	e0fff717 	ldw	r3,-36(fp)
10010ec0:	e0bff817 	ldw	r2,-32(fp)
10010ec4:	18800536 	bltu	r3,r2,10010edc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010ec8:	e0fff717 	ldw	r3,-36(fp)
10010ecc:	e0bff817 	ldw	r2,-32(fp)
10010ed0:	1885c83a 	sub	r2,r3,r2
10010ed4:	e0bff615 	stw	r2,-40(fp)
10010ed8:	00000406 	br	10010eec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010edc:	00c20004 	movi	r3,2048
10010ee0:	e0bff817 	ldw	r2,-32(fp)
10010ee4:	1885c83a 	sub	r2,r3,r2
10010ee8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010eec:	e0bff617 	ldw	r2,-40(fp)
10010ef0:	1000011e 	bne	r2,zero,10010ef8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10010ef4:	00001d06 	br	10010f6c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10010ef8:	e0fffe17 	ldw	r3,-8(fp)
10010efc:	e0bff617 	ldw	r2,-40(fp)
10010f00:	1880022e 	bgeu	r3,r2,10010f0c <altera_avalon_jtag_uart_read+0x94>
        n = space;
10010f04:	e0bffe17 	ldw	r2,-8(fp)
10010f08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010f0c:	e0bff817 	ldw	r2,-32(fp)
10010f10:	10800e04 	addi	r2,r2,56
10010f14:	e0fffc17 	ldw	r3,-16(fp)
10010f18:	1885883a 	add	r2,r3,r2
10010f1c:	e13ff517 	ldw	r4,-44(fp)
10010f20:	100b883a 	mov	r5,r2
10010f24:	e1bff617 	ldw	r6,-40(fp)
10010f28:	000bc880 	call	1000bc88 <memcpy>
      ptr   += n;
10010f2c:	e0fff517 	ldw	r3,-44(fp)
10010f30:	e0bff617 	ldw	r2,-40(fp)
10010f34:	1885883a 	add	r2,r3,r2
10010f38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010f3c:	e0fffe17 	ldw	r3,-8(fp)
10010f40:	e0bff617 	ldw	r2,-40(fp)
10010f44:	1885c83a 	sub	r2,r3,r2
10010f48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010f4c:	e0fff817 	ldw	r3,-32(fp)
10010f50:	e0bff617 	ldw	r2,-40(fp)
10010f54:	1885883a 	add	r2,r3,r2
10010f58:	10c1ffcc 	andi	r3,r2,2047
10010f5c:	e0bffc17 	ldw	r2,-16(fp)
10010f60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010f64:	e0bffe17 	ldw	r2,-8(fp)
10010f68:	00bfce16 	blt	zero,r2,10010ea4 <__alt_data_end+0xf8010ea4>

    /* If we read any data then return it */
    if (ptr != buffer)
10010f6c:	e0fff517 	ldw	r3,-44(fp)
10010f70:	e0bffd17 	ldw	r2,-12(fp)
10010f74:	18800126 	beq	r3,r2,10010f7c <altera_avalon_jtag_uart_read+0x104>
      break;
10010f78:	00001506 	br	10010fd0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010f7c:	e0bfff17 	ldw	r2,-4(fp)
10010f80:	1090000c 	andi	r2,r2,16384
10010f84:	10000126 	beq	r2,zero,10010f8c <altera_avalon_jtag_uart_read+0x114>
      break;
10010f88:	00001106 	br	10010fd0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010f8c:	0001883a 	nop
10010f90:	e0bffc17 	ldw	r2,-16(fp)
10010f94:	10c00a17 	ldw	r3,40(r2)
10010f98:	e0bff717 	ldw	r2,-36(fp)
10010f9c:	1880051e 	bne	r3,r2,10010fb4 <altera_avalon_jtag_uart_read+0x13c>
10010fa0:	e0bffc17 	ldw	r2,-16(fp)
10010fa4:	10c00917 	ldw	r3,36(r2)
10010fa8:	e0bffc17 	ldw	r2,-16(fp)
10010fac:	10800117 	ldw	r2,4(r2)
10010fb0:	18bff736 	bltu	r3,r2,10010f90 <__alt_data_end+0xf8010f90>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010fb4:	e0bffc17 	ldw	r2,-16(fp)
10010fb8:	10c00a17 	ldw	r3,40(r2)
10010fbc:	e0bff717 	ldw	r2,-36(fp)
10010fc0:	1880011e 	bne	r3,r2,10010fc8 <altera_avalon_jtag_uart_read+0x150>
      break;
10010fc4:	00000206 	br	10010fd0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010fc8:	e0bffe17 	ldw	r2,-8(fp)
10010fcc:	00bfb516 	blt	zero,r2,10010ea4 <__alt_data_end+0xf8010ea4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010fd0:	e0fff517 	ldw	r3,-44(fp)
10010fd4:	e0bffd17 	ldw	r2,-12(fp)
10010fd8:	18801826 	beq	r3,r2,1001103c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010fdc:	0005303a 	rdctl	r2,status
10010fe0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010fe4:	e0fffa17 	ldw	r3,-24(fp)
10010fe8:	00bfff84 	movi	r2,-2
10010fec:	1884703a 	and	r2,r3,r2
10010ff0:	1001703a 	wrctl	status,r2
  
  return context;
10010ff4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010ff8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010ffc:	e0bffc17 	ldw	r2,-16(fp)
10011000:	10800817 	ldw	r2,32(r2)
10011004:	10c00054 	ori	r3,r2,1
10011008:	e0bffc17 	ldw	r2,-16(fp)
1001100c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011010:	e0bffc17 	ldw	r2,-16(fp)
10011014:	10800017 	ldw	r2,0(r2)
10011018:	10800104 	addi	r2,r2,4
1001101c:	1007883a 	mov	r3,r2
10011020:	e0bffc17 	ldw	r2,-16(fp)
10011024:	10800817 	ldw	r2,32(r2)
10011028:	18800035 	stwio	r2,0(r3)
1001102c:	e0bff917 	ldw	r2,-28(fp)
10011030:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011034:	e0bffb17 	ldw	r2,-20(fp)
10011038:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1001103c:	e0fff517 	ldw	r3,-44(fp)
10011040:	e0bffd17 	ldw	r2,-12(fp)
10011044:	18800426 	beq	r3,r2,10011058 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10011048:	e0fff517 	ldw	r3,-44(fp)
1001104c:	e0bffd17 	ldw	r2,-12(fp)
10011050:	1885c83a 	sub	r2,r3,r2
10011054:	00000606 	br	10011070 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10011058:	e0bfff17 	ldw	r2,-4(fp)
1001105c:	1090000c 	andi	r2,r2,16384
10011060:	10000226 	beq	r2,zero,1001106c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10011064:	00bffd44 	movi	r2,-11
10011068:	00000106 	br	10011070 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1001106c:	00bffec4 	movi	r2,-5
}
10011070:	e037883a 	mov	sp,fp
10011074:	dfc00117 	ldw	ra,4(sp)
10011078:	df000017 	ldw	fp,0(sp)
1001107c:	dec00204 	addi	sp,sp,8
10011080:	f800283a 	ret

10011084 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10011084:	defff304 	addi	sp,sp,-52
10011088:	dfc00c15 	stw	ra,48(sp)
1001108c:	df000b15 	stw	fp,44(sp)
10011090:	df000b04 	addi	fp,sp,44
10011094:	e13ffc15 	stw	r4,-16(fp)
10011098:	e17ffd15 	stw	r5,-12(fp)
1001109c:	e1bffe15 	stw	r6,-8(fp)
100110a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100110a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100110a8:	e0bffd17 	ldw	r2,-12(fp)
100110ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100110b0:	00003806 	br	10011194 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100110b4:	e0bffc17 	ldw	r2,-16(fp)
100110b8:	10800c17 	ldw	r2,48(r2)
100110bc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100110c0:	e0bffc17 	ldw	r2,-16(fp)
100110c4:	10800d17 	ldw	r2,52(r2)
100110c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100110cc:	e0fff817 	ldw	r3,-32(fp)
100110d0:	e0bff517 	ldw	r2,-44(fp)
100110d4:	1880062e 	bgeu	r3,r2,100110f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100110d8:	e0fff517 	ldw	r3,-44(fp)
100110dc:	e0bff817 	ldw	r2,-32(fp)
100110e0:	1885c83a 	sub	r2,r3,r2
100110e4:	10bfffc4 	addi	r2,r2,-1
100110e8:	e0bff615 	stw	r2,-40(fp)
100110ec:	00000b06 	br	1001111c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100110f0:	e0bff517 	ldw	r2,-44(fp)
100110f4:	10000526 	beq	r2,zero,1001110c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100110f8:	00c20004 	movi	r3,2048
100110fc:	e0bff817 	ldw	r2,-32(fp)
10011100:	1885c83a 	sub	r2,r3,r2
10011104:	e0bff615 	stw	r2,-40(fp)
10011108:	00000406 	br	1001111c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1001110c:	00c1ffc4 	movi	r3,2047
10011110:	e0bff817 	ldw	r2,-32(fp)
10011114:	1885c83a 	sub	r2,r3,r2
10011118:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001111c:	e0bff617 	ldw	r2,-40(fp)
10011120:	1000011e 	bne	r2,zero,10011128 <altera_avalon_jtag_uart_write+0xa4>
        break;
10011124:	00001d06 	br	1001119c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10011128:	e0fffe17 	ldw	r3,-8(fp)
1001112c:	e0bff617 	ldw	r2,-40(fp)
10011130:	1880022e 	bgeu	r3,r2,1001113c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10011134:	e0bffe17 	ldw	r2,-8(fp)
10011138:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1001113c:	e0bff817 	ldw	r2,-32(fp)
10011140:	10820e04 	addi	r2,r2,2104
10011144:	e0fffc17 	ldw	r3,-16(fp)
10011148:	1885883a 	add	r2,r3,r2
1001114c:	1009883a 	mov	r4,r2
10011150:	e17ffd17 	ldw	r5,-12(fp)
10011154:	e1bff617 	ldw	r6,-40(fp)
10011158:	000bc880 	call	1000bc88 <memcpy>
      ptr   += n;
1001115c:	e0fffd17 	ldw	r3,-12(fp)
10011160:	e0bff617 	ldw	r2,-40(fp)
10011164:	1885883a 	add	r2,r3,r2
10011168:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001116c:	e0fffe17 	ldw	r3,-8(fp)
10011170:	e0bff617 	ldw	r2,-40(fp)
10011174:	1885c83a 	sub	r2,r3,r2
10011178:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001117c:	e0fff817 	ldw	r3,-32(fp)
10011180:	e0bff617 	ldw	r2,-40(fp)
10011184:	1885883a 	add	r2,r3,r2
10011188:	10c1ffcc 	andi	r3,r2,2047
1001118c:	e0bffc17 	ldw	r2,-16(fp)
10011190:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011194:	e0bffe17 	ldw	r2,-8(fp)
10011198:	00bfc616 	blt	zero,r2,100110b4 <__alt_data_end+0xf80110b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001119c:	0005303a 	rdctl	r2,status
100111a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100111a4:	e0fffa17 	ldw	r3,-24(fp)
100111a8:	00bfff84 	movi	r2,-2
100111ac:	1884703a 	and	r2,r3,r2
100111b0:	1001703a 	wrctl	status,r2
  
  return context;
100111b4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100111b8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100111bc:	e0bffc17 	ldw	r2,-16(fp)
100111c0:	10800817 	ldw	r2,32(r2)
100111c4:	10c00094 	ori	r3,r2,2
100111c8:	e0bffc17 	ldw	r2,-16(fp)
100111cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100111d0:	e0bffc17 	ldw	r2,-16(fp)
100111d4:	10800017 	ldw	r2,0(r2)
100111d8:	10800104 	addi	r2,r2,4
100111dc:	1007883a 	mov	r3,r2
100111e0:	e0bffc17 	ldw	r2,-16(fp)
100111e4:	10800817 	ldw	r2,32(r2)
100111e8:	18800035 	stwio	r2,0(r3)
100111ec:	e0bff917 	ldw	r2,-28(fp)
100111f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100111f4:	e0bffb17 	ldw	r2,-20(fp)
100111f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100111fc:	e0bffe17 	ldw	r2,-8(fp)
10011200:	0080120e 	bge	zero,r2,1001124c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10011204:	e0bfff17 	ldw	r2,-4(fp)
10011208:	1090000c 	andi	r2,r2,16384
1001120c:	10000126 	beq	r2,zero,10011214 <altera_avalon_jtag_uart_write+0x190>
        break;
10011210:	00001006 	br	10011254 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011214:	0001883a 	nop
10011218:	e0bffc17 	ldw	r2,-16(fp)
1001121c:	10c00d17 	ldw	r3,52(r2)
10011220:	e0bff517 	ldw	r2,-44(fp)
10011224:	1880051e 	bne	r3,r2,1001123c <altera_avalon_jtag_uart_write+0x1b8>
10011228:	e0bffc17 	ldw	r2,-16(fp)
1001122c:	10c00917 	ldw	r3,36(r2)
10011230:	e0bffc17 	ldw	r2,-16(fp)
10011234:	10800117 	ldw	r2,4(r2)
10011238:	18bff736 	bltu	r3,r2,10011218 <__alt_data_end+0xf8011218>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1001123c:	e0bffc17 	ldw	r2,-16(fp)
10011240:	10800917 	ldw	r2,36(r2)
10011244:	10000126 	beq	r2,zero,1001124c <altera_avalon_jtag_uart_write+0x1c8>
         break;
10011248:	00000206 	br	10011254 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1001124c:	e0bffe17 	ldw	r2,-8(fp)
10011250:	00bf9716 	blt	zero,r2,100110b0 <__alt_data_end+0xf80110b0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011254:	e0fffd17 	ldw	r3,-12(fp)
10011258:	e0bff717 	ldw	r2,-36(fp)
1001125c:	18800426 	beq	r3,r2,10011270 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10011260:	e0fffd17 	ldw	r3,-12(fp)
10011264:	e0bff717 	ldw	r2,-36(fp)
10011268:	1885c83a 	sub	r2,r3,r2
1001126c:	00000606 	br	10011288 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10011270:	e0bfff17 	ldw	r2,-4(fp)
10011274:	1090000c 	andi	r2,r2,16384
10011278:	10000226 	beq	r2,zero,10011284 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1001127c:	00bffd44 	movi	r2,-11
10011280:	00000106 	br	10011288 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011284:	00bffec4 	movi	r2,-5
}
10011288:	e037883a 	mov	sp,fp
1001128c:	dfc00117 	ldw	ra,4(sp)
10011290:	df000017 	ldw	fp,0(sp)
10011294:	dec00204 	addi	sp,sp,8
10011298:	f800283a 	ret

1001129c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1001129c:	defff504 	addi	sp,sp,-44
100112a0:	df000a15 	stw	fp,40(sp)
100112a4:	df000a04 	addi	fp,sp,40
100112a8:	e13ffc15 	stw	r4,-16(fp)
100112ac:	e17ffd15 	stw	r5,-12(fp)
100112b0:	e1bffe15 	stw	r6,-8(fp)
100112b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100112b8:	e03ff615 	stw	zero,-40(fp)
100112bc:	00840074 	movhi	r2,4097
100112c0:	1097ae04 	addi	r2,r2,24248
100112c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100112c8:	10003f26 	beq	r2,zero,100113c8 <alt_alarm_start+0x12c>
  {
    if (alarm)
100112cc:	e0bffc17 	ldw	r2,-16(fp)
100112d0:	10003b26 	beq	r2,zero,100113c0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100112d4:	e0bffc17 	ldw	r2,-16(fp)
100112d8:	e0fffe17 	ldw	r3,-8(fp)
100112dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100112e0:	e0bffc17 	ldw	r2,-16(fp)
100112e4:	e0ffff17 	ldw	r3,-4(fp)
100112e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100112ec:	0005303a 	rdctl	r2,status
100112f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100112f4:	e0fff817 	ldw	r3,-32(fp)
100112f8:	00bfff84 	movi	r2,-2
100112fc:	1884703a 	and	r2,r3,r2
10011300:	1001703a 	wrctl	status,r2
  
  return context;
10011304:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10011308:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1001130c:	00840074 	movhi	r2,4097
10011310:	1097af04 	addi	r2,r2,24252
10011314:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10011318:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001131c:	e0fffd17 	ldw	r3,-12(fp)
10011320:	e0bff617 	ldw	r2,-40(fp)
10011324:	1885883a 	add	r2,r3,r2
10011328:	10c00044 	addi	r3,r2,1
1001132c:	e0bffc17 	ldw	r2,-16(fp)
10011330:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011334:	e0bffc17 	ldw	r2,-16(fp)
10011338:	10c00217 	ldw	r3,8(r2)
1001133c:	e0bff617 	ldw	r2,-40(fp)
10011340:	1880042e 	bgeu	r3,r2,10011354 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10011344:	e0bffc17 	ldw	r2,-16(fp)
10011348:	00c00044 	movi	r3,1
1001134c:	10c00405 	stb	r3,16(r2)
10011350:	00000206 	br	1001135c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011354:	e0bffc17 	ldw	r2,-16(fp)
10011358:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1001135c:	e0fffc17 	ldw	r3,-16(fp)
10011360:	00840074 	movhi	r2,4097
10011364:	1090de04 	addi	r2,r2,17272
10011368:	e0bff915 	stw	r2,-28(fp)
1001136c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011370:	e0bffa17 	ldw	r2,-24(fp)
10011374:	e0fff917 	ldw	r3,-28(fp)
10011378:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001137c:	e0bff917 	ldw	r2,-28(fp)
10011380:	10c00017 	ldw	r3,0(r2)
10011384:	e0bffa17 	ldw	r2,-24(fp)
10011388:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001138c:	e0bff917 	ldw	r2,-28(fp)
10011390:	10800017 	ldw	r2,0(r2)
10011394:	e0fffa17 	ldw	r3,-24(fp)
10011398:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001139c:	e0bff917 	ldw	r2,-28(fp)
100113a0:	e0fffa17 	ldw	r3,-24(fp)
100113a4:	10c00015 	stw	r3,0(r2)
100113a8:	e0bff717 	ldw	r2,-36(fp)
100113ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100113b0:	e0bffb17 	ldw	r2,-20(fp)
100113b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100113b8:	0005883a 	mov	r2,zero
100113bc:	00000306 	br	100113cc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100113c0:	00bffa84 	movi	r2,-22
100113c4:	00000106 	br	100113cc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100113c8:	00bfde84 	movi	r2,-134
  }
}
100113cc:	e037883a 	mov	sp,fp
100113d0:	df000017 	ldw	fp,0(sp)
100113d4:	dec00104 	addi	sp,sp,4
100113d8:	f800283a 	ret

100113dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100113dc:	deffff04 	addi	sp,sp,-4
100113e0:	df000015 	stw	fp,0(sp)
100113e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100113e8:	e037883a 	mov	sp,fp
100113ec:	df000017 	ldw	fp,0(sp)
100113f0:	dec00104 	addi	sp,sp,4
100113f4:	f800283a 	ret

100113f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100113f8:	defffe04 	addi	sp,sp,-8
100113fc:	dfc00115 	stw	ra,4(sp)
10011400:	df000015 	stw	fp,0(sp)
10011404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011408:	00840074 	movhi	r2,4097
1001140c:	1090db04 	addi	r2,r2,17260
10011410:	10800017 	ldw	r2,0(r2)
10011414:	10000526 	beq	r2,zero,1001142c <alt_get_errno+0x34>
10011418:	00840074 	movhi	r2,4097
1001141c:	1090db04 	addi	r2,r2,17260
10011420:	10800017 	ldw	r2,0(r2)
10011424:	103ee83a 	callr	r2
10011428:	00000206 	br	10011434 <alt_get_errno+0x3c>
1001142c:	00840074 	movhi	r2,4097
10011430:	1097a904 	addi	r2,r2,24228
}
10011434:	e037883a 	mov	sp,fp
10011438:	dfc00117 	ldw	ra,4(sp)
1001143c:	df000017 	ldw	fp,0(sp)
10011440:	dec00204 	addi	sp,sp,8
10011444:	f800283a 	ret

10011448 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011448:	defffa04 	addi	sp,sp,-24
1001144c:	dfc00515 	stw	ra,20(sp)
10011450:	df000415 	stw	fp,16(sp)
10011454:	df000404 	addi	fp,sp,16
10011458:	e13ffe15 	stw	r4,-8(fp)
1001145c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011460:	e0bffe17 	ldw	r2,-8(fp)
10011464:	10000326 	beq	r2,zero,10011474 <alt_dev_llist_insert+0x2c>
10011468:	e0bffe17 	ldw	r2,-8(fp)
1001146c:	10800217 	ldw	r2,8(r2)
10011470:	1000061e 	bne	r2,zero,1001148c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10011474:	00113f80 	call	100113f8 <alt_get_errno>
10011478:	1007883a 	mov	r3,r2
1001147c:	00800584 	movi	r2,22
10011480:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10011484:	00bffa84 	movi	r2,-22
10011488:	00001306 	br	100114d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1001148c:	e0bffe17 	ldw	r2,-8(fp)
10011490:	e0ffff17 	ldw	r3,-4(fp)
10011494:	e0fffc15 	stw	r3,-16(fp)
10011498:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001149c:	e0bffd17 	ldw	r2,-12(fp)
100114a0:	e0fffc17 	ldw	r3,-16(fp)
100114a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100114a8:	e0bffc17 	ldw	r2,-16(fp)
100114ac:	10c00017 	ldw	r3,0(r2)
100114b0:	e0bffd17 	ldw	r2,-12(fp)
100114b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100114b8:	e0bffc17 	ldw	r2,-16(fp)
100114bc:	10800017 	ldw	r2,0(r2)
100114c0:	e0fffd17 	ldw	r3,-12(fp)
100114c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100114c8:	e0bffc17 	ldw	r2,-16(fp)
100114cc:	e0fffd17 	ldw	r3,-12(fp)
100114d0:	10c00015 	stw	r3,0(r2)

  return 0;  
100114d4:	0005883a 	mov	r2,zero
}
100114d8:	e037883a 	mov	sp,fp
100114dc:	dfc00117 	ldw	ra,4(sp)
100114e0:	df000017 	ldw	fp,0(sp)
100114e4:	dec00204 	addi	sp,sp,8
100114e8:	f800283a 	ret

100114ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100114ec:	defffd04 	addi	sp,sp,-12
100114f0:	dfc00215 	stw	ra,8(sp)
100114f4:	df000115 	stw	fp,4(sp)
100114f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100114fc:	00840074 	movhi	r2,4097
10011500:	10893f04 	addi	r2,r2,9468
10011504:	e0bfff15 	stw	r2,-4(fp)
10011508:	00000606 	br	10011524 <_do_ctors+0x38>
        (*ctor) (); 
1001150c:	e0bfff17 	ldw	r2,-4(fp)
10011510:	10800017 	ldw	r2,0(r2)
10011514:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011518:	e0bfff17 	ldw	r2,-4(fp)
1001151c:	10bfff04 	addi	r2,r2,-4
10011520:	e0bfff15 	stw	r2,-4(fp)
10011524:	e0ffff17 	ldw	r3,-4(fp)
10011528:	00840074 	movhi	r2,4097
1001152c:	10894004 	addi	r2,r2,9472
10011530:	18bff62e 	bgeu	r3,r2,1001150c <__alt_data_end+0xf801150c>
        (*ctor) (); 
}
10011534:	e037883a 	mov	sp,fp
10011538:	dfc00117 	ldw	ra,4(sp)
1001153c:	df000017 	ldw	fp,0(sp)
10011540:	dec00204 	addi	sp,sp,8
10011544:	f800283a 	ret

10011548 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011548:	defffd04 	addi	sp,sp,-12
1001154c:	dfc00215 	stw	ra,8(sp)
10011550:	df000115 	stw	fp,4(sp)
10011554:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011558:	00840074 	movhi	r2,4097
1001155c:	10893f04 	addi	r2,r2,9468
10011560:	e0bfff15 	stw	r2,-4(fp)
10011564:	00000606 	br	10011580 <_do_dtors+0x38>
        (*dtor) (); 
10011568:	e0bfff17 	ldw	r2,-4(fp)
1001156c:	10800017 	ldw	r2,0(r2)
10011570:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011574:	e0bfff17 	ldw	r2,-4(fp)
10011578:	10bfff04 	addi	r2,r2,-4
1001157c:	e0bfff15 	stw	r2,-4(fp)
10011580:	e0ffff17 	ldw	r3,-4(fp)
10011584:	00840074 	movhi	r2,4097
10011588:	10894004 	addi	r2,r2,9472
1001158c:	18bff62e 	bgeu	r3,r2,10011568 <__alt_data_end+0xf8011568>
        (*dtor) (); 
}
10011590:	e037883a 	mov	sp,fp
10011594:	dfc00117 	ldw	ra,4(sp)
10011598:	df000017 	ldw	fp,0(sp)
1001159c:	dec00204 	addi	sp,sp,8
100115a0:	f800283a 	ret

100115a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100115a4:	deffff04 	addi	sp,sp,-4
100115a8:	df000015 	stw	fp,0(sp)
100115ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100115b0:	e037883a 	mov	sp,fp
100115b4:	df000017 	ldw	fp,0(sp)
100115b8:	dec00104 	addi	sp,sp,4
100115bc:	f800283a 	ret

100115c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100115c0:	defff904 	addi	sp,sp,-28
100115c4:	dfc00615 	stw	ra,24(sp)
100115c8:	df000515 	stw	fp,20(sp)
100115cc:	df000504 	addi	fp,sp,20
100115d0:	e13ffc15 	stw	r4,-16(fp)
100115d4:	e17ffd15 	stw	r5,-12(fp)
100115d8:	e1bffe15 	stw	r6,-8(fp)
100115dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100115e0:	e0800217 	ldw	r2,8(fp)
100115e4:	d8800015 	stw	r2,0(sp)
100115e8:	e13ffc17 	ldw	r4,-16(fp)
100115ec:	e17ffd17 	ldw	r5,-12(fp)
100115f0:	e1bffe17 	ldw	r6,-8(fp)
100115f4:	e1ffff17 	ldw	r7,-4(fp)
100115f8:	00117a00 	call	100117a0 <alt_iic_isr_register>
}  
100115fc:	e037883a 	mov	sp,fp
10011600:	dfc00117 	ldw	ra,4(sp)
10011604:	df000017 	ldw	fp,0(sp)
10011608:	dec00204 	addi	sp,sp,8
1001160c:	f800283a 	ret

10011610 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011610:	defff904 	addi	sp,sp,-28
10011614:	df000615 	stw	fp,24(sp)
10011618:	df000604 	addi	fp,sp,24
1001161c:	e13ffe15 	stw	r4,-8(fp)
10011620:	e17fff15 	stw	r5,-4(fp)
10011624:	e0bfff17 	ldw	r2,-4(fp)
10011628:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001162c:	0005303a 	rdctl	r2,status
10011630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011634:	e0fffb17 	ldw	r3,-20(fp)
10011638:	00bfff84 	movi	r2,-2
1001163c:	1884703a 	and	r2,r3,r2
10011640:	1001703a 	wrctl	status,r2
  
  return context;
10011644:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011648:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001164c:	e0bffa17 	ldw	r2,-24(fp)
10011650:	00c00044 	movi	r3,1
10011654:	1884983a 	sll	r2,r3,r2
10011658:	1007883a 	mov	r3,r2
1001165c:	00840074 	movhi	r2,4097
10011660:	1097ad04 	addi	r2,r2,24244
10011664:	10800017 	ldw	r2,0(r2)
10011668:	1886b03a 	or	r3,r3,r2
1001166c:	00840074 	movhi	r2,4097
10011670:	1097ad04 	addi	r2,r2,24244
10011674:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011678:	00840074 	movhi	r2,4097
1001167c:	1097ad04 	addi	r2,r2,24244
10011680:	10800017 	ldw	r2,0(r2)
10011684:	100170fa 	wrctl	ienable,r2
10011688:	e0bffc17 	ldw	r2,-16(fp)
1001168c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011690:	e0bffd17 	ldw	r2,-12(fp)
10011694:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011698:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001169c:	0001883a 	nop
}
100116a0:	e037883a 	mov	sp,fp
100116a4:	df000017 	ldw	fp,0(sp)
100116a8:	dec00104 	addi	sp,sp,4
100116ac:	f800283a 	ret

100116b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100116b0:	defff904 	addi	sp,sp,-28
100116b4:	df000615 	stw	fp,24(sp)
100116b8:	df000604 	addi	fp,sp,24
100116bc:	e13ffe15 	stw	r4,-8(fp)
100116c0:	e17fff15 	stw	r5,-4(fp)
100116c4:	e0bfff17 	ldw	r2,-4(fp)
100116c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100116cc:	0005303a 	rdctl	r2,status
100116d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100116d4:	e0fffb17 	ldw	r3,-20(fp)
100116d8:	00bfff84 	movi	r2,-2
100116dc:	1884703a 	and	r2,r3,r2
100116e0:	1001703a 	wrctl	status,r2
  
  return context;
100116e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100116e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100116ec:	e0bffa17 	ldw	r2,-24(fp)
100116f0:	00c00044 	movi	r3,1
100116f4:	1884983a 	sll	r2,r3,r2
100116f8:	0084303a 	nor	r2,zero,r2
100116fc:	1007883a 	mov	r3,r2
10011700:	00840074 	movhi	r2,4097
10011704:	1097ad04 	addi	r2,r2,24244
10011708:	10800017 	ldw	r2,0(r2)
1001170c:	1886703a 	and	r3,r3,r2
10011710:	00840074 	movhi	r2,4097
10011714:	1097ad04 	addi	r2,r2,24244
10011718:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001171c:	00840074 	movhi	r2,4097
10011720:	1097ad04 	addi	r2,r2,24244
10011724:	10800017 	ldw	r2,0(r2)
10011728:	100170fa 	wrctl	ienable,r2
1001172c:	e0bffc17 	ldw	r2,-16(fp)
10011730:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011734:	e0bffd17 	ldw	r2,-12(fp)
10011738:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001173c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011740:	0001883a 	nop
}
10011744:	e037883a 	mov	sp,fp
10011748:	df000017 	ldw	fp,0(sp)
1001174c:	dec00104 	addi	sp,sp,4
10011750:	f800283a 	ret

10011754 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011754:	defffc04 	addi	sp,sp,-16
10011758:	df000315 	stw	fp,12(sp)
1001175c:	df000304 	addi	fp,sp,12
10011760:	e13ffe15 	stw	r4,-8(fp)
10011764:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011768:	000530fa 	rdctl	r2,ienable
1001176c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011770:	e0bfff17 	ldw	r2,-4(fp)
10011774:	00c00044 	movi	r3,1
10011778:	1884983a 	sll	r2,r3,r2
1001177c:	1007883a 	mov	r3,r2
10011780:	e0bffd17 	ldw	r2,-12(fp)
10011784:	1884703a 	and	r2,r3,r2
10011788:	1004c03a 	cmpne	r2,r2,zero
1001178c:	10803fcc 	andi	r2,r2,255
}
10011790:	e037883a 	mov	sp,fp
10011794:	df000017 	ldw	fp,0(sp)
10011798:	dec00104 	addi	sp,sp,4
1001179c:	f800283a 	ret

100117a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100117a0:	defff504 	addi	sp,sp,-44
100117a4:	dfc00a15 	stw	ra,40(sp)
100117a8:	df000915 	stw	fp,36(sp)
100117ac:	df000904 	addi	fp,sp,36
100117b0:	e13ffc15 	stw	r4,-16(fp)
100117b4:	e17ffd15 	stw	r5,-12(fp)
100117b8:	e1bffe15 	stw	r6,-8(fp)
100117bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100117c0:	00bffa84 	movi	r2,-22
100117c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100117c8:	e0bffd17 	ldw	r2,-12(fp)
100117cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100117d0:	e0bff817 	ldw	r2,-32(fp)
100117d4:	10800808 	cmpgei	r2,r2,32
100117d8:	1000271e 	bne	r2,zero,10011878 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100117dc:	0005303a 	rdctl	r2,status
100117e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100117e4:	e0fffa17 	ldw	r3,-24(fp)
100117e8:	00bfff84 	movi	r2,-2
100117ec:	1884703a 	and	r2,r3,r2
100117f0:	1001703a 	wrctl	status,r2
  
  return context;
100117f4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100117f8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100117fc:	00840074 	movhi	r2,4097
10011800:	10984b04 	addi	r2,r2,24876
10011804:	e0fff817 	ldw	r3,-32(fp)
10011808:	180690fa 	slli	r3,r3,3
1001180c:	10c5883a 	add	r2,r2,r3
10011810:	e0fffe17 	ldw	r3,-8(fp)
10011814:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011818:	00840074 	movhi	r2,4097
1001181c:	10984b04 	addi	r2,r2,24876
10011820:	e0fff817 	ldw	r3,-32(fp)
10011824:	180690fa 	slli	r3,r3,3
10011828:	10c5883a 	add	r2,r2,r3
1001182c:	10800104 	addi	r2,r2,4
10011830:	e0ffff17 	ldw	r3,-4(fp)
10011834:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011838:	e0bffe17 	ldw	r2,-8(fp)
1001183c:	10000526 	beq	r2,zero,10011854 <alt_iic_isr_register+0xb4>
10011840:	e0bff817 	ldw	r2,-32(fp)
10011844:	e13ffc17 	ldw	r4,-16(fp)
10011848:	100b883a 	mov	r5,r2
1001184c:	00116100 	call	10011610 <alt_ic_irq_enable>
10011850:	00000406 	br	10011864 <alt_iic_isr_register+0xc4>
10011854:	e0bff817 	ldw	r2,-32(fp)
10011858:	e13ffc17 	ldw	r4,-16(fp)
1001185c:	100b883a 	mov	r5,r2
10011860:	00116b00 	call	100116b0 <alt_ic_irq_disable>
10011864:	e0bff715 	stw	r2,-36(fp)
10011868:	e0bff917 	ldw	r2,-28(fp)
1001186c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011870:	e0bffb17 	ldw	r2,-20(fp)
10011874:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011878:	e0bff717 	ldw	r2,-36(fp)
}
1001187c:	e037883a 	mov	sp,fp
10011880:	dfc00117 	ldw	ra,4(sp)
10011884:	df000017 	ldw	fp,0(sp)
10011888:	dec00204 	addi	sp,sp,8
1001188c:	f800283a 	ret

10011890 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011890:	defff804 	addi	sp,sp,-32
10011894:	dfc00715 	stw	ra,28(sp)
10011898:	df000615 	stw	fp,24(sp)
1001189c:	dc000515 	stw	r16,20(sp)
100118a0:	df000604 	addi	fp,sp,24
100118a4:	e13ffb15 	stw	r4,-20(fp)
100118a8:	e17ffc15 	stw	r5,-16(fp)
100118ac:	e1bffd15 	stw	r6,-12(fp)
100118b0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100118b4:	e13ffc17 	ldw	r4,-16(fp)
100118b8:	e17ffd17 	ldw	r5,-12(fp)
100118bc:	e1bffe17 	ldw	r6,-8(fp)
100118c0:	0011b2c0 	call	10011b2c <open>
100118c4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100118c8:	e0bffa17 	ldw	r2,-24(fp)
100118cc:	10002216 	blt	r2,zero,10011958 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100118d0:	04040074 	movhi	r16,4097
100118d4:	840c5704 	addi	r16,r16,12636
100118d8:	e0bffa17 	ldw	r2,-24(fp)
100118dc:	1009883a 	mov	r4,r2
100118e0:	01400304 	movi	r5,12
100118e4:	00040f80 	call	100040f8 <__mulsi3>
100118e8:	8085883a 	add	r2,r16,r2
100118ec:	10c00017 	ldw	r3,0(r2)
100118f0:	e0bffb17 	ldw	r2,-20(fp)
100118f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100118f8:	04040074 	movhi	r16,4097
100118fc:	840c5704 	addi	r16,r16,12636
10011900:	e0bffa17 	ldw	r2,-24(fp)
10011904:	1009883a 	mov	r4,r2
10011908:	01400304 	movi	r5,12
1001190c:	00040f80 	call	100040f8 <__mulsi3>
10011910:	8085883a 	add	r2,r16,r2
10011914:	10800104 	addi	r2,r2,4
10011918:	10c00017 	ldw	r3,0(r2)
1001191c:	e0bffb17 	ldw	r2,-20(fp)
10011920:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011924:	04040074 	movhi	r16,4097
10011928:	840c5704 	addi	r16,r16,12636
1001192c:	e0bffa17 	ldw	r2,-24(fp)
10011930:	1009883a 	mov	r4,r2
10011934:	01400304 	movi	r5,12
10011938:	00040f80 	call	100040f8 <__mulsi3>
1001193c:	8085883a 	add	r2,r16,r2
10011940:	10800204 	addi	r2,r2,8
10011944:	10c00017 	ldw	r3,0(r2)
10011948:	e0bffb17 	ldw	r2,-20(fp)
1001194c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011950:	e13ffa17 	ldw	r4,-24(fp)
10011954:	001051c0 	call	1001051c <alt_release_fd>
  }
} 
10011958:	e6ffff04 	addi	sp,fp,-4
1001195c:	dfc00217 	ldw	ra,8(sp)
10011960:	df000117 	ldw	fp,4(sp)
10011964:	dc000017 	ldw	r16,0(sp)
10011968:	dec00304 	addi	sp,sp,12
1001196c:	f800283a 	ret

10011970 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011970:	defffb04 	addi	sp,sp,-20
10011974:	dfc00415 	stw	ra,16(sp)
10011978:	df000315 	stw	fp,12(sp)
1001197c:	df000304 	addi	fp,sp,12
10011980:	e13ffd15 	stw	r4,-12(fp)
10011984:	e17ffe15 	stw	r5,-8(fp)
10011988:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1001198c:	01040074 	movhi	r4,4097
10011990:	210c5a04 	addi	r4,r4,12648
10011994:	e17ffd17 	ldw	r5,-12(fp)
10011998:	01800044 	movi	r6,1
1001199c:	01c07fc4 	movi	r7,511
100119a0:	00118900 	call	10011890 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100119a4:	01040074 	movhi	r4,4097
100119a8:	210c5704 	addi	r4,r4,12636
100119ac:	e17ffe17 	ldw	r5,-8(fp)
100119b0:	000d883a 	mov	r6,zero
100119b4:	01c07fc4 	movi	r7,511
100119b8:	00118900 	call	10011890 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100119bc:	01040074 	movhi	r4,4097
100119c0:	210c5d04 	addi	r4,r4,12660
100119c4:	e17fff17 	ldw	r5,-4(fp)
100119c8:	01800044 	movi	r6,1
100119cc:	01c07fc4 	movi	r7,511
100119d0:	00118900 	call	10011890 <alt_open_fd>
}  
100119d4:	e037883a 	mov	sp,fp
100119d8:	dfc00117 	ldw	ra,4(sp)
100119dc:	df000017 	ldw	fp,0(sp)
100119e0:	dec00204 	addi	sp,sp,8
100119e4:	f800283a 	ret

100119e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100119e8:	defffe04 	addi	sp,sp,-8
100119ec:	dfc00115 	stw	ra,4(sp)
100119f0:	df000015 	stw	fp,0(sp)
100119f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100119f8:	00840074 	movhi	r2,4097
100119fc:	1090db04 	addi	r2,r2,17260
10011a00:	10800017 	ldw	r2,0(r2)
10011a04:	10000526 	beq	r2,zero,10011a1c <alt_get_errno+0x34>
10011a08:	00840074 	movhi	r2,4097
10011a0c:	1090db04 	addi	r2,r2,17260
10011a10:	10800017 	ldw	r2,0(r2)
10011a14:	103ee83a 	callr	r2
10011a18:	00000206 	br	10011a24 <alt_get_errno+0x3c>
10011a1c:	00840074 	movhi	r2,4097
10011a20:	1097a904 	addi	r2,r2,24228
}
10011a24:	e037883a 	mov	sp,fp
10011a28:	dfc00117 	ldw	ra,4(sp)
10011a2c:	df000017 	ldw	fp,0(sp)
10011a30:	dec00204 	addi	sp,sp,8
10011a34:	f800283a 	ret

10011a38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011a38:	defffb04 	addi	sp,sp,-20
10011a3c:	dfc00415 	stw	ra,16(sp)
10011a40:	df000315 	stw	fp,12(sp)
10011a44:	dc000215 	stw	r16,8(sp)
10011a48:	df000304 	addi	fp,sp,12
10011a4c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011a50:	e0bffe17 	ldw	r2,-8(fp)
10011a54:	10800217 	ldw	r2,8(r2)
10011a58:	10d00034 	orhi	r3,r2,16384
10011a5c:	e0bffe17 	ldw	r2,-8(fp)
10011a60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011a64:	e03ffd15 	stw	zero,-12(fp)
10011a68:	00002306 	br	10011af8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011a6c:	04040074 	movhi	r16,4097
10011a70:	840c5704 	addi	r16,r16,12636
10011a74:	e0bffd17 	ldw	r2,-12(fp)
10011a78:	1009883a 	mov	r4,r2
10011a7c:	01400304 	movi	r5,12
10011a80:	00040f80 	call	100040f8 <__mulsi3>
10011a84:	8085883a 	add	r2,r16,r2
10011a88:	10c00017 	ldw	r3,0(r2)
10011a8c:	e0bffe17 	ldw	r2,-8(fp)
10011a90:	10800017 	ldw	r2,0(r2)
10011a94:	1880151e 	bne	r3,r2,10011aec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011a98:	04040074 	movhi	r16,4097
10011a9c:	840c5704 	addi	r16,r16,12636
10011aa0:	e0bffd17 	ldw	r2,-12(fp)
10011aa4:	1009883a 	mov	r4,r2
10011aa8:	01400304 	movi	r5,12
10011aac:	00040f80 	call	100040f8 <__mulsi3>
10011ab0:	8085883a 	add	r2,r16,r2
10011ab4:	10800204 	addi	r2,r2,8
10011ab8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011abc:	10000b0e 	bge	r2,zero,10011aec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011ac0:	e13ffd17 	ldw	r4,-12(fp)
10011ac4:	01400304 	movi	r5,12
10011ac8:	00040f80 	call	100040f8 <__mulsi3>
10011acc:	1007883a 	mov	r3,r2
10011ad0:	00840074 	movhi	r2,4097
10011ad4:	108c5704 	addi	r2,r2,12636
10011ad8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011adc:	e0bffe17 	ldw	r2,-8(fp)
10011ae0:	18800226 	beq	r3,r2,10011aec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011ae4:	00bffcc4 	movi	r2,-13
10011ae8:	00000a06 	br	10011b14 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011aec:	e0bffd17 	ldw	r2,-12(fp)
10011af0:	10800044 	addi	r2,r2,1
10011af4:	e0bffd15 	stw	r2,-12(fp)
10011af8:	00840074 	movhi	r2,4097
10011afc:	1090da04 	addi	r2,r2,17256
10011b00:	10800017 	ldw	r2,0(r2)
10011b04:	1007883a 	mov	r3,r2
10011b08:	e0bffd17 	ldw	r2,-12(fp)
10011b0c:	18bfd72e 	bgeu	r3,r2,10011a6c <__alt_data_end+0xf8011a6c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011b10:	0005883a 	mov	r2,zero
}
10011b14:	e6ffff04 	addi	sp,fp,-4
10011b18:	dfc00217 	ldw	ra,8(sp)
10011b1c:	df000117 	ldw	fp,4(sp)
10011b20:	dc000017 	ldw	r16,0(sp)
10011b24:	dec00304 	addi	sp,sp,12
10011b28:	f800283a 	ret

10011b2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011b2c:	defff604 	addi	sp,sp,-40
10011b30:	dfc00915 	stw	ra,36(sp)
10011b34:	df000815 	stw	fp,32(sp)
10011b38:	df000804 	addi	fp,sp,32
10011b3c:	e13ffd15 	stw	r4,-12(fp)
10011b40:	e17ffe15 	stw	r5,-8(fp)
10011b44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011b48:	00bfffc4 	movi	r2,-1
10011b4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011b50:	00bffb44 	movi	r2,-19
10011b54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011b58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011b5c:	e13ffd17 	ldw	r4,-12(fp)
10011b60:	01440074 	movhi	r5,4097
10011b64:	2950d804 	addi	r5,r5,17248
10011b68:	0011e480 	call	10011e48 <alt_find_dev>
10011b6c:	e0bff815 	stw	r2,-32(fp)
10011b70:	e0bff817 	ldw	r2,-32(fp)
10011b74:	1000051e 	bne	r2,zero,10011b8c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011b78:	e13ffd17 	ldw	r4,-12(fp)
10011b7c:	0011ed80 	call	10011ed8 <alt_find_file>
10011b80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011b84:	00800044 	movi	r2,1
10011b88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011b8c:	e0bff817 	ldw	r2,-32(fp)
10011b90:	10002b26 	beq	r2,zero,10011c40 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011b94:	e13ff817 	ldw	r4,-32(fp)
10011b98:	0011fec0 	call	10011fec <alt_get_fd>
10011b9c:	e0bff915 	stw	r2,-28(fp)
10011ba0:	e0bff917 	ldw	r2,-28(fp)
10011ba4:	1000030e 	bge	r2,zero,10011bb4 <open+0x88>
    {
      status = index;
10011ba8:	e0bff917 	ldw	r2,-28(fp)
10011bac:	e0bffa15 	stw	r2,-24(fp)
10011bb0:	00002506 	br	10011c48 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011bb4:	e13ff917 	ldw	r4,-28(fp)
10011bb8:	01400304 	movi	r5,12
10011bbc:	00040f80 	call	100040f8 <__mulsi3>
10011bc0:	1007883a 	mov	r3,r2
10011bc4:	00840074 	movhi	r2,4097
10011bc8:	108c5704 	addi	r2,r2,12636
10011bcc:	1885883a 	add	r2,r3,r2
10011bd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011bd4:	e0fffe17 	ldw	r3,-8(fp)
10011bd8:	00900034 	movhi	r2,16384
10011bdc:	10bfffc4 	addi	r2,r2,-1
10011be0:	1886703a 	and	r3,r3,r2
10011be4:	e0bffc17 	ldw	r2,-16(fp)
10011be8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011bec:	e0bffb17 	ldw	r2,-20(fp)
10011bf0:	1000051e 	bne	r2,zero,10011c08 <open+0xdc>
10011bf4:	e13ffc17 	ldw	r4,-16(fp)
10011bf8:	0011a380 	call	10011a38 <alt_file_locked>
10011bfc:	e0bffa15 	stw	r2,-24(fp)
10011c00:	e0bffa17 	ldw	r2,-24(fp)
10011c04:	10001016 	blt	r2,zero,10011c48 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011c08:	e0bff817 	ldw	r2,-32(fp)
10011c0c:	10800317 	ldw	r2,12(r2)
10011c10:	10000826 	beq	r2,zero,10011c34 <open+0x108>
10011c14:	e0bff817 	ldw	r2,-32(fp)
10011c18:	10800317 	ldw	r2,12(r2)
10011c1c:	e13ffc17 	ldw	r4,-16(fp)
10011c20:	e17ffd17 	ldw	r5,-12(fp)
10011c24:	e1bffe17 	ldw	r6,-8(fp)
10011c28:	e1ffff17 	ldw	r7,-4(fp)
10011c2c:	103ee83a 	callr	r2
10011c30:	00000106 	br	10011c38 <open+0x10c>
10011c34:	0005883a 	mov	r2,zero
10011c38:	e0bffa15 	stw	r2,-24(fp)
10011c3c:	00000206 	br	10011c48 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011c40:	00bffb44 	movi	r2,-19
10011c44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011c48:	e0bffa17 	ldw	r2,-24(fp)
10011c4c:	1000090e 	bge	r2,zero,10011c74 <open+0x148>
  {
    alt_release_fd (index);  
10011c50:	e13ff917 	ldw	r4,-28(fp)
10011c54:	001051c0 	call	1001051c <alt_release_fd>
    ALT_ERRNO = -status;
10011c58:	00119e80 	call	100119e8 <alt_get_errno>
10011c5c:	1007883a 	mov	r3,r2
10011c60:	e0bffa17 	ldw	r2,-24(fp)
10011c64:	0085c83a 	sub	r2,zero,r2
10011c68:	18800015 	stw	r2,0(r3)
    return -1;
10011c6c:	00bfffc4 	movi	r2,-1
10011c70:	00000106 	br	10011c78 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10011c74:	e0bff917 	ldw	r2,-28(fp)
}
10011c78:	e037883a 	mov	sp,fp
10011c7c:	dfc00117 	ldw	ra,4(sp)
10011c80:	df000017 	ldw	fp,0(sp)
10011c84:	dec00204 	addi	sp,sp,8
10011c88:	f800283a 	ret

10011c8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011c8c:	defffa04 	addi	sp,sp,-24
10011c90:	df000515 	stw	fp,20(sp)
10011c94:	df000504 	addi	fp,sp,20
10011c98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c9c:	0005303a 	rdctl	r2,status
10011ca0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011ca4:	e0fffc17 	ldw	r3,-16(fp)
10011ca8:	00bfff84 	movi	r2,-2
10011cac:	1884703a 	and	r2,r3,r2
10011cb0:	1001703a 	wrctl	status,r2
  
  return context;
10011cb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011cb8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011cbc:	e0bfff17 	ldw	r2,-4(fp)
10011cc0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011cc4:	e0bffd17 	ldw	r2,-12(fp)
10011cc8:	10800017 	ldw	r2,0(r2)
10011ccc:	e0fffd17 	ldw	r3,-12(fp)
10011cd0:	18c00117 	ldw	r3,4(r3)
10011cd4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011cd8:	e0bffd17 	ldw	r2,-12(fp)
10011cdc:	10800117 	ldw	r2,4(r2)
10011ce0:	e0fffd17 	ldw	r3,-12(fp)
10011ce4:	18c00017 	ldw	r3,0(r3)
10011ce8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011cec:	e0bffd17 	ldw	r2,-12(fp)
10011cf0:	e0fffd17 	ldw	r3,-12(fp)
10011cf4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011cf8:	e0bffd17 	ldw	r2,-12(fp)
10011cfc:	e0fffd17 	ldw	r3,-12(fp)
10011d00:	10c00015 	stw	r3,0(r2)
10011d04:	e0bffb17 	ldw	r2,-20(fp)
10011d08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d0c:	e0bffe17 	ldw	r2,-8(fp)
10011d10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011d14:	e037883a 	mov	sp,fp
10011d18:	df000017 	ldw	fp,0(sp)
10011d1c:	dec00104 	addi	sp,sp,4
10011d20:	f800283a 	ret

10011d24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011d24:	defffb04 	addi	sp,sp,-20
10011d28:	dfc00415 	stw	ra,16(sp)
10011d2c:	df000315 	stw	fp,12(sp)
10011d30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011d34:	d0a00f17 	ldw	r2,-32708(gp)
10011d38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011d3c:	d0a6e017 	ldw	r2,-25728(gp)
10011d40:	10800044 	addi	r2,r2,1
10011d44:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011d48:	00002e06 	br	10011e04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011d4c:	e0bffd17 	ldw	r2,-12(fp)
10011d50:	10800017 	ldw	r2,0(r2)
10011d54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011d58:	e0bffd17 	ldw	r2,-12(fp)
10011d5c:	10800403 	ldbu	r2,16(r2)
10011d60:	10803fcc 	andi	r2,r2,255
10011d64:	10000426 	beq	r2,zero,10011d78 <alt_tick+0x54>
10011d68:	d0a6e017 	ldw	r2,-25728(gp)
10011d6c:	1000021e 	bne	r2,zero,10011d78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011d70:	e0bffd17 	ldw	r2,-12(fp)
10011d74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011d78:	e0bffd17 	ldw	r2,-12(fp)
10011d7c:	10800217 	ldw	r2,8(r2)
10011d80:	d0e6e017 	ldw	r3,-25728(gp)
10011d84:	18801d36 	bltu	r3,r2,10011dfc <alt_tick+0xd8>
10011d88:	e0bffd17 	ldw	r2,-12(fp)
10011d8c:	10800403 	ldbu	r2,16(r2)
10011d90:	10803fcc 	andi	r2,r2,255
10011d94:	1000191e 	bne	r2,zero,10011dfc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011d98:	e0bffd17 	ldw	r2,-12(fp)
10011d9c:	10800317 	ldw	r2,12(r2)
10011da0:	e0fffd17 	ldw	r3,-12(fp)
10011da4:	18c00517 	ldw	r3,20(r3)
10011da8:	1809883a 	mov	r4,r3
10011dac:	103ee83a 	callr	r2
10011db0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011db4:	e0bfff17 	ldw	r2,-4(fp)
10011db8:	1000031e 	bne	r2,zero,10011dc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011dbc:	e13ffd17 	ldw	r4,-12(fp)
10011dc0:	0011c8c0 	call	10011c8c <alt_alarm_stop>
10011dc4:	00000d06 	br	10011dfc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011dc8:	e0bffd17 	ldw	r2,-12(fp)
10011dcc:	10c00217 	ldw	r3,8(r2)
10011dd0:	e0bfff17 	ldw	r2,-4(fp)
10011dd4:	1887883a 	add	r3,r3,r2
10011dd8:	e0bffd17 	ldw	r2,-12(fp)
10011ddc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011de0:	e0bffd17 	ldw	r2,-12(fp)
10011de4:	10c00217 	ldw	r3,8(r2)
10011de8:	d0a6e017 	ldw	r2,-25728(gp)
10011dec:	1880032e 	bgeu	r3,r2,10011dfc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011df0:	e0bffd17 	ldw	r2,-12(fp)
10011df4:	00c00044 	movi	r3,1
10011df8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011dfc:	e0bffe17 	ldw	r2,-8(fp)
10011e00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011e04:	e0fffd17 	ldw	r3,-12(fp)
10011e08:	d0a00f04 	addi	r2,gp,-32708
10011e0c:	18bfcf1e 	bne	r3,r2,10011d4c <__alt_data_end+0xf8011d4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011e10:	0001883a 	nop
}
10011e14:	e037883a 	mov	sp,fp
10011e18:	dfc00117 	ldw	ra,4(sp)
10011e1c:	df000017 	ldw	fp,0(sp)
10011e20:	dec00204 	addi	sp,sp,8
10011e24:	f800283a 	ret

10011e28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011e28:	deffff04 	addi	sp,sp,-4
10011e2c:	df000015 	stw	fp,0(sp)
10011e30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011e34:	000170fa 	wrctl	ienable,zero
}
10011e38:	e037883a 	mov	sp,fp
10011e3c:	df000017 	ldw	fp,0(sp)
10011e40:	dec00104 	addi	sp,sp,4
10011e44:	f800283a 	ret

10011e48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011e48:	defffa04 	addi	sp,sp,-24
10011e4c:	dfc00515 	stw	ra,20(sp)
10011e50:	df000415 	stw	fp,16(sp)
10011e54:	df000404 	addi	fp,sp,16
10011e58:	e13ffe15 	stw	r4,-8(fp)
10011e5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011e60:	e0bfff17 	ldw	r2,-4(fp)
10011e64:	10800017 	ldw	r2,0(r2)
10011e68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011e6c:	e13ffe17 	ldw	r4,-8(fp)
10011e70:	000d2c80 	call	1000d2c8 <strlen>
10011e74:	10800044 	addi	r2,r2,1
10011e78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011e7c:	00000d06 	br	10011eb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011e80:	e0bffc17 	ldw	r2,-16(fp)
10011e84:	10c00217 	ldw	r3,8(r2)
10011e88:	e0bffd17 	ldw	r2,-12(fp)
10011e8c:	1809883a 	mov	r4,r3
10011e90:	e17ffe17 	ldw	r5,-8(fp)
10011e94:	100d883a 	mov	r6,r2
10011e98:	00121a80 	call	100121a8 <memcmp>
10011e9c:	1000021e 	bne	r2,zero,10011ea8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011ea0:	e0bffc17 	ldw	r2,-16(fp)
10011ea4:	00000706 	br	10011ec4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011ea8:	e0bffc17 	ldw	r2,-16(fp)
10011eac:	10800017 	ldw	r2,0(r2)
10011eb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011eb4:	e0fffc17 	ldw	r3,-16(fp)
10011eb8:	e0bfff17 	ldw	r2,-4(fp)
10011ebc:	18bff01e 	bne	r3,r2,10011e80 <__alt_data_end+0xf8011e80>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011ec0:	0005883a 	mov	r2,zero
}
10011ec4:	e037883a 	mov	sp,fp
10011ec8:	dfc00117 	ldw	ra,4(sp)
10011ecc:	df000017 	ldw	fp,0(sp)
10011ed0:	dec00204 	addi	sp,sp,8
10011ed4:	f800283a 	ret

10011ed8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011ed8:	defffb04 	addi	sp,sp,-20
10011edc:	dfc00415 	stw	ra,16(sp)
10011ee0:	df000315 	stw	fp,12(sp)
10011ee4:	df000304 	addi	fp,sp,12
10011ee8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011eec:	00840074 	movhi	r2,4097
10011ef0:	1090d604 	addi	r2,r2,17240
10011ef4:	10800017 	ldw	r2,0(r2)
10011ef8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011efc:	00003106 	br	10011fc4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10011f00:	e0bffd17 	ldw	r2,-12(fp)
10011f04:	10800217 	ldw	r2,8(r2)
10011f08:	1009883a 	mov	r4,r2
10011f0c:	000d2c80 	call	1000d2c8 <strlen>
10011f10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011f14:	e0bffd17 	ldw	r2,-12(fp)
10011f18:	10c00217 	ldw	r3,8(r2)
10011f1c:	e0bffe17 	ldw	r2,-8(fp)
10011f20:	10bfffc4 	addi	r2,r2,-1
10011f24:	1885883a 	add	r2,r3,r2
10011f28:	10800003 	ldbu	r2,0(r2)
10011f2c:	10803fcc 	andi	r2,r2,255
10011f30:	1080201c 	xori	r2,r2,128
10011f34:	10bfe004 	addi	r2,r2,-128
10011f38:	10800bd8 	cmpnei	r2,r2,47
10011f3c:	1000031e 	bne	r2,zero,10011f4c <alt_find_file+0x74>
    {
      len -= 1;
10011f40:	e0bffe17 	ldw	r2,-8(fp)
10011f44:	10bfffc4 	addi	r2,r2,-1
10011f48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011f4c:	e0bffe17 	ldw	r2,-8(fp)
10011f50:	e0ffff17 	ldw	r3,-4(fp)
10011f54:	1885883a 	add	r2,r3,r2
10011f58:	10800003 	ldbu	r2,0(r2)
10011f5c:	10803fcc 	andi	r2,r2,255
10011f60:	1080201c 	xori	r2,r2,128
10011f64:	10bfe004 	addi	r2,r2,-128
10011f68:	10800be0 	cmpeqi	r2,r2,47
10011f6c:	1000081e 	bne	r2,zero,10011f90 <alt_find_file+0xb8>
10011f70:	e0bffe17 	ldw	r2,-8(fp)
10011f74:	e0ffff17 	ldw	r3,-4(fp)
10011f78:	1885883a 	add	r2,r3,r2
10011f7c:	10800003 	ldbu	r2,0(r2)
10011f80:	10803fcc 	andi	r2,r2,255
10011f84:	1080201c 	xori	r2,r2,128
10011f88:	10bfe004 	addi	r2,r2,-128
10011f8c:	10000a1e 	bne	r2,zero,10011fb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011f90:	e0bffd17 	ldw	r2,-12(fp)
10011f94:	10c00217 	ldw	r3,8(r2)
10011f98:	e0bffe17 	ldw	r2,-8(fp)
10011f9c:	1809883a 	mov	r4,r3
10011fa0:	e17fff17 	ldw	r5,-4(fp)
10011fa4:	100d883a 	mov	r6,r2
10011fa8:	00121a80 	call	100121a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011fac:	1000021e 	bne	r2,zero,10011fb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011fb0:	e0bffd17 	ldw	r2,-12(fp)
10011fb4:	00000806 	br	10011fd8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10011fb8:	e0bffd17 	ldw	r2,-12(fp)
10011fbc:	10800017 	ldw	r2,0(r2)
10011fc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011fc4:	e0fffd17 	ldw	r3,-12(fp)
10011fc8:	00840074 	movhi	r2,4097
10011fcc:	1090d604 	addi	r2,r2,17240
10011fd0:	18bfcb1e 	bne	r3,r2,10011f00 <__alt_data_end+0xf8011f00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011fd4:	0005883a 	mov	r2,zero
}
10011fd8:	e037883a 	mov	sp,fp
10011fdc:	dfc00117 	ldw	ra,4(sp)
10011fe0:	df000017 	ldw	fp,0(sp)
10011fe4:	dec00204 	addi	sp,sp,8
10011fe8:	f800283a 	ret

10011fec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011fec:	defffa04 	addi	sp,sp,-24
10011ff0:	dfc00515 	stw	ra,20(sp)
10011ff4:	df000415 	stw	fp,16(sp)
10011ff8:	dc000315 	stw	r16,12(sp)
10011ffc:	df000404 	addi	fp,sp,16
10012000:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10012004:	00bffa04 	movi	r2,-24
10012008:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001200c:	e03ffc15 	stw	zero,-16(fp)
10012010:	00002106 	br	10012098 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10012014:	04040074 	movhi	r16,4097
10012018:	840c5704 	addi	r16,r16,12636
1001201c:	e0bffc17 	ldw	r2,-16(fp)
10012020:	1009883a 	mov	r4,r2
10012024:	01400304 	movi	r5,12
10012028:	00040f80 	call	100040f8 <__mulsi3>
1001202c:	8085883a 	add	r2,r16,r2
10012030:	10800017 	ldw	r2,0(r2)
10012034:	1000151e 	bne	r2,zero,1001208c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10012038:	04040074 	movhi	r16,4097
1001203c:	840c5704 	addi	r16,r16,12636
10012040:	e0bffc17 	ldw	r2,-16(fp)
10012044:	1009883a 	mov	r4,r2
10012048:	01400304 	movi	r5,12
1001204c:	00040f80 	call	100040f8 <__mulsi3>
10012050:	8085883a 	add	r2,r16,r2
10012054:	e0fffe17 	ldw	r3,-8(fp)
10012058:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1001205c:	00840074 	movhi	r2,4097
10012060:	1090da04 	addi	r2,r2,17256
10012064:	10c00017 	ldw	r3,0(r2)
10012068:	e0bffc17 	ldw	r2,-16(fp)
1001206c:	1880040e 	bge	r3,r2,10012080 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10012070:	00840074 	movhi	r2,4097
10012074:	1090da04 	addi	r2,r2,17256
10012078:	e0fffc17 	ldw	r3,-16(fp)
1001207c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10012080:	e0bffc17 	ldw	r2,-16(fp)
10012084:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10012088:	00000606 	br	100120a4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001208c:	e0bffc17 	ldw	r2,-16(fp)
10012090:	10800044 	addi	r2,r2,1
10012094:	e0bffc15 	stw	r2,-16(fp)
10012098:	e0bffc17 	ldw	r2,-16(fp)
1001209c:	10800810 	cmplti	r2,r2,32
100120a0:	103fdc1e 	bne	r2,zero,10012014 <__alt_data_end+0xf8012014>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100120a4:	e0bffd17 	ldw	r2,-12(fp)
}
100120a8:	e6ffff04 	addi	sp,fp,-4
100120ac:	dfc00217 	ldw	ra,8(sp)
100120b0:	df000117 	ldw	fp,4(sp)
100120b4:	dc000017 	ldw	r16,0(sp)
100120b8:	dec00304 	addi	sp,sp,12
100120bc:	f800283a 	ret

100120c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100120c0:	defffe04 	addi	sp,sp,-8
100120c4:	df000115 	stw	fp,4(sp)
100120c8:	df000104 	addi	fp,sp,4
100120cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100120d0:	e0bfff17 	ldw	r2,-4(fp)
100120d4:	10bffe84 	addi	r2,r2,-6
100120d8:	10c00428 	cmpgeui	r3,r2,16
100120dc:	18001a1e 	bne	r3,zero,10012148 <alt_exception_cause_generated_bad_addr+0x88>
100120e0:	100690ba 	slli	r3,r2,2
100120e4:	00840074 	movhi	r2,4097
100120e8:	10883e04 	addi	r2,r2,8440
100120ec:	1885883a 	add	r2,r3,r2
100120f0:	10800017 	ldw	r2,0(r2)
100120f4:	1000683a 	jmp	r2
100120f8:	10012138 	rdprs	zero,r2,1156
100120fc:	10012138 	rdprs	zero,r2,1156
10012100:	10012148 	cmpgei	zero,r2,1157
10012104:	10012148 	cmpgei	zero,r2,1157
10012108:	10012148 	cmpgei	zero,r2,1157
1001210c:	10012138 	rdprs	zero,r2,1156
10012110:	10012140 	call	11001214 <_gp+0xfe4ed8>
10012114:	10012148 	cmpgei	zero,r2,1157
10012118:	10012138 	rdprs	zero,r2,1156
1001211c:	10012138 	rdprs	zero,r2,1156
10012120:	10012148 	cmpgei	zero,r2,1157
10012124:	10012138 	rdprs	zero,r2,1156
10012128:	10012140 	call	11001214 <_gp+0xfe4ed8>
1001212c:	10012148 	cmpgei	zero,r2,1157
10012130:	10012148 	cmpgei	zero,r2,1157
10012134:	10012138 	rdprs	zero,r2,1156
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10012138:	00800044 	movi	r2,1
1001213c:	00000306 	br	1001214c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10012140:	0005883a 	mov	r2,zero
10012144:	00000106 	br	1001214c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10012148:	0005883a 	mov	r2,zero
  }
}
1001214c:	e037883a 	mov	sp,fp
10012150:	df000017 	ldw	fp,0(sp)
10012154:	dec00104 	addi	sp,sp,4
10012158:	f800283a 	ret

1001215c <atexit>:
1001215c:	200b883a 	mov	r5,r4
10012160:	000d883a 	mov	r6,zero
10012164:	0009883a 	mov	r4,zero
10012168:	000f883a 	mov	r7,zero
1001216c:	00122241 	jmpi	10012224 <__register_exitproc>

10012170 <exit>:
10012170:	defffe04 	addi	sp,sp,-8
10012174:	000b883a 	mov	r5,zero
10012178:	dc000015 	stw	r16,0(sp)
1001217c:	dfc00115 	stw	ra,4(sp)
10012180:	2021883a 	mov	r16,r4
10012184:	00123380 	call	10012338 <__call_exitprocs>
10012188:	00840074 	movhi	r2,4097
1001218c:	1090d004 	addi	r2,r2,17216
10012190:	11000017 	ldw	r4,0(r2)
10012194:	20800f17 	ldw	r2,60(r4)
10012198:	10000126 	beq	r2,zero,100121a0 <exit+0x30>
1001219c:	103ee83a 	callr	r2
100121a0:	8009883a 	mov	r4,r16
100121a4:	00124cc0 	call	100124cc <_exit>

100121a8 <memcmp>:
100121a8:	01c000c4 	movi	r7,3
100121ac:	3980192e 	bgeu	r7,r6,10012214 <memcmp+0x6c>
100121b0:	2144b03a 	or	r2,r4,r5
100121b4:	11c4703a 	and	r2,r2,r7
100121b8:	10000f26 	beq	r2,zero,100121f8 <memcmp+0x50>
100121bc:	20800003 	ldbu	r2,0(r4)
100121c0:	28c00003 	ldbu	r3,0(r5)
100121c4:	10c0151e 	bne	r2,r3,1001221c <memcmp+0x74>
100121c8:	31bfff84 	addi	r6,r6,-2
100121cc:	01ffffc4 	movi	r7,-1
100121d0:	00000406 	br	100121e4 <memcmp+0x3c>
100121d4:	20800003 	ldbu	r2,0(r4)
100121d8:	28c00003 	ldbu	r3,0(r5)
100121dc:	31bfffc4 	addi	r6,r6,-1
100121e0:	10c00e1e 	bne	r2,r3,1001221c <memcmp+0x74>
100121e4:	21000044 	addi	r4,r4,1
100121e8:	29400044 	addi	r5,r5,1
100121ec:	31fff91e 	bne	r6,r7,100121d4 <__alt_data_end+0xf80121d4>
100121f0:	0005883a 	mov	r2,zero
100121f4:	f800283a 	ret
100121f8:	20c00017 	ldw	r3,0(r4)
100121fc:	28800017 	ldw	r2,0(r5)
10012200:	1880041e 	bne	r3,r2,10012214 <memcmp+0x6c>
10012204:	31bfff04 	addi	r6,r6,-4
10012208:	21000104 	addi	r4,r4,4
1001220c:	29400104 	addi	r5,r5,4
10012210:	39bff936 	bltu	r7,r6,100121f8 <__alt_data_end+0xf80121f8>
10012214:	303fe91e 	bne	r6,zero,100121bc <__alt_data_end+0xf80121bc>
10012218:	003ff506 	br	100121f0 <__alt_data_end+0xf80121f0>
1001221c:	10c5c83a 	sub	r2,r2,r3
10012220:	f800283a 	ret

10012224 <__register_exitproc>:
10012224:	00840074 	movhi	r2,4097
10012228:	defffa04 	addi	sp,sp,-24
1001222c:	1090d004 	addi	r2,r2,17216
10012230:	dc000315 	stw	r16,12(sp)
10012234:	14000017 	ldw	r16,0(r2)
10012238:	dc400415 	stw	r17,16(sp)
1001223c:	dfc00515 	stw	ra,20(sp)
10012240:	80805217 	ldw	r2,328(r16)
10012244:	2023883a 	mov	r17,r4
10012248:	10003626 	beq	r2,zero,10012324 <__register_exitproc+0x100>
1001224c:	10c00117 	ldw	r3,4(r2)
10012250:	010007c4 	movi	r4,31
10012254:	20c00e16 	blt	r4,r3,10012290 <__register_exitproc+0x6c>
10012258:	1a400044 	addi	r9,r3,1
1001225c:	8800211e 	bne	r17,zero,100122e4 <__register_exitproc+0xc0>
10012260:	18c00084 	addi	r3,r3,2
10012264:	18c7883a 	add	r3,r3,r3
10012268:	18c7883a 	add	r3,r3,r3
1001226c:	12400115 	stw	r9,4(r2)
10012270:	10c7883a 	add	r3,r2,r3
10012274:	19400015 	stw	r5,0(r3)
10012278:	0005883a 	mov	r2,zero
1001227c:	dfc00517 	ldw	ra,20(sp)
10012280:	dc400417 	ldw	r17,16(sp)
10012284:	dc000317 	ldw	r16,12(sp)
10012288:	dec00604 	addi	sp,sp,24
1001228c:	f800283a 	ret
10012290:	00800034 	movhi	r2,0
10012294:	10800004 	addi	r2,r2,0
10012298:	10002526 	beq	r2,zero,10012330 <__register_exitproc+0x10c>
1001229c:	01006404 	movi	r4,400
100122a0:	d9400015 	stw	r5,0(sp)
100122a4:	d9800115 	stw	r6,4(sp)
100122a8:	d9c00215 	stw	r7,8(sp)
100122ac:	00000000 	call	10000000 <__alt_mem_sdram>
100122b0:	d9400017 	ldw	r5,0(sp)
100122b4:	d9800117 	ldw	r6,4(sp)
100122b8:	d9c00217 	ldw	r7,8(sp)
100122bc:	10001c26 	beq	r2,zero,10012330 <__register_exitproc+0x10c>
100122c0:	80c05217 	ldw	r3,328(r16)
100122c4:	10000115 	stw	zero,4(r2)
100122c8:	02400044 	movi	r9,1
100122cc:	10c00015 	stw	r3,0(r2)
100122d0:	80805215 	stw	r2,328(r16)
100122d4:	10006215 	stw	zero,392(r2)
100122d8:	10006315 	stw	zero,396(r2)
100122dc:	0007883a 	mov	r3,zero
100122e0:	883fdf26 	beq	r17,zero,10012260 <__alt_data_end+0xf8012260>
100122e4:	18d1883a 	add	r8,r3,r3
100122e8:	4211883a 	add	r8,r8,r8
100122ec:	1211883a 	add	r8,r2,r8
100122f0:	41802215 	stw	r6,136(r8)
100122f4:	01000044 	movi	r4,1
100122f8:	11806217 	ldw	r6,392(r2)
100122fc:	20c8983a 	sll	r4,r4,r3
10012300:	310cb03a 	or	r6,r6,r4
10012304:	11806215 	stw	r6,392(r2)
10012308:	41c04215 	stw	r7,264(r8)
1001230c:	01800084 	movi	r6,2
10012310:	89bfd31e 	bne	r17,r6,10012260 <__alt_data_end+0xf8012260>
10012314:	11806317 	ldw	r6,396(r2)
10012318:	3108b03a 	or	r4,r6,r4
1001231c:	11006315 	stw	r4,396(r2)
10012320:	003fcf06 	br	10012260 <__alt_data_end+0xf8012260>
10012324:	80805304 	addi	r2,r16,332
10012328:	80805215 	stw	r2,328(r16)
1001232c:	003fc706 	br	1001224c <__alt_data_end+0xf801224c>
10012330:	00bfffc4 	movi	r2,-1
10012334:	003fd106 	br	1001227c <__alt_data_end+0xf801227c>

10012338 <__call_exitprocs>:
10012338:	00840074 	movhi	r2,4097
1001233c:	1090d004 	addi	r2,r2,17216
10012340:	10800017 	ldw	r2,0(r2)
10012344:	defff404 	addi	sp,sp,-48
10012348:	dd800815 	stw	r22,32(sp)
1001234c:	d8800015 	stw	r2,0(sp)
10012350:	10805204 	addi	r2,r2,328
10012354:	dd000615 	stw	r20,24(sp)
10012358:	dc800415 	stw	r18,16(sp)
1001235c:	dfc00b15 	stw	ra,44(sp)
10012360:	df000a15 	stw	fp,40(sp)
10012364:	ddc00915 	stw	r23,36(sp)
10012368:	dd400715 	stw	r21,28(sp)
1001236c:	dcc00515 	stw	r19,20(sp)
10012370:	dc400315 	stw	r17,12(sp)
10012374:	dc000215 	stw	r16,8(sp)
10012378:	2025883a 	mov	r18,r4
1001237c:	2829883a 	mov	r20,r5
10012380:	d8800115 	stw	r2,4(sp)
10012384:	05bfffc4 	movi	r22,-1
10012388:	d8800017 	ldw	r2,0(sp)
1001238c:	14c05217 	ldw	r19,328(r2)
10012390:	98001d26 	beq	r19,zero,10012408 <__call_exitprocs+0xd0>
10012394:	dd400117 	ldw	r21,4(sp)
10012398:	98800117 	ldw	r2,4(r19)
1001239c:	173fffc4 	addi	fp,r2,-1
100123a0:	e0000d16 	blt	fp,zero,100123d8 <__call_exitprocs+0xa0>
100123a4:	14000044 	addi	r16,r2,1
100123a8:	8421883a 	add	r16,r16,r16
100123ac:	8421883a 	add	r16,r16,r16
100123b0:	84402004 	addi	r17,r16,128
100123b4:	9c63883a 	add	r17,r19,r17
100123b8:	9c21883a 	add	r16,r19,r16
100123bc:	a0001e26 	beq	r20,zero,10012438 <__call_exitprocs+0x100>
100123c0:	80804017 	ldw	r2,256(r16)
100123c4:	15001c26 	beq	r2,r20,10012438 <__call_exitprocs+0x100>
100123c8:	e73fffc4 	addi	fp,fp,-1
100123cc:	843fff04 	addi	r16,r16,-4
100123d0:	8c7fff04 	addi	r17,r17,-4
100123d4:	e5bff91e 	bne	fp,r22,100123bc <__alt_data_end+0xf80123bc>
100123d8:	00800034 	movhi	r2,0
100123dc:	10800004 	addi	r2,r2,0
100123e0:	10000926 	beq	r2,zero,10012408 <__call_exitprocs+0xd0>
100123e4:	98800117 	ldw	r2,4(r19)
100123e8:	1000311e 	bne	r2,zero,100124b0 <__call_exitprocs+0x178>
100123ec:	98800017 	ldw	r2,0(r19)
100123f0:	10003426 	beq	r2,zero,100124c4 <__call_exitprocs+0x18c>
100123f4:	9809883a 	mov	r4,r19
100123f8:	a8800015 	stw	r2,0(r21)
100123fc:	00000000 	call	10000000 <__alt_mem_sdram>
10012400:	acc00017 	ldw	r19,0(r21)
10012404:	983fe41e 	bne	r19,zero,10012398 <__alt_data_end+0xf8012398>
10012408:	dfc00b17 	ldw	ra,44(sp)
1001240c:	df000a17 	ldw	fp,40(sp)
10012410:	ddc00917 	ldw	r23,36(sp)
10012414:	dd800817 	ldw	r22,32(sp)
10012418:	dd400717 	ldw	r21,28(sp)
1001241c:	dd000617 	ldw	r20,24(sp)
10012420:	dcc00517 	ldw	r19,20(sp)
10012424:	dc800417 	ldw	r18,16(sp)
10012428:	dc400317 	ldw	r17,12(sp)
1001242c:	dc000217 	ldw	r16,8(sp)
10012430:	dec00c04 	addi	sp,sp,48
10012434:	f800283a 	ret
10012438:	98800117 	ldw	r2,4(r19)
1001243c:	80c00017 	ldw	r3,0(r16)
10012440:	10bfffc4 	addi	r2,r2,-1
10012444:	17001526 	beq	r2,fp,1001249c <__call_exitprocs+0x164>
10012448:	80000015 	stw	zero,0(r16)
1001244c:	183fde26 	beq	r3,zero,100123c8 <__alt_data_end+0xf80123c8>
10012450:	00800044 	movi	r2,1
10012454:	1708983a 	sll	r4,r2,fp
10012458:	98806217 	ldw	r2,392(r19)
1001245c:	9dc00117 	ldw	r23,4(r19)
10012460:	2084703a 	and	r2,r4,r2
10012464:	1000061e 	bne	r2,zero,10012480 <__call_exitprocs+0x148>
10012468:	183ee83a 	callr	r3
1001246c:	98800117 	ldw	r2,4(r19)
10012470:	15ffc51e 	bne	r2,r23,10012388 <__alt_data_end+0xf8012388>
10012474:	a8800017 	ldw	r2,0(r21)
10012478:	14ffd326 	beq	r2,r19,100123c8 <__alt_data_end+0xf80123c8>
1001247c:	003fc206 	br	10012388 <__alt_data_end+0xf8012388>
10012480:	98806317 	ldw	r2,396(r19)
10012484:	2084703a 	and	r2,r4,r2
10012488:	1000061e 	bne	r2,zero,100124a4 <__call_exitprocs+0x16c>
1001248c:	89400017 	ldw	r5,0(r17)
10012490:	9009883a 	mov	r4,r18
10012494:	183ee83a 	callr	r3
10012498:	003ff406 	br	1001246c <__alt_data_end+0xf801246c>
1001249c:	9f000115 	stw	fp,4(r19)
100124a0:	003fea06 	br	1001244c <__alt_data_end+0xf801244c>
100124a4:	89000017 	ldw	r4,0(r17)
100124a8:	183ee83a 	callr	r3
100124ac:	003fef06 	br	1001246c <__alt_data_end+0xf801246c>
100124b0:	98800017 	ldw	r2,0(r19)
100124b4:	982b883a 	mov	r21,r19
100124b8:	1027883a 	mov	r19,r2
100124bc:	983fb61e 	bne	r19,zero,10012398 <__alt_data_end+0xf8012398>
100124c0:	003fd106 	br	10012408 <__alt_data_end+0xf8012408>
100124c4:	0005883a 	mov	r2,zero
100124c8:	003ffa06 	br	100124b4 <__alt_data_end+0xf80124b4>

100124cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100124cc:	defffd04 	addi	sp,sp,-12
100124d0:	df000215 	stw	fp,8(sp)
100124d4:	df000204 	addi	fp,sp,8
100124d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100124dc:	0001883a 	nop
100124e0:	e0bfff17 	ldw	r2,-4(fp)
100124e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100124e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100124ec:	10000226 	beq	r2,zero,100124f8 <_exit+0x2c>
    ALT_SIM_FAIL();
100124f0:	002af070 	cmpltui	zero,zero,43969
100124f4:	00000106 	br	100124fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100124f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100124fc:	003fff06 	br	100124fc <__alt_data_end+0xf80124fc>
