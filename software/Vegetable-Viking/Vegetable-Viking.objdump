
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000123e0 memsz 0x000123e0 flags r-x
    LOAD off    0x00013400 vaddr 0x10012400 paddr 0x10013ef0 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x000159e0 vaddr 0x100159e0 paddr 0x100159e0 align 2**12
         filesz 0x00000000 memsz 0x000003a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011e28  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003ac  10012054  10012054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10012400  10013ef0  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003a0  100159e0  100159e0  000159e0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014ef0  2**0
                  CONTENTS
  7 .sdram        00000000  10015d80  10015d80  00014ef0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014ef0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e88  00000000  00000000  00014f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025435  00000000  00000000  00015da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000099da  00000000  00000000  0003b1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c23c  00000000  00000000  00044baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002400  00000000  00000000  00050dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003cf2  00000000  00000000  000531ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018d1a  00000000  00000000  00056ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006fbf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001438  00000000  00000000  0006fc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007453a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007453d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00074549  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007454a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007454b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007454f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00074553  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00074557  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00074562  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007456d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00074578  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00074583  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0007459d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c5328  00000000  00000000  000789e4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10012054 l    d  .rodata	00000000 .rodata
10012400 l    d  .rwdata	00000000 .rwdata
100159e0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015d80 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
100120e4 l     O .rodata	00000010 bp
100120c4 l     O .rodata	00000010 dp_l
100120d4 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
100120f4 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003ca8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
10012400 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001224a l     O .rodata	00000010 zeroes.4181
1001225a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000893c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000a4e4 l     F .text	00000008 __fp_lock
1000a4ec l     F .text	00000008 __fp_unlock
1000a500 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
10012844 l     O .rwdata	00000020 lc_ctype_charset
10012824 l     O .rwdata	00000020 lc_message_charset
10012864 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012288 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000ceb4 l     F .text	000000fc __sprint_r.part.0
100123bc l     O .rodata	00000010 blanks.4125
100123ac l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f8fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fa24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fa50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fb58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000fc54 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fd38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ff1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013ee0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
100101a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100102f0 l     F .text	00000038 alt_dev_reg
10012e4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100105cc l     F .text	00000204 altera_avalon_jtag_uart_irq
100107d0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010f4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100113e4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1001153c l     F .text	00000050 alt_get_errno
1001158c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015a14 g     O .bss	00000004 alt_instruction_exception_handler
10001010 g     F .text	000000bc convertDecimalToBinary
1000ca70 g     F .text	00000074 _mprec_log10
1000cb5c g     F .text	0000008c __any_on
1000ed84 g     F .text	00000054 _isatty_r
10012294 g     O .rodata	00000028 __mprec_tinytens
1000fe64 g     F .text	00000078 alt_main
10015c80 g     O .bss	00000100 alt_irq
10002a48 g     F .text	00000014 fabs
1000edd8 g     F .text	0000005c _lseek_r
10013ef0 g       *ABS*	00000000 __flash_rwdata_start
10005018 g     F .text	00000084 .hidden __eqdf2
10015d80 g       *ABS*	00000000 __alt_heap_start
10006634 g     F .text	0000003c printf
1000f6fc g     F .text	0000009c _wcrtomb_r
1000cd14 g     F .text	0000005c __sseek
1000a848 g     F .text	00000010 __sinit
1000f58c g     F .text	00000154 __swbuf_r
1000ae1c g     F .text	0000007c _setlocale_r
1000a6a0 g     F .text	00000078 __sfmoreglue
1000fefc g     F .text	00000020 __malloc_unlock
100004dc g     F .text	000002f8 spawningEngine
1000ee34 g     F .text	0000015c memmove
1000a830 g     F .text	00000018 _cleanup
1000bba0 g     F .text	000000a8 _Balloc
1000509c g     F .text	000000e0 .hidden __gtdf2
1001197c g     F .text	00000020 altera_nios2_gen2_irq_init
100065f8 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e888 g     F .text	00000058 _fstat_r
100159f8 g     O .bss	00000004 errno
1000cc90 g     F .text	00000008 __seofread
10015a00 g     O .bss	00000004 alt_argv
1001beac g       *ABS*	00000000 _gp
10012ccc g     O .rwdata	00000180 alt_fd_list
1001199c g     F .text	00000090 alt_find_dev
1000b944 g     F .text	00000138 memcpy
1000a4f4 g     F .text	0000000c _cleanup_r
10006420 g     F .text	000000d0 .hidden __floatsidf
100114c4 g     F .text	00000078 alt_io_redirect
1000517c g     F .text	000000e0 .hidden __ltdf2
10012054 g       *ABS*	00000000 __DTOR_END__
10011c14 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002a78 g     F .text	00000074 __fpclassifyd
1000c9cc g     F .text	000000a4 __ratio
1000e3ec g     F .text	00000024 __vfiprintf_internal
100109cc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10006608 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003dc4 g     F .text	00000008 .hidden __udivsi3
1000fba8 g     F .text	000000ac isatty
100122e4 g     O .rodata	000000c8 __mprec_tens
1000ae98 g     F .text	0000000c __locale_charset
10002fd8 g     F .text	00000074 .hidden __fixunsdfsi
100159f4 g     O .bss	00000004 __malloc_top_pad
10013eb8 g     O .rwdata	00000004 __mb_cur_max
1000aec8 g     F .text	0000000c _localeconv_r
1000e8e0 g     F .text	000004a4 __sfvwrite_r
1000bfc8 g     F .text	0000003c __i2b
1000cbe8 g     F .text	00000054 _sbrk_r
1000ef90 g     F .text	0000005c _read_r
10013ed8 g     O .rwdata	00000004 alt_max_fd
1000e598 g     F .text	00000100 _fclose_r
1000a4b4 g     F .text	00000030 fflush
100159f0 g     O .bss	00000004 __malloc_max_sbrked_mem
10003dfc g     F .text	0000089c .hidden __adddf3
1000c774 g     F .text	0000011c __b2d
1000368c g     F .text	0000061c .hidden __umoddi3
1000fd88 g     F .text	000000dc lseek
10013eac g     O .rwdata	00000004 __fdlib_version
10013eb0 g     O .rwdata	00000004 _global_impure_ptr
1000efec g     F .text	000005a0 _realloc_r
10015d80 g       *ABS*	00000000 __bss_end
100112f4 g     F .text	000000f0 alt_iic_isr_register
10015a40 g     O .bss	00000240 veggieObject
10011878 g     F .text	00000104 alt_tick
1000304c g     F .text	00000640 .hidden __udivdi3
1000e6ac g     F .text	00000184 _fputwc_r
100122bc g     O .rodata	00000028 __mprec_bigtens
1000bdac g     F .text	00000104 __s2b
100064f0 g     F .text	000000a4 .hidden __floatunsidf
1000c51c g     F .text	00000060 __mcmp
1000a868 g     F .text	00000018 __fp_lock_all
100112a8 g     F .text	0000004c alt_ic_irq_enabled
100117e0 g     F .text	00000098 alt_alarm_stop
10015a08 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10012ca4 g     O .rwdata	00000028 alt_dev_null
10002b00 g     F .text	000001e4 rint
10010f30 g     F .text	0000001c alt_dcache_flush_all
1000beb0 g     F .text	00000068 __hi0bits
10006398 g     F .text	00000088 .hidden __fixdfsi
10013ef0 g       *ABS*	00000000 __ram_rwdata_end
10013ed0 g     O .rwdata	00000008 alt_dev_list
100101f0 g     F .text	00000100 write
10012400 g       *ABS*	00000000 __ram_rodata_end
1000faa0 g     F .text	000000b8 fstat
1000517c g     F .text	000000e0 .hidden __ledf2
1000c294 g     F .text	00000140 __pow5mult
1000cfc8 g     F .text	00001424 ___vfiprintf_internal_r
100159e8 g     O .bss	00000004 __nlocale_changed
10003dcc g     F .text	00000008 .hidden __umodsi3
10015d80 g       *ABS*	00000000 end
10010508 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10012054 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10006594 g     F .text	00000064 .hidden __clzsi2
10010bd8 g     F .text	00000218 altera_avalon_jtag_uart_write
1000a858 g     F .text	00000004 __sfp_lock_acquire
1000b85c g     F .text	000000e8 memchr
100066ec g     F .text	000020fc ___vfprintf_internal_r
1000a9bc g     F .text	000002f0 _free_r
1000aea4 g     F .text	00000010 __locale_mb_cur_max
10011e8c g     F .text	00000194 __call_exitprocs
100159e4 g     O .bss	00000004 __mlocale_changed
10013ebc g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10015a0c g     O .bss	00000004 _alt_tick_rate
10006688 g     F .text	00000064 rand
1000c3d4 g     F .text	00000148 __lshift
10015a10 g     O .bss	00000004 _alt_nticks
1000ff6c g     F .text	00000104 read
1001035c g     F .text	00000048 alt_sys_init
10011d78 g     F .text	00000114 __register_exitproc
1000c004 g     F .text	00000290 __multiply
100016e8 g     F .text	000010cc __ieee754_pow
10010878 g     F .text	00000068 altera_avalon_jtag_uart_close
10001244 g     F .text	000004a4 pow
10003dd4 g     F .text	00000028 .hidden __mulsi3
10012400 g       *ABS*	00000000 __ram_rwdata_start
10012054 g       *ABS*	00000000 __ram_rodata_start
10015a18 g     O .bss	00000028 __malloc_current_mallinfo
1000c890 g     F .text	0000013c __d2b
100103a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011b40 g     F .text	000000d4 alt_get_fd
1000e46c g     F .text	00000054 _close_r
10011cfc g     F .text	0000007c memcmp
10010464 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015d80 g       *ABS*	00000000 __alt_stack_base
100104b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000880c g     F .text	00000130 __swsetup_r
10004698 g     F .text	00000980 .hidden __divdf3
1000a718 g     F .text	00000118 __sfp
1000cae4 g     F .text	00000078 __copybits
1001289c g     O .rwdata	00000408 __malloc_av_
1000a864 g     F .text	00000004 __sinit_lock_release
1000525c g     F .text	0000086c .hidden __muldf3
1000cc3c g     F .text	00000054 __sread
10011a2c g     F .text	00000114 alt_find_file
10010f9c g     F .text	000000a4 alt_dev_llist_insert
1000fedc g     F .text	00000020 __malloc_lock
100100f0 g     F .text	000000b0 sbrk
1000a28c g     F .text	00000228 _fflush_r
1000e4c0 g     F .text	000000d8 _calloc_r
100159e0 g       *ABS*	00000000 __bss_start
1000ba7c g     F .text	00000124 memset
10000268 g     F .text	00000274 main
10015a04 g     O .bss	00000004 alt_envp
100159ec g     O .bss	00000004 __malloc_max_total_mem
10010404 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000f6e0 g     F .text	0000001c __swbuf
10006670 g     F .text	00000018 srand
100010cc g     F .text	00000178 convertBinaryToDecimal
1000cd70 g     F .text	00000008 __sclose
10002aec g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
1000e698 g     F .text	00000014 fclose
10008b64 g     F .text	00001728 _dtoa_r
1000b0b4 g     F .text	000007a8 _malloc_r
1000f870 g     F .text	00000030 __ascii_wctomb
10013edc g     O .rwdata	00000004 alt_errno
1000acac g     F .text	000000b8 _fwalk
10003d14 g     F .text	00000054 .hidden __divsi3
1000a898 g     F .text	00000124 _malloc_trim_r
10012054 g       *ABS*	00000000 __CTOR_END__
10002a5c g     F .text	0000001c finite
1000cd78 g     F .text	000000a4 strcmp
10012054 g       *ABS*	00000000 __flash_rodata_start
10012054 g       *ABS*	00000000 __DTOR_LIST__
10002eb0 g     F .text	0000001c copysign
10005018 g     F .text	00000084 .hidden __nedf2
10010328 g     F .text	00000034 alt_irq_init
10010070 g     F .text	00000080 alt_release_fd
10012104 g     O .rodata	00000100 .hidden __clz_tab
100159e0 g     O .bss	00000004 _PathLocale
10011cb0 g     F .text	00000014 atexit
10000a34 g     F .text	000003ac messagePackager
1000e410 g     F .text	0000005c _write_r
1000aed4 g     F .text	0000001c setlocale
10013eb4 g     O .rwdata	00000004 _impure_ptr
100159fc g     O .bss	00000004 alt_argc
10002ce4 g     F .text	000001cc scalbn
1001109c g     F .text	0000005c _do_dtors
1000aec0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000c714 g     F .text	00000060 __ulp
1000a880 g     F .text	00000018 __fp_unlock_all
10013ec8 g     O .rwdata	00000008 alt_fs_list
10002af4 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000aef0 g     F .text	0000000c localeconv
100027b4 g     F .text	00000294 __ieee754_sqrt
10011114 g     F .text	00000050 alt_ic_isr_register
10013ef0 g       *ABS*	00000000 _edata
10015d80 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
100108e0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10011204 g     F .text	000000a4 alt_ic_irq_disable
1000cc98 g     F .text	0000007c __swrite
10013ec0 g     O .rwdata	00000004 __malloc_trim_threshold
1000aeb4 g     F .text	0000000c __locale_msgcharset
10011cc4 g     F .text	00000038 exit
1000ad64 g     F .text	000000b8 _fwalk_reent
1000c57c g     F .text	00000198 __mdiff
100007d4 g     F .text	00000260 physicsEngine
10003d68 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000a85c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10012020 g     F .text	00000034 _exit
10010df0 g     F .text	00000140 alt_alarm_start
10002ecc g     F .text	0000010c .hidden __muldi3
1000aefc g     F .text	000001b8 __smakebuf_r
1000ce1c g     F .text	00000098 strlen
10011680 g     F .text	00000160 open
1000509c g     F .text	000000e0 .hidden __gedf2
10013ec4 g     O .rwdata	00000004 __wctomb
1000cfb0 g     F .text	00000018 __sprint_r
100110f8 g     F .text	0000001c alt_icache_flush_all
10000de0 g     F .text	00000230 FPGAcommunicator
10013ee4 g     O .rwdata	00000004 alt_priority_mask
10011164 g     F .text	000000a0 alt_ic_irq_enable
100087e8 g     F .text	00000024 __vfprintf_internal
1000f8a0 g     F .text	0000005c _wctomb_r
10005ac8 g     F .text	000008d0 .hidden __subdf3
1000bf18 g     F .text	000000b0 __lo0bits
10013ee8 g     O .rwdata	00000008 alt_alarm_list
10011040 g     F .text	0000005c _do_ctors
1000f798 g     F .text	000000d8 wcrtomb
1000f94c g     F .text	000000d8 close
1000fcb8 g     F .text	00000080 alt_load
1000e830 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000a860 g     F .text	00000004 __sinit_lock_acquire
1000bc70 g     F .text	0000013c __multadd
1000bc48 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10972004 	addi	r2,r2,23680
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10972004 	addi	r2,r2,23680
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6da17 	ldw	r2,-25752(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6da17 	ldw	r2,-25752(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6afab14 	ori	gp,gp,48812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10967814 	ori	r2,r2,23008

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d76014 	ori	r3,r3,23936

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000fcb80 	call	1000fcb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000fe640 	call	1000fe64 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
void physicsEngine();	// updates all the positions of our objects, with PHYSICS!
void spawningEngine();	// spawn more objects!! with randomness!!

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00066700 	call	10006670 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize all our structs
	int i;
	for(i=0; i<15; i++)
100002a0:	e03ffb15 	stw	zero,-20(fp)
100002a4:	00004406 	br	100003b8 <main+0x150>
	{
		veggieObject[i].xPosition = 0;
100002a8:	04040074 	movhi	r16,4097
100002ac:	84169004 	addi	r16,r16,23104
100002b0:	e0bffb17 	ldw	r2,-20(fp)
100002b4:	1009883a 	mov	r4,r2
100002b8:	01400904 	movi	r5,36
100002bc:	0003dd40 	call	10003dd4 <__mulsi3>
100002c0:	8085883a 	add	r2,r16,r2
100002c4:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002c8:	04040074 	movhi	r16,4097
100002cc:	84169004 	addi	r16,r16,23104
100002d0:	e0bffb17 	ldw	r2,-20(fp)
100002d4:	1009883a 	mov	r4,r2
100002d8:	01400904 	movi	r5,36
100002dc:	0003dd40 	call	10003dd4 <__mulsi3>
100002e0:	8085883a 	add	r2,r16,r2
100002e4:	10800104 	addi	r2,r2,4
100002e8:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002ec:	04040074 	movhi	r16,4097
100002f0:	84169004 	addi	r16,r16,23104
100002f4:	e0bffb17 	ldw	r2,-20(fp)
100002f8:	1009883a 	mov	r4,r2
100002fc:	01400904 	movi	r5,36
10000300:	0003dd40 	call	10003dd4 <__mulsi3>
10000304:	8085883a 	add	r2,r16,r2
10000308:	10800204 	addi	r2,r2,8
1000030c:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
10000310:	04040074 	movhi	r16,4097
10000314:	84169004 	addi	r16,r16,23104
10000318:	e0bffb17 	ldw	r2,-20(fp)
1000031c:	1009883a 	mov	r4,r2
10000320:	01400904 	movi	r5,36
10000324:	0003dd40 	call	10003dd4 <__mulsi3>
10000328:	8085883a 	add	r2,r16,r2
1000032c:	10800304 	addi	r2,r2,12
10000330:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 1;
10000334:	04040074 	movhi	r16,4097
10000338:	84169004 	addi	r16,r16,23104
1000033c:	e0bffb17 	ldw	r2,-20(fp)
10000340:	1009883a 	mov	r4,r2
10000344:	01400904 	movi	r5,36
10000348:	0003dd40 	call	10003dd4 <__mulsi3>
1000034c:	8085883a 	add	r2,r16,r2
10000350:	10800404 	addi	r2,r2,16
10000354:	00c00044 	movi	r3,1
10000358:	10c00015 	stw	r3,0(r2)
		veggieObject[i].xVelocity = 0;
1000035c:	04040074 	movhi	r16,4097
10000360:	84169004 	addi	r16,r16,23104
10000364:	e0bffb17 	ldw	r2,-20(fp)
10000368:	1009883a 	mov	r4,r2
1000036c:	01400904 	movi	r5,36
10000370:	0003dd40 	call	10003dd4 <__mulsi3>
10000374:	8085883a 	add	r2,r16,r2
10000378:	10800504 	addi	r2,r2,20
1000037c:	10000015 	stw	zero,0(r2)
10000380:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
10000384:	04040074 	movhi	r16,4097
10000388:	84169004 	addi	r16,r16,23104
1000038c:	e0bffb17 	ldw	r2,-20(fp)
10000390:	1009883a 	mov	r4,r2
10000394:	01400904 	movi	r5,36
10000398:	0003dd40 	call	10003dd4 <__mulsi3>
1000039c:	8085883a 	add	r2,r16,r2
100003a0:	10800704 	addi	r2,r2,28
100003a4:	10000015 	stw	zero,0(r2)
100003a8:	10000115 	stw	zero,4(r2)
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize all our structs
	int i;
	for(i=0; i<15; i++)
100003ac:	e0bffb17 	ldw	r2,-20(fp)
100003b0:	10800044 	addi	r2,r2,1
100003b4:	e0bffb15 	stw	r2,-20(fp)
100003b8:	e0bffb17 	ldw	r2,-20(fp)
100003bc:	108003d0 	cmplti	r2,r2,15
100003c0:	103fb91e 	bne	r2,zero,100002a8 <__alt_data_end+0xf80002a8>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 1;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 0;	// pointer
100003c4:	00840074 	movhi	r2,4097
100003c8:	10969004 	addi	r2,r2,23104
100003cc:	10000415 	stw	zero,16(r2)
	veggieObject[12].packageType = 2;	// game status
100003d0:	00840074 	movhi	r2,4097
100003d4:	10969004 	addi	r2,r2,23104
100003d8:	00c00084 	movi	r3,2
100003dc:	10c07015 	stw	r3,448(r2)

	// TEST STUFF
	veggieObject[15].xPosition = 94;
100003e0:	00840074 	movhi	r2,4097
100003e4:	10969004 	addi	r2,r2,23104
100003e8:	00c01784 	movi	r3,94
100003ec:	10c08715 	stw	r3,540(r2)
	veggieObject[15].yPosition = 34;
100003f0:	00840074 	movhi	r2,4097
100003f4:	10969004 	addi	r2,r2,23104
100003f8:	00c00884 	movi	r3,34
100003fc:	10c08815 	stw	r3,544(r2)
	veggieObject[15].objectType = 5;
10000400:	00840074 	movhi	r2,4097
10000404:	10969004 	addi	r2,r2,23104
10000408:	00c00144 	movi	r3,5
1000040c:	10c08915 	stw	r3,548(r2)
	veggieObject[15].objectState = 2;
10000410:	00840074 	movhi	r2,4097
10000414:	10969004 	addi	r2,r2,23104
10000418:	00c00084 	movi	r3,2
1000041c:	10c08a15 	stw	r3,552(r2)
	veggieObject[15].packageType = 1;
10000420:	00840074 	movhi	r2,4097
10000424:	10969004 	addi	r2,r2,23104
10000428:	00c00044 	movi	r3,1
1000042c:	10c08b15 	stw	r3,556(r2)
	veggieObject[15].xVelocity = 0;
10000430:	00840074 	movhi	r2,4097
10000434:	10969004 	addi	r2,r2,23104
10000438:	10008c15 	stw	zero,560(r2)
1000043c:	10008d15 	stw	zero,564(r2)
	veggieObject[15].yVelocity = 0;
10000440:	00840074 	movhi	r2,4097
10000444:	10969004 	addi	r2,r2,23104
10000448:	10008e15 	stw	zero,568(r2)
1000044c:	10008f15 	stw	zero,572(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
10000450:	00804804 	movi	r2,288
10000454:	10800017 	ldw	r2,0(r2)
10000458:	e0bffd15 	stw	r2,-12(fp)
	//	printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
1000045c:	e0fffd17 	ldw	r3,-12(fp)
10000460:	e0bffc17 	ldw	r2,-16(fp)
10000464:	1885c83a 	sub	r2,r3,r2
10000468:	e0bffe15 	stw	r2,-8(fp)
	//	printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .1 seconds pass
1000046c:	e0fffe17 	ldw	r3,-8(fp)
10000470:	e0bff817 	ldw	r2,-32(fp)
10000474:	1885c83a 	sub	r2,r3,r2
10000478:	108000b0 	cmpltui	r2,r2,2
1000047c:	1000031e 	bne	r2,zero,1000048c <main+0x224>
		{
			physicsEngine();	// call our physics engine!
10000480:	00007d40 	call	100007d4 <physicsEngine>
			lastPhysixed = elapsedTime;
10000484:	e0bffe17 	ldw	r2,-8(fp)
10000488:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
1000048c:	e0fffe17 	ldw	r3,-8(fp)
10000490:	e0bff917 	ldw	r2,-28(fp)
10000494:	1885c83a 	sub	r2,r3,r2
10000498:	e0fffa17 	ldw	r3,-24(fp)
1000049c:	18800d2e 	bgeu	r3,r2,100004d4 <main+0x26c>
		{
			spawningEngine();	// call our spawning engine!
100004a0:	00004dc0 	call	100004dc <spawningEngine>
			lastSpawned = elapsedTime;
100004a4:	e0bffe17 	ldw	r2,-8(fp)
100004a8:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 60) + 20;
100004ac:	00066880 	call	10006688 <rand>
100004b0:	1009883a 	mov	r4,r2
100004b4:	01400f04 	movi	r5,60
100004b8:	0003d680 	call	10003d68 <__modsi3>
100004bc:	10800504 	addi	r2,r2,20
100004c0:	e0bffa15 	stw	r2,-24(fp)
			printf("we generated a random number at %lu   ", nextSpawnTime);
100004c4:	01040074 	movhi	r4,4097
100004c8:	21081504 	addi	r4,r4,8276
100004cc:	e17ffa17 	ldw	r5,-24(fp)
100004d0:	00066340 	call	10006634 <printf>
		}

	FPGAcommunicator();	// call this every time to update the FPGA
100004d4:	0000de00 	call	10000de0 <FPGAcommunicator>
	}
100004d8:	003fdd06 	br	10000450 <__alt_data_end+0xf8000450>

100004dc <spawningEngine>:
	return 0;
}

void spawningEngine()
{
100004dc:	defff504 	addi	sp,sp,-44
100004e0:	dfc00a15 	stw	ra,40(sp)
100004e4:	df000915 	stw	fp,36(sp)
100004e8:	dc400815 	stw	r17,32(sp)
100004ec:	dc000715 	stw	r16,28(sp)
100004f0:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<15; i++)	// let's go through our objects and see which ones are free
100004f4:	00800044 	movi	r2,1
100004f8:	e0bff715 	stw	r2,-36(fp)
100004fc:	0000ab06 	br	100007ac <spawningEngine+0x2d0>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000500:	04040074 	movhi	r16,4097
10000504:	84169004 	addi	r16,r16,23104
10000508:	e0bff717 	ldw	r2,-36(fp)
1000050c:	1009883a 	mov	r4,r2
10000510:	01400904 	movi	r5,36
10000514:	0003dd40 	call	10003dd4 <__mulsi3>
10000518:	8085883a 	add	r2,r16,r2
1000051c:	10800304 	addi	r2,r2,12
10000520:	10800017 	ldw	r2,0(r2)
10000524:	10009e1e 	bne	r2,zero,100007a0 <spawningEngine+0x2c4>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 104) + 14;
10000528:	00066880 	call	10006688 <rand>
1000052c:	1009883a 	mov	r4,r2
10000530:	01401a04 	movi	r5,104
10000534:	0003d680 	call	10003d68 <__modsi3>
10000538:	10800384 	addi	r2,r2,14
1000053c:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
10000540:	00066880 	call	10006688 <rand>
10000544:	1007883a 	mov	r3,r2
10000548:	00a00034 	movhi	r2,32768
1000054c:	108001c4 	addi	r2,r2,7
10000550:	1884703a 	and	r2,r3,r2
10000554:	1000040e 	bge	r2,zero,10000568 <spawningEngine+0x8c>
10000558:	10bfffc4 	addi	r2,r2,-1
1000055c:	00fffe04 	movi	r3,-8
10000560:	10c4b03a 	or	r2,r2,r3
10000564:	10800044 	addi	r2,r2,1
10000568:	10800044 	addi	r2,r2,1
1000056c:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 30) + 30;
10000570:	00066880 	call	10006688 <rand>
10000574:	1009883a 	mov	r4,r2
10000578:	01400784 	movi	r5,30
1000057c:	0003d680 	call	10003d68 <__modsi3>
10000580:	10800784 	addi	r2,r2,30
10000584:	1009883a 	mov	r4,r2
10000588:	00064200 	call	10006420 <__floatsidf>
1000058c:	1009883a 	mov	r4,r2
10000590:	180b883a 	mov	r5,r3
10000594:	e13ffc15 	stw	r4,-16(fp)
10000598:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 15) - 7.5;
1000059c:	00066880 	call	10006688 <rand>
100005a0:	1009883a 	mov	r4,r2
100005a4:	014003c4 	movi	r5,15
100005a8:	0003d680 	call	10003d68 <__modsi3>
100005ac:	1009883a 	mov	r4,r2
100005b0:	00064200 	call	10006420 <__floatsidf>
100005b4:	100b883a 	mov	r5,r2
100005b8:	180d883a 	mov	r6,r3
100005bc:	2809883a 	mov	r4,r5
100005c0:	300b883a 	mov	r5,r6
100005c4:	000d883a 	mov	r6,zero
100005c8:	01d007b4 	movhi	r7,16414
100005cc:	0005ac80 	call	10005ac8 <__subdf3>
100005d0:	1009883a 	mov	r4,r2
100005d4:	180b883a 	mov	r5,r3
100005d8:	e13ff815 	stw	r4,-32(fp)
100005dc:	e17ff915 	stw	r5,-28(fp)

			if (randomX > 80)
100005e0:	e0bffa17 	ldw	r2,-24(fp)
100005e4:	10801470 	cmpltui	r2,r2,81
100005e8:	10000b1e 	bne	r2,zero,10000618 <spawningEngine+0x13c>
			{
				randomSpeedX = (rand() % 15);
100005ec:	00066880 	call	10006688 <rand>
100005f0:	1009883a 	mov	r4,r2
100005f4:	014003c4 	movi	r5,15
100005f8:	0003d680 	call	10003d68 <__modsi3>
100005fc:	1009883a 	mov	r4,r2
10000600:	00064200 	call	10006420 <__floatsidf>
10000604:	1009883a 	mov	r4,r2
10000608:	180b883a 	mov	r5,r3
1000060c:	e13ff815 	stw	r4,-32(fp)
10000610:	e17ff915 	stw	r5,-28(fp)
10000614:	00000e06 	br	10000650 <spawningEngine+0x174>
			}
			else if (randomX < 40)
10000618:	e0bffa17 	ldw	r2,-24(fp)
1000061c:	10800a28 	cmpgeui	r2,r2,40
10000620:	10000b1e 	bne	r2,zero,10000650 <spawningEngine+0x174>
			{
				randomSpeedX = (rand() % 15) - 15;
10000624:	00066880 	call	10006688 <rand>
10000628:	1009883a 	mov	r4,r2
1000062c:	014003c4 	movi	r5,15
10000630:	0003d680 	call	10003d68 <__modsi3>
10000634:	10bffc44 	addi	r2,r2,-15
10000638:	1009883a 	mov	r4,r2
1000063c:	00064200 	call	10006420 <__floatsidf>
10000640:	1009883a 	mov	r4,r2
10000644:	180b883a 	mov	r5,r3
10000648:	e13ff815 	stw	r4,-32(fp)
1000064c:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000650:	04040074 	movhi	r16,4097
10000654:	84169004 	addi	r16,r16,23104
10000658:	e0bff717 	ldw	r2,-36(fp)
1000065c:	1009883a 	mov	r4,r2
10000660:	01400904 	movi	r5,36
10000664:	0003dd40 	call	10003dd4 <__mulsi3>
10000668:	8085883a 	add	r2,r16,r2
1000066c:	e0fffa17 	ldw	r3,-24(fp)
10000670:	10c00015 	stw	r3,0(r2)
			veggieObject[i].yPosition = 1;
10000674:	04040074 	movhi	r16,4097
10000678:	84169004 	addi	r16,r16,23104
1000067c:	e0bff717 	ldw	r2,-36(fp)
10000680:	1009883a 	mov	r4,r2
10000684:	01400904 	movi	r5,36
10000688:	0003dd40 	call	10003dd4 <__mulsi3>
1000068c:	8085883a 	add	r2,r16,r2
10000690:	10800104 	addi	r2,r2,4
10000694:	00c00044 	movi	r3,1
10000698:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectType = randomType;
1000069c:	e47ffb17 	ldw	r17,-20(fp)
100006a0:	04040074 	movhi	r16,4097
100006a4:	84169004 	addi	r16,r16,23104
100006a8:	e0bff717 	ldw	r2,-36(fp)
100006ac:	1009883a 	mov	r4,r2
100006b0:	01400904 	movi	r5,36
100006b4:	0003dd40 	call	10003dd4 <__mulsi3>
100006b8:	8085883a 	add	r2,r16,r2
100006bc:	10800204 	addi	r2,r2,8
100006c0:	14400015 	stw	r17,0(r2)
			veggieObject[i].objectState = 1;
100006c4:	04040074 	movhi	r16,4097
100006c8:	84169004 	addi	r16,r16,23104
100006cc:	e0bff717 	ldw	r2,-36(fp)
100006d0:	1009883a 	mov	r4,r2
100006d4:	01400904 	movi	r5,36
100006d8:	0003dd40 	call	10003dd4 <__mulsi3>
100006dc:	8085883a 	add	r2,r16,r2
100006e0:	10800304 	addi	r2,r2,12
100006e4:	00c00044 	movi	r3,1
100006e8:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
100006ec:	04040074 	movhi	r16,4097
100006f0:	84169004 	addi	r16,r16,23104
100006f4:	e0bff717 	ldw	r2,-36(fp)
100006f8:	1009883a 	mov	r4,r2
100006fc:	01400904 	movi	r5,36
10000700:	0003dd40 	call	10003dd4 <__mulsi3>
10000704:	8085883a 	add	r2,r16,r2
10000708:	10800504 	addi	r2,r2,20
1000070c:	e0fff817 	ldw	r3,-32(fp)
10000710:	10c00015 	stw	r3,0(r2)
10000714:	e0fff917 	ldw	r3,-28(fp)
10000718:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
1000071c:	04040074 	movhi	r16,4097
10000720:	84169004 	addi	r16,r16,23104
10000724:	e0bff717 	ldw	r2,-36(fp)
10000728:	1009883a 	mov	r4,r2
1000072c:	01400904 	movi	r5,36
10000730:	0003dd40 	call	10003dd4 <__mulsi3>
10000734:	8085883a 	add	r2,r16,r2
10000738:	10800704 	addi	r2,r2,28
1000073c:	e0fffc17 	ldw	r3,-16(fp)
10000740:	10c00015 	stw	r3,0(r2)
10000744:	e0fffd17 	ldw	r3,-12(fp)
10000748:	10c00115 	stw	r3,4(r2)

			printf("x is %lu  ", randomX);
1000074c:	01040074 	movhi	r4,4097
10000750:	21081f04 	addi	r4,r4,8316
10000754:	e17ffa17 	ldw	r5,-24(fp)
10000758:	00066340 	call	10006634 <printf>
			printf("type is %d  ", randomType);
1000075c:	01040074 	movhi	r4,4097
10000760:	21082204 	addi	r4,r4,8328
10000764:	e17ffb17 	ldw	r5,-20(fp)
10000768:	00066340 	call	10006634 <printf>
			printf("xvelocity is %f  ", randomSpeedX);
1000076c:	01040074 	movhi	r4,4097
10000770:	21082604 	addi	r4,r4,8344
10000774:	e17ff817 	ldw	r5,-32(fp)
10000778:	e1bff917 	ldw	r6,-28(fp)
1000077c:	00066340 	call	10006634 <printf>
			printf("yvelocity is %f  \n", randomSpeedY);
10000780:	01040074 	movhi	r4,4097
10000784:	21082b04 	addi	r4,r4,8364
10000788:	e17ffc17 	ldw	r5,-16(fp)
1000078c:	e1bffd17 	ldw	r6,-12(fp)
10000790:	00066340 	call	10006634 <printf>

			// now let's break
			i = 15;
10000794:	008003c4 	movi	r2,15
10000798:	e0bff715 	stw	r2,-36(fp)
			break;
1000079c:	00000606 	br	100007b8 <spawningEngine+0x2dc>
}

void spawningEngine()
{
	int i;
	for(i=1; i<15; i++)	// let's go through our objects and see which ones are free
100007a0:	e0bff717 	ldw	r2,-36(fp)
100007a4:	10800044 	addi	r2,r2,1
100007a8:	e0bff715 	stw	r2,-36(fp)
100007ac:	e0bff717 	ldw	r2,-36(fp)
100007b0:	108003d0 	cmplti	r2,r2,15
100007b4:	103f521e 	bne	r2,zero,10000500 <__alt_data_end+0xf8000500>
			// now let's break
			i = 15;
			break;
		}
	}
}
100007b8:	e6fffe04 	addi	sp,fp,-8
100007bc:	dfc00317 	ldw	ra,12(sp)
100007c0:	df000217 	ldw	fp,8(sp)
100007c4:	dc400117 	ldw	r17,4(sp)
100007c8:	dc000017 	ldw	r16,0(sp)
100007cc:	dec00404 	addi	sp,sp,16
100007d0:	f800283a 	ret

100007d4 <physicsEngine>:

void physicsEngine()
{
100007d4:	defffa04 	addi	sp,sp,-24
100007d8:	dfc00515 	stw	ra,20(sp)
100007dc:	df000415 	stw	fp,16(sp)
100007e0:	dc800315 	stw	r18,12(sp)
100007e4:	dc400215 	stw	r17,8(sp)
100007e8:	dc000115 	stw	r16,4(sp)
100007ec:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100007f0:	00800044 	movi	r2,1
100007f4:	e0bffc15 	stw	r2,-16(fp)
100007f8:	00008206 	br	10000a04 <physicsEngine+0x230>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
100007fc:	04040074 	movhi	r16,4097
10000800:	84169004 	addi	r16,r16,23104
10000804:	e0bffc17 	ldw	r2,-16(fp)
10000808:	1009883a 	mov	r4,r2
1000080c:	01400904 	movi	r5,36
10000810:	0003dd40 	call	10003dd4 <__mulsi3>
10000814:	8085883a 	add	r2,r16,r2
10000818:	10800304 	addi	r2,r2,12
1000081c:	10800017 	ldw	r2,0(r2)
10000820:	10007526 	beq	r2,zero,100009f8 <physicsEngine+0x224>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000824:	04040074 	movhi	r16,4097
10000828:	84169004 	addi	r16,r16,23104
1000082c:	e0bffc17 	ldw	r2,-16(fp)
10000830:	1009883a 	mov	r4,r2
10000834:	01400904 	movi	r5,36
10000838:	0003dd40 	call	10003dd4 <__mulsi3>
1000083c:	8085883a 	add	r2,r16,r2
10000840:	10800017 	ldw	r2,0(r2)
10000844:	1009883a 	mov	r4,r2
10000848:	00064f00 	call	100064f0 <__floatunsidf>
1000084c:	1023883a 	mov	r17,r2
10000850:	1825883a 	mov	r18,r3
10000854:	04040074 	movhi	r16,4097
10000858:	84169004 	addi	r16,r16,23104
1000085c:	e0bffc17 	ldw	r2,-16(fp)
10000860:	1009883a 	mov	r4,r2
10000864:	01400904 	movi	r5,36
10000868:	0003dd40 	call	10003dd4 <__mulsi3>
1000086c:	8085883a 	add	r2,r16,r2
10000870:	11000504 	addi	r4,r2,20
10000874:	20800017 	ldw	r2,0(r4)
10000878:	20c00117 	ldw	r3,4(r4)
1000087c:	8809883a 	mov	r4,r17
10000880:	900b883a 	mov	r5,r18
10000884:	100d883a 	mov	r6,r2
10000888:	180f883a 	mov	r7,r3
1000088c:	0003dfc0 	call	10003dfc <__adddf3>
10000890:	1009883a 	mov	r4,r2
10000894:	180b883a 	mov	r5,r3
10000898:	2005883a 	mov	r2,r4
1000089c:	2807883a 	mov	r3,r5
100008a0:	1009883a 	mov	r4,r2
100008a4:	180b883a 	mov	r5,r3
100008a8:	0002fd80 	call	10002fd8 <__fixunsdfsi>
100008ac:	1023883a 	mov	r17,r2
100008b0:	04040074 	movhi	r16,4097
100008b4:	84169004 	addi	r16,r16,23104
100008b8:	e0bffc17 	ldw	r2,-16(fp)
100008bc:	1009883a 	mov	r4,r2
100008c0:	01400904 	movi	r5,36
100008c4:	0003dd40 	call	10003dd4 <__mulsi3>
100008c8:	8085883a 	add	r2,r16,r2
100008cc:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
100008d0:	04040074 	movhi	r16,4097
100008d4:	84169004 	addi	r16,r16,23104
100008d8:	e0bffc17 	ldw	r2,-16(fp)
100008dc:	1009883a 	mov	r4,r2
100008e0:	01400904 	movi	r5,36
100008e4:	0003dd40 	call	10003dd4 <__mulsi3>
100008e8:	8085883a 	add	r2,r16,r2
100008ec:	10800104 	addi	r2,r2,4
100008f0:	10800017 	ldw	r2,0(r2)
100008f4:	1009883a 	mov	r4,r2
100008f8:	00064f00 	call	100064f0 <__floatunsidf>
100008fc:	1023883a 	mov	r17,r2
10000900:	1825883a 	mov	r18,r3
10000904:	04040074 	movhi	r16,4097
10000908:	84169004 	addi	r16,r16,23104
1000090c:	e0bffc17 	ldw	r2,-16(fp)
10000910:	1009883a 	mov	r4,r2
10000914:	01400904 	movi	r5,36
10000918:	0003dd40 	call	10003dd4 <__mulsi3>
1000091c:	8085883a 	add	r2,r16,r2
10000920:	11000704 	addi	r4,r2,28
10000924:	20800017 	ldw	r2,0(r4)
10000928:	20c00117 	ldw	r3,4(r4)
1000092c:	8809883a 	mov	r4,r17
10000930:	900b883a 	mov	r5,r18
10000934:	100d883a 	mov	r6,r2
10000938:	180f883a 	mov	r7,r3
1000093c:	0003dfc0 	call	10003dfc <__adddf3>
10000940:	1009883a 	mov	r4,r2
10000944:	180b883a 	mov	r5,r3
10000948:	2005883a 	mov	r2,r4
1000094c:	2807883a 	mov	r3,r5
10000950:	1009883a 	mov	r4,r2
10000954:	180b883a 	mov	r5,r3
10000958:	0002fd80 	call	10002fd8 <__fixunsdfsi>
1000095c:	1023883a 	mov	r17,r2
10000960:	04040074 	movhi	r16,4097
10000964:	84169004 	addi	r16,r16,23104
10000968:	e0bffc17 	ldw	r2,-16(fp)
1000096c:	1009883a 	mov	r4,r2
10000970:	01400904 	movi	r5,36
10000974:	0003dd40 	call	10003dd4 <__mulsi3>
10000978:	8085883a 	add	r2,r16,r2
1000097c:	10800104 	addi	r2,r2,4
10000980:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000984:	04040074 	movhi	r16,4097
10000988:	84169004 	addi	r16,r16,23104
1000098c:	e0bffc17 	ldw	r2,-16(fp)
10000990:	1009883a 	mov	r4,r2
10000994:	01400904 	movi	r5,36
10000998:	0003dd40 	call	10003dd4 <__mulsi3>
1000099c:	8085883a 	add	r2,r16,r2
100009a0:	11000704 	addi	r4,r2,28
100009a4:	20800017 	ldw	r2,0(r4)
100009a8:	20c00117 	ldw	r3,4(r4)
100009ac:	1009883a 	mov	r4,r2
100009b0:	180b883a 	mov	r5,r3
100009b4:	000d883a 	mov	r6,zero
100009b8:	01cffc34 	movhi	r7,16368
100009bc:	0005ac80 	call	10005ac8 <__subdf3>
100009c0:	1009883a 	mov	r4,r2
100009c4:	180b883a 	mov	r5,r3
100009c8:	2021883a 	mov	r16,r4
100009cc:	2823883a 	mov	r17,r5
100009d0:	04840074 	movhi	r18,4097
100009d4:	94969004 	addi	r18,r18,23104
100009d8:	e0bffc17 	ldw	r2,-16(fp)
100009dc:	1009883a 	mov	r4,r2
100009e0:	01400904 	movi	r5,36
100009e4:	0003dd40 	call	10003dd4 <__mulsi3>
100009e8:	9085883a 	add	r2,r18,r2
100009ec:	10800704 	addi	r2,r2,28
100009f0:	14000015 	stw	r16,0(r2)
100009f4:	14400115 	stw	r17,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100009f8:	e0bffc17 	ldw	r2,-16(fp)
100009fc:	10800044 	addi	r2,r2,1
10000a00:	e0bffc15 	stw	r2,-16(fp)
10000a04:	e0bffc17 	ldw	r2,-16(fp)
10000a08:	10800410 	cmplti	r2,r2,16
10000a0c:	103f7b1e 	bne	r2,zero,100007fc <__alt_data_end+0xf80007fc>
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
		}
	}
	return;
10000a10:	0001883a 	nop
}
10000a14:	e6fffd04 	addi	sp,fp,-12
10000a18:	dfc00417 	ldw	ra,16(sp)
10000a1c:	df000317 	ldw	fp,12(sp)
10000a20:	dc800217 	ldw	r18,8(sp)
10000a24:	dc400117 	ldw	r17,4(sp)
10000a28:	dc000017 	ldw	r16,0(sp)
10000a2c:	dec00504 	addi	sp,sp,20
10000a30:	f800283a 	ret

10000a34 <messagePackager>:

// this function takes a struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000a34:	deffe304 	addi	sp,sp,-116
10000a38:	dfc01815 	stw	ra,96(sp)
10000a3c:	df001715 	stw	fp,92(sp)
10000a40:	dc401615 	stw	r17,88(sp)
10000a44:	dc001515 	stw	r16,84(sp)
10000a48:	df001704 	addi	fp,sp,92
10000a4c:	e1000215 	stw	r4,8(fp)
10000a50:	e1400315 	stw	r5,12(fp)
10000a54:	e1800415 	stw	r6,16(fp)
10000a58:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000a5c:	e0800617 	ldw	r2,24(fp)
10000a60:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 2)
10000a64:	e0bfeb17 	ldw	r2,-84(fp)
10000a68:	10800098 	cmpnei	r2,r2,2
10000a6c:	10005c1e 	bne	r2,zero,10000be0 <messagePackager+0x1ac>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000a70:	e0800217 	ldw	r2,8(fp)
10000a74:	e0bfec15 	stw	r2,-80(fp)
10000a78:	e03fed15 	stw	zero,-76(fp)
		tempTime = specifiedObject.yPosition;
10000a7c:	e0800317 	ldw	r2,12(fp)
10000a80:	e0bfee15 	stw	r2,-72(fp)
10000a84:	e03fef15 	stw	zero,-68(fp)
		tempStart = specifiedObject.objectType;
10000a88:	e0800417 	ldw	r2,16(fp)
10000a8c:	e0bff015 	stw	r2,-64(fp)
10000a90:	e03ff115 	stw	zero,-60(fp)
		tempEnd = specifiedObject.objectState;
10000a94:	e0800517 	ldw	r2,20(fp)
10000a98:	e0bff215 	stw	r2,-56(fp)
10000a9c:	e03ff315 	stw	zero,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000aa0:	e0bfec17 	ldw	r2,-80(fp)
10000aa4:	1009883a 	mov	r4,r2
10000aa8:	00010100 	call	10001010 <convertDecimalToBinary>
10000aac:	e0bfec15 	stw	r2,-80(fp)
10000ab0:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000ab4:	e0bfee17 	ldw	r2,-72(fp)
10000ab8:	1009883a 	mov	r4,r2
10000abc:	00010100 	call	10001010 <convertDecimalToBinary>
10000ac0:	e0bfee15 	stw	r2,-72(fp)
10000ac4:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000ac8:	e0bff017 	ldw	r2,-64(fp)
10000acc:	1009883a 	mov	r4,r2
10000ad0:	00010100 	call	10001010 <convertDecimalToBinary>
10000ad4:	e0bff015 	stw	r2,-64(fp)
10000ad8:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000adc:	e0bff217 	ldw	r2,-56(fp)
10000ae0:	1009883a 	mov	r4,r2
10000ae4:	00010100 	call	10001010 <convertDecimalToBinary>
10000ae8:	e0bff215 	stw	r2,-56(fp)
10000aec:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000af0:	00802674 	movhi	r2,153
10000af4:	10a5a004 	addi	r2,r2,-27008
10000af8:	0007883a 	mov	r3,zero
10000afc:	e13fee17 	ldw	r4,-72(fp)
10000b00:	e17fef17 	ldw	r5,-68(fp)
10000b04:	100d883a 	mov	r6,r2
10000b08:	180f883a 	mov	r7,r3
10000b0c:	0002ecc0 	call	10002ecc <__muldi3>
10000b10:	1009883a 	mov	r4,r2
10000b14:	180b883a 	mov	r5,r3
10000b18:	2021883a 	mov	r16,r4
10000b1c:	2823883a 	mov	r17,r5
10000b20:	00841eb4 	movhi	r2,4218
10000b24:	10900004 	addi	r2,r2,16384
10000b28:	00d6bcc4 	movi	r3,23283
10000b2c:	e13ff017 	ldw	r4,-64(fp)
10000b30:	e17ff117 	ldw	r5,-60(fp)
10000b34:	100d883a 	mov	r6,r2
10000b38:	180f883a 	mov	r7,r3
10000b3c:	0002ecc0 	call	10002ecc <__muldi3>
10000b40:	100d883a 	mov	r6,r2
10000b44:	180f883a 	mov	r7,r3
10000b48:	3009883a 	mov	r4,r6
10000b4c:	380b883a 	mov	r5,r7
10000b50:	8105883a 	add	r2,r16,r4
10000b54:	140d803a 	cmpltu	r6,r2,r16
10000b58:	8947883a 	add	r3,r17,r5
10000b5c:	30c9883a 	add	r4,r6,r3
10000b60:	2007883a 	mov	r3,r4
10000b64:	100d883a 	mov	r6,r2
10000b68:	180f883a 	mov	r7,r3
10000b6c:	e13fec17 	ldw	r4,-80(fp)
10000b70:	e17fed17 	ldw	r5,-76(fp)
10000b74:	3105883a 	add	r2,r6,r4
10000b78:	1191803a 	cmpltu	r8,r2,r6
10000b7c:	3947883a 	add	r3,r7,r5
10000b80:	40c9883a 	add	r4,r8,r3
10000b84:	2007883a 	mov	r3,r4
10000b88:	1021883a 	mov	r16,r2
10000b8c:	1823883a 	mov	r17,r3
10000b90:	009762b4 	movhi	r2,23946
10000b94:	00c058f4 	movhi	r3,355
10000b98:	18d15e04 	addi	r3,r3,17784
10000b9c:	e13ff217 	ldw	r4,-56(fp)
10000ba0:	e17ff317 	ldw	r5,-52(fp)
10000ba4:	100d883a 	mov	r6,r2
10000ba8:	180f883a 	mov	r7,r3
10000bac:	0002ecc0 	call	10002ecc <__muldi3>
10000bb0:	100d883a 	mov	r6,r2
10000bb4:	180f883a 	mov	r7,r3
10000bb8:	3009883a 	mov	r4,r6
10000bbc:	380b883a 	mov	r5,r7
10000bc0:	8105883a 	add	r2,r16,r4
10000bc4:	140d803a 	cmpltu	r6,r2,r16
10000bc8:	8947883a 	add	r3,r17,r5
10000bcc:	30c9883a 	add	r4,r6,r3
10000bd0:	2007883a 	mov	r3,r4
10000bd4:	e0bfe915 	stw	r2,-92(fp)
10000bd8:	e0ffea15 	stw	r3,-88(fp)
10000bdc:	00007306 	br	10000dac <messagePackager+0x378>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000be0:	e0800217 	ldw	r2,8(fp)
10000be4:	e0bff415 	stw	r2,-48(fp)
10000be8:	e03ff515 	stw	zero,-44(fp)
		tempY = specifiedObject.yPosition;
10000bec:	e0800317 	ldw	r2,12(fp)
10000bf0:	e0bff615 	stw	r2,-40(fp)
10000bf4:	e03ff715 	stw	zero,-36(fp)
		tempType = specifiedObject.objectType;
10000bf8:	e0800417 	ldw	r2,16(fp)
10000bfc:	e0bff815 	stw	r2,-32(fp)
10000c00:	e03ff915 	stw	zero,-28(fp)
		tempState = specifiedObject.objectState;
10000c04:	e0800517 	ldw	r2,20(fp)
10000c08:	e0bffa15 	stw	r2,-24(fp)
10000c0c:	e03ffb15 	stw	zero,-20(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
10000c10:	e0bff417 	ldw	r2,-48(fp)
10000c14:	1009883a 	mov	r4,r2
10000c18:	00010100 	call	10001010 <convertDecimalToBinary>
10000c1c:	e0bff415 	stw	r2,-48(fp)
10000c20:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
10000c24:	e0bff617 	ldw	r2,-40(fp)
10000c28:	1009883a 	mov	r4,r2
10000c2c:	00010100 	call	10001010 <convertDecimalToBinary>
10000c30:	e0bff615 	stw	r2,-40(fp)
10000c34:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
10000c38:	e0bff817 	ldw	r2,-32(fp)
10000c3c:	1009883a 	mov	r4,r2
10000c40:	00010100 	call	10001010 <convertDecimalToBinary>
10000c44:	e0bff815 	stw	r2,-32(fp)
10000c48:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
10000c4c:	e0bffa17 	ldw	r2,-24(fp)
10000c50:	1009883a 	mov	r4,r2
10000c54:	00010100 	call	10001010 <convertDecimalToBinary>
10000c58:	e0bffa15 	stw	r2,-24(fp)
10000c5c:	e03ffb15 	stw	zero,-20(fp)
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/

		// now we append everything together!
		if (packageType == 0)	// this means we are packaging the cursor
10000c60:	e0bfeb17 	ldw	r2,-84(fp)
10000c64:	1000161e 	bne	r2,zero,10000cc0 <messagePackager+0x28c>
		{
			// location is important!
			tempBinary = tempX + tempY*10000000000;
10000c68:	00950334 	movhi	r2,21516
10000c6c:	10b90004 	addi	r2,r2,-7168
10000c70:	00c00084 	movi	r3,2
10000c74:	e13ff617 	ldw	r4,-40(fp)
10000c78:	e17ff717 	ldw	r5,-36(fp)
10000c7c:	100d883a 	mov	r6,r2
10000c80:	180f883a 	mov	r7,r3
10000c84:	0002ecc0 	call	10002ecc <__muldi3>
10000c88:	1009883a 	mov	r4,r2
10000c8c:	180b883a 	mov	r5,r3
10000c90:	200d883a 	mov	r6,r4
10000c94:	280f883a 	mov	r7,r5
10000c98:	e13ff417 	ldw	r4,-48(fp)
10000c9c:	e17ff517 	ldw	r5,-44(fp)
10000ca0:	3105883a 	add	r2,r6,r4
10000ca4:	1191803a 	cmpltu	r8,r2,r6
10000ca8:	3947883a 	add	r3,r7,r5
10000cac:	40c9883a 	add	r4,r8,r3
10000cb0:	2007883a 	mov	r3,r4
10000cb4:	e0bfe915 	stw	r2,-92(fp)
10000cb8:	e0ffea15 	stw	r3,-88(fp)
10000cbc:	00003b06 	br	10000dac <messagePackager+0x378>
		}
		else	// this means we are packaging a fruit/bomb
		{
			// location not as important
			tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
10000cc0:	00802674 	movhi	r2,153
10000cc4:	10a5a004 	addi	r2,r2,-27008
10000cc8:	0007883a 	mov	r3,zero
10000ccc:	e13ff617 	ldw	r4,-40(fp)
10000cd0:	e17ff717 	ldw	r5,-36(fp)
10000cd4:	100d883a 	mov	r6,r2
10000cd8:	180f883a 	mov	r7,r3
10000cdc:	0002ecc0 	call	10002ecc <__muldi3>
10000ce0:	1009883a 	mov	r4,r2
10000ce4:	180b883a 	mov	r5,r3
10000ce8:	2021883a 	mov	r16,r4
10000cec:	2823883a 	mov	r17,r5
10000cf0:	00841eb4 	movhi	r2,4218
10000cf4:	10900004 	addi	r2,r2,16384
10000cf8:	00d6bcc4 	movi	r3,23283
10000cfc:	e13ff817 	ldw	r4,-32(fp)
10000d00:	e17ff917 	ldw	r5,-28(fp)
10000d04:	100d883a 	mov	r6,r2
10000d08:	180f883a 	mov	r7,r3
10000d0c:	0002ecc0 	call	10002ecc <__muldi3>
10000d10:	100d883a 	mov	r6,r2
10000d14:	180f883a 	mov	r7,r3
10000d18:	3009883a 	mov	r4,r6
10000d1c:	380b883a 	mov	r5,r7
10000d20:	8105883a 	add	r2,r16,r4
10000d24:	140d803a 	cmpltu	r6,r2,r16
10000d28:	8947883a 	add	r3,r17,r5
10000d2c:	30c9883a 	add	r4,r6,r3
10000d30:	2007883a 	mov	r3,r4
10000d34:	100d883a 	mov	r6,r2
10000d38:	180f883a 	mov	r7,r3
10000d3c:	e13ff417 	ldw	r4,-48(fp)
10000d40:	e17ff517 	ldw	r5,-44(fp)
10000d44:	3105883a 	add	r2,r6,r4
10000d48:	1191803a 	cmpltu	r8,r2,r6
10000d4c:	3947883a 	add	r3,r7,r5
10000d50:	40c9883a 	add	r4,r8,r3
10000d54:	2007883a 	mov	r3,r4
10000d58:	1021883a 	mov	r16,r2
10000d5c:	1823883a 	mov	r17,r3
10000d60:	009762b4 	movhi	r2,23946
10000d64:	00c058f4 	movhi	r3,355
10000d68:	18d15e04 	addi	r3,r3,17784
10000d6c:	e13ffa17 	ldw	r4,-24(fp)
10000d70:	e17ffb17 	ldw	r5,-20(fp)
10000d74:	100d883a 	mov	r6,r2
10000d78:	180f883a 	mov	r7,r3
10000d7c:	0002ecc0 	call	10002ecc <__muldi3>
10000d80:	100d883a 	mov	r6,r2
10000d84:	180f883a 	mov	r7,r3
10000d88:	3009883a 	mov	r4,r6
10000d8c:	380b883a 	mov	r5,r7
10000d90:	8105883a 	add	r2,r16,r4
10000d94:	140d803a 	cmpltu	r6,r2,r16
10000d98:	8947883a 	add	r3,r17,r5
10000d9c:	30c9883a 	add	r4,r6,r3
10000da0:	2007883a 	mov	r3,r4
10000da4:	e0bfe915 	stw	r2,-92(fp)
10000da8:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
		}
	}

	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
10000dac:	e13fe917 	ldw	r4,-92(fp)
10000db0:	e17fea17 	ldw	r5,-88(fp)
10000db4:	00010cc0 	call	100010cc <convertBinaryToDecimal>
10000db8:	e0bffc15 	stw	r2,-16(fp)
10000dbc:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
10000dc0:	e0bffc17 	ldw	r2,-16(fp)
}
10000dc4:	e6fffe04 	addi	sp,fp,-8
10000dc8:	dfc00317 	ldw	ra,12(sp)
10000dcc:	df000217 	ldw	fp,8(sp)
10000dd0:	dc400117 	ldw	r17,4(sp)
10000dd4:	dc000017 	ldw	r16,0(sp)
10000dd8:	dec00804 	addi	sp,sp,32
10000ddc:	f800283a 	ret

10000de0 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000de0:	deffd504 	addi	sp,sp,-172
10000de4:	dfc02a15 	stw	ra,168(sp)
10000de8:	df002915 	stw	fp,164(sp)
10000dec:	dc002815 	stw	r16,160(sp)
10000df0:	df002904 	addi	fp,sp,164
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000df4:	e03fdc15 	stw	zero,-144(fp)
10000df8:	00002406 	br	10000e8c <FPGAcommunicator+0xac>
	{
		unsigned long long tempPackage = messagePackager(veggieObject[i]);
10000dfc:	04040074 	movhi	r16,4097
10000e00:	84169004 	addi	r16,r16,23104
10000e04:	e0bfdc17 	ldw	r2,-144(fp)
10000e08:	1009883a 	mov	r4,r2
10000e0c:	01400904 	movi	r5,36
10000e10:	0003dd40 	call	10003dd4 <__mulsi3>
10000e14:	8085883a 	add	r2,r16,r2
10000e18:	10c00417 	ldw	r3,16(r2)
10000e1c:	d8c00015 	stw	r3,0(sp)
10000e20:	10c00517 	ldw	r3,20(r2)
10000e24:	d8c00115 	stw	r3,4(sp)
10000e28:	10c00617 	ldw	r3,24(r2)
10000e2c:	d8c00215 	stw	r3,8(sp)
10000e30:	10c00717 	ldw	r3,28(r2)
10000e34:	d8c00315 	stw	r3,12(sp)
10000e38:	10c00817 	ldw	r3,32(r2)
10000e3c:	d8c00415 	stw	r3,16(sp)
10000e40:	11000017 	ldw	r4,0(r2)
10000e44:	11400117 	ldw	r5,4(r2)
10000e48:	11800217 	ldw	r6,8(r2)
10000e4c:	11c00317 	ldw	r7,12(r2)
10000e50:	0000a340 	call	10000a34 <messagePackager>
10000e54:	e0bfdd15 	stw	r2,-140(fp)
10000e58:	e03fde15 	stw	zero,-136(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000e5c:	e0bfdc17 	ldw	r2,-144(fp)
10000e60:	100490fa 	slli	r2,r2,3
10000e64:	e0ffdc04 	addi	r3,fp,-144
10000e68:	1885883a 	add	r2,r3,r2
10000e6c:	10800304 	addi	r2,r2,12
10000e70:	e0ffdd17 	ldw	r3,-140(fp)
10000e74:	10c00015 	stw	r3,0(r2)
10000e78:	e0ffde17 	ldw	r3,-136(fp)
10000e7c:	10c00115 	stw	r3,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000e80:	e0bfdc17 	ldw	r2,-144(fp)
10000e84:	10800044 	addi	r2,r2,1
10000e88:	e0bfdc15 	stw	r2,-144(fp)
10000e8c:	e0bfdc17 	ldw	r2,-144(fp)
10000e90:	10800410 	cmplti	r2,r2,16
10000e94:	103fd91e 	bne	r2,zero,10000dfc <__alt_data_end+0xf8000dfc>

		FPGAmessage[i] = tempPackage;
	}


	*to_hw_sig = 2;	// 2 means we're starting communication
10000e98:	00801c04 	movi	r2,112
10000e9c:	00c00084 	movi	r3,2
10000ea0:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000ea4:	01004004 	movi	r4,256
10000ea8:	e0bfdf17 	ldw	r2,-132(fp)
10000eac:	e0ffe017 	ldw	r3,-128(fp)
10000eb0:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000eb4:	01003c04 	movi	r4,240
10000eb8:	e0bfe117 	ldw	r2,-124(fp)
10000ebc:	e0ffe217 	ldw	r3,-120(fp)
10000ec0:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000ec4:	01003804 	movi	r4,224
10000ec8:	e0bfe317 	ldw	r2,-116(fp)
10000ecc:	e0ffe417 	ldw	r3,-112(fp)
10000ed0:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000ed4:	01003404 	movi	r4,208
10000ed8:	e0bfe517 	ldw	r2,-108(fp)
10000edc:	e0ffe617 	ldw	r3,-104(fp)
10000ee0:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000ee4:	01003004 	movi	r4,192
10000ee8:	e0bfe717 	ldw	r2,-100(fp)
10000eec:	e0ffe817 	ldw	r3,-96(fp)
10000ef0:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000ef4:	01002c04 	movi	r4,176
10000ef8:	e0bfe917 	ldw	r2,-92(fp)
10000efc:	e0ffea17 	ldw	r3,-88(fp)
10000f00:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000f04:	01002804 	movi	r4,160
10000f08:	e0bfeb17 	ldw	r2,-84(fp)
10000f0c:	e0ffec17 	ldw	r3,-80(fp)
10000f10:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000f14:	01001804 	movi	r4,96
10000f18:	e0bfed17 	ldw	r2,-76(fp)
10000f1c:	e0ffee17 	ldw	r3,-72(fp)
10000f20:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000f24:	01002404 	movi	r4,144
10000f28:	e0bfef17 	ldw	r2,-68(fp)
10000f2c:	e0fff017 	ldw	r3,-64(fp)
10000f30:	20800015 	stw	r2,0(r4)
	*to_hw_port9 = FPGAmessage[9];
10000f34:	01002004 	movi	r4,128
10000f38:	e0bff117 	ldw	r2,-60(fp)
10000f3c:	e0fff217 	ldw	r3,-56(fp)
10000f40:	20800015 	stw	r2,0(r4)
	*to_hw_port10 = FPGAmessage[10];
10000f44:	01001004 	movi	r4,64
10000f48:	e0bff317 	ldw	r2,-52(fp)
10000f4c:	e0fff417 	ldw	r3,-48(fp)
10000f50:	20800015 	stw	r2,0(r4)
	*to_hw_port11 = FPGAmessage[11];
10000f54:	01000c04 	movi	r4,48
10000f58:	e0bff517 	ldw	r2,-44(fp)
10000f5c:	e0fff617 	ldw	r3,-40(fp)
10000f60:	20800015 	stw	r2,0(r4)
	*to_hw_port12 = FPGAmessage[12];
10000f64:	01000804 	movi	r4,32
10000f68:	e0bff717 	ldw	r2,-36(fp)
10000f6c:	e0fff817 	ldw	r3,-32(fp)
10000f70:	20800015 	stw	r2,0(r4)
	*to_hw_port13 = FPGAmessage[13];
10000f74:	01005804 	movi	r4,352
10000f78:	e0bff917 	ldw	r2,-28(fp)
10000f7c:	e0fffa17 	ldw	r3,-24(fp)
10000f80:	20800015 	stw	r2,0(r4)
	*to_hw_port14 = FPGAmessage[14];
10000f84:	01005404 	movi	r4,336
10000f88:	e0bffb17 	ldw	r2,-20(fp)
10000f8c:	e0fffc17 	ldw	r3,-16(fp)
10000f90:	20800015 	stw	r2,0(r4)
	*to_hw_port15 = FPGAmessage[15];
10000f94:	01005004 	movi	r4,320
10000f98:	e0bffd17 	ldw	r2,-12(fp)
10000f9c:	e0fffe17 	ldw	r3,-8(fp)
10000fa0:	20800015 	stw	r2,0(r4)
//	printf("FPGAmessage 11 is %llu \n", FPGAmessage[11]);

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000fa4:	0001883a 	nop
10000fa8:	00801404 	movi	r2,80
10000fac:	10800003 	ldbu	r2,0(r2)
10000fb0:	10803fcc 	andi	r2,r2,255
10000fb4:	1080201c 	xori	r2,r2,128
10000fb8:	10bfe004 	addi	r2,r2,-128
10000fbc:	10800098 	cmpnei	r2,r2,2
10000fc0:	103ff91e 	bne	r2,zero,10000fa8 <__alt_data_end+0xf8000fa8>

	*to_hw_sig = 1;		// now we are done putting in messages
10000fc4:	00801c04 	movi	r2,112
10000fc8:	00c00044 	movi	r3,1
10000fcc:	10c00005 	stb	r3,0(r2)

	while(*to_sw_sig != 0); // wait for response from hardware
10000fd0:	0001883a 	nop
10000fd4:	00801404 	movi	r2,80
10000fd8:	10800003 	ldbu	r2,0(r2)
10000fdc:	10803fcc 	andi	r2,r2,255
10000fe0:	1080201c 	xori	r2,r2,128
10000fe4:	10bfe004 	addi	r2,r2,-128
10000fe8:	103ffa1e 	bne	r2,zero,10000fd4 <__alt_data_end+0xf8000fd4>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000fec:	00801c04 	movi	r2,112
10000ff0:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000ff4:	0001883a 	nop
}
10000ff8:	e6ffff04 	addi	sp,fp,-4
10000ffc:	dfc00217 	ldw	ra,8(sp)
10001000:	df000117 	ldw	fp,4(sp)
10001004:	dc000017 	ldw	r16,0(sp)
10001008:	dec00304 	addi	sp,sp,12
1000100c:	f800283a 	ret

10001010 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001010:	defff704 	addi	sp,sp,-36
10001014:	dfc00815 	stw	ra,32(sp)
10001018:	df000715 	stw	fp,28(sp)
1000101c:	dc400615 	stw	r17,24(sp)
10001020:	dc000515 	stw	r16,20(sp)
10001024:	df000704 	addi	fp,sp,28
10001028:	e13ffd15 	stw	r4,-12(fp)
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
1000102c:	e03ff915 	stw	zero,-28(fp)
10001030:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
10001034:	00800044 	movi	r2,1
10001038:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
1000103c:	00001906 	br	100010a4 <convertDecimalToBinary+0x94>
    {
        remainder = n%2;
10001040:	e0bffd17 	ldw	r2,-12(fp)
10001044:	1080004c 	andi	r2,r2,1
10001048:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
1000104c:	e0bffd17 	ldw	r2,-12(fp)
10001050:	1004d07a 	srli	r2,r2,1
10001054:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
10001058:	e13ffc17 	ldw	r4,-16(fp)
1000105c:	e17ffb17 	ldw	r5,-20(fp)
10001060:	0003dd40 	call	10003dd4 <__mulsi3>
10001064:	1021883a 	mov	r16,r2
10001068:	1005d7fa 	srai	r2,r2,31
1000106c:	1023883a 	mov	r17,r2
10001070:	e13ff917 	ldw	r4,-28(fp)
10001074:	e17ffa17 	ldw	r5,-24(fp)
10001078:	2405883a 	add	r2,r4,r16
1000107c:	110d803a 	cmpltu	r6,r2,r4
10001080:	2c47883a 	add	r3,r5,r17
10001084:	30c9883a 	add	r4,r6,r3
10001088:	2007883a 	mov	r3,r4
1000108c:	e0bff915 	stw	r2,-28(fp)
10001090:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
10001094:	e13ffb17 	ldw	r4,-20(fp)
10001098:	01400284 	movi	r5,10
1000109c:	0003dd40 	call	10003dd4 <__mulsi3>
100010a0:	e0bffb15 	stw	r2,-20(fp)
{
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
100010a4:	e0bffd17 	ldw	r2,-12(fp)
100010a8:	103fe51e 	bne	r2,zero,10001040 <__alt_data_end+0xf8001040>
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
100010ac:	e0bff917 	ldw	r2,-28(fp)
}
100010b0:	e6fffe04 	addi	sp,fp,-8
100010b4:	dfc00317 	ldw	ra,12(sp)
100010b8:	df000217 	ldw	fp,8(sp)
100010bc:	dc400117 	ldw	r17,4(sp)
100010c0:	dc000017 	ldw	r16,0(sp)
100010c4:	dec00404 	addi	sp,sp,16
100010c8:	f800283a 	ret

100010cc <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
100010cc:	defff704 	addi	sp,sp,-36
100010d0:	dfc00815 	stw	ra,32(sp)
100010d4:	df000715 	stw	fp,28(sp)
100010d8:	dc400615 	stw	r17,24(sp)
100010dc:	dc000515 	stw	r16,20(sp)
100010e0:	df000704 	addi	fp,sp,28
100010e4:	e13ffc15 	stw	r4,-16(fp)
100010e8:	e17ffd15 	stw	r5,-12(fp)
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
100010ec:	e03ff915 	stw	zero,-28(fp)
100010f0:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
100010f4:	00004706 	br	10001214 <convertBinaryToDecimal+0x148>
    {
        remainder = n%10;
100010f8:	e0bffc17 	ldw	r2,-16(fp)
100010fc:	e0fffd17 	ldw	r3,-12(fp)
10001100:	01c00284 	movi	r7,10
10001104:	0011883a 	mov	r8,zero
10001108:	1009883a 	mov	r4,r2
1000110c:	180b883a 	mov	r5,r3
10001110:	380d883a 	mov	r6,r7
10001114:	400f883a 	mov	r7,r8
10001118:	000368c0 	call	1000368c <__umoddi3>
1000111c:	1009883a 	mov	r4,r2
10001120:	180b883a 	mov	r5,r3
10001124:	2005883a 	mov	r2,r4
10001128:	2807883a 	mov	r3,r5
1000112c:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
10001130:	e0bffc17 	ldw	r2,-16(fp)
10001134:	e0fffd17 	ldw	r3,-12(fp)
10001138:	01c00284 	movi	r7,10
1000113c:	0011883a 	mov	r8,zero
10001140:	1009883a 	mov	r4,r2
10001144:	180b883a 	mov	r5,r3
10001148:	380d883a 	mov	r6,r7
1000114c:	400f883a 	mov	r7,r8
10001150:	000304c0 	call	1000304c <__udivdi3>
10001154:	1009883a 	mov	r4,r2
10001158:	180b883a 	mov	r5,r3
1000115c:	e13ffc15 	stw	r4,-16(fp)
10001160:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
10001164:	e13ffb17 	ldw	r4,-20(fp)
10001168:	00064f00 	call	100064f0 <__floatunsidf>
1000116c:	1021883a 	mov	r16,r2
10001170:	1823883a 	mov	r17,r3
10001174:	e13ffa17 	ldw	r4,-24(fp)
10001178:	00064f00 	call	100064f0 <__floatunsidf>
1000117c:	100f883a 	mov	r7,r2
10001180:	1811883a 	mov	r8,r3
10001184:	0009883a 	mov	r4,zero
10001188:	01500034 	movhi	r5,16384
1000118c:	380d883a 	mov	r6,r7
10001190:	400f883a 	mov	r7,r8
10001194:	00012440 	call	10001244 <pow>
10001198:	100f883a 	mov	r7,r2
1000119c:	1811883a 	mov	r8,r3
100011a0:	8009883a 	mov	r4,r16
100011a4:	880b883a 	mov	r5,r17
100011a8:	380d883a 	mov	r6,r7
100011ac:	400f883a 	mov	r7,r8
100011b0:	000525c0 	call	1000525c <__muldf3>
100011b4:	1009883a 	mov	r4,r2
100011b8:	180b883a 	mov	r5,r3
100011bc:	2021883a 	mov	r16,r4
100011c0:	2823883a 	mov	r17,r5
100011c4:	e13ff917 	ldw	r4,-28(fp)
100011c8:	00064f00 	call	100064f0 <__floatunsidf>
100011cc:	100b883a 	mov	r5,r2
100011d0:	180d883a 	mov	r6,r3
100011d4:	2809883a 	mov	r4,r5
100011d8:	300b883a 	mov	r5,r6
100011dc:	800d883a 	mov	r6,r16
100011e0:	880f883a 	mov	r7,r17
100011e4:	0003dfc0 	call	10003dfc <__adddf3>
100011e8:	1009883a 	mov	r4,r2
100011ec:	180b883a 	mov	r5,r3
100011f0:	2005883a 	mov	r2,r4
100011f4:	2807883a 	mov	r3,r5
100011f8:	1009883a 	mov	r4,r2
100011fc:	180b883a 	mov	r5,r3
10001200:	0002fd80 	call	10002fd8 <__fixunsdfsi>
10001204:	e0bff915 	stw	r2,-28(fp)
        ++i;
10001208:	e0bffa17 	ldw	r2,-24(fp)
1000120c:	10800044 	addi	r2,r2,1
10001210:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
    while (n!=0)
10001214:	e0bffc17 	ldw	r2,-16(fp)
10001218:	e0fffd17 	ldw	r3,-12(fp)
1000121c:	10c4b03a 	or	r2,r2,r3
10001220:	103fb51e 	bne	r2,zero,100010f8 <__alt_data_end+0xf80010f8>
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
  //  printf("decimal output: %lu\n", decimalNumber);
    return decimalNumber;
10001224:	e0bff917 	ldw	r2,-28(fp)
}
10001228:	e6fffe04 	addi	sp,fp,-8
1000122c:	dfc00317 	ldw	ra,12(sp)
10001230:	df000217 	ldw	fp,8(sp)
10001234:	dc400117 	ldw	r17,4(sp)
10001238:	dc000017 	ldw	r16,0(sp)
1000123c:	dec00404 	addi	sp,sp,16
10001240:	f800283a 	ret

10001244 <pow>:
10001244:	deffee04 	addi	sp,sp,-72
10001248:	dc800b15 	stw	r18,44(sp)
1000124c:	04840074 	movhi	r18,4097
10001250:	ddc01015 	stw	r23,64(sp)
10001254:	dd800f15 	stw	r22,60(sp)
10001258:	dd400e15 	stw	r21,56(sp)
1000125c:	dd000d15 	stw	r20,52(sp)
10001260:	dcc00c15 	stw	r19,48(sp)
10001264:	dc400a15 	stw	r17,40(sp)
10001268:	dc000915 	stw	r16,36(sp)
1000126c:	dfc01115 	stw	ra,68(sp)
10001270:	948fab04 	addi	r18,r18,16044
10001274:	202f883a 	mov	r23,r4
10001278:	282d883a 	mov	r22,r5
1000127c:	302b883a 	mov	r21,r6
10001280:	3829883a 	mov	r20,r7
10001284:	00016e80 	call	100016e8 <__ieee754_pow>
10001288:	1023883a 	mov	r17,r2
1000128c:	90800017 	ldw	r2,0(r18)
10001290:	04ffffc4 	movi	r19,-1
10001294:	1821883a 	mov	r16,r3
10001298:	14c00426 	beq	r2,r19,100012ac <pow+0x68>
1000129c:	a809883a 	mov	r4,r21
100012a0:	a00b883a 	mov	r5,r20
100012a4:	0002a780 	call	10002a78 <__fpclassifyd>
100012a8:	10000d1e 	bne	r2,zero,100012e0 <pow+0x9c>
100012ac:	8805883a 	mov	r2,r17
100012b0:	8007883a 	mov	r3,r16
100012b4:	dfc01117 	ldw	ra,68(sp)
100012b8:	ddc01017 	ldw	r23,64(sp)
100012bc:	dd800f17 	ldw	r22,60(sp)
100012c0:	dd400e17 	ldw	r21,56(sp)
100012c4:	dd000d17 	ldw	r20,52(sp)
100012c8:	dcc00c17 	ldw	r19,48(sp)
100012cc:	dc800b17 	ldw	r18,44(sp)
100012d0:	dc400a17 	ldw	r17,40(sp)
100012d4:	dc000917 	ldw	r16,36(sp)
100012d8:	dec01204 	addi	sp,sp,72
100012dc:	f800283a 	ret
100012e0:	b809883a 	mov	r4,r23
100012e4:	b00b883a 	mov	r5,r22
100012e8:	0002a780 	call	10002a78 <__fpclassifyd>
100012ec:	1000221e 	bne	r2,zero,10001378 <pow+0x134>
100012f0:	a809883a 	mov	r4,r21
100012f4:	a00b883a 	mov	r5,r20
100012f8:	000d883a 	mov	r6,zero
100012fc:	000f883a 	mov	r7,zero
10001300:	00050180 	call	10005018 <__eqdf2>
10001304:	103fe91e 	bne	r2,zero,100012ac <__alt_data_end+0xf80012ac>
10001308:	00c00044 	movi	r3,1
1000130c:	d8c00015 	stw	r3,0(sp)
10001310:	00c40074 	movhi	r3,4097
10001314:	18c83004 	addi	r3,r3,8384
10001318:	90800017 	ldw	r2,0(r18)
1000131c:	d8c00115 	stw	r3,4(sp)
10001320:	00cffc34 	movhi	r3,16368
10001324:	d8000815 	stw	zero,32(sp)
10001328:	ddc00215 	stw	r23,8(sp)
1000132c:	dd800315 	stw	r22,12(sp)
10001330:	dd400415 	stw	r21,16(sp)
10001334:	dd000515 	stw	r20,20(sp)
10001338:	d8000615 	stw	zero,24(sp)
1000133c:	d8c00715 	stw	r3,28(sp)
10001340:	14c00a26 	beq	r2,r19,1000136c <pow+0x128>
10001344:	00c00084 	movi	r3,2
10001348:	10c00826 	beq	r2,r3,1000136c <pow+0x128>
1000134c:	d809883a 	mov	r4,sp
10001350:	0002aec0 	call	10002aec <matherr>
10001354:	10006b26 	beq	r2,zero,10001504 <pow+0x2c0>
10001358:	d8800817 	ldw	r2,32(sp)
1000135c:	10000326 	beq	r2,zero,1000136c <pow+0x128>
10001360:	00065f80 	call	100065f8 <__errno>
10001364:	d8c00817 	ldw	r3,32(sp)
10001368:	10c00015 	stw	r3,0(r2)
1000136c:	d8800617 	ldw	r2,24(sp)
10001370:	d8c00717 	ldw	r3,28(sp)
10001374:	003fcf06 	br	100012b4 <__alt_data_end+0xf80012b4>
10001378:	b809883a 	mov	r4,r23
1000137c:	b00b883a 	mov	r5,r22
10001380:	000d883a 	mov	r6,zero
10001384:	000f883a 	mov	r7,zero
10001388:	00050180 	call	10005018 <__eqdf2>
1000138c:	1000171e 	bne	r2,zero,100013ec <pow+0x1a8>
10001390:	a809883a 	mov	r4,r21
10001394:	a00b883a 	mov	r5,r20
10001398:	000d883a 	mov	r6,zero
1000139c:	000f883a 	mov	r7,zero
100013a0:	00050180 	call	10005018 <__eqdf2>
100013a4:	1000381e 	bne	r2,zero,10001488 <pow+0x244>
100013a8:	00c00044 	movi	r3,1
100013ac:	d8c00015 	stw	r3,0(sp)
100013b0:	90800017 	ldw	r2,0(r18)
100013b4:	00c40074 	movhi	r3,4097
100013b8:	18c83004 	addi	r3,r3,8384
100013bc:	d8c00115 	stw	r3,4(sp)
100013c0:	d8000815 	stw	zero,32(sp)
100013c4:	ddc00215 	stw	r23,8(sp)
100013c8:	dd800315 	stw	r22,12(sp)
100013cc:	dd400415 	stw	r21,16(sp)
100013d0:	dd000515 	stw	r20,20(sp)
100013d4:	d8000615 	stw	zero,24(sp)
100013d8:	d8000715 	stw	zero,28(sp)
100013dc:	103fdb26 	beq	r2,zero,1000134c <__alt_data_end+0xf800134c>
100013e0:	008ffc34 	movhi	r2,16368
100013e4:	d8800715 	stw	r2,28(sp)
100013e8:	003fe006 	br	1000136c <__alt_data_end+0xf800136c>
100013ec:	8809883a 	mov	r4,r17
100013f0:	800b883a 	mov	r5,r16
100013f4:	0002a5c0 	call	10002a5c <finite>
100013f8:	10004626 	beq	r2,zero,10001514 <pow+0x2d0>
100013fc:	8809883a 	mov	r4,r17
10001400:	800b883a 	mov	r5,r16
10001404:	000d883a 	mov	r6,zero
10001408:	000f883a 	mov	r7,zero
1000140c:	00050180 	call	10005018 <__eqdf2>
10001410:	103fa61e 	bne	r2,zero,100012ac <__alt_data_end+0xf80012ac>
10001414:	b809883a 	mov	r4,r23
10001418:	b00b883a 	mov	r5,r22
1000141c:	0002a5c0 	call	10002a5c <finite>
10001420:	103fa226 	beq	r2,zero,100012ac <__alt_data_end+0xf80012ac>
10001424:	a809883a 	mov	r4,r21
10001428:	a00b883a 	mov	r5,r20
1000142c:	0002a5c0 	call	10002a5c <finite>
10001430:	103f9e26 	beq	r2,zero,100012ac <__alt_data_end+0xf80012ac>
10001434:	00800104 	movi	r2,4
10001438:	d8800015 	stw	r2,0(sp)
1000143c:	90c00017 	ldw	r3,0(r18)
10001440:	00840074 	movhi	r2,4097
10001444:	10883004 	addi	r2,r2,8384
10001448:	d8800115 	stw	r2,4(sp)
1000144c:	d8000815 	stw	zero,32(sp)
10001450:	ddc00215 	stw	r23,8(sp)
10001454:	dd800315 	stw	r22,12(sp)
10001458:	dd400415 	stw	r21,16(sp)
1000145c:	dd000515 	stw	r20,20(sp)
10001460:	d8000615 	stw	zero,24(sp)
10001464:	d8000715 	stw	zero,28(sp)
10001468:	00800084 	movi	r2,2
1000146c:	18806126 	beq	r3,r2,100015f4 <pow+0x3b0>
10001470:	d809883a 	mov	r4,sp
10001474:	0002aec0 	call	10002aec <matherr>
10001478:	10005e26 	beq	r2,zero,100015f4 <pow+0x3b0>
1000147c:	d8800817 	ldw	r2,32(sp)
10001480:	103fba26 	beq	r2,zero,1000136c <__alt_data_end+0xf800136c>
10001484:	003fb606 	br	10001360 <__alt_data_end+0xf8001360>
10001488:	a809883a 	mov	r4,r21
1000148c:	a00b883a 	mov	r5,r20
10001490:	0002a5c0 	call	10002a5c <finite>
10001494:	103f8526 	beq	r2,zero,100012ac <__alt_data_end+0xf80012ac>
10001498:	a809883a 	mov	r4,r21
1000149c:	a00b883a 	mov	r5,r20
100014a0:	000d883a 	mov	r6,zero
100014a4:	000f883a 	mov	r7,zero
100014a8:	000517c0 	call	1000517c <__ledf2>
100014ac:	103f7f0e 	bge	r2,zero,100012ac <__alt_data_end+0xf80012ac>
100014b0:	00c00044 	movi	r3,1
100014b4:	d8c00015 	stw	r3,0(sp)
100014b8:	90800017 	ldw	r2,0(r18)
100014bc:	00c40074 	movhi	r3,4097
100014c0:	18c83004 	addi	r3,r3,8384
100014c4:	d8c00115 	stw	r3,4(sp)
100014c8:	d8000815 	stw	zero,32(sp)
100014cc:	ddc00215 	stw	r23,8(sp)
100014d0:	dd800315 	stw	r22,12(sp)
100014d4:	dd400415 	stw	r21,16(sp)
100014d8:	dd000515 	stw	r20,20(sp)
100014dc:	d8000615 	stw	zero,24(sp)
100014e0:	10002526 	beq	r2,zero,10001578 <pow+0x334>
100014e4:	00fffc34 	movhi	r3,65520
100014e8:	d8c00715 	stw	r3,28(sp)
100014ec:	00c00084 	movi	r3,2
100014f0:	10c0221e 	bne	r2,r3,1000157c <pow+0x338>
100014f4:	00065f80 	call	100065f8 <__errno>
100014f8:	00c00844 	movi	r3,33
100014fc:	10c00015 	stw	r3,0(r2)
10001500:	003fde06 	br	1000147c <__alt_data_end+0xf800147c>
10001504:	00065f80 	call	100065f8 <__errno>
10001508:	00c00844 	movi	r3,33
1000150c:	10c00015 	stw	r3,0(r2)
10001510:	003f9106 	br	10001358 <__alt_data_end+0xf8001358>
10001514:	b809883a 	mov	r4,r23
10001518:	b00b883a 	mov	r5,r22
1000151c:	0002a5c0 	call	10002a5c <finite>
10001520:	103fb626 	beq	r2,zero,100013fc <__alt_data_end+0xf80013fc>
10001524:	a809883a 	mov	r4,r21
10001528:	a00b883a 	mov	r5,r20
1000152c:	0002a5c0 	call	10002a5c <finite>
10001530:	103fb226 	beq	r2,zero,100013fc <__alt_data_end+0xf80013fc>
10001534:	8809883a 	mov	r4,r17
10001538:	800b883a 	mov	r5,r16
1000153c:	0002a780 	call	10002a78 <__fpclassifyd>
10001540:	1000121e 	bne	r2,zero,1000158c <pow+0x348>
10001544:	00800044 	movi	r2,1
10001548:	d8800015 	stw	r2,0(sp)
1000154c:	94000017 	ldw	r16,0(r18)
10001550:	00840074 	movhi	r2,4097
10001554:	10883004 	addi	r2,r2,8384
10001558:	d8800115 	stw	r2,4(sp)
1000155c:	d8000815 	stw	zero,32(sp)
10001560:	ddc00215 	stw	r23,8(sp)
10001564:	dd800315 	stw	r22,12(sp)
10001568:	dd400415 	stw	r21,16(sp)
1000156c:	dd000515 	stw	r20,20(sp)
10001570:	8000241e 	bne	r16,zero,10001604 <pow+0x3c0>
10001574:	d8000615 	stw	zero,24(sp)
10001578:	d8000715 	stw	zero,28(sp)
1000157c:	d809883a 	mov	r4,sp
10001580:	0002aec0 	call	10002aec <matherr>
10001584:	103fbd1e 	bne	r2,zero,1000147c <__alt_data_end+0xf800147c>
10001588:	003fda06 	br	100014f4 <__alt_data_end+0xf80014f4>
1000158c:	00c000c4 	movi	r3,3
10001590:	d8c00015 	stw	r3,0(sp)
10001594:	90800017 	ldw	r2,0(r18)
10001598:	00c40074 	movhi	r3,4097
1000159c:	18c83004 	addi	r3,r3,8384
100015a0:	d8c00115 	stw	r3,4(sp)
100015a4:	d8000815 	stw	zero,32(sp)
100015a8:	ddc00215 	stw	r23,8(sp)
100015ac:	dd800315 	stw	r22,12(sp)
100015b0:	dd400415 	stw	r21,16(sp)
100015b4:	dd000515 	stw	r20,20(sp)
100015b8:	b809883a 	mov	r4,r23
100015bc:	b00b883a 	mov	r5,r22
100015c0:	000d883a 	mov	r6,zero
100015c4:	000f883a 	mov	r7,zero
100015c8:	1000181e 	bne	r2,zero,1000162c <pow+0x3e8>
100015cc:	00b80034 	movhi	r2,57344
100015d0:	d8800615 	stw	r2,24(sp)
100015d4:	0091fc34 	movhi	r2,18416
100015d8:	10bfffc4 	addi	r2,r2,-1
100015dc:	d8800715 	stw	r2,28(sp)
100015e0:	000517c0 	call	1000517c <__ledf2>
100015e4:	10002a16 	blt	r2,zero,10001690 <pow+0x44c>
100015e8:	90c00017 	ldw	r3,0(r18)
100015ec:	00800084 	movi	r2,2
100015f0:	18bf9f1e 	bne	r3,r2,10001470 <__alt_data_end+0xf8001470>
100015f4:	00065f80 	call	100065f8 <__errno>
100015f8:	00c00884 	movi	r3,34
100015fc:	10c00015 	stw	r3,0(r2)
10001600:	003f9e06 	br	1000147c <__alt_data_end+0xf800147c>
10001604:	0009883a 	mov	r4,zero
10001608:	000b883a 	mov	r5,zero
1000160c:	000d883a 	mov	r6,zero
10001610:	000f883a 	mov	r7,zero
10001614:	00046980 	call	10004698 <__divdf3>
10001618:	d8800615 	stw	r2,24(sp)
1000161c:	d8c00715 	stw	r3,28(sp)
10001620:	00800084 	movi	r2,2
10001624:	80bfb326 	beq	r16,r2,100014f4 <__alt_data_end+0xf80014f4>
10001628:	003fd406 	br	1000157c <__alt_data_end+0xf800157c>
1000162c:	009ffc34 	movhi	r2,32752
10001630:	d8000615 	stw	zero,24(sp)
10001634:	d8800715 	stw	r2,28(sp)
10001638:	000517c0 	call	1000517c <__ledf2>
1000163c:	103fea0e 	bge	r2,zero,100015e8 <__alt_data_end+0xf80015e8>
10001640:	000d883a 	mov	r6,zero
10001644:	01cff834 	movhi	r7,16352
10001648:	a809883a 	mov	r4,r21
1000164c:	a00b883a 	mov	r5,r20
10001650:	000525c0 	call	1000525c <__muldf3>
10001654:	1009883a 	mov	r4,r2
10001658:	180b883a 	mov	r5,r3
1000165c:	1023883a 	mov	r17,r2
10001660:	1821883a 	mov	r16,r3
10001664:	0002b000 	call	10002b00 <rint>
10001668:	1009883a 	mov	r4,r2
1000166c:	180b883a 	mov	r5,r3
10001670:	880d883a 	mov	r6,r17
10001674:	800f883a 	mov	r7,r16
10001678:	00050180 	call	10005018 <__eqdf2>
1000167c:	103fda26 	beq	r2,zero,100015e8 <__alt_data_end+0xf80015e8>
10001680:	00bffc34 	movhi	r2,65520
10001684:	d8000615 	stw	zero,24(sp)
10001688:	d8800715 	stw	r2,28(sp)
1000168c:	003fd606 	br	100015e8 <__alt_data_end+0xf80015e8>
10001690:	000d883a 	mov	r6,zero
10001694:	01cff834 	movhi	r7,16352
10001698:	a809883a 	mov	r4,r21
1000169c:	a00b883a 	mov	r5,r20
100016a0:	000525c0 	call	1000525c <__muldf3>
100016a4:	1009883a 	mov	r4,r2
100016a8:	180b883a 	mov	r5,r3
100016ac:	1023883a 	mov	r17,r2
100016b0:	1821883a 	mov	r16,r3
100016b4:	0002b000 	call	10002b00 <rint>
100016b8:	1009883a 	mov	r4,r2
100016bc:	180b883a 	mov	r5,r3
100016c0:	880d883a 	mov	r6,r17
100016c4:	800f883a 	mov	r7,r16
100016c8:	00050180 	call	10005018 <__eqdf2>
100016cc:	103fc626 	beq	r2,zero,100015e8 <__alt_data_end+0xf80015e8>
100016d0:	00b80034 	movhi	r2,57344
100016d4:	d8800615 	stw	r2,24(sp)
100016d8:	00b1fc34 	movhi	r2,51184
100016dc:	10bfffc4 	addi	r2,r2,-1
100016e0:	d8800715 	stw	r2,28(sp)
100016e4:	003fc006 	br	100015e8 <__alt_data_end+0xf80015e8>

100016e8 <__ieee754_pow>:
100016e8:	00a00034 	movhi	r2,32768
100016ec:	deffec04 	addi	sp,sp,-80
100016f0:	10bfffc4 	addi	r2,r2,-1
100016f4:	dc400b15 	stw	r17,44(sp)
100016f8:	38a2703a 	and	r17,r7,r2
100016fc:	dfc01315 	stw	ra,76(sp)
10001700:	df001215 	stw	fp,72(sp)
10001704:	ddc01115 	stw	r23,68(sp)
10001708:	dd801015 	stw	r22,64(sp)
1000170c:	dd400f15 	stw	r21,60(sp)
10001710:	dd000e15 	stw	r20,56(sp)
10001714:	dcc00d15 	stw	r19,52(sp)
10001718:	dc800c15 	stw	r18,48(sp)
1000171c:	dc000a15 	stw	r16,40(sp)
10001720:	8986b03a 	or	r3,r17,r6
10001724:	18002a26 	beq	r3,zero,100017d0 <__ieee754_pow+0xe8>
10001728:	28a4703a 	and	r18,r5,r2
1000172c:	009ffc34 	movhi	r2,32752
10001730:	14802316 	blt	r2,r18,100017c0 <__ieee754_pow+0xd8>
10001734:	90802126 	beq	r18,r2,100017bc <__ieee754_pow+0xd4>
10001738:	14402116 	blt	r2,r17,100017c0 <__ieee754_pow+0xd8>
1000173c:	009ffc34 	movhi	r2,32752
10001740:	88807326 	beq	r17,r2,10001910 <__ieee754_pow+0x228>
10001744:	2827883a 	mov	r19,r5
10001748:	2021883a 	mov	r16,r4
1000174c:	302b883a 	mov	r21,r6
10001750:	382f883a 	mov	r23,r7
10001754:	28007016 	blt	r5,zero,10001918 <__ieee754_pow+0x230>
10001758:	0039883a 	mov	fp,zero
1000175c:	a8003a1e 	bne	r21,zero,10001848 <__ieee754_pow+0x160>
10001760:	009ffc34 	movhi	r2,32752
10001764:	88807e26 	beq	r17,r2,10001960 <__ieee754_pow+0x278>
10001768:	008ffc34 	movhi	r2,16368
1000176c:	88805426 	beq	r17,r2,100018c0 <__ieee754_pow+0x1d8>
10001770:	00900034 	movhi	r2,16384
10001774:	b8834926 	beq	r23,r2,1000249c <__ieee754_pow+0xdb4>
10001778:	008ff834 	movhi	r2,16352
1000177c:	b880321e 	bne	r23,r2,10001848 <__ieee754_pow+0x160>
10001780:	98003116 	blt	r19,zero,10001848 <__ieee754_pow+0x160>
10001784:	8009883a 	mov	r4,r16
10001788:	980b883a 	mov	r5,r19
1000178c:	dfc01317 	ldw	ra,76(sp)
10001790:	df001217 	ldw	fp,72(sp)
10001794:	ddc01117 	ldw	r23,68(sp)
10001798:	dd801017 	ldw	r22,64(sp)
1000179c:	dd400f17 	ldw	r21,60(sp)
100017a0:	dd000e17 	ldw	r20,56(sp)
100017a4:	dcc00d17 	ldw	r19,52(sp)
100017a8:	dc800c17 	ldw	r18,48(sp)
100017ac:	dc400b17 	ldw	r17,44(sp)
100017b0:	dc000a17 	ldw	r16,40(sp)
100017b4:	dec01404 	addi	sp,sp,80
100017b8:	00027b41 	jmpi	100027b4 <__ieee754_sqrt>
100017bc:	20001226 	beq	r4,zero,10001808 <__ieee754_pow+0x120>
100017c0:	00b00434 	movhi	r2,49168
100017c4:	9085883a 	add	r2,r18,r2
100017c8:	1108b03a 	or	r4,r2,r4
100017cc:	20000f1e 	bne	r4,zero,1000180c <__ieee754_pow+0x124>
100017d0:	0005883a 	mov	r2,zero
100017d4:	00cffc34 	movhi	r3,16368
100017d8:	dfc01317 	ldw	ra,76(sp)
100017dc:	df001217 	ldw	fp,72(sp)
100017e0:	ddc01117 	ldw	r23,68(sp)
100017e4:	dd801017 	ldw	r22,64(sp)
100017e8:	dd400f17 	ldw	r21,60(sp)
100017ec:	dd000e17 	ldw	r20,56(sp)
100017f0:	dcc00d17 	ldw	r19,52(sp)
100017f4:	dc800c17 	ldw	r18,48(sp)
100017f8:	dc400b17 	ldw	r17,44(sp)
100017fc:	dc000a17 	ldw	r16,40(sp)
10001800:	dec01404 	addi	sp,sp,80
10001804:	f800283a 	ret
10001808:	947fcc0e 	bge	r18,r17,1000173c <__alt_data_end+0xf800173c>
1000180c:	01040074 	movhi	r4,4097
10001810:	21088a04 	addi	r4,r4,8744
10001814:	dfc01317 	ldw	ra,76(sp)
10001818:	df001217 	ldw	fp,72(sp)
1000181c:	ddc01117 	ldw	r23,68(sp)
10001820:	dd801017 	ldw	r22,64(sp)
10001824:	dd400f17 	ldw	r21,60(sp)
10001828:	dd000e17 	ldw	r20,56(sp)
1000182c:	dcc00d17 	ldw	r19,52(sp)
10001830:	dc800c17 	ldw	r18,48(sp)
10001834:	dc400b17 	ldw	r17,44(sp)
10001838:	dc000a17 	ldw	r16,40(sp)
1000183c:	dec01404 	addi	sp,sp,80
10001840:	0002af41 	jmpi	10002af4 <nan>
10001844:	0039883a 	mov	fp,zero
10001848:	8009883a 	mov	r4,r16
1000184c:	980b883a 	mov	r5,r19
10001850:	0002a480 	call	10002a48 <fabs>
10001854:	102d883a 	mov	r22,r2
10001858:	80000f26 	beq	r16,zero,10001898 <__ieee754_pow+0x1b0>
1000185c:	9816d7fa 	srli	r11,r19,31
10001860:	5affffc4 	addi	r11,r11,-1
10001864:	e2c4b03a 	or	r2,fp,r11
10001868:	10004a26 	beq	r2,zero,10001994 <__ieee754_pow+0x2ac>
1000186c:	00907834 	movhi	r2,16864
10001870:	1440530e 	bge	r2,r17,100019c0 <__ieee754_pow+0x2d8>
10001874:	0090fc34 	movhi	r2,17392
10001878:	14433e0e 	bge	r2,r17,10002574 <__ieee754_pow+0xe8c>
1000187c:	008ffc34 	movhi	r2,16368
10001880:	10bfffc4 	addi	r2,r2,-1
10001884:	14801916 	blt	r2,r18,100018ec <__ieee754_pow+0x204>
10001888:	b8001916 	blt	r23,zero,100018f0 <__ieee754_pow+0x208>
1000188c:	0005883a 	mov	r2,zero
10001890:	0007883a 	mov	r3,zero
10001894:	003fd006 	br	100017d8 <__alt_data_end+0xf80017d8>
10001898:	90000526 	beq	r18,zero,100018b0 <__ieee754_pow+0x1c8>
1000189c:	00900034 	movhi	r2,16384
100018a0:	10bfffc4 	addi	r2,r2,-1
100018a4:	9884703a 	and	r2,r19,r2
100018a8:	010ffc34 	movhi	r4,16368
100018ac:	113feb1e 	bne	r2,r4,1000185c <__alt_data_end+0xf800185c>
100018b0:	b8000716 	blt	r23,zero,100018d0 <__ieee754_pow+0x1e8>
100018b4:	9802f216 	blt	r19,zero,10002480 <__ieee754_pow+0xd98>
100018b8:	b005883a 	mov	r2,r22
100018bc:	003fc606 	br	100017d8 <__alt_data_end+0xf80017d8>
100018c0:	b8038816 	blt	r23,zero,100026e4 <__ieee754_pow+0xffc>
100018c4:	8005883a 	mov	r2,r16
100018c8:	9807883a 	mov	r3,r19
100018cc:	003fc206 	br	100017d8 <__alt_data_end+0xf80017d8>
100018d0:	b00d883a 	mov	r6,r22
100018d4:	0009883a 	mov	r4,zero
100018d8:	014ffc34 	movhi	r5,16368
100018dc:	180f883a 	mov	r7,r3
100018e0:	00046980 	call	10004698 <__divdf3>
100018e4:	102d883a 	mov	r22,r2
100018e8:	003ff206 	br	100018b4 <__alt_data_end+0xf80018b4>
100018ec:	05ffe70e 	bge	zero,r23,1000188c <__alt_data_end+0xf800188c>
100018f0:	01220034 	movhi	r4,34816
100018f4:	015f8e34 	movhi	r5,32312
100018f8:	211d6704 	addi	r4,r4,30108
100018fc:	29790f04 	addi	r5,r5,-7108
10001900:	200d883a 	mov	r6,r4
10001904:	280f883a 	mov	r7,r5
10001908:	000525c0 	call	1000525c <__muldf3>
1000190c:	003fb206 	br	100017d8 <__alt_data_end+0xf80017d8>
10001910:	303f8c26 	beq	r6,zero,10001744 <__alt_data_end+0xf8001744>
10001914:	003faa06 	br	100017c0 <__alt_data_end+0xf80017c0>
10001918:	0090d034 	movhi	r2,17216
1000191c:	10bfffc4 	addi	r2,r2,-1
10001920:	14401a16 	blt	r2,r17,1000198c <__ieee754_pow+0x2a4>
10001924:	008ffc34 	movhi	r2,16368
10001928:	10bfffc4 	addi	r2,r2,-1
1000192c:	147f8a0e 	bge	r2,r17,10001758 <__alt_data_end+0xf8001758>
10001930:	8809d53a 	srai	r4,r17,20
10001934:	00c104c4 	movi	r3,1043
10001938:	1903840e 	bge	r3,r4,1000274c <__ieee754_pow+0x1064>
1000193c:	00810cc4 	movi	r2,1075
10001940:	1105c83a 	sub	r2,r2,r4
10001944:	3086d83a 	srl	r3,r6,r2
10001948:	1884983a 	sll	r2,r3,r2
1000194c:	11bf821e 	bne	r2,r6,10001758 <__alt_data_end+0xf8001758>
10001950:	18c0004c 	andi	r3,r3,1
10001954:	02800084 	movi	r10,2
10001958:	50f9c83a 	sub	fp,r10,r3
1000195c:	003f7f06 	br	1000175c <__alt_data_end+0xf800175c>
10001960:	01300434 	movhi	r4,49168
10001964:	9109883a 	add	r4,r18,r4
10001968:	2408b03a 	or	r4,r4,r16
1000196c:	203f9826 	beq	r4,zero,100017d0 <__alt_data_end+0xf80017d0>
10001970:	008ffc34 	movhi	r2,16368
10001974:	10bfffc4 	addi	r2,r2,-1
10001978:	1482f50e 	bge	r2,r18,10002550 <__ieee754_pow+0xe68>
1000197c:	b83fc316 	blt	r23,zero,1000188c <__alt_data_end+0xf800188c>
10001980:	0005883a 	mov	r2,zero
10001984:	b807883a 	mov	r3,r23
10001988:	003f9306 	br	100017d8 <__alt_data_end+0xf80017d8>
1000198c:	07000084 	movi	fp,2
10001990:	003f7206 	br	1000175c <__alt_data_end+0xf800175c>
10001994:	8009883a 	mov	r4,r16
10001998:	980b883a 	mov	r5,r19
1000199c:	200d883a 	mov	r6,r4
100019a0:	280f883a 	mov	r7,r5
100019a4:	0005ac80 	call	10005ac8 <__subdf3>
100019a8:	1009883a 	mov	r4,r2
100019ac:	180b883a 	mov	r5,r3
100019b0:	100d883a 	mov	r6,r2
100019b4:	180f883a 	mov	r7,r3
100019b8:	00046980 	call	10004698 <__divdf3>
100019bc:	003f8606 	br	100017d8 <__alt_data_end+0xf80017d8>
100019c0:	00800434 	movhi	r2,16
100019c4:	10bfffc4 	addi	r2,r2,-1
100019c8:	1482e816 	blt	r2,r18,1000256c <__ieee754_pow+0xe84>
100019cc:	b009883a 	mov	r4,r22
100019d0:	180b883a 	mov	r5,r3
100019d4:	000d883a 	mov	r6,zero
100019d8:	01d0d034 	movhi	r7,17216
100019dc:	dac00915 	stw	r11,36(sp)
100019e0:	000525c0 	call	1000525c <__muldf3>
100019e4:	dac00917 	ldw	r11,36(sp)
100019e8:	102d883a 	mov	r22,r2
100019ec:	1825883a 	mov	r18,r3
100019f0:	013ff2c4 	movi	r4,-53
100019f4:	9007d53a 	srai	r3,r18,20
100019f8:	00800434 	movhi	r2,16
100019fc:	10bfffc4 	addi	r2,r2,-1
10001a00:	18ff0044 	addi	r3,r3,-1023
10001a04:	1911883a 	add	r8,r3,r4
10001a08:	00c00134 	movhi	r3,4
10001a0c:	9084703a 	and	r2,r18,r2
10001a10:	18e62384 	addi	r3,r3,-26482
10001a14:	14cffc34 	orhi	r19,r2,16368
10001a18:	1882d10e 	bge	r3,r2,10002560 <__ieee754_pow+0xe78>
10001a1c:	00c00334 	movhi	r3,12
10001a20:	18ed9e44 	addi	r3,r3,-18823
10001a24:	1883550e 	bge	r3,r2,1000277c <__ieee754_pow+0x1094>
10001a28:	00bffc34 	movhi	r2,65520
10001a2c:	42000044 	addi	r8,r8,1
10001a30:	98a7883a 	add	r19,r19,r2
10001a34:	0021883a 	mov	r16,zero
10001a38:	0019883a 	mov	r12,zero
10001a3c:	601890fa 	slli	r12,r12,3
10001a40:	00840074 	movhi	r2,4097
10001a44:	10883904 	addi	r2,r2,8420
10001a48:	1305883a 	add	r2,r2,r12
10001a4c:	13400017 	ldw	r13,0(r2)
10001a50:	12800117 	ldw	r10,4(r2)
10001a54:	b009883a 	mov	r4,r22
10001a58:	980b883a 	mov	r5,r19
10001a5c:	680d883a 	mov	r6,r13
10001a60:	500f883a 	mov	r7,r10
10001a64:	da000815 	stw	r8,32(sp)
10001a68:	dac00915 	stw	r11,36(sp)
10001a6c:	db000715 	stw	r12,28(sp)
10001a70:	da800315 	stw	r10,12(sp)
10001a74:	db400415 	stw	r13,16(sp)
10001a78:	0005ac80 	call	10005ac8 <__subdf3>
10001a7c:	da800317 	ldw	r10,12(sp)
10001a80:	db400417 	ldw	r13,16(sp)
10001a84:	b009883a 	mov	r4,r22
10001a88:	500f883a 	mov	r7,r10
10001a8c:	680d883a 	mov	r6,r13
10001a90:	980b883a 	mov	r5,r19
10001a94:	1829883a 	mov	r20,r3
10001a98:	d8800015 	stw	r2,0(sp)
10001a9c:	0003dfc0 	call	10003dfc <__adddf3>
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	014ffc34 	movhi	r5,16368
10001aa8:	100d883a 	mov	r6,r2
10001aac:	180f883a 	mov	r7,r3
10001ab0:	00046980 	call	10004698 <__divdf3>
10001ab4:	d9000017 	ldw	r4,0(sp)
10001ab8:	a00b883a 	mov	r5,r20
10001abc:	100d883a 	mov	r6,r2
10001ac0:	180f883a 	mov	r7,r3
10001ac4:	d8c00615 	stw	r3,24(sp)
10001ac8:	d8800515 	stw	r2,20(sp)
10001acc:	000525c0 	call	1000525c <__muldf3>
10001ad0:	1025883a 	mov	r18,r2
10001ad4:	9805d07a 	srai	r2,r19,1
10001ad8:	1823883a 	mov	r17,r3
10001adc:	880b883a 	mov	r5,r17
10001ae0:	10c80034 	orhi	r3,r2,8192
10001ae4:	00800234 	movhi	r2,8
10001ae8:	1885883a 	add	r2,r3,r2
10001aec:	1421883a 	add	r16,r2,r16
10001af0:	800f883a 	mov	r7,r16
10001af4:	0009883a 	mov	r4,zero
10001af8:	000d883a 	mov	r6,zero
10001afc:	000525c0 	call	1000525c <__muldf3>
10001b00:	d9000017 	ldw	r4,0(sp)
10001b04:	a00b883a 	mov	r5,r20
10001b08:	100d883a 	mov	r6,r2
10001b0c:	180f883a 	mov	r7,r3
10001b10:	0005ac80 	call	10005ac8 <__subdf3>
10001b14:	da800317 	ldw	r10,12(sp)
10001b18:	db400417 	ldw	r13,16(sp)
10001b1c:	800b883a 	mov	r5,r16
10001b20:	500f883a 	mov	r7,r10
10001b24:	680d883a 	mov	r6,r13
10001b28:	0009883a 	mov	r4,zero
10001b2c:	1829883a 	mov	r20,r3
10001b30:	d8800315 	stw	r2,12(sp)
10001b34:	0005ac80 	call	10005ac8 <__subdf3>
10001b38:	b009883a 	mov	r4,r22
10001b3c:	980b883a 	mov	r5,r19
10001b40:	100d883a 	mov	r6,r2
10001b44:	180f883a 	mov	r7,r3
10001b48:	0005ac80 	call	10005ac8 <__subdf3>
10001b4c:	880b883a 	mov	r5,r17
10001b50:	0009883a 	mov	r4,zero
10001b54:	100d883a 	mov	r6,r2
10001b58:	180f883a 	mov	r7,r3
10001b5c:	000525c0 	call	1000525c <__muldf3>
10001b60:	da400317 	ldw	r9,12(sp)
10001b64:	a00b883a 	mov	r5,r20
10001b68:	100d883a 	mov	r6,r2
10001b6c:	4809883a 	mov	r4,r9
10001b70:	180f883a 	mov	r7,r3
10001b74:	0005ac80 	call	10005ac8 <__subdf3>
10001b78:	dbc00517 	ldw	r15,20(sp)
10001b7c:	db800617 	ldw	r14,24(sp)
10001b80:	1009883a 	mov	r4,r2
10001b84:	780d883a 	mov	r6,r15
10001b88:	700f883a 	mov	r7,r14
10001b8c:	180b883a 	mov	r5,r3
10001b90:	000525c0 	call	1000525c <__muldf3>
10001b94:	9009883a 	mov	r4,r18
10001b98:	880b883a 	mov	r5,r17
10001b9c:	900d883a 	mov	r6,r18
10001ba0:	880f883a 	mov	r7,r17
10001ba4:	182d883a 	mov	r22,r3
10001ba8:	d8800015 	stw	r2,0(sp)
10001bac:	000525c0 	call	1000525c <__muldf3>
10001bb0:	1009883a 	mov	r4,r2
10001bb4:	180b883a 	mov	r5,r3
10001bb8:	100d883a 	mov	r6,r2
10001bbc:	180f883a 	mov	r7,r3
10001bc0:	1027883a 	mov	r19,r2
10001bc4:	1821883a 	mov	r16,r3
10001bc8:	000525c0 	call	1000525c <__muldf3>
10001bcc:	01929174 	movhi	r6,19013
10001bd0:	01cff2b4 	movhi	r7,16330
10001bd4:	9809883a 	mov	r4,r19
10001bd8:	800b883a 	mov	r5,r16
10001bdc:	3193bbc4 	addi	r6,r6,20207
10001be0:	39df8a04 	addi	r7,r7,32296
10001be4:	1829883a 	mov	r20,r3
10001be8:	d8800315 	stw	r2,12(sp)
10001bec:	000525c0 	call	1000525c <__muldf3>
10001bf0:	01a4f2b4 	movhi	r6,37834
10001bf4:	01cff3b4 	movhi	r7,16334
10001bf8:	1009883a 	mov	r4,r2
10001bfc:	180b883a 	mov	r5,r3
10001c00:	31b6d944 	addi	r6,r6,-9371
10001c04:	39e19284 	addi	r7,r7,-31158
10001c08:	0003dfc0 	call	10003dfc <__adddf3>
10001c0c:	980d883a 	mov	r6,r19
10001c10:	800f883a 	mov	r7,r16
10001c14:	1009883a 	mov	r4,r2
10001c18:	180b883a 	mov	r5,r3
10001c1c:	000525c0 	call	1000525c <__muldf3>
10001c20:	01aa4774 	movhi	r6,43293
10001c24:	01cff474 	movhi	r7,16337
10001c28:	1009883a 	mov	r4,r2
10001c2c:	180b883a 	mov	r5,r3
10001c30:	31904044 	addi	r6,r6,16641
10001c34:	39dd1804 	addi	r7,r7,29792
10001c38:	0003dfc0 	call	10003dfc <__adddf3>
10001c3c:	980d883a 	mov	r6,r19
10001c40:	800f883a 	mov	r7,r16
10001c44:	1009883a 	mov	r4,r2
10001c48:	180b883a 	mov	r5,r3
10001c4c:	000525c0 	call	1000525c <__muldf3>
10001c50:	019463f4 	movhi	r6,20879
10001c54:	01cff574 	movhi	r7,16341
10001c58:	1009883a 	mov	r4,r2
10001c5c:	180b883a 	mov	r5,r3
10001c60:	31899344 	addi	r6,r6,9805
10001c64:	39d55544 	addi	r7,r7,21845
10001c68:	0003dfc0 	call	10003dfc <__adddf3>
10001c6c:	980d883a 	mov	r6,r19
10001c70:	800f883a 	mov	r7,r16
10001c74:	1009883a 	mov	r4,r2
10001c78:	180b883a 	mov	r5,r3
10001c7c:	000525c0 	call	1000525c <__muldf3>
10001c80:	01b6dc34 	movhi	r6,56176
10001c84:	01cff6f4 	movhi	r7,16347
10001c88:	1009883a 	mov	r4,r2
10001c8c:	180b883a 	mov	r5,r3
10001c90:	31aaffc4 	addi	r6,r6,-21505
10001c94:	39db6d84 	addi	r7,r7,28086
10001c98:	0003dfc0 	call	10003dfc <__adddf3>
10001c9c:	980d883a 	mov	r6,r19
10001ca0:	800f883a 	mov	r7,r16
10001ca4:	1009883a 	mov	r4,r2
10001ca8:	180b883a 	mov	r5,r3
10001cac:	000525c0 	call	1000525c <__muldf3>
10001cb0:	018cccf4 	movhi	r6,13107
10001cb4:	01cff8f4 	movhi	r7,16355
10001cb8:	1009883a 	mov	r4,r2
10001cbc:	180b883a 	mov	r5,r3
10001cc0:	318cc0c4 	addi	r6,r6,13059
10001cc4:	39ccccc4 	addi	r7,r7,13107
10001cc8:	0003dfc0 	call	10003dfc <__adddf3>
10001ccc:	da400317 	ldw	r9,12(sp)
10001cd0:	a00b883a 	mov	r5,r20
10001cd4:	100d883a 	mov	r6,r2
10001cd8:	4809883a 	mov	r4,r9
10001cdc:	180f883a 	mov	r7,r3
10001ce0:	000525c0 	call	1000525c <__muldf3>
10001ce4:	880b883a 	mov	r5,r17
10001ce8:	900d883a 	mov	r6,r18
10001cec:	880f883a 	mov	r7,r17
10001cf0:	0009883a 	mov	r4,zero
10001cf4:	1027883a 	mov	r19,r2
10001cf8:	1821883a 	mov	r16,r3
10001cfc:	0003dfc0 	call	10003dfc <__adddf3>
10001d00:	d9800017 	ldw	r6,0(sp)
10001d04:	b00f883a 	mov	r7,r22
10001d08:	1009883a 	mov	r4,r2
10001d0c:	180b883a 	mov	r5,r3
10001d10:	000525c0 	call	1000525c <__muldf3>
10001d14:	980d883a 	mov	r6,r19
10001d18:	800f883a 	mov	r7,r16
10001d1c:	1009883a 	mov	r4,r2
10001d20:	180b883a 	mov	r5,r3
10001d24:	0003dfc0 	call	10003dfc <__adddf3>
10001d28:	880f883a 	mov	r7,r17
10001d2c:	880b883a 	mov	r5,r17
10001d30:	000d883a 	mov	r6,zero
10001d34:	0009883a 	mov	r4,zero
10001d38:	1029883a 	mov	r20,r2
10001d3c:	1827883a 	mov	r19,r3
10001d40:	000525c0 	call	1000525c <__muldf3>
10001d44:	1009883a 	mov	r4,r2
10001d48:	180b883a 	mov	r5,r3
10001d4c:	000d883a 	mov	r6,zero
10001d50:	01d00234 	movhi	r7,16392
10001d54:	d8c00615 	stw	r3,24(sp)
10001d58:	d8800515 	stw	r2,20(sp)
10001d5c:	0003dfc0 	call	10003dfc <__adddf3>
10001d60:	a00d883a 	mov	r6,r20
10001d64:	980f883a 	mov	r7,r19
10001d68:	1009883a 	mov	r4,r2
10001d6c:	180b883a 	mov	r5,r3
10001d70:	0003dfc0 	call	10003dfc <__adddf3>
10001d74:	880b883a 	mov	r5,r17
10001d78:	000d883a 	mov	r6,zero
10001d7c:	180f883a 	mov	r7,r3
10001d80:	0009883a 	mov	r4,zero
10001d84:	1821883a 	mov	r16,r3
10001d88:	000525c0 	call	1000525c <__muldf3>
10001d8c:	d9000017 	ldw	r4,0(sp)
10001d90:	b00b883a 	mov	r5,r22
10001d94:	800f883a 	mov	r7,r16
10001d98:	000d883a 	mov	r6,zero
10001d9c:	d8800115 	stw	r2,4(sp)
10001da0:	d8c00215 	stw	r3,8(sp)
10001da4:	000525c0 	call	1000525c <__muldf3>
10001da8:	800b883a 	mov	r5,r16
10001dac:	0009883a 	mov	r4,zero
10001db0:	000d883a 	mov	r6,zero
10001db4:	01d00234 	movhi	r7,16392
10001db8:	182d883a 	mov	r22,r3
10001dbc:	d8800315 	stw	r2,12(sp)
10001dc0:	0005ac80 	call	10005ac8 <__subdf3>
10001dc4:	dbc00517 	ldw	r15,20(sp)
10001dc8:	db800617 	ldw	r14,24(sp)
10001dcc:	1009883a 	mov	r4,r2
10001dd0:	780d883a 	mov	r6,r15
10001dd4:	700f883a 	mov	r7,r14
10001dd8:	180b883a 	mov	r5,r3
10001ddc:	0005ac80 	call	10005ac8 <__subdf3>
10001de0:	a009883a 	mov	r4,r20
10001de4:	980b883a 	mov	r5,r19
10001de8:	100d883a 	mov	r6,r2
10001dec:	180f883a 	mov	r7,r3
10001df0:	0005ac80 	call	10005ac8 <__subdf3>
10001df4:	900d883a 	mov	r6,r18
10001df8:	880f883a 	mov	r7,r17
10001dfc:	1009883a 	mov	r4,r2
10001e00:	180b883a 	mov	r5,r3
10001e04:	000525c0 	call	1000525c <__muldf3>
10001e08:	da400317 	ldw	r9,12(sp)
10001e0c:	b00b883a 	mov	r5,r22
10001e10:	100d883a 	mov	r6,r2
10001e14:	4809883a 	mov	r4,r9
10001e18:	180f883a 	mov	r7,r3
10001e1c:	0003dfc0 	call	10003dfc <__adddf3>
10001e20:	d9000117 	ldw	r4,4(sp)
10001e24:	d9400217 	ldw	r5,8(sp)
10001e28:	100d883a 	mov	r6,r2
10001e2c:	180f883a 	mov	r7,r3
10001e30:	102d883a 	mov	r22,r2
10001e34:	1825883a 	mov	r18,r3
10001e38:	0003dfc0 	call	10003dfc <__adddf3>
10001e3c:	01cffbf4 	movhi	r7,16367
10001e40:	39f1c244 	addi	r7,r7,-14583
10001e44:	0009883a 	mov	r4,zero
10001e48:	180b883a 	mov	r5,r3
10001e4c:	01b80034 	movhi	r6,57344
10001e50:	1823883a 	mov	r17,r3
10001e54:	000525c0 	call	1000525c <__muldf3>
10001e58:	018516f4 	movhi	r6,5211
10001e5c:	01ef8fb4 	movhi	r7,48702
10001e60:	880b883a 	mov	r5,r17
10001e64:	31807d44 	addi	r6,r6,501
10001e68:	39cbf804 	addi	r7,r7,12256
10001e6c:	0009883a 	mov	r4,zero
10001e70:	1029883a 	mov	r20,r2
10001e74:	1827883a 	mov	r19,r3
10001e78:	000525c0 	call	1000525c <__muldf3>
10001e7c:	d9800117 	ldw	r6,4(sp)
10001e80:	d9c00217 	ldw	r7,8(sp)
10001e84:	880b883a 	mov	r5,r17
10001e88:	0009883a 	mov	r4,zero
10001e8c:	1821883a 	mov	r16,r3
10001e90:	d8800415 	stw	r2,16(sp)
10001e94:	0005ac80 	call	10005ac8 <__subdf3>
10001e98:	b009883a 	mov	r4,r22
10001e9c:	900b883a 	mov	r5,r18
10001ea0:	100d883a 	mov	r6,r2
10001ea4:	180f883a 	mov	r7,r3
10001ea8:	0005ac80 	call	10005ac8 <__subdf3>
10001eac:	01b70eb4 	movhi	r6,56378
10001eb0:	01cffbf4 	movhi	r7,16367
10001eb4:	1009883a 	mov	r4,r2
10001eb8:	180b883a 	mov	r5,r3
10001ebc:	3180ff44 	addi	r6,r6,1021
10001ec0:	39f1c244 	addi	r7,r7,-14583
10001ec4:	000525c0 	call	1000525c <__muldf3>
10001ec8:	db400417 	ldw	r13,16(sp)
10001ecc:	800b883a 	mov	r5,r16
10001ed0:	100d883a 	mov	r6,r2
10001ed4:	6809883a 	mov	r4,r13
10001ed8:	180f883a 	mov	r7,r3
10001edc:	0003dfc0 	call	10003dfc <__adddf3>
10001ee0:	db000717 	ldw	r12,28(sp)
10001ee4:	1009883a 	mov	r4,r2
10001ee8:	00840074 	movhi	r2,4097
10001eec:	10883104 	addi	r2,r2,8388
10001ef0:	1305883a 	add	r2,r2,r12
10001ef4:	11800017 	ldw	r6,0(r2)
10001ef8:	11c00117 	ldw	r7,4(r2)
10001efc:	180b883a 	mov	r5,r3
10001f00:	0003dfc0 	call	10003dfc <__adddf3>
10001f04:	da000817 	ldw	r8,32(sp)
10001f08:	1025883a 	mov	r18,r2
10001f0c:	1823883a 	mov	r17,r3
10001f10:	4009883a 	mov	r4,r8
10001f14:	00064200 	call	10006420 <__floatsidf>
10001f18:	db000717 	ldw	r12,28(sp)
10001f1c:	d8800115 	stw	r2,4(sp)
10001f20:	00840074 	movhi	r2,4097
10001f24:	10883504 	addi	r2,r2,8404
10001f28:	1319883a 	add	r12,r2,r12
10001f2c:	65800017 	ldw	r22,0(r12)
10001f30:	63000117 	ldw	r12,4(r12)
10001f34:	a009883a 	mov	r4,r20
10001f38:	980b883a 	mov	r5,r19
10001f3c:	900d883a 	mov	r6,r18
10001f40:	880f883a 	mov	r7,r17
10001f44:	db000015 	stw	r12,0(sp)
10001f48:	d8c00215 	stw	r3,8(sp)
10001f4c:	0003dfc0 	call	10003dfc <__adddf3>
10001f50:	d9c00017 	ldw	r7,0(sp)
10001f54:	1009883a 	mov	r4,r2
10001f58:	180b883a 	mov	r5,r3
10001f5c:	b00d883a 	mov	r6,r22
10001f60:	0003dfc0 	call	10003dfc <__adddf3>
10001f64:	d9800117 	ldw	r6,4(sp)
10001f68:	d9c00217 	ldw	r7,8(sp)
10001f6c:	1009883a 	mov	r4,r2
10001f70:	180b883a 	mov	r5,r3
10001f74:	0003dfc0 	call	10003dfc <__adddf3>
10001f78:	d9800117 	ldw	r6,4(sp)
10001f7c:	d9c00217 	ldw	r7,8(sp)
10001f80:	0009883a 	mov	r4,zero
10001f84:	180b883a 	mov	r5,r3
10001f88:	1821883a 	mov	r16,r3
10001f8c:	0005ac80 	call	10005ac8 <__subdf3>
10001f90:	d9c00017 	ldw	r7,0(sp)
10001f94:	1009883a 	mov	r4,r2
10001f98:	180b883a 	mov	r5,r3
10001f9c:	b00d883a 	mov	r6,r22
10001fa0:	0005ac80 	call	10005ac8 <__subdf3>
10001fa4:	1009883a 	mov	r4,r2
10001fa8:	180b883a 	mov	r5,r3
10001fac:	a00d883a 	mov	r6,r20
10001fb0:	980f883a 	mov	r7,r19
10001fb4:	0005ac80 	call	10005ac8 <__subdf3>
10001fb8:	9009883a 	mov	r4,r18
10001fbc:	880b883a 	mov	r5,r17
10001fc0:	100d883a 	mov	r6,r2
10001fc4:	180f883a 	mov	r7,r3
10001fc8:	0005ac80 	call	10005ac8 <__subdf3>
10001fcc:	dac00917 	ldw	r11,36(sp)
10001fd0:	e2bfffc4 	addi	r10,fp,-1
10001fd4:	1027883a 	mov	r19,r2
10001fd8:	52d6b03a 	or	r11,r10,r11
10001fdc:	1823883a 	mov	r17,r3
10001fe0:	5801591e 	bne	r11,zero,10002548 <__ieee754_pow+0xe60>
10001fe4:	04affc34 	movhi	r18,49136
10001fe8:	b80f883a 	mov	r7,r23
10001fec:	a809883a 	mov	r4,r21
10001ff0:	b80b883a 	mov	r5,r23
10001ff4:	000d883a 	mov	r6,zero
10001ff8:	0005ac80 	call	10005ac8 <__subdf3>
10001ffc:	1009883a 	mov	r4,r2
10002000:	180b883a 	mov	r5,r3
10002004:	000d883a 	mov	r6,zero
10002008:	800f883a 	mov	r7,r16
1000200c:	000525c0 	call	1000525c <__muldf3>
10002010:	a809883a 	mov	r4,r21
10002014:	b80b883a 	mov	r5,r23
10002018:	980d883a 	mov	r6,r19
1000201c:	880f883a 	mov	r7,r17
10002020:	102d883a 	mov	r22,r2
10002024:	1829883a 	mov	r20,r3
10002028:	000525c0 	call	1000525c <__muldf3>
1000202c:	b009883a 	mov	r4,r22
10002030:	a00b883a 	mov	r5,r20
10002034:	100d883a 	mov	r6,r2
10002038:	180f883a 	mov	r7,r3
1000203c:	0003dfc0 	call	10003dfc <__adddf3>
10002040:	b80b883a 	mov	r5,r23
10002044:	0009883a 	mov	r4,zero
10002048:	000d883a 	mov	r6,zero
1000204c:	800f883a 	mov	r7,r16
10002050:	1027883a 	mov	r19,r2
10002054:	1823883a 	mov	r17,r3
10002058:	000525c0 	call	1000525c <__muldf3>
1000205c:	9809883a 	mov	r4,r19
10002060:	880b883a 	mov	r5,r17
10002064:	100d883a 	mov	r6,r2
10002068:	180f883a 	mov	r7,r3
1000206c:	102d883a 	mov	r22,r2
10002070:	182b883a 	mov	r21,r3
10002074:	0003dfc0 	call	10003dfc <__adddf3>
10002078:	102f883a 	mov	r23,r2
1000207c:	00902434 	movhi	r2,16528
10002080:	10bfffc4 	addi	r2,r2,-1
10002084:	1829883a 	mov	r20,r3
10002088:	b013883a 	mov	r9,r22
1000208c:	a811883a 	mov	r8,r21
10002090:	10c1080e 	bge	r2,r3,100024b4 <__ieee754_pow+0xdcc>
10002094:	00efdc34 	movhi	r3,49008
10002098:	a0c7883a 	add	r3,r20,r3
1000209c:	1dc6b03a 	or	r3,r3,r23
100020a0:	1801961e 	bne	r3,zero,100026fc <__ieee754_pow+0x1014>
100020a4:	01994b34 	movhi	r6,25900
100020a8:	01cf25f4 	movhi	r7,15511
100020ac:	31a0bf84 	addi	r6,r6,-32002
100020b0:	39c551c4 	addi	r7,r7,5447
100020b4:	9809883a 	mov	r4,r19
100020b8:	880b883a 	mov	r5,r17
100020bc:	0003dfc0 	call	10003dfc <__adddf3>
100020c0:	b809883a 	mov	r4,r23
100020c4:	a00b883a 	mov	r5,r20
100020c8:	b00d883a 	mov	r6,r22
100020cc:	a80f883a 	mov	r7,r21
100020d0:	1039883a 	mov	fp,r2
100020d4:	1821883a 	mov	r16,r3
100020d8:	0005ac80 	call	10005ac8 <__subdf3>
100020dc:	e009883a 	mov	r4,fp
100020e0:	800b883a 	mov	r5,r16
100020e4:	100d883a 	mov	r6,r2
100020e8:	180f883a 	mov	r7,r3
100020ec:	000509c0 	call	1000509c <__gedf2>
100020f0:	00818216 	blt	zero,r2,100026fc <__ieee754_pow+0x1014>
100020f4:	a021883a 	mov	r16,r20
100020f8:	8011d53a 	srai	r8,r16,20
100020fc:	00800434 	movhi	r2,16
10002100:	a02ed7fa 	srli	r23,r20,31
10002104:	423f0084 	addi	r8,r8,-1022
10002108:	1211d83a 	sra	r8,r2,r8
1000210c:	00c00434 	movhi	r3,16
10002110:	18ffffc4 	addi	r3,r3,-1
10002114:	4529883a 	add	r20,r8,r20
10002118:	a00a907a 	slli	r5,r20,1
1000211c:	a0c4703a 	and	r2,r20,r3
10002120:	10800434 	orhi	r2,r2,16
10002124:	280ad57a 	srli	r5,r5,21
10002128:	05cdc83a 	sub	r6,zero,r23
1000212c:	b009883a 	mov	r4,r22
10002130:	29ff0044 	addi	r7,r5,-1023
10002134:	19c7d83a 	sra	r3,r3,r7
10002138:	01c104c4 	movi	r7,1043
1000213c:	394bc83a 	sub	r5,r7,r5
10002140:	1145d83a 	sra	r2,r2,r5
10002144:	00ce303a 	nor	r7,zero,r3
10002148:	3d0e703a 	and	r7,r7,r20
1000214c:	1184f03a 	xor	r2,r2,r6
10002150:	a80b883a 	mov	r5,r21
10002154:	000d883a 	mov	r6,zero
10002158:	15ef883a 	add	r23,r2,r23
1000215c:	ddc00115 	stw	r23,4(sp)
10002160:	0005ac80 	call	10005ac8 <__subdf3>
10002164:	9809883a 	mov	r4,r19
10002168:	880b883a 	mov	r5,r17
1000216c:	100d883a 	mov	r6,r2
10002170:	180f883a 	mov	r7,r3
10002174:	d8c00815 	stw	r3,32(sp)
10002178:	d8800315 	stw	r2,12(sp)
1000217c:	0003dfc0 	call	10003dfc <__adddf3>
10002180:	d8800117 	ldw	r2,4(sp)
10002184:	da000817 	ldw	r8,32(sp)
10002188:	da400317 	ldw	r9,12(sp)
1000218c:	1004953a 	slli	r2,r2,20
10002190:	1829883a 	mov	r20,r3
10002194:	d8800015 	stw	r2,0(sp)
10002198:	01cff9b4 	movhi	r7,16358
1000219c:	a00b883a 	mov	r5,r20
100021a0:	39cb90c4 	addi	r7,r7,11843
100021a4:	0009883a 	mov	r4,zero
100021a8:	000d883a 	mov	r6,zero
100021ac:	da000815 	stw	r8,32(sp)
100021b0:	da400315 	stw	r9,12(sp)
100021b4:	000525c0 	call	1000525c <__muldf3>
100021b8:	da400317 	ldw	r9,12(sp)
100021bc:	da000817 	ldw	r8,32(sp)
100021c0:	a00b883a 	mov	r5,r20
100021c4:	480d883a 	mov	r6,r9
100021c8:	400f883a 	mov	r7,r8
100021cc:	0009883a 	mov	r4,zero
100021d0:	1039883a 	mov	fp,r2
100021d4:	182d883a 	mov	r22,r3
100021d8:	0005ac80 	call	10005ac8 <__subdf3>
100021dc:	9809883a 	mov	r4,r19
100021e0:	880b883a 	mov	r5,r17
100021e4:	100d883a 	mov	r6,r2
100021e8:	180f883a 	mov	r7,r3
100021ec:	0005ac80 	call	10005ac8 <__subdf3>
100021f0:	01bfbeb4 	movhi	r6,65274
100021f4:	01cff9b4 	movhi	r7,16358
100021f8:	1009883a 	mov	r4,r2
100021fc:	180b883a 	mov	r5,r3
10002200:	318e7bc4 	addi	r6,r6,14831
10002204:	39cb9084 	addi	r7,r7,11842
10002208:	000525c0 	call	1000525c <__muldf3>
1000220c:	01832a34 	movhi	r6,3240
10002210:	01ef8834 	movhi	r7,48672
10002214:	a00b883a 	mov	r5,r20
10002218:	319b0e44 	addi	r6,r6,27705
1000221c:	39d71844 	addi	r7,r7,23649
10002220:	0009883a 	mov	r4,zero
10002224:	1023883a 	mov	r17,r2
10002228:	1821883a 	mov	r16,r3
1000222c:	000525c0 	call	1000525c <__muldf3>
10002230:	8809883a 	mov	r4,r17
10002234:	800b883a 	mov	r5,r16
10002238:	100d883a 	mov	r6,r2
1000223c:	180f883a 	mov	r7,r3
10002240:	0003dfc0 	call	10003dfc <__adddf3>
10002244:	e009883a 	mov	r4,fp
10002248:	b00b883a 	mov	r5,r22
1000224c:	100d883a 	mov	r6,r2
10002250:	180f883a 	mov	r7,r3
10002254:	1029883a 	mov	r20,r2
10002258:	1827883a 	mov	r19,r3
1000225c:	0003dfc0 	call	10003dfc <__adddf3>
10002260:	e00d883a 	mov	r6,fp
10002264:	b00f883a 	mov	r7,r22
10002268:	1009883a 	mov	r4,r2
1000226c:	180b883a 	mov	r5,r3
10002270:	1023883a 	mov	r17,r2
10002274:	1821883a 	mov	r16,r3
10002278:	0005ac80 	call	10005ac8 <__subdf3>
1000227c:	a009883a 	mov	r4,r20
10002280:	980b883a 	mov	r5,r19
10002284:	100d883a 	mov	r6,r2
10002288:	180f883a 	mov	r7,r3
1000228c:	0005ac80 	call	10005ac8 <__subdf3>
10002290:	8809883a 	mov	r4,r17
10002294:	800b883a 	mov	r5,r16
10002298:	880d883a 	mov	r6,r17
1000229c:	800f883a 	mov	r7,r16
100022a0:	1039883a 	mov	fp,r2
100022a4:	182d883a 	mov	r22,r3
100022a8:	000525c0 	call	1000525c <__muldf3>
100022ac:	019caff4 	movhi	r6,29375
100022b0:	01cf99b4 	movhi	r7,15974
100022b4:	1009883a 	mov	r4,r2
100022b8:	180b883a 	mov	r5,r3
100022bc:	31a93404 	addi	r6,r6,-23344
100022c0:	39cdda44 	addi	r7,r7,14185
100022c4:	1029883a 	mov	r20,r2
100022c8:	1827883a 	mov	r19,r3
100022cc:	000525c0 	call	1000525c <__muldf3>
100022d0:	01b174b4 	movhi	r6,50642
100022d4:	01cfaf34 	movhi	r7,16060
100022d8:	1009883a 	mov	r4,r2
100022dc:	180b883a 	mov	r5,r3
100022e0:	319afc44 	addi	r6,r6,27633
100022e4:	39ef5044 	addi	r7,r7,-17087
100022e8:	0005ac80 	call	10005ac8 <__subdf3>
100022ec:	a00d883a 	mov	r6,r20
100022f0:	980f883a 	mov	r7,r19
100022f4:	1009883a 	mov	r4,r2
100022f8:	180b883a 	mov	r5,r3
100022fc:	000525c0 	call	1000525c <__muldf3>
10002300:	01abc9b4 	movhi	r6,44838
10002304:	01cfc474 	movhi	r7,16145
10002308:	1009883a 	mov	r4,r2
1000230c:	180b883a 	mov	r5,r3
10002310:	31b78b04 	addi	r6,r6,-8660
10002314:	39d59a84 	addi	r7,r7,22122
10002318:	0003dfc0 	call	10003dfc <__adddf3>
1000231c:	a00d883a 	mov	r6,r20
10002320:	980f883a 	mov	r7,r19
10002324:	1009883a 	mov	r4,r2
10002328:	180b883a 	mov	r5,r3
1000232c:	000525c0 	call	1000525c <__muldf3>
10002330:	0185aff4 	movhi	r6,5823
10002334:	01cfd9f4 	movhi	r7,16231
10002338:	1009883a 	mov	r4,r2
1000233c:	180b883a 	mov	r5,r3
10002340:	31af64c4 	addi	r6,r6,-17005
10002344:	39f05b04 	addi	r7,r7,-16020
10002348:	0005ac80 	call	10005ac8 <__subdf3>
1000234c:	a00d883a 	mov	r6,r20
10002350:	980f883a 	mov	r7,r19
10002354:	1009883a 	mov	r4,r2
10002358:	180b883a 	mov	r5,r3
1000235c:	000525c0 	call	1000525c <__muldf3>
10002360:	01955574 	movhi	r6,21845
10002364:	01cff174 	movhi	r7,16325
10002368:	1009883a 	mov	r4,r2
1000236c:	180b883a 	mov	r5,r3
10002370:	31954f84 	addi	r6,r6,21822
10002374:	39d55544 	addi	r7,r7,21845
10002378:	0003dfc0 	call	10003dfc <__adddf3>
1000237c:	a00d883a 	mov	r6,r20
10002380:	980f883a 	mov	r7,r19
10002384:	1009883a 	mov	r4,r2
10002388:	180b883a 	mov	r5,r3
1000238c:	000525c0 	call	1000525c <__muldf3>
10002390:	8809883a 	mov	r4,r17
10002394:	800b883a 	mov	r5,r16
10002398:	100d883a 	mov	r6,r2
1000239c:	180f883a 	mov	r7,r3
100023a0:	0005ac80 	call	10005ac8 <__subdf3>
100023a4:	8809883a 	mov	r4,r17
100023a8:	800b883a 	mov	r5,r16
100023ac:	100d883a 	mov	r6,r2
100023b0:	180f883a 	mov	r7,r3
100023b4:	1029883a 	mov	r20,r2
100023b8:	1827883a 	mov	r19,r3
100023bc:	000525c0 	call	1000525c <__muldf3>
100023c0:	a009883a 	mov	r4,r20
100023c4:	980b883a 	mov	r5,r19
100023c8:	000d883a 	mov	r6,zero
100023cc:	01d00034 	movhi	r7,16384
100023d0:	102b883a 	mov	r21,r2
100023d4:	182f883a 	mov	r23,r3
100023d8:	0005ac80 	call	10005ac8 <__subdf3>
100023dc:	a809883a 	mov	r4,r21
100023e0:	b80b883a 	mov	r5,r23
100023e4:	100d883a 	mov	r6,r2
100023e8:	180f883a 	mov	r7,r3
100023ec:	00046980 	call	10004698 <__divdf3>
100023f0:	8809883a 	mov	r4,r17
100023f4:	800b883a 	mov	r5,r16
100023f8:	e00d883a 	mov	r6,fp
100023fc:	b00f883a 	mov	r7,r22
10002400:	1029883a 	mov	r20,r2
10002404:	1827883a 	mov	r19,r3
10002408:	000525c0 	call	1000525c <__muldf3>
1000240c:	1009883a 	mov	r4,r2
10002410:	180b883a 	mov	r5,r3
10002414:	e00d883a 	mov	r6,fp
10002418:	b00f883a 	mov	r7,r22
1000241c:	0003dfc0 	call	10003dfc <__adddf3>
10002420:	a009883a 	mov	r4,r20
10002424:	980b883a 	mov	r5,r19
10002428:	100d883a 	mov	r6,r2
1000242c:	180f883a 	mov	r7,r3
10002430:	0005ac80 	call	10005ac8 <__subdf3>
10002434:	1009883a 	mov	r4,r2
10002438:	180b883a 	mov	r5,r3
1000243c:	880d883a 	mov	r6,r17
10002440:	800f883a 	mov	r7,r16
10002444:	0005ac80 	call	10005ac8 <__subdf3>
10002448:	0009883a 	mov	r4,zero
1000244c:	180f883a 	mov	r7,r3
10002450:	014ffc34 	movhi	r5,16368
10002454:	100d883a 	mov	r6,r2
10002458:	0005ac80 	call	10005ac8 <__subdf3>
1000245c:	d9000017 	ldw	r4,0(sp)
10002460:	190f883a 	add	r7,r3,r4
10002464:	3809d53a 	srai	r4,r7,20
10002468:	0100c70e 	bge	zero,r4,10002788 <__ieee754_pow+0x10a0>
1000246c:	100d883a 	mov	r6,r2
10002470:	0009883a 	mov	r4,zero
10002474:	900b883a 	mov	r5,r18
10002478:	000525c0 	call	1000525c <__muldf3>
1000247c:	003cd606 	br	100017d8 <__alt_data_end+0xf80017d8>
10002480:	00b00434 	movhi	r2,49168
10002484:	9085883a 	add	r2,r18,r2
10002488:	e084b03a 	or	r2,fp,r2
1000248c:	1000aa1e 	bne	r2,zero,10002738 <__ieee754_pow+0x1050>
10002490:	b009883a 	mov	r4,r22
10002494:	180b883a 	mov	r5,r3
10002498:	003d4006 	br	1000199c <__alt_data_end+0xf800199c>
1000249c:	8009883a 	mov	r4,r16
100024a0:	980b883a 	mov	r5,r19
100024a4:	800d883a 	mov	r6,r16
100024a8:	980f883a 	mov	r7,r19
100024ac:	000525c0 	call	1000525c <__muldf3>
100024b0:	003cc906 	br	100017d8 <__alt_data_end+0xf80017d8>
100024b4:	04200034 	movhi	r16,32768
100024b8:	843fffc4 	addi	r16,r16,-1
100024bc:	00902474 	movhi	r2,16529
100024c0:	1c20703a 	and	r16,r3,r16
100024c4:	10b2ffc4 	addi	r2,r2,-13313
100024c8:	1400a70e 	bge	r2,r16,10002768 <__ieee754_pow+0x1080>
100024cc:	008fdbf4 	movhi	r2,16239
100024d0:	108d0004 	addi	r2,r2,13312
100024d4:	1885883a 	add	r2,r3,r2
100024d8:	15c4b03a 	or	r2,r2,r23
100024dc:	10000b1e 	bne	r2,zero,1000250c <__ieee754_pow+0xe24>
100024e0:	b809883a 	mov	r4,r23
100024e4:	180b883a 	mov	r5,r3
100024e8:	b00d883a 	mov	r6,r22
100024ec:	a80f883a 	mov	r7,r21
100024f0:	0005ac80 	call	10005ac8 <__subdf3>
100024f4:	9809883a 	mov	r4,r19
100024f8:	880b883a 	mov	r5,r17
100024fc:	100d883a 	mov	r6,r2
10002500:	180f883a 	mov	r7,r3
10002504:	000517c0 	call	1000517c <__ledf2>
10002508:	00befb16 	blt	zero,r2,100020f8 <__alt_data_end+0xf80020f8>
1000250c:	01b0be74 	movhi	r6,49913
10002510:	01c06974 	movhi	r7,421
10002514:	900b883a 	mov	r5,r18
10002518:	31bcd644 	addi	r6,r6,-3239
1000251c:	39db87c4 	addi	r7,r7,28191
10002520:	0009883a 	mov	r4,zero
10002524:	000525c0 	call	1000525c <__muldf3>
10002528:	01b0be74 	movhi	r6,49913
1000252c:	01c06974 	movhi	r7,421
10002530:	1009883a 	mov	r4,r2
10002534:	180b883a 	mov	r5,r3
10002538:	31bcd644 	addi	r6,r6,-3239
1000253c:	39db87c4 	addi	r7,r7,28191
10002540:	000525c0 	call	1000525c <__muldf3>
10002544:	003ca406 	br	100017d8 <__alt_data_end+0xf80017d8>
10002548:	048ffc34 	movhi	r18,16368
1000254c:	003ea606 	br	10001fe8 <__alt_data_end+0xf8001fe8>
10002550:	b83cce0e 	bge	r23,zero,1000188c <__alt_data_end+0xf800188c>
10002554:	0005883a 	mov	r2,zero
10002558:	b8e0003c 	xorhi	r3,r23,32768
1000255c:	003c9e06 	br	100017d8 <__alt_data_end+0xf80017d8>
10002560:	0021883a 	mov	r16,zero
10002564:	0019883a 	mov	r12,zero
10002568:	003d3406 	br	10001a3c <__alt_data_end+0xf8001a3c>
1000256c:	0009883a 	mov	r4,zero
10002570:	003d2006 	br	100019f4 <__alt_data_end+0xf80019f4>
10002574:	008ffc34 	movhi	r2,16368
10002578:	10bfff84 	addi	r2,r2,-2
1000257c:	14bcc20e 	bge	r2,r18,10001888 <__alt_data_end+0xf8001888>
10002580:	01cffc34 	movhi	r7,16368
10002584:	3cbcd916 	blt	r7,r18,100018ec <__alt_data_end+0xf80018ec>
10002588:	b009883a 	mov	r4,r22
1000258c:	000d883a 	mov	r6,zero
10002590:	180b883a 	mov	r5,r3
10002594:	dac00915 	stw	r11,36(sp)
10002598:	0005ac80 	call	10005ac8 <__subdf3>
1000259c:	01cffdf4 	movhi	r7,16375
100025a0:	1009883a 	mov	r4,r2
100025a4:	180b883a 	mov	r5,r3
100025a8:	39c551c4 	addi	r7,r7,5447
100025ac:	01980034 	movhi	r6,24576
100025b0:	1023883a 	mov	r17,r2
100025b4:	1821883a 	mov	r16,r3
100025b8:	000525c0 	call	1000525c <__muldf3>
100025bc:	01be17b4 	movhi	r6,63582
100025c0:	01cf9574 	movhi	r7,15957
100025c4:	8809883a 	mov	r4,r17
100025c8:	800b883a 	mov	r5,r16
100025cc:	31b7d104 	addi	r6,r6,-8380
100025d0:	39eb82c4 	addi	r7,r7,-20981
100025d4:	1027883a 	mov	r19,r2
100025d8:	1825883a 	mov	r18,r3
100025dc:	000525c0 	call	1000525c <__muldf3>
100025e0:	8809883a 	mov	r4,r17
100025e4:	800b883a 	mov	r5,r16
100025e8:	880d883a 	mov	r6,r17
100025ec:	800f883a 	mov	r7,r16
100025f0:	1829883a 	mov	r20,r3
100025f4:	d8800815 	stw	r2,32(sp)
100025f8:	000525c0 	call	1000525c <__muldf3>
100025fc:	8809883a 	mov	r4,r17
10002600:	800b883a 	mov	r5,r16
10002604:	000d883a 	mov	r6,zero
10002608:	01cff434 	movhi	r7,16336
1000260c:	182d883a 	mov	r22,r3
10002610:	d8800315 	stw	r2,12(sp)
10002614:	000525c0 	call	1000525c <__muldf3>
10002618:	01155574 	movhi	r4,21845
1000261c:	014ff574 	movhi	r5,16341
10002620:	21155544 	addi	r4,r4,21845
10002624:	29555544 	addi	r5,r5,21845
10002628:	100d883a 	mov	r6,r2
1000262c:	180f883a 	mov	r7,r3
10002630:	0005ac80 	call	10005ac8 <__subdf3>
10002634:	880d883a 	mov	r6,r17
10002638:	800f883a 	mov	r7,r16
1000263c:	1009883a 	mov	r4,r2
10002640:	180b883a 	mov	r5,r3
10002644:	000525c0 	call	1000525c <__muldf3>
10002648:	0009883a 	mov	r4,zero
1000264c:	014ff834 	movhi	r5,16352
10002650:	100d883a 	mov	r6,r2
10002654:	180f883a 	mov	r7,r3
10002658:	0005ac80 	call	10005ac8 <__subdf3>
1000265c:	da400317 	ldw	r9,12(sp)
10002660:	b00b883a 	mov	r5,r22
10002664:	100d883a 	mov	r6,r2
10002668:	4809883a 	mov	r4,r9
1000266c:	180f883a 	mov	r7,r3
10002670:	000525c0 	call	1000525c <__muldf3>
10002674:	01994b34 	movhi	r6,25900
10002678:	01cffdf4 	movhi	r7,16375
1000267c:	1009883a 	mov	r4,r2
10002680:	180b883a 	mov	r5,r3
10002684:	31a0bf84 	addi	r6,r6,-32002
10002688:	39c551c4 	addi	r7,r7,5447
1000268c:	000525c0 	call	1000525c <__muldf3>
10002690:	da000817 	ldw	r8,32(sp)
10002694:	a00b883a 	mov	r5,r20
10002698:	100d883a 	mov	r6,r2
1000269c:	4009883a 	mov	r4,r8
100026a0:	180f883a 	mov	r7,r3
100026a4:	0005ac80 	call	10005ac8 <__subdf3>
100026a8:	9809883a 	mov	r4,r19
100026ac:	900b883a 	mov	r5,r18
100026b0:	100d883a 	mov	r6,r2
100026b4:	180f883a 	mov	r7,r3
100026b8:	1029883a 	mov	r20,r2
100026bc:	1823883a 	mov	r17,r3
100026c0:	0003dfc0 	call	10003dfc <__adddf3>
100026c4:	0009883a 	mov	r4,zero
100026c8:	180b883a 	mov	r5,r3
100026cc:	980d883a 	mov	r6,r19
100026d0:	900f883a 	mov	r7,r18
100026d4:	1821883a 	mov	r16,r3
100026d8:	0005ac80 	call	10005ac8 <__subdf3>
100026dc:	a009883a 	mov	r4,r20
100026e0:	003e3606 	br	10001fbc <__alt_data_end+0xf8001fbc>
100026e4:	0009883a 	mov	r4,zero
100026e8:	880b883a 	mov	r5,r17
100026ec:	800d883a 	mov	r6,r16
100026f0:	980f883a 	mov	r7,r19
100026f4:	00046980 	call	10004698 <__divdf3>
100026f8:	003c3706 	br	100017d8 <__alt_data_end+0xf80017d8>
100026fc:	01a20034 	movhi	r6,34816
10002700:	01df8e34 	movhi	r7,32312
10002704:	900b883a 	mov	r5,r18
10002708:	319d6704 	addi	r6,r6,30108
1000270c:	39f90f04 	addi	r7,r7,-7108
10002710:	0009883a 	mov	r4,zero
10002714:	000525c0 	call	1000525c <__muldf3>
10002718:	01a20034 	movhi	r6,34816
1000271c:	01df8e34 	movhi	r7,32312
10002720:	1009883a 	mov	r4,r2
10002724:	180b883a 	mov	r5,r3
10002728:	319d6704 	addi	r6,r6,30108
1000272c:	39f90f04 	addi	r7,r7,-7108
10002730:	000525c0 	call	1000525c <__muldf3>
10002734:	003c2806 	br	100017d8 <__alt_data_end+0xf80017d8>
10002738:	00800044 	movi	r2,1
1000273c:	e0bc5e1e 	bne	fp,r2,100018b8 <__alt_data_end+0xf80018b8>
10002740:	18e0003c 	xorhi	r3,r3,32768
10002744:	b005883a 	mov	r2,r22
10002748:	003c2306 	br	100017d8 <__alt_data_end+0xf80017d8>
1000274c:	303c3d1e 	bne	r6,zero,10001844 <__alt_data_end+0xf8001844>
10002750:	1907c83a 	sub	r3,r3,r4
10002754:	88c5d83a 	sra	r2,r17,r3
10002758:	10c6983a 	sll	r3,r2,r3
1000275c:	1c401126 	beq	r3,r17,100027a4 <__ieee754_pow+0x10bc>
10002760:	0039883a 	mov	fp,zero
10002764:	003c0006 	br	10001768 <__alt_data_end+0xf8001768>
10002768:	008ff834 	movhi	r2,16352
1000276c:	143e6216 	blt	r2,r16,100020f8 <__alt_data_end+0xf80020f8>
10002770:	d8000015 	stw	zero,0(sp)
10002774:	d8000115 	stw	zero,4(sp)
10002778:	003e8706 	br	10002198 <__alt_data_end+0xf8002198>
1000277c:	04000134 	movhi	r16,4
10002780:	03000044 	movi	r12,1
10002784:	003cad06 	br	10001a3c <__alt_data_end+0xf8001a3c>
10002788:	d9800117 	ldw	r6,4(sp)
1000278c:	1009883a 	mov	r4,r2
10002790:	180b883a 	mov	r5,r3
10002794:	0002ce40 	call	10002ce4 <scalbn>
10002798:	100d883a 	mov	r6,r2
1000279c:	180f883a 	mov	r7,r3
100027a0:	003f3306 	br	10002470 <__alt_data_end+0xf8002470>
100027a4:	1080004c 	andi	r2,r2,1
100027a8:	02800084 	movi	r10,2
100027ac:	50b9c83a 	sub	fp,r10,r2
100027b0:	003bed06 	br	10001768 <__alt_data_end+0xf8001768>

100027b4 <__ieee754_sqrt>:
100027b4:	defffd04 	addi	sp,sp,-12
100027b8:	dc400115 	stw	r17,4(sp)
100027bc:	dc000015 	stw	r16,0(sp)
100027c0:	dfc00215 	stw	ra,8(sp)
100027c4:	28dffc2c 	andhi	r3,r5,32752
100027c8:	009ffc34 	movhi	r2,32752
100027cc:	2821883a 	mov	r16,r5
100027d0:	2023883a 	mov	r17,r4
100027d4:	18807c26 	beq	r3,r2,100029c8 <__ieee754_sqrt+0x214>
100027d8:	2011883a 	mov	r8,r4
100027dc:	01405f0e 	bge	zero,r5,1000295c <__ieee754_sqrt+0x1a8>
100027e0:	2815d53a 	srai	r10,r5,20
100027e4:	50006a26 	beq	r10,zero,10002990 <__ieee754_sqrt+0x1dc>
100027e8:	00800434 	movhi	r2,16
100027ec:	52bf0044 	addi	r10,r10,-1023
100027f0:	10bfffc4 	addi	r2,r2,-1
100027f4:	8084703a 	and	r2,r16,r2
100027f8:	50c0004c 	andi	r3,r10,1
100027fc:	10800434 	orhi	r2,r2,16
10002800:	18004f1e 	bne	r3,zero,10002940 <__ieee754_sqrt+0x18c>
10002804:	4006d7fa 	srli	r3,r8,31
10002808:	5015d07a 	srai	r10,r10,1
1000280c:	1085883a 	add	r2,r2,r2
10002810:	10c5883a 	add	r2,r2,r3
10002814:	01800584 	movi	r6,22
10002818:	4207883a 	add	r3,r8,r8
1000281c:	0013883a 	mov	r9,zero
10002820:	000b883a 	mov	r5,zero
10002824:	01000834 	movhi	r4,32
10002828:	290f883a 	add	r7,r5,r4
1000282c:	1810d7fa 	srli	r8,r3,31
10002830:	31bfffc4 	addi	r6,r6,-1
10002834:	11c00316 	blt	r2,r7,10002844 <__ieee754_sqrt+0x90>
10002838:	11c5c83a 	sub	r2,r2,r7
1000283c:	390b883a 	add	r5,r7,r4
10002840:	4913883a 	add	r9,r9,r4
10002844:	1085883a 	add	r2,r2,r2
10002848:	1205883a 	add	r2,r2,r8
1000284c:	18c7883a 	add	r3,r3,r3
10002850:	2008d07a 	srli	r4,r4,1
10002854:	303ff41e 	bne	r6,zero,10002828 <__alt_data_end+0xf8002828>
10002858:	01200034 	movhi	r4,32768
1000285c:	01c00804 	movi	r7,32
10002860:	0011883a 	mov	r8,zero
10002864:	0017883a 	mov	r11,zero
10002868:	201b883a 	mov	r13,r4
1000286c:	00000806 	br	10002890 <__ieee754_sqrt+0xdc>
10002870:	11401726 	beq	r2,r5,100028d0 <__ieee754_sqrt+0x11c>
10002874:	180cd7fa 	srli	r6,r3,31
10002878:	1085883a 	add	r2,r2,r2
1000287c:	39ffffc4 	addi	r7,r7,-1
10002880:	1185883a 	add	r2,r2,r6
10002884:	18c7883a 	add	r3,r3,r3
10002888:	2008d07a 	srli	r4,r4,1
1000288c:	38001726 	beq	r7,zero,100028ec <__ieee754_sqrt+0x138>
10002890:	590d883a 	add	r6,r11,r4
10002894:	28bff60e 	bge	r5,r2,10002870 <__alt_data_end+0xf8002870>
10002898:	3320002c 	andhi	r12,r6,32768
1000289c:	3117883a 	add	r11,r6,r4
100028a0:	63400826 	beq	r12,r13,100028c4 <__ieee754_sqrt+0x110>
100028a4:	2819883a 	mov	r12,r5
100028a8:	1145c83a 	sub	r2,r2,r5
100028ac:	1980012e 	bgeu	r3,r6,100028b4 <__ieee754_sqrt+0x100>
100028b0:	10bfffc4 	addi	r2,r2,-1
100028b4:	1987c83a 	sub	r3,r3,r6
100028b8:	4111883a 	add	r8,r8,r4
100028bc:	600b883a 	mov	r5,r12
100028c0:	003fec06 	br	10002874 <__alt_data_end+0xf8002874>
100028c4:	583ff716 	blt	r11,zero,100028a4 <__alt_data_end+0xf80028a4>
100028c8:	2b000044 	addi	r12,r5,1
100028cc:	003ff606 	br	100028a8 <__alt_data_end+0xf80028a8>
100028d0:	19801936 	bltu	r3,r6,10002938 <__ieee754_sqrt+0x184>
100028d4:	3320002c 	andhi	r12,r6,32768
100028d8:	3117883a 	add	r11,r6,r4
100028dc:	63404626 	beq	r12,r13,100029f8 <__ieee754_sqrt+0x244>
100028e0:	1019883a 	mov	r12,r2
100028e4:	0005883a 	mov	r2,zero
100028e8:	003ff206 	br	100028b4 <__alt_data_end+0xf80028b4>
100028ec:	10c4b03a 	or	r2,r2,r3
100028f0:	10000426 	beq	r2,zero,10002904 <__ieee754_sqrt+0x150>
100028f4:	00bfffc4 	movi	r2,-1
100028f8:	40804326 	beq	r8,r2,10002a08 <__ieee754_sqrt+0x254>
100028fc:	4080004c 	andi	r2,r8,1
10002900:	1211883a 	add	r8,r2,r8
10002904:	4004d07a 	srli	r2,r8,1
10002908:	4807d07a 	srai	r3,r9,1
1000290c:	010ff834 	movhi	r4,16352
10002910:	4a40004c 	andi	r9,r9,1
10002914:	1909883a 	add	r4,r3,r4
10002918:	48000e1e 	bne	r9,zero,10002954 <__ieee754_sqrt+0x1a0>
1000291c:	5006953a 	slli	r3,r10,20
10002920:	1907883a 	add	r3,r3,r4
10002924:	dfc00217 	ldw	ra,8(sp)
10002928:	dc400117 	ldw	r17,4(sp)
1000292c:	dc000017 	ldw	r16,0(sp)
10002930:	dec00304 	addi	sp,sp,12
10002934:	f800283a 	ret
10002938:	100b883a 	mov	r5,r2
1000293c:	003fcd06 	br	10002874 <__alt_data_end+0xf8002874>
10002940:	4006d7fa 	srli	r3,r8,31
10002944:	1085883a 	add	r2,r2,r2
10002948:	4211883a 	add	r8,r8,r8
1000294c:	10c5883a 	add	r2,r2,r3
10002950:	003fac06 	br	10002804 <__alt_data_end+0xf8002804>
10002954:	10a00034 	orhi	r2,r2,32768
10002958:	003ff006 	br	1000291c <__alt_data_end+0xf800291c>
1000295c:	00a00034 	movhi	r2,32768
10002960:	10bfffc4 	addi	r2,r2,-1
10002964:	2884703a 	and	r2,r5,r2
10002968:	1104b03a 	or	r2,r2,r4
1000296c:	10001f26 	beq	r2,zero,100029ec <__ieee754_sqrt+0x238>
10002970:	28002c1e 	bne	r5,zero,10002a24 <__ieee754_sqrt+0x270>
10002974:	0015883a 	mov	r10,zero
10002978:	4020d2fa 	srli	r16,r8,11
1000297c:	52bffac4 	addi	r10,r10,-21
10002980:	4010957a 	slli	r8,r8,21
10002984:	803ffc26 	beq	r16,zero,10002978 <__alt_data_end+0xf8002978>
10002988:	8080042c 	andhi	r2,r16,16
1000298c:	1000211e 	bne	r2,zero,10002a14 <__ieee754_sqrt+0x260>
10002990:	0005883a 	mov	r2,zero
10002994:	8421883a 	add	r16,r16,r16
10002998:	80c0042c 	andhi	r3,r16,16
1000299c:	10800044 	addi	r2,r2,1
100029a0:	183ffc26 	beq	r3,zero,10002994 <__alt_data_end+0xf8002994>
100029a4:	01000044 	movi	r4,1
100029a8:	00c00804 	movi	r3,32
100029ac:	2089c83a 	sub	r4,r4,r2
100029b0:	1887c83a 	sub	r3,r3,r2
100029b4:	40c6d83a 	srl	r3,r8,r3
100029b8:	5115883a 	add	r10,r10,r4
100029bc:	4090983a 	sll	r8,r8,r2
100029c0:	80e0b03a 	or	r16,r16,r3
100029c4:	003f8806 	br	100027e8 <__alt_data_end+0xf80027e8>
100029c8:	200d883a 	mov	r6,r4
100029cc:	280f883a 	mov	r7,r5
100029d0:	000525c0 	call	1000525c <__muldf3>
100029d4:	1009883a 	mov	r4,r2
100029d8:	180b883a 	mov	r5,r3
100029dc:	880d883a 	mov	r6,r17
100029e0:	800f883a 	mov	r7,r16
100029e4:	0003dfc0 	call	10003dfc <__adddf3>
100029e8:	003fce06 	br	10002924 <__alt_data_end+0xf8002924>
100029ec:	2005883a 	mov	r2,r4
100029f0:	2807883a 	mov	r3,r5
100029f4:	003fcb06 	br	10002924 <__alt_data_end+0xf8002924>
100029f8:	583fb30e 	bge	r11,zero,100028c8 <__alt_data_end+0xf80028c8>
100029fc:	0005883a 	mov	r2,zero
10002a00:	2819883a 	mov	r12,r5
10002a04:	003fab06 	br	100028b4 <__alt_data_end+0xf80028b4>
10002a08:	4a400044 	addi	r9,r9,1
10002a0c:	0005883a 	mov	r2,zero
10002a10:	003fbd06 	br	10002908 <__alt_data_end+0xf8002908>
10002a14:	00c00804 	movi	r3,32
10002a18:	01000044 	movi	r4,1
10002a1c:	0005883a 	mov	r2,zero
10002a20:	003fe406 	br	100029b4 <__alt_data_end+0xf80029b4>
10002a24:	200d883a 	mov	r6,r4
10002a28:	280f883a 	mov	r7,r5
10002a2c:	0005ac80 	call	10005ac8 <__subdf3>
10002a30:	1009883a 	mov	r4,r2
10002a34:	180b883a 	mov	r5,r3
10002a38:	100d883a 	mov	r6,r2
10002a3c:	180f883a 	mov	r7,r3
10002a40:	00046980 	call	10004698 <__divdf3>
10002a44:	003fb706 	br	10002924 <__alt_data_end+0xf8002924>

10002a48 <fabs>:
10002a48:	00e00034 	movhi	r3,32768
10002a4c:	18ffffc4 	addi	r3,r3,-1
10002a50:	2005883a 	mov	r2,r4
10002a54:	28c6703a 	and	r3,r5,r3
10002a58:	f800283a 	ret

10002a5c <finite>:
10002a5c:	00a00034 	movhi	r2,32768
10002a60:	10bfffc4 	addi	r2,r2,-1
10002a64:	288a703a 	and	r5,r5,r2
10002a68:	00e00434 	movhi	r3,32784
10002a6c:	28c5883a 	add	r2,r5,r3
10002a70:	1004d7fa 	srli	r2,r2,31
10002a74:	f800283a 	ret

10002a78 <__fpclassifyd>:
10002a78:	00a00034 	movhi	r2,32768
10002a7c:	10bfffc4 	addi	r2,r2,-1
10002a80:	2884703a 	and	r2,r5,r2
10002a84:	10000726 	beq	r2,zero,10002aa4 <__fpclassifyd+0x2c>
10002a88:	00fffc34 	movhi	r3,65520
10002a8c:	019ff834 	movhi	r6,32736
10002a90:	28c7883a 	add	r3,r5,r3
10002a94:	31bfffc4 	addi	r6,r6,-1
10002a98:	30c00536 	bltu	r6,r3,10002ab0 <__fpclassifyd+0x38>
10002a9c:	00800104 	movi	r2,4
10002aa0:	f800283a 	ret
10002aa4:	2000021e 	bne	r4,zero,10002ab0 <__fpclassifyd+0x38>
10002aa8:	00800084 	movi	r2,2
10002aac:	f800283a 	ret
10002ab0:	00dffc34 	movhi	r3,32752
10002ab4:	019ff834 	movhi	r6,32736
10002ab8:	28cb883a 	add	r5,r5,r3
10002abc:	31bfffc4 	addi	r6,r6,-1
10002ac0:	317ff62e 	bgeu	r6,r5,10002a9c <__alt_data_end+0xf8002a9c>
10002ac4:	01400434 	movhi	r5,16
10002ac8:	297fffc4 	addi	r5,r5,-1
10002acc:	28800236 	bltu	r5,r2,10002ad8 <__fpclassifyd+0x60>
10002ad0:	008000c4 	movi	r2,3
10002ad4:	f800283a 	ret
10002ad8:	10c00226 	beq	r2,r3,10002ae4 <__fpclassifyd+0x6c>
10002adc:	0005883a 	mov	r2,zero
10002ae0:	f800283a 	ret
10002ae4:	2005003a 	cmpeq	r2,r4,zero
10002ae8:	f800283a 	ret

10002aec <matherr>:
10002aec:	0005883a 	mov	r2,zero
10002af0:	f800283a 	ret

10002af4 <nan>:
10002af4:	0005883a 	mov	r2,zero
10002af8:	00dffe34 	movhi	r3,32760
10002afc:	f800283a 	ret

10002b00 <rint>:
10002b00:	2813d53a 	srai	r9,r5,20
10002b04:	defff904 	addi	sp,sp,-28
10002b08:	dc400315 	stw	r17,12(sp)
10002b0c:	4a41ffcc 	andi	r9,r9,2047
10002b10:	dfc00615 	stw	ra,24(sp)
10002b14:	dcc00515 	stw	r19,20(sp)
10002b18:	dc800415 	stw	r18,16(sp)
10002b1c:	dc000215 	stw	r16,8(sp)
10002b20:	02c004c4 	movi	r11,19
10002b24:	4abf0044 	addi	r10,r9,-1023
10002b28:	2811883a 	mov	r8,r5
10002b2c:	2005883a 	mov	r2,r4
10002b30:	280f883a 	mov	r7,r5
10002b34:	200d883a 	mov	r6,r4
10002b38:	2822d7fa 	srli	r17,r5,31
10002b3c:	5a801316 	blt	r11,r10,10002b8c <rint+0x8c>
10002b40:	50003c16 	blt	r10,zero,10002c34 <rint+0x134>
10002b44:	00c00434 	movhi	r3,16
10002b48:	18ffffc4 	addi	r3,r3,-1
10002b4c:	1a87d83a 	sra	r3,r3,r10
10002b50:	1948703a 	and	r4,r3,r5
10002b54:	2088b03a 	or	r4,r4,r2
10002b58:	20001026 	beq	r4,zero,10002b9c <rint+0x9c>
10002b5c:	1804d07a 	srli	r2,r3,1
10002b60:	1146703a 	and	r3,r2,r5
10002b64:	198cb03a 	or	r6,r3,r6
10002b68:	30005526 	beq	r6,zero,10002cc0 <rint+0x1c0>
10002b6c:	52c05b26 	beq	r10,r11,10002cdc <rint+0x1dc>
10002b70:	000d883a 	mov	r6,zero
10002b74:	00c00134 	movhi	r3,4
10002b78:	1a87d83a 	sra	r3,r3,r10
10002b7c:	0084303a 	nor	r2,zero,r2
10002b80:	1210703a 	and	r8,r2,r8
10002b84:	40ceb03a 	or	r7,r8,r3
10002b88:	00001906 	br	10002bf0 <rint+0xf0>
10002b8c:	00c00cc4 	movi	r3,51
10002b90:	1a800a0e 	bge	r3,r10,10002bbc <rint+0xbc>
10002b94:	00c10004 	movi	r3,1024
10002b98:	50c04d26 	beq	r10,r3,10002cd0 <rint+0x1d0>
10002b9c:	3807883a 	mov	r3,r7
10002ba0:	dfc00617 	ldw	ra,24(sp)
10002ba4:	dcc00517 	ldw	r19,20(sp)
10002ba8:	dc800417 	ldw	r18,16(sp)
10002bac:	dc400317 	ldw	r17,12(sp)
10002bb0:	dc000217 	ldw	r16,8(sp)
10002bb4:	dec00704 	addi	sp,sp,28
10002bb8:	f800283a 	ret
10002bbc:	4a7efb44 	addi	r9,r9,-1043
10002bc0:	00ffffc4 	movi	r3,-1
10002bc4:	1a46d83a 	srl	r3,r3,r9
10002bc8:	1908703a 	and	r4,r3,r4
10002bcc:	20003e26 	beq	r4,zero,10002cc8 <rint+0x1c8>
10002bd0:	1806d07a 	srli	r3,r3,1
10002bd4:	1884703a 	and	r2,r3,r2
10002bd8:	10000526 	beq	r2,zero,10002bf0 <rint+0xf0>
10002bdc:	00900034 	movhi	r2,16384
10002be0:	1253d83a 	sra	r9,r2,r9
10002be4:	00c6303a 	nor	r3,zero,r3
10002be8:	198c703a 	and	r6,r3,r6
10002bec:	324cb03a 	or	r6,r6,r9
10002bf0:	882290fa 	slli	r17,r17,3
10002bf4:	00c40074 	movhi	r3,4097
10002bf8:	18c83d04 	addi	r3,r3,8436
10002bfc:	1c63883a 	add	r17,r3,r17
10002c00:	8c800017 	ldw	r18,0(r17)
10002c04:	8c000117 	ldw	r16,4(r17)
10002c08:	9009883a 	mov	r4,r18
10002c0c:	800b883a 	mov	r5,r16
10002c10:	0003dfc0 	call	10003dfc <__adddf3>
10002c14:	d8800015 	stw	r2,0(sp)
10002c18:	d8c00115 	stw	r3,4(sp)
10002c1c:	d9000017 	ldw	r4,0(sp)
10002c20:	d9400117 	ldw	r5,4(sp)
10002c24:	900d883a 	mov	r6,r18
10002c28:	800f883a 	mov	r7,r16
10002c2c:	0005ac80 	call	10005ac8 <__subdf3>
10002c30:	003fdb06 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10002c34:	04200034 	movhi	r16,32768
10002c38:	843fffc4 	addi	r16,r16,-1
10002c3c:	2c06703a 	and	r3,r5,r16
10002c40:	1906b03a 	or	r3,r3,r4
10002c44:	18002026 	beq	r3,zero,10002cc8 <rint+0x1c8>
10002c48:	00c00434 	movhi	r3,16
10002c4c:	18ffffc4 	addi	r3,r3,-1
10002c50:	28c6703a 	and	r3,r5,r3
10002c54:	1886b03a 	or	r3,r3,r2
10002c58:	880890fa 	slli	r4,r17,3
10002c5c:	00d3c83a 	sub	r9,zero,r3
10002c60:	48d2b03a 	or	r9,r9,r3
10002c64:	00c40074 	movhi	r3,4097
10002c68:	18c83d04 	addi	r3,r3,8436
10002c6c:	1907883a 	add	r3,r3,r4
10002c70:	4812d33a 	srli	r9,r9,12
10002c74:	1cc00017 	ldw	r19,0(r3)
10002c78:	1c800117 	ldw	r18,4(r3)
10002c7c:	4a40022c 	andhi	r9,r9,8
10002c80:	29ffffac 	andhi	r7,r5,65534
10002c84:	49ceb03a 	or	r7,r9,r7
10002c88:	9809883a 	mov	r4,r19
10002c8c:	900b883a 	mov	r5,r18
10002c90:	0003dfc0 	call	10003dfc <__adddf3>
10002c94:	d8800015 	stw	r2,0(sp)
10002c98:	d8c00115 	stw	r3,4(sp)
10002c9c:	d9000017 	ldw	r4,0(sp)
10002ca0:	d9400117 	ldw	r5,4(sp)
10002ca4:	980d883a 	mov	r6,r19
10002ca8:	900f883a 	mov	r7,r18
10002cac:	0005ac80 	call	10005ac8 <__subdf3>
10002cb0:	881097fa 	slli	r8,r17,31
10002cb4:	1c06703a 	and	r3,r3,r16
10002cb8:	40c6b03a 	or	r3,r8,r3
10002cbc:	003fb806 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10002cc0:	000d883a 	mov	r6,zero
10002cc4:	003fca06 	br	10002bf0 <__alt_data_end+0xf8002bf0>
10002cc8:	4007883a 	mov	r3,r8
10002ccc:	003fb406 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10002cd0:	200d883a 	mov	r6,r4
10002cd4:	0003dfc0 	call	10003dfc <__adddf3>
10002cd8:	003fb106 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10002cdc:	01a00034 	movhi	r6,32768
10002ce0:	003fa406 	br	10002b74 <__alt_data_end+0xf8002b74>

10002ce4 <scalbn>:
10002ce4:	2a1ffc2c 	andhi	r8,r5,32752
10002ce8:	4011d53a 	srai	r8,r8,20
10002cec:	defffe04 	addi	sp,sp,-8
10002cf0:	dc000015 	stw	r16,0(sp)
10002cf4:	dfc00115 	stw	ra,4(sp)
10002cf8:	280f883a 	mov	r7,r5
10002cfc:	2015883a 	mov	r10,r4
10002d00:	3021883a 	mov	r16,r6
10002d04:	4000251e 	bne	r8,zero,10002d9c <scalbn+0xb8>
10002d08:	00a00034 	movhi	r2,32768
10002d0c:	10bfffc4 	addi	r2,r2,-1
10002d10:	2884703a 	and	r2,r5,r2
10002d14:	1104b03a 	or	r2,r2,r4
10002d18:	10003126 	beq	r2,zero,10002de0 <scalbn+0xfc>
10002d1c:	01d0d434 	movhi	r7,17232
10002d20:	000d883a 	mov	r6,zero
10002d24:	000525c0 	call	1000525c <__muldf3>
10002d28:	013ffff4 	movhi	r4,65535
10002d2c:	210f2c04 	addi	r4,r4,15536
10002d30:	1015883a 	mov	r10,r2
10002d34:	180f883a 	mov	r7,r3
10002d38:	81002f16 	blt	r16,r4,10002df8 <scalbn+0x114>
10002d3c:	1a5ffc2c 	andhi	r9,r3,32752
10002d40:	4813d53a 	srai	r9,r9,20
10002d44:	0081ff84 	movi	r2,2046
10002d48:	180d883a 	mov	r6,r3
10002d4c:	4a3ff284 	addi	r8,r9,-54
10002d50:	4411883a 	add	r8,r8,r16
10002d54:	1200170e 	bge	r2,r8,10002db4 <scalbn+0xd0>
10002d58:	01220034 	movhi	r4,34816
10002d5c:	015f8e34 	movhi	r5,32312
10002d60:	500d883a 	mov	r6,r10
10002d64:	211d6704 	addi	r4,r4,30108
10002d68:	29790f04 	addi	r5,r5,-7108
10002d6c:	0002eb00 	call	10002eb0 <copysign>
10002d70:	01a20034 	movhi	r6,34816
10002d74:	01df8e34 	movhi	r7,32312
10002d78:	1009883a 	mov	r4,r2
10002d7c:	180b883a 	mov	r5,r3
10002d80:	319d6704 	addi	r6,r6,30108
10002d84:	39f90f04 	addi	r7,r7,-7108
10002d88:	000525c0 	call	1000525c <__muldf3>
10002d8c:	dfc00117 	ldw	ra,4(sp)
10002d90:	dc000017 	ldw	r16,0(sp)
10002d94:	dec00204 	addi	sp,sp,8
10002d98:	f800283a 	ret
10002d9c:	0081ffc4 	movi	r2,2047
10002da0:	280d883a 	mov	r6,r5
10002da4:	40803126 	beq	r8,r2,10002e6c <scalbn+0x188>
10002da8:	4411883a 	add	r8,r8,r16
10002dac:	0081ff84 	movi	r2,2046
10002db0:	123fe916 	blt	r2,r8,10002d58 <__alt_data_end+0xf8002d58>
10002db4:	02001b0e 	bge	zero,r8,10002e24 <scalbn+0x140>
10002db8:	4010953a 	slli	r8,r8,20
10002dbc:	00e00434 	movhi	r3,32784
10002dc0:	18ffffc4 	addi	r3,r3,-1
10002dc4:	30ce703a 	and	r7,r6,r3
10002dc8:	5005883a 	mov	r2,r10
10002dcc:	41c6b03a 	or	r3,r8,r7
10002dd0:	dfc00117 	ldw	ra,4(sp)
10002dd4:	dc000017 	ldw	r16,0(sp)
10002dd8:	dec00204 	addi	sp,sp,8
10002ddc:	f800283a 	ret
10002de0:	2005883a 	mov	r2,r4
10002de4:	2807883a 	mov	r3,r5
10002de8:	dfc00117 	ldw	ra,4(sp)
10002dec:	dc000017 	ldw	r16,0(sp)
10002df0:	dec00204 	addi	sp,sp,8
10002df4:	f800283a 	ret
10002df8:	01b0be74 	movhi	r6,49913
10002dfc:	01c06974 	movhi	r7,421
10002e00:	31bcd644 	addi	r6,r6,-3239
10002e04:	39db87c4 	addi	r7,r7,28191
10002e08:	1009883a 	mov	r4,r2
10002e0c:	180b883a 	mov	r5,r3
10002e10:	000525c0 	call	1000525c <__muldf3>
10002e14:	dfc00117 	ldw	ra,4(sp)
10002e18:	dc000017 	ldw	r16,0(sp)
10002e1c:	dec00204 	addi	sp,sp,8
10002e20:	f800283a 	ret
10002e24:	00bff2c4 	movi	r2,-53
10002e28:	4080160e 	bge	r8,r2,10002e84 <scalbn+0x1a0>
10002e2c:	00b0d414 	movui	r2,50000
10002e30:	143fc916 	blt	r2,r16,10002d58 <__alt_data_end+0xf8002d58>
10002e34:	0130be74 	movhi	r4,49913
10002e38:	01406974 	movhi	r5,421
10002e3c:	500d883a 	mov	r6,r10
10002e40:	213cd644 	addi	r4,r4,-3239
10002e44:	295b87c4 	addi	r5,r5,28191
10002e48:	0002eb00 	call	10002eb0 <copysign>
10002e4c:	01b0be74 	movhi	r6,49913
10002e50:	01c06974 	movhi	r7,421
10002e54:	1009883a 	mov	r4,r2
10002e58:	180b883a 	mov	r5,r3
10002e5c:	31bcd644 	addi	r6,r6,-3239
10002e60:	39db87c4 	addi	r7,r7,28191
10002e64:	000525c0 	call	1000525c <__muldf3>
10002e68:	003fd906 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10002e6c:	200d883a 	mov	r6,r4
10002e70:	0003dfc0 	call	10003dfc <__adddf3>
10002e74:	dfc00117 	ldw	ra,4(sp)
10002e78:	dc000017 	ldw	r16,0(sp)
10002e7c:	dec00204 	addi	sp,sp,8
10002e80:	f800283a 	ret
10002e84:	42000d84 	addi	r8,r8,54
10002e88:	4012953a 	slli	r9,r8,20
10002e8c:	01e00434 	movhi	r7,32784
10002e90:	39ffffc4 	addi	r7,r7,-1
10002e94:	31ca703a 	and	r5,r6,r7
10002e98:	5009883a 	mov	r4,r10
10002e9c:	494ab03a 	or	r5,r9,r5
10002ea0:	000d883a 	mov	r6,zero
10002ea4:	01cf2434 	movhi	r7,15504
10002ea8:	000525c0 	call	1000525c <__muldf3>
10002eac:	003fc806 	br	10002dd0 <__alt_data_end+0xf8002dd0>

10002eb0 <copysign>:
10002eb0:	2005883a 	mov	r2,r4
10002eb4:	01200034 	movhi	r4,32768
10002eb8:	213fffc4 	addi	r4,r4,-1
10002ebc:	38e0002c 	andhi	r3,r7,32768
10002ec0:	290a703a 	and	r5,r5,r4
10002ec4:	1946b03a 	or	r3,r3,r5
10002ec8:	f800283a 	ret

10002ecc <__muldi3>:
10002ecc:	defff604 	addi	sp,sp,-40
10002ed0:	dd800615 	stw	r22,24(sp)
10002ed4:	dd400515 	stw	r21,20(sp)
10002ed8:	25bfffcc 	andi	r22,r4,65535
10002edc:	357fffcc 	andi	r21,r6,65535
10002ee0:	dc400115 	stw	r17,4(sp)
10002ee4:	2022d43a 	srli	r17,r4,16
10002ee8:	dcc00315 	stw	r19,12(sp)
10002eec:	dc800215 	stw	r18,8(sp)
10002ef0:	2027883a 	mov	r19,r4
10002ef4:	2825883a 	mov	r18,r5
10002ef8:	a809883a 	mov	r4,r21
10002efc:	b00b883a 	mov	r5,r22
10002f00:	dfc00915 	stw	ra,36(sp)
10002f04:	df000815 	stw	fp,32(sp)
10002f08:	ddc00715 	stw	r23,28(sp)
10002f0c:	3839883a 	mov	fp,r7
10002f10:	302ed43a 	srli	r23,r6,16
10002f14:	dd000415 	stw	r20,16(sp)
10002f18:	dc000015 	stw	r16,0(sp)
10002f1c:	3029883a 	mov	r20,r6
10002f20:	0003dd40 	call	10003dd4 <__mulsi3>
10002f24:	a809883a 	mov	r4,r21
10002f28:	880b883a 	mov	r5,r17
10002f2c:	1021883a 	mov	r16,r2
10002f30:	0003dd40 	call	10003dd4 <__mulsi3>
10002f34:	880b883a 	mov	r5,r17
10002f38:	b809883a 	mov	r4,r23
10002f3c:	102b883a 	mov	r21,r2
10002f40:	0003dd40 	call	10003dd4 <__mulsi3>
10002f44:	b809883a 	mov	r4,r23
10002f48:	b00b883a 	mov	r5,r22
10002f4c:	1023883a 	mov	r17,r2
10002f50:	0003dd40 	call	10003dd4 <__mulsi3>
10002f54:	8012d43a 	srli	r9,r16,16
10002f58:	a885883a 	add	r2,r21,r2
10002f5c:	1251883a 	add	r8,r2,r9
10002f60:	4540022e 	bgeu	r8,r21,10002f6c <__muldi3+0xa0>
10002f64:	00800074 	movhi	r2,1
10002f68:	88a3883a 	add	r17,r17,r2
10002f6c:	4006d43a 	srli	r3,r8,16
10002f70:	4010943a 	slli	r8,r8,16
10002f74:	9809883a 	mov	r4,r19
10002f78:	e00b883a 	mov	r5,fp
10002f7c:	843fffcc 	andi	r16,r16,65535
10002f80:	88e3883a 	add	r17,r17,r3
10002f84:	4421883a 	add	r16,r8,r16
10002f88:	0003dd40 	call	10003dd4 <__mulsi3>
10002f8c:	a009883a 	mov	r4,r20
10002f90:	900b883a 	mov	r5,r18
10002f94:	1027883a 	mov	r19,r2
10002f98:	0003dd40 	call	10003dd4 <__mulsi3>
10002f9c:	9885883a 	add	r2,r19,r2
10002fa0:	1447883a 	add	r3,r2,r17
10002fa4:	8005883a 	mov	r2,r16
10002fa8:	dfc00917 	ldw	ra,36(sp)
10002fac:	df000817 	ldw	fp,32(sp)
10002fb0:	ddc00717 	ldw	r23,28(sp)
10002fb4:	dd800617 	ldw	r22,24(sp)
10002fb8:	dd400517 	ldw	r21,20(sp)
10002fbc:	dd000417 	ldw	r20,16(sp)
10002fc0:	dcc00317 	ldw	r19,12(sp)
10002fc4:	dc800217 	ldw	r18,8(sp)
10002fc8:	dc400117 	ldw	r17,4(sp)
10002fcc:	dc000017 	ldw	r16,0(sp)
10002fd0:	dec00a04 	addi	sp,sp,40
10002fd4:	f800283a 	ret

10002fd8 <__fixunsdfsi>:
10002fd8:	defffd04 	addi	sp,sp,-12
10002fdc:	000d883a 	mov	r6,zero
10002fe0:	01d07834 	movhi	r7,16864
10002fe4:	dc400115 	stw	r17,4(sp)
10002fe8:	dc000015 	stw	r16,0(sp)
10002fec:	dfc00215 	stw	ra,8(sp)
10002ff0:	2023883a 	mov	r17,r4
10002ff4:	2821883a 	mov	r16,r5
10002ff8:	000509c0 	call	1000509c <__gedf2>
10002ffc:	1000080e 	bge	r2,zero,10003020 <__fixunsdfsi+0x48>
10003000:	8809883a 	mov	r4,r17
10003004:	800b883a 	mov	r5,r16
10003008:	00063980 	call	10006398 <__fixdfsi>
1000300c:	dfc00217 	ldw	ra,8(sp)
10003010:	dc400117 	ldw	r17,4(sp)
10003014:	dc000017 	ldw	r16,0(sp)
10003018:	dec00304 	addi	sp,sp,12
1000301c:	f800283a 	ret
10003020:	000d883a 	mov	r6,zero
10003024:	01d07834 	movhi	r7,16864
10003028:	8809883a 	mov	r4,r17
1000302c:	800b883a 	mov	r5,r16
10003030:	0005ac80 	call	10005ac8 <__subdf3>
10003034:	180b883a 	mov	r5,r3
10003038:	1009883a 	mov	r4,r2
1000303c:	00063980 	call	10006398 <__fixdfsi>
10003040:	00e00034 	movhi	r3,32768
10003044:	10c5883a 	add	r2,r2,r3
10003048:	003ff006 	br	1000300c <__alt_data_end+0xf800300c>

1000304c <__udivdi3>:
1000304c:	defff504 	addi	sp,sp,-44
10003050:	dcc00415 	stw	r19,16(sp)
10003054:	dc000115 	stw	r16,4(sp)
10003058:	dfc00a15 	stw	ra,40(sp)
1000305c:	df000915 	stw	fp,36(sp)
10003060:	ddc00815 	stw	r23,32(sp)
10003064:	dd800715 	stw	r22,28(sp)
10003068:	dd400615 	stw	r21,24(sp)
1000306c:	dd000515 	stw	r20,20(sp)
10003070:	dc800315 	stw	r18,12(sp)
10003074:	dc400215 	stw	r17,8(sp)
10003078:	2027883a 	mov	r19,r4
1000307c:	2821883a 	mov	r16,r5
10003080:	3800471e 	bne	r7,zero,100031a0 <__udivdi3+0x154>
10003084:	3025883a 	mov	r18,r6
10003088:	2023883a 	mov	r17,r4
1000308c:	2980592e 	bgeu	r5,r6,100031f4 <__udivdi3+0x1a8>
10003090:	00bfffd4 	movui	r2,65535
10003094:	2829883a 	mov	r20,r5
10003098:	1180b236 	bltu	r2,r6,10003364 <__udivdi3+0x318>
1000309c:	00803fc4 	movi	r2,255
100030a0:	1181622e 	bgeu	r2,r6,1000362c <__udivdi3+0x5e0>
100030a4:	00800204 	movi	r2,8
100030a8:	1007883a 	mov	r3,r2
100030ac:	3084d83a 	srl	r2,r6,r2
100030b0:	01040074 	movhi	r4,4097
100030b4:	21084104 	addi	r4,r4,8452
100030b8:	2085883a 	add	r2,r4,r2
100030bc:	11000003 	ldbu	r4,0(r2)
100030c0:	20c9883a 	add	r4,r4,r3
100030c4:	00c00804 	movi	r3,32
100030c8:	1907c83a 	sub	r3,r3,r4
100030cc:	18000526 	beq	r3,zero,100030e4 <__udivdi3+0x98>
100030d0:	80e0983a 	sll	r16,r16,r3
100030d4:	9908d83a 	srl	r4,r19,r4
100030d8:	30e4983a 	sll	r18,r6,r3
100030dc:	98e2983a 	sll	r17,r19,r3
100030e0:	8128b03a 	or	r20,r16,r4
100030e4:	902ad43a 	srli	r21,r18,16
100030e8:	a009883a 	mov	r4,r20
100030ec:	95bfffcc 	andi	r22,r18,65535
100030f0:	a80b883a 	mov	r5,r21
100030f4:	0003dcc0 	call	10003dcc <__umodsi3>
100030f8:	a009883a 	mov	r4,r20
100030fc:	a80b883a 	mov	r5,r21
10003100:	102f883a 	mov	r23,r2
10003104:	0003dc40 	call	10003dc4 <__udivsi3>
10003108:	1009883a 	mov	r4,r2
1000310c:	b00b883a 	mov	r5,r22
10003110:	1021883a 	mov	r16,r2
10003114:	0003dd40 	call	10003dd4 <__mulsi3>
10003118:	b82e943a 	slli	r23,r23,16
1000311c:	8808d43a 	srli	r4,r17,16
10003120:	b906b03a 	or	r3,r23,r4
10003124:	1880052e 	bgeu	r3,r2,1000313c <__udivdi3+0xf0>
10003128:	1c87883a 	add	r3,r3,r18
1000312c:	813fffc4 	addi	r4,r16,-1
10003130:	1c800136 	bltu	r3,r18,10003138 <__udivdi3+0xec>
10003134:	18815236 	bltu	r3,r2,10003680 <__udivdi3+0x634>
10003138:	2021883a 	mov	r16,r4
1000313c:	18a7c83a 	sub	r19,r3,r2
10003140:	9809883a 	mov	r4,r19
10003144:	a80b883a 	mov	r5,r21
10003148:	0003dcc0 	call	10003dcc <__umodsi3>
1000314c:	1029883a 	mov	r20,r2
10003150:	9809883a 	mov	r4,r19
10003154:	a80b883a 	mov	r5,r21
10003158:	a028943a 	slli	r20,r20,16
1000315c:	0003dc40 	call	10003dc4 <__udivsi3>
10003160:	1009883a 	mov	r4,r2
10003164:	b00b883a 	mov	r5,r22
10003168:	8c7fffcc 	andi	r17,r17,65535
1000316c:	1027883a 	mov	r19,r2
10003170:	a462b03a 	or	r17,r20,r17
10003174:	0003dd40 	call	10003dd4 <__mulsi3>
10003178:	8880052e 	bgeu	r17,r2,10003190 <__udivdi3+0x144>
1000317c:	8ca3883a 	add	r17,r17,r18
10003180:	98ffffc4 	addi	r3,r19,-1
10003184:	8c811036 	bltu	r17,r18,100035c8 <__udivdi3+0x57c>
10003188:	88810f2e 	bgeu	r17,r2,100035c8 <__udivdi3+0x57c>
1000318c:	9cffff84 	addi	r19,r19,-2
10003190:	8020943a 	slli	r16,r16,16
10003194:	0007883a 	mov	r3,zero
10003198:	9c04b03a 	or	r2,r19,r16
1000319c:	00006006 	br	10003320 <__udivdi3+0x2d4>
100031a0:	29c05d36 	bltu	r5,r7,10003318 <__udivdi3+0x2cc>
100031a4:	00bfffd4 	movui	r2,65535
100031a8:	11c0692e 	bgeu	r2,r7,10003350 <__udivdi3+0x304>
100031ac:	00804034 	movhi	r2,256
100031b0:	10bfffc4 	addi	r2,r2,-1
100031b4:	11c10e2e 	bgeu	r2,r7,100035f0 <__udivdi3+0x5a4>
100031b8:	01400604 	movi	r5,24
100031bc:	2811883a 	mov	r8,r5
100031c0:	394ad83a 	srl	r5,r7,r5
100031c4:	00840074 	movhi	r2,4097
100031c8:	10884104 	addi	r2,r2,8452
100031cc:	114b883a 	add	r5,r2,r5
100031d0:	29400003 	ldbu	r5,0(r5)
100031d4:	00c00804 	movi	r3,32
100031d8:	2a0b883a 	add	r5,r5,r8
100031dc:	196fc83a 	sub	r23,r3,r5
100031e0:	b8006b1e 	bne	r23,zero,10003390 <__udivdi3+0x344>
100031e4:	3c011436 	bltu	r7,r16,10003638 <__udivdi3+0x5ec>
100031e8:	9985403a 	cmpgeu	r2,r19,r6
100031ec:	0007883a 	mov	r3,zero
100031f0:	00004b06 	br	10003320 <__udivdi3+0x2d4>
100031f4:	3000041e 	bne	r6,zero,10003208 <__udivdi3+0x1bc>
100031f8:	01000044 	movi	r4,1
100031fc:	000b883a 	mov	r5,zero
10003200:	0003dc40 	call	10003dc4 <__udivsi3>
10003204:	1025883a 	mov	r18,r2
10003208:	00bfffd4 	movui	r2,65535
1000320c:	14805b2e 	bgeu	r2,r18,1000337c <__udivdi3+0x330>
10003210:	00804034 	movhi	r2,256
10003214:	10bfffc4 	addi	r2,r2,-1
10003218:	1480fe2e 	bgeu	r2,r18,10003614 <__udivdi3+0x5c8>
1000321c:	00800604 	movi	r2,24
10003220:	1007883a 	mov	r3,r2
10003224:	9084d83a 	srl	r2,r18,r2
10003228:	01040074 	movhi	r4,4097
1000322c:	21084104 	addi	r4,r4,8452
10003230:	2085883a 	add	r2,r4,r2
10003234:	11800003 	ldbu	r6,0(r2)
10003238:	01c00804 	movi	r7,32
1000323c:	30c7883a 	add	r3,r6,r3
10003240:	38cfc83a 	sub	r7,r7,r3
10003244:	3800a71e 	bne	r7,zero,100034e4 <__udivdi3+0x498>
10003248:	9028d43a 	srli	r20,r18,16
1000324c:	84a1c83a 	sub	r16,r16,r18
10003250:	957fffcc 	andi	r21,r18,65535
10003254:	00c00044 	movi	r3,1
10003258:	8009883a 	mov	r4,r16
1000325c:	a00b883a 	mov	r5,r20
10003260:	d8c00015 	stw	r3,0(sp)
10003264:	0003dcc0 	call	10003dcc <__umodsi3>
10003268:	8009883a 	mov	r4,r16
1000326c:	a00b883a 	mov	r5,r20
10003270:	102d883a 	mov	r22,r2
10003274:	0003dc40 	call	10003dc4 <__udivsi3>
10003278:	1009883a 	mov	r4,r2
1000327c:	a80b883a 	mov	r5,r21
10003280:	1021883a 	mov	r16,r2
10003284:	0003dd40 	call	10003dd4 <__mulsi3>
10003288:	b02c943a 	slli	r22,r22,16
1000328c:	880ed43a 	srli	r7,r17,16
10003290:	d8c00017 	ldw	r3,0(sp)
10003294:	b1ccb03a 	or	r6,r22,r7
10003298:	3080052e 	bgeu	r6,r2,100032b0 <__udivdi3+0x264>
1000329c:	348d883a 	add	r6,r6,r18
100032a0:	813fffc4 	addi	r4,r16,-1
100032a4:	34800136 	bltu	r6,r18,100032ac <__udivdi3+0x260>
100032a8:	3080f236 	bltu	r6,r2,10003674 <__udivdi3+0x628>
100032ac:	2021883a 	mov	r16,r4
100032b0:	30a7c83a 	sub	r19,r6,r2
100032b4:	9809883a 	mov	r4,r19
100032b8:	a00b883a 	mov	r5,r20
100032bc:	d8c00015 	stw	r3,0(sp)
100032c0:	0003dcc0 	call	10003dcc <__umodsi3>
100032c4:	102d883a 	mov	r22,r2
100032c8:	9809883a 	mov	r4,r19
100032cc:	a00b883a 	mov	r5,r20
100032d0:	b02c943a 	slli	r22,r22,16
100032d4:	0003dc40 	call	10003dc4 <__udivsi3>
100032d8:	1009883a 	mov	r4,r2
100032dc:	a80b883a 	mov	r5,r21
100032e0:	8c7fffcc 	andi	r17,r17,65535
100032e4:	1027883a 	mov	r19,r2
100032e8:	b462b03a 	or	r17,r22,r17
100032ec:	0003dd40 	call	10003dd4 <__mulsi3>
100032f0:	d8c00017 	ldw	r3,0(sp)
100032f4:	8880052e 	bgeu	r17,r2,1000330c <__udivdi3+0x2c0>
100032f8:	8ca3883a 	add	r17,r17,r18
100032fc:	993fffc4 	addi	r4,r19,-1
10003300:	8c80af36 	bltu	r17,r18,100035c0 <__udivdi3+0x574>
10003304:	8880ae2e 	bgeu	r17,r2,100035c0 <__udivdi3+0x574>
10003308:	9cffff84 	addi	r19,r19,-2
1000330c:	8020943a 	slli	r16,r16,16
10003310:	9c04b03a 	or	r2,r19,r16
10003314:	00000206 	br	10003320 <__udivdi3+0x2d4>
10003318:	0007883a 	mov	r3,zero
1000331c:	0005883a 	mov	r2,zero
10003320:	dfc00a17 	ldw	ra,40(sp)
10003324:	df000917 	ldw	fp,36(sp)
10003328:	ddc00817 	ldw	r23,32(sp)
1000332c:	dd800717 	ldw	r22,28(sp)
10003330:	dd400617 	ldw	r21,24(sp)
10003334:	dd000517 	ldw	r20,20(sp)
10003338:	dcc00417 	ldw	r19,16(sp)
1000333c:	dc800317 	ldw	r18,12(sp)
10003340:	dc400217 	ldw	r17,8(sp)
10003344:	dc000117 	ldw	r16,4(sp)
10003348:	dec00b04 	addi	sp,sp,44
1000334c:	f800283a 	ret
10003350:	00803fc4 	movi	r2,255
10003354:	11c0a92e 	bgeu	r2,r7,100035fc <__udivdi3+0x5b0>
10003358:	01400204 	movi	r5,8
1000335c:	2811883a 	mov	r8,r5
10003360:	003f9706 	br	100031c0 <__alt_data_end+0xf80031c0>
10003364:	00804034 	movhi	r2,256
10003368:	10bfffc4 	addi	r2,r2,-1
1000336c:	1180a62e 	bgeu	r2,r6,10003608 <__udivdi3+0x5bc>
10003370:	00800604 	movi	r2,24
10003374:	1007883a 	mov	r3,r2
10003378:	003f4c06 	br	100030ac <__alt_data_end+0xf80030ac>
1000337c:	00803fc4 	movi	r2,255
10003380:	1480a72e 	bgeu	r2,r18,10003620 <__udivdi3+0x5d4>
10003384:	00800204 	movi	r2,8
10003388:	1007883a 	mov	r3,r2
1000338c:	003fa506 	br	10003224 <__alt_data_end+0xf8003224>
10003390:	3178d83a 	srl	fp,r6,r5
10003394:	3dce983a 	sll	r7,r7,r23
10003398:	8168d83a 	srl	r20,r16,r5
1000339c:	9950d83a 	srl	r8,r19,r5
100033a0:	3f38b03a 	or	fp,r7,fp
100033a4:	e024d43a 	srli	r18,fp,16
100033a8:	85e0983a 	sll	r16,r16,r23
100033ac:	a009883a 	mov	r4,r20
100033b0:	900b883a 	mov	r5,r18
100033b4:	8220b03a 	or	r16,r16,r8
100033b8:	35ea983a 	sll	r21,r6,r23
100033bc:	0003dcc0 	call	10003dcc <__umodsi3>
100033c0:	a009883a 	mov	r4,r20
100033c4:	900b883a 	mov	r5,r18
100033c8:	1023883a 	mov	r17,r2
100033cc:	e5bfffcc 	andi	r22,fp,65535
100033d0:	0003dc40 	call	10003dc4 <__udivsi3>
100033d4:	1009883a 	mov	r4,r2
100033d8:	b00b883a 	mov	r5,r22
100033dc:	1029883a 	mov	r20,r2
100033e0:	0003dd40 	call	10003dd4 <__mulsi3>
100033e4:	8806943a 	slli	r3,r17,16
100033e8:	8014d43a 	srli	r10,r16,16
100033ec:	1a92b03a 	or	r9,r3,r10
100033f0:	4880042e 	bgeu	r9,r2,10003404 <__udivdi3+0x3b8>
100033f4:	4f13883a 	add	r9,r9,fp
100033f8:	a0ffffc4 	addi	r3,r20,-1
100033fc:	4f00952e 	bgeu	r9,fp,10003654 <__udivdi3+0x608>
10003400:	1829883a 	mov	r20,r3
10003404:	48a3c83a 	sub	r17,r9,r2
10003408:	8809883a 	mov	r4,r17
1000340c:	900b883a 	mov	r5,r18
10003410:	0003dcc0 	call	10003dcc <__umodsi3>
10003414:	8809883a 	mov	r4,r17
10003418:	900b883a 	mov	r5,r18
1000341c:	d8800015 	stw	r2,0(sp)
10003420:	0003dc40 	call	10003dc4 <__udivsi3>
10003424:	1009883a 	mov	r4,r2
10003428:	b00b883a 	mov	r5,r22
1000342c:	1023883a 	mov	r17,r2
10003430:	0003dd40 	call	10003dd4 <__mulsi3>
10003434:	d8c00017 	ldw	r3,0(sp)
10003438:	823fffcc 	andi	r8,r16,65535
1000343c:	1806943a 	slli	r3,r3,16
10003440:	1a20b03a 	or	r16,r3,r8
10003444:	8080042e 	bgeu	r16,r2,10003458 <__udivdi3+0x40c>
10003448:	8721883a 	add	r16,r16,fp
1000344c:	88ffffc4 	addi	r3,r17,-1
10003450:	87007c2e 	bgeu	r16,fp,10003644 <__udivdi3+0x5f8>
10003454:	1823883a 	mov	r17,r3
10003458:	a028943a 	slli	r20,r20,16
1000345c:	acbfffcc 	andi	r18,r21,65535
10003460:	900b883a 	mov	r5,r18
10003464:	8d28b03a 	or	r20,r17,r20
10003468:	a022d43a 	srli	r17,r20,16
1000346c:	a5bfffcc 	andi	r22,r20,65535
10003470:	b009883a 	mov	r4,r22
10003474:	a82ad43a 	srli	r21,r21,16
10003478:	80a1c83a 	sub	r16,r16,r2
1000347c:	0003dd40 	call	10003dd4 <__mulsi3>
10003480:	8809883a 	mov	r4,r17
10003484:	900b883a 	mov	r5,r18
10003488:	1039883a 	mov	fp,r2
1000348c:	0003dd40 	call	10003dd4 <__mulsi3>
10003490:	8809883a 	mov	r4,r17
10003494:	a80b883a 	mov	r5,r21
10003498:	1025883a 	mov	r18,r2
1000349c:	0003dd40 	call	10003dd4 <__mulsi3>
100034a0:	b009883a 	mov	r4,r22
100034a4:	a80b883a 	mov	r5,r21
100034a8:	1023883a 	mov	r17,r2
100034ac:	0003dd40 	call	10003dd4 <__mulsi3>
100034b0:	e006d43a 	srli	r3,fp,16
100034b4:	9085883a 	add	r2,r18,r2
100034b8:	10c7883a 	add	r3,r2,r3
100034bc:	1c80022e 	bgeu	r3,r18,100034c8 <__udivdi3+0x47c>
100034c0:	00800074 	movhi	r2,1
100034c4:	88a3883a 	add	r17,r17,r2
100034c8:	1808d43a 	srli	r4,r3,16
100034cc:	8909883a 	add	r4,r17,r4
100034d0:	81004436 	bltu	r16,r4,100035e4 <__udivdi3+0x598>
100034d4:	81003e26 	beq	r16,r4,100035d0 <__udivdi3+0x584>
100034d8:	a005883a 	mov	r2,r20
100034dc:	0007883a 	mov	r3,zero
100034e0:	003f8f06 	br	10003320 <__alt_data_end+0xf8003320>
100034e4:	91e4983a 	sll	r18,r18,r7
100034e8:	80eed83a 	srl	r23,r16,r3
100034ec:	81cc983a 	sll	r6,r16,r7
100034f0:	9028d43a 	srli	r20,r18,16
100034f4:	98c6d83a 	srl	r3,r19,r3
100034f8:	b809883a 	mov	r4,r23
100034fc:	a00b883a 	mov	r5,r20
10003500:	30ecb03a 	or	r22,r6,r3
10003504:	99e2983a 	sll	r17,r19,r7
10003508:	0003dcc0 	call	10003dcc <__umodsi3>
1000350c:	b809883a 	mov	r4,r23
10003510:	a00b883a 	mov	r5,r20
10003514:	1021883a 	mov	r16,r2
10003518:	957fffcc 	andi	r21,r18,65535
1000351c:	0003dc40 	call	10003dc4 <__udivsi3>
10003520:	a80b883a 	mov	r5,r21
10003524:	1009883a 	mov	r4,r2
10003528:	102f883a 	mov	r23,r2
1000352c:	0003dd40 	call	10003dd4 <__mulsi3>
10003530:	8020943a 	slli	r16,r16,16
10003534:	b00ad43a 	srli	r5,r22,16
10003538:	814cb03a 	or	r6,r16,r5
1000353c:	3080062e 	bgeu	r6,r2,10003558 <__udivdi3+0x50c>
10003540:	348d883a 	add	r6,r6,r18
10003544:	b8ffffc4 	addi	r3,r23,-1
10003548:	34804836 	bltu	r6,r18,1000366c <__udivdi3+0x620>
1000354c:	3080472e 	bgeu	r6,r2,1000366c <__udivdi3+0x620>
10003550:	bdffff84 	addi	r23,r23,-2
10003554:	348d883a 	add	r6,r6,r18
10003558:	30a7c83a 	sub	r19,r6,r2
1000355c:	9809883a 	mov	r4,r19
10003560:	a00b883a 	mov	r5,r20
10003564:	0003dcc0 	call	10003dcc <__umodsi3>
10003568:	9809883a 	mov	r4,r19
1000356c:	a00b883a 	mov	r5,r20
10003570:	1039883a 	mov	fp,r2
10003574:	0003dc40 	call	10003dc4 <__udivsi3>
10003578:	1009883a 	mov	r4,r2
1000357c:	a80b883a 	mov	r5,r21
10003580:	e038943a 	slli	fp,fp,16
10003584:	1027883a 	mov	r19,r2
10003588:	0003dd40 	call	10003dd4 <__mulsi3>
1000358c:	b1bfffcc 	andi	r6,r22,65535
10003590:	e18cb03a 	or	r6,fp,r6
10003594:	3080062e 	bgeu	r6,r2,100035b0 <__udivdi3+0x564>
10003598:	348d883a 	add	r6,r6,r18
1000359c:	98ffffc4 	addi	r3,r19,-1
100035a0:	34803036 	bltu	r6,r18,10003664 <__udivdi3+0x618>
100035a4:	30802f2e 	bgeu	r6,r2,10003664 <__udivdi3+0x618>
100035a8:	9cffff84 	addi	r19,r19,-2
100035ac:	348d883a 	add	r6,r6,r18
100035b0:	b82e943a 	slli	r23,r23,16
100035b4:	30a1c83a 	sub	r16,r6,r2
100035b8:	9dc6b03a 	or	r3,r19,r23
100035bc:	003f2606 	br	10003258 <__alt_data_end+0xf8003258>
100035c0:	2027883a 	mov	r19,r4
100035c4:	003f5106 	br	1000330c <__alt_data_end+0xf800330c>
100035c8:	1827883a 	mov	r19,r3
100035cc:	003ef006 	br	10003190 <__alt_data_end+0xf8003190>
100035d0:	1808943a 	slli	r4,r3,16
100035d4:	9dc6983a 	sll	r3,r19,r23
100035d8:	e73fffcc 	andi	fp,fp,65535
100035dc:	2709883a 	add	r4,r4,fp
100035e0:	193fbd2e 	bgeu	r3,r4,100034d8 <__alt_data_end+0xf80034d8>
100035e4:	a0bfffc4 	addi	r2,r20,-1
100035e8:	0007883a 	mov	r3,zero
100035ec:	003f4c06 	br	10003320 <__alt_data_end+0xf8003320>
100035f0:	01400404 	movi	r5,16
100035f4:	2811883a 	mov	r8,r5
100035f8:	003ef106 	br	100031c0 <__alt_data_end+0xf80031c0>
100035fc:	000b883a 	mov	r5,zero
10003600:	0011883a 	mov	r8,zero
10003604:	003eee06 	br	100031c0 <__alt_data_end+0xf80031c0>
10003608:	00800404 	movi	r2,16
1000360c:	1007883a 	mov	r3,r2
10003610:	003ea606 	br	100030ac <__alt_data_end+0xf80030ac>
10003614:	00800404 	movi	r2,16
10003618:	1007883a 	mov	r3,r2
1000361c:	003f0106 	br	10003224 <__alt_data_end+0xf8003224>
10003620:	0005883a 	mov	r2,zero
10003624:	0007883a 	mov	r3,zero
10003628:	003efe06 	br	10003224 <__alt_data_end+0xf8003224>
1000362c:	0005883a 	mov	r2,zero
10003630:	0007883a 	mov	r3,zero
10003634:	003e9d06 	br	100030ac <__alt_data_end+0xf80030ac>
10003638:	0007883a 	mov	r3,zero
1000363c:	00800044 	movi	r2,1
10003640:	003f3706 	br	10003320 <__alt_data_end+0xf8003320>
10003644:	80bf832e 	bgeu	r16,r2,10003454 <__alt_data_end+0xf8003454>
10003648:	8c7fff84 	addi	r17,r17,-2
1000364c:	8721883a 	add	r16,r16,fp
10003650:	003f8106 	br	10003458 <__alt_data_end+0xf8003458>
10003654:	48bf6a2e 	bgeu	r9,r2,10003400 <__alt_data_end+0xf8003400>
10003658:	a53fff84 	addi	r20,r20,-2
1000365c:	4f13883a 	add	r9,r9,fp
10003660:	003f6806 	br	10003404 <__alt_data_end+0xf8003404>
10003664:	1827883a 	mov	r19,r3
10003668:	003fd106 	br	100035b0 <__alt_data_end+0xf80035b0>
1000366c:	182f883a 	mov	r23,r3
10003670:	003fb906 	br	10003558 <__alt_data_end+0xf8003558>
10003674:	843fff84 	addi	r16,r16,-2
10003678:	348d883a 	add	r6,r6,r18
1000367c:	003f0c06 	br	100032b0 <__alt_data_end+0xf80032b0>
10003680:	843fff84 	addi	r16,r16,-2
10003684:	1c87883a 	add	r3,r3,r18
10003688:	003eac06 	br	1000313c <__alt_data_end+0xf800313c>

1000368c <__umoddi3>:
1000368c:	defff404 	addi	sp,sp,-48
10003690:	dd800815 	stw	r22,32(sp)
10003694:	dc400315 	stw	r17,12(sp)
10003698:	dc000215 	stw	r16,8(sp)
1000369c:	dfc00b15 	stw	ra,44(sp)
100036a0:	df000a15 	stw	fp,40(sp)
100036a4:	ddc00915 	stw	r23,36(sp)
100036a8:	dd400715 	stw	r21,28(sp)
100036ac:	dd000615 	stw	r20,24(sp)
100036b0:	dcc00515 	stw	r19,20(sp)
100036b4:	dc800415 	stw	r18,16(sp)
100036b8:	2021883a 	mov	r16,r4
100036bc:	2823883a 	mov	r17,r5
100036c0:	282d883a 	mov	r22,r5
100036c4:	38003c1e 	bne	r7,zero,100037b8 <__umoddi3+0x12c>
100036c8:	3027883a 	mov	r19,r6
100036cc:	2029883a 	mov	r20,r4
100036d0:	2980522e 	bgeu	r5,r6,1000381c <__umoddi3+0x190>
100036d4:	00bfffd4 	movui	r2,65535
100036d8:	1180a436 	bltu	r2,r6,1000396c <__umoddi3+0x2e0>
100036dc:	00803fc4 	movi	r2,255
100036e0:	11815e2e 	bgeu	r2,r6,10003c5c <__umoddi3+0x5d0>
100036e4:	01400204 	movi	r5,8
100036e8:	2805883a 	mov	r2,r5
100036ec:	314ad83a 	srl	r5,r6,r5
100036f0:	00c40074 	movhi	r3,4097
100036f4:	18c84104 	addi	r3,r3,8452
100036f8:	194b883a 	add	r5,r3,r5
100036fc:	29000003 	ldbu	r4,0(r5)
10003700:	2089883a 	add	r4,r4,r2
10003704:	00800804 	movi	r2,32
10003708:	1105c83a 	sub	r2,r2,r4
1000370c:	10010c26 	beq	r2,zero,10003b40 <__umoddi3+0x4b4>
10003710:	88a2983a 	sll	r17,r17,r2
10003714:	8108d83a 	srl	r4,r16,r4
10003718:	30a6983a 	sll	r19,r6,r2
1000371c:	80a8983a 	sll	r20,r16,r2
10003720:	1025883a 	mov	r18,r2
10003724:	892cb03a 	or	r22,r17,r4
10003728:	9822d43a 	srli	r17,r19,16
1000372c:	b009883a 	mov	r4,r22
10003730:	9d7fffcc 	andi	r21,r19,65535
10003734:	880b883a 	mov	r5,r17
10003738:	0003dcc0 	call	10003dcc <__umodsi3>
1000373c:	b009883a 	mov	r4,r22
10003740:	880b883a 	mov	r5,r17
10003744:	102f883a 	mov	r23,r2
10003748:	0003dc40 	call	10003dc4 <__udivsi3>
1000374c:	1009883a 	mov	r4,r2
10003750:	a80b883a 	mov	r5,r21
10003754:	0003dd40 	call	10003dd4 <__mulsi3>
10003758:	b82e943a 	slli	r23,r23,16
1000375c:	a008d43a 	srli	r4,r20,16
10003760:	b906b03a 	or	r3,r23,r4
10003764:	1880042e 	bgeu	r3,r2,10003778 <__umoddi3+0xec>
10003768:	1cc7883a 	add	r3,r3,r19
1000376c:	1cc00236 	bltu	r3,r19,10003778 <__umoddi3+0xec>
10003770:	1880012e 	bgeu	r3,r2,10003778 <__umoddi3+0xec>
10003774:	1cc7883a 	add	r3,r3,r19
10003778:	18a1c83a 	sub	r16,r3,r2
1000377c:	8009883a 	mov	r4,r16
10003780:	880b883a 	mov	r5,r17
10003784:	0003dcc0 	call	10003dcc <__umodsi3>
10003788:	8009883a 	mov	r4,r16
1000378c:	880b883a 	mov	r5,r17
10003790:	102d883a 	mov	r22,r2
10003794:	0003dc40 	call	10003dc4 <__udivsi3>
10003798:	1009883a 	mov	r4,r2
1000379c:	a80b883a 	mov	r5,r21
100037a0:	b02c943a 	slli	r22,r22,16
100037a4:	0003dd40 	call	10003dd4 <__mulsi3>
100037a8:	a13fffcc 	andi	r4,r20,65535
100037ac:	b106b03a 	or	r3,r22,r4
100037b0:	1880572e 	bgeu	r3,r2,10003910 <__umoddi3+0x284>
100037b4:	00005206 	br	10003900 <__umoddi3+0x274>
100037b8:	29c05936 	bltu	r5,r7,10003920 <__umoddi3+0x294>
100037bc:	00bfffd4 	movui	r2,65535
100037c0:	11c0652e 	bgeu	r2,r7,10003958 <__umoddi3+0x2cc>
100037c4:	00804034 	movhi	r2,256
100037c8:	10bfffc4 	addi	r2,r2,-1
100037cc:	11c1172e 	bgeu	r2,r7,10003c2c <__umoddi3+0x5a0>
100037d0:	01400604 	movi	r5,24
100037d4:	282b883a 	mov	r21,r5
100037d8:	394ad83a 	srl	r5,r7,r5
100037dc:	00c40074 	movhi	r3,4097
100037e0:	18c84104 	addi	r3,r3,8452
100037e4:	194b883a 	add	r5,r3,r5
100037e8:	28800003 	ldbu	r2,0(r5)
100037ec:	00c00804 	movi	r3,32
100037f0:	156b883a 	add	r21,r2,r21
100037f4:	1d69c83a 	sub	r20,r3,r21
100037f8:	a000671e 	bne	r20,zero,10003998 <__umoddi3+0x30c>
100037fc:	3c400136 	bltu	r7,r17,10003804 <__umoddi3+0x178>
10003800:	81812336 	bltu	r16,r6,10003c90 <__umoddi3+0x604>
10003804:	8185c83a 	sub	r2,r16,r6
10003808:	89e3c83a 	sub	r17,r17,r7
1000380c:	8087803a 	cmpltu	r3,r16,r2
10003810:	88edc83a 	sub	r22,r17,r3
10003814:	b007883a 	mov	r3,r22
10003818:	00004306 	br	10003928 <__umoddi3+0x29c>
1000381c:	3000041e 	bne	r6,zero,10003830 <__umoddi3+0x1a4>
10003820:	01000044 	movi	r4,1
10003824:	000b883a 	mov	r5,zero
10003828:	0003dc40 	call	10003dc4 <__udivsi3>
1000382c:	1027883a 	mov	r19,r2
10003830:	00bfffd4 	movui	r2,65535
10003834:	14c0532e 	bgeu	r2,r19,10003984 <__umoddi3+0x2f8>
10003838:	00804034 	movhi	r2,256
1000383c:	10bfffc4 	addi	r2,r2,-1
10003840:	14c1032e 	bgeu	r2,r19,10003c50 <__umoddi3+0x5c4>
10003844:	00800604 	movi	r2,24
10003848:	1007883a 	mov	r3,r2
1000384c:	9884d83a 	srl	r2,r19,r2
10003850:	01040074 	movhi	r4,4097
10003854:	21084104 	addi	r4,r4,8452
10003858:	2085883a 	add	r2,r4,r2
1000385c:	11000003 	ldbu	r4,0(r2)
10003860:	00800804 	movi	r2,32
10003864:	20c7883a 	add	r3,r4,r3
10003868:	10c5c83a 	sub	r2,r2,r3
1000386c:	1000b61e 	bne	r2,zero,10003b48 <__umoddi3+0x4bc>
10003870:	982ad43a 	srli	r21,r19,16
10003874:	8ce3c83a 	sub	r17,r17,r19
10003878:	9dbfffcc 	andi	r22,r19,65535
1000387c:	0025883a 	mov	r18,zero
10003880:	8809883a 	mov	r4,r17
10003884:	a80b883a 	mov	r5,r21
10003888:	0003dcc0 	call	10003dcc <__umodsi3>
1000388c:	8809883a 	mov	r4,r17
10003890:	a80b883a 	mov	r5,r21
10003894:	102f883a 	mov	r23,r2
10003898:	0003dc40 	call	10003dc4 <__udivsi3>
1000389c:	1009883a 	mov	r4,r2
100038a0:	b00b883a 	mov	r5,r22
100038a4:	0003dd40 	call	10003dd4 <__mulsi3>
100038a8:	b82e943a 	slli	r23,r23,16
100038ac:	a008d43a 	srli	r4,r20,16
100038b0:	b906b03a 	or	r3,r23,r4
100038b4:	1880032e 	bgeu	r3,r2,100038c4 <__umoddi3+0x238>
100038b8:	1cc7883a 	add	r3,r3,r19
100038bc:	1cc00136 	bltu	r3,r19,100038c4 <__umoddi3+0x238>
100038c0:	1880f136 	bltu	r3,r2,10003c88 <__umoddi3+0x5fc>
100038c4:	18a1c83a 	sub	r16,r3,r2
100038c8:	8009883a 	mov	r4,r16
100038cc:	a80b883a 	mov	r5,r21
100038d0:	0003dcc0 	call	10003dcc <__umodsi3>
100038d4:	8009883a 	mov	r4,r16
100038d8:	a80b883a 	mov	r5,r21
100038dc:	1023883a 	mov	r17,r2
100038e0:	0003dc40 	call	10003dc4 <__udivsi3>
100038e4:	1009883a 	mov	r4,r2
100038e8:	b00b883a 	mov	r5,r22
100038ec:	8822943a 	slli	r17,r17,16
100038f0:	0003dd40 	call	10003dd4 <__mulsi3>
100038f4:	a13fffcc 	andi	r4,r20,65535
100038f8:	8906b03a 	or	r3,r17,r4
100038fc:	1880042e 	bgeu	r3,r2,10003910 <__umoddi3+0x284>
10003900:	1cc7883a 	add	r3,r3,r19
10003904:	1cc00236 	bltu	r3,r19,10003910 <__umoddi3+0x284>
10003908:	1880012e 	bgeu	r3,r2,10003910 <__umoddi3+0x284>
1000390c:	1cc7883a 	add	r3,r3,r19
10003910:	1887c83a 	sub	r3,r3,r2
10003914:	1c84d83a 	srl	r2,r3,r18
10003918:	0007883a 	mov	r3,zero
1000391c:	00000206 	br	10003928 <__umoddi3+0x29c>
10003920:	2005883a 	mov	r2,r4
10003924:	2807883a 	mov	r3,r5
10003928:	dfc00b17 	ldw	ra,44(sp)
1000392c:	df000a17 	ldw	fp,40(sp)
10003930:	ddc00917 	ldw	r23,36(sp)
10003934:	dd800817 	ldw	r22,32(sp)
10003938:	dd400717 	ldw	r21,28(sp)
1000393c:	dd000617 	ldw	r20,24(sp)
10003940:	dcc00517 	ldw	r19,20(sp)
10003944:	dc800417 	ldw	r18,16(sp)
10003948:	dc400317 	ldw	r17,12(sp)
1000394c:	dc000217 	ldw	r16,8(sp)
10003950:	dec00c04 	addi	sp,sp,48
10003954:	f800283a 	ret
10003958:	00803fc4 	movi	r2,255
1000395c:	11c0b02e 	bgeu	r2,r7,10003c20 <__umoddi3+0x594>
10003960:	01400204 	movi	r5,8
10003964:	282b883a 	mov	r21,r5
10003968:	003f9b06 	br	100037d8 <__alt_data_end+0xf80037d8>
1000396c:	00804034 	movhi	r2,256
10003970:	10bfffc4 	addi	r2,r2,-1
10003974:	1180b02e 	bgeu	r2,r6,10003c38 <__umoddi3+0x5ac>
10003978:	01400604 	movi	r5,24
1000397c:	2805883a 	mov	r2,r5
10003980:	003f5a06 	br	100036ec <__alt_data_end+0xf80036ec>
10003984:	00803fc4 	movi	r2,255
10003988:	14c0ae2e 	bgeu	r2,r19,10003c44 <__umoddi3+0x5b8>
1000398c:	00800204 	movi	r2,8
10003990:	1007883a 	mov	r3,r2
10003994:	003fad06 	br	1000384c <__alt_data_end+0xf800384c>
10003998:	3d0a983a 	sll	r5,r7,r20
1000399c:	356cd83a 	srl	r22,r6,r21
100039a0:	8d78d83a 	srl	fp,r17,r21
100039a4:	8d10983a 	sll	r8,r17,r20
100039a8:	2dacb03a 	or	r22,r5,r22
100039ac:	b02ed43a 	srli	r23,r22,16
100039b0:	8564d83a 	srl	r18,r16,r21
100039b4:	e009883a 	mov	r4,fp
100039b8:	b80b883a 	mov	r5,r23
100039bc:	44a4b03a 	or	r18,r8,r18
100039c0:	3526983a 	sll	r19,r6,r20
100039c4:	0003dcc0 	call	10003dcc <__umodsi3>
100039c8:	e009883a 	mov	r4,fp
100039cc:	b80b883a 	mov	r5,r23
100039d0:	b47fffcc 	andi	r17,r22,65535
100039d4:	d8800015 	stw	r2,0(sp)
100039d8:	0003dc40 	call	10003dc4 <__udivsi3>
100039dc:	1009883a 	mov	r4,r2
100039e0:	880b883a 	mov	r5,r17
100039e4:	1039883a 	mov	fp,r2
100039e8:	0003dd40 	call	10003dd4 <__mulsi3>
100039ec:	d9800017 	ldw	r6,0(sp)
100039f0:	9008d43a 	srli	r4,r18,16
100039f4:	8520983a 	sll	r16,r16,r20
100039f8:	300c943a 	slli	r6,r6,16
100039fc:	3106b03a 	or	r3,r6,r4
10003a00:	1880042e 	bgeu	r3,r2,10003a14 <__umoddi3+0x388>
10003a04:	1d87883a 	add	r3,r3,r22
10003a08:	e13fffc4 	addi	r4,fp,-1
10003a0c:	1d809a2e 	bgeu	r3,r22,10003c78 <__umoddi3+0x5ec>
10003a10:	2039883a 	mov	fp,r4
10003a14:	1887c83a 	sub	r3,r3,r2
10003a18:	1809883a 	mov	r4,r3
10003a1c:	b80b883a 	mov	r5,r23
10003a20:	d8c00115 	stw	r3,4(sp)
10003a24:	0003dcc0 	call	10003dcc <__umodsi3>
10003a28:	d8c00117 	ldw	r3,4(sp)
10003a2c:	b80b883a 	mov	r5,r23
10003a30:	d8800015 	stw	r2,0(sp)
10003a34:	1809883a 	mov	r4,r3
10003a38:	0003dc40 	call	10003dc4 <__udivsi3>
10003a3c:	880b883a 	mov	r5,r17
10003a40:	1009883a 	mov	r4,r2
10003a44:	102f883a 	mov	r23,r2
10003a48:	0003dd40 	call	10003dd4 <__mulsi3>
10003a4c:	d9800017 	ldw	r6,0(sp)
10003a50:	947fffcc 	andi	r17,r18,65535
10003a54:	300c943a 	slli	r6,r6,16
10003a58:	3464b03a 	or	r18,r6,r17
10003a5c:	9080042e 	bgeu	r18,r2,10003a70 <__umoddi3+0x3e4>
10003a60:	95a5883a 	add	r18,r18,r22
10003a64:	b8ffffc4 	addi	r3,r23,-1
10003a68:	95807f2e 	bgeu	r18,r22,10003c68 <__umoddi3+0x5dc>
10003a6c:	182f883a 	mov	r23,r3
10003a70:	e038943a 	slli	fp,fp,16
10003a74:	980cd43a 	srli	r6,r19,16
10003a78:	98ffffcc 	andi	r3,r19,65535
10003a7c:	bf38b03a 	or	fp,r23,fp
10003a80:	e02ed43a 	srli	r23,fp,16
10003a84:	e73fffcc 	andi	fp,fp,65535
10003a88:	180b883a 	mov	r5,r3
10003a8c:	e009883a 	mov	r4,fp
10003a90:	d9800015 	stw	r6,0(sp)
10003a94:	d8c00115 	stw	r3,4(sp)
10003a98:	90a5c83a 	sub	r18,r18,r2
10003a9c:	0003dd40 	call	10003dd4 <__mulsi3>
10003aa0:	d8c00117 	ldw	r3,4(sp)
10003aa4:	b809883a 	mov	r4,r23
10003aa8:	1023883a 	mov	r17,r2
10003aac:	180b883a 	mov	r5,r3
10003ab0:	0003dd40 	call	10003dd4 <__mulsi3>
10003ab4:	d9800017 	ldw	r6,0(sp)
10003ab8:	b809883a 	mov	r4,r23
10003abc:	d8800115 	stw	r2,4(sp)
10003ac0:	300b883a 	mov	r5,r6
10003ac4:	302f883a 	mov	r23,r6
10003ac8:	0003dd40 	call	10003dd4 <__mulsi3>
10003acc:	e009883a 	mov	r4,fp
10003ad0:	b80b883a 	mov	r5,r23
10003ad4:	d8800015 	stw	r2,0(sp)
10003ad8:	0003dd40 	call	10003dd4 <__mulsi3>
10003adc:	d8c00117 	ldw	r3,4(sp)
10003ae0:	880cd43a 	srli	r6,r17,16
10003ae4:	d9c00017 	ldw	r7,0(sp)
10003ae8:	1885883a 	add	r2,r3,r2
10003aec:	118d883a 	add	r6,r2,r6
10003af0:	30c0022e 	bgeu	r6,r3,10003afc <__umoddi3+0x470>
10003af4:	00800074 	movhi	r2,1
10003af8:	388f883a 	add	r7,r7,r2
10003afc:	3006d43a 	srli	r3,r6,16
10003b00:	300c943a 	slli	r6,r6,16
10003b04:	8c7fffcc 	andi	r17,r17,65535
10003b08:	38c7883a 	add	r3,r7,r3
10003b0c:	3463883a 	add	r17,r6,r17
10003b10:	90c03d36 	bltu	r18,r3,10003c08 <__umoddi3+0x57c>
10003b14:	90c06026 	beq	r18,r3,10003c98 <__umoddi3+0x60c>
10003b18:	90c9c83a 	sub	r4,r18,r3
10003b1c:	880f883a 	mov	r7,r17
10003b20:	81cfc83a 	sub	r7,r16,r7
10003b24:	81c7803a 	cmpltu	r3,r16,r7
10003b28:	20c7c83a 	sub	r3,r4,r3
10003b2c:	1d44983a 	sll	r2,r3,r21
10003b30:	3d0ed83a 	srl	r7,r7,r20
10003b34:	1d06d83a 	srl	r3,r3,r20
10003b38:	11c4b03a 	or	r2,r2,r7
10003b3c:	003f7a06 	br	10003928 <__alt_data_end+0xf8003928>
10003b40:	0025883a 	mov	r18,zero
10003b44:	003ef806 	br	10003728 <__alt_data_end+0xf8003728>
10003b48:	98a6983a 	sll	r19,r19,r2
10003b4c:	88e8d83a 	srl	r20,r17,r3
10003b50:	80c6d83a 	srl	r3,r16,r3
10003b54:	982ad43a 	srli	r21,r19,16
10003b58:	88a2983a 	sll	r17,r17,r2
10003b5c:	a009883a 	mov	r4,r20
10003b60:	a80b883a 	mov	r5,r21
10003b64:	88eeb03a 	or	r23,r17,r3
10003b68:	1025883a 	mov	r18,r2
10003b6c:	0003dcc0 	call	10003dcc <__umodsi3>
10003b70:	a009883a 	mov	r4,r20
10003b74:	a80b883a 	mov	r5,r21
10003b78:	1023883a 	mov	r17,r2
10003b7c:	9dbfffcc 	andi	r22,r19,65535
10003b80:	0003dc40 	call	10003dc4 <__udivsi3>
10003b84:	1009883a 	mov	r4,r2
10003b88:	b00b883a 	mov	r5,r22
10003b8c:	0003dd40 	call	10003dd4 <__mulsi3>
10003b90:	8822943a 	slli	r17,r17,16
10003b94:	b808d43a 	srli	r4,r23,16
10003b98:	84a8983a 	sll	r20,r16,r18
10003b9c:	8906b03a 	or	r3,r17,r4
10003ba0:	1880042e 	bgeu	r3,r2,10003bb4 <__umoddi3+0x528>
10003ba4:	1cc7883a 	add	r3,r3,r19
10003ba8:	1cc00236 	bltu	r3,r19,10003bb4 <__umoddi3+0x528>
10003bac:	1880012e 	bgeu	r3,r2,10003bb4 <__umoddi3+0x528>
10003bb0:	1cc7883a 	add	r3,r3,r19
10003bb4:	18a1c83a 	sub	r16,r3,r2
10003bb8:	8009883a 	mov	r4,r16
10003bbc:	a80b883a 	mov	r5,r21
10003bc0:	0003dcc0 	call	10003dcc <__umodsi3>
10003bc4:	8009883a 	mov	r4,r16
10003bc8:	a80b883a 	mov	r5,r21
10003bcc:	1039883a 	mov	fp,r2
10003bd0:	0003dc40 	call	10003dc4 <__udivsi3>
10003bd4:	1009883a 	mov	r4,r2
10003bd8:	b00b883a 	mov	r5,r22
10003bdc:	0003dd40 	call	10003dd4 <__mulsi3>
10003be0:	e006943a 	slli	r3,fp,16
10003be4:	b93fffcc 	andi	r4,r23,65535
10003be8:	1906b03a 	or	r3,r3,r4
10003bec:	1880042e 	bgeu	r3,r2,10003c00 <__umoddi3+0x574>
10003bf0:	1cc7883a 	add	r3,r3,r19
10003bf4:	1cc00236 	bltu	r3,r19,10003c00 <__umoddi3+0x574>
10003bf8:	1880012e 	bgeu	r3,r2,10003c00 <__umoddi3+0x574>
10003bfc:	1cc7883a 	add	r3,r3,r19
10003c00:	18a3c83a 	sub	r17,r3,r2
10003c04:	003f1e06 	br	10003880 <__alt_data_end+0xf8003880>
10003c08:	8ccfc83a 	sub	r7,r17,r19
10003c0c:	1d89c83a 	sub	r4,r3,r22
10003c10:	89e3803a 	cmpltu	r17,r17,r7
10003c14:	2463c83a 	sub	r17,r4,r17
10003c18:	9449c83a 	sub	r4,r18,r17
10003c1c:	003fc006 	br	10003b20 <__alt_data_end+0xf8003b20>
10003c20:	000b883a 	mov	r5,zero
10003c24:	002b883a 	mov	r21,zero
10003c28:	003eeb06 	br	100037d8 <__alt_data_end+0xf80037d8>
10003c2c:	01400404 	movi	r5,16
10003c30:	282b883a 	mov	r21,r5
10003c34:	003ee806 	br	100037d8 <__alt_data_end+0xf80037d8>
10003c38:	01400404 	movi	r5,16
10003c3c:	2805883a 	mov	r2,r5
10003c40:	003eaa06 	br	100036ec <__alt_data_end+0xf80036ec>
10003c44:	0005883a 	mov	r2,zero
10003c48:	0007883a 	mov	r3,zero
10003c4c:	003eff06 	br	1000384c <__alt_data_end+0xf800384c>
10003c50:	00800404 	movi	r2,16
10003c54:	1007883a 	mov	r3,r2
10003c58:	003efc06 	br	1000384c <__alt_data_end+0xf800384c>
10003c5c:	000b883a 	mov	r5,zero
10003c60:	0005883a 	mov	r2,zero
10003c64:	003ea106 	br	100036ec <__alt_data_end+0xf80036ec>
10003c68:	90bf802e 	bgeu	r18,r2,10003a6c <__alt_data_end+0xf8003a6c>
10003c6c:	bdffff84 	addi	r23,r23,-2
10003c70:	95a5883a 	add	r18,r18,r22
10003c74:	003f7e06 	br	10003a70 <__alt_data_end+0xf8003a70>
10003c78:	18bf652e 	bgeu	r3,r2,10003a10 <__alt_data_end+0xf8003a10>
10003c7c:	e73fff84 	addi	fp,fp,-2
10003c80:	1d87883a 	add	r3,r3,r22
10003c84:	003f6306 	br	10003a14 <__alt_data_end+0xf8003a14>
10003c88:	1cc7883a 	add	r3,r3,r19
10003c8c:	003f0d06 	br	100038c4 <__alt_data_end+0xf80038c4>
10003c90:	8005883a 	mov	r2,r16
10003c94:	003edf06 	br	10003814 <__alt_data_end+0xf8003814>
10003c98:	847fdb36 	bltu	r16,r17,10003c08 <__alt_data_end+0xf8003c08>
10003c9c:	880f883a 	mov	r7,r17
10003ca0:	0009883a 	mov	r4,zero
10003ca4:	003f9e06 	br	10003b20 <__alt_data_end+0xf8003b20>

10003ca8 <udivmodsi4>:
10003ca8:	2900182e 	bgeu	r5,r4,10003d0c <udivmodsi4+0x64>
10003cac:	28001716 	blt	r5,zero,10003d0c <udivmodsi4+0x64>
10003cb0:	00800804 	movi	r2,32
10003cb4:	00c00044 	movi	r3,1
10003cb8:	00000206 	br	10003cc4 <udivmodsi4+0x1c>
10003cbc:	10001126 	beq	r2,zero,10003d04 <udivmodsi4+0x5c>
10003cc0:	28000516 	blt	r5,zero,10003cd8 <udivmodsi4+0x30>
10003cc4:	294b883a 	add	r5,r5,r5
10003cc8:	10bfffc4 	addi	r2,r2,-1
10003ccc:	18c7883a 	add	r3,r3,r3
10003cd0:	293ffa36 	bltu	r5,r4,10003cbc <__alt_data_end+0xf8003cbc>
10003cd4:	18000b26 	beq	r3,zero,10003d04 <udivmodsi4+0x5c>
10003cd8:	0005883a 	mov	r2,zero
10003cdc:	21400236 	bltu	r4,r5,10003ce8 <udivmodsi4+0x40>
10003ce0:	2149c83a 	sub	r4,r4,r5
10003ce4:	10c4b03a 	or	r2,r2,r3
10003ce8:	1806d07a 	srli	r3,r3,1
10003cec:	280ad07a 	srli	r5,r5,1
10003cf0:	183ffa1e 	bne	r3,zero,10003cdc <__alt_data_end+0xf8003cdc>
10003cf4:	3000011e 	bne	r6,zero,10003cfc <udivmodsi4+0x54>
10003cf8:	f800283a 	ret
10003cfc:	2005883a 	mov	r2,r4
10003d00:	f800283a 	ret
10003d04:	0005883a 	mov	r2,zero
10003d08:	003ffa06 	br	10003cf4 <__alt_data_end+0xf8003cf4>
10003d0c:	00c00044 	movi	r3,1
10003d10:	003ff106 	br	10003cd8 <__alt_data_end+0xf8003cd8>

10003d14 <__divsi3>:
10003d14:	defffe04 	addi	sp,sp,-8
10003d18:	dfc00115 	stw	ra,4(sp)
10003d1c:	dc000015 	stw	r16,0(sp)
10003d20:	20000b16 	blt	r4,zero,10003d50 <__divsi3+0x3c>
10003d24:	0021883a 	mov	r16,zero
10003d28:	28000c16 	blt	r5,zero,10003d5c <__divsi3+0x48>
10003d2c:	000d883a 	mov	r6,zero
10003d30:	0003ca80 	call	10003ca8 <udivmodsi4>
10003d34:	0407c83a 	sub	r3,zero,r16
10003d38:	1884f03a 	xor	r2,r3,r2
10003d3c:	1405883a 	add	r2,r2,r16
10003d40:	dfc00117 	ldw	ra,4(sp)
10003d44:	dc000017 	ldw	r16,0(sp)
10003d48:	dec00204 	addi	sp,sp,8
10003d4c:	f800283a 	ret
10003d50:	0109c83a 	sub	r4,zero,r4
10003d54:	04000044 	movi	r16,1
10003d58:	283ff40e 	bge	r5,zero,10003d2c <__alt_data_end+0xf8003d2c>
10003d5c:	014bc83a 	sub	r5,zero,r5
10003d60:	8400005c 	xori	r16,r16,1
10003d64:	003ff106 	br	10003d2c <__alt_data_end+0xf8003d2c>

10003d68 <__modsi3>:
10003d68:	defffd04 	addi	sp,sp,-12
10003d6c:	dfc00215 	stw	ra,8(sp)
10003d70:	dc400115 	stw	r17,4(sp)
10003d74:	dc000015 	stw	r16,0(sp)
10003d78:	20000c16 	blt	r4,zero,10003dac <__modsi3+0x44>
10003d7c:	0023883a 	mov	r17,zero
10003d80:	0021883a 	mov	r16,zero
10003d84:	28000d16 	blt	r5,zero,10003dbc <__modsi3+0x54>
10003d88:	01800044 	movi	r6,1
10003d8c:	0003ca80 	call	10003ca8 <udivmodsi4>
10003d90:	1404f03a 	xor	r2,r2,r16
10003d94:	8885883a 	add	r2,r17,r2
10003d98:	dfc00217 	ldw	ra,8(sp)
10003d9c:	dc400117 	ldw	r17,4(sp)
10003da0:	dc000017 	ldw	r16,0(sp)
10003da4:	dec00304 	addi	sp,sp,12
10003da8:	f800283a 	ret
10003dac:	0109c83a 	sub	r4,zero,r4
10003db0:	04400044 	movi	r17,1
10003db4:	043fffc4 	movi	r16,-1
10003db8:	283ff30e 	bge	r5,zero,10003d88 <__alt_data_end+0xf8003d88>
10003dbc:	014bc83a 	sub	r5,zero,r5
10003dc0:	003ff106 	br	10003d88 <__alt_data_end+0xf8003d88>

10003dc4 <__udivsi3>:
10003dc4:	000d883a 	mov	r6,zero
10003dc8:	0003ca81 	jmpi	10003ca8 <udivmodsi4>

10003dcc <__umodsi3>:
10003dcc:	01800044 	movi	r6,1
10003dd0:	0003ca81 	jmpi	10003ca8 <udivmodsi4>

10003dd4 <__mulsi3>:
10003dd4:	0005883a 	mov	r2,zero
10003dd8:	20000726 	beq	r4,zero,10003df8 <__mulsi3+0x24>
10003ddc:	20c0004c 	andi	r3,r4,1
10003de0:	2008d07a 	srli	r4,r4,1
10003de4:	18000126 	beq	r3,zero,10003dec <__mulsi3+0x18>
10003de8:	1145883a 	add	r2,r2,r5
10003dec:	294b883a 	add	r5,r5,r5
10003df0:	203ffa1e 	bne	r4,zero,10003ddc <__alt_data_end+0xf8003ddc>
10003df4:	f800283a 	ret
10003df8:	f800283a 	ret

10003dfc <__adddf3>:
10003dfc:	02000434 	movhi	r8,16
10003e00:	423fffc4 	addi	r8,r8,-1
10003e04:	defffb04 	addi	sp,sp,-20
10003e08:	2a12703a 	and	r9,r5,r8
10003e0c:	2806d7fa 	srli	r3,r5,31
10003e10:	3a10703a 	and	r8,r7,r8
10003e14:	3804d53a 	srli	r2,r7,20
10003e18:	3014d77a 	srli	r10,r6,29
10003e1c:	dc000015 	stw	r16,0(sp)
10003e20:	481290fa 	slli	r9,r9,3
10003e24:	2820d53a 	srli	r16,r5,20
10003e28:	401090fa 	slli	r8,r8,3
10003e2c:	200ad77a 	srli	r5,r4,29
10003e30:	380ed7fa 	srli	r7,r7,31
10003e34:	dc800215 	stw	r18,8(sp)
10003e38:	dc400115 	stw	r17,4(sp)
10003e3c:	dfc00415 	stw	ra,16(sp)
10003e40:	dcc00315 	stw	r19,12(sp)
10003e44:	1c803fcc 	andi	r18,r3,255
10003e48:	8401ffcc 	andi	r16,r16,2047
10003e4c:	494ab03a 	or	r5,r9,r5
10003e50:	202290fa 	slli	r17,r4,3
10003e54:	1081ffcc 	andi	r2,r2,2047
10003e58:	4290b03a 	or	r8,r8,r10
10003e5c:	300c90fa 	slli	r6,r6,3
10003e60:	91c07026 	beq	r18,r7,10004024 <__adddf3+0x228>
10003e64:	8087c83a 	sub	r3,r16,r2
10003e68:	00c0b30e 	bge	zero,r3,10004138 <__adddf3+0x33c>
10003e6c:	10002a1e 	bne	r2,zero,10003f18 <__adddf3+0x11c>
10003e70:	4184b03a 	or	r2,r8,r6
10003e74:	1000991e 	bne	r2,zero,100040dc <__adddf3+0x2e0>
10003e78:	888001cc 	andi	r2,r17,7
10003e7c:	10005b26 	beq	r2,zero,10003fec <__adddf3+0x1f0>
10003e80:	88c003cc 	andi	r3,r17,15
10003e84:	00800104 	movi	r2,4
10003e88:	18805826 	beq	r3,r2,10003fec <__adddf3+0x1f0>
10003e8c:	89800104 	addi	r6,r17,4
10003e90:	3463803a 	cmpltu	r17,r6,r17
10003e94:	2c4b883a 	add	r5,r5,r17
10003e98:	2880202c 	andhi	r2,r5,128
10003e9c:	9007883a 	mov	r3,r18
10003ea0:	3023883a 	mov	r17,r6
10003ea4:	10005426 	beq	r2,zero,10003ff8 <__adddf3+0x1fc>
10003ea8:	84000044 	addi	r16,r16,1
10003eac:	0081ffc4 	movi	r2,2047
10003eb0:	8080c126 	beq	r16,r2,100041b8 <__adddf3+0x3bc>
10003eb4:	013fe034 	movhi	r4,65408
10003eb8:	213fffc4 	addi	r4,r4,-1
10003ebc:	290a703a 	and	r5,r5,r4
10003ec0:	2804977a 	slli	r2,r5,29
10003ec4:	280a927a 	slli	r5,r5,9
10003ec8:	8822d0fa 	srli	r17,r17,3
10003ecc:	8401ffcc 	andi	r16,r16,2047
10003ed0:	2808d33a 	srli	r4,r5,12
10003ed4:	1444b03a 	or	r2,r2,r17
10003ed8:	8401ffcc 	andi	r16,r16,2047
10003edc:	800a953a 	slli	r5,r16,20
10003ee0:	18c03fcc 	andi	r3,r3,255
10003ee4:	04000434 	movhi	r16,16
10003ee8:	180697fa 	slli	r3,r3,31
10003eec:	843fffc4 	addi	r16,r16,-1
10003ef0:	2420703a 	and	r16,r4,r16
10003ef4:	8160b03a 	or	r16,r16,r5
10003ef8:	80c6b03a 	or	r3,r16,r3
10003efc:	dfc00417 	ldw	ra,16(sp)
10003f00:	dcc00317 	ldw	r19,12(sp)
10003f04:	dc800217 	ldw	r18,8(sp)
10003f08:	dc400117 	ldw	r17,4(sp)
10003f0c:	dc000017 	ldw	r16,0(sp)
10003f10:	dec00504 	addi	sp,sp,20
10003f14:	f800283a 	ret
10003f18:	0081ffc4 	movi	r2,2047
10003f1c:	80bfd626 	beq	r16,r2,10003e78 <__alt_data_end+0xf8003e78>
10003f20:	42002034 	orhi	r8,r8,128
10003f24:	00800e04 	movi	r2,56
10003f28:	10c0a616 	blt	r2,r3,100041c4 <__adddf3+0x3c8>
10003f2c:	008007c4 	movi	r2,31
10003f30:	10c0c916 	blt	r2,r3,10004258 <__adddf3+0x45c>
10003f34:	00800804 	movi	r2,32
10003f38:	10c5c83a 	sub	r2,r2,r3
10003f3c:	408e983a 	sll	r7,r8,r2
10003f40:	30c8d83a 	srl	r4,r6,r3
10003f44:	3084983a 	sll	r2,r6,r2
10003f48:	40c6d83a 	srl	r3,r8,r3
10003f4c:	390cb03a 	or	r6,r7,r4
10003f50:	1004c03a 	cmpne	r2,r2,zero
10003f54:	308cb03a 	or	r6,r6,r2
10003f58:	898dc83a 	sub	r6,r17,r6
10003f5c:	89a3803a 	cmpltu	r17,r17,r6
10003f60:	28cbc83a 	sub	r5,r5,r3
10003f64:	2c4bc83a 	sub	r5,r5,r17
10003f68:	3023883a 	mov	r17,r6
10003f6c:	2880202c 	andhi	r2,r5,128
10003f70:	10006d26 	beq	r2,zero,10004128 <__adddf3+0x32c>
10003f74:	04c02034 	movhi	r19,128
10003f78:	9cffffc4 	addi	r19,r19,-1
10003f7c:	2ce6703a 	and	r19,r5,r19
10003f80:	98007e26 	beq	r19,zero,1000417c <__adddf3+0x380>
10003f84:	9809883a 	mov	r4,r19
10003f88:	00065940 	call	10006594 <__clzsi2>
10003f8c:	10fffe04 	addi	r3,r2,-8
10003f90:	010007c4 	movi	r4,31
10003f94:	20c07f16 	blt	r4,r3,10004194 <__adddf3+0x398>
10003f98:	01400a04 	movi	r5,40
10003f9c:	2885c83a 	sub	r2,r5,r2
10003fa0:	888ad83a 	srl	r5,r17,r2
10003fa4:	98e6983a 	sll	r19,r19,r3
10003fa8:	88e2983a 	sll	r17,r17,r3
10003fac:	2ce6b03a 	or	r19,r5,r19
10003fb0:	1c007c16 	blt	r3,r16,100041a4 <__adddf3+0x3a8>
10003fb4:	1c21c83a 	sub	r16,r3,r16
10003fb8:	81400044 	addi	r5,r16,1
10003fbc:	00c007c4 	movi	r3,31
10003fc0:	19409816 	blt	r3,r5,10004224 <__adddf3+0x428>
10003fc4:	1c21c83a 	sub	r16,r3,r16
10003fc8:	8c08983a 	sll	r4,r17,r16
10003fcc:	8946d83a 	srl	r3,r17,r5
10003fd0:	9c20983a 	sll	r16,r19,r16
10003fd4:	2008c03a 	cmpne	r4,r4,zero
10003fd8:	994ad83a 	srl	r5,r19,r5
10003fdc:	1c06b03a 	or	r3,r3,r16
10003fe0:	1922b03a 	or	r17,r3,r4
10003fe4:	0021883a 	mov	r16,zero
10003fe8:	003fa306 	br	10003e78 <__alt_data_end+0xf8003e78>
10003fec:	2880202c 	andhi	r2,r5,128
10003ff0:	9007883a 	mov	r3,r18
10003ff4:	103fac1e 	bne	r2,zero,10003ea8 <__alt_data_end+0xf8003ea8>
10003ff8:	2804977a 	slli	r2,r5,29
10003ffc:	8822d0fa 	srli	r17,r17,3
10004000:	0101ffc4 	movi	r4,2047
10004004:	280ad0fa 	srli	r5,r5,3
10004008:	1444b03a 	or	r2,r2,r17
1000400c:	81002c26 	beq	r16,r4,100040c0 <__adddf3+0x2c4>
10004010:	8120703a 	and	r16,r16,r4
10004014:	01000434 	movhi	r4,16
10004018:	213fffc4 	addi	r4,r4,-1
1000401c:	2908703a 	and	r4,r5,r4
10004020:	003fad06 	br	10003ed8 <__alt_data_end+0xf8003ed8>
10004024:	8089c83a 	sub	r4,r16,r2
10004028:	01006a0e 	bge	zero,r4,100041d4 <__adddf3+0x3d8>
1000402c:	10003326 	beq	r2,zero,100040fc <__adddf3+0x300>
10004030:	0081ffc4 	movi	r2,2047
10004034:	80bf9026 	beq	r16,r2,10003e78 <__alt_data_end+0xf8003e78>
10004038:	42002034 	orhi	r8,r8,128
1000403c:	00800e04 	movi	r2,56
10004040:	1100b116 	blt	r2,r4,10004308 <__adddf3+0x50c>
10004044:	008007c4 	movi	r2,31
10004048:	1100e216 	blt	r2,r4,100043d4 <__adddf3+0x5d8>
1000404c:	00800804 	movi	r2,32
10004050:	1105c83a 	sub	r2,r2,r4
10004054:	4092983a 	sll	r9,r8,r2
10004058:	310ed83a 	srl	r7,r6,r4
1000405c:	3084983a 	sll	r2,r6,r2
10004060:	4110d83a 	srl	r8,r8,r4
10004064:	49ccb03a 	or	r6,r9,r7
10004068:	1004c03a 	cmpne	r2,r2,zero
1000406c:	308cb03a 	or	r6,r6,r2
10004070:	344d883a 	add	r6,r6,r17
10004074:	3463803a 	cmpltu	r17,r6,r17
10004078:	414b883a 	add	r5,r8,r5
1000407c:	2c4b883a 	add	r5,r5,r17
10004080:	3023883a 	mov	r17,r6
10004084:	2880202c 	andhi	r2,r5,128
10004088:	10002726 	beq	r2,zero,10004128 <__adddf3+0x32c>
1000408c:	84000044 	addi	r16,r16,1
10004090:	0081ffc4 	movi	r2,2047
10004094:	8080ae26 	beq	r16,r2,10004350 <__adddf3+0x554>
10004098:	00bfe034 	movhi	r2,65408
1000409c:	10bfffc4 	addi	r2,r2,-1
100040a0:	288a703a 	and	r5,r5,r2
100040a4:	880cd07a 	srli	r6,r17,1
100040a8:	280897fa 	slli	r4,r5,31
100040ac:	88c0004c 	andi	r3,r17,1
100040b0:	30e2b03a 	or	r17,r6,r3
100040b4:	280ad07a 	srli	r5,r5,1
100040b8:	8922b03a 	or	r17,r17,r4
100040bc:	003f6e06 	br	10003e78 <__alt_data_end+0xf8003e78>
100040c0:	1148b03a 	or	r4,r2,r5
100040c4:	20003c26 	beq	r4,zero,100041b8 <__adddf3+0x3bc>
100040c8:	29000234 	orhi	r4,r5,8
100040cc:	01400434 	movhi	r5,16
100040d0:	297fffc4 	addi	r5,r5,-1
100040d4:	2148703a 	and	r4,r4,r5
100040d8:	003f7f06 	br	10003ed8 <__alt_data_end+0xf8003ed8>
100040dc:	18ffffc4 	addi	r3,r3,-1
100040e0:	18004d1e 	bne	r3,zero,10004218 <__adddf3+0x41c>
100040e4:	898dc83a 	sub	r6,r17,r6
100040e8:	89a3803a 	cmpltu	r17,r17,r6
100040ec:	2a0bc83a 	sub	r5,r5,r8
100040f0:	2c4bc83a 	sub	r5,r5,r17
100040f4:	3023883a 	mov	r17,r6
100040f8:	003f9c06 	br	10003f6c <__alt_data_end+0xf8003f6c>
100040fc:	4184b03a 	or	r2,r8,r6
10004100:	103f5d26 	beq	r2,zero,10003e78 <__alt_data_end+0xf8003e78>
10004104:	213fffc4 	addi	r4,r4,-1
10004108:	203fd926 	beq	r4,zero,10004070 <__alt_data_end+0xf8004070>
1000410c:	0081ffc4 	movi	r2,2047
10004110:	80bfca1e 	bne	r16,r2,1000403c <__alt_data_end+0xf800403c>
10004114:	003f5806 	br	10003e78 <__alt_data_end+0xf8003e78>
10004118:	10c8b03a 	or	r4,r2,r3
1000411c:	20008b26 	beq	r4,zero,1000434c <__adddf3+0x550>
10004120:	100b883a 	mov	r5,r2
10004124:	1823883a 	mov	r17,r3
10004128:	888001cc 	andi	r2,r17,7
1000412c:	103f541e 	bne	r2,zero,10003e80 <__alt_data_end+0xf8003e80>
10004130:	9007883a 	mov	r3,r18
10004134:	003fb006 	br	10003ff8 <__alt_data_end+0xf8003ff8>
10004138:	1800531e 	bne	r3,zero,10004288 <__adddf3+0x48c>
1000413c:	80800044 	addi	r2,r16,1
10004140:	1081ffcc 	andi	r2,r2,2047
10004144:	00c00044 	movi	r3,1
10004148:	1880990e 	bge	r3,r2,100043b0 <__adddf3+0x5b4>
1000414c:	8985c83a 	sub	r2,r17,r6
10004150:	8887803a 	cmpltu	r3,r17,r2
10004154:	2a27c83a 	sub	r19,r5,r8
10004158:	98e7c83a 	sub	r19,r19,r3
1000415c:	98c0202c 	andhi	r3,r19,128
10004160:	18006226 	beq	r3,zero,100042ec <__adddf3+0x4f0>
10004164:	3463c83a 	sub	r17,r6,r17
10004168:	4151c83a 	sub	r8,r8,r5
1000416c:	344d803a 	cmpltu	r6,r6,r17
10004170:	41a7c83a 	sub	r19,r8,r6
10004174:	3825883a 	mov	r18,r7
10004178:	983f821e 	bne	r19,zero,10003f84 <__alt_data_end+0xf8003f84>
1000417c:	8809883a 	mov	r4,r17
10004180:	00065940 	call	10006594 <__clzsi2>
10004184:	10800804 	addi	r2,r2,32
10004188:	10fffe04 	addi	r3,r2,-8
1000418c:	010007c4 	movi	r4,31
10004190:	20ff810e 	bge	r4,r3,10003f98 <__alt_data_end+0xf8003f98>
10004194:	14fff604 	addi	r19,r2,-40
10004198:	8ce6983a 	sll	r19,r17,r19
1000419c:	0023883a 	mov	r17,zero
100041a0:	1c3f840e 	bge	r3,r16,10003fb4 <__alt_data_end+0xf8003fb4>
100041a4:	017fe034 	movhi	r5,65408
100041a8:	297fffc4 	addi	r5,r5,-1
100041ac:	80e1c83a 	sub	r16,r16,r3
100041b0:	994a703a 	and	r5,r19,r5
100041b4:	003f3006 	br	10003e78 <__alt_data_end+0xf8003e78>
100041b8:	0009883a 	mov	r4,zero
100041bc:	0005883a 	mov	r2,zero
100041c0:	003f4506 	br	10003ed8 <__alt_data_end+0xf8003ed8>
100041c4:	418cb03a 	or	r6,r8,r6
100041c8:	300cc03a 	cmpne	r6,r6,zero
100041cc:	0007883a 	mov	r3,zero
100041d0:	003f6106 	br	10003f58 <__alt_data_end+0xf8003f58>
100041d4:	2000921e 	bne	r4,zero,10004420 <__adddf3+0x624>
100041d8:	80800044 	addi	r2,r16,1
100041dc:	11c1ffcc 	andi	r7,r2,2047
100041e0:	01000044 	movi	r4,1
100041e4:	21c0610e 	bge	r4,r7,1000436c <__adddf3+0x570>
100041e8:	0101ffc4 	movi	r4,2047
100041ec:	1100a326 	beq	r2,r4,1000447c <__adddf3+0x680>
100041f0:	344d883a 	add	r6,r6,r17
100041f4:	3463803a 	cmpltu	r17,r6,r17
100041f8:	414b883a 	add	r5,r8,r5
100041fc:	2c4b883a 	add	r5,r5,r17
10004200:	282297fa 	slli	r17,r5,31
10004204:	300cd07a 	srli	r6,r6,1
10004208:	280ad07a 	srli	r5,r5,1
1000420c:	1021883a 	mov	r16,r2
10004210:	89a2b03a 	or	r17,r17,r6
10004214:	003f1806 	br	10003e78 <__alt_data_end+0xf8003e78>
10004218:	0081ffc4 	movi	r2,2047
1000421c:	80bf411e 	bne	r16,r2,10003f24 <__alt_data_end+0xf8003f24>
10004220:	003f1506 	br	10003e78 <__alt_data_end+0xf8003e78>
10004224:	80bff844 	addi	r2,r16,-31
10004228:	00c00804 	movi	r3,32
1000422c:	9884d83a 	srl	r2,r19,r2
10004230:	28c04a26 	beq	r5,r3,1000435c <__adddf3+0x560>
10004234:	00c00fc4 	movi	r3,63
10004238:	1c21c83a 	sub	r16,r3,r16
1000423c:	9c26983a 	sll	r19,r19,r16
10004240:	9c62b03a 	or	r17,r19,r17
10004244:	8822c03a 	cmpne	r17,r17,zero
10004248:	88a2b03a 	or	r17,r17,r2
1000424c:	000b883a 	mov	r5,zero
10004250:	0021883a 	mov	r16,zero
10004254:	003fb406 	br	10004128 <__alt_data_end+0xf8004128>
10004258:	18bff804 	addi	r2,r3,-32
1000425c:	01000804 	movi	r4,32
10004260:	4084d83a 	srl	r2,r8,r2
10004264:	19003f26 	beq	r3,r4,10004364 <__adddf3+0x568>
10004268:	01001004 	movi	r4,64
1000426c:	20c7c83a 	sub	r3,r4,r3
10004270:	40d0983a 	sll	r8,r8,r3
10004274:	418cb03a 	or	r6,r8,r6
10004278:	300cc03a 	cmpne	r6,r6,zero
1000427c:	308cb03a 	or	r6,r6,r2
10004280:	0007883a 	mov	r3,zero
10004284:	003f3406 	br	10003f58 <__alt_data_end+0xf8003f58>
10004288:	80002326 	beq	r16,zero,10004318 <__adddf3+0x51c>
1000428c:	0101ffc4 	movi	r4,2047
10004290:	11005e26 	beq	r2,r4,1000440c <__adddf3+0x610>
10004294:	00c7c83a 	sub	r3,zero,r3
10004298:	29402034 	orhi	r5,r5,128
1000429c:	01000e04 	movi	r4,56
100042a0:	20c07216 	blt	r4,r3,1000446c <__adddf3+0x670>
100042a4:	010007c4 	movi	r4,31
100042a8:	20c0ce16 	blt	r4,r3,100045e4 <__adddf3+0x7e8>
100042ac:	01000804 	movi	r4,32
100042b0:	20c9c83a 	sub	r4,r4,r3
100042b4:	2914983a 	sll	r10,r5,r4
100042b8:	88d2d83a 	srl	r9,r17,r3
100042bc:	8908983a 	sll	r4,r17,r4
100042c0:	28c6d83a 	srl	r3,r5,r3
100042c4:	5262b03a 	or	r17,r10,r9
100042c8:	2008c03a 	cmpne	r4,r4,zero
100042cc:	8922b03a 	or	r17,r17,r4
100042d0:	3463c83a 	sub	r17,r6,r17
100042d4:	40c7c83a 	sub	r3,r8,r3
100042d8:	344d803a 	cmpltu	r6,r6,r17
100042dc:	198bc83a 	sub	r5,r3,r6
100042e0:	1021883a 	mov	r16,r2
100042e4:	3825883a 	mov	r18,r7
100042e8:	003f2006 	br	10003f6c <__alt_data_end+0xf8003f6c>
100042ec:	9886b03a 	or	r3,r19,r2
100042f0:	1800141e 	bne	r3,zero,10004344 <__adddf3+0x548>
100042f4:	0007883a 	mov	r3,zero
100042f8:	000b883a 	mov	r5,zero
100042fc:	0023883a 	mov	r17,zero
10004300:	0021883a 	mov	r16,zero
10004304:	003f3c06 	br	10003ff8 <__alt_data_end+0xf8003ff8>
10004308:	418cb03a 	or	r6,r8,r6
1000430c:	300cc03a 	cmpne	r6,r6,zero
10004310:	0011883a 	mov	r8,zero
10004314:	003f5606 	br	10004070 <__alt_data_end+0xf8004070>
10004318:	2c48b03a 	or	r4,r5,r17
1000431c:	20003b26 	beq	r4,zero,1000440c <__adddf3+0x610>
10004320:	00c6303a 	nor	r3,zero,r3
10004324:	1800371e 	bne	r3,zero,10004404 <__adddf3+0x608>
10004328:	3463c83a 	sub	r17,r6,r17
1000432c:	414bc83a 	sub	r5,r8,r5
10004330:	344d803a 	cmpltu	r6,r6,r17
10004334:	298bc83a 	sub	r5,r5,r6
10004338:	1021883a 	mov	r16,r2
1000433c:	3825883a 	mov	r18,r7
10004340:	003f0a06 	br	10003f6c <__alt_data_end+0xf8003f6c>
10004344:	1023883a 	mov	r17,r2
10004348:	003f0d06 	br	10003f80 <__alt_data_end+0xf8003f80>
1000434c:	0007883a 	mov	r3,zero
10004350:	000b883a 	mov	r5,zero
10004354:	0023883a 	mov	r17,zero
10004358:	003f2706 	br	10003ff8 <__alt_data_end+0xf8003ff8>
1000435c:	0027883a 	mov	r19,zero
10004360:	003fb706 	br	10004240 <__alt_data_end+0xf8004240>
10004364:	0011883a 	mov	r8,zero
10004368:	003fc206 	br	10004274 <__alt_data_end+0xf8004274>
1000436c:	2c44b03a 	or	r2,r5,r17
10004370:	8000871e 	bne	r16,zero,10004590 <__adddf3+0x794>
10004374:	1000b126 	beq	r2,zero,1000463c <__adddf3+0x840>
10004378:	4184b03a 	or	r2,r8,r6
1000437c:	103ebe26 	beq	r2,zero,10003e78 <__alt_data_end+0xf8003e78>
10004380:	3445883a 	add	r2,r6,r17
10004384:	1463803a 	cmpltu	r17,r2,r17
10004388:	414b883a 	add	r5,r8,r5
1000438c:	2c4b883a 	add	r5,r5,r17
10004390:	28c0202c 	andhi	r3,r5,128
10004394:	1023883a 	mov	r17,r2
10004398:	183f6326 	beq	r3,zero,10004128 <__alt_data_end+0xf8004128>
1000439c:	00bfe034 	movhi	r2,65408
100043a0:	10bfffc4 	addi	r2,r2,-1
100043a4:	2021883a 	mov	r16,r4
100043a8:	288a703a 	and	r5,r5,r2
100043ac:	003eb206 	br	10003e78 <__alt_data_end+0xf8003e78>
100043b0:	2c44b03a 	or	r2,r5,r17
100043b4:	8000251e 	bne	r16,zero,1000444c <__adddf3+0x650>
100043b8:	10004b1e 	bne	r2,zero,100044e8 <__adddf3+0x6ec>
100043bc:	4184b03a 	or	r2,r8,r6
100043c0:	103fe226 	beq	r2,zero,1000434c <__alt_data_end+0xf800434c>
100043c4:	400b883a 	mov	r5,r8
100043c8:	3023883a 	mov	r17,r6
100043cc:	3825883a 	mov	r18,r7
100043d0:	003ea906 	br	10003e78 <__alt_data_end+0xf8003e78>
100043d4:	20bff804 	addi	r2,r4,-32
100043d8:	01c00804 	movi	r7,32
100043dc:	4084d83a 	srl	r2,r8,r2
100043e0:	21c07e26 	beq	r4,r7,100045dc <__adddf3+0x7e0>
100043e4:	01c01004 	movi	r7,64
100043e8:	3909c83a 	sub	r4,r7,r4
100043ec:	4110983a 	sll	r8,r8,r4
100043f0:	418cb03a 	or	r6,r8,r6
100043f4:	300cc03a 	cmpne	r6,r6,zero
100043f8:	308cb03a 	or	r6,r6,r2
100043fc:	0011883a 	mov	r8,zero
10004400:	003f1b06 	br	10004070 <__alt_data_end+0xf8004070>
10004404:	0101ffc4 	movi	r4,2047
10004408:	113fa41e 	bne	r2,r4,1000429c <__alt_data_end+0xf800429c>
1000440c:	400b883a 	mov	r5,r8
10004410:	3023883a 	mov	r17,r6
10004414:	1021883a 	mov	r16,r2
10004418:	3825883a 	mov	r18,r7
1000441c:	003e9606 	br	10003e78 <__alt_data_end+0xf8003e78>
10004420:	80001a1e 	bne	r16,zero,1000448c <__adddf3+0x690>
10004424:	2c4eb03a 	or	r7,r5,r17
10004428:	38005526 	beq	r7,zero,10004580 <__adddf3+0x784>
1000442c:	0108303a 	nor	r4,zero,r4
10004430:	2000511e 	bne	r4,zero,10004578 <__adddf3+0x77c>
10004434:	89a3883a 	add	r17,r17,r6
10004438:	414b883a 	add	r5,r8,r5
1000443c:	898d803a 	cmpltu	r6,r17,r6
10004440:	298b883a 	add	r5,r5,r6
10004444:	1021883a 	mov	r16,r2
10004448:	003f0e06 	br	10004084 <__alt_data_end+0xf8004084>
1000444c:	1000341e 	bne	r2,zero,10004520 <__adddf3+0x724>
10004450:	4184b03a 	or	r2,r8,r6
10004454:	10006f26 	beq	r2,zero,10004614 <__adddf3+0x818>
10004458:	400b883a 	mov	r5,r8
1000445c:	3023883a 	mov	r17,r6
10004460:	3825883a 	mov	r18,r7
10004464:	0401ffc4 	movi	r16,2047
10004468:	003e8306 	br	10003e78 <__alt_data_end+0xf8003e78>
1000446c:	2c62b03a 	or	r17,r5,r17
10004470:	8822c03a 	cmpne	r17,r17,zero
10004474:	0007883a 	mov	r3,zero
10004478:	003f9506 	br	100042d0 <__alt_data_end+0xf80042d0>
1000447c:	1021883a 	mov	r16,r2
10004480:	000b883a 	mov	r5,zero
10004484:	0023883a 	mov	r17,zero
10004488:	003edb06 	br	10003ff8 <__alt_data_end+0xf8003ff8>
1000448c:	01c1ffc4 	movi	r7,2047
10004490:	11c03b26 	beq	r2,r7,10004580 <__adddf3+0x784>
10004494:	0109c83a 	sub	r4,zero,r4
10004498:	29402034 	orhi	r5,r5,128
1000449c:	01c00e04 	movi	r7,56
100044a0:	39006216 	blt	r7,r4,1000462c <__adddf3+0x830>
100044a4:	01c007c4 	movi	r7,31
100044a8:	39006b16 	blt	r7,r4,10004658 <__adddf3+0x85c>
100044ac:	01c00804 	movi	r7,32
100044b0:	390fc83a 	sub	r7,r7,r4
100044b4:	29d4983a 	sll	r10,r5,r7
100044b8:	8912d83a 	srl	r9,r17,r4
100044bc:	89ce983a 	sll	r7,r17,r7
100044c0:	2908d83a 	srl	r4,r5,r4
100044c4:	5262b03a 	or	r17,r10,r9
100044c8:	380ac03a 	cmpne	r5,r7,zero
100044cc:	8962b03a 	or	r17,r17,r5
100044d0:	89a3883a 	add	r17,r17,r6
100044d4:	2211883a 	add	r8,r4,r8
100044d8:	898d803a 	cmpltu	r6,r17,r6
100044dc:	418b883a 	add	r5,r8,r6
100044e0:	1021883a 	mov	r16,r2
100044e4:	003ee706 	br	10004084 <__alt_data_end+0xf8004084>
100044e8:	4184b03a 	or	r2,r8,r6
100044ec:	103e6226 	beq	r2,zero,10003e78 <__alt_data_end+0xf8003e78>
100044f0:	8987c83a 	sub	r3,r17,r6
100044f4:	88c9803a 	cmpltu	r4,r17,r3
100044f8:	2a05c83a 	sub	r2,r5,r8
100044fc:	1105c83a 	sub	r2,r2,r4
10004500:	1100202c 	andhi	r4,r2,128
10004504:	203f0426 	beq	r4,zero,10004118 <__alt_data_end+0xf8004118>
10004508:	3463c83a 	sub	r17,r6,r17
1000450c:	414bc83a 	sub	r5,r8,r5
10004510:	344d803a 	cmpltu	r6,r6,r17
10004514:	298bc83a 	sub	r5,r5,r6
10004518:	3825883a 	mov	r18,r7
1000451c:	003e5606 	br	10003e78 <__alt_data_end+0xf8003e78>
10004520:	4184b03a 	or	r2,r8,r6
10004524:	10002b26 	beq	r2,zero,100045d4 <__adddf3+0x7d8>
10004528:	2804d0fa 	srli	r2,r5,3
1000452c:	8822d0fa 	srli	r17,r17,3
10004530:	280a977a 	slli	r5,r5,29
10004534:	10c0022c 	andhi	r3,r2,8
10004538:	2c62b03a 	or	r17,r5,r17
1000453c:	18000826 	beq	r3,zero,10004560 <__adddf3+0x764>
10004540:	4008d0fa 	srli	r4,r8,3
10004544:	20c0022c 	andhi	r3,r4,8
10004548:	1800051e 	bne	r3,zero,10004560 <__adddf3+0x764>
1000454c:	300cd0fa 	srli	r6,r6,3
10004550:	4010977a 	slli	r8,r8,29
10004554:	2005883a 	mov	r2,r4
10004558:	3825883a 	mov	r18,r7
1000455c:	41a2b03a 	or	r17,r8,r6
10004560:	880ad77a 	srli	r5,r17,29
10004564:	100490fa 	slli	r2,r2,3
10004568:	882290fa 	slli	r17,r17,3
1000456c:	0401ffc4 	movi	r16,2047
10004570:	288ab03a 	or	r5,r5,r2
10004574:	003e4006 	br	10003e78 <__alt_data_end+0xf8003e78>
10004578:	01c1ffc4 	movi	r7,2047
1000457c:	11ffc71e 	bne	r2,r7,1000449c <__alt_data_end+0xf800449c>
10004580:	400b883a 	mov	r5,r8
10004584:	3023883a 	mov	r17,r6
10004588:	1021883a 	mov	r16,r2
1000458c:	003e3a06 	br	10003e78 <__alt_data_end+0xf8003e78>
10004590:	10002d26 	beq	r2,zero,10004648 <__adddf3+0x84c>
10004594:	4184b03a 	or	r2,r8,r6
10004598:	10000e26 	beq	r2,zero,100045d4 <__adddf3+0x7d8>
1000459c:	2804d0fa 	srli	r2,r5,3
100045a0:	8822d0fa 	srli	r17,r17,3
100045a4:	280a977a 	slli	r5,r5,29
100045a8:	10c0022c 	andhi	r3,r2,8
100045ac:	2c62b03a 	or	r17,r5,r17
100045b0:	183feb26 	beq	r3,zero,10004560 <__alt_data_end+0xf8004560>
100045b4:	4008d0fa 	srli	r4,r8,3
100045b8:	20c0022c 	andhi	r3,r4,8
100045bc:	183fe81e 	bne	r3,zero,10004560 <__alt_data_end+0xf8004560>
100045c0:	300cd0fa 	srli	r6,r6,3
100045c4:	4010977a 	slli	r8,r8,29
100045c8:	2005883a 	mov	r2,r4
100045cc:	41a2b03a 	or	r17,r8,r6
100045d0:	003fe306 	br	10004560 <__alt_data_end+0xf8004560>
100045d4:	0401ffc4 	movi	r16,2047
100045d8:	003e2706 	br	10003e78 <__alt_data_end+0xf8003e78>
100045dc:	0011883a 	mov	r8,zero
100045e0:	003f8306 	br	100043f0 <__alt_data_end+0xf80043f0>
100045e4:	193ff804 	addi	r4,r3,-32
100045e8:	02400804 	movi	r9,32
100045ec:	2908d83a 	srl	r4,r5,r4
100045f0:	1a402526 	beq	r3,r9,10004688 <__adddf3+0x88c>
100045f4:	02401004 	movi	r9,64
100045f8:	48c7c83a 	sub	r3,r9,r3
100045fc:	28ca983a 	sll	r5,r5,r3
10004600:	2c62b03a 	or	r17,r5,r17
10004604:	8822c03a 	cmpne	r17,r17,zero
10004608:	8922b03a 	or	r17,r17,r4
1000460c:	0007883a 	mov	r3,zero
10004610:	003f2f06 	br	100042d0 <__alt_data_end+0xf80042d0>
10004614:	01402034 	movhi	r5,128
10004618:	0007883a 	mov	r3,zero
1000461c:	297fffc4 	addi	r5,r5,-1
10004620:	047ffe04 	movi	r17,-8
10004624:	0401ffc4 	movi	r16,2047
10004628:	003e7306 	br	10003ff8 <__alt_data_end+0xf8003ff8>
1000462c:	2c62b03a 	or	r17,r5,r17
10004630:	8822c03a 	cmpne	r17,r17,zero
10004634:	0009883a 	mov	r4,zero
10004638:	003fa506 	br	100044d0 <__alt_data_end+0xf80044d0>
1000463c:	400b883a 	mov	r5,r8
10004640:	3023883a 	mov	r17,r6
10004644:	003e0c06 	br	10003e78 <__alt_data_end+0xf8003e78>
10004648:	400b883a 	mov	r5,r8
1000464c:	3023883a 	mov	r17,r6
10004650:	0401ffc4 	movi	r16,2047
10004654:	003e0806 	br	10003e78 <__alt_data_end+0xf8003e78>
10004658:	21fff804 	addi	r7,r4,-32
1000465c:	02400804 	movi	r9,32
10004660:	29ced83a 	srl	r7,r5,r7
10004664:	22400a26 	beq	r4,r9,10004690 <__adddf3+0x894>
10004668:	02401004 	movi	r9,64
1000466c:	4909c83a 	sub	r4,r9,r4
10004670:	290a983a 	sll	r5,r5,r4
10004674:	2c62b03a 	or	r17,r5,r17
10004678:	8822c03a 	cmpne	r17,r17,zero
1000467c:	89e2b03a 	or	r17,r17,r7
10004680:	0009883a 	mov	r4,zero
10004684:	003f9206 	br	100044d0 <__alt_data_end+0xf80044d0>
10004688:	000b883a 	mov	r5,zero
1000468c:	003fdc06 	br	10004600 <__alt_data_end+0xf8004600>
10004690:	000b883a 	mov	r5,zero
10004694:	003ff706 	br	10004674 <__alt_data_end+0xf8004674>

10004698 <__divdf3>:
10004698:	defff004 	addi	sp,sp,-64
1000469c:	dc800815 	stw	r18,32(sp)
100046a0:	2824d53a 	srli	r18,r5,20
100046a4:	dd800c15 	stw	r22,48(sp)
100046a8:	282cd7fa 	srli	r22,r5,31
100046ac:	dc000615 	stw	r16,24(sp)
100046b0:	04000434 	movhi	r16,16
100046b4:	df000e15 	stw	fp,56(sp)
100046b8:	dd000a15 	stw	r20,40(sp)
100046bc:	dcc00915 	stw	r19,36(sp)
100046c0:	dc400715 	stw	r17,28(sp)
100046c4:	843fffc4 	addi	r16,r16,-1
100046c8:	dfc00f15 	stw	ra,60(sp)
100046cc:	ddc00d15 	stw	r23,52(sp)
100046d0:	dd400b15 	stw	r21,44(sp)
100046d4:	9481ffcc 	andi	r18,r18,2047
100046d8:	2029883a 	mov	r20,r4
100046dc:	2027883a 	mov	r19,r4
100046e0:	2c22703a 	and	r17,r5,r16
100046e4:	b7003fcc 	andi	fp,r22,255
100046e8:	90005e26 	beq	r18,zero,10004864 <__divdf3+0x1cc>
100046ec:	0081ffc4 	movi	r2,2047
100046f0:	90803526 	beq	r18,r2,100047c8 <__divdf3+0x130>
100046f4:	8c000434 	orhi	r16,r17,16
100046f8:	2004d77a 	srli	r2,r4,29
100046fc:	802090fa 	slli	r16,r16,3
10004700:	202690fa 	slli	r19,r4,3
10004704:	94bf0044 	addi	r18,r18,-1023
10004708:	80a2b03a 	or	r17,r16,r2
1000470c:	0029883a 	mov	r20,zero
10004710:	0011883a 	mov	r8,zero
10004714:	380ad53a 	srli	r5,r7,20
10004718:	382ed7fa 	srli	r23,r7,31
1000471c:	04000434 	movhi	r16,16
10004720:	843fffc4 	addi	r16,r16,-1
10004724:	2941ffcc 	andi	r5,r5,2047
10004728:	302b883a 	mov	r21,r6
1000472c:	3c20703a 	and	r16,r7,r16
10004730:	ba403fcc 	andi	r9,r23,255
10004734:	28006726 	beq	r5,zero,100048d4 <__divdf3+0x23c>
10004738:	0081ffc4 	movi	r2,2047
1000473c:	28805f26 	beq	r5,r2,100048bc <__divdf3+0x224>
10004740:	84000434 	orhi	r16,r16,16
10004744:	3004d77a 	srli	r2,r6,29
10004748:	802090fa 	slli	r16,r16,3
1000474c:	302a90fa 	slli	r21,r6,3
10004750:	297f0044 	addi	r5,r5,-1023
10004754:	80a0b03a 	or	r16,r16,r2
10004758:	000f883a 	mov	r7,zero
1000475c:	3d06b03a 	or	r3,r7,r20
10004760:	180690ba 	slli	r3,r3,2
10004764:	00840034 	movhi	r2,4096
10004768:	1091e204 	addi	r2,r2,18312
1000476c:	1885883a 	add	r2,r3,r2
10004770:	10800017 	ldw	r2,0(r2)
10004774:	b5c8f03a 	xor	r4,r22,r23
10004778:	200d883a 	mov	r6,r4
1000477c:	25003fcc 	andi	r20,r4,255
10004780:	9165c83a 	sub	r18,r18,r5
10004784:	1000683a 	jmp	r2
10004788:	100049d0 	cmplti	zero,r2,295
1000478c:	10004800 	call	11000480 <_gp+0xfe45d4>
10004790:	10004994 	ori	zero,r2,294
10004794:	100047e4 	muli	zero,r2,287
10004798:	10004994 	ori	zero,r2,294
1000479c:	10004968 	cmpgeui	zero,r2,293
100047a0:	10004994 	ori	zero,r2,294
100047a4:	100047e4 	muli	zero,r2,287
100047a8:	10004800 	call	11000480 <_gp+0xfe45d4>
100047ac:	10004800 	call	11000480 <_gp+0xfe45d4>
100047b0:	10004968 	cmpgeui	zero,r2,293
100047b4:	100047e4 	muli	zero,r2,287
100047b8:	100047f4 	orhi	zero,r2,287
100047bc:	100047f4 	orhi	zero,r2,287
100047c0:	100047f4 	orhi	zero,r2,287
100047c4:	100049a4 	muli	zero,r2,294
100047c8:	8904b03a 	or	r2,r17,r4
100047cc:	1000631e 	bne	r2,zero,1000495c <__divdf3+0x2c4>
100047d0:	05000204 	movi	r20,8
100047d4:	0023883a 	mov	r17,zero
100047d8:	0027883a 	mov	r19,zero
100047dc:	02000084 	movi	r8,2
100047e0:	003fcc06 	br	10004714 <__alt_data_end+0xf8004714>
100047e4:	8023883a 	mov	r17,r16
100047e8:	a827883a 	mov	r19,r21
100047ec:	4839883a 	mov	fp,r9
100047f0:	3811883a 	mov	r8,r7
100047f4:	00800084 	movi	r2,2
100047f8:	4081531e 	bne	r8,r2,10004d48 <__divdf3+0x6b0>
100047fc:	e029883a 	mov	r20,fp
10004800:	a180004c 	andi	r6,r20,1
10004804:	0201ffc4 	movi	r8,2047
10004808:	000b883a 	mov	r5,zero
1000480c:	0027883a 	mov	r19,zero
10004810:	4010953a 	slli	r8,r8,20
10004814:	30c03fcc 	andi	r3,r6,255
10004818:	04000434 	movhi	r16,16
1000481c:	180697fa 	slli	r3,r3,31
10004820:	843fffc4 	addi	r16,r16,-1
10004824:	2c20703a 	and	r16,r5,r16
10004828:	8220b03a 	or	r16,r16,r8
1000482c:	80c6b03a 	or	r3,r16,r3
10004830:	9805883a 	mov	r2,r19
10004834:	dfc00f17 	ldw	ra,60(sp)
10004838:	df000e17 	ldw	fp,56(sp)
1000483c:	ddc00d17 	ldw	r23,52(sp)
10004840:	dd800c17 	ldw	r22,48(sp)
10004844:	dd400b17 	ldw	r21,44(sp)
10004848:	dd000a17 	ldw	r20,40(sp)
1000484c:	dcc00917 	ldw	r19,36(sp)
10004850:	dc800817 	ldw	r18,32(sp)
10004854:	dc400717 	ldw	r17,28(sp)
10004858:	dc000617 	ldw	r16,24(sp)
1000485c:	dec01004 	addi	sp,sp,64
10004860:	f800283a 	ret
10004864:	8904b03a 	or	r2,r17,r4
10004868:	10003726 	beq	r2,zero,10004948 <__divdf3+0x2b0>
1000486c:	88014d26 	beq	r17,zero,10004da4 <__divdf3+0x70c>
10004870:	8809883a 	mov	r4,r17
10004874:	d9800215 	stw	r6,8(sp)
10004878:	d9c00515 	stw	r7,20(sp)
1000487c:	00065940 	call	10006594 <__clzsi2>
10004880:	d9800217 	ldw	r6,8(sp)
10004884:	d9c00517 	ldw	r7,20(sp)
10004888:	1007883a 	mov	r3,r2
1000488c:	01000a04 	movi	r4,40
10004890:	1cfffe04 	addi	r19,r3,-8
10004894:	20c9c83a 	sub	r4,r4,r3
10004898:	8cca983a 	sll	r5,r17,r19
1000489c:	a108d83a 	srl	r4,r20,r4
100048a0:	a4e6983a 	sll	r19,r20,r19
100048a4:	2162b03a 	or	r17,r4,r5
100048a8:	04bf0344 	movi	r18,-1011
100048ac:	90e5c83a 	sub	r18,r18,r3
100048b0:	0029883a 	mov	r20,zero
100048b4:	0011883a 	mov	r8,zero
100048b8:	003f9606 	br	10004714 <__alt_data_end+0xf8004714>
100048bc:	8184b03a 	or	r2,r16,r6
100048c0:	10001f1e 	bne	r2,zero,10004940 <__divdf3+0x2a8>
100048c4:	0021883a 	mov	r16,zero
100048c8:	002b883a 	mov	r21,zero
100048cc:	01c00084 	movi	r7,2
100048d0:	003fa206 	br	1000475c <__alt_data_end+0xf800475c>
100048d4:	8184b03a 	or	r2,r16,r6
100048d8:	10001526 	beq	r2,zero,10004930 <__divdf3+0x298>
100048dc:	80013d26 	beq	r16,zero,10004dd4 <__divdf3+0x73c>
100048e0:	8009883a 	mov	r4,r16
100048e4:	d9800215 	stw	r6,8(sp)
100048e8:	da000315 	stw	r8,12(sp)
100048ec:	da400415 	stw	r9,16(sp)
100048f0:	00065940 	call	10006594 <__clzsi2>
100048f4:	d9800217 	ldw	r6,8(sp)
100048f8:	da000317 	ldw	r8,12(sp)
100048fc:	da400417 	ldw	r9,16(sp)
10004900:	1007883a 	mov	r3,r2
10004904:	01000a04 	movi	r4,40
10004908:	1d7ffe04 	addi	r21,r3,-8
1000490c:	20c9c83a 	sub	r4,r4,r3
10004910:	8560983a 	sll	r16,r16,r21
10004914:	3108d83a 	srl	r4,r6,r4
10004918:	356a983a 	sll	r21,r6,r21
1000491c:	2420b03a 	or	r16,r4,r16
10004920:	017f0344 	movi	r5,-1011
10004924:	28cbc83a 	sub	r5,r5,r3
10004928:	000f883a 	mov	r7,zero
1000492c:	003f8b06 	br	1000475c <__alt_data_end+0xf800475c>
10004930:	0021883a 	mov	r16,zero
10004934:	002b883a 	mov	r21,zero
10004938:	01c00044 	movi	r7,1
1000493c:	003f8706 	br	1000475c <__alt_data_end+0xf800475c>
10004940:	01c000c4 	movi	r7,3
10004944:	003f8506 	br	1000475c <__alt_data_end+0xf800475c>
10004948:	05000104 	movi	r20,4
1000494c:	0023883a 	mov	r17,zero
10004950:	0027883a 	mov	r19,zero
10004954:	02000044 	movi	r8,1
10004958:	003f6e06 	br	10004714 <__alt_data_end+0xf8004714>
1000495c:	05000304 	movi	r20,12
10004960:	020000c4 	movi	r8,3
10004964:	003f6b06 	br	10004714 <__alt_data_end+0xf8004714>
10004968:	01400434 	movhi	r5,16
1000496c:	000d883a 	mov	r6,zero
10004970:	297fffc4 	addi	r5,r5,-1
10004974:	04ffffc4 	movi	r19,-1
10004978:	0201ffc4 	movi	r8,2047
1000497c:	003fa406 	br	10004810 <__alt_data_end+0xf8004810>
10004980:	043f0084 	movi	r16,-1022
10004984:	84a1c83a 	sub	r16,r16,r18
10004988:	00800e04 	movi	r2,56
1000498c:	14014d0e 	bge	r2,r16,10004ec4 <__divdf3+0x82c>
10004990:	a180004c 	andi	r6,r20,1
10004994:	0011883a 	mov	r8,zero
10004998:	000b883a 	mov	r5,zero
1000499c:	0027883a 	mov	r19,zero
100049a0:	003f9b06 	br	10004810 <__alt_data_end+0xf8004810>
100049a4:	8880022c 	andhi	r2,r17,8
100049a8:	1000f026 	beq	r2,zero,10004d6c <__divdf3+0x6d4>
100049ac:	8080022c 	andhi	r2,r16,8
100049b0:	1000ee1e 	bne	r2,zero,10004d6c <__divdf3+0x6d4>
100049b4:	00800434 	movhi	r2,16
100049b8:	81400234 	orhi	r5,r16,8
100049bc:	10bfffc4 	addi	r2,r2,-1
100049c0:	b80d883a 	mov	r6,r23
100049c4:	288a703a 	and	r5,r5,r2
100049c8:	a827883a 	mov	r19,r21
100049cc:	003fea06 	br	10004978 <__alt_data_end+0xf8004978>
100049d0:	84411c36 	bltu	r16,r17,10004e44 <__divdf3+0x7ac>
100049d4:	8c011a26 	beq	r17,r16,10004e40 <__divdf3+0x7a8>
100049d8:	94bfffc4 	addi	r18,r18,-1
100049dc:	dcc00015 	stw	r19,0(sp)
100049e0:	8811883a 	mov	r8,r17
100049e4:	002d883a 	mov	r22,zero
100049e8:	a80cd63a 	srli	r6,r21,24
100049ec:	8020923a 	slli	r16,r16,8
100049f0:	a82a923a 	slli	r21,r21,8
100049f4:	4009883a 	mov	r4,r8
100049f8:	342eb03a 	or	r23,r6,r16
100049fc:	dd400115 	stw	r21,4(sp)
10004a00:	b82ad43a 	srli	r21,r23,16
10004a04:	da000315 	stw	r8,12(sp)
10004a08:	bcffffcc 	andi	r19,r23,65535
10004a0c:	a80b883a 	mov	r5,r21
10004a10:	0003dc40 	call	10003dc4 <__udivsi3>
10004a14:	1009883a 	mov	r4,r2
10004a18:	980b883a 	mov	r5,r19
10004a1c:	1023883a 	mov	r17,r2
10004a20:	0003dd40 	call	10003dd4 <__mulsi3>
10004a24:	da000317 	ldw	r8,12(sp)
10004a28:	a80b883a 	mov	r5,r21
10004a2c:	1039883a 	mov	fp,r2
10004a30:	4009883a 	mov	r4,r8
10004a34:	0003dcc0 	call	10003dcc <__umodsi3>
10004a38:	d8c00017 	ldw	r3,0(sp)
10004a3c:	1004943a 	slli	r2,r2,16
10004a40:	1810d43a 	srli	r8,r3,16
10004a44:	120eb03a 	or	r7,r2,r8
10004a48:	3f00062e 	bgeu	r7,fp,10004a64 <__divdf3+0x3cc>
10004a4c:	3dcf883a 	add	r7,r7,r23
10004a50:	88bfffc4 	addi	r2,r17,-1
10004a54:	3dc10a36 	bltu	r7,r23,10004e80 <__divdf3+0x7e8>
10004a58:	3f01092e 	bgeu	r7,fp,10004e80 <__divdf3+0x7e8>
10004a5c:	8c7fff84 	addi	r17,r17,-2
10004a60:	3dcf883a 	add	r7,r7,r23
10004a64:	3f39c83a 	sub	fp,r7,fp
10004a68:	e009883a 	mov	r4,fp
10004a6c:	a80b883a 	mov	r5,r21
10004a70:	0003dc40 	call	10003dc4 <__udivsi3>
10004a74:	1009883a 	mov	r4,r2
10004a78:	980b883a 	mov	r5,r19
10004a7c:	1021883a 	mov	r16,r2
10004a80:	0003dd40 	call	10003dd4 <__mulsi3>
10004a84:	e009883a 	mov	r4,fp
10004a88:	a80b883a 	mov	r5,r21
10004a8c:	d8800315 	stw	r2,12(sp)
10004a90:	0003dcc0 	call	10003dcc <__umodsi3>
10004a94:	d9000017 	ldw	r4,0(sp)
10004a98:	1004943a 	slli	r2,r2,16
10004a9c:	da000317 	ldw	r8,12(sp)
10004aa0:	20ffffcc 	andi	r3,r4,65535
10004aa4:	10ceb03a 	or	r7,r2,r3
10004aa8:	3a00062e 	bgeu	r7,r8,10004ac4 <__divdf3+0x42c>
10004aac:	3dcf883a 	add	r7,r7,r23
10004ab0:	80bfffc4 	addi	r2,r16,-1
10004ab4:	3dc0f036 	bltu	r7,r23,10004e78 <__divdf3+0x7e0>
10004ab8:	3a00ef2e 	bgeu	r7,r8,10004e78 <__divdf3+0x7e0>
10004abc:	843fff84 	addi	r16,r16,-2
10004ac0:	3dcf883a 	add	r7,r7,r23
10004ac4:	d8c00117 	ldw	r3,4(sp)
10004ac8:	8822943a 	slli	r17,r17,16
10004acc:	3a0fc83a 	sub	r7,r7,r8
10004ad0:	1806d43a 	srli	r3,r3,16
10004ad4:	8462b03a 	or	r17,r16,r17
10004ad8:	8affffcc 	andi	r11,r17,65535
10004adc:	d8c00015 	stw	r3,0(sp)
10004ae0:	d8c00117 	ldw	r3,4(sp)
10004ae4:	8820d43a 	srli	r16,r17,16
10004ae8:	5809883a 	mov	r4,r11
10004aec:	1f3fffcc 	andi	fp,r3,65535
10004af0:	e00b883a 	mov	r5,fp
10004af4:	d9c00515 	stw	r7,20(sp)
10004af8:	dac00215 	stw	r11,8(sp)
10004afc:	0003dd40 	call	10003dd4 <__mulsi3>
10004b00:	8009883a 	mov	r4,r16
10004b04:	e00b883a 	mov	r5,fp
10004b08:	d8800415 	stw	r2,16(sp)
10004b0c:	0003dd40 	call	10003dd4 <__mulsi3>
10004b10:	d9400017 	ldw	r5,0(sp)
10004b14:	8009883a 	mov	r4,r16
10004b18:	d8800315 	stw	r2,12(sp)
10004b1c:	0003dd40 	call	10003dd4 <__mulsi3>
10004b20:	dac00217 	ldw	r11,8(sp)
10004b24:	d9400017 	ldw	r5,0(sp)
10004b28:	d8800215 	stw	r2,8(sp)
10004b2c:	5809883a 	mov	r4,r11
10004b30:	0003dd40 	call	10003dd4 <__mulsi3>
10004b34:	da400417 	ldw	r9,16(sp)
10004b38:	da800317 	ldw	r10,12(sp)
10004b3c:	d9c00517 	ldw	r7,20(sp)
10004b40:	480ad43a 	srli	r5,r9,16
10004b44:	5085883a 	add	r2,r10,r2
10004b48:	db000217 	ldw	r12,8(sp)
10004b4c:	1151883a 	add	r8,r2,r5
10004b50:	4280022e 	bgeu	r8,r10,10004b5c <__divdf3+0x4c4>
10004b54:	00800074 	movhi	r2,1
10004b58:	6099883a 	add	r12,r12,r2
10004b5c:	400ad43a 	srli	r5,r8,16
10004b60:	4010943a 	slli	r8,r8,16
10004b64:	4c3fffcc 	andi	r16,r9,65535
10004b68:	6149883a 	add	r4,r12,r5
10004b6c:	4411883a 	add	r8,r8,r16
10004b70:	3900a736 	bltu	r7,r4,10004e10 <__divdf3+0x778>
10004b74:	3900c426 	beq	r7,r4,10004e88 <__divdf3+0x7f0>
10004b78:	3909c83a 	sub	r4,r7,r4
10004b7c:	b221c83a 	sub	r16,r22,r8
10004b80:	b42d803a 	cmpltu	r22,r22,r16
10004b84:	25adc83a 	sub	r22,r4,r22
10004b88:	b5c0c626 	beq	r22,r23,10004ea4 <__divdf3+0x80c>
10004b8c:	b009883a 	mov	r4,r22
10004b90:	a80b883a 	mov	r5,r21
10004b94:	0003dc40 	call	10003dc4 <__udivsi3>
10004b98:	1009883a 	mov	r4,r2
10004b9c:	980b883a 	mov	r5,r19
10004ba0:	d8800315 	stw	r2,12(sp)
10004ba4:	0003dd40 	call	10003dd4 <__mulsi3>
10004ba8:	a80b883a 	mov	r5,r21
10004bac:	b009883a 	mov	r4,r22
10004bb0:	d8800415 	stw	r2,16(sp)
10004bb4:	0003dcc0 	call	10003dcc <__umodsi3>
10004bb8:	1004943a 	slli	r2,r2,16
10004bbc:	800ed43a 	srli	r7,r16,16
10004bc0:	da400417 	ldw	r9,16(sp)
10004bc4:	da000317 	ldw	r8,12(sp)
10004bc8:	11cab03a 	or	r5,r2,r7
10004bcc:	2a40062e 	bgeu	r5,r9,10004be8 <__divdf3+0x550>
10004bd0:	2dcb883a 	add	r5,r5,r23
10004bd4:	40bfffc4 	addi	r2,r8,-1
10004bd8:	2dc0b436 	bltu	r5,r23,10004eac <__divdf3+0x814>
10004bdc:	2a40b32e 	bgeu	r5,r9,10004eac <__divdf3+0x814>
10004be0:	423fff84 	addi	r8,r8,-2
10004be4:	2dcb883a 	add	r5,r5,r23
10004be8:	2a6dc83a 	sub	r22,r5,r9
10004bec:	b009883a 	mov	r4,r22
10004bf0:	a80b883a 	mov	r5,r21
10004bf4:	da000315 	stw	r8,12(sp)
10004bf8:	0003dc40 	call	10003dc4 <__udivsi3>
10004bfc:	980b883a 	mov	r5,r19
10004c00:	1009883a 	mov	r4,r2
10004c04:	d8800415 	stw	r2,16(sp)
10004c08:	0003dd40 	call	10003dd4 <__mulsi3>
10004c0c:	b009883a 	mov	r4,r22
10004c10:	a80b883a 	mov	r5,r21
10004c14:	1027883a 	mov	r19,r2
10004c18:	0003dcc0 	call	10003dcc <__umodsi3>
10004c1c:	1004943a 	slli	r2,r2,16
10004c20:	843fffcc 	andi	r16,r16,65535
10004c24:	da000317 	ldw	r8,12(sp)
10004c28:	140eb03a 	or	r7,r2,r16
10004c2c:	da400417 	ldw	r9,16(sp)
10004c30:	3cc0062e 	bgeu	r7,r19,10004c4c <__divdf3+0x5b4>
10004c34:	3dcf883a 	add	r7,r7,r23
10004c38:	48bfffc4 	addi	r2,r9,-1
10004c3c:	3dc09d36 	bltu	r7,r23,10004eb4 <__divdf3+0x81c>
10004c40:	3cc09c2e 	bgeu	r7,r19,10004eb4 <__divdf3+0x81c>
10004c44:	4a7fff84 	addi	r9,r9,-2
10004c48:	3dcf883a 	add	r7,r7,r23
10004c4c:	4010943a 	slli	r8,r8,16
10004c50:	3cebc83a 	sub	r21,r7,r19
10004c54:	e00b883a 	mov	r5,fp
10004c58:	4a26b03a 	or	r19,r9,r8
10004c5c:	99ffffcc 	andi	r7,r19,65535
10004c60:	9820d43a 	srli	r16,r19,16
10004c64:	3809883a 	mov	r4,r7
10004c68:	d9c00515 	stw	r7,20(sp)
10004c6c:	0003dd40 	call	10003dd4 <__mulsi3>
10004c70:	8009883a 	mov	r4,r16
10004c74:	e00b883a 	mov	r5,fp
10004c78:	102d883a 	mov	r22,r2
10004c7c:	0003dd40 	call	10003dd4 <__mulsi3>
10004c80:	d9400017 	ldw	r5,0(sp)
10004c84:	8009883a 	mov	r4,r16
10004c88:	1039883a 	mov	fp,r2
10004c8c:	0003dd40 	call	10003dd4 <__mulsi3>
10004c90:	d9c00517 	ldw	r7,20(sp)
10004c94:	d9400017 	ldw	r5,0(sp)
10004c98:	1021883a 	mov	r16,r2
10004c9c:	3809883a 	mov	r4,r7
10004ca0:	0003dd40 	call	10003dd4 <__mulsi3>
10004ca4:	b008d43a 	srli	r4,r22,16
10004ca8:	e085883a 	add	r2,fp,r2
10004cac:	1109883a 	add	r4,r2,r4
10004cb0:	2700022e 	bgeu	r4,fp,10004cbc <__divdf3+0x624>
10004cb4:	00800074 	movhi	r2,1
10004cb8:	80a1883a 	add	r16,r16,r2
10004cbc:	200ad43a 	srli	r5,r4,16
10004cc0:	2008943a 	slli	r4,r4,16
10004cc4:	b5bfffcc 	andi	r22,r22,65535
10004cc8:	8145883a 	add	r2,r16,r5
10004ccc:	2589883a 	add	r4,r4,r22
10004cd0:	a8802c36 	bltu	r21,r2,10004d84 <__divdf3+0x6ec>
10004cd4:	a880a426 	beq	r21,r2,10004f68 <__divdf3+0x8d0>
10004cd8:	9cc00054 	ori	r19,r19,1
10004cdc:	9200ffc4 	addi	r8,r18,1023
10004ce0:	023f270e 	bge	zero,r8,10004980 <__alt_data_end+0xf8004980>
10004ce4:	988001cc 	andi	r2,r19,7
10004ce8:	10000726 	beq	r2,zero,10004d08 <__divdf3+0x670>
10004cec:	990003cc 	andi	r4,r19,15
10004cf0:	00800104 	movi	r2,4
10004cf4:	20800426 	beq	r4,r2,10004d08 <__divdf3+0x670>
10004cf8:	9885883a 	add	r2,r19,r2
10004cfc:	14e7803a 	cmpltu	r19,r2,r19
10004d00:	8ce3883a 	add	r17,r17,r19
10004d04:	1027883a 	mov	r19,r2
10004d08:	8880402c 	andhi	r2,r17,256
10004d0c:	10000426 	beq	r2,zero,10004d20 <__divdf3+0x688>
10004d10:	00bfc034 	movhi	r2,65280
10004d14:	10bfffc4 	addi	r2,r2,-1
10004d18:	92010004 	addi	r8,r18,1024
10004d1c:	88a2703a 	and	r17,r17,r2
10004d20:	0081ff84 	movi	r2,2046
10004d24:	123eb616 	blt	r2,r8,10004800 <__alt_data_end+0xf8004800>
10004d28:	9826d0fa 	srli	r19,r19,3
10004d2c:	8804977a 	slli	r2,r17,29
10004d30:	8820927a 	slli	r16,r17,9
10004d34:	4201ffcc 	andi	r8,r8,2047
10004d38:	14e6b03a 	or	r19,r2,r19
10004d3c:	800ad33a 	srli	r5,r16,12
10004d40:	a180004c 	andi	r6,r20,1
10004d44:	003eb206 	br	10004810 <__alt_data_end+0xf8004810>
10004d48:	008000c4 	movi	r2,3
10004d4c:	4080ac26 	beq	r8,r2,10005000 <__divdf3+0x968>
10004d50:	00800044 	movi	r2,1
10004d54:	4080591e 	bne	r8,r2,10004ebc <__divdf3+0x824>
10004d58:	e00d883a 	mov	r6,fp
10004d5c:	0011883a 	mov	r8,zero
10004d60:	000b883a 	mov	r5,zero
10004d64:	0027883a 	mov	r19,zero
10004d68:	003ea906 	br	10004810 <__alt_data_end+0xf8004810>
10004d6c:	00800434 	movhi	r2,16
10004d70:	89400234 	orhi	r5,r17,8
10004d74:	10bfffc4 	addi	r2,r2,-1
10004d78:	b00d883a 	mov	r6,r22
10004d7c:	288a703a 	and	r5,r5,r2
10004d80:	003efd06 	br	10004978 <__alt_data_end+0xf8004978>
10004d84:	adcf883a 	add	r7,r21,r23
10004d88:	997fffc4 	addi	r5,r19,-1
10004d8c:	3dc0412e 	bgeu	r7,r23,10004e94 <__divdf3+0x7fc>
10004d90:	2827883a 	mov	r19,r5
10004d94:	38bfd01e 	bne	r7,r2,10004cd8 <__alt_data_end+0xf8004cd8>
10004d98:	d8c00117 	ldw	r3,4(sp)
10004d9c:	193fce1e 	bne	r3,r4,10004cd8 <__alt_data_end+0xf8004cd8>
10004da0:	003fce06 	br	10004cdc <__alt_data_end+0xf8004cdc>
10004da4:	d9800215 	stw	r6,8(sp)
10004da8:	d9c00515 	stw	r7,20(sp)
10004dac:	00065940 	call	10006594 <__clzsi2>
10004db0:	10c00804 	addi	r3,r2,32
10004db4:	010009c4 	movi	r4,39
10004db8:	d9800217 	ldw	r6,8(sp)
10004dbc:	d9c00517 	ldw	r7,20(sp)
10004dc0:	20feb20e 	bge	r4,r3,1000488c <__alt_data_end+0xf800488c>
10004dc4:	117ffe04 	addi	r5,r2,-8
10004dc8:	a162983a 	sll	r17,r20,r5
10004dcc:	0027883a 	mov	r19,zero
10004dd0:	003eb506 	br	100048a8 <__alt_data_end+0xf80048a8>
10004dd4:	3009883a 	mov	r4,r6
10004dd8:	d9800215 	stw	r6,8(sp)
10004ddc:	da000315 	stw	r8,12(sp)
10004de0:	da400415 	stw	r9,16(sp)
10004de4:	00065940 	call	10006594 <__clzsi2>
10004de8:	10c00804 	addi	r3,r2,32
10004dec:	010009c4 	movi	r4,39
10004df0:	d9800217 	ldw	r6,8(sp)
10004df4:	da000317 	ldw	r8,12(sp)
10004df8:	da400417 	ldw	r9,16(sp)
10004dfc:	20fec10e 	bge	r4,r3,10004904 <__alt_data_end+0xf8004904>
10004e00:	10bffe04 	addi	r2,r2,-8
10004e04:	a8a0983a 	sll	r16,r21,r2
10004e08:	002b883a 	mov	r21,zero
10004e0c:	003ec406 	br	10004920 <__alt_data_end+0xf8004920>
10004e10:	d8c00117 	ldw	r3,4(sp)
10004e14:	b0ed883a 	add	r22,r22,r3
10004e18:	b0c5803a 	cmpltu	r2,r22,r3
10004e1c:	15c5883a 	add	r2,r2,r23
10004e20:	11cf883a 	add	r7,r2,r7
10004e24:	88bfffc4 	addi	r2,r17,-1
10004e28:	b9c00d2e 	bgeu	r23,r7,10004e60 <__divdf3+0x7c8>
10004e2c:	39003f36 	bltu	r7,r4,10004f2c <__divdf3+0x894>
10004e30:	21c06a26 	beq	r4,r7,10004fdc <__divdf3+0x944>
10004e34:	3909c83a 	sub	r4,r7,r4
10004e38:	1023883a 	mov	r17,r2
10004e3c:	003f4f06 	br	10004b7c <__alt_data_end+0xf8004b7c>
10004e40:	9d7ee536 	bltu	r19,r21,100049d8 <__alt_data_end+0xf80049d8>
10004e44:	982ed07a 	srli	r23,r19,1
10004e48:	880497fa 	slli	r2,r17,31
10004e4c:	8810d07a 	srli	r8,r17,1
10004e50:	982c97fa 	slli	r22,r19,31
10004e54:	b884b03a 	or	r2,r23,r2
10004e58:	d8800015 	stw	r2,0(sp)
10004e5c:	003ee206 	br	100049e8 <__alt_data_end+0xf80049e8>
10004e60:	3dfff41e 	bne	r7,r23,10004e34 <__alt_data_end+0xf8004e34>
10004e64:	d8c00117 	ldw	r3,4(sp)
10004e68:	b0fff02e 	bgeu	r22,r3,10004e2c <__alt_data_end+0xf8004e2c>
10004e6c:	b909c83a 	sub	r4,r23,r4
10004e70:	1023883a 	mov	r17,r2
10004e74:	003f4106 	br	10004b7c <__alt_data_end+0xf8004b7c>
10004e78:	1021883a 	mov	r16,r2
10004e7c:	003f1106 	br	10004ac4 <__alt_data_end+0xf8004ac4>
10004e80:	1023883a 	mov	r17,r2
10004e84:	003ef706 	br	10004a64 <__alt_data_end+0xf8004a64>
10004e88:	b23fe136 	bltu	r22,r8,10004e10 <__alt_data_end+0xf8004e10>
10004e8c:	0009883a 	mov	r4,zero
10004e90:	003f3a06 	br	10004b7c <__alt_data_end+0xf8004b7c>
10004e94:	38802c36 	bltu	r7,r2,10004f48 <__divdf3+0x8b0>
10004e98:	11c05326 	beq	r2,r7,10004fe8 <__divdf3+0x950>
10004e9c:	2827883a 	mov	r19,r5
10004ea0:	003f8d06 	br	10004cd8 <__alt_data_end+0xf8004cd8>
10004ea4:	04ffffc4 	movi	r19,-1
10004ea8:	003f8c06 	br	10004cdc <__alt_data_end+0xf8004cdc>
10004eac:	1011883a 	mov	r8,r2
10004eb0:	003f4d06 	br	10004be8 <__alt_data_end+0xf8004be8>
10004eb4:	1013883a 	mov	r9,r2
10004eb8:	003f6406 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004ebc:	e029883a 	mov	r20,fp
10004ec0:	003f8606 	br	10004cdc <__alt_data_end+0xf8004cdc>
10004ec4:	008007c4 	movi	r2,31
10004ec8:	14002a16 	blt	r2,r16,10004f74 <__divdf3+0x8dc>
10004ecc:	91410784 	addi	r5,r18,1054
10004ed0:	9c0cd83a 	srl	r6,r19,r16
10004ed4:	8948983a 	sll	r4,r17,r5
10004ed8:	9944983a 	sll	r2,r19,r5
10004edc:	8c20d83a 	srl	r16,r17,r16
10004ee0:	3108b03a 	or	r4,r6,r4
10004ee4:	1004c03a 	cmpne	r2,r2,zero
10004ee8:	2084b03a 	or	r2,r4,r2
10004eec:	110001cc 	andi	r4,r2,7
10004ef0:	20000726 	beq	r4,zero,10004f10 <__divdf3+0x878>
10004ef4:	114003cc 	andi	r5,r2,15
10004ef8:	01000104 	movi	r4,4
10004efc:	29000426 	beq	r5,r4,10004f10 <__divdf3+0x878>
10004f00:	11000104 	addi	r4,r2,4
10004f04:	2085803a 	cmpltu	r2,r4,r2
10004f08:	80a1883a 	add	r16,r16,r2
10004f0c:	2005883a 	mov	r2,r4
10004f10:	8100202c 	andhi	r4,r16,128
10004f14:	20002d26 	beq	r4,zero,10004fcc <__divdf3+0x934>
10004f18:	a180004c 	andi	r6,r20,1
10004f1c:	02000044 	movi	r8,1
10004f20:	000b883a 	mov	r5,zero
10004f24:	0027883a 	mov	r19,zero
10004f28:	003e3906 	br	10004810 <__alt_data_end+0xf8004810>
10004f2c:	d8c00117 	ldw	r3,4(sp)
10004f30:	8c7fff84 	addi	r17,r17,-2
10004f34:	b0ed883a 	add	r22,r22,r3
10004f38:	b0c5803a 	cmpltu	r2,r22,r3
10004f3c:	15c5883a 	add	r2,r2,r23
10004f40:	11cf883a 	add	r7,r2,r7
10004f44:	003f0c06 	br	10004b78 <__alt_data_end+0xf8004b78>
10004f48:	d8c00117 	ldw	r3,4(sp)
10004f4c:	997fff84 	addi	r5,r19,-2
10004f50:	18d1883a 	add	r8,r3,r3
10004f54:	40c7803a 	cmpltu	r3,r8,r3
10004f58:	1dcd883a 	add	r6,r3,r23
10004f5c:	398f883a 	add	r7,r7,r6
10004f60:	da000115 	stw	r8,4(sp)
10004f64:	003f8a06 	br	10004d90 <__alt_data_end+0xf8004d90>
10004f68:	203f861e 	bne	r4,zero,10004d84 <__alt_data_end+0xf8004d84>
10004f6c:	d8000115 	stw	zero,4(sp)
10004f70:	003f8906 	br	10004d98 <__alt_data_end+0xf8004d98>
10004f74:	00bef884 	movi	r2,-1054
10004f78:	1485c83a 	sub	r2,r2,r18
10004f7c:	01000804 	movi	r4,32
10004f80:	8884d83a 	srl	r2,r17,r2
10004f84:	81001c26 	beq	r16,r4,10004ff8 <__divdf3+0x960>
10004f88:	91010f84 	addi	r4,r18,1086
10004f8c:	8908983a 	sll	r4,r17,r4
10004f90:	24c8b03a 	or	r4,r4,r19
10004f94:	2008c03a 	cmpne	r4,r4,zero
10004f98:	2084b03a 	or	r2,r4,r2
10004f9c:	140001cc 	andi	r16,r2,7
10004fa0:	8000061e 	bne	r16,zero,10004fbc <__divdf3+0x924>
10004fa4:	000b883a 	mov	r5,zero
10004fa8:	1004d0fa 	srli	r2,r2,3
10004fac:	a180004c 	andi	r6,r20,1
10004fb0:	0011883a 	mov	r8,zero
10004fb4:	1426b03a 	or	r19,r2,r16
10004fb8:	003e1506 	br	10004810 <__alt_data_end+0xf8004810>
10004fbc:	114003cc 	andi	r5,r2,15
10004fc0:	01000104 	movi	r4,4
10004fc4:	0021883a 	mov	r16,zero
10004fc8:	293fcd1e 	bne	r5,r4,10004f00 <__alt_data_end+0xf8004f00>
10004fcc:	800a927a 	slli	r5,r16,9
10004fd0:	8020977a 	slli	r16,r16,29
10004fd4:	280ad33a 	srli	r5,r5,12
10004fd8:	003ff306 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10004fdc:	b23fd336 	bltu	r22,r8,10004f2c <__alt_data_end+0xf8004f2c>
10004fe0:	1023883a 	mov	r17,r2
10004fe4:	003fa906 	br	10004e8c <__alt_data_end+0xf8004e8c>
10004fe8:	d8c00117 	ldw	r3,4(sp)
10004fec:	193fd636 	bltu	r3,r4,10004f48 <__alt_data_end+0xf8004f48>
10004ff0:	2827883a 	mov	r19,r5
10004ff4:	003f6806 	br	10004d98 <__alt_data_end+0xf8004d98>
10004ff8:	0009883a 	mov	r4,zero
10004ffc:	003fe406 	br	10004f90 <__alt_data_end+0xf8004f90>
10005000:	00800434 	movhi	r2,16
10005004:	89400234 	orhi	r5,r17,8
10005008:	10bfffc4 	addi	r2,r2,-1
1000500c:	e00d883a 	mov	r6,fp
10005010:	288a703a 	and	r5,r5,r2
10005014:	003e5806 	br	10004978 <__alt_data_end+0xf8004978>

10005018 <__eqdf2>:
10005018:	2804d53a 	srli	r2,r5,20
1000501c:	3806d53a 	srli	r3,r7,20
10005020:	02000434 	movhi	r8,16
10005024:	423fffc4 	addi	r8,r8,-1
10005028:	1081ffcc 	andi	r2,r2,2047
1000502c:	0241ffc4 	movi	r9,2047
10005030:	2a14703a 	and	r10,r5,r8
10005034:	18c1ffcc 	andi	r3,r3,2047
10005038:	3a10703a 	and	r8,r7,r8
1000503c:	280ad7fa 	srli	r5,r5,31
10005040:	380ed7fa 	srli	r7,r7,31
10005044:	12400f26 	beq	r2,r9,10005084 <__eqdf2+0x6c>
10005048:	0241ffc4 	movi	r9,2047
1000504c:	1a400326 	beq	r3,r9,1000505c <__eqdf2+0x44>
10005050:	10c00526 	beq	r2,r3,10005068 <__eqdf2+0x50>
10005054:	00800044 	movi	r2,1
10005058:	f800283a 	ret
1000505c:	4192b03a 	or	r9,r8,r6
10005060:	483ffc1e 	bne	r9,zero,10005054 <__alt_data_end+0xf8005054>
10005064:	10fffb1e 	bne	r2,r3,10005054 <__alt_data_end+0xf8005054>
10005068:	523ffa1e 	bne	r10,r8,10005054 <__alt_data_end+0xf8005054>
1000506c:	21bff91e 	bne	r4,r6,10005054 <__alt_data_end+0xf8005054>
10005070:	29c00826 	beq	r5,r7,10005094 <__eqdf2+0x7c>
10005074:	103ff71e 	bne	r2,zero,10005054 <__alt_data_end+0xf8005054>
10005078:	5104b03a 	or	r2,r10,r4
1000507c:	1004c03a 	cmpne	r2,r2,zero
10005080:	f800283a 	ret
10005084:	5112b03a 	or	r9,r10,r4
10005088:	483fef26 	beq	r9,zero,10005048 <__alt_data_end+0xf8005048>
1000508c:	00800044 	movi	r2,1
10005090:	f800283a 	ret
10005094:	0005883a 	mov	r2,zero
10005098:	f800283a 	ret

1000509c <__gedf2>:
1000509c:	2804d53a 	srli	r2,r5,20
100050a0:	3806d53a 	srli	r3,r7,20
100050a4:	02000434 	movhi	r8,16
100050a8:	423fffc4 	addi	r8,r8,-1
100050ac:	0241ffc4 	movi	r9,2047
100050b0:	1081ffcc 	andi	r2,r2,2047
100050b4:	2a14703a 	and	r10,r5,r8
100050b8:	1a46703a 	and	r3,r3,r9
100050bc:	3a10703a 	and	r8,r7,r8
100050c0:	280ad7fa 	srli	r5,r5,31
100050c4:	380ed7fa 	srli	r7,r7,31
100050c8:	12400b26 	beq	r2,r9,100050f8 <__gedf2+0x5c>
100050cc:	1a401626 	beq	r3,r9,10005128 <__gedf2+0x8c>
100050d0:	10000c1e 	bne	r2,zero,10005104 <__gedf2+0x68>
100050d4:	5112b03a 	or	r9,r10,r4
100050d8:	4813003a 	cmpeq	r9,r9,zero
100050dc:	4817883a 	mov	r11,r9
100050e0:	18000c1e 	bne	r3,zero,10005114 <__gedf2+0x78>
100050e4:	4198b03a 	or	r12,r8,r6
100050e8:	60000a1e 	bne	r12,zero,10005114 <__gedf2+0x78>
100050ec:	48001326 	beq	r9,zero,1000513c <__gedf2+0xa0>
100050f0:	0005883a 	mov	r2,zero
100050f4:	f800283a 	ret
100050f8:	5112b03a 	or	r9,r10,r4
100050fc:	4800191e 	bne	r9,zero,10005164 <__gedf2+0xc8>
10005100:	18800926 	beq	r3,r2,10005128 <__gedf2+0x8c>
10005104:	18000b1e 	bne	r3,zero,10005134 <__gedf2+0x98>
10005108:	4192b03a 	or	r9,r8,r6
1000510c:	0017883a 	mov	r11,zero
10005110:	48000a26 	beq	r9,zero,1000513c <__gedf2+0xa0>
10005114:	39c03fcc 	andi	r7,r7,255
10005118:	58000726 	beq	r11,zero,10005138 <__gedf2+0x9c>
1000511c:	3800081e 	bne	r7,zero,10005140 <__gedf2+0xa4>
10005120:	00bfffc4 	movi	r2,-1
10005124:	f800283a 	ret
10005128:	4192b03a 	or	r9,r8,r6
1000512c:	48000d1e 	bne	r9,zero,10005164 <__gedf2+0xc8>
10005130:	103fe826 	beq	r2,zero,100050d4 <__alt_data_end+0xf80050d4>
10005134:	39c03fcc 	andi	r7,r7,255
10005138:	29c00326 	beq	r5,r7,10005148 <__gedf2+0xac>
1000513c:	283ff81e 	bne	r5,zero,10005120 <__alt_data_end+0xf8005120>
10005140:	00800044 	movi	r2,1
10005144:	f800283a 	ret
10005148:	18bffc16 	blt	r3,r2,1000513c <__alt_data_end+0xf800513c>
1000514c:	10c00316 	blt	r2,r3,1000515c <__gedf2+0xc0>
10005150:	42bffa36 	bltu	r8,r10,1000513c <__alt_data_end+0xf800513c>
10005154:	52000526 	beq	r10,r8,1000516c <__gedf2+0xd0>
10005158:	523fe52e 	bgeu	r10,r8,100050f0 <__alt_data_end+0xf80050f0>
1000515c:	283ff026 	beq	r5,zero,10005120 <__alt_data_end+0xf8005120>
10005160:	003ff706 	br	10005140 <__alt_data_end+0xf8005140>
10005164:	00bfff84 	movi	r2,-2
10005168:	f800283a 	ret
1000516c:	313ff336 	bltu	r6,r4,1000513c <__alt_data_end+0xf800513c>
10005170:	21bfdf2e 	bgeu	r4,r6,100050f0 <__alt_data_end+0xf80050f0>
10005174:	283fea26 	beq	r5,zero,10005120 <__alt_data_end+0xf8005120>
10005178:	003ff106 	br	10005140 <__alt_data_end+0xf8005140>

1000517c <__ledf2>:
1000517c:	2804d53a 	srli	r2,r5,20
10005180:	3810d53a 	srli	r8,r7,20
10005184:	00c00434 	movhi	r3,16
10005188:	18ffffc4 	addi	r3,r3,-1
1000518c:	0241ffc4 	movi	r9,2047
10005190:	1081ffcc 	andi	r2,r2,2047
10005194:	28d4703a 	and	r10,r5,r3
10005198:	4250703a 	and	r8,r8,r9
1000519c:	38c6703a 	and	r3,r7,r3
100051a0:	280ad7fa 	srli	r5,r5,31
100051a4:	380ed7fa 	srli	r7,r7,31
100051a8:	12400b26 	beq	r2,r9,100051d8 <__ledf2+0x5c>
100051ac:	42401926 	beq	r8,r9,10005214 <__ledf2+0x98>
100051b0:	10000c1e 	bne	r2,zero,100051e4 <__ledf2+0x68>
100051b4:	5112b03a 	or	r9,r10,r4
100051b8:	4813003a 	cmpeq	r9,r9,zero
100051bc:	4817883a 	mov	r11,r9
100051c0:	40000f26 	beq	r8,zero,10005200 <__ledf2+0x84>
100051c4:	39c03fcc 	andi	r7,r7,255
100051c8:	58001826 	beq	r11,zero,1000522c <__ledf2+0xb0>
100051cc:	38000a1e 	bne	r7,zero,100051f8 <__ledf2+0x7c>
100051d0:	00bfffc4 	movi	r2,-1
100051d4:	f800283a 	ret
100051d8:	5112b03a 	or	r9,r10,r4
100051dc:	48000f1e 	bne	r9,zero,1000521c <__ledf2+0xa0>
100051e0:	40800c26 	beq	r8,r2,10005214 <__ledf2+0x98>
100051e4:	4000101e 	bne	r8,zero,10005228 <__ledf2+0xac>
100051e8:	1992b03a 	or	r9,r3,r6
100051ec:	0017883a 	mov	r11,zero
100051f0:	483ff41e 	bne	r9,zero,100051c4 <__alt_data_end+0xf80051c4>
100051f4:	283ff61e 	bne	r5,zero,100051d0 <__alt_data_end+0xf80051d0>
100051f8:	00800044 	movi	r2,1
100051fc:	f800283a 	ret
10005200:	1998b03a 	or	r12,r3,r6
10005204:	603fef1e 	bne	r12,zero,100051c4 <__alt_data_end+0xf80051c4>
10005208:	483ffa26 	beq	r9,zero,100051f4 <__alt_data_end+0xf80051f4>
1000520c:	0005883a 	mov	r2,zero
10005210:	f800283a 	ret
10005214:	1992b03a 	or	r9,r3,r6
10005218:	48000226 	beq	r9,zero,10005224 <__ledf2+0xa8>
1000521c:	00800084 	movi	r2,2
10005220:	f800283a 	ret
10005224:	103fe326 	beq	r2,zero,100051b4 <__alt_data_end+0xf80051b4>
10005228:	39c03fcc 	andi	r7,r7,255
1000522c:	29fff11e 	bne	r5,r7,100051f4 <__alt_data_end+0xf80051f4>
10005230:	40bff016 	blt	r8,r2,100051f4 <__alt_data_end+0xf80051f4>
10005234:	12000316 	blt	r2,r8,10005244 <__ledf2+0xc8>
10005238:	1abfee36 	bltu	r3,r10,100051f4 <__alt_data_end+0xf80051f4>
1000523c:	50c00326 	beq	r10,r3,1000524c <__ledf2+0xd0>
10005240:	50fff22e 	bgeu	r10,r3,1000520c <__alt_data_end+0xf800520c>
10005244:	283fe226 	beq	r5,zero,100051d0 <__alt_data_end+0xf80051d0>
10005248:	003feb06 	br	100051f8 <__alt_data_end+0xf80051f8>
1000524c:	313fe936 	bltu	r6,r4,100051f4 <__alt_data_end+0xf80051f4>
10005250:	21bfee2e 	bgeu	r4,r6,1000520c <__alt_data_end+0xf800520c>
10005254:	283fde26 	beq	r5,zero,100051d0 <__alt_data_end+0xf80051d0>
10005258:	003fe706 	br	100051f8 <__alt_data_end+0xf80051f8>

1000525c <__muldf3>:
1000525c:	deffee04 	addi	sp,sp,-72
10005260:	dd000c15 	stw	r20,48(sp)
10005264:	2828d53a 	srli	r20,r5,20
10005268:	dd400d15 	stw	r21,52(sp)
1000526c:	282ad7fa 	srli	r21,r5,31
10005270:	dc000815 	stw	r16,32(sp)
10005274:	04000434 	movhi	r16,16
10005278:	ddc00f15 	stw	r23,60(sp)
1000527c:	dcc00b15 	stw	r19,44(sp)
10005280:	dc800a15 	stw	r18,40(sp)
10005284:	843fffc4 	addi	r16,r16,-1
10005288:	dfc01115 	stw	ra,68(sp)
1000528c:	df001015 	stw	fp,64(sp)
10005290:	dd800e15 	stw	r22,56(sp)
10005294:	dc400915 	stw	r17,36(sp)
10005298:	a501ffcc 	andi	r20,r20,2047
1000529c:	2025883a 	mov	r18,r4
100052a0:	202f883a 	mov	r23,r4
100052a4:	2c20703a 	and	r16,r5,r16
100052a8:	a827883a 	mov	r19,r21
100052ac:	aa403fcc 	andi	r9,r21,255
100052b0:	a0005926 	beq	r20,zero,10005418 <__muldf3+0x1bc>
100052b4:	0081ffc4 	movi	r2,2047
100052b8:	a0803426 	beq	r20,r2,1000538c <__muldf3+0x130>
100052bc:	84000434 	orhi	r16,r16,16
100052c0:	2004d77a 	srli	r2,r4,29
100052c4:	802090fa 	slli	r16,r16,3
100052c8:	202e90fa 	slli	r23,r4,3
100052cc:	a53f0044 	addi	r20,r20,-1023
100052d0:	80a0b03a 	or	r16,r16,r2
100052d4:	000b883a 	mov	r5,zero
100052d8:	0039883a 	mov	fp,zero
100052dc:	3806d53a 	srli	r3,r7,20
100052e0:	382cd7fa 	srli	r22,r7,31
100052e4:	00800434 	movhi	r2,16
100052e8:	10bfffc4 	addi	r2,r2,-1
100052ec:	18c1ffcc 	andi	r3,r3,2047
100052f0:	3025883a 	mov	r18,r6
100052f4:	38a2703a 	and	r17,r7,r2
100052f8:	b2803fcc 	andi	r10,r22,255
100052fc:	18006426 	beq	r3,zero,10005490 <__muldf3+0x234>
10005300:	0081ffc4 	movi	r2,2047
10005304:	18805c26 	beq	r3,r2,10005478 <__muldf3+0x21c>
10005308:	8c400434 	orhi	r17,r17,16
1000530c:	3004d77a 	srli	r2,r6,29
10005310:	882290fa 	slli	r17,r17,3
10005314:	302490fa 	slli	r18,r6,3
10005318:	18ff0044 	addi	r3,r3,-1023
1000531c:	88a2b03a 	or	r17,r17,r2
10005320:	000f883a 	mov	r7,zero
10005324:	394ab03a 	or	r5,r7,r5
10005328:	280a90ba 	slli	r5,r5,2
1000532c:	00840034 	movhi	r2,4096
10005330:	1094d304 	addi	r2,r2,21324
10005334:	288b883a 	add	r5,r5,r2
10005338:	28800017 	ldw	r2,0(r5)
1000533c:	a0c7883a 	add	r3,r20,r3
10005340:	b54cf03a 	xor	r6,r22,r21
10005344:	1a000044 	addi	r8,r3,1
10005348:	1000683a 	jmp	r2
1000534c:	10005590 	cmplti	zero,r2,342
10005350:	1000557c 	xorhi	zero,r2,341
10005354:	1000557c 	xorhi	zero,r2,341
10005358:	10005568 	cmpgeui	zero,r2,341
1000535c:	100053a8 	cmpgeui	zero,r2,334
10005360:	100053a8 	cmpgeui	zero,r2,334
10005364:	10005550 	cmplti	zero,r2,341
10005368:	10005568 	cmpgeui	zero,r2,341
1000536c:	100053a8 	cmpgeui	zero,r2,334
10005370:	10005550 	cmplti	zero,r2,341
10005374:	100053a8 	cmpgeui	zero,r2,334
10005378:	10005568 	cmpgeui	zero,r2,341
1000537c:	100053ac 	andhi	zero,r2,334
10005380:	100053ac 	andhi	zero,r2,334
10005384:	100053ac 	andhi	zero,r2,334
10005388:	100058cc 	andi	zero,r2,355
1000538c:	8104b03a 	or	r2,r16,r4
10005390:	10006c1e 	bne	r2,zero,10005544 <__muldf3+0x2e8>
10005394:	01400204 	movi	r5,8
10005398:	0021883a 	mov	r16,zero
1000539c:	002f883a 	mov	r23,zero
100053a0:	07000084 	movi	fp,2
100053a4:	003fcd06 	br	100052dc <__alt_data_end+0xf80052dc>
100053a8:	3013883a 	mov	r9,r6
100053ac:	00800084 	movi	r2,2
100053b0:	e080501e 	bne	fp,r2,100054f4 <__muldf3+0x298>
100053b4:	4cc0004c 	andi	r19,r9,1
100053b8:	0101ffc4 	movi	r4,2047
100053bc:	0021883a 	mov	r16,zero
100053c0:	002f883a 	mov	r23,zero
100053c4:	2008953a 	slli	r4,r4,20
100053c8:	98c03fcc 	andi	r3,r19,255
100053cc:	04400434 	movhi	r17,16
100053d0:	8c7fffc4 	addi	r17,r17,-1
100053d4:	180697fa 	slli	r3,r3,31
100053d8:	8460703a 	and	r16,r16,r17
100053dc:	8120b03a 	or	r16,r16,r4
100053e0:	80c6b03a 	or	r3,r16,r3
100053e4:	b805883a 	mov	r2,r23
100053e8:	dfc01117 	ldw	ra,68(sp)
100053ec:	df001017 	ldw	fp,64(sp)
100053f0:	ddc00f17 	ldw	r23,60(sp)
100053f4:	dd800e17 	ldw	r22,56(sp)
100053f8:	dd400d17 	ldw	r21,52(sp)
100053fc:	dd000c17 	ldw	r20,48(sp)
10005400:	dcc00b17 	ldw	r19,44(sp)
10005404:	dc800a17 	ldw	r18,40(sp)
10005408:	dc400917 	ldw	r17,36(sp)
1000540c:	dc000817 	ldw	r16,32(sp)
10005410:	dec01204 	addi	sp,sp,72
10005414:	f800283a 	ret
10005418:	8104b03a 	or	r2,r16,r4
1000541c:	10004426 	beq	r2,zero,10005530 <__muldf3+0x2d4>
10005420:	80014b26 	beq	r16,zero,10005950 <__muldf3+0x6f4>
10005424:	8009883a 	mov	r4,r16
10005428:	d9800715 	stw	r6,28(sp)
1000542c:	d9c00215 	stw	r7,8(sp)
10005430:	da400415 	stw	r9,16(sp)
10005434:	00065940 	call	10006594 <__clzsi2>
10005438:	d9800717 	ldw	r6,28(sp)
1000543c:	d9c00217 	ldw	r7,8(sp)
10005440:	da400417 	ldw	r9,16(sp)
10005444:	1007883a 	mov	r3,r2
10005448:	01000a04 	movi	r4,40
1000544c:	1dfffe04 	addi	r23,r3,-8
10005450:	20c9c83a 	sub	r4,r4,r3
10005454:	85e0983a 	sll	r16,r16,r23
10005458:	9108d83a 	srl	r4,r18,r4
1000545c:	95ee983a 	sll	r23,r18,r23
10005460:	2420b03a 	or	r16,r4,r16
10005464:	053f0344 	movi	r20,-1011
10005468:	a0e9c83a 	sub	r20,r20,r3
1000546c:	000b883a 	mov	r5,zero
10005470:	0039883a 	mov	fp,zero
10005474:	003f9906 	br	100052dc <__alt_data_end+0xf80052dc>
10005478:	8984b03a 	or	r2,r17,r6
1000547c:	10002a1e 	bne	r2,zero,10005528 <__muldf3+0x2cc>
10005480:	0023883a 	mov	r17,zero
10005484:	0025883a 	mov	r18,zero
10005488:	01c00084 	movi	r7,2
1000548c:	003fa506 	br	10005324 <__alt_data_end+0xf8005324>
10005490:	8984b03a 	or	r2,r17,r6
10005494:	10002026 	beq	r2,zero,10005518 <__muldf3+0x2bc>
10005498:	88011c26 	beq	r17,zero,1000590c <__muldf3+0x6b0>
1000549c:	8809883a 	mov	r4,r17
100054a0:	d9400215 	stw	r5,8(sp)
100054a4:	d9800715 	stw	r6,28(sp)
100054a8:	da400415 	stw	r9,16(sp)
100054ac:	da800315 	stw	r10,12(sp)
100054b0:	00065940 	call	10006594 <__clzsi2>
100054b4:	d9400217 	ldw	r5,8(sp)
100054b8:	d9800717 	ldw	r6,28(sp)
100054bc:	da400417 	ldw	r9,16(sp)
100054c0:	da800317 	ldw	r10,12(sp)
100054c4:	1007883a 	mov	r3,r2
100054c8:	01000a04 	movi	r4,40
100054cc:	1cbffe04 	addi	r18,r3,-8
100054d0:	20c9c83a 	sub	r4,r4,r3
100054d4:	8ca2983a 	sll	r17,r17,r18
100054d8:	3108d83a 	srl	r4,r6,r4
100054dc:	34a4983a 	sll	r18,r6,r18
100054e0:	2462b03a 	or	r17,r4,r17
100054e4:	00bf0344 	movi	r2,-1011
100054e8:	10c7c83a 	sub	r3,r2,r3
100054ec:	000f883a 	mov	r7,zero
100054f0:	003f8c06 	br	10005324 <__alt_data_end+0xf8005324>
100054f4:	008000c4 	movi	r2,3
100054f8:	e0816d26 	beq	fp,r2,10005ab0 <__muldf3+0x854>
100054fc:	00800044 	movi	r2,1
10005500:	e081321e 	bne	fp,r2,100059cc <__muldf3+0x770>
10005504:	48a6703a 	and	r19,r9,r2
10005508:	0009883a 	mov	r4,zero
1000550c:	0021883a 	mov	r16,zero
10005510:	002f883a 	mov	r23,zero
10005514:	003fab06 	br	100053c4 <__alt_data_end+0xf80053c4>
10005518:	0023883a 	mov	r17,zero
1000551c:	0025883a 	mov	r18,zero
10005520:	01c00044 	movi	r7,1
10005524:	003f7f06 	br	10005324 <__alt_data_end+0xf8005324>
10005528:	01c000c4 	movi	r7,3
1000552c:	003f7d06 	br	10005324 <__alt_data_end+0xf8005324>
10005530:	01400104 	movi	r5,4
10005534:	0021883a 	mov	r16,zero
10005538:	002f883a 	mov	r23,zero
1000553c:	07000044 	movi	fp,1
10005540:	003f6606 	br	100052dc <__alt_data_end+0xf80052dc>
10005544:	01400304 	movi	r5,12
10005548:	070000c4 	movi	fp,3
1000554c:	003f6306 	br	100052dc <__alt_data_end+0xf80052dc>
10005550:	04000434 	movhi	r16,16
10005554:	0027883a 	mov	r19,zero
10005558:	843fffc4 	addi	r16,r16,-1
1000555c:	05ffffc4 	movi	r23,-1
10005560:	0101ffc4 	movi	r4,2047
10005564:	003f9706 	br	100053c4 <__alt_data_end+0xf80053c4>
10005568:	8821883a 	mov	r16,r17
1000556c:	902f883a 	mov	r23,r18
10005570:	5013883a 	mov	r9,r10
10005574:	3839883a 	mov	fp,r7
10005578:	003f8c06 	br	100053ac <__alt_data_end+0xf80053ac>
1000557c:	8821883a 	mov	r16,r17
10005580:	902f883a 	mov	r23,r18
10005584:	3013883a 	mov	r9,r6
10005588:	3839883a 	mov	fp,r7
1000558c:	003f8706 	br	100053ac <__alt_data_end+0xf80053ac>
10005590:	b82ad43a 	srli	r21,r23,16
10005594:	9038d43a 	srli	fp,r18,16
10005598:	bdffffcc 	andi	r23,r23,65535
1000559c:	94bfffcc 	andi	r18,r18,65535
100055a0:	9009883a 	mov	r4,r18
100055a4:	b80b883a 	mov	r5,r23
100055a8:	d8c00515 	stw	r3,20(sp)
100055ac:	d9800715 	stw	r6,28(sp)
100055b0:	da000615 	stw	r8,24(sp)
100055b4:	0003dd40 	call	10003dd4 <__mulsi3>
100055b8:	9009883a 	mov	r4,r18
100055bc:	a80b883a 	mov	r5,r21
100055c0:	1029883a 	mov	r20,r2
100055c4:	0003dd40 	call	10003dd4 <__mulsi3>
100055c8:	e009883a 	mov	r4,fp
100055cc:	a80b883a 	mov	r5,r21
100055d0:	102d883a 	mov	r22,r2
100055d4:	0003dd40 	call	10003dd4 <__mulsi3>
100055d8:	e009883a 	mov	r4,fp
100055dc:	b80b883a 	mov	r5,r23
100055e0:	1027883a 	mov	r19,r2
100055e4:	0003dd40 	call	10003dd4 <__mulsi3>
100055e8:	a008d43a 	srli	r4,r20,16
100055ec:	b085883a 	add	r2,r22,r2
100055f0:	d8c00517 	ldw	r3,20(sp)
100055f4:	110f883a 	add	r7,r2,r4
100055f8:	d9800717 	ldw	r6,28(sp)
100055fc:	da000617 	ldw	r8,24(sp)
10005600:	3d80022e 	bgeu	r7,r22,1000560c <__muldf3+0x3b0>
10005604:	00800074 	movhi	r2,1
10005608:	98a7883a 	add	r19,r19,r2
1000560c:	3804943a 	slli	r2,r7,16
10005610:	380ed43a 	srli	r7,r7,16
10005614:	882cd43a 	srli	r22,r17,16
10005618:	a53fffcc 	andi	r20,r20,65535
1000561c:	8c7fffcc 	andi	r17,r17,65535
10005620:	1529883a 	add	r20,r2,r20
10005624:	8809883a 	mov	r4,r17
10005628:	b80b883a 	mov	r5,r23
1000562c:	d8c00515 	stw	r3,20(sp)
10005630:	d9800715 	stw	r6,28(sp)
10005634:	da000615 	stw	r8,24(sp)
10005638:	d9c00015 	stw	r7,0(sp)
1000563c:	dd000115 	stw	r20,4(sp)
10005640:	0003dd40 	call	10003dd4 <__mulsi3>
10005644:	a80b883a 	mov	r5,r21
10005648:	8809883a 	mov	r4,r17
1000564c:	d8800415 	stw	r2,16(sp)
10005650:	0003dd40 	call	10003dd4 <__mulsi3>
10005654:	a80b883a 	mov	r5,r21
10005658:	b009883a 	mov	r4,r22
1000565c:	1029883a 	mov	r20,r2
10005660:	0003dd40 	call	10003dd4 <__mulsi3>
10005664:	b009883a 	mov	r4,r22
10005668:	b80b883a 	mov	r5,r23
1000566c:	102b883a 	mov	r21,r2
10005670:	0003dd40 	call	10003dd4 <__mulsi3>
10005674:	da400417 	ldw	r9,16(sp)
10005678:	a085883a 	add	r2,r20,r2
1000567c:	d8c00517 	ldw	r3,20(sp)
10005680:	4808d43a 	srli	r4,r9,16
10005684:	d9800717 	ldw	r6,28(sp)
10005688:	da000617 	ldw	r8,24(sp)
1000568c:	1109883a 	add	r4,r2,r4
10005690:	2500022e 	bgeu	r4,r20,1000569c <__muldf3+0x440>
10005694:	00800074 	movhi	r2,1
10005698:	a8ab883a 	add	r21,r21,r2
1000569c:	200e943a 	slli	r7,r4,16
100056a0:	2004d43a 	srli	r2,r4,16
100056a4:	802ed43a 	srli	r23,r16,16
100056a8:	843fffcc 	andi	r16,r16,65535
100056ac:	4d3fffcc 	andi	r20,r9,65535
100056b0:	9009883a 	mov	r4,r18
100056b4:	800b883a 	mov	r5,r16
100056b8:	3d29883a 	add	r20,r7,r20
100056bc:	d8c00515 	stw	r3,20(sp)
100056c0:	d9800715 	stw	r6,28(sp)
100056c4:	da000615 	stw	r8,24(sp)
100056c8:	a8ab883a 	add	r21,r21,r2
100056cc:	0003dd40 	call	10003dd4 <__mulsi3>
100056d0:	9009883a 	mov	r4,r18
100056d4:	b80b883a 	mov	r5,r23
100056d8:	d8800315 	stw	r2,12(sp)
100056dc:	0003dd40 	call	10003dd4 <__mulsi3>
100056e0:	e009883a 	mov	r4,fp
100056e4:	b80b883a 	mov	r5,r23
100056e8:	1025883a 	mov	r18,r2
100056ec:	0003dd40 	call	10003dd4 <__mulsi3>
100056f0:	e009883a 	mov	r4,fp
100056f4:	800b883a 	mov	r5,r16
100056f8:	d8800215 	stw	r2,8(sp)
100056fc:	0003dd40 	call	10003dd4 <__mulsi3>
10005700:	da800317 	ldw	r10,12(sp)
10005704:	d9400017 	ldw	r5,0(sp)
10005708:	9085883a 	add	r2,r18,r2
1000570c:	5008d43a 	srli	r4,r10,16
10005710:	a153883a 	add	r9,r20,r5
10005714:	d8c00517 	ldw	r3,20(sp)
10005718:	1109883a 	add	r4,r2,r4
1000571c:	d9800717 	ldw	r6,28(sp)
10005720:	da000617 	ldw	r8,24(sp)
10005724:	dac00217 	ldw	r11,8(sp)
10005728:	2480022e 	bgeu	r4,r18,10005734 <__muldf3+0x4d8>
1000572c:	00800074 	movhi	r2,1
10005730:	5897883a 	add	r11,r11,r2
10005734:	200e943a 	slli	r7,r4,16
10005738:	2038d43a 	srli	fp,r4,16
1000573c:	52bfffcc 	andi	r10,r10,65535
10005740:	3a8f883a 	add	r7,r7,r10
10005744:	8809883a 	mov	r4,r17
10005748:	800b883a 	mov	r5,r16
1000574c:	d8c00515 	stw	r3,20(sp)
10005750:	d9800715 	stw	r6,28(sp)
10005754:	d9c00215 	stw	r7,8(sp)
10005758:	da000615 	stw	r8,24(sp)
1000575c:	da400415 	stw	r9,16(sp)
10005760:	5f39883a 	add	fp,r11,fp
10005764:	0003dd40 	call	10003dd4 <__mulsi3>
10005768:	8809883a 	mov	r4,r17
1000576c:	b80b883a 	mov	r5,r23
10005770:	1025883a 	mov	r18,r2
10005774:	0003dd40 	call	10003dd4 <__mulsi3>
10005778:	b009883a 	mov	r4,r22
1000577c:	b80b883a 	mov	r5,r23
10005780:	d8800315 	stw	r2,12(sp)
10005784:	0003dd40 	call	10003dd4 <__mulsi3>
10005788:	b009883a 	mov	r4,r22
1000578c:	800b883a 	mov	r5,r16
10005790:	1023883a 	mov	r17,r2
10005794:	0003dd40 	call	10003dd4 <__mulsi3>
10005798:	da800317 	ldw	r10,12(sp)
1000579c:	9008d43a 	srli	r4,r18,16
100057a0:	d8c00517 	ldw	r3,20(sp)
100057a4:	5085883a 	add	r2,r10,r2
100057a8:	1109883a 	add	r4,r2,r4
100057ac:	d9800717 	ldw	r6,28(sp)
100057b0:	d9c00217 	ldw	r7,8(sp)
100057b4:	da000617 	ldw	r8,24(sp)
100057b8:	da400417 	ldw	r9,16(sp)
100057bc:	2280022e 	bgeu	r4,r10,100057c8 <__muldf3+0x56c>
100057c0:	00800074 	movhi	r2,1
100057c4:	88a3883a 	add	r17,r17,r2
100057c8:	2004943a 	slli	r2,r4,16
100057cc:	94bfffcc 	andi	r18,r18,65535
100057d0:	4ce7883a 	add	r19,r9,r19
100057d4:	14a5883a 	add	r18,r2,r18
100057d8:	9d29803a 	cmpltu	r20,r19,r20
100057dc:	9565883a 	add	r18,r18,r21
100057e0:	9505883a 	add	r2,r18,r20
100057e4:	99e7883a 	add	r19,r19,r7
100057e8:	99cf803a 	cmpltu	r7,r19,r7
100057ec:	e08b883a 	add	r5,fp,r2
100057f0:	2008d43a 	srli	r4,r4,16
100057f4:	29ef883a 	add	r23,r5,r7
100057f8:	1529803a 	cmpltu	r20,r2,r20
100057fc:	956b803a 	cmpltu	r21,r18,r21
10005800:	b9cf803a 	cmpltu	r7,r23,r7
10005804:	a564b03a 	or	r18,r20,r21
10005808:	2f39803a 	cmpltu	fp,r5,fp
1000580c:	9125883a 	add	r18,r18,r4
10005810:	3f38b03a 	or	fp,r7,fp
10005814:	9725883a 	add	r18,r18,fp
10005818:	9804927a 	slli	r2,r19,9
1000581c:	9463883a 	add	r17,r18,r17
10005820:	d9000117 	ldw	r4,4(sp)
10005824:	b820d5fa 	srli	r16,r23,23
10005828:	8822927a 	slli	r17,r17,9
1000582c:	9826d5fa 	srli	r19,r19,23
10005830:	1104b03a 	or	r2,r2,r4
10005834:	b82e927a 	slli	r23,r23,9
10005838:	1004c03a 	cmpne	r2,r2,zero
1000583c:	8c20b03a 	or	r16,r17,r16
10005840:	14e6b03a 	or	r19,r2,r19
10005844:	8080402c 	andhi	r2,r16,256
10005848:	9deeb03a 	or	r23,r19,r23
1000584c:	10000726 	beq	r2,zero,1000586c <__muldf3+0x610>
10005850:	b804d07a 	srli	r2,r23,1
10005854:	800697fa 	slli	r3,r16,31
10005858:	bdc0004c 	andi	r23,r23,1
1000585c:	8020d07a 	srli	r16,r16,1
10005860:	b8aeb03a 	or	r23,r23,r2
10005864:	b8eeb03a 	or	r23,r23,r3
10005868:	4007883a 	mov	r3,r8
1000586c:	1900ffc4 	addi	r4,r3,1023
10005870:	01004d0e 	bge	zero,r4,100059a8 <__muldf3+0x74c>
10005874:	b88001cc 	andi	r2,r23,7
10005878:	10000726 	beq	r2,zero,10005898 <__muldf3+0x63c>
1000587c:	b94003cc 	andi	r5,r23,15
10005880:	00800104 	movi	r2,4
10005884:	28800426 	beq	r5,r2,10005898 <__muldf3+0x63c>
10005888:	b885883a 	add	r2,r23,r2
1000588c:	15ef803a 	cmpltu	r23,r2,r23
10005890:	85e1883a 	add	r16,r16,r23
10005894:	102f883a 	mov	r23,r2
10005898:	8080402c 	andhi	r2,r16,256
1000589c:	10000426 	beq	r2,zero,100058b0 <__muldf3+0x654>
100058a0:	00bfc034 	movhi	r2,65280
100058a4:	10bfffc4 	addi	r2,r2,-1
100058a8:	19010004 	addi	r4,r3,1024
100058ac:	80a0703a 	and	r16,r16,r2
100058b0:	0081ff84 	movi	r2,2046
100058b4:	1100340e 	bge	r2,r4,10005988 <__muldf3+0x72c>
100058b8:	34c0004c 	andi	r19,r6,1
100058bc:	0101ffc4 	movi	r4,2047
100058c0:	0021883a 	mov	r16,zero
100058c4:	002f883a 	mov	r23,zero
100058c8:	003ebe06 	br	100053c4 <__alt_data_end+0xf80053c4>
100058cc:	8080022c 	andhi	r2,r16,8
100058d0:	10000926 	beq	r2,zero,100058f8 <__muldf3+0x69c>
100058d4:	8880022c 	andhi	r2,r17,8
100058d8:	1000071e 	bne	r2,zero,100058f8 <__muldf3+0x69c>
100058dc:	00800434 	movhi	r2,16
100058e0:	8c000234 	orhi	r16,r17,8
100058e4:	10bfffc4 	addi	r2,r2,-1
100058e8:	b027883a 	mov	r19,r22
100058ec:	80a0703a 	and	r16,r16,r2
100058f0:	902f883a 	mov	r23,r18
100058f4:	003f1a06 	br	10005560 <__alt_data_end+0xf8005560>
100058f8:	00800434 	movhi	r2,16
100058fc:	84000234 	orhi	r16,r16,8
10005900:	10bfffc4 	addi	r2,r2,-1
10005904:	80a0703a 	and	r16,r16,r2
10005908:	003f1506 	br	10005560 <__alt_data_end+0xf8005560>
1000590c:	3009883a 	mov	r4,r6
10005910:	d9400215 	stw	r5,8(sp)
10005914:	d9800715 	stw	r6,28(sp)
10005918:	da400415 	stw	r9,16(sp)
1000591c:	da800315 	stw	r10,12(sp)
10005920:	00065940 	call	10006594 <__clzsi2>
10005924:	10c00804 	addi	r3,r2,32
10005928:	010009c4 	movi	r4,39
1000592c:	d9400217 	ldw	r5,8(sp)
10005930:	d9800717 	ldw	r6,28(sp)
10005934:	da400417 	ldw	r9,16(sp)
10005938:	da800317 	ldw	r10,12(sp)
1000593c:	20fee20e 	bge	r4,r3,100054c8 <__alt_data_end+0xf80054c8>
10005940:	147ffe04 	addi	r17,r2,-8
10005944:	9462983a 	sll	r17,r18,r17
10005948:	0025883a 	mov	r18,zero
1000594c:	003ee506 	br	100054e4 <__alt_data_end+0xf80054e4>
10005950:	d9800715 	stw	r6,28(sp)
10005954:	d9c00215 	stw	r7,8(sp)
10005958:	da400415 	stw	r9,16(sp)
1000595c:	00065940 	call	10006594 <__clzsi2>
10005960:	10c00804 	addi	r3,r2,32
10005964:	010009c4 	movi	r4,39
10005968:	d9800717 	ldw	r6,28(sp)
1000596c:	d9c00217 	ldw	r7,8(sp)
10005970:	da400417 	ldw	r9,16(sp)
10005974:	20feb40e 	bge	r4,r3,10005448 <__alt_data_end+0xf8005448>
10005978:	143ffe04 	addi	r16,r2,-8
1000597c:	9420983a 	sll	r16,r18,r16
10005980:	002f883a 	mov	r23,zero
10005984:	003eb706 	br	10005464 <__alt_data_end+0xf8005464>
10005988:	8004977a 	slli	r2,r16,29
1000598c:	b82ed0fa 	srli	r23,r23,3
10005990:	8020927a 	slli	r16,r16,9
10005994:	2101ffcc 	andi	r4,r4,2047
10005998:	15eeb03a 	or	r23,r2,r23
1000599c:	8020d33a 	srli	r16,r16,12
100059a0:	34c0004c 	andi	r19,r6,1
100059a4:	003e8706 	br	100053c4 <__alt_data_end+0xf80053c4>
100059a8:	00bf0084 	movi	r2,-1022
100059ac:	10c5c83a 	sub	r2,r2,r3
100059b0:	01000e04 	movi	r4,56
100059b4:	2080080e 	bge	r4,r2,100059d8 <__muldf3+0x77c>
100059b8:	34c0004c 	andi	r19,r6,1
100059bc:	0009883a 	mov	r4,zero
100059c0:	0021883a 	mov	r16,zero
100059c4:	002f883a 	mov	r23,zero
100059c8:	003e7e06 	br	100053c4 <__alt_data_end+0xf80053c4>
100059cc:	4007883a 	mov	r3,r8
100059d0:	480d883a 	mov	r6,r9
100059d4:	003fa506 	br	1000586c <__alt_data_end+0xf800586c>
100059d8:	010007c4 	movi	r4,31
100059dc:	20801816 	blt	r4,r2,10005a40 <__muldf3+0x7e4>
100059e0:	18c10784 	addi	r3,r3,1054
100059e4:	80c8983a 	sll	r4,r16,r3
100059e8:	b88ad83a 	srl	r5,r23,r2
100059ec:	b8c6983a 	sll	r3,r23,r3
100059f0:	80a0d83a 	srl	r16,r16,r2
100059f4:	2908b03a 	or	r4,r5,r4
100059f8:	1804c03a 	cmpne	r2,r3,zero
100059fc:	2088b03a 	or	r4,r4,r2
10005a00:	208001cc 	andi	r2,r4,7
10005a04:	10000726 	beq	r2,zero,10005a24 <__muldf3+0x7c8>
10005a08:	20c003cc 	andi	r3,r4,15
10005a0c:	00800104 	movi	r2,4
10005a10:	18800426 	beq	r3,r2,10005a24 <__muldf3+0x7c8>
10005a14:	20c00104 	addi	r3,r4,4
10005a18:	1905803a 	cmpltu	r2,r3,r4
10005a1c:	80a1883a 	add	r16,r16,r2
10005a20:	1809883a 	mov	r4,r3
10005a24:	8080202c 	andhi	r2,r16,128
10005a28:	10001b26 	beq	r2,zero,10005a98 <__muldf3+0x83c>
10005a2c:	34c0004c 	andi	r19,r6,1
10005a30:	01000044 	movi	r4,1
10005a34:	0021883a 	mov	r16,zero
10005a38:	002f883a 	mov	r23,zero
10005a3c:	003e6106 	br	100053c4 <__alt_data_end+0xf80053c4>
10005a40:	013ef884 	movi	r4,-1054
10005a44:	20c9c83a 	sub	r4,r4,r3
10005a48:	01400804 	movi	r5,32
10005a4c:	8108d83a 	srl	r4,r16,r4
10005a50:	11401526 	beq	r2,r5,10005aa8 <__muldf3+0x84c>
10005a54:	18c10f84 	addi	r3,r3,1086
10005a58:	80e0983a 	sll	r16,r16,r3
10005a5c:	85eeb03a 	or	r23,r16,r23
10005a60:	b804c03a 	cmpne	r2,r23,zero
10005a64:	1108b03a 	or	r4,r2,r4
10005a68:	20c001cc 	andi	r3,r4,7
10005a6c:	1800061e 	bne	r3,zero,10005a88 <__muldf3+0x82c>
10005a70:	0021883a 	mov	r16,zero
10005a74:	202ed0fa 	srli	r23,r4,3
10005a78:	34c0004c 	andi	r19,r6,1
10005a7c:	0009883a 	mov	r4,zero
10005a80:	b8eeb03a 	or	r23,r23,r3
10005a84:	003e4f06 	br	100053c4 <__alt_data_end+0xf80053c4>
10005a88:	20c003cc 	andi	r3,r4,15
10005a8c:	00800104 	movi	r2,4
10005a90:	0021883a 	mov	r16,zero
10005a94:	18bfdf1e 	bne	r3,r2,10005a14 <__alt_data_end+0xf8005a14>
10005a98:	8004927a 	slli	r2,r16,9
10005a9c:	8006977a 	slli	r3,r16,29
10005aa0:	1020d33a 	srli	r16,r2,12
10005aa4:	003ff306 	br	10005a74 <__alt_data_end+0xf8005a74>
10005aa8:	0021883a 	mov	r16,zero
10005aac:	003feb06 	br	10005a5c <__alt_data_end+0xf8005a5c>
10005ab0:	00800434 	movhi	r2,16
10005ab4:	84000234 	orhi	r16,r16,8
10005ab8:	10bfffc4 	addi	r2,r2,-1
10005abc:	4cc0004c 	andi	r19,r9,1
10005ac0:	80a0703a 	and	r16,r16,r2
10005ac4:	003ea606 	br	10005560 <__alt_data_end+0xf8005560>

10005ac8 <__subdf3>:
10005ac8:	00c00434 	movhi	r3,16
10005acc:	18ffffc4 	addi	r3,r3,-1
10005ad0:	defffb04 	addi	sp,sp,-20
10005ad4:	28d2703a 	and	r9,r5,r3
10005ad8:	3814d53a 	srli	r10,r7,20
10005adc:	38c6703a 	and	r3,r7,r3
10005ae0:	3004d77a 	srli	r2,r6,29
10005ae4:	dc800215 	stw	r18,8(sp)
10005ae8:	dc000015 	stw	r16,0(sp)
10005aec:	2824d7fa 	srli	r18,r5,31
10005af0:	2820d53a 	srli	r16,r5,20
10005af4:	481290fa 	slli	r9,r9,3
10005af8:	200ad77a 	srli	r5,r4,29
10005afc:	180690fa 	slli	r3,r3,3
10005b00:	dc400115 	stw	r17,4(sp)
10005b04:	dfc00415 	stw	ra,16(sp)
10005b08:	202290fa 	slli	r17,r4,3
10005b0c:	dcc00315 	stw	r19,12(sp)
10005b10:	5281ffcc 	andi	r10,r10,2047
10005b14:	0101ffc4 	movi	r4,2047
10005b18:	9011883a 	mov	r8,r18
10005b1c:	8401ffcc 	andi	r16,r16,2047
10005b20:	94803fcc 	andi	r18,r18,255
10005b24:	494ab03a 	or	r5,r9,r5
10005b28:	380ed7fa 	srli	r7,r7,31
10005b2c:	1886b03a 	or	r3,r3,r2
10005b30:	300c90fa 	slli	r6,r6,3
10005b34:	51009026 	beq	r10,r4,10005d78 <__subdf3+0x2b0>
10005b38:	39c0005c 	xori	r7,r7,1
10005b3c:	8285c83a 	sub	r2,r16,r10
10005b40:	91c06f26 	beq	r18,r7,10005d00 <__subdf3+0x238>
10005b44:	0080b10e 	bge	zero,r2,10005e0c <__subdf3+0x344>
10005b48:	50002a1e 	bne	r10,zero,10005bf4 <__subdf3+0x12c>
10005b4c:	1988b03a 	or	r4,r3,r6
10005b50:	2000941e 	bne	r4,zero,10005da4 <__subdf3+0x2dc>
10005b54:	888001cc 	andi	r2,r17,7
10005b58:	10005b26 	beq	r2,zero,10005cc8 <__subdf3+0x200>
10005b5c:	88c003cc 	andi	r3,r17,15
10005b60:	00800104 	movi	r2,4
10005b64:	18805826 	beq	r3,r2,10005cc8 <__subdf3+0x200>
10005b68:	88c00104 	addi	r3,r17,4
10005b6c:	1c63803a 	cmpltu	r17,r3,r17
10005b70:	2c4b883a 	add	r5,r5,r17
10005b74:	2880202c 	andhi	r2,r5,128
10005b78:	9200004c 	andi	r8,r18,1
10005b7c:	1823883a 	mov	r17,r3
10005b80:	10005426 	beq	r2,zero,10005cd4 <__subdf3+0x20c>
10005b84:	84000044 	addi	r16,r16,1
10005b88:	0081ffc4 	movi	r2,2047
10005b8c:	8080bf26 	beq	r16,r2,10005e8c <__subdf3+0x3c4>
10005b90:	013fe034 	movhi	r4,65408
10005b94:	213fffc4 	addi	r4,r4,-1
10005b98:	290a703a 	and	r5,r5,r4
10005b9c:	2804977a 	slli	r2,r5,29
10005ba0:	280a927a 	slli	r5,r5,9
10005ba4:	8822d0fa 	srli	r17,r17,3
10005ba8:	8401ffcc 	andi	r16,r16,2047
10005bac:	2808d33a 	srli	r4,r5,12
10005bb0:	1444b03a 	or	r2,r2,r17
10005bb4:	8401ffcc 	andi	r16,r16,2047
10005bb8:	800a953a 	slli	r5,r16,20
10005bbc:	40c03fcc 	andi	r3,r8,255
10005bc0:	04000434 	movhi	r16,16
10005bc4:	180697fa 	slli	r3,r3,31
10005bc8:	843fffc4 	addi	r16,r16,-1
10005bcc:	2420703a 	and	r16,r4,r16
10005bd0:	8160b03a 	or	r16,r16,r5
10005bd4:	80c6b03a 	or	r3,r16,r3
10005bd8:	dfc00417 	ldw	ra,16(sp)
10005bdc:	dcc00317 	ldw	r19,12(sp)
10005be0:	dc800217 	ldw	r18,8(sp)
10005be4:	dc400117 	ldw	r17,4(sp)
10005be8:	dc000017 	ldw	r16,0(sp)
10005bec:	dec00504 	addi	sp,sp,20
10005bf0:	f800283a 	ret
10005bf4:	0101ffc4 	movi	r4,2047
10005bf8:	813fd626 	beq	r16,r4,10005b54 <__alt_data_end+0xf8005b54>
10005bfc:	18c02034 	orhi	r3,r3,128
10005c00:	01000e04 	movi	r4,56
10005c04:	2080a416 	blt	r4,r2,10005e98 <__subdf3+0x3d0>
10005c08:	010007c4 	movi	r4,31
10005c0c:	2080c716 	blt	r4,r2,10005f2c <__subdf3+0x464>
10005c10:	01000804 	movi	r4,32
10005c14:	2089c83a 	sub	r4,r4,r2
10005c18:	1910983a 	sll	r8,r3,r4
10005c1c:	308ed83a 	srl	r7,r6,r2
10005c20:	3108983a 	sll	r4,r6,r4
10005c24:	1884d83a 	srl	r2,r3,r2
10005c28:	41ccb03a 	or	r6,r8,r7
10005c2c:	2008c03a 	cmpne	r4,r4,zero
10005c30:	310cb03a 	or	r6,r6,r4
10005c34:	898dc83a 	sub	r6,r17,r6
10005c38:	89a3803a 	cmpltu	r17,r17,r6
10005c3c:	288bc83a 	sub	r5,r5,r2
10005c40:	2c4bc83a 	sub	r5,r5,r17
10005c44:	3023883a 	mov	r17,r6
10005c48:	2880202c 	andhi	r2,r5,128
10005c4c:	10006b26 	beq	r2,zero,10005dfc <__subdf3+0x334>
10005c50:	04c02034 	movhi	r19,128
10005c54:	9cffffc4 	addi	r19,r19,-1
10005c58:	2ce6703a 	and	r19,r5,r19
10005c5c:	98007c26 	beq	r19,zero,10005e50 <__subdf3+0x388>
10005c60:	9809883a 	mov	r4,r19
10005c64:	00065940 	call	10006594 <__clzsi2>
10005c68:	10fffe04 	addi	r3,r2,-8
10005c6c:	010007c4 	movi	r4,31
10005c70:	20c07d16 	blt	r4,r3,10005e68 <__subdf3+0x3a0>
10005c74:	01400a04 	movi	r5,40
10005c78:	2885c83a 	sub	r2,r5,r2
10005c7c:	888ad83a 	srl	r5,r17,r2
10005c80:	98e6983a 	sll	r19,r19,r3
10005c84:	88e2983a 	sll	r17,r17,r3
10005c88:	2ce6b03a 	or	r19,r5,r19
10005c8c:	1c007a16 	blt	r3,r16,10005e78 <__subdf3+0x3b0>
10005c90:	1c21c83a 	sub	r16,r3,r16
10005c94:	81400044 	addi	r5,r16,1
10005c98:	00c007c4 	movi	r3,31
10005c9c:	19409616 	blt	r3,r5,10005ef8 <__subdf3+0x430>
10005ca0:	1c21c83a 	sub	r16,r3,r16
10005ca4:	8c08983a 	sll	r4,r17,r16
10005ca8:	8946d83a 	srl	r3,r17,r5
10005cac:	9c20983a 	sll	r16,r19,r16
10005cb0:	2008c03a 	cmpne	r4,r4,zero
10005cb4:	994ad83a 	srl	r5,r19,r5
10005cb8:	1c06b03a 	or	r3,r3,r16
10005cbc:	1922b03a 	or	r17,r3,r4
10005cc0:	0021883a 	mov	r16,zero
10005cc4:	003fa306 	br	10005b54 <__alt_data_end+0xf8005b54>
10005cc8:	2880202c 	andhi	r2,r5,128
10005ccc:	9200004c 	andi	r8,r18,1
10005cd0:	103fac1e 	bne	r2,zero,10005b84 <__alt_data_end+0xf8005b84>
10005cd4:	2804977a 	slli	r2,r5,29
10005cd8:	8822d0fa 	srli	r17,r17,3
10005cdc:	00c1ffc4 	movi	r3,2047
10005ce0:	280ad0fa 	srli	r5,r5,3
10005ce4:	1444b03a 	or	r2,r2,r17
10005ce8:	80c02726 	beq	r16,r3,10005d88 <__subdf3+0x2c0>
10005cec:	01000434 	movhi	r4,16
10005cf0:	213fffc4 	addi	r4,r4,-1
10005cf4:	80e0703a 	and	r16,r16,r3
10005cf8:	2908703a 	and	r4,r5,r4
10005cfc:	003fad06 	br	10005bb4 <__alt_data_end+0xf8005bb4>
10005d00:	0080690e 	bge	zero,r2,10005ea8 <__subdf3+0x3e0>
10005d04:	50002f26 	beq	r10,zero,10005dc4 <__subdf3+0x2fc>
10005d08:	0101ffc4 	movi	r4,2047
10005d0c:	813f9126 	beq	r16,r4,10005b54 <__alt_data_end+0xf8005b54>
10005d10:	18c02034 	orhi	r3,r3,128
10005d14:	01000e04 	movi	r4,56
10005d18:	2080b00e 	bge	r4,r2,10005fdc <__subdf3+0x514>
10005d1c:	198cb03a 	or	r6,r3,r6
10005d20:	300ec03a 	cmpne	r7,r6,zero
10005d24:	0005883a 	mov	r2,zero
10005d28:	3c4f883a 	add	r7,r7,r17
10005d2c:	3c63803a 	cmpltu	r17,r7,r17
10005d30:	114b883a 	add	r5,r2,r5
10005d34:	2c4b883a 	add	r5,r5,r17
10005d38:	3823883a 	mov	r17,r7
10005d3c:	2880202c 	andhi	r2,r5,128
10005d40:	10002e26 	beq	r2,zero,10005dfc <__subdf3+0x334>
10005d44:	84000044 	addi	r16,r16,1
10005d48:	0081ffc4 	movi	r2,2047
10005d4c:	8080de26 	beq	r16,r2,100060c8 <__subdf3+0x600>
10005d50:	00bfe034 	movhi	r2,65408
10005d54:	10bfffc4 	addi	r2,r2,-1
10005d58:	288a703a 	and	r5,r5,r2
10005d5c:	880cd07a 	srli	r6,r17,1
10005d60:	280897fa 	slli	r4,r5,31
10005d64:	88c0004c 	andi	r3,r17,1
10005d68:	30e2b03a 	or	r17,r6,r3
10005d6c:	280ad07a 	srli	r5,r5,1
10005d70:	8922b03a 	or	r17,r17,r4
10005d74:	003f7706 	br	10005b54 <__alt_data_end+0xf8005b54>
10005d78:	1984b03a 	or	r2,r3,r6
10005d7c:	103f6e26 	beq	r2,zero,10005b38 <__alt_data_end+0xf8005b38>
10005d80:	39c03fcc 	andi	r7,r7,255
10005d84:	003f6d06 	br	10005b3c <__alt_data_end+0xf8005b3c>
10005d88:	1146b03a 	or	r3,r2,r5
10005d8c:	18003f26 	beq	r3,zero,10005e8c <__subdf3+0x3c4>
10005d90:	00c00434 	movhi	r3,16
10005d94:	29000234 	orhi	r4,r5,8
10005d98:	18ffffc4 	addi	r3,r3,-1
10005d9c:	20c8703a 	and	r4,r4,r3
10005da0:	003f8406 	br	10005bb4 <__alt_data_end+0xf8005bb4>
10005da4:	10bfffc4 	addi	r2,r2,-1
10005da8:	1000501e 	bne	r2,zero,10005eec <__subdf3+0x424>
10005dac:	898fc83a 	sub	r7,r17,r6
10005db0:	89e3803a 	cmpltu	r17,r17,r7
10005db4:	28cbc83a 	sub	r5,r5,r3
10005db8:	2c4bc83a 	sub	r5,r5,r17
10005dbc:	3823883a 	mov	r17,r7
10005dc0:	003fa106 	br	10005c48 <__alt_data_end+0xf8005c48>
10005dc4:	1988b03a 	or	r4,r3,r6
10005dc8:	203f6226 	beq	r4,zero,10005b54 <__alt_data_end+0xf8005b54>
10005dcc:	10bfffc4 	addi	r2,r2,-1
10005dd0:	10009b1e 	bne	r2,zero,10006040 <__subdf3+0x578>
10005dd4:	344d883a 	add	r6,r6,r17
10005dd8:	3463803a 	cmpltu	r17,r6,r17
10005ddc:	194b883a 	add	r5,r3,r5
10005de0:	2c4b883a 	add	r5,r5,r17
10005de4:	3023883a 	mov	r17,r6
10005de8:	003fd406 	br	10005d3c <__alt_data_end+0xf8005d3c>
10005dec:	1106b03a 	or	r3,r2,r4
10005df0:	1800b426 	beq	r3,zero,100060c4 <__subdf3+0x5fc>
10005df4:	100b883a 	mov	r5,r2
10005df8:	2023883a 	mov	r17,r4
10005dfc:	888001cc 	andi	r2,r17,7
10005e00:	103f561e 	bne	r2,zero,10005b5c <__alt_data_end+0xf8005b5c>
10005e04:	9200004c 	andi	r8,r18,1
10005e08:	003fb206 	br	10005cd4 <__alt_data_end+0xf8005cd4>
10005e0c:	1000531e 	bne	r2,zero,10005f5c <__subdf3+0x494>
10005e10:	80800044 	addi	r2,r16,1
10005e14:	1081ffcc 	andi	r2,r2,2047
10005e18:	01000044 	movi	r4,1
10005e1c:	2080a00e 	bge	r4,r2,100060a0 <__subdf3+0x5d8>
10005e20:	8985c83a 	sub	r2,r17,r6
10005e24:	8889803a 	cmpltu	r4,r17,r2
10005e28:	28e7c83a 	sub	r19,r5,r3
10005e2c:	9927c83a 	sub	r19,r19,r4
10005e30:	9900202c 	andhi	r4,r19,128
10005e34:	20006226 	beq	r4,zero,10005fc0 <__subdf3+0x4f8>
10005e38:	3463c83a 	sub	r17,r6,r17
10005e3c:	194bc83a 	sub	r5,r3,r5
10005e40:	344d803a 	cmpltu	r6,r6,r17
10005e44:	29a7c83a 	sub	r19,r5,r6
10005e48:	3825883a 	mov	r18,r7
10005e4c:	983f841e 	bne	r19,zero,10005c60 <__alt_data_end+0xf8005c60>
10005e50:	8809883a 	mov	r4,r17
10005e54:	00065940 	call	10006594 <__clzsi2>
10005e58:	10800804 	addi	r2,r2,32
10005e5c:	10fffe04 	addi	r3,r2,-8
10005e60:	010007c4 	movi	r4,31
10005e64:	20ff830e 	bge	r4,r3,10005c74 <__alt_data_end+0xf8005c74>
10005e68:	14fff604 	addi	r19,r2,-40
10005e6c:	8ce6983a 	sll	r19,r17,r19
10005e70:	0023883a 	mov	r17,zero
10005e74:	1c3f860e 	bge	r3,r16,10005c90 <__alt_data_end+0xf8005c90>
10005e78:	017fe034 	movhi	r5,65408
10005e7c:	297fffc4 	addi	r5,r5,-1
10005e80:	80e1c83a 	sub	r16,r16,r3
10005e84:	994a703a 	and	r5,r19,r5
10005e88:	003f3206 	br	10005b54 <__alt_data_end+0xf8005b54>
10005e8c:	0009883a 	mov	r4,zero
10005e90:	0005883a 	mov	r2,zero
10005e94:	003f4706 	br	10005bb4 <__alt_data_end+0xf8005bb4>
10005e98:	198cb03a 	or	r6,r3,r6
10005e9c:	300cc03a 	cmpne	r6,r6,zero
10005ea0:	0005883a 	mov	r2,zero
10005ea4:	003f6306 	br	10005c34 <__alt_data_end+0xf8005c34>
10005ea8:	10009d1e 	bne	r2,zero,10006120 <__subdf3+0x658>
10005eac:	81c00044 	addi	r7,r16,1
10005eb0:	3881ffcc 	andi	r2,r7,2047
10005eb4:	02400044 	movi	r9,1
10005eb8:	4880680e 	bge	r9,r2,1000605c <__subdf3+0x594>
10005ebc:	0081ffc4 	movi	r2,2047
10005ec0:	3880ae26 	beq	r7,r2,1000617c <__subdf3+0x6b4>
10005ec4:	344d883a 	add	r6,r6,r17
10005ec8:	3463803a 	cmpltu	r17,r6,r17
10005ecc:	194b883a 	add	r5,r3,r5
10005ed0:	2c4b883a 	add	r5,r5,r17
10005ed4:	282297fa 	slli	r17,r5,31
10005ed8:	300cd07a 	srli	r6,r6,1
10005edc:	280ad07a 	srli	r5,r5,1
10005ee0:	3821883a 	mov	r16,r7
10005ee4:	89a2b03a 	or	r17,r17,r6
10005ee8:	003f1a06 	br	10005b54 <__alt_data_end+0xf8005b54>
10005eec:	0101ffc4 	movi	r4,2047
10005ef0:	813f431e 	bne	r16,r4,10005c00 <__alt_data_end+0xf8005c00>
10005ef4:	003f1706 	br	10005b54 <__alt_data_end+0xf8005b54>
10005ef8:	80bff844 	addi	r2,r16,-31
10005efc:	00c00804 	movi	r3,32
10005f00:	9884d83a 	srl	r2,r19,r2
10005f04:	28c05126 	beq	r5,r3,1000604c <__subdf3+0x584>
10005f08:	00c00fc4 	movi	r3,63
10005f0c:	1c21c83a 	sub	r16,r3,r16
10005f10:	9c26983a 	sll	r19,r19,r16
10005f14:	9c62b03a 	or	r17,r19,r17
10005f18:	8822c03a 	cmpne	r17,r17,zero
10005f1c:	88a2b03a 	or	r17,r17,r2
10005f20:	000b883a 	mov	r5,zero
10005f24:	0021883a 	mov	r16,zero
10005f28:	003fb406 	br	10005dfc <__alt_data_end+0xf8005dfc>
10005f2c:	113ff804 	addi	r4,r2,-32
10005f30:	01c00804 	movi	r7,32
10005f34:	1908d83a 	srl	r4,r3,r4
10005f38:	11c04626 	beq	r2,r7,10006054 <__subdf3+0x58c>
10005f3c:	01c01004 	movi	r7,64
10005f40:	3885c83a 	sub	r2,r7,r2
10005f44:	1884983a 	sll	r2,r3,r2
10005f48:	118cb03a 	or	r6,r2,r6
10005f4c:	300cc03a 	cmpne	r6,r6,zero
10005f50:	310cb03a 	or	r6,r6,r4
10005f54:	0005883a 	mov	r2,zero
10005f58:	003f3606 	br	10005c34 <__alt_data_end+0xf8005c34>
10005f5c:	80002b26 	beq	r16,zero,1000600c <__subdf3+0x544>
10005f60:	0101ffc4 	movi	r4,2047
10005f64:	51006926 	beq	r10,r4,1000610c <__subdf3+0x644>
10005f68:	0085c83a 	sub	r2,zero,r2
10005f6c:	29402034 	orhi	r5,r5,128
10005f70:	01000e04 	movi	r4,56
10005f74:	20807d16 	blt	r4,r2,1000616c <__subdf3+0x6a4>
10005f78:	010007c4 	movi	r4,31
10005f7c:	2080d916 	blt	r4,r2,100062e4 <__subdf3+0x81c>
10005f80:	01000804 	movi	r4,32
10005f84:	2089c83a 	sub	r4,r4,r2
10005f88:	2912983a 	sll	r9,r5,r4
10005f8c:	8890d83a 	srl	r8,r17,r2
10005f90:	8908983a 	sll	r4,r17,r4
10005f94:	2884d83a 	srl	r2,r5,r2
10005f98:	4a22b03a 	or	r17,r9,r8
10005f9c:	2008c03a 	cmpne	r4,r4,zero
10005fa0:	8922b03a 	or	r17,r17,r4
10005fa4:	3463c83a 	sub	r17,r6,r17
10005fa8:	1885c83a 	sub	r2,r3,r2
10005fac:	344d803a 	cmpltu	r6,r6,r17
10005fb0:	118bc83a 	sub	r5,r2,r6
10005fb4:	5021883a 	mov	r16,r10
10005fb8:	3825883a 	mov	r18,r7
10005fbc:	003f2206 	br	10005c48 <__alt_data_end+0xf8005c48>
10005fc0:	9886b03a 	or	r3,r19,r2
10005fc4:	18001c1e 	bne	r3,zero,10006038 <__subdf3+0x570>
10005fc8:	0011883a 	mov	r8,zero
10005fcc:	000b883a 	mov	r5,zero
10005fd0:	0023883a 	mov	r17,zero
10005fd4:	0021883a 	mov	r16,zero
10005fd8:	003f3e06 	br	10005cd4 <__alt_data_end+0xf8005cd4>
10005fdc:	010007c4 	movi	r4,31
10005fe0:	20803c16 	blt	r4,r2,100060d4 <__subdf3+0x60c>
10005fe4:	01000804 	movi	r4,32
10005fe8:	2089c83a 	sub	r4,r4,r2
10005fec:	1912983a 	sll	r9,r3,r4
10005ff0:	308ed83a 	srl	r7,r6,r2
10005ff4:	3108983a 	sll	r4,r6,r4
10005ff8:	1884d83a 	srl	r2,r3,r2
10005ffc:	49ceb03a 	or	r7,r9,r7
10006000:	2008c03a 	cmpne	r4,r4,zero
10006004:	390eb03a 	or	r7,r7,r4
10006008:	003f4706 	br	10005d28 <__alt_data_end+0xf8005d28>
1000600c:	2c48b03a 	or	r4,r5,r17
10006010:	20003e26 	beq	r4,zero,1000610c <__subdf3+0x644>
10006014:	0084303a 	nor	r2,zero,r2
10006018:	10003a1e 	bne	r2,zero,10006104 <__subdf3+0x63c>
1000601c:	3463c83a 	sub	r17,r6,r17
10006020:	194bc83a 	sub	r5,r3,r5
10006024:	344d803a 	cmpltu	r6,r6,r17
10006028:	298bc83a 	sub	r5,r5,r6
1000602c:	5021883a 	mov	r16,r10
10006030:	3825883a 	mov	r18,r7
10006034:	003f0406 	br	10005c48 <__alt_data_end+0xf8005c48>
10006038:	1023883a 	mov	r17,r2
1000603c:	003f0706 	br	10005c5c <__alt_data_end+0xf8005c5c>
10006040:	0101ffc4 	movi	r4,2047
10006044:	813f331e 	bne	r16,r4,10005d14 <__alt_data_end+0xf8005d14>
10006048:	003ec206 	br	10005b54 <__alt_data_end+0xf8005b54>
1000604c:	0027883a 	mov	r19,zero
10006050:	003fb006 	br	10005f14 <__alt_data_end+0xf8005f14>
10006054:	0005883a 	mov	r2,zero
10006058:	003fbb06 	br	10005f48 <__alt_data_end+0xf8005f48>
1000605c:	2c44b03a 	or	r2,r5,r17
10006060:	80008b1e 	bne	r16,zero,10006290 <__subdf3+0x7c8>
10006064:	1000b526 	beq	r2,zero,1000633c <__subdf3+0x874>
10006068:	1984b03a 	or	r2,r3,r6
1000606c:	103eb926 	beq	r2,zero,10005b54 <__alt_data_end+0xf8005b54>
10006070:	3449883a 	add	r4,r6,r17
10006074:	2463803a 	cmpltu	r17,r4,r17
10006078:	194b883a 	add	r5,r3,r5
1000607c:	2c4b883a 	add	r5,r5,r17
10006080:	2880202c 	andhi	r2,r5,128
10006084:	2023883a 	mov	r17,r4
10006088:	103f5c26 	beq	r2,zero,10005dfc <__alt_data_end+0xf8005dfc>
1000608c:	00bfe034 	movhi	r2,65408
10006090:	10bfffc4 	addi	r2,r2,-1
10006094:	4821883a 	mov	r16,r9
10006098:	288a703a 	and	r5,r5,r2
1000609c:	003ead06 	br	10005b54 <__alt_data_end+0xf8005b54>
100060a0:	2c44b03a 	or	r2,r5,r17
100060a4:	8000291e 	bne	r16,zero,1000614c <__subdf3+0x684>
100060a8:	10004f1e 	bne	r2,zero,100061e8 <__subdf3+0x720>
100060ac:	1984b03a 	or	r2,r3,r6
100060b0:	10000426 	beq	r2,zero,100060c4 <__subdf3+0x5fc>
100060b4:	180b883a 	mov	r5,r3
100060b8:	3023883a 	mov	r17,r6
100060bc:	3825883a 	mov	r18,r7
100060c0:	003ea406 	br	10005b54 <__alt_data_end+0xf8005b54>
100060c4:	0011883a 	mov	r8,zero
100060c8:	000b883a 	mov	r5,zero
100060cc:	0023883a 	mov	r17,zero
100060d0:	003f0006 	br	10005cd4 <__alt_data_end+0xf8005cd4>
100060d4:	11fff804 	addi	r7,r2,-32
100060d8:	19c8d83a 	srl	r4,r3,r7
100060dc:	01c00804 	movi	r7,32
100060e0:	11c07e26 	beq	r2,r7,100062dc <__subdf3+0x814>
100060e4:	01c01004 	movi	r7,64
100060e8:	3885c83a 	sub	r2,r7,r2
100060ec:	1884983a 	sll	r2,r3,r2
100060f0:	118cb03a 	or	r6,r2,r6
100060f4:	300ec03a 	cmpne	r7,r6,zero
100060f8:	390eb03a 	or	r7,r7,r4
100060fc:	0005883a 	mov	r2,zero
10006100:	003f0906 	br	10005d28 <__alt_data_end+0xf8005d28>
10006104:	0101ffc4 	movi	r4,2047
10006108:	513f991e 	bne	r10,r4,10005f70 <__alt_data_end+0xf8005f70>
1000610c:	180b883a 	mov	r5,r3
10006110:	3023883a 	mov	r17,r6
10006114:	5021883a 	mov	r16,r10
10006118:	3825883a 	mov	r18,r7
1000611c:	003e8d06 	br	10005b54 <__alt_data_end+0xf8005b54>
10006120:	80001a1e 	bne	r16,zero,1000618c <__subdf3+0x6c4>
10006124:	2c48b03a 	or	r4,r5,r17
10006128:	20005526 	beq	r4,zero,10006280 <__subdf3+0x7b8>
1000612c:	0084303a 	nor	r2,zero,r2
10006130:	1000511e 	bne	r2,zero,10006278 <__subdf3+0x7b0>
10006134:	89a3883a 	add	r17,r17,r6
10006138:	194b883a 	add	r5,r3,r5
1000613c:	898d803a 	cmpltu	r6,r17,r6
10006140:	298b883a 	add	r5,r5,r6
10006144:	5021883a 	mov	r16,r10
10006148:	003efc06 	br	10005d3c <__alt_data_end+0xf8005d3c>
1000614c:	1000341e 	bne	r2,zero,10006220 <__subdf3+0x758>
10006150:	1984b03a 	or	r2,r3,r6
10006154:	10006f26 	beq	r2,zero,10006314 <__subdf3+0x84c>
10006158:	180b883a 	mov	r5,r3
1000615c:	3023883a 	mov	r17,r6
10006160:	3825883a 	mov	r18,r7
10006164:	0401ffc4 	movi	r16,2047
10006168:	003e7a06 	br	10005b54 <__alt_data_end+0xf8005b54>
1000616c:	2c62b03a 	or	r17,r5,r17
10006170:	8822c03a 	cmpne	r17,r17,zero
10006174:	0005883a 	mov	r2,zero
10006178:	003f8a06 	br	10005fa4 <__alt_data_end+0xf8005fa4>
1000617c:	3821883a 	mov	r16,r7
10006180:	000b883a 	mov	r5,zero
10006184:	0023883a 	mov	r17,zero
10006188:	003ed206 	br	10005cd4 <__alt_data_end+0xf8005cd4>
1000618c:	0101ffc4 	movi	r4,2047
10006190:	51003b26 	beq	r10,r4,10006280 <__subdf3+0x7b8>
10006194:	0085c83a 	sub	r2,zero,r2
10006198:	29402034 	orhi	r5,r5,128
1000619c:	01000e04 	movi	r4,56
100061a0:	20806216 	blt	r4,r2,1000632c <__subdf3+0x864>
100061a4:	010007c4 	movi	r4,31
100061a8:	20806b16 	blt	r4,r2,10006358 <__subdf3+0x890>
100061ac:	01000804 	movi	r4,32
100061b0:	2089c83a 	sub	r4,r4,r2
100061b4:	2912983a 	sll	r9,r5,r4
100061b8:	888ed83a 	srl	r7,r17,r2
100061bc:	8908983a 	sll	r4,r17,r4
100061c0:	2884d83a 	srl	r2,r5,r2
100061c4:	49e2b03a 	or	r17,r9,r7
100061c8:	2008c03a 	cmpne	r4,r4,zero
100061cc:	8922b03a 	or	r17,r17,r4
100061d0:	89a3883a 	add	r17,r17,r6
100061d4:	10c5883a 	add	r2,r2,r3
100061d8:	898d803a 	cmpltu	r6,r17,r6
100061dc:	118b883a 	add	r5,r2,r6
100061e0:	5021883a 	mov	r16,r10
100061e4:	003ed506 	br	10005d3c <__alt_data_end+0xf8005d3c>
100061e8:	1984b03a 	or	r2,r3,r6
100061ec:	103e5926 	beq	r2,zero,10005b54 <__alt_data_end+0xf8005b54>
100061f0:	8989c83a 	sub	r4,r17,r6
100061f4:	8911803a 	cmpltu	r8,r17,r4
100061f8:	28c5c83a 	sub	r2,r5,r3
100061fc:	1205c83a 	sub	r2,r2,r8
10006200:	1200202c 	andhi	r8,r2,128
10006204:	403ef926 	beq	r8,zero,10005dec <__alt_data_end+0xf8005dec>
10006208:	3463c83a 	sub	r17,r6,r17
1000620c:	194bc83a 	sub	r5,r3,r5
10006210:	344d803a 	cmpltu	r6,r6,r17
10006214:	298bc83a 	sub	r5,r5,r6
10006218:	3825883a 	mov	r18,r7
1000621c:	003e4d06 	br	10005b54 <__alt_data_end+0xf8005b54>
10006220:	1984b03a 	or	r2,r3,r6
10006224:	10002b26 	beq	r2,zero,100062d4 <__subdf3+0x80c>
10006228:	2808d0fa 	srli	r4,r5,3
1000622c:	8822d0fa 	srli	r17,r17,3
10006230:	280a977a 	slli	r5,r5,29
10006234:	2080022c 	andhi	r2,r4,8
10006238:	2c62b03a 	or	r17,r5,r17
1000623c:	10000826 	beq	r2,zero,10006260 <__subdf3+0x798>
10006240:	1810d0fa 	srli	r8,r3,3
10006244:	4080022c 	andhi	r2,r8,8
10006248:	1000051e 	bne	r2,zero,10006260 <__subdf3+0x798>
1000624c:	300cd0fa 	srli	r6,r6,3
10006250:	1804977a 	slli	r2,r3,29
10006254:	4009883a 	mov	r4,r8
10006258:	3825883a 	mov	r18,r7
1000625c:	11a2b03a 	or	r17,r2,r6
10006260:	880ad77a 	srli	r5,r17,29
10006264:	200890fa 	slli	r4,r4,3
10006268:	882290fa 	slli	r17,r17,3
1000626c:	0401ffc4 	movi	r16,2047
10006270:	290ab03a 	or	r5,r5,r4
10006274:	003e3706 	br	10005b54 <__alt_data_end+0xf8005b54>
10006278:	0101ffc4 	movi	r4,2047
1000627c:	513fc71e 	bne	r10,r4,1000619c <__alt_data_end+0xf800619c>
10006280:	180b883a 	mov	r5,r3
10006284:	3023883a 	mov	r17,r6
10006288:	5021883a 	mov	r16,r10
1000628c:	003e3106 	br	10005b54 <__alt_data_end+0xf8005b54>
10006290:	10002d26 	beq	r2,zero,10006348 <__subdf3+0x880>
10006294:	1984b03a 	or	r2,r3,r6
10006298:	10000e26 	beq	r2,zero,100062d4 <__subdf3+0x80c>
1000629c:	2808d0fa 	srli	r4,r5,3
100062a0:	8822d0fa 	srli	r17,r17,3
100062a4:	280a977a 	slli	r5,r5,29
100062a8:	2080022c 	andhi	r2,r4,8
100062ac:	2c62b03a 	or	r17,r5,r17
100062b0:	103feb26 	beq	r2,zero,10006260 <__alt_data_end+0xf8006260>
100062b4:	180ed0fa 	srli	r7,r3,3
100062b8:	3880022c 	andhi	r2,r7,8
100062bc:	103fe81e 	bne	r2,zero,10006260 <__alt_data_end+0xf8006260>
100062c0:	300cd0fa 	srli	r6,r6,3
100062c4:	1804977a 	slli	r2,r3,29
100062c8:	3809883a 	mov	r4,r7
100062cc:	11a2b03a 	or	r17,r2,r6
100062d0:	003fe306 	br	10006260 <__alt_data_end+0xf8006260>
100062d4:	0401ffc4 	movi	r16,2047
100062d8:	003e1e06 	br	10005b54 <__alt_data_end+0xf8005b54>
100062dc:	0005883a 	mov	r2,zero
100062e0:	003f8306 	br	100060f0 <__alt_data_end+0xf80060f0>
100062e4:	113ff804 	addi	r4,r2,-32
100062e8:	02000804 	movi	r8,32
100062ec:	2908d83a 	srl	r4,r5,r4
100062f0:	12002526 	beq	r2,r8,10006388 <__subdf3+0x8c0>
100062f4:	02001004 	movi	r8,64
100062f8:	4085c83a 	sub	r2,r8,r2
100062fc:	288a983a 	sll	r5,r5,r2
10006300:	2c62b03a 	or	r17,r5,r17
10006304:	8822c03a 	cmpne	r17,r17,zero
10006308:	8922b03a 	or	r17,r17,r4
1000630c:	0005883a 	mov	r2,zero
10006310:	003f2406 	br	10005fa4 <__alt_data_end+0xf8005fa4>
10006314:	01402034 	movhi	r5,128
10006318:	0011883a 	mov	r8,zero
1000631c:	297fffc4 	addi	r5,r5,-1
10006320:	047ffe04 	movi	r17,-8
10006324:	0401ffc4 	movi	r16,2047
10006328:	003e6a06 	br	10005cd4 <__alt_data_end+0xf8005cd4>
1000632c:	2c62b03a 	or	r17,r5,r17
10006330:	8822c03a 	cmpne	r17,r17,zero
10006334:	0005883a 	mov	r2,zero
10006338:	003fa506 	br	100061d0 <__alt_data_end+0xf80061d0>
1000633c:	180b883a 	mov	r5,r3
10006340:	3023883a 	mov	r17,r6
10006344:	003e0306 	br	10005b54 <__alt_data_end+0xf8005b54>
10006348:	180b883a 	mov	r5,r3
1000634c:	3023883a 	mov	r17,r6
10006350:	0401ffc4 	movi	r16,2047
10006354:	003dff06 	br	10005b54 <__alt_data_end+0xf8005b54>
10006358:	113ff804 	addi	r4,r2,-32
1000635c:	01c00804 	movi	r7,32
10006360:	2908d83a 	srl	r4,r5,r4
10006364:	11c00a26 	beq	r2,r7,10006390 <__subdf3+0x8c8>
10006368:	01c01004 	movi	r7,64
1000636c:	3885c83a 	sub	r2,r7,r2
10006370:	288a983a 	sll	r5,r5,r2
10006374:	2c62b03a 	or	r17,r5,r17
10006378:	8822c03a 	cmpne	r17,r17,zero
1000637c:	8922b03a 	or	r17,r17,r4
10006380:	0005883a 	mov	r2,zero
10006384:	003f9206 	br	100061d0 <__alt_data_end+0xf80061d0>
10006388:	000b883a 	mov	r5,zero
1000638c:	003fdc06 	br	10006300 <__alt_data_end+0xf8006300>
10006390:	000b883a 	mov	r5,zero
10006394:	003ff706 	br	10006374 <__alt_data_end+0xf8006374>

10006398 <__fixdfsi>:
10006398:	2806d53a 	srli	r3,r5,20
1000639c:	00800434 	movhi	r2,16
100063a0:	10bfffc4 	addi	r2,r2,-1
100063a4:	18c1ffcc 	andi	r3,r3,2047
100063a8:	0180ff84 	movi	r6,1022
100063ac:	2884703a 	and	r2,r5,r2
100063b0:	280ad7fa 	srli	r5,r5,31
100063b4:	30c0130e 	bge	r6,r3,10006404 <__fixdfsi+0x6c>
100063b8:	01810744 	movi	r6,1053
100063bc:	30c00d16 	blt	r6,r3,100063f4 <__fixdfsi+0x5c>
100063c0:	01810cc4 	movi	r6,1075
100063c4:	30cdc83a 	sub	r6,r6,r3
100063c8:	01c007c4 	movi	r7,31
100063cc:	10800434 	orhi	r2,r2,16
100063d0:	39800e0e 	bge	r7,r6,1000640c <__fixdfsi+0x74>
100063d4:	010104c4 	movi	r4,1043
100063d8:	20c7c83a 	sub	r3,r4,r3
100063dc:	10c6d83a 	srl	r3,r2,r3
100063e0:	29403fcc 	andi	r5,r5,255
100063e4:	0145c83a 	sub	r2,zero,r5
100063e8:	1884f03a 	xor	r2,r3,r2
100063ec:	1145883a 	add	r2,r2,r5
100063f0:	f800283a 	ret
100063f4:	00a00034 	movhi	r2,32768
100063f8:	10bfffc4 	addi	r2,r2,-1
100063fc:	2885883a 	add	r2,r5,r2
10006400:	f800283a 	ret
10006404:	0005883a 	mov	r2,zero
10006408:	f800283a 	ret
1000640c:	18fefb44 	addi	r3,r3,-1043
10006410:	2188d83a 	srl	r4,r4,r6
10006414:	10c6983a 	sll	r3,r2,r3
10006418:	20c6b03a 	or	r3,r4,r3
1000641c:	003ff006 	br	100063e0 <__alt_data_end+0xf80063e0>

10006420 <__floatsidf>:
10006420:	defffd04 	addi	sp,sp,-12
10006424:	dc400115 	stw	r17,4(sp)
10006428:	dfc00215 	stw	ra,8(sp)
1000642c:	dc000015 	stw	r16,0(sp)
10006430:	2023883a 	mov	r17,r4
10006434:	20001426 	beq	r4,zero,10006488 <__floatsidf+0x68>
10006438:	2020d7fa 	srli	r16,r4,31
1000643c:	80000126 	beq	r16,zero,10006444 <__floatsidf+0x24>
10006440:	0123c83a 	sub	r17,zero,r4
10006444:	8809883a 	mov	r4,r17
10006448:	00065940 	call	10006594 <__clzsi2>
1000644c:	01410784 	movi	r5,1054
10006450:	00c00284 	movi	r3,10
10006454:	288bc83a 	sub	r5,r5,r2
10006458:	18801c16 	blt	r3,r2,100064cc <__floatsidf+0xac>
1000645c:	00c002c4 	movi	r3,11
10006460:	1887c83a 	sub	r3,r3,r2
10006464:	88c8d83a 	srl	r4,r17,r3
10006468:	00c00434 	movhi	r3,16
1000646c:	18ffffc4 	addi	r3,r3,-1
10006470:	10800544 	addi	r2,r2,21
10006474:	20c8703a 	and	r4,r4,r3
10006478:	8884983a 	sll	r2,r17,r2
1000647c:	28c1ffcc 	andi	r3,r5,2047
10006480:	800d883a 	mov	r6,r16
10006484:	00000406 	br	10006498 <__floatsidf+0x78>
10006488:	000d883a 	mov	r6,zero
1000648c:	0007883a 	mov	r3,zero
10006490:	0009883a 	mov	r4,zero
10006494:	0005883a 	mov	r2,zero
10006498:	180a953a 	slli	r5,r3,20
1000649c:	31803fcc 	andi	r6,r6,255
100064a0:	00c00434 	movhi	r3,16
100064a4:	300c97fa 	slli	r6,r6,31
100064a8:	18ffffc4 	addi	r3,r3,-1
100064ac:	20c6703a 	and	r3,r4,r3
100064b0:	1946b03a 	or	r3,r3,r5
100064b4:	1986b03a 	or	r3,r3,r6
100064b8:	dfc00217 	ldw	ra,8(sp)
100064bc:	dc400117 	ldw	r17,4(sp)
100064c0:	dc000017 	ldw	r16,0(sp)
100064c4:	dec00304 	addi	sp,sp,12
100064c8:	f800283a 	ret
100064cc:	10fffd44 	addi	r3,r2,-11
100064d0:	88c8983a 	sll	r4,r17,r3
100064d4:	00800434 	movhi	r2,16
100064d8:	10bfffc4 	addi	r2,r2,-1
100064dc:	2088703a 	and	r4,r4,r2
100064e0:	28c1ffcc 	andi	r3,r5,2047
100064e4:	800d883a 	mov	r6,r16
100064e8:	0005883a 	mov	r2,zero
100064ec:	003fea06 	br	10006498 <__alt_data_end+0xf8006498>

100064f0 <__floatunsidf>:
100064f0:	defffe04 	addi	sp,sp,-8
100064f4:	dc000015 	stw	r16,0(sp)
100064f8:	dfc00115 	stw	ra,4(sp)
100064fc:	2021883a 	mov	r16,r4
10006500:	20001026 	beq	r4,zero,10006544 <__floatunsidf+0x54>
10006504:	00065940 	call	10006594 <__clzsi2>
10006508:	01410784 	movi	r5,1054
1000650c:	100d883a 	mov	r6,r2
10006510:	288bc83a 	sub	r5,r5,r2
10006514:	00800284 	movi	r2,10
10006518:	11801616 	blt	r2,r6,10006574 <__floatunsidf+0x84>
1000651c:	008002c4 	movi	r2,11
10006520:	1185c83a 	sub	r2,r2,r6
10006524:	8084d83a 	srl	r2,r16,r2
10006528:	00c00434 	movhi	r3,16
1000652c:	31c00544 	addi	r7,r6,21
10006530:	18ffffc4 	addi	r3,r3,-1
10006534:	81e0983a 	sll	r16,r16,r7
10006538:	10cc703a 	and	r6,r2,r3
1000653c:	2941ffcc 	andi	r5,r5,2047
10006540:	00000206 	br	1000654c <__floatunsidf+0x5c>
10006544:	000b883a 	mov	r5,zero
10006548:	000d883a 	mov	r6,zero
1000654c:	280a953a 	slli	r5,r5,20
10006550:	00c00434 	movhi	r3,16
10006554:	18ffffc4 	addi	r3,r3,-1
10006558:	30c6703a 	and	r3,r6,r3
1000655c:	8005883a 	mov	r2,r16
10006560:	1946b03a 	or	r3,r3,r5
10006564:	dfc00117 	ldw	ra,4(sp)
10006568:	dc000017 	ldw	r16,0(sp)
1000656c:	dec00204 	addi	sp,sp,8
10006570:	f800283a 	ret
10006574:	31bffd44 	addi	r6,r6,-11
10006578:	818c983a 	sll	r6,r16,r6
1000657c:	00800434 	movhi	r2,16
10006580:	10bfffc4 	addi	r2,r2,-1
10006584:	2941ffcc 	andi	r5,r5,2047
10006588:	0021883a 	mov	r16,zero
1000658c:	308c703a 	and	r6,r6,r2
10006590:	003fee06 	br	1000654c <__alt_data_end+0xf800654c>

10006594 <__clzsi2>:
10006594:	00bfffd4 	movui	r2,65535
10006598:	11000b36 	bltu	r2,r4,100065c8 <__clzsi2+0x34>
1000659c:	00803fc4 	movi	r2,255
100065a0:	1100122e 	bgeu	r2,r4,100065ec <__clzsi2+0x58>
100065a4:	00c00204 	movi	r3,8
100065a8:	01400604 	movi	r5,24
100065ac:	20c8d83a 	srl	r4,r4,r3
100065b0:	00840074 	movhi	r2,4097
100065b4:	10884104 	addi	r2,r2,8452
100065b8:	1109883a 	add	r4,r2,r4
100065bc:	20800003 	ldbu	r2,0(r4)
100065c0:	2885c83a 	sub	r2,r5,r2
100065c4:	f800283a 	ret
100065c8:	00804034 	movhi	r2,256
100065cc:	10bfffc4 	addi	r2,r2,-1
100065d0:	11000336 	bltu	r2,r4,100065e0 <__clzsi2+0x4c>
100065d4:	00c00404 	movi	r3,16
100065d8:	180b883a 	mov	r5,r3
100065dc:	003ff306 	br	100065ac <__alt_data_end+0xf80065ac>
100065e0:	00c00604 	movi	r3,24
100065e4:	01400204 	movi	r5,8
100065e8:	003ff006 	br	100065ac <__alt_data_end+0xf80065ac>
100065ec:	0007883a 	mov	r3,zero
100065f0:	01400804 	movi	r5,32
100065f4:	003fed06 	br	100065ac <__alt_data_end+0xf80065ac>

100065f8 <__errno>:
100065f8:	00840074 	movhi	r2,4097
100065fc:	108fad04 	addi	r2,r2,16052
10006600:	10800017 	ldw	r2,0(r2)
10006604:	f800283a 	ret

10006608 <_printf_r>:
10006608:	defffd04 	addi	sp,sp,-12
1000660c:	dfc00015 	stw	ra,0(sp)
10006610:	d9800115 	stw	r6,4(sp)
10006614:	d9c00215 	stw	r7,8(sp)
10006618:	280d883a 	mov	r6,r5
1000661c:	21400217 	ldw	r5,8(r4)
10006620:	d9c00104 	addi	r7,sp,4
10006624:	00066ec0 	call	100066ec <___vfprintf_internal_r>
10006628:	dfc00017 	ldw	ra,0(sp)
1000662c:	dec00304 	addi	sp,sp,12
10006630:	f800283a 	ret

10006634 <printf>:
10006634:	defffc04 	addi	sp,sp,-16
10006638:	dfc00015 	stw	ra,0(sp)
1000663c:	d9400115 	stw	r5,4(sp)
10006640:	d9800215 	stw	r6,8(sp)
10006644:	d9c00315 	stw	r7,12(sp)
10006648:	00840074 	movhi	r2,4097
1000664c:	108fad04 	addi	r2,r2,16052
10006650:	10800017 	ldw	r2,0(r2)
10006654:	200b883a 	mov	r5,r4
10006658:	d9800104 	addi	r6,sp,4
1000665c:	11000217 	ldw	r4,8(r2)
10006660:	00087e80 	call	100087e8 <__vfprintf_internal>
10006664:	dfc00017 	ldw	ra,0(sp)
10006668:	dec00404 	addi	sp,sp,16
1000666c:	f800283a 	ret

10006670 <srand>:
10006670:	00840074 	movhi	r2,4097
10006674:	108fad04 	addi	r2,r2,16052
10006678:	10800017 	ldw	r2,0(r2)
1000667c:	11002915 	stw	r4,164(r2)
10006680:	10002a15 	stw	zero,168(r2)
10006684:	f800283a 	ret

10006688 <rand>:
10006688:	00840074 	movhi	r2,4097
1000668c:	defffe04 	addi	sp,sp,-8
10006690:	108fad04 	addi	r2,r2,16052
10006694:	dc000015 	stw	r16,0(sp)
10006698:	14000017 	ldw	r16,0(r2)
1000669c:	dfc00115 	stw	ra,4(sp)
100066a0:	01932574 	movhi	r6,19605
100066a4:	81002917 	ldw	r4,164(r16)
100066a8:	81402a17 	ldw	r5,168(r16)
100066ac:	01d614b4 	movhi	r7,22610
100066b0:	319fcb44 	addi	r6,r6,32557
100066b4:	39fd0b44 	addi	r7,r7,-3027
100066b8:	0002ecc0 	call	10002ecc <__muldi3>
100066bc:	11000044 	addi	r4,r2,1
100066c0:	2085803a 	cmpltu	r2,r4,r2
100066c4:	10c7883a 	add	r3,r2,r3
100066c8:	00a00034 	movhi	r2,32768
100066cc:	10bfffc4 	addi	r2,r2,-1
100066d0:	1884703a 	and	r2,r3,r2
100066d4:	81002915 	stw	r4,164(r16)
100066d8:	80c02a15 	stw	r3,168(r16)
100066dc:	dfc00117 	ldw	ra,4(sp)
100066e0:	dc000017 	ldw	r16,0(sp)
100066e4:	dec00204 	addi	sp,sp,8
100066e8:	f800283a 	ret

100066ec <___vfprintf_internal_r>:
100066ec:	defeb604 	addi	sp,sp,-1320
100066f0:	dfc14915 	stw	ra,1316(sp)
100066f4:	ddc14715 	stw	r23,1308(sp)
100066f8:	dd814615 	stw	r22,1304(sp)
100066fc:	202f883a 	mov	r23,r4
10006700:	282d883a 	mov	r22,r5
10006704:	d9812a15 	stw	r6,1192(sp)
10006708:	d9c12d15 	stw	r7,1204(sp)
1000670c:	df014815 	stw	fp,1312(sp)
10006710:	dd414515 	stw	r21,1300(sp)
10006714:	dd014415 	stw	r20,1296(sp)
10006718:	dcc14315 	stw	r19,1292(sp)
1000671c:	dc814215 	stw	r18,1288(sp)
10006720:	dc414115 	stw	r17,1284(sp)
10006724:	dc014015 	stw	r16,1280(sp)
10006728:	000aec80 	call	1000aec8 <_localeconv_r>
1000672c:	10800017 	ldw	r2,0(r2)
10006730:	1009883a 	mov	r4,r2
10006734:	d8813515 	stw	r2,1236(sp)
10006738:	000ce1c0 	call	1000ce1c <strlen>
1000673c:	d8813815 	stw	r2,1248(sp)
10006740:	b8000226 	beq	r23,zero,1000674c <___vfprintf_internal_r+0x60>
10006744:	b8800e17 	ldw	r2,56(r23)
10006748:	10010526 	beq	r2,zero,10006b60 <___vfprintf_internal_r+0x474>
1000674c:	b0c0030b 	ldhu	r3,12(r22)
10006750:	1908000c 	andi	r4,r3,8192
10006754:	1805883a 	mov	r2,r3
10006758:	2000071e 	bne	r4,zero,10006778 <___vfprintf_internal_r+0x8c>
1000675c:	b1001917 	ldw	r4,100(r22)
10006760:	18880014 	ori	r2,r3,8192
10006764:	00f7ffc4 	movi	r3,-8193
10006768:	20c8703a 	and	r4,r4,r3
1000676c:	b080030d 	sth	r2,12(r22)
10006770:	1007883a 	mov	r3,r2
10006774:	b1001915 	stw	r4,100(r22)
10006778:	1100020c 	andi	r4,r2,8
1000677c:	2000a826 	beq	r4,zero,10006a20 <___vfprintf_internal_r+0x334>
10006780:	b1000417 	ldw	r4,16(r22)
10006784:	2000a626 	beq	r4,zero,10006a20 <___vfprintf_internal_r+0x334>
10006788:	1080068c 	andi	r2,r2,26
1000678c:	01000284 	movi	r4,10
10006790:	1100ac26 	beq	r2,r4,10006a44 <___vfprintf_internal_r+0x358>
10006794:	d8c10e04 	addi	r3,sp,1080
10006798:	d9010dc4 	addi	r4,sp,1079
1000679c:	d9400404 	addi	r5,sp,16
100067a0:	05040074 	movhi	r20,4097
100067a4:	1905c83a 	sub	r2,r3,r4
100067a8:	a5089284 	addi	r20,r20,8778
100067ac:	d8c12815 	stw	r3,1184(sp)
100067b0:	d9012915 	stw	r4,1188(sp)
100067b4:	d9411e15 	stw	r5,1144(sp)
100067b8:	d8012015 	stw	zero,1152(sp)
100067bc:	d8011f15 	stw	zero,1148(sp)
100067c0:	d8013315 	stw	zero,1228(sp)
100067c4:	d8013715 	stw	zero,1244(sp)
100067c8:	d8013915 	stw	zero,1252(sp)
100067cc:	d8013b15 	stw	zero,1260(sp)
100067d0:	d8013a15 	stw	zero,1256(sp)
100067d4:	d8012f15 	stw	zero,1212(sp)
100067d8:	2811883a 	mov	r8,r5
100067dc:	d8813c15 	stw	r2,1264(sp)
100067e0:	d8c12a17 	ldw	r3,1192(sp)
100067e4:	18800007 	ldb	r2,0(r3)
100067e8:	10021326 	beq	r2,zero,10007038 <___vfprintf_internal_r+0x94c>
100067ec:	00c00944 	movi	r3,37
100067f0:	dc012a17 	ldw	r16,1192(sp)
100067f4:	10c0021e 	bne	r2,r3,10006800 <___vfprintf_internal_r+0x114>
100067f8:	00001606 	br	10006854 <___vfprintf_internal_r+0x168>
100067fc:	10c08526 	beq	r2,r3,10006a14 <___vfprintf_internal_r+0x328>
10006800:	84000044 	addi	r16,r16,1
10006804:	80800007 	ldb	r2,0(r16)
10006808:	103ffc1e 	bne	r2,zero,100067fc <__alt_data_end+0xf80067fc>
1000680c:	d9012a17 	ldw	r4,1192(sp)
10006810:	8123c83a 	sub	r17,r16,r4
10006814:	88000f26 	beq	r17,zero,10006854 <___vfprintf_internal_r+0x168>
10006818:	d8812a17 	ldw	r2,1192(sp)
1000681c:	d8c12017 	ldw	r3,1152(sp)
10006820:	44400115 	stw	r17,4(r8)
10006824:	40800015 	stw	r2,0(r8)
10006828:	d8811f17 	ldw	r2,1148(sp)
1000682c:	1c47883a 	add	r3,r3,r17
10006830:	d8c12015 	stw	r3,1152(sp)
10006834:	10800044 	addi	r2,r2,1
10006838:	d8811f15 	stw	r2,1148(sp)
1000683c:	00c001c4 	movi	r3,7
10006840:	1880b516 	blt	r3,r2,10006b18 <___vfprintf_internal_r+0x42c>
10006844:	42000204 	addi	r8,r8,8
10006848:	d8c12f17 	ldw	r3,1212(sp)
1000684c:	1c47883a 	add	r3,r3,r17
10006850:	d8c12f15 	stw	r3,1212(sp)
10006854:	80800007 	ldb	r2,0(r16)
10006858:	1000b626 	beq	r2,zero,10006b34 <___vfprintf_internal_r+0x448>
1000685c:	80800044 	addi	r2,r16,1
10006860:	84000047 	ldb	r16,1(r16)
10006864:	0027883a 	mov	r19,zero
10006868:	0039883a 	mov	fp,zero
1000686c:	dcc12b05 	stb	r19,1196(sp)
10006870:	d8012785 	stb	zero,1182(sp)
10006874:	027fffc4 	movi	r9,-1
10006878:	d8012e15 	stw	zero,1208(sp)
1000687c:	04401604 	movi	r17,88
10006880:	04800244 	movi	r18,9
10006884:	da012a15 	stw	r8,1192(sp)
10006888:	e027883a 	mov	r19,fp
1000688c:	17000044 	addi	fp,r2,1
10006890:	80bff804 	addi	r2,r16,-32
10006894:	88831236 	bltu	r17,r2,100074e0 <___vfprintf_internal_r+0xdf4>
10006898:	100490ba 	slli	r2,r2,2
1000689c:	01040034 	movhi	r4,4096
100068a0:	211a2c04 	addi	r4,r4,26800
100068a4:	1105883a 	add	r2,r2,r4
100068a8:	10800017 	ldw	r2,0(r2)
100068ac:	1000683a 	jmp	r2
100068b0:	100073fc 	xorhi	zero,r2,463
100068b4:	100074e0 	cmpeqi	zero,r2,467
100068b8:	100074e0 	cmpeqi	zero,r2,467
100068bc:	10007418 	cmpnei	zero,r2,464
100068c0:	100074e0 	cmpeqi	zero,r2,467
100068c4:	100074e0 	cmpeqi	zero,r2,467
100068c8:	100074e0 	cmpeqi	zero,r2,467
100068cc:	100074e0 	cmpeqi	zero,r2,467
100068d0:	100074e0 	cmpeqi	zero,r2,467
100068d4:	100074e0 	cmpeqi	zero,r2,467
100068d8:	10007428 	cmpgeui	zero,r2,464
100068dc:	10007450 	cmplti	zero,r2,465
100068e0:	100074e0 	cmpeqi	zero,r2,467
100068e4:	10006b6c 	andhi	zero,r2,429
100068e8:	10006b7c 	xorhi	zero,r2,429
100068ec:	100074e0 	cmpeqi	zero,r2,467
100068f0:	10006bcc 	andi	zero,r2,431
100068f4:	10006bdc 	xori	zero,r2,431
100068f8:	10006bdc 	xori	zero,r2,431
100068fc:	10006bdc 	xori	zero,r2,431
10006900:	10006bdc 	xori	zero,r2,431
10006904:	10006bdc 	xori	zero,r2,431
10006908:	10006bdc 	xori	zero,r2,431
1000690c:	10006bdc 	xori	zero,r2,431
10006910:	10006bdc 	xori	zero,r2,431
10006914:	10006bdc 	xori	zero,r2,431
10006918:	100074e0 	cmpeqi	zero,r2,467
1000691c:	100074e0 	cmpeqi	zero,r2,467
10006920:	100074e0 	cmpeqi	zero,r2,467
10006924:	100074e0 	cmpeqi	zero,r2,467
10006928:	100074e0 	cmpeqi	zero,r2,467
1000692c:	100074e0 	cmpeqi	zero,r2,467
10006930:	100074e0 	cmpeqi	zero,r2,467
10006934:	100074e0 	cmpeqi	zero,r2,467
10006938:	100074e0 	cmpeqi	zero,r2,467
1000693c:	100074e0 	cmpeqi	zero,r2,467
10006940:	10006c20 	cmpeqi	zero,r2,432
10006944:	10007040 	call	11000704 <_gp+0xfe4858>
10006948:	100074e0 	cmpeqi	zero,r2,467
1000694c:	10007040 	call	11000704 <_gp+0xfe4858>
10006950:	100074e0 	cmpeqi	zero,r2,467
10006954:	100074e0 	cmpeqi	zero,r2,467
10006958:	100074e0 	cmpeqi	zero,r2,467
1000695c:	100074e0 	cmpeqi	zero,r2,467
10006960:	100070e8 	cmpgeui	zero,r2,451
10006964:	100074e0 	cmpeqi	zero,r2,467
10006968:	100074e0 	cmpeqi	zero,r2,467
1000696c:	100070f8 	rdprs	zero,r2,451
10006970:	100074e0 	cmpeqi	zero,r2,467
10006974:	100074e0 	cmpeqi	zero,r2,467
10006978:	100074e0 	cmpeqi	zero,r2,467
1000697c:	100074e0 	cmpeqi	zero,r2,467
10006980:	100074e0 	cmpeqi	zero,r2,467
10006984:	1000713c 	xorhi	zero,r2,452
10006988:	100074e0 	cmpeqi	zero,r2,467
1000698c:	100074e0 	cmpeqi	zero,r2,467
10006990:	10007174 	orhi	zero,r2,453
10006994:	100074e0 	cmpeqi	zero,r2,467
10006998:	100074e0 	cmpeqi	zero,r2,467
1000699c:	100074e0 	cmpeqi	zero,r2,467
100069a0:	100074e0 	cmpeqi	zero,r2,467
100069a4:	100074e0 	cmpeqi	zero,r2,467
100069a8:	100074e0 	cmpeqi	zero,r2,467
100069ac:	100074e0 	cmpeqi	zero,r2,467
100069b0:	100074e0 	cmpeqi	zero,r2,467
100069b4:	100074e0 	cmpeqi	zero,r2,467
100069b8:	100074e0 	cmpeqi	zero,r2,467
100069bc:	100073b0 	cmpltui	zero,r2,462
100069c0:	1000735c 	xori	zero,r2,461
100069c4:	10007040 	call	11000704 <_gp+0xfe4858>
100069c8:	10007040 	call	11000704 <_gp+0xfe4858>
100069cc:	10007040 	call	11000704 <_gp+0xfe4858>
100069d0:	100073a0 	cmpeqi	zero,r2,462
100069d4:	1000735c 	xori	zero,r2,461
100069d8:	100074e0 	cmpeqi	zero,r2,467
100069dc:	100074e0 	cmpeqi	zero,r2,467
100069e0:	10007278 	rdprs	zero,r2,457
100069e4:	100074e0 	cmpeqi	zero,r2,467
100069e8:	10007290 	cmplti	zero,r2,458
100069ec:	100072d0 	cmplti	zero,r2,459
100069f0:	10007310 	cmplti	zero,r2,460
100069f4:	100071dc 	xori	zero,r2,455
100069f8:	100074e0 	cmpeqi	zero,r2,467
100069fc:	10007464 	muli	zero,r2,465
10006a00:	100074e0 	cmpeqi	zero,r2,467
10006a04:	100071ec 	andhi	zero,r2,455
10006a08:	100074e0 	cmpeqi	zero,r2,467
10006a0c:	100074e0 	cmpeqi	zero,r2,467
10006a10:	1000722c 	andhi	zero,r2,456
10006a14:	d9412a17 	ldw	r5,1192(sp)
10006a18:	8163c83a 	sub	r17,r16,r5
10006a1c:	003f7d06 	br	10006814 <__alt_data_end+0xf8006814>
10006a20:	b809883a 	mov	r4,r23
10006a24:	b00b883a 	mov	r5,r22
10006a28:	000880c0 	call	1000880c <__swsetup_r>
10006a2c:	10002d1e 	bne	r2,zero,10006ae4 <___vfprintf_internal_r+0x3f8>
10006a30:	b0c0030b 	ldhu	r3,12(r22)
10006a34:	01000284 	movi	r4,10
10006a38:	1805883a 	mov	r2,r3
10006a3c:	1080068c 	andi	r2,r2,26
10006a40:	113f541e 	bne	r2,r4,10006794 <__alt_data_end+0xf8006794>
10006a44:	b080038b 	ldhu	r2,14(r22)
10006a48:	113fffcc 	andi	r4,r2,65535
10006a4c:	2120001c 	xori	r4,r4,32768
10006a50:	21200004 	addi	r4,r4,-32768
10006a54:	203f4f16 	blt	r4,zero,10006794 <__alt_data_end+0xf8006794>
10006a58:	b2c01917 	ldw	r11,100(r22)
10006a5c:	b2800717 	ldw	r10,28(r22)
10006a60:	b2400917 	ldw	r9,36(r22)
10006a64:	d9812a17 	ldw	r6,1192(sp)
10006a68:	d9c12d17 	ldw	r7,1204(sp)
10006a6c:	02010004 	movi	r8,1024
10006a70:	18ffff4c 	andi	r3,r3,65533
10006a74:	d881078d 	sth	r2,1054(sp)
10006a78:	b809883a 	mov	r4,r23
10006a7c:	d8800404 	addi	r2,sp,16
10006a80:	d9410404 	addi	r5,sp,1040
10006a84:	d8c1070d 	sth	r3,1052(sp)
10006a88:	dac11d15 	stw	r11,1140(sp)
10006a8c:	da810b15 	stw	r10,1068(sp)
10006a90:	da410d15 	stw	r9,1076(sp)
10006a94:	d8810415 	stw	r2,1040(sp)
10006a98:	d8810815 	stw	r2,1056(sp)
10006a9c:	da010615 	stw	r8,1048(sp)
10006aa0:	da010915 	stw	r8,1060(sp)
10006aa4:	d8010a15 	stw	zero,1064(sp)
10006aa8:	00066ec0 	call	100066ec <___vfprintf_internal_r>
10006aac:	1021883a 	mov	r16,r2
10006ab0:	10000416 	blt	r2,zero,10006ac4 <___vfprintf_internal_r+0x3d8>
10006ab4:	b809883a 	mov	r4,r23
10006ab8:	d9410404 	addi	r5,sp,1040
10006abc:	000a28c0 	call	1000a28c <_fflush_r>
10006ac0:	1007301e 	bne	r2,zero,10008784 <___vfprintf_internal_r+0x2098>
10006ac4:	d881070b 	ldhu	r2,1052(sp)
10006ac8:	1080100c 	andi	r2,r2,64
10006acc:	10000326 	beq	r2,zero,10006adc <___vfprintf_internal_r+0x3f0>
10006ad0:	b080030b 	ldhu	r2,12(r22)
10006ad4:	10801014 	ori	r2,r2,64
10006ad8:	b080030d 	sth	r2,12(r22)
10006adc:	8005883a 	mov	r2,r16
10006ae0:	00000106 	br	10006ae8 <___vfprintf_internal_r+0x3fc>
10006ae4:	00bfffc4 	movi	r2,-1
10006ae8:	dfc14917 	ldw	ra,1316(sp)
10006aec:	df014817 	ldw	fp,1312(sp)
10006af0:	ddc14717 	ldw	r23,1308(sp)
10006af4:	dd814617 	ldw	r22,1304(sp)
10006af8:	dd414517 	ldw	r21,1300(sp)
10006afc:	dd014417 	ldw	r20,1296(sp)
10006b00:	dcc14317 	ldw	r19,1292(sp)
10006b04:	dc814217 	ldw	r18,1288(sp)
10006b08:	dc414117 	ldw	r17,1284(sp)
10006b0c:	dc014017 	ldw	r16,1280(sp)
10006b10:	dec14a04 	addi	sp,sp,1320
10006b14:	f800283a 	ret
10006b18:	b809883a 	mov	r4,r23
10006b1c:	b00b883a 	mov	r5,r22
10006b20:	d9811e04 	addi	r6,sp,1144
10006b24:	000cfb00 	call	1000cfb0 <__sprint_r>
10006b28:	1000081e 	bne	r2,zero,10006b4c <___vfprintf_internal_r+0x460>
10006b2c:	da000404 	addi	r8,sp,16
10006b30:	003f4506 	br	10006848 <__alt_data_end+0xf8006848>
10006b34:	d8812017 	ldw	r2,1152(sp)
10006b38:	10000426 	beq	r2,zero,10006b4c <___vfprintf_internal_r+0x460>
10006b3c:	b809883a 	mov	r4,r23
10006b40:	b00b883a 	mov	r5,r22
10006b44:	d9811e04 	addi	r6,sp,1144
10006b48:	000cfb00 	call	1000cfb0 <__sprint_r>
10006b4c:	b080030b 	ldhu	r2,12(r22)
10006b50:	1080100c 	andi	r2,r2,64
10006b54:	103fe31e 	bne	r2,zero,10006ae4 <__alt_data_end+0xf8006ae4>
10006b58:	d8812f17 	ldw	r2,1212(sp)
10006b5c:	003fe206 	br	10006ae8 <__alt_data_end+0xf8006ae8>
10006b60:	b809883a 	mov	r4,r23
10006b64:	000a8480 	call	1000a848 <__sinit>
10006b68:	003ef806 	br	1000674c <__alt_data_end+0xf800674c>
10006b6c:	e005883a 	mov	r2,fp
10006b70:	9cc00114 	ori	r19,r19,4
10006b74:	e4000007 	ldb	r16,0(fp)
10006b78:	003f4406 	br	1000688c <__alt_data_end+0xf800688c>
10006b7c:	e4000007 	ldb	r16,0(fp)
10006b80:	01000a84 	movi	r4,42
10006b84:	e0800044 	addi	r2,fp,1
10006b88:	8106f626 	beq	r16,r4,10008764 <___vfprintf_internal_r+0x2078>
10006b8c:	857ff404 	addi	r21,r16,-48
10006b90:	1039883a 	mov	fp,r2
10006b94:	0013883a 	mov	r9,zero
10006b98:	957f3d36 	bltu	r18,r21,10006890 <__alt_data_end+0xf8006890>
10006b9c:	0009883a 	mov	r4,zero
10006ba0:	01400284 	movi	r5,10
10006ba4:	0003dd40 	call	10003dd4 <__mulsi3>
10006ba8:	e4000007 	ldb	r16,0(fp)
10006bac:	a889883a 	add	r4,r21,r2
10006bb0:	e7000044 	addi	fp,fp,1
10006bb4:	857ff404 	addi	r21,r16,-48
10006bb8:	957ff92e 	bgeu	r18,r21,10006ba0 <__alt_data_end+0xf8006ba0>
10006bbc:	2013883a 	mov	r9,r4
10006bc0:	203f330e 	bge	r4,zero,10006890 <__alt_data_end+0xf8006890>
10006bc4:	027fffc4 	movi	r9,-1
10006bc8:	003f3106 	br	10006890 <__alt_data_end+0xf8006890>
10006bcc:	9cc02014 	ori	r19,r19,128
10006bd0:	e005883a 	mov	r2,fp
10006bd4:	e4000007 	ldb	r16,0(fp)
10006bd8:	003f2c06 	br	1000688c <__alt_data_end+0xf800688c>
10006bdc:	857ff404 	addi	r21,r16,-48
10006be0:	d8012e15 	stw	zero,1208(sp)
10006be4:	e021883a 	mov	r16,fp
10006be8:	0009883a 	mov	r4,zero
10006bec:	da412c15 	stw	r9,1200(sp)
10006bf0:	01400284 	movi	r5,10
10006bf4:	0003dd40 	call	10003dd4 <__mulsi3>
10006bf8:	81400007 	ldb	r5,0(r16)
10006bfc:	1549883a 	add	r4,r2,r21
10006c00:	e7000044 	addi	fp,fp,1
10006c04:	2d7ff404 	addi	r21,r5,-48
10006c08:	e021883a 	mov	r16,fp
10006c0c:	957ff82e 	bgeu	r18,r21,10006bf0 <__alt_data_end+0xf8006bf0>
10006c10:	2821883a 	mov	r16,r5
10006c14:	d9012e15 	stw	r4,1208(sp)
10006c18:	da412c17 	ldw	r9,1200(sp)
10006c1c:	003f1c06 	br	10006890 <__alt_data_end+0xf8006890>
10006c20:	da012a17 	ldw	r8,1192(sp)
10006c24:	df012a15 	stw	fp,1192(sp)
10006c28:	9839883a 	mov	fp,r19
10006c2c:	dcc12b03 	ldbu	r19,1196(sp)
10006c30:	e7000414 	ori	fp,fp,16
10006c34:	e080080c 	andi	r2,fp,32
10006c38:	dcc12785 	stb	r19,1182(sp)
10006c3c:	d8c12d17 	ldw	r3,1204(sp)
10006c40:	1001ce26 	beq	r2,zero,1000737c <___vfprintf_internal_r+0xc90>
10006c44:	d9012d17 	ldw	r4,1204(sp)
10006c48:	18800117 	ldw	r2,4(r3)
10006c4c:	1c800017 	ldw	r18,0(r3)
10006c50:	21000204 	addi	r4,r4,8
10006c54:	d9012d15 	stw	r4,1204(sp)
10006c58:	102b883a 	mov	r21,r2
10006c5c:	10044916 	blt	r2,zero,10007d84 <___vfprintf_internal_r+0x1698>
10006c60:	dcc12783 	ldbu	r19,1182(sp)
10006c64:	da413215 	stw	r9,1224(sp)
10006c68:	00800044 	movi	r2,1
10006c6c:	9546b03a 	or	r3,r18,r21
10006c70:	48000216 	blt	r9,zero,10006c7c <___vfprintf_internal_r+0x590>
10006c74:	013fdfc4 	movi	r4,-129
10006c78:	e138703a 	and	fp,fp,r4
10006c7c:	1802251e 	bne	r3,zero,10007514 <___vfprintf_internal_r+0xe28>
10006c80:	48031726 	beq	r9,zero,100078e0 <___vfprintf_internal_r+0x11f4>
10006c84:	10803fcc 	andi	r2,r2,255
10006c88:	00c00044 	movi	r3,1
10006c8c:	10c24526 	beq	r2,r3,100075a4 <___vfprintf_internal_r+0xeb8>
10006c90:	00c00084 	movi	r3,2
10006c94:	10c33426 	beq	r2,r3,10007968 <___vfprintf_internal_r+0x127c>
10006c98:	d8c10e04 	addi	r3,sp,1080
10006c9c:	9008d0fa 	srli	r4,r18,3
10006ca0:	a80a977a 	slli	r5,r21,29
10006ca4:	a82ad0fa 	srli	r21,r21,3
10006ca8:	948001cc 	andi	r18,r18,7
10006cac:	90800c04 	addi	r2,r18,48
10006cb0:	18ffffc4 	addi	r3,r3,-1
10006cb4:	2924b03a 	or	r18,r5,r4
10006cb8:	18800005 	stb	r2,0(r3)
10006cbc:	9548b03a 	or	r4,r18,r21
10006cc0:	203ff61e 	bne	r4,zero,10006c9c <__alt_data_end+0xf8006c9c>
10006cc4:	e100004c 	andi	r4,fp,1
10006cc8:	d8c13115 	stw	r3,1220(sp)
10006ccc:	20039a1e 	bne	r4,zero,10007b38 <___vfprintf_internal_r+0x144c>
10006cd0:	d8812817 	ldw	r2,1184(sp)
10006cd4:	10e3c83a 	sub	r17,r2,r3
10006cd8:	8805883a 	mov	r2,r17
10006cdc:	8a40010e 	bge	r17,r9,10006ce4 <___vfprintf_internal_r+0x5f8>
10006ce0:	4805883a 	mov	r2,r9
10006ce4:	d8812b15 	stw	r2,1196(sp)
10006ce8:	d8013415 	stw	zero,1232(sp)
10006cec:	98803fcc 	andi	r2,r19,255
10006cf0:	1080201c 	xori	r2,r2,128
10006cf4:	10bfe004 	addi	r2,r2,-128
10006cf8:	10000326 	beq	r2,zero,10006d08 <___vfprintf_internal_r+0x61c>
10006cfc:	d8c12b17 	ldw	r3,1196(sp)
10006d00:	18c00044 	addi	r3,r3,1
10006d04:	d8c12b15 	stw	r3,1196(sp)
10006d08:	e0c0008c 	andi	r3,fp,2
10006d0c:	d8c12c15 	stw	r3,1200(sp)
10006d10:	18000326 	beq	r3,zero,10006d20 <___vfprintf_internal_r+0x634>
10006d14:	d8c12b17 	ldw	r3,1196(sp)
10006d18:	18c00084 	addi	r3,r3,2
10006d1c:	d8c12b15 	stw	r3,1196(sp)
10006d20:	e0c0210c 	andi	r3,fp,132
10006d24:	d8c13015 	stw	r3,1216(sp)
10006d28:	1801f81e 	bne	r3,zero,1000750c <___vfprintf_internal_r+0xe20>
10006d2c:	d9012e17 	ldw	r4,1208(sp)
10006d30:	d8c12b17 	ldw	r3,1196(sp)
10006d34:	20ebc83a 	sub	r21,r4,r3
10006d38:	0541f40e 	bge	zero,r21,1000750c <___vfprintf_internal_r+0xe20>
10006d3c:	02400404 	movi	r9,16
10006d40:	d8c12017 	ldw	r3,1152(sp)
10006d44:	d8811f17 	ldw	r2,1148(sp)
10006d48:	4d45750e 	bge	r9,r21,10008320 <___vfprintf_internal_r+0x1c34>
10006d4c:	01440074 	movhi	r5,4097
10006d50:	29489684 	addi	r5,r5,8794
10006d54:	d9413615 	stw	r5,1240(sp)
10006d58:	4827883a 	mov	r19,r9
10006d5c:	048001c4 	movi	r18,7
10006d60:	00000306 	br	10006d70 <___vfprintf_internal_r+0x684>
10006d64:	ad7ffc04 	addi	r21,r21,-16
10006d68:	42000204 	addi	r8,r8,8
10006d6c:	9d40130e 	bge	r19,r21,10006dbc <___vfprintf_internal_r+0x6d0>
10006d70:	01040074 	movhi	r4,4097
10006d74:	18c00404 	addi	r3,r3,16
10006d78:	10800044 	addi	r2,r2,1
10006d7c:	21089684 	addi	r4,r4,8794
10006d80:	41000015 	stw	r4,0(r8)
10006d84:	44c00115 	stw	r19,4(r8)
10006d88:	d8c12015 	stw	r3,1152(sp)
10006d8c:	d8811f15 	stw	r2,1148(sp)
10006d90:	90bff40e 	bge	r18,r2,10006d64 <__alt_data_end+0xf8006d64>
10006d94:	b809883a 	mov	r4,r23
10006d98:	b00b883a 	mov	r5,r22
10006d9c:	d9811e04 	addi	r6,sp,1144
10006da0:	000cfb00 	call	1000cfb0 <__sprint_r>
10006da4:	103f691e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10006da8:	ad7ffc04 	addi	r21,r21,-16
10006dac:	d8c12017 	ldw	r3,1152(sp)
10006db0:	d8811f17 	ldw	r2,1148(sp)
10006db4:	da000404 	addi	r8,sp,16
10006db8:	9d7fed16 	blt	r19,r21,10006d70 <__alt_data_end+0xf8006d70>
10006dbc:	d9413617 	ldw	r5,1240(sp)
10006dc0:	a8c7883a 	add	r3,r21,r3
10006dc4:	10800044 	addi	r2,r2,1
10006dc8:	41400015 	stw	r5,0(r8)
10006dcc:	45400115 	stw	r21,4(r8)
10006dd0:	d8c12015 	stw	r3,1152(sp)
10006dd4:	d8811f15 	stw	r2,1148(sp)
10006dd8:	010001c4 	movi	r4,7
10006ddc:	20832b16 	blt	r4,r2,10007a8c <___vfprintf_internal_r+0x13a0>
10006de0:	d8812787 	ldb	r2,1182(sp)
10006de4:	42000204 	addi	r8,r8,8
10006de8:	10000c26 	beq	r2,zero,10006e1c <___vfprintf_internal_r+0x730>
10006dec:	d8811f17 	ldw	r2,1148(sp)
10006df0:	d9012784 	addi	r4,sp,1182
10006df4:	18c00044 	addi	r3,r3,1
10006df8:	10800044 	addi	r2,r2,1
10006dfc:	41000015 	stw	r4,0(r8)
10006e00:	01000044 	movi	r4,1
10006e04:	41000115 	stw	r4,4(r8)
10006e08:	d8c12015 	stw	r3,1152(sp)
10006e0c:	d8811f15 	stw	r2,1148(sp)
10006e10:	010001c4 	movi	r4,7
10006e14:	2082c416 	blt	r4,r2,10007928 <___vfprintf_internal_r+0x123c>
10006e18:	42000204 	addi	r8,r8,8
10006e1c:	d8812c17 	ldw	r2,1200(sp)
10006e20:	10000c26 	beq	r2,zero,10006e54 <___vfprintf_internal_r+0x768>
10006e24:	d8811f17 	ldw	r2,1148(sp)
10006e28:	d9012704 	addi	r4,sp,1180
10006e2c:	18c00084 	addi	r3,r3,2
10006e30:	10800044 	addi	r2,r2,1
10006e34:	41000015 	stw	r4,0(r8)
10006e38:	01000084 	movi	r4,2
10006e3c:	41000115 	stw	r4,4(r8)
10006e40:	d8c12015 	stw	r3,1152(sp)
10006e44:	d8811f15 	stw	r2,1148(sp)
10006e48:	010001c4 	movi	r4,7
10006e4c:	2082be16 	blt	r4,r2,10007948 <___vfprintf_internal_r+0x125c>
10006e50:	42000204 	addi	r8,r8,8
10006e54:	d9013017 	ldw	r4,1216(sp)
10006e58:	00802004 	movi	r2,128
10006e5c:	20822026 	beq	r4,r2,100076e0 <___vfprintf_internal_r+0xff4>
10006e60:	d9413217 	ldw	r5,1224(sp)
10006e64:	2c67c83a 	sub	r19,r5,r17
10006e68:	04c0260e 	bge	zero,r19,10006f04 <___vfprintf_internal_r+0x818>
10006e6c:	05400404 	movi	r21,16
10006e70:	d8811f17 	ldw	r2,1148(sp)
10006e74:	acc4720e 	bge	r21,r19,10008040 <___vfprintf_internal_r+0x1954>
10006e78:	01440074 	movhi	r5,4097
10006e7c:	29489284 	addi	r5,r5,8778
10006e80:	d9412c15 	stw	r5,1200(sp)
10006e84:	048001c4 	movi	r18,7
10006e88:	00000306 	br	10006e98 <___vfprintf_internal_r+0x7ac>
10006e8c:	9cfffc04 	addi	r19,r19,-16
10006e90:	42000204 	addi	r8,r8,8
10006e94:	acc0110e 	bge	r21,r19,10006edc <___vfprintf_internal_r+0x7f0>
10006e98:	18c00404 	addi	r3,r3,16
10006e9c:	10800044 	addi	r2,r2,1
10006ea0:	45000015 	stw	r20,0(r8)
10006ea4:	45400115 	stw	r21,4(r8)
10006ea8:	d8c12015 	stw	r3,1152(sp)
10006eac:	d8811f15 	stw	r2,1148(sp)
10006eb0:	90bff60e 	bge	r18,r2,10006e8c <__alt_data_end+0xf8006e8c>
10006eb4:	b809883a 	mov	r4,r23
10006eb8:	b00b883a 	mov	r5,r22
10006ebc:	d9811e04 	addi	r6,sp,1144
10006ec0:	000cfb00 	call	1000cfb0 <__sprint_r>
10006ec4:	103f211e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10006ec8:	9cfffc04 	addi	r19,r19,-16
10006ecc:	d8c12017 	ldw	r3,1152(sp)
10006ed0:	d8811f17 	ldw	r2,1148(sp)
10006ed4:	da000404 	addi	r8,sp,16
10006ed8:	acffef16 	blt	r21,r19,10006e98 <__alt_data_end+0xf8006e98>
10006edc:	d9012c17 	ldw	r4,1200(sp)
10006ee0:	1cc7883a 	add	r3,r3,r19
10006ee4:	10800044 	addi	r2,r2,1
10006ee8:	41000015 	stw	r4,0(r8)
10006eec:	44c00115 	stw	r19,4(r8)
10006ef0:	d8c12015 	stw	r3,1152(sp)
10006ef4:	d8811f15 	stw	r2,1148(sp)
10006ef8:	010001c4 	movi	r4,7
10006efc:	20828216 	blt	r4,r2,10007908 <___vfprintf_internal_r+0x121c>
10006f00:	42000204 	addi	r8,r8,8
10006f04:	e080400c 	andi	r2,fp,256
10006f08:	1001ac1e 	bne	r2,zero,100075bc <___vfprintf_internal_r+0xed0>
10006f0c:	d8811f17 	ldw	r2,1148(sp)
10006f10:	d9413117 	ldw	r5,1220(sp)
10006f14:	1c47883a 	add	r3,r3,r17
10006f18:	10800044 	addi	r2,r2,1
10006f1c:	41400015 	stw	r5,0(r8)
10006f20:	44400115 	stw	r17,4(r8)
10006f24:	d8c12015 	stw	r3,1152(sp)
10006f28:	d8811f15 	stw	r2,1148(sp)
10006f2c:	010001c4 	movi	r4,7
10006f30:	20825d16 	blt	r4,r2,100078a8 <___vfprintf_internal_r+0x11bc>
10006f34:	42000204 	addi	r8,r8,8
10006f38:	e080010c 	andi	r2,fp,4
10006f3c:	10003126 	beq	r2,zero,10007004 <___vfprintf_internal_r+0x918>
10006f40:	d8812e17 	ldw	r2,1208(sp)
10006f44:	d9012b17 	ldw	r4,1196(sp)
10006f48:	1121c83a 	sub	r16,r2,r4
10006f4c:	04002d0e 	bge	zero,r16,10007004 <___vfprintf_internal_r+0x918>
10006f50:	04400404 	movi	r17,16
10006f54:	d8811f17 	ldw	r2,1148(sp)
10006f58:	8c05340e 	bge	r17,r16,1000842c <___vfprintf_internal_r+0x1d40>
10006f5c:	01040074 	movhi	r4,4097
10006f60:	21089684 	addi	r4,r4,8794
10006f64:	d9013615 	stw	r4,1240(sp)
10006f68:	048001c4 	movi	r18,7
10006f6c:	00000306 	br	10006f7c <___vfprintf_internal_r+0x890>
10006f70:	843ffc04 	addi	r16,r16,-16
10006f74:	42000204 	addi	r8,r8,8
10006f78:	8c00130e 	bge	r17,r16,10006fc8 <___vfprintf_internal_r+0x8dc>
10006f7c:	01440074 	movhi	r5,4097
10006f80:	18c00404 	addi	r3,r3,16
10006f84:	10800044 	addi	r2,r2,1
10006f88:	29489684 	addi	r5,r5,8794
10006f8c:	41400015 	stw	r5,0(r8)
10006f90:	44400115 	stw	r17,4(r8)
10006f94:	d8c12015 	stw	r3,1152(sp)
10006f98:	d8811f15 	stw	r2,1148(sp)
10006f9c:	90bff40e 	bge	r18,r2,10006f70 <__alt_data_end+0xf8006f70>
10006fa0:	b809883a 	mov	r4,r23
10006fa4:	b00b883a 	mov	r5,r22
10006fa8:	d9811e04 	addi	r6,sp,1144
10006fac:	000cfb00 	call	1000cfb0 <__sprint_r>
10006fb0:	103ee61e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10006fb4:	843ffc04 	addi	r16,r16,-16
10006fb8:	d8c12017 	ldw	r3,1152(sp)
10006fbc:	d8811f17 	ldw	r2,1148(sp)
10006fc0:	da000404 	addi	r8,sp,16
10006fc4:	8c3fed16 	blt	r17,r16,10006f7c <__alt_data_end+0xf8006f7c>
10006fc8:	d9013617 	ldw	r4,1240(sp)
10006fcc:	1c07883a 	add	r3,r3,r16
10006fd0:	10800044 	addi	r2,r2,1
10006fd4:	41000015 	stw	r4,0(r8)
10006fd8:	44000115 	stw	r16,4(r8)
10006fdc:	d8c12015 	stw	r3,1152(sp)
10006fe0:	d8811f15 	stw	r2,1148(sp)
10006fe4:	010001c4 	movi	r4,7
10006fe8:	2080060e 	bge	r4,r2,10007004 <___vfprintf_internal_r+0x918>
10006fec:	b809883a 	mov	r4,r23
10006ff0:	b00b883a 	mov	r5,r22
10006ff4:	d9811e04 	addi	r6,sp,1144
10006ff8:	000cfb00 	call	1000cfb0 <__sprint_r>
10006ffc:	103ed31e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007000:	d8c12017 	ldw	r3,1152(sp)
10007004:	df012b17 	ldw	fp,1196(sp)
10007008:	d9412e17 	ldw	r5,1208(sp)
1000700c:	e140010e 	bge	fp,r5,10007014 <___vfprintf_internal_r+0x928>
10007010:	2839883a 	mov	fp,r5
10007014:	d8812f17 	ldw	r2,1212(sp)
10007018:	1705883a 	add	r2,r2,fp
1000701c:	d8812f15 	stw	r2,1212(sp)
10007020:	1802291e 	bne	r3,zero,100078c8 <___vfprintf_internal_r+0x11dc>
10007024:	d8c12a17 	ldw	r3,1192(sp)
10007028:	d8011f15 	stw	zero,1148(sp)
1000702c:	da000404 	addi	r8,sp,16
10007030:	18800007 	ldb	r2,0(r3)
10007034:	103ded1e 	bne	r2,zero,100067ec <__alt_data_end+0xf80067ec>
10007038:	dc012a17 	ldw	r16,1192(sp)
1000703c:	003e0506 	br	10006854 <__alt_data_end+0xf8006854>
10007040:	d9012d17 	ldw	r4,1204(sp)
10007044:	d9412d17 	ldw	r5,1204(sp)
10007048:	da012a17 	ldw	r8,1192(sp)
1000704c:	21000017 	ldw	r4,0(r4)
10007050:	29400117 	ldw	r5,4(r5)
10007054:	df012a15 	stw	fp,1192(sp)
10007058:	9839883a 	mov	fp,r19
1000705c:	dcc12b03 	ldbu	r19,1196(sp)
10007060:	d9013715 	stw	r4,1244(sp)
10007064:	d9413915 	stw	r5,1252(sp)
10007068:	da013f15 	stw	r8,1276(sp)
1000706c:	da413e15 	stw	r9,1272(sp)
10007070:	dcc12785 	stb	r19,1182(sp)
10007074:	0002a780 	call	10002a78 <__fpclassifyd>
10007078:	d8c12d17 	ldw	r3,1204(sp)
1000707c:	04400044 	movi	r17,1
10007080:	da013f17 	ldw	r8,1276(sp)
10007084:	1c800204 	addi	r18,r3,8
10007088:	da413e17 	ldw	r9,1272(sp)
1000708c:	d9013717 	ldw	r4,1244(sp)
10007090:	d9413917 	ldw	r5,1252(sp)
10007094:	1443451e 	bne	r2,r17,10007dac <___vfprintf_internal_r+0x16c0>
10007098:	000d883a 	mov	r6,zero
1000709c:	000f883a 	mov	r7,zero
100070a0:	000517c0 	call	1000517c <__ledf2>
100070a4:	da013f17 	ldw	r8,1276(sp)
100070a8:	1004fe16 	blt	r2,zero,100084a4 <___vfprintf_internal_r+0x1db8>
100070ac:	dcc12783 	ldbu	r19,1182(sp)
100070b0:	008011c4 	movi	r2,71
100070b4:	14045d0e 	bge	r2,r16,1000822c <___vfprintf_internal_r+0x1b40>
100070b8:	01440074 	movhi	r5,4097
100070bc:	29488304 	addi	r5,r5,8716
100070c0:	d9413115 	stw	r5,1220(sp)
100070c4:	00c000c4 	movi	r3,3
100070c8:	00bfdfc4 	movi	r2,-129
100070cc:	d8c12b15 	stw	r3,1196(sp)
100070d0:	e0b8703a 	and	fp,fp,r2
100070d4:	dc812d15 	stw	r18,1204(sp)
100070d8:	1823883a 	mov	r17,r3
100070dc:	d8013215 	stw	zero,1224(sp)
100070e0:	d8013415 	stw	zero,1232(sp)
100070e4:	003f0106 	br	10006cec <__alt_data_end+0xf8006cec>
100070e8:	9cc00214 	ori	r19,r19,8
100070ec:	e005883a 	mov	r2,fp
100070f0:	e4000007 	ldb	r16,0(fp)
100070f4:	003de506 	br	1000688c <__alt_data_end+0xf800688c>
100070f8:	da012a17 	ldw	r8,1192(sp)
100070fc:	df012a15 	stw	fp,1192(sp)
10007100:	9f000414 	ori	fp,r19,16
10007104:	e0c0080c 	andi	r3,fp,32
10007108:	d8812d17 	ldw	r2,1204(sp)
1000710c:	18007626 	beq	r3,zero,100072e8 <___vfprintf_internal_r+0xbfc>
10007110:	d9412d17 	ldw	r5,1204(sp)
10007114:	14800017 	ldw	r18,0(r2)
10007118:	15400117 	ldw	r21,4(r2)
1000711c:	29400204 	addi	r5,r5,8
10007120:	d9412d15 	stw	r5,1204(sp)
10007124:	0005883a 	mov	r2,zero
10007128:	9546b03a 	or	r3,r18,r21
1000712c:	d8012785 	stb	zero,1182(sp)
10007130:	da413215 	stw	r9,1224(sp)
10007134:	0027883a 	mov	r19,zero
10007138:	003ecd06 	br	10006c70 <__alt_data_end+0xf8006c70>
1000713c:	da012a17 	ldw	r8,1192(sp)
10007140:	df012a15 	stw	fp,1192(sp)
10007144:	9f000414 	ori	fp,r19,16
10007148:	e0c0080c 	andi	r3,fp,32
1000714c:	d8812d17 	ldw	r2,1204(sp)
10007150:	18002c26 	beq	r3,zero,10007204 <___vfprintf_internal_r+0xb18>
10007154:	d9012d17 	ldw	r4,1204(sp)
10007158:	14800017 	ldw	r18,0(r2)
1000715c:	15400117 	ldw	r21,4(r2)
10007160:	21000204 	addi	r4,r4,8
10007164:	d9012d15 	stw	r4,1204(sp)
10007168:	00800044 	movi	r2,1
1000716c:	9546b03a 	or	r3,r18,r21
10007170:	003fee06 	br	1000712c <__alt_data_end+0xf800712c>
10007174:	da012a17 	ldw	r8,1192(sp)
10007178:	df012a15 	stw	fp,1192(sp)
1000717c:	9839883a 	mov	fp,r19
10007180:	dcc12b03 	ldbu	r19,1196(sp)
10007184:	01440074 	movhi	r5,4097
10007188:	29488604 	addi	r5,r5,8728
1000718c:	dcc12785 	stb	r19,1182(sp)
10007190:	d9413b15 	stw	r5,1260(sp)
10007194:	e0c0080c 	andi	r3,fp,32
10007198:	d8812d17 	ldw	r2,1204(sp)
1000719c:	18002e26 	beq	r3,zero,10007258 <___vfprintf_internal_r+0xb6c>
100071a0:	d9412d17 	ldw	r5,1204(sp)
100071a4:	14800017 	ldw	r18,0(r2)
100071a8:	15400117 	ldw	r21,4(r2)
100071ac:	29400204 	addi	r5,r5,8
100071b0:	d9412d15 	stw	r5,1204(sp)
100071b4:	e080004c 	andi	r2,fp,1
100071b8:	10025c26 	beq	r2,zero,10007b2c <___vfprintf_internal_r+0x1440>
100071bc:	9546b03a 	or	r3,r18,r21
100071c0:	18038f26 	beq	r3,zero,10008000 <___vfprintf_internal_r+0x1914>
100071c4:	00800c04 	movi	r2,48
100071c8:	d8812705 	stb	r2,1180(sp)
100071cc:	dc012745 	stb	r16,1181(sp)
100071d0:	e7000094 	ori	fp,fp,2
100071d4:	00800084 	movi	r2,2
100071d8:	003fd406 	br	1000712c <__alt_data_end+0xf800712c>
100071dc:	9cc00814 	ori	r19,r19,32
100071e0:	e005883a 	mov	r2,fp
100071e4:	e4000007 	ldb	r16,0(fp)
100071e8:	003da806 	br	1000688c <__alt_data_end+0xf800688c>
100071ec:	da012a17 	ldw	r8,1192(sp)
100071f0:	df012a15 	stw	fp,1192(sp)
100071f4:	9839883a 	mov	fp,r19
100071f8:	e0c0080c 	andi	r3,fp,32
100071fc:	d8812d17 	ldw	r2,1204(sp)
10007200:	183fd41e 	bne	r3,zero,10007154 <__alt_data_end+0xf8007154>
10007204:	e0c0040c 	andi	r3,fp,16
10007208:	18035f26 	beq	r3,zero,10007f88 <___vfprintf_internal_r+0x189c>
1000720c:	d9412d17 	ldw	r5,1204(sp)
10007210:	14800017 	ldw	r18,0(r2)
10007214:	002b883a 	mov	r21,zero
10007218:	29400104 	addi	r5,r5,4
1000721c:	d9412d15 	stw	r5,1204(sp)
10007220:	00800044 	movi	r2,1
10007224:	9007883a 	mov	r3,r18
10007228:	003fc006 	br	1000712c <__alt_data_end+0xf800712c>
1000722c:	da012a17 	ldw	r8,1192(sp)
10007230:	df012a15 	stw	fp,1192(sp)
10007234:	9839883a 	mov	fp,r19
10007238:	dcc12b03 	ldbu	r19,1196(sp)
1000723c:	01040074 	movhi	r4,4097
10007240:	21088b04 	addi	r4,r4,8748
10007244:	d9013b15 	stw	r4,1260(sp)
10007248:	dcc12785 	stb	r19,1182(sp)
1000724c:	e0c0080c 	andi	r3,fp,32
10007250:	d8812d17 	ldw	r2,1204(sp)
10007254:	183fd21e 	bne	r3,zero,100071a0 <__alt_data_end+0xf80071a0>
10007258:	e0c0040c 	andi	r3,fp,16
1000725c:	18035426 	beq	r3,zero,10007fb0 <___vfprintf_internal_r+0x18c4>
10007260:	d8c12d17 	ldw	r3,1204(sp)
10007264:	14800017 	ldw	r18,0(r2)
10007268:	002b883a 	mov	r21,zero
1000726c:	18c00104 	addi	r3,r3,4
10007270:	d8c12d15 	stw	r3,1204(sp)
10007274:	003fcf06 	br	100071b4 <__alt_data_end+0xf80071b4>
10007278:	e4000007 	ldb	r16,0(fp)
1000727c:	00801b04 	movi	r2,108
10007280:	8083f726 	beq	r16,r2,10008260 <___vfprintf_internal_r+0x1b74>
10007284:	9cc00414 	ori	r19,r19,16
10007288:	e005883a 	mov	r2,fp
1000728c:	003d7f06 	br	1000688c <__alt_data_end+0xf800688c>
10007290:	da012a17 	ldw	r8,1192(sp)
10007294:	df012a15 	stw	fp,1192(sp)
10007298:	9839883a 	mov	fp,r19
1000729c:	dcc12b03 	ldbu	r19,1196(sp)
100072a0:	e080080c 	andi	r2,fp,32
100072a4:	dcc12785 	stb	r19,1182(sp)
100072a8:	10032226 	beq	r2,zero,10007f34 <___vfprintf_internal_r+0x1848>
100072ac:	d9412d17 	ldw	r5,1204(sp)
100072b0:	d9012f17 	ldw	r4,1212(sp)
100072b4:	28800017 	ldw	r2,0(r5)
100072b8:	2007d7fa 	srai	r3,r4,31
100072bc:	29400104 	addi	r5,r5,4
100072c0:	d9412d15 	stw	r5,1204(sp)
100072c4:	11000015 	stw	r4,0(r2)
100072c8:	10c00115 	stw	r3,4(r2)
100072cc:	003d4406 	br	100067e0 <__alt_data_end+0xf80067e0>
100072d0:	da012a17 	ldw	r8,1192(sp)
100072d4:	df012a15 	stw	fp,1192(sp)
100072d8:	9839883a 	mov	fp,r19
100072dc:	e0c0080c 	andi	r3,fp,32
100072e0:	d8812d17 	ldw	r2,1204(sp)
100072e4:	183f8a1e 	bne	r3,zero,10007110 <__alt_data_end+0xf8007110>
100072e8:	e0c0040c 	andi	r3,fp,16
100072ec:	18031c26 	beq	r3,zero,10007f60 <___vfprintf_internal_r+0x1874>
100072f0:	14800017 	ldw	r18,0(r2)
100072f4:	d8812d17 	ldw	r2,1204(sp)
100072f8:	002b883a 	mov	r21,zero
100072fc:	9007883a 	mov	r3,r18
10007300:	10800104 	addi	r2,r2,4
10007304:	d8812d15 	stw	r2,1204(sp)
10007308:	0005883a 	mov	r2,zero
1000730c:	003f8706 	br	1000712c <__alt_data_end+0xf800712c>
10007310:	d9412d17 	ldw	r5,1204(sp)
10007314:	00800c04 	movi	r2,48
10007318:	d8812705 	stb	r2,1180(sp)
1000731c:	2c800017 	ldw	r18,0(r5)
10007320:	00801e04 	movi	r2,120
10007324:	d8812745 	stb	r2,1181(sp)
10007328:	00840074 	movhi	r2,4097
1000732c:	10888b04 	addi	r2,r2,8748
10007330:	29400104 	addi	r5,r5,4
10007334:	da012a17 	ldw	r8,1192(sp)
10007338:	d8813b15 	stw	r2,1260(sp)
1000733c:	df012a15 	stw	fp,1192(sp)
10007340:	002b883a 	mov	r21,zero
10007344:	9f000094 	ori	fp,r19,2
10007348:	d9412d15 	stw	r5,1204(sp)
1000734c:	00800084 	movi	r2,2
10007350:	04001e04 	movi	r16,120
10007354:	9007883a 	mov	r3,r18
10007358:	003f7406 	br	1000712c <__alt_data_end+0xf800712c>
1000735c:	da012a17 	ldw	r8,1192(sp)
10007360:	df012a15 	stw	fp,1192(sp)
10007364:	9839883a 	mov	fp,r19
10007368:	dcc12b03 	ldbu	r19,1196(sp)
1000736c:	e080080c 	andi	r2,fp,32
10007370:	d8c12d17 	ldw	r3,1204(sp)
10007374:	dcc12785 	stb	r19,1182(sp)
10007378:	103e321e 	bne	r2,zero,10006c44 <__alt_data_end+0xf8006c44>
1000737c:	e080040c 	andi	r2,fp,16
10007380:	10031326 	beq	r2,zero,10007fd0 <___vfprintf_internal_r+0x18e4>
10007384:	1c800017 	ldw	r18,0(r3)
10007388:	d9412d17 	ldw	r5,1204(sp)
1000738c:	902bd7fa 	srai	r21,r18,31
10007390:	29400104 	addi	r5,r5,4
10007394:	d9412d15 	stw	r5,1204(sp)
10007398:	a805883a 	mov	r2,r21
1000739c:	003e2f06 	br	10006c5c <__alt_data_end+0xf8006c5c>
100073a0:	9cc01014 	ori	r19,r19,64
100073a4:	e005883a 	mov	r2,fp
100073a8:	e4000007 	ldb	r16,0(fp)
100073ac:	003d3706 	br	1000688c <__alt_data_end+0xf800688c>
100073b0:	d8c12d17 	ldw	r3,1204(sp)
100073b4:	d9012d17 	ldw	r4,1204(sp)
100073b8:	da012a17 	ldw	r8,1192(sp)
100073bc:	18800017 	ldw	r2,0(r3)
100073c0:	21000104 	addi	r4,r4,4
100073c4:	00c00044 	movi	r3,1
100073c8:	df012a15 	stw	fp,1192(sp)
100073cc:	d8c12b15 	stw	r3,1196(sp)
100073d0:	9839883a 	mov	fp,r19
100073d4:	d8012785 	stb	zero,1182(sp)
100073d8:	d8810405 	stb	r2,1040(sp)
100073dc:	d9012d15 	stw	r4,1204(sp)
100073e0:	1823883a 	mov	r17,r3
100073e4:	d8c10404 	addi	r3,sp,1040
100073e8:	d8013215 	stw	zero,1224(sp)
100073ec:	d8013415 	stw	zero,1232(sp)
100073f0:	d8c13115 	stw	r3,1220(sp)
100073f4:	0005883a 	mov	r2,zero
100073f8:	003e4306 	br	10006d08 <__alt_data_end+0xf8006d08>
100073fc:	d8812b07 	ldb	r2,1196(sp)
10007400:	1002fc1e 	bne	r2,zero,10007ff4 <___vfprintf_internal_r+0x1908>
10007404:	00c00804 	movi	r3,32
10007408:	d8c12b05 	stb	r3,1196(sp)
1000740c:	e005883a 	mov	r2,fp
10007410:	e4000007 	ldb	r16,0(fp)
10007414:	003d1d06 	br	1000688c <__alt_data_end+0xf800688c>
10007418:	9cc00054 	ori	r19,r19,1
1000741c:	e005883a 	mov	r2,fp
10007420:	e4000007 	ldb	r16,0(fp)
10007424:	003d1906 	br	1000688c <__alt_data_end+0xf800688c>
10007428:	d9012d17 	ldw	r4,1204(sp)
1000742c:	d9412d17 	ldw	r5,1204(sp)
10007430:	21000017 	ldw	r4,0(r4)
10007434:	28c00104 	addi	r3,r5,4
10007438:	d9012e15 	stw	r4,1208(sp)
1000743c:	20038c16 	blt	r4,zero,10008270 <___vfprintf_internal_r+0x1b84>
10007440:	d8c12d15 	stw	r3,1204(sp)
10007444:	e005883a 	mov	r2,fp
10007448:	e4000007 	ldb	r16,0(fp)
1000744c:	003d0f06 	br	1000688c <__alt_data_end+0xf800688c>
10007450:	00c00ac4 	movi	r3,43
10007454:	d8c12b05 	stb	r3,1196(sp)
10007458:	e005883a 	mov	r2,fp
1000745c:	e4000007 	ldb	r16,0(fp)
10007460:	003d0a06 	br	1000688c <__alt_data_end+0xf800688c>
10007464:	d8c12d17 	ldw	r3,1204(sp)
10007468:	d9012d17 	ldw	r4,1204(sp)
1000746c:	da012a17 	ldw	r8,1192(sp)
10007470:	18c00017 	ldw	r3,0(r3)
10007474:	df012a15 	stw	fp,1192(sp)
10007478:	d8012785 	stb	zero,1182(sp)
1000747c:	d8c13115 	stw	r3,1220(sp)
10007480:	9839883a 	mov	fp,r19
10007484:	24800104 	addi	r18,r4,4
10007488:	1803f726 	beq	r3,zero,10008468 <___vfprintf_internal_r+0x1d7c>
1000748c:	d9013117 	ldw	r4,1220(sp)
10007490:	48038916 	blt	r9,zero,100082b8 <___vfprintf_internal_r+0x1bcc>
10007494:	480d883a 	mov	r6,r9
10007498:	000b883a 	mov	r5,zero
1000749c:	da013f15 	stw	r8,1276(sp)
100074a0:	da413e15 	stw	r9,1272(sp)
100074a4:	000b85c0 	call	1000b85c <memchr>
100074a8:	da013f17 	ldw	r8,1276(sp)
100074ac:	da413e17 	ldw	r9,1272(sp)
100074b0:	10045926 	beq	r2,zero,10008618 <___vfprintf_internal_r+0x1f2c>
100074b4:	d8c13117 	ldw	r3,1220(sp)
100074b8:	10e3c83a 	sub	r17,r2,r3
100074bc:	4c433516 	blt	r9,r17,10008194 <___vfprintf_internal_r+0x1aa8>
100074c0:	8805883a 	mov	r2,r17
100074c4:	88038116 	blt	r17,zero,100082cc <___vfprintf_internal_r+0x1be0>
100074c8:	dcc12783 	ldbu	r19,1182(sp)
100074cc:	d8812b15 	stw	r2,1196(sp)
100074d0:	dc812d15 	stw	r18,1204(sp)
100074d4:	d8013215 	stw	zero,1224(sp)
100074d8:	d8013415 	stw	zero,1232(sp)
100074dc:	003e0306 	br	10006cec <__alt_data_end+0xf8006cec>
100074e0:	da012a17 	ldw	r8,1192(sp)
100074e4:	df012a15 	stw	fp,1192(sp)
100074e8:	9839883a 	mov	fp,r19
100074ec:	dcc12b03 	ldbu	r19,1196(sp)
100074f0:	dcc12785 	stb	r19,1182(sp)
100074f4:	803d8f26 	beq	r16,zero,10006b34 <__alt_data_end+0xf8006b34>
100074f8:	00c00044 	movi	r3,1
100074fc:	d8c12b15 	stw	r3,1196(sp)
10007500:	dc010405 	stb	r16,1040(sp)
10007504:	d8012785 	stb	zero,1182(sp)
10007508:	003fb506 	br	100073e0 <__alt_data_end+0xf80073e0>
1000750c:	d8c12017 	ldw	r3,1152(sp)
10007510:	003e3506 	br	10006de8 <__alt_data_end+0xf8006de8>
10007514:	10803fcc 	andi	r2,r2,255
10007518:	00c00044 	movi	r3,1
1000751c:	10fddc1e 	bne	r2,r3,10006c90 <__alt_data_end+0xf8006c90>
10007520:	a800021e 	bne	r21,zero,1000752c <___vfprintf_internal_r+0xe40>
10007524:	00800244 	movi	r2,9
10007528:	14801e2e 	bgeu	r2,r18,100075a4 <___vfprintf_internal_r+0xeb8>
1000752c:	dc012b15 	stw	r16,1196(sp)
10007530:	dc410e04 	addi	r17,sp,1080
10007534:	9021883a 	mov	r16,r18
10007538:	da012c15 	stw	r8,1200(sp)
1000753c:	a825883a 	mov	r18,r21
10007540:	482b883a 	mov	r21,r9
10007544:	8009883a 	mov	r4,r16
10007548:	900b883a 	mov	r5,r18
1000754c:	01800284 	movi	r6,10
10007550:	000f883a 	mov	r7,zero
10007554:	000368c0 	call	1000368c <__umoddi3>
10007558:	10800c04 	addi	r2,r2,48
1000755c:	8c7fffc4 	addi	r17,r17,-1
10007560:	8009883a 	mov	r4,r16
10007564:	900b883a 	mov	r5,r18
10007568:	01800284 	movi	r6,10
1000756c:	000f883a 	mov	r7,zero
10007570:	88800005 	stb	r2,0(r17)
10007574:	000304c0 	call	1000304c <__udivdi3>
10007578:	1021883a 	mov	r16,r2
1000757c:	10c4b03a 	or	r2,r2,r3
10007580:	1825883a 	mov	r18,r3
10007584:	103fef1e 	bne	r2,zero,10007544 <__alt_data_end+0xf8007544>
10007588:	d9012817 	ldw	r4,1184(sp)
1000758c:	dc413115 	stw	r17,1220(sp)
10007590:	dc012b17 	ldw	r16,1196(sp)
10007594:	da012c17 	ldw	r8,1200(sp)
10007598:	a813883a 	mov	r9,r21
1000759c:	2463c83a 	sub	r17,r4,r17
100075a0:	003dcd06 	br	10006cd8 <__alt_data_end+0xf8006cd8>
100075a4:	94800c04 	addi	r18,r18,48
100075a8:	d8c10dc4 	addi	r3,sp,1079
100075ac:	dc810dc5 	stb	r18,1079(sp)
100075b0:	dc413c17 	ldw	r17,1264(sp)
100075b4:	d8c13115 	stw	r3,1220(sp)
100075b8:	003dc706 	br	10006cd8 <__alt_data_end+0xf8006cd8>
100075bc:	00801944 	movi	r2,101
100075c0:	1400720e 	bge	r2,r16,1000778c <___vfprintf_internal_r+0x10a0>
100075c4:	d9013717 	ldw	r4,1244(sp)
100075c8:	d9413917 	ldw	r5,1252(sp)
100075cc:	000d883a 	mov	r6,zero
100075d0:	000f883a 	mov	r7,zero
100075d4:	d8c13d15 	stw	r3,1268(sp)
100075d8:	da013f15 	stw	r8,1276(sp)
100075dc:	00050180 	call	10005018 <__eqdf2>
100075e0:	d8c13d17 	ldw	r3,1268(sp)
100075e4:	da013f17 	ldw	r8,1276(sp)
100075e8:	1000f41e 	bne	r2,zero,100079bc <___vfprintf_internal_r+0x12d0>
100075ec:	d8811f17 	ldw	r2,1148(sp)
100075f0:	01040074 	movhi	r4,4097
100075f4:	21089204 	addi	r4,r4,8776
100075f8:	18c00044 	addi	r3,r3,1
100075fc:	10800044 	addi	r2,r2,1
10007600:	41000015 	stw	r4,0(r8)
10007604:	01000044 	movi	r4,1
10007608:	41000115 	stw	r4,4(r8)
1000760c:	d8c12015 	stw	r3,1152(sp)
10007610:	d8811f15 	stw	r2,1148(sp)
10007614:	010001c4 	movi	r4,7
10007618:	20828d16 	blt	r4,r2,10008050 <___vfprintf_internal_r+0x1964>
1000761c:	42000204 	addi	r8,r8,8
10007620:	d8812617 	ldw	r2,1176(sp)
10007624:	d9413317 	ldw	r5,1228(sp)
10007628:	11400216 	blt	r2,r5,10007634 <___vfprintf_internal_r+0xf48>
1000762c:	e080004c 	andi	r2,fp,1
10007630:	103e4126 	beq	r2,zero,10006f38 <__alt_data_end+0xf8006f38>
10007634:	d8813817 	ldw	r2,1248(sp)
10007638:	d9013517 	ldw	r4,1236(sp)
1000763c:	d9413817 	ldw	r5,1248(sp)
10007640:	1887883a 	add	r3,r3,r2
10007644:	d8811f17 	ldw	r2,1148(sp)
10007648:	41000015 	stw	r4,0(r8)
1000764c:	41400115 	stw	r5,4(r8)
10007650:	10800044 	addi	r2,r2,1
10007654:	d8c12015 	stw	r3,1152(sp)
10007658:	d8811f15 	stw	r2,1148(sp)
1000765c:	010001c4 	movi	r4,7
10007660:	20830916 	blt	r4,r2,10008288 <___vfprintf_internal_r+0x1b9c>
10007664:	42000204 	addi	r8,r8,8
10007668:	d8813317 	ldw	r2,1228(sp)
1000766c:	143fffc4 	addi	r16,r2,-1
10007670:	043e310e 	bge	zero,r16,10006f38 <__alt_data_end+0xf8006f38>
10007674:	04400404 	movi	r17,16
10007678:	d8811f17 	ldw	r2,1148(sp)
1000767c:	8c007e0e 	bge	r17,r16,10007878 <___vfprintf_internal_r+0x118c>
10007680:	01440074 	movhi	r5,4097
10007684:	29489284 	addi	r5,r5,8778
10007688:	d9412c15 	stw	r5,1200(sp)
1000768c:	04c001c4 	movi	r19,7
10007690:	00000306 	br	100076a0 <___vfprintf_internal_r+0xfb4>
10007694:	42000204 	addi	r8,r8,8
10007698:	843ffc04 	addi	r16,r16,-16
1000769c:	8c00790e 	bge	r17,r16,10007884 <___vfprintf_internal_r+0x1198>
100076a0:	18c00404 	addi	r3,r3,16
100076a4:	10800044 	addi	r2,r2,1
100076a8:	45000015 	stw	r20,0(r8)
100076ac:	44400115 	stw	r17,4(r8)
100076b0:	d8c12015 	stw	r3,1152(sp)
100076b4:	d8811f15 	stw	r2,1148(sp)
100076b8:	98bff60e 	bge	r19,r2,10007694 <__alt_data_end+0xf8007694>
100076bc:	b809883a 	mov	r4,r23
100076c0:	b00b883a 	mov	r5,r22
100076c4:	d9811e04 	addi	r6,sp,1144
100076c8:	000cfb00 	call	1000cfb0 <__sprint_r>
100076cc:	103d1f1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
100076d0:	d8c12017 	ldw	r3,1152(sp)
100076d4:	d8811f17 	ldw	r2,1148(sp)
100076d8:	da000404 	addi	r8,sp,16
100076dc:	003fee06 	br	10007698 <__alt_data_end+0xf8007698>
100076e0:	d9412e17 	ldw	r5,1208(sp)
100076e4:	d8812b17 	ldw	r2,1196(sp)
100076e8:	28a7c83a 	sub	r19,r5,r2
100076ec:	04fddc0e 	bge	zero,r19,10006e60 <__alt_data_end+0xf8006e60>
100076f0:	05400404 	movi	r21,16
100076f4:	d8811f17 	ldw	r2,1148(sp)
100076f8:	acc3870e 	bge	r21,r19,10008518 <___vfprintf_internal_r+0x1e2c>
100076fc:	01440074 	movhi	r5,4097
10007700:	29489284 	addi	r5,r5,8778
10007704:	d9412c15 	stw	r5,1200(sp)
10007708:	048001c4 	movi	r18,7
1000770c:	00000306 	br	1000771c <___vfprintf_internal_r+0x1030>
10007710:	9cfffc04 	addi	r19,r19,-16
10007714:	42000204 	addi	r8,r8,8
10007718:	acc0110e 	bge	r21,r19,10007760 <___vfprintf_internal_r+0x1074>
1000771c:	18c00404 	addi	r3,r3,16
10007720:	10800044 	addi	r2,r2,1
10007724:	45000015 	stw	r20,0(r8)
10007728:	45400115 	stw	r21,4(r8)
1000772c:	d8c12015 	stw	r3,1152(sp)
10007730:	d8811f15 	stw	r2,1148(sp)
10007734:	90bff60e 	bge	r18,r2,10007710 <__alt_data_end+0xf8007710>
10007738:	b809883a 	mov	r4,r23
1000773c:	b00b883a 	mov	r5,r22
10007740:	d9811e04 	addi	r6,sp,1144
10007744:	000cfb00 	call	1000cfb0 <__sprint_r>
10007748:	103d001e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
1000774c:	9cfffc04 	addi	r19,r19,-16
10007750:	d8c12017 	ldw	r3,1152(sp)
10007754:	d8811f17 	ldw	r2,1148(sp)
10007758:	da000404 	addi	r8,sp,16
1000775c:	acffef16 	blt	r21,r19,1000771c <__alt_data_end+0xf800771c>
10007760:	d9012c17 	ldw	r4,1200(sp)
10007764:	1cc7883a 	add	r3,r3,r19
10007768:	10800044 	addi	r2,r2,1
1000776c:	41000015 	stw	r4,0(r8)
10007770:	44c00115 	stw	r19,4(r8)
10007774:	d8c12015 	stw	r3,1152(sp)
10007778:	d8811f15 	stw	r2,1148(sp)
1000777c:	010001c4 	movi	r4,7
10007780:	20817816 	blt	r4,r2,10007d64 <___vfprintf_internal_r+0x1678>
10007784:	42000204 	addi	r8,r8,8
10007788:	003db506 	br	10006e60 <__alt_data_end+0xf8006e60>
1000778c:	d9413317 	ldw	r5,1228(sp)
10007790:	00800044 	movi	r2,1
10007794:	18c00044 	addi	r3,r3,1
10007798:	11413e0e 	bge	r2,r5,10007c94 <___vfprintf_internal_r+0x15a8>
1000779c:	dc011f17 	ldw	r16,1148(sp)
100077a0:	d8813117 	ldw	r2,1220(sp)
100077a4:	d8c12015 	stw	r3,1152(sp)
100077a8:	84000044 	addi	r16,r16,1
100077ac:	40800015 	stw	r2,0(r8)
100077b0:	00800044 	movi	r2,1
100077b4:	40800115 	stw	r2,4(r8)
100077b8:	dc011f15 	stw	r16,1148(sp)
100077bc:	008001c4 	movi	r2,7
100077c0:	14015616 	blt	r2,r16,10007d1c <___vfprintf_internal_r+0x1630>
100077c4:	42000204 	addi	r8,r8,8
100077c8:	d9013817 	ldw	r4,1248(sp)
100077cc:	d9413517 	ldw	r5,1236(sp)
100077d0:	84000044 	addi	r16,r16,1
100077d4:	1907883a 	add	r3,r3,r4
100077d8:	41400015 	stw	r5,0(r8)
100077dc:	41000115 	stw	r4,4(r8)
100077e0:	d8c12015 	stw	r3,1152(sp)
100077e4:	dc011f15 	stw	r16,1148(sp)
100077e8:	008001c4 	movi	r2,7
100077ec:	14015416 	blt	r2,r16,10007d40 <___vfprintf_internal_r+0x1654>
100077f0:	44400204 	addi	r17,r8,8
100077f4:	d9013717 	ldw	r4,1244(sp)
100077f8:	d9413917 	ldw	r5,1252(sp)
100077fc:	000d883a 	mov	r6,zero
10007800:	000f883a 	mov	r7,zero
10007804:	d8c13d15 	stw	r3,1268(sp)
10007808:	00050180 	call	10005018 <__eqdf2>
1000780c:	d8c13d17 	ldw	r3,1268(sp)
10007810:	1000a726 	beq	r2,zero,10007ab0 <___vfprintf_internal_r+0x13c4>
10007814:	d9013317 	ldw	r4,1228(sp)
10007818:	d9413117 	ldw	r5,1220(sp)
1000781c:	84000044 	addi	r16,r16,1
10007820:	20bfffc4 	addi	r2,r4,-1
10007824:	1887883a 	add	r3,r3,r2
10007828:	29000044 	addi	r4,r5,1
1000782c:	88800115 	stw	r2,4(r17)
10007830:	89000015 	stw	r4,0(r17)
10007834:	d8c12015 	stw	r3,1152(sp)
10007838:	dc011f15 	stw	r16,1148(sp)
1000783c:	008001c4 	movi	r2,7
10007840:	14012d16 	blt	r2,r16,10007cf8 <___vfprintf_internal_r+0x160c>
10007844:	8c400204 	addi	r17,r17,8
10007848:	d9413a17 	ldw	r5,1256(sp)
1000784c:	dcc122c4 	addi	r19,sp,1163
10007850:	84000044 	addi	r16,r16,1
10007854:	28c7883a 	add	r3,r5,r3
10007858:	8cc00015 	stw	r19,0(r17)
1000785c:	89400115 	stw	r5,4(r17)
10007860:	d8c12015 	stw	r3,1152(sp)
10007864:	dc011f15 	stw	r16,1148(sp)
10007868:	008001c4 	movi	r2,7
1000786c:	14000e16 	blt	r2,r16,100078a8 <___vfprintf_internal_r+0x11bc>
10007870:	8a000204 	addi	r8,r17,8
10007874:	003db006 	br	10006f38 <__alt_data_end+0xf8006f38>
10007878:	01040074 	movhi	r4,4097
1000787c:	21089284 	addi	r4,r4,8778
10007880:	d9012c15 	stw	r4,1200(sp)
10007884:	d9012c17 	ldw	r4,1200(sp)
10007888:	1c07883a 	add	r3,r3,r16
1000788c:	44000115 	stw	r16,4(r8)
10007890:	41000015 	stw	r4,0(r8)
10007894:	10800044 	addi	r2,r2,1
10007898:	d8c12015 	stw	r3,1152(sp)
1000789c:	d8811f15 	stw	r2,1148(sp)
100078a0:	010001c4 	movi	r4,7
100078a4:	20bda30e 	bge	r4,r2,10006f34 <__alt_data_end+0xf8006f34>
100078a8:	b809883a 	mov	r4,r23
100078ac:	b00b883a 	mov	r5,r22
100078b0:	d9811e04 	addi	r6,sp,1144
100078b4:	000cfb00 	call	1000cfb0 <__sprint_r>
100078b8:	103ca41e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
100078bc:	d8c12017 	ldw	r3,1152(sp)
100078c0:	da000404 	addi	r8,sp,16
100078c4:	003d9c06 	br	10006f38 <__alt_data_end+0xf8006f38>
100078c8:	b809883a 	mov	r4,r23
100078cc:	b00b883a 	mov	r5,r22
100078d0:	d9811e04 	addi	r6,sp,1144
100078d4:	000cfb00 	call	1000cfb0 <__sprint_r>
100078d8:	103dd226 	beq	r2,zero,10007024 <__alt_data_end+0xf8007024>
100078dc:	003c9b06 	br	10006b4c <__alt_data_end+0xf8006b4c>
100078e0:	10803fcc 	andi	r2,r2,255
100078e4:	1000311e 	bne	r2,zero,100079ac <___vfprintf_internal_r+0x12c0>
100078e8:	e080004c 	andi	r2,fp,1
100078ec:	10002f26 	beq	r2,zero,100079ac <___vfprintf_internal_r+0x12c0>
100078f0:	00800c04 	movi	r2,48
100078f4:	d8c10dc4 	addi	r3,sp,1079
100078f8:	d8810dc5 	stb	r2,1079(sp)
100078fc:	dc413c17 	ldw	r17,1264(sp)
10007900:	d8c13115 	stw	r3,1220(sp)
10007904:	003cf406 	br	10006cd8 <__alt_data_end+0xf8006cd8>
10007908:	b809883a 	mov	r4,r23
1000790c:	b00b883a 	mov	r5,r22
10007910:	d9811e04 	addi	r6,sp,1144
10007914:	000cfb00 	call	1000cfb0 <__sprint_r>
10007918:	103c8c1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
1000791c:	d8c12017 	ldw	r3,1152(sp)
10007920:	da000404 	addi	r8,sp,16
10007924:	003d7706 	br	10006f04 <__alt_data_end+0xf8006f04>
10007928:	b809883a 	mov	r4,r23
1000792c:	b00b883a 	mov	r5,r22
10007930:	d9811e04 	addi	r6,sp,1144
10007934:	000cfb00 	call	1000cfb0 <__sprint_r>
10007938:	103c841e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
1000793c:	d8c12017 	ldw	r3,1152(sp)
10007940:	da000404 	addi	r8,sp,16
10007944:	003d3506 	br	10006e1c <__alt_data_end+0xf8006e1c>
10007948:	b809883a 	mov	r4,r23
1000794c:	b00b883a 	mov	r5,r22
10007950:	d9811e04 	addi	r6,sp,1144
10007954:	000cfb00 	call	1000cfb0 <__sprint_r>
10007958:	103c7c1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
1000795c:	d8c12017 	ldw	r3,1152(sp)
10007960:	da000404 	addi	r8,sp,16
10007964:	003d3b06 	br	10006e54 <__alt_data_end+0xf8006e54>
10007968:	d9413b17 	ldw	r5,1260(sp)
1000796c:	d8c10e04 	addi	r3,sp,1080
10007970:	908003cc 	andi	r2,r18,15
10007974:	a808973a 	slli	r4,r21,28
10007978:	2885883a 	add	r2,r5,r2
1000797c:	9024d13a 	srli	r18,r18,4
10007980:	10800003 	ldbu	r2,0(r2)
10007984:	a82ad13a 	srli	r21,r21,4
10007988:	18ffffc4 	addi	r3,r3,-1
1000798c:	24a4b03a 	or	r18,r4,r18
10007990:	18800005 	stb	r2,0(r3)
10007994:	9544b03a 	or	r2,r18,r21
10007998:	103ff51e 	bne	r2,zero,10007970 <__alt_data_end+0xf8007970>
1000799c:	d9412817 	ldw	r5,1184(sp)
100079a0:	d8c13115 	stw	r3,1220(sp)
100079a4:	28e3c83a 	sub	r17,r5,r3
100079a8:	003ccb06 	br	10006cd8 <__alt_data_end+0xf8006cd8>
100079ac:	d8c10e04 	addi	r3,sp,1080
100079b0:	0023883a 	mov	r17,zero
100079b4:	d8c13115 	stw	r3,1220(sp)
100079b8:	003cc706 	br	10006cd8 <__alt_data_end+0xf8006cd8>
100079bc:	dc012617 	ldw	r16,1176(sp)
100079c0:	0401ab0e 	bge	zero,r16,10008070 <___vfprintf_internal_r+0x1984>
100079c4:	d8813317 	ldw	r2,1228(sp)
100079c8:	d9413117 	ldw	r5,1220(sp)
100079cc:	d9013417 	ldw	r4,1232(sp)
100079d0:	1023883a 	mov	r17,r2
100079d4:	28a1883a 	add	r16,r5,r2
100079d8:	2080010e 	bge	r4,r2,100079e0 <___vfprintf_internal_r+0x12f4>
100079dc:	2023883a 	mov	r17,r4
100079e0:	04400b0e 	bge	zero,r17,10007a10 <___vfprintf_internal_r+0x1324>
100079e4:	d8811f17 	ldw	r2,1148(sp)
100079e8:	d9413117 	ldw	r5,1220(sp)
100079ec:	1c47883a 	add	r3,r3,r17
100079f0:	10800044 	addi	r2,r2,1
100079f4:	41400015 	stw	r5,0(r8)
100079f8:	44400115 	stw	r17,4(r8)
100079fc:	d8c12015 	stw	r3,1152(sp)
10007a00:	d8811f15 	stw	r2,1148(sp)
10007a04:	010001c4 	movi	r4,7
10007a08:	20826716 	blt	r4,r2,100083a8 <___vfprintf_internal_r+0x1cbc>
10007a0c:	42000204 	addi	r8,r8,8
10007a10:	88026316 	blt	r17,zero,100083a0 <___vfprintf_internal_r+0x1cb4>
10007a14:	d8813417 	ldw	r2,1232(sp)
10007a18:	1463c83a 	sub	r17,r2,r17
10007a1c:	0440590e 	bge	zero,r17,10007b84 <___vfprintf_internal_r+0x1498>
10007a20:	04c00404 	movi	r19,16
10007a24:	d8811f17 	ldw	r2,1148(sp)
10007a28:	9c41770e 	bge	r19,r17,10008008 <___vfprintf_internal_r+0x191c>
10007a2c:	01440074 	movhi	r5,4097
10007a30:	29489284 	addi	r5,r5,8778
10007a34:	d9412c15 	stw	r5,1200(sp)
10007a38:	054001c4 	movi	r21,7
10007a3c:	00000306 	br	10007a4c <___vfprintf_internal_r+0x1360>
10007a40:	42000204 	addi	r8,r8,8
10007a44:	8c7ffc04 	addi	r17,r17,-16
10007a48:	9c41720e 	bge	r19,r17,10008014 <___vfprintf_internal_r+0x1928>
10007a4c:	18c00404 	addi	r3,r3,16
10007a50:	10800044 	addi	r2,r2,1
10007a54:	45000015 	stw	r20,0(r8)
10007a58:	44c00115 	stw	r19,4(r8)
10007a5c:	d8c12015 	stw	r3,1152(sp)
10007a60:	d8811f15 	stw	r2,1148(sp)
10007a64:	a8bff60e 	bge	r21,r2,10007a40 <__alt_data_end+0xf8007a40>
10007a68:	b809883a 	mov	r4,r23
10007a6c:	b00b883a 	mov	r5,r22
10007a70:	d9811e04 	addi	r6,sp,1144
10007a74:	000cfb00 	call	1000cfb0 <__sprint_r>
10007a78:	103c341e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007a7c:	d8c12017 	ldw	r3,1152(sp)
10007a80:	d8811f17 	ldw	r2,1148(sp)
10007a84:	da000404 	addi	r8,sp,16
10007a88:	003fee06 	br	10007a44 <__alt_data_end+0xf8007a44>
10007a8c:	b809883a 	mov	r4,r23
10007a90:	b00b883a 	mov	r5,r22
10007a94:	d9811e04 	addi	r6,sp,1144
10007a98:	000cfb00 	call	1000cfb0 <__sprint_r>
10007a9c:	103c2b1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007aa0:	d8c12017 	ldw	r3,1152(sp)
10007aa4:	d8812787 	ldb	r2,1182(sp)
10007aa8:	da000404 	addi	r8,sp,16
10007aac:	003cce06 	br	10006de8 <__alt_data_end+0xf8006de8>
10007ab0:	d8813317 	ldw	r2,1228(sp)
10007ab4:	14ffffc4 	addi	r19,r2,-1
10007ab8:	04ff630e 	bge	zero,r19,10007848 <__alt_data_end+0xf8007848>
10007abc:	05400404 	movi	r21,16
10007ac0:	acc0810e 	bge	r21,r19,10007cc8 <___vfprintf_internal_r+0x15dc>
10007ac4:	01440074 	movhi	r5,4097
10007ac8:	29489284 	addi	r5,r5,8778
10007acc:	d9412c15 	stw	r5,1200(sp)
10007ad0:	01c001c4 	movi	r7,7
10007ad4:	00000306 	br	10007ae4 <___vfprintf_internal_r+0x13f8>
10007ad8:	8c400204 	addi	r17,r17,8
10007adc:	9cfffc04 	addi	r19,r19,-16
10007ae0:	acc07c0e 	bge	r21,r19,10007cd4 <___vfprintf_internal_r+0x15e8>
10007ae4:	18c00404 	addi	r3,r3,16
10007ae8:	84000044 	addi	r16,r16,1
10007aec:	8d000015 	stw	r20,0(r17)
10007af0:	8d400115 	stw	r21,4(r17)
10007af4:	d8c12015 	stw	r3,1152(sp)
10007af8:	dc011f15 	stw	r16,1148(sp)
10007afc:	3c3ff60e 	bge	r7,r16,10007ad8 <__alt_data_end+0xf8007ad8>
10007b00:	b809883a 	mov	r4,r23
10007b04:	b00b883a 	mov	r5,r22
10007b08:	d9811e04 	addi	r6,sp,1144
10007b0c:	d9c13d15 	stw	r7,1268(sp)
10007b10:	000cfb00 	call	1000cfb0 <__sprint_r>
10007b14:	d9c13d17 	ldw	r7,1268(sp)
10007b18:	103c0c1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007b1c:	d8c12017 	ldw	r3,1152(sp)
10007b20:	dc011f17 	ldw	r16,1148(sp)
10007b24:	dc400404 	addi	r17,sp,16
10007b28:	003fec06 	br	10007adc <__alt_data_end+0xf8007adc>
10007b2c:	00800084 	movi	r2,2
10007b30:	9546b03a 	or	r3,r18,r21
10007b34:	003d7d06 	br	1000712c <__alt_data_end+0xf800712c>
10007b38:	10803fcc 	andi	r2,r2,255
10007b3c:	1080201c 	xori	r2,r2,128
10007b40:	10bfe004 	addi	r2,r2,-128
10007b44:	01000c04 	movi	r4,48
10007b48:	1101d726 	beq	r2,r4,100082a8 <___vfprintf_internal_r+0x1bbc>
10007b4c:	d9413117 	ldw	r5,1220(sp)
10007b50:	d8812817 	ldw	r2,1184(sp)
10007b54:	193fffc5 	stb	r4,-1(r3)
10007b58:	297fffc4 	addi	r5,r5,-1
10007b5c:	d9413115 	stw	r5,1220(sp)
10007b60:	1163c83a 	sub	r17,r2,r5
10007b64:	003c5c06 	br	10006cd8 <__alt_data_end+0xf8006cd8>
10007b68:	b809883a 	mov	r4,r23
10007b6c:	b00b883a 	mov	r5,r22
10007b70:	d9811e04 	addi	r6,sp,1144
10007b74:	000cfb00 	call	1000cfb0 <__sprint_r>
10007b78:	103bf41e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007b7c:	d8c12017 	ldw	r3,1152(sp)
10007b80:	da000404 	addi	r8,sp,16
10007b84:	d9413117 	ldw	r5,1220(sp)
10007b88:	d9013417 	ldw	r4,1232(sp)
10007b8c:	d8812617 	ldw	r2,1176(sp)
10007b90:	2923883a 	add	r17,r5,r4
10007b94:	d9413317 	ldw	r5,1228(sp)
10007b98:	11400216 	blt	r2,r5,10007ba4 <___vfprintf_internal_r+0x14b8>
10007b9c:	e100004c 	andi	r4,fp,1
10007ba0:	20000d26 	beq	r4,zero,10007bd8 <___vfprintf_internal_r+0x14ec>
10007ba4:	d9013817 	ldw	r4,1248(sp)
10007ba8:	d9413517 	ldw	r5,1236(sp)
10007bac:	1907883a 	add	r3,r3,r4
10007bb0:	d9011f17 	ldw	r4,1148(sp)
10007bb4:	41400015 	stw	r5,0(r8)
10007bb8:	d9413817 	ldw	r5,1248(sp)
10007bbc:	21000044 	addi	r4,r4,1
10007bc0:	d8c12015 	stw	r3,1152(sp)
10007bc4:	41400115 	stw	r5,4(r8)
10007bc8:	d9011f15 	stw	r4,1148(sp)
10007bcc:	014001c4 	movi	r5,7
10007bd0:	2901fd16 	blt	r5,r4,100083c8 <___vfprintf_internal_r+0x1cdc>
10007bd4:	42000204 	addi	r8,r8,8
10007bd8:	d9013317 	ldw	r4,1228(sp)
10007bdc:	2085c83a 	sub	r2,r4,r2
10007be0:	8449c83a 	sub	r4,r16,r17
10007be4:	1021883a 	mov	r16,r2
10007be8:	2080010e 	bge	r4,r2,10007bf0 <___vfprintf_internal_r+0x1504>
10007bec:	2021883a 	mov	r16,r4
10007bf0:	04000a0e 	bge	zero,r16,10007c1c <___vfprintf_internal_r+0x1530>
10007bf4:	d9011f17 	ldw	r4,1148(sp)
10007bf8:	1c07883a 	add	r3,r3,r16
10007bfc:	44400015 	stw	r17,0(r8)
10007c00:	21000044 	addi	r4,r4,1
10007c04:	44000115 	stw	r16,4(r8)
10007c08:	d8c12015 	stw	r3,1152(sp)
10007c0c:	d9011f15 	stw	r4,1148(sp)
10007c10:	014001c4 	movi	r5,7
10007c14:	29020916 	blt	r5,r4,1000843c <___vfprintf_internal_r+0x1d50>
10007c18:	42000204 	addi	r8,r8,8
10007c1c:	80020116 	blt	r16,zero,10008424 <___vfprintf_internal_r+0x1d38>
10007c20:	1421c83a 	sub	r16,r2,r16
10007c24:	043cc40e 	bge	zero,r16,10006f38 <__alt_data_end+0xf8006f38>
10007c28:	04400404 	movi	r17,16
10007c2c:	d8811f17 	ldw	r2,1148(sp)
10007c30:	8c3f110e 	bge	r17,r16,10007878 <__alt_data_end+0xf8007878>
10007c34:	01440074 	movhi	r5,4097
10007c38:	29489284 	addi	r5,r5,8778
10007c3c:	d9412c15 	stw	r5,1200(sp)
10007c40:	04c001c4 	movi	r19,7
10007c44:	00000306 	br	10007c54 <___vfprintf_internal_r+0x1568>
10007c48:	42000204 	addi	r8,r8,8
10007c4c:	843ffc04 	addi	r16,r16,-16
10007c50:	8c3f0c0e 	bge	r17,r16,10007884 <__alt_data_end+0xf8007884>
10007c54:	18c00404 	addi	r3,r3,16
10007c58:	10800044 	addi	r2,r2,1
10007c5c:	45000015 	stw	r20,0(r8)
10007c60:	44400115 	stw	r17,4(r8)
10007c64:	d8c12015 	stw	r3,1152(sp)
10007c68:	d8811f15 	stw	r2,1148(sp)
10007c6c:	98bff60e 	bge	r19,r2,10007c48 <__alt_data_end+0xf8007c48>
10007c70:	b809883a 	mov	r4,r23
10007c74:	b00b883a 	mov	r5,r22
10007c78:	d9811e04 	addi	r6,sp,1144
10007c7c:	000cfb00 	call	1000cfb0 <__sprint_r>
10007c80:	103bb21e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007c84:	d8c12017 	ldw	r3,1152(sp)
10007c88:	d8811f17 	ldw	r2,1148(sp)
10007c8c:	da000404 	addi	r8,sp,16
10007c90:	003fee06 	br	10007c4c <__alt_data_end+0xf8007c4c>
10007c94:	e088703a 	and	r4,fp,r2
10007c98:	203ec01e 	bne	r4,zero,1000779c <__alt_data_end+0xf800779c>
10007c9c:	dc011f17 	ldw	r16,1148(sp)
10007ca0:	d9013117 	ldw	r4,1220(sp)
10007ca4:	40800115 	stw	r2,4(r8)
10007ca8:	84000044 	addi	r16,r16,1
10007cac:	41000015 	stw	r4,0(r8)
10007cb0:	d8c12015 	stw	r3,1152(sp)
10007cb4:	dc011f15 	stw	r16,1148(sp)
10007cb8:	008001c4 	movi	r2,7
10007cbc:	14000e16 	blt	r2,r16,10007cf8 <___vfprintf_internal_r+0x160c>
10007cc0:	44400204 	addi	r17,r8,8
10007cc4:	003ee006 	br	10007848 <__alt_data_end+0xf8007848>
10007cc8:	01040074 	movhi	r4,4097
10007ccc:	21089284 	addi	r4,r4,8778
10007cd0:	d9012c15 	stw	r4,1200(sp)
10007cd4:	d8812c17 	ldw	r2,1200(sp)
10007cd8:	1cc7883a 	add	r3,r3,r19
10007cdc:	84000044 	addi	r16,r16,1
10007ce0:	88800015 	stw	r2,0(r17)
10007ce4:	8cc00115 	stw	r19,4(r17)
10007ce8:	d8c12015 	stw	r3,1152(sp)
10007cec:	dc011f15 	stw	r16,1148(sp)
10007cf0:	008001c4 	movi	r2,7
10007cf4:	143ed30e 	bge	r2,r16,10007844 <__alt_data_end+0xf8007844>
10007cf8:	b809883a 	mov	r4,r23
10007cfc:	b00b883a 	mov	r5,r22
10007d00:	d9811e04 	addi	r6,sp,1144
10007d04:	000cfb00 	call	1000cfb0 <__sprint_r>
10007d08:	103b901e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007d0c:	d8c12017 	ldw	r3,1152(sp)
10007d10:	dc011f17 	ldw	r16,1148(sp)
10007d14:	dc400404 	addi	r17,sp,16
10007d18:	003ecb06 	br	10007848 <__alt_data_end+0xf8007848>
10007d1c:	b809883a 	mov	r4,r23
10007d20:	b00b883a 	mov	r5,r22
10007d24:	d9811e04 	addi	r6,sp,1144
10007d28:	000cfb00 	call	1000cfb0 <__sprint_r>
10007d2c:	103b871e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007d30:	d8c12017 	ldw	r3,1152(sp)
10007d34:	dc011f17 	ldw	r16,1148(sp)
10007d38:	da000404 	addi	r8,sp,16
10007d3c:	003ea206 	br	100077c8 <__alt_data_end+0xf80077c8>
10007d40:	b809883a 	mov	r4,r23
10007d44:	b00b883a 	mov	r5,r22
10007d48:	d9811e04 	addi	r6,sp,1144
10007d4c:	000cfb00 	call	1000cfb0 <__sprint_r>
10007d50:	103b7e1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007d54:	d8c12017 	ldw	r3,1152(sp)
10007d58:	dc011f17 	ldw	r16,1148(sp)
10007d5c:	dc400404 	addi	r17,sp,16
10007d60:	003ea406 	br	100077f4 <__alt_data_end+0xf80077f4>
10007d64:	b809883a 	mov	r4,r23
10007d68:	b00b883a 	mov	r5,r22
10007d6c:	d9811e04 	addi	r6,sp,1144
10007d70:	000cfb00 	call	1000cfb0 <__sprint_r>
10007d74:	103b751e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10007d78:	d8c12017 	ldw	r3,1152(sp)
10007d7c:	da000404 	addi	r8,sp,16
10007d80:	003c3706 	br	10006e60 <__alt_data_end+0xf8006e60>
10007d84:	04a5c83a 	sub	r18,zero,r18
10007d88:	9004c03a 	cmpne	r2,r18,zero
10007d8c:	056bc83a 	sub	r21,zero,r21
10007d90:	a8abc83a 	sub	r21,r21,r2
10007d94:	04c00b44 	movi	r19,45
10007d98:	dcc12785 	stb	r19,1182(sp)
10007d9c:	da413215 	stw	r9,1224(sp)
10007da0:	00800044 	movi	r2,1
10007da4:	9546b03a 	or	r3,r18,r21
10007da8:	003bb106 	br	10006c70 <__alt_data_end+0xf8006c70>
10007dac:	da013f15 	stw	r8,1276(sp)
10007db0:	da413e15 	stw	r9,1272(sp)
10007db4:	0002a780 	call	10002a78 <__fpclassifyd>
10007db8:	da013f17 	ldw	r8,1276(sp)
10007dbc:	da413e17 	ldw	r9,1272(sp)
10007dc0:	1000e526 	beq	r2,zero,10008158 <___vfprintf_internal_r+0x1a6c>
10007dc4:	04fff7c4 	movi	r19,-33
10007dc8:	00bfffc4 	movi	r2,-1
10007dcc:	84e6703a 	and	r19,r16,r19
10007dd0:	48822926 	beq	r9,r2,10008678 <___vfprintf_internal_r+0x1f8c>
10007dd4:	008011c4 	movi	r2,71
10007dd8:	98821626 	beq	r19,r2,10008634 <___vfprintf_internal_r+0x1f48>
10007ddc:	d9013917 	ldw	r4,1252(sp)
10007de0:	e0c04014 	ori	r3,fp,256
10007de4:	d8c12d15 	stw	r3,1204(sp)
10007de8:	20021f16 	blt	r4,zero,10008668 <___vfprintf_internal_r+0x1f7c>
10007dec:	dc413917 	ldw	r17,1252(sp)
10007df0:	d8012b05 	stb	zero,1196(sp)
10007df4:	00801984 	movi	r2,102
10007df8:	80814d26 	beq	r16,r2,10008330 <___vfprintf_internal_r+0x1c44>
10007dfc:	00801184 	movi	r2,70
10007e00:	80814b26 	beq	r16,r2,10008330 <___vfprintf_internal_r+0x1c44>
10007e04:	00801144 	movi	r2,69
10007e08:	98821d26 	beq	r19,r2,10008680 <___vfprintf_internal_r+0x1f94>
10007e0c:	482b883a 	mov	r21,r9
10007e10:	d8812604 	addi	r2,sp,1176
10007e14:	d8800115 	stw	r2,4(sp)
10007e18:	d9413717 	ldw	r5,1244(sp)
10007e1c:	d8812504 	addi	r2,sp,1172
10007e20:	d8800215 	stw	r2,8(sp)
10007e24:	d8812104 	addi	r2,sp,1156
10007e28:	dd400015 	stw	r21,0(sp)
10007e2c:	d8800315 	stw	r2,12(sp)
10007e30:	b809883a 	mov	r4,r23
10007e34:	880d883a 	mov	r6,r17
10007e38:	01c00084 	movi	r7,2
10007e3c:	da013f15 	stw	r8,1276(sp)
10007e40:	da413e15 	stw	r9,1272(sp)
10007e44:	0008b640 	call	10008b64 <_dtoa_r>
10007e48:	d8813115 	stw	r2,1220(sp)
10007e4c:	008019c4 	movi	r2,103
10007e50:	da013f17 	ldw	r8,1276(sp)
10007e54:	da413e17 	ldw	r9,1272(sp)
10007e58:	80800226 	beq	r16,r2,10007e64 <___vfprintf_internal_r+0x1778>
10007e5c:	008011c4 	movi	r2,71
10007e60:	8081451e 	bne	r16,r2,10008378 <___vfprintf_internal_r+0x1c8c>
10007e64:	e080004c 	andi	r2,fp,1
10007e68:	10021e26 	beq	r2,zero,100086e4 <___vfprintf_internal_r+0x1ff8>
10007e6c:	d8c13117 	ldw	r3,1220(sp)
10007e70:	1d55883a 	add	r10,r3,r21
10007e74:	d9013717 	ldw	r4,1244(sp)
10007e78:	880b883a 	mov	r5,r17
10007e7c:	000d883a 	mov	r6,zero
10007e80:	000f883a 	mov	r7,zero
10007e84:	da013f15 	stw	r8,1276(sp)
10007e88:	da413e15 	stw	r9,1272(sp)
10007e8c:	da813d15 	stw	r10,1268(sp)
10007e90:	00050180 	call	10005018 <__eqdf2>
10007e94:	da013f17 	ldw	r8,1276(sp)
10007e98:	da413e17 	ldw	r9,1272(sp)
10007e9c:	da813d17 	ldw	r10,1268(sp)
10007ea0:	1001a126 	beq	r2,zero,10008528 <___vfprintf_internal_r+0x1e3c>
10007ea4:	d8812117 	ldw	r2,1156(sp)
10007ea8:	1280062e 	bgeu	r2,r10,10007ec4 <___vfprintf_internal_r+0x17d8>
10007eac:	01000c04 	movi	r4,48
10007eb0:	10c00044 	addi	r3,r2,1
10007eb4:	d8c12115 	stw	r3,1156(sp)
10007eb8:	11000005 	stb	r4,0(r2)
10007ebc:	d8812117 	ldw	r2,1156(sp)
10007ec0:	12bffb36 	bltu	r2,r10,10007eb0 <__alt_data_end+0xf8007eb0>
10007ec4:	d8c13117 	ldw	r3,1220(sp)
10007ec8:	10c5c83a 	sub	r2,r2,r3
10007ecc:	d8813315 	stw	r2,1228(sp)
10007ed0:	008011c4 	movi	r2,71
10007ed4:	98818926 	beq	r19,r2,100084fc <___vfprintf_internal_r+0x1e10>
10007ed8:	00801944 	movi	r2,101
10007edc:	14023c0e 	bge	r2,r16,100087d0 <___vfprintf_internal_r+0x20e4>
10007ee0:	d8c12617 	ldw	r3,1176(sp)
10007ee4:	00801984 	movi	r2,102
10007ee8:	d8c13415 	stw	r3,1232(sp)
10007eec:	8081ef26 	beq	r16,r2,100086ac <___vfprintf_internal_r+0x1fc0>
10007ef0:	d8c13417 	ldw	r3,1232(sp)
10007ef4:	d9013317 	ldw	r4,1228(sp)
10007ef8:	1901e316 	blt	r3,r4,10008688 <___vfprintf_internal_r+0x1f9c>
10007efc:	e080004c 	andi	r2,fp,1
10007f00:	1001f426 	beq	r2,zero,100086d4 <___vfprintf_internal_r+0x1fe8>
10007f04:	d8c13417 	ldw	r3,1232(sp)
10007f08:	1c400044 	addi	r17,r3,1
10007f0c:	8839883a 	mov	fp,r17
10007f10:	8801e416 	blt	r17,zero,100086a4 <___vfprintf_internal_r+0x1fb8>
10007f14:	dd412b07 	ldb	r21,1196(sp)
10007f18:	a801701e 	bne	r21,zero,100084dc <___vfprintf_internal_r+0x1df0>
10007f1c:	df012b15 	stw	fp,1196(sp)
10007f20:	dcc12783 	ldbu	r19,1182(sp)
10007f24:	df012d17 	ldw	fp,1204(sp)
10007f28:	d8013215 	stw	zero,1224(sp)
10007f2c:	dc812d15 	stw	r18,1204(sp)
10007f30:	003b6e06 	br	10006cec <__alt_data_end+0xf8006cec>
10007f34:	e080040c 	andi	r2,fp,16
10007f38:	1000b51e 	bne	r2,zero,10008210 <___vfprintf_internal_r+0x1b24>
10007f3c:	e080100c 	andi	r2,fp,64
10007f40:	10015b26 	beq	r2,zero,100084b0 <___vfprintf_internal_r+0x1dc4>
10007f44:	d9012d17 	ldw	r4,1204(sp)
10007f48:	d9412f17 	ldw	r5,1212(sp)
10007f4c:	20800017 	ldw	r2,0(r4)
10007f50:	21000104 	addi	r4,r4,4
10007f54:	d9012d15 	stw	r4,1204(sp)
10007f58:	1140000d 	sth	r5,0(r2)
10007f5c:	003a2006 	br	100067e0 <__alt_data_end+0xf80067e0>
10007f60:	e0c0100c 	andi	r3,fp,64
10007f64:	1800a226 	beq	r3,zero,100081f0 <___vfprintf_internal_r+0x1b04>
10007f68:	d8c12d17 	ldw	r3,1204(sp)
10007f6c:	1480000b 	ldhu	r18,0(r2)
10007f70:	002b883a 	mov	r21,zero
10007f74:	18c00104 	addi	r3,r3,4
10007f78:	d8c12d15 	stw	r3,1204(sp)
10007f7c:	0005883a 	mov	r2,zero
10007f80:	9007883a 	mov	r3,r18
10007f84:	003c6906 	br	1000712c <__alt_data_end+0xf800712c>
10007f88:	e0c0100c 	andi	r3,fp,64
10007f8c:	18009026 	beq	r3,zero,100081d0 <___vfprintf_internal_r+0x1ae4>
10007f90:	1480000b 	ldhu	r18,0(r2)
10007f94:	d8812d17 	ldw	r2,1204(sp)
10007f98:	002b883a 	mov	r21,zero
10007f9c:	9007883a 	mov	r3,r18
10007fa0:	10800104 	addi	r2,r2,4
10007fa4:	d8812d15 	stw	r2,1204(sp)
10007fa8:	00800044 	movi	r2,1
10007fac:	003c5f06 	br	1000712c <__alt_data_end+0xf800712c>
10007fb0:	e0c0100c 	andi	r3,fp,64
10007fb4:	18008026 	beq	r3,zero,100081b8 <___vfprintf_internal_r+0x1acc>
10007fb8:	d9012d17 	ldw	r4,1204(sp)
10007fbc:	1480000b 	ldhu	r18,0(r2)
10007fc0:	002b883a 	mov	r21,zero
10007fc4:	21000104 	addi	r4,r4,4
10007fc8:	d9012d15 	stw	r4,1204(sp)
10007fcc:	003c7906 	br	100071b4 <__alt_data_end+0xf80071b4>
10007fd0:	e080100c 	andi	r2,fp,64
10007fd4:	10007126 	beq	r2,zero,1000819c <___vfprintf_internal_r+0x1ab0>
10007fd8:	1c80000f 	ldh	r18,0(r3)
10007fdc:	d8812d17 	ldw	r2,1204(sp)
10007fe0:	902bd7fa 	srai	r21,r18,31
10007fe4:	10800104 	addi	r2,r2,4
10007fe8:	d8812d15 	stw	r2,1204(sp)
10007fec:	a805883a 	mov	r2,r21
10007ff0:	003b1a06 	br	10006c5c <__alt_data_end+0xf8006c5c>
10007ff4:	e4000007 	ldb	r16,0(fp)
10007ff8:	e005883a 	mov	r2,fp
10007ffc:	003a2306 	br	1000688c <__alt_data_end+0xf800688c>
10008000:	00800084 	movi	r2,2
10008004:	003c4906 	br	1000712c <__alt_data_end+0xf800712c>
10008008:	01040074 	movhi	r4,4097
1000800c:	21089284 	addi	r4,r4,8778
10008010:	d9012c15 	stw	r4,1200(sp)
10008014:	d9012c17 	ldw	r4,1200(sp)
10008018:	1c47883a 	add	r3,r3,r17
1000801c:	10800044 	addi	r2,r2,1
10008020:	41000015 	stw	r4,0(r8)
10008024:	44400115 	stw	r17,4(r8)
10008028:	d8c12015 	stw	r3,1152(sp)
1000802c:	d8811f15 	stw	r2,1148(sp)
10008030:	010001c4 	movi	r4,7
10008034:	20becc16 	blt	r4,r2,10007b68 <__alt_data_end+0xf8007b68>
10008038:	42000204 	addi	r8,r8,8
1000803c:	003ed106 	br	10007b84 <__alt_data_end+0xf8007b84>
10008040:	01040074 	movhi	r4,4097
10008044:	21089284 	addi	r4,r4,8778
10008048:	d9012c15 	stw	r4,1200(sp)
1000804c:	003ba306 	br	10006edc <__alt_data_end+0xf8006edc>
10008050:	b809883a 	mov	r4,r23
10008054:	b00b883a 	mov	r5,r22
10008058:	d9811e04 	addi	r6,sp,1144
1000805c:	000cfb00 	call	1000cfb0 <__sprint_r>
10008060:	103aba1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10008064:	d8c12017 	ldw	r3,1152(sp)
10008068:	da000404 	addi	r8,sp,16
1000806c:	003d6c06 	br	10007620 <__alt_data_end+0xf8007620>
10008070:	d8811f17 	ldw	r2,1148(sp)
10008074:	01440074 	movhi	r5,4097
10008078:	01000044 	movi	r4,1
1000807c:	18c00044 	addi	r3,r3,1
10008080:	10800044 	addi	r2,r2,1
10008084:	29489204 	addi	r5,r5,8776
10008088:	41000115 	stw	r4,4(r8)
1000808c:	41400015 	stw	r5,0(r8)
10008090:	d8c12015 	stw	r3,1152(sp)
10008094:	d8811f15 	stw	r2,1148(sp)
10008098:	010001c4 	movi	r4,7
1000809c:	20806716 	blt	r4,r2,1000823c <___vfprintf_internal_r+0x1b50>
100080a0:	42000204 	addi	r8,r8,8
100080a4:	8000041e 	bne	r16,zero,100080b8 <___vfprintf_internal_r+0x19cc>
100080a8:	d8813317 	ldw	r2,1228(sp)
100080ac:	1000021e 	bne	r2,zero,100080b8 <___vfprintf_internal_r+0x19cc>
100080b0:	e080004c 	andi	r2,fp,1
100080b4:	103ba026 	beq	r2,zero,10006f38 <__alt_data_end+0xf8006f38>
100080b8:	d9013817 	ldw	r4,1248(sp)
100080bc:	d8811f17 	ldw	r2,1148(sp)
100080c0:	d9413517 	ldw	r5,1236(sp)
100080c4:	1907883a 	add	r3,r3,r4
100080c8:	10800044 	addi	r2,r2,1
100080cc:	41000115 	stw	r4,4(r8)
100080d0:	41400015 	stw	r5,0(r8)
100080d4:	d8c12015 	stw	r3,1152(sp)
100080d8:	d8811f15 	stw	r2,1148(sp)
100080dc:	010001c4 	movi	r4,7
100080e0:	20815716 	blt	r4,r2,10008640 <___vfprintf_internal_r+0x1f54>
100080e4:	42000204 	addi	r8,r8,8
100080e8:	0421c83a 	sub	r16,zero,r16
100080ec:	0400810e 	bge	zero,r16,100082f4 <___vfprintf_internal_r+0x1c08>
100080f0:	04400404 	movi	r17,16
100080f4:	8c00bd0e 	bge	r17,r16,100083ec <___vfprintf_internal_r+0x1d00>
100080f8:	01440074 	movhi	r5,4097
100080fc:	29489284 	addi	r5,r5,8778
10008100:	d9412c15 	stw	r5,1200(sp)
10008104:	04c001c4 	movi	r19,7
10008108:	00000306 	br	10008118 <___vfprintf_internal_r+0x1a2c>
1000810c:	42000204 	addi	r8,r8,8
10008110:	843ffc04 	addi	r16,r16,-16
10008114:	8c00b80e 	bge	r17,r16,100083f8 <___vfprintf_internal_r+0x1d0c>
10008118:	18c00404 	addi	r3,r3,16
1000811c:	10800044 	addi	r2,r2,1
10008120:	45000015 	stw	r20,0(r8)
10008124:	44400115 	stw	r17,4(r8)
10008128:	d8c12015 	stw	r3,1152(sp)
1000812c:	d8811f15 	stw	r2,1148(sp)
10008130:	98bff60e 	bge	r19,r2,1000810c <__alt_data_end+0xf800810c>
10008134:	b809883a 	mov	r4,r23
10008138:	b00b883a 	mov	r5,r22
1000813c:	d9811e04 	addi	r6,sp,1144
10008140:	000cfb00 	call	1000cfb0 <__sprint_r>
10008144:	103a811e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10008148:	d8c12017 	ldw	r3,1152(sp)
1000814c:	d8811f17 	ldw	r2,1148(sp)
10008150:	da000404 	addi	r8,sp,16
10008154:	003fee06 	br	10008110 <__alt_data_end+0xf8008110>
10008158:	008011c4 	movi	r2,71
1000815c:	1400db16 	blt	r2,r16,100084cc <___vfprintf_internal_r+0x1de0>
10008160:	01040074 	movhi	r4,4097
10008164:	21088404 	addi	r4,r4,8720
10008168:	d9013115 	stw	r4,1220(sp)
1000816c:	00c000c4 	movi	r3,3
10008170:	00bfdfc4 	movi	r2,-129
10008174:	d8c12b15 	stw	r3,1196(sp)
10008178:	e0b8703a 	and	fp,fp,r2
1000817c:	dcc12783 	ldbu	r19,1182(sp)
10008180:	dc812d15 	stw	r18,1204(sp)
10008184:	1823883a 	mov	r17,r3
10008188:	d8013215 	stw	zero,1224(sp)
1000818c:	d8013415 	stw	zero,1232(sp)
10008190:	003ad606 	br	10006cec <__alt_data_end+0xf8006cec>
10008194:	4823883a 	mov	r17,r9
10008198:	003cc906 	br	100074c0 <__alt_data_end+0xf80074c0>
1000819c:	1c800017 	ldw	r18,0(r3)
100081a0:	d8c12d17 	ldw	r3,1204(sp)
100081a4:	902bd7fa 	srai	r21,r18,31
100081a8:	18c00104 	addi	r3,r3,4
100081ac:	d8c12d15 	stw	r3,1204(sp)
100081b0:	a805883a 	mov	r2,r21
100081b4:	003aa906 	br	10006c5c <__alt_data_end+0xf8006c5c>
100081b8:	d9412d17 	ldw	r5,1204(sp)
100081bc:	14800017 	ldw	r18,0(r2)
100081c0:	002b883a 	mov	r21,zero
100081c4:	29400104 	addi	r5,r5,4
100081c8:	d9412d15 	stw	r5,1204(sp)
100081cc:	003bf906 	br	100071b4 <__alt_data_end+0xf80071b4>
100081d0:	d8c12d17 	ldw	r3,1204(sp)
100081d4:	14800017 	ldw	r18,0(r2)
100081d8:	002b883a 	mov	r21,zero
100081dc:	18c00104 	addi	r3,r3,4
100081e0:	d8c12d15 	stw	r3,1204(sp)
100081e4:	00800044 	movi	r2,1
100081e8:	9007883a 	mov	r3,r18
100081ec:	003bcf06 	br	1000712c <__alt_data_end+0xf800712c>
100081f0:	d9012d17 	ldw	r4,1204(sp)
100081f4:	14800017 	ldw	r18,0(r2)
100081f8:	002b883a 	mov	r21,zero
100081fc:	21000104 	addi	r4,r4,4
10008200:	d9012d15 	stw	r4,1204(sp)
10008204:	0005883a 	mov	r2,zero
10008208:	9007883a 	mov	r3,r18
1000820c:	003bc706 	br	1000712c <__alt_data_end+0xf800712c>
10008210:	d9412d17 	ldw	r5,1204(sp)
10008214:	d8c12f17 	ldw	r3,1212(sp)
10008218:	28800017 	ldw	r2,0(r5)
1000821c:	29400104 	addi	r5,r5,4
10008220:	d9412d15 	stw	r5,1204(sp)
10008224:	10c00015 	stw	r3,0(r2)
10008228:	00396d06 	br	100067e0 <__alt_data_end+0xf80067e0>
1000822c:	01040074 	movhi	r4,4097
10008230:	21088204 	addi	r4,r4,8712
10008234:	d9013115 	stw	r4,1220(sp)
10008238:	003ba206 	br	100070c4 <__alt_data_end+0xf80070c4>
1000823c:	b809883a 	mov	r4,r23
10008240:	b00b883a 	mov	r5,r22
10008244:	d9811e04 	addi	r6,sp,1144
10008248:	000cfb00 	call	1000cfb0 <__sprint_r>
1000824c:	103a3f1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10008250:	dc012617 	ldw	r16,1176(sp)
10008254:	d8c12017 	ldw	r3,1152(sp)
10008258:	da000404 	addi	r8,sp,16
1000825c:	003f9106 	br	100080a4 <__alt_data_end+0xf80080a4>
10008260:	e0800044 	addi	r2,fp,1
10008264:	9cc00814 	ori	r19,r19,32
10008268:	e4000047 	ldb	r16,1(fp)
1000826c:	00398706 	br	1000688c <__alt_data_end+0xf800688c>
10008270:	d8812e17 	ldw	r2,1208(sp)
10008274:	d8c12d15 	stw	r3,1204(sp)
10008278:	0085c83a 	sub	r2,zero,r2
1000827c:	d8812e15 	stw	r2,1208(sp)
10008280:	e005883a 	mov	r2,fp
10008284:	003a3a06 	br	10006b70 <__alt_data_end+0xf8006b70>
10008288:	b809883a 	mov	r4,r23
1000828c:	b00b883a 	mov	r5,r22
10008290:	d9811e04 	addi	r6,sp,1144
10008294:	000cfb00 	call	1000cfb0 <__sprint_r>
10008298:	103a2c1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
1000829c:	d8c12017 	ldw	r3,1152(sp)
100082a0:	da000404 	addi	r8,sp,16
100082a4:	003cf006 	br	10007668 <__alt_data_end+0xf8007668>
100082a8:	d8c12817 	ldw	r3,1184(sp)
100082ac:	d9013117 	ldw	r4,1220(sp)
100082b0:	1923c83a 	sub	r17,r3,r4
100082b4:	003a8806 	br	10006cd8 <__alt_data_end+0xf8006cd8>
100082b8:	da013f15 	stw	r8,1276(sp)
100082bc:	000ce1c0 	call	1000ce1c <strlen>
100082c0:	1023883a 	mov	r17,r2
100082c4:	da013f17 	ldw	r8,1276(sp)
100082c8:	883c7f0e 	bge	r17,zero,100074c8 <__alt_data_end+0xf80074c8>
100082cc:	0005883a 	mov	r2,zero
100082d0:	003c7d06 	br	100074c8 <__alt_data_end+0xf80074c8>
100082d4:	b809883a 	mov	r4,r23
100082d8:	b00b883a 	mov	r5,r22
100082dc:	d9811e04 	addi	r6,sp,1144
100082e0:	000cfb00 	call	1000cfb0 <__sprint_r>
100082e4:	103a191e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
100082e8:	d8c12017 	ldw	r3,1152(sp)
100082ec:	d8811f17 	ldw	r2,1148(sp)
100082f0:	da000404 	addi	r8,sp,16
100082f4:	d9413317 	ldw	r5,1228(sp)
100082f8:	d9013117 	ldw	r4,1220(sp)
100082fc:	10800044 	addi	r2,r2,1
10008300:	28c7883a 	add	r3,r5,r3
10008304:	41000015 	stw	r4,0(r8)
10008308:	41400115 	stw	r5,4(r8)
1000830c:	d8c12015 	stw	r3,1152(sp)
10008310:	d8811f15 	stw	r2,1148(sp)
10008314:	010001c4 	movi	r4,7
10008318:	20bb060e 	bge	r4,r2,10006f34 <__alt_data_end+0xf8006f34>
1000831c:	003d6206 	br	100078a8 <__alt_data_end+0xf80078a8>
10008320:	01040074 	movhi	r4,4097
10008324:	21089684 	addi	r4,r4,8794
10008328:	d9013615 	stw	r4,1240(sp)
1000832c:	003aa306 	br	10006dbc <__alt_data_end+0xf8006dbc>
10008330:	d8812604 	addi	r2,sp,1176
10008334:	d8800115 	stw	r2,4(sp)
10008338:	d9413717 	ldw	r5,1244(sp)
1000833c:	d8812504 	addi	r2,sp,1172
10008340:	d8800215 	stw	r2,8(sp)
10008344:	d8812104 	addi	r2,sp,1156
10008348:	da400015 	stw	r9,0(sp)
1000834c:	d8800315 	stw	r2,12(sp)
10008350:	b809883a 	mov	r4,r23
10008354:	880d883a 	mov	r6,r17
10008358:	01c000c4 	movi	r7,3
1000835c:	da013f15 	stw	r8,1276(sp)
10008360:	da413e15 	stw	r9,1272(sp)
10008364:	0008b640 	call	10008b64 <_dtoa_r>
10008368:	da413e17 	ldw	r9,1272(sp)
1000836c:	da013f17 	ldw	r8,1276(sp)
10008370:	d8813115 	stw	r2,1220(sp)
10008374:	482b883a 	mov	r21,r9
10008378:	d8c13117 	ldw	r3,1220(sp)
1000837c:	00801184 	movi	r2,70
10008380:	1d55883a 	add	r10,r3,r21
10008384:	98bebb1e 	bne	r19,r2,10007e74 <__alt_data_end+0xf8007e74>
10008388:	19000007 	ldb	r4,0(r3)
1000838c:	00800c04 	movi	r2,48
10008390:	2080dd26 	beq	r4,r2,10008708 <___vfprintf_internal_r+0x201c>
10008394:	d8c12617 	ldw	r3,1176(sp)
10008398:	50d5883a 	add	r10,r10,r3
1000839c:	003eb506 	br	10007e74 <__alt_data_end+0xf8007e74>
100083a0:	0023883a 	mov	r17,zero
100083a4:	003d9b06 	br	10007a14 <__alt_data_end+0xf8007a14>
100083a8:	b809883a 	mov	r4,r23
100083ac:	b00b883a 	mov	r5,r22
100083b0:	d9811e04 	addi	r6,sp,1144
100083b4:	000cfb00 	call	1000cfb0 <__sprint_r>
100083b8:	1039e41e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
100083bc:	d8c12017 	ldw	r3,1152(sp)
100083c0:	da000404 	addi	r8,sp,16
100083c4:	003d9206 	br	10007a10 <__alt_data_end+0xf8007a10>
100083c8:	b809883a 	mov	r4,r23
100083cc:	b00b883a 	mov	r5,r22
100083d0:	d9811e04 	addi	r6,sp,1144
100083d4:	000cfb00 	call	1000cfb0 <__sprint_r>
100083d8:	1039dc1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
100083dc:	d8812617 	ldw	r2,1176(sp)
100083e0:	d8c12017 	ldw	r3,1152(sp)
100083e4:	da000404 	addi	r8,sp,16
100083e8:	003dfb06 	br	10007bd8 <__alt_data_end+0xf8007bd8>
100083ec:	01040074 	movhi	r4,4097
100083f0:	21089284 	addi	r4,r4,8778
100083f4:	d9012c15 	stw	r4,1200(sp)
100083f8:	d9012c17 	ldw	r4,1200(sp)
100083fc:	1c07883a 	add	r3,r3,r16
10008400:	10800044 	addi	r2,r2,1
10008404:	41000015 	stw	r4,0(r8)
10008408:	44000115 	stw	r16,4(r8)
1000840c:	d8c12015 	stw	r3,1152(sp)
10008410:	d8811f15 	stw	r2,1148(sp)
10008414:	010001c4 	movi	r4,7
10008418:	20bfae16 	blt	r4,r2,100082d4 <__alt_data_end+0xf80082d4>
1000841c:	42000204 	addi	r8,r8,8
10008420:	003fb406 	br	100082f4 <__alt_data_end+0xf80082f4>
10008424:	0021883a 	mov	r16,zero
10008428:	003dfd06 	br	10007c20 <__alt_data_end+0xf8007c20>
1000842c:	01440074 	movhi	r5,4097
10008430:	29489684 	addi	r5,r5,8794
10008434:	d9413615 	stw	r5,1240(sp)
10008438:	003ae306 	br	10006fc8 <__alt_data_end+0xf8006fc8>
1000843c:	b809883a 	mov	r4,r23
10008440:	b00b883a 	mov	r5,r22
10008444:	d9811e04 	addi	r6,sp,1144
10008448:	000cfb00 	call	1000cfb0 <__sprint_r>
1000844c:	1039bf1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10008450:	d8812617 	ldw	r2,1176(sp)
10008454:	d9413317 	ldw	r5,1228(sp)
10008458:	d8c12017 	ldw	r3,1152(sp)
1000845c:	da000404 	addi	r8,sp,16
10008460:	2885c83a 	sub	r2,r5,r2
10008464:	003ded06 	br	10007c1c <__alt_data_end+0xf8007c1c>
10008468:	00800184 	movi	r2,6
1000846c:	1240012e 	bgeu	r2,r9,10008474 <___vfprintf_internal_r+0x1d88>
10008470:	1013883a 	mov	r9,r2
10008474:	4823883a 	mov	r17,r9
10008478:	4805883a 	mov	r2,r9
1000847c:	4800b216 	blt	r9,zero,10008748 <___vfprintf_internal_r+0x205c>
10008480:	01440074 	movhi	r5,4097
10008484:	29489004 	addi	r5,r5,8768
10008488:	d8812b15 	stw	r2,1196(sp)
1000848c:	dc812d15 	stw	r18,1204(sp)
10008490:	d8013215 	stw	zero,1224(sp)
10008494:	d8013415 	stw	zero,1232(sp)
10008498:	d9413115 	stw	r5,1220(sp)
1000849c:	0005883a 	mov	r2,zero
100084a0:	003a1906 	br	10006d08 <__alt_data_end+0xf8006d08>
100084a4:	04c00b44 	movi	r19,45
100084a8:	dcc12785 	stb	r19,1182(sp)
100084ac:	003b0006 	br	100070b0 <__alt_data_end+0xf80070b0>
100084b0:	d8c12d17 	ldw	r3,1204(sp)
100084b4:	d9012f17 	ldw	r4,1212(sp)
100084b8:	18800017 	ldw	r2,0(r3)
100084bc:	18c00104 	addi	r3,r3,4
100084c0:	d8c12d15 	stw	r3,1204(sp)
100084c4:	11000015 	stw	r4,0(r2)
100084c8:	0038c506 	br	100067e0 <__alt_data_end+0xf80067e0>
100084cc:	01440074 	movhi	r5,4097
100084d0:	29488504 	addi	r5,r5,8724
100084d4:	d9413115 	stw	r5,1220(sp)
100084d8:	003f2406 	br	1000816c <__alt_data_end+0xf800816c>
100084dc:	00800b44 	movi	r2,45
100084e0:	d8812785 	stb	r2,1182(sp)
100084e4:	df012b15 	stw	fp,1196(sp)
100084e8:	d8013215 	stw	zero,1224(sp)
100084ec:	df012d17 	ldw	fp,1204(sp)
100084f0:	00800b44 	movi	r2,45
100084f4:	dc812d15 	stw	r18,1204(sp)
100084f8:	003a0006 	br	10006cfc <__alt_data_end+0xf8006cfc>
100084fc:	d8c12617 	ldw	r3,1176(sp)
10008500:	00bfff44 	movi	r2,-3
10008504:	18800a16 	blt	r3,r2,10008530 <___vfprintf_internal_r+0x1e44>
10008508:	48c00916 	blt	r9,r3,10008530 <___vfprintf_internal_r+0x1e44>
1000850c:	d8c13415 	stw	r3,1232(sp)
10008510:	040019c4 	movi	r16,103
10008514:	003e7606 	br	10007ef0 <__alt_data_end+0xf8007ef0>
10008518:	01040074 	movhi	r4,4097
1000851c:	21089284 	addi	r4,r4,8778
10008520:	d9012c15 	stw	r4,1200(sp)
10008524:	003c8e06 	br	10007760 <__alt_data_end+0xf8007760>
10008528:	5005883a 	mov	r2,r10
1000852c:	003e6506 	br	10007ec4 <__alt_data_end+0xf8007ec4>
10008530:	843fff84 	addi	r16,r16,-2
10008534:	1d7fffc4 	addi	r21,r3,-1
10008538:	dd412615 	stw	r21,1176(sp)
1000853c:	dc0122c5 	stb	r16,1163(sp)
10008540:	a8009216 	blt	r21,zero,1000878c <___vfprintf_internal_r+0x20a0>
10008544:	00800ac4 	movi	r2,43
10008548:	d8812305 	stb	r2,1164(sp)
1000854c:	00800244 	movi	r2,9
10008550:	1540660e 	bge	r2,r21,100086ec <___vfprintf_internal_r+0x2000>
10008554:	dcc122c4 	addi	r19,sp,1163
10008558:	dc012c15 	stw	r16,1200(sp)
1000855c:	4023883a 	mov	r17,r8
10008560:	9821883a 	mov	r16,r19
10008564:	a809883a 	mov	r4,r21
10008568:	01400284 	movi	r5,10
1000856c:	0003d680 	call	10003d68 <__modsi3>
10008570:	10800c04 	addi	r2,r2,48
10008574:	843fffc4 	addi	r16,r16,-1
10008578:	a809883a 	mov	r4,r21
1000857c:	01400284 	movi	r5,10
10008580:	80800005 	stb	r2,0(r16)
10008584:	0003d140 	call	10003d14 <__divsi3>
10008588:	01000244 	movi	r4,9
1000858c:	102b883a 	mov	r21,r2
10008590:	20bff416 	blt	r4,r2,10008564 <__alt_data_end+0xf8008564>
10008594:	8811883a 	mov	r8,r17
10008598:	10800c04 	addi	r2,r2,48
1000859c:	8023883a 	mov	r17,r16
100085a0:	897fffc4 	addi	r5,r17,-1
100085a4:	88bfffc5 	stb	r2,-1(r17)
100085a8:	dc012c17 	ldw	r16,1200(sp)
100085ac:	2cc08a2e 	bgeu	r5,r19,100087d8 <___vfprintf_internal_r+0x20ec>
100085b0:	d9812384 	addi	r6,sp,1166
100085b4:	344dc83a 	sub	r6,r6,r17
100085b8:	d9012344 	addi	r4,sp,1165
100085bc:	998d883a 	add	r6,r19,r6
100085c0:	00000106 	br	100085c8 <___vfprintf_internal_r+0x1edc>
100085c4:	28800003 	ldbu	r2,0(r5)
100085c8:	20800005 	stb	r2,0(r4)
100085cc:	21000044 	addi	r4,r4,1
100085d0:	29400044 	addi	r5,r5,1
100085d4:	21bffb1e 	bne	r4,r6,100085c4 <__alt_data_end+0xf80085c4>
100085d8:	d8812304 	addi	r2,sp,1164
100085dc:	1445c83a 	sub	r2,r2,r17
100085e0:	d9412344 	addi	r5,sp,1165
100085e4:	2885883a 	add	r2,r5,r2
100085e8:	14e7c83a 	sub	r19,r2,r19
100085ec:	d8813317 	ldw	r2,1228(sp)
100085f0:	d8c13317 	ldw	r3,1228(sp)
100085f4:	dcc13a15 	stw	r19,1256(sp)
100085f8:	14e3883a 	add	r17,r2,r19
100085fc:	00800044 	movi	r2,1
10008600:	10c0550e 	bge	r2,r3,10008758 <___vfprintf_internal_r+0x206c>
10008604:	8c400044 	addi	r17,r17,1
10008608:	8839883a 	mov	fp,r17
1000860c:	88005016 	blt	r17,zero,10008750 <___vfprintf_internal_r+0x2064>
10008610:	d8013415 	stw	zero,1232(sp)
10008614:	003e3f06 	br	10007f14 <__alt_data_end+0xf8007f14>
10008618:	da412b15 	stw	r9,1196(sp)
1000861c:	dcc12783 	ldbu	r19,1182(sp)
10008620:	4823883a 	mov	r17,r9
10008624:	dc812d15 	stw	r18,1204(sp)
10008628:	d8013215 	stw	zero,1224(sp)
1000862c:	d8013415 	stw	zero,1232(sp)
10008630:	0039ae06 	br	10006cec <__alt_data_end+0xf8006cec>
10008634:	483de91e 	bne	r9,zero,10007ddc <__alt_data_end+0xf8007ddc>
10008638:	8813883a 	mov	r9,r17
1000863c:	003de706 	br	10007ddc <__alt_data_end+0xf8007ddc>
10008640:	b809883a 	mov	r4,r23
10008644:	b00b883a 	mov	r5,r22
10008648:	d9811e04 	addi	r6,sp,1144
1000864c:	000cfb00 	call	1000cfb0 <__sprint_r>
10008650:	10393e1e 	bne	r2,zero,10006b4c <__alt_data_end+0xf8006b4c>
10008654:	dc012617 	ldw	r16,1176(sp)
10008658:	d8c12017 	ldw	r3,1152(sp)
1000865c:	d8811f17 	ldw	r2,1148(sp)
10008660:	da000404 	addi	r8,sp,16
10008664:	003ea006 	br	100080e8 <__alt_data_end+0xf80080e8>
10008668:	00c00b44 	movi	r3,45
1000866c:	2460003c 	xorhi	r17,r4,32768
10008670:	d8c12b05 	stb	r3,1196(sp)
10008674:	003ddf06 	br	10007df4 <__alt_data_end+0xf8007df4>
10008678:	02400184 	movi	r9,6
1000867c:	003dd706 	br	10007ddc <__alt_data_end+0xf8007ddc>
10008680:	4d400044 	addi	r21,r9,1
10008684:	003de206 	br	10007e10 <__alt_data_end+0xf8007e10>
10008688:	d8c13417 	ldw	r3,1232(sp)
1000868c:	00c0490e 	bge	zero,r3,100087b4 <___vfprintf_internal_r+0x20c8>
10008690:	04400044 	movi	r17,1
10008694:	d9013317 	ldw	r4,1228(sp)
10008698:	8923883a 	add	r17,r17,r4
1000869c:	8839883a 	mov	fp,r17
100086a0:	883e1c0e 	bge	r17,zero,10007f14 <__alt_data_end+0xf8007f14>
100086a4:	0039883a 	mov	fp,zero
100086a8:	003e1a06 	br	10007f14 <__alt_data_end+0xf8007f14>
100086ac:	00c03b0e 	bge	zero,r3,1000879c <___vfprintf_internal_r+0x20b0>
100086b0:	4800021e 	bne	r9,zero,100086bc <___vfprintf_internal_r+0x1fd0>
100086b4:	e080004c 	andi	r2,fp,1
100086b8:	10000626 	beq	r2,zero,100086d4 <___vfprintf_internal_r+0x1fe8>
100086bc:	d8c13417 	ldw	r3,1232(sp)
100086c0:	4a400044 	addi	r9,r9,1
100086c4:	1a63883a 	add	r17,r3,r9
100086c8:	8839883a 	mov	fp,r17
100086cc:	883e110e 	bge	r17,zero,10007f14 <__alt_data_end+0xf8007f14>
100086d0:	003ff406 	br	100086a4 <__alt_data_end+0xf80086a4>
100086d4:	1839883a 	mov	fp,r3
100086d8:	18004116 	blt	r3,zero,100087e0 <___vfprintf_internal_r+0x20f4>
100086dc:	dc413417 	ldw	r17,1232(sp)
100086e0:	003e0c06 	br	10007f14 <__alt_data_end+0xf8007f14>
100086e4:	d8812117 	ldw	r2,1156(sp)
100086e8:	003df606 	br	10007ec4 <__alt_data_end+0xf8007ec4>
100086ec:	00800c04 	movi	r2,48
100086f0:	a8c00c04 	addi	r3,r21,48
100086f4:	d8812345 	stb	r2,1165(sp)
100086f8:	d8c12385 	stb	r3,1166(sp)
100086fc:	d88123c4 	addi	r2,sp,1167
10008700:	dcc122c4 	addi	r19,sp,1163
10008704:	003fb806 	br	100085e8 <__alt_data_end+0xf80085e8>
10008708:	d9013717 	ldw	r4,1244(sp)
1000870c:	880b883a 	mov	r5,r17
10008710:	000d883a 	mov	r6,zero
10008714:	000f883a 	mov	r7,zero
10008718:	da013f15 	stw	r8,1276(sp)
1000871c:	da413e15 	stw	r9,1272(sp)
10008720:	da813d15 	stw	r10,1268(sp)
10008724:	00050180 	call	10005018 <__eqdf2>
10008728:	da013f17 	ldw	r8,1276(sp)
1000872c:	da413e17 	ldw	r9,1272(sp)
10008730:	da813d17 	ldw	r10,1268(sp)
10008734:	103f1726 	beq	r2,zero,10008394 <__alt_data_end+0xf8008394>
10008738:	00800044 	movi	r2,1
1000873c:	1547c83a 	sub	r3,r2,r21
10008740:	d8c12615 	stw	r3,1176(sp)
10008744:	003f1406 	br	10008398 <__alt_data_end+0xf8008398>
10008748:	0005883a 	mov	r2,zero
1000874c:	003f4c06 	br	10008480 <__alt_data_end+0xf8008480>
10008750:	0039883a 	mov	fp,zero
10008754:	003fae06 	br	10008610 <__alt_data_end+0xf8008610>
10008758:	e084703a 	and	r2,fp,r2
1000875c:	103faa26 	beq	r2,zero,10008608 <__alt_data_end+0xf8008608>
10008760:	003fa806 	br	10008604 <__alt_data_end+0xf8008604>
10008764:	d9412d17 	ldw	r5,1204(sp)
10008768:	2a400017 	ldw	r9,0(r5)
1000876c:	28c00104 	addi	r3,r5,4
10008770:	d8c12d15 	stw	r3,1204(sp)
10008774:	483ebc0e 	bge	r9,zero,10008268 <__alt_data_end+0xf8008268>
10008778:	027fffc4 	movi	r9,-1
1000877c:	e4000047 	ldb	r16,1(fp)
10008780:	00384206 	br	1000688c <__alt_data_end+0xf800688c>
10008784:	043fffc4 	movi	r16,-1
10008788:	0038ce06 	br	10006ac4 <__alt_data_end+0xf8006ac4>
1000878c:	00800b44 	movi	r2,45
10008790:	056bc83a 	sub	r21,zero,r21
10008794:	d8812305 	stb	r2,1164(sp)
10008798:	003f6c06 	br	1000854c <__alt_data_end+0xf800854c>
1000879c:	4800081e 	bne	r9,zero,100087c0 <___vfprintf_internal_r+0x20d4>
100087a0:	e080004c 	andi	r2,fp,1
100087a4:	1000061e 	bne	r2,zero,100087c0 <___vfprintf_internal_r+0x20d4>
100087a8:	07000044 	movi	fp,1
100087ac:	e023883a 	mov	r17,fp
100087b0:	003dd806 	br	10007f14 <__alt_data_end+0xf8007f14>
100087b4:	04400084 	movi	r17,2
100087b8:	88e3c83a 	sub	r17,r17,r3
100087bc:	003fb506 	br	10008694 <__alt_data_end+0xf8008694>
100087c0:	4c400084 	addi	r17,r9,2
100087c4:	8839883a 	mov	fp,r17
100087c8:	883dd20e 	bge	r17,zero,10007f14 <__alt_data_end+0xf8007f14>
100087cc:	003fb506 	br	100086a4 <__alt_data_end+0xf80086a4>
100087d0:	d8c12617 	ldw	r3,1176(sp)
100087d4:	003f5706 	br	10008534 <__alt_data_end+0xf8008534>
100087d8:	d8812344 	addi	r2,sp,1165
100087dc:	003f8206 	br	100085e8 <__alt_data_end+0xf80085e8>
100087e0:	0039883a 	mov	fp,zero
100087e4:	003fbd06 	br	100086dc <__alt_data_end+0xf80086dc>

100087e8 <__vfprintf_internal>:
100087e8:	2007883a 	mov	r3,r4
100087ec:	01040074 	movhi	r4,4097
100087f0:	210fad04 	addi	r4,r4,16052
100087f4:	21000017 	ldw	r4,0(r4)
100087f8:	2805883a 	mov	r2,r5
100087fc:	300f883a 	mov	r7,r6
10008800:	180b883a 	mov	r5,r3
10008804:	100d883a 	mov	r6,r2
10008808:	00066ec1 	jmpi	100066ec <___vfprintf_internal_r>

1000880c <__swsetup_r>:
1000880c:	00840074 	movhi	r2,4097
10008810:	defffd04 	addi	sp,sp,-12
10008814:	108fad04 	addi	r2,r2,16052
10008818:	dc400115 	stw	r17,4(sp)
1000881c:	2023883a 	mov	r17,r4
10008820:	11000017 	ldw	r4,0(r2)
10008824:	dc000015 	stw	r16,0(sp)
10008828:	dfc00215 	stw	ra,8(sp)
1000882c:	2821883a 	mov	r16,r5
10008830:	20000226 	beq	r4,zero,1000883c <__swsetup_r+0x30>
10008834:	20c00e17 	ldw	r3,56(r4)
10008838:	18002e26 	beq	r3,zero,100088f4 <__swsetup_r+0xe8>
1000883c:	8080030b 	ldhu	r2,12(r16)
10008840:	10c0020c 	andi	r3,r2,8
10008844:	100d883a 	mov	r6,r2
10008848:	18000f26 	beq	r3,zero,10008888 <__swsetup_r+0x7c>
1000884c:	80c00417 	ldw	r3,16(r16)
10008850:	18001526 	beq	r3,zero,100088a8 <__swsetup_r+0x9c>
10008854:	1100004c 	andi	r4,r2,1
10008858:	20001c1e 	bne	r4,zero,100088cc <__swsetup_r+0xc0>
1000885c:	1080008c 	andi	r2,r2,2
10008860:	1000261e 	bne	r2,zero,100088fc <__swsetup_r+0xf0>
10008864:	80800517 	ldw	r2,20(r16)
10008868:	80800215 	stw	r2,8(r16)
1000886c:	18001c26 	beq	r3,zero,100088e0 <__swsetup_r+0xd4>
10008870:	0005883a 	mov	r2,zero
10008874:	dfc00217 	ldw	ra,8(sp)
10008878:	dc400117 	ldw	r17,4(sp)
1000887c:	dc000017 	ldw	r16,0(sp)
10008880:	dec00304 	addi	sp,sp,12
10008884:	f800283a 	ret
10008888:	3080040c 	andi	r2,r6,16
1000888c:	10001726 	beq	r2,zero,100088ec <__swsetup_r+0xe0>
10008890:	3080010c 	andi	r2,r6,4
10008894:	10001b1e 	bne	r2,zero,10008904 <__swsetup_r+0xf8>
10008898:	80c00417 	ldw	r3,16(r16)
1000889c:	30800214 	ori	r2,r6,8
100088a0:	8080030d 	sth	r2,12(r16)
100088a4:	183feb1e 	bne	r3,zero,10008854 <__alt_data_end+0xf8008854>
100088a8:	1140a00c 	andi	r5,r2,640
100088ac:	01008004 	movi	r4,512
100088b0:	293fe826 	beq	r5,r4,10008854 <__alt_data_end+0xf8008854>
100088b4:	8809883a 	mov	r4,r17
100088b8:	800b883a 	mov	r5,r16
100088bc:	000aefc0 	call	1000aefc <__smakebuf_r>
100088c0:	8080030b 	ldhu	r2,12(r16)
100088c4:	80c00417 	ldw	r3,16(r16)
100088c8:	003fe206 	br	10008854 <__alt_data_end+0xf8008854>
100088cc:	80800517 	ldw	r2,20(r16)
100088d0:	80000215 	stw	zero,8(r16)
100088d4:	0085c83a 	sub	r2,zero,r2
100088d8:	80800615 	stw	r2,24(r16)
100088dc:	183fe41e 	bne	r3,zero,10008870 <__alt_data_end+0xf8008870>
100088e0:	8080030b 	ldhu	r2,12(r16)
100088e4:	1080200c 	andi	r2,r2,128
100088e8:	103fe226 	beq	r2,zero,10008874 <__alt_data_end+0xf8008874>
100088ec:	00bfffc4 	movi	r2,-1
100088f0:	003fe006 	br	10008874 <__alt_data_end+0xf8008874>
100088f4:	000a8480 	call	1000a848 <__sinit>
100088f8:	003fd006 	br	1000883c <__alt_data_end+0xf800883c>
100088fc:	0005883a 	mov	r2,zero
10008900:	003fd906 	br	10008868 <__alt_data_end+0xf8008868>
10008904:	81400c17 	ldw	r5,48(r16)
10008908:	28000626 	beq	r5,zero,10008924 <__swsetup_r+0x118>
1000890c:	80801004 	addi	r2,r16,64
10008910:	28800326 	beq	r5,r2,10008920 <__swsetup_r+0x114>
10008914:	8809883a 	mov	r4,r17
10008918:	000a9bc0 	call	1000a9bc <_free_r>
1000891c:	8180030b 	ldhu	r6,12(r16)
10008920:	80000c15 	stw	zero,48(r16)
10008924:	80c00417 	ldw	r3,16(r16)
10008928:	00bff6c4 	movi	r2,-37
1000892c:	118c703a 	and	r6,r2,r6
10008930:	80000115 	stw	zero,4(r16)
10008934:	80c00015 	stw	r3,0(r16)
10008938:	003fd806 	br	1000889c <__alt_data_end+0xf800889c>

1000893c <quorem>:
1000893c:	defff204 	addi	sp,sp,-56
10008940:	ddc00b15 	stw	r23,44(sp)
10008944:	20800417 	ldw	r2,16(r4)
10008948:	2dc00417 	ldw	r23,16(r5)
1000894c:	dfc00d15 	stw	ra,52(sp)
10008950:	df000c15 	stw	fp,48(sp)
10008954:	dd800a15 	stw	r22,40(sp)
10008958:	dd400915 	stw	r21,36(sp)
1000895c:	dd000815 	stw	r20,32(sp)
10008960:	dcc00715 	stw	r19,28(sp)
10008964:	dc800615 	stw	r18,24(sp)
10008968:	dc400515 	stw	r17,20(sp)
1000896c:	dc000415 	stw	r16,16(sp)
10008970:	15c07a16 	blt	r2,r23,10008b5c <quorem+0x220>
10008974:	bdffffc4 	addi	r23,r23,-1
10008978:	bde9883a 	add	r20,r23,r23
1000897c:	28c00504 	addi	r3,r5,20
10008980:	a529883a 	add	r20,r20,r20
10008984:	1d39883a 	add	fp,r3,r20
10008988:	24c00504 	addi	r19,r4,20
1000898c:	d9400215 	stw	r5,8(sp)
10008990:	9d29883a 	add	r20,r19,r20
10008994:	e1400017 	ldw	r5,0(fp)
10008998:	d9000015 	stw	r4,0(sp)
1000899c:	a1000017 	ldw	r4,0(r20)
100089a0:	29400044 	addi	r5,r5,1
100089a4:	d8c00115 	stw	r3,4(sp)
100089a8:	dd000315 	stw	r20,12(sp)
100089ac:	0003dc40 	call	10003dc4 <__udivsi3>
100089b0:	1025883a 	mov	r18,r2
100089b4:	10003026 	beq	r2,zero,10008a78 <quorem+0x13c>
100089b8:	dc400117 	ldw	r17,4(sp)
100089bc:	9829883a 	mov	r20,r19
100089c0:	002d883a 	mov	r22,zero
100089c4:	0021883a 	mov	r16,zero
100089c8:	8d400017 	ldw	r21,0(r17)
100089cc:	900b883a 	mov	r5,r18
100089d0:	8c400104 	addi	r17,r17,4
100089d4:	a93fffcc 	andi	r4,r21,65535
100089d8:	0003dd40 	call	10003dd4 <__mulsi3>
100089dc:	a808d43a 	srli	r4,r21,16
100089e0:	900b883a 	mov	r5,r18
100089e4:	b0ad883a 	add	r22,r22,r2
100089e8:	0003dd40 	call	10003dd4 <__mulsi3>
100089ec:	a1000017 	ldw	r4,0(r20)
100089f0:	b00cd43a 	srli	r6,r22,16
100089f4:	b0ffffcc 	andi	r3,r22,65535
100089f8:	217fffcc 	andi	r5,r4,65535
100089fc:	2c21883a 	add	r16,r5,r16
10008a00:	80c7c83a 	sub	r3,r16,r3
10008a04:	2008d43a 	srli	r4,r4,16
10008a08:	3085883a 	add	r2,r6,r2
10008a0c:	1821d43a 	srai	r16,r3,16
10008a10:	117fffcc 	andi	r5,r2,65535
10008a14:	2149c83a 	sub	r4,r4,r5
10008a18:	2421883a 	add	r16,r4,r16
10008a1c:	8008943a 	slli	r4,r16,16
10008a20:	18ffffcc 	andi	r3,r3,65535
10008a24:	102cd43a 	srli	r22,r2,16
10008a28:	20c8b03a 	or	r4,r4,r3
10008a2c:	a1000015 	stw	r4,0(r20)
10008a30:	8021d43a 	srai	r16,r16,16
10008a34:	a5000104 	addi	r20,r20,4
10008a38:	e47fe32e 	bgeu	fp,r17,100089c8 <__alt_data_end+0xf80089c8>
10008a3c:	d8c00317 	ldw	r3,12(sp)
10008a40:	18800017 	ldw	r2,0(r3)
10008a44:	10000c1e 	bne	r2,zero,10008a78 <quorem+0x13c>
10008a48:	18bfff04 	addi	r2,r3,-4
10008a4c:	9880082e 	bgeu	r19,r2,10008a70 <quorem+0x134>
10008a50:	18ffff17 	ldw	r3,-4(r3)
10008a54:	18000326 	beq	r3,zero,10008a64 <quorem+0x128>
10008a58:	00000506 	br	10008a70 <quorem+0x134>
10008a5c:	10c00017 	ldw	r3,0(r2)
10008a60:	1800031e 	bne	r3,zero,10008a70 <quorem+0x134>
10008a64:	10bfff04 	addi	r2,r2,-4
10008a68:	bdffffc4 	addi	r23,r23,-1
10008a6c:	98bffb36 	bltu	r19,r2,10008a5c <__alt_data_end+0xf8008a5c>
10008a70:	d8c00017 	ldw	r3,0(sp)
10008a74:	1dc00415 	stw	r23,16(r3)
10008a78:	d9000017 	ldw	r4,0(sp)
10008a7c:	d9400217 	ldw	r5,8(sp)
10008a80:	000c51c0 	call	1000c51c <__mcmp>
10008a84:	10002816 	blt	r2,zero,10008b28 <quorem+0x1ec>
10008a88:	dc400117 	ldw	r17,4(sp)
10008a8c:	94800044 	addi	r18,r18,1
10008a90:	980d883a 	mov	r6,r19
10008a94:	0007883a 	mov	r3,zero
10008a98:	31000017 	ldw	r4,0(r6)
10008a9c:	89400017 	ldw	r5,0(r17)
10008aa0:	31800104 	addi	r6,r6,4
10008aa4:	20bfffcc 	andi	r2,r4,65535
10008aa8:	10c7883a 	add	r3,r2,r3
10008aac:	28bfffcc 	andi	r2,r5,65535
10008ab0:	1885c83a 	sub	r2,r3,r2
10008ab4:	280ad43a 	srli	r5,r5,16
10008ab8:	2008d43a 	srli	r4,r4,16
10008abc:	1007d43a 	srai	r3,r2,16
10008ac0:	10bfffcc 	andi	r2,r2,65535
10008ac4:	2149c83a 	sub	r4,r4,r5
10008ac8:	20c9883a 	add	r4,r4,r3
10008acc:	200a943a 	slli	r5,r4,16
10008ad0:	8c400104 	addi	r17,r17,4
10008ad4:	2007d43a 	srai	r3,r4,16
10008ad8:	2884b03a 	or	r2,r5,r2
10008adc:	30bfff15 	stw	r2,-4(r6)
10008ae0:	e47fed2e 	bgeu	fp,r17,10008a98 <__alt_data_end+0xf8008a98>
10008ae4:	bdc5883a 	add	r2,r23,r23
10008ae8:	1085883a 	add	r2,r2,r2
10008aec:	9887883a 	add	r3,r19,r2
10008af0:	18800017 	ldw	r2,0(r3)
10008af4:	10000c1e 	bne	r2,zero,10008b28 <quorem+0x1ec>
10008af8:	18bfff04 	addi	r2,r3,-4
10008afc:	9880082e 	bgeu	r19,r2,10008b20 <quorem+0x1e4>
10008b00:	18ffff17 	ldw	r3,-4(r3)
10008b04:	18000326 	beq	r3,zero,10008b14 <quorem+0x1d8>
10008b08:	00000506 	br	10008b20 <quorem+0x1e4>
10008b0c:	10c00017 	ldw	r3,0(r2)
10008b10:	1800031e 	bne	r3,zero,10008b20 <quorem+0x1e4>
10008b14:	10bfff04 	addi	r2,r2,-4
10008b18:	bdffffc4 	addi	r23,r23,-1
10008b1c:	98bffb36 	bltu	r19,r2,10008b0c <__alt_data_end+0xf8008b0c>
10008b20:	d8c00017 	ldw	r3,0(sp)
10008b24:	1dc00415 	stw	r23,16(r3)
10008b28:	9005883a 	mov	r2,r18
10008b2c:	dfc00d17 	ldw	ra,52(sp)
10008b30:	df000c17 	ldw	fp,48(sp)
10008b34:	ddc00b17 	ldw	r23,44(sp)
10008b38:	dd800a17 	ldw	r22,40(sp)
10008b3c:	dd400917 	ldw	r21,36(sp)
10008b40:	dd000817 	ldw	r20,32(sp)
10008b44:	dcc00717 	ldw	r19,28(sp)
10008b48:	dc800617 	ldw	r18,24(sp)
10008b4c:	dc400517 	ldw	r17,20(sp)
10008b50:	dc000417 	ldw	r16,16(sp)
10008b54:	dec00e04 	addi	sp,sp,56
10008b58:	f800283a 	ret
10008b5c:	0005883a 	mov	r2,zero
10008b60:	003ff206 	br	10008b2c <__alt_data_end+0xf8008b2c>

10008b64 <_dtoa_r>:
10008b64:	20801017 	ldw	r2,64(r4)
10008b68:	deffde04 	addi	sp,sp,-136
10008b6c:	dd401d15 	stw	r21,116(sp)
10008b70:	dcc01b15 	stw	r19,108(sp)
10008b74:	dc801a15 	stw	r18,104(sp)
10008b78:	dc401915 	stw	r17,100(sp)
10008b7c:	dc001815 	stw	r16,96(sp)
10008b80:	dfc02115 	stw	ra,132(sp)
10008b84:	df002015 	stw	fp,128(sp)
10008b88:	ddc01f15 	stw	r23,124(sp)
10008b8c:	dd801e15 	stw	r22,120(sp)
10008b90:	dd001c15 	stw	r20,112(sp)
10008b94:	d9c00315 	stw	r7,12(sp)
10008b98:	2021883a 	mov	r16,r4
10008b9c:	302b883a 	mov	r21,r6
10008ba0:	2825883a 	mov	r18,r5
10008ba4:	dc402417 	ldw	r17,144(sp)
10008ba8:	3027883a 	mov	r19,r6
10008bac:	10000826 	beq	r2,zero,10008bd0 <_dtoa_r+0x6c>
10008bb0:	21801117 	ldw	r6,68(r4)
10008bb4:	00c00044 	movi	r3,1
10008bb8:	100b883a 	mov	r5,r2
10008bbc:	1986983a 	sll	r3,r3,r6
10008bc0:	11800115 	stw	r6,4(r2)
10008bc4:	10c00215 	stw	r3,8(r2)
10008bc8:	000bc480 	call	1000bc48 <_Bfree>
10008bcc:	80001015 	stw	zero,64(r16)
10008bd0:	a8002d16 	blt	r21,zero,10008c88 <_dtoa_r+0x124>
10008bd4:	88000015 	stw	zero,0(r17)
10008bd8:	a8dffc2c 	andhi	r3,r21,32752
10008bdc:	009ffc34 	movhi	r2,32752
10008be0:	18801b26 	beq	r3,r2,10008c50 <_dtoa_r+0xec>
10008be4:	9009883a 	mov	r4,r18
10008be8:	980b883a 	mov	r5,r19
10008bec:	000d883a 	mov	r6,zero
10008bf0:	000f883a 	mov	r7,zero
10008bf4:	00050180 	call	10005018 <__eqdf2>
10008bf8:	10002a1e 	bne	r2,zero,10008ca4 <_dtoa_r+0x140>
10008bfc:	d8c02317 	ldw	r3,140(sp)
10008c00:	d9002517 	ldw	r4,148(sp)
10008c04:	00800044 	movi	r2,1
10008c08:	18800015 	stw	r2,0(r3)
10008c0c:	2001a226 	beq	r4,zero,10009298 <_dtoa_r+0x734>
10008c10:	00840074 	movhi	r2,4097
10008c14:	10889244 	addi	r2,r2,8777
10008c18:	20800015 	stw	r2,0(r4)
10008c1c:	10bfffc4 	addi	r2,r2,-1
10008c20:	dfc02117 	ldw	ra,132(sp)
10008c24:	df002017 	ldw	fp,128(sp)
10008c28:	ddc01f17 	ldw	r23,124(sp)
10008c2c:	dd801e17 	ldw	r22,120(sp)
10008c30:	dd401d17 	ldw	r21,116(sp)
10008c34:	dd001c17 	ldw	r20,112(sp)
10008c38:	dcc01b17 	ldw	r19,108(sp)
10008c3c:	dc801a17 	ldw	r18,104(sp)
10008c40:	dc401917 	ldw	r17,100(sp)
10008c44:	dc001817 	ldw	r16,96(sp)
10008c48:	dec02204 	addi	sp,sp,136
10008c4c:	f800283a 	ret
10008c50:	d8c02317 	ldw	r3,140(sp)
10008c54:	0089c3c4 	movi	r2,9999
10008c58:	18800015 	stw	r2,0(r3)
10008c5c:	90017c26 	beq	r18,zero,10009250 <_dtoa_r+0x6ec>
10008c60:	00840074 	movhi	r2,4097
10008c64:	10889e04 	addi	r2,r2,8824
10008c68:	d9002517 	ldw	r4,148(sp)
10008c6c:	203fec26 	beq	r4,zero,10008c20 <__alt_data_end+0xf8008c20>
10008c70:	10c000c7 	ldb	r3,3(r2)
10008c74:	18017d1e 	bne	r3,zero,1000926c <_dtoa_r+0x708>
10008c78:	10c000c4 	addi	r3,r2,3
10008c7c:	d9802517 	ldw	r6,148(sp)
10008c80:	30c00015 	stw	r3,0(r6)
10008c84:	003fe606 	br	10008c20 <__alt_data_end+0xf8008c20>
10008c88:	04e00034 	movhi	r19,32768
10008c8c:	9cffffc4 	addi	r19,r19,-1
10008c90:	00800044 	movi	r2,1
10008c94:	ace6703a 	and	r19,r21,r19
10008c98:	88800015 	stw	r2,0(r17)
10008c9c:	982b883a 	mov	r21,r19
10008ca0:	003fcd06 	br	10008bd8 <__alt_data_end+0xf8008bd8>
10008ca4:	d8800204 	addi	r2,sp,8
10008ca8:	a822d53a 	srli	r17,r21,20
10008cac:	d8800015 	stw	r2,0(sp)
10008cb0:	8009883a 	mov	r4,r16
10008cb4:	900b883a 	mov	r5,r18
10008cb8:	980d883a 	mov	r6,r19
10008cbc:	d9c00104 	addi	r7,sp,4
10008cc0:	000c8900 	call	1000c890 <__d2b>
10008cc4:	1039883a 	mov	fp,r2
10008cc8:	88016a1e 	bne	r17,zero,10009274 <_dtoa_r+0x710>
10008ccc:	dd000217 	ldw	r20,8(sp)
10008cd0:	dc400117 	ldw	r17,4(sp)
10008cd4:	00befbc4 	movi	r2,-1041
10008cd8:	a463883a 	add	r17,r20,r17
10008cdc:	8882ea16 	blt	r17,r2,10009888 <_dtoa_r+0xd24>
10008ce0:	00bf0384 	movi	r2,-1010
10008ce4:	1445c83a 	sub	r2,r2,r17
10008ce8:	89010484 	addi	r4,r17,1042
10008cec:	a8aa983a 	sll	r21,r21,r2
10008cf0:	9108d83a 	srl	r4,r18,r4
10008cf4:	a908b03a 	or	r4,r21,r4
10008cf8:	00064f00 	call	100064f0 <__floatunsidf>
10008cfc:	017f8434 	movhi	r5,65040
10008d00:	01800044 	movi	r6,1
10008d04:	1009883a 	mov	r4,r2
10008d08:	194b883a 	add	r5,r3,r5
10008d0c:	8c7fffc4 	addi	r17,r17,-1
10008d10:	d9800f15 	stw	r6,60(sp)
10008d14:	000d883a 	mov	r6,zero
10008d18:	01cffe34 	movhi	r7,16376
10008d1c:	0005ac80 	call	10005ac8 <__subdf3>
10008d20:	0198dbf4 	movhi	r6,25455
10008d24:	01cff4f4 	movhi	r7,16339
10008d28:	1009883a 	mov	r4,r2
10008d2c:	180b883a 	mov	r5,r3
10008d30:	3190d844 	addi	r6,r6,17249
10008d34:	39e1e9c4 	addi	r7,r7,-30809
10008d38:	000525c0 	call	1000525c <__muldf3>
10008d3c:	01a2d874 	movhi	r6,35681
10008d40:	01cff1f4 	movhi	r7,16327
10008d44:	180b883a 	mov	r5,r3
10008d48:	31b22cc4 	addi	r6,r6,-14157
10008d4c:	39e28a04 	addi	r7,r7,-30168
10008d50:	1009883a 	mov	r4,r2
10008d54:	0003dfc0 	call	10003dfc <__adddf3>
10008d58:	8809883a 	mov	r4,r17
10008d5c:	102d883a 	mov	r22,r2
10008d60:	182b883a 	mov	r21,r3
10008d64:	00064200 	call	10006420 <__floatsidf>
10008d68:	019427f4 	movhi	r6,20639
10008d6c:	01cff4f4 	movhi	r7,16339
10008d70:	1009883a 	mov	r4,r2
10008d74:	180b883a 	mov	r5,r3
10008d78:	319e7ec4 	addi	r6,r6,31227
10008d7c:	39d104c4 	addi	r7,r7,17427
10008d80:	000525c0 	call	1000525c <__muldf3>
10008d84:	b009883a 	mov	r4,r22
10008d88:	a80b883a 	mov	r5,r21
10008d8c:	100d883a 	mov	r6,r2
10008d90:	180f883a 	mov	r7,r3
10008d94:	0003dfc0 	call	10003dfc <__adddf3>
10008d98:	1009883a 	mov	r4,r2
10008d9c:	180b883a 	mov	r5,r3
10008da0:	102d883a 	mov	r22,r2
10008da4:	182b883a 	mov	r21,r3
10008da8:	00063980 	call	10006398 <__fixdfsi>
10008dac:	b009883a 	mov	r4,r22
10008db0:	a80b883a 	mov	r5,r21
10008db4:	000d883a 	mov	r6,zero
10008db8:	000f883a 	mov	r7,zero
10008dbc:	d8800515 	stw	r2,20(sp)
10008dc0:	000517c0 	call	1000517c <__ledf2>
10008dc4:	10023116 	blt	r2,zero,1000968c <_dtoa_r+0xb28>
10008dc8:	d8c00517 	ldw	r3,20(sp)
10008dcc:	00800584 	movi	r2,22
10008dd0:	10c21f36 	bltu	r2,r3,10009650 <_dtoa_r+0xaec>
10008dd4:	180490fa 	slli	r2,r3,3
10008dd8:	00c40074 	movhi	r3,4097
10008ddc:	18c8b904 	addi	r3,r3,8932
10008de0:	1885883a 	add	r2,r3,r2
10008de4:	11000017 	ldw	r4,0(r2)
10008de8:	11400117 	ldw	r5,4(r2)
10008dec:	900d883a 	mov	r6,r18
10008df0:	980f883a 	mov	r7,r19
10008df4:	000509c0 	call	1000509c <__gedf2>
10008df8:	0082a70e 	bge	zero,r2,10009898 <_dtoa_r+0xd34>
10008dfc:	d9000517 	ldw	r4,20(sp)
10008e00:	d8000c15 	stw	zero,48(sp)
10008e04:	213fffc4 	addi	r4,r4,-1
10008e08:	d9000515 	stw	r4,20(sp)
10008e0c:	a463c83a 	sub	r17,r20,r17
10008e10:	8dbfffc4 	addi	r22,r17,-1
10008e14:	b0021916 	blt	r22,zero,1000967c <_dtoa_r+0xb18>
10008e18:	d8000815 	stw	zero,32(sp)
10008e1c:	d8800517 	ldw	r2,20(sp)
10008e20:	10020e16 	blt	r2,zero,1000965c <_dtoa_r+0xaf8>
10008e24:	b0ad883a 	add	r22,r22,r2
10008e28:	d8800a15 	stw	r2,40(sp)
10008e2c:	d8000915 	stw	zero,36(sp)
10008e30:	d8c00317 	ldw	r3,12(sp)
10008e34:	00800244 	movi	r2,9
10008e38:	10c11a36 	bltu	r2,r3,100092a4 <_dtoa_r+0x740>
10008e3c:	00800144 	movi	r2,5
10008e40:	10c4fc0e 	bge	r2,r3,1000a234 <_dtoa_r+0x16d0>
10008e44:	18ffff04 	addi	r3,r3,-4
10008e48:	d8c00315 	stw	r3,12(sp)
10008e4c:	0029883a 	mov	r20,zero
10008e50:	d9800317 	ldw	r6,12(sp)
10008e54:	008000c4 	movi	r2,3
10008e58:	3083bd26 	beq	r6,r2,10009d50 <_dtoa_r+0x11ec>
10008e5c:	1183670e 	bge	r2,r6,10009bfc <_dtoa_r+0x1098>
10008e60:	d8c00317 	ldw	r3,12(sp)
10008e64:	00800104 	movi	r2,4
10008e68:	1882e726 	beq	r3,r2,10009a08 <_dtoa_r+0xea4>
10008e6c:	00800144 	movi	r2,5
10008e70:	1884f21e 	bne	r3,r2,1000a23c <_dtoa_r+0x16d8>
10008e74:	00800044 	movi	r2,1
10008e78:	d8800b15 	stw	r2,44(sp)
10008e7c:	d8c02217 	ldw	r3,136(sp)
10008e80:	d9000517 	ldw	r4,20(sp)
10008e84:	1907883a 	add	r3,r3,r4
10008e88:	19800044 	addi	r6,r3,1
10008e8c:	d8c00d15 	stw	r3,52(sp)
10008e90:	d9800615 	stw	r6,24(sp)
10008e94:	0183c30e 	bge	zero,r6,10009da4 <_dtoa_r+0x1240>
10008e98:	d9800617 	ldw	r6,24(sp)
10008e9c:	3023883a 	mov	r17,r6
10008ea0:	80001115 	stw	zero,68(r16)
10008ea4:	008005c4 	movi	r2,23
10008ea8:	1184f62e 	bgeu	r2,r6,1000a284 <_dtoa_r+0x1720>
10008eac:	00c00044 	movi	r3,1
10008eb0:	00800104 	movi	r2,4
10008eb4:	1085883a 	add	r2,r2,r2
10008eb8:	11000504 	addi	r4,r2,20
10008ebc:	180b883a 	mov	r5,r3
10008ec0:	18c00044 	addi	r3,r3,1
10008ec4:	313ffb2e 	bgeu	r6,r4,10008eb4 <__alt_data_end+0xf8008eb4>
10008ec8:	81401115 	stw	r5,68(r16)
10008ecc:	8009883a 	mov	r4,r16
10008ed0:	000bba00 	call	1000bba0 <_Balloc>
10008ed4:	d8800715 	stw	r2,28(sp)
10008ed8:	80801015 	stw	r2,64(r16)
10008edc:	00800384 	movi	r2,14
10008ee0:	1440fd36 	bltu	r2,r17,100092d8 <_dtoa_r+0x774>
10008ee4:	a000fc26 	beq	r20,zero,100092d8 <_dtoa_r+0x774>
10008ee8:	d8800517 	ldw	r2,20(sp)
10008eec:	0083b90e 	bge	zero,r2,10009dd4 <_dtoa_r+0x1270>
10008ef0:	d8c00517 	ldw	r3,20(sp)
10008ef4:	108003cc 	andi	r2,r2,15
10008ef8:	100490fa 	slli	r2,r2,3
10008efc:	182fd13a 	srai	r23,r3,4
10008f00:	00c40074 	movhi	r3,4097
10008f04:	18c8b904 	addi	r3,r3,8932
10008f08:	1885883a 	add	r2,r3,r2
10008f0c:	b8c0040c 	andi	r3,r23,16
10008f10:	12c00017 	ldw	r11,0(r2)
10008f14:	12800117 	ldw	r10,4(r2)
10008f18:	18039726 	beq	r3,zero,10009d78 <_dtoa_r+0x1214>
10008f1c:	00840074 	movhi	r2,4097
10008f20:	1088af04 	addi	r2,r2,8892
10008f24:	11800817 	ldw	r6,32(r2)
10008f28:	11c00917 	ldw	r7,36(r2)
10008f2c:	9009883a 	mov	r4,r18
10008f30:	980b883a 	mov	r5,r19
10008f34:	da801615 	stw	r10,88(sp)
10008f38:	dac01515 	stw	r11,84(sp)
10008f3c:	00046980 	call	10004698 <__divdf3>
10008f40:	da801617 	ldw	r10,88(sp)
10008f44:	dac01517 	ldw	r11,84(sp)
10008f48:	bdc003cc 	andi	r23,r23,15
10008f4c:	044000c4 	movi	r17,3
10008f50:	d8800e15 	stw	r2,56(sp)
10008f54:	182b883a 	mov	r21,r3
10008f58:	b8001126 	beq	r23,zero,10008fa0 <_dtoa_r+0x43c>
10008f5c:	05040074 	movhi	r20,4097
10008f60:	a508af04 	addi	r20,r20,8892
10008f64:	5805883a 	mov	r2,r11
10008f68:	5007883a 	mov	r3,r10
10008f6c:	b980004c 	andi	r6,r23,1
10008f70:	1009883a 	mov	r4,r2
10008f74:	b82fd07a 	srai	r23,r23,1
10008f78:	180b883a 	mov	r5,r3
10008f7c:	30000426 	beq	r6,zero,10008f90 <_dtoa_r+0x42c>
10008f80:	a1800017 	ldw	r6,0(r20)
10008f84:	a1c00117 	ldw	r7,4(r20)
10008f88:	8c400044 	addi	r17,r17,1
10008f8c:	000525c0 	call	1000525c <__muldf3>
10008f90:	a5000204 	addi	r20,r20,8
10008f94:	b83ff51e 	bne	r23,zero,10008f6c <__alt_data_end+0xf8008f6c>
10008f98:	1017883a 	mov	r11,r2
10008f9c:	1815883a 	mov	r10,r3
10008fa0:	d9000e17 	ldw	r4,56(sp)
10008fa4:	a80b883a 	mov	r5,r21
10008fa8:	580d883a 	mov	r6,r11
10008fac:	500f883a 	mov	r7,r10
10008fb0:	00046980 	call	10004698 <__divdf3>
10008fb4:	1029883a 	mov	r20,r2
10008fb8:	182b883a 	mov	r21,r3
10008fbc:	d9800c17 	ldw	r6,48(sp)
10008fc0:	30000626 	beq	r6,zero,10008fdc <_dtoa_r+0x478>
10008fc4:	a009883a 	mov	r4,r20
10008fc8:	a80b883a 	mov	r5,r21
10008fcc:	000d883a 	mov	r6,zero
10008fd0:	01cffc34 	movhi	r7,16368
10008fd4:	000517c0 	call	1000517c <__ledf2>
10008fd8:	10043216 	blt	r2,zero,1000a0a4 <_dtoa_r+0x1540>
10008fdc:	8809883a 	mov	r4,r17
10008fe0:	00064200 	call	10006420 <__floatsidf>
10008fe4:	1009883a 	mov	r4,r2
10008fe8:	180b883a 	mov	r5,r3
10008fec:	a00d883a 	mov	r6,r20
10008ff0:	a80f883a 	mov	r7,r21
10008ff4:	000525c0 	call	1000525c <__muldf3>
10008ff8:	000d883a 	mov	r6,zero
10008ffc:	1009883a 	mov	r4,r2
10009000:	180b883a 	mov	r5,r3
10009004:	01d00734 	movhi	r7,16412
10009008:	0003dfc0 	call	10003dfc <__adddf3>
1000900c:	1023883a 	mov	r17,r2
10009010:	d9800617 	ldw	r6,24(sp)
10009014:	00bf3034 	movhi	r2,64704
10009018:	1885883a 	add	r2,r3,r2
1000901c:	d8800e15 	stw	r2,56(sp)
10009020:	30032e26 	beq	r6,zero,10009cdc <_dtoa_r+0x1178>
10009024:	d8c00517 	ldw	r3,20(sp)
10009028:	da800617 	ldw	r10,24(sp)
1000902c:	d8c01215 	stw	r3,72(sp)
10009030:	d9000b17 	ldw	r4,44(sp)
10009034:	2003b026 	beq	r4,zero,10009ef8 <_dtoa_r+0x1394>
10009038:	50bfffc4 	addi	r2,r10,-1
1000903c:	100490fa 	slli	r2,r2,3
10009040:	00c40074 	movhi	r3,4097
10009044:	18c8b904 	addi	r3,r3,8932
10009048:	1885883a 	add	r2,r3,r2
1000904c:	11800017 	ldw	r6,0(r2)
10009050:	11c00117 	ldw	r7,4(r2)
10009054:	d8800717 	ldw	r2,28(sp)
10009058:	0009883a 	mov	r4,zero
1000905c:	014ff834 	movhi	r5,16352
10009060:	da801615 	stw	r10,88(sp)
10009064:	15c00044 	addi	r23,r2,1
10009068:	00046980 	call	10004698 <__divdf3>
1000906c:	d9c00e17 	ldw	r7,56(sp)
10009070:	880d883a 	mov	r6,r17
10009074:	1009883a 	mov	r4,r2
10009078:	180b883a 	mov	r5,r3
1000907c:	0005ac80 	call	10005ac8 <__subdf3>
10009080:	a80b883a 	mov	r5,r21
10009084:	a009883a 	mov	r4,r20
10009088:	d8c01015 	stw	r3,64(sp)
1000908c:	d8800e15 	stw	r2,56(sp)
10009090:	00063980 	call	10006398 <__fixdfsi>
10009094:	1009883a 	mov	r4,r2
10009098:	d8801715 	stw	r2,92(sp)
1000909c:	00064200 	call	10006420 <__floatsidf>
100090a0:	a009883a 	mov	r4,r20
100090a4:	a80b883a 	mov	r5,r21
100090a8:	100d883a 	mov	r6,r2
100090ac:	180f883a 	mov	r7,r3
100090b0:	0005ac80 	call	10005ac8 <__subdf3>
100090b4:	da001717 	ldw	r8,92(sp)
100090b8:	1829883a 	mov	r20,r3
100090bc:	d8c00717 	ldw	r3,28(sp)
100090c0:	d9000e17 	ldw	r4,56(sp)
100090c4:	d9401017 	ldw	r5,64(sp)
100090c8:	42000c04 	addi	r8,r8,48
100090cc:	1023883a 	mov	r17,r2
100090d0:	1a000005 	stb	r8,0(r3)
100090d4:	880d883a 	mov	r6,r17
100090d8:	a00f883a 	mov	r7,r20
100090dc:	402b883a 	mov	r21,r8
100090e0:	000509c0 	call	1000509c <__gedf2>
100090e4:	00844516 	blt	zero,r2,1000a1fc <_dtoa_r+0x1698>
100090e8:	0009883a 	mov	r4,zero
100090ec:	014ffc34 	movhi	r5,16368
100090f0:	880d883a 	mov	r6,r17
100090f4:	a00f883a 	mov	r7,r20
100090f8:	0005ac80 	call	10005ac8 <__subdf3>
100090fc:	d9000e17 	ldw	r4,56(sp)
10009100:	d9401017 	ldw	r5,64(sp)
10009104:	100d883a 	mov	r6,r2
10009108:	180f883a 	mov	r7,r3
1000910c:	000509c0 	call	1000509c <__gedf2>
10009110:	da801617 	ldw	r10,88(sp)
10009114:	00843616 	blt	zero,r2,1000a1f0 <_dtoa_r+0x168c>
10009118:	00800044 	movi	r2,1
1000911c:	12806e0e 	bge	r2,r10,100092d8 <_dtoa_r+0x774>
10009120:	d9000717 	ldw	r4,28(sp)
10009124:	dd801315 	stw	r22,76(sp)
10009128:	dc001115 	stw	r16,68(sp)
1000912c:	2295883a 	add	r10,r4,r10
10009130:	dcc01415 	stw	r19,80(sp)
10009134:	502d883a 	mov	r22,r10
10009138:	dcc01017 	ldw	r19,64(sp)
1000913c:	b821883a 	mov	r16,r23
10009140:	dc801015 	stw	r18,64(sp)
10009144:	dc800e17 	ldw	r18,56(sp)
10009148:	00000906 	br	10009170 <_dtoa_r+0x60c>
1000914c:	0005ac80 	call	10005ac8 <__subdf3>
10009150:	1009883a 	mov	r4,r2
10009154:	180b883a 	mov	r5,r3
10009158:	900d883a 	mov	r6,r18
1000915c:	980f883a 	mov	r7,r19
10009160:	000517c0 	call	1000517c <__ledf2>
10009164:	10040e16 	blt	r2,zero,1000a1a0 <_dtoa_r+0x163c>
10009168:	b821883a 	mov	r16,r23
1000916c:	bd841026 	beq	r23,r22,1000a1b0 <_dtoa_r+0x164c>
10009170:	9009883a 	mov	r4,r18
10009174:	980b883a 	mov	r5,r19
10009178:	000d883a 	mov	r6,zero
1000917c:	01d00934 	movhi	r7,16420
10009180:	000525c0 	call	1000525c <__muldf3>
10009184:	000d883a 	mov	r6,zero
10009188:	01d00934 	movhi	r7,16420
1000918c:	8809883a 	mov	r4,r17
10009190:	a00b883a 	mov	r5,r20
10009194:	1025883a 	mov	r18,r2
10009198:	1827883a 	mov	r19,r3
1000919c:	000525c0 	call	1000525c <__muldf3>
100091a0:	180b883a 	mov	r5,r3
100091a4:	1009883a 	mov	r4,r2
100091a8:	1823883a 	mov	r17,r3
100091ac:	1029883a 	mov	r20,r2
100091b0:	00063980 	call	10006398 <__fixdfsi>
100091b4:	1009883a 	mov	r4,r2
100091b8:	102b883a 	mov	r21,r2
100091bc:	00064200 	call	10006420 <__floatsidf>
100091c0:	a009883a 	mov	r4,r20
100091c4:	880b883a 	mov	r5,r17
100091c8:	100d883a 	mov	r6,r2
100091cc:	180f883a 	mov	r7,r3
100091d0:	0005ac80 	call	10005ac8 <__subdf3>
100091d4:	ad400c04 	addi	r21,r21,48
100091d8:	1009883a 	mov	r4,r2
100091dc:	180b883a 	mov	r5,r3
100091e0:	900d883a 	mov	r6,r18
100091e4:	980f883a 	mov	r7,r19
100091e8:	85400005 	stb	r21,0(r16)
100091ec:	1023883a 	mov	r17,r2
100091f0:	1829883a 	mov	r20,r3
100091f4:	000517c0 	call	1000517c <__ledf2>
100091f8:	bdc00044 	addi	r23,r23,1
100091fc:	0009883a 	mov	r4,zero
10009200:	014ffc34 	movhi	r5,16368
10009204:	880d883a 	mov	r6,r17
10009208:	a00f883a 	mov	r7,r20
1000920c:	103fcf0e 	bge	r2,zero,1000914c <__alt_data_end+0xf800914c>
10009210:	d9801217 	ldw	r6,72(sp)
10009214:	dc001117 	ldw	r16,68(sp)
10009218:	d9800515 	stw	r6,20(sp)
1000921c:	8009883a 	mov	r4,r16
10009220:	e00b883a 	mov	r5,fp
10009224:	000bc480 	call	1000bc48 <_Bfree>
10009228:	d8c00517 	ldw	r3,20(sp)
1000922c:	d9002317 	ldw	r4,140(sp)
10009230:	d9802517 	ldw	r6,148(sp)
10009234:	b8000005 	stb	zero,0(r23)
10009238:	18800044 	addi	r2,r3,1
1000923c:	20800015 	stw	r2,0(r4)
10009240:	30027226 	beq	r6,zero,10009c0c <_dtoa_r+0x10a8>
10009244:	35c00015 	stw	r23,0(r6)
10009248:	d8800717 	ldw	r2,28(sp)
1000924c:	003e7406 	br	10008c20 <__alt_data_end+0xf8008c20>
10009250:	00800434 	movhi	r2,16
10009254:	10bfffc4 	addi	r2,r2,-1
10009258:	a8aa703a 	and	r21,r21,r2
1000925c:	a83e801e 	bne	r21,zero,10008c60 <__alt_data_end+0xf8008c60>
10009260:	00840074 	movhi	r2,4097
10009264:	10889b04 	addi	r2,r2,8812
10009268:	003e7f06 	br	10008c68 <__alt_data_end+0xf8008c68>
1000926c:	10c00204 	addi	r3,r2,8
10009270:	003e8206 	br	10008c7c <__alt_data_end+0xf8008c7c>
10009274:	01400434 	movhi	r5,16
10009278:	297fffc4 	addi	r5,r5,-1
1000927c:	994a703a 	and	r5,r19,r5
10009280:	9009883a 	mov	r4,r18
10009284:	8c7f0044 	addi	r17,r17,-1023
10009288:	294ffc34 	orhi	r5,r5,16368
1000928c:	dd000217 	ldw	r20,8(sp)
10009290:	d8000f15 	stw	zero,60(sp)
10009294:	003e9f06 	br	10008d14 <__alt_data_end+0xf8008d14>
10009298:	00840074 	movhi	r2,4097
1000929c:	10889204 	addi	r2,r2,8776
100092a0:	003e5f06 	br	10008c20 <__alt_data_end+0xf8008c20>
100092a4:	80001115 	stw	zero,68(r16)
100092a8:	8009883a 	mov	r4,r16
100092ac:	000b883a 	mov	r5,zero
100092b0:	000bba00 	call	1000bba0 <_Balloc>
100092b4:	01bfffc4 	movi	r6,-1
100092b8:	d8800715 	stw	r2,28(sp)
100092bc:	80801015 	stw	r2,64(r16)
100092c0:	00800044 	movi	r2,1
100092c4:	d9800615 	stw	r6,24(sp)
100092c8:	d8800b15 	stw	r2,44(sp)
100092cc:	d8002215 	stw	zero,136(sp)
100092d0:	d9800d15 	stw	r6,52(sp)
100092d4:	d8000315 	stw	zero,12(sp)
100092d8:	d8800117 	ldw	r2,4(sp)
100092dc:	10008e16 	blt	r2,zero,10009518 <_dtoa_r+0x9b4>
100092e0:	d9000517 	ldw	r4,20(sp)
100092e4:	00c00384 	movi	r3,14
100092e8:	19008b16 	blt	r3,r4,10009518 <_dtoa_r+0x9b4>
100092ec:	200490fa 	slli	r2,r4,3
100092f0:	00c40074 	movhi	r3,4097
100092f4:	d9802217 	ldw	r6,136(sp)
100092f8:	18c8b904 	addi	r3,r3,8932
100092fc:	1885883a 	add	r2,r3,r2
10009300:	14400017 	ldw	r17,0(r2)
10009304:	15000117 	ldw	r20,4(r2)
10009308:	3001c716 	blt	r6,zero,10009a28 <_dtoa_r+0xec4>
1000930c:	880d883a 	mov	r6,r17
10009310:	a00f883a 	mov	r7,r20
10009314:	9009883a 	mov	r4,r18
10009318:	980b883a 	mov	r5,r19
1000931c:	00046980 	call	10004698 <__divdf3>
10009320:	180b883a 	mov	r5,r3
10009324:	1009883a 	mov	r4,r2
10009328:	00063980 	call	10006398 <__fixdfsi>
1000932c:	1009883a 	mov	r4,r2
10009330:	102d883a 	mov	r22,r2
10009334:	00064200 	call	10006420 <__floatsidf>
10009338:	1009883a 	mov	r4,r2
1000933c:	180b883a 	mov	r5,r3
10009340:	880d883a 	mov	r6,r17
10009344:	a00f883a 	mov	r7,r20
10009348:	000525c0 	call	1000525c <__muldf3>
1000934c:	9009883a 	mov	r4,r18
10009350:	980b883a 	mov	r5,r19
10009354:	100d883a 	mov	r6,r2
10009358:	180f883a 	mov	r7,r3
1000935c:	0005ac80 	call	10005ac8 <__subdf3>
10009360:	d9000717 	ldw	r4,28(sp)
10009364:	d9800617 	ldw	r6,24(sp)
10009368:	180b883a 	mov	r5,r3
1000936c:	b0c00c04 	addi	r3,r22,48
10009370:	20c00005 	stb	r3,0(r4)
10009374:	25c00044 	addi	r23,r4,1
10009378:	01000044 	movi	r4,1
1000937c:	1011883a 	mov	r8,r2
10009380:	2807883a 	mov	r3,r5
10009384:	31003d26 	beq	r6,r4,1000947c <_dtoa_r+0x918>
10009388:	000d883a 	mov	r6,zero
1000938c:	01d00934 	movhi	r7,16420
10009390:	1009883a 	mov	r4,r2
10009394:	000525c0 	call	1000525c <__muldf3>
10009398:	1009883a 	mov	r4,r2
1000939c:	180b883a 	mov	r5,r3
100093a0:	000d883a 	mov	r6,zero
100093a4:	000f883a 	mov	r7,zero
100093a8:	1027883a 	mov	r19,r2
100093ac:	182b883a 	mov	r21,r3
100093b0:	00050180 	call	10005018 <__eqdf2>
100093b4:	103f9926 	beq	r2,zero,1000921c <__alt_data_end+0xf800921c>
100093b8:	d8c00617 	ldw	r3,24(sp)
100093bc:	d9000717 	ldw	r4,28(sp)
100093c0:	b825883a 	mov	r18,r23
100093c4:	18bfffc4 	addi	r2,r3,-1
100093c8:	20ad883a 	add	r22,r4,r2
100093cc:	dc000315 	stw	r16,12(sp)
100093d0:	00000a06 	br	100093fc <_dtoa_r+0x898>
100093d4:	000525c0 	call	1000525c <__muldf3>
100093d8:	1009883a 	mov	r4,r2
100093dc:	180b883a 	mov	r5,r3
100093e0:	000d883a 	mov	r6,zero
100093e4:	000f883a 	mov	r7,zero
100093e8:	1027883a 	mov	r19,r2
100093ec:	182b883a 	mov	r21,r3
100093f0:	b825883a 	mov	r18,r23
100093f4:	00050180 	call	10005018 <__eqdf2>
100093f8:	10022626 	beq	r2,zero,10009c94 <_dtoa_r+0x1130>
100093fc:	880d883a 	mov	r6,r17
10009400:	a00f883a 	mov	r7,r20
10009404:	9809883a 	mov	r4,r19
10009408:	a80b883a 	mov	r5,r21
1000940c:	00046980 	call	10004698 <__divdf3>
10009410:	180b883a 	mov	r5,r3
10009414:	1009883a 	mov	r4,r2
10009418:	00063980 	call	10006398 <__fixdfsi>
1000941c:	1009883a 	mov	r4,r2
10009420:	1021883a 	mov	r16,r2
10009424:	00064200 	call	10006420 <__floatsidf>
10009428:	1009883a 	mov	r4,r2
1000942c:	180b883a 	mov	r5,r3
10009430:	880d883a 	mov	r6,r17
10009434:	a00f883a 	mov	r7,r20
10009438:	000525c0 	call	1000525c <__muldf3>
1000943c:	9809883a 	mov	r4,r19
10009440:	a80b883a 	mov	r5,r21
10009444:	100d883a 	mov	r6,r2
10009448:	180f883a 	mov	r7,r3
1000944c:	0005ac80 	call	10005ac8 <__subdf3>
10009450:	82000c04 	addi	r8,r16,48
10009454:	92000005 	stb	r8,0(r18)
10009458:	1009883a 	mov	r4,r2
1000945c:	180b883a 	mov	r5,r3
10009460:	000d883a 	mov	r6,zero
10009464:	01d00934 	movhi	r7,16420
10009468:	1011883a 	mov	r8,r2
1000946c:	bdc00044 	addi	r23,r23,1
10009470:	95bfd81e 	bne	r18,r22,100093d4 <__alt_data_end+0xf80093d4>
10009474:	802d883a 	mov	r22,r16
10009478:	dc000317 	ldw	r16,12(sp)
1000947c:	4009883a 	mov	r4,r8
10009480:	180b883a 	mov	r5,r3
10009484:	400d883a 	mov	r6,r8
10009488:	180f883a 	mov	r7,r3
1000948c:	0003dfc0 	call	10003dfc <__adddf3>
10009490:	8809883a 	mov	r4,r17
10009494:	a00b883a 	mov	r5,r20
10009498:	100d883a 	mov	r6,r2
1000949c:	180f883a 	mov	r7,r3
100094a0:	1027883a 	mov	r19,r2
100094a4:	1825883a 	mov	r18,r3
100094a8:	000517c0 	call	1000517c <__ledf2>
100094ac:	10000816 	blt	r2,zero,100094d0 <_dtoa_r+0x96c>
100094b0:	8809883a 	mov	r4,r17
100094b4:	a00b883a 	mov	r5,r20
100094b8:	980d883a 	mov	r6,r19
100094bc:	900f883a 	mov	r7,r18
100094c0:	00050180 	call	10005018 <__eqdf2>
100094c4:	103f551e 	bne	r2,zero,1000921c <__alt_data_end+0xf800921c>
100094c8:	b580004c 	andi	r22,r22,1
100094cc:	b03f5326 	beq	r22,zero,1000921c <__alt_data_end+0xf800921c>
100094d0:	bd7fffc3 	ldbu	r21,-1(r23)
100094d4:	b8bfffc4 	addi	r2,r23,-1
100094d8:	1007883a 	mov	r3,r2
100094dc:	01400e44 	movi	r5,57
100094e0:	d9800717 	ldw	r6,28(sp)
100094e4:	00000506 	br	100094fc <_dtoa_r+0x998>
100094e8:	18ffffc4 	addi	r3,r3,-1
100094ec:	30825e26 	beq	r6,r2,10009e68 <_dtoa_r+0x1304>
100094f0:	1d400003 	ldbu	r21,0(r3)
100094f4:	102f883a 	mov	r23,r2
100094f8:	10bfffc4 	addi	r2,r2,-1
100094fc:	a9003fcc 	andi	r4,r21,255
10009500:	2100201c 	xori	r4,r4,128
10009504:	213fe004 	addi	r4,r4,-128
10009508:	217ff726 	beq	r4,r5,100094e8 <__alt_data_end+0xf80094e8>
1000950c:	aa000044 	addi	r8,r21,1
10009510:	12000005 	stb	r8,0(r2)
10009514:	003f4106 	br	1000921c <__alt_data_end+0xf800921c>
10009518:	d8c00b17 	ldw	r3,44(sp)
1000951c:	18006726 	beq	r3,zero,100096bc <_dtoa_r+0xb58>
10009520:	d9000317 	ldw	r4,12(sp)
10009524:	00c00044 	movi	r3,1
10009528:	19016a0e 	bge	r3,r4,10009ad4 <_dtoa_r+0xf70>
1000952c:	d8800617 	ldw	r2,24(sp)
10009530:	d8c00917 	ldw	r3,36(sp)
10009534:	157fffc4 	addi	r21,r2,-1
10009538:	1d420716 	blt	r3,r21,10009d58 <_dtoa_r+0x11f4>
1000953c:	1d6bc83a 	sub	r21,r3,r21
10009540:	d8800617 	ldw	r2,24(sp)
10009544:	1002c716 	blt	r2,zero,1000a064 <_dtoa_r+0x1500>
10009548:	dd000817 	ldw	r20,32(sp)
1000954c:	d8800617 	ldw	r2,24(sp)
10009550:	d9800817 	ldw	r6,32(sp)
10009554:	8009883a 	mov	r4,r16
10009558:	01400044 	movi	r5,1
1000955c:	308d883a 	add	r6,r6,r2
10009560:	d9800815 	stw	r6,32(sp)
10009564:	b0ad883a 	add	r22,r22,r2
10009568:	000bfc80 	call	1000bfc8 <__i2b>
1000956c:	1023883a 	mov	r17,r2
10009570:	a0000826 	beq	r20,zero,10009594 <_dtoa_r+0xa30>
10009574:	0580070e 	bge	zero,r22,10009594 <_dtoa_r+0xa30>
10009578:	b005883a 	mov	r2,r22
1000957c:	a5812016 	blt	r20,r22,10009a00 <_dtoa_r+0xe9c>
10009580:	d8c00817 	ldw	r3,32(sp)
10009584:	a0a9c83a 	sub	r20,r20,r2
10009588:	b0adc83a 	sub	r22,r22,r2
1000958c:	1887c83a 	sub	r3,r3,r2
10009590:	d8c00815 	stw	r3,32(sp)
10009594:	d9000917 	ldw	r4,36(sp)
10009598:	0100140e 	bge	zero,r4,100095ec <_dtoa_r+0xa88>
1000959c:	d9800b17 	ldw	r6,44(sp)
100095a0:	3001e526 	beq	r6,zero,10009d38 <_dtoa_r+0x11d4>
100095a4:	05400e0e 	bge	zero,r21,100095e0 <_dtoa_r+0xa7c>
100095a8:	880b883a 	mov	r5,r17
100095ac:	8009883a 	mov	r4,r16
100095b0:	a80d883a 	mov	r6,r21
100095b4:	000c2940 	call	1000c294 <__pow5mult>
100095b8:	e00d883a 	mov	r6,fp
100095bc:	8009883a 	mov	r4,r16
100095c0:	100b883a 	mov	r5,r2
100095c4:	1023883a 	mov	r17,r2
100095c8:	000c0040 	call	1000c004 <__multiply>
100095cc:	102f883a 	mov	r23,r2
100095d0:	e00b883a 	mov	r5,fp
100095d4:	8009883a 	mov	r4,r16
100095d8:	000bc480 	call	1000bc48 <_Bfree>
100095dc:	b839883a 	mov	fp,r23
100095e0:	d8800917 	ldw	r2,36(sp)
100095e4:	154dc83a 	sub	r6,r2,r21
100095e8:	3001281e 	bne	r6,zero,10009a8c <_dtoa_r+0xf28>
100095ec:	05c00044 	movi	r23,1
100095f0:	8009883a 	mov	r4,r16
100095f4:	b80b883a 	mov	r5,r23
100095f8:	000bfc80 	call	1000bfc8 <__i2b>
100095fc:	d8c00a17 	ldw	r3,40(sp)
10009600:	102b883a 	mov	r21,r2
10009604:	00c0310e 	bge	zero,r3,100096cc <_dtoa_r+0xb68>
10009608:	8009883a 	mov	r4,r16
1000960c:	100b883a 	mov	r5,r2
10009610:	180d883a 	mov	r6,r3
10009614:	000c2940 	call	1000c294 <__pow5mult>
10009618:	d9000317 	ldw	r4,12(sp)
1000961c:	102b883a 	mov	r21,r2
10009620:	b9011f0e 	bge	r23,r4,10009aa0 <_dtoa_r+0xf3c>
10009624:	0027883a 	mov	r19,zero
10009628:	a8800417 	ldw	r2,16(r21)
1000962c:	10800104 	addi	r2,r2,4
10009630:	1085883a 	add	r2,r2,r2
10009634:	1085883a 	add	r2,r2,r2
10009638:	a885883a 	add	r2,r21,r2
1000963c:	11000017 	ldw	r4,0(r2)
10009640:	000beb00 	call	1000beb0 <__hi0bits>
10009644:	00c00804 	movi	r3,32
10009648:	1885c83a 	sub	r2,r3,r2
1000964c:	00002506 	br	100096e4 <_dtoa_r+0xb80>
10009650:	01800044 	movi	r6,1
10009654:	d9800c15 	stw	r6,48(sp)
10009658:	003dec06 	br	10008e0c <__alt_data_end+0xf8008e0c>
1000965c:	d8c00817 	ldw	r3,32(sp)
10009660:	d9000517 	ldw	r4,20(sp)
10009664:	d8000a15 	stw	zero,40(sp)
10009668:	1907c83a 	sub	r3,r3,r4
1000966c:	010dc83a 	sub	r6,zero,r4
10009670:	d8c00815 	stw	r3,32(sp)
10009674:	d9800915 	stw	r6,36(sp)
10009678:	003ded06 	br	10008e30 <__alt_data_end+0xf8008e30>
1000967c:	05adc83a 	sub	r22,zero,r22
10009680:	dd800815 	stw	r22,32(sp)
10009684:	002d883a 	mov	r22,zero
10009688:	003de406 	br	10008e1c <__alt_data_end+0xf8008e1c>
1000968c:	d9000517 	ldw	r4,20(sp)
10009690:	00064200 	call	10006420 <__floatsidf>
10009694:	1009883a 	mov	r4,r2
10009698:	180b883a 	mov	r5,r3
1000969c:	b00d883a 	mov	r6,r22
100096a0:	a80f883a 	mov	r7,r21
100096a4:	00050180 	call	10005018 <__eqdf2>
100096a8:	103dc726 	beq	r2,zero,10008dc8 <__alt_data_end+0xf8008dc8>
100096ac:	d8800517 	ldw	r2,20(sp)
100096b0:	10bfffc4 	addi	r2,r2,-1
100096b4:	d8800515 	stw	r2,20(sp)
100096b8:	003dc306 	br	10008dc8 <__alt_data_end+0xf8008dc8>
100096bc:	dd400917 	ldw	r21,36(sp)
100096c0:	dd000817 	ldw	r20,32(sp)
100096c4:	0023883a 	mov	r17,zero
100096c8:	003fa906 	br	10009570 <__alt_data_end+0xf8009570>
100096cc:	d9800317 	ldw	r6,12(sp)
100096d0:	b981670e 	bge	r23,r6,10009c70 <_dtoa_r+0x110c>
100096d4:	0027883a 	mov	r19,zero
100096d8:	d8c00a17 	ldw	r3,40(sp)
100096dc:	183fd21e 	bne	r3,zero,10009628 <__alt_data_end+0xf8009628>
100096e0:	00800044 	movi	r2,1
100096e4:	1585883a 	add	r2,r2,r22
100096e8:	108007cc 	andi	r2,r2,31
100096ec:	10005f26 	beq	r2,zero,1000986c <_dtoa_r+0xd08>
100096f0:	00c00804 	movi	r3,32
100096f4:	1887c83a 	sub	r3,r3,r2
100096f8:	01000104 	movi	r4,4
100096fc:	20c2dd0e 	bge	r4,r3,1000a274 <_dtoa_r+0x1710>
10009700:	d9000817 	ldw	r4,32(sp)
10009704:	00c00704 	movi	r3,28
10009708:	1885c83a 	sub	r2,r3,r2
1000970c:	2089883a 	add	r4,r4,r2
10009710:	d9000815 	stw	r4,32(sp)
10009714:	a0a9883a 	add	r20,r20,r2
10009718:	b0ad883a 	add	r22,r22,r2
1000971c:	d8800817 	ldw	r2,32(sp)
10009720:	0080050e 	bge	zero,r2,10009738 <_dtoa_r+0xbd4>
10009724:	e00b883a 	mov	r5,fp
10009728:	8009883a 	mov	r4,r16
1000972c:	100d883a 	mov	r6,r2
10009730:	000c3d40 	call	1000c3d4 <__lshift>
10009734:	1039883a 	mov	fp,r2
10009738:	0580050e 	bge	zero,r22,10009750 <_dtoa_r+0xbec>
1000973c:	a80b883a 	mov	r5,r21
10009740:	8009883a 	mov	r4,r16
10009744:	b00d883a 	mov	r6,r22
10009748:	000c3d40 	call	1000c3d4 <__lshift>
1000974c:	102b883a 	mov	r21,r2
10009750:	d8c00c17 	ldw	r3,48(sp)
10009754:	1801161e 	bne	r3,zero,10009bb0 <_dtoa_r+0x104c>
10009758:	d8c00617 	ldw	r3,24(sp)
1000975c:	00c12d0e 	bge	zero,r3,10009c14 <_dtoa_r+0x10b0>
10009760:	d8c00b17 	ldw	r3,44(sp)
10009764:	1800571e 	bne	r3,zero,100098c4 <_dtoa_r+0xd60>
10009768:	dc800717 	ldw	r18,28(sp)
1000976c:	dcc00617 	ldw	r19,24(sp)
10009770:	9029883a 	mov	r20,r18
10009774:	00000206 	br	10009780 <_dtoa_r+0xc1c>
10009778:	000bc700 	call	1000bc70 <__multadd>
1000977c:	1039883a 	mov	fp,r2
10009780:	e009883a 	mov	r4,fp
10009784:	a80b883a 	mov	r5,r21
10009788:	000893c0 	call	1000893c <quorem>
1000978c:	10800c04 	addi	r2,r2,48
10009790:	90800005 	stb	r2,0(r18)
10009794:	94800044 	addi	r18,r18,1
10009798:	9507c83a 	sub	r3,r18,r20
1000979c:	8009883a 	mov	r4,r16
100097a0:	e00b883a 	mov	r5,fp
100097a4:	01800284 	movi	r6,10
100097a8:	000f883a 	mov	r7,zero
100097ac:	1cfff216 	blt	r3,r19,10009778 <__alt_data_end+0xf8009778>
100097b0:	1011883a 	mov	r8,r2
100097b4:	d8800617 	ldw	r2,24(sp)
100097b8:	00822e0e 	bge	zero,r2,1000a074 <_dtoa_r+0x1510>
100097bc:	d9000717 	ldw	r4,28(sp)
100097c0:	0025883a 	mov	r18,zero
100097c4:	20af883a 	add	r23,r4,r2
100097c8:	e00b883a 	mov	r5,fp
100097cc:	01800044 	movi	r6,1
100097d0:	8009883a 	mov	r4,r16
100097d4:	da001715 	stw	r8,92(sp)
100097d8:	000c3d40 	call	1000c3d4 <__lshift>
100097dc:	1009883a 	mov	r4,r2
100097e0:	a80b883a 	mov	r5,r21
100097e4:	1039883a 	mov	fp,r2
100097e8:	000c51c0 	call	1000c51c <__mcmp>
100097ec:	da001717 	ldw	r8,92(sp)
100097f0:	00816e0e 	bge	zero,r2,10009dac <_dtoa_r+0x1248>
100097f4:	b93fffc3 	ldbu	r4,-1(r23)
100097f8:	b8bfffc4 	addi	r2,r23,-1
100097fc:	1007883a 	mov	r3,r2
10009800:	01800e44 	movi	r6,57
10009804:	d9c00717 	ldw	r7,28(sp)
10009808:	00000506 	br	10009820 <_dtoa_r+0xcbc>
1000980c:	18ffffc4 	addi	r3,r3,-1
10009810:	38811926 	beq	r7,r2,10009c78 <_dtoa_r+0x1114>
10009814:	19000003 	ldbu	r4,0(r3)
10009818:	102f883a 	mov	r23,r2
1000981c:	10bfffc4 	addi	r2,r2,-1
10009820:	21403fcc 	andi	r5,r4,255
10009824:	2940201c 	xori	r5,r5,128
10009828:	297fe004 	addi	r5,r5,-128
1000982c:	29bff726 	beq	r5,r6,1000980c <__alt_data_end+0xf800980c>
10009830:	21000044 	addi	r4,r4,1
10009834:	11000005 	stb	r4,0(r2)
10009838:	8009883a 	mov	r4,r16
1000983c:	a80b883a 	mov	r5,r21
10009840:	000bc480 	call	1000bc48 <_Bfree>
10009844:	883e7526 	beq	r17,zero,1000921c <__alt_data_end+0xf800921c>
10009848:	90000426 	beq	r18,zero,1000985c <_dtoa_r+0xcf8>
1000984c:	94400326 	beq	r18,r17,1000985c <_dtoa_r+0xcf8>
10009850:	8009883a 	mov	r4,r16
10009854:	900b883a 	mov	r5,r18
10009858:	000bc480 	call	1000bc48 <_Bfree>
1000985c:	8009883a 	mov	r4,r16
10009860:	880b883a 	mov	r5,r17
10009864:	000bc480 	call	1000bc48 <_Bfree>
10009868:	003e6c06 	br	1000921c <__alt_data_end+0xf800921c>
1000986c:	00800704 	movi	r2,28
10009870:	d9800817 	ldw	r6,32(sp)
10009874:	a0a9883a 	add	r20,r20,r2
10009878:	b0ad883a 	add	r22,r22,r2
1000987c:	308d883a 	add	r6,r6,r2
10009880:	d9800815 	stw	r6,32(sp)
10009884:	003fa506 	br	1000971c <__alt_data_end+0xf800971c>
10009888:	013efb84 	movi	r4,-1042
1000988c:	246bc83a 	sub	r21,r4,r17
10009890:	9548983a 	sll	r4,r18,r21
10009894:	003d1806 	br	10008cf8 <__alt_data_end+0xf8008cf8>
10009898:	d8000c15 	stw	zero,48(sp)
1000989c:	003d5b06 	br	10008e0c <__alt_data_end+0xf8008e0c>
100098a0:	880b883a 	mov	r5,r17
100098a4:	8009883a 	mov	r4,r16
100098a8:	01800284 	movi	r6,10
100098ac:	000f883a 	mov	r7,zero
100098b0:	000bc700 	call	1000bc70 <__multadd>
100098b4:	1023883a 	mov	r17,r2
100098b8:	d8800d17 	ldw	r2,52(sp)
100098bc:	0082550e 	bge	zero,r2,1000a214 <_dtoa_r+0x16b0>
100098c0:	d8800615 	stw	r2,24(sp)
100098c4:	0500050e 	bge	zero,r20,100098dc <_dtoa_r+0xd78>
100098c8:	880b883a 	mov	r5,r17
100098cc:	8009883a 	mov	r4,r16
100098d0:	a00d883a 	mov	r6,r20
100098d4:	000c3d40 	call	1000c3d4 <__lshift>
100098d8:	1023883a 	mov	r17,r2
100098dc:	98016a1e 	bne	r19,zero,10009e88 <_dtoa_r+0x1324>
100098e0:	8829883a 	mov	r20,r17
100098e4:	d9000617 	ldw	r4,24(sp)
100098e8:	dcc00717 	ldw	r19,28(sp)
100098ec:	9480004c 	andi	r18,r18,1
100098f0:	20bfffc4 	addi	r2,r4,-1
100098f4:	9885883a 	add	r2,r19,r2
100098f8:	d8800415 	stw	r2,16(sp)
100098fc:	dc800615 	stw	r18,24(sp)
10009900:	e009883a 	mov	r4,fp
10009904:	a80b883a 	mov	r5,r21
10009908:	000893c0 	call	1000893c <quorem>
1000990c:	e009883a 	mov	r4,fp
10009910:	880b883a 	mov	r5,r17
10009914:	102f883a 	mov	r23,r2
10009918:	000c51c0 	call	1000c51c <__mcmp>
1000991c:	8009883a 	mov	r4,r16
10009920:	a80b883a 	mov	r5,r21
10009924:	a00d883a 	mov	r6,r20
10009928:	102d883a 	mov	r22,r2
1000992c:	000c57c0 	call	1000c57c <__mdiff>
10009930:	1007883a 	mov	r3,r2
10009934:	10800317 	ldw	r2,12(r2)
10009938:	bc800c04 	addi	r18,r23,48
1000993c:	1000971e 	bne	r2,zero,10009b9c <_dtoa_r+0x1038>
10009940:	180b883a 	mov	r5,r3
10009944:	e009883a 	mov	r4,fp
10009948:	d8c01515 	stw	r3,84(sp)
1000994c:	000c51c0 	call	1000c51c <__mcmp>
10009950:	d8c01517 	ldw	r3,84(sp)
10009954:	8009883a 	mov	r4,r16
10009958:	d8801515 	stw	r2,84(sp)
1000995c:	180b883a 	mov	r5,r3
10009960:	000bc480 	call	1000bc48 <_Bfree>
10009964:	d8801517 	ldw	r2,84(sp)
10009968:	1000041e 	bne	r2,zero,1000997c <_dtoa_r+0xe18>
1000996c:	d9800317 	ldw	r6,12(sp)
10009970:	3000021e 	bne	r6,zero,1000997c <_dtoa_r+0xe18>
10009974:	d8c00617 	ldw	r3,24(sp)
10009978:	18007626 	beq	r3,zero,10009b54 <_dtoa_r+0xff0>
1000997c:	b0005b16 	blt	r22,zero,10009aec <_dtoa_r+0xf88>
10009980:	b000041e 	bne	r22,zero,10009994 <_dtoa_r+0xe30>
10009984:	d9000317 	ldw	r4,12(sp)
10009988:	2000021e 	bne	r4,zero,10009994 <_dtoa_r+0xe30>
1000998c:	d8c00617 	ldw	r3,24(sp)
10009990:	18005626 	beq	r3,zero,10009aec <_dtoa_r+0xf88>
10009994:	00814d16 	blt	zero,r2,10009ecc <_dtoa_r+0x1368>
10009998:	d8c00417 	ldw	r3,16(sp)
1000999c:	9d800044 	addi	r22,r19,1
100099a0:	9c800005 	stb	r18,0(r19)
100099a4:	b02f883a 	mov	r23,r22
100099a8:	98c14c26 	beq	r19,r3,10009edc <_dtoa_r+0x1378>
100099ac:	e00b883a 	mov	r5,fp
100099b0:	8009883a 	mov	r4,r16
100099b4:	01800284 	movi	r6,10
100099b8:	000f883a 	mov	r7,zero
100099bc:	000bc700 	call	1000bc70 <__multadd>
100099c0:	1039883a 	mov	fp,r2
100099c4:	8d006d26 	beq	r17,r20,10009b7c <_dtoa_r+0x1018>
100099c8:	880b883a 	mov	r5,r17
100099cc:	01800284 	movi	r6,10
100099d0:	000f883a 	mov	r7,zero
100099d4:	8009883a 	mov	r4,r16
100099d8:	000bc700 	call	1000bc70 <__multadd>
100099dc:	a00b883a 	mov	r5,r20
100099e0:	8009883a 	mov	r4,r16
100099e4:	01800284 	movi	r6,10
100099e8:	000f883a 	mov	r7,zero
100099ec:	1023883a 	mov	r17,r2
100099f0:	000bc700 	call	1000bc70 <__multadd>
100099f4:	1029883a 	mov	r20,r2
100099f8:	b027883a 	mov	r19,r22
100099fc:	003fc006 	br	10009900 <__alt_data_end+0xf8009900>
10009a00:	a005883a 	mov	r2,r20
10009a04:	003ede06 	br	10009580 <__alt_data_end+0xf8009580>
10009a08:	01000044 	movi	r4,1
10009a0c:	d9000b15 	stw	r4,44(sp)
10009a10:	d9802217 	ldw	r6,136(sp)
10009a14:	0180dc0e 	bge	zero,r6,10009d88 <_dtoa_r+0x1224>
10009a18:	3023883a 	mov	r17,r6
10009a1c:	d9800d15 	stw	r6,52(sp)
10009a20:	d9800615 	stw	r6,24(sp)
10009a24:	003d1e06 	br	10008ea0 <__alt_data_end+0xf8008ea0>
10009a28:	d8800617 	ldw	r2,24(sp)
10009a2c:	00be3716 	blt	zero,r2,1000930c <__alt_data_end+0xf800930c>
10009a30:	1000be1e 	bne	r2,zero,10009d2c <_dtoa_r+0x11c8>
10009a34:	8809883a 	mov	r4,r17
10009a38:	a00b883a 	mov	r5,r20
10009a3c:	000d883a 	mov	r6,zero
10009a40:	01d00534 	movhi	r7,16404
10009a44:	000525c0 	call	1000525c <__muldf3>
10009a48:	1009883a 	mov	r4,r2
10009a4c:	180b883a 	mov	r5,r3
10009a50:	900d883a 	mov	r6,r18
10009a54:	980f883a 	mov	r7,r19
10009a58:	000509c0 	call	1000509c <__gedf2>
10009a5c:	002b883a 	mov	r21,zero
10009a60:	0023883a 	mov	r17,zero
10009a64:	10007a16 	blt	r2,zero,10009c50 <_dtoa_r+0x10ec>
10009a68:	d9002217 	ldw	r4,136(sp)
10009a6c:	ddc00717 	ldw	r23,28(sp)
10009a70:	0108303a 	nor	r4,zero,r4
10009a74:	d9000515 	stw	r4,20(sp)
10009a78:	8009883a 	mov	r4,r16
10009a7c:	a80b883a 	mov	r5,r21
10009a80:	000bc480 	call	1000bc48 <_Bfree>
10009a84:	883f751e 	bne	r17,zero,1000985c <__alt_data_end+0xf800985c>
10009a88:	003de406 	br	1000921c <__alt_data_end+0xf800921c>
10009a8c:	e00b883a 	mov	r5,fp
10009a90:	8009883a 	mov	r4,r16
10009a94:	000c2940 	call	1000c294 <__pow5mult>
10009a98:	1039883a 	mov	fp,r2
10009a9c:	003ed306 	br	100095ec <__alt_data_end+0xf80095ec>
10009aa0:	903ee01e 	bne	r18,zero,10009624 <__alt_data_end+0xf8009624>
10009aa4:	00800434 	movhi	r2,16
10009aa8:	10bfffc4 	addi	r2,r2,-1
10009aac:	9884703a 	and	r2,r19,r2
10009ab0:	103f081e 	bne	r2,zero,100096d4 <__alt_data_end+0xf80096d4>
10009ab4:	9cdffc2c 	andhi	r19,r19,32752
10009ab8:	983f0626 	beq	r19,zero,100096d4 <__alt_data_end+0xf80096d4>
10009abc:	d8800817 	ldw	r2,32(sp)
10009ac0:	b5800044 	addi	r22,r22,1
10009ac4:	04c00044 	movi	r19,1
10009ac8:	10800044 	addi	r2,r2,1
10009acc:	d8800815 	stw	r2,32(sp)
10009ad0:	003f0106 	br	100096d8 <__alt_data_end+0xf80096d8>
10009ad4:	d9800f17 	ldw	r6,60(sp)
10009ad8:	30016826 	beq	r6,zero,1000a07c <_dtoa_r+0x1518>
10009adc:	10810cc4 	addi	r2,r2,1075
10009ae0:	dd400917 	ldw	r21,36(sp)
10009ae4:	dd000817 	ldw	r20,32(sp)
10009ae8:	003e9906 	br	10009550 <__alt_data_end+0xf8009550>
10009aec:	9011883a 	mov	r8,r18
10009af0:	4007883a 	mov	r3,r8
10009af4:	e02d883a 	mov	r22,fp
10009af8:	0080100e 	bge	zero,r2,10009b3c <_dtoa_r+0xfd8>
10009afc:	01800044 	movi	r6,1
10009b00:	8009883a 	mov	r4,r16
10009b04:	e00b883a 	mov	r5,fp
10009b08:	da001515 	stw	r8,84(sp)
10009b0c:	da001715 	stw	r8,92(sp)
10009b10:	000c3d40 	call	1000c3d4 <__lshift>
10009b14:	1009883a 	mov	r4,r2
10009b18:	a80b883a 	mov	r5,r21
10009b1c:	102d883a 	mov	r22,r2
10009b20:	000c51c0 	call	1000c51c <__mcmp>
10009b24:	d8c01517 	ldw	r3,84(sp)
10009b28:	da001717 	ldw	r8,92(sp)
10009b2c:	0081a50e 	bge	zero,r2,1000a1c4 <_dtoa_r+0x1660>
10009b30:	00800e44 	movi	r2,57
10009b34:	40817b26 	beq	r8,r2,1000a124 <_dtoa_r+0x15c0>
10009b38:	40c00044 	addi	r3,r8,1
10009b3c:	8825883a 	mov	r18,r17
10009b40:	9dc00044 	addi	r23,r19,1
10009b44:	98c00005 	stb	r3,0(r19)
10009b48:	a023883a 	mov	r17,r20
10009b4c:	b039883a 	mov	fp,r22
10009b50:	003f3906 	br	10009838 <__alt_data_end+0xf8009838>
10009b54:	00800e44 	movi	r2,57
10009b58:	9011883a 	mov	r8,r18
10009b5c:	90817226 	beq	r18,r2,1000a128 <_dtoa_r+0x15c4>
10009b60:	0580010e 	bge	zero,r22,10009b68 <_dtoa_r+0x1004>
10009b64:	ba000c44 	addi	r8,r23,49
10009b68:	8825883a 	mov	r18,r17
10009b6c:	9dc00044 	addi	r23,r19,1
10009b70:	9a000005 	stb	r8,0(r19)
10009b74:	a023883a 	mov	r17,r20
10009b78:	003f2f06 	br	10009838 <__alt_data_end+0xf8009838>
10009b7c:	880b883a 	mov	r5,r17
10009b80:	8009883a 	mov	r4,r16
10009b84:	01800284 	movi	r6,10
10009b88:	000f883a 	mov	r7,zero
10009b8c:	000bc700 	call	1000bc70 <__multadd>
10009b90:	1023883a 	mov	r17,r2
10009b94:	1029883a 	mov	r20,r2
10009b98:	003f9706 	br	100099f8 <__alt_data_end+0xf80099f8>
10009b9c:	8009883a 	mov	r4,r16
10009ba0:	180b883a 	mov	r5,r3
10009ba4:	000bc480 	call	1000bc48 <_Bfree>
10009ba8:	00800044 	movi	r2,1
10009bac:	003f7306 	br	1000997c <__alt_data_end+0xf800997c>
10009bb0:	e009883a 	mov	r4,fp
10009bb4:	a80b883a 	mov	r5,r21
10009bb8:	000c51c0 	call	1000c51c <__mcmp>
10009bbc:	103ee60e 	bge	r2,zero,10009758 <__alt_data_end+0xf8009758>
10009bc0:	8009883a 	mov	r4,r16
10009bc4:	e00b883a 	mov	r5,fp
10009bc8:	01800284 	movi	r6,10
10009bcc:	000f883a 	mov	r7,zero
10009bd0:	000bc700 	call	1000bc70 <__multadd>
10009bd4:	d9000517 	ldw	r4,20(sp)
10009bd8:	d9800b17 	ldw	r6,44(sp)
10009bdc:	1039883a 	mov	fp,r2
10009be0:	213fffc4 	addi	r4,r4,-1
10009be4:	d9000515 	stw	r4,20(sp)
10009be8:	303f2d1e 	bne	r6,zero,100098a0 <__alt_data_end+0xf80098a0>
10009bec:	d9000d17 	ldw	r4,52(sp)
10009bf0:	0101780e 	bge	zero,r4,1000a1d4 <_dtoa_r+0x1670>
10009bf4:	d9000615 	stw	r4,24(sp)
10009bf8:	003edb06 	br	10009768 <__alt_data_end+0xf8009768>
10009bfc:	00800084 	movi	r2,2
10009c00:	30818e1e 	bne	r6,r2,1000a23c <_dtoa_r+0x16d8>
10009c04:	d8000b15 	stw	zero,44(sp)
10009c08:	003f8106 	br	10009a10 <__alt_data_end+0xf8009a10>
10009c0c:	d8800717 	ldw	r2,28(sp)
10009c10:	003c0306 	br	10008c20 <__alt_data_end+0xf8008c20>
10009c14:	d9000317 	ldw	r4,12(sp)
10009c18:	00800084 	movi	r2,2
10009c1c:	113ed00e 	bge	r2,r4,10009760 <__alt_data_end+0xf8009760>
10009c20:	d8c00617 	ldw	r3,24(sp)
10009c24:	183f901e 	bne	r3,zero,10009a68 <__alt_data_end+0xf8009a68>
10009c28:	a80b883a 	mov	r5,r21
10009c2c:	8009883a 	mov	r4,r16
10009c30:	01800144 	movi	r6,5
10009c34:	000f883a 	mov	r7,zero
10009c38:	000bc700 	call	1000bc70 <__multadd>
10009c3c:	e009883a 	mov	r4,fp
10009c40:	100b883a 	mov	r5,r2
10009c44:	102b883a 	mov	r21,r2
10009c48:	000c51c0 	call	1000c51c <__mcmp>
10009c4c:	00bf860e 	bge	zero,r2,10009a68 <__alt_data_end+0xf8009a68>
10009c50:	d9800717 	ldw	r6,28(sp)
10009c54:	00800c44 	movi	r2,49
10009c58:	30800005 	stb	r2,0(r6)
10009c5c:	d8800517 	ldw	r2,20(sp)
10009c60:	35c00044 	addi	r23,r6,1
10009c64:	10800044 	addi	r2,r2,1
10009c68:	d8800515 	stw	r2,20(sp)
10009c6c:	003f8206 	br	10009a78 <__alt_data_end+0xf8009a78>
10009c70:	903e981e 	bne	r18,zero,100096d4 <__alt_data_end+0xf80096d4>
10009c74:	003f8b06 	br	10009aa4 <__alt_data_end+0xf8009aa4>
10009c78:	d9800517 	ldw	r6,20(sp)
10009c7c:	d8c00717 	ldw	r3,28(sp)
10009c80:	00800c44 	movi	r2,49
10009c84:	31800044 	addi	r6,r6,1
10009c88:	d9800515 	stw	r6,20(sp)
10009c8c:	18800005 	stb	r2,0(r3)
10009c90:	003ee906 	br	10009838 <__alt_data_end+0xf8009838>
10009c94:	dc000317 	ldw	r16,12(sp)
10009c98:	003d6006 	br	1000921c <__alt_data_end+0xf800921c>
10009c9c:	8809883a 	mov	r4,r17
10009ca0:	00064200 	call	10006420 <__floatsidf>
10009ca4:	a009883a 	mov	r4,r20
10009ca8:	a80b883a 	mov	r5,r21
10009cac:	100d883a 	mov	r6,r2
10009cb0:	180f883a 	mov	r7,r3
10009cb4:	000525c0 	call	1000525c <__muldf3>
10009cb8:	1009883a 	mov	r4,r2
10009cbc:	180b883a 	mov	r5,r3
10009cc0:	000d883a 	mov	r6,zero
10009cc4:	01d00734 	movhi	r7,16412
10009cc8:	0003dfc0 	call	10003dfc <__adddf3>
10009ccc:	1023883a 	mov	r17,r2
10009cd0:	00bf3034 	movhi	r2,64704
10009cd4:	1885883a 	add	r2,r3,r2
10009cd8:	d8800e15 	stw	r2,56(sp)
10009cdc:	a009883a 	mov	r4,r20
10009ce0:	a80b883a 	mov	r5,r21
10009ce4:	000d883a 	mov	r6,zero
10009ce8:	01d00534 	movhi	r7,16404
10009cec:	0005ac80 	call	10005ac8 <__subdf3>
10009cf0:	d9c00e17 	ldw	r7,56(sp)
10009cf4:	1009883a 	mov	r4,r2
10009cf8:	180b883a 	mov	r5,r3
10009cfc:	880d883a 	mov	r6,r17
10009d00:	102b883a 	mov	r21,r2
10009d04:	1829883a 	mov	r20,r3
10009d08:	000509c0 	call	1000509c <__gedf2>
10009d0c:	00807716 	blt	zero,r2,10009eec <_dtoa_r+0x1388>
10009d10:	d8800e17 	ldw	r2,56(sp)
10009d14:	a809883a 	mov	r4,r21
10009d18:	a00b883a 	mov	r5,r20
10009d1c:	11e0003c 	xorhi	r7,r2,32768
10009d20:	880d883a 	mov	r6,r17
10009d24:	000517c0 	call	1000517c <__ledf2>
10009d28:	103d6b0e 	bge	r2,zero,100092d8 <__alt_data_end+0xf80092d8>
10009d2c:	002b883a 	mov	r21,zero
10009d30:	0023883a 	mov	r17,zero
10009d34:	003f4c06 	br	10009a68 <__alt_data_end+0xf8009a68>
10009d38:	d9800917 	ldw	r6,36(sp)
10009d3c:	e00b883a 	mov	r5,fp
10009d40:	8009883a 	mov	r4,r16
10009d44:	000c2940 	call	1000c294 <__pow5mult>
10009d48:	1039883a 	mov	fp,r2
10009d4c:	003e2706 	br	100095ec <__alt_data_end+0xf80095ec>
10009d50:	d8000b15 	stw	zero,44(sp)
10009d54:	003c4906 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009d58:	d9000917 	ldw	r4,36(sp)
10009d5c:	d9800a17 	ldw	r6,40(sp)
10009d60:	dd400915 	stw	r21,36(sp)
10009d64:	a905c83a 	sub	r2,r21,r4
10009d68:	308d883a 	add	r6,r6,r2
10009d6c:	d9800a15 	stw	r6,40(sp)
10009d70:	002b883a 	mov	r21,zero
10009d74:	003df206 	br	10009540 <__alt_data_end+0xf8009540>
10009d78:	dc800e15 	stw	r18,56(sp)
10009d7c:	982b883a 	mov	r21,r19
10009d80:	04400084 	movi	r17,2
10009d84:	003c7406 	br	10008f58 <__alt_data_end+0xf8008f58>
10009d88:	04400044 	movi	r17,1
10009d8c:	dc400d15 	stw	r17,52(sp)
10009d90:	dc400615 	stw	r17,24(sp)
10009d94:	dc402215 	stw	r17,136(sp)
10009d98:	80001115 	stw	zero,68(r16)
10009d9c:	000b883a 	mov	r5,zero
10009da0:	003c4a06 	br	10008ecc <__alt_data_end+0xf8008ecc>
10009da4:	3023883a 	mov	r17,r6
10009da8:	003ffb06 	br	10009d98 <__alt_data_end+0xf8009d98>
10009dac:	1000021e 	bne	r2,zero,10009db8 <_dtoa_r+0x1254>
10009db0:	4200004c 	andi	r8,r8,1
10009db4:	403e8f1e 	bne	r8,zero,100097f4 <__alt_data_end+0xf80097f4>
10009db8:	01000c04 	movi	r4,48
10009dbc:	00000106 	br	10009dc4 <_dtoa_r+0x1260>
10009dc0:	102f883a 	mov	r23,r2
10009dc4:	b8bfffc4 	addi	r2,r23,-1
10009dc8:	10c00007 	ldb	r3,0(r2)
10009dcc:	193ffc26 	beq	r3,r4,10009dc0 <__alt_data_end+0xf8009dc0>
10009dd0:	003e9906 	br	10009838 <__alt_data_end+0xf8009838>
10009dd4:	d9000517 	ldw	r4,20(sp)
10009dd8:	012fc83a 	sub	r23,zero,r4
10009ddc:	b800ad26 	beq	r23,zero,1000a094 <_dtoa_r+0x1530>
10009de0:	b88003cc 	andi	r2,r23,15
10009de4:	100490fa 	slli	r2,r2,3
10009de8:	00c40074 	movhi	r3,4097
10009dec:	18c8b904 	addi	r3,r3,8932
10009df0:	1885883a 	add	r2,r3,r2
10009df4:	11800017 	ldw	r6,0(r2)
10009df8:	11c00117 	ldw	r7,4(r2)
10009dfc:	b82fd13a 	srai	r23,r23,4
10009e00:	9009883a 	mov	r4,r18
10009e04:	980b883a 	mov	r5,r19
10009e08:	000525c0 	call	1000525c <__muldf3>
10009e0c:	1029883a 	mov	r20,r2
10009e10:	182b883a 	mov	r21,r3
10009e14:	b800f426 	beq	r23,zero,1000a1e8 <_dtoa_r+0x1684>
10009e18:	02040074 	movhi	r8,4097
10009e1c:	4208af04 	addi	r8,r8,8892
10009e20:	8029883a 	mov	r20,r16
10009e24:	04400084 	movi	r17,2
10009e28:	4021883a 	mov	r16,r8
10009e2c:	b980004c 	andi	r6,r23,1
10009e30:	1009883a 	mov	r4,r2
10009e34:	b82fd07a 	srai	r23,r23,1
10009e38:	180b883a 	mov	r5,r3
10009e3c:	30000426 	beq	r6,zero,10009e50 <_dtoa_r+0x12ec>
10009e40:	81800017 	ldw	r6,0(r16)
10009e44:	81c00117 	ldw	r7,4(r16)
10009e48:	8c400044 	addi	r17,r17,1
10009e4c:	000525c0 	call	1000525c <__muldf3>
10009e50:	84000204 	addi	r16,r16,8
10009e54:	b83ff51e 	bne	r23,zero,10009e2c <__alt_data_end+0xf8009e2c>
10009e58:	a021883a 	mov	r16,r20
10009e5c:	182b883a 	mov	r21,r3
10009e60:	1029883a 	mov	r20,r2
10009e64:	003c5506 	br	10008fbc <__alt_data_end+0xf8008fbc>
10009e68:	d9800517 	ldw	r6,20(sp)
10009e6c:	d9000717 	ldw	r4,28(sp)
10009e70:	00c00c04 	movi	r3,48
10009e74:	31800044 	addi	r6,r6,1
10009e78:	d9800515 	stw	r6,20(sp)
10009e7c:	20c00005 	stb	r3,0(r4)
10009e80:	02000c44 	movi	r8,49
10009e84:	003da206 	br	10009510 <__alt_data_end+0xf8009510>
10009e88:	89400117 	ldw	r5,4(r17)
10009e8c:	8009883a 	mov	r4,r16
10009e90:	000bba00 	call	1000bba0 <_Balloc>
10009e94:	89800417 	ldw	r6,16(r17)
10009e98:	11000304 	addi	r4,r2,12
10009e9c:	89400304 	addi	r5,r17,12
10009ea0:	31800084 	addi	r6,r6,2
10009ea4:	318d883a 	add	r6,r6,r6
10009ea8:	318d883a 	add	r6,r6,r6
10009eac:	1027883a 	mov	r19,r2
10009eb0:	000b9440 	call	1000b944 <memcpy>
10009eb4:	8009883a 	mov	r4,r16
10009eb8:	980b883a 	mov	r5,r19
10009ebc:	01800044 	movi	r6,1
10009ec0:	000c3d40 	call	1000c3d4 <__lshift>
10009ec4:	1029883a 	mov	r20,r2
10009ec8:	003e8606 	br	100098e4 <__alt_data_end+0xf80098e4>
10009ecc:	00800e44 	movi	r2,57
10009ed0:	90809526 	beq	r18,r2,1000a128 <_dtoa_r+0x15c4>
10009ed4:	92000044 	addi	r8,r18,1
10009ed8:	003f2306 	br	10009b68 <__alt_data_end+0xf8009b68>
10009edc:	9011883a 	mov	r8,r18
10009ee0:	8825883a 	mov	r18,r17
10009ee4:	a023883a 	mov	r17,r20
10009ee8:	003e3706 	br	100097c8 <__alt_data_end+0xf80097c8>
10009eec:	002b883a 	mov	r21,zero
10009ef0:	0023883a 	mov	r17,zero
10009ef4:	003f5606 	br	10009c50 <__alt_data_end+0xf8009c50>
10009ef8:	51bfffc4 	addi	r6,r10,-1
10009efc:	300490fa 	slli	r2,r6,3
10009f00:	00c40074 	movhi	r3,4097
10009f04:	18c8b904 	addi	r3,r3,8932
10009f08:	1885883a 	add	r2,r3,r2
10009f0c:	d9c00e17 	ldw	r7,56(sp)
10009f10:	11000017 	ldw	r4,0(r2)
10009f14:	11400117 	ldw	r5,4(r2)
10009f18:	d8800717 	ldw	r2,28(sp)
10009f1c:	d9801015 	stw	r6,64(sp)
10009f20:	880d883a 	mov	r6,r17
10009f24:	da801615 	stw	r10,88(sp)
10009f28:	15c00044 	addi	r23,r2,1
10009f2c:	000525c0 	call	1000525c <__muldf3>
10009f30:	a80b883a 	mov	r5,r21
10009f34:	a009883a 	mov	r4,r20
10009f38:	d8c01115 	stw	r3,68(sp)
10009f3c:	d8800e15 	stw	r2,56(sp)
10009f40:	00063980 	call	10006398 <__fixdfsi>
10009f44:	1009883a 	mov	r4,r2
10009f48:	1023883a 	mov	r17,r2
10009f4c:	00064200 	call	10006420 <__floatsidf>
10009f50:	a009883a 	mov	r4,r20
10009f54:	a80b883a 	mov	r5,r21
10009f58:	100d883a 	mov	r6,r2
10009f5c:	180f883a 	mov	r7,r3
10009f60:	0005ac80 	call	10005ac8 <__subdf3>
10009f64:	1813883a 	mov	r9,r3
10009f68:	d8c00717 	ldw	r3,28(sp)
10009f6c:	8c400c04 	addi	r17,r17,48
10009f70:	1011883a 	mov	r8,r2
10009f74:	1c400005 	stb	r17,0(r3)
10009f78:	da801617 	ldw	r10,88(sp)
10009f7c:	00800044 	movi	r2,1
10009f80:	50802326 	beq	r10,r2,1000a010 <_dtoa_r+0x14ac>
10009f84:	d8800717 	ldw	r2,28(sp)
10009f88:	b82b883a 	mov	r21,r23
10009f8c:	dc001315 	stw	r16,76(sp)
10009f90:	12a9883a 	add	r20,r2,r10
10009f94:	4807883a 	mov	r3,r9
10009f98:	4005883a 	mov	r2,r8
10009f9c:	dc801415 	stw	r18,80(sp)
10009fa0:	000d883a 	mov	r6,zero
10009fa4:	01d00934 	movhi	r7,16420
10009fa8:	1009883a 	mov	r4,r2
10009fac:	180b883a 	mov	r5,r3
10009fb0:	000525c0 	call	1000525c <__muldf3>
10009fb4:	180b883a 	mov	r5,r3
10009fb8:	1009883a 	mov	r4,r2
10009fbc:	1821883a 	mov	r16,r3
10009fc0:	1025883a 	mov	r18,r2
10009fc4:	00063980 	call	10006398 <__fixdfsi>
10009fc8:	1009883a 	mov	r4,r2
10009fcc:	1023883a 	mov	r17,r2
10009fd0:	00064200 	call	10006420 <__floatsidf>
10009fd4:	9009883a 	mov	r4,r18
10009fd8:	800b883a 	mov	r5,r16
10009fdc:	100d883a 	mov	r6,r2
10009fe0:	180f883a 	mov	r7,r3
10009fe4:	8c400c04 	addi	r17,r17,48
10009fe8:	0005ac80 	call	10005ac8 <__subdf3>
10009fec:	ad400044 	addi	r21,r21,1
10009ff0:	ac7fffc5 	stb	r17,-1(r21)
10009ff4:	ad3fea1e 	bne	r21,r20,10009fa0 <__alt_data_end+0xf8009fa0>
10009ff8:	1813883a 	mov	r9,r3
10009ffc:	d8c01017 	ldw	r3,64(sp)
1000a000:	dc001317 	ldw	r16,76(sp)
1000a004:	dc801417 	ldw	r18,80(sp)
1000a008:	1011883a 	mov	r8,r2
1000a00c:	b8ef883a 	add	r23,r23,r3
1000a010:	d9000e17 	ldw	r4,56(sp)
1000a014:	d9401117 	ldw	r5,68(sp)
1000a018:	000d883a 	mov	r6,zero
1000a01c:	01cff834 	movhi	r7,16352
1000a020:	da001715 	stw	r8,92(sp)
1000a024:	da401515 	stw	r9,84(sp)
1000a028:	0003dfc0 	call	10003dfc <__adddf3>
1000a02c:	da001717 	ldw	r8,92(sp)
1000a030:	da401517 	ldw	r9,84(sp)
1000a034:	1009883a 	mov	r4,r2
1000a038:	400d883a 	mov	r6,r8
1000a03c:	480f883a 	mov	r7,r9
1000a040:	180b883a 	mov	r5,r3
1000a044:	000517c0 	call	1000517c <__ledf2>
1000a048:	da001717 	ldw	r8,92(sp)
1000a04c:	da401517 	ldw	r9,84(sp)
1000a050:	10003b0e 	bge	r2,zero,1000a140 <_dtoa_r+0x15dc>
1000a054:	d9001217 	ldw	r4,72(sp)
1000a058:	bd7fffc3 	ldbu	r21,-1(r23)
1000a05c:	d9000515 	stw	r4,20(sp)
1000a060:	003d1c06 	br	100094d4 <__alt_data_end+0xf80094d4>
1000a064:	d8c00817 	ldw	r3,32(sp)
1000a068:	18a9c83a 	sub	r20,r3,r2
1000a06c:	0005883a 	mov	r2,zero
1000a070:	003d3706 	br	10009550 <__alt_data_end+0xf8009550>
1000a074:	00800044 	movi	r2,1
1000a078:	003dd006 	br	100097bc <__alt_data_end+0xf80097bc>
1000a07c:	d8c00217 	ldw	r3,8(sp)
1000a080:	00800d84 	movi	r2,54
1000a084:	dd400917 	ldw	r21,36(sp)
1000a088:	10c5c83a 	sub	r2,r2,r3
1000a08c:	dd000817 	ldw	r20,32(sp)
1000a090:	003d2f06 	br	10009550 <__alt_data_end+0xf8009550>
1000a094:	9029883a 	mov	r20,r18
1000a098:	982b883a 	mov	r21,r19
1000a09c:	04400084 	movi	r17,2
1000a0a0:	003bc606 	br	10008fbc <__alt_data_end+0xf8008fbc>
1000a0a4:	d8800617 	ldw	r2,24(sp)
1000a0a8:	103efc26 	beq	r2,zero,10009c9c <__alt_data_end+0xf8009c9c>
1000a0ac:	d8c00d17 	ldw	r3,52(sp)
1000a0b0:	00fc890e 	bge	zero,r3,100092d8 <__alt_data_end+0xf80092d8>
1000a0b4:	a80b883a 	mov	r5,r21
1000a0b8:	a009883a 	mov	r4,r20
1000a0bc:	000d883a 	mov	r6,zero
1000a0c0:	01d00934 	movhi	r7,16420
1000a0c4:	000525c0 	call	1000525c <__muldf3>
1000a0c8:	89000044 	addi	r4,r17,1
1000a0cc:	1029883a 	mov	r20,r2
1000a0d0:	182b883a 	mov	r21,r3
1000a0d4:	00064200 	call	10006420 <__floatsidf>
1000a0d8:	a009883a 	mov	r4,r20
1000a0dc:	a80b883a 	mov	r5,r21
1000a0e0:	100d883a 	mov	r6,r2
1000a0e4:	180f883a 	mov	r7,r3
1000a0e8:	000525c0 	call	1000525c <__muldf3>
1000a0ec:	1009883a 	mov	r4,r2
1000a0f0:	180b883a 	mov	r5,r3
1000a0f4:	000d883a 	mov	r6,zero
1000a0f8:	01d00734 	movhi	r7,16412
1000a0fc:	0003dfc0 	call	10003dfc <__adddf3>
1000a100:	d9000517 	ldw	r4,20(sp)
1000a104:	1023883a 	mov	r17,r2
1000a108:	00bf3034 	movhi	r2,64704
1000a10c:	213fffc4 	addi	r4,r4,-1
1000a110:	1885883a 	add	r2,r3,r2
1000a114:	d9001215 	stw	r4,72(sp)
1000a118:	d8800e15 	stw	r2,56(sp)
1000a11c:	da800d17 	ldw	r10,52(sp)
1000a120:	003bc306 	br	10009030 <__alt_data_end+0xf8009030>
1000a124:	b039883a 	mov	fp,r22
1000a128:	01000e44 	movi	r4,57
1000a12c:	8825883a 	mov	r18,r17
1000a130:	9dc00044 	addi	r23,r19,1
1000a134:	99000005 	stb	r4,0(r19)
1000a138:	a023883a 	mov	r17,r20
1000a13c:	003dae06 	br	100097f8 <__alt_data_end+0xf80097f8>
1000a140:	d9800e17 	ldw	r6,56(sp)
1000a144:	d9c01117 	ldw	r7,68(sp)
1000a148:	0009883a 	mov	r4,zero
1000a14c:	014ff834 	movhi	r5,16352
1000a150:	da001715 	stw	r8,92(sp)
1000a154:	da401515 	stw	r9,84(sp)
1000a158:	0005ac80 	call	10005ac8 <__subdf3>
1000a15c:	da001717 	ldw	r8,92(sp)
1000a160:	da401517 	ldw	r9,84(sp)
1000a164:	1009883a 	mov	r4,r2
1000a168:	180b883a 	mov	r5,r3
1000a16c:	400d883a 	mov	r6,r8
1000a170:	480f883a 	mov	r7,r9
1000a174:	000509c0 	call	1000509c <__gedf2>
1000a178:	00bc570e 	bge	zero,r2,100092d8 <__alt_data_end+0xf80092d8>
1000a17c:	01000c04 	movi	r4,48
1000a180:	00000106 	br	1000a188 <_dtoa_r+0x1624>
1000a184:	102f883a 	mov	r23,r2
1000a188:	b8bfffc4 	addi	r2,r23,-1
1000a18c:	10c00007 	ldb	r3,0(r2)
1000a190:	193ffc26 	beq	r3,r4,1000a184 <__alt_data_end+0xf800a184>
1000a194:	d9801217 	ldw	r6,72(sp)
1000a198:	d9800515 	stw	r6,20(sp)
1000a19c:	003c1f06 	br	1000921c <__alt_data_end+0xf800921c>
1000a1a0:	d8801217 	ldw	r2,72(sp)
1000a1a4:	dc001117 	ldw	r16,68(sp)
1000a1a8:	d8800515 	stw	r2,20(sp)
1000a1ac:	003cc906 	br	100094d4 <__alt_data_end+0xf80094d4>
1000a1b0:	dd801317 	ldw	r22,76(sp)
1000a1b4:	dc001117 	ldw	r16,68(sp)
1000a1b8:	dcc01417 	ldw	r19,80(sp)
1000a1bc:	dc801017 	ldw	r18,64(sp)
1000a1c0:	003c4506 	br	100092d8 <__alt_data_end+0xf80092d8>
1000a1c4:	103e5d1e 	bne	r2,zero,10009b3c <__alt_data_end+0xf8009b3c>
1000a1c8:	4080004c 	andi	r2,r8,1
1000a1cc:	103e5b26 	beq	r2,zero,10009b3c <__alt_data_end+0xf8009b3c>
1000a1d0:	003e5706 	br	10009b30 <__alt_data_end+0xf8009b30>
1000a1d4:	d8c00317 	ldw	r3,12(sp)
1000a1d8:	00800084 	movi	r2,2
1000a1dc:	10c00a16 	blt	r2,r3,1000a208 <_dtoa_r+0x16a4>
1000a1e0:	d9000d17 	ldw	r4,52(sp)
1000a1e4:	003e8306 	br	10009bf4 <__alt_data_end+0xf8009bf4>
1000a1e8:	04400084 	movi	r17,2
1000a1ec:	003b7306 	br	10008fbc <__alt_data_end+0xf8008fbc>
1000a1f0:	d9801217 	ldw	r6,72(sp)
1000a1f4:	d9800515 	stw	r6,20(sp)
1000a1f8:	003cb606 	br	100094d4 <__alt_data_end+0xf80094d4>
1000a1fc:	d9001217 	ldw	r4,72(sp)
1000a200:	d9000515 	stw	r4,20(sp)
1000a204:	003c0506 	br	1000921c <__alt_data_end+0xf800921c>
1000a208:	d9800d17 	ldw	r6,52(sp)
1000a20c:	d9800615 	stw	r6,24(sp)
1000a210:	003e8306 	br	10009c20 <__alt_data_end+0xf8009c20>
1000a214:	d9800317 	ldw	r6,12(sp)
1000a218:	00800084 	movi	r2,2
1000a21c:	11800216 	blt	r2,r6,1000a228 <_dtoa_r+0x16c4>
1000a220:	d8800d17 	ldw	r2,52(sp)
1000a224:	003da606 	br	100098c0 <__alt_data_end+0xf80098c0>
1000a228:	d8800d17 	ldw	r2,52(sp)
1000a22c:	d8800615 	stw	r2,24(sp)
1000a230:	003e7b06 	br	10009c20 <__alt_data_end+0xf8009c20>
1000a234:	05000044 	movi	r20,1
1000a238:	003b0506 	br	10008e50 <__alt_data_end+0xf8008e50>
1000a23c:	8009883a 	mov	r4,r16
1000a240:	80001115 	stw	zero,68(r16)
1000a244:	000b883a 	mov	r5,zero
1000a248:	000bba00 	call	1000bba0 <_Balloc>
1000a24c:	d8800715 	stw	r2,28(sp)
1000a250:	d8c00717 	ldw	r3,28(sp)
1000a254:	00bfffc4 	movi	r2,-1
1000a258:	01000044 	movi	r4,1
1000a25c:	d8800615 	stw	r2,24(sp)
1000a260:	80c01015 	stw	r3,64(r16)
1000a264:	d9000b15 	stw	r4,44(sp)
1000a268:	d8002215 	stw	zero,136(sp)
1000a26c:	d8800d15 	stw	r2,52(sp)
1000a270:	003c1906 	br	100092d8 <__alt_data_end+0xf80092d8>
1000a274:	193d2926 	beq	r3,r4,1000971c <__alt_data_end+0xf800971c>
1000a278:	00c00f04 	movi	r3,60
1000a27c:	1885c83a 	sub	r2,r3,r2
1000a280:	003d7b06 	br	10009870 <__alt_data_end+0xf8009870>
1000a284:	000b883a 	mov	r5,zero
1000a288:	003b1006 	br	10008ecc <__alt_data_end+0xf8008ecc>

1000a28c <_fflush_r>:
1000a28c:	defffb04 	addi	sp,sp,-20
1000a290:	dcc00315 	stw	r19,12(sp)
1000a294:	dc000015 	stw	r16,0(sp)
1000a298:	dfc00415 	stw	ra,16(sp)
1000a29c:	dc800215 	stw	r18,8(sp)
1000a2a0:	dc400115 	stw	r17,4(sp)
1000a2a4:	2027883a 	mov	r19,r4
1000a2a8:	2821883a 	mov	r16,r5
1000a2ac:	20000226 	beq	r4,zero,1000a2b8 <_fflush_r+0x2c>
1000a2b0:	20800e17 	ldw	r2,56(r4)
1000a2b4:	10005326 	beq	r2,zero,1000a404 <_fflush_r+0x178>
1000a2b8:	8080030b 	ldhu	r2,12(r16)
1000a2bc:	10ffffcc 	andi	r3,r2,65535
1000a2c0:	18e0001c 	xori	r3,r3,32768
1000a2c4:	18e00004 	addi	r3,r3,-32768
1000a2c8:	18002c26 	beq	r3,zero,1000a37c <_fflush_r+0xf0>
1000a2cc:	10c0020c 	andi	r3,r2,8
1000a2d0:	1800321e 	bne	r3,zero,1000a39c <_fflush_r+0x110>
1000a2d4:	80c00117 	ldw	r3,4(r16)
1000a2d8:	10820014 	ori	r2,r2,2048
1000a2dc:	8080030d 	sth	r2,12(r16)
1000a2e0:	00c0570e 	bge	zero,r3,1000a440 <_fflush_r+0x1b4>
1000a2e4:	82000a17 	ldw	r8,40(r16)
1000a2e8:	40002426 	beq	r8,zero,1000a37c <_fflush_r+0xf0>
1000a2ec:	9c400017 	ldw	r17,0(r19)
1000a2f0:	10c4000c 	andi	r3,r2,4096
1000a2f4:	98000015 	stw	zero,0(r19)
1000a2f8:	18004626 	beq	r3,zero,1000a414 <_fflush_r+0x188>
1000a2fc:	81801417 	ldw	r6,80(r16)
1000a300:	10c0010c 	andi	r3,r2,4
1000a304:	18000626 	beq	r3,zero,1000a320 <_fflush_r+0x94>
1000a308:	80c00117 	ldw	r3,4(r16)
1000a30c:	80800c17 	ldw	r2,48(r16)
1000a310:	30cdc83a 	sub	r6,r6,r3
1000a314:	10000226 	beq	r2,zero,1000a320 <_fflush_r+0x94>
1000a318:	80800f17 	ldw	r2,60(r16)
1000a31c:	308dc83a 	sub	r6,r6,r2
1000a320:	81400717 	ldw	r5,28(r16)
1000a324:	9809883a 	mov	r4,r19
1000a328:	000f883a 	mov	r7,zero
1000a32c:	403ee83a 	callr	r8
1000a330:	00ffffc4 	movi	r3,-1
1000a334:	10c04526 	beq	r2,r3,1000a44c <_fflush_r+0x1c0>
1000a338:	80c0030b 	ldhu	r3,12(r16)
1000a33c:	81000417 	ldw	r4,16(r16)
1000a340:	80000115 	stw	zero,4(r16)
1000a344:	197dffcc 	andi	r5,r3,63487
1000a348:	8140030d 	sth	r5,12(r16)
1000a34c:	81000015 	stw	r4,0(r16)
1000a350:	18c4000c 	andi	r3,r3,4096
1000a354:	18000126 	beq	r3,zero,1000a35c <_fflush_r+0xd0>
1000a358:	80801415 	stw	r2,80(r16)
1000a35c:	81400c17 	ldw	r5,48(r16)
1000a360:	9c400015 	stw	r17,0(r19)
1000a364:	28000526 	beq	r5,zero,1000a37c <_fflush_r+0xf0>
1000a368:	80801004 	addi	r2,r16,64
1000a36c:	28800226 	beq	r5,r2,1000a378 <_fflush_r+0xec>
1000a370:	9809883a 	mov	r4,r19
1000a374:	000a9bc0 	call	1000a9bc <_free_r>
1000a378:	80000c15 	stw	zero,48(r16)
1000a37c:	0005883a 	mov	r2,zero
1000a380:	dfc00417 	ldw	ra,16(sp)
1000a384:	dcc00317 	ldw	r19,12(sp)
1000a388:	dc800217 	ldw	r18,8(sp)
1000a38c:	dc400117 	ldw	r17,4(sp)
1000a390:	dc000017 	ldw	r16,0(sp)
1000a394:	dec00504 	addi	sp,sp,20
1000a398:	f800283a 	ret
1000a39c:	84800417 	ldw	r18,16(r16)
1000a3a0:	903ff626 	beq	r18,zero,1000a37c <__alt_data_end+0xf800a37c>
1000a3a4:	84400017 	ldw	r17,0(r16)
1000a3a8:	108000cc 	andi	r2,r2,3
1000a3ac:	84800015 	stw	r18,0(r16)
1000a3b0:	8ca3c83a 	sub	r17,r17,r18
1000a3b4:	10001526 	beq	r2,zero,1000a40c <_fflush_r+0x180>
1000a3b8:	0005883a 	mov	r2,zero
1000a3bc:	80800215 	stw	r2,8(r16)
1000a3c0:	04400316 	blt	zero,r17,1000a3d0 <_fflush_r+0x144>
1000a3c4:	003fed06 	br	1000a37c <__alt_data_end+0xf800a37c>
1000a3c8:	90a5883a 	add	r18,r18,r2
1000a3cc:	047feb0e 	bge	zero,r17,1000a37c <__alt_data_end+0xf800a37c>
1000a3d0:	80800917 	ldw	r2,36(r16)
1000a3d4:	81400717 	ldw	r5,28(r16)
1000a3d8:	880f883a 	mov	r7,r17
1000a3dc:	900d883a 	mov	r6,r18
1000a3e0:	9809883a 	mov	r4,r19
1000a3e4:	103ee83a 	callr	r2
1000a3e8:	88a3c83a 	sub	r17,r17,r2
1000a3ec:	00bff616 	blt	zero,r2,1000a3c8 <__alt_data_end+0xf800a3c8>
1000a3f0:	80c0030b 	ldhu	r3,12(r16)
1000a3f4:	00bfffc4 	movi	r2,-1
1000a3f8:	18c01014 	ori	r3,r3,64
1000a3fc:	80c0030d 	sth	r3,12(r16)
1000a400:	003fdf06 	br	1000a380 <__alt_data_end+0xf800a380>
1000a404:	000a8480 	call	1000a848 <__sinit>
1000a408:	003fab06 	br	1000a2b8 <__alt_data_end+0xf800a2b8>
1000a40c:	80800517 	ldw	r2,20(r16)
1000a410:	003fea06 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000a414:	81400717 	ldw	r5,28(r16)
1000a418:	000d883a 	mov	r6,zero
1000a41c:	9809883a 	mov	r4,r19
1000a420:	01c00044 	movi	r7,1
1000a424:	403ee83a 	callr	r8
1000a428:	100d883a 	mov	r6,r2
1000a42c:	00bfffc4 	movi	r2,-1
1000a430:	30801326 	beq	r6,r2,1000a480 <_fflush_r+0x1f4>
1000a434:	8080030b 	ldhu	r2,12(r16)
1000a438:	82000a17 	ldw	r8,40(r16)
1000a43c:	003fb006 	br	1000a300 <__alt_data_end+0xf800a300>
1000a440:	80c00f17 	ldw	r3,60(r16)
1000a444:	00ffa716 	blt	zero,r3,1000a2e4 <__alt_data_end+0xf800a2e4>
1000a448:	003fcc06 	br	1000a37c <__alt_data_end+0xf800a37c>
1000a44c:	98c00017 	ldw	r3,0(r19)
1000a450:	183fb926 	beq	r3,zero,1000a338 <__alt_data_end+0xf800a338>
1000a454:	01000744 	movi	r4,29
1000a458:	19000226 	beq	r3,r4,1000a464 <_fflush_r+0x1d8>
1000a45c:	01000584 	movi	r4,22
1000a460:	1900101e 	bne	r3,r4,1000a4a4 <_fflush_r+0x218>
1000a464:	8080030b 	ldhu	r2,12(r16)
1000a468:	80c00417 	ldw	r3,16(r16)
1000a46c:	80000115 	stw	zero,4(r16)
1000a470:	10bdffcc 	andi	r2,r2,63487
1000a474:	8080030d 	sth	r2,12(r16)
1000a478:	80c00015 	stw	r3,0(r16)
1000a47c:	003fb706 	br	1000a35c <__alt_data_end+0xf800a35c>
1000a480:	98800017 	ldw	r2,0(r19)
1000a484:	103feb26 	beq	r2,zero,1000a434 <__alt_data_end+0xf800a434>
1000a488:	00c00744 	movi	r3,29
1000a48c:	10c00226 	beq	r2,r3,1000a498 <_fflush_r+0x20c>
1000a490:	00c00584 	movi	r3,22
1000a494:	10ffd61e 	bne	r2,r3,1000a3f0 <__alt_data_end+0xf800a3f0>
1000a498:	9c400015 	stw	r17,0(r19)
1000a49c:	0005883a 	mov	r2,zero
1000a4a0:	003fb706 	br	1000a380 <__alt_data_end+0xf800a380>
1000a4a4:	80c0030b 	ldhu	r3,12(r16)
1000a4a8:	18c01014 	ori	r3,r3,64
1000a4ac:	80c0030d 	sth	r3,12(r16)
1000a4b0:	003fb306 	br	1000a380 <__alt_data_end+0xf800a380>

1000a4b4 <fflush>:
1000a4b4:	20000526 	beq	r4,zero,1000a4cc <fflush+0x18>
1000a4b8:	00840074 	movhi	r2,4097
1000a4bc:	108fad04 	addi	r2,r2,16052
1000a4c0:	200b883a 	mov	r5,r4
1000a4c4:	11000017 	ldw	r4,0(r2)
1000a4c8:	000a28c1 	jmpi	1000a28c <_fflush_r>
1000a4cc:	00840074 	movhi	r2,4097
1000a4d0:	108fac04 	addi	r2,r2,16048
1000a4d4:	11000017 	ldw	r4,0(r2)
1000a4d8:	01440074 	movhi	r5,4097
1000a4dc:	2968a304 	addi	r5,r5,-23924
1000a4e0:	000ad641 	jmpi	1000ad64 <_fwalk_reent>

1000a4e4 <__fp_lock>:
1000a4e4:	0005883a 	mov	r2,zero
1000a4e8:	f800283a 	ret

1000a4ec <__fp_unlock>:
1000a4ec:	0005883a 	mov	r2,zero
1000a4f0:	f800283a 	ret

1000a4f4 <_cleanup_r>:
1000a4f4:	01440074 	movhi	r5,4097
1000a4f8:	2979a604 	addi	r5,r5,-6504
1000a4fc:	000acac1 	jmpi	1000acac <_fwalk>

1000a500 <__sinit.part.1>:
1000a500:	defff604 	addi	sp,sp,-40
1000a504:	00c40074 	movhi	r3,4097
1000a508:	dfc00915 	stw	ra,36(sp)
1000a50c:	df000815 	stw	fp,32(sp)
1000a510:	ddc00715 	stw	r23,28(sp)
1000a514:	dd800615 	stw	r22,24(sp)
1000a518:	dd400515 	stw	r21,20(sp)
1000a51c:	dd000415 	stw	r20,16(sp)
1000a520:	dcc00315 	stw	r19,12(sp)
1000a524:	dc800215 	stw	r18,8(sp)
1000a528:	dc400115 	stw	r17,4(sp)
1000a52c:	dc000015 	stw	r16,0(sp)
1000a530:	18e93d04 	addi	r3,r3,-23308
1000a534:	24000117 	ldw	r16,4(r4)
1000a538:	20c00f15 	stw	r3,60(r4)
1000a53c:	07000044 	movi	fp,1
1000a540:	00c000c4 	movi	r3,3
1000a544:	2080bb04 	addi	r2,r4,748
1000a548:	20c0b915 	stw	r3,740(r4)
1000a54c:	27000e15 	stw	fp,56(r4)
1000a550:	2080ba15 	stw	r2,744(r4)
1000a554:	2000b815 	stw	zero,736(r4)
1000a558:	05c00204 	movi	r23,8
1000a55c:	00800104 	movi	r2,4
1000a560:	2025883a 	mov	r18,r4
1000a564:	b80d883a 	mov	r6,r23
1000a568:	81001704 	addi	r4,r16,92
1000a56c:	000b883a 	mov	r5,zero
1000a570:	80000015 	stw	zero,0(r16)
1000a574:	80000115 	stw	zero,4(r16)
1000a578:	80000215 	stw	zero,8(r16)
1000a57c:	8080030d 	sth	r2,12(r16)
1000a580:	80001915 	stw	zero,100(r16)
1000a584:	8000038d 	sth	zero,14(r16)
1000a588:	80000415 	stw	zero,16(r16)
1000a58c:	80000515 	stw	zero,20(r16)
1000a590:	80000615 	stw	zero,24(r16)
1000a594:	000ba7c0 	call	1000ba7c <memset>
1000a598:	05840074 	movhi	r22,4097
1000a59c:	94400217 	ldw	r17,8(r18)
1000a5a0:	05440074 	movhi	r21,4097
1000a5a4:	05040074 	movhi	r20,4097
1000a5a8:	04c40074 	movhi	r19,4097
1000a5ac:	b5b30f04 	addi	r22,r22,-13252
1000a5b0:	ad732604 	addi	r21,r21,-13160
1000a5b4:	a5334504 	addi	r20,r20,-13036
1000a5b8:	9cf35c04 	addi	r19,r19,-12944
1000a5bc:	85800815 	stw	r22,32(r16)
1000a5c0:	85400915 	stw	r21,36(r16)
1000a5c4:	85000a15 	stw	r20,40(r16)
1000a5c8:	84c00b15 	stw	r19,44(r16)
1000a5cc:	84000715 	stw	r16,28(r16)
1000a5d0:	00800284 	movi	r2,10
1000a5d4:	89001704 	addi	r4,r17,92
1000a5d8:	b80d883a 	mov	r6,r23
1000a5dc:	000b883a 	mov	r5,zero
1000a5e0:	88000015 	stw	zero,0(r17)
1000a5e4:	88000115 	stw	zero,4(r17)
1000a5e8:	88000215 	stw	zero,8(r17)
1000a5ec:	8880030d 	sth	r2,12(r17)
1000a5f0:	88001915 	stw	zero,100(r17)
1000a5f4:	8f00038d 	sth	fp,14(r17)
1000a5f8:	88000415 	stw	zero,16(r17)
1000a5fc:	88000515 	stw	zero,20(r17)
1000a600:	88000615 	stw	zero,24(r17)
1000a604:	000ba7c0 	call	1000ba7c <memset>
1000a608:	94000317 	ldw	r16,12(r18)
1000a60c:	00800484 	movi	r2,18
1000a610:	8c400715 	stw	r17,28(r17)
1000a614:	8d800815 	stw	r22,32(r17)
1000a618:	8d400915 	stw	r21,36(r17)
1000a61c:	8d000a15 	stw	r20,40(r17)
1000a620:	8cc00b15 	stw	r19,44(r17)
1000a624:	8080030d 	sth	r2,12(r16)
1000a628:	00800084 	movi	r2,2
1000a62c:	80000015 	stw	zero,0(r16)
1000a630:	80000115 	stw	zero,4(r16)
1000a634:	80000215 	stw	zero,8(r16)
1000a638:	80001915 	stw	zero,100(r16)
1000a63c:	8080038d 	sth	r2,14(r16)
1000a640:	80000415 	stw	zero,16(r16)
1000a644:	80000515 	stw	zero,20(r16)
1000a648:	80000615 	stw	zero,24(r16)
1000a64c:	81001704 	addi	r4,r16,92
1000a650:	000b883a 	mov	r5,zero
1000a654:	b80d883a 	mov	r6,r23
1000a658:	000ba7c0 	call	1000ba7c <memset>
1000a65c:	84000715 	stw	r16,28(r16)
1000a660:	85800815 	stw	r22,32(r16)
1000a664:	85400915 	stw	r21,36(r16)
1000a668:	85000a15 	stw	r20,40(r16)
1000a66c:	84c00b15 	stw	r19,44(r16)
1000a670:	dfc00917 	ldw	ra,36(sp)
1000a674:	df000817 	ldw	fp,32(sp)
1000a678:	ddc00717 	ldw	r23,28(sp)
1000a67c:	dd800617 	ldw	r22,24(sp)
1000a680:	dd400517 	ldw	r21,20(sp)
1000a684:	dd000417 	ldw	r20,16(sp)
1000a688:	dcc00317 	ldw	r19,12(sp)
1000a68c:	dc800217 	ldw	r18,8(sp)
1000a690:	dc400117 	ldw	r17,4(sp)
1000a694:	dc000017 	ldw	r16,0(sp)
1000a698:	dec00a04 	addi	sp,sp,40
1000a69c:	f800283a 	ret

1000a6a0 <__sfmoreglue>:
1000a6a0:	defffc04 	addi	sp,sp,-16
1000a6a4:	dc800215 	stw	r18,8(sp)
1000a6a8:	2825883a 	mov	r18,r5
1000a6ac:	dc000015 	stw	r16,0(sp)
1000a6b0:	01401a04 	movi	r5,104
1000a6b4:	2021883a 	mov	r16,r4
1000a6b8:	9009883a 	mov	r4,r18
1000a6bc:	dfc00315 	stw	ra,12(sp)
1000a6c0:	dc400115 	stw	r17,4(sp)
1000a6c4:	0003dd40 	call	10003dd4 <__mulsi3>
1000a6c8:	8009883a 	mov	r4,r16
1000a6cc:	11400304 	addi	r5,r2,12
1000a6d0:	1023883a 	mov	r17,r2
1000a6d4:	000b0b40 	call	1000b0b4 <_malloc_r>
1000a6d8:	1021883a 	mov	r16,r2
1000a6dc:	10000726 	beq	r2,zero,1000a6fc <__sfmoreglue+0x5c>
1000a6e0:	11000304 	addi	r4,r2,12
1000a6e4:	10000015 	stw	zero,0(r2)
1000a6e8:	14800115 	stw	r18,4(r2)
1000a6ec:	11000215 	stw	r4,8(r2)
1000a6f0:	000b883a 	mov	r5,zero
1000a6f4:	880d883a 	mov	r6,r17
1000a6f8:	000ba7c0 	call	1000ba7c <memset>
1000a6fc:	8005883a 	mov	r2,r16
1000a700:	dfc00317 	ldw	ra,12(sp)
1000a704:	dc800217 	ldw	r18,8(sp)
1000a708:	dc400117 	ldw	r17,4(sp)
1000a70c:	dc000017 	ldw	r16,0(sp)
1000a710:	dec00404 	addi	sp,sp,16
1000a714:	f800283a 	ret

1000a718 <__sfp>:
1000a718:	00840074 	movhi	r2,4097
1000a71c:	defffb04 	addi	sp,sp,-20
1000a720:	108fac04 	addi	r2,r2,16048
1000a724:	dc800215 	stw	r18,8(sp)
1000a728:	14800017 	ldw	r18,0(r2)
1000a72c:	dcc00315 	stw	r19,12(sp)
1000a730:	dfc00415 	stw	ra,16(sp)
1000a734:	90800e17 	ldw	r2,56(r18)
1000a738:	dc400115 	stw	r17,4(sp)
1000a73c:	dc000015 	stw	r16,0(sp)
1000a740:	2027883a 	mov	r19,r4
1000a744:	1000021e 	bne	r2,zero,1000a750 <__sfp+0x38>
1000a748:	9009883a 	mov	r4,r18
1000a74c:	000a5000 	call	1000a500 <__sinit.part.1>
1000a750:	9480b804 	addi	r18,r18,736
1000a754:	047fffc4 	movi	r17,-1
1000a758:	91400117 	ldw	r5,4(r18)
1000a75c:	94000217 	ldw	r16,8(r18)
1000a760:	297fffc4 	addi	r5,r5,-1
1000a764:	28000a16 	blt	r5,zero,1000a790 <__sfp+0x78>
1000a768:	8080030f 	ldh	r2,12(r16)
1000a76c:	10000c26 	beq	r2,zero,1000a7a0 <__sfp+0x88>
1000a770:	80c01d04 	addi	r3,r16,116
1000a774:	00000206 	br	1000a780 <__sfp+0x68>
1000a778:	18bfe60f 	ldh	r2,-104(r3)
1000a77c:	10000826 	beq	r2,zero,1000a7a0 <__sfp+0x88>
1000a780:	297fffc4 	addi	r5,r5,-1
1000a784:	1c3ffd04 	addi	r16,r3,-12
1000a788:	18c01a04 	addi	r3,r3,104
1000a78c:	2c7ffa1e 	bne	r5,r17,1000a778 <__alt_data_end+0xf800a778>
1000a790:	90800017 	ldw	r2,0(r18)
1000a794:	10001d26 	beq	r2,zero,1000a80c <__sfp+0xf4>
1000a798:	1025883a 	mov	r18,r2
1000a79c:	003fee06 	br	1000a758 <__alt_data_end+0xf800a758>
1000a7a0:	00bfffc4 	movi	r2,-1
1000a7a4:	8080038d 	sth	r2,14(r16)
1000a7a8:	00800044 	movi	r2,1
1000a7ac:	8080030d 	sth	r2,12(r16)
1000a7b0:	80001915 	stw	zero,100(r16)
1000a7b4:	80000015 	stw	zero,0(r16)
1000a7b8:	80000215 	stw	zero,8(r16)
1000a7bc:	80000115 	stw	zero,4(r16)
1000a7c0:	80000415 	stw	zero,16(r16)
1000a7c4:	80000515 	stw	zero,20(r16)
1000a7c8:	80000615 	stw	zero,24(r16)
1000a7cc:	81001704 	addi	r4,r16,92
1000a7d0:	000b883a 	mov	r5,zero
1000a7d4:	01800204 	movi	r6,8
1000a7d8:	000ba7c0 	call	1000ba7c <memset>
1000a7dc:	8005883a 	mov	r2,r16
1000a7e0:	80000c15 	stw	zero,48(r16)
1000a7e4:	80000d15 	stw	zero,52(r16)
1000a7e8:	80001115 	stw	zero,68(r16)
1000a7ec:	80001215 	stw	zero,72(r16)
1000a7f0:	dfc00417 	ldw	ra,16(sp)
1000a7f4:	dcc00317 	ldw	r19,12(sp)
1000a7f8:	dc800217 	ldw	r18,8(sp)
1000a7fc:	dc400117 	ldw	r17,4(sp)
1000a800:	dc000017 	ldw	r16,0(sp)
1000a804:	dec00504 	addi	sp,sp,20
1000a808:	f800283a 	ret
1000a80c:	9809883a 	mov	r4,r19
1000a810:	01400104 	movi	r5,4
1000a814:	000a6a00 	call	1000a6a0 <__sfmoreglue>
1000a818:	90800015 	stw	r2,0(r18)
1000a81c:	103fde1e 	bne	r2,zero,1000a798 <__alt_data_end+0xf800a798>
1000a820:	00800304 	movi	r2,12
1000a824:	98800015 	stw	r2,0(r19)
1000a828:	0005883a 	mov	r2,zero
1000a82c:	003ff006 	br	1000a7f0 <__alt_data_end+0xf800a7f0>

1000a830 <_cleanup>:
1000a830:	00840074 	movhi	r2,4097
1000a834:	108fac04 	addi	r2,r2,16048
1000a838:	11000017 	ldw	r4,0(r2)
1000a83c:	01440074 	movhi	r5,4097
1000a840:	2979a604 	addi	r5,r5,-6504
1000a844:	000acac1 	jmpi	1000acac <_fwalk>

1000a848 <__sinit>:
1000a848:	20800e17 	ldw	r2,56(r4)
1000a84c:	10000126 	beq	r2,zero,1000a854 <__sinit+0xc>
1000a850:	f800283a 	ret
1000a854:	000a5001 	jmpi	1000a500 <__sinit.part.1>

1000a858 <__sfp_lock_acquire>:
1000a858:	f800283a 	ret

1000a85c <__sfp_lock_release>:
1000a85c:	f800283a 	ret

1000a860 <__sinit_lock_acquire>:
1000a860:	f800283a 	ret

1000a864 <__sinit_lock_release>:
1000a864:	f800283a 	ret

1000a868 <__fp_lock_all>:
1000a868:	00840074 	movhi	r2,4097
1000a86c:	108fad04 	addi	r2,r2,16052
1000a870:	11000017 	ldw	r4,0(r2)
1000a874:	01440074 	movhi	r5,4097
1000a878:	29693904 	addi	r5,r5,-23324
1000a87c:	000acac1 	jmpi	1000acac <_fwalk>

1000a880 <__fp_unlock_all>:
1000a880:	00840074 	movhi	r2,4097
1000a884:	108fad04 	addi	r2,r2,16052
1000a888:	11000017 	ldw	r4,0(r2)
1000a88c:	01440074 	movhi	r5,4097
1000a890:	29693b04 	addi	r5,r5,-23316
1000a894:	000acac1 	jmpi	1000acac <_fwalk>

1000a898 <_malloc_trim_r>:
1000a898:	defffb04 	addi	sp,sp,-20
1000a89c:	dcc00315 	stw	r19,12(sp)
1000a8a0:	04c40074 	movhi	r19,4097
1000a8a4:	dc800215 	stw	r18,8(sp)
1000a8a8:	dc400115 	stw	r17,4(sp)
1000a8ac:	dc000015 	stw	r16,0(sp)
1000a8b0:	dfc00415 	stw	ra,16(sp)
1000a8b4:	2821883a 	mov	r16,r5
1000a8b8:	9cca2704 	addi	r19,r19,10396
1000a8bc:	2025883a 	mov	r18,r4
1000a8c0:	000fedc0 	call	1000fedc <__malloc_lock>
1000a8c4:	98800217 	ldw	r2,8(r19)
1000a8c8:	14400117 	ldw	r17,4(r2)
1000a8cc:	00bfff04 	movi	r2,-4
1000a8d0:	88a2703a 	and	r17,r17,r2
1000a8d4:	8c21c83a 	sub	r16,r17,r16
1000a8d8:	8403fbc4 	addi	r16,r16,4079
1000a8dc:	8020d33a 	srli	r16,r16,12
1000a8e0:	0083ffc4 	movi	r2,4095
1000a8e4:	843fffc4 	addi	r16,r16,-1
1000a8e8:	8020933a 	slli	r16,r16,12
1000a8ec:	1400060e 	bge	r2,r16,1000a908 <_malloc_trim_r+0x70>
1000a8f0:	9009883a 	mov	r4,r18
1000a8f4:	000b883a 	mov	r5,zero
1000a8f8:	000cbe80 	call	1000cbe8 <_sbrk_r>
1000a8fc:	98c00217 	ldw	r3,8(r19)
1000a900:	1c47883a 	add	r3,r3,r17
1000a904:	10c00a26 	beq	r2,r3,1000a930 <_malloc_trim_r+0x98>
1000a908:	9009883a 	mov	r4,r18
1000a90c:	000fefc0 	call	1000fefc <__malloc_unlock>
1000a910:	0005883a 	mov	r2,zero
1000a914:	dfc00417 	ldw	ra,16(sp)
1000a918:	dcc00317 	ldw	r19,12(sp)
1000a91c:	dc800217 	ldw	r18,8(sp)
1000a920:	dc400117 	ldw	r17,4(sp)
1000a924:	dc000017 	ldw	r16,0(sp)
1000a928:	dec00504 	addi	sp,sp,20
1000a92c:	f800283a 	ret
1000a930:	9009883a 	mov	r4,r18
1000a934:	040bc83a 	sub	r5,zero,r16
1000a938:	000cbe80 	call	1000cbe8 <_sbrk_r>
1000a93c:	00ffffc4 	movi	r3,-1
1000a940:	10c00d26 	beq	r2,r3,1000a978 <_malloc_trim_r+0xe0>
1000a944:	00c40074 	movhi	r3,4097
1000a948:	18d68604 	addi	r3,r3,23064
1000a94c:	18800017 	ldw	r2,0(r3)
1000a950:	99000217 	ldw	r4,8(r19)
1000a954:	8c23c83a 	sub	r17,r17,r16
1000a958:	8c400054 	ori	r17,r17,1
1000a95c:	1421c83a 	sub	r16,r2,r16
1000a960:	24400115 	stw	r17,4(r4)
1000a964:	9009883a 	mov	r4,r18
1000a968:	1c000015 	stw	r16,0(r3)
1000a96c:	000fefc0 	call	1000fefc <__malloc_unlock>
1000a970:	00800044 	movi	r2,1
1000a974:	003fe706 	br	1000a914 <__alt_data_end+0xf800a914>
1000a978:	9009883a 	mov	r4,r18
1000a97c:	000b883a 	mov	r5,zero
1000a980:	000cbe80 	call	1000cbe8 <_sbrk_r>
1000a984:	99000217 	ldw	r4,8(r19)
1000a988:	014003c4 	movi	r5,15
1000a98c:	1107c83a 	sub	r3,r2,r4
1000a990:	28ffdd0e 	bge	r5,r3,1000a908 <__alt_data_end+0xf800a908>
1000a994:	01440074 	movhi	r5,4097
1000a998:	294faf04 	addi	r5,r5,16060
1000a99c:	29400017 	ldw	r5,0(r5)
1000a9a0:	18c00054 	ori	r3,r3,1
1000a9a4:	20c00115 	stw	r3,4(r4)
1000a9a8:	00c40074 	movhi	r3,4097
1000a9ac:	1145c83a 	sub	r2,r2,r5
1000a9b0:	18d68604 	addi	r3,r3,23064
1000a9b4:	18800015 	stw	r2,0(r3)
1000a9b8:	003fd306 	br	1000a908 <__alt_data_end+0xf800a908>

1000a9bc <_free_r>:
1000a9bc:	28004c26 	beq	r5,zero,1000aaf0 <_free_r+0x134>
1000a9c0:	defffd04 	addi	sp,sp,-12
1000a9c4:	dc400115 	stw	r17,4(sp)
1000a9c8:	dc000015 	stw	r16,0(sp)
1000a9cc:	2023883a 	mov	r17,r4
1000a9d0:	2821883a 	mov	r16,r5
1000a9d4:	dfc00215 	stw	ra,8(sp)
1000a9d8:	000fedc0 	call	1000fedc <__malloc_lock>
1000a9dc:	813fff17 	ldw	r4,-4(r16)
1000a9e0:	00bfff84 	movi	r2,-2
1000a9e4:	02440074 	movhi	r9,4097
1000a9e8:	81bffe04 	addi	r6,r16,-8
1000a9ec:	2084703a 	and	r2,r4,r2
1000a9f0:	4a4a2704 	addi	r9,r9,10396
1000a9f4:	308b883a 	add	r5,r6,r2
1000a9f8:	2a000117 	ldw	r8,4(r5)
1000a9fc:	49c00217 	ldw	r7,8(r9)
1000aa00:	00ffff04 	movi	r3,-4
1000aa04:	40c6703a 	and	r3,r8,r3
1000aa08:	39405326 	beq	r7,r5,1000ab58 <_free_r+0x19c>
1000aa0c:	28c00115 	stw	r3,4(r5)
1000aa10:	2100004c 	andi	r4,r4,1
1000aa14:	2000091e 	bne	r4,zero,1000aa3c <_free_r+0x80>
1000aa18:	81fffe17 	ldw	r7,-8(r16)
1000aa1c:	4a000204 	addi	r8,r9,8
1000aa20:	31cdc83a 	sub	r6,r6,r7
1000aa24:	31000217 	ldw	r4,8(r6)
1000aa28:	11c5883a 	add	r2,r2,r7
1000aa2c:	22006126 	beq	r4,r8,1000abb4 <_free_r+0x1f8>
1000aa30:	31c00317 	ldw	r7,12(r6)
1000aa34:	21c00315 	stw	r7,12(r4)
1000aa38:	39000215 	stw	r4,8(r7)
1000aa3c:	28c9883a 	add	r4,r5,r3
1000aa40:	21c00117 	ldw	r7,4(r4)
1000aa44:	39c0004c 	andi	r7,r7,1
1000aa48:	38000d1e 	bne	r7,zero,1000aa80 <_free_r+0xc4>
1000aa4c:	29000217 	ldw	r4,8(r5)
1000aa50:	10c5883a 	add	r2,r2,r3
1000aa54:	00c40074 	movhi	r3,4097
1000aa58:	18ca2904 	addi	r3,r3,10404
1000aa5c:	20c07526 	beq	r4,r3,1000ac34 <_free_r+0x278>
1000aa60:	29c00317 	ldw	r7,12(r5)
1000aa64:	11400054 	ori	r5,r2,1
1000aa68:	3087883a 	add	r3,r6,r2
1000aa6c:	21c00315 	stw	r7,12(r4)
1000aa70:	39000215 	stw	r4,8(r7)
1000aa74:	31400115 	stw	r5,4(r6)
1000aa78:	18800015 	stw	r2,0(r3)
1000aa7c:	00000406 	br	1000aa90 <_free_r+0xd4>
1000aa80:	10c00054 	ori	r3,r2,1
1000aa84:	30c00115 	stw	r3,4(r6)
1000aa88:	3087883a 	add	r3,r6,r2
1000aa8c:	18800015 	stw	r2,0(r3)
1000aa90:	00c07fc4 	movi	r3,511
1000aa94:	18801736 	bltu	r3,r2,1000aaf4 <_free_r+0x138>
1000aa98:	1004d0fa 	srli	r2,r2,3
1000aa9c:	01400044 	movi	r5,1
1000aaa0:	49000117 	ldw	r4,4(r9)
1000aaa4:	1087883a 	add	r3,r2,r2
1000aaa8:	18c7883a 	add	r3,r3,r3
1000aaac:	1005d0ba 	srai	r2,r2,2
1000aab0:	18c7883a 	add	r3,r3,r3
1000aab4:	1a47883a 	add	r3,r3,r9
1000aab8:	19c00217 	ldw	r7,8(r3)
1000aabc:	2884983a 	sll	r2,r5,r2
1000aac0:	30c00315 	stw	r3,12(r6)
1000aac4:	31c00215 	stw	r7,8(r6)
1000aac8:	1104b03a 	or	r2,r2,r4
1000aacc:	19800215 	stw	r6,8(r3)
1000aad0:	48800115 	stw	r2,4(r9)
1000aad4:	39800315 	stw	r6,12(r7)
1000aad8:	8809883a 	mov	r4,r17
1000aadc:	dfc00217 	ldw	ra,8(sp)
1000aae0:	dc400117 	ldw	r17,4(sp)
1000aae4:	dc000017 	ldw	r16,0(sp)
1000aae8:	dec00304 	addi	sp,sp,12
1000aaec:	000fefc1 	jmpi	1000fefc <__malloc_unlock>
1000aaf0:	f800283a 	ret
1000aaf4:	1006d27a 	srli	r3,r2,9
1000aaf8:	01000104 	movi	r4,4
1000aafc:	20c04036 	bltu	r4,r3,1000ac00 <_free_r+0x244>
1000ab00:	1006d1ba 	srli	r3,r2,6
1000ab04:	19400e04 	addi	r5,r3,56
1000ab08:	2947883a 	add	r3,r5,r5
1000ab0c:	18c7883a 	add	r3,r3,r3
1000ab10:	18c7883a 	add	r3,r3,r3
1000ab14:	1a49883a 	add	r4,r3,r9
1000ab18:	20c00217 	ldw	r3,8(r4)
1000ab1c:	01c40074 	movhi	r7,4097
1000ab20:	39ca2704 	addi	r7,r7,10396
1000ab24:	19003b26 	beq	r3,r4,1000ac14 <_free_r+0x258>
1000ab28:	01ffff04 	movi	r7,-4
1000ab2c:	19400117 	ldw	r5,4(r3)
1000ab30:	29ca703a 	and	r5,r5,r7
1000ab34:	1140022e 	bgeu	r2,r5,1000ab40 <_free_r+0x184>
1000ab38:	18c00217 	ldw	r3,8(r3)
1000ab3c:	20fffb1e 	bne	r4,r3,1000ab2c <__alt_data_end+0xf800ab2c>
1000ab40:	18800317 	ldw	r2,12(r3)
1000ab44:	30800315 	stw	r2,12(r6)
1000ab48:	30c00215 	stw	r3,8(r6)
1000ab4c:	11800215 	stw	r6,8(r2)
1000ab50:	19800315 	stw	r6,12(r3)
1000ab54:	003fe006 	br	1000aad8 <__alt_data_end+0xf800aad8>
1000ab58:	2100004c 	andi	r4,r4,1
1000ab5c:	1885883a 	add	r2,r3,r2
1000ab60:	2000071e 	bne	r4,zero,1000ab80 <_free_r+0x1c4>
1000ab64:	817ffe17 	ldw	r5,-8(r16)
1000ab68:	314dc83a 	sub	r6,r6,r5
1000ab6c:	30c00317 	ldw	r3,12(r6)
1000ab70:	31000217 	ldw	r4,8(r6)
1000ab74:	1145883a 	add	r2,r2,r5
1000ab78:	20c00315 	stw	r3,12(r4)
1000ab7c:	19000215 	stw	r4,8(r3)
1000ab80:	10c00054 	ori	r3,r2,1
1000ab84:	30c00115 	stw	r3,4(r6)
1000ab88:	00c40074 	movhi	r3,4097
1000ab8c:	18cfb004 	addi	r3,r3,16064
1000ab90:	18c00017 	ldw	r3,0(r3)
1000ab94:	49800215 	stw	r6,8(r9)
1000ab98:	10ffcf36 	bltu	r2,r3,1000aad8 <__alt_data_end+0xf800aad8>
1000ab9c:	00840074 	movhi	r2,4097
1000aba0:	10967d04 	addi	r2,r2,23028
1000aba4:	11400017 	ldw	r5,0(r2)
1000aba8:	8809883a 	mov	r4,r17
1000abac:	000a8980 	call	1000a898 <_malloc_trim_r>
1000abb0:	003fc906 	br	1000aad8 <__alt_data_end+0xf800aad8>
1000abb4:	28c9883a 	add	r4,r5,r3
1000abb8:	21000117 	ldw	r4,4(r4)
1000abbc:	2100004c 	andi	r4,r4,1
1000abc0:	20000a1e 	bne	r4,zero,1000abec <_free_r+0x230>
1000abc4:	29000317 	ldw	r4,12(r5)
1000abc8:	29400217 	ldw	r5,8(r5)
1000abcc:	10c5883a 	add	r2,r2,r3
1000abd0:	10c00054 	ori	r3,r2,1
1000abd4:	29000315 	stw	r4,12(r5)
1000abd8:	21400215 	stw	r5,8(r4)
1000abdc:	30c00115 	stw	r3,4(r6)
1000abe0:	308d883a 	add	r6,r6,r2
1000abe4:	30800015 	stw	r2,0(r6)
1000abe8:	003fbb06 	br	1000aad8 <__alt_data_end+0xf800aad8>
1000abec:	10c00054 	ori	r3,r2,1
1000abf0:	30c00115 	stw	r3,4(r6)
1000abf4:	308d883a 	add	r6,r6,r2
1000abf8:	30800015 	stw	r2,0(r6)
1000abfc:	003fb606 	br	1000aad8 <__alt_data_end+0xf800aad8>
1000ac00:	01000504 	movi	r4,20
1000ac04:	20c01436 	bltu	r4,r3,1000ac58 <_free_r+0x29c>
1000ac08:	194016c4 	addi	r5,r3,91
1000ac0c:	2947883a 	add	r3,r5,r5
1000ac10:	003fbe06 	br	1000ab0c <__alt_data_end+0xf800ab0c>
1000ac14:	280bd0ba 	srai	r5,r5,2
1000ac18:	00800044 	movi	r2,1
1000ac1c:	39000117 	ldw	r4,4(r7)
1000ac20:	114a983a 	sll	r5,r2,r5
1000ac24:	1805883a 	mov	r2,r3
1000ac28:	2908b03a 	or	r4,r5,r4
1000ac2c:	39000115 	stw	r4,4(r7)
1000ac30:	003fc406 	br	1000ab44 <__alt_data_end+0xf800ab44>
1000ac34:	49800515 	stw	r6,20(r9)
1000ac38:	49800415 	stw	r6,16(r9)
1000ac3c:	10c00054 	ori	r3,r2,1
1000ac40:	31000315 	stw	r4,12(r6)
1000ac44:	31000215 	stw	r4,8(r6)
1000ac48:	30c00115 	stw	r3,4(r6)
1000ac4c:	308d883a 	add	r6,r6,r2
1000ac50:	30800015 	stw	r2,0(r6)
1000ac54:	003fa006 	br	1000aad8 <__alt_data_end+0xf800aad8>
1000ac58:	01001504 	movi	r4,84
1000ac5c:	20c00436 	bltu	r4,r3,1000ac70 <_free_r+0x2b4>
1000ac60:	1006d33a 	srli	r3,r2,12
1000ac64:	19401b84 	addi	r5,r3,110
1000ac68:	2947883a 	add	r3,r5,r5
1000ac6c:	003fa706 	br	1000ab0c <__alt_data_end+0xf800ab0c>
1000ac70:	01005504 	movi	r4,340
1000ac74:	20c00436 	bltu	r4,r3,1000ac88 <_free_r+0x2cc>
1000ac78:	1006d3fa 	srli	r3,r2,15
1000ac7c:	19401dc4 	addi	r5,r3,119
1000ac80:	2947883a 	add	r3,r5,r5
1000ac84:	003fa106 	br	1000ab0c <__alt_data_end+0xf800ab0c>
1000ac88:	01015504 	movi	r4,1364
1000ac8c:	20c00436 	bltu	r4,r3,1000aca0 <_free_r+0x2e4>
1000ac90:	1006d4ba 	srli	r3,r2,18
1000ac94:	19401f04 	addi	r5,r3,124
1000ac98:	2947883a 	add	r3,r5,r5
1000ac9c:	003f9b06 	br	1000ab0c <__alt_data_end+0xf800ab0c>
1000aca0:	00c03f04 	movi	r3,252
1000aca4:	01401f84 	movi	r5,126
1000aca8:	003f9806 	br	1000ab0c <__alt_data_end+0xf800ab0c>

1000acac <_fwalk>:
1000acac:	defff804 	addi	sp,sp,-32
1000acb0:	dd400515 	stw	r21,20(sp)
1000acb4:	2540b804 	addi	r21,r4,736
1000acb8:	dd800615 	stw	r22,24(sp)
1000acbc:	dd000415 	stw	r20,16(sp)
1000acc0:	dfc00715 	stw	ra,28(sp)
1000acc4:	dcc00315 	stw	r19,12(sp)
1000acc8:	dc800215 	stw	r18,8(sp)
1000accc:	dc400115 	stw	r17,4(sp)
1000acd0:	dc000015 	stw	r16,0(sp)
1000acd4:	2829883a 	mov	r20,r5
1000acd8:	002d883a 	mov	r22,zero
1000acdc:	000a8580 	call	1000a858 <__sfp_lock_acquire>
1000ace0:	a8001426 	beq	r21,zero,1000ad34 <_fwalk+0x88>
1000ace4:	04ffffc4 	movi	r19,-1
1000ace8:	ac400117 	ldw	r17,4(r21)
1000acec:	ac800217 	ldw	r18,8(r21)
1000acf0:	8c7fffc4 	addi	r17,r17,-1
1000acf4:	88000d16 	blt	r17,zero,1000ad2c <_fwalk+0x80>
1000acf8:	94000304 	addi	r16,r18,12
1000acfc:	94800384 	addi	r18,r18,14
1000ad00:	80c0000f 	ldh	r3,0(r16)
1000ad04:	8c7fffc4 	addi	r17,r17,-1
1000ad08:	813ffd04 	addi	r4,r16,-12
1000ad0c:	18000426 	beq	r3,zero,1000ad20 <_fwalk+0x74>
1000ad10:	90c0000f 	ldh	r3,0(r18)
1000ad14:	1cc00226 	beq	r3,r19,1000ad20 <_fwalk+0x74>
1000ad18:	a03ee83a 	callr	r20
1000ad1c:	b0acb03a 	or	r22,r22,r2
1000ad20:	84001a04 	addi	r16,r16,104
1000ad24:	94801a04 	addi	r18,r18,104
1000ad28:	8cfff51e 	bne	r17,r19,1000ad00 <__alt_data_end+0xf800ad00>
1000ad2c:	ad400017 	ldw	r21,0(r21)
1000ad30:	a83fed1e 	bne	r21,zero,1000ace8 <__alt_data_end+0xf800ace8>
1000ad34:	000a85c0 	call	1000a85c <__sfp_lock_release>
1000ad38:	b005883a 	mov	r2,r22
1000ad3c:	dfc00717 	ldw	ra,28(sp)
1000ad40:	dd800617 	ldw	r22,24(sp)
1000ad44:	dd400517 	ldw	r21,20(sp)
1000ad48:	dd000417 	ldw	r20,16(sp)
1000ad4c:	dcc00317 	ldw	r19,12(sp)
1000ad50:	dc800217 	ldw	r18,8(sp)
1000ad54:	dc400117 	ldw	r17,4(sp)
1000ad58:	dc000017 	ldw	r16,0(sp)
1000ad5c:	dec00804 	addi	sp,sp,32
1000ad60:	f800283a 	ret

1000ad64 <_fwalk_reent>:
1000ad64:	defff804 	addi	sp,sp,-32
1000ad68:	dd400515 	stw	r21,20(sp)
1000ad6c:	2540b804 	addi	r21,r4,736
1000ad70:	dd800615 	stw	r22,24(sp)
1000ad74:	dd000415 	stw	r20,16(sp)
1000ad78:	dcc00315 	stw	r19,12(sp)
1000ad7c:	dfc00715 	stw	ra,28(sp)
1000ad80:	dc800215 	stw	r18,8(sp)
1000ad84:	dc400115 	stw	r17,4(sp)
1000ad88:	dc000015 	stw	r16,0(sp)
1000ad8c:	2027883a 	mov	r19,r4
1000ad90:	2829883a 	mov	r20,r5
1000ad94:	002d883a 	mov	r22,zero
1000ad98:	000a8580 	call	1000a858 <__sfp_lock_acquire>
1000ad9c:	a8001326 	beq	r21,zero,1000adec <_fwalk_reent+0x88>
1000ada0:	04bfffc4 	movi	r18,-1
1000ada4:	ac400117 	ldw	r17,4(r21)
1000ada8:	ac000217 	ldw	r16,8(r21)
1000adac:	8c7fffc4 	addi	r17,r17,-1
1000adb0:	88000c16 	blt	r17,zero,1000ade4 <_fwalk_reent+0x80>
1000adb4:	84000304 	addi	r16,r16,12
1000adb8:	80c0000f 	ldh	r3,0(r16)
1000adbc:	8c7fffc4 	addi	r17,r17,-1
1000adc0:	817ffd04 	addi	r5,r16,-12
1000adc4:	18000526 	beq	r3,zero,1000addc <_fwalk_reent+0x78>
1000adc8:	80c0008f 	ldh	r3,2(r16)
1000adcc:	9809883a 	mov	r4,r19
1000add0:	1c800226 	beq	r3,r18,1000addc <_fwalk_reent+0x78>
1000add4:	a03ee83a 	callr	r20
1000add8:	b0acb03a 	or	r22,r22,r2
1000addc:	84001a04 	addi	r16,r16,104
1000ade0:	8cbff51e 	bne	r17,r18,1000adb8 <__alt_data_end+0xf800adb8>
1000ade4:	ad400017 	ldw	r21,0(r21)
1000ade8:	a83fee1e 	bne	r21,zero,1000ada4 <__alt_data_end+0xf800ada4>
1000adec:	000a85c0 	call	1000a85c <__sfp_lock_release>
1000adf0:	b005883a 	mov	r2,r22
1000adf4:	dfc00717 	ldw	ra,28(sp)
1000adf8:	dd800617 	ldw	r22,24(sp)
1000adfc:	dd400517 	ldw	r21,20(sp)
1000ae00:	dd000417 	ldw	r20,16(sp)
1000ae04:	dcc00317 	ldw	r19,12(sp)
1000ae08:	dc800217 	ldw	r18,8(sp)
1000ae0c:	dc400117 	ldw	r17,4(sp)
1000ae10:	dc000017 	ldw	r16,0(sp)
1000ae14:	dec00804 	addi	sp,sp,32
1000ae18:	f800283a 	ret

1000ae1c <_setlocale_r>:
1000ae1c:	30001b26 	beq	r6,zero,1000ae8c <_setlocale_r+0x70>
1000ae20:	01440074 	movhi	r5,4097
1000ae24:	defffe04 	addi	sp,sp,-8
1000ae28:	29489f04 	addi	r5,r5,8828
1000ae2c:	3009883a 	mov	r4,r6
1000ae30:	dc000015 	stw	r16,0(sp)
1000ae34:	dfc00115 	stw	ra,4(sp)
1000ae38:	3021883a 	mov	r16,r6
1000ae3c:	000cd780 	call	1000cd78 <strcmp>
1000ae40:	1000061e 	bne	r2,zero,1000ae5c <_setlocale_r+0x40>
1000ae44:	00840074 	movhi	r2,4097
1000ae48:	10888104 	addi	r2,r2,8708
1000ae4c:	dfc00117 	ldw	ra,4(sp)
1000ae50:	dc000017 	ldw	r16,0(sp)
1000ae54:	dec00204 	addi	sp,sp,8
1000ae58:	f800283a 	ret
1000ae5c:	01440074 	movhi	r5,4097
1000ae60:	29488104 	addi	r5,r5,8708
1000ae64:	8009883a 	mov	r4,r16
1000ae68:	000cd780 	call	1000cd78 <strcmp>
1000ae6c:	103ff526 	beq	r2,zero,1000ae44 <__alt_data_end+0xf800ae44>
1000ae70:	01440074 	movhi	r5,4097
1000ae74:	29488a04 	addi	r5,r5,8744
1000ae78:	8009883a 	mov	r4,r16
1000ae7c:	000cd780 	call	1000cd78 <strcmp>
1000ae80:	103ff026 	beq	r2,zero,1000ae44 <__alt_data_end+0xf800ae44>
1000ae84:	0005883a 	mov	r2,zero
1000ae88:	003ff006 	br	1000ae4c <__alt_data_end+0xf800ae4c>
1000ae8c:	00840074 	movhi	r2,4097
1000ae90:	10888104 	addi	r2,r2,8708
1000ae94:	f800283a 	ret

1000ae98 <__locale_charset>:
1000ae98:	00840074 	movhi	r2,4097
1000ae9c:	108a1104 	addi	r2,r2,10308
1000aea0:	f800283a 	ret

1000aea4 <__locale_mb_cur_max>:
1000aea4:	00840074 	movhi	r2,4097
1000aea8:	108fae04 	addi	r2,r2,16056
1000aeac:	10800017 	ldw	r2,0(r2)
1000aeb0:	f800283a 	ret

1000aeb4 <__locale_msgcharset>:
1000aeb4:	00840074 	movhi	r2,4097
1000aeb8:	108a0904 	addi	r2,r2,10276
1000aebc:	f800283a 	ret

1000aec0 <__locale_cjk_lang>:
1000aec0:	0005883a 	mov	r2,zero
1000aec4:	f800283a 	ret

1000aec8 <_localeconv_r>:
1000aec8:	00840074 	movhi	r2,4097
1000aecc:	108a1904 	addi	r2,r2,10340
1000aed0:	f800283a 	ret

1000aed4 <setlocale>:
1000aed4:	00c40074 	movhi	r3,4097
1000aed8:	18cfad04 	addi	r3,r3,16052
1000aedc:	2005883a 	mov	r2,r4
1000aee0:	19000017 	ldw	r4,0(r3)
1000aee4:	280d883a 	mov	r6,r5
1000aee8:	100b883a 	mov	r5,r2
1000aeec:	000ae1c1 	jmpi	1000ae1c <_setlocale_r>

1000aef0 <localeconv>:
1000aef0:	00840074 	movhi	r2,4097
1000aef4:	108a1904 	addi	r2,r2,10340
1000aef8:	f800283a 	ret

1000aefc <__smakebuf_r>:
1000aefc:	2880030b 	ldhu	r2,12(r5)
1000af00:	10c0008c 	andi	r3,r2,2
1000af04:	1800401e 	bne	r3,zero,1000b008 <__smakebuf_r+0x10c>
1000af08:	deffec04 	addi	sp,sp,-80
1000af0c:	dc000f15 	stw	r16,60(sp)
1000af10:	2821883a 	mov	r16,r5
1000af14:	2940038f 	ldh	r5,14(r5)
1000af18:	dc401015 	stw	r17,64(sp)
1000af1c:	dfc01315 	stw	ra,76(sp)
1000af20:	dcc01215 	stw	r19,72(sp)
1000af24:	dc801115 	stw	r18,68(sp)
1000af28:	2023883a 	mov	r17,r4
1000af2c:	28001b16 	blt	r5,zero,1000af9c <__smakebuf_r+0xa0>
1000af30:	d80d883a 	mov	r6,sp
1000af34:	000e8880 	call	1000e888 <_fstat_r>
1000af38:	10001716 	blt	r2,zero,1000af98 <__smakebuf_r+0x9c>
1000af3c:	d8800117 	ldw	r2,4(sp)
1000af40:	00e00014 	movui	r3,32768
1000af44:	10bc000c 	andi	r2,r2,61440
1000af48:	10c03726 	beq	r2,r3,1000b028 <__smakebuf_r+0x12c>
1000af4c:	80c0030b 	ldhu	r3,12(r16)
1000af50:	18c20014 	ori	r3,r3,2048
1000af54:	80c0030d 	sth	r3,12(r16)
1000af58:	00c80004 	movi	r3,8192
1000af5c:	10c03c1e 	bne	r2,r3,1000b050 <__smakebuf_r+0x154>
1000af60:	8140038f 	ldh	r5,14(r16)
1000af64:	8809883a 	mov	r4,r17
1000af68:	000ed840 	call	1000ed84 <_isatty_r>
1000af6c:	10004e26 	beq	r2,zero,1000b0a8 <__smakebuf_r+0x1ac>
1000af70:	8080030b 	ldhu	r2,12(r16)
1000af74:	04c00044 	movi	r19,1
1000af78:	80c010c4 	addi	r3,r16,67
1000af7c:	14c4b03a 	or	r2,r2,r19
1000af80:	8080030d 	sth	r2,12(r16)
1000af84:	80c00015 	stw	r3,0(r16)
1000af88:	80c00415 	stw	r3,16(r16)
1000af8c:	84c00515 	stw	r19,20(r16)
1000af90:	04810004 	movi	r18,1024
1000af94:	00000706 	br	1000afb4 <__smakebuf_r+0xb8>
1000af98:	8080030b 	ldhu	r2,12(r16)
1000af9c:	10c0200c 	andi	r3,r2,128
1000afa0:	18001f1e 	bne	r3,zero,1000b020 <__smakebuf_r+0x124>
1000afa4:	04810004 	movi	r18,1024
1000afa8:	10820014 	ori	r2,r2,2048
1000afac:	8080030d 	sth	r2,12(r16)
1000afb0:	0027883a 	mov	r19,zero
1000afb4:	8809883a 	mov	r4,r17
1000afb8:	900b883a 	mov	r5,r18
1000afbc:	000b0b40 	call	1000b0b4 <_malloc_r>
1000afc0:	10002e26 	beq	r2,zero,1000b07c <__smakebuf_r+0x180>
1000afc4:	80c0030b 	ldhu	r3,12(r16)
1000afc8:	01040074 	movhi	r4,4097
1000afcc:	21293d04 	addi	r4,r4,-23308
1000afd0:	89000f15 	stw	r4,60(r17)
1000afd4:	18c02014 	ori	r3,r3,128
1000afd8:	80c0030d 	sth	r3,12(r16)
1000afdc:	80800015 	stw	r2,0(r16)
1000afe0:	80800415 	stw	r2,16(r16)
1000afe4:	84800515 	stw	r18,20(r16)
1000afe8:	98001c1e 	bne	r19,zero,1000b05c <__smakebuf_r+0x160>
1000afec:	dfc01317 	ldw	ra,76(sp)
1000aff0:	dcc01217 	ldw	r19,72(sp)
1000aff4:	dc801117 	ldw	r18,68(sp)
1000aff8:	dc401017 	ldw	r17,64(sp)
1000affc:	dc000f17 	ldw	r16,60(sp)
1000b000:	dec01404 	addi	sp,sp,80
1000b004:	f800283a 	ret
1000b008:	288010c4 	addi	r2,r5,67
1000b00c:	28800015 	stw	r2,0(r5)
1000b010:	28800415 	stw	r2,16(r5)
1000b014:	00800044 	movi	r2,1
1000b018:	28800515 	stw	r2,20(r5)
1000b01c:	f800283a 	ret
1000b020:	04801004 	movi	r18,64
1000b024:	003fe006 	br	1000afa8 <__alt_data_end+0xf800afa8>
1000b028:	81000a17 	ldw	r4,40(r16)
1000b02c:	00c40074 	movhi	r3,4097
1000b030:	18f34504 	addi	r3,r3,-13036
1000b034:	20ffc51e 	bne	r4,r3,1000af4c <__alt_data_end+0xf800af4c>
1000b038:	80c0030b 	ldhu	r3,12(r16)
1000b03c:	01010004 	movi	r4,1024
1000b040:	81001315 	stw	r4,76(r16)
1000b044:	1906b03a 	or	r3,r3,r4
1000b048:	80c0030d 	sth	r3,12(r16)
1000b04c:	003fc206 	br	1000af58 <__alt_data_end+0xf800af58>
1000b050:	0027883a 	mov	r19,zero
1000b054:	04810004 	movi	r18,1024
1000b058:	003fd606 	br	1000afb4 <__alt_data_end+0xf800afb4>
1000b05c:	8140038f 	ldh	r5,14(r16)
1000b060:	8809883a 	mov	r4,r17
1000b064:	000ed840 	call	1000ed84 <_isatty_r>
1000b068:	103fe026 	beq	r2,zero,1000afec <__alt_data_end+0xf800afec>
1000b06c:	8080030b 	ldhu	r2,12(r16)
1000b070:	10800054 	ori	r2,r2,1
1000b074:	8080030d 	sth	r2,12(r16)
1000b078:	003fdc06 	br	1000afec <__alt_data_end+0xf800afec>
1000b07c:	8080030b 	ldhu	r2,12(r16)
1000b080:	10c0800c 	andi	r3,r2,512
1000b084:	183fd91e 	bne	r3,zero,1000afec <__alt_data_end+0xf800afec>
1000b088:	10800094 	ori	r2,r2,2
1000b08c:	80c010c4 	addi	r3,r16,67
1000b090:	8080030d 	sth	r2,12(r16)
1000b094:	00800044 	movi	r2,1
1000b098:	80c00015 	stw	r3,0(r16)
1000b09c:	80c00415 	stw	r3,16(r16)
1000b0a0:	80800515 	stw	r2,20(r16)
1000b0a4:	003fd106 	br	1000afec <__alt_data_end+0xf800afec>
1000b0a8:	04c00044 	movi	r19,1
1000b0ac:	04810004 	movi	r18,1024
1000b0b0:	003fc006 	br	1000afb4 <__alt_data_end+0xf800afb4>

1000b0b4 <_malloc_r>:
1000b0b4:	defff504 	addi	sp,sp,-44
1000b0b8:	dc800315 	stw	r18,12(sp)
1000b0bc:	dfc00a15 	stw	ra,40(sp)
1000b0c0:	df000915 	stw	fp,36(sp)
1000b0c4:	ddc00815 	stw	r23,32(sp)
1000b0c8:	dd800715 	stw	r22,28(sp)
1000b0cc:	dd400615 	stw	r21,24(sp)
1000b0d0:	dd000515 	stw	r20,20(sp)
1000b0d4:	dcc00415 	stw	r19,16(sp)
1000b0d8:	dc400215 	stw	r17,8(sp)
1000b0dc:	dc000115 	stw	r16,4(sp)
1000b0e0:	288002c4 	addi	r2,r5,11
1000b0e4:	00c00584 	movi	r3,22
1000b0e8:	2025883a 	mov	r18,r4
1000b0ec:	18802a2e 	bgeu	r3,r2,1000b198 <_malloc_r+0xe4>
1000b0f0:	047ffe04 	movi	r17,-8
1000b0f4:	1462703a 	and	r17,r2,r17
1000b0f8:	88009e16 	blt	r17,zero,1000b374 <_malloc_r+0x2c0>
1000b0fc:	89409d36 	bltu	r17,r5,1000b374 <_malloc_r+0x2c0>
1000b100:	000fedc0 	call	1000fedc <__malloc_lock>
1000b104:	00807dc4 	movi	r2,503
1000b108:	14402736 	bltu	r2,r17,1000b1a8 <_malloc_r+0xf4>
1000b10c:	8806d0fa 	srli	r3,r17,3
1000b110:	04c40074 	movhi	r19,4097
1000b114:	9cca2704 	addi	r19,r19,10396
1000b118:	18c5883a 	add	r2,r3,r3
1000b11c:	1085883a 	add	r2,r2,r2
1000b120:	1085883a 	add	r2,r2,r2
1000b124:	9885883a 	add	r2,r19,r2
1000b128:	14000317 	ldw	r16,12(r2)
1000b12c:	80814a26 	beq	r16,r2,1000b658 <_malloc_r+0x5a4>
1000b130:	80c00117 	ldw	r3,4(r16)
1000b134:	81000317 	ldw	r4,12(r16)
1000b138:	00bfff04 	movi	r2,-4
1000b13c:	1884703a 	and	r2,r3,r2
1000b140:	81400217 	ldw	r5,8(r16)
1000b144:	8085883a 	add	r2,r16,r2
1000b148:	10c00117 	ldw	r3,4(r2)
1000b14c:	29000315 	stw	r4,12(r5)
1000b150:	21400215 	stw	r5,8(r4)
1000b154:	18c00054 	ori	r3,r3,1
1000b158:	10c00115 	stw	r3,4(r2)
1000b15c:	9009883a 	mov	r4,r18
1000b160:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b164:	80800204 	addi	r2,r16,8
1000b168:	dfc00a17 	ldw	ra,40(sp)
1000b16c:	df000917 	ldw	fp,36(sp)
1000b170:	ddc00817 	ldw	r23,32(sp)
1000b174:	dd800717 	ldw	r22,28(sp)
1000b178:	dd400617 	ldw	r21,24(sp)
1000b17c:	dd000517 	ldw	r20,20(sp)
1000b180:	dcc00417 	ldw	r19,16(sp)
1000b184:	dc800317 	ldw	r18,12(sp)
1000b188:	dc400217 	ldw	r17,8(sp)
1000b18c:	dc000117 	ldw	r16,4(sp)
1000b190:	dec00b04 	addi	sp,sp,44
1000b194:	f800283a 	ret
1000b198:	04400404 	movi	r17,16
1000b19c:	89407536 	bltu	r17,r5,1000b374 <_malloc_r+0x2c0>
1000b1a0:	000fedc0 	call	1000fedc <__malloc_lock>
1000b1a4:	003fd906 	br	1000b10c <__alt_data_end+0xf800b10c>
1000b1a8:	8806d27a 	srli	r3,r17,9
1000b1ac:	18007526 	beq	r3,zero,1000b384 <_malloc_r+0x2d0>
1000b1b0:	00800104 	movi	r2,4
1000b1b4:	10c0ef36 	bltu	r2,r3,1000b574 <_malloc_r+0x4c0>
1000b1b8:	8806d1ba 	srli	r3,r17,6
1000b1bc:	19c00e04 	addi	r7,r3,56
1000b1c0:	39cb883a 	add	r5,r7,r7
1000b1c4:	04c40074 	movhi	r19,4097
1000b1c8:	294b883a 	add	r5,r5,r5
1000b1cc:	9cca2704 	addi	r19,r19,10396
1000b1d0:	294b883a 	add	r5,r5,r5
1000b1d4:	994b883a 	add	r5,r19,r5
1000b1d8:	2c000317 	ldw	r16,12(r5)
1000b1dc:	2c000e26 	beq	r5,r16,1000b218 <_malloc_r+0x164>
1000b1e0:	80800117 	ldw	r2,4(r16)
1000b1e4:	01bfff04 	movi	r6,-4
1000b1e8:	010003c4 	movi	r4,15
1000b1ec:	1184703a 	and	r2,r2,r6
1000b1f0:	1447c83a 	sub	r3,r2,r17
1000b1f4:	20c00716 	blt	r4,r3,1000b214 <_malloc_r+0x160>
1000b1f8:	1800650e 	bge	r3,zero,1000b390 <_malloc_r+0x2dc>
1000b1fc:	84000317 	ldw	r16,12(r16)
1000b200:	2c000526 	beq	r5,r16,1000b218 <_malloc_r+0x164>
1000b204:	80800117 	ldw	r2,4(r16)
1000b208:	1184703a 	and	r2,r2,r6
1000b20c:	1447c83a 	sub	r3,r2,r17
1000b210:	20fff90e 	bge	r4,r3,1000b1f8 <__alt_data_end+0xf800b1f8>
1000b214:	39ffffc4 	addi	r7,r7,-1
1000b218:	38c00044 	addi	r3,r7,1
1000b21c:	01840074 	movhi	r6,4097
1000b220:	9c000417 	ldw	r16,16(r19)
1000b224:	318a2704 	addi	r6,r6,10396
1000b228:	32400204 	addi	r9,r6,8
1000b22c:	82410326 	beq	r16,r9,1000b63c <_malloc_r+0x588>
1000b230:	81000117 	ldw	r4,4(r16)
1000b234:	00bfff04 	movi	r2,-4
1000b238:	208e703a 	and	r7,r4,r2
1000b23c:	3c45c83a 	sub	r2,r7,r17
1000b240:	010003c4 	movi	r4,15
1000b244:	2080ee16 	blt	r4,r2,1000b600 <_malloc_r+0x54c>
1000b248:	32400515 	stw	r9,20(r6)
1000b24c:	32400415 	stw	r9,16(r6)
1000b250:	1000510e 	bge	r2,zero,1000b398 <_malloc_r+0x2e4>
1000b254:	00807fc4 	movi	r2,511
1000b258:	11c0ce36 	bltu	r2,r7,1000b594 <_malloc_r+0x4e0>
1000b25c:	3808d0fa 	srli	r4,r7,3
1000b260:	01c00044 	movi	r7,1
1000b264:	30800117 	ldw	r2,4(r6)
1000b268:	210b883a 	add	r5,r4,r4
1000b26c:	294b883a 	add	r5,r5,r5
1000b270:	2009d0ba 	srai	r4,r4,2
1000b274:	294b883a 	add	r5,r5,r5
1000b278:	298b883a 	add	r5,r5,r6
1000b27c:	2a000217 	ldw	r8,8(r5)
1000b280:	3908983a 	sll	r4,r7,r4
1000b284:	81400315 	stw	r5,12(r16)
1000b288:	82000215 	stw	r8,8(r16)
1000b28c:	2088b03a 	or	r4,r4,r2
1000b290:	2c000215 	stw	r16,8(r5)
1000b294:	31000115 	stw	r4,4(r6)
1000b298:	44000315 	stw	r16,12(r8)
1000b29c:	1805d0ba 	srai	r2,r3,2
1000b2a0:	01400044 	movi	r5,1
1000b2a4:	288a983a 	sll	r5,r5,r2
1000b2a8:	21404336 	bltu	r4,r5,1000b3b8 <_malloc_r+0x304>
1000b2ac:	2144703a 	and	r2,r4,r5
1000b2b0:	10000a1e 	bne	r2,zero,1000b2dc <_malloc_r+0x228>
1000b2b4:	00bfff04 	movi	r2,-4
1000b2b8:	294b883a 	add	r5,r5,r5
1000b2bc:	1886703a 	and	r3,r3,r2
1000b2c0:	2144703a 	and	r2,r4,r5
1000b2c4:	18c00104 	addi	r3,r3,4
1000b2c8:	1000041e 	bne	r2,zero,1000b2dc <_malloc_r+0x228>
1000b2cc:	294b883a 	add	r5,r5,r5
1000b2d0:	2144703a 	and	r2,r4,r5
1000b2d4:	18c00104 	addi	r3,r3,4
1000b2d8:	103ffc26 	beq	r2,zero,1000b2cc <__alt_data_end+0xf800b2cc>
1000b2dc:	023fff04 	movi	r8,-4
1000b2e0:	01c003c4 	movi	r7,15
1000b2e4:	18c5883a 	add	r2,r3,r3
1000b2e8:	1085883a 	add	r2,r2,r2
1000b2ec:	1085883a 	add	r2,r2,r2
1000b2f0:	9895883a 	add	r10,r19,r2
1000b2f4:	52c00304 	addi	r11,r10,12
1000b2f8:	1819883a 	mov	r12,r3
1000b2fc:	5c000017 	ldw	r16,0(r11)
1000b300:	59bffd04 	addi	r6,r11,-12
1000b304:	8180041e 	bne	r16,r6,1000b318 <_malloc_r+0x264>
1000b308:	0000ce06 	br	1000b644 <_malloc_r+0x590>
1000b30c:	2000d70e 	bge	r4,zero,1000b66c <_malloc_r+0x5b8>
1000b310:	84000317 	ldw	r16,12(r16)
1000b314:	8180cb26 	beq	r16,r6,1000b644 <_malloc_r+0x590>
1000b318:	80800117 	ldw	r2,4(r16)
1000b31c:	1204703a 	and	r2,r2,r8
1000b320:	1449c83a 	sub	r4,r2,r17
1000b324:	393ff90e 	bge	r7,r4,1000b30c <__alt_data_end+0xf800b30c>
1000b328:	80800317 	ldw	r2,12(r16)
1000b32c:	80c00217 	ldw	r3,8(r16)
1000b330:	89400054 	ori	r5,r17,1
1000b334:	81400115 	stw	r5,4(r16)
1000b338:	18800315 	stw	r2,12(r3)
1000b33c:	10c00215 	stw	r3,8(r2)
1000b340:	8463883a 	add	r17,r16,r17
1000b344:	9c400515 	stw	r17,20(r19)
1000b348:	9c400415 	stw	r17,16(r19)
1000b34c:	20800054 	ori	r2,r4,1
1000b350:	88800115 	stw	r2,4(r17)
1000b354:	8a400315 	stw	r9,12(r17)
1000b358:	8a400215 	stw	r9,8(r17)
1000b35c:	8923883a 	add	r17,r17,r4
1000b360:	89000015 	stw	r4,0(r17)
1000b364:	9009883a 	mov	r4,r18
1000b368:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b36c:	80800204 	addi	r2,r16,8
1000b370:	003f7d06 	br	1000b168 <__alt_data_end+0xf800b168>
1000b374:	00800304 	movi	r2,12
1000b378:	90800015 	stw	r2,0(r18)
1000b37c:	0005883a 	mov	r2,zero
1000b380:	003f7906 	br	1000b168 <__alt_data_end+0xf800b168>
1000b384:	01401f84 	movi	r5,126
1000b388:	01c00fc4 	movi	r7,63
1000b38c:	003f8d06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b390:	81000317 	ldw	r4,12(r16)
1000b394:	003f6a06 	br	1000b140 <__alt_data_end+0xf800b140>
1000b398:	81c5883a 	add	r2,r16,r7
1000b39c:	10c00117 	ldw	r3,4(r2)
1000b3a0:	9009883a 	mov	r4,r18
1000b3a4:	18c00054 	ori	r3,r3,1
1000b3a8:	10c00115 	stw	r3,4(r2)
1000b3ac:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b3b0:	80800204 	addi	r2,r16,8
1000b3b4:	003f6c06 	br	1000b168 <__alt_data_end+0xf800b168>
1000b3b8:	9c000217 	ldw	r16,8(r19)
1000b3bc:	00bfff04 	movi	r2,-4
1000b3c0:	85800117 	ldw	r22,4(r16)
1000b3c4:	b0ac703a 	and	r22,r22,r2
1000b3c8:	b4400336 	bltu	r22,r17,1000b3d8 <_malloc_r+0x324>
1000b3cc:	b445c83a 	sub	r2,r22,r17
1000b3d0:	00c003c4 	movi	r3,15
1000b3d4:	18805d16 	blt	r3,r2,1000b54c <_malloc_r+0x498>
1000b3d8:	05c40074 	movhi	r23,4097
1000b3dc:	00840074 	movhi	r2,4097
1000b3e0:	bdcfaf04 	addi	r23,r23,16060
1000b3e4:	10967d04 	addi	r2,r2,23028
1000b3e8:	15400017 	ldw	r21,0(r2)
1000b3ec:	b9000017 	ldw	r4,0(r23)
1000b3f0:	00ffffc4 	movi	r3,-1
1000b3f4:	858d883a 	add	r6,r16,r22
1000b3f8:	8d6b883a 	add	r21,r17,r21
1000b3fc:	20c0e426 	beq	r4,r3,1000b790 <_malloc_r+0x6dc>
1000b400:	ad4403c4 	addi	r21,r21,4111
1000b404:	00fc0004 	movi	r3,-4096
1000b408:	a8ea703a 	and	r21,r21,r3
1000b40c:	9009883a 	mov	r4,r18
1000b410:	a80b883a 	mov	r5,r21
1000b414:	d9800015 	stw	r6,0(sp)
1000b418:	000cbe80 	call	1000cbe8 <_sbrk_r>
1000b41c:	00ffffc4 	movi	r3,-1
1000b420:	1029883a 	mov	r20,r2
1000b424:	d9800017 	ldw	r6,0(sp)
1000b428:	10c0a426 	beq	r2,r3,1000b6bc <_malloc_r+0x608>
1000b42c:	1180a236 	bltu	r2,r6,1000b6b8 <_malloc_r+0x604>
1000b430:	07040074 	movhi	fp,4097
1000b434:	e7168604 	addi	fp,fp,23064
1000b438:	e0c00017 	ldw	r3,0(fp)
1000b43c:	a8c7883a 	add	r3,r21,r3
1000b440:	e0c00015 	stw	r3,0(fp)
1000b444:	3500da26 	beq	r6,r20,1000b7b0 <_malloc_r+0x6fc>
1000b448:	b9000017 	ldw	r4,0(r23)
1000b44c:	00bfffc4 	movi	r2,-1
1000b450:	2080e426 	beq	r4,r2,1000b7e4 <_malloc_r+0x730>
1000b454:	a185c83a 	sub	r2,r20,r6
1000b458:	1885883a 	add	r2,r3,r2
1000b45c:	e0800015 	stw	r2,0(fp)
1000b460:	a0c001cc 	andi	r3,r20,7
1000b464:	1800b526 	beq	r3,zero,1000b73c <_malloc_r+0x688>
1000b468:	a0e9c83a 	sub	r20,r20,r3
1000b46c:	00840204 	movi	r2,4104
1000b470:	a5000204 	addi	r20,r20,8
1000b474:	10c7c83a 	sub	r3,r2,r3
1000b478:	a545883a 	add	r2,r20,r21
1000b47c:	1083ffcc 	andi	r2,r2,4095
1000b480:	18abc83a 	sub	r21,r3,r2
1000b484:	9009883a 	mov	r4,r18
1000b488:	a80b883a 	mov	r5,r21
1000b48c:	000cbe80 	call	1000cbe8 <_sbrk_r>
1000b490:	00ffffc4 	movi	r3,-1
1000b494:	10c0d026 	beq	r2,r3,1000b7d8 <_malloc_r+0x724>
1000b498:	1507c83a 	sub	r3,r2,r20
1000b49c:	a8c7883a 	add	r3,r21,r3
1000b4a0:	18c00054 	ori	r3,r3,1
1000b4a4:	e0800017 	ldw	r2,0(fp)
1000b4a8:	9d000215 	stw	r20,8(r19)
1000b4ac:	a0c00115 	stw	r3,4(r20)
1000b4b0:	a887883a 	add	r3,r21,r2
1000b4b4:	e0c00015 	stw	r3,0(fp)
1000b4b8:	84c00e26 	beq	r16,r19,1000b4f4 <_malloc_r+0x440>
1000b4bc:	018003c4 	movi	r6,15
1000b4c0:	3580a02e 	bgeu	r6,r22,1000b744 <_malloc_r+0x690>
1000b4c4:	81400117 	ldw	r5,4(r16)
1000b4c8:	013ffe04 	movi	r4,-8
1000b4cc:	b0bffd04 	addi	r2,r22,-12
1000b4d0:	1104703a 	and	r2,r2,r4
1000b4d4:	2900004c 	andi	r4,r5,1
1000b4d8:	1108b03a 	or	r4,r2,r4
1000b4dc:	81000115 	stw	r4,4(r16)
1000b4e0:	01400144 	movi	r5,5
1000b4e4:	8089883a 	add	r4,r16,r2
1000b4e8:	21400115 	stw	r5,4(r4)
1000b4ec:	21400215 	stw	r5,8(r4)
1000b4f0:	3080c036 	bltu	r6,r2,1000b7f4 <_malloc_r+0x740>
1000b4f4:	00840074 	movhi	r2,4097
1000b4f8:	10967c04 	addi	r2,r2,23024
1000b4fc:	11000017 	ldw	r4,0(r2)
1000b500:	20c0012e 	bgeu	r4,r3,1000b508 <_malloc_r+0x454>
1000b504:	10c00015 	stw	r3,0(r2)
1000b508:	00840074 	movhi	r2,4097
1000b50c:	10967b04 	addi	r2,r2,23020
1000b510:	11000017 	ldw	r4,0(r2)
1000b514:	9c000217 	ldw	r16,8(r19)
1000b518:	20c0012e 	bgeu	r4,r3,1000b520 <_malloc_r+0x46c>
1000b51c:	10c00015 	stw	r3,0(r2)
1000b520:	80c00117 	ldw	r3,4(r16)
1000b524:	00bfff04 	movi	r2,-4
1000b528:	1886703a 	and	r3,r3,r2
1000b52c:	1c45c83a 	sub	r2,r3,r17
1000b530:	1c400236 	bltu	r3,r17,1000b53c <_malloc_r+0x488>
1000b534:	00c003c4 	movi	r3,15
1000b538:	18800416 	blt	r3,r2,1000b54c <_malloc_r+0x498>
1000b53c:	9009883a 	mov	r4,r18
1000b540:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b544:	0005883a 	mov	r2,zero
1000b548:	003f0706 	br	1000b168 <__alt_data_end+0xf800b168>
1000b54c:	88c00054 	ori	r3,r17,1
1000b550:	80c00115 	stw	r3,4(r16)
1000b554:	8463883a 	add	r17,r16,r17
1000b558:	10800054 	ori	r2,r2,1
1000b55c:	9c400215 	stw	r17,8(r19)
1000b560:	88800115 	stw	r2,4(r17)
1000b564:	9009883a 	mov	r4,r18
1000b568:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b56c:	80800204 	addi	r2,r16,8
1000b570:	003efd06 	br	1000b168 <__alt_data_end+0xf800b168>
1000b574:	00800504 	movi	r2,20
1000b578:	10c0482e 	bgeu	r2,r3,1000b69c <_malloc_r+0x5e8>
1000b57c:	00801504 	movi	r2,84
1000b580:	10c06836 	bltu	r2,r3,1000b724 <_malloc_r+0x670>
1000b584:	8806d33a 	srli	r3,r17,12
1000b588:	19c01b84 	addi	r7,r3,110
1000b58c:	39cb883a 	add	r5,r7,r7
1000b590:	003f0c06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b594:	3804d27a 	srli	r2,r7,9
1000b598:	01000104 	movi	r4,4
1000b59c:	2080422e 	bgeu	r4,r2,1000b6a8 <_malloc_r+0x5f4>
1000b5a0:	01000504 	movi	r4,20
1000b5a4:	20807c36 	bltu	r4,r2,1000b798 <_malloc_r+0x6e4>
1000b5a8:	110016c4 	addi	r4,r2,91
1000b5ac:	210b883a 	add	r5,r4,r4
1000b5b0:	294b883a 	add	r5,r5,r5
1000b5b4:	294b883a 	add	r5,r5,r5
1000b5b8:	994b883a 	add	r5,r19,r5
1000b5bc:	28800217 	ldw	r2,8(r5)
1000b5c0:	02040074 	movhi	r8,4097
1000b5c4:	420a2704 	addi	r8,r8,10396
1000b5c8:	11406326 	beq	r2,r5,1000b758 <_malloc_r+0x6a4>
1000b5cc:	01bfff04 	movi	r6,-4
1000b5d0:	11000117 	ldw	r4,4(r2)
1000b5d4:	2188703a 	and	r4,r4,r6
1000b5d8:	3900022e 	bgeu	r7,r4,1000b5e4 <_malloc_r+0x530>
1000b5dc:	10800217 	ldw	r2,8(r2)
1000b5e0:	28bffb1e 	bne	r5,r2,1000b5d0 <__alt_data_end+0xf800b5d0>
1000b5e4:	11800317 	ldw	r6,12(r2)
1000b5e8:	99000117 	ldw	r4,4(r19)
1000b5ec:	81800315 	stw	r6,12(r16)
1000b5f0:	80800215 	stw	r2,8(r16)
1000b5f4:	34000215 	stw	r16,8(r6)
1000b5f8:	14000315 	stw	r16,12(r2)
1000b5fc:	003f2706 	br	1000b29c <__alt_data_end+0xf800b29c>
1000b600:	88c00054 	ori	r3,r17,1
1000b604:	80c00115 	stw	r3,4(r16)
1000b608:	8463883a 	add	r17,r16,r17
1000b60c:	34400515 	stw	r17,20(r6)
1000b610:	34400415 	stw	r17,16(r6)
1000b614:	10c00054 	ori	r3,r2,1
1000b618:	8a400315 	stw	r9,12(r17)
1000b61c:	8a400215 	stw	r9,8(r17)
1000b620:	88c00115 	stw	r3,4(r17)
1000b624:	88a3883a 	add	r17,r17,r2
1000b628:	88800015 	stw	r2,0(r17)
1000b62c:	9009883a 	mov	r4,r18
1000b630:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b634:	80800204 	addi	r2,r16,8
1000b638:	003ecb06 	br	1000b168 <__alt_data_end+0xf800b168>
1000b63c:	31000117 	ldw	r4,4(r6)
1000b640:	003f1606 	br	1000b29c <__alt_data_end+0xf800b29c>
1000b644:	63000044 	addi	r12,r12,1
1000b648:	608000cc 	andi	r2,r12,3
1000b64c:	5ac00204 	addi	r11,r11,8
1000b650:	103f2a1e 	bne	r2,zero,1000b2fc <__alt_data_end+0xf800b2fc>
1000b654:	00002106 	br	1000b6dc <_malloc_r+0x628>
1000b658:	80800204 	addi	r2,r16,8
1000b65c:	84000517 	ldw	r16,20(r16)
1000b660:	143eb31e 	bne	r2,r16,1000b130 <__alt_data_end+0xf800b130>
1000b664:	18c00084 	addi	r3,r3,2
1000b668:	003eec06 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b66c:	8085883a 	add	r2,r16,r2
1000b670:	10c00117 	ldw	r3,4(r2)
1000b674:	81000317 	ldw	r4,12(r16)
1000b678:	81400217 	ldw	r5,8(r16)
1000b67c:	18c00054 	ori	r3,r3,1
1000b680:	10c00115 	stw	r3,4(r2)
1000b684:	29000315 	stw	r4,12(r5)
1000b688:	21400215 	stw	r5,8(r4)
1000b68c:	9009883a 	mov	r4,r18
1000b690:	000fefc0 	call	1000fefc <__malloc_unlock>
1000b694:	80800204 	addi	r2,r16,8
1000b698:	003eb306 	br	1000b168 <__alt_data_end+0xf800b168>
1000b69c:	19c016c4 	addi	r7,r3,91
1000b6a0:	39cb883a 	add	r5,r7,r7
1000b6a4:	003ec706 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b6a8:	3804d1ba 	srli	r2,r7,6
1000b6ac:	11000e04 	addi	r4,r2,56
1000b6b0:	210b883a 	add	r5,r4,r4
1000b6b4:	003fbe06 	br	1000b5b0 <__alt_data_end+0xf800b5b0>
1000b6b8:	84ff5d26 	beq	r16,r19,1000b430 <__alt_data_end+0xf800b430>
1000b6bc:	9c000217 	ldw	r16,8(r19)
1000b6c0:	00bfff04 	movi	r2,-4
1000b6c4:	80c00117 	ldw	r3,4(r16)
1000b6c8:	1886703a 	and	r3,r3,r2
1000b6cc:	003f9706 	br	1000b52c <__alt_data_end+0xf800b52c>
1000b6d0:	52800017 	ldw	r10,0(r10)
1000b6d4:	18ffffc4 	addi	r3,r3,-1
1000b6d8:	50805c1e 	bne	r10,r2,1000b84c <_malloc_r+0x798>
1000b6dc:	190000cc 	andi	r4,r3,3
1000b6e0:	50bffe04 	addi	r2,r10,-8
1000b6e4:	203ffa1e 	bne	r4,zero,1000b6d0 <__alt_data_end+0xf800b6d0>
1000b6e8:	98800117 	ldw	r2,4(r19)
1000b6ec:	0146303a 	nor	r3,zero,r5
1000b6f0:	1884703a 	and	r2,r3,r2
1000b6f4:	98800115 	stw	r2,4(r19)
1000b6f8:	294b883a 	add	r5,r5,r5
1000b6fc:	117f2e36 	bltu	r2,r5,1000b3b8 <__alt_data_end+0xf800b3b8>
1000b700:	283f2d26 	beq	r5,zero,1000b3b8 <__alt_data_end+0xf800b3b8>
1000b704:	1146703a 	and	r3,r2,r5
1000b708:	1800521e 	bne	r3,zero,1000b854 <_malloc_r+0x7a0>
1000b70c:	6007883a 	mov	r3,r12
1000b710:	294b883a 	add	r5,r5,r5
1000b714:	1148703a 	and	r4,r2,r5
1000b718:	18c00104 	addi	r3,r3,4
1000b71c:	203ffc26 	beq	r4,zero,1000b710 <__alt_data_end+0xf800b710>
1000b720:	003ef006 	br	1000b2e4 <__alt_data_end+0xf800b2e4>
1000b724:	00805504 	movi	r2,340
1000b728:	10c01336 	bltu	r2,r3,1000b778 <_malloc_r+0x6c4>
1000b72c:	8806d3fa 	srli	r3,r17,15
1000b730:	19c01dc4 	addi	r7,r3,119
1000b734:	39cb883a 	add	r5,r7,r7
1000b738:	003ea206 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b73c:	00c40004 	movi	r3,4096
1000b740:	003f4d06 	br	1000b478 <__alt_data_end+0xf800b478>
1000b744:	00800044 	movi	r2,1
1000b748:	a0800115 	stw	r2,4(r20)
1000b74c:	a021883a 	mov	r16,r20
1000b750:	0007883a 	mov	r3,zero
1000b754:	003f7506 	br	1000b52c <__alt_data_end+0xf800b52c>
1000b758:	200bd0ba 	srai	r5,r4,2
1000b75c:	01800044 	movi	r6,1
1000b760:	41000117 	ldw	r4,4(r8)
1000b764:	314a983a 	sll	r5,r6,r5
1000b768:	100d883a 	mov	r6,r2
1000b76c:	2908b03a 	or	r4,r5,r4
1000b770:	41000115 	stw	r4,4(r8)
1000b774:	003f9d06 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000b778:	00815504 	movi	r2,1364
1000b77c:	10c01336 	bltu	r2,r3,1000b7cc <_malloc_r+0x718>
1000b780:	8806d4ba 	srli	r3,r17,18
1000b784:	19c01f04 	addi	r7,r3,124
1000b788:	39cb883a 	add	r5,r7,r7
1000b78c:	003e8d06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b790:	ad400404 	addi	r21,r21,16
1000b794:	003f1d06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b798:	01001504 	movi	r4,84
1000b79c:	20801c36 	bltu	r4,r2,1000b810 <_malloc_r+0x75c>
1000b7a0:	3804d33a 	srli	r2,r7,12
1000b7a4:	11001b84 	addi	r4,r2,110
1000b7a8:	210b883a 	add	r5,r4,r4
1000b7ac:	003f8006 	br	1000b5b0 <__alt_data_end+0xf800b5b0>
1000b7b0:	3083ffcc 	andi	r2,r6,4095
1000b7b4:	103f241e 	bne	r2,zero,1000b448 <__alt_data_end+0xf800b448>
1000b7b8:	99000217 	ldw	r4,8(r19)
1000b7bc:	ad85883a 	add	r2,r21,r22
1000b7c0:	10800054 	ori	r2,r2,1
1000b7c4:	20800115 	stw	r2,4(r4)
1000b7c8:	003f4a06 	br	1000b4f4 <__alt_data_end+0xf800b4f4>
1000b7cc:	01403f04 	movi	r5,252
1000b7d0:	01c01f84 	movi	r7,126
1000b7d4:	003e7b06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b7d8:	00c00044 	movi	r3,1
1000b7dc:	002b883a 	mov	r21,zero
1000b7e0:	003f3006 	br	1000b4a4 <__alt_data_end+0xf800b4a4>
1000b7e4:	00840074 	movhi	r2,4097
1000b7e8:	108faf04 	addi	r2,r2,16060
1000b7ec:	15000015 	stw	r20,0(r2)
1000b7f0:	003f1b06 	br	1000b460 <__alt_data_end+0xf800b460>
1000b7f4:	9009883a 	mov	r4,r18
1000b7f8:	81400204 	addi	r5,r16,8
1000b7fc:	000a9bc0 	call	1000a9bc <_free_r>
1000b800:	00840074 	movhi	r2,4097
1000b804:	10968604 	addi	r2,r2,23064
1000b808:	10c00017 	ldw	r3,0(r2)
1000b80c:	003f3906 	br	1000b4f4 <__alt_data_end+0xf800b4f4>
1000b810:	01005504 	movi	r4,340
1000b814:	20800436 	bltu	r4,r2,1000b828 <_malloc_r+0x774>
1000b818:	3804d3fa 	srli	r2,r7,15
1000b81c:	11001dc4 	addi	r4,r2,119
1000b820:	210b883a 	add	r5,r4,r4
1000b824:	003f6206 	br	1000b5b0 <__alt_data_end+0xf800b5b0>
1000b828:	01015504 	movi	r4,1364
1000b82c:	20800436 	bltu	r4,r2,1000b840 <_malloc_r+0x78c>
1000b830:	3804d4ba 	srli	r2,r7,18
1000b834:	11001f04 	addi	r4,r2,124
1000b838:	210b883a 	add	r5,r4,r4
1000b83c:	003f5c06 	br	1000b5b0 <__alt_data_end+0xf800b5b0>
1000b840:	01403f04 	movi	r5,252
1000b844:	01001f84 	movi	r4,126
1000b848:	003f5906 	br	1000b5b0 <__alt_data_end+0xf800b5b0>
1000b84c:	98800117 	ldw	r2,4(r19)
1000b850:	003fa906 	br	1000b6f8 <__alt_data_end+0xf800b6f8>
1000b854:	6007883a 	mov	r3,r12
1000b858:	003ea206 	br	1000b2e4 <__alt_data_end+0xf800b2e4>

1000b85c <memchr>:
1000b85c:	208000cc 	andi	r2,r4,3
1000b860:	280f883a 	mov	r7,r5
1000b864:	10003526 	beq	r2,zero,1000b93c <memchr+0xe0>
1000b868:	30bfffc4 	addi	r2,r6,-1
1000b86c:	30001b26 	beq	r6,zero,1000b8dc <memchr+0x80>
1000b870:	21800003 	ldbu	r6,0(r4)
1000b874:	28c03fcc 	andi	r3,r5,255
1000b878:	30c01a26 	beq	r6,r3,1000b8e4 <memchr+0x88>
1000b87c:	180d883a 	mov	r6,r3
1000b880:	00000406 	br	1000b894 <memchr+0x38>
1000b884:	10001526 	beq	r2,zero,1000b8dc <memchr+0x80>
1000b888:	20c00003 	ldbu	r3,0(r4)
1000b88c:	10bfffc4 	addi	r2,r2,-1
1000b890:	19801426 	beq	r3,r6,1000b8e4 <memchr+0x88>
1000b894:	21000044 	addi	r4,r4,1
1000b898:	20c000cc 	andi	r3,r4,3
1000b89c:	183ff91e 	bne	r3,zero,1000b884 <__alt_data_end+0xf800b884>
1000b8a0:	024000c4 	movi	r9,3
1000b8a4:	48801136 	bltu	r9,r2,1000b8ec <memchr+0x90>
1000b8a8:	10000c26 	beq	r2,zero,1000b8dc <memchr+0x80>
1000b8ac:	20c00003 	ldbu	r3,0(r4)
1000b8b0:	29403fcc 	andi	r5,r5,255
1000b8b4:	19400b26 	beq	r3,r5,1000b8e4 <memchr+0x88>
1000b8b8:	20c00044 	addi	r3,r4,1
1000b8bc:	2085883a 	add	r2,r4,r2
1000b8c0:	39803fcc 	andi	r6,r7,255
1000b8c4:	00000306 	br	1000b8d4 <memchr+0x78>
1000b8c8:	18c00044 	addi	r3,r3,1
1000b8cc:	197fffc3 	ldbu	r5,-1(r3)
1000b8d0:	29800426 	beq	r5,r6,1000b8e4 <memchr+0x88>
1000b8d4:	1809883a 	mov	r4,r3
1000b8d8:	18bffb1e 	bne	r3,r2,1000b8c8 <__alt_data_end+0xf800b8c8>
1000b8dc:	0005883a 	mov	r2,zero
1000b8e0:	f800283a 	ret
1000b8e4:	2005883a 	mov	r2,r4
1000b8e8:	f800283a 	ret
1000b8ec:	28c03fcc 	andi	r3,r5,255
1000b8f0:	1810923a 	slli	r8,r3,8
1000b8f4:	02ffbff4 	movhi	r11,65279
1000b8f8:	02a02074 	movhi	r10,32897
1000b8fc:	40c6b03a 	or	r3,r8,r3
1000b900:	1810943a 	slli	r8,r3,16
1000b904:	5affbfc4 	addi	r11,r11,-257
1000b908:	52a02004 	addi	r10,r10,-32640
1000b90c:	40d0b03a 	or	r8,r8,r3
1000b910:	20c00017 	ldw	r3,0(r4)
1000b914:	40c6f03a 	xor	r3,r8,r3
1000b918:	1acd883a 	add	r6,r3,r11
1000b91c:	00c6303a 	nor	r3,zero,r3
1000b920:	30c6703a 	and	r3,r6,r3
1000b924:	1a86703a 	and	r3,r3,r10
1000b928:	183fdf1e 	bne	r3,zero,1000b8a8 <__alt_data_end+0xf800b8a8>
1000b92c:	10bfff04 	addi	r2,r2,-4
1000b930:	21000104 	addi	r4,r4,4
1000b934:	48bff636 	bltu	r9,r2,1000b910 <__alt_data_end+0xf800b910>
1000b938:	003fdb06 	br	1000b8a8 <__alt_data_end+0xf800b8a8>
1000b93c:	3005883a 	mov	r2,r6
1000b940:	003fd706 	br	1000b8a0 <__alt_data_end+0xf800b8a0>

1000b944 <memcpy>:
1000b944:	deffff04 	addi	sp,sp,-4
1000b948:	dc000015 	stw	r16,0(sp)
1000b94c:	00c003c4 	movi	r3,15
1000b950:	2005883a 	mov	r2,r4
1000b954:	1980432e 	bgeu	r3,r6,1000ba64 <memcpy+0x120>
1000b958:	2146b03a 	or	r3,r4,r5
1000b95c:	18c000cc 	andi	r3,r3,3
1000b960:	1800421e 	bne	r3,zero,1000ba6c <memcpy+0x128>
1000b964:	343ffc04 	addi	r16,r6,-16
1000b968:	8020d13a 	srli	r16,r16,4
1000b96c:	28c00104 	addi	r3,r5,4
1000b970:	23400104 	addi	r13,r4,4
1000b974:	801e913a 	slli	r15,r16,4
1000b978:	2b000204 	addi	r12,r5,8
1000b97c:	22c00204 	addi	r11,r4,8
1000b980:	7bc00504 	addi	r15,r15,20
1000b984:	2a800304 	addi	r10,r5,12
1000b988:	22400304 	addi	r9,r4,12
1000b98c:	2bdf883a 	add	r15,r5,r15
1000b990:	2811883a 	mov	r8,r5
1000b994:	200f883a 	mov	r7,r4
1000b998:	41000017 	ldw	r4,0(r8)
1000b99c:	39c00404 	addi	r7,r7,16
1000b9a0:	18c00404 	addi	r3,r3,16
1000b9a4:	393ffc15 	stw	r4,-16(r7)
1000b9a8:	1bbffc17 	ldw	r14,-16(r3)
1000b9ac:	6b400404 	addi	r13,r13,16
1000b9b0:	5ac00404 	addi	r11,r11,16
1000b9b4:	6bbffc15 	stw	r14,-16(r13)
1000b9b8:	63800017 	ldw	r14,0(r12)
1000b9bc:	4a400404 	addi	r9,r9,16
1000b9c0:	42000404 	addi	r8,r8,16
1000b9c4:	5bbffc15 	stw	r14,-16(r11)
1000b9c8:	53800017 	ldw	r14,0(r10)
1000b9cc:	63000404 	addi	r12,r12,16
1000b9d0:	52800404 	addi	r10,r10,16
1000b9d4:	4bbffc15 	stw	r14,-16(r9)
1000b9d8:	1bffef1e 	bne	r3,r15,1000b998 <__alt_data_end+0xf800b998>
1000b9dc:	81c00044 	addi	r7,r16,1
1000b9e0:	380e913a 	slli	r7,r7,4
1000b9e4:	310003cc 	andi	r4,r6,15
1000b9e8:	02c000c4 	movi	r11,3
1000b9ec:	11c7883a 	add	r3,r2,r7
1000b9f0:	29cb883a 	add	r5,r5,r7
1000b9f4:	59001f2e 	bgeu	r11,r4,1000ba74 <memcpy+0x130>
1000b9f8:	1813883a 	mov	r9,r3
1000b9fc:	2811883a 	mov	r8,r5
1000ba00:	200f883a 	mov	r7,r4
1000ba04:	42800017 	ldw	r10,0(r8)
1000ba08:	4a400104 	addi	r9,r9,4
1000ba0c:	39ffff04 	addi	r7,r7,-4
1000ba10:	4abfff15 	stw	r10,-4(r9)
1000ba14:	42000104 	addi	r8,r8,4
1000ba18:	59fffa36 	bltu	r11,r7,1000ba04 <__alt_data_end+0xf800ba04>
1000ba1c:	213fff04 	addi	r4,r4,-4
1000ba20:	2008d0ba 	srli	r4,r4,2
1000ba24:	318000cc 	andi	r6,r6,3
1000ba28:	21000044 	addi	r4,r4,1
1000ba2c:	2109883a 	add	r4,r4,r4
1000ba30:	2109883a 	add	r4,r4,r4
1000ba34:	1907883a 	add	r3,r3,r4
1000ba38:	290b883a 	add	r5,r5,r4
1000ba3c:	30000626 	beq	r6,zero,1000ba58 <memcpy+0x114>
1000ba40:	198d883a 	add	r6,r3,r6
1000ba44:	29c00003 	ldbu	r7,0(r5)
1000ba48:	18c00044 	addi	r3,r3,1
1000ba4c:	29400044 	addi	r5,r5,1
1000ba50:	19ffffc5 	stb	r7,-1(r3)
1000ba54:	19bffb1e 	bne	r3,r6,1000ba44 <__alt_data_end+0xf800ba44>
1000ba58:	dc000017 	ldw	r16,0(sp)
1000ba5c:	dec00104 	addi	sp,sp,4
1000ba60:	f800283a 	ret
1000ba64:	2007883a 	mov	r3,r4
1000ba68:	003ff406 	br	1000ba3c <__alt_data_end+0xf800ba3c>
1000ba6c:	2007883a 	mov	r3,r4
1000ba70:	003ff306 	br	1000ba40 <__alt_data_end+0xf800ba40>
1000ba74:	200d883a 	mov	r6,r4
1000ba78:	003ff006 	br	1000ba3c <__alt_data_end+0xf800ba3c>

1000ba7c <memset>:
1000ba7c:	20c000cc 	andi	r3,r4,3
1000ba80:	2005883a 	mov	r2,r4
1000ba84:	18004326 	beq	r3,zero,1000bb94 <memset+0x118>
1000ba88:	31ffffc4 	addi	r7,r6,-1
1000ba8c:	30004026 	beq	r6,zero,1000bb90 <memset+0x114>
1000ba90:	2813883a 	mov	r9,r5
1000ba94:	200d883a 	mov	r6,r4
1000ba98:	2007883a 	mov	r3,r4
1000ba9c:	00000406 	br	1000bab0 <memset+0x34>
1000baa0:	3a3fffc4 	addi	r8,r7,-1
1000baa4:	31800044 	addi	r6,r6,1
1000baa8:	38003926 	beq	r7,zero,1000bb90 <memset+0x114>
1000baac:	400f883a 	mov	r7,r8
1000bab0:	18c00044 	addi	r3,r3,1
1000bab4:	32400005 	stb	r9,0(r6)
1000bab8:	1a0000cc 	andi	r8,r3,3
1000babc:	403ff81e 	bne	r8,zero,1000baa0 <__alt_data_end+0xf800baa0>
1000bac0:	010000c4 	movi	r4,3
1000bac4:	21c02d2e 	bgeu	r4,r7,1000bb7c <memset+0x100>
1000bac8:	29803fcc 	andi	r6,r5,255
1000bacc:	3008923a 	slli	r4,r6,8
1000bad0:	218cb03a 	or	r6,r4,r6
1000bad4:	3008943a 	slli	r4,r6,16
1000bad8:	218cb03a 	or	r6,r4,r6
1000badc:	010003c4 	movi	r4,15
1000bae0:	21c0182e 	bgeu	r4,r7,1000bb44 <memset+0xc8>
1000bae4:	3b3ffc04 	addi	r12,r7,-16
1000bae8:	6018d13a 	srli	r12,r12,4
1000baec:	1a000104 	addi	r8,r3,4
1000baf0:	1ac00204 	addi	r11,r3,8
1000baf4:	6008913a 	slli	r4,r12,4
1000baf8:	1a800304 	addi	r10,r3,12
1000bafc:	1813883a 	mov	r9,r3
1000bb00:	21000504 	addi	r4,r4,20
1000bb04:	1909883a 	add	r4,r3,r4
1000bb08:	49800015 	stw	r6,0(r9)
1000bb0c:	41800015 	stw	r6,0(r8)
1000bb10:	59800015 	stw	r6,0(r11)
1000bb14:	51800015 	stw	r6,0(r10)
1000bb18:	42000404 	addi	r8,r8,16
1000bb1c:	4a400404 	addi	r9,r9,16
1000bb20:	5ac00404 	addi	r11,r11,16
1000bb24:	52800404 	addi	r10,r10,16
1000bb28:	413ff71e 	bne	r8,r4,1000bb08 <__alt_data_end+0xf800bb08>
1000bb2c:	63000044 	addi	r12,r12,1
1000bb30:	6018913a 	slli	r12,r12,4
1000bb34:	39c003cc 	andi	r7,r7,15
1000bb38:	010000c4 	movi	r4,3
1000bb3c:	1b07883a 	add	r3,r3,r12
1000bb40:	21c00e2e 	bgeu	r4,r7,1000bb7c <memset+0x100>
1000bb44:	1813883a 	mov	r9,r3
1000bb48:	3811883a 	mov	r8,r7
1000bb4c:	010000c4 	movi	r4,3
1000bb50:	49800015 	stw	r6,0(r9)
1000bb54:	423fff04 	addi	r8,r8,-4
1000bb58:	4a400104 	addi	r9,r9,4
1000bb5c:	223ffc36 	bltu	r4,r8,1000bb50 <__alt_data_end+0xf800bb50>
1000bb60:	393fff04 	addi	r4,r7,-4
1000bb64:	2008d0ba 	srli	r4,r4,2
1000bb68:	39c000cc 	andi	r7,r7,3
1000bb6c:	21000044 	addi	r4,r4,1
1000bb70:	2109883a 	add	r4,r4,r4
1000bb74:	2109883a 	add	r4,r4,r4
1000bb78:	1907883a 	add	r3,r3,r4
1000bb7c:	38000426 	beq	r7,zero,1000bb90 <memset+0x114>
1000bb80:	19cf883a 	add	r7,r3,r7
1000bb84:	19400005 	stb	r5,0(r3)
1000bb88:	18c00044 	addi	r3,r3,1
1000bb8c:	19fffd1e 	bne	r3,r7,1000bb84 <__alt_data_end+0xf800bb84>
1000bb90:	f800283a 	ret
1000bb94:	2007883a 	mov	r3,r4
1000bb98:	300f883a 	mov	r7,r6
1000bb9c:	003fc806 	br	1000bac0 <__alt_data_end+0xf800bac0>

1000bba0 <_Balloc>:
1000bba0:	20801317 	ldw	r2,76(r4)
1000bba4:	defffc04 	addi	sp,sp,-16
1000bba8:	dc400115 	stw	r17,4(sp)
1000bbac:	dc000015 	stw	r16,0(sp)
1000bbb0:	dfc00315 	stw	ra,12(sp)
1000bbb4:	dc800215 	stw	r18,8(sp)
1000bbb8:	2023883a 	mov	r17,r4
1000bbbc:	2821883a 	mov	r16,r5
1000bbc0:	10000f26 	beq	r2,zero,1000bc00 <_Balloc+0x60>
1000bbc4:	8407883a 	add	r3,r16,r16
1000bbc8:	18c7883a 	add	r3,r3,r3
1000bbcc:	10c7883a 	add	r3,r2,r3
1000bbd0:	18800017 	ldw	r2,0(r3)
1000bbd4:	10001126 	beq	r2,zero,1000bc1c <_Balloc+0x7c>
1000bbd8:	11000017 	ldw	r4,0(r2)
1000bbdc:	19000015 	stw	r4,0(r3)
1000bbe0:	10000415 	stw	zero,16(r2)
1000bbe4:	10000315 	stw	zero,12(r2)
1000bbe8:	dfc00317 	ldw	ra,12(sp)
1000bbec:	dc800217 	ldw	r18,8(sp)
1000bbf0:	dc400117 	ldw	r17,4(sp)
1000bbf4:	dc000017 	ldw	r16,0(sp)
1000bbf8:	dec00404 	addi	sp,sp,16
1000bbfc:	f800283a 	ret
1000bc00:	01400104 	movi	r5,4
1000bc04:	01800844 	movi	r6,33
1000bc08:	000e4c00 	call	1000e4c0 <_calloc_r>
1000bc0c:	88801315 	stw	r2,76(r17)
1000bc10:	103fec1e 	bne	r2,zero,1000bbc4 <__alt_data_end+0xf800bbc4>
1000bc14:	0005883a 	mov	r2,zero
1000bc18:	003ff306 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000bc1c:	01400044 	movi	r5,1
1000bc20:	2c24983a 	sll	r18,r5,r16
1000bc24:	8809883a 	mov	r4,r17
1000bc28:	91800144 	addi	r6,r18,5
1000bc2c:	318d883a 	add	r6,r6,r6
1000bc30:	318d883a 	add	r6,r6,r6
1000bc34:	000e4c00 	call	1000e4c0 <_calloc_r>
1000bc38:	103ff626 	beq	r2,zero,1000bc14 <__alt_data_end+0xf800bc14>
1000bc3c:	14000115 	stw	r16,4(r2)
1000bc40:	14800215 	stw	r18,8(r2)
1000bc44:	003fe606 	br	1000bbe0 <__alt_data_end+0xf800bbe0>

1000bc48 <_Bfree>:
1000bc48:	28000826 	beq	r5,zero,1000bc6c <_Bfree+0x24>
1000bc4c:	28c00117 	ldw	r3,4(r5)
1000bc50:	20801317 	ldw	r2,76(r4)
1000bc54:	18c7883a 	add	r3,r3,r3
1000bc58:	18c7883a 	add	r3,r3,r3
1000bc5c:	10c5883a 	add	r2,r2,r3
1000bc60:	10c00017 	ldw	r3,0(r2)
1000bc64:	28c00015 	stw	r3,0(r5)
1000bc68:	11400015 	stw	r5,0(r2)
1000bc6c:	f800283a 	ret

1000bc70 <__multadd>:
1000bc70:	defff704 	addi	sp,sp,-36
1000bc74:	dc800215 	stw	r18,8(sp)
1000bc78:	2c800417 	ldw	r18,16(r5)
1000bc7c:	ddc00715 	stw	r23,28(sp)
1000bc80:	dd800615 	stw	r22,24(sp)
1000bc84:	dd000415 	stw	r20,16(sp)
1000bc88:	dcc00315 	stw	r19,12(sp)
1000bc8c:	dc400115 	stw	r17,4(sp)
1000bc90:	dc000015 	stw	r16,0(sp)
1000bc94:	dfc00815 	stw	ra,32(sp)
1000bc98:	dd400515 	stw	r21,20(sp)
1000bc9c:	2827883a 	mov	r19,r5
1000bca0:	2029883a 	mov	r20,r4
1000bca4:	3023883a 	mov	r17,r6
1000bca8:	3821883a 	mov	r16,r7
1000bcac:	2d800504 	addi	r22,r5,20
1000bcb0:	002f883a 	mov	r23,zero
1000bcb4:	b5400017 	ldw	r21,0(r22)
1000bcb8:	880b883a 	mov	r5,r17
1000bcbc:	bdc00044 	addi	r23,r23,1
1000bcc0:	a93fffcc 	andi	r4,r21,65535
1000bcc4:	0003dd40 	call	10003dd4 <__mulsi3>
1000bcc8:	1421883a 	add	r16,r2,r16
1000bccc:	a808d43a 	srli	r4,r21,16
1000bcd0:	802ad43a 	srli	r21,r16,16
1000bcd4:	880b883a 	mov	r5,r17
1000bcd8:	0003dd40 	call	10003dd4 <__mulsi3>
1000bcdc:	a88f883a 	add	r7,r21,r2
1000bce0:	3804943a 	slli	r2,r7,16
1000bce4:	80ffffcc 	andi	r3,r16,65535
1000bce8:	b5800104 	addi	r22,r22,4
1000bcec:	10c7883a 	add	r3,r2,r3
1000bcf0:	b0ffff15 	stw	r3,-4(r22)
1000bcf4:	3820d43a 	srli	r16,r7,16
1000bcf8:	bcbfee16 	blt	r23,r18,1000bcb4 <__alt_data_end+0xf800bcb4>
1000bcfc:	80000926 	beq	r16,zero,1000bd24 <__multadd+0xb4>
1000bd00:	98800217 	ldw	r2,8(r19)
1000bd04:	9080130e 	bge	r18,r2,1000bd54 <__multadd+0xe4>
1000bd08:	90800144 	addi	r2,r18,5
1000bd0c:	1085883a 	add	r2,r2,r2
1000bd10:	1085883a 	add	r2,r2,r2
1000bd14:	9885883a 	add	r2,r19,r2
1000bd18:	14000015 	stw	r16,0(r2)
1000bd1c:	94800044 	addi	r18,r18,1
1000bd20:	9c800415 	stw	r18,16(r19)
1000bd24:	9805883a 	mov	r2,r19
1000bd28:	dfc00817 	ldw	ra,32(sp)
1000bd2c:	ddc00717 	ldw	r23,28(sp)
1000bd30:	dd800617 	ldw	r22,24(sp)
1000bd34:	dd400517 	ldw	r21,20(sp)
1000bd38:	dd000417 	ldw	r20,16(sp)
1000bd3c:	dcc00317 	ldw	r19,12(sp)
1000bd40:	dc800217 	ldw	r18,8(sp)
1000bd44:	dc400117 	ldw	r17,4(sp)
1000bd48:	dc000017 	ldw	r16,0(sp)
1000bd4c:	dec00904 	addi	sp,sp,36
1000bd50:	f800283a 	ret
1000bd54:	99400117 	ldw	r5,4(r19)
1000bd58:	a009883a 	mov	r4,r20
1000bd5c:	29400044 	addi	r5,r5,1
1000bd60:	000bba00 	call	1000bba0 <_Balloc>
1000bd64:	99800417 	ldw	r6,16(r19)
1000bd68:	99400304 	addi	r5,r19,12
1000bd6c:	11000304 	addi	r4,r2,12
1000bd70:	31800084 	addi	r6,r6,2
1000bd74:	318d883a 	add	r6,r6,r6
1000bd78:	318d883a 	add	r6,r6,r6
1000bd7c:	1023883a 	mov	r17,r2
1000bd80:	000b9440 	call	1000b944 <memcpy>
1000bd84:	99000117 	ldw	r4,4(r19)
1000bd88:	a0c01317 	ldw	r3,76(r20)
1000bd8c:	2109883a 	add	r4,r4,r4
1000bd90:	2109883a 	add	r4,r4,r4
1000bd94:	1907883a 	add	r3,r3,r4
1000bd98:	18800017 	ldw	r2,0(r3)
1000bd9c:	98800015 	stw	r2,0(r19)
1000bda0:	1cc00015 	stw	r19,0(r3)
1000bda4:	8827883a 	mov	r19,r17
1000bda8:	003fd706 	br	1000bd08 <__alt_data_end+0xf800bd08>

1000bdac <__s2b>:
1000bdac:	defff904 	addi	sp,sp,-28
1000bdb0:	dc400115 	stw	r17,4(sp)
1000bdb4:	dc000015 	stw	r16,0(sp)
1000bdb8:	2023883a 	mov	r17,r4
1000bdbc:	2821883a 	mov	r16,r5
1000bdc0:	39000204 	addi	r4,r7,8
1000bdc4:	01400244 	movi	r5,9
1000bdc8:	dcc00315 	stw	r19,12(sp)
1000bdcc:	dc800215 	stw	r18,8(sp)
1000bdd0:	dfc00615 	stw	ra,24(sp)
1000bdd4:	dd400515 	stw	r21,20(sp)
1000bdd8:	dd000415 	stw	r20,16(sp)
1000bddc:	3825883a 	mov	r18,r7
1000bde0:	3027883a 	mov	r19,r6
1000bde4:	0003d140 	call	10003d14 <__divsi3>
1000bde8:	00c00044 	movi	r3,1
1000bdec:	000b883a 	mov	r5,zero
1000bdf0:	1880030e 	bge	r3,r2,1000be00 <__s2b+0x54>
1000bdf4:	18c7883a 	add	r3,r3,r3
1000bdf8:	29400044 	addi	r5,r5,1
1000bdfc:	18bffd16 	blt	r3,r2,1000bdf4 <__alt_data_end+0xf800bdf4>
1000be00:	8809883a 	mov	r4,r17
1000be04:	000bba00 	call	1000bba0 <_Balloc>
1000be08:	d8c00717 	ldw	r3,28(sp)
1000be0c:	10c00515 	stw	r3,20(r2)
1000be10:	00c00044 	movi	r3,1
1000be14:	10c00415 	stw	r3,16(r2)
1000be18:	00c00244 	movi	r3,9
1000be1c:	1cc0210e 	bge	r3,r19,1000bea4 <__s2b+0xf8>
1000be20:	80eb883a 	add	r21,r16,r3
1000be24:	a829883a 	mov	r20,r21
1000be28:	84e1883a 	add	r16,r16,r19
1000be2c:	a1c00007 	ldb	r7,0(r20)
1000be30:	8809883a 	mov	r4,r17
1000be34:	a5000044 	addi	r20,r20,1
1000be38:	100b883a 	mov	r5,r2
1000be3c:	01800284 	movi	r6,10
1000be40:	39fff404 	addi	r7,r7,-48
1000be44:	000bc700 	call	1000bc70 <__multadd>
1000be48:	a43ff81e 	bne	r20,r16,1000be2c <__alt_data_end+0xf800be2c>
1000be4c:	ace1883a 	add	r16,r21,r19
1000be50:	843ffe04 	addi	r16,r16,-8
1000be54:	9c800a0e 	bge	r19,r18,1000be80 <__s2b+0xd4>
1000be58:	94e5c83a 	sub	r18,r18,r19
1000be5c:	84a5883a 	add	r18,r16,r18
1000be60:	81c00007 	ldb	r7,0(r16)
1000be64:	8809883a 	mov	r4,r17
1000be68:	84000044 	addi	r16,r16,1
1000be6c:	100b883a 	mov	r5,r2
1000be70:	01800284 	movi	r6,10
1000be74:	39fff404 	addi	r7,r7,-48
1000be78:	000bc700 	call	1000bc70 <__multadd>
1000be7c:	84bff81e 	bne	r16,r18,1000be60 <__alt_data_end+0xf800be60>
1000be80:	dfc00617 	ldw	ra,24(sp)
1000be84:	dd400517 	ldw	r21,20(sp)
1000be88:	dd000417 	ldw	r20,16(sp)
1000be8c:	dcc00317 	ldw	r19,12(sp)
1000be90:	dc800217 	ldw	r18,8(sp)
1000be94:	dc400117 	ldw	r17,4(sp)
1000be98:	dc000017 	ldw	r16,0(sp)
1000be9c:	dec00704 	addi	sp,sp,28
1000bea0:	f800283a 	ret
1000bea4:	84000284 	addi	r16,r16,10
1000bea8:	1827883a 	mov	r19,r3
1000beac:	003fe906 	br	1000be54 <__alt_data_end+0xf800be54>

1000beb0 <__hi0bits>:
1000beb0:	20bfffec 	andhi	r2,r4,65535
1000beb4:	1000141e 	bne	r2,zero,1000bf08 <__hi0bits+0x58>
1000beb8:	2008943a 	slli	r4,r4,16
1000bebc:	00800404 	movi	r2,16
1000bec0:	20ffc02c 	andhi	r3,r4,65280
1000bec4:	1800021e 	bne	r3,zero,1000bed0 <__hi0bits+0x20>
1000bec8:	2008923a 	slli	r4,r4,8
1000becc:	10800204 	addi	r2,r2,8
1000bed0:	20fc002c 	andhi	r3,r4,61440
1000bed4:	1800021e 	bne	r3,zero,1000bee0 <__hi0bits+0x30>
1000bed8:	2008913a 	slli	r4,r4,4
1000bedc:	10800104 	addi	r2,r2,4
1000bee0:	20f0002c 	andhi	r3,r4,49152
1000bee4:	1800031e 	bne	r3,zero,1000bef4 <__hi0bits+0x44>
1000bee8:	2109883a 	add	r4,r4,r4
1000beec:	10800084 	addi	r2,r2,2
1000bef0:	2109883a 	add	r4,r4,r4
1000bef4:	20000316 	blt	r4,zero,1000bf04 <__hi0bits+0x54>
1000bef8:	2110002c 	andhi	r4,r4,16384
1000befc:	2000041e 	bne	r4,zero,1000bf10 <__hi0bits+0x60>
1000bf00:	00800804 	movi	r2,32
1000bf04:	f800283a 	ret
1000bf08:	0005883a 	mov	r2,zero
1000bf0c:	003fec06 	br	1000bec0 <__alt_data_end+0xf800bec0>
1000bf10:	10800044 	addi	r2,r2,1
1000bf14:	f800283a 	ret

1000bf18 <__lo0bits>:
1000bf18:	20c00017 	ldw	r3,0(r4)
1000bf1c:	188001cc 	andi	r2,r3,7
1000bf20:	10000826 	beq	r2,zero,1000bf44 <__lo0bits+0x2c>
1000bf24:	1880004c 	andi	r2,r3,1
1000bf28:	1000211e 	bne	r2,zero,1000bfb0 <__lo0bits+0x98>
1000bf2c:	1880008c 	andi	r2,r3,2
1000bf30:	1000211e 	bne	r2,zero,1000bfb8 <__lo0bits+0xa0>
1000bf34:	1806d0ba 	srli	r3,r3,2
1000bf38:	00800084 	movi	r2,2
1000bf3c:	20c00015 	stw	r3,0(r4)
1000bf40:	f800283a 	ret
1000bf44:	18bfffcc 	andi	r2,r3,65535
1000bf48:	10001326 	beq	r2,zero,1000bf98 <__lo0bits+0x80>
1000bf4c:	0005883a 	mov	r2,zero
1000bf50:	19403fcc 	andi	r5,r3,255
1000bf54:	2800021e 	bne	r5,zero,1000bf60 <__lo0bits+0x48>
1000bf58:	1806d23a 	srli	r3,r3,8
1000bf5c:	10800204 	addi	r2,r2,8
1000bf60:	194003cc 	andi	r5,r3,15
1000bf64:	2800021e 	bne	r5,zero,1000bf70 <__lo0bits+0x58>
1000bf68:	1806d13a 	srli	r3,r3,4
1000bf6c:	10800104 	addi	r2,r2,4
1000bf70:	194000cc 	andi	r5,r3,3
1000bf74:	2800021e 	bne	r5,zero,1000bf80 <__lo0bits+0x68>
1000bf78:	1806d0ba 	srli	r3,r3,2
1000bf7c:	10800084 	addi	r2,r2,2
1000bf80:	1940004c 	andi	r5,r3,1
1000bf84:	2800081e 	bne	r5,zero,1000bfa8 <__lo0bits+0x90>
1000bf88:	1806d07a 	srli	r3,r3,1
1000bf8c:	1800051e 	bne	r3,zero,1000bfa4 <__lo0bits+0x8c>
1000bf90:	00800804 	movi	r2,32
1000bf94:	f800283a 	ret
1000bf98:	1806d43a 	srli	r3,r3,16
1000bf9c:	00800404 	movi	r2,16
1000bfa0:	003feb06 	br	1000bf50 <__alt_data_end+0xf800bf50>
1000bfa4:	10800044 	addi	r2,r2,1
1000bfa8:	20c00015 	stw	r3,0(r4)
1000bfac:	f800283a 	ret
1000bfb0:	0005883a 	mov	r2,zero
1000bfb4:	f800283a 	ret
1000bfb8:	1806d07a 	srli	r3,r3,1
1000bfbc:	00800044 	movi	r2,1
1000bfc0:	20c00015 	stw	r3,0(r4)
1000bfc4:	f800283a 	ret

1000bfc8 <__i2b>:
1000bfc8:	defffd04 	addi	sp,sp,-12
1000bfcc:	dc000015 	stw	r16,0(sp)
1000bfd0:	04000044 	movi	r16,1
1000bfd4:	dc400115 	stw	r17,4(sp)
1000bfd8:	2823883a 	mov	r17,r5
1000bfdc:	800b883a 	mov	r5,r16
1000bfe0:	dfc00215 	stw	ra,8(sp)
1000bfe4:	000bba00 	call	1000bba0 <_Balloc>
1000bfe8:	14400515 	stw	r17,20(r2)
1000bfec:	14000415 	stw	r16,16(r2)
1000bff0:	dfc00217 	ldw	ra,8(sp)
1000bff4:	dc400117 	ldw	r17,4(sp)
1000bff8:	dc000017 	ldw	r16,0(sp)
1000bffc:	dec00304 	addi	sp,sp,12
1000c000:	f800283a 	ret

1000c004 <__multiply>:
1000c004:	deffef04 	addi	sp,sp,-68
1000c008:	dc400815 	stw	r17,32(sp)
1000c00c:	dc000715 	stw	r16,28(sp)
1000c010:	2c400417 	ldw	r17,16(r5)
1000c014:	34000417 	ldw	r16,16(r6)
1000c018:	dd800d15 	stw	r22,52(sp)
1000c01c:	dc800915 	stw	r18,36(sp)
1000c020:	dfc01015 	stw	ra,64(sp)
1000c024:	df000f15 	stw	fp,60(sp)
1000c028:	ddc00e15 	stw	r23,56(sp)
1000c02c:	dd400c15 	stw	r21,48(sp)
1000c030:	dd000b15 	stw	r20,44(sp)
1000c034:	dcc00a15 	stw	r19,40(sp)
1000c038:	2825883a 	mov	r18,r5
1000c03c:	302d883a 	mov	r22,r6
1000c040:	8c009116 	blt	r17,r16,1000c288 <__multiply+0x284>
1000c044:	8005883a 	mov	r2,r16
1000c048:	8821883a 	mov	r16,r17
1000c04c:	1023883a 	mov	r17,r2
1000c050:	90800217 	ldw	r2,8(r18)
1000c054:	8447883a 	add	r3,r16,r17
1000c058:	d8c00215 	stw	r3,8(sp)
1000c05c:	91400117 	ldw	r5,4(r18)
1000c060:	10c0010e 	bge	r2,r3,1000c068 <__multiply+0x64>
1000c064:	29400044 	addi	r5,r5,1
1000c068:	000bba00 	call	1000bba0 <_Balloc>
1000c06c:	d8c00217 	ldw	r3,8(sp)
1000c070:	d8800615 	stw	r2,24(sp)
1000c074:	18eb883a 	add	r21,r3,r3
1000c078:	ad6b883a 	add	r21,r21,r21
1000c07c:	10c00504 	addi	r3,r2,20
1000c080:	1d6b883a 	add	r21,r3,r21
1000c084:	d8c00115 	stw	r3,4(sp)
1000c088:	dd400315 	stw	r21,12(sp)
1000c08c:	1805883a 	mov	r2,r3
1000c090:	1d40042e 	bgeu	r3,r21,1000c0a4 <__multiply+0xa0>
1000c094:	d8c00317 	ldw	r3,12(sp)
1000c098:	10000015 	stw	zero,0(r2)
1000c09c:	10800104 	addi	r2,r2,4
1000c0a0:	10fffc36 	bltu	r2,r3,1000c094 <__alt_data_end+0xf800c094>
1000c0a4:	8c63883a 	add	r17,r17,r17
1000c0a8:	b5800504 	addi	r22,r22,20
1000c0ac:	8c63883a 	add	r17,r17,r17
1000c0b0:	94800504 	addi	r18,r18,20
1000c0b4:	8421883a 	add	r16,r16,r16
1000c0b8:	b463883a 	add	r17,r22,r17
1000c0bc:	8421883a 	add	r16,r16,r16
1000c0c0:	dd800015 	stw	r22,0(sp)
1000c0c4:	dc800415 	stw	r18,16(sp)
1000c0c8:	dc400515 	stw	r17,20(sp)
1000c0cc:	9429883a 	add	r20,r18,r16
1000c0d0:	b4404f2e 	bgeu	r22,r17,1000c210 <__multiply+0x20c>
1000c0d4:	d8c00017 	ldw	r3,0(sp)
1000c0d8:	1c800017 	ldw	r18,0(r3)
1000c0dc:	943fffcc 	andi	r16,r18,65535
1000c0e0:	80001e26 	beq	r16,zero,1000c15c <__multiply+0x158>
1000c0e4:	dd800117 	ldw	r22,4(sp)
1000c0e8:	dd400417 	ldw	r21,16(sp)
1000c0ec:	0025883a 	mov	r18,zero
1000c0f0:	adc00017 	ldw	r23,0(r21)
1000c0f4:	b4c00017 	ldw	r19,0(r22)
1000c0f8:	800b883a 	mov	r5,r16
1000c0fc:	b93fffcc 	andi	r4,r23,65535
1000c100:	0003dd40 	call	10003dd4 <__mulsi3>
1000c104:	9c7fffcc 	andi	r17,r19,65535
1000c108:	8885883a 	add	r2,r17,r2
1000c10c:	b808d43a 	srli	r4,r23,16
1000c110:	14a3883a 	add	r17,r2,r18
1000c114:	9826d43a 	srli	r19,r19,16
1000c118:	8824d43a 	srli	r18,r17,16
1000c11c:	800b883a 	mov	r5,r16
1000c120:	0003dd40 	call	10003dd4 <__mulsi3>
1000c124:	9885883a 	add	r2,r19,r2
1000c128:	14a7883a 	add	r19,r2,r18
1000c12c:	88ffffcc 	andi	r3,r17,65535
1000c130:	9822943a 	slli	r17,r19,16
1000c134:	ad400104 	addi	r21,r21,4
1000c138:	b005883a 	mov	r2,r22
1000c13c:	88c6b03a 	or	r3,r17,r3
1000c140:	b0c00015 	stw	r3,0(r22)
1000c144:	9824d43a 	srli	r18,r19,16
1000c148:	b5800104 	addi	r22,r22,4
1000c14c:	ad3fe836 	bltu	r21,r20,1000c0f0 <__alt_data_end+0xf800c0f0>
1000c150:	d8c00017 	ldw	r3,0(sp)
1000c154:	14800115 	stw	r18,4(r2)
1000c158:	1c800017 	ldw	r18,0(r3)
1000c15c:	9024d43a 	srli	r18,r18,16
1000c160:	90002226 	beq	r18,zero,1000c1ec <__multiply+0x1e8>
1000c164:	d8c00117 	ldw	r3,4(sp)
1000c168:	dd800417 	ldw	r22,16(sp)
1000c16c:	002f883a 	mov	r23,zero
1000c170:	1f000017 	ldw	fp,0(r3)
1000c174:	1823883a 	mov	r17,r3
1000c178:	182b883a 	mov	r21,r3
1000c17c:	e021883a 	mov	r16,fp
1000c180:	00000106 	br	1000c188 <__multiply+0x184>
1000c184:	982b883a 	mov	r21,r19
1000c188:	b100000b 	ldhu	r4,0(r22)
1000c18c:	8020d43a 	srli	r16,r16,16
1000c190:	900b883a 	mov	r5,r18
1000c194:	0003dd40 	call	10003dd4 <__mulsi3>
1000c198:	1405883a 	add	r2,r2,r16
1000c19c:	15ef883a 	add	r23,r2,r23
1000c1a0:	b804943a 	slli	r2,r23,16
1000c1a4:	e0ffffcc 	andi	r3,fp,65535
1000c1a8:	8c400104 	addi	r17,r17,4
1000c1ac:	10c6b03a 	or	r3,r2,r3
1000c1b0:	88ffff15 	stw	r3,-4(r17)
1000c1b4:	b5800104 	addi	r22,r22,4
1000c1b8:	b13fff17 	ldw	r4,-4(r22)
1000c1bc:	acc00104 	addi	r19,r21,4
1000c1c0:	900b883a 	mov	r5,r18
1000c1c4:	2008d43a 	srli	r4,r4,16
1000c1c8:	9c000017 	ldw	r16,0(r19)
1000c1cc:	0003dd40 	call	10003dd4 <__mulsi3>
1000c1d0:	b806d43a 	srli	r3,r23,16
1000c1d4:	813fffcc 	andi	r4,r16,65535
1000c1d8:	1105883a 	add	r2,r2,r4
1000c1dc:	10f9883a 	add	fp,r2,r3
1000c1e0:	e02ed43a 	srli	r23,fp,16
1000c1e4:	b53fe736 	bltu	r22,r20,1000c184 <__alt_data_end+0xf800c184>
1000c1e8:	af000115 	stw	fp,4(r21)
1000c1ec:	d8c00017 	ldw	r3,0(sp)
1000c1f0:	d9000517 	ldw	r4,20(sp)
1000c1f4:	18c00104 	addi	r3,r3,4
1000c1f8:	d8c00015 	stw	r3,0(sp)
1000c1fc:	d8c00117 	ldw	r3,4(sp)
1000c200:	18c00104 	addi	r3,r3,4
1000c204:	d8c00115 	stw	r3,4(sp)
1000c208:	d8c00017 	ldw	r3,0(sp)
1000c20c:	193fb136 	bltu	r3,r4,1000c0d4 <__alt_data_end+0xf800c0d4>
1000c210:	d8c00217 	ldw	r3,8(sp)
1000c214:	00c00c0e 	bge	zero,r3,1000c248 <__multiply+0x244>
1000c218:	d8c00317 	ldw	r3,12(sp)
1000c21c:	18bfff17 	ldw	r2,-4(r3)
1000c220:	1d7fff04 	addi	r21,r3,-4
1000c224:	10000326 	beq	r2,zero,1000c234 <__multiply+0x230>
1000c228:	00000706 	br	1000c248 <__multiply+0x244>
1000c22c:	a8800017 	ldw	r2,0(r21)
1000c230:	1000051e 	bne	r2,zero,1000c248 <__multiply+0x244>
1000c234:	d8c00217 	ldw	r3,8(sp)
1000c238:	ad7fff04 	addi	r21,r21,-4
1000c23c:	18ffffc4 	addi	r3,r3,-1
1000c240:	d8c00215 	stw	r3,8(sp)
1000c244:	183ff91e 	bne	r3,zero,1000c22c <__alt_data_end+0xf800c22c>
1000c248:	d8c00617 	ldw	r3,24(sp)
1000c24c:	d9000217 	ldw	r4,8(sp)
1000c250:	1805883a 	mov	r2,r3
1000c254:	19000415 	stw	r4,16(r3)
1000c258:	dfc01017 	ldw	ra,64(sp)
1000c25c:	df000f17 	ldw	fp,60(sp)
1000c260:	ddc00e17 	ldw	r23,56(sp)
1000c264:	dd800d17 	ldw	r22,52(sp)
1000c268:	dd400c17 	ldw	r21,48(sp)
1000c26c:	dd000b17 	ldw	r20,44(sp)
1000c270:	dcc00a17 	ldw	r19,40(sp)
1000c274:	dc800917 	ldw	r18,36(sp)
1000c278:	dc400817 	ldw	r17,32(sp)
1000c27c:	dc000717 	ldw	r16,28(sp)
1000c280:	dec01104 	addi	sp,sp,68
1000c284:	f800283a 	ret
1000c288:	3025883a 	mov	r18,r6
1000c28c:	282d883a 	mov	r22,r5
1000c290:	003f6f06 	br	1000c050 <__alt_data_end+0xf800c050>

1000c294 <__pow5mult>:
1000c294:	defffa04 	addi	sp,sp,-24
1000c298:	dcc00315 	stw	r19,12(sp)
1000c29c:	dc800215 	stw	r18,8(sp)
1000c2a0:	dc000015 	stw	r16,0(sp)
1000c2a4:	dfc00515 	stw	ra,20(sp)
1000c2a8:	dd000415 	stw	r20,16(sp)
1000c2ac:	dc400115 	stw	r17,4(sp)
1000c2b0:	308000cc 	andi	r2,r6,3
1000c2b4:	3021883a 	mov	r16,r6
1000c2b8:	2027883a 	mov	r19,r4
1000c2bc:	2825883a 	mov	r18,r5
1000c2c0:	10002e1e 	bne	r2,zero,1000c37c <__pow5mult+0xe8>
1000c2c4:	8021d0ba 	srai	r16,r16,2
1000c2c8:	80001a26 	beq	r16,zero,1000c334 <__pow5mult+0xa0>
1000c2cc:	9c401217 	ldw	r17,72(r19)
1000c2d0:	8800061e 	bne	r17,zero,1000c2ec <__pow5mult+0x58>
1000c2d4:	00003406 	br	1000c3a8 <__pow5mult+0x114>
1000c2d8:	8021d07a 	srai	r16,r16,1
1000c2dc:	80001526 	beq	r16,zero,1000c334 <__pow5mult+0xa0>
1000c2e0:	88800017 	ldw	r2,0(r17)
1000c2e4:	10001c26 	beq	r2,zero,1000c358 <__pow5mult+0xc4>
1000c2e8:	1023883a 	mov	r17,r2
1000c2ec:	80c0004c 	andi	r3,r16,1
1000c2f0:	183ff926 	beq	r3,zero,1000c2d8 <__alt_data_end+0xf800c2d8>
1000c2f4:	900b883a 	mov	r5,r18
1000c2f8:	880d883a 	mov	r6,r17
1000c2fc:	9809883a 	mov	r4,r19
1000c300:	000c0040 	call	1000c004 <__multiply>
1000c304:	90001b26 	beq	r18,zero,1000c374 <__pow5mult+0xe0>
1000c308:	91c00117 	ldw	r7,4(r18)
1000c30c:	98c01317 	ldw	r3,76(r19)
1000c310:	8021d07a 	srai	r16,r16,1
1000c314:	39cf883a 	add	r7,r7,r7
1000c318:	39cf883a 	add	r7,r7,r7
1000c31c:	19c7883a 	add	r3,r3,r7
1000c320:	19000017 	ldw	r4,0(r3)
1000c324:	91000015 	stw	r4,0(r18)
1000c328:	1c800015 	stw	r18,0(r3)
1000c32c:	1025883a 	mov	r18,r2
1000c330:	803feb1e 	bne	r16,zero,1000c2e0 <__alt_data_end+0xf800c2e0>
1000c334:	9005883a 	mov	r2,r18
1000c338:	dfc00517 	ldw	ra,20(sp)
1000c33c:	dd000417 	ldw	r20,16(sp)
1000c340:	dcc00317 	ldw	r19,12(sp)
1000c344:	dc800217 	ldw	r18,8(sp)
1000c348:	dc400117 	ldw	r17,4(sp)
1000c34c:	dc000017 	ldw	r16,0(sp)
1000c350:	dec00604 	addi	sp,sp,24
1000c354:	f800283a 	ret
1000c358:	9809883a 	mov	r4,r19
1000c35c:	880b883a 	mov	r5,r17
1000c360:	880d883a 	mov	r6,r17
1000c364:	000c0040 	call	1000c004 <__multiply>
1000c368:	88800015 	stw	r2,0(r17)
1000c36c:	10000015 	stw	zero,0(r2)
1000c370:	003fdd06 	br	1000c2e8 <__alt_data_end+0xf800c2e8>
1000c374:	1025883a 	mov	r18,r2
1000c378:	003fd706 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000c37c:	10bfffc4 	addi	r2,r2,-1
1000c380:	1085883a 	add	r2,r2,r2
1000c384:	00c40074 	movhi	r3,4097
1000c388:	18c8a204 	addi	r3,r3,8840
1000c38c:	1085883a 	add	r2,r2,r2
1000c390:	1885883a 	add	r2,r3,r2
1000c394:	11800017 	ldw	r6,0(r2)
1000c398:	000f883a 	mov	r7,zero
1000c39c:	000bc700 	call	1000bc70 <__multadd>
1000c3a0:	1025883a 	mov	r18,r2
1000c3a4:	003fc706 	br	1000c2c4 <__alt_data_end+0xf800c2c4>
1000c3a8:	05000044 	movi	r20,1
1000c3ac:	9809883a 	mov	r4,r19
1000c3b0:	a00b883a 	mov	r5,r20
1000c3b4:	000bba00 	call	1000bba0 <_Balloc>
1000c3b8:	1023883a 	mov	r17,r2
1000c3bc:	00809c44 	movi	r2,625
1000c3c0:	88800515 	stw	r2,20(r17)
1000c3c4:	8d000415 	stw	r20,16(r17)
1000c3c8:	9c401215 	stw	r17,72(r19)
1000c3cc:	88000015 	stw	zero,0(r17)
1000c3d0:	003fc606 	br	1000c2ec <__alt_data_end+0xf800c2ec>

1000c3d4 <__lshift>:
1000c3d4:	defff904 	addi	sp,sp,-28
1000c3d8:	dd000415 	stw	r20,16(sp)
1000c3dc:	dcc00315 	stw	r19,12(sp)
1000c3e0:	3029d17a 	srai	r20,r6,5
1000c3e4:	2cc00417 	ldw	r19,16(r5)
1000c3e8:	28800217 	ldw	r2,8(r5)
1000c3ec:	dd400515 	stw	r21,20(sp)
1000c3f0:	a4e7883a 	add	r19,r20,r19
1000c3f4:	dc800215 	stw	r18,8(sp)
1000c3f8:	dc400115 	stw	r17,4(sp)
1000c3fc:	dc000015 	stw	r16,0(sp)
1000c400:	dfc00615 	stw	ra,24(sp)
1000c404:	9c000044 	addi	r16,r19,1
1000c408:	2823883a 	mov	r17,r5
1000c40c:	302b883a 	mov	r21,r6
1000c410:	2025883a 	mov	r18,r4
1000c414:	29400117 	ldw	r5,4(r5)
1000c418:	1400030e 	bge	r2,r16,1000c428 <__lshift+0x54>
1000c41c:	1085883a 	add	r2,r2,r2
1000c420:	29400044 	addi	r5,r5,1
1000c424:	143ffd16 	blt	r2,r16,1000c41c <__alt_data_end+0xf800c41c>
1000c428:	9009883a 	mov	r4,r18
1000c42c:	000bba00 	call	1000bba0 <_Balloc>
1000c430:	11c00504 	addi	r7,r2,20
1000c434:	0500090e 	bge	zero,r20,1000c45c <__lshift+0x88>
1000c438:	3811883a 	mov	r8,r7
1000c43c:	0007883a 	mov	r3,zero
1000c440:	40000015 	stw	zero,0(r8)
1000c444:	18c00044 	addi	r3,r3,1
1000c448:	42000104 	addi	r8,r8,4
1000c44c:	1d3ffc1e 	bne	r3,r20,1000c440 <__alt_data_end+0xf800c440>
1000c450:	18c7883a 	add	r3,r3,r3
1000c454:	18c7883a 	add	r3,r3,r3
1000c458:	38cf883a 	add	r7,r7,r3
1000c45c:	89000417 	ldw	r4,16(r17)
1000c460:	88c00504 	addi	r3,r17,20
1000c464:	a98007cc 	andi	r6,r21,31
1000c468:	2109883a 	add	r4,r4,r4
1000c46c:	2109883a 	add	r4,r4,r4
1000c470:	1909883a 	add	r4,r3,r4
1000c474:	30002326 	beq	r6,zero,1000c504 <__lshift+0x130>
1000c478:	01400804 	movi	r5,32
1000c47c:	298bc83a 	sub	r5,r5,r6
1000c480:	0013883a 	mov	r9,zero
1000c484:	1a000017 	ldw	r8,0(r3)
1000c488:	3815883a 	mov	r10,r7
1000c48c:	39c00104 	addi	r7,r7,4
1000c490:	4190983a 	sll	r8,r8,r6
1000c494:	18c00104 	addi	r3,r3,4
1000c498:	4a10b03a 	or	r8,r9,r8
1000c49c:	3a3fff15 	stw	r8,-4(r7)
1000c4a0:	1a3fff17 	ldw	r8,-4(r3)
1000c4a4:	4152d83a 	srl	r9,r8,r5
1000c4a8:	193ff636 	bltu	r3,r4,1000c484 <__alt_data_end+0xf800c484>
1000c4ac:	52400115 	stw	r9,4(r10)
1000c4b0:	48000126 	beq	r9,zero,1000c4b8 <__lshift+0xe4>
1000c4b4:	9c000084 	addi	r16,r19,2
1000c4b8:	89000117 	ldw	r4,4(r17)
1000c4bc:	90c01317 	ldw	r3,76(r18)
1000c4c0:	843fffc4 	addi	r16,r16,-1
1000c4c4:	2109883a 	add	r4,r4,r4
1000c4c8:	2109883a 	add	r4,r4,r4
1000c4cc:	1907883a 	add	r3,r3,r4
1000c4d0:	19000017 	ldw	r4,0(r3)
1000c4d4:	14000415 	stw	r16,16(r2)
1000c4d8:	89000015 	stw	r4,0(r17)
1000c4dc:	1c400015 	stw	r17,0(r3)
1000c4e0:	dfc00617 	ldw	ra,24(sp)
1000c4e4:	dd400517 	ldw	r21,20(sp)
1000c4e8:	dd000417 	ldw	r20,16(sp)
1000c4ec:	dcc00317 	ldw	r19,12(sp)
1000c4f0:	dc800217 	ldw	r18,8(sp)
1000c4f4:	dc400117 	ldw	r17,4(sp)
1000c4f8:	dc000017 	ldw	r16,0(sp)
1000c4fc:	dec00704 	addi	sp,sp,28
1000c500:	f800283a 	ret
1000c504:	19400017 	ldw	r5,0(r3)
1000c508:	39c00104 	addi	r7,r7,4
1000c50c:	18c00104 	addi	r3,r3,4
1000c510:	397fff15 	stw	r5,-4(r7)
1000c514:	193ffb36 	bltu	r3,r4,1000c504 <__alt_data_end+0xf800c504>
1000c518:	003fe706 	br	1000c4b8 <__alt_data_end+0xf800c4b8>

1000c51c <__mcmp>:
1000c51c:	20800417 	ldw	r2,16(r4)
1000c520:	28c00417 	ldw	r3,16(r5)
1000c524:	10c5c83a 	sub	r2,r2,r3
1000c528:	1000111e 	bne	r2,zero,1000c570 <__mcmp+0x54>
1000c52c:	18c7883a 	add	r3,r3,r3
1000c530:	18c7883a 	add	r3,r3,r3
1000c534:	21000504 	addi	r4,r4,20
1000c538:	29400504 	addi	r5,r5,20
1000c53c:	20c5883a 	add	r2,r4,r3
1000c540:	28cb883a 	add	r5,r5,r3
1000c544:	00000106 	br	1000c54c <__mcmp+0x30>
1000c548:	20800a2e 	bgeu	r4,r2,1000c574 <__mcmp+0x58>
1000c54c:	10bfff04 	addi	r2,r2,-4
1000c550:	297fff04 	addi	r5,r5,-4
1000c554:	11800017 	ldw	r6,0(r2)
1000c558:	28c00017 	ldw	r3,0(r5)
1000c55c:	30fffa26 	beq	r6,r3,1000c548 <__alt_data_end+0xf800c548>
1000c560:	30c00236 	bltu	r6,r3,1000c56c <__mcmp+0x50>
1000c564:	00800044 	movi	r2,1
1000c568:	f800283a 	ret
1000c56c:	00bfffc4 	movi	r2,-1
1000c570:	f800283a 	ret
1000c574:	0005883a 	mov	r2,zero
1000c578:	f800283a 	ret

1000c57c <__mdiff>:
1000c57c:	defffb04 	addi	sp,sp,-20
1000c580:	dc000015 	stw	r16,0(sp)
1000c584:	2821883a 	mov	r16,r5
1000c588:	dcc00315 	stw	r19,12(sp)
1000c58c:	300b883a 	mov	r5,r6
1000c590:	2027883a 	mov	r19,r4
1000c594:	8009883a 	mov	r4,r16
1000c598:	dc800215 	stw	r18,8(sp)
1000c59c:	dfc00415 	stw	ra,16(sp)
1000c5a0:	dc400115 	stw	r17,4(sp)
1000c5a4:	3025883a 	mov	r18,r6
1000c5a8:	000c51c0 	call	1000c51c <__mcmp>
1000c5ac:	10005226 	beq	r2,zero,1000c6f8 <__mdiff+0x17c>
1000c5b0:	10004c16 	blt	r2,zero,1000c6e4 <__mdiff+0x168>
1000c5b4:	0023883a 	mov	r17,zero
1000c5b8:	81400117 	ldw	r5,4(r16)
1000c5bc:	9809883a 	mov	r4,r19
1000c5c0:	000bba00 	call	1000bba0 <_Balloc>
1000c5c4:	83400417 	ldw	r13,16(r16)
1000c5c8:	93800417 	ldw	r14,16(r18)
1000c5cc:	81000504 	addi	r4,r16,20
1000c5d0:	6b59883a 	add	r12,r13,r13
1000c5d4:	739d883a 	add	r14,r14,r14
1000c5d8:	6319883a 	add	r12,r12,r12
1000c5dc:	91800504 	addi	r6,r18,20
1000c5e0:	739d883a 	add	r14,r14,r14
1000c5e4:	14400315 	stw	r17,12(r2)
1000c5e8:	2319883a 	add	r12,r4,r12
1000c5ec:	339d883a 	add	r14,r6,r14
1000c5f0:	12400504 	addi	r9,r2,20
1000c5f4:	0007883a 	mov	r3,zero
1000c5f8:	22000017 	ldw	r8,0(r4)
1000c5fc:	32800017 	ldw	r10,0(r6)
1000c600:	4ac00104 	addi	r11,r9,4
1000c604:	41ffffcc 	andi	r7,r8,65535
1000c608:	38c7883a 	add	r3,r7,r3
1000c60c:	51ffffcc 	andi	r7,r10,65535
1000c610:	19cfc83a 	sub	r7,r3,r7
1000c614:	4010d43a 	srli	r8,r8,16
1000c618:	5014d43a 	srli	r10,r10,16
1000c61c:	3807d43a 	srai	r3,r7,16
1000c620:	39ffffcc 	andi	r7,r7,65535
1000c624:	4291c83a 	sub	r8,r8,r10
1000c628:	40c7883a 	add	r3,r8,r3
1000c62c:	1810943a 	slli	r8,r3,16
1000c630:	31800104 	addi	r6,r6,4
1000c634:	21000104 	addi	r4,r4,4
1000c638:	41ceb03a 	or	r7,r8,r7
1000c63c:	49c00015 	stw	r7,0(r9)
1000c640:	1807d43a 	srai	r3,r3,16
1000c644:	580b883a 	mov	r5,r11
1000c648:	5813883a 	mov	r9,r11
1000c64c:	33bfea36 	bltu	r6,r14,1000c5f8 <__alt_data_end+0xf800c5f8>
1000c650:	2011883a 	mov	r8,r4
1000c654:	2300152e 	bgeu	r4,r12,1000c6ac <__mdiff+0x130>
1000c658:	21400017 	ldw	r5,0(r4)
1000c65c:	4a400104 	addi	r9,r9,4
1000c660:	21000104 	addi	r4,r4,4
1000c664:	29ffffcc 	andi	r7,r5,65535
1000c668:	38c7883a 	add	r3,r7,r3
1000c66c:	280ad43a 	srli	r5,r5,16
1000c670:	180dd43a 	srai	r6,r3,16
1000c674:	19ffffcc 	andi	r7,r3,65535
1000c678:	3147883a 	add	r3,r6,r5
1000c67c:	180a943a 	slli	r5,r3,16
1000c680:	1807d43a 	srai	r3,r3,16
1000c684:	29ceb03a 	or	r7,r5,r7
1000c688:	49ffff15 	stw	r7,-4(r9)
1000c68c:	233ff236 	bltu	r4,r12,1000c658 <__alt_data_end+0xf800c658>
1000c690:	0206303a 	nor	r3,zero,r8
1000c694:	1b07883a 	add	r3,r3,r12
1000c698:	1806d0ba 	srli	r3,r3,2
1000c69c:	18c00044 	addi	r3,r3,1
1000c6a0:	18c7883a 	add	r3,r3,r3
1000c6a4:	18c7883a 	add	r3,r3,r3
1000c6a8:	58cb883a 	add	r5,r11,r3
1000c6ac:	28ffff04 	addi	r3,r5,-4
1000c6b0:	3800041e 	bne	r7,zero,1000c6c4 <__mdiff+0x148>
1000c6b4:	18ffff04 	addi	r3,r3,-4
1000c6b8:	19000017 	ldw	r4,0(r3)
1000c6bc:	6b7fffc4 	addi	r13,r13,-1
1000c6c0:	203ffc26 	beq	r4,zero,1000c6b4 <__alt_data_end+0xf800c6b4>
1000c6c4:	13400415 	stw	r13,16(r2)
1000c6c8:	dfc00417 	ldw	ra,16(sp)
1000c6cc:	dcc00317 	ldw	r19,12(sp)
1000c6d0:	dc800217 	ldw	r18,8(sp)
1000c6d4:	dc400117 	ldw	r17,4(sp)
1000c6d8:	dc000017 	ldw	r16,0(sp)
1000c6dc:	dec00504 	addi	sp,sp,20
1000c6e0:	f800283a 	ret
1000c6e4:	8005883a 	mov	r2,r16
1000c6e8:	04400044 	movi	r17,1
1000c6ec:	9021883a 	mov	r16,r18
1000c6f0:	1025883a 	mov	r18,r2
1000c6f4:	003fb006 	br	1000c5b8 <__alt_data_end+0xf800c5b8>
1000c6f8:	9809883a 	mov	r4,r19
1000c6fc:	000b883a 	mov	r5,zero
1000c700:	000bba00 	call	1000bba0 <_Balloc>
1000c704:	00c00044 	movi	r3,1
1000c708:	10c00415 	stw	r3,16(r2)
1000c70c:	10000515 	stw	zero,20(r2)
1000c710:	003fed06 	br	1000c6c8 <__alt_data_end+0xf800c6c8>

1000c714 <__ulp>:
1000c714:	295ffc2c 	andhi	r5,r5,32752
1000c718:	00bf3034 	movhi	r2,64704
1000c71c:	2887883a 	add	r3,r5,r2
1000c720:	00c0020e 	bge	zero,r3,1000c72c <__ulp+0x18>
1000c724:	0005883a 	mov	r2,zero
1000c728:	f800283a 	ret
1000c72c:	00c7c83a 	sub	r3,zero,r3
1000c730:	180bd53a 	srai	r5,r3,20
1000c734:	008004c4 	movi	r2,19
1000c738:	11400a0e 	bge	r2,r5,1000c764 <__ulp+0x50>
1000c73c:	00800c84 	movi	r2,50
1000c740:	0007883a 	mov	r3,zero
1000c744:	11400516 	blt	r2,r5,1000c75c <__ulp+0x48>
1000c748:	00800cc4 	movi	r2,51
1000c74c:	114bc83a 	sub	r5,r2,r5
1000c750:	00800044 	movi	r2,1
1000c754:	1144983a 	sll	r2,r2,r5
1000c758:	f800283a 	ret
1000c75c:	00800044 	movi	r2,1
1000c760:	f800283a 	ret
1000c764:	00800234 	movhi	r2,8
1000c768:	1147d83a 	sra	r3,r2,r5
1000c76c:	0005883a 	mov	r2,zero
1000c770:	f800283a 	ret

1000c774 <__b2d>:
1000c774:	defffa04 	addi	sp,sp,-24
1000c778:	dc000015 	stw	r16,0(sp)
1000c77c:	24000417 	ldw	r16,16(r4)
1000c780:	dc400115 	stw	r17,4(sp)
1000c784:	24400504 	addi	r17,r4,20
1000c788:	8421883a 	add	r16,r16,r16
1000c78c:	8421883a 	add	r16,r16,r16
1000c790:	8c21883a 	add	r16,r17,r16
1000c794:	dc800215 	stw	r18,8(sp)
1000c798:	84bfff17 	ldw	r18,-4(r16)
1000c79c:	dd000415 	stw	r20,16(sp)
1000c7a0:	dcc00315 	stw	r19,12(sp)
1000c7a4:	9009883a 	mov	r4,r18
1000c7a8:	2829883a 	mov	r20,r5
1000c7ac:	dfc00515 	stw	ra,20(sp)
1000c7b0:	000beb00 	call	1000beb0 <__hi0bits>
1000c7b4:	00c00804 	movi	r3,32
1000c7b8:	1887c83a 	sub	r3,r3,r2
1000c7bc:	a0c00015 	stw	r3,0(r20)
1000c7c0:	00c00284 	movi	r3,10
1000c7c4:	84ffff04 	addi	r19,r16,-4
1000c7c8:	18801216 	blt	r3,r2,1000c814 <__b2d+0xa0>
1000c7cc:	014002c4 	movi	r5,11
1000c7d0:	2889c83a 	sub	r4,r5,r2
1000c7d4:	9106d83a 	srl	r3,r18,r4
1000c7d8:	18cffc34 	orhi	r3,r3,16368
1000c7dc:	8cc0282e 	bgeu	r17,r19,1000c880 <__b2d+0x10c>
1000c7e0:	817ffe17 	ldw	r5,-8(r16)
1000c7e4:	290ad83a 	srl	r5,r5,r4
1000c7e8:	10800544 	addi	r2,r2,21
1000c7ec:	9084983a 	sll	r2,r18,r2
1000c7f0:	2884b03a 	or	r2,r5,r2
1000c7f4:	dfc00517 	ldw	ra,20(sp)
1000c7f8:	dd000417 	ldw	r20,16(sp)
1000c7fc:	dcc00317 	ldw	r19,12(sp)
1000c800:	dc800217 	ldw	r18,8(sp)
1000c804:	dc400117 	ldw	r17,4(sp)
1000c808:	dc000017 	ldw	r16,0(sp)
1000c80c:	dec00604 	addi	sp,sp,24
1000c810:	f800283a 	ret
1000c814:	113ffd44 	addi	r4,r2,-11
1000c818:	8cc00f2e 	bgeu	r17,r19,1000c858 <__b2d+0xe4>
1000c81c:	81bffe04 	addi	r6,r16,-8
1000c820:	817ffe17 	ldw	r5,-8(r16)
1000c824:	20001326 	beq	r4,zero,1000c874 <__b2d+0x100>
1000c828:	00c00ac4 	movi	r3,43
1000c82c:	1885c83a 	sub	r2,r3,r2
1000c830:	2886d83a 	srl	r3,r5,r2
1000c834:	9124983a 	sll	r18,r18,r4
1000c838:	90e4b03a 	or	r18,r18,r3
1000c83c:	90cffc34 	orhi	r3,r18,16368
1000c840:	8980112e 	bgeu	r17,r6,1000c888 <__b2d+0x114>
1000c844:	81bffd17 	ldw	r6,-12(r16)
1000c848:	308cd83a 	srl	r6,r6,r2
1000c84c:	2904983a 	sll	r2,r5,r4
1000c850:	1184b03a 	or	r2,r2,r6
1000c854:	003fe706 	br	1000c7f4 <__alt_data_end+0xf800c7f4>
1000c858:	20000526 	beq	r4,zero,1000c870 <__b2d+0xfc>
1000c85c:	9124983a 	sll	r18,r18,r4
1000c860:	000d883a 	mov	r6,zero
1000c864:	000b883a 	mov	r5,zero
1000c868:	90cffc34 	orhi	r3,r18,16368
1000c86c:	003ff706 	br	1000c84c <__alt_data_end+0xf800c84c>
1000c870:	000b883a 	mov	r5,zero
1000c874:	90cffc34 	orhi	r3,r18,16368
1000c878:	2805883a 	mov	r2,r5
1000c87c:	003fdd06 	br	1000c7f4 <__alt_data_end+0xf800c7f4>
1000c880:	000b883a 	mov	r5,zero
1000c884:	003fd806 	br	1000c7e8 <__alt_data_end+0xf800c7e8>
1000c888:	000d883a 	mov	r6,zero
1000c88c:	003fef06 	br	1000c84c <__alt_data_end+0xf800c84c>

1000c890 <__d2b>:
1000c890:	defff704 	addi	sp,sp,-36
1000c894:	dc000215 	stw	r16,8(sp)
1000c898:	3021883a 	mov	r16,r6
1000c89c:	dc400315 	stw	r17,12(sp)
1000c8a0:	8022907a 	slli	r17,r16,1
1000c8a4:	dd400715 	stw	r21,28(sp)
1000c8a8:	282b883a 	mov	r21,r5
1000c8ac:	01400044 	movi	r5,1
1000c8b0:	dd000615 	stw	r20,24(sp)
1000c8b4:	dcc00515 	stw	r19,20(sp)
1000c8b8:	dc800415 	stw	r18,16(sp)
1000c8bc:	dfc00815 	stw	ra,32(sp)
1000c8c0:	3829883a 	mov	r20,r7
1000c8c4:	dc800917 	ldw	r18,36(sp)
1000c8c8:	8822d57a 	srli	r17,r17,21
1000c8cc:	000bba00 	call	1000bba0 <_Balloc>
1000c8d0:	1027883a 	mov	r19,r2
1000c8d4:	00800434 	movhi	r2,16
1000c8d8:	10bfffc4 	addi	r2,r2,-1
1000c8dc:	808c703a 	and	r6,r16,r2
1000c8e0:	88000126 	beq	r17,zero,1000c8e8 <__d2b+0x58>
1000c8e4:	31800434 	orhi	r6,r6,16
1000c8e8:	d9800015 	stw	r6,0(sp)
1000c8ec:	a8001f26 	beq	r21,zero,1000c96c <__d2b+0xdc>
1000c8f0:	d9000104 	addi	r4,sp,4
1000c8f4:	dd400115 	stw	r21,4(sp)
1000c8f8:	000bf180 	call	1000bf18 <__lo0bits>
1000c8fc:	d8c00017 	ldw	r3,0(sp)
1000c900:	1000291e 	bne	r2,zero,1000c9a8 <__d2b+0x118>
1000c904:	d9000117 	ldw	r4,4(sp)
1000c908:	99000515 	stw	r4,20(r19)
1000c90c:	1820c03a 	cmpne	r16,r3,zero
1000c910:	84000044 	addi	r16,r16,1
1000c914:	98c00615 	stw	r3,24(r19)
1000c918:	9c000415 	stw	r16,16(r19)
1000c91c:	88001b1e 	bne	r17,zero,1000c98c <__d2b+0xfc>
1000c920:	800690ba 	slli	r3,r16,2
1000c924:	10bef384 	addi	r2,r2,-1074
1000c928:	a0800015 	stw	r2,0(r20)
1000c92c:	98c5883a 	add	r2,r19,r3
1000c930:	11000417 	ldw	r4,16(r2)
1000c934:	8020917a 	slli	r16,r16,5
1000c938:	000beb00 	call	1000beb0 <__hi0bits>
1000c93c:	8085c83a 	sub	r2,r16,r2
1000c940:	90800015 	stw	r2,0(r18)
1000c944:	9805883a 	mov	r2,r19
1000c948:	dfc00817 	ldw	ra,32(sp)
1000c94c:	dd400717 	ldw	r21,28(sp)
1000c950:	dd000617 	ldw	r20,24(sp)
1000c954:	dcc00517 	ldw	r19,20(sp)
1000c958:	dc800417 	ldw	r18,16(sp)
1000c95c:	dc400317 	ldw	r17,12(sp)
1000c960:	dc000217 	ldw	r16,8(sp)
1000c964:	dec00904 	addi	sp,sp,36
1000c968:	f800283a 	ret
1000c96c:	d809883a 	mov	r4,sp
1000c970:	000bf180 	call	1000bf18 <__lo0bits>
1000c974:	d8c00017 	ldw	r3,0(sp)
1000c978:	04000044 	movi	r16,1
1000c97c:	9c000415 	stw	r16,16(r19)
1000c980:	98c00515 	stw	r3,20(r19)
1000c984:	10800804 	addi	r2,r2,32
1000c988:	883fe526 	beq	r17,zero,1000c920 <__alt_data_end+0xf800c920>
1000c98c:	8c7ef344 	addi	r17,r17,-1075
1000c990:	88a3883a 	add	r17,r17,r2
1000c994:	00c00d44 	movi	r3,53
1000c998:	a4400015 	stw	r17,0(r20)
1000c99c:	1885c83a 	sub	r2,r3,r2
1000c9a0:	90800015 	stw	r2,0(r18)
1000c9a4:	003fe706 	br	1000c944 <__alt_data_end+0xf800c944>
1000c9a8:	01000804 	movi	r4,32
1000c9ac:	2089c83a 	sub	r4,r4,r2
1000c9b0:	1908983a 	sll	r4,r3,r4
1000c9b4:	d9400117 	ldw	r5,4(sp)
1000c9b8:	1886d83a 	srl	r3,r3,r2
1000c9bc:	2148b03a 	or	r4,r4,r5
1000c9c0:	99000515 	stw	r4,20(r19)
1000c9c4:	d8c00015 	stw	r3,0(sp)
1000c9c8:	003fd006 	br	1000c90c <__alt_data_end+0xf800c90c>

1000c9cc <__ratio>:
1000c9cc:	defff904 	addi	sp,sp,-28
1000c9d0:	dc400315 	stw	r17,12(sp)
1000c9d4:	2823883a 	mov	r17,r5
1000c9d8:	d9400104 	addi	r5,sp,4
1000c9dc:	dfc00615 	stw	ra,24(sp)
1000c9e0:	dcc00515 	stw	r19,20(sp)
1000c9e4:	dc800415 	stw	r18,16(sp)
1000c9e8:	2027883a 	mov	r19,r4
1000c9ec:	dc000215 	stw	r16,8(sp)
1000c9f0:	000c7740 	call	1000c774 <__b2d>
1000c9f4:	8809883a 	mov	r4,r17
1000c9f8:	d80b883a 	mov	r5,sp
1000c9fc:	1025883a 	mov	r18,r2
1000ca00:	1821883a 	mov	r16,r3
1000ca04:	000c7740 	call	1000c774 <__b2d>
1000ca08:	8a400417 	ldw	r9,16(r17)
1000ca0c:	9a000417 	ldw	r8,16(r19)
1000ca10:	100d883a 	mov	r6,r2
1000ca14:	d8800017 	ldw	r2,0(sp)
1000ca18:	4251c83a 	sub	r8,r8,r9
1000ca1c:	4012917a 	slli	r9,r8,5
1000ca20:	da000117 	ldw	r8,4(sp)
1000ca24:	4091c83a 	sub	r8,r8,r2
1000ca28:	4251883a 	add	r8,r8,r9
1000ca2c:	02000d0e 	bge	zero,r8,1000ca64 <__ratio+0x98>
1000ca30:	4010953a 	slli	r8,r8,20
1000ca34:	4421883a 	add	r16,r8,r16
1000ca38:	9009883a 	mov	r4,r18
1000ca3c:	800b883a 	mov	r5,r16
1000ca40:	180f883a 	mov	r7,r3
1000ca44:	00046980 	call	10004698 <__divdf3>
1000ca48:	dfc00617 	ldw	ra,24(sp)
1000ca4c:	dcc00517 	ldw	r19,20(sp)
1000ca50:	dc800417 	ldw	r18,16(sp)
1000ca54:	dc400317 	ldw	r17,12(sp)
1000ca58:	dc000217 	ldw	r16,8(sp)
1000ca5c:	dec00704 	addi	sp,sp,28
1000ca60:	f800283a 	ret
1000ca64:	4010953a 	slli	r8,r8,20
1000ca68:	1a07c83a 	sub	r3,r3,r8
1000ca6c:	003ff206 	br	1000ca38 <__alt_data_end+0xf800ca38>

1000ca70 <_mprec_log10>:
1000ca70:	defffe04 	addi	sp,sp,-8
1000ca74:	dc000015 	stw	r16,0(sp)
1000ca78:	dfc00115 	stw	ra,4(sp)
1000ca7c:	008005c4 	movi	r2,23
1000ca80:	2021883a 	mov	r16,r4
1000ca84:	11000d0e 	bge	r2,r4,1000cabc <_mprec_log10+0x4c>
1000ca88:	0005883a 	mov	r2,zero
1000ca8c:	00cffc34 	movhi	r3,16368
1000ca90:	843fffc4 	addi	r16,r16,-1
1000ca94:	1009883a 	mov	r4,r2
1000ca98:	180b883a 	mov	r5,r3
1000ca9c:	000d883a 	mov	r6,zero
1000caa0:	01d00934 	movhi	r7,16420
1000caa4:	000525c0 	call	1000525c <__muldf3>
1000caa8:	803ff91e 	bne	r16,zero,1000ca90 <__alt_data_end+0xf800ca90>
1000caac:	dfc00117 	ldw	ra,4(sp)
1000cab0:	dc000017 	ldw	r16,0(sp)
1000cab4:	dec00204 	addi	sp,sp,8
1000cab8:	f800283a 	ret
1000cabc:	202090fa 	slli	r16,r4,3
1000cac0:	00840074 	movhi	r2,4097
1000cac4:	1088b904 	addi	r2,r2,8932
1000cac8:	1421883a 	add	r16,r2,r16
1000cacc:	80800017 	ldw	r2,0(r16)
1000cad0:	80c00117 	ldw	r3,4(r16)
1000cad4:	dfc00117 	ldw	ra,4(sp)
1000cad8:	dc000017 	ldw	r16,0(sp)
1000cadc:	dec00204 	addi	sp,sp,8
1000cae0:	f800283a 	ret

1000cae4 <__copybits>:
1000cae4:	297fffc4 	addi	r5,r5,-1
1000cae8:	280fd17a 	srai	r7,r5,5
1000caec:	30c00417 	ldw	r3,16(r6)
1000caf0:	30800504 	addi	r2,r6,20
1000caf4:	39c00044 	addi	r7,r7,1
1000caf8:	18c7883a 	add	r3,r3,r3
1000cafc:	39cf883a 	add	r7,r7,r7
1000cb00:	18c7883a 	add	r3,r3,r3
1000cb04:	39cf883a 	add	r7,r7,r7
1000cb08:	10c7883a 	add	r3,r2,r3
1000cb0c:	21cf883a 	add	r7,r4,r7
1000cb10:	10c00d2e 	bgeu	r2,r3,1000cb48 <__copybits+0x64>
1000cb14:	200b883a 	mov	r5,r4
1000cb18:	12000017 	ldw	r8,0(r2)
1000cb1c:	29400104 	addi	r5,r5,4
1000cb20:	10800104 	addi	r2,r2,4
1000cb24:	2a3fff15 	stw	r8,-4(r5)
1000cb28:	10fffb36 	bltu	r2,r3,1000cb18 <__alt_data_end+0xf800cb18>
1000cb2c:	1985c83a 	sub	r2,r3,r6
1000cb30:	10bffac4 	addi	r2,r2,-21
1000cb34:	1004d0ba 	srli	r2,r2,2
1000cb38:	10800044 	addi	r2,r2,1
1000cb3c:	1085883a 	add	r2,r2,r2
1000cb40:	1085883a 	add	r2,r2,r2
1000cb44:	2089883a 	add	r4,r4,r2
1000cb48:	21c0032e 	bgeu	r4,r7,1000cb58 <__copybits+0x74>
1000cb4c:	20000015 	stw	zero,0(r4)
1000cb50:	21000104 	addi	r4,r4,4
1000cb54:	21fffd36 	bltu	r4,r7,1000cb4c <__alt_data_end+0xf800cb4c>
1000cb58:	f800283a 	ret

1000cb5c <__any_on>:
1000cb5c:	20c00417 	ldw	r3,16(r4)
1000cb60:	2805d17a 	srai	r2,r5,5
1000cb64:	21000504 	addi	r4,r4,20
1000cb68:	18800d0e 	bge	r3,r2,1000cba0 <__any_on+0x44>
1000cb6c:	18c7883a 	add	r3,r3,r3
1000cb70:	18c7883a 	add	r3,r3,r3
1000cb74:	20c7883a 	add	r3,r4,r3
1000cb78:	20c0192e 	bgeu	r4,r3,1000cbe0 <__any_on+0x84>
1000cb7c:	18bfff17 	ldw	r2,-4(r3)
1000cb80:	18ffff04 	addi	r3,r3,-4
1000cb84:	1000041e 	bne	r2,zero,1000cb98 <__any_on+0x3c>
1000cb88:	20c0142e 	bgeu	r4,r3,1000cbdc <__any_on+0x80>
1000cb8c:	18ffff04 	addi	r3,r3,-4
1000cb90:	19400017 	ldw	r5,0(r3)
1000cb94:	283ffc26 	beq	r5,zero,1000cb88 <__alt_data_end+0xf800cb88>
1000cb98:	00800044 	movi	r2,1
1000cb9c:	f800283a 	ret
1000cba0:	10c00a0e 	bge	r2,r3,1000cbcc <__any_on+0x70>
1000cba4:	1085883a 	add	r2,r2,r2
1000cba8:	1085883a 	add	r2,r2,r2
1000cbac:	294007cc 	andi	r5,r5,31
1000cbb0:	2087883a 	add	r3,r4,r2
1000cbb4:	283ff026 	beq	r5,zero,1000cb78 <__alt_data_end+0xf800cb78>
1000cbb8:	19800017 	ldw	r6,0(r3)
1000cbbc:	3144d83a 	srl	r2,r6,r5
1000cbc0:	114a983a 	sll	r5,r2,r5
1000cbc4:	29bff41e 	bne	r5,r6,1000cb98 <__alt_data_end+0xf800cb98>
1000cbc8:	003feb06 	br	1000cb78 <__alt_data_end+0xf800cb78>
1000cbcc:	1085883a 	add	r2,r2,r2
1000cbd0:	1085883a 	add	r2,r2,r2
1000cbd4:	2087883a 	add	r3,r4,r2
1000cbd8:	003fe706 	br	1000cb78 <__alt_data_end+0xf800cb78>
1000cbdc:	f800283a 	ret
1000cbe0:	0005883a 	mov	r2,zero
1000cbe4:	f800283a 	ret

1000cbe8 <_sbrk_r>:
1000cbe8:	defffd04 	addi	sp,sp,-12
1000cbec:	dc000015 	stw	r16,0(sp)
1000cbf0:	04040074 	movhi	r16,4097
1000cbf4:	dc400115 	stw	r17,4(sp)
1000cbf8:	84167e04 	addi	r16,r16,23032
1000cbfc:	2023883a 	mov	r17,r4
1000cc00:	2809883a 	mov	r4,r5
1000cc04:	dfc00215 	stw	ra,8(sp)
1000cc08:	80000015 	stw	zero,0(r16)
1000cc0c:	00100f00 	call	100100f0 <sbrk>
1000cc10:	00ffffc4 	movi	r3,-1
1000cc14:	10c00526 	beq	r2,r3,1000cc2c <_sbrk_r+0x44>
1000cc18:	dfc00217 	ldw	ra,8(sp)
1000cc1c:	dc400117 	ldw	r17,4(sp)
1000cc20:	dc000017 	ldw	r16,0(sp)
1000cc24:	dec00304 	addi	sp,sp,12
1000cc28:	f800283a 	ret
1000cc2c:	80c00017 	ldw	r3,0(r16)
1000cc30:	183ff926 	beq	r3,zero,1000cc18 <__alt_data_end+0xf800cc18>
1000cc34:	88c00015 	stw	r3,0(r17)
1000cc38:	003ff706 	br	1000cc18 <__alt_data_end+0xf800cc18>

1000cc3c <__sread>:
1000cc3c:	defffe04 	addi	sp,sp,-8
1000cc40:	dc000015 	stw	r16,0(sp)
1000cc44:	2821883a 	mov	r16,r5
1000cc48:	2940038f 	ldh	r5,14(r5)
1000cc4c:	dfc00115 	stw	ra,4(sp)
1000cc50:	000ef900 	call	1000ef90 <_read_r>
1000cc54:	10000716 	blt	r2,zero,1000cc74 <__sread+0x38>
1000cc58:	80c01417 	ldw	r3,80(r16)
1000cc5c:	1887883a 	add	r3,r3,r2
1000cc60:	80c01415 	stw	r3,80(r16)
1000cc64:	dfc00117 	ldw	ra,4(sp)
1000cc68:	dc000017 	ldw	r16,0(sp)
1000cc6c:	dec00204 	addi	sp,sp,8
1000cc70:	f800283a 	ret
1000cc74:	80c0030b 	ldhu	r3,12(r16)
1000cc78:	18fbffcc 	andi	r3,r3,61439
1000cc7c:	80c0030d 	sth	r3,12(r16)
1000cc80:	dfc00117 	ldw	ra,4(sp)
1000cc84:	dc000017 	ldw	r16,0(sp)
1000cc88:	dec00204 	addi	sp,sp,8
1000cc8c:	f800283a 	ret

1000cc90 <__seofread>:
1000cc90:	0005883a 	mov	r2,zero
1000cc94:	f800283a 	ret

1000cc98 <__swrite>:
1000cc98:	2880030b 	ldhu	r2,12(r5)
1000cc9c:	defffb04 	addi	sp,sp,-20
1000cca0:	dcc00315 	stw	r19,12(sp)
1000cca4:	dc800215 	stw	r18,8(sp)
1000cca8:	dc400115 	stw	r17,4(sp)
1000ccac:	dc000015 	stw	r16,0(sp)
1000ccb0:	dfc00415 	stw	ra,16(sp)
1000ccb4:	10c0400c 	andi	r3,r2,256
1000ccb8:	2821883a 	mov	r16,r5
1000ccbc:	2027883a 	mov	r19,r4
1000ccc0:	3025883a 	mov	r18,r6
1000ccc4:	3823883a 	mov	r17,r7
1000ccc8:	18000526 	beq	r3,zero,1000cce0 <__swrite+0x48>
1000cccc:	2940038f 	ldh	r5,14(r5)
1000ccd0:	000d883a 	mov	r6,zero
1000ccd4:	01c00084 	movi	r7,2
1000ccd8:	000edd80 	call	1000edd8 <_lseek_r>
1000ccdc:	8080030b 	ldhu	r2,12(r16)
1000cce0:	8140038f 	ldh	r5,14(r16)
1000cce4:	10bbffcc 	andi	r2,r2,61439
1000cce8:	9809883a 	mov	r4,r19
1000ccec:	900d883a 	mov	r6,r18
1000ccf0:	880f883a 	mov	r7,r17
1000ccf4:	8080030d 	sth	r2,12(r16)
1000ccf8:	dfc00417 	ldw	ra,16(sp)
1000ccfc:	dcc00317 	ldw	r19,12(sp)
1000cd00:	dc800217 	ldw	r18,8(sp)
1000cd04:	dc400117 	ldw	r17,4(sp)
1000cd08:	dc000017 	ldw	r16,0(sp)
1000cd0c:	dec00504 	addi	sp,sp,20
1000cd10:	000e4101 	jmpi	1000e410 <_write_r>

1000cd14 <__sseek>:
1000cd14:	defffe04 	addi	sp,sp,-8
1000cd18:	dc000015 	stw	r16,0(sp)
1000cd1c:	2821883a 	mov	r16,r5
1000cd20:	2940038f 	ldh	r5,14(r5)
1000cd24:	dfc00115 	stw	ra,4(sp)
1000cd28:	000edd80 	call	1000edd8 <_lseek_r>
1000cd2c:	00ffffc4 	movi	r3,-1
1000cd30:	10c00826 	beq	r2,r3,1000cd54 <__sseek+0x40>
1000cd34:	80c0030b 	ldhu	r3,12(r16)
1000cd38:	80801415 	stw	r2,80(r16)
1000cd3c:	18c40014 	ori	r3,r3,4096
1000cd40:	80c0030d 	sth	r3,12(r16)
1000cd44:	dfc00117 	ldw	ra,4(sp)
1000cd48:	dc000017 	ldw	r16,0(sp)
1000cd4c:	dec00204 	addi	sp,sp,8
1000cd50:	f800283a 	ret
1000cd54:	80c0030b 	ldhu	r3,12(r16)
1000cd58:	18fbffcc 	andi	r3,r3,61439
1000cd5c:	80c0030d 	sth	r3,12(r16)
1000cd60:	dfc00117 	ldw	ra,4(sp)
1000cd64:	dc000017 	ldw	r16,0(sp)
1000cd68:	dec00204 	addi	sp,sp,8
1000cd6c:	f800283a 	ret

1000cd70 <__sclose>:
1000cd70:	2940038f 	ldh	r5,14(r5)
1000cd74:	000e46c1 	jmpi	1000e46c <_close_r>

1000cd78 <strcmp>:
1000cd78:	2144b03a 	or	r2,r4,r5
1000cd7c:	108000cc 	andi	r2,r2,3
1000cd80:	1000171e 	bne	r2,zero,1000cde0 <strcmp+0x68>
1000cd84:	20800017 	ldw	r2,0(r4)
1000cd88:	28c00017 	ldw	r3,0(r5)
1000cd8c:	10c0141e 	bne	r2,r3,1000cde0 <strcmp+0x68>
1000cd90:	027fbff4 	movhi	r9,65279
1000cd94:	4a7fbfc4 	addi	r9,r9,-257
1000cd98:	0086303a 	nor	r3,zero,r2
1000cd9c:	02202074 	movhi	r8,32897
1000cda0:	1245883a 	add	r2,r2,r9
1000cda4:	42202004 	addi	r8,r8,-32640
1000cda8:	10c4703a 	and	r2,r2,r3
1000cdac:	1204703a 	and	r2,r2,r8
1000cdb0:	10000226 	beq	r2,zero,1000cdbc <strcmp+0x44>
1000cdb4:	00001706 	br	1000ce14 <strcmp+0x9c>
1000cdb8:	1000161e 	bne	r2,zero,1000ce14 <strcmp+0x9c>
1000cdbc:	21000104 	addi	r4,r4,4
1000cdc0:	20c00017 	ldw	r3,0(r4)
1000cdc4:	29400104 	addi	r5,r5,4
1000cdc8:	29800017 	ldw	r6,0(r5)
1000cdcc:	1a4f883a 	add	r7,r3,r9
1000cdd0:	00c4303a 	nor	r2,zero,r3
1000cdd4:	3884703a 	and	r2,r7,r2
1000cdd8:	1204703a 	and	r2,r2,r8
1000cddc:	19bff626 	beq	r3,r6,1000cdb8 <__alt_data_end+0xf800cdb8>
1000cde0:	20800007 	ldb	r2,0(r4)
1000cde4:	1000051e 	bne	r2,zero,1000cdfc <strcmp+0x84>
1000cde8:	00000606 	br	1000ce04 <strcmp+0x8c>
1000cdec:	21000044 	addi	r4,r4,1
1000cdf0:	20800007 	ldb	r2,0(r4)
1000cdf4:	29400044 	addi	r5,r5,1
1000cdf8:	10000226 	beq	r2,zero,1000ce04 <strcmp+0x8c>
1000cdfc:	28c00007 	ldb	r3,0(r5)
1000ce00:	10fffa26 	beq	r2,r3,1000cdec <__alt_data_end+0xf800cdec>
1000ce04:	20800003 	ldbu	r2,0(r4)
1000ce08:	28c00003 	ldbu	r3,0(r5)
1000ce0c:	10c5c83a 	sub	r2,r2,r3
1000ce10:	f800283a 	ret
1000ce14:	0005883a 	mov	r2,zero
1000ce18:	f800283a 	ret

1000ce1c <strlen>:
1000ce1c:	208000cc 	andi	r2,r4,3
1000ce20:	10002026 	beq	r2,zero,1000cea4 <strlen+0x88>
1000ce24:	20800007 	ldb	r2,0(r4)
1000ce28:	10002026 	beq	r2,zero,1000ceac <strlen+0x90>
1000ce2c:	2005883a 	mov	r2,r4
1000ce30:	00000206 	br	1000ce3c <strlen+0x20>
1000ce34:	10c00007 	ldb	r3,0(r2)
1000ce38:	18001826 	beq	r3,zero,1000ce9c <strlen+0x80>
1000ce3c:	10800044 	addi	r2,r2,1
1000ce40:	10c000cc 	andi	r3,r2,3
1000ce44:	183ffb1e 	bne	r3,zero,1000ce34 <__alt_data_end+0xf800ce34>
1000ce48:	10c00017 	ldw	r3,0(r2)
1000ce4c:	01ffbff4 	movhi	r7,65279
1000ce50:	39ffbfc4 	addi	r7,r7,-257
1000ce54:	00ca303a 	nor	r5,zero,r3
1000ce58:	01a02074 	movhi	r6,32897
1000ce5c:	19c7883a 	add	r3,r3,r7
1000ce60:	31a02004 	addi	r6,r6,-32640
1000ce64:	1946703a 	and	r3,r3,r5
1000ce68:	1986703a 	and	r3,r3,r6
1000ce6c:	1800091e 	bne	r3,zero,1000ce94 <strlen+0x78>
1000ce70:	10800104 	addi	r2,r2,4
1000ce74:	10c00017 	ldw	r3,0(r2)
1000ce78:	19cb883a 	add	r5,r3,r7
1000ce7c:	00c6303a 	nor	r3,zero,r3
1000ce80:	28c6703a 	and	r3,r5,r3
1000ce84:	1986703a 	and	r3,r3,r6
1000ce88:	183ff926 	beq	r3,zero,1000ce70 <__alt_data_end+0xf800ce70>
1000ce8c:	00000106 	br	1000ce94 <strlen+0x78>
1000ce90:	10800044 	addi	r2,r2,1
1000ce94:	10c00007 	ldb	r3,0(r2)
1000ce98:	183ffd1e 	bne	r3,zero,1000ce90 <__alt_data_end+0xf800ce90>
1000ce9c:	1105c83a 	sub	r2,r2,r4
1000cea0:	f800283a 	ret
1000cea4:	2005883a 	mov	r2,r4
1000cea8:	003fe706 	br	1000ce48 <__alt_data_end+0xf800ce48>
1000ceac:	0005883a 	mov	r2,zero
1000ceb0:	f800283a 	ret

1000ceb4 <__sprint_r.part.0>:
1000ceb4:	28801917 	ldw	r2,100(r5)
1000ceb8:	defff604 	addi	sp,sp,-40
1000cebc:	dd400515 	stw	r21,20(sp)
1000cec0:	dcc00315 	stw	r19,12(sp)
1000cec4:	dfc00915 	stw	ra,36(sp)
1000cec8:	df000815 	stw	fp,32(sp)
1000cecc:	ddc00715 	stw	r23,28(sp)
1000ced0:	dd800615 	stw	r22,24(sp)
1000ced4:	dd000415 	stw	r20,16(sp)
1000ced8:	dc800215 	stw	r18,8(sp)
1000cedc:	dc400115 	stw	r17,4(sp)
1000cee0:	dc000015 	stw	r16,0(sp)
1000cee4:	1088000c 	andi	r2,r2,8192
1000cee8:	2827883a 	mov	r19,r5
1000ceec:	302b883a 	mov	r21,r6
1000cef0:	10002d26 	beq	r2,zero,1000cfa8 <__sprint_r.part.0+0xf4>
1000cef4:	30800217 	ldw	r2,8(r6)
1000cef8:	35800017 	ldw	r22,0(r6)
1000cefc:	10002826 	beq	r2,zero,1000cfa0 <__sprint_r.part.0+0xec>
1000cf00:	2029883a 	mov	r20,r4
1000cf04:	b5c00104 	addi	r23,r22,4
1000cf08:	04bfffc4 	movi	r18,-1
1000cf0c:	bc400017 	ldw	r17,0(r23)
1000cf10:	b4000017 	ldw	r16,0(r22)
1000cf14:	0039883a 	mov	fp,zero
1000cf18:	8822d0ba 	srli	r17,r17,2
1000cf1c:	04400316 	blt	zero,r17,1000cf2c <__sprint_r.part.0+0x78>
1000cf20:	00001706 	br	1000cf80 <__sprint_r.part.0+0xcc>
1000cf24:	84000104 	addi	r16,r16,4
1000cf28:	8f001526 	beq	r17,fp,1000cf80 <__sprint_r.part.0+0xcc>
1000cf2c:	81400017 	ldw	r5,0(r16)
1000cf30:	a009883a 	mov	r4,r20
1000cf34:	980d883a 	mov	r6,r19
1000cf38:	000e6ac0 	call	1000e6ac <_fputwc_r>
1000cf3c:	e7000044 	addi	fp,fp,1
1000cf40:	14bff81e 	bne	r2,r18,1000cf24 <__alt_data_end+0xf800cf24>
1000cf44:	9005883a 	mov	r2,r18
1000cf48:	a8000215 	stw	zero,8(r21)
1000cf4c:	a8000115 	stw	zero,4(r21)
1000cf50:	dfc00917 	ldw	ra,36(sp)
1000cf54:	df000817 	ldw	fp,32(sp)
1000cf58:	ddc00717 	ldw	r23,28(sp)
1000cf5c:	dd800617 	ldw	r22,24(sp)
1000cf60:	dd400517 	ldw	r21,20(sp)
1000cf64:	dd000417 	ldw	r20,16(sp)
1000cf68:	dcc00317 	ldw	r19,12(sp)
1000cf6c:	dc800217 	ldw	r18,8(sp)
1000cf70:	dc400117 	ldw	r17,4(sp)
1000cf74:	dc000017 	ldw	r16,0(sp)
1000cf78:	dec00a04 	addi	sp,sp,40
1000cf7c:	f800283a 	ret
1000cf80:	a8c00217 	ldw	r3,8(r21)
1000cf84:	8c63883a 	add	r17,r17,r17
1000cf88:	8c63883a 	add	r17,r17,r17
1000cf8c:	1c45c83a 	sub	r2,r3,r17
1000cf90:	a8800215 	stw	r2,8(r21)
1000cf94:	b5800204 	addi	r22,r22,8
1000cf98:	bdc00204 	addi	r23,r23,8
1000cf9c:	103fdb1e 	bne	r2,zero,1000cf0c <__alt_data_end+0xf800cf0c>
1000cfa0:	0005883a 	mov	r2,zero
1000cfa4:	003fe806 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000cfa8:	000e8e00 	call	1000e8e0 <__sfvwrite_r>
1000cfac:	003fe606 	br	1000cf48 <__alt_data_end+0xf800cf48>

1000cfb0 <__sprint_r>:
1000cfb0:	30c00217 	ldw	r3,8(r6)
1000cfb4:	18000126 	beq	r3,zero,1000cfbc <__sprint_r+0xc>
1000cfb8:	000ceb41 	jmpi	1000ceb4 <__sprint_r.part.0>
1000cfbc:	30000115 	stw	zero,4(r6)
1000cfc0:	0005883a 	mov	r2,zero
1000cfc4:	f800283a 	ret

1000cfc8 <___vfiprintf_internal_r>:
1000cfc8:	defeca04 	addi	sp,sp,-1240
1000cfcc:	dcc12f15 	stw	r19,1212(sp)
1000cfd0:	dfc13515 	stw	ra,1236(sp)
1000cfd4:	df013415 	stw	fp,1232(sp)
1000cfd8:	ddc13315 	stw	r23,1228(sp)
1000cfdc:	dd813215 	stw	r22,1224(sp)
1000cfe0:	dd413115 	stw	r21,1220(sp)
1000cfe4:	dd013015 	stw	r20,1216(sp)
1000cfe8:	dc812e15 	stw	r18,1208(sp)
1000cfec:	dc412d15 	stw	r17,1204(sp)
1000cff0:	dc012c15 	stw	r16,1200(sp)
1000cff4:	d9012115 	stw	r4,1156(sp)
1000cff8:	d9412015 	stw	r5,1152(sp)
1000cffc:	d9c12315 	stw	r7,1164(sp)
1000d000:	3027883a 	mov	r19,r6
1000d004:	20000226 	beq	r4,zero,1000d010 <___vfiprintf_internal_r+0x48>
1000d008:	20800e17 	ldw	r2,56(r4)
1000d00c:	1000f726 	beq	r2,zero,1000d3ec <___vfiprintf_internal_r+0x424>
1000d010:	d8812017 	ldw	r2,1152(sp)
1000d014:	10c0030b 	ldhu	r3,12(r2)
1000d018:	1908000c 	andi	r4,r3,8192
1000d01c:	1805883a 	mov	r2,r3
1000d020:	2000081e 	bne	r4,zero,1000d044 <___vfiprintf_internal_r+0x7c>
1000d024:	d9412017 	ldw	r5,1152(sp)
1000d028:	18880014 	ori	r2,r3,8192
1000d02c:	00f7ffc4 	movi	r3,-8193
1000d030:	29001917 	ldw	r4,100(r5)
1000d034:	2880030d 	sth	r2,12(r5)
1000d038:	20c8703a 	and	r4,r4,r3
1000d03c:	29001915 	stw	r4,100(r5)
1000d040:	1007883a 	mov	r3,r2
1000d044:	1100020c 	andi	r4,r2,8
1000d048:	2000a726 	beq	r4,zero,1000d2e8 <___vfiprintf_internal_r+0x320>
1000d04c:	d9412017 	ldw	r5,1152(sp)
1000d050:	29000417 	ldw	r4,16(r5)
1000d054:	2000a426 	beq	r4,zero,1000d2e8 <___vfiprintf_internal_r+0x320>
1000d058:	1080068c 	andi	r2,r2,26
1000d05c:	01000284 	movi	r4,10
1000d060:	1100ab26 	beq	r2,r4,1000d310 <___vfiprintf_internal_r+0x348>
1000d064:	d9010a04 	addi	r4,sp,1064
1000d068:	d94109c4 	addi	r5,sp,1063
1000d06c:	07040074 	movhi	fp,4097
1000d070:	04440074 	movhi	r17,4097
1000d074:	2145c83a 	sub	r2,r4,r5
1000d078:	e708ef04 	addi	fp,fp,9148
1000d07c:	8c48eb04 	addi	r17,r17,9132
1000d080:	d9011e15 	stw	r4,1144(sp)
1000d084:	d9411f15 	stw	r5,1148(sp)
1000d088:	dec11a15 	stw	sp,1128(sp)
1000d08c:	d8011c15 	stw	zero,1136(sp)
1000d090:	d8011b15 	stw	zero,1132(sp)
1000d094:	d8012715 	stw	zero,1180(sp)
1000d098:	d8012515 	stw	zero,1172(sp)
1000d09c:	d811883a 	mov	r8,sp
1000d0a0:	d8812815 	stw	r2,1184(sp)
1000d0a4:	982f883a 	mov	r23,r19
1000d0a8:	b8800007 	ldb	r2,0(r23)
1000d0ac:	1003b026 	beq	r2,zero,1000df70 <___vfiprintf_internal_r+0xfa8>
1000d0b0:	01000944 	movi	r4,37
1000d0b4:	1103ae26 	beq	r2,r4,1000df70 <___vfiprintf_internal_r+0xfa8>
1000d0b8:	b805883a 	mov	r2,r23
1000d0bc:	00000106 	br	1000d0c4 <___vfiprintf_internal_r+0xfc>
1000d0c0:	19000326 	beq	r3,r4,1000d0d0 <___vfiprintf_internal_r+0x108>
1000d0c4:	10800044 	addi	r2,r2,1
1000d0c8:	10c00007 	ldb	r3,0(r2)
1000d0cc:	183ffc1e 	bne	r3,zero,1000d0c0 <__alt_data_end+0xf800d0c0>
1000d0d0:	15e1c83a 	sub	r16,r2,r23
1000d0d4:	1029883a 	mov	r20,r2
1000d0d8:	80001026 	beq	r16,zero,1000d11c <___vfiprintf_internal_r+0x154>
1000d0dc:	d8c11c17 	ldw	r3,1136(sp)
1000d0e0:	d8811b17 	ldw	r2,1132(sp)
1000d0e4:	45c00015 	stw	r23,0(r8)
1000d0e8:	80c7883a 	add	r3,r16,r3
1000d0ec:	10800044 	addi	r2,r2,1
1000d0f0:	44000115 	stw	r16,4(r8)
1000d0f4:	d8c11c15 	stw	r3,1136(sp)
1000d0f8:	d8811b15 	stw	r2,1132(sp)
1000d0fc:	010001c4 	movi	r4,7
1000d100:	2080740e 	bge	r4,r2,1000d2d4 <___vfiprintf_internal_r+0x30c>
1000d104:	1803a71e 	bne	r3,zero,1000dfa4 <___vfiprintf_internal_r+0xfdc>
1000d108:	d8c12517 	ldw	r3,1172(sp)
1000d10c:	d8011b15 	stw	zero,1132(sp)
1000d110:	d811883a 	mov	r8,sp
1000d114:	1c07883a 	add	r3,r3,r16
1000d118:	d8c12515 	stw	r3,1172(sp)
1000d11c:	a0800007 	ldb	r2,0(r20)
1000d120:	1002bf26 	beq	r2,zero,1000dc20 <___vfiprintf_internal_r+0xc58>
1000d124:	a5c00044 	addi	r23,r20,1
1000d128:	a1800047 	ldb	r6,1(r20)
1000d12c:	d8011d85 	stb	zero,1142(sp)
1000d130:	d8012205 	stb	zero,1160(sp)
1000d134:	043fffc4 	movi	r16,-1
1000d138:	d8012415 	stw	zero,1168(sp)
1000d13c:	0025883a 	mov	r18,zero
1000d140:	05001604 	movi	r20,88
1000d144:	05400244 	movi	r21,9
1000d148:	4027883a 	mov	r19,r8
1000d14c:	bdc00044 	addi	r23,r23,1
1000d150:	30bff804 	addi	r2,r6,-32
1000d154:	a0825636 	bltu	r20,r2,1000dab0 <___vfiprintf_internal_r+0xae8>
1000d158:	100490ba 	slli	r2,r2,2
1000d15c:	01040074 	movhi	r4,4097
1000d160:	21345c04 	addi	r4,r4,-11920
1000d164:	1105883a 	add	r2,r2,r4
1000d168:	10800017 	ldw	r2,0(r2)
1000d16c:	1000683a 	jmp	r2
1000d170:	1000da40 	call	11000da4 <_gp+0xfe4ef8>
1000d174:	1000dab0 	cmpltui	zero,r2,874
1000d178:	1000dab0 	cmpltui	zero,r2,874
1000d17c:	1000daa4 	muli	zero,r2,874
1000d180:	1000dab0 	cmpltui	zero,r2,874
1000d184:	1000dab0 	cmpltui	zero,r2,874
1000d188:	1000dab0 	cmpltui	zero,r2,874
1000d18c:	1000dab0 	cmpltui	zero,r2,874
1000d190:	1000dab0 	cmpltui	zero,r2,874
1000d194:	1000dab0 	cmpltui	zero,r2,874
1000d198:	1000d830 	cmpltui	zero,r2,864
1000d19c:	1000da58 	cmpnei	zero,r2,873
1000d1a0:	1000dab0 	cmpltui	zero,r2,874
1000d1a4:	1000d404 	addi	zero,r2,848
1000d1a8:	1000d854 	ori	zero,r2,865
1000d1ac:	1000dab0 	cmpltui	zero,r2,874
1000d1b0:	1000d410 	cmplti	zero,r2,848
1000d1b4:	1000d41c 	xori	zero,r2,848
1000d1b8:	1000d41c 	xori	zero,r2,848
1000d1bc:	1000d41c 	xori	zero,r2,848
1000d1c0:	1000d41c 	xori	zero,r2,848
1000d1c4:	1000d41c 	xori	zero,r2,848
1000d1c8:	1000d41c 	xori	zero,r2,848
1000d1cc:	1000d41c 	xori	zero,r2,848
1000d1d0:	1000d41c 	xori	zero,r2,848
1000d1d4:	1000d41c 	xori	zero,r2,848
1000d1d8:	1000dab0 	cmpltui	zero,r2,874
1000d1dc:	1000dab0 	cmpltui	zero,r2,874
1000d1e0:	1000dab0 	cmpltui	zero,r2,874
1000d1e4:	1000dab0 	cmpltui	zero,r2,874
1000d1e8:	1000dab0 	cmpltui	zero,r2,874
1000d1ec:	1000dab0 	cmpltui	zero,r2,874
1000d1f0:	1000dab0 	cmpltui	zero,r2,874
1000d1f4:	1000dab0 	cmpltui	zero,r2,874
1000d1f8:	1000dab0 	cmpltui	zero,r2,874
1000d1fc:	1000dab0 	cmpltui	zero,r2,874
1000d200:	1000d45c 	xori	zero,r2,849
1000d204:	1000dab0 	cmpltui	zero,r2,874
1000d208:	1000dab0 	cmpltui	zero,r2,874
1000d20c:	1000dab0 	cmpltui	zero,r2,874
1000d210:	1000dab0 	cmpltui	zero,r2,874
1000d214:	1000dab0 	cmpltui	zero,r2,874
1000d218:	1000dab0 	cmpltui	zero,r2,874
1000d21c:	1000dab0 	cmpltui	zero,r2,874
1000d220:	1000dab0 	cmpltui	zero,r2,874
1000d224:	1000dab0 	cmpltui	zero,r2,874
1000d228:	1000dab0 	cmpltui	zero,r2,874
1000d22c:	1000d74c 	andi	zero,r2,861
1000d230:	1000dab0 	cmpltui	zero,r2,874
1000d234:	1000dab0 	cmpltui	zero,r2,874
1000d238:	1000dab0 	cmpltui	zero,r2,874
1000d23c:	1000dab0 	cmpltui	zero,r2,874
1000d240:	1000dab0 	cmpltui	zero,r2,874
1000d244:	1000d78c 	andi	zero,r2,862
1000d248:	1000dab0 	cmpltui	zero,r2,874
1000d24c:	1000dab0 	cmpltui	zero,r2,874
1000d250:	1000d7d0 	cmplti	zero,r2,863
1000d254:	1000dab0 	cmpltui	zero,r2,874
1000d258:	1000dab0 	cmpltui	zero,r2,874
1000d25c:	1000dab0 	cmpltui	zero,r2,874
1000d260:	1000dab0 	cmpltui	zero,r2,874
1000d264:	1000dab0 	cmpltui	zero,r2,874
1000d268:	1000dab0 	cmpltui	zero,r2,874
1000d26c:	1000dab0 	cmpltui	zero,r2,874
1000d270:	1000dab0 	cmpltui	zero,r2,874
1000d274:	1000dab0 	cmpltui	zero,r2,874
1000d278:	1000dab0 	cmpltui	zero,r2,874
1000d27c:	1000d718 	cmpnei	zero,r2,860
1000d280:	1000da68 	cmpgeui	zero,r2,873
1000d284:	1000dab0 	cmpltui	zero,r2,874
1000d288:	1000dab0 	cmpltui	zero,r2,874
1000d28c:	1000dab0 	cmpltui	zero,r2,874
1000d290:	1000d8a4 	muli	zero,r2,866
1000d294:	1000da68 	cmpgeui	zero,r2,873
1000d298:	1000dab0 	cmpltui	zero,r2,874
1000d29c:	1000dab0 	cmpltui	zero,r2,874
1000d2a0:	1000d7bc 	xorhi	zero,r2,862
1000d2a4:	1000dab0 	cmpltui	zero,r2,874
1000d2a8:	1000da08 	cmpgei	zero,r2,872
1000d2ac:	1000d990 	cmplti	zero,r2,870
1000d2b0:	1000d9c4 	addi	zero,r2,871
1000d2b4:	1000d8b0 	cmpltui	zero,r2,866
1000d2b8:	1000dab0 	cmpltui	zero,r2,874
1000d2bc:	1000d8bc 	xorhi	zero,r2,866
1000d2c0:	1000dab0 	cmpltui	zero,r2,874
1000d2c4:	1000d918 	cmpnei	zero,r2,868
1000d2c8:	1000dab0 	cmpltui	zero,r2,874
1000d2cc:	1000dab0 	cmpltui	zero,r2,874
1000d2d0:	1000d94c 	andi	zero,r2,869
1000d2d4:	42000204 	addi	r8,r8,8
1000d2d8:	d8c12517 	ldw	r3,1172(sp)
1000d2dc:	1c07883a 	add	r3,r3,r16
1000d2e0:	d8c12515 	stw	r3,1172(sp)
1000d2e4:	003f8d06 	br	1000d11c <__alt_data_end+0xf800d11c>
1000d2e8:	d9012117 	ldw	r4,1156(sp)
1000d2ec:	d9412017 	ldw	r5,1152(sp)
1000d2f0:	000880c0 	call	1000880c <__swsetup_r>
1000d2f4:	1000301e 	bne	r2,zero,1000d3b8 <___vfiprintf_internal_r+0x3f0>
1000d2f8:	d8812017 	ldw	r2,1152(sp)
1000d2fc:	01000284 	movi	r4,10
1000d300:	10c0030b 	ldhu	r3,12(r2)
1000d304:	1805883a 	mov	r2,r3
1000d308:	1080068c 	andi	r2,r2,26
1000d30c:	113f551e 	bne	r2,r4,1000d064 <__alt_data_end+0xf800d064>
1000d310:	d9012017 	ldw	r4,1152(sp)
1000d314:	2080038b 	ldhu	r2,14(r4)
1000d318:	113fffcc 	andi	r4,r2,65535
1000d31c:	2120001c 	xori	r4,r4,32768
1000d320:	21200004 	addi	r4,r4,-32768
1000d324:	203f4f16 	blt	r4,zero,1000d064 <__alt_data_end+0xf800d064>
1000d328:	d9412017 	ldw	r5,1152(sp)
1000d32c:	d9012117 	ldw	r4,1156(sp)
1000d330:	d9c12317 	ldw	r7,1164(sp)
1000d334:	2b001917 	ldw	r12,100(r5)
1000d338:	2ac00717 	ldw	r11,28(r5)
1000d33c:	2a800917 	ldw	r10,36(r5)
1000d340:	02010004 	movi	r8,1024
1000d344:	18ffff4c 	andi	r3,r3,65533
1000d348:	da0b883a 	add	r5,sp,r8
1000d34c:	980d883a 	mov	r6,r19
1000d350:	d8c1030d 	sth	r3,1036(sp)
1000d354:	db011915 	stw	r12,1124(sp)
1000d358:	d881038d 	sth	r2,1038(sp)
1000d35c:	dac10715 	stw	r11,1052(sp)
1000d360:	da810915 	stw	r10,1060(sp)
1000d364:	dec10015 	stw	sp,1024(sp)
1000d368:	dec10415 	stw	sp,1040(sp)
1000d36c:	da010215 	stw	r8,1032(sp)
1000d370:	da010515 	stw	r8,1044(sp)
1000d374:	d8010615 	stw	zero,1048(sp)
1000d378:	000cfc80 	call	1000cfc8 <___vfiprintf_internal_r>
1000d37c:	1021883a 	mov	r16,r2
1000d380:	10000416 	blt	r2,zero,1000d394 <___vfiprintf_internal_r+0x3cc>
1000d384:	d9012117 	ldw	r4,1156(sp)
1000d388:	d9410004 	addi	r5,sp,1024
1000d38c:	000a28c0 	call	1000a28c <_fflush_r>
1000d390:	10040f1e 	bne	r2,zero,1000e3d0 <___vfiprintf_internal_r+0x1408>
1000d394:	d881030b 	ldhu	r2,1036(sp)
1000d398:	1080100c 	andi	r2,r2,64
1000d39c:	10000426 	beq	r2,zero,1000d3b0 <___vfiprintf_internal_r+0x3e8>
1000d3a0:	d8c12017 	ldw	r3,1152(sp)
1000d3a4:	1880030b 	ldhu	r2,12(r3)
1000d3a8:	10801014 	ori	r2,r2,64
1000d3ac:	1880030d 	sth	r2,12(r3)
1000d3b0:	8005883a 	mov	r2,r16
1000d3b4:	00000106 	br	1000d3bc <___vfiprintf_internal_r+0x3f4>
1000d3b8:	00bfffc4 	movi	r2,-1
1000d3bc:	dfc13517 	ldw	ra,1236(sp)
1000d3c0:	df013417 	ldw	fp,1232(sp)
1000d3c4:	ddc13317 	ldw	r23,1228(sp)
1000d3c8:	dd813217 	ldw	r22,1224(sp)
1000d3cc:	dd413117 	ldw	r21,1220(sp)
1000d3d0:	dd013017 	ldw	r20,1216(sp)
1000d3d4:	dcc12f17 	ldw	r19,1212(sp)
1000d3d8:	dc812e17 	ldw	r18,1208(sp)
1000d3dc:	dc412d17 	ldw	r17,1204(sp)
1000d3e0:	dc012c17 	ldw	r16,1200(sp)
1000d3e4:	dec13604 	addi	sp,sp,1240
1000d3e8:	f800283a 	ret
1000d3ec:	000a8480 	call	1000a848 <__sinit>
1000d3f0:	003f0706 	br	1000d010 <__alt_data_end+0xf800d010>
1000d3f4:	d8c12417 	ldw	r3,1168(sp)
1000d3f8:	d8812315 	stw	r2,1164(sp)
1000d3fc:	00c7c83a 	sub	r3,zero,r3
1000d400:	d8c12415 	stw	r3,1168(sp)
1000d404:	94800114 	ori	r18,r18,4
1000d408:	b9800007 	ldb	r6,0(r23)
1000d40c:	003f4f06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d410:	94802014 	ori	r18,r18,128
1000d414:	b9800007 	ldb	r6,0(r23)
1000d418:	003f4c06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d41c:	dc012615 	stw	r16,1176(sp)
1000d420:	d8012415 	stw	zero,1168(sp)
1000d424:	35bff404 	addi	r22,r6,-48
1000d428:	0009883a 	mov	r4,zero
1000d42c:	b821883a 	mov	r16,r23
1000d430:	01400284 	movi	r5,10
1000d434:	0003dd40 	call	10003dd4 <__mulsi3>
1000d438:	81800007 	ldb	r6,0(r16)
1000d43c:	1589883a 	add	r4,r2,r22
1000d440:	bdc00044 	addi	r23,r23,1
1000d444:	35bff404 	addi	r22,r6,-48
1000d448:	b821883a 	mov	r16,r23
1000d44c:	adbff82e 	bgeu	r21,r22,1000d430 <__alt_data_end+0xf800d430>
1000d450:	d9012415 	stw	r4,1168(sp)
1000d454:	dc012617 	ldw	r16,1176(sp)
1000d458:	003f3d06 	br	1000d150 <__alt_data_end+0xf800d150>
1000d45c:	d8c12203 	ldbu	r3,1160(sp)
1000d460:	94800414 	ori	r18,r18,16
1000d464:	9080080c 	andi	r2,r18,32
1000d468:	d8c11d85 	stb	r3,1142(sp)
1000d46c:	9811883a 	mov	r8,r19
1000d470:	d8c12317 	ldw	r3,1164(sp)
1000d474:	10018226 	beq	r2,zero,1000da80 <___vfiprintf_internal_r+0xab8>
1000d478:	d9012317 	ldw	r4,1164(sp)
1000d47c:	18800117 	ldw	r2,4(r3)
1000d480:	1cc00017 	ldw	r19,0(r3)
1000d484:	21000204 	addi	r4,r4,8
1000d488:	d9012315 	stw	r4,1164(sp)
1000d48c:	102b883a 	mov	r21,r2
1000d490:	10030016 	blt	r2,zero,1000e094 <___vfiprintf_internal_r+0x10cc>
1000d494:	dd811d83 	ldbu	r22,1142(sp)
1000d498:	8029883a 	mov	r20,r16
1000d49c:	00800044 	movi	r2,1
1000d4a0:	9d46b03a 	or	r3,r19,r21
1000d4a4:	80000216 	blt	r16,zero,1000d4b0 <___vfiprintf_internal_r+0x4e8>
1000d4a8:	013fdfc4 	movi	r4,-129
1000d4ac:	9124703a 	and	r18,r18,r4
1000d4b0:	1801b41e 	bne	r3,zero,1000db84 <___vfiprintf_internal_r+0xbbc>
1000d4b4:	80028126 	beq	r16,zero,1000debc <___vfiprintf_internal_r+0xef4>
1000d4b8:	10803fcc 	andi	r2,r2,255
1000d4bc:	00c00044 	movi	r3,1
1000d4c0:	10c1d126 	beq	r2,r3,1000dc08 <___vfiprintf_internal_r+0xc40>
1000d4c4:	00c00084 	movi	r3,2
1000d4c8:	10c28626 	beq	r2,r3,1000dee4 <___vfiprintf_internal_r+0xf1c>
1000d4cc:	d8c10a04 	addi	r3,sp,1064
1000d4d0:	9808d0fa 	srli	r4,r19,3
1000d4d4:	a80a977a 	slli	r5,r21,29
1000d4d8:	a82ad0fa 	srli	r21,r21,3
1000d4dc:	9cc001cc 	andi	r19,r19,7
1000d4e0:	98800c04 	addi	r2,r19,48
1000d4e4:	18ffffc4 	addi	r3,r3,-1
1000d4e8:	2926b03a 	or	r19,r5,r4
1000d4ec:	18800005 	stb	r2,0(r3)
1000d4f0:	9d48b03a 	or	r4,r19,r21
1000d4f4:	203ff61e 	bne	r4,zero,1000d4d0 <__alt_data_end+0xf800d4d0>
1000d4f8:	9100004c 	andi	r4,r18,1
1000d4fc:	d8c12215 	stw	r3,1160(sp)
1000d500:	2002b31e 	bne	r4,zero,1000dfd0 <___vfiprintf_internal_r+0x1008>
1000d504:	d9411e17 	ldw	r5,1144(sp)
1000d508:	28e9c83a 	sub	r20,r5,r3
1000d50c:	a02b883a 	mov	r21,r20
1000d510:	a400010e 	bge	r20,r16,1000d518 <___vfiprintf_internal_r+0x550>
1000d514:	802b883a 	mov	r21,r16
1000d518:	b5803fcc 	andi	r22,r22,255
1000d51c:	b580201c 	xori	r22,r22,128
1000d520:	b5bfe004 	addi	r22,r22,-128
1000d524:	b0000126 	beq	r22,zero,1000d52c <___vfiprintf_internal_r+0x564>
1000d528:	ad400044 	addi	r21,r21,1
1000d52c:	9280008c 	andi	r10,r18,2
1000d530:	50000126 	beq	r10,zero,1000d538 <___vfiprintf_internal_r+0x570>
1000d534:	ad400084 	addi	r21,r21,2
1000d538:	9580210c 	andi	r22,r18,132
1000d53c:	b001751e 	bne	r22,zero,1000db14 <___vfiprintf_internal_r+0xb4c>
1000d540:	d9012417 	ldw	r4,1168(sp)
1000d544:	2567c83a 	sub	r19,r4,r21
1000d548:	04c1720e 	bge	zero,r19,1000db14 <___vfiprintf_internal_r+0xb4c>
1000d54c:	01c00404 	movi	r7,16
1000d550:	d8c11c17 	ldw	r3,1136(sp)
1000d554:	3cc36b0e 	bge	r7,r19,1000e304 <___vfiprintf_internal_r+0x133c>
1000d558:	00840074 	movhi	r2,4097
1000d55c:	1088ef04 	addi	r2,r2,9148
1000d560:	dc012915 	stw	r16,1188(sp)
1000d564:	d9011b17 	ldw	r4,1132(sp)
1000d568:	9821883a 	mov	r16,r19
1000d56c:	d8812615 	stw	r2,1176(sp)
1000d570:	030001c4 	movi	r12,7
1000d574:	5027883a 	mov	r19,r10
1000d578:	00000506 	br	1000d590 <___vfiprintf_internal_r+0x5c8>
1000d57c:	21400084 	addi	r5,r4,2
1000d580:	42000204 	addi	r8,r8,8
1000d584:	1009883a 	mov	r4,r2
1000d588:	843ffc04 	addi	r16,r16,-16
1000d58c:	3c000d0e 	bge	r7,r16,1000d5c4 <___vfiprintf_internal_r+0x5fc>
1000d590:	18c00404 	addi	r3,r3,16
1000d594:	20800044 	addi	r2,r4,1
1000d598:	47000015 	stw	fp,0(r8)
1000d59c:	41c00115 	stw	r7,4(r8)
1000d5a0:	d8c11c15 	stw	r3,1136(sp)
1000d5a4:	d8811b15 	stw	r2,1132(sp)
1000d5a8:	60bff40e 	bge	r12,r2,1000d57c <__alt_data_end+0xf800d57c>
1000d5ac:	18014b1e 	bne	r3,zero,1000dadc <___vfiprintf_internal_r+0xb14>
1000d5b0:	843ffc04 	addi	r16,r16,-16
1000d5b4:	0009883a 	mov	r4,zero
1000d5b8:	01400044 	movi	r5,1
1000d5bc:	d811883a 	mov	r8,sp
1000d5c0:	3c3ff316 	blt	r7,r16,1000d590 <__alt_data_end+0xf800d590>
1000d5c4:	9815883a 	mov	r10,r19
1000d5c8:	8027883a 	mov	r19,r16
1000d5cc:	dc012917 	ldw	r16,1188(sp)
1000d5d0:	d9012617 	ldw	r4,1176(sp)
1000d5d4:	98c7883a 	add	r3,r19,r3
1000d5d8:	44c00115 	stw	r19,4(r8)
1000d5dc:	41000015 	stw	r4,0(r8)
1000d5e0:	d8c11c15 	stw	r3,1136(sp)
1000d5e4:	d9411b15 	stw	r5,1132(sp)
1000d5e8:	008001c4 	movi	r2,7
1000d5ec:	11425116 	blt	r2,r5,1000df34 <___vfiprintf_internal_r+0xf6c>
1000d5f0:	d9011d87 	ldb	r4,1142(sp)
1000d5f4:	42000204 	addi	r8,r8,8
1000d5f8:	28800044 	addi	r2,r5,1
1000d5fc:	20014a1e 	bne	r4,zero,1000db28 <___vfiprintf_internal_r+0xb60>
1000d600:	50000c26 	beq	r10,zero,1000d634 <___vfiprintf_internal_r+0x66c>
1000d604:	d9011d04 	addi	r4,sp,1140
1000d608:	18c00084 	addi	r3,r3,2
1000d60c:	41000015 	stw	r4,0(r8)
1000d610:	01000084 	movi	r4,2
1000d614:	41000115 	stw	r4,4(r8)
1000d618:	d8c11c15 	stw	r3,1136(sp)
1000d61c:	d8811b15 	stw	r2,1132(sp)
1000d620:	010001c4 	movi	r4,7
1000d624:	20822016 	blt	r4,r2,1000dea8 <___vfiprintf_internal_r+0xee0>
1000d628:	100b883a 	mov	r5,r2
1000d62c:	42000204 	addi	r8,r8,8
1000d630:	10800044 	addi	r2,r2,1
1000d634:	01002004 	movi	r4,128
1000d638:	b101de26 	beq	r22,r4,1000ddb4 <___vfiprintf_internal_r+0xdec>
1000d63c:	8521c83a 	sub	r16,r16,r20
1000d640:	0400230e 	bge	zero,r16,1000d6d0 <___vfiprintf_internal_r+0x708>
1000d644:	04c00404 	movi	r19,16
1000d648:	9c030d0e 	bge	r19,r16,1000e280 <___vfiprintf_internal_r+0x12b8>
1000d64c:	00840074 	movhi	r2,4097
1000d650:	1088eb04 	addi	r2,r2,9132
1000d654:	d8812615 	stw	r2,1176(sp)
1000d658:	058001c4 	movi	r22,7
1000d65c:	00000506 	br	1000d674 <___vfiprintf_internal_r+0x6ac>
1000d660:	28800084 	addi	r2,r5,2
1000d664:	42000204 	addi	r8,r8,8
1000d668:	200b883a 	mov	r5,r4
1000d66c:	843ffc04 	addi	r16,r16,-16
1000d670:	9c000d0e 	bge	r19,r16,1000d6a8 <___vfiprintf_internal_r+0x6e0>
1000d674:	18c00404 	addi	r3,r3,16
1000d678:	29000044 	addi	r4,r5,1
1000d67c:	44400015 	stw	r17,0(r8)
1000d680:	44c00115 	stw	r19,4(r8)
1000d684:	d8c11c15 	stw	r3,1136(sp)
1000d688:	d9011b15 	stw	r4,1132(sp)
1000d68c:	b13ff40e 	bge	r22,r4,1000d660 <__alt_data_end+0xf800d660>
1000d690:	1801321e 	bne	r3,zero,1000db5c <___vfiprintf_internal_r+0xb94>
1000d694:	843ffc04 	addi	r16,r16,-16
1000d698:	000b883a 	mov	r5,zero
1000d69c:	00800044 	movi	r2,1
1000d6a0:	d811883a 	mov	r8,sp
1000d6a4:	9c3ff316 	blt	r19,r16,1000d674 <__alt_data_end+0xf800d674>
1000d6a8:	d9012617 	ldw	r4,1176(sp)
1000d6ac:	1c07883a 	add	r3,r3,r16
1000d6b0:	44000115 	stw	r16,4(r8)
1000d6b4:	41000015 	stw	r4,0(r8)
1000d6b8:	d8c11c15 	stw	r3,1136(sp)
1000d6bc:	d8811b15 	stw	r2,1132(sp)
1000d6c0:	010001c4 	movi	r4,7
1000d6c4:	20816216 	blt	r4,r2,1000dc50 <___vfiprintf_internal_r+0xc88>
1000d6c8:	42000204 	addi	r8,r8,8
1000d6cc:	10800044 	addi	r2,r2,1
1000d6d0:	d9012217 	ldw	r4,1160(sp)
1000d6d4:	1d07883a 	add	r3,r3,r20
1000d6d8:	45000115 	stw	r20,4(r8)
1000d6dc:	41000015 	stw	r4,0(r8)
1000d6e0:	d8c11c15 	stw	r3,1136(sp)
1000d6e4:	d8811b15 	stw	r2,1132(sp)
1000d6e8:	010001c4 	movi	r4,7
1000d6ec:	2081610e 	bge	r4,r2,1000dc74 <___vfiprintf_internal_r+0xcac>
1000d6f0:	1802211e 	bne	r3,zero,1000df78 <___vfiprintf_internal_r+0xfb0>
1000d6f4:	d8011b15 	stw	zero,1132(sp)
1000d6f8:	9480010c 	andi	r18,r18,4
1000d6fc:	9002171e 	bne	r18,zero,1000df5c <___vfiprintf_internal_r+0xf94>
1000d700:	d9412417 	ldw	r5,1168(sp)
1000d704:	a9433716 	blt	r21,r5,1000e3e4 <___vfiprintf_internal_r+0x141c>
1000d708:	d8812517 	ldw	r2,1172(sp)
1000d70c:	1545883a 	add	r2,r2,r21
1000d710:	d8812515 	stw	r2,1172(sp)
1000d714:	00019a06 	br	1000dd80 <___vfiprintf_internal_r+0xdb8>
1000d718:	d8c12317 	ldw	r3,1164(sp)
1000d71c:	05400044 	movi	r21,1
1000d720:	9811883a 	mov	r8,r19
1000d724:	18800017 	ldw	r2,0(r3)
1000d728:	18c00104 	addi	r3,r3,4
1000d72c:	d8c12315 	stw	r3,1164(sp)
1000d730:	d8c10004 	addi	r3,sp,1024
1000d734:	d8011d85 	stb	zero,1142(sp)
1000d738:	d8810005 	stb	r2,1024(sp)
1000d73c:	a829883a 	mov	r20,r21
1000d740:	d8c12215 	stw	r3,1160(sp)
1000d744:	0021883a 	mov	r16,zero
1000d748:	003f7806 	br	1000d52c <__alt_data_end+0xf800d52c>
1000d74c:	94800414 	ori	r18,r18,16
1000d750:	9080080c 	andi	r2,r18,32
1000d754:	9811883a 	mov	r8,r19
1000d758:	10009026 	beq	r2,zero,1000d99c <___vfiprintf_internal_r+0x9d4>
1000d75c:	d8812317 	ldw	r2,1164(sp)
1000d760:	d8c12317 	ldw	r3,1164(sp)
1000d764:	14c00017 	ldw	r19,0(r2)
1000d768:	15400117 	ldw	r21,4(r2)
1000d76c:	18c00204 	addi	r3,r3,8
1000d770:	d8c12315 	stw	r3,1164(sp)
1000d774:	0005883a 	mov	r2,zero
1000d778:	9d46b03a 	or	r3,r19,r21
1000d77c:	d8011d85 	stb	zero,1142(sp)
1000d780:	8029883a 	mov	r20,r16
1000d784:	002d883a 	mov	r22,zero
1000d788:	003f4606 	br	1000d4a4 <__alt_data_end+0xf800d4a4>
1000d78c:	94800414 	ori	r18,r18,16
1000d790:	9080080c 	andi	r2,r18,32
1000d794:	9811883a 	mov	r8,r19
1000d798:	10006226 	beq	r2,zero,1000d924 <___vfiprintf_internal_r+0x95c>
1000d79c:	d9012317 	ldw	r4,1164(sp)
1000d7a0:	00800044 	movi	r2,1
1000d7a4:	24c00017 	ldw	r19,0(r4)
1000d7a8:	25400117 	ldw	r21,4(r4)
1000d7ac:	21000204 	addi	r4,r4,8
1000d7b0:	d9012315 	stw	r4,1164(sp)
1000d7b4:	9d46b03a 	or	r3,r19,r21
1000d7b8:	003ff006 	br	1000d77c <__alt_data_end+0xf800d77c>
1000d7bc:	b9800007 	ldb	r6,0(r23)
1000d7c0:	00801b04 	movi	r2,108
1000d7c4:	3082b226 	beq	r6,r2,1000e290 <___vfiprintf_internal_r+0x12c8>
1000d7c8:	94800414 	ori	r18,r18,16
1000d7cc:	003e5f06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d7d0:	d8c12203 	ldbu	r3,1160(sp)
1000d7d4:	01040074 	movhi	r4,4097
1000d7d8:	21088604 	addi	r4,r4,8728
1000d7dc:	d8c11d85 	stb	r3,1142(sp)
1000d7e0:	d9012715 	stw	r4,1180(sp)
1000d7e4:	90c0080c 	andi	r3,r18,32
1000d7e8:	9811883a 	mov	r8,r19
1000d7ec:	d8812317 	ldw	r2,1164(sp)
1000d7f0:	18005f26 	beq	r3,zero,1000d970 <___vfiprintf_internal_r+0x9a8>
1000d7f4:	d9012317 	ldw	r4,1164(sp)
1000d7f8:	14c00017 	ldw	r19,0(r2)
1000d7fc:	15400117 	ldw	r21,4(r2)
1000d800:	21000204 	addi	r4,r4,8
1000d804:	d9012315 	stw	r4,1164(sp)
1000d808:	9080004c 	andi	r2,r18,1
1000d80c:	1001e226 	beq	r2,zero,1000df98 <___vfiprintf_internal_r+0xfd0>
1000d810:	9d46b03a 	or	r3,r19,r21
1000d814:	18024e26 	beq	r3,zero,1000e150 <___vfiprintf_internal_r+0x1188>
1000d818:	00800c04 	movi	r2,48
1000d81c:	d8811d05 	stb	r2,1140(sp)
1000d820:	d9811d45 	stb	r6,1141(sp)
1000d824:	94800094 	ori	r18,r18,2
1000d828:	00800084 	movi	r2,2
1000d82c:	003fd306 	br	1000d77c <__alt_data_end+0xf800d77c>
1000d830:	d9012317 	ldw	r4,1164(sp)
1000d834:	d9412317 	ldw	r5,1164(sp)
1000d838:	21000017 	ldw	r4,0(r4)
1000d83c:	28800104 	addi	r2,r5,4
1000d840:	d9012415 	stw	r4,1168(sp)
1000d844:	203eeb16 	blt	r4,zero,1000d3f4 <__alt_data_end+0xf800d3f4>
1000d848:	d8812315 	stw	r2,1164(sp)
1000d84c:	b9800007 	ldb	r6,0(r23)
1000d850:	003e3e06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d854:	b9800007 	ldb	r6,0(r23)
1000d858:	01000a84 	movi	r4,42
1000d85c:	b8800044 	addi	r2,r23,1
1000d860:	3102d226 	beq	r6,r4,1000e3ac <___vfiprintf_internal_r+0x13e4>
1000d864:	35bff404 	addi	r22,r6,-48
1000d868:	102f883a 	mov	r23,r2
1000d86c:	0021883a 	mov	r16,zero
1000d870:	adbe3736 	bltu	r21,r22,1000d150 <__alt_data_end+0xf800d150>
1000d874:	0009883a 	mov	r4,zero
1000d878:	01400284 	movi	r5,10
1000d87c:	0003dd40 	call	10003dd4 <__mulsi3>
1000d880:	b9800007 	ldb	r6,0(r23)
1000d884:	b089883a 	add	r4,r22,r2
1000d888:	bdc00044 	addi	r23,r23,1
1000d88c:	35bff404 	addi	r22,r6,-48
1000d890:	adbff92e 	bgeu	r21,r22,1000d878 <__alt_data_end+0xf800d878>
1000d894:	2021883a 	mov	r16,r4
1000d898:	203e2d0e 	bge	r4,zero,1000d150 <__alt_data_end+0xf800d150>
1000d89c:	043fffc4 	movi	r16,-1
1000d8a0:	003e2b06 	br	1000d150 <__alt_data_end+0xf800d150>
1000d8a4:	94801014 	ori	r18,r18,64
1000d8a8:	b9800007 	ldb	r6,0(r23)
1000d8ac:	003e2706 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d8b0:	94800814 	ori	r18,r18,32
1000d8b4:	b9800007 	ldb	r6,0(r23)
1000d8b8:	003e2406 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d8bc:	d9412317 	ldw	r5,1164(sp)
1000d8c0:	d8812317 	ldw	r2,1164(sp)
1000d8c4:	d8011d85 	stb	zero,1142(sp)
1000d8c8:	29400017 	ldw	r5,0(r5)
1000d8cc:	9811883a 	mov	r8,r19
1000d8d0:	14c00104 	addi	r19,r2,4
1000d8d4:	d9412215 	stw	r5,1160(sp)
1000d8d8:	28029026 	beq	r5,zero,1000e31c <___vfiprintf_internal_r+0x1354>
1000d8dc:	d9012217 	ldw	r4,1160(sp)
1000d8e0:	80027616 	blt	r16,zero,1000e2bc <___vfiprintf_internal_r+0x12f4>
1000d8e4:	000b883a 	mov	r5,zero
1000d8e8:	800d883a 	mov	r6,r16
1000d8ec:	da012a15 	stw	r8,1192(sp)
1000d8f0:	000b85c0 	call	1000b85c <memchr>
1000d8f4:	da012a17 	ldw	r8,1192(sp)
1000d8f8:	1002a026 	beq	r2,zero,1000e37c <___vfiprintf_internal_r+0x13b4>
1000d8fc:	d8c12217 	ldw	r3,1160(sp)
1000d900:	10e9c83a 	sub	r20,r2,r3
1000d904:	85023816 	blt	r16,r20,1000e1e8 <___vfiprintf_internal_r+0x1220>
1000d908:	dd811d83 	ldbu	r22,1142(sp)
1000d90c:	dcc12315 	stw	r19,1164(sp)
1000d910:	0021883a 	mov	r16,zero
1000d914:	003efd06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000d918:	9080080c 	andi	r2,r18,32
1000d91c:	9811883a 	mov	r8,r19
1000d920:	103f9e1e 	bne	r2,zero,1000d79c <__alt_data_end+0xf800d79c>
1000d924:	9080040c 	andi	r2,r18,16
1000d928:	10021726 	beq	r2,zero,1000e188 <___vfiprintf_internal_r+0x11c0>
1000d92c:	d9412317 	ldw	r5,1164(sp)
1000d930:	002b883a 	mov	r21,zero
1000d934:	00800044 	movi	r2,1
1000d938:	2cc00017 	ldw	r19,0(r5)
1000d93c:	29400104 	addi	r5,r5,4
1000d940:	d9412315 	stw	r5,1164(sp)
1000d944:	9807883a 	mov	r3,r19
1000d948:	003f8c06 	br	1000d77c <__alt_data_end+0xf800d77c>
1000d94c:	d8c12203 	ldbu	r3,1160(sp)
1000d950:	01040074 	movhi	r4,4097
1000d954:	21088b04 	addi	r4,r4,8748
1000d958:	d8c11d85 	stb	r3,1142(sp)
1000d95c:	d9012715 	stw	r4,1180(sp)
1000d960:	90c0080c 	andi	r3,r18,32
1000d964:	9811883a 	mov	r8,r19
1000d968:	d8812317 	ldw	r2,1164(sp)
1000d96c:	183fa11e 	bne	r3,zero,1000d7f4 <__alt_data_end+0xf800d7f4>
1000d970:	90c0040c 	andi	r3,r18,16
1000d974:	1801e526 	beq	r3,zero,1000e10c <___vfiprintf_internal_r+0x1144>
1000d978:	d9412317 	ldw	r5,1164(sp)
1000d97c:	14c00017 	ldw	r19,0(r2)
1000d980:	002b883a 	mov	r21,zero
1000d984:	29400104 	addi	r5,r5,4
1000d988:	d9412315 	stw	r5,1164(sp)
1000d98c:	003f9e06 	br	1000d808 <__alt_data_end+0xf800d808>
1000d990:	9080080c 	andi	r2,r18,32
1000d994:	9811883a 	mov	r8,r19
1000d998:	103f701e 	bne	r2,zero,1000d75c <__alt_data_end+0xf800d75c>
1000d99c:	9080040c 	andi	r2,r18,16
1000d9a0:	1001ef26 	beq	r2,zero,1000e160 <___vfiprintf_internal_r+0x1198>
1000d9a4:	d9012317 	ldw	r4,1164(sp)
1000d9a8:	002b883a 	mov	r21,zero
1000d9ac:	0005883a 	mov	r2,zero
1000d9b0:	24c00017 	ldw	r19,0(r4)
1000d9b4:	21000104 	addi	r4,r4,4
1000d9b8:	d9012315 	stw	r4,1164(sp)
1000d9bc:	9807883a 	mov	r3,r19
1000d9c0:	003f6e06 	br	1000d77c <__alt_data_end+0xf800d77c>
1000d9c4:	d8c12317 	ldw	r3,1164(sp)
1000d9c8:	9811883a 	mov	r8,r19
1000d9cc:	00800c04 	movi	r2,48
1000d9d0:	1cc00017 	ldw	r19,0(r3)
1000d9d4:	01040074 	movhi	r4,4097
1000d9d8:	18c00104 	addi	r3,r3,4
1000d9dc:	d8811d05 	stb	r2,1140(sp)
1000d9e0:	21088b04 	addi	r4,r4,8748
1000d9e4:	00801e04 	movi	r2,120
1000d9e8:	d8811d45 	stb	r2,1141(sp)
1000d9ec:	d8c12315 	stw	r3,1164(sp)
1000d9f0:	002b883a 	mov	r21,zero
1000d9f4:	94800094 	ori	r18,r18,2
1000d9f8:	d9012715 	stw	r4,1180(sp)
1000d9fc:	00800084 	movi	r2,2
1000da00:	9807883a 	mov	r3,r19
1000da04:	003f5d06 	br	1000d77c <__alt_data_end+0xf800d77c>
1000da08:	d8c12203 	ldbu	r3,1160(sp)
1000da0c:	9080080c 	andi	r2,r18,32
1000da10:	9811883a 	mov	r8,r19
1000da14:	d8c11d85 	stb	r3,1142(sp)
1000da18:	1001b126 	beq	r2,zero,1000e0e0 <___vfiprintf_internal_r+0x1118>
1000da1c:	d9012317 	ldw	r4,1164(sp)
1000da20:	d9412517 	ldw	r5,1172(sp)
1000da24:	20800017 	ldw	r2,0(r4)
1000da28:	2807d7fa 	srai	r3,r5,31
1000da2c:	21000104 	addi	r4,r4,4
1000da30:	d9012315 	stw	r4,1164(sp)
1000da34:	11400015 	stw	r5,0(r2)
1000da38:	10c00115 	stw	r3,4(r2)
1000da3c:	003d9a06 	br	1000d0a8 <__alt_data_end+0xf800d0a8>
1000da40:	d8812207 	ldb	r2,1160(sp)
1000da44:	1001c41e 	bne	r2,zero,1000e158 <___vfiprintf_internal_r+0x1190>
1000da48:	00c00804 	movi	r3,32
1000da4c:	d8c12205 	stb	r3,1160(sp)
1000da50:	b9800007 	ldb	r6,0(r23)
1000da54:	003dbd06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000da58:	00c00ac4 	movi	r3,43
1000da5c:	d8c12205 	stb	r3,1160(sp)
1000da60:	b9800007 	ldb	r6,0(r23)
1000da64:	003db906 	br	1000d14c <__alt_data_end+0xf800d14c>
1000da68:	d8c12203 	ldbu	r3,1160(sp)
1000da6c:	9080080c 	andi	r2,r18,32
1000da70:	9811883a 	mov	r8,r19
1000da74:	d8c11d85 	stb	r3,1142(sp)
1000da78:	d8c12317 	ldw	r3,1164(sp)
1000da7c:	103e7e1e 	bne	r2,zero,1000d478 <__alt_data_end+0xf800d478>
1000da80:	9080040c 	andi	r2,r18,16
1000da84:	1001a926 	beq	r2,zero,1000e12c <___vfiprintf_internal_r+0x1164>
1000da88:	1cc00017 	ldw	r19,0(r3)
1000da8c:	d9412317 	ldw	r5,1164(sp)
1000da90:	982bd7fa 	srai	r21,r19,31
1000da94:	29400104 	addi	r5,r5,4
1000da98:	d9412315 	stw	r5,1164(sp)
1000da9c:	a805883a 	mov	r2,r21
1000daa0:	003e7b06 	br	1000d490 <__alt_data_end+0xf800d490>
1000daa4:	94800054 	ori	r18,r18,1
1000daa8:	b9800007 	ldb	r6,0(r23)
1000daac:	003da706 	br	1000d14c <__alt_data_end+0xf800d14c>
1000dab0:	d8c12203 	ldbu	r3,1160(sp)
1000dab4:	9811883a 	mov	r8,r19
1000dab8:	d8c11d85 	stb	r3,1142(sp)
1000dabc:	30005826 	beq	r6,zero,1000dc20 <___vfiprintf_internal_r+0xc58>
1000dac0:	05400044 	movi	r21,1
1000dac4:	d8c10004 	addi	r3,sp,1024
1000dac8:	d9810005 	stb	r6,1024(sp)
1000dacc:	d8011d85 	stb	zero,1142(sp)
1000dad0:	a829883a 	mov	r20,r21
1000dad4:	d8c12215 	stw	r3,1160(sp)
1000dad8:	003f1a06 	br	1000d744 <__alt_data_end+0xf800d744>
1000dadc:	d9012117 	ldw	r4,1156(sp)
1000dae0:	d9412017 	ldw	r5,1152(sp)
1000dae4:	d9811a04 	addi	r6,sp,1128
1000dae8:	d9c12a15 	stw	r7,1192(sp)
1000daec:	db012b15 	stw	r12,1196(sp)
1000daf0:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000daf4:	d9c12a17 	ldw	r7,1192(sp)
1000daf8:	db012b17 	ldw	r12,1196(sp)
1000dafc:	10004e1e 	bne	r2,zero,1000dc38 <___vfiprintf_internal_r+0xc70>
1000db00:	d9011b17 	ldw	r4,1132(sp)
1000db04:	d8c11c17 	ldw	r3,1136(sp)
1000db08:	d811883a 	mov	r8,sp
1000db0c:	21400044 	addi	r5,r4,1
1000db10:	003e9d06 	br	1000d588 <__alt_data_end+0xf800d588>
1000db14:	d9411b17 	ldw	r5,1132(sp)
1000db18:	d8c11c17 	ldw	r3,1136(sp)
1000db1c:	28800044 	addi	r2,r5,1
1000db20:	d9011d87 	ldb	r4,1142(sp)
1000db24:	203eb626 	beq	r4,zero,1000d600 <__alt_data_end+0xf800d600>
1000db28:	01000044 	movi	r4,1
1000db2c:	d9411d84 	addi	r5,sp,1142
1000db30:	1907883a 	add	r3,r3,r4
1000db34:	41400015 	stw	r5,0(r8)
1000db38:	41000115 	stw	r4,4(r8)
1000db3c:	d8c11c15 	stw	r3,1136(sp)
1000db40:	d8811b15 	stw	r2,1132(sp)
1000db44:	014001c4 	movi	r5,7
1000db48:	2880ce16 	blt	r5,r2,1000de84 <___vfiprintf_internal_r+0xebc>
1000db4c:	100b883a 	mov	r5,r2
1000db50:	42000204 	addi	r8,r8,8
1000db54:	10800044 	addi	r2,r2,1
1000db58:	003ea906 	br	1000d600 <__alt_data_end+0xf800d600>
1000db5c:	d9012117 	ldw	r4,1156(sp)
1000db60:	d9412017 	ldw	r5,1152(sp)
1000db64:	d9811a04 	addi	r6,sp,1128
1000db68:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000db6c:	1000321e 	bne	r2,zero,1000dc38 <___vfiprintf_internal_r+0xc70>
1000db70:	d9411b17 	ldw	r5,1132(sp)
1000db74:	d8c11c17 	ldw	r3,1136(sp)
1000db78:	d811883a 	mov	r8,sp
1000db7c:	28800044 	addi	r2,r5,1
1000db80:	003eba06 	br	1000d66c <__alt_data_end+0xf800d66c>
1000db84:	10803fcc 	andi	r2,r2,255
1000db88:	00c00044 	movi	r3,1
1000db8c:	10fe4d1e 	bne	r2,r3,1000d4c4 <__alt_data_end+0xf800d4c4>
1000db90:	a800021e 	bne	r21,zero,1000db9c <___vfiprintf_internal_r+0xbd4>
1000db94:	00800244 	movi	r2,9
1000db98:	14c01b2e 	bgeu	r2,r19,1000dc08 <___vfiprintf_internal_r+0xc40>
1000db9c:	dc012215 	stw	r16,1160(sp)
1000dba0:	dd010a04 	addi	r20,sp,1064
1000dba4:	a821883a 	mov	r16,r21
1000dba8:	402b883a 	mov	r21,r8
1000dbac:	9809883a 	mov	r4,r19
1000dbb0:	800b883a 	mov	r5,r16
1000dbb4:	01800284 	movi	r6,10
1000dbb8:	000f883a 	mov	r7,zero
1000dbbc:	000368c0 	call	1000368c <__umoddi3>
1000dbc0:	10800c04 	addi	r2,r2,48
1000dbc4:	a53fffc4 	addi	r20,r20,-1
1000dbc8:	9809883a 	mov	r4,r19
1000dbcc:	800b883a 	mov	r5,r16
1000dbd0:	01800284 	movi	r6,10
1000dbd4:	000f883a 	mov	r7,zero
1000dbd8:	a0800005 	stb	r2,0(r20)
1000dbdc:	000304c0 	call	1000304c <__udivdi3>
1000dbe0:	1027883a 	mov	r19,r2
1000dbe4:	10c4b03a 	or	r2,r2,r3
1000dbe8:	1821883a 	mov	r16,r3
1000dbec:	103fef1e 	bne	r2,zero,1000dbac <__alt_data_end+0xf800dbac>
1000dbf0:	d9011e17 	ldw	r4,1144(sp)
1000dbf4:	dc012217 	ldw	r16,1160(sp)
1000dbf8:	a811883a 	mov	r8,r21
1000dbfc:	dd012215 	stw	r20,1160(sp)
1000dc00:	2529c83a 	sub	r20,r4,r20
1000dc04:	003e4106 	br	1000d50c <__alt_data_end+0xf800d50c>
1000dc08:	9cc00c04 	addi	r19,r19,48
1000dc0c:	d8c109c4 	addi	r3,sp,1063
1000dc10:	dcc109c5 	stb	r19,1063(sp)
1000dc14:	dd012817 	ldw	r20,1184(sp)
1000dc18:	d8c12215 	stw	r3,1160(sp)
1000dc1c:	003e3b06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000dc20:	d8811c17 	ldw	r2,1136(sp)
1000dc24:	10000426 	beq	r2,zero,1000dc38 <___vfiprintf_internal_r+0xc70>
1000dc28:	d9012117 	ldw	r4,1156(sp)
1000dc2c:	d9412017 	ldw	r5,1152(sp)
1000dc30:	d9811a04 	addi	r6,sp,1128
1000dc34:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000dc38:	d9412017 	ldw	r5,1152(sp)
1000dc3c:	2880030b 	ldhu	r2,12(r5)
1000dc40:	1080100c 	andi	r2,r2,64
1000dc44:	103ddc1e 	bne	r2,zero,1000d3b8 <__alt_data_end+0xf800d3b8>
1000dc48:	d8812517 	ldw	r2,1172(sp)
1000dc4c:	003ddb06 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000dc50:	1801061e 	bne	r3,zero,1000e06c <___vfiprintf_internal_r+0x10a4>
1000dc54:	d8c12217 	ldw	r3,1160(sp)
1000dc58:	00800044 	movi	r2,1
1000dc5c:	dd000115 	stw	r20,4(sp)
1000dc60:	d8c00015 	stw	r3,0(sp)
1000dc64:	dd011c15 	stw	r20,1136(sp)
1000dc68:	d8811b15 	stw	r2,1132(sp)
1000dc6c:	a007883a 	mov	r3,r20
1000dc70:	d811883a 	mov	r8,sp
1000dc74:	42000204 	addi	r8,r8,8
1000dc78:	9480010c 	andi	r18,r18,4
1000dc7c:	90003426 	beq	r18,zero,1000dd50 <___vfiprintf_internal_r+0xd88>
1000dc80:	d9412417 	ldw	r5,1168(sp)
1000dc84:	2d65c83a 	sub	r18,r5,r21
1000dc88:	0480310e 	bge	zero,r18,1000dd50 <___vfiprintf_internal_r+0xd88>
1000dc8c:	04000404 	movi	r16,16
1000dc90:	8481ad0e 	bge	r16,r18,1000e348 <___vfiprintf_internal_r+0x1380>
1000dc94:	01440074 	movhi	r5,4097
1000dc98:	2948ef04 	addi	r5,r5,9148
1000dc9c:	d9011b17 	ldw	r4,1132(sp)
1000dca0:	d9412615 	stw	r5,1176(sp)
1000dca4:	04c001c4 	movi	r19,7
1000dca8:	dd012117 	ldw	r20,1156(sp)
1000dcac:	dd812017 	ldw	r22,1152(sp)
1000dcb0:	00000506 	br	1000dcc8 <___vfiprintf_internal_r+0xd00>
1000dcb4:	21400084 	addi	r5,r4,2
1000dcb8:	42000204 	addi	r8,r8,8
1000dcbc:	1009883a 	mov	r4,r2
1000dcc0:	94bffc04 	addi	r18,r18,-16
1000dcc4:	84800d0e 	bge	r16,r18,1000dcfc <___vfiprintf_internal_r+0xd34>
1000dcc8:	18c00404 	addi	r3,r3,16
1000dccc:	20800044 	addi	r2,r4,1
1000dcd0:	47000015 	stw	fp,0(r8)
1000dcd4:	44000115 	stw	r16,4(r8)
1000dcd8:	d8c11c15 	stw	r3,1136(sp)
1000dcdc:	d8811b15 	stw	r2,1132(sp)
1000dce0:	98bff40e 	bge	r19,r2,1000dcb4 <__alt_data_end+0xf800dcb4>
1000dce4:	1800291e 	bne	r3,zero,1000dd8c <___vfiprintf_internal_r+0xdc4>
1000dce8:	94bffc04 	addi	r18,r18,-16
1000dcec:	0009883a 	mov	r4,zero
1000dcf0:	01400044 	movi	r5,1
1000dcf4:	d811883a 	mov	r8,sp
1000dcf8:	84bff316 	blt	r16,r18,1000dcc8 <__alt_data_end+0xf800dcc8>
1000dcfc:	d8812617 	ldw	r2,1176(sp)
1000dd00:	1c87883a 	add	r3,r3,r18
1000dd04:	44800115 	stw	r18,4(r8)
1000dd08:	40800015 	stw	r2,0(r8)
1000dd0c:	d8c11c15 	stw	r3,1136(sp)
1000dd10:	d9411b15 	stw	r5,1132(sp)
1000dd14:	008001c4 	movi	r2,7
1000dd18:	11400d0e 	bge	r2,r5,1000dd50 <___vfiprintf_internal_r+0xd88>
1000dd1c:	1800061e 	bne	r3,zero,1000dd38 <___vfiprintf_internal_r+0xd70>
1000dd20:	d8c12417 	ldw	r3,1168(sp)
1000dd24:	a8c12e16 	blt	r21,r3,1000e1e0 <___vfiprintf_internal_r+0x1218>
1000dd28:	d9012517 	ldw	r4,1172(sp)
1000dd2c:	2549883a 	add	r4,r4,r21
1000dd30:	d9012515 	stw	r4,1172(sp)
1000dd34:	00001206 	br	1000dd80 <___vfiprintf_internal_r+0xdb8>
1000dd38:	d9012117 	ldw	r4,1156(sp)
1000dd3c:	d9412017 	ldw	r5,1152(sp)
1000dd40:	d9811a04 	addi	r6,sp,1128
1000dd44:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000dd48:	103fbb1e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000dd4c:	d8c11c17 	ldw	r3,1136(sp)
1000dd50:	d8812417 	ldw	r2,1168(sp)
1000dd54:	a880010e 	bge	r21,r2,1000dd5c <___vfiprintf_internal_r+0xd94>
1000dd58:	102b883a 	mov	r21,r2
1000dd5c:	d9012517 	ldw	r4,1172(sp)
1000dd60:	2549883a 	add	r4,r4,r21
1000dd64:	d9012515 	stw	r4,1172(sp)
1000dd68:	18000526 	beq	r3,zero,1000dd80 <___vfiprintf_internal_r+0xdb8>
1000dd6c:	d9012117 	ldw	r4,1156(sp)
1000dd70:	d9412017 	ldw	r5,1152(sp)
1000dd74:	d9811a04 	addi	r6,sp,1128
1000dd78:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000dd7c:	103fae1e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000dd80:	d8011b15 	stw	zero,1132(sp)
1000dd84:	d811883a 	mov	r8,sp
1000dd88:	003cc706 	br	1000d0a8 <__alt_data_end+0xf800d0a8>
1000dd8c:	a009883a 	mov	r4,r20
1000dd90:	b00b883a 	mov	r5,r22
1000dd94:	d9811a04 	addi	r6,sp,1128
1000dd98:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000dd9c:	103fa61e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000dda0:	d9011b17 	ldw	r4,1132(sp)
1000dda4:	d8c11c17 	ldw	r3,1136(sp)
1000dda8:	d811883a 	mov	r8,sp
1000ddac:	21400044 	addi	r5,r4,1
1000ddb0:	003fc306 	br	1000dcc0 <__alt_data_end+0xf800dcc0>
1000ddb4:	d9012417 	ldw	r4,1168(sp)
1000ddb8:	256dc83a 	sub	r22,r4,r21
1000ddbc:	05be1f0e 	bge	zero,r22,1000d63c <__alt_data_end+0xf800d63c>
1000ddc0:	04c00404 	movi	r19,16
1000ddc4:	9d81720e 	bge	r19,r22,1000e390 <___vfiprintf_internal_r+0x13c8>
1000ddc8:	00840074 	movhi	r2,4097
1000ddcc:	1088eb04 	addi	r2,r2,9132
1000ddd0:	d8812615 	stw	r2,1176(sp)
1000ddd4:	028001c4 	movi	r10,7
1000ddd8:	00000506 	br	1000ddf0 <___vfiprintf_internal_r+0xe28>
1000dddc:	29000084 	addi	r4,r5,2
1000dde0:	42000204 	addi	r8,r8,8
1000dde4:	100b883a 	mov	r5,r2
1000dde8:	b5bffc04 	addi	r22,r22,-16
1000ddec:	9d800d0e 	bge	r19,r22,1000de24 <___vfiprintf_internal_r+0xe5c>
1000ddf0:	18c00404 	addi	r3,r3,16
1000ddf4:	28800044 	addi	r2,r5,1
1000ddf8:	44400015 	stw	r17,0(r8)
1000ddfc:	44c00115 	stw	r19,4(r8)
1000de00:	d8c11c15 	stw	r3,1136(sp)
1000de04:	d8811b15 	stw	r2,1132(sp)
1000de08:	50bff40e 	bge	r10,r2,1000dddc <__alt_data_end+0xf800dddc>
1000de0c:	1800111e 	bne	r3,zero,1000de54 <___vfiprintf_internal_r+0xe8c>
1000de10:	b5bffc04 	addi	r22,r22,-16
1000de14:	000b883a 	mov	r5,zero
1000de18:	01000044 	movi	r4,1
1000de1c:	d811883a 	mov	r8,sp
1000de20:	9dbff316 	blt	r19,r22,1000ddf0 <__alt_data_end+0xf800ddf0>
1000de24:	d9412617 	ldw	r5,1176(sp)
1000de28:	1d87883a 	add	r3,r3,r22
1000de2c:	45800115 	stw	r22,4(r8)
1000de30:	41400015 	stw	r5,0(r8)
1000de34:	d8c11c15 	stw	r3,1136(sp)
1000de38:	d9011b15 	stw	r4,1132(sp)
1000de3c:	008001c4 	movi	r2,7
1000de40:	11008516 	blt	r2,r4,1000e058 <___vfiprintf_internal_r+0x1090>
1000de44:	42000204 	addi	r8,r8,8
1000de48:	20800044 	addi	r2,r4,1
1000de4c:	200b883a 	mov	r5,r4
1000de50:	003dfa06 	br	1000d63c <__alt_data_end+0xf800d63c>
1000de54:	d9012117 	ldw	r4,1156(sp)
1000de58:	d9412017 	ldw	r5,1152(sp)
1000de5c:	d9811a04 	addi	r6,sp,1128
1000de60:	da812a15 	stw	r10,1192(sp)
1000de64:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000de68:	da812a17 	ldw	r10,1192(sp)
1000de6c:	103f721e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000de70:	d9411b17 	ldw	r5,1132(sp)
1000de74:	d8c11c17 	ldw	r3,1136(sp)
1000de78:	d811883a 	mov	r8,sp
1000de7c:	29000044 	addi	r4,r5,1
1000de80:	003fd906 	br	1000dde8 <__alt_data_end+0xf800dde8>
1000de84:	1800681e 	bne	r3,zero,1000e028 <___vfiprintf_internal_r+0x1060>
1000de88:	50004d26 	beq	r10,zero,1000dfc0 <___vfiprintf_internal_r+0xff8>
1000de8c:	d8811d04 	addi	r2,sp,1140
1000de90:	00c00084 	movi	r3,2
1000de94:	d8800015 	stw	r2,0(sp)
1000de98:	d8c00115 	stw	r3,4(sp)
1000de9c:	2005883a 	mov	r2,r4
1000dea0:	d811883a 	mov	r8,sp
1000dea4:	003de006 	br	1000d628 <__alt_data_end+0xf800d628>
1000dea8:	1800551e 	bne	r3,zero,1000e000 <___vfiprintf_internal_r+0x1038>
1000deac:	000b883a 	mov	r5,zero
1000deb0:	00800044 	movi	r2,1
1000deb4:	d811883a 	mov	r8,sp
1000deb8:	003dde06 	br	1000d634 <__alt_data_end+0xf800d634>
1000debc:	10803fcc 	andi	r2,r2,255
1000dec0:	1000191e 	bne	r2,zero,1000df28 <___vfiprintf_internal_r+0xf60>
1000dec4:	9080004c 	andi	r2,r18,1
1000dec8:	10001726 	beq	r2,zero,1000df28 <___vfiprintf_internal_r+0xf60>
1000decc:	00800c04 	movi	r2,48
1000ded0:	d8c109c4 	addi	r3,sp,1063
1000ded4:	d88109c5 	stb	r2,1063(sp)
1000ded8:	dd012817 	ldw	r20,1184(sp)
1000dedc:	d8c12215 	stw	r3,1160(sp)
1000dee0:	003d8a06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000dee4:	d9012717 	ldw	r4,1180(sp)
1000dee8:	dd010a04 	addi	r20,sp,1064
1000deec:	988003cc 	andi	r2,r19,15
1000def0:	a806973a 	slli	r3,r21,28
1000def4:	2085883a 	add	r2,r4,r2
1000def8:	9826d13a 	srli	r19,r19,4
1000defc:	10800003 	ldbu	r2,0(r2)
1000df00:	a82ad13a 	srli	r21,r21,4
1000df04:	a53fffc4 	addi	r20,r20,-1
1000df08:	1ce6b03a 	or	r19,r3,r19
1000df0c:	a0800005 	stb	r2,0(r20)
1000df10:	9d44b03a 	or	r2,r19,r21
1000df14:	103ff51e 	bne	r2,zero,1000deec <__alt_data_end+0xf800deec>
1000df18:	d9411e17 	ldw	r5,1144(sp)
1000df1c:	dd012215 	stw	r20,1160(sp)
1000df20:	2d29c83a 	sub	r20,r5,r20
1000df24:	003d7906 	br	1000d50c <__alt_data_end+0xf800d50c>
1000df28:	d8c10a04 	addi	r3,sp,1064
1000df2c:	d8c12215 	stw	r3,1160(sp)
1000df30:	003d7606 	br	1000d50c <__alt_data_end+0xf800d50c>
1000df34:	18009e1e 	bne	r3,zero,1000e1b0 <___vfiprintf_internal_r+0x11e8>
1000df38:	d8811d87 	ldb	r2,1142(sp)
1000df3c:	10005f26 	beq	r2,zero,1000e0bc <___vfiprintf_internal_r+0x10f4>
1000df40:	00c00044 	movi	r3,1
1000df44:	d9011d84 	addi	r4,sp,1142
1000df48:	1805883a 	mov	r2,r3
1000df4c:	d9000015 	stw	r4,0(sp)
1000df50:	d8c00115 	stw	r3,4(sp)
1000df54:	d811883a 	mov	r8,sp
1000df58:	003efc06 	br	1000db4c <__alt_data_end+0xf800db4c>
1000df5c:	d9412417 	ldw	r5,1168(sp)
1000df60:	d811883a 	mov	r8,sp
1000df64:	2d65c83a 	sub	r18,r5,r21
1000df68:	04bf4816 	blt	zero,r18,1000dc8c <__alt_data_end+0xf800dc8c>
1000df6c:	003f6c06 	br	1000dd20 <__alt_data_end+0xf800dd20>
1000df70:	b829883a 	mov	r20,r23
1000df74:	003c6906 	br	1000d11c <__alt_data_end+0xf800d11c>
1000df78:	d9012117 	ldw	r4,1156(sp)
1000df7c:	d9412017 	ldw	r5,1152(sp)
1000df80:	d9811a04 	addi	r6,sp,1128
1000df84:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000df88:	103f2b1e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000df8c:	d8c11c17 	ldw	r3,1136(sp)
1000df90:	d811883a 	mov	r8,sp
1000df94:	003f3806 	br	1000dc78 <__alt_data_end+0xf800dc78>
1000df98:	00800084 	movi	r2,2
1000df9c:	9d46b03a 	or	r3,r19,r21
1000dfa0:	003df606 	br	1000d77c <__alt_data_end+0xf800d77c>
1000dfa4:	d9012117 	ldw	r4,1156(sp)
1000dfa8:	d9412017 	ldw	r5,1152(sp)
1000dfac:	d9811a04 	addi	r6,sp,1128
1000dfb0:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000dfb4:	103f201e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000dfb8:	d811883a 	mov	r8,sp
1000dfbc:	003cc606 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000dfc0:	000b883a 	mov	r5,zero
1000dfc4:	2005883a 	mov	r2,r4
1000dfc8:	d811883a 	mov	r8,sp
1000dfcc:	003d9906 	br	1000d634 <__alt_data_end+0xf800d634>
1000dfd0:	10803fcc 	andi	r2,r2,255
1000dfd4:	1080201c 	xori	r2,r2,128
1000dfd8:	10bfe004 	addi	r2,r2,-128
1000dfdc:	01000c04 	movi	r4,48
1000dfe0:	1100b226 	beq	r2,r4,1000e2ac <___vfiprintf_internal_r+0x12e4>
1000dfe4:	d9412217 	ldw	r5,1160(sp)
1000dfe8:	d8811e17 	ldw	r2,1144(sp)
1000dfec:	193fffc5 	stb	r4,-1(r3)
1000dff0:	297fffc4 	addi	r5,r5,-1
1000dff4:	d9412215 	stw	r5,1160(sp)
1000dff8:	1169c83a 	sub	r20,r2,r5
1000dffc:	003d4306 	br	1000d50c <__alt_data_end+0xf800d50c>
1000e000:	d9012117 	ldw	r4,1156(sp)
1000e004:	d9412017 	ldw	r5,1152(sp)
1000e008:	d9811a04 	addi	r6,sp,1128
1000e00c:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000e010:	103f091e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000e014:	d9411b17 	ldw	r5,1132(sp)
1000e018:	d8c11c17 	ldw	r3,1136(sp)
1000e01c:	d811883a 	mov	r8,sp
1000e020:	28800044 	addi	r2,r5,1
1000e024:	003d8306 	br	1000d634 <__alt_data_end+0xf800d634>
1000e028:	d9012117 	ldw	r4,1156(sp)
1000e02c:	d9412017 	ldw	r5,1152(sp)
1000e030:	d9811a04 	addi	r6,sp,1128
1000e034:	da812a15 	stw	r10,1192(sp)
1000e038:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000e03c:	da812a17 	ldw	r10,1192(sp)
1000e040:	103efd1e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000e044:	d9411b17 	ldw	r5,1132(sp)
1000e048:	d8c11c17 	ldw	r3,1136(sp)
1000e04c:	d811883a 	mov	r8,sp
1000e050:	28800044 	addi	r2,r5,1
1000e054:	003d6a06 	br	1000d600 <__alt_data_end+0xf800d600>
1000e058:	1800a01e 	bne	r3,zero,1000e2dc <___vfiprintf_internal_r+0x1314>
1000e05c:	000b883a 	mov	r5,zero
1000e060:	00800044 	movi	r2,1
1000e064:	d811883a 	mov	r8,sp
1000e068:	003d7406 	br	1000d63c <__alt_data_end+0xf800d63c>
1000e06c:	d9012117 	ldw	r4,1156(sp)
1000e070:	d9412017 	ldw	r5,1152(sp)
1000e074:	d9811a04 	addi	r6,sp,1128
1000e078:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000e07c:	103eee1e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000e080:	d8811b17 	ldw	r2,1132(sp)
1000e084:	d8c11c17 	ldw	r3,1136(sp)
1000e088:	d811883a 	mov	r8,sp
1000e08c:	10800044 	addi	r2,r2,1
1000e090:	003d8f06 	br	1000d6d0 <__alt_data_end+0xf800d6d0>
1000e094:	04e7c83a 	sub	r19,zero,r19
1000e098:	9804c03a 	cmpne	r2,r19,zero
1000e09c:	056bc83a 	sub	r21,zero,r21
1000e0a0:	a8abc83a 	sub	r21,r21,r2
1000e0a4:	05800b44 	movi	r22,45
1000e0a8:	dd811d85 	stb	r22,1142(sp)
1000e0ac:	8029883a 	mov	r20,r16
1000e0b0:	00800044 	movi	r2,1
1000e0b4:	9d46b03a 	or	r3,r19,r21
1000e0b8:	003cfa06 	br	1000d4a4 <__alt_data_end+0xf800d4a4>
1000e0bc:	000b883a 	mov	r5,zero
1000e0c0:	00800044 	movi	r2,1
1000e0c4:	d811883a 	mov	r8,sp
1000e0c8:	503d5a26 	beq	r10,zero,1000d634 <__alt_data_end+0xf800d634>
1000e0cc:	00c00084 	movi	r3,2
1000e0d0:	d9011d04 	addi	r4,sp,1140
1000e0d4:	d9000015 	stw	r4,0(sp)
1000e0d8:	d8c00115 	stw	r3,4(sp)
1000e0dc:	003d5206 	br	1000d628 <__alt_data_end+0xf800d628>
1000e0e0:	9080040c 	andi	r2,r18,16
1000e0e4:	1000421e 	bne	r2,zero,1000e1f0 <___vfiprintf_internal_r+0x1228>
1000e0e8:	9480100c 	andi	r18,r18,64
1000e0ec:	90009c26 	beq	r18,zero,1000e360 <___vfiprintf_internal_r+0x1398>
1000e0f0:	d9412317 	ldw	r5,1164(sp)
1000e0f4:	d8c12517 	ldw	r3,1172(sp)
1000e0f8:	28800017 	ldw	r2,0(r5)
1000e0fc:	29400104 	addi	r5,r5,4
1000e100:	d9412315 	stw	r5,1164(sp)
1000e104:	10c0000d 	sth	r3,0(r2)
1000e108:	003be706 	br	1000d0a8 <__alt_data_end+0xf800d0a8>
1000e10c:	90c0100c 	andi	r3,r18,64
1000e110:	18003e26 	beq	r3,zero,1000e20c <___vfiprintf_internal_r+0x1244>
1000e114:	d8c12317 	ldw	r3,1164(sp)
1000e118:	14c0000b 	ldhu	r19,0(r2)
1000e11c:	002b883a 	mov	r21,zero
1000e120:	18c00104 	addi	r3,r3,4
1000e124:	d8c12315 	stw	r3,1164(sp)
1000e128:	003db706 	br	1000d808 <__alt_data_end+0xf800d808>
1000e12c:	9080100c 	andi	r2,r18,64
1000e130:	10004c26 	beq	r2,zero,1000e264 <___vfiprintf_internal_r+0x129c>
1000e134:	1cc0000f 	ldh	r19,0(r3)
1000e138:	d8812317 	ldw	r2,1164(sp)
1000e13c:	982bd7fa 	srai	r21,r19,31
1000e140:	10800104 	addi	r2,r2,4
1000e144:	d8812315 	stw	r2,1164(sp)
1000e148:	a805883a 	mov	r2,r21
1000e14c:	003cd006 	br	1000d490 <__alt_data_end+0xf800d490>
1000e150:	00800084 	movi	r2,2
1000e154:	003d8906 	br	1000d77c <__alt_data_end+0xf800d77c>
1000e158:	b9800007 	ldb	r6,0(r23)
1000e15c:	003bfb06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000e160:	9080100c 	andi	r2,r18,64
1000e164:	10003726 	beq	r2,zero,1000e244 <___vfiprintf_internal_r+0x127c>
1000e168:	d9412317 	ldw	r5,1164(sp)
1000e16c:	002b883a 	mov	r21,zero
1000e170:	0005883a 	mov	r2,zero
1000e174:	2cc0000b 	ldhu	r19,0(r5)
1000e178:	29400104 	addi	r5,r5,4
1000e17c:	d9412315 	stw	r5,1164(sp)
1000e180:	9807883a 	mov	r3,r19
1000e184:	003d7d06 	br	1000d77c <__alt_data_end+0xf800d77c>
1000e188:	9080100c 	andi	r2,r18,64
1000e18c:	10002526 	beq	r2,zero,1000e224 <___vfiprintf_internal_r+0x125c>
1000e190:	d8812317 	ldw	r2,1164(sp)
1000e194:	002b883a 	mov	r21,zero
1000e198:	14c0000b 	ldhu	r19,0(r2)
1000e19c:	10800104 	addi	r2,r2,4
1000e1a0:	d8812315 	stw	r2,1164(sp)
1000e1a4:	9807883a 	mov	r3,r19
1000e1a8:	00800044 	movi	r2,1
1000e1ac:	003d7306 	br	1000d77c <__alt_data_end+0xf800d77c>
1000e1b0:	d9012117 	ldw	r4,1156(sp)
1000e1b4:	d9412017 	ldw	r5,1152(sp)
1000e1b8:	d9811a04 	addi	r6,sp,1128
1000e1bc:	da812a15 	stw	r10,1192(sp)
1000e1c0:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000e1c4:	da812a17 	ldw	r10,1192(sp)
1000e1c8:	103e9b1e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000e1cc:	d9411b17 	ldw	r5,1132(sp)
1000e1d0:	d8c11c17 	ldw	r3,1136(sp)
1000e1d4:	d811883a 	mov	r8,sp
1000e1d8:	28800044 	addi	r2,r5,1
1000e1dc:	003e5006 	br	1000db20 <__alt_data_end+0xf800db20>
1000e1e0:	182b883a 	mov	r21,r3
1000e1e4:	003ed006 	br	1000dd28 <__alt_data_end+0xf800dd28>
1000e1e8:	8029883a 	mov	r20,r16
1000e1ec:	003dc606 	br	1000d908 <__alt_data_end+0xf800d908>
1000e1f0:	d8c12317 	ldw	r3,1164(sp)
1000e1f4:	d9012517 	ldw	r4,1172(sp)
1000e1f8:	18800017 	ldw	r2,0(r3)
1000e1fc:	18c00104 	addi	r3,r3,4
1000e200:	d8c12315 	stw	r3,1164(sp)
1000e204:	11000015 	stw	r4,0(r2)
1000e208:	003ba706 	br	1000d0a8 <__alt_data_end+0xf800d0a8>
1000e20c:	d9012317 	ldw	r4,1164(sp)
1000e210:	14c00017 	ldw	r19,0(r2)
1000e214:	002b883a 	mov	r21,zero
1000e218:	21000104 	addi	r4,r4,4
1000e21c:	d9012315 	stw	r4,1164(sp)
1000e220:	003d7906 	br	1000d808 <__alt_data_end+0xf800d808>
1000e224:	d8c12317 	ldw	r3,1164(sp)
1000e228:	002b883a 	mov	r21,zero
1000e22c:	00800044 	movi	r2,1
1000e230:	1cc00017 	ldw	r19,0(r3)
1000e234:	18c00104 	addi	r3,r3,4
1000e238:	d8c12315 	stw	r3,1164(sp)
1000e23c:	9807883a 	mov	r3,r19
1000e240:	003d4e06 	br	1000d77c <__alt_data_end+0xf800d77c>
1000e244:	d8812317 	ldw	r2,1164(sp)
1000e248:	002b883a 	mov	r21,zero
1000e24c:	14c00017 	ldw	r19,0(r2)
1000e250:	10800104 	addi	r2,r2,4
1000e254:	d8812315 	stw	r2,1164(sp)
1000e258:	9807883a 	mov	r3,r19
1000e25c:	0005883a 	mov	r2,zero
1000e260:	003d4606 	br	1000d77c <__alt_data_end+0xf800d77c>
1000e264:	1cc00017 	ldw	r19,0(r3)
1000e268:	d8c12317 	ldw	r3,1164(sp)
1000e26c:	982bd7fa 	srai	r21,r19,31
1000e270:	18c00104 	addi	r3,r3,4
1000e274:	d8c12315 	stw	r3,1164(sp)
1000e278:	a805883a 	mov	r2,r21
1000e27c:	003c8406 	br	1000d490 <__alt_data_end+0xf800d490>
1000e280:	01040074 	movhi	r4,4097
1000e284:	2108eb04 	addi	r4,r4,9132
1000e288:	d9012615 	stw	r4,1176(sp)
1000e28c:	003d0606 	br	1000d6a8 <__alt_data_end+0xf800d6a8>
1000e290:	b9800043 	ldbu	r6,1(r23)
1000e294:	94800814 	ori	r18,r18,32
1000e298:	bdc00044 	addi	r23,r23,1
1000e29c:	31803fcc 	andi	r6,r6,255
1000e2a0:	3180201c 	xori	r6,r6,128
1000e2a4:	31bfe004 	addi	r6,r6,-128
1000e2a8:	003ba806 	br	1000d14c <__alt_data_end+0xf800d14c>
1000e2ac:	d8811e17 	ldw	r2,1144(sp)
1000e2b0:	d8c12217 	ldw	r3,1160(sp)
1000e2b4:	10e9c83a 	sub	r20,r2,r3
1000e2b8:	003c9406 	br	1000d50c <__alt_data_end+0xf800d50c>
1000e2bc:	da012a15 	stw	r8,1192(sp)
1000e2c0:	000ce1c0 	call	1000ce1c <strlen>
1000e2c4:	1029883a 	mov	r20,r2
1000e2c8:	dd811d83 	ldbu	r22,1142(sp)
1000e2cc:	dcc12315 	stw	r19,1164(sp)
1000e2d0:	0021883a 	mov	r16,zero
1000e2d4:	da012a17 	ldw	r8,1192(sp)
1000e2d8:	003c8c06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000e2dc:	d9012117 	ldw	r4,1156(sp)
1000e2e0:	d9412017 	ldw	r5,1152(sp)
1000e2e4:	d9811a04 	addi	r6,sp,1128
1000e2e8:	000ceb40 	call	1000ceb4 <__sprint_r.part.0>
1000e2ec:	103e521e 	bne	r2,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000e2f0:	d9411b17 	ldw	r5,1132(sp)
1000e2f4:	d8c11c17 	ldw	r3,1136(sp)
1000e2f8:	d811883a 	mov	r8,sp
1000e2fc:	28800044 	addi	r2,r5,1
1000e300:	003cce06 	br	1000d63c <__alt_data_end+0xf800d63c>
1000e304:	01440074 	movhi	r5,4097
1000e308:	2948ef04 	addi	r5,r5,9148
1000e30c:	d9412615 	stw	r5,1176(sp)
1000e310:	d9411b17 	ldw	r5,1132(sp)
1000e314:	29400044 	addi	r5,r5,1
1000e318:	003cad06 	br	1000d5d0 <__alt_data_end+0xf800d5d0>
1000e31c:	00800184 	movi	r2,6
1000e320:	1400012e 	bgeu	r2,r16,1000e328 <___vfiprintf_internal_r+0x1360>
1000e324:	1021883a 	mov	r16,r2
1000e328:	8029883a 	mov	r20,r16
1000e32c:	802b883a 	mov	r21,r16
1000e330:	80001c16 	blt	r16,zero,1000e3a4 <___vfiprintf_internal_r+0x13dc>
1000e334:	00c40074 	movhi	r3,4097
1000e338:	18c89004 	addi	r3,r3,8768
1000e33c:	dcc12315 	stw	r19,1164(sp)
1000e340:	d8c12215 	stw	r3,1160(sp)
1000e344:	003cff06 	br	1000d744 <__alt_data_end+0xf800d744>
1000e348:	d9411b17 	ldw	r5,1132(sp)
1000e34c:	00840074 	movhi	r2,4097
1000e350:	1088ef04 	addi	r2,r2,9148
1000e354:	d8812615 	stw	r2,1176(sp)
1000e358:	29400044 	addi	r5,r5,1
1000e35c:	003e6706 	br	1000dcfc <__alt_data_end+0xf800dcfc>
1000e360:	d9012317 	ldw	r4,1164(sp)
1000e364:	d9412517 	ldw	r5,1172(sp)
1000e368:	20800017 	ldw	r2,0(r4)
1000e36c:	21000104 	addi	r4,r4,4
1000e370:	d9012315 	stw	r4,1164(sp)
1000e374:	11400015 	stw	r5,0(r2)
1000e378:	003b4b06 	br	1000d0a8 <__alt_data_end+0xf800d0a8>
1000e37c:	8029883a 	mov	r20,r16
1000e380:	dd811d83 	ldbu	r22,1142(sp)
1000e384:	dcc12315 	stw	r19,1164(sp)
1000e388:	0021883a 	mov	r16,zero
1000e38c:	003c5f06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000e390:	01040074 	movhi	r4,4097
1000e394:	2108eb04 	addi	r4,r4,9132
1000e398:	d9012615 	stw	r4,1176(sp)
1000e39c:	1009883a 	mov	r4,r2
1000e3a0:	003ea006 	br	1000de24 <__alt_data_end+0xf800de24>
1000e3a4:	002b883a 	mov	r21,zero
1000e3a8:	003fe206 	br	1000e334 <__alt_data_end+0xf800e334>
1000e3ac:	d9412317 	ldw	r5,1164(sp)
1000e3b0:	b807883a 	mov	r3,r23
1000e3b4:	102f883a 	mov	r23,r2
1000e3b8:	2c000017 	ldw	r16,0(r5)
1000e3bc:	29000104 	addi	r4,r5,4
1000e3c0:	d9012315 	stw	r4,1164(sp)
1000e3c4:	80000416 	blt	r16,zero,1000e3d8 <___vfiprintf_internal_r+0x1410>
1000e3c8:	19800047 	ldb	r6,1(r3)
1000e3cc:	003b5f06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000e3d0:	043fffc4 	movi	r16,-1
1000e3d4:	003bef06 	br	1000d394 <__alt_data_end+0xf800d394>
1000e3d8:	043fffc4 	movi	r16,-1
1000e3dc:	19800047 	ldb	r6,1(r3)
1000e3e0:	003b5a06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000e3e4:	282b883a 	mov	r21,r5
1000e3e8:	003cc706 	br	1000d708 <__alt_data_end+0xf800d708>

1000e3ec <__vfiprintf_internal>:
1000e3ec:	2007883a 	mov	r3,r4
1000e3f0:	01040074 	movhi	r4,4097
1000e3f4:	210fad04 	addi	r4,r4,16052
1000e3f8:	21000017 	ldw	r4,0(r4)
1000e3fc:	2805883a 	mov	r2,r5
1000e400:	300f883a 	mov	r7,r6
1000e404:	180b883a 	mov	r5,r3
1000e408:	100d883a 	mov	r6,r2
1000e40c:	000cfc81 	jmpi	1000cfc8 <___vfiprintf_internal_r>

1000e410 <_write_r>:
1000e410:	defffd04 	addi	sp,sp,-12
1000e414:	dc000015 	stw	r16,0(sp)
1000e418:	04040074 	movhi	r16,4097
1000e41c:	dc400115 	stw	r17,4(sp)
1000e420:	84167e04 	addi	r16,r16,23032
1000e424:	2023883a 	mov	r17,r4
1000e428:	2809883a 	mov	r4,r5
1000e42c:	300b883a 	mov	r5,r6
1000e430:	380d883a 	mov	r6,r7
1000e434:	dfc00215 	stw	ra,8(sp)
1000e438:	80000015 	stw	zero,0(r16)
1000e43c:	00101f00 	call	100101f0 <write>
1000e440:	00ffffc4 	movi	r3,-1
1000e444:	10c00526 	beq	r2,r3,1000e45c <_write_r+0x4c>
1000e448:	dfc00217 	ldw	ra,8(sp)
1000e44c:	dc400117 	ldw	r17,4(sp)
1000e450:	dc000017 	ldw	r16,0(sp)
1000e454:	dec00304 	addi	sp,sp,12
1000e458:	f800283a 	ret
1000e45c:	80c00017 	ldw	r3,0(r16)
1000e460:	183ff926 	beq	r3,zero,1000e448 <__alt_data_end+0xf800e448>
1000e464:	88c00015 	stw	r3,0(r17)
1000e468:	003ff706 	br	1000e448 <__alt_data_end+0xf800e448>

1000e46c <_close_r>:
1000e46c:	defffd04 	addi	sp,sp,-12
1000e470:	dc000015 	stw	r16,0(sp)
1000e474:	04040074 	movhi	r16,4097
1000e478:	dc400115 	stw	r17,4(sp)
1000e47c:	84167e04 	addi	r16,r16,23032
1000e480:	2023883a 	mov	r17,r4
1000e484:	2809883a 	mov	r4,r5
1000e488:	dfc00215 	stw	ra,8(sp)
1000e48c:	80000015 	stw	zero,0(r16)
1000e490:	000f94c0 	call	1000f94c <close>
1000e494:	00ffffc4 	movi	r3,-1
1000e498:	10c00526 	beq	r2,r3,1000e4b0 <_close_r+0x44>
1000e49c:	dfc00217 	ldw	ra,8(sp)
1000e4a0:	dc400117 	ldw	r17,4(sp)
1000e4a4:	dc000017 	ldw	r16,0(sp)
1000e4a8:	dec00304 	addi	sp,sp,12
1000e4ac:	f800283a 	ret
1000e4b0:	80c00017 	ldw	r3,0(r16)
1000e4b4:	183ff926 	beq	r3,zero,1000e49c <__alt_data_end+0xf800e49c>
1000e4b8:	88c00015 	stw	r3,0(r17)
1000e4bc:	003ff706 	br	1000e49c <__alt_data_end+0xf800e49c>

1000e4c0 <_calloc_r>:
1000e4c0:	defffe04 	addi	sp,sp,-8
1000e4c4:	dc000015 	stw	r16,0(sp)
1000e4c8:	2021883a 	mov	r16,r4
1000e4cc:	2809883a 	mov	r4,r5
1000e4d0:	300b883a 	mov	r5,r6
1000e4d4:	dfc00115 	stw	ra,4(sp)
1000e4d8:	0003dd40 	call	10003dd4 <__mulsi3>
1000e4dc:	8009883a 	mov	r4,r16
1000e4e0:	100b883a 	mov	r5,r2
1000e4e4:	000b0b40 	call	1000b0b4 <_malloc_r>
1000e4e8:	1021883a 	mov	r16,r2
1000e4ec:	10002826 	beq	r2,zero,1000e590 <_calloc_r+0xd0>
1000e4f0:	11bfff17 	ldw	r6,-4(r2)
1000e4f4:	00bfff04 	movi	r2,-4
1000e4f8:	00c00904 	movi	r3,36
1000e4fc:	308c703a 	and	r6,r6,r2
1000e500:	308d883a 	add	r6,r6,r2
1000e504:	19801436 	bltu	r3,r6,1000e558 <_calloc_r+0x98>
1000e508:	008004c4 	movi	r2,19
1000e50c:	11800936 	bltu	r2,r6,1000e534 <_calloc_r+0x74>
1000e510:	8005883a 	mov	r2,r16
1000e514:	10000015 	stw	zero,0(r2)
1000e518:	10000115 	stw	zero,4(r2)
1000e51c:	10000215 	stw	zero,8(r2)
1000e520:	8005883a 	mov	r2,r16
1000e524:	dfc00117 	ldw	ra,4(sp)
1000e528:	dc000017 	ldw	r16,0(sp)
1000e52c:	dec00204 	addi	sp,sp,8
1000e530:	f800283a 	ret
1000e534:	80000015 	stw	zero,0(r16)
1000e538:	80000115 	stw	zero,4(r16)
1000e53c:	008006c4 	movi	r2,27
1000e540:	11800d2e 	bgeu	r2,r6,1000e578 <_calloc_r+0xb8>
1000e544:	80000215 	stw	zero,8(r16)
1000e548:	80000315 	stw	zero,12(r16)
1000e54c:	30c00c26 	beq	r6,r3,1000e580 <_calloc_r+0xc0>
1000e550:	80800404 	addi	r2,r16,16
1000e554:	003fef06 	br	1000e514 <__alt_data_end+0xf800e514>
1000e558:	8009883a 	mov	r4,r16
1000e55c:	000b883a 	mov	r5,zero
1000e560:	000ba7c0 	call	1000ba7c <memset>
1000e564:	8005883a 	mov	r2,r16
1000e568:	dfc00117 	ldw	ra,4(sp)
1000e56c:	dc000017 	ldw	r16,0(sp)
1000e570:	dec00204 	addi	sp,sp,8
1000e574:	f800283a 	ret
1000e578:	80800204 	addi	r2,r16,8
1000e57c:	003fe506 	br	1000e514 <__alt_data_end+0xf800e514>
1000e580:	80000415 	stw	zero,16(r16)
1000e584:	80800604 	addi	r2,r16,24
1000e588:	80000515 	stw	zero,20(r16)
1000e58c:	003fe106 	br	1000e514 <__alt_data_end+0xf800e514>
1000e590:	0005883a 	mov	r2,zero
1000e594:	003fe306 	br	1000e524 <__alt_data_end+0xf800e524>

1000e598 <_fclose_r>:
1000e598:	28003226 	beq	r5,zero,1000e664 <_fclose_r+0xcc>
1000e59c:	defffc04 	addi	sp,sp,-16
1000e5a0:	dc400115 	stw	r17,4(sp)
1000e5a4:	2023883a 	mov	r17,r4
1000e5a8:	dc000015 	stw	r16,0(sp)
1000e5ac:	dfc00315 	stw	ra,12(sp)
1000e5b0:	dc800215 	stw	r18,8(sp)
1000e5b4:	2821883a 	mov	r16,r5
1000e5b8:	000a8580 	call	1000a858 <__sfp_lock_acquire>
1000e5bc:	88000226 	beq	r17,zero,1000e5c8 <_fclose_r+0x30>
1000e5c0:	88800e17 	ldw	r2,56(r17)
1000e5c4:	10002926 	beq	r2,zero,1000e66c <_fclose_r+0xd4>
1000e5c8:	8080030f 	ldh	r2,12(r16)
1000e5cc:	10002226 	beq	r2,zero,1000e658 <_fclose_r+0xc0>
1000e5d0:	8809883a 	mov	r4,r17
1000e5d4:	800b883a 	mov	r5,r16
1000e5d8:	000a28c0 	call	1000a28c <_fflush_r>
1000e5dc:	1025883a 	mov	r18,r2
1000e5e0:	80800b17 	ldw	r2,44(r16)
1000e5e4:	10000426 	beq	r2,zero,1000e5f8 <_fclose_r+0x60>
1000e5e8:	81400717 	ldw	r5,28(r16)
1000e5ec:	8809883a 	mov	r4,r17
1000e5f0:	103ee83a 	callr	r2
1000e5f4:	10002616 	blt	r2,zero,1000e690 <_fclose_r+0xf8>
1000e5f8:	8080030b 	ldhu	r2,12(r16)
1000e5fc:	1080200c 	andi	r2,r2,128
1000e600:	10001f1e 	bne	r2,zero,1000e680 <_fclose_r+0xe8>
1000e604:	81400c17 	ldw	r5,48(r16)
1000e608:	28000526 	beq	r5,zero,1000e620 <_fclose_r+0x88>
1000e60c:	80801004 	addi	r2,r16,64
1000e610:	28800226 	beq	r5,r2,1000e61c <_fclose_r+0x84>
1000e614:	8809883a 	mov	r4,r17
1000e618:	000a9bc0 	call	1000a9bc <_free_r>
1000e61c:	80000c15 	stw	zero,48(r16)
1000e620:	81401117 	ldw	r5,68(r16)
1000e624:	28000326 	beq	r5,zero,1000e634 <_fclose_r+0x9c>
1000e628:	8809883a 	mov	r4,r17
1000e62c:	000a9bc0 	call	1000a9bc <_free_r>
1000e630:	80001115 	stw	zero,68(r16)
1000e634:	8000030d 	sth	zero,12(r16)
1000e638:	000a85c0 	call	1000a85c <__sfp_lock_release>
1000e63c:	9005883a 	mov	r2,r18
1000e640:	dfc00317 	ldw	ra,12(sp)
1000e644:	dc800217 	ldw	r18,8(sp)
1000e648:	dc400117 	ldw	r17,4(sp)
1000e64c:	dc000017 	ldw	r16,0(sp)
1000e650:	dec00404 	addi	sp,sp,16
1000e654:	f800283a 	ret
1000e658:	000a85c0 	call	1000a85c <__sfp_lock_release>
1000e65c:	0005883a 	mov	r2,zero
1000e660:	003ff706 	br	1000e640 <__alt_data_end+0xf800e640>
1000e664:	0005883a 	mov	r2,zero
1000e668:	f800283a 	ret
1000e66c:	8809883a 	mov	r4,r17
1000e670:	000a8480 	call	1000a848 <__sinit>
1000e674:	8080030f 	ldh	r2,12(r16)
1000e678:	103fd51e 	bne	r2,zero,1000e5d0 <__alt_data_end+0xf800e5d0>
1000e67c:	003ff606 	br	1000e658 <__alt_data_end+0xf800e658>
1000e680:	81400417 	ldw	r5,16(r16)
1000e684:	8809883a 	mov	r4,r17
1000e688:	000a9bc0 	call	1000a9bc <_free_r>
1000e68c:	003fdd06 	br	1000e604 <__alt_data_end+0xf800e604>
1000e690:	04bfffc4 	movi	r18,-1
1000e694:	003fd806 	br	1000e5f8 <__alt_data_end+0xf800e5f8>

1000e698 <fclose>:
1000e698:	00840074 	movhi	r2,4097
1000e69c:	108fad04 	addi	r2,r2,16052
1000e6a0:	200b883a 	mov	r5,r4
1000e6a4:	11000017 	ldw	r4,0(r2)
1000e6a8:	000e5981 	jmpi	1000e598 <_fclose_r>

1000e6ac <_fputwc_r>:
1000e6ac:	3080030b 	ldhu	r2,12(r6)
1000e6b0:	defff804 	addi	sp,sp,-32
1000e6b4:	dcc00415 	stw	r19,16(sp)
1000e6b8:	dc800315 	stw	r18,12(sp)
1000e6bc:	dc000115 	stw	r16,4(sp)
1000e6c0:	dfc00715 	stw	ra,28(sp)
1000e6c4:	dd400615 	stw	r21,24(sp)
1000e6c8:	dd000515 	stw	r20,20(sp)
1000e6cc:	dc400215 	stw	r17,8(sp)
1000e6d0:	10c8000c 	andi	r3,r2,8192
1000e6d4:	3021883a 	mov	r16,r6
1000e6d8:	2027883a 	mov	r19,r4
1000e6dc:	2825883a 	mov	r18,r5
1000e6e0:	1800051e 	bne	r3,zero,1000e6f8 <_fputwc_r+0x4c>
1000e6e4:	30c01917 	ldw	r3,100(r6)
1000e6e8:	10880014 	ori	r2,r2,8192
1000e6ec:	3080030d 	sth	r2,12(r6)
1000e6f0:	18880014 	ori	r2,r3,8192
1000e6f4:	30801915 	stw	r2,100(r6)
1000e6f8:	000aea40 	call	1000aea4 <__locale_mb_cur_max>
1000e6fc:	00c00044 	movi	r3,1
1000e700:	10c03e26 	beq	r2,r3,1000e7fc <_fputwc_r+0x150>
1000e704:	9809883a 	mov	r4,r19
1000e708:	d80b883a 	mov	r5,sp
1000e70c:	900d883a 	mov	r6,r18
1000e710:	81c01704 	addi	r7,r16,92
1000e714:	000f6fc0 	call	1000f6fc <_wcrtomb_r>
1000e718:	1029883a 	mov	r20,r2
1000e71c:	00bfffc4 	movi	r2,-1
1000e720:	a0802026 	beq	r20,r2,1000e7a4 <_fputwc_r+0xf8>
1000e724:	d9400003 	ldbu	r5,0(sp)
1000e728:	a0001c26 	beq	r20,zero,1000e79c <_fputwc_r+0xf0>
1000e72c:	0023883a 	mov	r17,zero
1000e730:	05400284 	movi	r21,10
1000e734:	00000906 	br	1000e75c <_fputwc_r+0xb0>
1000e738:	80800017 	ldw	r2,0(r16)
1000e73c:	11400005 	stb	r5,0(r2)
1000e740:	80c00017 	ldw	r3,0(r16)
1000e744:	18c00044 	addi	r3,r3,1
1000e748:	80c00015 	stw	r3,0(r16)
1000e74c:	8c400044 	addi	r17,r17,1
1000e750:	dc45883a 	add	r2,sp,r17
1000e754:	8d00112e 	bgeu	r17,r20,1000e79c <_fputwc_r+0xf0>
1000e758:	11400003 	ldbu	r5,0(r2)
1000e75c:	80c00217 	ldw	r3,8(r16)
1000e760:	18ffffc4 	addi	r3,r3,-1
1000e764:	80c00215 	stw	r3,8(r16)
1000e768:	183ff30e 	bge	r3,zero,1000e738 <__alt_data_end+0xf800e738>
1000e76c:	80800617 	ldw	r2,24(r16)
1000e770:	18801916 	blt	r3,r2,1000e7d8 <_fputwc_r+0x12c>
1000e774:	80800017 	ldw	r2,0(r16)
1000e778:	11400005 	stb	r5,0(r2)
1000e77c:	80800017 	ldw	r2,0(r16)
1000e780:	10c00003 	ldbu	r3,0(r2)
1000e784:	10800044 	addi	r2,r2,1
1000e788:	1d402326 	beq	r3,r21,1000e818 <_fputwc_r+0x16c>
1000e78c:	80800015 	stw	r2,0(r16)
1000e790:	8c400044 	addi	r17,r17,1
1000e794:	dc45883a 	add	r2,sp,r17
1000e798:	8d3fef36 	bltu	r17,r20,1000e758 <__alt_data_end+0xf800e758>
1000e79c:	9005883a 	mov	r2,r18
1000e7a0:	00000406 	br	1000e7b4 <_fputwc_r+0x108>
1000e7a4:	80c0030b 	ldhu	r3,12(r16)
1000e7a8:	a005883a 	mov	r2,r20
1000e7ac:	18c01014 	ori	r3,r3,64
1000e7b0:	80c0030d 	sth	r3,12(r16)
1000e7b4:	dfc00717 	ldw	ra,28(sp)
1000e7b8:	dd400617 	ldw	r21,24(sp)
1000e7bc:	dd000517 	ldw	r20,20(sp)
1000e7c0:	dcc00417 	ldw	r19,16(sp)
1000e7c4:	dc800317 	ldw	r18,12(sp)
1000e7c8:	dc400217 	ldw	r17,8(sp)
1000e7cc:	dc000117 	ldw	r16,4(sp)
1000e7d0:	dec00804 	addi	sp,sp,32
1000e7d4:	f800283a 	ret
1000e7d8:	9809883a 	mov	r4,r19
1000e7dc:	29403fcc 	andi	r5,r5,255
1000e7e0:	800d883a 	mov	r6,r16
1000e7e4:	000f58c0 	call	1000f58c <__swbuf_r>
1000e7e8:	10bfffe0 	cmpeqi	r2,r2,-1
1000e7ec:	10803fcc 	andi	r2,r2,255
1000e7f0:	103fd626 	beq	r2,zero,1000e74c <__alt_data_end+0xf800e74c>
1000e7f4:	00bfffc4 	movi	r2,-1
1000e7f8:	003fee06 	br	1000e7b4 <__alt_data_end+0xf800e7b4>
1000e7fc:	90ffffc4 	addi	r3,r18,-1
1000e800:	01003f84 	movi	r4,254
1000e804:	20ffbf36 	bltu	r4,r3,1000e704 <__alt_data_end+0xf800e704>
1000e808:	900b883a 	mov	r5,r18
1000e80c:	dc800005 	stb	r18,0(sp)
1000e810:	1029883a 	mov	r20,r2
1000e814:	003fc506 	br	1000e72c <__alt_data_end+0xf800e72c>
1000e818:	9809883a 	mov	r4,r19
1000e81c:	a80b883a 	mov	r5,r21
1000e820:	800d883a 	mov	r6,r16
1000e824:	000f58c0 	call	1000f58c <__swbuf_r>
1000e828:	10bfffe0 	cmpeqi	r2,r2,-1
1000e82c:	003fef06 	br	1000e7ec <__alt_data_end+0xf800e7ec>

1000e830 <fputwc>:
1000e830:	defffc04 	addi	sp,sp,-16
1000e834:	dc000115 	stw	r16,4(sp)
1000e838:	04040074 	movhi	r16,4097
1000e83c:	840fad04 	addi	r16,r16,16052
1000e840:	dc400215 	stw	r17,8(sp)
1000e844:	2023883a 	mov	r17,r4
1000e848:	81000017 	ldw	r4,0(r16)
1000e84c:	dfc00315 	stw	ra,12(sp)
1000e850:	280d883a 	mov	r6,r5
1000e854:	20000626 	beq	r4,zero,1000e870 <fputwc+0x40>
1000e858:	20800e17 	ldw	r2,56(r4)
1000e85c:	1000041e 	bne	r2,zero,1000e870 <fputwc+0x40>
1000e860:	d9400015 	stw	r5,0(sp)
1000e864:	000a8480 	call	1000a848 <__sinit>
1000e868:	81000017 	ldw	r4,0(r16)
1000e86c:	d9800017 	ldw	r6,0(sp)
1000e870:	880b883a 	mov	r5,r17
1000e874:	dfc00317 	ldw	ra,12(sp)
1000e878:	dc400217 	ldw	r17,8(sp)
1000e87c:	dc000117 	ldw	r16,4(sp)
1000e880:	dec00404 	addi	sp,sp,16
1000e884:	000e6ac1 	jmpi	1000e6ac <_fputwc_r>

1000e888 <_fstat_r>:
1000e888:	defffd04 	addi	sp,sp,-12
1000e88c:	dc000015 	stw	r16,0(sp)
1000e890:	04040074 	movhi	r16,4097
1000e894:	dc400115 	stw	r17,4(sp)
1000e898:	84167e04 	addi	r16,r16,23032
1000e89c:	2023883a 	mov	r17,r4
1000e8a0:	2809883a 	mov	r4,r5
1000e8a4:	300b883a 	mov	r5,r6
1000e8a8:	dfc00215 	stw	ra,8(sp)
1000e8ac:	80000015 	stw	zero,0(r16)
1000e8b0:	000faa00 	call	1000faa0 <fstat>
1000e8b4:	00ffffc4 	movi	r3,-1
1000e8b8:	10c00526 	beq	r2,r3,1000e8d0 <_fstat_r+0x48>
1000e8bc:	dfc00217 	ldw	ra,8(sp)
1000e8c0:	dc400117 	ldw	r17,4(sp)
1000e8c4:	dc000017 	ldw	r16,0(sp)
1000e8c8:	dec00304 	addi	sp,sp,12
1000e8cc:	f800283a 	ret
1000e8d0:	80c00017 	ldw	r3,0(r16)
1000e8d4:	183ff926 	beq	r3,zero,1000e8bc <__alt_data_end+0xf800e8bc>
1000e8d8:	88c00015 	stw	r3,0(r17)
1000e8dc:	003ff706 	br	1000e8bc <__alt_data_end+0xf800e8bc>

1000e8e0 <__sfvwrite_r>:
1000e8e0:	30800217 	ldw	r2,8(r6)
1000e8e4:	10004526 	beq	r2,zero,1000e9fc <__sfvwrite_r+0x11c>
1000e8e8:	28c0030b 	ldhu	r3,12(r5)
1000e8ec:	defff404 	addi	sp,sp,-48
1000e8f0:	dd400715 	stw	r21,28(sp)
1000e8f4:	dcc00515 	stw	r19,20(sp)
1000e8f8:	dc000215 	stw	r16,8(sp)
1000e8fc:	dfc00b15 	stw	ra,44(sp)
1000e900:	df000a15 	stw	fp,40(sp)
1000e904:	ddc00915 	stw	r23,36(sp)
1000e908:	dd800815 	stw	r22,32(sp)
1000e90c:	dd000615 	stw	r20,24(sp)
1000e910:	dc800415 	stw	r18,16(sp)
1000e914:	dc400315 	stw	r17,12(sp)
1000e918:	1880020c 	andi	r2,r3,8
1000e91c:	2821883a 	mov	r16,r5
1000e920:	202b883a 	mov	r21,r4
1000e924:	3027883a 	mov	r19,r6
1000e928:	10002526 	beq	r2,zero,1000e9c0 <__sfvwrite_r+0xe0>
1000e92c:	28800417 	ldw	r2,16(r5)
1000e930:	10002326 	beq	r2,zero,1000e9c0 <__sfvwrite_r+0xe0>
1000e934:	1880008c 	andi	r2,r3,2
1000e938:	9c400017 	ldw	r17,0(r19)
1000e93c:	10003126 	beq	r2,zero,1000ea04 <__sfvwrite_r+0x124>
1000e940:	0029883a 	mov	r20,zero
1000e944:	0025883a 	mov	r18,zero
1000e948:	05810004 	movi	r22,1024
1000e94c:	a00d883a 	mov	r6,r20
1000e950:	a809883a 	mov	r4,r21
1000e954:	90002526 	beq	r18,zero,1000e9ec <__sfvwrite_r+0x10c>
1000e958:	900f883a 	mov	r7,r18
1000e95c:	81400717 	ldw	r5,28(r16)
1000e960:	b480012e 	bgeu	r22,r18,1000e968 <__sfvwrite_r+0x88>
1000e964:	01c10004 	movi	r7,1024
1000e968:	80800917 	ldw	r2,36(r16)
1000e96c:	103ee83a 	callr	r2
1000e970:	0080510e 	bge	zero,r2,1000eab8 <__sfvwrite_r+0x1d8>
1000e974:	98c00217 	ldw	r3,8(r19)
1000e978:	a0a9883a 	add	r20,r20,r2
1000e97c:	90a5c83a 	sub	r18,r18,r2
1000e980:	1885c83a 	sub	r2,r3,r2
1000e984:	98800215 	stw	r2,8(r19)
1000e988:	103ff01e 	bne	r2,zero,1000e94c <__alt_data_end+0xf800e94c>
1000e98c:	0005883a 	mov	r2,zero
1000e990:	dfc00b17 	ldw	ra,44(sp)
1000e994:	df000a17 	ldw	fp,40(sp)
1000e998:	ddc00917 	ldw	r23,36(sp)
1000e99c:	dd800817 	ldw	r22,32(sp)
1000e9a0:	dd400717 	ldw	r21,28(sp)
1000e9a4:	dd000617 	ldw	r20,24(sp)
1000e9a8:	dcc00517 	ldw	r19,20(sp)
1000e9ac:	dc800417 	ldw	r18,16(sp)
1000e9b0:	dc400317 	ldw	r17,12(sp)
1000e9b4:	dc000217 	ldw	r16,8(sp)
1000e9b8:	dec00c04 	addi	sp,sp,48
1000e9bc:	f800283a 	ret
1000e9c0:	a809883a 	mov	r4,r21
1000e9c4:	800b883a 	mov	r5,r16
1000e9c8:	000880c0 	call	1000880c <__swsetup_r>
1000e9cc:	80c0030b 	ldhu	r3,12(r16)
1000e9d0:	103fd826 	beq	r2,zero,1000e934 <__alt_data_end+0xf800e934>
1000e9d4:	18c01014 	ori	r3,r3,64
1000e9d8:	80c0030d 	sth	r3,12(r16)
1000e9dc:	00c00244 	movi	r3,9
1000e9e0:	00bfffc4 	movi	r2,-1
1000e9e4:	a8c00015 	stw	r3,0(r21)
1000e9e8:	003fe906 	br	1000e990 <__alt_data_end+0xf800e990>
1000e9ec:	8d000017 	ldw	r20,0(r17)
1000e9f0:	8c800117 	ldw	r18,4(r17)
1000e9f4:	8c400204 	addi	r17,r17,8
1000e9f8:	003fd406 	br	1000e94c <__alt_data_end+0xf800e94c>
1000e9fc:	0005883a 	mov	r2,zero
1000ea00:	f800283a 	ret
1000ea04:	1880004c 	andi	r2,r3,1
1000ea08:	1000301e 	bne	r2,zero,1000eacc <__sfvwrite_r+0x1ec>
1000ea0c:	002f883a 	mov	r23,zero
1000ea10:	0025883a 	mov	r18,zero
1000ea14:	90001c26 	beq	r18,zero,1000ea88 <__sfvwrite_r+0x1a8>
1000ea18:	1880800c 	andi	r2,r3,512
1000ea1c:	85000217 	ldw	r20,8(r16)
1000ea20:	10006c26 	beq	r2,zero,1000ebd4 <__sfvwrite_r+0x2f4>
1000ea24:	a02d883a 	mov	r22,r20
1000ea28:	95008536 	bltu	r18,r20,1000ec40 <__sfvwrite_r+0x360>
1000ea2c:	1881200c 	andi	r2,r3,1152
1000ea30:	10009d1e 	bne	r2,zero,1000eca8 <__sfvwrite_r+0x3c8>
1000ea34:	81000017 	ldw	r4,0(r16)
1000ea38:	a039883a 	mov	fp,r20
1000ea3c:	9029883a 	mov	r20,r18
1000ea40:	b80b883a 	mov	r5,r23
1000ea44:	b00d883a 	mov	r6,r22
1000ea48:	000ee340 	call	1000ee34 <memmove>
1000ea4c:	80c00217 	ldw	r3,8(r16)
1000ea50:	81000017 	ldw	r4,0(r16)
1000ea54:	9005883a 	mov	r2,r18
1000ea58:	1f39c83a 	sub	fp,r3,fp
1000ea5c:	258f883a 	add	r7,r4,r22
1000ea60:	87000215 	stw	fp,8(r16)
1000ea64:	81c00015 	stw	r7,0(r16)
1000ea68:	98c00217 	ldw	r3,8(r19)
1000ea6c:	b8af883a 	add	r23,r23,r2
1000ea70:	90a5c83a 	sub	r18,r18,r2
1000ea74:	1d05c83a 	sub	r2,r3,r20
1000ea78:	98800215 	stw	r2,8(r19)
1000ea7c:	103fc326 	beq	r2,zero,1000e98c <__alt_data_end+0xf800e98c>
1000ea80:	80c0030b 	ldhu	r3,12(r16)
1000ea84:	903fe41e 	bne	r18,zero,1000ea18 <__alt_data_end+0xf800ea18>
1000ea88:	8dc00017 	ldw	r23,0(r17)
1000ea8c:	8c800117 	ldw	r18,4(r17)
1000ea90:	8c400204 	addi	r17,r17,8
1000ea94:	003fdf06 	br	1000ea14 <__alt_data_end+0xf800ea14>
1000ea98:	000efec0 	call	1000efec <_realloc_r>
1000ea9c:	102d883a 	mov	r22,r2
1000eaa0:	1000a01e 	bne	r2,zero,1000ed24 <__sfvwrite_r+0x444>
1000eaa4:	81400417 	ldw	r5,16(r16)
1000eaa8:	a809883a 	mov	r4,r21
1000eaac:	000a9bc0 	call	1000a9bc <_free_r>
1000eab0:	00800304 	movi	r2,12
1000eab4:	a8800015 	stw	r2,0(r21)
1000eab8:	80c0030b 	ldhu	r3,12(r16)
1000eabc:	00bfffc4 	movi	r2,-1
1000eac0:	18c01014 	ori	r3,r3,64
1000eac4:	80c0030d 	sth	r3,12(r16)
1000eac8:	003fb106 	br	1000e990 <__alt_data_end+0xf800e990>
1000eacc:	0029883a 	mov	r20,zero
1000ead0:	0011883a 	mov	r8,zero
1000ead4:	0039883a 	mov	fp,zero
1000ead8:	0025883a 	mov	r18,zero
1000eadc:	90001f26 	beq	r18,zero,1000eb5c <__sfvwrite_r+0x27c>
1000eae0:	40006826 	beq	r8,zero,1000ec84 <__sfvwrite_r+0x3a4>
1000eae4:	a02f883a 	mov	r23,r20
1000eae8:	9500012e 	bgeu	r18,r20,1000eaf0 <__sfvwrite_r+0x210>
1000eaec:	902f883a 	mov	r23,r18
1000eaf0:	81000017 	ldw	r4,0(r16)
1000eaf4:	80800417 	ldw	r2,16(r16)
1000eaf8:	b82d883a 	mov	r22,r23
1000eafc:	81800217 	ldw	r6,8(r16)
1000eb00:	81c00517 	ldw	r7,20(r16)
1000eb04:	1100022e 	bgeu	r2,r4,1000eb10 <__sfvwrite_r+0x230>
1000eb08:	31c7883a 	add	r3,r6,r7
1000eb0c:	1dc01816 	blt	r3,r23,1000eb70 <__sfvwrite_r+0x290>
1000eb10:	b9c03f16 	blt	r23,r7,1000ec10 <__sfvwrite_r+0x330>
1000eb14:	80800917 	ldw	r2,36(r16)
1000eb18:	81400717 	ldw	r5,28(r16)
1000eb1c:	a809883a 	mov	r4,r21
1000eb20:	da000115 	stw	r8,4(sp)
1000eb24:	e00d883a 	mov	r6,fp
1000eb28:	103ee83a 	callr	r2
1000eb2c:	102d883a 	mov	r22,r2
1000eb30:	da000117 	ldw	r8,4(sp)
1000eb34:	00bfe00e 	bge	zero,r2,1000eab8 <__alt_data_end+0xf800eab8>
1000eb38:	a5a9c83a 	sub	r20,r20,r22
1000eb3c:	a0001f26 	beq	r20,zero,1000ebbc <__sfvwrite_r+0x2dc>
1000eb40:	98800217 	ldw	r2,8(r19)
1000eb44:	e5b9883a 	add	fp,fp,r22
1000eb48:	95a5c83a 	sub	r18,r18,r22
1000eb4c:	15adc83a 	sub	r22,r2,r22
1000eb50:	9d800215 	stw	r22,8(r19)
1000eb54:	b03f8d26 	beq	r22,zero,1000e98c <__alt_data_end+0xf800e98c>
1000eb58:	903fe11e 	bne	r18,zero,1000eae0 <__alt_data_end+0xf800eae0>
1000eb5c:	8f000017 	ldw	fp,0(r17)
1000eb60:	8c800117 	ldw	r18,4(r17)
1000eb64:	0011883a 	mov	r8,zero
1000eb68:	8c400204 	addi	r17,r17,8
1000eb6c:	003fdb06 	br	1000eadc <__alt_data_end+0xf800eadc>
1000eb70:	180d883a 	mov	r6,r3
1000eb74:	e00b883a 	mov	r5,fp
1000eb78:	da000115 	stw	r8,4(sp)
1000eb7c:	d8c00015 	stw	r3,0(sp)
1000eb80:	000ee340 	call	1000ee34 <memmove>
1000eb84:	d8c00017 	ldw	r3,0(sp)
1000eb88:	80800017 	ldw	r2,0(r16)
1000eb8c:	a809883a 	mov	r4,r21
1000eb90:	800b883a 	mov	r5,r16
1000eb94:	10c5883a 	add	r2,r2,r3
1000eb98:	80800015 	stw	r2,0(r16)
1000eb9c:	d8c00015 	stw	r3,0(sp)
1000eba0:	000a28c0 	call	1000a28c <_fflush_r>
1000eba4:	d8c00017 	ldw	r3,0(sp)
1000eba8:	da000117 	ldw	r8,4(sp)
1000ebac:	103fc21e 	bne	r2,zero,1000eab8 <__alt_data_end+0xf800eab8>
1000ebb0:	182d883a 	mov	r22,r3
1000ebb4:	a5a9c83a 	sub	r20,r20,r22
1000ebb8:	a03fe11e 	bne	r20,zero,1000eb40 <__alt_data_end+0xf800eb40>
1000ebbc:	a809883a 	mov	r4,r21
1000ebc0:	800b883a 	mov	r5,r16
1000ebc4:	000a28c0 	call	1000a28c <_fflush_r>
1000ebc8:	103fbb1e 	bne	r2,zero,1000eab8 <__alt_data_end+0xf800eab8>
1000ebcc:	0011883a 	mov	r8,zero
1000ebd0:	003fdb06 	br	1000eb40 <__alt_data_end+0xf800eb40>
1000ebd4:	81000017 	ldw	r4,0(r16)
1000ebd8:	80800417 	ldw	r2,16(r16)
1000ebdc:	1100012e 	bgeu	r2,r4,1000ebe4 <__sfvwrite_r+0x304>
1000ebe0:	a4805a36 	bltu	r20,r18,1000ed4c <__sfvwrite_r+0x46c>
1000ebe4:	81c00517 	ldw	r7,20(r16)
1000ebe8:	91c01a36 	bltu	r18,r7,1000ec54 <__sfvwrite_r+0x374>
1000ebec:	80800917 	ldw	r2,36(r16)
1000ebf0:	81400717 	ldw	r5,28(r16)
1000ebf4:	a809883a 	mov	r4,r21
1000ebf8:	b80d883a 	mov	r6,r23
1000ebfc:	103ee83a 	callr	r2
1000ec00:	1029883a 	mov	r20,r2
1000ec04:	00bfac0e 	bge	zero,r2,1000eab8 <__alt_data_end+0xf800eab8>
1000ec08:	a005883a 	mov	r2,r20
1000ec0c:	003f9606 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000ec10:	b80d883a 	mov	r6,r23
1000ec14:	e00b883a 	mov	r5,fp
1000ec18:	da000115 	stw	r8,4(sp)
1000ec1c:	000ee340 	call	1000ee34 <memmove>
1000ec20:	80800217 	ldw	r2,8(r16)
1000ec24:	80c00017 	ldw	r3,0(r16)
1000ec28:	da000117 	ldw	r8,4(sp)
1000ec2c:	15c5c83a 	sub	r2,r2,r23
1000ec30:	1def883a 	add	r23,r3,r23
1000ec34:	80800215 	stw	r2,8(r16)
1000ec38:	85c00015 	stw	r23,0(r16)
1000ec3c:	003fbe06 	br	1000eb38 <__alt_data_end+0xf800eb38>
1000ec40:	81000017 	ldw	r4,0(r16)
1000ec44:	9039883a 	mov	fp,r18
1000ec48:	9029883a 	mov	r20,r18
1000ec4c:	902d883a 	mov	r22,r18
1000ec50:	003f7b06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ec54:	b80b883a 	mov	r5,r23
1000ec58:	900d883a 	mov	r6,r18
1000ec5c:	000ee340 	call	1000ee34 <memmove>
1000ec60:	80c00217 	ldw	r3,8(r16)
1000ec64:	80800017 	ldw	r2,0(r16)
1000ec68:	9029883a 	mov	r20,r18
1000ec6c:	1c87c83a 	sub	r3,r3,r18
1000ec70:	1485883a 	add	r2,r2,r18
1000ec74:	80800015 	stw	r2,0(r16)
1000ec78:	80c00215 	stw	r3,8(r16)
1000ec7c:	9005883a 	mov	r2,r18
1000ec80:	003f7906 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000ec84:	e009883a 	mov	r4,fp
1000ec88:	01400284 	movi	r5,10
1000ec8c:	900d883a 	mov	r6,r18
1000ec90:	000b85c0 	call	1000b85c <memchr>
1000ec94:	10003826 	beq	r2,zero,1000ed78 <__sfvwrite_r+0x498>
1000ec98:	10800044 	addi	r2,r2,1
1000ec9c:	1729c83a 	sub	r20,r2,fp
1000eca0:	02000044 	movi	r8,1
1000eca4:	003f8f06 	br	1000eae4 <__alt_data_end+0xf800eae4>
1000eca8:	80800517 	ldw	r2,20(r16)
1000ecac:	81400417 	ldw	r5,16(r16)
1000ecb0:	87000017 	ldw	fp,0(r16)
1000ecb4:	10a9883a 	add	r20,r2,r2
1000ecb8:	a085883a 	add	r2,r20,r2
1000ecbc:	1028d7fa 	srli	r20,r2,31
1000ecc0:	e179c83a 	sub	fp,fp,r5
1000ecc4:	e1000044 	addi	r4,fp,1
1000ecc8:	a085883a 	add	r2,r20,r2
1000eccc:	1029d07a 	srai	r20,r2,1
1000ecd0:	2485883a 	add	r2,r4,r18
1000ecd4:	a00d883a 	mov	r6,r20
1000ecd8:	a080022e 	bgeu	r20,r2,1000ece4 <__sfvwrite_r+0x404>
1000ecdc:	1029883a 	mov	r20,r2
1000ece0:	100d883a 	mov	r6,r2
1000ece4:	18c1000c 	andi	r3,r3,1024
1000ece8:	a809883a 	mov	r4,r21
1000ecec:	183f6a26 	beq	r3,zero,1000ea98 <__alt_data_end+0xf800ea98>
1000ecf0:	300b883a 	mov	r5,r6
1000ecf4:	000b0b40 	call	1000b0b4 <_malloc_r>
1000ecf8:	102d883a 	mov	r22,r2
1000ecfc:	103f6c26 	beq	r2,zero,1000eab0 <__alt_data_end+0xf800eab0>
1000ed00:	81400417 	ldw	r5,16(r16)
1000ed04:	1009883a 	mov	r4,r2
1000ed08:	e00d883a 	mov	r6,fp
1000ed0c:	000b9440 	call	1000b944 <memcpy>
1000ed10:	8080030b 	ldhu	r2,12(r16)
1000ed14:	00fedfc4 	movi	r3,-1153
1000ed18:	10c4703a 	and	r2,r2,r3
1000ed1c:	10802014 	ori	r2,r2,128
1000ed20:	8080030d 	sth	r2,12(r16)
1000ed24:	b709883a 	add	r4,r22,fp
1000ed28:	a707c83a 	sub	r3,r20,fp
1000ed2c:	85800415 	stw	r22,16(r16)
1000ed30:	85000515 	stw	r20,20(r16)
1000ed34:	81000015 	stw	r4,0(r16)
1000ed38:	9039883a 	mov	fp,r18
1000ed3c:	80c00215 	stw	r3,8(r16)
1000ed40:	9029883a 	mov	r20,r18
1000ed44:	902d883a 	mov	r22,r18
1000ed48:	003f3d06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ed4c:	b80b883a 	mov	r5,r23
1000ed50:	a00d883a 	mov	r6,r20
1000ed54:	000ee340 	call	1000ee34 <memmove>
1000ed58:	80800017 	ldw	r2,0(r16)
1000ed5c:	a809883a 	mov	r4,r21
1000ed60:	800b883a 	mov	r5,r16
1000ed64:	1505883a 	add	r2,r2,r20
1000ed68:	80800015 	stw	r2,0(r16)
1000ed6c:	000a28c0 	call	1000a28c <_fflush_r>
1000ed70:	103fa526 	beq	r2,zero,1000ec08 <__alt_data_end+0xf800ec08>
1000ed74:	003f5006 	br	1000eab8 <__alt_data_end+0xf800eab8>
1000ed78:	95000044 	addi	r20,r18,1
1000ed7c:	02000044 	movi	r8,1
1000ed80:	003f5806 	br	1000eae4 <__alt_data_end+0xf800eae4>

1000ed84 <_isatty_r>:
1000ed84:	defffd04 	addi	sp,sp,-12
1000ed88:	dc000015 	stw	r16,0(sp)
1000ed8c:	04040074 	movhi	r16,4097
1000ed90:	dc400115 	stw	r17,4(sp)
1000ed94:	84167e04 	addi	r16,r16,23032
1000ed98:	2023883a 	mov	r17,r4
1000ed9c:	2809883a 	mov	r4,r5
1000eda0:	dfc00215 	stw	ra,8(sp)
1000eda4:	80000015 	stw	zero,0(r16)
1000eda8:	000fba80 	call	1000fba8 <isatty>
1000edac:	00ffffc4 	movi	r3,-1
1000edb0:	10c00526 	beq	r2,r3,1000edc8 <_isatty_r+0x44>
1000edb4:	dfc00217 	ldw	ra,8(sp)
1000edb8:	dc400117 	ldw	r17,4(sp)
1000edbc:	dc000017 	ldw	r16,0(sp)
1000edc0:	dec00304 	addi	sp,sp,12
1000edc4:	f800283a 	ret
1000edc8:	80c00017 	ldw	r3,0(r16)
1000edcc:	183ff926 	beq	r3,zero,1000edb4 <__alt_data_end+0xf800edb4>
1000edd0:	88c00015 	stw	r3,0(r17)
1000edd4:	003ff706 	br	1000edb4 <__alt_data_end+0xf800edb4>

1000edd8 <_lseek_r>:
1000edd8:	defffd04 	addi	sp,sp,-12
1000eddc:	dc000015 	stw	r16,0(sp)
1000ede0:	04040074 	movhi	r16,4097
1000ede4:	dc400115 	stw	r17,4(sp)
1000ede8:	84167e04 	addi	r16,r16,23032
1000edec:	2023883a 	mov	r17,r4
1000edf0:	2809883a 	mov	r4,r5
1000edf4:	300b883a 	mov	r5,r6
1000edf8:	380d883a 	mov	r6,r7
1000edfc:	dfc00215 	stw	ra,8(sp)
1000ee00:	80000015 	stw	zero,0(r16)
1000ee04:	000fd880 	call	1000fd88 <lseek>
1000ee08:	00ffffc4 	movi	r3,-1
1000ee0c:	10c00526 	beq	r2,r3,1000ee24 <_lseek_r+0x4c>
1000ee10:	dfc00217 	ldw	ra,8(sp)
1000ee14:	dc400117 	ldw	r17,4(sp)
1000ee18:	dc000017 	ldw	r16,0(sp)
1000ee1c:	dec00304 	addi	sp,sp,12
1000ee20:	f800283a 	ret
1000ee24:	80c00017 	ldw	r3,0(r16)
1000ee28:	183ff926 	beq	r3,zero,1000ee10 <__alt_data_end+0xf800ee10>
1000ee2c:	88c00015 	stw	r3,0(r17)
1000ee30:	003ff706 	br	1000ee10 <__alt_data_end+0xf800ee10>

1000ee34 <memmove>:
1000ee34:	2005883a 	mov	r2,r4
1000ee38:	29000b2e 	bgeu	r5,r4,1000ee68 <memmove+0x34>
1000ee3c:	298f883a 	add	r7,r5,r6
1000ee40:	21c0092e 	bgeu	r4,r7,1000ee68 <memmove+0x34>
1000ee44:	2187883a 	add	r3,r4,r6
1000ee48:	198bc83a 	sub	r5,r3,r6
1000ee4c:	30004b26 	beq	r6,zero,1000ef7c <memmove+0x148>
1000ee50:	39ffffc4 	addi	r7,r7,-1
1000ee54:	39000003 	ldbu	r4,0(r7)
1000ee58:	18ffffc4 	addi	r3,r3,-1
1000ee5c:	19000005 	stb	r4,0(r3)
1000ee60:	197ffb1e 	bne	r3,r5,1000ee50 <__alt_data_end+0xf800ee50>
1000ee64:	f800283a 	ret
1000ee68:	00c003c4 	movi	r3,15
1000ee6c:	1980412e 	bgeu	r3,r6,1000ef74 <memmove+0x140>
1000ee70:	1146b03a 	or	r3,r2,r5
1000ee74:	18c000cc 	andi	r3,r3,3
1000ee78:	1800411e 	bne	r3,zero,1000ef80 <memmove+0x14c>
1000ee7c:	33fffc04 	addi	r15,r6,-16
1000ee80:	781ed13a 	srli	r15,r15,4
1000ee84:	28c00104 	addi	r3,r5,4
1000ee88:	13400104 	addi	r13,r2,4
1000ee8c:	781c913a 	slli	r14,r15,4
1000ee90:	2b000204 	addi	r12,r5,8
1000ee94:	12c00204 	addi	r11,r2,8
1000ee98:	73800504 	addi	r14,r14,20
1000ee9c:	2a800304 	addi	r10,r5,12
1000eea0:	12400304 	addi	r9,r2,12
1000eea4:	2b9d883a 	add	r14,r5,r14
1000eea8:	2811883a 	mov	r8,r5
1000eeac:	100f883a 	mov	r7,r2
1000eeb0:	41000017 	ldw	r4,0(r8)
1000eeb4:	39c00404 	addi	r7,r7,16
1000eeb8:	18c00404 	addi	r3,r3,16
1000eebc:	393ffc15 	stw	r4,-16(r7)
1000eec0:	193ffc17 	ldw	r4,-16(r3)
1000eec4:	6b400404 	addi	r13,r13,16
1000eec8:	5ac00404 	addi	r11,r11,16
1000eecc:	693ffc15 	stw	r4,-16(r13)
1000eed0:	61000017 	ldw	r4,0(r12)
1000eed4:	4a400404 	addi	r9,r9,16
1000eed8:	42000404 	addi	r8,r8,16
1000eedc:	593ffc15 	stw	r4,-16(r11)
1000eee0:	51000017 	ldw	r4,0(r10)
1000eee4:	63000404 	addi	r12,r12,16
1000eee8:	52800404 	addi	r10,r10,16
1000eeec:	493ffc15 	stw	r4,-16(r9)
1000eef0:	1bbfef1e 	bne	r3,r14,1000eeb0 <__alt_data_end+0xf800eeb0>
1000eef4:	79000044 	addi	r4,r15,1
1000eef8:	2008913a 	slli	r4,r4,4
1000eefc:	328003cc 	andi	r10,r6,15
1000ef00:	02c000c4 	movi	r11,3
1000ef04:	1107883a 	add	r3,r2,r4
1000ef08:	290b883a 	add	r5,r5,r4
1000ef0c:	5a801e2e 	bgeu	r11,r10,1000ef88 <memmove+0x154>
1000ef10:	1813883a 	mov	r9,r3
1000ef14:	2811883a 	mov	r8,r5
1000ef18:	500f883a 	mov	r7,r10
1000ef1c:	41000017 	ldw	r4,0(r8)
1000ef20:	4a400104 	addi	r9,r9,4
1000ef24:	39ffff04 	addi	r7,r7,-4
1000ef28:	493fff15 	stw	r4,-4(r9)
1000ef2c:	42000104 	addi	r8,r8,4
1000ef30:	59fffa36 	bltu	r11,r7,1000ef1c <__alt_data_end+0xf800ef1c>
1000ef34:	513fff04 	addi	r4,r10,-4
1000ef38:	2008d0ba 	srli	r4,r4,2
1000ef3c:	318000cc 	andi	r6,r6,3
1000ef40:	21000044 	addi	r4,r4,1
1000ef44:	2109883a 	add	r4,r4,r4
1000ef48:	2109883a 	add	r4,r4,r4
1000ef4c:	1907883a 	add	r3,r3,r4
1000ef50:	290b883a 	add	r5,r5,r4
1000ef54:	30000926 	beq	r6,zero,1000ef7c <memmove+0x148>
1000ef58:	198d883a 	add	r6,r3,r6
1000ef5c:	29c00003 	ldbu	r7,0(r5)
1000ef60:	18c00044 	addi	r3,r3,1
1000ef64:	29400044 	addi	r5,r5,1
1000ef68:	19ffffc5 	stb	r7,-1(r3)
1000ef6c:	19bffb1e 	bne	r3,r6,1000ef5c <__alt_data_end+0xf800ef5c>
1000ef70:	f800283a 	ret
1000ef74:	1007883a 	mov	r3,r2
1000ef78:	003ff606 	br	1000ef54 <__alt_data_end+0xf800ef54>
1000ef7c:	f800283a 	ret
1000ef80:	1007883a 	mov	r3,r2
1000ef84:	003ff406 	br	1000ef58 <__alt_data_end+0xf800ef58>
1000ef88:	500d883a 	mov	r6,r10
1000ef8c:	003ff106 	br	1000ef54 <__alt_data_end+0xf800ef54>

1000ef90 <_read_r>:
1000ef90:	defffd04 	addi	sp,sp,-12
1000ef94:	dc000015 	stw	r16,0(sp)
1000ef98:	04040074 	movhi	r16,4097
1000ef9c:	dc400115 	stw	r17,4(sp)
1000efa0:	84167e04 	addi	r16,r16,23032
1000efa4:	2023883a 	mov	r17,r4
1000efa8:	2809883a 	mov	r4,r5
1000efac:	300b883a 	mov	r5,r6
1000efb0:	380d883a 	mov	r6,r7
1000efb4:	dfc00215 	stw	ra,8(sp)
1000efb8:	80000015 	stw	zero,0(r16)
1000efbc:	000ff6c0 	call	1000ff6c <read>
1000efc0:	00ffffc4 	movi	r3,-1
1000efc4:	10c00526 	beq	r2,r3,1000efdc <_read_r+0x4c>
1000efc8:	dfc00217 	ldw	ra,8(sp)
1000efcc:	dc400117 	ldw	r17,4(sp)
1000efd0:	dc000017 	ldw	r16,0(sp)
1000efd4:	dec00304 	addi	sp,sp,12
1000efd8:	f800283a 	ret
1000efdc:	80c00017 	ldw	r3,0(r16)
1000efe0:	183ff926 	beq	r3,zero,1000efc8 <__alt_data_end+0xf800efc8>
1000efe4:	88c00015 	stw	r3,0(r17)
1000efe8:	003ff706 	br	1000efc8 <__alt_data_end+0xf800efc8>

1000efec <_realloc_r>:
1000efec:	defff604 	addi	sp,sp,-40
1000eff0:	dcc00315 	stw	r19,12(sp)
1000eff4:	dc400115 	stw	r17,4(sp)
1000eff8:	dfc00915 	stw	ra,36(sp)
1000effc:	df000815 	stw	fp,32(sp)
1000f000:	ddc00715 	stw	r23,28(sp)
1000f004:	dd800615 	stw	r22,24(sp)
1000f008:	dd400515 	stw	r21,20(sp)
1000f00c:	dd000415 	stw	r20,16(sp)
1000f010:	dc800215 	stw	r18,8(sp)
1000f014:	dc000015 	stw	r16,0(sp)
1000f018:	2827883a 	mov	r19,r5
1000f01c:	3023883a 	mov	r17,r6
1000f020:	2800bf26 	beq	r5,zero,1000f320 <_realloc_r+0x334>
1000f024:	2025883a 	mov	r18,r4
1000f028:	000fedc0 	call	1000fedc <__malloc_lock>
1000f02c:	98ffff17 	ldw	r3,-4(r19)
1000f030:	01bfff04 	movi	r6,-4
1000f034:	890002c4 	addi	r4,r17,11
1000f038:	01c00584 	movi	r7,22
1000f03c:	9d7ffe04 	addi	r21,r19,-8
1000f040:	19a0703a 	and	r16,r3,r6
1000f044:	39003f2e 	bgeu	r7,r4,1000f144 <_realloc_r+0x158>
1000f048:	053ffe04 	movi	r20,-8
1000f04c:	2528703a 	and	r20,r4,r20
1000f050:	a00f883a 	mov	r7,r20
1000f054:	a0008216 	blt	r20,zero,1000f260 <_realloc_r+0x274>
1000f058:	a4408136 	bltu	r20,r17,1000f260 <_realloc_r+0x274>
1000f05c:	81c03c0e 	bge	r16,r7,1000f150 <_realloc_r+0x164>
1000f060:	07040074 	movhi	fp,4097
1000f064:	e70a2704 	addi	fp,fp,10396
1000f068:	e1000217 	ldw	r4,8(fp)
1000f06c:	ac05883a 	add	r2,r21,r16
1000f070:	2080bf26 	beq	r4,r2,1000f370 <_realloc_r+0x384>
1000f074:	11000117 	ldw	r4,4(r2)
1000f078:	023fff84 	movi	r8,-2
1000f07c:	2210703a 	and	r8,r4,r8
1000f080:	1211883a 	add	r8,r2,r8
1000f084:	41400117 	ldw	r5,4(r8)
1000f088:	2940004c 	andi	r5,r5,1
1000f08c:	28004a1e 	bne	r5,zero,1000f1b8 <_realloc_r+0x1cc>
1000f090:	017fff04 	movi	r5,-4
1000f094:	2148703a 	and	r4,r4,r5
1000f098:	2409883a 	add	r4,r4,r16
1000f09c:	21c0ad0e 	bge	r4,r7,1000f354 <_realloc_r+0x368>
1000f0a0:	18c0004c 	andi	r3,r3,1
1000f0a4:	18007f1e 	bne	r3,zero,1000f2a4 <_realloc_r+0x2b8>
1000f0a8:	9dfffe17 	ldw	r23,-8(r19)
1000f0ac:	adefc83a 	sub	r23,r21,r23
1000f0b0:	bd800117 	ldw	r22,4(r23)
1000f0b4:	b14a703a 	and	r5,r22,r5
1000f0b8:	216d883a 	add	r22,r4,r5
1000f0bc:	b1c04516 	blt	r22,r7,1000f1d4 <_realloc_r+0x1e8>
1000f0c0:	10c00317 	ldw	r3,12(r2)
1000f0c4:	10800217 	ldw	r2,8(r2)
1000f0c8:	81bfff04 	addi	r6,r16,-4
1000f0cc:	bc400204 	addi	r17,r23,8
1000f0d0:	10c00315 	stw	r3,12(r2)
1000f0d4:	18800215 	stw	r2,8(r3)
1000f0d8:	b9400217 	ldw	r5,8(r23)
1000f0dc:	b8c00317 	ldw	r3,12(r23)
1000f0e0:	00800904 	movi	r2,36
1000f0e4:	28c00315 	stw	r3,12(r5)
1000f0e8:	19400215 	stw	r5,8(r3)
1000f0ec:	1180ef36 	bltu	r2,r6,1000f4ac <_realloc_r+0x4c0>
1000f0f0:	008004c4 	movi	r2,19
1000f0f4:	1180da2e 	bgeu	r2,r6,1000f460 <_realloc_r+0x474>
1000f0f8:	98800017 	ldw	r2,0(r19)
1000f0fc:	b8800215 	stw	r2,8(r23)
1000f100:	98800117 	ldw	r2,4(r19)
1000f104:	b8800315 	stw	r2,12(r23)
1000f108:	008006c4 	movi	r2,27
1000f10c:	1180fc2e 	bgeu	r2,r6,1000f500 <_realloc_r+0x514>
1000f110:	98800217 	ldw	r2,8(r19)
1000f114:	b8800415 	stw	r2,16(r23)
1000f118:	98800317 	ldw	r2,12(r19)
1000f11c:	b8800515 	stw	r2,20(r23)
1000f120:	00800904 	movi	r2,36
1000f124:	3080421e 	bne	r6,r2,1000f230 <_realloc_r+0x244>
1000f128:	98800417 	ldw	r2,16(r19)
1000f12c:	9cc00604 	addi	r19,r19,24
1000f130:	b8c00804 	addi	r3,r23,32
1000f134:	b8800615 	stw	r2,24(r23)
1000f138:	98bfff17 	ldw	r2,-4(r19)
1000f13c:	b8800715 	stw	r2,28(r23)
1000f140:	00003d06 	br	1000f238 <_realloc_r+0x24c>
1000f144:	01c00404 	movi	r7,16
1000f148:	3829883a 	mov	r20,r7
1000f14c:	003fc206 	br	1000f058 <__alt_data_end+0xf800f058>
1000f150:	9823883a 	mov	r17,r19
1000f154:	850fc83a 	sub	r7,r16,r20
1000f158:	008003c4 	movi	r2,15
1000f15c:	18c0004c 	andi	r3,r3,1
1000f160:	11c04336 	bltu	r2,r7,1000f270 <_realloc_r+0x284>
1000f164:	1c06b03a 	or	r3,r3,r16
1000f168:	a8c00115 	stw	r3,4(r21)
1000f16c:	ac21883a 	add	r16,r21,r16
1000f170:	80c00117 	ldw	r3,4(r16)
1000f174:	18c00054 	ori	r3,r3,1
1000f178:	80c00115 	stw	r3,4(r16)
1000f17c:	9009883a 	mov	r4,r18
1000f180:	000fefc0 	call	1000fefc <__malloc_unlock>
1000f184:	8805883a 	mov	r2,r17
1000f188:	dfc00917 	ldw	ra,36(sp)
1000f18c:	df000817 	ldw	fp,32(sp)
1000f190:	ddc00717 	ldw	r23,28(sp)
1000f194:	dd800617 	ldw	r22,24(sp)
1000f198:	dd400517 	ldw	r21,20(sp)
1000f19c:	dd000417 	ldw	r20,16(sp)
1000f1a0:	dcc00317 	ldw	r19,12(sp)
1000f1a4:	dc800217 	ldw	r18,8(sp)
1000f1a8:	dc400117 	ldw	r17,4(sp)
1000f1ac:	dc000017 	ldw	r16,0(sp)
1000f1b0:	dec00a04 	addi	sp,sp,40
1000f1b4:	f800283a 	ret
1000f1b8:	18c0004c 	andi	r3,r3,1
1000f1bc:	1800391e 	bne	r3,zero,1000f2a4 <_realloc_r+0x2b8>
1000f1c0:	9dfffe17 	ldw	r23,-8(r19)
1000f1c4:	00bfff04 	movi	r2,-4
1000f1c8:	adefc83a 	sub	r23,r21,r23
1000f1cc:	b9400117 	ldw	r5,4(r23)
1000f1d0:	288a703a 	and	r5,r5,r2
1000f1d4:	2c2d883a 	add	r22,r5,r16
1000f1d8:	b1c03216 	blt	r22,r7,1000f2a4 <_realloc_r+0x2b8>
1000f1dc:	b8800317 	ldw	r2,12(r23)
1000f1e0:	b8c00217 	ldw	r3,8(r23)
1000f1e4:	81bfff04 	addi	r6,r16,-4
1000f1e8:	01000904 	movi	r4,36
1000f1ec:	18800315 	stw	r2,12(r3)
1000f1f0:	10c00215 	stw	r3,8(r2)
1000f1f4:	bc400204 	addi	r17,r23,8
1000f1f8:	2180ac36 	bltu	r4,r6,1000f4ac <_realloc_r+0x4c0>
1000f1fc:	008004c4 	movi	r2,19
1000f200:	1180972e 	bgeu	r2,r6,1000f460 <_realloc_r+0x474>
1000f204:	98800017 	ldw	r2,0(r19)
1000f208:	b8800215 	stw	r2,8(r23)
1000f20c:	98800117 	ldw	r2,4(r19)
1000f210:	b8800315 	stw	r2,12(r23)
1000f214:	008006c4 	movi	r2,27
1000f218:	1180b92e 	bgeu	r2,r6,1000f500 <_realloc_r+0x514>
1000f21c:	98800217 	ldw	r2,8(r19)
1000f220:	b8800415 	stw	r2,16(r23)
1000f224:	98800317 	ldw	r2,12(r19)
1000f228:	b8800515 	stw	r2,20(r23)
1000f22c:	313fbe26 	beq	r6,r4,1000f128 <__alt_data_end+0xf800f128>
1000f230:	b8c00604 	addi	r3,r23,24
1000f234:	9cc00404 	addi	r19,r19,16
1000f238:	98800017 	ldw	r2,0(r19)
1000f23c:	b021883a 	mov	r16,r22
1000f240:	b82b883a 	mov	r21,r23
1000f244:	18800015 	stw	r2,0(r3)
1000f248:	98800117 	ldw	r2,4(r19)
1000f24c:	18800115 	stw	r2,4(r3)
1000f250:	98800217 	ldw	r2,8(r19)
1000f254:	18800215 	stw	r2,8(r3)
1000f258:	b8c00117 	ldw	r3,4(r23)
1000f25c:	003fbd06 	br	1000f154 <__alt_data_end+0xf800f154>
1000f260:	00800304 	movi	r2,12
1000f264:	90800015 	stw	r2,0(r18)
1000f268:	0005883a 	mov	r2,zero
1000f26c:	003fc606 	br	1000f188 <__alt_data_end+0xf800f188>
1000f270:	1d06b03a 	or	r3,r3,r20
1000f274:	ad0b883a 	add	r5,r21,r20
1000f278:	a8c00115 	stw	r3,4(r21)
1000f27c:	38800054 	ori	r2,r7,1
1000f280:	28800115 	stw	r2,4(r5)
1000f284:	29cf883a 	add	r7,r5,r7
1000f288:	38800117 	ldw	r2,4(r7)
1000f28c:	9009883a 	mov	r4,r18
1000f290:	29400204 	addi	r5,r5,8
1000f294:	10800054 	ori	r2,r2,1
1000f298:	38800115 	stw	r2,4(r7)
1000f29c:	000a9bc0 	call	1000a9bc <_free_r>
1000f2a0:	003fb606 	br	1000f17c <__alt_data_end+0xf800f17c>
1000f2a4:	880b883a 	mov	r5,r17
1000f2a8:	9009883a 	mov	r4,r18
1000f2ac:	000b0b40 	call	1000b0b4 <_malloc_r>
1000f2b0:	1023883a 	mov	r17,r2
1000f2b4:	1000aa26 	beq	r2,zero,1000f560 <_realloc_r+0x574>
1000f2b8:	98ffff17 	ldw	r3,-4(r19)
1000f2bc:	113ffe04 	addi	r4,r2,-8
1000f2c0:	00bfff84 	movi	r2,-2
1000f2c4:	1884703a 	and	r2,r3,r2
1000f2c8:	a885883a 	add	r2,r21,r2
1000f2cc:	20808626 	beq	r4,r2,1000f4e8 <_realloc_r+0x4fc>
1000f2d0:	81bfff04 	addi	r6,r16,-4
1000f2d4:	00800904 	movi	r2,36
1000f2d8:	11807036 	bltu	r2,r6,1000f49c <_realloc_r+0x4b0>
1000f2dc:	00c004c4 	movi	r3,19
1000f2e0:	19805636 	bltu	r3,r6,1000f43c <_realloc_r+0x450>
1000f2e4:	8805883a 	mov	r2,r17
1000f2e8:	9807883a 	mov	r3,r19
1000f2ec:	19000017 	ldw	r4,0(r3)
1000f2f0:	11000015 	stw	r4,0(r2)
1000f2f4:	19000117 	ldw	r4,4(r3)
1000f2f8:	11000115 	stw	r4,4(r2)
1000f2fc:	18c00217 	ldw	r3,8(r3)
1000f300:	10c00215 	stw	r3,8(r2)
1000f304:	980b883a 	mov	r5,r19
1000f308:	9009883a 	mov	r4,r18
1000f30c:	000a9bc0 	call	1000a9bc <_free_r>
1000f310:	9009883a 	mov	r4,r18
1000f314:	000fefc0 	call	1000fefc <__malloc_unlock>
1000f318:	8805883a 	mov	r2,r17
1000f31c:	003f9a06 	br	1000f188 <__alt_data_end+0xf800f188>
1000f320:	300b883a 	mov	r5,r6
1000f324:	dfc00917 	ldw	ra,36(sp)
1000f328:	df000817 	ldw	fp,32(sp)
1000f32c:	ddc00717 	ldw	r23,28(sp)
1000f330:	dd800617 	ldw	r22,24(sp)
1000f334:	dd400517 	ldw	r21,20(sp)
1000f338:	dd000417 	ldw	r20,16(sp)
1000f33c:	dcc00317 	ldw	r19,12(sp)
1000f340:	dc800217 	ldw	r18,8(sp)
1000f344:	dc400117 	ldw	r17,4(sp)
1000f348:	dc000017 	ldw	r16,0(sp)
1000f34c:	dec00a04 	addi	sp,sp,40
1000f350:	000b0b41 	jmpi	1000b0b4 <_malloc_r>
1000f354:	11400317 	ldw	r5,12(r2)
1000f358:	10800217 	ldw	r2,8(r2)
1000f35c:	9823883a 	mov	r17,r19
1000f360:	2021883a 	mov	r16,r4
1000f364:	11400315 	stw	r5,12(r2)
1000f368:	28800215 	stw	r2,8(r5)
1000f36c:	003f7906 	br	1000f154 <__alt_data_end+0xf800f154>
1000f370:	21000117 	ldw	r4,4(r4)
1000f374:	00bfff04 	movi	r2,-4
1000f378:	a1800404 	addi	r6,r20,16
1000f37c:	2088703a 	and	r4,r4,r2
1000f380:	2409883a 	add	r4,r4,r16
1000f384:	2180380e 	bge	r4,r6,1000f468 <_realloc_r+0x47c>
1000f388:	18c0004c 	andi	r3,r3,1
1000f38c:	183fc51e 	bne	r3,zero,1000f2a4 <__alt_data_end+0xf800f2a4>
1000f390:	9dfffe17 	ldw	r23,-8(r19)
1000f394:	adefc83a 	sub	r23,r21,r23
1000f398:	b9400117 	ldw	r5,4(r23)
1000f39c:	288a703a 	and	r5,r5,r2
1000f3a0:	216d883a 	add	r22,r4,r5
1000f3a4:	b1bf8b16 	blt	r22,r6,1000f1d4 <__alt_data_end+0xf800f1d4>
1000f3a8:	b8800317 	ldw	r2,12(r23)
1000f3ac:	b8c00217 	ldw	r3,8(r23)
1000f3b0:	81bfff04 	addi	r6,r16,-4
1000f3b4:	01000904 	movi	r4,36
1000f3b8:	18800315 	stw	r2,12(r3)
1000f3bc:	10c00215 	stw	r3,8(r2)
1000f3c0:	bc400204 	addi	r17,r23,8
1000f3c4:	21805a36 	bltu	r4,r6,1000f530 <_realloc_r+0x544>
1000f3c8:	008004c4 	movi	r2,19
1000f3cc:	1180562e 	bgeu	r2,r6,1000f528 <_realloc_r+0x53c>
1000f3d0:	98800017 	ldw	r2,0(r19)
1000f3d4:	b8800215 	stw	r2,8(r23)
1000f3d8:	98800117 	ldw	r2,4(r19)
1000f3dc:	b8800315 	stw	r2,12(r23)
1000f3e0:	008006c4 	movi	r2,27
1000f3e4:	11805636 	bltu	r2,r6,1000f540 <_realloc_r+0x554>
1000f3e8:	b8800404 	addi	r2,r23,16
1000f3ec:	9cc00204 	addi	r19,r19,8
1000f3f0:	98c00017 	ldw	r3,0(r19)
1000f3f4:	10c00015 	stw	r3,0(r2)
1000f3f8:	98c00117 	ldw	r3,4(r19)
1000f3fc:	10c00115 	stw	r3,4(r2)
1000f400:	98c00217 	ldw	r3,8(r19)
1000f404:	10c00215 	stw	r3,8(r2)
1000f408:	bd07883a 	add	r3,r23,r20
1000f40c:	b505c83a 	sub	r2,r22,r20
1000f410:	e0c00215 	stw	r3,8(fp)
1000f414:	10800054 	ori	r2,r2,1
1000f418:	18800115 	stw	r2,4(r3)
1000f41c:	b8800117 	ldw	r2,4(r23)
1000f420:	9009883a 	mov	r4,r18
1000f424:	1080004c 	andi	r2,r2,1
1000f428:	a0a8b03a 	or	r20,r20,r2
1000f42c:	bd000115 	stw	r20,4(r23)
1000f430:	000fefc0 	call	1000fefc <__malloc_unlock>
1000f434:	8805883a 	mov	r2,r17
1000f438:	003f5306 	br	1000f188 <__alt_data_end+0xf800f188>
1000f43c:	98c00017 	ldw	r3,0(r19)
1000f440:	88c00015 	stw	r3,0(r17)
1000f444:	98c00117 	ldw	r3,4(r19)
1000f448:	88c00115 	stw	r3,4(r17)
1000f44c:	00c006c4 	movi	r3,27
1000f450:	19801d36 	bltu	r3,r6,1000f4c8 <_realloc_r+0x4dc>
1000f454:	88800204 	addi	r2,r17,8
1000f458:	98c00204 	addi	r3,r19,8
1000f45c:	003fa306 	br	1000f2ec <__alt_data_end+0xf800f2ec>
1000f460:	8807883a 	mov	r3,r17
1000f464:	003f7406 	br	1000f238 <__alt_data_end+0xf800f238>
1000f468:	ad2b883a 	add	r21,r21,r20
1000f46c:	2505c83a 	sub	r2,r4,r20
1000f470:	e5400215 	stw	r21,8(fp)
1000f474:	10800054 	ori	r2,r2,1
1000f478:	a8800115 	stw	r2,4(r21)
1000f47c:	98bfff17 	ldw	r2,-4(r19)
1000f480:	9009883a 	mov	r4,r18
1000f484:	1080004c 	andi	r2,r2,1
1000f488:	a0a8b03a 	or	r20,r20,r2
1000f48c:	9d3fff15 	stw	r20,-4(r19)
1000f490:	000fefc0 	call	1000fefc <__malloc_unlock>
1000f494:	9805883a 	mov	r2,r19
1000f498:	003f3b06 	br	1000f188 <__alt_data_end+0xf800f188>
1000f49c:	8809883a 	mov	r4,r17
1000f4a0:	980b883a 	mov	r5,r19
1000f4a4:	000ee340 	call	1000ee34 <memmove>
1000f4a8:	003f9606 	br	1000f304 <__alt_data_end+0xf800f304>
1000f4ac:	8809883a 	mov	r4,r17
1000f4b0:	980b883a 	mov	r5,r19
1000f4b4:	000ee340 	call	1000ee34 <memmove>
1000f4b8:	b8c00117 	ldw	r3,4(r23)
1000f4bc:	b021883a 	mov	r16,r22
1000f4c0:	b82b883a 	mov	r21,r23
1000f4c4:	003f2306 	br	1000f154 <__alt_data_end+0xf800f154>
1000f4c8:	98c00217 	ldw	r3,8(r19)
1000f4cc:	88c00215 	stw	r3,8(r17)
1000f4d0:	98c00317 	ldw	r3,12(r19)
1000f4d4:	88c00315 	stw	r3,12(r17)
1000f4d8:	30800c26 	beq	r6,r2,1000f50c <_realloc_r+0x520>
1000f4dc:	88800404 	addi	r2,r17,16
1000f4e0:	98c00404 	addi	r3,r19,16
1000f4e4:	003f8106 	br	1000f2ec <__alt_data_end+0xf800f2ec>
1000f4e8:	893fff17 	ldw	r4,-4(r17)
1000f4ec:	00bfff04 	movi	r2,-4
1000f4f0:	9823883a 	mov	r17,r19
1000f4f4:	2084703a 	and	r2,r4,r2
1000f4f8:	80a1883a 	add	r16,r16,r2
1000f4fc:	003f1506 	br	1000f154 <__alt_data_end+0xf800f154>
1000f500:	b8c00404 	addi	r3,r23,16
1000f504:	9cc00204 	addi	r19,r19,8
1000f508:	003f4b06 	br	1000f238 <__alt_data_end+0xf800f238>
1000f50c:	99000417 	ldw	r4,16(r19)
1000f510:	88800604 	addi	r2,r17,24
1000f514:	98c00604 	addi	r3,r19,24
1000f518:	89000415 	stw	r4,16(r17)
1000f51c:	99000517 	ldw	r4,20(r19)
1000f520:	89000515 	stw	r4,20(r17)
1000f524:	003f7106 	br	1000f2ec <__alt_data_end+0xf800f2ec>
1000f528:	8805883a 	mov	r2,r17
1000f52c:	003fb006 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f530:	8809883a 	mov	r4,r17
1000f534:	980b883a 	mov	r5,r19
1000f538:	000ee340 	call	1000ee34 <memmove>
1000f53c:	003fb206 	br	1000f408 <__alt_data_end+0xf800f408>
1000f540:	98800217 	ldw	r2,8(r19)
1000f544:	b8800415 	stw	r2,16(r23)
1000f548:	98800317 	ldw	r2,12(r19)
1000f54c:	b8800515 	stw	r2,20(r23)
1000f550:	31000726 	beq	r6,r4,1000f570 <_realloc_r+0x584>
1000f554:	b8800604 	addi	r2,r23,24
1000f558:	9cc00404 	addi	r19,r19,16
1000f55c:	003fa406 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f560:	9009883a 	mov	r4,r18
1000f564:	000fefc0 	call	1000fefc <__malloc_unlock>
1000f568:	0005883a 	mov	r2,zero
1000f56c:	003f0606 	br	1000f188 <__alt_data_end+0xf800f188>
1000f570:	98c00417 	ldw	r3,16(r19)
1000f574:	9cc00604 	addi	r19,r19,24
1000f578:	b8800804 	addi	r2,r23,32
1000f57c:	b8c00615 	stw	r3,24(r23)
1000f580:	98ffff17 	ldw	r3,-4(r19)
1000f584:	b8c00715 	stw	r3,28(r23)
1000f588:	003f9906 	br	1000f3f0 <__alt_data_end+0xf800f3f0>

1000f58c <__swbuf_r>:
1000f58c:	defffc04 	addi	sp,sp,-16
1000f590:	dc800215 	stw	r18,8(sp)
1000f594:	dc400115 	stw	r17,4(sp)
1000f598:	dc000015 	stw	r16,0(sp)
1000f59c:	dfc00315 	stw	ra,12(sp)
1000f5a0:	2025883a 	mov	r18,r4
1000f5a4:	2823883a 	mov	r17,r5
1000f5a8:	3021883a 	mov	r16,r6
1000f5ac:	20000226 	beq	r4,zero,1000f5b8 <__swbuf_r+0x2c>
1000f5b0:	20800e17 	ldw	r2,56(r4)
1000f5b4:	10004126 	beq	r2,zero,1000f6bc <__swbuf_r+0x130>
1000f5b8:	80c00617 	ldw	r3,24(r16)
1000f5bc:	8180030b 	ldhu	r6,12(r16)
1000f5c0:	80c00215 	stw	r3,8(r16)
1000f5c4:	30c0020c 	andi	r3,r6,8
1000f5c8:	18003526 	beq	r3,zero,1000f6a0 <__swbuf_r+0x114>
1000f5cc:	80c00417 	ldw	r3,16(r16)
1000f5d0:	18003326 	beq	r3,zero,1000f6a0 <__swbuf_r+0x114>
1000f5d4:	3088000c 	andi	r2,r6,8192
1000f5d8:	8c403fcc 	andi	r17,r17,255
1000f5dc:	10001726 	beq	r2,zero,1000f63c <__swbuf_r+0xb0>
1000f5e0:	80800017 	ldw	r2,0(r16)
1000f5e4:	81000517 	ldw	r4,20(r16)
1000f5e8:	10c7c83a 	sub	r3,r2,r3
1000f5ec:	19001d0e 	bge	r3,r4,1000f664 <__swbuf_r+0xd8>
1000f5f0:	18c00044 	addi	r3,r3,1
1000f5f4:	81400217 	ldw	r5,8(r16)
1000f5f8:	11000044 	addi	r4,r2,1
1000f5fc:	81000015 	stw	r4,0(r16)
1000f600:	297fffc4 	addi	r5,r5,-1
1000f604:	81400215 	stw	r5,8(r16)
1000f608:	14400005 	stb	r17,0(r2)
1000f60c:	80800517 	ldw	r2,20(r16)
1000f610:	10c01d26 	beq	r2,r3,1000f688 <__swbuf_r+0xfc>
1000f614:	8080030b 	ldhu	r2,12(r16)
1000f618:	1080004c 	andi	r2,r2,1
1000f61c:	1000181e 	bne	r2,zero,1000f680 <__swbuf_r+0xf4>
1000f620:	8805883a 	mov	r2,r17
1000f624:	dfc00317 	ldw	ra,12(sp)
1000f628:	dc800217 	ldw	r18,8(sp)
1000f62c:	dc400117 	ldw	r17,4(sp)
1000f630:	dc000017 	ldw	r16,0(sp)
1000f634:	dec00404 	addi	sp,sp,16
1000f638:	f800283a 	ret
1000f63c:	81001917 	ldw	r4,100(r16)
1000f640:	00b7ffc4 	movi	r2,-8193
1000f644:	31880014 	ori	r6,r6,8192
1000f648:	2084703a 	and	r2,r4,r2
1000f64c:	80801915 	stw	r2,100(r16)
1000f650:	80800017 	ldw	r2,0(r16)
1000f654:	81000517 	ldw	r4,20(r16)
1000f658:	8180030d 	sth	r6,12(r16)
1000f65c:	10c7c83a 	sub	r3,r2,r3
1000f660:	193fe316 	blt	r3,r4,1000f5f0 <__alt_data_end+0xf800f5f0>
1000f664:	9009883a 	mov	r4,r18
1000f668:	800b883a 	mov	r5,r16
1000f66c:	000a28c0 	call	1000a28c <_fflush_r>
1000f670:	1000091e 	bne	r2,zero,1000f698 <__swbuf_r+0x10c>
1000f674:	80800017 	ldw	r2,0(r16)
1000f678:	00c00044 	movi	r3,1
1000f67c:	003fdd06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000f680:	00800284 	movi	r2,10
1000f684:	88bfe61e 	bne	r17,r2,1000f620 <__alt_data_end+0xf800f620>
1000f688:	9009883a 	mov	r4,r18
1000f68c:	800b883a 	mov	r5,r16
1000f690:	000a28c0 	call	1000a28c <_fflush_r>
1000f694:	103fe226 	beq	r2,zero,1000f620 <__alt_data_end+0xf800f620>
1000f698:	00bfffc4 	movi	r2,-1
1000f69c:	003fe106 	br	1000f624 <__alt_data_end+0xf800f624>
1000f6a0:	9009883a 	mov	r4,r18
1000f6a4:	800b883a 	mov	r5,r16
1000f6a8:	000880c0 	call	1000880c <__swsetup_r>
1000f6ac:	1000051e 	bne	r2,zero,1000f6c4 <__swbuf_r+0x138>
1000f6b0:	8180030b 	ldhu	r6,12(r16)
1000f6b4:	80c00417 	ldw	r3,16(r16)
1000f6b8:	003fc606 	br	1000f5d4 <__alt_data_end+0xf800f5d4>
1000f6bc:	000a8480 	call	1000a848 <__sinit>
1000f6c0:	003fbd06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f6c4:	80c0030b 	ldhu	r3,12(r16)
1000f6c8:	00bfffc4 	movi	r2,-1
1000f6cc:	18c01014 	ori	r3,r3,64
1000f6d0:	80c0030d 	sth	r3,12(r16)
1000f6d4:	00c00244 	movi	r3,9
1000f6d8:	90c00015 	stw	r3,0(r18)
1000f6dc:	003fd106 	br	1000f624 <__alt_data_end+0xf800f624>

1000f6e0 <__swbuf>:
1000f6e0:	00c40074 	movhi	r3,4097
1000f6e4:	18cfad04 	addi	r3,r3,16052
1000f6e8:	2005883a 	mov	r2,r4
1000f6ec:	19000017 	ldw	r4,0(r3)
1000f6f0:	280d883a 	mov	r6,r5
1000f6f4:	100b883a 	mov	r5,r2
1000f6f8:	000f58c1 	jmpi	1000f58c <__swbuf_r>

1000f6fc <_wcrtomb_r>:
1000f6fc:	defff604 	addi	sp,sp,-40
1000f700:	00840074 	movhi	r2,4097
1000f704:	dc800815 	stw	r18,32(sp)
1000f708:	dc400715 	stw	r17,28(sp)
1000f70c:	dc000615 	stw	r16,24(sp)
1000f710:	108fb104 	addi	r2,r2,16068
1000f714:	dfc00915 	stw	ra,36(sp)
1000f718:	2021883a 	mov	r16,r4
1000f71c:	3823883a 	mov	r17,r7
1000f720:	14800017 	ldw	r18,0(r2)
1000f724:	28001426 	beq	r5,zero,1000f778 <_wcrtomb_r+0x7c>
1000f728:	d9400415 	stw	r5,16(sp)
1000f72c:	d9800515 	stw	r6,20(sp)
1000f730:	000ae980 	call	1000ae98 <__locale_charset>
1000f734:	d9400417 	ldw	r5,16(sp)
1000f738:	d9800517 	ldw	r6,20(sp)
1000f73c:	8009883a 	mov	r4,r16
1000f740:	dc400015 	stw	r17,0(sp)
1000f744:	100f883a 	mov	r7,r2
1000f748:	903ee83a 	callr	r18
1000f74c:	00ffffc4 	movi	r3,-1
1000f750:	10c0031e 	bne	r2,r3,1000f760 <_wcrtomb_r+0x64>
1000f754:	88000015 	stw	zero,0(r17)
1000f758:	00c02284 	movi	r3,138
1000f75c:	80c00015 	stw	r3,0(r16)
1000f760:	dfc00917 	ldw	ra,36(sp)
1000f764:	dc800817 	ldw	r18,32(sp)
1000f768:	dc400717 	ldw	r17,28(sp)
1000f76c:	dc000617 	ldw	r16,24(sp)
1000f770:	dec00a04 	addi	sp,sp,40
1000f774:	f800283a 	ret
1000f778:	000ae980 	call	1000ae98 <__locale_charset>
1000f77c:	8009883a 	mov	r4,r16
1000f780:	dc400015 	stw	r17,0(sp)
1000f784:	d9400104 	addi	r5,sp,4
1000f788:	000d883a 	mov	r6,zero
1000f78c:	100f883a 	mov	r7,r2
1000f790:	903ee83a 	callr	r18
1000f794:	003fed06 	br	1000f74c <__alt_data_end+0xf800f74c>

1000f798 <wcrtomb>:
1000f798:	defff504 	addi	sp,sp,-44
1000f79c:	dc400515 	stw	r17,20(sp)
1000f7a0:	dc000415 	stw	r16,16(sp)
1000f7a4:	dfc00a15 	stw	ra,40(sp)
1000f7a8:	dd400915 	stw	r21,36(sp)
1000f7ac:	dd000815 	stw	r20,32(sp)
1000f7b0:	dcc00715 	stw	r19,28(sp)
1000f7b4:	dc800615 	stw	r18,24(sp)
1000f7b8:	2021883a 	mov	r16,r4
1000f7bc:	3023883a 	mov	r17,r6
1000f7c0:	20001d26 	beq	r4,zero,1000f838 <wcrtomb+0xa0>
1000f7c4:	04840074 	movhi	r18,4097
1000f7c8:	948fad04 	addi	r18,r18,16052
1000f7cc:	00840074 	movhi	r2,4097
1000f7d0:	95400017 	ldw	r21,0(r18)
1000f7d4:	108fb104 	addi	r2,r2,16068
1000f7d8:	15000017 	ldw	r20,0(r2)
1000f7dc:	2827883a 	mov	r19,r5
1000f7e0:	000ae980 	call	1000ae98 <__locale_charset>
1000f7e4:	a809883a 	mov	r4,r21
1000f7e8:	dc400015 	stw	r17,0(sp)
1000f7ec:	800b883a 	mov	r5,r16
1000f7f0:	980d883a 	mov	r6,r19
1000f7f4:	100f883a 	mov	r7,r2
1000f7f8:	a03ee83a 	callr	r20
1000f7fc:	00ffffc4 	movi	r3,-1
1000f800:	10c0041e 	bne	r2,r3,1000f814 <wcrtomb+0x7c>
1000f804:	90c00017 	ldw	r3,0(r18)
1000f808:	01002284 	movi	r4,138
1000f80c:	88000015 	stw	zero,0(r17)
1000f810:	19000015 	stw	r4,0(r3)
1000f814:	dfc00a17 	ldw	ra,40(sp)
1000f818:	dd400917 	ldw	r21,36(sp)
1000f81c:	dd000817 	ldw	r20,32(sp)
1000f820:	dcc00717 	ldw	r19,28(sp)
1000f824:	dc800617 	ldw	r18,24(sp)
1000f828:	dc400517 	ldw	r17,20(sp)
1000f82c:	dc000417 	ldw	r16,16(sp)
1000f830:	dec00b04 	addi	sp,sp,44
1000f834:	f800283a 	ret
1000f838:	04840074 	movhi	r18,4097
1000f83c:	948fad04 	addi	r18,r18,16052
1000f840:	00840074 	movhi	r2,4097
1000f844:	94c00017 	ldw	r19,0(r18)
1000f848:	108fb104 	addi	r2,r2,16068
1000f84c:	14000017 	ldw	r16,0(r2)
1000f850:	000ae980 	call	1000ae98 <__locale_charset>
1000f854:	9809883a 	mov	r4,r19
1000f858:	dc400015 	stw	r17,0(sp)
1000f85c:	d9400104 	addi	r5,sp,4
1000f860:	000d883a 	mov	r6,zero
1000f864:	100f883a 	mov	r7,r2
1000f868:	803ee83a 	callr	r16
1000f86c:	003fe306 	br	1000f7fc <__alt_data_end+0xf800f7fc>

1000f870 <__ascii_wctomb>:
1000f870:	28000526 	beq	r5,zero,1000f888 <__ascii_wctomb+0x18>
1000f874:	00803fc4 	movi	r2,255
1000f878:	11800536 	bltu	r2,r6,1000f890 <__ascii_wctomb+0x20>
1000f87c:	29800005 	stb	r6,0(r5)
1000f880:	00800044 	movi	r2,1
1000f884:	f800283a 	ret
1000f888:	0005883a 	mov	r2,zero
1000f88c:	f800283a 	ret
1000f890:	00802284 	movi	r2,138
1000f894:	20800015 	stw	r2,0(r4)
1000f898:	00bfffc4 	movi	r2,-1
1000f89c:	f800283a 	ret

1000f8a0 <_wctomb_r>:
1000f8a0:	00840074 	movhi	r2,4097
1000f8a4:	defff904 	addi	sp,sp,-28
1000f8a8:	108fb104 	addi	r2,r2,16068
1000f8ac:	dfc00615 	stw	ra,24(sp)
1000f8b0:	dc400515 	stw	r17,20(sp)
1000f8b4:	dc000415 	stw	r16,16(sp)
1000f8b8:	3823883a 	mov	r17,r7
1000f8bc:	14000017 	ldw	r16,0(r2)
1000f8c0:	d9000115 	stw	r4,4(sp)
1000f8c4:	d9400215 	stw	r5,8(sp)
1000f8c8:	d9800315 	stw	r6,12(sp)
1000f8cc:	000ae980 	call	1000ae98 <__locale_charset>
1000f8d0:	d9000117 	ldw	r4,4(sp)
1000f8d4:	d9400217 	ldw	r5,8(sp)
1000f8d8:	d9800317 	ldw	r6,12(sp)
1000f8dc:	dc400015 	stw	r17,0(sp)
1000f8e0:	100f883a 	mov	r7,r2
1000f8e4:	803ee83a 	callr	r16
1000f8e8:	dfc00617 	ldw	ra,24(sp)
1000f8ec:	dc400517 	ldw	r17,20(sp)
1000f8f0:	dc000417 	ldw	r16,16(sp)
1000f8f4:	dec00704 	addi	sp,sp,28
1000f8f8:	f800283a 	ret

1000f8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f8fc:	defffe04 	addi	sp,sp,-8
1000f900:	dfc00115 	stw	ra,4(sp)
1000f904:	df000015 	stw	fp,0(sp)
1000f908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f90c:	00840074 	movhi	r2,4097
1000f910:	108fb704 	addi	r2,r2,16092
1000f914:	10800017 	ldw	r2,0(r2)
1000f918:	10000526 	beq	r2,zero,1000f930 <alt_get_errno+0x34>
1000f91c:	00840074 	movhi	r2,4097
1000f920:	108fb704 	addi	r2,r2,16092
1000f924:	10800017 	ldw	r2,0(r2)
1000f928:	103ee83a 	callr	r2
1000f92c:	00000206 	br	1000f938 <alt_get_errno+0x3c>
1000f930:	00840074 	movhi	r2,4097
1000f934:	10967e04 	addi	r2,r2,23032
}
1000f938:	e037883a 	mov	sp,fp
1000f93c:	dfc00117 	ldw	ra,4(sp)
1000f940:	df000017 	ldw	fp,0(sp)
1000f944:	dec00204 	addi	sp,sp,8
1000f948:	f800283a 	ret

1000f94c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f94c:	defffb04 	addi	sp,sp,-20
1000f950:	dfc00415 	stw	ra,16(sp)
1000f954:	df000315 	stw	fp,12(sp)
1000f958:	df000304 	addi	fp,sp,12
1000f95c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f960:	e0bfff17 	ldw	r2,-4(fp)
1000f964:	10000816 	blt	r2,zero,1000f988 <close+0x3c>
1000f968:	e13fff17 	ldw	r4,-4(fp)
1000f96c:	01400304 	movi	r5,12
1000f970:	0003dd40 	call	10003dd4 <__mulsi3>
1000f974:	1007883a 	mov	r3,r2
1000f978:	00840074 	movhi	r2,4097
1000f97c:	108b3304 	addi	r2,r2,11468
1000f980:	1885883a 	add	r2,r3,r2
1000f984:	00000106 	br	1000f98c <close+0x40>
1000f988:	0005883a 	mov	r2,zero
1000f98c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f990:	e0bffd17 	ldw	r2,-12(fp)
1000f994:	10001926 	beq	r2,zero,1000f9fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f998:	e0bffd17 	ldw	r2,-12(fp)
1000f99c:	10800017 	ldw	r2,0(r2)
1000f9a0:	10800417 	ldw	r2,16(r2)
1000f9a4:	10000626 	beq	r2,zero,1000f9c0 <close+0x74>
1000f9a8:	e0bffd17 	ldw	r2,-12(fp)
1000f9ac:	10800017 	ldw	r2,0(r2)
1000f9b0:	10800417 	ldw	r2,16(r2)
1000f9b4:	e13ffd17 	ldw	r4,-12(fp)
1000f9b8:	103ee83a 	callr	r2
1000f9bc:	00000106 	br	1000f9c4 <close+0x78>
1000f9c0:	0005883a 	mov	r2,zero
1000f9c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f9c8:	e13fff17 	ldw	r4,-4(fp)
1000f9cc:	00100700 	call	10010070 <alt_release_fd>
    if (rval < 0)
1000f9d0:	e0bffe17 	ldw	r2,-8(fp)
1000f9d4:	1000070e 	bge	r2,zero,1000f9f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f9d8:	000f8fc0 	call	1000f8fc <alt_get_errno>
1000f9dc:	1007883a 	mov	r3,r2
1000f9e0:	e0bffe17 	ldw	r2,-8(fp)
1000f9e4:	0085c83a 	sub	r2,zero,r2
1000f9e8:	18800015 	stw	r2,0(r3)
      return -1;
1000f9ec:	00bfffc4 	movi	r2,-1
1000f9f0:	00000706 	br	1000fa10 <close+0xc4>
    }
    return 0;
1000f9f4:	0005883a 	mov	r2,zero
1000f9f8:	00000506 	br	1000fa10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f9fc:	000f8fc0 	call	1000f8fc <alt_get_errno>
1000fa00:	1007883a 	mov	r3,r2
1000fa04:	00801444 	movi	r2,81
1000fa08:	18800015 	stw	r2,0(r3)
    return -1;
1000fa0c:	00bfffc4 	movi	r2,-1
  }
}
1000fa10:	e037883a 	mov	sp,fp
1000fa14:	dfc00117 	ldw	ra,4(sp)
1000fa18:	df000017 	ldw	fp,0(sp)
1000fa1c:	dec00204 	addi	sp,sp,8
1000fa20:	f800283a 	ret

1000fa24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fa24:	defffc04 	addi	sp,sp,-16
1000fa28:	df000315 	stw	fp,12(sp)
1000fa2c:	df000304 	addi	fp,sp,12
1000fa30:	e13ffd15 	stw	r4,-12(fp)
1000fa34:	e17ffe15 	stw	r5,-8(fp)
1000fa38:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fa3c:	e0bfff17 	ldw	r2,-4(fp)
}
1000fa40:	e037883a 	mov	sp,fp
1000fa44:	df000017 	ldw	fp,0(sp)
1000fa48:	dec00104 	addi	sp,sp,4
1000fa4c:	f800283a 	ret

1000fa50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa50:	defffe04 	addi	sp,sp,-8
1000fa54:	dfc00115 	stw	ra,4(sp)
1000fa58:	df000015 	stw	fp,0(sp)
1000fa5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa60:	00840074 	movhi	r2,4097
1000fa64:	108fb704 	addi	r2,r2,16092
1000fa68:	10800017 	ldw	r2,0(r2)
1000fa6c:	10000526 	beq	r2,zero,1000fa84 <alt_get_errno+0x34>
1000fa70:	00840074 	movhi	r2,4097
1000fa74:	108fb704 	addi	r2,r2,16092
1000fa78:	10800017 	ldw	r2,0(r2)
1000fa7c:	103ee83a 	callr	r2
1000fa80:	00000206 	br	1000fa8c <alt_get_errno+0x3c>
1000fa84:	00840074 	movhi	r2,4097
1000fa88:	10967e04 	addi	r2,r2,23032
}
1000fa8c:	e037883a 	mov	sp,fp
1000fa90:	dfc00117 	ldw	ra,4(sp)
1000fa94:	df000017 	ldw	fp,0(sp)
1000fa98:	dec00204 	addi	sp,sp,8
1000fa9c:	f800283a 	ret

1000faa0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000faa0:	defffb04 	addi	sp,sp,-20
1000faa4:	dfc00415 	stw	ra,16(sp)
1000faa8:	df000315 	stw	fp,12(sp)
1000faac:	df000304 	addi	fp,sp,12
1000fab0:	e13ffe15 	stw	r4,-8(fp)
1000fab4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fab8:	e0bffe17 	ldw	r2,-8(fp)
1000fabc:	10000816 	blt	r2,zero,1000fae0 <fstat+0x40>
1000fac0:	e13ffe17 	ldw	r4,-8(fp)
1000fac4:	01400304 	movi	r5,12
1000fac8:	0003dd40 	call	10003dd4 <__mulsi3>
1000facc:	1007883a 	mov	r3,r2
1000fad0:	00840074 	movhi	r2,4097
1000fad4:	108b3304 	addi	r2,r2,11468
1000fad8:	1885883a 	add	r2,r3,r2
1000fadc:	00000106 	br	1000fae4 <fstat+0x44>
1000fae0:	0005883a 	mov	r2,zero
1000fae4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000fae8:	e0bffd17 	ldw	r2,-12(fp)
1000faec:	10001026 	beq	r2,zero,1000fb30 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000faf0:	e0bffd17 	ldw	r2,-12(fp)
1000faf4:	10800017 	ldw	r2,0(r2)
1000faf8:	10800817 	ldw	r2,32(r2)
1000fafc:	10000726 	beq	r2,zero,1000fb1c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000fb00:	e0bffd17 	ldw	r2,-12(fp)
1000fb04:	10800017 	ldw	r2,0(r2)
1000fb08:	10800817 	ldw	r2,32(r2)
1000fb0c:	e13ffd17 	ldw	r4,-12(fp)
1000fb10:	e17fff17 	ldw	r5,-4(fp)
1000fb14:	103ee83a 	callr	r2
1000fb18:	00000a06 	br	1000fb44 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000fb1c:	e0bfff17 	ldw	r2,-4(fp)
1000fb20:	00c80004 	movi	r3,8192
1000fb24:	10c00115 	stw	r3,4(r2)
      return 0;
1000fb28:	0005883a 	mov	r2,zero
1000fb2c:	00000506 	br	1000fb44 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fb30:	000fa500 	call	1000fa50 <alt_get_errno>
1000fb34:	1007883a 	mov	r3,r2
1000fb38:	00801444 	movi	r2,81
1000fb3c:	18800015 	stw	r2,0(r3)
    return -1;
1000fb40:	00bfffc4 	movi	r2,-1
  }
}
1000fb44:	e037883a 	mov	sp,fp
1000fb48:	dfc00117 	ldw	ra,4(sp)
1000fb4c:	df000017 	ldw	fp,0(sp)
1000fb50:	dec00204 	addi	sp,sp,8
1000fb54:	f800283a 	ret

1000fb58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fb58:	defffe04 	addi	sp,sp,-8
1000fb5c:	dfc00115 	stw	ra,4(sp)
1000fb60:	df000015 	stw	fp,0(sp)
1000fb64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fb68:	00840074 	movhi	r2,4097
1000fb6c:	108fb704 	addi	r2,r2,16092
1000fb70:	10800017 	ldw	r2,0(r2)
1000fb74:	10000526 	beq	r2,zero,1000fb8c <alt_get_errno+0x34>
1000fb78:	00840074 	movhi	r2,4097
1000fb7c:	108fb704 	addi	r2,r2,16092
1000fb80:	10800017 	ldw	r2,0(r2)
1000fb84:	103ee83a 	callr	r2
1000fb88:	00000206 	br	1000fb94 <alt_get_errno+0x3c>
1000fb8c:	00840074 	movhi	r2,4097
1000fb90:	10967e04 	addi	r2,r2,23032
}
1000fb94:	e037883a 	mov	sp,fp
1000fb98:	dfc00117 	ldw	ra,4(sp)
1000fb9c:	df000017 	ldw	fp,0(sp)
1000fba0:	dec00204 	addi	sp,sp,8
1000fba4:	f800283a 	ret

1000fba8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fba8:	deffed04 	addi	sp,sp,-76
1000fbac:	dfc01215 	stw	ra,72(sp)
1000fbb0:	df001115 	stw	fp,68(sp)
1000fbb4:	df001104 	addi	fp,sp,68
1000fbb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fbbc:	e0bfff17 	ldw	r2,-4(fp)
1000fbc0:	10000816 	blt	r2,zero,1000fbe4 <isatty+0x3c>
1000fbc4:	e13fff17 	ldw	r4,-4(fp)
1000fbc8:	01400304 	movi	r5,12
1000fbcc:	0003dd40 	call	10003dd4 <__mulsi3>
1000fbd0:	1007883a 	mov	r3,r2
1000fbd4:	00840074 	movhi	r2,4097
1000fbd8:	108b3304 	addi	r2,r2,11468
1000fbdc:	1885883a 	add	r2,r3,r2
1000fbe0:	00000106 	br	1000fbe8 <isatty+0x40>
1000fbe4:	0005883a 	mov	r2,zero
1000fbe8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000fbec:	e0bfef17 	ldw	r2,-68(fp)
1000fbf0:	10000e26 	beq	r2,zero,1000fc2c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000fbf4:	e0bfef17 	ldw	r2,-68(fp)
1000fbf8:	10800017 	ldw	r2,0(r2)
1000fbfc:	10800817 	ldw	r2,32(r2)
1000fc00:	1000021e 	bne	r2,zero,1000fc0c <isatty+0x64>
    {
      return 1;
1000fc04:	00800044 	movi	r2,1
1000fc08:	00000d06 	br	1000fc40 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fc0c:	e0bff004 	addi	r2,fp,-64
1000fc10:	e13fff17 	ldw	r4,-4(fp)
1000fc14:	100b883a 	mov	r5,r2
1000fc18:	000faa00 	call	1000faa0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fc1c:	e0bff117 	ldw	r2,-60(fp)
1000fc20:	10880020 	cmpeqi	r2,r2,8192
1000fc24:	10803fcc 	andi	r2,r2,255
1000fc28:	00000506 	br	1000fc40 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fc2c:	000fb580 	call	1000fb58 <alt_get_errno>
1000fc30:	1007883a 	mov	r3,r2
1000fc34:	00801444 	movi	r2,81
1000fc38:	18800015 	stw	r2,0(r3)
    return 0;
1000fc3c:	0005883a 	mov	r2,zero
  }
}
1000fc40:	e037883a 	mov	sp,fp
1000fc44:	dfc00117 	ldw	ra,4(sp)
1000fc48:	df000017 	ldw	fp,0(sp)
1000fc4c:	dec00204 	addi	sp,sp,8
1000fc50:	f800283a 	ret

1000fc54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000fc54:	defffc04 	addi	sp,sp,-16
1000fc58:	df000315 	stw	fp,12(sp)
1000fc5c:	df000304 	addi	fp,sp,12
1000fc60:	e13ffd15 	stw	r4,-12(fp)
1000fc64:	e17ffe15 	stw	r5,-8(fp)
1000fc68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000fc6c:	e0fffe17 	ldw	r3,-8(fp)
1000fc70:	e0bffd17 	ldw	r2,-12(fp)
1000fc74:	18800c26 	beq	r3,r2,1000fca8 <alt_load_section+0x54>
  {
    while( to != end )
1000fc78:	00000806 	br	1000fc9c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000fc7c:	e0bffe17 	ldw	r2,-8(fp)
1000fc80:	10c00104 	addi	r3,r2,4
1000fc84:	e0fffe15 	stw	r3,-8(fp)
1000fc88:	e0fffd17 	ldw	r3,-12(fp)
1000fc8c:	19000104 	addi	r4,r3,4
1000fc90:	e13ffd15 	stw	r4,-12(fp)
1000fc94:	18c00017 	ldw	r3,0(r3)
1000fc98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000fc9c:	e0fffe17 	ldw	r3,-8(fp)
1000fca0:	e0bfff17 	ldw	r2,-4(fp)
1000fca4:	18bff51e 	bne	r3,r2,1000fc7c <__alt_data_end+0xf800fc7c>
    {
      *to++ = *from++;
    }
  }
}
1000fca8:	e037883a 	mov	sp,fp
1000fcac:	df000017 	ldw	fp,0(sp)
1000fcb0:	dec00104 	addi	sp,sp,4
1000fcb4:	f800283a 	ret

1000fcb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000fcb8:	defffe04 	addi	sp,sp,-8
1000fcbc:	dfc00115 	stw	ra,4(sp)
1000fcc0:	df000015 	stw	fp,0(sp)
1000fcc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000fcc8:	01040074 	movhi	r4,4097
1000fccc:	210fbc04 	addi	r4,r4,16112
1000fcd0:	01440074 	movhi	r5,4097
1000fcd4:	29490004 	addi	r5,r5,9216
1000fcd8:	01840074 	movhi	r6,4097
1000fcdc:	318fbc04 	addi	r6,r6,16112
1000fce0:	000fc540 	call	1000fc54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fce4:	01040034 	movhi	r4,4096
1000fce8:	21000804 	addi	r4,r4,32
1000fcec:	01440034 	movhi	r5,4096
1000fcf0:	29400804 	addi	r5,r5,32
1000fcf4:	01840034 	movhi	r6,4096
1000fcf8:	31808b04 	addi	r6,r6,556
1000fcfc:	000fc540 	call	1000fc54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fd00:	01040074 	movhi	r4,4097
1000fd04:	21081504 	addi	r4,r4,8276
1000fd08:	01440074 	movhi	r5,4097
1000fd0c:	29481504 	addi	r5,r5,8276
1000fd10:	01840074 	movhi	r6,4097
1000fd14:	31890004 	addi	r6,r6,9216
1000fd18:	000fc540 	call	1000fc54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fd1c:	0010f300 	call	10010f30 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fd20:	00110f80 	call	100110f8 <alt_icache_flush_all>
}
1000fd24:	e037883a 	mov	sp,fp
1000fd28:	dfc00117 	ldw	ra,4(sp)
1000fd2c:	df000017 	ldw	fp,0(sp)
1000fd30:	dec00204 	addi	sp,sp,8
1000fd34:	f800283a 	ret

1000fd38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fd38:	defffe04 	addi	sp,sp,-8
1000fd3c:	dfc00115 	stw	ra,4(sp)
1000fd40:	df000015 	stw	fp,0(sp)
1000fd44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd48:	00840074 	movhi	r2,4097
1000fd4c:	108fb704 	addi	r2,r2,16092
1000fd50:	10800017 	ldw	r2,0(r2)
1000fd54:	10000526 	beq	r2,zero,1000fd6c <alt_get_errno+0x34>
1000fd58:	00840074 	movhi	r2,4097
1000fd5c:	108fb704 	addi	r2,r2,16092
1000fd60:	10800017 	ldw	r2,0(r2)
1000fd64:	103ee83a 	callr	r2
1000fd68:	00000206 	br	1000fd74 <alt_get_errno+0x3c>
1000fd6c:	00840074 	movhi	r2,4097
1000fd70:	10967e04 	addi	r2,r2,23032
}
1000fd74:	e037883a 	mov	sp,fp
1000fd78:	dfc00117 	ldw	ra,4(sp)
1000fd7c:	df000017 	ldw	fp,0(sp)
1000fd80:	dec00204 	addi	sp,sp,8
1000fd84:	f800283a 	ret

1000fd88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000fd88:	defff904 	addi	sp,sp,-28
1000fd8c:	dfc00615 	stw	ra,24(sp)
1000fd90:	df000515 	stw	fp,20(sp)
1000fd94:	df000504 	addi	fp,sp,20
1000fd98:	e13ffd15 	stw	r4,-12(fp)
1000fd9c:	e17ffe15 	stw	r5,-8(fp)
1000fda0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fda4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fda8:	e0bffd17 	ldw	r2,-12(fp)
1000fdac:	10000816 	blt	r2,zero,1000fdd0 <lseek+0x48>
1000fdb0:	e13ffd17 	ldw	r4,-12(fp)
1000fdb4:	01400304 	movi	r5,12
1000fdb8:	0003dd40 	call	10003dd4 <__mulsi3>
1000fdbc:	1007883a 	mov	r3,r2
1000fdc0:	00840074 	movhi	r2,4097
1000fdc4:	108b3304 	addi	r2,r2,11468
1000fdc8:	1885883a 	add	r2,r3,r2
1000fdcc:	00000106 	br	1000fdd4 <lseek+0x4c>
1000fdd0:	0005883a 	mov	r2,zero
1000fdd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000fdd8:	e0bffc17 	ldw	r2,-16(fp)
1000fddc:	10001026 	beq	r2,zero,1000fe20 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fde0:	e0bffc17 	ldw	r2,-16(fp)
1000fde4:	10800017 	ldw	r2,0(r2)
1000fde8:	10800717 	ldw	r2,28(r2)
1000fdec:	10000926 	beq	r2,zero,1000fe14 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fdf0:	e0bffc17 	ldw	r2,-16(fp)
1000fdf4:	10800017 	ldw	r2,0(r2)
1000fdf8:	10800717 	ldw	r2,28(r2)
1000fdfc:	e13ffc17 	ldw	r4,-16(fp)
1000fe00:	e17ffe17 	ldw	r5,-8(fp)
1000fe04:	e1bfff17 	ldw	r6,-4(fp)
1000fe08:	103ee83a 	callr	r2
1000fe0c:	e0bffb15 	stw	r2,-20(fp)
1000fe10:	00000506 	br	1000fe28 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fe14:	00bfde84 	movi	r2,-134
1000fe18:	e0bffb15 	stw	r2,-20(fp)
1000fe1c:	00000206 	br	1000fe28 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fe20:	00bfebc4 	movi	r2,-81
1000fe24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000fe28:	e0bffb17 	ldw	r2,-20(fp)
1000fe2c:	1000070e 	bge	r2,zero,1000fe4c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000fe30:	000fd380 	call	1000fd38 <alt_get_errno>
1000fe34:	1007883a 	mov	r3,r2
1000fe38:	e0bffb17 	ldw	r2,-20(fp)
1000fe3c:	0085c83a 	sub	r2,zero,r2
1000fe40:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fe44:	00bfffc4 	movi	r2,-1
1000fe48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000fe4c:	e0bffb17 	ldw	r2,-20(fp)
}
1000fe50:	e037883a 	mov	sp,fp
1000fe54:	dfc00117 	ldw	ra,4(sp)
1000fe58:	df000017 	ldw	fp,0(sp)
1000fe5c:	dec00204 	addi	sp,sp,8
1000fe60:	f800283a 	ret

1000fe64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fe64:	defffd04 	addi	sp,sp,-12
1000fe68:	dfc00215 	stw	ra,8(sp)
1000fe6c:	df000115 	stw	fp,4(sp)
1000fe70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fe74:	0009883a 	mov	r4,zero
1000fe78:	00103280 	call	10010328 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fe7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fe80:	001035c0 	call	1001035c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fe84:	01040074 	movhi	r4,4097
1000fe88:	2108f604 	addi	r4,r4,9176
1000fe8c:	01440074 	movhi	r5,4097
1000fe90:	2948f604 	addi	r5,r5,9176
1000fe94:	01840074 	movhi	r6,4097
1000fe98:	3188f604 	addi	r6,r6,9176
1000fe9c:	00114c40 	call	100114c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fea0:	00110400 	call	10011040 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fea4:	01040074 	movhi	r4,4097
1000fea8:	21042704 	addi	r4,r4,4252
1000feac:	0011cb00 	call	10011cb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000feb0:	d126d417 	ldw	r4,-25776(gp)
1000feb4:	d0e6d517 	ldw	r3,-25772(gp)
1000feb8:	d0a6d617 	ldw	r2,-25768(gp)
1000febc:	180b883a 	mov	r5,r3
1000fec0:	100d883a 	mov	r6,r2
1000fec4:	00002680 	call	10000268 <main>
1000fec8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fecc:	01000044 	movi	r4,1
1000fed0:	000f94c0 	call	1000f94c <close>
  exit (result);
1000fed4:	e13fff17 	ldw	r4,-4(fp)
1000fed8:	0011cc40 	call	10011cc4 <exit>

1000fedc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000fedc:	defffe04 	addi	sp,sp,-8
1000fee0:	df000115 	stw	fp,4(sp)
1000fee4:	df000104 	addi	fp,sp,4
1000fee8:	e13fff15 	stw	r4,-4(fp)
}
1000feec:	e037883a 	mov	sp,fp
1000fef0:	df000017 	ldw	fp,0(sp)
1000fef4:	dec00104 	addi	sp,sp,4
1000fef8:	f800283a 	ret

1000fefc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000fefc:	defffe04 	addi	sp,sp,-8
1000ff00:	df000115 	stw	fp,4(sp)
1000ff04:	df000104 	addi	fp,sp,4
1000ff08:	e13fff15 	stw	r4,-4(fp)
}
1000ff0c:	e037883a 	mov	sp,fp
1000ff10:	df000017 	ldw	fp,0(sp)
1000ff14:	dec00104 	addi	sp,sp,4
1000ff18:	f800283a 	ret

1000ff1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ff1c:	defffe04 	addi	sp,sp,-8
1000ff20:	dfc00115 	stw	ra,4(sp)
1000ff24:	df000015 	stw	fp,0(sp)
1000ff28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ff2c:	00840074 	movhi	r2,4097
1000ff30:	108fb704 	addi	r2,r2,16092
1000ff34:	10800017 	ldw	r2,0(r2)
1000ff38:	10000526 	beq	r2,zero,1000ff50 <alt_get_errno+0x34>
1000ff3c:	00840074 	movhi	r2,4097
1000ff40:	108fb704 	addi	r2,r2,16092
1000ff44:	10800017 	ldw	r2,0(r2)
1000ff48:	103ee83a 	callr	r2
1000ff4c:	00000206 	br	1000ff58 <alt_get_errno+0x3c>
1000ff50:	00840074 	movhi	r2,4097
1000ff54:	10967e04 	addi	r2,r2,23032
}
1000ff58:	e037883a 	mov	sp,fp
1000ff5c:	dfc00117 	ldw	ra,4(sp)
1000ff60:	df000017 	ldw	fp,0(sp)
1000ff64:	dec00204 	addi	sp,sp,8
1000ff68:	f800283a 	ret

1000ff6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000ff6c:	defff904 	addi	sp,sp,-28
1000ff70:	dfc00615 	stw	ra,24(sp)
1000ff74:	df000515 	stw	fp,20(sp)
1000ff78:	df000504 	addi	fp,sp,20
1000ff7c:	e13ffd15 	stw	r4,-12(fp)
1000ff80:	e17ffe15 	stw	r5,-8(fp)
1000ff84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ff88:	e0bffd17 	ldw	r2,-12(fp)
1000ff8c:	10000816 	blt	r2,zero,1000ffb0 <read+0x44>
1000ff90:	e13ffd17 	ldw	r4,-12(fp)
1000ff94:	01400304 	movi	r5,12
1000ff98:	0003dd40 	call	10003dd4 <__mulsi3>
1000ff9c:	1007883a 	mov	r3,r2
1000ffa0:	00840074 	movhi	r2,4097
1000ffa4:	108b3304 	addi	r2,r2,11468
1000ffa8:	1885883a 	add	r2,r3,r2
1000ffac:	00000106 	br	1000ffb4 <read+0x48>
1000ffb0:	0005883a 	mov	r2,zero
1000ffb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000ffb8:	e0bffb17 	ldw	r2,-20(fp)
1000ffbc:	10002226 	beq	r2,zero,10010048 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000ffc0:	e0bffb17 	ldw	r2,-20(fp)
1000ffc4:	10800217 	ldw	r2,8(r2)
1000ffc8:	108000cc 	andi	r2,r2,3
1000ffcc:	10800060 	cmpeqi	r2,r2,1
1000ffd0:	1000181e 	bne	r2,zero,10010034 <read+0xc8>
        (fd->dev->read))
1000ffd4:	e0bffb17 	ldw	r2,-20(fp)
1000ffd8:	10800017 	ldw	r2,0(r2)
1000ffdc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000ffe0:	10001426 	beq	r2,zero,10010034 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000ffe4:	e0bffb17 	ldw	r2,-20(fp)
1000ffe8:	10800017 	ldw	r2,0(r2)
1000ffec:	10800517 	ldw	r2,20(r2)
1000fff0:	e0ffff17 	ldw	r3,-4(fp)
1000fff4:	e13ffb17 	ldw	r4,-20(fp)
1000fff8:	e17ffe17 	ldw	r5,-8(fp)
1000fffc:	180d883a 	mov	r6,r3
10010000:	103ee83a 	callr	r2
10010004:	e0bffc15 	stw	r2,-16(fp)
10010008:	e0bffc17 	ldw	r2,-16(fp)
1001000c:	1000070e 	bge	r2,zero,1001002c <read+0xc0>
        {
          ALT_ERRNO = -rval;
10010010:	000ff1c0 	call	1000ff1c <alt_get_errno>
10010014:	1007883a 	mov	r3,r2
10010018:	e0bffc17 	ldw	r2,-16(fp)
1001001c:	0085c83a 	sub	r2,zero,r2
10010020:	18800015 	stw	r2,0(r3)
          return -1;
10010024:	00bfffc4 	movi	r2,-1
10010028:	00000c06 	br	1001005c <read+0xf0>
        }
        return rval;
1001002c:	e0bffc17 	ldw	r2,-16(fp)
10010030:	00000a06 	br	1001005c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10010034:	000ff1c0 	call	1000ff1c <alt_get_errno>
10010038:	1007883a 	mov	r3,r2
1001003c:	00800344 	movi	r2,13
10010040:	18800015 	stw	r2,0(r3)
10010044:	00000406 	br	10010058 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010048:	000ff1c0 	call	1000ff1c <alt_get_errno>
1001004c:	1007883a 	mov	r3,r2
10010050:	00801444 	movi	r2,81
10010054:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010058:	00bfffc4 	movi	r2,-1
}
1001005c:	e037883a 	mov	sp,fp
10010060:	dfc00117 	ldw	ra,4(sp)
10010064:	df000017 	ldw	fp,0(sp)
10010068:	dec00204 	addi	sp,sp,8
1001006c:	f800283a 	ret

10010070 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010070:	defffc04 	addi	sp,sp,-16
10010074:	dfc00315 	stw	ra,12(sp)
10010078:	df000215 	stw	fp,8(sp)
1001007c:	dc000115 	stw	r16,4(sp)
10010080:	df000204 	addi	fp,sp,8
10010084:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010088:	e0bffe17 	ldw	r2,-8(fp)
1001008c:	108000d0 	cmplti	r2,r2,3
10010090:	1000111e 	bne	r2,zero,100100d8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010094:	04040074 	movhi	r16,4097
10010098:	840b3304 	addi	r16,r16,11468
1001009c:	e0bffe17 	ldw	r2,-8(fp)
100100a0:	1009883a 	mov	r4,r2
100100a4:	01400304 	movi	r5,12
100100a8:	0003dd40 	call	10003dd4 <__mulsi3>
100100ac:	8085883a 	add	r2,r16,r2
100100b0:	10800204 	addi	r2,r2,8
100100b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100100b8:	04040074 	movhi	r16,4097
100100bc:	840b3304 	addi	r16,r16,11468
100100c0:	e0bffe17 	ldw	r2,-8(fp)
100100c4:	1009883a 	mov	r4,r2
100100c8:	01400304 	movi	r5,12
100100cc:	0003dd40 	call	10003dd4 <__mulsi3>
100100d0:	8085883a 	add	r2,r16,r2
100100d4:	10000015 	stw	zero,0(r2)
  }
}
100100d8:	e6ffff04 	addi	sp,fp,-4
100100dc:	dfc00217 	ldw	ra,8(sp)
100100e0:	df000117 	ldw	fp,4(sp)
100100e4:	dc000017 	ldw	r16,0(sp)
100100e8:	dec00304 	addi	sp,sp,12
100100ec:	f800283a 	ret

100100f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100100f0:	defff904 	addi	sp,sp,-28
100100f4:	df000615 	stw	fp,24(sp)
100100f8:	df000604 	addi	fp,sp,24
100100fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010100:	0005303a 	rdctl	r2,status
10010104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010108:	e0fffc17 	ldw	r3,-16(fp)
1001010c:	00bfff84 	movi	r2,-2
10010110:	1884703a 	and	r2,r3,r2
10010114:	1001703a 	wrctl	status,r2
  
  return context;
10010118:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1001011c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010120:	d0a00d17 	ldw	r2,-32716(gp)
10010124:	10c000c4 	addi	r3,r2,3
10010128:	00bfff04 	movi	r2,-4
1001012c:	1884703a 	and	r2,r3,r2
10010130:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010134:	d0e00d17 	ldw	r3,-32716(gp)
10010138:	e0bfff17 	ldw	r2,-4(fp)
1001013c:	1887883a 	add	r3,r3,r2
10010140:	00860034 	movhi	r2,6144
10010144:	10800004 	addi	r2,r2,0
10010148:	10c0062e 	bgeu	r2,r3,10010164 <sbrk+0x74>
1001014c:	e0bffa17 	ldw	r2,-24(fp)
10010150:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010154:	e0bffd17 	ldw	r2,-12(fp)
10010158:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001015c:	00bfffc4 	movi	r2,-1
10010160:	00000b06 	br	10010190 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010164:	d0a00d17 	ldw	r2,-32716(gp)
10010168:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1001016c:	d0e00d17 	ldw	r3,-32716(gp)
10010170:	e0bfff17 	ldw	r2,-4(fp)
10010174:	1885883a 	add	r2,r3,r2
10010178:	d0a00d15 	stw	r2,-32716(gp)
1001017c:	e0bffa17 	ldw	r2,-24(fp)
10010180:	e0bffe15 	stw	r2,-8(fp)
10010184:	e0bffe17 	ldw	r2,-8(fp)
10010188:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001018c:	e0bffb17 	ldw	r2,-20(fp)
} 
10010190:	e037883a 	mov	sp,fp
10010194:	df000017 	ldw	fp,0(sp)
10010198:	dec00104 	addi	sp,sp,4
1001019c:	f800283a 	ret

100101a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100101a0:	defffe04 	addi	sp,sp,-8
100101a4:	dfc00115 	stw	ra,4(sp)
100101a8:	df000015 	stw	fp,0(sp)
100101ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100101b0:	00840074 	movhi	r2,4097
100101b4:	108fb704 	addi	r2,r2,16092
100101b8:	10800017 	ldw	r2,0(r2)
100101bc:	10000526 	beq	r2,zero,100101d4 <alt_get_errno+0x34>
100101c0:	00840074 	movhi	r2,4097
100101c4:	108fb704 	addi	r2,r2,16092
100101c8:	10800017 	ldw	r2,0(r2)
100101cc:	103ee83a 	callr	r2
100101d0:	00000206 	br	100101dc <alt_get_errno+0x3c>
100101d4:	00840074 	movhi	r2,4097
100101d8:	10967e04 	addi	r2,r2,23032
}
100101dc:	e037883a 	mov	sp,fp
100101e0:	dfc00117 	ldw	ra,4(sp)
100101e4:	df000017 	ldw	fp,0(sp)
100101e8:	dec00204 	addi	sp,sp,8
100101ec:	f800283a 	ret

100101f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100101f0:	defff904 	addi	sp,sp,-28
100101f4:	dfc00615 	stw	ra,24(sp)
100101f8:	df000515 	stw	fp,20(sp)
100101fc:	df000504 	addi	fp,sp,20
10010200:	e13ffd15 	stw	r4,-12(fp)
10010204:	e17ffe15 	stw	r5,-8(fp)
10010208:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001020c:	e0bffd17 	ldw	r2,-12(fp)
10010210:	10000816 	blt	r2,zero,10010234 <write+0x44>
10010214:	e13ffd17 	ldw	r4,-12(fp)
10010218:	01400304 	movi	r5,12
1001021c:	0003dd40 	call	10003dd4 <__mulsi3>
10010220:	1007883a 	mov	r3,r2
10010224:	00840074 	movhi	r2,4097
10010228:	108b3304 	addi	r2,r2,11468
1001022c:	1885883a 	add	r2,r3,r2
10010230:	00000106 	br	10010238 <write+0x48>
10010234:	0005883a 	mov	r2,zero
10010238:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001023c:	e0bffb17 	ldw	r2,-20(fp)
10010240:	10002126 	beq	r2,zero,100102c8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010244:	e0bffb17 	ldw	r2,-20(fp)
10010248:	10800217 	ldw	r2,8(r2)
1001024c:	108000cc 	andi	r2,r2,3
10010250:	10001826 	beq	r2,zero,100102b4 <write+0xc4>
10010254:	e0bffb17 	ldw	r2,-20(fp)
10010258:	10800017 	ldw	r2,0(r2)
1001025c:	10800617 	ldw	r2,24(r2)
10010260:	10001426 	beq	r2,zero,100102b4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010264:	e0bffb17 	ldw	r2,-20(fp)
10010268:	10800017 	ldw	r2,0(r2)
1001026c:	10800617 	ldw	r2,24(r2)
10010270:	e0ffff17 	ldw	r3,-4(fp)
10010274:	e13ffb17 	ldw	r4,-20(fp)
10010278:	e17ffe17 	ldw	r5,-8(fp)
1001027c:	180d883a 	mov	r6,r3
10010280:	103ee83a 	callr	r2
10010284:	e0bffc15 	stw	r2,-16(fp)
10010288:	e0bffc17 	ldw	r2,-16(fp)
1001028c:	1000070e 	bge	r2,zero,100102ac <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010290:	00101a00 	call	100101a0 <alt_get_errno>
10010294:	1007883a 	mov	r3,r2
10010298:	e0bffc17 	ldw	r2,-16(fp)
1001029c:	0085c83a 	sub	r2,zero,r2
100102a0:	18800015 	stw	r2,0(r3)
        return -1;
100102a4:	00bfffc4 	movi	r2,-1
100102a8:	00000c06 	br	100102dc <write+0xec>
      }
      return rval;
100102ac:	e0bffc17 	ldw	r2,-16(fp)
100102b0:	00000a06 	br	100102dc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100102b4:	00101a00 	call	100101a0 <alt_get_errno>
100102b8:	1007883a 	mov	r3,r2
100102bc:	00800344 	movi	r2,13
100102c0:	18800015 	stw	r2,0(r3)
100102c4:	00000406 	br	100102d8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100102c8:	00101a00 	call	100101a0 <alt_get_errno>
100102cc:	1007883a 	mov	r3,r2
100102d0:	00801444 	movi	r2,81
100102d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
100102d8:	00bfffc4 	movi	r2,-1
}
100102dc:	e037883a 	mov	sp,fp
100102e0:	dfc00117 	ldw	ra,4(sp)
100102e4:	df000017 	ldw	fp,0(sp)
100102e8:	dec00204 	addi	sp,sp,8
100102ec:	f800283a 	ret

100102f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100102f0:	defffd04 	addi	sp,sp,-12
100102f4:	dfc00215 	stw	ra,8(sp)
100102f8:	df000115 	stw	fp,4(sp)
100102fc:	df000104 	addi	fp,sp,4
10010300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010304:	e13fff17 	ldw	r4,-4(fp)
10010308:	01440074 	movhi	r5,4097
1001030c:	294fb404 	addi	r5,r5,16080
10010310:	0010f9c0 	call	10010f9c <alt_dev_llist_insert>
}
10010314:	e037883a 	mov	sp,fp
10010318:	dfc00117 	ldw	ra,4(sp)
1001031c:	df000017 	ldw	fp,0(sp)
10010320:	dec00204 	addi	sp,sp,8
10010324:	f800283a 	ret

10010328 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010328:	defffd04 	addi	sp,sp,-12
1001032c:	dfc00215 	stw	ra,8(sp)
10010330:	df000115 	stw	fp,4(sp)
10010334:	df000104 	addi	fp,sp,4
10010338:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1001033c:	001197c0 	call	1001197c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010340:	00800044 	movi	r2,1
10010344:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010348:	e037883a 	mov	sp,fp
1001034c:	dfc00117 	ldw	ra,4(sp)
10010350:	df000017 	ldw	fp,0(sp)
10010354:	dec00204 	addi	sp,sp,8
10010358:	f800283a 	ret

1001035c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1001035c:	defffe04 	addi	sp,sp,-8
10010360:	dfc00115 	stw	ra,4(sp)
10010364:	df000015 	stw	fp,0(sp)
10010368:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1001036c:	01040074 	movhi	r4,4097
10010370:	210b9d04 	addi	r4,r4,11892
10010374:	000b883a 	mov	r5,zero
10010378:	01800144 	movi	r6,5
1001037c:	00105080 	call	10010508 <altera_avalon_jtag_uart_init>
10010380:	01040074 	movhi	r4,4097
10010384:	210b9304 	addi	r4,r4,11852
10010388:	00102f00 	call	100102f0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1001038c:	0001883a 	nop
}
10010390:	e037883a 	mov	sp,fp
10010394:	dfc00117 	ldw	ra,4(sp)
10010398:	df000017 	ldw	fp,0(sp)
1001039c:	dec00204 	addi	sp,sp,8
100103a0:	f800283a 	ret

100103a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100103a4:	defffa04 	addi	sp,sp,-24
100103a8:	dfc00515 	stw	ra,20(sp)
100103ac:	df000415 	stw	fp,16(sp)
100103b0:	df000404 	addi	fp,sp,16
100103b4:	e13ffd15 	stw	r4,-12(fp)
100103b8:	e17ffe15 	stw	r5,-8(fp)
100103bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100103c0:	e0bffd17 	ldw	r2,-12(fp)
100103c4:	10800017 	ldw	r2,0(r2)
100103c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100103cc:	e0bffc17 	ldw	r2,-16(fp)
100103d0:	10c00a04 	addi	r3,r2,40
100103d4:	e0bffd17 	ldw	r2,-12(fp)
100103d8:	10800217 	ldw	r2,8(r2)
100103dc:	1809883a 	mov	r4,r3
100103e0:	e17ffe17 	ldw	r5,-8(fp)
100103e4:	e1bfff17 	ldw	r6,-4(fp)
100103e8:	100f883a 	mov	r7,r2
100103ec:	00109cc0 	call	100109cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100103f0:	e037883a 	mov	sp,fp
100103f4:	dfc00117 	ldw	ra,4(sp)
100103f8:	df000017 	ldw	fp,0(sp)
100103fc:	dec00204 	addi	sp,sp,8
10010400:	f800283a 	ret

10010404 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010404:	defffa04 	addi	sp,sp,-24
10010408:	dfc00515 	stw	ra,20(sp)
1001040c:	df000415 	stw	fp,16(sp)
10010410:	df000404 	addi	fp,sp,16
10010414:	e13ffd15 	stw	r4,-12(fp)
10010418:	e17ffe15 	stw	r5,-8(fp)
1001041c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010420:	e0bffd17 	ldw	r2,-12(fp)
10010424:	10800017 	ldw	r2,0(r2)
10010428:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001042c:	e0bffc17 	ldw	r2,-16(fp)
10010430:	10c00a04 	addi	r3,r2,40
10010434:	e0bffd17 	ldw	r2,-12(fp)
10010438:	10800217 	ldw	r2,8(r2)
1001043c:	1809883a 	mov	r4,r3
10010440:	e17ffe17 	ldw	r5,-8(fp)
10010444:	e1bfff17 	ldw	r6,-4(fp)
10010448:	100f883a 	mov	r7,r2
1001044c:	0010bd80 	call	10010bd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010450:	e037883a 	mov	sp,fp
10010454:	dfc00117 	ldw	ra,4(sp)
10010458:	df000017 	ldw	fp,0(sp)
1001045c:	dec00204 	addi	sp,sp,8
10010460:	f800283a 	ret

10010464 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010464:	defffc04 	addi	sp,sp,-16
10010468:	dfc00315 	stw	ra,12(sp)
1001046c:	df000215 	stw	fp,8(sp)
10010470:	df000204 	addi	fp,sp,8
10010474:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010478:	e0bfff17 	ldw	r2,-4(fp)
1001047c:	10800017 	ldw	r2,0(r2)
10010480:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010484:	e0bffe17 	ldw	r2,-8(fp)
10010488:	10c00a04 	addi	r3,r2,40
1001048c:	e0bfff17 	ldw	r2,-4(fp)
10010490:	10800217 	ldw	r2,8(r2)
10010494:	1809883a 	mov	r4,r3
10010498:	100b883a 	mov	r5,r2
1001049c:	00108780 	call	10010878 <altera_avalon_jtag_uart_close>
}
100104a0:	e037883a 	mov	sp,fp
100104a4:	dfc00117 	ldw	ra,4(sp)
100104a8:	df000017 	ldw	fp,0(sp)
100104ac:	dec00204 	addi	sp,sp,8
100104b0:	f800283a 	ret

100104b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100104b4:	defffa04 	addi	sp,sp,-24
100104b8:	dfc00515 	stw	ra,20(sp)
100104bc:	df000415 	stw	fp,16(sp)
100104c0:	df000404 	addi	fp,sp,16
100104c4:	e13ffd15 	stw	r4,-12(fp)
100104c8:	e17ffe15 	stw	r5,-8(fp)
100104cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100104d0:	e0bffd17 	ldw	r2,-12(fp)
100104d4:	10800017 	ldw	r2,0(r2)
100104d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100104dc:	e0bffc17 	ldw	r2,-16(fp)
100104e0:	10800a04 	addi	r2,r2,40
100104e4:	1009883a 	mov	r4,r2
100104e8:	e17ffe17 	ldw	r5,-8(fp)
100104ec:	e1bfff17 	ldw	r6,-4(fp)
100104f0:	00108e00 	call	100108e0 <altera_avalon_jtag_uart_ioctl>
}
100104f4:	e037883a 	mov	sp,fp
100104f8:	dfc00117 	ldw	ra,4(sp)
100104fc:	df000017 	ldw	fp,0(sp)
10010500:	dec00204 	addi	sp,sp,8
10010504:	f800283a 	ret

10010508 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010508:	defffa04 	addi	sp,sp,-24
1001050c:	dfc00515 	stw	ra,20(sp)
10010510:	df000415 	stw	fp,16(sp)
10010514:	df000404 	addi	fp,sp,16
10010518:	e13ffd15 	stw	r4,-12(fp)
1001051c:	e17ffe15 	stw	r5,-8(fp)
10010520:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010524:	e0bffd17 	ldw	r2,-12(fp)
10010528:	00c00044 	movi	r3,1
1001052c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010530:	e0bffd17 	ldw	r2,-12(fp)
10010534:	10800017 	ldw	r2,0(r2)
10010538:	10800104 	addi	r2,r2,4
1001053c:	1007883a 	mov	r3,r2
10010540:	e0bffd17 	ldw	r2,-12(fp)
10010544:	10800817 	ldw	r2,32(r2)
10010548:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001054c:	e0fffe17 	ldw	r3,-8(fp)
10010550:	e0bfff17 	ldw	r2,-4(fp)
10010554:	d8000015 	stw	zero,0(sp)
10010558:	1809883a 	mov	r4,r3
1001055c:	100b883a 	mov	r5,r2
10010560:	01840074 	movhi	r6,4097
10010564:	31817304 	addi	r6,r6,1484
10010568:	e1fffd17 	ldw	r7,-12(fp)
1001056c:	00111140 	call	10011114 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010570:	e0bffd17 	ldw	r2,-12(fp)
10010574:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010578:	e0bffd17 	ldw	r2,-12(fp)
1001057c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010580:	00840074 	movhi	r2,4097
10010584:	10968304 	addi	r2,r2,23052
10010588:	10800017 	ldw	r2,0(r2)
1001058c:	1809883a 	mov	r4,r3
10010590:	100b883a 	mov	r5,r2
10010594:	01840074 	movhi	r6,4097
10010598:	3181f404 	addi	r6,r6,2000
1001059c:	e1fffd17 	ldw	r7,-12(fp)
100105a0:	0010df00 	call	10010df0 <alt_alarm_start>
100105a4:	1000040e 	bge	r2,zero,100105b8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100105a8:	e0fffd17 	ldw	r3,-12(fp)
100105ac:	00a00034 	movhi	r2,32768
100105b0:	10bfffc4 	addi	r2,r2,-1
100105b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100105b8:	e037883a 	mov	sp,fp
100105bc:	dfc00117 	ldw	ra,4(sp)
100105c0:	df000017 	ldw	fp,0(sp)
100105c4:	dec00204 	addi	sp,sp,8
100105c8:	f800283a 	ret

100105cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100105cc:	defff804 	addi	sp,sp,-32
100105d0:	df000715 	stw	fp,28(sp)
100105d4:	df000704 	addi	fp,sp,28
100105d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100105dc:	e0bfff17 	ldw	r2,-4(fp)
100105e0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100105e4:	e0bffb17 	ldw	r2,-20(fp)
100105e8:	10800017 	ldw	r2,0(r2)
100105ec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100105f0:	e0bffc17 	ldw	r2,-16(fp)
100105f4:	10800104 	addi	r2,r2,4
100105f8:	10800037 	ldwio	r2,0(r2)
100105fc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010600:	e0bffd17 	ldw	r2,-12(fp)
10010604:	1080c00c 	andi	r2,r2,768
10010608:	1000011e 	bne	r2,zero,10010610 <altera_avalon_jtag_uart_irq+0x44>
      break;
1001060c:	00006c06 	br	100107c0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010610:	e0bffd17 	ldw	r2,-12(fp)
10010614:	1080400c 	andi	r2,r2,256
10010618:	10003426 	beq	r2,zero,100106ec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001061c:	00800074 	movhi	r2,1
10010620:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010624:	e0bffb17 	ldw	r2,-20(fp)
10010628:	10800a17 	ldw	r2,40(r2)
1001062c:	10800044 	addi	r2,r2,1
10010630:	1081ffcc 	andi	r2,r2,2047
10010634:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010638:	e0bffb17 	ldw	r2,-20(fp)
1001063c:	10c00b17 	ldw	r3,44(r2)
10010640:	e0bffe17 	ldw	r2,-8(fp)
10010644:	1880011e 	bne	r3,r2,1001064c <altera_avalon_jtag_uart_irq+0x80>
          break;
10010648:	00001606 	br	100106a4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1001064c:	e0bffc17 	ldw	r2,-16(fp)
10010650:	10800037 	ldwio	r2,0(r2)
10010654:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010658:	e0bff917 	ldw	r2,-28(fp)
1001065c:	10a0000c 	andi	r2,r2,32768
10010660:	1000011e 	bne	r2,zero,10010668 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10010664:	00000f06 	br	100106a4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010668:	e0bffb17 	ldw	r2,-20(fp)
1001066c:	10800a17 	ldw	r2,40(r2)
10010670:	e0fff917 	ldw	r3,-28(fp)
10010674:	1809883a 	mov	r4,r3
10010678:	e0fffb17 	ldw	r3,-20(fp)
1001067c:	1885883a 	add	r2,r3,r2
10010680:	10800e04 	addi	r2,r2,56
10010684:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010688:	e0bffb17 	ldw	r2,-20(fp)
1001068c:	10800a17 	ldw	r2,40(r2)
10010690:	10800044 	addi	r2,r2,1
10010694:	10c1ffcc 	andi	r3,r2,2047
10010698:	e0bffb17 	ldw	r2,-20(fp)
1001069c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100106a0:	003fe006 	br	10010624 <__alt_data_end+0xf8010624>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100106a4:	e0bff917 	ldw	r2,-28(fp)
100106a8:	10bfffec 	andhi	r2,r2,65535
100106ac:	10000f26 	beq	r2,zero,100106ec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100106b0:	e0bffb17 	ldw	r2,-20(fp)
100106b4:	10c00817 	ldw	r3,32(r2)
100106b8:	00bfff84 	movi	r2,-2
100106bc:	1886703a 	and	r3,r3,r2
100106c0:	e0bffb17 	ldw	r2,-20(fp)
100106c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100106c8:	e0bffc17 	ldw	r2,-16(fp)
100106cc:	10800104 	addi	r2,r2,4
100106d0:	1007883a 	mov	r3,r2
100106d4:	e0bffb17 	ldw	r2,-20(fp)
100106d8:	10800817 	ldw	r2,32(r2)
100106dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100106e0:	e0bffc17 	ldw	r2,-16(fp)
100106e4:	10800104 	addi	r2,r2,4
100106e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100106ec:	e0bffd17 	ldw	r2,-12(fp)
100106f0:	1080800c 	andi	r2,r2,512
100106f4:	10003126 	beq	r2,zero,100107bc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100106f8:	e0bffd17 	ldw	r2,-12(fp)
100106fc:	1004d43a 	srli	r2,r2,16
10010700:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010704:	00001406 	br	10010758 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010708:	e0bffc17 	ldw	r2,-16(fp)
1001070c:	e0fffb17 	ldw	r3,-20(fp)
10010710:	18c00d17 	ldw	r3,52(r3)
10010714:	e13ffb17 	ldw	r4,-20(fp)
10010718:	20c7883a 	add	r3,r4,r3
1001071c:	18c20e04 	addi	r3,r3,2104
10010720:	18c00003 	ldbu	r3,0(r3)
10010724:	18c03fcc 	andi	r3,r3,255
10010728:	18c0201c 	xori	r3,r3,128
1001072c:	18ffe004 	addi	r3,r3,-128
10010730:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010734:	e0bffb17 	ldw	r2,-20(fp)
10010738:	10800d17 	ldw	r2,52(r2)
1001073c:	10800044 	addi	r2,r2,1
10010740:	10c1ffcc 	andi	r3,r2,2047
10010744:	e0bffb17 	ldw	r2,-20(fp)
10010748:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1001074c:	e0bffa17 	ldw	r2,-24(fp)
10010750:	10bfffc4 	addi	r2,r2,-1
10010754:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010758:	e0bffa17 	ldw	r2,-24(fp)
1001075c:	10000526 	beq	r2,zero,10010774 <altera_avalon_jtag_uart_irq+0x1a8>
10010760:	e0bffb17 	ldw	r2,-20(fp)
10010764:	10c00d17 	ldw	r3,52(r2)
10010768:	e0bffb17 	ldw	r2,-20(fp)
1001076c:	10800c17 	ldw	r2,48(r2)
10010770:	18bfe51e 	bne	r3,r2,10010708 <__alt_data_end+0xf8010708>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010774:	e0bffa17 	ldw	r2,-24(fp)
10010778:	10001026 	beq	r2,zero,100107bc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001077c:	e0bffb17 	ldw	r2,-20(fp)
10010780:	10c00817 	ldw	r3,32(r2)
10010784:	00bfff44 	movi	r2,-3
10010788:	1886703a 	and	r3,r3,r2
1001078c:	e0bffb17 	ldw	r2,-20(fp)
10010790:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010794:	e0bffb17 	ldw	r2,-20(fp)
10010798:	10800017 	ldw	r2,0(r2)
1001079c:	10800104 	addi	r2,r2,4
100107a0:	1007883a 	mov	r3,r2
100107a4:	e0bffb17 	ldw	r2,-20(fp)
100107a8:	10800817 	ldw	r2,32(r2)
100107ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100107b0:	e0bffc17 	ldw	r2,-16(fp)
100107b4:	10800104 	addi	r2,r2,4
100107b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100107bc:	003f8c06 	br	100105f0 <__alt_data_end+0xf80105f0>
}
100107c0:	e037883a 	mov	sp,fp
100107c4:	df000017 	ldw	fp,0(sp)
100107c8:	dec00104 	addi	sp,sp,4
100107cc:	f800283a 	ret

100107d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100107d0:	defff804 	addi	sp,sp,-32
100107d4:	df000715 	stw	fp,28(sp)
100107d8:	df000704 	addi	fp,sp,28
100107dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100107e0:	e0bffb17 	ldw	r2,-20(fp)
100107e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100107e8:	e0bff917 	ldw	r2,-28(fp)
100107ec:	10800017 	ldw	r2,0(r2)
100107f0:	10800104 	addi	r2,r2,4
100107f4:	10800037 	ldwio	r2,0(r2)
100107f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100107fc:	e0bffa17 	ldw	r2,-24(fp)
10010800:	1081000c 	andi	r2,r2,1024
10010804:	10000b26 	beq	r2,zero,10010834 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010808:	e0bff917 	ldw	r2,-28(fp)
1001080c:	10800017 	ldw	r2,0(r2)
10010810:	10800104 	addi	r2,r2,4
10010814:	1007883a 	mov	r3,r2
10010818:	e0bff917 	ldw	r2,-28(fp)
1001081c:	10800817 	ldw	r2,32(r2)
10010820:	10810014 	ori	r2,r2,1024
10010824:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010828:	e0bff917 	ldw	r2,-28(fp)
1001082c:	10000915 	stw	zero,36(r2)
10010830:	00000a06 	br	1001085c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010834:	e0bff917 	ldw	r2,-28(fp)
10010838:	10c00917 	ldw	r3,36(r2)
1001083c:	00a00034 	movhi	r2,32768
10010840:	10bfff04 	addi	r2,r2,-4
10010844:	10c00536 	bltu	r2,r3,1001085c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010848:	e0bff917 	ldw	r2,-28(fp)
1001084c:	10800917 	ldw	r2,36(r2)
10010850:	10c00044 	addi	r3,r2,1
10010854:	e0bff917 	ldw	r2,-28(fp)
10010858:	10c00915 	stw	r3,36(r2)
1001085c:	00840074 	movhi	r2,4097
10010860:	10968304 	addi	r2,r2,23052
10010864:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010868:	e037883a 	mov	sp,fp
1001086c:	df000017 	ldw	fp,0(sp)
10010870:	dec00104 	addi	sp,sp,4
10010874:	f800283a 	ret

10010878 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010878:	defffd04 	addi	sp,sp,-12
1001087c:	df000215 	stw	fp,8(sp)
10010880:	df000204 	addi	fp,sp,8
10010884:	e13ffe15 	stw	r4,-8(fp)
10010888:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001088c:	00000506 	br	100108a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010890:	e0bfff17 	ldw	r2,-4(fp)
10010894:	1090000c 	andi	r2,r2,16384
10010898:	10000226 	beq	r2,zero,100108a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001089c:	00bffd44 	movi	r2,-11
100108a0:	00000b06 	br	100108d0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100108a4:	e0bffe17 	ldw	r2,-8(fp)
100108a8:	10c00d17 	ldw	r3,52(r2)
100108ac:	e0bffe17 	ldw	r2,-8(fp)
100108b0:	10800c17 	ldw	r2,48(r2)
100108b4:	18800526 	beq	r3,r2,100108cc <altera_avalon_jtag_uart_close+0x54>
100108b8:	e0bffe17 	ldw	r2,-8(fp)
100108bc:	10c00917 	ldw	r3,36(r2)
100108c0:	e0bffe17 	ldw	r2,-8(fp)
100108c4:	10800117 	ldw	r2,4(r2)
100108c8:	18bff136 	bltu	r3,r2,10010890 <__alt_data_end+0xf8010890>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100108cc:	0005883a 	mov	r2,zero
}
100108d0:	e037883a 	mov	sp,fp
100108d4:	df000017 	ldw	fp,0(sp)
100108d8:	dec00104 	addi	sp,sp,4
100108dc:	f800283a 	ret

100108e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100108e0:	defffa04 	addi	sp,sp,-24
100108e4:	df000515 	stw	fp,20(sp)
100108e8:	df000504 	addi	fp,sp,20
100108ec:	e13ffd15 	stw	r4,-12(fp)
100108f0:	e17ffe15 	stw	r5,-8(fp)
100108f4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100108f8:	00bff9c4 	movi	r2,-25
100108fc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010900:	e0bffe17 	ldw	r2,-8(fp)
10010904:	10da8060 	cmpeqi	r3,r2,27137
10010908:	1800031e 	bne	r3,zero,10010918 <altera_avalon_jtag_uart_ioctl+0x38>
1001090c:	109a80a0 	cmpeqi	r2,r2,27138
10010910:	1000191e 	bne	r2,zero,10010978 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010914:	00002806 	br	100109b8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010918:	e0bffd17 	ldw	r2,-12(fp)
1001091c:	10c00117 	ldw	r3,4(r2)
10010920:	00a00034 	movhi	r2,32768
10010924:	10bfffc4 	addi	r2,r2,-1
10010928:	18801226 	beq	r3,r2,10010974 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1001092c:	e0bfff17 	ldw	r2,-4(fp)
10010930:	10800017 	ldw	r2,0(r2)
10010934:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010938:	e0bffc17 	ldw	r2,-16(fp)
1001093c:	10800090 	cmplti	r2,r2,2
10010940:	1000061e 	bne	r2,zero,1001095c <altera_avalon_jtag_uart_ioctl+0x7c>
10010944:	e0fffc17 	ldw	r3,-16(fp)
10010948:	00a00034 	movhi	r2,32768
1001094c:	10bfffc4 	addi	r2,r2,-1
10010950:	18800226 	beq	r3,r2,1001095c <altera_avalon_jtag_uart_ioctl+0x7c>
10010954:	e0bffc17 	ldw	r2,-16(fp)
10010958:	00000206 	br	10010964 <altera_avalon_jtag_uart_ioctl+0x84>
1001095c:	00a00034 	movhi	r2,32768
10010960:	10bfff84 	addi	r2,r2,-2
10010964:	e0fffd17 	ldw	r3,-12(fp)
10010968:	18800115 	stw	r2,4(r3)
      rc = 0;
1001096c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010970:	00001106 	br	100109b8 <altera_avalon_jtag_uart_ioctl+0xd8>
10010974:	00001006 	br	100109b8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010978:	e0bffd17 	ldw	r2,-12(fp)
1001097c:	10c00117 	ldw	r3,4(r2)
10010980:	00a00034 	movhi	r2,32768
10010984:	10bfffc4 	addi	r2,r2,-1
10010988:	18800a26 	beq	r3,r2,100109b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001098c:	e0bffd17 	ldw	r2,-12(fp)
10010990:	10c00917 	ldw	r3,36(r2)
10010994:	e0bffd17 	ldw	r2,-12(fp)
10010998:	10800117 	ldw	r2,4(r2)
1001099c:	1885803a 	cmpltu	r2,r3,r2
100109a0:	10c03fcc 	andi	r3,r2,255
100109a4:	e0bfff17 	ldw	r2,-4(fp)
100109a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100109ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100109b0:	00000006 	br	100109b4 <altera_avalon_jtag_uart_ioctl+0xd4>
100109b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
100109b8:	e0bffb17 	ldw	r2,-20(fp)
}
100109bc:	e037883a 	mov	sp,fp
100109c0:	df000017 	ldw	fp,0(sp)
100109c4:	dec00104 	addi	sp,sp,4
100109c8:	f800283a 	ret

100109cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100109cc:	defff304 	addi	sp,sp,-52
100109d0:	dfc00c15 	stw	ra,48(sp)
100109d4:	df000b15 	stw	fp,44(sp)
100109d8:	df000b04 	addi	fp,sp,44
100109dc:	e13ffc15 	stw	r4,-16(fp)
100109e0:	e17ffd15 	stw	r5,-12(fp)
100109e4:	e1bffe15 	stw	r6,-8(fp)
100109e8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100109ec:	e0bffd17 	ldw	r2,-12(fp)
100109f0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100109f4:	00004906 	br	10010b1c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100109f8:	e0bffc17 	ldw	r2,-16(fp)
100109fc:	10800a17 	ldw	r2,40(r2)
10010a00:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010a04:	e0bffc17 	ldw	r2,-16(fp)
10010a08:	10800b17 	ldw	r2,44(r2)
10010a0c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010a10:	e0fff717 	ldw	r3,-36(fp)
10010a14:	e0bff817 	ldw	r2,-32(fp)
10010a18:	18800536 	bltu	r3,r2,10010a30 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010a1c:	e0fff717 	ldw	r3,-36(fp)
10010a20:	e0bff817 	ldw	r2,-32(fp)
10010a24:	1885c83a 	sub	r2,r3,r2
10010a28:	e0bff615 	stw	r2,-40(fp)
10010a2c:	00000406 	br	10010a40 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010a30:	00c20004 	movi	r3,2048
10010a34:	e0bff817 	ldw	r2,-32(fp)
10010a38:	1885c83a 	sub	r2,r3,r2
10010a3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010a40:	e0bff617 	ldw	r2,-40(fp)
10010a44:	1000011e 	bne	r2,zero,10010a4c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10010a48:	00001d06 	br	10010ac0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10010a4c:	e0fffe17 	ldw	r3,-8(fp)
10010a50:	e0bff617 	ldw	r2,-40(fp)
10010a54:	1880022e 	bgeu	r3,r2,10010a60 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10010a58:	e0bffe17 	ldw	r2,-8(fp)
10010a5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010a60:	e0bff817 	ldw	r2,-32(fp)
10010a64:	10800e04 	addi	r2,r2,56
10010a68:	e0fffc17 	ldw	r3,-16(fp)
10010a6c:	1885883a 	add	r2,r3,r2
10010a70:	e13ff517 	ldw	r4,-44(fp)
10010a74:	100b883a 	mov	r5,r2
10010a78:	e1bff617 	ldw	r6,-40(fp)
10010a7c:	000b9440 	call	1000b944 <memcpy>
      ptr   += n;
10010a80:	e0fff517 	ldw	r3,-44(fp)
10010a84:	e0bff617 	ldw	r2,-40(fp)
10010a88:	1885883a 	add	r2,r3,r2
10010a8c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010a90:	e0fffe17 	ldw	r3,-8(fp)
10010a94:	e0bff617 	ldw	r2,-40(fp)
10010a98:	1885c83a 	sub	r2,r3,r2
10010a9c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010aa0:	e0fff817 	ldw	r3,-32(fp)
10010aa4:	e0bff617 	ldw	r2,-40(fp)
10010aa8:	1885883a 	add	r2,r3,r2
10010aac:	10c1ffcc 	andi	r3,r2,2047
10010ab0:	e0bffc17 	ldw	r2,-16(fp)
10010ab4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010ab8:	e0bffe17 	ldw	r2,-8(fp)
10010abc:	00bfce16 	blt	zero,r2,100109f8 <__alt_data_end+0xf80109f8>

    /* If we read any data then return it */
    if (ptr != buffer)
10010ac0:	e0fff517 	ldw	r3,-44(fp)
10010ac4:	e0bffd17 	ldw	r2,-12(fp)
10010ac8:	18800126 	beq	r3,r2,10010ad0 <altera_avalon_jtag_uart_read+0x104>
      break;
10010acc:	00001506 	br	10010b24 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010ad0:	e0bfff17 	ldw	r2,-4(fp)
10010ad4:	1090000c 	andi	r2,r2,16384
10010ad8:	10000126 	beq	r2,zero,10010ae0 <altera_avalon_jtag_uart_read+0x114>
      break;
10010adc:	00001106 	br	10010b24 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010ae0:	0001883a 	nop
10010ae4:	e0bffc17 	ldw	r2,-16(fp)
10010ae8:	10c00a17 	ldw	r3,40(r2)
10010aec:	e0bff717 	ldw	r2,-36(fp)
10010af0:	1880051e 	bne	r3,r2,10010b08 <altera_avalon_jtag_uart_read+0x13c>
10010af4:	e0bffc17 	ldw	r2,-16(fp)
10010af8:	10c00917 	ldw	r3,36(r2)
10010afc:	e0bffc17 	ldw	r2,-16(fp)
10010b00:	10800117 	ldw	r2,4(r2)
10010b04:	18bff736 	bltu	r3,r2,10010ae4 <__alt_data_end+0xf8010ae4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010b08:	e0bffc17 	ldw	r2,-16(fp)
10010b0c:	10c00a17 	ldw	r3,40(r2)
10010b10:	e0bff717 	ldw	r2,-36(fp)
10010b14:	1880011e 	bne	r3,r2,10010b1c <altera_avalon_jtag_uart_read+0x150>
      break;
10010b18:	00000206 	br	10010b24 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010b1c:	e0bffe17 	ldw	r2,-8(fp)
10010b20:	00bfb516 	blt	zero,r2,100109f8 <__alt_data_end+0xf80109f8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010b24:	e0fff517 	ldw	r3,-44(fp)
10010b28:	e0bffd17 	ldw	r2,-12(fp)
10010b2c:	18801826 	beq	r3,r2,10010b90 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b30:	0005303a 	rdctl	r2,status
10010b34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b38:	e0fffa17 	ldw	r3,-24(fp)
10010b3c:	00bfff84 	movi	r2,-2
10010b40:	1884703a 	and	r2,r3,r2
10010b44:	1001703a 	wrctl	status,r2
  
  return context;
10010b48:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010b4c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010b50:	e0bffc17 	ldw	r2,-16(fp)
10010b54:	10800817 	ldw	r2,32(r2)
10010b58:	10c00054 	ori	r3,r2,1
10010b5c:	e0bffc17 	ldw	r2,-16(fp)
10010b60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010b64:	e0bffc17 	ldw	r2,-16(fp)
10010b68:	10800017 	ldw	r2,0(r2)
10010b6c:	10800104 	addi	r2,r2,4
10010b70:	1007883a 	mov	r3,r2
10010b74:	e0bffc17 	ldw	r2,-16(fp)
10010b78:	10800817 	ldw	r2,32(r2)
10010b7c:	18800035 	stwio	r2,0(r3)
10010b80:	e0bff917 	ldw	r2,-28(fp)
10010b84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b88:	e0bffb17 	ldw	r2,-20(fp)
10010b8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010b90:	e0fff517 	ldw	r3,-44(fp)
10010b94:	e0bffd17 	ldw	r2,-12(fp)
10010b98:	18800426 	beq	r3,r2,10010bac <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10010b9c:	e0fff517 	ldw	r3,-44(fp)
10010ba0:	e0bffd17 	ldw	r2,-12(fp)
10010ba4:	1885c83a 	sub	r2,r3,r2
10010ba8:	00000606 	br	10010bc4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10010bac:	e0bfff17 	ldw	r2,-4(fp)
10010bb0:	1090000c 	andi	r2,r2,16384
10010bb4:	10000226 	beq	r2,zero,10010bc0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010bb8:	00bffd44 	movi	r2,-11
10010bbc:	00000106 	br	10010bc4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10010bc0:	00bffec4 	movi	r2,-5
}
10010bc4:	e037883a 	mov	sp,fp
10010bc8:	dfc00117 	ldw	ra,4(sp)
10010bcc:	df000017 	ldw	fp,0(sp)
10010bd0:	dec00204 	addi	sp,sp,8
10010bd4:	f800283a 	ret

10010bd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010bd8:	defff304 	addi	sp,sp,-52
10010bdc:	dfc00c15 	stw	ra,48(sp)
10010be0:	df000b15 	stw	fp,44(sp)
10010be4:	df000b04 	addi	fp,sp,44
10010be8:	e13ffc15 	stw	r4,-16(fp)
10010bec:	e17ffd15 	stw	r5,-12(fp)
10010bf0:	e1bffe15 	stw	r6,-8(fp)
10010bf4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010bf8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010bfc:	e0bffd17 	ldw	r2,-12(fp)
10010c00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010c04:	00003806 	br	10010ce8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010c08:	e0bffc17 	ldw	r2,-16(fp)
10010c0c:	10800c17 	ldw	r2,48(r2)
10010c10:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10010c14:	e0bffc17 	ldw	r2,-16(fp)
10010c18:	10800d17 	ldw	r2,52(r2)
10010c1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010c20:	e0fff817 	ldw	r3,-32(fp)
10010c24:	e0bff517 	ldw	r2,-44(fp)
10010c28:	1880062e 	bgeu	r3,r2,10010c44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010c2c:	e0fff517 	ldw	r3,-44(fp)
10010c30:	e0bff817 	ldw	r2,-32(fp)
10010c34:	1885c83a 	sub	r2,r3,r2
10010c38:	10bfffc4 	addi	r2,r2,-1
10010c3c:	e0bff615 	stw	r2,-40(fp)
10010c40:	00000b06 	br	10010c70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010c44:	e0bff517 	ldw	r2,-44(fp)
10010c48:	10000526 	beq	r2,zero,10010c60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010c4c:	00c20004 	movi	r3,2048
10010c50:	e0bff817 	ldw	r2,-32(fp)
10010c54:	1885c83a 	sub	r2,r3,r2
10010c58:	e0bff615 	stw	r2,-40(fp)
10010c5c:	00000406 	br	10010c70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010c60:	00c1ffc4 	movi	r3,2047
10010c64:	e0bff817 	ldw	r2,-32(fp)
10010c68:	1885c83a 	sub	r2,r3,r2
10010c6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010c70:	e0bff617 	ldw	r2,-40(fp)
10010c74:	1000011e 	bne	r2,zero,10010c7c <altera_avalon_jtag_uart_write+0xa4>
        break;
10010c78:	00001d06 	br	10010cf0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10010c7c:	e0fffe17 	ldw	r3,-8(fp)
10010c80:	e0bff617 	ldw	r2,-40(fp)
10010c84:	1880022e 	bgeu	r3,r2,10010c90 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10010c88:	e0bffe17 	ldw	r2,-8(fp)
10010c8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010c90:	e0bff817 	ldw	r2,-32(fp)
10010c94:	10820e04 	addi	r2,r2,2104
10010c98:	e0fffc17 	ldw	r3,-16(fp)
10010c9c:	1885883a 	add	r2,r3,r2
10010ca0:	1009883a 	mov	r4,r2
10010ca4:	e17ffd17 	ldw	r5,-12(fp)
10010ca8:	e1bff617 	ldw	r6,-40(fp)
10010cac:	000b9440 	call	1000b944 <memcpy>
      ptr   += n;
10010cb0:	e0fffd17 	ldw	r3,-12(fp)
10010cb4:	e0bff617 	ldw	r2,-40(fp)
10010cb8:	1885883a 	add	r2,r3,r2
10010cbc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010cc0:	e0fffe17 	ldw	r3,-8(fp)
10010cc4:	e0bff617 	ldw	r2,-40(fp)
10010cc8:	1885c83a 	sub	r2,r3,r2
10010ccc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010cd0:	e0fff817 	ldw	r3,-32(fp)
10010cd4:	e0bff617 	ldw	r2,-40(fp)
10010cd8:	1885883a 	add	r2,r3,r2
10010cdc:	10c1ffcc 	andi	r3,r2,2047
10010ce0:	e0bffc17 	ldw	r2,-16(fp)
10010ce4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010ce8:	e0bffe17 	ldw	r2,-8(fp)
10010cec:	00bfc616 	blt	zero,r2,10010c08 <__alt_data_end+0xf8010c08>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010cf0:	0005303a 	rdctl	r2,status
10010cf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010cf8:	e0fffa17 	ldw	r3,-24(fp)
10010cfc:	00bfff84 	movi	r2,-2
10010d00:	1884703a 	and	r2,r3,r2
10010d04:	1001703a 	wrctl	status,r2
  
  return context;
10010d08:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010d0c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010d10:	e0bffc17 	ldw	r2,-16(fp)
10010d14:	10800817 	ldw	r2,32(r2)
10010d18:	10c00094 	ori	r3,r2,2
10010d1c:	e0bffc17 	ldw	r2,-16(fp)
10010d20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010d24:	e0bffc17 	ldw	r2,-16(fp)
10010d28:	10800017 	ldw	r2,0(r2)
10010d2c:	10800104 	addi	r2,r2,4
10010d30:	1007883a 	mov	r3,r2
10010d34:	e0bffc17 	ldw	r2,-16(fp)
10010d38:	10800817 	ldw	r2,32(r2)
10010d3c:	18800035 	stwio	r2,0(r3)
10010d40:	e0bff917 	ldw	r2,-28(fp)
10010d44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010d48:	e0bffb17 	ldw	r2,-20(fp)
10010d4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010d50:	e0bffe17 	ldw	r2,-8(fp)
10010d54:	0080120e 	bge	zero,r2,10010da0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10010d58:	e0bfff17 	ldw	r2,-4(fp)
10010d5c:	1090000c 	andi	r2,r2,16384
10010d60:	10000126 	beq	r2,zero,10010d68 <altera_avalon_jtag_uart_write+0x190>
        break;
10010d64:	00001006 	br	10010da8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010d68:	0001883a 	nop
10010d6c:	e0bffc17 	ldw	r2,-16(fp)
10010d70:	10c00d17 	ldw	r3,52(r2)
10010d74:	e0bff517 	ldw	r2,-44(fp)
10010d78:	1880051e 	bne	r3,r2,10010d90 <altera_avalon_jtag_uart_write+0x1b8>
10010d7c:	e0bffc17 	ldw	r2,-16(fp)
10010d80:	10c00917 	ldw	r3,36(r2)
10010d84:	e0bffc17 	ldw	r2,-16(fp)
10010d88:	10800117 	ldw	r2,4(r2)
10010d8c:	18bff736 	bltu	r3,r2,10010d6c <__alt_data_end+0xf8010d6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010d90:	e0bffc17 	ldw	r2,-16(fp)
10010d94:	10800917 	ldw	r2,36(r2)
10010d98:	10000126 	beq	r2,zero,10010da0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10010d9c:	00000206 	br	10010da8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10010da0:	e0bffe17 	ldw	r2,-8(fp)
10010da4:	00bf9716 	blt	zero,r2,10010c04 <__alt_data_end+0xf8010c04>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010da8:	e0fffd17 	ldw	r3,-12(fp)
10010dac:	e0bff717 	ldw	r2,-36(fp)
10010db0:	18800426 	beq	r3,r2,10010dc4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10010db4:	e0fffd17 	ldw	r3,-12(fp)
10010db8:	e0bff717 	ldw	r2,-36(fp)
10010dbc:	1885c83a 	sub	r2,r3,r2
10010dc0:	00000606 	br	10010ddc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10010dc4:	e0bfff17 	ldw	r2,-4(fp)
10010dc8:	1090000c 	andi	r2,r2,16384
10010dcc:	10000226 	beq	r2,zero,10010dd8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10010dd0:	00bffd44 	movi	r2,-11
10010dd4:	00000106 	br	10010ddc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010dd8:	00bffec4 	movi	r2,-5
}
10010ddc:	e037883a 	mov	sp,fp
10010de0:	dfc00117 	ldw	ra,4(sp)
10010de4:	df000017 	ldw	fp,0(sp)
10010de8:	dec00204 	addi	sp,sp,8
10010dec:	f800283a 	ret

10010df0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010df0:	defff504 	addi	sp,sp,-44
10010df4:	df000a15 	stw	fp,40(sp)
10010df8:	df000a04 	addi	fp,sp,40
10010dfc:	e13ffc15 	stw	r4,-16(fp)
10010e00:	e17ffd15 	stw	r5,-12(fp)
10010e04:	e1bffe15 	stw	r6,-8(fp)
10010e08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010e0c:	e03ff615 	stw	zero,-40(fp)
10010e10:	00840074 	movhi	r2,4097
10010e14:	10968304 	addi	r2,r2,23052
10010e18:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10010e1c:	10003f26 	beq	r2,zero,10010f1c <alt_alarm_start+0x12c>
  {
    if (alarm)
10010e20:	e0bffc17 	ldw	r2,-16(fp)
10010e24:	10003b26 	beq	r2,zero,10010f14 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10010e28:	e0bffc17 	ldw	r2,-16(fp)
10010e2c:	e0fffe17 	ldw	r3,-8(fp)
10010e30:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010e34:	e0bffc17 	ldw	r2,-16(fp)
10010e38:	e0ffff17 	ldw	r3,-4(fp)
10010e3c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e40:	0005303a 	rdctl	r2,status
10010e44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e48:	e0fff817 	ldw	r3,-32(fp)
10010e4c:	00bfff84 	movi	r2,-2
10010e50:	1884703a 	and	r2,r3,r2
10010e54:	1001703a 	wrctl	status,r2
  
  return context;
10010e58:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10010e5c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010e60:	00840074 	movhi	r2,4097
10010e64:	10968404 	addi	r2,r2,23056
10010e68:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10010e6c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010e70:	e0fffd17 	ldw	r3,-12(fp)
10010e74:	e0bff617 	ldw	r2,-40(fp)
10010e78:	1885883a 	add	r2,r3,r2
10010e7c:	10c00044 	addi	r3,r2,1
10010e80:	e0bffc17 	ldw	r2,-16(fp)
10010e84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010e88:	e0bffc17 	ldw	r2,-16(fp)
10010e8c:	10c00217 	ldw	r3,8(r2)
10010e90:	e0bff617 	ldw	r2,-40(fp)
10010e94:	1880042e 	bgeu	r3,r2,10010ea8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10010e98:	e0bffc17 	ldw	r2,-16(fp)
10010e9c:	00c00044 	movi	r3,1
10010ea0:	10c00405 	stb	r3,16(r2)
10010ea4:	00000206 	br	10010eb0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010ea8:	e0bffc17 	ldw	r2,-16(fp)
10010eac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010eb0:	e0fffc17 	ldw	r3,-16(fp)
10010eb4:	00840074 	movhi	r2,4097
10010eb8:	108fba04 	addi	r2,r2,16104
10010ebc:	e0bff915 	stw	r2,-28(fp)
10010ec0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010ec4:	e0bffa17 	ldw	r2,-24(fp)
10010ec8:	e0fff917 	ldw	r3,-28(fp)
10010ecc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010ed0:	e0bff917 	ldw	r2,-28(fp)
10010ed4:	10c00017 	ldw	r3,0(r2)
10010ed8:	e0bffa17 	ldw	r2,-24(fp)
10010edc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010ee0:	e0bff917 	ldw	r2,-28(fp)
10010ee4:	10800017 	ldw	r2,0(r2)
10010ee8:	e0fffa17 	ldw	r3,-24(fp)
10010eec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010ef0:	e0bff917 	ldw	r2,-28(fp)
10010ef4:	e0fffa17 	ldw	r3,-24(fp)
10010ef8:	10c00015 	stw	r3,0(r2)
10010efc:	e0bff717 	ldw	r2,-36(fp)
10010f00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010f04:	e0bffb17 	ldw	r2,-20(fp)
10010f08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010f0c:	0005883a 	mov	r2,zero
10010f10:	00000306 	br	10010f20 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10010f14:	00bffa84 	movi	r2,-22
10010f18:	00000106 	br	10010f20 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10010f1c:	00bfde84 	movi	r2,-134
  }
}
10010f20:	e037883a 	mov	sp,fp
10010f24:	df000017 	ldw	fp,0(sp)
10010f28:	dec00104 	addi	sp,sp,4
10010f2c:	f800283a 	ret

10010f30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010f30:	deffff04 	addi	sp,sp,-4
10010f34:	df000015 	stw	fp,0(sp)
10010f38:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010f3c:	e037883a 	mov	sp,fp
10010f40:	df000017 	ldw	fp,0(sp)
10010f44:	dec00104 	addi	sp,sp,4
10010f48:	f800283a 	ret

10010f4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010f4c:	defffe04 	addi	sp,sp,-8
10010f50:	dfc00115 	stw	ra,4(sp)
10010f54:	df000015 	stw	fp,0(sp)
10010f58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010f5c:	00840074 	movhi	r2,4097
10010f60:	108fb704 	addi	r2,r2,16092
10010f64:	10800017 	ldw	r2,0(r2)
10010f68:	10000526 	beq	r2,zero,10010f80 <alt_get_errno+0x34>
10010f6c:	00840074 	movhi	r2,4097
10010f70:	108fb704 	addi	r2,r2,16092
10010f74:	10800017 	ldw	r2,0(r2)
10010f78:	103ee83a 	callr	r2
10010f7c:	00000206 	br	10010f88 <alt_get_errno+0x3c>
10010f80:	00840074 	movhi	r2,4097
10010f84:	10967e04 	addi	r2,r2,23032
}
10010f88:	e037883a 	mov	sp,fp
10010f8c:	dfc00117 	ldw	ra,4(sp)
10010f90:	df000017 	ldw	fp,0(sp)
10010f94:	dec00204 	addi	sp,sp,8
10010f98:	f800283a 	ret

10010f9c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010f9c:	defffa04 	addi	sp,sp,-24
10010fa0:	dfc00515 	stw	ra,20(sp)
10010fa4:	df000415 	stw	fp,16(sp)
10010fa8:	df000404 	addi	fp,sp,16
10010fac:	e13ffe15 	stw	r4,-8(fp)
10010fb0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010fb4:	e0bffe17 	ldw	r2,-8(fp)
10010fb8:	10000326 	beq	r2,zero,10010fc8 <alt_dev_llist_insert+0x2c>
10010fbc:	e0bffe17 	ldw	r2,-8(fp)
10010fc0:	10800217 	ldw	r2,8(r2)
10010fc4:	1000061e 	bne	r2,zero,10010fe0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010fc8:	0010f4c0 	call	10010f4c <alt_get_errno>
10010fcc:	1007883a 	mov	r3,r2
10010fd0:	00800584 	movi	r2,22
10010fd4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010fd8:	00bffa84 	movi	r2,-22
10010fdc:	00001306 	br	1001102c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010fe0:	e0bffe17 	ldw	r2,-8(fp)
10010fe4:	e0ffff17 	ldw	r3,-4(fp)
10010fe8:	e0fffc15 	stw	r3,-16(fp)
10010fec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010ff0:	e0bffd17 	ldw	r2,-12(fp)
10010ff4:	e0fffc17 	ldw	r3,-16(fp)
10010ff8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010ffc:	e0bffc17 	ldw	r2,-16(fp)
10011000:	10c00017 	ldw	r3,0(r2)
10011004:	e0bffd17 	ldw	r2,-12(fp)
10011008:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001100c:	e0bffc17 	ldw	r2,-16(fp)
10011010:	10800017 	ldw	r2,0(r2)
10011014:	e0fffd17 	ldw	r3,-12(fp)
10011018:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001101c:	e0bffc17 	ldw	r2,-16(fp)
10011020:	e0fffd17 	ldw	r3,-12(fp)
10011024:	10c00015 	stw	r3,0(r2)

  return 0;  
10011028:	0005883a 	mov	r2,zero
}
1001102c:	e037883a 	mov	sp,fp
10011030:	dfc00117 	ldw	ra,4(sp)
10011034:	df000017 	ldw	fp,0(sp)
10011038:	dec00204 	addi	sp,sp,8
1001103c:	f800283a 	ret

10011040 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011040:	defffd04 	addi	sp,sp,-12
10011044:	dfc00215 	stw	ra,8(sp)
10011048:	df000115 	stw	fp,4(sp)
1001104c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011050:	00840074 	movhi	r2,4097
10011054:	10881404 	addi	r2,r2,8272
10011058:	e0bfff15 	stw	r2,-4(fp)
1001105c:	00000606 	br	10011078 <_do_ctors+0x38>
        (*ctor) (); 
10011060:	e0bfff17 	ldw	r2,-4(fp)
10011064:	10800017 	ldw	r2,0(r2)
10011068:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001106c:	e0bfff17 	ldw	r2,-4(fp)
10011070:	10bfff04 	addi	r2,r2,-4
10011074:	e0bfff15 	stw	r2,-4(fp)
10011078:	e0ffff17 	ldw	r3,-4(fp)
1001107c:	00840074 	movhi	r2,4097
10011080:	10881504 	addi	r2,r2,8276
10011084:	18bff62e 	bgeu	r3,r2,10011060 <__alt_data_end+0xf8011060>
        (*ctor) (); 
}
10011088:	e037883a 	mov	sp,fp
1001108c:	dfc00117 	ldw	ra,4(sp)
10011090:	df000017 	ldw	fp,0(sp)
10011094:	dec00204 	addi	sp,sp,8
10011098:	f800283a 	ret

1001109c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1001109c:	defffd04 	addi	sp,sp,-12
100110a0:	dfc00215 	stw	ra,8(sp)
100110a4:	df000115 	stw	fp,4(sp)
100110a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100110ac:	00840074 	movhi	r2,4097
100110b0:	10881404 	addi	r2,r2,8272
100110b4:	e0bfff15 	stw	r2,-4(fp)
100110b8:	00000606 	br	100110d4 <_do_dtors+0x38>
        (*dtor) (); 
100110bc:	e0bfff17 	ldw	r2,-4(fp)
100110c0:	10800017 	ldw	r2,0(r2)
100110c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100110c8:	e0bfff17 	ldw	r2,-4(fp)
100110cc:	10bfff04 	addi	r2,r2,-4
100110d0:	e0bfff15 	stw	r2,-4(fp)
100110d4:	e0ffff17 	ldw	r3,-4(fp)
100110d8:	00840074 	movhi	r2,4097
100110dc:	10881504 	addi	r2,r2,8276
100110e0:	18bff62e 	bgeu	r3,r2,100110bc <__alt_data_end+0xf80110bc>
        (*dtor) (); 
}
100110e4:	e037883a 	mov	sp,fp
100110e8:	dfc00117 	ldw	ra,4(sp)
100110ec:	df000017 	ldw	fp,0(sp)
100110f0:	dec00204 	addi	sp,sp,8
100110f4:	f800283a 	ret

100110f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100110f8:	deffff04 	addi	sp,sp,-4
100110fc:	df000015 	stw	fp,0(sp)
10011100:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011104:	e037883a 	mov	sp,fp
10011108:	df000017 	ldw	fp,0(sp)
1001110c:	dec00104 	addi	sp,sp,4
10011110:	f800283a 	ret

10011114 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011114:	defff904 	addi	sp,sp,-28
10011118:	dfc00615 	stw	ra,24(sp)
1001111c:	df000515 	stw	fp,20(sp)
10011120:	df000504 	addi	fp,sp,20
10011124:	e13ffc15 	stw	r4,-16(fp)
10011128:	e17ffd15 	stw	r5,-12(fp)
1001112c:	e1bffe15 	stw	r6,-8(fp)
10011130:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011134:	e0800217 	ldw	r2,8(fp)
10011138:	d8800015 	stw	r2,0(sp)
1001113c:	e13ffc17 	ldw	r4,-16(fp)
10011140:	e17ffd17 	ldw	r5,-12(fp)
10011144:	e1bffe17 	ldw	r6,-8(fp)
10011148:	e1ffff17 	ldw	r7,-4(fp)
1001114c:	00112f40 	call	100112f4 <alt_iic_isr_register>
}  
10011150:	e037883a 	mov	sp,fp
10011154:	dfc00117 	ldw	ra,4(sp)
10011158:	df000017 	ldw	fp,0(sp)
1001115c:	dec00204 	addi	sp,sp,8
10011160:	f800283a 	ret

10011164 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011164:	defff904 	addi	sp,sp,-28
10011168:	df000615 	stw	fp,24(sp)
1001116c:	df000604 	addi	fp,sp,24
10011170:	e13ffe15 	stw	r4,-8(fp)
10011174:	e17fff15 	stw	r5,-4(fp)
10011178:	e0bfff17 	ldw	r2,-4(fp)
1001117c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011180:	0005303a 	rdctl	r2,status
10011184:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011188:	e0fffb17 	ldw	r3,-20(fp)
1001118c:	00bfff84 	movi	r2,-2
10011190:	1884703a 	and	r2,r3,r2
10011194:	1001703a 	wrctl	status,r2
  
  return context;
10011198:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001119c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100111a0:	e0bffa17 	ldw	r2,-24(fp)
100111a4:	00c00044 	movi	r3,1
100111a8:	1884983a 	sll	r2,r3,r2
100111ac:	1007883a 	mov	r3,r2
100111b0:	00840074 	movhi	r2,4097
100111b4:	10968204 	addi	r2,r2,23048
100111b8:	10800017 	ldw	r2,0(r2)
100111bc:	1886b03a 	or	r3,r3,r2
100111c0:	00840074 	movhi	r2,4097
100111c4:	10968204 	addi	r2,r2,23048
100111c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100111cc:	00840074 	movhi	r2,4097
100111d0:	10968204 	addi	r2,r2,23048
100111d4:	10800017 	ldw	r2,0(r2)
100111d8:	100170fa 	wrctl	ienable,r2
100111dc:	e0bffc17 	ldw	r2,-16(fp)
100111e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100111e4:	e0bffd17 	ldw	r2,-12(fp)
100111e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100111ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100111f0:	0001883a 	nop
}
100111f4:	e037883a 	mov	sp,fp
100111f8:	df000017 	ldw	fp,0(sp)
100111fc:	dec00104 	addi	sp,sp,4
10011200:	f800283a 	ret

10011204 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011204:	defff904 	addi	sp,sp,-28
10011208:	df000615 	stw	fp,24(sp)
1001120c:	df000604 	addi	fp,sp,24
10011210:	e13ffe15 	stw	r4,-8(fp)
10011214:	e17fff15 	stw	r5,-4(fp)
10011218:	e0bfff17 	ldw	r2,-4(fp)
1001121c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011220:	0005303a 	rdctl	r2,status
10011224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011228:	e0fffb17 	ldw	r3,-20(fp)
1001122c:	00bfff84 	movi	r2,-2
10011230:	1884703a 	and	r2,r3,r2
10011234:	1001703a 	wrctl	status,r2
  
  return context;
10011238:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001123c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011240:	e0bffa17 	ldw	r2,-24(fp)
10011244:	00c00044 	movi	r3,1
10011248:	1884983a 	sll	r2,r3,r2
1001124c:	0084303a 	nor	r2,zero,r2
10011250:	1007883a 	mov	r3,r2
10011254:	00840074 	movhi	r2,4097
10011258:	10968204 	addi	r2,r2,23048
1001125c:	10800017 	ldw	r2,0(r2)
10011260:	1886703a 	and	r3,r3,r2
10011264:	00840074 	movhi	r2,4097
10011268:	10968204 	addi	r2,r2,23048
1001126c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011270:	00840074 	movhi	r2,4097
10011274:	10968204 	addi	r2,r2,23048
10011278:	10800017 	ldw	r2,0(r2)
1001127c:	100170fa 	wrctl	ienable,r2
10011280:	e0bffc17 	ldw	r2,-16(fp)
10011284:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011288:	e0bffd17 	ldw	r2,-12(fp)
1001128c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011290:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011294:	0001883a 	nop
}
10011298:	e037883a 	mov	sp,fp
1001129c:	df000017 	ldw	fp,0(sp)
100112a0:	dec00104 	addi	sp,sp,4
100112a4:	f800283a 	ret

100112a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100112a8:	defffc04 	addi	sp,sp,-16
100112ac:	df000315 	stw	fp,12(sp)
100112b0:	df000304 	addi	fp,sp,12
100112b4:	e13ffe15 	stw	r4,-8(fp)
100112b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100112bc:	000530fa 	rdctl	r2,ienable
100112c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100112c4:	e0bfff17 	ldw	r2,-4(fp)
100112c8:	00c00044 	movi	r3,1
100112cc:	1884983a 	sll	r2,r3,r2
100112d0:	1007883a 	mov	r3,r2
100112d4:	e0bffd17 	ldw	r2,-12(fp)
100112d8:	1884703a 	and	r2,r3,r2
100112dc:	1004c03a 	cmpne	r2,r2,zero
100112e0:	10803fcc 	andi	r2,r2,255
}
100112e4:	e037883a 	mov	sp,fp
100112e8:	df000017 	ldw	fp,0(sp)
100112ec:	dec00104 	addi	sp,sp,4
100112f0:	f800283a 	ret

100112f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100112f4:	defff504 	addi	sp,sp,-44
100112f8:	dfc00a15 	stw	ra,40(sp)
100112fc:	df000915 	stw	fp,36(sp)
10011300:	df000904 	addi	fp,sp,36
10011304:	e13ffc15 	stw	r4,-16(fp)
10011308:	e17ffd15 	stw	r5,-12(fp)
1001130c:	e1bffe15 	stw	r6,-8(fp)
10011310:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011314:	00bffa84 	movi	r2,-22
10011318:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1001131c:	e0bffd17 	ldw	r2,-12(fp)
10011320:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011324:	e0bff817 	ldw	r2,-32(fp)
10011328:	10800808 	cmpgei	r2,r2,32
1001132c:	1000271e 	bne	r2,zero,100113cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011330:	0005303a 	rdctl	r2,status
10011334:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011338:	e0fffa17 	ldw	r3,-24(fp)
1001133c:	00bfff84 	movi	r2,-2
10011340:	1884703a 	and	r2,r3,r2
10011344:	1001703a 	wrctl	status,r2
  
  return context;
10011348:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1001134c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10011350:	00840074 	movhi	r2,4097
10011354:	10972004 	addi	r2,r2,23680
10011358:	e0fff817 	ldw	r3,-32(fp)
1001135c:	180690fa 	slli	r3,r3,3
10011360:	10c5883a 	add	r2,r2,r3
10011364:	e0fffe17 	ldw	r3,-8(fp)
10011368:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1001136c:	00840074 	movhi	r2,4097
10011370:	10972004 	addi	r2,r2,23680
10011374:	e0fff817 	ldw	r3,-32(fp)
10011378:	180690fa 	slli	r3,r3,3
1001137c:	10c5883a 	add	r2,r2,r3
10011380:	10800104 	addi	r2,r2,4
10011384:	e0ffff17 	ldw	r3,-4(fp)
10011388:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1001138c:	e0bffe17 	ldw	r2,-8(fp)
10011390:	10000526 	beq	r2,zero,100113a8 <alt_iic_isr_register+0xb4>
10011394:	e0bff817 	ldw	r2,-32(fp)
10011398:	e13ffc17 	ldw	r4,-16(fp)
1001139c:	100b883a 	mov	r5,r2
100113a0:	00111640 	call	10011164 <alt_ic_irq_enable>
100113a4:	00000406 	br	100113b8 <alt_iic_isr_register+0xc4>
100113a8:	e0bff817 	ldw	r2,-32(fp)
100113ac:	e13ffc17 	ldw	r4,-16(fp)
100113b0:	100b883a 	mov	r5,r2
100113b4:	00112040 	call	10011204 <alt_ic_irq_disable>
100113b8:	e0bff715 	stw	r2,-36(fp)
100113bc:	e0bff917 	ldw	r2,-28(fp)
100113c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100113c4:	e0bffb17 	ldw	r2,-20(fp)
100113c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100113cc:	e0bff717 	ldw	r2,-36(fp)
}
100113d0:	e037883a 	mov	sp,fp
100113d4:	dfc00117 	ldw	ra,4(sp)
100113d8:	df000017 	ldw	fp,0(sp)
100113dc:	dec00204 	addi	sp,sp,8
100113e0:	f800283a 	ret

100113e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100113e4:	defff804 	addi	sp,sp,-32
100113e8:	dfc00715 	stw	ra,28(sp)
100113ec:	df000615 	stw	fp,24(sp)
100113f0:	dc000515 	stw	r16,20(sp)
100113f4:	df000604 	addi	fp,sp,24
100113f8:	e13ffb15 	stw	r4,-20(fp)
100113fc:	e17ffc15 	stw	r5,-16(fp)
10011400:	e1bffd15 	stw	r6,-12(fp)
10011404:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011408:	e13ffc17 	ldw	r4,-16(fp)
1001140c:	e17ffd17 	ldw	r5,-12(fp)
10011410:	e1bffe17 	ldw	r6,-8(fp)
10011414:	00116800 	call	10011680 <open>
10011418:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1001141c:	e0bffa17 	ldw	r2,-24(fp)
10011420:	10002216 	blt	r2,zero,100114ac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011424:	04040074 	movhi	r16,4097
10011428:	840b3304 	addi	r16,r16,11468
1001142c:	e0bffa17 	ldw	r2,-24(fp)
10011430:	1009883a 	mov	r4,r2
10011434:	01400304 	movi	r5,12
10011438:	0003dd40 	call	10003dd4 <__mulsi3>
1001143c:	8085883a 	add	r2,r16,r2
10011440:	10c00017 	ldw	r3,0(r2)
10011444:	e0bffb17 	ldw	r2,-20(fp)
10011448:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1001144c:	04040074 	movhi	r16,4097
10011450:	840b3304 	addi	r16,r16,11468
10011454:	e0bffa17 	ldw	r2,-24(fp)
10011458:	1009883a 	mov	r4,r2
1001145c:	01400304 	movi	r5,12
10011460:	0003dd40 	call	10003dd4 <__mulsi3>
10011464:	8085883a 	add	r2,r16,r2
10011468:	10800104 	addi	r2,r2,4
1001146c:	10c00017 	ldw	r3,0(r2)
10011470:	e0bffb17 	ldw	r2,-20(fp)
10011474:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011478:	04040074 	movhi	r16,4097
1001147c:	840b3304 	addi	r16,r16,11468
10011480:	e0bffa17 	ldw	r2,-24(fp)
10011484:	1009883a 	mov	r4,r2
10011488:	01400304 	movi	r5,12
1001148c:	0003dd40 	call	10003dd4 <__mulsi3>
10011490:	8085883a 	add	r2,r16,r2
10011494:	10800204 	addi	r2,r2,8
10011498:	10c00017 	ldw	r3,0(r2)
1001149c:	e0bffb17 	ldw	r2,-20(fp)
100114a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100114a4:	e13ffa17 	ldw	r4,-24(fp)
100114a8:	00100700 	call	10010070 <alt_release_fd>
  }
} 
100114ac:	e6ffff04 	addi	sp,fp,-4
100114b0:	dfc00217 	ldw	ra,8(sp)
100114b4:	df000117 	ldw	fp,4(sp)
100114b8:	dc000017 	ldw	r16,0(sp)
100114bc:	dec00304 	addi	sp,sp,12
100114c0:	f800283a 	ret

100114c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100114c4:	defffb04 	addi	sp,sp,-20
100114c8:	dfc00415 	stw	ra,16(sp)
100114cc:	df000315 	stw	fp,12(sp)
100114d0:	df000304 	addi	fp,sp,12
100114d4:	e13ffd15 	stw	r4,-12(fp)
100114d8:	e17ffe15 	stw	r5,-8(fp)
100114dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100114e0:	01040074 	movhi	r4,4097
100114e4:	210b3604 	addi	r4,r4,11480
100114e8:	e17ffd17 	ldw	r5,-12(fp)
100114ec:	01800044 	movi	r6,1
100114f0:	01c07fc4 	movi	r7,511
100114f4:	00113e40 	call	100113e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100114f8:	01040074 	movhi	r4,4097
100114fc:	210b3304 	addi	r4,r4,11468
10011500:	e17ffe17 	ldw	r5,-8(fp)
10011504:	000d883a 	mov	r6,zero
10011508:	01c07fc4 	movi	r7,511
1001150c:	00113e40 	call	100113e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011510:	01040074 	movhi	r4,4097
10011514:	210b3904 	addi	r4,r4,11492
10011518:	e17fff17 	ldw	r5,-4(fp)
1001151c:	01800044 	movi	r6,1
10011520:	01c07fc4 	movi	r7,511
10011524:	00113e40 	call	100113e4 <alt_open_fd>
}  
10011528:	e037883a 	mov	sp,fp
1001152c:	dfc00117 	ldw	ra,4(sp)
10011530:	df000017 	ldw	fp,0(sp)
10011534:	dec00204 	addi	sp,sp,8
10011538:	f800283a 	ret

1001153c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001153c:	defffe04 	addi	sp,sp,-8
10011540:	dfc00115 	stw	ra,4(sp)
10011544:	df000015 	stw	fp,0(sp)
10011548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001154c:	00840074 	movhi	r2,4097
10011550:	108fb704 	addi	r2,r2,16092
10011554:	10800017 	ldw	r2,0(r2)
10011558:	10000526 	beq	r2,zero,10011570 <alt_get_errno+0x34>
1001155c:	00840074 	movhi	r2,4097
10011560:	108fb704 	addi	r2,r2,16092
10011564:	10800017 	ldw	r2,0(r2)
10011568:	103ee83a 	callr	r2
1001156c:	00000206 	br	10011578 <alt_get_errno+0x3c>
10011570:	00840074 	movhi	r2,4097
10011574:	10967e04 	addi	r2,r2,23032
}
10011578:	e037883a 	mov	sp,fp
1001157c:	dfc00117 	ldw	ra,4(sp)
10011580:	df000017 	ldw	fp,0(sp)
10011584:	dec00204 	addi	sp,sp,8
10011588:	f800283a 	ret

1001158c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001158c:	defffb04 	addi	sp,sp,-20
10011590:	dfc00415 	stw	ra,16(sp)
10011594:	df000315 	stw	fp,12(sp)
10011598:	dc000215 	stw	r16,8(sp)
1001159c:	df000304 	addi	fp,sp,12
100115a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100115a4:	e0bffe17 	ldw	r2,-8(fp)
100115a8:	10800217 	ldw	r2,8(r2)
100115ac:	10d00034 	orhi	r3,r2,16384
100115b0:	e0bffe17 	ldw	r2,-8(fp)
100115b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100115b8:	e03ffd15 	stw	zero,-12(fp)
100115bc:	00002306 	br	1001164c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100115c0:	04040074 	movhi	r16,4097
100115c4:	840b3304 	addi	r16,r16,11468
100115c8:	e0bffd17 	ldw	r2,-12(fp)
100115cc:	1009883a 	mov	r4,r2
100115d0:	01400304 	movi	r5,12
100115d4:	0003dd40 	call	10003dd4 <__mulsi3>
100115d8:	8085883a 	add	r2,r16,r2
100115dc:	10c00017 	ldw	r3,0(r2)
100115e0:	e0bffe17 	ldw	r2,-8(fp)
100115e4:	10800017 	ldw	r2,0(r2)
100115e8:	1880151e 	bne	r3,r2,10011640 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100115ec:	04040074 	movhi	r16,4097
100115f0:	840b3304 	addi	r16,r16,11468
100115f4:	e0bffd17 	ldw	r2,-12(fp)
100115f8:	1009883a 	mov	r4,r2
100115fc:	01400304 	movi	r5,12
10011600:	0003dd40 	call	10003dd4 <__mulsi3>
10011604:	8085883a 	add	r2,r16,r2
10011608:	10800204 	addi	r2,r2,8
1001160c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011610:	10000b0e 	bge	r2,zero,10011640 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011614:	e13ffd17 	ldw	r4,-12(fp)
10011618:	01400304 	movi	r5,12
1001161c:	0003dd40 	call	10003dd4 <__mulsi3>
10011620:	1007883a 	mov	r3,r2
10011624:	00840074 	movhi	r2,4097
10011628:	108b3304 	addi	r2,r2,11468
1001162c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011630:	e0bffe17 	ldw	r2,-8(fp)
10011634:	18800226 	beq	r3,r2,10011640 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011638:	00bffcc4 	movi	r2,-13
1001163c:	00000a06 	br	10011668 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011640:	e0bffd17 	ldw	r2,-12(fp)
10011644:	10800044 	addi	r2,r2,1
10011648:	e0bffd15 	stw	r2,-12(fp)
1001164c:	00840074 	movhi	r2,4097
10011650:	108fb604 	addi	r2,r2,16088
10011654:	10800017 	ldw	r2,0(r2)
10011658:	1007883a 	mov	r3,r2
1001165c:	e0bffd17 	ldw	r2,-12(fp)
10011660:	18bfd72e 	bgeu	r3,r2,100115c0 <__alt_data_end+0xf80115c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011664:	0005883a 	mov	r2,zero
}
10011668:	e6ffff04 	addi	sp,fp,-4
1001166c:	dfc00217 	ldw	ra,8(sp)
10011670:	df000117 	ldw	fp,4(sp)
10011674:	dc000017 	ldw	r16,0(sp)
10011678:	dec00304 	addi	sp,sp,12
1001167c:	f800283a 	ret

10011680 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011680:	defff604 	addi	sp,sp,-40
10011684:	dfc00915 	stw	ra,36(sp)
10011688:	df000815 	stw	fp,32(sp)
1001168c:	df000804 	addi	fp,sp,32
10011690:	e13ffd15 	stw	r4,-12(fp)
10011694:	e17ffe15 	stw	r5,-8(fp)
10011698:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001169c:	00bfffc4 	movi	r2,-1
100116a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100116a4:	00bffb44 	movi	r2,-19
100116a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100116ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100116b0:	e13ffd17 	ldw	r4,-12(fp)
100116b4:	01440074 	movhi	r5,4097
100116b8:	294fb404 	addi	r5,r5,16080
100116bc:	001199c0 	call	1001199c <alt_find_dev>
100116c0:	e0bff815 	stw	r2,-32(fp)
100116c4:	e0bff817 	ldw	r2,-32(fp)
100116c8:	1000051e 	bne	r2,zero,100116e0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100116cc:	e13ffd17 	ldw	r4,-12(fp)
100116d0:	0011a2c0 	call	10011a2c <alt_find_file>
100116d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100116d8:	00800044 	movi	r2,1
100116dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100116e0:	e0bff817 	ldw	r2,-32(fp)
100116e4:	10002b26 	beq	r2,zero,10011794 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
100116e8:	e13ff817 	ldw	r4,-32(fp)
100116ec:	0011b400 	call	10011b40 <alt_get_fd>
100116f0:	e0bff915 	stw	r2,-28(fp)
100116f4:	e0bff917 	ldw	r2,-28(fp)
100116f8:	1000030e 	bge	r2,zero,10011708 <open+0x88>
    {
      status = index;
100116fc:	e0bff917 	ldw	r2,-28(fp)
10011700:	e0bffa15 	stw	r2,-24(fp)
10011704:	00002506 	br	1001179c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011708:	e13ff917 	ldw	r4,-28(fp)
1001170c:	01400304 	movi	r5,12
10011710:	0003dd40 	call	10003dd4 <__mulsi3>
10011714:	1007883a 	mov	r3,r2
10011718:	00840074 	movhi	r2,4097
1001171c:	108b3304 	addi	r2,r2,11468
10011720:	1885883a 	add	r2,r3,r2
10011724:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011728:	e0fffe17 	ldw	r3,-8(fp)
1001172c:	00900034 	movhi	r2,16384
10011730:	10bfffc4 	addi	r2,r2,-1
10011734:	1886703a 	and	r3,r3,r2
10011738:	e0bffc17 	ldw	r2,-16(fp)
1001173c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011740:	e0bffb17 	ldw	r2,-20(fp)
10011744:	1000051e 	bne	r2,zero,1001175c <open+0xdc>
10011748:	e13ffc17 	ldw	r4,-16(fp)
1001174c:	001158c0 	call	1001158c <alt_file_locked>
10011750:	e0bffa15 	stw	r2,-24(fp)
10011754:	e0bffa17 	ldw	r2,-24(fp)
10011758:	10001016 	blt	r2,zero,1001179c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1001175c:	e0bff817 	ldw	r2,-32(fp)
10011760:	10800317 	ldw	r2,12(r2)
10011764:	10000826 	beq	r2,zero,10011788 <open+0x108>
10011768:	e0bff817 	ldw	r2,-32(fp)
1001176c:	10800317 	ldw	r2,12(r2)
10011770:	e13ffc17 	ldw	r4,-16(fp)
10011774:	e17ffd17 	ldw	r5,-12(fp)
10011778:	e1bffe17 	ldw	r6,-8(fp)
1001177c:	e1ffff17 	ldw	r7,-4(fp)
10011780:	103ee83a 	callr	r2
10011784:	00000106 	br	1001178c <open+0x10c>
10011788:	0005883a 	mov	r2,zero
1001178c:	e0bffa15 	stw	r2,-24(fp)
10011790:	00000206 	br	1001179c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011794:	00bffb44 	movi	r2,-19
10011798:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001179c:	e0bffa17 	ldw	r2,-24(fp)
100117a0:	1000090e 	bge	r2,zero,100117c8 <open+0x148>
  {
    alt_release_fd (index);  
100117a4:	e13ff917 	ldw	r4,-28(fp)
100117a8:	00100700 	call	10010070 <alt_release_fd>
    ALT_ERRNO = -status;
100117ac:	001153c0 	call	1001153c <alt_get_errno>
100117b0:	1007883a 	mov	r3,r2
100117b4:	e0bffa17 	ldw	r2,-24(fp)
100117b8:	0085c83a 	sub	r2,zero,r2
100117bc:	18800015 	stw	r2,0(r3)
    return -1;
100117c0:	00bfffc4 	movi	r2,-1
100117c4:	00000106 	br	100117cc <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
100117c8:	e0bff917 	ldw	r2,-28(fp)
}
100117cc:	e037883a 	mov	sp,fp
100117d0:	dfc00117 	ldw	ra,4(sp)
100117d4:	df000017 	ldw	fp,0(sp)
100117d8:	dec00204 	addi	sp,sp,8
100117dc:	f800283a 	ret

100117e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100117e0:	defffa04 	addi	sp,sp,-24
100117e4:	df000515 	stw	fp,20(sp)
100117e8:	df000504 	addi	fp,sp,20
100117ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100117f0:	0005303a 	rdctl	r2,status
100117f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100117f8:	e0fffc17 	ldw	r3,-16(fp)
100117fc:	00bfff84 	movi	r2,-2
10011800:	1884703a 	and	r2,r3,r2
10011804:	1001703a 	wrctl	status,r2
  
  return context;
10011808:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001180c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011810:	e0bfff17 	ldw	r2,-4(fp)
10011814:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011818:	e0bffd17 	ldw	r2,-12(fp)
1001181c:	10800017 	ldw	r2,0(r2)
10011820:	e0fffd17 	ldw	r3,-12(fp)
10011824:	18c00117 	ldw	r3,4(r3)
10011828:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001182c:	e0bffd17 	ldw	r2,-12(fp)
10011830:	10800117 	ldw	r2,4(r2)
10011834:	e0fffd17 	ldw	r3,-12(fp)
10011838:	18c00017 	ldw	r3,0(r3)
1001183c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011840:	e0bffd17 	ldw	r2,-12(fp)
10011844:	e0fffd17 	ldw	r3,-12(fp)
10011848:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001184c:	e0bffd17 	ldw	r2,-12(fp)
10011850:	e0fffd17 	ldw	r3,-12(fp)
10011854:	10c00015 	stw	r3,0(r2)
10011858:	e0bffb17 	ldw	r2,-20(fp)
1001185c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011860:	e0bffe17 	ldw	r2,-8(fp)
10011864:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011868:	e037883a 	mov	sp,fp
1001186c:	df000017 	ldw	fp,0(sp)
10011870:	dec00104 	addi	sp,sp,4
10011874:	f800283a 	ret

10011878 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011878:	defffb04 	addi	sp,sp,-20
1001187c:	dfc00415 	stw	ra,16(sp)
10011880:	df000315 	stw	fp,12(sp)
10011884:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011888:	d0a00f17 	ldw	r2,-32708(gp)
1001188c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011890:	d0a6d917 	ldw	r2,-25756(gp)
10011894:	10800044 	addi	r2,r2,1
10011898:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001189c:	00002e06 	br	10011958 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100118a0:	e0bffd17 	ldw	r2,-12(fp)
100118a4:	10800017 	ldw	r2,0(r2)
100118a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100118ac:	e0bffd17 	ldw	r2,-12(fp)
100118b0:	10800403 	ldbu	r2,16(r2)
100118b4:	10803fcc 	andi	r2,r2,255
100118b8:	10000426 	beq	r2,zero,100118cc <alt_tick+0x54>
100118bc:	d0a6d917 	ldw	r2,-25756(gp)
100118c0:	1000021e 	bne	r2,zero,100118cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
100118c4:	e0bffd17 	ldw	r2,-12(fp)
100118c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100118cc:	e0bffd17 	ldw	r2,-12(fp)
100118d0:	10800217 	ldw	r2,8(r2)
100118d4:	d0e6d917 	ldw	r3,-25756(gp)
100118d8:	18801d36 	bltu	r3,r2,10011950 <alt_tick+0xd8>
100118dc:	e0bffd17 	ldw	r2,-12(fp)
100118e0:	10800403 	ldbu	r2,16(r2)
100118e4:	10803fcc 	andi	r2,r2,255
100118e8:	1000191e 	bne	r2,zero,10011950 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100118ec:	e0bffd17 	ldw	r2,-12(fp)
100118f0:	10800317 	ldw	r2,12(r2)
100118f4:	e0fffd17 	ldw	r3,-12(fp)
100118f8:	18c00517 	ldw	r3,20(r3)
100118fc:	1809883a 	mov	r4,r3
10011900:	103ee83a 	callr	r2
10011904:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011908:	e0bfff17 	ldw	r2,-4(fp)
1001190c:	1000031e 	bne	r2,zero,1001191c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011910:	e13ffd17 	ldw	r4,-12(fp)
10011914:	00117e00 	call	100117e0 <alt_alarm_stop>
10011918:	00000d06 	br	10011950 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001191c:	e0bffd17 	ldw	r2,-12(fp)
10011920:	10c00217 	ldw	r3,8(r2)
10011924:	e0bfff17 	ldw	r2,-4(fp)
10011928:	1887883a 	add	r3,r3,r2
1001192c:	e0bffd17 	ldw	r2,-12(fp)
10011930:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011934:	e0bffd17 	ldw	r2,-12(fp)
10011938:	10c00217 	ldw	r3,8(r2)
1001193c:	d0a6d917 	ldw	r2,-25756(gp)
10011940:	1880032e 	bgeu	r3,r2,10011950 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011944:	e0bffd17 	ldw	r2,-12(fp)
10011948:	00c00044 	movi	r3,1
1001194c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011950:	e0bffe17 	ldw	r2,-8(fp)
10011954:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011958:	e0fffd17 	ldw	r3,-12(fp)
1001195c:	d0a00f04 	addi	r2,gp,-32708
10011960:	18bfcf1e 	bne	r3,r2,100118a0 <__alt_data_end+0xf80118a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011964:	0001883a 	nop
}
10011968:	e037883a 	mov	sp,fp
1001196c:	dfc00117 	ldw	ra,4(sp)
10011970:	df000017 	ldw	fp,0(sp)
10011974:	dec00204 	addi	sp,sp,8
10011978:	f800283a 	ret

1001197c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1001197c:	deffff04 	addi	sp,sp,-4
10011980:	df000015 	stw	fp,0(sp)
10011984:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011988:	000170fa 	wrctl	ienable,zero
}
1001198c:	e037883a 	mov	sp,fp
10011990:	df000017 	ldw	fp,0(sp)
10011994:	dec00104 	addi	sp,sp,4
10011998:	f800283a 	ret

1001199c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001199c:	defffa04 	addi	sp,sp,-24
100119a0:	dfc00515 	stw	ra,20(sp)
100119a4:	df000415 	stw	fp,16(sp)
100119a8:	df000404 	addi	fp,sp,16
100119ac:	e13ffe15 	stw	r4,-8(fp)
100119b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100119b4:	e0bfff17 	ldw	r2,-4(fp)
100119b8:	10800017 	ldw	r2,0(r2)
100119bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100119c0:	e13ffe17 	ldw	r4,-8(fp)
100119c4:	000ce1c0 	call	1000ce1c <strlen>
100119c8:	10800044 	addi	r2,r2,1
100119cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100119d0:	00000d06 	br	10011a08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100119d4:	e0bffc17 	ldw	r2,-16(fp)
100119d8:	10c00217 	ldw	r3,8(r2)
100119dc:	e0bffd17 	ldw	r2,-12(fp)
100119e0:	1809883a 	mov	r4,r3
100119e4:	e17ffe17 	ldw	r5,-8(fp)
100119e8:	100d883a 	mov	r6,r2
100119ec:	0011cfc0 	call	10011cfc <memcmp>
100119f0:	1000021e 	bne	r2,zero,100119fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100119f4:	e0bffc17 	ldw	r2,-16(fp)
100119f8:	00000706 	br	10011a18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100119fc:	e0bffc17 	ldw	r2,-16(fp)
10011a00:	10800017 	ldw	r2,0(r2)
10011a04:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011a08:	e0fffc17 	ldw	r3,-16(fp)
10011a0c:	e0bfff17 	ldw	r2,-4(fp)
10011a10:	18bff01e 	bne	r3,r2,100119d4 <__alt_data_end+0xf80119d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011a14:	0005883a 	mov	r2,zero
}
10011a18:	e037883a 	mov	sp,fp
10011a1c:	dfc00117 	ldw	ra,4(sp)
10011a20:	df000017 	ldw	fp,0(sp)
10011a24:	dec00204 	addi	sp,sp,8
10011a28:	f800283a 	ret

10011a2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011a2c:	defffb04 	addi	sp,sp,-20
10011a30:	dfc00415 	stw	ra,16(sp)
10011a34:	df000315 	stw	fp,12(sp)
10011a38:	df000304 	addi	fp,sp,12
10011a3c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011a40:	00840074 	movhi	r2,4097
10011a44:	108fb204 	addi	r2,r2,16072
10011a48:	10800017 	ldw	r2,0(r2)
10011a4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011a50:	00003106 	br	10011b18 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10011a54:	e0bffd17 	ldw	r2,-12(fp)
10011a58:	10800217 	ldw	r2,8(r2)
10011a5c:	1009883a 	mov	r4,r2
10011a60:	000ce1c0 	call	1000ce1c <strlen>
10011a64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011a68:	e0bffd17 	ldw	r2,-12(fp)
10011a6c:	10c00217 	ldw	r3,8(r2)
10011a70:	e0bffe17 	ldw	r2,-8(fp)
10011a74:	10bfffc4 	addi	r2,r2,-1
10011a78:	1885883a 	add	r2,r3,r2
10011a7c:	10800003 	ldbu	r2,0(r2)
10011a80:	10803fcc 	andi	r2,r2,255
10011a84:	1080201c 	xori	r2,r2,128
10011a88:	10bfe004 	addi	r2,r2,-128
10011a8c:	10800bd8 	cmpnei	r2,r2,47
10011a90:	1000031e 	bne	r2,zero,10011aa0 <alt_find_file+0x74>
    {
      len -= 1;
10011a94:	e0bffe17 	ldw	r2,-8(fp)
10011a98:	10bfffc4 	addi	r2,r2,-1
10011a9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011aa0:	e0bffe17 	ldw	r2,-8(fp)
10011aa4:	e0ffff17 	ldw	r3,-4(fp)
10011aa8:	1885883a 	add	r2,r3,r2
10011aac:	10800003 	ldbu	r2,0(r2)
10011ab0:	10803fcc 	andi	r2,r2,255
10011ab4:	1080201c 	xori	r2,r2,128
10011ab8:	10bfe004 	addi	r2,r2,-128
10011abc:	10800be0 	cmpeqi	r2,r2,47
10011ac0:	1000081e 	bne	r2,zero,10011ae4 <alt_find_file+0xb8>
10011ac4:	e0bffe17 	ldw	r2,-8(fp)
10011ac8:	e0ffff17 	ldw	r3,-4(fp)
10011acc:	1885883a 	add	r2,r3,r2
10011ad0:	10800003 	ldbu	r2,0(r2)
10011ad4:	10803fcc 	andi	r2,r2,255
10011ad8:	1080201c 	xori	r2,r2,128
10011adc:	10bfe004 	addi	r2,r2,-128
10011ae0:	10000a1e 	bne	r2,zero,10011b0c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011ae4:	e0bffd17 	ldw	r2,-12(fp)
10011ae8:	10c00217 	ldw	r3,8(r2)
10011aec:	e0bffe17 	ldw	r2,-8(fp)
10011af0:	1809883a 	mov	r4,r3
10011af4:	e17fff17 	ldw	r5,-4(fp)
10011af8:	100d883a 	mov	r6,r2
10011afc:	0011cfc0 	call	10011cfc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011b00:	1000021e 	bne	r2,zero,10011b0c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011b04:	e0bffd17 	ldw	r2,-12(fp)
10011b08:	00000806 	br	10011b2c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10011b0c:	e0bffd17 	ldw	r2,-12(fp)
10011b10:	10800017 	ldw	r2,0(r2)
10011b14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011b18:	e0fffd17 	ldw	r3,-12(fp)
10011b1c:	00840074 	movhi	r2,4097
10011b20:	108fb204 	addi	r2,r2,16072
10011b24:	18bfcb1e 	bne	r3,r2,10011a54 <__alt_data_end+0xf8011a54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011b28:	0005883a 	mov	r2,zero
}
10011b2c:	e037883a 	mov	sp,fp
10011b30:	dfc00117 	ldw	ra,4(sp)
10011b34:	df000017 	ldw	fp,0(sp)
10011b38:	dec00204 	addi	sp,sp,8
10011b3c:	f800283a 	ret

10011b40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011b40:	defffa04 	addi	sp,sp,-24
10011b44:	dfc00515 	stw	ra,20(sp)
10011b48:	df000415 	stw	fp,16(sp)
10011b4c:	dc000315 	stw	r16,12(sp)
10011b50:	df000404 	addi	fp,sp,16
10011b54:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011b58:	00bffa04 	movi	r2,-24
10011b5c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011b60:	e03ffc15 	stw	zero,-16(fp)
10011b64:	00002106 	br	10011bec <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10011b68:	04040074 	movhi	r16,4097
10011b6c:	840b3304 	addi	r16,r16,11468
10011b70:	e0bffc17 	ldw	r2,-16(fp)
10011b74:	1009883a 	mov	r4,r2
10011b78:	01400304 	movi	r5,12
10011b7c:	0003dd40 	call	10003dd4 <__mulsi3>
10011b80:	8085883a 	add	r2,r16,r2
10011b84:	10800017 	ldw	r2,0(r2)
10011b88:	1000151e 	bne	r2,zero,10011be0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10011b8c:	04040074 	movhi	r16,4097
10011b90:	840b3304 	addi	r16,r16,11468
10011b94:	e0bffc17 	ldw	r2,-16(fp)
10011b98:	1009883a 	mov	r4,r2
10011b9c:	01400304 	movi	r5,12
10011ba0:	0003dd40 	call	10003dd4 <__mulsi3>
10011ba4:	8085883a 	add	r2,r16,r2
10011ba8:	e0fffe17 	ldw	r3,-8(fp)
10011bac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011bb0:	00840074 	movhi	r2,4097
10011bb4:	108fb604 	addi	r2,r2,16088
10011bb8:	10c00017 	ldw	r3,0(r2)
10011bbc:	e0bffc17 	ldw	r2,-16(fp)
10011bc0:	1880040e 	bge	r3,r2,10011bd4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10011bc4:	00840074 	movhi	r2,4097
10011bc8:	108fb604 	addi	r2,r2,16088
10011bcc:	e0fffc17 	ldw	r3,-16(fp)
10011bd0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10011bd4:	e0bffc17 	ldw	r2,-16(fp)
10011bd8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011bdc:	00000606 	br	10011bf8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011be0:	e0bffc17 	ldw	r2,-16(fp)
10011be4:	10800044 	addi	r2,r2,1
10011be8:	e0bffc15 	stw	r2,-16(fp)
10011bec:	e0bffc17 	ldw	r2,-16(fp)
10011bf0:	10800810 	cmplti	r2,r2,32
10011bf4:	103fdc1e 	bne	r2,zero,10011b68 <__alt_data_end+0xf8011b68>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011bf8:	e0bffd17 	ldw	r2,-12(fp)
}
10011bfc:	e6ffff04 	addi	sp,fp,-4
10011c00:	dfc00217 	ldw	ra,8(sp)
10011c04:	df000117 	ldw	fp,4(sp)
10011c08:	dc000017 	ldw	r16,0(sp)
10011c0c:	dec00304 	addi	sp,sp,12
10011c10:	f800283a 	ret

10011c14 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011c14:	defffe04 	addi	sp,sp,-8
10011c18:	df000115 	stw	fp,4(sp)
10011c1c:	df000104 	addi	fp,sp,4
10011c20:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011c24:	e0bfff17 	ldw	r2,-4(fp)
10011c28:	10bffe84 	addi	r2,r2,-6
10011c2c:	10c00428 	cmpgeui	r3,r2,16
10011c30:	18001a1e 	bne	r3,zero,10011c9c <alt_exception_cause_generated_bad_addr+0x88>
10011c34:	100690ba 	slli	r3,r2,2
10011c38:	00840074 	movhi	r2,4097
10011c3c:	10871304 	addi	r2,r2,7244
10011c40:	1885883a 	add	r2,r3,r2
10011c44:	10800017 	ldw	r2,0(r2)
10011c48:	1000683a 	jmp	r2
10011c4c:	10011c8c 	andi	zero,r2,1138
10011c50:	10011c8c 	andi	zero,r2,1138
10011c54:	10011c9c 	xori	zero,r2,1138
10011c58:	10011c9c 	xori	zero,r2,1138
10011c5c:	10011c9c 	xori	zero,r2,1138
10011c60:	10011c8c 	andi	zero,r2,1138
10011c64:	10011c94 	ori	zero,r2,1138
10011c68:	10011c9c 	xori	zero,r2,1138
10011c6c:	10011c8c 	andi	zero,r2,1138
10011c70:	10011c8c 	andi	zero,r2,1138
10011c74:	10011c9c 	xori	zero,r2,1138
10011c78:	10011c8c 	andi	zero,r2,1138
10011c7c:	10011c94 	ori	zero,r2,1138
10011c80:	10011c9c 	xori	zero,r2,1138
10011c84:	10011c9c 	xori	zero,r2,1138
10011c88:	10011c8c 	andi	zero,r2,1138
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011c8c:	00800044 	movi	r2,1
10011c90:	00000306 	br	10011ca0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011c94:	0005883a 	mov	r2,zero
10011c98:	00000106 	br	10011ca0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011c9c:	0005883a 	mov	r2,zero
  }
}
10011ca0:	e037883a 	mov	sp,fp
10011ca4:	df000017 	ldw	fp,0(sp)
10011ca8:	dec00104 	addi	sp,sp,4
10011cac:	f800283a 	ret

10011cb0 <atexit>:
10011cb0:	200b883a 	mov	r5,r4
10011cb4:	000d883a 	mov	r6,zero
10011cb8:	0009883a 	mov	r4,zero
10011cbc:	000f883a 	mov	r7,zero
10011cc0:	0011d781 	jmpi	10011d78 <__register_exitproc>

10011cc4 <exit>:
10011cc4:	defffe04 	addi	sp,sp,-8
10011cc8:	000b883a 	mov	r5,zero
10011ccc:	dc000015 	stw	r16,0(sp)
10011cd0:	dfc00115 	stw	ra,4(sp)
10011cd4:	2021883a 	mov	r16,r4
10011cd8:	0011e8c0 	call	10011e8c <__call_exitprocs>
10011cdc:	00840074 	movhi	r2,4097
10011ce0:	108fac04 	addi	r2,r2,16048
10011ce4:	11000017 	ldw	r4,0(r2)
10011ce8:	20800f17 	ldw	r2,60(r4)
10011cec:	10000126 	beq	r2,zero,10011cf4 <exit+0x30>
10011cf0:	103ee83a 	callr	r2
10011cf4:	8009883a 	mov	r4,r16
10011cf8:	00120200 	call	10012020 <_exit>

10011cfc <memcmp>:
10011cfc:	01c000c4 	movi	r7,3
10011d00:	3980192e 	bgeu	r7,r6,10011d68 <memcmp+0x6c>
10011d04:	2144b03a 	or	r2,r4,r5
10011d08:	11c4703a 	and	r2,r2,r7
10011d0c:	10000f26 	beq	r2,zero,10011d4c <memcmp+0x50>
10011d10:	20800003 	ldbu	r2,0(r4)
10011d14:	28c00003 	ldbu	r3,0(r5)
10011d18:	10c0151e 	bne	r2,r3,10011d70 <memcmp+0x74>
10011d1c:	31bfff84 	addi	r6,r6,-2
10011d20:	01ffffc4 	movi	r7,-1
10011d24:	00000406 	br	10011d38 <memcmp+0x3c>
10011d28:	20800003 	ldbu	r2,0(r4)
10011d2c:	28c00003 	ldbu	r3,0(r5)
10011d30:	31bfffc4 	addi	r6,r6,-1
10011d34:	10c00e1e 	bne	r2,r3,10011d70 <memcmp+0x74>
10011d38:	21000044 	addi	r4,r4,1
10011d3c:	29400044 	addi	r5,r5,1
10011d40:	31fff91e 	bne	r6,r7,10011d28 <__alt_data_end+0xf8011d28>
10011d44:	0005883a 	mov	r2,zero
10011d48:	f800283a 	ret
10011d4c:	20c00017 	ldw	r3,0(r4)
10011d50:	28800017 	ldw	r2,0(r5)
10011d54:	1880041e 	bne	r3,r2,10011d68 <memcmp+0x6c>
10011d58:	31bfff04 	addi	r6,r6,-4
10011d5c:	21000104 	addi	r4,r4,4
10011d60:	29400104 	addi	r5,r5,4
10011d64:	39bff936 	bltu	r7,r6,10011d4c <__alt_data_end+0xf8011d4c>
10011d68:	303fe91e 	bne	r6,zero,10011d10 <__alt_data_end+0xf8011d10>
10011d6c:	003ff506 	br	10011d44 <__alt_data_end+0xf8011d44>
10011d70:	10c5c83a 	sub	r2,r2,r3
10011d74:	f800283a 	ret

10011d78 <__register_exitproc>:
10011d78:	00840074 	movhi	r2,4097
10011d7c:	defffa04 	addi	sp,sp,-24
10011d80:	108fac04 	addi	r2,r2,16048
10011d84:	dc000315 	stw	r16,12(sp)
10011d88:	14000017 	ldw	r16,0(r2)
10011d8c:	dc400415 	stw	r17,16(sp)
10011d90:	dfc00515 	stw	ra,20(sp)
10011d94:	80805217 	ldw	r2,328(r16)
10011d98:	2023883a 	mov	r17,r4
10011d9c:	10003626 	beq	r2,zero,10011e78 <__register_exitproc+0x100>
10011da0:	10c00117 	ldw	r3,4(r2)
10011da4:	010007c4 	movi	r4,31
10011da8:	20c00e16 	blt	r4,r3,10011de4 <__register_exitproc+0x6c>
10011dac:	1a400044 	addi	r9,r3,1
10011db0:	8800211e 	bne	r17,zero,10011e38 <__register_exitproc+0xc0>
10011db4:	18c00084 	addi	r3,r3,2
10011db8:	18c7883a 	add	r3,r3,r3
10011dbc:	18c7883a 	add	r3,r3,r3
10011dc0:	12400115 	stw	r9,4(r2)
10011dc4:	10c7883a 	add	r3,r2,r3
10011dc8:	19400015 	stw	r5,0(r3)
10011dcc:	0005883a 	mov	r2,zero
10011dd0:	dfc00517 	ldw	ra,20(sp)
10011dd4:	dc400417 	ldw	r17,16(sp)
10011dd8:	dc000317 	ldw	r16,12(sp)
10011ddc:	dec00604 	addi	sp,sp,24
10011de0:	f800283a 	ret
10011de4:	00800034 	movhi	r2,0
10011de8:	10800004 	addi	r2,r2,0
10011dec:	10002526 	beq	r2,zero,10011e84 <__register_exitproc+0x10c>
10011df0:	01006404 	movi	r4,400
10011df4:	d9400015 	stw	r5,0(sp)
10011df8:	d9800115 	stw	r6,4(sp)
10011dfc:	d9c00215 	stw	r7,8(sp)
10011e00:	00000000 	call	10000000 <__alt_mem_sdram>
10011e04:	d9400017 	ldw	r5,0(sp)
10011e08:	d9800117 	ldw	r6,4(sp)
10011e0c:	d9c00217 	ldw	r7,8(sp)
10011e10:	10001c26 	beq	r2,zero,10011e84 <__register_exitproc+0x10c>
10011e14:	80c05217 	ldw	r3,328(r16)
10011e18:	10000115 	stw	zero,4(r2)
10011e1c:	02400044 	movi	r9,1
10011e20:	10c00015 	stw	r3,0(r2)
10011e24:	80805215 	stw	r2,328(r16)
10011e28:	10006215 	stw	zero,392(r2)
10011e2c:	10006315 	stw	zero,396(r2)
10011e30:	0007883a 	mov	r3,zero
10011e34:	883fdf26 	beq	r17,zero,10011db4 <__alt_data_end+0xf8011db4>
10011e38:	18d1883a 	add	r8,r3,r3
10011e3c:	4211883a 	add	r8,r8,r8
10011e40:	1211883a 	add	r8,r2,r8
10011e44:	41802215 	stw	r6,136(r8)
10011e48:	01000044 	movi	r4,1
10011e4c:	11806217 	ldw	r6,392(r2)
10011e50:	20c8983a 	sll	r4,r4,r3
10011e54:	310cb03a 	or	r6,r6,r4
10011e58:	11806215 	stw	r6,392(r2)
10011e5c:	41c04215 	stw	r7,264(r8)
10011e60:	01800084 	movi	r6,2
10011e64:	89bfd31e 	bne	r17,r6,10011db4 <__alt_data_end+0xf8011db4>
10011e68:	11806317 	ldw	r6,396(r2)
10011e6c:	3108b03a 	or	r4,r6,r4
10011e70:	11006315 	stw	r4,396(r2)
10011e74:	003fcf06 	br	10011db4 <__alt_data_end+0xf8011db4>
10011e78:	80805304 	addi	r2,r16,332
10011e7c:	80805215 	stw	r2,328(r16)
10011e80:	003fc706 	br	10011da0 <__alt_data_end+0xf8011da0>
10011e84:	00bfffc4 	movi	r2,-1
10011e88:	003fd106 	br	10011dd0 <__alt_data_end+0xf8011dd0>

10011e8c <__call_exitprocs>:
10011e8c:	00840074 	movhi	r2,4097
10011e90:	108fac04 	addi	r2,r2,16048
10011e94:	10800017 	ldw	r2,0(r2)
10011e98:	defff404 	addi	sp,sp,-48
10011e9c:	dd800815 	stw	r22,32(sp)
10011ea0:	d8800015 	stw	r2,0(sp)
10011ea4:	10805204 	addi	r2,r2,328
10011ea8:	dd000615 	stw	r20,24(sp)
10011eac:	dc800415 	stw	r18,16(sp)
10011eb0:	dfc00b15 	stw	ra,44(sp)
10011eb4:	df000a15 	stw	fp,40(sp)
10011eb8:	ddc00915 	stw	r23,36(sp)
10011ebc:	dd400715 	stw	r21,28(sp)
10011ec0:	dcc00515 	stw	r19,20(sp)
10011ec4:	dc400315 	stw	r17,12(sp)
10011ec8:	dc000215 	stw	r16,8(sp)
10011ecc:	2025883a 	mov	r18,r4
10011ed0:	2829883a 	mov	r20,r5
10011ed4:	d8800115 	stw	r2,4(sp)
10011ed8:	05bfffc4 	movi	r22,-1
10011edc:	d8800017 	ldw	r2,0(sp)
10011ee0:	14c05217 	ldw	r19,328(r2)
10011ee4:	98001d26 	beq	r19,zero,10011f5c <__call_exitprocs+0xd0>
10011ee8:	dd400117 	ldw	r21,4(sp)
10011eec:	98800117 	ldw	r2,4(r19)
10011ef0:	173fffc4 	addi	fp,r2,-1
10011ef4:	e0000d16 	blt	fp,zero,10011f2c <__call_exitprocs+0xa0>
10011ef8:	14000044 	addi	r16,r2,1
10011efc:	8421883a 	add	r16,r16,r16
10011f00:	8421883a 	add	r16,r16,r16
10011f04:	84402004 	addi	r17,r16,128
10011f08:	9c63883a 	add	r17,r19,r17
10011f0c:	9c21883a 	add	r16,r19,r16
10011f10:	a0001e26 	beq	r20,zero,10011f8c <__call_exitprocs+0x100>
10011f14:	80804017 	ldw	r2,256(r16)
10011f18:	15001c26 	beq	r2,r20,10011f8c <__call_exitprocs+0x100>
10011f1c:	e73fffc4 	addi	fp,fp,-1
10011f20:	843fff04 	addi	r16,r16,-4
10011f24:	8c7fff04 	addi	r17,r17,-4
10011f28:	e5bff91e 	bne	fp,r22,10011f10 <__alt_data_end+0xf8011f10>
10011f2c:	00800034 	movhi	r2,0
10011f30:	10800004 	addi	r2,r2,0
10011f34:	10000926 	beq	r2,zero,10011f5c <__call_exitprocs+0xd0>
10011f38:	98800117 	ldw	r2,4(r19)
10011f3c:	1000311e 	bne	r2,zero,10012004 <__call_exitprocs+0x178>
10011f40:	98800017 	ldw	r2,0(r19)
10011f44:	10003426 	beq	r2,zero,10012018 <__call_exitprocs+0x18c>
10011f48:	9809883a 	mov	r4,r19
10011f4c:	a8800015 	stw	r2,0(r21)
10011f50:	00000000 	call	10000000 <__alt_mem_sdram>
10011f54:	acc00017 	ldw	r19,0(r21)
10011f58:	983fe41e 	bne	r19,zero,10011eec <__alt_data_end+0xf8011eec>
10011f5c:	dfc00b17 	ldw	ra,44(sp)
10011f60:	df000a17 	ldw	fp,40(sp)
10011f64:	ddc00917 	ldw	r23,36(sp)
10011f68:	dd800817 	ldw	r22,32(sp)
10011f6c:	dd400717 	ldw	r21,28(sp)
10011f70:	dd000617 	ldw	r20,24(sp)
10011f74:	dcc00517 	ldw	r19,20(sp)
10011f78:	dc800417 	ldw	r18,16(sp)
10011f7c:	dc400317 	ldw	r17,12(sp)
10011f80:	dc000217 	ldw	r16,8(sp)
10011f84:	dec00c04 	addi	sp,sp,48
10011f88:	f800283a 	ret
10011f8c:	98800117 	ldw	r2,4(r19)
10011f90:	80c00017 	ldw	r3,0(r16)
10011f94:	10bfffc4 	addi	r2,r2,-1
10011f98:	17001526 	beq	r2,fp,10011ff0 <__call_exitprocs+0x164>
10011f9c:	80000015 	stw	zero,0(r16)
10011fa0:	183fde26 	beq	r3,zero,10011f1c <__alt_data_end+0xf8011f1c>
10011fa4:	00800044 	movi	r2,1
10011fa8:	1708983a 	sll	r4,r2,fp
10011fac:	98806217 	ldw	r2,392(r19)
10011fb0:	9dc00117 	ldw	r23,4(r19)
10011fb4:	2084703a 	and	r2,r4,r2
10011fb8:	1000061e 	bne	r2,zero,10011fd4 <__call_exitprocs+0x148>
10011fbc:	183ee83a 	callr	r3
10011fc0:	98800117 	ldw	r2,4(r19)
10011fc4:	15ffc51e 	bne	r2,r23,10011edc <__alt_data_end+0xf8011edc>
10011fc8:	a8800017 	ldw	r2,0(r21)
10011fcc:	14ffd326 	beq	r2,r19,10011f1c <__alt_data_end+0xf8011f1c>
10011fd0:	003fc206 	br	10011edc <__alt_data_end+0xf8011edc>
10011fd4:	98806317 	ldw	r2,396(r19)
10011fd8:	2084703a 	and	r2,r4,r2
10011fdc:	1000061e 	bne	r2,zero,10011ff8 <__call_exitprocs+0x16c>
10011fe0:	89400017 	ldw	r5,0(r17)
10011fe4:	9009883a 	mov	r4,r18
10011fe8:	183ee83a 	callr	r3
10011fec:	003ff406 	br	10011fc0 <__alt_data_end+0xf8011fc0>
10011ff0:	9f000115 	stw	fp,4(r19)
10011ff4:	003fea06 	br	10011fa0 <__alt_data_end+0xf8011fa0>
10011ff8:	89000017 	ldw	r4,0(r17)
10011ffc:	183ee83a 	callr	r3
10012000:	003fef06 	br	10011fc0 <__alt_data_end+0xf8011fc0>
10012004:	98800017 	ldw	r2,0(r19)
10012008:	982b883a 	mov	r21,r19
1001200c:	1027883a 	mov	r19,r2
10012010:	983fb61e 	bne	r19,zero,10011eec <__alt_data_end+0xf8011eec>
10012014:	003fd106 	br	10011f5c <__alt_data_end+0xf8011f5c>
10012018:	0005883a 	mov	r2,zero
1001201c:	003ffa06 	br	10012008 <__alt_data_end+0xf8012008>

10012020 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012020:	defffd04 	addi	sp,sp,-12
10012024:	df000215 	stw	fp,8(sp)
10012028:	df000204 	addi	fp,sp,8
1001202c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012030:	0001883a 	nop
10012034:	e0bfff17 	ldw	r2,-4(fp)
10012038:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1001203c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012040:	10000226 	beq	r2,zero,1001204c <_exit+0x2c>
    ALT_SIM_FAIL();
10012044:	002af070 	cmpltui	zero,zero,43969
10012048:	00000106 	br	10012050 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1001204c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012050:	003fff06 	br	10012050 <__alt_data_end+0xf8012050>
