
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000126b8 memsz 0x000126b8 flags r-x
    LOAD off    0x000136d8 vaddr 0x100126d8 paddr 0x100141c8 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00015cb8 vaddr 0x10015cb8 paddr 0x10015cb8 align 2**12
         filesz 0x00000000 memsz 0x000003bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012104  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a8  10012330  10012330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  100126d8  100141c8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003bc  10015cb8  10015cb8  00015cb8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000151c8  2**0
                  CONTENTS
  7 .sdram        00000000  10016074  10016074  000151c8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000151c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e88  00000000  00000000  000151f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025507  00000000  00000000  00016078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000099be  00000000  00000000  0003b57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c28e  00000000  00000000  00044f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002428  00000000  00000000  000511cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d4d  00000000  00000000  000535f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018d1a  00000000  00000000  00057341  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0007005c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001438  00000000  00000000  00070070  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00074a6c  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00074a6f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00074a7b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00074a7c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00074a7d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00074a81  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00074a85  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00074a89  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00074a94  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00074a9f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00074aaa  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00074ab5  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00074acf  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00078f16  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10012330 l    d  .rodata	00000000 .rodata
100126d8 l    d  .rwdata	00000000 .rwdata
10015cb8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016074 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
100123bc l     O .rodata	00000010 bp
1001239c l     O .rodata	00000010 dp_l
100123ac l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
100123cc l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003f84 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
100126d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012522 l     O .rodata	00000010 zeroes.4181
10012532 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10008c18 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000a7c0 l     F .text	00000008 __fp_lock
1000a7c8 l     F .text	00000008 __fp_unlock
1000a7dc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
10012b1c l     O .rwdata	00000020 lc_ctype_charset
10012afc l     O .rwdata	00000020 lc_message_charset
10012b3c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012560 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000d190 l     F .text	000000fc __sprint_r.part.0
10012694 l     O .rodata	00000010 blanks.4125
10012684 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 alt_close.c
1000fbd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fd00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fd2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fe34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ff30 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010014 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100101f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100141b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1001047c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100105cc l     F .text	00000038 alt_dev_reg
10013124 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100108a8 l     F .text	00000204 altera_avalon_jtag_uart_irq
10010aac l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011228 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100116c0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011818 l     F .text	00000050 alt_get_errno
10011868 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015d08 g     O .bss	00000004 alt_instruction_exception_handler
100012ec g     F .text	000000bc convertDecimalToBinary
1000cd4c g     F .text	00000074 _mprec_log10
1000ce38 g     F .text	0000008c __any_on
1000f060 g     F .text	00000054 _isatty_r
1001256c g     O .rodata	00000028 __mprec_tinytens
10010140 g     F .text	00000078 alt_main
10015f74 g     O .bss	00000100 alt_irq
10002d24 g     F .text	00000014 fabs
1000f0b4 g     F .text	0000005c _lseek_r
100141c8 g       *ABS*	00000000 __flash_rwdata_start
100052f4 g     F .text	00000084 .hidden __eqdf2
10016074 g       *ABS*	00000000 __alt_heap_start
10006910 g     F .text	0000003c printf
1000f9d8 g     F .text	0000009c _wcrtomb_r
1000cff0 g     F .text	0000005c __sseek
1000ab24 g     F .text	00000010 __sinit
1000f868 g     F .text	00000154 __swbuf_r
1000b0f8 g     F .text	0000007c _setlocale_r
1000a97c g     F .text	00000078 __sfmoreglue
100101d8 g     F .text	00000020 __malloc_unlock
100004d8 g     F .text	000002ac spawningEngine
1000f110 g     F .text	0000015c memmove
1000ab0c g     F .text	00000018 _cleanup
1000be7c g     F .text	000000a8 _Balloc
10005378 g     F .text	000000e0 .hidden __gtdf2
10011c58 g     F .text	00000020 altera_nios2_gen2_irq_init
100068d4 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000eb64 g     F .text	00000058 _fstat_r
10015cec g     O .bss	00000004 errno
1000cf6c g     F .text	00000008 __seofread
10015cf4 g     O .bss	00000004 alt_argv
1001c184 g       *ABS*	00000000 _gp
10015cb8 g     O .bss	00000004 yCursor
10012fa4 g     O .rwdata	00000180 alt_fd_list
10011c78 g     F .text	00000090 alt_find_dev
1000bc20 g     F .text	00000138 memcpy
1000a7d0 g     F .text	0000000c _cleanup_r
100066fc g     F .text	000000d0 .hidden __floatsidf
100117a0 g     F .text	00000078 alt_io_redirect
10005458 g     F .text	000000e0 .hidden __ltdf2
10015cbc g     O .bss	00000004 xCursor
10012330 g       *ABS*	00000000 __DTOR_END__
10011ef0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002d54 g     F .text	00000074 __fpclassifyd
1000cca8 g     F .text	000000a4 __ratio
1000e6c8 g     F .text	00000024 __vfiprintf_internal
10010ca8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100068e4 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100040a0 g     F .text	00000008 .hidden __udivsi3
1000fe84 g     F .text	000000ac isatty
100125bc g     O .rodata	000000c8 __mprec_tens
1000b174 g     F .text	0000000c __locale_charset
100032b4 g     F .text	00000074 .hidden __fixunsdfsi
10015ce8 g     O .bss	00000004 __malloc_top_pad
10014190 g     O .rwdata	00000004 __mb_cur_max
1000b1a4 g     F .text	0000000c _localeconv_r
1000ebbc g     F .text	000004a4 __sfvwrite_r
1000c2a4 g     F .text	0000003c __i2b
1000cec4 g     F .text	00000054 _sbrk_r
10015cc0 g     O .bss	00000004 cursorClicked
1000f26c g     F .text	0000005c _read_r
100141b0 g     O .rwdata	00000004 alt_max_fd
1000e874 g     F .text	00000100 _fclose_r
1000a790 g     F .text	00000030 fflush
10015ce4 g     O .bss	00000004 __malloc_max_sbrked_mem
100040d8 g     F .text	0000089c .hidden __adddf3
1000ca50 g     F .text	0000011c __b2d
10003968 g     F .text	0000061c .hidden __umoddi3
10010064 g     F .text	000000dc lseek
10014184 g     O .rwdata	00000004 __fdlib_version
10014188 g     O .rwdata	00000004 _global_impure_ptr
1000f2c8 g     F .text	000005a0 _realloc_r
10016074 g       *ABS*	00000000 __bss_end
100115d0 g     F .text	000000f0 alt_iic_isr_register
10015d34 g     O .bss	00000240 veggieObject
10011b54 g     F .text	00000104 alt_tick
10015cc4 g     O .bss	00000004 cursorStreak
10003328 g     F .text	00000640 .hidden __udivdi3
1000e988 g     F .text	00000184 _fputwc_r
10012594 g     O .rodata	00000028 __mprec_bigtens
1000c088 g     F .text	00000104 __s2b
100067cc g     F .text	000000a4 .hidden __floatunsidf
1000c7f8 g     F .text	00000060 __mcmp
1000ab44 g     F .text	00000018 __fp_lock_all
10011584 g     F .text	0000004c alt_ic_irq_enabled
10011abc g     F .text	00000098 alt_alarm_stop
10015cfc g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10012f7c g     O .rwdata	00000028 alt_dev_null
100011b4 g     F .text	00000138 port2Unpackager
10002ddc g     F .text	000001e4 rint
1001120c g     F .text	0000001c alt_dcache_flush_all
1000c18c g     F .text	00000068 __hi0bits
10006674 g     F .text	00000088 .hidden __fixdfsi
100141c8 g       *ABS*	00000000 __ram_rwdata_end
100141a8 g     O .rwdata	00000008 alt_dev_list
100104cc g     F .text	00000100 write
100126d8 g       *ABS*	00000000 __ram_rodata_end
1000fd7c g     F .text	000000b8 fstat
10005458 g     F .text	000000e0 .hidden __ledf2
1000c570 g     F .text	00000140 __pow5mult
1000d2a4 g     F .text	00001424 ___vfiprintf_internal_r
10015cdc g     O .bss	00000004 __nlocale_changed
100040a8 g     F .text	00000008 .hidden __umodsi3
10016074 g       *ABS*	00000000 end
10015cc8 g     O .bss	00000004 key1
100107e4 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10012330 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10006870 g     F .text	00000064 .hidden __clzsi2
10010eb4 g     F .text	00000218 altera_avalon_jtag_uart_write
1000ab34 g     F .text	00000004 __sfp_lock_acquire
1000bb38 g     F .text	000000e8 memchr
100069c8 g     F .text	000020fc ___vfprintf_internal_r
1000ac98 g     F .text	000002f0 _free_r
1000b180 g     F .text	00000010 __locale_mb_cur_max
10012168 g     F .text	00000194 __call_exitprocs
10015cd8 g     O .bss	00000004 __mlocale_changed
10014194 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10015d00 g     O .bss	00000004 _alt_tick_rate
10006964 g     F .text	00000064 rand
1000c6b0 g     F .text	00000148 __lshift
10015d04 g     O .bss	00000004 _alt_nticks
10010248 g     F .text	00000104 read
10010638 g     F .text	00000048 alt_sys_init
10012054 g     F .text	00000114 __register_exitproc
1000c2e0 g     F .text	00000290 __multiply
100019c4 g     F .text	000010cc __ieee754_pow
10010b54 g     F .text	00000068 altera_avalon_jtag_uart_close
10001520 g     F .text	000004a4 pow
100040b0 g     F .text	00000028 .hidden __mulsi3
100126d8 g       *ABS*	00000000 __ram_rwdata_start
10012330 g       *ABS*	00000000 __ram_rodata_start
10015d0c g     O .bss	00000028 __malloc_current_mallinfo
1000cb6c g     F .text	0000013c __d2b
10010680 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011e1c g     F .text	000000d4 alt_get_fd
1000e748 g     F .text	00000054 _close_r
10011fd8 g     F .text	0000007c memcmp
10010740 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016074 g       *ABS*	00000000 __alt_stack_base
10010790 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10008ae8 g     F .text	00000130 __swsetup_r
10004974 g     F .text	00000980 .hidden __divdf3
1000a9f4 g     F .text	00000118 __sfp
1000cdc0 g     F .text	00000078 __copybits
10012b74 g     O .rwdata	00000408 __malloc_av_
1000ab40 g     F .text	00000004 __sinit_lock_release
10005538 g     F .text	0000086c .hidden __muldf3
1000cf18 g     F .text	00000054 __sread
10011d08 g     F .text	00000114 alt_find_file
10011278 g     F .text	000000a4 alt_dev_llist_insert
100101b8 g     F .text	00000020 __malloc_lock
100103cc g     F .text	000000b0 sbrk
1000a568 g     F .text	00000228 _fflush_r
1000e79c g     F .text	000000d8 _calloc_r
10015cb8 g       *ABS*	00000000 __bss_start
1000bd58 g     F .text	00000124 memset
10000268 g     F .text	00000270 main
10015cf8 g     O .bss	00000004 alt_envp
10015ce0 g     O .bss	00000004 __malloc_max_total_mem
100106e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000f9bc g     F .text	0000001c __swbuf
1000694c g     F .text	00000018 srand
100013a8 g     F .text	00000178 convertBinaryToDecimal
1000d04c g     F .text	00000008 __sclose
10002dc8 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
1000e974 g     F .text	00000014 fclose
10008e40 g     F .text	00001728 _dtoa_r
1000b390 g     F .text	000007a8 _malloc_r
1000fb4c g     F .text	00000030 __ascii_wctomb
100141b4 g     O .rwdata	00000004 alt_errno
1000af88 g     F .text	000000b8 _fwalk
10003ff0 g     F .text	00000054 .hidden __divsi3
1000ab74 g     F .text	00000124 _malloc_trim_r
10012330 g       *ABS*	00000000 __CTOR_END__
10002d38 g     F .text	0000001c finite
1000d054 g     F .text	000000a4 strcmp
10012330 g       *ABS*	00000000 __flash_rodata_start
10012330 g       *ABS*	00000000 __DTOR_LIST__
10015ccc g     O .bss	00000004 key3
1000318c g     F .text	0000001c copysign
100052f4 g     F .text	00000084 .hidden __nedf2
10010604 g     F .text	00000034 alt_irq_init
1001034c g     F .text	00000080 alt_release_fd
100123dc g     O .rodata	00000100 .hidden __clz_tab
10015cd4 g     O .bss	00000004 _PathLocale
10011f8c g     F .text	00000014 atexit
10000d98 g     F .text	0000041c messagePackager
1000e6ec g     F .text	0000005c _write_r
1000b1b0 g     F .text	0000001c setlocale
1001418c g     O .rwdata	00000004 _impure_ptr
10015cf0 g     O .bss	00000004 alt_argc
10002fc0 g     F .text	000001cc scalbn
10011378 g     F .text	0000005c _do_dtors
1000b19c g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000c9f0 g     F .text	00000060 __ulp
1000ab5c g     F .text	00000018 __fp_unlock_all
100141a0 g     O .rwdata	00000008 alt_fs_list
10002dd0 g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000b1cc g     F .text	0000000c localeconv
10002a90 g     F .text	00000294 __ieee754_sqrt
100113f0 g     F .text	00000050 alt_ic_isr_register
100141c8 g       *ABS*	00000000 _edata
10016074 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10010bbc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10015cd0 g     O .bss	00000004 key2
100114e0 g     F .text	000000a4 alt_ic_irq_disable
1000cf74 g     F .text	0000007c __swrite
10014198 g     O .rwdata	00000004 __malloc_trim_threshold
1000b190 g     F .text	0000000c __locale_msgcharset
10011fa0 g     F .text	00000038 exit
1000b040 g     F .text	000000b8 _fwalk_reent
1000c858 g     F .text	00000198 __mdiff
10000784 g     F .text	000003e4 physicsEngine
10004044 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000ab38 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100122fc g     F .text	00000034 _exit
100110cc g     F .text	00000140 alt_alarm_start
100031a8 g     F .text	0000010c .hidden __muldi3
1000b1d8 g     F .text	000001b8 __smakebuf_r
1000d0f8 g     F .text	00000098 strlen
1001195c g     F .text	00000160 open
10005378 g     F .text	000000e0 .hidden __gedf2
1001419c g     O .rwdata	00000004 __wctomb
1000d28c g     F .text	00000018 __sprint_r
100113d4 g     F .text	0000001c alt_icache_flush_all
10000b68 g     F .text	00000230 FPGAcommunicator
100141bc g     O .rwdata	00000004 alt_priority_mask
10011440 g     F .text	000000a0 alt_ic_irq_enable
10008ac4 g     F .text	00000024 __vfprintf_internal
1000fb7c g     F .text	0000005c _wctomb_r
10005da4 g     F .text	000008d0 .hidden __subdf3
1000c1f4 g     F .text	000000b0 __lo0bits
100141c0 g     O .rwdata	00000008 alt_alarm_list
1001131c g     F .text	0000005c _do_ctors
1000fa74 g     F .text	000000d8 wcrtomb
1000fc28 g     F .text	000000d8 close
1000ff94 g     F .text	00000080 alt_load
1000eb0c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000ab3c g     F .text	00000004 __sinit_lock_acquire
1000bf4c g     F .text	0000013c __multadd
1000bf24 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	1097dd04 	addi	r2,r2,24436
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	1097dd04 	addi	r2,r2,24436
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e117 	ldw	r2,-25724(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e117 	ldw	r2,-25724(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6b06114 	ori	gp,gp,49540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10972e14 	ori	r2,r2,23736

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d81d14 	ori	r3,r3,24692

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ff940 	call	1000ff94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00101400 	call	10010140 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	000694c0 	call	1000694c <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a6cd15 	stw	r2,-25804(gp)
	port2Unpackager();
100002b8:	00011b40 	call	100011b4 <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	84174d04 	addi	r16,r16,23860
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	00040b00 	call	100040b0 <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	84174d04 	addi	r16,r16,23860
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00040b00 	call	100040b0 <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	84174d04 	addi	r16,r16,23860
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	00040b00 	call	100040b0 <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	84174d04 	addi	r16,r16,23860
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	00040b00 	call	100040b0 <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	84174d04 	addi	r16,r16,23860
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	00040b00 	call	100040b0 <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	84174d04 	addi	r16,r16,23860
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	00040b00 	call	100040b0 <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	84174d04 	addi	r16,r16,23860
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	00040b00 	call	100040b0 <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800410 	cmplti	r2,r2,16
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	10974d04 	addi	r2,r2,23860
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	10974d04 	addi	r2,r2,23860
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	10974d04 	addi	r2,r2,23860
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	10974d04 	addi	r2,r2,23860
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10974d04 	addi	r2,r2,23860
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	10974d04 	addi	r2,r2,23860
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10974d04 	addi	r2,r2,23860
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	10974d04 	addi	r2,r2,23860
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
	//	printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
	//	printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .1 seconds pass
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	e0bff817 	ldw	r2,-32(fp)
10000480:	1885c83a 	sub	r2,r3,r2
10000484:	108000b0 	cmpltui	r2,r2,2
10000488:	1000031e 	bne	r2,zero,10000498 <main+0x230>
		{
			physicsEngine();	// call our physics engine!
1000048c:	00007840 	call	10000784 <physicsEngine>
			lastPhysixed = elapsedTime;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000498:	e0fffe17 	ldw	r3,-8(fp)
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	1885c83a 	sub	r2,r3,r2
100004a4:	e0fffa17 	ldw	r3,-24(fp)
100004a8:	1880092e 	bgeu	r3,r2,100004d0 <main+0x268>
		{
			spawningEngine();	// call our spawning engine!
100004ac:	00004d80 	call	100004d8 <spawningEngine>
			lastSpawned = elapsedTime;
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 60) + 20;
100004b8:	00069640 	call	10006964 <rand>
100004bc:	1009883a 	mov	r4,r2
100004c0:	01400f04 	movi	r5,60
100004c4:	00040440 	call	10004044 <__modsi3>
100004c8:	10800504 	addi	r2,r2,20
100004cc:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}

	FPGAcommunicator();	// call this every time to update the FPGA
100004d0:	0000b680 	call	10000b68 <FPGAcommunicator>
	}
100004d4:	003fe106 	br	1000045c <__alt_data_end+0xf800045c>

100004d8 <spawningEngine>:
	return 0;
}

void spawningEngine()
{
100004d8:	defff504 	addi	sp,sp,-44
100004dc:	dfc00a15 	stw	ra,40(sp)
100004e0:	df000915 	stw	fp,36(sp)
100004e4:	dc400815 	stw	r17,32(sp)
100004e8:	dc000715 	stw	r16,28(sp)
100004ec:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
100004f0:	00800044 	movi	r2,1
100004f4:	e0bff715 	stw	r2,-36(fp)
100004f8:	00009806 	br	1000075c <spawningEngine+0x284>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
100004fc:	04040074 	movhi	r16,4097
10000500:	84174d04 	addi	r16,r16,23860
10000504:	e0bff717 	ldw	r2,-36(fp)
10000508:	1009883a 	mov	r4,r2
1000050c:	01400904 	movi	r5,36
10000510:	00040b00 	call	100040b0 <__mulsi3>
10000514:	8085883a 	add	r2,r16,r2
10000518:	10800304 	addi	r2,r2,12
1000051c:	10800017 	ldw	r2,0(r2)
10000520:	10008b1e 	bne	r2,zero,10000750 <spawningEngine+0x278>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 104) + 14;
10000524:	00069640 	call	10006964 <rand>
10000528:	1009883a 	mov	r4,r2
1000052c:	01401a04 	movi	r5,104
10000530:	00040440 	call	10004044 <__modsi3>
10000534:	10800384 	addi	r2,r2,14
10000538:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
1000053c:	00069640 	call	10006964 <rand>
10000540:	1007883a 	mov	r3,r2
10000544:	00a00034 	movhi	r2,32768
10000548:	108001c4 	addi	r2,r2,7
1000054c:	1884703a 	and	r2,r3,r2
10000550:	1000040e 	bge	r2,zero,10000564 <spawningEngine+0x8c>
10000554:	10bfffc4 	addi	r2,r2,-1
10000558:	00fffe04 	movi	r3,-8
1000055c:	10c4b03a 	or	r2,r2,r3
10000560:	10800044 	addi	r2,r2,1
10000564:	10800044 	addi	r2,r2,1
10000568:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 30) + 30;
1000056c:	00069640 	call	10006964 <rand>
10000570:	1009883a 	mov	r4,r2
10000574:	01400784 	movi	r5,30
10000578:	00040440 	call	10004044 <__modsi3>
1000057c:	10800784 	addi	r2,r2,30
10000580:	1009883a 	mov	r4,r2
10000584:	00066fc0 	call	100066fc <__floatsidf>
10000588:	1009883a 	mov	r4,r2
1000058c:	180b883a 	mov	r5,r3
10000590:	e13ffc15 	stw	r4,-16(fp)
10000594:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 15) - 7.5;
10000598:	00069640 	call	10006964 <rand>
1000059c:	1009883a 	mov	r4,r2
100005a0:	014003c4 	movi	r5,15
100005a4:	00040440 	call	10004044 <__modsi3>
100005a8:	1009883a 	mov	r4,r2
100005ac:	00066fc0 	call	100066fc <__floatsidf>
100005b0:	100b883a 	mov	r5,r2
100005b4:	180d883a 	mov	r6,r3
100005b8:	2809883a 	mov	r4,r5
100005bc:	300b883a 	mov	r5,r6
100005c0:	000d883a 	mov	r6,zero
100005c4:	01d007b4 	movhi	r7,16414
100005c8:	0005da40 	call	10005da4 <__subdf3>
100005cc:	1009883a 	mov	r4,r2
100005d0:	180b883a 	mov	r5,r3
100005d4:	e13ff815 	stw	r4,-32(fp)
100005d8:	e17ff915 	stw	r5,-28(fp)

			if (randomX > 80)
100005dc:	e0bffa17 	ldw	r2,-24(fp)
100005e0:	10801470 	cmpltui	r2,r2,81
100005e4:	10000b1e 	bne	r2,zero,10000614 <spawningEngine+0x13c>
			{
				randomSpeedX = (rand() % 15);
100005e8:	00069640 	call	10006964 <rand>
100005ec:	1009883a 	mov	r4,r2
100005f0:	014003c4 	movi	r5,15
100005f4:	00040440 	call	10004044 <__modsi3>
100005f8:	1009883a 	mov	r4,r2
100005fc:	00066fc0 	call	100066fc <__floatsidf>
10000600:	1009883a 	mov	r4,r2
10000604:	180b883a 	mov	r5,r3
10000608:	e13ff815 	stw	r4,-32(fp)
1000060c:	e17ff915 	stw	r5,-28(fp)
10000610:	00000e06 	br	1000064c <spawningEngine+0x174>
			}
			else if (randomX < 40)
10000614:	e0bffa17 	ldw	r2,-24(fp)
10000618:	10800a28 	cmpgeui	r2,r2,40
1000061c:	10000b1e 	bne	r2,zero,1000064c <spawningEngine+0x174>
			{
				randomSpeedX = (rand() % 15) - 15;
10000620:	00069640 	call	10006964 <rand>
10000624:	1009883a 	mov	r4,r2
10000628:	014003c4 	movi	r5,15
1000062c:	00040440 	call	10004044 <__modsi3>
10000630:	10bffc44 	addi	r2,r2,-15
10000634:	1009883a 	mov	r4,r2
10000638:	00066fc0 	call	100066fc <__floatsidf>
1000063c:	1009883a 	mov	r4,r2
10000640:	180b883a 	mov	r5,r3
10000644:	e13ff815 	stw	r4,-32(fp)
10000648:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
1000064c:	e47ffa17 	ldw	r17,-24(fp)
10000650:	04040074 	movhi	r16,4097
10000654:	84174d04 	addi	r16,r16,23860
10000658:	e0bff717 	ldw	r2,-36(fp)
1000065c:	1009883a 	mov	r4,r2
10000660:	01400904 	movi	r5,36
10000664:	00040b00 	call	100040b0 <__mulsi3>
10000668:	8085883a 	add	r2,r16,r2
1000066c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000670:	04040074 	movhi	r16,4097
10000674:	84174d04 	addi	r16,r16,23860
10000678:	e0bff717 	ldw	r2,-36(fp)
1000067c:	1009883a 	mov	r4,r2
10000680:	01400904 	movi	r5,36
10000684:	00040b00 	call	100040b0 <__mulsi3>
10000688:	8085883a 	add	r2,r16,r2
1000068c:	10800104 	addi	r2,r2,4
10000690:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000694:	04040074 	movhi	r16,4097
10000698:	84174d04 	addi	r16,r16,23860
1000069c:	e0bff717 	ldw	r2,-36(fp)
100006a0:	1009883a 	mov	r4,r2
100006a4:	01400904 	movi	r5,36
100006a8:	00040b00 	call	100040b0 <__mulsi3>
100006ac:	8085883a 	add	r2,r16,r2
100006b0:	10800204 	addi	r2,r2,8
100006b4:	e0fffb17 	ldw	r3,-20(fp)
100006b8:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
100006bc:	04040074 	movhi	r16,4097
100006c0:	84174d04 	addi	r16,r16,23860
100006c4:	e0bff717 	ldw	r2,-36(fp)
100006c8:	1009883a 	mov	r4,r2
100006cc:	01400904 	movi	r5,36
100006d0:	00040b00 	call	100040b0 <__mulsi3>
100006d4:	8085883a 	add	r2,r16,r2
100006d8:	10800304 	addi	r2,r2,12
100006dc:	00c00044 	movi	r3,1
100006e0:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
100006e4:	04040074 	movhi	r16,4097
100006e8:	84174d04 	addi	r16,r16,23860
100006ec:	e0bff717 	ldw	r2,-36(fp)
100006f0:	1009883a 	mov	r4,r2
100006f4:	01400904 	movi	r5,36
100006f8:	00040b00 	call	100040b0 <__mulsi3>
100006fc:	8085883a 	add	r2,r16,r2
10000700:	10800504 	addi	r2,r2,20
10000704:	e0fff817 	ldw	r3,-32(fp)
10000708:	10c00015 	stw	r3,0(r2)
1000070c:	e0fff917 	ldw	r3,-28(fp)
10000710:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000714:	04040074 	movhi	r16,4097
10000718:	84174d04 	addi	r16,r16,23860
1000071c:	e0bff717 	ldw	r2,-36(fp)
10000720:	1009883a 	mov	r4,r2
10000724:	01400904 	movi	r5,36
10000728:	00040b00 	call	100040b0 <__mulsi3>
1000072c:	8085883a 	add	r2,r16,r2
10000730:	10800704 	addi	r2,r2,28
10000734:	e0fffc17 	ldw	r3,-16(fp)
10000738:	10c00015 	stw	r3,0(r2)
1000073c:	e0fffd17 	ldw	r3,-12(fp)
10000740:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000744:	00800a84 	movi	r2,42
10000748:	e0bff715 	stw	r2,-36(fp)
			break;
1000074c:	00000606 	br	10000768 <spawningEngine+0x290>
}

void spawningEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000750:	e0bff717 	ldw	r2,-36(fp)
10000754:	10800044 	addi	r2,r2,1
10000758:	e0bff715 	stw	r2,-36(fp)
1000075c:	e0bff717 	ldw	r2,-36(fp)
10000760:	10800410 	cmplti	r2,r2,16
10000764:	103f651e 	bne	r2,zero,100004fc <__alt_data_end+0xf80004fc>
			// now let's break
			i = 42;
			break;
		}
	}
}
10000768:	e6fffe04 	addi	sp,fp,-8
1000076c:	dfc00317 	ldw	ra,12(sp)
10000770:	df000217 	ldw	fp,8(sp)
10000774:	dc400117 	ldw	r17,4(sp)
10000778:	dc000017 	ldw	r16,0(sp)
1000077c:	dec00404 	addi	sp,sp,16
10000780:	f800283a 	ret

10000784 <physicsEngine>:

void physicsEngine()
{
10000784:	defffa04 	addi	sp,sp,-24
10000788:	dfc00515 	stw	ra,20(sp)
1000078c:	df000415 	stw	fp,16(sp)
10000790:	dc800315 	stw	r18,12(sp)
10000794:	dc400215 	stw	r17,8(sp)
10000798:	dc000115 	stw	r16,4(sp)
1000079c:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100007a0:	00800044 	movi	r2,1
100007a4:	e0bffc15 	stw	r2,-16(fp)
100007a8:	0000e306 	br	10000b38 <physicsEngine+0x3b4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
100007ac:	04040074 	movhi	r16,4097
100007b0:	84174d04 	addi	r16,r16,23860
100007b4:	e0bffc17 	ldw	r2,-16(fp)
100007b8:	1009883a 	mov	r4,r2
100007bc:	01400904 	movi	r5,36
100007c0:	00040b00 	call	100040b0 <__mulsi3>
100007c4:	8085883a 	add	r2,r16,r2
100007c8:	10800304 	addi	r2,r2,12
100007cc:	10800017 	ldw	r2,0(r2)
100007d0:	1000d626 	beq	r2,zero,10000b2c <physicsEngine+0x3a8>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
100007d4:	04040074 	movhi	r16,4097
100007d8:	84174d04 	addi	r16,r16,23860
100007dc:	e0bffc17 	ldw	r2,-16(fp)
100007e0:	1009883a 	mov	r4,r2
100007e4:	01400904 	movi	r5,36
100007e8:	00040b00 	call	100040b0 <__mulsi3>
100007ec:	8085883a 	add	r2,r16,r2
100007f0:	10800017 	ldw	r2,0(r2)
100007f4:	1009883a 	mov	r4,r2
100007f8:	00066fc0 	call	100066fc <__floatsidf>
100007fc:	1023883a 	mov	r17,r2
10000800:	1825883a 	mov	r18,r3
10000804:	04040074 	movhi	r16,4097
10000808:	84174d04 	addi	r16,r16,23860
1000080c:	e0bffc17 	ldw	r2,-16(fp)
10000810:	1009883a 	mov	r4,r2
10000814:	01400904 	movi	r5,36
10000818:	00040b00 	call	100040b0 <__mulsi3>
1000081c:	8085883a 	add	r2,r16,r2
10000820:	11000504 	addi	r4,r2,20
10000824:	20800017 	ldw	r2,0(r4)
10000828:	20c00117 	ldw	r3,4(r4)
1000082c:	8809883a 	mov	r4,r17
10000830:	900b883a 	mov	r5,r18
10000834:	100d883a 	mov	r6,r2
10000838:	180f883a 	mov	r7,r3
1000083c:	00040d80 	call	100040d8 <__adddf3>
10000840:	1009883a 	mov	r4,r2
10000844:	180b883a 	mov	r5,r3
10000848:	2005883a 	mov	r2,r4
1000084c:	2807883a 	mov	r3,r5
10000850:	1009883a 	mov	r4,r2
10000854:	180b883a 	mov	r5,r3
10000858:	00066740 	call	10006674 <__fixdfsi>
1000085c:	1023883a 	mov	r17,r2
10000860:	04040074 	movhi	r16,4097
10000864:	84174d04 	addi	r16,r16,23860
10000868:	e0bffc17 	ldw	r2,-16(fp)
1000086c:	1009883a 	mov	r4,r2
10000870:	01400904 	movi	r5,36
10000874:	00040b00 	call	100040b0 <__mulsi3>
10000878:	8085883a 	add	r2,r16,r2
1000087c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000880:	04040074 	movhi	r16,4097
10000884:	84174d04 	addi	r16,r16,23860
10000888:	e0bffc17 	ldw	r2,-16(fp)
1000088c:	1009883a 	mov	r4,r2
10000890:	01400904 	movi	r5,36
10000894:	00040b00 	call	100040b0 <__mulsi3>
10000898:	8085883a 	add	r2,r16,r2
1000089c:	10800104 	addi	r2,r2,4
100008a0:	10800017 	ldw	r2,0(r2)
100008a4:	1009883a 	mov	r4,r2
100008a8:	00066fc0 	call	100066fc <__floatsidf>
100008ac:	1023883a 	mov	r17,r2
100008b0:	1825883a 	mov	r18,r3
100008b4:	04040074 	movhi	r16,4097
100008b8:	84174d04 	addi	r16,r16,23860
100008bc:	e0bffc17 	ldw	r2,-16(fp)
100008c0:	1009883a 	mov	r4,r2
100008c4:	01400904 	movi	r5,36
100008c8:	00040b00 	call	100040b0 <__mulsi3>
100008cc:	8085883a 	add	r2,r16,r2
100008d0:	11000704 	addi	r4,r2,28
100008d4:	20800017 	ldw	r2,0(r4)
100008d8:	20c00117 	ldw	r3,4(r4)
100008dc:	8809883a 	mov	r4,r17
100008e0:	900b883a 	mov	r5,r18
100008e4:	100d883a 	mov	r6,r2
100008e8:	180f883a 	mov	r7,r3
100008ec:	00040d80 	call	100040d8 <__adddf3>
100008f0:	1009883a 	mov	r4,r2
100008f4:	180b883a 	mov	r5,r3
100008f8:	2005883a 	mov	r2,r4
100008fc:	2807883a 	mov	r3,r5
10000900:	1009883a 	mov	r4,r2
10000904:	180b883a 	mov	r5,r3
10000908:	00066740 	call	10006674 <__fixdfsi>
1000090c:	1023883a 	mov	r17,r2
10000910:	04040074 	movhi	r16,4097
10000914:	84174d04 	addi	r16,r16,23860
10000918:	e0bffc17 	ldw	r2,-16(fp)
1000091c:	1009883a 	mov	r4,r2
10000920:	01400904 	movi	r5,36
10000924:	00040b00 	call	100040b0 <__mulsi3>
10000928:	8085883a 	add	r2,r16,r2
1000092c:	10800104 	addi	r2,r2,4
10000930:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000934:	04040074 	movhi	r16,4097
10000938:	84174d04 	addi	r16,r16,23860
1000093c:	e0bffc17 	ldw	r2,-16(fp)
10000940:	1009883a 	mov	r4,r2
10000944:	01400904 	movi	r5,36
10000948:	00040b00 	call	100040b0 <__mulsi3>
1000094c:	8085883a 	add	r2,r16,r2
10000950:	11000704 	addi	r4,r2,28
10000954:	20800017 	ldw	r2,0(r4)
10000958:	20c00117 	ldw	r3,4(r4)
1000095c:	1009883a 	mov	r4,r2
10000960:	180b883a 	mov	r5,r3
10000964:	000d883a 	mov	r6,zero
10000968:	01cffc34 	movhi	r7,16368
1000096c:	0005da40 	call	10005da4 <__subdf3>
10000970:	1009883a 	mov	r4,r2
10000974:	180b883a 	mov	r5,r3
10000978:	2021883a 	mov	r16,r4
1000097c:	2823883a 	mov	r17,r5
10000980:	04840074 	movhi	r18,4097
10000984:	94974d04 	addi	r18,r18,23860
10000988:	e0bffc17 	ldw	r2,-16(fp)
1000098c:	1009883a 	mov	r4,r2
10000990:	01400904 	movi	r5,36
10000994:	00040b00 	call	100040b0 <__mulsi3>
10000998:	9085883a 	add	r2,r18,r2
1000099c:	10800704 	addi	r2,r2,28
100009a0:	14000015 	stw	r16,0(r2)
100009a4:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are below the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
100009a8:	04040074 	movhi	r16,4097
100009ac:	84174d04 	addi	r16,r16,23860
100009b0:	e0bffc17 	ldw	r2,-16(fp)
100009b4:	1009883a 	mov	r4,r2
100009b8:	01400904 	movi	r5,36
100009bc:	00040b00 	call	100040b0 <__mulsi3>
100009c0:	8085883a 	add	r2,r16,r2
100009c4:	10800104 	addi	r2,r2,4
100009c8:	10800017 	ldw	r2,0(r2)
100009cc:	10001316 	blt	r2,zero,10000a1c <physicsEngine+0x298>
100009d0:	04040074 	movhi	r16,4097
100009d4:	84174d04 	addi	r16,r16,23860
100009d8:	e0bffc17 	ldw	r2,-16(fp)
100009dc:	1009883a 	mov	r4,r2
100009e0:	01400904 	movi	r5,36
100009e4:	00040b00 	call	100040b0 <__mulsi3>
100009e8:	8085883a 	add	r2,r16,r2
100009ec:	10800017 	ldw	r2,0(r2)
100009f0:	10000a16 	blt	r2,zero,10000a1c <physicsEngine+0x298>
100009f4:	04040074 	movhi	r16,4097
100009f8:	84174d04 	addi	r16,r16,23860
100009fc:	e0bffc17 	ldw	r2,-16(fp)
10000a00:	1009883a 	mov	r4,r2
10000a04:	01400904 	movi	r5,36
10000a08:	00040b00 	call	100040b0 <__mulsi3>
10000a0c:	8085883a 	add	r2,r16,r2
10000a10:	10800017 	ldw	r2,0(r2)
10000a14:	1080a050 	cmplti	r2,r2,641
10000a18:	1000441e 	bne	r2,zero,10000b2c <physicsEngine+0x3a8>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000a1c:	04040074 	movhi	r16,4097
10000a20:	84174d04 	addi	r16,r16,23860
10000a24:	e0bffc17 	ldw	r2,-16(fp)
10000a28:	1009883a 	mov	r4,r2
10000a2c:	01400904 	movi	r5,36
10000a30:	00040b00 	call	100040b0 <__mulsi3>
10000a34:	8085883a 	add	r2,r16,r2
10000a38:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000a3c:	04040074 	movhi	r16,4097
10000a40:	84174d04 	addi	r16,r16,23860
10000a44:	e0bffc17 	ldw	r2,-16(fp)
10000a48:	1009883a 	mov	r4,r2
10000a4c:	01400904 	movi	r5,36
10000a50:	00040b00 	call	100040b0 <__mulsi3>
10000a54:	8085883a 	add	r2,r16,r2
10000a58:	10800104 	addi	r2,r2,4
10000a5c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000a60:	04040074 	movhi	r16,4097
10000a64:	84174d04 	addi	r16,r16,23860
10000a68:	e0bffc17 	ldw	r2,-16(fp)
10000a6c:	1009883a 	mov	r4,r2
10000a70:	01400904 	movi	r5,36
10000a74:	00040b00 	call	100040b0 <__mulsi3>
10000a78:	8085883a 	add	r2,r16,r2
10000a7c:	10800204 	addi	r2,r2,8
10000a80:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000a84:	04040074 	movhi	r16,4097
10000a88:	84174d04 	addi	r16,r16,23860
10000a8c:	e0bffc17 	ldw	r2,-16(fp)
10000a90:	1009883a 	mov	r4,r2
10000a94:	01400904 	movi	r5,36
10000a98:	00040b00 	call	100040b0 <__mulsi3>
10000a9c:	8085883a 	add	r2,r16,r2
10000aa0:	10800304 	addi	r2,r2,12
10000aa4:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000aa8:	04040074 	movhi	r16,4097
10000aac:	84174d04 	addi	r16,r16,23860
10000ab0:	e0bffc17 	ldw	r2,-16(fp)
10000ab4:	1009883a 	mov	r4,r2
10000ab8:	01400904 	movi	r5,36
10000abc:	00040b00 	call	100040b0 <__mulsi3>
10000ac0:	8085883a 	add	r2,r16,r2
10000ac4:	10800404 	addi	r2,r2,16
10000ac8:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000acc:	04040074 	movhi	r16,4097
10000ad0:	84174d04 	addi	r16,r16,23860
10000ad4:	e0bffc17 	ldw	r2,-16(fp)
10000ad8:	1009883a 	mov	r4,r2
10000adc:	01400904 	movi	r5,36
10000ae0:	00040b00 	call	100040b0 <__mulsi3>
10000ae4:	8085883a 	add	r2,r16,r2
10000ae8:	10800504 	addi	r2,r2,20
10000aec:	10000015 	stw	zero,0(r2)
10000af0:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000af4:	04040074 	movhi	r16,4097
10000af8:	84174d04 	addi	r16,r16,23860
10000afc:	e0bffc17 	ldw	r2,-16(fp)
10000b00:	1009883a 	mov	r4,r2
10000b04:	01400904 	movi	r5,36
10000b08:	00040b00 	call	100040b0 <__mulsi3>
10000b0c:	8085883a 	add	r2,r16,r2
10000b10:	10800704 	addi	r2,r2,28
10000b14:	10000015 	stw	zero,0(r2)
10000b18:	10000115 	stw	zero,4(r2)
				printf("eliminating object %d! \n", i);
10000b1c:	01040074 	movhi	r4,4097
10000b20:	2108cc04 	addi	r4,r4,9008
10000b24:	e17ffc17 	ldw	r5,-16(fp)
10000b28:	00069100 	call	10006910 <printf>
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000b2c:	e0bffc17 	ldw	r2,-16(fp)
10000b30:	10800044 	addi	r2,r2,1
10000b34:	e0bffc15 	stw	r2,-16(fp)
10000b38:	e0bffc17 	ldw	r2,-16(fp)
10000b3c:	10800410 	cmplti	r2,r2,16
10000b40:	103f1a1e 	bne	r2,zero,100007ac <__alt_data_end+0xf80007ac>
				veggieObject[i].yVelocity = 0;
				printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000b44:	0001883a 	nop
}
10000b48:	e6fffd04 	addi	sp,fp,-12
10000b4c:	dfc00417 	ldw	ra,16(sp)
10000b50:	df000317 	ldw	fp,12(sp)
10000b54:	dc800217 	ldw	r18,8(sp)
10000b58:	dc400117 	ldw	r17,4(sp)
10000b5c:	dc000017 	ldw	r16,0(sp)
10000b60:	dec00504 	addi	sp,sp,20
10000b64:	f800283a 	ret

10000b68 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000b68:	deffd504 	addi	sp,sp,-172
10000b6c:	dfc02a15 	stw	ra,168(sp)
10000b70:	df002915 	stw	fp,164(sp)
10000b74:	dc002815 	stw	r16,160(sp)
10000b78:	df002904 	addi	fp,sp,164
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000b7c:	e03fdc15 	stw	zero,-144(fp)
10000b80:	00002406 	br	10000c14 <FPGAcommunicator+0xac>
	{
		unsigned long long tempPackage = messagePackager(veggieObject[i]);
10000b84:	04040074 	movhi	r16,4097
10000b88:	84174d04 	addi	r16,r16,23860
10000b8c:	e0bfdc17 	ldw	r2,-144(fp)
10000b90:	1009883a 	mov	r4,r2
10000b94:	01400904 	movi	r5,36
10000b98:	00040b00 	call	100040b0 <__mulsi3>
10000b9c:	8085883a 	add	r2,r16,r2
10000ba0:	10c00417 	ldw	r3,16(r2)
10000ba4:	d8c00015 	stw	r3,0(sp)
10000ba8:	10c00517 	ldw	r3,20(r2)
10000bac:	d8c00115 	stw	r3,4(sp)
10000bb0:	10c00617 	ldw	r3,24(r2)
10000bb4:	d8c00215 	stw	r3,8(sp)
10000bb8:	10c00717 	ldw	r3,28(r2)
10000bbc:	d8c00315 	stw	r3,12(sp)
10000bc0:	10c00817 	ldw	r3,32(r2)
10000bc4:	d8c00415 	stw	r3,16(sp)
10000bc8:	11000017 	ldw	r4,0(r2)
10000bcc:	11400117 	ldw	r5,4(r2)
10000bd0:	11800217 	ldw	r6,8(r2)
10000bd4:	11c00317 	ldw	r7,12(r2)
10000bd8:	0000d980 	call	10000d98 <messagePackager>
10000bdc:	e0bfdd15 	stw	r2,-140(fp)
10000be0:	e03fde15 	stw	zero,-136(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000be4:	e0bfdc17 	ldw	r2,-144(fp)
10000be8:	100490fa 	slli	r2,r2,3
10000bec:	e0ffdc04 	addi	r3,fp,-144
10000bf0:	1885883a 	add	r2,r3,r2
10000bf4:	10800304 	addi	r2,r2,12
10000bf8:	e0ffdd17 	ldw	r3,-140(fp)
10000bfc:	10c00015 	stw	r3,0(r2)
10000c00:	e0ffde17 	ldw	r3,-136(fp)
10000c04:	10c00115 	stw	r3,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000c08:	e0bfdc17 	ldw	r2,-144(fp)
10000c0c:	10800044 	addi	r2,r2,1
10000c10:	e0bfdc15 	stw	r2,-144(fp)
10000c14:	e0bfdc17 	ldw	r2,-144(fp)
10000c18:	10800410 	cmplti	r2,r2,16
10000c1c:	103fd91e 	bne	r2,zero,10000b84 <__alt_data_end+0xf8000b84>

		FPGAmessage[i] = tempPackage;
	}


	*to_hw_sig = 2;	// 2 means we're starting communication
10000c20:	00801c04 	movi	r2,112
10000c24:	00c00084 	movi	r3,2
10000c28:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000c2c:	01004004 	movi	r4,256
10000c30:	e0bfdf17 	ldw	r2,-132(fp)
10000c34:	e0ffe017 	ldw	r3,-128(fp)
10000c38:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000c3c:	01003c04 	movi	r4,240
10000c40:	e0bfe117 	ldw	r2,-124(fp)
10000c44:	e0ffe217 	ldw	r3,-120(fp)
10000c48:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000c4c:	01003804 	movi	r4,224
10000c50:	e0bfe317 	ldw	r2,-116(fp)
10000c54:	e0ffe417 	ldw	r3,-112(fp)
10000c58:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000c5c:	01003404 	movi	r4,208
10000c60:	e0bfe517 	ldw	r2,-108(fp)
10000c64:	e0ffe617 	ldw	r3,-104(fp)
10000c68:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000c6c:	01003004 	movi	r4,192
10000c70:	e0bfe717 	ldw	r2,-100(fp)
10000c74:	e0ffe817 	ldw	r3,-96(fp)
10000c78:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000c7c:	01002c04 	movi	r4,176
10000c80:	e0bfe917 	ldw	r2,-92(fp)
10000c84:	e0ffea17 	ldw	r3,-88(fp)
10000c88:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000c8c:	01002804 	movi	r4,160
10000c90:	e0bfeb17 	ldw	r2,-84(fp)
10000c94:	e0ffec17 	ldw	r3,-80(fp)
10000c98:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000c9c:	01001804 	movi	r4,96
10000ca0:	e0bfed17 	ldw	r2,-76(fp)
10000ca4:	e0ffee17 	ldw	r3,-72(fp)
10000ca8:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000cac:	01002404 	movi	r4,144
10000cb0:	e0bfef17 	ldw	r2,-68(fp)
10000cb4:	e0fff017 	ldw	r3,-64(fp)
10000cb8:	20800015 	stw	r2,0(r4)
	*to_hw_port9 = FPGAmessage[9];
10000cbc:	01002004 	movi	r4,128
10000cc0:	e0bff117 	ldw	r2,-60(fp)
10000cc4:	e0fff217 	ldw	r3,-56(fp)
10000cc8:	20800015 	stw	r2,0(r4)
	*to_hw_port10 = FPGAmessage[10];
10000ccc:	01001004 	movi	r4,64
10000cd0:	e0bff317 	ldw	r2,-52(fp)
10000cd4:	e0fff417 	ldw	r3,-48(fp)
10000cd8:	20800015 	stw	r2,0(r4)
	*to_hw_port11 = FPGAmessage[11];
10000cdc:	01000c04 	movi	r4,48
10000ce0:	e0bff517 	ldw	r2,-44(fp)
10000ce4:	e0fff617 	ldw	r3,-40(fp)
10000ce8:	20800015 	stw	r2,0(r4)
	*to_hw_port12 = FPGAmessage[12];
10000cec:	01000804 	movi	r4,32
10000cf0:	e0bff717 	ldw	r2,-36(fp)
10000cf4:	e0fff817 	ldw	r3,-32(fp)
10000cf8:	20800015 	stw	r2,0(r4)
	*to_hw_port13 = FPGAmessage[13];
10000cfc:	01005804 	movi	r4,352
10000d00:	e0bff917 	ldw	r2,-28(fp)
10000d04:	e0fffa17 	ldw	r3,-24(fp)
10000d08:	20800015 	stw	r2,0(r4)
	*to_hw_port14 = FPGAmessage[14];
10000d0c:	01005404 	movi	r4,336
10000d10:	e0bffb17 	ldw	r2,-20(fp)
10000d14:	e0fffc17 	ldw	r3,-16(fp)
10000d18:	20800015 	stw	r2,0(r4)
	*to_hw_port15 = FPGAmessage[15];
10000d1c:	01005004 	movi	r4,320
10000d20:	e0bffd17 	ldw	r2,-12(fp)
10000d24:	e0fffe17 	ldw	r3,-8(fp)
10000d28:	20800015 	stw	r2,0(r4)
//	printf("FPGAmessage 11 is %llu \n", FPGAmessage[11]);

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000d2c:	0001883a 	nop
10000d30:	00801404 	movi	r2,80
10000d34:	10800003 	ldbu	r2,0(r2)
10000d38:	10803fcc 	andi	r2,r2,255
10000d3c:	1080201c 	xori	r2,r2,128
10000d40:	10bfe004 	addi	r2,r2,-128
10000d44:	10800098 	cmpnei	r2,r2,2
10000d48:	103ff91e 	bne	r2,zero,10000d30 <__alt_data_end+0xf8000d30>

	*to_hw_sig = 1;		// now we are done putting in messages
10000d4c:	00801c04 	movi	r2,112
10000d50:	00c00044 	movi	r3,1
10000d54:	10c00005 	stb	r3,0(r2)

	while(*to_sw_sig != 0); // wait for response from hardware
10000d58:	0001883a 	nop
10000d5c:	00801404 	movi	r2,80
10000d60:	10800003 	ldbu	r2,0(r2)
10000d64:	10803fcc 	andi	r2,r2,255
10000d68:	1080201c 	xori	r2,r2,128
10000d6c:	10bfe004 	addi	r2,r2,-128
10000d70:	103ffa1e 	bne	r2,zero,10000d5c <__alt_data_end+0xf8000d5c>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000d74:	00801c04 	movi	r2,112
10000d78:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000d7c:	0001883a 	nop
}
10000d80:	e6ffff04 	addi	sp,fp,-4
10000d84:	dfc00217 	ldw	ra,8(sp)
10000d88:	df000117 	ldw	fp,4(sp)
10000d8c:	dc000017 	ldw	r16,0(sp)
10000d90:	dec00304 	addi	sp,sp,12
10000d94:	f800283a 	ret

10000d98 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000d98:	deffe304 	addi	sp,sp,-116
10000d9c:	dfc01815 	stw	ra,96(sp)
10000da0:	df001715 	stw	fp,92(sp)
10000da4:	dc401615 	stw	r17,88(sp)
10000da8:	dc001515 	stw	r16,84(sp)
10000dac:	df001704 	addi	fp,sp,92
10000db0:	e1000215 	stw	r4,8(fp)
10000db4:	e1400315 	stw	r5,12(fp)
10000db8:	e1800415 	stw	r6,16(fp)
10000dbc:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000dc0:	e0800617 	ldw	r2,24(fp)
10000dc4:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 1)
10000dc8:	e0bfeb17 	ldw	r2,-84(fp)
10000dcc:	10800058 	cmpnei	r2,r2,1
10000dd0:	1000601e 	bne	r2,zero,10000f54 <messagePackager+0x1bc>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000dd4:	e0800217 	ldw	r2,8(fp)
10000dd8:	e0bfec15 	stw	r2,-80(fp)
10000ddc:	1005d7fa 	srai	r2,r2,31
10000de0:	e0bfed15 	stw	r2,-76(fp)
		tempTime = specifiedObject.yPosition;
10000de4:	e0800317 	ldw	r2,12(fp)
10000de8:	e0bfee15 	stw	r2,-72(fp)
10000dec:	1005d7fa 	srai	r2,r2,31
10000df0:	e0bfef15 	stw	r2,-68(fp)
		tempStart = specifiedObject.objectType;
10000df4:	e0800417 	ldw	r2,16(fp)
10000df8:	e0bff015 	stw	r2,-64(fp)
10000dfc:	1005d7fa 	srai	r2,r2,31
10000e00:	e0bff115 	stw	r2,-60(fp)
		tempEnd = specifiedObject.objectState;
10000e04:	e0800517 	ldw	r2,20(fp)
10000e08:	e0bff215 	stw	r2,-56(fp)
10000e0c:	1005d7fa 	srai	r2,r2,31
10000e10:	e0bff315 	stw	r2,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000e14:	e0bfec17 	ldw	r2,-80(fp)
10000e18:	1009883a 	mov	r4,r2
10000e1c:	00012ec0 	call	100012ec <convertDecimalToBinary>
10000e20:	e0bfec15 	stw	r2,-80(fp)
10000e24:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000e28:	e0bfee17 	ldw	r2,-72(fp)
10000e2c:	1009883a 	mov	r4,r2
10000e30:	00012ec0 	call	100012ec <convertDecimalToBinary>
10000e34:	e0bfee15 	stw	r2,-72(fp)
10000e38:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000e3c:	e0bff017 	ldw	r2,-64(fp)
10000e40:	1009883a 	mov	r4,r2
10000e44:	00012ec0 	call	100012ec <convertDecimalToBinary>
10000e48:	e0bff015 	stw	r2,-64(fp)
10000e4c:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000e50:	e0bff217 	ldw	r2,-56(fp)
10000e54:	1009883a 	mov	r4,r2
10000e58:	00012ec0 	call	100012ec <convertDecimalToBinary>
10000e5c:	e0bff215 	stw	r2,-56(fp)
10000e60:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000e64:	00802674 	movhi	r2,153
10000e68:	10a5a004 	addi	r2,r2,-27008
10000e6c:	0007883a 	mov	r3,zero
10000e70:	e13fee17 	ldw	r4,-72(fp)
10000e74:	e17fef17 	ldw	r5,-68(fp)
10000e78:	100d883a 	mov	r6,r2
10000e7c:	180f883a 	mov	r7,r3
10000e80:	00031a80 	call	100031a8 <__muldi3>
10000e84:	1009883a 	mov	r4,r2
10000e88:	180b883a 	mov	r5,r3
10000e8c:	2021883a 	mov	r16,r4
10000e90:	2823883a 	mov	r17,r5
10000e94:	00841eb4 	movhi	r2,4218
10000e98:	10900004 	addi	r2,r2,16384
10000e9c:	00d6bcc4 	movi	r3,23283
10000ea0:	e13ff017 	ldw	r4,-64(fp)
10000ea4:	e17ff117 	ldw	r5,-60(fp)
10000ea8:	100d883a 	mov	r6,r2
10000eac:	180f883a 	mov	r7,r3
10000eb0:	00031a80 	call	100031a8 <__muldi3>
10000eb4:	100d883a 	mov	r6,r2
10000eb8:	180f883a 	mov	r7,r3
10000ebc:	3009883a 	mov	r4,r6
10000ec0:	380b883a 	mov	r5,r7
10000ec4:	8105883a 	add	r2,r16,r4
10000ec8:	140d803a 	cmpltu	r6,r2,r16
10000ecc:	8947883a 	add	r3,r17,r5
10000ed0:	30c9883a 	add	r4,r6,r3
10000ed4:	2007883a 	mov	r3,r4
10000ed8:	100d883a 	mov	r6,r2
10000edc:	180f883a 	mov	r7,r3
10000ee0:	e13fec17 	ldw	r4,-80(fp)
10000ee4:	e17fed17 	ldw	r5,-76(fp)
10000ee8:	3105883a 	add	r2,r6,r4
10000eec:	1191803a 	cmpltu	r8,r2,r6
10000ef0:	3947883a 	add	r3,r7,r5
10000ef4:	40c9883a 	add	r4,r8,r3
10000ef8:	2007883a 	mov	r3,r4
10000efc:	1021883a 	mov	r16,r2
10000f00:	1823883a 	mov	r17,r3
10000f04:	009762b4 	movhi	r2,23946
10000f08:	00c058f4 	movhi	r3,355
10000f0c:	18d15e04 	addi	r3,r3,17784
10000f10:	e13ff217 	ldw	r4,-56(fp)
10000f14:	e17ff317 	ldw	r5,-52(fp)
10000f18:	100d883a 	mov	r6,r2
10000f1c:	180f883a 	mov	r7,r3
10000f20:	00031a80 	call	100031a8 <__muldi3>
10000f24:	100d883a 	mov	r6,r2
10000f28:	180f883a 	mov	r7,r3
10000f2c:	3009883a 	mov	r4,r6
10000f30:	380b883a 	mov	r5,r7
10000f34:	8105883a 	add	r2,r16,r4
10000f38:	140d803a 	cmpltu	r6,r2,r16
10000f3c:	8947883a 	add	r3,r17,r5
10000f40:	30c9883a 	add	r4,r6,r3
10000f44:	2007883a 	mov	r3,r4
10000f48:	e0bfe915 	stw	r2,-92(fp)
10000f4c:	e0ffea15 	stw	r3,-88(fp)
10000f50:	00008b06 	br	10001180 <messagePackager+0x3e8>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000f54:	e0800217 	ldw	r2,8(fp)
10000f58:	e0bff415 	stw	r2,-48(fp)
10000f5c:	1005d7fa 	srai	r2,r2,31
10000f60:	e0bff515 	stw	r2,-44(fp)
		tempY = specifiedObject.yPosition;
10000f64:	e0800317 	ldw	r2,12(fp)
10000f68:	e0bff615 	stw	r2,-40(fp)
10000f6c:	1005d7fa 	srai	r2,r2,31
10000f70:	e0bff715 	stw	r2,-36(fp)
		tempType = specifiedObject.objectType;
10000f74:	e0800417 	ldw	r2,16(fp)
10000f78:	e0bff815 	stw	r2,-32(fp)
10000f7c:	1005d7fa 	srai	r2,r2,31
10000f80:	e0bff915 	stw	r2,-28(fp)
		tempState = specifiedObject.objectState;
10000f84:	e0800517 	ldw	r2,20(fp)
10000f88:	e0bffa15 	stw	r2,-24(fp)
10000f8c:	1005d7fa 	srai	r2,r2,31
10000f90:	e0bffb15 	stw	r2,-20(fp)

		// take X and Y and divide them by 5 to fit in our message
		tempX = tempX/5 - 1;
10000f94:	e0bff417 	ldw	r2,-48(fp)
10000f98:	e0fff517 	ldw	r3,-44(fp)
10000f9c:	01c00144 	movi	r7,5
10000fa0:	0011883a 	mov	r8,zero
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	180b883a 	mov	r5,r3
10000fac:	380d883a 	mov	r6,r7
10000fb0:	400f883a 	mov	r7,r8
10000fb4:	00033280 	call	10003328 <__udivdi3>
10000fb8:	1009883a 	mov	r4,r2
10000fbc:	180b883a 	mov	r5,r3
10000fc0:	200d883a 	mov	r6,r4
10000fc4:	280f883a 	mov	r7,r5
10000fc8:	013fffc4 	movi	r4,-1
10000fcc:	017fffc4 	movi	r5,-1
10000fd0:	3105883a 	add	r2,r6,r4
10000fd4:	1191803a 	cmpltu	r8,r2,r6
10000fd8:	3947883a 	add	r3,r7,r5
10000fdc:	40c9883a 	add	r4,r8,r3
10000fe0:	2007883a 	mov	r3,r4
10000fe4:	e0bff415 	stw	r2,-48(fp)
10000fe8:	e0fff515 	stw	r3,-44(fp)
		tempY = tempY/5 - 1;
10000fec:	e0bff617 	ldw	r2,-40(fp)
10000ff0:	e0fff717 	ldw	r3,-36(fp)
10000ff4:	01c00144 	movi	r7,5
10000ff8:	0011883a 	mov	r8,zero
10000ffc:	1009883a 	mov	r4,r2
10001000:	180b883a 	mov	r5,r3
10001004:	380d883a 	mov	r6,r7
10001008:	400f883a 	mov	r7,r8
1000100c:	00033280 	call	10003328 <__udivdi3>
10001010:	1009883a 	mov	r4,r2
10001014:	180b883a 	mov	r5,r3
10001018:	200d883a 	mov	r6,r4
1000101c:	280f883a 	mov	r7,r5
10001020:	013fffc4 	movi	r4,-1
10001024:	017fffc4 	movi	r5,-1
10001028:	3105883a 	add	r2,r6,r4
1000102c:	1191803a 	cmpltu	r8,r2,r6
10001030:	3947883a 	add	r3,r7,r5
10001034:	40c9883a 	add	r4,r8,r3
10001038:	2007883a 	mov	r3,r4
1000103c:	e0bff615 	stw	r2,-40(fp)
10001040:	e0fff715 	stw	r3,-36(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
10001044:	e0bff417 	ldw	r2,-48(fp)
10001048:	1009883a 	mov	r4,r2
1000104c:	00012ec0 	call	100012ec <convertDecimalToBinary>
10001050:	e0bff415 	stw	r2,-48(fp)
10001054:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
10001058:	e0bff617 	ldw	r2,-40(fp)
1000105c:	1009883a 	mov	r4,r2
10001060:	00012ec0 	call	100012ec <convertDecimalToBinary>
10001064:	e0bff615 	stw	r2,-40(fp)
10001068:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
1000106c:	e0bff817 	ldw	r2,-32(fp)
10001070:	1009883a 	mov	r4,r2
10001074:	00012ec0 	call	100012ec <convertDecimalToBinary>
10001078:	e0bff815 	stw	r2,-32(fp)
1000107c:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
10001080:	e0bffa17 	ldw	r2,-24(fp)
10001084:	1009883a 	mov	r4,r2
10001088:	00012ec0 	call	100012ec <convertDecimalToBinary>
1000108c:	e0bffa15 	stw	r2,-24(fp)
10001090:	e03ffb15 	stw	zero,-20(fp)
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/

		// now we append everything together!
		tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
10001094:	00802674 	movhi	r2,153
10001098:	10a5a004 	addi	r2,r2,-27008
1000109c:	0007883a 	mov	r3,zero
100010a0:	e13ff617 	ldw	r4,-40(fp)
100010a4:	e17ff717 	ldw	r5,-36(fp)
100010a8:	100d883a 	mov	r6,r2
100010ac:	180f883a 	mov	r7,r3
100010b0:	00031a80 	call	100031a8 <__muldi3>
100010b4:	1009883a 	mov	r4,r2
100010b8:	180b883a 	mov	r5,r3
100010bc:	2021883a 	mov	r16,r4
100010c0:	2823883a 	mov	r17,r5
100010c4:	00841eb4 	movhi	r2,4218
100010c8:	10900004 	addi	r2,r2,16384
100010cc:	00d6bcc4 	movi	r3,23283
100010d0:	e13ff817 	ldw	r4,-32(fp)
100010d4:	e17ff917 	ldw	r5,-28(fp)
100010d8:	100d883a 	mov	r6,r2
100010dc:	180f883a 	mov	r7,r3
100010e0:	00031a80 	call	100031a8 <__muldi3>
100010e4:	100d883a 	mov	r6,r2
100010e8:	180f883a 	mov	r7,r3
100010ec:	3009883a 	mov	r4,r6
100010f0:	380b883a 	mov	r5,r7
100010f4:	8105883a 	add	r2,r16,r4
100010f8:	140d803a 	cmpltu	r6,r2,r16
100010fc:	8947883a 	add	r3,r17,r5
10001100:	30c9883a 	add	r4,r6,r3
10001104:	2007883a 	mov	r3,r4
10001108:	100d883a 	mov	r6,r2
1000110c:	180f883a 	mov	r7,r3
10001110:	e13ff417 	ldw	r4,-48(fp)
10001114:	e17ff517 	ldw	r5,-44(fp)
10001118:	3105883a 	add	r2,r6,r4
1000111c:	1191803a 	cmpltu	r8,r2,r6
10001120:	3947883a 	add	r3,r7,r5
10001124:	40c9883a 	add	r4,r8,r3
10001128:	2007883a 	mov	r3,r4
1000112c:	1021883a 	mov	r16,r2
10001130:	1823883a 	mov	r17,r3
10001134:	009762b4 	movhi	r2,23946
10001138:	00c058f4 	movhi	r3,355
1000113c:	18d15e04 	addi	r3,r3,17784
10001140:	e13ffa17 	ldw	r4,-24(fp)
10001144:	e17ffb17 	ldw	r5,-20(fp)
10001148:	100d883a 	mov	r6,r2
1000114c:	180f883a 	mov	r7,r3
10001150:	00031a80 	call	100031a8 <__muldi3>
10001154:	100d883a 	mov	r6,r2
10001158:	180f883a 	mov	r7,r3
1000115c:	3009883a 	mov	r4,r6
10001160:	380b883a 	mov	r5,r7
10001164:	8105883a 	add	r2,r16,r4
10001168:	140d803a 	cmpltu	r6,r2,r16
1000116c:	8947883a 	add	r3,r17,r5
10001170:	30c9883a 	add	r4,r6,r3
10001174:	2007883a 	mov	r3,r4
10001178:	e0bfe915 	stw	r2,-92(fp)
1000117c:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001180:	e13fe917 	ldw	r4,-92(fp)
10001184:	e17fea17 	ldw	r5,-88(fp)
10001188:	00013a80 	call	100013a8 <convertBinaryToDecimal>
1000118c:	e0bffc15 	stw	r2,-16(fp)
10001190:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
10001194:	e0bffc17 	ldw	r2,-16(fp)
}
10001198:	e6fffe04 	addi	sp,fp,-8
1000119c:	dfc00317 	ldw	ra,12(sp)
100011a0:	df000217 	ldw	fp,8(sp)
100011a4:	dc400117 	ldw	r17,4(sp)
100011a8:	dc000017 	ldw	r16,0(sp)
100011ac:	dec00804 	addi	sp,sp,32
100011b0:	f800283a 	ret

100011b4 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
100011b4:	defff704 	addi	sp,sp,-36
100011b8:	dfc00815 	stw	ra,32(sp)
100011bc:	df000715 	stw	fp,28(sp)
100011c0:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
100011c4:	00804404 	movi	r2,272
100011c8:	10800003 	ldbu	r2,0(r2)
100011cc:	10803fcc 	andi	r2,r2,255
100011d0:	1080201c 	xori	r2,r2,128
100011d4:	10bfe004 	addi	r2,r2,-128
100011d8:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
100011dc:	e13ff917 	ldw	r4,-28(fp)
100011e0:	00012ec0 	call	100012ec <convertDecimalToBinary>
100011e4:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100011e8:	e03ffa15 	stw	zero,-24(fp)
100011ec:	00001406 	br	10001240 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
100011f0:	e0bff917 	ldw	r2,-28(fp)
100011f4:	1009883a 	mov	r4,r2
100011f8:	01400284 	movi	r5,10
100011fc:	00040a80 	call	100040a8 <__umodsi3>
10001200:	1007883a 	mov	r3,r2
10001204:	e0bffa17 	ldw	r2,-24(fp)
10001208:	1085883a 	add	r2,r2,r2
1000120c:	1085883a 	add	r2,r2,r2
10001210:	e13ff904 	addi	r4,fp,-28
10001214:	2085883a 	add	r2,r4,r2
10001218:	10800204 	addi	r2,r2,8
1000121c:	10c00015 	stw	r3,0(r2)

		port2 /= 10;
10001220:	e0bff917 	ldw	r2,-28(fp)
10001224:	1009883a 	mov	r4,r2
10001228:	01400284 	movi	r5,10
1000122c:	00040a00 	call	100040a0 <__udivsi3>
10001230:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001234:	e0bffa17 	ldw	r2,-24(fp)
10001238:	10800044 	addi	r2,r2,1
1000123c:	e0bffa15 	stw	r2,-24(fp)
10001240:	e0bffa17 	ldw	r2,-24(fp)
10001244:	10800150 	cmplti	r2,r2,5
10001248:	103fe91e 	bne	r2,zero,100011f0 <__alt_data_end+0xf80011f0>

		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
1000124c:	e0bffd17 	ldw	r2,-12(fp)
10001250:	d0a6d115 	stw	r2,-25788(gp)
	key2 = unpackaged[3];
10001254:	e0bffe17 	ldw	r2,-8(fp)
10001258:	d0a6d315 	stw	r2,-25780(gp)
	key3 = unpackaged[4];
1000125c:	e0bfff17 	ldw	r2,-4(fp)
10001260:	d0a6d215 	stw	r2,-25784(gp)
	cursorStreak = unpackaged[1];
10001264:	e0bffc17 	ldw	r2,-16(fp)
10001268:	d0a6d015 	stw	r2,-25792(gp)
	cursorClicked = unpackaged[0];
1000126c:	e0bffb17 	ldw	r2,-20(fp)
10001270:	d0a6cf15 	stw	r2,-25796(gp)

	if(key1)
10001274:	d0a6d117 	ldw	r2,-25788(gp)
10001278:	10000326 	beq	r2,zero,10001288 <port2Unpackager+0xd4>
	{
		printf("key1 pressed!");
1000127c:	01040074 	movhi	r4,4097
10001280:	2108d304 	addi	r4,r4,9036
10001284:	00069100 	call	10006910 <printf>
	}
	if(key2)
10001288:	d0a6d317 	ldw	r2,-25780(gp)
1000128c:	10000326 	beq	r2,zero,1000129c <port2Unpackager+0xe8>
	{
		printf("key2 pressed!");
10001290:	01040074 	movhi	r4,4097
10001294:	2108d704 	addi	r4,r4,9052
10001298:	00069100 	call	10006910 <printf>
	}
	if(key3)
1000129c:	d0a6d217 	ldw	r2,-25784(gp)
100012a0:	10000326 	beq	r2,zero,100012b0 <port2Unpackager+0xfc>
	{
		printf("key3 pressed!");
100012a4:	01040074 	movhi	r4,4097
100012a8:	2108db04 	addi	r4,r4,9068
100012ac:	00069100 	call	10006910 <printf>
	}
	if(cursorStreak)
100012b0:	d0a6d017 	ldw	r2,-25792(gp)
100012b4:	10000326 	beq	r2,zero,100012c4 <port2Unpackager+0x110>
	{
		printf("cursorstreak!");
100012b8:	01040074 	movhi	r4,4097
100012bc:	2108df04 	addi	r4,r4,9084
100012c0:	00069100 	call	10006910 <printf>
	}
	if(cursorClicked)
100012c4:	d0a6cf17 	ldw	r2,-25796(gp)
100012c8:	10000326 	beq	r2,zero,100012d8 <port2Unpackager+0x124>
	{
		printf("clicked!");
100012cc:	01040074 	movhi	r4,4097
100012d0:	2108e304 	addi	r4,r4,9100
100012d4:	00069100 	call	10006910 <printf>
	}

}
100012d8:	e037883a 	mov	sp,fp
100012dc:	dfc00117 	ldw	ra,4(sp)
100012e0:	df000017 	ldw	fp,0(sp)
100012e4:	dec00204 	addi	sp,sp,8
100012e8:	f800283a 	ret

100012ec <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
100012ec:	defff704 	addi	sp,sp,-36
100012f0:	dfc00815 	stw	ra,32(sp)
100012f4:	df000715 	stw	fp,28(sp)
100012f8:	dc400615 	stw	r17,24(sp)
100012fc:	dc000515 	stw	r16,20(sp)
10001300:	df000704 	addi	fp,sp,28
10001304:	e13ffd15 	stw	r4,-12(fp)
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
10001308:	e03ff915 	stw	zero,-28(fp)
1000130c:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
10001310:	00800044 	movi	r2,1
10001314:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
10001318:	00001906 	br	10001380 <convertDecimalToBinary+0x94>
    {
        remainder = n%2;
1000131c:	e0bffd17 	ldw	r2,-12(fp)
10001320:	1080004c 	andi	r2,r2,1
10001324:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
10001328:	e0bffd17 	ldw	r2,-12(fp)
1000132c:	1004d07a 	srli	r2,r2,1
10001330:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
10001334:	e13ffc17 	ldw	r4,-16(fp)
10001338:	e17ffb17 	ldw	r5,-20(fp)
1000133c:	00040b00 	call	100040b0 <__mulsi3>
10001340:	1021883a 	mov	r16,r2
10001344:	1005d7fa 	srai	r2,r2,31
10001348:	1023883a 	mov	r17,r2
1000134c:	e13ff917 	ldw	r4,-28(fp)
10001350:	e17ffa17 	ldw	r5,-24(fp)
10001354:	2405883a 	add	r2,r4,r16
10001358:	110d803a 	cmpltu	r6,r2,r4
1000135c:	2c47883a 	add	r3,r5,r17
10001360:	30c9883a 	add	r4,r6,r3
10001364:	2007883a 	mov	r3,r4
10001368:	e0bff915 	stw	r2,-28(fp)
1000136c:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
10001370:	e13ffb17 	ldw	r4,-20(fp)
10001374:	01400284 	movi	r5,10
10001378:	00040b00 	call	100040b0 <__mulsi3>
1000137c:	e0bffb15 	stw	r2,-20(fp)
{
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
10001380:	e0bffd17 	ldw	r2,-12(fp)
10001384:	103fe51e 	bne	r2,zero,1000131c <__alt_data_end+0xf800131c>
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
10001388:	e0bff917 	ldw	r2,-28(fp)
}
1000138c:	e6fffe04 	addi	sp,fp,-8
10001390:	dfc00317 	ldw	ra,12(sp)
10001394:	df000217 	ldw	fp,8(sp)
10001398:	dc400117 	ldw	r17,4(sp)
1000139c:	dc000017 	ldw	r16,0(sp)
100013a0:	dec00404 	addi	sp,sp,16
100013a4:	f800283a 	ret

100013a8 <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
100013a8:	defff704 	addi	sp,sp,-36
100013ac:	dfc00815 	stw	ra,32(sp)
100013b0:	df000715 	stw	fp,28(sp)
100013b4:	dc400615 	stw	r17,24(sp)
100013b8:	dc000515 	stw	r16,20(sp)
100013bc:	df000704 	addi	fp,sp,28
100013c0:	e13ffc15 	stw	r4,-16(fp)
100013c4:	e17ffd15 	stw	r5,-12(fp)
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
100013c8:	e03ff915 	stw	zero,-28(fp)
100013cc:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
100013d0:	00004706 	br	100014f0 <convertBinaryToDecimal+0x148>
    {
        remainder = n%10;
100013d4:	e0bffc17 	ldw	r2,-16(fp)
100013d8:	e0fffd17 	ldw	r3,-12(fp)
100013dc:	01c00284 	movi	r7,10
100013e0:	0011883a 	mov	r8,zero
100013e4:	1009883a 	mov	r4,r2
100013e8:	180b883a 	mov	r5,r3
100013ec:	380d883a 	mov	r6,r7
100013f0:	400f883a 	mov	r7,r8
100013f4:	00039680 	call	10003968 <__umoddi3>
100013f8:	1009883a 	mov	r4,r2
100013fc:	180b883a 	mov	r5,r3
10001400:	2005883a 	mov	r2,r4
10001404:	2807883a 	mov	r3,r5
10001408:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
1000140c:	e0bffc17 	ldw	r2,-16(fp)
10001410:	e0fffd17 	ldw	r3,-12(fp)
10001414:	01c00284 	movi	r7,10
10001418:	0011883a 	mov	r8,zero
1000141c:	1009883a 	mov	r4,r2
10001420:	180b883a 	mov	r5,r3
10001424:	380d883a 	mov	r6,r7
10001428:	400f883a 	mov	r7,r8
1000142c:	00033280 	call	10003328 <__udivdi3>
10001430:	1009883a 	mov	r4,r2
10001434:	180b883a 	mov	r5,r3
10001438:	e13ffc15 	stw	r4,-16(fp)
1000143c:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
10001440:	e13ffb17 	ldw	r4,-20(fp)
10001444:	00067cc0 	call	100067cc <__floatunsidf>
10001448:	1021883a 	mov	r16,r2
1000144c:	1823883a 	mov	r17,r3
10001450:	e13ffa17 	ldw	r4,-24(fp)
10001454:	00067cc0 	call	100067cc <__floatunsidf>
10001458:	100f883a 	mov	r7,r2
1000145c:	1811883a 	mov	r8,r3
10001460:	0009883a 	mov	r4,zero
10001464:	01500034 	movhi	r5,16384
10001468:	380d883a 	mov	r6,r7
1000146c:	400f883a 	mov	r7,r8
10001470:	00015200 	call	10001520 <pow>
10001474:	100f883a 	mov	r7,r2
10001478:	1811883a 	mov	r8,r3
1000147c:	8009883a 	mov	r4,r16
10001480:	880b883a 	mov	r5,r17
10001484:	380d883a 	mov	r6,r7
10001488:	400f883a 	mov	r7,r8
1000148c:	00055380 	call	10005538 <__muldf3>
10001490:	1009883a 	mov	r4,r2
10001494:	180b883a 	mov	r5,r3
10001498:	2021883a 	mov	r16,r4
1000149c:	2823883a 	mov	r17,r5
100014a0:	e13ff917 	ldw	r4,-28(fp)
100014a4:	00067cc0 	call	100067cc <__floatunsidf>
100014a8:	100b883a 	mov	r5,r2
100014ac:	180d883a 	mov	r6,r3
100014b0:	2809883a 	mov	r4,r5
100014b4:	300b883a 	mov	r5,r6
100014b8:	800d883a 	mov	r6,r16
100014bc:	880f883a 	mov	r7,r17
100014c0:	00040d80 	call	100040d8 <__adddf3>
100014c4:	1009883a 	mov	r4,r2
100014c8:	180b883a 	mov	r5,r3
100014cc:	2005883a 	mov	r2,r4
100014d0:	2807883a 	mov	r3,r5
100014d4:	1009883a 	mov	r4,r2
100014d8:	180b883a 	mov	r5,r3
100014dc:	00032b40 	call	100032b4 <__fixunsdfsi>
100014e0:	e0bff915 	stw	r2,-28(fp)
        ++i;
100014e4:	e0bffa17 	ldw	r2,-24(fp)
100014e8:	10800044 	addi	r2,r2,1
100014ec:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
    while (n!=0)
100014f0:	e0bffc17 	ldw	r2,-16(fp)
100014f4:	e0fffd17 	ldw	r3,-12(fp)
100014f8:	10c4b03a 	or	r2,r2,r3
100014fc:	103fb51e 	bne	r2,zero,100013d4 <__alt_data_end+0xf80013d4>
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
  //  printf("decimal output: %lu\n", decimalNumber);
    return decimalNumber;
10001500:	e0bff917 	ldw	r2,-28(fp)
}
10001504:	e6fffe04 	addi	sp,fp,-8
10001508:	dfc00317 	ldw	ra,12(sp)
1000150c:	df000217 	ldw	fp,8(sp)
10001510:	dc400117 	ldw	r17,4(sp)
10001514:	dc000017 	ldw	r16,0(sp)
10001518:	dec00404 	addi	sp,sp,16
1000151c:	f800283a 	ret

10001520 <pow>:
10001520:	deffee04 	addi	sp,sp,-72
10001524:	dc800b15 	stw	r18,44(sp)
10001528:	04840074 	movhi	r18,4097
1000152c:	ddc01015 	stw	r23,64(sp)
10001530:	dd800f15 	stw	r22,60(sp)
10001534:	dd400e15 	stw	r21,56(sp)
10001538:	dd000d15 	stw	r20,52(sp)
1000153c:	dcc00c15 	stw	r19,48(sp)
10001540:	dc400a15 	stw	r17,40(sp)
10001544:	dc000915 	stw	r16,36(sp)
10001548:	dfc01115 	stw	ra,68(sp)
1000154c:	94906104 	addi	r18,r18,16772
10001550:	202f883a 	mov	r23,r4
10001554:	282d883a 	mov	r22,r5
10001558:	302b883a 	mov	r21,r6
1000155c:	3829883a 	mov	r20,r7
10001560:	00019c40 	call	100019c4 <__ieee754_pow>
10001564:	1023883a 	mov	r17,r2
10001568:	90800017 	ldw	r2,0(r18)
1000156c:	04ffffc4 	movi	r19,-1
10001570:	1821883a 	mov	r16,r3
10001574:	14c00426 	beq	r2,r19,10001588 <pow+0x68>
10001578:	a809883a 	mov	r4,r21
1000157c:	a00b883a 	mov	r5,r20
10001580:	0002d540 	call	10002d54 <__fpclassifyd>
10001584:	10000d1e 	bne	r2,zero,100015bc <pow+0x9c>
10001588:	8805883a 	mov	r2,r17
1000158c:	8007883a 	mov	r3,r16
10001590:	dfc01117 	ldw	ra,68(sp)
10001594:	ddc01017 	ldw	r23,64(sp)
10001598:	dd800f17 	ldw	r22,60(sp)
1000159c:	dd400e17 	ldw	r21,56(sp)
100015a0:	dd000d17 	ldw	r20,52(sp)
100015a4:	dcc00c17 	ldw	r19,48(sp)
100015a8:	dc800b17 	ldw	r18,44(sp)
100015ac:	dc400a17 	ldw	r17,40(sp)
100015b0:	dc000917 	ldw	r16,36(sp)
100015b4:	dec01204 	addi	sp,sp,72
100015b8:	f800283a 	ret
100015bc:	b809883a 	mov	r4,r23
100015c0:	b00b883a 	mov	r5,r22
100015c4:	0002d540 	call	10002d54 <__fpclassifyd>
100015c8:	1000221e 	bne	r2,zero,10001654 <pow+0x134>
100015cc:	a809883a 	mov	r4,r21
100015d0:	a00b883a 	mov	r5,r20
100015d4:	000d883a 	mov	r6,zero
100015d8:	000f883a 	mov	r7,zero
100015dc:	00052f40 	call	100052f4 <__eqdf2>
100015e0:	103fe91e 	bne	r2,zero,10001588 <__alt_data_end+0xf8001588>
100015e4:	00c00044 	movi	r3,1
100015e8:	d8c00015 	stw	r3,0(sp)
100015ec:	00c40074 	movhi	r3,4097
100015f0:	18c8e604 	addi	r3,r3,9112
100015f4:	90800017 	ldw	r2,0(r18)
100015f8:	d8c00115 	stw	r3,4(sp)
100015fc:	00cffc34 	movhi	r3,16368
10001600:	d8000815 	stw	zero,32(sp)
10001604:	ddc00215 	stw	r23,8(sp)
10001608:	dd800315 	stw	r22,12(sp)
1000160c:	dd400415 	stw	r21,16(sp)
10001610:	dd000515 	stw	r20,20(sp)
10001614:	d8000615 	stw	zero,24(sp)
10001618:	d8c00715 	stw	r3,28(sp)
1000161c:	14c00a26 	beq	r2,r19,10001648 <pow+0x128>
10001620:	00c00084 	movi	r3,2
10001624:	10c00826 	beq	r2,r3,10001648 <pow+0x128>
10001628:	d809883a 	mov	r4,sp
1000162c:	0002dc80 	call	10002dc8 <matherr>
10001630:	10006b26 	beq	r2,zero,100017e0 <pow+0x2c0>
10001634:	d8800817 	ldw	r2,32(sp)
10001638:	10000326 	beq	r2,zero,10001648 <pow+0x128>
1000163c:	00068d40 	call	100068d4 <__errno>
10001640:	d8c00817 	ldw	r3,32(sp)
10001644:	10c00015 	stw	r3,0(r2)
10001648:	d8800617 	ldw	r2,24(sp)
1000164c:	d8c00717 	ldw	r3,28(sp)
10001650:	003fcf06 	br	10001590 <__alt_data_end+0xf8001590>
10001654:	b809883a 	mov	r4,r23
10001658:	b00b883a 	mov	r5,r22
1000165c:	000d883a 	mov	r6,zero
10001660:	000f883a 	mov	r7,zero
10001664:	00052f40 	call	100052f4 <__eqdf2>
10001668:	1000171e 	bne	r2,zero,100016c8 <pow+0x1a8>
1000166c:	a809883a 	mov	r4,r21
10001670:	a00b883a 	mov	r5,r20
10001674:	000d883a 	mov	r6,zero
10001678:	000f883a 	mov	r7,zero
1000167c:	00052f40 	call	100052f4 <__eqdf2>
10001680:	1000381e 	bne	r2,zero,10001764 <pow+0x244>
10001684:	00c00044 	movi	r3,1
10001688:	d8c00015 	stw	r3,0(sp)
1000168c:	90800017 	ldw	r2,0(r18)
10001690:	00c40074 	movhi	r3,4097
10001694:	18c8e604 	addi	r3,r3,9112
10001698:	d8c00115 	stw	r3,4(sp)
1000169c:	d8000815 	stw	zero,32(sp)
100016a0:	ddc00215 	stw	r23,8(sp)
100016a4:	dd800315 	stw	r22,12(sp)
100016a8:	dd400415 	stw	r21,16(sp)
100016ac:	dd000515 	stw	r20,20(sp)
100016b0:	d8000615 	stw	zero,24(sp)
100016b4:	d8000715 	stw	zero,28(sp)
100016b8:	103fdb26 	beq	r2,zero,10001628 <__alt_data_end+0xf8001628>
100016bc:	008ffc34 	movhi	r2,16368
100016c0:	d8800715 	stw	r2,28(sp)
100016c4:	003fe006 	br	10001648 <__alt_data_end+0xf8001648>
100016c8:	8809883a 	mov	r4,r17
100016cc:	800b883a 	mov	r5,r16
100016d0:	0002d380 	call	10002d38 <finite>
100016d4:	10004626 	beq	r2,zero,100017f0 <pow+0x2d0>
100016d8:	8809883a 	mov	r4,r17
100016dc:	800b883a 	mov	r5,r16
100016e0:	000d883a 	mov	r6,zero
100016e4:	000f883a 	mov	r7,zero
100016e8:	00052f40 	call	100052f4 <__eqdf2>
100016ec:	103fa61e 	bne	r2,zero,10001588 <__alt_data_end+0xf8001588>
100016f0:	b809883a 	mov	r4,r23
100016f4:	b00b883a 	mov	r5,r22
100016f8:	0002d380 	call	10002d38 <finite>
100016fc:	103fa226 	beq	r2,zero,10001588 <__alt_data_end+0xf8001588>
10001700:	a809883a 	mov	r4,r21
10001704:	a00b883a 	mov	r5,r20
10001708:	0002d380 	call	10002d38 <finite>
1000170c:	103f9e26 	beq	r2,zero,10001588 <__alt_data_end+0xf8001588>
10001710:	00800104 	movi	r2,4
10001714:	d8800015 	stw	r2,0(sp)
10001718:	90c00017 	ldw	r3,0(r18)
1000171c:	00840074 	movhi	r2,4097
10001720:	1088e604 	addi	r2,r2,9112
10001724:	d8800115 	stw	r2,4(sp)
10001728:	d8000815 	stw	zero,32(sp)
1000172c:	ddc00215 	stw	r23,8(sp)
10001730:	dd800315 	stw	r22,12(sp)
10001734:	dd400415 	stw	r21,16(sp)
10001738:	dd000515 	stw	r20,20(sp)
1000173c:	d8000615 	stw	zero,24(sp)
10001740:	d8000715 	stw	zero,28(sp)
10001744:	00800084 	movi	r2,2
10001748:	18806126 	beq	r3,r2,100018d0 <pow+0x3b0>
1000174c:	d809883a 	mov	r4,sp
10001750:	0002dc80 	call	10002dc8 <matherr>
10001754:	10005e26 	beq	r2,zero,100018d0 <pow+0x3b0>
10001758:	d8800817 	ldw	r2,32(sp)
1000175c:	103fba26 	beq	r2,zero,10001648 <__alt_data_end+0xf8001648>
10001760:	003fb606 	br	1000163c <__alt_data_end+0xf800163c>
10001764:	a809883a 	mov	r4,r21
10001768:	a00b883a 	mov	r5,r20
1000176c:	0002d380 	call	10002d38 <finite>
10001770:	103f8526 	beq	r2,zero,10001588 <__alt_data_end+0xf8001588>
10001774:	a809883a 	mov	r4,r21
10001778:	a00b883a 	mov	r5,r20
1000177c:	000d883a 	mov	r6,zero
10001780:	000f883a 	mov	r7,zero
10001784:	00054580 	call	10005458 <__ledf2>
10001788:	103f7f0e 	bge	r2,zero,10001588 <__alt_data_end+0xf8001588>
1000178c:	00c00044 	movi	r3,1
10001790:	d8c00015 	stw	r3,0(sp)
10001794:	90800017 	ldw	r2,0(r18)
10001798:	00c40074 	movhi	r3,4097
1000179c:	18c8e604 	addi	r3,r3,9112
100017a0:	d8c00115 	stw	r3,4(sp)
100017a4:	d8000815 	stw	zero,32(sp)
100017a8:	ddc00215 	stw	r23,8(sp)
100017ac:	dd800315 	stw	r22,12(sp)
100017b0:	dd400415 	stw	r21,16(sp)
100017b4:	dd000515 	stw	r20,20(sp)
100017b8:	d8000615 	stw	zero,24(sp)
100017bc:	10002526 	beq	r2,zero,10001854 <pow+0x334>
100017c0:	00fffc34 	movhi	r3,65520
100017c4:	d8c00715 	stw	r3,28(sp)
100017c8:	00c00084 	movi	r3,2
100017cc:	10c0221e 	bne	r2,r3,10001858 <pow+0x338>
100017d0:	00068d40 	call	100068d4 <__errno>
100017d4:	00c00844 	movi	r3,33
100017d8:	10c00015 	stw	r3,0(r2)
100017dc:	003fde06 	br	10001758 <__alt_data_end+0xf8001758>
100017e0:	00068d40 	call	100068d4 <__errno>
100017e4:	00c00844 	movi	r3,33
100017e8:	10c00015 	stw	r3,0(r2)
100017ec:	003f9106 	br	10001634 <__alt_data_end+0xf8001634>
100017f0:	b809883a 	mov	r4,r23
100017f4:	b00b883a 	mov	r5,r22
100017f8:	0002d380 	call	10002d38 <finite>
100017fc:	103fb626 	beq	r2,zero,100016d8 <__alt_data_end+0xf80016d8>
10001800:	a809883a 	mov	r4,r21
10001804:	a00b883a 	mov	r5,r20
10001808:	0002d380 	call	10002d38 <finite>
1000180c:	103fb226 	beq	r2,zero,100016d8 <__alt_data_end+0xf80016d8>
10001810:	8809883a 	mov	r4,r17
10001814:	800b883a 	mov	r5,r16
10001818:	0002d540 	call	10002d54 <__fpclassifyd>
1000181c:	1000121e 	bne	r2,zero,10001868 <pow+0x348>
10001820:	00800044 	movi	r2,1
10001824:	d8800015 	stw	r2,0(sp)
10001828:	94000017 	ldw	r16,0(r18)
1000182c:	00840074 	movhi	r2,4097
10001830:	1088e604 	addi	r2,r2,9112
10001834:	d8800115 	stw	r2,4(sp)
10001838:	d8000815 	stw	zero,32(sp)
1000183c:	ddc00215 	stw	r23,8(sp)
10001840:	dd800315 	stw	r22,12(sp)
10001844:	dd400415 	stw	r21,16(sp)
10001848:	dd000515 	stw	r20,20(sp)
1000184c:	8000241e 	bne	r16,zero,100018e0 <pow+0x3c0>
10001850:	d8000615 	stw	zero,24(sp)
10001854:	d8000715 	stw	zero,28(sp)
10001858:	d809883a 	mov	r4,sp
1000185c:	0002dc80 	call	10002dc8 <matherr>
10001860:	103fbd1e 	bne	r2,zero,10001758 <__alt_data_end+0xf8001758>
10001864:	003fda06 	br	100017d0 <__alt_data_end+0xf80017d0>
10001868:	00c000c4 	movi	r3,3
1000186c:	d8c00015 	stw	r3,0(sp)
10001870:	90800017 	ldw	r2,0(r18)
10001874:	00c40074 	movhi	r3,4097
10001878:	18c8e604 	addi	r3,r3,9112
1000187c:	d8c00115 	stw	r3,4(sp)
10001880:	d8000815 	stw	zero,32(sp)
10001884:	ddc00215 	stw	r23,8(sp)
10001888:	dd800315 	stw	r22,12(sp)
1000188c:	dd400415 	stw	r21,16(sp)
10001890:	dd000515 	stw	r20,20(sp)
10001894:	b809883a 	mov	r4,r23
10001898:	b00b883a 	mov	r5,r22
1000189c:	000d883a 	mov	r6,zero
100018a0:	000f883a 	mov	r7,zero
100018a4:	1000181e 	bne	r2,zero,10001908 <pow+0x3e8>
100018a8:	00b80034 	movhi	r2,57344
100018ac:	d8800615 	stw	r2,24(sp)
100018b0:	0091fc34 	movhi	r2,18416
100018b4:	10bfffc4 	addi	r2,r2,-1
100018b8:	d8800715 	stw	r2,28(sp)
100018bc:	00054580 	call	10005458 <__ledf2>
100018c0:	10002a16 	blt	r2,zero,1000196c <pow+0x44c>
100018c4:	90c00017 	ldw	r3,0(r18)
100018c8:	00800084 	movi	r2,2
100018cc:	18bf9f1e 	bne	r3,r2,1000174c <__alt_data_end+0xf800174c>
100018d0:	00068d40 	call	100068d4 <__errno>
100018d4:	00c00884 	movi	r3,34
100018d8:	10c00015 	stw	r3,0(r2)
100018dc:	003f9e06 	br	10001758 <__alt_data_end+0xf8001758>
100018e0:	0009883a 	mov	r4,zero
100018e4:	000b883a 	mov	r5,zero
100018e8:	000d883a 	mov	r6,zero
100018ec:	000f883a 	mov	r7,zero
100018f0:	00049740 	call	10004974 <__divdf3>
100018f4:	d8800615 	stw	r2,24(sp)
100018f8:	d8c00715 	stw	r3,28(sp)
100018fc:	00800084 	movi	r2,2
10001900:	80bfb326 	beq	r16,r2,100017d0 <__alt_data_end+0xf80017d0>
10001904:	003fd406 	br	10001858 <__alt_data_end+0xf8001858>
10001908:	009ffc34 	movhi	r2,32752
1000190c:	d8000615 	stw	zero,24(sp)
10001910:	d8800715 	stw	r2,28(sp)
10001914:	00054580 	call	10005458 <__ledf2>
10001918:	103fea0e 	bge	r2,zero,100018c4 <__alt_data_end+0xf80018c4>
1000191c:	000d883a 	mov	r6,zero
10001920:	01cff834 	movhi	r7,16352
10001924:	a809883a 	mov	r4,r21
10001928:	a00b883a 	mov	r5,r20
1000192c:	00055380 	call	10005538 <__muldf3>
10001930:	1009883a 	mov	r4,r2
10001934:	180b883a 	mov	r5,r3
10001938:	1023883a 	mov	r17,r2
1000193c:	1821883a 	mov	r16,r3
10001940:	0002ddc0 	call	10002ddc <rint>
10001944:	1009883a 	mov	r4,r2
10001948:	180b883a 	mov	r5,r3
1000194c:	880d883a 	mov	r6,r17
10001950:	800f883a 	mov	r7,r16
10001954:	00052f40 	call	100052f4 <__eqdf2>
10001958:	103fda26 	beq	r2,zero,100018c4 <__alt_data_end+0xf80018c4>
1000195c:	00bffc34 	movhi	r2,65520
10001960:	d8000615 	stw	zero,24(sp)
10001964:	d8800715 	stw	r2,28(sp)
10001968:	003fd606 	br	100018c4 <__alt_data_end+0xf80018c4>
1000196c:	000d883a 	mov	r6,zero
10001970:	01cff834 	movhi	r7,16352
10001974:	a809883a 	mov	r4,r21
10001978:	a00b883a 	mov	r5,r20
1000197c:	00055380 	call	10005538 <__muldf3>
10001980:	1009883a 	mov	r4,r2
10001984:	180b883a 	mov	r5,r3
10001988:	1023883a 	mov	r17,r2
1000198c:	1821883a 	mov	r16,r3
10001990:	0002ddc0 	call	10002ddc <rint>
10001994:	1009883a 	mov	r4,r2
10001998:	180b883a 	mov	r5,r3
1000199c:	880d883a 	mov	r6,r17
100019a0:	800f883a 	mov	r7,r16
100019a4:	00052f40 	call	100052f4 <__eqdf2>
100019a8:	103fc626 	beq	r2,zero,100018c4 <__alt_data_end+0xf80018c4>
100019ac:	00b80034 	movhi	r2,57344
100019b0:	d8800615 	stw	r2,24(sp)
100019b4:	00b1fc34 	movhi	r2,51184
100019b8:	10bfffc4 	addi	r2,r2,-1
100019bc:	d8800715 	stw	r2,28(sp)
100019c0:	003fc006 	br	100018c4 <__alt_data_end+0xf80018c4>

100019c4 <__ieee754_pow>:
100019c4:	00a00034 	movhi	r2,32768
100019c8:	deffec04 	addi	sp,sp,-80
100019cc:	10bfffc4 	addi	r2,r2,-1
100019d0:	dc400b15 	stw	r17,44(sp)
100019d4:	38a2703a 	and	r17,r7,r2
100019d8:	dfc01315 	stw	ra,76(sp)
100019dc:	df001215 	stw	fp,72(sp)
100019e0:	ddc01115 	stw	r23,68(sp)
100019e4:	dd801015 	stw	r22,64(sp)
100019e8:	dd400f15 	stw	r21,60(sp)
100019ec:	dd000e15 	stw	r20,56(sp)
100019f0:	dcc00d15 	stw	r19,52(sp)
100019f4:	dc800c15 	stw	r18,48(sp)
100019f8:	dc000a15 	stw	r16,40(sp)
100019fc:	8986b03a 	or	r3,r17,r6
10001a00:	18002a26 	beq	r3,zero,10001aac <__ieee754_pow+0xe8>
10001a04:	28a4703a 	and	r18,r5,r2
10001a08:	009ffc34 	movhi	r2,32752
10001a0c:	14802316 	blt	r2,r18,10001a9c <__ieee754_pow+0xd8>
10001a10:	90802126 	beq	r18,r2,10001a98 <__ieee754_pow+0xd4>
10001a14:	14402116 	blt	r2,r17,10001a9c <__ieee754_pow+0xd8>
10001a18:	009ffc34 	movhi	r2,32752
10001a1c:	88807326 	beq	r17,r2,10001bec <__ieee754_pow+0x228>
10001a20:	2827883a 	mov	r19,r5
10001a24:	2021883a 	mov	r16,r4
10001a28:	302b883a 	mov	r21,r6
10001a2c:	382f883a 	mov	r23,r7
10001a30:	28007016 	blt	r5,zero,10001bf4 <__ieee754_pow+0x230>
10001a34:	0039883a 	mov	fp,zero
10001a38:	a8003a1e 	bne	r21,zero,10001b24 <__ieee754_pow+0x160>
10001a3c:	009ffc34 	movhi	r2,32752
10001a40:	88807e26 	beq	r17,r2,10001c3c <__ieee754_pow+0x278>
10001a44:	008ffc34 	movhi	r2,16368
10001a48:	88805426 	beq	r17,r2,10001b9c <__ieee754_pow+0x1d8>
10001a4c:	00900034 	movhi	r2,16384
10001a50:	b8834926 	beq	r23,r2,10002778 <__ieee754_pow+0xdb4>
10001a54:	008ff834 	movhi	r2,16352
10001a58:	b880321e 	bne	r23,r2,10001b24 <__ieee754_pow+0x160>
10001a5c:	98003116 	blt	r19,zero,10001b24 <__ieee754_pow+0x160>
10001a60:	8009883a 	mov	r4,r16
10001a64:	980b883a 	mov	r5,r19
10001a68:	dfc01317 	ldw	ra,76(sp)
10001a6c:	df001217 	ldw	fp,72(sp)
10001a70:	ddc01117 	ldw	r23,68(sp)
10001a74:	dd801017 	ldw	r22,64(sp)
10001a78:	dd400f17 	ldw	r21,60(sp)
10001a7c:	dd000e17 	ldw	r20,56(sp)
10001a80:	dcc00d17 	ldw	r19,52(sp)
10001a84:	dc800c17 	ldw	r18,48(sp)
10001a88:	dc400b17 	ldw	r17,44(sp)
10001a8c:	dc000a17 	ldw	r16,40(sp)
10001a90:	dec01404 	addi	sp,sp,80
10001a94:	0002a901 	jmpi	10002a90 <__ieee754_sqrt>
10001a98:	20001226 	beq	r4,zero,10001ae4 <__ieee754_pow+0x120>
10001a9c:	00b00434 	movhi	r2,49168
10001aa0:	9085883a 	add	r2,r18,r2
10001aa4:	1108b03a 	or	r4,r2,r4
10001aa8:	20000f1e 	bne	r4,zero,10001ae8 <__ieee754_pow+0x124>
10001aac:	0005883a 	mov	r2,zero
10001ab0:	00cffc34 	movhi	r3,16368
10001ab4:	dfc01317 	ldw	ra,76(sp)
10001ab8:	df001217 	ldw	fp,72(sp)
10001abc:	ddc01117 	ldw	r23,68(sp)
10001ac0:	dd801017 	ldw	r22,64(sp)
10001ac4:	dd400f17 	ldw	r21,60(sp)
10001ac8:	dd000e17 	ldw	r20,56(sp)
10001acc:	dcc00d17 	ldw	r19,52(sp)
10001ad0:	dc800c17 	ldw	r18,48(sp)
10001ad4:	dc400b17 	ldw	r17,44(sp)
10001ad8:	dc000a17 	ldw	r16,40(sp)
10001adc:	dec01404 	addi	sp,sp,80
10001ae0:	f800283a 	ret
10001ae4:	947fcc0e 	bge	r18,r17,10001a18 <__alt_data_end+0xf8001a18>
10001ae8:	01040074 	movhi	r4,4097
10001aec:	21094004 	addi	r4,r4,9472
10001af0:	dfc01317 	ldw	ra,76(sp)
10001af4:	df001217 	ldw	fp,72(sp)
10001af8:	ddc01117 	ldw	r23,68(sp)
10001afc:	dd801017 	ldw	r22,64(sp)
10001b00:	dd400f17 	ldw	r21,60(sp)
10001b04:	dd000e17 	ldw	r20,56(sp)
10001b08:	dcc00d17 	ldw	r19,52(sp)
10001b0c:	dc800c17 	ldw	r18,48(sp)
10001b10:	dc400b17 	ldw	r17,44(sp)
10001b14:	dc000a17 	ldw	r16,40(sp)
10001b18:	dec01404 	addi	sp,sp,80
10001b1c:	0002dd01 	jmpi	10002dd0 <nan>
10001b20:	0039883a 	mov	fp,zero
10001b24:	8009883a 	mov	r4,r16
10001b28:	980b883a 	mov	r5,r19
10001b2c:	0002d240 	call	10002d24 <fabs>
10001b30:	102d883a 	mov	r22,r2
10001b34:	80000f26 	beq	r16,zero,10001b74 <__ieee754_pow+0x1b0>
10001b38:	9816d7fa 	srli	r11,r19,31
10001b3c:	5affffc4 	addi	r11,r11,-1
10001b40:	e2c4b03a 	or	r2,fp,r11
10001b44:	10004a26 	beq	r2,zero,10001c70 <__ieee754_pow+0x2ac>
10001b48:	00907834 	movhi	r2,16864
10001b4c:	1440530e 	bge	r2,r17,10001c9c <__ieee754_pow+0x2d8>
10001b50:	0090fc34 	movhi	r2,17392
10001b54:	14433e0e 	bge	r2,r17,10002850 <__ieee754_pow+0xe8c>
10001b58:	008ffc34 	movhi	r2,16368
10001b5c:	10bfffc4 	addi	r2,r2,-1
10001b60:	14801916 	blt	r2,r18,10001bc8 <__ieee754_pow+0x204>
10001b64:	b8001916 	blt	r23,zero,10001bcc <__ieee754_pow+0x208>
10001b68:	0005883a 	mov	r2,zero
10001b6c:	0007883a 	mov	r3,zero
10001b70:	003fd006 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001b74:	90000526 	beq	r18,zero,10001b8c <__ieee754_pow+0x1c8>
10001b78:	00900034 	movhi	r2,16384
10001b7c:	10bfffc4 	addi	r2,r2,-1
10001b80:	9884703a 	and	r2,r19,r2
10001b84:	010ffc34 	movhi	r4,16368
10001b88:	113feb1e 	bne	r2,r4,10001b38 <__alt_data_end+0xf8001b38>
10001b8c:	b8000716 	blt	r23,zero,10001bac <__ieee754_pow+0x1e8>
10001b90:	9802f216 	blt	r19,zero,1000275c <__ieee754_pow+0xd98>
10001b94:	b005883a 	mov	r2,r22
10001b98:	003fc606 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001b9c:	b8038816 	blt	r23,zero,100029c0 <__ieee754_pow+0xffc>
10001ba0:	8005883a 	mov	r2,r16
10001ba4:	9807883a 	mov	r3,r19
10001ba8:	003fc206 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001bac:	b00d883a 	mov	r6,r22
10001bb0:	0009883a 	mov	r4,zero
10001bb4:	014ffc34 	movhi	r5,16368
10001bb8:	180f883a 	mov	r7,r3
10001bbc:	00049740 	call	10004974 <__divdf3>
10001bc0:	102d883a 	mov	r22,r2
10001bc4:	003ff206 	br	10001b90 <__alt_data_end+0xf8001b90>
10001bc8:	05ffe70e 	bge	zero,r23,10001b68 <__alt_data_end+0xf8001b68>
10001bcc:	01220034 	movhi	r4,34816
10001bd0:	015f8e34 	movhi	r5,32312
10001bd4:	211d6704 	addi	r4,r4,30108
10001bd8:	29790f04 	addi	r5,r5,-7108
10001bdc:	200d883a 	mov	r6,r4
10001be0:	280f883a 	mov	r7,r5
10001be4:	00055380 	call	10005538 <__muldf3>
10001be8:	003fb206 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001bec:	303f8c26 	beq	r6,zero,10001a20 <__alt_data_end+0xf8001a20>
10001bf0:	003faa06 	br	10001a9c <__alt_data_end+0xf8001a9c>
10001bf4:	0090d034 	movhi	r2,17216
10001bf8:	10bfffc4 	addi	r2,r2,-1
10001bfc:	14401a16 	blt	r2,r17,10001c68 <__ieee754_pow+0x2a4>
10001c00:	008ffc34 	movhi	r2,16368
10001c04:	10bfffc4 	addi	r2,r2,-1
10001c08:	147f8a0e 	bge	r2,r17,10001a34 <__alt_data_end+0xf8001a34>
10001c0c:	8809d53a 	srai	r4,r17,20
10001c10:	00c104c4 	movi	r3,1043
10001c14:	1903840e 	bge	r3,r4,10002a28 <__ieee754_pow+0x1064>
10001c18:	00810cc4 	movi	r2,1075
10001c1c:	1105c83a 	sub	r2,r2,r4
10001c20:	3086d83a 	srl	r3,r6,r2
10001c24:	1884983a 	sll	r2,r3,r2
10001c28:	11bf821e 	bne	r2,r6,10001a34 <__alt_data_end+0xf8001a34>
10001c2c:	18c0004c 	andi	r3,r3,1
10001c30:	02800084 	movi	r10,2
10001c34:	50f9c83a 	sub	fp,r10,r3
10001c38:	003f7f06 	br	10001a38 <__alt_data_end+0xf8001a38>
10001c3c:	01300434 	movhi	r4,49168
10001c40:	9109883a 	add	r4,r18,r4
10001c44:	2408b03a 	or	r4,r4,r16
10001c48:	203f9826 	beq	r4,zero,10001aac <__alt_data_end+0xf8001aac>
10001c4c:	008ffc34 	movhi	r2,16368
10001c50:	10bfffc4 	addi	r2,r2,-1
10001c54:	1482f50e 	bge	r2,r18,1000282c <__ieee754_pow+0xe68>
10001c58:	b83fc316 	blt	r23,zero,10001b68 <__alt_data_end+0xf8001b68>
10001c5c:	0005883a 	mov	r2,zero
10001c60:	b807883a 	mov	r3,r23
10001c64:	003f9306 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001c68:	07000084 	movi	fp,2
10001c6c:	003f7206 	br	10001a38 <__alt_data_end+0xf8001a38>
10001c70:	8009883a 	mov	r4,r16
10001c74:	980b883a 	mov	r5,r19
10001c78:	200d883a 	mov	r6,r4
10001c7c:	280f883a 	mov	r7,r5
10001c80:	0005da40 	call	10005da4 <__subdf3>
10001c84:	1009883a 	mov	r4,r2
10001c88:	180b883a 	mov	r5,r3
10001c8c:	100d883a 	mov	r6,r2
10001c90:	180f883a 	mov	r7,r3
10001c94:	00049740 	call	10004974 <__divdf3>
10001c98:	003f8606 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001c9c:	00800434 	movhi	r2,16
10001ca0:	10bfffc4 	addi	r2,r2,-1
10001ca4:	1482e816 	blt	r2,r18,10002848 <__ieee754_pow+0xe84>
10001ca8:	b009883a 	mov	r4,r22
10001cac:	180b883a 	mov	r5,r3
10001cb0:	000d883a 	mov	r6,zero
10001cb4:	01d0d034 	movhi	r7,17216
10001cb8:	dac00915 	stw	r11,36(sp)
10001cbc:	00055380 	call	10005538 <__muldf3>
10001cc0:	dac00917 	ldw	r11,36(sp)
10001cc4:	102d883a 	mov	r22,r2
10001cc8:	1825883a 	mov	r18,r3
10001ccc:	013ff2c4 	movi	r4,-53
10001cd0:	9007d53a 	srai	r3,r18,20
10001cd4:	00800434 	movhi	r2,16
10001cd8:	10bfffc4 	addi	r2,r2,-1
10001cdc:	18ff0044 	addi	r3,r3,-1023
10001ce0:	1911883a 	add	r8,r3,r4
10001ce4:	00c00134 	movhi	r3,4
10001ce8:	9084703a 	and	r2,r18,r2
10001cec:	18e62384 	addi	r3,r3,-26482
10001cf0:	14cffc34 	orhi	r19,r2,16368
10001cf4:	1882d10e 	bge	r3,r2,1000283c <__ieee754_pow+0xe78>
10001cf8:	00c00334 	movhi	r3,12
10001cfc:	18ed9e44 	addi	r3,r3,-18823
10001d00:	1883550e 	bge	r3,r2,10002a58 <__ieee754_pow+0x1094>
10001d04:	00bffc34 	movhi	r2,65520
10001d08:	42000044 	addi	r8,r8,1
10001d0c:	98a7883a 	add	r19,r19,r2
10001d10:	0021883a 	mov	r16,zero
10001d14:	0019883a 	mov	r12,zero
10001d18:	601890fa 	slli	r12,r12,3
10001d1c:	00840074 	movhi	r2,4097
10001d20:	1088ef04 	addi	r2,r2,9148
10001d24:	1305883a 	add	r2,r2,r12
10001d28:	13400017 	ldw	r13,0(r2)
10001d2c:	12800117 	ldw	r10,4(r2)
10001d30:	b009883a 	mov	r4,r22
10001d34:	980b883a 	mov	r5,r19
10001d38:	680d883a 	mov	r6,r13
10001d3c:	500f883a 	mov	r7,r10
10001d40:	da000815 	stw	r8,32(sp)
10001d44:	dac00915 	stw	r11,36(sp)
10001d48:	db000715 	stw	r12,28(sp)
10001d4c:	da800315 	stw	r10,12(sp)
10001d50:	db400415 	stw	r13,16(sp)
10001d54:	0005da40 	call	10005da4 <__subdf3>
10001d58:	da800317 	ldw	r10,12(sp)
10001d5c:	db400417 	ldw	r13,16(sp)
10001d60:	b009883a 	mov	r4,r22
10001d64:	500f883a 	mov	r7,r10
10001d68:	680d883a 	mov	r6,r13
10001d6c:	980b883a 	mov	r5,r19
10001d70:	1829883a 	mov	r20,r3
10001d74:	d8800015 	stw	r2,0(sp)
10001d78:	00040d80 	call	100040d8 <__adddf3>
10001d7c:	0009883a 	mov	r4,zero
10001d80:	014ffc34 	movhi	r5,16368
10001d84:	100d883a 	mov	r6,r2
10001d88:	180f883a 	mov	r7,r3
10001d8c:	00049740 	call	10004974 <__divdf3>
10001d90:	d9000017 	ldw	r4,0(sp)
10001d94:	a00b883a 	mov	r5,r20
10001d98:	100d883a 	mov	r6,r2
10001d9c:	180f883a 	mov	r7,r3
10001da0:	d8c00615 	stw	r3,24(sp)
10001da4:	d8800515 	stw	r2,20(sp)
10001da8:	00055380 	call	10005538 <__muldf3>
10001dac:	1025883a 	mov	r18,r2
10001db0:	9805d07a 	srai	r2,r19,1
10001db4:	1823883a 	mov	r17,r3
10001db8:	880b883a 	mov	r5,r17
10001dbc:	10c80034 	orhi	r3,r2,8192
10001dc0:	00800234 	movhi	r2,8
10001dc4:	1885883a 	add	r2,r3,r2
10001dc8:	1421883a 	add	r16,r2,r16
10001dcc:	800f883a 	mov	r7,r16
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	000d883a 	mov	r6,zero
10001dd8:	00055380 	call	10005538 <__muldf3>
10001ddc:	d9000017 	ldw	r4,0(sp)
10001de0:	a00b883a 	mov	r5,r20
10001de4:	100d883a 	mov	r6,r2
10001de8:	180f883a 	mov	r7,r3
10001dec:	0005da40 	call	10005da4 <__subdf3>
10001df0:	da800317 	ldw	r10,12(sp)
10001df4:	db400417 	ldw	r13,16(sp)
10001df8:	800b883a 	mov	r5,r16
10001dfc:	500f883a 	mov	r7,r10
10001e00:	680d883a 	mov	r6,r13
10001e04:	0009883a 	mov	r4,zero
10001e08:	1829883a 	mov	r20,r3
10001e0c:	d8800315 	stw	r2,12(sp)
10001e10:	0005da40 	call	10005da4 <__subdf3>
10001e14:	b009883a 	mov	r4,r22
10001e18:	980b883a 	mov	r5,r19
10001e1c:	100d883a 	mov	r6,r2
10001e20:	180f883a 	mov	r7,r3
10001e24:	0005da40 	call	10005da4 <__subdf3>
10001e28:	880b883a 	mov	r5,r17
10001e2c:	0009883a 	mov	r4,zero
10001e30:	100d883a 	mov	r6,r2
10001e34:	180f883a 	mov	r7,r3
10001e38:	00055380 	call	10005538 <__muldf3>
10001e3c:	da400317 	ldw	r9,12(sp)
10001e40:	a00b883a 	mov	r5,r20
10001e44:	100d883a 	mov	r6,r2
10001e48:	4809883a 	mov	r4,r9
10001e4c:	180f883a 	mov	r7,r3
10001e50:	0005da40 	call	10005da4 <__subdf3>
10001e54:	dbc00517 	ldw	r15,20(sp)
10001e58:	db800617 	ldw	r14,24(sp)
10001e5c:	1009883a 	mov	r4,r2
10001e60:	780d883a 	mov	r6,r15
10001e64:	700f883a 	mov	r7,r14
10001e68:	180b883a 	mov	r5,r3
10001e6c:	00055380 	call	10005538 <__muldf3>
10001e70:	9009883a 	mov	r4,r18
10001e74:	880b883a 	mov	r5,r17
10001e78:	900d883a 	mov	r6,r18
10001e7c:	880f883a 	mov	r7,r17
10001e80:	182d883a 	mov	r22,r3
10001e84:	d8800015 	stw	r2,0(sp)
10001e88:	00055380 	call	10005538 <__muldf3>
10001e8c:	1009883a 	mov	r4,r2
10001e90:	180b883a 	mov	r5,r3
10001e94:	100d883a 	mov	r6,r2
10001e98:	180f883a 	mov	r7,r3
10001e9c:	1027883a 	mov	r19,r2
10001ea0:	1821883a 	mov	r16,r3
10001ea4:	00055380 	call	10005538 <__muldf3>
10001ea8:	01929174 	movhi	r6,19013
10001eac:	01cff2b4 	movhi	r7,16330
10001eb0:	9809883a 	mov	r4,r19
10001eb4:	800b883a 	mov	r5,r16
10001eb8:	3193bbc4 	addi	r6,r6,20207
10001ebc:	39df8a04 	addi	r7,r7,32296
10001ec0:	1829883a 	mov	r20,r3
10001ec4:	d8800315 	stw	r2,12(sp)
10001ec8:	00055380 	call	10005538 <__muldf3>
10001ecc:	01a4f2b4 	movhi	r6,37834
10001ed0:	01cff3b4 	movhi	r7,16334
10001ed4:	1009883a 	mov	r4,r2
10001ed8:	180b883a 	mov	r5,r3
10001edc:	31b6d944 	addi	r6,r6,-9371
10001ee0:	39e19284 	addi	r7,r7,-31158
10001ee4:	00040d80 	call	100040d8 <__adddf3>
10001ee8:	980d883a 	mov	r6,r19
10001eec:	800f883a 	mov	r7,r16
10001ef0:	1009883a 	mov	r4,r2
10001ef4:	180b883a 	mov	r5,r3
10001ef8:	00055380 	call	10005538 <__muldf3>
10001efc:	01aa4774 	movhi	r6,43293
10001f00:	01cff474 	movhi	r7,16337
10001f04:	1009883a 	mov	r4,r2
10001f08:	180b883a 	mov	r5,r3
10001f0c:	31904044 	addi	r6,r6,16641
10001f10:	39dd1804 	addi	r7,r7,29792
10001f14:	00040d80 	call	100040d8 <__adddf3>
10001f18:	980d883a 	mov	r6,r19
10001f1c:	800f883a 	mov	r7,r16
10001f20:	1009883a 	mov	r4,r2
10001f24:	180b883a 	mov	r5,r3
10001f28:	00055380 	call	10005538 <__muldf3>
10001f2c:	019463f4 	movhi	r6,20879
10001f30:	01cff574 	movhi	r7,16341
10001f34:	1009883a 	mov	r4,r2
10001f38:	180b883a 	mov	r5,r3
10001f3c:	31899344 	addi	r6,r6,9805
10001f40:	39d55544 	addi	r7,r7,21845
10001f44:	00040d80 	call	100040d8 <__adddf3>
10001f48:	980d883a 	mov	r6,r19
10001f4c:	800f883a 	mov	r7,r16
10001f50:	1009883a 	mov	r4,r2
10001f54:	180b883a 	mov	r5,r3
10001f58:	00055380 	call	10005538 <__muldf3>
10001f5c:	01b6dc34 	movhi	r6,56176
10001f60:	01cff6f4 	movhi	r7,16347
10001f64:	1009883a 	mov	r4,r2
10001f68:	180b883a 	mov	r5,r3
10001f6c:	31aaffc4 	addi	r6,r6,-21505
10001f70:	39db6d84 	addi	r7,r7,28086
10001f74:	00040d80 	call	100040d8 <__adddf3>
10001f78:	980d883a 	mov	r6,r19
10001f7c:	800f883a 	mov	r7,r16
10001f80:	1009883a 	mov	r4,r2
10001f84:	180b883a 	mov	r5,r3
10001f88:	00055380 	call	10005538 <__muldf3>
10001f8c:	018cccf4 	movhi	r6,13107
10001f90:	01cff8f4 	movhi	r7,16355
10001f94:	1009883a 	mov	r4,r2
10001f98:	180b883a 	mov	r5,r3
10001f9c:	318cc0c4 	addi	r6,r6,13059
10001fa0:	39ccccc4 	addi	r7,r7,13107
10001fa4:	00040d80 	call	100040d8 <__adddf3>
10001fa8:	da400317 	ldw	r9,12(sp)
10001fac:	a00b883a 	mov	r5,r20
10001fb0:	100d883a 	mov	r6,r2
10001fb4:	4809883a 	mov	r4,r9
10001fb8:	180f883a 	mov	r7,r3
10001fbc:	00055380 	call	10005538 <__muldf3>
10001fc0:	880b883a 	mov	r5,r17
10001fc4:	900d883a 	mov	r6,r18
10001fc8:	880f883a 	mov	r7,r17
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	1027883a 	mov	r19,r2
10001fd4:	1821883a 	mov	r16,r3
10001fd8:	00040d80 	call	100040d8 <__adddf3>
10001fdc:	d9800017 	ldw	r6,0(sp)
10001fe0:	b00f883a 	mov	r7,r22
10001fe4:	1009883a 	mov	r4,r2
10001fe8:	180b883a 	mov	r5,r3
10001fec:	00055380 	call	10005538 <__muldf3>
10001ff0:	980d883a 	mov	r6,r19
10001ff4:	800f883a 	mov	r7,r16
10001ff8:	1009883a 	mov	r4,r2
10001ffc:	180b883a 	mov	r5,r3
10002000:	00040d80 	call	100040d8 <__adddf3>
10002004:	880f883a 	mov	r7,r17
10002008:	880b883a 	mov	r5,r17
1000200c:	000d883a 	mov	r6,zero
10002010:	0009883a 	mov	r4,zero
10002014:	1029883a 	mov	r20,r2
10002018:	1827883a 	mov	r19,r3
1000201c:	00055380 	call	10005538 <__muldf3>
10002020:	1009883a 	mov	r4,r2
10002024:	180b883a 	mov	r5,r3
10002028:	000d883a 	mov	r6,zero
1000202c:	01d00234 	movhi	r7,16392
10002030:	d8c00615 	stw	r3,24(sp)
10002034:	d8800515 	stw	r2,20(sp)
10002038:	00040d80 	call	100040d8 <__adddf3>
1000203c:	a00d883a 	mov	r6,r20
10002040:	980f883a 	mov	r7,r19
10002044:	1009883a 	mov	r4,r2
10002048:	180b883a 	mov	r5,r3
1000204c:	00040d80 	call	100040d8 <__adddf3>
10002050:	880b883a 	mov	r5,r17
10002054:	000d883a 	mov	r6,zero
10002058:	180f883a 	mov	r7,r3
1000205c:	0009883a 	mov	r4,zero
10002060:	1821883a 	mov	r16,r3
10002064:	00055380 	call	10005538 <__muldf3>
10002068:	d9000017 	ldw	r4,0(sp)
1000206c:	b00b883a 	mov	r5,r22
10002070:	800f883a 	mov	r7,r16
10002074:	000d883a 	mov	r6,zero
10002078:	d8800115 	stw	r2,4(sp)
1000207c:	d8c00215 	stw	r3,8(sp)
10002080:	00055380 	call	10005538 <__muldf3>
10002084:	800b883a 	mov	r5,r16
10002088:	0009883a 	mov	r4,zero
1000208c:	000d883a 	mov	r6,zero
10002090:	01d00234 	movhi	r7,16392
10002094:	182d883a 	mov	r22,r3
10002098:	d8800315 	stw	r2,12(sp)
1000209c:	0005da40 	call	10005da4 <__subdf3>
100020a0:	dbc00517 	ldw	r15,20(sp)
100020a4:	db800617 	ldw	r14,24(sp)
100020a8:	1009883a 	mov	r4,r2
100020ac:	780d883a 	mov	r6,r15
100020b0:	700f883a 	mov	r7,r14
100020b4:	180b883a 	mov	r5,r3
100020b8:	0005da40 	call	10005da4 <__subdf3>
100020bc:	a009883a 	mov	r4,r20
100020c0:	980b883a 	mov	r5,r19
100020c4:	100d883a 	mov	r6,r2
100020c8:	180f883a 	mov	r7,r3
100020cc:	0005da40 	call	10005da4 <__subdf3>
100020d0:	900d883a 	mov	r6,r18
100020d4:	880f883a 	mov	r7,r17
100020d8:	1009883a 	mov	r4,r2
100020dc:	180b883a 	mov	r5,r3
100020e0:	00055380 	call	10005538 <__muldf3>
100020e4:	da400317 	ldw	r9,12(sp)
100020e8:	b00b883a 	mov	r5,r22
100020ec:	100d883a 	mov	r6,r2
100020f0:	4809883a 	mov	r4,r9
100020f4:	180f883a 	mov	r7,r3
100020f8:	00040d80 	call	100040d8 <__adddf3>
100020fc:	d9000117 	ldw	r4,4(sp)
10002100:	d9400217 	ldw	r5,8(sp)
10002104:	100d883a 	mov	r6,r2
10002108:	180f883a 	mov	r7,r3
1000210c:	102d883a 	mov	r22,r2
10002110:	1825883a 	mov	r18,r3
10002114:	00040d80 	call	100040d8 <__adddf3>
10002118:	01cffbf4 	movhi	r7,16367
1000211c:	39f1c244 	addi	r7,r7,-14583
10002120:	0009883a 	mov	r4,zero
10002124:	180b883a 	mov	r5,r3
10002128:	01b80034 	movhi	r6,57344
1000212c:	1823883a 	mov	r17,r3
10002130:	00055380 	call	10005538 <__muldf3>
10002134:	018516f4 	movhi	r6,5211
10002138:	01ef8fb4 	movhi	r7,48702
1000213c:	880b883a 	mov	r5,r17
10002140:	31807d44 	addi	r6,r6,501
10002144:	39cbf804 	addi	r7,r7,12256
10002148:	0009883a 	mov	r4,zero
1000214c:	1029883a 	mov	r20,r2
10002150:	1827883a 	mov	r19,r3
10002154:	00055380 	call	10005538 <__muldf3>
10002158:	d9800117 	ldw	r6,4(sp)
1000215c:	d9c00217 	ldw	r7,8(sp)
10002160:	880b883a 	mov	r5,r17
10002164:	0009883a 	mov	r4,zero
10002168:	1821883a 	mov	r16,r3
1000216c:	d8800415 	stw	r2,16(sp)
10002170:	0005da40 	call	10005da4 <__subdf3>
10002174:	b009883a 	mov	r4,r22
10002178:	900b883a 	mov	r5,r18
1000217c:	100d883a 	mov	r6,r2
10002180:	180f883a 	mov	r7,r3
10002184:	0005da40 	call	10005da4 <__subdf3>
10002188:	01b70eb4 	movhi	r6,56378
1000218c:	01cffbf4 	movhi	r7,16367
10002190:	1009883a 	mov	r4,r2
10002194:	180b883a 	mov	r5,r3
10002198:	3180ff44 	addi	r6,r6,1021
1000219c:	39f1c244 	addi	r7,r7,-14583
100021a0:	00055380 	call	10005538 <__muldf3>
100021a4:	db400417 	ldw	r13,16(sp)
100021a8:	800b883a 	mov	r5,r16
100021ac:	100d883a 	mov	r6,r2
100021b0:	6809883a 	mov	r4,r13
100021b4:	180f883a 	mov	r7,r3
100021b8:	00040d80 	call	100040d8 <__adddf3>
100021bc:	db000717 	ldw	r12,28(sp)
100021c0:	1009883a 	mov	r4,r2
100021c4:	00840074 	movhi	r2,4097
100021c8:	1088e704 	addi	r2,r2,9116
100021cc:	1305883a 	add	r2,r2,r12
100021d0:	11800017 	ldw	r6,0(r2)
100021d4:	11c00117 	ldw	r7,4(r2)
100021d8:	180b883a 	mov	r5,r3
100021dc:	00040d80 	call	100040d8 <__adddf3>
100021e0:	da000817 	ldw	r8,32(sp)
100021e4:	1025883a 	mov	r18,r2
100021e8:	1823883a 	mov	r17,r3
100021ec:	4009883a 	mov	r4,r8
100021f0:	00066fc0 	call	100066fc <__floatsidf>
100021f4:	db000717 	ldw	r12,28(sp)
100021f8:	d8800115 	stw	r2,4(sp)
100021fc:	00840074 	movhi	r2,4097
10002200:	1088eb04 	addi	r2,r2,9132
10002204:	1319883a 	add	r12,r2,r12
10002208:	65800017 	ldw	r22,0(r12)
1000220c:	63000117 	ldw	r12,4(r12)
10002210:	a009883a 	mov	r4,r20
10002214:	980b883a 	mov	r5,r19
10002218:	900d883a 	mov	r6,r18
1000221c:	880f883a 	mov	r7,r17
10002220:	db000015 	stw	r12,0(sp)
10002224:	d8c00215 	stw	r3,8(sp)
10002228:	00040d80 	call	100040d8 <__adddf3>
1000222c:	d9c00017 	ldw	r7,0(sp)
10002230:	1009883a 	mov	r4,r2
10002234:	180b883a 	mov	r5,r3
10002238:	b00d883a 	mov	r6,r22
1000223c:	00040d80 	call	100040d8 <__adddf3>
10002240:	d9800117 	ldw	r6,4(sp)
10002244:	d9c00217 	ldw	r7,8(sp)
10002248:	1009883a 	mov	r4,r2
1000224c:	180b883a 	mov	r5,r3
10002250:	00040d80 	call	100040d8 <__adddf3>
10002254:	d9800117 	ldw	r6,4(sp)
10002258:	d9c00217 	ldw	r7,8(sp)
1000225c:	0009883a 	mov	r4,zero
10002260:	180b883a 	mov	r5,r3
10002264:	1821883a 	mov	r16,r3
10002268:	0005da40 	call	10005da4 <__subdf3>
1000226c:	d9c00017 	ldw	r7,0(sp)
10002270:	1009883a 	mov	r4,r2
10002274:	180b883a 	mov	r5,r3
10002278:	b00d883a 	mov	r6,r22
1000227c:	0005da40 	call	10005da4 <__subdf3>
10002280:	1009883a 	mov	r4,r2
10002284:	180b883a 	mov	r5,r3
10002288:	a00d883a 	mov	r6,r20
1000228c:	980f883a 	mov	r7,r19
10002290:	0005da40 	call	10005da4 <__subdf3>
10002294:	9009883a 	mov	r4,r18
10002298:	880b883a 	mov	r5,r17
1000229c:	100d883a 	mov	r6,r2
100022a0:	180f883a 	mov	r7,r3
100022a4:	0005da40 	call	10005da4 <__subdf3>
100022a8:	dac00917 	ldw	r11,36(sp)
100022ac:	e2bfffc4 	addi	r10,fp,-1
100022b0:	1027883a 	mov	r19,r2
100022b4:	52d6b03a 	or	r11,r10,r11
100022b8:	1823883a 	mov	r17,r3
100022bc:	5801591e 	bne	r11,zero,10002824 <__ieee754_pow+0xe60>
100022c0:	04affc34 	movhi	r18,49136
100022c4:	b80f883a 	mov	r7,r23
100022c8:	a809883a 	mov	r4,r21
100022cc:	b80b883a 	mov	r5,r23
100022d0:	000d883a 	mov	r6,zero
100022d4:	0005da40 	call	10005da4 <__subdf3>
100022d8:	1009883a 	mov	r4,r2
100022dc:	180b883a 	mov	r5,r3
100022e0:	000d883a 	mov	r6,zero
100022e4:	800f883a 	mov	r7,r16
100022e8:	00055380 	call	10005538 <__muldf3>
100022ec:	a809883a 	mov	r4,r21
100022f0:	b80b883a 	mov	r5,r23
100022f4:	980d883a 	mov	r6,r19
100022f8:	880f883a 	mov	r7,r17
100022fc:	102d883a 	mov	r22,r2
10002300:	1829883a 	mov	r20,r3
10002304:	00055380 	call	10005538 <__muldf3>
10002308:	b009883a 	mov	r4,r22
1000230c:	a00b883a 	mov	r5,r20
10002310:	100d883a 	mov	r6,r2
10002314:	180f883a 	mov	r7,r3
10002318:	00040d80 	call	100040d8 <__adddf3>
1000231c:	b80b883a 	mov	r5,r23
10002320:	0009883a 	mov	r4,zero
10002324:	000d883a 	mov	r6,zero
10002328:	800f883a 	mov	r7,r16
1000232c:	1027883a 	mov	r19,r2
10002330:	1823883a 	mov	r17,r3
10002334:	00055380 	call	10005538 <__muldf3>
10002338:	9809883a 	mov	r4,r19
1000233c:	880b883a 	mov	r5,r17
10002340:	100d883a 	mov	r6,r2
10002344:	180f883a 	mov	r7,r3
10002348:	102d883a 	mov	r22,r2
1000234c:	182b883a 	mov	r21,r3
10002350:	00040d80 	call	100040d8 <__adddf3>
10002354:	102f883a 	mov	r23,r2
10002358:	00902434 	movhi	r2,16528
1000235c:	10bfffc4 	addi	r2,r2,-1
10002360:	1829883a 	mov	r20,r3
10002364:	b013883a 	mov	r9,r22
10002368:	a811883a 	mov	r8,r21
1000236c:	10c1080e 	bge	r2,r3,10002790 <__ieee754_pow+0xdcc>
10002370:	00efdc34 	movhi	r3,49008
10002374:	a0c7883a 	add	r3,r20,r3
10002378:	1dc6b03a 	or	r3,r3,r23
1000237c:	1801961e 	bne	r3,zero,100029d8 <__ieee754_pow+0x1014>
10002380:	01994b34 	movhi	r6,25900
10002384:	01cf25f4 	movhi	r7,15511
10002388:	31a0bf84 	addi	r6,r6,-32002
1000238c:	39c551c4 	addi	r7,r7,5447
10002390:	9809883a 	mov	r4,r19
10002394:	880b883a 	mov	r5,r17
10002398:	00040d80 	call	100040d8 <__adddf3>
1000239c:	b809883a 	mov	r4,r23
100023a0:	a00b883a 	mov	r5,r20
100023a4:	b00d883a 	mov	r6,r22
100023a8:	a80f883a 	mov	r7,r21
100023ac:	1039883a 	mov	fp,r2
100023b0:	1821883a 	mov	r16,r3
100023b4:	0005da40 	call	10005da4 <__subdf3>
100023b8:	e009883a 	mov	r4,fp
100023bc:	800b883a 	mov	r5,r16
100023c0:	100d883a 	mov	r6,r2
100023c4:	180f883a 	mov	r7,r3
100023c8:	00053780 	call	10005378 <__gedf2>
100023cc:	00818216 	blt	zero,r2,100029d8 <__ieee754_pow+0x1014>
100023d0:	a021883a 	mov	r16,r20
100023d4:	8011d53a 	srai	r8,r16,20
100023d8:	00800434 	movhi	r2,16
100023dc:	a02ed7fa 	srli	r23,r20,31
100023e0:	423f0084 	addi	r8,r8,-1022
100023e4:	1211d83a 	sra	r8,r2,r8
100023e8:	00c00434 	movhi	r3,16
100023ec:	18ffffc4 	addi	r3,r3,-1
100023f0:	4529883a 	add	r20,r8,r20
100023f4:	a00a907a 	slli	r5,r20,1
100023f8:	a0c4703a 	and	r2,r20,r3
100023fc:	10800434 	orhi	r2,r2,16
10002400:	280ad57a 	srli	r5,r5,21
10002404:	05cdc83a 	sub	r6,zero,r23
10002408:	b009883a 	mov	r4,r22
1000240c:	29ff0044 	addi	r7,r5,-1023
10002410:	19c7d83a 	sra	r3,r3,r7
10002414:	01c104c4 	movi	r7,1043
10002418:	394bc83a 	sub	r5,r7,r5
1000241c:	1145d83a 	sra	r2,r2,r5
10002420:	00ce303a 	nor	r7,zero,r3
10002424:	3d0e703a 	and	r7,r7,r20
10002428:	1184f03a 	xor	r2,r2,r6
1000242c:	a80b883a 	mov	r5,r21
10002430:	000d883a 	mov	r6,zero
10002434:	15ef883a 	add	r23,r2,r23
10002438:	ddc00115 	stw	r23,4(sp)
1000243c:	0005da40 	call	10005da4 <__subdf3>
10002440:	9809883a 	mov	r4,r19
10002444:	880b883a 	mov	r5,r17
10002448:	100d883a 	mov	r6,r2
1000244c:	180f883a 	mov	r7,r3
10002450:	d8c00815 	stw	r3,32(sp)
10002454:	d8800315 	stw	r2,12(sp)
10002458:	00040d80 	call	100040d8 <__adddf3>
1000245c:	d8800117 	ldw	r2,4(sp)
10002460:	da000817 	ldw	r8,32(sp)
10002464:	da400317 	ldw	r9,12(sp)
10002468:	1004953a 	slli	r2,r2,20
1000246c:	1829883a 	mov	r20,r3
10002470:	d8800015 	stw	r2,0(sp)
10002474:	01cff9b4 	movhi	r7,16358
10002478:	a00b883a 	mov	r5,r20
1000247c:	39cb90c4 	addi	r7,r7,11843
10002480:	0009883a 	mov	r4,zero
10002484:	000d883a 	mov	r6,zero
10002488:	da000815 	stw	r8,32(sp)
1000248c:	da400315 	stw	r9,12(sp)
10002490:	00055380 	call	10005538 <__muldf3>
10002494:	da400317 	ldw	r9,12(sp)
10002498:	da000817 	ldw	r8,32(sp)
1000249c:	a00b883a 	mov	r5,r20
100024a0:	480d883a 	mov	r6,r9
100024a4:	400f883a 	mov	r7,r8
100024a8:	0009883a 	mov	r4,zero
100024ac:	1039883a 	mov	fp,r2
100024b0:	182d883a 	mov	r22,r3
100024b4:	0005da40 	call	10005da4 <__subdf3>
100024b8:	9809883a 	mov	r4,r19
100024bc:	880b883a 	mov	r5,r17
100024c0:	100d883a 	mov	r6,r2
100024c4:	180f883a 	mov	r7,r3
100024c8:	0005da40 	call	10005da4 <__subdf3>
100024cc:	01bfbeb4 	movhi	r6,65274
100024d0:	01cff9b4 	movhi	r7,16358
100024d4:	1009883a 	mov	r4,r2
100024d8:	180b883a 	mov	r5,r3
100024dc:	318e7bc4 	addi	r6,r6,14831
100024e0:	39cb9084 	addi	r7,r7,11842
100024e4:	00055380 	call	10005538 <__muldf3>
100024e8:	01832a34 	movhi	r6,3240
100024ec:	01ef8834 	movhi	r7,48672
100024f0:	a00b883a 	mov	r5,r20
100024f4:	319b0e44 	addi	r6,r6,27705
100024f8:	39d71844 	addi	r7,r7,23649
100024fc:	0009883a 	mov	r4,zero
10002500:	1023883a 	mov	r17,r2
10002504:	1821883a 	mov	r16,r3
10002508:	00055380 	call	10005538 <__muldf3>
1000250c:	8809883a 	mov	r4,r17
10002510:	800b883a 	mov	r5,r16
10002514:	100d883a 	mov	r6,r2
10002518:	180f883a 	mov	r7,r3
1000251c:	00040d80 	call	100040d8 <__adddf3>
10002520:	e009883a 	mov	r4,fp
10002524:	b00b883a 	mov	r5,r22
10002528:	100d883a 	mov	r6,r2
1000252c:	180f883a 	mov	r7,r3
10002530:	1029883a 	mov	r20,r2
10002534:	1827883a 	mov	r19,r3
10002538:	00040d80 	call	100040d8 <__adddf3>
1000253c:	e00d883a 	mov	r6,fp
10002540:	b00f883a 	mov	r7,r22
10002544:	1009883a 	mov	r4,r2
10002548:	180b883a 	mov	r5,r3
1000254c:	1023883a 	mov	r17,r2
10002550:	1821883a 	mov	r16,r3
10002554:	0005da40 	call	10005da4 <__subdf3>
10002558:	a009883a 	mov	r4,r20
1000255c:	980b883a 	mov	r5,r19
10002560:	100d883a 	mov	r6,r2
10002564:	180f883a 	mov	r7,r3
10002568:	0005da40 	call	10005da4 <__subdf3>
1000256c:	8809883a 	mov	r4,r17
10002570:	800b883a 	mov	r5,r16
10002574:	880d883a 	mov	r6,r17
10002578:	800f883a 	mov	r7,r16
1000257c:	1039883a 	mov	fp,r2
10002580:	182d883a 	mov	r22,r3
10002584:	00055380 	call	10005538 <__muldf3>
10002588:	019caff4 	movhi	r6,29375
1000258c:	01cf99b4 	movhi	r7,15974
10002590:	1009883a 	mov	r4,r2
10002594:	180b883a 	mov	r5,r3
10002598:	31a93404 	addi	r6,r6,-23344
1000259c:	39cdda44 	addi	r7,r7,14185
100025a0:	1029883a 	mov	r20,r2
100025a4:	1827883a 	mov	r19,r3
100025a8:	00055380 	call	10005538 <__muldf3>
100025ac:	01b174b4 	movhi	r6,50642
100025b0:	01cfaf34 	movhi	r7,16060
100025b4:	1009883a 	mov	r4,r2
100025b8:	180b883a 	mov	r5,r3
100025bc:	319afc44 	addi	r6,r6,27633
100025c0:	39ef5044 	addi	r7,r7,-17087
100025c4:	0005da40 	call	10005da4 <__subdf3>
100025c8:	a00d883a 	mov	r6,r20
100025cc:	980f883a 	mov	r7,r19
100025d0:	1009883a 	mov	r4,r2
100025d4:	180b883a 	mov	r5,r3
100025d8:	00055380 	call	10005538 <__muldf3>
100025dc:	01abc9b4 	movhi	r6,44838
100025e0:	01cfc474 	movhi	r7,16145
100025e4:	1009883a 	mov	r4,r2
100025e8:	180b883a 	mov	r5,r3
100025ec:	31b78b04 	addi	r6,r6,-8660
100025f0:	39d59a84 	addi	r7,r7,22122
100025f4:	00040d80 	call	100040d8 <__adddf3>
100025f8:	a00d883a 	mov	r6,r20
100025fc:	980f883a 	mov	r7,r19
10002600:	1009883a 	mov	r4,r2
10002604:	180b883a 	mov	r5,r3
10002608:	00055380 	call	10005538 <__muldf3>
1000260c:	0185aff4 	movhi	r6,5823
10002610:	01cfd9f4 	movhi	r7,16231
10002614:	1009883a 	mov	r4,r2
10002618:	180b883a 	mov	r5,r3
1000261c:	31af64c4 	addi	r6,r6,-17005
10002620:	39f05b04 	addi	r7,r7,-16020
10002624:	0005da40 	call	10005da4 <__subdf3>
10002628:	a00d883a 	mov	r6,r20
1000262c:	980f883a 	mov	r7,r19
10002630:	1009883a 	mov	r4,r2
10002634:	180b883a 	mov	r5,r3
10002638:	00055380 	call	10005538 <__muldf3>
1000263c:	01955574 	movhi	r6,21845
10002640:	01cff174 	movhi	r7,16325
10002644:	1009883a 	mov	r4,r2
10002648:	180b883a 	mov	r5,r3
1000264c:	31954f84 	addi	r6,r6,21822
10002650:	39d55544 	addi	r7,r7,21845
10002654:	00040d80 	call	100040d8 <__adddf3>
10002658:	a00d883a 	mov	r6,r20
1000265c:	980f883a 	mov	r7,r19
10002660:	1009883a 	mov	r4,r2
10002664:	180b883a 	mov	r5,r3
10002668:	00055380 	call	10005538 <__muldf3>
1000266c:	8809883a 	mov	r4,r17
10002670:	800b883a 	mov	r5,r16
10002674:	100d883a 	mov	r6,r2
10002678:	180f883a 	mov	r7,r3
1000267c:	0005da40 	call	10005da4 <__subdf3>
10002680:	8809883a 	mov	r4,r17
10002684:	800b883a 	mov	r5,r16
10002688:	100d883a 	mov	r6,r2
1000268c:	180f883a 	mov	r7,r3
10002690:	1029883a 	mov	r20,r2
10002694:	1827883a 	mov	r19,r3
10002698:	00055380 	call	10005538 <__muldf3>
1000269c:	a009883a 	mov	r4,r20
100026a0:	980b883a 	mov	r5,r19
100026a4:	000d883a 	mov	r6,zero
100026a8:	01d00034 	movhi	r7,16384
100026ac:	102b883a 	mov	r21,r2
100026b0:	182f883a 	mov	r23,r3
100026b4:	0005da40 	call	10005da4 <__subdf3>
100026b8:	a809883a 	mov	r4,r21
100026bc:	b80b883a 	mov	r5,r23
100026c0:	100d883a 	mov	r6,r2
100026c4:	180f883a 	mov	r7,r3
100026c8:	00049740 	call	10004974 <__divdf3>
100026cc:	8809883a 	mov	r4,r17
100026d0:	800b883a 	mov	r5,r16
100026d4:	e00d883a 	mov	r6,fp
100026d8:	b00f883a 	mov	r7,r22
100026dc:	1029883a 	mov	r20,r2
100026e0:	1827883a 	mov	r19,r3
100026e4:	00055380 	call	10005538 <__muldf3>
100026e8:	1009883a 	mov	r4,r2
100026ec:	180b883a 	mov	r5,r3
100026f0:	e00d883a 	mov	r6,fp
100026f4:	b00f883a 	mov	r7,r22
100026f8:	00040d80 	call	100040d8 <__adddf3>
100026fc:	a009883a 	mov	r4,r20
10002700:	980b883a 	mov	r5,r19
10002704:	100d883a 	mov	r6,r2
10002708:	180f883a 	mov	r7,r3
1000270c:	0005da40 	call	10005da4 <__subdf3>
10002710:	1009883a 	mov	r4,r2
10002714:	180b883a 	mov	r5,r3
10002718:	880d883a 	mov	r6,r17
1000271c:	800f883a 	mov	r7,r16
10002720:	0005da40 	call	10005da4 <__subdf3>
10002724:	0009883a 	mov	r4,zero
10002728:	180f883a 	mov	r7,r3
1000272c:	014ffc34 	movhi	r5,16368
10002730:	100d883a 	mov	r6,r2
10002734:	0005da40 	call	10005da4 <__subdf3>
10002738:	d9000017 	ldw	r4,0(sp)
1000273c:	190f883a 	add	r7,r3,r4
10002740:	3809d53a 	srai	r4,r7,20
10002744:	0100c70e 	bge	zero,r4,10002a64 <__ieee754_pow+0x10a0>
10002748:	100d883a 	mov	r6,r2
1000274c:	0009883a 	mov	r4,zero
10002750:	900b883a 	mov	r5,r18
10002754:	00055380 	call	10005538 <__muldf3>
10002758:	003cd606 	br	10001ab4 <__alt_data_end+0xf8001ab4>
1000275c:	00b00434 	movhi	r2,49168
10002760:	9085883a 	add	r2,r18,r2
10002764:	e084b03a 	or	r2,fp,r2
10002768:	1000aa1e 	bne	r2,zero,10002a14 <__ieee754_pow+0x1050>
1000276c:	b009883a 	mov	r4,r22
10002770:	180b883a 	mov	r5,r3
10002774:	003d4006 	br	10001c78 <__alt_data_end+0xf8001c78>
10002778:	8009883a 	mov	r4,r16
1000277c:	980b883a 	mov	r5,r19
10002780:	800d883a 	mov	r6,r16
10002784:	980f883a 	mov	r7,r19
10002788:	00055380 	call	10005538 <__muldf3>
1000278c:	003cc906 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10002790:	04200034 	movhi	r16,32768
10002794:	843fffc4 	addi	r16,r16,-1
10002798:	00902474 	movhi	r2,16529
1000279c:	1c20703a 	and	r16,r3,r16
100027a0:	10b2ffc4 	addi	r2,r2,-13313
100027a4:	1400a70e 	bge	r2,r16,10002a44 <__ieee754_pow+0x1080>
100027a8:	008fdbf4 	movhi	r2,16239
100027ac:	108d0004 	addi	r2,r2,13312
100027b0:	1885883a 	add	r2,r3,r2
100027b4:	15c4b03a 	or	r2,r2,r23
100027b8:	10000b1e 	bne	r2,zero,100027e8 <__ieee754_pow+0xe24>
100027bc:	b809883a 	mov	r4,r23
100027c0:	180b883a 	mov	r5,r3
100027c4:	b00d883a 	mov	r6,r22
100027c8:	a80f883a 	mov	r7,r21
100027cc:	0005da40 	call	10005da4 <__subdf3>
100027d0:	9809883a 	mov	r4,r19
100027d4:	880b883a 	mov	r5,r17
100027d8:	100d883a 	mov	r6,r2
100027dc:	180f883a 	mov	r7,r3
100027e0:	00054580 	call	10005458 <__ledf2>
100027e4:	00befb16 	blt	zero,r2,100023d4 <__alt_data_end+0xf80023d4>
100027e8:	01b0be74 	movhi	r6,49913
100027ec:	01c06974 	movhi	r7,421
100027f0:	900b883a 	mov	r5,r18
100027f4:	31bcd644 	addi	r6,r6,-3239
100027f8:	39db87c4 	addi	r7,r7,28191
100027fc:	0009883a 	mov	r4,zero
10002800:	00055380 	call	10005538 <__muldf3>
10002804:	01b0be74 	movhi	r6,49913
10002808:	01c06974 	movhi	r7,421
1000280c:	1009883a 	mov	r4,r2
10002810:	180b883a 	mov	r5,r3
10002814:	31bcd644 	addi	r6,r6,-3239
10002818:	39db87c4 	addi	r7,r7,28191
1000281c:	00055380 	call	10005538 <__muldf3>
10002820:	003ca406 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10002824:	048ffc34 	movhi	r18,16368
10002828:	003ea606 	br	100022c4 <__alt_data_end+0xf80022c4>
1000282c:	b83cce0e 	bge	r23,zero,10001b68 <__alt_data_end+0xf8001b68>
10002830:	0005883a 	mov	r2,zero
10002834:	b8e0003c 	xorhi	r3,r23,32768
10002838:	003c9e06 	br	10001ab4 <__alt_data_end+0xf8001ab4>
1000283c:	0021883a 	mov	r16,zero
10002840:	0019883a 	mov	r12,zero
10002844:	003d3406 	br	10001d18 <__alt_data_end+0xf8001d18>
10002848:	0009883a 	mov	r4,zero
1000284c:	003d2006 	br	10001cd0 <__alt_data_end+0xf8001cd0>
10002850:	008ffc34 	movhi	r2,16368
10002854:	10bfff84 	addi	r2,r2,-2
10002858:	14bcc20e 	bge	r2,r18,10001b64 <__alt_data_end+0xf8001b64>
1000285c:	01cffc34 	movhi	r7,16368
10002860:	3cbcd916 	blt	r7,r18,10001bc8 <__alt_data_end+0xf8001bc8>
10002864:	b009883a 	mov	r4,r22
10002868:	000d883a 	mov	r6,zero
1000286c:	180b883a 	mov	r5,r3
10002870:	dac00915 	stw	r11,36(sp)
10002874:	0005da40 	call	10005da4 <__subdf3>
10002878:	01cffdf4 	movhi	r7,16375
1000287c:	1009883a 	mov	r4,r2
10002880:	180b883a 	mov	r5,r3
10002884:	39c551c4 	addi	r7,r7,5447
10002888:	01980034 	movhi	r6,24576
1000288c:	1023883a 	mov	r17,r2
10002890:	1821883a 	mov	r16,r3
10002894:	00055380 	call	10005538 <__muldf3>
10002898:	01be17b4 	movhi	r6,63582
1000289c:	01cf9574 	movhi	r7,15957
100028a0:	8809883a 	mov	r4,r17
100028a4:	800b883a 	mov	r5,r16
100028a8:	31b7d104 	addi	r6,r6,-8380
100028ac:	39eb82c4 	addi	r7,r7,-20981
100028b0:	1027883a 	mov	r19,r2
100028b4:	1825883a 	mov	r18,r3
100028b8:	00055380 	call	10005538 <__muldf3>
100028bc:	8809883a 	mov	r4,r17
100028c0:	800b883a 	mov	r5,r16
100028c4:	880d883a 	mov	r6,r17
100028c8:	800f883a 	mov	r7,r16
100028cc:	1829883a 	mov	r20,r3
100028d0:	d8800815 	stw	r2,32(sp)
100028d4:	00055380 	call	10005538 <__muldf3>
100028d8:	8809883a 	mov	r4,r17
100028dc:	800b883a 	mov	r5,r16
100028e0:	000d883a 	mov	r6,zero
100028e4:	01cff434 	movhi	r7,16336
100028e8:	182d883a 	mov	r22,r3
100028ec:	d8800315 	stw	r2,12(sp)
100028f0:	00055380 	call	10005538 <__muldf3>
100028f4:	01155574 	movhi	r4,21845
100028f8:	014ff574 	movhi	r5,16341
100028fc:	21155544 	addi	r4,r4,21845
10002900:	29555544 	addi	r5,r5,21845
10002904:	100d883a 	mov	r6,r2
10002908:	180f883a 	mov	r7,r3
1000290c:	0005da40 	call	10005da4 <__subdf3>
10002910:	880d883a 	mov	r6,r17
10002914:	800f883a 	mov	r7,r16
10002918:	1009883a 	mov	r4,r2
1000291c:	180b883a 	mov	r5,r3
10002920:	00055380 	call	10005538 <__muldf3>
10002924:	0009883a 	mov	r4,zero
10002928:	014ff834 	movhi	r5,16352
1000292c:	100d883a 	mov	r6,r2
10002930:	180f883a 	mov	r7,r3
10002934:	0005da40 	call	10005da4 <__subdf3>
10002938:	da400317 	ldw	r9,12(sp)
1000293c:	b00b883a 	mov	r5,r22
10002940:	100d883a 	mov	r6,r2
10002944:	4809883a 	mov	r4,r9
10002948:	180f883a 	mov	r7,r3
1000294c:	00055380 	call	10005538 <__muldf3>
10002950:	01994b34 	movhi	r6,25900
10002954:	01cffdf4 	movhi	r7,16375
10002958:	1009883a 	mov	r4,r2
1000295c:	180b883a 	mov	r5,r3
10002960:	31a0bf84 	addi	r6,r6,-32002
10002964:	39c551c4 	addi	r7,r7,5447
10002968:	00055380 	call	10005538 <__muldf3>
1000296c:	da000817 	ldw	r8,32(sp)
10002970:	a00b883a 	mov	r5,r20
10002974:	100d883a 	mov	r6,r2
10002978:	4009883a 	mov	r4,r8
1000297c:	180f883a 	mov	r7,r3
10002980:	0005da40 	call	10005da4 <__subdf3>
10002984:	9809883a 	mov	r4,r19
10002988:	900b883a 	mov	r5,r18
1000298c:	100d883a 	mov	r6,r2
10002990:	180f883a 	mov	r7,r3
10002994:	1029883a 	mov	r20,r2
10002998:	1823883a 	mov	r17,r3
1000299c:	00040d80 	call	100040d8 <__adddf3>
100029a0:	0009883a 	mov	r4,zero
100029a4:	180b883a 	mov	r5,r3
100029a8:	980d883a 	mov	r6,r19
100029ac:	900f883a 	mov	r7,r18
100029b0:	1821883a 	mov	r16,r3
100029b4:	0005da40 	call	10005da4 <__subdf3>
100029b8:	a009883a 	mov	r4,r20
100029bc:	003e3606 	br	10002298 <__alt_data_end+0xf8002298>
100029c0:	0009883a 	mov	r4,zero
100029c4:	880b883a 	mov	r5,r17
100029c8:	800d883a 	mov	r6,r16
100029cc:	980f883a 	mov	r7,r19
100029d0:	00049740 	call	10004974 <__divdf3>
100029d4:	003c3706 	br	10001ab4 <__alt_data_end+0xf8001ab4>
100029d8:	01a20034 	movhi	r6,34816
100029dc:	01df8e34 	movhi	r7,32312
100029e0:	900b883a 	mov	r5,r18
100029e4:	319d6704 	addi	r6,r6,30108
100029e8:	39f90f04 	addi	r7,r7,-7108
100029ec:	0009883a 	mov	r4,zero
100029f0:	00055380 	call	10005538 <__muldf3>
100029f4:	01a20034 	movhi	r6,34816
100029f8:	01df8e34 	movhi	r7,32312
100029fc:	1009883a 	mov	r4,r2
10002a00:	180b883a 	mov	r5,r3
10002a04:	319d6704 	addi	r6,r6,30108
10002a08:	39f90f04 	addi	r7,r7,-7108
10002a0c:	00055380 	call	10005538 <__muldf3>
10002a10:	003c2806 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10002a14:	00800044 	movi	r2,1
10002a18:	e0bc5e1e 	bne	fp,r2,10001b94 <__alt_data_end+0xf8001b94>
10002a1c:	18e0003c 	xorhi	r3,r3,32768
10002a20:	b005883a 	mov	r2,r22
10002a24:	003c2306 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10002a28:	303c3d1e 	bne	r6,zero,10001b20 <__alt_data_end+0xf8001b20>
10002a2c:	1907c83a 	sub	r3,r3,r4
10002a30:	88c5d83a 	sra	r2,r17,r3
10002a34:	10c6983a 	sll	r3,r2,r3
10002a38:	1c401126 	beq	r3,r17,10002a80 <__ieee754_pow+0x10bc>
10002a3c:	0039883a 	mov	fp,zero
10002a40:	003c0006 	br	10001a44 <__alt_data_end+0xf8001a44>
10002a44:	008ff834 	movhi	r2,16352
10002a48:	143e6216 	blt	r2,r16,100023d4 <__alt_data_end+0xf80023d4>
10002a4c:	d8000015 	stw	zero,0(sp)
10002a50:	d8000115 	stw	zero,4(sp)
10002a54:	003e8706 	br	10002474 <__alt_data_end+0xf8002474>
10002a58:	04000134 	movhi	r16,4
10002a5c:	03000044 	movi	r12,1
10002a60:	003cad06 	br	10001d18 <__alt_data_end+0xf8001d18>
10002a64:	d9800117 	ldw	r6,4(sp)
10002a68:	1009883a 	mov	r4,r2
10002a6c:	180b883a 	mov	r5,r3
10002a70:	0002fc00 	call	10002fc0 <scalbn>
10002a74:	100d883a 	mov	r6,r2
10002a78:	180f883a 	mov	r7,r3
10002a7c:	003f3306 	br	1000274c <__alt_data_end+0xf800274c>
10002a80:	1080004c 	andi	r2,r2,1
10002a84:	02800084 	movi	r10,2
10002a88:	50b9c83a 	sub	fp,r10,r2
10002a8c:	003bed06 	br	10001a44 <__alt_data_end+0xf8001a44>

10002a90 <__ieee754_sqrt>:
10002a90:	defffd04 	addi	sp,sp,-12
10002a94:	dc400115 	stw	r17,4(sp)
10002a98:	dc000015 	stw	r16,0(sp)
10002a9c:	dfc00215 	stw	ra,8(sp)
10002aa0:	28dffc2c 	andhi	r3,r5,32752
10002aa4:	009ffc34 	movhi	r2,32752
10002aa8:	2821883a 	mov	r16,r5
10002aac:	2023883a 	mov	r17,r4
10002ab0:	18807c26 	beq	r3,r2,10002ca4 <__ieee754_sqrt+0x214>
10002ab4:	2011883a 	mov	r8,r4
10002ab8:	01405f0e 	bge	zero,r5,10002c38 <__ieee754_sqrt+0x1a8>
10002abc:	2815d53a 	srai	r10,r5,20
10002ac0:	50006a26 	beq	r10,zero,10002c6c <__ieee754_sqrt+0x1dc>
10002ac4:	00800434 	movhi	r2,16
10002ac8:	52bf0044 	addi	r10,r10,-1023
10002acc:	10bfffc4 	addi	r2,r2,-1
10002ad0:	8084703a 	and	r2,r16,r2
10002ad4:	50c0004c 	andi	r3,r10,1
10002ad8:	10800434 	orhi	r2,r2,16
10002adc:	18004f1e 	bne	r3,zero,10002c1c <__ieee754_sqrt+0x18c>
10002ae0:	4006d7fa 	srli	r3,r8,31
10002ae4:	5015d07a 	srai	r10,r10,1
10002ae8:	1085883a 	add	r2,r2,r2
10002aec:	10c5883a 	add	r2,r2,r3
10002af0:	01800584 	movi	r6,22
10002af4:	4207883a 	add	r3,r8,r8
10002af8:	0013883a 	mov	r9,zero
10002afc:	000b883a 	mov	r5,zero
10002b00:	01000834 	movhi	r4,32
10002b04:	290f883a 	add	r7,r5,r4
10002b08:	1810d7fa 	srli	r8,r3,31
10002b0c:	31bfffc4 	addi	r6,r6,-1
10002b10:	11c00316 	blt	r2,r7,10002b20 <__ieee754_sqrt+0x90>
10002b14:	11c5c83a 	sub	r2,r2,r7
10002b18:	390b883a 	add	r5,r7,r4
10002b1c:	4913883a 	add	r9,r9,r4
10002b20:	1085883a 	add	r2,r2,r2
10002b24:	1205883a 	add	r2,r2,r8
10002b28:	18c7883a 	add	r3,r3,r3
10002b2c:	2008d07a 	srli	r4,r4,1
10002b30:	303ff41e 	bne	r6,zero,10002b04 <__alt_data_end+0xf8002b04>
10002b34:	01200034 	movhi	r4,32768
10002b38:	01c00804 	movi	r7,32
10002b3c:	0011883a 	mov	r8,zero
10002b40:	0017883a 	mov	r11,zero
10002b44:	201b883a 	mov	r13,r4
10002b48:	00000806 	br	10002b6c <__ieee754_sqrt+0xdc>
10002b4c:	11401726 	beq	r2,r5,10002bac <__ieee754_sqrt+0x11c>
10002b50:	180cd7fa 	srli	r6,r3,31
10002b54:	1085883a 	add	r2,r2,r2
10002b58:	39ffffc4 	addi	r7,r7,-1
10002b5c:	1185883a 	add	r2,r2,r6
10002b60:	18c7883a 	add	r3,r3,r3
10002b64:	2008d07a 	srli	r4,r4,1
10002b68:	38001726 	beq	r7,zero,10002bc8 <__ieee754_sqrt+0x138>
10002b6c:	590d883a 	add	r6,r11,r4
10002b70:	28bff60e 	bge	r5,r2,10002b4c <__alt_data_end+0xf8002b4c>
10002b74:	3320002c 	andhi	r12,r6,32768
10002b78:	3117883a 	add	r11,r6,r4
10002b7c:	63400826 	beq	r12,r13,10002ba0 <__ieee754_sqrt+0x110>
10002b80:	2819883a 	mov	r12,r5
10002b84:	1145c83a 	sub	r2,r2,r5
10002b88:	1980012e 	bgeu	r3,r6,10002b90 <__ieee754_sqrt+0x100>
10002b8c:	10bfffc4 	addi	r2,r2,-1
10002b90:	1987c83a 	sub	r3,r3,r6
10002b94:	4111883a 	add	r8,r8,r4
10002b98:	600b883a 	mov	r5,r12
10002b9c:	003fec06 	br	10002b50 <__alt_data_end+0xf8002b50>
10002ba0:	583ff716 	blt	r11,zero,10002b80 <__alt_data_end+0xf8002b80>
10002ba4:	2b000044 	addi	r12,r5,1
10002ba8:	003ff606 	br	10002b84 <__alt_data_end+0xf8002b84>
10002bac:	19801936 	bltu	r3,r6,10002c14 <__ieee754_sqrt+0x184>
10002bb0:	3320002c 	andhi	r12,r6,32768
10002bb4:	3117883a 	add	r11,r6,r4
10002bb8:	63404626 	beq	r12,r13,10002cd4 <__ieee754_sqrt+0x244>
10002bbc:	1019883a 	mov	r12,r2
10002bc0:	0005883a 	mov	r2,zero
10002bc4:	003ff206 	br	10002b90 <__alt_data_end+0xf8002b90>
10002bc8:	10c4b03a 	or	r2,r2,r3
10002bcc:	10000426 	beq	r2,zero,10002be0 <__ieee754_sqrt+0x150>
10002bd0:	00bfffc4 	movi	r2,-1
10002bd4:	40804326 	beq	r8,r2,10002ce4 <__ieee754_sqrt+0x254>
10002bd8:	4080004c 	andi	r2,r8,1
10002bdc:	1211883a 	add	r8,r2,r8
10002be0:	4004d07a 	srli	r2,r8,1
10002be4:	4807d07a 	srai	r3,r9,1
10002be8:	010ff834 	movhi	r4,16352
10002bec:	4a40004c 	andi	r9,r9,1
10002bf0:	1909883a 	add	r4,r3,r4
10002bf4:	48000e1e 	bne	r9,zero,10002c30 <__ieee754_sqrt+0x1a0>
10002bf8:	5006953a 	slli	r3,r10,20
10002bfc:	1907883a 	add	r3,r3,r4
10002c00:	dfc00217 	ldw	ra,8(sp)
10002c04:	dc400117 	ldw	r17,4(sp)
10002c08:	dc000017 	ldw	r16,0(sp)
10002c0c:	dec00304 	addi	sp,sp,12
10002c10:	f800283a 	ret
10002c14:	100b883a 	mov	r5,r2
10002c18:	003fcd06 	br	10002b50 <__alt_data_end+0xf8002b50>
10002c1c:	4006d7fa 	srli	r3,r8,31
10002c20:	1085883a 	add	r2,r2,r2
10002c24:	4211883a 	add	r8,r8,r8
10002c28:	10c5883a 	add	r2,r2,r3
10002c2c:	003fac06 	br	10002ae0 <__alt_data_end+0xf8002ae0>
10002c30:	10a00034 	orhi	r2,r2,32768
10002c34:	003ff006 	br	10002bf8 <__alt_data_end+0xf8002bf8>
10002c38:	00a00034 	movhi	r2,32768
10002c3c:	10bfffc4 	addi	r2,r2,-1
10002c40:	2884703a 	and	r2,r5,r2
10002c44:	1104b03a 	or	r2,r2,r4
10002c48:	10001f26 	beq	r2,zero,10002cc8 <__ieee754_sqrt+0x238>
10002c4c:	28002c1e 	bne	r5,zero,10002d00 <__ieee754_sqrt+0x270>
10002c50:	0015883a 	mov	r10,zero
10002c54:	4020d2fa 	srli	r16,r8,11
10002c58:	52bffac4 	addi	r10,r10,-21
10002c5c:	4010957a 	slli	r8,r8,21
10002c60:	803ffc26 	beq	r16,zero,10002c54 <__alt_data_end+0xf8002c54>
10002c64:	8080042c 	andhi	r2,r16,16
10002c68:	1000211e 	bne	r2,zero,10002cf0 <__ieee754_sqrt+0x260>
10002c6c:	0005883a 	mov	r2,zero
10002c70:	8421883a 	add	r16,r16,r16
10002c74:	80c0042c 	andhi	r3,r16,16
10002c78:	10800044 	addi	r2,r2,1
10002c7c:	183ffc26 	beq	r3,zero,10002c70 <__alt_data_end+0xf8002c70>
10002c80:	01000044 	movi	r4,1
10002c84:	00c00804 	movi	r3,32
10002c88:	2089c83a 	sub	r4,r4,r2
10002c8c:	1887c83a 	sub	r3,r3,r2
10002c90:	40c6d83a 	srl	r3,r8,r3
10002c94:	5115883a 	add	r10,r10,r4
10002c98:	4090983a 	sll	r8,r8,r2
10002c9c:	80e0b03a 	or	r16,r16,r3
10002ca0:	003f8806 	br	10002ac4 <__alt_data_end+0xf8002ac4>
10002ca4:	200d883a 	mov	r6,r4
10002ca8:	280f883a 	mov	r7,r5
10002cac:	00055380 	call	10005538 <__muldf3>
10002cb0:	1009883a 	mov	r4,r2
10002cb4:	180b883a 	mov	r5,r3
10002cb8:	880d883a 	mov	r6,r17
10002cbc:	800f883a 	mov	r7,r16
10002cc0:	00040d80 	call	100040d8 <__adddf3>
10002cc4:	003fce06 	br	10002c00 <__alt_data_end+0xf8002c00>
10002cc8:	2005883a 	mov	r2,r4
10002ccc:	2807883a 	mov	r3,r5
10002cd0:	003fcb06 	br	10002c00 <__alt_data_end+0xf8002c00>
10002cd4:	583fb30e 	bge	r11,zero,10002ba4 <__alt_data_end+0xf8002ba4>
10002cd8:	0005883a 	mov	r2,zero
10002cdc:	2819883a 	mov	r12,r5
10002ce0:	003fab06 	br	10002b90 <__alt_data_end+0xf8002b90>
10002ce4:	4a400044 	addi	r9,r9,1
10002ce8:	0005883a 	mov	r2,zero
10002cec:	003fbd06 	br	10002be4 <__alt_data_end+0xf8002be4>
10002cf0:	00c00804 	movi	r3,32
10002cf4:	01000044 	movi	r4,1
10002cf8:	0005883a 	mov	r2,zero
10002cfc:	003fe406 	br	10002c90 <__alt_data_end+0xf8002c90>
10002d00:	200d883a 	mov	r6,r4
10002d04:	280f883a 	mov	r7,r5
10002d08:	0005da40 	call	10005da4 <__subdf3>
10002d0c:	1009883a 	mov	r4,r2
10002d10:	180b883a 	mov	r5,r3
10002d14:	100d883a 	mov	r6,r2
10002d18:	180f883a 	mov	r7,r3
10002d1c:	00049740 	call	10004974 <__divdf3>
10002d20:	003fb706 	br	10002c00 <__alt_data_end+0xf8002c00>

10002d24 <fabs>:
10002d24:	00e00034 	movhi	r3,32768
10002d28:	18ffffc4 	addi	r3,r3,-1
10002d2c:	2005883a 	mov	r2,r4
10002d30:	28c6703a 	and	r3,r5,r3
10002d34:	f800283a 	ret

10002d38 <finite>:
10002d38:	00a00034 	movhi	r2,32768
10002d3c:	10bfffc4 	addi	r2,r2,-1
10002d40:	288a703a 	and	r5,r5,r2
10002d44:	00e00434 	movhi	r3,32784
10002d48:	28c5883a 	add	r2,r5,r3
10002d4c:	1004d7fa 	srli	r2,r2,31
10002d50:	f800283a 	ret

10002d54 <__fpclassifyd>:
10002d54:	00a00034 	movhi	r2,32768
10002d58:	10bfffc4 	addi	r2,r2,-1
10002d5c:	2884703a 	and	r2,r5,r2
10002d60:	10000726 	beq	r2,zero,10002d80 <__fpclassifyd+0x2c>
10002d64:	00fffc34 	movhi	r3,65520
10002d68:	019ff834 	movhi	r6,32736
10002d6c:	28c7883a 	add	r3,r5,r3
10002d70:	31bfffc4 	addi	r6,r6,-1
10002d74:	30c00536 	bltu	r6,r3,10002d8c <__fpclassifyd+0x38>
10002d78:	00800104 	movi	r2,4
10002d7c:	f800283a 	ret
10002d80:	2000021e 	bne	r4,zero,10002d8c <__fpclassifyd+0x38>
10002d84:	00800084 	movi	r2,2
10002d88:	f800283a 	ret
10002d8c:	00dffc34 	movhi	r3,32752
10002d90:	019ff834 	movhi	r6,32736
10002d94:	28cb883a 	add	r5,r5,r3
10002d98:	31bfffc4 	addi	r6,r6,-1
10002d9c:	317ff62e 	bgeu	r6,r5,10002d78 <__alt_data_end+0xf8002d78>
10002da0:	01400434 	movhi	r5,16
10002da4:	297fffc4 	addi	r5,r5,-1
10002da8:	28800236 	bltu	r5,r2,10002db4 <__fpclassifyd+0x60>
10002dac:	008000c4 	movi	r2,3
10002db0:	f800283a 	ret
10002db4:	10c00226 	beq	r2,r3,10002dc0 <__fpclassifyd+0x6c>
10002db8:	0005883a 	mov	r2,zero
10002dbc:	f800283a 	ret
10002dc0:	2005003a 	cmpeq	r2,r4,zero
10002dc4:	f800283a 	ret

10002dc8 <matherr>:
10002dc8:	0005883a 	mov	r2,zero
10002dcc:	f800283a 	ret

10002dd0 <nan>:
10002dd0:	0005883a 	mov	r2,zero
10002dd4:	00dffe34 	movhi	r3,32760
10002dd8:	f800283a 	ret

10002ddc <rint>:
10002ddc:	2813d53a 	srai	r9,r5,20
10002de0:	defff904 	addi	sp,sp,-28
10002de4:	dc400315 	stw	r17,12(sp)
10002de8:	4a41ffcc 	andi	r9,r9,2047
10002dec:	dfc00615 	stw	ra,24(sp)
10002df0:	dcc00515 	stw	r19,20(sp)
10002df4:	dc800415 	stw	r18,16(sp)
10002df8:	dc000215 	stw	r16,8(sp)
10002dfc:	02c004c4 	movi	r11,19
10002e00:	4abf0044 	addi	r10,r9,-1023
10002e04:	2811883a 	mov	r8,r5
10002e08:	2005883a 	mov	r2,r4
10002e0c:	280f883a 	mov	r7,r5
10002e10:	200d883a 	mov	r6,r4
10002e14:	2822d7fa 	srli	r17,r5,31
10002e18:	5a801316 	blt	r11,r10,10002e68 <rint+0x8c>
10002e1c:	50003c16 	blt	r10,zero,10002f10 <rint+0x134>
10002e20:	00c00434 	movhi	r3,16
10002e24:	18ffffc4 	addi	r3,r3,-1
10002e28:	1a87d83a 	sra	r3,r3,r10
10002e2c:	1948703a 	and	r4,r3,r5
10002e30:	2088b03a 	or	r4,r4,r2
10002e34:	20001026 	beq	r4,zero,10002e78 <rint+0x9c>
10002e38:	1804d07a 	srli	r2,r3,1
10002e3c:	1146703a 	and	r3,r2,r5
10002e40:	198cb03a 	or	r6,r3,r6
10002e44:	30005526 	beq	r6,zero,10002f9c <rint+0x1c0>
10002e48:	52c05b26 	beq	r10,r11,10002fb8 <rint+0x1dc>
10002e4c:	000d883a 	mov	r6,zero
10002e50:	00c00134 	movhi	r3,4
10002e54:	1a87d83a 	sra	r3,r3,r10
10002e58:	0084303a 	nor	r2,zero,r2
10002e5c:	1210703a 	and	r8,r2,r8
10002e60:	40ceb03a 	or	r7,r8,r3
10002e64:	00001906 	br	10002ecc <rint+0xf0>
10002e68:	00c00cc4 	movi	r3,51
10002e6c:	1a800a0e 	bge	r3,r10,10002e98 <rint+0xbc>
10002e70:	00c10004 	movi	r3,1024
10002e74:	50c04d26 	beq	r10,r3,10002fac <rint+0x1d0>
10002e78:	3807883a 	mov	r3,r7
10002e7c:	dfc00617 	ldw	ra,24(sp)
10002e80:	dcc00517 	ldw	r19,20(sp)
10002e84:	dc800417 	ldw	r18,16(sp)
10002e88:	dc400317 	ldw	r17,12(sp)
10002e8c:	dc000217 	ldw	r16,8(sp)
10002e90:	dec00704 	addi	sp,sp,28
10002e94:	f800283a 	ret
10002e98:	4a7efb44 	addi	r9,r9,-1043
10002e9c:	00ffffc4 	movi	r3,-1
10002ea0:	1a46d83a 	srl	r3,r3,r9
10002ea4:	1908703a 	and	r4,r3,r4
10002ea8:	20003e26 	beq	r4,zero,10002fa4 <rint+0x1c8>
10002eac:	1806d07a 	srli	r3,r3,1
10002eb0:	1884703a 	and	r2,r3,r2
10002eb4:	10000526 	beq	r2,zero,10002ecc <rint+0xf0>
10002eb8:	00900034 	movhi	r2,16384
10002ebc:	1253d83a 	sra	r9,r2,r9
10002ec0:	00c6303a 	nor	r3,zero,r3
10002ec4:	198c703a 	and	r6,r3,r6
10002ec8:	324cb03a 	or	r6,r6,r9
10002ecc:	882290fa 	slli	r17,r17,3
10002ed0:	00c40074 	movhi	r3,4097
10002ed4:	18c8f304 	addi	r3,r3,9164
10002ed8:	1c63883a 	add	r17,r3,r17
10002edc:	8c800017 	ldw	r18,0(r17)
10002ee0:	8c000117 	ldw	r16,4(r17)
10002ee4:	9009883a 	mov	r4,r18
10002ee8:	800b883a 	mov	r5,r16
10002eec:	00040d80 	call	100040d8 <__adddf3>
10002ef0:	d8800015 	stw	r2,0(sp)
10002ef4:	d8c00115 	stw	r3,4(sp)
10002ef8:	d9000017 	ldw	r4,0(sp)
10002efc:	d9400117 	ldw	r5,4(sp)
10002f00:	900d883a 	mov	r6,r18
10002f04:	800f883a 	mov	r7,r16
10002f08:	0005da40 	call	10005da4 <__subdf3>
10002f0c:	003fdb06 	br	10002e7c <__alt_data_end+0xf8002e7c>
10002f10:	04200034 	movhi	r16,32768
10002f14:	843fffc4 	addi	r16,r16,-1
10002f18:	2c06703a 	and	r3,r5,r16
10002f1c:	1906b03a 	or	r3,r3,r4
10002f20:	18002026 	beq	r3,zero,10002fa4 <rint+0x1c8>
10002f24:	00c00434 	movhi	r3,16
10002f28:	18ffffc4 	addi	r3,r3,-1
10002f2c:	28c6703a 	and	r3,r5,r3
10002f30:	1886b03a 	or	r3,r3,r2
10002f34:	880890fa 	slli	r4,r17,3
10002f38:	00d3c83a 	sub	r9,zero,r3
10002f3c:	48d2b03a 	or	r9,r9,r3
10002f40:	00c40074 	movhi	r3,4097
10002f44:	18c8f304 	addi	r3,r3,9164
10002f48:	1907883a 	add	r3,r3,r4
10002f4c:	4812d33a 	srli	r9,r9,12
10002f50:	1cc00017 	ldw	r19,0(r3)
10002f54:	1c800117 	ldw	r18,4(r3)
10002f58:	4a40022c 	andhi	r9,r9,8
10002f5c:	29ffffac 	andhi	r7,r5,65534
10002f60:	49ceb03a 	or	r7,r9,r7
10002f64:	9809883a 	mov	r4,r19
10002f68:	900b883a 	mov	r5,r18
10002f6c:	00040d80 	call	100040d8 <__adddf3>
10002f70:	d8800015 	stw	r2,0(sp)
10002f74:	d8c00115 	stw	r3,4(sp)
10002f78:	d9000017 	ldw	r4,0(sp)
10002f7c:	d9400117 	ldw	r5,4(sp)
10002f80:	980d883a 	mov	r6,r19
10002f84:	900f883a 	mov	r7,r18
10002f88:	0005da40 	call	10005da4 <__subdf3>
10002f8c:	881097fa 	slli	r8,r17,31
10002f90:	1c06703a 	and	r3,r3,r16
10002f94:	40c6b03a 	or	r3,r8,r3
10002f98:	003fb806 	br	10002e7c <__alt_data_end+0xf8002e7c>
10002f9c:	000d883a 	mov	r6,zero
10002fa0:	003fca06 	br	10002ecc <__alt_data_end+0xf8002ecc>
10002fa4:	4007883a 	mov	r3,r8
10002fa8:	003fb406 	br	10002e7c <__alt_data_end+0xf8002e7c>
10002fac:	200d883a 	mov	r6,r4
10002fb0:	00040d80 	call	100040d8 <__adddf3>
10002fb4:	003fb106 	br	10002e7c <__alt_data_end+0xf8002e7c>
10002fb8:	01a00034 	movhi	r6,32768
10002fbc:	003fa406 	br	10002e50 <__alt_data_end+0xf8002e50>

10002fc0 <scalbn>:
10002fc0:	2a1ffc2c 	andhi	r8,r5,32752
10002fc4:	4011d53a 	srai	r8,r8,20
10002fc8:	defffe04 	addi	sp,sp,-8
10002fcc:	dc000015 	stw	r16,0(sp)
10002fd0:	dfc00115 	stw	ra,4(sp)
10002fd4:	280f883a 	mov	r7,r5
10002fd8:	2015883a 	mov	r10,r4
10002fdc:	3021883a 	mov	r16,r6
10002fe0:	4000251e 	bne	r8,zero,10003078 <scalbn+0xb8>
10002fe4:	00a00034 	movhi	r2,32768
10002fe8:	10bfffc4 	addi	r2,r2,-1
10002fec:	2884703a 	and	r2,r5,r2
10002ff0:	1104b03a 	or	r2,r2,r4
10002ff4:	10003126 	beq	r2,zero,100030bc <scalbn+0xfc>
10002ff8:	01d0d434 	movhi	r7,17232
10002ffc:	000d883a 	mov	r6,zero
10003000:	00055380 	call	10005538 <__muldf3>
10003004:	013ffff4 	movhi	r4,65535
10003008:	210f2c04 	addi	r4,r4,15536
1000300c:	1015883a 	mov	r10,r2
10003010:	180f883a 	mov	r7,r3
10003014:	81002f16 	blt	r16,r4,100030d4 <scalbn+0x114>
10003018:	1a5ffc2c 	andhi	r9,r3,32752
1000301c:	4813d53a 	srai	r9,r9,20
10003020:	0081ff84 	movi	r2,2046
10003024:	180d883a 	mov	r6,r3
10003028:	4a3ff284 	addi	r8,r9,-54
1000302c:	4411883a 	add	r8,r8,r16
10003030:	1200170e 	bge	r2,r8,10003090 <scalbn+0xd0>
10003034:	01220034 	movhi	r4,34816
10003038:	015f8e34 	movhi	r5,32312
1000303c:	500d883a 	mov	r6,r10
10003040:	211d6704 	addi	r4,r4,30108
10003044:	29790f04 	addi	r5,r5,-7108
10003048:	000318c0 	call	1000318c <copysign>
1000304c:	01a20034 	movhi	r6,34816
10003050:	01df8e34 	movhi	r7,32312
10003054:	1009883a 	mov	r4,r2
10003058:	180b883a 	mov	r5,r3
1000305c:	319d6704 	addi	r6,r6,30108
10003060:	39f90f04 	addi	r7,r7,-7108
10003064:	00055380 	call	10005538 <__muldf3>
10003068:	dfc00117 	ldw	ra,4(sp)
1000306c:	dc000017 	ldw	r16,0(sp)
10003070:	dec00204 	addi	sp,sp,8
10003074:	f800283a 	ret
10003078:	0081ffc4 	movi	r2,2047
1000307c:	280d883a 	mov	r6,r5
10003080:	40803126 	beq	r8,r2,10003148 <scalbn+0x188>
10003084:	4411883a 	add	r8,r8,r16
10003088:	0081ff84 	movi	r2,2046
1000308c:	123fe916 	blt	r2,r8,10003034 <__alt_data_end+0xf8003034>
10003090:	02001b0e 	bge	zero,r8,10003100 <scalbn+0x140>
10003094:	4010953a 	slli	r8,r8,20
10003098:	00e00434 	movhi	r3,32784
1000309c:	18ffffc4 	addi	r3,r3,-1
100030a0:	30ce703a 	and	r7,r6,r3
100030a4:	5005883a 	mov	r2,r10
100030a8:	41c6b03a 	or	r3,r8,r7
100030ac:	dfc00117 	ldw	ra,4(sp)
100030b0:	dc000017 	ldw	r16,0(sp)
100030b4:	dec00204 	addi	sp,sp,8
100030b8:	f800283a 	ret
100030bc:	2005883a 	mov	r2,r4
100030c0:	2807883a 	mov	r3,r5
100030c4:	dfc00117 	ldw	ra,4(sp)
100030c8:	dc000017 	ldw	r16,0(sp)
100030cc:	dec00204 	addi	sp,sp,8
100030d0:	f800283a 	ret
100030d4:	01b0be74 	movhi	r6,49913
100030d8:	01c06974 	movhi	r7,421
100030dc:	31bcd644 	addi	r6,r6,-3239
100030e0:	39db87c4 	addi	r7,r7,28191
100030e4:	1009883a 	mov	r4,r2
100030e8:	180b883a 	mov	r5,r3
100030ec:	00055380 	call	10005538 <__muldf3>
100030f0:	dfc00117 	ldw	ra,4(sp)
100030f4:	dc000017 	ldw	r16,0(sp)
100030f8:	dec00204 	addi	sp,sp,8
100030fc:	f800283a 	ret
10003100:	00bff2c4 	movi	r2,-53
10003104:	4080160e 	bge	r8,r2,10003160 <scalbn+0x1a0>
10003108:	00b0d414 	movui	r2,50000
1000310c:	143fc916 	blt	r2,r16,10003034 <__alt_data_end+0xf8003034>
10003110:	0130be74 	movhi	r4,49913
10003114:	01406974 	movhi	r5,421
10003118:	500d883a 	mov	r6,r10
1000311c:	213cd644 	addi	r4,r4,-3239
10003120:	295b87c4 	addi	r5,r5,28191
10003124:	000318c0 	call	1000318c <copysign>
10003128:	01b0be74 	movhi	r6,49913
1000312c:	01c06974 	movhi	r7,421
10003130:	1009883a 	mov	r4,r2
10003134:	180b883a 	mov	r5,r3
10003138:	31bcd644 	addi	r6,r6,-3239
1000313c:	39db87c4 	addi	r7,r7,28191
10003140:	00055380 	call	10005538 <__muldf3>
10003144:	003fd906 	br	100030ac <__alt_data_end+0xf80030ac>
10003148:	200d883a 	mov	r6,r4
1000314c:	00040d80 	call	100040d8 <__adddf3>
10003150:	dfc00117 	ldw	ra,4(sp)
10003154:	dc000017 	ldw	r16,0(sp)
10003158:	dec00204 	addi	sp,sp,8
1000315c:	f800283a 	ret
10003160:	42000d84 	addi	r8,r8,54
10003164:	4012953a 	slli	r9,r8,20
10003168:	01e00434 	movhi	r7,32784
1000316c:	39ffffc4 	addi	r7,r7,-1
10003170:	31ca703a 	and	r5,r6,r7
10003174:	5009883a 	mov	r4,r10
10003178:	494ab03a 	or	r5,r9,r5
1000317c:	000d883a 	mov	r6,zero
10003180:	01cf2434 	movhi	r7,15504
10003184:	00055380 	call	10005538 <__muldf3>
10003188:	003fc806 	br	100030ac <__alt_data_end+0xf80030ac>

1000318c <copysign>:
1000318c:	2005883a 	mov	r2,r4
10003190:	01200034 	movhi	r4,32768
10003194:	213fffc4 	addi	r4,r4,-1
10003198:	38e0002c 	andhi	r3,r7,32768
1000319c:	290a703a 	and	r5,r5,r4
100031a0:	1946b03a 	or	r3,r3,r5
100031a4:	f800283a 	ret

100031a8 <__muldi3>:
100031a8:	defff604 	addi	sp,sp,-40
100031ac:	dd800615 	stw	r22,24(sp)
100031b0:	dd400515 	stw	r21,20(sp)
100031b4:	25bfffcc 	andi	r22,r4,65535
100031b8:	357fffcc 	andi	r21,r6,65535
100031bc:	dc400115 	stw	r17,4(sp)
100031c0:	2022d43a 	srli	r17,r4,16
100031c4:	dcc00315 	stw	r19,12(sp)
100031c8:	dc800215 	stw	r18,8(sp)
100031cc:	2027883a 	mov	r19,r4
100031d0:	2825883a 	mov	r18,r5
100031d4:	a809883a 	mov	r4,r21
100031d8:	b00b883a 	mov	r5,r22
100031dc:	dfc00915 	stw	ra,36(sp)
100031e0:	df000815 	stw	fp,32(sp)
100031e4:	ddc00715 	stw	r23,28(sp)
100031e8:	3839883a 	mov	fp,r7
100031ec:	302ed43a 	srli	r23,r6,16
100031f0:	dd000415 	stw	r20,16(sp)
100031f4:	dc000015 	stw	r16,0(sp)
100031f8:	3029883a 	mov	r20,r6
100031fc:	00040b00 	call	100040b0 <__mulsi3>
10003200:	a809883a 	mov	r4,r21
10003204:	880b883a 	mov	r5,r17
10003208:	1021883a 	mov	r16,r2
1000320c:	00040b00 	call	100040b0 <__mulsi3>
10003210:	880b883a 	mov	r5,r17
10003214:	b809883a 	mov	r4,r23
10003218:	102b883a 	mov	r21,r2
1000321c:	00040b00 	call	100040b0 <__mulsi3>
10003220:	b809883a 	mov	r4,r23
10003224:	b00b883a 	mov	r5,r22
10003228:	1023883a 	mov	r17,r2
1000322c:	00040b00 	call	100040b0 <__mulsi3>
10003230:	8012d43a 	srli	r9,r16,16
10003234:	a885883a 	add	r2,r21,r2
10003238:	1251883a 	add	r8,r2,r9
1000323c:	4540022e 	bgeu	r8,r21,10003248 <__muldi3+0xa0>
10003240:	00800074 	movhi	r2,1
10003244:	88a3883a 	add	r17,r17,r2
10003248:	4006d43a 	srli	r3,r8,16
1000324c:	4010943a 	slli	r8,r8,16
10003250:	9809883a 	mov	r4,r19
10003254:	e00b883a 	mov	r5,fp
10003258:	843fffcc 	andi	r16,r16,65535
1000325c:	88e3883a 	add	r17,r17,r3
10003260:	4421883a 	add	r16,r8,r16
10003264:	00040b00 	call	100040b0 <__mulsi3>
10003268:	a009883a 	mov	r4,r20
1000326c:	900b883a 	mov	r5,r18
10003270:	1027883a 	mov	r19,r2
10003274:	00040b00 	call	100040b0 <__mulsi3>
10003278:	9885883a 	add	r2,r19,r2
1000327c:	1447883a 	add	r3,r2,r17
10003280:	8005883a 	mov	r2,r16
10003284:	dfc00917 	ldw	ra,36(sp)
10003288:	df000817 	ldw	fp,32(sp)
1000328c:	ddc00717 	ldw	r23,28(sp)
10003290:	dd800617 	ldw	r22,24(sp)
10003294:	dd400517 	ldw	r21,20(sp)
10003298:	dd000417 	ldw	r20,16(sp)
1000329c:	dcc00317 	ldw	r19,12(sp)
100032a0:	dc800217 	ldw	r18,8(sp)
100032a4:	dc400117 	ldw	r17,4(sp)
100032a8:	dc000017 	ldw	r16,0(sp)
100032ac:	dec00a04 	addi	sp,sp,40
100032b0:	f800283a 	ret

100032b4 <__fixunsdfsi>:
100032b4:	defffd04 	addi	sp,sp,-12
100032b8:	000d883a 	mov	r6,zero
100032bc:	01d07834 	movhi	r7,16864
100032c0:	dc400115 	stw	r17,4(sp)
100032c4:	dc000015 	stw	r16,0(sp)
100032c8:	dfc00215 	stw	ra,8(sp)
100032cc:	2023883a 	mov	r17,r4
100032d0:	2821883a 	mov	r16,r5
100032d4:	00053780 	call	10005378 <__gedf2>
100032d8:	1000080e 	bge	r2,zero,100032fc <__fixunsdfsi+0x48>
100032dc:	8809883a 	mov	r4,r17
100032e0:	800b883a 	mov	r5,r16
100032e4:	00066740 	call	10006674 <__fixdfsi>
100032e8:	dfc00217 	ldw	ra,8(sp)
100032ec:	dc400117 	ldw	r17,4(sp)
100032f0:	dc000017 	ldw	r16,0(sp)
100032f4:	dec00304 	addi	sp,sp,12
100032f8:	f800283a 	ret
100032fc:	000d883a 	mov	r6,zero
10003300:	01d07834 	movhi	r7,16864
10003304:	8809883a 	mov	r4,r17
10003308:	800b883a 	mov	r5,r16
1000330c:	0005da40 	call	10005da4 <__subdf3>
10003310:	180b883a 	mov	r5,r3
10003314:	1009883a 	mov	r4,r2
10003318:	00066740 	call	10006674 <__fixdfsi>
1000331c:	00e00034 	movhi	r3,32768
10003320:	10c5883a 	add	r2,r2,r3
10003324:	003ff006 	br	100032e8 <__alt_data_end+0xf80032e8>

10003328 <__udivdi3>:
10003328:	defff504 	addi	sp,sp,-44
1000332c:	dcc00415 	stw	r19,16(sp)
10003330:	dc000115 	stw	r16,4(sp)
10003334:	dfc00a15 	stw	ra,40(sp)
10003338:	df000915 	stw	fp,36(sp)
1000333c:	ddc00815 	stw	r23,32(sp)
10003340:	dd800715 	stw	r22,28(sp)
10003344:	dd400615 	stw	r21,24(sp)
10003348:	dd000515 	stw	r20,20(sp)
1000334c:	dc800315 	stw	r18,12(sp)
10003350:	dc400215 	stw	r17,8(sp)
10003354:	2027883a 	mov	r19,r4
10003358:	2821883a 	mov	r16,r5
1000335c:	3800471e 	bne	r7,zero,1000347c <__udivdi3+0x154>
10003360:	3025883a 	mov	r18,r6
10003364:	2023883a 	mov	r17,r4
10003368:	2980592e 	bgeu	r5,r6,100034d0 <__udivdi3+0x1a8>
1000336c:	00bfffd4 	movui	r2,65535
10003370:	2829883a 	mov	r20,r5
10003374:	1180b236 	bltu	r2,r6,10003640 <__udivdi3+0x318>
10003378:	00803fc4 	movi	r2,255
1000337c:	1181622e 	bgeu	r2,r6,10003908 <__udivdi3+0x5e0>
10003380:	00800204 	movi	r2,8
10003384:	1007883a 	mov	r3,r2
10003388:	3084d83a 	srl	r2,r6,r2
1000338c:	01040074 	movhi	r4,4097
10003390:	2108f704 	addi	r4,r4,9180
10003394:	2085883a 	add	r2,r4,r2
10003398:	11000003 	ldbu	r4,0(r2)
1000339c:	20c9883a 	add	r4,r4,r3
100033a0:	00c00804 	movi	r3,32
100033a4:	1907c83a 	sub	r3,r3,r4
100033a8:	18000526 	beq	r3,zero,100033c0 <__udivdi3+0x98>
100033ac:	80e0983a 	sll	r16,r16,r3
100033b0:	9908d83a 	srl	r4,r19,r4
100033b4:	30e4983a 	sll	r18,r6,r3
100033b8:	98e2983a 	sll	r17,r19,r3
100033bc:	8128b03a 	or	r20,r16,r4
100033c0:	902ad43a 	srli	r21,r18,16
100033c4:	a009883a 	mov	r4,r20
100033c8:	95bfffcc 	andi	r22,r18,65535
100033cc:	a80b883a 	mov	r5,r21
100033d0:	00040a80 	call	100040a8 <__umodsi3>
100033d4:	a009883a 	mov	r4,r20
100033d8:	a80b883a 	mov	r5,r21
100033dc:	102f883a 	mov	r23,r2
100033e0:	00040a00 	call	100040a0 <__udivsi3>
100033e4:	1009883a 	mov	r4,r2
100033e8:	b00b883a 	mov	r5,r22
100033ec:	1021883a 	mov	r16,r2
100033f0:	00040b00 	call	100040b0 <__mulsi3>
100033f4:	b82e943a 	slli	r23,r23,16
100033f8:	8808d43a 	srli	r4,r17,16
100033fc:	b906b03a 	or	r3,r23,r4
10003400:	1880052e 	bgeu	r3,r2,10003418 <__udivdi3+0xf0>
10003404:	1c87883a 	add	r3,r3,r18
10003408:	813fffc4 	addi	r4,r16,-1
1000340c:	1c800136 	bltu	r3,r18,10003414 <__udivdi3+0xec>
10003410:	18815236 	bltu	r3,r2,1000395c <__udivdi3+0x634>
10003414:	2021883a 	mov	r16,r4
10003418:	18a7c83a 	sub	r19,r3,r2
1000341c:	9809883a 	mov	r4,r19
10003420:	a80b883a 	mov	r5,r21
10003424:	00040a80 	call	100040a8 <__umodsi3>
10003428:	1029883a 	mov	r20,r2
1000342c:	9809883a 	mov	r4,r19
10003430:	a80b883a 	mov	r5,r21
10003434:	a028943a 	slli	r20,r20,16
10003438:	00040a00 	call	100040a0 <__udivsi3>
1000343c:	1009883a 	mov	r4,r2
10003440:	b00b883a 	mov	r5,r22
10003444:	8c7fffcc 	andi	r17,r17,65535
10003448:	1027883a 	mov	r19,r2
1000344c:	a462b03a 	or	r17,r20,r17
10003450:	00040b00 	call	100040b0 <__mulsi3>
10003454:	8880052e 	bgeu	r17,r2,1000346c <__udivdi3+0x144>
10003458:	8ca3883a 	add	r17,r17,r18
1000345c:	98ffffc4 	addi	r3,r19,-1
10003460:	8c811036 	bltu	r17,r18,100038a4 <__udivdi3+0x57c>
10003464:	88810f2e 	bgeu	r17,r2,100038a4 <__udivdi3+0x57c>
10003468:	9cffff84 	addi	r19,r19,-2
1000346c:	8020943a 	slli	r16,r16,16
10003470:	0007883a 	mov	r3,zero
10003474:	9c04b03a 	or	r2,r19,r16
10003478:	00006006 	br	100035fc <__udivdi3+0x2d4>
1000347c:	29c05d36 	bltu	r5,r7,100035f4 <__udivdi3+0x2cc>
10003480:	00bfffd4 	movui	r2,65535
10003484:	11c0692e 	bgeu	r2,r7,1000362c <__udivdi3+0x304>
10003488:	00804034 	movhi	r2,256
1000348c:	10bfffc4 	addi	r2,r2,-1
10003490:	11c10e2e 	bgeu	r2,r7,100038cc <__udivdi3+0x5a4>
10003494:	01400604 	movi	r5,24
10003498:	2811883a 	mov	r8,r5
1000349c:	394ad83a 	srl	r5,r7,r5
100034a0:	00840074 	movhi	r2,4097
100034a4:	1088f704 	addi	r2,r2,9180
100034a8:	114b883a 	add	r5,r2,r5
100034ac:	29400003 	ldbu	r5,0(r5)
100034b0:	00c00804 	movi	r3,32
100034b4:	2a0b883a 	add	r5,r5,r8
100034b8:	196fc83a 	sub	r23,r3,r5
100034bc:	b8006b1e 	bne	r23,zero,1000366c <__udivdi3+0x344>
100034c0:	3c011436 	bltu	r7,r16,10003914 <__udivdi3+0x5ec>
100034c4:	9985403a 	cmpgeu	r2,r19,r6
100034c8:	0007883a 	mov	r3,zero
100034cc:	00004b06 	br	100035fc <__udivdi3+0x2d4>
100034d0:	3000041e 	bne	r6,zero,100034e4 <__udivdi3+0x1bc>
100034d4:	01000044 	movi	r4,1
100034d8:	000b883a 	mov	r5,zero
100034dc:	00040a00 	call	100040a0 <__udivsi3>
100034e0:	1025883a 	mov	r18,r2
100034e4:	00bfffd4 	movui	r2,65535
100034e8:	14805b2e 	bgeu	r2,r18,10003658 <__udivdi3+0x330>
100034ec:	00804034 	movhi	r2,256
100034f0:	10bfffc4 	addi	r2,r2,-1
100034f4:	1480fe2e 	bgeu	r2,r18,100038f0 <__udivdi3+0x5c8>
100034f8:	00800604 	movi	r2,24
100034fc:	1007883a 	mov	r3,r2
10003500:	9084d83a 	srl	r2,r18,r2
10003504:	01040074 	movhi	r4,4097
10003508:	2108f704 	addi	r4,r4,9180
1000350c:	2085883a 	add	r2,r4,r2
10003510:	11800003 	ldbu	r6,0(r2)
10003514:	01c00804 	movi	r7,32
10003518:	30c7883a 	add	r3,r6,r3
1000351c:	38cfc83a 	sub	r7,r7,r3
10003520:	3800a71e 	bne	r7,zero,100037c0 <__udivdi3+0x498>
10003524:	9028d43a 	srli	r20,r18,16
10003528:	84a1c83a 	sub	r16,r16,r18
1000352c:	957fffcc 	andi	r21,r18,65535
10003530:	00c00044 	movi	r3,1
10003534:	8009883a 	mov	r4,r16
10003538:	a00b883a 	mov	r5,r20
1000353c:	d8c00015 	stw	r3,0(sp)
10003540:	00040a80 	call	100040a8 <__umodsi3>
10003544:	8009883a 	mov	r4,r16
10003548:	a00b883a 	mov	r5,r20
1000354c:	102d883a 	mov	r22,r2
10003550:	00040a00 	call	100040a0 <__udivsi3>
10003554:	1009883a 	mov	r4,r2
10003558:	a80b883a 	mov	r5,r21
1000355c:	1021883a 	mov	r16,r2
10003560:	00040b00 	call	100040b0 <__mulsi3>
10003564:	b02c943a 	slli	r22,r22,16
10003568:	880ed43a 	srli	r7,r17,16
1000356c:	d8c00017 	ldw	r3,0(sp)
10003570:	b1ccb03a 	or	r6,r22,r7
10003574:	3080052e 	bgeu	r6,r2,1000358c <__udivdi3+0x264>
10003578:	348d883a 	add	r6,r6,r18
1000357c:	813fffc4 	addi	r4,r16,-1
10003580:	34800136 	bltu	r6,r18,10003588 <__udivdi3+0x260>
10003584:	3080f236 	bltu	r6,r2,10003950 <__udivdi3+0x628>
10003588:	2021883a 	mov	r16,r4
1000358c:	30a7c83a 	sub	r19,r6,r2
10003590:	9809883a 	mov	r4,r19
10003594:	a00b883a 	mov	r5,r20
10003598:	d8c00015 	stw	r3,0(sp)
1000359c:	00040a80 	call	100040a8 <__umodsi3>
100035a0:	102d883a 	mov	r22,r2
100035a4:	9809883a 	mov	r4,r19
100035a8:	a00b883a 	mov	r5,r20
100035ac:	b02c943a 	slli	r22,r22,16
100035b0:	00040a00 	call	100040a0 <__udivsi3>
100035b4:	1009883a 	mov	r4,r2
100035b8:	a80b883a 	mov	r5,r21
100035bc:	8c7fffcc 	andi	r17,r17,65535
100035c0:	1027883a 	mov	r19,r2
100035c4:	b462b03a 	or	r17,r22,r17
100035c8:	00040b00 	call	100040b0 <__mulsi3>
100035cc:	d8c00017 	ldw	r3,0(sp)
100035d0:	8880052e 	bgeu	r17,r2,100035e8 <__udivdi3+0x2c0>
100035d4:	8ca3883a 	add	r17,r17,r18
100035d8:	993fffc4 	addi	r4,r19,-1
100035dc:	8c80af36 	bltu	r17,r18,1000389c <__udivdi3+0x574>
100035e0:	8880ae2e 	bgeu	r17,r2,1000389c <__udivdi3+0x574>
100035e4:	9cffff84 	addi	r19,r19,-2
100035e8:	8020943a 	slli	r16,r16,16
100035ec:	9c04b03a 	or	r2,r19,r16
100035f0:	00000206 	br	100035fc <__udivdi3+0x2d4>
100035f4:	0007883a 	mov	r3,zero
100035f8:	0005883a 	mov	r2,zero
100035fc:	dfc00a17 	ldw	ra,40(sp)
10003600:	df000917 	ldw	fp,36(sp)
10003604:	ddc00817 	ldw	r23,32(sp)
10003608:	dd800717 	ldw	r22,28(sp)
1000360c:	dd400617 	ldw	r21,24(sp)
10003610:	dd000517 	ldw	r20,20(sp)
10003614:	dcc00417 	ldw	r19,16(sp)
10003618:	dc800317 	ldw	r18,12(sp)
1000361c:	dc400217 	ldw	r17,8(sp)
10003620:	dc000117 	ldw	r16,4(sp)
10003624:	dec00b04 	addi	sp,sp,44
10003628:	f800283a 	ret
1000362c:	00803fc4 	movi	r2,255
10003630:	11c0a92e 	bgeu	r2,r7,100038d8 <__udivdi3+0x5b0>
10003634:	01400204 	movi	r5,8
10003638:	2811883a 	mov	r8,r5
1000363c:	003f9706 	br	1000349c <__alt_data_end+0xf800349c>
10003640:	00804034 	movhi	r2,256
10003644:	10bfffc4 	addi	r2,r2,-1
10003648:	1180a62e 	bgeu	r2,r6,100038e4 <__udivdi3+0x5bc>
1000364c:	00800604 	movi	r2,24
10003650:	1007883a 	mov	r3,r2
10003654:	003f4c06 	br	10003388 <__alt_data_end+0xf8003388>
10003658:	00803fc4 	movi	r2,255
1000365c:	1480a72e 	bgeu	r2,r18,100038fc <__udivdi3+0x5d4>
10003660:	00800204 	movi	r2,8
10003664:	1007883a 	mov	r3,r2
10003668:	003fa506 	br	10003500 <__alt_data_end+0xf8003500>
1000366c:	3178d83a 	srl	fp,r6,r5
10003670:	3dce983a 	sll	r7,r7,r23
10003674:	8168d83a 	srl	r20,r16,r5
10003678:	9950d83a 	srl	r8,r19,r5
1000367c:	3f38b03a 	or	fp,r7,fp
10003680:	e024d43a 	srli	r18,fp,16
10003684:	85e0983a 	sll	r16,r16,r23
10003688:	a009883a 	mov	r4,r20
1000368c:	900b883a 	mov	r5,r18
10003690:	8220b03a 	or	r16,r16,r8
10003694:	35ea983a 	sll	r21,r6,r23
10003698:	00040a80 	call	100040a8 <__umodsi3>
1000369c:	a009883a 	mov	r4,r20
100036a0:	900b883a 	mov	r5,r18
100036a4:	1023883a 	mov	r17,r2
100036a8:	e5bfffcc 	andi	r22,fp,65535
100036ac:	00040a00 	call	100040a0 <__udivsi3>
100036b0:	1009883a 	mov	r4,r2
100036b4:	b00b883a 	mov	r5,r22
100036b8:	1029883a 	mov	r20,r2
100036bc:	00040b00 	call	100040b0 <__mulsi3>
100036c0:	8806943a 	slli	r3,r17,16
100036c4:	8014d43a 	srli	r10,r16,16
100036c8:	1a92b03a 	or	r9,r3,r10
100036cc:	4880042e 	bgeu	r9,r2,100036e0 <__udivdi3+0x3b8>
100036d0:	4f13883a 	add	r9,r9,fp
100036d4:	a0ffffc4 	addi	r3,r20,-1
100036d8:	4f00952e 	bgeu	r9,fp,10003930 <__udivdi3+0x608>
100036dc:	1829883a 	mov	r20,r3
100036e0:	48a3c83a 	sub	r17,r9,r2
100036e4:	8809883a 	mov	r4,r17
100036e8:	900b883a 	mov	r5,r18
100036ec:	00040a80 	call	100040a8 <__umodsi3>
100036f0:	8809883a 	mov	r4,r17
100036f4:	900b883a 	mov	r5,r18
100036f8:	d8800015 	stw	r2,0(sp)
100036fc:	00040a00 	call	100040a0 <__udivsi3>
10003700:	1009883a 	mov	r4,r2
10003704:	b00b883a 	mov	r5,r22
10003708:	1023883a 	mov	r17,r2
1000370c:	00040b00 	call	100040b0 <__mulsi3>
10003710:	d8c00017 	ldw	r3,0(sp)
10003714:	823fffcc 	andi	r8,r16,65535
10003718:	1806943a 	slli	r3,r3,16
1000371c:	1a20b03a 	or	r16,r3,r8
10003720:	8080042e 	bgeu	r16,r2,10003734 <__udivdi3+0x40c>
10003724:	8721883a 	add	r16,r16,fp
10003728:	88ffffc4 	addi	r3,r17,-1
1000372c:	87007c2e 	bgeu	r16,fp,10003920 <__udivdi3+0x5f8>
10003730:	1823883a 	mov	r17,r3
10003734:	a028943a 	slli	r20,r20,16
10003738:	acbfffcc 	andi	r18,r21,65535
1000373c:	900b883a 	mov	r5,r18
10003740:	8d28b03a 	or	r20,r17,r20
10003744:	a022d43a 	srli	r17,r20,16
10003748:	a5bfffcc 	andi	r22,r20,65535
1000374c:	b009883a 	mov	r4,r22
10003750:	a82ad43a 	srli	r21,r21,16
10003754:	80a1c83a 	sub	r16,r16,r2
10003758:	00040b00 	call	100040b0 <__mulsi3>
1000375c:	8809883a 	mov	r4,r17
10003760:	900b883a 	mov	r5,r18
10003764:	1039883a 	mov	fp,r2
10003768:	00040b00 	call	100040b0 <__mulsi3>
1000376c:	8809883a 	mov	r4,r17
10003770:	a80b883a 	mov	r5,r21
10003774:	1025883a 	mov	r18,r2
10003778:	00040b00 	call	100040b0 <__mulsi3>
1000377c:	b009883a 	mov	r4,r22
10003780:	a80b883a 	mov	r5,r21
10003784:	1023883a 	mov	r17,r2
10003788:	00040b00 	call	100040b0 <__mulsi3>
1000378c:	e006d43a 	srli	r3,fp,16
10003790:	9085883a 	add	r2,r18,r2
10003794:	10c7883a 	add	r3,r2,r3
10003798:	1c80022e 	bgeu	r3,r18,100037a4 <__udivdi3+0x47c>
1000379c:	00800074 	movhi	r2,1
100037a0:	88a3883a 	add	r17,r17,r2
100037a4:	1808d43a 	srli	r4,r3,16
100037a8:	8909883a 	add	r4,r17,r4
100037ac:	81004436 	bltu	r16,r4,100038c0 <__udivdi3+0x598>
100037b0:	81003e26 	beq	r16,r4,100038ac <__udivdi3+0x584>
100037b4:	a005883a 	mov	r2,r20
100037b8:	0007883a 	mov	r3,zero
100037bc:	003f8f06 	br	100035fc <__alt_data_end+0xf80035fc>
100037c0:	91e4983a 	sll	r18,r18,r7
100037c4:	80eed83a 	srl	r23,r16,r3
100037c8:	81cc983a 	sll	r6,r16,r7
100037cc:	9028d43a 	srli	r20,r18,16
100037d0:	98c6d83a 	srl	r3,r19,r3
100037d4:	b809883a 	mov	r4,r23
100037d8:	a00b883a 	mov	r5,r20
100037dc:	30ecb03a 	or	r22,r6,r3
100037e0:	99e2983a 	sll	r17,r19,r7
100037e4:	00040a80 	call	100040a8 <__umodsi3>
100037e8:	b809883a 	mov	r4,r23
100037ec:	a00b883a 	mov	r5,r20
100037f0:	1021883a 	mov	r16,r2
100037f4:	957fffcc 	andi	r21,r18,65535
100037f8:	00040a00 	call	100040a0 <__udivsi3>
100037fc:	a80b883a 	mov	r5,r21
10003800:	1009883a 	mov	r4,r2
10003804:	102f883a 	mov	r23,r2
10003808:	00040b00 	call	100040b0 <__mulsi3>
1000380c:	8020943a 	slli	r16,r16,16
10003810:	b00ad43a 	srli	r5,r22,16
10003814:	814cb03a 	or	r6,r16,r5
10003818:	3080062e 	bgeu	r6,r2,10003834 <__udivdi3+0x50c>
1000381c:	348d883a 	add	r6,r6,r18
10003820:	b8ffffc4 	addi	r3,r23,-1
10003824:	34804836 	bltu	r6,r18,10003948 <__udivdi3+0x620>
10003828:	3080472e 	bgeu	r6,r2,10003948 <__udivdi3+0x620>
1000382c:	bdffff84 	addi	r23,r23,-2
10003830:	348d883a 	add	r6,r6,r18
10003834:	30a7c83a 	sub	r19,r6,r2
10003838:	9809883a 	mov	r4,r19
1000383c:	a00b883a 	mov	r5,r20
10003840:	00040a80 	call	100040a8 <__umodsi3>
10003844:	9809883a 	mov	r4,r19
10003848:	a00b883a 	mov	r5,r20
1000384c:	1039883a 	mov	fp,r2
10003850:	00040a00 	call	100040a0 <__udivsi3>
10003854:	1009883a 	mov	r4,r2
10003858:	a80b883a 	mov	r5,r21
1000385c:	e038943a 	slli	fp,fp,16
10003860:	1027883a 	mov	r19,r2
10003864:	00040b00 	call	100040b0 <__mulsi3>
10003868:	b1bfffcc 	andi	r6,r22,65535
1000386c:	e18cb03a 	or	r6,fp,r6
10003870:	3080062e 	bgeu	r6,r2,1000388c <__udivdi3+0x564>
10003874:	348d883a 	add	r6,r6,r18
10003878:	98ffffc4 	addi	r3,r19,-1
1000387c:	34803036 	bltu	r6,r18,10003940 <__udivdi3+0x618>
10003880:	30802f2e 	bgeu	r6,r2,10003940 <__udivdi3+0x618>
10003884:	9cffff84 	addi	r19,r19,-2
10003888:	348d883a 	add	r6,r6,r18
1000388c:	b82e943a 	slli	r23,r23,16
10003890:	30a1c83a 	sub	r16,r6,r2
10003894:	9dc6b03a 	or	r3,r19,r23
10003898:	003f2606 	br	10003534 <__alt_data_end+0xf8003534>
1000389c:	2027883a 	mov	r19,r4
100038a0:	003f5106 	br	100035e8 <__alt_data_end+0xf80035e8>
100038a4:	1827883a 	mov	r19,r3
100038a8:	003ef006 	br	1000346c <__alt_data_end+0xf800346c>
100038ac:	1808943a 	slli	r4,r3,16
100038b0:	9dc6983a 	sll	r3,r19,r23
100038b4:	e73fffcc 	andi	fp,fp,65535
100038b8:	2709883a 	add	r4,r4,fp
100038bc:	193fbd2e 	bgeu	r3,r4,100037b4 <__alt_data_end+0xf80037b4>
100038c0:	a0bfffc4 	addi	r2,r20,-1
100038c4:	0007883a 	mov	r3,zero
100038c8:	003f4c06 	br	100035fc <__alt_data_end+0xf80035fc>
100038cc:	01400404 	movi	r5,16
100038d0:	2811883a 	mov	r8,r5
100038d4:	003ef106 	br	1000349c <__alt_data_end+0xf800349c>
100038d8:	000b883a 	mov	r5,zero
100038dc:	0011883a 	mov	r8,zero
100038e0:	003eee06 	br	1000349c <__alt_data_end+0xf800349c>
100038e4:	00800404 	movi	r2,16
100038e8:	1007883a 	mov	r3,r2
100038ec:	003ea606 	br	10003388 <__alt_data_end+0xf8003388>
100038f0:	00800404 	movi	r2,16
100038f4:	1007883a 	mov	r3,r2
100038f8:	003f0106 	br	10003500 <__alt_data_end+0xf8003500>
100038fc:	0005883a 	mov	r2,zero
10003900:	0007883a 	mov	r3,zero
10003904:	003efe06 	br	10003500 <__alt_data_end+0xf8003500>
10003908:	0005883a 	mov	r2,zero
1000390c:	0007883a 	mov	r3,zero
10003910:	003e9d06 	br	10003388 <__alt_data_end+0xf8003388>
10003914:	0007883a 	mov	r3,zero
10003918:	00800044 	movi	r2,1
1000391c:	003f3706 	br	100035fc <__alt_data_end+0xf80035fc>
10003920:	80bf832e 	bgeu	r16,r2,10003730 <__alt_data_end+0xf8003730>
10003924:	8c7fff84 	addi	r17,r17,-2
10003928:	8721883a 	add	r16,r16,fp
1000392c:	003f8106 	br	10003734 <__alt_data_end+0xf8003734>
10003930:	48bf6a2e 	bgeu	r9,r2,100036dc <__alt_data_end+0xf80036dc>
10003934:	a53fff84 	addi	r20,r20,-2
10003938:	4f13883a 	add	r9,r9,fp
1000393c:	003f6806 	br	100036e0 <__alt_data_end+0xf80036e0>
10003940:	1827883a 	mov	r19,r3
10003944:	003fd106 	br	1000388c <__alt_data_end+0xf800388c>
10003948:	182f883a 	mov	r23,r3
1000394c:	003fb906 	br	10003834 <__alt_data_end+0xf8003834>
10003950:	843fff84 	addi	r16,r16,-2
10003954:	348d883a 	add	r6,r6,r18
10003958:	003f0c06 	br	1000358c <__alt_data_end+0xf800358c>
1000395c:	843fff84 	addi	r16,r16,-2
10003960:	1c87883a 	add	r3,r3,r18
10003964:	003eac06 	br	10003418 <__alt_data_end+0xf8003418>

10003968 <__umoddi3>:
10003968:	defff404 	addi	sp,sp,-48
1000396c:	dd800815 	stw	r22,32(sp)
10003970:	dc400315 	stw	r17,12(sp)
10003974:	dc000215 	stw	r16,8(sp)
10003978:	dfc00b15 	stw	ra,44(sp)
1000397c:	df000a15 	stw	fp,40(sp)
10003980:	ddc00915 	stw	r23,36(sp)
10003984:	dd400715 	stw	r21,28(sp)
10003988:	dd000615 	stw	r20,24(sp)
1000398c:	dcc00515 	stw	r19,20(sp)
10003990:	dc800415 	stw	r18,16(sp)
10003994:	2021883a 	mov	r16,r4
10003998:	2823883a 	mov	r17,r5
1000399c:	282d883a 	mov	r22,r5
100039a0:	38003c1e 	bne	r7,zero,10003a94 <__umoddi3+0x12c>
100039a4:	3027883a 	mov	r19,r6
100039a8:	2029883a 	mov	r20,r4
100039ac:	2980522e 	bgeu	r5,r6,10003af8 <__umoddi3+0x190>
100039b0:	00bfffd4 	movui	r2,65535
100039b4:	1180a436 	bltu	r2,r6,10003c48 <__umoddi3+0x2e0>
100039b8:	00803fc4 	movi	r2,255
100039bc:	11815e2e 	bgeu	r2,r6,10003f38 <__umoddi3+0x5d0>
100039c0:	01400204 	movi	r5,8
100039c4:	2805883a 	mov	r2,r5
100039c8:	314ad83a 	srl	r5,r6,r5
100039cc:	00c40074 	movhi	r3,4097
100039d0:	18c8f704 	addi	r3,r3,9180
100039d4:	194b883a 	add	r5,r3,r5
100039d8:	29000003 	ldbu	r4,0(r5)
100039dc:	2089883a 	add	r4,r4,r2
100039e0:	00800804 	movi	r2,32
100039e4:	1105c83a 	sub	r2,r2,r4
100039e8:	10010c26 	beq	r2,zero,10003e1c <__umoddi3+0x4b4>
100039ec:	88a2983a 	sll	r17,r17,r2
100039f0:	8108d83a 	srl	r4,r16,r4
100039f4:	30a6983a 	sll	r19,r6,r2
100039f8:	80a8983a 	sll	r20,r16,r2
100039fc:	1025883a 	mov	r18,r2
10003a00:	892cb03a 	or	r22,r17,r4
10003a04:	9822d43a 	srli	r17,r19,16
10003a08:	b009883a 	mov	r4,r22
10003a0c:	9d7fffcc 	andi	r21,r19,65535
10003a10:	880b883a 	mov	r5,r17
10003a14:	00040a80 	call	100040a8 <__umodsi3>
10003a18:	b009883a 	mov	r4,r22
10003a1c:	880b883a 	mov	r5,r17
10003a20:	102f883a 	mov	r23,r2
10003a24:	00040a00 	call	100040a0 <__udivsi3>
10003a28:	1009883a 	mov	r4,r2
10003a2c:	a80b883a 	mov	r5,r21
10003a30:	00040b00 	call	100040b0 <__mulsi3>
10003a34:	b82e943a 	slli	r23,r23,16
10003a38:	a008d43a 	srli	r4,r20,16
10003a3c:	b906b03a 	or	r3,r23,r4
10003a40:	1880042e 	bgeu	r3,r2,10003a54 <__umoddi3+0xec>
10003a44:	1cc7883a 	add	r3,r3,r19
10003a48:	1cc00236 	bltu	r3,r19,10003a54 <__umoddi3+0xec>
10003a4c:	1880012e 	bgeu	r3,r2,10003a54 <__umoddi3+0xec>
10003a50:	1cc7883a 	add	r3,r3,r19
10003a54:	18a1c83a 	sub	r16,r3,r2
10003a58:	8009883a 	mov	r4,r16
10003a5c:	880b883a 	mov	r5,r17
10003a60:	00040a80 	call	100040a8 <__umodsi3>
10003a64:	8009883a 	mov	r4,r16
10003a68:	880b883a 	mov	r5,r17
10003a6c:	102d883a 	mov	r22,r2
10003a70:	00040a00 	call	100040a0 <__udivsi3>
10003a74:	1009883a 	mov	r4,r2
10003a78:	a80b883a 	mov	r5,r21
10003a7c:	b02c943a 	slli	r22,r22,16
10003a80:	00040b00 	call	100040b0 <__mulsi3>
10003a84:	a13fffcc 	andi	r4,r20,65535
10003a88:	b106b03a 	or	r3,r22,r4
10003a8c:	1880572e 	bgeu	r3,r2,10003bec <__umoddi3+0x284>
10003a90:	00005206 	br	10003bdc <__umoddi3+0x274>
10003a94:	29c05936 	bltu	r5,r7,10003bfc <__umoddi3+0x294>
10003a98:	00bfffd4 	movui	r2,65535
10003a9c:	11c0652e 	bgeu	r2,r7,10003c34 <__umoddi3+0x2cc>
10003aa0:	00804034 	movhi	r2,256
10003aa4:	10bfffc4 	addi	r2,r2,-1
10003aa8:	11c1172e 	bgeu	r2,r7,10003f08 <__umoddi3+0x5a0>
10003aac:	01400604 	movi	r5,24
10003ab0:	282b883a 	mov	r21,r5
10003ab4:	394ad83a 	srl	r5,r7,r5
10003ab8:	00c40074 	movhi	r3,4097
10003abc:	18c8f704 	addi	r3,r3,9180
10003ac0:	194b883a 	add	r5,r3,r5
10003ac4:	28800003 	ldbu	r2,0(r5)
10003ac8:	00c00804 	movi	r3,32
10003acc:	156b883a 	add	r21,r2,r21
10003ad0:	1d69c83a 	sub	r20,r3,r21
10003ad4:	a000671e 	bne	r20,zero,10003c74 <__umoddi3+0x30c>
10003ad8:	3c400136 	bltu	r7,r17,10003ae0 <__umoddi3+0x178>
10003adc:	81812336 	bltu	r16,r6,10003f6c <__umoddi3+0x604>
10003ae0:	8185c83a 	sub	r2,r16,r6
10003ae4:	89e3c83a 	sub	r17,r17,r7
10003ae8:	8087803a 	cmpltu	r3,r16,r2
10003aec:	88edc83a 	sub	r22,r17,r3
10003af0:	b007883a 	mov	r3,r22
10003af4:	00004306 	br	10003c04 <__umoddi3+0x29c>
10003af8:	3000041e 	bne	r6,zero,10003b0c <__umoddi3+0x1a4>
10003afc:	01000044 	movi	r4,1
10003b00:	000b883a 	mov	r5,zero
10003b04:	00040a00 	call	100040a0 <__udivsi3>
10003b08:	1027883a 	mov	r19,r2
10003b0c:	00bfffd4 	movui	r2,65535
10003b10:	14c0532e 	bgeu	r2,r19,10003c60 <__umoddi3+0x2f8>
10003b14:	00804034 	movhi	r2,256
10003b18:	10bfffc4 	addi	r2,r2,-1
10003b1c:	14c1032e 	bgeu	r2,r19,10003f2c <__umoddi3+0x5c4>
10003b20:	00800604 	movi	r2,24
10003b24:	1007883a 	mov	r3,r2
10003b28:	9884d83a 	srl	r2,r19,r2
10003b2c:	01040074 	movhi	r4,4097
10003b30:	2108f704 	addi	r4,r4,9180
10003b34:	2085883a 	add	r2,r4,r2
10003b38:	11000003 	ldbu	r4,0(r2)
10003b3c:	00800804 	movi	r2,32
10003b40:	20c7883a 	add	r3,r4,r3
10003b44:	10c5c83a 	sub	r2,r2,r3
10003b48:	1000b61e 	bne	r2,zero,10003e24 <__umoddi3+0x4bc>
10003b4c:	982ad43a 	srli	r21,r19,16
10003b50:	8ce3c83a 	sub	r17,r17,r19
10003b54:	9dbfffcc 	andi	r22,r19,65535
10003b58:	0025883a 	mov	r18,zero
10003b5c:	8809883a 	mov	r4,r17
10003b60:	a80b883a 	mov	r5,r21
10003b64:	00040a80 	call	100040a8 <__umodsi3>
10003b68:	8809883a 	mov	r4,r17
10003b6c:	a80b883a 	mov	r5,r21
10003b70:	102f883a 	mov	r23,r2
10003b74:	00040a00 	call	100040a0 <__udivsi3>
10003b78:	1009883a 	mov	r4,r2
10003b7c:	b00b883a 	mov	r5,r22
10003b80:	00040b00 	call	100040b0 <__mulsi3>
10003b84:	b82e943a 	slli	r23,r23,16
10003b88:	a008d43a 	srli	r4,r20,16
10003b8c:	b906b03a 	or	r3,r23,r4
10003b90:	1880032e 	bgeu	r3,r2,10003ba0 <__umoddi3+0x238>
10003b94:	1cc7883a 	add	r3,r3,r19
10003b98:	1cc00136 	bltu	r3,r19,10003ba0 <__umoddi3+0x238>
10003b9c:	1880f136 	bltu	r3,r2,10003f64 <__umoddi3+0x5fc>
10003ba0:	18a1c83a 	sub	r16,r3,r2
10003ba4:	8009883a 	mov	r4,r16
10003ba8:	a80b883a 	mov	r5,r21
10003bac:	00040a80 	call	100040a8 <__umodsi3>
10003bb0:	8009883a 	mov	r4,r16
10003bb4:	a80b883a 	mov	r5,r21
10003bb8:	1023883a 	mov	r17,r2
10003bbc:	00040a00 	call	100040a0 <__udivsi3>
10003bc0:	1009883a 	mov	r4,r2
10003bc4:	b00b883a 	mov	r5,r22
10003bc8:	8822943a 	slli	r17,r17,16
10003bcc:	00040b00 	call	100040b0 <__mulsi3>
10003bd0:	a13fffcc 	andi	r4,r20,65535
10003bd4:	8906b03a 	or	r3,r17,r4
10003bd8:	1880042e 	bgeu	r3,r2,10003bec <__umoddi3+0x284>
10003bdc:	1cc7883a 	add	r3,r3,r19
10003be0:	1cc00236 	bltu	r3,r19,10003bec <__umoddi3+0x284>
10003be4:	1880012e 	bgeu	r3,r2,10003bec <__umoddi3+0x284>
10003be8:	1cc7883a 	add	r3,r3,r19
10003bec:	1887c83a 	sub	r3,r3,r2
10003bf0:	1c84d83a 	srl	r2,r3,r18
10003bf4:	0007883a 	mov	r3,zero
10003bf8:	00000206 	br	10003c04 <__umoddi3+0x29c>
10003bfc:	2005883a 	mov	r2,r4
10003c00:	2807883a 	mov	r3,r5
10003c04:	dfc00b17 	ldw	ra,44(sp)
10003c08:	df000a17 	ldw	fp,40(sp)
10003c0c:	ddc00917 	ldw	r23,36(sp)
10003c10:	dd800817 	ldw	r22,32(sp)
10003c14:	dd400717 	ldw	r21,28(sp)
10003c18:	dd000617 	ldw	r20,24(sp)
10003c1c:	dcc00517 	ldw	r19,20(sp)
10003c20:	dc800417 	ldw	r18,16(sp)
10003c24:	dc400317 	ldw	r17,12(sp)
10003c28:	dc000217 	ldw	r16,8(sp)
10003c2c:	dec00c04 	addi	sp,sp,48
10003c30:	f800283a 	ret
10003c34:	00803fc4 	movi	r2,255
10003c38:	11c0b02e 	bgeu	r2,r7,10003efc <__umoddi3+0x594>
10003c3c:	01400204 	movi	r5,8
10003c40:	282b883a 	mov	r21,r5
10003c44:	003f9b06 	br	10003ab4 <__alt_data_end+0xf8003ab4>
10003c48:	00804034 	movhi	r2,256
10003c4c:	10bfffc4 	addi	r2,r2,-1
10003c50:	1180b02e 	bgeu	r2,r6,10003f14 <__umoddi3+0x5ac>
10003c54:	01400604 	movi	r5,24
10003c58:	2805883a 	mov	r2,r5
10003c5c:	003f5a06 	br	100039c8 <__alt_data_end+0xf80039c8>
10003c60:	00803fc4 	movi	r2,255
10003c64:	14c0ae2e 	bgeu	r2,r19,10003f20 <__umoddi3+0x5b8>
10003c68:	00800204 	movi	r2,8
10003c6c:	1007883a 	mov	r3,r2
10003c70:	003fad06 	br	10003b28 <__alt_data_end+0xf8003b28>
10003c74:	3d0a983a 	sll	r5,r7,r20
10003c78:	356cd83a 	srl	r22,r6,r21
10003c7c:	8d78d83a 	srl	fp,r17,r21
10003c80:	8d10983a 	sll	r8,r17,r20
10003c84:	2dacb03a 	or	r22,r5,r22
10003c88:	b02ed43a 	srli	r23,r22,16
10003c8c:	8564d83a 	srl	r18,r16,r21
10003c90:	e009883a 	mov	r4,fp
10003c94:	b80b883a 	mov	r5,r23
10003c98:	44a4b03a 	or	r18,r8,r18
10003c9c:	3526983a 	sll	r19,r6,r20
10003ca0:	00040a80 	call	100040a8 <__umodsi3>
10003ca4:	e009883a 	mov	r4,fp
10003ca8:	b80b883a 	mov	r5,r23
10003cac:	b47fffcc 	andi	r17,r22,65535
10003cb0:	d8800015 	stw	r2,0(sp)
10003cb4:	00040a00 	call	100040a0 <__udivsi3>
10003cb8:	1009883a 	mov	r4,r2
10003cbc:	880b883a 	mov	r5,r17
10003cc0:	1039883a 	mov	fp,r2
10003cc4:	00040b00 	call	100040b0 <__mulsi3>
10003cc8:	d9800017 	ldw	r6,0(sp)
10003ccc:	9008d43a 	srli	r4,r18,16
10003cd0:	8520983a 	sll	r16,r16,r20
10003cd4:	300c943a 	slli	r6,r6,16
10003cd8:	3106b03a 	or	r3,r6,r4
10003cdc:	1880042e 	bgeu	r3,r2,10003cf0 <__umoddi3+0x388>
10003ce0:	1d87883a 	add	r3,r3,r22
10003ce4:	e13fffc4 	addi	r4,fp,-1
10003ce8:	1d809a2e 	bgeu	r3,r22,10003f54 <__umoddi3+0x5ec>
10003cec:	2039883a 	mov	fp,r4
10003cf0:	1887c83a 	sub	r3,r3,r2
10003cf4:	1809883a 	mov	r4,r3
10003cf8:	b80b883a 	mov	r5,r23
10003cfc:	d8c00115 	stw	r3,4(sp)
10003d00:	00040a80 	call	100040a8 <__umodsi3>
10003d04:	d8c00117 	ldw	r3,4(sp)
10003d08:	b80b883a 	mov	r5,r23
10003d0c:	d8800015 	stw	r2,0(sp)
10003d10:	1809883a 	mov	r4,r3
10003d14:	00040a00 	call	100040a0 <__udivsi3>
10003d18:	880b883a 	mov	r5,r17
10003d1c:	1009883a 	mov	r4,r2
10003d20:	102f883a 	mov	r23,r2
10003d24:	00040b00 	call	100040b0 <__mulsi3>
10003d28:	d9800017 	ldw	r6,0(sp)
10003d2c:	947fffcc 	andi	r17,r18,65535
10003d30:	300c943a 	slli	r6,r6,16
10003d34:	3464b03a 	or	r18,r6,r17
10003d38:	9080042e 	bgeu	r18,r2,10003d4c <__umoddi3+0x3e4>
10003d3c:	95a5883a 	add	r18,r18,r22
10003d40:	b8ffffc4 	addi	r3,r23,-1
10003d44:	95807f2e 	bgeu	r18,r22,10003f44 <__umoddi3+0x5dc>
10003d48:	182f883a 	mov	r23,r3
10003d4c:	e038943a 	slli	fp,fp,16
10003d50:	980cd43a 	srli	r6,r19,16
10003d54:	98ffffcc 	andi	r3,r19,65535
10003d58:	bf38b03a 	or	fp,r23,fp
10003d5c:	e02ed43a 	srli	r23,fp,16
10003d60:	e73fffcc 	andi	fp,fp,65535
10003d64:	180b883a 	mov	r5,r3
10003d68:	e009883a 	mov	r4,fp
10003d6c:	d9800015 	stw	r6,0(sp)
10003d70:	d8c00115 	stw	r3,4(sp)
10003d74:	90a5c83a 	sub	r18,r18,r2
10003d78:	00040b00 	call	100040b0 <__mulsi3>
10003d7c:	d8c00117 	ldw	r3,4(sp)
10003d80:	b809883a 	mov	r4,r23
10003d84:	1023883a 	mov	r17,r2
10003d88:	180b883a 	mov	r5,r3
10003d8c:	00040b00 	call	100040b0 <__mulsi3>
10003d90:	d9800017 	ldw	r6,0(sp)
10003d94:	b809883a 	mov	r4,r23
10003d98:	d8800115 	stw	r2,4(sp)
10003d9c:	300b883a 	mov	r5,r6
10003da0:	302f883a 	mov	r23,r6
10003da4:	00040b00 	call	100040b0 <__mulsi3>
10003da8:	e009883a 	mov	r4,fp
10003dac:	b80b883a 	mov	r5,r23
10003db0:	d8800015 	stw	r2,0(sp)
10003db4:	00040b00 	call	100040b0 <__mulsi3>
10003db8:	d8c00117 	ldw	r3,4(sp)
10003dbc:	880cd43a 	srli	r6,r17,16
10003dc0:	d9c00017 	ldw	r7,0(sp)
10003dc4:	1885883a 	add	r2,r3,r2
10003dc8:	118d883a 	add	r6,r2,r6
10003dcc:	30c0022e 	bgeu	r6,r3,10003dd8 <__umoddi3+0x470>
10003dd0:	00800074 	movhi	r2,1
10003dd4:	388f883a 	add	r7,r7,r2
10003dd8:	3006d43a 	srli	r3,r6,16
10003ddc:	300c943a 	slli	r6,r6,16
10003de0:	8c7fffcc 	andi	r17,r17,65535
10003de4:	38c7883a 	add	r3,r7,r3
10003de8:	3463883a 	add	r17,r6,r17
10003dec:	90c03d36 	bltu	r18,r3,10003ee4 <__umoddi3+0x57c>
10003df0:	90c06026 	beq	r18,r3,10003f74 <__umoddi3+0x60c>
10003df4:	90c9c83a 	sub	r4,r18,r3
10003df8:	880f883a 	mov	r7,r17
10003dfc:	81cfc83a 	sub	r7,r16,r7
10003e00:	81c7803a 	cmpltu	r3,r16,r7
10003e04:	20c7c83a 	sub	r3,r4,r3
10003e08:	1d44983a 	sll	r2,r3,r21
10003e0c:	3d0ed83a 	srl	r7,r7,r20
10003e10:	1d06d83a 	srl	r3,r3,r20
10003e14:	11c4b03a 	or	r2,r2,r7
10003e18:	003f7a06 	br	10003c04 <__alt_data_end+0xf8003c04>
10003e1c:	0025883a 	mov	r18,zero
10003e20:	003ef806 	br	10003a04 <__alt_data_end+0xf8003a04>
10003e24:	98a6983a 	sll	r19,r19,r2
10003e28:	88e8d83a 	srl	r20,r17,r3
10003e2c:	80c6d83a 	srl	r3,r16,r3
10003e30:	982ad43a 	srli	r21,r19,16
10003e34:	88a2983a 	sll	r17,r17,r2
10003e38:	a009883a 	mov	r4,r20
10003e3c:	a80b883a 	mov	r5,r21
10003e40:	88eeb03a 	or	r23,r17,r3
10003e44:	1025883a 	mov	r18,r2
10003e48:	00040a80 	call	100040a8 <__umodsi3>
10003e4c:	a009883a 	mov	r4,r20
10003e50:	a80b883a 	mov	r5,r21
10003e54:	1023883a 	mov	r17,r2
10003e58:	9dbfffcc 	andi	r22,r19,65535
10003e5c:	00040a00 	call	100040a0 <__udivsi3>
10003e60:	1009883a 	mov	r4,r2
10003e64:	b00b883a 	mov	r5,r22
10003e68:	00040b00 	call	100040b0 <__mulsi3>
10003e6c:	8822943a 	slli	r17,r17,16
10003e70:	b808d43a 	srli	r4,r23,16
10003e74:	84a8983a 	sll	r20,r16,r18
10003e78:	8906b03a 	or	r3,r17,r4
10003e7c:	1880042e 	bgeu	r3,r2,10003e90 <__umoddi3+0x528>
10003e80:	1cc7883a 	add	r3,r3,r19
10003e84:	1cc00236 	bltu	r3,r19,10003e90 <__umoddi3+0x528>
10003e88:	1880012e 	bgeu	r3,r2,10003e90 <__umoddi3+0x528>
10003e8c:	1cc7883a 	add	r3,r3,r19
10003e90:	18a1c83a 	sub	r16,r3,r2
10003e94:	8009883a 	mov	r4,r16
10003e98:	a80b883a 	mov	r5,r21
10003e9c:	00040a80 	call	100040a8 <__umodsi3>
10003ea0:	8009883a 	mov	r4,r16
10003ea4:	a80b883a 	mov	r5,r21
10003ea8:	1039883a 	mov	fp,r2
10003eac:	00040a00 	call	100040a0 <__udivsi3>
10003eb0:	1009883a 	mov	r4,r2
10003eb4:	b00b883a 	mov	r5,r22
10003eb8:	00040b00 	call	100040b0 <__mulsi3>
10003ebc:	e006943a 	slli	r3,fp,16
10003ec0:	b93fffcc 	andi	r4,r23,65535
10003ec4:	1906b03a 	or	r3,r3,r4
10003ec8:	1880042e 	bgeu	r3,r2,10003edc <__umoddi3+0x574>
10003ecc:	1cc7883a 	add	r3,r3,r19
10003ed0:	1cc00236 	bltu	r3,r19,10003edc <__umoddi3+0x574>
10003ed4:	1880012e 	bgeu	r3,r2,10003edc <__umoddi3+0x574>
10003ed8:	1cc7883a 	add	r3,r3,r19
10003edc:	18a3c83a 	sub	r17,r3,r2
10003ee0:	003f1e06 	br	10003b5c <__alt_data_end+0xf8003b5c>
10003ee4:	8ccfc83a 	sub	r7,r17,r19
10003ee8:	1d89c83a 	sub	r4,r3,r22
10003eec:	89e3803a 	cmpltu	r17,r17,r7
10003ef0:	2463c83a 	sub	r17,r4,r17
10003ef4:	9449c83a 	sub	r4,r18,r17
10003ef8:	003fc006 	br	10003dfc <__alt_data_end+0xf8003dfc>
10003efc:	000b883a 	mov	r5,zero
10003f00:	002b883a 	mov	r21,zero
10003f04:	003eeb06 	br	10003ab4 <__alt_data_end+0xf8003ab4>
10003f08:	01400404 	movi	r5,16
10003f0c:	282b883a 	mov	r21,r5
10003f10:	003ee806 	br	10003ab4 <__alt_data_end+0xf8003ab4>
10003f14:	01400404 	movi	r5,16
10003f18:	2805883a 	mov	r2,r5
10003f1c:	003eaa06 	br	100039c8 <__alt_data_end+0xf80039c8>
10003f20:	0005883a 	mov	r2,zero
10003f24:	0007883a 	mov	r3,zero
10003f28:	003eff06 	br	10003b28 <__alt_data_end+0xf8003b28>
10003f2c:	00800404 	movi	r2,16
10003f30:	1007883a 	mov	r3,r2
10003f34:	003efc06 	br	10003b28 <__alt_data_end+0xf8003b28>
10003f38:	000b883a 	mov	r5,zero
10003f3c:	0005883a 	mov	r2,zero
10003f40:	003ea106 	br	100039c8 <__alt_data_end+0xf80039c8>
10003f44:	90bf802e 	bgeu	r18,r2,10003d48 <__alt_data_end+0xf8003d48>
10003f48:	bdffff84 	addi	r23,r23,-2
10003f4c:	95a5883a 	add	r18,r18,r22
10003f50:	003f7e06 	br	10003d4c <__alt_data_end+0xf8003d4c>
10003f54:	18bf652e 	bgeu	r3,r2,10003cec <__alt_data_end+0xf8003cec>
10003f58:	e73fff84 	addi	fp,fp,-2
10003f5c:	1d87883a 	add	r3,r3,r22
10003f60:	003f6306 	br	10003cf0 <__alt_data_end+0xf8003cf0>
10003f64:	1cc7883a 	add	r3,r3,r19
10003f68:	003f0d06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
10003f6c:	8005883a 	mov	r2,r16
10003f70:	003edf06 	br	10003af0 <__alt_data_end+0xf8003af0>
10003f74:	847fdb36 	bltu	r16,r17,10003ee4 <__alt_data_end+0xf8003ee4>
10003f78:	880f883a 	mov	r7,r17
10003f7c:	0009883a 	mov	r4,zero
10003f80:	003f9e06 	br	10003dfc <__alt_data_end+0xf8003dfc>

10003f84 <udivmodsi4>:
10003f84:	2900182e 	bgeu	r5,r4,10003fe8 <udivmodsi4+0x64>
10003f88:	28001716 	blt	r5,zero,10003fe8 <udivmodsi4+0x64>
10003f8c:	00800804 	movi	r2,32
10003f90:	00c00044 	movi	r3,1
10003f94:	00000206 	br	10003fa0 <udivmodsi4+0x1c>
10003f98:	10001126 	beq	r2,zero,10003fe0 <udivmodsi4+0x5c>
10003f9c:	28000516 	blt	r5,zero,10003fb4 <udivmodsi4+0x30>
10003fa0:	294b883a 	add	r5,r5,r5
10003fa4:	10bfffc4 	addi	r2,r2,-1
10003fa8:	18c7883a 	add	r3,r3,r3
10003fac:	293ffa36 	bltu	r5,r4,10003f98 <__alt_data_end+0xf8003f98>
10003fb0:	18000b26 	beq	r3,zero,10003fe0 <udivmodsi4+0x5c>
10003fb4:	0005883a 	mov	r2,zero
10003fb8:	21400236 	bltu	r4,r5,10003fc4 <udivmodsi4+0x40>
10003fbc:	2149c83a 	sub	r4,r4,r5
10003fc0:	10c4b03a 	or	r2,r2,r3
10003fc4:	1806d07a 	srli	r3,r3,1
10003fc8:	280ad07a 	srli	r5,r5,1
10003fcc:	183ffa1e 	bne	r3,zero,10003fb8 <__alt_data_end+0xf8003fb8>
10003fd0:	3000011e 	bne	r6,zero,10003fd8 <udivmodsi4+0x54>
10003fd4:	f800283a 	ret
10003fd8:	2005883a 	mov	r2,r4
10003fdc:	f800283a 	ret
10003fe0:	0005883a 	mov	r2,zero
10003fe4:	003ffa06 	br	10003fd0 <__alt_data_end+0xf8003fd0>
10003fe8:	00c00044 	movi	r3,1
10003fec:	003ff106 	br	10003fb4 <__alt_data_end+0xf8003fb4>

10003ff0 <__divsi3>:
10003ff0:	defffe04 	addi	sp,sp,-8
10003ff4:	dfc00115 	stw	ra,4(sp)
10003ff8:	dc000015 	stw	r16,0(sp)
10003ffc:	20000b16 	blt	r4,zero,1000402c <__divsi3+0x3c>
10004000:	0021883a 	mov	r16,zero
10004004:	28000c16 	blt	r5,zero,10004038 <__divsi3+0x48>
10004008:	000d883a 	mov	r6,zero
1000400c:	0003f840 	call	10003f84 <udivmodsi4>
10004010:	0407c83a 	sub	r3,zero,r16
10004014:	1884f03a 	xor	r2,r3,r2
10004018:	1405883a 	add	r2,r2,r16
1000401c:	dfc00117 	ldw	ra,4(sp)
10004020:	dc000017 	ldw	r16,0(sp)
10004024:	dec00204 	addi	sp,sp,8
10004028:	f800283a 	ret
1000402c:	0109c83a 	sub	r4,zero,r4
10004030:	04000044 	movi	r16,1
10004034:	283ff40e 	bge	r5,zero,10004008 <__alt_data_end+0xf8004008>
10004038:	014bc83a 	sub	r5,zero,r5
1000403c:	8400005c 	xori	r16,r16,1
10004040:	003ff106 	br	10004008 <__alt_data_end+0xf8004008>

10004044 <__modsi3>:
10004044:	defffd04 	addi	sp,sp,-12
10004048:	dfc00215 	stw	ra,8(sp)
1000404c:	dc400115 	stw	r17,4(sp)
10004050:	dc000015 	stw	r16,0(sp)
10004054:	20000c16 	blt	r4,zero,10004088 <__modsi3+0x44>
10004058:	0023883a 	mov	r17,zero
1000405c:	0021883a 	mov	r16,zero
10004060:	28000d16 	blt	r5,zero,10004098 <__modsi3+0x54>
10004064:	01800044 	movi	r6,1
10004068:	0003f840 	call	10003f84 <udivmodsi4>
1000406c:	1404f03a 	xor	r2,r2,r16
10004070:	8885883a 	add	r2,r17,r2
10004074:	dfc00217 	ldw	ra,8(sp)
10004078:	dc400117 	ldw	r17,4(sp)
1000407c:	dc000017 	ldw	r16,0(sp)
10004080:	dec00304 	addi	sp,sp,12
10004084:	f800283a 	ret
10004088:	0109c83a 	sub	r4,zero,r4
1000408c:	04400044 	movi	r17,1
10004090:	043fffc4 	movi	r16,-1
10004094:	283ff30e 	bge	r5,zero,10004064 <__alt_data_end+0xf8004064>
10004098:	014bc83a 	sub	r5,zero,r5
1000409c:	003ff106 	br	10004064 <__alt_data_end+0xf8004064>

100040a0 <__udivsi3>:
100040a0:	000d883a 	mov	r6,zero
100040a4:	0003f841 	jmpi	10003f84 <udivmodsi4>

100040a8 <__umodsi3>:
100040a8:	01800044 	movi	r6,1
100040ac:	0003f841 	jmpi	10003f84 <udivmodsi4>

100040b0 <__mulsi3>:
100040b0:	0005883a 	mov	r2,zero
100040b4:	20000726 	beq	r4,zero,100040d4 <__mulsi3+0x24>
100040b8:	20c0004c 	andi	r3,r4,1
100040bc:	2008d07a 	srli	r4,r4,1
100040c0:	18000126 	beq	r3,zero,100040c8 <__mulsi3+0x18>
100040c4:	1145883a 	add	r2,r2,r5
100040c8:	294b883a 	add	r5,r5,r5
100040cc:	203ffa1e 	bne	r4,zero,100040b8 <__alt_data_end+0xf80040b8>
100040d0:	f800283a 	ret
100040d4:	f800283a 	ret

100040d8 <__adddf3>:
100040d8:	02000434 	movhi	r8,16
100040dc:	423fffc4 	addi	r8,r8,-1
100040e0:	defffb04 	addi	sp,sp,-20
100040e4:	2a12703a 	and	r9,r5,r8
100040e8:	2806d7fa 	srli	r3,r5,31
100040ec:	3a10703a 	and	r8,r7,r8
100040f0:	3804d53a 	srli	r2,r7,20
100040f4:	3014d77a 	srli	r10,r6,29
100040f8:	dc000015 	stw	r16,0(sp)
100040fc:	481290fa 	slli	r9,r9,3
10004100:	2820d53a 	srli	r16,r5,20
10004104:	401090fa 	slli	r8,r8,3
10004108:	200ad77a 	srli	r5,r4,29
1000410c:	380ed7fa 	srli	r7,r7,31
10004110:	dc800215 	stw	r18,8(sp)
10004114:	dc400115 	stw	r17,4(sp)
10004118:	dfc00415 	stw	ra,16(sp)
1000411c:	dcc00315 	stw	r19,12(sp)
10004120:	1c803fcc 	andi	r18,r3,255
10004124:	8401ffcc 	andi	r16,r16,2047
10004128:	494ab03a 	or	r5,r9,r5
1000412c:	202290fa 	slli	r17,r4,3
10004130:	1081ffcc 	andi	r2,r2,2047
10004134:	4290b03a 	or	r8,r8,r10
10004138:	300c90fa 	slli	r6,r6,3
1000413c:	91c07026 	beq	r18,r7,10004300 <__adddf3+0x228>
10004140:	8087c83a 	sub	r3,r16,r2
10004144:	00c0b30e 	bge	zero,r3,10004414 <__adddf3+0x33c>
10004148:	10002a1e 	bne	r2,zero,100041f4 <__adddf3+0x11c>
1000414c:	4184b03a 	or	r2,r8,r6
10004150:	1000991e 	bne	r2,zero,100043b8 <__adddf3+0x2e0>
10004154:	888001cc 	andi	r2,r17,7
10004158:	10005b26 	beq	r2,zero,100042c8 <__adddf3+0x1f0>
1000415c:	88c003cc 	andi	r3,r17,15
10004160:	00800104 	movi	r2,4
10004164:	18805826 	beq	r3,r2,100042c8 <__adddf3+0x1f0>
10004168:	89800104 	addi	r6,r17,4
1000416c:	3463803a 	cmpltu	r17,r6,r17
10004170:	2c4b883a 	add	r5,r5,r17
10004174:	2880202c 	andhi	r2,r5,128
10004178:	9007883a 	mov	r3,r18
1000417c:	3023883a 	mov	r17,r6
10004180:	10005426 	beq	r2,zero,100042d4 <__adddf3+0x1fc>
10004184:	84000044 	addi	r16,r16,1
10004188:	0081ffc4 	movi	r2,2047
1000418c:	8080c126 	beq	r16,r2,10004494 <__adddf3+0x3bc>
10004190:	013fe034 	movhi	r4,65408
10004194:	213fffc4 	addi	r4,r4,-1
10004198:	290a703a 	and	r5,r5,r4
1000419c:	2804977a 	slli	r2,r5,29
100041a0:	280a927a 	slli	r5,r5,9
100041a4:	8822d0fa 	srli	r17,r17,3
100041a8:	8401ffcc 	andi	r16,r16,2047
100041ac:	2808d33a 	srli	r4,r5,12
100041b0:	1444b03a 	or	r2,r2,r17
100041b4:	8401ffcc 	andi	r16,r16,2047
100041b8:	800a953a 	slli	r5,r16,20
100041bc:	18c03fcc 	andi	r3,r3,255
100041c0:	04000434 	movhi	r16,16
100041c4:	180697fa 	slli	r3,r3,31
100041c8:	843fffc4 	addi	r16,r16,-1
100041cc:	2420703a 	and	r16,r4,r16
100041d0:	8160b03a 	or	r16,r16,r5
100041d4:	80c6b03a 	or	r3,r16,r3
100041d8:	dfc00417 	ldw	ra,16(sp)
100041dc:	dcc00317 	ldw	r19,12(sp)
100041e0:	dc800217 	ldw	r18,8(sp)
100041e4:	dc400117 	ldw	r17,4(sp)
100041e8:	dc000017 	ldw	r16,0(sp)
100041ec:	dec00504 	addi	sp,sp,20
100041f0:	f800283a 	ret
100041f4:	0081ffc4 	movi	r2,2047
100041f8:	80bfd626 	beq	r16,r2,10004154 <__alt_data_end+0xf8004154>
100041fc:	42002034 	orhi	r8,r8,128
10004200:	00800e04 	movi	r2,56
10004204:	10c0a616 	blt	r2,r3,100044a0 <__adddf3+0x3c8>
10004208:	008007c4 	movi	r2,31
1000420c:	10c0c916 	blt	r2,r3,10004534 <__adddf3+0x45c>
10004210:	00800804 	movi	r2,32
10004214:	10c5c83a 	sub	r2,r2,r3
10004218:	408e983a 	sll	r7,r8,r2
1000421c:	30c8d83a 	srl	r4,r6,r3
10004220:	3084983a 	sll	r2,r6,r2
10004224:	40c6d83a 	srl	r3,r8,r3
10004228:	390cb03a 	or	r6,r7,r4
1000422c:	1004c03a 	cmpne	r2,r2,zero
10004230:	308cb03a 	or	r6,r6,r2
10004234:	898dc83a 	sub	r6,r17,r6
10004238:	89a3803a 	cmpltu	r17,r17,r6
1000423c:	28cbc83a 	sub	r5,r5,r3
10004240:	2c4bc83a 	sub	r5,r5,r17
10004244:	3023883a 	mov	r17,r6
10004248:	2880202c 	andhi	r2,r5,128
1000424c:	10006d26 	beq	r2,zero,10004404 <__adddf3+0x32c>
10004250:	04c02034 	movhi	r19,128
10004254:	9cffffc4 	addi	r19,r19,-1
10004258:	2ce6703a 	and	r19,r5,r19
1000425c:	98007e26 	beq	r19,zero,10004458 <__adddf3+0x380>
10004260:	9809883a 	mov	r4,r19
10004264:	00068700 	call	10006870 <__clzsi2>
10004268:	10fffe04 	addi	r3,r2,-8
1000426c:	010007c4 	movi	r4,31
10004270:	20c07f16 	blt	r4,r3,10004470 <__adddf3+0x398>
10004274:	01400a04 	movi	r5,40
10004278:	2885c83a 	sub	r2,r5,r2
1000427c:	888ad83a 	srl	r5,r17,r2
10004280:	98e6983a 	sll	r19,r19,r3
10004284:	88e2983a 	sll	r17,r17,r3
10004288:	2ce6b03a 	or	r19,r5,r19
1000428c:	1c007c16 	blt	r3,r16,10004480 <__adddf3+0x3a8>
10004290:	1c21c83a 	sub	r16,r3,r16
10004294:	81400044 	addi	r5,r16,1
10004298:	00c007c4 	movi	r3,31
1000429c:	19409816 	blt	r3,r5,10004500 <__adddf3+0x428>
100042a0:	1c21c83a 	sub	r16,r3,r16
100042a4:	8c08983a 	sll	r4,r17,r16
100042a8:	8946d83a 	srl	r3,r17,r5
100042ac:	9c20983a 	sll	r16,r19,r16
100042b0:	2008c03a 	cmpne	r4,r4,zero
100042b4:	994ad83a 	srl	r5,r19,r5
100042b8:	1c06b03a 	or	r3,r3,r16
100042bc:	1922b03a 	or	r17,r3,r4
100042c0:	0021883a 	mov	r16,zero
100042c4:	003fa306 	br	10004154 <__alt_data_end+0xf8004154>
100042c8:	2880202c 	andhi	r2,r5,128
100042cc:	9007883a 	mov	r3,r18
100042d0:	103fac1e 	bne	r2,zero,10004184 <__alt_data_end+0xf8004184>
100042d4:	2804977a 	slli	r2,r5,29
100042d8:	8822d0fa 	srli	r17,r17,3
100042dc:	0101ffc4 	movi	r4,2047
100042e0:	280ad0fa 	srli	r5,r5,3
100042e4:	1444b03a 	or	r2,r2,r17
100042e8:	81002c26 	beq	r16,r4,1000439c <__adddf3+0x2c4>
100042ec:	8120703a 	and	r16,r16,r4
100042f0:	01000434 	movhi	r4,16
100042f4:	213fffc4 	addi	r4,r4,-1
100042f8:	2908703a 	and	r4,r5,r4
100042fc:	003fad06 	br	100041b4 <__alt_data_end+0xf80041b4>
10004300:	8089c83a 	sub	r4,r16,r2
10004304:	01006a0e 	bge	zero,r4,100044b0 <__adddf3+0x3d8>
10004308:	10003326 	beq	r2,zero,100043d8 <__adddf3+0x300>
1000430c:	0081ffc4 	movi	r2,2047
10004310:	80bf9026 	beq	r16,r2,10004154 <__alt_data_end+0xf8004154>
10004314:	42002034 	orhi	r8,r8,128
10004318:	00800e04 	movi	r2,56
1000431c:	1100b116 	blt	r2,r4,100045e4 <__adddf3+0x50c>
10004320:	008007c4 	movi	r2,31
10004324:	1100e216 	blt	r2,r4,100046b0 <__adddf3+0x5d8>
10004328:	00800804 	movi	r2,32
1000432c:	1105c83a 	sub	r2,r2,r4
10004330:	4092983a 	sll	r9,r8,r2
10004334:	310ed83a 	srl	r7,r6,r4
10004338:	3084983a 	sll	r2,r6,r2
1000433c:	4110d83a 	srl	r8,r8,r4
10004340:	49ccb03a 	or	r6,r9,r7
10004344:	1004c03a 	cmpne	r2,r2,zero
10004348:	308cb03a 	or	r6,r6,r2
1000434c:	344d883a 	add	r6,r6,r17
10004350:	3463803a 	cmpltu	r17,r6,r17
10004354:	414b883a 	add	r5,r8,r5
10004358:	2c4b883a 	add	r5,r5,r17
1000435c:	3023883a 	mov	r17,r6
10004360:	2880202c 	andhi	r2,r5,128
10004364:	10002726 	beq	r2,zero,10004404 <__adddf3+0x32c>
10004368:	84000044 	addi	r16,r16,1
1000436c:	0081ffc4 	movi	r2,2047
10004370:	8080ae26 	beq	r16,r2,1000462c <__adddf3+0x554>
10004374:	00bfe034 	movhi	r2,65408
10004378:	10bfffc4 	addi	r2,r2,-1
1000437c:	288a703a 	and	r5,r5,r2
10004380:	880cd07a 	srli	r6,r17,1
10004384:	280897fa 	slli	r4,r5,31
10004388:	88c0004c 	andi	r3,r17,1
1000438c:	30e2b03a 	or	r17,r6,r3
10004390:	280ad07a 	srli	r5,r5,1
10004394:	8922b03a 	or	r17,r17,r4
10004398:	003f6e06 	br	10004154 <__alt_data_end+0xf8004154>
1000439c:	1148b03a 	or	r4,r2,r5
100043a0:	20003c26 	beq	r4,zero,10004494 <__adddf3+0x3bc>
100043a4:	29000234 	orhi	r4,r5,8
100043a8:	01400434 	movhi	r5,16
100043ac:	297fffc4 	addi	r5,r5,-1
100043b0:	2148703a 	and	r4,r4,r5
100043b4:	003f7f06 	br	100041b4 <__alt_data_end+0xf80041b4>
100043b8:	18ffffc4 	addi	r3,r3,-1
100043bc:	18004d1e 	bne	r3,zero,100044f4 <__adddf3+0x41c>
100043c0:	898dc83a 	sub	r6,r17,r6
100043c4:	89a3803a 	cmpltu	r17,r17,r6
100043c8:	2a0bc83a 	sub	r5,r5,r8
100043cc:	2c4bc83a 	sub	r5,r5,r17
100043d0:	3023883a 	mov	r17,r6
100043d4:	003f9c06 	br	10004248 <__alt_data_end+0xf8004248>
100043d8:	4184b03a 	or	r2,r8,r6
100043dc:	103f5d26 	beq	r2,zero,10004154 <__alt_data_end+0xf8004154>
100043e0:	213fffc4 	addi	r4,r4,-1
100043e4:	203fd926 	beq	r4,zero,1000434c <__alt_data_end+0xf800434c>
100043e8:	0081ffc4 	movi	r2,2047
100043ec:	80bfca1e 	bne	r16,r2,10004318 <__alt_data_end+0xf8004318>
100043f0:	003f5806 	br	10004154 <__alt_data_end+0xf8004154>
100043f4:	10c8b03a 	or	r4,r2,r3
100043f8:	20008b26 	beq	r4,zero,10004628 <__adddf3+0x550>
100043fc:	100b883a 	mov	r5,r2
10004400:	1823883a 	mov	r17,r3
10004404:	888001cc 	andi	r2,r17,7
10004408:	103f541e 	bne	r2,zero,1000415c <__alt_data_end+0xf800415c>
1000440c:	9007883a 	mov	r3,r18
10004410:	003fb006 	br	100042d4 <__alt_data_end+0xf80042d4>
10004414:	1800531e 	bne	r3,zero,10004564 <__adddf3+0x48c>
10004418:	80800044 	addi	r2,r16,1
1000441c:	1081ffcc 	andi	r2,r2,2047
10004420:	00c00044 	movi	r3,1
10004424:	1880990e 	bge	r3,r2,1000468c <__adddf3+0x5b4>
10004428:	8985c83a 	sub	r2,r17,r6
1000442c:	8887803a 	cmpltu	r3,r17,r2
10004430:	2a27c83a 	sub	r19,r5,r8
10004434:	98e7c83a 	sub	r19,r19,r3
10004438:	98c0202c 	andhi	r3,r19,128
1000443c:	18006226 	beq	r3,zero,100045c8 <__adddf3+0x4f0>
10004440:	3463c83a 	sub	r17,r6,r17
10004444:	4151c83a 	sub	r8,r8,r5
10004448:	344d803a 	cmpltu	r6,r6,r17
1000444c:	41a7c83a 	sub	r19,r8,r6
10004450:	3825883a 	mov	r18,r7
10004454:	983f821e 	bne	r19,zero,10004260 <__alt_data_end+0xf8004260>
10004458:	8809883a 	mov	r4,r17
1000445c:	00068700 	call	10006870 <__clzsi2>
10004460:	10800804 	addi	r2,r2,32
10004464:	10fffe04 	addi	r3,r2,-8
10004468:	010007c4 	movi	r4,31
1000446c:	20ff810e 	bge	r4,r3,10004274 <__alt_data_end+0xf8004274>
10004470:	14fff604 	addi	r19,r2,-40
10004474:	8ce6983a 	sll	r19,r17,r19
10004478:	0023883a 	mov	r17,zero
1000447c:	1c3f840e 	bge	r3,r16,10004290 <__alt_data_end+0xf8004290>
10004480:	017fe034 	movhi	r5,65408
10004484:	297fffc4 	addi	r5,r5,-1
10004488:	80e1c83a 	sub	r16,r16,r3
1000448c:	994a703a 	and	r5,r19,r5
10004490:	003f3006 	br	10004154 <__alt_data_end+0xf8004154>
10004494:	0009883a 	mov	r4,zero
10004498:	0005883a 	mov	r2,zero
1000449c:	003f4506 	br	100041b4 <__alt_data_end+0xf80041b4>
100044a0:	418cb03a 	or	r6,r8,r6
100044a4:	300cc03a 	cmpne	r6,r6,zero
100044a8:	0007883a 	mov	r3,zero
100044ac:	003f6106 	br	10004234 <__alt_data_end+0xf8004234>
100044b0:	2000921e 	bne	r4,zero,100046fc <__adddf3+0x624>
100044b4:	80800044 	addi	r2,r16,1
100044b8:	11c1ffcc 	andi	r7,r2,2047
100044bc:	01000044 	movi	r4,1
100044c0:	21c0610e 	bge	r4,r7,10004648 <__adddf3+0x570>
100044c4:	0101ffc4 	movi	r4,2047
100044c8:	1100a326 	beq	r2,r4,10004758 <__adddf3+0x680>
100044cc:	344d883a 	add	r6,r6,r17
100044d0:	3463803a 	cmpltu	r17,r6,r17
100044d4:	414b883a 	add	r5,r8,r5
100044d8:	2c4b883a 	add	r5,r5,r17
100044dc:	282297fa 	slli	r17,r5,31
100044e0:	300cd07a 	srli	r6,r6,1
100044e4:	280ad07a 	srli	r5,r5,1
100044e8:	1021883a 	mov	r16,r2
100044ec:	89a2b03a 	or	r17,r17,r6
100044f0:	003f1806 	br	10004154 <__alt_data_end+0xf8004154>
100044f4:	0081ffc4 	movi	r2,2047
100044f8:	80bf411e 	bne	r16,r2,10004200 <__alt_data_end+0xf8004200>
100044fc:	003f1506 	br	10004154 <__alt_data_end+0xf8004154>
10004500:	80bff844 	addi	r2,r16,-31
10004504:	00c00804 	movi	r3,32
10004508:	9884d83a 	srl	r2,r19,r2
1000450c:	28c04a26 	beq	r5,r3,10004638 <__adddf3+0x560>
10004510:	00c00fc4 	movi	r3,63
10004514:	1c21c83a 	sub	r16,r3,r16
10004518:	9c26983a 	sll	r19,r19,r16
1000451c:	9c62b03a 	or	r17,r19,r17
10004520:	8822c03a 	cmpne	r17,r17,zero
10004524:	88a2b03a 	or	r17,r17,r2
10004528:	000b883a 	mov	r5,zero
1000452c:	0021883a 	mov	r16,zero
10004530:	003fb406 	br	10004404 <__alt_data_end+0xf8004404>
10004534:	18bff804 	addi	r2,r3,-32
10004538:	01000804 	movi	r4,32
1000453c:	4084d83a 	srl	r2,r8,r2
10004540:	19003f26 	beq	r3,r4,10004640 <__adddf3+0x568>
10004544:	01001004 	movi	r4,64
10004548:	20c7c83a 	sub	r3,r4,r3
1000454c:	40d0983a 	sll	r8,r8,r3
10004550:	418cb03a 	or	r6,r8,r6
10004554:	300cc03a 	cmpne	r6,r6,zero
10004558:	308cb03a 	or	r6,r6,r2
1000455c:	0007883a 	mov	r3,zero
10004560:	003f3406 	br	10004234 <__alt_data_end+0xf8004234>
10004564:	80002326 	beq	r16,zero,100045f4 <__adddf3+0x51c>
10004568:	0101ffc4 	movi	r4,2047
1000456c:	11005e26 	beq	r2,r4,100046e8 <__adddf3+0x610>
10004570:	00c7c83a 	sub	r3,zero,r3
10004574:	29402034 	orhi	r5,r5,128
10004578:	01000e04 	movi	r4,56
1000457c:	20c07216 	blt	r4,r3,10004748 <__adddf3+0x670>
10004580:	010007c4 	movi	r4,31
10004584:	20c0ce16 	blt	r4,r3,100048c0 <__adddf3+0x7e8>
10004588:	01000804 	movi	r4,32
1000458c:	20c9c83a 	sub	r4,r4,r3
10004590:	2914983a 	sll	r10,r5,r4
10004594:	88d2d83a 	srl	r9,r17,r3
10004598:	8908983a 	sll	r4,r17,r4
1000459c:	28c6d83a 	srl	r3,r5,r3
100045a0:	5262b03a 	or	r17,r10,r9
100045a4:	2008c03a 	cmpne	r4,r4,zero
100045a8:	8922b03a 	or	r17,r17,r4
100045ac:	3463c83a 	sub	r17,r6,r17
100045b0:	40c7c83a 	sub	r3,r8,r3
100045b4:	344d803a 	cmpltu	r6,r6,r17
100045b8:	198bc83a 	sub	r5,r3,r6
100045bc:	1021883a 	mov	r16,r2
100045c0:	3825883a 	mov	r18,r7
100045c4:	003f2006 	br	10004248 <__alt_data_end+0xf8004248>
100045c8:	9886b03a 	or	r3,r19,r2
100045cc:	1800141e 	bne	r3,zero,10004620 <__adddf3+0x548>
100045d0:	0007883a 	mov	r3,zero
100045d4:	000b883a 	mov	r5,zero
100045d8:	0023883a 	mov	r17,zero
100045dc:	0021883a 	mov	r16,zero
100045e0:	003f3c06 	br	100042d4 <__alt_data_end+0xf80042d4>
100045e4:	418cb03a 	or	r6,r8,r6
100045e8:	300cc03a 	cmpne	r6,r6,zero
100045ec:	0011883a 	mov	r8,zero
100045f0:	003f5606 	br	1000434c <__alt_data_end+0xf800434c>
100045f4:	2c48b03a 	or	r4,r5,r17
100045f8:	20003b26 	beq	r4,zero,100046e8 <__adddf3+0x610>
100045fc:	00c6303a 	nor	r3,zero,r3
10004600:	1800371e 	bne	r3,zero,100046e0 <__adddf3+0x608>
10004604:	3463c83a 	sub	r17,r6,r17
10004608:	414bc83a 	sub	r5,r8,r5
1000460c:	344d803a 	cmpltu	r6,r6,r17
10004610:	298bc83a 	sub	r5,r5,r6
10004614:	1021883a 	mov	r16,r2
10004618:	3825883a 	mov	r18,r7
1000461c:	003f0a06 	br	10004248 <__alt_data_end+0xf8004248>
10004620:	1023883a 	mov	r17,r2
10004624:	003f0d06 	br	1000425c <__alt_data_end+0xf800425c>
10004628:	0007883a 	mov	r3,zero
1000462c:	000b883a 	mov	r5,zero
10004630:	0023883a 	mov	r17,zero
10004634:	003f2706 	br	100042d4 <__alt_data_end+0xf80042d4>
10004638:	0027883a 	mov	r19,zero
1000463c:	003fb706 	br	1000451c <__alt_data_end+0xf800451c>
10004640:	0011883a 	mov	r8,zero
10004644:	003fc206 	br	10004550 <__alt_data_end+0xf8004550>
10004648:	2c44b03a 	or	r2,r5,r17
1000464c:	8000871e 	bne	r16,zero,1000486c <__adddf3+0x794>
10004650:	1000b126 	beq	r2,zero,10004918 <__adddf3+0x840>
10004654:	4184b03a 	or	r2,r8,r6
10004658:	103ebe26 	beq	r2,zero,10004154 <__alt_data_end+0xf8004154>
1000465c:	3445883a 	add	r2,r6,r17
10004660:	1463803a 	cmpltu	r17,r2,r17
10004664:	414b883a 	add	r5,r8,r5
10004668:	2c4b883a 	add	r5,r5,r17
1000466c:	28c0202c 	andhi	r3,r5,128
10004670:	1023883a 	mov	r17,r2
10004674:	183f6326 	beq	r3,zero,10004404 <__alt_data_end+0xf8004404>
10004678:	00bfe034 	movhi	r2,65408
1000467c:	10bfffc4 	addi	r2,r2,-1
10004680:	2021883a 	mov	r16,r4
10004684:	288a703a 	and	r5,r5,r2
10004688:	003eb206 	br	10004154 <__alt_data_end+0xf8004154>
1000468c:	2c44b03a 	or	r2,r5,r17
10004690:	8000251e 	bne	r16,zero,10004728 <__adddf3+0x650>
10004694:	10004b1e 	bne	r2,zero,100047c4 <__adddf3+0x6ec>
10004698:	4184b03a 	or	r2,r8,r6
1000469c:	103fe226 	beq	r2,zero,10004628 <__alt_data_end+0xf8004628>
100046a0:	400b883a 	mov	r5,r8
100046a4:	3023883a 	mov	r17,r6
100046a8:	3825883a 	mov	r18,r7
100046ac:	003ea906 	br	10004154 <__alt_data_end+0xf8004154>
100046b0:	20bff804 	addi	r2,r4,-32
100046b4:	01c00804 	movi	r7,32
100046b8:	4084d83a 	srl	r2,r8,r2
100046bc:	21c07e26 	beq	r4,r7,100048b8 <__adddf3+0x7e0>
100046c0:	01c01004 	movi	r7,64
100046c4:	3909c83a 	sub	r4,r7,r4
100046c8:	4110983a 	sll	r8,r8,r4
100046cc:	418cb03a 	or	r6,r8,r6
100046d0:	300cc03a 	cmpne	r6,r6,zero
100046d4:	308cb03a 	or	r6,r6,r2
100046d8:	0011883a 	mov	r8,zero
100046dc:	003f1b06 	br	1000434c <__alt_data_end+0xf800434c>
100046e0:	0101ffc4 	movi	r4,2047
100046e4:	113fa41e 	bne	r2,r4,10004578 <__alt_data_end+0xf8004578>
100046e8:	400b883a 	mov	r5,r8
100046ec:	3023883a 	mov	r17,r6
100046f0:	1021883a 	mov	r16,r2
100046f4:	3825883a 	mov	r18,r7
100046f8:	003e9606 	br	10004154 <__alt_data_end+0xf8004154>
100046fc:	80001a1e 	bne	r16,zero,10004768 <__adddf3+0x690>
10004700:	2c4eb03a 	or	r7,r5,r17
10004704:	38005526 	beq	r7,zero,1000485c <__adddf3+0x784>
10004708:	0108303a 	nor	r4,zero,r4
1000470c:	2000511e 	bne	r4,zero,10004854 <__adddf3+0x77c>
10004710:	89a3883a 	add	r17,r17,r6
10004714:	414b883a 	add	r5,r8,r5
10004718:	898d803a 	cmpltu	r6,r17,r6
1000471c:	298b883a 	add	r5,r5,r6
10004720:	1021883a 	mov	r16,r2
10004724:	003f0e06 	br	10004360 <__alt_data_end+0xf8004360>
10004728:	1000341e 	bne	r2,zero,100047fc <__adddf3+0x724>
1000472c:	4184b03a 	or	r2,r8,r6
10004730:	10006f26 	beq	r2,zero,100048f0 <__adddf3+0x818>
10004734:	400b883a 	mov	r5,r8
10004738:	3023883a 	mov	r17,r6
1000473c:	3825883a 	mov	r18,r7
10004740:	0401ffc4 	movi	r16,2047
10004744:	003e8306 	br	10004154 <__alt_data_end+0xf8004154>
10004748:	2c62b03a 	or	r17,r5,r17
1000474c:	8822c03a 	cmpne	r17,r17,zero
10004750:	0007883a 	mov	r3,zero
10004754:	003f9506 	br	100045ac <__alt_data_end+0xf80045ac>
10004758:	1021883a 	mov	r16,r2
1000475c:	000b883a 	mov	r5,zero
10004760:	0023883a 	mov	r17,zero
10004764:	003edb06 	br	100042d4 <__alt_data_end+0xf80042d4>
10004768:	01c1ffc4 	movi	r7,2047
1000476c:	11c03b26 	beq	r2,r7,1000485c <__adddf3+0x784>
10004770:	0109c83a 	sub	r4,zero,r4
10004774:	29402034 	orhi	r5,r5,128
10004778:	01c00e04 	movi	r7,56
1000477c:	39006216 	blt	r7,r4,10004908 <__adddf3+0x830>
10004780:	01c007c4 	movi	r7,31
10004784:	39006b16 	blt	r7,r4,10004934 <__adddf3+0x85c>
10004788:	01c00804 	movi	r7,32
1000478c:	390fc83a 	sub	r7,r7,r4
10004790:	29d4983a 	sll	r10,r5,r7
10004794:	8912d83a 	srl	r9,r17,r4
10004798:	89ce983a 	sll	r7,r17,r7
1000479c:	2908d83a 	srl	r4,r5,r4
100047a0:	5262b03a 	or	r17,r10,r9
100047a4:	380ac03a 	cmpne	r5,r7,zero
100047a8:	8962b03a 	or	r17,r17,r5
100047ac:	89a3883a 	add	r17,r17,r6
100047b0:	2211883a 	add	r8,r4,r8
100047b4:	898d803a 	cmpltu	r6,r17,r6
100047b8:	418b883a 	add	r5,r8,r6
100047bc:	1021883a 	mov	r16,r2
100047c0:	003ee706 	br	10004360 <__alt_data_end+0xf8004360>
100047c4:	4184b03a 	or	r2,r8,r6
100047c8:	103e6226 	beq	r2,zero,10004154 <__alt_data_end+0xf8004154>
100047cc:	8987c83a 	sub	r3,r17,r6
100047d0:	88c9803a 	cmpltu	r4,r17,r3
100047d4:	2a05c83a 	sub	r2,r5,r8
100047d8:	1105c83a 	sub	r2,r2,r4
100047dc:	1100202c 	andhi	r4,r2,128
100047e0:	203f0426 	beq	r4,zero,100043f4 <__alt_data_end+0xf80043f4>
100047e4:	3463c83a 	sub	r17,r6,r17
100047e8:	414bc83a 	sub	r5,r8,r5
100047ec:	344d803a 	cmpltu	r6,r6,r17
100047f0:	298bc83a 	sub	r5,r5,r6
100047f4:	3825883a 	mov	r18,r7
100047f8:	003e5606 	br	10004154 <__alt_data_end+0xf8004154>
100047fc:	4184b03a 	or	r2,r8,r6
10004800:	10002b26 	beq	r2,zero,100048b0 <__adddf3+0x7d8>
10004804:	2804d0fa 	srli	r2,r5,3
10004808:	8822d0fa 	srli	r17,r17,3
1000480c:	280a977a 	slli	r5,r5,29
10004810:	10c0022c 	andhi	r3,r2,8
10004814:	2c62b03a 	or	r17,r5,r17
10004818:	18000826 	beq	r3,zero,1000483c <__adddf3+0x764>
1000481c:	4008d0fa 	srli	r4,r8,3
10004820:	20c0022c 	andhi	r3,r4,8
10004824:	1800051e 	bne	r3,zero,1000483c <__adddf3+0x764>
10004828:	300cd0fa 	srli	r6,r6,3
1000482c:	4010977a 	slli	r8,r8,29
10004830:	2005883a 	mov	r2,r4
10004834:	3825883a 	mov	r18,r7
10004838:	41a2b03a 	or	r17,r8,r6
1000483c:	880ad77a 	srli	r5,r17,29
10004840:	100490fa 	slli	r2,r2,3
10004844:	882290fa 	slli	r17,r17,3
10004848:	0401ffc4 	movi	r16,2047
1000484c:	288ab03a 	or	r5,r5,r2
10004850:	003e4006 	br	10004154 <__alt_data_end+0xf8004154>
10004854:	01c1ffc4 	movi	r7,2047
10004858:	11ffc71e 	bne	r2,r7,10004778 <__alt_data_end+0xf8004778>
1000485c:	400b883a 	mov	r5,r8
10004860:	3023883a 	mov	r17,r6
10004864:	1021883a 	mov	r16,r2
10004868:	003e3a06 	br	10004154 <__alt_data_end+0xf8004154>
1000486c:	10002d26 	beq	r2,zero,10004924 <__adddf3+0x84c>
10004870:	4184b03a 	or	r2,r8,r6
10004874:	10000e26 	beq	r2,zero,100048b0 <__adddf3+0x7d8>
10004878:	2804d0fa 	srli	r2,r5,3
1000487c:	8822d0fa 	srli	r17,r17,3
10004880:	280a977a 	slli	r5,r5,29
10004884:	10c0022c 	andhi	r3,r2,8
10004888:	2c62b03a 	or	r17,r5,r17
1000488c:	183feb26 	beq	r3,zero,1000483c <__alt_data_end+0xf800483c>
10004890:	4008d0fa 	srli	r4,r8,3
10004894:	20c0022c 	andhi	r3,r4,8
10004898:	183fe81e 	bne	r3,zero,1000483c <__alt_data_end+0xf800483c>
1000489c:	300cd0fa 	srli	r6,r6,3
100048a0:	4010977a 	slli	r8,r8,29
100048a4:	2005883a 	mov	r2,r4
100048a8:	41a2b03a 	or	r17,r8,r6
100048ac:	003fe306 	br	1000483c <__alt_data_end+0xf800483c>
100048b0:	0401ffc4 	movi	r16,2047
100048b4:	003e2706 	br	10004154 <__alt_data_end+0xf8004154>
100048b8:	0011883a 	mov	r8,zero
100048bc:	003f8306 	br	100046cc <__alt_data_end+0xf80046cc>
100048c0:	193ff804 	addi	r4,r3,-32
100048c4:	02400804 	movi	r9,32
100048c8:	2908d83a 	srl	r4,r5,r4
100048cc:	1a402526 	beq	r3,r9,10004964 <__adddf3+0x88c>
100048d0:	02401004 	movi	r9,64
100048d4:	48c7c83a 	sub	r3,r9,r3
100048d8:	28ca983a 	sll	r5,r5,r3
100048dc:	2c62b03a 	or	r17,r5,r17
100048e0:	8822c03a 	cmpne	r17,r17,zero
100048e4:	8922b03a 	or	r17,r17,r4
100048e8:	0007883a 	mov	r3,zero
100048ec:	003f2f06 	br	100045ac <__alt_data_end+0xf80045ac>
100048f0:	01402034 	movhi	r5,128
100048f4:	0007883a 	mov	r3,zero
100048f8:	297fffc4 	addi	r5,r5,-1
100048fc:	047ffe04 	movi	r17,-8
10004900:	0401ffc4 	movi	r16,2047
10004904:	003e7306 	br	100042d4 <__alt_data_end+0xf80042d4>
10004908:	2c62b03a 	or	r17,r5,r17
1000490c:	8822c03a 	cmpne	r17,r17,zero
10004910:	0009883a 	mov	r4,zero
10004914:	003fa506 	br	100047ac <__alt_data_end+0xf80047ac>
10004918:	400b883a 	mov	r5,r8
1000491c:	3023883a 	mov	r17,r6
10004920:	003e0c06 	br	10004154 <__alt_data_end+0xf8004154>
10004924:	400b883a 	mov	r5,r8
10004928:	3023883a 	mov	r17,r6
1000492c:	0401ffc4 	movi	r16,2047
10004930:	003e0806 	br	10004154 <__alt_data_end+0xf8004154>
10004934:	21fff804 	addi	r7,r4,-32
10004938:	02400804 	movi	r9,32
1000493c:	29ced83a 	srl	r7,r5,r7
10004940:	22400a26 	beq	r4,r9,1000496c <__adddf3+0x894>
10004944:	02401004 	movi	r9,64
10004948:	4909c83a 	sub	r4,r9,r4
1000494c:	290a983a 	sll	r5,r5,r4
10004950:	2c62b03a 	or	r17,r5,r17
10004954:	8822c03a 	cmpne	r17,r17,zero
10004958:	89e2b03a 	or	r17,r17,r7
1000495c:	0009883a 	mov	r4,zero
10004960:	003f9206 	br	100047ac <__alt_data_end+0xf80047ac>
10004964:	000b883a 	mov	r5,zero
10004968:	003fdc06 	br	100048dc <__alt_data_end+0xf80048dc>
1000496c:	000b883a 	mov	r5,zero
10004970:	003ff706 	br	10004950 <__alt_data_end+0xf8004950>

10004974 <__divdf3>:
10004974:	defff004 	addi	sp,sp,-64
10004978:	dc800815 	stw	r18,32(sp)
1000497c:	2824d53a 	srli	r18,r5,20
10004980:	dd800c15 	stw	r22,48(sp)
10004984:	282cd7fa 	srli	r22,r5,31
10004988:	dc000615 	stw	r16,24(sp)
1000498c:	04000434 	movhi	r16,16
10004990:	df000e15 	stw	fp,56(sp)
10004994:	dd000a15 	stw	r20,40(sp)
10004998:	dcc00915 	stw	r19,36(sp)
1000499c:	dc400715 	stw	r17,28(sp)
100049a0:	843fffc4 	addi	r16,r16,-1
100049a4:	dfc00f15 	stw	ra,60(sp)
100049a8:	ddc00d15 	stw	r23,52(sp)
100049ac:	dd400b15 	stw	r21,44(sp)
100049b0:	9481ffcc 	andi	r18,r18,2047
100049b4:	2029883a 	mov	r20,r4
100049b8:	2027883a 	mov	r19,r4
100049bc:	2c22703a 	and	r17,r5,r16
100049c0:	b7003fcc 	andi	fp,r22,255
100049c4:	90005e26 	beq	r18,zero,10004b40 <__divdf3+0x1cc>
100049c8:	0081ffc4 	movi	r2,2047
100049cc:	90803526 	beq	r18,r2,10004aa4 <__divdf3+0x130>
100049d0:	8c000434 	orhi	r16,r17,16
100049d4:	2004d77a 	srli	r2,r4,29
100049d8:	802090fa 	slli	r16,r16,3
100049dc:	202690fa 	slli	r19,r4,3
100049e0:	94bf0044 	addi	r18,r18,-1023
100049e4:	80a2b03a 	or	r17,r16,r2
100049e8:	0029883a 	mov	r20,zero
100049ec:	0011883a 	mov	r8,zero
100049f0:	380ad53a 	srli	r5,r7,20
100049f4:	382ed7fa 	srli	r23,r7,31
100049f8:	04000434 	movhi	r16,16
100049fc:	843fffc4 	addi	r16,r16,-1
10004a00:	2941ffcc 	andi	r5,r5,2047
10004a04:	302b883a 	mov	r21,r6
10004a08:	3c20703a 	and	r16,r7,r16
10004a0c:	ba403fcc 	andi	r9,r23,255
10004a10:	28006726 	beq	r5,zero,10004bb0 <__divdf3+0x23c>
10004a14:	0081ffc4 	movi	r2,2047
10004a18:	28805f26 	beq	r5,r2,10004b98 <__divdf3+0x224>
10004a1c:	84000434 	orhi	r16,r16,16
10004a20:	3004d77a 	srli	r2,r6,29
10004a24:	802090fa 	slli	r16,r16,3
10004a28:	302a90fa 	slli	r21,r6,3
10004a2c:	297f0044 	addi	r5,r5,-1023
10004a30:	80a0b03a 	or	r16,r16,r2
10004a34:	000f883a 	mov	r7,zero
10004a38:	3d06b03a 	or	r3,r7,r20
10004a3c:	180690ba 	slli	r3,r3,2
10004a40:	00840034 	movhi	r2,4096
10004a44:	10929904 	addi	r2,r2,19044
10004a48:	1885883a 	add	r2,r3,r2
10004a4c:	10800017 	ldw	r2,0(r2)
10004a50:	b5c8f03a 	xor	r4,r22,r23
10004a54:	200d883a 	mov	r6,r4
10004a58:	25003fcc 	andi	r20,r4,255
10004a5c:	9165c83a 	sub	r18,r18,r5
10004a60:	1000683a 	jmp	r2
10004a64:	10004cac 	andhi	zero,r2,306
10004a68:	10004adc 	xori	zero,r2,299
10004a6c:	10004c70 	cmpltui	zero,r2,305
10004a70:	10004ac0 	call	110004ac <_gp+0xfe4328>
10004a74:	10004c70 	cmpltui	zero,r2,305
10004a78:	10004c44 	addi	zero,r2,305
10004a7c:	10004c70 	cmpltui	zero,r2,305
10004a80:	10004ac0 	call	110004ac <_gp+0xfe4328>
10004a84:	10004adc 	xori	zero,r2,299
10004a88:	10004adc 	xori	zero,r2,299
10004a8c:	10004c44 	addi	zero,r2,305
10004a90:	10004ac0 	call	110004ac <_gp+0xfe4328>
10004a94:	10004ad0 	cmplti	zero,r2,299
10004a98:	10004ad0 	cmplti	zero,r2,299
10004a9c:	10004ad0 	cmplti	zero,r2,299
10004aa0:	10004c80 	call	110004c8 <_gp+0xfe4344>
10004aa4:	8904b03a 	or	r2,r17,r4
10004aa8:	1000631e 	bne	r2,zero,10004c38 <__divdf3+0x2c4>
10004aac:	05000204 	movi	r20,8
10004ab0:	0023883a 	mov	r17,zero
10004ab4:	0027883a 	mov	r19,zero
10004ab8:	02000084 	movi	r8,2
10004abc:	003fcc06 	br	100049f0 <__alt_data_end+0xf80049f0>
10004ac0:	8023883a 	mov	r17,r16
10004ac4:	a827883a 	mov	r19,r21
10004ac8:	4839883a 	mov	fp,r9
10004acc:	3811883a 	mov	r8,r7
10004ad0:	00800084 	movi	r2,2
10004ad4:	4081531e 	bne	r8,r2,10005024 <__divdf3+0x6b0>
10004ad8:	e029883a 	mov	r20,fp
10004adc:	a180004c 	andi	r6,r20,1
10004ae0:	0201ffc4 	movi	r8,2047
10004ae4:	000b883a 	mov	r5,zero
10004ae8:	0027883a 	mov	r19,zero
10004aec:	4010953a 	slli	r8,r8,20
10004af0:	30c03fcc 	andi	r3,r6,255
10004af4:	04000434 	movhi	r16,16
10004af8:	180697fa 	slli	r3,r3,31
10004afc:	843fffc4 	addi	r16,r16,-1
10004b00:	2c20703a 	and	r16,r5,r16
10004b04:	8220b03a 	or	r16,r16,r8
10004b08:	80c6b03a 	or	r3,r16,r3
10004b0c:	9805883a 	mov	r2,r19
10004b10:	dfc00f17 	ldw	ra,60(sp)
10004b14:	df000e17 	ldw	fp,56(sp)
10004b18:	ddc00d17 	ldw	r23,52(sp)
10004b1c:	dd800c17 	ldw	r22,48(sp)
10004b20:	dd400b17 	ldw	r21,44(sp)
10004b24:	dd000a17 	ldw	r20,40(sp)
10004b28:	dcc00917 	ldw	r19,36(sp)
10004b2c:	dc800817 	ldw	r18,32(sp)
10004b30:	dc400717 	ldw	r17,28(sp)
10004b34:	dc000617 	ldw	r16,24(sp)
10004b38:	dec01004 	addi	sp,sp,64
10004b3c:	f800283a 	ret
10004b40:	8904b03a 	or	r2,r17,r4
10004b44:	10003726 	beq	r2,zero,10004c24 <__divdf3+0x2b0>
10004b48:	88014d26 	beq	r17,zero,10005080 <__divdf3+0x70c>
10004b4c:	8809883a 	mov	r4,r17
10004b50:	d9800215 	stw	r6,8(sp)
10004b54:	d9c00515 	stw	r7,20(sp)
10004b58:	00068700 	call	10006870 <__clzsi2>
10004b5c:	d9800217 	ldw	r6,8(sp)
10004b60:	d9c00517 	ldw	r7,20(sp)
10004b64:	1007883a 	mov	r3,r2
10004b68:	01000a04 	movi	r4,40
10004b6c:	1cfffe04 	addi	r19,r3,-8
10004b70:	20c9c83a 	sub	r4,r4,r3
10004b74:	8cca983a 	sll	r5,r17,r19
10004b78:	a108d83a 	srl	r4,r20,r4
10004b7c:	a4e6983a 	sll	r19,r20,r19
10004b80:	2162b03a 	or	r17,r4,r5
10004b84:	04bf0344 	movi	r18,-1011
10004b88:	90e5c83a 	sub	r18,r18,r3
10004b8c:	0029883a 	mov	r20,zero
10004b90:	0011883a 	mov	r8,zero
10004b94:	003f9606 	br	100049f0 <__alt_data_end+0xf80049f0>
10004b98:	8184b03a 	or	r2,r16,r6
10004b9c:	10001f1e 	bne	r2,zero,10004c1c <__divdf3+0x2a8>
10004ba0:	0021883a 	mov	r16,zero
10004ba4:	002b883a 	mov	r21,zero
10004ba8:	01c00084 	movi	r7,2
10004bac:	003fa206 	br	10004a38 <__alt_data_end+0xf8004a38>
10004bb0:	8184b03a 	or	r2,r16,r6
10004bb4:	10001526 	beq	r2,zero,10004c0c <__divdf3+0x298>
10004bb8:	80013d26 	beq	r16,zero,100050b0 <__divdf3+0x73c>
10004bbc:	8009883a 	mov	r4,r16
10004bc0:	d9800215 	stw	r6,8(sp)
10004bc4:	da000315 	stw	r8,12(sp)
10004bc8:	da400415 	stw	r9,16(sp)
10004bcc:	00068700 	call	10006870 <__clzsi2>
10004bd0:	d9800217 	ldw	r6,8(sp)
10004bd4:	da000317 	ldw	r8,12(sp)
10004bd8:	da400417 	ldw	r9,16(sp)
10004bdc:	1007883a 	mov	r3,r2
10004be0:	01000a04 	movi	r4,40
10004be4:	1d7ffe04 	addi	r21,r3,-8
10004be8:	20c9c83a 	sub	r4,r4,r3
10004bec:	8560983a 	sll	r16,r16,r21
10004bf0:	3108d83a 	srl	r4,r6,r4
10004bf4:	356a983a 	sll	r21,r6,r21
10004bf8:	2420b03a 	or	r16,r4,r16
10004bfc:	017f0344 	movi	r5,-1011
10004c00:	28cbc83a 	sub	r5,r5,r3
10004c04:	000f883a 	mov	r7,zero
10004c08:	003f8b06 	br	10004a38 <__alt_data_end+0xf8004a38>
10004c0c:	0021883a 	mov	r16,zero
10004c10:	002b883a 	mov	r21,zero
10004c14:	01c00044 	movi	r7,1
10004c18:	003f8706 	br	10004a38 <__alt_data_end+0xf8004a38>
10004c1c:	01c000c4 	movi	r7,3
10004c20:	003f8506 	br	10004a38 <__alt_data_end+0xf8004a38>
10004c24:	05000104 	movi	r20,4
10004c28:	0023883a 	mov	r17,zero
10004c2c:	0027883a 	mov	r19,zero
10004c30:	02000044 	movi	r8,1
10004c34:	003f6e06 	br	100049f0 <__alt_data_end+0xf80049f0>
10004c38:	05000304 	movi	r20,12
10004c3c:	020000c4 	movi	r8,3
10004c40:	003f6b06 	br	100049f0 <__alt_data_end+0xf80049f0>
10004c44:	01400434 	movhi	r5,16
10004c48:	000d883a 	mov	r6,zero
10004c4c:	297fffc4 	addi	r5,r5,-1
10004c50:	04ffffc4 	movi	r19,-1
10004c54:	0201ffc4 	movi	r8,2047
10004c58:	003fa406 	br	10004aec <__alt_data_end+0xf8004aec>
10004c5c:	043f0084 	movi	r16,-1022
10004c60:	84a1c83a 	sub	r16,r16,r18
10004c64:	00800e04 	movi	r2,56
10004c68:	14014d0e 	bge	r2,r16,100051a0 <__divdf3+0x82c>
10004c6c:	a180004c 	andi	r6,r20,1
10004c70:	0011883a 	mov	r8,zero
10004c74:	000b883a 	mov	r5,zero
10004c78:	0027883a 	mov	r19,zero
10004c7c:	003f9b06 	br	10004aec <__alt_data_end+0xf8004aec>
10004c80:	8880022c 	andhi	r2,r17,8
10004c84:	1000f026 	beq	r2,zero,10005048 <__divdf3+0x6d4>
10004c88:	8080022c 	andhi	r2,r16,8
10004c8c:	1000ee1e 	bne	r2,zero,10005048 <__divdf3+0x6d4>
10004c90:	00800434 	movhi	r2,16
10004c94:	81400234 	orhi	r5,r16,8
10004c98:	10bfffc4 	addi	r2,r2,-1
10004c9c:	b80d883a 	mov	r6,r23
10004ca0:	288a703a 	and	r5,r5,r2
10004ca4:	a827883a 	mov	r19,r21
10004ca8:	003fea06 	br	10004c54 <__alt_data_end+0xf8004c54>
10004cac:	84411c36 	bltu	r16,r17,10005120 <__divdf3+0x7ac>
10004cb0:	8c011a26 	beq	r17,r16,1000511c <__divdf3+0x7a8>
10004cb4:	94bfffc4 	addi	r18,r18,-1
10004cb8:	dcc00015 	stw	r19,0(sp)
10004cbc:	8811883a 	mov	r8,r17
10004cc0:	002d883a 	mov	r22,zero
10004cc4:	a80cd63a 	srli	r6,r21,24
10004cc8:	8020923a 	slli	r16,r16,8
10004ccc:	a82a923a 	slli	r21,r21,8
10004cd0:	4009883a 	mov	r4,r8
10004cd4:	342eb03a 	or	r23,r6,r16
10004cd8:	dd400115 	stw	r21,4(sp)
10004cdc:	b82ad43a 	srli	r21,r23,16
10004ce0:	da000315 	stw	r8,12(sp)
10004ce4:	bcffffcc 	andi	r19,r23,65535
10004ce8:	a80b883a 	mov	r5,r21
10004cec:	00040a00 	call	100040a0 <__udivsi3>
10004cf0:	1009883a 	mov	r4,r2
10004cf4:	980b883a 	mov	r5,r19
10004cf8:	1023883a 	mov	r17,r2
10004cfc:	00040b00 	call	100040b0 <__mulsi3>
10004d00:	da000317 	ldw	r8,12(sp)
10004d04:	a80b883a 	mov	r5,r21
10004d08:	1039883a 	mov	fp,r2
10004d0c:	4009883a 	mov	r4,r8
10004d10:	00040a80 	call	100040a8 <__umodsi3>
10004d14:	d8c00017 	ldw	r3,0(sp)
10004d18:	1004943a 	slli	r2,r2,16
10004d1c:	1810d43a 	srli	r8,r3,16
10004d20:	120eb03a 	or	r7,r2,r8
10004d24:	3f00062e 	bgeu	r7,fp,10004d40 <__divdf3+0x3cc>
10004d28:	3dcf883a 	add	r7,r7,r23
10004d2c:	88bfffc4 	addi	r2,r17,-1
10004d30:	3dc10a36 	bltu	r7,r23,1000515c <__divdf3+0x7e8>
10004d34:	3f01092e 	bgeu	r7,fp,1000515c <__divdf3+0x7e8>
10004d38:	8c7fff84 	addi	r17,r17,-2
10004d3c:	3dcf883a 	add	r7,r7,r23
10004d40:	3f39c83a 	sub	fp,r7,fp
10004d44:	e009883a 	mov	r4,fp
10004d48:	a80b883a 	mov	r5,r21
10004d4c:	00040a00 	call	100040a0 <__udivsi3>
10004d50:	1009883a 	mov	r4,r2
10004d54:	980b883a 	mov	r5,r19
10004d58:	1021883a 	mov	r16,r2
10004d5c:	00040b00 	call	100040b0 <__mulsi3>
10004d60:	e009883a 	mov	r4,fp
10004d64:	a80b883a 	mov	r5,r21
10004d68:	d8800315 	stw	r2,12(sp)
10004d6c:	00040a80 	call	100040a8 <__umodsi3>
10004d70:	d9000017 	ldw	r4,0(sp)
10004d74:	1004943a 	slli	r2,r2,16
10004d78:	da000317 	ldw	r8,12(sp)
10004d7c:	20ffffcc 	andi	r3,r4,65535
10004d80:	10ceb03a 	or	r7,r2,r3
10004d84:	3a00062e 	bgeu	r7,r8,10004da0 <__divdf3+0x42c>
10004d88:	3dcf883a 	add	r7,r7,r23
10004d8c:	80bfffc4 	addi	r2,r16,-1
10004d90:	3dc0f036 	bltu	r7,r23,10005154 <__divdf3+0x7e0>
10004d94:	3a00ef2e 	bgeu	r7,r8,10005154 <__divdf3+0x7e0>
10004d98:	843fff84 	addi	r16,r16,-2
10004d9c:	3dcf883a 	add	r7,r7,r23
10004da0:	d8c00117 	ldw	r3,4(sp)
10004da4:	8822943a 	slli	r17,r17,16
10004da8:	3a0fc83a 	sub	r7,r7,r8
10004dac:	1806d43a 	srli	r3,r3,16
10004db0:	8462b03a 	or	r17,r16,r17
10004db4:	8affffcc 	andi	r11,r17,65535
10004db8:	d8c00015 	stw	r3,0(sp)
10004dbc:	d8c00117 	ldw	r3,4(sp)
10004dc0:	8820d43a 	srli	r16,r17,16
10004dc4:	5809883a 	mov	r4,r11
10004dc8:	1f3fffcc 	andi	fp,r3,65535
10004dcc:	e00b883a 	mov	r5,fp
10004dd0:	d9c00515 	stw	r7,20(sp)
10004dd4:	dac00215 	stw	r11,8(sp)
10004dd8:	00040b00 	call	100040b0 <__mulsi3>
10004ddc:	8009883a 	mov	r4,r16
10004de0:	e00b883a 	mov	r5,fp
10004de4:	d8800415 	stw	r2,16(sp)
10004de8:	00040b00 	call	100040b0 <__mulsi3>
10004dec:	d9400017 	ldw	r5,0(sp)
10004df0:	8009883a 	mov	r4,r16
10004df4:	d8800315 	stw	r2,12(sp)
10004df8:	00040b00 	call	100040b0 <__mulsi3>
10004dfc:	dac00217 	ldw	r11,8(sp)
10004e00:	d9400017 	ldw	r5,0(sp)
10004e04:	d8800215 	stw	r2,8(sp)
10004e08:	5809883a 	mov	r4,r11
10004e0c:	00040b00 	call	100040b0 <__mulsi3>
10004e10:	da400417 	ldw	r9,16(sp)
10004e14:	da800317 	ldw	r10,12(sp)
10004e18:	d9c00517 	ldw	r7,20(sp)
10004e1c:	480ad43a 	srli	r5,r9,16
10004e20:	5085883a 	add	r2,r10,r2
10004e24:	db000217 	ldw	r12,8(sp)
10004e28:	1151883a 	add	r8,r2,r5
10004e2c:	4280022e 	bgeu	r8,r10,10004e38 <__divdf3+0x4c4>
10004e30:	00800074 	movhi	r2,1
10004e34:	6099883a 	add	r12,r12,r2
10004e38:	400ad43a 	srli	r5,r8,16
10004e3c:	4010943a 	slli	r8,r8,16
10004e40:	4c3fffcc 	andi	r16,r9,65535
10004e44:	6149883a 	add	r4,r12,r5
10004e48:	4411883a 	add	r8,r8,r16
10004e4c:	3900a736 	bltu	r7,r4,100050ec <__divdf3+0x778>
10004e50:	3900c426 	beq	r7,r4,10005164 <__divdf3+0x7f0>
10004e54:	3909c83a 	sub	r4,r7,r4
10004e58:	b221c83a 	sub	r16,r22,r8
10004e5c:	b42d803a 	cmpltu	r22,r22,r16
10004e60:	25adc83a 	sub	r22,r4,r22
10004e64:	b5c0c626 	beq	r22,r23,10005180 <__divdf3+0x80c>
10004e68:	b009883a 	mov	r4,r22
10004e6c:	a80b883a 	mov	r5,r21
10004e70:	00040a00 	call	100040a0 <__udivsi3>
10004e74:	1009883a 	mov	r4,r2
10004e78:	980b883a 	mov	r5,r19
10004e7c:	d8800315 	stw	r2,12(sp)
10004e80:	00040b00 	call	100040b0 <__mulsi3>
10004e84:	a80b883a 	mov	r5,r21
10004e88:	b009883a 	mov	r4,r22
10004e8c:	d8800415 	stw	r2,16(sp)
10004e90:	00040a80 	call	100040a8 <__umodsi3>
10004e94:	1004943a 	slli	r2,r2,16
10004e98:	800ed43a 	srli	r7,r16,16
10004e9c:	da400417 	ldw	r9,16(sp)
10004ea0:	da000317 	ldw	r8,12(sp)
10004ea4:	11cab03a 	or	r5,r2,r7
10004ea8:	2a40062e 	bgeu	r5,r9,10004ec4 <__divdf3+0x550>
10004eac:	2dcb883a 	add	r5,r5,r23
10004eb0:	40bfffc4 	addi	r2,r8,-1
10004eb4:	2dc0b436 	bltu	r5,r23,10005188 <__divdf3+0x814>
10004eb8:	2a40b32e 	bgeu	r5,r9,10005188 <__divdf3+0x814>
10004ebc:	423fff84 	addi	r8,r8,-2
10004ec0:	2dcb883a 	add	r5,r5,r23
10004ec4:	2a6dc83a 	sub	r22,r5,r9
10004ec8:	b009883a 	mov	r4,r22
10004ecc:	a80b883a 	mov	r5,r21
10004ed0:	da000315 	stw	r8,12(sp)
10004ed4:	00040a00 	call	100040a0 <__udivsi3>
10004ed8:	980b883a 	mov	r5,r19
10004edc:	1009883a 	mov	r4,r2
10004ee0:	d8800415 	stw	r2,16(sp)
10004ee4:	00040b00 	call	100040b0 <__mulsi3>
10004ee8:	b009883a 	mov	r4,r22
10004eec:	a80b883a 	mov	r5,r21
10004ef0:	1027883a 	mov	r19,r2
10004ef4:	00040a80 	call	100040a8 <__umodsi3>
10004ef8:	1004943a 	slli	r2,r2,16
10004efc:	843fffcc 	andi	r16,r16,65535
10004f00:	da000317 	ldw	r8,12(sp)
10004f04:	140eb03a 	or	r7,r2,r16
10004f08:	da400417 	ldw	r9,16(sp)
10004f0c:	3cc0062e 	bgeu	r7,r19,10004f28 <__divdf3+0x5b4>
10004f10:	3dcf883a 	add	r7,r7,r23
10004f14:	48bfffc4 	addi	r2,r9,-1
10004f18:	3dc09d36 	bltu	r7,r23,10005190 <__divdf3+0x81c>
10004f1c:	3cc09c2e 	bgeu	r7,r19,10005190 <__divdf3+0x81c>
10004f20:	4a7fff84 	addi	r9,r9,-2
10004f24:	3dcf883a 	add	r7,r7,r23
10004f28:	4010943a 	slli	r8,r8,16
10004f2c:	3cebc83a 	sub	r21,r7,r19
10004f30:	e00b883a 	mov	r5,fp
10004f34:	4a26b03a 	or	r19,r9,r8
10004f38:	99ffffcc 	andi	r7,r19,65535
10004f3c:	9820d43a 	srli	r16,r19,16
10004f40:	3809883a 	mov	r4,r7
10004f44:	d9c00515 	stw	r7,20(sp)
10004f48:	00040b00 	call	100040b0 <__mulsi3>
10004f4c:	8009883a 	mov	r4,r16
10004f50:	e00b883a 	mov	r5,fp
10004f54:	102d883a 	mov	r22,r2
10004f58:	00040b00 	call	100040b0 <__mulsi3>
10004f5c:	d9400017 	ldw	r5,0(sp)
10004f60:	8009883a 	mov	r4,r16
10004f64:	1039883a 	mov	fp,r2
10004f68:	00040b00 	call	100040b0 <__mulsi3>
10004f6c:	d9c00517 	ldw	r7,20(sp)
10004f70:	d9400017 	ldw	r5,0(sp)
10004f74:	1021883a 	mov	r16,r2
10004f78:	3809883a 	mov	r4,r7
10004f7c:	00040b00 	call	100040b0 <__mulsi3>
10004f80:	b008d43a 	srli	r4,r22,16
10004f84:	e085883a 	add	r2,fp,r2
10004f88:	1109883a 	add	r4,r2,r4
10004f8c:	2700022e 	bgeu	r4,fp,10004f98 <__divdf3+0x624>
10004f90:	00800074 	movhi	r2,1
10004f94:	80a1883a 	add	r16,r16,r2
10004f98:	200ad43a 	srli	r5,r4,16
10004f9c:	2008943a 	slli	r4,r4,16
10004fa0:	b5bfffcc 	andi	r22,r22,65535
10004fa4:	8145883a 	add	r2,r16,r5
10004fa8:	2589883a 	add	r4,r4,r22
10004fac:	a8802c36 	bltu	r21,r2,10005060 <__divdf3+0x6ec>
10004fb0:	a880a426 	beq	r21,r2,10005244 <__divdf3+0x8d0>
10004fb4:	9cc00054 	ori	r19,r19,1
10004fb8:	9200ffc4 	addi	r8,r18,1023
10004fbc:	023f270e 	bge	zero,r8,10004c5c <__alt_data_end+0xf8004c5c>
10004fc0:	988001cc 	andi	r2,r19,7
10004fc4:	10000726 	beq	r2,zero,10004fe4 <__divdf3+0x670>
10004fc8:	990003cc 	andi	r4,r19,15
10004fcc:	00800104 	movi	r2,4
10004fd0:	20800426 	beq	r4,r2,10004fe4 <__divdf3+0x670>
10004fd4:	9885883a 	add	r2,r19,r2
10004fd8:	14e7803a 	cmpltu	r19,r2,r19
10004fdc:	8ce3883a 	add	r17,r17,r19
10004fe0:	1027883a 	mov	r19,r2
10004fe4:	8880402c 	andhi	r2,r17,256
10004fe8:	10000426 	beq	r2,zero,10004ffc <__divdf3+0x688>
10004fec:	00bfc034 	movhi	r2,65280
10004ff0:	10bfffc4 	addi	r2,r2,-1
10004ff4:	92010004 	addi	r8,r18,1024
10004ff8:	88a2703a 	and	r17,r17,r2
10004ffc:	0081ff84 	movi	r2,2046
10005000:	123eb616 	blt	r2,r8,10004adc <__alt_data_end+0xf8004adc>
10005004:	9826d0fa 	srli	r19,r19,3
10005008:	8804977a 	slli	r2,r17,29
1000500c:	8820927a 	slli	r16,r17,9
10005010:	4201ffcc 	andi	r8,r8,2047
10005014:	14e6b03a 	or	r19,r2,r19
10005018:	800ad33a 	srli	r5,r16,12
1000501c:	a180004c 	andi	r6,r20,1
10005020:	003eb206 	br	10004aec <__alt_data_end+0xf8004aec>
10005024:	008000c4 	movi	r2,3
10005028:	4080ac26 	beq	r8,r2,100052dc <__divdf3+0x968>
1000502c:	00800044 	movi	r2,1
10005030:	4080591e 	bne	r8,r2,10005198 <__divdf3+0x824>
10005034:	e00d883a 	mov	r6,fp
10005038:	0011883a 	mov	r8,zero
1000503c:	000b883a 	mov	r5,zero
10005040:	0027883a 	mov	r19,zero
10005044:	003ea906 	br	10004aec <__alt_data_end+0xf8004aec>
10005048:	00800434 	movhi	r2,16
1000504c:	89400234 	orhi	r5,r17,8
10005050:	10bfffc4 	addi	r2,r2,-1
10005054:	b00d883a 	mov	r6,r22
10005058:	288a703a 	and	r5,r5,r2
1000505c:	003efd06 	br	10004c54 <__alt_data_end+0xf8004c54>
10005060:	adcf883a 	add	r7,r21,r23
10005064:	997fffc4 	addi	r5,r19,-1
10005068:	3dc0412e 	bgeu	r7,r23,10005170 <__divdf3+0x7fc>
1000506c:	2827883a 	mov	r19,r5
10005070:	38bfd01e 	bne	r7,r2,10004fb4 <__alt_data_end+0xf8004fb4>
10005074:	d8c00117 	ldw	r3,4(sp)
10005078:	193fce1e 	bne	r3,r4,10004fb4 <__alt_data_end+0xf8004fb4>
1000507c:	003fce06 	br	10004fb8 <__alt_data_end+0xf8004fb8>
10005080:	d9800215 	stw	r6,8(sp)
10005084:	d9c00515 	stw	r7,20(sp)
10005088:	00068700 	call	10006870 <__clzsi2>
1000508c:	10c00804 	addi	r3,r2,32
10005090:	010009c4 	movi	r4,39
10005094:	d9800217 	ldw	r6,8(sp)
10005098:	d9c00517 	ldw	r7,20(sp)
1000509c:	20feb20e 	bge	r4,r3,10004b68 <__alt_data_end+0xf8004b68>
100050a0:	117ffe04 	addi	r5,r2,-8
100050a4:	a162983a 	sll	r17,r20,r5
100050a8:	0027883a 	mov	r19,zero
100050ac:	003eb506 	br	10004b84 <__alt_data_end+0xf8004b84>
100050b0:	3009883a 	mov	r4,r6
100050b4:	d9800215 	stw	r6,8(sp)
100050b8:	da000315 	stw	r8,12(sp)
100050bc:	da400415 	stw	r9,16(sp)
100050c0:	00068700 	call	10006870 <__clzsi2>
100050c4:	10c00804 	addi	r3,r2,32
100050c8:	010009c4 	movi	r4,39
100050cc:	d9800217 	ldw	r6,8(sp)
100050d0:	da000317 	ldw	r8,12(sp)
100050d4:	da400417 	ldw	r9,16(sp)
100050d8:	20fec10e 	bge	r4,r3,10004be0 <__alt_data_end+0xf8004be0>
100050dc:	10bffe04 	addi	r2,r2,-8
100050e0:	a8a0983a 	sll	r16,r21,r2
100050e4:	002b883a 	mov	r21,zero
100050e8:	003ec406 	br	10004bfc <__alt_data_end+0xf8004bfc>
100050ec:	d8c00117 	ldw	r3,4(sp)
100050f0:	b0ed883a 	add	r22,r22,r3
100050f4:	b0c5803a 	cmpltu	r2,r22,r3
100050f8:	15c5883a 	add	r2,r2,r23
100050fc:	11cf883a 	add	r7,r2,r7
10005100:	88bfffc4 	addi	r2,r17,-1
10005104:	b9c00d2e 	bgeu	r23,r7,1000513c <__divdf3+0x7c8>
10005108:	39003f36 	bltu	r7,r4,10005208 <__divdf3+0x894>
1000510c:	21c06a26 	beq	r4,r7,100052b8 <__divdf3+0x944>
10005110:	3909c83a 	sub	r4,r7,r4
10005114:	1023883a 	mov	r17,r2
10005118:	003f4f06 	br	10004e58 <__alt_data_end+0xf8004e58>
1000511c:	9d7ee536 	bltu	r19,r21,10004cb4 <__alt_data_end+0xf8004cb4>
10005120:	982ed07a 	srli	r23,r19,1
10005124:	880497fa 	slli	r2,r17,31
10005128:	8810d07a 	srli	r8,r17,1
1000512c:	982c97fa 	slli	r22,r19,31
10005130:	b884b03a 	or	r2,r23,r2
10005134:	d8800015 	stw	r2,0(sp)
10005138:	003ee206 	br	10004cc4 <__alt_data_end+0xf8004cc4>
1000513c:	3dfff41e 	bne	r7,r23,10005110 <__alt_data_end+0xf8005110>
10005140:	d8c00117 	ldw	r3,4(sp)
10005144:	b0fff02e 	bgeu	r22,r3,10005108 <__alt_data_end+0xf8005108>
10005148:	b909c83a 	sub	r4,r23,r4
1000514c:	1023883a 	mov	r17,r2
10005150:	003f4106 	br	10004e58 <__alt_data_end+0xf8004e58>
10005154:	1021883a 	mov	r16,r2
10005158:	003f1106 	br	10004da0 <__alt_data_end+0xf8004da0>
1000515c:	1023883a 	mov	r17,r2
10005160:	003ef706 	br	10004d40 <__alt_data_end+0xf8004d40>
10005164:	b23fe136 	bltu	r22,r8,100050ec <__alt_data_end+0xf80050ec>
10005168:	0009883a 	mov	r4,zero
1000516c:	003f3a06 	br	10004e58 <__alt_data_end+0xf8004e58>
10005170:	38802c36 	bltu	r7,r2,10005224 <__divdf3+0x8b0>
10005174:	11c05326 	beq	r2,r7,100052c4 <__divdf3+0x950>
10005178:	2827883a 	mov	r19,r5
1000517c:	003f8d06 	br	10004fb4 <__alt_data_end+0xf8004fb4>
10005180:	04ffffc4 	movi	r19,-1
10005184:	003f8c06 	br	10004fb8 <__alt_data_end+0xf8004fb8>
10005188:	1011883a 	mov	r8,r2
1000518c:	003f4d06 	br	10004ec4 <__alt_data_end+0xf8004ec4>
10005190:	1013883a 	mov	r9,r2
10005194:	003f6406 	br	10004f28 <__alt_data_end+0xf8004f28>
10005198:	e029883a 	mov	r20,fp
1000519c:	003f8606 	br	10004fb8 <__alt_data_end+0xf8004fb8>
100051a0:	008007c4 	movi	r2,31
100051a4:	14002a16 	blt	r2,r16,10005250 <__divdf3+0x8dc>
100051a8:	91410784 	addi	r5,r18,1054
100051ac:	9c0cd83a 	srl	r6,r19,r16
100051b0:	8948983a 	sll	r4,r17,r5
100051b4:	9944983a 	sll	r2,r19,r5
100051b8:	8c20d83a 	srl	r16,r17,r16
100051bc:	3108b03a 	or	r4,r6,r4
100051c0:	1004c03a 	cmpne	r2,r2,zero
100051c4:	2084b03a 	or	r2,r4,r2
100051c8:	110001cc 	andi	r4,r2,7
100051cc:	20000726 	beq	r4,zero,100051ec <__divdf3+0x878>
100051d0:	114003cc 	andi	r5,r2,15
100051d4:	01000104 	movi	r4,4
100051d8:	29000426 	beq	r5,r4,100051ec <__divdf3+0x878>
100051dc:	11000104 	addi	r4,r2,4
100051e0:	2085803a 	cmpltu	r2,r4,r2
100051e4:	80a1883a 	add	r16,r16,r2
100051e8:	2005883a 	mov	r2,r4
100051ec:	8100202c 	andhi	r4,r16,128
100051f0:	20002d26 	beq	r4,zero,100052a8 <__divdf3+0x934>
100051f4:	a180004c 	andi	r6,r20,1
100051f8:	02000044 	movi	r8,1
100051fc:	000b883a 	mov	r5,zero
10005200:	0027883a 	mov	r19,zero
10005204:	003e3906 	br	10004aec <__alt_data_end+0xf8004aec>
10005208:	d8c00117 	ldw	r3,4(sp)
1000520c:	8c7fff84 	addi	r17,r17,-2
10005210:	b0ed883a 	add	r22,r22,r3
10005214:	b0c5803a 	cmpltu	r2,r22,r3
10005218:	15c5883a 	add	r2,r2,r23
1000521c:	11cf883a 	add	r7,r2,r7
10005220:	003f0c06 	br	10004e54 <__alt_data_end+0xf8004e54>
10005224:	d8c00117 	ldw	r3,4(sp)
10005228:	997fff84 	addi	r5,r19,-2
1000522c:	18d1883a 	add	r8,r3,r3
10005230:	40c7803a 	cmpltu	r3,r8,r3
10005234:	1dcd883a 	add	r6,r3,r23
10005238:	398f883a 	add	r7,r7,r6
1000523c:	da000115 	stw	r8,4(sp)
10005240:	003f8a06 	br	1000506c <__alt_data_end+0xf800506c>
10005244:	203f861e 	bne	r4,zero,10005060 <__alt_data_end+0xf8005060>
10005248:	d8000115 	stw	zero,4(sp)
1000524c:	003f8906 	br	10005074 <__alt_data_end+0xf8005074>
10005250:	00bef884 	movi	r2,-1054
10005254:	1485c83a 	sub	r2,r2,r18
10005258:	01000804 	movi	r4,32
1000525c:	8884d83a 	srl	r2,r17,r2
10005260:	81001c26 	beq	r16,r4,100052d4 <__divdf3+0x960>
10005264:	91010f84 	addi	r4,r18,1086
10005268:	8908983a 	sll	r4,r17,r4
1000526c:	24c8b03a 	or	r4,r4,r19
10005270:	2008c03a 	cmpne	r4,r4,zero
10005274:	2084b03a 	or	r2,r4,r2
10005278:	140001cc 	andi	r16,r2,7
1000527c:	8000061e 	bne	r16,zero,10005298 <__divdf3+0x924>
10005280:	000b883a 	mov	r5,zero
10005284:	1004d0fa 	srli	r2,r2,3
10005288:	a180004c 	andi	r6,r20,1
1000528c:	0011883a 	mov	r8,zero
10005290:	1426b03a 	or	r19,r2,r16
10005294:	003e1506 	br	10004aec <__alt_data_end+0xf8004aec>
10005298:	114003cc 	andi	r5,r2,15
1000529c:	01000104 	movi	r4,4
100052a0:	0021883a 	mov	r16,zero
100052a4:	293fcd1e 	bne	r5,r4,100051dc <__alt_data_end+0xf80051dc>
100052a8:	800a927a 	slli	r5,r16,9
100052ac:	8020977a 	slli	r16,r16,29
100052b0:	280ad33a 	srli	r5,r5,12
100052b4:	003ff306 	br	10005284 <__alt_data_end+0xf8005284>
100052b8:	b23fd336 	bltu	r22,r8,10005208 <__alt_data_end+0xf8005208>
100052bc:	1023883a 	mov	r17,r2
100052c0:	003fa906 	br	10005168 <__alt_data_end+0xf8005168>
100052c4:	d8c00117 	ldw	r3,4(sp)
100052c8:	193fd636 	bltu	r3,r4,10005224 <__alt_data_end+0xf8005224>
100052cc:	2827883a 	mov	r19,r5
100052d0:	003f6806 	br	10005074 <__alt_data_end+0xf8005074>
100052d4:	0009883a 	mov	r4,zero
100052d8:	003fe406 	br	1000526c <__alt_data_end+0xf800526c>
100052dc:	00800434 	movhi	r2,16
100052e0:	89400234 	orhi	r5,r17,8
100052e4:	10bfffc4 	addi	r2,r2,-1
100052e8:	e00d883a 	mov	r6,fp
100052ec:	288a703a 	and	r5,r5,r2
100052f0:	003e5806 	br	10004c54 <__alt_data_end+0xf8004c54>

100052f4 <__eqdf2>:
100052f4:	2804d53a 	srli	r2,r5,20
100052f8:	3806d53a 	srli	r3,r7,20
100052fc:	02000434 	movhi	r8,16
10005300:	423fffc4 	addi	r8,r8,-1
10005304:	1081ffcc 	andi	r2,r2,2047
10005308:	0241ffc4 	movi	r9,2047
1000530c:	2a14703a 	and	r10,r5,r8
10005310:	18c1ffcc 	andi	r3,r3,2047
10005314:	3a10703a 	and	r8,r7,r8
10005318:	280ad7fa 	srli	r5,r5,31
1000531c:	380ed7fa 	srli	r7,r7,31
10005320:	12400f26 	beq	r2,r9,10005360 <__eqdf2+0x6c>
10005324:	0241ffc4 	movi	r9,2047
10005328:	1a400326 	beq	r3,r9,10005338 <__eqdf2+0x44>
1000532c:	10c00526 	beq	r2,r3,10005344 <__eqdf2+0x50>
10005330:	00800044 	movi	r2,1
10005334:	f800283a 	ret
10005338:	4192b03a 	or	r9,r8,r6
1000533c:	483ffc1e 	bne	r9,zero,10005330 <__alt_data_end+0xf8005330>
10005340:	10fffb1e 	bne	r2,r3,10005330 <__alt_data_end+0xf8005330>
10005344:	523ffa1e 	bne	r10,r8,10005330 <__alt_data_end+0xf8005330>
10005348:	21bff91e 	bne	r4,r6,10005330 <__alt_data_end+0xf8005330>
1000534c:	29c00826 	beq	r5,r7,10005370 <__eqdf2+0x7c>
10005350:	103ff71e 	bne	r2,zero,10005330 <__alt_data_end+0xf8005330>
10005354:	5104b03a 	or	r2,r10,r4
10005358:	1004c03a 	cmpne	r2,r2,zero
1000535c:	f800283a 	ret
10005360:	5112b03a 	or	r9,r10,r4
10005364:	483fef26 	beq	r9,zero,10005324 <__alt_data_end+0xf8005324>
10005368:	00800044 	movi	r2,1
1000536c:	f800283a 	ret
10005370:	0005883a 	mov	r2,zero
10005374:	f800283a 	ret

10005378 <__gedf2>:
10005378:	2804d53a 	srli	r2,r5,20
1000537c:	3806d53a 	srli	r3,r7,20
10005380:	02000434 	movhi	r8,16
10005384:	423fffc4 	addi	r8,r8,-1
10005388:	0241ffc4 	movi	r9,2047
1000538c:	1081ffcc 	andi	r2,r2,2047
10005390:	2a14703a 	and	r10,r5,r8
10005394:	1a46703a 	and	r3,r3,r9
10005398:	3a10703a 	and	r8,r7,r8
1000539c:	280ad7fa 	srli	r5,r5,31
100053a0:	380ed7fa 	srli	r7,r7,31
100053a4:	12400b26 	beq	r2,r9,100053d4 <__gedf2+0x5c>
100053a8:	1a401626 	beq	r3,r9,10005404 <__gedf2+0x8c>
100053ac:	10000c1e 	bne	r2,zero,100053e0 <__gedf2+0x68>
100053b0:	5112b03a 	or	r9,r10,r4
100053b4:	4813003a 	cmpeq	r9,r9,zero
100053b8:	4817883a 	mov	r11,r9
100053bc:	18000c1e 	bne	r3,zero,100053f0 <__gedf2+0x78>
100053c0:	4198b03a 	or	r12,r8,r6
100053c4:	60000a1e 	bne	r12,zero,100053f0 <__gedf2+0x78>
100053c8:	48001326 	beq	r9,zero,10005418 <__gedf2+0xa0>
100053cc:	0005883a 	mov	r2,zero
100053d0:	f800283a 	ret
100053d4:	5112b03a 	or	r9,r10,r4
100053d8:	4800191e 	bne	r9,zero,10005440 <__gedf2+0xc8>
100053dc:	18800926 	beq	r3,r2,10005404 <__gedf2+0x8c>
100053e0:	18000b1e 	bne	r3,zero,10005410 <__gedf2+0x98>
100053e4:	4192b03a 	or	r9,r8,r6
100053e8:	0017883a 	mov	r11,zero
100053ec:	48000a26 	beq	r9,zero,10005418 <__gedf2+0xa0>
100053f0:	39c03fcc 	andi	r7,r7,255
100053f4:	58000726 	beq	r11,zero,10005414 <__gedf2+0x9c>
100053f8:	3800081e 	bne	r7,zero,1000541c <__gedf2+0xa4>
100053fc:	00bfffc4 	movi	r2,-1
10005400:	f800283a 	ret
10005404:	4192b03a 	or	r9,r8,r6
10005408:	48000d1e 	bne	r9,zero,10005440 <__gedf2+0xc8>
1000540c:	103fe826 	beq	r2,zero,100053b0 <__alt_data_end+0xf80053b0>
10005410:	39c03fcc 	andi	r7,r7,255
10005414:	29c00326 	beq	r5,r7,10005424 <__gedf2+0xac>
10005418:	283ff81e 	bne	r5,zero,100053fc <__alt_data_end+0xf80053fc>
1000541c:	00800044 	movi	r2,1
10005420:	f800283a 	ret
10005424:	18bffc16 	blt	r3,r2,10005418 <__alt_data_end+0xf8005418>
10005428:	10c00316 	blt	r2,r3,10005438 <__gedf2+0xc0>
1000542c:	42bffa36 	bltu	r8,r10,10005418 <__alt_data_end+0xf8005418>
10005430:	52000526 	beq	r10,r8,10005448 <__gedf2+0xd0>
10005434:	523fe52e 	bgeu	r10,r8,100053cc <__alt_data_end+0xf80053cc>
10005438:	283ff026 	beq	r5,zero,100053fc <__alt_data_end+0xf80053fc>
1000543c:	003ff706 	br	1000541c <__alt_data_end+0xf800541c>
10005440:	00bfff84 	movi	r2,-2
10005444:	f800283a 	ret
10005448:	313ff336 	bltu	r6,r4,10005418 <__alt_data_end+0xf8005418>
1000544c:	21bfdf2e 	bgeu	r4,r6,100053cc <__alt_data_end+0xf80053cc>
10005450:	283fea26 	beq	r5,zero,100053fc <__alt_data_end+0xf80053fc>
10005454:	003ff106 	br	1000541c <__alt_data_end+0xf800541c>

10005458 <__ledf2>:
10005458:	2804d53a 	srli	r2,r5,20
1000545c:	3810d53a 	srli	r8,r7,20
10005460:	00c00434 	movhi	r3,16
10005464:	18ffffc4 	addi	r3,r3,-1
10005468:	0241ffc4 	movi	r9,2047
1000546c:	1081ffcc 	andi	r2,r2,2047
10005470:	28d4703a 	and	r10,r5,r3
10005474:	4250703a 	and	r8,r8,r9
10005478:	38c6703a 	and	r3,r7,r3
1000547c:	280ad7fa 	srli	r5,r5,31
10005480:	380ed7fa 	srli	r7,r7,31
10005484:	12400b26 	beq	r2,r9,100054b4 <__ledf2+0x5c>
10005488:	42401926 	beq	r8,r9,100054f0 <__ledf2+0x98>
1000548c:	10000c1e 	bne	r2,zero,100054c0 <__ledf2+0x68>
10005490:	5112b03a 	or	r9,r10,r4
10005494:	4813003a 	cmpeq	r9,r9,zero
10005498:	4817883a 	mov	r11,r9
1000549c:	40000f26 	beq	r8,zero,100054dc <__ledf2+0x84>
100054a0:	39c03fcc 	andi	r7,r7,255
100054a4:	58001826 	beq	r11,zero,10005508 <__ledf2+0xb0>
100054a8:	38000a1e 	bne	r7,zero,100054d4 <__ledf2+0x7c>
100054ac:	00bfffc4 	movi	r2,-1
100054b0:	f800283a 	ret
100054b4:	5112b03a 	or	r9,r10,r4
100054b8:	48000f1e 	bne	r9,zero,100054f8 <__ledf2+0xa0>
100054bc:	40800c26 	beq	r8,r2,100054f0 <__ledf2+0x98>
100054c0:	4000101e 	bne	r8,zero,10005504 <__ledf2+0xac>
100054c4:	1992b03a 	or	r9,r3,r6
100054c8:	0017883a 	mov	r11,zero
100054cc:	483ff41e 	bne	r9,zero,100054a0 <__alt_data_end+0xf80054a0>
100054d0:	283ff61e 	bne	r5,zero,100054ac <__alt_data_end+0xf80054ac>
100054d4:	00800044 	movi	r2,1
100054d8:	f800283a 	ret
100054dc:	1998b03a 	or	r12,r3,r6
100054e0:	603fef1e 	bne	r12,zero,100054a0 <__alt_data_end+0xf80054a0>
100054e4:	483ffa26 	beq	r9,zero,100054d0 <__alt_data_end+0xf80054d0>
100054e8:	0005883a 	mov	r2,zero
100054ec:	f800283a 	ret
100054f0:	1992b03a 	or	r9,r3,r6
100054f4:	48000226 	beq	r9,zero,10005500 <__ledf2+0xa8>
100054f8:	00800084 	movi	r2,2
100054fc:	f800283a 	ret
10005500:	103fe326 	beq	r2,zero,10005490 <__alt_data_end+0xf8005490>
10005504:	39c03fcc 	andi	r7,r7,255
10005508:	29fff11e 	bne	r5,r7,100054d0 <__alt_data_end+0xf80054d0>
1000550c:	40bff016 	blt	r8,r2,100054d0 <__alt_data_end+0xf80054d0>
10005510:	12000316 	blt	r2,r8,10005520 <__ledf2+0xc8>
10005514:	1abfee36 	bltu	r3,r10,100054d0 <__alt_data_end+0xf80054d0>
10005518:	50c00326 	beq	r10,r3,10005528 <__ledf2+0xd0>
1000551c:	50fff22e 	bgeu	r10,r3,100054e8 <__alt_data_end+0xf80054e8>
10005520:	283fe226 	beq	r5,zero,100054ac <__alt_data_end+0xf80054ac>
10005524:	003feb06 	br	100054d4 <__alt_data_end+0xf80054d4>
10005528:	313fe936 	bltu	r6,r4,100054d0 <__alt_data_end+0xf80054d0>
1000552c:	21bfee2e 	bgeu	r4,r6,100054e8 <__alt_data_end+0xf80054e8>
10005530:	283fde26 	beq	r5,zero,100054ac <__alt_data_end+0xf80054ac>
10005534:	003fe706 	br	100054d4 <__alt_data_end+0xf80054d4>

10005538 <__muldf3>:
10005538:	deffee04 	addi	sp,sp,-72
1000553c:	dd000c15 	stw	r20,48(sp)
10005540:	2828d53a 	srli	r20,r5,20
10005544:	dd400d15 	stw	r21,52(sp)
10005548:	282ad7fa 	srli	r21,r5,31
1000554c:	dc000815 	stw	r16,32(sp)
10005550:	04000434 	movhi	r16,16
10005554:	ddc00f15 	stw	r23,60(sp)
10005558:	dcc00b15 	stw	r19,44(sp)
1000555c:	dc800a15 	stw	r18,40(sp)
10005560:	843fffc4 	addi	r16,r16,-1
10005564:	dfc01115 	stw	ra,68(sp)
10005568:	df001015 	stw	fp,64(sp)
1000556c:	dd800e15 	stw	r22,56(sp)
10005570:	dc400915 	stw	r17,36(sp)
10005574:	a501ffcc 	andi	r20,r20,2047
10005578:	2025883a 	mov	r18,r4
1000557c:	202f883a 	mov	r23,r4
10005580:	2c20703a 	and	r16,r5,r16
10005584:	a827883a 	mov	r19,r21
10005588:	aa403fcc 	andi	r9,r21,255
1000558c:	a0005926 	beq	r20,zero,100056f4 <__muldf3+0x1bc>
10005590:	0081ffc4 	movi	r2,2047
10005594:	a0803426 	beq	r20,r2,10005668 <__muldf3+0x130>
10005598:	84000434 	orhi	r16,r16,16
1000559c:	2004d77a 	srli	r2,r4,29
100055a0:	802090fa 	slli	r16,r16,3
100055a4:	202e90fa 	slli	r23,r4,3
100055a8:	a53f0044 	addi	r20,r20,-1023
100055ac:	80a0b03a 	or	r16,r16,r2
100055b0:	000b883a 	mov	r5,zero
100055b4:	0039883a 	mov	fp,zero
100055b8:	3806d53a 	srli	r3,r7,20
100055bc:	382cd7fa 	srli	r22,r7,31
100055c0:	00800434 	movhi	r2,16
100055c4:	10bfffc4 	addi	r2,r2,-1
100055c8:	18c1ffcc 	andi	r3,r3,2047
100055cc:	3025883a 	mov	r18,r6
100055d0:	38a2703a 	and	r17,r7,r2
100055d4:	b2803fcc 	andi	r10,r22,255
100055d8:	18006426 	beq	r3,zero,1000576c <__muldf3+0x234>
100055dc:	0081ffc4 	movi	r2,2047
100055e0:	18805c26 	beq	r3,r2,10005754 <__muldf3+0x21c>
100055e4:	8c400434 	orhi	r17,r17,16
100055e8:	3004d77a 	srli	r2,r6,29
100055ec:	882290fa 	slli	r17,r17,3
100055f0:	302490fa 	slli	r18,r6,3
100055f4:	18ff0044 	addi	r3,r3,-1023
100055f8:	88a2b03a 	or	r17,r17,r2
100055fc:	000f883a 	mov	r7,zero
10005600:	394ab03a 	or	r5,r7,r5
10005604:	280a90ba 	slli	r5,r5,2
10005608:	00840034 	movhi	r2,4096
1000560c:	10958a04 	addi	r2,r2,22056
10005610:	288b883a 	add	r5,r5,r2
10005614:	28800017 	ldw	r2,0(r5)
10005618:	a0c7883a 	add	r3,r20,r3
1000561c:	b54cf03a 	xor	r6,r22,r21
10005620:	1a000044 	addi	r8,r3,1
10005624:	1000683a 	jmp	r2
10005628:	1000586c 	andhi	zero,r2,353
1000562c:	10005858 	cmpnei	zero,r2,353
10005630:	10005858 	cmpnei	zero,r2,353
10005634:	10005844 	addi	zero,r2,353
10005638:	10005684 	addi	zero,r2,346
1000563c:	10005684 	addi	zero,r2,346
10005640:	1000582c 	andhi	zero,r2,352
10005644:	10005844 	addi	zero,r2,353
10005648:	10005684 	addi	zero,r2,346
1000564c:	1000582c 	andhi	zero,r2,352
10005650:	10005684 	addi	zero,r2,346
10005654:	10005844 	addi	zero,r2,353
10005658:	10005688 	cmpgei	zero,r2,346
1000565c:	10005688 	cmpgei	zero,r2,346
10005660:	10005688 	cmpgei	zero,r2,346
10005664:	10005ba8 	cmpgeui	zero,r2,366
10005668:	8104b03a 	or	r2,r16,r4
1000566c:	10006c1e 	bne	r2,zero,10005820 <__muldf3+0x2e8>
10005670:	01400204 	movi	r5,8
10005674:	0021883a 	mov	r16,zero
10005678:	002f883a 	mov	r23,zero
1000567c:	07000084 	movi	fp,2
10005680:	003fcd06 	br	100055b8 <__alt_data_end+0xf80055b8>
10005684:	3013883a 	mov	r9,r6
10005688:	00800084 	movi	r2,2
1000568c:	e080501e 	bne	fp,r2,100057d0 <__muldf3+0x298>
10005690:	4cc0004c 	andi	r19,r9,1
10005694:	0101ffc4 	movi	r4,2047
10005698:	0021883a 	mov	r16,zero
1000569c:	002f883a 	mov	r23,zero
100056a0:	2008953a 	slli	r4,r4,20
100056a4:	98c03fcc 	andi	r3,r19,255
100056a8:	04400434 	movhi	r17,16
100056ac:	8c7fffc4 	addi	r17,r17,-1
100056b0:	180697fa 	slli	r3,r3,31
100056b4:	8460703a 	and	r16,r16,r17
100056b8:	8120b03a 	or	r16,r16,r4
100056bc:	80c6b03a 	or	r3,r16,r3
100056c0:	b805883a 	mov	r2,r23
100056c4:	dfc01117 	ldw	ra,68(sp)
100056c8:	df001017 	ldw	fp,64(sp)
100056cc:	ddc00f17 	ldw	r23,60(sp)
100056d0:	dd800e17 	ldw	r22,56(sp)
100056d4:	dd400d17 	ldw	r21,52(sp)
100056d8:	dd000c17 	ldw	r20,48(sp)
100056dc:	dcc00b17 	ldw	r19,44(sp)
100056e0:	dc800a17 	ldw	r18,40(sp)
100056e4:	dc400917 	ldw	r17,36(sp)
100056e8:	dc000817 	ldw	r16,32(sp)
100056ec:	dec01204 	addi	sp,sp,72
100056f0:	f800283a 	ret
100056f4:	8104b03a 	or	r2,r16,r4
100056f8:	10004426 	beq	r2,zero,1000580c <__muldf3+0x2d4>
100056fc:	80014b26 	beq	r16,zero,10005c2c <__muldf3+0x6f4>
10005700:	8009883a 	mov	r4,r16
10005704:	d9800715 	stw	r6,28(sp)
10005708:	d9c00215 	stw	r7,8(sp)
1000570c:	da400415 	stw	r9,16(sp)
10005710:	00068700 	call	10006870 <__clzsi2>
10005714:	d9800717 	ldw	r6,28(sp)
10005718:	d9c00217 	ldw	r7,8(sp)
1000571c:	da400417 	ldw	r9,16(sp)
10005720:	1007883a 	mov	r3,r2
10005724:	01000a04 	movi	r4,40
10005728:	1dfffe04 	addi	r23,r3,-8
1000572c:	20c9c83a 	sub	r4,r4,r3
10005730:	85e0983a 	sll	r16,r16,r23
10005734:	9108d83a 	srl	r4,r18,r4
10005738:	95ee983a 	sll	r23,r18,r23
1000573c:	2420b03a 	or	r16,r4,r16
10005740:	053f0344 	movi	r20,-1011
10005744:	a0e9c83a 	sub	r20,r20,r3
10005748:	000b883a 	mov	r5,zero
1000574c:	0039883a 	mov	fp,zero
10005750:	003f9906 	br	100055b8 <__alt_data_end+0xf80055b8>
10005754:	8984b03a 	or	r2,r17,r6
10005758:	10002a1e 	bne	r2,zero,10005804 <__muldf3+0x2cc>
1000575c:	0023883a 	mov	r17,zero
10005760:	0025883a 	mov	r18,zero
10005764:	01c00084 	movi	r7,2
10005768:	003fa506 	br	10005600 <__alt_data_end+0xf8005600>
1000576c:	8984b03a 	or	r2,r17,r6
10005770:	10002026 	beq	r2,zero,100057f4 <__muldf3+0x2bc>
10005774:	88011c26 	beq	r17,zero,10005be8 <__muldf3+0x6b0>
10005778:	8809883a 	mov	r4,r17
1000577c:	d9400215 	stw	r5,8(sp)
10005780:	d9800715 	stw	r6,28(sp)
10005784:	da400415 	stw	r9,16(sp)
10005788:	da800315 	stw	r10,12(sp)
1000578c:	00068700 	call	10006870 <__clzsi2>
10005790:	d9400217 	ldw	r5,8(sp)
10005794:	d9800717 	ldw	r6,28(sp)
10005798:	da400417 	ldw	r9,16(sp)
1000579c:	da800317 	ldw	r10,12(sp)
100057a0:	1007883a 	mov	r3,r2
100057a4:	01000a04 	movi	r4,40
100057a8:	1cbffe04 	addi	r18,r3,-8
100057ac:	20c9c83a 	sub	r4,r4,r3
100057b0:	8ca2983a 	sll	r17,r17,r18
100057b4:	3108d83a 	srl	r4,r6,r4
100057b8:	34a4983a 	sll	r18,r6,r18
100057bc:	2462b03a 	or	r17,r4,r17
100057c0:	00bf0344 	movi	r2,-1011
100057c4:	10c7c83a 	sub	r3,r2,r3
100057c8:	000f883a 	mov	r7,zero
100057cc:	003f8c06 	br	10005600 <__alt_data_end+0xf8005600>
100057d0:	008000c4 	movi	r2,3
100057d4:	e0816d26 	beq	fp,r2,10005d8c <__muldf3+0x854>
100057d8:	00800044 	movi	r2,1
100057dc:	e081321e 	bne	fp,r2,10005ca8 <__muldf3+0x770>
100057e0:	48a6703a 	and	r19,r9,r2
100057e4:	0009883a 	mov	r4,zero
100057e8:	0021883a 	mov	r16,zero
100057ec:	002f883a 	mov	r23,zero
100057f0:	003fab06 	br	100056a0 <__alt_data_end+0xf80056a0>
100057f4:	0023883a 	mov	r17,zero
100057f8:	0025883a 	mov	r18,zero
100057fc:	01c00044 	movi	r7,1
10005800:	003f7f06 	br	10005600 <__alt_data_end+0xf8005600>
10005804:	01c000c4 	movi	r7,3
10005808:	003f7d06 	br	10005600 <__alt_data_end+0xf8005600>
1000580c:	01400104 	movi	r5,4
10005810:	0021883a 	mov	r16,zero
10005814:	002f883a 	mov	r23,zero
10005818:	07000044 	movi	fp,1
1000581c:	003f6606 	br	100055b8 <__alt_data_end+0xf80055b8>
10005820:	01400304 	movi	r5,12
10005824:	070000c4 	movi	fp,3
10005828:	003f6306 	br	100055b8 <__alt_data_end+0xf80055b8>
1000582c:	04000434 	movhi	r16,16
10005830:	0027883a 	mov	r19,zero
10005834:	843fffc4 	addi	r16,r16,-1
10005838:	05ffffc4 	movi	r23,-1
1000583c:	0101ffc4 	movi	r4,2047
10005840:	003f9706 	br	100056a0 <__alt_data_end+0xf80056a0>
10005844:	8821883a 	mov	r16,r17
10005848:	902f883a 	mov	r23,r18
1000584c:	5013883a 	mov	r9,r10
10005850:	3839883a 	mov	fp,r7
10005854:	003f8c06 	br	10005688 <__alt_data_end+0xf8005688>
10005858:	8821883a 	mov	r16,r17
1000585c:	902f883a 	mov	r23,r18
10005860:	3013883a 	mov	r9,r6
10005864:	3839883a 	mov	fp,r7
10005868:	003f8706 	br	10005688 <__alt_data_end+0xf8005688>
1000586c:	b82ad43a 	srli	r21,r23,16
10005870:	9038d43a 	srli	fp,r18,16
10005874:	bdffffcc 	andi	r23,r23,65535
10005878:	94bfffcc 	andi	r18,r18,65535
1000587c:	9009883a 	mov	r4,r18
10005880:	b80b883a 	mov	r5,r23
10005884:	d8c00515 	stw	r3,20(sp)
10005888:	d9800715 	stw	r6,28(sp)
1000588c:	da000615 	stw	r8,24(sp)
10005890:	00040b00 	call	100040b0 <__mulsi3>
10005894:	9009883a 	mov	r4,r18
10005898:	a80b883a 	mov	r5,r21
1000589c:	1029883a 	mov	r20,r2
100058a0:	00040b00 	call	100040b0 <__mulsi3>
100058a4:	e009883a 	mov	r4,fp
100058a8:	a80b883a 	mov	r5,r21
100058ac:	102d883a 	mov	r22,r2
100058b0:	00040b00 	call	100040b0 <__mulsi3>
100058b4:	e009883a 	mov	r4,fp
100058b8:	b80b883a 	mov	r5,r23
100058bc:	1027883a 	mov	r19,r2
100058c0:	00040b00 	call	100040b0 <__mulsi3>
100058c4:	a008d43a 	srli	r4,r20,16
100058c8:	b085883a 	add	r2,r22,r2
100058cc:	d8c00517 	ldw	r3,20(sp)
100058d0:	110f883a 	add	r7,r2,r4
100058d4:	d9800717 	ldw	r6,28(sp)
100058d8:	da000617 	ldw	r8,24(sp)
100058dc:	3d80022e 	bgeu	r7,r22,100058e8 <__muldf3+0x3b0>
100058e0:	00800074 	movhi	r2,1
100058e4:	98a7883a 	add	r19,r19,r2
100058e8:	3804943a 	slli	r2,r7,16
100058ec:	380ed43a 	srli	r7,r7,16
100058f0:	882cd43a 	srli	r22,r17,16
100058f4:	a53fffcc 	andi	r20,r20,65535
100058f8:	8c7fffcc 	andi	r17,r17,65535
100058fc:	1529883a 	add	r20,r2,r20
10005900:	8809883a 	mov	r4,r17
10005904:	b80b883a 	mov	r5,r23
10005908:	d8c00515 	stw	r3,20(sp)
1000590c:	d9800715 	stw	r6,28(sp)
10005910:	da000615 	stw	r8,24(sp)
10005914:	d9c00015 	stw	r7,0(sp)
10005918:	dd000115 	stw	r20,4(sp)
1000591c:	00040b00 	call	100040b0 <__mulsi3>
10005920:	a80b883a 	mov	r5,r21
10005924:	8809883a 	mov	r4,r17
10005928:	d8800415 	stw	r2,16(sp)
1000592c:	00040b00 	call	100040b0 <__mulsi3>
10005930:	a80b883a 	mov	r5,r21
10005934:	b009883a 	mov	r4,r22
10005938:	1029883a 	mov	r20,r2
1000593c:	00040b00 	call	100040b0 <__mulsi3>
10005940:	b009883a 	mov	r4,r22
10005944:	b80b883a 	mov	r5,r23
10005948:	102b883a 	mov	r21,r2
1000594c:	00040b00 	call	100040b0 <__mulsi3>
10005950:	da400417 	ldw	r9,16(sp)
10005954:	a085883a 	add	r2,r20,r2
10005958:	d8c00517 	ldw	r3,20(sp)
1000595c:	4808d43a 	srli	r4,r9,16
10005960:	d9800717 	ldw	r6,28(sp)
10005964:	da000617 	ldw	r8,24(sp)
10005968:	1109883a 	add	r4,r2,r4
1000596c:	2500022e 	bgeu	r4,r20,10005978 <__muldf3+0x440>
10005970:	00800074 	movhi	r2,1
10005974:	a8ab883a 	add	r21,r21,r2
10005978:	200e943a 	slli	r7,r4,16
1000597c:	2004d43a 	srli	r2,r4,16
10005980:	802ed43a 	srli	r23,r16,16
10005984:	843fffcc 	andi	r16,r16,65535
10005988:	4d3fffcc 	andi	r20,r9,65535
1000598c:	9009883a 	mov	r4,r18
10005990:	800b883a 	mov	r5,r16
10005994:	3d29883a 	add	r20,r7,r20
10005998:	d8c00515 	stw	r3,20(sp)
1000599c:	d9800715 	stw	r6,28(sp)
100059a0:	da000615 	stw	r8,24(sp)
100059a4:	a8ab883a 	add	r21,r21,r2
100059a8:	00040b00 	call	100040b0 <__mulsi3>
100059ac:	9009883a 	mov	r4,r18
100059b0:	b80b883a 	mov	r5,r23
100059b4:	d8800315 	stw	r2,12(sp)
100059b8:	00040b00 	call	100040b0 <__mulsi3>
100059bc:	e009883a 	mov	r4,fp
100059c0:	b80b883a 	mov	r5,r23
100059c4:	1025883a 	mov	r18,r2
100059c8:	00040b00 	call	100040b0 <__mulsi3>
100059cc:	e009883a 	mov	r4,fp
100059d0:	800b883a 	mov	r5,r16
100059d4:	d8800215 	stw	r2,8(sp)
100059d8:	00040b00 	call	100040b0 <__mulsi3>
100059dc:	da800317 	ldw	r10,12(sp)
100059e0:	d9400017 	ldw	r5,0(sp)
100059e4:	9085883a 	add	r2,r18,r2
100059e8:	5008d43a 	srli	r4,r10,16
100059ec:	a153883a 	add	r9,r20,r5
100059f0:	d8c00517 	ldw	r3,20(sp)
100059f4:	1109883a 	add	r4,r2,r4
100059f8:	d9800717 	ldw	r6,28(sp)
100059fc:	da000617 	ldw	r8,24(sp)
10005a00:	dac00217 	ldw	r11,8(sp)
10005a04:	2480022e 	bgeu	r4,r18,10005a10 <__muldf3+0x4d8>
10005a08:	00800074 	movhi	r2,1
10005a0c:	5897883a 	add	r11,r11,r2
10005a10:	200e943a 	slli	r7,r4,16
10005a14:	2038d43a 	srli	fp,r4,16
10005a18:	52bfffcc 	andi	r10,r10,65535
10005a1c:	3a8f883a 	add	r7,r7,r10
10005a20:	8809883a 	mov	r4,r17
10005a24:	800b883a 	mov	r5,r16
10005a28:	d8c00515 	stw	r3,20(sp)
10005a2c:	d9800715 	stw	r6,28(sp)
10005a30:	d9c00215 	stw	r7,8(sp)
10005a34:	da000615 	stw	r8,24(sp)
10005a38:	da400415 	stw	r9,16(sp)
10005a3c:	5f39883a 	add	fp,r11,fp
10005a40:	00040b00 	call	100040b0 <__mulsi3>
10005a44:	8809883a 	mov	r4,r17
10005a48:	b80b883a 	mov	r5,r23
10005a4c:	1025883a 	mov	r18,r2
10005a50:	00040b00 	call	100040b0 <__mulsi3>
10005a54:	b009883a 	mov	r4,r22
10005a58:	b80b883a 	mov	r5,r23
10005a5c:	d8800315 	stw	r2,12(sp)
10005a60:	00040b00 	call	100040b0 <__mulsi3>
10005a64:	b009883a 	mov	r4,r22
10005a68:	800b883a 	mov	r5,r16
10005a6c:	1023883a 	mov	r17,r2
10005a70:	00040b00 	call	100040b0 <__mulsi3>
10005a74:	da800317 	ldw	r10,12(sp)
10005a78:	9008d43a 	srli	r4,r18,16
10005a7c:	d8c00517 	ldw	r3,20(sp)
10005a80:	5085883a 	add	r2,r10,r2
10005a84:	1109883a 	add	r4,r2,r4
10005a88:	d9800717 	ldw	r6,28(sp)
10005a8c:	d9c00217 	ldw	r7,8(sp)
10005a90:	da000617 	ldw	r8,24(sp)
10005a94:	da400417 	ldw	r9,16(sp)
10005a98:	2280022e 	bgeu	r4,r10,10005aa4 <__muldf3+0x56c>
10005a9c:	00800074 	movhi	r2,1
10005aa0:	88a3883a 	add	r17,r17,r2
10005aa4:	2004943a 	slli	r2,r4,16
10005aa8:	94bfffcc 	andi	r18,r18,65535
10005aac:	4ce7883a 	add	r19,r9,r19
10005ab0:	14a5883a 	add	r18,r2,r18
10005ab4:	9d29803a 	cmpltu	r20,r19,r20
10005ab8:	9565883a 	add	r18,r18,r21
10005abc:	9505883a 	add	r2,r18,r20
10005ac0:	99e7883a 	add	r19,r19,r7
10005ac4:	99cf803a 	cmpltu	r7,r19,r7
10005ac8:	e08b883a 	add	r5,fp,r2
10005acc:	2008d43a 	srli	r4,r4,16
10005ad0:	29ef883a 	add	r23,r5,r7
10005ad4:	1529803a 	cmpltu	r20,r2,r20
10005ad8:	956b803a 	cmpltu	r21,r18,r21
10005adc:	b9cf803a 	cmpltu	r7,r23,r7
10005ae0:	a564b03a 	or	r18,r20,r21
10005ae4:	2f39803a 	cmpltu	fp,r5,fp
10005ae8:	9125883a 	add	r18,r18,r4
10005aec:	3f38b03a 	or	fp,r7,fp
10005af0:	9725883a 	add	r18,r18,fp
10005af4:	9804927a 	slli	r2,r19,9
10005af8:	9463883a 	add	r17,r18,r17
10005afc:	d9000117 	ldw	r4,4(sp)
10005b00:	b820d5fa 	srli	r16,r23,23
10005b04:	8822927a 	slli	r17,r17,9
10005b08:	9826d5fa 	srli	r19,r19,23
10005b0c:	1104b03a 	or	r2,r2,r4
10005b10:	b82e927a 	slli	r23,r23,9
10005b14:	1004c03a 	cmpne	r2,r2,zero
10005b18:	8c20b03a 	or	r16,r17,r16
10005b1c:	14e6b03a 	or	r19,r2,r19
10005b20:	8080402c 	andhi	r2,r16,256
10005b24:	9deeb03a 	or	r23,r19,r23
10005b28:	10000726 	beq	r2,zero,10005b48 <__muldf3+0x610>
10005b2c:	b804d07a 	srli	r2,r23,1
10005b30:	800697fa 	slli	r3,r16,31
10005b34:	bdc0004c 	andi	r23,r23,1
10005b38:	8020d07a 	srli	r16,r16,1
10005b3c:	b8aeb03a 	or	r23,r23,r2
10005b40:	b8eeb03a 	or	r23,r23,r3
10005b44:	4007883a 	mov	r3,r8
10005b48:	1900ffc4 	addi	r4,r3,1023
10005b4c:	01004d0e 	bge	zero,r4,10005c84 <__muldf3+0x74c>
10005b50:	b88001cc 	andi	r2,r23,7
10005b54:	10000726 	beq	r2,zero,10005b74 <__muldf3+0x63c>
10005b58:	b94003cc 	andi	r5,r23,15
10005b5c:	00800104 	movi	r2,4
10005b60:	28800426 	beq	r5,r2,10005b74 <__muldf3+0x63c>
10005b64:	b885883a 	add	r2,r23,r2
10005b68:	15ef803a 	cmpltu	r23,r2,r23
10005b6c:	85e1883a 	add	r16,r16,r23
10005b70:	102f883a 	mov	r23,r2
10005b74:	8080402c 	andhi	r2,r16,256
10005b78:	10000426 	beq	r2,zero,10005b8c <__muldf3+0x654>
10005b7c:	00bfc034 	movhi	r2,65280
10005b80:	10bfffc4 	addi	r2,r2,-1
10005b84:	19010004 	addi	r4,r3,1024
10005b88:	80a0703a 	and	r16,r16,r2
10005b8c:	0081ff84 	movi	r2,2046
10005b90:	1100340e 	bge	r2,r4,10005c64 <__muldf3+0x72c>
10005b94:	34c0004c 	andi	r19,r6,1
10005b98:	0101ffc4 	movi	r4,2047
10005b9c:	0021883a 	mov	r16,zero
10005ba0:	002f883a 	mov	r23,zero
10005ba4:	003ebe06 	br	100056a0 <__alt_data_end+0xf80056a0>
10005ba8:	8080022c 	andhi	r2,r16,8
10005bac:	10000926 	beq	r2,zero,10005bd4 <__muldf3+0x69c>
10005bb0:	8880022c 	andhi	r2,r17,8
10005bb4:	1000071e 	bne	r2,zero,10005bd4 <__muldf3+0x69c>
10005bb8:	00800434 	movhi	r2,16
10005bbc:	8c000234 	orhi	r16,r17,8
10005bc0:	10bfffc4 	addi	r2,r2,-1
10005bc4:	b027883a 	mov	r19,r22
10005bc8:	80a0703a 	and	r16,r16,r2
10005bcc:	902f883a 	mov	r23,r18
10005bd0:	003f1a06 	br	1000583c <__alt_data_end+0xf800583c>
10005bd4:	00800434 	movhi	r2,16
10005bd8:	84000234 	orhi	r16,r16,8
10005bdc:	10bfffc4 	addi	r2,r2,-1
10005be0:	80a0703a 	and	r16,r16,r2
10005be4:	003f1506 	br	1000583c <__alt_data_end+0xf800583c>
10005be8:	3009883a 	mov	r4,r6
10005bec:	d9400215 	stw	r5,8(sp)
10005bf0:	d9800715 	stw	r6,28(sp)
10005bf4:	da400415 	stw	r9,16(sp)
10005bf8:	da800315 	stw	r10,12(sp)
10005bfc:	00068700 	call	10006870 <__clzsi2>
10005c00:	10c00804 	addi	r3,r2,32
10005c04:	010009c4 	movi	r4,39
10005c08:	d9400217 	ldw	r5,8(sp)
10005c0c:	d9800717 	ldw	r6,28(sp)
10005c10:	da400417 	ldw	r9,16(sp)
10005c14:	da800317 	ldw	r10,12(sp)
10005c18:	20fee20e 	bge	r4,r3,100057a4 <__alt_data_end+0xf80057a4>
10005c1c:	147ffe04 	addi	r17,r2,-8
10005c20:	9462983a 	sll	r17,r18,r17
10005c24:	0025883a 	mov	r18,zero
10005c28:	003ee506 	br	100057c0 <__alt_data_end+0xf80057c0>
10005c2c:	d9800715 	stw	r6,28(sp)
10005c30:	d9c00215 	stw	r7,8(sp)
10005c34:	da400415 	stw	r9,16(sp)
10005c38:	00068700 	call	10006870 <__clzsi2>
10005c3c:	10c00804 	addi	r3,r2,32
10005c40:	010009c4 	movi	r4,39
10005c44:	d9800717 	ldw	r6,28(sp)
10005c48:	d9c00217 	ldw	r7,8(sp)
10005c4c:	da400417 	ldw	r9,16(sp)
10005c50:	20feb40e 	bge	r4,r3,10005724 <__alt_data_end+0xf8005724>
10005c54:	143ffe04 	addi	r16,r2,-8
10005c58:	9420983a 	sll	r16,r18,r16
10005c5c:	002f883a 	mov	r23,zero
10005c60:	003eb706 	br	10005740 <__alt_data_end+0xf8005740>
10005c64:	8004977a 	slli	r2,r16,29
10005c68:	b82ed0fa 	srli	r23,r23,3
10005c6c:	8020927a 	slli	r16,r16,9
10005c70:	2101ffcc 	andi	r4,r4,2047
10005c74:	15eeb03a 	or	r23,r2,r23
10005c78:	8020d33a 	srli	r16,r16,12
10005c7c:	34c0004c 	andi	r19,r6,1
10005c80:	003e8706 	br	100056a0 <__alt_data_end+0xf80056a0>
10005c84:	00bf0084 	movi	r2,-1022
10005c88:	10c5c83a 	sub	r2,r2,r3
10005c8c:	01000e04 	movi	r4,56
10005c90:	2080080e 	bge	r4,r2,10005cb4 <__muldf3+0x77c>
10005c94:	34c0004c 	andi	r19,r6,1
10005c98:	0009883a 	mov	r4,zero
10005c9c:	0021883a 	mov	r16,zero
10005ca0:	002f883a 	mov	r23,zero
10005ca4:	003e7e06 	br	100056a0 <__alt_data_end+0xf80056a0>
10005ca8:	4007883a 	mov	r3,r8
10005cac:	480d883a 	mov	r6,r9
10005cb0:	003fa506 	br	10005b48 <__alt_data_end+0xf8005b48>
10005cb4:	010007c4 	movi	r4,31
10005cb8:	20801816 	blt	r4,r2,10005d1c <__muldf3+0x7e4>
10005cbc:	18c10784 	addi	r3,r3,1054
10005cc0:	80c8983a 	sll	r4,r16,r3
10005cc4:	b88ad83a 	srl	r5,r23,r2
10005cc8:	b8c6983a 	sll	r3,r23,r3
10005ccc:	80a0d83a 	srl	r16,r16,r2
10005cd0:	2908b03a 	or	r4,r5,r4
10005cd4:	1804c03a 	cmpne	r2,r3,zero
10005cd8:	2088b03a 	or	r4,r4,r2
10005cdc:	208001cc 	andi	r2,r4,7
10005ce0:	10000726 	beq	r2,zero,10005d00 <__muldf3+0x7c8>
10005ce4:	20c003cc 	andi	r3,r4,15
10005ce8:	00800104 	movi	r2,4
10005cec:	18800426 	beq	r3,r2,10005d00 <__muldf3+0x7c8>
10005cf0:	20c00104 	addi	r3,r4,4
10005cf4:	1905803a 	cmpltu	r2,r3,r4
10005cf8:	80a1883a 	add	r16,r16,r2
10005cfc:	1809883a 	mov	r4,r3
10005d00:	8080202c 	andhi	r2,r16,128
10005d04:	10001b26 	beq	r2,zero,10005d74 <__muldf3+0x83c>
10005d08:	34c0004c 	andi	r19,r6,1
10005d0c:	01000044 	movi	r4,1
10005d10:	0021883a 	mov	r16,zero
10005d14:	002f883a 	mov	r23,zero
10005d18:	003e6106 	br	100056a0 <__alt_data_end+0xf80056a0>
10005d1c:	013ef884 	movi	r4,-1054
10005d20:	20c9c83a 	sub	r4,r4,r3
10005d24:	01400804 	movi	r5,32
10005d28:	8108d83a 	srl	r4,r16,r4
10005d2c:	11401526 	beq	r2,r5,10005d84 <__muldf3+0x84c>
10005d30:	18c10f84 	addi	r3,r3,1086
10005d34:	80e0983a 	sll	r16,r16,r3
10005d38:	85eeb03a 	or	r23,r16,r23
10005d3c:	b804c03a 	cmpne	r2,r23,zero
10005d40:	1108b03a 	or	r4,r2,r4
10005d44:	20c001cc 	andi	r3,r4,7
10005d48:	1800061e 	bne	r3,zero,10005d64 <__muldf3+0x82c>
10005d4c:	0021883a 	mov	r16,zero
10005d50:	202ed0fa 	srli	r23,r4,3
10005d54:	34c0004c 	andi	r19,r6,1
10005d58:	0009883a 	mov	r4,zero
10005d5c:	b8eeb03a 	or	r23,r23,r3
10005d60:	003e4f06 	br	100056a0 <__alt_data_end+0xf80056a0>
10005d64:	20c003cc 	andi	r3,r4,15
10005d68:	00800104 	movi	r2,4
10005d6c:	0021883a 	mov	r16,zero
10005d70:	18bfdf1e 	bne	r3,r2,10005cf0 <__alt_data_end+0xf8005cf0>
10005d74:	8004927a 	slli	r2,r16,9
10005d78:	8006977a 	slli	r3,r16,29
10005d7c:	1020d33a 	srli	r16,r2,12
10005d80:	003ff306 	br	10005d50 <__alt_data_end+0xf8005d50>
10005d84:	0021883a 	mov	r16,zero
10005d88:	003feb06 	br	10005d38 <__alt_data_end+0xf8005d38>
10005d8c:	00800434 	movhi	r2,16
10005d90:	84000234 	orhi	r16,r16,8
10005d94:	10bfffc4 	addi	r2,r2,-1
10005d98:	4cc0004c 	andi	r19,r9,1
10005d9c:	80a0703a 	and	r16,r16,r2
10005da0:	003ea606 	br	1000583c <__alt_data_end+0xf800583c>

10005da4 <__subdf3>:
10005da4:	00c00434 	movhi	r3,16
10005da8:	18ffffc4 	addi	r3,r3,-1
10005dac:	defffb04 	addi	sp,sp,-20
10005db0:	28d2703a 	and	r9,r5,r3
10005db4:	3814d53a 	srli	r10,r7,20
10005db8:	38c6703a 	and	r3,r7,r3
10005dbc:	3004d77a 	srli	r2,r6,29
10005dc0:	dc800215 	stw	r18,8(sp)
10005dc4:	dc000015 	stw	r16,0(sp)
10005dc8:	2824d7fa 	srli	r18,r5,31
10005dcc:	2820d53a 	srli	r16,r5,20
10005dd0:	481290fa 	slli	r9,r9,3
10005dd4:	200ad77a 	srli	r5,r4,29
10005dd8:	180690fa 	slli	r3,r3,3
10005ddc:	dc400115 	stw	r17,4(sp)
10005de0:	dfc00415 	stw	ra,16(sp)
10005de4:	202290fa 	slli	r17,r4,3
10005de8:	dcc00315 	stw	r19,12(sp)
10005dec:	5281ffcc 	andi	r10,r10,2047
10005df0:	0101ffc4 	movi	r4,2047
10005df4:	9011883a 	mov	r8,r18
10005df8:	8401ffcc 	andi	r16,r16,2047
10005dfc:	94803fcc 	andi	r18,r18,255
10005e00:	494ab03a 	or	r5,r9,r5
10005e04:	380ed7fa 	srli	r7,r7,31
10005e08:	1886b03a 	or	r3,r3,r2
10005e0c:	300c90fa 	slli	r6,r6,3
10005e10:	51009026 	beq	r10,r4,10006054 <__subdf3+0x2b0>
10005e14:	39c0005c 	xori	r7,r7,1
10005e18:	8285c83a 	sub	r2,r16,r10
10005e1c:	91c06f26 	beq	r18,r7,10005fdc <__subdf3+0x238>
10005e20:	0080b10e 	bge	zero,r2,100060e8 <__subdf3+0x344>
10005e24:	50002a1e 	bne	r10,zero,10005ed0 <__subdf3+0x12c>
10005e28:	1988b03a 	or	r4,r3,r6
10005e2c:	2000941e 	bne	r4,zero,10006080 <__subdf3+0x2dc>
10005e30:	888001cc 	andi	r2,r17,7
10005e34:	10005b26 	beq	r2,zero,10005fa4 <__subdf3+0x200>
10005e38:	88c003cc 	andi	r3,r17,15
10005e3c:	00800104 	movi	r2,4
10005e40:	18805826 	beq	r3,r2,10005fa4 <__subdf3+0x200>
10005e44:	88c00104 	addi	r3,r17,4
10005e48:	1c63803a 	cmpltu	r17,r3,r17
10005e4c:	2c4b883a 	add	r5,r5,r17
10005e50:	2880202c 	andhi	r2,r5,128
10005e54:	9200004c 	andi	r8,r18,1
10005e58:	1823883a 	mov	r17,r3
10005e5c:	10005426 	beq	r2,zero,10005fb0 <__subdf3+0x20c>
10005e60:	84000044 	addi	r16,r16,1
10005e64:	0081ffc4 	movi	r2,2047
10005e68:	8080bf26 	beq	r16,r2,10006168 <__subdf3+0x3c4>
10005e6c:	013fe034 	movhi	r4,65408
10005e70:	213fffc4 	addi	r4,r4,-1
10005e74:	290a703a 	and	r5,r5,r4
10005e78:	2804977a 	slli	r2,r5,29
10005e7c:	280a927a 	slli	r5,r5,9
10005e80:	8822d0fa 	srli	r17,r17,3
10005e84:	8401ffcc 	andi	r16,r16,2047
10005e88:	2808d33a 	srli	r4,r5,12
10005e8c:	1444b03a 	or	r2,r2,r17
10005e90:	8401ffcc 	andi	r16,r16,2047
10005e94:	800a953a 	slli	r5,r16,20
10005e98:	40c03fcc 	andi	r3,r8,255
10005e9c:	04000434 	movhi	r16,16
10005ea0:	180697fa 	slli	r3,r3,31
10005ea4:	843fffc4 	addi	r16,r16,-1
10005ea8:	2420703a 	and	r16,r4,r16
10005eac:	8160b03a 	or	r16,r16,r5
10005eb0:	80c6b03a 	or	r3,r16,r3
10005eb4:	dfc00417 	ldw	ra,16(sp)
10005eb8:	dcc00317 	ldw	r19,12(sp)
10005ebc:	dc800217 	ldw	r18,8(sp)
10005ec0:	dc400117 	ldw	r17,4(sp)
10005ec4:	dc000017 	ldw	r16,0(sp)
10005ec8:	dec00504 	addi	sp,sp,20
10005ecc:	f800283a 	ret
10005ed0:	0101ffc4 	movi	r4,2047
10005ed4:	813fd626 	beq	r16,r4,10005e30 <__alt_data_end+0xf8005e30>
10005ed8:	18c02034 	orhi	r3,r3,128
10005edc:	01000e04 	movi	r4,56
10005ee0:	2080a416 	blt	r4,r2,10006174 <__subdf3+0x3d0>
10005ee4:	010007c4 	movi	r4,31
10005ee8:	2080c716 	blt	r4,r2,10006208 <__subdf3+0x464>
10005eec:	01000804 	movi	r4,32
10005ef0:	2089c83a 	sub	r4,r4,r2
10005ef4:	1910983a 	sll	r8,r3,r4
10005ef8:	308ed83a 	srl	r7,r6,r2
10005efc:	3108983a 	sll	r4,r6,r4
10005f00:	1884d83a 	srl	r2,r3,r2
10005f04:	41ccb03a 	or	r6,r8,r7
10005f08:	2008c03a 	cmpne	r4,r4,zero
10005f0c:	310cb03a 	or	r6,r6,r4
10005f10:	898dc83a 	sub	r6,r17,r6
10005f14:	89a3803a 	cmpltu	r17,r17,r6
10005f18:	288bc83a 	sub	r5,r5,r2
10005f1c:	2c4bc83a 	sub	r5,r5,r17
10005f20:	3023883a 	mov	r17,r6
10005f24:	2880202c 	andhi	r2,r5,128
10005f28:	10006b26 	beq	r2,zero,100060d8 <__subdf3+0x334>
10005f2c:	04c02034 	movhi	r19,128
10005f30:	9cffffc4 	addi	r19,r19,-1
10005f34:	2ce6703a 	and	r19,r5,r19
10005f38:	98007c26 	beq	r19,zero,1000612c <__subdf3+0x388>
10005f3c:	9809883a 	mov	r4,r19
10005f40:	00068700 	call	10006870 <__clzsi2>
10005f44:	10fffe04 	addi	r3,r2,-8
10005f48:	010007c4 	movi	r4,31
10005f4c:	20c07d16 	blt	r4,r3,10006144 <__subdf3+0x3a0>
10005f50:	01400a04 	movi	r5,40
10005f54:	2885c83a 	sub	r2,r5,r2
10005f58:	888ad83a 	srl	r5,r17,r2
10005f5c:	98e6983a 	sll	r19,r19,r3
10005f60:	88e2983a 	sll	r17,r17,r3
10005f64:	2ce6b03a 	or	r19,r5,r19
10005f68:	1c007a16 	blt	r3,r16,10006154 <__subdf3+0x3b0>
10005f6c:	1c21c83a 	sub	r16,r3,r16
10005f70:	81400044 	addi	r5,r16,1
10005f74:	00c007c4 	movi	r3,31
10005f78:	19409616 	blt	r3,r5,100061d4 <__subdf3+0x430>
10005f7c:	1c21c83a 	sub	r16,r3,r16
10005f80:	8c08983a 	sll	r4,r17,r16
10005f84:	8946d83a 	srl	r3,r17,r5
10005f88:	9c20983a 	sll	r16,r19,r16
10005f8c:	2008c03a 	cmpne	r4,r4,zero
10005f90:	994ad83a 	srl	r5,r19,r5
10005f94:	1c06b03a 	or	r3,r3,r16
10005f98:	1922b03a 	or	r17,r3,r4
10005f9c:	0021883a 	mov	r16,zero
10005fa0:	003fa306 	br	10005e30 <__alt_data_end+0xf8005e30>
10005fa4:	2880202c 	andhi	r2,r5,128
10005fa8:	9200004c 	andi	r8,r18,1
10005fac:	103fac1e 	bne	r2,zero,10005e60 <__alt_data_end+0xf8005e60>
10005fb0:	2804977a 	slli	r2,r5,29
10005fb4:	8822d0fa 	srli	r17,r17,3
10005fb8:	00c1ffc4 	movi	r3,2047
10005fbc:	280ad0fa 	srli	r5,r5,3
10005fc0:	1444b03a 	or	r2,r2,r17
10005fc4:	80c02726 	beq	r16,r3,10006064 <__subdf3+0x2c0>
10005fc8:	01000434 	movhi	r4,16
10005fcc:	213fffc4 	addi	r4,r4,-1
10005fd0:	80e0703a 	and	r16,r16,r3
10005fd4:	2908703a 	and	r4,r5,r4
10005fd8:	003fad06 	br	10005e90 <__alt_data_end+0xf8005e90>
10005fdc:	0080690e 	bge	zero,r2,10006184 <__subdf3+0x3e0>
10005fe0:	50002f26 	beq	r10,zero,100060a0 <__subdf3+0x2fc>
10005fe4:	0101ffc4 	movi	r4,2047
10005fe8:	813f9126 	beq	r16,r4,10005e30 <__alt_data_end+0xf8005e30>
10005fec:	18c02034 	orhi	r3,r3,128
10005ff0:	01000e04 	movi	r4,56
10005ff4:	2080b00e 	bge	r4,r2,100062b8 <__subdf3+0x514>
10005ff8:	198cb03a 	or	r6,r3,r6
10005ffc:	300ec03a 	cmpne	r7,r6,zero
10006000:	0005883a 	mov	r2,zero
10006004:	3c4f883a 	add	r7,r7,r17
10006008:	3c63803a 	cmpltu	r17,r7,r17
1000600c:	114b883a 	add	r5,r2,r5
10006010:	2c4b883a 	add	r5,r5,r17
10006014:	3823883a 	mov	r17,r7
10006018:	2880202c 	andhi	r2,r5,128
1000601c:	10002e26 	beq	r2,zero,100060d8 <__subdf3+0x334>
10006020:	84000044 	addi	r16,r16,1
10006024:	0081ffc4 	movi	r2,2047
10006028:	8080de26 	beq	r16,r2,100063a4 <__subdf3+0x600>
1000602c:	00bfe034 	movhi	r2,65408
10006030:	10bfffc4 	addi	r2,r2,-1
10006034:	288a703a 	and	r5,r5,r2
10006038:	880cd07a 	srli	r6,r17,1
1000603c:	280897fa 	slli	r4,r5,31
10006040:	88c0004c 	andi	r3,r17,1
10006044:	30e2b03a 	or	r17,r6,r3
10006048:	280ad07a 	srli	r5,r5,1
1000604c:	8922b03a 	or	r17,r17,r4
10006050:	003f7706 	br	10005e30 <__alt_data_end+0xf8005e30>
10006054:	1984b03a 	or	r2,r3,r6
10006058:	103f6e26 	beq	r2,zero,10005e14 <__alt_data_end+0xf8005e14>
1000605c:	39c03fcc 	andi	r7,r7,255
10006060:	003f6d06 	br	10005e18 <__alt_data_end+0xf8005e18>
10006064:	1146b03a 	or	r3,r2,r5
10006068:	18003f26 	beq	r3,zero,10006168 <__subdf3+0x3c4>
1000606c:	00c00434 	movhi	r3,16
10006070:	29000234 	orhi	r4,r5,8
10006074:	18ffffc4 	addi	r3,r3,-1
10006078:	20c8703a 	and	r4,r4,r3
1000607c:	003f8406 	br	10005e90 <__alt_data_end+0xf8005e90>
10006080:	10bfffc4 	addi	r2,r2,-1
10006084:	1000501e 	bne	r2,zero,100061c8 <__subdf3+0x424>
10006088:	898fc83a 	sub	r7,r17,r6
1000608c:	89e3803a 	cmpltu	r17,r17,r7
10006090:	28cbc83a 	sub	r5,r5,r3
10006094:	2c4bc83a 	sub	r5,r5,r17
10006098:	3823883a 	mov	r17,r7
1000609c:	003fa106 	br	10005f24 <__alt_data_end+0xf8005f24>
100060a0:	1988b03a 	or	r4,r3,r6
100060a4:	203f6226 	beq	r4,zero,10005e30 <__alt_data_end+0xf8005e30>
100060a8:	10bfffc4 	addi	r2,r2,-1
100060ac:	10009b1e 	bne	r2,zero,1000631c <__subdf3+0x578>
100060b0:	344d883a 	add	r6,r6,r17
100060b4:	3463803a 	cmpltu	r17,r6,r17
100060b8:	194b883a 	add	r5,r3,r5
100060bc:	2c4b883a 	add	r5,r5,r17
100060c0:	3023883a 	mov	r17,r6
100060c4:	003fd406 	br	10006018 <__alt_data_end+0xf8006018>
100060c8:	1106b03a 	or	r3,r2,r4
100060cc:	1800b426 	beq	r3,zero,100063a0 <__subdf3+0x5fc>
100060d0:	100b883a 	mov	r5,r2
100060d4:	2023883a 	mov	r17,r4
100060d8:	888001cc 	andi	r2,r17,7
100060dc:	103f561e 	bne	r2,zero,10005e38 <__alt_data_end+0xf8005e38>
100060e0:	9200004c 	andi	r8,r18,1
100060e4:	003fb206 	br	10005fb0 <__alt_data_end+0xf8005fb0>
100060e8:	1000531e 	bne	r2,zero,10006238 <__subdf3+0x494>
100060ec:	80800044 	addi	r2,r16,1
100060f0:	1081ffcc 	andi	r2,r2,2047
100060f4:	01000044 	movi	r4,1
100060f8:	2080a00e 	bge	r4,r2,1000637c <__subdf3+0x5d8>
100060fc:	8985c83a 	sub	r2,r17,r6
10006100:	8889803a 	cmpltu	r4,r17,r2
10006104:	28e7c83a 	sub	r19,r5,r3
10006108:	9927c83a 	sub	r19,r19,r4
1000610c:	9900202c 	andhi	r4,r19,128
10006110:	20006226 	beq	r4,zero,1000629c <__subdf3+0x4f8>
10006114:	3463c83a 	sub	r17,r6,r17
10006118:	194bc83a 	sub	r5,r3,r5
1000611c:	344d803a 	cmpltu	r6,r6,r17
10006120:	29a7c83a 	sub	r19,r5,r6
10006124:	3825883a 	mov	r18,r7
10006128:	983f841e 	bne	r19,zero,10005f3c <__alt_data_end+0xf8005f3c>
1000612c:	8809883a 	mov	r4,r17
10006130:	00068700 	call	10006870 <__clzsi2>
10006134:	10800804 	addi	r2,r2,32
10006138:	10fffe04 	addi	r3,r2,-8
1000613c:	010007c4 	movi	r4,31
10006140:	20ff830e 	bge	r4,r3,10005f50 <__alt_data_end+0xf8005f50>
10006144:	14fff604 	addi	r19,r2,-40
10006148:	8ce6983a 	sll	r19,r17,r19
1000614c:	0023883a 	mov	r17,zero
10006150:	1c3f860e 	bge	r3,r16,10005f6c <__alt_data_end+0xf8005f6c>
10006154:	017fe034 	movhi	r5,65408
10006158:	297fffc4 	addi	r5,r5,-1
1000615c:	80e1c83a 	sub	r16,r16,r3
10006160:	994a703a 	and	r5,r19,r5
10006164:	003f3206 	br	10005e30 <__alt_data_end+0xf8005e30>
10006168:	0009883a 	mov	r4,zero
1000616c:	0005883a 	mov	r2,zero
10006170:	003f4706 	br	10005e90 <__alt_data_end+0xf8005e90>
10006174:	198cb03a 	or	r6,r3,r6
10006178:	300cc03a 	cmpne	r6,r6,zero
1000617c:	0005883a 	mov	r2,zero
10006180:	003f6306 	br	10005f10 <__alt_data_end+0xf8005f10>
10006184:	10009d1e 	bne	r2,zero,100063fc <__subdf3+0x658>
10006188:	81c00044 	addi	r7,r16,1
1000618c:	3881ffcc 	andi	r2,r7,2047
10006190:	02400044 	movi	r9,1
10006194:	4880680e 	bge	r9,r2,10006338 <__subdf3+0x594>
10006198:	0081ffc4 	movi	r2,2047
1000619c:	3880ae26 	beq	r7,r2,10006458 <__subdf3+0x6b4>
100061a0:	344d883a 	add	r6,r6,r17
100061a4:	3463803a 	cmpltu	r17,r6,r17
100061a8:	194b883a 	add	r5,r3,r5
100061ac:	2c4b883a 	add	r5,r5,r17
100061b0:	282297fa 	slli	r17,r5,31
100061b4:	300cd07a 	srli	r6,r6,1
100061b8:	280ad07a 	srli	r5,r5,1
100061bc:	3821883a 	mov	r16,r7
100061c0:	89a2b03a 	or	r17,r17,r6
100061c4:	003f1a06 	br	10005e30 <__alt_data_end+0xf8005e30>
100061c8:	0101ffc4 	movi	r4,2047
100061cc:	813f431e 	bne	r16,r4,10005edc <__alt_data_end+0xf8005edc>
100061d0:	003f1706 	br	10005e30 <__alt_data_end+0xf8005e30>
100061d4:	80bff844 	addi	r2,r16,-31
100061d8:	00c00804 	movi	r3,32
100061dc:	9884d83a 	srl	r2,r19,r2
100061e0:	28c05126 	beq	r5,r3,10006328 <__subdf3+0x584>
100061e4:	00c00fc4 	movi	r3,63
100061e8:	1c21c83a 	sub	r16,r3,r16
100061ec:	9c26983a 	sll	r19,r19,r16
100061f0:	9c62b03a 	or	r17,r19,r17
100061f4:	8822c03a 	cmpne	r17,r17,zero
100061f8:	88a2b03a 	or	r17,r17,r2
100061fc:	000b883a 	mov	r5,zero
10006200:	0021883a 	mov	r16,zero
10006204:	003fb406 	br	100060d8 <__alt_data_end+0xf80060d8>
10006208:	113ff804 	addi	r4,r2,-32
1000620c:	01c00804 	movi	r7,32
10006210:	1908d83a 	srl	r4,r3,r4
10006214:	11c04626 	beq	r2,r7,10006330 <__subdf3+0x58c>
10006218:	01c01004 	movi	r7,64
1000621c:	3885c83a 	sub	r2,r7,r2
10006220:	1884983a 	sll	r2,r3,r2
10006224:	118cb03a 	or	r6,r2,r6
10006228:	300cc03a 	cmpne	r6,r6,zero
1000622c:	310cb03a 	or	r6,r6,r4
10006230:	0005883a 	mov	r2,zero
10006234:	003f3606 	br	10005f10 <__alt_data_end+0xf8005f10>
10006238:	80002b26 	beq	r16,zero,100062e8 <__subdf3+0x544>
1000623c:	0101ffc4 	movi	r4,2047
10006240:	51006926 	beq	r10,r4,100063e8 <__subdf3+0x644>
10006244:	0085c83a 	sub	r2,zero,r2
10006248:	29402034 	orhi	r5,r5,128
1000624c:	01000e04 	movi	r4,56
10006250:	20807d16 	blt	r4,r2,10006448 <__subdf3+0x6a4>
10006254:	010007c4 	movi	r4,31
10006258:	2080d916 	blt	r4,r2,100065c0 <__subdf3+0x81c>
1000625c:	01000804 	movi	r4,32
10006260:	2089c83a 	sub	r4,r4,r2
10006264:	2912983a 	sll	r9,r5,r4
10006268:	8890d83a 	srl	r8,r17,r2
1000626c:	8908983a 	sll	r4,r17,r4
10006270:	2884d83a 	srl	r2,r5,r2
10006274:	4a22b03a 	or	r17,r9,r8
10006278:	2008c03a 	cmpne	r4,r4,zero
1000627c:	8922b03a 	or	r17,r17,r4
10006280:	3463c83a 	sub	r17,r6,r17
10006284:	1885c83a 	sub	r2,r3,r2
10006288:	344d803a 	cmpltu	r6,r6,r17
1000628c:	118bc83a 	sub	r5,r2,r6
10006290:	5021883a 	mov	r16,r10
10006294:	3825883a 	mov	r18,r7
10006298:	003f2206 	br	10005f24 <__alt_data_end+0xf8005f24>
1000629c:	9886b03a 	or	r3,r19,r2
100062a0:	18001c1e 	bne	r3,zero,10006314 <__subdf3+0x570>
100062a4:	0011883a 	mov	r8,zero
100062a8:	000b883a 	mov	r5,zero
100062ac:	0023883a 	mov	r17,zero
100062b0:	0021883a 	mov	r16,zero
100062b4:	003f3e06 	br	10005fb0 <__alt_data_end+0xf8005fb0>
100062b8:	010007c4 	movi	r4,31
100062bc:	20803c16 	blt	r4,r2,100063b0 <__subdf3+0x60c>
100062c0:	01000804 	movi	r4,32
100062c4:	2089c83a 	sub	r4,r4,r2
100062c8:	1912983a 	sll	r9,r3,r4
100062cc:	308ed83a 	srl	r7,r6,r2
100062d0:	3108983a 	sll	r4,r6,r4
100062d4:	1884d83a 	srl	r2,r3,r2
100062d8:	49ceb03a 	or	r7,r9,r7
100062dc:	2008c03a 	cmpne	r4,r4,zero
100062e0:	390eb03a 	or	r7,r7,r4
100062e4:	003f4706 	br	10006004 <__alt_data_end+0xf8006004>
100062e8:	2c48b03a 	or	r4,r5,r17
100062ec:	20003e26 	beq	r4,zero,100063e8 <__subdf3+0x644>
100062f0:	0084303a 	nor	r2,zero,r2
100062f4:	10003a1e 	bne	r2,zero,100063e0 <__subdf3+0x63c>
100062f8:	3463c83a 	sub	r17,r6,r17
100062fc:	194bc83a 	sub	r5,r3,r5
10006300:	344d803a 	cmpltu	r6,r6,r17
10006304:	298bc83a 	sub	r5,r5,r6
10006308:	5021883a 	mov	r16,r10
1000630c:	3825883a 	mov	r18,r7
10006310:	003f0406 	br	10005f24 <__alt_data_end+0xf8005f24>
10006314:	1023883a 	mov	r17,r2
10006318:	003f0706 	br	10005f38 <__alt_data_end+0xf8005f38>
1000631c:	0101ffc4 	movi	r4,2047
10006320:	813f331e 	bne	r16,r4,10005ff0 <__alt_data_end+0xf8005ff0>
10006324:	003ec206 	br	10005e30 <__alt_data_end+0xf8005e30>
10006328:	0027883a 	mov	r19,zero
1000632c:	003fb006 	br	100061f0 <__alt_data_end+0xf80061f0>
10006330:	0005883a 	mov	r2,zero
10006334:	003fbb06 	br	10006224 <__alt_data_end+0xf8006224>
10006338:	2c44b03a 	or	r2,r5,r17
1000633c:	80008b1e 	bne	r16,zero,1000656c <__subdf3+0x7c8>
10006340:	1000b526 	beq	r2,zero,10006618 <__subdf3+0x874>
10006344:	1984b03a 	or	r2,r3,r6
10006348:	103eb926 	beq	r2,zero,10005e30 <__alt_data_end+0xf8005e30>
1000634c:	3449883a 	add	r4,r6,r17
10006350:	2463803a 	cmpltu	r17,r4,r17
10006354:	194b883a 	add	r5,r3,r5
10006358:	2c4b883a 	add	r5,r5,r17
1000635c:	2880202c 	andhi	r2,r5,128
10006360:	2023883a 	mov	r17,r4
10006364:	103f5c26 	beq	r2,zero,100060d8 <__alt_data_end+0xf80060d8>
10006368:	00bfe034 	movhi	r2,65408
1000636c:	10bfffc4 	addi	r2,r2,-1
10006370:	4821883a 	mov	r16,r9
10006374:	288a703a 	and	r5,r5,r2
10006378:	003ead06 	br	10005e30 <__alt_data_end+0xf8005e30>
1000637c:	2c44b03a 	or	r2,r5,r17
10006380:	8000291e 	bne	r16,zero,10006428 <__subdf3+0x684>
10006384:	10004f1e 	bne	r2,zero,100064c4 <__subdf3+0x720>
10006388:	1984b03a 	or	r2,r3,r6
1000638c:	10000426 	beq	r2,zero,100063a0 <__subdf3+0x5fc>
10006390:	180b883a 	mov	r5,r3
10006394:	3023883a 	mov	r17,r6
10006398:	3825883a 	mov	r18,r7
1000639c:	003ea406 	br	10005e30 <__alt_data_end+0xf8005e30>
100063a0:	0011883a 	mov	r8,zero
100063a4:	000b883a 	mov	r5,zero
100063a8:	0023883a 	mov	r17,zero
100063ac:	003f0006 	br	10005fb0 <__alt_data_end+0xf8005fb0>
100063b0:	11fff804 	addi	r7,r2,-32
100063b4:	19c8d83a 	srl	r4,r3,r7
100063b8:	01c00804 	movi	r7,32
100063bc:	11c07e26 	beq	r2,r7,100065b8 <__subdf3+0x814>
100063c0:	01c01004 	movi	r7,64
100063c4:	3885c83a 	sub	r2,r7,r2
100063c8:	1884983a 	sll	r2,r3,r2
100063cc:	118cb03a 	or	r6,r2,r6
100063d0:	300ec03a 	cmpne	r7,r6,zero
100063d4:	390eb03a 	or	r7,r7,r4
100063d8:	0005883a 	mov	r2,zero
100063dc:	003f0906 	br	10006004 <__alt_data_end+0xf8006004>
100063e0:	0101ffc4 	movi	r4,2047
100063e4:	513f991e 	bne	r10,r4,1000624c <__alt_data_end+0xf800624c>
100063e8:	180b883a 	mov	r5,r3
100063ec:	3023883a 	mov	r17,r6
100063f0:	5021883a 	mov	r16,r10
100063f4:	3825883a 	mov	r18,r7
100063f8:	003e8d06 	br	10005e30 <__alt_data_end+0xf8005e30>
100063fc:	80001a1e 	bne	r16,zero,10006468 <__subdf3+0x6c4>
10006400:	2c48b03a 	or	r4,r5,r17
10006404:	20005526 	beq	r4,zero,1000655c <__subdf3+0x7b8>
10006408:	0084303a 	nor	r2,zero,r2
1000640c:	1000511e 	bne	r2,zero,10006554 <__subdf3+0x7b0>
10006410:	89a3883a 	add	r17,r17,r6
10006414:	194b883a 	add	r5,r3,r5
10006418:	898d803a 	cmpltu	r6,r17,r6
1000641c:	298b883a 	add	r5,r5,r6
10006420:	5021883a 	mov	r16,r10
10006424:	003efc06 	br	10006018 <__alt_data_end+0xf8006018>
10006428:	1000341e 	bne	r2,zero,100064fc <__subdf3+0x758>
1000642c:	1984b03a 	or	r2,r3,r6
10006430:	10006f26 	beq	r2,zero,100065f0 <__subdf3+0x84c>
10006434:	180b883a 	mov	r5,r3
10006438:	3023883a 	mov	r17,r6
1000643c:	3825883a 	mov	r18,r7
10006440:	0401ffc4 	movi	r16,2047
10006444:	003e7a06 	br	10005e30 <__alt_data_end+0xf8005e30>
10006448:	2c62b03a 	or	r17,r5,r17
1000644c:	8822c03a 	cmpne	r17,r17,zero
10006450:	0005883a 	mov	r2,zero
10006454:	003f8a06 	br	10006280 <__alt_data_end+0xf8006280>
10006458:	3821883a 	mov	r16,r7
1000645c:	000b883a 	mov	r5,zero
10006460:	0023883a 	mov	r17,zero
10006464:	003ed206 	br	10005fb0 <__alt_data_end+0xf8005fb0>
10006468:	0101ffc4 	movi	r4,2047
1000646c:	51003b26 	beq	r10,r4,1000655c <__subdf3+0x7b8>
10006470:	0085c83a 	sub	r2,zero,r2
10006474:	29402034 	orhi	r5,r5,128
10006478:	01000e04 	movi	r4,56
1000647c:	20806216 	blt	r4,r2,10006608 <__subdf3+0x864>
10006480:	010007c4 	movi	r4,31
10006484:	20806b16 	blt	r4,r2,10006634 <__subdf3+0x890>
10006488:	01000804 	movi	r4,32
1000648c:	2089c83a 	sub	r4,r4,r2
10006490:	2912983a 	sll	r9,r5,r4
10006494:	888ed83a 	srl	r7,r17,r2
10006498:	8908983a 	sll	r4,r17,r4
1000649c:	2884d83a 	srl	r2,r5,r2
100064a0:	49e2b03a 	or	r17,r9,r7
100064a4:	2008c03a 	cmpne	r4,r4,zero
100064a8:	8922b03a 	or	r17,r17,r4
100064ac:	89a3883a 	add	r17,r17,r6
100064b0:	10c5883a 	add	r2,r2,r3
100064b4:	898d803a 	cmpltu	r6,r17,r6
100064b8:	118b883a 	add	r5,r2,r6
100064bc:	5021883a 	mov	r16,r10
100064c0:	003ed506 	br	10006018 <__alt_data_end+0xf8006018>
100064c4:	1984b03a 	or	r2,r3,r6
100064c8:	103e5926 	beq	r2,zero,10005e30 <__alt_data_end+0xf8005e30>
100064cc:	8989c83a 	sub	r4,r17,r6
100064d0:	8911803a 	cmpltu	r8,r17,r4
100064d4:	28c5c83a 	sub	r2,r5,r3
100064d8:	1205c83a 	sub	r2,r2,r8
100064dc:	1200202c 	andhi	r8,r2,128
100064e0:	403ef926 	beq	r8,zero,100060c8 <__alt_data_end+0xf80060c8>
100064e4:	3463c83a 	sub	r17,r6,r17
100064e8:	194bc83a 	sub	r5,r3,r5
100064ec:	344d803a 	cmpltu	r6,r6,r17
100064f0:	298bc83a 	sub	r5,r5,r6
100064f4:	3825883a 	mov	r18,r7
100064f8:	003e4d06 	br	10005e30 <__alt_data_end+0xf8005e30>
100064fc:	1984b03a 	or	r2,r3,r6
10006500:	10002b26 	beq	r2,zero,100065b0 <__subdf3+0x80c>
10006504:	2808d0fa 	srli	r4,r5,3
10006508:	8822d0fa 	srli	r17,r17,3
1000650c:	280a977a 	slli	r5,r5,29
10006510:	2080022c 	andhi	r2,r4,8
10006514:	2c62b03a 	or	r17,r5,r17
10006518:	10000826 	beq	r2,zero,1000653c <__subdf3+0x798>
1000651c:	1810d0fa 	srli	r8,r3,3
10006520:	4080022c 	andhi	r2,r8,8
10006524:	1000051e 	bne	r2,zero,1000653c <__subdf3+0x798>
10006528:	300cd0fa 	srli	r6,r6,3
1000652c:	1804977a 	slli	r2,r3,29
10006530:	4009883a 	mov	r4,r8
10006534:	3825883a 	mov	r18,r7
10006538:	11a2b03a 	or	r17,r2,r6
1000653c:	880ad77a 	srli	r5,r17,29
10006540:	200890fa 	slli	r4,r4,3
10006544:	882290fa 	slli	r17,r17,3
10006548:	0401ffc4 	movi	r16,2047
1000654c:	290ab03a 	or	r5,r5,r4
10006550:	003e3706 	br	10005e30 <__alt_data_end+0xf8005e30>
10006554:	0101ffc4 	movi	r4,2047
10006558:	513fc71e 	bne	r10,r4,10006478 <__alt_data_end+0xf8006478>
1000655c:	180b883a 	mov	r5,r3
10006560:	3023883a 	mov	r17,r6
10006564:	5021883a 	mov	r16,r10
10006568:	003e3106 	br	10005e30 <__alt_data_end+0xf8005e30>
1000656c:	10002d26 	beq	r2,zero,10006624 <__subdf3+0x880>
10006570:	1984b03a 	or	r2,r3,r6
10006574:	10000e26 	beq	r2,zero,100065b0 <__subdf3+0x80c>
10006578:	2808d0fa 	srli	r4,r5,3
1000657c:	8822d0fa 	srli	r17,r17,3
10006580:	280a977a 	slli	r5,r5,29
10006584:	2080022c 	andhi	r2,r4,8
10006588:	2c62b03a 	or	r17,r5,r17
1000658c:	103feb26 	beq	r2,zero,1000653c <__alt_data_end+0xf800653c>
10006590:	180ed0fa 	srli	r7,r3,3
10006594:	3880022c 	andhi	r2,r7,8
10006598:	103fe81e 	bne	r2,zero,1000653c <__alt_data_end+0xf800653c>
1000659c:	300cd0fa 	srli	r6,r6,3
100065a0:	1804977a 	slli	r2,r3,29
100065a4:	3809883a 	mov	r4,r7
100065a8:	11a2b03a 	or	r17,r2,r6
100065ac:	003fe306 	br	1000653c <__alt_data_end+0xf800653c>
100065b0:	0401ffc4 	movi	r16,2047
100065b4:	003e1e06 	br	10005e30 <__alt_data_end+0xf8005e30>
100065b8:	0005883a 	mov	r2,zero
100065bc:	003f8306 	br	100063cc <__alt_data_end+0xf80063cc>
100065c0:	113ff804 	addi	r4,r2,-32
100065c4:	02000804 	movi	r8,32
100065c8:	2908d83a 	srl	r4,r5,r4
100065cc:	12002526 	beq	r2,r8,10006664 <__subdf3+0x8c0>
100065d0:	02001004 	movi	r8,64
100065d4:	4085c83a 	sub	r2,r8,r2
100065d8:	288a983a 	sll	r5,r5,r2
100065dc:	2c62b03a 	or	r17,r5,r17
100065e0:	8822c03a 	cmpne	r17,r17,zero
100065e4:	8922b03a 	or	r17,r17,r4
100065e8:	0005883a 	mov	r2,zero
100065ec:	003f2406 	br	10006280 <__alt_data_end+0xf8006280>
100065f0:	01402034 	movhi	r5,128
100065f4:	0011883a 	mov	r8,zero
100065f8:	297fffc4 	addi	r5,r5,-1
100065fc:	047ffe04 	movi	r17,-8
10006600:	0401ffc4 	movi	r16,2047
10006604:	003e6a06 	br	10005fb0 <__alt_data_end+0xf8005fb0>
10006608:	2c62b03a 	or	r17,r5,r17
1000660c:	8822c03a 	cmpne	r17,r17,zero
10006610:	0005883a 	mov	r2,zero
10006614:	003fa506 	br	100064ac <__alt_data_end+0xf80064ac>
10006618:	180b883a 	mov	r5,r3
1000661c:	3023883a 	mov	r17,r6
10006620:	003e0306 	br	10005e30 <__alt_data_end+0xf8005e30>
10006624:	180b883a 	mov	r5,r3
10006628:	3023883a 	mov	r17,r6
1000662c:	0401ffc4 	movi	r16,2047
10006630:	003dff06 	br	10005e30 <__alt_data_end+0xf8005e30>
10006634:	113ff804 	addi	r4,r2,-32
10006638:	01c00804 	movi	r7,32
1000663c:	2908d83a 	srl	r4,r5,r4
10006640:	11c00a26 	beq	r2,r7,1000666c <__subdf3+0x8c8>
10006644:	01c01004 	movi	r7,64
10006648:	3885c83a 	sub	r2,r7,r2
1000664c:	288a983a 	sll	r5,r5,r2
10006650:	2c62b03a 	or	r17,r5,r17
10006654:	8822c03a 	cmpne	r17,r17,zero
10006658:	8922b03a 	or	r17,r17,r4
1000665c:	0005883a 	mov	r2,zero
10006660:	003f9206 	br	100064ac <__alt_data_end+0xf80064ac>
10006664:	000b883a 	mov	r5,zero
10006668:	003fdc06 	br	100065dc <__alt_data_end+0xf80065dc>
1000666c:	000b883a 	mov	r5,zero
10006670:	003ff706 	br	10006650 <__alt_data_end+0xf8006650>

10006674 <__fixdfsi>:
10006674:	2806d53a 	srli	r3,r5,20
10006678:	00800434 	movhi	r2,16
1000667c:	10bfffc4 	addi	r2,r2,-1
10006680:	18c1ffcc 	andi	r3,r3,2047
10006684:	0180ff84 	movi	r6,1022
10006688:	2884703a 	and	r2,r5,r2
1000668c:	280ad7fa 	srli	r5,r5,31
10006690:	30c0130e 	bge	r6,r3,100066e0 <__fixdfsi+0x6c>
10006694:	01810744 	movi	r6,1053
10006698:	30c00d16 	blt	r6,r3,100066d0 <__fixdfsi+0x5c>
1000669c:	01810cc4 	movi	r6,1075
100066a0:	30cdc83a 	sub	r6,r6,r3
100066a4:	01c007c4 	movi	r7,31
100066a8:	10800434 	orhi	r2,r2,16
100066ac:	39800e0e 	bge	r7,r6,100066e8 <__fixdfsi+0x74>
100066b0:	010104c4 	movi	r4,1043
100066b4:	20c7c83a 	sub	r3,r4,r3
100066b8:	10c6d83a 	srl	r3,r2,r3
100066bc:	29403fcc 	andi	r5,r5,255
100066c0:	0145c83a 	sub	r2,zero,r5
100066c4:	1884f03a 	xor	r2,r3,r2
100066c8:	1145883a 	add	r2,r2,r5
100066cc:	f800283a 	ret
100066d0:	00a00034 	movhi	r2,32768
100066d4:	10bfffc4 	addi	r2,r2,-1
100066d8:	2885883a 	add	r2,r5,r2
100066dc:	f800283a 	ret
100066e0:	0005883a 	mov	r2,zero
100066e4:	f800283a 	ret
100066e8:	18fefb44 	addi	r3,r3,-1043
100066ec:	2188d83a 	srl	r4,r4,r6
100066f0:	10c6983a 	sll	r3,r2,r3
100066f4:	20c6b03a 	or	r3,r4,r3
100066f8:	003ff006 	br	100066bc <__alt_data_end+0xf80066bc>

100066fc <__floatsidf>:
100066fc:	defffd04 	addi	sp,sp,-12
10006700:	dc400115 	stw	r17,4(sp)
10006704:	dfc00215 	stw	ra,8(sp)
10006708:	dc000015 	stw	r16,0(sp)
1000670c:	2023883a 	mov	r17,r4
10006710:	20001426 	beq	r4,zero,10006764 <__floatsidf+0x68>
10006714:	2020d7fa 	srli	r16,r4,31
10006718:	80000126 	beq	r16,zero,10006720 <__floatsidf+0x24>
1000671c:	0123c83a 	sub	r17,zero,r4
10006720:	8809883a 	mov	r4,r17
10006724:	00068700 	call	10006870 <__clzsi2>
10006728:	01410784 	movi	r5,1054
1000672c:	00c00284 	movi	r3,10
10006730:	288bc83a 	sub	r5,r5,r2
10006734:	18801c16 	blt	r3,r2,100067a8 <__floatsidf+0xac>
10006738:	00c002c4 	movi	r3,11
1000673c:	1887c83a 	sub	r3,r3,r2
10006740:	88c8d83a 	srl	r4,r17,r3
10006744:	00c00434 	movhi	r3,16
10006748:	18ffffc4 	addi	r3,r3,-1
1000674c:	10800544 	addi	r2,r2,21
10006750:	20c8703a 	and	r4,r4,r3
10006754:	8884983a 	sll	r2,r17,r2
10006758:	28c1ffcc 	andi	r3,r5,2047
1000675c:	800d883a 	mov	r6,r16
10006760:	00000406 	br	10006774 <__floatsidf+0x78>
10006764:	000d883a 	mov	r6,zero
10006768:	0007883a 	mov	r3,zero
1000676c:	0009883a 	mov	r4,zero
10006770:	0005883a 	mov	r2,zero
10006774:	180a953a 	slli	r5,r3,20
10006778:	31803fcc 	andi	r6,r6,255
1000677c:	00c00434 	movhi	r3,16
10006780:	300c97fa 	slli	r6,r6,31
10006784:	18ffffc4 	addi	r3,r3,-1
10006788:	20c6703a 	and	r3,r4,r3
1000678c:	1946b03a 	or	r3,r3,r5
10006790:	1986b03a 	or	r3,r3,r6
10006794:	dfc00217 	ldw	ra,8(sp)
10006798:	dc400117 	ldw	r17,4(sp)
1000679c:	dc000017 	ldw	r16,0(sp)
100067a0:	dec00304 	addi	sp,sp,12
100067a4:	f800283a 	ret
100067a8:	10fffd44 	addi	r3,r2,-11
100067ac:	88c8983a 	sll	r4,r17,r3
100067b0:	00800434 	movhi	r2,16
100067b4:	10bfffc4 	addi	r2,r2,-1
100067b8:	2088703a 	and	r4,r4,r2
100067bc:	28c1ffcc 	andi	r3,r5,2047
100067c0:	800d883a 	mov	r6,r16
100067c4:	0005883a 	mov	r2,zero
100067c8:	003fea06 	br	10006774 <__alt_data_end+0xf8006774>

100067cc <__floatunsidf>:
100067cc:	defffe04 	addi	sp,sp,-8
100067d0:	dc000015 	stw	r16,0(sp)
100067d4:	dfc00115 	stw	ra,4(sp)
100067d8:	2021883a 	mov	r16,r4
100067dc:	20001026 	beq	r4,zero,10006820 <__floatunsidf+0x54>
100067e0:	00068700 	call	10006870 <__clzsi2>
100067e4:	01410784 	movi	r5,1054
100067e8:	100d883a 	mov	r6,r2
100067ec:	288bc83a 	sub	r5,r5,r2
100067f0:	00800284 	movi	r2,10
100067f4:	11801616 	blt	r2,r6,10006850 <__floatunsidf+0x84>
100067f8:	008002c4 	movi	r2,11
100067fc:	1185c83a 	sub	r2,r2,r6
10006800:	8084d83a 	srl	r2,r16,r2
10006804:	00c00434 	movhi	r3,16
10006808:	31c00544 	addi	r7,r6,21
1000680c:	18ffffc4 	addi	r3,r3,-1
10006810:	81e0983a 	sll	r16,r16,r7
10006814:	10cc703a 	and	r6,r2,r3
10006818:	2941ffcc 	andi	r5,r5,2047
1000681c:	00000206 	br	10006828 <__floatunsidf+0x5c>
10006820:	000b883a 	mov	r5,zero
10006824:	000d883a 	mov	r6,zero
10006828:	280a953a 	slli	r5,r5,20
1000682c:	00c00434 	movhi	r3,16
10006830:	18ffffc4 	addi	r3,r3,-1
10006834:	30c6703a 	and	r3,r6,r3
10006838:	8005883a 	mov	r2,r16
1000683c:	1946b03a 	or	r3,r3,r5
10006840:	dfc00117 	ldw	ra,4(sp)
10006844:	dc000017 	ldw	r16,0(sp)
10006848:	dec00204 	addi	sp,sp,8
1000684c:	f800283a 	ret
10006850:	31bffd44 	addi	r6,r6,-11
10006854:	818c983a 	sll	r6,r16,r6
10006858:	00800434 	movhi	r2,16
1000685c:	10bfffc4 	addi	r2,r2,-1
10006860:	2941ffcc 	andi	r5,r5,2047
10006864:	0021883a 	mov	r16,zero
10006868:	308c703a 	and	r6,r6,r2
1000686c:	003fee06 	br	10006828 <__alt_data_end+0xf8006828>

10006870 <__clzsi2>:
10006870:	00bfffd4 	movui	r2,65535
10006874:	11000b36 	bltu	r2,r4,100068a4 <__clzsi2+0x34>
10006878:	00803fc4 	movi	r2,255
1000687c:	1100122e 	bgeu	r2,r4,100068c8 <__clzsi2+0x58>
10006880:	00c00204 	movi	r3,8
10006884:	01400604 	movi	r5,24
10006888:	20c8d83a 	srl	r4,r4,r3
1000688c:	00840074 	movhi	r2,4097
10006890:	1088f704 	addi	r2,r2,9180
10006894:	1109883a 	add	r4,r2,r4
10006898:	20800003 	ldbu	r2,0(r4)
1000689c:	2885c83a 	sub	r2,r5,r2
100068a0:	f800283a 	ret
100068a4:	00804034 	movhi	r2,256
100068a8:	10bfffc4 	addi	r2,r2,-1
100068ac:	11000336 	bltu	r2,r4,100068bc <__clzsi2+0x4c>
100068b0:	00c00404 	movi	r3,16
100068b4:	180b883a 	mov	r5,r3
100068b8:	003ff306 	br	10006888 <__alt_data_end+0xf8006888>
100068bc:	00c00604 	movi	r3,24
100068c0:	01400204 	movi	r5,8
100068c4:	003ff006 	br	10006888 <__alt_data_end+0xf8006888>
100068c8:	0007883a 	mov	r3,zero
100068cc:	01400804 	movi	r5,32
100068d0:	003fed06 	br	10006888 <__alt_data_end+0xf8006888>

100068d4 <__errno>:
100068d4:	00840074 	movhi	r2,4097
100068d8:	10906304 	addi	r2,r2,16780
100068dc:	10800017 	ldw	r2,0(r2)
100068e0:	f800283a 	ret

100068e4 <_printf_r>:
100068e4:	defffd04 	addi	sp,sp,-12
100068e8:	dfc00015 	stw	ra,0(sp)
100068ec:	d9800115 	stw	r6,4(sp)
100068f0:	d9c00215 	stw	r7,8(sp)
100068f4:	280d883a 	mov	r6,r5
100068f8:	21400217 	ldw	r5,8(r4)
100068fc:	d9c00104 	addi	r7,sp,4
10006900:	00069c80 	call	100069c8 <___vfprintf_internal_r>
10006904:	dfc00017 	ldw	ra,0(sp)
10006908:	dec00304 	addi	sp,sp,12
1000690c:	f800283a 	ret

10006910 <printf>:
10006910:	defffc04 	addi	sp,sp,-16
10006914:	dfc00015 	stw	ra,0(sp)
10006918:	d9400115 	stw	r5,4(sp)
1000691c:	d9800215 	stw	r6,8(sp)
10006920:	d9c00315 	stw	r7,12(sp)
10006924:	00840074 	movhi	r2,4097
10006928:	10906304 	addi	r2,r2,16780
1000692c:	10800017 	ldw	r2,0(r2)
10006930:	200b883a 	mov	r5,r4
10006934:	d9800104 	addi	r6,sp,4
10006938:	11000217 	ldw	r4,8(r2)
1000693c:	0008ac40 	call	10008ac4 <__vfprintf_internal>
10006940:	dfc00017 	ldw	ra,0(sp)
10006944:	dec00404 	addi	sp,sp,16
10006948:	f800283a 	ret

1000694c <srand>:
1000694c:	00840074 	movhi	r2,4097
10006950:	10906304 	addi	r2,r2,16780
10006954:	10800017 	ldw	r2,0(r2)
10006958:	11002915 	stw	r4,164(r2)
1000695c:	10002a15 	stw	zero,168(r2)
10006960:	f800283a 	ret

10006964 <rand>:
10006964:	00840074 	movhi	r2,4097
10006968:	defffe04 	addi	sp,sp,-8
1000696c:	10906304 	addi	r2,r2,16780
10006970:	dc000015 	stw	r16,0(sp)
10006974:	14000017 	ldw	r16,0(r2)
10006978:	dfc00115 	stw	ra,4(sp)
1000697c:	01932574 	movhi	r6,19605
10006980:	81002917 	ldw	r4,164(r16)
10006984:	81402a17 	ldw	r5,168(r16)
10006988:	01d614b4 	movhi	r7,22610
1000698c:	319fcb44 	addi	r6,r6,32557
10006990:	39fd0b44 	addi	r7,r7,-3027
10006994:	00031a80 	call	100031a8 <__muldi3>
10006998:	11000044 	addi	r4,r2,1
1000699c:	2085803a 	cmpltu	r2,r4,r2
100069a0:	10c7883a 	add	r3,r2,r3
100069a4:	00a00034 	movhi	r2,32768
100069a8:	10bfffc4 	addi	r2,r2,-1
100069ac:	1884703a 	and	r2,r3,r2
100069b0:	81002915 	stw	r4,164(r16)
100069b4:	80c02a15 	stw	r3,168(r16)
100069b8:	dfc00117 	ldw	ra,4(sp)
100069bc:	dc000017 	ldw	r16,0(sp)
100069c0:	dec00204 	addi	sp,sp,8
100069c4:	f800283a 	ret

100069c8 <___vfprintf_internal_r>:
100069c8:	defeb604 	addi	sp,sp,-1320
100069cc:	dfc14915 	stw	ra,1316(sp)
100069d0:	ddc14715 	stw	r23,1308(sp)
100069d4:	dd814615 	stw	r22,1304(sp)
100069d8:	202f883a 	mov	r23,r4
100069dc:	282d883a 	mov	r22,r5
100069e0:	d9812a15 	stw	r6,1192(sp)
100069e4:	d9c12d15 	stw	r7,1204(sp)
100069e8:	df014815 	stw	fp,1312(sp)
100069ec:	dd414515 	stw	r21,1300(sp)
100069f0:	dd014415 	stw	r20,1296(sp)
100069f4:	dcc14315 	stw	r19,1292(sp)
100069f8:	dc814215 	stw	r18,1288(sp)
100069fc:	dc414115 	stw	r17,1284(sp)
10006a00:	dc014015 	stw	r16,1280(sp)
10006a04:	000b1a40 	call	1000b1a4 <_localeconv_r>
10006a08:	10800017 	ldw	r2,0(r2)
10006a0c:	1009883a 	mov	r4,r2
10006a10:	d8813515 	stw	r2,1236(sp)
10006a14:	000d0f80 	call	1000d0f8 <strlen>
10006a18:	d8813815 	stw	r2,1248(sp)
10006a1c:	b8000226 	beq	r23,zero,10006a28 <___vfprintf_internal_r+0x60>
10006a20:	b8800e17 	ldw	r2,56(r23)
10006a24:	10010526 	beq	r2,zero,10006e3c <___vfprintf_internal_r+0x474>
10006a28:	b0c0030b 	ldhu	r3,12(r22)
10006a2c:	1908000c 	andi	r4,r3,8192
10006a30:	1805883a 	mov	r2,r3
10006a34:	2000071e 	bne	r4,zero,10006a54 <___vfprintf_internal_r+0x8c>
10006a38:	b1001917 	ldw	r4,100(r22)
10006a3c:	18880014 	ori	r2,r3,8192
10006a40:	00f7ffc4 	movi	r3,-8193
10006a44:	20c8703a 	and	r4,r4,r3
10006a48:	b080030d 	sth	r2,12(r22)
10006a4c:	1007883a 	mov	r3,r2
10006a50:	b1001915 	stw	r4,100(r22)
10006a54:	1100020c 	andi	r4,r2,8
10006a58:	2000a826 	beq	r4,zero,10006cfc <___vfprintf_internal_r+0x334>
10006a5c:	b1000417 	ldw	r4,16(r22)
10006a60:	2000a626 	beq	r4,zero,10006cfc <___vfprintf_internal_r+0x334>
10006a64:	1080068c 	andi	r2,r2,26
10006a68:	01000284 	movi	r4,10
10006a6c:	1100ac26 	beq	r2,r4,10006d20 <___vfprintf_internal_r+0x358>
10006a70:	d8c10e04 	addi	r3,sp,1080
10006a74:	d9010dc4 	addi	r4,sp,1079
10006a78:	d9400404 	addi	r5,sp,16
10006a7c:	05040074 	movhi	r20,4097
10006a80:	1905c83a 	sub	r2,r3,r4
10006a84:	a5094884 	addi	r20,r20,9506
10006a88:	d8c12815 	stw	r3,1184(sp)
10006a8c:	d9012915 	stw	r4,1188(sp)
10006a90:	d9411e15 	stw	r5,1144(sp)
10006a94:	d8012015 	stw	zero,1152(sp)
10006a98:	d8011f15 	stw	zero,1148(sp)
10006a9c:	d8013315 	stw	zero,1228(sp)
10006aa0:	d8013715 	stw	zero,1244(sp)
10006aa4:	d8013915 	stw	zero,1252(sp)
10006aa8:	d8013b15 	stw	zero,1260(sp)
10006aac:	d8013a15 	stw	zero,1256(sp)
10006ab0:	d8012f15 	stw	zero,1212(sp)
10006ab4:	2811883a 	mov	r8,r5
10006ab8:	d8813c15 	stw	r2,1264(sp)
10006abc:	d8c12a17 	ldw	r3,1192(sp)
10006ac0:	18800007 	ldb	r2,0(r3)
10006ac4:	10021326 	beq	r2,zero,10007314 <___vfprintf_internal_r+0x94c>
10006ac8:	00c00944 	movi	r3,37
10006acc:	dc012a17 	ldw	r16,1192(sp)
10006ad0:	10c0021e 	bne	r2,r3,10006adc <___vfprintf_internal_r+0x114>
10006ad4:	00001606 	br	10006b30 <___vfprintf_internal_r+0x168>
10006ad8:	10c08526 	beq	r2,r3,10006cf0 <___vfprintf_internal_r+0x328>
10006adc:	84000044 	addi	r16,r16,1
10006ae0:	80800007 	ldb	r2,0(r16)
10006ae4:	103ffc1e 	bne	r2,zero,10006ad8 <__alt_data_end+0xf8006ad8>
10006ae8:	d9012a17 	ldw	r4,1192(sp)
10006aec:	8123c83a 	sub	r17,r16,r4
10006af0:	88000f26 	beq	r17,zero,10006b30 <___vfprintf_internal_r+0x168>
10006af4:	d8812a17 	ldw	r2,1192(sp)
10006af8:	d8c12017 	ldw	r3,1152(sp)
10006afc:	44400115 	stw	r17,4(r8)
10006b00:	40800015 	stw	r2,0(r8)
10006b04:	d8811f17 	ldw	r2,1148(sp)
10006b08:	1c47883a 	add	r3,r3,r17
10006b0c:	d8c12015 	stw	r3,1152(sp)
10006b10:	10800044 	addi	r2,r2,1
10006b14:	d8811f15 	stw	r2,1148(sp)
10006b18:	00c001c4 	movi	r3,7
10006b1c:	1880b516 	blt	r3,r2,10006df4 <___vfprintf_internal_r+0x42c>
10006b20:	42000204 	addi	r8,r8,8
10006b24:	d8c12f17 	ldw	r3,1212(sp)
10006b28:	1c47883a 	add	r3,r3,r17
10006b2c:	d8c12f15 	stw	r3,1212(sp)
10006b30:	80800007 	ldb	r2,0(r16)
10006b34:	1000b626 	beq	r2,zero,10006e10 <___vfprintf_internal_r+0x448>
10006b38:	80800044 	addi	r2,r16,1
10006b3c:	84000047 	ldb	r16,1(r16)
10006b40:	0027883a 	mov	r19,zero
10006b44:	0039883a 	mov	fp,zero
10006b48:	dcc12b05 	stb	r19,1196(sp)
10006b4c:	d8012785 	stb	zero,1182(sp)
10006b50:	027fffc4 	movi	r9,-1
10006b54:	d8012e15 	stw	zero,1208(sp)
10006b58:	04401604 	movi	r17,88
10006b5c:	04800244 	movi	r18,9
10006b60:	da012a15 	stw	r8,1192(sp)
10006b64:	e027883a 	mov	r19,fp
10006b68:	17000044 	addi	fp,r2,1
10006b6c:	80bff804 	addi	r2,r16,-32
10006b70:	88831236 	bltu	r17,r2,100077bc <___vfprintf_internal_r+0xdf4>
10006b74:	100490ba 	slli	r2,r2,2
10006b78:	01040034 	movhi	r4,4096
10006b7c:	211ae304 	addi	r4,r4,27532
10006b80:	1105883a 	add	r2,r2,r4
10006b84:	10800017 	ldw	r2,0(r2)
10006b88:	1000683a 	jmp	r2
10006b8c:	100076d8 	cmpnei	zero,r2,475
10006b90:	100077bc 	xorhi	zero,r2,478
10006b94:	100077bc 	xorhi	zero,r2,478
10006b98:	100076f4 	orhi	zero,r2,475
10006b9c:	100077bc 	xorhi	zero,r2,478
10006ba0:	100077bc 	xorhi	zero,r2,478
10006ba4:	100077bc 	xorhi	zero,r2,478
10006ba8:	100077bc 	xorhi	zero,r2,478
10006bac:	100077bc 	xorhi	zero,r2,478
10006bb0:	100077bc 	xorhi	zero,r2,478
10006bb4:	10007704 	addi	zero,r2,476
10006bb8:	1000772c 	andhi	zero,r2,476
10006bbc:	100077bc 	xorhi	zero,r2,478
10006bc0:	10006e48 	cmpgei	zero,r2,441
10006bc4:	10006e58 	cmpnei	zero,r2,441
10006bc8:	100077bc 	xorhi	zero,r2,478
10006bcc:	10006ea8 	cmpgeui	zero,r2,442
10006bd0:	10006eb8 	rdprs	zero,r2,442
10006bd4:	10006eb8 	rdprs	zero,r2,442
10006bd8:	10006eb8 	rdprs	zero,r2,442
10006bdc:	10006eb8 	rdprs	zero,r2,442
10006be0:	10006eb8 	rdprs	zero,r2,442
10006be4:	10006eb8 	rdprs	zero,r2,442
10006be8:	10006eb8 	rdprs	zero,r2,442
10006bec:	10006eb8 	rdprs	zero,r2,442
10006bf0:	10006eb8 	rdprs	zero,r2,442
10006bf4:	100077bc 	xorhi	zero,r2,478
10006bf8:	100077bc 	xorhi	zero,r2,478
10006bfc:	100077bc 	xorhi	zero,r2,478
10006c00:	100077bc 	xorhi	zero,r2,478
10006c04:	100077bc 	xorhi	zero,r2,478
10006c08:	100077bc 	xorhi	zero,r2,478
10006c0c:	100077bc 	xorhi	zero,r2,478
10006c10:	100077bc 	xorhi	zero,r2,478
10006c14:	100077bc 	xorhi	zero,r2,478
10006c18:	100077bc 	xorhi	zero,r2,478
10006c1c:	10006efc 	xorhi	zero,r2,443
10006c20:	1000731c 	xori	zero,r2,460
10006c24:	100077bc 	xorhi	zero,r2,478
10006c28:	1000731c 	xori	zero,r2,460
10006c2c:	100077bc 	xorhi	zero,r2,478
10006c30:	100077bc 	xorhi	zero,r2,478
10006c34:	100077bc 	xorhi	zero,r2,478
10006c38:	100077bc 	xorhi	zero,r2,478
10006c3c:	100073c4 	addi	zero,r2,463
10006c40:	100077bc 	xorhi	zero,r2,478
10006c44:	100077bc 	xorhi	zero,r2,478
10006c48:	100073d4 	ori	zero,r2,463
10006c4c:	100077bc 	xorhi	zero,r2,478
10006c50:	100077bc 	xorhi	zero,r2,478
10006c54:	100077bc 	xorhi	zero,r2,478
10006c58:	100077bc 	xorhi	zero,r2,478
10006c5c:	100077bc 	xorhi	zero,r2,478
10006c60:	10007418 	cmpnei	zero,r2,464
10006c64:	100077bc 	xorhi	zero,r2,478
10006c68:	100077bc 	xorhi	zero,r2,478
10006c6c:	10007450 	cmplti	zero,r2,465
10006c70:	100077bc 	xorhi	zero,r2,478
10006c74:	100077bc 	xorhi	zero,r2,478
10006c78:	100077bc 	xorhi	zero,r2,478
10006c7c:	100077bc 	xorhi	zero,r2,478
10006c80:	100077bc 	xorhi	zero,r2,478
10006c84:	100077bc 	xorhi	zero,r2,478
10006c88:	100077bc 	xorhi	zero,r2,478
10006c8c:	100077bc 	xorhi	zero,r2,478
10006c90:	100077bc 	xorhi	zero,r2,478
10006c94:	100077bc 	xorhi	zero,r2,478
10006c98:	1000768c 	andi	zero,r2,474
10006c9c:	10007638 	rdprs	zero,r2,472
10006ca0:	1000731c 	xori	zero,r2,460
10006ca4:	1000731c 	xori	zero,r2,460
10006ca8:	1000731c 	xori	zero,r2,460
10006cac:	1000767c 	xorhi	zero,r2,473
10006cb0:	10007638 	rdprs	zero,r2,472
10006cb4:	100077bc 	xorhi	zero,r2,478
10006cb8:	100077bc 	xorhi	zero,r2,478
10006cbc:	10007554 	ori	zero,r2,469
10006cc0:	100077bc 	xorhi	zero,r2,478
10006cc4:	1000756c 	andhi	zero,r2,469
10006cc8:	100075ac 	andhi	zero,r2,470
10006ccc:	100075ec 	andhi	zero,r2,471
10006cd0:	100074b8 	rdprs	zero,r2,466
10006cd4:	100077bc 	xorhi	zero,r2,478
10006cd8:	10007740 	call	11000774 <_gp+0xfe45f0>
10006cdc:	100077bc 	xorhi	zero,r2,478
10006ce0:	100074c8 	cmpgei	zero,r2,467
10006ce4:	100077bc 	xorhi	zero,r2,478
10006ce8:	100077bc 	xorhi	zero,r2,478
10006cec:	10007508 	cmpgei	zero,r2,468
10006cf0:	d9412a17 	ldw	r5,1192(sp)
10006cf4:	8163c83a 	sub	r17,r16,r5
10006cf8:	003f7d06 	br	10006af0 <__alt_data_end+0xf8006af0>
10006cfc:	b809883a 	mov	r4,r23
10006d00:	b00b883a 	mov	r5,r22
10006d04:	0008ae80 	call	10008ae8 <__swsetup_r>
10006d08:	10002d1e 	bne	r2,zero,10006dc0 <___vfprintf_internal_r+0x3f8>
10006d0c:	b0c0030b 	ldhu	r3,12(r22)
10006d10:	01000284 	movi	r4,10
10006d14:	1805883a 	mov	r2,r3
10006d18:	1080068c 	andi	r2,r2,26
10006d1c:	113f541e 	bne	r2,r4,10006a70 <__alt_data_end+0xf8006a70>
10006d20:	b080038b 	ldhu	r2,14(r22)
10006d24:	113fffcc 	andi	r4,r2,65535
10006d28:	2120001c 	xori	r4,r4,32768
10006d2c:	21200004 	addi	r4,r4,-32768
10006d30:	203f4f16 	blt	r4,zero,10006a70 <__alt_data_end+0xf8006a70>
10006d34:	b2c01917 	ldw	r11,100(r22)
10006d38:	b2800717 	ldw	r10,28(r22)
10006d3c:	b2400917 	ldw	r9,36(r22)
10006d40:	d9812a17 	ldw	r6,1192(sp)
10006d44:	d9c12d17 	ldw	r7,1204(sp)
10006d48:	02010004 	movi	r8,1024
10006d4c:	18ffff4c 	andi	r3,r3,65533
10006d50:	d881078d 	sth	r2,1054(sp)
10006d54:	b809883a 	mov	r4,r23
10006d58:	d8800404 	addi	r2,sp,16
10006d5c:	d9410404 	addi	r5,sp,1040
10006d60:	d8c1070d 	sth	r3,1052(sp)
10006d64:	dac11d15 	stw	r11,1140(sp)
10006d68:	da810b15 	stw	r10,1068(sp)
10006d6c:	da410d15 	stw	r9,1076(sp)
10006d70:	d8810415 	stw	r2,1040(sp)
10006d74:	d8810815 	stw	r2,1056(sp)
10006d78:	da010615 	stw	r8,1048(sp)
10006d7c:	da010915 	stw	r8,1060(sp)
10006d80:	d8010a15 	stw	zero,1064(sp)
10006d84:	00069c80 	call	100069c8 <___vfprintf_internal_r>
10006d88:	1021883a 	mov	r16,r2
10006d8c:	10000416 	blt	r2,zero,10006da0 <___vfprintf_internal_r+0x3d8>
10006d90:	b809883a 	mov	r4,r23
10006d94:	d9410404 	addi	r5,sp,1040
10006d98:	000a5680 	call	1000a568 <_fflush_r>
10006d9c:	1007301e 	bne	r2,zero,10008a60 <___vfprintf_internal_r+0x2098>
10006da0:	d881070b 	ldhu	r2,1052(sp)
10006da4:	1080100c 	andi	r2,r2,64
10006da8:	10000326 	beq	r2,zero,10006db8 <___vfprintf_internal_r+0x3f0>
10006dac:	b080030b 	ldhu	r2,12(r22)
10006db0:	10801014 	ori	r2,r2,64
10006db4:	b080030d 	sth	r2,12(r22)
10006db8:	8005883a 	mov	r2,r16
10006dbc:	00000106 	br	10006dc4 <___vfprintf_internal_r+0x3fc>
10006dc0:	00bfffc4 	movi	r2,-1
10006dc4:	dfc14917 	ldw	ra,1316(sp)
10006dc8:	df014817 	ldw	fp,1312(sp)
10006dcc:	ddc14717 	ldw	r23,1308(sp)
10006dd0:	dd814617 	ldw	r22,1304(sp)
10006dd4:	dd414517 	ldw	r21,1300(sp)
10006dd8:	dd014417 	ldw	r20,1296(sp)
10006ddc:	dcc14317 	ldw	r19,1292(sp)
10006de0:	dc814217 	ldw	r18,1288(sp)
10006de4:	dc414117 	ldw	r17,1284(sp)
10006de8:	dc014017 	ldw	r16,1280(sp)
10006dec:	dec14a04 	addi	sp,sp,1320
10006df0:	f800283a 	ret
10006df4:	b809883a 	mov	r4,r23
10006df8:	b00b883a 	mov	r5,r22
10006dfc:	d9811e04 	addi	r6,sp,1144
10006e00:	000d28c0 	call	1000d28c <__sprint_r>
10006e04:	1000081e 	bne	r2,zero,10006e28 <___vfprintf_internal_r+0x460>
10006e08:	da000404 	addi	r8,sp,16
10006e0c:	003f4506 	br	10006b24 <__alt_data_end+0xf8006b24>
10006e10:	d8812017 	ldw	r2,1152(sp)
10006e14:	10000426 	beq	r2,zero,10006e28 <___vfprintf_internal_r+0x460>
10006e18:	b809883a 	mov	r4,r23
10006e1c:	b00b883a 	mov	r5,r22
10006e20:	d9811e04 	addi	r6,sp,1144
10006e24:	000d28c0 	call	1000d28c <__sprint_r>
10006e28:	b080030b 	ldhu	r2,12(r22)
10006e2c:	1080100c 	andi	r2,r2,64
10006e30:	103fe31e 	bne	r2,zero,10006dc0 <__alt_data_end+0xf8006dc0>
10006e34:	d8812f17 	ldw	r2,1212(sp)
10006e38:	003fe206 	br	10006dc4 <__alt_data_end+0xf8006dc4>
10006e3c:	b809883a 	mov	r4,r23
10006e40:	000ab240 	call	1000ab24 <__sinit>
10006e44:	003ef806 	br	10006a28 <__alt_data_end+0xf8006a28>
10006e48:	e005883a 	mov	r2,fp
10006e4c:	9cc00114 	ori	r19,r19,4
10006e50:	e4000007 	ldb	r16,0(fp)
10006e54:	003f4406 	br	10006b68 <__alt_data_end+0xf8006b68>
10006e58:	e4000007 	ldb	r16,0(fp)
10006e5c:	01000a84 	movi	r4,42
10006e60:	e0800044 	addi	r2,fp,1
10006e64:	8106f626 	beq	r16,r4,10008a40 <___vfprintf_internal_r+0x2078>
10006e68:	857ff404 	addi	r21,r16,-48
10006e6c:	1039883a 	mov	fp,r2
10006e70:	0013883a 	mov	r9,zero
10006e74:	957f3d36 	bltu	r18,r21,10006b6c <__alt_data_end+0xf8006b6c>
10006e78:	0009883a 	mov	r4,zero
10006e7c:	01400284 	movi	r5,10
10006e80:	00040b00 	call	100040b0 <__mulsi3>
10006e84:	e4000007 	ldb	r16,0(fp)
10006e88:	a889883a 	add	r4,r21,r2
10006e8c:	e7000044 	addi	fp,fp,1
10006e90:	857ff404 	addi	r21,r16,-48
10006e94:	957ff92e 	bgeu	r18,r21,10006e7c <__alt_data_end+0xf8006e7c>
10006e98:	2013883a 	mov	r9,r4
10006e9c:	203f330e 	bge	r4,zero,10006b6c <__alt_data_end+0xf8006b6c>
10006ea0:	027fffc4 	movi	r9,-1
10006ea4:	003f3106 	br	10006b6c <__alt_data_end+0xf8006b6c>
10006ea8:	9cc02014 	ori	r19,r19,128
10006eac:	e005883a 	mov	r2,fp
10006eb0:	e4000007 	ldb	r16,0(fp)
10006eb4:	003f2c06 	br	10006b68 <__alt_data_end+0xf8006b68>
10006eb8:	857ff404 	addi	r21,r16,-48
10006ebc:	d8012e15 	stw	zero,1208(sp)
10006ec0:	e021883a 	mov	r16,fp
10006ec4:	0009883a 	mov	r4,zero
10006ec8:	da412c15 	stw	r9,1200(sp)
10006ecc:	01400284 	movi	r5,10
10006ed0:	00040b00 	call	100040b0 <__mulsi3>
10006ed4:	81400007 	ldb	r5,0(r16)
10006ed8:	1549883a 	add	r4,r2,r21
10006edc:	e7000044 	addi	fp,fp,1
10006ee0:	2d7ff404 	addi	r21,r5,-48
10006ee4:	e021883a 	mov	r16,fp
10006ee8:	957ff82e 	bgeu	r18,r21,10006ecc <__alt_data_end+0xf8006ecc>
10006eec:	2821883a 	mov	r16,r5
10006ef0:	d9012e15 	stw	r4,1208(sp)
10006ef4:	da412c17 	ldw	r9,1200(sp)
10006ef8:	003f1c06 	br	10006b6c <__alt_data_end+0xf8006b6c>
10006efc:	da012a17 	ldw	r8,1192(sp)
10006f00:	df012a15 	stw	fp,1192(sp)
10006f04:	9839883a 	mov	fp,r19
10006f08:	dcc12b03 	ldbu	r19,1196(sp)
10006f0c:	e7000414 	ori	fp,fp,16
10006f10:	e080080c 	andi	r2,fp,32
10006f14:	dcc12785 	stb	r19,1182(sp)
10006f18:	d8c12d17 	ldw	r3,1204(sp)
10006f1c:	1001ce26 	beq	r2,zero,10007658 <___vfprintf_internal_r+0xc90>
10006f20:	d9012d17 	ldw	r4,1204(sp)
10006f24:	18800117 	ldw	r2,4(r3)
10006f28:	1c800017 	ldw	r18,0(r3)
10006f2c:	21000204 	addi	r4,r4,8
10006f30:	d9012d15 	stw	r4,1204(sp)
10006f34:	102b883a 	mov	r21,r2
10006f38:	10044916 	blt	r2,zero,10008060 <___vfprintf_internal_r+0x1698>
10006f3c:	dcc12783 	ldbu	r19,1182(sp)
10006f40:	da413215 	stw	r9,1224(sp)
10006f44:	00800044 	movi	r2,1
10006f48:	9546b03a 	or	r3,r18,r21
10006f4c:	48000216 	blt	r9,zero,10006f58 <___vfprintf_internal_r+0x590>
10006f50:	013fdfc4 	movi	r4,-129
10006f54:	e138703a 	and	fp,fp,r4
10006f58:	1802251e 	bne	r3,zero,100077f0 <___vfprintf_internal_r+0xe28>
10006f5c:	48031726 	beq	r9,zero,10007bbc <___vfprintf_internal_r+0x11f4>
10006f60:	10803fcc 	andi	r2,r2,255
10006f64:	00c00044 	movi	r3,1
10006f68:	10c24526 	beq	r2,r3,10007880 <___vfprintf_internal_r+0xeb8>
10006f6c:	00c00084 	movi	r3,2
10006f70:	10c33426 	beq	r2,r3,10007c44 <___vfprintf_internal_r+0x127c>
10006f74:	d8c10e04 	addi	r3,sp,1080
10006f78:	9008d0fa 	srli	r4,r18,3
10006f7c:	a80a977a 	slli	r5,r21,29
10006f80:	a82ad0fa 	srli	r21,r21,3
10006f84:	948001cc 	andi	r18,r18,7
10006f88:	90800c04 	addi	r2,r18,48
10006f8c:	18ffffc4 	addi	r3,r3,-1
10006f90:	2924b03a 	or	r18,r5,r4
10006f94:	18800005 	stb	r2,0(r3)
10006f98:	9548b03a 	or	r4,r18,r21
10006f9c:	203ff61e 	bne	r4,zero,10006f78 <__alt_data_end+0xf8006f78>
10006fa0:	e100004c 	andi	r4,fp,1
10006fa4:	d8c13115 	stw	r3,1220(sp)
10006fa8:	20039a1e 	bne	r4,zero,10007e14 <___vfprintf_internal_r+0x144c>
10006fac:	d8812817 	ldw	r2,1184(sp)
10006fb0:	10e3c83a 	sub	r17,r2,r3
10006fb4:	8805883a 	mov	r2,r17
10006fb8:	8a40010e 	bge	r17,r9,10006fc0 <___vfprintf_internal_r+0x5f8>
10006fbc:	4805883a 	mov	r2,r9
10006fc0:	d8812b15 	stw	r2,1196(sp)
10006fc4:	d8013415 	stw	zero,1232(sp)
10006fc8:	98803fcc 	andi	r2,r19,255
10006fcc:	1080201c 	xori	r2,r2,128
10006fd0:	10bfe004 	addi	r2,r2,-128
10006fd4:	10000326 	beq	r2,zero,10006fe4 <___vfprintf_internal_r+0x61c>
10006fd8:	d8c12b17 	ldw	r3,1196(sp)
10006fdc:	18c00044 	addi	r3,r3,1
10006fe0:	d8c12b15 	stw	r3,1196(sp)
10006fe4:	e0c0008c 	andi	r3,fp,2
10006fe8:	d8c12c15 	stw	r3,1200(sp)
10006fec:	18000326 	beq	r3,zero,10006ffc <___vfprintf_internal_r+0x634>
10006ff0:	d8c12b17 	ldw	r3,1196(sp)
10006ff4:	18c00084 	addi	r3,r3,2
10006ff8:	d8c12b15 	stw	r3,1196(sp)
10006ffc:	e0c0210c 	andi	r3,fp,132
10007000:	d8c13015 	stw	r3,1216(sp)
10007004:	1801f81e 	bne	r3,zero,100077e8 <___vfprintf_internal_r+0xe20>
10007008:	d9012e17 	ldw	r4,1208(sp)
1000700c:	d8c12b17 	ldw	r3,1196(sp)
10007010:	20ebc83a 	sub	r21,r4,r3
10007014:	0541f40e 	bge	zero,r21,100077e8 <___vfprintf_internal_r+0xe20>
10007018:	02400404 	movi	r9,16
1000701c:	d8c12017 	ldw	r3,1152(sp)
10007020:	d8811f17 	ldw	r2,1148(sp)
10007024:	4d45750e 	bge	r9,r21,100085fc <___vfprintf_internal_r+0x1c34>
10007028:	01440074 	movhi	r5,4097
1000702c:	29494c84 	addi	r5,r5,9522
10007030:	d9413615 	stw	r5,1240(sp)
10007034:	4827883a 	mov	r19,r9
10007038:	048001c4 	movi	r18,7
1000703c:	00000306 	br	1000704c <___vfprintf_internal_r+0x684>
10007040:	ad7ffc04 	addi	r21,r21,-16
10007044:	42000204 	addi	r8,r8,8
10007048:	9d40130e 	bge	r19,r21,10007098 <___vfprintf_internal_r+0x6d0>
1000704c:	01040074 	movhi	r4,4097
10007050:	18c00404 	addi	r3,r3,16
10007054:	10800044 	addi	r2,r2,1
10007058:	21094c84 	addi	r4,r4,9522
1000705c:	41000015 	stw	r4,0(r8)
10007060:	44c00115 	stw	r19,4(r8)
10007064:	d8c12015 	stw	r3,1152(sp)
10007068:	d8811f15 	stw	r2,1148(sp)
1000706c:	90bff40e 	bge	r18,r2,10007040 <__alt_data_end+0xf8007040>
10007070:	b809883a 	mov	r4,r23
10007074:	b00b883a 	mov	r5,r22
10007078:	d9811e04 	addi	r6,sp,1144
1000707c:	000d28c0 	call	1000d28c <__sprint_r>
10007080:	103f691e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007084:	ad7ffc04 	addi	r21,r21,-16
10007088:	d8c12017 	ldw	r3,1152(sp)
1000708c:	d8811f17 	ldw	r2,1148(sp)
10007090:	da000404 	addi	r8,sp,16
10007094:	9d7fed16 	blt	r19,r21,1000704c <__alt_data_end+0xf800704c>
10007098:	d9413617 	ldw	r5,1240(sp)
1000709c:	a8c7883a 	add	r3,r21,r3
100070a0:	10800044 	addi	r2,r2,1
100070a4:	41400015 	stw	r5,0(r8)
100070a8:	45400115 	stw	r21,4(r8)
100070ac:	d8c12015 	stw	r3,1152(sp)
100070b0:	d8811f15 	stw	r2,1148(sp)
100070b4:	010001c4 	movi	r4,7
100070b8:	20832b16 	blt	r4,r2,10007d68 <___vfprintf_internal_r+0x13a0>
100070bc:	d8812787 	ldb	r2,1182(sp)
100070c0:	42000204 	addi	r8,r8,8
100070c4:	10000c26 	beq	r2,zero,100070f8 <___vfprintf_internal_r+0x730>
100070c8:	d8811f17 	ldw	r2,1148(sp)
100070cc:	d9012784 	addi	r4,sp,1182
100070d0:	18c00044 	addi	r3,r3,1
100070d4:	10800044 	addi	r2,r2,1
100070d8:	41000015 	stw	r4,0(r8)
100070dc:	01000044 	movi	r4,1
100070e0:	41000115 	stw	r4,4(r8)
100070e4:	d8c12015 	stw	r3,1152(sp)
100070e8:	d8811f15 	stw	r2,1148(sp)
100070ec:	010001c4 	movi	r4,7
100070f0:	2082c416 	blt	r4,r2,10007c04 <___vfprintf_internal_r+0x123c>
100070f4:	42000204 	addi	r8,r8,8
100070f8:	d8812c17 	ldw	r2,1200(sp)
100070fc:	10000c26 	beq	r2,zero,10007130 <___vfprintf_internal_r+0x768>
10007100:	d8811f17 	ldw	r2,1148(sp)
10007104:	d9012704 	addi	r4,sp,1180
10007108:	18c00084 	addi	r3,r3,2
1000710c:	10800044 	addi	r2,r2,1
10007110:	41000015 	stw	r4,0(r8)
10007114:	01000084 	movi	r4,2
10007118:	41000115 	stw	r4,4(r8)
1000711c:	d8c12015 	stw	r3,1152(sp)
10007120:	d8811f15 	stw	r2,1148(sp)
10007124:	010001c4 	movi	r4,7
10007128:	2082be16 	blt	r4,r2,10007c24 <___vfprintf_internal_r+0x125c>
1000712c:	42000204 	addi	r8,r8,8
10007130:	d9013017 	ldw	r4,1216(sp)
10007134:	00802004 	movi	r2,128
10007138:	20822026 	beq	r4,r2,100079bc <___vfprintf_internal_r+0xff4>
1000713c:	d9413217 	ldw	r5,1224(sp)
10007140:	2c67c83a 	sub	r19,r5,r17
10007144:	04c0260e 	bge	zero,r19,100071e0 <___vfprintf_internal_r+0x818>
10007148:	05400404 	movi	r21,16
1000714c:	d8811f17 	ldw	r2,1148(sp)
10007150:	acc4720e 	bge	r21,r19,1000831c <___vfprintf_internal_r+0x1954>
10007154:	01440074 	movhi	r5,4097
10007158:	29494884 	addi	r5,r5,9506
1000715c:	d9412c15 	stw	r5,1200(sp)
10007160:	048001c4 	movi	r18,7
10007164:	00000306 	br	10007174 <___vfprintf_internal_r+0x7ac>
10007168:	9cfffc04 	addi	r19,r19,-16
1000716c:	42000204 	addi	r8,r8,8
10007170:	acc0110e 	bge	r21,r19,100071b8 <___vfprintf_internal_r+0x7f0>
10007174:	18c00404 	addi	r3,r3,16
10007178:	10800044 	addi	r2,r2,1
1000717c:	45000015 	stw	r20,0(r8)
10007180:	45400115 	stw	r21,4(r8)
10007184:	d8c12015 	stw	r3,1152(sp)
10007188:	d8811f15 	stw	r2,1148(sp)
1000718c:	90bff60e 	bge	r18,r2,10007168 <__alt_data_end+0xf8007168>
10007190:	b809883a 	mov	r4,r23
10007194:	b00b883a 	mov	r5,r22
10007198:	d9811e04 	addi	r6,sp,1144
1000719c:	000d28c0 	call	1000d28c <__sprint_r>
100071a0:	103f211e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
100071a4:	9cfffc04 	addi	r19,r19,-16
100071a8:	d8c12017 	ldw	r3,1152(sp)
100071ac:	d8811f17 	ldw	r2,1148(sp)
100071b0:	da000404 	addi	r8,sp,16
100071b4:	acffef16 	blt	r21,r19,10007174 <__alt_data_end+0xf8007174>
100071b8:	d9012c17 	ldw	r4,1200(sp)
100071bc:	1cc7883a 	add	r3,r3,r19
100071c0:	10800044 	addi	r2,r2,1
100071c4:	41000015 	stw	r4,0(r8)
100071c8:	44c00115 	stw	r19,4(r8)
100071cc:	d8c12015 	stw	r3,1152(sp)
100071d0:	d8811f15 	stw	r2,1148(sp)
100071d4:	010001c4 	movi	r4,7
100071d8:	20828216 	blt	r4,r2,10007be4 <___vfprintf_internal_r+0x121c>
100071dc:	42000204 	addi	r8,r8,8
100071e0:	e080400c 	andi	r2,fp,256
100071e4:	1001ac1e 	bne	r2,zero,10007898 <___vfprintf_internal_r+0xed0>
100071e8:	d8811f17 	ldw	r2,1148(sp)
100071ec:	d9413117 	ldw	r5,1220(sp)
100071f0:	1c47883a 	add	r3,r3,r17
100071f4:	10800044 	addi	r2,r2,1
100071f8:	41400015 	stw	r5,0(r8)
100071fc:	44400115 	stw	r17,4(r8)
10007200:	d8c12015 	stw	r3,1152(sp)
10007204:	d8811f15 	stw	r2,1148(sp)
10007208:	010001c4 	movi	r4,7
1000720c:	20825d16 	blt	r4,r2,10007b84 <___vfprintf_internal_r+0x11bc>
10007210:	42000204 	addi	r8,r8,8
10007214:	e080010c 	andi	r2,fp,4
10007218:	10003126 	beq	r2,zero,100072e0 <___vfprintf_internal_r+0x918>
1000721c:	d8812e17 	ldw	r2,1208(sp)
10007220:	d9012b17 	ldw	r4,1196(sp)
10007224:	1121c83a 	sub	r16,r2,r4
10007228:	04002d0e 	bge	zero,r16,100072e0 <___vfprintf_internal_r+0x918>
1000722c:	04400404 	movi	r17,16
10007230:	d8811f17 	ldw	r2,1148(sp)
10007234:	8c05340e 	bge	r17,r16,10008708 <___vfprintf_internal_r+0x1d40>
10007238:	01040074 	movhi	r4,4097
1000723c:	21094c84 	addi	r4,r4,9522
10007240:	d9013615 	stw	r4,1240(sp)
10007244:	048001c4 	movi	r18,7
10007248:	00000306 	br	10007258 <___vfprintf_internal_r+0x890>
1000724c:	843ffc04 	addi	r16,r16,-16
10007250:	42000204 	addi	r8,r8,8
10007254:	8c00130e 	bge	r17,r16,100072a4 <___vfprintf_internal_r+0x8dc>
10007258:	01440074 	movhi	r5,4097
1000725c:	18c00404 	addi	r3,r3,16
10007260:	10800044 	addi	r2,r2,1
10007264:	29494c84 	addi	r5,r5,9522
10007268:	41400015 	stw	r5,0(r8)
1000726c:	44400115 	stw	r17,4(r8)
10007270:	d8c12015 	stw	r3,1152(sp)
10007274:	d8811f15 	stw	r2,1148(sp)
10007278:	90bff40e 	bge	r18,r2,1000724c <__alt_data_end+0xf800724c>
1000727c:	b809883a 	mov	r4,r23
10007280:	b00b883a 	mov	r5,r22
10007284:	d9811e04 	addi	r6,sp,1144
10007288:	000d28c0 	call	1000d28c <__sprint_r>
1000728c:	103ee61e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007290:	843ffc04 	addi	r16,r16,-16
10007294:	d8c12017 	ldw	r3,1152(sp)
10007298:	d8811f17 	ldw	r2,1148(sp)
1000729c:	da000404 	addi	r8,sp,16
100072a0:	8c3fed16 	blt	r17,r16,10007258 <__alt_data_end+0xf8007258>
100072a4:	d9013617 	ldw	r4,1240(sp)
100072a8:	1c07883a 	add	r3,r3,r16
100072ac:	10800044 	addi	r2,r2,1
100072b0:	41000015 	stw	r4,0(r8)
100072b4:	44000115 	stw	r16,4(r8)
100072b8:	d8c12015 	stw	r3,1152(sp)
100072bc:	d8811f15 	stw	r2,1148(sp)
100072c0:	010001c4 	movi	r4,7
100072c4:	2080060e 	bge	r4,r2,100072e0 <___vfprintf_internal_r+0x918>
100072c8:	b809883a 	mov	r4,r23
100072cc:	b00b883a 	mov	r5,r22
100072d0:	d9811e04 	addi	r6,sp,1144
100072d4:	000d28c0 	call	1000d28c <__sprint_r>
100072d8:	103ed31e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
100072dc:	d8c12017 	ldw	r3,1152(sp)
100072e0:	df012b17 	ldw	fp,1196(sp)
100072e4:	d9412e17 	ldw	r5,1208(sp)
100072e8:	e140010e 	bge	fp,r5,100072f0 <___vfprintf_internal_r+0x928>
100072ec:	2839883a 	mov	fp,r5
100072f0:	d8812f17 	ldw	r2,1212(sp)
100072f4:	1705883a 	add	r2,r2,fp
100072f8:	d8812f15 	stw	r2,1212(sp)
100072fc:	1802291e 	bne	r3,zero,10007ba4 <___vfprintf_internal_r+0x11dc>
10007300:	d8c12a17 	ldw	r3,1192(sp)
10007304:	d8011f15 	stw	zero,1148(sp)
10007308:	da000404 	addi	r8,sp,16
1000730c:	18800007 	ldb	r2,0(r3)
10007310:	103ded1e 	bne	r2,zero,10006ac8 <__alt_data_end+0xf8006ac8>
10007314:	dc012a17 	ldw	r16,1192(sp)
10007318:	003e0506 	br	10006b30 <__alt_data_end+0xf8006b30>
1000731c:	d9012d17 	ldw	r4,1204(sp)
10007320:	d9412d17 	ldw	r5,1204(sp)
10007324:	da012a17 	ldw	r8,1192(sp)
10007328:	21000017 	ldw	r4,0(r4)
1000732c:	29400117 	ldw	r5,4(r5)
10007330:	df012a15 	stw	fp,1192(sp)
10007334:	9839883a 	mov	fp,r19
10007338:	dcc12b03 	ldbu	r19,1196(sp)
1000733c:	d9013715 	stw	r4,1244(sp)
10007340:	d9413915 	stw	r5,1252(sp)
10007344:	da013f15 	stw	r8,1276(sp)
10007348:	da413e15 	stw	r9,1272(sp)
1000734c:	dcc12785 	stb	r19,1182(sp)
10007350:	0002d540 	call	10002d54 <__fpclassifyd>
10007354:	d8c12d17 	ldw	r3,1204(sp)
10007358:	04400044 	movi	r17,1
1000735c:	da013f17 	ldw	r8,1276(sp)
10007360:	1c800204 	addi	r18,r3,8
10007364:	da413e17 	ldw	r9,1272(sp)
10007368:	d9013717 	ldw	r4,1244(sp)
1000736c:	d9413917 	ldw	r5,1252(sp)
10007370:	1443451e 	bne	r2,r17,10008088 <___vfprintf_internal_r+0x16c0>
10007374:	000d883a 	mov	r6,zero
10007378:	000f883a 	mov	r7,zero
1000737c:	00054580 	call	10005458 <__ledf2>
10007380:	da013f17 	ldw	r8,1276(sp)
10007384:	1004fe16 	blt	r2,zero,10008780 <___vfprintf_internal_r+0x1db8>
10007388:	dcc12783 	ldbu	r19,1182(sp)
1000738c:	008011c4 	movi	r2,71
10007390:	14045d0e 	bge	r2,r16,10008508 <___vfprintf_internal_r+0x1b40>
10007394:	01440074 	movhi	r5,4097
10007398:	29493904 	addi	r5,r5,9444
1000739c:	d9413115 	stw	r5,1220(sp)
100073a0:	00c000c4 	movi	r3,3
100073a4:	00bfdfc4 	movi	r2,-129
100073a8:	d8c12b15 	stw	r3,1196(sp)
100073ac:	e0b8703a 	and	fp,fp,r2
100073b0:	dc812d15 	stw	r18,1204(sp)
100073b4:	1823883a 	mov	r17,r3
100073b8:	d8013215 	stw	zero,1224(sp)
100073bc:	d8013415 	stw	zero,1232(sp)
100073c0:	003f0106 	br	10006fc8 <__alt_data_end+0xf8006fc8>
100073c4:	9cc00214 	ori	r19,r19,8
100073c8:	e005883a 	mov	r2,fp
100073cc:	e4000007 	ldb	r16,0(fp)
100073d0:	003de506 	br	10006b68 <__alt_data_end+0xf8006b68>
100073d4:	da012a17 	ldw	r8,1192(sp)
100073d8:	df012a15 	stw	fp,1192(sp)
100073dc:	9f000414 	ori	fp,r19,16
100073e0:	e0c0080c 	andi	r3,fp,32
100073e4:	d8812d17 	ldw	r2,1204(sp)
100073e8:	18007626 	beq	r3,zero,100075c4 <___vfprintf_internal_r+0xbfc>
100073ec:	d9412d17 	ldw	r5,1204(sp)
100073f0:	14800017 	ldw	r18,0(r2)
100073f4:	15400117 	ldw	r21,4(r2)
100073f8:	29400204 	addi	r5,r5,8
100073fc:	d9412d15 	stw	r5,1204(sp)
10007400:	0005883a 	mov	r2,zero
10007404:	9546b03a 	or	r3,r18,r21
10007408:	d8012785 	stb	zero,1182(sp)
1000740c:	da413215 	stw	r9,1224(sp)
10007410:	0027883a 	mov	r19,zero
10007414:	003ecd06 	br	10006f4c <__alt_data_end+0xf8006f4c>
10007418:	da012a17 	ldw	r8,1192(sp)
1000741c:	df012a15 	stw	fp,1192(sp)
10007420:	9f000414 	ori	fp,r19,16
10007424:	e0c0080c 	andi	r3,fp,32
10007428:	d8812d17 	ldw	r2,1204(sp)
1000742c:	18002c26 	beq	r3,zero,100074e0 <___vfprintf_internal_r+0xb18>
10007430:	d9012d17 	ldw	r4,1204(sp)
10007434:	14800017 	ldw	r18,0(r2)
10007438:	15400117 	ldw	r21,4(r2)
1000743c:	21000204 	addi	r4,r4,8
10007440:	d9012d15 	stw	r4,1204(sp)
10007444:	00800044 	movi	r2,1
10007448:	9546b03a 	or	r3,r18,r21
1000744c:	003fee06 	br	10007408 <__alt_data_end+0xf8007408>
10007450:	da012a17 	ldw	r8,1192(sp)
10007454:	df012a15 	stw	fp,1192(sp)
10007458:	9839883a 	mov	fp,r19
1000745c:	dcc12b03 	ldbu	r19,1196(sp)
10007460:	01440074 	movhi	r5,4097
10007464:	29493c04 	addi	r5,r5,9456
10007468:	dcc12785 	stb	r19,1182(sp)
1000746c:	d9413b15 	stw	r5,1260(sp)
10007470:	e0c0080c 	andi	r3,fp,32
10007474:	d8812d17 	ldw	r2,1204(sp)
10007478:	18002e26 	beq	r3,zero,10007534 <___vfprintf_internal_r+0xb6c>
1000747c:	d9412d17 	ldw	r5,1204(sp)
10007480:	14800017 	ldw	r18,0(r2)
10007484:	15400117 	ldw	r21,4(r2)
10007488:	29400204 	addi	r5,r5,8
1000748c:	d9412d15 	stw	r5,1204(sp)
10007490:	e080004c 	andi	r2,fp,1
10007494:	10025c26 	beq	r2,zero,10007e08 <___vfprintf_internal_r+0x1440>
10007498:	9546b03a 	or	r3,r18,r21
1000749c:	18038f26 	beq	r3,zero,100082dc <___vfprintf_internal_r+0x1914>
100074a0:	00800c04 	movi	r2,48
100074a4:	d8812705 	stb	r2,1180(sp)
100074a8:	dc012745 	stb	r16,1181(sp)
100074ac:	e7000094 	ori	fp,fp,2
100074b0:	00800084 	movi	r2,2
100074b4:	003fd406 	br	10007408 <__alt_data_end+0xf8007408>
100074b8:	9cc00814 	ori	r19,r19,32
100074bc:	e005883a 	mov	r2,fp
100074c0:	e4000007 	ldb	r16,0(fp)
100074c4:	003da806 	br	10006b68 <__alt_data_end+0xf8006b68>
100074c8:	da012a17 	ldw	r8,1192(sp)
100074cc:	df012a15 	stw	fp,1192(sp)
100074d0:	9839883a 	mov	fp,r19
100074d4:	e0c0080c 	andi	r3,fp,32
100074d8:	d8812d17 	ldw	r2,1204(sp)
100074dc:	183fd41e 	bne	r3,zero,10007430 <__alt_data_end+0xf8007430>
100074e0:	e0c0040c 	andi	r3,fp,16
100074e4:	18035f26 	beq	r3,zero,10008264 <___vfprintf_internal_r+0x189c>
100074e8:	d9412d17 	ldw	r5,1204(sp)
100074ec:	14800017 	ldw	r18,0(r2)
100074f0:	002b883a 	mov	r21,zero
100074f4:	29400104 	addi	r5,r5,4
100074f8:	d9412d15 	stw	r5,1204(sp)
100074fc:	00800044 	movi	r2,1
10007500:	9007883a 	mov	r3,r18
10007504:	003fc006 	br	10007408 <__alt_data_end+0xf8007408>
10007508:	da012a17 	ldw	r8,1192(sp)
1000750c:	df012a15 	stw	fp,1192(sp)
10007510:	9839883a 	mov	fp,r19
10007514:	dcc12b03 	ldbu	r19,1196(sp)
10007518:	01040074 	movhi	r4,4097
1000751c:	21094104 	addi	r4,r4,9476
10007520:	d9013b15 	stw	r4,1260(sp)
10007524:	dcc12785 	stb	r19,1182(sp)
10007528:	e0c0080c 	andi	r3,fp,32
1000752c:	d8812d17 	ldw	r2,1204(sp)
10007530:	183fd21e 	bne	r3,zero,1000747c <__alt_data_end+0xf800747c>
10007534:	e0c0040c 	andi	r3,fp,16
10007538:	18035426 	beq	r3,zero,1000828c <___vfprintf_internal_r+0x18c4>
1000753c:	d8c12d17 	ldw	r3,1204(sp)
10007540:	14800017 	ldw	r18,0(r2)
10007544:	002b883a 	mov	r21,zero
10007548:	18c00104 	addi	r3,r3,4
1000754c:	d8c12d15 	stw	r3,1204(sp)
10007550:	003fcf06 	br	10007490 <__alt_data_end+0xf8007490>
10007554:	e4000007 	ldb	r16,0(fp)
10007558:	00801b04 	movi	r2,108
1000755c:	8083f726 	beq	r16,r2,1000853c <___vfprintf_internal_r+0x1b74>
10007560:	9cc00414 	ori	r19,r19,16
10007564:	e005883a 	mov	r2,fp
10007568:	003d7f06 	br	10006b68 <__alt_data_end+0xf8006b68>
1000756c:	da012a17 	ldw	r8,1192(sp)
10007570:	df012a15 	stw	fp,1192(sp)
10007574:	9839883a 	mov	fp,r19
10007578:	dcc12b03 	ldbu	r19,1196(sp)
1000757c:	e080080c 	andi	r2,fp,32
10007580:	dcc12785 	stb	r19,1182(sp)
10007584:	10032226 	beq	r2,zero,10008210 <___vfprintf_internal_r+0x1848>
10007588:	d9412d17 	ldw	r5,1204(sp)
1000758c:	d9012f17 	ldw	r4,1212(sp)
10007590:	28800017 	ldw	r2,0(r5)
10007594:	2007d7fa 	srai	r3,r4,31
10007598:	29400104 	addi	r5,r5,4
1000759c:	d9412d15 	stw	r5,1204(sp)
100075a0:	11000015 	stw	r4,0(r2)
100075a4:	10c00115 	stw	r3,4(r2)
100075a8:	003d4406 	br	10006abc <__alt_data_end+0xf8006abc>
100075ac:	da012a17 	ldw	r8,1192(sp)
100075b0:	df012a15 	stw	fp,1192(sp)
100075b4:	9839883a 	mov	fp,r19
100075b8:	e0c0080c 	andi	r3,fp,32
100075bc:	d8812d17 	ldw	r2,1204(sp)
100075c0:	183f8a1e 	bne	r3,zero,100073ec <__alt_data_end+0xf80073ec>
100075c4:	e0c0040c 	andi	r3,fp,16
100075c8:	18031c26 	beq	r3,zero,1000823c <___vfprintf_internal_r+0x1874>
100075cc:	14800017 	ldw	r18,0(r2)
100075d0:	d8812d17 	ldw	r2,1204(sp)
100075d4:	002b883a 	mov	r21,zero
100075d8:	9007883a 	mov	r3,r18
100075dc:	10800104 	addi	r2,r2,4
100075e0:	d8812d15 	stw	r2,1204(sp)
100075e4:	0005883a 	mov	r2,zero
100075e8:	003f8706 	br	10007408 <__alt_data_end+0xf8007408>
100075ec:	d9412d17 	ldw	r5,1204(sp)
100075f0:	00800c04 	movi	r2,48
100075f4:	d8812705 	stb	r2,1180(sp)
100075f8:	2c800017 	ldw	r18,0(r5)
100075fc:	00801e04 	movi	r2,120
10007600:	d8812745 	stb	r2,1181(sp)
10007604:	00840074 	movhi	r2,4097
10007608:	10894104 	addi	r2,r2,9476
1000760c:	29400104 	addi	r5,r5,4
10007610:	da012a17 	ldw	r8,1192(sp)
10007614:	d8813b15 	stw	r2,1260(sp)
10007618:	df012a15 	stw	fp,1192(sp)
1000761c:	002b883a 	mov	r21,zero
10007620:	9f000094 	ori	fp,r19,2
10007624:	d9412d15 	stw	r5,1204(sp)
10007628:	00800084 	movi	r2,2
1000762c:	04001e04 	movi	r16,120
10007630:	9007883a 	mov	r3,r18
10007634:	003f7406 	br	10007408 <__alt_data_end+0xf8007408>
10007638:	da012a17 	ldw	r8,1192(sp)
1000763c:	df012a15 	stw	fp,1192(sp)
10007640:	9839883a 	mov	fp,r19
10007644:	dcc12b03 	ldbu	r19,1196(sp)
10007648:	e080080c 	andi	r2,fp,32
1000764c:	d8c12d17 	ldw	r3,1204(sp)
10007650:	dcc12785 	stb	r19,1182(sp)
10007654:	103e321e 	bne	r2,zero,10006f20 <__alt_data_end+0xf8006f20>
10007658:	e080040c 	andi	r2,fp,16
1000765c:	10031326 	beq	r2,zero,100082ac <___vfprintf_internal_r+0x18e4>
10007660:	1c800017 	ldw	r18,0(r3)
10007664:	d9412d17 	ldw	r5,1204(sp)
10007668:	902bd7fa 	srai	r21,r18,31
1000766c:	29400104 	addi	r5,r5,4
10007670:	d9412d15 	stw	r5,1204(sp)
10007674:	a805883a 	mov	r2,r21
10007678:	003e2f06 	br	10006f38 <__alt_data_end+0xf8006f38>
1000767c:	9cc01014 	ori	r19,r19,64
10007680:	e005883a 	mov	r2,fp
10007684:	e4000007 	ldb	r16,0(fp)
10007688:	003d3706 	br	10006b68 <__alt_data_end+0xf8006b68>
1000768c:	d8c12d17 	ldw	r3,1204(sp)
10007690:	d9012d17 	ldw	r4,1204(sp)
10007694:	da012a17 	ldw	r8,1192(sp)
10007698:	18800017 	ldw	r2,0(r3)
1000769c:	21000104 	addi	r4,r4,4
100076a0:	00c00044 	movi	r3,1
100076a4:	df012a15 	stw	fp,1192(sp)
100076a8:	d8c12b15 	stw	r3,1196(sp)
100076ac:	9839883a 	mov	fp,r19
100076b0:	d8012785 	stb	zero,1182(sp)
100076b4:	d8810405 	stb	r2,1040(sp)
100076b8:	d9012d15 	stw	r4,1204(sp)
100076bc:	1823883a 	mov	r17,r3
100076c0:	d8c10404 	addi	r3,sp,1040
100076c4:	d8013215 	stw	zero,1224(sp)
100076c8:	d8013415 	stw	zero,1232(sp)
100076cc:	d8c13115 	stw	r3,1220(sp)
100076d0:	0005883a 	mov	r2,zero
100076d4:	003e4306 	br	10006fe4 <__alt_data_end+0xf8006fe4>
100076d8:	d8812b07 	ldb	r2,1196(sp)
100076dc:	1002fc1e 	bne	r2,zero,100082d0 <___vfprintf_internal_r+0x1908>
100076e0:	00c00804 	movi	r3,32
100076e4:	d8c12b05 	stb	r3,1196(sp)
100076e8:	e005883a 	mov	r2,fp
100076ec:	e4000007 	ldb	r16,0(fp)
100076f0:	003d1d06 	br	10006b68 <__alt_data_end+0xf8006b68>
100076f4:	9cc00054 	ori	r19,r19,1
100076f8:	e005883a 	mov	r2,fp
100076fc:	e4000007 	ldb	r16,0(fp)
10007700:	003d1906 	br	10006b68 <__alt_data_end+0xf8006b68>
10007704:	d9012d17 	ldw	r4,1204(sp)
10007708:	d9412d17 	ldw	r5,1204(sp)
1000770c:	21000017 	ldw	r4,0(r4)
10007710:	28c00104 	addi	r3,r5,4
10007714:	d9012e15 	stw	r4,1208(sp)
10007718:	20038c16 	blt	r4,zero,1000854c <___vfprintf_internal_r+0x1b84>
1000771c:	d8c12d15 	stw	r3,1204(sp)
10007720:	e005883a 	mov	r2,fp
10007724:	e4000007 	ldb	r16,0(fp)
10007728:	003d0f06 	br	10006b68 <__alt_data_end+0xf8006b68>
1000772c:	00c00ac4 	movi	r3,43
10007730:	d8c12b05 	stb	r3,1196(sp)
10007734:	e005883a 	mov	r2,fp
10007738:	e4000007 	ldb	r16,0(fp)
1000773c:	003d0a06 	br	10006b68 <__alt_data_end+0xf8006b68>
10007740:	d8c12d17 	ldw	r3,1204(sp)
10007744:	d9012d17 	ldw	r4,1204(sp)
10007748:	da012a17 	ldw	r8,1192(sp)
1000774c:	18c00017 	ldw	r3,0(r3)
10007750:	df012a15 	stw	fp,1192(sp)
10007754:	d8012785 	stb	zero,1182(sp)
10007758:	d8c13115 	stw	r3,1220(sp)
1000775c:	9839883a 	mov	fp,r19
10007760:	24800104 	addi	r18,r4,4
10007764:	1803f726 	beq	r3,zero,10008744 <___vfprintf_internal_r+0x1d7c>
10007768:	d9013117 	ldw	r4,1220(sp)
1000776c:	48038916 	blt	r9,zero,10008594 <___vfprintf_internal_r+0x1bcc>
10007770:	480d883a 	mov	r6,r9
10007774:	000b883a 	mov	r5,zero
10007778:	da013f15 	stw	r8,1276(sp)
1000777c:	da413e15 	stw	r9,1272(sp)
10007780:	000bb380 	call	1000bb38 <memchr>
10007784:	da013f17 	ldw	r8,1276(sp)
10007788:	da413e17 	ldw	r9,1272(sp)
1000778c:	10045926 	beq	r2,zero,100088f4 <___vfprintf_internal_r+0x1f2c>
10007790:	d8c13117 	ldw	r3,1220(sp)
10007794:	10e3c83a 	sub	r17,r2,r3
10007798:	4c433516 	blt	r9,r17,10008470 <___vfprintf_internal_r+0x1aa8>
1000779c:	8805883a 	mov	r2,r17
100077a0:	88038116 	blt	r17,zero,100085a8 <___vfprintf_internal_r+0x1be0>
100077a4:	dcc12783 	ldbu	r19,1182(sp)
100077a8:	d8812b15 	stw	r2,1196(sp)
100077ac:	dc812d15 	stw	r18,1204(sp)
100077b0:	d8013215 	stw	zero,1224(sp)
100077b4:	d8013415 	stw	zero,1232(sp)
100077b8:	003e0306 	br	10006fc8 <__alt_data_end+0xf8006fc8>
100077bc:	da012a17 	ldw	r8,1192(sp)
100077c0:	df012a15 	stw	fp,1192(sp)
100077c4:	9839883a 	mov	fp,r19
100077c8:	dcc12b03 	ldbu	r19,1196(sp)
100077cc:	dcc12785 	stb	r19,1182(sp)
100077d0:	803d8f26 	beq	r16,zero,10006e10 <__alt_data_end+0xf8006e10>
100077d4:	00c00044 	movi	r3,1
100077d8:	d8c12b15 	stw	r3,1196(sp)
100077dc:	dc010405 	stb	r16,1040(sp)
100077e0:	d8012785 	stb	zero,1182(sp)
100077e4:	003fb506 	br	100076bc <__alt_data_end+0xf80076bc>
100077e8:	d8c12017 	ldw	r3,1152(sp)
100077ec:	003e3506 	br	100070c4 <__alt_data_end+0xf80070c4>
100077f0:	10803fcc 	andi	r2,r2,255
100077f4:	00c00044 	movi	r3,1
100077f8:	10fddc1e 	bne	r2,r3,10006f6c <__alt_data_end+0xf8006f6c>
100077fc:	a800021e 	bne	r21,zero,10007808 <___vfprintf_internal_r+0xe40>
10007800:	00800244 	movi	r2,9
10007804:	14801e2e 	bgeu	r2,r18,10007880 <___vfprintf_internal_r+0xeb8>
10007808:	dc012b15 	stw	r16,1196(sp)
1000780c:	dc410e04 	addi	r17,sp,1080
10007810:	9021883a 	mov	r16,r18
10007814:	da012c15 	stw	r8,1200(sp)
10007818:	a825883a 	mov	r18,r21
1000781c:	482b883a 	mov	r21,r9
10007820:	8009883a 	mov	r4,r16
10007824:	900b883a 	mov	r5,r18
10007828:	01800284 	movi	r6,10
1000782c:	000f883a 	mov	r7,zero
10007830:	00039680 	call	10003968 <__umoddi3>
10007834:	10800c04 	addi	r2,r2,48
10007838:	8c7fffc4 	addi	r17,r17,-1
1000783c:	8009883a 	mov	r4,r16
10007840:	900b883a 	mov	r5,r18
10007844:	01800284 	movi	r6,10
10007848:	000f883a 	mov	r7,zero
1000784c:	88800005 	stb	r2,0(r17)
10007850:	00033280 	call	10003328 <__udivdi3>
10007854:	1021883a 	mov	r16,r2
10007858:	10c4b03a 	or	r2,r2,r3
1000785c:	1825883a 	mov	r18,r3
10007860:	103fef1e 	bne	r2,zero,10007820 <__alt_data_end+0xf8007820>
10007864:	d9012817 	ldw	r4,1184(sp)
10007868:	dc413115 	stw	r17,1220(sp)
1000786c:	dc012b17 	ldw	r16,1196(sp)
10007870:	da012c17 	ldw	r8,1200(sp)
10007874:	a813883a 	mov	r9,r21
10007878:	2463c83a 	sub	r17,r4,r17
1000787c:	003dcd06 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007880:	94800c04 	addi	r18,r18,48
10007884:	d8c10dc4 	addi	r3,sp,1079
10007888:	dc810dc5 	stb	r18,1079(sp)
1000788c:	dc413c17 	ldw	r17,1264(sp)
10007890:	d8c13115 	stw	r3,1220(sp)
10007894:	003dc706 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007898:	00801944 	movi	r2,101
1000789c:	1400720e 	bge	r2,r16,10007a68 <___vfprintf_internal_r+0x10a0>
100078a0:	d9013717 	ldw	r4,1244(sp)
100078a4:	d9413917 	ldw	r5,1252(sp)
100078a8:	000d883a 	mov	r6,zero
100078ac:	000f883a 	mov	r7,zero
100078b0:	d8c13d15 	stw	r3,1268(sp)
100078b4:	da013f15 	stw	r8,1276(sp)
100078b8:	00052f40 	call	100052f4 <__eqdf2>
100078bc:	d8c13d17 	ldw	r3,1268(sp)
100078c0:	da013f17 	ldw	r8,1276(sp)
100078c4:	1000f41e 	bne	r2,zero,10007c98 <___vfprintf_internal_r+0x12d0>
100078c8:	d8811f17 	ldw	r2,1148(sp)
100078cc:	01040074 	movhi	r4,4097
100078d0:	21094804 	addi	r4,r4,9504
100078d4:	18c00044 	addi	r3,r3,1
100078d8:	10800044 	addi	r2,r2,1
100078dc:	41000015 	stw	r4,0(r8)
100078e0:	01000044 	movi	r4,1
100078e4:	41000115 	stw	r4,4(r8)
100078e8:	d8c12015 	stw	r3,1152(sp)
100078ec:	d8811f15 	stw	r2,1148(sp)
100078f0:	010001c4 	movi	r4,7
100078f4:	20828d16 	blt	r4,r2,1000832c <___vfprintf_internal_r+0x1964>
100078f8:	42000204 	addi	r8,r8,8
100078fc:	d8812617 	ldw	r2,1176(sp)
10007900:	d9413317 	ldw	r5,1228(sp)
10007904:	11400216 	blt	r2,r5,10007910 <___vfprintf_internal_r+0xf48>
10007908:	e080004c 	andi	r2,fp,1
1000790c:	103e4126 	beq	r2,zero,10007214 <__alt_data_end+0xf8007214>
10007910:	d8813817 	ldw	r2,1248(sp)
10007914:	d9013517 	ldw	r4,1236(sp)
10007918:	d9413817 	ldw	r5,1248(sp)
1000791c:	1887883a 	add	r3,r3,r2
10007920:	d8811f17 	ldw	r2,1148(sp)
10007924:	41000015 	stw	r4,0(r8)
10007928:	41400115 	stw	r5,4(r8)
1000792c:	10800044 	addi	r2,r2,1
10007930:	d8c12015 	stw	r3,1152(sp)
10007934:	d8811f15 	stw	r2,1148(sp)
10007938:	010001c4 	movi	r4,7
1000793c:	20830916 	blt	r4,r2,10008564 <___vfprintf_internal_r+0x1b9c>
10007940:	42000204 	addi	r8,r8,8
10007944:	d8813317 	ldw	r2,1228(sp)
10007948:	143fffc4 	addi	r16,r2,-1
1000794c:	043e310e 	bge	zero,r16,10007214 <__alt_data_end+0xf8007214>
10007950:	04400404 	movi	r17,16
10007954:	d8811f17 	ldw	r2,1148(sp)
10007958:	8c007e0e 	bge	r17,r16,10007b54 <___vfprintf_internal_r+0x118c>
1000795c:	01440074 	movhi	r5,4097
10007960:	29494884 	addi	r5,r5,9506
10007964:	d9412c15 	stw	r5,1200(sp)
10007968:	04c001c4 	movi	r19,7
1000796c:	00000306 	br	1000797c <___vfprintf_internal_r+0xfb4>
10007970:	42000204 	addi	r8,r8,8
10007974:	843ffc04 	addi	r16,r16,-16
10007978:	8c00790e 	bge	r17,r16,10007b60 <___vfprintf_internal_r+0x1198>
1000797c:	18c00404 	addi	r3,r3,16
10007980:	10800044 	addi	r2,r2,1
10007984:	45000015 	stw	r20,0(r8)
10007988:	44400115 	stw	r17,4(r8)
1000798c:	d8c12015 	stw	r3,1152(sp)
10007990:	d8811f15 	stw	r2,1148(sp)
10007994:	98bff60e 	bge	r19,r2,10007970 <__alt_data_end+0xf8007970>
10007998:	b809883a 	mov	r4,r23
1000799c:	b00b883a 	mov	r5,r22
100079a0:	d9811e04 	addi	r6,sp,1144
100079a4:	000d28c0 	call	1000d28c <__sprint_r>
100079a8:	103d1f1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
100079ac:	d8c12017 	ldw	r3,1152(sp)
100079b0:	d8811f17 	ldw	r2,1148(sp)
100079b4:	da000404 	addi	r8,sp,16
100079b8:	003fee06 	br	10007974 <__alt_data_end+0xf8007974>
100079bc:	d9412e17 	ldw	r5,1208(sp)
100079c0:	d8812b17 	ldw	r2,1196(sp)
100079c4:	28a7c83a 	sub	r19,r5,r2
100079c8:	04fddc0e 	bge	zero,r19,1000713c <__alt_data_end+0xf800713c>
100079cc:	05400404 	movi	r21,16
100079d0:	d8811f17 	ldw	r2,1148(sp)
100079d4:	acc3870e 	bge	r21,r19,100087f4 <___vfprintf_internal_r+0x1e2c>
100079d8:	01440074 	movhi	r5,4097
100079dc:	29494884 	addi	r5,r5,9506
100079e0:	d9412c15 	stw	r5,1200(sp)
100079e4:	048001c4 	movi	r18,7
100079e8:	00000306 	br	100079f8 <___vfprintf_internal_r+0x1030>
100079ec:	9cfffc04 	addi	r19,r19,-16
100079f0:	42000204 	addi	r8,r8,8
100079f4:	acc0110e 	bge	r21,r19,10007a3c <___vfprintf_internal_r+0x1074>
100079f8:	18c00404 	addi	r3,r3,16
100079fc:	10800044 	addi	r2,r2,1
10007a00:	45000015 	stw	r20,0(r8)
10007a04:	45400115 	stw	r21,4(r8)
10007a08:	d8c12015 	stw	r3,1152(sp)
10007a0c:	d8811f15 	stw	r2,1148(sp)
10007a10:	90bff60e 	bge	r18,r2,100079ec <__alt_data_end+0xf80079ec>
10007a14:	b809883a 	mov	r4,r23
10007a18:	b00b883a 	mov	r5,r22
10007a1c:	d9811e04 	addi	r6,sp,1144
10007a20:	000d28c0 	call	1000d28c <__sprint_r>
10007a24:	103d001e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007a28:	9cfffc04 	addi	r19,r19,-16
10007a2c:	d8c12017 	ldw	r3,1152(sp)
10007a30:	d8811f17 	ldw	r2,1148(sp)
10007a34:	da000404 	addi	r8,sp,16
10007a38:	acffef16 	blt	r21,r19,100079f8 <__alt_data_end+0xf80079f8>
10007a3c:	d9012c17 	ldw	r4,1200(sp)
10007a40:	1cc7883a 	add	r3,r3,r19
10007a44:	10800044 	addi	r2,r2,1
10007a48:	41000015 	stw	r4,0(r8)
10007a4c:	44c00115 	stw	r19,4(r8)
10007a50:	d8c12015 	stw	r3,1152(sp)
10007a54:	d8811f15 	stw	r2,1148(sp)
10007a58:	010001c4 	movi	r4,7
10007a5c:	20817816 	blt	r4,r2,10008040 <___vfprintf_internal_r+0x1678>
10007a60:	42000204 	addi	r8,r8,8
10007a64:	003db506 	br	1000713c <__alt_data_end+0xf800713c>
10007a68:	d9413317 	ldw	r5,1228(sp)
10007a6c:	00800044 	movi	r2,1
10007a70:	18c00044 	addi	r3,r3,1
10007a74:	11413e0e 	bge	r2,r5,10007f70 <___vfprintf_internal_r+0x15a8>
10007a78:	dc011f17 	ldw	r16,1148(sp)
10007a7c:	d8813117 	ldw	r2,1220(sp)
10007a80:	d8c12015 	stw	r3,1152(sp)
10007a84:	84000044 	addi	r16,r16,1
10007a88:	40800015 	stw	r2,0(r8)
10007a8c:	00800044 	movi	r2,1
10007a90:	40800115 	stw	r2,4(r8)
10007a94:	dc011f15 	stw	r16,1148(sp)
10007a98:	008001c4 	movi	r2,7
10007a9c:	14015616 	blt	r2,r16,10007ff8 <___vfprintf_internal_r+0x1630>
10007aa0:	42000204 	addi	r8,r8,8
10007aa4:	d9013817 	ldw	r4,1248(sp)
10007aa8:	d9413517 	ldw	r5,1236(sp)
10007aac:	84000044 	addi	r16,r16,1
10007ab0:	1907883a 	add	r3,r3,r4
10007ab4:	41400015 	stw	r5,0(r8)
10007ab8:	41000115 	stw	r4,4(r8)
10007abc:	d8c12015 	stw	r3,1152(sp)
10007ac0:	dc011f15 	stw	r16,1148(sp)
10007ac4:	008001c4 	movi	r2,7
10007ac8:	14015416 	blt	r2,r16,1000801c <___vfprintf_internal_r+0x1654>
10007acc:	44400204 	addi	r17,r8,8
10007ad0:	d9013717 	ldw	r4,1244(sp)
10007ad4:	d9413917 	ldw	r5,1252(sp)
10007ad8:	000d883a 	mov	r6,zero
10007adc:	000f883a 	mov	r7,zero
10007ae0:	d8c13d15 	stw	r3,1268(sp)
10007ae4:	00052f40 	call	100052f4 <__eqdf2>
10007ae8:	d8c13d17 	ldw	r3,1268(sp)
10007aec:	1000a726 	beq	r2,zero,10007d8c <___vfprintf_internal_r+0x13c4>
10007af0:	d9013317 	ldw	r4,1228(sp)
10007af4:	d9413117 	ldw	r5,1220(sp)
10007af8:	84000044 	addi	r16,r16,1
10007afc:	20bfffc4 	addi	r2,r4,-1
10007b00:	1887883a 	add	r3,r3,r2
10007b04:	29000044 	addi	r4,r5,1
10007b08:	88800115 	stw	r2,4(r17)
10007b0c:	89000015 	stw	r4,0(r17)
10007b10:	d8c12015 	stw	r3,1152(sp)
10007b14:	dc011f15 	stw	r16,1148(sp)
10007b18:	008001c4 	movi	r2,7
10007b1c:	14012d16 	blt	r2,r16,10007fd4 <___vfprintf_internal_r+0x160c>
10007b20:	8c400204 	addi	r17,r17,8
10007b24:	d9413a17 	ldw	r5,1256(sp)
10007b28:	dcc122c4 	addi	r19,sp,1163
10007b2c:	84000044 	addi	r16,r16,1
10007b30:	28c7883a 	add	r3,r5,r3
10007b34:	8cc00015 	stw	r19,0(r17)
10007b38:	89400115 	stw	r5,4(r17)
10007b3c:	d8c12015 	stw	r3,1152(sp)
10007b40:	dc011f15 	stw	r16,1148(sp)
10007b44:	008001c4 	movi	r2,7
10007b48:	14000e16 	blt	r2,r16,10007b84 <___vfprintf_internal_r+0x11bc>
10007b4c:	8a000204 	addi	r8,r17,8
10007b50:	003db006 	br	10007214 <__alt_data_end+0xf8007214>
10007b54:	01040074 	movhi	r4,4097
10007b58:	21094884 	addi	r4,r4,9506
10007b5c:	d9012c15 	stw	r4,1200(sp)
10007b60:	d9012c17 	ldw	r4,1200(sp)
10007b64:	1c07883a 	add	r3,r3,r16
10007b68:	44000115 	stw	r16,4(r8)
10007b6c:	41000015 	stw	r4,0(r8)
10007b70:	10800044 	addi	r2,r2,1
10007b74:	d8c12015 	stw	r3,1152(sp)
10007b78:	d8811f15 	stw	r2,1148(sp)
10007b7c:	010001c4 	movi	r4,7
10007b80:	20bda30e 	bge	r4,r2,10007210 <__alt_data_end+0xf8007210>
10007b84:	b809883a 	mov	r4,r23
10007b88:	b00b883a 	mov	r5,r22
10007b8c:	d9811e04 	addi	r6,sp,1144
10007b90:	000d28c0 	call	1000d28c <__sprint_r>
10007b94:	103ca41e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007b98:	d8c12017 	ldw	r3,1152(sp)
10007b9c:	da000404 	addi	r8,sp,16
10007ba0:	003d9c06 	br	10007214 <__alt_data_end+0xf8007214>
10007ba4:	b809883a 	mov	r4,r23
10007ba8:	b00b883a 	mov	r5,r22
10007bac:	d9811e04 	addi	r6,sp,1144
10007bb0:	000d28c0 	call	1000d28c <__sprint_r>
10007bb4:	103dd226 	beq	r2,zero,10007300 <__alt_data_end+0xf8007300>
10007bb8:	003c9b06 	br	10006e28 <__alt_data_end+0xf8006e28>
10007bbc:	10803fcc 	andi	r2,r2,255
10007bc0:	1000311e 	bne	r2,zero,10007c88 <___vfprintf_internal_r+0x12c0>
10007bc4:	e080004c 	andi	r2,fp,1
10007bc8:	10002f26 	beq	r2,zero,10007c88 <___vfprintf_internal_r+0x12c0>
10007bcc:	00800c04 	movi	r2,48
10007bd0:	d8c10dc4 	addi	r3,sp,1079
10007bd4:	d8810dc5 	stb	r2,1079(sp)
10007bd8:	dc413c17 	ldw	r17,1264(sp)
10007bdc:	d8c13115 	stw	r3,1220(sp)
10007be0:	003cf406 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007be4:	b809883a 	mov	r4,r23
10007be8:	b00b883a 	mov	r5,r22
10007bec:	d9811e04 	addi	r6,sp,1144
10007bf0:	000d28c0 	call	1000d28c <__sprint_r>
10007bf4:	103c8c1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007bf8:	d8c12017 	ldw	r3,1152(sp)
10007bfc:	da000404 	addi	r8,sp,16
10007c00:	003d7706 	br	100071e0 <__alt_data_end+0xf80071e0>
10007c04:	b809883a 	mov	r4,r23
10007c08:	b00b883a 	mov	r5,r22
10007c0c:	d9811e04 	addi	r6,sp,1144
10007c10:	000d28c0 	call	1000d28c <__sprint_r>
10007c14:	103c841e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007c18:	d8c12017 	ldw	r3,1152(sp)
10007c1c:	da000404 	addi	r8,sp,16
10007c20:	003d3506 	br	100070f8 <__alt_data_end+0xf80070f8>
10007c24:	b809883a 	mov	r4,r23
10007c28:	b00b883a 	mov	r5,r22
10007c2c:	d9811e04 	addi	r6,sp,1144
10007c30:	000d28c0 	call	1000d28c <__sprint_r>
10007c34:	103c7c1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007c38:	d8c12017 	ldw	r3,1152(sp)
10007c3c:	da000404 	addi	r8,sp,16
10007c40:	003d3b06 	br	10007130 <__alt_data_end+0xf8007130>
10007c44:	d9413b17 	ldw	r5,1260(sp)
10007c48:	d8c10e04 	addi	r3,sp,1080
10007c4c:	908003cc 	andi	r2,r18,15
10007c50:	a808973a 	slli	r4,r21,28
10007c54:	2885883a 	add	r2,r5,r2
10007c58:	9024d13a 	srli	r18,r18,4
10007c5c:	10800003 	ldbu	r2,0(r2)
10007c60:	a82ad13a 	srli	r21,r21,4
10007c64:	18ffffc4 	addi	r3,r3,-1
10007c68:	24a4b03a 	or	r18,r4,r18
10007c6c:	18800005 	stb	r2,0(r3)
10007c70:	9544b03a 	or	r2,r18,r21
10007c74:	103ff51e 	bne	r2,zero,10007c4c <__alt_data_end+0xf8007c4c>
10007c78:	d9412817 	ldw	r5,1184(sp)
10007c7c:	d8c13115 	stw	r3,1220(sp)
10007c80:	28e3c83a 	sub	r17,r5,r3
10007c84:	003ccb06 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007c88:	d8c10e04 	addi	r3,sp,1080
10007c8c:	0023883a 	mov	r17,zero
10007c90:	d8c13115 	stw	r3,1220(sp)
10007c94:	003cc706 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007c98:	dc012617 	ldw	r16,1176(sp)
10007c9c:	0401ab0e 	bge	zero,r16,1000834c <___vfprintf_internal_r+0x1984>
10007ca0:	d8813317 	ldw	r2,1228(sp)
10007ca4:	d9413117 	ldw	r5,1220(sp)
10007ca8:	d9013417 	ldw	r4,1232(sp)
10007cac:	1023883a 	mov	r17,r2
10007cb0:	28a1883a 	add	r16,r5,r2
10007cb4:	2080010e 	bge	r4,r2,10007cbc <___vfprintf_internal_r+0x12f4>
10007cb8:	2023883a 	mov	r17,r4
10007cbc:	04400b0e 	bge	zero,r17,10007cec <___vfprintf_internal_r+0x1324>
10007cc0:	d8811f17 	ldw	r2,1148(sp)
10007cc4:	d9413117 	ldw	r5,1220(sp)
10007cc8:	1c47883a 	add	r3,r3,r17
10007ccc:	10800044 	addi	r2,r2,1
10007cd0:	41400015 	stw	r5,0(r8)
10007cd4:	44400115 	stw	r17,4(r8)
10007cd8:	d8c12015 	stw	r3,1152(sp)
10007cdc:	d8811f15 	stw	r2,1148(sp)
10007ce0:	010001c4 	movi	r4,7
10007ce4:	20826716 	blt	r4,r2,10008684 <___vfprintf_internal_r+0x1cbc>
10007ce8:	42000204 	addi	r8,r8,8
10007cec:	88026316 	blt	r17,zero,1000867c <___vfprintf_internal_r+0x1cb4>
10007cf0:	d8813417 	ldw	r2,1232(sp)
10007cf4:	1463c83a 	sub	r17,r2,r17
10007cf8:	0440590e 	bge	zero,r17,10007e60 <___vfprintf_internal_r+0x1498>
10007cfc:	04c00404 	movi	r19,16
10007d00:	d8811f17 	ldw	r2,1148(sp)
10007d04:	9c41770e 	bge	r19,r17,100082e4 <___vfprintf_internal_r+0x191c>
10007d08:	01440074 	movhi	r5,4097
10007d0c:	29494884 	addi	r5,r5,9506
10007d10:	d9412c15 	stw	r5,1200(sp)
10007d14:	054001c4 	movi	r21,7
10007d18:	00000306 	br	10007d28 <___vfprintf_internal_r+0x1360>
10007d1c:	42000204 	addi	r8,r8,8
10007d20:	8c7ffc04 	addi	r17,r17,-16
10007d24:	9c41720e 	bge	r19,r17,100082f0 <___vfprintf_internal_r+0x1928>
10007d28:	18c00404 	addi	r3,r3,16
10007d2c:	10800044 	addi	r2,r2,1
10007d30:	45000015 	stw	r20,0(r8)
10007d34:	44c00115 	stw	r19,4(r8)
10007d38:	d8c12015 	stw	r3,1152(sp)
10007d3c:	d8811f15 	stw	r2,1148(sp)
10007d40:	a8bff60e 	bge	r21,r2,10007d1c <__alt_data_end+0xf8007d1c>
10007d44:	b809883a 	mov	r4,r23
10007d48:	b00b883a 	mov	r5,r22
10007d4c:	d9811e04 	addi	r6,sp,1144
10007d50:	000d28c0 	call	1000d28c <__sprint_r>
10007d54:	103c341e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007d58:	d8c12017 	ldw	r3,1152(sp)
10007d5c:	d8811f17 	ldw	r2,1148(sp)
10007d60:	da000404 	addi	r8,sp,16
10007d64:	003fee06 	br	10007d20 <__alt_data_end+0xf8007d20>
10007d68:	b809883a 	mov	r4,r23
10007d6c:	b00b883a 	mov	r5,r22
10007d70:	d9811e04 	addi	r6,sp,1144
10007d74:	000d28c0 	call	1000d28c <__sprint_r>
10007d78:	103c2b1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007d7c:	d8c12017 	ldw	r3,1152(sp)
10007d80:	d8812787 	ldb	r2,1182(sp)
10007d84:	da000404 	addi	r8,sp,16
10007d88:	003cce06 	br	100070c4 <__alt_data_end+0xf80070c4>
10007d8c:	d8813317 	ldw	r2,1228(sp)
10007d90:	14ffffc4 	addi	r19,r2,-1
10007d94:	04ff630e 	bge	zero,r19,10007b24 <__alt_data_end+0xf8007b24>
10007d98:	05400404 	movi	r21,16
10007d9c:	acc0810e 	bge	r21,r19,10007fa4 <___vfprintf_internal_r+0x15dc>
10007da0:	01440074 	movhi	r5,4097
10007da4:	29494884 	addi	r5,r5,9506
10007da8:	d9412c15 	stw	r5,1200(sp)
10007dac:	01c001c4 	movi	r7,7
10007db0:	00000306 	br	10007dc0 <___vfprintf_internal_r+0x13f8>
10007db4:	8c400204 	addi	r17,r17,8
10007db8:	9cfffc04 	addi	r19,r19,-16
10007dbc:	acc07c0e 	bge	r21,r19,10007fb0 <___vfprintf_internal_r+0x15e8>
10007dc0:	18c00404 	addi	r3,r3,16
10007dc4:	84000044 	addi	r16,r16,1
10007dc8:	8d000015 	stw	r20,0(r17)
10007dcc:	8d400115 	stw	r21,4(r17)
10007dd0:	d8c12015 	stw	r3,1152(sp)
10007dd4:	dc011f15 	stw	r16,1148(sp)
10007dd8:	3c3ff60e 	bge	r7,r16,10007db4 <__alt_data_end+0xf8007db4>
10007ddc:	b809883a 	mov	r4,r23
10007de0:	b00b883a 	mov	r5,r22
10007de4:	d9811e04 	addi	r6,sp,1144
10007de8:	d9c13d15 	stw	r7,1268(sp)
10007dec:	000d28c0 	call	1000d28c <__sprint_r>
10007df0:	d9c13d17 	ldw	r7,1268(sp)
10007df4:	103c0c1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007df8:	d8c12017 	ldw	r3,1152(sp)
10007dfc:	dc011f17 	ldw	r16,1148(sp)
10007e00:	dc400404 	addi	r17,sp,16
10007e04:	003fec06 	br	10007db8 <__alt_data_end+0xf8007db8>
10007e08:	00800084 	movi	r2,2
10007e0c:	9546b03a 	or	r3,r18,r21
10007e10:	003d7d06 	br	10007408 <__alt_data_end+0xf8007408>
10007e14:	10803fcc 	andi	r2,r2,255
10007e18:	1080201c 	xori	r2,r2,128
10007e1c:	10bfe004 	addi	r2,r2,-128
10007e20:	01000c04 	movi	r4,48
10007e24:	1101d726 	beq	r2,r4,10008584 <___vfprintf_internal_r+0x1bbc>
10007e28:	d9413117 	ldw	r5,1220(sp)
10007e2c:	d8812817 	ldw	r2,1184(sp)
10007e30:	193fffc5 	stb	r4,-1(r3)
10007e34:	297fffc4 	addi	r5,r5,-1
10007e38:	d9413115 	stw	r5,1220(sp)
10007e3c:	1163c83a 	sub	r17,r2,r5
10007e40:	003c5c06 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10007e44:	b809883a 	mov	r4,r23
10007e48:	b00b883a 	mov	r5,r22
10007e4c:	d9811e04 	addi	r6,sp,1144
10007e50:	000d28c0 	call	1000d28c <__sprint_r>
10007e54:	103bf41e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007e58:	d8c12017 	ldw	r3,1152(sp)
10007e5c:	da000404 	addi	r8,sp,16
10007e60:	d9413117 	ldw	r5,1220(sp)
10007e64:	d9013417 	ldw	r4,1232(sp)
10007e68:	d8812617 	ldw	r2,1176(sp)
10007e6c:	2923883a 	add	r17,r5,r4
10007e70:	d9413317 	ldw	r5,1228(sp)
10007e74:	11400216 	blt	r2,r5,10007e80 <___vfprintf_internal_r+0x14b8>
10007e78:	e100004c 	andi	r4,fp,1
10007e7c:	20000d26 	beq	r4,zero,10007eb4 <___vfprintf_internal_r+0x14ec>
10007e80:	d9013817 	ldw	r4,1248(sp)
10007e84:	d9413517 	ldw	r5,1236(sp)
10007e88:	1907883a 	add	r3,r3,r4
10007e8c:	d9011f17 	ldw	r4,1148(sp)
10007e90:	41400015 	stw	r5,0(r8)
10007e94:	d9413817 	ldw	r5,1248(sp)
10007e98:	21000044 	addi	r4,r4,1
10007e9c:	d8c12015 	stw	r3,1152(sp)
10007ea0:	41400115 	stw	r5,4(r8)
10007ea4:	d9011f15 	stw	r4,1148(sp)
10007ea8:	014001c4 	movi	r5,7
10007eac:	2901fd16 	blt	r5,r4,100086a4 <___vfprintf_internal_r+0x1cdc>
10007eb0:	42000204 	addi	r8,r8,8
10007eb4:	d9013317 	ldw	r4,1228(sp)
10007eb8:	2085c83a 	sub	r2,r4,r2
10007ebc:	8449c83a 	sub	r4,r16,r17
10007ec0:	1021883a 	mov	r16,r2
10007ec4:	2080010e 	bge	r4,r2,10007ecc <___vfprintf_internal_r+0x1504>
10007ec8:	2021883a 	mov	r16,r4
10007ecc:	04000a0e 	bge	zero,r16,10007ef8 <___vfprintf_internal_r+0x1530>
10007ed0:	d9011f17 	ldw	r4,1148(sp)
10007ed4:	1c07883a 	add	r3,r3,r16
10007ed8:	44400015 	stw	r17,0(r8)
10007edc:	21000044 	addi	r4,r4,1
10007ee0:	44000115 	stw	r16,4(r8)
10007ee4:	d8c12015 	stw	r3,1152(sp)
10007ee8:	d9011f15 	stw	r4,1148(sp)
10007eec:	014001c4 	movi	r5,7
10007ef0:	29020916 	blt	r5,r4,10008718 <___vfprintf_internal_r+0x1d50>
10007ef4:	42000204 	addi	r8,r8,8
10007ef8:	80020116 	blt	r16,zero,10008700 <___vfprintf_internal_r+0x1d38>
10007efc:	1421c83a 	sub	r16,r2,r16
10007f00:	043cc40e 	bge	zero,r16,10007214 <__alt_data_end+0xf8007214>
10007f04:	04400404 	movi	r17,16
10007f08:	d8811f17 	ldw	r2,1148(sp)
10007f0c:	8c3f110e 	bge	r17,r16,10007b54 <__alt_data_end+0xf8007b54>
10007f10:	01440074 	movhi	r5,4097
10007f14:	29494884 	addi	r5,r5,9506
10007f18:	d9412c15 	stw	r5,1200(sp)
10007f1c:	04c001c4 	movi	r19,7
10007f20:	00000306 	br	10007f30 <___vfprintf_internal_r+0x1568>
10007f24:	42000204 	addi	r8,r8,8
10007f28:	843ffc04 	addi	r16,r16,-16
10007f2c:	8c3f0c0e 	bge	r17,r16,10007b60 <__alt_data_end+0xf8007b60>
10007f30:	18c00404 	addi	r3,r3,16
10007f34:	10800044 	addi	r2,r2,1
10007f38:	45000015 	stw	r20,0(r8)
10007f3c:	44400115 	stw	r17,4(r8)
10007f40:	d8c12015 	stw	r3,1152(sp)
10007f44:	d8811f15 	stw	r2,1148(sp)
10007f48:	98bff60e 	bge	r19,r2,10007f24 <__alt_data_end+0xf8007f24>
10007f4c:	b809883a 	mov	r4,r23
10007f50:	b00b883a 	mov	r5,r22
10007f54:	d9811e04 	addi	r6,sp,1144
10007f58:	000d28c0 	call	1000d28c <__sprint_r>
10007f5c:	103bb21e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007f60:	d8c12017 	ldw	r3,1152(sp)
10007f64:	d8811f17 	ldw	r2,1148(sp)
10007f68:	da000404 	addi	r8,sp,16
10007f6c:	003fee06 	br	10007f28 <__alt_data_end+0xf8007f28>
10007f70:	e088703a 	and	r4,fp,r2
10007f74:	203ec01e 	bne	r4,zero,10007a78 <__alt_data_end+0xf8007a78>
10007f78:	dc011f17 	ldw	r16,1148(sp)
10007f7c:	d9013117 	ldw	r4,1220(sp)
10007f80:	40800115 	stw	r2,4(r8)
10007f84:	84000044 	addi	r16,r16,1
10007f88:	41000015 	stw	r4,0(r8)
10007f8c:	d8c12015 	stw	r3,1152(sp)
10007f90:	dc011f15 	stw	r16,1148(sp)
10007f94:	008001c4 	movi	r2,7
10007f98:	14000e16 	blt	r2,r16,10007fd4 <___vfprintf_internal_r+0x160c>
10007f9c:	44400204 	addi	r17,r8,8
10007fa0:	003ee006 	br	10007b24 <__alt_data_end+0xf8007b24>
10007fa4:	01040074 	movhi	r4,4097
10007fa8:	21094884 	addi	r4,r4,9506
10007fac:	d9012c15 	stw	r4,1200(sp)
10007fb0:	d8812c17 	ldw	r2,1200(sp)
10007fb4:	1cc7883a 	add	r3,r3,r19
10007fb8:	84000044 	addi	r16,r16,1
10007fbc:	88800015 	stw	r2,0(r17)
10007fc0:	8cc00115 	stw	r19,4(r17)
10007fc4:	d8c12015 	stw	r3,1152(sp)
10007fc8:	dc011f15 	stw	r16,1148(sp)
10007fcc:	008001c4 	movi	r2,7
10007fd0:	143ed30e 	bge	r2,r16,10007b20 <__alt_data_end+0xf8007b20>
10007fd4:	b809883a 	mov	r4,r23
10007fd8:	b00b883a 	mov	r5,r22
10007fdc:	d9811e04 	addi	r6,sp,1144
10007fe0:	000d28c0 	call	1000d28c <__sprint_r>
10007fe4:	103b901e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10007fe8:	d8c12017 	ldw	r3,1152(sp)
10007fec:	dc011f17 	ldw	r16,1148(sp)
10007ff0:	dc400404 	addi	r17,sp,16
10007ff4:	003ecb06 	br	10007b24 <__alt_data_end+0xf8007b24>
10007ff8:	b809883a 	mov	r4,r23
10007ffc:	b00b883a 	mov	r5,r22
10008000:	d9811e04 	addi	r6,sp,1144
10008004:	000d28c0 	call	1000d28c <__sprint_r>
10008008:	103b871e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
1000800c:	d8c12017 	ldw	r3,1152(sp)
10008010:	dc011f17 	ldw	r16,1148(sp)
10008014:	da000404 	addi	r8,sp,16
10008018:	003ea206 	br	10007aa4 <__alt_data_end+0xf8007aa4>
1000801c:	b809883a 	mov	r4,r23
10008020:	b00b883a 	mov	r5,r22
10008024:	d9811e04 	addi	r6,sp,1144
10008028:	000d28c0 	call	1000d28c <__sprint_r>
1000802c:	103b7e1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008030:	d8c12017 	ldw	r3,1152(sp)
10008034:	dc011f17 	ldw	r16,1148(sp)
10008038:	dc400404 	addi	r17,sp,16
1000803c:	003ea406 	br	10007ad0 <__alt_data_end+0xf8007ad0>
10008040:	b809883a 	mov	r4,r23
10008044:	b00b883a 	mov	r5,r22
10008048:	d9811e04 	addi	r6,sp,1144
1000804c:	000d28c0 	call	1000d28c <__sprint_r>
10008050:	103b751e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008054:	d8c12017 	ldw	r3,1152(sp)
10008058:	da000404 	addi	r8,sp,16
1000805c:	003c3706 	br	1000713c <__alt_data_end+0xf800713c>
10008060:	04a5c83a 	sub	r18,zero,r18
10008064:	9004c03a 	cmpne	r2,r18,zero
10008068:	056bc83a 	sub	r21,zero,r21
1000806c:	a8abc83a 	sub	r21,r21,r2
10008070:	04c00b44 	movi	r19,45
10008074:	dcc12785 	stb	r19,1182(sp)
10008078:	da413215 	stw	r9,1224(sp)
1000807c:	00800044 	movi	r2,1
10008080:	9546b03a 	or	r3,r18,r21
10008084:	003bb106 	br	10006f4c <__alt_data_end+0xf8006f4c>
10008088:	da013f15 	stw	r8,1276(sp)
1000808c:	da413e15 	stw	r9,1272(sp)
10008090:	0002d540 	call	10002d54 <__fpclassifyd>
10008094:	da013f17 	ldw	r8,1276(sp)
10008098:	da413e17 	ldw	r9,1272(sp)
1000809c:	1000e526 	beq	r2,zero,10008434 <___vfprintf_internal_r+0x1a6c>
100080a0:	04fff7c4 	movi	r19,-33
100080a4:	00bfffc4 	movi	r2,-1
100080a8:	84e6703a 	and	r19,r16,r19
100080ac:	48822926 	beq	r9,r2,10008954 <___vfprintf_internal_r+0x1f8c>
100080b0:	008011c4 	movi	r2,71
100080b4:	98821626 	beq	r19,r2,10008910 <___vfprintf_internal_r+0x1f48>
100080b8:	d9013917 	ldw	r4,1252(sp)
100080bc:	e0c04014 	ori	r3,fp,256
100080c0:	d8c12d15 	stw	r3,1204(sp)
100080c4:	20021f16 	blt	r4,zero,10008944 <___vfprintf_internal_r+0x1f7c>
100080c8:	dc413917 	ldw	r17,1252(sp)
100080cc:	d8012b05 	stb	zero,1196(sp)
100080d0:	00801984 	movi	r2,102
100080d4:	80814d26 	beq	r16,r2,1000860c <___vfprintf_internal_r+0x1c44>
100080d8:	00801184 	movi	r2,70
100080dc:	80814b26 	beq	r16,r2,1000860c <___vfprintf_internal_r+0x1c44>
100080e0:	00801144 	movi	r2,69
100080e4:	98821d26 	beq	r19,r2,1000895c <___vfprintf_internal_r+0x1f94>
100080e8:	482b883a 	mov	r21,r9
100080ec:	d8812604 	addi	r2,sp,1176
100080f0:	d8800115 	stw	r2,4(sp)
100080f4:	d9413717 	ldw	r5,1244(sp)
100080f8:	d8812504 	addi	r2,sp,1172
100080fc:	d8800215 	stw	r2,8(sp)
10008100:	d8812104 	addi	r2,sp,1156
10008104:	dd400015 	stw	r21,0(sp)
10008108:	d8800315 	stw	r2,12(sp)
1000810c:	b809883a 	mov	r4,r23
10008110:	880d883a 	mov	r6,r17
10008114:	01c00084 	movi	r7,2
10008118:	da013f15 	stw	r8,1276(sp)
1000811c:	da413e15 	stw	r9,1272(sp)
10008120:	0008e400 	call	10008e40 <_dtoa_r>
10008124:	d8813115 	stw	r2,1220(sp)
10008128:	008019c4 	movi	r2,103
1000812c:	da013f17 	ldw	r8,1276(sp)
10008130:	da413e17 	ldw	r9,1272(sp)
10008134:	80800226 	beq	r16,r2,10008140 <___vfprintf_internal_r+0x1778>
10008138:	008011c4 	movi	r2,71
1000813c:	8081451e 	bne	r16,r2,10008654 <___vfprintf_internal_r+0x1c8c>
10008140:	e080004c 	andi	r2,fp,1
10008144:	10021e26 	beq	r2,zero,100089c0 <___vfprintf_internal_r+0x1ff8>
10008148:	d8c13117 	ldw	r3,1220(sp)
1000814c:	1d55883a 	add	r10,r3,r21
10008150:	d9013717 	ldw	r4,1244(sp)
10008154:	880b883a 	mov	r5,r17
10008158:	000d883a 	mov	r6,zero
1000815c:	000f883a 	mov	r7,zero
10008160:	da013f15 	stw	r8,1276(sp)
10008164:	da413e15 	stw	r9,1272(sp)
10008168:	da813d15 	stw	r10,1268(sp)
1000816c:	00052f40 	call	100052f4 <__eqdf2>
10008170:	da013f17 	ldw	r8,1276(sp)
10008174:	da413e17 	ldw	r9,1272(sp)
10008178:	da813d17 	ldw	r10,1268(sp)
1000817c:	1001a126 	beq	r2,zero,10008804 <___vfprintf_internal_r+0x1e3c>
10008180:	d8812117 	ldw	r2,1156(sp)
10008184:	1280062e 	bgeu	r2,r10,100081a0 <___vfprintf_internal_r+0x17d8>
10008188:	01000c04 	movi	r4,48
1000818c:	10c00044 	addi	r3,r2,1
10008190:	d8c12115 	stw	r3,1156(sp)
10008194:	11000005 	stb	r4,0(r2)
10008198:	d8812117 	ldw	r2,1156(sp)
1000819c:	12bffb36 	bltu	r2,r10,1000818c <__alt_data_end+0xf800818c>
100081a0:	d8c13117 	ldw	r3,1220(sp)
100081a4:	10c5c83a 	sub	r2,r2,r3
100081a8:	d8813315 	stw	r2,1228(sp)
100081ac:	008011c4 	movi	r2,71
100081b0:	98818926 	beq	r19,r2,100087d8 <___vfprintf_internal_r+0x1e10>
100081b4:	00801944 	movi	r2,101
100081b8:	14023c0e 	bge	r2,r16,10008aac <___vfprintf_internal_r+0x20e4>
100081bc:	d8c12617 	ldw	r3,1176(sp)
100081c0:	00801984 	movi	r2,102
100081c4:	d8c13415 	stw	r3,1232(sp)
100081c8:	8081ef26 	beq	r16,r2,10008988 <___vfprintf_internal_r+0x1fc0>
100081cc:	d8c13417 	ldw	r3,1232(sp)
100081d0:	d9013317 	ldw	r4,1228(sp)
100081d4:	1901e316 	blt	r3,r4,10008964 <___vfprintf_internal_r+0x1f9c>
100081d8:	e080004c 	andi	r2,fp,1
100081dc:	1001f426 	beq	r2,zero,100089b0 <___vfprintf_internal_r+0x1fe8>
100081e0:	d8c13417 	ldw	r3,1232(sp)
100081e4:	1c400044 	addi	r17,r3,1
100081e8:	8839883a 	mov	fp,r17
100081ec:	8801e416 	blt	r17,zero,10008980 <___vfprintf_internal_r+0x1fb8>
100081f0:	dd412b07 	ldb	r21,1196(sp)
100081f4:	a801701e 	bne	r21,zero,100087b8 <___vfprintf_internal_r+0x1df0>
100081f8:	df012b15 	stw	fp,1196(sp)
100081fc:	dcc12783 	ldbu	r19,1182(sp)
10008200:	df012d17 	ldw	fp,1204(sp)
10008204:	d8013215 	stw	zero,1224(sp)
10008208:	dc812d15 	stw	r18,1204(sp)
1000820c:	003b6e06 	br	10006fc8 <__alt_data_end+0xf8006fc8>
10008210:	e080040c 	andi	r2,fp,16
10008214:	1000b51e 	bne	r2,zero,100084ec <___vfprintf_internal_r+0x1b24>
10008218:	e080100c 	andi	r2,fp,64
1000821c:	10015b26 	beq	r2,zero,1000878c <___vfprintf_internal_r+0x1dc4>
10008220:	d9012d17 	ldw	r4,1204(sp)
10008224:	d9412f17 	ldw	r5,1212(sp)
10008228:	20800017 	ldw	r2,0(r4)
1000822c:	21000104 	addi	r4,r4,4
10008230:	d9012d15 	stw	r4,1204(sp)
10008234:	1140000d 	sth	r5,0(r2)
10008238:	003a2006 	br	10006abc <__alt_data_end+0xf8006abc>
1000823c:	e0c0100c 	andi	r3,fp,64
10008240:	1800a226 	beq	r3,zero,100084cc <___vfprintf_internal_r+0x1b04>
10008244:	d8c12d17 	ldw	r3,1204(sp)
10008248:	1480000b 	ldhu	r18,0(r2)
1000824c:	002b883a 	mov	r21,zero
10008250:	18c00104 	addi	r3,r3,4
10008254:	d8c12d15 	stw	r3,1204(sp)
10008258:	0005883a 	mov	r2,zero
1000825c:	9007883a 	mov	r3,r18
10008260:	003c6906 	br	10007408 <__alt_data_end+0xf8007408>
10008264:	e0c0100c 	andi	r3,fp,64
10008268:	18009026 	beq	r3,zero,100084ac <___vfprintf_internal_r+0x1ae4>
1000826c:	1480000b 	ldhu	r18,0(r2)
10008270:	d8812d17 	ldw	r2,1204(sp)
10008274:	002b883a 	mov	r21,zero
10008278:	9007883a 	mov	r3,r18
1000827c:	10800104 	addi	r2,r2,4
10008280:	d8812d15 	stw	r2,1204(sp)
10008284:	00800044 	movi	r2,1
10008288:	003c5f06 	br	10007408 <__alt_data_end+0xf8007408>
1000828c:	e0c0100c 	andi	r3,fp,64
10008290:	18008026 	beq	r3,zero,10008494 <___vfprintf_internal_r+0x1acc>
10008294:	d9012d17 	ldw	r4,1204(sp)
10008298:	1480000b 	ldhu	r18,0(r2)
1000829c:	002b883a 	mov	r21,zero
100082a0:	21000104 	addi	r4,r4,4
100082a4:	d9012d15 	stw	r4,1204(sp)
100082a8:	003c7906 	br	10007490 <__alt_data_end+0xf8007490>
100082ac:	e080100c 	andi	r2,fp,64
100082b0:	10007126 	beq	r2,zero,10008478 <___vfprintf_internal_r+0x1ab0>
100082b4:	1c80000f 	ldh	r18,0(r3)
100082b8:	d8812d17 	ldw	r2,1204(sp)
100082bc:	902bd7fa 	srai	r21,r18,31
100082c0:	10800104 	addi	r2,r2,4
100082c4:	d8812d15 	stw	r2,1204(sp)
100082c8:	a805883a 	mov	r2,r21
100082cc:	003b1a06 	br	10006f38 <__alt_data_end+0xf8006f38>
100082d0:	e4000007 	ldb	r16,0(fp)
100082d4:	e005883a 	mov	r2,fp
100082d8:	003a2306 	br	10006b68 <__alt_data_end+0xf8006b68>
100082dc:	00800084 	movi	r2,2
100082e0:	003c4906 	br	10007408 <__alt_data_end+0xf8007408>
100082e4:	01040074 	movhi	r4,4097
100082e8:	21094884 	addi	r4,r4,9506
100082ec:	d9012c15 	stw	r4,1200(sp)
100082f0:	d9012c17 	ldw	r4,1200(sp)
100082f4:	1c47883a 	add	r3,r3,r17
100082f8:	10800044 	addi	r2,r2,1
100082fc:	41000015 	stw	r4,0(r8)
10008300:	44400115 	stw	r17,4(r8)
10008304:	d8c12015 	stw	r3,1152(sp)
10008308:	d8811f15 	stw	r2,1148(sp)
1000830c:	010001c4 	movi	r4,7
10008310:	20becc16 	blt	r4,r2,10007e44 <__alt_data_end+0xf8007e44>
10008314:	42000204 	addi	r8,r8,8
10008318:	003ed106 	br	10007e60 <__alt_data_end+0xf8007e60>
1000831c:	01040074 	movhi	r4,4097
10008320:	21094884 	addi	r4,r4,9506
10008324:	d9012c15 	stw	r4,1200(sp)
10008328:	003ba306 	br	100071b8 <__alt_data_end+0xf80071b8>
1000832c:	b809883a 	mov	r4,r23
10008330:	b00b883a 	mov	r5,r22
10008334:	d9811e04 	addi	r6,sp,1144
10008338:	000d28c0 	call	1000d28c <__sprint_r>
1000833c:	103aba1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008340:	d8c12017 	ldw	r3,1152(sp)
10008344:	da000404 	addi	r8,sp,16
10008348:	003d6c06 	br	100078fc <__alt_data_end+0xf80078fc>
1000834c:	d8811f17 	ldw	r2,1148(sp)
10008350:	01440074 	movhi	r5,4097
10008354:	01000044 	movi	r4,1
10008358:	18c00044 	addi	r3,r3,1
1000835c:	10800044 	addi	r2,r2,1
10008360:	29494804 	addi	r5,r5,9504
10008364:	41000115 	stw	r4,4(r8)
10008368:	41400015 	stw	r5,0(r8)
1000836c:	d8c12015 	stw	r3,1152(sp)
10008370:	d8811f15 	stw	r2,1148(sp)
10008374:	010001c4 	movi	r4,7
10008378:	20806716 	blt	r4,r2,10008518 <___vfprintf_internal_r+0x1b50>
1000837c:	42000204 	addi	r8,r8,8
10008380:	8000041e 	bne	r16,zero,10008394 <___vfprintf_internal_r+0x19cc>
10008384:	d8813317 	ldw	r2,1228(sp)
10008388:	1000021e 	bne	r2,zero,10008394 <___vfprintf_internal_r+0x19cc>
1000838c:	e080004c 	andi	r2,fp,1
10008390:	103ba026 	beq	r2,zero,10007214 <__alt_data_end+0xf8007214>
10008394:	d9013817 	ldw	r4,1248(sp)
10008398:	d8811f17 	ldw	r2,1148(sp)
1000839c:	d9413517 	ldw	r5,1236(sp)
100083a0:	1907883a 	add	r3,r3,r4
100083a4:	10800044 	addi	r2,r2,1
100083a8:	41000115 	stw	r4,4(r8)
100083ac:	41400015 	stw	r5,0(r8)
100083b0:	d8c12015 	stw	r3,1152(sp)
100083b4:	d8811f15 	stw	r2,1148(sp)
100083b8:	010001c4 	movi	r4,7
100083bc:	20815716 	blt	r4,r2,1000891c <___vfprintf_internal_r+0x1f54>
100083c0:	42000204 	addi	r8,r8,8
100083c4:	0421c83a 	sub	r16,zero,r16
100083c8:	0400810e 	bge	zero,r16,100085d0 <___vfprintf_internal_r+0x1c08>
100083cc:	04400404 	movi	r17,16
100083d0:	8c00bd0e 	bge	r17,r16,100086c8 <___vfprintf_internal_r+0x1d00>
100083d4:	01440074 	movhi	r5,4097
100083d8:	29494884 	addi	r5,r5,9506
100083dc:	d9412c15 	stw	r5,1200(sp)
100083e0:	04c001c4 	movi	r19,7
100083e4:	00000306 	br	100083f4 <___vfprintf_internal_r+0x1a2c>
100083e8:	42000204 	addi	r8,r8,8
100083ec:	843ffc04 	addi	r16,r16,-16
100083f0:	8c00b80e 	bge	r17,r16,100086d4 <___vfprintf_internal_r+0x1d0c>
100083f4:	18c00404 	addi	r3,r3,16
100083f8:	10800044 	addi	r2,r2,1
100083fc:	45000015 	stw	r20,0(r8)
10008400:	44400115 	stw	r17,4(r8)
10008404:	d8c12015 	stw	r3,1152(sp)
10008408:	d8811f15 	stw	r2,1148(sp)
1000840c:	98bff60e 	bge	r19,r2,100083e8 <__alt_data_end+0xf80083e8>
10008410:	b809883a 	mov	r4,r23
10008414:	b00b883a 	mov	r5,r22
10008418:	d9811e04 	addi	r6,sp,1144
1000841c:	000d28c0 	call	1000d28c <__sprint_r>
10008420:	103a811e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008424:	d8c12017 	ldw	r3,1152(sp)
10008428:	d8811f17 	ldw	r2,1148(sp)
1000842c:	da000404 	addi	r8,sp,16
10008430:	003fee06 	br	100083ec <__alt_data_end+0xf80083ec>
10008434:	008011c4 	movi	r2,71
10008438:	1400db16 	blt	r2,r16,100087a8 <___vfprintf_internal_r+0x1de0>
1000843c:	01040074 	movhi	r4,4097
10008440:	21093a04 	addi	r4,r4,9448
10008444:	d9013115 	stw	r4,1220(sp)
10008448:	00c000c4 	movi	r3,3
1000844c:	00bfdfc4 	movi	r2,-129
10008450:	d8c12b15 	stw	r3,1196(sp)
10008454:	e0b8703a 	and	fp,fp,r2
10008458:	dcc12783 	ldbu	r19,1182(sp)
1000845c:	dc812d15 	stw	r18,1204(sp)
10008460:	1823883a 	mov	r17,r3
10008464:	d8013215 	stw	zero,1224(sp)
10008468:	d8013415 	stw	zero,1232(sp)
1000846c:	003ad606 	br	10006fc8 <__alt_data_end+0xf8006fc8>
10008470:	4823883a 	mov	r17,r9
10008474:	003cc906 	br	1000779c <__alt_data_end+0xf800779c>
10008478:	1c800017 	ldw	r18,0(r3)
1000847c:	d8c12d17 	ldw	r3,1204(sp)
10008480:	902bd7fa 	srai	r21,r18,31
10008484:	18c00104 	addi	r3,r3,4
10008488:	d8c12d15 	stw	r3,1204(sp)
1000848c:	a805883a 	mov	r2,r21
10008490:	003aa906 	br	10006f38 <__alt_data_end+0xf8006f38>
10008494:	d9412d17 	ldw	r5,1204(sp)
10008498:	14800017 	ldw	r18,0(r2)
1000849c:	002b883a 	mov	r21,zero
100084a0:	29400104 	addi	r5,r5,4
100084a4:	d9412d15 	stw	r5,1204(sp)
100084a8:	003bf906 	br	10007490 <__alt_data_end+0xf8007490>
100084ac:	d8c12d17 	ldw	r3,1204(sp)
100084b0:	14800017 	ldw	r18,0(r2)
100084b4:	002b883a 	mov	r21,zero
100084b8:	18c00104 	addi	r3,r3,4
100084bc:	d8c12d15 	stw	r3,1204(sp)
100084c0:	00800044 	movi	r2,1
100084c4:	9007883a 	mov	r3,r18
100084c8:	003bcf06 	br	10007408 <__alt_data_end+0xf8007408>
100084cc:	d9012d17 	ldw	r4,1204(sp)
100084d0:	14800017 	ldw	r18,0(r2)
100084d4:	002b883a 	mov	r21,zero
100084d8:	21000104 	addi	r4,r4,4
100084dc:	d9012d15 	stw	r4,1204(sp)
100084e0:	0005883a 	mov	r2,zero
100084e4:	9007883a 	mov	r3,r18
100084e8:	003bc706 	br	10007408 <__alt_data_end+0xf8007408>
100084ec:	d9412d17 	ldw	r5,1204(sp)
100084f0:	d8c12f17 	ldw	r3,1212(sp)
100084f4:	28800017 	ldw	r2,0(r5)
100084f8:	29400104 	addi	r5,r5,4
100084fc:	d9412d15 	stw	r5,1204(sp)
10008500:	10c00015 	stw	r3,0(r2)
10008504:	00396d06 	br	10006abc <__alt_data_end+0xf8006abc>
10008508:	01040074 	movhi	r4,4097
1000850c:	21093804 	addi	r4,r4,9440
10008510:	d9013115 	stw	r4,1220(sp)
10008514:	003ba206 	br	100073a0 <__alt_data_end+0xf80073a0>
10008518:	b809883a 	mov	r4,r23
1000851c:	b00b883a 	mov	r5,r22
10008520:	d9811e04 	addi	r6,sp,1144
10008524:	000d28c0 	call	1000d28c <__sprint_r>
10008528:	103a3f1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
1000852c:	dc012617 	ldw	r16,1176(sp)
10008530:	d8c12017 	ldw	r3,1152(sp)
10008534:	da000404 	addi	r8,sp,16
10008538:	003f9106 	br	10008380 <__alt_data_end+0xf8008380>
1000853c:	e0800044 	addi	r2,fp,1
10008540:	9cc00814 	ori	r19,r19,32
10008544:	e4000047 	ldb	r16,1(fp)
10008548:	00398706 	br	10006b68 <__alt_data_end+0xf8006b68>
1000854c:	d8812e17 	ldw	r2,1208(sp)
10008550:	d8c12d15 	stw	r3,1204(sp)
10008554:	0085c83a 	sub	r2,zero,r2
10008558:	d8812e15 	stw	r2,1208(sp)
1000855c:	e005883a 	mov	r2,fp
10008560:	003a3a06 	br	10006e4c <__alt_data_end+0xf8006e4c>
10008564:	b809883a 	mov	r4,r23
10008568:	b00b883a 	mov	r5,r22
1000856c:	d9811e04 	addi	r6,sp,1144
10008570:	000d28c0 	call	1000d28c <__sprint_r>
10008574:	103a2c1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008578:	d8c12017 	ldw	r3,1152(sp)
1000857c:	da000404 	addi	r8,sp,16
10008580:	003cf006 	br	10007944 <__alt_data_end+0xf8007944>
10008584:	d8c12817 	ldw	r3,1184(sp)
10008588:	d9013117 	ldw	r4,1220(sp)
1000858c:	1923c83a 	sub	r17,r3,r4
10008590:	003a8806 	br	10006fb4 <__alt_data_end+0xf8006fb4>
10008594:	da013f15 	stw	r8,1276(sp)
10008598:	000d0f80 	call	1000d0f8 <strlen>
1000859c:	1023883a 	mov	r17,r2
100085a0:	da013f17 	ldw	r8,1276(sp)
100085a4:	883c7f0e 	bge	r17,zero,100077a4 <__alt_data_end+0xf80077a4>
100085a8:	0005883a 	mov	r2,zero
100085ac:	003c7d06 	br	100077a4 <__alt_data_end+0xf80077a4>
100085b0:	b809883a 	mov	r4,r23
100085b4:	b00b883a 	mov	r5,r22
100085b8:	d9811e04 	addi	r6,sp,1144
100085bc:	000d28c0 	call	1000d28c <__sprint_r>
100085c0:	103a191e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
100085c4:	d8c12017 	ldw	r3,1152(sp)
100085c8:	d8811f17 	ldw	r2,1148(sp)
100085cc:	da000404 	addi	r8,sp,16
100085d0:	d9413317 	ldw	r5,1228(sp)
100085d4:	d9013117 	ldw	r4,1220(sp)
100085d8:	10800044 	addi	r2,r2,1
100085dc:	28c7883a 	add	r3,r5,r3
100085e0:	41000015 	stw	r4,0(r8)
100085e4:	41400115 	stw	r5,4(r8)
100085e8:	d8c12015 	stw	r3,1152(sp)
100085ec:	d8811f15 	stw	r2,1148(sp)
100085f0:	010001c4 	movi	r4,7
100085f4:	20bb060e 	bge	r4,r2,10007210 <__alt_data_end+0xf8007210>
100085f8:	003d6206 	br	10007b84 <__alt_data_end+0xf8007b84>
100085fc:	01040074 	movhi	r4,4097
10008600:	21094c84 	addi	r4,r4,9522
10008604:	d9013615 	stw	r4,1240(sp)
10008608:	003aa306 	br	10007098 <__alt_data_end+0xf8007098>
1000860c:	d8812604 	addi	r2,sp,1176
10008610:	d8800115 	stw	r2,4(sp)
10008614:	d9413717 	ldw	r5,1244(sp)
10008618:	d8812504 	addi	r2,sp,1172
1000861c:	d8800215 	stw	r2,8(sp)
10008620:	d8812104 	addi	r2,sp,1156
10008624:	da400015 	stw	r9,0(sp)
10008628:	d8800315 	stw	r2,12(sp)
1000862c:	b809883a 	mov	r4,r23
10008630:	880d883a 	mov	r6,r17
10008634:	01c000c4 	movi	r7,3
10008638:	da013f15 	stw	r8,1276(sp)
1000863c:	da413e15 	stw	r9,1272(sp)
10008640:	0008e400 	call	10008e40 <_dtoa_r>
10008644:	da413e17 	ldw	r9,1272(sp)
10008648:	da013f17 	ldw	r8,1276(sp)
1000864c:	d8813115 	stw	r2,1220(sp)
10008650:	482b883a 	mov	r21,r9
10008654:	d8c13117 	ldw	r3,1220(sp)
10008658:	00801184 	movi	r2,70
1000865c:	1d55883a 	add	r10,r3,r21
10008660:	98bebb1e 	bne	r19,r2,10008150 <__alt_data_end+0xf8008150>
10008664:	19000007 	ldb	r4,0(r3)
10008668:	00800c04 	movi	r2,48
1000866c:	2080dd26 	beq	r4,r2,100089e4 <___vfprintf_internal_r+0x201c>
10008670:	d8c12617 	ldw	r3,1176(sp)
10008674:	50d5883a 	add	r10,r10,r3
10008678:	003eb506 	br	10008150 <__alt_data_end+0xf8008150>
1000867c:	0023883a 	mov	r17,zero
10008680:	003d9b06 	br	10007cf0 <__alt_data_end+0xf8007cf0>
10008684:	b809883a 	mov	r4,r23
10008688:	b00b883a 	mov	r5,r22
1000868c:	d9811e04 	addi	r6,sp,1144
10008690:	000d28c0 	call	1000d28c <__sprint_r>
10008694:	1039e41e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008698:	d8c12017 	ldw	r3,1152(sp)
1000869c:	da000404 	addi	r8,sp,16
100086a0:	003d9206 	br	10007cec <__alt_data_end+0xf8007cec>
100086a4:	b809883a 	mov	r4,r23
100086a8:	b00b883a 	mov	r5,r22
100086ac:	d9811e04 	addi	r6,sp,1144
100086b0:	000d28c0 	call	1000d28c <__sprint_r>
100086b4:	1039dc1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
100086b8:	d8812617 	ldw	r2,1176(sp)
100086bc:	d8c12017 	ldw	r3,1152(sp)
100086c0:	da000404 	addi	r8,sp,16
100086c4:	003dfb06 	br	10007eb4 <__alt_data_end+0xf8007eb4>
100086c8:	01040074 	movhi	r4,4097
100086cc:	21094884 	addi	r4,r4,9506
100086d0:	d9012c15 	stw	r4,1200(sp)
100086d4:	d9012c17 	ldw	r4,1200(sp)
100086d8:	1c07883a 	add	r3,r3,r16
100086dc:	10800044 	addi	r2,r2,1
100086e0:	41000015 	stw	r4,0(r8)
100086e4:	44000115 	stw	r16,4(r8)
100086e8:	d8c12015 	stw	r3,1152(sp)
100086ec:	d8811f15 	stw	r2,1148(sp)
100086f0:	010001c4 	movi	r4,7
100086f4:	20bfae16 	blt	r4,r2,100085b0 <__alt_data_end+0xf80085b0>
100086f8:	42000204 	addi	r8,r8,8
100086fc:	003fb406 	br	100085d0 <__alt_data_end+0xf80085d0>
10008700:	0021883a 	mov	r16,zero
10008704:	003dfd06 	br	10007efc <__alt_data_end+0xf8007efc>
10008708:	01440074 	movhi	r5,4097
1000870c:	29494c84 	addi	r5,r5,9522
10008710:	d9413615 	stw	r5,1240(sp)
10008714:	003ae306 	br	100072a4 <__alt_data_end+0xf80072a4>
10008718:	b809883a 	mov	r4,r23
1000871c:	b00b883a 	mov	r5,r22
10008720:	d9811e04 	addi	r6,sp,1144
10008724:	000d28c0 	call	1000d28c <__sprint_r>
10008728:	1039bf1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
1000872c:	d8812617 	ldw	r2,1176(sp)
10008730:	d9413317 	ldw	r5,1228(sp)
10008734:	d8c12017 	ldw	r3,1152(sp)
10008738:	da000404 	addi	r8,sp,16
1000873c:	2885c83a 	sub	r2,r5,r2
10008740:	003ded06 	br	10007ef8 <__alt_data_end+0xf8007ef8>
10008744:	00800184 	movi	r2,6
10008748:	1240012e 	bgeu	r2,r9,10008750 <___vfprintf_internal_r+0x1d88>
1000874c:	1013883a 	mov	r9,r2
10008750:	4823883a 	mov	r17,r9
10008754:	4805883a 	mov	r2,r9
10008758:	4800b216 	blt	r9,zero,10008a24 <___vfprintf_internal_r+0x205c>
1000875c:	01440074 	movhi	r5,4097
10008760:	29494604 	addi	r5,r5,9496
10008764:	d8812b15 	stw	r2,1196(sp)
10008768:	dc812d15 	stw	r18,1204(sp)
1000876c:	d8013215 	stw	zero,1224(sp)
10008770:	d8013415 	stw	zero,1232(sp)
10008774:	d9413115 	stw	r5,1220(sp)
10008778:	0005883a 	mov	r2,zero
1000877c:	003a1906 	br	10006fe4 <__alt_data_end+0xf8006fe4>
10008780:	04c00b44 	movi	r19,45
10008784:	dcc12785 	stb	r19,1182(sp)
10008788:	003b0006 	br	1000738c <__alt_data_end+0xf800738c>
1000878c:	d8c12d17 	ldw	r3,1204(sp)
10008790:	d9012f17 	ldw	r4,1212(sp)
10008794:	18800017 	ldw	r2,0(r3)
10008798:	18c00104 	addi	r3,r3,4
1000879c:	d8c12d15 	stw	r3,1204(sp)
100087a0:	11000015 	stw	r4,0(r2)
100087a4:	0038c506 	br	10006abc <__alt_data_end+0xf8006abc>
100087a8:	01440074 	movhi	r5,4097
100087ac:	29493b04 	addi	r5,r5,9452
100087b0:	d9413115 	stw	r5,1220(sp)
100087b4:	003f2406 	br	10008448 <__alt_data_end+0xf8008448>
100087b8:	00800b44 	movi	r2,45
100087bc:	d8812785 	stb	r2,1182(sp)
100087c0:	df012b15 	stw	fp,1196(sp)
100087c4:	d8013215 	stw	zero,1224(sp)
100087c8:	df012d17 	ldw	fp,1204(sp)
100087cc:	00800b44 	movi	r2,45
100087d0:	dc812d15 	stw	r18,1204(sp)
100087d4:	003a0006 	br	10006fd8 <__alt_data_end+0xf8006fd8>
100087d8:	d8c12617 	ldw	r3,1176(sp)
100087dc:	00bfff44 	movi	r2,-3
100087e0:	18800a16 	blt	r3,r2,1000880c <___vfprintf_internal_r+0x1e44>
100087e4:	48c00916 	blt	r9,r3,1000880c <___vfprintf_internal_r+0x1e44>
100087e8:	d8c13415 	stw	r3,1232(sp)
100087ec:	040019c4 	movi	r16,103
100087f0:	003e7606 	br	100081cc <__alt_data_end+0xf80081cc>
100087f4:	01040074 	movhi	r4,4097
100087f8:	21094884 	addi	r4,r4,9506
100087fc:	d9012c15 	stw	r4,1200(sp)
10008800:	003c8e06 	br	10007a3c <__alt_data_end+0xf8007a3c>
10008804:	5005883a 	mov	r2,r10
10008808:	003e6506 	br	100081a0 <__alt_data_end+0xf80081a0>
1000880c:	843fff84 	addi	r16,r16,-2
10008810:	1d7fffc4 	addi	r21,r3,-1
10008814:	dd412615 	stw	r21,1176(sp)
10008818:	dc0122c5 	stb	r16,1163(sp)
1000881c:	a8009216 	blt	r21,zero,10008a68 <___vfprintf_internal_r+0x20a0>
10008820:	00800ac4 	movi	r2,43
10008824:	d8812305 	stb	r2,1164(sp)
10008828:	00800244 	movi	r2,9
1000882c:	1540660e 	bge	r2,r21,100089c8 <___vfprintf_internal_r+0x2000>
10008830:	dcc122c4 	addi	r19,sp,1163
10008834:	dc012c15 	stw	r16,1200(sp)
10008838:	4023883a 	mov	r17,r8
1000883c:	9821883a 	mov	r16,r19
10008840:	a809883a 	mov	r4,r21
10008844:	01400284 	movi	r5,10
10008848:	00040440 	call	10004044 <__modsi3>
1000884c:	10800c04 	addi	r2,r2,48
10008850:	843fffc4 	addi	r16,r16,-1
10008854:	a809883a 	mov	r4,r21
10008858:	01400284 	movi	r5,10
1000885c:	80800005 	stb	r2,0(r16)
10008860:	0003ff00 	call	10003ff0 <__divsi3>
10008864:	01000244 	movi	r4,9
10008868:	102b883a 	mov	r21,r2
1000886c:	20bff416 	blt	r4,r2,10008840 <__alt_data_end+0xf8008840>
10008870:	8811883a 	mov	r8,r17
10008874:	10800c04 	addi	r2,r2,48
10008878:	8023883a 	mov	r17,r16
1000887c:	897fffc4 	addi	r5,r17,-1
10008880:	88bfffc5 	stb	r2,-1(r17)
10008884:	dc012c17 	ldw	r16,1200(sp)
10008888:	2cc08a2e 	bgeu	r5,r19,10008ab4 <___vfprintf_internal_r+0x20ec>
1000888c:	d9812384 	addi	r6,sp,1166
10008890:	344dc83a 	sub	r6,r6,r17
10008894:	d9012344 	addi	r4,sp,1165
10008898:	998d883a 	add	r6,r19,r6
1000889c:	00000106 	br	100088a4 <___vfprintf_internal_r+0x1edc>
100088a0:	28800003 	ldbu	r2,0(r5)
100088a4:	20800005 	stb	r2,0(r4)
100088a8:	21000044 	addi	r4,r4,1
100088ac:	29400044 	addi	r5,r5,1
100088b0:	21bffb1e 	bne	r4,r6,100088a0 <__alt_data_end+0xf80088a0>
100088b4:	d8812304 	addi	r2,sp,1164
100088b8:	1445c83a 	sub	r2,r2,r17
100088bc:	d9412344 	addi	r5,sp,1165
100088c0:	2885883a 	add	r2,r5,r2
100088c4:	14e7c83a 	sub	r19,r2,r19
100088c8:	d8813317 	ldw	r2,1228(sp)
100088cc:	d8c13317 	ldw	r3,1228(sp)
100088d0:	dcc13a15 	stw	r19,1256(sp)
100088d4:	14e3883a 	add	r17,r2,r19
100088d8:	00800044 	movi	r2,1
100088dc:	10c0550e 	bge	r2,r3,10008a34 <___vfprintf_internal_r+0x206c>
100088e0:	8c400044 	addi	r17,r17,1
100088e4:	8839883a 	mov	fp,r17
100088e8:	88005016 	blt	r17,zero,10008a2c <___vfprintf_internal_r+0x2064>
100088ec:	d8013415 	stw	zero,1232(sp)
100088f0:	003e3f06 	br	100081f0 <__alt_data_end+0xf80081f0>
100088f4:	da412b15 	stw	r9,1196(sp)
100088f8:	dcc12783 	ldbu	r19,1182(sp)
100088fc:	4823883a 	mov	r17,r9
10008900:	dc812d15 	stw	r18,1204(sp)
10008904:	d8013215 	stw	zero,1224(sp)
10008908:	d8013415 	stw	zero,1232(sp)
1000890c:	0039ae06 	br	10006fc8 <__alt_data_end+0xf8006fc8>
10008910:	483de91e 	bne	r9,zero,100080b8 <__alt_data_end+0xf80080b8>
10008914:	8813883a 	mov	r9,r17
10008918:	003de706 	br	100080b8 <__alt_data_end+0xf80080b8>
1000891c:	b809883a 	mov	r4,r23
10008920:	b00b883a 	mov	r5,r22
10008924:	d9811e04 	addi	r6,sp,1144
10008928:	000d28c0 	call	1000d28c <__sprint_r>
1000892c:	10393e1e 	bne	r2,zero,10006e28 <__alt_data_end+0xf8006e28>
10008930:	dc012617 	ldw	r16,1176(sp)
10008934:	d8c12017 	ldw	r3,1152(sp)
10008938:	d8811f17 	ldw	r2,1148(sp)
1000893c:	da000404 	addi	r8,sp,16
10008940:	003ea006 	br	100083c4 <__alt_data_end+0xf80083c4>
10008944:	00c00b44 	movi	r3,45
10008948:	2460003c 	xorhi	r17,r4,32768
1000894c:	d8c12b05 	stb	r3,1196(sp)
10008950:	003ddf06 	br	100080d0 <__alt_data_end+0xf80080d0>
10008954:	02400184 	movi	r9,6
10008958:	003dd706 	br	100080b8 <__alt_data_end+0xf80080b8>
1000895c:	4d400044 	addi	r21,r9,1
10008960:	003de206 	br	100080ec <__alt_data_end+0xf80080ec>
10008964:	d8c13417 	ldw	r3,1232(sp)
10008968:	00c0490e 	bge	zero,r3,10008a90 <___vfprintf_internal_r+0x20c8>
1000896c:	04400044 	movi	r17,1
10008970:	d9013317 	ldw	r4,1228(sp)
10008974:	8923883a 	add	r17,r17,r4
10008978:	8839883a 	mov	fp,r17
1000897c:	883e1c0e 	bge	r17,zero,100081f0 <__alt_data_end+0xf80081f0>
10008980:	0039883a 	mov	fp,zero
10008984:	003e1a06 	br	100081f0 <__alt_data_end+0xf80081f0>
10008988:	00c03b0e 	bge	zero,r3,10008a78 <___vfprintf_internal_r+0x20b0>
1000898c:	4800021e 	bne	r9,zero,10008998 <___vfprintf_internal_r+0x1fd0>
10008990:	e080004c 	andi	r2,fp,1
10008994:	10000626 	beq	r2,zero,100089b0 <___vfprintf_internal_r+0x1fe8>
10008998:	d8c13417 	ldw	r3,1232(sp)
1000899c:	4a400044 	addi	r9,r9,1
100089a0:	1a63883a 	add	r17,r3,r9
100089a4:	8839883a 	mov	fp,r17
100089a8:	883e110e 	bge	r17,zero,100081f0 <__alt_data_end+0xf80081f0>
100089ac:	003ff406 	br	10008980 <__alt_data_end+0xf8008980>
100089b0:	1839883a 	mov	fp,r3
100089b4:	18004116 	blt	r3,zero,10008abc <___vfprintf_internal_r+0x20f4>
100089b8:	dc413417 	ldw	r17,1232(sp)
100089bc:	003e0c06 	br	100081f0 <__alt_data_end+0xf80081f0>
100089c0:	d8812117 	ldw	r2,1156(sp)
100089c4:	003df606 	br	100081a0 <__alt_data_end+0xf80081a0>
100089c8:	00800c04 	movi	r2,48
100089cc:	a8c00c04 	addi	r3,r21,48
100089d0:	d8812345 	stb	r2,1165(sp)
100089d4:	d8c12385 	stb	r3,1166(sp)
100089d8:	d88123c4 	addi	r2,sp,1167
100089dc:	dcc122c4 	addi	r19,sp,1163
100089e0:	003fb806 	br	100088c4 <__alt_data_end+0xf80088c4>
100089e4:	d9013717 	ldw	r4,1244(sp)
100089e8:	880b883a 	mov	r5,r17
100089ec:	000d883a 	mov	r6,zero
100089f0:	000f883a 	mov	r7,zero
100089f4:	da013f15 	stw	r8,1276(sp)
100089f8:	da413e15 	stw	r9,1272(sp)
100089fc:	da813d15 	stw	r10,1268(sp)
10008a00:	00052f40 	call	100052f4 <__eqdf2>
10008a04:	da013f17 	ldw	r8,1276(sp)
10008a08:	da413e17 	ldw	r9,1272(sp)
10008a0c:	da813d17 	ldw	r10,1268(sp)
10008a10:	103f1726 	beq	r2,zero,10008670 <__alt_data_end+0xf8008670>
10008a14:	00800044 	movi	r2,1
10008a18:	1547c83a 	sub	r3,r2,r21
10008a1c:	d8c12615 	stw	r3,1176(sp)
10008a20:	003f1406 	br	10008674 <__alt_data_end+0xf8008674>
10008a24:	0005883a 	mov	r2,zero
10008a28:	003f4c06 	br	1000875c <__alt_data_end+0xf800875c>
10008a2c:	0039883a 	mov	fp,zero
10008a30:	003fae06 	br	100088ec <__alt_data_end+0xf80088ec>
10008a34:	e084703a 	and	r2,fp,r2
10008a38:	103faa26 	beq	r2,zero,100088e4 <__alt_data_end+0xf80088e4>
10008a3c:	003fa806 	br	100088e0 <__alt_data_end+0xf80088e0>
10008a40:	d9412d17 	ldw	r5,1204(sp)
10008a44:	2a400017 	ldw	r9,0(r5)
10008a48:	28c00104 	addi	r3,r5,4
10008a4c:	d8c12d15 	stw	r3,1204(sp)
10008a50:	483ebc0e 	bge	r9,zero,10008544 <__alt_data_end+0xf8008544>
10008a54:	027fffc4 	movi	r9,-1
10008a58:	e4000047 	ldb	r16,1(fp)
10008a5c:	00384206 	br	10006b68 <__alt_data_end+0xf8006b68>
10008a60:	043fffc4 	movi	r16,-1
10008a64:	0038ce06 	br	10006da0 <__alt_data_end+0xf8006da0>
10008a68:	00800b44 	movi	r2,45
10008a6c:	056bc83a 	sub	r21,zero,r21
10008a70:	d8812305 	stb	r2,1164(sp)
10008a74:	003f6c06 	br	10008828 <__alt_data_end+0xf8008828>
10008a78:	4800081e 	bne	r9,zero,10008a9c <___vfprintf_internal_r+0x20d4>
10008a7c:	e080004c 	andi	r2,fp,1
10008a80:	1000061e 	bne	r2,zero,10008a9c <___vfprintf_internal_r+0x20d4>
10008a84:	07000044 	movi	fp,1
10008a88:	e023883a 	mov	r17,fp
10008a8c:	003dd806 	br	100081f0 <__alt_data_end+0xf80081f0>
10008a90:	04400084 	movi	r17,2
10008a94:	88e3c83a 	sub	r17,r17,r3
10008a98:	003fb506 	br	10008970 <__alt_data_end+0xf8008970>
10008a9c:	4c400084 	addi	r17,r9,2
10008aa0:	8839883a 	mov	fp,r17
10008aa4:	883dd20e 	bge	r17,zero,100081f0 <__alt_data_end+0xf80081f0>
10008aa8:	003fb506 	br	10008980 <__alt_data_end+0xf8008980>
10008aac:	d8c12617 	ldw	r3,1176(sp)
10008ab0:	003f5706 	br	10008810 <__alt_data_end+0xf8008810>
10008ab4:	d8812344 	addi	r2,sp,1165
10008ab8:	003f8206 	br	100088c4 <__alt_data_end+0xf80088c4>
10008abc:	0039883a 	mov	fp,zero
10008ac0:	003fbd06 	br	100089b8 <__alt_data_end+0xf80089b8>

10008ac4 <__vfprintf_internal>:
10008ac4:	2007883a 	mov	r3,r4
10008ac8:	01040074 	movhi	r4,4097
10008acc:	21106304 	addi	r4,r4,16780
10008ad0:	21000017 	ldw	r4,0(r4)
10008ad4:	2805883a 	mov	r2,r5
10008ad8:	300f883a 	mov	r7,r6
10008adc:	180b883a 	mov	r5,r3
10008ae0:	100d883a 	mov	r6,r2
10008ae4:	00069c81 	jmpi	100069c8 <___vfprintf_internal_r>

10008ae8 <__swsetup_r>:
10008ae8:	00840074 	movhi	r2,4097
10008aec:	defffd04 	addi	sp,sp,-12
10008af0:	10906304 	addi	r2,r2,16780
10008af4:	dc400115 	stw	r17,4(sp)
10008af8:	2023883a 	mov	r17,r4
10008afc:	11000017 	ldw	r4,0(r2)
10008b00:	dc000015 	stw	r16,0(sp)
10008b04:	dfc00215 	stw	ra,8(sp)
10008b08:	2821883a 	mov	r16,r5
10008b0c:	20000226 	beq	r4,zero,10008b18 <__swsetup_r+0x30>
10008b10:	20c00e17 	ldw	r3,56(r4)
10008b14:	18002e26 	beq	r3,zero,10008bd0 <__swsetup_r+0xe8>
10008b18:	8080030b 	ldhu	r2,12(r16)
10008b1c:	10c0020c 	andi	r3,r2,8
10008b20:	100d883a 	mov	r6,r2
10008b24:	18000f26 	beq	r3,zero,10008b64 <__swsetup_r+0x7c>
10008b28:	80c00417 	ldw	r3,16(r16)
10008b2c:	18001526 	beq	r3,zero,10008b84 <__swsetup_r+0x9c>
10008b30:	1100004c 	andi	r4,r2,1
10008b34:	20001c1e 	bne	r4,zero,10008ba8 <__swsetup_r+0xc0>
10008b38:	1080008c 	andi	r2,r2,2
10008b3c:	1000261e 	bne	r2,zero,10008bd8 <__swsetup_r+0xf0>
10008b40:	80800517 	ldw	r2,20(r16)
10008b44:	80800215 	stw	r2,8(r16)
10008b48:	18001c26 	beq	r3,zero,10008bbc <__swsetup_r+0xd4>
10008b4c:	0005883a 	mov	r2,zero
10008b50:	dfc00217 	ldw	ra,8(sp)
10008b54:	dc400117 	ldw	r17,4(sp)
10008b58:	dc000017 	ldw	r16,0(sp)
10008b5c:	dec00304 	addi	sp,sp,12
10008b60:	f800283a 	ret
10008b64:	3080040c 	andi	r2,r6,16
10008b68:	10001726 	beq	r2,zero,10008bc8 <__swsetup_r+0xe0>
10008b6c:	3080010c 	andi	r2,r6,4
10008b70:	10001b1e 	bne	r2,zero,10008be0 <__swsetup_r+0xf8>
10008b74:	80c00417 	ldw	r3,16(r16)
10008b78:	30800214 	ori	r2,r6,8
10008b7c:	8080030d 	sth	r2,12(r16)
10008b80:	183feb1e 	bne	r3,zero,10008b30 <__alt_data_end+0xf8008b30>
10008b84:	1140a00c 	andi	r5,r2,640
10008b88:	01008004 	movi	r4,512
10008b8c:	293fe826 	beq	r5,r4,10008b30 <__alt_data_end+0xf8008b30>
10008b90:	8809883a 	mov	r4,r17
10008b94:	800b883a 	mov	r5,r16
10008b98:	000b1d80 	call	1000b1d8 <__smakebuf_r>
10008b9c:	8080030b 	ldhu	r2,12(r16)
10008ba0:	80c00417 	ldw	r3,16(r16)
10008ba4:	003fe206 	br	10008b30 <__alt_data_end+0xf8008b30>
10008ba8:	80800517 	ldw	r2,20(r16)
10008bac:	80000215 	stw	zero,8(r16)
10008bb0:	0085c83a 	sub	r2,zero,r2
10008bb4:	80800615 	stw	r2,24(r16)
10008bb8:	183fe41e 	bne	r3,zero,10008b4c <__alt_data_end+0xf8008b4c>
10008bbc:	8080030b 	ldhu	r2,12(r16)
10008bc0:	1080200c 	andi	r2,r2,128
10008bc4:	103fe226 	beq	r2,zero,10008b50 <__alt_data_end+0xf8008b50>
10008bc8:	00bfffc4 	movi	r2,-1
10008bcc:	003fe006 	br	10008b50 <__alt_data_end+0xf8008b50>
10008bd0:	000ab240 	call	1000ab24 <__sinit>
10008bd4:	003fd006 	br	10008b18 <__alt_data_end+0xf8008b18>
10008bd8:	0005883a 	mov	r2,zero
10008bdc:	003fd906 	br	10008b44 <__alt_data_end+0xf8008b44>
10008be0:	81400c17 	ldw	r5,48(r16)
10008be4:	28000626 	beq	r5,zero,10008c00 <__swsetup_r+0x118>
10008be8:	80801004 	addi	r2,r16,64
10008bec:	28800326 	beq	r5,r2,10008bfc <__swsetup_r+0x114>
10008bf0:	8809883a 	mov	r4,r17
10008bf4:	000ac980 	call	1000ac98 <_free_r>
10008bf8:	8180030b 	ldhu	r6,12(r16)
10008bfc:	80000c15 	stw	zero,48(r16)
10008c00:	80c00417 	ldw	r3,16(r16)
10008c04:	00bff6c4 	movi	r2,-37
10008c08:	118c703a 	and	r6,r2,r6
10008c0c:	80000115 	stw	zero,4(r16)
10008c10:	80c00015 	stw	r3,0(r16)
10008c14:	003fd806 	br	10008b78 <__alt_data_end+0xf8008b78>

10008c18 <quorem>:
10008c18:	defff204 	addi	sp,sp,-56
10008c1c:	ddc00b15 	stw	r23,44(sp)
10008c20:	20800417 	ldw	r2,16(r4)
10008c24:	2dc00417 	ldw	r23,16(r5)
10008c28:	dfc00d15 	stw	ra,52(sp)
10008c2c:	df000c15 	stw	fp,48(sp)
10008c30:	dd800a15 	stw	r22,40(sp)
10008c34:	dd400915 	stw	r21,36(sp)
10008c38:	dd000815 	stw	r20,32(sp)
10008c3c:	dcc00715 	stw	r19,28(sp)
10008c40:	dc800615 	stw	r18,24(sp)
10008c44:	dc400515 	stw	r17,20(sp)
10008c48:	dc000415 	stw	r16,16(sp)
10008c4c:	15c07a16 	blt	r2,r23,10008e38 <quorem+0x220>
10008c50:	bdffffc4 	addi	r23,r23,-1
10008c54:	bde9883a 	add	r20,r23,r23
10008c58:	28c00504 	addi	r3,r5,20
10008c5c:	a529883a 	add	r20,r20,r20
10008c60:	1d39883a 	add	fp,r3,r20
10008c64:	24c00504 	addi	r19,r4,20
10008c68:	d9400215 	stw	r5,8(sp)
10008c6c:	9d29883a 	add	r20,r19,r20
10008c70:	e1400017 	ldw	r5,0(fp)
10008c74:	d9000015 	stw	r4,0(sp)
10008c78:	a1000017 	ldw	r4,0(r20)
10008c7c:	29400044 	addi	r5,r5,1
10008c80:	d8c00115 	stw	r3,4(sp)
10008c84:	dd000315 	stw	r20,12(sp)
10008c88:	00040a00 	call	100040a0 <__udivsi3>
10008c8c:	1025883a 	mov	r18,r2
10008c90:	10003026 	beq	r2,zero,10008d54 <quorem+0x13c>
10008c94:	dc400117 	ldw	r17,4(sp)
10008c98:	9829883a 	mov	r20,r19
10008c9c:	002d883a 	mov	r22,zero
10008ca0:	0021883a 	mov	r16,zero
10008ca4:	8d400017 	ldw	r21,0(r17)
10008ca8:	900b883a 	mov	r5,r18
10008cac:	8c400104 	addi	r17,r17,4
10008cb0:	a93fffcc 	andi	r4,r21,65535
10008cb4:	00040b00 	call	100040b0 <__mulsi3>
10008cb8:	a808d43a 	srli	r4,r21,16
10008cbc:	900b883a 	mov	r5,r18
10008cc0:	b0ad883a 	add	r22,r22,r2
10008cc4:	00040b00 	call	100040b0 <__mulsi3>
10008cc8:	a1000017 	ldw	r4,0(r20)
10008ccc:	b00cd43a 	srli	r6,r22,16
10008cd0:	b0ffffcc 	andi	r3,r22,65535
10008cd4:	217fffcc 	andi	r5,r4,65535
10008cd8:	2c21883a 	add	r16,r5,r16
10008cdc:	80c7c83a 	sub	r3,r16,r3
10008ce0:	2008d43a 	srli	r4,r4,16
10008ce4:	3085883a 	add	r2,r6,r2
10008ce8:	1821d43a 	srai	r16,r3,16
10008cec:	117fffcc 	andi	r5,r2,65535
10008cf0:	2149c83a 	sub	r4,r4,r5
10008cf4:	2421883a 	add	r16,r4,r16
10008cf8:	8008943a 	slli	r4,r16,16
10008cfc:	18ffffcc 	andi	r3,r3,65535
10008d00:	102cd43a 	srli	r22,r2,16
10008d04:	20c8b03a 	or	r4,r4,r3
10008d08:	a1000015 	stw	r4,0(r20)
10008d0c:	8021d43a 	srai	r16,r16,16
10008d10:	a5000104 	addi	r20,r20,4
10008d14:	e47fe32e 	bgeu	fp,r17,10008ca4 <__alt_data_end+0xf8008ca4>
10008d18:	d8c00317 	ldw	r3,12(sp)
10008d1c:	18800017 	ldw	r2,0(r3)
10008d20:	10000c1e 	bne	r2,zero,10008d54 <quorem+0x13c>
10008d24:	18bfff04 	addi	r2,r3,-4
10008d28:	9880082e 	bgeu	r19,r2,10008d4c <quorem+0x134>
10008d2c:	18ffff17 	ldw	r3,-4(r3)
10008d30:	18000326 	beq	r3,zero,10008d40 <quorem+0x128>
10008d34:	00000506 	br	10008d4c <quorem+0x134>
10008d38:	10c00017 	ldw	r3,0(r2)
10008d3c:	1800031e 	bne	r3,zero,10008d4c <quorem+0x134>
10008d40:	10bfff04 	addi	r2,r2,-4
10008d44:	bdffffc4 	addi	r23,r23,-1
10008d48:	98bffb36 	bltu	r19,r2,10008d38 <__alt_data_end+0xf8008d38>
10008d4c:	d8c00017 	ldw	r3,0(sp)
10008d50:	1dc00415 	stw	r23,16(r3)
10008d54:	d9000017 	ldw	r4,0(sp)
10008d58:	d9400217 	ldw	r5,8(sp)
10008d5c:	000c7f80 	call	1000c7f8 <__mcmp>
10008d60:	10002816 	blt	r2,zero,10008e04 <quorem+0x1ec>
10008d64:	dc400117 	ldw	r17,4(sp)
10008d68:	94800044 	addi	r18,r18,1
10008d6c:	980d883a 	mov	r6,r19
10008d70:	0007883a 	mov	r3,zero
10008d74:	31000017 	ldw	r4,0(r6)
10008d78:	89400017 	ldw	r5,0(r17)
10008d7c:	31800104 	addi	r6,r6,4
10008d80:	20bfffcc 	andi	r2,r4,65535
10008d84:	10c7883a 	add	r3,r2,r3
10008d88:	28bfffcc 	andi	r2,r5,65535
10008d8c:	1885c83a 	sub	r2,r3,r2
10008d90:	280ad43a 	srli	r5,r5,16
10008d94:	2008d43a 	srli	r4,r4,16
10008d98:	1007d43a 	srai	r3,r2,16
10008d9c:	10bfffcc 	andi	r2,r2,65535
10008da0:	2149c83a 	sub	r4,r4,r5
10008da4:	20c9883a 	add	r4,r4,r3
10008da8:	200a943a 	slli	r5,r4,16
10008dac:	8c400104 	addi	r17,r17,4
10008db0:	2007d43a 	srai	r3,r4,16
10008db4:	2884b03a 	or	r2,r5,r2
10008db8:	30bfff15 	stw	r2,-4(r6)
10008dbc:	e47fed2e 	bgeu	fp,r17,10008d74 <__alt_data_end+0xf8008d74>
10008dc0:	bdc5883a 	add	r2,r23,r23
10008dc4:	1085883a 	add	r2,r2,r2
10008dc8:	9887883a 	add	r3,r19,r2
10008dcc:	18800017 	ldw	r2,0(r3)
10008dd0:	10000c1e 	bne	r2,zero,10008e04 <quorem+0x1ec>
10008dd4:	18bfff04 	addi	r2,r3,-4
10008dd8:	9880082e 	bgeu	r19,r2,10008dfc <quorem+0x1e4>
10008ddc:	18ffff17 	ldw	r3,-4(r3)
10008de0:	18000326 	beq	r3,zero,10008df0 <quorem+0x1d8>
10008de4:	00000506 	br	10008dfc <quorem+0x1e4>
10008de8:	10c00017 	ldw	r3,0(r2)
10008dec:	1800031e 	bne	r3,zero,10008dfc <quorem+0x1e4>
10008df0:	10bfff04 	addi	r2,r2,-4
10008df4:	bdffffc4 	addi	r23,r23,-1
10008df8:	98bffb36 	bltu	r19,r2,10008de8 <__alt_data_end+0xf8008de8>
10008dfc:	d8c00017 	ldw	r3,0(sp)
10008e00:	1dc00415 	stw	r23,16(r3)
10008e04:	9005883a 	mov	r2,r18
10008e08:	dfc00d17 	ldw	ra,52(sp)
10008e0c:	df000c17 	ldw	fp,48(sp)
10008e10:	ddc00b17 	ldw	r23,44(sp)
10008e14:	dd800a17 	ldw	r22,40(sp)
10008e18:	dd400917 	ldw	r21,36(sp)
10008e1c:	dd000817 	ldw	r20,32(sp)
10008e20:	dcc00717 	ldw	r19,28(sp)
10008e24:	dc800617 	ldw	r18,24(sp)
10008e28:	dc400517 	ldw	r17,20(sp)
10008e2c:	dc000417 	ldw	r16,16(sp)
10008e30:	dec00e04 	addi	sp,sp,56
10008e34:	f800283a 	ret
10008e38:	0005883a 	mov	r2,zero
10008e3c:	003ff206 	br	10008e08 <__alt_data_end+0xf8008e08>

10008e40 <_dtoa_r>:
10008e40:	20801017 	ldw	r2,64(r4)
10008e44:	deffde04 	addi	sp,sp,-136
10008e48:	dd401d15 	stw	r21,116(sp)
10008e4c:	dcc01b15 	stw	r19,108(sp)
10008e50:	dc801a15 	stw	r18,104(sp)
10008e54:	dc401915 	stw	r17,100(sp)
10008e58:	dc001815 	stw	r16,96(sp)
10008e5c:	dfc02115 	stw	ra,132(sp)
10008e60:	df002015 	stw	fp,128(sp)
10008e64:	ddc01f15 	stw	r23,124(sp)
10008e68:	dd801e15 	stw	r22,120(sp)
10008e6c:	dd001c15 	stw	r20,112(sp)
10008e70:	d9c00315 	stw	r7,12(sp)
10008e74:	2021883a 	mov	r16,r4
10008e78:	302b883a 	mov	r21,r6
10008e7c:	2825883a 	mov	r18,r5
10008e80:	dc402417 	ldw	r17,144(sp)
10008e84:	3027883a 	mov	r19,r6
10008e88:	10000826 	beq	r2,zero,10008eac <_dtoa_r+0x6c>
10008e8c:	21801117 	ldw	r6,68(r4)
10008e90:	00c00044 	movi	r3,1
10008e94:	100b883a 	mov	r5,r2
10008e98:	1986983a 	sll	r3,r3,r6
10008e9c:	11800115 	stw	r6,4(r2)
10008ea0:	10c00215 	stw	r3,8(r2)
10008ea4:	000bf240 	call	1000bf24 <_Bfree>
10008ea8:	80001015 	stw	zero,64(r16)
10008eac:	a8002d16 	blt	r21,zero,10008f64 <_dtoa_r+0x124>
10008eb0:	88000015 	stw	zero,0(r17)
10008eb4:	a8dffc2c 	andhi	r3,r21,32752
10008eb8:	009ffc34 	movhi	r2,32752
10008ebc:	18801b26 	beq	r3,r2,10008f2c <_dtoa_r+0xec>
10008ec0:	9009883a 	mov	r4,r18
10008ec4:	980b883a 	mov	r5,r19
10008ec8:	000d883a 	mov	r6,zero
10008ecc:	000f883a 	mov	r7,zero
10008ed0:	00052f40 	call	100052f4 <__eqdf2>
10008ed4:	10002a1e 	bne	r2,zero,10008f80 <_dtoa_r+0x140>
10008ed8:	d8c02317 	ldw	r3,140(sp)
10008edc:	d9002517 	ldw	r4,148(sp)
10008ee0:	00800044 	movi	r2,1
10008ee4:	18800015 	stw	r2,0(r3)
10008ee8:	2001a226 	beq	r4,zero,10009574 <_dtoa_r+0x734>
10008eec:	00840074 	movhi	r2,4097
10008ef0:	10894844 	addi	r2,r2,9505
10008ef4:	20800015 	stw	r2,0(r4)
10008ef8:	10bfffc4 	addi	r2,r2,-1
10008efc:	dfc02117 	ldw	ra,132(sp)
10008f00:	df002017 	ldw	fp,128(sp)
10008f04:	ddc01f17 	ldw	r23,124(sp)
10008f08:	dd801e17 	ldw	r22,120(sp)
10008f0c:	dd401d17 	ldw	r21,116(sp)
10008f10:	dd001c17 	ldw	r20,112(sp)
10008f14:	dcc01b17 	ldw	r19,108(sp)
10008f18:	dc801a17 	ldw	r18,104(sp)
10008f1c:	dc401917 	ldw	r17,100(sp)
10008f20:	dc001817 	ldw	r16,96(sp)
10008f24:	dec02204 	addi	sp,sp,136
10008f28:	f800283a 	ret
10008f2c:	d8c02317 	ldw	r3,140(sp)
10008f30:	0089c3c4 	movi	r2,9999
10008f34:	18800015 	stw	r2,0(r3)
10008f38:	90017c26 	beq	r18,zero,1000952c <_dtoa_r+0x6ec>
10008f3c:	00840074 	movhi	r2,4097
10008f40:	10895404 	addi	r2,r2,9552
10008f44:	d9002517 	ldw	r4,148(sp)
10008f48:	203fec26 	beq	r4,zero,10008efc <__alt_data_end+0xf8008efc>
10008f4c:	10c000c7 	ldb	r3,3(r2)
10008f50:	18017d1e 	bne	r3,zero,10009548 <_dtoa_r+0x708>
10008f54:	10c000c4 	addi	r3,r2,3
10008f58:	d9802517 	ldw	r6,148(sp)
10008f5c:	30c00015 	stw	r3,0(r6)
10008f60:	003fe606 	br	10008efc <__alt_data_end+0xf8008efc>
10008f64:	04e00034 	movhi	r19,32768
10008f68:	9cffffc4 	addi	r19,r19,-1
10008f6c:	00800044 	movi	r2,1
10008f70:	ace6703a 	and	r19,r21,r19
10008f74:	88800015 	stw	r2,0(r17)
10008f78:	982b883a 	mov	r21,r19
10008f7c:	003fcd06 	br	10008eb4 <__alt_data_end+0xf8008eb4>
10008f80:	d8800204 	addi	r2,sp,8
10008f84:	a822d53a 	srli	r17,r21,20
10008f88:	d8800015 	stw	r2,0(sp)
10008f8c:	8009883a 	mov	r4,r16
10008f90:	900b883a 	mov	r5,r18
10008f94:	980d883a 	mov	r6,r19
10008f98:	d9c00104 	addi	r7,sp,4
10008f9c:	000cb6c0 	call	1000cb6c <__d2b>
10008fa0:	1039883a 	mov	fp,r2
10008fa4:	88016a1e 	bne	r17,zero,10009550 <_dtoa_r+0x710>
10008fa8:	dd000217 	ldw	r20,8(sp)
10008fac:	dc400117 	ldw	r17,4(sp)
10008fb0:	00befbc4 	movi	r2,-1041
10008fb4:	a463883a 	add	r17,r20,r17
10008fb8:	8882ea16 	blt	r17,r2,10009b64 <_dtoa_r+0xd24>
10008fbc:	00bf0384 	movi	r2,-1010
10008fc0:	1445c83a 	sub	r2,r2,r17
10008fc4:	89010484 	addi	r4,r17,1042
10008fc8:	a8aa983a 	sll	r21,r21,r2
10008fcc:	9108d83a 	srl	r4,r18,r4
10008fd0:	a908b03a 	or	r4,r21,r4
10008fd4:	00067cc0 	call	100067cc <__floatunsidf>
10008fd8:	017f8434 	movhi	r5,65040
10008fdc:	01800044 	movi	r6,1
10008fe0:	1009883a 	mov	r4,r2
10008fe4:	194b883a 	add	r5,r3,r5
10008fe8:	8c7fffc4 	addi	r17,r17,-1
10008fec:	d9800f15 	stw	r6,60(sp)
10008ff0:	000d883a 	mov	r6,zero
10008ff4:	01cffe34 	movhi	r7,16376
10008ff8:	0005da40 	call	10005da4 <__subdf3>
10008ffc:	0198dbf4 	movhi	r6,25455
10009000:	01cff4f4 	movhi	r7,16339
10009004:	1009883a 	mov	r4,r2
10009008:	180b883a 	mov	r5,r3
1000900c:	3190d844 	addi	r6,r6,17249
10009010:	39e1e9c4 	addi	r7,r7,-30809
10009014:	00055380 	call	10005538 <__muldf3>
10009018:	01a2d874 	movhi	r6,35681
1000901c:	01cff1f4 	movhi	r7,16327
10009020:	180b883a 	mov	r5,r3
10009024:	31b22cc4 	addi	r6,r6,-14157
10009028:	39e28a04 	addi	r7,r7,-30168
1000902c:	1009883a 	mov	r4,r2
10009030:	00040d80 	call	100040d8 <__adddf3>
10009034:	8809883a 	mov	r4,r17
10009038:	102d883a 	mov	r22,r2
1000903c:	182b883a 	mov	r21,r3
10009040:	00066fc0 	call	100066fc <__floatsidf>
10009044:	019427f4 	movhi	r6,20639
10009048:	01cff4f4 	movhi	r7,16339
1000904c:	1009883a 	mov	r4,r2
10009050:	180b883a 	mov	r5,r3
10009054:	319e7ec4 	addi	r6,r6,31227
10009058:	39d104c4 	addi	r7,r7,17427
1000905c:	00055380 	call	10005538 <__muldf3>
10009060:	b009883a 	mov	r4,r22
10009064:	a80b883a 	mov	r5,r21
10009068:	100d883a 	mov	r6,r2
1000906c:	180f883a 	mov	r7,r3
10009070:	00040d80 	call	100040d8 <__adddf3>
10009074:	1009883a 	mov	r4,r2
10009078:	180b883a 	mov	r5,r3
1000907c:	102d883a 	mov	r22,r2
10009080:	182b883a 	mov	r21,r3
10009084:	00066740 	call	10006674 <__fixdfsi>
10009088:	b009883a 	mov	r4,r22
1000908c:	a80b883a 	mov	r5,r21
10009090:	000d883a 	mov	r6,zero
10009094:	000f883a 	mov	r7,zero
10009098:	d8800515 	stw	r2,20(sp)
1000909c:	00054580 	call	10005458 <__ledf2>
100090a0:	10023116 	blt	r2,zero,10009968 <_dtoa_r+0xb28>
100090a4:	d8c00517 	ldw	r3,20(sp)
100090a8:	00800584 	movi	r2,22
100090ac:	10c21f36 	bltu	r2,r3,1000992c <_dtoa_r+0xaec>
100090b0:	180490fa 	slli	r2,r3,3
100090b4:	00c40074 	movhi	r3,4097
100090b8:	18c96f04 	addi	r3,r3,9660
100090bc:	1885883a 	add	r2,r3,r2
100090c0:	11000017 	ldw	r4,0(r2)
100090c4:	11400117 	ldw	r5,4(r2)
100090c8:	900d883a 	mov	r6,r18
100090cc:	980f883a 	mov	r7,r19
100090d0:	00053780 	call	10005378 <__gedf2>
100090d4:	0082a70e 	bge	zero,r2,10009b74 <_dtoa_r+0xd34>
100090d8:	d9000517 	ldw	r4,20(sp)
100090dc:	d8000c15 	stw	zero,48(sp)
100090e0:	213fffc4 	addi	r4,r4,-1
100090e4:	d9000515 	stw	r4,20(sp)
100090e8:	a463c83a 	sub	r17,r20,r17
100090ec:	8dbfffc4 	addi	r22,r17,-1
100090f0:	b0021916 	blt	r22,zero,10009958 <_dtoa_r+0xb18>
100090f4:	d8000815 	stw	zero,32(sp)
100090f8:	d8800517 	ldw	r2,20(sp)
100090fc:	10020e16 	blt	r2,zero,10009938 <_dtoa_r+0xaf8>
10009100:	b0ad883a 	add	r22,r22,r2
10009104:	d8800a15 	stw	r2,40(sp)
10009108:	d8000915 	stw	zero,36(sp)
1000910c:	d8c00317 	ldw	r3,12(sp)
10009110:	00800244 	movi	r2,9
10009114:	10c11a36 	bltu	r2,r3,10009580 <_dtoa_r+0x740>
10009118:	00800144 	movi	r2,5
1000911c:	10c4fc0e 	bge	r2,r3,1000a510 <_dtoa_r+0x16d0>
10009120:	18ffff04 	addi	r3,r3,-4
10009124:	d8c00315 	stw	r3,12(sp)
10009128:	0029883a 	mov	r20,zero
1000912c:	d9800317 	ldw	r6,12(sp)
10009130:	008000c4 	movi	r2,3
10009134:	3083bd26 	beq	r6,r2,1000a02c <_dtoa_r+0x11ec>
10009138:	1183670e 	bge	r2,r6,10009ed8 <_dtoa_r+0x1098>
1000913c:	d8c00317 	ldw	r3,12(sp)
10009140:	00800104 	movi	r2,4
10009144:	1882e726 	beq	r3,r2,10009ce4 <_dtoa_r+0xea4>
10009148:	00800144 	movi	r2,5
1000914c:	1884f21e 	bne	r3,r2,1000a518 <_dtoa_r+0x16d8>
10009150:	00800044 	movi	r2,1
10009154:	d8800b15 	stw	r2,44(sp)
10009158:	d8c02217 	ldw	r3,136(sp)
1000915c:	d9000517 	ldw	r4,20(sp)
10009160:	1907883a 	add	r3,r3,r4
10009164:	19800044 	addi	r6,r3,1
10009168:	d8c00d15 	stw	r3,52(sp)
1000916c:	d9800615 	stw	r6,24(sp)
10009170:	0183c30e 	bge	zero,r6,1000a080 <_dtoa_r+0x1240>
10009174:	d9800617 	ldw	r6,24(sp)
10009178:	3023883a 	mov	r17,r6
1000917c:	80001115 	stw	zero,68(r16)
10009180:	008005c4 	movi	r2,23
10009184:	1184f62e 	bgeu	r2,r6,1000a560 <_dtoa_r+0x1720>
10009188:	00c00044 	movi	r3,1
1000918c:	00800104 	movi	r2,4
10009190:	1085883a 	add	r2,r2,r2
10009194:	11000504 	addi	r4,r2,20
10009198:	180b883a 	mov	r5,r3
1000919c:	18c00044 	addi	r3,r3,1
100091a0:	313ffb2e 	bgeu	r6,r4,10009190 <__alt_data_end+0xf8009190>
100091a4:	81401115 	stw	r5,68(r16)
100091a8:	8009883a 	mov	r4,r16
100091ac:	000be7c0 	call	1000be7c <_Balloc>
100091b0:	d8800715 	stw	r2,28(sp)
100091b4:	80801015 	stw	r2,64(r16)
100091b8:	00800384 	movi	r2,14
100091bc:	1440fd36 	bltu	r2,r17,100095b4 <_dtoa_r+0x774>
100091c0:	a000fc26 	beq	r20,zero,100095b4 <_dtoa_r+0x774>
100091c4:	d8800517 	ldw	r2,20(sp)
100091c8:	0083b90e 	bge	zero,r2,1000a0b0 <_dtoa_r+0x1270>
100091cc:	d8c00517 	ldw	r3,20(sp)
100091d0:	108003cc 	andi	r2,r2,15
100091d4:	100490fa 	slli	r2,r2,3
100091d8:	182fd13a 	srai	r23,r3,4
100091dc:	00c40074 	movhi	r3,4097
100091e0:	18c96f04 	addi	r3,r3,9660
100091e4:	1885883a 	add	r2,r3,r2
100091e8:	b8c0040c 	andi	r3,r23,16
100091ec:	12c00017 	ldw	r11,0(r2)
100091f0:	12800117 	ldw	r10,4(r2)
100091f4:	18039726 	beq	r3,zero,1000a054 <_dtoa_r+0x1214>
100091f8:	00840074 	movhi	r2,4097
100091fc:	10896504 	addi	r2,r2,9620
10009200:	11800817 	ldw	r6,32(r2)
10009204:	11c00917 	ldw	r7,36(r2)
10009208:	9009883a 	mov	r4,r18
1000920c:	980b883a 	mov	r5,r19
10009210:	da801615 	stw	r10,88(sp)
10009214:	dac01515 	stw	r11,84(sp)
10009218:	00049740 	call	10004974 <__divdf3>
1000921c:	da801617 	ldw	r10,88(sp)
10009220:	dac01517 	ldw	r11,84(sp)
10009224:	bdc003cc 	andi	r23,r23,15
10009228:	044000c4 	movi	r17,3
1000922c:	d8800e15 	stw	r2,56(sp)
10009230:	182b883a 	mov	r21,r3
10009234:	b8001126 	beq	r23,zero,1000927c <_dtoa_r+0x43c>
10009238:	05040074 	movhi	r20,4097
1000923c:	a5096504 	addi	r20,r20,9620
10009240:	5805883a 	mov	r2,r11
10009244:	5007883a 	mov	r3,r10
10009248:	b980004c 	andi	r6,r23,1
1000924c:	1009883a 	mov	r4,r2
10009250:	b82fd07a 	srai	r23,r23,1
10009254:	180b883a 	mov	r5,r3
10009258:	30000426 	beq	r6,zero,1000926c <_dtoa_r+0x42c>
1000925c:	a1800017 	ldw	r6,0(r20)
10009260:	a1c00117 	ldw	r7,4(r20)
10009264:	8c400044 	addi	r17,r17,1
10009268:	00055380 	call	10005538 <__muldf3>
1000926c:	a5000204 	addi	r20,r20,8
10009270:	b83ff51e 	bne	r23,zero,10009248 <__alt_data_end+0xf8009248>
10009274:	1017883a 	mov	r11,r2
10009278:	1815883a 	mov	r10,r3
1000927c:	d9000e17 	ldw	r4,56(sp)
10009280:	a80b883a 	mov	r5,r21
10009284:	580d883a 	mov	r6,r11
10009288:	500f883a 	mov	r7,r10
1000928c:	00049740 	call	10004974 <__divdf3>
10009290:	1029883a 	mov	r20,r2
10009294:	182b883a 	mov	r21,r3
10009298:	d9800c17 	ldw	r6,48(sp)
1000929c:	30000626 	beq	r6,zero,100092b8 <_dtoa_r+0x478>
100092a0:	a009883a 	mov	r4,r20
100092a4:	a80b883a 	mov	r5,r21
100092a8:	000d883a 	mov	r6,zero
100092ac:	01cffc34 	movhi	r7,16368
100092b0:	00054580 	call	10005458 <__ledf2>
100092b4:	10043216 	blt	r2,zero,1000a380 <_dtoa_r+0x1540>
100092b8:	8809883a 	mov	r4,r17
100092bc:	00066fc0 	call	100066fc <__floatsidf>
100092c0:	1009883a 	mov	r4,r2
100092c4:	180b883a 	mov	r5,r3
100092c8:	a00d883a 	mov	r6,r20
100092cc:	a80f883a 	mov	r7,r21
100092d0:	00055380 	call	10005538 <__muldf3>
100092d4:	000d883a 	mov	r6,zero
100092d8:	1009883a 	mov	r4,r2
100092dc:	180b883a 	mov	r5,r3
100092e0:	01d00734 	movhi	r7,16412
100092e4:	00040d80 	call	100040d8 <__adddf3>
100092e8:	1023883a 	mov	r17,r2
100092ec:	d9800617 	ldw	r6,24(sp)
100092f0:	00bf3034 	movhi	r2,64704
100092f4:	1885883a 	add	r2,r3,r2
100092f8:	d8800e15 	stw	r2,56(sp)
100092fc:	30032e26 	beq	r6,zero,10009fb8 <_dtoa_r+0x1178>
10009300:	d8c00517 	ldw	r3,20(sp)
10009304:	da800617 	ldw	r10,24(sp)
10009308:	d8c01215 	stw	r3,72(sp)
1000930c:	d9000b17 	ldw	r4,44(sp)
10009310:	2003b026 	beq	r4,zero,1000a1d4 <_dtoa_r+0x1394>
10009314:	50bfffc4 	addi	r2,r10,-1
10009318:	100490fa 	slli	r2,r2,3
1000931c:	00c40074 	movhi	r3,4097
10009320:	18c96f04 	addi	r3,r3,9660
10009324:	1885883a 	add	r2,r3,r2
10009328:	11800017 	ldw	r6,0(r2)
1000932c:	11c00117 	ldw	r7,4(r2)
10009330:	d8800717 	ldw	r2,28(sp)
10009334:	0009883a 	mov	r4,zero
10009338:	014ff834 	movhi	r5,16352
1000933c:	da801615 	stw	r10,88(sp)
10009340:	15c00044 	addi	r23,r2,1
10009344:	00049740 	call	10004974 <__divdf3>
10009348:	d9c00e17 	ldw	r7,56(sp)
1000934c:	880d883a 	mov	r6,r17
10009350:	1009883a 	mov	r4,r2
10009354:	180b883a 	mov	r5,r3
10009358:	0005da40 	call	10005da4 <__subdf3>
1000935c:	a80b883a 	mov	r5,r21
10009360:	a009883a 	mov	r4,r20
10009364:	d8c01015 	stw	r3,64(sp)
10009368:	d8800e15 	stw	r2,56(sp)
1000936c:	00066740 	call	10006674 <__fixdfsi>
10009370:	1009883a 	mov	r4,r2
10009374:	d8801715 	stw	r2,92(sp)
10009378:	00066fc0 	call	100066fc <__floatsidf>
1000937c:	a009883a 	mov	r4,r20
10009380:	a80b883a 	mov	r5,r21
10009384:	100d883a 	mov	r6,r2
10009388:	180f883a 	mov	r7,r3
1000938c:	0005da40 	call	10005da4 <__subdf3>
10009390:	da001717 	ldw	r8,92(sp)
10009394:	1829883a 	mov	r20,r3
10009398:	d8c00717 	ldw	r3,28(sp)
1000939c:	d9000e17 	ldw	r4,56(sp)
100093a0:	d9401017 	ldw	r5,64(sp)
100093a4:	42000c04 	addi	r8,r8,48
100093a8:	1023883a 	mov	r17,r2
100093ac:	1a000005 	stb	r8,0(r3)
100093b0:	880d883a 	mov	r6,r17
100093b4:	a00f883a 	mov	r7,r20
100093b8:	402b883a 	mov	r21,r8
100093bc:	00053780 	call	10005378 <__gedf2>
100093c0:	00844516 	blt	zero,r2,1000a4d8 <_dtoa_r+0x1698>
100093c4:	0009883a 	mov	r4,zero
100093c8:	014ffc34 	movhi	r5,16368
100093cc:	880d883a 	mov	r6,r17
100093d0:	a00f883a 	mov	r7,r20
100093d4:	0005da40 	call	10005da4 <__subdf3>
100093d8:	d9000e17 	ldw	r4,56(sp)
100093dc:	d9401017 	ldw	r5,64(sp)
100093e0:	100d883a 	mov	r6,r2
100093e4:	180f883a 	mov	r7,r3
100093e8:	00053780 	call	10005378 <__gedf2>
100093ec:	da801617 	ldw	r10,88(sp)
100093f0:	00843616 	blt	zero,r2,1000a4cc <_dtoa_r+0x168c>
100093f4:	00800044 	movi	r2,1
100093f8:	12806e0e 	bge	r2,r10,100095b4 <_dtoa_r+0x774>
100093fc:	d9000717 	ldw	r4,28(sp)
10009400:	dd801315 	stw	r22,76(sp)
10009404:	dc001115 	stw	r16,68(sp)
10009408:	2295883a 	add	r10,r4,r10
1000940c:	dcc01415 	stw	r19,80(sp)
10009410:	502d883a 	mov	r22,r10
10009414:	dcc01017 	ldw	r19,64(sp)
10009418:	b821883a 	mov	r16,r23
1000941c:	dc801015 	stw	r18,64(sp)
10009420:	dc800e17 	ldw	r18,56(sp)
10009424:	00000906 	br	1000944c <_dtoa_r+0x60c>
10009428:	0005da40 	call	10005da4 <__subdf3>
1000942c:	1009883a 	mov	r4,r2
10009430:	180b883a 	mov	r5,r3
10009434:	900d883a 	mov	r6,r18
10009438:	980f883a 	mov	r7,r19
1000943c:	00054580 	call	10005458 <__ledf2>
10009440:	10040e16 	blt	r2,zero,1000a47c <_dtoa_r+0x163c>
10009444:	b821883a 	mov	r16,r23
10009448:	bd841026 	beq	r23,r22,1000a48c <_dtoa_r+0x164c>
1000944c:	9009883a 	mov	r4,r18
10009450:	980b883a 	mov	r5,r19
10009454:	000d883a 	mov	r6,zero
10009458:	01d00934 	movhi	r7,16420
1000945c:	00055380 	call	10005538 <__muldf3>
10009460:	000d883a 	mov	r6,zero
10009464:	01d00934 	movhi	r7,16420
10009468:	8809883a 	mov	r4,r17
1000946c:	a00b883a 	mov	r5,r20
10009470:	1025883a 	mov	r18,r2
10009474:	1827883a 	mov	r19,r3
10009478:	00055380 	call	10005538 <__muldf3>
1000947c:	180b883a 	mov	r5,r3
10009480:	1009883a 	mov	r4,r2
10009484:	1823883a 	mov	r17,r3
10009488:	1029883a 	mov	r20,r2
1000948c:	00066740 	call	10006674 <__fixdfsi>
10009490:	1009883a 	mov	r4,r2
10009494:	102b883a 	mov	r21,r2
10009498:	00066fc0 	call	100066fc <__floatsidf>
1000949c:	a009883a 	mov	r4,r20
100094a0:	880b883a 	mov	r5,r17
100094a4:	100d883a 	mov	r6,r2
100094a8:	180f883a 	mov	r7,r3
100094ac:	0005da40 	call	10005da4 <__subdf3>
100094b0:	ad400c04 	addi	r21,r21,48
100094b4:	1009883a 	mov	r4,r2
100094b8:	180b883a 	mov	r5,r3
100094bc:	900d883a 	mov	r6,r18
100094c0:	980f883a 	mov	r7,r19
100094c4:	85400005 	stb	r21,0(r16)
100094c8:	1023883a 	mov	r17,r2
100094cc:	1829883a 	mov	r20,r3
100094d0:	00054580 	call	10005458 <__ledf2>
100094d4:	bdc00044 	addi	r23,r23,1
100094d8:	0009883a 	mov	r4,zero
100094dc:	014ffc34 	movhi	r5,16368
100094e0:	880d883a 	mov	r6,r17
100094e4:	a00f883a 	mov	r7,r20
100094e8:	103fcf0e 	bge	r2,zero,10009428 <__alt_data_end+0xf8009428>
100094ec:	d9801217 	ldw	r6,72(sp)
100094f0:	dc001117 	ldw	r16,68(sp)
100094f4:	d9800515 	stw	r6,20(sp)
100094f8:	8009883a 	mov	r4,r16
100094fc:	e00b883a 	mov	r5,fp
10009500:	000bf240 	call	1000bf24 <_Bfree>
10009504:	d8c00517 	ldw	r3,20(sp)
10009508:	d9002317 	ldw	r4,140(sp)
1000950c:	d9802517 	ldw	r6,148(sp)
10009510:	b8000005 	stb	zero,0(r23)
10009514:	18800044 	addi	r2,r3,1
10009518:	20800015 	stw	r2,0(r4)
1000951c:	30027226 	beq	r6,zero,10009ee8 <_dtoa_r+0x10a8>
10009520:	35c00015 	stw	r23,0(r6)
10009524:	d8800717 	ldw	r2,28(sp)
10009528:	003e7406 	br	10008efc <__alt_data_end+0xf8008efc>
1000952c:	00800434 	movhi	r2,16
10009530:	10bfffc4 	addi	r2,r2,-1
10009534:	a8aa703a 	and	r21,r21,r2
10009538:	a83e801e 	bne	r21,zero,10008f3c <__alt_data_end+0xf8008f3c>
1000953c:	00840074 	movhi	r2,4097
10009540:	10895104 	addi	r2,r2,9540
10009544:	003e7f06 	br	10008f44 <__alt_data_end+0xf8008f44>
10009548:	10c00204 	addi	r3,r2,8
1000954c:	003e8206 	br	10008f58 <__alt_data_end+0xf8008f58>
10009550:	01400434 	movhi	r5,16
10009554:	297fffc4 	addi	r5,r5,-1
10009558:	994a703a 	and	r5,r19,r5
1000955c:	9009883a 	mov	r4,r18
10009560:	8c7f0044 	addi	r17,r17,-1023
10009564:	294ffc34 	orhi	r5,r5,16368
10009568:	dd000217 	ldw	r20,8(sp)
1000956c:	d8000f15 	stw	zero,60(sp)
10009570:	003e9f06 	br	10008ff0 <__alt_data_end+0xf8008ff0>
10009574:	00840074 	movhi	r2,4097
10009578:	10894804 	addi	r2,r2,9504
1000957c:	003e5f06 	br	10008efc <__alt_data_end+0xf8008efc>
10009580:	80001115 	stw	zero,68(r16)
10009584:	8009883a 	mov	r4,r16
10009588:	000b883a 	mov	r5,zero
1000958c:	000be7c0 	call	1000be7c <_Balloc>
10009590:	01bfffc4 	movi	r6,-1
10009594:	d8800715 	stw	r2,28(sp)
10009598:	80801015 	stw	r2,64(r16)
1000959c:	00800044 	movi	r2,1
100095a0:	d9800615 	stw	r6,24(sp)
100095a4:	d8800b15 	stw	r2,44(sp)
100095a8:	d8002215 	stw	zero,136(sp)
100095ac:	d9800d15 	stw	r6,52(sp)
100095b0:	d8000315 	stw	zero,12(sp)
100095b4:	d8800117 	ldw	r2,4(sp)
100095b8:	10008e16 	blt	r2,zero,100097f4 <_dtoa_r+0x9b4>
100095bc:	d9000517 	ldw	r4,20(sp)
100095c0:	00c00384 	movi	r3,14
100095c4:	19008b16 	blt	r3,r4,100097f4 <_dtoa_r+0x9b4>
100095c8:	200490fa 	slli	r2,r4,3
100095cc:	00c40074 	movhi	r3,4097
100095d0:	d9802217 	ldw	r6,136(sp)
100095d4:	18c96f04 	addi	r3,r3,9660
100095d8:	1885883a 	add	r2,r3,r2
100095dc:	14400017 	ldw	r17,0(r2)
100095e0:	15000117 	ldw	r20,4(r2)
100095e4:	3001c716 	blt	r6,zero,10009d04 <_dtoa_r+0xec4>
100095e8:	880d883a 	mov	r6,r17
100095ec:	a00f883a 	mov	r7,r20
100095f0:	9009883a 	mov	r4,r18
100095f4:	980b883a 	mov	r5,r19
100095f8:	00049740 	call	10004974 <__divdf3>
100095fc:	180b883a 	mov	r5,r3
10009600:	1009883a 	mov	r4,r2
10009604:	00066740 	call	10006674 <__fixdfsi>
10009608:	1009883a 	mov	r4,r2
1000960c:	102d883a 	mov	r22,r2
10009610:	00066fc0 	call	100066fc <__floatsidf>
10009614:	1009883a 	mov	r4,r2
10009618:	180b883a 	mov	r5,r3
1000961c:	880d883a 	mov	r6,r17
10009620:	a00f883a 	mov	r7,r20
10009624:	00055380 	call	10005538 <__muldf3>
10009628:	9009883a 	mov	r4,r18
1000962c:	980b883a 	mov	r5,r19
10009630:	100d883a 	mov	r6,r2
10009634:	180f883a 	mov	r7,r3
10009638:	0005da40 	call	10005da4 <__subdf3>
1000963c:	d9000717 	ldw	r4,28(sp)
10009640:	d9800617 	ldw	r6,24(sp)
10009644:	180b883a 	mov	r5,r3
10009648:	b0c00c04 	addi	r3,r22,48
1000964c:	20c00005 	stb	r3,0(r4)
10009650:	25c00044 	addi	r23,r4,1
10009654:	01000044 	movi	r4,1
10009658:	1011883a 	mov	r8,r2
1000965c:	2807883a 	mov	r3,r5
10009660:	31003d26 	beq	r6,r4,10009758 <_dtoa_r+0x918>
10009664:	000d883a 	mov	r6,zero
10009668:	01d00934 	movhi	r7,16420
1000966c:	1009883a 	mov	r4,r2
10009670:	00055380 	call	10005538 <__muldf3>
10009674:	1009883a 	mov	r4,r2
10009678:	180b883a 	mov	r5,r3
1000967c:	000d883a 	mov	r6,zero
10009680:	000f883a 	mov	r7,zero
10009684:	1027883a 	mov	r19,r2
10009688:	182b883a 	mov	r21,r3
1000968c:	00052f40 	call	100052f4 <__eqdf2>
10009690:	103f9926 	beq	r2,zero,100094f8 <__alt_data_end+0xf80094f8>
10009694:	d8c00617 	ldw	r3,24(sp)
10009698:	d9000717 	ldw	r4,28(sp)
1000969c:	b825883a 	mov	r18,r23
100096a0:	18bfffc4 	addi	r2,r3,-1
100096a4:	20ad883a 	add	r22,r4,r2
100096a8:	dc000315 	stw	r16,12(sp)
100096ac:	00000a06 	br	100096d8 <_dtoa_r+0x898>
100096b0:	00055380 	call	10005538 <__muldf3>
100096b4:	1009883a 	mov	r4,r2
100096b8:	180b883a 	mov	r5,r3
100096bc:	000d883a 	mov	r6,zero
100096c0:	000f883a 	mov	r7,zero
100096c4:	1027883a 	mov	r19,r2
100096c8:	182b883a 	mov	r21,r3
100096cc:	b825883a 	mov	r18,r23
100096d0:	00052f40 	call	100052f4 <__eqdf2>
100096d4:	10022626 	beq	r2,zero,10009f70 <_dtoa_r+0x1130>
100096d8:	880d883a 	mov	r6,r17
100096dc:	a00f883a 	mov	r7,r20
100096e0:	9809883a 	mov	r4,r19
100096e4:	a80b883a 	mov	r5,r21
100096e8:	00049740 	call	10004974 <__divdf3>
100096ec:	180b883a 	mov	r5,r3
100096f0:	1009883a 	mov	r4,r2
100096f4:	00066740 	call	10006674 <__fixdfsi>
100096f8:	1009883a 	mov	r4,r2
100096fc:	1021883a 	mov	r16,r2
10009700:	00066fc0 	call	100066fc <__floatsidf>
10009704:	1009883a 	mov	r4,r2
10009708:	180b883a 	mov	r5,r3
1000970c:	880d883a 	mov	r6,r17
10009710:	a00f883a 	mov	r7,r20
10009714:	00055380 	call	10005538 <__muldf3>
10009718:	9809883a 	mov	r4,r19
1000971c:	a80b883a 	mov	r5,r21
10009720:	100d883a 	mov	r6,r2
10009724:	180f883a 	mov	r7,r3
10009728:	0005da40 	call	10005da4 <__subdf3>
1000972c:	82000c04 	addi	r8,r16,48
10009730:	92000005 	stb	r8,0(r18)
10009734:	1009883a 	mov	r4,r2
10009738:	180b883a 	mov	r5,r3
1000973c:	000d883a 	mov	r6,zero
10009740:	01d00934 	movhi	r7,16420
10009744:	1011883a 	mov	r8,r2
10009748:	bdc00044 	addi	r23,r23,1
1000974c:	95bfd81e 	bne	r18,r22,100096b0 <__alt_data_end+0xf80096b0>
10009750:	802d883a 	mov	r22,r16
10009754:	dc000317 	ldw	r16,12(sp)
10009758:	4009883a 	mov	r4,r8
1000975c:	180b883a 	mov	r5,r3
10009760:	400d883a 	mov	r6,r8
10009764:	180f883a 	mov	r7,r3
10009768:	00040d80 	call	100040d8 <__adddf3>
1000976c:	8809883a 	mov	r4,r17
10009770:	a00b883a 	mov	r5,r20
10009774:	100d883a 	mov	r6,r2
10009778:	180f883a 	mov	r7,r3
1000977c:	1027883a 	mov	r19,r2
10009780:	1825883a 	mov	r18,r3
10009784:	00054580 	call	10005458 <__ledf2>
10009788:	10000816 	blt	r2,zero,100097ac <_dtoa_r+0x96c>
1000978c:	8809883a 	mov	r4,r17
10009790:	a00b883a 	mov	r5,r20
10009794:	980d883a 	mov	r6,r19
10009798:	900f883a 	mov	r7,r18
1000979c:	00052f40 	call	100052f4 <__eqdf2>
100097a0:	103f551e 	bne	r2,zero,100094f8 <__alt_data_end+0xf80094f8>
100097a4:	b580004c 	andi	r22,r22,1
100097a8:	b03f5326 	beq	r22,zero,100094f8 <__alt_data_end+0xf80094f8>
100097ac:	bd7fffc3 	ldbu	r21,-1(r23)
100097b0:	b8bfffc4 	addi	r2,r23,-1
100097b4:	1007883a 	mov	r3,r2
100097b8:	01400e44 	movi	r5,57
100097bc:	d9800717 	ldw	r6,28(sp)
100097c0:	00000506 	br	100097d8 <_dtoa_r+0x998>
100097c4:	18ffffc4 	addi	r3,r3,-1
100097c8:	30825e26 	beq	r6,r2,1000a144 <_dtoa_r+0x1304>
100097cc:	1d400003 	ldbu	r21,0(r3)
100097d0:	102f883a 	mov	r23,r2
100097d4:	10bfffc4 	addi	r2,r2,-1
100097d8:	a9003fcc 	andi	r4,r21,255
100097dc:	2100201c 	xori	r4,r4,128
100097e0:	213fe004 	addi	r4,r4,-128
100097e4:	217ff726 	beq	r4,r5,100097c4 <__alt_data_end+0xf80097c4>
100097e8:	aa000044 	addi	r8,r21,1
100097ec:	12000005 	stb	r8,0(r2)
100097f0:	003f4106 	br	100094f8 <__alt_data_end+0xf80094f8>
100097f4:	d8c00b17 	ldw	r3,44(sp)
100097f8:	18006726 	beq	r3,zero,10009998 <_dtoa_r+0xb58>
100097fc:	d9000317 	ldw	r4,12(sp)
10009800:	00c00044 	movi	r3,1
10009804:	19016a0e 	bge	r3,r4,10009db0 <_dtoa_r+0xf70>
10009808:	d8800617 	ldw	r2,24(sp)
1000980c:	d8c00917 	ldw	r3,36(sp)
10009810:	157fffc4 	addi	r21,r2,-1
10009814:	1d420716 	blt	r3,r21,1000a034 <_dtoa_r+0x11f4>
10009818:	1d6bc83a 	sub	r21,r3,r21
1000981c:	d8800617 	ldw	r2,24(sp)
10009820:	1002c716 	blt	r2,zero,1000a340 <_dtoa_r+0x1500>
10009824:	dd000817 	ldw	r20,32(sp)
10009828:	d8800617 	ldw	r2,24(sp)
1000982c:	d9800817 	ldw	r6,32(sp)
10009830:	8009883a 	mov	r4,r16
10009834:	01400044 	movi	r5,1
10009838:	308d883a 	add	r6,r6,r2
1000983c:	d9800815 	stw	r6,32(sp)
10009840:	b0ad883a 	add	r22,r22,r2
10009844:	000c2a40 	call	1000c2a4 <__i2b>
10009848:	1023883a 	mov	r17,r2
1000984c:	a0000826 	beq	r20,zero,10009870 <_dtoa_r+0xa30>
10009850:	0580070e 	bge	zero,r22,10009870 <_dtoa_r+0xa30>
10009854:	b005883a 	mov	r2,r22
10009858:	a5812016 	blt	r20,r22,10009cdc <_dtoa_r+0xe9c>
1000985c:	d8c00817 	ldw	r3,32(sp)
10009860:	a0a9c83a 	sub	r20,r20,r2
10009864:	b0adc83a 	sub	r22,r22,r2
10009868:	1887c83a 	sub	r3,r3,r2
1000986c:	d8c00815 	stw	r3,32(sp)
10009870:	d9000917 	ldw	r4,36(sp)
10009874:	0100140e 	bge	zero,r4,100098c8 <_dtoa_r+0xa88>
10009878:	d9800b17 	ldw	r6,44(sp)
1000987c:	3001e526 	beq	r6,zero,1000a014 <_dtoa_r+0x11d4>
10009880:	05400e0e 	bge	zero,r21,100098bc <_dtoa_r+0xa7c>
10009884:	880b883a 	mov	r5,r17
10009888:	8009883a 	mov	r4,r16
1000988c:	a80d883a 	mov	r6,r21
10009890:	000c5700 	call	1000c570 <__pow5mult>
10009894:	e00d883a 	mov	r6,fp
10009898:	8009883a 	mov	r4,r16
1000989c:	100b883a 	mov	r5,r2
100098a0:	1023883a 	mov	r17,r2
100098a4:	000c2e00 	call	1000c2e0 <__multiply>
100098a8:	102f883a 	mov	r23,r2
100098ac:	e00b883a 	mov	r5,fp
100098b0:	8009883a 	mov	r4,r16
100098b4:	000bf240 	call	1000bf24 <_Bfree>
100098b8:	b839883a 	mov	fp,r23
100098bc:	d8800917 	ldw	r2,36(sp)
100098c0:	154dc83a 	sub	r6,r2,r21
100098c4:	3001281e 	bne	r6,zero,10009d68 <_dtoa_r+0xf28>
100098c8:	05c00044 	movi	r23,1
100098cc:	8009883a 	mov	r4,r16
100098d0:	b80b883a 	mov	r5,r23
100098d4:	000c2a40 	call	1000c2a4 <__i2b>
100098d8:	d8c00a17 	ldw	r3,40(sp)
100098dc:	102b883a 	mov	r21,r2
100098e0:	00c0310e 	bge	zero,r3,100099a8 <_dtoa_r+0xb68>
100098e4:	8009883a 	mov	r4,r16
100098e8:	100b883a 	mov	r5,r2
100098ec:	180d883a 	mov	r6,r3
100098f0:	000c5700 	call	1000c570 <__pow5mult>
100098f4:	d9000317 	ldw	r4,12(sp)
100098f8:	102b883a 	mov	r21,r2
100098fc:	b9011f0e 	bge	r23,r4,10009d7c <_dtoa_r+0xf3c>
10009900:	0027883a 	mov	r19,zero
10009904:	a8800417 	ldw	r2,16(r21)
10009908:	10800104 	addi	r2,r2,4
1000990c:	1085883a 	add	r2,r2,r2
10009910:	1085883a 	add	r2,r2,r2
10009914:	a885883a 	add	r2,r21,r2
10009918:	11000017 	ldw	r4,0(r2)
1000991c:	000c18c0 	call	1000c18c <__hi0bits>
10009920:	00c00804 	movi	r3,32
10009924:	1885c83a 	sub	r2,r3,r2
10009928:	00002506 	br	100099c0 <_dtoa_r+0xb80>
1000992c:	01800044 	movi	r6,1
10009930:	d9800c15 	stw	r6,48(sp)
10009934:	003dec06 	br	100090e8 <__alt_data_end+0xf80090e8>
10009938:	d8c00817 	ldw	r3,32(sp)
1000993c:	d9000517 	ldw	r4,20(sp)
10009940:	d8000a15 	stw	zero,40(sp)
10009944:	1907c83a 	sub	r3,r3,r4
10009948:	010dc83a 	sub	r6,zero,r4
1000994c:	d8c00815 	stw	r3,32(sp)
10009950:	d9800915 	stw	r6,36(sp)
10009954:	003ded06 	br	1000910c <__alt_data_end+0xf800910c>
10009958:	05adc83a 	sub	r22,zero,r22
1000995c:	dd800815 	stw	r22,32(sp)
10009960:	002d883a 	mov	r22,zero
10009964:	003de406 	br	100090f8 <__alt_data_end+0xf80090f8>
10009968:	d9000517 	ldw	r4,20(sp)
1000996c:	00066fc0 	call	100066fc <__floatsidf>
10009970:	1009883a 	mov	r4,r2
10009974:	180b883a 	mov	r5,r3
10009978:	b00d883a 	mov	r6,r22
1000997c:	a80f883a 	mov	r7,r21
10009980:	00052f40 	call	100052f4 <__eqdf2>
10009984:	103dc726 	beq	r2,zero,100090a4 <__alt_data_end+0xf80090a4>
10009988:	d8800517 	ldw	r2,20(sp)
1000998c:	10bfffc4 	addi	r2,r2,-1
10009990:	d8800515 	stw	r2,20(sp)
10009994:	003dc306 	br	100090a4 <__alt_data_end+0xf80090a4>
10009998:	dd400917 	ldw	r21,36(sp)
1000999c:	dd000817 	ldw	r20,32(sp)
100099a0:	0023883a 	mov	r17,zero
100099a4:	003fa906 	br	1000984c <__alt_data_end+0xf800984c>
100099a8:	d9800317 	ldw	r6,12(sp)
100099ac:	b981670e 	bge	r23,r6,10009f4c <_dtoa_r+0x110c>
100099b0:	0027883a 	mov	r19,zero
100099b4:	d8c00a17 	ldw	r3,40(sp)
100099b8:	183fd21e 	bne	r3,zero,10009904 <__alt_data_end+0xf8009904>
100099bc:	00800044 	movi	r2,1
100099c0:	1585883a 	add	r2,r2,r22
100099c4:	108007cc 	andi	r2,r2,31
100099c8:	10005f26 	beq	r2,zero,10009b48 <_dtoa_r+0xd08>
100099cc:	00c00804 	movi	r3,32
100099d0:	1887c83a 	sub	r3,r3,r2
100099d4:	01000104 	movi	r4,4
100099d8:	20c2dd0e 	bge	r4,r3,1000a550 <_dtoa_r+0x1710>
100099dc:	d9000817 	ldw	r4,32(sp)
100099e0:	00c00704 	movi	r3,28
100099e4:	1885c83a 	sub	r2,r3,r2
100099e8:	2089883a 	add	r4,r4,r2
100099ec:	d9000815 	stw	r4,32(sp)
100099f0:	a0a9883a 	add	r20,r20,r2
100099f4:	b0ad883a 	add	r22,r22,r2
100099f8:	d8800817 	ldw	r2,32(sp)
100099fc:	0080050e 	bge	zero,r2,10009a14 <_dtoa_r+0xbd4>
10009a00:	e00b883a 	mov	r5,fp
10009a04:	8009883a 	mov	r4,r16
10009a08:	100d883a 	mov	r6,r2
10009a0c:	000c6b00 	call	1000c6b0 <__lshift>
10009a10:	1039883a 	mov	fp,r2
10009a14:	0580050e 	bge	zero,r22,10009a2c <_dtoa_r+0xbec>
10009a18:	a80b883a 	mov	r5,r21
10009a1c:	8009883a 	mov	r4,r16
10009a20:	b00d883a 	mov	r6,r22
10009a24:	000c6b00 	call	1000c6b0 <__lshift>
10009a28:	102b883a 	mov	r21,r2
10009a2c:	d8c00c17 	ldw	r3,48(sp)
10009a30:	1801161e 	bne	r3,zero,10009e8c <_dtoa_r+0x104c>
10009a34:	d8c00617 	ldw	r3,24(sp)
10009a38:	00c12d0e 	bge	zero,r3,10009ef0 <_dtoa_r+0x10b0>
10009a3c:	d8c00b17 	ldw	r3,44(sp)
10009a40:	1800571e 	bne	r3,zero,10009ba0 <_dtoa_r+0xd60>
10009a44:	dc800717 	ldw	r18,28(sp)
10009a48:	dcc00617 	ldw	r19,24(sp)
10009a4c:	9029883a 	mov	r20,r18
10009a50:	00000206 	br	10009a5c <_dtoa_r+0xc1c>
10009a54:	000bf4c0 	call	1000bf4c <__multadd>
10009a58:	1039883a 	mov	fp,r2
10009a5c:	e009883a 	mov	r4,fp
10009a60:	a80b883a 	mov	r5,r21
10009a64:	0008c180 	call	10008c18 <quorem>
10009a68:	10800c04 	addi	r2,r2,48
10009a6c:	90800005 	stb	r2,0(r18)
10009a70:	94800044 	addi	r18,r18,1
10009a74:	9507c83a 	sub	r3,r18,r20
10009a78:	8009883a 	mov	r4,r16
10009a7c:	e00b883a 	mov	r5,fp
10009a80:	01800284 	movi	r6,10
10009a84:	000f883a 	mov	r7,zero
10009a88:	1cfff216 	blt	r3,r19,10009a54 <__alt_data_end+0xf8009a54>
10009a8c:	1011883a 	mov	r8,r2
10009a90:	d8800617 	ldw	r2,24(sp)
10009a94:	00822e0e 	bge	zero,r2,1000a350 <_dtoa_r+0x1510>
10009a98:	d9000717 	ldw	r4,28(sp)
10009a9c:	0025883a 	mov	r18,zero
10009aa0:	20af883a 	add	r23,r4,r2
10009aa4:	e00b883a 	mov	r5,fp
10009aa8:	01800044 	movi	r6,1
10009aac:	8009883a 	mov	r4,r16
10009ab0:	da001715 	stw	r8,92(sp)
10009ab4:	000c6b00 	call	1000c6b0 <__lshift>
10009ab8:	1009883a 	mov	r4,r2
10009abc:	a80b883a 	mov	r5,r21
10009ac0:	1039883a 	mov	fp,r2
10009ac4:	000c7f80 	call	1000c7f8 <__mcmp>
10009ac8:	da001717 	ldw	r8,92(sp)
10009acc:	00816e0e 	bge	zero,r2,1000a088 <_dtoa_r+0x1248>
10009ad0:	b93fffc3 	ldbu	r4,-1(r23)
10009ad4:	b8bfffc4 	addi	r2,r23,-1
10009ad8:	1007883a 	mov	r3,r2
10009adc:	01800e44 	movi	r6,57
10009ae0:	d9c00717 	ldw	r7,28(sp)
10009ae4:	00000506 	br	10009afc <_dtoa_r+0xcbc>
10009ae8:	18ffffc4 	addi	r3,r3,-1
10009aec:	38811926 	beq	r7,r2,10009f54 <_dtoa_r+0x1114>
10009af0:	19000003 	ldbu	r4,0(r3)
10009af4:	102f883a 	mov	r23,r2
10009af8:	10bfffc4 	addi	r2,r2,-1
10009afc:	21403fcc 	andi	r5,r4,255
10009b00:	2940201c 	xori	r5,r5,128
10009b04:	297fe004 	addi	r5,r5,-128
10009b08:	29bff726 	beq	r5,r6,10009ae8 <__alt_data_end+0xf8009ae8>
10009b0c:	21000044 	addi	r4,r4,1
10009b10:	11000005 	stb	r4,0(r2)
10009b14:	8009883a 	mov	r4,r16
10009b18:	a80b883a 	mov	r5,r21
10009b1c:	000bf240 	call	1000bf24 <_Bfree>
10009b20:	883e7526 	beq	r17,zero,100094f8 <__alt_data_end+0xf80094f8>
10009b24:	90000426 	beq	r18,zero,10009b38 <_dtoa_r+0xcf8>
10009b28:	94400326 	beq	r18,r17,10009b38 <_dtoa_r+0xcf8>
10009b2c:	8009883a 	mov	r4,r16
10009b30:	900b883a 	mov	r5,r18
10009b34:	000bf240 	call	1000bf24 <_Bfree>
10009b38:	8009883a 	mov	r4,r16
10009b3c:	880b883a 	mov	r5,r17
10009b40:	000bf240 	call	1000bf24 <_Bfree>
10009b44:	003e6c06 	br	100094f8 <__alt_data_end+0xf80094f8>
10009b48:	00800704 	movi	r2,28
10009b4c:	d9800817 	ldw	r6,32(sp)
10009b50:	a0a9883a 	add	r20,r20,r2
10009b54:	b0ad883a 	add	r22,r22,r2
10009b58:	308d883a 	add	r6,r6,r2
10009b5c:	d9800815 	stw	r6,32(sp)
10009b60:	003fa506 	br	100099f8 <__alt_data_end+0xf80099f8>
10009b64:	013efb84 	movi	r4,-1042
10009b68:	246bc83a 	sub	r21,r4,r17
10009b6c:	9548983a 	sll	r4,r18,r21
10009b70:	003d1806 	br	10008fd4 <__alt_data_end+0xf8008fd4>
10009b74:	d8000c15 	stw	zero,48(sp)
10009b78:	003d5b06 	br	100090e8 <__alt_data_end+0xf80090e8>
10009b7c:	880b883a 	mov	r5,r17
10009b80:	8009883a 	mov	r4,r16
10009b84:	01800284 	movi	r6,10
10009b88:	000f883a 	mov	r7,zero
10009b8c:	000bf4c0 	call	1000bf4c <__multadd>
10009b90:	1023883a 	mov	r17,r2
10009b94:	d8800d17 	ldw	r2,52(sp)
10009b98:	0082550e 	bge	zero,r2,1000a4f0 <_dtoa_r+0x16b0>
10009b9c:	d8800615 	stw	r2,24(sp)
10009ba0:	0500050e 	bge	zero,r20,10009bb8 <_dtoa_r+0xd78>
10009ba4:	880b883a 	mov	r5,r17
10009ba8:	8009883a 	mov	r4,r16
10009bac:	a00d883a 	mov	r6,r20
10009bb0:	000c6b00 	call	1000c6b0 <__lshift>
10009bb4:	1023883a 	mov	r17,r2
10009bb8:	98016a1e 	bne	r19,zero,1000a164 <_dtoa_r+0x1324>
10009bbc:	8829883a 	mov	r20,r17
10009bc0:	d9000617 	ldw	r4,24(sp)
10009bc4:	dcc00717 	ldw	r19,28(sp)
10009bc8:	9480004c 	andi	r18,r18,1
10009bcc:	20bfffc4 	addi	r2,r4,-1
10009bd0:	9885883a 	add	r2,r19,r2
10009bd4:	d8800415 	stw	r2,16(sp)
10009bd8:	dc800615 	stw	r18,24(sp)
10009bdc:	e009883a 	mov	r4,fp
10009be0:	a80b883a 	mov	r5,r21
10009be4:	0008c180 	call	10008c18 <quorem>
10009be8:	e009883a 	mov	r4,fp
10009bec:	880b883a 	mov	r5,r17
10009bf0:	102f883a 	mov	r23,r2
10009bf4:	000c7f80 	call	1000c7f8 <__mcmp>
10009bf8:	8009883a 	mov	r4,r16
10009bfc:	a80b883a 	mov	r5,r21
10009c00:	a00d883a 	mov	r6,r20
10009c04:	102d883a 	mov	r22,r2
10009c08:	000c8580 	call	1000c858 <__mdiff>
10009c0c:	1007883a 	mov	r3,r2
10009c10:	10800317 	ldw	r2,12(r2)
10009c14:	bc800c04 	addi	r18,r23,48
10009c18:	1000971e 	bne	r2,zero,10009e78 <_dtoa_r+0x1038>
10009c1c:	180b883a 	mov	r5,r3
10009c20:	e009883a 	mov	r4,fp
10009c24:	d8c01515 	stw	r3,84(sp)
10009c28:	000c7f80 	call	1000c7f8 <__mcmp>
10009c2c:	d8c01517 	ldw	r3,84(sp)
10009c30:	8009883a 	mov	r4,r16
10009c34:	d8801515 	stw	r2,84(sp)
10009c38:	180b883a 	mov	r5,r3
10009c3c:	000bf240 	call	1000bf24 <_Bfree>
10009c40:	d8801517 	ldw	r2,84(sp)
10009c44:	1000041e 	bne	r2,zero,10009c58 <_dtoa_r+0xe18>
10009c48:	d9800317 	ldw	r6,12(sp)
10009c4c:	3000021e 	bne	r6,zero,10009c58 <_dtoa_r+0xe18>
10009c50:	d8c00617 	ldw	r3,24(sp)
10009c54:	18007626 	beq	r3,zero,10009e30 <_dtoa_r+0xff0>
10009c58:	b0005b16 	blt	r22,zero,10009dc8 <_dtoa_r+0xf88>
10009c5c:	b000041e 	bne	r22,zero,10009c70 <_dtoa_r+0xe30>
10009c60:	d9000317 	ldw	r4,12(sp)
10009c64:	2000021e 	bne	r4,zero,10009c70 <_dtoa_r+0xe30>
10009c68:	d8c00617 	ldw	r3,24(sp)
10009c6c:	18005626 	beq	r3,zero,10009dc8 <_dtoa_r+0xf88>
10009c70:	00814d16 	blt	zero,r2,1000a1a8 <_dtoa_r+0x1368>
10009c74:	d8c00417 	ldw	r3,16(sp)
10009c78:	9d800044 	addi	r22,r19,1
10009c7c:	9c800005 	stb	r18,0(r19)
10009c80:	b02f883a 	mov	r23,r22
10009c84:	98c14c26 	beq	r19,r3,1000a1b8 <_dtoa_r+0x1378>
10009c88:	e00b883a 	mov	r5,fp
10009c8c:	8009883a 	mov	r4,r16
10009c90:	01800284 	movi	r6,10
10009c94:	000f883a 	mov	r7,zero
10009c98:	000bf4c0 	call	1000bf4c <__multadd>
10009c9c:	1039883a 	mov	fp,r2
10009ca0:	8d006d26 	beq	r17,r20,10009e58 <_dtoa_r+0x1018>
10009ca4:	880b883a 	mov	r5,r17
10009ca8:	01800284 	movi	r6,10
10009cac:	000f883a 	mov	r7,zero
10009cb0:	8009883a 	mov	r4,r16
10009cb4:	000bf4c0 	call	1000bf4c <__multadd>
10009cb8:	a00b883a 	mov	r5,r20
10009cbc:	8009883a 	mov	r4,r16
10009cc0:	01800284 	movi	r6,10
10009cc4:	000f883a 	mov	r7,zero
10009cc8:	1023883a 	mov	r17,r2
10009ccc:	000bf4c0 	call	1000bf4c <__multadd>
10009cd0:	1029883a 	mov	r20,r2
10009cd4:	b027883a 	mov	r19,r22
10009cd8:	003fc006 	br	10009bdc <__alt_data_end+0xf8009bdc>
10009cdc:	a005883a 	mov	r2,r20
10009ce0:	003ede06 	br	1000985c <__alt_data_end+0xf800985c>
10009ce4:	01000044 	movi	r4,1
10009ce8:	d9000b15 	stw	r4,44(sp)
10009cec:	d9802217 	ldw	r6,136(sp)
10009cf0:	0180dc0e 	bge	zero,r6,1000a064 <_dtoa_r+0x1224>
10009cf4:	3023883a 	mov	r17,r6
10009cf8:	d9800d15 	stw	r6,52(sp)
10009cfc:	d9800615 	stw	r6,24(sp)
10009d00:	003d1e06 	br	1000917c <__alt_data_end+0xf800917c>
10009d04:	d8800617 	ldw	r2,24(sp)
10009d08:	00be3716 	blt	zero,r2,100095e8 <__alt_data_end+0xf80095e8>
10009d0c:	1000be1e 	bne	r2,zero,1000a008 <_dtoa_r+0x11c8>
10009d10:	8809883a 	mov	r4,r17
10009d14:	a00b883a 	mov	r5,r20
10009d18:	000d883a 	mov	r6,zero
10009d1c:	01d00534 	movhi	r7,16404
10009d20:	00055380 	call	10005538 <__muldf3>
10009d24:	1009883a 	mov	r4,r2
10009d28:	180b883a 	mov	r5,r3
10009d2c:	900d883a 	mov	r6,r18
10009d30:	980f883a 	mov	r7,r19
10009d34:	00053780 	call	10005378 <__gedf2>
10009d38:	002b883a 	mov	r21,zero
10009d3c:	0023883a 	mov	r17,zero
10009d40:	10007a16 	blt	r2,zero,10009f2c <_dtoa_r+0x10ec>
10009d44:	d9002217 	ldw	r4,136(sp)
10009d48:	ddc00717 	ldw	r23,28(sp)
10009d4c:	0108303a 	nor	r4,zero,r4
10009d50:	d9000515 	stw	r4,20(sp)
10009d54:	8009883a 	mov	r4,r16
10009d58:	a80b883a 	mov	r5,r21
10009d5c:	000bf240 	call	1000bf24 <_Bfree>
10009d60:	883f751e 	bne	r17,zero,10009b38 <__alt_data_end+0xf8009b38>
10009d64:	003de406 	br	100094f8 <__alt_data_end+0xf80094f8>
10009d68:	e00b883a 	mov	r5,fp
10009d6c:	8009883a 	mov	r4,r16
10009d70:	000c5700 	call	1000c570 <__pow5mult>
10009d74:	1039883a 	mov	fp,r2
10009d78:	003ed306 	br	100098c8 <__alt_data_end+0xf80098c8>
10009d7c:	903ee01e 	bne	r18,zero,10009900 <__alt_data_end+0xf8009900>
10009d80:	00800434 	movhi	r2,16
10009d84:	10bfffc4 	addi	r2,r2,-1
10009d88:	9884703a 	and	r2,r19,r2
10009d8c:	103f081e 	bne	r2,zero,100099b0 <__alt_data_end+0xf80099b0>
10009d90:	9cdffc2c 	andhi	r19,r19,32752
10009d94:	983f0626 	beq	r19,zero,100099b0 <__alt_data_end+0xf80099b0>
10009d98:	d8800817 	ldw	r2,32(sp)
10009d9c:	b5800044 	addi	r22,r22,1
10009da0:	04c00044 	movi	r19,1
10009da4:	10800044 	addi	r2,r2,1
10009da8:	d8800815 	stw	r2,32(sp)
10009dac:	003f0106 	br	100099b4 <__alt_data_end+0xf80099b4>
10009db0:	d9800f17 	ldw	r6,60(sp)
10009db4:	30016826 	beq	r6,zero,1000a358 <_dtoa_r+0x1518>
10009db8:	10810cc4 	addi	r2,r2,1075
10009dbc:	dd400917 	ldw	r21,36(sp)
10009dc0:	dd000817 	ldw	r20,32(sp)
10009dc4:	003e9906 	br	1000982c <__alt_data_end+0xf800982c>
10009dc8:	9011883a 	mov	r8,r18
10009dcc:	4007883a 	mov	r3,r8
10009dd0:	e02d883a 	mov	r22,fp
10009dd4:	0080100e 	bge	zero,r2,10009e18 <_dtoa_r+0xfd8>
10009dd8:	01800044 	movi	r6,1
10009ddc:	8009883a 	mov	r4,r16
10009de0:	e00b883a 	mov	r5,fp
10009de4:	da001515 	stw	r8,84(sp)
10009de8:	da001715 	stw	r8,92(sp)
10009dec:	000c6b00 	call	1000c6b0 <__lshift>
10009df0:	1009883a 	mov	r4,r2
10009df4:	a80b883a 	mov	r5,r21
10009df8:	102d883a 	mov	r22,r2
10009dfc:	000c7f80 	call	1000c7f8 <__mcmp>
10009e00:	d8c01517 	ldw	r3,84(sp)
10009e04:	da001717 	ldw	r8,92(sp)
10009e08:	0081a50e 	bge	zero,r2,1000a4a0 <_dtoa_r+0x1660>
10009e0c:	00800e44 	movi	r2,57
10009e10:	40817b26 	beq	r8,r2,1000a400 <_dtoa_r+0x15c0>
10009e14:	40c00044 	addi	r3,r8,1
10009e18:	8825883a 	mov	r18,r17
10009e1c:	9dc00044 	addi	r23,r19,1
10009e20:	98c00005 	stb	r3,0(r19)
10009e24:	a023883a 	mov	r17,r20
10009e28:	b039883a 	mov	fp,r22
10009e2c:	003f3906 	br	10009b14 <__alt_data_end+0xf8009b14>
10009e30:	00800e44 	movi	r2,57
10009e34:	9011883a 	mov	r8,r18
10009e38:	90817226 	beq	r18,r2,1000a404 <_dtoa_r+0x15c4>
10009e3c:	0580010e 	bge	zero,r22,10009e44 <_dtoa_r+0x1004>
10009e40:	ba000c44 	addi	r8,r23,49
10009e44:	8825883a 	mov	r18,r17
10009e48:	9dc00044 	addi	r23,r19,1
10009e4c:	9a000005 	stb	r8,0(r19)
10009e50:	a023883a 	mov	r17,r20
10009e54:	003f2f06 	br	10009b14 <__alt_data_end+0xf8009b14>
10009e58:	880b883a 	mov	r5,r17
10009e5c:	8009883a 	mov	r4,r16
10009e60:	01800284 	movi	r6,10
10009e64:	000f883a 	mov	r7,zero
10009e68:	000bf4c0 	call	1000bf4c <__multadd>
10009e6c:	1023883a 	mov	r17,r2
10009e70:	1029883a 	mov	r20,r2
10009e74:	003f9706 	br	10009cd4 <__alt_data_end+0xf8009cd4>
10009e78:	8009883a 	mov	r4,r16
10009e7c:	180b883a 	mov	r5,r3
10009e80:	000bf240 	call	1000bf24 <_Bfree>
10009e84:	00800044 	movi	r2,1
10009e88:	003f7306 	br	10009c58 <__alt_data_end+0xf8009c58>
10009e8c:	e009883a 	mov	r4,fp
10009e90:	a80b883a 	mov	r5,r21
10009e94:	000c7f80 	call	1000c7f8 <__mcmp>
10009e98:	103ee60e 	bge	r2,zero,10009a34 <__alt_data_end+0xf8009a34>
10009e9c:	8009883a 	mov	r4,r16
10009ea0:	e00b883a 	mov	r5,fp
10009ea4:	01800284 	movi	r6,10
10009ea8:	000f883a 	mov	r7,zero
10009eac:	000bf4c0 	call	1000bf4c <__multadd>
10009eb0:	d9000517 	ldw	r4,20(sp)
10009eb4:	d9800b17 	ldw	r6,44(sp)
10009eb8:	1039883a 	mov	fp,r2
10009ebc:	213fffc4 	addi	r4,r4,-1
10009ec0:	d9000515 	stw	r4,20(sp)
10009ec4:	303f2d1e 	bne	r6,zero,10009b7c <__alt_data_end+0xf8009b7c>
10009ec8:	d9000d17 	ldw	r4,52(sp)
10009ecc:	0101780e 	bge	zero,r4,1000a4b0 <_dtoa_r+0x1670>
10009ed0:	d9000615 	stw	r4,24(sp)
10009ed4:	003edb06 	br	10009a44 <__alt_data_end+0xf8009a44>
10009ed8:	00800084 	movi	r2,2
10009edc:	30818e1e 	bne	r6,r2,1000a518 <_dtoa_r+0x16d8>
10009ee0:	d8000b15 	stw	zero,44(sp)
10009ee4:	003f8106 	br	10009cec <__alt_data_end+0xf8009cec>
10009ee8:	d8800717 	ldw	r2,28(sp)
10009eec:	003c0306 	br	10008efc <__alt_data_end+0xf8008efc>
10009ef0:	d9000317 	ldw	r4,12(sp)
10009ef4:	00800084 	movi	r2,2
10009ef8:	113ed00e 	bge	r2,r4,10009a3c <__alt_data_end+0xf8009a3c>
10009efc:	d8c00617 	ldw	r3,24(sp)
10009f00:	183f901e 	bne	r3,zero,10009d44 <__alt_data_end+0xf8009d44>
10009f04:	a80b883a 	mov	r5,r21
10009f08:	8009883a 	mov	r4,r16
10009f0c:	01800144 	movi	r6,5
10009f10:	000f883a 	mov	r7,zero
10009f14:	000bf4c0 	call	1000bf4c <__multadd>
10009f18:	e009883a 	mov	r4,fp
10009f1c:	100b883a 	mov	r5,r2
10009f20:	102b883a 	mov	r21,r2
10009f24:	000c7f80 	call	1000c7f8 <__mcmp>
10009f28:	00bf860e 	bge	zero,r2,10009d44 <__alt_data_end+0xf8009d44>
10009f2c:	d9800717 	ldw	r6,28(sp)
10009f30:	00800c44 	movi	r2,49
10009f34:	30800005 	stb	r2,0(r6)
10009f38:	d8800517 	ldw	r2,20(sp)
10009f3c:	35c00044 	addi	r23,r6,1
10009f40:	10800044 	addi	r2,r2,1
10009f44:	d8800515 	stw	r2,20(sp)
10009f48:	003f8206 	br	10009d54 <__alt_data_end+0xf8009d54>
10009f4c:	903e981e 	bne	r18,zero,100099b0 <__alt_data_end+0xf80099b0>
10009f50:	003f8b06 	br	10009d80 <__alt_data_end+0xf8009d80>
10009f54:	d9800517 	ldw	r6,20(sp)
10009f58:	d8c00717 	ldw	r3,28(sp)
10009f5c:	00800c44 	movi	r2,49
10009f60:	31800044 	addi	r6,r6,1
10009f64:	d9800515 	stw	r6,20(sp)
10009f68:	18800005 	stb	r2,0(r3)
10009f6c:	003ee906 	br	10009b14 <__alt_data_end+0xf8009b14>
10009f70:	dc000317 	ldw	r16,12(sp)
10009f74:	003d6006 	br	100094f8 <__alt_data_end+0xf80094f8>
10009f78:	8809883a 	mov	r4,r17
10009f7c:	00066fc0 	call	100066fc <__floatsidf>
10009f80:	a009883a 	mov	r4,r20
10009f84:	a80b883a 	mov	r5,r21
10009f88:	100d883a 	mov	r6,r2
10009f8c:	180f883a 	mov	r7,r3
10009f90:	00055380 	call	10005538 <__muldf3>
10009f94:	1009883a 	mov	r4,r2
10009f98:	180b883a 	mov	r5,r3
10009f9c:	000d883a 	mov	r6,zero
10009fa0:	01d00734 	movhi	r7,16412
10009fa4:	00040d80 	call	100040d8 <__adddf3>
10009fa8:	1023883a 	mov	r17,r2
10009fac:	00bf3034 	movhi	r2,64704
10009fb0:	1885883a 	add	r2,r3,r2
10009fb4:	d8800e15 	stw	r2,56(sp)
10009fb8:	a009883a 	mov	r4,r20
10009fbc:	a80b883a 	mov	r5,r21
10009fc0:	000d883a 	mov	r6,zero
10009fc4:	01d00534 	movhi	r7,16404
10009fc8:	0005da40 	call	10005da4 <__subdf3>
10009fcc:	d9c00e17 	ldw	r7,56(sp)
10009fd0:	1009883a 	mov	r4,r2
10009fd4:	180b883a 	mov	r5,r3
10009fd8:	880d883a 	mov	r6,r17
10009fdc:	102b883a 	mov	r21,r2
10009fe0:	1829883a 	mov	r20,r3
10009fe4:	00053780 	call	10005378 <__gedf2>
10009fe8:	00807716 	blt	zero,r2,1000a1c8 <_dtoa_r+0x1388>
10009fec:	d8800e17 	ldw	r2,56(sp)
10009ff0:	a809883a 	mov	r4,r21
10009ff4:	a00b883a 	mov	r5,r20
10009ff8:	11e0003c 	xorhi	r7,r2,32768
10009ffc:	880d883a 	mov	r6,r17
1000a000:	00054580 	call	10005458 <__ledf2>
1000a004:	103d6b0e 	bge	r2,zero,100095b4 <__alt_data_end+0xf80095b4>
1000a008:	002b883a 	mov	r21,zero
1000a00c:	0023883a 	mov	r17,zero
1000a010:	003f4c06 	br	10009d44 <__alt_data_end+0xf8009d44>
1000a014:	d9800917 	ldw	r6,36(sp)
1000a018:	e00b883a 	mov	r5,fp
1000a01c:	8009883a 	mov	r4,r16
1000a020:	000c5700 	call	1000c570 <__pow5mult>
1000a024:	1039883a 	mov	fp,r2
1000a028:	003e2706 	br	100098c8 <__alt_data_end+0xf80098c8>
1000a02c:	d8000b15 	stw	zero,44(sp)
1000a030:	003c4906 	br	10009158 <__alt_data_end+0xf8009158>
1000a034:	d9000917 	ldw	r4,36(sp)
1000a038:	d9800a17 	ldw	r6,40(sp)
1000a03c:	dd400915 	stw	r21,36(sp)
1000a040:	a905c83a 	sub	r2,r21,r4
1000a044:	308d883a 	add	r6,r6,r2
1000a048:	d9800a15 	stw	r6,40(sp)
1000a04c:	002b883a 	mov	r21,zero
1000a050:	003df206 	br	1000981c <__alt_data_end+0xf800981c>
1000a054:	dc800e15 	stw	r18,56(sp)
1000a058:	982b883a 	mov	r21,r19
1000a05c:	04400084 	movi	r17,2
1000a060:	003c7406 	br	10009234 <__alt_data_end+0xf8009234>
1000a064:	04400044 	movi	r17,1
1000a068:	dc400d15 	stw	r17,52(sp)
1000a06c:	dc400615 	stw	r17,24(sp)
1000a070:	dc402215 	stw	r17,136(sp)
1000a074:	80001115 	stw	zero,68(r16)
1000a078:	000b883a 	mov	r5,zero
1000a07c:	003c4a06 	br	100091a8 <__alt_data_end+0xf80091a8>
1000a080:	3023883a 	mov	r17,r6
1000a084:	003ffb06 	br	1000a074 <__alt_data_end+0xf800a074>
1000a088:	1000021e 	bne	r2,zero,1000a094 <_dtoa_r+0x1254>
1000a08c:	4200004c 	andi	r8,r8,1
1000a090:	403e8f1e 	bne	r8,zero,10009ad0 <__alt_data_end+0xf8009ad0>
1000a094:	01000c04 	movi	r4,48
1000a098:	00000106 	br	1000a0a0 <_dtoa_r+0x1260>
1000a09c:	102f883a 	mov	r23,r2
1000a0a0:	b8bfffc4 	addi	r2,r23,-1
1000a0a4:	10c00007 	ldb	r3,0(r2)
1000a0a8:	193ffc26 	beq	r3,r4,1000a09c <__alt_data_end+0xf800a09c>
1000a0ac:	003e9906 	br	10009b14 <__alt_data_end+0xf8009b14>
1000a0b0:	d9000517 	ldw	r4,20(sp)
1000a0b4:	012fc83a 	sub	r23,zero,r4
1000a0b8:	b800ad26 	beq	r23,zero,1000a370 <_dtoa_r+0x1530>
1000a0bc:	b88003cc 	andi	r2,r23,15
1000a0c0:	100490fa 	slli	r2,r2,3
1000a0c4:	00c40074 	movhi	r3,4097
1000a0c8:	18c96f04 	addi	r3,r3,9660
1000a0cc:	1885883a 	add	r2,r3,r2
1000a0d0:	11800017 	ldw	r6,0(r2)
1000a0d4:	11c00117 	ldw	r7,4(r2)
1000a0d8:	b82fd13a 	srai	r23,r23,4
1000a0dc:	9009883a 	mov	r4,r18
1000a0e0:	980b883a 	mov	r5,r19
1000a0e4:	00055380 	call	10005538 <__muldf3>
1000a0e8:	1029883a 	mov	r20,r2
1000a0ec:	182b883a 	mov	r21,r3
1000a0f0:	b800f426 	beq	r23,zero,1000a4c4 <_dtoa_r+0x1684>
1000a0f4:	02040074 	movhi	r8,4097
1000a0f8:	42096504 	addi	r8,r8,9620
1000a0fc:	8029883a 	mov	r20,r16
1000a100:	04400084 	movi	r17,2
1000a104:	4021883a 	mov	r16,r8
1000a108:	b980004c 	andi	r6,r23,1
1000a10c:	1009883a 	mov	r4,r2
1000a110:	b82fd07a 	srai	r23,r23,1
1000a114:	180b883a 	mov	r5,r3
1000a118:	30000426 	beq	r6,zero,1000a12c <_dtoa_r+0x12ec>
1000a11c:	81800017 	ldw	r6,0(r16)
1000a120:	81c00117 	ldw	r7,4(r16)
1000a124:	8c400044 	addi	r17,r17,1
1000a128:	00055380 	call	10005538 <__muldf3>
1000a12c:	84000204 	addi	r16,r16,8
1000a130:	b83ff51e 	bne	r23,zero,1000a108 <__alt_data_end+0xf800a108>
1000a134:	a021883a 	mov	r16,r20
1000a138:	182b883a 	mov	r21,r3
1000a13c:	1029883a 	mov	r20,r2
1000a140:	003c5506 	br	10009298 <__alt_data_end+0xf8009298>
1000a144:	d9800517 	ldw	r6,20(sp)
1000a148:	d9000717 	ldw	r4,28(sp)
1000a14c:	00c00c04 	movi	r3,48
1000a150:	31800044 	addi	r6,r6,1
1000a154:	d9800515 	stw	r6,20(sp)
1000a158:	20c00005 	stb	r3,0(r4)
1000a15c:	02000c44 	movi	r8,49
1000a160:	003da206 	br	100097ec <__alt_data_end+0xf80097ec>
1000a164:	89400117 	ldw	r5,4(r17)
1000a168:	8009883a 	mov	r4,r16
1000a16c:	000be7c0 	call	1000be7c <_Balloc>
1000a170:	89800417 	ldw	r6,16(r17)
1000a174:	11000304 	addi	r4,r2,12
1000a178:	89400304 	addi	r5,r17,12
1000a17c:	31800084 	addi	r6,r6,2
1000a180:	318d883a 	add	r6,r6,r6
1000a184:	318d883a 	add	r6,r6,r6
1000a188:	1027883a 	mov	r19,r2
1000a18c:	000bc200 	call	1000bc20 <memcpy>
1000a190:	8009883a 	mov	r4,r16
1000a194:	980b883a 	mov	r5,r19
1000a198:	01800044 	movi	r6,1
1000a19c:	000c6b00 	call	1000c6b0 <__lshift>
1000a1a0:	1029883a 	mov	r20,r2
1000a1a4:	003e8606 	br	10009bc0 <__alt_data_end+0xf8009bc0>
1000a1a8:	00800e44 	movi	r2,57
1000a1ac:	90809526 	beq	r18,r2,1000a404 <_dtoa_r+0x15c4>
1000a1b0:	92000044 	addi	r8,r18,1
1000a1b4:	003f2306 	br	10009e44 <__alt_data_end+0xf8009e44>
1000a1b8:	9011883a 	mov	r8,r18
1000a1bc:	8825883a 	mov	r18,r17
1000a1c0:	a023883a 	mov	r17,r20
1000a1c4:	003e3706 	br	10009aa4 <__alt_data_end+0xf8009aa4>
1000a1c8:	002b883a 	mov	r21,zero
1000a1cc:	0023883a 	mov	r17,zero
1000a1d0:	003f5606 	br	10009f2c <__alt_data_end+0xf8009f2c>
1000a1d4:	51bfffc4 	addi	r6,r10,-1
1000a1d8:	300490fa 	slli	r2,r6,3
1000a1dc:	00c40074 	movhi	r3,4097
1000a1e0:	18c96f04 	addi	r3,r3,9660
1000a1e4:	1885883a 	add	r2,r3,r2
1000a1e8:	d9c00e17 	ldw	r7,56(sp)
1000a1ec:	11000017 	ldw	r4,0(r2)
1000a1f0:	11400117 	ldw	r5,4(r2)
1000a1f4:	d8800717 	ldw	r2,28(sp)
1000a1f8:	d9801015 	stw	r6,64(sp)
1000a1fc:	880d883a 	mov	r6,r17
1000a200:	da801615 	stw	r10,88(sp)
1000a204:	15c00044 	addi	r23,r2,1
1000a208:	00055380 	call	10005538 <__muldf3>
1000a20c:	a80b883a 	mov	r5,r21
1000a210:	a009883a 	mov	r4,r20
1000a214:	d8c01115 	stw	r3,68(sp)
1000a218:	d8800e15 	stw	r2,56(sp)
1000a21c:	00066740 	call	10006674 <__fixdfsi>
1000a220:	1009883a 	mov	r4,r2
1000a224:	1023883a 	mov	r17,r2
1000a228:	00066fc0 	call	100066fc <__floatsidf>
1000a22c:	a009883a 	mov	r4,r20
1000a230:	a80b883a 	mov	r5,r21
1000a234:	100d883a 	mov	r6,r2
1000a238:	180f883a 	mov	r7,r3
1000a23c:	0005da40 	call	10005da4 <__subdf3>
1000a240:	1813883a 	mov	r9,r3
1000a244:	d8c00717 	ldw	r3,28(sp)
1000a248:	8c400c04 	addi	r17,r17,48
1000a24c:	1011883a 	mov	r8,r2
1000a250:	1c400005 	stb	r17,0(r3)
1000a254:	da801617 	ldw	r10,88(sp)
1000a258:	00800044 	movi	r2,1
1000a25c:	50802326 	beq	r10,r2,1000a2ec <_dtoa_r+0x14ac>
1000a260:	d8800717 	ldw	r2,28(sp)
1000a264:	b82b883a 	mov	r21,r23
1000a268:	dc001315 	stw	r16,76(sp)
1000a26c:	12a9883a 	add	r20,r2,r10
1000a270:	4807883a 	mov	r3,r9
1000a274:	4005883a 	mov	r2,r8
1000a278:	dc801415 	stw	r18,80(sp)
1000a27c:	000d883a 	mov	r6,zero
1000a280:	01d00934 	movhi	r7,16420
1000a284:	1009883a 	mov	r4,r2
1000a288:	180b883a 	mov	r5,r3
1000a28c:	00055380 	call	10005538 <__muldf3>
1000a290:	180b883a 	mov	r5,r3
1000a294:	1009883a 	mov	r4,r2
1000a298:	1821883a 	mov	r16,r3
1000a29c:	1025883a 	mov	r18,r2
1000a2a0:	00066740 	call	10006674 <__fixdfsi>
1000a2a4:	1009883a 	mov	r4,r2
1000a2a8:	1023883a 	mov	r17,r2
1000a2ac:	00066fc0 	call	100066fc <__floatsidf>
1000a2b0:	9009883a 	mov	r4,r18
1000a2b4:	800b883a 	mov	r5,r16
1000a2b8:	100d883a 	mov	r6,r2
1000a2bc:	180f883a 	mov	r7,r3
1000a2c0:	8c400c04 	addi	r17,r17,48
1000a2c4:	0005da40 	call	10005da4 <__subdf3>
1000a2c8:	ad400044 	addi	r21,r21,1
1000a2cc:	ac7fffc5 	stb	r17,-1(r21)
1000a2d0:	ad3fea1e 	bne	r21,r20,1000a27c <__alt_data_end+0xf800a27c>
1000a2d4:	1813883a 	mov	r9,r3
1000a2d8:	d8c01017 	ldw	r3,64(sp)
1000a2dc:	dc001317 	ldw	r16,76(sp)
1000a2e0:	dc801417 	ldw	r18,80(sp)
1000a2e4:	1011883a 	mov	r8,r2
1000a2e8:	b8ef883a 	add	r23,r23,r3
1000a2ec:	d9000e17 	ldw	r4,56(sp)
1000a2f0:	d9401117 	ldw	r5,68(sp)
1000a2f4:	000d883a 	mov	r6,zero
1000a2f8:	01cff834 	movhi	r7,16352
1000a2fc:	da001715 	stw	r8,92(sp)
1000a300:	da401515 	stw	r9,84(sp)
1000a304:	00040d80 	call	100040d8 <__adddf3>
1000a308:	da001717 	ldw	r8,92(sp)
1000a30c:	da401517 	ldw	r9,84(sp)
1000a310:	1009883a 	mov	r4,r2
1000a314:	400d883a 	mov	r6,r8
1000a318:	480f883a 	mov	r7,r9
1000a31c:	180b883a 	mov	r5,r3
1000a320:	00054580 	call	10005458 <__ledf2>
1000a324:	da001717 	ldw	r8,92(sp)
1000a328:	da401517 	ldw	r9,84(sp)
1000a32c:	10003b0e 	bge	r2,zero,1000a41c <_dtoa_r+0x15dc>
1000a330:	d9001217 	ldw	r4,72(sp)
1000a334:	bd7fffc3 	ldbu	r21,-1(r23)
1000a338:	d9000515 	stw	r4,20(sp)
1000a33c:	003d1c06 	br	100097b0 <__alt_data_end+0xf80097b0>
1000a340:	d8c00817 	ldw	r3,32(sp)
1000a344:	18a9c83a 	sub	r20,r3,r2
1000a348:	0005883a 	mov	r2,zero
1000a34c:	003d3706 	br	1000982c <__alt_data_end+0xf800982c>
1000a350:	00800044 	movi	r2,1
1000a354:	003dd006 	br	10009a98 <__alt_data_end+0xf8009a98>
1000a358:	d8c00217 	ldw	r3,8(sp)
1000a35c:	00800d84 	movi	r2,54
1000a360:	dd400917 	ldw	r21,36(sp)
1000a364:	10c5c83a 	sub	r2,r2,r3
1000a368:	dd000817 	ldw	r20,32(sp)
1000a36c:	003d2f06 	br	1000982c <__alt_data_end+0xf800982c>
1000a370:	9029883a 	mov	r20,r18
1000a374:	982b883a 	mov	r21,r19
1000a378:	04400084 	movi	r17,2
1000a37c:	003bc606 	br	10009298 <__alt_data_end+0xf8009298>
1000a380:	d8800617 	ldw	r2,24(sp)
1000a384:	103efc26 	beq	r2,zero,10009f78 <__alt_data_end+0xf8009f78>
1000a388:	d8c00d17 	ldw	r3,52(sp)
1000a38c:	00fc890e 	bge	zero,r3,100095b4 <__alt_data_end+0xf80095b4>
1000a390:	a80b883a 	mov	r5,r21
1000a394:	a009883a 	mov	r4,r20
1000a398:	000d883a 	mov	r6,zero
1000a39c:	01d00934 	movhi	r7,16420
1000a3a0:	00055380 	call	10005538 <__muldf3>
1000a3a4:	89000044 	addi	r4,r17,1
1000a3a8:	1029883a 	mov	r20,r2
1000a3ac:	182b883a 	mov	r21,r3
1000a3b0:	00066fc0 	call	100066fc <__floatsidf>
1000a3b4:	a009883a 	mov	r4,r20
1000a3b8:	a80b883a 	mov	r5,r21
1000a3bc:	100d883a 	mov	r6,r2
1000a3c0:	180f883a 	mov	r7,r3
1000a3c4:	00055380 	call	10005538 <__muldf3>
1000a3c8:	1009883a 	mov	r4,r2
1000a3cc:	180b883a 	mov	r5,r3
1000a3d0:	000d883a 	mov	r6,zero
1000a3d4:	01d00734 	movhi	r7,16412
1000a3d8:	00040d80 	call	100040d8 <__adddf3>
1000a3dc:	d9000517 	ldw	r4,20(sp)
1000a3e0:	1023883a 	mov	r17,r2
1000a3e4:	00bf3034 	movhi	r2,64704
1000a3e8:	213fffc4 	addi	r4,r4,-1
1000a3ec:	1885883a 	add	r2,r3,r2
1000a3f0:	d9001215 	stw	r4,72(sp)
1000a3f4:	d8800e15 	stw	r2,56(sp)
1000a3f8:	da800d17 	ldw	r10,52(sp)
1000a3fc:	003bc306 	br	1000930c <__alt_data_end+0xf800930c>
1000a400:	b039883a 	mov	fp,r22
1000a404:	01000e44 	movi	r4,57
1000a408:	8825883a 	mov	r18,r17
1000a40c:	9dc00044 	addi	r23,r19,1
1000a410:	99000005 	stb	r4,0(r19)
1000a414:	a023883a 	mov	r17,r20
1000a418:	003dae06 	br	10009ad4 <__alt_data_end+0xf8009ad4>
1000a41c:	d9800e17 	ldw	r6,56(sp)
1000a420:	d9c01117 	ldw	r7,68(sp)
1000a424:	0009883a 	mov	r4,zero
1000a428:	014ff834 	movhi	r5,16352
1000a42c:	da001715 	stw	r8,92(sp)
1000a430:	da401515 	stw	r9,84(sp)
1000a434:	0005da40 	call	10005da4 <__subdf3>
1000a438:	da001717 	ldw	r8,92(sp)
1000a43c:	da401517 	ldw	r9,84(sp)
1000a440:	1009883a 	mov	r4,r2
1000a444:	180b883a 	mov	r5,r3
1000a448:	400d883a 	mov	r6,r8
1000a44c:	480f883a 	mov	r7,r9
1000a450:	00053780 	call	10005378 <__gedf2>
1000a454:	00bc570e 	bge	zero,r2,100095b4 <__alt_data_end+0xf80095b4>
1000a458:	01000c04 	movi	r4,48
1000a45c:	00000106 	br	1000a464 <_dtoa_r+0x1624>
1000a460:	102f883a 	mov	r23,r2
1000a464:	b8bfffc4 	addi	r2,r23,-1
1000a468:	10c00007 	ldb	r3,0(r2)
1000a46c:	193ffc26 	beq	r3,r4,1000a460 <__alt_data_end+0xf800a460>
1000a470:	d9801217 	ldw	r6,72(sp)
1000a474:	d9800515 	stw	r6,20(sp)
1000a478:	003c1f06 	br	100094f8 <__alt_data_end+0xf80094f8>
1000a47c:	d8801217 	ldw	r2,72(sp)
1000a480:	dc001117 	ldw	r16,68(sp)
1000a484:	d8800515 	stw	r2,20(sp)
1000a488:	003cc906 	br	100097b0 <__alt_data_end+0xf80097b0>
1000a48c:	dd801317 	ldw	r22,76(sp)
1000a490:	dc001117 	ldw	r16,68(sp)
1000a494:	dcc01417 	ldw	r19,80(sp)
1000a498:	dc801017 	ldw	r18,64(sp)
1000a49c:	003c4506 	br	100095b4 <__alt_data_end+0xf80095b4>
1000a4a0:	103e5d1e 	bne	r2,zero,10009e18 <__alt_data_end+0xf8009e18>
1000a4a4:	4080004c 	andi	r2,r8,1
1000a4a8:	103e5b26 	beq	r2,zero,10009e18 <__alt_data_end+0xf8009e18>
1000a4ac:	003e5706 	br	10009e0c <__alt_data_end+0xf8009e0c>
1000a4b0:	d8c00317 	ldw	r3,12(sp)
1000a4b4:	00800084 	movi	r2,2
1000a4b8:	10c00a16 	blt	r2,r3,1000a4e4 <_dtoa_r+0x16a4>
1000a4bc:	d9000d17 	ldw	r4,52(sp)
1000a4c0:	003e8306 	br	10009ed0 <__alt_data_end+0xf8009ed0>
1000a4c4:	04400084 	movi	r17,2
1000a4c8:	003b7306 	br	10009298 <__alt_data_end+0xf8009298>
1000a4cc:	d9801217 	ldw	r6,72(sp)
1000a4d0:	d9800515 	stw	r6,20(sp)
1000a4d4:	003cb606 	br	100097b0 <__alt_data_end+0xf80097b0>
1000a4d8:	d9001217 	ldw	r4,72(sp)
1000a4dc:	d9000515 	stw	r4,20(sp)
1000a4e0:	003c0506 	br	100094f8 <__alt_data_end+0xf80094f8>
1000a4e4:	d9800d17 	ldw	r6,52(sp)
1000a4e8:	d9800615 	stw	r6,24(sp)
1000a4ec:	003e8306 	br	10009efc <__alt_data_end+0xf8009efc>
1000a4f0:	d9800317 	ldw	r6,12(sp)
1000a4f4:	00800084 	movi	r2,2
1000a4f8:	11800216 	blt	r2,r6,1000a504 <_dtoa_r+0x16c4>
1000a4fc:	d8800d17 	ldw	r2,52(sp)
1000a500:	003da606 	br	10009b9c <__alt_data_end+0xf8009b9c>
1000a504:	d8800d17 	ldw	r2,52(sp)
1000a508:	d8800615 	stw	r2,24(sp)
1000a50c:	003e7b06 	br	10009efc <__alt_data_end+0xf8009efc>
1000a510:	05000044 	movi	r20,1
1000a514:	003b0506 	br	1000912c <__alt_data_end+0xf800912c>
1000a518:	8009883a 	mov	r4,r16
1000a51c:	80001115 	stw	zero,68(r16)
1000a520:	000b883a 	mov	r5,zero
1000a524:	000be7c0 	call	1000be7c <_Balloc>
1000a528:	d8800715 	stw	r2,28(sp)
1000a52c:	d8c00717 	ldw	r3,28(sp)
1000a530:	00bfffc4 	movi	r2,-1
1000a534:	01000044 	movi	r4,1
1000a538:	d8800615 	stw	r2,24(sp)
1000a53c:	80c01015 	stw	r3,64(r16)
1000a540:	d9000b15 	stw	r4,44(sp)
1000a544:	d8002215 	stw	zero,136(sp)
1000a548:	d8800d15 	stw	r2,52(sp)
1000a54c:	003c1906 	br	100095b4 <__alt_data_end+0xf80095b4>
1000a550:	193d2926 	beq	r3,r4,100099f8 <__alt_data_end+0xf80099f8>
1000a554:	00c00f04 	movi	r3,60
1000a558:	1885c83a 	sub	r2,r3,r2
1000a55c:	003d7b06 	br	10009b4c <__alt_data_end+0xf8009b4c>
1000a560:	000b883a 	mov	r5,zero
1000a564:	003b1006 	br	100091a8 <__alt_data_end+0xf80091a8>

1000a568 <_fflush_r>:
1000a568:	defffb04 	addi	sp,sp,-20
1000a56c:	dcc00315 	stw	r19,12(sp)
1000a570:	dc000015 	stw	r16,0(sp)
1000a574:	dfc00415 	stw	ra,16(sp)
1000a578:	dc800215 	stw	r18,8(sp)
1000a57c:	dc400115 	stw	r17,4(sp)
1000a580:	2027883a 	mov	r19,r4
1000a584:	2821883a 	mov	r16,r5
1000a588:	20000226 	beq	r4,zero,1000a594 <_fflush_r+0x2c>
1000a58c:	20800e17 	ldw	r2,56(r4)
1000a590:	10005326 	beq	r2,zero,1000a6e0 <_fflush_r+0x178>
1000a594:	8080030b 	ldhu	r2,12(r16)
1000a598:	10ffffcc 	andi	r3,r2,65535
1000a59c:	18e0001c 	xori	r3,r3,32768
1000a5a0:	18e00004 	addi	r3,r3,-32768
1000a5a4:	18002c26 	beq	r3,zero,1000a658 <_fflush_r+0xf0>
1000a5a8:	10c0020c 	andi	r3,r2,8
1000a5ac:	1800321e 	bne	r3,zero,1000a678 <_fflush_r+0x110>
1000a5b0:	80c00117 	ldw	r3,4(r16)
1000a5b4:	10820014 	ori	r2,r2,2048
1000a5b8:	8080030d 	sth	r2,12(r16)
1000a5bc:	00c0570e 	bge	zero,r3,1000a71c <_fflush_r+0x1b4>
1000a5c0:	82000a17 	ldw	r8,40(r16)
1000a5c4:	40002426 	beq	r8,zero,1000a658 <_fflush_r+0xf0>
1000a5c8:	9c400017 	ldw	r17,0(r19)
1000a5cc:	10c4000c 	andi	r3,r2,4096
1000a5d0:	98000015 	stw	zero,0(r19)
1000a5d4:	18004626 	beq	r3,zero,1000a6f0 <_fflush_r+0x188>
1000a5d8:	81801417 	ldw	r6,80(r16)
1000a5dc:	10c0010c 	andi	r3,r2,4
1000a5e0:	18000626 	beq	r3,zero,1000a5fc <_fflush_r+0x94>
1000a5e4:	80c00117 	ldw	r3,4(r16)
1000a5e8:	80800c17 	ldw	r2,48(r16)
1000a5ec:	30cdc83a 	sub	r6,r6,r3
1000a5f0:	10000226 	beq	r2,zero,1000a5fc <_fflush_r+0x94>
1000a5f4:	80800f17 	ldw	r2,60(r16)
1000a5f8:	308dc83a 	sub	r6,r6,r2
1000a5fc:	81400717 	ldw	r5,28(r16)
1000a600:	9809883a 	mov	r4,r19
1000a604:	000f883a 	mov	r7,zero
1000a608:	403ee83a 	callr	r8
1000a60c:	00ffffc4 	movi	r3,-1
1000a610:	10c04526 	beq	r2,r3,1000a728 <_fflush_r+0x1c0>
1000a614:	80c0030b 	ldhu	r3,12(r16)
1000a618:	81000417 	ldw	r4,16(r16)
1000a61c:	80000115 	stw	zero,4(r16)
1000a620:	197dffcc 	andi	r5,r3,63487
1000a624:	8140030d 	sth	r5,12(r16)
1000a628:	81000015 	stw	r4,0(r16)
1000a62c:	18c4000c 	andi	r3,r3,4096
1000a630:	18000126 	beq	r3,zero,1000a638 <_fflush_r+0xd0>
1000a634:	80801415 	stw	r2,80(r16)
1000a638:	81400c17 	ldw	r5,48(r16)
1000a63c:	9c400015 	stw	r17,0(r19)
1000a640:	28000526 	beq	r5,zero,1000a658 <_fflush_r+0xf0>
1000a644:	80801004 	addi	r2,r16,64
1000a648:	28800226 	beq	r5,r2,1000a654 <_fflush_r+0xec>
1000a64c:	9809883a 	mov	r4,r19
1000a650:	000ac980 	call	1000ac98 <_free_r>
1000a654:	80000c15 	stw	zero,48(r16)
1000a658:	0005883a 	mov	r2,zero
1000a65c:	dfc00417 	ldw	ra,16(sp)
1000a660:	dcc00317 	ldw	r19,12(sp)
1000a664:	dc800217 	ldw	r18,8(sp)
1000a668:	dc400117 	ldw	r17,4(sp)
1000a66c:	dc000017 	ldw	r16,0(sp)
1000a670:	dec00504 	addi	sp,sp,20
1000a674:	f800283a 	ret
1000a678:	84800417 	ldw	r18,16(r16)
1000a67c:	903ff626 	beq	r18,zero,1000a658 <__alt_data_end+0xf800a658>
1000a680:	84400017 	ldw	r17,0(r16)
1000a684:	108000cc 	andi	r2,r2,3
1000a688:	84800015 	stw	r18,0(r16)
1000a68c:	8ca3c83a 	sub	r17,r17,r18
1000a690:	10001526 	beq	r2,zero,1000a6e8 <_fflush_r+0x180>
1000a694:	0005883a 	mov	r2,zero
1000a698:	80800215 	stw	r2,8(r16)
1000a69c:	04400316 	blt	zero,r17,1000a6ac <_fflush_r+0x144>
1000a6a0:	003fed06 	br	1000a658 <__alt_data_end+0xf800a658>
1000a6a4:	90a5883a 	add	r18,r18,r2
1000a6a8:	047feb0e 	bge	zero,r17,1000a658 <__alt_data_end+0xf800a658>
1000a6ac:	80800917 	ldw	r2,36(r16)
1000a6b0:	81400717 	ldw	r5,28(r16)
1000a6b4:	880f883a 	mov	r7,r17
1000a6b8:	900d883a 	mov	r6,r18
1000a6bc:	9809883a 	mov	r4,r19
1000a6c0:	103ee83a 	callr	r2
1000a6c4:	88a3c83a 	sub	r17,r17,r2
1000a6c8:	00bff616 	blt	zero,r2,1000a6a4 <__alt_data_end+0xf800a6a4>
1000a6cc:	80c0030b 	ldhu	r3,12(r16)
1000a6d0:	00bfffc4 	movi	r2,-1
1000a6d4:	18c01014 	ori	r3,r3,64
1000a6d8:	80c0030d 	sth	r3,12(r16)
1000a6dc:	003fdf06 	br	1000a65c <__alt_data_end+0xf800a65c>
1000a6e0:	000ab240 	call	1000ab24 <__sinit>
1000a6e4:	003fab06 	br	1000a594 <__alt_data_end+0xf800a594>
1000a6e8:	80800517 	ldw	r2,20(r16)
1000a6ec:	003fea06 	br	1000a698 <__alt_data_end+0xf800a698>
1000a6f0:	81400717 	ldw	r5,28(r16)
1000a6f4:	000d883a 	mov	r6,zero
1000a6f8:	9809883a 	mov	r4,r19
1000a6fc:	01c00044 	movi	r7,1
1000a700:	403ee83a 	callr	r8
1000a704:	100d883a 	mov	r6,r2
1000a708:	00bfffc4 	movi	r2,-1
1000a70c:	30801326 	beq	r6,r2,1000a75c <_fflush_r+0x1f4>
1000a710:	8080030b 	ldhu	r2,12(r16)
1000a714:	82000a17 	ldw	r8,40(r16)
1000a718:	003fb006 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000a71c:	80c00f17 	ldw	r3,60(r16)
1000a720:	00ffa716 	blt	zero,r3,1000a5c0 <__alt_data_end+0xf800a5c0>
1000a724:	003fcc06 	br	1000a658 <__alt_data_end+0xf800a658>
1000a728:	98c00017 	ldw	r3,0(r19)
1000a72c:	183fb926 	beq	r3,zero,1000a614 <__alt_data_end+0xf800a614>
1000a730:	01000744 	movi	r4,29
1000a734:	19000226 	beq	r3,r4,1000a740 <_fflush_r+0x1d8>
1000a738:	01000584 	movi	r4,22
1000a73c:	1900101e 	bne	r3,r4,1000a780 <_fflush_r+0x218>
1000a740:	8080030b 	ldhu	r2,12(r16)
1000a744:	80c00417 	ldw	r3,16(r16)
1000a748:	80000115 	stw	zero,4(r16)
1000a74c:	10bdffcc 	andi	r2,r2,63487
1000a750:	8080030d 	sth	r2,12(r16)
1000a754:	80c00015 	stw	r3,0(r16)
1000a758:	003fb706 	br	1000a638 <__alt_data_end+0xf800a638>
1000a75c:	98800017 	ldw	r2,0(r19)
1000a760:	103feb26 	beq	r2,zero,1000a710 <__alt_data_end+0xf800a710>
1000a764:	00c00744 	movi	r3,29
1000a768:	10c00226 	beq	r2,r3,1000a774 <_fflush_r+0x20c>
1000a76c:	00c00584 	movi	r3,22
1000a770:	10ffd61e 	bne	r2,r3,1000a6cc <__alt_data_end+0xf800a6cc>
1000a774:	9c400015 	stw	r17,0(r19)
1000a778:	0005883a 	mov	r2,zero
1000a77c:	003fb706 	br	1000a65c <__alt_data_end+0xf800a65c>
1000a780:	80c0030b 	ldhu	r3,12(r16)
1000a784:	18c01014 	ori	r3,r3,64
1000a788:	80c0030d 	sth	r3,12(r16)
1000a78c:	003fb306 	br	1000a65c <__alt_data_end+0xf800a65c>

1000a790 <fflush>:
1000a790:	20000526 	beq	r4,zero,1000a7a8 <fflush+0x18>
1000a794:	00840074 	movhi	r2,4097
1000a798:	10906304 	addi	r2,r2,16780
1000a79c:	200b883a 	mov	r5,r4
1000a7a0:	11000017 	ldw	r4,0(r2)
1000a7a4:	000a5681 	jmpi	1000a568 <_fflush_r>
1000a7a8:	00840074 	movhi	r2,4097
1000a7ac:	10906204 	addi	r2,r2,16776
1000a7b0:	11000017 	ldw	r4,0(r2)
1000a7b4:	01440074 	movhi	r5,4097
1000a7b8:	29695a04 	addi	r5,r5,-23192
1000a7bc:	000b0401 	jmpi	1000b040 <_fwalk_reent>

1000a7c0 <__fp_lock>:
1000a7c0:	0005883a 	mov	r2,zero
1000a7c4:	f800283a 	ret

1000a7c8 <__fp_unlock>:
1000a7c8:	0005883a 	mov	r2,zero
1000a7cc:	f800283a 	ret

1000a7d0 <_cleanup_r>:
1000a7d0:	01440074 	movhi	r5,4097
1000a7d4:	297a5d04 	addi	r5,r5,-5772
1000a7d8:	000af881 	jmpi	1000af88 <_fwalk>

1000a7dc <__sinit.part.1>:
1000a7dc:	defff604 	addi	sp,sp,-40
1000a7e0:	00c40074 	movhi	r3,4097
1000a7e4:	dfc00915 	stw	ra,36(sp)
1000a7e8:	df000815 	stw	fp,32(sp)
1000a7ec:	ddc00715 	stw	r23,28(sp)
1000a7f0:	dd800615 	stw	r22,24(sp)
1000a7f4:	dd400515 	stw	r21,20(sp)
1000a7f8:	dd000415 	stw	r20,16(sp)
1000a7fc:	dcc00315 	stw	r19,12(sp)
1000a800:	dc800215 	stw	r18,8(sp)
1000a804:	dc400115 	stw	r17,4(sp)
1000a808:	dc000015 	stw	r16,0(sp)
1000a80c:	18e9f404 	addi	r3,r3,-22576
1000a810:	24000117 	ldw	r16,4(r4)
1000a814:	20c00f15 	stw	r3,60(r4)
1000a818:	07000044 	movi	fp,1
1000a81c:	00c000c4 	movi	r3,3
1000a820:	2080bb04 	addi	r2,r4,748
1000a824:	20c0b915 	stw	r3,740(r4)
1000a828:	27000e15 	stw	fp,56(r4)
1000a82c:	2080ba15 	stw	r2,744(r4)
1000a830:	2000b815 	stw	zero,736(r4)
1000a834:	05c00204 	movi	r23,8
1000a838:	00800104 	movi	r2,4
1000a83c:	2025883a 	mov	r18,r4
1000a840:	b80d883a 	mov	r6,r23
1000a844:	81001704 	addi	r4,r16,92
1000a848:	000b883a 	mov	r5,zero
1000a84c:	80000015 	stw	zero,0(r16)
1000a850:	80000115 	stw	zero,4(r16)
1000a854:	80000215 	stw	zero,8(r16)
1000a858:	8080030d 	sth	r2,12(r16)
1000a85c:	80001915 	stw	zero,100(r16)
1000a860:	8000038d 	sth	zero,14(r16)
1000a864:	80000415 	stw	zero,16(r16)
1000a868:	80000515 	stw	zero,20(r16)
1000a86c:	80000615 	stw	zero,24(r16)
1000a870:	000bd580 	call	1000bd58 <memset>
1000a874:	05840074 	movhi	r22,4097
1000a878:	94400217 	ldw	r17,8(r18)
1000a87c:	05440074 	movhi	r21,4097
1000a880:	05040074 	movhi	r20,4097
1000a884:	04c40074 	movhi	r19,4097
1000a888:	b5b3c604 	addi	r22,r22,-12520
1000a88c:	ad73dd04 	addi	r21,r21,-12428
1000a890:	a533fc04 	addi	r20,r20,-12304
1000a894:	9cf41304 	addi	r19,r19,-12212
1000a898:	85800815 	stw	r22,32(r16)
1000a89c:	85400915 	stw	r21,36(r16)
1000a8a0:	85000a15 	stw	r20,40(r16)
1000a8a4:	84c00b15 	stw	r19,44(r16)
1000a8a8:	84000715 	stw	r16,28(r16)
1000a8ac:	00800284 	movi	r2,10
1000a8b0:	89001704 	addi	r4,r17,92
1000a8b4:	b80d883a 	mov	r6,r23
1000a8b8:	000b883a 	mov	r5,zero
1000a8bc:	88000015 	stw	zero,0(r17)
1000a8c0:	88000115 	stw	zero,4(r17)
1000a8c4:	88000215 	stw	zero,8(r17)
1000a8c8:	8880030d 	sth	r2,12(r17)
1000a8cc:	88001915 	stw	zero,100(r17)
1000a8d0:	8f00038d 	sth	fp,14(r17)
1000a8d4:	88000415 	stw	zero,16(r17)
1000a8d8:	88000515 	stw	zero,20(r17)
1000a8dc:	88000615 	stw	zero,24(r17)
1000a8e0:	000bd580 	call	1000bd58 <memset>
1000a8e4:	94000317 	ldw	r16,12(r18)
1000a8e8:	00800484 	movi	r2,18
1000a8ec:	8c400715 	stw	r17,28(r17)
1000a8f0:	8d800815 	stw	r22,32(r17)
1000a8f4:	8d400915 	stw	r21,36(r17)
1000a8f8:	8d000a15 	stw	r20,40(r17)
1000a8fc:	8cc00b15 	stw	r19,44(r17)
1000a900:	8080030d 	sth	r2,12(r16)
1000a904:	00800084 	movi	r2,2
1000a908:	80000015 	stw	zero,0(r16)
1000a90c:	80000115 	stw	zero,4(r16)
1000a910:	80000215 	stw	zero,8(r16)
1000a914:	80001915 	stw	zero,100(r16)
1000a918:	8080038d 	sth	r2,14(r16)
1000a91c:	80000415 	stw	zero,16(r16)
1000a920:	80000515 	stw	zero,20(r16)
1000a924:	80000615 	stw	zero,24(r16)
1000a928:	81001704 	addi	r4,r16,92
1000a92c:	000b883a 	mov	r5,zero
1000a930:	b80d883a 	mov	r6,r23
1000a934:	000bd580 	call	1000bd58 <memset>
1000a938:	84000715 	stw	r16,28(r16)
1000a93c:	85800815 	stw	r22,32(r16)
1000a940:	85400915 	stw	r21,36(r16)
1000a944:	85000a15 	stw	r20,40(r16)
1000a948:	84c00b15 	stw	r19,44(r16)
1000a94c:	dfc00917 	ldw	ra,36(sp)
1000a950:	df000817 	ldw	fp,32(sp)
1000a954:	ddc00717 	ldw	r23,28(sp)
1000a958:	dd800617 	ldw	r22,24(sp)
1000a95c:	dd400517 	ldw	r21,20(sp)
1000a960:	dd000417 	ldw	r20,16(sp)
1000a964:	dcc00317 	ldw	r19,12(sp)
1000a968:	dc800217 	ldw	r18,8(sp)
1000a96c:	dc400117 	ldw	r17,4(sp)
1000a970:	dc000017 	ldw	r16,0(sp)
1000a974:	dec00a04 	addi	sp,sp,40
1000a978:	f800283a 	ret

1000a97c <__sfmoreglue>:
1000a97c:	defffc04 	addi	sp,sp,-16
1000a980:	dc800215 	stw	r18,8(sp)
1000a984:	2825883a 	mov	r18,r5
1000a988:	dc000015 	stw	r16,0(sp)
1000a98c:	01401a04 	movi	r5,104
1000a990:	2021883a 	mov	r16,r4
1000a994:	9009883a 	mov	r4,r18
1000a998:	dfc00315 	stw	ra,12(sp)
1000a99c:	dc400115 	stw	r17,4(sp)
1000a9a0:	00040b00 	call	100040b0 <__mulsi3>
1000a9a4:	8009883a 	mov	r4,r16
1000a9a8:	11400304 	addi	r5,r2,12
1000a9ac:	1023883a 	mov	r17,r2
1000a9b0:	000b3900 	call	1000b390 <_malloc_r>
1000a9b4:	1021883a 	mov	r16,r2
1000a9b8:	10000726 	beq	r2,zero,1000a9d8 <__sfmoreglue+0x5c>
1000a9bc:	11000304 	addi	r4,r2,12
1000a9c0:	10000015 	stw	zero,0(r2)
1000a9c4:	14800115 	stw	r18,4(r2)
1000a9c8:	11000215 	stw	r4,8(r2)
1000a9cc:	000b883a 	mov	r5,zero
1000a9d0:	880d883a 	mov	r6,r17
1000a9d4:	000bd580 	call	1000bd58 <memset>
1000a9d8:	8005883a 	mov	r2,r16
1000a9dc:	dfc00317 	ldw	ra,12(sp)
1000a9e0:	dc800217 	ldw	r18,8(sp)
1000a9e4:	dc400117 	ldw	r17,4(sp)
1000a9e8:	dc000017 	ldw	r16,0(sp)
1000a9ec:	dec00404 	addi	sp,sp,16
1000a9f0:	f800283a 	ret

1000a9f4 <__sfp>:
1000a9f4:	00840074 	movhi	r2,4097
1000a9f8:	defffb04 	addi	sp,sp,-20
1000a9fc:	10906204 	addi	r2,r2,16776
1000aa00:	dc800215 	stw	r18,8(sp)
1000aa04:	14800017 	ldw	r18,0(r2)
1000aa08:	dcc00315 	stw	r19,12(sp)
1000aa0c:	dfc00415 	stw	ra,16(sp)
1000aa10:	90800e17 	ldw	r2,56(r18)
1000aa14:	dc400115 	stw	r17,4(sp)
1000aa18:	dc000015 	stw	r16,0(sp)
1000aa1c:	2027883a 	mov	r19,r4
1000aa20:	1000021e 	bne	r2,zero,1000aa2c <__sfp+0x38>
1000aa24:	9009883a 	mov	r4,r18
1000aa28:	000a7dc0 	call	1000a7dc <__sinit.part.1>
1000aa2c:	9480b804 	addi	r18,r18,736
1000aa30:	047fffc4 	movi	r17,-1
1000aa34:	91400117 	ldw	r5,4(r18)
1000aa38:	94000217 	ldw	r16,8(r18)
1000aa3c:	297fffc4 	addi	r5,r5,-1
1000aa40:	28000a16 	blt	r5,zero,1000aa6c <__sfp+0x78>
1000aa44:	8080030f 	ldh	r2,12(r16)
1000aa48:	10000c26 	beq	r2,zero,1000aa7c <__sfp+0x88>
1000aa4c:	80c01d04 	addi	r3,r16,116
1000aa50:	00000206 	br	1000aa5c <__sfp+0x68>
1000aa54:	18bfe60f 	ldh	r2,-104(r3)
1000aa58:	10000826 	beq	r2,zero,1000aa7c <__sfp+0x88>
1000aa5c:	297fffc4 	addi	r5,r5,-1
1000aa60:	1c3ffd04 	addi	r16,r3,-12
1000aa64:	18c01a04 	addi	r3,r3,104
1000aa68:	2c7ffa1e 	bne	r5,r17,1000aa54 <__alt_data_end+0xf800aa54>
1000aa6c:	90800017 	ldw	r2,0(r18)
1000aa70:	10001d26 	beq	r2,zero,1000aae8 <__sfp+0xf4>
1000aa74:	1025883a 	mov	r18,r2
1000aa78:	003fee06 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000aa7c:	00bfffc4 	movi	r2,-1
1000aa80:	8080038d 	sth	r2,14(r16)
1000aa84:	00800044 	movi	r2,1
1000aa88:	8080030d 	sth	r2,12(r16)
1000aa8c:	80001915 	stw	zero,100(r16)
1000aa90:	80000015 	stw	zero,0(r16)
1000aa94:	80000215 	stw	zero,8(r16)
1000aa98:	80000115 	stw	zero,4(r16)
1000aa9c:	80000415 	stw	zero,16(r16)
1000aaa0:	80000515 	stw	zero,20(r16)
1000aaa4:	80000615 	stw	zero,24(r16)
1000aaa8:	81001704 	addi	r4,r16,92
1000aaac:	000b883a 	mov	r5,zero
1000aab0:	01800204 	movi	r6,8
1000aab4:	000bd580 	call	1000bd58 <memset>
1000aab8:	8005883a 	mov	r2,r16
1000aabc:	80000c15 	stw	zero,48(r16)
1000aac0:	80000d15 	stw	zero,52(r16)
1000aac4:	80001115 	stw	zero,68(r16)
1000aac8:	80001215 	stw	zero,72(r16)
1000aacc:	dfc00417 	ldw	ra,16(sp)
1000aad0:	dcc00317 	ldw	r19,12(sp)
1000aad4:	dc800217 	ldw	r18,8(sp)
1000aad8:	dc400117 	ldw	r17,4(sp)
1000aadc:	dc000017 	ldw	r16,0(sp)
1000aae0:	dec00504 	addi	sp,sp,20
1000aae4:	f800283a 	ret
1000aae8:	9809883a 	mov	r4,r19
1000aaec:	01400104 	movi	r5,4
1000aaf0:	000a97c0 	call	1000a97c <__sfmoreglue>
1000aaf4:	90800015 	stw	r2,0(r18)
1000aaf8:	103fde1e 	bne	r2,zero,1000aa74 <__alt_data_end+0xf800aa74>
1000aafc:	00800304 	movi	r2,12
1000ab00:	98800015 	stw	r2,0(r19)
1000ab04:	0005883a 	mov	r2,zero
1000ab08:	003ff006 	br	1000aacc <__alt_data_end+0xf800aacc>

1000ab0c <_cleanup>:
1000ab0c:	00840074 	movhi	r2,4097
1000ab10:	10906204 	addi	r2,r2,16776
1000ab14:	11000017 	ldw	r4,0(r2)
1000ab18:	01440074 	movhi	r5,4097
1000ab1c:	297a5d04 	addi	r5,r5,-5772
1000ab20:	000af881 	jmpi	1000af88 <_fwalk>

1000ab24 <__sinit>:
1000ab24:	20800e17 	ldw	r2,56(r4)
1000ab28:	10000126 	beq	r2,zero,1000ab30 <__sinit+0xc>
1000ab2c:	f800283a 	ret
1000ab30:	000a7dc1 	jmpi	1000a7dc <__sinit.part.1>

1000ab34 <__sfp_lock_acquire>:
1000ab34:	f800283a 	ret

1000ab38 <__sfp_lock_release>:
1000ab38:	f800283a 	ret

1000ab3c <__sinit_lock_acquire>:
1000ab3c:	f800283a 	ret

1000ab40 <__sinit_lock_release>:
1000ab40:	f800283a 	ret

1000ab44 <__fp_lock_all>:
1000ab44:	00840074 	movhi	r2,4097
1000ab48:	10906304 	addi	r2,r2,16780
1000ab4c:	11000017 	ldw	r4,0(r2)
1000ab50:	01440074 	movhi	r5,4097
1000ab54:	2969f004 	addi	r5,r5,-22592
1000ab58:	000af881 	jmpi	1000af88 <_fwalk>

1000ab5c <__fp_unlock_all>:
1000ab5c:	00840074 	movhi	r2,4097
1000ab60:	10906304 	addi	r2,r2,16780
1000ab64:	11000017 	ldw	r4,0(r2)
1000ab68:	01440074 	movhi	r5,4097
1000ab6c:	2969f204 	addi	r5,r5,-22584
1000ab70:	000af881 	jmpi	1000af88 <_fwalk>

1000ab74 <_malloc_trim_r>:
1000ab74:	defffb04 	addi	sp,sp,-20
1000ab78:	dcc00315 	stw	r19,12(sp)
1000ab7c:	04c40074 	movhi	r19,4097
1000ab80:	dc800215 	stw	r18,8(sp)
1000ab84:	dc400115 	stw	r17,4(sp)
1000ab88:	dc000015 	stw	r16,0(sp)
1000ab8c:	dfc00415 	stw	ra,16(sp)
1000ab90:	2821883a 	mov	r16,r5
1000ab94:	9ccadd04 	addi	r19,r19,11124
1000ab98:	2025883a 	mov	r18,r4
1000ab9c:	00101b80 	call	100101b8 <__malloc_lock>
1000aba0:	98800217 	ldw	r2,8(r19)
1000aba4:	14400117 	ldw	r17,4(r2)
1000aba8:	00bfff04 	movi	r2,-4
1000abac:	88a2703a 	and	r17,r17,r2
1000abb0:	8c21c83a 	sub	r16,r17,r16
1000abb4:	8403fbc4 	addi	r16,r16,4079
1000abb8:	8020d33a 	srli	r16,r16,12
1000abbc:	0083ffc4 	movi	r2,4095
1000abc0:	843fffc4 	addi	r16,r16,-1
1000abc4:	8020933a 	slli	r16,r16,12
1000abc8:	1400060e 	bge	r2,r16,1000abe4 <_malloc_trim_r+0x70>
1000abcc:	9009883a 	mov	r4,r18
1000abd0:	000b883a 	mov	r5,zero
1000abd4:	000cec40 	call	1000cec4 <_sbrk_r>
1000abd8:	98c00217 	ldw	r3,8(r19)
1000abdc:	1c47883a 	add	r3,r3,r17
1000abe0:	10c00a26 	beq	r2,r3,1000ac0c <_malloc_trim_r+0x98>
1000abe4:	9009883a 	mov	r4,r18
1000abe8:	00101d80 	call	100101d8 <__malloc_unlock>
1000abec:	0005883a 	mov	r2,zero
1000abf0:	dfc00417 	ldw	ra,16(sp)
1000abf4:	dcc00317 	ldw	r19,12(sp)
1000abf8:	dc800217 	ldw	r18,8(sp)
1000abfc:	dc400117 	ldw	r17,4(sp)
1000ac00:	dc000017 	ldw	r16,0(sp)
1000ac04:	dec00504 	addi	sp,sp,20
1000ac08:	f800283a 	ret
1000ac0c:	9009883a 	mov	r4,r18
1000ac10:	040bc83a 	sub	r5,zero,r16
1000ac14:	000cec40 	call	1000cec4 <_sbrk_r>
1000ac18:	00ffffc4 	movi	r3,-1
1000ac1c:	10c00d26 	beq	r2,r3,1000ac54 <_malloc_trim_r+0xe0>
1000ac20:	00c40074 	movhi	r3,4097
1000ac24:	18d74304 	addi	r3,r3,23820
1000ac28:	18800017 	ldw	r2,0(r3)
1000ac2c:	99000217 	ldw	r4,8(r19)
1000ac30:	8c23c83a 	sub	r17,r17,r16
1000ac34:	8c400054 	ori	r17,r17,1
1000ac38:	1421c83a 	sub	r16,r2,r16
1000ac3c:	24400115 	stw	r17,4(r4)
1000ac40:	9009883a 	mov	r4,r18
1000ac44:	1c000015 	stw	r16,0(r3)
1000ac48:	00101d80 	call	100101d8 <__malloc_unlock>
1000ac4c:	00800044 	movi	r2,1
1000ac50:	003fe706 	br	1000abf0 <__alt_data_end+0xf800abf0>
1000ac54:	9009883a 	mov	r4,r18
1000ac58:	000b883a 	mov	r5,zero
1000ac5c:	000cec40 	call	1000cec4 <_sbrk_r>
1000ac60:	99000217 	ldw	r4,8(r19)
1000ac64:	014003c4 	movi	r5,15
1000ac68:	1107c83a 	sub	r3,r2,r4
1000ac6c:	28ffdd0e 	bge	r5,r3,1000abe4 <__alt_data_end+0xf800abe4>
1000ac70:	01440074 	movhi	r5,4097
1000ac74:	29506504 	addi	r5,r5,16788
1000ac78:	29400017 	ldw	r5,0(r5)
1000ac7c:	18c00054 	ori	r3,r3,1
1000ac80:	20c00115 	stw	r3,4(r4)
1000ac84:	00c40074 	movhi	r3,4097
1000ac88:	1145c83a 	sub	r2,r2,r5
1000ac8c:	18d74304 	addi	r3,r3,23820
1000ac90:	18800015 	stw	r2,0(r3)
1000ac94:	003fd306 	br	1000abe4 <__alt_data_end+0xf800abe4>

1000ac98 <_free_r>:
1000ac98:	28004c26 	beq	r5,zero,1000adcc <_free_r+0x134>
1000ac9c:	defffd04 	addi	sp,sp,-12
1000aca0:	dc400115 	stw	r17,4(sp)
1000aca4:	dc000015 	stw	r16,0(sp)
1000aca8:	2023883a 	mov	r17,r4
1000acac:	2821883a 	mov	r16,r5
1000acb0:	dfc00215 	stw	ra,8(sp)
1000acb4:	00101b80 	call	100101b8 <__malloc_lock>
1000acb8:	813fff17 	ldw	r4,-4(r16)
1000acbc:	00bfff84 	movi	r2,-2
1000acc0:	02440074 	movhi	r9,4097
1000acc4:	81bffe04 	addi	r6,r16,-8
1000acc8:	2084703a 	and	r2,r4,r2
1000accc:	4a4add04 	addi	r9,r9,11124
1000acd0:	308b883a 	add	r5,r6,r2
1000acd4:	2a000117 	ldw	r8,4(r5)
1000acd8:	49c00217 	ldw	r7,8(r9)
1000acdc:	00ffff04 	movi	r3,-4
1000ace0:	40c6703a 	and	r3,r8,r3
1000ace4:	39405326 	beq	r7,r5,1000ae34 <_free_r+0x19c>
1000ace8:	28c00115 	stw	r3,4(r5)
1000acec:	2100004c 	andi	r4,r4,1
1000acf0:	2000091e 	bne	r4,zero,1000ad18 <_free_r+0x80>
1000acf4:	81fffe17 	ldw	r7,-8(r16)
1000acf8:	4a000204 	addi	r8,r9,8
1000acfc:	31cdc83a 	sub	r6,r6,r7
1000ad00:	31000217 	ldw	r4,8(r6)
1000ad04:	11c5883a 	add	r2,r2,r7
1000ad08:	22006126 	beq	r4,r8,1000ae90 <_free_r+0x1f8>
1000ad0c:	31c00317 	ldw	r7,12(r6)
1000ad10:	21c00315 	stw	r7,12(r4)
1000ad14:	39000215 	stw	r4,8(r7)
1000ad18:	28c9883a 	add	r4,r5,r3
1000ad1c:	21c00117 	ldw	r7,4(r4)
1000ad20:	39c0004c 	andi	r7,r7,1
1000ad24:	38000d1e 	bne	r7,zero,1000ad5c <_free_r+0xc4>
1000ad28:	29000217 	ldw	r4,8(r5)
1000ad2c:	10c5883a 	add	r2,r2,r3
1000ad30:	00c40074 	movhi	r3,4097
1000ad34:	18cadf04 	addi	r3,r3,11132
1000ad38:	20c07526 	beq	r4,r3,1000af10 <_free_r+0x278>
1000ad3c:	29c00317 	ldw	r7,12(r5)
1000ad40:	11400054 	ori	r5,r2,1
1000ad44:	3087883a 	add	r3,r6,r2
1000ad48:	21c00315 	stw	r7,12(r4)
1000ad4c:	39000215 	stw	r4,8(r7)
1000ad50:	31400115 	stw	r5,4(r6)
1000ad54:	18800015 	stw	r2,0(r3)
1000ad58:	00000406 	br	1000ad6c <_free_r+0xd4>
1000ad5c:	10c00054 	ori	r3,r2,1
1000ad60:	30c00115 	stw	r3,4(r6)
1000ad64:	3087883a 	add	r3,r6,r2
1000ad68:	18800015 	stw	r2,0(r3)
1000ad6c:	00c07fc4 	movi	r3,511
1000ad70:	18801736 	bltu	r3,r2,1000add0 <_free_r+0x138>
1000ad74:	1004d0fa 	srli	r2,r2,3
1000ad78:	01400044 	movi	r5,1
1000ad7c:	49000117 	ldw	r4,4(r9)
1000ad80:	1087883a 	add	r3,r2,r2
1000ad84:	18c7883a 	add	r3,r3,r3
1000ad88:	1005d0ba 	srai	r2,r2,2
1000ad8c:	18c7883a 	add	r3,r3,r3
1000ad90:	1a47883a 	add	r3,r3,r9
1000ad94:	19c00217 	ldw	r7,8(r3)
1000ad98:	2884983a 	sll	r2,r5,r2
1000ad9c:	30c00315 	stw	r3,12(r6)
1000ada0:	31c00215 	stw	r7,8(r6)
1000ada4:	1104b03a 	or	r2,r2,r4
1000ada8:	19800215 	stw	r6,8(r3)
1000adac:	48800115 	stw	r2,4(r9)
1000adb0:	39800315 	stw	r6,12(r7)
1000adb4:	8809883a 	mov	r4,r17
1000adb8:	dfc00217 	ldw	ra,8(sp)
1000adbc:	dc400117 	ldw	r17,4(sp)
1000adc0:	dc000017 	ldw	r16,0(sp)
1000adc4:	dec00304 	addi	sp,sp,12
1000adc8:	00101d81 	jmpi	100101d8 <__malloc_unlock>
1000adcc:	f800283a 	ret
1000add0:	1006d27a 	srli	r3,r2,9
1000add4:	01000104 	movi	r4,4
1000add8:	20c04036 	bltu	r4,r3,1000aedc <_free_r+0x244>
1000addc:	1006d1ba 	srli	r3,r2,6
1000ade0:	19400e04 	addi	r5,r3,56
1000ade4:	2947883a 	add	r3,r5,r5
1000ade8:	18c7883a 	add	r3,r3,r3
1000adec:	18c7883a 	add	r3,r3,r3
1000adf0:	1a49883a 	add	r4,r3,r9
1000adf4:	20c00217 	ldw	r3,8(r4)
1000adf8:	01c40074 	movhi	r7,4097
1000adfc:	39cadd04 	addi	r7,r7,11124
1000ae00:	19003b26 	beq	r3,r4,1000aef0 <_free_r+0x258>
1000ae04:	01ffff04 	movi	r7,-4
1000ae08:	19400117 	ldw	r5,4(r3)
1000ae0c:	29ca703a 	and	r5,r5,r7
1000ae10:	1140022e 	bgeu	r2,r5,1000ae1c <_free_r+0x184>
1000ae14:	18c00217 	ldw	r3,8(r3)
1000ae18:	20fffb1e 	bne	r4,r3,1000ae08 <__alt_data_end+0xf800ae08>
1000ae1c:	18800317 	ldw	r2,12(r3)
1000ae20:	30800315 	stw	r2,12(r6)
1000ae24:	30c00215 	stw	r3,8(r6)
1000ae28:	11800215 	stw	r6,8(r2)
1000ae2c:	19800315 	stw	r6,12(r3)
1000ae30:	003fe006 	br	1000adb4 <__alt_data_end+0xf800adb4>
1000ae34:	2100004c 	andi	r4,r4,1
1000ae38:	1885883a 	add	r2,r3,r2
1000ae3c:	2000071e 	bne	r4,zero,1000ae5c <_free_r+0x1c4>
1000ae40:	817ffe17 	ldw	r5,-8(r16)
1000ae44:	314dc83a 	sub	r6,r6,r5
1000ae48:	30c00317 	ldw	r3,12(r6)
1000ae4c:	31000217 	ldw	r4,8(r6)
1000ae50:	1145883a 	add	r2,r2,r5
1000ae54:	20c00315 	stw	r3,12(r4)
1000ae58:	19000215 	stw	r4,8(r3)
1000ae5c:	10c00054 	ori	r3,r2,1
1000ae60:	30c00115 	stw	r3,4(r6)
1000ae64:	00c40074 	movhi	r3,4097
1000ae68:	18d06604 	addi	r3,r3,16792
1000ae6c:	18c00017 	ldw	r3,0(r3)
1000ae70:	49800215 	stw	r6,8(r9)
1000ae74:	10ffcf36 	bltu	r2,r3,1000adb4 <__alt_data_end+0xf800adb4>
1000ae78:	00840074 	movhi	r2,4097
1000ae7c:	10973a04 	addi	r2,r2,23784
1000ae80:	11400017 	ldw	r5,0(r2)
1000ae84:	8809883a 	mov	r4,r17
1000ae88:	000ab740 	call	1000ab74 <_malloc_trim_r>
1000ae8c:	003fc906 	br	1000adb4 <__alt_data_end+0xf800adb4>
1000ae90:	28c9883a 	add	r4,r5,r3
1000ae94:	21000117 	ldw	r4,4(r4)
1000ae98:	2100004c 	andi	r4,r4,1
1000ae9c:	20000a1e 	bne	r4,zero,1000aec8 <_free_r+0x230>
1000aea0:	29000317 	ldw	r4,12(r5)
1000aea4:	29400217 	ldw	r5,8(r5)
1000aea8:	10c5883a 	add	r2,r2,r3
1000aeac:	10c00054 	ori	r3,r2,1
1000aeb0:	29000315 	stw	r4,12(r5)
1000aeb4:	21400215 	stw	r5,8(r4)
1000aeb8:	30c00115 	stw	r3,4(r6)
1000aebc:	308d883a 	add	r6,r6,r2
1000aec0:	30800015 	stw	r2,0(r6)
1000aec4:	003fbb06 	br	1000adb4 <__alt_data_end+0xf800adb4>
1000aec8:	10c00054 	ori	r3,r2,1
1000aecc:	30c00115 	stw	r3,4(r6)
1000aed0:	308d883a 	add	r6,r6,r2
1000aed4:	30800015 	stw	r2,0(r6)
1000aed8:	003fb606 	br	1000adb4 <__alt_data_end+0xf800adb4>
1000aedc:	01000504 	movi	r4,20
1000aee0:	20c01436 	bltu	r4,r3,1000af34 <_free_r+0x29c>
1000aee4:	194016c4 	addi	r5,r3,91
1000aee8:	2947883a 	add	r3,r5,r5
1000aeec:	003fbe06 	br	1000ade8 <__alt_data_end+0xf800ade8>
1000aef0:	280bd0ba 	srai	r5,r5,2
1000aef4:	00800044 	movi	r2,1
1000aef8:	39000117 	ldw	r4,4(r7)
1000aefc:	114a983a 	sll	r5,r2,r5
1000af00:	1805883a 	mov	r2,r3
1000af04:	2908b03a 	or	r4,r5,r4
1000af08:	39000115 	stw	r4,4(r7)
1000af0c:	003fc406 	br	1000ae20 <__alt_data_end+0xf800ae20>
1000af10:	49800515 	stw	r6,20(r9)
1000af14:	49800415 	stw	r6,16(r9)
1000af18:	10c00054 	ori	r3,r2,1
1000af1c:	31000315 	stw	r4,12(r6)
1000af20:	31000215 	stw	r4,8(r6)
1000af24:	30c00115 	stw	r3,4(r6)
1000af28:	308d883a 	add	r6,r6,r2
1000af2c:	30800015 	stw	r2,0(r6)
1000af30:	003fa006 	br	1000adb4 <__alt_data_end+0xf800adb4>
1000af34:	01001504 	movi	r4,84
1000af38:	20c00436 	bltu	r4,r3,1000af4c <_free_r+0x2b4>
1000af3c:	1006d33a 	srli	r3,r2,12
1000af40:	19401b84 	addi	r5,r3,110
1000af44:	2947883a 	add	r3,r5,r5
1000af48:	003fa706 	br	1000ade8 <__alt_data_end+0xf800ade8>
1000af4c:	01005504 	movi	r4,340
1000af50:	20c00436 	bltu	r4,r3,1000af64 <_free_r+0x2cc>
1000af54:	1006d3fa 	srli	r3,r2,15
1000af58:	19401dc4 	addi	r5,r3,119
1000af5c:	2947883a 	add	r3,r5,r5
1000af60:	003fa106 	br	1000ade8 <__alt_data_end+0xf800ade8>
1000af64:	01015504 	movi	r4,1364
1000af68:	20c00436 	bltu	r4,r3,1000af7c <_free_r+0x2e4>
1000af6c:	1006d4ba 	srli	r3,r2,18
1000af70:	19401f04 	addi	r5,r3,124
1000af74:	2947883a 	add	r3,r5,r5
1000af78:	003f9b06 	br	1000ade8 <__alt_data_end+0xf800ade8>
1000af7c:	00c03f04 	movi	r3,252
1000af80:	01401f84 	movi	r5,126
1000af84:	003f9806 	br	1000ade8 <__alt_data_end+0xf800ade8>

1000af88 <_fwalk>:
1000af88:	defff804 	addi	sp,sp,-32
1000af8c:	dd400515 	stw	r21,20(sp)
1000af90:	2540b804 	addi	r21,r4,736
1000af94:	dd800615 	stw	r22,24(sp)
1000af98:	dd000415 	stw	r20,16(sp)
1000af9c:	dfc00715 	stw	ra,28(sp)
1000afa0:	dcc00315 	stw	r19,12(sp)
1000afa4:	dc800215 	stw	r18,8(sp)
1000afa8:	dc400115 	stw	r17,4(sp)
1000afac:	dc000015 	stw	r16,0(sp)
1000afb0:	2829883a 	mov	r20,r5
1000afb4:	002d883a 	mov	r22,zero
1000afb8:	000ab340 	call	1000ab34 <__sfp_lock_acquire>
1000afbc:	a8001426 	beq	r21,zero,1000b010 <_fwalk+0x88>
1000afc0:	04ffffc4 	movi	r19,-1
1000afc4:	ac400117 	ldw	r17,4(r21)
1000afc8:	ac800217 	ldw	r18,8(r21)
1000afcc:	8c7fffc4 	addi	r17,r17,-1
1000afd0:	88000d16 	blt	r17,zero,1000b008 <_fwalk+0x80>
1000afd4:	94000304 	addi	r16,r18,12
1000afd8:	94800384 	addi	r18,r18,14
1000afdc:	80c0000f 	ldh	r3,0(r16)
1000afe0:	8c7fffc4 	addi	r17,r17,-1
1000afe4:	813ffd04 	addi	r4,r16,-12
1000afe8:	18000426 	beq	r3,zero,1000affc <_fwalk+0x74>
1000afec:	90c0000f 	ldh	r3,0(r18)
1000aff0:	1cc00226 	beq	r3,r19,1000affc <_fwalk+0x74>
1000aff4:	a03ee83a 	callr	r20
1000aff8:	b0acb03a 	or	r22,r22,r2
1000affc:	84001a04 	addi	r16,r16,104
1000b000:	94801a04 	addi	r18,r18,104
1000b004:	8cfff51e 	bne	r17,r19,1000afdc <__alt_data_end+0xf800afdc>
1000b008:	ad400017 	ldw	r21,0(r21)
1000b00c:	a83fed1e 	bne	r21,zero,1000afc4 <__alt_data_end+0xf800afc4>
1000b010:	000ab380 	call	1000ab38 <__sfp_lock_release>
1000b014:	b005883a 	mov	r2,r22
1000b018:	dfc00717 	ldw	ra,28(sp)
1000b01c:	dd800617 	ldw	r22,24(sp)
1000b020:	dd400517 	ldw	r21,20(sp)
1000b024:	dd000417 	ldw	r20,16(sp)
1000b028:	dcc00317 	ldw	r19,12(sp)
1000b02c:	dc800217 	ldw	r18,8(sp)
1000b030:	dc400117 	ldw	r17,4(sp)
1000b034:	dc000017 	ldw	r16,0(sp)
1000b038:	dec00804 	addi	sp,sp,32
1000b03c:	f800283a 	ret

1000b040 <_fwalk_reent>:
1000b040:	defff804 	addi	sp,sp,-32
1000b044:	dd400515 	stw	r21,20(sp)
1000b048:	2540b804 	addi	r21,r4,736
1000b04c:	dd800615 	stw	r22,24(sp)
1000b050:	dd000415 	stw	r20,16(sp)
1000b054:	dcc00315 	stw	r19,12(sp)
1000b058:	dfc00715 	stw	ra,28(sp)
1000b05c:	dc800215 	stw	r18,8(sp)
1000b060:	dc400115 	stw	r17,4(sp)
1000b064:	dc000015 	stw	r16,0(sp)
1000b068:	2027883a 	mov	r19,r4
1000b06c:	2829883a 	mov	r20,r5
1000b070:	002d883a 	mov	r22,zero
1000b074:	000ab340 	call	1000ab34 <__sfp_lock_acquire>
1000b078:	a8001326 	beq	r21,zero,1000b0c8 <_fwalk_reent+0x88>
1000b07c:	04bfffc4 	movi	r18,-1
1000b080:	ac400117 	ldw	r17,4(r21)
1000b084:	ac000217 	ldw	r16,8(r21)
1000b088:	8c7fffc4 	addi	r17,r17,-1
1000b08c:	88000c16 	blt	r17,zero,1000b0c0 <_fwalk_reent+0x80>
1000b090:	84000304 	addi	r16,r16,12
1000b094:	80c0000f 	ldh	r3,0(r16)
1000b098:	8c7fffc4 	addi	r17,r17,-1
1000b09c:	817ffd04 	addi	r5,r16,-12
1000b0a0:	18000526 	beq	r3,zero,1000b0b8 <_fwalk_reent+0x78>
1000b0a4:	80c0008f 	ldh	r3,2(r16)
1000b0a8:	9809883a 	mov	r4,r19
1000b0ac:	1c800226 	beq	r3,r18,1000b0b8 <_fwalk_reent+0x78>
1000b0b0:	a03ee83a 	callr	r20
1000b0b4:	b0acb03a 	or	r22,r22,r2
1000b0b8:	84001a04 	addi	r16,r16,104
1000b0bc:	8cbff51e 	bne	r17,r18,1000b094 <__alt_data_end+0xf800b094>
1000b0c0:	ad400017 	ldw	r21,0(r21)
1000b0c4:	a83fee1e 	bne	r21,zero,1000b080 <__alt_data_end+0xf800b080>
1000b0c8:	000ab380 	call	1000ab38 <__sfp_lock_release>
1000b0cc:	b005883a 	mov	r2,r22
1000b0d0:	dfc00717 	ldw	ra,28(sp)
1000b0d4:	dd800617 	ldw	r22,24(sp)
1000b0d8:	dd400517 	ldw	r21,20(sp)
1000b0dc:	dd000417 	ldw	r20,16(sp)
1000b0e0:	dcc00317 	ldw	r19,12(sp)
1000b0e4:	dc800217 	ldw	r18,8(sp)
1000b0e8:	dc400117 	ldw	r17,4(sp)
1000b0ec:	dc000017 	ldw	r16,0(sp)
1000b0f0:	dec00804 	addi	sp,sp,32
1000b0f4:	f800283a 	ret

1000b0f8 <_setlocale_r>:
1000b0f8:	30001b26 	beq	r6,zero,1000b168 <_setlocale_r+0x70>
1000b0fc:	01440074 	movhi	r5,4097
1000b100:	defffe04 	addi	sp,sp,-8
1000b104:	29495504 	addi	r5,r5,9556
1000b108:	3009883a 	mov	r4,r6
1000b10c:	dc000015 	stw	r16,0(sp)
1000b110:	dfc00115 	stw	ra,4(sp)
1000b114:	3021883a 	mov	r16,r6
1000b118:	000d0540 	call	1000d054 <strcmp>
1000b11c:	1000061e 	bne	r2,zero,1000b138 <_setlocale_r+0x40>
1000b120:	00840074 	movhi	r2,4097
1000b124:	10893704 	addi	r2,r2,9436
1000b128:	dfc00117 	ldw	ra,4(sp)
1000b12c:	dc000017 	ldw	r16,0(sp)
1000b130:	dec00204 	addi	sp,sp,8
1000b134:	f800283a 	ret
1000b138:	01440074 	movhi	r5,4097
1000b13c:	29493704 	addi	r5,r5,9436
1000b140:	8009883a 	mov	r4,r16
1000b144:	000d0540 	call	1000d054 <strcmp>
1000b148:	103ff526 	beq	r2,zero,1000b120 <__alt_data_end+0xf800b120>
1000b14c:	01440074 	movhi	r5,4097
1000b150:	29494004 	addi	r5,r5,9472
1000b154:	8009883a 	mov	r4,r16
1000b158:	000d0540 	call	1000d054 <strcmp>
1000b15c:	103ff026 	beq	r2,zero,1000b120 <__alt_data_end+0xf800b120>
1000b160:	0005883a 	mov	r2,zero
1000b164:	003ff006 	br	1000b128 <__alt_data_end+0xf800b128>
1000b168:	00840074 	movhi	r2,4097
1000b16c:	10893704 	addi	r2,r2,9436
1000b170:	f800283a 	ret

1000b174 <__locale_charset>:
1000b174:	00840074 	movhi	r2,4097
1000b178:	108ac704 	addi	r2,r2,11036
1000b17c:	f800283a 	ret

1000b180 <__locale_mb_cur_max>:
1000b180:	00840074 	movhi	r2,4097
1000b184:	10906404 	addi	r2,r2,16784
1000b188:	10800017 	ldw	r2,0(r2)
1000b18c:	f800283a 	ret

1000b190 <__locale_msgcharset>:
1000b190:	00840074 	movhi	r2,4097
1000b194:	108abf04 	addi	r2,r2,11004
1000b198:	f800283a 	ret

1000b19c <__locale_cjk_lang>:
1000b19c:	0005883a 	mov	r2,zero
1000b1a0:	f800283a 	ret

1000b1a4 <_localeconv_r>:
1000b1a4:	00840074 	movhi	r2,4097
1000b1a8:	108acf04 	addi	r2,r2,11068
1000b1ac:	f800283a 	ret

1000b1b0 <setlocale>:
1000b1b0:	00c40074 	movhi	r3,4097
1000b1b4:	18d06304 	addi	r3,r3,16780
1000b1b8:	2005883a 	mov	r2,r4
1000b1bc:	19000017 	ldw	r4,0(r3)
1000b1c0:	280d883a 	mov	r6,r5
1000b1c4:	100b883a 	mov	r5,r2
1000b1c8:	000b0f81 	jmpi	1000b0f8 <_setlocale_r>

1000b1cc <localeconv>:
1000b1cc:	00840074 	movhi	r2,4097
1000b1d0:	108acf04 	addi	r2,r2,11068
1000b1d4:	f800283a 	ret

1000b1d8 <__smakebuf_r>:
1000b1d8:	2880030b 	ldhu	r2,12(r5)
1000b1dc:	10c0008c 	andi	r3,r2,2
1000b1e0:	1800401e 	bne	r3,zero,1000b2e4 <__smakebuf_r+0x10c>
1000b1e4:	deffec04 	addi	sp,sp,-80
1000b1e8:	dc000f15 	stw	r16,60(sp)
1000b1ec:	2821883a 	mov	r16,r5
1000b1f0:	2940038f 	ldh	r5,14(r5)
1000b1f4:	dc401015 	stw	r17,64(sp)
1000b1f8:	dfc01315 	stw	ra,76(sp)
1000b1fc:	dcc01215 	stw	r19,72(sp)
1000b200:	dc801115 	stw	r18,68(sp)
1000b204:	2023883a 	mov	r17,r4
1000b208:	28001b16 	blt	r5,zero,1000b278 <__smakebuf_r+0xa0>
1000b20c:	d80d883a 	mov	r6,sp
1000b210:	000eb640 	call	1000eb64 <_fstat_r>
1000b214:	10001716 	blt	r2,zero,1000b274 <__smakebuf_r+0x9c>
1000b218:	d8800117 	ldw	r2,4(sp)
1000b21c:	00e00014 	movui	r3,32768
1000b220:	10bc000c 	andi	r2,r2,61440
1000b224:	10c03726 	beq	r2,r3,1000b304 <__smakebuf_r+0x12c>
1000b228:	80c0030b 	ldhu	r3,12(r16)
1000b22c:	18c20014 	ori	r3,r3,2048
1000b230:	80c0030d 	sth	r3,12(r16)
1000b234:	00c80004 	movi	r3,8192
1000b238:	10c03c1e 	bne	r2,r3,1000b32c <__smakebuf_r+0x154>
1000b23c:	8140038f 	ldh	r5,14(r16)
1000b240:	8809883a 	mov	r4,r17
1000b244:	000f0600 	call	1000f060 <_isatty_r>
1000b248:	10004e26 	beq	r2,zero,1000b384 <__smakebuf_r+0x1ac>
1000b24c:	8080030b 	ldhu	r2,12(r16)
1000b250:	04c00044 	movi	r19,1
1000b254:	80c010c4 	addi	r3,r16,67
1000b258:	14c4b03a 	or	r2,r2,r19
1000b25c:	8080030d 	sth	r2,12(r16)
1000b260:	80c00015 	stw	r3,0(r16)
1000b264:	80c00415 	stw	r3,16(r16)
1000b268:	84c00515 	stw	r19,20(r16)
1000b26c:	04810004 	movi	r18,1024
1000b270:	00000706 	br	1000b290 <__smakebuf_r+0xb8>
1000b274:	8080030b 	ldhu	r2,12(r16)
1000b278:	10c0200c 	andi	r3,r2,128
1000b27c:	18001f1e 	bne	r3,zero,1000b2fc <__smakebuf_r+0x124>
1000b280:	04810004 	movi	r18,1024
1000b284:	10820014 	ori	r2,r2,2048
1000b288:	8080030d 	sth	r2,12(r16)
1000b28c:	0027883a 	mov	r19,zero
1000b290:	8809883a 	mov	r4,r17
1000b294:	900b883a 	mov	r5,r18
1000b298:	000b3900 	call	1000b390 <_malloc_r>
1000b29c:	10002e26 	beq	r2,zero,1000b358 <__smakebuf_r+0x180>
1000b2a0:	80c0030b 	ldhu	r3,12(r16)
1000b2a4:	01040074 	movhi	r4,4097
1000b2a8:	2129f404 	addi	r4,r4,-22576
1000b2ac:	89000f15 	stw	r4,60(r17)
1000b2b0:	18c02014 	ori	r3,r3,128
1000b2b4:	80c0030d 	sth	r3,12(r16)
1000b2b8:	80800015 	stw	r2,0(r16)
1000b2bc:	80800415 	stw	r2,16(r16)
1000b2c0:	84800515 	stw	r18,20(r16)
1000b2c4:	98001c1e 	bne	r19,zero,1000b338 <__smakebuf_r+0x160>
1000b2c8:	dfc01317 	ldw	ra,76(sp)
1000b2cc:	dcc01217 	ldw	r19,72(sp)
1000b2d0:	dc801117 	ldw	r18,68(sp)
1000b2d4:	dc401017 	ldw	r17,64(sp)
1000b2d8:	dc000f17 	ldw	r16,60(sp)
1000b2dc:	dec01404 	addi	sp,sp,80
1000b2e0:	f800283a 	ret
1000b2e4:	288010c4 	addi	r2,r5,67
1000b2e8:	28800015 	stw	r2,0(r5)
1000b2ec:	28800415 	stw	r2,16(r5)
1000b2f0:	00800044 	movi	r2,1
1000b2f4:	28800515 	stw	r2,20(r5)
1000b2f8:	f800283a 	ret
1000b2fc:	04801004 	movi	r18,64
1000b300:	003fe006 	br	1000b284 <__alt_data_end+0xf800b284>
1000b304:	81000a17 	ldw	r4,40(r16)
1000b308:	00c40074 	movhi	r3,4097
1000b30c:	18f3fc04 	addi	r3,r3,-12304
1000b310:	20ffc51e 	bne	r4,r3,1000b228 <__alt_data_end+0xf800b228>
1000b314:	80c0030b 	ldhu	r3,12(r16)
1000b318:	01010004 	movi	r4,1024
1000b31c:	81001315 	stw	r4,76(r16)
1000b320:	1906b03a 	or	r3,r3,r4
1000b324:	80c0030d 	sth	r3,12(r16)
1000b328:	003fc206 	br	1000b234 <__alt_data_end+0xf800b234>
1000b32c:	0027883a 	mov	r19,zero
1000b330:	04810004 	movi	r18,1024
1000b334:	003fd606 	br	1000b290 <__alt_data_end+0xf800b290>
1000b338:	8140038f 	ldh	r5,14(r16)
1000b33c:	8809883a 	mov	r4,r17
1000b340:	000f0600 	call	1000f060 <_isatty_r>
1000b344:	103fe026 	beq	r2,zero,1000b2c8 <__alt_data_end+0xf800b2c8>
1000b348:	8080030b 	ldhu	r2,12(r16)
1000b34c:	10800054 	ori	r2,r2,1
1000b350:	8080030d 	sth	r2,12(r16)
1000b354:	003fdc06 	br	1000b2c8 <__alt_data_end+0xf800b2c8>
1000b358:	8080030b 	ldhu	r2,12(r16)
1000b35c:	10c0800c 	andi	r3,r2,512
1000b360:	183fd91e 	bne	r3,zero,1000b2c8 <__alt_data_end+0xf800b2c8>
1000b364:	10800094 	ori	r2,r2,2
1000b368:	80c010c4 	addi	r3,r16,67
1000b36c:	8080030d 	sth	r2,12(r16)
1000b370:	00800044 	movi	r2,1
1000b374:	80c00015 	stw	r3,0(r16)
1000b378:	80c00415 	stw	r3,16(r16)
1000b37c:	80800515 	stw	r2,20(r16)
1000b380:	003fd106 	br	1000b2c8 <__alt_data_end+0xf800b2c8>
1000b384:	04c00044 	movi	r19,1
1000b388:	04810004 	movi	r18,1024
1000b38c:	003fc006 	br	1000b290 <__alt_data_end+0xf800b290>

1000b390 <_malloc_r>:
1000b390:	defff504 	addi	sp,sp,-44
1000b394:	dc800315 	stw	r18,12(sp)
1000b398:	dfc00a15 	stw	ra,40(sp)
1000b39c:	df000915 	stw	fp,36(sp)
1000b3a0:	ddc00815 	stw	r23,32(sp)
1000b3a4:	dd800715 	stw	r22,28(sp)
1000b3a8:	dd400615 	stw	r21,24(sp)
1000b3ac:	dd000515 	stw	r20,20(sp)
1000b3b0:	dcc00415 	stw	r19,16(sp)
1000b3b4:	dc400215 	stw	r17,8(sp)
1000b3b8:	dc000115 	stw	r16,4(sp)
1000b3bc:	288002c4 	addi	r2,r5,11
1000b3c0:	00c00584 	movi	r3,22
1000b3c4:	2025883a 	mov	r18,r4
1000b3c8:	18802a2e 	bgeu	r3,r2,1000b474 <_malloc_r+0xe4>
1000b3cc:	047ffe04 	movi	r17,-8
1000b3d0:	1462703a 	and	r17,r2,r17
1000b3d4:	88009e16 	blt	r17,zero,1000b650 <_malloc_r+0x2c0>
1000b3d8:	89409d36 	bltu	r17,r5,1000b650 <_malloc_r+0x2c0>
1000b3dc:	00101b80 	call	100101b8 <__malloc_lock>
1000b3e0:	00807dc4 	movi	r2,503
1000b3e4:	14402736 	bltu	r2,r17,1000b484 <_malloc_r+0xf4>
1000b3e8:	8806d0fa 	srli	r3,r17,3
1000b3ec:	04c40074 	movhi	r19,4097
1000b3f0:	9ccadd04 	addi	r19,r19,11124
1000b3f4:	18c5883a 	add	r2,r3,r3
1000b3f8:	1085883a 	add	r2,r2,r2
1000b3fc:	1085883a 	add	r2,r2,r2
1000b400:	9885883a 	add	r2,r19,r2
1000b404:	14000317 	ldw	r16,12(r2)
1000b408:	80814a26 	beq	r16,r2,1000b934 <_malloc_r+0x5a4>
1000b40c:	80c00117 	ldw	r3,4(r16)
1000b410:	81000317 	ldw	r4,12(r16)
1000b414:	00bfff04 	movi	r2,-4
1000b418:	1884703a 	and	r2,r3,r2
1000b41c:	81400217 	ldw	r5,8(r16)
1000b420:	8085883a 	add	r2,r16,r2
1000b424:	10c00117 	ldw	r3,4(r2)
1000b428:	29000315 	stw	r4,12(r5)
1000b42c:	21400215 	stw	r5,8(r4)
1000b430:	18c00054 	ori	r3,r3,1
1000b434:	10c00115 	stw	r3,4(r2)
1000b438:	9009883a 	mov	r4,r18
1000b43c:	00101d80 	call	100101d8 <__malloc_unlock>
1000b440:	80800204 	addi	r2,r16,8
1000b444:	dfc00a17 	ldw	ra,40(sp)
1000b448:	df000917 	ldw	fp,36(sp)
1000b44c:	ddc00817 	ldw	r23,32(sp)
1000b450:	dd800717 	ldw	r22,28(sp)
1000b454:	dd400617 	ldw	r21,24(sp)
1000b458:	dd000517 	ldw	r20,20(sp)
1000b45c:	dcc00417 	ldw	r19,16(sp)
1000b460:	dc800317 	ldw	r18,12(sp)
1000b464:	dc400217 	ldw	r17,8(sp)
1000b468:	dc000117 	ldw	r16,4(sp)
1000b46c:	dec00b04 	addi	sp,sp,44
1000b470:	f800283a 	ret
1000b474:	04400404 	movi	r17,16
1000b478:	89407536 	bltu	r17,r5,1000b650 <_malloc_r+0x2c0>
1000b47c:	00101b80 	call	100101b8 <__malloc_lock>
1000b480:	003fd906 	br	1000b3e8 <__alt_data_end+0xf800b3e8>
1000b484:	8806d27a 	srli	r3,r17,9
1000b488:	18007526 	beq	r3,zero,1000b660 <_malloc_r+0x2d0>
1000b48c:	00800104 	movi	r2,4
1000b490:	10c0ef36 	bltu	r2,r3,1000b850 <_malloc_r+0x4c0>
1000b494:	8806d1ba 	srli	r3,r17,6
1000b498:	19c00e04 	addi	r7,r3,56
1000b49c:	39cb883a 	add	r5,r7,r7
1000b4a0:	04c40074 	movhi	r19,4097
1000b4a4:	294b883a 	add	r5,r5,r5
1000b4a8:	9ccadd04 	addi	r19,r19,11124
1000b4ac:	294b883a 	add	r5,r5,r5
1000b4b0:	994b883a 	add	r5,r19,r5
1000b4b4:	2c000317 	ldw	r16,12(r5)
1000b4b8:	2c000e26 	beq	r5,r16,1000b4f4 <_malloc_r+0x164>
1000b4bc:	80800117 	ldw	r2,4(r16)
1000b4c0:	01bfff04 	movi	r6,-4
1000b4c4:	010003c4 	movi	r4,15
1000b4c8:	1184703a 	and	r2,r2,r6
1000b4cc:	1447c83a 	sub	r3,r2,r17
1000b4d0:	20c00716 	blt	r4,r3,1000b4f0 <_malloc_r+0x160>
1000b4d4:	1800650e 	bge	r3,zero,1000b66c <_malloc_r+0x2dc>
1000b4d8:	84000317 	ldw	r16,12(r16)
1000b4dc:	2c000526 	beq	r5,r16,1000b4f4 <_malloc_r+0x164>
1000b4e0:	80800117 	ldw	r2,4(r16)
1000b4e4:	1184703a 	and	r2,r2,r6
1000b4e8:	1447c83a 	sub	r3,r2,r17
1000b4ec:	20fff90e 	bge	r4,r3,1000b4d4 <__alt_data_end+0xf800b4d4>
1000b4f0:	39ffffc4 	addi	r7,r7,-1
1000b4f4:	38c00044 	addi	r3,r7,1
1000b4f8:	01840074 	movhi	r6,4097
1000b4fc:	9c000417 	ldw	r16,16(r19)
1000b500:	318add04 	addi	r6,r6,11124
1000b504:	32400204 	addi	r9,r6,8
1000b508:	82410326 	beq	r16,r9,1000b918 <_malloc_r+0x588>
1000b50c:	81000117 	ldw	r4,4(r16)
1000b510:	00bfff04 	movi	r2,-4
1000b514:	208e703a 	and	r7,r4,r2
1000b518:	3c45c83a 	sub	r2,r7,r17
1000b51c:	010003c4 	movi	r4,15
1000b520:	2080ee16 	blt	r4,r2,1000b8dc <_malloc_r+0x54c>
1000b524:	32400515 	stw	r9,20(r6)
1000b528:	32400415 	stw	r9,16(r6)
1000b52c:	1000510e 	bge	r2,zero,1000b674 <_malloc_r+0x2e4>
1000b530:	00807fc4 	movi	r2,511
1000b534:	11c0ce36 	bltu	r2,r7,1000b870 <_malloc_r+0x4e0>
1000b538:	3808d0fa 	srli	r4,r7,3
1000b53c:	01c00044 	movi	r7,1
1000b540:	30800117 	ldw	r2,4(r6)
1000b544:	210b883a 	add	r5,r4,r4
1000b548:	294b883a 	add	r5,r5,r5
1000b54c:	2009d0ba 	srai	r4,r4,2
1000b550:	294b883a 	add	r5,r5,r5
1000b554:	298b883a 	add	r5,r5,r6
1000b558:	2a000217 	ldw	r8,8(r5)
1000b55c:	3908983a 	sll	r4,r7,r4
1000b560:	81400315 	stw	r5,12(r16)
1000b564:	82000215 	stw	r8,8(r16)
1000b568:	2088b03a 	or	r4,r4,r2
1000b56c:	2c000215 	stw	r16,8(r5)
1000b570:	31000115 	stw	r4,4(r6)
1000b574:	44000315 	stw	r16,12(r8)
1000b578:	1805d0ba 	srai	r2,r3,2
1000b57c:	01400044 	movi	r5,1
1000b580:	288a983a 	sll	r5,r5,r2
1000b584:	21404336 	bltu	r4,r5,1000b694 <_malloc_r+0x304>
1000b588:	2144703a 	and	r2,r4,r5
1000b58c:	10000a1e 	bne	r2,zero,1000b5b8 <_malloc_r+0x228>
1000b590:	00bfff04 	movi	r2,-4
1000b594:	294b883a 	add	r5,r5,r5
1000b598:	1886703a 	and	r3,r3,r2
1000b59c:	2144703a 	and	r2,r4,r5
1000b5a0:	18c00104 	addi	r3,r3,4
1000b5a4:	1000041e 	bne	r2,zero,1000b5b8 <_malloc_r+0x228>
1000b5a8:	294b883a 	add	r5,r5,r5
1000b5ac:	2144703a 	and	r2,r4,r5
1000b5b0:	18c00104 	addi	r3,r3,4
1000b5b4:	103ffc26 	beq	r2,zero,1000b5a8 <__alt_data_end+0xf800b5a8>
1000b5b8:	023fff04 	movi	r8,-4
1000b5bc:	01c003c4 	movi	r7,15
1000b5c0:	18c5883a 	add	r2,r3,r3
1000b5c4:	1085883a 	add	r2,r2,r2
1000b5c8:	1085883a 	add	r2,r2,r2
1000b5cc:	9895883a 	add	r10,r19,r2
1000b5d0:	52c00304 	addi	r11,r10,12
1000b5d4:	1819883a 	mov	r12,r3
1000b5d8:	5c000017 	ldw	r16,0(r11)
1000b5dc:	59bffd04 	addi	r6,r11,-12
1000b5e0:	8180041e 	bne	r16,r6,1000b5f4 <_malloc_r+0x264>
1000b5e4:	0000ce06 	br	1000b920 <_malloc_r+0x590>
1000b5e8:	2000d70e 	bge	r4,zero,1000b948 <_malloc_r+0x5b8>
1000b5ec:	84000317 	ldw	r16,12(r16)
1000b5f0:	8180cb26 	beq	r16,r6,1000b920 <_malloc_r+0x590>
1000b5f4:	80800117 	ldw	r2,4(r16)
1000b5f8:	1204703a 	and	r2,r2,r8
1000b5fc:	1449c83a 	sub	r4,r2,r17
1000b600:	393ff90e 	bge	r7,r4,1000b5e8 <__alt_data_end+0xf800b5e8>
1000b604:	80800317 	ldw	r2,12(r16)
1000b608:	80c00217 	ldw	r3,8(r16)
1000b60c:	89400054 	ori	r5,r17,1
1000b610:	81400115 	stw	r5,4(r16)
1000b614:	18800315 	stw	r2,12(r3)
1000b618:	10c00215 	stw	r3,8(r2)
1000b61c:	8463883a 	add	r17,r16,r17
1000b620:	9c400515 	stw	r17,20(r19)
1000b624:	9c400415 	stw	r17,16(r19)
1000b628:	20800054 	ori	r2,r4,1
1000b62c:	88800115 	stw	r2,4(r17)
1000b630:	8a400315 	stw	r9,12(r17)
1000b634:	8a400215 	stw	r9,8(r17)
1000b638:	8923883a 	add	r17,r17,r4
1000b63c:	89000015 	stw	r4,0(r17)
1000b640:	9009883a 	mov	r4,r18
1000b644:	00101d80 	call	100101d8 <__malloc_unlock>
1000b648:	80800204 	addi	r2,r16,8
1000b64c:	003f7d06 	br	1000b444 <__alt_data_end+0xf800b444>
1000b650:	00800304 	movi	r2,12
1000b654:	90800015 	stw	r2,0(r18)
1000b658:	0005883a 	mov	r2,zero
1000b65c:	003f7906 	br	1000b444 <__alt_data_end+0xf800b444>
1000b660:	01401f84 	movi	r5,126
1000b664:	01c00fc4 	movi	r7,63
1000b668:	003f8d06 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000b66c:	81000317 	ldw	r4,12(r16)
1000b670:	003f6a06 	br	1000b41c <__alt_data_end+0xf800b41c>
1000b674:	81c5883a 	add	r2,r16,r7
1000b678:	10c00117 	ldw	r3,4(r2)
1000b67c:	9009883a 	mov	r4,r18
1000b680:	18c00054 	ori	r3,r3,1
1000b684:	10c00115 	stw	r3,4(r2)
1000b688:	00101d80 	call	100101d8 <__malloc_unlock>
1000b68c:	80800204 	addi	r2,r16,8
1000b690:	003f6c06 	br	1000b444 <__alt_data_end+0xf800b444>
1000b694:	9c000217 	ldw	r16,8(r19)
1000b698:	00bfff04 	movi	r2,-4
1000b69c:	85800117 	ldw	r22,4(r16)
1000b6a0:	b0ac703a 	and	r22,r22,r2
1000b6a4:	b4400336 	bltu	r22,r17,1000b6b4 <_malloc_r+0x324>
1000b6a8:	b445c83a 	sub	r2,r22,r17
1000b6ac:	00c003c4 	movi	r3,15
1000b6b0:	18805d16 	blt	r3,r2,1000b828 <_malloc_r+0x498>
1000b6b4:	05c40074 	movhi	r23,4097
1000b6b8:	00840074 	movhi	r2,4097
1000b6bc:	bdd06504 	addi	r23,r23,16788
1000b6c0:	10973a04 	addi	r2,r2,23784
1000b6c4:	15400017 	ldw	r21,0(r2)
1000b6c8:	b9000017 	ldw	r4,0(r23)
1000b6cc:	00ffffc4 	movi	r3,-1
1000b6d0:	858d883a 	add	r6,r16,r22
1000b6d4:	8d6b883a 	add	r21,r17,r21
1000b6d8:	20c0e426 	beq	r4,r3,1000ba6c <_malloc_r+0x6dc>
1000b6dc:	ad4403c4 	addi	r21,r21,4111
1000b6e0:	00fc0004 	movi	r3,-4096
1000b6e4:	a8ea703a 	and	r21,r21,r3
1000b6e8:	9009883a 	mov	r4,r18
1000b6ec:	a80b883a 	mov	r5,r21
1000b6f0:	d9800015 	stw	r6,0(sp)
1000b6f4:	000cec40 	call	1000cec4 <_sbrk_r>
1000b6f8:	00ffffc4 	movi	r3,-1
1000b6fc:	1029883a 	mov	r20,r2
1000b700:	d9800017 	ldw	r6,0(sp)
1000b704:	10c0a426 	beq	r2,r3,1000b998 <_malloc_r+0x608>
1000b708:	1180a236 	bltu	r2,r6,1000b994 <_malloc_r+0x604>
1000b70c:	07040074 	movhi	fp,4097
1000b710:	e7174304 	addi	fp,fp,23820
1000b714:	e0c00017 	ldw	r3,0(fp)
1000b718:	a8c7883a 	add	r3,r21,r3
1000b71c:	e0c00015 	stw	r3,0(fp)
1000b720:	3500da26 	beq	r6,r20,1000ba8c <_malloc_r+0x6fc>
1000b724:	b9000017 	ldw	r4,0(r23)
1000b728:	00bfffc4 	movi	r2,-1
1000b72c:	2080e426 	beq	r4,r2,1000bac0 <_malloc_r+0x730>
1000b730:	a185c83a 	sub	r2,r20,r6
1000b734:	1885883a 	add	r2,r3,r2
1000b738:	e0800015 	stw	r2,0(fp)
1000b73c:	a0c001cc 	andi	r3,r20,7
1000b740:	1800b526 	beq	r3,zero,1000ba18 <_malloc_r+0x688>
1000b744:	a0e9c83a 	sub	r20,r20,r3
1000b748:	00840204 	movi	r2,4104
1000b74c:	a5000204 	addi	r20,r20,8
1000b750:	10c7c83a 	sub	r3,r2,r3
1000b754:	a545883a 	add	r2,r20,r21
1000b758:	1083ffcc 	andi	r2,r2,4095
1000b75c:	18abc83a 	sub	r21,r3,r2
1000b760:	9009883a 	mov	r4,r18
1000b764:	a80b883a 	mov	r5,r21
1000b768:	000cec40 	call	1000cec4 <_sbrk_r>
1000b76c:	00ffffc4 	movi	r3,-1
1000b770:	10c0d026 	beq	r2,r3,1000bab4 <_malloc_r+0x724>
1000b774:	1507c83a 	sub	r3,r2,r20
1000b778:	a8c7883a 	add	r3,r21,r3
1000b77c:	18c00054 	ori	r3,r3,1
1000b780:	e0800017 	ldw	r2,0(fp)
1000b784:	9d000215 	stw	r20,8(r19)
1000b788:	a0c00115 	stw	r3,4(r20)
1000b78c:	a887883a 	add	r3,r21,r2
1000b790:	e0c00015 	stw	r3,0(fp)
1000b794:	84c00e26 	beq	r16,r19,1000b7d0 <_malloc_r+0x440>
1000b798:	018003c4 	movi	r6,15
1000b79c:	3580a02e 	bgeu	r6,r22,1000ba20 <_malloc_r+0x690>
1000b7a0:	81400117 	ldw	r5,4(r16)
1000b7a4:	013ffe04 	movi	r4,-8
1000b7a8:	b0bffd04 	addi	r2,r22,-12
1000b7ac:	1104703a 	and	r2,r2,r4
1000b7b0:	2900004c 	andi	r4,r5,1
1000b7b4:	1108b03a 	or	r4,r2,r4
1000b7b8:	81000115 	stw	r4,4(r16)
1000b7bc:	01400144 	movi	r5,5
1000b7c0:	8089883a 	add	r4,r16,r2
1000b7c4:	21400115 	stw	r5,4(r4)
1000b7c8:	21400215 	stw	r5,8(r4)
1000b7cc:	3080c036 	bltu	r6,r2,1000bad0 <_malloc_r+0x740>
1000b7d0:	00840074 	movhi	r2,4097
1000b7d4:	10973904 	addi	r2,r2,23780
1000b7d8:	11000017 	ldw	r4,0(r2)
1000b7dc:	20c0012e 	bgeu	r4,r3,1000b7e4 <_malloc_r+0x454>
1000b7e0:	10c00015 	stw	r3,0(r2)
1000b7e4:	00840074 	movhi	r2,4097
1000b7e8:	10973804 	addi	r2,r2,23776
1000b7ec:	11000017 	ldw	r4,0(r2)
1000b7f0:	9c000217 	ldw	r16,8(r19)
1000b7f4:	20c0012e 	bgeu	r4,r3,1000b7fc <_malloc_r+0x46c>
1000b7f8:	10c00015 	stw	r3,0(r2)
1000b7fc:	80c00117 	ldw	r3,4(r16)
1000b800:	00bfff04 	movi	r2,-4
1000b804:	1886703a 	and	r3,r3,r2
1000b808:	1c45c83a 	sub	r2,r3,r17
1000b80c:	1c400236 	bltu	r3,r17,1000b818 <_malloc_r+0x488>
1000b810:	00c003c4 	movi	r3,15
1000b814:	18800416 	blt	r3,r2,1000b828 <_malloc_r+0x498>
1000b818:	9009883a 	mov	r4,r18
1000b81c:	00101d80 	call	100101d8 <__malloc_unlock>
1000b820:	0005883a 	mov	r2,zero
1000b824:	003f0706 	br	1000b444 <__alt_data_end+0xf800b444>
1000b828:	88c00054 	ori	r3,r17,1
1000b82c:	80c00115 	stw	r3,4(r16)
1000b830:	8463883a 	add	r17,r16,r17
1000b834:	10800054 	ori	r2,r2,1
1000b838:	9c400215 	stw	r17,8(r19)
1000b83c:	88800115 	stw	r2,4(r17)
1000b840:	9009883a 	mov	r4,r18
1000b844:	00101d80 	call	100101d8 <__malloc_unlock>
1000b848:	80800204 	addi	r2,r16,8
1000b84c:	003efd06 	br	1000b444 <__alt_data_end+0xf800b444>
1000b850:	00800504 	movi	r2,20
1000b854:	10c0482e 	bgeu	r2,r3,1000b978 <_malloc_r+0x5e8>
1000b858:	00801504 	movi	r2,84
1000b85c:	10c06836 	bltu	r2,r3,1000ba00 <_malloc_r+0x670>
1000b860:	8806d33a 	srli	r3,r17,12
1000b864:	19c01b84 	addi	r7,r3,110
1000b868:	39cb883a 	add	r5,r7,r7
1000b86c:	003f0c06 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000b870:	3804d27a 	srli	r2,r7,9
1000b874:	01000104 	movi	r4,4
1000b878:	2080422e 	bgeu	r4,r2,1000b984 <_malloc_r+0x5f4>
1000b87c:	01000504 	movi	r4,20
1000b880:	20807c36 	bltu	r4,r2,1000ba74 <_malloc_r+0x6e4>
1000b884:	110016c4 	addi	r4,r2,91
1000b888:	210b883a 	add	r5,r4,r4
1000b88c:	294b883a 	add	r5,r5,r5
1000b890:	294b883a 	add	r5,r5,r5
1000b894:	994b883a 	add	r5,r19,r5
1000b898:	28800217 	ldw	r2,8(r5)
1000b89c:	02040074 	movhi	r8,4097
1000b8a0:	420add04 	addi	r8,r8,11124
1000b8a4:	11406326 	beq	r2,r5,1000ba34 <_malloc_r+0x6a4>
1000b8a8:	01bfff04 	movi	r6,-4
1000b8ac:	11000117 	ldw	r4,4(r2)
1000b8b0:	2188703a 	and	r4,r4,r6
1000b8b4:	3900022e 	bgeu	r7,r4,1000b8c0 <_malloc_r+0x530>
1000b8b8:	10800217 	ldw	r2,8(r2)
1000b8bc:	28bffb1e 	bne	r5,r2,1000b8ac <__alt_data_end+0xf800b8ac>
1000b8c0:	11800317 	ldw	r6,12(r2)
1000b8c4:	99000117 	ldw	r4,4(r19)
1000b8c8:	81800315 	stw	r6,12(r16)
1000b8cc:	80800215 	stw	r2,8(r16)
1000b8d0:	34000215 	stw	r16,8(r6)
1000b8d4:	14000315 	stw	r16,12(r2)
1000b8d8:	003f2706 	br	1000b578 <__alt_data_end+0xf800b578>
1000b8dc:	88c00054 	ori	r3,r17,1
1000b8e0:	80c00115 	stw	r3,4(r16)
1000b8e4:	8463883a 	add	r17,r16,r17
1000b8e8:	34400515 	stw	r17,20(r6)
1000b8ec:	34400415 	stw	r17,16(r6)
1000b8f0:	10c00054 	ori	r3,r2,1
1000b8f4:	8a400315 	stw	r9,12(r17)
1000b8f8:	8a400215 	stw	r9,8(r17)
1000b8fc:	88c00115 	stw	r3,4(r17)
1000b900:	88a3883a 	add	r17,r17,r2
1000b904:	88800015 	stw	r2,0(r17)
1000b908:	9009883a 	mov	r4,r18
1000b90c:	00101d80 	call	100101d8 <__malloc_unlock>
1000b910:	80800204 	addi	r2,r16,8
1000b914:	003ecb06 	br	1000b444 <__alt_data_end+0xf800b444>
1000b918:	31000117 	ldw	r4,4(r6)
1000b91c:	003f1606 	br	1000b578 <__alt_data_end+0xf800b578>
1000b920:	63000044 	addi	r12,r12,1
1000b924:	608000cc 	andi	r2,r12,3
1000b928:	5ac00204 	addi	r11,r11,8
1000b92c:	103f2a1e 	bne	r2,zero,1000b5d8 <__alt_data_end+0xf800b5d8>
1000b930:	00002106 	br	1000b9b8 <_malloc_r+0x628>
1000b934:	80800204 	addi	r2,r16,8
1000b938:	84000517 	ldw	r16,20(r16)
1000b93c:	143eb31e 	bne	r2,r16,1000b40c <__alt_data_end+0xf800b40c>
1000b940:	18c00084 	addi	r3,r3,2
1000b944:	003eec06 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b948:	8085883a 	add	r2,r16,r2
1000b94c:	10c00117 	ldw	r3,4(r2)
1000b950:	81000317 	ldw	r4,12(r16)
1000b954:	81400217 	ldw	r5,8(r16)
1000b958:	18c00054 	ori	r3,r3,1
1000b95c:	10c00115 	stw	r3,4(r2)
1000b960:	29000315 	stw	r4,12(r5)
1000b964:	21400215 	stw	r5,8(r4)
1000b968:	9009883a 	mov	r4,r18
1000b96c:	00101d80 	call	100101d8 <__malloc_unlock>
1000b970:	80800204 	addi	r2,r16,8
1000b974:	003eb306 	br	1000b444 <__alt_data_end+0xf800b444>
1000b978:	19c016c4 	addi	r7,r3,91
1000b97c:	39cb883a 	add	r5,r7,r7
1000b980:	003ec706 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000b984:	3804d1ba 	srli	r2,r7,6
1000b988:	11000e04 	addi	r4,r2,56
1000b98c:	210b883a 	add	r5,r4,r4
1000b990:	003fbe06 	br	1000b88c <__alt_data_end+0xf800b88c>
1000b994:	84ff5d26 	beq	r16,r19,1000b70c <__alt_data_end+0xf800b70c>
1000b998:	9c000217 	ldw	r16,8(r19)
1000b99c:	00bfff04 	movi	r2,-4
1000b9a0:	80c00117 	ldw	r3,4(r16)
1000b9a4:	1886703a 	and	r3,r3,r2
1000b9a8:	003f9706 	br	1000b808 <__alt_data_end+0xf800b808>
1000b9ac:	52800017 	ldw	r10,0(r10)
1000b9b0:	18ffffc4 	addi	r3,r3,-1
1000b9b4:	50805c1e 	bne	r10,r2,1000bb28 <_malloc_r+0x798>
1000b9b8:	190000cc 	andi	r4,r3,3
1000b9bc:	50bffe04 	addi	r2,r10,-8
1000b9c0:	203ffa1e 	bne	r4,zero,1000b9ac <__alt_data_end+0xf800b9ac>
1000b9c4:	98800117 	ldw	r2,4(r19)
1000b9c8:	0146303a 	nor	r3,zero,r5
1000b9cc:	1884703a 	and	r2,r3,r2
1000b9d0:	98800115 	stw	r2,4(r19)
1000b9d4:	294b883a 	add	r5,r5,r5
1000b9d8:	117f2e36 	bltu	r2,r5,1000b694 <__alt_data_end+0xf800b694>
1000b9dc:	283f2d26 	beq	r5,zero,1000b694 <__alt_data_end+0xf800b694>
1000b9e0:	1146703a 	and	r3,r2,r5
1000b9e4:	1800521e 	bne	r3,zero,1000bb30 <_malloc_r+0x7a0>
1000b9e8:	6007883a 	mov	r3,r12
1000b9ec:	294b883a 	add	r5,r5,r5
1000b9f0:	1148703a 	and	r4,r2,r5
1000b9f4:	18c00104 	addi	r3,r3,4
1000b9f8:	203ffc26 	beq	r4,zero,1000b9ec <__alt_data_end+0xf800b9ec>
1000b9fc:	003ef006 	br	1000b5c0 <__alt_data_end+0xf800b5c0>
1000ba00:	00805504 	movi	r2,340
1000ba04:	10c01336 	bltu	r2,r3,1000ba54 <_malloc_r+0x6c4>
1000ba08:	8806d3fa 	srli	r3,r17,15
1000ba0c:	19c01dc4 	addi	r7,r3,119
1000ba10:	39cb883a 	add	r5,r7,r7
1000ba14:	003ea206 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000ba18:	00c40004 	movi	r3,4096
1000ba1c:	003f4d06 	br	1000b754 <__alt_data_end+0xf800b754>
1000ba20:	00800044 	movi	r2,1
1000ba24:	a0800115 	stw	r2,4(r20)
1000ba28:	a021883a 	mov	r16,r20
1000ba2c:	0007883a 	mov	r3,zero
1000ba30:	003f7506 	br	1000b808 <__alt_data_end+0xf800b808>
1000ba34:	200bd0ba 	srai	r5,r4,2
1000ba38:	01800044 	movi	r6,1
1000ba3c:	41000117 	ldw	r4,4(r8)
1000ba40:	314a983a 	sll	r5,r6,r5
1000ba44:	100d883a 	mov	r6,r2
1000ba48:	2908b03a 	or	r4,r5,r4
1000ba4c:	41000115 	stw	r4,4(r8)
1000ba50:	003f9d06 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000ba54:	00815504 	movi	r2,1364
1000ba58:	10c01336 	bltu	r2,r3,1000baa8 <_malloc_r+0x718>
1000ba5c:	8806d4ba 	srli	r3,r17,18
1000ba60:	19c01f04 	addi	r7,r3,124
1000ba64:	39cb883a 	add	r5,r7,r7
1000ba68:	003e8d06 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000ba6c:	ad400404 	addi	r21,r21,16
1000ba70:	003f1d06 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000ba74:	01001504 	movi	r4,84
1000ba78:	20801c36 	bltu	r4,r2,1000baec <_malloc_r+0x75c>
1000ba7c:	3804d33a 	srli	r2,r7,12
1000ba80:	11001b84 	addi	r4,r2,110
1000ba84:	210b883a 	add	r5,r4,r4
1000ba88:	003f8006 	br	1000b88c <__alt_data_end+0xf800b88c>
1000ba8c:	3083ffcc 	andi	r2,r6,4095
1000ba90:	103f241e 	bne	r2,zero,1000b724 <__alt_data_end+0xf800b724>
1000ba94:	99000217 	ldw	r4,8(r19)
1000ba98:	ad85883a 	add	r2,r21,r22
1000ba9c:	10800054 	ori	r2,r2,1
1000baa0:	20800115 	stw	r2,4(r4)
1000baa4:	003f4a06 	br	1000b7d0 <__alt_data_end+0xf800b7d0>
1000baa8:	01403f04 	movi	r5,252
1000baac:	01c01f84 	movi	r7,126
1000bab0:	003e7b06 	br	1000b4a0 <__alt_data_end+0xf800b4a0>
1000bab4:	00c00044 	movi	r3,1
1000bab8:	002b883a 	mov	r21,zero
1000babc:	003f3006 	br	1000b780 <__alt_data_end+0xf800b780>
1000bac0:	00840074 	movhi	r2,4097
1000bac4:	10906504 	addi	r2,r2,16788
1000bac8:	15000015 	stw	r20,0(r2)
1000bacc:	003f1b06 	br	1000b73c <__alt_data_end+0xf800b73c>
1000bad0:	9009883a 	mov	r4,r18
1000bad4:	81400204 	addi	r5,r16,8
1000bad8:	000ac980 	call	1000ac98 <_free_r>
1000badc:	00840074 	movhi	r2,4097
1000bae0:	10974304 	addi	r2,r2,23820
1000bae4:	10c00017 	ldw	r3,0(r2)
1000bae8:	003f3906 	br	1000b7d0 <__alt_data_end+0xf800b7d0>
1000baec:	01005504 	movi	r4,340
1000baf0:	20800436 	bltu	r4,r2,1000bb04 <_malloc_r+0x774>
1000baf4:	3804d3fa 	srli	r2,r7,15
1000baf8:	11001dc4 	addi	r4,r2,119
1000bafc:	210b883a 	add	r5,r4,r4
1000bb00:	003f6206 	br	1000b88c <__alt_data_end+0xf800b88c>
1000bb04:	01015504 	movi	r4,1364
1000bb08:	20800436 	bltu	r4,r2,1000bb1c <_malloc_r+0x78c>
1000bb0c:	3804d4ba 	srli	r2,r7,18
1000bb10:	11001f04 	addi	r4,r2,124
1000bb14:	210b883a 	add	r5,r4,r4
1000bb18:	003f5c06 	br	1000b88c <__alt_data_end+0xf800b88c>
1000bb1c:	01403f04 	movi	r5,252
1000bb20:	01001f84 	movi	r4,126
1000bb24:	003f5906 	br	1000b88c <__alt_data_end+0xf800b88c>
1000bb28:	98800117 	ldw	r2,4(r19)
1000bb2c:	003fa906 	br	1000b9d4 <__alt_data_end+0xf800b9d4>
1000bb30:	6007883a 	mov	r3,r12
1000bb34:	003ea206 	br	1000b5c0 <__alt_data_end+0xf800b5c0>

1000bb38 <memchr>:
1000bb38:	208000cc 	andi	r2,r4,3
1000bb3c:	280f883a 	mov	r7,r5
1000bb40:	10003526 	beq	r2,zero,1000bc18 <memchr+0xe0>
1000bb44:	30bfffc4 	addi	r2,r6,-1
1000bb48:	30001b26 	beq	r6,zero,1000bbb8 <memchr+0x80>
1000bb4c:	21800003 	ldbu	r6,0(r4)
1000bb50:	28c03fcc 	andi	r3,r5,255
1000bb54:	30c01a26 	beq	r6,r3,1000bbc0 <memchr+0x88>
1000bb58:	180d883a 	mov	r6,r3
1000bb5c:	00000406 	br	1000bb70 <memchr+0x38>
1000bb60:	10001526 	beq	r2,zero,1000bbb8 <memchr+0x80>
1000bb64:	20c00003 	ldbu	r3,0(r4)
1000bb68:	10bfffc4 	addi	r2,r2,-1
1000bb6c:	19801426 	beq	r3,r6,1000bbc0 <memchr+0x88>
1000bb70:	21000044 	addi	r4,r4,1
1000bb74:	20c000cc 	andi	r3,r4,3
1000bb78:	183ff91e 	bne	r3,zero,1000bb60 <__alt_data_end+0xf800bb60>
1000bb7c:	024000c4 	movi	r9,3
1000bb80:	48801136 	bltu	r9,r2,1000bbc8 <memchr+0x90>
1000bb84:	10000c26 	beq	r2,zero,1000bbb8 <memchr+0x80>
1000bb88:	20c00003 	ldbu	r3,0(r4)
1000bb8c:	29403fcc 	andi	r5,r5,255
1000bb90:	19400b26 	beq	r3,r5,1000bbc0 <memchr+0x88>
1000bb94:	20c00044 	addi	r3,r4,1
1000bb98:	2085883a 	add	r2,r4,r2
1000bb9c:	39803fcc 	andi	r6,r7,255
1000bba0:	00000306 	br	1000bbb0 <memchr+0x78>
1000bba4:	18c00044 	addi	r3,r3,1
1000bba8:	197fffc3 	ldbu	r5,-1(r3)
1000bbac:	29800426 	beq	r5,r6,1000bbc0 <memchr+0x88>
1000bbb0:	1809883a 	mov	r4,r3
1000bbb4:	18bffb1e 	bne	r3,r2,1000bba4 <__alt_data_end+0xf800bba4>
1000bbb8:	0005883a 	mov	r2,zero
1000bbbc:	f800283a 	ret
1000bbc0:	2005883a 	mov	r2,r4
1000bbc4:	f800283a 	ret
1000bbc8:	28c03fcc 	andi	r3,r5,255
1000bbcc:	1810923a 	slli	r8,r3,8
1000bbd0:	02ffbff4 	movhi	r11,65279
1000bbd4:	02a02074 	movhi	r10,32897
1000bbd8:	40c6b03a 	or	r3,r8,r3
1000bbdc:	1810943a 	slli	r8,r3,16
1000bbe0:	5affbfc4 	addi	r11,r11,-257
1000bbe4:	52a02004 	addi	r10,r10,-32640
1000bbe8:	40d0b03a 	or	r8,r8,r3
1000bbec:	20c00017 	ldw	r3,0(r4)
1000bbf0:	40c6f03a 	xor	r3,r8,r3
1000bbf4:	1acd883a 	add	r6,r3,r11
1000bbf8:	00c6303a 	nor	r3,zero,r3
1000bbfc:	30c6703a 	and	r3,r6,r3
1000bc00:	1a86703a 	and	r3,r3,r10
1000bc04:	183fdf1e 	bne	r3,zero,1000bb84 <__alt_data_end+0xf800bb84>
1000bc08:	10bfff04 	addi	r2,r2,-4
1000bc0c:	21000104 	addi	r4,r4,4
1000bc10:	48bff636 	bltu	r9,r2,1000bbec <__alt_data_end+0xf800bbec>
1000bc14:	003fdb06 	br	1000bb84 <__alt_data_end+0xf800bb84>
1000bc18:	3005883a 	mov	r2,r6
1000bc1c:	003fd706 	br	1000bb7c <__alt_data_end+0xf800bb7c>

1000bc20 <memcpy>:
1000bc20:	deffff04 	addi	sp,sp,-4
1000bc24:	dc000015 	stw	r16,0(sp)
1000bc28:	00c003c4 	movi	r3,15
1000bc2c:	2005883a 	mov	r2,r4
1000bc30:	1980432e 	bgeu	r3,r6,1000bd40 <memcpy+0x120>
1000bc34:	2146b03a 	or	r3,r4,r5
1000bc38:	18c000cc 	andi	r3,r3,3
1000bc3c:	1800421e 	bne	r3,zero,1000bd48 <memcpy+0x128>
1000bc40:	343ffc04 	addi	r16,r6,-16
1000bc44:	8020d13a 	srli	r16,r16,4
1000bc48:	28c00104 	addi	r3,r5,4
1000bc4c:	23400104 	addi	r13,r4,4
1000bc50:	801e913a 	slli	r15,r16,4
1000bc54:	2b000204 	addi	r12,r5,8
1000bc58:	22c00204 	addi	r11,r4,8
1000bc5c:	7bc00504 	addi	r15,r15,20
1000bc60:	2a800304 	addi	r10,r5,12
1000bc64:	22400304 	addi	r9,r4,12
1000bc68:	2bdf883a 	add	r15,r5,r15
1000bc6c:	2811883a 	mov	r8,r5
1000bc70:	200f883a 	mov	r7,r4
1000bc74:	41000017 	ldw	r4,0(r8)
1000bc78:	39c00404 	addi	r7,r7,16
1000bc7c:	18c00404 	addi	r3,r3,16
1000bc80:	393ffc15 	stw	r4,-16(r7)
1000bc84:	1bbffc17 	ldw	r14,-16(r3)
1000bc88:	6b400404 	addi	r13,r13,16
1000bc8c:	5ac00404 	addi	r11,r11,16
1000bc90:	6bbffc15 	stw	r14,-16(r13)
1000bc94:	63800017 	ldw	r14,0(r12)
1000bc98:	4a400404 	addi	r9,r9,16
1000bc9c:	42000404 	addi	r8,r8,16
1000bca0:	5bbffc15 	stw	r14,-16(r11)
1000bca4:	53800017 	ldw	r14,0(r10)
1000bca8:	63000404 	addi	r12,r12,16
1000bcac:	52800404 	addi	r10,r10,16
1000bcb0:	4bbffc15 	stw	r14,-16(r9)
1000bcb4:	1bffef1e 	bne	r3,r15,1000bc74 <__alt_data_end+0xf800bc74>
1000bcb8:	81c00044 	addi	r7,r16,1
1000bcbc:	380e913a 	slli	r7,r7,4
1000bcc0:	310003cc 	andi	r4,r6,15
1000bcc4:	02c000c4 	movi	r11,3
1000bcc8:	11c7883a 	add	r3,r2,r7
1000bccc:	29cb883a 	add	r5,r5,r7
1000bcd0:	59001f2e 	bgeu	r11,r4,1000bd50 <memcpy+0x130>
1000bcd4:	1813883a 	mov	r9,r3
1000bcd8:	2811883a 	mov	r8,r5
1000bcdc:	200f883a 	mov	r7,r4
1000bce0:	42800017 	ldw	r10,0(r8)
1000bce4:	4a400104 	addi	r9,r9,4
1000bce8:	39ffff04 	addi	r7,r7,-4
1000bcec:	4abfff15 	stw	r10,-4(r9)
1000bcf0:	42000104 	addi	r8,r8,4
1000bcf4:	59fffa36 	bltu	r11,r7,1000bce0 <__alt_data_end+0xf800bce0>
1000bcf8:	213fff04 	addi	r4,r4,-4
1000bcfc:	2008d0ba 	srli	r4,r4,2
1000bd00:	318000cc 	andi	r6,r6,3
1000bd04:	21000044 	addi	r4,r4,1
1000bd08:	2109883a 	add	r4,r4,r4
1000bd0c:	2109883a 	add	r4,r4,r4
1000bd10:	1907883a 	add	r3,r3,r4
1000bd14:	290b883a 	add	r5,r5,r4
1000bd18:	30000626 	beq	r6,zero,1000bd34 <memcpy+0x114>
1000bd1c:	198d883a 	add	r6,r3,r6
1000bd20:	29c00003 	ldbu	r7,0(r5)
1000bd24:	18c00044 	addi	r3,r3,1
1000bd28:	29400044 	addi	r5,r5,1
1000bd2c:	19ffffc5 	stb	r7,-1(r3)
1000bd30:	19bffb1e 	bne	r3,r6,1000bd20 <__alt_data_end+0xf800bd20>
1000bd34:	dc000017 	ldw	r16,0(sp)
1000bd38:	dec00104 	addi	sp,sp,4
1000bd3c:	f800283a 	ret
1000bd40:	2007883a 	mov	r3,r4
1000bd44:	003ff406 	br	1000bd18 <__alt_data_end+0xf800bd18>
1000bd48:	2007883a 	mov	r3,r4
1000bd4c:	003ff306 	br	1000bd1c <__alt_data_end+0xf800bd1c>
1000bd50:	200d883a 	mov	r6,r4
1000bd54:	003ff006 	br	1000bd18 <__alt_data_end+0xf800bd18>

1000bd58 <memset>:
1000bd58:	20c000cc 	andi	r3,r4,3
1000bd5c:	2005883a 	mov	r2,r4
1000bd60:	18004326 	beq	r3,zero,1000be70 <memset+0x118>
1000bd64:	31ffffc4 	addi	r7,r6,-1
1000bd68:	30004026 	beq	r6,zero,1000be6c <memset+0x114>
1000bd6c:	2813883a 	mov	r9,r5
1000bd70:	200d883a 	mov	r6,r4
1000bd74:	2007883a 	mov	r3,r4
1000bd78:	00000406 	br	1000bd8c <memset+0x34>
1000bd7c:	3a3fffc4 	addi	r8,r7,-1
1000bd80:	31800044 	addi	r6,r6,1
1000bd84:	38003926 	beq	r7,zero,1000be6c <memset+0x114>
1000bd88:	400f883a 	mov	r7,r8
1000bd8c:	18c00044 	addi	r3,r3,1
1000bd90:	32400005 	stb	r9,0(r6)
1000bd94:	1a0000cc 	andi	r8,r3,3
1000bd98:	403ff81e 	bne	r8,zero,1000bd7c <__alt_data_end+0xf800bd7c>
1000bd9c:	010000c4 	movi	r4,3
1000bda0:	21c02d2e 	bgeu	r4,r7,1000be58 <memset+0x100>
1000bda4:	29803fcc 	andi	r6,r5,255
1000bda8:	3008923a 	slli	r4,r6,8
1000bdac:	218cb03a 	or	r6,r4,r6
1000bdb0:	3008943a 	slli	r4,r6,16
1000bdb4:	218cb03a 	or	r6,r4,r6
1000bdb8:	010003c4 	movi	r4,15
1000bdbc:	21c0182e 	bgeu	r4,r7,1000be20 <memset+0xc8>
1000bdc0:	3b3ffc04 	addi	r12,r7,-16
1000bdc4:	6018d13a 	srli	r12,r12,4
1000bdc8:	1a000104 	addi	r8,r3,4
1000bdcc:	1ac00204 	addi	r11,r3,8
1000bdd0:	6008913a 	slli	r4,r12,4
1000bdd4:	1a800304 	addi	r10,r3,12
1000bdd8:	1813883a 	mov	r9,r3
1000bddc:	21000504 	addi	r4,r4,20
1000bde0:	1909883a 	add	r4,r3,r4
1000bde4:	49800015 	stw	r6,0(r9)
1000bde8:	41800015 	stw	r6,0(r8)
1000bdec:	59800015 	stw	r6,0(r11)
1000bdf0:	51800015 	stw	r6,0(r10)
1000bdf4:	42000404 	addi	r8,r8,16
1000bdf8:	4a400404 	addi	r9,r9,16
1000bdfc:	5ac00404 	addi	r11,r11,16
1000be00:	52800404 	addi	r10,r10,16
1000be04:	413ff71e 	bne	r8,r4,1000bde4 <__alt_data_end+0xf800bde4>
1000be08:	63000044 	addi	r12,r12,1
1000be0c:	6018913a 	slli	r12,r12,4
1000be10:	39c003cc 	andi	r7,r7,15
1000be14:	010000c4 	movi	r4,3
1000be18:	1b07883a 	add	r3,r3,r12
1000be1c:	21c00e2e 	bgeu	r4,r7,1000be58 <memset+0x100>
1000be20:	1813883a 	mov	r9,r3
1000be24:	3811883a 	mov	r8,r7
1000be28:	010000c4 	movi	r4,3
1000be2c:	49800015 	stw	r6,0(r9)
1000be30:	423fff04 	addi	r8,r8,-4
1000be34:	4a400104 	addi	r9,r9,4
1000be38:	223ffc36 	bltu	r4,r8,1000be2c <__alt_data_end+0xf800be2c>
1000be3c:	393fff04 	addi	r4,r7,-4
1000be40:	2008d0ba 	srli	r4,r4,2
1000be44:	39c000cc 	andi	r7,r7,3
1000be48:	21000044 	addi	r4,r4,1
1000be4c:	2109883a 	add	r4,r4,r4
1000be50:	2109883a 	add	r4,r4,r4
1000be54:	1907883a 	add	r3,r3,r4
1000be58:	38000426 	beq	r7,zero,1000be6c <memset+0x114>
1000be5c:	19cf883a 	add	r7,r3,r7
1000be60:	19400005 	stb	r5,0(r3)
1000be64:	18c00044 	addi	r3,r3,1
1000be68:	19fffd1e 	bne	r3,r7,1000be60 <__alt_data_end+0xf800be60>
1000be6c:	f800283a 	ret
1000be70:	2007883a 	mov	r3,r4
1000be74:	300f883a 	mov	r7,r6
1000be78:	003fc806 	br	1000bd9c <__alt_data_end+0xf800bd9c>

1000be7c <_Balloc>:
1000be7c:	20801317 	ldw	r2,76(r4)
1000be80:	defffc04 	addi	sp,sp,-16
1000be84:	dc400115 	stw	r17,4(sp)
1000be88:	dc000015 	stw	r16,0(sp)
1000be8c:	dfc00315 	stw	ra,12(sp)
1000be90:	dc800215 	stw	r18,8(sp)
1000be94:	2023883a 	mov	r17,r4
1000be98:	2821883a 	mov	r16,r5
1000be9c:	10000f26 	beq	r2,zero,1000bedc <_Balloc+0x60>
1000bea0:	8407883a 	add	r3,r16,r16
1000bea4:	18c7883a 	add	r3,r3,r3
1000bea8:	10c7883a 	add	r3,r2,r3
1000beac:	18800017 	ldw	r2,0(r3)
1000beb0:	10001126 	beq	r2,zero,1000bef8 <_Balloc+0x7c>
1000beb4:	11000017 	ldw	r4,0(r2)
1000beb8:	19000015 	stw	r4,0(r3)
1000bebc:	10000415 	stw	zero,16(r2)
1000bec0:	10000315 	stw	zero,12(r2)
1000bec4:	dfc00317 	ldw	ra,12(sp)
1000bec8:	dc800217 	ldw	r18,8(sp)
1000becc:	dc400117 	ldw	r17,4(sp)
1000bed0:	dc000017 	ldw	r16,0(sp)
1000bed4:	dec00404 	addi	sp,sp,16
1000bed8:	f800283a 	ret
1000bedc:	01400104 	movi	r5,4
1000bee0:	01800844 	movi	r6,33
1000bee4:	000e79c0 	call	1000e79c <_calloc_r>
1000bee8:	88801315 	stw	r2,76(r17)
1000beec:	103fec1e 	bne	r2,zero,1000bea0 <__alt_data_end+0xf800bea0>
1000bef0:	0005883a 	mov	r2,zero
1000bef4:	003ff306 	br	1000bec4 <__alt_data_end+0xf800bec4>
1000bef8:	01400044 	movi	r5,1
1000befc:	2c24983a 	sll	r18,r5,r16
1000bf00:	8809883a 	mov	r4,r17
1000bf04:	91800144 	addi	r6,r18,5
1000bf08:	318d883a 	add	r6,r6,r6
1000bf0c:	318d883a 	add	r6,r6,r6
1000bf10:	000e79c0 	call	1000e79c <_calloc_r>
1000bf14:	103ff626 	beq	r2,zero,1000bef0 <__alt_data_end+0xf800bef0>
1000bf18:	14000115 	stw	r16,4(r2)
1000bf1c:	14800215 	stw	r18,8(r2)
1000bf20:	003fe606 	br	1000bebc <__alt_data_end+0xf800bebc>

1000bf24 <_Bfree>:
1000bf24:	28000826 	beq	r5,zero,1000bf48 <_Bfree+0x24>
1000bf28:	28c00117 	ldw	r3,4(r5)
1000bf2c:	20801317 	ldw	r2,76(r4)
1000bf30:	18c7883a 	add	r3,r3,r3
1000bf34:	18c7883a 	add	r3,r3,r3
1000bf38:	10c5883a 	add	r2,r2,r3
1000bf3c:	10c00017 	ldw	r3,0(r2)
1000bf40:	28c00015 	stw	r3,0(r5)
1000bf44:	11400015 	stw	r5,0(r2)
1000bf48:	f800283a 	ret

1000bf4c <__multadd>:
1000bf4c:	defff704 	addi	sp,sp,-36
1000bf50:	dc800215 	stw	r18,8(sp)
1000bf54:	2c800417 	ldw	r18,16(r5)
1000bf58:	ddc00715 	stw	r23,28(sp)
1000bf5c:	dd800615 	stw	r22,24(sp)
1000bf60:	dd000415 	stw	r20,16(sp)
1000bf64:	dcc00315 	stw	r19,12(sp)
1000bf68:	dc400115 	stw	r17,4(sp)
1000bf6c:	dc000015 	stw	r16,0(sp)
1000bf70:	dfc00815 	stw	ra,32(sp)
1000bf74:	dd400515 	stw	r21,20(sp)
1000bf78:	2827883a 	mov	r19,r5
1000bf7c:	2029883a 	mov	r20,r4
1000bf80:	3023883a 	mov	r17,r6
1000bf84:	3821883a 	mov	r16,r7
1000bf88:	2d800504 	addi	r22,r5,20
1000bf8c:	002f883a 	mov	r23,zero
1000bf90:	b5400017 	ldw	r21,0(r22)
1000bf94:	880b883a 	mov	r5,r17
1000bf98:	bdc00044 	addi	r23,r23,1
1000bf9c:	a93fffcc 	andi	r4,r21,65535
1000bfa0:	00040b00 	call	100040b0 <__mulsi3>
1000bfa4:	1421883a 	add	r16,r2,r16
1000bfa8:	a808d43a 	srli	r4,r21,16
1000bfac:	802ad43a 	srli	r21,r16,16
1000bfb0:	880b883a 	mov	r5,r17
1000bfb4:	00040b00 	call	100040b0 <__mulsi3>
1000bfb8:	a88f883a 	add	r7,r21,r2
1000bfbc:	3804943a 	slli	r2,r7,16
1000bfc0:	80ffffcc 	andi	r3,r16,65535
1000bfc4:	b5800104 	addi	r22,r22,4
1000bfc8:	10c7883a 	add	r3,r2,r3
1000bfcc:	b0ffff15 	stw	r3,-4(r22)
1000bfd0:	3820d43a 	srli	r16,r7,16
1000bfd4:	bcbfee16 	blt	r23,r18,1000bf90 <__alt_data_end+0xf800bf90>
1000bfd8:	80000926 	beq	r16,zero,1000c000 <__multadd+0xb4>
1000bfdc:	98800217 	ldw	r2,8(r19)
1000bfe0:	9080130e 	bge	r18,r2,1000c030 <__multadd+0xe4>
1000bfe4:	90800144 	addi	r2,r18,5
1000bfe8:	1085883a 	add	r2,r2,r2
1000bfec:	1085883a 	add	r2,r2,r2
1000bff0:	9885883a 	add	r2,r19,r2
1000bff4:	14000015 	stw	r16,0(r2)
1000bff8:	94800044 	addi	r18,r18,1
1000bffc:	9c800415 	stw	r18,16(r19)
1000c000:	9805883a 	mov	r2,r19
1000c004:	dfc00817 	ldw	ra,32(sp)
1000c008:	ddc00717 	ldw	r23,28(sp)
1000c00c:	dd800617 	ldw	r22,24(sp)
1000c010:	dd400517 	ldw	r21,20(sp)
1000c014:	dd000417 	ldw	r20,16(sp)
1000c018:	dcc00317 	ldw	r19,12(sp)
1000c01c:	dc800217 	ldw	r18,8(sp)
1000c020:	dc400117 	ldw	r17,4(sp)
1000c024:	dc000017 	ldw	r16,0(sp)
1000c028:	dec00904 	addi	sp,sp,36
1000c02c:	f800283a 	ret
1000c030:	99400117 	ldw	r5,4(r19)
1000c034:	a009883a 	mov	r4,r20
1000c038:	29400044 	addi	r5,r5,1
1000c03c:	000be7c0 	call	1000be7c <_Balloc>
1000c040:	99800417 	ldw	r6,16(r19)
1000c044:	99400304 	addi	r5,r19,12
1000c048:	11000304 	addi	r4,r2,12
1000c04c:	31800084 	addi	r6,r6,2
1000c050:	318d883a 	add	r6,r6,r6
1000c054:	318d883a 	add	r6,r6,r6
1000c058:	1023883a 	mov	r17,r2
1000c05c:	000bc200 	call	1000bc20 <memcpy>
1000c060:	99000117 	ldw	r4,4(r19)
1000c064:	a0c01317 	ldw	r3,76(r20)
1000c068:	2109883a 	add	r4,r4,r4
1000c06c:	2109883a 	add	r4,r4,r4
1000c070:	1907883a 	add	r3,r3,r4
1000c074:	18800017 	ldw	r2,0(r3)
1000c078:	98800015 	stw	r2,0(r19)
1000c07c:	1cc00015 	stw	r19,0(r3)
1000c080:	8827883a 	mov	r19,r17
1000c084:	003fd706 	br	1000bfe4 <__alt_data_end+0xf800bfe4>

1000c088 <__s2b>:
1000c088:	defff904 	addi	sp,sp,-28
1000c08c:	dc400115 	stw	r17,4(sp)
1000c090:	dc000015 	stw	r16,0(sp)
1000c094:	2023883a 	mov	r17,r4
1000c098:	2821883a 	mov	r16,r5
1000c09c:	39000204 	addi	r4,r7,8
1000c0a0:	01400244 	movi	r5,9
1000c0a4:	dcc00315 	stw	r19,12(sp)
1000c0a8:	dc800215 	stw	r18,8(sp)
1000c0ac:	dfc00615 	stw	ra,24(sp)
1000c0b0:	dd400515 	stw	r21,20(sp)
1000c0b4:	dd000415 	stw	r20,16(sp)
1000c0b8:	3825883a 	mov	r18,r7
1000c0bc:	3027883a 	mov	r19,r6
1000c0c0:	0003ff00 	call	10003ff0 <__divsi3>
1000c0c4:	00c00044 	movi	r3,1
1000c0c8:	000b883a 	mov	r5,zero
1000c0cc:	1880030e 	bge	r3,r2,1000c0dc <__s2b+0x54>
1000c0d0:	18c7883a 	add	r3,r3,r3
1000c0d4:	29400044 	addi	r5,r5,1
1000c0d8:	18bffd16 	blt	r3,r2,1000c0d0 <__alt_data_end+0xf800c0d0>
1000c0dc:	8809883a 	mov	r4,r17
1000c0e0:	000be7c0 	call	1000be7c <_Balloc>
1000c0e4:	d8c00717 	ldw	r3,28(sp)
1000c0e8:	10c00515 	stw	r3,20(r2)
1000c0ec:	00c00044 	movi	r3,1
1000c0f0:	10c00415 	stw	r3,16(r2)
1000c0f4:	00c00244 	movi	r3,9
1000c0f8:	1cc0210e 	bge	r3,r19,1000c180 <__s2b+0xf8>
1000c0fc:	80eb883a 	add	r21,r16,r3
1000c100:	a829883a 	mov	r20,r21
1000c104:	84e1883a 	add	r16,r16,r19
1000c108:	a1c00007 	ldb	r7,0(r20)
1000c10c:	8809883a 	mov	r4,r17
1000c110:	a5000044 	addi	r20,r20,1
1000c114:	100b883a 	mov	r5,r2
1000c118:	01800284 	movi	r6,10
1000c11c:	39fff404 	addi	r7,r7,-48
1000c120:	000bf4c0 	call	1000bf4c <__multadd>
1000c124:	a43ff81e 	bne	r20,r16,1000c108 <__alt_data_end+0xf800c108>
1000c128:	ace1883a 	add	r16,r21,r19
1000c12c:	843ffe04 	addi	r16,r16,-8
1000c130:	9c800a0e 	bge	r19,r18,1000c15c <__s2b+0xd4>
1000c134:	94e5c83a 	sub	r18,r18,r19
1000c138:	84a5883a 	add	r18,r16,r18
1000c13c:	81c00007 	ldb	r7,0(r16)
1000c140:	8809883a 	mov	r4,r17
1000c144:	84000044 	addi	r16,r16,1
1000c148:	100b883a 	mov	r5,r2
1000c14c:	01800284 	movi	r6,10
1000c150:	39fff404 	addi	r7,r7,-48
1000c154:	000bf4c0 	call	1000bf4c <__multadd>
1000c158:	84bff81e 	bne	r16,r18,1000c13c <__alt_data_end+0xf800c13c>
1000c15c:	dfc00617 	ldw	ra,24(sp)
1000c160:	dd400517 	ldw	r21,20(sp)
1000c164:	dd000417 	ldw	r20,16(sp)
1000c168:	dcc00317 	ldw	r19,12(sp)
1000c16c:	dc800217 	ldw	r18,8(sp)
1000c170:	dc400117 	ldw	r17,4(sp)
1000c174:	dc000017 	ldw	r16,0(sp)
1000c178:	dec00704 	addi	sp,sp,28
1000c17c:	f800283a 	ret
1000c180:	84000284 	addi	r16,r16,10
1000c184:	1827883a 	mov	r19,r3
1000c188:	003fe906 	br	1000c130 <__alt_data_end+0xf800c130>

1000c18c <__hi0bits>:
1000c18c:	20bfffec 	andhi	r2,r4,65535
1000c190:	1000141e 	bne	r2,zero,1000c1e4 <__hi0bits+0x58>
1000c194:	2008943a 	slli	r4,r4,16
1000c198:	00800404 	movi	r2,16
1000c19c:	20ffc02c 	andhi	r3,r4,65280
1000c1a0:	1800021e 	bne	r3,zero,1000c1ac <__hi0bits+0x20>
1000c1a4:	2008923a 	slli	r4,r4,8
1000c1a8:	10800204 	addi	r2,r2,8
1000c1ac:	20fc002c 	andhi	r3,r4,61440
1000c1b0:	1800021e 	bne	r3,zero,1000c1bc <__hi0bits+0x30>
1000c1b4:	2008913a 	slli	r4,r4,4
1000c1b8:	10800104 	addi	r2,r2,4
1000c1bc:	20f0002c 	andhi	r3,r4,49152
1000c1c0:	1800031e 	bne	r3,zero,1000c1d0 <__hi0bits+0x44>
1000c1c4:	2109883a 	add	r4,r4,r4
1000c1c8:	10800084 	addi	r2,r2,2
1000c1cc:	2109883a 	add	r4,r4,r4
1000c1d0:	20000316 	blt	r4,zero,1000c1e0 <__hi0bits+0x54>
1000c1d4:	2110002c 	andhi	r4,r4,16384
1000c1d8:	2000041e 	bne	r4,zero,1000c1ec <__hi0bits+0x60>
1000c1dc:	00800804 	movi	r2,32
1000c1e0:	f800283a 	ret
1000c1e4:	0005883a 	mov	r2,zero
1000c1e8:	003fec06 	br	1000c19c <__alt_data_end+0xf800c19c>
1000c1ec:	10800044 	addi	r2,r2,1
1000c1f0:	f800283a 	ret

1000c1f4 <__lo0bits>:
1000c1f4:	20c00017 	ldw	r3,0(r4)
1000c1f8:	188001cc 	andi	r2,r3,7
1000c1fc:	10000826 	beq	r2,zero,1000c220 <__lo0bits+0x2c>
1000c200:	1880004c 	andi	r2,r3,1
1000c204:	1000211e 	bne	r2,zero,1000c28c <__lo0bits+0x98>
1000c208:	1880008c 	andi	r2,r3,2
1000c20c:	1000211e 	bne	r2,zero,1000c294 <__lo0bits+0xa0>
1000c210:	1806d0ba 	srli	r3,r3,2
1000c214:	00800084 	movi	r2,2
1000c218:	20c00015 	stw	r3,0(r4)
1000c21c:	f800283a 	ret
1000c220:	18bfffcc 	andi	r2,r3,65535
1000c224:	10001326 	beq	r2,zero,1000c274 <__lo0bits+0x80>
1000c228:	0005883a 	mov	r2,zero
1000c22c:	19403fcc 	andi	r5,r3,255
1000c230:	2800021e 	bne	r5,zero,1000c23c <__lo0bits+0x48>
1000c234:	1806d23a 	srli	r3,r3,8
1000c238:	10800204 	addi	r2,r2,8
1000c23c:	194003cc 	andi	r5,r3,15
1000c240:	2800021e 	bne	r5,zero,1000c24c <__lo0bits+0x58>
1000c244:	1806d13a 	srli	r3,r3,4
1000c248:	10800104 	addi	r2,r2,4
1000c24c:	194000cc 	andi	r5,r3,3
1000c250:	2800021e 	bne	r5,zero,1000c25c <__lo0bits+0x68>
1000c254:	1806d0ba 	srli	r3,r3,2
1000c258:	10800084 	addi	r2,r2,2
1000c25c:	1940004c 	andi	r5,r3,1
1000c260:	2800081e 	bne	r5,zero,1000c284 <__lo0bits+0x90>
1000c264:	1806d07a 	srli	r3,r3,1
1000c268:	1800051e 	bne	r3,zero,1000c280 <__lo0bits+0x8c>
1000c26c:	00800804 	movi	r2,32
1000c270:	f800283a 	ret
1000c274:	1806d43a 	srli	r3,r3,16
1000c278:	00800404 	movi	r2,16
1000c27c:	003feb06 	br	1000c22c <__alt_data_end+0xf800c22c>
1000c280:	10800044 	addi	r2,r2,1
1000c284:	20c00015 	stw	r3,0(r4)
1000c288:	f800283a 	ret
1000c28c:	0005883a 	mov	r2,zero
1000c290:	f800283a 	ret
1000c294:	1806d07a 	srli	r3,r3,1
1000c298:	00800044 	movi	r2,1
1000c29c:	20c00015 	stw	r3,0(r4)
1000c2a0:	f800283a 	ret

1000c2a4 <__i2b>:
1000c2a4:	defffd04 	addi	sp,sp,-12
1000c2a8:	dc000015 	stw	r16,0(sp)
1000c2ac:	04000044 	movi	r16,1
1000c2b0:	dc400115 	stw	r17,4(sp)
1000c2b4:	2823883a 	mov	r17,r5
1000c2b8:	800b883a 	mov	r5,r16
1000c2bc:	dfc00215 	stw	ra,8(sp)
1000c2c0:	000be7c0 	call	1000be7c <_Balloc>
1000c2c4:	14400515 	stw	r17,20(r2)
1000c2c8:	14000415 	stw	r16,16(r2)
1000c2cc:	dfc00217 	ldw	ra,8(sp)
1000c2d0:	dc400117 	ldw	r17,4(sp)
1000c2d4:	dc000017 	ldw	r16,0(sp)
1000c2d8:	dec00304 	addi	sp,sp,12
1000c2dc:	f800283a 	ret

1000c2e0 <__multiply>:
1000c2e0:	deffef04 	addi	sp,sp,-68
1000c2e4:	dc400815 	stw	r17,32(sp)
1000c2e8:	dc000715 	stw	r16,28(sp)
1000c2ec:	2c400417 	ldw	r17,16(r5)
1000c2f0:	34000417 	ldw	r16,16(r6)
1000c2f4:	dd800d15 	stw	r22,52(sp)
1000c2f8:	dc800915 	stw	r18,36(sp)
1000c2fc:	dfc01015 	stw	ra,64(sp)
1000c300:	df000f15 	stw	fp,60(sp)
1000c304:	ddc00e15 	stw	r23,56(sp)
1000c308:	dd400c15 	stw	r21,48(sp)
1000c30c:	dd000b15 	stw	r20,44(sp)
1000c310:	dcc00a15 	stw	r19,40(sp)
1000c314:	2825883a 	mov	r18,r5
1000c318:	302d883a 	mov	r22,r6
1000c31c:	8c009116 	blt	r17,r16,1000c564 <__multiply+0x284>
1000c320:	8005883a 	mov	r2,r16
1000c324:	8821883a 	mov	r16,r17
1000c328:	1023883a 	mov	r17,r2
1000c32c:	90800217 	ldw	r2,8(r18)
1000c330:	8447883a 	add	r3,r16,r17
1000c334:	d8c00215 	stw	r3,8(sp)
1000c338:	91400117 	ldw	r5,4(r18)
1000c33c:	10c0010e 	bge	r2,r3,1000c344 <__multiply+0x64>
1000c340:	29400044 	addi	r5,r5,1
1000c344:	000be7c0 	call	1000be7c <_Balloc>
1000c348:	d8c00217 	ldw	r3,8(sp)
1000c34c:	d8800615 	stw	r2,24(sp)
1000c350:	18eb883a 	add	r21,r3,r3
1000c354:	ad6b883a 	add	r21,r21,r21
1000c358:	10c00504 	addi	r3,r2,20
1000c35c:	1d6b883a 	add	r21,r3,r21
1000c360:	d8c00115 	stw	r3,4(sp)
1000c364:	dd400315 	stw	r21,12(sp)
1000c368:	1805883a 	mov	r2,r3
1000c36c:	1d40042e 	bgeu	r3,r21,1000c380 <__multiply+0xa0>
1000c370:	d8c00317 	ldw	r3,12(sp)
1000c374:	10000015 	stw	zero,0(r2)
1000c378:	10800104 	addi	r2,r2,4
1000c37c:	10fffc36 	bltu	r2,r3,1000c370 <__alt_data_end+0xf800c370>
1000c380:	8c63883a 	add	r17,r17,r17
1000c384:	b5800504 	addi	r22,r22,20
1000c388:	8c63883a 	add	r17,r17,r17
1000c38c:	94800504 	addi	r18,r18,20
1000c390:	8421883a 	add	r16,r16,r16
1000c394:	b463883a 	add	r17,r22,r17
1000c398:	8421883a 	add	r16,r16,r16
1000c39c:	dd800015 	stw	r22,0(sp)
1000c3a0:	dc800415 	stw	r18,16(sp)
1000c3a4:	dc400515 	stw	r17,20(sp)
1000c3a8:	9429883a 	add	r20,r18,r16
1000c3ac:	b4404f2e 	bgeu	r22,r17,1000c4ec <__multiply+0x20c>
1000c3b0:	d8c00017 	ldw	r3,0(sp)
1000c3b4:	1c800017 	ldw	r18,0(r3)
1000c3b8:	943fffcc 	andi	r16,r18,65535
1000c3bc:	80001e26 	beq	r16,zero,1000c438 <__multiply+0x158>
1000c3c0:	dd800117 	ldw	r22,4(sp)
1000c3c4:	dd400417 	ldw	r21,16(sp)
1000c3c8:	0025883a 	mov	r18,zero
1000c3cc:	adc00017 	ldw	r23,0(r21)
1000c3d0:	b4c00017 	ldw	r19,0(r22)
1000c3d4:	800b883a 	mov	r5,r16
1000c3d8:	b93fffcc 	andi	r4,r23,65535
1000c3dc:	00040b00 	call	100040b0 <__mulsi3>
1000c3e0:	9c7fffcc 	andi	r17,r19,65535
1000c3e4:	8885883a 	add	r2,r17,r2
1000c3e8:	b808d43a 	srli	r4,r23,16
1000c3ec:	14a3883a 	add	r17,r2,r18
1000c3f0:	9826d43a 	srli	r19,r19,16
1000c3f4:	8824d43a 	srli	r18,r17,16
1000c3f8:	800b883a 	mov	r5,r16
1000c3fc:	00040b00 	call	100040b0 <__mulsi3>
1000c400:	9885883a 	add	r2,r19,r2
1000c404:	14a7883a 	add	r19,r2,r18
1000c408:	88ffffcc 	andi	r3,r17,65535
1000c40c:	9822943a 	slli	r17,r19,16
1000c410:	ad400104 	addi	r21,r21,4
1000c414:	b005883a 	mov	r2,r22
1000c418:	88c6b03a 	or	r3,r17,r3
1000c41c:	b0c00015 	stw	r3,0(r22)
1000c420:	9824d43a 	srli	r18,r19,16
1000c424:	b5800104 	addi	r22,r22,4
1000c428:	ad3fe836 	bltu	r21,r20,1000c3cc <__alt_data_end+0xf800c3cc>
1000c42c:	d8c00017 	ldw	r3,0(sp)
1000c430:	14800115 	stw	r18,4(r2)
1000c434:	1c800017 	ldw	r18,0(r3)
1000c438:	9024d43a 	srli	r18,r18,16
1000c43c:	90002226 	beq	r18,zero,1000c4c8 <__multiply+0x1e8>
1000c440:	d8c00117 	ldw	r3,4(sp)
1000c444:	dd800417 	ldw	r22,16(sp)
1000c448:	002f883a 	mov	r23,zero
1000c44c:	1f000017 	ldw	fp,0(r3)
1000c450:	1823883a 	mov	r17,r3
1000c454:	182b883a 	mov	r21,r3
1000c458:	e021883a 	mov	r16,fp
1000c45c:	00000106 	br	1000c464 <__multiply+0x184>
1000c460:	982b883a 	mov	r21,r19
1000c464:	b100000b 	ldhu	r4,0(r22)
1000c468:	8020d43a 	srli	r16,r16,16
1000c46c:	900b883a 	mov	r5,r18
1000c470:	00040b00 	call	100040b0 <__mulsi3>
1000c474:	1405883a 	add	r2,r2,r16
1000c478:	15ef883a 	add	r23,r2,r23
1000c47c:	b804943a 	slli	r2,r23,16
1000c480:	e0ffffcc 	andi	r3,fp,65535
1000c484:	8c400104 	addi	r17,r17,4
1000c488:	10c6b03a 	or	r3,r2,r3
1000c48c:	88ffff15 	stw	r3,-4(r17)
1000c490:	b5800104 	addi	r22,r22,4
1000c494:	b13fff17 	ldw	r4,-4(r22)
1000c498:	acc00104 	addi	r19,r21,4
1000c49c:	900b883a 	mov	r5,r18
1000c4a0:	2008d43a 	srli	r4,r4,16
1000c4a4:	9c000017 	ldw	r16,0(r19)
1000c4a8:	00040b00 	call	100040b0 <__mulsi3>
1000c4ac:	b806d43a 	srli	r3,r23,16
1000c4b0:	813fffcc 	andi	r4,r16,65535
1000c4b4:	1105883a 	add	r2,r2,r4
1000c4b8:	10f9883a 	add	fp,r2,r3
1000c4bc:	e02ed43a 	srli	r23,fp,16
1000c4c0:	b53fe736 	bltu	r22,r20,1000c460 <__alt_data_end+0xf800c460>
1000c4c4:	af000115 	stw	fp,4(r21)
1000c4c8:	d8c00017 	ldw	r3,0(sp)
1000c4cc:	d9000517 	ldw	r4,20(sp)
1000c4d0:	18c00104 	addi	r3,r3,4
1000c4d4:	d8c00015 	stw	r3,0(sp)
1000c4d8:	d8c00117 	ldw	r3,4(sp)
1000c4dc:	18c00104 	addi	r3,r3,4
1000c4e0:	d8c00115 	stw	r3,4(sp)
1000c4e4:	d8c00017 	ldw	r3,0(sp)
1000c4e8:	193fb136 	bltu	r3,r4,1000c3b0 <__alt_data_end+0xf800c3b0>
1000c4ec:	d8c00217 	ldw	r3,8(sp)
1000c4f0:	00c00c0e 	bge	zero,r3,1000c524 <__multiply+0x244>
1000c4f4:	d8c00317 	ldw	r3,12(sp)
1000c4f8:	18bfff17 	ldw	r2,-4(r3)
1000c4fc:	1d7fff04 	addi	r21,r3,-4
1000c500:	10000326 	beq	r2,zero,1000c510 <__multiply+0x230>
1000c504:	00000706 	br	1000c524 <__multiply+0x244>
1000c508:	a8800017 	ldw	r2,0(r21)
1000c50c:	1000051e 	bne	r2,zero,1000c524 <__multiply+0x244>
1000c510:	d8c00217 	ldw	r3,8(sp)
1000c514:	ad7fff04 	addi	r21,r21,-4
1000c518:	18ffffc4 	addi	r3,r3,-1
1000c51c:	d8c00215 	stw	r3,8(sp)
1000c520:	183ff91e 	bne	r3,zero,1000c508 <__alt_data_end+0xf800c508>
1000c524:	d8c00617 	ldw	r3,24(sp)
1000c528:	d9000217 	ldw	r4,8(sp)
1000c52c:	1805883a 	mov	r2,r3
1000c530:	19000415 	stw	r4,16(r3)
1000c534:	dfc01017 	ldw	ra,64(sp)
1000c538:	df000f17 	ldw	fp,60(sp)
1000c53c:	ddc00e17 	ldw	r23,56(sp)
1000c540:	dd800d17 	ldw	r22,52(sp)
1000c544:	dd400c17 	ldw	r21,48(sp)
1000c548:	dd000b17 	ldw	r20,44(sp)
1000c54c:	dcc00a17 	ldw	r19,40(sp)
1000c550:	dc800917 	ldw	r18,36(sp)
1000c554:	dc400817 	ldw	r17,32(sp)
1000c558:	dc000717 	ldw	r16,28(sp)
1000c55c:	dec01104 	addi	sp,sp,68
1000c560:	f800283a 	ret
1000c564:	3025883a 	mov	r18,r6
1000c568:	282d883a 	mov	r22,r5
1000c56c:	003f6f06 	br	1000c32c <__alt_data_end+0xf800c32c>

1000c570 <__pow5mult>:
1000c570:	defffa04 	addi	sp,sp,-24
1000c574:	dcc00315 	stw	r19,12(sp)
1000c578:	dc800215 	stw	r18,8(sp)
1000c57c:	dc000015 	stw	r16,0(sp)
1000c580:	dfc00515 	stw	ra,20(sp)
1000c584:	dd000415 	stw	r20,16(sp)
1000c588:	dc400115 	stw	r17,4(sp)
1000c58c:	308000cc 	andi	r2,r6,3
1000c590:	3021883a 	mov	r16,r6
1000c594:	2027883a 	mov	r19,r4
1000c598:	2825883a 	mov	r18,r5
1000c59c:	10002e1e 	bne	r2,zero,1000c658 <__pow5mult+0xe8>
1000c5a0:	8021d0ba 	srai	r16,r16,2
1000c5a4:	80001a26 	beq	r16,zero,1000c610 <__pow5mult+0xa0>
1000c5a8:	9c401217 	ldw	r17,72(r19)
1000c5ac:	8800061e 	bne	r17,zero,1000c5c8 <__pow5mult+0x58>
1000c5b0:	00003406 	br	1000c684 <__pow5mult+0x114>
1000c5b4:	8021d07a 	srai	r16,r16,1
1000c5b8:	80001526 	beq	r16,zero,1000c610 <__pow5mult+0xa0>
1000c5bc:	88800017 	ldw	r2,0(r17)
1000c5c0:	10001c26 	beq	r2,zero,1000c634 <__pow5mult+0xc4>
1000c5c4:	1023883a 	mov	r17,r2
1000c5c8:	80c0004c 	andi	r3,r16,1
1000c5cc:	183ff926 	beq	r3,zero,1000c5b4 <__alt_data_end+0xf800c5b4>
1000c5d0:	900b883a 	mov	r5,r18
1000c5d4:	880d883a 	mov	r6,r17
1000c5d8:	9809883a 	mov	r4,r19
1000c5dc:	000c2e00 	call	1000c2e0 <__multiply>
1000c5e0:	90001b26 	beq	r18,zero,1000c650 <__pow5mult+0xe0>
1000c5e4:	91c00117 	ldw	r7,4(r18)
1000c5e8:	98c01317 	ldw	r3,76(r19)
1000c5ec:	8021d07a 	srai	r16,r16,1
1000c5f0:	39cf883a 	add	r7,r7,r7
1000c5f4:	39cf883a 	add	r7,r7,r7
1000c5f8:	19c7883a 	add	r3,r3,r7
1000c5fc:	19000017 	ldw	r4,0(r3)
1000c600:	91000015 	stw	r4,0(r18)
1000c604:	1c800015 	stw	r18,0(r3)
1000c608:	1025883a 	mov	r18,r2
1000c60c:	803feb1e 	bne	r16,zero,1000c5bc <__alt_data_end+0xf800c5bc>
1000c610:	9005883a 	mov	r2,r18
1000c614:	dfc00517 	ldw	ra,20(sp)
1000c618:	dd000417 	ldw	r20,16(sp)
1000c61c:	dcc00317 	ldw	r19,12(sp)
1000c620:	dc800217 	ldw	r18,8(sp)
1000c624:	dc400117 	ldw	r17,4(sp)
1000c628:	dc000017 	ldw	r16,0(sp)
1000c62c:	dec00604 	addi	sp,sp,24
1000c630:	f800283a 	ret
1000c634:	9809883a 	mov	r4,r19
1000c638:	880b883a 	mov	r5,r17
1000c63c:	880d883a 	mov	r6,r17
1000c640:	000c2e00 	call	1000c2e0 <__multiply>
1000c644:	88800015 	stw	r2,0(r17)
1000c648:	10000015 	stw	zero,0(r2)
1000c64c:	003fdd06 	br	1000c5c4 <__alt_data_end+0xf800c5c4>
1000c650:	1025883a 	mov	r18,r2
1000c654:	003fd706 	br	1000c5b4 <__alt_data_end+0xf800c5b4>
1000c658:	10bfffc4 	addi	r2,r2,-1
1000c65c:	1085883a 	add	r2,r2,r2
1000c660:	00c40074 	movhi	r3,4097
1000c664:	18c95804 	addi	r3,r3,9568
1000c668:	1085883a 	add	r2,r2,r2
1000c66c:	1885883a 	add	r2,r3,r2
1000c670:	11800017 	ldw	r6,0(r2)
1000c674:	000f883a 	mov	r7,zero
1000c678:	000bf4c0 	call	1000bf4c <__multadd>
1000c67c:	1025883a 	mov	r18,r2
1000c680:	003fc706 	br	1000c5a0 <__alt_data_end+0xf800c5a0>
1000c684:	05000044 	movi	r20,1
1000c688:	9809883a 	mov	r4,r19
1000c68c:	a00b883a 	mov	r5,r20
1000c690:	000be7c0 	call	1000be7c <_Balloc>
1000c694:	1023883a 	mov	r17,r2
1000c698:	00809c44 	movi	r2,625
1000c69c:	88800515 	stw	r2,20(r17)
1000c6a0:	8d000415 	stw	r20,16(r17)
1000c6a4:	9c401215 	stw	r17,72(r19)
1000c6a8:	88000015 	stw	zero,0(r17)
1000c6ac:	003fc606 	br	1000c5c8 <__alt_data_end+0xf800c5c8>

1000c6b0 <__lshift>:
1000c6b0:	defff904 	addi	sp,sp,-28
1000c6b4:	dd000415 	stw	r20,16(sp)
1000c6b8:	dcc00315 	stw	r19,12(sp)
1000c6bc:	3029d17a 	srai	r20,r6,5
1000c6c0:	2cc00417 	ldw	r19,16(r5)
1000c6c4:	28800217 	ldw	r2,8(r5)
1000c6c8:	dd400515 	stw	r21,20(sp)
1000c6cc:	a4e7883a 	add	r19,r20,r19
1000c6d0:	dc800215 	stw	r18,8(sp)
1000c6d4:	dc400115 	stw	r17,4(sp)
1000c6d8:	dc000015 	stw	r16,0(sp)
1000c6dc:	dfc00615 	stw	ra,24(sp)
1000c6e0:	9c000044 	addi	r16,r19,1
1000c6e4:	2823883a 	mov	r17,r5
1000c6e8:	302b883a 	mov	r21,r6
1000c6ec:	2025883a 	mov	r18,r4
1000c6f0:	29400117 	ldw	r5,4(r5)
1000c6f4:	1400030e 	bge	r2,r16,1000c704 <__lshift+0x54>
1000c6f8:	1085883a 	add	r2,r2,r2
1000c6fc:	29400044 	addi	r5,r5,1
1000c700:	143ffd16 	blt	r2,r16,1000c6f8 <__alt_data_end+0xf800c6f8>
1000c704:	9009883a 	mov	r4,r18
1000c708:	000be7c0 	call	1000be7c <_Balloc>
1000c70c:	11c00504 	addi	r7,r2,20
1000c710:	0500090e 	bge	zero,r20,1000c738 <__lshift+0x88>
1000c714:	3811883a 	mov	r8,r7
1000c718:	0007883a 	mov	r3,zero
1000c71c:	40000015 	stw	zero,0(r8)
1000c720:	18c00044 	addi	r3,r3,1
1000c724:	42000104 	addi	r8,r8,4
1000c728:	1d3ffc1e 	bne	r3,r20,1000c71c <__alt_data_end+0xf800c71c>
1000c72c:	18c7883a 	add	r3,r3,r3
1000c730:	18c7883a 	add	r3,r3,r3
1000c734:	38cf883a 	add	r7,r7,r3
1000c738:	89000417 	ldw	r4,16(r17)
1000c73c:	88c00504 	addi	r3,r17,20
1000c740:	a98007cc 	andi	r6,r21,31
1000c744:	2109883a 	add	r4,r4,r4
1000c748:	2109883a 	add	r4,r4,r4
1000c74c:	1909883a 	add	r4,r3,r4
1000c750:	30002326 	beq	r6,zero,1000c7e0 <__lshift+0x130>
1000c754:	01400804 	movi	r5,32
1000c758:	298bc83a 	sub	r5,r5,r6
1000c75c:	0013883a 	mov	r9,zero
1000c760:	1a000017 	ldw	r8,0(r3)
1000c764:	3815883a 	mov	r10,r7
1000c768:	39c00104 	addi	r7,r7,4
1000c76c:	4190983a 	sll	r8,r8,r6
1000c770:	18c00104 	addi	r3,r3,4
1000c774:	4a10b03a 	or	r8,r9,r8
1000c778:	3a3fff15 	stw	r8,-4(r7)
1000c77c:	1a3fff17 	ldw	r8,-4(r3)
1000c780:	4152d83a 	srl	r9,r8,r5
1000c784:	193ff636 	bltu	r3,r4,1000c760 <__alt_data_end+0xf800c760>
1000c788:	52400115 	stw	r9,4(r10)
1000c78c:	48000126 	beq	r9,zero,1000c794 <__lshift+0xe4>
1000c790:	9c000084 	addi	r16,r19,2
1000c794:	89000117 	ldw	r4,4(r17)
1000c798:	90c01317 	ldw	r3,76(r18)
1000c79c:	843fffc4 	addi	r16,r16,-1
1000c7a0:	2109883a 	add	r4,r4,r4
1000c7a4:	2109883a 	add	r4,r4,r4
1000c7a8:	1907883a 	add	r3,r3,r4
1000c7ac:	19000017 	ldw	r4,0(r3)
1000c7b0:	14000415 	stw	r16,16(r2)
1000c7b4:	89000015 	stw	r4,0(r17)
1000c7b8:	1c400015 	stw	r17,0(r3)
1000c7bc:	dfc00617 	ldw	ra,24(sp)
1000c7c0:	dd400517 	ldw	r21,20(sp)
1000c7c4:	dd000417 	ldw	r20,16(sp)
1000c7c8:	dcc00317 	ldw	r19,12(sp)
1000c7cc:	dc800217 	ldw	r18,8(sp)
1000c7d0:	dc400117 	ldw	r17,4(sp)
1000c7d4:	dc000017 	ldw	r16,0(sp)
1000c7d8:	dec00704 	addi	sp,sp,28
1000c7dc:	f800283a 	ret
1000c7e0:	19400017 	ldw	r5,0(r3)
1000c7e4:	39c00104 	addi	r7,r7,4
1000c7e8:	18c00104 	addi	r3,r3,4
1000c7ec:	397fff15 	stw	r5,-4(r7)
1000c7f0:	193ffb36 	bltu	r3,r4,1000c7e0 <__alt_data_end+0xf800c7e0>
1000c7f4:	003fe706 	br	1000c794 <__alt_data_end+0xf800c794>

1000c7f8 <__mcmp>:
1000c7f8:	20800417 	ldw	r2,16(r4)
1000c7fc:	28c00417 	ldw	r3,16(r5)
1000c800:	10c5c83a 	sub	r2,r2,r3
1000c804:	1000111e 	bne	r2,zero,1000c84c <__mcmp+0x54>
1000c808:	18c7883a 	add	r3,r3,r3
1000c80c:	18c7883a 	add	r3,r3,r3
1000c810:	21000504 	addi	r4,r4,20
1000c814:	29400504 	addi	r5,r5,20
1000c818:	20c5883a 	add	r2,r4,r3
1000c81c:	28cb883a 	add	r5,r5,r3
1000c820:	00000106 	br	1000c828 <__mcmp+0x30>
1000c824:	20800a2e 	bgeu	r4,r2,1000c850 <__mcmp+0x58>
1000c828:	10bfff04 	addi	r2,r2,-4
1000c82c:	297fff04 	addi	r5,r5,-4
1000c830:	11800017 	ldw	r6,0(r2)
1000c834:	28c00017 	ldw	r3,0(r5)
1000c838:	30fffa26 	beq	r6,r3,1000c824 <__alt_data_end+0xf800c824>
1000c83c:	30c00236 	bltu	r6,r3,1000c848 <__mcmp+0x50>
1000c840:	00800044 	movi	r2,1
1000c844:	f800283a 	ret
1000c848:	00bfffc4 	movi	r2,-1
1000c84c:	f800283a 	ret
1000c850:	0005883a 	mov	r2,zero
1000c854:	f800283a 	ret

1000c858 <__mdiff>:
1000c858:	defffb04 	addi	sp,sp,-20
1000c85c:	dc000015 	stw	r16,0(sp)
1000c860:	2821883a 	mov	r16,r5
1000c864:	dcc00315 	stw	r19,12(sp)
1000c868:	300b883a 	mov	r5,r6
1000c86c:	2027883a 	mov	r19,r4
1000c870:	8009883a 	mov	r4,r16
1000c874:	dc800215 	stw	r18,8(sp)
1000c878:	dfc00415 	stw	ra,16(sp)
1000c87c:	dc400115 	stw	r17,4(sp)
1000c880:	3025883a 	mov	r18,r6
1000c884:	000c7f80 	call	1000c7f8 <__mcmp>
1000c888:	10005226 	beq	r2,zero,1000c9d4 <__mdiff+0x17c>
1000c88c:	10004c16 	blt	r2,zero,1000c9c0 <__mdiff+0x168>
1000c890:	0023883a 	mov	r17,zero
1000c894:	81400117 	ldw	r5,4(r16)
1000c898:	9809883a 	mov	r4,r19
1000c89c:	000be7c0 	call	1000be7c <_Balloc>
1000c8a0:	83400417 	ldw	r13,16(r16)
1000c8a4:	93800417 	ldw	r14,16(r18)
1000c8a8:	81000504 	addi	r4,r16,20
1000c8ac:	6b59883a 	add	r12,r13,r13
1000c8b0:	739d883a 	add	r14,r14,r14
1000c8b4:	6319883a 	add	r12,r12,r12
1000c8b8:	91800504 	addi	r6,r18,20
1000c8bc:	739d883a 	add	r14,r14,r14
1000c8c0:	14400315 	stw	r17,12(r2)
1000c8c4:	2319883a 	add	r12,r4,r12
1000c8c8:	339d883a 	add	r14,r6,r14
1000c8cc:	12400504 	addi	r9,r2,20
1000c8d0:	0007883a 	mov	r3,zero
1000c8d4:	22000017 	ldw	r8,0(r4)
1000c8d8:	32800017 	ldw	r10,0(r6)
1000c8dc:	4ac00104 	addi	r11,r9,4
1000c8e0:	41ffffcc 	andi	r7,r8,65535
1000c8e4:	38c7883a 	add	r3,r7,r3
1000c8e8:	51ffffcc 	andi	r7,r10,65535
1000c8ec:	19cfc83a 	sub	r7,r3,r7
1000c8f0:	4010d43a 	srli	r8,r8,16
1000c8f4:	5014d43a 	srli	r10,r10,16
1000c8f8:	3807d43a 	srai	r3,r7,16
1000c8fc:	39ffffcc 	andi	r7,r7,65535
1000c900:	4291c83a 	sub	r8,r8,r10
1000c904:	40c7883a 	add	r3,r8,r3
1000c908:	1810943a 	slli	r8,r3,16
1000c90c:	31800104 	addi	r6,r6,4
1000c910:	21000104 	addi	r4,r4,4
1000c914:	41ceb03a 	or	r7,r8,r7
1000c918:	49c00015 	stw	r7,0(r9)
1000c91c:	1807d43a 	srai	r3,r3,16
1000c920:	580b883a 	mov	r5,r11
1000c924:	5813883a 	mov	r9,r11
1000c928:	33bfea36 	bltu	r6,r14,1000c8d4 <__alt_data_end+0xf800c8d4>
1000c92c:	2011883a 	mov	r8,r4
1000c930:	2300152e 	bgeu	r4,r12,1000c988 <__mdiff+0x130>
1000c934:	21400017 	ldw	r5,0(r4)
1000c938:	4a400104 	addi	r9,r9,4
1000c93c:	21000104 	addi	r4,r4,4
1000c940:	29ffffcc 	andi	r7,r5,65535
1000c944:	38c7883a 	add	r3,r7,r3
1000c948:	280ad43a 	srli	r5,r5,16
1000c94c:	180dd43a 	srai	r6,r3,16
1000c950:	19ffffcc 	andi	r7,r3,65535
1000c954:	3147883a 	add	r3,r6,r5
1000c958:	180a943a 	slli	r5,r3,16
1000c95c:	1807d43a 	srai	r3,r3,16
1000c960:	29ceb03a 	or	r7,r5,r7
1000c964:	49ffff15 	stw	r7,-4(r9)
1000c968:	233ff236 	bltu	r4,r12,1000c934 <__alt_data_end+0xf800c934>
1000c96c:	0206303a 	nor	r3,zero,r8
1000c970:	1b07883a 	add	r3,r3,r12
1000c974:	1806d0ba 	srli	r3,r3,2
1000c978:	18c00044 	addi	r3,r3,1
1000c97c:	18c7883a 	add	r3,r3,r3
1000c980:	18c7883a 	add	r3,r3,r3
1000c984:	58cb883a 	add	r5,r11,r3
1000c988:	28ffff04 	addi	r3,r5,-4
1000c98c:	3800041e 	bne	r7,zero,1000c9a0 <__mdiff+0x148>
1000c990:	18ffff04 	addi	r3,r3,-4
1000c994:	19000017 	ldw	r4,0(r3)
1000c998:	6b7fffc4 	addi	r13,r13,-1
1000c99c:	203ffc26 	beq	r4,zero,1000c990 <__alt_data_end+0xf800c990>
1000c9a0:	13400415 	stw	r13,16(r2)
1000c9a4:	dfc00417 	ldw	ra,16(sp)
1000c9a8:	dcc00317 	ldw	r19,12(sp)
1000c9ac:	dc800217 	ldw	r18,8(sp)
1000c9b0:	dc400117 	ldw	r17,4(sp)
1000c9b4:	dc000017 	ldw	r16,0(sp)
1000c9b8:	dec00504 	addi	sp,sp,20
1000c9bc:	f800283a 	ret
1000c9c0:	8005883a 	mov	r2,r16
1000c9c4:	04400044 	movi	r17,1
1000c9c8:	9021883a 	mov	r16,r18
1000c9cc:	1025883a 	mov	r18,r2
1000c9d0:	003fb006 	br	1000c894 <__alt_data_end+0xf800c894>
1000c9d4:	9809883a 	mov	r4,r19
1000c9d8:	000b883a 	mov	r5,zero
1000c9dc:	000be7c0 	call	1000be7c <_Balloc>
1000c9e0:	00c00044 	movi	r3,1
1000c9e4:	10c00415 	stw	r3,16(r2)
1000c9e8:	10000515 	stw	zero,20(r2)
1000c9ec:	003fed06 	br	1000c9a4 <__alt_data_end+0xf800c9a4>

1000c9f0 <__ulp>:
1000c9f0:	295ffc2c 	andhi	r5,r5,32752
1000c9f4:	00bf3034 	movhi	r2,64704
1000c9f8:	2887883a 	add	r3,r5,r2
1000c9fc:	00c0020e 	bge	zero,r3,1000ca08 <__ulp+0x18>
1000ca00:	0005883a 	mov	r2,zero
1000ca04:	f800283a 	ret
1000ca08:	00c7c83a 	sub	r3,zero,r3
1000ca0c:	180bd53a 	srai	r5,r3,20
1000ca10:	008004c4 	movi	r2,19
1000ca14:	11400a0e 	bge	r2,r5,1000ca40 <__ulp+0x50>
1000ca18:	00800c84 	movi	r2,50
1000ca1c:	0007883a 	mov	r3,zero
1000ca20:	11400516 	blt	r2,r5,1000ca38 <__ulp+0x48>
1000ca24:	00800cc4 	movi	r2,51
1000ca28:	114bc83a 	sub	r5,r2,r5
1000ca2c:	00800044 	movi	r2,1
1000ca30:	1144983a 	sll	r2,r2,r5
1000ca34:	f800283a 	ret
1000ca38:	00800044 	movi	r2,1
1000ca3c:	f800283a 	ret
1000ca40:	00800234 	movhi	r2,8
1000ca44:	1147d83a 	sra	r3,r2,r5
1000ca48:	0005883a 	mov	r2,zero
1000ca4c:	f800283a 	ret

1000ca50 <__b2d>:
1000ca50:	defffa04 	addi	sp,sp,-24
1000ca54:	dc000015 	stw	r16,0(sp)
1000ca58:	24000417 	ldw	r16,16(r4)
1000ca5c:	dc400115 	stw	r17,4(sp)
1000ca60:	24400504 	addi	r17,r4,20
1000ca64:	8421883a 	add	r16,r16,r16
1000ca68:	8421883a 	add	r16,r16,r16
1000ca6c:	8c21883a 	add	r16,r17,r16
1000ca70:	dc800215 	stw	r18,8(sp)
1000ca74:	84bfff17 	ldw	r18,-4(r16)
1000ca78:	dd000415 	stw	r20,16(sp)
1000ca7c:	dcc00315 	stw	r19,12(sp)
1000ca80:	9009883a 	mov	r4,r18
1000ca84:	2829883a 	mov	r20,r5
1000ca88:	dfc00515 	stw	ra,20(sp)
1000ca8c:	000c18c0 	call	1000c18c <__hi0bits>
1000ca90:	00c00804 	movi	r3,32
1000ca94:	1887c83a 	sub	r3,r3,r2
1000ca98:	a0c00015 	stw	r3,0(r20)
1000ca9c:	00c00284 	movi	r3,10
1000caa0:	84ffff04 	addi	r19,r16,-4
1000caa4:	18801216 	blt	r3,r2,1000caf0 <__b2d+0xa0>
1000caa8:	014002c4 	movi	r5,11
1000caac:	2889c83a 	sub	r4,r5,r2
1000cab0:	9106d83a 	srl	r3,r18,r4
1000cab4:	18cffc34 	orhi	r3,r3,16368
1000cab8:	8cc0282e 	bgeu	r17,r19,1000cb5c <__b2d+0x10c>
1000cabc:	817ffe17 	ldw	r5,-8(r16)
1000cac0:	290ad83a 	srl	r5,r5,r4
1000cac4:	10800544 	addi	r2,r2,21
1000cac8:	9084983a 	sll	r2,r18,r2
1000cacc:	2884b03a 	or	r2,r5,r2
1000cad0:	dfc00517 	ldw	ra,20(sp)
1000cad4:	dd000417 	ldw	r20,16(sp)
1000cad8:	dcc00317 	ldw	r19,12(sp)
1000cadc:	dc800217 	ldw	r18,8(sp)
1000cae0:	dc400117 	ldw	r17,4(sp)
1000cae4:	dc000017 	ldw	r16,0(sp)
1000cae8:	dec00604 	addi	sp,sp,24
1000caec:	f800283a 	ret
1000caf0:	113ffd44 	addi	r4,r2,-11
1000caf4:	8cc00f2e 	bgeu	r17,r19,1000cb34 <__b2d+0xe4>
1000caf8:	81bffe04 	addi	r6,r16,-8
1000cafc:	817ffe17 	ldw	r5,-8(r16)
1000cb00:	20001326 	beq	r4,zero,1000cb50 <__b2d+0x100>
1000cb04:	00c00ac4 	movi	r3,43
1000cb08:	1885c83a 	sub	r2,r3,r2
1000cb0c:	2886d83a 	srl	r3,r5,r2
1000cb10:	9124983a 	sll	r18,r18,r4
1000cb14:	90e4b03a 	or	r18,r18,r3
1000cb18:	90cffc34 	orhi	r3,r18,16368
1000cb1c:	8980112e 	bgeu	r17,r6,1000cb64 <__b2d+0x114>
1000cb20:	81bffd17 	ldw	r6,-12(r16)
1000cb24:	308cd83a 	srl	r6,r6,r2
1000cb28:	2904983a 	sll	r2,r5,r4
1000cb2c:	1184b03a 	or	r2,r2,r6
1000cb30:	003fe706 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000cb34:	20000526 	beq	r4,zero,1000cb4c <__b2d+0xfc>
1000cb38:	9124983a 	sll	r18,r18,r4
1000cb3c:	000d883a 	mov	r6,zero
1000cb40:	000b883a 	mov	r5,zero
1000cb44:	90cffc34 	orhi	r3,r18,16368
1000cb48:	003ff706 	br	1000cb28 <__alt_data_end+0xf800cb28>
1000cb4c:	000b883a 	mov	r5,zero
1000cb50:	90cffc34 	orhi	r3,r18,16368
1000cb54:	2805883a 	mov	r2,r5
1000cb58:	003fdd06 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000cb5c:	000b883a 	mov	r5,zero
1000cb60:	003fd806 	br	1000cac4 <__alt_data_end+0xf800cac4>
1000cb64:	000d883a 	mov	r6,zero
1000cb68:	003fef06 	br	1000cb28 <__alt_data_end+0xf800cb28>

1000cb6c <__d2b>:
1000cb6c:	defff704 	addi	sp,sp,-36
1000cb70:	dc000215 	stw	r16,8(sp)
1000cb74:	3021883a 	mov	r16,r6
1000cb78:	dc400315 	stw	r17,12(sp)
1000cb7c:	8022907a 	slli	r17,r16,1
1000cb80:	dd400715 	stw	r21,28(sp)
1000cb84:	282b883a 	mov	r21,r5
1000cb88:	01400044 	movi	r5,1
1000cb8c:	dd000615 	stw	r20,24(sp)
1000cb90:	dcc00515 	stw	r19,20(sp)
1000cb94:	dc800415 	stw	r18,16(sp)
1000cb98:	dfc00815 	stw	ra,32(sp)
1000cb9c:	3829883a 	mov	r20,r7
1000cba0:	dc800917 	ldw	r18,36(sp)
1000cba4:	8822d57a 	srli	r17,r17,21
1000cba8:	000be7c0 	call	1000be7c <_Balloc>
1000cbac:	1027883a 	mov	r19,r2
1000cbb0:	00800434 	movhi	r2,16
1000cbb4:	10bfffc4 	addi	r2,r2,-1
1000cbb8:	808c703a 	and	r6,r16,r2
1000cbbc:	88000126 	beq	r17,zero,1000cbc4 <__d2b+0x58>
1000cbc0:	31800434 	orhi	r6,r6,16
1000cbc4:	d9800015 	stw	r6,0(sp)
1000cbc8:	a8001f26 	beq	r21,zero,1000cc48 <__d2b+0xdc>
1000cbcc:	d9000104 	addi	r4,sp,4
1000cbd0:	dd400115 	stw	r21,4(sp)
1000cbd4:	000c1f40 	call	1000c1f4 <__lo0bits>
1000cbd8:	d8c00017 	ldw	r3,0(sp)
1000cbdc:	1000291e 	bne	r2,zero,1000cc84 <__d2b+0x118>
1000cbe0:	d9000117 	ldw	r4,4(sp)
1000cbe4:	99000515 	stw	r4,20(r19)
1000cbe8:	1820c03a 	cmpne	r16,r3,zero
1000cbec:	84000044 	addi	r16,r16,1
1000cbf0:	98c00615 	stw	r3,24(r19)
1000cbf4:	9c000415 	stw	r16,16(r19)
1000cbf8:	88001b1e 	bne	r17,zero,1000cc68 <__d2b+0xfc>
1000cbfc:	800690ba 	slli	r3,r16,2
1000cc00:	10bef384 	addi	r2,r2,-1074
1000cc04:	a0800015 	stw	r2,0(r20)
1000cc08:	98c5883a 	add	r2,r19,r3
1000cc0c:	11000417 	ldw	r4,16(r2)
1000cc10:	8020917a 	slli	r16,r16,5
1000cc14:	000c18c0 	call	1000c18c <__hi0bits>
1000cc18:	8085c83a 	sub	r2,r16,r2
1000cc1c:	90800015 	stw	r2,0(r18)
1000cc20:	9805883a 	mov	r2,r19
1000cc24:	dfc00817 	ldw	ra,32(sp)
1000cc28:	dd400717 	ldw	r21,28(sp)
1000cc2c:	dd000617 	ldw	r20,24(sp)
1000cc30:	dcc00517 	ldw	r19,20(sp)
1000cc34:	dc800417 	ldw	r18,16(sp)
1000cc38:	dc400317 	ldw	r17,12(sp)
1000cc3c:	dc000217 	ldw	r16,8(sp)
1000cc40:	dec00904 	addi	sp,sp,36
1000cc44:	f800283a 	ret
1000cc48:	d809883a 	mov	r4,sp
1000cc4c:	000c1f40 	call	1000c1f4 <__lo0bits>
1000cc50:	d8c00017 	ldw	r3,0(sp)
1000cc54:	04000044 	movi	r16,1
1000cc58:	9c000415 	stw	r16,16(r19)
1000cc5c:	98c00515 	stw	r3,20(r19)
1000cc60:	10800804 	addi	r2,r2,32
1000cc64:	883fe526 	beq	r17,zero,1000cbfc <__alt_data_end+0xf800cbfc>
1000cc68:	8c7ef344 	addi	r17,r17,-1075
1000cc6c:	88a3883a 	add	r17,r17,r2
1000cc70:	00c00d44 	movi	r3,53
1000cc74:	a4400015 	stw	r17,0(r20)
1000cc78:	1885c83a 	sub	r2,r3,r2
1000cc7c:	90800015 	stw	r2,0(r18)
1000cc80:	003fe706 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000cc84:	01000804 	movi	r4,32
1000cc88:	2089c83a 	sub	r4,r4,r2
1000cc8c:	1908983a 	sll	r4,r3,r4
1000cc90:	d9400117 	ldw	r5,4(sp)
1000cc94:	1886d83a 	srl	r3,r3,r2
1000cc98:	2148b03a 	or	r4,r4,r5
1000cc9c:	99000515 	stw	r4,20(r19)
1000cca0:	d8c00015 	stw	r3,0(sp)
1000cca4:	003fd006 	br	1000cbe8 <__alt_data_end+0xf800cbe8>

1000cca8 <__ratio>:
1000cca8:	defff904 	addi	sp,sp,-28
1000ccac:	dc400315 	stw	r17,12(sp)
1000ccb0:	2823883a 	mov	r17,r5
1000ccb4:	d9400104 	addi	r5,sp,4
1000ccb8:	dfc00615 	stw	ra,24(sp)
1000ccbc:	dcc00515 	stw	r19,20(sp)
1000ccc0:	dc800415 	stw	r18,16(sp)
1000ccc4:	2027883a 	mov	r19,r4
1000ccc8:	dc000215 	stw	r16,8(sp)
1000cccc:	000ca500 	call	1000ca50 <__b2d>
1000ccd0:	8809883a 	mov	r4,r17
1000ccd4:	d80b883a 	mov	r5,sp
1000ccd8:	1025883a 	mov	r18,r2
1000ccdc:	1821883a 	mov	r16,r3
1000cce0:	000ca500 	call	1000ca50 <__b2d>
1000cce4:	8a400417 	ldw	r9,16(r17)
1000cce8:	9a000417 	ldw	r8,16(r19)
1000ccec:	100d883a 	mov	r6,r2
1000ccf0:	d8800017 	ldw	r2,0(sp)
1000ccf4:	4251c83a 	sub	r8,r8,r9
1000ccf8:	4012917a 	slli	r9,r8,5
1000ccfc:	da000117 	ldw	r8,4(sp)
1000cd00:	4091c83a 	sub	r8,r8,r2
1000cd04:	4251883a 	add	r8,r8,r9
1000cd08:	02000d0e 	bge	zero,r8,1000cd40 <__ratio+0x98>
1000cd0c:	4010953a 	slli	r8,r8,20
1000cd10:	4421883a 	add	r16,r8,r16
1000cd14:	9009883a 	mov	r4,r18
1000cd18:	800b883a 	mov	r5,r16
1000cd1c:	180f883a 	mov	r7,r3
1000cd20:	00049740 	call	10004974 <__divdf3>
1000cd24:	dfc00617 	ldw	ra,24(sp)
1000cd28:	dcc00517 	ldw	r19,20(sp)
1000cd2c:	dc800417 	ldw	r18,16(sp)
1000cd30:	dc400317 	ldw	r17,12(sp)
1000cd34:	dc000217 	ldw	r16,8(sp)
1000cd38:	dec00704 	addi	sp,sp,28
1000cd3c:	f800283a 	ret
1000cd40:	4010953a 	slli	r8,r8,20
1000cd44:	1a07c83a 	sub	r3,r3,r8
1000cd48:	003ff206 	br	1000cd14 <__alt_data_end+0xf800cd14>

1000cd4c <_mprec_log10>:
1000cd4c:	defffe04 	addi	sp,sp,-8
1000cd50:	dc000015 	stw	r16,0(sp)
1000cd54:	dfc00115 	stw	ra,4(sp)
1000cd58:	008005c4 	movi	r2,23
1000cd5c:	2021883a 	mov	r16,r4
1000cd60:	11000d0e 	bge	r2,r4,1000cd98 <_mprec_log10+0x4c>
1000cd64:	0005883a 	mov	r2,zero
1000cd68:	00cffc34 	movhi	r3,16368
1000cd6c:	843fffc4 	addi	r16,r16,-1
1000cd70:	1009883a 	mov	r4,r2
1000cd74:	180b883a 	mov	r5,r3
1000cd78:	000d883a 	mov	r6,zero
1000cd7c:	01d00934 	movhi	r7,16420
1000cd80:	00055380 	call	10005538 <__muldf3>
1000cd84:	803ff91e 	bne	r16,zero,1000cd6c <__alt_data_end+0xf800cd6c>
1000cd88:	dfc00117 	ldw	ra,4(sp)
1000cd8c:	dc000017 	ldw	r16,0(sp)
1000cd90:	dec00204 	addi	sp,sp,8
1000cd94:	f800283a 	ret
1000cd98:	202090fa 	slli	r16,r4,3
1000cd9c:	00840074 	movhi	r2,4097
1000cda0:	10896f04 	addi	r2,r2,9660
1000cda4:	1421883a 	add	r16,r2,r16
1000cda8:	80800017 	ldw	r2,0(r16)
1000cdac:	80c00117 	ldw	r3,4(r16)
1000cdb0:	dfc00117 	ldw	ra,4(sp)
1000cdb4:	dc000017 	ldw	r16,0(sp)
1000cdb8:	dec00204 	addi	sp,sp,8
1000cdbc:	f800283a 	ret

1000cdc0 <__copybits>:
1000cdc0:	297fffc4 	addi	r5,r5,-1
1000cdc4:	280fd17a 	srai	r7,r5,5
1000cdc8:	30c00417 	ldw	r3,16(r6)
1000cdcc:	30800504 	addi	r2,r6,20
1000cdd0:	39c00044 	addi	r7,r7,1
1000cdd4:	18c7883a 	add	r3,r3,r3
1000cdd8:	39cf883a 	add	r7,r7,r7
1000cddc:	18c7883a 	add	r3,r3,r3
1000cde0:	39cf883a 	add	r7,r7,r7
1000cde4:	10c7883a 	add	r3,r2,r3
1000cde8:	21cf883a 	add	r7,r4,r7
1000cdec:	10c00d2e 	bgeu	r2,r3,1000ce24 <__copybits+0x64>
1000cdf0:	200b883a 	mov	r5,r4
1000cdf4:	12000017 	ldw	r8,0(r2)
1000cdf8:	29400104 	addi	r5,r5,4
1000cdfc:	10800104 	addi	r2,r2,4
1000ce00:	2a3fff15 	stw	r8,-4(r5)
1000ce04:	10fffb36 	bltu	r2,r3,1000cdf4 <__alt_data_end+0xf800cdf4>
1000ce08:	1985c83a 	sub	r2,r3,r6
1000ce0c:	10bffac4 	addi	r2,r2,-21
1000ce10:	1004d0ba 	srli	r2,r2,2
1000ce14:	10800044 	addi	r2,r2,1
1000ce18:	1085883a 	add	r2,r2,r2
1000ce1c:	1085883a 	add	r2,r2,r2
1000ce20:	2089883a 	add	r4,r4,r2
1000ce24:	21c0032e 	bgeu	r4,r7,1000ce34 <__copybits+0x74>
1000ce28:	20000015 	stw	zero,0(r4)
1000ce2c:	21000104 	addi	r4,r4,4
1000ce30:	21fffd36 	bltu	r4,r7,1000ce28 <__alt_data_end+0xf800ce28>
1000ce34:	f800283a 	ret

1000ce38 <__any_on>:
1000ce38:	20c00417 	ldw	r3,16(r4)
1000ce3c:	2805d17a 	srai	r2,r5,5
1000ce40:	21000504 	addi	r4,r4,20
1000ce44:	18800d0e 	bge	r3,r2,1000ce7c <__any_on+0x44>
1000ce48:	18c7883a 	add	r3,r3,r3
1000ce4c:	18c7883a 	add	r3,r3,r3
1000ce50:	20c7883a 	add	r3,r4,r3
1000ce54:	20c0192e 	bgeu	r4,r3,1000cebc <__any_on+0x84>
1000ce58:	18bfff17 	ldw	r2,-4(r3)
1000ce5c:	18ffff04 	addi	r3,r3,-4
1000ce60:	1000041e 	bne	r2,zero,1000ce74 <__any_on+0x3c>
1000ce64:	20c0142e 	bgeu	r4,r3,1000ceb8 <__any_on+0x80>
1000ce68:	18ffff04 	addi	r3,r3,-4
1000ce6c:	19400017 	ldw	r5,0(r3)
1000ce70:	283ffc26 	beq	r5,zero,1000ce64 <__alt_data_end+0xf800ce64>
1000ce74:	00800044 	movi	r2,1
1000ce78:	f800283a 	ret
1000ce7c:	10c00a0e 	bge	r2,r3,1000cea8 <__any_on+0x70>
1000ce80:	1085883a 	add	r2,r2,r2
1000ce84:	1085883a 	add	r2,r2,r2
1000ce88:	294007cc 	andi	r5,r5,31
1000ce8c:	2087883a 	add	r3,r4,r2
1000ce90:	283ff026 	beq	r5,zero,1000ce54 <__alt_data_end+0xf800ce54>
1000ce94:	19800017 	ldw	r6,0(r3)
1000ce98:	3144d83a 	srl	r2,r6,r5
1000ce9c:	114a983a 	sll	r5,r2,r5
1000cea0:	29bff41e 	bne	r5,r6,1000ce74 <__alt_data_end+0xf800ce74>
1000cea4:	003feb06 	br	1000ce54 <__alt_data_end+0xf800ce54>
1000cea8:	1085883a 	add	r2,r2,r2
1000ceac:	1085883a 	add	r2,r2,r2
1000ceb0:	2087883a 	add	r3,r4,r2
1000ceb4:	003fe706 	br	1000ce54 <__alt_data_end+0xf800ce54>
1000ceb8:	f800283a 	ret
1000cebc:	0005883a 	mov	r2,zero
1000cec0:	f800283a 	ret

1000cec4 <_sbrk_r>:
1000cec4:	defffd04 	addi	sp,sp,-12
1000cec8:	dc000015 	stw	r16,0(sp)
1000cecc:	04040074 	movhi	r16,4097
1000ced0:	dc400115 	stw	r17,4(sp)
1000ced4:	84173b04 	addi	r16,r16,23788
1000ced8:	2023883a 	mov	r17,r4
1000cedc:	2809883a 	mov	r4,r5
1000cee0:	dfc00215 	stw	ra,8(sp)
1000cee4:	80000015 	stw	zero,0(r16)
1000cee8:	00103cc0 	call	100103cc <sbrk>
1000ceec:	00ffffc4 	movi	r3,-1
1000cef0:	10c00526 	beq	r2,r3,1000cf08 <_sbrk_r+0x44>
1000cef4:	dfc00217 	ldw	ra,8(sp)
1000cef8:	dc400117 	ldw	r17,4(sp)
1000cefc:	dc000017 	ldw	r16,0(sp)
1000cf00:	dec00304 	addi	sp,sp,12
1000cf04:	f800283a 	ret
1000cf08:	80c00017 	ldw	r3,0(r16)
1000cf0c:	183ff926 	beq	r3,zero,1000cef4 <__alt_data_end+0xf800cef4>
1000cf10:	88c00015 	stw	r3,0(r17)
1000cf14:	003ff706 	br	1000cef4 <__alt_data_end+0xf800cef4>

1000cf18 <__sread>:
1000cf18:	defffe04 	addi	sp,sp,-8
1000cf1c:	dc000015 	stw	r16,0(sp)
1000cf20:	2821883a 	mov	r16,r5
1000cf24:	2940038f 	ldh	r5,14(r5)
1000cf28:	dfc00115 	stw	ra,4(sp)
1000cf2c:	000f26c0 	call	1000f26c <_read_r>
1000cf30:	10000716 	blt	r2,zero,1000cf50 <__sread+0x38>
1000cf34:	80c01417 	ldw	r3,80(r16)
1000cf38:	1887883a 	add	r3,r3,r2
1000cf3c:	80c01415 	stw	r3,80(r16)
1000cf40:	dfc00117 	ldw	ra,4(sp)
1000cf44:	dc000017 	ldw	r16,0(sp)
1000cf48:	dec00204 	addi	sp,sp,8
1000cf4c:	f800283a 	ret
1000cf50:	80c0030b 	ldhu	r3,12(r16)
1000cf54:	18fbffcc 	andi	r3,r3,61439
1000cf58:	80c0030d 	sth	r3,12(r16)
1000cf5c:	dfc00117 	ldw	ra,4(sp)
1000cf60:	dc000017 	ldw	r16,0(sp)
1000cf64:	dec00204 	addi	sp,sp,8
1000cf68:	f800283a 	ret

1000cf6c <__seofread>:
1000cf6c:	0005883a 	mov	r2,zero
1000cf70:	f800283a 	ret

1000cf74 <__swrite>:
1000cf74:	2880030b 	ldhu	r2,12(r5)
1000cf78:	defffb04 	addi	sp,sp,-20
1000cf7c:	dcc00315 	stw	r19,12(sp)
1000cf80:	dc800215 	stw	r18,8(sp)
1000cf84:	dc400115 	stw	r17,4(sp)
1000cf88:	dc000015 	stw	r16,0(sp)
1000cf8c:	dfc00415 	stw	ra,16(sp)
1000cf90:	10c0400c 	andi	r3,r2,256
1000cf94:	2821883a 	mov	r16,r5
1000cf98:	2027883a 	mov	r19,r4
1000cf9c:	3025883a 	mov	r18,r6
1000cfa0:	3823883a 	mov	r17,r7
1000cfa4:	18000526 	beq	r3,zero,1000cfbc <__swrite+0x48>
1000cfa8:	2940038f 	ldh	r5,14(r5)
1000cfac:	000d883a 	mov	r6,zero
1000cfb0:	01c00084 	movi	r7,2
1000cfb4:	000f0b40 	call	1000f0b4 <_lseek_r>
1000cfb8:	8080030b 	ldhu	r2,12(r16)
1000cfbc:	8140038f 	ldh	r5,14(r16)
1000cfc0:	10bbffcc 	andi	r2,r2,61439
1000cfc4:	9809883a 	mov	r4,r19
1000cfc8:	900d883a 	mov	r6,r18
1000cfcc:	880f883a 	mov	r7,r17
1000cfd0:	8080030d 	sth	r2,12(r16)
1000cfd4:	dfc00417 	ldw	ra,16(sp)
1000cfd8:	dcc00317 	ldw	r19,12(sp)
1000cfdc:	dc800217 	ldw	r18,8(sp)
1000cfe0:	dc400117 	ldw	r17,4(sp)
1000cfe4:	dc000017 	ldw	r16,0(sp)
1000cfe8:	dec00504 	addi	sp,sp,20
1000cfec:	000e6ec1 	jmpi	1000e6ec <_write_r>

1000cff0 <__sseek>:
1000cff0:	defffe04 	addi	sp,sp,-8
1000cff4:	dc000015 	stw	r16,0(sp)
1000cff8:	2821883a 	mov	r16,r5
1000cffc:	2940038f 	ldh	r5,14(r5)
1000d000:	dfc00115 	stw	ra,4(sp)
1000d004:	000f0b40 	call	1000f0b4 <_lseek_r>
1000d008:	00ffffc4 	movi	r3,-1
1000d00c:	10c00826 	beq	r2,r3,1000d030 <__sseek+0x40>
1000d010:	80c0030b 	ldhu	r3,12(r16)
1000d014:	80801415 	stw	r2,80(r16)
1000d018:	18c40014 	ori	r3,r3,4096
1000d01c:	80c0030d 	sth	r3,12(r16)
1000d020:	dfc00117 	ldw	ra,4(sp)
1000d024:	dc000017 	ldw	r16,0(sp)
1000d028:	dec00204 	addi	sp,sp,8
1000d02c:	f800283a 	ret
1000d030:	80c0030b 	ldhu	r3,12(r16)
1000d034:	18fbffcc 	andi	r3,r3,61439
1000d038:	80c0030d 	sth	r3,12(r16)
1000d03c:	dfc00117 	ldw	ra,4(sp)
1000d040:	dc000017 	ldw	r16,0(sp)
1000d044:	dec00204 	addi	sp,sp,8
1000d048:	f800283a 	ret

1000d04c <__sclose>:
1000d04c:	2940038f 	ldh	r5,14(r5)
1000d050:	000e7481 	jmpi	1000e748 <_close_r>

1000d054 <strcmp>:
1000d054:	2144b03a 	or	r2,r4,r5
1000d058:	108000cc 	andi	r2,r2,3
1000d05c:	1000171e 	bne	r2,zero,1000d0bc <strcmp+0x68>
1000d060:	20800017 	ldw	r2,0(r4)
1000d064:	28c00017 	ldw	r3,0(r5)
1000d068:	10c0141e 	bne	r2,r3,1000d0bc <strcmp+0x68>
1000d06c:	027fbff4 	movhi	r9,65279
1000d070:	4a7fbfc4 	addi	r9,r9,-257
1000d074:	0086303a 	nor	r3,zero,r2
1000d078:	02202074 	movhi	r8,32897
1000d07c:	1245883a 	add	r2,r2,r9
1000d080:	42202004 	addi	r8,r8,-32640
1000d084:	10c4703a 	and	r2,r2,r3
1000d088:	1204703a 	and	r2,r2,r8
1000d08c:	10000226 	beq	r2,zero,1000d098 <strcmp+0x44>
1000d090:	00001706 	br	1000d0f0 <strcmp+0x9c>
1000d094:	1000161e 	bne	r2,zero,1000d0f0 <strcmp+0x9c>
1000d098:	21000104 	addi	r4,r4,4
1000d09c:	20c00017 	ldw	r3,0(r4)
1000d0a0:	29400104 	addi	r5,r5,4
1000d0a4:	29800017 	ldw	r6,0(r5)
1000d0a8:	1a4f883a 	add	r7,r3,r9
1000d0ac:	00c4303a 	nor	r2,zero,r3
1000d0b0:	3884703a 	and	r2,r7,r2
1000d0b4:	1204703a 	and	r2,r2,r8
1000d0b8:	19bff626 	beq	r3,r6,1000d094 <__alt_data_end+0xf800d094>
1000d0bc:	20800007 	ldb	r2,0(r4)
1000d0c0:	1000051e 	bne	r2,zero,1000d0d8 <strcmp+0x84>
1000d0c4:	00000606 	br	1000d0e0 <strcmp+0x8c>
1000d0c8:	21000044 	addi	r4,r4,1
1000d0cc:	20800007 	ldb	r2,0(r4)
1000d0d0:	29400044 	addi	r5,r5,1
1000d0d4:	10000226 	beq	r2,zero,1000d0e0 <strcmp+0x8c>
1000d0d8:	28c00007 	ldb	r3,0(r5)
1000d0dc:	10fffa26 	beq	r2,r3,1000d0c8 <__alt_data_end+0xf800d0c8>
1000d0e0:	20800003 	ldbu	r2,0(r4)
1000d0e4:	28c00003 	ldbu	r3,0(r5)
1000d0e8:	10c5c83a 	sub	r2,r2,r3
1000d0ec:	f800283a 	ret
1000d0f0:	0005883a 	mov	r2,zero
1000d0f4:	f800283a 	ret

1000d0f8 <strlen>:
1000d0f8:	208000cc 	andi	r2,r4,3
1000d0fc:	10002026 	beq	r2,zero,1000d180 <strlen+0x88>
1000d100:	20800007 	ldb	r2,0(r4)
1000d104:	10002026 	beq	r2,zero,1000d188 <strlen+0x90>
1000d108:	2005883a 	mov	r2,r4
1000d10c:	00000206 	br	1000d118 <strlen+0x20>
1000d110:	10c00007 	ldb	r3,0(r2)
1000d114:	18001826 	beq	r3,zero,1000d178 <strlen+0x80>
1000d118:	10800044 	addi	r2,r2,1
1000d11c:	10c000cc 	andi	r3,r2,3
1000d120:	183ffb1e 	bne	r3,zero,1000d110 <__alt_data_end+0xf800d110>
1000d124:	10c00017 	ldw	r3,0(r2)
1000d128:	01ffbff4 	movhi	r7,65279
1000d12c:	39ffbfc4 	addi	r7,r7,-257
1000d130:	00ca303a 	nor	r5,zero,r3
1000d134:	01a02074 	movhi	r6,32897
1000d138:	19c7883a 	add	r3,r3,r7
1000d13c:	31a02004 	addi	r6,r6,-32640
1000d140:	1946703a 	and	r3,r3,r5
1000d144:	1986703a 	and	r3,r3,r6
1000d148:	1800091e 	bne	r3,zero,1000d170 <strlen+0x78>
1000d14c:	10800104 	addi	r2,r2,4
1000d150:	10c00017 	ldw	r3,0(r2)
1000d154:	19cb883a 	add	r5,r3,r7
1000d158:	00c6303a 	nor	r3,zero,r3
1000d15c:	28c6703a 	and	r3,r5,r3
1000d160:	1986703a 	and	r3,r3,r6
1000d164:	183ff926 	beq	r3,zero,1000d14c <__alt_data_end+0xf800d14c>
1000d168:	00000106 	br	1000d170 <strlen+0x78>
1000d16c:	10800044 	addi	r2,r2,1
1000d170:	10c00007 	ldb	r3,0(r2)
1000d174:	183ffd1e 	bne	r3,zero,1000d16c <__alt_data_end+0xf800d16c>
1000d178:	1105c83a 	sub	r2,r2,r4
1000d17c:	f800283a 	ret
1000d180:	2005883a 	mov	r2,r4
1000d184:	003fe706 	br	1000d124 <__alt_data_end+0xf800d124>
1000d188:	0005883a 	mov	r2,zero
1000d18c:	f800283a 	ret

1000d190 <__sprint_r.part.0>:
1000d190:	28801917 	ldw	r2,100(r5)
1000d194:	defff604 	addi	sp,sp,-40
1000d198:	dd400515 	stw	r21,20(sp)
1000d19c:	dcc00315 	stw	r19,12(sp)
1000d1a0:	dfc00915 	stw	ra,36(sp)
1000d1a4:	df000815 	stw	fp,32(sp)
1000d1a8:	ddc00715 	stw	r23,28(sp)
1000d1ac:	dd800615 	stw	r22,24(sp)
1000d1b0:	dd000415 	stw	r20,16(sp)
1000d1b4:	dc800215 	stw	r18,8(sp)
1000d1b8:	dc400115 	stw	r17,4(sp)
1000d1bc:	dc000015 	stw	r16,0(sp)
1000d1c0:	1088000c 	andi	r2,r2,8192
1000d1c4:	2827883a 	mov	r19,r5
1000d1c8:	302b883a 	mov	r21,r6
1000d1cc:	10002d26 	beq	r2,zero,1000d284 <__sprint_r.part.0+0xf4>
1000d1d0:	30800217 	ldw	r2,8(r6)
1000d1d4:	35800017 	ldw	r22,0(r6)
1000d1d8:	10002826 	beq	r2,zero,1000d27c <__sprint_r.part.0+0xec>
1000d1dc:	2029883a 	mov	r20,r4
1000d1e0:	b5c00104 	addi	r23,r22,4
1000d1e4:	04bfffc4 	movi	r18,-1
1000d1e8:	bc400017 	ldw	r17,0(r23)
1000d1ec:	b4000017 	ldw	r16,0(r22)
1000d1f0:	0039883a 	mov	fp,zero
1000d1f4:	8822d0ba 	srli	r17,r17,2
1000d1f8:	04400316 	blt	zero,r17,1000d208 <__sprint_r.part.0+0x78>
1000d1fc:	00001706 	br	1000d25c <__sprint_r.part.0+0xcc>
1000d200:	84000104 	addi	r16,r16,4
1000d204:	8f001526 	beq	r17,fp,1000d25c <__sprint_r.part.0+0xcc>
1000d208:	81400017 	ldw	r5,0(r16)
1000d20c:	a009883a 	mov	r4,r20
1000d210:	980d883a 	mov	r6,r19
1000d214:	000e9880 	call	1000e988 <_fputwc_r>
1000d218:	e7000044 	addi	fp,fp,1
1000d21c:	14bff81e 	bne	r2,r18,1000d200 <__alt_data_end+0xf800d200>
1000d220:	9005883a 	mov	r2,r18
1000d224:	a8000215 	stw	zero,8(r21)
1000d228:	a8000115 	stw	zero,4(r21)
1000d22c:	dfc00917 	ldw	ra,36(sp)
1000d230:	df000817 	ldw	fp,32(sp)
1000d234:	ddc00717 	ldw	r23,28(sp)
1000d238:	dd800617 	ldw	r22,24(sp)
1000d23c:	dd400517 	ldw	r21,20(sp)
1000d240:	dd000417 	ldw	r20,16(sp)
1000d244:	dcc00317 	ldw	r19,12(sp)
1000d248:	dc800217 	ldw	r18,8(sp)
1000d24c:	dc400117 	ldw	r17,4(sp)
1000d250:	dc000017 	ldw	r16,0(sp)
1000d254:	dec00a04 	addi	sp,sp,40
1000d258:	f800283a 	ret
1000d25c:	a8c00217 	ldw	r3,8(r21)
1000d260:	8c63883a 	add	r17,r17,r17
1000d264:	8c63883a 	add	r17,r17,r17
1000d268:	1c45c83a 	sub	r2,r3,r17
1000d26c:	a8800215 	stw	r2,8(r21)
1000d270:	b5800204 	addi	r22,r22,8
1000d274:	bdc00204 	addi	r23,r23,8
1000d278:	103fdb1e 	bne	r2,zero,1000d1e8 <__alt_data_end+0xf800d1e8>
1000d27c:	0005883a 	mov	r2,zero
1000d280:	003fe806 	br	1000d224 <__alt_data_end+0xf800d224>
1000d284:	000ebbc0 	call	1000ebbc <__sfvwrite_r>
1000d288:	003fe606 	br	1000d224 <__alt_data_end+0xf800d224>

1000d28c <__sprint_r>:
1000d28c:	30c00217 	ldw	r3,8(r6)
1000d290:	18000126 	beq	r3,zero,1000d298 <__sprint_r+0xc>
1000d294:	000d1901 	jmpi	1000d190 <__sprint_r.part.0>
1000d298:	30000115 	stw	zero,4(r6)
1000d29c:	0005883a 	mov	r2,zero
1000d2a0:	f800283a 	ret

1000d2a4 <___vfiprintf_internal_r>:
1000d2a4:	defeca04 	addi	sp,sp,-1240
1000d2a8:	dcc12f15 	stw	r19,1212(sp)
1000d2ac:	dfc13515 	stw	ra,1236(sp)
1000d2b0:	df013415 	stw	fp,1232(sp)
1000d2b4:	ddc13315 	stw	r23,1228(sp)
1000d2b8:	dd813215 	stw	r22,1224(sp)
1000d2bc:	dd413115 	stw	r21,1220(sp)
1000d2c0:	dd013015 	stw	r20,1216(sp)
1000d2c4:	dc812e15 	stw	r18,1208(sp)
1000d2c8:	dc412d15 	stw	r17,1204(sp)
1000d2cc:	dc012c15 	stw	r16,1200(sp)
1000d2d0:	d9012115 	stw	r4,1156(sp)
1000d2d4:	d9412015 	stw	r5,1152(sp)
1000d2d8:	d9c12315 	stw	r7,1164(sp)
1000d2dc:	3027883a 	mov	r19,r6
1000d2e0:	20000226 	beq	r4,zero,1000d2ec <___vfiprintf_internal_r+0x48>
1000d2e4:	20800e17 	ldw	r2,56(r4)
1000d2e8:	1000f726 	beq	r2,zero,1000d6c8 <___vfiprintf_internal_r+0x424>
1000d2ec:	d8812017 	ldw	r2,1152(sp)
1000d2f0:	10c0030b 	ldhu	r3,12(r2)
1000d2f4:	1908000c 	andi	r4,r3,8192
1000d2f8:	1805883a 	mov	r2,r3
1000d2fc:	2000081e 	bne	r4,zero,1000d320 <___vfiprintf_internal_r+0x7c>
1000d300:	d9412017 	ldw	r5,1152(sp)
1000d304:	18880014 	ori	r2,r3,8192
1000d308:	00f7ffc4 	movi	r3,-8193
1000d30c:	29001917 	ldw	r4,100(r5)
1000d310:	2880030d 	sth	r2,12(r5)
1000d314:	20c8703a 	and	r4,r4,r3
1000d318:	29001915 	stw	r4,100(r5)
1000d31c:	1007883a 	mov	r3,r2
1000d320:	1100020c 	andi	r4,r2,8
1000d324:	2000a726 	beq	r4,zero,1000d5c4 <___vfiprintf_internal_r+0x320>
1000d328:	d9412017 	ldw	r5,1152(sp)
1000d32c:	29000417 	ldw	r4,16(r5)
1000d330:	2000a426 	beq	r4,zero,1000d5c4 <___vfiprintf_internal_r+0x320>
1000d334:	1080068c 	andi	r2,r2,26
1000d338:	01000284 	movi	r4,10
1000d33c:	1100ab26 	beq	r2,r4,1000d5ec <___vfiprintf_internal_r+0x348>
1000d340:	d9010a04 	addi	r4,sp,1064
1000d344:	d94109c4 	addi	r5,sp,1063
1000d348:	07040074 	movhi	fp,4097
1000d34c:	04440074 	movhi	r17,4097
1000d350:	2145c83a 	sub	r2,r4,r5
1000d354:	e709a504 	addi	fp,fp,9876
1000d358:	8c49a104 	addi	r17,r17,9860
1000d35c:	d9011e15 	stw	r4,1144(sp)
1000d360:	d9411f15 	stw	r5,1148(sp)
1000d364:	dec11a15 	stw	sp,1128(sp)
1000d368:	d8011c15 	stw	zero,1136(sp)
1000d36c:	d8011b15 	stw	zero,1132(sp)
1000d370:	d8012715 	stw	zero,1180(sp)
1000d374:	d8012515 	stw	zero,1172(sp)
1000d378:	d811883a 	mov	r8,sp
1000d37c:	d8812815 	stw	r2,1184(sp)
1000d380:	982f883a 	mov	r23,r19
1000d384:	b8800007 	ldb	r2,0(r23)
1000d388:	1003b026 	beq	r2,zero,1000e24c <___vfiprintf_internal_r+0xfa8>
1000d38c:	01000944 	movi	r4,37
1000d390:	1103ae26 	beq	r2,r4,1000e24c <___vfiprintf_internal_r+0xfa8>
1000d394:	b805883a 	mov	r2,r23
1000d398:	00000106 	br	1000d3a0 <___vfiprintf_internal_r+0xfc>
1000d39c:	19000326 	beq	r3,r4,1000d3ac <___vfiprintf_internal_r+0x108>
1000d3a0:	10800044 	addi	r2,r2,1
1000d3a4:	10c00007 	ldb	r3,0(r2)
1000d3a8:	183ffc1e 	bne	r3,zero,1000d39c <__alt_data_end+0xf800d39c>
1000d3ac:	15e1c83a 	sub	r16,r2,r23
1000d3b0:	1029883a 	mov	r20,r2
1000d3b4:	80001026 	beq	r16,zero,1000d3f8 <___vfiprintf_internal_r+0x154>
1000d3b8:	d8c11c17 	ldw	r3,1136(sp)
1000d3bc:	d8811b17 	ldw	r2,1132(sp)
1000d3c0:	45c00015 	stw	r23,0(r8)
1000d3c4:	80c7883a 	add	r3,r16,r3
1000d3c8:	10800044 	addi	r2,r2,1
1000d3cc:	44000115 	stw	r16,4(r8)
1000d3d0:	d8c11c15 	stw	r3,1136(sp)
1000d3d4:	d8811b15 	stw	r2,1132(sp)
1000d3d8:	010001c4 	movi	r4,7
1000d3dc:	2080740e 	bge	r4,r2,1000d5b0 <___vfiprintf_internal_r+0x30c>
1000d3e0:	1803a71e 	bne	r3,zero,1000e280 <___vfiprintf_internal_r+0xfdc>
1000d3e4:	d8c12517 	ldw	r3,1172(sp)
1000d3e8:	d8011b15 	stw	zero,1132(sp)
1000d3ec:	d811883a 	mov	r8,sp
1000d3f0:	1c07883a 	add	r3,r3,r16
1000d3f4:	d8c12515 	stw	r3,1172(sp)
1000d3f8:	a0800007 	ldb	r2,0(r20)
1000d3fc:	1002bf26 	beq	r2,zero,1000defc <___vfiprintf_internal_r+0xc58>
1000d400:	a5c00044 	addi	r23,r20,1
1000d404:	a1800047 	ldb	r6,1(r20)
1000d408:	d8011d85 	stb	zero,1142(sp)
1000d40c:	d8012205 	stb	zero,1160(sp)
1000d410:	043fffc4 	movi	r16,-1
1000d414:	d8012415 	stw	zero,1168(sp)
1000d418:	0025883a 	mov	r18,zero
1000d41c:	05001604 	movi	r20,88
1000d420:	05400244 	movi	r21,9
1000d424:	4027883a 	mov	r19,r8
1000d428:	bdc00044 	addi	r23,r23,1
1000d42c:	30bff804 	addi	r2,r6,-32
1000d430:	a0825636 	bltu	r20,r2,1000dd8c <___vfiprintf_internal_r+0xae8>
1000d434:	100490ba 	slli	r2,r2,2
1000d438:	01040074 	movhi	r4,4097
1000d43c:	21351304 	addi	r4,r4,-11188
1000d440:	1105883a 	add	r2,r2,r4
1000d444:	10800017 	ldw	r2,0(r2)
1000d448:	1000683a 	jmp	r2
1000d44c:	1000dd1c 	xori	zero,r2,884
1000d450:	1000dd8c 	andi	zero,r2,886
1000d454:	1000dd8c 	andi	zero,r2,886
1000d458:	1000dd80 	call	11000dd8 <_gp+0xfe4c54>
1000d45c:	1000dd8c 	andi	zero,r2,886
1000d460:	1000dd8c 	andi	zero,r2,886
1000d464:	1000dd8c 	andi	zero,r2,886
1000d468:	1000dd8c 	andi	zero,r2,886
1000d46c:	1000dd8c 	andi	zero,r2,886
1000d470:	1000dd8c 	andi	zero,r2,886
1000d474:	1000db0c 	andi	zero,r2,876
1000d478:	1000dd34 	orhi	zero,r2,884
1000d47c:	1000dd8c 	andi	zero,r2,886
1000d480:	1000d6e0 	cmpeqi	zero,r2,859
1000d484:	1000db30 	cmpltui	zero,r2,876
1000d488:	1000dd8c 	andi	zero,r2,886
1000d48c:	1000d6ec 	andhi	zero,r2,859
1000d490:	1000d6f8 	rdprs	zero,r2,859
1000d494:	1000d6f8 	rdprs	zero,r2,859
1000d498:	1000d6f8 	rdprs	zero,r2,859
1000d49c:	1000d6f8 	rdprs	zero,r2,859
1000d4a0:	1000d6f8 	rdprs	zero,r2,859
1000d4a4:	1000d6f8 	rdprs	zero,r2,859
1000d4a8:	1000d6f8 	rdprs	zero,r2,859
1000d4ac:	1000d6f8 	rdprs	zero,r2,859
1000d4b0:	1000d6f8 	rdprs	zero,r2,859
1000d4b4:	1000dd8c 	andi	zero,r2,886
1000d4b8:	1000dd8c 	andi	zero,r2,886
1000d4bc:	1000dd8c 	andi	zero,r2,886
1000d4c0:	1000dd8c 	andi	zero,r2,886
1000d4c4:	1000dd8c 	andi	zero,r2,886
1000d4c8:	1000dd8c 	andi	zero,r2,886
1000d4cc:	1000dd8c 	andi	zero,r2,886
1000d4d0:	1000dd8c 	andi	zero,r2,886
1000d4d4:	1000dd8c 	andi	zero,r2,886
1000d4d8:	1000dd8c 	andi	zero,r2,886
1000d4dc:	1000d738 	rdprs	zero,r2,860
1000d4e0:	1000dd8c 	andi	zero,r2,886
1000d4e4:	1000dd8c 	andi	zero,r2,886
1000d4e8:	1000dd8c 	andi	zero,r2,886
1000d4ec:	1000dd8c 	andi	zero,r2,886
1000d4f0:	1000dd8c 	andi	zero,r2,886
1000d4f4:	1000dd8c 	andi	zero,r2,886
1000d4f8:	1000dd8c 	andi	zero,r2,886
1000d4fc:	1000dd8c 	andi	zero,r2,886
1000d500:	1000dd8c 	andi	zero,r2,886
1000d504:	1000dd8c 	andi	zero,r2,886
1000d508:	1000da28 	cmpgeui	zero,r2,872
1000d50c:	1000dd8c 	andi	zero,r2,886
1000d510:	1000dd8c 	andi	zero,r2,886
1000d514:	1000dd8c 	andi	zero,r2,886
1000d518:	1000dd8c 	andi	zero,r2,886
1000d51c:	1000dd8c 	andi	zero,r2,886
1000d520:	1000da68 	cmpgeui	zero,r2,873
1000d524:	1000dd8c 	andi	zero,r2,886
1000d528:	1000dd8c 	andi	zero,r2,886
1000d52c:	1000daac 	andhi	zero,r2,874
1000d530:	1000dd8c 	andi	zero,r2,886
1000d534:	1000dd8c 	andi	zero,r2,886
1000d538:	1000dd8c 	andi	zero,r2,886
1000d53c:	1000dd8c 	andi	zero,r2,886
1000d540:	1000dd8c 	andi	zero,r2,886
1000d544:	1000dd8c 	andi	zero,r2,886
1000d548:	1000dd8c 	andi	zero,r2,886
1000d54c:	1000dd8c 	andi	zero,r2,886
1000d550:	1000dd8c 	andi	zero,r2,886
1000d554:	1000dd8c 	andi	zero,r2,886
1000d558:	1000d9f4 	orhi	zero,r2,871
1000d55c:	1000dd44 	addi	zero,r2,885
1000d560:	1000dd8c 	andi	zero,r2,886
1000d564:	1000dd8c 	andi	zero,r2,886
1000d568:	1000dd8c 	andi	zero,r2,886
1000d56c:	1000db80 	call	11000db8 <_gp+0xfe4c34>
1000d570:	1000dd44 	addi	zero,r2,885
1000d574:	1000dd8c 	andi	zero,r2,886
1000d578:	1000dd8c 	andi	zero,r2,886
1000d57c:	1000da98 	cmpnei	zero,r2,874
1000d580:	1000dd8c 	andi	zero,r2,886
1000d584:	1000dce4 	muli	zero,r2,883
1000d588:	1000dc6c 	andhi	zero,r2,881
1000d58c:	1000dca0 	cmpeqi	zero,r2,882
1000d590:	1000db8c 	andi	zero,r2,878
1000d594:	1000dd8c 	andi	zero,r2,886
1000d598:	1000db98 	cmpnei	zero,r2,878
1000d59c:	1000dd8c 	andi	zero,r2,886
1000d5a0:	1000dbf4 	orhi	zero,r2,879
1000d5a4:	1000dd8c 	andi	zero,r2,886
1000d5a8:	1000dd8c 	andi	zero,r2,886
1000d5ac:	1000dc28 	cmpgeui	zero,r2,880
1000d5b0:	42000204 	addi	r8,r8,8
1000d5b4:	d8c12517 	ldw	r3,1172(sp)
1000d5b8:	1c07883a 	add	r3,r3,r16
1000d5bc:	d8c12515 	stw	r3,1172(sp)
1000d5c0:	003f8d06 	br	1000d3f8 <__alt_data_end+0xf800d3f8>
1000d5c4:	d9012117 	ldw	r4,1156(sp)
1000d5c8:	d9412017 	ldw	r5,1152(sp)
1000d5cc:	0008ae80 	call	10008ae8 <__swsetup_r>
1000d5d0:	1000301e 	bne	r2,zero,1000d694 <___vfiprintf_internal_r+0x3f0>
1000d5d4:	d8812017 	ldw	r2,1152(sp)
1000d5d8:	01000284 	movi	r4,10
1000d5dc:	10c0030b 	ldhu	r3,12(r2)
1000d5e0:	1805883a 	mov	r2,r3
1000d5e4:	1080068c 	andi	r2,r2,26
1000d5e8:	113f551e 	bne	r2,r4,1000d340 <__alt_data_end+0xf800d340>
1000d5ec:	d9012017 	ldw	r4,1152(sp)
1000d5f0:	2080038b 	ldhu	r2,14(r4)
1000d5f4:	113fffcc 	andi	r4,r2,65535
1000d5f8:	2120001c 	xori	r4,r4,32768
1000d5fc:	21200004 	addi	r4,r4,-32768
1000d600:	203f4f16 	blt	r4,zero,1000d340 <__alt_data_end+0xf800d340>
1000d604:	d9412017 	ldw	r5,1152(sp)
1000d608:	d9012117 	ldw	r4,1156(sp)
1000d60c:	d9c12317 	ldw	r7,1164(sp)
1000d610:	2b001917 	ldw	r12,100(r5)
1000d614:	2ac00717 	ldw	r11,28(r5)
1000d618:	2a800917 	ldw	r10,36(r5)
1000d61c:	02010004 	movi	r8,1024
1000d620:	18ffff4c 	andi	r3,r3,65533
1000d624:	da0b883a 	add	r5,sp,r8
1000d628:	980d883a 	mov	r6,r19
1000d62c:	d8c1030d 	sth	r3,1036(sp)
1000d630:	db011915 	stw	r12,1124(sp)
1000d634:	d881038d 	sth	r2,1038(sp)
1000d638:	dac10715 	stw	r11,1052(sp)
1000d63c:	da810915 	stw	r10,1060(sp)
1000d640:	dec10015 	stw	sp,1024(sp)
1000d644:	dec10415 	stw	sp,1040(sp)
1000d648:	da010215 	stw	r8,1032(sp)
1000d64c:	da010515 	stw	r8,1044(sp)
1000d650:	d8010615 	stw	zero,1048(sp)
1000d654:	000d2a40 	call	1000d2a4 <___vfiprintf_internal_r>
1000d658:	1021883a 	mov	r16,r2
1000d65c:	10000416 	blt	r2,zero,1000d670 <___vfiprintf_internal_r+0x3cc>
1000d660:	d9012117 	ldw	r4,1156(sp)
1000d664:	d9410004 	addi	r5,sp,1024
1000d668:	000a5680 	call	1000a568 <_fflush_r>
1000d66c:	10040f1e 	bne	r2,zero,1000e6ac <___vfiprintf_internal_r+0x1408>
1000d670:	d881030b 	ldhu	r2,1036(sp)
1000d674:	1080100c 	andi	r2,r2,64
1000d678:	10000426 	beq	r2,zero,1000d68c <___vfiprintf_internal_r+0x3e8>
1000d67c:	d8c12017 	ldw	r3,1152(sp)
1000d680:	1880030b 	ldhu	r2,12(r3)
1000d684:	10801014 	ori	r2,r2,64
1000d688:	1880030d 	sth	r2,12(r3)
1000d68c:	8005883a 	mov	r2,r16
1000d690:	00000106 	br	1000d698 <___vfiprintf_internal_r+0x3f4>
1000d694:	00bfffc4 	movi	r2,-1
1000d698:	dfc13517 	ldw	ra,1236(sp)
1000d69c:	df013417 	ldw	fp,1232(sp)
1000d6a0:	ddc13317 	ldw	r23,1228(sp)
1000d6a4:	dd813217 	ldw	r22,1224(sp)
1000d6a8:	dd413117 	ldw	r21,1220(sp)
1000d6ac:	dd013017 	ldw	r20,1216(sp)
1000d6b0:	dcc12f17 	ldw	r19,1212(sp)
1000d6b4:	dc812e17 	ldw	r18,1208(sp)
1000d6b8:	dc412d17 	ldw	r17,1204(sp)
1000d6bc:	dc012c17 	ldw	r16,1200(sp)
1000d6c0:	dec13604 	addi	sp,sp,1240
1000d6c4:	f800283a 	ret
1000d6c8:	000ab240 	call	1000ab24 <__sinit>
1000d6cc:	003f0706 	br	1000d2ec <__alt_data_end+0xf800d2ec>
1000d6d0:	d8c12417 	ldw	r3,1168(sp)
1000d6d4:	d8812315 	stw	r2,1164(sp)
1000d6d8:	00c7c83a 	sub	r3,zero,r3
1000d6dc:	d8c12415 	stw	r3,1168(sp)
1000d6e0:	94800114 	ori	r18,r18,4
1000d6e4:	b9800007 	ldb	r6,0(r23)
1000d6e8:	003f4f06 	br	1000d428 <__alt_data_end+0xf800d428>
1000d6ec:	94802014 	ori	r18,r18,128
1000d6f0:	b9800007 	ldb	r6,0(r23)
1000d6f4:	003f4c06 	br	1000d428 <__alt_data_end+0xf800d428>
1000d6f8:	dc012615 	stw	r16,1176(sp)
1000d6fc:	d8012415 	stw	zero,1168(sp)
1000d700:	35bff404 	addi	r22,r6,-48
1000d704:	0009883a 	mov	r4,zero
1000d708:	b821883a 	mov	r16,r23
1000d70c:	01400284 	movi	r5,10
1000d710:	00040b00 	call	100040b0 <__mulsi3>
1000d714:	81800007 	ldb	r6,0(r16)
1000d718:	1589883a 	add	r4,r2,r22
1000d71c:	bdc00044 	addi	r23,r23,1
1000d720:	35bff404 	addi	r22,r6,-48
1000d724:	b821883a 	mov	r16,r23
1000d728:	adbff82e 	bgeu	r21,r22,1000d70c <__alt_data_end+0xf800d70c>
1000d72c:	d9012415 	stw	r4,1168(sp)
1000d730:	dc012617 	ldw	r16,1176(sp)
1000d734:	003f3d06 	br	1000d42c <__alt_data_end+0xf800d42c>
1000d738:	d8c12203 	ldbu	r3,1160(sp)
1000d73c:	94800414 	ori	r18,r18,16
1000d740:	9080080c 	andi	r2,r18,32
1000d744:	d8c11d85 	stb	r3,1142(sp)
1000d748:	9811883a 	mov	r8,r19
1000d74c:	d8c12317 	ldw	r3,1164(sp)
1000d750:	10018226 	beq	r2,zero,1000dd5c <___vfiprintf_internal_r+0xab8>
1000d754:	d9012317 	ldw	r4,1164(sp)
1000d758:	18800117 	ldw	r2,4(r3)
1000d75c:	1cc00017 	ldw	r19,0(r3)
1000d760:	21000204 	addi	r4,r4,8
1000d764:	d9012315 	stw	r4,1164(sp)
1000d768:	102b883a 	mov	r21,r2
1000d76c:	10030016 	blt	r2,zero,1000e370 <___vfiprintf_internal_r+0x10cc>
1000d770:	dd811d83 	ldbu	r22,1142(sp)
1000d774:	8029883a 	mov	r20,r16
1000d778:	00800044 	movi	r2,1
1000d77c:	9d46b03a 	or	r3,r19,r21
1000d780:	80000216 	blt	r16,zero,1000d78c <___vfiprintf_internal_r+0x4e8>
1000d784:	013fdfc4 	movi	r4,-129
1000d788:	9124703a 	and	r18,r18,r4
1000d78c:	1801b41e 	bne	r3,zero,1000de60 <___vfiprintf_internal_r+0xbbc>
1000d790:	80028126 	beq	r16,zero,1000e198 <___vfiprintf_internal_r+0xef4>
1000d794:	10803fcc 	andi	r2,r2,255
1000d798:	00c00044 	movi	r3,1
1000d79c:	10c1d126 	beq	r2,r3,1000dee4 <___vfiprintf_internal_r+0xc40>
1000d7a0:	00c00084 	movi	r3,2
1000d7a4:	10c28626 	beq	r2,r3,1000e1c0 <___vfiprintf_internal_r+0xf1c>
1000d7a8:	d8c10a04 	addi	r3,sp,1064
1000d7ac:	9808d0fa 	srli	r4,r19,3
1000d7b0:	a80a977a 	slli	r5,r21,29
1000d7b4:	a82ad0fa 	srli	r21,r21,3
1000d7b8:	9cc001cc 	andi	r19,r19,7
1000d7bc:	98800c04 	addi	r2,r19,48
1000d7c0:	18ffffc4 	addi	r3,r3,-1
1000d7c4:	2926b03a 	or	r19,r5,r4
1000d7c8:	18800005 	stb	r2,0(r3)
1000d7cc:	9d48b03a 	or	r4,r19,r21
1000d7d0:	203ff61e 	bne	r4,zero,1000d7ac <__alt_data_end+0xf800d7ac>
1000d7d4:	9100004c 	andi	r4,r18,1
1000d7d8:	d8c12215 	stw	r3,1160(sp)
1000d7dc:	2002b31e 	bne	r4,zero,1000e2ac <___vfiprintf_internal_r+0x1008>
1000d7e0:	d9411e17 	ldw	r5,1144(sp)
1000d7e4:	28e9c83a 	sub	r20,r5,r3
1000d7e8:	a02b883a 	mov	r21,r20
1000d7ec:	a400010e 	bge	r20,r16,1000d7f4 <___vfiprintf_internal_r+0x550>
1000d7f0:	802b883a 	mov	r21,r16
1000d7f4:	b5803fcc 	andi	r22,r22,255
1000d7f8:	b580201c 	xori	r22,r22,128
1000d7fc:	b5bfe004 	addi	r22,r22,-128
1000d800:	b0000126 	beq	r22,zero,1000d808 <___vfiprintf_internal_r+0x564>
1000d804:	ad400044 	addi	r21,r21,1
1000d808:	9280008c 	andi	r10,r18,2
1000d80c:	50000126 	beq	r10,zero,1000d814 <___vfiprintf_internal_r+0x570>
1000d810:	ad400084 	addi	r21,r21,2
1000d814:	9580210c 	andi	r22,r18,132
1000d818:	b001751e 	bne	r22,zero,1000ddf0 <___vfiprintf_internal_r+0xb4c>
1000d81c:	d9012417 	ldw	r4,1168(sp)
1000d820:	2567c83a 	sub	r19,r4,r21
1000d824:	04c1720e 	bge	zero,r19,1000ddf0 <___vfiprintf_internal_r+0xb4c>
1000d828:	01c00404 	movi	r7,16
1000d82c:	d8c11c17 	ldw	r3,1136(sp)
1000d830:	3cc36b0e 	bge	r7,r19,1000e5e0 <___vfiprintf_internal_r+0x133c>
1000d834:	00840074 	movhi	r2,4097
1000d838:	1089a504 	addi	r2,r2,9876
1000d83c:	dc012915 	stw	r16,1188(sp)
1000d840:	d9011b17 	ldw	r4,1132(sp)
1000d844:	9821883a 	mov	r16,r19
1000d848:	d8812615 	stw	r2,1176(sp)
1000d84c:	030001c4 	movi	r12,7
1000d850:	5027883a 	mov	r19,r10
1000d854:	00000506 	br	1000d86c <___vfiprintf_internal_r+0x5c8>
1000d858:	21400084 	addi	r5,r4,2
1000d85c:	42000204 	addi	r8,r8,8
1000d860:	1009883a 	mov	r4,r2
1000d864:	843ffc04 	addi	r16,r16,-16
1000d868:	3c000d0e 	bge	r7,r16,1000d8a0 <___vfiprintf_internal_r+0x5fc>
1000d86c:	18c00404 	addi	r3,r3,16
1000d870:	20800044 	addi	r2,r4,1
1000d874:	47000015 	stw	fp,0(r8)
1000d878:	41c00115 	stw	r7,4(r8)
1000d87c:	d8c11c15 	stw	r3,1136(sp)
1000d880:	d8811b15 	stw	r2,1132(sp)
1000d884:	60bff40e 	bge	r12,r2,1000d858 <__alt_data_end+0xf800d858>
1000d888:	18014b1e 	bne	r3,zero,1000ddb8 <___vfiprintf_internal_r+0xb14>
1000d88c:	843ffc04 	addi	r16,r16,-16
1000d890:	0009883a 	mov	r4,zero
1000d894:	01400044 	movi	r5,1
1000d898:	d811883a 	mov	r8,sp
1000d89c:	3c3ff316 	blt	r7,r16,1000d86c <__alt_data_end+0xf800d86c>
1000d8a0:	9815883a 	mov	r10,r19
1000d8a4:	8027883a 	mov	r19,r16
1000d8a8:	dc012917 	ldw	r16,1188(sp)
1000d8ac:	d9012617 	ldw	r4,1176(sp)
1000d8b0:	98c7883a 	add	r3,r19,r3
1000d8b4:	44c00115 	stw	r19,4(r8)
1000d8b8:	41000015 	stw	r4,0(r8)
1000d8bc:	d8c11c15 	stw	r3,1136(sp)
1000d8c0:	d9411b15 	stw	r5,1132(sp)
1000d8c4:	008001c4 	movi	r2,7
1000d8c8:	11425116 	blt	r2,r5,1000e210 <___vfiprintf_internal_r+0xf6c>
1000d8cc:	d9011d87 	ldb	r4,1142(sp)
1000d8d0:	42000204 	addi	r8,r8,8
1000d8d4:	28800044 	addi	r2,r5,1
1000d8d8:	20014a1e 	bne	r4,zero,1000de04 <___vfiprintf_internal_r+0xb60>
1000d8dc:	50000c26 	beq	r10,zero,1000d910 <___vfiprintf_internal_r+0x66c>
1000d8e0:	d9011d04 	addi	r4,sp,1140
1000d8e4:	18c00084 	addi	r3,r3,2
1000d8e8:	41000015 	stw	r4,0(r8)
1000d8ec:	01000084 	movi	r4,2
1000d8f0:	41000115 	stw	r4,4(r8)
1000d8f4:	d8c11c15 	stw	r3,1136(sp)
1000d8f8:	d8811b15 	stw	r2,1132(sp)
1000d8fc:	010001c4 	movi	r4,7
1000d900:	20822016 	blt	r4,r2,1000e184 <___vfiprintf_internal_r+0xee0>
1000d904:	100b883a 	mov	r5,r2
1000d908:	42000204 	addi	r8,r8,8
1000d90c:	10800044 	addi	r2,r2,1
1000d910:	01002004 	movi	r4,128
1000d914:	b101de26 	beq	r22,r4,1000e090 <___vfiprintf_internal_r+0xdec>
1000d918:	8521c83a 	sub	r16,r16,r20
1000d91c:	0400230e 	bge	zero,r16,1000d9ac <___vfiprintf_internal_r+0x708>
1000d920:	04c00404 	movi	r19,16
1000d924:	9c030d0e 	bge	r19,r16,1000e55c <___vfiprintf_internal_r+0x12b8>
1000d928:	00840074 	movhi	r2,4097
1000d92c:	1089a104 	addi	r2,r2,9860
1000d930:	d8812615 	stw	r2,1176(sp)
1000d934:	058001c4 	movi	r22,7
1000d938:	00000506 	br	1000d950 <___vfiprintf_internal_r+0x6ac>
1000d93c:	28800084 	addi	r2,r5,2
1000d940:	42000204 	addi	r8,r8,8
1000d944:	200b883a 	mov	r5,r4
1000d948:	843ffc04 	addi	r16,r16,-16
1000d94c:	9c000d0e 	bge	r19,r16,1000d984 <___vfiprintf_internal_r+0x6e0>
1000d950:	18c00404 	addi	r3,r3,16
1000d954:	29000044 	addi	r4,r5,1
1000d958:	44400015 	stw	r17,0(r8)
1000d95c:	44c00115 	stw	r19,4(r8)
1000d960:	d8c11c15 	stw	r3,1136(sp)
1000d964:	d9011b15 	stw	r4,1132(sp)
1000d968:	b13ff40e 	bge	r22,r4,1000d93c <__alt_data_end+0xf800d93c>
1000d96c:	1801321e 	bne	r3,zero,1000de38 <___vfiprintf_internal_r+0xb94>
1000d970:	843ffc04 	addi	r16,r16,-16
1000d974:	000b883a 	mov	r5,zero
1000d978:	00800044 	movi	r2,1
1000d97c:	d811883a 	mov	r8,sp
1000d980:	9c3ff316 	blt	r19,r16,1000d950 <__alt_data_end+0xf800d950>
1000d984:	d9012617 	ldw	r4,1176(sp)
1000d988:	1c07883a 	add	r3,r3,r16
1000d98c:	44000115 	stw	r16,4(r8)
1000d990:	41000015 	stw	r4,0(r8)
1000d994:	d8c11c15 	stw	r3,1136(sp)
1000d998:	d8811b15 	stw	r2,1132(sp)
1000d99c:	010001c4 	movi	r4,7
1000d9a0:	20816216 	blt	r4,r2,1000df2c <___vfiprintf_internal_r+0xc88>
1000d9a4:	42000204 	addi	r8,r8,8
1000d9a8:	10800044 	addi	r2,r2,1
1000d9ac:	d9012217 	ldw	r4,1160(sp)
1000d9b0:	1d07883a 	add	r3,r3,r20
1000d9b4:	45000115 	stw	r20,4(r8)
1000d9b8:	41000015 	stw	r4,0(r8)
1000d9bc:	d8c11c15 	stw	r3,1136(sp)
1000d9c0:	d8811b15 	stw	r2,1132(sp)
1000d9c4:	010001c4 	movi	r4,7
1000d9c8:	2081610e 	bge	r4,r2,1000df50 <___vfiprintf_internal_r+0xcac>
1000d9cc:	1802211e 	bne	r3,zero,1000e254 <___vfiprintf_internal_r+0xfb0>
1000d9d0:	d8011b15 	stw	zero,1132(sp)
1000d9d4:	9480010c 	andi	r18,r18,4
1000d9d8:	9002171e 	bne	r18,zero,1000e238 <___vfiprintf_internal_r+0xf94>
1000d9dc:	d9412417 	ldw	r5,1168(sp)
1000d9e0:	a9433716 	blt	r21,r5,1000e6c0 <___vfiprintf_internal_r+0x141c>
1000d9e4:	d8812517 	ldw	r2,1172(sp)
1000d9e8:	1545883a 	add	r2,r2,r21
1000d9ec:	d8812515 	stw	r2,1172(sp)
1000d9f0:	00019a06 	br	1000e05c <___vfiprintf_internal_r+0xdb8>
1000d9f4:	d8c12317 	ldw	r3,1164(sp)
1000d9f8:	05400044 	movi	r21,1
1000d9fc:	9811883a 	mov	r8,r19
1000da00:	18800017 	ldw	r2,0(r3)
1000da04:	18c00104 	addi	r3,r3,4
1000da08:	d8c12315 	stw	r3,1164(sp)
1000da0c:	d8c10004 	addi	r3,sp,1024
1000da10:	d8011d85 	stb	zero,1142(sp)
1000da14:	d8810005 	stb	r2,1024(sp)
1000da18:	a829883a 	mov	r20,r21
1000da1c:	d8c12215 	stw	r3,1160(sp)
1000da20:	0021883a 	mov	r16,zero
1000da24:	003f7806 	br	1000d808 <__alt_data_end+0xf800d808>
1000da28:	94800414 	ori	r18,r18,16
1000da2c:	9080080c 	andi	r2,r18,32
1000da30:	9811883a 	mov	r8,r19
1000da34:	10009026 	beq	r2,zero,1000dc78 <___vfiprintf_internal_r+0x9d4>
1000da38:	d8812317 	ldw	r2,1164(sp)
1000da3c:	d8c12317 	ldw	r3,1164(sp)
1000da40:	14c00017 	ldw	r19,0(r2)
1000da44:	15400117 	ldw	r21,4(r2)
1000da48:	18c00204 	addi	r3,r3,8
1000da4c:	d8c12315 	stw	r3,1164(sp)
1000da50:	0005883a 	mov	r2,zero
1000da54:	9d46b03a 	or	r3,r19,r21
1000da58:	d8011d85 	stb	zero,1142(sp)
1000da5c:	8029883a 	mov	r20,r16
1000da60:	002d883a 	mov	r22,zero
1000da64:	003f4606 	br	1000d780 <__alt_data_end+0xf800d780>
1000da68:	94800414 	ori	r18,r18,16
1000da6c:	9080080c 	andi	r2,r18,32
1000da70:	9811883a 	mov	r8,r19
1000da74:	10006226 	beq	r2,zero,1000dc00 <___vfiprintf_internal_r+0x95c>
1000da78:	d9012317 	ldw	r4,1164(sp)
1000da7c:	00800044 	movi	r2,1
1000da80:	24c00017 	ldw	r19,0(r4)
1000da84:	25400117 	ldw	r21,4(r4)
1000da88:	21000204 	addi	r4,r4,8
1000da8c:	d9012315 	stw	r4,1164(sp)
1000da90:	9d46b03a 	or	r3,r19,r21
1000da94:	003ff006 	br	1000da58 <__alt_data_end+0xf800da58>
1000da98:	b9800007 	ldb	r6,0(r23)
1000da9c:	00801b04 	movi	r2,108
1000daa0:	3082b226 	beq	r6,r2,1000e56c <___vfiprintf_internal_r+0x12c8>
1000daa4:	94800414 	ori	r18,r18,16
1000daa8:	003e5f06 	br	1000d428 <__alt_data_end+0xf800d428>
1000daac:	d8c12203 	ldbu	r3,1160(sp)
1000dab0:	01040074 	movhi	r4,4097
1000dab4:	21093c04 	addi	r4,r4,9456
1000dab8:	d8c11d85 	stb	r3,1142(sp)
1000dabc:	d9012715 	stw	r4,1180(sp)
1000dac0:	90c0080c 	andi	r3,r18,32
1000dac4:	9811883a 	mov	r8,r19
1000dac8:	d8812317 	ldw	r2,1164(sp)
1000dacc:	18005f26 	beq	r3,zero,1000dc4c <___vfiprintf_internal_r+0x9a8>
1000dad0:	d9012317 	ldw	r4,1164(sp)
1000dad4:	14c00017 	ldw	r19,0(r2)
1000dad8:	15400117 	ldw	r21,4(r2)
1000dadc:	21000204 	addi	r4,r4,8
1000dae0:	d9012315 	stw	r4,1164(sp)
1000dae4:	9080004c 	andi	r2,r18,1
1000dae8:	1001e226 	beq	r2,zero,1000e274 <___vfiprintf_internal_r+0xfd0>
1000daec:	9d46b03a 	or	r3,r19,r21
1000daf0:	18024e26 	beq	r3,zero,1000e42c <___vfiprintf_internal_r+0x1188>
1000daf4:	00800c04 	movi	r2,48
1000daf8:	d8811d05 	stb	r2,1140(sp)
1000dafc:	d9811d45 	stb	r6,1141(sp)
1000db00:	94800094 	ori	r18,r18,2
1000db04:	00800084 	movi	r2,2
1000db08:	003fd306 	br	1000da58 <__alt_data_end+0xf800da58>
1000db0c:	d9012317 	ldw	r4,1164(sp)
1000db10:	d9412317 	ldw	r5,1164(sp)
1000db14:	21000017 	ldw	r4,0(r4)
1000db18:	28800104 	addi	r2,r5,4
1000db1c:	d9012415 	stw	r4,1168(sp)
1000db20:	203eeb16 	blt	r4,zero,1000d6d0 <__alt_data_end+0xf800d6d0>
1000db24:	d8812315 	stw	r2,1164(sp)
1000db28:	b9800007 	ldb	r6,0(r23)
1000db2c:	003e3e06 	br	1000d428 <__alt_data_end+0xf800d428>
1000db30:	b9800007 	ldb	r6,0(r23)
1000db34:	01000a84 	movi	r4,42
1000db38:	b8800044 	addi	r2,r23,1
1000db3c:	3102d226 	beq	r6,r4,1000e688 <___vfiprintf_internal_r+0x13e4>
1000db40:	35bff404 	addi	r22,r6,-48
1000db44:	102f883a 	mov	r23,r2
1000db48:	0021883a 	mov	r16,zero
1000db4c:	adbe3736 	bltu	r21,r22,1000d42c <__alt_data_end+0xf800d42c>
1000db50:	0009883a 	mov	r4,zero
1000db54:	01400284 	movi	r5,10
1000db58:	00040b00 	call	100040b0 <__mulsi3>
1000db5c:	b9800007 	ldb	r6,0(r23)
1000db60:	b089883a 	add	r4,r22,r2
1000db64:	bdc00044 	addi	r23,r23,1
1000db68:	35bff404 	addi	r22,r6,-48
1000db6c:	adbff92e 	bgeu	r21,r22,1000db54 <__alt_data_end+0xf800db54>
1000db70:	2021883a 	mov	r16,r4
1000db74:	203e2d0e 	bge	r4,zero,1000d42c <__alt_data_end+0xf800d42c>
1000db78:	043fffc4 	movi	r16,-1
1000db7c:	003e2b06 	br	1000d42c <__alt_data_end+0xf800d42c>
1000db80:	94801014 	ori	r18,r18,64
1000db84:	b9800007 	ldb	r6,0(r23)
1000db88:	003e2706 	br	1000d428 <__alt_data_end+0xf800d428>
1000db8c:	94800814 	ori	r18,r18,32
1000db90:	b9800007 	ldb	r6,0(r23)
1000db94:	003e2406 	br	1000d428 <__alt_data_end+0xf800d428>
1000db98:	d9412317 	ldw	r5,1164(sp)
1000db9c:	d8812317 	ldw	r2,1164(sp)
1000dba0:	d8011d85 	stb	zero,1142(sp)
1000dba4:	29400017 	ldw	r5,0(r5)
1000dba8:	9811883a 	mov	r8,r19
1000dbac:	14c00104 	addi	r19,r2,4
1000dbb0:	d9412215 	stw	r5,1160(sp)
1000dbb4:	28029026 	beq	r5,zero,1000e5f8 <___vfiprintf_internal_r+0x1354>
1000dbb8:	d9012217 	ldw	r4,1160(sp)
1000dbbc:	80027616 	blt	r16,zero,1000e598 <___vfiprintf_internal_r+0x12f4>
1000dbc0:	000b883a 	mov	r5,zero
1000dbc4:	800d883a 	mov	r6,r16
1000dbc8:	da012a15 	stw	r8,1192(sp)
1000dbcc:	000bb380 	call	1000bb38 <memchr>
1000dbd0:	da012a17 	ldw	r8,1192(sp)
1000dbd4:	1002a026 	beq	r2,zero,1000e658 <___vfiprintf_internal_r+0x13b4>
1000dbd8:	d8c12217 	ldw	r3,1160(sp)
1000dbdc:	10e9c83a 	sub	r20,r2,r3
1000dbe0:	85023816 	blt	r16,r20,1000e4c4 <___vfiprintf_internal_r+0x1220>
1000dbe4:	dd811d83 	ldbu	r22,1142(sp)
1000dbe8:	dcc12315 	stw	r19,1164(sp)
1000dbec:	0021883a 	mov	r16,zero
1000dbf0:	003efd06 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000dbf4:	9080080c 	andi	r2,r18,32
1000dbf8:	9811883a 	mov	r8,r19
1000dbfc:	103f9e1e 	bne	r2,zero,1000da78 <__alt_data_end+0xf800da78>
1000dc00:	9080040c 	andi	r2,r18,16
1000dc04:	10021726 	beq	r2,zero,1000e464 <___vfiprintf_internal_r+0x11c0>
1000dc08:	d9412317 	ldw	r5,1164(sp)
1000dc0c:	002b883a 	mov	r21,zero
1000dc10:	00800044 	movi	r2,1
1000dc14:	2cc00017 	ldw	r19,0(r5)
1000dc18:	29400104 	addi	r5,r5,4
1000dc1c:	d9412315 	stw	r5,1164(sp)
1000dc20:	9807883a 	mov	r3,r19
1000dc24:	003f8c06 	br	1000da58 <__alt_data_end+0xf800da58>
1000dc28:	d8c12203 	ldbu	r3,1160(sp)
1000dc2c:	01040074 	movhi	r4,4097
1000dc30:	21094104 	addi	r4,r4,9476
1000dc34:	d8c11d85 	stb	r3,1142(sp)
1000dc38:	d9012715 	stw	r4,1180(sp)
1000dc3c:	90c0080c 	andi	r3,r18,32
1000dc40:	9811883a 	mov	r8,r19
1000dc44:	d8812317 	ldw	r2,1164(sp)
1000dc48:	183fa11e 	bne	r3,zero,1000dad0 <__alt_data_end+0xf800dad0>
1000dc4c:	90c0040c 	andi	r3,r18,16
1000dc50:	1801e526 	beq	r3,zero,1000e3e8 <___vfiprintf_internal_r+0x1144>
1000dc54:	d9412317 	ldw	r5,1164(sp)
1000dc58:	14c00017 	ldw	r19,0(r2)
1000dc5c:	002b883a 	mov	r21,zero
1000dc60:	29400104 	addi	r5,r5,4
1000dc64:	d9412315 	stw	r5,1164(sp)
1000dc68:	003f9e06 	br	1000dae4 <__alt_data_end+0xf800dae4>
1000dc6c:	9080080c 	andi	r2,r18,32
1000dc70:	9811883a 	mov	r8,r19
1000dc74:	103f701e 	bne	r2,zero,1000da38 <__alt_data_end+0xf800da38>
1000dc78:	9080040c 	andi	r2,r18,16
1000dc7c:	1001ef26 	beq	r2,zero,1000e43c <___vfiprintf_internal_r+0x1198>
1000dc80:	d9012317 	ldw	r4,1164(sp)
1000dc84:	002b883a 	mov	r21,zero
1000dc88:	0005883a 	mov	r2,zero
1000dc8c:	24c00017 	ldw	r19,0(r4)
1000dc90:	21000104 	addi	r4,r4,4
1000dc94:	d9012315 	stw	r4,1164(sp)
1000dc98:	9807883a 	mov	r3,r19
1000dc9c:	003f6e06 	br	1000da58 <__alt_data_end+0xf800da58>
1000dca0:	d8c12317 	ldw	r3,1164(sp)
1000dca4:	9811883a 	mov	r8,r19
1000dca8:	00800c04 	movi	r2,48
1000dcac:	1cc00017 	ldw	r19,0(r3)
1000dcb0:	01040074 	movhi	r4,4097
1000dcb4:	18c00104 	addi	r3,r3,4
1000dcb8:	d8811d05 	stb	r2,1140(sp)
1000dcbc:	21094104 	addi	r4,r4,9476
1000dcc0:	00801e04 	movi	r2,120
1000dcc4:	d8811d45 	stb	r2,1141(sp)
1000dcc8:	d8c12315 	stw	r3,1164(sp)
1000dccc:	002b883a 	mov	r21,zero
1000dcd0:	94800094 	ori	r18,r18,2
1000dcd4:	d9012715 	stw	r4,1180(sp)
1000dcd8:	00800084 	movi	r2,2
1000dcdc:	9807883a 	mov	r3,r19
1000dce0:	003f5d06 	br	1000da58 <__alt_data_end+0xf800da58>
1000dce4:	d8c12203 	ldbu	r3,1160(sp)
1000dce8:	9080080c 	andi	r2,r18,32
1000dcec:	9811883a 	mov	r8,r19
1000dcf0:	d8c11d85 	stb	r3,1142(sp)
1000dcf4:	1001b126 	beq	r2,zero,1000e3bc <___vfiprintf_internal_r+0x1118>
1000dcf8:	d9012317 	ldw	r4,1164(sp)
1000dcfc:	d9412517 	ldw	r5,1172(sp)
1000dd00:	20800017 	ldw	r2,0(r4)
1000dd04:	2807d7fa 	srai	r3,r5,31
1000dd08:	21000104 	addi	r4,r4,4
1000dd0c:	d9012315 	stw	r4,1164(sp)
1000dd10:	11400015 	stw	r5,0(r2)
1000dd14:	10c00115 	stw	r3,4(r2)
1000dd18:	003d9a06 	br	1000d384 <__alt_data_end+0xf800d384>
1000dd1c:	d8812207 	ldb	r2,1160(sp)
1000dd20:	1001c41e 	bne	r2,zero,1000e434 <___vfiprintf_internal_r+0x1190>
1000dd24:	00c00804 	movi	r3,32
1000dd28:	d8c12205 	stb	r3,1160(sp)
1000dd2c:	b9800007 	ldb	r6,0(r23)
1000dd30:	003dbd06 	br	1000d428 <__alt_data_end+0xf800d428>
1000dd34:	00c00ac4 	movi	r3,43
1000dd38:	d8c12205 	stb	r3,1160(sp)
1000dd3c:	b9800007 	ldb	r6,0(r23)
1000dd40:	003db906 	br	1000d428 <__alt_data_end+0xf800d428>
1000dd44:	d8c12203 	ldbu	r3,1160(sp)
1000dd48:	9080080c 	andi	r2,r18,32
1000dd4c:	9811883a 	mov	r8,r19
1000dd50:	d8c11d85 	stb	r3,1142(sp)
1000dd54:	d8c12317 	ldw	r3,1164(sp)
1000dd58:	103e7e1e 	bne	r2,zero,1000d754 <__alt_data_end+0xf800d754>
1000dd5c:	9080040c 	andi	r2,r18,16
1000dd60:	1001a926 	beq	r2,zero,1000e408 <___vfiprintf_internal_r+0x1164>
1000dd64:	1cc00017 	ldw	r19,0(r3)
1000dd68:	d9412317 	ldw	r5,1164(sp)
1000dd6c:	982bd7fa 	srai	r21,r19,31
1000dd70:	29400104 	addi	r5,r5,4
1000dd74:	d9412315 	stw	r5,1164(sp)
1000dd78:	a805883a 	mov	r2,r21
1000dd7c:	003e7b06 	br	1000d76c <__alt_data_end+0xf800d76c>
1000dd80:	94800054 	ori	r18,r18,1
1000dd84:	b9800007 	ldb	r6,0(r23)
1000dd88:	003da706 	br	1000d428 <__alt_data_end+0xf800d428>
1000dd8c:	d8c12203 	ldbu	r3,1160(sp)
1000dd90:	9811883a 	mov	r8,r19
1000dd94:	d8c11d85 	stb	r3,1142(sp)
1000dd98:	30005826 	beq	r6,zero,1000defc <___vfiprintf_internal_r+0xc58>
1000dd9c:	05400044 	movi	r21,1
1000dda0:	d8c10004 	addi	r3,sp,1024
1000dda4:	d9810005 	stb	r6,1024(sp)
1000dda8:	d8011d85 	stb	zero,1142(sp)
1000ddac:	a829883a 	mov	r20,r21
1000ddb0:	d8c12215 	stw	r3,1160(sp)
1000ddb4:	003f1a06 	br	1000da20 <__alt_data_end+0xf800da20>
1000ddb8:	d9012117 	ldw	r4,1156(sp)
1000ddbc:	d9412017 	ldw	r5,1152(sp)
1000ddc0:	d9811a04 	addi	r6,sp,1128
1000ddc4:	d9c12a15 	stw	r7,1192(sp)
1000ddc8:	db012b15 	stw	r12,1196(sp)
1000ddcc:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000ddd0:	d9c12a17 	ldw	r7,1192(sp)
1000ddd4:	db012b17 	ldw	r12,1196(sp)
1000ddd8:	10004e1e 	bne	r2,zero,1000df14 <___vfiprintf_internal_r+0xc70>
1000dddc:	d9011b17 	ldw	r4,1132(sp)
1000dde0:	d8c11c17 	ldw	r3,1136(sp)
1000dde4:	d811883a 	mov	r8,sp
1000dde8:	21400044 	addi	r5,r4,1
1000ddec:	003e9d06 	br	1000d864 <__alt_data_end+0xf800d864>
1000ddf0:	d9411b17 	ldw	r5,1132(sp)
1000ddf4:	d8c11c17 	ldw	r3,1136(sp)
1000ddf8:	28800044 	addi	r2,r5,1
1000ddfc:	d9011d87 	ldb	r4,1142(sp)
1000de00:	203eb626 	beq	r4,zero,1000d8dc <__alt_data_end+0xf800d8dc>
1000de04:	01000044 	movi	r4,1
1000de08:	d9411d84 	addi	r5,sp,1142
1000de0c:	1907883a 	add	r3,r3,r4
1000de10:	41400015 	stw	r5,0(r8)
1000de14:	41000115 	stw	r4,4(r8)
1000de18:	d8c11c15 	stw	r3,1136(sp)
1000de1c:	d8811b15 	stw	r2,1132(sp)
1000de20:	014001c4 	movi	r5,7
1000de24:	2880ce16 	blt	r5,r2,1000e160 <___vfiprintf_internal_r+0xebc>
1000de28:	100b883a 	mov	r5,r2
1000de2c:	42000204 	addi	r8,r8,8
1000de30:	10800044 	addi	r2,r2,1
1000de34:	003ea906 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000de38:	d9012117 	ldw	r4,1156(sp)
1000de3c:	d9412017 	ldw	r5,1152(sp)
1000de40:	d9811a04 	addi	r6,sp,1128
1000de44:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000de48:	1000321e 	bne	r2,zero,1000df14 <___vfiprintf_internal_r+0xc70>
1000de4c:	d9411b17 	ldw	r5,1132(sp)
1000de50:	d8c11c17 	ldw	r3,1136(sp)
1000de54:	d811883a 	mov	r8,sp
1000de58:	28800044 	addi	r2,r5,1
1000de5c:	003eba06 	br	1000d948 <__alt_data_end+0xf800d948>
1000de60:	10803fcc 	andi	r2,r2,255
1000de64:	00c00044 	movi	r3,1
1000de68:	10fe4d1e 	bne	r2,r3,1000d7a0 <__alt_data_end+0xf800d7a0>
1000de6c:	a800021e 	bne	r21,zero,1000de78 <___vfiprintf_internal_r+0xbd4>
1000de70:	00800244 	movi	r2,9
1000de74:	14c01b2e 	bgeu	r2,r19,1000dee4 <___vfiprintf_internal_r+0xc40>
1000de78:	dc012215 	stw	r16,1160(sp)
1000de7c:	dd010a04 	addi	r20,sp,1064
1000de80:	a821883a 	mov	r16,r21
1000de84:	402b883a 	mov	r21,r8
1000de88:	9809883a 	mov	r4,r19
1000de8c:	800b883a 	mov	r5,r16
1000de90:	01800284 	movi	r6,10
1000de94:	000f883a 	mov	r7,zero
1000de98:	00039680 	call	10003968 <__umoddi3>
1000de9c:	10800c04 	addi	r2,r2,48
1000dea0:	a53fffc4 	addi	r20,r20,-1
1000dea4:	9809883a 	mov	r4,r19
1000dea8:	800b883a 	mov	r5,r16
1000deac:	01800284 	movi	r6,10
1000deb0:	000f883a 	mov	r7,zero
1000deb4:	a0800005 	stb	r2,0(r20)
1000deb8:	00033280 	call	10003328 <__udivdi3>
1000debc:	1027883a 	mov	r19,r2
1000dec0:	10c4b03a 	or	r2,r2,r3
1000dec4:	1821883a 	mov	r16,r3
1000dec8:	103fef1e 	bne	r2,zero,1000de88 <__alt_data_end+0xf800de88>
1000decc:	d9011e17 	ldw	r4,1144(sp)
1000ded0:	dc012217 	ldw	r16,1160(sp)
1000ded4:	a811883a 	mov	r8,r21
1000ded8:	dd012215 	stw	r20,1160(sp)
1000dedc:	2529c83a 	sub	r20,r4,r20
1000dee0:	003e4106 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000dee4:	9cc00c04 	addi	r19,r19,48
1000dee8:	d8c109c4 	addi	r3,sp,1063
1000deec:	dcc109c5 	stb	r19,1063(sp)
1000def0:	dd012817 	ldw	r20,1184(sp)
1000def4:	d8c12215 	stw	r3,1160(sp)
1000def8:	003e3b06 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000defc:	d8811c17 	ldw	r2,1136(sp)
1000df00:	10000426 	beq	r2,zero,1000df14 <___vfiprintf_internal_r+0xc70>
1000df04:	d9012117 	ldw	r4,1156(sp)
1000df08:	d9412017 	ldw	r5,1152(sp)
1000df0c:	d9811a04 	addi	r6,sp,1128
1000df10:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000df14:	d9412017 	ldw	r5,1152(sp)
1000df18:	2880030b 	ldhu	r2,12(r5)
1000df1c:	1080100c 	andi	r2,r2,64
1000df20:	103ddc1e 	bne	r2,zero,1000d694 <__alt_data_end+0xf800d694>
1000df24:	d8812517 	ldw	r2,1172(sp)
1000df28:	003ddb06 	br	1000d698 <__alt_data_end+0xf800d698>
1000df2c:	1801061e 	bne	r3,zero,1000e348 <___vfiprintf_internal_r+0x10a4>
1000df30:	d8c12217 	ldw	r3,1160(sp)
1000df34:	00800044 	movi	r2,1
1000df38:	dd000115 	stw	r20,4(sp)
1000df3c:	d8c00015 	stw	r3,0(sp)
1000df40:	dd011c15 	stw	r20,1136(sp)
1000df44:	d8811b15 	stw	r2,1132(sp)
1000df48:	a007883a 	mov	r3,r20
1000df4c:	d811883a 	mov	r8,sp
1000df50:	42000204 	addi	r8,r8,8
1000df54:	9480010c 	andi	r18,r18,4
1000df58:	90003426 	beq	r18,zero,1000e02c <___vfiprintf_internal_r+0xd88>
1000df5c:	d9412417 	ldw	r5,1168(sp)
1000df60:	2d65c83a 	sub	r18,r5,r21
1000df64:	0480310e 	bge	zero,r18,1000e02c <___vfiprintf_internal_r+0xd88>
1000df68:	04000404 	movi	r16,16
1000df6c:	8481ad0e 	bge	r16,r18,1000e624 <___vfiprintf_internal_r+0x1380>
1000df70:	01440074 	movhi	r5,4097
1000df74:	2949a504 	addi	r5,r5,9876
1000df78:	d9011b17 	ldw	r4,1132(sp)
1000df7c:	d9412615 	stw	r5,1176(sp)
1000df80:	04c001c4 	movi	r19,7
1000df84:	dd012117 	ldw	r20,1156(sp)
1000df88:	dd812017 	ldw	r22,1152(sp)
1000df8c:	00000506 	br	1000dfa4 <___vfiprintf_internal_r+0xd00>
1000df90:	21400084 	addi	r5,r4,2
1000df94:	42000204 	addi	r8,r8,8
1000df98:	1009883a 	mov	r4,r2
1000df9c:	94bffc04 	addi	r18,r18,-16
1000dfa0:	84800d0e 	bge	r16,r18,1000dfd8 <___vfiprintf_internal_r+0xd34>
1000dfa4:	18c00404 	addi	r3,r3,16
1000dfa8:	20800044 	addi	r2,r4,1
1000dfac:	47000015 	stw	fp,0(r8)
1000dfb0:	44000115 	stw	r16,4(r8)
1000dfb4:	d8c11c15 	stw	r3,1136(sp)
1000dfb8:	d8811b15 	stw	r2,1132(sp)
1000dfbc:	98bff40e 	bge	r19,r2,1000df90 <__alt_data_end+0xf800df90>
1000dfc0:	1800291e 	bne	r3,zero,1000e068 <___vfiprintf_internal_r+0xdc4>
1000dfc4:	94bffc04 	addi	r18,r18,-16
1000dfc8:	0009883a 	mov	r4,zero
1000dfcc:	01400044 	movi	r5,1
1000dfd0:	d811883a 	mov	r8,sp
1000dfd4:	84bff316 	blt	r16,r18,1000dfa4 <__alt_data_end+0xf800dfa4>
1000dfd8:	d8812617 	ldw	r2,1176(sp)
1000dfdc:	1c87883a 	add	r3,r3,r18
1000dfe0:	44800115 	stw	r18,4(r8)
1000dfe4:	40800015 	stw	r2,0(r8)
1000dfe8:	d8c11c15 	stw	r3,1136(sp)
1000dfec:	d9411b15 	stw	r5,1132(sp)
1000dff0:	008001c4 	movi	r2,7
1000dff4:	11400d0e 	bge	r2,r5,1000e02c <___vfiprintf_internal_r+0xd88>
1000dff8:	1800061e 	bne	r3,zero,1000e014 <___vfiprintf_internal_r+0xd70>
1000dffc:	d8c12417 	ldw	r3,1168(sp)
1000e000:	a8c12e16 	blt	r21,r3,1000e4bc <___vfiprintf_internal_r+0x1218>
1000e004:	d9012517 	ldw	r4,1172(sp)
1000e008:	2549883a 	add	r4,r4,r21
1000e00c:	d9012515 	stw	r4,1172(sp)
1000e010:	00001206 	br	1000e05c <___vfiprintf_internal_r+0xdb8>
1000e014:	d9012117 	ldw	r4,1156(sp)
1000e018:	d9412017 	ldw	r5,1152(sp)
1000e01c:	d9811a04 	addi	r6,sp,1128
1000e020:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e024:	103fbb1e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e028:	d8c11c17 	ldw	r3,1136(sp)
1000e02c:	d8812417 	ldw	r2,1168(sp)
1000e030:	a880010e 	bge	r21,r2,1000e038 <___vfiprintf_internal_r+0xd94>
1000e034:	102b883a 	mov	r21,r2
1000e038:	d9012517 	ldw	r4,1172(sp)
1000e03c:	2549883a 	add	r4,r4,r21
1000e040:	d9012515 	stw	r4,1172(sp)
1000e044:	18000526 	beq	r3,zero,1000e05c <___vfiprintf_internal_r+0xdb8>
1000e048:	d9012117 	ldw	r4,1156(sp)
1000e04c:	d9412017 	ldw	r5,1152(sp)
1000e050:	d9811a04 	addi	r6,sp,1128
1000e054:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e058:	103fae1e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e05c:	d8011b15 	stw	zero,1132(sp)
1000e060:	d811883a 	mov	r8,sp
1000e064:	003cc706 	br	1000d384 <__alt_data_end+0xf800d384>
1000e068:	a009883a 	mov	r4,r20
1000e06c:	b00b883a 	mov	r5,r22
1000e070:	d9811a04 	addi	r6,sp,1128
1000e074:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e078:	103fa61e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e07c:	d9011b17 	ldw	r4,1132(sp)
1000e080:	d8c11c17 	ldw	r3,1136(sp)
1000e084:	d811883a 	mov	r8,sp
1000e088:	21400044 	addi	r5,r4,1
1000e08c:	003fc306 	br	1000df9c <__alt_data_end+0xf800df9c>
1000e090:	d9012417 	ldw	r4,1168(sp)
1000e094:	256dc83a 	sub	r22,r4,r21
1000e098:	05be1f0e 	bge	zero,r22,1000d918 <__alt_data_end+0xf800d918>
1000e09c:	04c00404 	movi	r19,16
1000e0a0:	9d81720e 	bge	r19,r22,1000e66c <___vfiprintf_internal_r+0x13c8>
1000e0a4:	00840074 	movhi	r2,4097
1000e0a8:	1089a104 	addi	r2,r2,9860
1000e0ac:	d8812615 	stw	r2,1176(sp)
1000e0b0:	028001c4 	movi	r10,7
1000e0b4:	00000506 	br	1000e0cc <___vfiprintf_internal_r+0xe28>
1000e0b8:	29000084 	addi	r4,r5,2
1000e0bc:	42000204 	addi	r8,r8,8
1000e0c0:	100b883a 	mov	r5,r2
1000e0c4:	b5bffc04 	addi	r22,r22,-16
1000e0c8:	9d800d0e 	bge	r19,r22,1000e100 <___vfiprintf_internal_r+0xe5c>
1000e0cc:	18c00404 	addi	r3,r3,16
1000e0d0:	28800044 	addi	r2,r5,1
1000e0d4:	44400015 	stw	r17,0(r8)
1000e0d8:	44c00115 	stw	r19,4(r8)
1000e0dc:	d8c11c15 	stw	r3,1136(sp)
1000e0e0:	d8811b15 	stw	r2,1132(sp)
1000e0e4:	50bff40e 	bge	r10,r2,1000e0b8 <__alt_data_end+0xf800e0b8>
1000e0e8:	1800111e 	bne	r3,zero,1000e130 <___vfiprintf_internal_r+0xe8c>
1000e0ec:	b5bffc04 	addi	r22,r22,-16
1000e0f0:	000b883a 	mov	r5,zero
1000e0f4:	01000044 	movi	r4,1
1000e0f8:	d811883a 	mov	r8,sp
1000e0fc:	9dbff316 	blt	r19,r22,1000e0cc <__alt_data_end+0xf800e0cc>
1000e100:	d9412617 	ldw	r5,1176(sp)
1000e104:	1d87883a 	add	r3,r3,r22
1000e108:	45800115 	stw	r22,4(r8)
1000e10c:	41400015 	stw	r5,0(r8)
1000e110:	d8c11c15 	stw	r3,1136(sp)
1000e114:	d9011b15 	stw	r4,1132(sp)
1000e118:	008001c4 	movi	r2,7
1000e11c:	11008516 	blt	r2,r4,1000e334 <___vfiprintf_internal_r+0x1090>
1000e120:	42000204 	addi	r8,r8,8
1000e124:	20800044 	addi	r2,r4,1
1000e128:	200b883a 	mov	r5,r4
1000e12c:	003dfa06 	br	1000d918 <__alt_data_end+0xf800d918>
1000e130:	d9012117 	ldw	r4,1156(sp)
1000e134:	d9412017 	ldw	r5,1152(sp)
1000e138:	d9811a04 	addi	r6,sp,1128
1000e13c:	da812a15 	stw	r10,1192(sp)
1000e140:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e144:	da812a17 	ldw	r10,1192(sp)
1000e148:	103f721e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e14c:	d9411b17 	ldw	r5,1132(sp)
1000e150:	d8c11c17 	ldw	r3,1136(sp)
1000e154:	d811883a 	mov	r8,sp
1000e158:	29000044 	addi	r4,r5,1
1000e15c:	003fd906 	br	1000e0c4 <__alt_data_end+0xf800e0c4>
1000e160:	1800681e 	bne	r3,zero,1000e304 <___vfiprintf_internal_r+0x1060>
1000e164:	50004d26 	beq	r10,zero,1000e29c <___vfiprintf_internal_r+0xff8>
1000e168:	d8811d04 	addi	r2,sp,1140
1000e16c:	00c00084 	movi	r3,2
1000e170:	d8800015 	stw	r2,0(sp)
1000e174:	d8c00115 	stw	r3,4(sp)
1000e178:	2005883a 	mov	r2,r4
1000e17c:	d811883a 	mov	r8,sp
1000e180:	003de006 	br	1000d904 <__alt_data_end+0xf800d904>
1000e184:	1800551e 	bne	r3,zero,1000e2dc <___vfiprintf_internal_r+0x1038>
1000e188:	000b883a 	mov	r5,zero
1000e18c:	00800044 	movi	r2,1
1000e190:	d811883a 	mov	r8,sp
1000e194:	003dde06 	br	1000d910 <__alt_data_end+0xf800d910>
1000e198:	10803fcc 	andi	r2,r2,255
1000e19c:	1000191e 	bne	r2,zero,1000e204 <___vfiprintf_internal_r+0xf60>
1000e1a0:	9080004c 	andi	r2,r18,1
1000e1a4:	10001726 	beq	r2,zero,1000e204 <___vfiprintf_internal_r+0xf60>
1000e1a8:	00800c04 	movi	r2,48
1000e1ac:	d8c109c4 	addi	r3,sp,1063
1000e1b0:	d88109c5 	stb	r2,1063(sp)
1000e1b4:	dd012817 	ldw	r20,1184(sp)
1000e1b8:	d8c12215 	stw	r3,1160(sp)
1000e1bc:	003d8a06 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e1c0:	d9012717 	ldw	r4,1180(sp)
1000e1c4:	dd010a04 	addi	r20,sp,1064
1000e1c8:	988003cc 	andi	r2,r19,15
1000e1cc:	a806973a 	slli	r3,r21,28
1000e1d0:	2085883a 	add	r2,r4,r2
1000e1d4:	9826d13a 	srli	r19,r19,4
1000e1d8:	10800003 	ldbu	r2,0(r2)
1000e1dc:	a82ad13a 	srli	r21,r21,4
1000e1e0:	a53fffc4 	addi	r20,r20,-1
1000e1e4:	1ce6b03a 	or	r19,r3,r19
1000e1e8:	a0800005 	stb	r2,0(r20)
1000e1ec:	9d44b03a 	or	r2,r19,r21
1000e1f0:	103ff51e 	bne	r2,zero,1000e1c8 <__alt_data_end+0xf800e1c8>
1000e1f4:	d9411e17 	ldw	r5,1144(sp)
1000e1f8:	dd012215 	stw	r20,1160(sp)
1000e1fc:	2d29c83a 	sub	r20,r5,r20
1000e200:	003d7906 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e204:	d8c10a04 	addi	r3,sp,1064
1000e208:	d8c12215 	stw	r3,1160(sp)
1000e20c:	003d7606 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e210:	18009e1e 	bne	r3,zero,1000e48c <___vfiprintf_internal_r+0x11e8>
1000e214:	d8811d87 	ldb	r2,1142(sp)
1000e218:	10005f26 	beq	r2,zero,1000e398 <___vfiprintf_internal_r+0x10f4>
1000e21c:	00c00044 	movi	r3,1
1000e220:	d9011d84 	addi	r4,sp,1142
1000e224:	1805883a 	mov	r2,r3
1000e228:	d9000015 	stw	r4,0(sp)
1000e22c:	d8c00115 	stw	r3,4(sp)
1000e230:	d811883a 	mov	r8,sp
1000e234:	003efc06 	br	1000de28 <__alt_data_end+0xf800de28>
1000e238:	d9412417 	ldw	r5,1168(sp)
1000e23c:	d811883a 	mov	r8,sp
1000e240:	2d65c83a 	sub	r18,r5,r21
1000e244:	04bf4816 	blt	zero,r18,1000df68 <__alt_data_end+0xf800df68>
1000e248:	003f6c06 	br	1000dffc <__alt_data_end+0xf800dffc>
1000e24c:	b829883a 	mov	r20,r23
1000e250:	003c6906 	br	1000d3f8 <__alt_data_end+0xf800d3f8>
1000e254:	d9012117 	ldw	r4,1156(sp)
1000e258:	d9412017 	ldw	r5,1152(sp)
1000e25c:	d9811a04 	addi	r6,sp,1128
1000e260:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e264:	103f2b1e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e268:	d8c11c17 	ldw	r3,1136(sp)
1000e26c:	d811883a 	mov	r8,sp
1000e270:	003f3806 	br	1000df54 <__alt_data_end+0xf800df54>
1000e274:	00800084 	movi	r2,2
1000e278:	9d46b03a 	or	r3,r19,r21
1000e27c:	003df606 	br	1000da58 <__alt_data_end+0xf800da58>
1000e280:	d9012117 	ldw	r4,1156(sp)
1000e284:	d9412017 	ldw	r5,1152(sp)
1000e288:	d9811a04 	addi	r6,sp,1128
1000e28c:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e290:	103f201e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e294:	d811883a 	mov	r8,sp
1000e298:	003cc606 	br	1000d5b4 <__alt_data_end+0xf800d5b4>
1000e29c:	000b883a 	mov	r5,zero
1000e2a0:	2005883a 	mov	r2,r4
1000e2a4:	d811883a 	mov	r8,sp
1000e2a8:	003d9906 	br	1000d910 <__alt_data_end+0xf800d910>
1000e2ac:	10803fcc 	andi	r2,r2,255
1000e2b0:	1080201c 	xori	r2,r2,128
1000e2b4:	10bfe004 	addi	r2,r2,-128
1000e2b8:	01000c04 	movi	r4,48
1000e2bc:	1100b226 	beq	r2,r4,1000e588 <___vfiprintf_internal_r+0x12e4>
1000e2c0:	d9412217 	ldw	r5,1160(sp)
1000e2c4:	d8811e17 	ldw	r2,1144(sp)
1000e2c8:	193fffc5 	stb	r4,-1(r3)
1000e2cc:	297fffc4 	addi	r5,r5,-1
1000e2d0:	d9412215 	stw	r5,1160(sp)
1000e2d4:	1169c83a 	sub	r20,r2,r5
1000e2d8:	003d4306 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e2dc:	d9012117 	ldw	r4,1156(sp)
1000e2e0:	d9412017 	ldw	r5,1152(sp)
1000e2e4:	d9811a04 	addi	r6,sp,1128
1000e2e8:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e2ec:	103f091e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e2f0:	d9411b17 	ldw	r5,1132(sp)
1000e2f4:	d8c11c17 	ldw	r3,1136(sp)
1000e2f8:	d811883a 	mov	r8,sp
1000e2fc:	28800044 	addi	r2,r5,1
1000e300:	003d8306 	br	1000d910 <__alt_data_end+0xf800d910>
1000e304:	d9012117 	ldw	r4,1156(sp)
1000e308:	d9412017 	ldw	r5,1152(sp)
1000e30c:	d9811a04 	addi	r6,sp,1128
1000e310:	da812a15 	stw	r10,1192(sp)
1000e314:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e318:	da812a17 	ldw	r10,1192(sp)
1000e31c:	103efd1e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e320:	d9411b17 	ldw	r5,1132(sp)
1000e324:	d8c11c17 	ldw	r3,1136(sp)
1000e328:	d811883a 	mov	r8,sp
1000e32c:	28800044 	addi	r2,r5,1
1000e330:	003d6a06 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000e334:	1800a01e 	bne	r3,zero,1000e5b8 <___vfiprintf_internal_r+0x1314>
1000e338:	000b883a 	mov	r5,zero
1000e33c:	00800044 	movi	r2,1
1000e340:	d811883a 	mov	r8,sp
1000e344:	003d7406 	br	1000d918 <__alt_data_end+0xf800d918>
1000e348:	d9012117 	ldw	r4,1156(sp)
1000e34c:	d9412017 	ldw	r5,1152(sp)
1000e350:	d9811a04 	addi	r6,sp,1128
1000e354:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e358:	103eee1e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e35c:	d8811b17 	ldw	r2,1132(sp)
1000e360:	d8c11c17 	ldw	r3,1136(sp)
1000e364:	d811883a 	mov	r8,sp
1000e368:	10800044 	addi	r2,r2,1
1000e36c:	003d8f06 	br	1000d9ac <__alt_data_end+0xf800d9ac>
1000e370:	04e7c83a 	sub	r19,zero,r19
1000e374:	9804c03a 	cmpne	r2,r19,zero
1000e378:	056bc83a 	sub	r21,zero,r21
1000e37c:	a8abc83a 	sub	r21,r21,r2
1000e380:	05800b44 	movi	r22,45
1000e384:	dd811d85 	stb	r22,1142(sp)
1000e388:	8029883a 	mov	r20,r16
1000e38c:	00800044 	movi	r2,1
1000e390:	9d46b03a 	or	r3,r19,r21
1000e394:	003cfa06 	br	1000d780 <__alt_data_end+0xf800d780>
1000e398:	000b883a 	mov	r5,zero
1000e39c:	00800044 	movi	r2,1
1000e3a0:	d811883a 	mov	r8,sp
1000e3a4:	503d5a26 	beq	r10,zero,1000d910 <__alt_data_end+0xf800d910>
1000e3a8:	00c00084 	movi	r3,2
1000e3ac:	d9011d04 	addi	r4,sp,1140
1000e3b0:	d9000015 	stw	r4,0(sp)
1000e3b4:	d8c00115 	stw	r3,4(sp)
1000e3b8:	003d5206 	br	1000d904 <__alt_data_end+0xf800d904>
1000e3bc:	9080040c 	andi	r2,r18,16
1000e3c0:	1000421e 	bne	r2,zero,1000e4cc <___vfiprintf_internal_r+0x1228>
1000e3c4:	9480100c 	andi	r18,r18,64
1000e3c8:	90009c26 	beq	r18,zero,1000e63c <___vfiprintf_internal_r+0x1398>
1000e3cc:	d9412317 	ldw	r5,1164(sp)
1000e3d0:	d8c12517 	ldw	r3,1172(sp)
1000e3d4:	28800017 	ldw	r2,0(r5)
1000e3d8:	29400104 	addi	r5,r5,4
1000e3dc:	d9412315 	stw	r5,1164(sp)
1000e3e0:	10c0000d 	sth	r3,0(r2)
1000e3e4:	003be706 	br	1000d384 <__alt_data_end+0xf800d384>
1000e3e8:	90c0100c 	andi	r3,r18,64
1000e3ec:	18003e26 	beq	r3,zero,1000e4e8 <___vfiprintf_internal_r+0x1244>
1000e3f0:	d8c12317 	ldw	r3,1164(sp)
1000e3f4:	14c0000b 	ldhu	r19,0(r2)
1000e3f8:	002b883a 	mov	r21,zero
1000e3fc:	18c00104 	addi	r3,r3,4
1000e400:	d8c12315 	stw	r3,1164(sp)
1000e404:	003db706 	br	1000dae4 <__alt_data_end+0xf800dae4>
1000e408:	9080100c 	andi	r2,r18,64
1000e40c:	10004c26 	beq	r2,zero,1000e540 <___vfiprintf_internal_r+0x129c>
1000e410:	1cc0000f 	ldh	r19,0(r3)
1000e414:	d8812317 	ldw	r2,1164(sp)
1000e418:	982bd7fa 	srai	r21,r19,31
1000e41c:	10800104 	addi	r2,r2,4
1000e420:	d8812315 	stw	r2,1164(sp)
1000e424:	a805883a 	mov	r2,r21
1000e428:	003cd006 	br	1000d76c <__alt_data_end+0xf800d76c>
1000e42c:	00800084 	movi	r2,2
1000e430:	003d8906 	br	1000da58 <__alt_data_end+0xf800da58>
1000e434:	b9800007 	ldb	r6,0(r23)
1000e438:	003bfb06 	br	1000d428 <__alt_data_end+0xf800d428>
1000e43c:	9080100c 	andi	r2,r18,64
1000e440:	10003726 	beq	r2,zero,1000e520 <___vfiprintf_internal_r+0x127c>
1000e444:	d9412317 	ldw	r5,1164(sp)
1000e448:	002b883a 	mov	r21,zero
1000e44c:	0005883a 	mov	r2,zero
1000e450:	2cc0000b 	ldhu	r19,0(r5)
1000e454:	29400104 	addi	r5,r5,4
1000e458:	d9412315 	stw	r5,1164(sp)
1000e45c:	9807883a 	mov	r3,r19
1000e460:	003d7d06 	br	1000da58 <__alt_data_end+0xf800da58>
1000e464:	9080100c 	andi	r2,r18,64
1000e468:	10002526 	beq	r2,zero,1000e500 <___vfiprintf_internal_r+0x125c>
1000e46c:	d8812317 	ldw	r2,1164(sp)
1000e470:	002b883a 	mov	r21,zero
1000e474:	14c0000b 	ldhu	r19,0(r2)
1000e478:	10800104 	addi	r2,r2,4
1000e47c:	d8812315 	stw	r2,1164(sp)
1000e480:	9807883a 	mov	r3,r19
1000e484:	00800044 	movi	r2,1
1000e488:	003d7306 	br	1000da58 <__alt_data_end+0xf800da58>
1000e48c:	d9012117 	ldw	r4,1156(sp)
1000e490:	d9412017 	ldw	r5,1152(sp)
1000e494:	d9811a04 	addi	r6,sp,1128
1000e498:	da812a15 	stw	r10,1192(sp)
1000e49c:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e4a0:	da812a17 	ldw	r10,1192(sp)
1000e4a4:	103e9b1e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e4a8:	d9411b17 	ldw	r5,1132(sp)
1000e4ac:	d8c11c17 	ldw	r3,1136(sp)
1000e4b0:	d811883a 	mov	r8,sp
1000e4b4:	28800044 	addi	r2,r5,1
1000e4b8:	003e5006 	br	1000ddfc <__alt_data_end+0xf800ddfc>
1000e4bc:	182b883a 	mov	r21,r3
1000e4c0:	003ed006 	br	1000e004 <__alt_data_end+0xf800e004>
1000e4c4:	8029883a 	mov	r20,r16
1000e4c8:	003dc606 	br	1000dbe4 <__alt_data_end+0xf800dbe4>
1000e4cc:	d8c12317 	ldw	r3,1164(sp)
1000e4d0:	d9012517 	ldw	r4,1172(sp)
1000e4d4:	18800017 	ldw	r2,0(r3)
1000e4d8:	18c00104 	addi	r3,r3,4
1000e4dc:	d8c12315 	stw	r3,1164(sp)
1000e4e0:	11000015 	stw	r4,0(r2)
1000e4e4:	003ba706 	br	1000d384 <__alt_data_end+0xf800d384>
1000e4e8:	d9012317 	ldw	r4,1164(sp)
1000e4ec:	14c00017 	ldw	r19,0(r2)
1000e4f0:	002b883a 	mov	r21,zero
1000e4f4:	21000104 	addi	r4,r4,4
1000e4f8:	d9012315 	stw	r4,1164(sp)
1000e4fc:	003d7906 	br	1000dae4 <__alt_data_end+0xf800dae4>
1000e500:	d8c12317 	ldw	r3,1164(sp)
1000e504:	002b883a 	mov	r21,zero
1000e508:	00800044 	movi	r2,1
1000e50c:	1cc00017 	ldw	r19,0(r3)
1000e510:	18c00104 	addi	r3,r3,4
1000e514:	d8c12315 	stw	r3,1164(sp)
1000e518:	9807883a 	mov	r3,r19
1000e51c:	003d4e06 	br	1000da58 <__alt_data_end+0xf800da58>
1000e520:	d8812317 	ldw	r2,1164(sp)
1000e524:	002b883a 	mov	r21,zero
1000e528:	14c00017 	ldw	r19,0(r2)
1000e52c:	10800104 	addi	r2,r2,4
1000e530:	d8812315 	stw	r2,1164(sp)
1000e534:	9807883a 	mov	r3,r19
1000e538:	0005883a 	mov	r2,zero
1000e53c:	003d4606 	br	1000da58 <__alt_data_end+0xf800da58>
1000e540:	1cc00017 	ldw	r19,0(r3)
1000e544:	d8c12317 	ldw	r3,1164(sp)
1000e548:	982bd7fa 	srai	r21,r19,31
1000e54c:	18c00104 	addi	r3,r3,4
1000e550:	d8c12315 	stw	r3,1164(sp)
1000e554:	a805883a 	mov	r2,r21
1000e558:	003c8406 	br	1000d76c <__alt_data_end+0xf800d76c>
1000e55c:	01040074 	movhi	r4,4097
1000e560:	2109a104 	addi	r4,r4,9860
1000e564:	d9012615 	stw	r4,1176(sp)
1000e568:	003d0606 	br	1000d984 <__alt_data_end+0xf800d984>
1000e56c:	b9800043 	ldbu	r6,1(r23)
1000e570:	94800814 	ori	r18,r18,32
1000e574:	bdc00044 	addi	r23,r23,1
1000e578:	31803fcc 	andi	r6,r6,255
1000e57c:	3180201c 	xori	r6,r6,128
1000e580:	31bfe004 	addi	r6,r6,-128
1000e584:	003ba806 	br	1000d428 <__alt_data_end+0xf800d428>
1000e588:	d8811e17 	ldw	r2,1144(sp)
1000e58c:	d8c12217 	ldw	r3,1160(sp)
1000e590:	10e9c83a 	sub	r20,r2,r3
1000e594:	003c9406 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e598:	da012a15 	stw	r8,1192(sp)
1000e59c:	000d0f80 	call	1000d0f8 <strlen>
1000e5a0:	1029883a 	mov	r20,r2
1000e5a4:	dd811d83 	ldbu	r22,1142(sp)
1000e5a8:	dcc12315 	stw	r19,1164(sp)
1000e5ac:	0021883a 	mov	r16,zero
1000e5b0:	da012a17 	ldw	r8,1192(sp)
1000e5b4:	003c8c06 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e5b8:	d9012117 	ldw	r4,1156(sp)
1000e5bc:	d9412017 	ldw	r5,1152(sp)
1000e5c0:	d9811a04 	addi	r6,sp,1128
1000e5c4:	000d1900 	call	1000d190 <__sprint_r.part.0>
1000e5c8:	103e521e 	bne	r2,zero,1000df14 <__alt_data_end+0xf800df14>
1000e5cc:	d9411b17 	ldw	r5,1132(sp)
1000e5d0:	d8c11c17 	ldw	r3,1136(sp)
1000e5d4:	d811883a 	mov	r8,sp
1000e5d8:	28800044 	addi	r2,r5,1
1000e5dc:	003cce06 	br	1000d918 <__alt_data_end+0xf800d918>
1000e5e0:	01440074 	movhi	r5,4097
1000e5e4:	2949a504 	addi	r5,r5,9876
1000e5e8:	d9412615 	stw	r5,1176(sp)
1000e5ec:	d9411b17 	ldw	r5,1132(sp)
1000e5f0:	29400044 	addi	r5,r5,1
1000e5f4:	003cad06 	br	1000d8ac <__alt_data_end+0xf800d8ac>
1000e5f8:	00800184 	movi	r2,6
1000e5fc:	1400012e 	bgeu	r2,r16,1000e604 <___vfiprintf_internal_r+0x1360>
1000e600:	1021883a 	mov	r16,r2
1000e604:	8029883a 	mov	r20,r16
1000e608:	802b883a 	mov	r21,r16
1000e60c:	80001c16 	blt	r16,zero,1000e680 <___vfiprintf_internal_r+0x13dc>
1000e610:	00c40074 	movhi	r3,4097
1000e614:	18c94604 	addi	r3,r3,9496
1000e618:	dcc12315 	stw	r19,1164(sp)
1000e61c:	d8c12215 	stw	r3,1160(sp)
1000e620:	003cff06 	br	1000da20 <__alt_data_end+0xf800da20>
1000e624:	d9411b17 	ldw	r5,1132(sp)
1000e628:	00840074 	movhi	r2,4097
1000e62c:	1089a504 	addi	r2,r2,9876
1000e630:	d8812615 	stw	r2,1176(sp)
1000e634:	29400044 	addi	r5,r5,1
1000e638:	003e6706 	br	1000dfd8 <__alt_data_end+0xf800dfd8>
1000e63c:	d9012317 	ldw	r4,1164(sp)
1000e640:	d9412517 	ldw	r5,1172(sp)
1000e644:	20800017 	ldw	r2,0(r4)
1000e648:	21000104 	addi	r4,r4,4
1000e64c:	d9012315 	stw	r4,1164(sp)
1000e650:	11400015 	stw	r5,0(r2)
1000e654:	003b4b06 	br	1000d384 <__alt_data_end+0xf800d384>
1000e658:	8029883a 	mov	r20,r16
1000e65c:	dd811d83 	ldbu	r22,1142(sp)
1000e660:	dcc12315 	stw	r19,1164(sp)
1000e664:	0021883a 	mov	r16,zero
1000e668:	003c5f06 	br	1000d7e8 <__alt_data_end+0xf800d7e8>
1000e66c:	01040074 	movhi	r4,4097
1000e670:	2109a104 	addi	r4,r4,9860
1000e674:	d9012615 	stw	r4,1176(sp)
1000e678:	1009883a 	mov	r4,r2
1000e67c:	003ea006 	br	1000e100 <__alt_data_end+0xf800e100>
1000e680:	002b883a 	mov	r21,zero
1000e684:	003fe206 	br	1000e610 <__alt_data_end+0xf800e610>
1000e688:	d9412317 	ldw	r5,1164(sp)
1000e68c:	b807883a 	mov	r3,r23
1000e690:	102f883a 	mov	r23,r2
1000e694:	2c000017 	ldw	r16,0(r5)
1000e698:	29000104 	addi	r4,r5,4
1000e69c:	d9012315 	stw	r4,1164(sp)
1000e6a0:	80000416 	blt	r16,zero,1000e6b4 <___vfiprintf_internal_r+0x1410>
1000e6a4:	19800047 	ldb	r6,1(r3)
1000e6a8:	003b5f06 	br	1000d428 <__alt_data_end+0xf800d428>
1000e6ac:	043fffc4 	movi	r16,-1
1000e6b0:	003bef06 	br	1000d670 <__alt_data_end+0xf800d670>
1000e6b4:	043fffc4 	movi	r16,-1
1000e6b8:	19800047 	ldb	r6,1(r3)
1000e6bc:	003b5a06 	br	1000d428 <__alt_data_end+0xf800d428>
1000e6c0:	282b883a 	mov	r21,r5
1000e6c4:	003cc706 	br	1000d9e4 <__alt_data_end+0xf800d9e4>

1000e6c8 <__vfiprintf_internal>:
1000e6c8:	2007883a 	mov	r3,r4
1000e6cc:	01040074 	movhi	r4,4097
1000e6d0:	21106304 	addi	r4,r4,16780
1000e6d4:	21000017 	ldw	r4,0(r4)
1000e6d8:	2805883a 	mov	r2,r5
1000e6dc:	300f883a 	mov	r7,r6
1000e6e0:	180b883a 	mov	r5,r3
1000e6e4:	100d883a 	mov	r6,r2
1000e6e8:	000d2a41 	jmpi	1000d2a4 <___vfiprintf_internal_r>

1000e6ec <_write_r>:
1000e6ec:	defffd04 	addi	sp,sp,-12
1000e6f0:	dc000015 	stw	r16,0(sp)
1000e6f4:	04040074 	movhi	r16,4097
1000e6f8:	dc400115 	stw	r17,4(sp)
1000e6fc:	84173b04 	addi	r16,r16,23788
1000e700:	2023883a 	mov	r17,r4
1000e704:	2809883a 	mov	r4,r5
1000e708:	300b883a 	mov	r5,r6
1000e70c:	380d883a 	mov	r6,r7
1000e710:	dfc00215 	stw	ra,8(sp)
1000e714:	80000015 	stw	zero,0(r16)
1000e718:	00104cc0 	call	100104cc <write>
1000e71c:	00ffffc4 	movi	r3,-1
1000e720:	10c00526 	beq	r2,r3,1000e738 <_write_r+0x4c>
1000e724:	dfc00217 	ldw	ra,8(sp)
1000e728:	dc400117 	ldw	r17,4(sp)
1000e72c:	dc000017 	ldw	r16,0(sp)
1000e730:	dec00304 	addi	sp,sp,12
1000e734:	f800283a 	ret
1000e738:	80c00017 	ldw	r3,0(r16)
1000e73c:	183ff926 	beq	r3,zero,1000e724 <__alt_data_end+0xf800e724>
1000e740:	88c00015 	stw	r3,0(r17)
1000e744:	003ff706 	br	1000e724 <__alt_data_end+0xf800e724>

1000e748 <_close_r>:
1000e748:	defffd04 	addi	sp,sp,-12
1000e74c:	dc000015 	stw	r16,0(sp)
1000e750:	04040074 	movhi	r16,4097
1000e754:	dc400115 	stw	r17,4(sp)
1000e758:	84173b04 	addi	r16,r16,23788
1000e75c:	2023883a 	mov	r17,r4
1000e760:	2809883a 	mov	r4,r5
1000e764:	dfc00215 	stw	ra,8(sp)
1000e768:	80000015 	stw	zero,0(r16)
1000e76c:	000fc280 	call	1000fc28 <close>
1000e770:	00ffffc4 	movi	r3,-1
1000e774:	10c00526 	beq	r2,r3,1000e78c <_close_r+0x44>
1000e778:	dfc00217 	ldw	ra,8(sp)
1000e77c:	dc400117 	ldw	r17,4(sp)
1000e780:	dc000017 	ldw	r16,0(sp)
1000e784:	dec00304 	addi	sp,sp,12
1000e788:	f800283a 	ret
1000e78c:	80c00017 	ldw	r3,0(r16)
1000e790:	183ff926 	beq	r3,zero,1000e778 <__alt_data_end+0xf800e778>
1000e794:	88c00015 	stw	r3,0(r17)
1000e798:	003ff706 	br	1000e778 <__alt_data_end+0xf800e778>

1000e79c <_calloc_r>:
1000e79c:	defffe04 	addi	sp,sp,-8
1000e7a0:	dc000015 	stw	r16,0(sp)
1000e7a4:	2021883a 	mov	r16,r4
1000e7a8:	2809883a 	mov	r4,r5
1000e7ac:	300b883a 	mov	r5,r6
1000e7b0:	dfc00115 	stw	ra,4(sp)
1000e7b4:	00040b00 	call	100040b0 <__mulsi3>
1000e7b8:	8009883a 	mov	r4,r16
1000e7bc:	100b883a 	mov	r5,r2
1000e7c0:	000b3900 	call	1000b390 <_malloc_r>
1000e7c4:	1021883a 	mov	r16,r2
1000e7c8:	10002826 	beq	r2,zero,1000e86c <_calloc_r+0xd0>
1000e7cc:	11bfff17 	ldw	r6,-4(r2)
1000e7d0:	00bfff04 	movi	r2,-4
1000e7d4:	00c00904 	movi	r3,36
1000e7d8:	308c703a 	and	r6,r6,r2
1000e7dc:	308d883a 	add	r6,r6,r2
1000e7e0:	19801436 	bltu	r3,r6,1000e834 <_calloc_r+0x98>
1000e7e4:	008004c4 	movi	r2,19
1000e7e8:	11800936 	bltu	r2,r6,1000e810 <_calloc_r+0x74>
1000e7ec:	8005883a 	mov	r2,r16
1000e7f0:	10000015 	stw	zero,0(r2)
1000e7f4:	10000115 	stw	zero,4(r2)
1000e7f8:	10000215 	stw	zero,8(r2)
1000e7fc:	8005883a 	mov	r2,r16
1000e800:	dfc00117 	ldw	ra,4(sp)
1000e804:	dc000017 	ldw	r16,0(sp)
1000e808:	dec00204 	addi	sp,sp,8
1000e80c:	f800283a 	ret
1000e810:	80000015 	stw	zero,0(r16)
1000e814:	80000115 	stw	zero,4(r16)
1000e818:	008006c4 	movi	r2,27
1000e81c:	11800d2e 	bgeu	r2,r6,1000e854 <_calloc_r+0xb8>
1000e820:	80000215 	stw	zero,8(r16)
1000e824:	80000315 	stw	zero,12(r16)
1000e828:	30c00c26 	beq	r6,r3,1000e85c <_calloc_r+0xc0>
1000e82c:	80800404 	addi	r2,r16,16
1000e830:	003fef06 	br	1000e7f0 <__alt_data_end+0xf800e7f0>
1000e834:	8009883a 	mov	r4,r16
1000e838:	000b883a 	mov	r5,zero
1000e83c:	000bd580 	call	1000bd58 <memset>
1000e840:	8005883a 	mov	r2,r16
1000e844:	dfc00117 	ldw	ra,4(sp)
1000e848:	dc000017 	ldw	r16,0(sp)
1000e84c:	dec00204 	addi	sp,sp,8
1000e850:	f800283a 	ret
1000e854:	80800204 	addi	r2,r16,8
1000e858:	003fe506 	br	1000e7f0 <__alt_data_end+0xf800e7f0>
1000e85c:	80000415 	stw	zero,16(r16)
1000e860:	80800604 	addi	r2,r16,24
1000e864:	80000515 	stw	zero,20(r16)
1000e868:	003fe106 	br	1000e7f0 <__alt_data_end+0xf800e7f0>
1000e86c:	0005883a 	mov	r2,zero
1000e870:	003fe306 	br	1000e800 <__alt_data_end+0xf800e800>

1000e874 <_fclose_r>:
1000e874:	28003226 	beq	r5,zero,1000e940 <_fclose_r+0xcc>
1000e878:	defffc04 	addi	sp,sp,-16
1000e87c:	dc400115 	stw	r17,4(sp)
1000e880:	2023883a 	mov	r17,r4
1000e884:	dc000015 	stw	r16,0(sp)
1000e888:	dfc00315 	stw	ra,12(sp)
1000e88c:	dc800215 	stw	r18,8(sp)
1000e890:	2821883a 	mov	r16,r5
1000e894:	000ab340 	call	1000ab34 <__sfp_lock_acquire>
1000e898:	88000226 	beq	r17,zero,1000e8a4 <_fclose_r+0x30>
1000e89c:	88800e17 	ldw	r2,56(r17)
1000e8a0:	10002926 	beq	r2,zero,1000e948 <_fclose_r+0xd4>
1000e8a4:	8080030f 	ldh	r2,12(r16)
1000e8a8:	10002226 	beq	r2,zero,1000e934 <_fclose_r+0xc0>
1000e8ac:	8809883a 	mov	r4,r17
1000e8b0:	800b883a 	mov	r5,r16
1000e8b4:	000a5680 	call	1000a568 <_fflush_r>
1000e8b8:	1025883a 	mov	r18,r2
1000e8bc:	80800b17 	ldw	r2,44(r16)
1000e8c0:	10000426 	beq	r2,zero,1000e8d4 <_fclose_r+0x60>
1000e8c4:	81400717 	ldw	r5,28(r16)
1000e8c8:	8809883a 	mov	r4,r17
1000e8cc:	103ee83a 	callr	r2
1000e8d0:	10002616 	blt	r2,zero,1000e96c <_fclose_r+0xf8>
1000e8d4:	8080030b 	ldhu	r2,12(r16)
1000e8d8:	1080200c 	andi	r2,r2,128
1000e8dc:	10001f1e 	bne	r2,zero,1000e95c <_fclose_r+0xe8>
1000e8e0:	81400c17 	ldw	r5,48(r16)
1000e8e4:	28000526 	beq	r5,zero,1000e8fc <_fclose_r+0x88>
1000e8e8:	80801004 	addi	r2,r16,64
1000e8ec:	28800226 	beq	r5,r2,1000e8f8 <_fclose_r+0x84>
1000e8f0:	8809883a 	mov	r4,r17
1000e8f4:	000ac980 	call	1000ac98 <_free_r>
1000e8f8:	80000c15 	stw	zero,48(r16)
1000e8fc:	81401117 	ldw	r5,68(r16)
1000e900:	28000326 	beq	r5,zero,1000e910 <_fclose_r+0x9c>
1000e904:	8809883a 	mov	r4,r17
1000e908:	000ac980 	call	1000ac98 <_free_r>
1000e90c:	80001115 	stw	zero,68(r16)
1000e910:	8000030d 	sth	zero,12(r16)
1000e914:	000ab380 	call	1000ab38 <__sfp_lock_release>
1000e918:	9005883a 	mov	r2,r18
1000e91c:	dfc00317 	ldw	ra,12(sp)
1000e920:	dc800217 	ldw	r18,8(sp)
1000e924:	dc400117 	ldw	r17,4(sp)
1000e928:	dc000017 	ldw	r16,0(sp)
1000e92c:	dec00404 	addi	sp,sp,16
1000e930:	f800283a 	ret
1000e934:	000ab380 	call	1000ab38 <__sfp_lock_release>
1000e938:	0005883a 	mov	r2,zero
1000e93c:	003ff706 	br	1000e91c <__alt_data_end+0xf800e91c>
1000e940:	0005883a 	mov	r2,zero
1000e944:	f800283a 	ret
1000e948:	8809883a 	mov	r4,r17
1000e94c:	000ab240 	call	1000ab24 <__sinit>
1000e950:	8080030f 	ldh	r2,12(r16)
1000e954:	103fd51e 	bne	r2,zero,1000e8ac <__alt_data_end+0xf800e8ac>
1000e958:	003ff606 	br	1000e934 <__alt_data_end+0xf800e934>
1000e95c:	81400417 	ldw	r5,16(r16)
1000e960:	8809883a 	mov	r4,r17
1000e964:	000ac980 	call	1000ac98 <_free_r>
1000e968:	003fdd06 	br	1000e8e0 <__alt_data_end+0xf800e8e0>
1000e96c:	04bfffc4 	movi	r18,-1
1000e970:	003fd806 	br	1000e8d4 <__alt_data_end+0xf800e8d4>

1000e974 <fclose>:
1000e974:	00840074 	movhi	r2,4097
1000e978:	10906304 	addi	r2,r2,16780
1000e97c:	200b883a 	mov	r5,r4
1000e980:	11000017 	ldw	r4,0(r2)
1000e984:	000e8741 	jmpi	1000e874 <_fclose_r>

1000e988 <_fputwc_r>:
1000e988:	3080030b 	ldhu	r2,12(r6)
1000e98c:	defff804 	addi	sp,sp,-32
1000e990:	dcc00415 	stw	r19,16(sp)
1000e994:	dc800315 	stw	r18,12(sp)
1000e998:	dc000115 	stw	r16,4(sp)
1000e99c:	dfc00715 	stw	ra,28(sp)
1000e9a0:	dd400615 	stw	r21,24(sp)
1000e9a4:	dd000515 	stw	r20,20(sp)
1000e9a8:	dc400215 	stw	r17,8(sp)
1000e9ac:	10c8000c 	andi	r3,r2,8192
1000e9b0:	3021883a 	mov	r16,r6
1000e9b4:	2027883a 	mov	r19,r4
1000e9b8:	2825883a 	mov	r18,r5
1000e9bc:	1800051e 	bne	r3,zero,1000e9d4 <_fputwc_r+0x4c>
1000e9c0:	30c01917 	ldw	r3,100(r6)
1000e9c4:	10880014 	ori	r2,r2,8192
1000e9c8:	3080030d 	sth	r2,12(r6)
1000e9cc:	18880014 	ori	r2,r3,8192
1000e9d0:	30801915 	stw	r2,100(r6)
1000e9d4:	000b1800 	call	1000b180 <__locale_mb_cur_max>
1000e9d8:	00c00044 	movi	r3,1
1000e9dc:	10c03e26 	beq	r2,r3,1000ead8 <_fputwc_r+0x150>
1000e9e0:	9809883a 	mov	r4,r19
1000e9e4:	d80b883a 	mov	r5,sp
1000e9e8:	900d883a 	mov	r6,r18
1000e9ec:	81c01704 	addi	r7,r16,92
1000e9f0:	000f9d80 	call	1000f9d8 <_wcrtomb_r>
1000e9f4:	1029883a 	mov	r20,r2
1000e9f8:	00bfffc4 	movi	r2,-1
1000e9fc:	a0802026 	beq	r20,r2,1000ea80 <_fputwc_r+0xf8>
1000ea00:	d9400003 	ldbu	r5,0(sp)
1000ea04:	a0001c26 	beq	r20,zero,1000ea78 <_fputwc_r+0xf0>
1000ea08:	0023883a 	mov	r17,zero
1000ea0c:	05400284 	movi	r21,10
1000ea10:	00000906 	br	1000ea38 <_fputwc_r+0xb0>
1000ea14:	80800017 	ldw	r2,0(r16)
1000ea18:	11400005 	stb	r5,0(r2)
1000ea1c:	80c00017 	ldw	r3,0(r16)
1000ea20:	18c00044 	addi	r3,r3,1
1000ea24:	80c00015 	stw	r3,0(r16)
1000ea28:	8c400044 	addi	r17,r17,1
1000ea2c:	dc45883a 	add	r2,sp,r17
1000ea30:	8d00112e 	bgeu	r17,r20,1000ea78 <_fputwc_r+0xf0>
1000ea34:	11400003 	ldbu	r5,0(r2)
1000ea38:	80c00217 	ldw	r3,8(r16)
1000ea3c:	18ffffc4 	addi	r3,r3,-1
1000ea40:	80c00215 	stw	r3,8(r16)
1000ea44:	183ff30e 	bge	r3,zero,1000ea14 <__alt_data_end+0xf800ea14>
1000ea48:	80800617 	ldw	r2,24(r16)
1000ea4c:	18801916 	blt	r3,r2,1000eab4 <_fputwc_r+0x12c>
1000ea50:	80800017 	ldw	r2,0(r16)
1000ea54:	11400005 	stb	r5,0(r2)
1000ea58:	80800017 	ldw	r2,0(r16)
1000ea5c:	10c00003 	ldbu	r3,0(r2)
1000ea60:	10800044 	addi	r2,r2,1
1000ea64:	1d402326 	beq	r3,r21,1000eaf4 <_fputwc_r+0x16c>
1000ea68:	80800015 	stw	r2,0(r16)
1000ea6c:	8c400044 	addi	r17,r17,1
1000ea70:	dc45883a 	add	r2,sp,r17
1000ea74:	8d3fef36 	bltu	r17,r20,1000ea34 <__alt_data_end+0xf800ea34>
1000ea78:	9005883a 	mov	r2,r18
1000ea7c:	00000406 	br	1000ea90 <_fputwc_r+0x108>
1000ea80:	80c0030b 	ldhu	r3,12(r16)
1000ea84:	a005883a 	mov	r2,r20
1000ea88:	18c01014 	ori	r3,r3,64
1000ea8c:	80c0030d 	sth	r3,12(r16)
1000ea90:	dfc00717 	ldw	ra,28(sp)
1000ea94:	dd400617 	ldw	r21,24(sp)
1000ea98:	dd000517 	ldw	r20,20(sp)
1000ea9c:	dcc00417 	ldw	r19,16(sp)
1000eaa0:	dc800317 	ldw	r18,12(sp)
1000eaa4:	dc400217 	ldw	r17,8(sp)
1000eaa8:	dc000117 	ldw	r16,4(sp)
1000eaac:	dec00804 	addi	sp,sp,32
1000eab0:	f800283a 	ret
1000eab4:	9809883a 	mov	r4,r19
1000eab8:	29403fcc 	andi	r5,r5,255
1000eabc:	800d883a 	mov	r6,r16
1000eac0:	000f8680 	call	1000f868 <__swbuf_r>
1000eac4:	10bfffe0 	cmpeqi	r2,r2,-1
1000eac8:	10803fcc 	andi	r2,r2,255
1000eacc:	103fd626 	beq	r2,zero,1000ea28 <__alt_data_end+0xf800ea28>
1000ead0:	00bfffc4 	movi	r2,-1
1000ead4:	003fee06 	br	1000ea90 <__alt_data_end+0xf800ea90>
1000ead8:	90ffffc4 	addi	r3,r18,-1
1000eadc:	01003f84 	movi	r4,254
1000eae0:	20ffbf36 	bltu	r4,r3,1000e9e0 <__alt_data_end+0xf800e9e0>
1000eae4:	900b883a 	mov	r5,r18
1000eae8:	dc800005 	stb	r18,0(sp)
1000eaec:	1029883a 	mov	r20,r2
1000eaf0:	003fc506 	br	1000ea08 <__alt_data_end+0xf800ea08>
1000eaf4:	9809883a 	mov	r4,r19
1000eaf8:	a80b883a 	mov	r5,r21
1000eafc:	800d883a 	mov	r6,r16
1000eb00:	000f8680 	call	1000f868 <__swbuf_r>
1000eb04:	10bfffe0 	cmpeqi	r2,r2,-1
1000eb08:	003fef06 	br	1000eac8 <__alt_data_end+0xf800eac8>

1000eb0c <fputwc>:
1000eb0c:	defffc04 	addi	sp,sp,-16
1000eb10:	dc000115 	stw	r16,4(sp)
1000eb14:	04040074 	movhi	r16,4097
1000eb18:	84106304 	addi	r16,r16,16780
1000eb1c:	dc400215 	stw	r17,8(sp)
1000eb20:	2023883a 	mov	r17,r4
1000eb24:	81000017 	ldw	r4,0(r16)
1000eb28:	dfc00315 	stw	ra,12(sp)
1000eb2c:	280d883a 	mov	r6,r5
1000eb30:	20000626 	beq	r4,zero,1000eb4c <fputwc+0x40>
1000eb34:	20800e17 	ldw	r2,56(r4)
1000eb38:	1000041e 	bne	r2,zero,1000eb4c <fputwc+0x40>
1000eb3c:	d9400015 	stw	r5,0(sp)
1000eb40:	000ab240 	call	1000ab24 <__sinit>
1000eb44:	81000017 	ldw	r4,0(r16)
1000eb48:	d9800017 	ldw	r6,0(sp)
1000eb4c:	880b883a 	mov	r5,r17
1000eb50:	dfc00317 	ldw	ra,12(sp)
1000eb54:	dc400217 	ldw	r17,8(sp)
1000eb58:	dc000117 	ldw	r16,4(sp)
1000eb5c:	dec00404 	addi	sp,sp,16
1000eb60:	000e9881 	jmpi	1000e988 <_fputwc_r>

1000eb64 <_fstat_r>:
1000eb64:	defffd04 	addi	sp,sp,-12
1000eb68:	dc000015 	stw	r16,0(sp)
1000eb6c:	04040074 	movhi	r16,4097
1000eb70:	dc400115 	stw	r17,4(sp)
1000eb74:	84173b04 	addi	r16,r16,23788
1000eb78:	2023883a 	mov	r17,r4
1000eb7c:	2809883a 	mov	r4,r5
1000eb80:	300b883a 	mov	r5,r6
1000eb84:	dfc00215 	stw	ra,8(sp)
1000eb88:	80000015 	stw	zero,0(r16)
1000eb8c:	000fd7c0 	call	1000fd7c <fstat>
1000eb90:	00ffffc4 	movi	r3,-1
1000eb94:	10c00526 	beq	r2,r3,1000ebac <_fstat_r+0x48>
1000eb98:	dfc00217 	ldw	ra,8(sp)
1000eb9c:	dc400117 	ldw	r17,4(sp)
1000eba0:	dc000017 	ldw	r16,0(sp)
1000eba4:	dec00304 	addi	sp,sp,12
1000eba8:	f800283a 	ret
1000ebac:	80c00017 	ldw	r3,0(r16)
1000ebb0:	183ff926 	beq	r3,zero,1000eb98 <__alt_data_end+0xf800eb98>
1000ebb4:	88c00015 	stw	r3,0(r17)
1000ebb8:	003ff706 	br	1000eb98 <__alt_data_end+0xf800eb98>

1000ebbc <__sfvwrite_r>:
1000ebbc:	30800217 	ldw	r2,8(r6)
1000ebc0:	10004526 	beq	r2,zero,1000ecd8 <__sfvwrite_r+0x11c>
1000ebc4:	28c0030b 	ldhu	r3,12(r5)
1000ebc8:	defff404 	addi	sp,sp,-48
1000ebcc:	dd400715 	stw	r21,28(sp)
1000ebd0:	dcc00515 	stw	r19,20(sp)
1000ebd4:	dc000215 	stw	r16,8(sp)
1000ebd8:	dfc00b15 	stw	ra,44(sp)
1000ebdc:	df000a15 	stw	fp,40(sp)
1000ebe0:	ddc00915 	stw	r23,36(sp)
1000ebe4:	dd800815 	stw	r22,32(sp)
1000ebe8:	dd000615 	stw	r20,24(sp)
1000ebec:	dc800415 	stw	r18,16(sp)
1000ebf0:	dc400315 	stw	r17,12(sp)
1000ebf4:	1880020c 	andi	r2,r3,8
1000ebf8:	2821883a 	mov	r16,r5
1000ebfc:	202b883a 	mov	r21,r4
1000ec00:	3027883a 	mov	r19,r6
1000ec04:	10002526 	beq	r2,zero,1000ec9c <__sfvwrite_r+0xe0>
1000ec08:	28800417 	ldw	r2,16(r5)
1000ec0c:	10002326 	beq	r2,zero,1000ec9c <__sfvwrite_r+0xe0>
1000ec10:	1880008c 	andi	r2,r3,2
1000ec14:	9c400017 	ldw	r17,0(r19)
1000ec18:	10003126 	beq	r2,zero,1000ece0 <__sfvwrite_r+0x124>
1000ec1c:	0029883a 	mov	r20,zero
1000ec20:	0025883a 	mov	r18,zero
1000ec24:	05810004 	movi	r22,1024
1000ec28:	a00d883a 	mov	r6,r20
1000ec2c:	a809883a 	mov	r4,r21
1000ec30:	90002526 	beq	r18,zero,1000ecc8 <__sfvwrite_r+0x10c>
1000ec34:	900f883a 	mov	r7,r18
1000ec38:	81400717 	ldw	r5,28(r16)
1000ec3c:	b480012e 	bgeu	r22,r18,1000ec44 <__sfvwrite_r+0x88>
1000ec40:	01c10004 	movi	r7,1024
1000ec44:	80800917 	ldw	r2,36(r16)
1000ec48:	103ee83a 	callr	r2
1000ec4c:	0080510e 	bge	zero,r2,1000ed94 <__sfvwrite_r+0x1d8>
1000ec50:	98c00217 	ldw	r3,8(r19)
1000ec54:	a0a9883a 	add	r20,r20,r2
1000ec58:	90a5c83a 	sub	r18,r18,r2
1000ec5c:	1885c83a 	sub	r2,r3,r2
1000ec60:	98800215 	stw	r2,8(r19)
1000ec64:	103ff01e 	bne	r2,zero,1000ec28 <__alt_data_end+0xf800ec28>
1000ec68:	0005883a 	mov	r2,zero
1000ec6c:	dfc00b17 	ldw	ra,44(sp)
1000ec70:	df000a17 	ldw	fp,40(sp)
1000ec74:	ddc00917 	ldw	r23,36(sp)
1000ec78:	dd800817 	ldw	r22,32(sp)
1000ec7c:	dd400717 	ldw	r21,28(sp)
1000ec80:	dd000617 	ldw	r20,24(sp)
1000ec84:	dcc00517 	ldw	r19,20(sp)
1000ec88:	dc800417 	ldw	r18,16(sp)
1000ec8c:	dc400317 	ldw	r17,12(sp)
1000ec90:	dc000217 	ldw	r16,8(sp)
1000ec94:	dec00c04 	addi	sp,sp,48
1000ec98:	f800283a 	ret
1000ec9c:	a809883a 	mov	r4,r21
1000eca0:	800b883a 	mov	r5,r16
1000eca4:	0008ae80 	call	10008ae8 <__swsetup_r>
1000eca8:	80c0030b 	ldhu	r3,12(r16)
1000ecac:	103fd826 	beq	r2,zero,1000ec10 <__alt_data_end+0xf800ec10>
1000ecb0:	18c01014 	ori	r3,r3,64
1000ecb4:	80c0030d 	sth	r3,12(r16)
1000ecb8:	00c00244 	movi	r3,9
1000ecbc:	00bfffc4 	movi	r2,-1
1000ecc0:	a8c00015 	stw	r3,0(r21)
1000ecc4:	003fe906 	br	1000ec6c <__alt_data_end+0xf800ec6c>
1000ecc8:	8d000017 	ldw	r20,0(r17)
1000eccc:	8c800117 	ldw	r18,4(r17)
1000ecd0:	8c400204 	addi	r17,r17,8
1000ecd4:	003fd406 	br	1000ec28 <__alt_data_end+0xf800ec28>
1000ecd8:	0005883a 	mov	r2,zero
1000ecdc:	f800283a 	ret
1000ece0:	1880004c 	andi	r2,r3,1
1000ece4:	1000301e 	bne	r2,zero,1000eda8 <__sfvwrite_r+0x1ec>
1000ece8:	002f883a 	mov	r23,zero
1000ecec:	0025883a 	mov	r18,zero
1000ecf0:	90001c26 	beq	r18,zero,1000ed64 <__sfvwrite_r+0x1a8>
1000ecf4:	1880800c 	andi	r2,r3,512
1000ecf8:	85000217 	ldw	r20,8(r16)
1000ecfc:	10006c26 	beq	r2,zero,1000eeb0 <__sfvwrite_r+0x2f4>
1000ed00:	a02d883a 	mov	r22,r20
1000ed04:	95008536 	bltu	r18,r20,1000ef1c <__sfvwrite_r+0x360>
1000ed08:	1881200c 	andi	r2,r3,1152
1000ed0c:	10009d1e 	bne	r2,zero,1000ef84 <__sfvwrite_r+0x3c8>
1000ed10:	81000017 	ldw	r4,0(r16)
1000ed14:	a039883a 	mov	fp,r20
1000ed18:	9029883a 	mov	r20,r18
1000ed1c:	b80b883a 	mov	r5,r23
1000ed20:	b00d883a 	mov	r6,r22
1000ed24:	000f1100 	call	1000f110 <memmove>
1000ed28:	80c00217 	ldw	r3,8(r16)
1000ed2c:	81000017 	ldw	r4,0(r16)
1000ed30:	9005883a 	mov	r2,r18
1000ed34:	1f39c83a 	sub	fp,r3,fp
1000ed38:	258f883a 	add	r7,r4,r22
1000ed3c:	87000215 	stw	fp,8(r16)
1000ed40:	81c00015 	stw	r7,0(r16)
1000ed44:	98c00217 	ldw	r3,8(r19)
1000ed48:	b8af883a 	add	r23,r23,r2
1000ed4c:	90a5c83a 	sub	r18,r18,r2
1000ed50:	1d05c83a 	sub	r2,r3,r20
1000ed54:	98800215 	stw	r2,8(r19)
1000ed58:	103fc326 	beq	r2,zero,1000ec68 <__alt_data_end+0xf800ec68>
1000ed5c:	80c0030b 	ldhu	r3,12(r16)
1000ed60:	903fe41e 	bne	r18,zero,1000ecf4 <__alt_data_end+0xf800ecf4>
1000ed64:	8dc00017 	ldw	r23,0(r17)
1000ed68:	8c800117 	ldw	r18,4(r17)
1000ed6c:	8c400204 	addi	r17,r17,8
1000ed70:	003fdf06 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000ed74:	000f2c80 	call	1000f2c8 <_realloc_r>
1000ed78:	102d883a 	mov	r22,r2
1000ed7c:	1000a01e 	bne	r2,zero,1000f000 <__sfvwrite_r+0x444>
1000ed80:	81400417 	ldw	r5,16(r16)
1000ed84:	a809883a 	mov	r4,r21
1000ed88:	000ac980 	call	1000ac98 <_free_r>
1000ed8c:	00800304 	movi	r2,12
1000ed90:	a8800015 	stw	r2,0(r21)
1000ed94:	80c0030b 	ldhu	r3,12(r16)
1000ed98:	00bfffc4 	movi	r2,-1
1000ed9c:	18c01014 	ori	r3,r3,64
1000eda0:	80c0030d 	sth	r3,12(r16)
1000eda4:	003fb106 	br	1000ec6c <__alt_data_end+0xf800ec6c>
1000eda8:	0029883a 	mov	r20,zero
1000edac:	0011883a 	mov	r8,zero
1000edb0:	0039883a 	mov	fp,zero
1000edb4:	0025883a 	mov	r18,zero
1000edb8:	90001f26 	beq	r18,zero,1000ee38 <__sfvwrite_r+0x27c>
1000edbc:	40006826 	beq	r8,zero,1000ef60 <__sfvwrite_r+0x3a4>
1000edc0:	a02f883a 	mov	r23,r20
1000edc4:	9500012e 	bgeu	r18,r20,1000edcc <__sfvwrite_r+0x210>
1000edc8:	902f883a 	mov	r23,r18
1000edcc:	81000017 	ldw	r4,0(r16)
1000edd0:	80800417 	ldw	r2,16(r16)
1000edd4:	b82d883a 	mov	r22,r23
1000edd8:	81800217 	ldw	r6,8(r16)
1000eddc:	81c00517 	ldw	r7,20(r16)
1000ede0:	1100022e 	bgeu	r2,r4,1000edec <__sfvwrite_r+0x230>
1000ede4:	31c7883a 	add	r3,r6,r7
1000ede8:	1dc01816 	blt	r3,r23,1000ee4c <__sfvwrite_r+0x290>
1000edec:	b9c03f16 	blt	r23,r7,1000eeec <__sfvwrite_r+0x330>
1000edf0:	80800917 	ldw	r2,36(r16)
1000edf4:	81400717 	ldw	r5,28(r16)
1000edf8:	a809883a 	mov	r4,r21
1000edfc:	da000115 	stw	r8,4(sp)
1000ee00:	e00d883a 	mov	r6,fp
1000ee04:	103ee83a 	callr	r2
1000ee08:	102d883a 	mov	r22,r2
1000ee0c:	da000117 	ldw	r8,4(sp)
1000ee10:	00bfe00e 	bge	zero,r2,1000ed94 <__alt_data_end+0xf800ed94>
1000ee14:	a5a9c83a 	sub	r20,r20,r22
1000ee18:	a0001f26 	beq	r20,zero,1000ee98 <__sfvwrite_r+0x2dc>
1000ee1c:	98800217 	ldw	r2,8(r19)
1000ee20:	e5b9883a 	add	fp,fp,r22
1000ee24:	95a5c83a 	sub	r18,r18,r22
1000ee28:	15adc83a 	sub	r22,r2,r22
1000ee2c:	9d800215 	stw	r22,8(r19)
1000ee30:	b03f8d26 	beq	r22,zero,1000ec68 <__alt_data_end+0xf800ec68>
1000ee34:	903fe11e 	bne	r18,zero,1000edbc <__alt_data_end+0xf800edbc>
1000ee38:	8f000017 	ldw	fp,0(r17)
1000ee3c:	8c800117 	ldw	r18,4(r17)
1000ee40:	0011883a 	mov	r8,zero
1000ee44:	8c400204 	addi	r17,r17,8
1000ee48:	003fdb06 	br	1000edb8 <__alt_data_end+0xf800edb8>
1000ee4c:	180d883a 	mov	r6,r3
1000ee50:	e00b883a 	mov	r5,fp
1000ee54:	da000115 	stw	r8,4(sp)
1000ee58:	d8c00015 	stw	r3,0(sp)
1000ee5c:	000f1100 	call	1000f110 <memmove>
1000ee60:	d8c00017 	ldw	r3,0(sp)
1000ee64:	80800017 	ldw	r2,0(r16)
1000ee68:	a809883a 	mov	r4,r21
1000ee6c:	800b883a 	mov	r5,r16
1000ee70:	10c5883a 	add	r2,r2,r3
1000ee74:	80800015 	stw	r2,0(r16)
1000ee78:	d8c00015 	stw	r3,0(sp)
1000ee7c:	000a5680 	call	1000a568 <_fflush_r>
1000ee80:	d8c00017 	ldw	r3,0(sp)
1000ee84:	da000117 	ldw	r8,4(sp)
1000ee88:	103fc21e 	bne	r2,zero,1000ed94 <__alt_data_end+0xf800ed94>
1000ee8c:	182d883a 	mov	r22,r3
1000ee90:	a5a9c83a 	sub	r20,r20,r22
1000ee94:	a03fe11e 	bne	r20,zero,1000ee1c <__alt_data_end+0xf800ee1c>
1000ee98:	a809883a 	mov	r4,r21
1000ee9c:	800b883a 	mov	r5,r16
1000eea0:	000a5680 	call	1000a568 <_fflush_r>
1000eea4:	103fbb1e 	bne	r2,zero,1000ed94 <__alt_data_end+0xf800ed94>
1000eea8:	0011883a 	mov	r8,zero
1000eeac:	003fdb06 	br	1000ee1c <__alt_data_end+0xf800ee1c>
1000eeb0:	81000017 	ldw	r4,0(r16)
1000eeb4:	80800417 	ldw	r2,16(r16)
1000eeb8:	1100012e 	bgeu	r2,r4,1000eec0 <__sfvwrite_r+0x304>
1000eebc:	a4805a36 	bltu	r20,r18,1000f028 <__sfvwrite_r+0x46c>
1000eec0:	81c00517 	ldw	r7,20(r16)
1000eec4:	91c01a36 	bltu	r18,r7,1000ef30 <__sfvwrite_r+0x374>
1000eec8:	80800917 	ldw	r2,36(r16)
1000eecc:	81400717 	ldw	r5,28(r16)
1000eed0:	a809883a 	mov	r4,r21
1000eed4:	b80d883a 	mov	r6,r23
1000eed8:	103ee83a 	callr	r2
1000eedc:	1029883a 	mov	r20,r2
1000eee0:	00bfac0e 	bge	zero,r2,1000ed94 <__alt_data_end+0xf800ed94>
1000eee4:	a005883a 	mov	r2,r20
1000eee8:	003f9606 	br	1000ed44 <__alt_data_end+0xf800ed44>
1000eeec:	b80d883a 	mov	r6,r23
1000eef0:	e00b883a 	mov	r5,fp
1000eef4:	da000115 	stw	r8,4(sp)
1000eef8:	000f1100 	call	1000f110 <memmove>
1000eefc:	80800217 	ldw	r2,8(r16)
1000ef00:	80c00017 	ldw	r3,0(r16)
1000ef04:	da000117 	ldw	r8,4(sp)
1000ef08:	15c5c83a 	sub	r2,r2,r23
1000ef0c:	1def883a 	add	r23,r3,r23
1000ef10:	80800215 	stw	r2,8(r16)
1000ef14:	85c00015 	stw	r23,0(r16)
1000ef18:	003fbe06 	br	1000ee14 <__alt_data_end+0xf800ee14>
1000ef1c:	81000017 	ldw	r4,0(r16)
1000ef20:	9039883a 	mov	fp,r18
1000ef24:	9029883a 	mov	r20,r18
1000ef28:	902d883a 	mov	r22,r18
1000ef2c:	003f7b06 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000ef30:	b80b883a 	mov	r5,r23
1000ef34:	900d883a 	mov	r6,r18
1000ef38:	000f1100 	call	1000f110 <memmove>
1000ef3c:	80c00217 	ldw	r3,8(r16)
1000ef40:	80800017 	ldw	r2,0(r16)
1000ef44:	9029883a 	mov	r20,r18
1000ef48:	1c87c83a 	sub	r3,r3,r18
1000ef4c:	1485883a 	add	r2,r2,r18
1000ef50:	80800015 	stw	r2,0(r16)
1000ef54:	80c00215 	stw	r3,8(r16)
1000ef58:	9005883a 	mov	r2,r18
1000ef5c:	003f7906 	br	1000ed44 <__alt_data_end+0xf800ed44>
1000ef60:	e009883a 	mov	r4,fp
1000ef64:	01400284 	movi	r5,10
1000ef68:	900d883a 	mov	r6,r18
1000ef6c:	000bb380 	call	1000bb38 <memchr>
1000ef70:	10003826 	beq	r2,zero,1000f054 <__sfvwrite_r+0x498>
1000ef74:	10800044 	addi	r2,r2,1
1000ef78:	1729c83a 	sub	r20,r2,fp
1000ef7c:	02000044 	movi	r8,1
1000ef80:	003f8f06 	br	1000edc0 <__alt_data_end+0xf800edc0>
1000ef84:	80800517 	ldw	r2,20(r16)
1000ef88:	81400417 	ldw	r5,16(r16)
1000ef8c:	87000017 	ldw	fp,0(r16)
1000ef90:	10a9883a 	add	r20,r2,r2
1000ef94:	a085883a 	add	r2,r20,r2
1000ef98:	1028d7fa 	srli	r20,r2,31
1000ef9c:	e179c83a 	sub	fp,fp,r5
1000efa0:	e1000044 	addi	r4,fp,1
1000efa4:	a085883a 	add	r2,r20,r2
1000efa8:	1029d07a 	srai	r20,r2,1
1000efac:	2485883a 	add	r2,r4,r18
1000efb0:	a00d883a 	mov	r6,r20
1000efb4:	a080022e 	bgeu	r20,r2,1000efc0 <__sfvwrite_r+0x404>
1000efb8:	1029883a 	mov	r20,r2
1000efbc:	100d883a 	mov	r6,r2
1000efc0:	18c1000c 	andi	r3,r3,1024
1000efc4:	a809883a 	mov	r4,r21
1000efc8:	183f6a26 	beq	r3,zero,1000ed74 <__alt_data_end+0xf800ed74>
1000efcc:	300b883a 	mov	r5,r6
1000efd0:	000b3900 	call	1000b390 <_malloc_r>
1000efd4:	102d883a 	mov	r22,r2
1000efd8:	103f6c26 	beq	r2,zero,1000ed8c <__alt_data_end+0xf800ed8c>
1000efdc:	81400417 	ldw	r5,16(r16)
1000efe0:	1009883a 	mov	r4,r2
1000efe4:	e00d883a 	mov	r6,fp
1000efe8:	000bc200 	call	1000bc20 <memcpy>
1000efec:	8080030b 	ldhu	r2,12(r16)
1000eff0:	00fedfc4 	movi	r3,-1153
1000eff4:	10c4703a 	and	r2,r2,r3
1000eff8:	10802014 	ori	r2,r2,128
1000effc:	8080030d 	sth	r2,12(r16)
1000f000:	b709883a 	add	r4,r22,fp
1000f004:	a707c83a 	sub	r3,r20,fp
1000f008:	85800415 	stw	r22,16(r16)
1000f00c:	85000515 	stw	r20,20(r16)
1000f010:	81000015 	stw	r4,0(r16)
1000f014:	9039883a 	mov	fp,r18
1000f018:	80c00215 	stw	r3,8(r16)
1000f01c:	9029883a 	mov	r20,r18
1000f020:	902d883a 	mov	r22,r18
1000f024:	003f3d06 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000f028:	b80b883a 	mov	r5,r23
1000f02c:	a00d883a 	mov	r6,r20
1000f030:	000f1100 	call	1000f110 <memmove>
1000f034:	80800017 	ldw	r2,0(r16)
1000f038:	a809883a 	mov	r4,r21
1000f03c:	800b883a 	mov	r5,r16
1000f040:	1505883a 	add	r2,r2,r20
1000f044:	80800015 	stw	r2,0(r16)
1000f048:	000a5680 	call	1000a568 <_fflush_r>
1000f04c:	103fa526 	beq	r2,zero,1000eee4 <__alt_data_end+0xf800eee4>
1000f050:	003f5006 	br	1000ed94 <__alt_data_end+0xf800ed94>
1000f054:	95000044 	addi	r20,r18,1
1000f058:	02000044 	movi	r8,1
1000f05c:	003f5806 	br	1000edc0 <__alt_data_end+0xf800edc0>

1000f060 <_isatty_r>:
1000f060:	defffd04 	addi	sp,sp,-12
1000f064:	dc000015 	stw	r16,0(sp)
1000f068:	04040074 	movhi	r16,4097
1000f06c:	dc400115 	stw	r17,4(sp)
1000f070:	84173b04 	addi	r16,r16,23788
1000f074:	2023883a 	mov	r17,r4
1000f078:	2809883a 	mov	r4,r5
1000f07c:	dfc00215 	stw	ra,8(sp)
1000f080:	80000015 	stw	zero,0(r16)
1000f084:	000fe840 	call	1000fe84 <isatty>
1000f088:	00ffffc4 	movi	r3,-1
1000f08c:	10c00526 	beq	r2,r3,1000f0a4 <_isatty_r+0x44>
1000f090:	dfc00217 	ldw	ra,8(sp)
1000f094:	dc400117 	ldw	r17,4(sp)
1000f098:	dc000017 	ldw	r16,0(sp)
1000f09c:	dec00304 	addi	sp,sp,12
1000f0a0:	f800283a 	ret
1000f0a4:	80c00017 	ldw	r3,0(r16)
1000f0a8:	183ff926 	beq	r3,zero,1000f090 <__alt_data_end+0xf800f090>
1000f0ac:	88c00015 	stw	r3,0(r17)
1000f0b0:	003ff706 	br	1000f090 <__alt_data_end+0xf800f090>

1000f0b4 <_lseek_r>:
1000f0b4:	defffd04 	addi	sp,sp,-12
1000f0b8:	dc000015 	stw	r16,0(sp)
1000f0bc:	04040074 	movhi	r16,4097
1000f0c0:	dc400115 	stw	r17,4(sp)
1000f0c4:	84173b04 	addi	r16,r16,23788
1000f0c8:	2023883a 	mov	r17,r4
1000f0cc:	2809883a 	mov	r4,r5
1000f0d0:	300b883a 	mov	r5,r6
1000f0d4:	380d883a 	mov	r6,r7
1000f0d8:	dfc00215 	stw	ra,8(sp)
1000f0dc:	80000015 	stw	zero,0(r16)
1000f0e0:	00100640 	call	10010064 <lseek>
1000f0e4:	00ffffc4 	movi	r3,-1
1000f0e8:	10c00526 	beq	r2,r3,1000f100 <_lseek_r+0x4c>
1000f0ec:	dfc00217 	ldw	ra,8(sp)
1000f0f0:	dc400117 	ldw	r17,4(sp)
1000f0f4:	dc000017 	ldw	r16,0(sp)
1000f0f8:	dec00304 	addi	sp,sp,12
1000f0fc:	f800283a 	ret
1000f100:	80c00017 	ldw	r3,0(r16)
1000f104:	183ff926 	beq	r3,zero,1000f0ec <__alt_data_end+0xf800f0ec>
1000f108:	88c00015 	stw	r3,0(r17)
1000f10c:	003ff706 	br	1000f0ec <__alt_data_end+0xf800f0ec>

1000f110 <memmove>:
1000f110:	2005883a 	mov	r2,r4
1000f114:	29000b2e 	bgeu	r5,r4,1000f144 <memmove+0x34>
1000f118:	298f883a 	add	r7,r5,r6
1000f11c:	21c0092e 	bgeu	r4,r7,1000f144 <memmove+0x34>
1000f120:	2187883a 	add	r3,r4,r6
1000f124:	198bc83a 	sub	r5,r3,r6
1000f128:	30004b26 	beq	r6,zero,1000f258 <memmove+0x148>
1000f12c:	39ffffc4 	addi	r7,r7,-1
1000f130:	39000003 	ldbu	r4,0(r7)
1000f134:	18ffffc4 	addi	r3,r3,-1
1000f138:	19000005 	stb	r4,0(r3)
1000f13c:	197ffb1e 	bne	r3,r5,1000f12c <__alt_data_end+0xf800f12c>
1000f140:	f800283a 	ret
1000f144:	00c003c4 	movi	r3,15
1000f148:	1980412e 	bgeu	r3,r6,1000f250 <memmove+0x140>
1000f14c:	1146b03a 	or	r3,r2,r5
1000f150:	18c000cc 	andi	r3,r3,3
1000f154:	1800411e 	bne	r3,zero,1000f25c <memmove+0x14c>
1000f158:	33fffc04 	addi	r15,r6,-16
1000f15c:	781ed13a 	srli	r15,r15,4
1000f160:	28c00104 	addi	r3,r5,4
1000f164:	13400104 	addi	r13,r2,4
1000f168:	781c913a 	slli	r14,r15,4
1000f16c:	2b000204 	addi	r12,r5,8
1000f170:	12c00204 	addi	r11,r2,8
1000f174:	73800504 	addi	r14,r14,20
1000f178:	2a800304 	addi	r10,r5,12
1000f17c:	12400304 	addi	r9,r2,12
1000f180:	2b9d883a 	add	r14,r5,r14
1000f184:	2811883a 	mov	r8,r5
1000f188:	100f883a 	mov	r7,r2
1000f18c:	41000017 	ldw	r4,0(r8)
1000f190:	39c00404 	addi	r7,r7,16
1000f194:	18c00404 	addi	r3,r3,16
1000f198:	393ffc15 	stw	r4,-16(r7)
1000f19c:	193ffc17 	ldw	r4,-16(r3)
1000f1a0:	6b400404 	addi	r13,r13,16
1000f1a4:	5ac00404 	addi	r11,r11,16
1000f1a8:	693ffc15 	stw	r4,-16(r13)
1000f1ac:	61000017 	ldw	r4,0(r12)
1000f1b0:	4a400404 	addi	r9,r9,16
1000f1b4:	42000404 	addi	r8,r8,16
1000f1b8:	593ffc15 	stw	r4,-16(r11)
1000f1bc:	51000017 	ldw	r4,0(r10)
1000f1c0:	63000404 	addi	r12,r12,16
1000f1c4:	52800404 	addi	r10,r10,16
1000f1c8:	493ffc15 	stw	r4,-16(r9)
1000f1cc:	1bbfef1e 	bne	r3,r14,1000f18c <__alt_data_end+0xf800f18c>
1000f1d0:	79000044 	addi	r4,r15,1
1000f1d4:	2008913a 	slli	r4,r4,4
1000f1d8:	328003cc 	andi	r10,r6,15
1000f1dc:	02c000c4 	movi	r11,3
1000f1e0:	1107883a 	add	r3,r2,r4
1000f1e4:	290b883a 	add	r5,r5,r4
1000f1e8:	5a801e2e 	bgeu	r11,r10,1000f264 <memmove+0x154>
1000f1ec:	1813883a 	mov	r9,r3
1000f1f0:	2811883a 	mov	r8,r5
1000f1f4:	500f883a 	mov	r7,r10
1000f1f8:	41000017 	ldw	r4,0(r8)
1000f1fc:	4a400104 	addi	r9,r9,4
1000f200:	39ffff04 	addi	r7,r7,-4
1000f204:	493fff15 	stw	r4,-4(r9)
1000f208:	42000104 	addi	r8,r8,4
1000f20c:	59fffa36 	bltu	r11,r7,1000f1f8 <__alt_data_end+0xf800f1f8>
1000f210:	513fff04 	addi	r4,r10,-4
1000f214:	2008d0ba 	srli	r4,r4,2
1000f218:	318000cc 	andi	r6,r6,3
1000f21c:	21000044 	addi	r4,r4,1
1000f220:	2109883a 	add	r4,r4,r4
1000f224:	2109883a 	add	r4,r4,r4
1000f228:	1907883a 	add	r3,r3,r4
1000f22c:	290b883a 	add	r5,r5,r4
1000f230:	30000926 	beq	r6,zero,1000f258 <memmove+0x148>
1000f234:	198d883a 	add	r6,r3,r6
1000f238:	29c00003 	ldbu	r7,0(r5)
1000f23c:	18c00044 	addi	r3,r3,1
1000f240:	29400044 	addi	r5,r5,1
1000f244:	19ffffc5 	stb	r7,-1(r3)
1000f248:	19bffb1e 	bne	r3,r6,1000f238 <__alt_data_end+0xf800f238>
1000f24c:	f800283a 	ret
1000f250:	1007883a 	mov	r3,r2
1000f254:	003ff606 	br	1000f230 <__alt_data_end+0xf800f230>
1000f258:	f800283a 	ret
1000f25c:	1007883a 	mov	r3,r2
1000f260:	003ff406 	br	1000f234 <__alt_data_end+0xf800f234>
1000f264:	500d883a 	mov	r6,r10
1000f268:	003ff106 	br	1000f230 <__alt_data_end+0xf800f230>

1000f26c <_read_r>:
1000f26c:	defffd04 	addi	sp,sp,-12
1000f270:	dc000015 	stw	r16,0(sp)
1000f274:	04040074 	movhi	r16,4097
1000f278:	dc400115 	stw	r17,4(sp)
1000f27c:	84173b04 	addi	r16,r16,23788
1000f280:	2023883a 	mov	r17,r4
1000f284:	2809883a 	mov	r4,r5
1000f288:	300b883a 	mov	r5,r6
1000f28c:	380d883a 	mov	r6,r7
1000f290:	dfc00215 	stw	ra,8(sp)
1000f294:	80000015 	stw	zero,0(r16)
1000f298:	00102480 	call	10010248 <read>
1000f29c:	00ffffc4 	movi	r3,-1
1000f2a0:	10c00526 	beq	r2,r3,1000f2b8 <_read_r+0x4c>
1000f2a4:	dfc00217 	ldw	ra,8(sp)
1000f2a8:	dc400117 	ldw	r17,4(sp)
1000f2ac:	dc000017 	ldw	r16,0(sp)
1000f2b0:	dec00304 	addi	sp,sp,12
1000f2b4:	f800283a 	ret
1000f2b8:	80c00017 	ldw	r3,0(r16)
1000f2bc:	183ff926 	beq	r3,zero,1000f2a4 <__alt_data_end+0xf800f2a4>
1000f2c0:	88c00015 	stw	r3,0(r17)
1000f2c4:	003ff706 	br	1000f2a4 <__alt_data_end+0xf800f2a4>

1000f2c8 <_realloc_r>:
1000f2c8:	defff604 	addi	sp,sp,-40
1000f2cc:	dcc00315 	stw	r19,12(sp)
1000f2d0:	dc400115 	stw	r17,4(sp)
1000f2d4:	dfc00915 	stw	ra,36(sp)
1000f2d8:	df000815 	stw	fp,32(sp)
1000f2dc:	ddc00715 	stw	r23,28(sp)
1000f2e0:	dd800615 	stw	r22,24(sp)
1000f2e4:	dd400515 	stw	r21,20(sp)
1000f2e8:	dd000415 	stw	r20,16(sp)
1000f2ec:	dc800215 	stw	r18,8(sp)
1000f2f0:	dc000015 	stw	r16,0(sp)
1000f2f4:	2827883a 	mov	r19,r5
1000f2f8:	3023883a 	mov	r17,r6
1000f2fc:	2800bf26 	beq	r5,zero,1000f5fc <_realloc_r+0x334>
1000f300:	2025883a 	mov	r18,r4
1000f304:	00101b80 	call	100101b8 <__malloc_lock>
1000f308:	98ffff17 	ldw	r3,-4(r19)
1000f30c:	01bfff04 	movi	r6,-4
1000f310:	890002c4 	addi	r4,r17,11
1000f314:	01c00584 	movi	r7,22
1000f318:	9d7ffe04 	addi	r21,r19,-8
1000f31c:	19a0703a 	and	r16,r3,r6
1000f320:	39003f2e 	bgeu	r7,r4,1000f420 <_realloc_r+0x158>
1000f324:	053ffe04 	movi	r20,-8
1000f328:	2528703a 	and	r20,r4,r20
1000f32c:	a00f883a 	mov	r7,r20
1000f330:	a0008216 	blt	r20,zero,1000f53c <_realloc_r+0x274>
1000f334:	a4408136 	bltu	r20,r17,1000f53c <_realloc_r+0x274>
1000f338:	81c03c0e 	bge	r16,r7,1000f42c <_realloc_r+0x164>
1000f33c:	07040074 	movhi	fp,4097
1000f340:	e70add04 	addi	fp,fp,11124
1000f344:	e1000217 	ldw	r4,8(fp)
1000f348:	ac05883a 	add	r2,r21,r16
1000f34c:	2080bf26 	beq	r4,r2,1000f64c <_realloc_r+0x384>
1000f350:	11000117 	ldw	r4,4(r2)
1000f354:	023fff84 	movi	r8,-2
1000f358:	2210703a 	and	r8,r4,r8
1000f35c:	1211883a 	add	r8,r2,r8
1000f360:	41400117 	ldw	r5,4(r8)
1000f364:	2940004c 	andi	r5,r5,1
1000f368:	28004a1e 	bne	r5,zero,1000f494 <_realloc_r+0x1cc>
1000f36c:	017fff04 	movi	r5,-4
1000f370:	2148703a 	and	r4,r4,r5
1000f374:	2409883a 	add	r4,r4,r16
1000f378:	21c0ad0e 	bge	r4,r7,1000f630 <_realloc_r+0x368>
1000f37c:	18c0004c 	andi	r3,r3,1
1000f380:	18007f1e 	bne	r3,zero,1000f580 <_realloc_r+0x2b8>
1000f384:	9dfffe17 	ldw	r23,-8(r19)
1000f388:	adefc83a 	sub	r23,r21,r23
1000f38c:	bd800117 	ldw	r22,4(r23)
1000f390:	b14a703a 	and	r5,r22,r5
1000f394:	216d883a 	add	r22,r4,r5
1000f398:	b1c04516 	blt	r22,r7,1000f4b0 <_realloc_r+0x1e8>
1000f39c:	10c00317 	ldw	r3,12(r2)
1000f3a0:	10800217 	ldw	r2,8(r2)
1000f3a4:	81bfff04 	addi	r6,r16,-4
1000f3a8:	bc400204 	addi	r17,r23,8
1000f3ac:	10c00315 	stw	r3,12(r2)
1000f3b0:	18800215 	stw	r2,8(r3)
1000f3b4:	b9400217 	ldw	r5,8(r23)
1000f3b8:	b8c00317 	ldw	r3,12(r23)
1000f3bc:	00800904 	movi	r2,36
1000f3c0:	28c00315 	stw	r3,12(r5)
1000f3c4:	19400215 	stw	r5,8(r3)
1000f3c8:	1180ef36 	bltu	r2,r6,1000f788 <_realloc_r+0x4c0>
1000f3cc:	008004c4 	movi	r2,19
1000f3d0:	1180da2e 	bgeu	r2,r6,1000f73c <_realloc_r+0x474>
1000f3d4:	98800017 	ldw	r2,0(r19)
1000f3d8:	b8800215 	stw	r2,8(r23)
1000f3dc:	98800117 	ldw	r2,4(r19)
1000f3e0:	b8800315 	stw	r2,12(r23)
1000f3e4:	008006c4 	movi	r2,27
1000f3e8:	1180fc2e 	bgeu	r2,r6,1000f7dc <_realloc_r+0x514>
1000f3ec:	98800217 	ldw	r2,8(r19)
1000f3f0:	b8800415 	stw	r2,16(r23)
1000f3f4:	98800317 	ldw	r2,12(r19)
1000f3f8:	b8800515 	stw	r2,20(r23)
1000f3fc:	00800904 	movi	r2,36
1000f400:	3080421e 	bne	r6,r2,1000f50c <_realloc_r+0x244>
1000f404:	98800417 	ldw	r2,16(r19)
1000f408:	9cc00604 	addi	r19,r19,24
1000f40c:	b8c00804 	addi	r3,r23,32
1000f410:	b8800615 	stw	r2,24(r23)
1000f414:	98bfff17 	ldw	r2,-4(r19)
1000f418:	b8800715 	stw	r2,28(r23)
1000f41c:	00003d06 	br	1000f514 <_realloc_r+0x24c>
1000f420:	01c00404 	movi	r7,16
1000f424:	3829883a 	mov	r20,r7
1000f428:	003fc206 	br	1000f334 <__alt_data_end+0xf800f334>
1000f42c:	9823883a 	mov	r17,r19
1000f430:	850fc83a 	sub	r7,r16,r20
1000f434:	008003c4 	movi	r2,15
1000f438:	18c0004c 	andi	r3,r3,1
1000f43c:	11c04336 	bltu	r2,r7,1000f54c <_realloc_r+0x284>
1000f440:	1c06b03a 	or	r3,r3,r16
1000f444:	a8c00115 	stw	r3,4(r21)
1000f448:	ac21883a 	add	r16,r21,r16
1000f44c:	80c00117 	ldw	r3,4(r16)
1000f450:	18c00054 	ori	r3,r3,1
1000f454:	80c00115 	stw	r3,4(r16)
1000f458:	9009883a 	mov	r4,r18
1000f45c:	00101d80 	call	100101d8 <__malloc_unlock>
1000f460:	8805883a 	mov	r2,r17
1000f464:	dfc00917 	ldw	ra,36(sp)
1000f468:	df000817 	ldw	fp,32(sp)
1000f46c:	ddc00717 	ldw	r23,28(sp)
1000f470:	dd800617 	ldw	r22,24(sp)
1000f474:	dd400517 	ldw	r21,20(sp)
1000f478:	dd000417 	ldw	r20,16(sp)
1000f47c:	dcc00317 	ldw	r19,12(sp)
1000f480:	dc800217 	ldw	r18,8(sp)
1000f484:	dc400117 	ldw	r17,4(sp)
1000f488:	dc000017 	ldw	r16,0(sp)
1000f48c:	dec00a04 	addi	sp,sp,40
1000f490:	f800283a 	ret
1000f494:	18c0004c 	andi	r3,r3,1
1000f498:	1800391e 	bne	r3,zero,1000f580 <_realloc_r+0x2b8>
1000f49c:	9dfffe17 	ldw	r23,-8(r19)
1000f4a0:	00bfff04 	movi	r2,-4
1000f4a4:	adefc83a 	sub	r23,r21,r23
1000f4a8:	b9400117 	ldw	r5,4(r23)
1000f4ac:	288a703a 	and	r5,r5,r2
1000f4b0:	2c2d883a 	add	r22,r5,r16
1000f4b4:	b1c03216 	blt	r22,r7,1000f580 <_realloc_r+0x2b8>
1000f4b8:	b8800317 	ldw	r2,12(r23)
1000f4bc:	b8c00217 	ldw	r3,8(r23)
1000f4c0:	81bfff04 	addi	r6,r16,-4
1000f4c4:	01000904 	movi	r4,36
1000f4c8:	18800315 	stw	r2,12(r3)
1000f4cc:	10c00215 	stw	r3,8(r2)
1000f4d0:	bc400204 	addi	r17,r23,8
1000f4d4:	2180ac36 	bltu	r4,r6,1000f788 <_realloc_r+0x4c0>
1000f4d8:	008004c4 	movi	r2,19
1000f4dc:	1180972e 	bgeu	r2,r6,1000f73c <_realloc_r+0x474>
1000f4e0:	98800017 	ldw	r2,0(r19)
1000f4e4:	b8800215 	stw	r2,8(r23)
1000f4e8:	98800117 	ldw	r2,4(r19)
1000f4ec:	b8800315 	stw	r2,12(r23)
1000f4f0:	008006c4 	movi	r2,27
1000f4f4:	1180b92e 	bgeu	r2,r6,1000f7dc <_realloc_r+0x514>
1000f4f8:	98800217 	ldw	r2,8(r19)
1000f4fc:	b8800415 	stw	r2,16(r23)
1000f500:	98800317 	ldw	r2,12(r19)
1000f504:	b8800515 	stw	r2,20(r23)
1000f508:	313fbe26 	beq	r6,r4,1000f404 <__alt_data_end+0xf800f404>
1000f50c:	b8c00604 	addi	r3,r23,24
1000f510:	9cc00404 	addi	r19,r19,16
1000f514:	98800017 	ldw	r2,0(r19)
1000f518:	b021883a 	mov	r16,r22
1000f51c:	b82b883a 	mov	r21,r23
1000f520:	18800015 	stw	r2,0(r3)
1000f524:	98800117 	ldw	r2,4(r19)
1000f528:	18800115 	stw	r2,4(r3)
1000f52c:	98800217 	ldw	r2,8(r19)
1000f530:	18800215 	stw	r2,8(r3)
1000f534:	b8c00117 	ldw	r3,4(r23)
1000f538:	003fbd06 	br	1000f430 <__alt_data_end+0xf800f430>
1000f53c:	00800304 	movi	r2,12
1000f540:	90800015 	stw	r2,0(r18)
1000f544:	0005883a 	mov	r2,zero
1000f548:	003fc606 	br	1000f464 <__alt_data_end+0xf800f464>
1000f54c:	1d06b03a 	or	r3,r3,r20
1000f550:	ad0b883a 	add	r5,r21,r20
1000f554:	a8c00115 	stw	r3,4(r21)
1000f558:	38800054 	ori	r2,r7,1
1000f55c:	28800115 	stw	r2,4(r5)
1000f560:	29cf883a 	add	r7,r5,r7
1000f564:	38800117 	ldw	r2,4(r7)
1000f568:	9009883a 	mov	r4,r18
1000f56c:	29400204 	addi	r5,r5,8
1000f570:	10800054 	ori	r2,r2,1
1000f574:	38800115 	stw	r2,4(r7)
1000f578:	000ac980 	call	1000ac98 <_free_r>
1000f57c:	003fb606 	br	1000f458 <__alt_data_end+0xf800f458>
1000f580:	880b883a 	mov	r5,r17
1000f584:	9009883a 	mov	r4,r18
1000f588:	000b3900 	call	1000b390 <_malloc_r>
1000f58c:	1023883a 	mov	r17,r2
1000f590:	1000aa26 	beq	r2,zero,1000f83c <_realloc_r+0x574>
1000f594:	98ffff17 	ldw	r3,-4(r19)
1000f598:	113ffe04 	addi	r4,r2,-8
1000f59c:	00bfff84 	movi	r2,-2
1000f5a0:	1884703a 	and	r2,r3,r2
1000f5a4:	a885883a 	add	r2,r21,r2
1000f5a8:	20808626 	beq	r4,r2,1000f7c4 <_realloc_r+0x4fc>
1000f5ac:	81bfff04 	addi	r6,r16,-4
1000f5b0:	00800904 	movi	r2,36
1000f5b4:	11807036 	bltu	r2,r6,1000f778 <_realloc_r+0x4b0>
1000f5b8:	00c004c4 	movi	r3,19
1000f5bc:	19805636 	bltu	r3,r6,1000f718 <_realloc_r+0x450>
1000f5c0:	8805883a 	mov	r2,r17
1000f5c4:	9807883a 	mov	r3,r19
1000f5c8:	19000017 	ldw	r4,0(r3)
1000f5cc:	11000015 	stw	r4,0(r2)
1000f5d0:	19000117 	ldw	r4,4(r3)
1000f5d4:	11000115 	stw	r4,4(r2)
1000f5d8:	18c00217 	ldw	r3,8(r3)
1000f5dc:	10c00215 	stw	r3,8(r2)
1000f5e0:	980b883a 	mov	r5,r19
1000f5e4:	9009883a 	mov	r4,r18
1000f5e8:	000ac980 	call	1000ac98 <_free_r>
1000f5ec:	9009883a 	mov	r4,r18
1000f5f0:	00101d80 	call	100101d8 <__malloc_unlock>
1000f5f4:	8805883a 	mov	r2,r17
1000f5f8:	003f9a06 	br	1000f464 <__alt_data_end+0xf800f464>
1000f5fc:	300b883a 	mov	r5,r6
1000f600:	dfc00917 	ldw	ra,36(sp)
1000f604:	df000817 	ldw	fp,32(sp)
1000f608:	ddc00717 	ldw	r23,28(sp)
1000f60c:	dd800617 	ldw	r22,24(sp)
1000f610:	dd400517 	ldw	r21,20(sp)
1000f614:	dd000417 	ldw	r20,16(sp)
1000f618:	dcc00317 	ldw	r19,12(sp)
1000f61c:	dc800217 	ldw	r18,8(sp)
1000f620:	dc400117 	ldw	r17,4(sp)
1000f624:	dc000017 	ldw	r16,0(sp)
1000f628:	dec00a04 	addi	sp,sp,40
1000f62c:	000b3901 	jmpi	1000b390 <_malloc_r>
1000f630:	11400317 	ldw	r5,12(r2)
1000f634:	10800217 	ldw	r2,8(r2)
1000f638:	9823883a 	mov	r17,r19
1000f63c:	2021883a 	mov	r16,r4
1000f640:	11400315 	stw	r5,12(r2)
1000f644:	28800215 	stw	r2,8(r5)
1000f648:	003f7906 	br	1000f430 <__alt_data_end+0xf800f430>
1000f64c:	21000117 	ldw	r4,4(r4)
1000f650:	00bfff04 	movi	r2,-4
1000f654:	a1800404 	addi	r6,r20,16
1000f658:	2088703a 	and	r4,r4,r2
1000f65c:	2409883a 	add	r4,r4,r16
1000f660:	2180380e 	bge	r4,r6,1000f744 <_realloc_r+0x47c>
1000f664:	18c0004c 	andi	r3,r3,1
1000f668:	183fc51e 	bne	r3,zero,1000f580 <__alt_data_end+0xf800f580>
1000f66c:	9dfffe17 	ldw	r23,-8(r19)
1000f670:	adefc83a 	sub	r23,r21,r23
1000f674:	b9400117 	ldw	r5,4(r23)
1000f678:	288a703a 	and	r5,r5,r2
1000f67c:	216d883a 	add	r22,r4,r5
1000f680:	b1bf8b16 	blt	r22,r6,1000f4b0 <__alt_data_end+0xf800f4b0>
1000f684:	b8800317 	ldw	r2,12(r23)
1000f688:	b8c00217 	ldw	r3,8(r23)
1000f68c:	81bfff04 	addi	r6,r16,-4
1000f690:	01000904 	movi	r4,36
1000f694:	18800315 	stw	r2,12(r3)
1000f698:	10c00215 	stw	r3,8(r2)
1000f69c:	bc400204 	addi	r17,r23,8
1000f6a0:	21805a36 	bltu	r4,r6,1000f80c <_realloc_r+0x544>
1000f6a4:	008004c4 	movi	r2,19
1000f6a8:	1180562e 	bgeu	r2,r6,1000f804 <_realloc_r+0x53c>
1000f6ac:	98800017 	ldw	r2,0(r19)
1000f6b0:	b8800215 	stw	r2,8(r23)
1000f6b4:	98800117 	ldw	r2,4(r19)
1000f6b8:	b8800315 	stw	r2,12(r23)
1000f6bc:	008006c4 	movi	r2,27
1000f6c0:	11805636 	bltu	r2,r6,1000f81c <_realloc_r+0x554>
1000f6c4:	b8800404 	addi	r2,r23,16
1000f6c8:	9cc00204 	addi	r19,r19,8
1000f6cc:	98c00017 	ldw	r3,0(r19)
1000f6d0:	10c00015 	stw	r3,0(r2)
1000f6d4:	98c00117 	ldw	r3,4(r19)
1000f6d8:	10c00115 	stw	r3,4(r2)
1000f6dc:	98c00217 	ldw	r3,8(r19)
1000f6e0:	10c00215 	stw	r3,8(r2)
1000f6e4:	bd07883a 	add	r3,r23,r20
1000f6e8:	b505c83a 	sub	r2,r22,r20
1000f6ec:	e0c00215 	stw	r3,8(fp)
1000f6f0:	10800054 	ori	r2,r2,1
1000f6f4:	18800115 	stw	r2,4(r3)
1000f6f8:	b8800117 	ldw	r2,4(r23)
1000f6fc:	9009883a 	mov	r4,r18
1000f700:	1080004c 	andi	r2,r2,1
1000f704:	a0a8b03a 	or	r20,r20,r2
1000f708:	bd000115 	stw	r20,4(r23)
1000f70c:	00101d80 	call	100101d8 <__malloc_unlock>
1000f710:	8805883a 	mov	r2,r17
1000f714:	003f5306 	br	1000f464 <__alt_data_end+0xf800f464>
1000f718:	98c00017 	ldw	r3,0(r19)
1000f71c:	88c00015 	stw	r3,0(r17)
1000f720:	98c00117 	ldw	r3,4(r19)
1000f724:	88c00115 	stw	r3,4(r17)
1000f728:	00c006c4 	movi	r3,27
1000f72c:	19801d36 	bltu	r3,r6,1000f7a4 <_realloc_r+0x4dc>
1000f730:	88800204 	addi	r2,r17,8
1000f734:	98c00204 	addi	r3,r19,8
1000f738:	003fa306 	br	1000f5c8 <__alt_data_end+0xf800f5c8>
1000f73c:	8807883a 	mov	r3,r17
1000f740:	003f7406 	br	1000f514 <__alt_data_end+0xf800f514>
1000f744:	ad2b883a 	add	r21,r21,r20
1000f748:	2505c83a 	sub	r2,r4,r20
1000f74c:	e5400215 	stw	r21,8(fp)
1000f750:	10800054 	ori	r2,r2,1
1000f754:	a8800115 	stw	r2,4(r21)
1000f758:	98bfff17 	ldw	r2,-4(r19)
1000f75c:	9009883a 	mov	r4,r18
1000f760:	1080004c 	andi	r2,r2,1
1000f764:	a0a8b03a 	or	r20,r20,r2
1000f768:	9d3fff15 	stw	r20,-4(r19)
1000f76c:	00101d80 	call	100101d8 <__malloc_unlock>
1000f770:	9805883a 	mov	r2,r19
1000f774:	003f3b06 	br	1000f464 <__alt_data_end+0xf800f464>
1000f778:	8809883a 	mov	r4,r17
1000f77c:	980b883a 	mov	r5,r19
1000f780:	000f1100 	call	1000f110 <memmove>
1000f784:	003f9606 	br	1000f5e0 <__alt_data_end+0xf800f5e0>
1000f788:	8809883a 	mov	r4,r17
1000f78c:	980b883a 	mov	r5,r19
1000f790:	000f1100 	call	1000f110 <memmove>
1000f794:	b8c00117 	ldw	r3,4(r23)
1000f798:	b021883a 	mov	r16,r22
1000f79c:	b82b883a 	mov	r21,r23
1000f7a0:	003f2306 	br	1000f430 <__alt_data_end+0xf800f430>
1000f7a4:	98c00217 	ldw	r3,8(r19)
1000f7a8:	88c00215 	stw	r3,8(r17)
1000f7ac:	98c00317 	ldw	r3,12(r19)
1000f7b0:	88c00315 	stw	r3,12(r17)
1000f7b4:	30800c26 	beq	r6,r2,1000f7e8 <_realloc_r+0x520>
1000f7b8:	88800404 	addi	r2,r17,16
1000f7bc:	98c00404 	addi	r3,r19,16
1000f7c0:	003f8106 	br	1000f5c8 <__alt_data_end+0xf800f5c8>
1000f7c4:	893fff17 	ldw	r4,-4(r17)
1000f7c8:	00bfff04 	movi	r2,-4
1000f7cc:	9823883a 	mov	r17,r19
1000f7d0:	2084703a 	and	r2,r4,r2
1000f7d4:	80a1883a 	add	r16,r16,r2
1000f7d8:	003f1506 	br	1000f430 <__alt_data_end+0xf800f430>
1000f7dc:	b8c00404 	addi	r3,r23,16
1000f7e0:	9cc00204 	addi	r19,r19,8
1000f7e4:	003f4b06 	br	1000f514 <__alt_data_end+0xf800f514>
1000f7e8:	99000417 	ldw	r4,16(r19)
1000f7ec:	88800604 	addi	r2,r17,24
1000f7f0:	98c00604 	addi	r3,r19,24
1000f7f4:	89000415 	stw	r4,16(r17)
1000f7f8:	99000517 	ldw	r4,20(r19)
1000f7fc:	89000515 	stw	r4,20(r17)
1000f800:	003f7106 	br	1000f5c8 <__alt_data_end+0xf800f5c8>
1000f804:	8805883a 	mov	r2,r17
1000f808:	003fb006 	br	1000f6cc <__alt_data_end+0xf800f6cc>
1000f80c:	8809883a 	mov	r4,r17
1000f810:	980b883a 	mov	r5,r19
1000f814:	000f1100 	call	1000f110 <memmove>
1000f818:	003fb206 	br	1000f6e4 <__alt_data_end+0xf800f6e4>
1000f81c:	98800217 	ldw	r2,8(r19)
1000f820:	b8800415 	stw	r2,16(r23)
1000f824:	98800317 	ldw	r2,12(r19)
1000f828:	b8800515 	stw	r2,20(r23)
1000f82c:	31000726 	beq	r6,r4,1000f84c <_realloc_r+0x584>
1000f830:	b8800604 	addi	r2,r23,24
1000f834:	9cc00404 	addi	r19,r19,16
1000f838:	003fa406 	br	1000f6cc <__alt_data_end+0xf800f6cc>
1000f83c:	9009883a 	mov	r4,r18
1000f840:	00101d80 	call	100101d8 <__malloc_unlock>
1000f844:	0005883a 	mov	r2,zero
1000f848:	003f0606 	br	1000f464 <__alt_data_end+0xf800f464>
1000f84c:	98c00417 	ldw	r3,16(r19)
1000f850:	9cc00604 	addi	r19,r19,24
1000f854:	b8800804 	addi	r2,r23,32
1000f858:	b8c00615 	stw	r3,24(r23)
1000f85c:	98ffff17 	ldw	r3,-4(r19)
1000f860:	b8c00715 	stw	r3,28(r23)
1000f864:	003f9906 	br	1000f6cc <__alt_data_end+0xf800f6cc>

1000f868 <__swbuf_r>:
1000f868:	defffc04 	addi	sp,sp,-16
1000f86c:	dc800215 	stw	r18,8(sp)
1000f870:	dc400115 	stw	r17,4(sp)
1000f874:	dc000015 	stw	r16,0(sp)
1000f878:	dfc00315 	stw	ra,12(sp)
1000f87c:	2025883a 	mov	r18,r4
1000f880:	2823883a 	mov	r17,r5
1000f884:	3021883a 	mov	r16,r6
1000f888:	20000226 	beq	r4,zero,1000f894 <__swbuf_r+0x2c>
1000f88c:	20800e17 	ldw	r2,56(r4)
1000f890:	10004126 	beq	r2,zero,1000f998 <__swbuf_r+0x130>
1000f894:	80c00617 	ldw	r3,24(r16)
1000f898:	8180030b 	ldhu	r6,12(r16)
1000f89c:	80c00215 	stw	r3,8(r16)
1000f8a0:	30c0020c 	andi	r3,r6,8
1000f8a4:	18003526 	beq	r3,zero,1000f97c <__swbuf_r+0x114>
1000f8a8:	80c00417 	ldw	r3,16(r16)
1000f8ac:	18003326 	beq	r3,zero,1000f97c <__swbuf_r+0x114>
1000f8b0:	3088000c 	andi	r2,r6,8192
1000f8b4:	8c403fcc 	andi	r17,r17,255
1000f8b8:	10001726 	beq	r2,zero,1000f918 <__swbuf_r+0xb0>
1000f8bc:	80800017 	ldw	r2,0(r16)
1000f8c0:	81000517 	ldw	r4,20(r16)
1000f8c4:	10c7c83a 	sub	r3,r2,r3
1000f8c8:	19001d0e 	bge	r3,r4,1000f940 <__swbuf_r+0xd8>
1000f8cc:	18c00044 	addi	r3,r3,1
1000f8d0:	81400217 	ldw	r5,8(r16)
1000f8d4:	11000044 	addi	r4,r2,1
1000f8d8:	81000015 	stw	r4,0(r16)
1000f8dc:	297fffc4 	addi	r5,r5,-1
1000f8e0:	81400215 	stw	r5,8(r16)
1000f8e4:	14400005 	stb	r17,0(r2)
1000f8e8:	80800517 	ldw	r2,20(r16)
1000f8ec:	10c01d26 	beq	r2,r3,1000f964 <__swbuf_r+0xfc>
1000f8f0:	8080030b 	ldhu	r2,12(r16)
1000f8f4:	1080004c 	andi	r2,r2,1
1000f8f8:	1000181e 	bne	r2,zero,1000f95c <__swbuf_r+0xf4>
1000f8fc:	8805883a 	mov	r2,r17
1000f900:	dfc00317 	ldw	ra,12(sp)
1000f904:	dc800217 	ldw	r18,8(sp)
1000f908:	dc400117 	ldw	r17,4(sp)
1000f90c:	dc000017 	ldw	r16,0(sp)
1000f910:	dec00404 	addi	sp,sp,16
1000f914:	f800283a 	ret
1000f918:	81001917 	ldw	r4,100(r16)
1000f91c:	00b7ffc4 	movi	r2,-8193
1000f920:	31880014 	ori	r6,r6,8192
1000f924:	2084703a 	and	r2,r4,r2
1000f928:	80801915 	stw	r2,100(r16)
1000f92c:	80800017 	ldw	r2,0(r16)
1000f930:	81000517 	ldw	r4,20(r16)
1000f934:	8180030d 	sth	r6,12(r16)
1000f938:	10c7c83a 	sub	r3,r2,r3
1000f93c:	193fe316 	blt	r3,r4,1000f8cc <__alt_data_end+0xf800f8cc>
1000f940:	9009883a 	mov	r4,r18
1000f944:	800b883a 	mov	r5,r16
1000f948:	000a5680 	call	1000a568 <_fflush_r>
1000f94c:	1000091e 	bne	r2,zero,1000f974 <__swbuf_r+0x10c>
1000f950:	80800017 	ldw	r2,0(r16)
1000f954:	00c00044 	movi	r3,1
1000f958:	003fdd06 	br	1000f8d0 <__alt_data_end+0xf800f8d0>
1000f95c:	00800284 	movi	r2,10
1000f960:	88bfe61e 	bne	r17,r2,1000f8fc <__alt_data_end+0xf800f8fc>
1000f964:	9009883a 	mov	r4,r18
1000f968:	800b883a 	mov	r5,r16
1000f96c:	000a5680 	call	1000a568 <_fflush_r>
1000f970:	103fe226 	beq	r2,zero,1000f8fc <__alt_data_end+0xf800f8fc>
1000f974:	00bfffc4 	movi	r2,-1
1000f978:	003fe106 	br	1000f900 <__alt_data_end+0xf800f900>
1000f97c:	9009883a 	mov	r4,r18
1000f980:	800b883a 	mov	r5,r16
1000f984:	0008ae80 	call	10008ae8 <__swsetup_r>
1000f988:	1000051e 	bne	r2,zero,1000f9a0 <__swbuf_r+0x138>
1000f98c:	8180030b 	ldhu	r6,12(r16)
1000f990:	80c00417 	ldw	r3,16(r16)
1000f994:	003fc606 	br	1000f8b0 <__alt_data_end+0xf800f8b0>
1000f998:	000ab240 	call	1000ab24 <__sinit>
1000f99c:	003fbd06 	br	1000f894 <__alt_data_end+0xf800f894>
1000f9a0:	80c0030b 	ldhu	r3,12(r16)
1000f9a4:	00bfffc4 	movi	r2,-1
1000f9a8:	18c01014 	ori	r3,r3,64
1000f9ac:	80c0030d 	sth	r3,12(r16)
1000f9b0:	00c00244 	movi	r3,9
1000f9b4:	90c00015 	stw	r3,0(r18)
1000f9b8:	003fd106 	br	1000f900 <__alt_data_end+0xf800f900>

1000f9bc <__swbuf>:
1000f9bc:	00c40074 	movhi	r3,4097
1000f9c0:	18d06304 	addi	r3,r3,16780
1000f9c4:	2005883a 	mov	r2,r4
1000f9c8:	19000017 	ldw	r4,0(r3)
1000f9cc:	280d883a 	mov	r6,r5
1000f9d0:	100b883a 	mov	r5,r2
1000f9d4:	000f8681 	jmpi	1000f868 <__swbuf_r>

1000f9d8 <_wcrtomb_r>:
1000f9d8:	defff604 	addi	sp,sp,-40
1000f9dc:	00840074 	movhi	r2,4097
1000f9e0:	dc800815 	stw	r18,32(sp)
1000f9e4:	dc400715 	stw	r17,28(sp)
1000f9e8:	dc000615 	stw	r16,24(sp)
1000f9ec:	10906704 	addi	r2,r2,16796
1000f9f0:	dfc00915 	stw	ra,36(sp)
1000f9f4:	2021883a 	mov	r16,r4
1000f9f8:	3823883a 	mov	r17,r7
1000f9fc:	14800017 	ldw	r18,0(r2)
1000fa00:	28001426 	beq	r5,zero,1000fa54 <_wcrtomb_r+0x7c>
1000fa04:	d9400415 	stw	r5,16(sp)
1000fa08:	d9800515 	stw	r6,20(sp)
1000fa0c:	000b1740 	call	1000b174 <__locale_charset>
1000fa10:	d9400417 	ldw	r5,16(sp)
1000fa14:	d9800517 	ldw	r6,20(sp)
1000fa18:	8009883a 	mov	r4,r16
1000fa1c:	dc400015 	stw	r17,0(sp)
1000fa20:	100f883a 	mov	r7,r2
1000fa24:	903ee83a 	callr	r18
1000fa28:	00ffffc4 	movi	r3,-1
1000fa2c:	10c0031e 	bne	r2,r3,1000fa3c <_wcrtomb_r+0x64>
1000fa30:	88000015 	stw	zero,0(r17)
1000fa34:	00c02284 	movi	r3,138
1000fa38:	80c00015 	stw	r3,0(r16)
1000fa3c:	dfc00917 	ldw	ra,36(sp)
1000fa40:	dc800817 	ldw	r18,32(sp)
1000fa44:	dc400717 	ldw	r17,28(sp)
1000fa48:	dc000617 	ldw	r16,24(sp)
1000fa4c:	dec00a04 	addi	sp,sp,40
1000fa50:	f800283a 	ret
1000fa54:	000b1740 	call	1000b174 <__locale_charset>
1000fa58:	8009883a 	mov	r4,r16
1000fa5c:	dc400015 	stw	r17,0(sp)
1000fa60:	d9400104 	addi	r5,sp,4
1000fa64:	000d883a 	mov	r6,zero
1000fa68:	100f883a 	mov	r7,r2
1000fa6c:	903ee83a 	callr	r18
1000fa70:	003fed06 	br	1000fa28 <__alt_data_end+0xf800fa28>

1000fa74 <wcrtomb>:
1000fa74:	defff504 	addi	sp,sp,-44
1000fa78:	dc400515 	stw	r17,20(sp)
1000fa7c:	dc000415 	stw	r16,16(sp)
1000fa80:	dfc00a15 	stw	ra,40(sp)
1000fa84:	dd400915 	stw	r21,36(sp)
1000fa88:	dd000815 	stw	r20,32(sp)
1000fa8c:	dcc00715 	stw	r19,28(sp)
1000fa90:	dc800615 	stw	r18,24(sp)
1000fa94:	2021883a 	mov	r16,r4
1000fa98:	3023883a 	mov	r17,r6
1000fa9c:	20001d26 	beq	r4,zero,1000fb14 <wcrtomb+0xa0>
1000faa0:	04840074 	movhi	r18,4097
1000faa4:	94906304 	addi	r18,r18,16780
1000faa8:	00840074 	movhi	r2,4097
1000faac:	95400017 	ldw	r21,0(r18)
1000fab0:	10906704 	addi	r2,r2,16796
1000fab4:	15000017 	ldw	r20,0(r2)
1000fab8:	2827883a 	mov	r19,r5
1000fabc:	000b1740 	call	1000b174 <__locale_charset>
1000fac0:	a809883a 	mov	r4,r21
1000fac4:	dc400015 	stw	r17,0(sp)
1000fac8:	800b883a 	mov	r5,r16
1000facc:	980d883a 	mov	r6,r19
1000fad0:	100f883a 	mov	r7,r2
1000fad4:	a03ee83a 	callr	r20
1000fad8:	00ffffc4 	movi	r3,-1
1000fadc:	10c0041e 	bne	r2,r3,1000faf0 <wcrtomb+0x7c>
1000fae0:	90c00017 	ldw	r3,0(r18)
1000fae4:	01002284 	movi	r4,138
1000fae8:	88000015 	stw	zero,0(r17)
1000faec:	19000015 	stw	r4,0(r3)
1000faf0:	dfc00a17 	ldw	ra,40(sp)
1000faf4:	dd400917 	ldw	r21,36(sp)
1000faf8:	dd000817 	ldw	r20,32(sp)
1000fafc:	dcc00717 	ldw	r19,28(sp)
1000fb00:	dc800617 	ldw	r18,24(sp)
1000fb04:	dc400517 	ldw	r17,20(sp)
1000fb08:	dc000417 	ldw	r16,16(sp)
1000fb0c:	dec00b04 	addi	sp,sp,44
1000fb10:	f800283a 	ret
1000fb14:	04840074 	movhi	r18,4097
1000fb18:	94906304 	addi	r18,r18,16780
1000fb1c:	00840074 	movhi	r2,4097
1000fb20:	94c00017 	ldw	r19,0(r18)
1000fb24:	10906704 	addi	r2,r2,16796
1000fb28:	14000017 	ldw	r16,0(r2)
1000fb2c:	000b1740 	call	1000b174 <__locale_charset>
1000fb30:	9809883a 	mov	r4,r19
1000fb34:	dc400015 	stw	r17,0(sp)
1000fb38:	d9400104 	addi	r5,sp,4
1000fb3c:	000d883a 	mov	r6,zero
1000fb40:	100f883a 	mov	r7,r2
1000fb44:	803ee83a 	callr	r16
1000fb48:	003fe306 	br	1000fad8 <__alt_data_end+0xf800fad8>

1000fb4c <__ascii_wctomb>:
1000fb4c:	28000526 	beq	r5,zero,1000fb64 <__ascii_wctomb+0x18>
1000fb50:	00803fc4 	movi	r2,255
1000fb54:	11800536 	bltu	r2,r6,1000fb6c <__ascii_wctomb+0x20>
1000fb58:	29800005 	stb	r6,0(r5)
1000fb5c:	00800044 	movi	r2,1
1000fb60:	f800283a 	ret
1000fb64:	0005883a 	mov	r2,zero
1000fb68:	f800283a 	ret
1000fb6c:	00802284 	movi	r2,138
1000fb70:	20800015 	stw	r2,0(r4)
1000fb74:	00bfffc4 	movi	r2,-1
1000fb78:	f800283a 	ret

1000fb7c <_wctomb_r>:
1000fb7c:	00840074 	movhi	r2,4097
1000fb80:	defff904 	addi	sp,sp,-28
1000fb84:	10906704 	addi	r2,r2,16796
1000fb88:	dfc00615 	stw	ra,24(sp)
1000fb8c:	dc400515 	stw	r17,20(sp)
1000fb90:	dc000415 	stw	r16,16(sp)
1000fb94:	3823883a 	mov	r17,r7
1000fb98:	14000017 	ldw	r16,0(r2)
1000fb9c:	d9000115 	stw	r4,4(sp)
1000fba0:	d9400215 	stw	r5,8(sp)
1000fba4:	d9800315 	stw	r6,12(sp)
1000fba8:	000b1740 	call	1000b174 <__locale_charset>
1000fbac:	d9000117 	ldw	r4,4(sp)
1000fbb0:	d9400217 	ldw	r5,8(sp)
1000fbb4:	d9800317 	ldw	r6,12(sp)
1000fbb8:	dc400015 	stw	r17,0(sp)
1000fbbc:	100f883a 	mov	r7,r2
1000fbc0:	803ee83a 	callr	r16
1000fbc4:	dfc00617 	ldw	ra,24(sp)
1000fbc8:	dc400517 	ldw	r17,20(sp)
1000fbcc:	dc000417 	ldw	r16,16(sp)
1000fbd0:	dec00704 	addi	sp,sp,28
1000fbd4:	f800283a 	ret

1000fbd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fbd8:	defffe04 	addi	sp,sp,-8
1000fbdc:	dfc00115 	stw	ra,4(sp)
1000fbe0:	df000015 	stw	fp,0(sp)
1000fbe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fbe8:	00840074 	movhi	r2,4097
1000fbec:	10906d04 	addi	r2,r2,16820
1000fbf0:	10800017 	ldw	r2,0(r2)
1000fbf4:	10000526 	beq	r2,zero,1000fc0c <alt_get_errno+0x34>
1000fbf8:	00840074 	movhi	r2,4097
1000fbfc:	10906d04 	addi	r2,r2,16820
1000fc00:	10800017 	ldw	r2,0(r2)
1000fc04:	103ee83a 	callr	r2
1000fc08:	00000206 	br	1000fc14 <alt_get_errno+0x3c>
1000fc0c:	00840074 	movhi	r2,4097
1000fc10:	10973b04 	addi	r2,r2,23788
}
1000fc14:	e037883a 	mov	sp,fp
1000fc18:	dfc00117 	ldw	ra,4(sp)
1000fc1c:	df000017 	ldw	fp,0(sp)
1000fc20:	dec00204 	addi	sp,sp,8
1000fc24:	f800283a 	ret

1000fc28 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000fc28:	defffb04 	addi	sp,sp,-20
1000fc2c:	dfc00415 	stw	ra,16(sp)
1000fc30:	df000315 	stw	fp,12(sp)
1000fc34:	df000304 	addi	fp,sp,12
1000fc38:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000fc3c:	e0bfff17 	ldw	r2,-4(fp)
1000fc40:	10000816 	blt	r2,zero,1000fc64 <close+0x3c>
1000fc44:	e13fff17 	ldw	r4,-4(fp)
1000fc48:	01400304 	movi	r5,12
1000fc4c:	00040b00 	call	100040b0 <__mulsi3>
1000fc50:	1007883a 	mov	r3,r2
1000fc54:	00840074 	movhi	r2,4097
1000fc58:	108be904 	addi	r2,r2,12196
1000fc5c:	1885883a 	add	r2,r3,r2
1000fc60:	00000106 	br	1000fc68 <close+0x40>
1000fc64:	0005883a 	mov	r2,zero
1000fc68:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000fc6c:	e0bffd17 	ldw	r2,-12(fp)
1000fc70:	10001926 	beq	r2,zero,1000fcd8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000fc74:	e0bffd17 	ldw	r2,-12(fp)
1000fc78:	10800017 	ldw	r2,0(r2)
1000fc7c:	10800417 	ldw	r2,16(r2)
1000fc80:	10000626 	beq	r2,zero,1000fc9c <close+0x74>
1000fc84:	e0bffd17 	ldw	r2,-12(fp)
1000fc88:	10800017 	ldw	r2,0(r2)
1000fc8c:	10800417 	ldw	r2,16(r2)
1000fc90:	e13ffd17 	ldw	r4,-12(fp)
1000fc94:	103ee83a 	callr	r2
1000fc98:	00000106 	br	1000fca0 <close+0x78>
1000fc9c:	0005883a 	mov	r2,zero
1000fca0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000fca4:	e13fff17 	ldw	r4,-4(fp)
1000fca8:	001034c0 	call	1001034c <alt_release_fd>
    if (rval < 0)
1000fcac:	e0bffe17 	ldw	r2,-8(fp)
1000fcb0:	1000070e 	bge	r2,zero,1000fcd0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000fcb4:	000fbd80 	call	1000fbd8 <alt_get_errno>
1000fcb8:	1007883a 	mov	r3,r2
1000fcbc:	e0bffe17 	ldw	r2,-8(fp)
1000fcc0:	0085c83a 	sub	r2,zero,r2
1000fcc4:	18800015 	stw	r2,0(r3)
      return -1;
1000fcc8:	00bfffc4 	movi	r2,-1
1000fccc:	00000706 	br	1000fcec <close+0xc4>
    }
    return 0;
1000fcd0:	0005883a 	mov	r2,zero
1000fcd4:	00000506 	br	1000fcec <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fcd8:	000fbd80 	call	1000fbd8 <alt_get_errno>
1000fcdc:	1007883a 	mov	r3,r2
1000fce0:	00801444 	movi	r2,81
1000fce4:	18800015 	stw	r2,0(r3)
    return -1;
1000fce8:	00bfffc4 	movi	r2,-1
  }
}
1000fcec:	e037883a 	mov	sp,fp
1000fcf0:	dfc00117 	ldw	ra,4(sp)
1000fcf4:	df000017 	ldw	fp,0(sp)
1000fcf8:	dec00204 	addi	sp,sp,8
1000fcfc:	f800283a 	ret

1000fd00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fd00:	defffc04 	addi	sp,sp,-16
1000fd04:	df000315 	stw	fp,12(sp)
1000fd08:	df000304 	addi	fp,sp,12
1000fd0c:	e13ffd15 	stw	r4,-12(fp)
1000fd10:	e17ffe15 	stw	r5,-8(fp)
1000fd14:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fd18:	e0bfff17 	ldw	r2,-4(fp)
}
1000fd1c:	e037883a 	mov	sp,fp
1000fd20:	df000017 	ldw	fp,0(sp)
1000fd24:	dec00104 	addi	sp,sp,4
1000fd28:	f800283a 	ret

1000fd2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fd2c:	defffe04 	addi	sp,sp,-8
1000fd30:	dfc00115 	stw	ra,4(sp)
1000fd34:	df000015 	stw	fp,0(sp)
1000fd38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd3c:	00840074 	movhi	r2,4097
1000fd40:	10906d04 	addi	r2,r2,16820
1000fd44:	10800017 	ldw	r2,0(r2)
1000fd48:	10000526 	beq	r2,zero,1000fd60 <alt_get_errno+0x34>
1000fd4c:	00840074 	movhi	r2,4097
1000fd50:	10906d04 	addi	r2,r2,16820
1000fd54:	10800017 	ldw	r2,0(r2)
1000fd58:	103ee83a 	callr	r2
1000fd5c:	00000206 	br	1000fd68 <alt_get_errno+0x3c>
1000fd60:	00840074 	movhi	r2,4097
1000fd64:	10973b04 	addi	r2,r2,23788
}
1000fd68:	e037883a 	mov	sp,fp
1000fd6c:	dfc00117 	ldw	ra,4(sp)
1000fd70:	df000017 	ldw	fp,0(sp)
1000fd74:	dec00204 	addi	sp,sp,8
1000fd78:	f800283a 	ret

1000fd7c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000fd7c:	defffb04 	addi	sp,sp,-20
1000fd80:	dfc00415 	stw	ra,16(sp)
1000fd84:	df000315 	stw	fp,12(sp)
1000fd88:	df000304 	addi	fp,sp,12
1000fd8c:	e13ffe15 	stw	r4,-8(fp)
1000fd90:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fd94:	e0bffe17 	ldw	r2,-8(fp)
1000fd98:	10000816 	blt	r2,zero,1000fdbc <fstat+0x40>
1000fd9c:	e13ffe17 	ldw	r4,-8(fp)
1000fda0:	01400304 	movi	r5,12
1000fda4:	00040b00 	call	100040b0 <__mulsi3>
1000fda8:	1007883a 	mov	r3,r2
1000fdac:	00840074 	movhi	r2,4097
1000fdb0:	108be904 	addi	r2,r2,12196
1000fdb4:	1885883a 	add	r2,r3,r2
1000fdb8:	00000106 	br	1000fdc0 <fstat+0x44>
1000fdbc:	0005883a 	mov	r2,zero
1000fdc0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000fdc4:	e0bffd17 	ldw	r2,-12(fp)
1000fdc8:	10001026 	beq	r2,zero,1000fe0c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000fdcc:	e0bffd17 	ldw	r2,-12(fp)
1000fdd0:	10800017 	ldw	r2,0(r2)
1000fdd4:	10800817 	ldw	r2,32(r2)
1000fdd8:	10000726 	beq	r2,zero,1000fdf8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000fddc:	e0bffd17 	ldw	r2,-12(fp)
1000fde0:	10800017 	ldw	r2,0(r2)
1000fde4:	10800817 	ldw	r2,32(r2)
1000fde8:	e13ffd17 	ldw	r4,-12(fp)
1000fdec:	e17fff17 	ldw	r5,-4(fp)
1000fdf0:	103ee83a 	callr	r2
1000fdf4:	00000a06 	br	1000fe20 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000fdf8:	e0bfff17 	ldw	r2,-4(fp)
1000fdfc:	00c80004 	movi	r3,8192
1000fe00:	10c00115 	stw	r3,4(r2)
      return 0;
1000fe04:	0005883a 	mov	r2,zero
1000fe08:	00000506 	br	1000fe20 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fe0c:	000fd2c0 	call	1000fd2c <alt_get_errno>
1000fe10:	1007883a 	mov	r3,r2
1000fe14:	00801444 	movi	r2,81
1000fe18:	18800015 	stw	r2,0(r3)
    return -1;
1000fe1c:	00bfffc4 	movi	r2,-1
  }
}
1000fe20:	e037883a 	mov	sp,fp
1000fe24:	dfc00117 	ldw	ra,4(sp)
1000fe28:	df000017 	ldw	fp,0(sp)
1000fe2c:	dec00204 	addi	sp,sp,8
1000fe30:	f800283a 	ret

1000fe34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fe34:	defffe04 	addi	sp,sp,-8
1000fe38:	dfc00115 	stw	ra,4(sp)
1000fe3c:	df000015 	stw	fp,0(sp)
1000fe40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fe44:	00840074 	movhi	r2,4097
1000fe48:	10906d04 	addi	r2,r2,16820
1000fe4c:	10800017 	ldw	r2,0(r2)
1000fe50:	10000526 	beq	r2,zero,1000fe68 <alt_get_errno+0x34>
1000fe54:	00840074 	movhi	r2,4097
1000fe58:	10906d04 	addi	r2,r2,16820
1000fe5c:	10800017 	ldw	r2,0(r2)
1000fe60:	103ee83a 	callr	r2
1000fe64:	00000206 	br	1000fe70 <alt_get_errno+0x3c>
1000fe68:	00840074 	movhi	r2,4097
1000fe6c:	10973b04 	addi	r2,r2,23788
}
1000fe70:	e037883a 	mov	sp,fp
1000fe74:	dfc00117 	ldw	ra,4(sp)
1000fe78:	df000017 	ldw	fp,0(sp)
1000fe7c:	dec00204 	addi	sp,sp,8
1000fe80:	f800283a 	ret

1000fe84 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fe84:	deffed04 	addi	sp,sp,-76
1000fe88:	dfc01215 	stw	ra,72(sp)
1000fe8c:	df001115 	stw	fp,68(sp)
1000fe90:	df001104 	addi	fp,sp,68
1000fe94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fe98:	e0bfff17 	ldw	r2,-4(fp)
1000fe9c:	10000816 	blt	r2,zero,1000fec0 <isatty+0x3c>
1000fea0:	e13fff17 	ldw	r4,-4(fp)
1000fea4:	01400304 	movi	r5,12
1000fea8:	00040b00 	call	100040b0 <__mulsi3>
1000feac:	1007883a 	mov	r3,r2
1000feb0:	00840074 	movhi	r2,4097
1000feb4:	108be904 	addi	r2,r2,12196
1000feb8:	1885883a 	add	r2,r3,r2
1000febc:	00000106 	br	1000fec4 <isatty+0x40>
1000fec0:	0005883a 	mov	r2,zero
1000fec4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000fec8:	e0bfef17 	ldw	r2,-68(fp)
1000fecc:	10000e26 	beq	r2,zero,1000ff08 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000fed0:	e0bfef17 	ldw	r2,-68(fp)
1000fed4:	10800017 	ldw	r2,0(r2)
1000fed8:	10800817 	ldw	r2,32(r2)
1000fedc:	1000021e 	bne	r2,zero,1000fee8 <isatty+0x64>
    {
      return 1;
1000fee0:	00800044 	movi	r2,1
1000fee4:	00000d06 	br	1000ff1c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fee8:	e0bff004 	addi	r2,fp,-64
1000feec:	e13fff17 	ldw	r4,-4(fp)
1000fef0:	100b883a 	mov	r5,r2
1000fef4:	000fd7c0 	call	1000fd7c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fef8:	e0bff117 	ldw	r2,-60(fp)
1000fefc:	10880020 	cmpeqi	r2,r2,8192
1000ff00:	10803fcc 	andi	r2,r2,255
1000ff04:	00000506 	br	1000ff1c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ff08:	000fe340 	call	1000fe34 <alt_get_errno>
1000ff0c:	1007883a 	mov	r3,r2
1000ff10:	00801444 	movi	r2,81
1000ff14:	18800015 	stw	r2,0(r3)
    return 0;
1000ff18:	0005883a 	mov	r2,zero
  }
}
1000ff1c:	e037883a 	mov	sp,fp
1000ff20:	dfc00117 	ldw	ra,4(sp)
1000ff24:	df000017 	ldw	fp,0(sp)
1000ff28:	dec00204 	addi	sp,sp,8
1000ff2c:	f800283a 	ret

1000ff30 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ff30:	defffc04 	addi	sp,sp,-16
1000ff34:	df000315 	stw	fp,12(sp)
1000ff38:	df000304 	addi	fp,sp,12
1000ff3c:	e13ffd15 	stw	r4,-12(fp)
1000ff40:	e17ffe15 	stw	r5,-8(fp)
1000ff44:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ff48:	e0fffe17 	ldw	r3,-8(fp)
1000ff4c:	e0bffd17 	ldw	r2,-12(fp)
1000ff50:	18800c26 	beq	r3,r2,1000ff84 <alt_load_section+0x54>
  {
    while( to != end )
1000ff54:	00000806 	br	1000ff78 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ff58:	e0bffe17 	ldw	r2,-8(fp)
1000ff5c:	10c00104 	addi	r3,r2,4
1000ff60:	e0fffe15 	stw	r3,-8(fp)
1000ff64:	e0fffd17 	ldw	r3,-12(fp)
1000ff68:	19000104 	addi	r4,r3,4
1000ff6c:	e13ffd15 	stw	r4,-12(fp)
1000ff70:	18c00017 	ldw	r3,0(r3)
1000ff74:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ff78:	e0fffe17 	ldw	r3,-8(fp)
1000ff7c:	e0bfff17 	ldw	r2,-4(fp)
1000ff80:	18bff51e 	bne	r3,r2,1000ff58 <__alt_data_end+0xf800ff58>
    {
      *to++ = *from++;
    }
  }
}
1000ff84:	e037883a 	mov	sp,fp
1000ff88:	df000017 	ldw	fp,0(sp)
1000ff8c:	dec00104 	addi	sp,sp,4
1000ff90:	f800283a 	ret

1000ff94 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ff94:	defffe04 	addi	sp,sp,-8
1000ff98:	dfc00115 	stw	ra,4(sp)
1000ff9c:	df000015 	stw	fp,0(sp)
1000ffa0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ffa4:	01040074 	movhi	r4,4097
1000ffa8:	21107204 	addi	r4,r4,16840
1000ffac:	01440074 	movhi	r5,4097
1000ffb0:	2949b604 	addi	r5,r5,9944
1000ffb4:	01840074 	movhi	r6,4097
1000ffb8:	31907204 	addi	r6,r6,16840
1000ffbc:	000ff300 	call	1000ff30 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ffc0:	01040034 	movhi	r4,4096
1000ffc4:	21000804 	addi	r4,r4,32
1000ffc8:	01440034 	movhi	r5,4096
1000ffcc:	29400804 	addi	r5,r5,32
1000ffd0:	01840034 	movhi	r6,4096
1000ffd4:	31808b04 	addi	r6,r6,556
1000ffd8:	000ff300 	call	1000ff30 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ffdc:	01040074 	movhi	r4,4097
1000ffe0:	2108cc04 	addi	r4,r4,9008
1000ffe4:	01440074 	movhi	r5,4097
1000ffe8:	2948cc04 	addi	r5,r5,9008
1000ffec:	01840074 	movhi	r6,4097
1000fff0:	3189b604 	addi	r6,r6,9944
1000fff4:	000ff300 	call	1000ff30 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fff8:	001120c0 	call	1001120c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fffc:	00113d40 	call	100113d4 <alt_icache_flush_all>
}
10010000:	e037883a 	mov	sp,fp
10010004:	dfc00117 	ldw	ra,4(sp)
10010008:	df000017 	ldw	fp,0(sp)
1001000c:	dec00204 	addi	sp,sp,8
10010010:	f800283a 	ret

10010014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010014:	defffe04 	addi	sp,sp,-8
10010018:	dfc00115 	stw	ra,4(sp)
1001001c:	df000015 	stw	fp,0(sp)
10010020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010024:	00840074 	movhi	r2,4097
10010028:	10906d04 	addi	r2,r2,16820
1001002c:	10800017 	ldw	r2,0(r2)
10010030:	10000526 	beq	r2,zero,10010048 <alt_get_errno+0x34>
10010034:	00840074 	movhi	r2,4097
10010038:	10906d04 	addi	r2,r2,16820
1001003c:	10800017 	ldw	r2,0(r2)
10010040:	103ee83a 	callr	r2
10010044:	00000206 	br	10010050 <alt_get_errno+0x3c>
10010048:	00840074 	movhi	r2,4097
1001004c:	10973b04 	addi	r2,r2,23788
}
10010050:	e037883a 	mov	sp,fp
10010054:	dfc00117 	ldw	ra,4(sp)
10010058:	df000017 	ldw	fp,0(sp)
1001005c:	dec00204 	addi	sp,sp,8
10010060:	f800283a 	ret

10010064 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010064:	defff904 	addi	sp,sp,-28
10010068:	dfc00615 	stw	ra,24(sp)
1001006c:	df000515 	stw	fp,20(sp)
10010070:	df000504 	addi	fp,sp,20
10010074:	e13ffd15 	stw	r4,-12(fp)
10010078:	e17ffe15 	stw	r5,-8(fp)
1001007c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010080:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010084:	e0bffd17 	ldw	r2,-12(fp)
10010088:	10000816 	blt	r2,zero,100100ac <lseek+0x48>
1001008c:	e13ffd17 	ldw	r4,-12(fp)
10010090:	01400304 	movi	r5,12
10010094:	00040b00 	call	100040b0 <__mulsi3>
10010098:	1007883a 	mov	r3,r2
1001009c:	00840074 	movhi	r2,4097
100100a0:	108be904 	addi	r2,r2,12196
100100a4:	1885883a 	add	r2,r3,r2
100100a8:	00000106 	br	100100b0 <lseek+0x4c>
100100ac:	0005883a 	mov	r2,zero
100100b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100100b4:	e0bffc17 	ldw	r2,-16(fp)
100100b8:	10001026 	beq	r2,zero,100100fc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100100bc:	e0bffc17 	ldw	r2,-16(fp)
100100c0:	10800017 	ldw	r2,0(r2)
100100c4:	10800717 	ldw	r2,28(r2)
100100c8:	10000926 	beq	r2,zero,100100f0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100100cc:	e0bffc17 	ldw	r2,-16(fp)
100100d0:	10800017 	ldw	r2,0(r2)
100100d4:	10800717 	ldw	r2,28(r2)
100100d8:	e13ffc17 	ldw	r4,-16(fp)
100100dc:	e17ffe17 	ldw	r5,-8(fp)
100100e0:	e1bfff17 	ldw	r6,-4(fp)
100100e4:	103ee83a 	callr	r2
100100e8:	e0bffb15 	stw	r2,-20(fp)
100100ec:	00000506 	br	10010104 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100100f0:	00bfde84 	movi	r2,-134
100100f4:	e0bffb15 	stw	r2,-20(fp)
100100f8:	00000206 	br	10010104 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100100fc:	00bfebc4 	movi	r2,-81
10010100:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010104:	e0bffb17 	ldw	r2,-20(fp)
10010108:	1000070e 	bge	r2,zero,10010128 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1001010c:	00100140 	call	10010014 <alt_get_errno>
10010110:	1007883a 	mov	r3,r2
10010114:	e0bffb17 	ldw	r2,-20(fp)
10010118:	0085c83a 	sub	r2,zero,r2
1001011c:	18800015 	stw	r2,0(r3)
    rc = -1;
10010120:	00bfffc4 	movi	r2,-1
10010124:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010128:	e0bffb17 	ldw	r2,-20(fp)
}
1001012c:	e037883a 	mov	sp,fp
10010130:	dfc00117 	ldw	ra,4(sp)
10010134:	df000017 	ldw	fp,0(sp)
10010138:	dec00204 	addi	sp,sp,8
1001013c:	f800283a 	ret

10010140 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010140:	defffd04 	addi	sp,sp,-12
10010144:	dfc00215 	stw	ra,8(sp)
10010148:	df000115 	stw	fp,4(sp)
1001014c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010150:	0009883a 	mov	r4,zero
10010154:	00106040 	call	10010604 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010158:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001015c:	00106380 	call	10010638 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010160:	01040074 	movhi	r4,4097
10010164:	2109ac04 	addi	r4,r4,9904
10010168:	01440074 	movhi	r5,4097
1001016c:	2949ac04 	addi	r5,r5,9904
10010170:	01840074 	movhi	r6,4097
10010174:	3189ac04 	addi	r6,r6,9904
10010178:	00117a00 	call	100117a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1001017c:	001131c0 	call	1001131c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010180:	01040074 	movhi	r4,4097
10010184:	2104de04 	addi	r4,r4,4984
10010188:	0011f8c0 	call	10011f8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1001018c:	d126db17 	ldw	r4,-25748(gp)
10010190:	d0e6dc17 	ldw	r3,-25744(gp)
10010194:	d0a6dd17 	ldw	r2,-25740(gp)
10010198:	180b883a 	mov	r5,r3
1001019c:	100d883a 	mov	r6,r2
100101a0:	00002680 	call	10000268 <main>
100101a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100101a8:	01000044 	movi	r4,1
100101ac:	000fc280 	call	1000fc28 <close>
  exit (result);
100101b0:	e13fff17 	ldw	r4,-4(fp)
100101b4:	0011fa00 	call	10011fa0 <exit>

100101b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100101b8:	defffe04 	addi	sp,sp,-8
100101bc:	df000115 	stw	fp,4(sp)
100101c0:	df000104 	addi	fp,sp,4
100101c4:	e13fff15 	stw	r4,-4(fp)
}
100101c8:	e037883a 	mov	sp,fp
100101cc:	df000017 	ldw	fp,0(sp)
100101d0:	dec00104 	addi	sp,sp,4
100101d4:	f800283a 	ret

100101d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100101d8:	defffe04 	addi	sp,sp,-8
100101dc:	df000115 	stw	fp,4(sp)
100101e0:	df000104 	addi	fp,sp,4
100101e4:	e13fff15 	stw	r4,-4(fp)
}
100101e8:	e037883a 	mov	sp,fp
100101ec:	df000017 	ldw	fp,0(sp)
100101f0:	dec00104 	addi	sp,sp,4
100101f4:	f800283a 	ret

100101f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100101f8:	defffe04 	addi	sp,sp,-8
100101fc:	dfc00115 	stw	ra,4(sp)
10010200:	df000015 	stw	fp,0(sp)
10010204:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010208:	00840074 	movhi	r2,4097
1001020c:	10906d04 	addi	r2,r2,16820
10010210:	10800017 	ldw	r2,0(r2)
10010214:	10000526 	beq	r2,zero,1001022c <alt_get_errno+0x34>
10010218:	00840074 	movhi	r2,4097
1001021c:	10906d04 	addi	r2,r2,16820
10010220:	10800017 	ldw	r2,0(r2)
10010224:	103ee83a 	callr	r2
10010228:	00000206 	br	10010234 <alt_get_errno+0x3c>
1001022c:	00840074 	movhi	r2,4097
10010230:	10973b04 	addi	r2,r2,23788
}
10010234:	e037883a 	mov	sp,fp
10010238:	dfc00117 	ldw	ra,4(sp)
1001023c:	df000017 	ldw	fp,0(sp)
10010240:	dec00204 	addi	sp,sp,8
10010244:	f800283a 	ret

10010248 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010248:	defff904 	addi	sp,sp,-28
1001024c:	dfc00615 	stw	ra,24(sp)
10010250:	df000515 	stw	fp,20(sp)
10010254:	df000504 	addi	fp,sp,20
10010258:	e13ffd15 	stw	r4,-12(fp)
1001025c:	e17ffe15 	stw	r5,-8(fp)
10010260:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010264:	e0bffd17 	ldw	r2,-12(fp)
10010268:	10000816 	blt	r2,zero,1001028c <read+0x44>
1001026c:	e13ffd17 	ldw	r4,-12(fp)
10010270:	01400304 	movi	r5,12
10010274:	00040b00 	call	100040b0 <__mulsi3>
10010278:	1007883a 	mov	r3,r2
1001027c:	00840074 	movhi	r2,4097
10010280:	108be904 	addi	r2,r2,12196
10010284:	1885883a 	add	r2,r3,r2
10010288:	00000106 	br	10010290 <read+0x48>
1001028c:	0005883a 	mov	r2,zero
10010290:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010294:	e0bffb17 	ldw	r2,-20(fp)
10010298:	10002226 	beq	r2,zero,10010324 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001029c:	e0bffb17 	ldw	r2,-20(fp)
100102a0:	10800217 	ldw	r2,8(r2)
100102a4:	108000cc 	andi	r2,r2,3
100102a8:	10800060 	cmpeqi	r2,r2,1
100102ac:	1000181e 	bne	r2,zero,10010310 <read+0xc8>
        (fd->dev->read))
100102b0:	e0bffb17 	ldw	r2,-20(fp)
100102b4:	10800017 	ldw	r2,0(r2)
100102b8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100102bc:	10001426 	beq	r2,zero,10010310 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100102c0:	e0bffb17 	ldw	r2,-20(fp)
100102c4:	10800017 	ldw	r2,0(r2)
100102c8:	10800517 	ldw	r2,20(r2)
100102cc:	e0ffff17 	ldw	r3,-4(fp)
100102d0:	e13ffb17 	ldw	r4,-20(fp)
100102d4:	e17ffe17 	ldw	r5,-8(fp)
100102d8:	180d883a 	mov	r6,r3
100102dc:	103ee83a 	callr	r2
100102e0:	e0bffc15 	stw	r2,-16(fp)
100102e4:	e0bffc17 	ldw	r2,-16(fp)
100102e8:	1000070e 	bge	r2,zero,10010308 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100102ec:	00101f80 	call	100101f8 <alt_get_errno>
100102f0:	1007883a 	mov	r3,r2
100102f4:	e0bffc17 	ldw	r2,-16(fp)
100102f8:	0085c83a 	sub	r2,zero,r2
100102fc:	18800015 	stw	r2,0(r3)
          return -1;
10010300:	00bfffc4 	movi	r2,-1
10010304:	00000c06 	br	10010338 <read+0xf0>
        }
        return rval;
10010308:	e0bffc17 	ldw	r2,-16(fp)
1001030c:	00000a06 	br	10010338 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10010310:	00101f80 	call	100101f8 <alt_get_errno>
10010314:	1007883a 	mov	r3,r2
10010318:	00800344 	movi	r2,13
1001031c:	18800015 	stw	r2,0(r3)
10010320:	00000406 	br	10010334 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010324:	00101f80 	call	100101f8 <alt_get_errno>
10010328:	1007883a 	mov	r3,r2
1001032c:	00801444 	movi	r2,81
10010330:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010334:	00bfffc4 	movi	r2,-1
}
10010338:	e037883a 	mov	sp,fp
1001033c:	dfc00117 	ldw	ra,4(sp)
10010340:	df000017 	ldw	fp,0(sp)
10010344:	dec00204 	addi	sp,sp,8
10010348:	f800283a 	ret

1001034c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001034c:	defffc04 	addi	sp,sp,-16
10010350:	dfc00315 	stw	ra,12(sp)
10010354:	df000215 	stw	fp,8(sp)
10010358:	dc000115 	stw	r16,4(sp)
1001035c:	df000204 	addi	fp,sp,8
10010360:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010364:	e0bffe17 	ldw	r2,-8(fp)
10010368:	108000d0 	cmplti	r2,r2,3
1001036c:	1000111e 	bne	r2,zero,100103b4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010370:	04040074 	movhi	r16,4097
10010374:	840be904 	addi	r16,r16,12196
10010378:	e0bffe17 	ldw	r2,-8(fp)
1001037c:	1009883a 	mov	r4,r2
10010380:	01400304 	movi	r5,12
10010384:	00040b00 	call	100040b0 <__mulsi3>
10010388:	8085883a 	add	r2,r16,r2
1001038c:	10800204 	addi	r2,r2,8
10010390:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010394:	04040074 	movhi	r16,4097
10010398:	840be904 	addi	r16,r16,12196
1001039c:	e0bffe17 	ldw	r2,-8(fp)
100103a0:	1009883a 	mov	r4,r2
100103a4:	01400304 	movi	r5,12
100103a8:	00040b00 	call	100040b0 <__mulsi3>
100103ac:	8085883a 	add	r2,r16,r2
100103b0:	10000015 	stw	zero,0(r2)
  }
}
100103b4:	e6ffff04 	addi	sp,fp,-4
100103b8:	dfc00217 	ldw	ra,8(sp)
100103bc:	df000117 	ldw	fp,4(sp)
100103c0:	dc000017 	ldw	r16,0(sp)
100103c4:	dec00304 	addi	sp,sp,12
100103c8:	f800283a 	ret

100103cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100103cc:	defff904 	addi	sp,sp,-28
100103d0:	df000615 	stw	fp,24(sp)
100103d4:	df000604 	addi	fp,sp,24
100103d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100103dc:	0005303a 	rdctl	r2,status
100103e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103e4:	e0fffc17 	ldw	r3,-16(fp)
100103e8:	00bfff84 	movi	r2,-2
100103ec:	1884703a 	and	r2,r3,r2
100103f0:	1001703a 	wrctl	status,r2
  
  return context;
100103f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100103f8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100103fc:	d0a00d17 	ldw	r2,-32716(gp)
10010400:	10c000c4 	addi	r3,r2,3
10010404:	00bfff04 	movi	r2,-4
10010408:	1884703a 	and	r2,r3,r2
1001040c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010410:	d0e00d17 	ldw	r3,-32716(gp)
10010414:	e0bfff17 	ldw	r2,-4(fp)
10010418:	1887883a 	add	r3,r3,r2
1001041c:	00860034 	movhi	r2,6144
10010420:	10800004 	addi	r2,r2,0
10010424:	10c0062e 	bgeu	r2,r3,10010440 <sbrk+0x74>
10010428:	e0bffa17 	ldw	r2,-24(fp)
1001042c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010430:	e0bffd17 	ldw	r2,-12(fp)
10010434:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010438:	00bfffc4 	movi	r2,-1
1001043c:	00000b06 	br	1001046c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010440:	d0a00d17 	ldw	r2,-32716(gp)
10010444:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010448:	d0e00d17 	ldw	r3,-32716(gp)
1001044c:	e0bfff17 	ldw	r2,-4(fp)
10010450:	1885883a 	add	r2,r3,r2
10010454:	d0a00d15 	stw	r2,-32716(gp)
10010458:	e0bffa17 	ldw	r2,-24(fp)
1001045c:	e0bffe15 	stw	r2,-8(fp)
10010460:	e0bffe17 	ldw	r2,-8(fp)
10010464:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010468:	e0bffb17 	ldw	r2,-20(fp)
} 
1001046c:	e037883a 	mov	sp,fp
10010470:	df000017 	ldw	fp,0(sp)
10010474:	dec00104 	addi	sp,sp,4
10010478:	f800283a 	ret

1001047c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001047c:	defffe04 	addi	sp,sp,-8
10010480:	dfc00115 	stw	ra,4(sp)
10010484:	df000015 	stw	fp,0(sp)
10010488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001048c:	00840074 	movhi	r2,4097
10010490:	10906d04 	addi	r2,r2,16820
10010494:	10800017 	ldw	r2,0(r2)
10010498:	10000526 	beq	r2,zero,100104b0 <alt_get_errno+0x34>
1001049c:	00840074 	movhi	r2,4097
100104a0:	10906d04 	addi	r2,r2,16820
100104a4:	10800017 	ldw	r2,0(r2)
100104a8:	103ee83a 	callr	r2
100104ac:	00000206 	br	100104b8 <alt_get_errno+0x3c>
100104b0:	00840074 	movhi	r2,4097
100104b4:	10973b04 	addi	r2,r2,23788
}
100104b8:	e037883a 	mov	sp,fp
100104bc:	dfc00117 	ldw	ra,4(sp)
100104c0:	df000017 	ldw	fp,0(sp)
100104c4:	dec00204 	addi	sp,sp,8
100104c8:	f800283a 	ret

100104cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100104cc:	defff904 	addi	sp,sp,-28
100104d0:	dfc00615 	stw	ra,24(sp)
100104d4:	df000515 	stw	fp,20(sp)
100104d8:	df000504 	addi	fp,sp,20
100104dc:	e13ffd15 	stw	r4,-12(fp)
100104e0:	e17ffe15 	stw	r5,-8(fp)
100104e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100104e8:	e0bffd17 	ldw	r2,-12(fp)
100104ec:	10000816 	blt	r2,zero,10010510 <write+0x44>
100104f0:	e13ffd17 	ldw	r4,-12(fp)
100104f4:	01400304 	movi	r5,12
100104f8:	00040b00 	call	100040b0 <__mulsi3>
100104fc:	1007883a 	mov	r3,r2
10010500:	00840074 	movhi	r2,4097
10010504:	108be904 	addi	r2,r2,12196
10010508:	1885883a 	add	r2,r3,r2
1001050c:	00000106 	br	10010514 <write+0x48>
10010510:	0005883a 	mov	r2,zero
10010514:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010518:	e0bffb17 	ldw	r2,-20(fp)
1001051c:	10002126 	beq	r2,zero,100105a4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010520:	e0bffb17 	ldw	r2,-20(fp)
10010524:	10800217 	ldw	r2,8(r2)
10010528:	108000cc 	andi	r2,r2,3
1001052c:	10001826 	beq	r2,zero,10010590 <write+0xc4>
10010530:	e0bffb17 	ldw	r2,-20(fp)
10010534:	10800017 	ldw	r2,0(r2)
10010538:	10800617 	ldw	r2,24(r2)
1001053c:	10001426 	beq	r2,zero,10010590 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010540:	e0bffb17 	ldw	r2,-20(fp)
10010544:	10800017 	ldw	r2,0(r2)
10010548:	10800617 	ldw	r2,24(r2)
1001054c:	e0ffff17 	ldw	r3,-4(fp)
10010550:	e13ffb17 	ldw	r4,-20(fp)
10010554:	e17ffe17 	ldw	r5,-8(fp)
10010558:	180d883a 	mov	r6,r3
1001055c:	103ee83a 	callr	r2
10010560:	e0bffc15 	stw	r2,-16(fp)
10010564:	e0bffc17 	ldw	r2,-16(fp)
10010568:	1000070e 	bge	r2,zero,10010588 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001056c:	001047c0 	call	1001047c <alt_get_errno>
10010570:	1007883a 	mov	r3,r2
10010574:	e0bffc17 	ldw	r2,-16(fp)
10010578:	0085c83a 	sub	r2,zero,r2
1001057c:	18800015 	stw	r2,0(r3)
        return -1;
10010580:	00bfffc4 	movi	r2,-1
10010584:	00000c06 	br	100105b8 <write+0xec>
      }
      return rval;
10010588:	e0bffc17 	ldw	r2,-16(fp)
1001058c:	00000a06 	br	100105b8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010590:	001047c0 	call	1001047c <alt_get_errno>
10010594:	1007883a 	mov	r3,r2
10010598:	00800344 	movi	r2,13
1001059c:	18800015 	stw	r2,0(r3)
100105a0:	00000406 	br	100105b4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100105a4:	001047c0 	call	1001047c <alt_get_errno>
100105a8:	1007883a 	mov	r3,r2
100105ac:	00801444 	movi	r2,81
100105b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100105b4:	00bfffc4 	movi	r2,-1
}
100105b8:	e037883a 	mov	sp,fp
100105bc:	dfc00117 	ldw	ra,4(sp)
100105c0:	df000017 	ldw	fp,0(sp)
100105c4:	dec00204 	addi	sp,sp,8
100105c8:	f800283a 	ret

100105cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100105cc:	defffd04 	addi	sp,sp,-12
100105d0:	dfc00215 	stw	ra,8(sp)
100105d4:	df000115 	stw	fp,4(sp)
100105d8:	df000104 	addi	fp,sp,4
100105dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100105e0:	e13fff17 	ldw	r4,-4(fp)
100105e4:	01440074 	movhi	r5,4097
100105e8:	29506a04 	addi	r5,r5,16808
100105ec:	00112780 	call	10011278 <alt_dev_llist_insert>
}
100105f0:	e037883a 	mov	sp,fp
100105f4:	dfc00117 	ldw	ra,4(sp)
100105f8:	df000017 	ldw	fp,0(sp)
100105fc:	dec00204 	addi	sp,sp,8
10010600:	f800283a 	ret

10010604 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010604:	defffd04 	addi	sp,sp,-12
10010608:	dfc00215 	stw	ra,8(sp)
1001060c:	df000115 	stw	fp,4(sp)
10010610:	df000104 	addi	fp,sp,4
10010614:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10010618:	0011c580 	call	10011c58 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1001061c:	00800044 	movi	r2,1
10010620:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010624:	e037883a 	mov	sp,fp
10010628:	dfc00117 	ldw	ra,4(sp)
1001062c:	df000017 	ldw	fp,0(sp)
10010630:	dec00204 	addi	sp,sp,8
10010634:	f800283a 	ret

10010638 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010638:	defffe04 	addi	sp,sp,-8
1001063c:	dfc00115 	stw	ra,4(sp)
10010640:	df000015 	stw	fp,0(sp)
10010644:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010648:	01040074 	movhi	r4,4097
1001064c:	210c5304 	addi	r4,r4,12620
10010650:	000b883a 	mov	r5,zero
10010654:	01800144 	movi	r6,5
10010658:	00107e40 	call	100107e4 <altera_avalon_jtag_uart_init>
1001065c:	01040074 	movhi	r4,4097
10010660:	210c4904 	addi	r4,r4,12580
10010664:	00105cc0 	call	100105cc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010668:	0001883a 	nop
}
1001066c:	e037883a 	mov	sp,fp
10010670:	dfc00117 	ldw	ra,4(sp)
10010674:	df000017 	ldw	fp,0(sp)
10010678:	dec00204 	addi	sp,sp,8
1001067c:	f800283a 	ret

10010680 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010680:	defffa04 	addi	sp,sp,-24
10010684:	dfc00515 	stw	ra,20(sp)
10010688:	df000415 	stw	fp,16(sp)
1001068c:	df000404 	addi	fp,sp,16
10010690:	e13ffd15 	stw	r4,-12(fp)
10010694:	e17ffe15 	stw	r5,-8(fp)
10010698:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001069c:	e0bffd17 	ldw	r2,-12(fp)
100106a0:	10800017 	ldw	r2,0(r2)
100106a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100106a8:	e0bffc17 	ldw	r2,-16(fp)
100106ac:	10c00a04 	addi	r3,r2,40
100106b0:	e0bffd17 	ldw	r2,-12(fp)
100106b4:	10800217 	ldw	r2,8(r2)
100106b8:	1809883a 	mov	r4,r3
100106bc:	e17ffe17 	ldw	r5,-8(fp)
100106c0:	e1bfff17 	ldw	r6,-4(fp)
100106c4:	100f883a 	mov	r7,r2
100106c8:	0010ca80 	call	10010ca8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100106cc:	e037883a 	mov	sp,fp
100106d0:	dfc00117 	ldw	ra,4(sp)
100106d4:	df000017 	ldw	fp,0(sp)
100106d8:	dec00204 	addi	sp,sp,8
100106dc:	f800283a 	ret

100106e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100106e0:	defffa04 	addi	sp,sp,-24
100106e4:	dfc00515 	stw	ra,20(sp)
100106e8:	df000415 	stw	fp,16(sp)
100106ec:	df000404 	addi	fp,sp,16
100106f0:	e13ffd15 	stw	r4,-12(fp)
100106f4:	e17ffe15 	stw	r5,-8(fp)
100106f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100106fc:	e0bffd17 	ldw	r2,-12(fp)
10010700:	10800017 	ldw	r2,0(r2)
10010704:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010708:	e0bffc17 	ldw	r2,-16(fp)
1001070c:	10c00a04 	addi	r3,r2,40
10010710:	e0bffd17 	ldw	r2,-12(fp)
10010714:	10800217 	ldw	r2,8(r2)
10010718:	1809883a 	mov	r4,r3
1001071c:	e17ffe17 	ldw	r5,-8(fp)
10010720:	e1bfff17 	ldw	r6,-4(fp)
10010724:	100f883a 	mov	r7,r2
10010728:	0010eb40 	call	10010eb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1001072c:	e037883a 	mov	sp,fp
10010730:	dfc00117 	ldw	ra,4(sp)
10010734:	df000017 	ldw	fp,0(sp)
10010738:	dec00204 	addi	sp,sp,8
1001073c:	f800283a 	ret

10010740 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010740:	defffc04 	addi	sp,sp,-16
10010744:	dfc00315 	stw	ra,12(sp)
10010748:	df000215 	stw	fp,8(sp)
1001074c:	df000204 	addi	fp,sp,8
10010750:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010754:	e0bfff17 	ldw	r2,-4(fp)
10010758:	10800017 	ldw	r2,0(r2)
1001075c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010760:	e0bffe17 	ldw	r2,-8(fp)
10010764:	10c00a04 	addi	r3,r2,40
10010768:	e0bfff17 	ldw	r2,-4(fp)
1001076c:	10800217 	ldw	r2,8(r2)
10010770:	1809883a 	mov	r4,r3
10010774:	100b883a 	mov	r5,r2
10010778:	0010b540 	call	10010b54 <altera_avalon_jtag_uart_close>
}
1001077c:	e037883a 	mov	sp,fp
10010780:	dfc00117 	ldw	ra,4(sp)
10010784:	df000017 	ldw	fp,0(sp)
10010788:	dec00204 	addi	sp,sp,8
1001078c:	f800283a 	ret

10010790 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010790:	defffa04 	addi	sp,sp,-24
10010794:	dfc00515 	stw	ra,20(sp)
10010798:	df000415 	stw	fp,16(sp)
1001079c:	df000404 	addi	fp,sp,16
100107a0:	e13ffd15 	stw	r4,-12(fp)
100107a4:	e17ffe15 	stw	r5,-8(fp)
100107a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100107ac:	e0bffd17 	ldw	r2,-12(fp)
100107b0:	10800017 	ldw	r2,0(r2)
100107b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100107b8:	e0bffc17 	ldw	r2,-16(fp)
100107bc:	10800a04 	addi	r2,r2,40
100107c0:	1009883a 	mov	r4,r2
100107c4:	e17ffe17 	ldw	r5,-8(fp)
100107c8:	e1bfff17 	ldw	r6,-4(fp)
100107cc:	0010bbc0 	call	10010bbc <altera_avalon_jtag_uart_ioctl>
}
100107d0:	e037883a 	mov	sp,fp
100107d4:	dfc00117 	ldw	ra,4(sp)
100107d8:	df000017 	ldw	fp,0(sp)
100107dc:	dec00204 	addi	sp,sp,8
100107e0:	f800283a 	ret

100107e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100107e4:	defffa04 	addi	sp,sp,-24
100107e8:	dfc00515 	stw	ra,20(sp)
100107ec:	df000415 	stw	fp,16(sp)
100107f0:	df000404 	addi	fp,sp,16
100107f4:	e13ffd15 	stw	r4,-12(fp)
100107f8:	e17ffe15 	stw	r5,-8(fp)
100107fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010800:	e0bffd17 	ldw	r2,-12(fp)
10010804:	00c00044 	movi	r3,1
10010808:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1001080c:	e0bffd17 	ldw	r2,-12(fp)
10010810:	10800017 	ldw	r2,0(r2)
10010814:	10800104 	addi	r2,r2,4
10010818:	1007883a 	mov	r3,r2
1001081c:	e0bffd17 	ldw	r2,-12(fp)
10010820:	10800817 	ldw	r2,32(r2)
10010824:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010828:	e0fffe17 	ldw	r3,-8(fp)
1001082c:	e0bfff17 	ldw	r2,-4(fp)
10010830:	d8000015 	stw	zero,0(sp)
10010834:	1809883a 	mov	r4,r3
10010838:	100b883a 	mov	r5,r2
1001083c:	01840074 	movhi	r6,4097
10010840:	31822a04 	addi	r6,r6,2216
10010844:	e1fffd17 	ldw	r7,-12(fp)
10010848:	00113f00 	call	100113f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1001084c:	e0bffd17 	ldw	r2,-12(fp)
10010850:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010854:	e0bffd17 	ldw	r2,-12(fp)
10010858:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1001085c:	00840074 	movhi	r2,4097
10010860:	10974004 	addi	r2,r2,23808
10010864:	10800017 	ldw	r2,0(r2)
10010868:	1809883a 	mov	r4,r3
1001086c:	100b883a 	mov	r5,r2
10010870:	01840074 	movhi	r6,4097
10010874:	3182ab04 	addi	r6,r6,2732
10010878:	e1fffd17 	ldw	r7,-12(fp)
1001087c:	00110cc0 	call	100110cc <alt_alarm_start>
10010880:	1000040e 	bge	r2,zero,10010894 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010884:	e0fffd17 	ldw	r3,-12(fp)
10010888:	00a00034 	movhi	r2,32768
1001088c:	10bfffc4 	addi	r2,r2,-1
10010890:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010894:	e037883a 	mov	sp,fp
10010898:	dfc00117 	ldw	ra,4(sp)
1001089c:	df000017 	ldw	fp,0(sp)
100108a0:	dec00204 	addi	sp,sp,8
100108a4:	f800283a 	ret

100108a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100108a8:	defff804 	addi	sp,sp,-32
100108ac:	df000715 	stw	fp,28(sp)
100108b0:	df000704 	addi	fp,sp,28
100108b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100108b8:	e0bfff17 	ldw	r2,-4(fp)
100108bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100108c0:	e0bffb17 	ldw	r2,-20(fp)
100108c4:	10800017 	ldw	r2,0(r2)
100108c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100108cc:	e0bffc17 	ldw	r2,-16(fp)
100108d0:	10800104 	addi	r2,r2,4
100108d4:	10800037 	ldwio	r2,0(r2)
100108d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100108dc:	e0bffd17 	ldw	r2,-12(fp)
100108e0:	1080c00c 	andi	r2,r2,768
100108e4:	1000011e 	bne	r2,zero,100108ec <altera_avalon_jtag_uart_irq+0x44>
      break;
100108e8:	00006c06 	br	10010a9c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100108ec:	e0bffd17 	ldw	r2,-12(fp)
100108f0:	1080400c 	andi	r2,r2,256
100108f4:	10003426 	beq	r2,zero,100109c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100108f8:	00800074 	movhi	r2,1
100108fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010900:	e0bffb17 	ldw	r2,-20(fp)
10010904:	10800a17 	ldw	r2,40(r2)
10010908:	10800044 	addi	r2,r2,1
1001090c:	1081ffcc 	andi	r2,r2,2047
10010910:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010914:	e0bffb17 	ldw	r2,-20(fp)
10010918:	10c00b17 	ldw	r3,44(r2)
1001091c:	e0bffe17 	ldw	r2,-8(fp)
10010920:	1880011e 	bne	r3,r2,10010928 <altera_avalon_jtag_uart_irq+0x80>
          break;
10010924:	00001606 	br	10010980 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010928:	e0bffc17 	ldw	r2,-16(fp)
1001092c:	10800037 	ldwio	r2,0(r2)
10010930:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010934:	e0bff917 	ldw	r2,-28(fp)
10010938:	10a0000c 	andi	r2,r2,32768
1001093c:	1000011e 	bne	r2,zero,10010944 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10010940:	00000f06 	br	10010980 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010944:	e0bffb17 	ldw	r2,-20(fp)
10010948:	10800a17 	ldw	r2,40(r2)
1001094c:	e0fff917 	ldw	r3,-28(fp)
10010950:	1809883a 	mov	r4,r3
10010954:	e0fffb17 	ldw	r3,-20(fp)
10010958:	1885883a 	add	r2,r3,r2
1001095c:	10800e04 	addi	r2,r2,56
10010960:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010964:	e0bffb17 	ldw	r2,-20(fp)
10010968:	10800a17 	ldw	r2,40(r2)
1001096c:	10800044 	addi	r2,r2,1
10010970:	10c1ffcc 	andi	r3,r2,2047
10010974:	e0bffb17 	ldw	r2,-20(fp)
10010978:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1001097c:	003fe006 	br	10010900 <__alt_data_end+0xf8010900>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010980:	e0bff917 	ldw	r2,-28(fp)
10010984:	10bfffec 	andhi	r2,r2,65535
10010988:	10000f26 	beq	r2,zero,100109c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001098c:	e0bffb17 	ldw	r2,-20(fp)
10010990:	10c00817 	ldw	r3,32(r2)
10010994:	00bfff84 	movi	r2,-2
10010998:	1886703a 	and	r3,r3,r2
1001099c:	e0bffb17 	ldw	r2,-20(fp)
100109a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100109a4:	e0bffc17 	ldw	r2,-16(fp)
100109a8:	10800104 	addi	r2,r2,4
100109ac:	1007883a 	mov	r3,r2
100109b0:	e0bffb17 	ldw	r2,-20(fp)
100109b4:	10800817 	ldw	r2,32(r2)
100109b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100109bc:	e0bffc17 	ldw	r2,-16(fp)
100109c0:	10800104 	addi	r2,r2,4
100109c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100109c8:	e0bffd17 	ldw	r2,-12(fp)
100109cc:	1080800c 	andi	r2,r2,512
100109d0:	10003126 	beq	r2,zero,10010a98 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100109d4:	e0bffd17 	ldw	r2,-12(fp)
100109d8:	1004d43a 	srli	r2,r2,16
100109dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100109e0:	00001406 	br	10010a34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100109e4:	e0bffc17 	ldw	r2,-16(fp)
100109e8:	e0fffb17 	ldw	r3,-20(fp)
100109ec:	18c00d17 	ldw	r3,52(r3)
100109f0:	e13ffb17 	ldw	r4,-20(fp)
100109f4:	20c7883a 	add	r3,r4,r3
100109f8:	18c20e04 	addi	r3,r3,2104
100109fc:	18c00003 	ldbu	r3,0(r3)
10010a00:	18c03fcc 	andi	r3,r3,255
10010a04:	18c0201c 	xori	r3,r3,128
10010a08:	18ffe004 	addi	r3,r3,-128
10010a0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a10:	e0bffb17 	ldw	r2,-20(fp)
10010a14:	10800d17 	ldw	r2,52(r2)
10010a18:	10800044 	addi	r2,r2,1
10010a1c:	10c1ffcc 	andi	r3,r2,2047
10010a20:	e0bffb17 	ldw	r2,-20(fp)
10010a24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010a28:	e0bffa17 	ldw	r2,-24(fp)
10010a2c:	10bfffc4 	addi	r2,r2,-1
10010a30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010a34:	e0bffa17 	ldw	r2,-24(fp)
10010a38:	10000526 	beq	r2,zero,10010a50 <altera_avalon_jtag_uart_irq+0x1a8>
10010a3c:	e0bffb17 	ldw	r2,-20(fp)
10010a40:	10c00d17 	ldw	r3,52(r2)
10010a44:	e0bffb17 	ldw	r2,-20(fp)
10010a48:	10800c17 	ldw	r2,48(r2)
10010a4c:	18bfe51e 	bne	r3,r2,100109e4 <__alt_data_end+0xf80109e4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010a50:	e0bffa17 	ldw	r2,-24(fp)
10010a54:	10001026 	beq	r2,zero,10010a98 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010a58:	e0bffb17 	ldw	r2,-20(fp)
10010a5c:	10c00817 	ldw	r3,32(r2)
10010a60:	00bfff44 	movi	r2,-3
10010a64:	1886703a 	and	r3,r3,r2
10010a68:	e0bffb17 	ldw	r2,-20(fp)
10010a6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010a70:	e0bffb17 	ldw	r2,-20(fp)
10010a74:	10800017 	ldw	r2,0(r2)
10010a78:	10800104 	addi	r2,r2,4
10010a7c:	1007883a 	mov	r3,r2
10010a80:	e0bffb17 	ldw	r2,-20(fp)
10010a84:	10800817 	ldw	r2,32(r2)
10010a88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010a8c:	e0bffc17 	ldw	r2,-16(fp)
10010a90:	10800104 	addi	r2,r2,4
10010a94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010a98:	003f8c06 	br	100108cc <__alt_data_end+0xf80108cc>
}
10010a9c:	e037883a 	mov	sp,fp
10010aa0:	df000017 	ldw	fp,0(sp)
10010aa4:	dec00104 	addi	sp,sp,4
10010aa8:	f800283a 	ret

10010aac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010aac:	defff804 	addi	sp,sp,-32
10010ab0:	df000715 	stw	fp,28(sp)
10010ab4:	df000704 	addi	fp,sp,28
10010ab8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010abc:	e0bffb17 	ldw	r2,-20(fp)
10010ac0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010ac4:	e0bff917 	ldw	r2,-28(fp)
10010ac8:	10800017 	ldw	r2,0(r2)
10010acc:	10800104 	addi	r2,r2,4
10010ad0:	10800037 	ldwio	r2,0(r2)
10010ad4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010ad8:	e0bffa17 	ldw	r2,-24(fp)
10010adc:	1081000c 	andi	r2,r2,1024
10010ae0:	10000b26 	beq	r2,zero,10010b10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010ae4:	e0bff917 	ldw	r2,-28(fp)
10010ae8:	10800017 	ldw	r2,0(r2)
10010aec:	10800104 	addi	r2,r2,4
10010af0:	1007883a 	mov	r3,r2
10010af4:	e0bff917 	ldw	r2,-28(fp)
10010af8:	10800817 	ldw	r2,32(r2)
10010afc:	10810014 	ori	r2,r2,1024
10010b00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010b04:	e0bff917 	ldw	r2,-28(fp)
10010b08:	10000915 	stw	zero,36(r2)
10010b0c:	00000a06 	br	10010b38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010b10:	e0bff917 	ldw	r2,-28(fp)
10010b14:	10c00917 	ldw	r3,36(r2)
10010b18:	00a00034 	movhi	r2,32768
10010b1c:	10bfff04 	addi	r2,r2,-4
10010b20:	10c00536 	bltu	r2,r3,10010b38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010b24:	e0bff917 	ldw	r2,-28(fp)
10010b28:	10800917 	ldw	r2,36(r2)
10010b2c:	10c00044 	addi	r3,r2,1
10010b30:	e0bff917 	ldw	r2,-28(fp)
10010b34:	10c00915 	stw	r3,36(r2)
10010b38:	00840074 	movhi	r2,4097
10010b3c:	10974004 	addi	r2,r2,23808
10010b40:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010b44:	e037883a 	mov	sp,fp
10010b48:	df000017 	ldw	fp,0(sp)
10010b4c:	dec00104 	addi	sp,sp,4
10010b50:	f800283a 	ret

10010b54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010b54:	defffd04 	addi	sp,sp,-12
10010b58:	df000215 	stw	fp,8(sp)
10010b5c:	df000204 	addi	fp,sp,8
10010b60:	e13ffe15 	stw	r4,-8(fp)
10010b64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010b68:	00000506 	br	10010b80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010b6c:	e0bfff17 	ldw	r2,-4(fp)
10010b70:	1090000c 	andi	r2,r2,16384
10010b74:	10000226 	beq	r2,zero,10010b80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010b78:	00bffd44 	movi	r2,-11
10010b7c:	00000b06 	br	10010bac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010b80:	e0bffe17 	ldw	r2,-8(fp)
10010b84:	10c00d17 	ldw	r3,52(r2)
10010b88:	e0bffe17 	ldw	r2,-8(fp)
10010b8c:	10800c17 	ldw	r2,48(r2)
10010b90:	18800526 	beq	r3,r2,10010ba8 <altera_avalon_jtag_uart_close+0x54>
10010b94:	e0bffe17 	ldw	r2,-8(fp)
10010b98:	10c00917 	ldw	r3,36(r2)
10010b9c:	e0bffe17 	ldw	r2,-8(fp)
10010ba0:	10800117 	ldw	r2,4(r2)
10010ba4:	18bff136 	bltu	r3,r2,10010b6c <__alt_data_end+0xf8010b6c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010ba8:	0005883a 	mov	r2,zero
}
10010bac:	e037883a 	mov	sp,fp
10010bb0:	df000017 	ldw	fp,0(sp)
10010bb4:	dec00104 	addi	sp,sp,4
10010bb8:	f800283a 	ret

10010bbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010bbc:	defffa04 	addi	sp,sp,-24
10010bc0:	df000515 	stw	fp,20(sp)
10010bc4:	df000504 	addi	fp,sp,20
10010bc8:	e13ffd15 	stw	r4,-12(fp)
10010bcc:	e17ffe15 	stw	r5,-8(fp)
10010bd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010bd4:	00bff9c4 	movi	r2,-25
10010bd8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010bdc:	e0bffe17 	ldw	r2,-8(fp)
10010be0:	10da8060 	cmpeqi	r3,r2,27137
10010be4:	1800031e 	bne	r3,zero,10010bf4 <altera_avalon_jtag_uart_ioctl+0x38>
10010be8:	109a80a0 	cmpeqi	r2,r2,27138
10010bec:	1000191e 	bne	r2,zero,10010c54 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010bf0:	00002806 	br	10010c94 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010bf4:	e0bffd17 	ldw	r2,-12(fp)
10010bf8:	10c00117 	ldw	r3,4(r2)
10010bfc:	00a00034 	movhi	r2,32768
10010c00:	10bfffc4 	addi	r2,r2,-1
10010c04:	18801226 	beq	r3,r2,10010c50 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10010c08:	e0bfff17 	ldw	r2,-4(fp)
10010c0c:	10800017 	ldw	r2,0(r2)
10010c10:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010c14:	e0bffc17 	ldw	r2,-16(fp)
10010c18:	10800090 	cmplti	r2,r2,2
10010c1c:	1000061e 	bne	r2,zero,10010c38 <altera_avalon_jtag_uart_ioctl+0x7c>
10010c20:	e0fffc17 	ldw	r3,-16(fp)
10010c24:	00a00034 	movhi	r2,32768
10010c28:	10bfffc4 	addi	r2,r2,-1
10010c2c:	18800226 	beq	r3,r2,10010c38 <altera_avalon_jtag_uart_ioctl+0x7c>
10010c30:	e0bffc17 	ldw	r2,-16(fp)
10010c34:	00000206 	br	10010c40 <altera_avalon_jtag_uart_ioctl+0x84>
10010c38:	00a00034 	movhi	r2,32768
10010c3c:	10bfff84 	addi	r2,r2,-2
10010c40:	e0fffd17 	ldw	r3,-12(fp)
10010c44:	18800115 	stw	r2,4(r3)
      rc = 0;
10010c48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010c4c:	00001106 	br	10010c94 <altera_avalon_jtag_uart_ioctl+0xd8>
10010c50:	00001006 	br	10010c94 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010c54:	e0bffd17 	ldw	r2,-12(fp)
10010c58:	10c00117 	ldw	r3,4(r2)
10010c5c:	00a00034 	movhi	r2,32768
10010c60:	10bfffc4 	addi	r2,r2,-1
10010c64:	18800a26 	beq	r3,r2,10010c90 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010c68:	e0bffd17 	ldw	r2,-12(fp)
10010c6c:	10c00917 	ldw	r3,36(r2)
10010c70:	e0bffd17 	ldw	r2,-12(fp)
10010c74:	10800117 	ldw	r2,4(r2)
10010c78:	1885803a 	cmpltu	r2,r3,r2
10010c7c:	10c03fcc 	andi	r3,r2,255
10010c80:	e0bfff17 	ldw	r2,-4(fp)
10010c84:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010c88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010c8c:	00000006 	br	10010c90 <altera_avalon_jtag_uart_ioctl+0xd4>
10010c90:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010c94:	e0bffb17 	ldw	r2,-20(fp)
}
10010c98:	e037883a 	mov	sp,fp
10010c9c:	df000017 	ldw	fp,0(sp)
10010ca0:	dec00104 	addi	sp,sp,4
10010ca4:	f800283a 	ret

10010ca8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010ca8:	defff304 	addi	sp,sp,-52
10010cac:	dfc00c15 	stw	ra,48(sp)
10010cb0:	df000b15 	stw	fp,44(sp)
10010cb4:	df000b04 	addi	fp,sp,44
10010cb8:	e13ffc15 	stw	r4,-16(fp)
10010cbc:	e17ffd15 	stw	r5,-12(fp)
10010cc0:	e1bffe15 	stw	r6,-8(fp)
10010cc4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010cc8:	e0bffd17 	ldw	r2,-12(fp)
10010ccc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010cd0:	00004906 	br	10010df8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010cd4:	e0bffc17 	ldw	r2,-16(fp)
10010cd8:	10800a17 	ldw	r2,40(r2)
10010cdc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010ce0:	e0bffc17 	ldw	r2,-16(fp)
10010ce4:	10800b17 	ldw	r2,44(r2)
10010ce8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010cec:	e0fff717 	ldw	r3,-36(fp)
10010cf0:	e0bff817 	ldw	r2,-32(fp)
10010cf4:	18800536 	bltu	r3,r2,10010d0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010cf8:	e0fff717 	ldw	r3,-36(fp)
10010cfc:	e0bff817 	ldw	r2,-32(fp)
10010d00:	1885c83a 	sub	r2,r3,r2
10010d04:	e0bff615 	stw	r2,-40(fp)
10010d08:	00000406 	br	10010d1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010d0c:	00c20004 	movi	r3,2048
10010d10:	e0bff817 	ldw	r2,-32(fp)
10010d14:	1885c83a 	sub	r2,r3,r2
10010d18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010d1c:	e0bff617 	ldw	r2,-40(fp)
10010d20:	1000011e 	bne	r2,zero,10010d28 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10010d24:	00001d06 	br	10010d9c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10010d28:	e0fffe17 	ldw	r3,-8(fp)
10010d2c:	e0bff617 	ldw	r2,-40(fp)
10010d30:	1880022e 	bgeu	r3,r2,10010d3c <altera_avalon_jtag_uart_read+0x94>
        n = space;
10010d34:	e0bffe17 	ldw	r2,-8(fp)
10010d38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010d3c:	e0bff817 	ldw	r2,-32(fp)
10010d40:	10800e04 	addi	r2,r2,56
10010d44:	e0fffc17 	ldw	r3,-16(fp)
10010d48:	1885883a 	add	r2,r3,r2
10010d4c:	e13ff517 	ldw	r4,-44(fp)
10010d50:	100b883a 	mov	r5,r2
10010d54:	e1bff617 	ldw	r6,-40(fp)
10010d58:	000bc200 	call	1000bc20 <memcpy>
      ptr   += n;
10010d5c:	e0fff517 	ldw	r3,-44(fp)
10010d60:	e0bff617 	ldw	r2,-40(fp)
10010d64:	1885883a 	add	r2,r3,r2
10010d68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010d6c:	e0fffe17 	ldw	r3,-8(fp)
10010d70:	e0bff617 	ldw	r2,-40(fp)
10010d74:	1885c83a 	sub	r2,r3,r2
10010d78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010d7c:	e0fff817 	ldw	r3,-32(fp)
10010d80:	e0bff617 	ldw	r2,-40(fp)
10010d84:	1885883a 	add	r2,r3,r2
10010d88:	10c1ffcc 	andi	r3,r2,2047
10010d8c:	e0bffc17 	ldw	r2,-16(fp)
10010d90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010d94:	e0bffe17 	ldw	r2,-8(fp)
10010d98:	00bfce16 	blt	zero,r2,10010cd4 <__alt_data_end+0xf8010cd4>

    /* If we read any data then return it */
    if (ptr != buffer)
10010d9c:	e0fff517 	ldw	r3,-44(fp)
10010da0:	e0bffd17 	ldw	r2,-12(fp)
10010da4:	18800126 	beq	r3,r2,10010dac <altera_avalon_jtag_uart_read+0x104>
      break;
10010da8:	00001506 	br	10010e00 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010dac:	e0bfff17 	ldw	r2,-4(fp)
10010db0:	1090000c 	andi	r2,r2,16384
10010db4:	10000126 	beq	r2,zero,10010dbc <altera_avalon_jtag_uart_read+0x114>
      break;
10010db8:	00001106 	br	10010e00 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010dbc:	0001883a 	nop
10010dc0:	e0bffc17 	ldw	r2,-16(fp)
10010dc4:	10c00a17 	ldw	r3,40(r2)
10010dc8:	e0bff717 	ldw	r2,-36(fp)
10010dcc:	1880051e 	bne	r3,r2,10010de4 <altera_avalon_jtag_uart_read+0x13c>
10010dd0:	e0bffc17 	ldw	r2,-16(fp)
10010dd4:	10c00917 	ldw	r3,36(r2)
10010dd8:	e0bffc17 	ldw	r2,-16(fp)
10010ddc:	10800117 	ldw	r2,4(r2)
10010de0:	18bff736 	bltu	r3,r2,10010dc0 <__alt_data_end+0xf8010dc0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010de4:	e0bffc17 	ldw	r2,-16(fp)
10010de8:	10c00a17 	ldw	r3,40(r2)
10010dec:	e0bff717 	ldw	r2,-36(fp)
10010df0:	1880011e 	bne	r3,r2,10010df8 <altera_avalon_jtag_uart_read+0x150>
      break;
10010df4:	00000206 	br	10010e00 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010df8:	e0bffe17 	ldw	r2,-8(fp)
10010dfc:	00bfb516 	blt	zero,r2,10010cd4 <__alt_data_end+0xf8010cd4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010e00:	e0fff517 	ldw	r3,-44(fp)
10010e04:	e0bffd17 	ldw	r2,-12(fp)
10010e08:	18801826 	beq	r3,r2,10010e6c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e0c:	0005303a 	rdctl	r2,status
10010e10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e14:	e0fffa17 	ldw	r3,-24(fp)
10010e18:	00bfff84 	movi	r2,-2
10010e1c:	1884703a 	and	r2,r3,r2
10010e20:	1001703a 	wrctl	status,r2
  
  return context;
10010e24:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010e28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010e2c:	e0bffc17 	ldw	r2,-16(fp)
10010e30:	10800817 	ldw	r2,32(r2)
10010e34:	10c00054 	ori	r3,r2,1
10010e38:	e0bffc17 	ldw	r2,-16(fp)
10010e3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010e40:	e0bffc17 	ldw	r2,-16(fp)
10010e44:	10800017 	ldw	r2,0(r2)
10010e48:	10800104 	addi	r2,r2,4
10010e4c:	1007883a 	mov	r3,r2
10010e50:	e0bffc17 	ldw	r2,-16(fp)
10010e54:	10800817 	ldw	r2,32(r2)
10010e58:	18800035 	stwio	r2,0(r3)
10010e5c:	e0bff917 	ldw	r2,-28(fp)
10010e60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010e64:	e0bffb17 	ldw	r2,-20(fp)
10010e68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010e6c:	e0fff517 	ldw	r3,-44(fp)
10010e70:	e0bffd17 	ldw	r2,-12(fp)
10010e74:	18800426 	beq	r3,r2,10010e88 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10010e78:	e0fff517 	ldw	r3,-44(fp)
10010e7c:	e0bffd17 	ldw	r2,-12(fp)
10010e80:	1885c83a 	sub	r2,r3,r2
10010e84:	00000606 	br	10010ea0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10010e88:	e0bfff17 	ldw	r2,-4(fp)
10010e8c:	1090000c 	andi	r2,r2,16384
10010e90:	10000226 	beq	r2,zero,10010e9c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010e94:	00bffd44 	movi	r2,-11
10010e98:	00000106 	br	10010ea0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10010e9c:	00bffec4 	movi	r2,-5
}
10010ea0:	e037883a 	mov	sp,fp
10010ea4:	dfc00117 	ldw	ra,4(sp)
10010ea8:	df000017 	ldw	fp,0(sp)
10010eac:	dec00204 	addi	sp,sp,8
10010eb0:	f800283a 	ret

10010eb4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010eb4:	defff304 	addi	sp,sp,-52
10010eb8:	dfc00c15 	stw	ra,48(sp)
10010ebc:	df000b15 	stw	fp,44(sp)
10010ec0:	df000b04 	addi	fp,sp,44
10010ec4:	e13ffc15 	stw	r4,-16(fp)
10010ec8:	e17ffd15 	stw	r5,-12(fp)
10010ecc:	e1bffe15 	stw	r6,-8(fp)
10010ed0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010ed4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010ed8:	e0bffd17 	ldw	r2,-12(fp)
10010edc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010ee0:	00003806 	br	10010fc4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010ee4:	e0bffc17 	ldw	r2,-16(fp)
10010ee8:	10800c17 	ldw	r2,48(r2)
10010eec:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10010ef0:	e0bffc17 	ldw	r2,-16(fp)
10010ef4:	10800d17 	ldw	r2,52(r2)
10010ef8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010efc:	e0fff817 	ldw	r3,-32(fp)
10010f00:	e0bff517 	ldw	r2,-44(fp)
10010f04:	1880062e 	bgeu	r3,r2,10010f20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010f08:	e0fff517 	ldw	r3,-44(fp)
10010f0c:	e0bff817 	ldw	r2,-32(fp)
10010f10:	1885c83a 	sub	r2,r3,r2
10010f14:	10bfffc4 	addi	r2,r2,-1
10010f18:	e0bff615 	stw	r2,-40(fp)
10010f1c:	00000b06 	br	10010f4c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010f20:	e0bff517 	ldw	r2,-44(fp)
10010f24:	10000526 	beq	r2,zero,10010f3c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010f28:	00c20004 	movi	r3,2048
10010f2c:	e0bff817 	ldw	r2,-32(fp)
10010f30:	1885c83a 	sub	r2,r3,r2
10010f34:	e0bff615 	stw	r2,-40(fp)
10010f38:	00000406 	br	10010f4c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010f3c:	00c1ffc4 	movi	r3,2047
10010f40:	e0bff817 	ldw	r2,-32(fp)
10010f44:	1885c83a 	sub	r2,r3,r2
10010f48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010f4c:	e0bff617 	ldw	r2,-40(fp)
10010f50:	1000011e 	bne	r2,zero,10010f58 <altera_avalon_jtag_uart_write+0xa4>
        break;
10010f54:	00001d06 	br	10010fcc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10010f58:	e0fffe17 	ldw	r3,-8(fp)
10010f5c:	e0bff617 	ldw	r2,-40(fp)
10010f60:	1880022e 	bgeu	r3,r2,10010f6c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10010f64:	e0bffe17 	ldw	r2,-8(fp)
10010f68:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010f6c:	e0bff817 	ldw	r2,-32(fp)
10010f70:	10820e04 	addi	r2,r2,2104
10010f74:	e0fffc17 	ldw	r3,-16(fp)
10010f78:	1885883a 	add	r2,r3,r2
10010f7c:	1009883a 	mov	r4,r2
10010f80:	e17ffd17 	ldw	r5,-12(fp)
10010f84:	e1bff617 	ldw	r6,-40(fp)
10010f88:	000bc200 	call	1000bc20 <memcpy>
      ptr   += n;
10010f8c:	e0fffd17 	ldw	r3,-12(fp)
10010f90:	e0bff617 	ldw	r2,-40(fp)
10010f94:	1885883a 	add	r2,r3,r2
10010f98:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010f9c:	e0fffe17 	ldw	r3,-8(fp)
10010fa0:	e0bff617 	ldw	r2,-40(fp)
10010fa4:	1885c83a 	sub	r2,r3,r2
10010fa8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010fac:	e0fff817 	ldw	r3,-32(fp)
10010fb0:	e0bff617 	ldw	r2,-40(fp)
10010fb4:	1885883a 	add	r2,r3,r2
10010fb8:	10c1ffcc 	andi	r3,r2,2047
10010fbc:	e0bffc17 	ldw	r2,-16(fp)
10010fc0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010fc4:	e0bffe17 	ldw	r2,-8(fp)
10010fc8:	00bfc616 	blt	zero,r2,10010ee4 <__alt_data_end+0xf8010ee4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010fcc:	0005303a 	rdctl	r2,status
10010fd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010fd4:	e0fffa17 	ldw	r3,-24(fp)
10010fd8:	00bfff84 	movi	r2,-2
10010fdc:	1884703a 	and	r2,r3,r2
10010fe0:	1001703a 	wrctl	status,r2
  
  return context;
10010fe4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010fe8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010fec:	e0bffc17 	ldw	r2,-16(fp)
10010ff0:	10800817 	ldw	r2,32(r2)
10010ff4:	10c00094 	ori	r3,r2,2
10010ff8:	e0bffc17 	ldw	r2,-16(fp)
10010ffc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011000:	e0bffc17 	ldw	r2,-16(fp)
10011004:	10800017 	ldw	r2,0(r2)
10011008:	10800104 	addi	r2,r2,4
1001100c:	1007883a 	mov	r3,r2
10011010:	e0bffc17 	ldw	r2,-16(fp)
10011014:	10800817 	ldw	r2,32(r2)
10011018:	18800035 	stwio	r2,0(r3)
1001101c:	e0bff917 	ldw	r2,-28(fp)
10011020:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011024:	e0bffb17 	ldw	r2,-20(fp)
10011028:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1001102c:	e0bffe17 	ldw	r2,-8(fp)
10011030:	0080120e 	bge	zero,r2,1001107c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10011034:	e0bfff17 	ldw	r2,-4(fp)
10011038:	1090000c 	andi	r2,r2,16384
1001103c:	10000126 	beq	r2,zero,10011044 <altera_avalon_jtag_uart_write+0x190>
        break;
10011040:	00001006 	br	10011084 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011044:	0001883a 	nop
10011048:	e0bffc17 	ldw	r2,-16(fp)
1001104c:	10c00d17 	ldw	r3,52(r2)
10011050:	e0bff517 	ldw	r2,-44(fp)
10011054:	1880051e 	bne	r3,r2,1001106c <altera_avalon_jtag_uart_write+0x1b8>
10011058:	e0bffc17 	ldw	r2,-16(fp)
1001105c:	10c00917 	ldw	r3,36(r2)
10011060:	e0bffc17 	ldw	r2,-16(fp)
10011064:	10800117 	ldw	r2,4(r2)
10011068:	18bff736 	bltu	r3,r2,10011048 <__alt_data_end+0xf8011048>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1001106c:	e0bffc17 	ldw	r2,-16(fp)
10011070:	10800917 	ldw	r2,36(r2)
10011074:	10000126 	beq	r2,zero,1001107c <altera_avalon_jtag_uart_write+0x1c8>
         break;
10011078:	00000206 	br	10011084 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1001107c:	e0bffe17 	ldw	r2,-8(fp)
10011080:	00bf9716 	blt	zero,r2,10010ee0 <__alt_data_end+0xf8010ee0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011084:	e0fffd17 	ldw	r3,-12(fp)
10011088:	e0bff717 	ldw	r2,-36(fp)
1001108c:	18800426 	beq	r3,r2,100110a0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10011090:	e0fffd17 	ldw	r3,-12(fp)
10011094:	e0bff717 	ldw	r2,-36(fp)
10011098:	1885c83a 	sub	r2,r3,r2
1001109c:	00000606 	br	100110b8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100110a0:	e0bfff17 	ldw	r2,-4(fp)
100110a4:	1090000c 	andi	r2,r2,16384
100110a8:	10000226 	beq	r2,zero,100110b4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100110ac:	00bffd44 	movi	r2,-11
100110b0:	00000106 	br	100110b8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100110b4:	00bffec4 	movi	r2,-5
}
100110b8:	e037883a 	mov	sp,fp
100110bc:	dfc00117 	ldw	ra,4(sp)
100110c0:	df000017 	ldw	fp,0(sp)
100110c4:	dec00204 	addi	sp,sp,8
100110c8:	f800283a 	ret

100110cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100110cc:	defff504 	addi	sp,sp,-44
100110d0:	df000a15 	stw	fp,40(sp)
100110d4:	df000a04 	addi	fp,sp,40
100110d8:	e13ffc15 	stw	r4,-16(fp)
100110dc:	e17ffd15 	stw	r5,-12(fp)
100110e0:	e1bffe15 	stw	r6,-8(fp)
100110e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100110e8:	e03ff615 	stw	zero,-40(fp)
100110ec:	00840074 	movhi	r2,4097
100110f0:	10974004 	addi	r2,r2,23808
100110f4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100110f8:	10003f26 	beq	r2,zero,100111f8 <alt_alarm_start+0x12c>
  {
    if (alarm)
100110fc:	e0bffc17 	ldw	r2,-16(fp)
10011100:	10003b26 	beq	r2,zero,100111f0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10011104:	e0bffc17 	ldw	r2,-16(fp)
10011108:	e0fffe17 	ldw	r3,-8(fp)
1001110c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10011110:	e0bffc17 	ldw	r2,-16(fp)
10011114:	e0ffff17 	ldw	r3,-4(fp)
10011118:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001111c:	0005303a 	rdctl	r2,status
10011120:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011124:	e0fff817 	ldw	r3,-32(fp)
10011128:	00bfff84 	movi	r2,-2
1001112c:	1884703a 	and	r2,r3,r2
10011130:	1001703a 	wrctl	status,r2
  
  return context;
10011134:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10011138:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1001113c:	00840074 	movhi	r2,4097
10011140:	10974104 	addi	r2,r2,23812
10011144:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10011148:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001114c:	e0fffd17 	ldw	r3,-12(fp)
10011150:	e0bff617 	ldw	r2,-40(fp)
10011154:	1885883a 	add	r2,r3,r2
10011158:	10c00044 	addi	r3,r2,1
1001115c:	e0bffc17 	ldw	r2,-16(fp)
10011160:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011164:	e0bffc17 	ldw	r2,-16(fp)
10011168:	10c00217 	ldw	r3,8(r2)
1001116c:	e0bff617 	ldw	r2,-40(fp)
10011170:	1880042e 	bgeu	r3,r2,10011184 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10011174:	e0bffc17 	ldw	r2,-16(fp)
10011178:	00c00044 	movi	r3,1
1001117c:	10c00405 	stb	r3,16(r2)
10011180:	00000206 	br	1001118c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011184:	e0bffc17 	ldw	r2,-16(fp)
10011188:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1001118c:	e0fffc17 	ldw	r3,-16(fp)
10011190:	00840074 	movhi	r2,4097
10011194:	10907004 	addi	r2,r2,16832
10011198:	e0bff915 	stw	r2,-28(fp)
1001119c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100111a0:	e0bffa17 	ldw	r2,-24(fp)
100111a4:	e0fff917 	ldw	r3,-28(fp)
100111a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100111ac:	e0bff917 	ldw	r2,-28(fp)
100111b0:	10c00017 	ldw	r3,0(r2)
100111b4:	e0bffa17 	ldw	r2,-24(fp)
100111b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100111bc:	e0bff917 	ldw	r2,-28(fp)
100111c0:	10800017 	ldw	r2,0(r2)
100111c4:	e0fffa17 	ldw	r3,-24(fp)
100111c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100111cc:	e0bff917 	ldw	r2,-28(fp)
100111d0:	e0fffa17 	ldw	r3,-24(fp)
100111d4:	10c00015 	stw	r3,0(r2)
100111d8:	e0bff717 	ldw	r2,-36(fp)
100111dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100111e0:	e0bffb17 	ldw	r2,-20(fp)
100111e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100111e8:	0005883a 	mov	r2,zero
100111ec:	00000306 	br	100111fc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100111f0:	00bffa84 	movi	r2,-22
100111f4:	00000106 	br	100111fc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100111f8:	00bfde84 	movi	r2,-134
  }
}
100111fc:	e037883a 	mov	sp,fp
10011200:	df000017 	ldw	fp,0(sp)
10011204:	dec00104 	addi	sp,sp,4
10011208:	f800283a 	ret

1001120c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1001120c:	deffff04 	addi	sp,sp,-4
10011210:	df000015 	stw	fp,0(sp)
10011214:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011218:	e037883a 	mov	sp,fp
1001121c:	df000017 	ldw	fp,0(sp)
10011220:	dec00104 	addi	sp,sp,4
10011224:	f800283a 	ret

10011228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011228:	defffe04 	addi	sp,sp,-8
1001122c:	dfc00115 	stw	ra,4(sp)
10011230:	df000015 	stw	fp,0(sp)
10011234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011238:	00840074 	movhi	r2,4097
1001123c:	10906d04 	addi	r2,r2,16820
10011240:	10800017 	ldw	r2,0(r2)
10011244:	10000526 	beq	r2,zero,1001125c <alt_get_errno+0x34>
10011248:	00840074 	movhi	r2,4097
1001124c:	10906d04 	addi	r2,r2,16820
10011250:	10800017 	ldw	r2,0(r2)
10011254:	103ee83a 	callr	r2
10011258:	00000206 	br	10011264 <alt_get_errno+0x3c>
1001125c:	00840074 	movhi	r2,4097
10011260:	10973b04 	addi	r2,r2,23788
}
10011264:	e037883a 	mov	sp,fp
10011268:	dfc00117 	ldw	ra,4(sp)
1001126c:	df000017 	ldw	fp,0(sp)
10011270:	dec00204 	addi	sp,sp,8
10011274:	f800283a 	ret

10011278 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011278:	defffa04 	addi	sp,sp,-24
1001127c:	dfc00515 	stw	ra,20(sp)
10011280:	df000415 	stw	fp,16(sp)
10011284:	df000404 	addi	fp,sp,16
10011288:	e13ffe15 	stw	r4,-8(fp)
1001128c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011290:	e0bffe17 	ldw	r2,-8(fp)
10011294:	10000326 	beq	r2,zero,100112a4 <alt_dev_llist_insert+0x2c>
10011298:	e0bffe17 	ldw	r2,-8(fp)
1001129c:	10800217 	ldw	r2,8(r2)
100112a0:	1000061e 	bne	r2,zero,100112bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100112a4:	00112280 	call	10011228 <alt_get_errno>
100112a8:	1007883a 	mov	r3,r2
100112ac:	00800584 	movi	r2,22
100112b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100112b4:	00bffa84 	movi	r2,-22
100112b8:	00001306 	br	10011308 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100112bc:	e0bffe17 	ldw	r2,-8(fp)
100112c0:	e0ffff17 	ldw	r3,-4(fp)
100112c4:	e0fffc15 	stw	r3,-16(fp)
100112c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100112cc:	e0bffd17 	ldw	r2,-12(fp)
100112d0:	e0fffc17 	ldw	r3,-16(fp)
100112d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100112d8:	e0bffc17 	ldw	r2,-16(fp)
100112dc:	10c00017 	ldw	r3,0(r2)
100112e0:	e0bffd17 	ldw	r2,-12(fp)
100112e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100112e8:	e0bffc17 	ldw	r2,-16(fp)
100112ec:	10800017 	ldw	r2,0(r2)
100112f0:	e0fffd17 	ldw	r3,-12(fp)
100112f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100112f8:	e0bffc17 	ldw	r2,-16(fp)
100112fc:	e0fffd17 	ldw	r3,-12(fp)
10011300:	10c00015 	stw	r3,0(r2)

  return 0;  
10011304:	0005883a 	mov	r2,zero
}
10011308:	e037883a 	mov	sp,fp
1001130c:	dfc00117 	ldw	ra,4(sp)
10011310:	df000017 	ldw	fp,0(sp)
10011314:	dec00204 	addi	sp,sp,8
10011318:	f800283a 	ret

1001131c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1001131c:	defffd04 	addi	sp,sp,-12
10011320:	dfc00215 	stw	ra,8(sp)
10011324:	df000115 	stw	fp,4(sp)
10011328:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001132c:	00840074 	movhi	r2,4097
10011330:	1088cb04 	addi	r2,r2,9004
10011334:	e0bfff15 	stw	r2,-4(fp)
10011338:	00000606 	br	10011354 <_do_ctors+0x38>
        (*ctor) (); 
1001133c:	e0bfff17 	ldw	r2,-4(fp)
10011340:	10800017 	ldw	r2,0(r2)
10011344:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011348:	e0bfff17 	ldw	r2,-4(fp)
1001134c:	10bfff04 	addi	r2,r2,-4
10011350:	e0bfff15 	stw	r2,-4(fp)
10011354:	e0ffff17 	ldw	r3,-4(fp)
10011358:	00840074 	movhi	r2,4097
1001135c:	1088cc04 	addi	r2,r2,9008
10011360:	18bff62e 	bgeu	r3,r2,1001133c <__alt_data_end+0xf801133c>
        (*ctor) (); 
}
10011364:	e037883a 	mov	sp,fp
10011368:	dfc00117 	ldw	ra,4(sp)
1001136c:	df000017 	ldw	fp,0(sp)
10011370:	dec00204 	addi	sp,sp,8
10011374:	f800283a 	ret

10011378 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011378:	defffd04 	addi	sp,sp,-12
1001137c:	dfc00215 	stw	ra,8(sp)
10011380:	df000115 	stw	fp,4(sp)
10011384:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011388:	00840074 	movhi	r2,4097
1001138c:	1088cb04 	addi	r2,r2,9004
10011390:	e0bfff15 	stw	r2,-4(fp)
10011394:	00000606 	br	100113b0 <_do_dtors+0x38>
        (*dtor) (); 
10011398:	e0bfff17 	ldw	r2,-4(fp)
1001139c:	10800017 	ldw	r2,0(r2)
100113a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100113a4:	e0bfff17 	ldw	r2,-4(fp)
100113a8:	10bfff04 	addi	r2,r2,-4
100113ac:	e0bfff15 	stw	r2,-4(fp)
100113b0:	e0ffff17 	ldw	r3,-4(fp)
100113b4:	00840074 	movhi	r2,4097
100113b8:	1088cc04 	addi	r2,r2,9008
100113bc:	18bff62e 	bgeu	r3,r2,10011398 <__alt_data_end+0xf8011398>
        (*dtor) (); 
}
100113c0:	e037883a 	mov	sp,fp
100113c4:	dfc00117 	ldw	ra,4(sp)
100113c8:	df000017 	ldw	fp,0(sp)
100113cc:	dec00204 	addi	sp,sp,8
100113d0:	f800283a 	ret

100113d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100113d4:	deffff04 	addi	sp,sp,-4
100113d8:	df000015 	stw	fp,0(sp)
100113dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100113e0:	e037883a 	mov	sp,fp
100113e4:	df000017 	ldw	fp,0(sp)
100113e8:	dec00104 	addi	sp,sp,4
100113ec:	f800283a 	ret

100113f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100113f0:	defff904 	addi	sp,sp,-28
100113f4:	dfc00615 	stw	ra,24(sp)
100113f8:	df000515 	stw	fp,20(sp)
100113fc:	df000504 	addi	fp,sp,20
10011400:	e13ffc15 	stw	r4,-16(fp)
10011404:	e17ffd15 	stw	r5,-12(fp)
10011408:	e1bffe15 	stw	r6,-8(fp)
1001140c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011410:	e0800217 	ldw	r2,8(fp)
10011414:	d8800015 	stw	r2,0(sp)
10011418:	e13ffc17 	ldw	r4,-16(fp)
1001141c:	e17ffd17 	ldw	r5,-12(fp)
10011420:	e1bffe17 	ldw	r6,-8(fp)
10011424:	e1ffff17 	ldw	r7,-4(fp)
10011428:	00115d00 	call	100115d0 <alt_iic_isr_register>
}  
1001142c:	e037883a 	mov	sp,fp
10011430:	dfc00117 	ldw	ra,4(sp)
10011434:	df000017 	ldw	fp,0(sp)
10011438:	dec00204 	addi	sp,sp,8
1001143c:	f800283a 	ret

10011440 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011440:	defff904 	addi	sp,sp,-28
10011444:	df000615 	stw	fp,24(sp)
10011448:	df000604 	addi	fp,sp,24
1001144c:	e13ffe15 	stw	r4,-8(fp)
10011450:	e17fff15 	stw	r5,-4(fp)
10011454:	e0bfff17 	ldw	r2,-4(fp)
10011458:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001145c:	0005303a 	rdctl	r2,status
10011460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011464:	e0fffb17 	ldw	r3,-20(fp)
10011468:	00bfff84 	movi	r2,-2
1001146c:	1884703a 	and	r2,r3,r2
10011470:	1001703a 	wrctl	status,r2
  
  return context;
10011474:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011478:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001147c:	e0bffa17 	ldw	r2,-24(fp)
10011480:	00c00044 	movi	r3,1
10011484:	1884983a 	sll	r2,r3,r2
10011488:	1007883a 	mov	r3,r2
1001148c:	00840074 	movhi	r2,4097
10011490:	10973f04 	addi	r2,r2,23804
10011494:	10800017 	ldw	r2,0(r2)
10011498:	1886b03a 	or	r3,r3,r2
1001149c:	00840074 	movhi	r2,4097
100114a0:	10973f04 	addi	r2,r2,23804
100114a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100114a8:	00840074 	movhi	r2,4097
100114ac:	10973f04 	addi	r2,r2,23804
100114b0:	10800017 	ldw	r2,0(r2)
100114b4:	100170fa 	wrctl	ienable,r2
100114b8:	e0bffc17 	ldw	r2,-16(fp)
100114bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100114c0:	e0bffd17 	ldw	r2,-12(fp)
100114c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100114c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100114cc:	0001883a 	nop
}
100114d0:	e037883a 	mov	sp,fp
100114d4:	df000017 	ldw	fp,0(sp)
100114d8:	dec00104 	addi	sp,sp,4
100114dc:	f800283a 	ret

100114e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100114e0:	defff904 	addi	sp,sp,-28
100114e4:	df000615 	stw	fp,24(sp)
100114e8:	df000604 	addi	fp,sp,24
100114ec:	e13ffe15 	stw	r4,-8(fp)
100114f0:	e17fff15 	stw	r5,-4(fp)
100114f4:	e0bfff17 	ldw	r2,-4(fp)
100114f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100114fc:	0005303a 	rdctl	r2,status
10011500:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011504:	e0fffb17 	ldw	r3,-20(fp)
10011508:	00bfff84 	movi	r2,-2
1001150c:	1884703a 	and	r2,r3,r2
10011510:	1001703a 	wrctl	status,r2
  
  return context;
10011514:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011518:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1001151c:	e0bffa17 	ldw	r2,-24(fp)
10011520:	00c00044 	movi	r3,1
10011524:	1884983a 	sll	r2,r3,r2
10011528:	0084303a 	nor	r2,zero,r2
1001152c:	1007883a 	mov	r3,r2
10011530:	00840074 	movhi	r2,4097
10011534:	10973f04 	addi	r2,r2,23804
10011538:	10800017 	ldw	r2,0(r2)
1001153c:	1886703a 	and	r3,r3,r2
10011540:	00840074 	movhi	r2,4097
10011544:	10973f04 	addi	r2,r2,23804
10011548:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001154c:	00840074 	movhi	r2,4097
10011550:	10973f04 	addi	r2,r2,23804
10011554:	10800017 	ldw	r2,0(r2)
10011558:	100170fa 	wrctl	ienable,r2
1001155c:	e0bffc17 	ldw	r2,-16(fp)
10011560:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011564:	e0bffd17 	ldw	r2,-12(fp)
10011568:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001156c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011570:	0001883a 	nop
}
10011574:	e037883a 	mov	sp,fp
10011578:	df000017 	ldw	fp,0(sp)
1001157c:	dec00104 	addi	sp,sp,4
10011580:	f800283a 	ret

10011584 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011584:	defffc04 	addi	sp,sp,-16
10011588:	df000315 	stw	fp,12(sp)
1001158c:	df000304 	addi	fp,sp,12
10011590:	e13ffe15 	stw	r4,-8(fp)
10011594:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011598:	000530fa 	rdctl	r2,ienable
1001159c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100115a0:	e0bfff17 	ldw	r2,-4(fp)
100115a4:	00c00044 	movi	r3,1
100115a8:	1884983a 	sll	r2,r3,r2
100115ac:	1007883a 	mov	r3,r2
100115b0:	e0bffd17 	ldw	r2,-12(fp)
100115b4:	1884703a 	and	r2,r3,r2
100115b8:	1004c03a 	cmpne	r2,r2,zero
100115bc:	10803fcc 	andi	r2,r2,255
}
100115c0:	e037883a 	mov	sp,fp
100115c4:	df000017 	ldw	fp,0(sp)
100115c8:	dec00104 	addi	sp,sp,4
100115cc:	f800283a 	ret

100115d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100115d0:	defff504 	addi	sp,sp,-44
100115d4:	dfc00a15 	stw	ra,40(sp)
100115d8:	df000915 	stw	fp,36(sp)
100115dc:	df000904 	addi	fp,sp,36
100115e0:	e13ffc15 	stw	r4,-16(fp)
100115e4:	e17ffd15 	stw	r5,-12(fp)
100115e8:	e1bffe15 	stw	r6,-8(fp)
100115ec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100115f0:	00bffa84 	movi	r2,-22
100115f4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100115f8:	e0bffd17 	ldw	r2,-12(fp)
100115fc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011600:	e0bff817 	ldw	r2,-32(fp)
10011604:	10800808 	cmpgei	r2,r2,32
10011608:	1000271e 	bne	r2,zero,100116a8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001160c:	0005303a 	rdctl	r2,status
10011610:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011614:	e0fffa17 	ldw	r3,-24(fp)
10011618:	00bfff84 	movi	r2,-2
1001161c:	1884703a 	and	r2,r3,r2
10011620:	1001703a 	wrctl	status,r2
  
  return context;
10011624:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011628:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1001162c:	00840074 	movhi	r2,4097
10011630:	1097dd04 	addi	r2,r2,24436
10011634:	e0fff817 	ldw	r3,-32(fp)
10011638:	180690fa 	slli	r3,r3,3
1001163c:	10c5883a 	add	r2,r2,r3
10011640:	e0fffe17 	ldw	r3,-8(fp)
10011644:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011648:	00840074 	movhi	r2,4097
1001164c:	1097dd04 	addi	r2,r2,24436
10011650:	e0fff817 	ldw	r3,-32(fp)
10011654:	180690fa 	slli	r3,r3,3
10011658:	10c5883a 	add	r2,r2,r3
1001165c:	10800104 	addi	r2,r2,4
10011660:	e0ffff17 	ldw	r3,-4(fp)
10011664:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011668:	e0bffe17 	ldw	r2,-8(fp)
1001166c:	10000526 	beq	r2,zero,10011684 <alt_iic_isr_register+0xb4>
10011670:	e0bff817 	ldw	r2,-32(fp)
10011674:	e13ffc17 	ldw	r4,-16(fp)
10011678:	100b883a 	mov	r5,r2
1001167c:	00114400 	call	10011440 <alt_ic_irq_enable>
10011680:	00000406 	br	10011694 <alt_iic_isr_register+0xc4>
10011684:	e0bff817 	ldw	r2,-32(fp)
10011688:	e13ffc17 	ldw	r4,-16(fp)
1001168c:	100b883a 	mov	r5,r2
10011690:	00114e00 	call	100114e0 <alt_ic_irq_disable>
10011694:	e0bff715 	stw	r2,-36(fp)
10011698:	e0bff917 	ldw	r2,-28(fp)
1001169c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100116a0:	e0bffb17 	ldw	r2,-20(fp)
100116a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100116a8:	e0bff717 	ldw	r2,-36(fp)
}
100116ac:	e037883a 	mov	sp,fp
100116b0:	dfc00117 	ldw	ra,4(sp)
100116b4:	df000017 	ldw	fp,0(sp)
100116b8:	dec00204 	addi	sp,sp,8
100116bc:	f800283a 	ret

100116c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100116c0:	defff804 	addi	sp,sp,-32
100116c4:	dfc00715 	stw	ra,28(sp)
100116c8:	df000615 	stw	fp,24(sp)
100116cc:	dc000515 	stw	r16,20(sp)
100116d0:	df000604 	addi	fp,sp,24
100116d4:	e13ffb15 	stw	r4,-20(fp)
100116d8:	e17ffc15 	stw	r5,-16(fp)
100116dc:	e1bffd15 	stw	r6,-12(fp)
100116e0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100116e4:	e13ffc17 	ldw	r4,-16(fp)
100116e8:	e17ffd17 	ldw	r5,-12(fp)
100116ec:	e1bffe17 	ldw	r6,-8(fp)
100116f0:	001195c0 	call	1001195c <open>
100116f4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100116f8:	e0bffa17 	ldw	r2,-24(fp)
100116fc:	10002216 	blt	r2,zero,10011788 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011700:	04040074 	movhi	r16,4097
10011704:	840be904 	addi	r16,r16,12196
10011708:	e0bffa17 	ldw	r2,-24(fp)
1001170c:	1009883a 	mov	r4,r2
10011710:	01400304 	movi	r5,12
10011714:	00040b00 	call	100040b0 <__mulsi3>
10011718:	8085883a 	add	r2,r16,r2
1001171c:	10c00017 	ldw	r3,0(r2)
10011720:	e0bffb17 	ldw	r2,-20(fp)
10011724:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011728:	04040074 	movhi	r16,4097
1001172c:	840be904 	addi	r16,r16,12196
10011730:	e0bffa17 	ldw	r2,-24(fp)
10011734:	1009883a 	mov	r4,r2
10011738:	01400304 	movi	r5,12
1001173c:	00040b00 	call	100040b0 <__mulsi3>
10011740:	8085883a 	add	r2,r16,r2
10011744:	10800104 	addi	r2,r2,4
10011748:	10c00017 	ldw	r3,0(r2)
1001174c:	e0bffb17 	ldw	r2,-20(fp)
10011750:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011754:	04040074 	movhi	r16,4097
10011758:	840be904 	addi	r16,r16,12196
1001175c:	e0bffa17 	ldw	r2,-24(fp)
10011760:	1009883a 	mov	r4,r2
10011764:	01400304 	movi	r5,12
10011768:	00040b00 	call	100040b0 <__mulsi3>
1001176c:	8085883a 	add	r2,r16,r2
10011770:	10800204 	addi	r2,r2,8
10011774:	10c00017 	ldw	r3,0(r2)
10011778:	e0bffb17 	ldw	r2,-20(fp)
1001177c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011780:	e13ffa17 	ldw	r4,-24(fp)
10011784:	001034c0 	call	1001034c <alt_release_fd>
  }
} 
10011788:	e6ffff04 	addi	sp,fp,-4
1001178c:	dfc00217 	ldw	ra,8(sp)
10011790:	df000117 	ldw	fp,4(sp)
10011794:	dc000017 	ldw	r16,0(sp)
10011798:	dec00304 	addi	sp,sp,12
1001179c:	f800283a 	ret

100117a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100117a0:	defffb04 	addi	sp,sp,-20
100117a4:	dfc00415 	stw	ra,16(sp)
100117a8:	df000315 	stw	fp,12(sp)
100117ac:	df000304 	addi	fp,sp,12
100117b0:	e13ffd15 	stw	r4,-12(fp)
100117b4:	e17ffe15 	stw	r5,-8(fp)
100117b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100117bc:	01040074 	movhi	r4,4097
100117c0:	210bec04 	addi	r4,r4,12208
100117c4:	e17ffd17 	ldw	r5,-12(fp)
100117c8:	01800044 	movi	r6,1
100117cc:	01c07fc4 	movi	r7,511
100117d0:	00116c00 	call	100116c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100117d4:	01040074 	movhi	r4,4097
100117d8:	210be904 	addi	r4,r4,12196
100117dc:	e17ffe17 	ldw	r5,-8(fp)
100117e0:	000d883a 	mov	r6,zero
100117e4:	01c07fc4 	movi	r7,511
100117e8:	00116c00 	call	100116c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100117ec:	01040074 	movhi	r4,4097
100117f0:	210bef04 	addi	r4,r4,12220
100117f4:	e17fff17 	ldw	r5,-4(fp)
100117f8:	01800044 	movi	r6,1
100117fc:	01c07fc4 	movi	r7,511
10011800:	00116c00 	call	100116c0 <alt_open_fd>
}  
10011804:	e037883a 	mov	sp,fp
10011808:	dfc00117 	ldw	ra,4(sp)
1001180c:	df000017 	ldw	fp,0(sp)
10011810:	dec00204 	addi	sp,sp,8
10011814:	f800283a 	ret

10011818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011818:	defffe04 	addi	sp,sp,-8
1001181c:	dfc00115 	stw	ra,4(sp)
10011820:	df000015 	stw	fp,0(sp)
10011824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011828:	00840074 	movhi	r2,4097
1001182c:	10906d04 	addi	r2,r2,16820
10011830:	10800017 	ldw	r2,0(r2)
10011834:	10000526 	beq	r2,zero,1001184c <alt_get_errno+0x34>
10011838:	00840074 	movhi	r2,4097
1001183c:	10906d04 	addi	r2,r2,16820
10011840:	10800017 	ldw	r2,0(r2)
10011844:	103ee83a 	callr	r2
10011848:	00000206 	br	10011854 <alt_get_errno+0x3c>
1001184c:	00840074 	movhi	r2,4097
10011850:	10973b04 	addi	r2,r2,23788
}
10011854:	e037883a 	mov	sp,fp
10011858:	dfc00117 	ldw	ra,4(sp)
1001185c:	df000017 	ldw	fp,0(sp)
10011860:	dec00204 	addi	sp,sp,8
10011864:	f800283a 	ret

10011868 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011868:	defffb04 	addi	sp,sp,-20
1001186c:	dfc00415 	stw	ra,16(sp)
10011870:	df000315 	stw	fp,12(sp)
10011874:	dc000215 	stw	r16,8(sp)
10011878:	df000304 	addi	fp,sp,12
1001187c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011880:	e0bffe17 	ldw	r2,-8(fp)
10011884:	10800217 	ldw	r2,8(r2)
10011888:	10d00034 	orhi	r3,r2,16384
1001188c:	e0bffe17 	ldw	r2,-8(fp)
10011890:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011894:	e03ffd15 	stw	zero,-12(fp)
10011898:	00002306 	br	10011928 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001189c:	04040074 	movhi	r16,4097
100118a0:	840be904 	addi	r16,r16,12196
100118a4:	e0bffd17 	ldw	r2,-12(fp)
100118a8:	1009883a 	mov	r4,r2
100118ac:	01400304 	movi	r5,12
100118b0:	00040b00 	call	100040b0 <__mulsi3>
100118b4:	8085883a 	add	r2,r16,r2
100118b8:	10c00017 	ldw	r3,0(r2)
100118bc:	e0bffe17 	ldw	r2,-8(fp)
100118c0:	10800017 	ldw	r2,0(r2)
100118c4:	1880151e 	bne	r3,r2,1001191c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100118c8:	04040074 	movhi	r16,4097
100118cc:	840be904 	addi	r16,r16,12196
100118d0:	e0bffd17 	ldw	r2,-12(fp)
100118d4:	1009883a 	mov	r4,r2
100118d8:	01400304 	movi	r5,12
100118dc:	00040b00 	call	100040b0 <__mulsi3>
100118e0:	8085883a 	add	r2,r16,r2
100118e4:	10800204 	addi	r2,r2,8
100118e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100118ec:	10000b0e 	bge	r2,zero,1001191c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100118f0:	e13ffd17 	ldw	r4,-12(fp)
100118f4:	01400304 	movi	r5,12
100118f8:	00040b00 	call	100040b0 <__mulsi3>
100118fc:	1007883a 	mov	r3,r2
10011900:	00840074 	movhi	r2,4097
10011904:	108be904 	addi	r2,r2,12196
10011908:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001190c:	e0bffe17 	ldw	r2,-8(fp)
10011910:	18800226 	beq	r3,r2,1001191c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011914:	00bffcc4 	movi	r2,-13
10011918:	00000a06 	br	10011944 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1001191c:	e0bffd17 	ldw	r2,-12(fp)
10011920:	10800044 	addi	r2,r2,1
10011924:	e0bffd15 	stw	r2,-12(fp)
10011928:	00840074 	movhi	r2,4097
1001192c:	10906c04 	addi	r2,r2,16816
10011930:	10800017 	ldw	r2,0(r2)
10011934:	1007883a 	mov	r3,r2
10011938:	e0bffd17 	ldw	r2,-12(fp)
1001193c:	18bfd72e 	bgeu	r3,r2,1001189c <__alt_data_end+0xf801189c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011940:	0005883a 	mov	r2,zero
}
10011944:	e6ffff04 	addi	sp,fp,-4
10011948:	dfc00217 	ldw	ra,8(sp)
1001194c:	df000117 	ldw	fp,4(sp)
10011950:	dc000017 	ldw	r16,0(sp)
10011954:	dec00304 	addi	sp,sp,12
10011958:	f800283a 	ret

1001195c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1001195c:	defff604 	addi	sp,sp,-40
10011960:	dfc00915 	stw	ra,36(sp)
10011964:	df000815 	stw	fp,32(sp)
10011968:	df000804 	addi	fp,sp,32
1001196c:	e13ffd15 	stw	r4,-12(fp)
10011970:	e17ffe15 	stw	r5,-8(fp)
10011974:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011978:	00bfffc4 	movi	r2,-1
1001197c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011980:	00bffb44 	movi	r2,-19
10011984:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011988:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1001198c:	e13ffd17 	ldw	r4,-12(fp)
10011990:	01440074 	movhi	r5,4097
10011994:	29506a04 	addi	r5,r5,16808
10011998:	0011c780 	call	10011c78 <alt_find_dev>
1001199c:	e0bff815 	stw	r2,-32(fp)
100119a0:	e0bff817 	ldw	r2,-32(fp)
100119a4:	1000051e 	bne	r2,zero,100119bc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100119a8:	e13ffd17 	ldw	r4,-12(fp)
100119ac:	0011d080 	call	10011d08 <alt_find_file>
100119b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100119b4:	00800044 	movi	r2,1
100119b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100119bc:	e0bff817 	ldw	r2,-32(fp)
100119c0:	10002b26 	beq	r2,zero,10011a70 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
100119c4:	e13ff817 	ldw	r4,-32(fp)
100119c8:	0011e1c0 	call	10011e1c <alt_get_fd>
100119cc:	e0bff915 	stw	r2,-28(fp)
100119d0:	e0bff917 	ldw	r2,-28(fp)
100119d4:	1000030e 	bge	r2,zero,100119e4 <open+0x88>
    {
      status = index;
100119d8:	e0bff917 	ldw	r2,-28(fp)
100119dc:	e0bffa15 	stw	r2,-24(fp)
100119e0:	00002506 	br	10011a78 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100119e4:	e13ff917 	ldw	r4,-28(fp)
100119e8:	01400304 	movi	r5,12
100119ec:	00040b00 	call	100040b0 <__mulsi3>
100119f0:	1007883a 	mov	r3,r2
100119f4:	00840074 	movhi	r2,4097
100119f8:	108be904 	addi	r2,r2,12196
100119fc:	1885883a 	add	r2,r3,r2
10011a00:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011a04:	e0fffe17 	ldw	r3,-8(fp)
10011a08:	00900034 	movhi	r2,16384
10011a0c:	10bfffc4 	addi	r2,r2,-1
10011a10:	1886703a 	and	r3,r3,r2
10011a14:	e0bffc17 	ldw	r2,-16(fp)
10011a18:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011a1c:	e0bffb17 	ldw	r2,-20(fp)
10011a20:	1000051e 	bne	r2,zero,10011a38 <open+0xdc>
10011a24:	e13ffc17 	ldw	r4,-16(fp)
10011a28:	00118680 	call	10011868 <alt_file_locked>
10011a2c:	e0bffa15 	stw	r2,-24(fp)
10011a30:	e0bffa17 	ldw	r2,-24(fp)
10011a34:	10001016 	blt	r2,zero,10011a78 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011a38:	e0bff817 	ldw	r2,-32(fp)
10011a3c:	10800317 	ldw	r2,12(r2)
10011a40:	10000826 	beq	r2,zero,10011a64 <open+0x108>
10011a44:	e0bff817 	ldw	r2,-32(fp)
10011a48:	10800317 	ldw	r2,12(r2)
10011a4c:	e13ffc17 	ldw	r4,-16(fp)
10011a50:	e17ffd17 	ldw	r5,-12(fp)
10011a54:	e1bffe17 	ldw	r6,-8(fp)
10011a58:	e1ffff17 	ldw	r7,-4(fp)
10011a5c:	103ee83a 	callr	r2
10011a60:	00000106 	br	10011a68 <open+0x10c>
10011a64:	0005883a 	mov	r2,zero
10011a68:	e0bffa15 	stw	r2,-24(fp)
10011a6c:	00000206 	br	10011a78 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011a70:	00bffb44 	movi	r2,-19
10011a74:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011a78:	e0bffa17 	ldw	r2,-24(fp)
10011a7c:	1000090e 	bge	r2,zero,10011aa4 <open+0x148>
  {
    alt_release_fd (index);  
10011a80:	e13ff917 	ldw	r4,-28(fp)
10011a84:	001034c0 	call	1001034c <alt_release_fd>
    ALT_ERRNO = -status;
10011a88:	00118180 	call	10011818 <alt_get_errno>
10011a8c:	1007883a 	mov	r3,r2
10011a90:	e0bffa17 	ldw	r2,-24(fp)
10011a94:	0085c83a 	sub	r2,zero,r2
10011a98:	18800015 	stw	r2,0(r3)
    return -1;
10011a9c:	00bfffc4 	movi	r2,-1
10011aa0:	00000106 	br	10011aa8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10011aa4:	e0bff917 	ldw	r2,-28(fp)
}
10011aa8:	e037883a 	mov	sp,fp
10011aac:	dfc00117 	ldw	ra,4(sp)
10011ab0:	df000017 	ldw	fp,0(sp)
10011ab4:	dec00204 	addi	sp,sp,8
10011ab8:	f800283a 	ret

10011abc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011abc:	defffa04 	addi	sp,sp,-24
10011ac0:	df000515 	stw	fp,20(sp)
10011ac4:	df000504 	addi	fp,sp,20
10011ac8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011acc:	0005303a 	rdctl	r2,status
10011ad0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011ad4:	e0fffc17 	ldw	r3,-16(fp)
10011ad8:	00bfff84 	movi	r2,-2
10011adc:	1884703a 	and	r2,r3,r2
10011ae0:	1001703a 	wrctl	status,r2
  
  return context;
10011ae4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011ae8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011aec:	e0bfff17 	ldw	r2,-4(fp)
10011af0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011af4:	e0bffd17 	ldw	r2,-12(fp)
10011af8:	10800017 	ldw	r2,0(r2)
10011afc:	e0fffd17 	ldw	r3,-12(fp)
10011b00:	18c00117 	ldw	r3,4(r3)
10011b04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011b08:	e0bffd17 	ldw	r2,-12(fp)
10011b0c:	10800117 	ldw	r2,4(r2)
10011b10:	e0fffd17 	ldw	r3,-12(fp)
10011b14:	18c00017 	ldw	r3,0(r3)
10011b18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011b1c:	e0bffd17 	ldw	r2,-12(fp)
10011b20:	e0fffd17 	ldw	r3,-12(fp)
10011b24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011b28:	e0bffd17 	ldw	r2,-12(fp)
10011b2c:	e0fffd17 	ldw	r3,-12(fp)
10011b30:	10c00015 	stw	r3,0(r2)
10011b34:	e0bffb17 	ldw	r2,-20(fp)
10011b38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011b3c:	e0bffe17 	ldw	r2,-8(fp)
10011b40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011b44:	e037883a 	mov	sp,fp
10011b48:	df000017 	ldw	fp,0(sp)
10011b4c:	dec00104 	addi	sp,sp,4
10011b50:	f800283a 	ret

10011b54 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011b54:	defffb04 	addi	sp,sp,-20
10011b58:	dfc00415 	stw	ra,16(sp)
10011b5c:	df000315 	stw	fp,12(sp)
10011b60:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011b64:	d0a00f17 	ldw	r2,-32708(gp)
10011b68:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011b6c:	d0a6e017 	ldw	r2,-25728(gp)
10011b70:	10800044 	addi	r2,r2,1
10011b74:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011b78:	00002e06 	br	10011c34 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011b7c:	e0bffd17 	ldw	r2,-12(fp)
10011b80:	10800017 	ldw	r2,0(r2)
10011b84:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011b88:	e0bffd17 	ldw	r2,-12(fp)
10011b8c:	10800403 	ldbu	r2,16(r2)
10011b90:	10803fcc 	andi	r2,r2,255
10011b94:	10000426 	beq	r2,zero,10011ba8 <alt_tick+0x54>
10011b98:	d0a6e017 	ldw	r2,-25728(gp)
10011b9c:	1000021e 	bne	r2,zero,10011ba8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011ba0:	e0bffd17 	ldw	r2,-12(fp)
10011ba4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011ba8:	e0bffd17 	ldw	r2,-12(fp)
10011bac:	10800217 	ldw	r2,8(r2)
10011bb0:	d0e6e017 	ldw	r3,-25728(gp)
10011bb4:	18801d36 	bltu	r3,r2,10011c2c <alt_tick+0xd8>
10011bb8:	e0bffd17 	ldw	r2,-12(fp)
10011bbc:	10800403 	ldbu	r2,16(r2)
10011bc0:	10803fcc 	andi	r2,r2,255
10011bc4:	1000191e 	bne	r2,zero,10011c2c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011bc8:	e0bffd17 	ldw	r2,-12(fp)
10011bcc:	10800317 	ldw	r2,12(r2)
10011bd0:	e0fffd17 	ldw	r3,-12(fp)
10011bd4:	18c00517 	ldw	r3,20(r3)
10011bd8:	1809883a 	mov	r4,r3
10011bdc:	103ee83a 	callr	r2
10011be0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011be4:	e0bfff17 	ldw	r2,-4(fp)
10011be8:	1000031e 	bne	r2,zero,10011bf8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011bec:	e13ffd17 	ldw	r4,-12(fp)
10011bf0:	0011abc0 	call	10011abc <alt_alarm_stop>
10011bf4:	00000d06 	br	10011c2c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011bf8:	e0bffd17 	ldw	r2,-12(fp)
10011bfc:	10c00217 	ldw	r3,8(r2)
10011c00:	e0bfff17 	ldw	r2,-4(fp)
10011c04:	1887883a 	add	r3,r3,r2
10011c08:	e0bffd17 	ldw	r2,-12(fp)
10011c0c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011c10:	e0bffd17 	ldw	r2,-12(fp)
10011c14:	10c00217 	ldw	r3,8(r2)
10011c18:	d0a6e017 	ldw	r2,-25728(gp)
10011c1c:	1880032e 	bgeu	r3,r2,10011c2c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011c20:	e0bffd17 	ldw	r2,-12(fp)
10011c24:	00c00044 	movi	r3,1
10011c28:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011c2c:	e0bffe17 	ldw	r2,-8(fp)
10011c30:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011c34:	e0fffd17 	ldw	r3,-12(fp)
10011c38:	d0a00f04 	addi	r2,gp,-32708
10011c3c:	18bfcf1e 	bne	r3,r2,10011b7c <__alt_data_end+0xf8011b7c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011c40:	0001883a 	nop
}
10011c44:	e037883a 	mov	sp,fp
10011c48:	dfc00117 	ldw	ra,4(sp)
10011c4c:	df000017 	ldw	fp,0(sp)
10011c50:	dec00204 	addi	sp,sp,8
10011c54:	f800283a 	ret

10011c58 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011c58:	deffff04 	addi	sp,sp,-4
10011c5c:	df000015 	stw	fp,0(sp)
10011c60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011c64:	000170fa 	wrctl	ienable,zero
}
10011c68:	e037883a 	mov	sp,fp
10011c6c:	df000017 	ldw	fp,0(sp)
10011c70:	dec00104 	addi	sp,sp,4
10011c74:	f800283a 	ret

10011c78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011c78:	defffa04 	addi	sp,sp,-24
10011c7c:	dfc00515 	stw	ra,20(sp)
10011c80:	df000415 	stw	fp,16(sp)
10011c84:	df000404 	addi	fp,sp,16
10011c88:	e13ffe15 	stw	r4,-8(fp)
10011c8c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011c90:	e0bfff17 	ldw	r2,-4(fp)
10011c94:	10800017 	ldw	r2,0(r2)
10011c98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011c9c:	e13ffe17 	ldw	r4,-8(fp)
10011ca0:	000d0f80 	call	1000d0f8 <strlen>
10011ca4:	10800044 	addi	r2,r2,1
10011ca8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011cac:	00000d06 	br	10011ce4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011cb0:	e0bffc17 	ldw	r2,-16(fp)
10011cb4:	10c00217 	ldw	r3,8(r2)
10011cb8:	e0bffd17 	ldw	r2,-12(fp)
10011cbc:	1809883a 	mov	r4,r3
10011cc0:	e17ffe17 	ldw	r5,-8(fp)
10011cc4:	100d883a 	mov	r6,r2
10011cc8:	0011fd80 	call	10011fd8 <memcmp>
10011ccc:	1000021e 	bne	r2,zero,10011cd8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011cd0:	e0bffc17 	ldw	r2,-16(fp)
10011cd4:	00000706 	br	10011cf4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011cd8:	e0bffc17 	ldw	r2,-16(fp)
10011cdc:	10800017 	ldw	r2,0(r2)
10011ce0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011ce4:	e0fffc17 	ldw	r3,-16(fp)
10011ce8:	e0bfff17 	ldw	r2,-4(fp)
10011cec:	18bff01e 	bne	r3,r2,10011cb0 <__alt_data_end+0xf8011cb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011cf0:	0005883a 	mov	r2,zero
}
10011cf4:	e037883a 	mov	sp,fp
10011cf8:	dfc00117 	ldw	ra,4(sp)
10011cfc:	df000017 	ldw	fp,0(sp)
10011d00:	dec00204 	addi	sp,sp,8
10011d04:	f800283a 	ret

10011d08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011d08:	defffb04 	addi	sp,sp,-20
10011d0c:	dfc00415 	stw	ra,16(sp)
10011d10:	df000315 	stw	fp,12(sp)
10011d14:	df000304 	addi	fp,sp,12
10011d18:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011d1c:	00840074 	movhi	r2,4097
10011d20:	10906804 	addi	r2,r2,16800
10011d24:	10800017 	ldw	r2,0(r2)
10011d28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011d2c:	00003106 	br	10011df4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10011d30:	e0bffd17 	ldw	r2,-12(fp)
10011d34:	10800217 	ldw	r2,8(r2)
10011d38:	1009883a 	mov	r4,r2
10011d3c:	000d0f80 	call	1000d0f8 <strlen>
10011d40:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011d44:	e0bffd17 	ldw	r2,-12(fp)
10011d48:	10c00217 	ldw	r3,8(r2)
10011d4c:	e0bffe17 	ldw	r2,-8(fp)
10011d50:	10bfffc4 	addi	r2,r2,-1
10011d54:	1885883a 	add	r2,r3,r2
10011d58:	10800003 	ldbu	r2,0(r2)
10011d5c:	10803fcc 	andi	r2,r2,255
10011d60:	1080201c 	xori	r2,r2,128
10011d64:	10bfe004 	addi	r2,r2,-128
10011d68:	10800bd8 	cmpnei	r2,r2,47
10011d6c:	1000031e 	bne	r2,zero,10011d7c <alt_find_file+0x74>
    {
      len -= 1;
10011d70:	e0bffe17 	ldw	r2,-8(fp)
10011d74:	10bfffc4 	addi	r2,r2,-1
10011d78:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011d7c:	e0bffe17 	ldw	r2,-8(fp)
10011d80:	e0ffff17 	ldw	r3,-4(fp)
10011d84:	1885883a 	add	r2,r3,r2
10011d88:	10800003 	ldbu	r2,0(r2)
10011d8c:	10803fcc 	andi	r2,r2,255
10011d90:	1080201c 	xori	r2,r2,128
10011d94:	10bfe004 	addi	r2,r2,-128
10011d98:	10800be0 	cmpeqi	r2,r2,47
10011d9c:	1000081e 	bne	r2,zero,10011dc0 <alt_find_file+0xb8>
10011da0:	e0bffe17 	ldw	r2,-8(fp)
10011da4:	e0ffff17 	ldw	r3,-4(fp)
10011da8:	1885883a 	add	r2,r3,r2
10011dac:	10800003 	ldbu	r2,0(r2)
10011db0:	10803fcc 	andi	r2,r2,255
10011db4:	1080201c 	xori	r2,r2,128
10011db8:	10bfe004 	addi	r2,r2,-128
10011dbc:	10000a1e 	bne	r2,zero,10011de8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011dc0:	e0bffd17 	ldw	r2,-12(fp)
10011dc4:	10c00217 	ldw	r3,8(r2)
10011dc8:	e0bffe17 	ldw	r2,-8(fp)
10011dcc:	1809883a 	mov	r4,r3
10011dd0:	e17fff17 	ldw	r5,-4(fp)
10011dd4:	100d883a 	mov	r6,r2
10011dd8:	0011fd80 	call	10011fd8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011ddc:	1000021e 	bne	r2,zero,10011de8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011de0:	e0bffd17 	ldw	r2,-12(fp)
10011de4:	00000806 	br	10011e08 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10011de8:	e0bffd17 	ldw	r2,-12(fp)
10011dec:	10800017 	ldw	r2,0(r2)
10011df0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011df4:	e0fffd17 	ldw	r3,-12(fp)
10011df8:	00840074 	movhi	r2,4097
10011dfc:	10906804 	addi	r2,r2,16800
10011e00:	18bfcb1e 	bne	r3,r2,10011d30 <__alt_data_end+0xf8011d30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011e04:	0005883a 	mov	r2,zero
}
10011e08:	e037883a 	mov	sp,fp
10011e0c:	dfc00117 	ldw	ra,4(sp)
10011e10:	df000017 	ldw	fp,0(sp)
10011e14:	dec00204 	addi	sp,sp,8
10011e18:	f800283a 	ret

10011e1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011e1c:	defffa04 	addi	sp,sp,-24
10011e20:	dfc00515 	stw	ra,20(sp)
10011e24:	df000415 	stw	fp,16(sp)
10011e28:	dc000315 	stw	r16,12(sp)
10011e2c:	df000404 	addi	fp,sp,16
10011e30:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011e34:	00bffa04 	movi	r2,-24
10011e38:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011e3c:	e03ffc15 	stw	zero,-16(fp)
10011e40:	00002106 	br	10011ec8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10011e44:	04040074 	movhi	r16,4097
10011e48:	840be904 	addi	r16,r16,12196
10011e4c:	e0bffc17 	ldw	r2,-16(fp)
10011e50:	1009883a 	mov	r4,r2
10011e54:	01400304 	movi	r5,12
10011e58:	00040b00 	call	100040b0 <__mulsi3>
10011e5c:	8085883a 	add	r2,r16,r2
10011e60:	10800017 	ldw	r2,0(r2)
10011e64:	1000151e 	bne	r2,zero,10011ebc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10011e68:	04040074 	movhi	r16,4097
10011e6c:	840be904 	addi	r16,r16,12196
10011e70:	e0bffc17 	ldw	r2,-16(fp)
10011e74:	1009883a 	mov	r4,r2
10011e78:	01400304 	movi	r5,12
10011e7c:	00040b00 	call	100040b0 <__mulsi3>
10011e80:	8085883a 	add	r2,r16,r2
10011e84:	e0fffe17 	ldw	r3,-8(fp)
10011e88:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011e8c:	00840074 	movhi	r2,4097
10011e90:	10906c04 	addi	r2,r2,16816
10011e94:	10c00017 	ldw	r3,0(r2)
10011e98:	e0bffc17 	ldw	r2,-16(fp)
10011e9c:	1880040e 	bge	r3,r2,10011eb0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10011ea0:	00840074 	movhi	r2,4097
10011ea4:	10906c04 	addi	r2,r2,16816
10011ea8:	e0fffc17 	ldw	r3,-16(fp)
10011eac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10011eb0:	e0bffc17 	ldw	r2,-16(fp)
10011eb4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011eb8:	00000606 	br	10011ed4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011ebc:	e0bffc17 	ldw	r2,-16(fp)
10011ec0:	10800044 	addi	r2,r2,1
10011ec4:	e0bffc15 	stw	r2,-16(fp)
10011ec8:	e0bffc17 	ldw	r2,-16(fp)
10011ecc:	10800810 	cmplti	r2,r2,32
10011ed0:	103fdc1e 	bne	r2,zero,10011e44 <__alt_data_end+0xf8011e44>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011ed4:	e0bffd17 	ldw	r2,-12(fp)
}
10011ed8:	e6ffff04 	addi	sp,fp,-4
10011edc:	dfc00217 	ldw	ra,8(sp)
10011ee0:	df000117 	ldw	fp,4(sp)
10011ee4:	dc000017 	ldw	r16,0(sp)
10011ee8:	dec00304 	addi	sp,sp,12
10011eec:	f800283a 	ret

10011ef0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011ef0:	defffe04 	addi	sp,sp,-8
10011ef4:	df000115 	stw	fp,4(sp)
10011ef8:	df000104 	addi	fp,sp,4
10011efc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011f00:	e0bfff17 	ldw	r2,-4(fp)
10011f04:	10bffe84 	addi	r2,r2,-6
10011f08:	10c00428 	cmpgeui	r3,r2,16
10011f0c:	18001a1e 	bne	r3,zero,10011f78 <alt_exception_cause_generated_bad_addr+0x88>
10011f10:	100690ba 	slli	r3,r2,2
10011f14:	00840074 	movhi	r2,4097
10011f18:	1087ca04 	addi	r2,r2,7976
10011f1c:	1885883a 	add	r2,r3,r2
10011f20:	10800017 	ldw	r2,0(r2)
10011f24:	1000683a 	jmp	r2
10011f28:	10011f68 	cmpgeui	zero,r2,1149
10011f2c:	10011f68 	cmpgeui	zero,r2,1149
10011f30:	10011f78 	rdprs	zero,r2,1149
10011f34:	10011f78 	rdprs	zero,r2,1149
10011f38:	10011f78 	rdprs	zero,r2,1149
10011f3c:	10011f68 	cmpgeui	zero,r2,1149
10011f40:	10011f70 	cmpltui	zero,r2,1149
10011f44:	10011f78 	rdprs	zero,r2,1149
10011f48:	10011f68 	cmpgeui	zero,r2,1149
10011f4c:	10011f68 	cmpgeui	zero,r2,1149
10011f50:	10011f78 	rdprs	zero,r2,1149
10011f54:	10011f68 	cmpgeui	zero,r2,1149
10011f58:	10011f70 	cmpltui	zero,r2,1149
10011f5c:	10011f78 	rdprs	zero,r2,1149
10011f60:	10011f78 	rdprs	zero,r2,1149
10011f64:	10011f68 	cmpgeui	zero,r2,1149
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011f68:	00800044 	movi	r2,1
10011f6c:	00000306 	br	10011f7c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011f70:	0005883a 	mov	r2,zero
10011f74:	00000106 	br	10011f7c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011f78:	0005883a 	mov	r2,zero
  }
}
10011f7c:	e037883a 	mov	sp,fp
10011f80:	df000017 	ldw	fp,0(sp)
10011f84:	dec00104 	addi	sp,sp,4
10011f88:	f800283a 	ret

10011f8c <atexit>:
10011f8c:	200b883a 	mov	r5,r4
10011f90:	000d883a 	mov	r6,zero
10011f94:	0009883a 	mov	r4,zero
10011f98:	000f883a 	mov	r7,zero
10011f9c:	00120541 	jmpi	10012054 <__register_exitproc>

10011fa0 <exit>:
10011fa0:	defffe04 	addi	sp,sp,-8
10011fa4:	000b883a 	mov	r5,zero
10011fa8:	dc000015 	stw	r16,0(sp)
10011fac:	dfc00115 	stw	ra,4(sp)
10011fb0:	2021883a 	mov	r16,r4
10011fb4:	00121680 	call	10012168 <__call_exitprocs>
10011fb8:	00840074 	movhi	r2,4097
10011fbc:	10906204 	addi	r2,r2,16776
10011fc0:	11000017 	ldw	r4,0(r2)
10011fc4:	20800f17 	ldw	r2,60(r4)
10011fc8:	10000126 	beq	r2,zero,10011fd0 <exit+0x30>
10011fcc:	103ee83a 	callr	r2
10011fd0:	8009883a 	mov	r4,r16
10011fd4:	00122fc0 	call	100122fc <_exit>

10011fd8 <memcmp>:
10011fd8:	01c000c4 	movi	r7,3
10011fdc:	3980192e 	bgeu	r7,r6,10012044 <memcmp+0x6c>
10011fe0:	2144b03a 	or	r2,r4,r5
10011fe4:	11c4703a 	and	r2,r2,r7
10011fe8:	10000f26 	beq	r2,zero,10012028 <memcmp+0x50>
10011fec:	20800003 	ldbu	r2,0(r4)
10011ff0:	28c00003 	ldbu	r3,0(r5)
10011ff4:	10c0151e 	bne	r2,r3,1001204c <memcmp+0x74>
10011ff8:	31bfff84 	addi	r6,r6,-2
10011ffc:	01ffffc4 	movi	r7,-1
10012000:	00000406 	br	10012014 <memcmp+0x3c>
10012004:	20800003 	ldbu	r2,0(r4)
10012008:	28c00003 	ldbu	r3,0(r5)
1001200c:	31bfffc4 	addi	r6,r6,-1
10012010:	10c00e1e 	bne	r2,r3,1001204c <memcmp+0x74>
10012014:	21000044 	addi	r4,r4,1
10012018:	29400044 	addi	r5,r5,1
1001201c:	31fff91e 	bne	r6,r7,10012004 <__alt_data_end+0xf8012004>
10012020:	0005883a 	mov	r2,zero
10012024:	f800283a 	ret
10012028:	20c00017 	ldw	r3,0(r4)
1001202c:	28800017 	ldw	r2,0(r5)
10012030:	1880041e 	bne	r3,r2,10012044 <memcmp+0x6c>
10012034:	31bfff04 	addi	r6,r6,-4
10012038:	21000104 	addi	r4,r4,4
1001203c:	29400104 	addi	r5,r5,4
10012040:	39bff936 	bltu	r7,r6,10012028 <__alt_data_end+0xf8012028>
10012044:	303fe91e 	bne	r6,zero,10011fec <__alt_data_end+0xf8011fec>
10012048:	003ff506 	br	10012020 <__alt_data_end+0xf8012020>
1001204c:	10c5c83a 	sub	r2,r2,r3
10012050:	f800283a 	ret

10012054 <__register_exitproc>:
10012054:	00840074 	movhi	r2,4097
10012058:	defffa04 	addi	sp,sp,-24
1001205c:	10906204 	addi	r2,r2,16776
10012060:	dc000315 	stw	r16,12(sp)
10012064:	14000017 	ldw	r16,0(r2)
10012068:	dc400415 	stw	r17,16(sp)
1001206c:	dfc00515 	stw	ra,20(sp)
10012070:	80805217 	ldw	r2,328(r16)
10012074:	2023883a 	mov	r17,r4
10012078:	10003626 	beq	r2,zero,10012154 <__register_exitproc+0x100>
1001207c:	10c00117 	ldw	r3,4(r2)
10012080:	010007c4 	movi	r4,31
10012084:	20c00e16 	blt	r4,r3,100120c0 <__register_exitproc+0x6c>
10012088:	1a400044 	addi	r9,r3,1
1001208c:	8800211e 	bne	r17,zero,10012114 <__register_exitproc+0xc0>
10012090:	18c00084 	addi	r3,r3,2
10012094:	18c7883a 	add	r3,r3,r3
10012098:	18c7883a 	add	r3,r3,r3
1001209c:	12400115 	stw	r9,4(r2)
100120a0:	10c7883a 	add	r3,r2,r3
100120a4:	19400015 	stw	r5,0(r3)
100120a8:	0005883a 	mov	r2,zero
100120ac:	dfc00517 	ldw	ra,20(sp)
100120b0:	dc400417 	ldw	r17,16(sp)
100120b4:	dc000317 	ldw	r16,12(sp)
100120b8:	dec00604 	addi	sp,sp,24
100120bc:	f800283a 	ret
100120c0:	00800034 	movhi	r2,0
100120c4:	10800004 	addi	r2,r2,0
100120c8:	10002526 	beq	r2,zero,10012160 <__register_exitproc+0x10c>
100120cc:	01006404 	movi	r4,400
100120d0:	d9400015 	stw	r5,0(sp)
100120d4:	d9800115 	stw	r6,4(sp)
100120d8:	d9c00215 	stw	r7,8(sp)
100120dc:	00000000 	call	10000000 <__reset>
100120e0:	d9400017 	ldw	r5,0(sp)
100120e4:	d9800117 	ldw	r6,4(sp)
100120e8:	d9c00217 	ldw	r7,8(sp)
100120ec:	10001c26 	beq	r2,zero,10012160 <__register_exitproc+0x10c>
100120f0:	80c05217 	ldw	r3,328(r16)
100120f4:	10000115 	stw	zero,4(r2)
100120f8:	02400044 	movi	r9,1
100120fc:	10c00015 	stw	r3,0(r2)
10012100:	80805215 	stw	r2,328(r16)
10012104:	10006215 	stw	zero,392(r2)
10012108:	10006315 	stw	zero,396(r2)
1001210c:	0007883a 	mov	r3,zero
10012110:	883fdf26 	beq	r17,zero,10012090 <__alt_data_end+0xf8012090>
10012114:	18d1883a 	add	r8,r3,r3
10012118:	4211883a 	add	r8,r8,r8
1001211c:	1211883a 	add	r8,r2,r8
10012120:	41802215 	stw	r6,136(r8)
10012124:	01000044 	movi	r4,1
10012128:	11806217 	ldw	r6,392(r2)
1001212c:	20c8983a 	sll	r4,r4,r3
10012130:	310cb03a 	or	r6,r6,r4
10012134:	11806215 	stw	r6,392(r2)
10012138:	41c04215 	stw	r7,264(r8)
1001213c:	01800084 	movi	r6,2
10012140:	89bfd31e 	bne	r17,r6,10012090 <__alt_data_end+0xf8012090>
10012144:	11806317 	ldw	r6,396(r2)
10012148:	3108b03a 	or	r4,r6,r4
1001214c:	11006315 	stw	r4,396(r2)
10012150:	003fcf06 	br	10012090 <__alt_data_end+0xf8012090>
10012154:	80805304 	addi	r2,r16,332
10012158:	80805215 	stw	r2,328(r16)
1001215c:	003fc706 	br	1001207c <__alt_data_end+0xf801207c>
10012160:	00bfffc4 	movi	r2,-1
10012164:	003fd106 	br	100120ac <__alt_data_end+0xf80120ac>

10012168 <__call_exitprocs>:
10012168:	00840074 	movhi	r2,4097
1001216c:	10906204 	addi	r2,r2,16776
10012170:	10800017 	ldw	r2,0(r2)
10012174:	defff404 	addi	sp,sp,-48
10012178:	dd800815 	stw	r22,32(sp)
1001217c:	d8800015 	stw	r2,0(sp)
10012180:	10805204 	addi	r2,r2,328
10012184:	dd000615 	stw	r20,24(sp)
10012188:	dc800415 	stw	r18,16(sp)
1001218c:	dfc00b15 	stw	ra,44(sp)
10012190:	df000a15 	stw	fp,40(sp)
10012194:	ddc00915 	stw	r23,36(sp)
10012198:	dd400715 	stw	r21,28(sp)
1001219c:	dcc00515 	stw	r19,20(sp)
100121a0:	dc400315 	stw	r17,12(sp)
100121a4:	dc000215 	stw	r16,8(sp)
100121a8:	2025883a 	mov	r18,r4
100121ac:	2829883a 	mov	r20,r5
100121b0:	d8800115 	stw	r2,4(sp)
100121b4:	05bfffc4 	movi	r22,-1
100121b8:	d8800017 	ldw	r2,0(sp)
100121bc:	14c05217 	ldw	r19,328(r2)
100121c0:	98001d26 	beq	r19,zero,10012238 <__call_exitprocs+0xd0>
100121c4:	dd400117 	ldw	r21,4(sp)
100121c8:	98800117 	ldw	r2,4(r19)
100121cc:	173fffc4 	addi	fp,r2,-1
100121d0:	e0000d16 	blt	fp,zero,10012208 <__call_exitprocs+0xa0>
100121d4:	14000044 	addi	r16,r2,1
100121d8:	8421883a 	add	r16,r16,r16
100121dc:	8421883a 	add	r16,r16,r16
100121e0:	84402004 	addi	r17,r16,128
100121e4:	9c63883a 	add	r17,r19,r17
100121e8:	9c21883a 	add	r16,r19,r16
100121ec:	a0001e26 	beq	r20,zero,10012268 <__call_exitprocs+0x100>
100121f0:	80804017 	ldw	r2,256(r16)
100121f4:	15001c26 	beq	r2,r20,10012268 <__call_exitprocs+0x100>
100121f8:	e73fffc4 	addi	fp,fp,-1
100121fc:	843fff04 	addi	r16,r16,-4
10012200:	8c7fff04 	addi	r17,r17,-4
10012204:	e5bff91e 	bne	fp,r22,100121ec <__alt_data_end+0xf80121ec>
10012208:	00800034 	movhi	r2,0
1001220c:	10800004 	addi	r2,r2,0
10012210:	10000926 	beq	r2,zero,10012238 <__call_exitprocs+0xd0>
10012214:	98800117 	ldw	r2,4(r19)
10012218:	1000311e 	bne	r2,zero,100122e0 <__call_exitprocs+0x178>
1001221c:	98800017 	ldw	r2,0(r19)
10012220:	10003426 	beq	r2,zero,100122f4 <__call_exitprocs+0x18c>
10012224:	9809883a 	mov	r4,r19
10012228:	a8800015 	stw	r2,0(r21)
1001222c:	00000000 	call	10000000 <__reset>
10012230:	acc00017 	ldw	r19,0(r21)
10012234:	983fe41e 	bne	r19,zero,100121c8 <__alt_data_end+0xf80121c8>
10012238:	dfc00b17 	ldw	ra,44(sp)
1001223c:	df000a17 	ldw	fp,40(sp)
10012240:	ddc00917 	ldw	r23,36(sp)
10012244:	dd800817 	ldw	r22,32(sp)
10012248:	dd400717 	ldw	r21,28(sp)
1001224c:	dd000617 	ldw	r20,24(sp)
10012250:	dcc00517 	ldw	r19,20(sp)
10012254:	dc800417 	ldw	r18,16(sp)
10012258:	dc400317 	ldw	r17,12(sp)
1001225c:	dc000217 	ldw	r16,8(sp)
10012260:	dec00c04 	addi	sp,sp,48
10012264:	f800283a 	ret
10012268:	98800117 	ldw	r2,4(r19)
1001226c:	80c00017 	ldw	r3,0(r16)
10012270:	10bfffc4 	addi	r2,r2,-1
10012274:	17001526 	beq	r2,fp,100122cc <__call_exitprocs+0x164>
10012278:	80000015 	stw	zero,0(r16)
1001227c:	183fde26 	beq	r3,zero,100121f8 <__alt_data_end+0xf80121f8>
10012280:	00800044 	movi	r2,1
10012284:	1708983a 	sll	r4,r2,fp
10012288:	98806217 	ldw	r2,392(r19)
1001228c:	9dc00117 	ldw	r23,4(r19)
10012290:	2084703a 	and	r2,r4,r2
10012294:	1000061e 	bne	r2,zero,100122b0 <__call_exitprocs+0x148>
10012298:	183ee83a 	callr	r3
1001229c:	98800117 	ldw	r2,4(r19)
100122a0:	15ffc51e 	bne	r2,r23,100121b8 <__alt_data_end+0xf80121b8>
100122a4:	a8800017 	ldw	r2,0(r21)
100122a8:	14ffd326 	beq	r2,r19,100121f8 <__alt_data_end+0xf80121f8>
100122ac:	003fc206 	br	100121b8 <__alt_data_end+0xf80121b8>
100122b0:	98806317 	ldw	r2,396(r19)
100122b4:	2084703a 	and	r2,r4,r2
100122b8:	1000061e 	bne	r2,zero,100122d4 <__call_exitprocs+0x16c>
100122bc:	89400017 	ldw	r5,0(r17)
100122c0:	9009883a 	mov	r4,r18
100122c4:	183ee83a 	callr	r3
100122c8:	003ff406 	br	1001229c <__alt_data_end+0xf801229c>
100122cc:	9f000115 	stw	fp,4(r19)
100122d0:	003fea06 	br	1001227c <__alt_data_end+0xf801227c>
100122d4:	89000017 	ldw	r4,0(r17)
100122d8:	183ee83a 	callr	r3
100122dc:	003fef06 	br	1001229c <__alt_data_end+0xf801229c>
100122e0:	98800017 	ldw	r2,0(r19)
100122e4:	982b883a 	mov	r21,r19
100122e8:	1027883a 	mov	r19,r2
100122ec:	983fb61e 	bne	r19,zero,100121c8 <__alt_data_end+0xf80121c8>
100122f0:	003fd106 	br	10012238 <__alt_data_end+0xf8012238>
100122f4:	0005883a 	mov	r2,zero
100122f8:	003ffa06 	br	100122e4 <__alt_data_end+0xf80122e4>

100122fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100122fc:	defffd04 	addi	sp,sp,-12
10012300:	df000215 	stw	fp,8(sp)
10012304:	df000204 	addi	fp,sp,8
10012308:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001230c:	0001883a 	nop
10012310:	e0bfff17 	ldw	r2,-4(fp)
10012314:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012318:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001231c:	10000226 	beq	r2,zero,10012328 <_exit+0x2c>
    ALT_SIM_FAIL();
10012320:	002af070 	cmpltui	zero,zero,43969
10012324:	00000106 	br	1001232c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012328:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001232c:	003fff06 	br	1001232c <__alt_data_end+0xf801232c>
