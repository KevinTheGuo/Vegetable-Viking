
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011370 memsz 0x00011370 flags r-x
    LOAD off    0x00012390 vaddr 0x10011390 paddr 0x10012e7c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014968 vaddr 0x10014968 paddr 0x10014968 align 2**12
         filesz 0x00000000 memsz 0x0000039c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010da4  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c0  10010fd0  10010fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011390  10012e7c  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000039c  10014968  10014968  00014968  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013e7c  2**0
                  CONTENTS
  7 .sdram        00000000  10014d04  10014d04  00013e7c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013e7c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d10  00000000  00000000  00013ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000241dc  00000000  00000000  00014bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009117  00000000  00000000  00038d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b30e  00000000  00000000  00041ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002204  00000000  00000000  0004d1b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003846  00000000  00000000  0004f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00052bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00069aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013c0  00000000  00000000  00069ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006e2fe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006e301  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006e30d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006e30e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006e30f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006e313  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006e317  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006e31b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006e326  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006e331  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006e33c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006e347  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0006e361  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  000727a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10010fd0 l    d  .rodata	00000000 .rodata
10011390 l    d  .rwdata	00000000 .rwdata
10014968 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014d04 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100029e8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100111d6 l     O .rodata	00000010 zeroes.4181
100111e6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100062fc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007ea4 l     F .text	00000008 __fp_lock
10007eac l     F .text	00000008 __fp_unlock
10007ec0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011390 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100117d4 l     O .rwdata	00000020 lc_ctype_charset
100117b4 l     O .rwdata	00000020 lc_message_charset
100117f4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011218 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000b3f0 l     F .text	000000fc __sprint_r.part.0
1001134c l     O .rodata	00000010 blanks.4125
1001133c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e878 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000e9a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000e9cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ead4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ebd0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000ecb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ee98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012e6c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000f11c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f26c l     F .text	00000038 alt_dev_reg
10011ddc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f548 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000f74c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000fec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010360 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100104b8 l     F .text	00000050 alt_get_errno
10010508 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100149d8 g     O .bss	00000004 alt_instruction_exception_handler
10001c3c g     F .text	00000068 convertDecimalToBinary
1000aa30 g     F .text	00000074 _mprec_log10
1000ab1c g     F .text	0000008c __any_on
1000ce1c g     F .text	00000054 _isatty_r
10011224 g     O .rodata	00000028 __mprec_tinytens
1000ede0 g     F .text	00000078 alt_main
10003ecc g     F .text	000000b8 _puts_r
10014c04 g     O .bss	00000100 alt_irq
1000ce70 g     F .text	0000005c _lseek_r
10012e7c g       *ABS*	00000000 __flash_rwdata_start
1000dd24 g     F .text	00000084 .hidden __eqdf2
10014d04 g       *ABS*	00000000 __alt_heap_start
10003e90 g     F .text	0000003c printf
1000d098 g     F .text	0000009c _wcrtomb_r
10014968 g     O .bss	00000004 elapsedTime
1000b2e8 g     F .text	0000005c __sseek
10008208 g     F .text	00000010 __sinit
1000cf28 g     F .text	00000154 __swbuf_r
10008c80 g     F .text	0000007c _setlocale_r
10008060 g     F .text	00000078 __sfmoreglue
1000ee78 g     F .text	00000020 __malloc_unlock
10000e00 g     F .text	000003e4 spawningEngine
100098e0 g     F .text	0000015c memmove
100081f0 g     F .text	00000018 _cleanup
10009b60 g     F .text	000000a8 _Balloc
1000dda8 g     F .text	000000e0 .hidden __gtdf2
100108f8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
1001496c g     O .bss	00000004 lastPhysixed
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000cdc4 g     F .text	00000058 _fstat_r
100149bc g     O .bss	00000004 errno
1000b264 g     F .text	00000008 __seofread
100149c4 g     O .bss	00000004 alt_argv
1001ae3c g       *ABS*	00000000 _gp
10014970 g     O .bss	00000004 yCursor
10011c5c g     O .rwdata	00000180 alt_fd_list
10010918 g     F .text	00000090 alt_find_dev
100097a8 g     F .text	00000138 memcpy
100011e4 g     F .text	000003fc slicingEngine
10007eb4 g     F .text	0000000c _cleanup_r
10003d30 g     F .text	000000d0 .hidden __floatsidf
10010440 g     F .text	00000078 alt_io_redirect
1000de88 g     F .text	000000e0 .hidden __ltdf2
10014974 g     O .bss	00000004 xCursor
10010fd0 g       *ABS*	00000000 __DTOR_END__
10003f84 g     F .text	00000014 puts
10010b90 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000b148 g     F .text	00000074 __fpclassifyd
1000a98c g     F .text	000000a4 __ratio
1000c928 g     F .text	00000024 __vfiprintf_internal
1000f948 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10003e64 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002b04 g     F .text	00000008 .hidden __udivsi3
1000eb24 g     F .text	000000ac isatty
10011274 g     O .rodata	000000c8 __mprec_tens
10008cfc g     F .text	0000000c __locale_charset
100149b8 g     O .bss	00000004 __malloc_top_pad
10012e44 g     O .rwdata	00000004 __mb_cur_max
10008d2c g     F .text	0000000c _localeconv_r
10009f88 g     F .text	0000003c __i2b
1000866c g     F .text	000004a4 __sfvwrite_r
1000b1bc g     F .text	00000054 _sbrk_r
10014978 g     O .bss	00000004 cursorClicked
1000cecc g     F .text	0000005c _read_r
10012e64 g     O .rwdata	00000004 alt_max_fd
1000cad4 g     F .text	00000100 _fclose_r
10007e74 g     F .text	00000030 fflush
100149b4 g     O .bss	00000004 __malloc_max_sbrked_mem
10002b3c g     F .text	0000089c .hidden __adddf3
1000a734 g     F .text	0000011c __b2d
100023cc g     F .text	0000061c .hidden __umoddi3
1000ed04 g     F .text	000000dc lseek
10012e3c g     O .rwdata	00000004 _global_impure_ptr
1000aba8 g     F .text	000005a0 _realloc_r
10014d04 g       *ABS*	00000000 __bss_end
10010270 g     F .text	000000f0 alt_iic_isr_register
10014a04 g     O .bss	00000200 veggieObject
100107f4 g     F .text	00000104 alt_tick
1001497c g     O .bss	00000004 cursorStreak
10001d8c g     F .text	00000640 .hidden __udivdi3
1000cbe8 g     F .text	00000184 _fputwc_r
1001124c g     O .rodata	00000028 __mprec_bigtens
10009d6c g     F .text	00000104 __s2b
1000e7d4 g     F .text	000000a4 .hidden __floatunsidf
1000a4dc g     F .text	00000060 __mcmp
10014980 g     O .bss	00000004 lastSpawned
10008228 g     F .text	00000018 __fp_lock_all
10010224 g     F .text	0000004c alt_ic_irq_enabled
1001075c g     F .text	00000098 alt_alarm_stop
10000660 g     F .text	00000454 statusEngine
100149cc g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10011c34 g     O .rwdata	00000028 alt_dev_null
10001b24 g     F .text	00000118 port2Unpackager
1000feac g     F .text	0000001c alt_dcache_flush_all
10009e70 g     F .text	00000068 __hi0bits
10003ca8 g     F .text	00000088 .hidden __fixdfsi
10012e7c g       *ABS*	00000000 __ram_rwdata_end
10012e5c g     O .rwdata	00000008 alt_dev_list
1000f16c g     F .text	00000100 write
10011390 g       *ABS*	00000000 __ram_rodata_end
1000ea1c g     F .text	000000b8 fstat
1000de88 g     F .text	000000e0 .hidden __ledf2
10014984 g     O .bss	00000004 lastDisintegrated
1000a254 g     F .text	00000140 __pow5mult
1000b504 g     F .text	00001424 ___vfiprintf_internal_r
100149ac g     O .bss	00000004 __nlocale_changed
10002b0c g     F .text	00000008 .hidden __umodsi3
10014d04 g       *ABS*	00000000 end
10014988 g     O .bss	00000004 key1
1000f484 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10010fd0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10003e00 g     F .text	00000064 .hidden __clzsi2
1000fb54 g     F .text	00000218 altera_avalon_jtag_uart_write
10008218 g     F .text	00000004 __sfp_lock_acquire
100096c0 g     F .text	000000e8 memchr
100040ac g     F .text	000020fc ___vfprintf_internal_r
1000837c g     F .text	000002f0 _free_r
10008d08 g     F .text	00000010 __locale_mb_cur_max
10010e08 g     F .text	00000194 __call_exitprocs
100149a8 g     O .bss	00000004 __mlocale_changed
10012e48 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
100149d0 g     O .bss	00000004 _alt_tick_rate
10003fb0 g     F .text	00000064 rand
1000a394 g     F .text	00000148 __lshift
100149d4 g     O .bss	00000004 _alt_nticks
1000eee8 g     F .text	00000104 read
1000f2d8 g     F .text	00000048 alt_sys_init
10010cf4 g     F .text	00000114 __register_exitproc
10009fc4 g     F .text	00000290 __multiply
1000f7f4 g     F .text	00000068 altera_avalon_jtag_uart_close
10002b14 g     F .text	00000028 .hidden __mulsi3
10011390 g       *ABS*	00000000 __ram_rwdata_start
10010fd0 g       *ABS*	00000000 __ram_rodata_start
100149dc g     O .bss	00000028 __malloc_current_mallinfo
1000a850 g     F .text	0000013c __d2b
1000f320 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010abc g     F .text	000000d4 alt_get_fd
1000c9a8 g     F .text	00000054 _close_r
10010c78 g     F .text	0000007c memcmp
1000f3e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014d04 g       *ABS*	00000000 __alt_stack_base
1000f430 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100061cc g     F .text	00000130 __swsetup_r
1000d3a4 g     F .text	00000980 .hidden __divdf3
100080d8 g     F .text	00000118 __sfp
1000aaa4 g     F .text	00000078 __copybits
1001182c g     O .rwdata	00000408 __malloc_av_
10008224 g     F .text	00000004 __sinit_lock_release
1000df68 g     F .text	0000086c .hidden __muldf3
1000b210 g     F .text	00000054 __sread
100109a8 g     F .text	00000114 alt_find_file
1000ff18 g     F .text	000000a4 alt_dev_llist_insert
1000ee58 g     F .text	00000020 __malloc_lock
1000f06c g     F .text	000000b0 sbrk
10007c4c g     F .text	00000228 _fflush_r
1000c9fc g     F .text	000000d8 _calloc_r
10014968 g       *ABS*	00000000 __bss_start
10009a3c g     F .text	00000124 memset
10000268 g     F .text	000003f8 main
100149c8 g     O .bss	00000004 alt_envp
100149b0 g     O .bss	00000004 __malloc_max_total_mem
1000f380 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000d07c g     F .text	0000001c __swbuf
10003f98 g     F .text	00000018 srand
10001ca4 g     F .text	000000e8 convertBinaryToDecimal
1000b344 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000cbd4 g     F .text	00000014 fclose
10006524 g     F .text	00001728 _dtoa_r
10008f18 g     F .text	000007a8 _malloc_r
1000d20c g     F .text	00000030 __ascii_wctomb
10012e68 g     O .rwdata	00000004 alt_errno
10008b10 g     F .text	000000b8 _fwalk
10002a54 g     F .text	00000054 .hidden __divsi3
10008258 g     F .text	00000124 _malloc_trim_r
10010fd0 g       *ABS*	00000000 __CTOR_END__
1000b34c g     F .text	000000a4 strcmp
10010fd0 g       *ABS*	00000000 __flash_rodata_start
10010fd0 g       *ABS*	00000000 __DTOR_LIST__
1001498c g     O .bss	00000004 key3
1000dd24 g     F .text	00000084 .hidden __nedf2
1000f2a4 g     F .text	00000034 alt_irq_init
1000efec g     F .text	00000080 alt_release_fd
10011090 g     O .rodata	00000100 .hidden __clz_tab
100149a4 g     O .bss	00000004 _PathLocale
10010c2c g     F .text	00000014 atexit
10014990 g     O .bss	00000004 nextSpawnTime
10001a7c g     F .text	000000a8 messagePackager
1000c94c g     F .text	0000005c _write_r
10008d38 g     F .text	0000001c setlocale
10012e40 g     O .rwdata	00000004 _impure_ptr
100149c0 g     O .bss	00000004 alt_argc
10010018 g     F .text	0000005c _do_dtors
10008d24 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000a6d4 g     F .text	00000060 __ulp
10008240 g     F .text	00000018 __fp_unlock_all
10012e54 g     O .rwdata	00000008 alt_fs_list
100015e0 g     F .text	00000158 disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008d54 g     F .text	0000000c localeconv
10010090 g     F .text	00000050 alt_ic_isr_register
10012e7c g       *ABS*	00000000 _edata
10014d04 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000f85c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10014994 g     O .bss	00000004 key2
10010180 g     F .text	000000a4 alt_ic_irq_disable
10014998 g     O .bss	00000004 physixOn
1000b26c g     F .text	0000007c __swrite
10012e4c g     O .rwdata	00000004 __malloc_trim_threshold
10008d18 g     F .text	0000000c __locale_msgcharset
10010c40 g     F .text	00000038 exit
1001499c g     O .bss	00000004 roundStart
10008bc8 g     F .text	000000b8 _fwalk_reent
1000a53c g     F .text	00000198 __mdiff
10000ab4 g     F .text	0000034c physicsEngine
10002aa8 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000821c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10010f9c g     F .text	00000034 _exit
1000fd6c g     F .text	00000140 alt_alarm_start
1000d298 g     F .text	0000010c .hidden __muldi3
10008d60 g     F .text	000001b8 __smakebuf_r
10004014 g     F .text	00000098 strlen
100105fc g     F .text	00000160 open
1000dda8 g     F .text	000000e0 .hidden __gedf2
10012e50 g     O .rwdata	00000004 __wctomb
1000b4ec g     F .text	00000018 __sprint_r
10010074 g     F .text	0000001c alt_icache_flush_all
10001738 g     F .text	00000344 FPGAcommunicator
10012e70 g     O .rwdata	00000004 alt_priority_mask
100149a0 g     O .bss	00000004 comboFruit
100100e0 g     F .text	000000a0 alt_ic_irq_enable
100061a8 g     F .text	00000024 __vfprintf_internal
1000d23c g     F .text	0000005c _wctomb_r
100033d8 g     F .text	000008d0 .hidden __subdf3
10009ed8 g     F .text	000000b0 __lo0bits
10012e74 g     O .rwdata	00000008 alt_alarm_list
1000ffbc g     F .text	0000005c _do_ctors
1000d134 g     F .text	000000d8 wcrtomb
1000e8c8 g     F .text	000000d8 close
1000ec34 g     F .text	00000080 alt_load
1000cd6c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10008220 g     F .text	00000004 __sinit_lock_acquire
10009c30 g     F .text	0000013c __multadd
10009c08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10930104 	addi	r2,r2,19460
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10930104 	addi	r2,r2,19460
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e717 	ldw	r2,-25700(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e717 	ldw	r2,-25700(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6ab8f14 	ori	gp,gp,44604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10925a14 	ori	r2,r2,18792

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d34114 	ori	r3,r3,19716

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ec340 	call	1000ec34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000ede00 	call	1000ede0 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// can you even read

// our main function!!! this is where the magic happens
int main()
{
10000268:	defffb04 	addi	sp,sp,-20
1000026c:	dfc00415 	stw	ra,16(sp)
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
	// put in our seed
	srand(*to_sw_port0);
10000278:	00804c04 	movi	r2,304
1000027c:	10800017 	ldw	r2,0(r2)
10000280:	1009883a 	mov	r4,r2
10000284:	0003f980 	call	10003f98 <srand>

	// assign these to 0 at start
	comboFruit = 0;
10000288:	d026d915 	stw	zero,-25756(gp)
	physixOn = 0;
1000028c:	d026d715 	stw	zero,-25764(gp)

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000290:	e03ffd15 	stw	zero,-12(fp)
10000294:	00002e06 	br	10000350 <main+0xe8>
	{
		veggieObject[i].xPosition = 0;
10000298:	00840074 	movhi	r2,4097
1000029c:	10928104 	addi	r2,r2,18948
100002a0:	e0fffd17 	ldw	r3,-12(fp)
100002a4:	1806917a 	slli	r3,r3,5
100002a8:	10c5883a 	add	r2,r2,r3
100002ac:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002b0:	00840074 	movhi	r2,4097
100002b4:	10928104 	addi	r2,r2,18948
100002b8:	e0fffd17 	ldw	r3,-12(fp)
100002bc:	1806917a 	slli	r3,r3,5
100002c0:	10c5883a 	add	r2,r2,r3
100002c4:	10800104 	addi	r2,r2,4
100002c8:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
100002cc:	00840074 	movhi	r2,4097
100002d0:	10928104 	addi	r2,r2,18948
100002d4:	e0fffd17 	ldw	r3,-12(fp)
100002d8:	1806917a 	slli	r3,r3,5
100002dc:	10c5883a 	add	r2,r2,r3
100002e0:	10800204 	addi	r2,r2,8
100002e4:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
100002e8:	00840074 	movhi	r2,4097
100002ec:	10928104 	addi	r2,r2,18948
100002f0:	e0fffd17 	ldw	r3,-12(fp)
100002f4:	1806917a 	slli	r3,r3,5
100002f8:	10c5883a 	add	r2,r2,r3
100002fc:	10800304 	addi	r2,r2,12
10000300:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000304:	00840074 	movhi	r2,4097
10000308:	10928104 	addi	r2,r2,18948
1000030c:	e0fffd17 	ldw	r3,-12(fp)
10000310:	1806917a 	slli	r3,r3,5
10000314:	10c5883a 	add	r2,r2,r3
10000318:	10800404 	addi	r2,r2,16
1000031c:	10000015 	stw	zero,0(r2)
10000320:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
10000324:	00840074 	movhi	r2,4097
10000328:	10928104 	addi	r2,r2,18948
1000032c:	e0fffd17 	ldw	r3,-12(fp)
10000330:	1806917a 	slli	r3,r3,5
10000334:	10c5883a 	add	r2,r2,r3
10000338:	10800604 	addi	r2,r2,24
1000033c:	10000015 	stw	zero,0(r2)
10000340:	10000115 	stw	zero,4(r2)
	comboFruit = 0;
	physixOn = 0;

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
10000344:	e0bffd17 	ldw	r2,-12(fp)
10000348:	10800044 	addi	r2,r2,1
1000034c:	e0bffd15 	stw	r2,-12(fp)
10000350:	e0bffd17 	ldw	r2,-12(fp)
10000354:	10800410 	cmplti	r2,r2,16
10000358:	103fcf1e 	bne	r2,zero,10000298 <__alt_data_end+0xf8000298>
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}

	// TEST STUFF
	veggieObject[0].xPosition = 0;
1000035c:	00840074 	movhi	r2,4097
10000360:	10928104 	addi	r2,r2,18948
10000364:	10000015 	stw	zero,0(r2)
	veggieObject[0].yPosition = 0;
10000368:	00840074 	movhi	r2,4097
1000036c:	10928104 	addi	r2,r2,18948
10000370:	10000115 	stw	zero,4(r2)
	veggieObject[0].objectType = 0;
10000374:	00840074 	movhi	r2,4097
10000378:	10928104 	addi	r2,r2,18948
1000037c:	10000215 	stw	zero,8(r2)
	veggieObject[0].objectState = 0;
10000380:	00840074 	movhi	r2,4097
10000384:	10928104 	addi	r2,r2,18948
10000388:	10000315 	stw	zero,12(r2)

	// start out in the initial black menu
	// FIX THIS LATER
	cursorClicked = 1;
1000038c:	00800044 	movi	r2,1
10000390:	d0a6cf15 	stw	r2,-25796(gp)

	while(cursorClicked == 0)
10000394:	00000206 	br	100003a0 <main+0x138>
	{
		FPGAcommunicator();	// call this every time to update the FPGA
10000398:	00017380 	call	10001738 <FPGAcommunicator>
		port2Unpackager();	// just run our unpackager
1000039c:	0001b240 	call	10001b24 <port2Unpackager>

	// start out in the initial black menu
	// FIX THIS LATER
	cursorClicked = 1;

	while(cursorClicked == 0)
100003a0:	d0a6cf17 	ldw	r2,-25796(gp)
100003a4:	103ffc26 	beq	r2,zero,10000398 <__alt_data_end+0xf8000398>
		FPGAcommunicator();	// call this every time to update the FPGA
		port2Unpackager();	// just run our unpackager
	}

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
100003a8:	00804804 	movi	r2,288
100003ac:	10800017 	ldw	r2,0(r2)
100003b0:	e0bffe15 	stw	r2,-8(fp)
	unsigned long processorTime = processorStart;
100003b4:	e0bffe17 	ldw	r2,-8(fp)
100003b8:	e0bfff15 	stw	r2,-4(fp)
	lastPhysixed = processorTime;
100003bc:	e0bfff17 	ldw	r2,-4(fp)
100003c0:	d0a6cc15 	stw	r2,-25808(gp)
	lastSpawned = processorTime;
100003c4:	e0bfff17 	ldw	r2,-4(fp)
100003c8:	d0a6d115 	stw	r2,-25788(gp)
	nextSpawnTime = processorTime;
100003cc:	e0bfff17 	ldw	r2,-4(fp)
100003d0:	d0a6d515 	stw	r2,-25772(gp)
	lastDisintegrated = processorTime;
100003d4:	e0bfff17 	ldw	r2,-4(fp)
100003d8:	d0a6d215 	stw	r2,-25784(gp)
	roundStart = 0;
100003dc:	d026d815 	stw	zero,-25760(gp)
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100003e0:	00806004 	movi	r2,384
100003e4:	10800017 	ldw	r2,0(r2)
100003e8:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
100003ec:	00805c04 	movi	r2,368
100003f0:	10800017 	ldw	r2,0(r2)
100003f4:	d0a6cd15 	stw	r2,-25804(gp)
	port2Unpackager();
100003f8:	0001b240 	call	10001b24 <port2Unpackager>

	// initialize our 3 fruits on screen for menu
	veggieObject[1].xPosition = 30;
100003fc:	00840074 	movhi	r2,4097
10000400:	10928104 	addi	r2,r2,18948
10000404:	00c00784 	movi	r3,30
10000408:	10c00815 	stw	r3,32(r2)
	veggieObject[1].yPosition = 100;
1000040c:	00840074 	movhi	r2,4097
10000410:	10928104 	addi	r2,r2,18948
10000414:	00c01904 	movi	r3,100
10000418:	10c00915 	stw	r3,36(r2)
	veggieObject[1].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10928104 	addi	r2,r2,18948
10000424:	00c00044 	movi	r3,1
10000428:	10c00b15 	stw	r3,44(r2)
	veggieObject[1].xVelocity = 0;
1000042c:	00840074 	movhi	r2,4097
10000430:	10928104 	addi	r2,r2,18948
10000434:	10000c15 	stw	zero,48(r2)
10000438:	10000d15 	stw	zero,52(r2)
	veggieObject[1].yVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10928104 	addi	r2,r2,18948
10000444:	10000e15 	stw	zero,56(r2)
10000448:	10000f15 	stw	zero,60(r2)

	veggieObject[2].xPosition = 180;
1000044c:	00840074 	movhi	r2,4097
10000450:	10928104 	addi	r2,r2,18948
10000454:	00c02d04 	movi	r3,180
10000458:	10c01015 	stw	r3,64(r2)
	veggieObject[2].yPosition = 320;
1000045c:	00840074 	movhi	r2,4097
10000460:	10928104 	addi	r2,r2,18948
10000464:	00c05004 	movi	r3,320
10000468:	10c01115 	stw	r3,68(r2)
	veggieObject[2].objectState = 1;
1000046c:	00840074 	movhi	r2,4097
10000470:	10928104 	addi	r2,r2,18948
10000474:	00c00044 	movi	r3,1
10000478:	10c01315 	stw	r3,76(r2)
	veggieObject[2].xVelocity = 0;
1000047c:	00840074 	movhi	r2,4097
10000480:	10928104 	addi	r2,r2,18948
10000484:	10001415 	stw	zero,80(r2)
10000488:	10001515 	stw	zero,84(r2)
	veggieObject[2].yVelocity = 0;
1000048c:	00840074 	movhi	r2,4097
10000490:	10928104 	addi	r2,r2,18948
10000494:	10001615 	stw	zero,88(r2)
10000498:	10001715 	stw	zero,92(r2)

	veggieObject[3].xPosition = 540;
1000049c:	00840074 	movhi	r2,4097
100004a0:	10928104 	addi	r2,r2,18948
100004a4:	00c08704 	movi	r3,540
100004a8:	10c01815 	stw	r3,96(r2)
	veggieObject[3].yPosition = 220;
100004ac:	00840074 	movhi	r2,4097
100004b0:	10928104 	addi	r2,r2,18948
100004b4:	00c03704 	movi	r3,220
100004b8:	10c01915 	stw	r3,100(r2)
	veggieObject[3].objectState = 1;
100004bc:	00840074 	movhi	r2,4097
100004c0:	10928104 	addi	r2,r2,18948
100004c4:	00c00044 	movi	r3,1
100004c8:	10c01b15 	stw	r3,108(r2)
	veggieObject[3].xVelocity = 0;
100004cc:	00840074 	movhi	r2,4097
100004d0:	10928104 	addi	r2,r2,18948
100004d4:	10001c15 	stw	zero,112(r2)
100004d8:	10001d15 	stw	zero,116(r2)
	veggieObject[3].yVelocity = 0;
100004dc:	00840074 	movhi	r2,4097
100004e0:	10928104 	addi	r2,r2,18948
100004e4:	10001e15 	stw	zero,120(r2)
100004e8:	10001f15 	stw	zero,124(r2)

	while(1)	// game while loop
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
100004ec:	00804804 	movi	r2,288
100004f0:	10800017 	ldw	r2,0(r2)
100004f4:	e0bfff15 	stw	r2,-4(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
100004f8:	e0ffff17 	ldw	r3,-4(fp)
100004fc:	e0bffe17 	ldw	r2,-8(fp)
10000500:	1885c83a 	sub	r2,r3,r2
10000504:	d0a6cb15 	stw	r2,-25812(gp)
//		printf("elapsed time is %lu \n", elapsedTime);

		statusEngine();	// keep track of our game state
10000508:	00006600 	call	10000660 <statusEngine>

		// constantly doing physics
		if (((elapsedTime - lastPhysixed) > 5) && (physixOn))
1000050c:	d0e6cb17 	ldw	r3,-25812(gp)
10000510:	d0a6cc17 	ldw	r2,-25808(gp)
10000514:	1885c83a 	sub	r2,r3,r2
10000518:	108001b0 	cmpltui	r2,r2,6
1000051c:	1000051e 	bne	r2,zero,10000534 <main+0x2cc>
10000520:	d0a6d717 	ldw	r2,-25764(gp)
10000524:	10000326 	beq	r2,zero,10000534 <main+0x2cc>
		{
			// greater than .05 seconds pass, and we're in a game playing state
			physicsEngine();	// call our physics engine!
10000528:	0000ab40 	call	10000ab4 <physicsEngine>
			lastPhysixed = elapsedTime;
1000052c:	d0a6cb17 	ldw	r2,-25812(gp)
10000530:	d0a6cc15 	stw	r2,-25808(gp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000534:	d0e6cb17 	ldw	r3,-25812(gp)
10000538:	d0a6d117 	ldw	r2,-25788(gp)
1000053c:	1885c83a 	sub	r2,r3,r2
10000540:	d0e6d517 	ldw	r3,-25772(gp)
10000544:	18803a2e 	bgeu	r3,r2,10000630 <main+0x3c8>
		{
			// determine next spawn time based on level
			if(veggieObject[0].objectState == 1)	// easy mode spawn
10000548:	00840074 	movhi	r2,4097
1000054c:	10928104 	addi	r2,r2,18948
10000550:	10800317 	ldw	r2,12(r2)
10000554:	10800058 	cmpnei	r2,r2,1
10000558:	10000d1e 	bne	r2,zero,10000590 <main+0x328>
			{
				spawningEngine(rand() % 5);
1000055c:	0003fb00 	call	10003fb0 <rand>
10000560:	1009883a 	mov	r4,r2
10000564:	01400144 	movi	r5,5
10000568:	0002aa80 	call	10002aa8 <__modsi3>
1000056c:	1009883a 	mov	r4,r2
10000570:	0000e000 	call	10000e00 <spawningEngine>
				nextSpawnTime = (rand() % 50) + 75;
10000574:	0003fb00 	call	10003fb0 <rand>
10000578:	1009883a 	mov	r4,r2
1000057c:	01400c84 	movi	r5,50
10000580:	0002aa80 	call	10002aa8 <__modsi3>
10000584:	108012c4 	addi	r2,r2,75
10000588:	d0a6d515 	stw	r2,-25772(gp)
1000058c:	00002606 	br	10000628 <main+0x3c0>
			}
			else if(veggieObject[0].objectState == 2)	// medium mode
10000590:	00840074 	movhi	r2,4097
10000594:	10928104 	addi	r2,r2,18948
10000598:	10800317 	ldw	r2,12(r2)
1000059c:	10800098 	cmpnei	r2,r2,2
100005a0:	10000d1e 	bne	r2,zero,100005d8 <main+0x370>
			{
				spawningEngine(rand() % 7);
100005a4:	0003fb00 	call	10003fb0 <rand>
100005a8:	1009883a 	mov	r4,r2
100005ac:	014001c4 	movi	r5,7
100005b0:	0002aa80 	call	10002aa8 <__modsi3>
100005b4:	1009883a 	mov	r4,r2
100005b8:	0000e000 	call	10000e00 <spawningEngine>
				nextSpawnTime = (rand() % 75) + 50;
100005bc:	0003fb00 	call	10003fb0 <rand>
100005c0:	1009883a 	mov	r4,r2
100005c4:	014012c4 	movi	r5,75
100005c8:	0002aa80 	call	10002aa8 <__modsi3>
100005cc:	10800c84 	addi	r2,r2,50
100005d0:	d0a6d515 	stw	r2,-25772(gp)
100005d4:	00001406 	br	10000628 <main+0x3c0>
			}
			else if(veggieObject[0].objectState == 3)	// easy mode spawn
100005d8:	00840074 	movhi	r2,4097
100005dc:	10928104 	addi	r2,r2,18948
100005e0:	10800317 	ldw	r2,12(r2)
100005e4:	108000d8 	cmpnei	r2,r2,3
100005e8:	10000d1e 	bne	r2,zero,10000620 <main+0x3b8>
			{
				spawningEngine(rand() % 9);
100005ec:	0003fb00 	call	10003fb0 <rand>
100005f0:	1009883a 	mov	r4,r2
100005f4:	01400244 	movi	r5,9
100005f8:	0002aa80 	call	10002aa8 <__modsi3>
100005fc:	1009883a 	mov	r4,r2
10000600:	0000e000 	call	10000e00 <spawningEngine>
				nextSpawnTime = (rand() % 100 + 25);		// hard mode
10000604:	0003fb00 	call	10003fb0 <rand>
10000608:	1009883a 	mov	r4,r2
1000060c:	01401904 	movi	r5,100
10000610:	0002aa80 	call	10002aa8 <__modsi3>
10000614:	10800644 	addi	r2,r2,25
10000618:	d0a6d515 	stw	r2,-25772(gp)
1000061c:	00000206 	br	10000628 <main+0x3c0>
			}
			else
			{
				nextSpawnTime = 200;	// we're in another state. check back soon!
10000620:	00803204 	movi	r2,200
10000624:	d0a6d515 	stw	r2,-25772(gp)
			}
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
			lastSpawned = elapsedTime;
10000628:	d0a6cb17 	ldw	r2,-25812(gp)
1000062c:	d0a6d115 	stw	r2,-25788(gp)
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .1 sec
10000630:	d0e6cb17 	ldw	r3,-25812(gp)
10000634:	d0a6d217 	ldw	r2,-25784(gp)
10000638:	1885c83a 	sub	r2,r3,r2
1000063c:	10800570 	cmpltui	r2,r2,21
10000640:	1000031e 	bne	r2,zero,10000650 <main+0x3e8>
		{
			disintegrateEngine();	// call our spawning engine!
10000644:	00015e00 	call	100015e0 <disintegrateEngine>
			lastDisintegrated = elapsedTime;
10000648:	d0a6cb17 	ldw	r2,-25812(gp)
1000064c:	d0a6d215 	stw	r2,-25784(gp)
		}
		slicingEngine();	// check if we need to slice anything
10000650:	00011e40 	call	100011e4 <slicingEngine>
		port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
10000654:	0001b240 	call	10001b24 <port2Unpackager>
		FPGAcommunicator();	// call this every time to update the FPGA
10000658:	00017380 	call	10001738 <FPGAcommunicator>
	}
1000065c:	003fa306 	br	100004ec <__alt_data_end+0xf80004ec>

10000660 <statusEngine>:
	return 0;
}

void statusEngine()
{
10000660:	defffc04 	addi	sp,sp,-16
10000664:	dfc00315 	stw	ra,12(sp)
10000668:	df000215 	stw	fp,8(sp)
1000066c:	df000204 	addi	fp,sp,8
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
10000670:	00840074 	movhi	r2,4097
10000674:	10928104 	addi	r2,r2,18948
10000678:	10800317 	ldw	r2,12(r2)
1000067c:	0080a10e 	bge	zero,r2,10000904 <statusEngine+0x2a4>
10000680:	00840074 	movhi	r2,4097
10000684:	10928104 	addi	r2,r2,18948
10000688:	10800317 	ldw	r2,12(r2)
1000068c:	10800108 	cmpgei	r2,r2,4
10000690:	10009c1e 	bne	r2,zero,10000904 <statusEngine+0x2a4>
	{
		// this means we're currently playing a round
		physixOn = 1;
10000694:	00800044 	movi	r2,1
10000698:	d0a6d715 	stw	r2,-25764(gp)
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
1000069c:	d0e6cb17 	ldw	r3,-25812(gp)
100006a0:	d0a6d817 	ldw	r2,-25760(gp)
100006a4:	1885c83a 	sub	r2,r3,r2
100006a8:	1009883a 	mov	r4,r2
100006ac:	01401904 	movi	r5,100
100006b0:	0002b040 	call	10002b04 <__udivsi3>
100006b4:	1007883a 	mov	r3,r2
100006b8:	00800f04 	movi	r2,60
100006bc:	10c5c83a 	sub	r2,r2,r3
100006c0:	1007883a 	mov	r3,r2
100006c4:	00840074 	movhi	r2,4097
100006c8:	10928104 	addi	r2,r2,18948
100006cc:	10c00115 	stw	r3,4(r2)
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
100006d0:	00840074 	movhi	r2,4097
100006d4:	10928104 	addi	r2,r2,18948
100006d8:	10800117 	ldw	r2,4(r2)
100006dc:	10003d1e 	bne	r2,zero,100007d4 <statusEngine+0x174>
		{
			physixOn = 0;
100006e0:	d026d715 	stw	zero,-25764(gp)
			veggieObject[0].objectState = 4;	// move to GAME WON state
100006e4:	00840074 	movhi	r2,4097
100006e8:	10928104 	addi	r2,r2,18948
100006ec:	00c00104 	movi	r3,4
100006f0:	10c00315 	stw	r3,12(r2)

			int i;
			for(i=1; i<16; i++)
100006f4:	00800044 	movi	r2,1
100006f8:	e0bffe15 	stw	r2,-8(fp)
100006fc:	00002e06 	br	100007b8 <statusEngine+0x158>
			{
				veggieObject[i].xPosition = 0;
10000700:	00840074 	movhi	r2,4097
10000704:	10928104 	addi	r2,r2,18948
10000708:	e0fffe17 	ldw	r3,-8(fp)
1000070c:	1806917a 	slli	r3,r3,5
10000710:	10c5883a 	add	r2,r2,r3
10000714:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000718:	00840074 	movhi	r2,4097
1000071c:	10928104 	addi	r2,r2,18948
10000720:	e0fffe17 	ldw	r3,-8(fp)
10000724:	1806917a 	slli	r3,r3,5
10000728:	10c5883a 	add	r2,r2,r3
1000072c:	10800104 	addi	r2,r2,4
10000730:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000734:	00840074 	movhi	r2,4097
10000738:	10928104 	addi	r2,r2,18948
1000073c:	e0fffe17 	ldw	r3,-8(fp)
10000740:	1806917a 	slli	r3,r3,5
10000744:	10c5883a 	add	r2,r2,r3
10000748:	10800204 	addi	r2,r2,8
1000074c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000750:	00840074 	movhi	r2,4097
10000754:	10928104 	addi	r2,r2,18948
10000758:	e0fffe17 	ldw	r3,-8(fp)
1000075c:	1806917a 	slli	r3,r3,5
10000760:	10c5883a 	add	r2,r2,r3
10000764:	10800304 	addi	r2,r2,12
10000768:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
1000076c:	00840074 	movhi	r2,4097
10000770:	10928104 	addi	r2,r2,18948
10000774:	e0fffe17 	ldw	r3,-8(fp)
10000778:	1806917a 	slli	r3,r3,5
1000077c:	10c5883a 	add	r2,r2,r3
10000780:	10800404 	addi	r2,r2,16
10000784:	10000015 	stw	zero,0(r2)
10000788:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
1000078c:	00840074 	movhi	r2,4097
10000790:	10928104 	addi	r2,r2,18948
10000794:	e0fffe17 	ldw	r3,-8(fp)
10000798:	1806917a 	slli	r3,r3,5
1000079c:	10c5883a 	add	r2,r2,r3
100007a0:	10800604 	addi	r2,r2,24
100007a4:	10000015 	stw	zero,0(r2)
100007a8:	10000115 	stw	zero,4(r2)
		{
			physixOn = 0;
			veggieObject[0].objectState = 4;	// move to GAME WON state

			int i;
			for(i=1; i<16; i++)
100007ac:	e0bffe17 	ldw	r2,-8(fp)
100007b0:	10800044 	addi	r2,r2,1
100007b4:	e0bffe15 	stw	r2,-8(fp)
100007b8:	e0bffe17 	ldw	r2,-8(fp)
100007bc:	10800410 	cmplti	r2,r2,16
100007c0:	103fcf1e 	bne	r2,zero,10000700 <__alt_data_end+0xf8000700>
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}

			printf("timed out\n");
100007c4:	01040074 	movhi	r4,4097
100007c8:	2103f404 	addi	r4,r4,4048
100007cc:	0003f840 	call	10003f84 <puts>
100007d0:	00004b06 	br	10000900 <statusEngine+0x2a0>
		}
		else if(((veggieObject[0].objectState == 2) || (veggieObject[0].objectState == 3)) && (veggieObject[0].objectType <= 0))
100007d4:	00840074 	movhi	r2,4097
100007d8:	10928104 	addi	r2,r2,18948
100007dc:	10800317 	ldw	r2,12(r2)
100007e0:	108000a0 	cmpeqi	r2,r2,2
100007e4:	1000051e 	bne	r2,zero,100007fc <statusEngine+0x19c>
100007e8:	00840074 	movhi	r2,4097
100007ec:	10928104 	addi	r2,r2,18948
100007f0:	10800317 	ldw	r2,12(r2)
100007f4:	108000d8 	cmpnei	r2,r2,3
100007f8:	1000411e 	bne	r2,zero,10000900 <statusEngine+0x2a0>
100007fc:	00840074 	movhi	r2,4097
10000800:	10928104 	addi	r2,r2,18948
10000804:	10800217 	ldw	r2,8(r2)
10000808:	00803d16 	blt	zero,r2,10000900 <statusEngine+0x2a0>
		{
			// this means we're game over :(
			physixOn = 0;
1000080c:	d026d715 	stw	zero,-25764(gp)
			veggieObject[0].objectState = 5;	// move to GAME OVER state
10000810:	00840074 	movhi	r2,4097
10000814:	10928104 	addi	r2,r2,18948
10000818:	00c00144 	movi	r3,5
1000081c:	10c00315 	stw	r3,12(r2)

			int i;
			for(i=1; i<16; i++)
10000820:	00800044 	movi	r2,1
10000824:	e0bfff15 	stw	r2,-4(fp)
10000828:	00002e06 	br	100008e4 <statusEngine+0x284>
			{
				veggieObject[i].xPosition = 0;
1000082c:	00840074 	movhi	r2,4097
10000830:	10928104 	addi	r2,r2,18948
10000834:	e0ffff17 	ldw	r3,-4(fp)
10000838:	1806917a 	slli	r3,r3,5
1000083c:	10c5883a 	add	r2,r2,r3
10000840:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000844:	00840074 	movhi	r2,4097
10000848:	10928104 	addi	r2,r2,18948
1000084c:	e0ffff17 	ldw	r3,-4(fp)
10000850:	1806917a 	slli	r3,r3,5
10000854:	10c5883a 	add	r2,r2,r3
10000858:	10800104 	addi	r2,r2,4
1000085c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000860:	00840074 	movhi	r2,4097
10000864:	10928104 	addi	r2,r2,18948
10000868:	e0ffff17 	ldw	r3,-4(fp)
1000086c:	1806917a 	slli	r3,r3,5
10000870:	10c5883a 	add	r2,r2,r3
10000874:	10800204 	addi	r2,r2,8
10000878:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
1000087c:	00840074 	movhi	r2,4097
10000880:	10928104 	addi	r2,r2,18948
10000884:	e0ffff17 	ldw	r3,-4(fp)
10000888:	1806917a 	slli	r3,r3,5
1000088c:	10c5883a 	add	r2,r2,r3
10000890:	10800304 	addi	r2,r2,12
10000894:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000898:	00840074 	movhi	r2,4097
1000089c:	10928104 	addi	r2,r2,18948
100008a0:	e0ffff17 	ldw	r3,-4(fp)
100008a4:	1806917a 	slli	r3,r3,5
100008a8:	10c5883a 	add	r2,r2,r3
100008ac:	10800404 	addi	r2,r2,16
100008b0:	10000015 	stw	zero,0(r2)
100008b4:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
100008b8:	00840074 	movhi	r2,4097
100008bc:	10928104 	addi	r2,r2,18948
100008c0:	e0ffff17 	ldw	r3,-4(fp)
100008c4:	1806917a 	slli	r3,r3,5
100008c8:	10c5883a 	add	r2,r2,r3
100008cc:	10800604 	addi	r2,r2,24
100008d0:	10000015 	stw	zero,0(r2)
100008d4:	10000115 	stw	zero,4(r2)
			// this means we're game over :(
			physixOn = 0;
			veggieObject[0].objectState = 5;	// move to GAME OVER state

			int i;
			for(i=1; i<16; i++)
100008d8:	e0bfff17 	ldw	r2,-4(fp)
100008dc:	10800044 	addi	r2,r2,1
100008e0:	e0bfff15 	stw	r2,-4(fp)
100008e4:	e0bfff17 	ldw	r2,-4(fp)
100008e8:	10800410 	cmplti	r2,r2,16
100008ec:	103fcf1e 	bne	r2,zero,1000082c <__alt_data_end+0xf800082c>
				veggieObject[i].objectState = 0;
				veggieObject[i].xVelocity = 0;
				veggieObject[i].yVelocity = 0;
			}

			printf("game over\n");
100008f0:	01040074 	movhi	r4,4097
100008f4:	2103f704 	addi	r4,r4,4060
100008f8:	0003f840 	call	10003f84 <puts>
	if((veggieObject[0].objectState > 0) && (veggieObject[0].objectState < 4))
	{
		// this means we're currently playing a round
		physixOn = 1;
		veggieObject[0].yPosition = 60 - ((elapsedTime - roundStart)/100);	// timer
		if(veggieObject[0].yPosition == 0)	// check if our timer ended
100008fc:	00006806 	br	10000aa0 <statusEngine+0x440>
10000900:	00006706 	br	10000aa0 <statusEngine+0x440>
			}

			printf("game over\n");
		}
	}
	else if(veggieObject[0].objectState == 0)	// check if we're in menu
10000904:	00840074 	movhi	r2,4097
10000908:	10928104 	addi	r2,r2,18948
1000090c:	10800317 	ldw	r2,12(r2)
10000910:	1000441e 	bne	r2,zero,10000a24 <statusEngine+0x3c4>
	{
		physixOn = 0;
10000914:	d026d715 	stw	zero,-25764(gp)
		veggieObject[0].xPosition = 0;
10000918:	00840074 	movhi	r2,4097
1000091c:	10928104 	addi	r2,r2,18948
10000920:	10000015 	stw	zero,0(r2)
		veggieObject[0].yPosition = 0;
10000924:	00840074 	movhi	r2,4097
10000928:	10928104 	addi	r2,r2,18948
1000092c:	10000115 	stw	zero,4(r2)

		// initialize our 3 fruits on screen for menu
		veggieObject[1].xPosition = 30;
10000930:	00840074 	movhi	r2,4097
10000934:	10928104 	addi	r2,r2,18948
10000938:	00c00784 	movi	r3,30
1000093c:	10c00815 	stw	r3,32(r2)
		veggieObject[1].yPosition = 100;
10000940:	00840074 	movhi	r2,4097
10000944:	10928104 	addi	r2,r2,18948
10000948:	00c01904 	movi	r3,100
1000094c:	10c00915 	stw	r3,36(r2)
		veggieObject[1].objectState = 1;
10000950:	00840074 	movhi	r2,4097
10000954:	10928104 	addi	r2,r2,18948
10000958:	00c00044 	movi	r3,1
1000095c:	10c00b15 	stw	r3,44(r2)
		veggieObject[1].xVelocity = 0;
10000960:	00840074 	movhi	r2,4097
10000964:	10928104 	addi	r2,r2,18948
10000968:	10000c15 	stw	zero,48(r2)
1000096c:	10000d15 	stw	zero,52(r2)
		veggieObject[1].yVelocity = 0;
10000970:	00840074 	movhi	r2,4097
10000974:	10928104 	addi	r2,r2,18948
10000978:	10000e15 	stw	zero,56(r2)
1000097c:	10000f15 	stw	zero,60(r2)

		veggieObject[2].xPosition = 180;
10000980:	00840074 	movhi	r2,4097
10000984:	10928104 	addi	r2,r2,18948
10000988:	00c02d04 	movi	r3,180
1000098c:	10c01015 	stw	r3,64(r2)
		veggieObject[2].yPosition = 320;
10000990:	00840074 	movhi	r2,4097
10000994:	10928104 	addi	r2,r2,18948
10000998:	00c05004 	movi	r3,320
1000099c:	10c01115 	stw	r3,68(r2)
		veggieObject[2].objectState = 1;
100009a0:	00840074 	movhi	r2,4097
100009a4:	10928104 	addi	r2,r2,18948
100009a8:	00c00044 	movi	r3,1
100009ac:	10c01315 	stw	r3,76(r2)
		veggieObject[2].xVelocity = 0;
100009b0:	00840074 	movhi	r2,4097
100009b4:	10928104 	addi	r2,r2,18948
100009b8:	10001415 	stw	zero,80(r2)
100009bc:	10001515 	stw	zero,84(r2)
		veggieObject[2].yVelocity = 0;
100009c0:	00840074 	movhi	r2,4097
100009c4:	10928104 	addi	r2,r2,18948
100009c8:	10001615 	stw	zero,88(r2)
100009cc:	10001715 	stw	zero,92(r2)

		veggieObject[3].xPosition = 540;
100009d0:	00840074 	movhi	r2,4097
100009d4:	10928104 	addi	r2,r2,18948
100009d8:	00c08704 	movi	r3,540
100009dc:	10c01815 	stw	r3,96(r2)
		veggieObject[3].yPosition = 220;
100009e0:	00840074 	movhi	r2,4097
100009e4:	10928104 	addi	r2,r2,18948
100009e8:	00c03704 	movi	r3,220
100009ec:	10c01915 	stw	r3,100(r2)
		veggieObject[3].objectState = 1;
100009f0:	00840074 	movhi	r2,4097
100009f4:	10928104 	addi	r2,r2,18948
100009f8:	00c00044 	movi	r3,1
100009fc:	10c01b15 	stw	r3,108(r2)
		veggieObject[3].xVelocity = 0;
10000a00:	00840074 	movhi	r2,4097
10000a04:	10928104 	addi	r2,r2,18948
10000a08:	10001c15 	stw	zero,112(r2)
10000a0c:	10001d15 	stw	zero,116(r2)
		veggieObject[3].yVelocity = 0;
10000a10:	00840074 	movhi	r2,4097
10000a14:	10928104 	addi	r2,r2,18948
10000a18:	10001e15 	stw	zero,120(r2)
10000a1c:	10001f15 	stw	zero,124(r2)
10000a20:	00001f06 	br	10000aa0 <statusEngine+0x440>
	}
	else if((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))
10000a24:	00840074 	movhi	r2,4097
10000a28:	10928104 	addi	r2,r2,18948
10000a2c:	10800317 	ldw	r2,12(r2)
10000a30:	10800120 	cmpeqi	r2,r2,4
10000a34:	1000051e 	bne	r2,zero,10000a4c <statusEngine+0x3ec>
10000a38:	00840074 	movhi	r2,4097
10000a3c:	10928104 	addi	r2,r2,18948
10000a40:	10800317 	ldw	r2,12(r2)
10000a44:	10800158 	cmpnei	r2,r2,5
10000a48:	1000151e 	bne	r2,zero,10000aa0 <statusEngine+0x440>
	{
		// put in our veggie
		veggieObject[4].xPosition = 230;
10000a4c:	00840074 	movhi	r2,4097
10000a50:	10928104 	addi	r2,r2,18948
10000a54:	00c03984 	movi	r3,230
10000a58:	10c02015 	stw	r3,128(r2)
		veggieObject[4].yPosition = 150;
10000a5c:	00840074 	movhi	r2,4097
10000a60:	10928104 	addi	r2,r2,18948
10000a64:	00c02584 	movi	r3,150
10000a68:	10c02115 	stw	r3,132(r2)
		veggieObject[4].objectState = 1;
10000a6c:	00840074 	movhi	r2,4097
10000a70:	10928104 	addi	r2,r2,18948
10000a74:	00c00044 	movi	r3,1
10000a78:	10c02315 	stw	r3,140(r2)
		veggieObject[4].xVelocity = 0;
10000a7c:	00840074 	movhi	r2,4097
10000a80:	10928104 	addi	r2,r2,18948
10000a84:	10002415 	stw	zero,144(r2)
10000a88:	10002515 	stw	zero,148(r2)
		veggieObject[4].yVelocity = 0;
10000a8c:	00840074 	movhi	r2,4097
10000a90:	10928104 	addi	r2,r2,18948
10000a94:	10002615 	stw	zero,152(r2)
10000a98:	10002715 	stw	zero,156(r2)

		physixOn = 0;
10000a9c:	d026d715 	stw	zero,-25764(gp)
	}
}
10000aa0:	e037883a 	mov	sp,fp
10000aa4:	dfc00117 	ldw	ra,4(sp)
10000aa8:	df000017 	ldw	fp,0(sp)
10000aac:	dec00204 	addi	sp,sp,8
10000ab0:	f800283a 	ret

10000ab4 <physicsEngine>:

void physicsEngine()
{
10000ab4:	defffd04 	addi	sp,sp,-12
10000ab8:	dfc00215 	stw	ra,8(sp)
10000abc:	df000115 	stw	fp,4(sp)
10000ac0:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000ac4:	00800044 	movi	r2,1
10000ac8:	e0bfff15 	stw	r2,-4(fp)
10000acc:	0000c306 	br	10000ddc <physicsEngine+0x328>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000ad0:	00840074 	movhi	r2,4097
10000ad4:	10928104 	addi	r2,r2,18948
10000ad8:	e0ffff17 	ldw	r3,-4(fp)
10000adc:	1806917a 	slli	r3,r3,5
10000ae0:	10c5883a 	add	r2,r2,r3
10000ae4:	10800304 	addi	r2,r2,12
10000ae8:	10800017 	ldw	r2,0(r2)
10000aec:	1000b826 	beq	r2,zero,10000dd0 <physicsEngine+0x31c>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
10000af0:	00840074 	movhi	r2,4097
10000af4:	10928104 	addi	r2,r2,18948
10000af8:	e0ffff17 	ldw	r3,-4(fp)
10000afc:	1806917a 	slli	r3,r3,5
10000b00:	10c5883a 	add	r2,r2,r3
10000b04:	10800017 	ldw	r2,0(r2)
10000b08:	1009883a 	mov	r4,r2
10000b0c:	0003d300 	call	10003d30 <__floatsidf>
10000b10:	100b883a 	mov	r5,r2
10000b14:	180d883a 	mov	r6,r3
10000b18:	00840074 	movhi	r2,4097
10000b1c:	10928104 	addi	r2,r2,18948
10000b20:	e0ffff17 	ldw	r3,-4(fp)
10000b24:	1806917a 	slli	r3,r3,5
10000b28:	10c5883a 	add	r2,r2,r3
10000b2c:	11000404 	addi	r4,r2,16
10000b30:	20800017 	ldw	r2,0(r4)
10000b34:	20c00117 	ldw	r3,4(r4)
10000b38:	2809883a 	mov	r4,r5
10000b3c:	300b883a 	mov	r5,r6
10000b40:	100d883a 	mov	r6,r2
10000b44:	180f883a 	mov	r7,r3
10000b48:	0002b3c0 	call	10002b3c <__adddf3>
10000b4c:	1009883a 	mov	r4,r2
10000b50:	180b883a 	mov	r5,r3
10000b54:	2005883a 	mov	r2,r4
10000b58:	2807883a 	mov	r3,r5
10000b5c:	1009883a 	mov	r4,r2
10000b60:	180b883a 	mov	r5,r3
10000b64:	0003ca80 	call	10003ca8 <__fixdfsi>
10000b68:	1009883a 	mov	r4,r2
10000b6c:	00840074 	movhi	r2,4097
10000b70:	10928104 	addi	r2,r2,18948
10000b74:	e0ffff17 	ldw	r3,-4(fp)
10000b78:	1806917a 	slli	r3,r3,5
10000b7c:	10c5883a 	add	r2,r2,r3
10000b80:	11000015 	stw	r4,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000b84:	00840074 	movhi	r2,4097
10000b88:	10928104 	addi	r2,r2,18948
10000b8c:	e0ffff17 	ldw	r3,-4(fp)
10000b90:	1806917a 	slli	r3,r3,5
10000b94:	10c5883a 	add	r2,r2,r3
10000b98:	10800104 	addi	r2,r2,4
10000b9c:	10800017 	ldw	r2,0(r2)
10000ba0:	1009883a 	mov	r4,r2
10000ba4:	0003d300 	call	10003d30 <__floatsidf>
10000ba8:	100b883a 	mov	r5,r2
10000bac:	180d883a 	mov	r6,r3
10000bb0:	00840074 	movhi	r2,4097
10000bb4:	10928104 	addi	r2,r2,18948
10000bb8:	e0ffff17 	ldw	r3,-4(fp)
10000bbc:	1806917a 	slli	r3,r3,5
10000bc0:	10c5883a 	add	r2,r2,r3
10000bc4:	11000604 	addi	r4,r2,24
10000bc8:	20800017 	ldw	r2,0(r4)
10000bcc:	20c00117 	ldw	r3,4(r4)
10000bd0:	2809883a 	mov	r4,r5
10000bd4:	300b883a 	mov	r5,r6
10000bd8:	100d883a 	mov	r6,r2
10000bdc:	180f883a 	mov	r7,r3
10000be0:	0002b3c0 	call	10002b3c <__adddf3>
10000be4:	1009883a 	mov	r4,r2
10000be8:	180b883a 	mov	r5,r3
10000bec:	2005883a 	mov	r2,r4
10000bf0:	2807883a 	mov	r3,r5
10000bf4:	1009883a 	mov	r4,r2
10000bf8:	180b883a 	mov	r5,r3
10000bfc:	0003ca80 	call	10003ca8 <__fixdfsi>
10000c00:	1009883a 	mov	r4,r2
10000c04:	00840074 	movhi	r2,4097
10000c08:	10928104 	addi	r2,r2,18948
10000c0c:	e0ffff17 	ldw	r3,-4(fp)
10000c10:	1806917a 	slli	r3,r3,5
10000c14:	10c5883a 	add	r2,r2,r3
10000c18:	10800104 	addi	r2,r2,4
10000c1c:	11000015 	stw	r4,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000c20:	00840074 	movhi	r2,4097
10000c24:	10928104 	addi	r2,r2,18948
10000c28:	e0ffff17 	ldw	r3,-4(fp)
10000c2c:	1806917a 	slli	r3,r3,5
10000c30:	10c5883a 	add	r2,r2,r3
10000c34:	11000604 	addi	r4,r2,24
10000c38:	20800017 	ldw	r2,0(r4)
10000c3c:	20c00117 	ldw	r3,4(r4)
10000c40:	1009883a 	mov	r4,r2
10000c44:	180b883a 	mov	r5,r3
10000c48:	000d883a 	mov	r6,zero
10000c4c:	01cffc34 	movhi	r7,16368
10000c50:	00033d80 	call	100033d8 <__subdf3>
10000c54:	1009883a 	mov	r4,r2
10000c58:	180b883a 	mov	r5,r3
10000c5c:	2005883a 	mov	r2,r4
10000c60:	2807883a 	mov	r3,r5
10000c64:	01040074 	movhi	r4,4097
10000c68:	21128104 	addi	r4,r4,18948
10000c6c:	e17fff17 	ldw	r5,-4(fp)
10000c70:	280a917a 	slli	r5,r5,5
10000c74:	2149883a 	add	r4,r4,r5
10000c78:	21000604 	addi	r4,r4,24
10000c7c:	20800015 	stw	r2,0(r4)
10000c80:	20c00115 	stw	r3,4(r4)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000c84:	00840074 	movhi	r2,4097
10000c88:	10928104 	addi	r2,r2,18948
10000c8c:	e0ffff17 	ldw	r3,-4(fp)
10000c90:	1806917a 	slli	r3,r3,5
10000c94:	10c5883a 	add	r2,r2,r3
10000c98:	10800104 	addi	r2,r2,4
10000c9c:	10800017 	ldw	r2,0(r2)
10000ca0:	10000f16 	blt	r2,zero,10000ce0 <physicsEngine+0x22c>
10000ca4:	00840074 	movhi	r2,4097
10000ca8:	10928104 	addi	r2,r2,18948
10000cac:	e0ffff17 	ldw	r3,-4(fp)
10000cb0:	1806917a 	slli	r3,r3,5
10000cb4:	10c5883a 	add	r2,r2,r3
10000cb8:	10800017 	ldw	r2,0(r2)
10000cbc:	10000816 	blt	r2,zero,10000ce0 <physicsEngine+0x22c>
10000cc0:	00840074 	movhi	r2,4097
10000cc4:	10928104 	addi	r2,r2,18948
10000cc8:	e0ffff17 	ldw	r3,-4(fp)
10000ccc:	1806917a 	slli	r3,r3,5
10000cd0:	10c5883a 	add	r2,r2,r3
10000cd4:	10800017 	ldw	r2,0(r2)
10000cd8:	1080a050 	cmplti	r2,r2,641
10000cdc:	10003c1e 	bne	r2,zero,10000dd0 <physicsEngine+0x31c>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000ce0:	00840074 	movhi	r2,4097
10000ce4:	10928104 	addi	r2,r2,18948
10000ce8:	e0ffff17 	ldw	r3,-4(fp)
10000cec:	1806917a 	slli	r3,r3,5
10000cf0:	10c5883a 	add	r2,r2,r3
10000cf4:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000cf8:	00840074 	movhi	r2,4097
10000cfc:	10928104 	addi	r2,r2,18948
10000d00:	e0ffff17 	ldw	r3,-4(fp)
10000d04:	1806917a 	slli	r3,r3,5
10000d08:	10c5883a 	add	r2,r2,r3
10000d0c:	10800104 	addi	r2,r2,4
10000d10:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000d14:	00840074 	movhi	r2,4097
10000d18:	10928104 	addi	r2,r2,18948
10000d1c:	e0ffff17 	ldw	r3,-4(fp)
10000d20:	1806917a 	slli	r3,r3,5
10000d24:	10c5883a 	add	r2,r2,r3
10000d28:	10800204 	addi	r2,r2,8
10000d2c:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000d30:	00840074 	movhi	r2,4097
10000d34:	10928104 	addi	r2,r2,18948
10000d38:	e0ffff17 	ldw	r3,-4(fp)
10000d3c:	1806917a 	slli	r3,r3,5
10000d40:	10c5883a 	add	r2,r2,r3
10000d44:	10800304 	addi	r2,r2,12
10000d48:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000d4c:	00840074 	movhi	r2,4097
10000d50:	10928104 	addi	r2,r2,18948
10000d54:	e0ffff17 	ldw	r3,-4(fp)
10000d58:	1806917a 	slli	r3,r3,5
10000d5c:	10c5883a 	add	r2,r2,r3
10000d60:	10800404 	addi	r2,r2,16
10000d64:	10000015 	stw	zero,0(r2)
10000d68:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000d6c:	00840074 	movhi	r2,4097
10000d70:	10928104 	addi	r2,r2,18948
10000d74:	e0ffff17 	ldw	r3,-4(fp)
10000d78:	1806917a 	slli	r3,r3,5
10000d7c:	10c5883a 	add	r2,r2,r3
10000d80:	10800604 	addi	r2,r2,24
10000d84:	10000015 	stw	zero,0(r2)
10000d88:	10000115 	stw	zero,4(r2)

				// reduce score!
				if(i<9)
10000d8c:	e0bfff17 	ldw	r2,-4(fp)
10000d90:	10800248 	cmpgei	r2,r2,9
10000d94:	10000e1e 	bne	r2,zero,10000dd0 <physicsEngine+0x31c>
				{
					veggieObject[0].xPosition = veggieObject[0].xPosition - 5;
10000d98:	00840074 	movhi	r2,4097
10000d9c:	10928104 	addi	r2,r2,18948
10000da0:	10800017 	ldw	r2,0(r2)
10000da4:	10fffec4 	addi	r3,r2,-5
10000da8:	00840074 	movhi	r2,4097
10000dac:	10928104 	addi	r2,r2,18948
10000db0:	10c00015 	stw	r3,0(r2)
					printf("veggie escaped! score decreased to %d! \n", veggieObject[0].xPosition);
10000db4:	00840074 	movhi	r2,4097
10000db8:	10928104 	addi	r2,r2,18948
10000dbc:	10800017 	ldw	r2,0(r2)
10000dc0:	01040074 	movhi	r4,4097
10000dc4:	2103fa04 	addi	r4,r4,4072
10000dc8:	100b883a 	mov	r5,r2
10000dcc:	0003e900 	call	10003e90 <printf>
}

void physicsEngine()
{
	int i;
	for(i=1; i<10; i++)	// update all our physics of all objects!
10000dd0:	e0bfff17 	ldw	r2,-4(fp)
10000dd4:	10800044 	addi	r2,r2,1
10000dd8:	e0bfff15 	stw	r2,-4(fp)
10000ddc:	e0bfff17 	ldw	r2,-4(fp)
10000de0:	10800290 	cmplti	r2,r2,10
10000de4:	103f3a1e 	bne	r2,zero,10000ad0 <__alt_data_end+0xf8000ad0>
				}
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000de8:	0001883a 	nop
}
10000dec:	e037883a 	mov	sp,fp
10000df0:	dfc00117 	ldw	ra,4(sp)
10000df4:	df000017 	ldw	fp,0(sp)
10000df8:	dec00204 	addi	sp,sp,8
10000dfc:	f800283a 	ret

10000e00 <spawningEngine>:

void spawningEngine(int pattern)
{
10000e00:	defff004 	addi	sp,sp,-64
10000e04:	dfc00f15 	stw	ra,60(sp)
10000e08:	df000e15 	stw	fp,56(sp)
10000e0c:	df000e04 	addi	fp,sp,56
10000e10:	e13fff15 	stw	r4,-4(fp)
	if(pattern == 0)	// one pattern will have us skip a spawn...caus whatev
10000e14:	e0bfff17 	ldw	r2,-4(fp)
10000e18:	1000011e 	bne	r2,zero,10000e20 <spawningEngine+0x20>
	{
		return;
10000e1c:	0000ec06 	br	100011d0 <spawningEngine+0x3d0>
	}
	else if((pattern == 7) || (pattern == 9))	// they want us.. to build a bomb!
10000e20:	e0bfff17 	ldw	r2,-4(fp)
10000e24:	108001e0 	cmpeqi	r2,r2,7
10000e28:	1000031e 	bne	r2,zero,10000e38 <spawningEngine+0x38>
10000e2c:	e0bfff17 	ldw	r2,-4(fp)
10000e30:	10800258 	cmpnei	r2,r2,9
10000e34:	10005d1e 	bne	r2,zero,10000fac <spawningEngine+0x1ac>
	{
		if((rand() % 3) == 1)	// one last chance to not bomb this!
10000e38:	0003fb00 	call	10003fb0 <rand>
10000e3c:	1009883a 	mov	r4,r2
10000e40:	014000c4 	movi	r5,3
10000e44:	0002aa80 	call	10002aa8 <__modsi3>
10000e48:	10800058 	cmpnei	r2,r2,1
10000e4c:	1000571e 	bne	r2,zero,10000fac <spawningEngine+0x1ac>
		{
			if(veggieObject[9].objectState == 0)	// if one doesn't exist, go!
10000e50:	00840074 	movhi	r2,4097
10000e54:	10928104 	addi	r2,r2,18948
10000e58:	10804b17 	ldw	r2,300(r2)
10000e5c:	1000531e 	bne	r2,zero,10000fac <spawningEngine+0x1ac>
			{
				unsigned int randomX;	// x coordinate on bottom of screen
				double randomSpeedY, randomSpeedX;	// starting velocity

				// RANDOM GENERATION!!
				randomX = (rand() % 540) + 50;
10000e60:	0003fb00 	call	10003fb0 <rand>
10000e64:	1009883a 	mov	r4,r2
10000e68:	01408704 	movi	r5,540
10000e6c:	0002aa80 	call	10002aa8 <__modsi3>
10000e70:	10800c84 	addi	r2,r2,50
10000e74:	e0bff815 	stw	r2,-32(fp)
				randomSpeedY = (rand() % 7) + 24;
10000e78:	0003fb00 	call	10003fb0 <rand>
10000e7c:	1009883a 	mov	r4,r2
10000e80:	014001c4 	movi	r5,7
10000e84:	0002aa80 	call	10002aa8 <__modsi3>
10000e88:	10800604 	addi	r2,r2,24
10000e8c:	1009883a 	mov	r4,r2
10000e90:	0003d300 	call	10003d30 <__floatsidf>
10000e94:	1009883a 	mov	r4,r2
10000e98:	180b883a 	mov	r5,r3
10000e9c:	e13ff915 	stw	r4,-28(fp)
10000ea0:	e17ffa15 	stw	r5,-24(fp)
				randomSpeedX = (rand() % 12) - 6;
10000ea4:	0003fb00 	call	10003fb0 <rand>
10000ea8:	1009883a 	mov	r4,r2
10000eac:	01400304 	movi	r5,12
10000eb0:	0002aa80 	call	10002aa8 <__modsi3>
10000eb4:	10bffe84 	addi	r2,r2,-6
10000eb8:	1009883a 	mov	r4,r2
10000ebc:	0003d300 	call	10003d30 <__floatsidf>
10000ec0:	1009883a 	mov	r4,r2
10000ec4:	180b883a 	mov	r5,r3
10000ec8:	e13ff215 	stw	r4,-56(fp)
10000ecc:	e17ff315 	stw	r5,-52(fp)

				// make sure we aren't throwing them out the edges
				if (randomX < 300)
10000ed0:	e0bff817 	ldw	r2,-32(fp)
10000ed4:	10804b28 	cmpgeui	r2,r2,300
10000ed8:	10000b1e 	bne	r2,zero,10000f08 <spawningEngine+0x108>
				{
					randomSpeedX = (rand() % 12);
10000edc:	0003fb00 	call	10003fb0 <rand>
10000ee0:	1009883a 	mov	r4,r2
10000ee4:	01400304 	movi	r5,12
10000ee8:	0002aa80 	call	10002aa8 <__modsi3>
10000eec:	1009883a 	mov	r4,r2
10000ef0:	0003d300 	call	10003d30 <__floatsidf>
10000ef4:	1009883a 	mov	r4,r2
10000ef8:	180b883a 	mov	r5,r3
10000efc:	e13ff215 	stw	r4,-56(fp)
10000f00:	e17ff315 	stw	r5,-52(fp)
10000f04:	00000e06 	br	10000f40 <spawningEngine+0x140>
				}
				else if (randomX > 350)
10000f08:	e0bff817 	ldw	r2,-32(fp)
10000f0c:	108057f0 	cmpltui	r2,r2,351
10000f10:	10000b1e 	bne	r2,zero,10000f40 <spawningEngine+0x140>
				{
					randomSpeedX = (rand() % 12) - 12;
10000f14:	0003fb00 	call	10003fb0 <rand>
10000f18:	1009883a 	mov	r4,r2
10000f1c:	01400304 	movi	r5,12
10000f20:	0002aa80 	call	10002aa8 <__modsi3>
10000f24:	10bffd04 	addi	r2,r2,-12
10000f28:	1009883a 	mov	r4,r2
10000f2c:	0003d300 	call	10003d30 <__floatsidf>
10000f30:	1009883a 	mov	r4,r2
10000f34:	180b883a 	mov	r5,r3
10000f38:	e13ff215 	stw	r4,-56(fp)
10000f3c:	e17ff315 	stw	r5,-52(fp)
				}

				// now let's store these
				veggieObject[9].xPosition = randomX;
10000f40:	e0fff817 	ldw	r3,-32(fp)
10000f44:	00840074 	movhi	r2,4097
10000f48:	10928104 	addi	r2,r2,18948
10000f4c:	10c04815 	stw	r3,288(r2)
				veggieObject[9].yPosition = 0;
10000f50:	00840074 	movhi	r2,4097
10000f54:	10928104 	addi	r2,r2,18948
10000f58:	10004915 	stw	zero,292(r2)
				veggieObject[9].objectType = 0;
10000f5c:	00840074 	movhi	r2,4097
10000f60:	10928104 	addi	r2,r2,18948
10000f64:	10004a15 	stw	zero,296(r2)
				veggieObject[9].xVelocity = randomSpeedX;
10000f68:	00840074 	movhi	r2,4097
10000f6c:	10928104 	addi	r2,r2,18948
10000f70:	e0fff217 	ldw	r3,-56(fp)
10000f74:	10c04c15 	stw	r3,304(r2)
10000f78:	e0fff317 	ldw	r3,-52(fp)
10000f7c:	10c04d15 	stw	r3,308(r2)
				veggieObject[9].yVelocity = randomSpeedY;
10000f80:	00840074 	movhi	r2,4097
10000f84:	10928104 	addi	r2,r2,18948
10000f88:	e0fff917 	ldw	r3,-28(fp)
10000f8c:	10c04e15 	stw	r3,312(r2)
10000f90:	e0fffa17 	ldw	r3,-24(fp)
10000f94:	10c04f15 	stw	r3,316(r2)
				veggieObject[9].objectState = 1;	// reserve this slot
10000f98:	00840074 	movhi	r2,4097
10000f9c:	10928104 	addi	r2,r2,18948
10000fa0:	00c00044 	movi	r3,1
10000fa4:	10c04b15 	stw	r3,300(r2)

				return; // our evillness is done!!!
10000fa8:	00008906 	br	100011d0 <spawningEngine+0x3d0>
			}
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
10000fac:	00800044 	movi	r2,1
10000fb0:	e0bff415 	stw	r2,-48(fp)
10000fb4:	00008206 	br	100011c0 <spawningEngine+0x3c0>
	{
		i = (rand() % 14 + 1);	// put it in a random port for random veggies
10000fb8:	0003fb00 	call	10003fb0 <rand>
10000fbc:	1009883a 	mov	r4,r2
10000fc0:	01400384 	movi	r5,14
10000fc4:	0002aa80 	call	10002aa8 <__modsi3>
10000fc8:	10800044 	addi	r2,r2,1
10000fcc:	e0bffb15 	stw	r2,-20(fp)
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000fd0:	00840074 	movhi	r2,4097
10000fd4:	10928104 	addi	r2,r2,18948
10000fd8:	e0fffb17 	ldw	r3,-20(fp)
10000fdc:	1806917a 	slli	r3,r3,5
10000fe0:	10c5883a 	add	r2,r2,r3
10000fe4:	10800304 	addi	r2,r2,12
10000fe8:	10800017 	ldw	r2,0(r2)
10000fec:	1000711e 	bne	r2,zero,100011b4 <spawningEngine+0x3b4>
		{
			unsigned int randomX;	// x coordinate on bottom of screen
			double randomSpeedY, randomSpeedX;	// starting velocity
			veggieObject[i].objectState = 1;	// reserve this slot
10000ff0:	00840074 	movhi	r2,4097
10000ff4:	10928104 	addi	r2,r2,18948
10000ff8:	e0fffb17 	ldw	r3,-20(fp)
10000ffc:	1806917a 	slli	r3,r3,5
10001000:	10c5883a 	add	r2,r2,r3
10001004:	10800304 	addi	r2,r2,12
10001008:	00c00044 	movi	r3,1
1000100c:	10c00015 	stw	r3,0(r2)

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
10001010:	e0bfff17 	ldw	r2,-4(fp)
10001014:	10800150 	cmplti	r2,r2,5
10001018:	10000b1e 	bne	r2,zero,10001048 <spawningEngine+0x248>
			{
				int j;
				for(j=4; j<pattern; j++)
1000101c:	00800104 	movi	r2,4
10001020:	e0bff715 	stw	r2,-36(fp)
10001024:	00000506 	br	1000103c <spawningEngine+0x23c>
				{
					spawningEngine(1);	// call ourselves to spawn another!
10001028:	01000044 	movi	r4,1
1000102c:	0000e000 	call	10000e00 <spawningEngine>
			veggieObject[i].objectState = 1;	// reserve this slot

			if(pattern >= 5)	// can spawn multiples and identical depending on pattern
			{
				int j;
				for(j=4; j<pattern; j++)
10001030:	e0bff717 	ldw	r2,-36(fp)
10001034:	10800044 	addi	r2,r2,1
10001038:	e0bff715 	stw	r2,-36(fp)
1000103c:	e0fff717 	ldw	r3,-36(fp)
10001040:	e0bfff17 	ldw	r2,-4(fp)
10001044:	18bff816 	blt	r3,r2,10001028 <__alt_data_end+0xf8001028>
					spawningEngine(1);	// call ourselves to spawn another!
				}
			}

			// RANDOM GENERATION!!
			randomX = (rand() % 540) + 50;
10001048:	0003fb00 	call	10003fb0 <rand>
1000104c:	1009883a 	mov	r4,r2
10001050:	01408704 	movi	r5,540
10001054:	0002aa80 	call	10002aa8 <__modsi3>
10001058:	10800c84 	addi	r2,r2,50
1000105c:	e0bffc15 	stw	r2,-16(fp)
			randomSpeedY = (rand() % 7) + 24;
10001060:	0003fb00 	call	10003fb0 <rand>
10001064:	1009883a 	mov	r4,r2
10001068:	014001c4 	movi	r5,7
1000106c:	0002aa80 	call	10002aa8 <__modsi3>
10001070:	10800604 	addi	r2,r2,24
10001074:	1009883a 	mov	r4,r2
10001078:	0003d300 	call	10003d30 <__floatsidf>
1000107c:	1009883a 	mov	r4,r2
10001080:	180b883a 	mov	r5,r3
10001084:	e13ffd15 	stw	r4,-12(fp)
10001088:	e17ffe15 	stw	r5,-8(fp)
			randomSpeedX = (rand() % 12) - 6;
1000108c:	0003fb00 	call	10003fb0 <rand>
10001090:	1009883a 	mov	r4,r2
10001094:	01400304 	movi	r5,12
10001098:	0002aa80 	call	10002aa8 <__modsi3>
1000109c:	10bffe84 	addi	r2,r2,-6
100010a0:	1009883a 	mov	r4,r2
100010a4:	0003d300 	call	10003d30 <__floatsidf>
100010a8:	1009883a 	mov	r4,r2
100010ac:	180b883a 	mov	r5,r3
100010b0:	e13ff515 	stw	r4,-44(fp)
100010b4:	e17ff615 	stw	r5,-40(fp)

			// make sure we aren't throwing them out the edges
			if (randomX < 250)
100010b8:	e0bffc17 	ldw	r2,-16(fp)
100010bc:	10803ea8 	cmpgeui	r2,r2,250
100010c0:	10000b1e 	bne	r2,zero,100010f0 <spawningEngine+0x2f0>
			{
				randomSpeedX = (rand() % 12);
100010c4:	0003fb00 	call	10003fb0 <rand>
100010c8:	1009883a 	mov	r4,r2
100010cc:	01400304 	movi	r5,12
100010d0:	0002aa80 	call	10002aa8 <__modsi3>
100010d4:	1009883a 	mov	r4,r2
100010d8:	0003d300 	call	10003d30 <__floatsidf>
100010dc:	1009883a 	mov	r4,r2
100010e0:	180b883a 	mov	r5,r3
100010e4:	e13ff515 	stw	r4,-44(fp)
100010e8:	e17ff615 	stw	r5,-40(fp)
100010ec:	00000e06 	br	10001128 <spawningEngine+0x328>
			}
			else if (randomX > 400)
100010f0:	e0bffc17 	ldw	r2,-16(fp)
100010f4:	10806470 	cmpltui	r2,r2,401
100010f8:	10000b1e 	bne	r2,zero,10001128 <spawningEngine+0x328>
			{
				randomSpeedX = (rand() % 12) - 12;
100010fc:	0003fb00 	call	10003fb0 <rand>
10001100:	1009883a 	mov	r4,r2
10001104:	01400304 	movi	r5,12
10001108:	0002aa80 	call	10002aa8 <__modsi3>
1000110c:	10bffd04 	addi	r2,r2,-12
10001110:	1009883a 	mov	r4,r2
10001114:	0003d300 	call	10003d30 <__floatsidf>
10001118:	1009883a 	mov	r4,r2
1000111c:	180b883a 	mov	r5,r3
10001120:	e13ff515 	stw	r4,-44(fp)
10001124:	e17ff615 	stw	r5,-40(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10001128:	e0fffc17 	ldw	r3,-16(fp)
1000112c:	00840074 	movhi	r2,4097
10001130:	10928104 	addi	r2,r2,18948
10001134:	e13ffb17 	ldw	r4,-20(fp)
10001138:	2008917a 	slli	r4,r4,5
1000113c:	1105883a 	add	r2,r2,r4
10001140:	10c00015 	stw	r3,0(r2)
			veggieObject[i].yPosition = 0;
10001144:	00840074 	movhi	r2,4097
10001148:	10928104 	addi	r2,r2,18948
1000114c:	e0fffb17 	ldw	r3,-20(fp)
10001150:	1806917a 	slli	r3,r3,5
10001154:	10c5883a 	add	r2,r2,r3
10001158:	10800104 	addi	r2,r2,4
1000115c:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10001160:	00840074 	movhi	r2,4097
10001164:	10928104 	addi	r2,r2,18948
10001168:	e0fffb17 	ldw	r3,-20(fp)
1000116c:	1806917a 	slli	r3,r3,5
10001170:	10c5883a 	add	r2,r2,r3
10001174:	10800404 	addi	r2,r2,16
10001178:	e0fff517 	ldw	r3,-44(fp)
1000117c:	10c00015 	stw	r3,0(r2)
10001180:	e0fff617 	ldw	r3,-40(fp)
10001184:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10001188:	00840074 	movhi	r2,4097
1000118c:	10928104 	addi	r2,r2,18948
10001190:	e0fffb17 	ldw	r3,-20(fp)
10001194:	1806917a 	slli	r3,r3,5
10001198:	10c5883a 	add	r2,r2,r3
1000119c:	10800604 	addi	r2,r2,24
100011a0:	e0fffd17 	ldw	r3,-12(fp)
100011a4:	10c00015 	stw	r3,0(r2)
100011a8:	e0fffe17 	ldw	r3,-8(fp)
100011ac:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
100011b0:	00000706 	br	100011d0 <spawningEngine+0x3d0>
				return; // our evillness is done!!!
			}
		}
	}
	int i, j;
	for(j=1; j<9; j++)	// let's go through our veggies and see which ones are free
100011b4:	e0bff417 	ldw	r2,-48(fp)
100011b8:	10800044 	addi	r2,r2,1
100011bc:	e0bff415 	stw	r2,-48(fp)
100011c0:	e0bff417 	ldw	r2,-48(fp)
100011c4:	10800250 	cmplti	r2,r2,9
100011c8:	103f7b1e 	bne	r2,zero,10000fb8 <__alt_data_end+0xf8000fb8>
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);	*/
			return;
		}
	}
	return;
100011cc:	0001883a 	nop
}
100011d0:	e037883a 	mov	sp,fp
100011d4:	dfc00117 	ldw	ra,4(sp)
100011d8:	df000017 	ldw	fp,0(sp)
100011dc:	dec00204 	addi	sp,sp,8
100011e0:	f800283a 	ret

100011e4 <slicingEngine>:

void slicingEngine()
{
100011e4:	defffb04 	addi	sp,sp,-20
100011e8:	dfc00415 	stw	ra,16(sp)
100011ec:	df000315 	stw	fp,12(sp)
100011f0:	df000304 	addi	fp,sp,12
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
100011f4:	00840074 	movhi	r2,4097
100011f8:	10928104 	addi	r2,r2,18948
100011fc:	10800317 	ldw	r2,12(r2)
10001200:	1000591e 	bne	r2,zero,10001368 <slicingEngine+0x184>
10001204:	d0a6d017 	ldw	r2,-25792(gp)
10001208:	10005726 	beq	r2,zero,10001368 <slicingEngine+0x184>
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
1000120c:	d0a6ce17 	ldw	r2,-25800(gp)
10001210:	108007f0 	cmpltui	r2,r2,31
10001214:	1000191e 	bne	r2,zero,1000127c <slicingEngine+0x98>
10001218:	d0a6ce17 	ldw	r2,-25800(gp)
1000121c:	10801928 	cmpgeui	r2,r2,100
10001220:	1000161e 	bne	r2,zero,1000127c <slicingEngine+0x98>
10001224:	d0a6cd17 	ldw	r2,-25804(gp)
10001228:	108007f0 	cmpltui	r2,r2,31
1000122c:	1000131e 	bne	r2,zero,1000127c <slicingEngine+0x98>
10001230:	d0a6cd17 	ldw	r2,-25804(gp)
10001234:	10801928 	cmpgeui	r2,r2,100
10001238:	1000101e 	bne	r2,zero,1000127c <slicingEngine+0x98>
		{
			veggieObject[0].objectState = 1;	// easy mode start
1000123c:	00840074 	movhi	r2,4097
10001240:	10928104 	addi	r2,r2,18948
10001244:	00c00044 	movi	r3,1
10001248:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 0;		// where we're goin, we don't need lives
1000124c:	00840074 	movhi	r2,4097
10001250:	10928104 	addi	r2,r2,18948
10001254:	10000215 	stw	zero,8(r2)
			physixOn = 1;
10001258:	00800044 	movi	r2,1
1000125c:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[1].objectState = 2;	// cut the object!
10001260:	00840074 	movhi	r2,4097
10001264:	10928104 	addi	r2,r2,18948
10001268:	00c00084 	movi	r3,2
1000126c:	10c00b15 	stw	r3,44(r2)
			roundStart = elapsedTime;
10001270:	d0a6cb17 	ldw	r2,-25812(gp)
10001274:	d0a6d815 	stw	r2,-25760(gp)
10001278:	00003a06 	br	10001364 <slicingEngine+0x180>
		}
		else if((xCursor>180)&&(xCursor<250)&&(yCursor>220)&&(yCursor<310))
1000127c:	d0a6ce17 	ldw	r2,-25800(gp)
10001280:	10802d70 	cmpltui	r2,r2,181
10001284:	10001a1e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
10001288:	d0a6ce17 	ldw	r2,-25800(gp)
1000128c:	10803ea8 	cmpgeui	r2,r2,250
10001290:	1000171e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
10001294:	d0a6cd17 	ldw	r2,-25804(gp)
10001298:	10803770 	cmpltui	r2,r2,221
1000129c:	1000141e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
100012a0:	d0a6cd17 	ldw	r2,-25804(gp)
100012a4:	10804da8 	cmpgeui	r2,r2,310
100012a8:	1000111e 	bne	r2,zero,100012f0 <slicingEngine+0x10c>
		{
			veggieObject[0].objectState = 2;	// medium mode start
100012ac:	00840074 	movhi	r2,4097
100012b0:	10928104 	addi	r2,r2,18948
100012b4:	00c00084 	movi	r3,2
100012b8:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 7;		// lots of lives for u!
100012bc:	00840074 	movhi	r2,4097
100012c0:	10928104 	addi	r2,r2,18948
100012c4:	00c001c4 	movi	r3,7
100012c8:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
100012cc:	00800044 	movi	r2,1
100012d0:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[2].objectState = 2;	// cut the object!
100012d4:	00840074 	movhi	r2,4097
100012d8:	10928104 	addi	r2,r2,18948
100012dc:	00c00084 	movi	r3,2
100012e0:	10c01315 	stw	r3,76(r2)
			roundStart = elapsedTime;
100012e4:	d0a6cb17 	ldw	r2,-25812(gp)
100012e8:	d0a6d815 	stw	r2,-25760(gp)
100012ec:	00001d06 	br	10001364 <slicingEngine+0x180>
		}
		else if((xCursor>450)&&(xCursor<520)&&(yCursor>120)&&(yCursor<210))
100012f0:	d0a6ce17 	ldw	r2,-25800(gp)
100012f4:	108070f0 	cmpltui	r2,r2,451
100012f8:	10001a1e 	bne	r2,zero,10001364 <slicingEngine+0x180>
100012fc:	d0a6ce17 	ldw	r2,-25800(gp)
10001300:	10808228 	cmpgeui	r2,r2,520
10001304:	1000171e 	bne	r2,zero,10001364 <slicingEngine+0x180>
10001308:	d0a6cd17 	ldw	r2,-25804(gp)
1000130c:	10801e70 	cmpltui	r2,r2,121
10001310:	1000141e 	bne	r2,zero,10001364 <slicingEngine+0x180>
10001314:	d0a6cd17 	ldw	r2,-25804(gp)
10001318:	108034a8 	cmpgeui	r2,r2,210
1000131c:	1000111e 	bne	r2,zero,10001364 <slicingEngine+0x180>
		{
			veggieObject[0].objectState = 3;	// hard mode start
10001320:	00840074 	movhi	r2,4097
10001324:	10928104 	addi	r2,r2,18948
10001328:	00c000c4 	movi	r3,3
1000132c:	10c00315 	stw	r3,12(r2)
			veggieObject[0].objectType = 3;		// ..good luck...you'll need it
10001330:	00840074 	movhi	r2,4097
10001334:	10928104 	addi	r2,r2,18948
10001338:	00c000c4 	movi	r3,3
1000133c:	10c00215 	stw	r3,8(r2)
			physixOn = 1;
10001340:	00800044 	movi	r2,1
10001344:	d0a6d715 	stw	r2,-25764(gp)
			veggieObject[3].objectState = 2;	// cut the object!
10001348:	00840074 	movhi	r2,4097
1000134c:	10928104 	addi	r2,r2,18948
10001350:	00c00084 	movi	r3,2
10001354:	10c01b15 	stw	r3,108(r2)
			roundStart = elapsedTime;
10001358:	d0a6cb17 	ldw	r2,-25812(gp)
1000135c:	d0a6d815 	stw	r2,-25760(gp)
{
	if((veggieObject[0].objectState == 0)&&(cursorStreak))	// this is menu state
	{
		// let's check menu collision
		// THIS IS TO DO
		if((xCursor>30)&&(xCursor<100)&&(yCursor>30)&&(yCursor<100))
10001360:	00009906 	br	100015c8 <slicingEngine+0x3e4>
10001364:	00009806 	br	100015c8 <slicingEngine+0x3e4>
			physixOn = 1;
			veggieObject[3].objectState = 2;	// cut the object!
			roundStart = elapsedTime;
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
10001368:	00840074 	movhi	r2,4097
1000136c:	10928104 	addi	r2,r2,18948
10001370:	10800317 	ldw	r2,12(r2)
10001374:	10800120 	cmpeqi	r2,r2,4
10001378:	1000051e 	bne	r2,zero,10001390 <slicingEngine+0x1ac>
1000137c:	00840074 	movhi	r2,4097
10001380:	10928104 	addi	r2,r2,18948
10001384:	10800317 	ldw	r2,12(r2)
10001388:	10800158 	cmpnei	r2,r2,5
1000138c:	1000181e 	bne	r2,zero,100013f0 <slicingEngine+0x20c>
10001390:	d0a6d017 	ldw	r2,-25792(gp)
10001394:	10001626 	beq	r2,zero,100013f0 <slicingEngine+0x20c>
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
10001398:	d0a6ce17 	ldw	r2,-25800(gp)
1000139c:	108039f0 	cmpltui	r2,r2,231
100013a0:	1000121e 	bne	r2,zero,100013ec <slicingEngine+0x208>
100013a4:	d0a6ce17 	ldw	r2,-25800(gp)
100013a8:	10804b28 	cmpgeui	r2,r2,300
100013ac:	10000f1e 	bne	r2,zero,100013ec <slicingEngine+0x208>
100013b0:	d0a6cd17 	ldw	r2,-25804(gp)
100013b4:	10801470 	cmpltui	r2,r2,81
100013b8:	10000c1e 	bne	r2,zero,100013ec <slicingEngine+0x208>
100013bc:	d0a6cd17 	ldw	r2,-25804(gp)
100013c0:	108025a8 	cmpgeui	r2,r2,150
100013c4:	1000091e 	bne	r2,zero,100013ec <slicingEngine+0x208>
		{
			veggieObject[0].objectState = 0;	// return to main menu
100013c8:	00840074 	movhi	r2,4097
100013cc:	10928104 	addi	r2,r2,18948
100013d0:	10000315 	stw	zero,12(r2)
			veggieObject[4].objectState = 2;	// cut the object!
100013d4:	00840074 	movhi	r2,4097
100013d8:	10928104 	addi	r2,r2,18948
100013dc:	00c00084 	movi	r3,2
100013e0:	10c02315 	stw	r3,140(r2)

			physixOn = 0;
100013e4:	d026d715 	stw	zero,-25764(gp)
		}
	}
	else if(((veggieObject[0].objectState == 4) || (veggieObject[0].objectState == 5))&&(cursorStreak))
	{
		// DO MORE MENU COLLISION
		if((xCursor>230)&&(xCursor<300)&&(yCursor>80)&&(yCursor<150))
100013e8:	00007706 	br	100015c8 <slicingEngine+0x3e4>
100013ec:	00007606 	br	100015c8 <slicingEngine+0x3e4>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
100013f0:	00800044 	movi	r2,1
100013f4:	e0bffd15 	stw	r2,-12(fp)
100013f8:	00007006 	br	100015bc <slicingEngine+0x3d8>
		{
			// only if it is in perfect state
			if(veggieObject[i].objectState == 1)
100013fc:	00840074 	movhi	r2,4097
10001400:	10928104 	addi	r2,r2,18948
10001404:	e0fffd17 	ldw	r3,-12(fp)
10001408:	1806917a 	slli	r3,r3,5
1000140c:	10c5883a 	add	r2,r2,r3
10001410:	10800304 	addi	r2,r2,12
10001414:	10800017 	ldw	r2,0(r2)
10001418:	10800058 	cmpnei	r2,r2,1
1000141c:	1000641e 	bne	r2,zero,100015b0 <slicingEngine+0x3cc>
			{
				// let's grab the vegetable coordinates
				int veggieX = veggieObject[i].xPosition;
10001420:	00840074 	movhi	r2,4097
10001424:	10928104 	addi	r2,r2,18948
10001428:	e0fffd17 	ldw	r3,-12(fp)
1000142c:	1806917a 	slli	r3,r3,5
10001430:	10c5883a 	add	r2,r2,r3
10001434:	10800017 	ldw	r2,0(r2)
10001438:	e0bffe15 	stw	r2,-8(fp)
				int veggieY = veggieObject[i].yPosition;
1000143c:	00840074 	movhi	r2,4097
10001440:	10928104 	addi	r2,r2,18948
10001444:	e0fffd17 	ldw	r3,-12(fp)
10001448:	1806917a 	slli	r3,r3,5
1000144c:	10c5883a 	add	r2,r2,r3
10001450:	10800104 	addi	r2,r2,4
10001454:	10800017 	ldw	r2,0(r2)
10001458:	e0bfff15 	stw	r2,-4(fp)
					collideX = 64;
					collideY = 64;
				}
*/
				// now let's check collision
				if(((veggieX)<xCursor)&&((veggieX+75)>xCursor)&&((veggieY-60)<yCursor)&&((veggieY+15)>yCursor))
1000145c:	e0fffe17 	ldw	r3,-8(fp)
10001460:	d0a6ce17 	ldw	r2,-25800(gp)
10001464:	1880522e 	bgeu	r3,r2,100015b0 <slicingEngine+0x3cc>
10001468:	e0bffe17 	ldw	r2,-8(fp)
1000146c:	108012c4 	addi	r2,r2,75
10001470:	1007883a 	mov	r3,r2
10001474:	d0a6ce17 	ldw	r2,-25800(gp)
10001478:	10c04d2e 	bgeu	r2,r3,100015b0 <slicingEngine+0x3cc>
1000147c:	e0bfff17 	ldw	r2,-4(fp)
10001480:	10bff104 	addi	r2,r2,-60
10001484:	1007883a 	mov	r3,r2
10001488:	d0a6cd17 	ldw	r2,-25804(gp)
1000148c:	1880482e 	bgeu	r3,r2,100015b0 <slicingEngine+0x3cc>
10001490:	e0bfff17 	ldw	r2,-4(fp)
10001494:	108003c4 	addi	r2,r2,15
10001498:	1007883a 	mov	r3,r2
1000149c:	d0a6cd17 	ldw	r2,-25804(gp)
100014a0:	10c0432e 	bgeu	r2,r3,100015b0 <slicingEngine+0x3cc>
				{
					// this means we are in the 'hitbox'!! kill the fruit!
					veggieObject[i].objectState = 2;
100014a4:	00840074 	movhi	r2,4097
100014a8:	10928104 	addi	r2,r2,18948
100014ac:	e0fffd17 	ldw	r3,-12(fp)
100014b0:	1806917a 	slli	r3,r3,5
100014b4:	10c5883a 	add	r2,r2,r3
100014b8:	10800304 	addi	r2,r2,12
100014bc:	00c00084 	movi	r3,2
100014c0:	10c00015 	stw	r3,0(r2)

					if(i<14)
100014c4:	e0bffd17 	ldw	r2,-12(fp)
100014c8:	10800388 	cmpgei	r2,r2,14
100014cc:	10001b1e 	bne	r2,zero,1000153c <slicingEngine+0x358>
					{
						comboFruit = comboFruit + 1;
100014d0:	d0a6d917 	ldw	r2,-25756(gp)
100014d4:	10800044 	addi	r2,r2,1
100014d8:	d0a6d915 	stw	r2,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition + 2*comboFruit;
100014dc:	00840074 	movhi	r2,4097
100014e0:	10928104 	addi	r2,r2,18948
100014e4:	10c00017 	ldw	r3,0(r2)
100014e8:	d0a6d917 	ldw	r2,-25756(gp)
100014ec:	1085883a 	add	r2,r2,r2
100014f0:	1887883a 	add	r3,r3,r2
100014f4:	00840074 	movhi	r2,4097
100014f8:	10928104 	addi	r2,r2,18948
100014fc:	10c00015 	stw	r3,0(r2)
						printf(" increased score to %d! \n", veggieObject[0].xPosition);
10001500:	00840074 	movhi	r2,4097
10001504:	10928104 	addi	r2,r2,18948
10001508:	10800017 	ldw	r2,0(r2)
1000150c:	01040074 	movhi	r4,4097
10001510:	21040504 	addi	r4,r4,4116
10001514:	100b883a 	mov	r5,r2
10001518:	0003e900 	call	10003e90 <printf>
						printf("lives still at %d! \n", veggieObject[0].objectType);
1000151c:	00840074 	movhi	r2,4097
10001520:	10928104 	addi	r2,r2,18948
10001524:	10800217 	ldw	r2,8(r2)
10001528:	01040074 	movhi	r4,4097
1000152c:	21040c04 	addi	r4,r4,4144
10001530:	100b883a 	mov	r5,r2
10001534:	0003e900 	call	10003e90 <printf>
10001538:	00001d06 	br	100015b0 <slicingEngine+0x3cc>
					}
					else	// ITS A BOMB!!! OMGOGMGOMGG!!
					{
						veggieObject[0].objectType = veggieObject[0].objectType-1;
1000153c:	00840074 	movhi	r2,4097
10001540:	10928104 	addi	r2,r2,18948
10001544:	10800217 	ldw	r2,8(r2)
10001548:	10ffffc4 	addi	r3,r2,-1
1000154c:	00840074 	movhi	r2,4097
10001550:	10928104 	addi	r2,r2,18948
10001554:	10c00215 	stw	r3,8(r2)
						comboFruit = 0;
10001558:	d026d915 	stw	zero,-25756(gp)
						veggieObject[0].xPosition = veggieObject[0].xPosition - 25;
1000155c:	00840074 	movhi	r2,4097
10001560:	10928104 	addi	r2,r2,18948
10001564:	10800017 	ldw	r2,0(r2)
10001568:	10fff9c4 	addi	r3,r2,-25
1000156c:	00840074 	movhi	r2,4097
10001570:	10928104 	addi	r2,r2,18948
10001574:	10c00015 	stw	r3,0(r2)
						printf("hit a bomb! scored decreased to %d! \n", veggieObject[0].xPosition);
10001578:	00840074 	movhi	r2,4097
1000157c:	10928104 	addi	r2,r2,18948
10001580:	10800017 	ldw	r2,0(r2)
10001584:	01040074 	movhi	r4,4097
10001588:	21041204 	addi	r4,r4,4168
1000158c:	100b883a 	mov	r5,r2
10001590:	0003e900 	call	10003e90 <printf>
						printf("also, lives decreased to %d! \n", veggieObject[0].objectType);
10001594:	00840074 	movhi	r2,4097
10001598:	10928104 	addi	r2,r2,18948
1000159c:	10800217 	ldw	r2,8(r2)
100015a0:	01040074 	movhi	r4,4097
100015a4:	21041c04 	addi	r4,r4,4208
100015a8:	100b883a 	mov	r5,r2
100015ac:	0003e900 	call	10003e90 <printf>
		}
	}
	else	// we can cut!
	{
		int i;
		for(i=1; i<10; i++)	// let's go through our objects and see which ones collide
100015b0:	e0bffd17 	ldw	r2,-12(fp)
100015b4:	10800044 	addi	r2,r2,1
100015b8:	e0bffd15 	stw	r2,-12(fp)
100015bc:	e0bffd17 	ldw	r2,-12(fp)
100015c0:	10800290 	cmplti	r2,r2,10
100015c4:	103f8d1e 	bne	r2,zero,100013fc <__alt_data_end+0xf80013fc>
					}
				}
			}
		}
	}
	return;
100015c8:	0001883a 	nop
}
100015cc:	e037883a 	mov	sp,fp
100015d0:	dfc00117 	ldw	ra,4(sp)
100015d4:	df000017 	ldw	fp,0(sp)
100015d8:	dec00204 	addi	sp,sp,8
100015dc:	f800283a 	ret

100015e0 <disintegrateEngine>:

void disintegrateEngine()
{
100015e0:	defffe04 	addi	sp,sp,-8
100015e4:	df000115 	stw	fp,4(sp)
100015e8:	df000104 	addi	fp,sp,4
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
100015ec:	00800044 	movi	r2,1
100015f0:	e0bfff15 	stw	r2,-4(fp)
100015f4:	00004906 	br	1000171c <disintegrateEngine+0x13c>
	{
		if(veggieObject[i].objectState == 2) // just been cut
100015f8:	00840074 	movhi	r2,4097
100015fc:	10928104 	addi	r2,r2,18948
10001600:	e0ffff17 	ldw	r3,-4(fp)
10001604:	1806917a 	slli	r3,r3,5
10001608:	10c5883a 	add	r2,r2,r3
1000160c:	10800304 	addi	r2,r2,12
10001610:	10800017 	ldw	r2,0(r2)
10001614:	10800098 	cmpnei	r2,r2,2
10001618:	1000091e 	bne	r2,zero,10001640 <disintegrateEngine+0x60>
		{
			veggieObject[i].objectState = 3;
1000161c:	00840074 	movhi	r2,4097
10001620:	10928104 	addi	r2,r2,18948
10001624:	e0ffff17 	ldw	r3,-4(fp)
10001628:	1806917a 	slli	r3,r3,5
1000162c:	10c5883a 	add	r2,r2,r3
10001630:	10800304 	addi	r2,r2,12
10001634:	00c000c4 	movi	r3,3
10001638:	10c00015 	stw	r3,0(r2)
1000163c:	00003406 	br	10001710 <disintegrateEngine+0x130>
		}
		else if(veggieObject[i].objectState == 3) // almost dedded
10001640:	00840074 	movhi	r2,4097
10001644:	10928104 	addi	r2,r2,18948
10001648:	e0ffff17 	ldw	r3,-4(fp)
1000164c:	1806917a 	slli	r3,r3,5
10001650:	10c5883a 	add	r2,r2,r3
10001654:	10800304 	addi	r2,r2,12
10001658:	10800017 	ldw	r2,0(r2)
1000165c:	108000d8 	cmpnei	r2,r2,3
10001660:	10002b1e 	bne	r2,zero,10001710 <disintegrateEngine+0x130>
		{
			veggieObject[i].xPosition = 0;		// gone!
10001664:	00840074 	movhi	r2,4097
10001668:	10928104 	addi	r2,r2,18948
1000166c:	e0ffff17 	ldw	r3,-4(fp)
10001670:	1806917a 	slli	r3,r3,5
10001674:	10c5883a 	add	r2,r2,r3
10001678:	10000015 	stw	zero,0(r2)
			veggieObject[i].yPosition = 0;
1000167c:	00840074 	movhi	r2,4097
10001680:	10928104 	addi	r2,r2,18948
10001684:	e0ffff17 	ldw	r3,-4(fp)
10001688:	1806917a 	slli	r3,r3,5
1000168c:	10c5883a 	add	r2,r2,r3
10001690:	10800104 	addi	r2,r2,4
10001694:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = 0;
10001698:	00840074 	movhi	r2,4097
1000169c:	10928104 	addi	r2,r2,18948
100016a0:	e0ffff17 	ldw	r3,-4(fp)
100016a4:	1806917a 	slli	r3,r3,5
100016a8:	10c5883a 	add	r2,r2,r3
100016ac:	10800204 	addi	r2,r2,8
100016b0:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectState = 0;
100016b4:	00840074 	movhi	r2,4097
100016b8:	10928104 	addi	r2,r2,18948
100016bc:	e0ffff17 	ldw	r3,-4(fp)
100016c0:	1806917a 	slli	r3,r3,5
100016c4:	10c5883a 	add	r2,r2,r3
100016c8:	10800304 	addi	r2,r2,12
100016cc:	10000015 	stw	zero,0(r2)
			veggieObject[i].xVelocity = 0;
100016d0:	00840074 	movhi	r2,4097
100016d4:	10928104 	addi	r2,r2,18948
100016d8:	e0ffff17 	ldw	r3,-4(fp)
100016dc:	1806917a 	slli	r3,r3,5
100016e0:	10c5883a 	add	r2,r2,r3
100016e4:	10800404 	addi	r2,r2,16
100016e8:	10000015 	stw	zero,0(r2)
100016ec:	10000115 	stw	zero,4(r2)
			veggieObject[i].yVelocity = 0;
100016f0:	00840074 	movhi	r2,4097
100016f4:	10928104 	addi	r2,r2,18948
100016f8:	e0ffff17 	ldw	r3,-4(fp)
100016fc:	1806917a 	slli	r3,r3,5
10001700:	10c5883a 	add	r2,r2,r3
10001704:	10800604 	addi	r2,r2,24
10001708:	10000015 	stw	zero,0(r2)
1000170c:	10000115 	stw	zero,4(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<10; i++)	// let's go through our objects
10001710:	e0bfff17 	ldw	r2,-4(fp)
10001714:	10800044 	addi	r2,r2,1
10001718:	e0bfff15 	stw	r2,-4(fp)
1000171c:	e0bfff17 	ldw	r2,-4(fp)
10001720:	10800290 	cmplti	r2,r2,10
10001724:	103fb41e 	bne	r2,zero,100015f8 <__alt_data_end+0xf80015f8>
			veggieObject[i].objectState = 0;
			veggieObject[i].xVelocity = 0;
			veggieObject[i].yVelocity = 0;
		}
	}
}
10001728:	e037883a 	mov	sp,fp
1000172c:	df000017 	ldw	fp,0(sp)
10001730:	dec00104 	addi	sp,sp,4
10001734:	f800283a 	ret

10001738 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10001738:	defff904 	addi	sp,sp,-28
1000173c:	dfc00615 	stw	ra,24(sp)
10001740:	df000515 	stw	fp,20(sp)
10001744:	df000504 	addi	fp,sp,20
	// start putting in our xcoords
	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10001748:	00801c04 	movi	r2,112
1000174c:	00c00044 	movi	r3,1
10001750:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].xPosition;
10001754:	00c04004 	movi	r3,256
10001758:	00840074 	movhi	r2,4097
1000175c:	10928104 	addi	r2,r2,18948
10001760:	10800017 	ldw	r2,0(r2)
10001764:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].xPosition;
10001768:	00c03c04 	movi	r3,240
1000176c:	00840074 	movhi	r2,4097
10001770:	10928104 	addi	r2,r2,18948
10001774:	10800817 	ldw	r2,32(r2)
10001778:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].xPosition;
1000177c:	00c03804 	movi	r3,224
10001780:	00840074 	movhi	r2,4097
10001784:	10928104 	addi	r2,r2,18948
10001788:	10801017 	ldw	r2,64(r2)
1000178c:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].xPosition;
10001790:	00c03404 	movi	r3,208
10001794:	00840074 	movhi	r2,4097
10001798:	10928104 	addi	r2,r2,18948
1000179c:	10801817 	ldw	r2,96(r2)
100017a0:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].xPosition;
100017a4:	00c03004 	movi	r3,192
100017a8:	00840074 	movhi	r2,4097
100017ac:	10928104 	addi	r2,r2,18948
100017b0:	10802017 	ldw	r2,128(r2)
100017b4:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].xPosition;
100017b8:	00c02c04 	movi	r3,176
100017bc:	00840074 	movhi	r2,4097
100017c0:	10928104 	addi	r2,r2,18948
100017c4:	10802817 	ldw	r2,160(r2)
100017c8:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].xPosition;
100017cc:	00c02804 	movi	r3,160
100017d0:	00840074 	movhi	r2,4097
100017d4:	10928104 	addi	r2,r2,18948
100017d8:	10803017 	ldw	r2,192(r2)
100017dc:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].xPosition;
100017e0:	00c01804 	movi	r3,96
100017e4:	00840074 	movhi	r2,4097
100017e8:	10928104 	addi	r2,r2,18948
100017ec:	10803817 	ldw	r2,224(r2)
100017f0:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].xPosition;
100017f4:	00c02404 	movi	r3,144
100017f8:	00840074 	movhi	r2,4097
100017fc:	10928104 	addi	r2,r2,18948
10001800:	10804017 	ldw	r2,256(r2)
10001804:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].xPosition;
10001808:	00c02004 	movi	r3,128
1000180c:	00840074 	movhi	r2,4097
10001810:	10928104 	addi	r2,r2,18948
10001814:	10804817 	ldw	r2,288(r2)
10001818:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].xPosition;
	*to_hw_port13 = veggieObject[13].xPosition;
	*to_hw_port14 = veggieObject[14].xPosition;
	*to_hw_port15 = veggieObject[15].xPosition;
*/	// wait for response
	while(*to_sw_sig != 1);
1000181c:	0001883a 	nop
10001820:	00801404 	movi	r2,80
10001824:	10800003 	ldbu	r2,0(r2)
10001828:	10803fcc 	andi	r2,r2,255
1000182c:	1080201c 	xori	r2,r2,128
10001830:	10bfe004 	addi	r2,r2,-128
10001834:	10800058 	cmpnei	r2,r2,1
10001838:	103ff91e 	bne	r2,zero,10001820 <__alt_data_end+0xf8001820>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
1000183c:	00801c04 	movi	r2,112
10001840:	00c00084 	movi	r3,2
10001844:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].yPosition;
10001848:	00c04004 	movi	r3,256
1000184c:	00840074 	movhi	r2,4097
10001850:	10928104 	addi	r2,r2,18948
10001854:	10800117 	ldw	r2,4(r2)
10001858:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].yPosition;
1000185c:	00c03c04 	movi	r3,240
10001860:	00840074 	movhi	r2,4097
10001864:	10928104 	addi	r2,r2,18948
10001868:	10800917 	ldw	r2,36(r2)
1000186c:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].yPosition;
10001870:	00c03804 	movi	r3,224
10001874:	00840074 	movhi	r2,4097
10001878:	10928104 	addi	r2,r2,18948
1000187c:	10801117 	ldw	r2,68(r2)
10001880:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].yPosition;
10001884:	00c03404 	movi	r3,208
10001888:	00840074 	movhi	r2,4097
1000188c:	10928104 	addi	r2,r2,18948
10001890:	10801917 	ldw	r2,100(r2)
10001894:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].yPosition;
10001898:	00c03004 	movi	r3,192
1000189c:	00840074 	movhi	r2,4097
100018a0:	10928104 	addi	r2,r2,18948
100018a4:	10802117 	ldw	r2,132(r2)
100018a8:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].yPosition;
100018ac:	00c02c04 	movi	r3,176
100018b0:	00840074 	movhi	r2,4097
100018b4:	10928104 	addi	r2,r2,18948
100018b8:	10802917 	ldw	r2,164(r2)
100018bc:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].yPosition;
100018c0:	00c02804 	movi	r3,160
100018c4:	00840074 	movhi	r2,4097
100018c8:	10928104 	addi	r2,r2,18948
100018cc:	10803117 	ldw	r2,196(r2)
100018d0:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].yPosition;
100018d4:	00c01804 	movi	r3,96
100018d8:	00840074 	movhi	r2,4097
100018dc:	10928104 	addi	r2,r2,18948
100018e0:	10803917 	ldw	r2,228(r2)
100018e4:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].yPosition;
100018e8:	00c02404 	movi	r3,144
100018ec:	00840074 	movhi	r2,4097
100018f0:	10928104 	addi	r2,r2,18948
100018f4:	10804117 	ldw	r2,260(r2)
100018f8:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].yPosition;
100018fc:	00c02004 	movi	r3,128
10001900:	00840074 	movhi	r2,4097
10001904:	10928104 	addi	r2,r2,18948
10001908:	10804917 	ldw	r2,292(r2)
1000190c:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].yPosition;
	*to_hw_port13 = veggieObject[13].yPosition;
	*to_hw_port14 = veggieObject[14].yPosition;
	*to_hw_port15 = veggieObject[15].yPosition;
*/	// wait for confirmation
	while(*to_sw_sig != 2);
10001910:	0001883a 	nop
10001914:	00801404 	movi	r2,80
10001918:	10800003 	ldbu	r2,0(r2)
1000191c:	10803fcc 	andi	r2,r2,255
10001920:	1080201c 	xori	r2,r2,128
10001924:	10bfe004 	addi	r2,r2,-128
10001928:	10800098 	cmpnei	r2,r2,2
1000192c:	103ff91e 	bne	r2,zero,10001914 <__alt_data_end+0xf8001914>

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage = messagePackager(veggieObject[0]);
10001930:	00840074 	movhi	r2,4097
10001934:	10928104 	addi	r2,r2,18948
10001938:	10c00417 	ldw	r3,16(r2)
1000193c:	d8c00015 	stw	r3,0(sp)
10001940:	10c00517 	ldw	r3,20(r2)
10001944:	d8c00115 	stw	r3,4(sp)
10001948:	10c00617 	ldw	r3,24(r2)
1000194c:	d8c00215 	stw	r3,8(sp)
10001950:	10c00717 	ldw	r3,28(r2)
10001954:	d8c00315 	stw	r3,12(sp)
10001958:	11000017 	ldw	r4,0(r2)
1000195c:	11400117 	ldw	r5,4(r2)
10001960:	11800217 	ldw	r6,8(r2)
10001964:	11c00317 	ldw	r7,12(r2)
10001968:	0001a7c0 	call	10001a7c <messagePackager>
1000196c:	e0bfff15 	stw	r2,-4(fp)
	// printf("fpgamessage is %lu   \n", FPGAmessage);

	*to_hw_sig = 3;		// our final sending
10001970:	00801c04 	movi	r2,112
10001974:	00c000c4 	movi	r3,3
10001978:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage;
1000197c:	00804004 	movi	r2,256
10001980:	e0ffff17 	ldw	r3,-4(fp)
10001984:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = veggieObject[1].objectState;
10001988:	00c03c04 	movi	r3,240
1000198c:	00840074 	movhi	r2,4097
10001990:	10928104 	addi	r2,r2,18948
10001994:	10800b17 	ldw	r2,44(r2)
10001998:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].objectState;
1000199c:	00c03804 	movi	r3,224
100019a0:	00840074 	movhi	r2,4097
100019a4:	10928104 	addi	r2,r2,18948
100019a8:	10801317 	ldw	r2,76(r2)
100019ac:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].objectState;
100019b0:	00c03404 	movi	r3,208
100019b4:	00840074 	movhi	r2,4097
100019b8:	10928104 	addi	r2,r2,18948
100019bc:	10801b17 	ldw	r2,108(r2)
100019c0:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].objectState;
100019c4:	00c03004 	movi	r3,192
100019c8:	00840074 	movhi	r2,4097
100019cc:	10928104 	addi	r2,r2,18948
100019d0:	10802317 	ldw	r2,140(r2)
100019d4:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].objectState;
100019d8:	00c02c04 	movi	r3,176
100019dc:	00840074 	movhi	r2,4097
100019e0:	10928104 	addi	r2,r2,18948
100019e4:	10802b17 	ldw	r2,172(r2)
100019e8:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].objectState;
100019ec:	00c02804 	movi	r3,160
100019f0:	00840074 	movhi	r2,4097
100019f4:	10928104 	addi	r2,r2,18948
100019f8:	10803317 	ldw	r2,204(r2)
100019fc:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].objectState;
10001a00:	00c01804 	movi	r3,96
10001a04:	00840074 	movhi	r2,4097
10001a08:	10928104 	addi	r2,r2,18948
10001a0c:	10803b17 	ldw	r2,236(r2)
10001a10:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].objectState;
10001a14:	00c02404 	movi	r3,144
10001a18:	00840074 	movhi	r2,4097
10001a1c:	10928104 	addi	r2,r2,18948
10001a20:	10804317 	ldw	r2,268(r2)
10001a24:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].objectState;
10001a28:	00c02004 	movi	r3,128
10001a2c:	00840074 	movhi	r2,4097
10001a30:	10928104 	addi	r2,r2,18948
10001a34:	10804b17 	ldw	r2,300(r2)
10001a38:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].objectState;
	*to_hw_port14 = veggieObject[14].objectState;
	*to_hw_port15 = veggieObject[15].objectState;
*/
	// last confirmation
	while(*to_sw_sig != 3);
10001a3c:	0001883a 	nop
10001a40:	00801404 	movi	r2,80
10001a44:	10800003 	ldbu	r2,0(r2)
10001a48:	10803fcc 	andi	r2,r2,255
10001a4c:	1080201c 	xori	r2,r2,128
10001a50:	10bfe004 	addi	r2,r2,-128
10001a54:	108000d8 	cmpnei	r2,r2,3
10001a58:	103ff91e 	bne	r2,zero,10001a40 <__alt_data_end+0xf8001a40>
	*to_hw_sig = 0;
10001a5c:	00801c04 	movi	r2,112
10001a60:	10000005 	stb	zero,0(r2)

	return;
10001a64:	0001883a 	nop
}
10001a68:	e037883a 	mov	sp,fp
10001a6c:	dfc00117 	ldw	ra,4(sp)
10001a70:	df000017 	ldw	fp,0(sp)
10001a74:	dec00204 	addi	sp,sp,8
10001a78:	f800283a 	ret

10001a7c <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10001a7c:	defff404 	addi	sp,sp,-48
10001a80:	dfc00715 	stw	ra,28(sp)
10001a84:	df000615 	stw	fp,24(sp)
10001a88:	dc400515 	stw	r17,20(sp)
10001a8c:	dc000415 	stw	r16,16(sp)
10001a90:	df000604 	addi	fp,sp,24
10001a94:	e1000215 	stw	r4,8(fp)
10001a98:	e1400315 	stw	r5,12(fp)
10001a9c:	e1800415 	stw	r6,16(fp)
10001aa0:	e1c00515 	stw	r7,20(fp)

	// make our specific variables
	unsigned long tempType, tempState;

	// grab our stuff from the struct
	tempType = specifiedObject.objectType;
10001aa4:	e0800417 	ldw	r2,16(fp)
10001aa8:	e0bffa15 	stw	r2,-24(fp)
	tempState = specifiedObject.objectState;
10001aac:	e0800517 	ldw	r2,20(fp)
10001ab0:	e0bffb15 	stw	r2,-20(fp)

	// and convert stuff to binary!
	tempType = convertDecimalToBinary(tempType);
10001ab4:	e13ffa17 	ldw	r4,-24(fp)
10001ab8:	0001c3c0 	call	10001c3c <convertDecimalToBinary>
10001abc:	e0bffa15 	stw	r2,-24(fp)
	tempState = convertDecimalToBinary(tempState);
10001ac0:	e13ffb17 	ldw	r4,-20(fp)
10001ac4:	0001c3c0 	call	10001c3c <convertDecimalToBinary>
10001ac8:	e0bffb15 	stw	r2,-20(fp)
//	printf("tempY: %llu   ", tempY);
//	printf("tempType: %lu   ", tempType);
//	printf("tempState: %lu   \n", tempState);

	// now we append everything together!
	tempBinary = tempState + tempType*1000;
10001acc:	e13ffa17 	ldw	r4,-24(fp)
10001ad0:	0140fa04 	movi	r5,1000
10001ad4:	0002b140 	call	10002b14 <__mulsi3>
10001ad8:	1007883a 	mov	r3,r2
10001adc:	e0bffb17 	ldw	r2,-20(fp)
10001ae0:	1885883a 	add	r2,r3,r2
10001ae4:	e0bffc15 	stw	r2,-16(fp)
//		printf("tempBinary: %lu   ", tempBinary);

	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
10001ae8:	e0bffc17 	ldw	r2,-16(fp)
10001aec:	1021883a 	mov	r16,r2
10001af0:	0023883a 	mov	r17,zero
10001af4:	8009883a 	mov	r4,r16
10001af8:	880b883a 	mov	r5,r17
10001afc:	0001ca40 	call	10001ca4 <convertBinaryToDecimal>
10001b00:	e0bffd15 	stw	r2,-12(fp)

	// and return it!
	return tempDecimal;
10001b04:	e0bffd17 	ldw	r2,-12(fp)
}
10001b08:	e6fffe04 	addi	sp,fp,-8
10001b0c:	dfc00317 	ldw	ra,12(sp)
10001b10:	df000217 	ldw	fp,8(sp)
10001b14:	dc400117 	ldw	r17,4(sp)
10001b18:	dc000017 	ldw	r16,0(sp)
10001b1c:	dec00804 	addi	sp,sp,32
10001b20:	f800283a 	ret

10001b24 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001b24:	defff704 	addi	sp,sp,-36
10001b28:	dfc00815 	stw	ra,32(sp)
10001b2c:	df000715 	stw	fp,28(sp)
10001b30:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001b34:	00804404 	movi	r2,272
10001b38:	10800003 	ldbu	r2,0(r2)
10001b3c:	10803fcc 	andi	r2,r2,255
10001b40:	1080201c 	xori	r2,r2,128
10001b44:	10bfe004 	addi	r2,r2,-128
10001b48:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001b4c:	e13ff917 	ldw	r4,-28(fp)
10001b50:	0001c3c0 	call	10001c3c <convertDecimalToBinary>
10001b54:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001b58:	e03ffa15 	stw	zero,-24(fp)
10001b5c:	00001406 	br	10001bb0 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001b60:	e0bff917 	ldw	r2,-28(fp)
10001b64:	1009883a 	mov	r4,r2
10001b68:	01400284 	movi	r5,10
10001b6c:	0002b0c0 	call	10002b0c <__umodsi3>
10001b70:	1007883a 	mov	r3,r2
10001b74:	e0bffa17 	ldw	r2,-24(fp)
10001b78:	1085883a 	add	r2,r2,r2
10001b7c:	1085883a 	add	r2,r2,r2
10001b80:	e13ff904 	addi	r4,fp,-28
10001b84:	2085883a 	add	r2,r4,r2
10001b88:	10800204 	addi	r2,r2,8
10001b8c:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
10001b90:	e0bff917 	ldw	r2,-28(fp)
10001b94:	1009883a 	mov	r4,r2
10001b98:	01400284 	movi	r5,10
10001b9c:	0002b040 	call	10002b04 <__udivsi3>
10001ba0:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001ba4:	e0bffa17 	ldw	r2,-24(fp)
10001ba8:	10800044 	addi	r2,r2,1
10001bac:	e0bffa15 	stw	r2,-24(fp)
10001bb0:	e0bffa17 	ldw	r2,-24(fp)
10001bb4:	10800150 	cmplti	r2,r2,5
10001bb8:	103fe91e 	bne	r2,zero,10001b60 <__alt_data_end+0xf8001b60>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
10001bbc:	e0bffd17 	ldw	r2,-12(fp)
10001bc0:	d0a6d315 	stw	r2,-25780(gp)
	key2 = unpackaged[3];
10001bc4:	e0bffe17 	ldw	r2,-8(fp)
10001bc8:	d0a6d615 	stw	r2,-25768(gp)
	key3 = unpackaged[4];
10001bcc:	e0bfff17 	ldw	r2,-4(fp)
10001bd0:	d0a6d415 	stw	r2,-25776(gp)
	cursorStreak = unpackaged[0];
10001bd4:	e0bffb17 	ldw	r2,-20(fp)
10001bd8:	d0a6d015 	stw	r2,-25792(gp)
	cursorClicked = unpackaged[1];
10001bdc:	e0bffc17 	ldw	r2,-16(fp)
10001be0:	d0a6cf15 	stw	r2,-25796(gp)
	xCursor = *to_sw_port3;
10001be4:	00806004 	movi	r2,384
10001be8:	10800017 	ldw	r2,0(r2)
10001bec:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
10001bf0:	00805c04 	movi	r2,368
10001bf4:	10800017 	ldw	r2,0(r2)
10001bf8:	d0a6cd15 	stw	r2,-25804(gp)

	if(cursorStreak == 0)	// reset combo if cursor no longer streaking
10001bfc:	d0a6d017 	ldw	r2,-25792(gp)
10001c00:	1000011e 	bne	r2,zero,10001c08 <port2Unpackager+0xe4>
	{
		comboFruit = 0;
10001c04:	d026d915 	stw	zero,-25756(gp)
	}

	if(veggieObject[0].xPosition < 0)	// also don't let score go below zero
10001c08:	00840074 	movhi	r2,4097
10001c0c:	10928104 	addi	r2,r2,18948
10001c10:	10800017 	ldw	r2,0(r2)
10001c14:	1000030e 	bge	r2,zero,10001c24 <port2Unpackager+0x100>
	{
		veggieObject[0].xPosition = 0;
10001c18:	00840074 	movhi	r2,4097
10001c1c:	10928104 	addi	r2,r2,18948
10001c20:	10000015 	stw	zero,0(r2)
	}

	return;
10001c24:	0001883a 	nop
}
10001c28:	e037883a 	mov	sp,fp
10001c2c:	dfc00117 	ldw	ra,4(sp)
10001c30:	df000017 	ldw	fp,0(sp)
10001c34:	dec00204 	addi	sp,sp,8
10001c38:	f800283a 	ret

10001c3c <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001c3c:	defffc04 	addi	sp,sp,-16
10001c40:	dfc00315 	stw	ra,12(sp)
10001c44:	df000215 	stw	fp,8(sp)
10001c48:	dc000115 	stw	r16,4(sp)
10001c4c:	df000204 	addi	fp,sp,8
10001c50:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
10001c54:	e0bffe17 	ldw	r2,-8(fp)
10001c58:	1000021e 	bne	r2,zero,10001c64 <convertDecimalToBinary+0x28>
    {
        return 0;
10001c5c:	0005883a 	mov	r2,zero
10001c60:	00000a06 	br	10001c8c <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
10001c64:	e0bffe17 	ldw	r2,-8(fp)
10001c68:	1400004c 	andi	r16,r2,1
10001c6c:	e0bffe17 	ldw	r2,-8(fp)
10001c70:	1004d07a 	srli	r2,r2,1
10001c74:	1009883a 	mov	r4,r2
10001c78:	0001c3c0 	call	10001c3c <convertDecimalToBinary>
10001c7c:	1009883a 	mov	r4,r2
10001c80:	01400284 	movi	r5,10
10001c84:	0002b140 	call	10002b14 <__mulsi3>
10001c88:	8085883a 	add	r2,r16,r2
    }
}
10001c8c:	e6ffff04 	addi	sp,fp,-4
10001c90:	dfc00217 	ldw	ra,8(sp)
10001c94:	df000117 	ldw	fp,4(sp)
10001c98:	dc000017 	ldw	r16,0(sp)
10001c9c:	dec00304 	addi	sp,sp,12
10001ca0:	f800283a 	ret

10001ca4 <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
10001ca4:	defffa04 	addi	sp,sp,-24
10001ca8:	dfc00515 	stw	ra,20(sp)
10001cac:	df000415 	stw	fp,16(sp)
10001cb0:	df000404 	addi	fp,sp,16
10001cb4:	e13ffe15 	stw	r4,-8(fp)
10001cb8:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
10001cbc:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
10001cc0:	e03ffd15 	stw	zero,-12(fp)
10001cc4:	00002706 	br	10001d64 <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
10001cc8:	e0bffe17 	ldw	r2,-8(fp)
10001ccc:	e0ffff17 	ldw	r3,-4(fp)
10001cd0:	01c00284 	movi	r7,10
10001cd4:	0011883a 	mov	r8,zero
10001cd8:	1009883a 	mov	r4,r2
10001cdc:	180b883a 	mov	r5,r3
10001ce0:	380d883a 	mov	r6,r7
10001ce4:	400f883a 	mov	r7,r8
10001ce8:	00023cc0 	call	100023cc <__umoddi3>
10001cec:	1009883a 	mov	r4,r2
10001cf0:	180b883a 	mov	r5,r3
10001cf4:	2005883a 	mov	r2,r4
10001cf8:	2807883a 	mov	r3,r5
10001cfc:	11000058 	cmpnei	r4,r2,1
10001d00:	2000081e 	bne	r4,zero,10001d24 <convertBinaryToDecimal+0x80>
10001d04:	1800071e 	bne	r3,zero,10001d24 <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
10001d08:	00c00044 	movi	r3,1
10001d0c:	e0bffd17 	ldw	r2,-12(fp)
10001d10:	1884983a 	sll	r2,r3,r2
10001d14:	1007883a 	mov	r3,r2
10001d18:	e0bffc17 	ldw	r2,-16(fp)
10001d1c:	10c5883a 	add	r2,r2,r3
10001d20:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
10001d24:	e0bffe17 	ldw	r2,-8(fp)
10001d28:	e0ffff17 	ldw	r3,-4(fp)
10001d2c:	01c00284 	movi	r7,10
10001d30:	0011883a 	mov	r8,zero
10001d34:	1009883a 	mov	r4,r2
10001d38:	180b883a 	mov	r5,r3
10001d3c:	380d883a 	mov	r6,r7
10001d40:	400f883a 	mov	r7,r8
10001d44:	0001d8c0 	call	10001d8c <__udivdi3>
10001d48:	1009883a 	mov	r4,r2
10001d4c:	180b883a 	mov	r5,r3
10001d50:	e13ffe15 	stw	r4,-8(fp)
10001d54:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001d58:	e0bffd17 	ldw	r2,-12(fp)
10001d5c:	10800044 	addi	r2,r2,1
10001d60:	e0bffd15 	stw	r2,-12(fp)
10001d64:	e0bffe17 	ldw	r2,-8(fp)
10001d68:	e0ffff17 	ldw	r3,-4(fp)
10001d6c:	10c4b03a 	or	r2,r2,r3
10001d70:	103fd51e 	bne	r2,zero,10001cc8 <__alt_data_end+0xf8001cc8>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
10001d74:	e0bffc17 	ldw	r2,-16(fp)
}
10001d78:	e037883a 	mov	sp,fp
10001d7c:	dfc00117 	ldw	ra,4(sp)
10001d80:	df000017 	ldw	fp,0(sp)
10001d84:	dec00204 	addi	sp,sp,8
10001d88:	f800283a 	ret

10001d8c <__udivdi3>:
10001d8c:	defff504 	addi	sp,sp,-44
10001d90:	dcc00415 	stw	r19,16(sp)
10001d94:	dc000115 	stw	r16,4(sp)
10001d98:	dfc00a15 	stw	ra,40(sp)
10001d9c:	df000915 	stw	fp,36(sp)
10001da0:	ddc00815 	stw	r23,32(sp)
10001da4:	dd800715 	stw	r22,28(sp)
10001da8:	dd400615 	stw	r21,24(sp)
10001dac:	dd000515 	stw	r20,20(sp)
10001db0:	dc800315 	stw	r18,12(sp)
10001db4:	dc400215 	stw	r17,8(sp)
10001db8:	2027883a 	mov	r19,r4
10001dbc:	2821883a 	mov	r16,r5
10001dc0:	3800471e 	bne	r7,zero,10001ee0 <__udivdi3+0x154>
10001dc4:	3025883a 	mov	r18,r6
10001dc8:	2023883a 	mov	r17,r4
10001dcc:	2980592e 	bgeu	r5,r6,10001f34 <__udivdi3+0x1a8>
10001dd0:	00bfffd4 	movui	r2,65535
10001dd4:	2829883a 	mov	r20,r5
10001dd8:	1180b236 	bltu	r2,r6,100020a4 <__udivdi3+0x318>
10001ddc:	00803fc4 	movi	r2,255
10001de0:	1181622e 	bgeu	r2,r6,1000236c <__udivdi3+0x5e0>
10001de4:	00800204 	movi	r2,8
10001de8:	1007883a 	mov	r3,r2
10001dec:	3084d83a 	srl	r2,r6,r2
10001df0:	01040074 	movhi	r4,4097
10001df4:	21042404 	addi	r4,r4,4240
10001df8:	2085883a 	add	r2,r4,r2
10001dfc:	11000003 	ldbu	r4,0(r2)
10001e00:	20c9883a 	add	r4,r4,r3
10001e04:	00c00804 	movi	r3,32
10001e08:	1907c83a 	sub	r3,r3,r4
10001e0c:	18000526 	beq	r3,zero,10001e24 <__udivdi3+0x98>
10001e10:	80e0983a 	sll	r16,r16,r3
10001e14:	9908d83a 	srl	r4,r19,r4
10001e18:	30e4983a 	sll	r18,r6,r3
10001e1c:	98e2983a 	sll	r17,r19,r3
10001e20:	8128b03a 	or	r20,r16,r4
10001e24:	902ad43a 	srli	r21,r18,16
10001e28:	a009883a 	mov	r4,r20
10001e2c:	95bfffcc 	andi	r22,r18,65535
10001e30:	a80b883a 	mov	r5,r21
10001e34:	0002b0c0 	call	10002b0c <__umodsi3>
10001e38:	a009883a 	mov	r4,r20
10001e3c:	a80b883a 	mov	r5,r21
10001e40:	102f883a 	mov	r23,r2
10001e44:	0002b040 	call	10002b04 <__udivsi3>
10001e48:	1009883a 	mov	r4,r2
10001e4c:	b00b883a 	mov	r5,r22
10001e50:	1021883a 	mov	r16,r2
10001e54:	0002b140 	call	10002b14 <__mulsi3>
10001e58:	b82e943a 	slli	r23,r23,16
10001e5c:	8808d43a 	srli	r4,r17,16
10001e60:	b906b03a 	or	r3,r23,r4
10001e64:	1880052e 	bgeu	r3,r2,10001e7c <__udivdi3+0xf0>
10001e68:	1c87883a 	add	r3,r3,r18
10001e6c:	813fffc4 	addi	r4,r16,-1
10001e70:	1c800136 	bltu	r3,r18,10001e78 <__udivdi3+0xec>
10001e74:	18815236 	bltu	r3,r2,100023c0 <__udivdi3+0x634>
10001e78:	2021883a 	mov	r16,r4
10001e7c:	18a7c83a 	sub	r19,r3,r2
10001e80:	9809883a 	mov	r4,r19
10001e84:	a80b883a 	mov	r5,r21
10001e88:	0002b0c0 	call	10002b0c <__umodsi3>
10001e8c:	1029883a 	mov	r20,r2
10001e90:	9809883a 	mov	r4,r19
10001e94:	a80b883a 	mov	r5,r21
10001e98:	a028943a 	slli	r20,r20,16
10001e9c:	0002b040 	call	10002b04 <__udivsi3>
10001ea0:	1009883a 	mov	r4,r2
10001ea4:	b00b883a 	mov	r5,r22
10001ea8:	8c7fffcc 	andi	r17,r17,65535
10001eac:	1027883a 	mov	r19,r2
10001eb0:	a462b03a 	or	r17,r20,r17
10001eb4:	0002b140 	call	10002b14 <__mulsi3>
10001eb8:	8880052e 	bgeu	r17,r2,10001ed0 <__udivdi3+0x144>
10001ebc:	8ca3883a 	add	r17,r17,r18
10001ec0:	98ffffc4 	addi	r3,r19,-1
10001ec4:	8c811036 	bltu	r17,r18,10002308 <__udivdi3+0x57c>
10001ec8:	88810f2e 	bgeu	r17,r2,10002308 <__udivdi3+0x57c>
10001ecc:	9cffff84 	addi	r19,r19,-2
10001ed0:	8020943a 	slli	r16,r16,16
10001ed4:	0007883a 	mov	r3,zero
10001ed8:	9c04b03a 	or	r2,r19,r16
10001edc:	00006006 	br	10002060 <__udivdi3+0x2d4>
10001ee0:	29c05d36 	bltu	r5,r7,10002058 <__udivdi3+0x2cc>
10001ee4:	00bfffd4 	movui	r2,65535
10001ee8:	11c0692e 	bgeu	r2,r7,10002090 <__udivdi3+0x304>
10001eec:	00804034 	movhi	r2,256
10001ef0:	10bfffc4 	addi	r2,r2,-1
10001ef4:	11c10e2e 	bgeu	r2,r7,10002330 <__udivdi3+0x5a4>
10001ef8:	01400604 	movi	r5,24
10001efc:	2811883a 	mov	r8,r5
10001f00:	394ad83a 	srl	r5,r7,r5
10001f04:	00840074 	movhi	r2,4097
10001f08:	10842404 	addi	r2,r2,4240
10001f0c:	114b883a 	add	r5,r2,r5
10001f10:	29400003 	ldbu	r5,0(r5)
10001f14:	00c00804 	movi	r3,32
10001f18:	2a0b883a 	add	r5,r5,r8
10001f1c:	196fc83a 	sub	r23,r3,r5
10001f20:	b8006b1e 	bne	r23,zero,100020d0 <__udivdi3+0x344>
10001f24:	3c011436 	bltu	r7,r16,10002378 <__udivdi3+0x5ec>
10001f28:	9985403a 	cmpgeu	r2,r19,r6
10001f2c:	0007883a 	mov	r3,zero
10001f30:	00004b06 	br	10002060 <__udivdi3+0x2d4>
10001f34:	3000041e 	bne	r6,zero,10001f48 <__udivdi3+0x1bc>
10001f38:	01000044 	movi	r4,1
10001f3c:	000b883a 	mov	r5,zero
10001f40:	0002b040 	call	10002b04 <__udivsi3>
10001f44:	1025883a 	mov	r18,r2
10001f48:	00bfffd4 	movui	r2,65535
10001f4c:	14805b2e 	bgeu	r2,r18,100020bc <__udivdi3+0x330>
10001f50:	00804034 	movhi	r2,256
10001f54:	10bfffc4 	addi	r2,r2,-1
10001f58:	1480fe2e 	bgeu	r2,r18,10002354 <__udivdi3+0x5c8>
10001f5c:	00800604 	movi	r2,24
10001f60:	1007883a 	mov	r3,r2
10001f64:	9084d83a 	srl	r2,r18,r2
10001f68:	01040074 	movhi	r4,4097
10001f6c:	21042404 	addi	r4,r4,4240
10001f70:	2085883a 	add	r2,r4,r2
10001f74:	11800003 	ldbu	r6,0(r2)
10001f78:	01c00804 	movi	r7,32
10001f7c:	30c7883a 	add	r3,r6,r3
10001f80:	38cfc83a 	sub	r7,r7,r3
10001f84:	3800a71e 	bne	r7,zero,10002224 <__udivdi3+0x498>
10001f88:	9028d43a 	srli	r20,r18,16
10001f8c:	84a1c83a 	sub	r16,r16,r18
10001f90:	957fffcc 	andi	r21,r18,65535
10001f94:	00c00044 	movi	r3,1
10001f98:	8009883a 	mov	r4,r16
10001f9c:	a00b883a 	mov	r5,r20
10001fa0:	d8c00015 	stw	r3,0(sp)
10001fa4:	0002b0c0 	call	10002b0c <__umodsi3>
10001fa8:	8009883a 	mov	r4,r16
10001fac:	a00b883a 	mov	r5,r20
10001fb0:	102d883a 	mov	r22,r2
10001fb4:	0002b040 	call	10002b04 <__udivsi3>
10001fb8:	1009883a 	mov	r4,r2
10001fbc:	a80b883a 	mov	r5,r21
10001fc0:	1021883a 	mov	r16,r2
10001fc4:	0002b140 	call	10002b14 <__mulsi3>
10001fc8:	b02c943a 	slli	r22,r22,16
10001fcc:	880ed43a 	srli	r7,r17,16
10001fd0:	d8c00017 	ldw	r3,0(sp)
10001fd4:	b1ccb03a 	or	r6,r22,r7
10001fd8:	3080052e 	bgeu	r6,r2,10001ff0 <__udivdi3+0x264>
10001fdc:	348d883a 	add	r6,r6,r18
10001fe0:	813fffc4 	addi	r4,r16,-1
10001fe4:	34800136 	bltu	r6,r18,10001fec <__udivdi3+0x260>
10001fe8:	3080f236 	bltu	r6,r2,100023b4 <__udivdi3+0x628>
10001fec:	2021883a 	mov	r16,r4
10001ff0:	30a7c83a 	sub	r19,r6,r2
10001ff4:	9809883a 	mov	r4,r19
10001ff8:	a00b883a 	mov	r5,r20
10001ffc:	d8c00015 	stw	r3,0(sp)
10002000:	0002b0c0 	call	10002b0c <__umodsi3>
10002004:	102d883a 	mov	r22,r2
10002008:	9809883a 	mov	r4,r19
1000200c:	a00b883a 	mov	r5,r20
10002010:	b02c943a 	slli	r22,r22,16
10002014:	0002b040 	call	10002b04 <__udivsi3>
10002018:	1009883a 	mov	r4,r2
1000201c:	a80b883a 	mov	r5,r21
10002020:	8c7fffcc 	andi	r17,r17,65535
10002024:	1027883a 	mov	r19,r2
10002028:	b462b03a 	or	r17,r22,r17
1000202c:	0002b140 	call	10002b14 <__mulsi3>
10002030:	d8c00017 	ldw	r3,0(sp)
10002034:	8880052e 	bgeu	r17,r2,1000204c <__udivdi3+0x2c0>
10002038:	8ca3883a 	add	r17,r17,r18
1000203c:	993fffc4 	addi	r4,r19,-1
10002040:	8c80af36 	bltu	r17,r18,10002300 <__udivdi3+0x574>
10002044:	8880ae2e 	bgeu	r17,r2,10002300 <__udivdi3+0x574>
10002048:	9cffff84 	addi	r19,r19,-2
1000204c:	8020943a 	slli	r16,r16,16
10002050:	9c04b03a 	or	r2,r19,r16
10002054:	00000206 	br	10002060 <__udivdi3+0x2d4>
10002058:	0007883a 	mov	r3,zero
1000205c:	0005883a 	mov	r2,zero
10002060:	dfc00a17 	ldw	ra,40(sp)
10002064:	df000917 	ldw	fp,36(sp)
10002068:	ddc00817 	ldw	r23,32(sp)
1000206c:	dd800717 	ldw	r22,28(sp)
10002070:	dd400617 	ldw	r21,24(sp)
10002074:	dd000517 	ldw	r20,20(sp)
10002078:	dcc00417 	ldw	r19,16(sp)
1000207c:	dc800317 	ldw	r18,12(sp)
10002080:	dc400217 	ldw	r17,8(sp)
10002084:	dc000117 	ldw	r16,4(sp)
10002088:	dec00b04 	addi	sp,sp,44
1000208c:	f800283a 	ret
10002090:	00803fc4 	movi	r2,255
10002094:	11c0a92e 	bgeu	r2,r7,1000233c <__udivdi3+0x5b0>
10002098:	01400204 	movi	r5,8
1000209c:	2811883a 	mov	r8,r5
100020a0:	003f9706 	br	10001f00 <__alt_data_end+0xf8001f00>
100020a4:	00804034 	movhi	r2,256
100020a8:	10bfffc4 	addi	r2,r2,-1
100020ac:	1180a62e 	bgeu	r2,r6,10002348 <__udivdi3+0x5bc>
100020b0:	00800604 	movi	r2,24
100020b4:	1007883a 	mov	r3,r2
100020b8:	003f4c06 	br	10001dec <__alt_data_end+0xf8001dec>
100020bc:	00803fc4 	movi	r2,255
100020c0:	1480a72e 	bgeu	r2,r18,10002360 <__udivdi3+0x5d4>
100020c4:	00800204 	movi	r2,8
100020c8:	1007883a 	mov	r3,r2
100020cc:	003fa506 	br	10001f64 <__alt_data_end+0xf8001f64>
100020d0:	3178d83a 	srl	fp,r6,r5
100020d4:	3dce983a 	sll	r7,r7,r23
100020d8:	8168d83a 	srl	r20,r16,r5
100020dc:	9950d83a 	srl	r8,r19,r5
100020e0:	3f38b03a 	or	fp,r7,fp
100020e4:	e024d43a 	srli	r18,fp,16
100020e8:	85e0983a 	sll	r16,r16,r23
100020ec:	a009883a 	mov	r4,r20
100020f0:	900b883a 	mov	r5,r18
100020f4:	8220b03a 	or	r16,r16,r8
100020f8:	35ea983a 	sll	r21,r6,r23
100020fc:	0002b0c0 	call	10002b0c <__umodsi3>
10002100:	a009883a 	mov	r4,r20
10002104:	900b883a 	mov	r5,r18
10002108:	1023883a 	mov	r17,r2
1000210c:	e5bfffcc 	andi	r22,fp,65535
10002110:	0002b040 	call	10002b04 <__udivsi3>
10002114:	1009883a 	mov	r4,r2
10002118:	b00b883a 	mov	r5,r22
1000211c:	1029883a 	mov	r20,r2
10002120:	0002b140 	call	10002b14 <__mulsi3>
10002124:	8806943a 	slli	r3,r17,16
10002128:	8014d43a 	srli	r10,r16,16
1000212c:	1a92b03a 	or	r9,r3,r10
10002130:	4880042e 	bgeu	r9,r2,10002144 <__udivdi3+0x3b8>
10002134:	4f13883a 	add	r9,r9,fp
10002138:	a0ffffc4 	addi	r3,r20,-1
1000213c:	4f00952e 	bgeu	r9,fp,10002394 <__udivdi3+0x608>
10002140:	1829883a 	mov	r20,r3
10002144:	48a3c83a 	sub	r17,r9,r2
10002148:	8809883a 	mov	r4,r17
1000214c:	900b883a 	mov	r5,r18
10002150:	0002b0c0 	call	10002b0c <__umodsi3>
10002154:	8809883a 	mov	r4,r17
10002158:	900b883a 	mov	r5,r18
1000215c:	d8800015 	stw	r2,0(sp)
10002160:	0002b040 	call	10002b04 <__udivsi3>
10002164:	1009883a 	mov	r4,r2
10002168:	b00b883a 	mov	r5,r22
1000216c:	1023883a 	mov	r17,r2
10002170:	0002b140 	call	10002b14 <__mulsi3>
10002174:	d8c00017 	ldw	r3,0(sp)
10002178:	823fffcc 	andi	r8,r16,65535
1000217c:	1806943a 	slli	r3,r3,16
10002180:	1a20b03a 	or	r16,r3,r8
10002184:	8080042e 	bgeu	r16,r2,10002198 <__udivdi3+0x40c>
10002188:	8721883a 	add	r16,r16,fp
1000218c:	88ffffc4 	addi	r3,r17,-1
10002190:	87007c2e 	bgeu	r16,fp,10002384 <__udivdi3+0x5f8>
10002194:	1823883a 	mov	r17,r3
10002198:	a028943a 	slli	r20,r20,16
1000219c:	acbfffcc 	andi	r18,r21,65535
100021a0:	900b883a 	mov	r5,r18
100021a4:	8d28b03a 	or	r20,r17,r20
100021a8:	a022d43a 	srli	r17,r20,16
100021ac:	a5bfffcc 	andi	r22,r20,65535
100021b0:	b009883a 	mov	r4,r22
100021b4:	a82ad43a 	srli	r21,r21,16
100021b8:	80a1c83a 	sub	r16,r16,r2
100021bc:	0002b140 	call	10002b14 <__mulsi3>
100021c0:	8809883a 	mov	r4,r17
100021c4:	900b883a 	mov	r5,r18
100021c8:	1039883a 	mov	fp,r2
100021cc:	0002b140 	call	10002b14 <__mulsi3>
100021d0:	8809883a 	mov	r4,r17
100021d4:	a80b883a 	mov	r5,r21
100021d8:	1025883a 	mov	r18,r2
100021dc:	0002b140 	call	10002b14 <__mulsi3>
100021e0:	b009883a 	mov	r4,r22
100021e4:	a80b883a 	mov	r5,r21
100021e8:	1023883a 	mov	r17,r2
100021ec:	0002b140 	call	10002b14 <__mulsi3>
100021f0:	e006d43a 	srli	r3,fp,16
100021f4:	9085883a 	add	r2,r18,r2
100021f8:	10c7883a 	add	r3,r2,r3
100021fc:	1c80022e 	bgeu	r3,r18,10002208 <__udivdi3+0x47c>
10002200:	00800074 	movhi	r2,1
10002204:	88a3883a 	add	r17,r17,r2
10002208:	1808d43a 	srli	r4,r3,16
1000220c:	8909883a 	add	r4,r17,r4
10002210:	81004436 	bltu	r16,r4,10002324 <__udivdi3+0x598>
10002214:	81003e26 	beq	r16,r4,10002310 <__udivdi3+0x584>
10002218:	a005883a 	mov	r2,r20
1000221c:	0007883a 	mov	r3,zero
10002220:	003f8f06 	br	10002060 <__alt_data_end+0xf8002060>
10002224:	91e4983a 	sll	r18,r18,r7
10002228:	80eed83a 	srl	r23,r16,r3
1000222c:	81cc983a 	sll	r6,r16,r7
10002230:	9028d43a 	srli	r20,r18,16
10002234:	98c6d83a 	srl	r3,r19,r3
10002238:	b809883a 	mov	r4,r23
1000223c:	a00b883a 	mov	r5,r20
10002240:	30ecb03a 	or	r22,r6,r3
10002244:	99e2983a 	sll	r17,r19,r7
10002248:	0002b0c0 	call	10002b0c <__umodsi3>
1000224c:	b809883a 	mov	r4,r23
10002250:	a00b883a 	mov	r5,r20
10002254:	1021883a 	mov	r16,r2
10002258:	957fffcc 	andi	r21,r18,65535
1000225c:	0002b040 	call	10002b04 <__udivsi3>
10002260:	a80b883a 	mov	r5,r21
10002264:	1009883a 	mov	r4,r2
10002268:	102f883a 	mov	r23,r2
1000226c:	0002b140 	call	10002b14 <__mulsi3>
10002270:	8020943a 	slli	r16,r16,16
10002274:	b00ad43a 	srli	r5,r22,16
10002278:	814cb03a 	or	r6,r16,r5
1000227c:	3080062e 	bgeu	r6,r2,10002298 <__udivdi3+0x50c>
10002280:	348d883a 	add	r6,r6,r18
10002284:	b8ffffc4 	addi	r3,r23,-1
10002288:	34804836 	bltu	r6,r18,100023ac <__udivdi3+0x620>
1000228c:	3080472e 	bgeu	r6,r2,100023ac <__udivdi3+0x620>
10002290:	bdffff84 	addi	r23,r23,-2
10002294:	348d883a 	add	r6,r6,r18
10002298:	30a7c83a 	sub	r19,r6,r2
1000229c:	9809883a 	mov	r4,r19
100022a0:	a00b883a 	mov	r5,r20
100022a4:	0002b0c0 	call	10002b0c <__umodsi3>
100022a8:	9809883a 	mov	r4,r19
100022ac:	a00b883a 	mov	r5,r20
100022b0:	1039883a 	mov	fp,r2
100022b4:	0002b040 	call	10002b04 <__udivsi3>
100022b8:	1009883a 	mov	r4,r2
100022bc:	a80b883a 	mov	r5,r21
100022c0:	e038943a 	slli	fp,fp,16
100022c4:	1027883a 	mov	r19,r2
100022c8:	0002b140 	call	10002b14 <__mulsi3>
100022cc:	b1bfffcc 	andi	r6,r22,65535
100022d0:	e18cb03a 	or	r6,fp,r6
100022d4:	3080062e 	bgeu	r6,r2,100022f0 <__udivdi3+0x564>
100022d8:	348d883a 	add	r6,r6,r18
100022dc:	98ffffc4 	addi	r3,r19,-1
100022e0:	34803036 	bltu	r6,r18,100023a4 <__udivdi3+0x618>
100022e4:	30802f2e 	bgeu	r6,r2,100023a4 <__udivdi3+0x618>
100022e8:	9cffff84 	addi	r19,r19,-2
100022ec:	348d883a 	add	r6,r6,r18
100022f0:	b82e943a 	slli	r23,r23,16
100022f4:	30a1c83a 	sub	r16,r6,r2
100022f8:	9dc6b03a 	or	r3,r19,r23
100022fc:	003f2606 	br	10001f98 <__alt_data_end+0xf8001f98>
10002300:	2027883a 	mov	r19,r4
10002304:	003f5106 	br	1000204c <__alt_data_end+0xf800204c>
10002308:	1827883a 	mov	r19,r3
1000230c:	003ef006 	br	10001ed0 <__alt_data_end+0xf8001ed0>
10002310:	1808943a 	slli	r4,r3,16
10002314:	9dc6983a 	sll	r3,r19,r23
10002318:	e73fffcc 	andi	fp,fp,65535
1000231c:	2709883a 	add	r4,r4,fp
10002320:	193fbd2e 	bgeu	r3,r4,10002218 <__alt_data_end+0xf8002218>
10002324:	a0bfffc4 	addi	r2,r20,-1
10002328:	0007883a 	mov	r3,zero
1000232c:	003f4c06 	br	10002060 <__alt_data_end+0xf8002060>
10002330:	01400404 	movi	r5,16
10002334:	2811883a 	mov	r8,r5
10002338:	003ef106 	br	10001f00 <__alt_data_end+0xf8001f00>
1000233c:	000b883a 	mov	r5,zero
10002340:	0011883a 	mov	r8,zero
10002344:	003eee06 	br	10001f00 <__alt_data_end+0xf8001f00>
10002348:	00800404 	movi	r2,16
1000234c:	1007883a 	mov	r3,r2
10002350:	003ea606 	br	10001dec <__alt_data_end+0xf8001dec>
10002354:	00800404 	movi	r2,16
10002358:	1007883a 	mov	r3,r2
1000235c:	003f0106 	br	10001f64 <__alt_data_end+0xf8001f64>
10002360:	0005883a 	mov	r2,zero
10002364:	0007883a 	mov	r3,zero
10002368:	003efe06 	br	10001f64 <__alt_data_end+0xf8001f64>
1000236c:	0005883a 	mov	r2,zero
10002370:	0007883a 	mov	r3,zero
10002374:	003e9d06 	br	10001dec <__alt_data_end+0xf8001dec>
10002378:	0007883a 	mov	r3,zero
1000237c:	00800044 	movi	r2,1
10002380:	003f3706 	br	10002060 <__alt_data_end+0xf8002060>
10002384:	80bf832e 	bgeu	r16,r2,10002194 <__alt_data_end+0xf8002194>
10002388:	8c7fff84 	addi	r17,r17,-2
1000238c:	8721883a 	add	r16,r16,fp
10002390:	003f8106 	br	10002198 <__alt_data_end+0xf8002198>
10002394:	48bf6a2e 	bgeu	r9,r2,10002140 <__alt_data_end+0xf8002140>
10002398:	a53fff84 	addi	r20,r20,-2
1000239c:	4f13883a 	add	r9,r9,fp
100023a0:	003f6806 	br	10002144 <__alt_data_end+0xf8002144>
100023a4:	1827883a 	mov	r19,r3
100023a8:	003fd106 	br	100022f0 <__alt_data_end+0xf80022f0>
100023ac:	182f883a 	mov	r23,r3
100023b0:	003fb906 	br	10002298 <__alt_data_end+0xf8002298>
100023b4:	843fff84 	addi	r16,r16,-2
100023b8:	348d883a 	add	r6,r6,r18
100023bc:	003f0c06 	br	10001ff0 <__alt_data_end+0xf8001ff0>
100023c0:	843fff84 	addi	r16,r16,-2
100023c4:	1c87883a 	add	r3,r3,r18
100023c8:	003eac06 	br	10001e7c <__alt_data_end+0xf8001e7c>

100023cc <__umoddi3>:
100023cc:	defff404 	addi	sp,sp,-48
100023d0:	dd800815 	stw	r22,32(sp)
100023d4:	dc400315 	stw	r17,12(sp)
100023d8:	dc000215 	stw	r16,8(sp)
100023dc:	dfc00b15 	stw	ra,44(sp)
100023e0:	df000a15 	stw	fp,40(sp)
100023e4:	ddc00915 	stw	r23,36(sp)
100023e8:	dd400715 	stw	r21,28(sp)
100023ec:	dd000615 	stw	r20,24(sp)
100023f0:	dcc00515 	stw	r19,20(sp)
100023f4:	dc800415 	stw	r18,16(sp)
100023f8:	2021883a 	mov	r16,r4
100023fc:	2823883a 	mov	r17,r5
10002400:	282d883a 	mov	r22,r5
10002404:	38003c1e 	bne	r7,zero,100024f8 <__umoddi3+0x12c>
10002408:	3027883a 	mov	r19,r6
1000240c:	2029883a 	mov	r20,r4
10002410:	2980522e 	bgeu	r5,r6,1000255c <__umoddi3+0x190>
10002414:	00bfffd4 	movui	r2,65535
10002418:	1180a436 	bltu	r2,r6,100026ac <__umoddi3+0x2e0>
1000241c:	00803fc4 	movi	r2,255
10002420:	11815e2e 	bgeu	r2,r6,1000299c <__umoddi3+0x5d0>
10002424:	01400204 	movi	r5,8
10002428:	2805883a 	mov	r2,r5
1000242c:	314ad83a 	srl	r5,r6,r5
10002430:	00c40074 	movhi	r3,4097
10002434:	18c42404 	addi	r3,r3,4240
10002438:	194b883a 	add	r5,r3,r5
1000243c:	29000003 	ldbu	r4,0(r5)
10002440:	2089883a 	add	r4,r4,r2
10002444:	00800804 	movi	r2,32
10002448:	1105c83a 	sub	r2,r2,r4
1000244c:	10010c26 	beq	r2,zero,10002880 <__umoddi3+0x4b4>
10002450:	88a2983a 	sll	r17,r17,r2
10002454:	8108d83a 	srl	r4,r16,r4
10002458:	30a6983a 	sll	r19,r6,r2
1000245c:	80a8983a 	sll	r20,r16,r2
10002460:	1025883a 	mov	r18,r2
10002464:	892cb03a 	or	r22,r17,r4
10002468:	9822d43a 	srli	r17,r19,16
1000246c:	b009883a 	mov	r4,r22
10002470:	9d7fffcc 	andi	r21,r19,65535
10002474:	880b883a 	mov	r5,r17
10002478:	0002b0c0 	call	10002b0c <__umodsi3>
1000247c:	b009883a 	mov	r4,r22
10002480:	880b883a 	mov	r5,r17
10002484:	102f883a 	mov	r23,r2
10002488:	0002b040 	call	10002b04 <__udivsi3>
1000248c:	1009883a 	mov	r4,r2
10002490:	a80b883a 	mov	r5,r21
10002494:	0002b140 	call	10002b14 <__mulsi3>
10002498:	b82e943a 	slli	r23,r23,16
1000249c:	a008d43a 	srli	r4,r20,16
100024a0:	b906b03a 	or	r3,r23,r4
100024a4:	1880042e 	bgeu	r3,r2,100024b8 <__umoddi3+0xec>
100024a8:	1cc7883a 	add	r3,r3,r19
100024ac:	1cc00236 	bltu	r3,r19,100024b8 <__umoddi3+0xec>
100024b0:	1880012e 	bgeu	r3,r2,100024b8 <__umoddi3+0xec>
100024b4:	1cc7883a 	add	r3,r3,r19
100024b8:	18a1c83a 	sub	r16,r3,r2
100024bc:	8009883a 	mov	r4,r16
100024c0:	880b883a 	mov	r5,r17
100024c4:	0002b0c0 	call	10002b0c <__umodsi3>
100024c8:	8009883a 	mov	r4,r16
100024cc:	880b883a 	mov	r5,r17
100024d0:	102d883a 	mov	r22,r2
100024d4:	0002b040 	call	10002b04 <__udivsi3>
100024d8:	1009883a 	mov	r4,r2
100024dc:	a80b883a 	mov	r5,r21
100024e0:	b02c943a 	slli	r22,r22,16
100024e4:	0002b140 	call	10002b14 <__mulsi3>
100024e8:	a13fffcc 	andi	r4,r20,65535
100024ec:	b106b03a 	or	r3,r22,r4
100024f0:	1880572e 	bgeu	r3,r2,10002650 <__umoddi3+0x284>
100024f4:	00005206 	br	10002640 <__umoddi3+0x274>
100024f8:	29c05936 	bltu	r5,r7,10002660 <__umoddi3+0x294>
100024fc:	00bfffd4 	movui	r2,65535
10002500:	11c0652e 	bgeu	r2,r7,10002698 <__umoddi3+0x2cc>
10002504:	00804034 	movhi	r2,256
10002508:	10bfffc4 	addi	r2,r2,-1
1000250c:	11c1172e 	bgeu	r2,r7,1000296c <__umoddi3+0x5a0>
10002510:	01400604 	movi	r5,24
10002514:	282b883a 	mov	r21,r5
10002518:	394ad83a 	srl	r5,r7,r5
1000251c:	00c40074 	movhi	r3,4097
10002520:	18c42404 	addi	r3,r3,4240
10002524:	194b883a 	add	r5,r3,r5
10002528:	28800003 	ldbu	r2,0(r5)
1000252c:	00c00804 	movi	r3,32
10002530:	156b883a 	add	r21,r2,r21
10002534:	1d69c83a 	sub	r20,r3,r21
10002538:	a000671e 	bne	r20,zero,100026d8 <__umoddi3+0x30c>
1000253c:	3c400136 	bltu	r7,r17,10002544 <__umoddi3+0x178>
10002540:	81812336 	bltu	r16,r6,100029d0 <__umoddi3+0x604>
10002544:	8185c83a 	sub	r2,r16,r6
10002548:	89e3c83a 	sub	r17,r17,r7
1000254c:	8087803a 	cmpltu	r3,r16,r2
10002550:	88edc83a 	sub	r22,r17,r3
10002554:	b007883a 	mov	r3,r22
10002558:	00004306 	br	10002668 <__umoddi3+0x29c>
1000255c:	3000041e 	bne	r6,zero,10002570 <__umoddi3+0x1a4>
10002560:	01000044 	movi	r4,1
10002564:	000b883a 	mov	r5,zero
10002568:	0002b040 	call	10002b04 <__udivsi3>
1000256c:	1027883a 	mov	r19,r2
10002570:	00bfffd4 	movui	r2,65535
10002574:	14c0532e 	bgeu	r2,r19,100026c4 <__umoddi3+0x2f8>
10002578:	00804034 	movhi	r2,256
1000257c:	10bfffc4 	addi	r2,r2,-1
10002580:	14c1032e 	bgeu	r2,r19,10002990 <__umoddi3+0x5c4>
10002584:	00800604 	movi	r2,24
10002588:	1007883a 	mov	r3,r2
1000258c:	9884d83a 	srl	r2,r19,r2
10002590:	01040074 	movhi	r4,4097
10002594:	21042404 	addi	r4,r4,4240
10002598:	2085883a 	add	r2,r4,r2
1000259c:	11000003 	ldbu	r4,0(r2)
100025a0:	00800804 	movi	r2,32
100025a4:	20c7883a 	add	r3,r4,r3
100025a8:	10c5c83a 	sub	r2,r2,r3
100025ac:	1000b61e 	bne	r2,zero,10002888 <__umoddi3+0x4bc>
100025b0:	982ad43a 	srli	r21,r19,16
100025b4:	8ce3c83a 	sub	r17,r17,r19
100025b8:	9dbfffcc 	andi	r22,r19,65535
100025bc:	0025883a 	mov	r18,zero
100025c0:	8809883a 	mov	r4,r17
100025c4:	a80b883a 	mov	r5,r21
100025c8:	0002b0c0 	call	10002b0c <__umodsi3>
100025cc:	8809883a 	mov	r4,r17
100025d0:	a80b883a 	mov	r5,r21
100025d4:	102f883a 	mov	r23,r2
100025d8:	0002b040 	call	10002b04 <__udivsi3>
100025dc:	1009883a 	mov	r4,r2
100025e0:	b00b883a 	mov	r5,r22
100025e4:	0002b140 	call	10002b14 <__mulsi3>
100025e8:	b82e943a 	slli	r23,r23,16
100025ec:	a008d43a 	srli	r4,r20,16
100025f0:	b906b03a 	or	r3,r23,r4
100025f4:	1880032e 	bgeu	r3,r2,10002604 <__umoddi3+0x238>
100025f8:	1cc7883a 	add	r3,r3,r19
100025fc:	1cc00136 	bltu	r3,r19,10002604 <__umoddi3+0x238>
10002600:	1880f136 	bltu	r3,r2,100029c8 <__umoddi3+0x5fc>
10002604:	18a1c83a 	sub	r16,r3,r2
10002608:	8009883a 	mov	r4,r16
1000260c:	a80b883a 	mov	r5,r21
10002610:	0002b0c0 	call	10002b0c <__umodsi3>
10002614:	8009883a 	mov	r4,r16
10002618:	a80b883a 	mov	r5,r21
1000261c:	1023883a 	mov	r17,r2
10002620:	0002b040 	call	10002b04 <__udivsi3>
10002624:	1009883a 	mov	r4,r2
10002628:	b00b883a 	mov	r5,r22
1000262c:	8822943a 	slli	r17,r17,16
10002630:	0002b140 	call	10002b14 <__mulsi3>
10002634:	a13fffcc 	andi	r4,r20,65535
10002638:	8906b03a 	or	r3,r17,r4
1000263c:	1880042e 	bgeu	r3,r2,10002650 <__umoddi3+0x284>
10002640:	1cc7883a 	add	r3,r3,r19
10002644:	1cc00236 	bltu	r3,r19,10002650 <__umoddi3+0x284>
10002648:	1880012e 	bgeu	r3,r2,10002650 <__umoddi3+0x284>
1000264c:	1cc7883a 	add	r3,r3,r19
10002650:	1887c83a 	sub	r3,r3,r2
10002654:	1c84d83a 	srl	r2,r3,r18
10002658:	0007883a 	mov	r3,zero
1000265c:	00000206 	br	10002668 <__umoddi3+0x29c>
10002660:	2005883a 	mov	r2,r4
10002664:	2807883a 	mov	r3,r5
10002668:	dfc00b17 	ldw	ra,44(sp)
1000266c:	df000a17 	ldw	fp,40(sp)
10002670:	ddc00917 	ldw	r23,36(sp)
10002674:	dd800817 	ldw	r22,32(sp)
10002678:	dd400717 	ldw	r21,28(sp)
1000267c:	dd000617 	ldw	r20,24(sp)
10002680:	dcc00517 	ldw	r19,20(sp)
10002684:	dc800417 	ldw	r18,16(sp)
10002688:	dc400317 	ldw	r17,12(sp)
1000268c:	dc000217 	ldw	r16,8(sp)
10002690:	dec00c04 	addi	sp,sp,48
10002694:	f800283a 	ret
10002698:	00803fc4 	movi	r2,255
1000269c:	11c0b02e 	bgeu	r2,r7,10002960 <__umoddi3+0x594>
100026a0:	01400204 	movi	r5,8
100026a4:	282b883a 	mov	r21,r5
100026a8:	003f9b06 	br	10002518 <__alt_data_end+0xf8002518>
100026ac:	00804034 	movhi	r2,256
100026b0:	10bfffc4 	addi	r2,r2,-1
100026b4:	1180b02e 	bgeu	r2,r6,10002978 <__umoddi3+0x5ac>
100026b8:	01400604 	movi	r5,24
100026bc:	2805883a 	mov	r2,r5
100026c0:	003f5a06 	br	1000242c <__alt_data_end+0xf800242c>
100026c4:	00803fc4 	movi	r2,255
100026c8:	14c0ae2e 	bgeu	r2,r19,10002984 <__umoddi3+0x5b8>
100026cc:	00800204 	movi	r2,8
100026d0:	1007883a 	mov	r3,r2
100026d4:	003fad06 	br	1000258c <__alt_data_end+0xf800258c>
100026d8:	3d0a983a 	sll	r5,r7,r20
100026dc:	356cd83a 	srl	r22,r6,r21
100026e0:	8d78d83a 	srl	fp,r17,r21
100026e4:	8d10983a 	sll	r8,r17,r20
100026e8:	2dacb03a 	or	r22,r5,r22
100026ec:	b02ed43a 	srli	r23,r22,16
100026f0:	8564d83a 	srl	r18,r16,r21
100026f4:	e009883a 	mov	r4,fp
100026f8:	b80b883a 	mov	r5,r23
100026fc:	44a4b03a 	or	r18,r8,r18
10002700:	3526983a 	sll	r19,r6,r20
10002704:	0002b0c0 	call	10002b0c <__umodsi3>
10002708:	e009883a 	mov	r4,fp
1000270c:	b80b883a 	mov	r5,r23
10002710:	b47fffcc 	andi	r17,r22,65535
10002714:	d8800015 	stw	r2,0(sp)
10002718:	0002b040 	call	10002b04 <__udivsi3>
1000271c:	1009883a 	mov	r4,r2
10002720:	880b883a 	mov	r5,r17
10002724:	1039883a 	mov	fp,r2
10002728:	0002b140 	call	10002b14 <__mulsi3>
1000272c:	d9800017 	ldw	r6,0(sp)
10002730:	9008d43a 	srli	r4,r18,16
10002734:	8520983a 	sll	r16,r16,r20
10002738:	300c943a 	slli	r6,r6,16
1000273c:	3106b03a 	or	r3,r6,r4
10002740:	1880042e 	bgeu	r3,r2,10002754 <__umoddi3+0x388>
10002744:	1d87883a 	add	r3,r3,r22
10002748:	e13fffc4 	addi	r4,fp,-1
1000274c:	1d809a2e 	bgeu	r3,r22,100029b8 <__umoddi3+0x5ec>
10002750:	2039883a 	mov	fp,r4
10002754:	1887c83a 	sub	r3,r3,r2
10002758:	1809883a 	mov	r4,r3
1000275c:	b80b883a 	mov	r5,r23
10002760:	d8c00115 	stw	r3,4(sp)
10002764:	0002b0c0 	call	10002b0c <__umodsi3>
10002768:	d8c00117 	ldw	r3,4(sp)
1000276c:	b80b883a 	mov	r5,r23
10002770:	d8800015 	stw	r2,0(sp)
10002774:	1809883a 	mov	r4,r3
10002778:	0002b040 	call	10002b04 <__udivsi3>
1000277c:	880b883a 	mov	r5,r17
10002780:	1009883a 	mov	r4,r2
10002784:	102f883a 	mov	r23,r2
10002788:	0002b140 	call	10002b14 <__mulsi3>
1000278c:	d9800017 	ldw	r6,0(sp)
10002790:	947fffcc 	andi	r17,r18,65535
10002794:	300c943a 	slli	r6,r6,16
10002798:	3464b03a 	or	r18,r6,r17
1000279c:	9080042e 	bgeu	r18,r2,100027b0 <__umoddi3+0x3e4>
100027a0:	95a5883a 	add	r18,r18,r22
100027a4:	b8ffffc4 	addi	r3,r23,-1
100027a8:	95807f2e 	bgeu	r18,r22,100029a8 <__umoddi3+0x5dc>
100027ac:	182f883a 	mov	r23,r3
100027b0:	e038943a 	slli	fp,fp,16
100027b4:	980cd43a 	srli	r6,r19,16
100027b8:	98ffffcc 	andi	r3,r19,65535
100027bc:	bf38b03a 	or	fp,r23,fp
100027c0:	e02ed43a 	srli	r23,fp,16
100027c4:	e73fffcc 	andi	fp,fp,65535
100027c8:	180b883a 	mov	r5,r3
100027cc:	e009883a 	mov	r4,fp
100027d0:	d9800015 	stw	r6,0(sp)
100027d4:	d8c00115 	stw	r3,4(sp)
100027d8:	90a5c83a 	sub	r18,r18,r2
100027dc:	0002b140 	call	10002b14 <__mulsi3>
100027e0:	d8c00117 	ldw	r3,4(sp)
100027e4:	b809883a 	mov	r4,r23
100027e8:	1023883a 	mov	r17,r2
100027ec:	180b883a 	mov	r5,r3
100027f0:	0002b140 	call	10002b14 <__mulsi3>
100027f4:	d9800017 	ldw	r6,0(sp)
100027f8:	b809883a 	mov	r4,r23
100027fc:	d8800115 	stw	r2,4(sp)
10002800:	300b883a 	mov	r5,r6
10002804:	302f883a 	mov	r23,r6
10002808:	0002b140 	call	10002b14 <__mulsi3>
1000280c:	e009883a 	mov	r4,fp
10002810:	b80b883a 	mov	r5,r23
10002814:	d8800015 	stw	r2,0(sp)
10002818:	0002b140 	call	10002b14 <__mulsi3>
1000281c:	d8c00117 	ldw	r3,4(sp)
10002820:	880cd43a 	srli	r6,r17,16
10002824:	d9c00017 	ldw	r7,0(sp)
10002828:	1885883a 	add	r2,r3,r2
1000282c:	118d883a 	add	r6,r2,r6
10002830:	30c0022e 	bgeu	r6,r3,1000283c <__umoddi3+0x470>
10002834:	00800074 	movhi	r2,1
10002838:	388f883a 	add	r7,r7,r2
1000283c:	3006d43a 	srli	r3,r6,16
10002840:	300c943a 	slli	r6,r6,16
10002844:	8c7fffcc 	andi	r17,r17,65535
10002848:	38c7883a 	add	r3,r7,r3
1000284c:	3463883a 	add	r17,r6,r17
10002850:	90c03d36 	bltu	r18,r3,10002948 <__umoddi3+0x57c>
10002854:	90c06026 	beq	r18,r3,100029d8 <__umoddi3+0x60c>
10002858:	90c9c83a 	sub	r4,r18,r3
1000285c:	880f883a 	mov	r7,r17
10002860:	81cfc83a 	sub	r7,r16,r7
10002864:	81c7803a 	cmpltu	r3,r16,r7
10002868:	20c7c83a 	sub	r3,r4,r3
1000286c:	1d44983a 	sll	r2,r3,r21
10002870:	3d0ed83a 	srl	r7,r7,r20
10002874:	1d06d83a 	srl	r3,r3,r20
10002878:	11c4b03a 	or	r2,r2,r7
1000287c:	003f7a06 	br	10002668 <__alt_data_end+0xf8002668>
10002880:	0025883a 	mov	r18,zero
10002884:	003ef806 	br	10002468 <__alt_data_end+0xf8002468>
10002888:	98a6983a 	sll	r19,r19,r2
1000288c:	88e8d83a 	srl	r20,r17,r3
10002890:	80c6d83a 	srl	r3,r16,r3
10002894:	982ad43a 	srli	r21,r19,16
10002898:	88a2983a 	sll	r17,r17,r2
1000289c:	a009883a 	mov	r4,r20
100028a0:	a80b883a 	mov	r5,r21
100028a4:	88eeb03a 	or	r23,r17,r3
100028a8:	1025883a 	mov	r18,r2
100028ac:	0002b0c0 	call	10002b0c <__umodsi3>
100028b0:	a009883a 	mov	r4,r20
100028b4:	a80b883a 	mov	r5,r21
100028b8:	1023883a 	mov	r17,r2
100028bc:	9dbfffcc 	andi	r22,r19,65535
100028c0:	0002b040 	call	10002b04 <__udivsi3>
100028c4:	1009883a 	mov	r4,r2
100028c8:	b00b883a 	mov	r5,r22
100028cc:	0002b140 	call	10002b14 <__mulsi3>
100028d0:	8822943a 	slli	r17,r17,16
100028d4:	b808d43a 	srli	r4,r23,16
100028d8:	84a8983a 	sll	r20,r16,r18
100028dc:	8906b03a 	or	r3,r17,r4
100028e0:	1880042e 	bgeu	r3,r2,100028f4 <__umoddi3+0x528>
100028e4:	1cc7883a 	add	r3,r3,r19
100028e8:	1cc00236 	bltu	r3,r19,100028f4 <__umoddi3+0x528>
100028ec:	1880012e 	bgeu	r3,r2,100028f4 <__umoddi3+0x528>
100028f0:	1cc7883a 	add	r3,r3,r19
100028f4:	18a1c83a 	sub	r16,r3,r2
100028f8:	8009883a 	mov	r4,r16
100028fc:	a80b883a 	mov	r5,r21
10002900:	0002b0c0 	call	10002b0c <__umodsi3>
10002904:	8009883a 	mov	r4,r16
10002908:	a80b883a 	mov	r5,r21
1000290c:	1039883a 	mov	fp,r2
10002910:	0002b040 	call	10002b04 <__udivsi3>
10002914:	1009883a 	mov	r4,r2
10002918:	b00b883a 	mov	r5,r22
1000291c:	0002b140 	call	10002b14 <__mulsi3>
10002920:	e006943a 	slli	r3,fp,16
10002924:	b93fffcc 	andi	r4,r23,65535
10002928:	1906b03a 	or	r3,r3,r4
1000292c:	1880042e 	bgeu	r3,r2,10002940 <__umoddi3+0x574>
10002930:	1cc7883a 	add	r3,r3,r19
10002934:	1cc00236 	bltu	r3,r19,10002940 <__umoddi3+0x574>
10002938:	1880012e 	bgeu	r3,r2,10002940 <__umoddi3+0x574>
1000293c:	1cc7883a 	add	r3,r3,r19
10002940:	18a3c83a 	sub	r17,r3,r2
10002944:	003f1e06 	br	100025c0 <__alt_data_end+0xf80025c0>
10002948:	8ccfc83a 	sub	r7,r17,r19
1000294c:	1d89c83a 	sub	r4,r3,r22
10002950:	89e3803a 	cmpltu	r17,r17,r7
10002954:	2463c83a 	sub	r17,r4,r17
10002958:	9449c83a 	sub	r4,r18,r17
1000295c:	003fc006 	br	10002860 <__alt_data_end+0xf8002860>
10002960:	000b883a 	mov	r5,zero
10002964:	002b883a 	mov	r21,zero
10002968:	003eeb06 	br	10002518 <__alt_data_end+0xf8002518>
1000296c:	01400404 	movi	r5,16
10002970:	282b883a 	mov	r21,r5
10002974:	003ee806 	br	10002518 <__alt_data_end+0xf8002518>
10002978:	01400404 	movi	r5,16
1000297c:	2805883a 	mov	r2,r5
10002980:	003eaa06 	br	1000242c <__alt_data_end+0xf800242c>
10002984:	0005883a 	mov	r2,zero
10002988:	0007883a 	mov	r3,zero
1000298c:	003eff06 	br	1000258c <__alt_data_end+0xf800258c>
10002990:	00800404 	movi	r2,16
10002994:	1007883a 	mov	r3,r2
10002998:	003efc06 	br	1000258c <__alt_data_end+0xf800258c>
1000299c:	000b883a 	mov	r5,zero
100029a0:	0005883a 	mov	r2,zero
100029a4:	003ea106 	br	1000242c <__alt_data_end+0xf800242c>
100029a8:	90bf802e 	bgeu	r18,r2,100027ac <__alt_data_end+0xf80027ac>
100029ac:	bdffff84 	addi	r23,r23,-2
100029b0:	95a5883a 	add	r18,r18,r22
100029b4:	003f7e06 	br	100027b0 <__alt_data_end+0xf80027b0>
100029b8:	18bf652e 	bgeu	r3,r2,10002750 <__alt_data_end+0xf8002750>
100029bc:	e73fff84 	addi	fp,fp,-2
100029c0:	1d87883a 	add	r3,r3,r22
100029c4:	003f6306 	br	10002754 <__alt_data_end+0xf8002754>
100029c8:	1cc7883a 	add	r3,r3,r19
100029cc:	003f0d06 	br	10002604 <__alt_data_end+0xf8002604>
100029d0:	8005883a 	mov	r2,r16
100029d4:	003edf06 	br	10002554 <__alt_data_end+0xf8002554>
100029d8:	847fdb36 	bltu	r16,r17,10002948 <__alt_data_end+0xf8002948>
100029dc:	880f883a 	mov	r7,r17
100029e0:	0009883a 	mov	r4,zero
100029e4:	003f9e06 	br	10002860 <__alt_data_end+0xf8002860>

100029e8 <udivmodsi4>:
100029e8:	2900182e 	bgeu	r5,r4,10002a4c <udivmodsi4+0x64>
100029ec:	28001716 	blt	r5,zero,10002a4c <udivmodsi4+0x64>
100029f0:	00800804 	movi	r2,32
100029f4:	00c00044 	movi	r3,1
100029f8:	00000206 	br	10002a04 <udivmodsi4+0x1c>
100029fc:	10001126 	beq	r2,zero,10002a44 <udivmodsi4+0x5c>
10002a00:	28000516 	blt	r5,zero,10002a18 <udivmodsi4+0x30>
10002a04:	294b883a 	add	r5,r5,r5
10002a08:	10bfffc4 	addi	r2,r2,-1
10002a0c:	18c7883a 	add	r3,r3,r3
10002a10:	293ffa36 	bltu	r5,r4,100029fc <__alt_data_end+0xf80029fc>
10002a14:	18000b26 	beq	r3,zero,10002a44 <udivmodsi4+0x5c>
10002a18:	0005883a 	mov	r2,zero
10002a1c:	21400236 	bltu	r4,r5,10002a28 <udivmodsi4+0x40>
10002a20:	2149c83a 	sub	r4,r4,r5
10002a24:	10c4b03a 	or	r2,r2,r3
10002a28:	1806d07a 	srli	r3,r3,1
10002a2c:	280ad07a 	srli	r5,r5,1
10002a30:	183ffa1e 	bne	r3,zero,10002a1c <__alt_data_end+0xf8002a1c>
10002a34:	3000011e 	bne	r6,zero,10002a3c <udivmodsi4+0x54>
10002a38:	f800283a 	ret
10002a3c:	2005883a 	mov	r2,r4
10002a40:	f800283a 	ret
10002a44:	0005883a 	mov	r2,zero
10002a48:	003ffa06 	br	10002a34 <__alt_data_end+0xf8002a34>
10002a4c:	00c00044 	movi	r3,1
10002a50:	003ff106 	br	10002a18 <__alt_data_end+0xf8002a18>

10002a54 <__divsi3>:
10002a54:	defffe04 	addi	sp,sp,-8
10002a58:	dfc00115 	stw	ra,4(sp)
10002a5c:	dc000015 	stw	r16,0(sp)
10002a60:	20000b16 	blt	r4,zero,10002a90 <__divsi3+0x3c>
10002a64:	0021883a 	mov	r16,zero
10002a68:	28000c16 	blt	r5,zero,10002a9c <__divsi3+0x48>
10002a6c:	000d883a 	mov	r6,zero
10002a70:	00029e80 	call	100029e8 <udivmodsi4>
10002a74:	0407c83a 	sub	r3,zero,r16
10002a78:	1884f03a 	xor	r2,r3,r2
10002a7c:	1405883a 	add	r2,r2,r16
10002a80:	dfc00117 	ldw	ra,4(sp)
10002a84:	dc000017 	ldw	r16,0(sp)
10002a88:	dec00204 	addi	sp,sp,8
10002a8c:	f800283a 	ret
10002a90:	0109c83a 	sub	r4,zero,r4
10002a94:	04000044 	movi	r16,1
10002a98:	283ff40e 	bge	r5,zero,10002a6c <__alt_data_end+0xf8002a6c>
10002a9c:	014bc83a 	sub	r5,zero,r5
10002aa0:	8400005c 	xori	r16,r16,1
10002aa4:	003ff106 	br	10002a6c <__alt_data_end+0xf8002a6c>

10002aa8 <__modsi3>:
10002aa8:	defffd04 	addi	sp,sp,-12
10002aac:	dfc00215 	stw	ra,8(sp)
10002ab0:	dc400115 	stw	r17,4(sp)
10002ab4:	dc000015 	stw	r16,0(sp)
10002ab8:	20000c16 	blt	r4,zero,10002aec <__modsi3+0x44>
10002abc:	0023883a 	mov	r17,zero
10002ac0:	0021883a 	mov	r16,zero
10002ac4:	28000d16 	blt	r5,zero,10002afc <__modsi3+0x54>
10002ac8:	01800044 	movi	r6,1
10002acc:	00029e80 	call	100029e8 <udivmodsi4>
10002ad0:	1404f03a 	xor	r2,r2,r16
10002ad4:	8885883a 	add	r2,r17,r2
10002ad8:	dfc00217 	ldw	ra,8(sp)
10002adc:	dc400117 	ldw	r17,4(sp)
10002ae0:	dc000017 	ldw	r16,0(sp)
10002ae4:	dec00304 	addi	sp,sp,12
10002ae8:	f800283a 	ret
10002aec:	0109c83a 	sub	r4,zero,r4
10002af0:	04400044 	movi	r17,1
10002af4:	043fffc4 	movi	r16,-1
10002af8:	283ff30e 	bge	r5,zero,10002ac8 <__alt_data_end+0xf8002ac8>
10002afc:	014bc83a 	sub	r5,zero,r5
10002b00:	003ff106 	br	10002ac8 <__alt_data_end+0xf8002ac8>

10002b04 <__udivsi3>:
10002b04:	000d883a 	mov	r6,zero
10002b08:	00029e81 	jmpi	100029e8 <udivmodsi4>

10002b0c <__umodsi3>:
10002b0c:	01800044 	movi	r6,1
10002b10:	00029e81 	jmpi	100029e8 <udivmodsi4>

10002b14 <__mulsi3>:
10002b14:	0005883a 	mov	r2,zero
10002b18:	20000726 	beq	r4,zero,10002b38 <__mulsi3+0x24>
10002b1c:	20c0004c 	andi	r3,r4,1
10002b20:	2008d07a 	srli	r4,r4,1
10002b24:	18000126 	beq	r3,zero,10002b2c <__mulsi3+0x18>
10002b28:	1145883a 	add	r2,r2,r5
10002b2c:	294b883a 	add	r5,r5,r5
10002b30:	203ffa1e 	bne	r4,zero,10002b1c <__alt_data_end+0xf8002b1c>
10002b34:	f800283a 	ret
10002b38:	f800283a 	ret

10002b3c <__adddf3>:
10002b3c:	02000434 	movhi	r8,16
10002b40:	423fffc4 	addi	r8,r8,-1
10002b44:	defffb04 	addi	sp,sp,-20
10002b48:	2a12703a 	and	r9,r5,r8
10002b4c:	2806d7fa 	srli	r3,r5,31
10002b50:	3a10703a 	and	r8,r7,r8
10002b54:	3804d53a 	srli	r2,r7,20
10002b58:	3014d77a 	srli	r10,r6,29
10002b5c:	dc000015 	stw	r16,0(sp)
10002b60:	481290fa 	slli	r9,r9,3
10002b64:	2820d53a 	srli	r16,r5,20
10002b68:	401090fa 	slli	r8,r8,3
10002b6c:	200ad77a 	srli	r5,r4,29
10002b70:	380ed7fa 	srli	r7,r7,31
10002b74:	dc800215 	stw	r18,8(sp)
10002b78:	dc400115 	stw	r17,4(sp)
10002b7c:	dfc00415 	stw	ra,16(sp)
10002b80:	dcc00315 	stw	r19,12(sp)
10002b84:	1c803fcc 	andi	r18,r3,255
10002b88:	8401ffcc 	andi	r16,r16,2047
10002b8c:	494ab03a 	or	r5,r9,r5
10002b90:	202290fa 	slli	r17,r4,3
10002b94:	1081ffcc 	andi	r2,r2,2047
10002b98:	4290b03a 	or	r8,r8,r10
10002b9c:	300c90fa 	slli	r6,r6,3
10002ba0:	91c07026 	beq	r18,r7,10002d64 <__adddf3+0x228>
10002ba4:	8087c83a 	sub	r3,r16,r2
10002ba8:	00c0b30e 	bge	zero,r3,10002e78 <__adddf3+0x33c>
10002bac:	10002a1e 	bne	r2,zero,10002c58 <__adddf3+0x11c>
10002bb0:	4184b03a 	or	r2,r8,r6
10002bb4:	1000991e 	bne	r2,zero,10002e1c <__adddf3+0x2e0>
10002bb8:	888001cc 	andi	r2,r17,7
10002bbc:	10005b26 	beq	r2,zero,10002d2c <__adddf3+0x1f0>
10002bc0:	88c003cc 	andi	r3,r17,15
10002bc4:	00800104 	movi	r2,4
10002bc8:	18805826 	beq	r3,r2,10002d2c <__adddf3+0x1f0>
10002bcc:	89800104 	addi	r6,r17,4
10002bd0:	3463803a 	cmpltu	r17,r6,r17
10002bd4:	2c4b883a 	add	r5,r5,r17
10002bd8:	2880202c 	andhi	r2,r5,128
10002bdc:	9007883a 	mov	r3,r18
10002be0:	3023883a 	mov	r17,r6
10002be4:	10005426 	beq	r2,zero,10002d38 <__adddf3+0x1fc>
10002be8:	84000044 	addi	r16,r16,1
10002bec:	0081ffc4 	movi	r2,2047
10002bf0:	8080c126 	beq	r16,r2,10002ef8 <__adddf3+0x3bc>
10002bf4:	013fe034 	movhi	r4,65408
10002bf8:	213fffc4 	addi	r4,r4,-1
10002bfc:	290a703a 	and	r5,r5,r4
10002c00:	2804977a 	slli	r2,r5,29
10002c04:	280a927a 	slli	r5,r5,9
10002c08:	8822d0fa 	srli	r17,r17,3
10002c0c:	8401ffcc 	andi	r16,r16,2047
10002c10:	2808d33a 	srli	r4,r5,12
10002c14:	1444b03a 	or	r2,r2,r17
10002c18:	8401ffcc 	andi	r16,r16,2047
10002c1c:	800a953a 	slli	r5,r16,20
10002c20:	18c03fcc 	andi	r3,r3,255
10002c24:	04000434 	movhi	r16,16
10002c28:	180697fa 	slli	r3,r3,31
10002c2c:	843fffc4 	addi	r16,r16,-1
10002c30:	2420703a 	and	r16,r4,r16
10002c34:	8160b03a 	or	r16,r16,r5
10002c38:	80c6b03a 	or	r3,r16,r3
10002c3c:	dfc00417 	ldw	ra,16(sp)
10002c40:	dcc00317 	ldw	r19,12(sp)
10002c44:	dc800217 	ldw	r18,8(sp)
10002c48:	dc400117 	ldw	r17,4(sp)
10002c4c:	dc000017 	ldw	r16,0(sp)
10002c50:	dec00504 	addi	sp,sp,20
10002c54:	f800283a 	ret
10002c58:	0081ffc4 	movi	r2,2047
10002c5c:	80bfd626 	beq	r16,r2,10002bb8 <__alt_data_end+0xf8002bb8>
10002c60:	42002034 	orhi	r8,r8,128
10002c64:	00800e04 	movi	r2,56
10002c68:	10c0a616 	blt	r2,r3,10002f04 <__adddf3+0x3c8>
10002c6c:	008007c4 	movi	r2,31
10002c70:	10c0c916 	blt	r2,r3,10002f98 <__adddf3+0x45c>
10002c74:	00800804 	movi	r2,32
10002c78:	10c5c83a 	sub	r2,r2,r3
10002c7c:	408e983a 	sll	r7,r8,r2
10002c80:	30c8d83a 	srl	r4,r6,r3
10002c84:	3084983a 	sll	r2,r6,r2
10002c88:	40c6d83a 	srl	r3,r8,r3
10002c8c:	390cb03a 	or	r6,r7,r4
10002c90:	1004c03a 	cmpne	r2,r2,zero
10002c94:	308cb03a 	or	r6,r6,r2
10002c98:	898dc83a 	sub	r6,r17,r6
10002c9c:	89a3803a 	cmpltu	r17,r17,r6
10002ca0:	28cbc83a 	sub	r5,r5,r3
10002ca4:	2c4bc83a 	sub	r5,r5,r17
10002ca8:	3023883a 	mov	r17,r6
10002cac:	2880202c 	andhi	r2,r5,128
10002cb0:	10006d26 	beq	r2,zero,10002e68 <__adddf3+0x32c>
10002cb4:	04c02034 	movhi	r19,128
10002cb8:	9cffffc4 	addi	r19,r19,-1
10002cbc:	2ce6703a 	and	r19,r5,r19
10002cc0:	98007e26 	beq	r19,zero,10002ebc <__adddf3+0x380>
10002cc4:	9809883a 	mov	r4,r19
10002cc8:	0003e000 	call	10003e00 <__clzsi2>
10002ccc:	10fffe04 	addi	r3,r2,-8
10002cd0:	010007c4 	movi	r4,31
10002cd4:	20c07f16 	blt	r4,r3,10002ed4 <__adddf3+0x398>
10002cd8:	01400a04 	movi	r5,40
10002cdc:	2885c83a 	sub	r2,r5,r2
10002ce0:	888ad83a 	srl	r5,r17,r2
10002ce4:	98e6983a 	sll	r19,r19,r3
10002ce8:	88e2983a 	sll	r17,r17,r3
10002cec:	2ce6b03a 	or	r19,r5,r19
10002cf0:	1c007c16 	blt	r3,r16,10002ee4 <__adddf3+0x3a8>
10002cf4:	1c21c83a 	sub	r16,r3,r16
10002cf8:	81400044 	addi	r5,r16,1
10002cfc:	00c007c4 	movi	r3,31
10002d00:	19409816 	blt	r3,r5,10002f64 <__adddf3+0x428>
10002d04:	1c21c83a 	sub	r16,r3,r16
10002d08:	8c08983a 	sll	r4,r17,r16
10002d0c:	8946d83a 	srl	r3,r17,r5
10002d10:	9c20983a 	sll	r16,r19,r16
10002d14:	2008c03a 	cmpne	r4,r4,zero
10002d18:	994ad83a 	srl	r5,r19,r5
10002d1c:	1c06b03a 	or	r3,r3,r16
10002d20:	1922b03a 	or	r17,r3,r4
10002d24:	0021883a 	mov	r16,zero
10002d28:	003fa306 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10002d2c:	2880202c 	andhi	r2,r5,128
10002d30:	9007883a 	mov	r3,r18
10002d34:	103fac1e 	bne	r2,zero,10002be8 <__alt_data_end+0xf8002be8>
10002d38:	2804977a 	slli	r2,r5,29
10002d3c:	8822d0fa 	srli	r17,r17,3
10002d40:	0101ffc4 	movi	r4,2047
10002d44:	280ad0fa 	srli	r5,r5,3
10002d48:	1444b03a 	or	r2,r2,r17
10002d4c:	81002c26 	beq	r16,r4,10002e00 <__adddf3+0x2c4>
10002d50:	8120703a 	and	r16,r16,r4
10002d54:	01000434 	movhi	r4,16
10002d58:	213fffc4 	addi	r4,r4,-1
10002d5c:	2908703a 	and	r4,r5,r4
10002d60:	003fad06 	br	10002c18 <__alt_data_end+0xf8002c18>
10002d64:	8089c83a 	sub	r4,r16,r2
10002d68:	01006a0e 	bge	zero,r4,10002f14 <__adddf3+0x3d8>
10002d6c:	10003326 	beq	r2,zero,10002e3c <__adddf3+0x300>
10002d70:	0081ffc4 	movi	r2,2047
10002d74:	80bf9026 	beq	r16,r2,10002bb8 <__alt_data_end+0xf8002bb8>
10002d78:	42002034 	orhi	r8,r8,128
10002d7c:	00800e04 	movi	r2,56
10002d80:	1100b116 	blt	r2,r4,10003048 <__adddf3+0x50c>
10002d84:	008007c4 	movi	r2,31
10002d88:	1100e216 	blt	r2,r4,10003114 <__adddf3+0x5d8>
10002d8c:	00800804 	movi	r2,32
10002d90:	1105c83a 	sub	r2,r2,r4
10002d94:	4092983a 	sll	r9,r8,r2
10002d98:	310ed83a 	srl	r7,r6,r4
10002d9c:	3084983a 	sll	r2,r6,r2
10002da0:	4110d83a 	srl	r8,r8,r4
10002da4:	49ccb03a 	or	r6,r9,r7
10002da8:	1004c03a 	cmpne	r2,r2,zero
10002dac:	308cb03a 	or	r6,r6,r2
10002db0:	344d883a 	add	r6,r6,r17
10002db4:	3463803a 	cmpltu	r17,r6,r17
10002db8:	414b883a 	add	r5,r8,r5
10002dbc:	2c4b883a 	add	r5,r5,r17
10002dc0:	3023883a 	mov	r17,r6
10002dc4:	2880202c 	andhi	r2,r5,128
10002dc8:	10002726 	beq	r2,zero,10002e68 <__adddf3+0x32c>
10002dcc:	84000044 	addi	r16,r16,1
10002dd0:	0081ffc4 	movi	r2,2047
10002dd4:	8080ae26 	beq	r16,r2,10003090 <__adddf3+0x554>
10002dd8:	00bfe034 	movhi	r2,65408
10002ddc:	10bfffc4 	addi	r2,r2,-1
10002de0:	288a703a 	and	r5,r5,r2
10002de4:	880cd07a 	srli	r6,r17,1
10002de8:	280897fa 	slli	r4,r5,31
10002dec:	88c0004c 	andi	r3,r17,1
10002df0:	30e2b03a 	or	r17,r6,r3
10002df4:	280ad07a 	srli	r5,r5,1
10002df8:	8922b03a 	or	r17,r17,r4
10002dfc:	003f6e06 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10002e00:	1148b03a 	or	r4,r2,r5
10002e04:	20003c26 	beq	r4,zero,10002ef8 <__adddf3+0x3bc>
10002e08:	29000234 	orhi	r4,r5,8
10002e0c:	01400434 	movhi	r5,16
10002e10:	297fffc4 	addi	r5,r5,-1
10002e14:	2148703a 	and	r4,r4,r5
10002e18:	003f7f06 	br	10002c18 <__alt_data_end+0xf8002c18>
10002e1c:	18ffffc4 	addi	r3,r3,-1
10002e20:	18004d1e 	bne	r3,zero,10002f58 <__adddf3+0x41c>
10002e24:	898dc83a 	sub	r6,r17,r6
10002e28:	89a3803a 	cmpltu	r17,r17,r6
10002e2c:	2a0bc83a 	sub	r5,r5,r8
10002e30:	2c4bc83a 	sub	r5,r5,r17
10002e34:	3023883a 	mov	r17,r6
10002e38:	003f9c06 	br	10002cac <__alt_data_end+0xf8002cac>
10002e3c:	4184b03a 	or	r2,r8,r6
10002e40:	103f5d26 	beq	r2,zero,10002bb8 <__alt_data_end+0xf8002bb8>
10002e44:	213fffc4 	addi	r4,r4,-1
10002e48:	203fd926 	beq	r4,zero,10002db0 <__alt_data_end+0xf8002db0>
10002e4c:	0081ffc4 	movi	r2,2047
10002e50:	80bfca1e 	bne	r16,r2,10002d7c <__alt_data_end+0xf8002d7c>
10002e54:	003f5806 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10002e58:	10c8b03a 	or	r4,r2,r3
10002e5c:	20008b26 	beq	r4,zero,1000308c <__adddf3+0x550>
10002e60:	100b883a 	mov	r5,r2
10002e64:	1823883a 	mov	r17,r3
10002e68:	888001cc 	andi	r2,r17,7
10002e6c:	103f541e 	bne	r2,zero,10002bc0 <__alt_data_end+0xf8002bc0>
10002e70:	9007883a 	mov	r3,r18
10002e74:	003fb006 	br	10002d38 <__alt_data_end+0xf8002d38>
10002e78:	1800531e 	bne	r3,zero,10002fc8 <__adddf3+0x48c>
10002e7c:	80800044 	addi	r2,r16,1
10002e80:	1081ffcc 	andi	r2,r2,2047
10002e84:	00c00044 	movi	r3,1
10002e88:	1880990e 	bge	r3,r2,100030f0 <__adddf3+0x5b4>
10002e8c:	8985c83a 	sub	r2,r17,r6
10002e90:	8887803a 	cmpltu	r3,r17,r2
10002e94:	2a27c83a 	sub	r19,r5,r8
10002e98:	98e7c83a 	sub	r19,r19,r3
10002e9c:	98c0202c 	andhi	r3,r19,128
10002ea0:	18006226 	beq	r3,zero,1000302c <__adddf3+0x4f0>
10002ea4:	3463c83a 	sub	r17,r6,r17
10002ea8:	4151c83a 	sub	r8,r8,r5
10002eac:	344d803a 	cmpltu	r6,r6,r17
10002eb0:	41a7c83a 	sub	r19,r8,r6
10002eb4:	3825883a 	mov	r18,r7
10002eb8:	983f821e 	bne	r19,zero,10002cc4 <__alt_data_end+0xf8002cc4>
10002ebc:	8809883a 	mov	r4,r17
10002ec0:	0003e000 	call	10003e00 <__clzsi2>
10002ec4:	10800804 	addi	r2,r2,32
10002ec8:	10fffe04 	addi	r3,r2,-8
10002ecc:	010007c4 	movi	r4,31
10002ed0:	20ff810e 	bge	r4,r3,10002cd8 <__alt_data_end+0xf8002cd8>
10002ed4:	14fff604 	addi	r19,r2,-40
10002ed8:	8ce6983a 	sll	r19,r17,r19
10002edc:	0023883a 	mov	r17,zero
10002ee0:	1c3f840e 	bge	r3,r16,10002cf4 <__alt_data_end+0xf8002cf4>
10002ee4:	017fe034 	movhi	r5,65408
10002ee8:	297fffc4 	addi	r5,r5,-1
10002eec:	80e1c83a 	sub	r16,r16,r3
10002ef0:	994a703a 	and	r5,r19,r5
10002ef4:	003f3006 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10002ef8:	0009883a 	mov	r4,zero
10002efc:	0005883a 	mov	r2,zero
10002f00:	003f4506 	br	10002c18 <__alt_data_end+0xf8002c18>
10002f04:	418cb03a 	or	r6,r8,r6
10002f08:	300cc03a 	cmpne	r6,r6,zero
10002f0c:	0007883a 	mov	r3,zero
10002f10:	003f6106 	br	10002c98 <__alt_data_end+0xf8002c98>
10002f14:	2000921e 	bne	r4,zero,10003160 <__adddf3+0x624>
10002f18:	80800044 	addi	r2,r16,1
10002f1c:	11c1ffcc 	andi	r7,r2,2047
10002f20:	01000044 	movi	r4,1
10002f24:	21c0610e 	bge	r4,r7,100030ac <__adddf3+0x570>
10002f28:	0101ffc4 	movi	r4,2047
10002f2c:	1100a326 	beq	r2,r4,100031bc <__adddf3+0x680>
10002f30:	344d883a 	add	r6,r6,r17
10002f34:	3463803a 	cmpltu	r17,r6,r17
10002f38:	414b883a 	add	r5,r8,r5
10002f3c:	2c4b883a 	add	r5,r5,r17
10002f40:	282297fa 	slli	r17,r5,31
10002f44:	300cd07a 	srli	r6,r6,1
10002f48:	280ad07a 	srli	r5,r5,1
10002f4c:	1021883a 	mov	r16,r2
10002f50:	89a2b03a 	or	r17,r17,r6
10002f54:	003f1806 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10002f58:	0081ffc4 	movi	r2,2047
10002f5c:	80bf411e 	bne	r16,r2,10002c64 <__alt_data_end+0xf8002c64>
10002f60:	003f1506 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10002f64:	80bff844 	addi	r2,r16,-31
10002f68:	00c00804 	movi	r3,32
10002f6c:	9884d83a 	srl	r2,r19,r2
10002f70:	28c04a26 	beq	r5,r3,1000309c <__adddf3+0x560>
10002f74:	00c00fc4 	movi	r3,63
10002f78:	1c21c83a 	sub	r16,r3,r16
10002f7c:	9c26983a 	sll	r19,r19,r16
10002f80:	9c62b03a 	or	r17,r19,r17
10002f84:	8822c03a 	cmpne	r17,r17,zero
10002f88:	88a2b03a 	or	r17,r17,r2
10002f8c:	000b883a 	mov	r5,zero
10002f90:	0021883a 	mov	r16,zero
10002f94:	003fb406 	br	10002e68 <__alt_data_end+0xf8002e68>
10002f98:	18bff804 	addi	r2,r3,-32
10002f9c:	01000804 	movi	r4,32
10002fa0:	4084d83a 	srl	r2,r8,r2
10002fa4:	19003f26 	beq	r3,r4,100030a4 <__adddf3+0x568>
10002fa8:	01001004 	movi	r4,64
10002fac:	20c7c83a 	sub	r3,r4,r3
10002fb0:	40d0983a 	sll	r8,r8,r3
10002fb4:	418cb03a 	or	r6,r8,r6
10002fb8:	300cc03a 	cmpne	r6,r6,zero
10002fbc:	308cb03a 	or	r6,r6,r2
10002fc0:	0007883a 	mov	r3,zero
10002fc4:	003f3406 	br	10002c98 <__alt_data_end+0xf8002c98>
10002fc8:	80002326 	beq	r16,zero,10003058 <__adddf3+0x51c>
10002fcc:	0101ffc4 	movi	r4,2047
10002fd0:	11005e26 	beq	r2,r4,1000314c <__adddf3+0x610>
10002fd4:	00c7c83a 	sub	r3,zero,r3
10002fd8:	29402034 	orhi	r5,r5,128
10002fdc:	01000e04 	movi	r4,56
10002fe0:	20c07216 	blt	r4,r3,100031ac <__adddf3+0x670>
10002fe4:	010007c4 	movi	r4,31
10002fe8:	20c0ce16 	blt	r4,r3,10003324 <__adddf3+0x7e8>
10002fec:	01000804 	movi	r4,32
10002ff0:	20c9c83a 	sub	r4,r4,r3
10002ff4:	2914983a 	sll	r10,r5,r4
10002ff8:	88d2d83a 	srl	r9,r17,r3
10002ffc:	8908983a 	sll	r4,r17,r4
10003000:	28c6d83a 	srl	r3,r5,r3
10003004:	5262b03a 	or	r17,r10,r9
10003008:	2008c03a 	cmpne	r4,r4,zero
1000300c:	8922b03a 	or	r17,r17,r4
10003010:	3463c83a 	sub	r17,r6,r17
10003014:	40c7c83a 	sub	r3,r8,r3
10003018:	344d803a 	cmpltu	r6,r6,r17
1000301c:	198bc83a 	sub	r5,r3,r6
10003020:	1021883a 	mov	r16,r2
10003024:	3825883a 	mov	r18,r7
10003028:	003f2006 	br	10002cac <__alt_data_end+0xf8002cac>
1000302c:	9886b03a 	or	r3,r19,r2
10003030:	1800141e 	bne	r3,zero,10003084 <__adddf3+0x548>
10003034:	0007883a 	mov	r3,zero
10003038:	000b883a 	mov	r5,zero
1000303c:	0023883a 	mov	r17,zero
10003040:	0021883a 	mov	r16,zero
10003044:	003f3c06 	br	10002d38 <__alt_data_end+0xf8002d38>
10003048:	418cb03a 	or	r6,r8,r6
1000304c:	300cc03a 	cmpne	r6,r6,zero
10003050:	0011883a 	mov	r8,zero
10003054:	003f5606 	br	10002db0 <__alt_data_end+0xf8002db0>
10003058:	2c48b03a 	or	r4,r5,r17
1000305c:	20003b26 	beq	r4,zero,1000314c <__adddf3+0x610>
10003060:	00c6303a 	nor	r3,zero,r3
10003064:	1800371e 	bne	r3,zero,10003144 <__adddf3+0x608>
10003068:	3463c83a 	sub	r17,r6,r17
1000306c:	414bc83a 	sub	r5,r8,r5
10003070:	344d803a 	cmpltu	r6,r6,r17
10003074:	298bc83a 	sub	r5,r5,r6
10003078:	1021883a 	mov	r16,r2
1000307c:	3825883a 	mov	r18,r7
10003080:	003f0a06 	br	10002cac <__alt_data_end+0xf8002cac>
10003084:	1023883a 	mov	r17,r2
10003088:	003f0d06 	br	10002cc0 <__alt_data_end+0xf8002cc0>
1000308c:	0007883a 	mov	r3,zero
10003090:	000b883a 	mov	r5,zero
10003094:	0023883a 	mov	r17,zero
10003098:	003f2706 	br	10002d38 <__alt_data_end+0xf8002d38>
1000309c:	0027883a 	mov	r19,zero
100030a0:	003fb706 	br	10002f80 <__alt_data_end+0xf8002f80>
100030a4:	0011883a 	mov	r8,zero
100030a8:	003fc206 	br	10002fb4 <__alt_data_end+0xf8002fb4>
100030ac:	2c44b03a 	or	r2,r5,r17
100030b0:	8000871e 	bne	r16,zero,100032d0 <__adddf3+0x794>
100030b4:	1000b126 	beq	r2,zero,1000337c <__adddf3+0x840>
100030b8:	4184b03a 	or	r2,r8,r6
100030bc:	103ebe26 	beq	r2,zero,10002bb8 <__alt_data_end+0xf8002bb8>
100030c0:	3445883a 	add	r2,r6,r17
100030c4:	1463803a 	cmpltu	r17,r2,r17
100030c8:	414b883a 	add	r5,r8,r5
100030cc:	2c4b883a 	add	r5,r5,r17
100030d0:	28c0202c 	andhi	r3,r5,128
100030d4:	1023883a 	mov	r17,r2
100030d8:	183f6326 	beq	r3,zero,10002e68 <__alt_data_end+0xf8002e68>
100030dc:	00bfe034 	movhi	r2,65408
100030e0:	10bfffc4 	addi	r2,r2,-1
100030e4:	2021883a 	mov	r16,r4
100030e8:	288a703a 	and	r5,r5,r2
100030ec:	003eb206 	br	10002bb8 <__alt_data_end+0xf8002bb8>
100030f0:	2c44b03a 	or	r2,r5,r17
100030f4:	8000251e 	bne	r16,zero,1000318c <__adddf3+0x650>
100030f8:	10004b1e 	bne	r2,zero,10003228 <__adddf3+0x6ec>
100030fc:	4184b03a 	or	r2,r8,r6
10003100:	103fe226 	beq	r2,zero,1000308c <__alt_data_end+0xf800308c>
10003104:	400b883a 	mov	r5,r8
10003108:	3023883a 	mov	r17,r6
1000310c:	3825883a 	mov	r18,r7
10003110:	003ea906 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10003114:	20bff804 	addi	r2,r4,-32
10003118:	01c00804 	movi	r7,32
1000311c:	4084d83a 	srl	r2,r8,r2
10003120:	21c07e26 	beq	r4,r7,1000331c <__adddf3+0x7e0>
10003124:	01c01004 	movi	r7,64
10003128:	3909c83a 	sub	r4,r7,r4
1000312c:	4110983a 	sll	r8,r8,r4
10003130:	418cb03a 	or	r6,r8,r6
10003134:	300cc03a 	cmpne	r6,r6,zero
10003138:	308cb03a 	or	r6,r6,r2
1000313c:	0011883a 	mov	r8,zero
10003140:	003f1b06 	br	10002db0 <__alt_data_end+0xf8002db0>
10003144:	0101ffc4 	movi	r4,2047
10003148:	113fa41e 	bne	r2,r4,10002fdc <__alt_data_end+0xf8002fdc>
1000314c:	400b883a 	mov	r5,r8
10003150:	3023883a 	mov	r17,r6
10003154:	1021883a 	mov	r16,r2
10003158:	3825883a 	mov	r18,r7
1000315c:	003e9606 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10003160:	80001a1e 	bne	r16,zero,100031cc <__adddf3+0x690>
10003164:	2c4eb03a 	or	r7,r5,r17
10003168:	38005526 	beq	r7,zero,100032c0 <__adddf3+0x784>
1000316c:	0108303a 	nor	r4,zero,r4
10003170:	2000511e 	bne	r4,zero,100032b8 <__adddf3+0x77c>
10003174:	89a3883a 	add	r17,r17,r6
10003178:	414b883a 	add	r5,r8,r5
1000317c:	898d803a 	cmpltu	r6,r17,r6
10003180:	298b883a 	add	r5,r5,r6
10003184:	1021883a 	mov	r16,r2
10003188:	003f0e06 	br	10002dc4 <__alt_data_end+0xf8002dc4>
1000318c:	1000341e 	bne	r2,zero,10003260 <__adddf3+0x724>
10003190:	4184b03a 	or	r2,r8,r6
10003194:	10006f26 	beq	r2,zero,10003354 <__adddf3+0x818>
10003198:	400b883a 	mov	r5,r8
1000319c:	3023883a 	mov	r17,r6
100031a0:	3825883a 	mov	r18,r7
100031a4:	0401ffc4 	movi	r16,2047
100031a8:	003e8306 	br	10002bb8 <__alt_data_end+0xf8002bb8>
100031ac:	2c62b03a 	or	r17,r5,r17
100031b0:	8822c03a 	cmpne	r17,r17,zero
100031b4:	0007883a 	mov	r3,zero
100031b8:	003f9506 	br	10003010 <__alt_data_end+0xf8003010>
100031bc:	1021883a 	mov	r16,r2
100031c0:	000b883a 	mov	r5,zero
100031c4:	0023883a 	mov	r17,zero
100031c8:	003edb06 	br	10002d38 <__alt_data_end+0xf8002d38>
100031cc:	01c1ffc4 	movi	r7,2047
100031d0:	11c03b26 	beq	r2,r7,100032c0 <__adddf3+0x784>
100031d4:	0109c83a 	sub	r4,zero,r4
100031d8:	29402034 	orhi	r5,r5,128
100031dc:	01c00e04 	movi	r7,56
100031e0:	39006216 	blt	r7,r4,1000336c <__adddf3+0x830>
100031e4:	01c007c4 	movi	r7,31
100031e8:	39006b16 	blt	r7,r4,10003398 <__adddf3+0x85c>
100031ec:	01c00804 	movi	r7,32
100031f0:	390fc83a 	sub	r7,r7,r4
100031f4:	29d4983a 	sll	r10,r5,r7
100031f8:	8912d83a 	srl	r9,r17,r4
100031fc:	89ce983a 	sll	r7,r17,r7
10003200:	2908d83a 	srl	r4,r5,r4
10003204:	5262b03a 	or	r17,r10,r9
10003208:	380ac03a 	cmpne	r5,r7,zero
1000320c:	8962b03a 	or	r17,r17,r5
10003210:	89a3883a 	add	r17,r17,r6
10003214:	2211883a 	add	r8,r4,r8
10003218:	898d803a 	cmpltu	r6,r17,r6
1000321c:	418b883a 	add	r5,r8,r6
10003220:	1021883a 	mov	r16,r2
10003224:	003ee706 	br	10002dc4 <__alt_data_end+0xf8002dc4>
10003228:	4184b03a 	or	r2,r8,r6
1000322c:	103e6226 	beq	r2,zero,10002bb8 <__alt_data_end+0xf8002bb8>
10003230:	8987c83a 	sub	r3,r17,r6
10003234:	88c9803a 	cmpltu	r4,r17,r3
10003238:	2a05c83a 	sub	r2,r5,r8
1000323c:	1105c83a 	sub	r2,r2,r4
10003240:	1100202c 	andhi	r4,r2,128
10003244:	203f0426 	beq	r4,zero,10002e58 <__alt_data_end+0xf8002e58>
10003248:	3463c83a 	sub	r17,r6,r17
1000324c:	414bc83a 	sub	r5,r8,r5
10003250:	344d803a 	cmpltu	r6,r6,r17
10003254:	298bc83a 	sub	r5,r5,r6
10003258:	3825883a 	mov	r18,r7
1000325c:	003e5606 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10003260:	4184b03a 	or	r2,r8,r6
10003264:	10002b26 	beq	r2,zero,10003314 <__adddf3+0x7d8>
10003268:	2804d0fa 	srli	r2,r5,3
1000326c:	8822d0fa 	srli	r17,r17,3
10003270:	280a977a 	slli	r5,r5,29
10003274:	10c0022c 	andhi	r3,r2,8
10003278:	2c62b03a 	or	r17,r5,r17
1000327c:	18000826 	beq	r3,zero,100032a0 <__adddf3+0x764>
10003280:	4008d0fa 	srli	r4,r8,3
10003284:	20c0022c 	andhi	r3,r4,8
10003288:	1800051e 	bne	r3,zero,100032a0 <__adddf3+0x764>
1000328c:	300cd0fa 	srli	r6,r6,3
10003290:	4010977a 	slli	r8,r8,29
10003294:	2005883a 	mov	r2,r4
10003298:	3825883a 	mov	r18,r7
1000329c:	41a2b03a 	or	r17,r8,r6
100032a0:	880ad77a 	srli	r5,r17,29
100032a4:	100490fa 	slli	r2,r2,3
100032a8:	882290fa 	slli	r17,r17,3
100032ac:	0401ffc4 	movi	r16,2047
100032b0:	288ab03a 	or	r5,r5,r2
100032b4:	003e4006 	br	10002bb8 <__alt_data_end+0xf8002bb8>
100032b8:	01c1ffc4 	movi	r7,2047
100032bc:	11ffc71e 	bne	r2,r7,100031dc <__alt_data_end+0xf80031dc>
100032c0:	400b883a 	mov	r5,r8
100032c4:	3023883a 	mov	r17,r6
100032c8:	1021883a 	mov	r16,r2
100032cc:	003e3a06 	br	10002bb8 <__alt_data_end+0xf8002bb8>
100032d0:	10002d26 	beq	r2,zero,10003388 <__adddf3+0x84c>
100032d4:	4184b03a 	or	r2,r8,r6
100032d8:	10000e26 	beq	r2,zero,10003314 <__adddf3+0x7d8>
100032dc:	2804d0fa 	srli	r2,r5,3
100032e0:	8822d0fa 	srli	r17,r17,3
100032e4:	280a977a 	slli	r5,r5,29
100032e8:	10c0022c 	andhi	r3,r2,8
100032ec:	2c62b03a 	or	r17,r5,r17
100032f0:	183feb26 	beq	r3,zero,100032a0 <__alt_data_end+0xf80032a0>
100032f4:	4008d0fa 	srli	r4,r8,3
100032f8:	20c0022c 	andhi	r3,r4,8
100032fc:	183fe81e 	bne	r3,zero,100032a0 <__alt_data_end+0xf80032a0>
10003300:	300cd0fa 	srli	r6,r6,3
10003304:	4010977a 	slli	r8,r8,29
10003308:	2005883a 	mov	r2,r4
1000330c:	41a2b03a 	or	r17,r8,r6
10003310:	003fe306 	br	100032a0 <__alt_data_end+0xf80032a0>
10003314:	0401ffc4 	movi	r16,2047
10003318:	003e2706 	br	10002bb8 <__alt_data_end+0xf8002bb8>
1000331c:	0011883a 	mov	r8,zero
10003320:	003f8306 	br	10003130 <__alt_data_end+0xf8003130>
10003324:	193ff804 	addi	r4,r3,-32
10003328:	02400804 	movi	r9,32
1000332c:	2908d83a 	srl	r4,r5,r4
10003330:	1a402526 	beq	r3,r9,100033c8 <__adddf3+0x88c>
10003334:	02401004 	movi	r9,64
10003338:	48c7c83a 	sub	r3,r9,r3
1000333c:	28ca983a 	sll	r5,r5,r3
10003340:	2c62b03a 	or	r17,r5,r17
10003344:	8822c03a 	cmpne	r17,r17,zero
10003348:	8922b03a 	or	r17,r17,r4
1000334c:	0007883a 	mov	r3,zero
10003350:	003f2f06 	br	10003010 <__alt_data_end+0xf8003010>
10003354:	01402034 	movhi	r5,128
10003358:	0007883a 	mov	r3,zero
1000335c:	297fffc4 	addi	r5,r5,-1
10003360:	047ffe04 	movi	r17,-8
10003364:	0401ffc4 	movi	r16,2047
10003368:	003e7306 	br	10002d38 <__alt_data_end+0xf8002d38>
1000336c:	2c62b03a 	or	r17,r5,r17
10003370:	8822c03a 	cmpne	r17,r17,zero
10003374:	0009883a 	mov	r4,zero
10003378:	003fa506 	br	10003210 <__alt_data_end+0xf8003210>
1000337c:	400b883a 	mov	r5,r8
10003380:	3023883a 	mov	r17,r6
10003384:	003e0c06 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10003388:	400b883a 	mov	r5,r8
1000338c:	3023883a 	mov	r17,r6
10003390:	0401ffc4 	movi	r16,2047
10003394:	003e0806 	br	10002bb8 <__alt_data_end+0xf8002bb8>
10003398:	21fff804 	addi	r7,r4,-32
1000339c:	02400804 	movi	r9,32
100033a0:	29ced83a 	srl	r7,r5,r7
100033a4:	22400a26 	beq	r4,r9,100033d0 <__adddf3+0x894>
100033a8:	02401004 	movi	r9,64
100033ac:	4909c83a 	sub	r4,r9,r4
100033b0:	290a983a 	sll	r5,r5,r4
100033b4:	2c62b03a 	or	r17,r5,r17
100033b8:	8822c03a 	cmpne	r17,r17,zero
100033bc:	89e2b03a 	or	r17,r17,r7
100033c0:	0009883a 	mov	r4,zero
100033c4:	003f9206 	br	10003210 <__alt_data_end+0xf8003210>
100033c8:	000b883a 	mov	r5,zero
100033cc:	003fdc06 	br	10003340 <__alt_data_end+0xf8003340>
100033d0:	000b883a 	mov	r5,zero
100033d4:	003ff706 	br	100033b4 <__alt_data_end+0xf80033b4>

100033d8 <__subdf3>:
100033d8:	00c00434 	movhi	r3,16
100033dc:	18ffffc4 	addi	r3,r3,-1
100033e0:	defffb04 	addi	sp,sp,-20
100033e4:	28d2703a 	and	r9,r5,r3
100033e8:	3814d53a 	srli	r10,r7,20
100033ec:	38c6703a 	and	r3,r7,r3
100033f0:	3004d77a 	srli	r2,r6,29
100033f4:	dc800215 	stw	r18,8(sp)
100033f8:	dc000015 	stw	r16,0(sp)
100033fc:	2824d7fa 	srli	r18,r5,31
10003400:	2820d53a 	srli	r16,r5,20
10003404:	481290fa 	slli	r9,r9,3
10003408:	200ad77a 	srli	r5,r4,29
1000340c:	180690fa 	slli	r3,r3,3
10003410:	dc400115 	stw	r17,4(sp)
10003414:	dfc00415 	stw	ra,16(sp)
10003418:	202290fa 	slli	r17,r4,3
1000341c:	dcc00315 	stw	r19,12(sp)
10003420:	5281ffcc 	andi	r10,r10,2047
10003424:	0101ffc4 	movi	r4,2047
10003428:	9011883a 	mov	r8,r18
1000342c:	8401ffcc 	andi	r16,r16,2047
10003430:	94803fcc 	andi	r18,r18,255
10003434:	494ab03a 	or	r5,r9,r5
10003438:	380ed7fa 	srli	r7,r7,31
1000343c:	1886b03a 	or	r3,r3,r2
10003440:	300c90fa 	slli	r6,r6,3
10003444:	51009026 	beq	r10,r4,10003688 <__subdf3+0x2b0>
10003448:	39c0005c 	xori	r7,r7,1
1000344c:	8285c83a 	sub	r2,r16,r10
10003450:	91c06f26 	beq	r18,r7,10003610 <__subdf3+0x238>
10003454:	0080b10e 	bge	zero,r2,1000371c <__subdf3+0x344>
10003458:	50002a1e 	bne	r10,zero,10003504 <__subdf3+0x12c>
1000345c:	1988b03a 	or	r4,r3,r6
10003460:	2000941e 	bne	r4,zero,100036b4 <__subdf3+0x2dc>
10003464:	888001cc 	andi	r2,r17,7
10003468:	10005b26 	beq	r2,zero,100035d8 <__subdf3+0x200>
1000346c:	88c003cc 	andi	r3,r17,15
10003470:	00800104 	movi	r2,4
10003474:	18805826 	beq	r3,r2,100035d8 <__subdf3+0x200>
10003478:	88c00104 	addi	r3,r17,4
1000347c:	1c63803a 	cmpltu	r17,r3,r17
10003480:	2c4b883a 	add	r5,r5,r17
10003484:	2880202c 	andhi	r2,r5,128
10003488:	9200004c 	andi	r8,r18,1
1000348c:	1823883a 	mov	r17,r3
10003490:	10005426 	beq	r2,zero,100035e4 <__subdf3+0x20c>
10003494:	84000044 	addi	r16,r16,1
10003498:	0081ffc4 	movi	r2,2047
1000349c:	8080bf26 	beq	r16,r2,1000379c <__subdf3+0x3c4>
100034a0:	013fe034 	movhi	r4,65408
100034a4:	213fffc4 	addi	r4,r4,-1
100034a8:	290a703a 	and	r5,r5,r4
100034ac:	2804977a 	slli	r2,r5,29
100034b0:	280a927a 	slli	r5,r5,9
100034b4:	8822d0fa 	srli	r17,r17,3
100034b8:	8401ffcc 	andi	r16,r16,2047
100034bc:	2808d33a 	srli	r4,r5,12
100034c0:	1444b03a 	or	r2,r2,r17
100034c4:	8401ffcc 	andi	r16,r16,2047
100034c8:	800a953a 	slli	r5,r16,20
100034cc:	40c03fcc 	andi	r3,r8,255
100034d0:	04000434 	movhi	r16,16
100034d4:	180697fa 	slli	r3,r3,31
100034d8:	843fffc4 	addi	r16,r16,-1
100034dc:	2420703a 	and	r16,r4,r16
100034e0:	8160b03a 	or	r16,r16,r5
100034e4:	80c6b03a 	or	r3,r16,r3
100034e8:	dfc00417 	ldw	ra,16(sp)
100034ec:	dcc00317 	ldw	r19,12(sp)
100034f0:	dc800217 	ldw	r18,8(sp)
100034f4:	dc400117 	ldw	r17,4(sp)
100034f8:	dc000017 	ldw	r16,0(sp)
100034fc:	dec00504 	addi	sp,sp,20
10003500:	f800283a 	ret
10003504:	0101ffc4 	movi	r4,2047
10003508:	813fd626 	beq	r16,r4,10003464 <__alt_data_end+0xf8003464>
1000350c:	18c02034 	orhi	r3,r3,128
10003510:	01000e04 	movi	r4,56
10003514:	2080a416 	blt	r4,r2,100037a8 <__subdf3+0x3d0>
10003518:	010007c4 	movi	r4,31
1000351c:	2080c716 	blt	r4,r2,1000383c <__subdf3+0x464>
10003520:	01000804 	movi	r4,32
10003524:	2089c83a 	sub	r4,r4,r2
10003528:	1910983a 	sll	r8,r3,r4
1000352c:	308ed83a 	srl	r7,r6,r2
10003530:	3108983a 	sll	r4,r6,r4
10003534:	1884d83a 	srl	r2,r3,r2
10003538:	41ccb03a 	or	r6,r8,r7
1000353c:	2008c03a 	cmpne	r4,r4,zero
10003540:	310cb03a 	or	r6,r6,r4
10003544:	898dc83a 	sub	r6,r17,r6
10003548:	89a3803a 	cmpltu	r17,r17,r6
1000354c:	288bc83a 	sub	r5,r5,r2
10003550:	2c4bc83a 	sub	r5,r5,r17
10003554:	3023883a 	mov	r17,r6
10003558:	2880202c 	andhi	r2,r5,128
1000355c:	10006b26 	beq	r2,zero,1000370c <__subdf3+0x334>
10003560:	04c02034 	movhi	r19,128
10003564:	9cffffc4 	addi	r19,r19,-1
10003568:	2ce6703a 	and	r19,r5,r19
1000356c:	98007c26 	beq	r19,zero,10003760 <__subdf3+0x388>
10003570:	9809883a 	mov	r4,r19
10003574:	0003e000 	call	10003e00 <__clzsi2>
10003578:	10fffe04 	addi	r3,r2,-8
1000357c:	010007c4 	movi	r4,31
10003580:	20c07d16 	blt	r4,r3,10003778 <__subdf3+0x3a0>
10003584:	01400a04 	movi	r5,40
10003588:	2885c83a 	sub	r2,r5,r2
1000358c:	888ad83a 	srl	r5,r17,r2
10003590:	98e6983a 	sll	r19,r19,r3
10003594:	88e2983a 	sll	r17,r17,r3
10003598:	2ce6b03a 	or	r19,r5,r19
1000359c:	1c007a16 	blt	r3,r16,10003788 <__subdf3+0x3b0>
100035a0:	1c21c83a 	sub	r16,r3,r16
100035a4:	81400044 	addi	r5,r16,1
100035a8:	00c007c4 	movi	r3,31
100035ac:	19409616 	blt	r3,r5,10003808 <__subdf3+0x430>
100035b0:	1c21c83a 	sub	r16,r3,r16
100035b4:	8c08983a 	sll	r4,r17,r16
100035b8:	8946d83a 	srl	r3,r17,r5
100035bc:	9c20983a 	sll	r16,r19,r16
100035c0:	2008c03a 	cmpne	r4,r4,zero
100035c4:	994ad83a 	srl	r5,r19,r5
100035c8:	1c06b03a 	or	r3,r3,r16
100035cc:	1922b03a 	or	r17,r3,r4
100035d0:	0021883a 	mov	r16,zero
100035d4:	003fa306 	br	10003464 <__alt_data_end+0xf8003464>
100035d8:	2880202c 	andhi	r2,r5,128
100035dc:	9200004c 	andi	r8,r18,1
100035e0:	103fac1e 	bne	r2,zero,10003494 <__alt_data_end+0xf8003494>
100035e4:	2804977a 	slli	r2,r5,29
100035e8:	8822d0fa 	srli	r17,r17,3
100035ec:	00c1ffc4 	movi	r3,2047
100035f0:	280ad0fa 	srli	r5,r5,3
100035f4:	1444b03a 	or	r2,r2,r17
100035f8:	80c02726 	beq	r16,r3,10003698 <__subdf3+0x2c0>
100035fc:	01000434 	movhi	r4,16
10003600:	213fffc4 	addi	r4,r4,-1
10003604:	80e0703a 	and	r16,r16,r3
10003608:	2908703a 	and	r4,r5,r4
1000360c:	003fad06 	br	100034c4 <__alt_data_end+0xf80034c4>
10003610:	0080690e 	bge	zero,r2,100037b8 <__subdf3+0x3e0>
10003614:	50002f26 	beq	r10,zero,100036d4 <__subdf3+0x2fc>
10003618:	0101ffc4 	movi	r4,2047
1000361c:	813f9126 	beq	r16,r4,10003464 <__alt_data_end+0xf8003464>
10003620:	18c02034 	orhi	r3,r3,128
10003624:	01000e04 	movi	r4,56
10003628:	2080b00e 	bge	r4,r2,100038ec <__subdf3+0x514>
1000362c:	198cb03a 	or	r6,r3,r6
10003630:	300ec03a 	cmpne	r7,r6,zero
10003634:	0005883a 	mov	r2,zero
10003638:	3c4f883a 	add	r7,r7,r17
1000363c:	3c63803a 	cmpltu	r17,r7,r17
10003640:	114b883a 	add	r5,r2,r5
10003644:	2c4b883a 	add	r5,r5,r17
10003648:	3823883a 	mov	r17,r7
1000364c:	2880202c 	andhi	r2,r5,128
10003650:	10002e26 	beq	r2,zero,1000370c <__subdf3+0x334>
10003654:	84000044 	addi	r16,r16,1
10003658:	0081ffc4 	movi	r2,2047
1000365c:	8080de26 	beq	r16,r2,100039d8 <__subdf3+0x600>
10003660:	00bfe034 	movhi	r2,65408
10003664:	10bfffc4 	addi	r2,r2,-1
10003668:	288a703a 	and	r5,r5,r2
1000366c:	880cd07a 	srli	r6,r17,1
10003670:	280897fa 	slli	r4,r5,31
10003674:	88c0004c 	andi	r3,r17,1
10003678:	30e2b03a 	or	r17,r6,r3
1000367c:	280ad07a 	srli	r5,r5,1
10003680:	8922b03a 	or	r17,r17,r4
10003684:	003f7706 	br	10003464 <__alt_data_end+0xf8003464>
10003688:	1984b03a 	or	r2,r3,r6
1000368c:	103f6e26 	beq	r2,zero,10003448 <__alt_data_end+0xf8003448>
10003690:	39c03fcc 	andi	r7,r7,255
10003694:	003f6d06 	br	1000344c <__alt_data_end+0xf800344c>
10003698:	1146b03a 	or	r3,r2,r5
1000369c:	18003f26 	beq	r3,zero,1000379c <__subdf3+0x3c4>
100036a0:	00c00434 	movhi	r3,16
100036a4:	29000234 	orhi	r4,r5,8
100036a8:	18ffffc4 	addi	r3,r3,-1
100036ac:	20c8703a 	and	r4,r4,r3
100036b0:	003f8406 	br	100034c4 <__alt_data_end+0xf80034c4>
100036b4:	10bfffc4 	addi	r2,r2,-1
100036b8:	1000501e 	bne	r2,zero,100037fc <__subdf3+0x424>
100036bc:	898fc83a 	sub	r7,r17,r6
100036c0:	89e3803a 	cmpltu	r17,r17,r7
100036c4:	28cbc83a 	sub	r5,r5,r3
100036c8:	2c4bc83a 	sub	r5,r5,r17
100036cc:	3823883a 	mov	r17,r7
100036d0:	003fa106 	br	10003558 <__alt_data_end+0xf8003558>
100036d4:	1988b03a 	or	r4,r3,r6
100036d8:	203f6226 	beq	r4,zero,10003464 <__alt_data_end+0xf8003464>
100036dc:	10bfffc4 	addi	r2,r2,-1
100036e0:	10009b1e 	bne	r2,zero,10003950 <__subdf3+0x578>
100036e4:	344d883a 	add	r6,r6,r17
100036e8:	3463803a 	cmpltu	r17,r6,r17
100036ec:	194b883a 	add	r5,r3,r5
100036f0:	2c4b883a 	add	r5,r5,r17
100036f4:	3023883a 	mov	r17,r6
100036f8:	003fd406 	br	1000364c <__alt_data_end+0xf800364c>
100036fc:	1106b03a 	or	r3,r2,r4
10003700:	1800b426 	beq	r3,zero,100039d4 <__subdf3+0x5fc>
10003704:	100b883a 	mov	r5,r2
10003708:	2023883a 	mov	r17,r4
1000370c:	888001cc 	andi	r2,r17,7
10003710:	103f561e 	bne	r2,zero,1000346c <__alt_data_end+0xf800346c>
10003714:	9200004c 	andi	r8,r18,1
10003718:	003fb206 	br	100035e4 <__alt_data_end+0xf80035e4>
1000371c:	1000531e 	bne	r2,zero,1000386c <__subdf3+0x494>
10003720:	80800044 	addi	r2,r16,1
10003724:	1081ffcc 	andi	r2,r2,2047
10003728:	01000044 	movi	r4,1
1000372c:	2080a00e 	bge	r4,r2,100039b0 <__subdf3+0x5d8>
10003730:	8985c83a 	sub	r2,r17,r6
10003734:	8889803a 	cmpltu	r4,r17,r2
10003738:	28e7c83a 	sub	r19,r5,r3
1000373c:	9927c83a 	sub	r19,r19,r4
10003740:	9900202c 	andhi	r4,r19,128
10003744:	20006226 	beq	r4,zero,100038d0 <__subdf3+0x4f8>
10003748:	3463c83a 	sub	r17,r6,r17
1000374c:	194bc83a 	sub	r5,r3,r5
10003750:	344d803a 	cmpltu	r6,r6,r17
10003754:	29a7c83a 	sub	r19,r5,r6
10003758:	3825883a 	mov	r18,r7
1000375c:	983f841e 	bne	r19,zero,10003570 <__alt_data_end+0xf8003570>
10003760:	8809883a 	mov	r4,r17
10003764:	0003e000 	call	10003e00 <__clzsi2>
10003768:	10800804 	addi	r2,r2,32
1000376c:	10fffe04 	addi	r3,r2,-8
10003770:	010007c4 	movi	r4,31
10003774:	20ff830e 	bge	r4,r3,10003584 <__alt_data_end+0xf8003584>
10003778:	14fff604 	addi	r19,r2,-40
1000377c:	8ce6983a 	sll	r19,r17,r19
10003780:	0023883a 	mov	r17,zero
10003784:	1c3f860e 	bge	r3,r16,100035a0 <__alt_data_end+0xf80035a0>
10003788:	017fe034 	movhi	r5,65408
1000378c:	297fffc4 	addi	r5,r5,-1
10003790:	80e1c83a 	sub	r16,r16,r3
10003794:	994a703a 	and	r5,r19,r5
10003798:	003f3206 	br	10003464 <__alt_data_end+0xf8003464>
1000379c:	0009883a 	mov	r4,zero
100037a0:	0005883a 	mov	r2,zero
100037a4:	003f4706 	br	100034c4 <__alt_data_end+0xf80034c4>
100037a8:	198cb03a 	or	r6,r3,r6
100037ac:	300cc03a 	cmpne	r6,r6,zero
100037b0:	0005883a 	mov	r2,zero
100037b4:	003f6306 	br	10003544 <__alt_data_end+0xf8003544>
100037b8:	10009d1e 	bne	r2,zero,10003a30 <__subdf3+0x658>
100037bc:	81c00044 	addi	r7,r16,1
100037c0:	3881ffcc 	andi	r2,r7,2047
100037c4:	02400044 	movi	r9,1
100037c8:	4880680e 	bge	r9,r2,1000396c <__subdf3+0x594>
100037cc:	0081ffc4 	movi	r2,2047
100037d0:	3880ae26 	beq	r7,r2,10003a8c <__subdf3+0x6b4>
100037d4:	344d883a 	add	r6,r6,r17
100037d8:	3463803a 	cmpltu	r17,r6,r17
100037dc:	194b883a 	add	r5,r3,r5
100037e0:	2c4b883a 	add	r5,r5,r17
100037e4:	282297fa 	slli	r17,r5,31
100037e8:	300cd07a 	srli	r6,r6,1
100037ec:	280ad07a 	srli	r5,r5,1
100037f0:	3821883a 	mov	r16,r7
100037f4:	89a2b03a 	or	r17,r17,r6
100037f8:	003f1a06 	br	10003464 <__alt_data_end+0xf8003464>
100037fc:	0101ffc4 	movi	r4,2047
10003800:	813f431e 	bne	r16,r4,10003510 <__alt_data_end+0xf8003510>
10003804:	003f1706 	br	10003464 <__alt_data_end+0xf8003464>
10003808:	80bff844 	addi	r2,r16,-31
1000380c:	00c00804 	movi	r3,32
10003810:	9884d83a 	srl	r2,r19,r2
10003814:	28c05126 	beq	r5,r3,1000395c <__subdf3+0x584>
10003818:	00c00fc4 	movi	r3,63
1000381c:	1c21c83a 	sub	r16,r3,r16
10003820:	9c26983a 	sll	r19,r19,r16
10003824:	9c62b03a 	or	r17,r19,r17
10003828:	8822c03a 	cmpne	r17,r17,zero
1000382c:	88a2b03a 	or	r17,r17,r2
10003830:	000b883a 	mov	r5,zero
10003834:	0021883a 	mov	r16,zero
10003838:	003fb406 	br	1000370c <__alt_data_end+0xf800370c>
1000383c:	113ff804 	addi	r4,r2,-32
10003840:	01c00804 	movi	r7,32
10003844:	1908d83a 	srl	r4,r3,r4
10003848:	11c04626 	beq	r2,r7,10003964 <__subdf3+0x58c>
1000384c:	01c01004 	movi	r7,64
10003850:	3885c83a 	sub	r2,r7,r2
10003854:	1884983a 	sll	r2,r3,r2
10003858:	118cb03a 	or	r6,r2,r6
1000385c:	300cc03a 	cmpne	r6,r6,zero
10003860:	310cb03a 	or	r6,r6,r4
10003864:	0005883a 	mov	r2,zero
10003868:	003f3606 	br	10003544 <__alt_data_end+0xf8003544>
1000386c:	80002b26 	beq	r16,zero,1000391c <__subdf3+0x544>
10003870:	0101ffc4 	movi	r4,2047
10003874:	51006926 	beq	r10,r4,10003a1c <__subdf3+0x644>
10003878:	0085c83a 	sub	r2,zero,r2
1000387c:	29402034 	orhi	r5,r5,128
10003880:	01000e04 	movi	r4,56
10003884:	20807d16 	blt	r4,r2,10003a7c <__subdf3+0x6a4>
10003888:	010007c4 	movi	r4,31
1000388c:	2080d916 	blt	r4,r2,10003bf4 <__subdf3+0x81c>
10003890:	01000804 	movi	r4,32
10003894:	2089c83a 	sub	r4,r4,r2
10003898:	2912983a 	sll	r9,r5,r4
1000389c:	8890d83a 	srl	r8,r17,r2
100038a0:	8908983a 	sll	r4,r17,r4
100038a4:	2884d83a 	srl	r2,r5,r2
100038a8:	4a22b03a 	or	r17,r9,r8
100038ac:	2008c03a 	cmpne	r4,r4,zero
100038b0:	8922b03a 	or	r17,r17,r4
100038b4:	3463c83a 	sub	r17,r6,r17
100038b8:	1885c83a 	sub	r2,r3,r2
100038bc:	344d803a 	cmpltu	r6,r6,r17
100038c0:	118bc83a 	sub	r5,r2,r6
100038c4:	5021883a 	mov	r16,r10
100038c8:	3825883a 	mov	r18,r7
100038cc:	003f2206 	br	10003558 <__alt_data_end+0xf8003558>
100038d0:	9886b03a 	or	r3,r19,r2
100038d4:	18001c1e 	bne	r3,zero,10003948 <__subdf3+0x570>
100038d8:	0011883a 	mov	r8,zero
100038dc:	000b883a 	mov	r5,zero
100038e0:	0023883a 	mov	r17,zero
100038e4:	0021883a 	mov	r16,zero
100038e8:	003f3e06 	br	100035e4 <__alt_data_end+0xf80035e4>
100038ec:	010007c4 	movi	r4,31
100038f0:	20803c16 	blt	r4,r2,100039e4 <__subdf3+0x60c>
100038f4:	01000804 	movi	r4,32
100038f8:	2089c83a 	sub	r4,r4,r2
100038fc:	1912983a 	sll	r9,r3,r4
10003900:	308ed83a 	srl	r7,r6,r2
10003904:	3108983a 	sll	r4,r6,r4
10003908:	1884d83a 	srl	r2,r3,r2
1000390c:	49ceb03a 	or	r7,r9,r7
10003910:	2008c03a 	cmpne	r4,r4,zero
10003914:	390eb03a 	or	r7,r7,r4
10003918:	003f4706 	br	10003638 <__alt_data_end+0xf8003638>
1000391c:	2c48b03a 	or	r4,r5,r17
10003920:	20003e26 	beq	r4,zero,10003a1c <__subdf3+0x644>
10003924:	0084303a 	nor	r2,zero,r2
10003928:	10003a1e 	bne	r2,zero,10003a14 <__subdf3+0x63c>
1000392c:	3463c83a 	sub	r17,r6,r17
10003930:	194bc83a 	sub	r5,r3,r5
10003934:	344d803a 	cmpltu	r6,r6,r17
10003938:	298bc83a 	sub	r5,r5,r6
1000393c:	5021883a 	mov	r16,r10
10003940:	3825883a 	mov	r18,r7
10003944:	003f0406 	br	10003558 <__alt_data_end+0xf8003558>
10003948:	1023883a 	mov	r17,r2
1000394c:	003f0706 	br	1000356c <__alt_data_end+0xf800356c>
10003950:	0101ffc4 	movi	r4,2047
10003954:	813f331e 	bne	r16,r4,10003624 <__alt_data_end+0xf8003624>
10003958:	003ec206 	br	10003464 <__alt_data_end+0xf8003464>
1000395c:	0027883a 	mov	r19,zero
10003960:	003fb006 	br	10003824 <__alt_data_end+0xf8003824>
10003964:	0005883a 	mov	r2,zero
10003968:	003fbb06 	br	10003858 <__alt_data_end+0xf8003858>
1000396c:	2c44b03a 	or	r2,r5,r17
10003970:	80008b1e 	bne	r16,zero,10003ba0 <__subdf3+0x7c8>
10003974:	1000b526 	beq	r2,zero,10003c4c <__subdf3+0x874>
10003978:	1984b03a 	or	r2,r3,r6
1000397c:	103eb926 	beq	r2,zero,10003464 <__alt_data_end+0xf8003464>
10003980:	3449883a 	add	r4,r6,r17
10003984:	2463803a 	cmpltu	r17,r4,r17
10003988:	194b883a 	add	r5,r3,r5
1000398c:	2c4b883a 	add	r5,r5,r17
10003990:	2880202c 	andhi	r2,r5,128
10003994:	2023883a 	mov	r17,r4
10003998:	103f5c26 	beq	r2,zero,1000370c <__alt_data_end+0xf800370c>
1000399c:	00bfe034 	movhi	r2,65408
100039a0:	10bfffc4 	addi	r2,r2,-1
100039a4:	4821883a 	mov	r16,r9
100039a8:	288a703a 	and	r5,r5,r2
100039ac:	003ead06 	br	10003464 <__alt_data_end+0xf8003464>
100039b0:	2c44b03a 	or	r2,r5,r17
100039b4:	8000291e 	bne	r16,zero,10003a5c <__subdf3+0x684>
100039b8:	10004f1e 	bne	r2,zero,10003af8 <__subdf3+0x720>
100039bc:	1984b03a 	or	r2,r3,r6
100039c0:	10000426 	beq	r2,zero,100039d4 <__subdf3+0x5fc>
100039c4:	180b883a 	mov	r5,r3
100039c8:	3023883a 	mov	r17,r6
100039cc:	3825883a 	mov	r18,r7
100039d0:	003ea406 	br	10003464 <__alt_data_end+0xf8003464>
100039d4:	0011883a 	mov	r8,zero
100039d8:	000b883a 	mov	r5,zero
100039dc:	0023883a 	mov	r17,zero
100039e0:	003f0006 	br	100035e4 <__alt_data_end+0xf80035e4>
100039e4:	11fff804 	addi	r7,r2,-32
100039e8:	19c8d83a 	srl	r4,r3,r7
100039ec:	01c00804 	movi	r7,32
100039f0:	11c07e26 	beq	r2,r7,10003bec <__subdf3+0x814>
100039f4:	01c01004 	movi	r7,64
100039f8:	3885c83a 	sub	r2,r7,r2
100039fc:	1884983a 	sll	r2,r3,r2
10003a00:	118cb03a 	or	r6,r2,r6
10003a04:	300ec03a 	cmpne	r7,r6,zero
10003a08:	390eb03a 	or	r7,r7,r4
10003a0c:	0005883a 	mov	r2,zero
10003a10:	003f0906 	br	10003638 <__alt_data_end+0xf8003638>
10003a14:	0101ffc4 	movi	r4,2047
10003a18:	513f991e 	bne	r10,r4,10003880 <__alt_data_end+0xf8003880>
10003a1c:	180b883a 	mov	r5,r3
10003a20:	3023883a 	mov	r17,r6
10003a24:	5021883a 	mov	r16,r10
10003a28:	3825883a 	mov	r18,r7
10003a2c:	003e8d06 	br	10003464 <__alt_data_end+0xf8003464>
10003a30:	80001a1e 	bne	r16,zero,10003a9c <__subdf3+0x6c4>
10003a34:	2c48b03a 	or	r4,r5,r17
10003a38:	20005526 	beq	r4,zero,10003b90 <__subdf3+0x7b8>
10003a3c:	0084303a 	nor	r2,zero,r2
10003a40:	1000511e 	bne	r2,zero,10003b88 <__subdf3+0x7b0>
10003a44:	89a3883a 	add	r17,r17,r6
10003a48:	194b883a 	add	r5,r3,r5
10003a4c:	898d803a 	cmpltu	r6,r17,r6
10003a50:	298b883a 	add	r5,r5,r6
10003a54:	5021883a 	mov	r16,r10
10003a58:	003efc06 	br	1000364c <__alt_data_end+0xf800364c>
10003a5c:	1000341e 	bne	r2,zero,10003b30 <__subdf3+0x758>
10003a60:	1984b03a 	or	r2,r3,r6
10003a64:	10006f26 	beq	r2,zero,10003c24 <__subdf3+0x84c>
10003a68:	180b883a 	mov	r5,r3
10003a6c:	3023883a 	mov	r17,r6
10003a70:	3825883a 	mov	r18,r7
10003a74:	0401ffc4 	movi	r16,2047
10003a78:	003e7a06 	br	10003464 <__alt_data_end+0xf8003464>
10003a7c:	2c62b03a 	or	r17,r5,r17
10003a80:	8822c03a 	cmpne	r17,r17,zero
10003a84:	0005883a 	mov	r2,zero
10003a88:	003f8a06 	br	100038b4 <__alt_data_end+0xf80038b4>
10003a8c:	3821883a 	mov	r16,r7
10003a90:	000b883a 	mov	r5,zero
10003a94:	0023883a 	mov	r17,zero
10003a98:	003ed206 	br	100035e4 <__alt_data_end+0xf80035e4>
10003a9c:	0101ffc4 	movi	r4,2047
10003aa0:	51003b26 	beq	r10,r4,10003b90 <__subdf3+0x7b8>
10003aa4:	0085c83a 	sub	r2,zero,r2
10003aa8:	29402034 	orhi	r5,r5,128
10003aac:	01000e04 	movi	r4,56
10003ab0:	20806216 	blt	r4,r2,10003c3c <__subdf3+0x864>
10003ab4:	010007c4 	movi	r4,31
10003ab8:	20806b16 	blt	r4,r2,10003c68 <__subdf3+0x890>
10003abc:	01000804 	movi	r4,32
10003ac0:	2089c83a 	sub	r4,r4,r2
10003ac4:	2912983a 	sll	r9,r5,r4
10003ac8:	888ed83a 	srl	r7,r17,r2
10003acc:	8908983a 	sll	r4,r17,r4
10003ad0:	2884d83a 	srl	r2,r5,r2
10003ad4:	49e2b03a 	or	r17,r9,r7
10003ad8:	2008c03a 	cmpne	r4,r4,zero
10003adc:	8922b03a 	or	r17,r17,r4
10003ae0:	89a3883a 	add	r17,r17,r6
10003ae4:	10c5883a 	add	r2,r2,r3
10003ae8:	898d803a 	cmpltu	r6,r17,r6
10003aec:	118b883a 	add	r5,r2,r6
10003af0:	5021883a 	mov	r16,r10
10003af4:	003ed506 	br	1000364c <__alt_data_end+0xf800364c>
10003af8:	1984b03a 	or	r2,r3,r6
10003afc:	103e5926 	beq	r2,zero,10003464 <__alt_data_end+0xf8003464>
10003b00:	8989c83a 	sub	r4,r17,r6
10003b04:	8911803a 	cmpltu	r8,r17,r4
10003b08:	28c5c83a 	sub	r2,r5,r3
10003b0c:	1205c83a 	sub	r2,r2,r8
10003b10:	1200202c 	andhi	r8,r2,128
10003b14:	403ef926 	beq	r8,zero,100036fc <__alt_data_end+0xf80036fc>
10003b18:	3463c83a 	sub	r17,r6,r17
10003b1c:	194bc83a 	sub	r5,r3,r5
10003b20:	344d803a 	cmpltu	r6,r6,r17
10003b24:	298bc83a 	sub	r5,r5,r6
10003b28:	3825883a 	mov	r18,r7
10003b2c:	003e4d06 	br	10003464 <__alt_data_end+0xf8003464>
10003b30:	1984b03a 	or	r2,r3,r6
10003b34:	10002b26 	beq	r2,zero,10003be4 <__subdf3+0x80c>
10003b38:	2808d0fa 	srli	r4,r5,3
10003b3c:	8822d0fa 	srli	r17,r17,3
10003b40:	280a977a 	slli	r5,r5,29
10003b44:	2080022c 	andhi	r2,r4,8
10003b48:	2c62b03a 	or	r17,r5,r17
10003b4c:	10000826 	beq	r2,zero,10003b70 <__subdf3+0x798>
10003b50:	1810d0fa 	srli	r8,r3,3
10003b54:	4080022c 	andhi	r2,r8,8
10003b58:	1000051e 	bne	r2,zero,10003b70 <__subdf3+0x798>
10003b5c:	300cd0fa 	srli	r6,r6,3
10003b60:	1804977a 	slli	r2,r3,29
10003b64:	4009883a 	mov	r4,r8
10003b68:	3825883a 	mov	r18,r7
10003b6c:	11a2b03a 	or	r17,r2,r6
10003b70:	880ad77a 	srli	r5,r17,29
10003b74:	200890fa 	slli	r4,r4,3
10003b78:	882290fa 	slli	r17,r17,3
10003b7c:	0401ffc4 	movi	r16,2047
10003b80:	290ab03a 	or	r5,r5,r4
10003b84:	003e3706 	br	10003464 <__alt_data_end+0xf8003464>
10003b88:	0101ffc4 	movi	r4,2047
10003b8c:	513fc71e 	bne	r10,r4,10003aac <__alt_data_end+0xf8003aac>
10003b90:	180b883a 	mov	r5,r3
10003b94:	3023883a 	mov	r17,r6
10003b98:	5021883a 	mov	r16,r10
10003b9c:	003e3106 	br	10003464 <__alt_data_end+0xf8003464>
10003ba0:	10002d26 	beq	r2,zero,10003c58 <__subdf3+0x880>
10003ba4:	1984b03a 	or	r2,r3,r6
10003ba8:	10000e26 	beq	r2,zero,10003be4 <__subdf3+0x80c>
10003bac:	2808d0fa 	srli	r4,r5,3
10003bb0:	8822d0fa 	srli	r17,r17,3
10003bb4:	280a977a 	slli	r5,r5,29
10003bb8:	2080022c 	andhi	r2,r4,8
10003bbc:	2c62b03a 	or	r17,r5,r17
10003bc0:	103feb26 	beq	r2,zero,10003b70 <__alt_data_end+0xf8003b70>
10003bc4:	180ed0fa 	srli	r7,r3,3
10003bc8:	3880022c 	andhi	r2,r7,8
10003bcc:	103fe81e 	bne	r2,zero,10003b70 <__alt_data_end+0xf8003b70>
10003bd0:	300cd0fa 	srli	r6,r6,3
10003bd4:	1804977a 	slli	r2,r3,29
10003bd8:	3809883a 	mov	r4,r7
10003bdc:	11a2b03a 	or	r17,r2,r6
10003be0:	003fe306 	br	10003b70 <__alt_data_end+0xf8003b70>
10003be4:	0401ffc4 	movi	r16,2047
10003be8:	003e1e06 	br	10003464 <__alt_data_end+0xf8003464>
10003bec:	0005883a 	mov	r2,zero
10003bf0:	003f8306 	br	10003a00 <__alt_data_end+0xf8003a00>
10003bf4:	113ff804 	addi	r4,r2,-32
10003bf8:	02000804 	movi	r8,32
10003bfc:	2908d83a 	srl	r4,r5,r4
10003c00:	12002526 	beq	r2,r8,10003c98 <__subdf3+0x8c0>
10003c04:	02001004 	movi	r8,64
10003c08:	4085c83a 	sub	r2,r8,r2
10003c0c:	288a983a 	sll	r5,r5,r2
10003c10:	2c62b03a 	or	r17,r5,r17
10003c14:	8822c03a 	cmpne	r17,r17,zero
10003c18:	8922b03a 	or	r17,r17,r4
10003c1c:	0005883a 	mov	r2,zero
10003c20:	003f2406 	br	100038b4 <__alt_data_end+0xf80038b4>
10003c24:	01402034 	movhi	r5,128
10003c28:	0011883a 	mov	r8,zero
10003c2c:	297fffc4 	addi	r5,r5,-1
10003c30:	047ffe04 	movi	r17,-8
10003c34:	0401ffc4 	movi	r16,2047
10003c38:	003e6a06 	br	100035e4 <__alt_data_end+0xf80035e4>
10003c3c:	2c62b03a 	or	r17,r5,r17
10003c40:	8822c03a 	cmpne	r17,r17,zero
10003c44:	0005883a 	mov	r2,zero
10003c48:	003fa506 	br	10003ae0 <__alt_data_end+0xf8003ae0>
10003c4c:	180b883a 	mov	r5,r3
10003c50:	3023883a 	mov	r17,r6
10003c54:	003e0306 	br	10003464 <__alt_data_end+0xf8003464>
10003c58:	180b883a 	mov	r5,r3
10003c5c:	3023883a 	mov	r17,r6
10003c60:	0401ffc4 	movi	r16,2047
10003c64:	003dff06 	br	10003464 <__alt_data_end+0xf8003464>
10003c68:	113ff804 	addi	r4,r2,-32
10003c6c:	01c00804 	movi	r7,32
10003c70:	2908d83a 	srl	r4,r5,r4
10003c74:	11c00a26 	beq	r2,r7,10003ca0 <__subdf3+0x8c8>
10003c78:	01c01004 	movi	r7,64
10003c7c:	3885c83a 	sub	r2,r7,r2
10003c80:	288a983a 	sll	r5,r5,r2
10003c84:	2c62b03a 	or	r17,r5,r17
10003c88:	8822c03a 	cmpne	r17,r17,zero
10003c8c:	8922b03a 	or	r17,r17,r4
10003c90:	0005883a 	mov	r2,zero
10003c94:	003f9206 	br	10003ae0 <__alt_data_end+0xf8003ae0>
10003c98:	000b883a 	mov	r5,zero
10003c9c:	003fdc06 	br	10003c10 <__alt_data_end+0xf8003c10>
10003ca0:	000b883a 	mov	r5,zero
10003ca4:	003ff706 	br	10003c84 <__alt_data_end+0xf8003c84>

10003ca8 <__fixdfsi>:
10003ca8:	2806d53a 	srli	r3,r5,20
10003cac:	00800434 	movhi	r2,16
10003cb0:	10bfffc4 	addi	r2,r2,-1
10003cb4:	18c1ffcc 	andi	r3,r3,2047
10003cb8:	0180ff84 	movi	r6,1022
10003cbc:	2884703a 	and	r2,r5,r2
10003cc0:	280ad7fa 	srli	r5,r5,31
10003cc4:	30c0130e 	bge	r6,r3,10003d14 <__fixdfsi+0x6c>
10003cc8:	01810744 	movi	r6,1053
10003ccc:	30c00d16 	blt	r6,r3,10003d04 <__fixdfsi+0x5c>
10003cd0:	01810cc4 	movi	r6,1075
10003cd4:	30cdc83a 	sub	r6,r6,r3
10003cd8:	01c007c4 	movi	r7,31
10003cdc:	10800434 	orhi	r2,r2,16
10003ce0:	39800e0e 	bge	r7,r6,10003d1c <__fixdfsi+0x74>
10003ce4:	010104c4 	movi	r4,1043
10003ce8:	20c7c83a 	sub	r3,r4,r3
10003cec:	10c6d83a 	srl	r3,r2,r3
10003cf0:	29403fcc 	andi	r5,r5,255
10003cf4:	0145c83a 	sub	r2,zero,r5
10003cf8:	1884f03a 	xor	r2,r3,r2
10003cfc:	1145883a 	add	r2,r2,r5
10003d00:	f800283a 	ret
10003d04:	00a00034 	movhi	r2,32768
10003d08:	10bfffc4 	addi	r2,r2,-1
10003d0c:	2885883a 	add	r2,r5,r2
10003d10:	f800283a 	ret
10003d14:	0005883a 	mov	r2,zero
10003d18:	f800283a 	ret
10003d1c:	18fefb44 	addi	r3,r3,-1043
10003d20:	2188d83a 	srl	r4,r4,r6
10003d24:	10c6983a 	sll	r3,r2,r3
10003d28:	20c6b03a 	or	r3,r4,r3
10003d2c:	003ff006 	br	10003cf0 <__alt_data_end+0xf8003cf0>

10003d30 <__floatsidf>:
10003d30:	defffd04 	addi	sp,sp,-12
10003d34:	dc400115 	stw	r17,4(sp)
10003d38:	dfc00215 	stw	ra,8(sp)
10003d3c:	dc000015 	stw	r16,0(sp)
10003d40:	2023883a 	mov	r17,r4
10003d44:	20001426 	beq	r4,zero,10003d98 <__floatsidf+0x68>
10003d48:	2020d7fa 	srli	r16,r4,31
10003d4c:	80000126 	beq	r16,zero,10003d54 <__floatsidf+0x24>
10003d50:	0123c83a 	sub	r17,zero,r4
10003d54:	8809883a 	mov	r4,r17
10003d58:	0003e000 	call	10003e00 <__clzsi2>
10003d5c:	01410784 	movi	r5,1054
10003d60:	00c00284 	movi	r3,10
10003d64:	288bc83a 	sub	r5,r5,r2
10003d68:	18801c16 	blt	r3,r2,10003ddc <__floatsidf+0xac>
10003d6c:	00c002c4 	movi	r3,11
10003d70:	1887c83a 	sub	r3,r3,r2
10003d74:	88c8d83a 	srl	r4,r17,r3
10003d78:	00c00434 	movhi	r3,16
10003d7c:	18ffffc4 	addi	r3,r3,-1
10003d80:	10800544 	addi	r2,r2,21
10003d84:	20c8703a 	and	r4,r4,r3
10003d88:	8884983a 	sll	r2,r17,r2
10003d8c:	28c1ffcc 	andi	r3,r5,2047
10003d90:	800d883a 	mov	r6,r16
10003d94:	00000406 	br	10003da8 <__floatsidf+0x78>
10003d98:	000d883a 	mov	r6,zero
10003d9c:	0007883a 	mov	r3,zero
10003da0:	0009883a 	mov	r4,zero
10003da4:	0005883a 	mov	r2,zero
10003da8:	180a953a 	slli	r5,r3,20
10003dac:	31803fcc 	andi	r6,r6,255
10003db0:	00c00434 	movhi	r3,16
10003db4:	300c97fa 	slli	r6,r6,31
10003db8:	18ffffc4 	addi	r3,r3,-1
10003dbc:	20c6703a 	and	r3,r4,r3
10003dc0:	1946b03a 	or	r3,r3,r5
10003dc4:	1986b03a 	or	r3,r3,r6
10003dc8:	dfc00217 	ldw	ra,8(sp)
10003dcc:	dc400117 	ldw	r17,4(sp)
10003dd0:	dc000017 	ldw	r16,0(sp)
10003dd4:	dec00304 	addi	sp,sp,12
10003dd8:	f800283a 	ret
10003ddc:	10fffd44 	addi	r3,r2,-11
10003de0:	88c8983a 	sll	r4,r17,r3
10003de4:	00800434 	movhi	r2,16
10003de8:	10bfffc4 	addi	r2,r2,-1
10003dec:	2088703a 	and	r4,r4,r2
10003df0:	28c1ffcc 	andi	r3,r5,2047
10003df4:	800d883a 	mov	r6,r16
10003df8:	0005883a 	mov	r2,zero
10003dfc:	003fea06 	br	10003da8 <__alt_data_end+0xf8003da8>

10003e00 <__clzsi2>:
10003e00:	00bfffd4 	movui	r2,65535
10003e04:	11000b36 	bltu	r2,r4,10003e34 <__clzsi2+0x34>
10003e08:	00803fc4 	movi	r2,255
10003e0c:	1100122e 	bgeu	r2,r4,10003e58 <__clzsi2+0x58>
10003e10:	00c00204 	movi	r3,8
10003e14:	01400604 	movi	r5,24
10003e18:	20c8d83a 	srl	r4,r4,r3
10003e1c:	00840074 	movhi	r2,4097
10003e20:	10842404 	addi	r2,r2,4240
10003e24:	1109883a 	add	r4,r2,r4
10003e28:	20800003 	ldbu	r2,0(r4)
10003e2c:	2885c83a 	sub	r2,r5,r2
10003e30:	f800283a 	ret
10003e34:	00804034 	movhi	r2,256
10003e38:	10bfffc4 	addi	r2,r2,-1
10003e3c:	11000336 	bltu	r2,r4,10003e4c <__clzsi2+0x4c>
10003e40:	00c00404 	movi	r3,16
10003e44:	180b883a 	mov	r5,r3
10003e48:	003ff306 	br	10003e18 <__alt_data_end+0xf8003e18>
10003e4c:	00c00604 	movi	r3,24
10003e50:	01400204 	movi	r5,8
10003e54:	003ff006 	br	10003e18 <__alt_data_end+0xf8003e18>
10003e58:	0007883a 	mov	r3,zero
10003e5c:	01400804 	movi	r5,32
10003e60:	003fed06 	br	10003e18 <__alt_data_end+0xf8003e18>

10003e64 <_printf_r>:
10003e64:	defffd04 	addi	sp,sp,-12
10003e68:	dfc00015 	stw	ra,0(sp)
10003e6c:	d9800115 	stw	r6,4(sp)
10003e70:	d9c00215 	stw	r7,8(sp)
10003e74:	280d883a 	mov	r6,r5
10003e78:	21400217 	ldw	r5,8(r4)
10003e7c:	d9c00104 	addi	r7,sp,4
10003e80:	00040ac0 	call	100040ac <___vfprintf_internal_r>
10003e84:	dfc00017 	ldw	ra,0(sp)
10003e88:	dec00304 	addi	sp,sp,12
10003e8c:	f800283a 	ret

10003e90 <printf>:
10003e90:	defffc04 	addi	sp,sp,-16
10003e94:	dfc00015 	stw	ra,0(sp)
10003e98:	d9400115 	stw	r5,4(sp)
10003e9c:	d9800215 	stw	r6,8(sp)
10003ea0:	d9c00315 	stw	r7,12(sp)
10003ea4:	00840074 	movhi	r2,4097
10003ea8:	108b9004 	addi	r2,r2,11840
10003eac:	10800017 	ldw	r2,0(r2)
10003eb0:	200b883a 	mov	r5,r4
10003eb4:	d9800104 	addi	r6,sp,4
10003eb8:	11000217 	ldw	r4,8(r2)
10003ebc:	00061a80 	call	100061a8 <__vfprintf_internal>
10003ec0:	dfc00017 	ldw	ra,0(sp)
10003ec4:	dec00404 	addi	sp,sp,16
10003ec8:	f800283a 	ret

10003ecc <_puts_r>:
10003ecc:	defff604 	addi	sp,sp,-40
10003ed0:	dc000715 	stw	r16,28(sp)
10003ed4:	2021883a 	mov	r16,r4
10003ed8:	2809883a 	mov	r4,r5
10003edc:	dc400815 	stw	r17,32(sp)
10003ee0:	dfc00915 	stw	ra,36(sp)
10003ee4:	2823883a 	mov	r17,r5
10003ee8:	00040140 	call	10004014 <strlen>
10003eec:	00c40074 	movhi	r3,4097
10003ef0:	18cb9004 	addi	r3,r3,11840
10003ef4:	18c00017 	ldw	r3,0(r3)
10003ef8:	11000044 	addi	r4,r2,1
10003efc:	d8800115 	stw	r2,4(sp)
10003f00:	18c00217 	ldw	r3,8(r3)
10003f04:	01440074 	movhi	r5,4097
10003f08:	29446404 	addi	r5,r5,4496
10003f0c:	1880030b 	ldhu	r2,12(r3)
10003f10:	d9400215 	stw	r5,8(sp)
10003f14:	d9000615 	stw	r4,24(sp)
10003f18:	01400044 	movi	r5,1
10003f1c:	01000084 	movi	r4,2
10003f20:	d9000515 	stw	r4,20(sp)
10003f24:	dc400015 	stw	r17,0(sp)
10003f28:	d9400315 	stw	r5,12(sp)
10003f2c:	dec00415 	stw	sp,16(sp)
10003f30:	1108000c 	andi	r4,r2,8192
10003f34:	2000061e 	bne	r4,zero,10003f50 <_puts_r+0x84>
10003f38:	19401917 	ldw	r5,100(r3)
10003f3c:	0137ffc4 	movi	r4,-8193
10003f40:	10880014 	ori	r2,r2,8192
10003f44:	2908703a 	and	r4,r5,r4
10003f48:	1880030d 	sth	r2,12(r3)
10003f4c:	19001915 	stw	r4,100(r3)
10003f50:	81400217 	ldw	r5,8(r16)
10003f54:	8009883a 	mov	r4,r16
10003f58:	d9800404 	addi	r6,sp,16
10003f5c:	000866c0 	call	1000866c <__sfvwrite_r>
10003f60:	1000061e 	bne	r2,zero,10003f7c <_puts_r+0xb0>
10003f64:	00800284 	movi	r2,10
10003f68:	dfc00917 	ldw	ra,36(sp)
10003f6c:	dc400817 	ldw	r17,32(sp)
10003f70:	dc000717 	ldw	r16,28(sp)
10003f74:	dec00a04 	addi	sp,sp,40
10003f78:	f800283a 	ret
10003f7c:	00bfffc4 	movi	r2,-1
10003f80:	003ff906 	br	10003f68 <__alt_data_end+0xf8003f68>

10003f84 <puts>:
10003f84:	00840074 	movhi	r2,4097
10003f88:	108b9004 	addi	r2,r2,11840
10003f8c:	200b883a 	mov	r5,r4
10003f90:	11000017 	ldw	r4,0(r2)
10003f94:	0003ecc1 	jmpi	10003ecc <_puts_r>

10003f98 <srand>:
10003f98:	00840074 	movhi	r2,4097
10003f9c:	108b9004 	addi	r2,r2,11840
10003fa0:	10800017 	ldw	r2,0(r2)
10003fa4:	11002915 	stw	r4,164(r2)
10003fa8:	10002a15 	stw	zero,168(r2)
10003fac:	f800283a 	ret

10003fb0 <rand>:
10003fb0:	00840074 	movhi	r2,4097
10003fb4:	defffe04 	addi	sp,sp,-8
10003fb8:	108b9004 	addi	r2,r2,11840
10003fbc:	dc000015 	stw	r16,0(sp)
10003fc0:	14000017 	ldw	r16,0(r2)
10003fc4:	dfc00115 	stw	ra,4(sp)
10003fc8:	01932574 	movhi	r6,19605
10003fcc:	81002917 	ldw	r4,164(r16)
10003fd0:	81402a17 	ldw	r5,168(r16)
10003fd4:	01d614b4 	movhi	r7,22610
10003fd8:	319fcb44 	addi	r6,r6,32557
10003fdc:	39fd0b44 	addi	r7,r7,-3027
10003fe0:	000d2980 	call	1000d298 <__muldi3>
10003fe4:	11000044 	addi	r4,r2,1
10003fe8:	2085803a 	cmpltu	r2,r4,r2
10003fec:	10c7883a 	add	r3,r2,r3
10003ff0:	00a00034 	movhi	r2,32768
10003ff4:	10bfffc4 	addi	r2,r2,-1
10003ff8:	1884703a 	and	r2,r3,r2
10003ffc:	81002915 	stw	r4,164(r16)
10004000:	80c02a15 	stw	r3,168(r16)
10004004:	dfc00117 	ldw	ra,4(sp)
10004008:	dc000017 	ldw	r16,0(sp)
1000400c:	dec00204 	addi	sp,sp,8
10004010:	f800283a 	ret

10004014 <strlen>:
10004014:	208000cc 	andi	r2,r4,3
10004018:	10002026 	beq	r2,zero,1000409c <strlen+0x88>
1000401c:	20800007 	ldb	r2,0(r4)
10004020:	10002026 	beq	r2,zero,100040a4 <strlen+0x90>
10004024:	2005883a 	mov	r2,r4
10004028:	00000206 	br	10004034 <strlen+0x20>
1000402c:	10c00007 	ldb	r3,0(r2)
10004030:	18001826 	beq	r3,zero,10004094 <strlen+0x80>
10004034:	10800044 	addi	r2,r2,1
10004038:	10c000cc 	andi	r3,r2,3
1000403c:	183ffb1e 	bne	r3,zero,1000402c <__alt_data_end+0xf800402c>
10004040:	10c00017 	ldw	r3,0(r2)
10004044:	01ffbff4 	movhi	r7,65279
10004048:	39ffbfc4 	addi	r7,r7,-257
1000404c:	00ca303a 	nor	r5,zero,r3
10004050:	01a02074 	movhi	r6,32897
10004054:	19c7883a 	add	r3,r3,r7
10004058:	31a02004 	addi	r6,r6,-32640
1000405c:	1946703a 	and	r3,r3,r5
10004060:	1986703a 	and	r3,r3,r6
10004064:	1800091e 	bne	r3,zero,1000408c <strlen+0x78>
10004068:	10800104 	addi	r2,r2,4
1000406c:	10c00017 	ldw	r3,0(r2)
10004070:	19cb883a 	add	r5,r3,r7
10004074:	00c6303a 	nor	r3,zero,r3
10004078:	28c6703a 	and	r3,r5,r3
1000407c:	1986703a 	and	r3,r3,r6
10004080:	183ff926 	beq	r3,zero,10004068 <__alt_data_end+0xf8004068>
10004084:	00000106 	br	1000408c <strlen+0x78>
10004088:	10800044 	addi	r2,r2,1
1000408c:	10c00007 	ldb	r3,0(r2)
10004090:	183ffd1e 	bne	r3,zero,10004088 <__alt_data_end+0xf8004088>
10004094:	1105c83a 	sub	r2,r2,r4
10004098:	f800283a 	ret
1000409c:	2005883a 	mov	r2,r4
100040a0:	003fe706 	br	10004040 <__alt_data_end+0xf8004040>
100040a4:	0005883a 	mov	r2,zero
100040a8:	f800283a 	ret

100040ac <___vfprintf_internal_r>:
100040ac:	defeb604 	addi	sp,sp,-1320
100040b0:	dfc14915 	stw	ra,1316(sp)
100040b4:	ddc14715 	stw	r23,1308(sp)
100040b8:	dd814615 	stw	r22,1304(sp)
100040bc:	202f883a 	mov	r23,r4
100040c0:	282d883a 	mov	r22,r5
100040c4:	d9812a15 	stw	r6,1192(sp)
100040c8:	d9c12d15 	stw	r7,1204(sp)
100040cc:	df014815 	stw	fp,1312(sp)
100040d0:	dd414515 	stw	r21,1300(sp)
100040d4:	dd014415 	stw	r20,1296(sp)
100040d8:	dcc14315 	stw	r19,1292(sp)
100040dc:	dc814215 	stw	r18,1288(sp)
100040e0:	dc414115 	stw	r17,1284(sp)
100040e4:	dc014015 	stw	r16,1280(sp)
100040e8:	0008d2c0 	call	10008d2c <_localeconv_r>
100040ec:	10800017 	ldw	r2,0(r2)
100040f0:	1009883a 	mov	r4,r2
100040f4:	d8813515 	stw	r2,1236(sp)
100040f8:	00040140 	call	10004014 <strlen>
100040fc:	d8813815 	stw	r2,1248(sp)
10004100:	b8000226 	beq	r23,zero,1000410c <___vfprintf_internal_r+0x60>
10004104:	b8800e17 	ldw	r2,56(r23)
10004108:	10010526 	beq	r2,zero,10004520 <___vfprintf_internal_r+0x474>
1000410c:	b0c0030b 	ldhu	r3,12(r22)
10004110:	1908000c 	andi	r4,r3,8192
10004114:	1805883a 	mov	r2,r3
10004118:	2000071e 	bne	r4,zero,10004138 <___vfprintf_internal_r+0x8c>
1000411c:	b1001917 	ldw	r4,100(r22)
10004120:	18880014 	ori	r2,r3,8192
10004124:	00f7ffc4 	movi	r3,-8193
10004128:	20c8703a 	and	r4,r4,r3
1000412c:	b080030d 	sth	r2,12(r22)
10004130:	1007883a 	mov	r3,r2
10004134:	b1001915 	stw	r4,100(r22)
10004138:	1100020c 	andi	r4,r2,8
1000413c:	2000a826 	beq	r4,zero,100043e0 <___vfprintf_internal_r+0x334>
10004140:	b1000417 	ldw	r4,16(r22)
10004144:	2000a626 	beq	r4,zero,100043e0 <___vfprintf_internal_r+0x334>
10004148:	1080068c 	andi	r2,r2,26
1000414c:	01000284 	movi	r4,10
10004150:	1100ac26 	beq	r2,r4,10004404 <___vfprintf_internal_r+0x358>
10004154:	d8c10e04 	addi	r3,sp,1080
10004158:	d9010dc4 	addi	r4,sp,1079
1000415c:	d9400404 	addi	r5,sp,16
10004160:	05040074 	movhi	r20,4097
10004164:	1905c83a 	sub	r2,r3,r4
10004168:	a5047584 	addi	r20,r20,4566
1000416c:	d8c12815 	stw	r3,1184(sp)
10004170:	d9012915 	stw	r4,1188(sp)
10004174:	d9411e15 	stw	r5,1144(sp)
10004178:	d8012015 	stw	zero,1152(sp)
1000417c:	d8011f15 	stw	zero,1148(sp)
10004180:	d8013315 	stw	zero,1228(sp)
10004184:	d8013715 	stw	zero,1244(sp)
10004188:	d8013915 	stw	zero,1252(sp)
1000418c:	d8013b15 	stw	zero,1260(sp)
10004190:	d8013a15 	stw	zero,1256(sp)
10004194:	d8012f15 	stw	zero,1212(sp)
10004198:	2811883a 	mov	r8,r5
1000419c:	d8813c15 	stw	r2,1264(sp)
100041a0:	d8c12a17 	ldw	r3,1192(sp)
100041a4:	18800007 	ldb	r2,0(r3)
100041a8:	10021326 	beq	r2,zero,100049f8 <___vfprintf_internal_r+0x94c>
100041ac:	00c00944 	movi	r3,37
100041b0:	dc012a17 	ldw	r16,1192(sp)
100041b4:	10c0021e 	bne	r2,r3,100041c0 <___vfprintf_internal_r+0x114>
100041b8:	00001606 	br	10004214 <___vfprintf_internal_r+0x168>
100041bc:	10c08526 	beq	r2,r3,100043d4 <___vfprintf_internal_r+0x328>
100041c0:	84000044 	addi	r16,r16,1
100041c4:	80800007 	ldb	r2,0(r16)
100041c8:	103ffc1e 	bne	r2,zero,100041bc <__alt_data_end+0xf80041bc>
100041cc:	d9012a17 	ldw	r4,1192(sp)
100041d0:	8123c83a 	sub	r17,r16,r4
100041d4:	88000f26 	beq	r17,zero,10004214 <___vfprintf_internal_r+0x168>
100041d8:	d8812a17 	ldw	r2,1192(sp)
100041dc:	d8c12017 	ldw	r3,1152(sp)
100041e0:	44400115 	stw	r17,4(r8)
100041e4:	40800015 	stw	r2,0(r8)
100041e8:	d8811f17 	ldw	r2,1148(sp)
100041ec:	1c47883a 	add	r3,r3,r17
100041f0:	d8c12015 	stw	r3,1152(sp)
100041f4:	10800044 	addi	r2,r2,1
100041f8:	d8811f15 	stw	r2,1148(sp)
100041fc:	00c001c4 	movi	r3,7
10004200:	1880b516 	blt	r3,r2,100044d8 <___vfprintf_internal_r+0x42c>
10004204:	42000204 	addi	r8,r8,8
10004208:	d8c12f17 	ldw	r3,1212(sp)
1000420c:	1c47883a 	add	r3,r3,r17
10004210:	d8c12f15 	stw	r3,1212(sp)
10004214:	80800007 	ldb	r2,0(r16)
10004218:	1000b626 	beq	r2,zero,100044f4 <___vfprintf_internal_r+0x448>
1000421c:	80800044 	addi	r2,r16,1
10004220:	84000047 	ldb	r16,1(r16)
10004224:	0027883a 	mov	r19,zero
10004228:	0039883a 	mov	fp,zero
1000422c:	dcc12b05 	stb	r19,1196(sp)
10004230:	d8012785 	stb	zero,1182(sp)
10004234:	027fffc4 	movi	r9,-1
10004238:	d8012e15 	stw	zero,1208(sp)
1000423c:	04401604 	movi	r17,88
10004240:	04800244 	movi	r18,9
10004244:	da012a15 	stw	r8,1192(sp)
10004248:	e027883a 	mov	r19,fp
1000424c:	17000044 	addi	fp,r2,1
10004250:	80bff804 	addi	r2,r16,-32
10004254:	88831236 	bltu	r17,r2,10004ea0 <___vfprintf_internal_r+0xdf4>
10004258:	100490ba 	slli	r2,r2,2
1000425c:	01040034 	movhi	r4,4096
10004260:	21109c04 	addi	r4,r4,17008
10004264:	1105883a 	add	r2,r2,r4
10004268:	10800017 	ldw	r2,0(r2)
1000426c:	1000683a 	jmp	r2
10004270:	10004dbc 	xorhi	zero,r2,310
10004274:	10004ea0 	cmpeqi	zero,r2,314
10004278:	10004ea0 	cmpeqi	zero,r2,314
1000427c:	10004dd8 	cmpnei	zero,r2,311
10004280:	10004ea0 	cmpeqi	zero,r2,314
10004284:	10004ea0 	cmpeqi	zero,r2,314
10004288:	10004ea0 	cmpeqi	zero,r2,314
1000428c:	10004ea0 	cmpeqi	zero,r2,314
10004290:	10004ea0 	cmpeqi	zero,r2,314
10004294:	10004ea0 	cmpeqi	zero,r2,314
10004298:	10004de8 	cmpgeui	zero,r2,311
1000429c:	10004e10 	cmplti	zero,r2,312
100042a0:	10004ea0 	cmpeqi	zero,r2,314
100042a4:	1000452c 	andhi	zero,r2,276
100042a8:	1000453c 	xorhi	zero,r2,276
100042ac:	10004ea0 	cmpeqi	zero,r2,314
100042b0:	1000458c 	andi	zero,r2,278
100042b4:	1000459c 	xori	zero,r2,278
100042b8:	1000459c 	xori	zero,r2,278
100042bc:	1000459c 	xori	zero,r2,278
100042c0:	1000459c 	xori	zero,r2,278
100042c4:	1000459c 	xori	zero,r2,278
100042c8:	1000459c 	xori	zero,r2,278
100042cc:	1000459c 	xori	zero,r2,278
100042d0:	1000459c 	xori	zero,r2,278
100042d4:	1000459c 	xori	zero,r2,278
100042d8:	10004ea0 	cmpeqi	zero,r2,314
100042dc:	10004ea0 	cmpeqi	zero,r2,314
100042e0:	10004ea0 	cmpeqi	zero,r2,314
100042e4:	10004ea0 	cmpeqi	zero,r2,314
100042e8:	10004ea0 	cmpeqi	zero,r2,314
100042ec:	10004ea0 	cmpeqi	zero,r2,314
100042f0:	10004ea0 	cmpeqi	zero,r2,314
100042f4:	10004ea0 	cmpeqi	zero,r2,314
100042f8:	10004ea0 	cmpeqi	zero,r2,314
100042fc:	10004ea0 	cmpeqi	zero,r2,314
10004300:	100045e0 	cmpeqi	zero,r2,279
10004304:	10004a00 	call	110004a0 <_gp+0xfe5664>
10004308:	10004ea0 	cmpeqi	zero,r2,314
1000430c:	10004a00 	call	110004a0 <_gp+0xfe5664>
10004310:	10004ea0 	cmpeqi	zero,r2,314
10004314:	10004ea0 	cmpeqi	zero,r2,314
10004318:	10004ea0 	cmpeqi	zero,r2,314
1000431c:	10004ea0 	cmpeqi	zero,r2,314
10004320:	10004aa8 	cmpgeui	zero,r2,298
10004324:	10004ea0 	cmpeqi	zero,r2,314
10004328:	10004ea0 	cmpeqi	zero,r2,314
1000432c:	10004ab8 	rdprs	zero,r2,298
10004330:	10004ea0 	cmpeqi	zero,r2,314
10004334:	10004ea0 	cmpeqi	zero,r2,314
10004338:	10004ea0 	cmpeqi	zero,r2,314
1000433c:	10004ea0 	cmpeqi	zero,r2,314
10004340:	10004ea0 	cmpeqi	zero,r2,314
10004344:	10004afc 	xorhi	zero,r2,299
10004348:	10004ea0 	cmpeqi	zero,r2,314
1000434c:	10004ea0 	cmpeqi	zero,r2,314
10004350:	10004b34 	orhi	zero,r2,300
10004354:	10004ea0 	cmpeqi	zero,r2,314
10004358:	10004ea0 	cmpeqi	zero,r2,314
1000435c:	10004ea0 	cmpeqi	zero,r2,314
10004360:	10004ea0 	cmpeqi	zero,r2,314
10004364:	10004ea0 	cmpeqi	zero,r2,314
10004368:	10004ea0 	cmpeqi	zero,r2,314
1000436c:	10004ea0 	cmpeqi	zero,r2,314
10004370:	10004ea0 	cmpeqi	zero,r2,314
10004374:	10004ea0 	cmpeqi	zero,r2,314
10004378:	10004ea0 	cmpeqi	zero,r2,314
1000437c:	10004d70 	cmpltui	zero,r2,309
10004380:	10004d1c 	xori	zero,r2,308
10004384:	10004a00 	call	110004a0 <_gp+0xfe5664>
10004388:	10004a00 	call	110004a0 <_gp+0xfe5664>
1000438c:	10004a00 	call	110004a0 <_gp+0xfe5664>
10004390:	10004d60 	cmpeqi	zero,r2,309
10004394:	10004d1c 	xori	zero,r2,308
10004398:	10004ea0 	cmpeqi	zero,r2,314
1000439c:	10004ea0 	cmpeqi	zero,r2,314
100043a0:	10004c38 	rdprs	zero,r2,304
100043a4:	10004ea0 	cmpeqi	zero,r2,314
100043a8:	10004c50 	cmplti	zero,r2,305
100043ac:	10004c90 	cmplti	zero,r2,306
100043b0:	10004cd0 	cmplti	zero,r2,307
100043b4:	10004b9c 	xori	zero,r2,302
100043b8:	10004ea0 	cmpeqi	zero,r2,314
100043bc:	10004e24 	muli	zero,r2,312
100043c0:	10004ea0 	cmpeqi	zero,r2,314
100043c4:	10004bac 	andhi	zero,r2,302
100043c8:	10004ea0 	cmpeqi	zero,r2,314
100043cc:	10004ea0 	cmpeqi	zero,r2,314
100043d0:	10004bec 	andhi	zero,r2,303
100043d4:	d9412a17 	ldw	r5,1192(sp)
100043d8:	8163c83a 	sub	r17,r16,r5
100043dc:	003f7d06 	br	100041d4 <__alt_data_end+0xf80041d4>
100043e0:	b809883a 	mov	r4,r23
100043e4:	b00b883a 	mov	r5,r22
100043e8:	00061cc0 	call	100061cc <__swsetup_r>
100043ec:	10002d1e 	bne	r2,zero,100044a4 <___vfprintf_internal_r+0x3f8>
100043f0:	b0c0030b 	ldhu	r3,12(r22)
100043f4:	01000284 	movi	r4,10
100043f8:	1805883a 	mov	r2,r3
100043fc:	1080068c 	andi	r2,r2,26
10004400:	113f541e 	bne	r2,r4,10004154 <__alt_data_end+0xf8004154>
10004404:	b080038b 	ldhu	r2,14(r22)
10004408:	113fffcc 	andi	r4,r2,65535
1000440c:	2120001c 	xori	r4,r4,32768
10004410:	21200004 	addi	r4,r4,-32768
10004414:	203f4f16 	blt	r4,zero,10004154 <__alt_data_end+0xf8004154>
10004418:	b2c01917 	ldw	r11,100(r22)
1000441c:	b2800717 	ldw	r10,28(r22)
10004420:	b2400917 	ldw	r9,36(r22)
10004424:	d9812a17 	ldw	r6,1192(sp)
10004428:	d9c12d17 	ldw	r7,1204(sp)
1000442c:	02010004 	movi	r8,1024
10004430:	18ffff4c 	andi	r3,r3,65533
10004434:	d881078d 	sth	r2,1054(sp)
10004438:	b809883a 	mov	r4,r23
1000443c:	d8800404 	addi	r2,sp,16
10004440:	d9410404 	addi	r5,sp,1040
10004444:	d8c1070d 	sth	r3,1052(sp)
10004448:	dac11d15 	stw	r11,1140(sp)
1000444c:	da810b15 	stw	r10,1068(sp)
10004450:	da410d15 	stw	r9,1076(sp)
10004454:	d8810415 	stw	r2,1040(sp)
10004458:	d8810815 	stw	r2,1056(sp)
1000445c:	da010615 	stw	r8,1048(sp)
10004460:	da010915 	stw	r8,1060(sp)
10004464:	d8010a15 	stw	zero,1064(sp)
10004468:	00040ac0 	call	100040ac <___vfprintf_internal_r>
1000446c:	1021883a 	mov	r16,r2
10004470:	10000416 	blt	r2,zero,10004484 <___vfprintf_internal_r+0x3d8>
10004474:	b809883a 	mov	r4,r23
10004478:	d9410404 	addi	r5,sp,1040
1000447c:	0007c4c0 	call	10007c4c <_fflush_r>
10004480:	1007301e 	bne	r2,zero,10006144 <___vfprintf_internal_r+0x2098>
10004484:	d881070b 	ldhu	r2,1052(sp)
10004488:	1080100c 	andi	r2,r2,64
1000448c:	10000326 	beq	r2,zero,1000449c <___vfprintf_internal_r+0x3f0>
10004490:	b080030b 	ldhu	r2,12(r22)
10004494:	10801014 	ori	r2,r2,64
10004498:	b080030d 	sth	r2,12(r22)
1000449c:	8005883a 	mov	r2,r16
100044a0:	00000106 	br	100044a8 <___vfprintf_internal_r+0x3fc>
100044a4:	00bfffc4 	movi	r2,-1
100044a8:	dfc14917 	ldw	ra,1316(sp)
100044ac:	df014817 	ldw	fp,1312(sp)
100044b0:	ddc14717 	ldw	r23,1308(sp)
100044b4:	dd814617 	ldw	r22,1304(sp)
100044b8:	dd414517 	ldw	r21,1300(sp)
100044bc:	dd014417 	ldw	r20,1296(sp)
100044c0:	dcc14317 	ldw	r19,1292(sp)
100044c4:	dc814217 	ldw	r18,1288(sp)
100044c8:	dc414117 	ldw	r17,1284(sp)
100044cc:	dc014017 	ldw	r16,1280(sp)
100044d0:	dec14a04 	addi	sp,sp,1320
100044d4:	f800283a 	ret
100044d8:	b809883a 	mov	r4,r23
100044dc:	b00b883a 	mov	r5,r22
100044e0:	d9811e04 	addi	r6,sp,1144
100044e4:	000b4ec0 	call	1000b4ec <__sprint_r>
100044e8:	1000081e 	bne	r2,zero,1000450c <___vfprintf_internal_r+0x460>
100044ec:	da000404 	addi	r8,sp,16
100044f0:	003f4506 	br	10004208 <__alt_data_end+0xf8004208>
100044f4:	d8812017 	ldw	r2,1152(sp)
100044f8:	10000426 	beq	r2,zero,1000450c <___vfprintf_internal_r+0x460>
100044fc:	b809883a 	mov	r4,r23
10004500:	b00b883a 	mov	r5,r22
10004504:	d9811e04 	addi	r6,sp,1144
10004508:	000b4ec0 	call	1000b4ec <__sprint_r>
1000450c:	b080030b 	ldhu	r2,12(r22)
10004510:	1080100c 	andi	r2,r2,64
10004514:	103fe31e 	bne	r2,zero,100044a4 <__alt_data_end+0xf80044a4>
10004518:	d8812f17 	ldw	r2,1212(sp)
1000451c:	003fe206 	br	100044a8 <__alt_data_end+0xf80044a8>
10004520:	b809883a 	mov	r4,r23
10004524:	00082080 	call	10008208 <__sinit>
10004528:	003ef806 	br	1000410c <__alt_data_end+0xf800410c>
1000452c:	e005883a 	mov	r2,fp
10004530:	9cc00114 	ori	r19,r19,4
10004534:	e4000007 	ldb	r16,0(fp)
10004538:	003f4406 	br	1000424c <__alt_data_end+0xf800424c>
1000453c:	e4000007 	ldb	r16,0(fp)
10004540:	01000a84 	movi	r4,42
10004544:	e0800044 	addi	r2,fp,1
10004548:	8106f626 	beq	r16,r4,10006124 <___vfprintf_internal_r+0x2078>
1000454c:	857ff404 	addi	r21,r16,-48
10004550:	1039883a 	mov	fp,r2
10004554:	0013883a 	mov	r9,zero
10004558:	957f3d36 	bltu	r18,r21,10004250 <__alt_data_end+0xf8004250>
1000455c:	0009883a 	mov	r4,zero
10004560:	01400284 	movi	r5,10
10004564:	0002b140 	call	10002b14 <__mulsi3>
10004568:	e4000007 	ldb	r16,0(fp)
1000456c:	a889883a 	add	r4,r21,r2
10004570:	e7000044 	addi	fp,fp,1
10004574:	857ff404 	addi	r21,r16,-48
10004578:	957ff92e 	bgeu	r18,r21,10004560 <__alt_data_end+0xf8004560>
1000457c:	2013883a 	mov	r9,r4
10004580:	203f330e 	bge	r4,zero,10004250 <__alt_data_end+0xf8004250>
10004584:	027fffc4 	movi	r9,-1
10004588:	003f3106 	br	10004250 <__alt_data_end+0xf8004250>
1000458c:	9cc02014 	ori	r19,r19,128
10004590:	e005883a 	mov	r2,fp
10004594:	e4000007 	ldb	r16,0(fp)
10004598:	003f2c06 	br	1000424c <__alt_data_end+0xf800424c>
1000459c:	857ff404 	addi	r21,r16,-48
100045a0:	d8012e15 	stw	zero,1208(sp)
100045a4:	e021883a 	mov	r16,fp
100045a8:	0009883a 	mov	r4,zero
100045ac:	da412c15 	stw	r9,1200(sp)
100045b0:	01400284 	movi	r5,10
100045b4:	0002b140 	call	10002b14 <__mulsi3>
100045b8:	81400007 	ldb	r5,0(r16)
100045bc:	1549883a 	add	r4,r2,r21
100045c0:	e7000044 	addi	fp,fp,1
100045c4:	2d7ff404 	addi	r21,r5,-48
100045c8:	e021883a 	mov	r16,fp
100045cc:	957ff82e 	bgeu	r18,r21,100045b0 <__alt_data_end+0xf80045b0>
100045d0:	2821883a 	mov	r16,r5
100045d4:	d9012e15 	stw	r4,1208(sp)
100045d8:	da412c17 	ldw	r9,1200(sp)
100045dc:	003f1c06 	br	10004250 <__alt_data_end+0xf8004250>
100045e0:	da012a17 	ldw	r8,1192(sp)
100045e4:	df012a15 	stw	fp,1192(sp)
100045e8:	9839883a 	mov	fp,r19
100045ec:	dcc12b03 	ldbu	r19,1196(sp)
100045f0:	e7000414 	ori	fp,fp,16
100045f4:	e080080c 	andi	r2,fp,32
100045f8:	dcc12785 	stb	r19,1182(sp)
100045fc:	d8c12d17 	ldw	r3,1204(sp)
10004600:	1001ce26 	beq	r2,zero,10004d3c <___vfprintf_internal_r+0xc90>
10004604:	d9012d17 	ldw	r4,1204(sp)
10004608:	18800117 	ldw	r2,4(r3)
1000460c:	1c800017 	ldw	r18,0(r3)
10004610:	21000204 	addi	r4,r4,8
10004614:	d9012d15 	stw	r4,1204(sp)
10004618:	102b883a 	mov	r21,r2
1000461c:	10044916 	blt	r2,zero,10005744 <___vfprintf_internal_r+0x1698>
10004620:	dcc12783 	ldbu	r19,1182(sp)
10004624:	da413215 	stw	r9,1224(sp)
10004628:	00800044 	movi	r2,1
1000462c:	9546b03a 	or	r3,r18,r21
10004630:	48000216 	blt	r9,zero,1000463c <___vfprintf_internal_r+0x590>
10004634:	013fdfc4 	movi	r4,-129
10004638:	e138703a 	and	fp,fp,r4
1000463c:	1802251e 	bne	r3,zero,10004ed4 <___vfprintf_internal_r+0xe28>
10004640:	48031726 	beq	r9,zero,100052a0 <___vfprintf_internal_r+0x11f4>
10004644:	10803fcc 	andi	r2,r2,255
10004648:	00c00044 	movi	r3,1
1000464c:	10c24526 	beq	r2,r3,10004f64 <___vfprintf_internal_r+0xeb8>
10004650:	00c00084 	movi	r3,2
10004654:	10c33426 	beq	r2,r3,10005328 <___vfprintf_internal_r+0x127c>
10004658:	d8c10e04 	addi	r3,sp,1080
1000465c:	9008d0fa 	srli	r4,r18,3
10004660:	a80a977a 	slli	r5,r21,29
10004664:	a82ad0fa 	srli	r21,r21,3
10004668:	948001cc 	andi	r18,r18,7
1000466c:	90800c04 	addi	r2,r18,48
10004670:	18ffffc4 	addi	r3,r3,-1
10004674:	2924b03a 	or	r18,r5,r4
10004678:	18800005 	stb	r2,0(r3)
1000467c:	9548b03a 	or	r4,r18,r21
10004680:	203ff61e 	bne	r4,zero,1000465c <__alt_data_end+0xf800465c>
10004684:	e100004c 	andi	r4,fp,1
10004688:	d8c13115 	stw	r3,1220(sp)
1000468c:	20039a1e 	bne	r4,zero,100054f8 <___vfprintf_internal_r+0x144c>
10004690:	d8812817 	ldw	r2,1184(sp)
10004694:	10e3c83a 	sub	r17,r2,r3
10004698:	8805883a 	mov	r2,r17
1000469c:	8a40010e 	bge	r17,r9,100046a4 <___vfprintf_internal_r+0x5f8>
100046a0:	4805883a 	mov	r2,r9
100046a4:	d8812b15 	stw	r2,1196(sp)
100046a8:	d8013415 	stw	zero,1232(sp)
100046ac:	98803fcc 	andi	r2,r19,255
100046b0:	1080201c 	xori	r2,r2,128
100046b4:	10bfe004 	addi	r2,r2,-128
100046b8:	10000326 	beq	r2,zero,100046c8 <___vfprintf_internal_r+0x61c>
100046bc:	d8c12b17 	ldw	r3,1196(sp)
100046c0:	18c00044 	addi	r3,r3,1
100046c4:	d8c12b15 	stw	r3,1196(sp)
100046c8:	e0c0008c 	andi	r3,fp,2
100046cc:	d8c12c15 	stw	r3,1200(sp)
100046d0:	18000326 	beq	r3,zero,100046e0 <___vfprintf_internal_r+0x634>
100046d4:	d8c12b17 	ldw	r3,1196(sp)
100046d8:	18c00084 	addi	r3,r3,2
100046dc:	d8c12b15 	stw	r3,1196(sp)
100046e0:	e0c0210c 	andi	r3,fp,132
100046e4:	d8c13015 	stw	r3,1216(sp)
100046e8:	1801f81e 	bne	r3,zero,10004ecc <___vfprintf_internal_r+0xe20>
100046ec:	d9012e17 	ldw	r4,1208(sp)
100046f0:	d8c12b17 	ldw	r3,1196(sp)
100046f4:	20ebc83a 	sub	r21,r4,r3
100046f8:	0541f40e 	bge	zero,r21,10004ecc <___vfprintf_internal_r+0xe20>
100046fc:	02400404 	movi	r9,16
10004700:	d8c12017 	ldw	r3,1152(sp)
10004704:	d8811f17 	ldw	r2,1148(sp)
10004708:	4d45750e 	bge	r9,r21,10005ce0 <___vfprintf_internal_r+0x1c34>
1000470c:	01440074 	movhi	r5,4097
10004710:	29447984 	addi	r5,r5,4582
10004714:	d9413615 	stw	r5,1240(sp)
10004718:	4827883a 	mov	r19,r9
1000471c:	048001c4 	movi	r18,7
10004720:	00000306 	br	10004730 <___vfprintf_internal_r+0x684>
10004724:	ad7ffc04 	addi	r21,r21,-16
10004728:	42000204 	addi	r8,r8,8
1000472c:	9d40130e 	bge	r19,r21,1000477c <___vfprintf_internal_r+0x6d0>
10004730:	01040074 	movhi	r4,4097
10004734:	18c00404 	addi	r3,r3,16
10004738:	10800044 	addi	r2,r2,1
1000473c:	21047984 	addi	r4,r4,4582
10004740:	41000015 	stw	r4,0(r8)
10004744:	44c00115 	stw	r19,4(r8)
10004748:	d8c12015 	stw	r3,1152(sp)
1000474c:	d8811f15 	stw	r2,1148(sp)
10004750:	90bff40e 	bge	r18,r2,10004724 <__alt_data_end+0xf8004724>
10004754:	b809883a 	mov	r4,r23
10004758:	b00b883a 	mov	r5,r22
1000475c:	d9811e04 	addi	r6,sp,1144
10004760:	000b4ec0 	call	1000b4ec <__sprint_r>
10004764:	103f691e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10004768:	ad7ffc04 	addi	r21,r21,-16
1000476c:	d8c12017 	ldw	r3,1152(sp)
10004770:	d8811f17 	ldw	r2,1148(sp)
10004774:	da000404 	addi	r8,sp,16
10004778:	9d7fed16 	blt	r19,r21,10004730 <__alt_data_end+0xf8004730>
1000477c:	d9413617 	ldw	r5,1240(sp)
10004780:	a8c7883a 	add	r3,r21,r3
10004784:	10800044 	addi	r2,r2,1
10004788:	41400015 	stw	r5,0(r8)
1000478c:	45400115 	stw	r21,4(r8)
10004790:	d8c12015 	stw	r3,1152(sp)
10004794:	d8811f15 	stw	r2,1148(sp)
10004798:	010001c4 	movi	r4,7
1000479c:	20832b16 	blt	r4,r2,1000544c <___vfprintf_internal_r+0x13a0>
100047a0:	d8812787 	ldb	r2,1182(sp)
100047a4:	42000204 	addi	r8,r8,8
100047a8:	10000c26 	beq	r2,zero,100047dc <___vfprintf_internal_r+0x730>
100047ac:	d8811f17 	ldw	r2,1148(sp)
100047b0:	d9012784 	addi	r4,sp,1182
100047b4:	18c00044 	addi	r3,r3,1
100047b8:	10800044 	addi	r2,r2,1
100047bc:	41000015 	stw	r4,0(r8)
100047c0:	01000044 	movi	r4,1
100047c4:	41000115 	stw	r4,4(r8)
100047c8:	d8c12015 	stw	r3,1152(sp)
100047cc:	d8811f15 	stw	r2,1148(sp)
100047d0:	010001c4 	movi	r4,7
100047d4:	2082c416 	blt	r4,r2,100052e8 <___vfprintf_internal_r+0x123c>
100047d8:	42000204 	addi	r8,r8,8
100047dc:	d8812c17 	ldw	r2,1200(sp)
100047e0:	10000c26 	beq	r2,zero,10004814 <___vfprintf_internal_r+0x768>
100047e4:	d8811f17 	ldw	r2,1148(sp)
100047e8:	d9012704 	addi	r4,sp,1180
100047ec:	18c00084 	addi	r3,r3,2
100047f0:	10800044 	addi	r2,r2,1
100047f4:	41000015 	stw	r4,0(r8)
100047f8:	01000084 	movi	r4,2
100047fc:	41000115 	stw	r4,4(r8)
10004800:	d8c12015 	stw	r3,1152(sp)
10004804:	d8811f15 	stw	r2,1148(sp)
10004808:	010001c4 	movi	r4,7
1000480c:	2082be16 	blt	r4,r2,10005308 <___vfprintf_internal_r+0x125c>
10004810:	42000204 	addi	r8,r8,8
10004814:	d9013017 	ldw	r4,1216(sp)
10004818:	00802004 	movi	r2,128
1000481c:	20822026 	beq	r4,r2,100050a0 <___vfprintf_internal_r+0xff4>
10004820:	d9413217 	ldw	r5,1224(sp)
10004824:	2c67c83a 	sub	r19,r5,r17
10004828:	04c0260e 	bge	zero,r19,100048c4 <___vfprintf_internal_r+0x818>
1000482c:	05400404 	movi	r21,16
10004830:	d8811f17 	ldw	r2,1148(sp)
10004834:	acc4720e 	bge	r21,r19,10005a00 <___vfprintf_internal_r+0x1954>
10004838:	01440074 	movhi	r5,4097
1000483c:	29447584 	addi	r5,r5,4566
10004840:	d9412c15 	stw	r5,1200(sp)
10004844:	048001c4 	movi	r18,7
10004848:	00000306 	br	10004858 <___vfprintf_internal_r+0x7ac>
1000484c:	9cfffc04 	addi	r19,r19,-16
10004850:	42000204 	addi	r8,r8,8
10004854:	acc0110e 	bge	r21,r19,1000489c <___vfprintf_internal_r+0x7f0>
10004858:	18c00404 	addi	r3,r3,16
1000485c:	10800044 	addi	r2,r2,1
10004860:	45000015 	stw	r20,0(r8)
10004864:	45400115 	stw	r21,4(r8)
10004868:	d8c12015 	stw	r3,1152(sp)
1000486c:	d8811f15 	stw	r2,1148(sp)
10004870:	90bff60e 	bge	r18,r2,1000484c <__alt_data_end+0xf800484c>
10004874:	b809883a 	mov	r4,r23
10004878:	b00b883a 	mov	r5,r22
1000487c:	d9811e04 	addi	r6,sp,1144
10004880:	000b4ec0 	call	1000b4ec <__sprint_r>
10004884:	103f211e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10004888:	9cfffc04 	addi	r19,r19,-16
1000488c:	d8c12017 	ldw	r3,1152(sp)
10004890:	d8811f17 	ldw	r2,1148(sp)
10004894:	da000404 	addi	r8,sp,16
10004898:	acffef16 	blt	r21,r19,10004858 <__alt_data_end+0xf8004858>
1000489c:	d9012c17 	ldw	r4,1200(sp)
100048a0:	1cc7883a 	add	r3,r3,r19
100048a4:	10800044 	addi	r2,r2,1
100048a8:	41000015 	stw	r4,0(r8)
100048ac:	44c00115 	stw	r19,4(r8)
100048b0:	d8c12015 	stw	r3,1152(sp)
100048b4:	d8811f15 	stw	r2,1148(sp)
100048b8:	010001c4 	movi	r4,7
100048bc:	20828216 	blt	r4,r2,100052c8 <___vfprintf_internal_r+0x121c>
100048c0:	42000204 	addi	r8,r8,8
100048c4:	e080400c 	andi	r2,fp,256
100048c8:	1001ac1e 	bne	r2,zero,10004f7c <___vfprintf_internal_r+0xed0>
100048cc:	d8811f17 	ldw	r2,1148(sp)
100048d0:	d9413117 	ldw	r5,1220(sp)
100048d4:	1c47883a 	add	r3,r3,r17
100048d8:	10800044 	addi	r2,r2,1
100048dc:	41400015 	stw	r5,0(r8)
100048e0:	44400115 	stw	r17,4(r8)
100048e4:	d8c12015 	stw	r3,1152(sp)
100048e8:	d8811f15 	stw	r2,1148(sp)
100048ec:	010001c4 	movi	r4,7
100048f0:	20825d16 	blt	r4,r2,10005268 <___vfprintf_internal_r+0x11bc>
100048f4:	42000204 	addi	r8,r8,8
100048f8:	e080010c 	andi	r2,fp,4
100048fc:	10003126 	beq	r2,zero,100049c4 <___vfprintf_internal_r+0x918>
10004900:	d8812e17 	ldw	r2,1208(sp)
10004904:	d9012b17 	ldw	r4,1196(sp)
10004908:	1121c83a 	sub	r16,r2,r4
1000490c:	04002d0e 	bge	zero,r16,100049c4 <___vfprintf_internal_r+0x918>
10004910:	04400404 	movi	r17,16
10004914:	d8811f17 	ldw	r2,1148(sp)
10004918:	8c05340e 	bge	r17,r16,10005dec <___vfprintf_internal_r+0x1d40>
1000491c:	01040074 	movhi	r4,4097
10004920:	21047984 	addi	r4,r4,4582
10004924:	d9013615 	stw	r4,1240(sp)
10004928:	048001c4 	movi	r18,7
1000492c:	00000306 	br	1000493c <___vfprintf_internal_r+0x890>
10004930:	843ffc04 	addi	r16,r16,-16
10004934:	42000204 	addi	r8,r8,8
10004938:	8c00130e 	bge	r17,r16,10004988 <___vfprintf_internal_r+0x8dc>
1000493c:	01440074 	movhi	r5,4097
10004940:	18c00404 	addi	r3,r3,16
10004944:	10800044 	addi	r2,r2,1
10004948:	29447984 	addi	r5,r5,4582
1000494c:	41400015 	stw	r5,0(r8)
10004950:	44400115 	stw	r17,4(r8)
10004954:	d8c12015 	stw	r3,1152(sp)
10004958:	d8811f15 	stw	r2,1148(sp)
1000495c:	90bff40e 	bge	r18,r2,10004930 <__alt_data_end+0xf8004930>
10004960:	b809883a 	mov	r4,r23
10004964:	b00b883a 	mov	r5,r22
10004968:	d9811e04 	addi	r6,sp,1144
1000496c:	000b4ec0 	call	1000b4ec <__sprint_r>
10004970:	103ee61e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10004974:	843ffc04 	addi	r16,r16,-16
10004978:	d8c12017 	ldw	r3,1152(sp)
1000497c:	d8811f17 	ldw	r2,1148(sp)
10004980:	da000404 	addi	r8,sp,16
10004984:	8c3fed16 	blt	r17,r16,1000493c <__alt_data_end+0xf800493c>
10004988:	d9013617 	ldw	r4,1240(sp)
1000498c:	1c07883a 	add	r3,r3,r16
10004990:	10800044 	addi	r2,r2,1
10004994:	41000015 	stw	r4,0(r8)
10004998:	44000115 	stw	r16,4(r8)
1000499c:	d8c12015 	stw	r3,1152(sp)
100049a0:	d8811f15 	stw	r2,1148(sp)
100049a4:	010001c4 	movi	r4,7
100049a8:	2080060e 	bge	r4,r2,100049c4 <___vfprintf_internal_r+0x918>
100049ac:	b809883a 	mov	r4,r23
100049b0:	b00b883a 	mov	r5,r22
100049b4:	d9811e04 	addi	r6,sp,1144
100049b8:	000b4ec0 	call	1000b4ec <__sprint_r>
100049bc:	103ed31e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
100049c0:	d8c12017 	ldw	r3,1152(sp)
100049c4:	df012b17 	ldw	fp,1196(sp)
100049c8:	d9412e17 	ldw	r5,1208(sp)
100049cc:	e140010e 	bge	fp,r5,100049d4 <___vfprintf_internal_r+0x928>
100049d0:	2839883a 	mov	fp,r5
100049d4:	d8812f17 	ldw	r2,1212(sp)
100049d8:	1705883a 	add	r2,r2,fp
100049dc:	d8812f15 	stw	r2,1212(sp)
100049e0:	1802291e 	bne	r3,zero,10005288 <___vfprintf_internal_r+0x11dc>
100049e4:	d8c12a17 	ldw	r3,1192(sp)
100049e8:	d8011f15 	stw	zero,1148(sp)
100049ec:	da000404 	addi	r8,sp,16
100049f0:	18800007 	ldb	r2,0(r3)
100049f4:	103ded1e 	bne	r2,zero,100041ac <__alt_data_end+0xf80041ac>
100049f8:	dc012a17 	ldw	r16,1192(sp)
100049fc:	003e0506 	br	10004214 <__alt_data_end+0xf8004214>
10004a00:	d9012d17 	ldw	r4,1204(sp)
10004a04:	d9412d17 	ldw	r5,1204(sp)
10004a08:	da012a17 	ldw	r8,1192(sp)
10004a0c:	21000017 	ldw	r4,0(r4)
10004a10:	29400117 	ldw	r5,4(r5)
10004a14:	df012a15 	stw	fp,1192(sp)
10004a18:	9839883a 	mov	fp,r19
10004a1c:	dcc12b03 	ldbu	r19,1196(sp)
10004a20:	d9013715 	stw	r4,1244(sp)
10004a24:	d9413915 	stw	r5,1252(sp)
10004a28:	da013f15 	stw	r8,1276(sp)
10004a2c:	da413e15 	stw	r9,1272(sp)
10004a30:	dcc12785 	stb	r19,1182(sp)
10004a34:	000b1480 	call	1000b148 <__fpclassifyd>
10004a38:	d8c12d17 	ldw	r3,1204(sp)
10004a3c:	04400044 	movi	r17,1
10004a40:	da013f17 	ldw	r8,1276(sp)
10004a44:	1c800204 	addi	r18,r3,8
10004a48:	da413e17 	ldw	r9,1272(sp)
10004a4c:	d9013717 	ldw	r4,1244(sp)
10004a50:	d9413917 	ldw	r5,1252(sp)
10004a54:	1443451e 	bne	r2,r17,1000576c <___vfprintf_internal_r+0x16c0>
10004a58:	000d883a 	mov	r6,zero
10004a5c:	000f883a 	mov	r7,zero
10004a60:	000de880 	call	1000de88 <__ledf2>
10004a64:	da013f17 	ldw	r8,1276(sp)
10004a68:	1004fe16 	blt	r2,zero,10005e64 <___vfprintf_internal_r+0x1db8>
10004a6c:	dcc12783 	ldbu	r19,1182(sp)
10004a70:	008011c4 	movi	r2,71
10004a74:	14045d0e 	bge	r2,r16,10005bec <___vfprintf_internal_r+0x1b40>
10004a78:	01440074 	movhi	r5,4097
10004a7c:	29446604 	addi	r5,r5,4504
10004a80:	d9413115 	stw	r5,1220(sp)
10004a84:	00c000c4 	movi	r3,3
10004a88:	00bfdfc4 	movi	r2,-129
10004a8c:	d8c12b15 	stw	r3,1196(sp)
10004a90:	e0b8703a 	and	fp,fp,r2
10004a94:	dc812d15 	stw	r18,1204(sp)
10004a98:	1823883a 	mov	r17,r3
10004a9c:	d8013215 	stw	zero,1224(sp)
10004aa0:	d8013415 	stw	zero,1232(sp)
10004aa4:	003f0106 	br	100046ac <__alt_data_end+0xf80046ac>
10004aa8:	9cc00214 	ori	r19,r19,8
10004aac:	e005883a 	mov	r2,fp
10004ab0:	e4000007 	ldb	r16,0(fp)
10004ab4:	003de506 	br	1000424c <__alt_data_end+0xf800424c>
10004ab8:	da012a17 	ldw	r8,1192(sp)
10004abc:	df012a15 	stw	fp,1192(sp)
10004ac0:	9f000414 	ori	fp,r19,16
10004ac4:	e0c0080c 	andi	r3,fp,32
10004ac8:	d8812d17 	ldw	r2,1204(sp)
10004acc:	18007626 	beq	r3,zero,10004ca8 <___vfprintf_internal_r+0xbfc>
10004ad0:	d9412d17 	ldw	r5,1204(sp)
10004ad4:	14800017 	ldw	r18,0(r2)
10004ad8:	15400117 	ldw	r21,4(r2)
10004adc:	29400204 	addi	r5,r5,8
10004ae0:	d9412d15 	stw	r5,1204(sp)
10004ae4:	0005883a 	mov	r2,zero
10004ae8:	9546b03a 	or	r3,r18,r21
10004aec:	d8012785 	stb	zero,1182(sp)
10004af0:	da413215 	stw	r9,1224(sp)
10004af4:	0027883a 	mov	r19,zero
10004af8:	003ecd06 	br	10004630 <__alt_data_end+0xf8004630>
10004afc:	da012a17 	ldw	r8,1192(sp)
10004b00:	df012a15 	stw	fp,1192(sp)
10004b04:	9f000414 	ori	fp,r19,16
10004b08:	e0c0080c 	andi	r3,fp,32
10004b0c:	d8812d17 	ldw	r2,1204(sp)
10004b10:	18002c26 	beq	r3,zero,10004bc4 <___vfprintf_internal_r+0xb18>
10004b14:	d9012d17 	ldw	r4,1204(sp)
10004b18:	14800017 	ldw	r18,0(r2)
10004b1c:	15400117 	ldw	r21,4(r2)
10004b20:	21000204 	addi	r4,r4,8
10004b24:	d9012d15 	stw	r4,1204(sp)
10004b28:	00800044 	movi	r2,1
10004b2c:	9546b03a 	or	r3,r18,r21
10004b30:	003fee06 	br	10004aec <__alt_data_end+0xf8004aec>
10004b34:	da012a17 	ldw	r8,1192(sp)
10004b38:	df012a15 	stw	fp,1192(sp)
10004b3c:	9839883a 	mov	fp,r19
10004b40:	dcc12b03 	ldbu	r19,1196(sp)
10004b44:	01440074 	movhi	r5,4097
10004b48:	29446904 	addi	r5,r5,4516
10004b4c:	dcc12785 	stb	r19,1182(sp)
10004b50:	d9413b15 	stw	r5,1260(sp)
10004b54:	e0c0080c 	andi	r3,fp,32
10004b58:	d8812d17 	ldw	r2,1204(sp)
10004b5c:	18002e26 	beq	r3,zero,10004c18 <___vfprintf_internal_r+0xb6c>
10004b60:	d9412d17 	ldw	r5,1204(sp)
10004b64:	14800017 	ldw	r18,0(r2)
10004b68:	15400117 	ldw	r21,4(r2)
10004b6c:	29400204 	addi	r5,r5,8
10004b70:	d9412d15 	stw	r5,1204(sp)
10004b74:	e080004c 	andi	r2,fp,1
10004b78:	10025c26 	beq	r2,zero,100054ec <___vfprintf_internal_r+0x1440>
10004b7c:	9546b03a 	or	r3,r18,r21
10004b80:	18038f26 	beq	r3,zero,100059c0 <___vfprintf_internal_r+0x1914>
10004b84:	00800c04 	movi	r2,48
10004b88:	d8812705 	stb	r2,1180(sp)
10004b8c:	dc012745 	stb	r16,1181(sp)
10004b90:	e7000094 	ori	fp,fp,2
10004b94:	00800084 	movi	r2,2
10004b98:	003fd406 	br	10004aec <__alt_data_end+0xf8004aec>
10004b9c:	9cc00814 	ori	r19,r19,32
10004ba0:	e005883a 	mov	r2,fp
10004ba4:	e4000007 	ldb	r16,0(fp)
10004ba8:	003da806 	br	1000424c <__alt_data_end+0xf800424c>
10004bac:	da012a17 	ldw	r8,1192(sp)
10004bb0:	df012a15 	stw	fp,1192(sp)
10004bb4:	9839883a 	mov	fp,r19
10004bb8:	e0c0080c 	andi	r3,fp,32
10004bbc:	d8812d17 	ldw	r2,1204(sp)
10004bc0:	183fd41e 	bne	r3,zero,10004b14 <__alt_data_end+0xf8004b14>
10004bc4:	e0c0040c 	andi	r3,fp,16
10004bc8:	18035f26 	beq	r3,zero,10005948 <___vfprintf_internal_r+0x189c>
10004bcc:	d9412d17 	ldw	r5,1204(sp)
10004bd0:	14800017 	ldw	r18,0(r2)
10004bd4:	002b883a 	mov	r21,zero
10004bd8:	29400104 	addi	r5,r5,4
10004bdc:	d9412d15 	stw	r5,1204(sp)
10004be0:	00800044 	movi	r2,1
10004be4:	9007883a 	mov	r3,r18
10004be8:	003fc006 	br	10004aec <__alt_data_end+0xf8004aec>
10004bec:	da012a17 	ldw	r8,1192(sp)
10004bf0:	df012a15 	stw	fp,1192(sp)
10004bf4:	9839883a 	mov	fp,r19
10004bf8:	dcc12b03 	ldbu	r19,1196(sp)
10004bfc:	01040074 	movhi	r4,4097
10004c00:	21046e04 	addi	r4,r4,4536
10004c04:	d9013b15 	stw	r4,1260(sp)
10004c08:	dcc12785 	stb	r19,1182(sp)
10004c0c:	e0c0080c 	andi	r3,fp,32
10004c10:	d8812d17 	ldw	r2,1204(sp)
10004c14:	183fd21e 	bne	r3,zero,10004b60 <__alt_data_end+0xf8004b60>
10004c18:	e0c0040c 	andi	r3,fp,16
10004c1c:	18035426 	beq	r3,zero,10005970 <___vfprintf_internal_r+0x18c4>
10004c20:	d8c12d17 	ldw	r3,1204(sp)
10004c24:	14800017 	ldw	r18,0(r2)
10004c28:	002b883a 	mov	r21,zero
10004c2c:	18c00104 	addi	r3,r3,4
10004c30:	d8c12d15 	stw	r3,1204(sp)
10004c34:	003fcf06 	br	10004b74 <__alt_data_end+0xf8004b74>
10004c38:	e4000007 	ldb	r16,0(fp)
10004c3c:	00801b04 	movi	r2,108
10004c40:	8083f726 	beq	r16,r2,10005c20 <___vfprintf_internal_r+0x1b74>
10004c44:	9cc00414 	ori	r19,r19,16
10004c48:	e005883a 	mov	r2,fp
10004c4c:	003d7f06 	br	1000424c <__alt_data_end+0xf800424c>
10004c50:	da012a17 	ldw	r8,1192(sp)
10004c54:	df012a15 	stw	fp,1192(sp)
10004c58:	9839883a 	mov	fp,r19
10004c5c:	dcc12b03 	ldbu	r19,1196(sp)
10004c60:	e080080c 	andi	r2,fp,32
10004c64:	dcc12785 	stb	r19,1182(sp)
10004c68:	10032226 	beq	r2,zero,100058f4 <___vfprintf_internal_r+0x1848>
10004c6c:	d9412d17 	ldw	r5,1204(sp)
10004c70:	d9012f17 	ldw	r4,1212(sp)
10004c74:	28800017 	ldw	r2,0(r5)
10004c78:	2007d7fa 	srai	r3,r4,31
10004c7c:	29400104 	addi	r5,r5,4
10004c80:	d9412d15 	stw	r5,1204(sp)
10004c84:	11000015 	stw	r4,0(r2)
10004c88:	10c00115 	stw	r3,4(r2)
10004c8c:	003d4406 	br	100041a0 <__alt_data_end+0xf80041a0>
10004c90:	da012a17 	ldw	r8,1192(sp)
10004c94:	df012a15 	stw	fp,1192(sp)
10004c98:	9839883a 	mov	fp,r19
10004c9c:	e0c0080c 	andi	r3,fp,32
10004ca0:	d8812d17 	ldw	r2,1204(sp)
10004ca4:	183f8a1e 	bne	r3,zero,10004ad0 <__alt_data_end+0xf8004ad0>
10004ca8:	e0c0040c 	andi	r3,fp,16
10004cac:	18031c26 	beq	r3,zero,10005920 <___vfprintf_internal_r+0x1874>
10004cb0:	14800017 	ldw	r18,0(r2)
10004cb4:	d8812d17 	ldw	r2,1204(sp)
10004cb8:	002b883a 	mov	r21,zero
10004cbc:	9007883a 	mov	r3,r18
10004cc0:	10800104 	addi	r2,r2,4
10004cc4:	d8812d15 	stw	r2,1204(sp)
10004cc8:	0005883a 	mov	r2,zero
10004ccc:	003f8706 	br	10004aec <__alt_data_end+0xf8004aec>
10004cd0:	d9412d17 	ldw	r5,1204(sp)
10004cd4:	00800c04 	movi	r2,48
10004cd8:	d8812705 	stb	r2,1180(sp)
10004cdc:	2c800017 	ldw	r18,0(r5)
10004ce0:	00801e04 	movi	r2,120
10004ce4:	d8812745 	stb	r2,1181(sp)
10004ce8:	00840074 	movhi	r2,4097
10004cec:	10846e04 	addi	r2,r2,4536
10004cf0:	29400104 	addi	r5,r5,4
10004cf4:	da012a17 	ldw	r8,1192(sp)
10004cf8:	d8813b15 	stw	r2,1260(sp)
10004cfc:	df012a15 	stw	fp,1192(sp)
10004d00:	002b883a 	mov	r21,zero
10004d04:	9f000094 	ori	fp,r19,2
10004d08:	d9412d15 	stw	r5,1204(sp)
10004d0c:	00800084 	movi	r2,2
10004d10:	04001e04 	movi	r16,120
10004d14:	9007883a 	mov	r3,r18
10004d18:	003f7406 	br	10004aec <__alt_data_end+0xf8004aec>
10004d1c:	da012a17 	ldw	r8,1192(sp)
10004d20:	df012a15 	stw	fp,1192(sp)
10004d24:	9839883a 	mov	fp,r19
10004d28:	dcc12b03 	ldbu	r19,1196(sp)
10004d2c:	e080080c 	andi	r2,fp,32
10004d30:	d8c12d17 	ldw	r3,1204(sp)
10004d34:	dcc12785 	stb	r19,1182(sp)
10004d38:	103e321e 	bne	r2,zero,10004604 <__alt_data_end+0xf8004604>
10004d3c:	e080040c 	andi	r2,fp,16
10004d40:	10031326 	beq	r2,zero,10005990 <___vfprintf_internal_r+0x18e4>
10004d44:	1c800017 	ldw	r18,0(r3)
10004d48:	d9412d17 	ldw	r5,1204(sp)
10004d4c:	902bd7fa 	srai	r21,r18,31
10004d50:	29400104 	addi	r5,r5,4
10004d54:	d9412d15 	stw	r5,1204(sp)
10004d58:	a805883a 	mov	r2,r21
10004d5c:	003e2f06 	br	1000461c <__alt_data_end+0xf800461c>
10004d60:	9cc01014 	ori	r19,r19,64
10004d64:	e005883a 	mov	r2,fp
10004d68:	e4000007 	ldb	r16,0(fp)
10004d6c:	003d3706 	br	1000424c <__alt_data_end+0xf800424c>
10004d70:	d8c12d17 	ldw	r3,1204(sp)
10004d74:	d9012d17 	ldw	r4,1204(sp)
10004d78:	da012a17 	ldw	r8,1192(sp)
10004d7c:	18800017 	ldw	r2,0(r3)
10004d80:	21000104 	addi	r4,r4,4
10004d84:	00c00044 	movi	r3,1
10004d88:	df012a15 	stw	fp,1192(sp)
10004d8c:	d8c12b15 	stw	r3,1196(sp)
10004d90:	9839883a 	mov	fp,r19
10004d94:	d8012785 	stb	zero,1182(sp)
10004d98:	d8810405 	stb	r2,1040(sp)
10004d9c:	d9012d15 	stw	r4,1204(sp)
10004da0:	1823883a 	mov	r17,r3
10004da4:	d8c10404 	addi	r3,sp,1040
10004da8:	d8013215 	stw	zero,1224(sp)
10004dac:	d8013415 	stw	zero,1232(sp)
10004db0:	d8c13115 	stw	r3,1220(sp)
10004db4:	0005883a 	mov	r2,zero
10004db8:	003e4306 	br	100046c8 <__alt_data_end+0xf80046c8>
10004dbc:	d8812b07 	ldb	r2,1196(sp)
10004dc0:	1002fc1e 	bne	r2,zero,100059b4 <___vfprintf_internal_r+0x1908>
10004dc4:	00c00804 	movi	r3,32
10004dc8:	d8c12b05 	stb	r3,1196(sp)
10004dcc:	e005883a 	mov	r2,fp
10004dd0:	e4000007 	ldb	r16,0(fp)
10004dd4:	003d1d06 	br	1000424c <__alt_data_end+0xf800424c>
10004dd8:	9cc00054 	ori	r19,r19,1
10004ddc:	e005883a 	mov	r2,fp
10004de0:	e4000007 	ldb	r16,0(fp)
10004de4:	003d1906 	br	1000424c <__alt_data_end+0xf800424c>
10004de8:	d9012d17 	ldw	r4,1204(sp)
10004dec:	d9412d17 	ldw	r5,1204(sp)
10004df0:	21000017 	ldw	r4,0(r4)
10004df4:	28c00104 	addi	r3,r5,4
10004df8:	d9012e15 	stw	r4,1208(sp)
10004dfc:	20038c16 	blt	r4,zero,10005c30 <___vfprintf_internal_r+0x1b84>
10004e00:	d8c12d15 	stw	r3,1204(sp)
10004e04:	e005883a 	mov	r2,fp
10004e08:	e4000007 	ldb	r16,0(fp)
10004e0c:	003d0f06 	br	1000424c <__alt_data_end+0xf800424c>
10004e10:	00c00ac4 	movi	r3,43
10004e14:	d8c12b05 	stb	r3,1196(sp)
10004e18:	e005883a 	mov	r2,fp
10004e1c:	e4000007 	ldb	r16,0(fp)
10004e20:	003d0a06 	br	1000424c <__alt_data_end+0xf800424c>
10004e24:	d8c12d17 	ldw	r3,1204(sp)
10004e28:	d9012d17 	ldw	r4,1204(sp)
10004e2c:	da012a17 	ldw	r8,1192(sp)
10004e30:	18c00017 	ldw	r3,0(r3)
10004e34:	df012a15 	stw	fp,1192(sp)
10004e38:	d8012785 	stb	zero,1182(sp)
10004e3c:	d8c13115 	stw	r3,1220(sp)
10004e40:	9839883a 	mov	fp,r19
10004e44:	24800104 	addi	r18,r4,4
10004e48:	1803f726 	beq	r3,zero,10005e28 <___vfprintf_internal_r+0x1d7c>
10004e4c:	d9013117 	ldw	r4,1220(sp)
10004e50:	48038916 	blt	r9,zero,10005c78 <___vfprintf_internal_r+0x1bcc>
10004e54:	480d883a 	mov	r6,r9
10004e58:	000b883a 	mov	r5,zero
10004e5c:	da013f15 	stw	r8,1276(sp)
10004e60:	da413e15 	stw	r9,1272(sp)
10004e64:	00096c00 	call	100096c0 <memchr>
10004e68:	da013f17 	ldw	r8,1276(sp)
10004e6c:	da413e17 	ldw	r9,1272(sp)
10004e70:	10045926 	beq	r2,zero,10005fd8 <___vfprintf_internal_r+0x1f2c>
10004e74:	d8c13117 	ldw	r3,1220(sp)
10004e78:	10e3c83a 	sub	r17,r2,r3
10004e7c:	4c433516 	blt	r9,r17,10005b54 <___vfprintf_internal_r+0x1aa8>
10004e80:	8805883a 	mov	r2,r17
10004e84:	88038116 	blt	r17,zero,10005c8c <___vfprintf_internal_r+0x1be0>
10004e88:	dcc12783 	ldbu	r19,1182(sp)
10004e8c:	d8812b15 	stw	r2,1196(sp)
10004e90:	dc812d15 	stw	r18,1204(sp)
10004e94:	d8013215 	stw	zero,1224(sp)
10004e98:	d8013415 	stw	zero,1232(sp)
10004e9c:	003e0306 	br	100046ac <__alt_data_end+0xf80046ac>
10004ea0:	da012a17 	ldw	r8,1192(sp)
10004ea4:	df012a15 	stw	fp,1192(sp)
10004ea8:	9839883a 	mov	fp,r19
10004eac:	dcc12b03 	ldbu	r19,1196(sp)
10004eb0:	dcc12785 	stb	r19,1182(sp)
10004eb4:	803d8f26 	beq	r16,zero,100044f4 <__alt_data_end+0xf80044f4>
10004eb8:	00c00044 	movi	r3,1
10004ebc:	d8c12b15 	stw	r3,1196(sp)
10004ec0:	dc010405 	stb	r16,1040(sp)
10004ec4:	d8012785 	stb	zero,1182(sp)
10004ec8:	003fb506 	br	10004da0 <__alt_data_end+0xf8004da0>
10004ecc:	d8c12017 	ldw	r3,1152(sp)
10004ed0:	003e3506 	br	100047a8 <__alt_data_end+0xf80047a8>
10004ed4:	10803fcc 	andi	r2,r2,255
10004ed8:	00c00044 	movi	r3,1
10004edc:	10fddc1e 	bne	r2,r3,10004650 <__alt_data_end+0xf8004650>
10004ee0:	a800021e 	bne	r21,zero,10004eec <___vfprintf_internal_r+0xe40>
10004ee4:	00800244 	movi	r2,9
10004ee8:	14801e2e 	bgeu	r2,r18,10004f64 <___vfprintf_internal_r+0xeb8>
10004eec:	dc012b15 	stw	r16,1196(sp)
10004ef0:	dc410e04 	addi	r17,sp,1080
10004ef4:	9021883a 	mov	r16,r18
10004ef8:	da012c15 	stw	r8,1200(sp)
10004efc:	a825883a 	mov	r18,r21
10004f00:	482b883a 	mov	r21,r9
10004f04:	8009883a 	mov	r4,r16
10004f08:	900b883a 	mov	r5,r18
10004f0c:	01800284 	movi	r6,10
10004f10:	000f883a 	mov	r7,zero
10004f14:	00023cc0 	call	100023cc <__umoddi3>
10004f18:	10800c04 	addi	r2,r2,48
10004f1c:	8c7fffc4 	addi	r17,r17,-1
10004f20:	8009883a 	mov	r4,r16
10004f24:	900b883a 	mov	r5,r18
10004f28:	01800284 	movi	r6,10
10004f2c:	000f883a 	mov	r7,zero
10004f30:	88800005 	stb	r2,0(r17)
10004f34:	0001d8c0 	call	10001d8c <__udivdi3>
10004f38:	1021883a 	mov	r16,r2
10004f3c:	10c4b03a 	or	r2,r2,r3
10004f40:	1825883a 	mov	r18,r3
10004f44:	103fef1e 	bne	r2,zero,10004f04 <__alt_data_end+0xf8004f04>
10004f48:	d9012817 	ldw	r4,1184(sp)
10004f4c:	dc413115 	stw	r17,1220(sp)
10004f50:	dc012b17 	ldw	r16,1196(sp)
10004f54:	da012c17 	ldw	r8,1200(sp)
10004f58:	a813883a 	mov	r9,r21
10004f5c:	2463c83a 	sub	r17,r4,r17
10004f60:	003dcd06 	br	10004698 <__alt_data_end+0xf8004698>
10004f64:	94800c04 	addi	r18,r18,48
10004f68:	d8c10dc4 	addi	r3,sp,1079
10004f6c:	dc810dc5 	stb	r18,1079(sp)
10004f70:	dc413c17 	ldw	r17,1264(sp)
10004f74:	d8c13115 	stw	r3,1220(sp)
10004f78:	003dc706 	br	10004698 <__alt_data_end+0xf8004698>
10004f7c:	00801944 	movi	r2,101
10004f80:	1400720e 	bge	r2,r16,1000514c <___vfprintf_internal_r+0x10a0>
10004f84:	d9013717 	ldw	r4,1244(sp)
10004f88:	d9413917 	ldw	r5,1252(sp)
10004f8c:	000d883a 	mov	r6,zero
10004f90:	000f883a 	mov	r7,zero
10004f94:	d8c13d15 	stw	r3,1268(sp)
10004f98:	da013f15 	stw	r8,1276(sp)
10004f9c:	000dd240 	call	1000dd24 <__eqdf2>
10004fa0:	d8c13d17 	ldw	r3,1268(sp)
10004fa4:	da013f17 	ldw	r8,1276(sp)
10004fa8:	1000f41e 	bne	r2,zero,1000537c <___vfprintf_internal_r+0x12d0>
10004fac:	d8811f17 	ldw	r2,1148(sp)
10004fb0:	01040074 	movhi	r4,4097
10004fb4:	21047504 	addi	r4,r4,4564
10004fb8:	18c00044 	addi	r3,r3,1
10004fbc:	10800044 	addi	r2,r2,1
10004fc0:	41000015 	stw	r4,0(r8)
10004fc4:	01000044 	movi	r4,1
10004fc8:	41000115 	stw	r4,4(r8)
10004fcc:	d8c12015 	stw	r3,1152(sp)
10004fd0:	d8811f15 	stw	r2,1148(sp)
10004fd4:	010001c4 	movi	r4,7
10004fd8:	20828d16 	blt	r4,r2,10005a10 <___vfprintf_internal_r+0x1964>
10004fdc:	42000204 	addi	r8,r8,8
10004fe0:	d8812617 	ldw	r2,1176(sp)
10004fe4:	d9413317 	ldw	r5,1228(sp)
10004fe8:	11400216 	blt	r2,r5,10004ff4 <___vfprintf_internal_r+0xf48>
10004fec:	e080004c 	andi	r2,fp,1
10004ff0:	103e4126 	beq	r2,zero,100048f8 <__alt_data_end+0xf80048f8>
10004ff4:	d8813817 	ldw	r2,1248(sp)
10004ff8:	d9013517 	ldw	r4,1236(sp)
10004ffc:	d9413817 	ldw	r5,1248(sp)
10005000:	1887883a 	add	r3,r3,r2
10005004:	d8811f17 	ldw	r2,1148(sp)
10005008:	41000015 	stw	r4,0(r8)
1000500c:	41400115 	stw	r5,4(r8)
10005010:	10800044 	addi	r2,r2,1
10005014:	d8c12015 	stw	r3,1152(sp)
10005018:	d8811f15 	stw	r2,1148(sp)
1000501c:	010001c4 	movi	r4,7
10005020:	20830916 	blt	r4,r2,10005c48 <___vfprintf_internal_r+0x1b9c>
10005024:	42000204 	addi	r8,r8,8
10005028:	d8813317 	ldw	r2,1228(sp)
1000502c:	143fffc4 	addi	r16,r2,-1
10005030:	043e310e 	bge	zero,r16,100048f8 <__alt_data_end+0xf80048f8>
10005034:	04400404 	movi	r17,16
10005038:	d8811f17 	ldw	r2,1148(sp)
1000503c:	8c007e0e 	bge	r17,r16,10005238 <___vfprintf_internal_r+0x118c>
10005040:	01440074 	movhi	r5,4097
10005044:	29447584 	addi	r5,r5,4566
10005048:	d9412c15 	stw	r5,1200(sp)
1000504c:	04c001c4 	movi	r19,7
10005050:	00000306 	br	10005060 <___vfprintf_internal_r+0xfb4>
10005054:	42000204 	addi	r8,r8,8
10005058:	843ffc04 	addi	r16,r16,-16
1000505c:	8c00790e 	bge	r17,r16,10005244 <___vfprintf_internal_r+0x1198>
10005060:	18c00404 	addi	r3,r3,16
10005064:	10800044 	addi	r2,r2,1
10005068:	45000015 	stw	r20,0(r8)
1000506c:	44400115 	stw	r17,4(r8)
10005070:	d8c12015 	stw	r3,1152(sp)
10005074:	d8811f15 	stw	r2,1148(sp)
10005078:	98bff60e 	bge	r19,r2,10005054 <__alt_data_end+0xf8005054>
1000507c:	b809883a 	mov	r4,r23
10005080:	b00b883a 	mov	r5,r22
10005084:	d9811e04 	addi	r6,sp,1144
10005088:	000b4ec0 	call	1000b4ec <__sprint_r>
1000508c:	103d1f1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005090:	d8c12017 	ldw	r3,1152(sp)
10005094:	d8811f17 	ldw	r2,1148(sp)
10005098:	da000404 	addi	r8,sp,16
1000509c:	003fee06 	br	10005058 <__alt_data_end+0xf8005058>
100050a0:	d9412e17 	ldw	r5,1208(sp)
100050a4:	d8812b17 	ldw	r2,1196(sp)
100050a8:	28a7c83a 	sub	r19,r5,r2
100050ac:	04fddc0e 	bge	zero,r19,10004820 <__alt_data_end+0xf8004820>
100050b0:	05400404 	movi	r21,16
100050b4:	d8811f17 	ldw	r2,1148(sp)
100050b8:	acc3870e 	bge	r21,r19,10005ed8 <___vfprintf_internal_r+0x1e2c>
100050bc:	01440074 	movhi	r5,4097
100050c0:	29447584 	addi	r5,r5,4566
100050c4:	d9412c15 	stw	r5,1200(sp)
100050c8:	048001c4 	movi	r18,7
100050cc:	00000306 	br	100050dc <___vfprintf_internal_r+0x1030>
100050d0:	9cfffc04 	addi	r19,r19,-16
100050d4:	42000204 	addi	r8,r8,8
100050d8:	acc0110e 	bge	r21,r19,10005120 <___vfprintf_internal_r+0x1074>
100050dc:	18c00404 	addi	r3,r3,16
100050e0:	10800044 	addi	r2,r2,1
100050e4:	45000015 	stw	r20,0(r8)
100050e8:	45400115 	stw	r21,4(r8)
100050ec:	d8c12015 	stw	r3,1152(sp)
100050f0:	d8811f15 	stw	r2,1148(sp)
100050f4:	90bff60e 	bge	r18,r2,100050d0 <__alt_data_end+0xf80050d0>
100050f8:	b809883a 	mov	r4,r23
100050fc:	b00b883a 	mov	r5,r22
10005100:	d9811e04 	addi	r6,sp,1144
10005104:	000b4ec0 	call	1000b4ec <__sprint_r>
10005108:	103d001e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
1000510c:	9cfffc04 	addi	r19,r19,-16
10005110:	d8c12017 	ldw	r3,1152(sp)
10005114:	d8811f17 	ldw	r2,1148(sp)
10005118:	da000404 	addi	r8,sp,16
1000511c:	acffef16 	blt	r21,r19,100050dc <__alt_data_end+0xf80050dc>
10005120:	d9012c17 	ldw	r4,1200(sp)
10005124:	1cc7883a 	add	r3,r3,r19
10005128:	10800044 	addi	r2,r2,1
1000512c:	41000015 	stw	r4,0(r8)
10005130:	44c00115 	stw	r19,4(r8)
10005134:	d8c12015 	stw	r3,1152(sp)
10005138:	d8811f15 	stw	r2,1148(sp)
1000513c:	010001c4 	movi	r4,7
10005140:	20817816 	blt	r4,r2,10005724 <___vfprintf_internal_r+0x1678>
10005144:	42000204 	addi	r8,r8,8
10005148:	003db506 	br	10004820 <__alt_data_end+0xf8004820>
1000514c:	d9413317 	ldw	r5,1228(sp)
10005150:	00800044 	movi	r2,1
10005154:	18c00044 	addi	r3,r3,1
10005158:	11413e0e 	bge	r2,r5,10005654 <___vfprintf_internal_r+0x15a8>
1000515c:	dc011f17 	ldw	r16,1148(sp)
10005160:	d8813117 	ldw	r2,1220(sp)
10005164:	d8c12015 	stw	r3,1152(sp)
10005168:	84000044 	addi	r16,r16,1
1000516c:	40800015 	stw	r2,0(r8)
10005170:	00800044 	movi	r2,1
10005174:	40800115 	stw	r2,4(r8)
10005178:	dc011f15 	stw	r16,1148(sp)
1000517c:	008001c4 	movi	r2,7
10005180:	14015616 	blt	r2,r16,100056dc <___vfprintf_internal_r+0x1630>
10005184:	42000204 	addi	r8,r8,8
10005188:	d9013817 	ldw	r4,1248(sp)
1000518c:	d9413517 	ldw	r5,1236(sp)
10005190:	84000044 	addi	r16,r16,1
10005194:	1907883a 	add	r3,r3,r4
10005198:	41400015 	stw	r5,0(r8)
1000519c:	41000115 	stw	r4,4(r8)
100051a0:	d8c12015 	stw	r3,1152(sp)
100051a4:	dc011f15 	stw	r16,1148(sp)
100051a8:	008001c4 	movi	r2,7
100051ac:	14015416 	blt	r2,r16,10005700 <___vfprintf_internal_r+0x1654>
100051b0:	44400204 	addi	r17,r8,8
100051b4:	d9013717 	ldw	r4,1244(sp)
100051b8:	d9413917 	ldw	r5,1252(sp)
100051bc:	000d883a 	mov	r6,zero
100051c0:	000f883a 	mov	r7,zero
100051c4:	d8c13d15 	stw	r3,1268(sp)
100051c8:	000dd240 	call	1000dd24 <__eqdf2>
100051cc:	d8c13d17 	ldw	r3,1268(sp)
100051d0:	1000a726 	beq	r2,zero,10005470 <___vfprintf_internal_r+0x13c4>
100051d4:	d9013317 	ldw	r4,1228(sp)
100051d8:	d9413117 	ldw	r5,1220(sp)
100051dc:	84000044 	addi	r16,r16,1
100051e0:	20bfffc4 	addi	r2,r4,-1
100051e4:	1887883a 	add	r3,r3,r2
100051e8:	29000044 	addi	r4,r5,1
100051ec:	88800115 	stw	r2,4(r17)
100051f0:	89000015 	stw	r4,0(r17)
100051f4:	d8c12015 	stw	r3,1152(sp)
100051f8:	dc011f15 	stw	r16,1148(sp)
100051fc:	008001c4 	movi	r2,7
10005200:	14012d16 	blt	r2,r16,100056b8 <___vfprintf_internal_r+0x160c>
10005204:	8c400204 	addi	r17,r17,8
10005208:	d9413a17 	ldw	r5,1256(sp)
1000520c:	dcc122c4 	addi	r19,sp,1163
10005210:	84000044 	addi	r16,r16,1
10005214:	28c7883a 	add	r3,r5,r3
10005218:	8cc00015 	stw	r19,0(r17)
1000521c:	89400115 	stw	r5,4(r17)
10005220:	d8c12015 	stw	r3,1152(sp)
10005224:	dc011f15 	stw	r16,1148(sp)
10005228:	008001c4 	movi	r2,7
1000522c:	14000e16 	blt	r2,r16,10005268 <___vfprintf_internal_r+0x11bc>
10005230:	8a000204 	addi	r8,r17,8
10005234:	003db006 	br	100048f8 <__alt_data_end+0xf80048f8>
10005238:	01040074 	movhi	r4,4097
1000523c:	21047584 	addi	r4,r4,4566
10005240:	d9012c15 	stw	r4,1200(sp)
10005244:	d9012c17 	ldw	r4,1200(sp)
10005248:	1c07883a 	add	r3,r3,r16
1000524c:	44000115 	stw	r16,4(r8)
10005250:	41000015 	stw	r4,0(r8)
10005254:	10800044 	addi	r2,r2,1
10005258:	d8c12015 	stw	r3,1152(sp)
1000525c:	d8811f15 	stw	r2,1148(sp)
10005260:	010001c4 	movi	r4,7
10005264:	20bda30e 	bge	r4,r2,100048f4 <__alt_data_end+0xf80048f4>
10005268:	b809883a 	mov	r4,r23
1000526c:	b00b883a 	mov	r5,r22
10005270:	d9811e04 	addi	r6,sp,1144
10005274:	000b4ec0 	call	1000b4ec <__sprint_r>
10005278:	103ca41e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
1000527c:	d8c12017 	ldw	r3,1152(sp)
10005280:	da000404 	addi	r8,sp,16
10005284:	003d9c06 	br	100048f8 <__alt_data_end+0xf80048f8>
10005288:	b809883a 	mov	r4,r23
1000528c:	b00b883a 	mov	r5,r22
10005290:	d9811e04 	addi	r6,sp,1144
10005294:	000b4ec0 	call	1000b4ec <__sprint_r>
10005298:	103dd226 	beq	r2,zero,100049e4 <__alt_data_end+0xf80049e4>
1000529c:	003c9b06 	br	1000450c <__alt_data_end+0xf800450c>
100052a0:	10803fcc 	andi	r2,r2,255
100052a4:	1000311e 	bne	r2,zero,1000536c <___vfprintf_internal_r+0x12c0>
100052a8:	e080004c 	andi	r2,fp,1
100052ac:	10002f26 	beq	r2,zero,1000536c <___vfprintf_internal_r+0x12c0>
100052b0:	00800c04 	movi	r2,48
100052b4:	d8c10dc4 	addi	r3,sp,1079
100052b8:	d8810dc5 	stb	r2,1079(sp)
100052bc:	dc413c17 	ldw	r17,1264(sp)
100052c0:	d8c13115 	stw	r3,1220(sp)
100052c4:	003cf406 	br	10004698 <__alt_data_end+0xf8004698>
100052c8:	b809883a 	mov	r4,r23
100052cc:	b00b883a 	mov	r5,r22
100052d0:	d9811e04 	addi	r6,sp,1144
100052d4:	000b4ec0 	call	1000b4ec <__sprint_r>
100052d8:	103c8c1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
100052dc:	d8c12017 	ldw	r3,1152(sp)
100052e0:	da000404 	addi	r8,sp,16
100052e4:	003d7706 	br	100048c4 <__alt_data_end+0xf80048c4>
100052e8:	b809883a 	mov	r4,r23
100052ec:	b00b883a 	mov	r5,r22
100052f0:	d9811e04 	addi	r6,sp,1144
100052f4:	000b4ec0 	call	1000b4ec <__sprint_r>
100052f8:	103c841e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
100052fc:	d8c12017 	ldw	r3,1152(sp)
10005300:	da000404 	addi	r8,sp,16
10005304:	003d3506 	br	100047dc <__alt_data_end+0xf80047dc>
10005308:	b809883a 	mov	r4,r23
1000530c:	b00b883a 	mov	r5,r22
10005310:	d9811e04 	addi	r6,sp,1144
10005314:	000b4ec0 	call	1000b4ec <__sprint_r>
10005318:	103c7c1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
1000531c:	d8c12017 	ldw	r3,1152(sp)
10005320:	da000404 	addi	r8,sp,16
10005324:	003d3b06 	br	10004814 <__alt_data_end+0xf8004814>
10005328:	d9413b17 	ldw	r5,1260(sp)
1000532c:	d8c10e04 	addi	r3,sp,1080
10005330:	908003cc 	andi	r2,r18,15
10005334:	a808973a 	slli	r4,r21,28
10005338:	2885883a 	add	r2,r5,r2
1000533c:	9024d13a 	srli	r18,r18,4
10005340:	10800003 	ldbu	r2,0(r2)
10005344:	a82ad13a 	srli	r21,r21,4
10005348:	18ffffc4 	addi	r3,r3,-1
1000534c:	24a4b03a 	or	r18,r4,r18
10005350:	18800005 	stb	r2,0(r3)
10005354:	9544b03a 	or	r2,r18,r21
10005358:	103ff51e 	bne	r2,zero,10005330 <__alt_data_end+0xf8005330>
1000535c:	d9412817 	ldw	r5,1184(sp)
10005360:	d8c13115 	stw	r3,1220(sp)
10005364:	28e3c83a 	sub	r17,r5,r3
10005368:	003ccb06 	br	10004698 <__alt_data_end+0xf8004698>
1000536c:	d8c10e04 	addi	r3,sp,1080
10005370:	0023883a 	mov	r17,zero
10005374:	d8c13115 	stw	r3,1220(sp)
10005378:	003cc706 	br	10004698 <__alt_data_end+0xf8004698>
1000537c:	dc012617 	ldw	r16,1176(sp)
10005380:	0401ab0e 	bge	zero,r16,10005a30 <___vfprintf_internal_r+0x1984>
10005384:	d8813317 	ldw	r2,1228(sp)
10005388:	d9413117 	ldw	r5,1220(sp)
1000538c:	d9013417 	ldw	r4,1232(sp)
10005390:	1023883a 	mov	r17,r2
10005394:	28a1883a 	add	r16,r5,r2
10005398:	2080010e 	bge	r4,r2,100053a0 <___vfprintf_internal_r+0x12f4>
1000539c:	2023883a 	mov	r17,r4
100053a0:	04400b0e 	bge	zero,r17,100053d0 <___vfprintf_internal_r+0x1324>
100053a4:	d8811f17 	ldw	r2,1148(sp)
100053a8:	d9413117 	ldw	r5,1220(sp)
100053ac:	1c47883a 	add	r3,r3,r17
100053b0:	10800044 	addi	r2,r2,1
100053b4:	41400015 	stw	r5,0(r8)
100053b8:	44400115 	stw	r17,4(r8)
100053bc:	d8c12015 	stw	r3,1152(sp)
100053c0:	d8811f15 	stw	r2,1148(sp)
100053c4:	010001c4 	movi	r4,7
100053c8:	20826716 	blt	r4,r2,10005d68 <___vfprintf_internal_r+0x1cbc>
100053cc:	42000204 	addi	r8,r8,8
100053d0:	88026316 	blt	r17,zero,10005d60 <___vfprintf_internal_r+0x1cb4>
100053d4:	d8813417 	ldw	r2,1232(sp)
100053d8:	1463c83a 	sub	r17,r2,r17
100053dc:	0440590e 	bge	zero,r17,10005544 <___vfprintf_internal_r+0x1498>
100053e0:	04c00404 	movi	r19,16
100053e4:	d8811f17 	ldw	r2,1148(sp)
100053e8:	9c41770e 	bge	r19,r17,100059c8 <___vfprintf_internal_r+0x191c>
100053ec:	01440074 	movhi	r5,4097
100053f0:	29447584 	addi	r5,r5,4566
100053f4:	d9412c15 	stw	r5,1200(sp)
100053f8:	054001c4 	movi	r21,7
100053fc:	00000306 	br	1000540c <___vfprintf_internal_r+0x1360>
10005400:	42000204 	addi	r8,r8,8
10005404:	8c7ffc04 	addi	r17,r17,-16
10005408:	9c41720e 	bge	r19,r17,100059d4 <___vfprintf_internal_r+0x1928>
1000540c:	18c00404 	addi	r3,r3,16
10005410:	10800044 	addi	r2,r2,1
10005414:	45000015 	stw	r20,0(r8)
10005418:	44c00115 	stw	r19,4(r8)
1000541c:	d8c12015 	stw	r3,1152(sp)
10005420:	d8811f15 	stw	r2,1148(sp)
10005424:	a8bff60e 	bge	r21,r2,10005400 <__alt_data_end+0xf8005400>
10005428:	b809883a 	mov	r4,r23
1000542c:	b00b883a 	mov	r5,r22
10005430:	d9811e04 	addi	r6,sp,1144
10005434:	000b4ec0 	call	1000b4ec <__sprint_r>
10005438:	103c341e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
1000543c:	d8c12017 	ldw	r3,1152(sp)
10005440:	d8811f17 	ldw	r2,1148(sp)
10005444:	da000404 	addi	r8,sp,16
10005448:	003fee06 	br	10005404 <__alt_data_end+0xf8005404>
1000544c:	b809883a 	mov	r4,r23
10005450:	b00b883a 	mov	r5,r22
10005454:	d9811e04 	addi	r6,sp,1144
10005458:	000b4ec0 	call	1000b4ec <__sprint_r>
1000545c:	103c2b1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005460:	d8c12017 	ldw	r3,1152(sp)
10005464:	d8812787 	ldb	r2,1182(sp)
10005468:	da000404 	addi	r8,sp,16
1000546c:	003cce06 	br	100047a8 <__alt_data_end+0xf80047a8>
10005470:	d8813317 	ldw	r2,1228(sp)
10005474:	14ffffc4 	addi	r19,r2,-1
10005478:	04ff630e 	bge	zero,r19,10005208 <__alt_data_end+0xf8005208>
1000547c:	05400404 	movi	r21,16
10005480:	acc0810e 	bge	r21,r19,10005688 <___vfprintf_internal_r+0x15dc>
10005484:	01440074 	movhi	r5,4097
10005488:	29447584 	addi	r5,r5,4566
1000548c:	d9412c15 	stw	r5,1200(sp)
10005490:	01c001c4 	movi	r7,7
10005494:	00000306 	br	100054a4 <___vfprintf_internal_r+0x13f8>
10005498:	8c400204 	addi	r17,r17,8
1000549c:	9cfffc04 	addi	r19,r19,-16
100054a0:	acc07c0e 	bge	r21,r19,10005694 <___vfprintf_internal_r+0x15e8>
100054a4:	18c00404 	addi	r3,r3,16
100054a8:	84000044 	addi	r16,r16,1
100054ac:	8d000015 	stw	r20,0(r17)
100054b0:	8d400115 	stw	r21,4(r17)
100054b4:	d8c12015 	stw	r3,1152(sp)
100054b8:	dc011f15 	stw	r16,1148(sp)
100054bc:	3c3ff60e 	bge	r7,r16,10005498 <__alt_data_end+0xf8005498>
100054c0:	b809883a 	mov	r4,r23
100054c4:	b00b883a 	mov	r5,r22
100054c8:	d9811e04 	addi	r6,sp,1144
100054cc:	d9c13d15 	stw	r7,1268(sp)
100054d0:	000b4ec0 	call	1000b4ec <__sprint_r>
100054d4:	d9c13d17 	ldw	r7,1268(sp)
100054d8:	103c0c1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
100054dc:	d8c12017 	ldw	r3,1152(sp)
100054e0:	dc011f17 	ldw	r16,1148(sp)
100054e4:	dc400404 	addi	r17,sp,16
100054e8:	003fec06 	br	1000549c <__alt_data_end+0xf800549c>
100054ec:	00800084 	movi	r2,2
100054f0:	9546b03a 	or	r3,r18,r21
100054f4:	003d7d06 	br	10004aec <__alt_data_end+0xf8004aec>
100054f8:	10803fcc 	andi	r2,r2,255
100054fc:	1080201c 	xori	r2,r2,128
10005500:	10bfe004 	addi	r2,r2,-128
10005504:	01000c04 	movi	r4,48
10005508:	1101d726 	beq	r2,r4,10005c68 <___vfprintf_internal_r+0x1bbc>
1000550c:	d9413117 	ldw	r5,1220(sp)
10005510:	d8812817 	ldw	r2,1184(sp)
10005514:	193fffc5 	stb	r4,-1(r3)
10005518:	297fffc4 	addi	r5,r5,-1
1000551c:	d9413115 	stw	r5,1220(sp)
10005520:	1163c83a 	sub	r17,r2,r5
10005524:	003c5c06 	br	10004698 <__alt_data_end+0xf8004698>
10005528:	b809883a 	mov	r4,r23
1000552c:	b00b883a 	mov	r5,r22
10005530:	d9811e04 	addi	r6,sp,1144
10005534:	000b4ec0 	call	1000b4ec <__sprint_r>
10005538:	103bf41e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
1000553c:	d8c12017 	ldw	r3,1152(sp)
10005540:	da000404 	addi	r8,sp,16
10005544:	d9413117 	ldw	r5,1220(sp)
10005548:	d9013417 	ldw	r4,1232(sp)
1000554c:	d8812617 	ldw	r2,1176(sp)
10005550:	2923883a 	add	r17,r5,r4
10005554:	d9413317 	ldw	r5,1228(sp)
10005558:	11400216 	blt	r2,r5,10005564 <___vfprintf_internal_r+0x14b8>
1000555c:	e100004c 	andi	r4,fp,1
10005560:	20000d26 	beq	r4,zero,10005598 <___vfprintf_internal_r+0x14ec>
10005564:	d9013817 	ldw	r4,1248(sp)
10005568:	d9413517 	ldw	r5,1236(sp)
1000556c:	1907883a 	add	r3,r3,r4
10005570:	d9011f17 	ldw	r4,1148(sp)
10005574:	41400015 	stw	r5,0(r8)
10005578:	d9413817 	ldw	r5,1248(sp)
1000557c:	21000044 	addi	r4,r4,1
10005580:	d8c12015 	stw	r3,1152(sp)
10005584:	41400115 	stw	r5,4(r8)
10005588:	d9011f15 	stw	r4,1148(sp)
1000558c:	014001c4 	movi	r5,7
10005590:	2901fd16 	blt	r5,r4,10005d88 <___vfprintf_internal_r+0x1cdc>
10005594:	42000204 	addi	r8,r8,8
10005598:	d9013317 	ldw	r4,1228(sp)
1000559c:	2085c83a 	sub	r2,r4,r2
100055a0:	8449c83a 	sub	r4,r16,r17
100055a4:	1021883a 	mov	r16,r2
100055a8:	2080010e 	bge	r4,r2,100055b0 <___vfprintf_internal_r+0x1504>
100055ac:	2021883a 	mov	r16,r4
100055b0:	04000a0e 	bge	zero,r16,100055dc <___vfprintf_internal_r+0x1530>
100055b4:	d9011f17 	ldw	r4,1148(sp)
100055b8:	1c07883a 	add	r3,r3,r16
100055bc:	44400015 	stw	r17,0(r8)
100055c0:	21000044 	addi	r4,r4,1
100055c4:	44000115 	stw	r16,4(r8)
100055c8:	d8c12015 	stw	r3,1152(sp)
100055cc:	d9011f15 	stw	r4,1148(sp)
100055d0:	014001c4 	movi	r5,7
100055d4:	29020916 	blt	r5,r4,10005dfc <___vfprintf_internal_r+0x1d50>
100055d8:	42000204 	addi	r8,r8,8
100055dc:	80020116 	blt	r16,zero,10005de4 <___vfprintf_internal_r+0x1d38>
100055e0:	1421c83a 	sub	r16,r2,r16
100055e4:	043cc40e 	bge	zero,r16,100048f8 <__alt_data_end+0xf80048f8>
100055e8:	04400404 	movi	r17,16
100055ec:	d8811f17 	ldw	r2,1148(sp)
100055f0:	8c3f110e 	bge	r17,r16,10005238 <__alt_data_end+0xf8005238>
100055f4:	01440074 	movhi	r5,4097
100055f8:	29447584 	addi	r5,r5,4566
100055fc:	d9412c15 	stw	r5,1200(sp)
10005600:	04c001c4 	movi	r19,7
10005604:	00000306 	br	10005614 <___vfprintf_internal_r+0x1568>
10005608:	42000204 	addi	r8,r8,8
1000560c:	843ffc04 	addi	r16,r16,-16
10005610:	8c3f0c0e 	bge	r17,r16,10005244 <__alt_data_end+0xf8005244>
10005614:	18c00404 	addi	r3,r3,16
10005618:	10800044 	addi	r2,r2,1
1000561c:	45000015 	stw	r20,0(r8)
10005620:	44400115 	stw	r17,4(r8)
10005624:	d8c12015 	stw	r3,1152(sp)
10005628:	d8811f15 	stw	r2,1148(sp)
1000562c:	98bff60e 	bge	r19,r2,10005608 <__alt_data_end+0xf8005608>
10005630:	b809883a 	mov	r4,r23
10005634:	b00b883a 	mov	r5,r22
10005638:	d9811e04 	addi	r6,sp,1144
1000563c:	000b4ec0 	call	1000b4ec <__sprint_r>
10005640:	103bb21e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005644:	d8c12017 	ldw	r3,1152(sp)
10005648:	d8811f17 	ldw	r2,1148(sp)
1000564c:	da000404 	addi	r8,sp,16
10005650:	003fee06 	br	1000560c <__alt_data_end+0xf800560c>
10005654:	e088703a 	and	r4,fp,r2
10005658:	203ec01e 	bne	r4,zero,1000515c <__alt_data_end+0xf800515c>
1000565c:	dc011f17 	ldw	r16,1148(sp)
10005660:	d9013117 	ldw	r4,1220(sp)
10005664:	40800115 	stw	r2,4(r8)
10005668:	84000044 	addi	r16,r16,1
1000566c:	41000015 	stw	r4,0(r8)
10005670:	d8c12015 	stw	r3,1152(sp)
10005674:	dc011f15 	stw	r16,1148(sp)
10005678:	008001c4 	movi	r2,7
1000567c:	14000e16 	blt	r2,r16,100056b8 <___vfprintf_internal_r+0x160c>
10005680:	44400204 	addi	r17,r8,8
10005684:	003ee006 	br	10005208 <__alt_data_end+0xf8005208>
10005688:	01040074 	movhi	r4,4097
1000568c:	21047584 	addi	r4,r4,4566
10005690:	d9012c15 	stw	r4,1200(sp)
10005694:	d8812c17 	ldw	r2,1200(sp)
10005698:	1cc7883a 	add	r3,r3,r19
1000569c:	84000044 	addi	r16,r16,1
100056a0:	88800015 	stw	r2,0(r17)
100056a4:	8cc00115 	stw	r19,4(r17)
100056a8:	d8c12015 	stw	r3,1152(sp)
100056ac:	dc011f15 	stw	r16,1148(sp)
100056b0:	008001c4 	movi	r2,7
100056b4:	143ed30e 	bge	r2,r16,10005204 <__alt_data_end+0xf8005204>
100056b8:	b809883a 	mov	r4,r23
100056bc:	b00b883a 	mov	r5,r22
100056c0:	d9811e04 	addi	r6,sp,1144
100056c4:	000b4ec0 	call	1000b4ec <__sprint_r>
100056c8:	103b901e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
100056cc:	d8c12017 	ldw	r3,1152(sp)
100056d0:	dc011f17 	ldw	r16,1148(sp)
100056d4:	dc400404 	addi	r17,sp,16
100056d8:	003ecb06 	br	10005208 <__alt_data_end+0xf8005208>
100056dc:	b809883a 	mov	r4,r23
100056e0:	b00b883a 	mov	r5,r22
100056e4:	d9811e04 	addi	r6,sp,1144
100056e8:	000b4ec0 	call	1000b4ec <__sprint_r>
100056ec:	103b871e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
100056f0:	d8c12017 	ldw	r3,1152(sp)
100056f4:	dc011f17 	ldw	r16,1148(sp)
100056f8:	da000404 	addi	r8,sp,16
100056fc:	003ea206 	br	10005188 <__alt_data_end+0xf8005188>
10005700:	b809883a 	mov	r4,r23
10005704:	b00b883a 	mov	r5,r22
10005708:	d9811e04 	addi	r6,sp,1144
1000570c:	000b4ec0 	call	1000b4ec <__sprint_r>
10005710:	103b7e1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005714:	d8c12017 	ldw	r3,1152(sp)
10005718:	dc011f17 	ldw	r16,1148(sp)
1000571c:	dc400404 	addi	r17,sp,16
10005720:	003ea406 	br	100051b4 <__alt_data_end+0xf80051b4>
10005724:	b809883a 	mov	r4,r23
10005728:	b00b883a 	mov	r5,r22
1000572c:	d9811e04 	addi	r6,sp,1144
10005730:	000b4ec0 	call	1000b4ec <__sprint_r>
10005734:	103b751e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005738:	d8c12017 	ldw	r3,1152(sp)
1000573c:	da000404 	addi	r8,sp,16
10005740:	003c3706 	br	10004820 <__alt_data_end+0xf8004820>
10005744:	04a5c83a 	sub	r18,zero,r18
10005748:	9004c03a 	cmpne	r2,r18,zero
1000574c:	056bc83a 	sub	r21,zero,r21
10005750:	a8abc83a 	sub	r21,r21,r2
10005754:	04c00b44 	movi	r19,45
10005758:	dcc12785 	stb	r19,1182(sp)
1000575c:	da413215 	stw	r9,1224(sp)
10005760:	00800044 	movi	r2,1
10005764:	9546b03a 	or	r3,r18,r21
10005768:	003bb106 	br	10004630 <__alt_data_end+0xf8004630>
1000576c:	da013f15 	stw	r8,1276(sp)
10005770:	da413e15 	stw	r9,1272(sp)
10005774:	000b1480 	call	1000b148 <__fpclassifyd>
10005778:	da013f17 	ldw	r8,1276(sp)
1000577c:	da413e17 	ldw	r9,1272(sp)
10005780:	1000e526 	beq	r2,zero,10005b18 <___vfprintf_internal_r+0x1a6c>
10005784:	04fff7c4 	movi	r19,-33
10005788:	00bfffc4 	movi	r2,-1
1000578c:	84e6703a 	and	r19,r16,r19
10005790:	48822926 	beq	r9,r2,10006038 <___vfprintf_internal_r+0x1f8c>
10005794:	008011c4 	movi	r2,71
10005798:	98821626 	beq	r19,r2,10005ff4 <___vfprintf_internal_r+0x1f48>
1000579c:	d9013917 	ldw	r4,1252(sp)
100057a0:	e0c04014 	ori	r3,fp,256
100057a4:	d8c12d15 	stw	r3,1204(sp)
100057a8:	20021f16 	blt	r4,zero,10006028 <___vfprintf_internal_r+0x1f7c>
100057ac:	dc413917 	ldw	r17,1252(sp)
100057b0:	d8012b05 	stb	zero,1196(sp)
100057b4:	00801984 	movi	r2,102
100057b8:	80814d26 	beq	r16,r2,10005cf0 <___vfprintf_internal_r+0x1c44>
100057bc:	00801184 	movi	r2,70
100057c0:	80814b26 	beq	r16,r2,10005cf0 <___vfprintf_internal_r+0x1c44>
100057c4:	00801144 	movi	r2,69
100057c8:	98821d26 	beq	r19,r2,10006040 <___vfprintf_internal_r+0x1f94>
100057cc:	482b883a 	mov	r21,r9
100057d0:	d8812604 	addi	r2,sp,1176
100057d4:	d8800115 	stw	r2,4(sp)
100057d8:	d9413717 	ldw	r5,1244(sp)
100057dc:	d8812504 	addi	r2,sp,1172
100057e0:	d8800215 	stw	r2,8(sp)
100057e4:	d8812104 	addi	r2,sp,1156
100057e8:	dd400015 	stw	r21,0(sp)
100057ec:	d8800315 	stw	r2,12(sp)
100057f0:	b809883a 	mov	r4,r23
100057f4:	880d883a 	mov	r6,r17
100057f8:	01c00084 	movi	r7,2
100057fc:	da013f15 	stw	r8,1276(sp)
10005800:	da413e15 	stw	r9,1272(sp)
10005804:	00065240 	call	10006524 <_dtoa_r>
10005808:	d8813115 	stw	r2,1220(sp)
1000580c:	008019c4 	movi	r2,103
10005810:	da013f17 	ldw	r8,1276(sp)
10005814:	da413e17 	ldw	r9,1272(sp)
10005818:	80800226 	beq	r16,r2,10005824 <___vfprintf_internal_r+0x1778>
1000581c:	008011c4 	movi	r2,71
10005820:	8081451e 	bne	r16,r2,10005d38 <___vfprintf_internal_r+0x1c8c>
10005824:	e080004c 	andi	r2,fp,1
10005828:	10021e26 	beq	r2,zero,100060a4 <___vfprintf_internal_r+0x1ff8>
1000582c:	d8c13117 	ldw	r3,1220(sp)
10005830:	1d55883a 	add	r10,r3,r21
10005834:	d9013717 	ldw	r4,1244(sp)
10005838:	880b883a 	mov	r5,r17
1000583c:	000d883a 	mov	r6,zero
10005840:	000f883a 	mov	r7,zero
10005844:	da013f15 	stw	r8,1276(sp)
10005848:	da413e15 	stw	r9,1272(sp)
1000584c:	da813d15 	stw	r10,1268(sp)
10005850:	000dd240 	call	1000dd24 <__eqdf2>
10005854:	da013f17 	ldw	r8,1276(sp)
10005858:	da413e17 	ldw	r9,1272(sp)
1000585c:	da813d17 	ldw	r10,1268(sp)
10005860:	1001a126 	beq	r2,zero,10005ee8 <___vfprintf_internal_r+0x1e3c>
10005864:	d8812117 	ldw	r2,1156(sp)
10005868:	1280062e 	bgeu	r2,r10,10005884 <___vfprintf_internal_r+0x17d8>
1000586c:	01000c04 	movi	r4,48
10005870:	10c00044 	addi	r3,r2,1
10005874:	d8c12115 	stw	r3,1156(sp)
10005878:	11000005 	stb	r4,0(r2)
1000587c:	d8812117 	ldw	r2,1156(sp)
10005880:	12bffb36 	bltu	r2,r10,10005870 <__alt_data_end+0xf8005870>
10005884:	d8c13117 	ldw	r3,1220(sp)
10005888:	10c5c83a 	sub	r2,r2,r3
1000588c:	d8813315 	stw	r2,1228(sp)
10005890:	008011c4 	movi	r2,71
10005894:	98818926 	beq	r19,r2,10005ebc <___vfprintf_internal_r+0x1e10>
10005898:	00801944 	movi	r2,101
1000589c:	14023c0e 	bge	r2,r16,10006190 <___vfprintf_internal_r+0x20e4>
100058a0:	d8c12617 	ldw	r3,1176(sp)
100058a4:	00801984 	movi	r2,102
100058a8:	d8c13415 	stw	r3,1232(sp)
100058ac:	8081ef26 	beq	r16,r2,1000606c <___vfprintf_internal_r+0x1fc0>
100058b0:	d8c13417 	ldw	r3,1232(sp)
100058b4:	d9013317 	ldw	r4,1228(sp)
100058b8:	1901e316 	blt	r3,r4,10006048 <___vfprintf_internal_r+0x1f9c>
100058bc:	e080004c 	andi	r2,fp,1
100058c0:	1001f426 	beq	r2,zero,10006094 <___vfprintf_internal_r+0x1fe8>
100058c4:	d8c13417 	ldw	r3,1232(sp)
100058c8:	1c400044 	addi	r17,r3,1
100058cc:	8839883a 	mov	fp,r17
100058d0:	8801e416 	blt	r17,zero,10006064 <___vfprintf_internal_r+0x1fb8>
100058d4:	dd412b07 	ldb	r21,1196(sp)
100058d8:	a801701e 	bne	r21,zero,10005e9c <___vfprintf_internal_r+0x1df0>
100058dc:	df012b15 	stw	fp,1196(sp)
100058e0:	dcc12783 	ldbu	r19,1182(sp)
100058e4:	df012d17 	ldw	fp,1204(sp)
100058e8:	d8013215 	stw	zero,1224(sp)
100058ec:	dc812d15 	stw	r18,1204(sp)
100058f0:	003b6e06 	br	100046ac <__alt_data_end+0xf80046ac>
100058f4:	e080040c 	andi	r2,fp,16
100058f8:	1000b51e 	bne	r2,zero,10005bd0 <___vfprintf_internal_r+0x1b24>
100058fc:	e080100c 	andi	r2,fp,64
10005900:	10015b26 	beq	r2,zero,10005e70 <___vfprintf_internal_r+0x1dc4>
10005904:	d9012d17 	ldw	r4,1204(sp)
10005908:	d9412f17 	ldw	r5,1212(sp)
1000590c:	20800017 	ldw	r2,0(r4)
10005910:	21000104 	addi	r4,r4,4
10005914:	d9012d15 	stw	r4,1204(sp)
10005918:	1140000d 	sth	r5,0(r2)
1000591c:	003a2006 	br	100041a0 <__alt_data_end+0xf80041a0>
10005920:	e0c0100c 	andi	r3,fp,64
10005924:	1800a226 	beq	r3,zero,10005bb0 <___vfprintf_internal_r+0x1b04>
10005928:	d8c12d17 	ldw	r3,1204(sp)
1000592c:	1480000b 	ldhu	r18,0(r2)
10005930:	002b883a 	mov	r21,zero
10005934:	18c00104 	addi	r3,r3,4
10005938:	d8c12d15 	stw	r3,1204(sp)
1000593c:	0005883a 	mov	r2,zero
10005940:	9007883a 	mov	r3,r18
10005944:	003c6906 	br	10004aec <__alt_data_end+0xf8004aec>
10005948:	e0c0100c 	andi	r3,fp,64
1000594c:	18009026 	beq	r3,zero,10005b90 <___vfprintf_internal_r+0x1ae4>
10005950:	1480000b 	ldhu	r18,0(r2)
10005954:	d8812d17 	ldw	r2,1204(sp)
10005958:	002b883a 	mov	r21,zero
1000595c:	9007883a 	mov	r3,r18
10005960:	10800104 	addi	r2,r2,4
10005964:	d8812d15 	stw	r2,1204(sp)
10005968:	00800044 	movi	r2,1
1000596c:	003c5f06 	br	10004aec <__alt_data_end+0xf8004aec>
10005970:	e0c0100c 	andi	r3,fp,64
10005974:	18008026 	beq	r3,zero,10005b78 <___vfprintf_internal_r+0x1acc>
10005978:	d9012d17 	ldw	r4,1204(sp)
1000597c:	1480000b 	ldhu	r18,0(r2)
10005980:	002b883a 	mov	r21,zero
10005984:	21000104 	addi	r4,r4,4
10005988:	d9012d15 	stw	r4,1204(sp)
1000598c:	003c7906 	br	10004b74 <__alt_data_end+0xf8004b74>
10005990:	e080100c 	andi	r2,fp,64
10005994:	10007126 	beq	r2,zero,10005b5c <___vfprintf_internal_r+0x1ab0>
10005998:	1c80000f 	ldh	r18,0(r3)
1000599c:	d8812d17 	ldw	r2,1204(sp)
100059a0:	902bd7fa 	srai	r21,r18,31
100059a4:	10800104 	addi	r2,r2,4
100059a8:	d8812d15 	stw	r2,1204(sp)
100059ac:	a805883a 	mov	r2,r21
100059b0:	003b1a06 	br	1000461c <__alt_data_end+0xf800461c>
100059b4:	e4000007 	ldb	r16,0(fp)
100059b8:	e005883a 	mov	r2,fp
100059bc:	003a2306 	br	1000424c <__alt_data_end+0xf800424c>
100059c0:	00800084 	movi	r2,2
100059c4:	003c4906 	br	10004aec <__alt_data_end+0xf8004aec>
100059c8:	01040074 	movhi	r4,4097
100059cc:	21047584 	addi	r4,r4,4566
100059d0:	d9012c15 	stw	r4,1200(sp)
100059d4:	d9012c17 	ldw	r4,1200(sp)
100059d8:	1c47883a 	add	r3,r3,r17
100059dc:	10800044 	addi	r2,r2,1
100059e0:	41000015 	stw	r4,0(r8)
100059e4:	44400115 	stw	r17,4(r8)
100059e8:	d8c12015 	stw	r3,1152(sp)
100059ec:	d8811f15 	stw	r2,1148(sp)
100059f0:	010001c4 	movi	r4,7
100059f4:	20becc16 	blt	r4,r2,10005528 <__alt_data_end+0xf8005528>
100059f8:	42000204 	addi	r8,r8,8
100059fc:	003ed106 	br	10005544 <__alt_data_end+0xf8005544>
10005a00:	01040074 	movhi	r4,4097
10005a04:	21047584 	addi	r4,r4,4566
10005a08:	d9012c15 	stw	r4,1200(sp)
10005a0c:	003ba306 	br	1000489c <__alt_data_end+0xf800489c>
10005a10:	b809883a 	mov	r4,r23
10005a14:	b00b883a 	mov	r5,r22
10005a18:	d9811e04 	addi	r6,sp,1144
10005a1c:	000b4ec0 	call	1000b4ec <__sprint_r>
10005a20:	103aba1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005a24:	d8c12017 	ldw	r3,1152(sp)
10005a28:	da000404 	addi	r8,sp,16
10005a2c:	003d6c06 	br	10004fe0 <__alt_data_end+0xf8004fe0>
10005a30:	d8811f17 	ldw	r2,1148(sp)
10005a34:	01440074 	movhi	r5,4097
10005a38:	01000044 	movi	r4,1
10005a3c:	18c00044 	addi	r3,r3,1
10005a40:	10800044 	addi	r2,r2,1
10005a44:	29447504 	addi	r5,r5,4564
10005a48:	41000115 	stw	r4,4(r8)
10005a4c:	41400015 	stw	r5,0(r8)
10005a50:	d8c12015 	stw	r3,1152(sp)
10005a54:	d8811f15 	stw	r2,1148(sp)
10005a58:	010001c4 	movi	r4,7
10005a5c:	20806716 	blt	r4,r2,10005bfc <___vfprintf_internal_r+0x1b50>
10005a60:	42000204 	addi	r8,r8,8
10005a64:	8000041e 	bne	r16,zero,10005a78 <___vfprintf_internal_r+0x19cc>
10005a68:	d8813317 	ldw	r2,1228(sp)
10005a6c:	1000021e 	bne	r2,zero,10005a78 <___vfprintf_internal_r+0x19cc>
10005a70:	e080004c 	andi	r2,fp,1
10005a74:	103ba026 	beq	r2,zero,100048f8 <__alt_data_end+0xf80048f8>
10005a78:	d9013817 	ldw	r4,1248(sp)
10005a7c:	d8811f17 	ldw	r2,1148(sp)
10005a80:	d9413517 	ldw	r5,1236(sp)
10005a84:	1907883a 	add	r3,r3,r4
10005a88:	10800044 	addi	r2,r2,1
10005a8c:	41000115 	stw	r4,4(r8)
10005a90:	41400015 	stw	r5,0(r8)
10005a94:	d8c12015 	stw	r3,1152(sp)
10005a98:	d8811f15 	stw	r2,1148(sp)
10005a9c:	010001c4 	movi	r4,7
10005aa0:	20815716 	blt	r4,r2,10006000 <___vfprintf_internal_r+0x1f54>
10005aa4:	42000204 	addi	r8,r8,8
10005aa8:	0421c83a 	sub	r16,zero,r16
10005aac:	0400810e 	bge	zero,r16,10005cb4 <___vfprintf_internal_r+0x1c08>
10005ab0:	04400404 	movi	r17,16
10005ab4:	8c00bd0e 	bge	r17,r16,10005dac <___vfprintf_internal_r+0x1d00>
10005ab8:	01440074 	movhi	r5,4097
10005abc:	29447584 	addi	r5,r5,4566
10005ac0:	d9412c15 	stw	r5,1200(sp)
10005ac4:	04c001c4 	movi	r19,7
10005ac8:	00000306 	br	10005ad8 <___vfprintf_internal_r+0x1a2c>
10005acc:	42000204 	addi	r8,r8,8
10005ad0:	843ffc04 	addi	r16,r16,-16
10005ad4:	8c00b80e 	bge	r17,r16,10005db8 <___vfprintf_internal_r+0x1d0c>
10005ad8:	18c00404 	addi	r3,r3,16
10005adc:	10800044 	addi	r2,r2,1
10005ae0:	45000015 	stw	r20,0(r8)
10005ae4:	44400115 	stw	r17,4(r8)
10005ae8:	d8c12015 	stw	r3,1152(sp)
10005aec:	d8811f15 	stw	r2,1148(sp)
10005af0:	98bff60e 	bge	r19,r2,10005acc <__alt_data_end+0xf8005acc>
10005af4:	b809883a 	mov	r4,r23
10005af8:	b00b883a 	mov	r5,r22
10005afc:	d9811e04 	addi	r6,sp,1144
10005b00:	000b4ec0 	call	1000b4ec <__sprint_r>
10005b04:	103a811e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005b08:	d8c12017 	ldw	r3,1152(sp)
10005b0c:	d8811f17 	ldw	r2,1148(sp)
10005b10:	da000404 	addi	r8,sp,16
10005b14:	003fee06 	br	10005ad0 <__alt_data_end+0xf8005ad0>
10005b18:	008011c4 	movi	r2,71
10005b1c:	1400db16 	blt	r2,r16,10005e8c <___vfprintf_internal_r+0x1de0>
10005b20:	01040074 	movhi	r4,4097
10005b24:	21046704 	addi	r4,r4,4508
10005b28:	d9013115 	stw	r4,1220(sp)
10005b2c:	00c000c4 	movi	r3,3
10005b30:	00bfdfc4 	movi	r2,-129
10005b34:	d8c12b15 	stw	r3,1196(sp)
10005b38:	e0b8703a 	and	fp,fp,r2
10005b3c:	dcc12783 	ldbu	r19,1182(sp)
10005b40:	dc812d15 	stw	r18,1204(sp)
10005b44:	1823883a 	mov	r17,r3
10005b48:	d8013215 	stw	zero,1224(sp)
10005b4c:	d8013415 	stw	zero,1232(sp)
10005b50:	003ad606 	br	100046ac <__alt_data_end+0xf80046ac>
10005b54:	4823883a 	mov	r17,r9
10005b58:	003cc906 	br	10004e80 <__alt_data_end+0xf8004e80>
10005b5c:	1c800017 	ldw	r18,0(r3)
10005b60:	d8c12d17 	ldw	r3,1204(sp)
10005b64:	902bd7fa 	srai	r21,r18,31
10005b68:	18c00104 	addi	r3,r3,4
10005b6c:	d8c12d15 	stw	r3,1204(sp)
10005b70:	a805883a 	mov	r2,r21
10005b74:	003aa906 	br	1000461c <__alt_data_end+0xf800461c>
10005b78:	d9412d17 	ldw	r5,1204(sp)
10005b7c:	14800017 	ldw	r18,0(r2)
10005b80:	002b883a 	mov	r21,zero
10005b84:	29400104 	addi	r5,r5,4
10005b88:	d9412d15 	stw	r5,1204(sp)
10005b8c:	003bf906 	br	10004b74 <__alt_data_end+0xf8004b74>
10005b90:	d8c12d17 	ldw	r3,1204(sp)
10005b94:	14800017 	ldw	r18,0(r2)
10005b98:	002b883a 	mov	r21,zero
10005b9c:	18c00104 	addi	r3,r3,4
10005ba0:	d8c12d15 	stw	r3,1204(sp)
10005ba4:	00800044 	movi	r2,1
10005ba8:	9007883a 	mov	r3,r18
10005bac:	003bcf06 	br	10004aec <__alt_data_end+0xf8004aec>
10005bb0:	d9012d17 	ldw	r4,1204(sp)
10005bb4:	14800017 	ldw	r18,0(r2)
10005bb8:	002b883a 	mov	r21,zero
10005bbc:	21000104 	addi	r4,r4,4
10005bc0:	d9012d15 	stw	r4,1204(sp)
10005bc4:	0005883a 	mov	r2,zero
10005bc8:	9007883a 	mov	r3,r18
10005bcc:	003bc706 	br	10004aec <__alt_data_end+0xf8004aec>
10005bd0:	d9412d17 	ldw	r5,1204(sp)
10005bd4:	d8c12f17 	ldw	r3,1212(sp)
10005bd8:	28800017 	ldw	r2,0(r5)
10005bdc:	29400104 	addi	r5,r5,4
10005be0:	d9412d15 	stw	r5,1204(sp)
10005be4:	10c00015 	stw	r3,0(r2)
10005be8:	00396d06 	br	100041a0 <__alt_data_end+0xf80041a0>
10005bec:	01040074 	movhi	r4,4097
10005bf0:	21046504 	addi	r4,r4,4500
10005bf4:	d9013115 	stw	r4,1220(sp)
10005bf8:	003ba206 	br	10004a84 <__alt_data_end+0xf8004a84>
10005bfc:	b809883a 	mov	r4,r23
10005c00:	b00b883a 	mov	r5,r22
10005c04:	d9811e04 	addi	r6,sp,1144
10005c08:	000b4ec0 	call	1000b4ec <__sprint_r>
10005c0c:	103a3f1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005c10:	dc012617 	ldw	r16,1176(sp)
10005c14:	d8c12017 	ldw	r3,1152(sp)
10005c18:	da000404 	addi	r8,sp,16
10005c1c:	003f9106 	br	10005a64 <__alt_data_end+0xf8005a64>
10005c20:	e0800044 	addi	r2,fp,1
10005c24:	9cc00814 	ori	r19,r19,32
10005c28:	e4000047 	ldb	r16,1(fp)
10005c2c:	00398706 	br	1000424c <__alt_data_end+0xf800424c>
10005c30:	d8812e17 	ldw	r2,1208(sp)
10005c34:	d8c12d15 	stw	r3,1204(sp)
10005c38:	0085c83a 	sub	r2,zero,r2
10005c3c:	d8812e15 	stw	r2,1208(sp)
10005c40:	e005883a 	mov	r2,fp
10005c44:	003a3a06 	br	10004530 <__alt_data_end+0xf8004530>
10005c48:	b809883a 	mov	r4,r23
10005c4c:	b00b883a 	mov	r5,r22
10005c50:	d9811e04 	addi	r6,sp,1144
10005c54:	000b4ec0 	call	1000b4ec <__sprint_r>
10005c58:	103a2c1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005c5c:	d8c12017 	ldw	r3,1152(sp)
10005c60:	da000404 	addi	r8,sp,16
10005c64:	003cf006 	br	10005028 <__alt_data_end+0xf8005028>
10005c68:	d8c12817 	ldw	r3,1184(sp)
10005c6c:	d9013117 	ldw	r4,1220(sp)
10005c70:	1923c83a 	sub	r17,r3,r4
10005c74:	003a8806 	br	10004698 <__alt_data_end+0xf8004698>
10005c78:	da013f15 	stw	r8,1276(sp)
10005c7c:	00040140 	call	10004014 <strlen>
10005c80:	1023883a 	mov	r17,r2
10005c84:	da013f17 	ldw	r8,1276(sp)
10005c88:	883c7f0e 	bge	r17,zero,10004e88 <__alt_data_end+0xf8004e88>
10005c8c:	0005883a 	mov	r2,zero
10005c90:	003c7d06 	br	10004e88 <__alt_data_end+0xf8004e88>
10005c94:	b809883a 	mov	r4,r23
10005c98:	b00b883a 	mov	r5,r22
10005c9c:	d9811e04 	addi	r6,sp,1144
10005ca0:	000b4ec0 	call	1000b4ec <__sprint_r>
10005ca4:	103a191e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005ca8:	d8c12017 	ldw	r3,1152(sp)
10005cac:	d8811f17 	ldw	r2,1148(sp)
10005cb0:	da000404 	addi	r8,sp,16
10005cb4:	d9413317 	ldw	r5,1228(sp)
10005cb8:	d9013117 	ldw	r4,1220(sp)
10005cbc:	10800044 	addi	r2,r2,1
10005cc0:	28c7883a 	add	r3,r5,r3
10005cc4:	41000015 	stw	r4,0(r8)
10005cc8:	41400115 	stw	r5,4(r8)
10005ccc:	d8c12015 	stw	r3,1152(sp)
10005cd0:	d8811f15 	stw	r2,1148(sp)
10005cd4:	010001c4 	movi	r4,7
10005cd8:	20bb060e 	bge	r4,r2,100048f4 <__alt_data_end+0xf80048f4>
10005cdc:	003d6206 	br	10005268 <__alt_data_end+0xf8005268>
10005ce0:	01040074 	movhi	r4,4097
10005ce4:	21047984 	addi	r4,r4,4582
10005ce8:	d9013615 	stw	r4,1240(sp)
10005cec:	003aa306 	br	1000477c <__alt_data_end+0xf800477c>
10005cf0:	d8812604 	addi	r2,sp,1176
10005cf4:	d8800115 	stw	r2,4(sp)
10005cf8:	d9413717 	ldw	r5,1244(sp)
10005cfc:	d8812504 	addi	r2,sp,1172
10005d00:	d8800215 	stw	r2,8(sp)
10005d04:	d8812104 	addi	r2,sp,1156
10005d08:	da400015 	stw	r9,0(sp)
10005d0c:	d8800315 	stw	r2,12(sp)
10005d10:	b809883a 	mov	r4,r23
10005d14:	880d883a 	mov	r6,r17
10005d18:	01c000c4 	movi	r7,3
10005d1c:	da013f15 	stw	r8,1276(sp)
10005d20:	da413e15 	stw	r9,1272(sp)
10005d24:	00065240 	call	10006524 <_dtoa_r>
10005d28:	da413e17 	ldw	r9,1272(sp)
10005d2c:	da013f17 	ldw	r8,1276(sp)
10005d30:	d8813115 	stw	r2,1220(sp)
10005d34:	482b883a 	mov	r21,r9
10005d38:	d8c13117 	ldw	r3,1220(sp)
10005d3c:	00801184 	movi	r2,70
10005d40:	1d55883a 	add	r10,r3,r21
10005d44:	98bebb1e 	bne	r19,r2,10005834 <__alt_data_end+0xf8005834>
10005d48:	19000007 	ldb	r4,0(r3)
10005d4c:	00800c04 	movi	r2,48
10005d50:	2080dd26 	beq	r4,r2,100060c8 <___vfprintf_internal_r+0x201c>
10005d54:	d8c12617 	ldw	r3,1176(sp)
10005d58:	50d5883a 	add	r10,r10,r3
10005d5c:	003eb506 	br	10005834 <__alt_data_end+0xf8005834>
10005d60:	0023883a 	mov	r17,zero
10005d64:	003d9b06 	br	100053d4 <__alt_data_end+0xf80053d4>
10005d68:	b809883a 	mov	r4,r23
10005d6c:	b00b883a 	mov	r5,r22
10005d70:	d9811e04 	addi	r6,sp,1144
10005d74:	000b4ec0 	call	1000b4ec <__sprint_r>
10005d78:	1039e41e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005d7c:	d8c12017 	ldw	r3,1152(sp)
10005d80:	da000404 	addi	r8,sp,16
10005d84:	003d9206 	br	100053d0 <__alt_data_end+0xf80053d0>
10005d88:	b809883a 	mov	r4,r23
10005d8c:	b00b883a 	mov	r5,r22
10005d90:	d9811e04 	addi	r6,sp,1144
10005d94:	000b4ec0 	call	1000b4ec <__sprint_r>
10005d98:	1039dc1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005d9c:	d8812617 	ldw	r2,1176(sp)
10005da0:	d8c12017 	ldw	r3,1152(sp)
10005da4:	da000404 	addi	r8,sp,16
10005da8:	003dfb06 	br	10005598 <__alt_data_end+0xf8005598>
10005dac:	01040074 	movhi	r4,4097
10005db0:	21047584 	addi	r4,r4,4566
10005db4:	d9012c15 	stw	r4,1200(sp)
10005db8:	d9012c17 	ldw	r4,1200(sp)
10005dbc:	1c07883a 	add	r3,r3,r16
10005dc0:	10800044 	addi	r2,r2,1
10005dc4:	41000015 	stw	r4,0(r8)
10005dc8:	44000115 	stw	r16,4(r8)
10005dcc:	d8c12015 	stw	r3,1152(sp)
10005dd0:	d8811f15 	stw	r2,1148(sp)
10005dd4:	010001c4 	movi	r4,7
10005dd8:	20bfae16 	blt	r4,r2,10005c94 <__alt_data_end+0xf8005c94>
10005ddc:	42000204 	addi	r8,r8,8
10005de0:	003fb406 	br	10005cb4 <__alt_data_end+0xf8005cb4>
10005de4:	0021883a 	mov	r16,zero
10005de8:	003dfd06 	br	100055e0 <__alt_data_end+0xf80055e0>
10005dec:	01440074 	movhi	r5,4097
10005df0:	29447984 	addi	r5,r5,4582
10005df4:	d9413615 	stw	r5,1240(sp)
10005df8:	003ae306 	br	10004988 <__alt_data_end+0xf8004988>
10005dfc:	b809883a 	mov	r4,r23
10005e00:	b00b883a 	mov	r5,r22
10005e04:	d9811e04 	addi	r6,sp,1144
10005e08:	000b4ec0 	call	1000b4ec <__sprint_r>
10005e0c:	1039bf1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10005e10:	d8812617 	ldw	r2,1176(sp)
10005e14:	d9413317 	ldw	r5,1228(sp)
10005e18:	d8c12017 	ldw	r3,1152(sp)
10005e1c:	da000404 	addi	r8,sp,16
10005e20:	2885c83a 	sub	r2,r5,r2
10005e24:	003ded06 	br	100055dc <__alt_data_end+0xf80055dc>
10005e28:	00800184 	movi	r2,6
10005e2c:	1240012e 	bgeu	r2,r9,10005e34 <___vfprintf_internal_r+0x1d88>
10005e30:	1013883a 	mov	r9,r2
10005e34:	4823883a 	mov	r17,r9
10005e38:	4805883a 	mov	r2,r9
10005e3c:	4800b216 	blt	r9,zero,10006108 <___vfprintf_internal_r+0x205c>
10005e40:	01440074 	movhi	r5,4097
10005e44:	29447304 	addi	r5,r5,4556
10005e48:	d8812b15 	stw	r2,1196(sp)
10005e4c:	dc812d15 	stw	r18,1204(sp)
10005e50:	d8013215 	stw	zero,1224(sp)
10005e54:	d8013415 	stw	zero,1232(sp)
10005e58:	d9413115 	stw	r5,1220(sp)
10005e5c:	0005883a 	mov	r2,zero
10005e60:	003a1906 	br	100046c8 <__alt_data_end+0xf80046c8>
10005e64:	04c00b44 	movi	r19,45
10005e68:	dcc12785 	stb	r19,1182(sp)
10005e6c:	003b0006 	br	10004a70 <__alt_data_end+0xf8004a70>
10005e70:	d8c12d17 	ldw	r3,1204(sp)
10005e74:	d9012f17 	ldw	r4,1212(sp)
10005e78:	18800017 	ldw	r2,0(r3)
10005e7c:	18c00104 	addi	r3,r3,4
10005e80:	d8c12d15 	stw	r3,1204(sp)
10005e84:	11000015 	stw	r4,0(r2)
10005e88:	0038c506 	br	100041a0 <__alt_data_end+0xf80041a0>
10005e8c:	01440074 	movhi	r5,4097
10005e90:	29446804 	addi	r5,r5,4512
10005e94:	d9413115 	stw	r5,1220(sp)
10005e98:	003f2406 	br	10005b2c <__alt_data_end+0xf8005b2c>
10005e9c:	00800b44 	movi	r2,45
10005ea0:	d8812785 	stb	r2,1182(sp)
10005ea4:	df012b15 	stw	fp,1196(sp)
10005ea8:	d8013215 	stw	zero,1224(sp)
10005eac:	df012d17 	ldw	fp,1204(sp)
10005eb0:	00800b44 	movi	r2,45
10005eb4:	dc812d15 	stw	r18,1204(sp)
10005eb8:	003a0006 	br	100046bc <__alt_data_end+0xf80046bc>
10005ebc:	d8c12617 	ldw	r3,1176(sp)
10005ec0:	00bfff44 	movi	r2,-3
10005ec4:	18800a16 	blt	r3,r2,10005ef0 <___vfprintf_internal_r+0x1e44>
10005ec8:	48c00916 	blt	r9,r3,10005ef0 <___vfprintf_internal_r+0x1e44>
10005ecc:	d8c13415 	stw	r3,1232(sp)
10005ed0:	040019c4 	movi	r16,103
10005ed4:	003e7606 	br	100058b0 <__alt_data_end+0xf80058b0>
10005ed8:	01040074 	movhi	r4,4097
10005edc:	21047584 	addi	r4,r4,4566
10005ee0:	d9012c15 	stw	r4,1200(sp)
10005ee4:	003c8e06 	br	10005120 <__alt_data_end+0xf8005120>
10005ee8:	5005883a 	mov	r2,r10
10005eec:	003e6506 	br	10005884 <__alt_data_end+0xf8005884>
10005ef0:	843fff84 	addi	r16,r16,-2
10005ef4:	1d7fffc4 	addi	r21,r3,-1
10005ef8:	dd412615 	stw	r21,1176(sp)
10005efc:	dc0122c5 	stb	r16,1163(sp)
10005f00:	a8009216 	blt	r21,zero,1000614c <___vfprintf_internal_r+0x20a0>
10005f04:	00800ac4 	movi	r2,43
10005f08:	d8812305 	stb	r2,1164(sp)
10005f0c:	00800244 	movi	r2,9
10005f10:	1540660e 	bge	r2,r21,100060ac <___vfprintf_internal_r+0x2000>
10005f14:	dcc122c4 	addi	r19,sp,1163
10005f18:	dc012c15 	stw	r16,1200(sp)
10005f1c:	4023883a 	mov	r17,r8
10005f20:	9821883a 	mov	r16,r19
10005f24:	a809883a 	mov	r4,r21
10005f28:	01400284 	movi	r5,10
10005f2c:	0002aa80 	call	10002aa8 <__modsi3>
10005f30:	10800c04 	addi	r2,r2,48
10005f34:	843fffc4 	addi	r16,r16,-1
10005f38:	a809883a 	mov	r4,r21
10005f3c:	01400284 	movi	r5,10
10005f40:	80800005 	stb	r2,0(r16)
10005f44:	0002a540 	call	10002a54 <__divsi3>
10005f48:	01000244 	movi	r4,9
10005f4c:	102b883a 	mov	r21,r2
10005f50:	20bff416 	blt	r4,r2,10005f24 <__alt_data_end+0xf8005f24>
10005f54:	8811883a 	mov	r8,r17
10005f58:	10800c04 	addi	r2,r2,48
10005f5c:	8023883a 	mov	r17,r16
10005f60:	897fffc4 	addi	r5,r17,-1
10005f64:	88bfffc5 	stb	r2,-1(r17)
10005f68:	dc012c17 	ldw	r16,1200(sp)
10005f6c:	2cc08a2e 	bgeu	r5,r19,10006198 <___vfprintf_internal_r+0x20ec>
10005f70:	d9812384 	addi	r6,sp,1166
10005f74:	344dc83a 	sub	r6,r6,r17
10005f78:	d9012344 	addi	r4,sp,1165
10005f7c:	998d883a 	add	r6,r19,r6
10005f80:	00000106 	br	10005f88 <___vfprintf_internal_r+0x1edc>
10005f84:	28800003 	ldbu	r2,0(r5)
10005f88:	20800005 	stb	r2,0(r4)
10005f8c:	21000044 	addi	r4,r4,1
10005f90:	29400044 	addi	r5,r5,1
10005f94:	21bffb1e 	bne	r4,r6,10005f84 <__alt_data_end+0xf8005f84>
10005f98:	d8812304 	addi	r2,sp,1164
10005f9c:	1445c83a 	sub	r2,r2,r17
10005fa0:	d9412344 	addi	r5,sp,1165
10005fa4:	2885883a 	add	r2,r5,r2
10005fa8:	14e7c83a 	sub	r19,r2,r19
10005fac:	d8813317 	ldw	r2,1228(sp)
10005fb0:	d8c13317 	ldw	r3,1228(sp)
10005fb4:	dcc13a15 	stw	r19,1256(sp)
10005fb8:	14e3883a 	add	r17,r2,r19
10005fbc:	00800044 	movi	r2,1
10005fc0:	10c0550e 	bge	r2,r3,10006118 <___vfprintf_internal_r+0x206c>
10005fc4:	8c400044 	addi	r17,r17,1
10005fc8:	8839883a 	mov	fp,r17
10005fcc:	88005016 	blt	r17,zero,10006110 <___vfprintf_internal_r+0x2064>
10005fd0:	d8013415 	stw	zero,1232(sp)
10005fd4:	003e3f06 	br	100058d4 <__alt_data_end+0xf80058d4>
10005fd8:	da412b15 	stw	r9,1196(sp)
10005fdc:	dcc12783 	ldbu	r19,1182(sp)
10005fe0:	4823883a 	mov	r17,r9
10005fe4:	dc812d15 	stw	r18,1204(sp)
10005fe8:	d8013215 	stw	zero,1224(sp)
10005fec:	d8013415 	stw	zero,1232(sp)
10005ff0:	0039ae06 	br	100046ac <__alt_data_end+0xf80046ac>
10005ff4:	483de91e 	bne	r9,zero,1000579c <__alt_data_end+0xf800579c>
10005ff8:	8813883a 	mov	r9,r17
10005ffc:	003de706 	br	1000579c <__alt_data_end+0xf800579c>
10006000:	b809883a 	mov	r4,r23
10006004:	b00b883a 	mov	r5,r22
10006008:	d9811e04 	addi	r6,sp,1144
1000600c:	000b4ec0 	call	1000b4ec <__sprint_r>
10006010:	10393e1e 	bne	r2,zero,1000450c <__alt_data_end+0xf800450c>
10006014:	dc012617 	ldw	r16,1176(sp)
10006018:	d8c12017 	ldw	r3,1152(sp)
1000601c:	d8811f17 	ldw	r2,1148(sp)
10006020:	da000404 	addi	r8,sp,16
10006024:	003ea006 	br	10005aa8 <__alt_data_end+0xf8005aa8>
10006028:	00c00b44 	movi	r3,45
1000602c:	2460003c 	xorhi	r17,r4,32768
10006030:	d8c12b05 	stb	r3,1196(sp)
10006034:	003ddf06 	br	100057b4 <__alt_data_end+0xf80057b4>
10006038:	02400184 	movi	r9,6
1000603c:	003dd706 	br	1000579c <__alt_data_end+0xf800579c>
10006040:	4d400044 	addi	r21,r9,1
10006044:	003de206 	br	100057d0 <__alt_data_end+0xf80057d0>
10006048:	d8c13417 	ldw	r3,1232(sp)
1000604c:	00c0490e 	bge	zero,r3,10006174 <___vfprintf_internal_r+0x20c8>
10006050:	04400044 	movi	r17,1
10006054:	d9013317 	ldw	r4,1228(sp)
10006058:	8923883a 	add	r17,r17,r4
1000605c:	8839883a 	mov	fp,r17
10006060:	883e1c0e 	bge	r17,zero,100058d4 <__alt_data_end+0xf80058d4>
10006064:	0039883a 	mov	fp,zero
10006068:	003e1a06 	br	100058d4 <__alt_data_end+0xf80058d4>
1000606c:	00c03b0e 	bge	zero,r3,1000615c <___vfprintf_internal_r+0x20b0>
10006070:	4800021e 	bne	r9,zero,1000607c <___vfprintf_internal_r+0x1fd0>
10006074:	e080004c 	andi	r2,fp,1
10006078:	10000626 	beq	r2,zero,10006094 <___vfprintf_internal_r+0x1fe8>
1000607c:	d8c13417 	ldw	r3,1232(sp)
10006080:	4a400044 	addi	r9,r9,1
10006084:	1a63883a 	add	r17,r3,r9
10006088:	8839883a 	mov	fp,r17
1000608c:	883e110e 	bge	r17,zero,100058d4 <__alt_data_end+0xf80058d4>
10006090:	003ff406 	br	10006064 <__alt_data_end+0xf8006064>
10006094:	1839883a 	mov	fp,r3
10006098:	18004116 	blt	r3,zero,100061a0 <___vfprintf_internal_r+0x20f4>
1000609c:	dc413417 	ldw	r17,1232(sp)
100060a0:	003e0c06 	br	100058d4 <__alt_data_end+0xf80058d4>
100060a4:	d8812117 	ldw	r2,1156(sp)
100060a8:	003df606 	br	10005884 <__alt_data_end+0xf8005884>
100060ac:	00800c04 	movi	r2,48
100060b0:	a8c00c04 	addi	r3,r21,48
100060b4:	d8812345 	stb	r2,1165(sp)
100060b8:	d8c12385 	stb	r3,1166(sp)
100060bc:	d88123c4 	addi	r2,sp,1167
100060c0:	dcc122c4 	addi	r19,sp,1163
100060c4:	003fb806 	br	10005fa8 <__alt_data_end+0xf8005fa8>
100060c8:	d9013717 	ldw	r4,1244(sp)
100060cc:	880b883a 	mov	r5,r17
100060d0:	000d883a 	mov	r6,zero
100060d4:	000f883a 	mov	r7,zero
100060d8:	da013f15 	stw	r8,1276(sp)
100060dc:	da413e15 	stw	r9,1272(sp)
100060e0:	da813d15 	stw	r10,1268(sp)
100060e4:	000dd240 	call	1000dd24 <__eqdf2>
100060e8:	da013f17 	ldw	r8,1276(sp)
100060ec:	da413e17 	ldw	r9,1272(sp)
100060f0:	da813d17 	ldw	r10,1268(sp)
100060f4:	103f1726 	beq	r2,zero,10005d54 <__alt_data_end+0xf8005d54>
100060f8:	00800044 	movi	r2,1
100060fc:	1547c83a 	sub	r3,r2,r21
10006100:	d8c12615 	stw	r3,1176(sp)
10006104:	003f1406 	br	10005d58 <__alt_data_end+0xf8005d58>
10006108:	0005883a 	mov	r2,zero
1000610c:	003f4c06 	br	10005e40 <__alt_data_end+0xf8005e40>
10006110:	0039883a 	mov	fp,zero
10006114:	003fae06 	br	10005fd0 <__alt_data_end+0xf8005fd0>
10006118:	e084703a 	and	r2,fp,r2
1000611c:	103faa26 	beq	r2,zero,10005fc8 <__alt_data_end+0xf8005fc8>
10006120:	003fa806 	br	10005fc4 <__alt_data_end+0xf8005fc4>
10006124:	d9412d17 	ldw	r5,1204(sp)
10006128:	2a400017 	ldw	r9,0(r5)
1000612c:	28c00104 	addi	r3,r5,4
10006130:	d8c12d15 	stw	r3,1204(sp)
10006134:	483ebc0e 	bge	r9,zero,10005c28 <__alt_data_end+0xf8005c28>
10006138:	027fffc4 	movi	r9,-1
1000613c:	e4000047 	ldb	r16,1(fp)
10006140:	00384206 	br	1000424c <__alt_data_end+0xf800424c>
10006144:	043fffc4 	movi	r16,-1
10006148:	0038ce06 	br	10004484 <__alt_data_end+0xf8004484>
1000614c:	00800b44 	movi	r2,45
10006150:	056bc83a 	sub	r21,zero,r21
10006154:	d8812305 	stb	r2,1164(sp)
10006158:	003f6c06 	br	10005f0c <__alt_data_end+0xf8005f0c>
1000615c:	4800081e 	bne	r9,zero,10006180 <___vfprintf_internal_r+0x20d4>
10006160:	e080004c 	andi	r2,fp,1
10006164:	1000061e 	bne	r2,zero,10006180 <___vfprintf_internal_r+0x20d4>
10006168:	07000044 	movi	fp,1
1000616c:	e023883a 	mov	r17,fp
10006170:	003dd806 	br	100058d4 <__alt_data_end+0xf80058d4>
10006174:	04400084 	movi	r17,2
10006178:	88e3c83a 	sub	r17,r17,r3
1000617c:	003fb506 	br	10006054 <__alt_data_end+0xf8006054>
10006180:	4c400084 	addi	r17,r9,2
10006184:	8839883a 	mov	fp,r17
10006188:	883dd20e 	bge	r17,zero,100058d4 <__alt_data_end+0xf80058d4>
1000618c:	003fb506 	br	10006064 <__alt_data_end+0xf8006064>
10006190:	d8c12617 	ldw	r3,1176(sp)
10006194:	003f5706 	br	10005ef4 <__alt_data_end+0xf8005ef4>
10006198:	d8812344 	addi	r2,sp,1165
1000619c:	003f8206 	br	10005fa8 <__alt_data_end+0xf8005fa8>
100061a0:	0039883a 	mov	fp,zero
100061a4:	003fbd06 	br	1000609c <__alt_data_end+0xf800609c>

100061a8 <__vfprintf_internal>:
100061a8:	2007883a 	mov	r3,r4
100061ac:	01040074 	movhi	r4,4097
100061b0:	210b9004 	addi	r4,r4,11840
100061b4:	21000017 	ldw	r4,0(r4)
100061b8:	2805883a 	mov	r2,r5
100061bc:	300f883a 	mov	r7,r6
100061c0:	180b883a 	mov	r5,r3
100061c4:	100d883a 	mov	r6,r2
100061c8:	00040ac1 	jmpi	100040ac <___vfprintf_internal_r>

100061cc <__swsetup_r>:
100061cc:	00840074 	movhi	r2,4097
100061d0:	defffd04 	addi	sp,sp,-12
100061d4:	108b9004 	addi	r2,r2,11840
100061d8:	dc400115 	stw	r17,4(sp)
100061dc:	2023883a 	mov	r17,r4
100061e0:	11000017 	ldw	r4,0(r2)
100061e4:	dc000015 	stw	r16,0(sp)
100061e8:	dfc00215 	stw	ra,8(sp)
100061ec:	2821883a 	mov	r16,r5
100061f0:	20000226 	beq	r4,zero,100061fc <__swsetup_r+0x30>
100061f4:	20c00e17 	ldw	r3,56(r4)
100061f8:	18002e26 	beq	r3,zero,100062b4 <__swsetup_r+0xe8>
100061fc:	8080030b 	ldhu	r2,12(r16)
10006200:	10c0020c 	andi	r3,r2,8
10006204:	100d883a 	mov	r6,r2
10006208:	18000f26 	beq	r3,zero,10006248 <__swsetup_r+0x7c>
1000620c:	80c00417 	ldw	r3,16(r16)
10006210:	18001526 	beq	r3,zero,10006268 <__swsetup_r+0x9c>
10006214:	1100004c 	andi	r4,r2,1
10006218:	20001c1e 	bne	r4,zero,1000628c <__swsetup_r+0xc0>
1000621c:	1080008c 	andi	r2,r2,2
10006220:	1000261e 	bne	r2,zero,100062bc <__swsetup_r+0xf0>
10006224:	80800517 	ldw	r2,20(r16)
10006228:	80800215 	stw	r2,8(r16)
1000622c:	18001c26 	beq	r3,zero,100062a0 <__swsetup_r+0xd4>
10006230:	0005883a 	mov	r2,zero
10006234:	dfc00217 	ldw	ra,8(sp)
10006238:	dc400117 	ldw	r17,4(sp)
1000623c:	dc000017 	ldw	r16,0(sp)
10006240:	dec00304 	addi	sp,sp,12
10006244:	f800283a 	ret
10006248:	3080040c 	andi	r2,r6,16
1000624c:	10001726 	beq	r2,zero,100062ac <__swsetup_r+0xe0>
10006250:	3080010c 	andi	r2,r6,4
10006254:	10001b1e 	bne	r2,zero,100062c4 <__swsetup_r+0xf8>
10006258:	80c00417 	ldw	r3,16(r16)
1000625c:	30800214 	ori	r2,r6,8
10006260:	8080030d 	sth	r2,12(r16)
10006264:	183feb1e 	bne	r3,zero,10006214 <__alt_data_end+0xf8006214>
10006268:	1140a00c 	andi	r5,r2,640
1000626c:	01008004 	movi	r4,512
10006270:	293fe826 	beq	r5,r4,10006214 <__alt_data_end+0xf8006214>
10006274:	8809883a 	mov	r4,r17
10006278:	800b883a 	mov	r5,r16
1000627c:	0008d600 	call	10008d60 <__smakebuf_r>
10006280:	8080030b 	ldhu	r2,12(r16)
10006284:	80c00417 	ldw	r3,16(r16)
10006288:	003fe206 	br	10006214 <__alt_data_end+0xf8006214>
1000628c:	80800517 	ldw	r2,20(r16)
10006290:	80000215 	stw	zero,8(r16)
10006294:	0085c83a 	sub	r2,zero,r2
10006298:	80800615 	stw	r2,24(r16)
1000629c:	183fe41e 	bne	r3,zero,10006230 <__alt_data_end+0xf8006230>
100062a0:	8080030b 	ldhu	r2,12(r16)
100062a4:	1080200c 	andi	r2,r2,128
100062a8:	103fe226 	beq	r2,zero,10006234 <__alt_data_end+0xf8006234>
100062ac:	00bfffc4 	movi	r2,-1
100062b0:	003fe006 	br	10006234 <__alt_data_end+0xf8006234>
100062b4:	00082080 	call	10008208 <__sinit>
100062b8:	003fd006 	br	100061fc <__alt_data_end+0xf80061fc>
100062bc:	0005883a 	mov	r2,zero
100062c0:	003fd906 	br	10006228 <__alt_data_end+0xf8006228>
100062c4:	81400c17 	ldw	r5,48(r16)
100062c8:	28000626 	beq	r5,zero,100062e4 <__swsetup_r+0x118>
100062cc:	80801004 	addi	r2,r16,64
100062d0:	28800326 	beq	r5,r2,100062e0 <__swsetup_r+0x114>
100062d4:	8809883a 	mov	r4,r17
100062d8:	000837c0 	call	1000837c <_free_r>
100062dc:	8180030b 	ldhu	r6,12(r16)
100062e0:	80000c15 	stw	zero,48(r16)
100062e4:	80c00417 	ldw	r3,16(r16)
100062e8:	00bff6c4 	movi	r2,-37
100062ec:	118c703a 	and	r6,r2,r6
100062f0:	80000115 	stw	zero,4(r16)
100062f4:	80c00015 	stw	r3,0(r16)
100062f8:	003fd806 	br	1000625c <__alt_data_end+0xf800625c>

100062fc <quorem>:
100062fc:	defff204 	addi	sp,sp,-56
10006300:	ddc00b15 	stw	r23,44(sp)
10006304:	20800417 	ldw	r2,16(r4)
10006308:	2dc00417 	ldw	r23,16(r5)
1000630c:	dfc00d15 	stw	ra,52(sp)
10006310:	df000c15 	stw	fp,48(sp)
10006314:	dd800a15 	stw	r22,40(sp)
10006318:	dd400915 	stw	r21,36(sp)
1000631c:	dd000815 	stw	r20,32(sp)
10006320:	dcc00715 	stw	r19,28(sp)
10006324:	dc800615 	stw	r18,24(sp)
10006328:	dc400515 	stw	r17,20(sp)
1000632c:	dc000415 	stw	r16,16(sp)
10006330:	15c07a16 	blt	r2,r23,1000651c <quorem+0x220>
10006334:	bdffffc4 	addi	r23,r23,-1
10006338:	bde9883a 	add	r20,r23,r23
1000633c:	28c00504 	addi	r3,r5,20
10006340:	a529883a 	add	r20,r20,r20
10006344:	1d39883a 	add	fp,r3,r20
10006348:	24c00504 	addi	r19,r4,20
1000634c:	d9400215 	stw	r5,8(sp)
10006350:	9d29883a 	add	r20,r19,r20
10006354:	e1400017 	ldw	r5,0(fp)
10006358:	d9000015 	stw	r4,0(sp)
1000635c:	a1000017 	ldw	r4,0(r20)
10006360:	29400044 	addi	r5,r5,1
10006364:	d8c00115 	stw	r3,4(sp)
10006368:	dd000315 	stw	r20,12(sp)
1000636c:	0002b040 	call	10002b04 <__udivsi3>
10006370:	1025883a 	mov	r18,r2
10006374:	10003026 	beq	r2,zero,10006438 <quorem+0x13c>
10006378:	dc400117 	ldw	r17,4(sp)
1000637c:	9829883a 	mov	r20,r19
10006380:	002d883a 	mov	r22,zero
10006384:	0021883a 	mov	r16,zero
10006388:	8d400017 	ldw	r21,0(r17)
1000638c:	900b883a 	mov	r5,r18
10006390:	8c400104 	addi	r17,r17,4
10006394:	a93fffcc 	andi	r4,r21,65535
10006398:	0002b140 	call	10002b14 <__mulsi3>
1000639c:	a808d43a 	srli	r4,r21,16
100063a0:	900b883a 	mov	r5,r18
100063a4:	b0ad883a 	add	r22,r22,r2
100063a8:	0002b140 	call	10002b14 <__mulsi3>
100063ac:	a1000017 	ldw	r4,0(r20)
100063b0:	b00cd43a 	srli	r6,r22,16
100063b4:	b0ffffcc 	andi	r3,r22,65535
100063b8:	217fffcc 	andi	r5,r4,65535
100063bc:	2c21883a 	add	r16,r5,r16
100063c0:	80c7c83a 	sub	r3,r16,r3
100063c4:	2008d43a 	srli	r4,r4,16
100063c8:	3085883a 	add	r2,r6,r2
100063cc:	1821d43a 	srai	r16,r3,16
100063d0:	117fffcc 	andi	r5,r2,65535
100063d4:	2149c83a 	sub	r4,r4,r5
100063d8:	2421883a 	add	r16,r4,r16
100063dc:	8008943a 	slli	r4,r16,16
100063e0:	18ffffcc 	andi	r3,r3,65535
100063e4:	102cd43a 	srli	r22,r2,16
100063e8:	20c8b03a 	or	r4,r4,r3
100063ec:	a1000015 	stw	r4,0(r20)
100063f0:	8021d43a 	srai	r16,r16,16
100063f4:	a5000104 	addi	r20,r20,4
100063f8:	e47fe32e 	bgeu	fp,r17,10006388 <__alt_data_end+0xf8006388>
100063fc:	d8c00317 	ldw	r3,12(sp)
10006400:	18800017 	ldw	r2,0(r3)
10006404:	10000c1e 	bne	r2,zero,10006438 <quorem+0x13c>
10006408:	18bfff04 	addi	r2,r3,-4
1000640c:	9880082e 	bgeu	r19,r2,10006430 <quorem+0x134>
10006410:	18ffff17 	ldw	r3,-4(r3)
10006414:	18000326 	beq	r3,zero,10006424 <quorem+0x128>
10006418:	00000506 	br	10006430 <quorem+0x134>
1000641c:	10c00017 	ldw	r3,0(r2)
10006420:	1800031e 	bne	r3,zero,10006430 <quorem+0x134>
10006424:	10bfff04 	addi	r2,r2,-4
10006428:	bdffffc4 	addi	r23,r23,-1
1000642c:	98bffb36 	bltu	r19,r2,1000641c <__alt_data_end+0xf800641c>
10006430:	d8c00017 	ldw	r3,0(sp)
10006434:	1dc00415 	stw	r23,16(r3)
10006438:	d9000017 	ldw	r4,0(sp)
1000643c:	d9400217 	ldw	r5,8(sp)
10006440:	000a4dc0 	call	1000a4dc <__mcmp>
10006444:	10002816 	blt	r2,zero,100064e8 <quorem+0x1ec>
10006448:	dc400117 	ldw	r17,4(sp)
1000644c:	94800044 	addi	r18,r18,1
10006450:	980d883a 	mov	r6,r19
10006454:	0007883a 	mov	r3,zero
10006458:	31000017 	ldw	r4,0(r6)
1000645c:	89400017 	ldw	r5,0(r17)
10006460:	31800104 	addi	r6,r6,4
10006464:	20bfffcc 	andi	r2,r4,65535
10006468:	10c7883a 	add	r3,r2,r3
1000646c:	28bfffcc 	andi	r2,r5,65535
10006470:	1885c83a 	sub	r2,r3,r2
10006474:	280ad43a 	srli	r5,r5,16
10006478:	2008d43a 	srli	r4,r4,16
1000647c:	1007d43a 	srai	r3,r2,16
10006480:	10bfffcc 	andi	r2,r2,65535
10006484:	2149c83a 	sub	r4,r4,r5
10006488:	20c9883a 	add	r4,r4,r3
1000648c:	200a943a 	slli	r5,r4,16
10006490:	8c400104 	addi	r17,r17,4
10006494:	2007d43a 	srai	r3,r4,16
10006498:	2884b03a 	or	r2,r5,r2
1000649c:	30bfff15 	stw	r2,-4(r6)
100064a0:	e47fed2e 	bgeu	fp,r17,10006458 <__alt_data_end+0xf8006458>
100064a4:	bdc5883a 	add	r2,r23,r23
100064a8:	1085883a 	add	r2,r2,r2
100064ac:	9887883a 	add	r3,r19,r2
100064b0:	18800017 	ldw	r2,0(r3)
100064b4:	10000c1e 	bne	r2,zero,100064e8 <quorem+0x1ec>
100064b8:	18bfff04 	addi	r2,r3,-4
100064bc:	9880082e 	bgeu	r19,r2,100064e0 <quorem+0x1e4>
100064c0:	18ffff17 	ldw	r3,-4(r3)
100064c4:	18000326 	beq	r3,zero,100064d4 <quorem+0x1d8>
100064c8:	00000506 	br	100064e0 <quorem+0x1e4>
100064cc:	10c00017 	ldw	r3,0(r2)
100064d0:	1800031e 	bne	r3,zero,100064e0 <quorem+0x1e4>
100064d4:	10bfff04 	addi	r2,r2,-4
100064d8:	bdffffc4 	addi	r23,r23,-1
100064dc:	98bffb36 	bltu	r19,r2,100064cc <__alt_data_end+0xf80064cc>
100064e0:	d8c00017 	ldw	r3,0(sp)
100064e4:	1dc00415 	stw	r23,16(r3)
100064e8:	9005883a 	mov	r2,r18
100064ec:	dfc00d17 	ldw	ra,52(sp)
100064f0:	df000c17 	ldw	fp,48(sp)
100064f4:	ddc00b17 	ldw	r23,44(sp)
100064f8:	dd800a17 	ldw	r22,40(sp)
100064fc:	dd400917 	ldw	r21,36(sp)
10006500:	dd000817 	ldw	r20,32(sp)
10006504:	dcc00717 	ldw	r19,28(sp)
10006508:	dc800617 	ldw	r18,24(sp)
1000650c:	dc400517 	ldw	r17,20(sp)
10006510:	dc000417 	ldw	r16,16(sp)
10006514:	dec00e04 	addi	sp,sp,56
10006518:	f800283a 	ret
1000651c:	0005883a 	mov	r2,zero
10006520:	003ff206 	br	100064ec <__alt_data_end+0xf80064ec>

10006524 <_dtoa_r>:
10006524:	20801017 	ldw	r2,64(r4)
10006528:	deffde04 	addi	sp,sp,-136
1000652c:	dd401d15 	stw	r21,116(sp)
10006530:	dcc01b15 	stw	r19,108(sp)
10006534:	dc801a15 	stw	r18,104(sp)
10006538:	dc401915 	stw	r17,100(sp)
1000653c:	dc001815 	stw	r16,96(sp)
10006540:	dfc02115 	stw	ra,132(sp)
10006544:	df002015 	stw	fp,128(sp)
10006548:	ddc01f15 	stw	r23,124(sp)
1000654c:	dd801e15 	stw	r22,120(sp)
10006550:	dd001c15 	stw	r20,112(sp)
10006554:	d9c00315 	stw	r7,12(sp)
10006558:	2021883a 	mov	r16,r4
1000655c:	302b883a 	mov	r21,r6
10006560:	2825883a 	mov	r18,r5
10006564:	dc402417 	ldw	r17,144(sp)
10006568:	3027883a 	mov	r19,r6
1000656c:	10000826 	beq	r2,zero,10006590 <_dtoa_r+0x6c>
10006570:	21801117 	ldw	r6,68(r4)
10006574:	00c00044 	movi	r3,1
10006578:	100b883a 	mov	r5,r2
1000657c:	1986983a 	sll	r3,r3,r6
10006580:	11800115 	stw	r6,4(r2)
10006584:	10c00215 	stw	r3,8(r2)
10006588:	0009c080 	call	10009c08 <_Bfree>
1000658c:	80001015 	stw	zero,64(r16)
10006590:	a8002d16 	blt	r21,zero,10006648 <_dtoa_r+0x124>
10006594:	88000015 	stw	zero,0(r17)
10006598:	a8dffc2c 	andhi	r3,r21,32752
1000659c:	009ffc34 	movhi	r2,32752
100065a0:	18801b26 	beq	r3,r2,10006610 <_dtoa_r+0xec>
100065a4:	9009883a 	mov	r4,r18
100065a8:	980b883a 	mov	r5,r19
100065ac:	000d883a 	mov	r6,zero
100065b0:	000f883a 	mov	r7,zero
100065b4:	000dd240 	call	1000dd24 <__eqdf2>
100065b8:	10002a1e 	bne	r2,zero,10006664 <_dtoa_r+0x140>
100065bc:	d8c02317 	ldw	r3,140(sp)
100065c0:	d9002517 	ldw	r4,148(sp)
100065c4:	00800044 	movi	r2,1
100065c8:	18800015 	stw	r2,0(r3)
100065cc:	2001a226 	beq	r4,zero,10006c58 <_dtoa_r+0x734>
100065d0:	00840074 	movhi	r2,4097
100065d4:	10847544 	addi	r2,r2,4565
100065d8:	20800015 	stw	r2,0(r4)
100065dc:	10bfffc4 	addi	r2,r2,-1
100065e0:	dfc02117 	ldw	ra,132(sp)
100065e4:	df002017 	ldw	fp,128(sp)
100065e8:	ddc01f17 	ldw	r23,124(sp)
100065ec:	dd801e17 	ldw	r22,120(sp)
100065f0:	dd401d17 	ldw	r21,116(sp)
100065f4:	dd001c17 	ldw	r20,112(sp)
100065f8:	dcc01b17 	ldw	r19,108(sp)
100065fc:	dc801a17 	ldw	r18,104(sp)
10006600:	dc401917 	ldw	r17,100(sp)
10006604:	dc001817 	ldw	r16,96(sp)
10006608:	dec02204 	addi	sp,sp,136
1000660c:	f800283a 	ret
10006610:	d8c02317 	ldw	r3,140(sp)
10006614:	0089c3c4 	movi	r2,9999
10006618:	18800015 	stw	r2,0(r3)
1000661c:	90017c26 	beq	r18,zero,10006c10 <_dtoa_r+0x6ec>
10006620:	00840074 	movhi	r2,4097
10006624:	10848104 	addi	r2,r2,4612
10006628:	d9002517 	ldw	r4,148(sp)
1000662c:	203fec26 	beq	r4,zero,100065e0 <__alt_data_end+0xf80065e0>
10006630:	10c000c7 	ldb	r3,3(r2)
10006634:	18017d1e 	bne	r3,zero,10006c2c <_dtoa_r+0x708>
10006638:	10c000c4 	addi	r3,r2,3
1000663c:	d9802517 	ldw	r6,148(sp)
10006640:	30c00015 	stw	r3,0(r6)
10006644:	003fe606 	br	100065e0 <__alt_data_end+0xf80065e0>
10006648:	04e00034 	movhi	r19,32768
1000664c:	9cffffc4 	addi	r19,r19,-1
10006650:	00800044 	movi	r2,1
10006654:	ace6703a 	and	r19,r21,r19
10006658:	88800015 	stw	r2,0(r17)
1000665c:	982b883a 	mov	r21,r19
10006660:	003fcd06 	br	10006598 <__alt_data_end+0xf8006598>
10006664:	d8800204 	addi	r2,sp,8
10006668:	a822d53a 	srli	r17,r21,20
1000666c:	d8800015 	stw	r2,0(sp)
10006670:	8009883a 	mov	r4,r16
10006674:	900b883a 	mov	r5,r18
10006678:	980d883a 	mov	r6,r19
1000667c:	d9c00104 	addi	r7,sp,4
10006680:	000a8500 	call	1000a850 <__d2b>
10006684:	1039883a 	mov	fp,r2
10006688:	88016a1e 	bne	r17,zero,10006c34 <_dtoa_r+0x710>
1000668c:	dd000217 	ldw	r20,8(sp)
10006690:	dc400117 	ldw	r17,4(sp)
10006694:	00befbc4 	movi	r2,-1041
10006698:	a463883a 	add	r17,r20,r17
1000669c:	8882ea16 	blt	r17,r2,10007248 <_dtoa_r+0xd24>
100066a0:	00bf0384 	movi	r2,-1010
100066a4:	1445c83a 	sub	r2,r2,r17
100066a8:	89010484 	addi	r4,r17,1042
100066ac:	a8aa983a 	sll	r21,r21,r2
100066b0:	9108d83a 	srl	r4,r18,r4
100066b4:	a908b03a 	or	r4,r21,r4
100066b8:	000e7d40 	call	1000e7d4 <__floatunsidf>
100066bc:	017f8434 	movhi	r5,65040
100066c0:	01800044 	movi	r6,1
100066c4:	1009883a 	mov	r4,r2
100066c8:	194b883a 	add	r5,r3,r5
100066cc:	8c7fffc4 	addi	r17,r17,-1
100066d0:	d9800f15 	stw	r6,60(sp)
100066d4:	000d883a 	mov	r6,zero
100066d8:	01cffe34 	movhi	r7,16376
100066dc:	00033d80 	call	100033d8 <__subdf3>
100066e0:	0198dbf4 	movhi	r6,25455
100066e4:	01cff4f4 	movhi	r7,16339
100066e8:	1009883a 	mov	r4,r2
100066ec:	180b883a 	mov	r5,r3
100066f0:	3190d844 	addi	r6,r6,17249
100066f4:	39e1e9c4 	addi	r7,r7,-30809
100066f8:	000df680 	call	1000df68 <__muldf3>
100066fc:	01a2d874 	movhi	r6,35681
10006700:	01cff1f4 	movhi	r7,16327
10006704:	180b883a 	mov	r5,r3
10006708:	31b22cc4 	addi	r6,r6,-14157
1000670c:	39e28a04 	addi	r7,r7,-30168
10006710:	1009883a 	mov	r4,r2
10006714:	0002b3c0 	call	10002b3c <__adddf3>
10006718:	8809883a 	mov	r4,r17
1000671c:	102d883a 	mov	r22,r2
10006720:	182b883a 	mov	r21,r3
10006724:	0003d300 	call	10003d30 <__floatsidf>
10006728:	019427f4 	movhi	r6,20639
1000672c:	01cff4f4 	movhi	r7,16339
10006730:	1009883a 	mov	r4,r2
10006734:	180b883a 	mov	r5,r3
10006738:	319e7ec4 	addi	r6,r6,31227
1000673c:	39d104c4 	addi	r7,r7,17427
10006740:	000df680 	call	1000df68 <__muldf3>
10006744:	b009883a 	mov	r4,r22
10006748:	a80b883a 	mov	r5,r21
1000674c:	100d883a 	mov	r6,r2
10006750:	180f883a 	mov	r7,r3
10006754:	0002b3c0 	call	10002b3c <__adddf3>
10006758:	1009883a 	mov	r4,r2
1000675c:	180b883a 	mov	r5,r3
10006760:	102d883a 	mov	r22,r2
10006764:	182b883a 	mov	r21,r3
10006768:	0003ca80 	call	10003ca8 <__fixdfsi>
1000676c:	b009883a 	mov	r4,r22
10006770:	a80b883a 	mov	r5,r21
10006774:	000d883a 	mov	r6,zero
10006778:	000f883a 	mov	r7,zero
1000677c:	d8800515 	stw	r2,20(sp)
10006780:	000de880 	call	1000de88 <__ledf2>
10006784:	10023116 	blt	r2,zero,1000704c <_dtoa_r+0xb28>
10006788:	d8c00517 	ldw	r3,20(sp)
1000678c:	00800584 	movi	r2,22
10006790:	10c21f36 	bltu	r2,r3,10007010 <_dtoa_r+0xaec>
10006794:	180490fa 	slli	r2,r3,3
10006798:	00c40074 	movhi	r3,4097
1000679c:	18c49d04 	addi	r3,r3,4724
100067a0:	1885883a 	add	r2,r3,r2
100067a4:	11000017 	ldw	r4,0(r2)
100067a8:	11400117 	ldw	r5,4(r2)
100067ac:	900d883a 	mov	r6,r18
100067b0:	980f883a 	mov	r7,r19
100067b4:	000dda80 	call	1000dda8 <__gedf2>
100067b8:	0082a70e 	bge	zero,r2,10007258 <_dtoa_r+0xd34>
100067bc:	d9000517 	ldw	r4,20(sp)
100067c0:	d8000c15 	stw	zero,48(sp)
100067c4:	213fffc4 	addi	r4,r4,-1
100067c8:	d9000515 	stw	r4,20(sp)
100067cc:	a463c83a 	sub	r17,r20,r17
100067d0:	8dbfffc4 	addi	r22,r17,-1
100067d4:	b0021916 	blt	r22,zero,1000703c <_dtoa_r+0xb18>
100067d8:	d8000815 	stw	zero,32(sp)
100067dc:	d8800517 	ldw	r2,20(sp)
100067e0:	10020e16 	blt	r2,zero,1000701c <_dtoa_r+0xaf8>
100067e4:	b0ad883a 	add	r22,r22,r2
100067e8:	d8800a15 	stw	r2,40(sp)
100067ec:	d8000915 	stw	zero,36(sp)
100067f0:	d8c00317 	ldw	r3,12(sp)
100067f4:	00800244 	movi	r2,9
100067f8:	10c11a36 	bltu	r2,r3,10006c64 <_dtoa_r+0x740>
100067fc:	00800144 	movi	r2,5
10006800:	10c4fc0e 	bge	r2,r3,10007bf4 <_dtoa_r+0x16d0>
10006804:	18ffff04 	addi	r3,r3,-4
10006808:	d8c00315 	stw	r3,12(sp)
1000680c:	0029883a 	mov	r20,zero
10006810:	d9800317 	ldw	r6,12(sp)
10006814:	008000c4 	movi	r2,3
10006818:	3083bd26 	beq	r6,r2,10007710 <_dtoa_r+0x11ec>
1000681c:	1183670e 	bge	r2,r6,100075bc <_dtoa_r+0x1098>
10006820:	d8c00317 	ldw	r3,12(sp)
10006824:	00800104 	movi	r2,4
10006828:	1882e726 	beq	r3,r2,100073c8 <_dtoa_r+0xea4>
1000682c:	00800144 	movi	r2,5
10006830:	1884f21e 	bne	r3,r2,10007bfc <_dtoa_r+0x16d8>
10006834:	00800044 	movi	r2,1
10006838:	d8800b15 	stw	r2,44(sp)
1000683c:	d8c02217 	ldw	r3,136(sp)
10006840:	d9000517 	ldw	r4,20(sp)
10006844:	1907883a 	add	r3,r3,r4
10006848:	19800044 	addi	r6,r3,1
1000684c:	d8c00d15 	stw	r3,52(sp)
10006850:	d9800615 	stw	r6,24(sp)
10006854:	0183c30e 	bge	zero,r6,10007764 <_dtoa_r+0x1240>
10006858:	d9800617 	ldw	r6,24(sp)
1000685c:	3023883a 	mov	r17,r6
10006860:	80001115 	stw	zero,68(r16)
10006864:	008005c4 	movi	r2,23
10006868:	1184f62e 	bgeu	r2,r6,10007c44 <_dtoa_r+0x1720>
1000686c:	00c00044 	movi	r3,1
10006870:	00800104 	movi	r2,4
10006874:	1085883a 	add	r2,r2,r2
10006878:	11000504 	addi	r4,r2,20
1000687c:	180b883a 	mov	r5,r3
10006880:	18c00044 	addi	r3,r3,1
10006884:	313ffb2e 	bgeu	r6,r4,10006874 <__alt_data_end+0xf8006874>
10006888:	81401115 	stw	r5,68(r16)
1000688c:	8009883a 	mov	r4,r16
10006890:	0009b600 	call	10009b60 <_Balloc>
10006894:	d8800715 	stw	r2,28(sp)
10006898:	80801015 	stw	r2,64(r16)
1000689c:	00800384 	movi	r2,14
100068a0:	1440fd36 	bltu	r2,r17,10006c98 <_dtoa_r+0x774>
100068a4:	a000fc26 	beq	r20,zero,10006c98 <_dtoa_r+0x774>
100068a8:	d8800517 	ldw	r2,20(sp)
100068ac:	0083b90e 	bge	zero,r2,10007794 <_dtoa_r+0x1270>
100068b0:	d8c00517 	ldw	r3,20(sp)
100068b4:	108003cc 	andi	r2,r2,15
100068b8:	100490fa 	slli	r2,r2,3
100068bc:	182fd13a 	srai	r23,r3,4
100068c0:	00c40074 	movhi	r3,4097
100068c4:	18c49d04 	addi	r3,r3,4724
100068c8:	1885883a 	add	r2,r3,r2
100068cc:	b8c0040c 	andi	r3,r23,16
100068d0:	12c00017 	ldw	r11,0(r2)
100068d4:	12800117 	ldw	r10,4(r2)
100068d8:	18039726 	beq	r3,zero,10007738 <_dtoa_r+0x1214>
100068dc:	00840074 	movhi	r2,4097
100068e0:	10849304 	addi	r2,r2,4684
100068e4:	11800817 	ldw	r6,32(r2)
100068e8:	11c00917 	ldw	r7,36(r2)
100068ec:	9009883a 	mov	r4,r18
100068f0:	980b883a 	mov	r5,r19
100068f4:	da801615 	stw	r10,88(sp)
100068f8:	dac01515 	stw	r11,84(sp)
100068fc:	000d3a40 	call	1000d3a4 <__divdf3>
10006900:	da801617 	ldw	r10,88(sp)
10006904:	dac01517 	ldw	r11,84(sp)
10006908:	bdc003cc 	andi	r23,r23,15
1000690c:	044000c4 	movi	r17,3
10006910:	d8800e15 	stw	r2,56(sp)
10006914:	182b883a 	mov	r21,r3
10006918:	b8001126 	beq	r23,zero,10006960 <_dtoa_r+0x43c>
1000691c:	05040074 	movhi	r20,4097
10006920:	a5049304 	addi	r20,r20,4684
10006924:	5805883a 	mov	r2,r11
10006928:	5007883a 	mov	r3,r10
1000692c:	b980004c 	andi	r6,r23,1
10006930:	1009883a 	mov	r4,r2
10006934:	b82fd07a 	srai	r23,r23,1
10006938:	180b883a 	mov	r5,r3
1000693c:	30000426 	beq	r6,zero,10006950 <_dtoa_r+0x42c>
10006940:	a1800017 	ldw	r6,0(r20)
10006944:	a1c00117 	ldw	r7,4(r20)
10006948:	8c400044 	addi	r17,r17,1
1000694c:	000df680 	call	1000df68 <__muldf3>
10006950:	a5000204 	addi	r20,r20,8
10006954:	b83ff51e 	bne	r23,zero,1000692c <__alt_data_end+0xf800692c>
10006958:	1017883a 	mov	r11,r2
1000695c:	1815883a 	mov	r10,r3
10006960:	d9000e17 	ldw	r4,56(sp)
10006964:	a80b883a 	mov	r5,r21
10006968:	580d883a 	mov	r6,r11
1000696c:	500f883a 	mov	r7,r10
10006970:	000d3a40 	call	1000d3a4 <__divdf3>
10006974:	1029883a 	mov	r20,r2
10006978:	182b883a 	mov	r21,r3
1000697c:	d9800c17 	ldw	r6,48(sp)
10006980:	30000626 	beq	r6,zero,1000699c <_dtoa_r+0x478>
10006984:	a009883a 	mov	r4,r20
10006988:	a80b883a 	mov	r5,r21
1000698c:	000d883a 	mov	r6,zero
10006990:	01cffc34 	movhi	r7,16368
10006994:	000de880 	call	1000de88 <__ledf2>
10006998:	10043216 	blt	r2,zero,10007a64 <_dtoa_r+0x1540>
1000699c:	8809883a 	mov	r4,r17
100069a0:	0003d300 	call	10003d30 <__floatsidf>
100069a4:	1009883a 	mov	r4,r2
100069a8:	180b883a 	mov	r5,r3
100069ac:	a00d883a 	mov	r6,r20
100069b0:	a80f883a 	mov	r7,r21
100069b4:	000df680 	call	1000df68 <__muldf3>
100069b8:	000d883a 	mov	r6,zero
100069bc:	1009883a 	mov	r4,r2
100069c0:	180b883a 	mov	r5,r3
100069c4:	01d00734 	movhi	r7,16412
100069c8:	0002b3c0 	call	10002b3c <__adddf3>
100069cc:	1023883a 	mov	r17,r2
100069d0:	d9800617 	ldw	r6,24(sp)
100069d4:	00bf3034 	movhi	r2,64704
100069d8:	1885883a 	add	r2,r3,r2
100069dc:	d8800e15 	stw	r2,56(sp)
100069e0:	30032e26 	beq	r6,zero,1000769c <_dtoa_r+0x1178>
100069e4:	d8c00517 	ldw	r3,20(sp)
100069e8:	da800617 	ldw	r10,24(sp)
100069ec:	d8c01215 	stw	r3,72(sp)
100069f0:	d9000b17 	ldw	r4,44(sp)
100069f4:	2003b026 	beq	r4,zero,100078b8 <_dtoa_r+0x1394>
100069f8:	50bfffc4 	addi	r2,r10,-1
100069fc:	100490fa 	slli	r2,r2,3
10006a00:	00c40074 	movhi	r3,4097
10006a04:	18c49d04 	addi	r3,r3,4724
10006a08:	1885883a 	add	r2,r3,r2
10006a0c:	11800017 	ldw	r6,0(r2)
10006a10:	11c00117 	ldw	r7,4(r2)
10006a14:	d8800717 	ldw	r2,28(sp)
10006a18:	0009883a 	mov	r4,zero
10006a1c:	014ff834 	movhi	r5,16352
10006a20:	da801615 	stw	r10,88(sp)
10006a24:	15c00044 	addi	r23,r2,1
10006a28:	000d3a40 	call	1000d3a4 <__divdf3>
10006a2c:	d9c00e17 	ldw	r7,56(sp)
10006a30:	880d883a 	mov	r6,r17
10006a34:	1009883a 	mov	r4,r2
10006a38:	180b883a 	mov	r5,r3
10006a3c:	00033d80 	call	100033d8 <__subdf3>
10006a40:	a80b883a 	mov	r5,r21
10006a44:	a009883a 	mov	r4,r20
10006a48:	d8c01015 	stw	r3,64(sp)
10006a4c:	d8800e15 	stw	r2,56(sp)
10006a50:	0003ca80 	call	10003ca8 <__fixdfsi>
10006a54:	1009883a 	mov	r4,r2
10006a58:	d8801715 	stw	r2,92(sp)
10006a5c:	0003d300 	call	10003d30 <__floatsidf>
10006a60:	a009883a 	mov	r4,r20
10006a64:	a80b883a 	mov	r5,r21
10006a68:	100d883a 	mov	r6,r2
10006a6c:	180f883a 	mov	r7,r3
10006a70:	00033d80 	call	100033d8 <__subdf3>
10006a74:	da001717 	ldw	r8,92(sp)
10006a78:	1829883a 	mov	r20,r3
10006a7c:	d8c00717 	ldw	r3,28(sp)
10006a80:	d9000e17 	ldw	r4,56(sp)
10006a84:	d9401017 	ldw	r5,64(sp)
10006a88:	42000c04 	addi	r8,r8,48
10006a8c:	1023883a 	mov	r17,r2
10006a90:	1a000005 	stb	r8,0(r3)
10006a94:	880d883a 	mov	r6,r17
10006a98:	a00f883a 	mov	r7,r20
10006a9c:	402b883a 	mov	r21,r8
10006aa0:	000dda80 	call	1000dda8 <__gedf2>
10006aa4:	00844516 	blt	zero,r2,10007bbc <_dtoa_r+0x1698>
10006aa8:	0009883a 	mov	r4,zero
10006aac:	014ffc34 	movhi	r5,16368
10006ab0:	880d883a 	mov	r6,r17
10006ab4:	a00f883a 	mov	r7,r20
10006ab8:	00033d80 	call	100033d8 <__subdf3>
10006abc:	d9000e17 	ldw	r4,56(sp)
10006ac0:	d9401017 	ldw	r5,64(sp)
10006ac4:	100d883a 	mov	r6,r2
10006ac8:	180f883a 	mov	r7,r3
10006acc:	000dda80 	call	1000dda8 <__gedf2>
10006ad0:	da801617 	ldw	r10,88(sp)
10006ad4:	00843616 	blt	zero,r2,10007bb0 <_dtoa_r+0x168c>
10006ad8:	00800044 	movi	r2,1
10006adc:	12806e0e 	bge	r2,r10,10006c98 <_dtoa_r+0x774>
10006ae0:	d9000717 	ldw	r4,28(sp)
10006ae4:	dd801315 	stw	r22,76(sp)
10006ae8:	dc001115 	stw	r16,68(sp)
10006aec:	2295883a 	add	r10,r4,r10
10006af0:	dcc01415 	stw	r19,80(sp)
10006af4:	502d883a 	mov	r22,r10
10006af8:	dcc01017 	ldw	r19,64(sp)
10006afc:	b821883a 	mov	r16,r23
10006b00:	dc801015 	stw	r18,64(sp)
10006b04:	dc800e17 	ldw	r18,56(sp)
10006b08:	00000906 	br	10006b30 <_dtoa_r+0x60c>
10006b0c:	00033d80 	call	100033d8 <__subdf3>
10006b10:	1009883a 	mov	r4,r2
10006b14:	180b883a 	mov	r5,r3
10006b18:	900d883a 	mov	r6,r18
10006b1c:	980f883a 	mov	r7,r19
10006b20:	000de880 	call	1000de88 <__ledf2>
10006b24:	10040e16 	blt	r2,zero,10007b60 <_dtoa_r+0x163c>
10006b28:	b821883a 	mov	r16,r23
10006b2c:	bd841026 	beq	r23,r22,10007b70 <_dtoa_r+0x164c>
10006b30:	9009883a 	mov	r4,r18
10006b34:	980b883a 	mov	r5,r19
10006b38:	000d883a 	mov	r6,zero
10006b3c:	01d00934 	movhi	r7,16420
10006b40:	000df680 	call	1000df68 <__muldf3>
10006b44:	000d883a 	mov	r6,zero
10006b48:	01d00934 	movhi	r7,16420
10006b4c:	8809883a 	mov	r4,r17
10006b50:	a00b883a 	mov	r5,r20
10006b54:	1025883a 	mov	r18,r2
10006b58:	1827883a 	mov	r19,r3
10006b5c:	000df680 	call	1000df68 <__muldf3>
10006b60:	180b883a 	mov	r5,r3
10006b64:	1009883a 	mov	r4,r2
10006b68:	1823883a 	mov	r17,r3
10006b6c:	1029883a 	mov	r20,r2
10006b70:	0003ca80 	call	10003ca8 <__fixdfsi>
10006b74:	1009883a 	mov	r4,r2
10006b78:	102b883a 	mov	r21,r2
10006b7c:	0003d300 	call	10003d30 <__floatsidf>
10006b80:	a009883a 	mov	r4,r20
10006b84:	880b883a 	mov	r5,r17
10006b88:	100d883a 	mov	r6,r2
10006b8c:	180f883a 	mov	r7,r3
10006b90:	00033d80 	call	100033d8 <__subdf3>
10006b94:	ad400c04 	addi	r21,r21,48
10006b98:	1009883a 	mov	r4,r2
10006b9c:	180b883a 	mov	r5,r3
10006ba0:	900d883a 	mov	r6,r18
10006ba4:	980f883a 	mov	r7,r19
10006ba8:	85400005 	stb	r21,0(r16)
10006bac:	1023883a 	mov	r17,r2
10006bb0:	1829883a 	mov	r20,r3
10006bb4:	000de880 	call	1000de88 <__ledf2>
10006bb8:	bdc00044 	addi	r23,r23,1
10006bbc:	0009883a 	mov	r4,zero
10006bc0:	014ffc34 	movhi	r5,16368
10006bc4:	880d883a 	mov	r6,r17
10006bc8:	a00f883a 	mov	r7,r20
10006bcc:	103fcf0e 	bge	r2,zero,10006b0c <__alt_data_end+0xf8006b0c>
10006bd0:	d9801217 	ldw	r6,72(sp)
10006bd4:	dc001117 	ldw	r16,68(sp)
10006bd8:	d9800515 	stw	r6,20(sp)
10006bdc:	8009883a 	mov	r4,r16
10006be0:	e00b883a 	mov	r5,fp
10006be4:	0009c080 	call	10009c08 <_Bfree>
10006be8:	d8c00517 	ldw	r3,20(sp)
10006bec:	d9002317 	ldw	r4,140(sp)
10006bf0:	d9802517 	ldw	r6,148(sp)
10006bf4:	b8000005 	stb	zero,0(r23)
10006bf8:	18800044 	addi	r2,r3,1
10006bfc:	20800015 	stw	r2,0(r4)
10006c00:	30027226 	beq	r6,zero,100075cc <_dtoa_r+0x10a8>
10006c04:	35c00015 	stw	r23,0(r6)
10006c08:	d8800717 	ldw	r2,28(sp)
10006c0c:	003e7406 	br	100065e0 <__alt_data_end+0xf80065e0>
10006c10:	00800434 	movhi	r2,16
10006c14:	10bfffc4 	addi	r2,r2,-1
10006c18:	a8aa703a 	and	r21,r21,r2
10006c1c:	a83e801e 	bne	r21,zero,10006620 <__alt_data_end+0xf8006620>
10006c20:	00840074 	movhi	r2,4097
10006c24:	10847e04 	addi	r2,r2,4600
10006c28:	003e7f06 	br	10006628 <__alt_data_end+0xf8006628>
10006c2c:	10c00204 	addi	r3,r2,8
10006c30:	003e8206 	br	1000663c <__alt_data_end+0xf800663c>
10006c34:	01400434 	movhi	r5,16
10006c38:	297fffc4 	addi	r5,r5,-1
10006c3c:	994a703a 	and	r5,r19,r5
10006c40:	9009883a 	mov	r4,r18
10006c44:	8c7f0044 	addi	r17,r17,-1023
10006c48:	294ffc34 	orhi	r5,r5,16368
10006c4c:	dd000217 	ldw	r20,8(sp)
10006c50:	d8000f15 	stw	zero,60(sp)
10006c54:	003e9f06 	br	100066d4 <__alt_data_end+0xf80066d4>
10006c58:	00840074 	movhi	r2,4097
10006c5c:	10847504 	addi	r2,r2,4564
10006c60:	003e5f06 	br	100065e0 <__alt_data_end+0xf80065e0>
10006c64:	80001115 	stw	zero,68(r16)
10006c68:	8009883a 	mov	r4,r16
10006c6c:	000b883a 	mov	r5,zero
10006c70:	0009b600 	call	10009b60 <_Balloc>
10006c74:	01bfffc4 	movi	r6,-1
10006c78:	d8800715 	stw	r2,28(sp)
10006c7c:	80801015 	stw	r2,64(r16)
10006c80:	00800044 	movi	r2,1
10006c84:	d9800615 	stw	r6,24(sp)
10006c88:	d8800b15 	stw	r2,44(sp)
10006c8c:	d8002215 	stw	zero,136(sp)
10006c90:	d9800d15 	stw	r6,52(sp)
10006c94:	d8000315 	stw	zero,12(sp)
10006c98:	d8800117 	ldw	r2,4(sp)
10006c9c:	10008e16 	blt	r2,zero,10006ed8 <_dtoa_r+0x9b4>
10006ca0:	d9000517 	ldw	r4,20(sp)
10006ca4:	00c00384 	movi	r3,14
10006ca8:	19008b16 	blt	r3,r4,10006ed8 <_dtoa_r+0x9b4>
10006cac:	200490fa 	slli	r2,r4,3
10006cb0:	00c40074 	movhi	r3,4097
10006cb4:	d9802217 	ldw	r6,136(sp)
10006cb8:	18c49d04 	addi	r3,r3,4724
10006cbc:	1885883a 	add	r2,r3,r2
10006cc0:	14400017 	ldw	r17,0(r2)
10006cc4:	15000117 	ldw	r20,4(r2)
10006cc8:	3001c716 	blt	r6,zero,100073e8 <_dtoa_r+0xec4>
10006ccc:	880d883a 	mov	r6,r17
10006cd0:	a00f883a 	mov	r7,r20
10006cd4:	9009883a 	mov	r4,r18
10006cd8:	980b883a 	mov	r5,r19
10006cdc:	000d3a40 	call	1000d3a4 <__divdf3>
10006ce0:	180b883a 	mov	r5,r3
10006ce4:	1009883a 	mov	r4,r2
10006ce8:	0003ca80 	call	10003ca8 <__fixdfsi>
10006cec:	1009883a 	mov	r4,r2
10006cf0:	102d883a 	mov	r22,r2
10006cf4:	0003d300 	call	10003d30 <__floatsidf>
10006cf8:	1009883a 	mov	r4,r2
10006cfc:	180b883a 	mov	r5,r3
10006d00:	880d883a 	mov	r6,r17
10006d04:	a00f883a 	mov	r7,r20
10006d08:	000df680 	call	1000df68 <__muldf3>
10006d0c:	9009883a 	mov	r4,r18
10006d10:	980b883a 	mov	r5,r19
10006d14:	100d883a 	mov	r6,r2
10006d18:	180f883a 	mov	r7,r3
10006d1c:	00033d80 	call	100033d8 <__subdf3>
10006d20:	d9000717 	ldw	r4,28(sp)
10006d24:	d9800617 	ldw	r6,24(sp)
10006d28:	180b883a 	mov	r5,r3
10006d2c:	b0c00c04 	addi	r3,r22,48
10006d30:	20c00005 	stb	r3,0(r4)
10006d34:	25c00044 	addi	r23,r4,1
10006d38:	01000044 	movi	r4,1
10006d3c:	1011883a 	mov	r8,r2
10006d40:	2807883a 	mov	r3,r5
10006d44:	31003d26 	beq	r6,r4,10006e3c <_dtoa_r+0x918>
10006d48:	000d883a 	mov	r6,zero
10006d4c:	01d00934 	movhi	r7,16420
10006d50:	1009883a 	mov	r4,r2
10006d54:	000df680 	call	1000df68 <__muldf3>
10006d58:	1009883a 	mov	r4,r2
10006d5c:	180b883a 	mov	r5,r3
10006d60:	000d883a 	mov	r6,zero
10006d64:	000f883a 	mov	r7,zero
10006d68:	1027883a 	mov	r19,r2
10006d6c:	182b883a 	mov	r21,r3
10006d70:	000dd240 	call	1000dd24 <__eqdf2>
10006d74:	103f9926 	beq	r2,zero,10006bdc <__alt_data_end+0xf8006bdc>
10006d78:	d8c00617 	ldw	r3,24(sp)
10006d7c:	d9000717 	ldw	r4,28(sp)
10006d80:	b825883a 	mov	r18,r23
10006d84:	18bfffc4 	addi	r2,r3,-1
10006d88:	20ad883a 	add	r22,r4,r2
10006d8c:	dc000315 	stw	r16,12(sp)
10006d90:	00000a06 	br	10006dbc <_dtoa_r+0x898>
10006d94:	000df680 	call	1000df68 <__muldf3>
10006d98:	1009883a 	mov	r4,r2
10006d9c:	180b883a 	mov	r5,r3
10006da0:	000d883a 	mov	r6,zero
10006da4:	000f883a 	mov	r7,zero
10006da8:	1027883a 	mov	r19,r2
10006dac:	182b883a 	mov	r21,r3
10006db0:	b825883a 	mov	r18,r23
10006db4:	000dd240 	call	1000dd24 <__eqdf2>
10006db8:	10022626 	beq	r2,zero,10007654 <_dtoa_r+0x1130>
10006dbc:	880d883a 	mov	r6,r17
10006dc0:	a00f883a 	mov	r7,r20
10006dc4:	9809883a 	mov	r4,r19
10006dc8:	a80b883a 	mov	r5,r21
10006dcc:	000d3a40 	call	1000d3a4 <__divdf3>
10006dd0:	180b883a 	mov	r5,r3
10006dd4:	1009883a 	mov	r4,r2
10006dd8:	0003ca80 	call	10003ca8 <__fixdfsi>
10006ddc:	1009883a 	mov	r4,r2
10006de0:	1021883a 	mov	r16,r2
10006de4:	0003d300 	call	10003d30 <__floatsidf>
10006de8:	1009883a 	mov	r4,r2
10006dec:	180b883a 	mov	r5,r3
10006df0:	880d883a 	mov	r6,r17
10006df4:	a00f883a 	mov	r7,r20
10006df8:	000df680 	call	1000df68 <__muldf3>
10006dfc:	9809883a 	mov	r4,r19
10006e00:	a80b883a 	mov	r5,r21
10006e04:	100d883a 	mov	r6,r2
10006e08:	180f883a 	mov	r7,r3
10006e0c:	00033d80 	call	100033d8 <__subdf3>
10006e10:	82000c04 	addi	r8,r16,48
10006e14:	92000005 	stb	r8,0(r18)
10006e18:	1009883a 	mov	r4,r2
10006e1c:	180b883a 	mov	r5,r3
10006e20:	000d883a 	mov	r6,zero
10006e24:	01d00934 	movhi	r7,16420
10006e28:	1011883a 	mov	r8,r2
10006e2c:	bdc00044 	addi	r23,r23,1
10006e30:	95bfd81e 	bne	r18,r22,10006d94 <__alt_data_end+0xf8006d94>
10006e34:	802d883a 	mov	r22,r16
10006e38:	dc000317 	ldw	r16,12(sp)
10006e3c:	4009883a 	mov	r4,r8
10006e40:	180b883a 	mov	r5,r3
10006e44:	400d883a 	mov	r6,r8
10006e48:	180f883a 	mov	r7,r3
10006e4c:	0002b3c0 	call	10002b3c <__adddf3>
10006e50:	8809883a 	mov	r4,r17
10006e54:	a00b883a 	mov	r5,r20
10006e58:	100d883a 	mov	r6,r2
10006e5c:	180f883a 	mov	r7,r3
10006e60:	1027883a 	mov	r19,r2
10006e64:	1825883a 	mov	r18,r3
10006e68:	000de880 	call	1000de88 <__ledf2>
10006e6c:	10000816 	blt	r2,zero,10006e90 <_dtoa_r+0x96c>
10006e70:	8809883a 	mov	r4,r17
10006e74:	a00b883a 	mov	r5,r20
10006e78:	980d883a 	mov	r6,r19
10006e7c:	900f883a 	mov	r7,r18
10006e80:	000dd240 	call	1000dd24 <__eqdf2>
10006e84:	103f551e 	bne	r2,zero,10006bdc <__alt_data_end+0xf8006bdc>
10006e88:	b580004c 	andi	r22,r22,1
10006e8c:	b03f5326 	beq	r22,zero,10006bdc <__alt_data_end+0xf8006bdc>
10006e90:	bd7fffc3 	ldbu	r21,-1(r23)
10006e94:	b8bfffc4 	addi	r2,r23,-1
10006e98:	1007883a 	mov	r3,r2
10006e9c:	01400e44 	movi	r5,57
10006ea0:	d9800717 	ldw	r6,28(sp)
10006ea4:	00000506 	br	10006ebc <_dtoa_r+0x998>
10006ea8:	18ffffc4 	addi	r3,r3,-1
10006eac:	30825e26 	beq	r6,r2,10007828 <_dtoa_r+0x1304>
10006eb0:	1d400003 	ldbu	r21,0(r3)
10006eb4:	102f883a 	mov	r23,r2
10006eb8:	10bfffc4 	addi	r2,r2,-1
10006ebc:	a9003fcc 	andi	r4,r21,255
10006ec0:	2100201c 	xori	r4,r4,128
10006ec4:	213fe004 	addi	r4,r4,-128
10006ec8:	217ff726 	beq	r4,r5,10006ea8 <__alt_data_end+0xf8006ea8>
10006ecc:	aa000044 	addi	r8,r21,1
10006ed0:	12000005 	stb	r8,0(r2)
10006ed4:	003f4106 	br	10006bdc <__alt_data_end+0xf8006bdc>
10006ed8:	d8c00b17 	ldw	r3,44(sp)
10006edc:	18006726 	beq	r3,zero,1000707c <_dtoa_r+0xb58>
10006ee0:	d9000317 	ldw	r4,12(sp)
10006ee4:	00c00044 	movi	r3,1
10006ee8:	19016a0e 	bge	r3,r4,10007494 <_dtoa_r+0xf70>
10006eec:	d8800617 	ldw	r2,24(sp)
10006ef0:	d8c00917 	ldw	r3,36(sp)
10006ef4:	157fffc4 	addi	r21,r2,-1
10006ef8:	1d420716 	blt	r3,r21,10007718 <_dtoa_r+0x11f4>
10006efc:	1d6bc83a 	sub	r21,r3,r21
10006f00:	d8800617 	ldw	r2,24(sp)
10006f04:	1002c716 	blt	r2,zero,10007a24 <_dtoa_r+0x1500>
10006f08:	dd000817 	ldw	r20,32(sp)
10006f0c:	d8800617 	ldw	r2,24(sp)
10006f10:	d9800817 	ldw	r6,32(sp)
10006f14:	8009883a 	mov	r4,r16
10006f18:	01400044 	movi	r5,1
10006f1c:	308d883a 	add	r6,r6,r2
10006f20:	d9800815 	stw	r6,32(sp)
10006f24:	b0ad883a 	add	r22,r22,r2
10006f28:	0009f880 	call	10009f88 <__i2b>
10006f2c:	1023883a 	mov	r17,r2
10006f30:	a0000826 	beq	r20,zero,10006f54 <_dtoa_r+0xa30>
10006f34:	0580070e 	bge	zero,r22,10006f54 <_dtoa_r+0xa30>
10006f38:	b005883a 	mov	r2,r22
10006f3c:	a5812016 	blt	r20,r22,100073c0 <_dtoa_r+0xe9c>
10006f40:	d8c00817 	ldw	r3,32(sp)
10006f44:	a0a9c83a 	sub	r20,r20,r2
10006f48:	b0adc83a 	sub	r22,r22,r2
10006f4c:	1887c83a 	sub	r3,r3,r2
10006f50:	d8c00815 	stw	r3,32(sp)
10006f54:	d9000917 	ldw	r4,36(sp)
10006f58:	0100140e 	bge	zero,r4,10006fac <_dtoa_r+0xa88>
10006f5c:	d9800b17 	ldw	r6,44(sp)
10006f60:	3001e526 	beq	r6,zero,100076f8 <_dtoa_r+0x11d4>
10006f64:	05400e0e 	bge	zero,r21,10006fa0 <_dtoa_r+0xa7c>
10006f68:	880b883a 	mov	r5,r17
10006f6c:	8009883a 	mov	r4,r16
10006f70:	a80d883a 	mov	r6,r21
10006f74:	000a2540 	call	1000a254 <__pow5mult>
10006f78:	e00d883a 	mov	r6,fp
10006f7c:	8009883a 	mov	r4,r16
10006f80:	100b883a 	mov	r5,r2
10006f84:	1023883a 	mov	r17,r2
10006f88:	0009fc40 	call	10009fc4 <__multiply>
10006f8c:	102f883a 	mov	r23,r2
10006f90:	e00b883a 	mov	r5,fp
10006f94:	8009883a 	mov	r4,r16
10006f98:	0009c080 	call	10009c08 <_Bfree>
10006f9c:	b839883a 	mov	fp,r23
10006fa0:	d8800917 	ldw	r2,36(sp)
10006fa4:	154dc83a 	sub	r6,r2,r21
10006fa8:	3001281e 	bne	r6,zero,1000744c <_dtoa_r+0xf28>
10006fac:	05c00044 	movi	r23,1
10006fb0:	8009883a 	mov	r4,r16
10006fb4:	b80b883a 	mov	r5,r23
10006fb8:	0009f880 	call	10009f88 <__i2b>
10006fbc:	d8c00a17 	ldw	r3,40(sp)
10006fc0:	102b883a 	mov	r21,r2
10006fc4:	00c0310e 	bge	zero,r3,1000708c <_dtoa_r+0xb68>
10006fc8:	8009883a 	mov	r4,r16
10006fcc:	100b883a 	mov	r5,r2
10006fd0:	180d883a 	mov	r6,r3
10006fd4:	000a2540 	call	1000a254 <__pow5mult>
10006fd8:	d9000317 	ldw	r4,12(sp)
10006fdc:	102b883a 	mov	r21,r2
10006fe0:	b9011f0e 	bge	r23,r4,10007460 <_dtoa_r+0xf3c>
10006fe4:	0027883a 	mov	r19,zero
10006fe8:	a8800417 	ldw	r2,16(r21)
10006fec:	10800104 	addi	r2,r2,4
10006ff0:	1085883a 	add	r2,r2,r2
10006ff4:	1085883a 	add	r2,r2,r2
10006ff8:	a885883a 	add	r2,r21,r2
10006ffc:	11000017 	ldw	r4,0(r2)
10007000:	0009e700 	call	10009e70 <__hi0bits>
10007004:	00c00804 	movi	r3,32
10007008:	1885c83a 	sub	r2,r3,r2
1000700c:	00002506 	br	100070a4 <_dtoa_r+0xb80>
10007010:	01800044 	movi	r6,1
10007014:	d9800c15 	stw	r6,48(sp)
10007018:	003dec06 	br	100067cc <__alt_data_end+0xf80067cc>
1000701c:	d8c00817 	ldw	r3,32(sp)
10007020:	d9000517 	ldw	r4,20(sp)
10007024:	d8000a15 	stw	zero,40(sp)
10007028:	1907c83a 	sub	r3,r3,r4
1000702c:	010dc83a 	sub	r6,zero,r4
10007030:	d8c00815 	stw	r3,32(sp)
10007034:	d9800915 	stw	r6,36(sp)
10007038:	003ded06 	br	100067f0 <__alt_data_end+0xf80067f0>
1000703c:	05adc83a 	sub	r22,zero,r22
10007040:	dd800815 	stw	r22,32(sp)
10007044:	002d883a 	mov	r22,zero
10007048:	003de406 	br	100067dc <__alt_data_end+0xf80067dc>
1000704c:	d9000517 	ldw	r4,20(sp)
10007050:	0003d300 	call	10003d30 <__floatsidf>
10007054:	1009883a 	mov	r4,r2
10007058:	180b883a 	mov	r5,r3
1000705c:	b00d883a 	mov	r6,r22
10007060:	a80f883a 	mov	r7,r21
10007064:	000dd240 	call	1000dd24 <__eqdf2>
10007068:	103dc726 	beq	r2,zero,10006788 <__alt_data_end+0xf8006788>
1000706c:	d8800517 	ldw	r2,20(sp)
10007070:	10bfffc4 	addi	r2,r2,-1
10007074:	d8800515 	stw	r2,20(sp)
10007078:	003dc306 	br	10006788 <__alt_data_end+0xf8006788>
1000707c:	dd400917 	ldw	r21,36(sp)
10007080:	dd000817 	ldw	r20,32(sp)
10007084:	0023883a 	mov	r17,zero
10007088:	003fa906 	br	10006f30 <__alt_data_end+0xf8006f30>
1000708c:	d9800317 	ldw	r6,12(sp)
10007090:	b981670e 	bge	r23,r6,10007630 <_dtoa_r+0x110c>
10007094:	0027883a 	mov	r19,zero
10007098:	d8c00a17 	ldw	r3,40(sp)
1000709c:	183fd21e 	bne	r3,zero,10006fe8 <__alt_data_end+0xf8006fe8>
100070a0:	00800044 	movi	r2,1
100070a4:	1585883a 	add	r2,r2,r22
100070a8:	108007cc 	andi	r2,r2,31
100070ac:	10005f26 	beq	r2,zero,1000722c <_dtoa_r+0xd08>
100070b0:	00c00804 	movi	r3,32
100070b4:	1887c83a 	sub	r3,r3,r2
100070b8:	01000104 	movi	r4,4
100070bc:	20c2dd0e 	bge	r4,r3,10007c34 <_dtoa_r+0x1710>
100070c0:	d9000817 	ldw	r4,32(sp)
100070c4:	00c00704 	movi	r3,28
100070c8:	1885c83a 	sub	r2,r3,r2
100070cc:	2089883a 	add	r4,r4,r2
100070d0:	d9000815 	stw	r4,32(sp)
100070d4:	a0a9883a 	add	r20,r20,r2
100070d8:	b0ad883a 	add	r22,r22,r2
100070dc:	d8800817 	ldw	r2,32(sp)
100070e0:	0080050e 	bge	zero,r2,100070f8 <_dtoa_r+0xbd4>
100070e4:	e00b883a 	mov	r5,fp
100070e8:	8009883a 	mov	r4,r16
100070ec:	100d883a 	mov	r6,r2
100070f0:	000a3940 	call	1000a394 <__lshift>
100070f4:	1039883a 	mov	fp,r2
100070f8:	0580050e 	bge	zero,r22,10007110 <_dtoa_r+0xbec>
100070fc:	a80b883a 	mov	r5,r21
10007100:	8009883a 	mov	r4,r16
10007104:	b00d883a 	mov	r6,r22
10007108:	000a3940 	call	1000a394 <__lshift>
1000710c:	102b883a 	mov	r21,r2
10007110:	d8c00c17 	ldw	r3,48(sp)
10007114:	1801161e 	bne	r3,zero,10007570 <_dtoa_r+0x104c>
10007118:	d8c00617 	ldw	r3,24(sp)
1000711c:	00c12d0e 	bge	zero,r3,100075d4 <_dtoa_r+0x10b0>
10007120:	d8c00b17 	ldw	r3,44(sp)
10007124:	1800571e 	bne	r3,zero,10007284 <_dtoa_r+0xd60>
10007128:	dc800717 	ldw	r18,28(sp)
1000712c:	dcc00617 	ldw	r19,24(sp)
10007130:	9029883a 	mov	r20,r18
10007134:	00000206 	br	10007140 <_dtoa_r+0xc1c>
10007138:	0009c300 	call	10009c30 <__multadd>
1000713c:	1039883a 	mov	fp,r2
10007140:	e009883a 	mov	r4,fp
10007144:	a80b883a 	mov	r5,r21
10007148:	00062fc0 	call	100062fc <quorem>
1000714c:	10800c04 	addi	r2,r2,48
10007150:	90800005 	stb	r2,0(r18)
10007154:	94800044 	addi	r18,r18,1
10007158:	9507c83a 	sub	r3,r18,r20
1000715c:	8009883a 	mov	r4,r16
10007160:	e00b883a 	mov	r5,fp
10007164:	01800284 	movi	r6,10
10007168:	000f883a 	mov	r7,zero
1000716c:	1cfff216 	blt	r3,r19,10007138 <__alt_data_end+0xf8007138>
10007170:	1011883a 	mov	r8,r2
10007174:	d8800617 	ldw	r2,24(sp)
10007178:	00822e0e 	bge	zero,r2,10007a34 <_dtoa_r+0x1510>
1000717c:	d9000717 	ldw	r4,28(sp)
10007180:	0025883a 	mov	r18,zero
10007184:	20af883a 	add	r23,r4,r2
10007188:	e00b883a 	mov	r5,fp
1000718c:	01800044 	movi	r6,1
10007190:	8009883a 	mov	r4,r16
10007194:	da001715 	stw	r8,92(sp)
10007198:	000a3940 	call	1000a394 <__lshift>
1000719c:	1009883a 	mov	r4,r2
100071a0:	a80b883a 	mov	r5,r21
100071a4:	1039883a 	mov	fp,r2
100071a8:	000a4dc0 	call	1000a4dc <__mcmp>
100071ac:	da001717 	ldw	r8,92(sp)
100071b0:	00816e0e 	bge	zero,r2,1000776c <_dtoa_r+0x1248>
100071b4:	b93fffc3 	ldbu	r4,-1(r23)
100071b8:	b8bfffc4 	addi	r2,r23,-1
100071bc:	1007883a 	mov	r3,r2
100071c0:	01800e44 	movi	r6,57
100071c4:	d9c00717 	ldw	r7,28(sp)
100071c8:	00000506 	br	100071e0 <_dtoa_r+0xcbc>
100071cc:	18ffffc4 	addi	r3,r3,-1
100071d0:	38811926 	beq	r7,r2,10007638 <_dtoa_r+0x1114>
100071d4:	19000003 	ldbu	r4,0(r3)
100071d8:	102f883a 	mov	r23,r2
100071dc:	10bfffc4 	addi	r2,r2,-1
100071e0:	21403fcc 	andi	r5,r4,255
100071e4:	2940201c 	xori	r5,r5,128
100071e8:	297fe004 	addi	r5,r5,-128
100071ec:	29bff726 	beq	r5,r6,100071cc <__alt_data_end+0xf80071cc>
100071f0:	21000044 	addi	r4,r4,1
100071f4:	11000005 	stb	r4,0(r2)
100071f8:	8009883a 	mov	r4,r16
100071fc:	a80b883a 	mov	r5,r21
10007200:	0009c080 	call	10009c08 <_Bfree>
10007204:	883e7526 	beq	r17,zero,10006bdc <__alt_data_end+0xf8006bdc>
10007208:	90000426 	beq	r18,zero,1000721c <_dtoa_r+0xcf8>
1000720c:	94400326 	beq	r18,r17,1000721c <_dtoa_r+0xcf8>
10007210:	8009883a 	mov	r4,r16
10007214:	900b883a 	mov	r5,r18
10007218:	0009c080 	call	10009c08 <_Bfree>
1000721c:	8009883a 	mov	r4,r16
10007220:	880b883a 	mov	r5,r17
10007224:	0009c080 	call	10009c08 <_Bfree>
10007228:	003e6c06 	br	10006bdc <__alt_data_end+0xf8006bdc>
1000722c:	00800704 	movi	r2,28
10007230:	d9800817 	ldw	r6,32(sp)
10007234:	a0a9883a 	add	r20,r20,r2
10007238:	b0ad883a 	add	r22,r22,r2
1000723c:	308d883a 	add	r6,r6,r2
10007240:	d9800815 	stw	r6,32(sp)
10007244:	003fa506 	br	100070dc <__alt_data_end+0xf80070dc>
10007248:	013efb84 	movi	r4,-1042
1000724c:	246bc83a 	sub	r21,r4,r17
10007250:	9548983a 	sll	r4,r18,r21
10007254:	003d1806 	br	100066b8 <__alt_data_end+0xf80066b8>
10007258:	d8000c15 	stw	zero,48(sp)
1000725c:	003d5b06 	br	100067cc <__alt_data_end+0xf80067cc>
10007260:	880b883a 	mov	r5,r17
10007264:	8009883a 	mov	r4,r16
10007268:	01800284 	movi	r6,10
1000726c:	000f883a 	mov	r7,zero
10007270:	0009c300 	call	10009c30 <__multadd>
10007274:	1023883a 	mov	r17,r2
10007278:	d8800d17 	ldw	r2,52(sp)
1000727c:	0082550e 	bge	zero,r2,10007bd4 <_dtoa_r+0x16b0>
10007280:	d8800615 	stw	r2,24(sp)
10007284:	0500050e 	bge	zero,r20,1000729c <_dtoa_r+0xd78>
10007288:	880b883a 	mov	r5,r17
1000728c:	8009883a 	mov	r4,r16
10007290:	a00d883a 	mov	r6,r20
10007294:	000a3940 	call	1000a394 <__lshift>
10007298:	1023883a 	mov	r17,r2
1000729c:	98016a1e 	bne	r19,zero,10007848 <_dtoa_r+0x1324>
100072a0:	8829883a 	mov	r20,r17
100072a4:	d9000617 	ldw	r4,24(sp)
100072a8:	dcc00717 	ldw	r19,28(sp)
100072ac:	9480004c 	andi	r18,r18,1
100072b0:	20bfffc4 	addi	r2,r4,-1
100072b4:	9885883a 	add	r2,r19,r2
100072b8:	d8800415 	stw	r2,16(sp)
100072bc:	dc800615 	stw	r18,24(sp)
100072c0:	e009883a 	mov	r4,fp
100072c4:	a80b883a 	mov	r5,r21
100072c8:	00062fc0 	call	100062fc <quorem>
100072cc:	e009883a 	mov	r4,fp
100072d0:	880b883a 	mov	r5,r17
100072d4:	102f883a 	mov	r23,r2
100072d8:	000a4dc0 	call	1000a4dc <__mcmp>
100072dc:	8009883a 	mov	r4,r16
100072e0:	a80b883a 	mov	r5,r21
100072e4:	a00d883a 	mov	r6,r20
100072e8:	102d883a 	mov	r22,r2
100072ec:	000a53c0 	call	1000a53c <__mdiff>
100072f0:	1007883a 	mov	r3,r2
100072f4:	10800317 	ldw	r2,12(r2)
100072f8:	bc800c04 	addi	r18,r23,48
100072fc:	1000971e 	bne	r2,zero,1000755c <_dtoa_r+0x1038>
10007300:	180b883a 	mov	r5,r3
10007304:	e009883a 	mov	r4,fp
10007308:	d8c01515 	stw	r3,84(sp)
1000730c:	000a4dc0 	call	1000a4dc <__mcmp>
10007310:	d8c01517 	ldw	r3,84(sp)
10007314:	8009883a 	mov	r4,r16
10007318:	d8801515 	stw	r2,84(sp)
1000731c:	180b883a 	mov	r5,r3
10007320:	0009c080 	call	10009c08 <_Bfree>
10007324:	d8801517 	ldw	r2,84(sp)
10007328:	1000041e 	bne	r2,zero,1000733c <_dtoa_r+0xe18>
1000732c:	d9800317 	ldw	r6,12(sp)
10007330:	3000021e 	bne	r6,zero,1000733c <_dtoa_r+0xe18>
10007334:	d8c00617 	ldw	r3,24(sp)
10007338:	18007626 	beq	r3,zero,10007514 <_dtoa_r+0xff0>
1000733c:	b0005b16 	blt	r22,zero,100074ac <_dtoa_r+0xf88>
10007340:	b000041e 	bne	r22,zero,10007354 <_dtoa_r+0xe30>
10007344:	d9000317 	ldw	r4,12(sp)
10007348:	2000021e 	bne	r4,zero,10007354 <_dtoa_r+0xe30>
1000734c:	d8c00617 	ldw	r3,24(sp)
10007350:	18005626 	beq	r3,zero,100074ac <_dtoa_r+0xf88>
10007354:	00814d16 	blt	zero,r2,1000788c <_dtoa_r+0x1368>
10007358:	d8c00417 	ldw	r3,16(sp)
1000735c:	9d800044 	addi	r22,r19,1
10007360:	9c800005 	stb	r18,0(r19)
10007364:	b02f883a 	mov	r23,r22
10007368:	98c14c26 	beq	r19,r3,1000789c <_dtoa_r+0x1378>
1000736c:	e00b883a 	mov	r5,fp
10007370:	8009883a 	mov	r4,r16
10007374:	01800284 	movi	r6,10
10007378:	000f883a 	mov	r7,zero
1000737c:	0009c300 	call	10009c30 <__multadd>
10007380:	1039883a 	mov	fp,r2
10007384:	8d006d26 	beq	r17,r20,1000753c <_dtoa_r+0x1018>
10007388:	880b883a 	mov	r5,r17
1000738c:	01800284 	movi	r6,10
10007390:	000f883a 	mov	r7,zero
10007394:	8009883a 	mov	r4,r16
10007398:	0009c300 	call	10009c30 <__multadd>
1000739c:	a00b883a 	mov	r5,r20
100073a0:	8009883a 	mov	r4,r16
100073a4:	01800284 	movi	r6,10
100073a8:	000f883a 	mov	r7,zero
100073ac:	1023883a 	mov	r17,r2
100073b0:	0009c300 	call	10009c30 <__multadd>
100073b4:	1029883a 	mov	r20,r2
100073b8:	b027883a 	mov	r19,r22
100073bc:	003fc006 	br	100072c0 <__alt_data_end+0xf80072c0>
100073c0:	a005883a 	mov	r2,r20
100073c4:	003ede06 	br	10006f40 <__alt_data_end+0xf8006f40>
100073c8:	01000044 	movi	r4,1
100073cc:	d9000b15 	stw	r4,44(sp)
100073d0:	d9802217 	ldw	r6,136(sp)
100073d4:	0180dc0e 	bge	zero,r6,10007748 <_dtoa_r+0x1224>
100073d8:	3023883a 	mov	r17,r6
100073dc:	d9800d15 	stw	r6,52(sp)
100073e0:	d9800615 	stw	r6,24(sp)
100073e4:	003d1e06 	br	10006860 <__alt_data_end+0xf8006860>
100073e8:	d8800617 	ldw	r2,24(sp)
100073ec:	00be3716 	blt	zero,r2,10006ccc <__alt_data_end+0xf8006ccc>
100073f0:	1000be1e 	bne	r2,zero,100076ec <_dtoa_r+0x11c8>
100073f4:	8809883a 	mov	r4,r17
100073f8:	a00b883a 	mov	r5,r20
100073fc:	000d883a 	mov	r6,zero
10007400:	01d00534 	movhi	r7,16404
10007404:	000df680 	call	1000df68 <__muldf3>
10007408:	1009883a 	mov	r4,r2
1000740c:	180b883a 	mov	r5,r3
10007410:	900d883a 	mov	r6,r18
10007414:	980f883a 	mov	r7,r19
10007418:	000dda80 	call	1000dda8 <__gedf2>
1000741c:	002b883a 	mov	r21,zero
10007420:	0023883a 	mov	r17,zero
10007424:	10007a16 	blt	r2,zero,10007610 <_dtoa_r+0x10ec>
10007428:	d9002217 	ldw	r4,136(sp)
1000742c:	ddc00717 	ldw	r23,28(sp)
10007430:	0108303a 	nor	r4,zero,r4
10007434:	d9000515 	stw	r4,20(sp)
10007438:	8009883a 	mov	r4,r16
1000743c:	a80b883a 	mov	r5,r21
10007440:	0009c080 	call	10009c08 <_Bfree>
10007444:	883f751e 	bne	r17,zero,1000721c <__alt_data_end+0xf800721c>
10007448:	003de406 	br	10006bdc <__alt_data_end+0xf8006bdc>
1000744c:	e00b883a 	mov	r5,fp
10007450:	8009883a 	mov	r4,r16
10007454:	000a2540 	call	1000a254 <__pow5mult>
10007458:	1039883a 	mov	fp,r2
1000745c:	003ed306 	br	10006fac <__alt_data_end+0xf8006fac>
10007460:	903ee01e 	bne	r18,zero,10006fe4 <__alt_data_end+0xf8006fe4>
10007464:	00800434 	movhi	r2,16
10007468:	10bfffc4 	addi	r2,r2,-1
1000746c:	9884703a 	and	r2,r19,r2
10007470:	103f081e 	bne	r2,zero,10007094 <__alt_data_end+0xf8007094>
10007474:	9cdffc2c 	andhi	r19,r19,32752
10007478:	983f0626 	beq	r19,zero,10007094 <__alt_data_end+0xf8007094>
1000747c:	d8800817 	ldw	r2,32(sp)
10007480:	b5800044 	addi	r22,r22,1
10007484:	04c00044 	movi	r19,1
10007488:	10800044 	addi	r2,r2,1
1000748c:	d8800815 	stw	r2,32(sp)
10007490:	003f0106 	br	10007098 <__alt_data_end+0xf8007098>
10007494:	d9800f17 	ldw	r6,60(sp)
10007498:	30016826 	beq	r6,zero,10007a3c <_dtoa_r+0x1518>
1000749c:	10810cc4 	addi	r2,r2,1075
100074a0:	dd400917 	ldw	r21,36(sp)
100074a4:	dd000817 	ldw	r20,32(sp)
100074a8:	003e9906 	br	10006f10 <__alt_data_end+0xf8006f10>
100074ac:	9011883a 	mov	r8,r18
100074b0:	4007883a 	mov	r3,r8
100074b4:	e02d883a 	mov	r22,fp
100074b8:	0080100e 	bge	zero,r2,100074fc <_dtoa_r+0xfd8>
100074bc:	01800044 	movi	r6,1
100074c0:	8009883a 	mov	r4,r16
100074c4:	e00b883a 	mov	r5,fp
100074c8:	da001515 	stw	r8,84(sp)
100074cc:	da001715 	stw	r8,92(sp)
100074d0:	000a3940 	call	1000a394 <__lshift>
100074d4:	1009883a 	mov	r4,r2
100074d8:	a80b883a 	mov	r5,r21
100074dc:	102d883a 	mov	r22,r2
100074e0:	000a4dc0 	call	1000a4dc <__mcmp>
100074e4:	d8c01517 	ldw	r3,84(sp)
100074e8:	da001717 	ldw	r8,92(sp)
100074ec:	0081a50e 	bge	zero,r2,10007b84 <_dtoa_r+0x1660>
100074f0:	00800e44 	movi	r2,57
100074f4:	40817b26 	beq	r8,r2,10007ae4 <_dtoa_r+0x15c0>
100074f8:	40c00044 	addi	r3,r8,1
100074fc:	8825883a 	mov	r18,r17
10007500:	9dc00044 	addi	r23,r19,1
10007504:	98c00005 	stb	r3,0(r19)
10007508:	a023883a 	mov	r17,r20
1000750c:	b039883a 	mov	fp,r22
10007510:	003f3906 	br	100071f8 <__alt_data_end+0xf80071f8>
10007514:	00800e44 	movi	r2,57
10007518:	9011883a 	mov	r8,r18
1000751c:	90817226 	beq	r18,r2,10007ae8 <_dtoa_r+0x15c4>
10007520:	0580010e 	bge	zero,r22,10007528 <_dtoa_r+0x1004>
10007524:	ba000c44 	addi	r8,r23,49
10007528:	8825883a 	mov	r18,r17
1000752c:	9dc00044 	addi	r23,r19,1
10007530:	9a000005 	stb	r8,0(r19)
10007534:	a023883a 	mov	r17,r20
10007538:	003f2f06 	br	100071f8 <__alt_data_end+0xf80071f8>
1000753c:	880b883a 	mov	r5,r17
10007540:	8009883a 	mov	r4,r16
10007544:	01800284 	movi	r6,10
10007548:	000f883a 	mov	r7,zero
1000754c:	0009c300 	call	10009c30 <__multadd>
10007550:	1023883a 	mov	r17,r2
10007554:	1029883a 	mov	r20,r2
10007558:	003f9706 	br	100073b8 <__alt_data_end+0xf80073b8>
1000755c:	8009883a 	mov	r4,r16
10007560:	180b883a 	mov	r5,r3
10007564:	0009c080 	call	10009c08 <_Bfree>
10007568:	00800044 	movi	r2,1
1000756c:	003f7306 	br	1000733c <__alt_data_end+0xf800733c>
10007570:	e009883a 	mov	r4,fp
10007574:	a80b883a 	mov	r5,r21
10007578:	000a4dc0 	call	1000a4dc <__mcmp>
1000757c:	103ee60e 	bge	r2,zero,10007118 <__alt_data_end+0xf8007118>
10007580:	8009883a 	mov	r4,r16
10007584:	e00b883a 	mov	r5,fp
10007588:	01800284 	movi	r6,10
1000758c:	000f883a 	mov	r7,zero
10007590:	0009c300 	call	10009c30 <__multadd>
10007594:	d9000517 	ldw	r4,20(sp)
10007598:	d9800b17 	ldw	r6,44(sp)
1000759c:	1039883a 	mov	fp,r2
100075a0:	213fffc4 	addi	r4,r4,-1
100075a4:	d9000515 	stw	r4,20(sp)
100075a8:	303f2d1e 	bne	r6,zero,10007260 <__alt_data_end+0xf8007260>
100075ac:	d9000d17 	ldw	r4,52(sp)
100075b0:	0101780e 	bge	zero,r4,10007b94 <_dtoa_r+0x1670>
100075b4:	d9000615 	stw	r4,24(sp)
100075b8:	003edb06 	br	10007128 <__alt_data_end+0xf8007128>
100075bc:	00800084 	movi	r2,2
100075c0:	30818e1e 	bne	r6,r2,10007bfc <_dtoa_r+0x16d8>
100075c4:	d8000b15 	stw	zero,44(sp)
100075c8:	003f8106 	br	100073d0 <__alt_data_end+0xf80073d0>
100075cc:	d8800717 	ldw	r2,28(sp)
100075d0:	003c0306 	br	100065e0 <__alt_data_end+0xf80065e0>
100075d4:	d9000317 	ldw	r4,12(sp)
100075d8:	00800084 	movi	r2,2
100075dc:	113ed00e 	bge	r2,r4,10007120 <__alt_data_end+0xf8007120>
100075e0:	d8c00617 	ldw	r3,24(sp)
100075e4:	183f901e 	bne	r3,zero,10007428 <__alt_data_end+0xf8007428>
100075e8:	a80b883a 	mov	r5,r21
100075ec:	8009883a 	mov	r4,r16
100075f0:	01800144 	movi	r6,5
100075f4:	000f883a 	mov	r7,zero
100075f8:	0009c300 	call	10009c30 <__multadd>
100075fc:	e009883a 	mov	r4,fp
10007600:	100b883a 	mov	r5,r2
10007604:	102b883a 	mov	r21,r2
10007608:	000a4dc0 	call	1000a4dc <__mcmp>
1000760c:	00bf860e 	bge	zero,r2,10007428 <__alt_data_end+0xf8007428>
10007610:	d9800717 	ldw	r6,28(sp)
10007614:	00800c44 	movi	r2,49
10007618:	30800005 	stb	r2,0(r6)
1000761c:	d8800517 	ldw	r2,20(sp)
10007620:	35c00044 	addi	r23,r6,1
10007624:	10800044 	addi	r2,r2,1
10007628:	d8800515 	stw	r2,20(sp)
1000762c:	003f8206 	br	10007438 <__alt_data_end+0xf8007438>
10007630:	903e981e 	bne	r18,zero,10007094 <__alt_data_end+0xf8007094>
10007634:	003f8b06 	br	10007464 <__alt_data_end+0xf8007464>
10007638:	d9800517 	ldw	r6,20(sp)
1000763c:	d8c00717 	ldw	r3,28(sp)
10007640:	00800c44 	movi	r2,49
10007644:	31800044 	addi	r6,r6,1
10007648:	d9800515 	stw	r6,20(sp)
1000764c:	18800005 	stb	r2,0(r3)
10007650:	003ee906 	br	100071f8 <__alt_data_end+0xf80071f8>
10007654:	dc000317 	ldw	r16,12(sp)
10007658:	003d6006 	br	10006bdc <__alt_data_end+0xf8006bdc>
1000765c:	8809883a 	mov	r4,r17
10007660:	0003d300 	call	10003d30 <__floatsidf>
10007664:	a009883a 	mov	r4,r20
10007668:	a80b883a 	mov	r5,r21
1000766c:	100d883a 	mov	r6,r2
10007670:	180f883a 	mov	r7,r3
10007674:	000df680 	call	1000df68 <__muldf3>
10007678:	1009883a 	mov	r4,r2
1000767c:	180b883a 	mov	r5,r3
10007680:	000d883a 	mov	r6,zero
10007684:	01d00734 	movhi	r7,16412
10007688:	0002b3c0 	call	10002b3c <__adddf3>
1000768c:	1023883a 	mov	r17,r2
10007690:	00bf3034 	movhi	r2,64704
10007694:	1885883a 	add	r2,r3,r2
10007698:	d8800e15 	stw	r2,56(sp)
1000769c:	a009883a 	mov	r4,r20
100076a0:	a80b883a 	mov	r5,r21
100076a4:	000d883a 	mov	r6,zero
100076a8:	01d00534 	movhi	r7,16404
100076ac:	00033d80 	call	100033d8 <__subdf3>
100076b0:	d9c00e17 	ldw	r7,56(sp)
100076b4:	1009883a 	mov	r4,r2
100076b8:	180b883a 	mov	r5,r3
100076bc:	880d883a 	mov	r6,r17
100076c0:	102b883a 	mov	r21,r2
100076c4:	1829883a 	mov	r20,r3
100076c8:	000dda80 	call	1000dda8 <__gedf2>
100076cc:	00807716 	blt	zero,r2,100078ac <_dtoa_r+0x1388>
100076d0:	d8800e17 	ldw	r2,56(sp)
100076d4:	a809883a 	mov	r4,r21
100076d8:	a00b883a 	mov	r5,r20
100076dc:	11e0003c 	xorhi	r7,r2,32768
100076e0:	880d883a 	mov	r6,r17
100076e4:	000de880 	call	1000de88 <__ledf2>
100076e8:	103d6b0e 	bge	r2,zero,10006c98 <__alt_data_end+0xf8006c98>
100076ec:	002b883a 	mov	r21,zero
100076f0:	0023883a 	mov	r17,zero
100076f4:	003f4c06 	br	10007428 <__alt_data_end+0xf8007428>
100076f8:	d9800917 	ldw	r6,36(sp)
100076fc:	e00b883a 	mov	r5,fp
10007700:	8009883a 	mov	r4,r16
10007704:	000a2540 	call	1000a254 <__pow5mult>
10007708:	1039883a 	mov	fp,r2
1000770c:	003e2706 	br	10006fac <__alt_data_end+0xf8006fac>
10007710:	d8000b15 	stw	zero,44(sp)
10007714:	003c4906 	br	1000683c <__alt_data_end+0xf800683c>
10007718:	d9000917 	ldw	r4,36(sp)
1000771c:	d9800a17 	ldw	r6,40(sp)
10007720:	dd400915 	stw	r21,36(sp)
10007724:	a905c83a 	sub	r2,r21,r4
10007728:	308d883a 	add	r6,r6,r2
1000772c:	d9800a15 	stw	r6,40(sp)
10007730:	002b883a 	mov	r21,zero
10007734:	003df206 	br	10006f00 <__alt_data_end+0xf8006f00>
10007738:	dc800e15 	stw	r18,56(sp)
1000773c:	982b883a 	mov	r21,r19
10007740:	04400084 	movi	r17,2
10007744:	003c7406 	br	10006918 <__alt_data_end+0xf8006918>
10007748:	04400044 	movi	r17,1
1000774c:	dc400d15 	stw	r17,52(sp)
10007750:	dc400615 	stw	r17,24(sp)
10007754:	dc402215 	stw	r17,136(sp)
10007758:	80001115 	stw	zero,68(r16)
1000775c:	000b883a 	mov	r5,zero
10007760:	003c4a06 	br	1000688c <__alt_data_end+0xf800688c>
10007764:	3023883a 	mov	r17,r6
10007768:	003ffb06 	br	10007758 <__alt_data_end+0xf8007758>
1000776c:	1000021e 	bne	r2,zero,10007778 <_dtoa_r+0x1254>
10007770:	4200004c 	andi	r8,r8,1
10007774:	403e8f1e 	bne	r8,zero,100071b4 <__alt_data_end+0xf80071b4>
10007778:	01000c04 	movi	r4,48
1000777c:	00000106 	br	10007784 <_dtoa_r+0x1260>
10007780:	102f883a 	mov	r23,r2
10007784:	b8bfffc4 	addi	r2,r23,-1
10007788:	10c00007 	ldb	r3,0(r2)
1000778c:	193ffc26 	beq	r3,r4,10007780 <__alt_data_end+0xf8007780>
10007790:	003e9906 	br	100071f8 <__alt_data_end+0xf80071f8>
10007794:	d9000517 	ldw	r4,20(sp)
10007798:	012fc83a 	sub	r23,zero,r4
1000779c:	b800ad26 	beq	r23,zero,10007a54 <_dtoa_r+0x1530>
100077a0:	b88003cc 	andi	r2,r23,15
100077a4:	100490fa 	slli	r2,r2,3
100077a8:	00c40074 	movhi	r3,4097
100077ac:	18c49d04 	addi	r3,r3,4724
100077b0:	1885883a 	add	r2,r3,r2
100077b4:	11800017 	ldw	r6,0(r2)
100077b8:	11c00117 	ldw	r7,4(r2)
100077bc:	b82fd13a 	srai	r23,r23,4
100077c0:	9009883a 	mov	r4,r18
100077c4:	980b883a 	mov	r5,r19
100077c8:	000df680 	call	1000df68 <__muldf3>
100077cc:	1029883a 	mov	r20,r2
100077d0:	182b883a 	mov	r21,r3
100077d4:	b800f426 	beq	r23,zero,10007ba8 <_dtoa_r+0x1684>
100077d8:	02040074 	movhi	r8,4097
100077dc:	42049304 	addi	r8,r8,4684
100077e0:	8029883a 	mov	r20,r16
100077e4:	04400084 	movi	r17,2
100077e8:	4021883a 	mov	r16,r8
100077ec:	b980004c 	andi	r6,r23,1
100077f0:	1009883a 	mov	r4,r2
100077f4:	b82fd07a 	srai	r23,r23,1
100077f8:	180b883a 	mov	r5,r3
100077fc:	30000426 	beq	r6,zero,10007810 <_dtoa_r+0x12ec>
10007800:	81800017 	ldw	r6,0(r16)
10007804:	81c00117 	ldw	r7,4(r16)
10007808:	8c400044 	addi	r17,r17,1
1000780c:	000df680 	call	1000df68 <__muldf3>
10007810:	84000204 	addi	r16,r16,8
10007814:	b83ff51e 	bne	r23,zero,100077ec <__alt_data_end+0xf80077ec>
10007818:	a021883a 	mov	r16,r20
1000781c:	182b883a 	mov	r21,r3
10007820:	1029883a 	mov	r20,r2
10007824:	003c5506 	br	1000697c <__alt_data_end+0xf800697c>
10007828:	d9800517 	ldw	r6,20(sp)
1000782c:	d9000717 	ldw	r4,28(sp)
10007830:	00c00c04 	movi	r3,48
10007834:	31800044 	addi	r6,r6,1
10007838:	d9800515 	stw	r6,20(sp)
1000783c:	20c00005 	stb	r3,0(r4)
10007840:	02000c44 	movi	r8,49
10007844:	003da206 	br	10006ed0 <__alt_data_end+0xf8006ed0>
10007848:	89400117 	ldw	r5,4(r17)
1000784c:	8009883a 	mov	r4,r16
10007850:	0009b600 	call	10009b60 <_Balloc>
10007854:	89800417 	ldw	r6,16(r17)
10007858:	11000304 	addi	r4,r2,12
1000785c:	89400304 	addi	r5,r17,12
10007860:	31800084 	addi	r6,r6,2
10007864:	318d883a 	add	r6,r6,r6
10007868:	318d883a 	add	r6,r6,r6
1000786c:	1027883a 	mov	r19,r2
10007870:	00097a80 	call	100097a8 <memcpy>
10007874:	8009883a 	mov	r4,r16
10007878:	980b883a 	mov	r5,r19
1000787c:	01800044 	movi	r6,1
10007880:	000a3940 	call	1000a394 <__lshift>
10007884:	1029883a 	mov	r20,r2
10007888:	003e8606 	br	100072a4 <__alt_data_end+0xf80072a4>
1000788c:	00800e44 	movi	r2,57
10007890:	90809526 	beq	r18,r2,10007ae8 <_dtoa_r+0x15c4>
10007894:	92000044 	addi	r8,r18,1
10007898:	003f2306 	br	10007528 <__alt_data_end+0xf8007528>
1000789c:	9011883a 	mov	r8,r18
100078a0:	8825883a 	mov	r18,r17
100078a4:	a023883a 	mov	r17,r20
100078a8:	003e3706 	br	10007188 <__alt_data_end+0xf8007188>
100078ac:	002b883a 	mov	r21,zero
100078b0:	0023883a 	mov	r17,zero
100078b4:	003f5606 	br	10007610 <__alt_data_end+0xf8007610>
100078b8:	51bfffc4 	addi	r6,r10,-1
100078bc:	300490fa 	slli	r2,r6,3
100078c0:	00c40074 	movhi	r3,4097
100078c4:	18c49d04 	addi	r3,r3,4724
100078c8:	1885883a 	add	r2,r3,r2
100078cc:	d9c00e17 	ldw	r7,56(sp)
100078d0:	11000017 	ldw	r4,0(r2)
100078d4:	11400117 	ldw	r5,4(r2)
100078d8:	d8800717 	ldw	r2,28(sp)
100078dc:	d9801015 	stw	r6,64(sp)
100078e0:	880d883a 	mov	r6,r17
100078e4:	da801615 	stw	r10,88(sp)
100078e8:	15c00044 	addi	r23,r2,1
100078ec:	000df680 	call	1000df68 <__muldf3>
100078f0:	a80b883a 	mov	r5,r21
100078f4:	a009883a 	mov	r4,r20
100078f8:	d8c01115 	stw	r3,68(sp)
100078fc:	d8800e15 	stw	r2,56(sp)
10007900:	0003ca80 	call	10003ca8 <__fixdfsi>
10007904:	1009883a 	mov	r4,r2
10007908:	1023883a 	mov	r17,r2
1000790c:	0003d300 	call	10003d30 <__floatsidf>
10007910:	a009883a 	mov	r4,r20
10007914:	a80b883a 	mov	r5,r21
10007918:	100d883a 	mov	r6,r2
1000791c:	180f883a 	mov	r7,r3
10007920:	00033d80 	call	100033d8 <__subdf3>
10007924:	1813883a 	mov	r9,r3
10007928:	d8c00717 	ldw	r3,28(sp)
1000792c:	8c400c04 	addi	r17,r17,48
10007930:	1011883a 	mov	r8,r2
10007934:	1c400005 	stb	r17,0(r3)
10007938:	da801617 	ldw	r10,88(sp)
1000793c:	00800044 	movi	r2,1
10007940:	50802326 	beq	r10,r2,100079d0 <_dtoa_r+0x14ac>
10007944:	d8800717 	ldw	r2,28(sp)
10007948:	b82b883a 	mov	r21,r23
1000794c:	dc001315 	stw	r16,76(sp)
10007950:	12a9883a 	add	r20,r2,r10
10007954:	4807883a 	mov	r3,r9
10007958:	4005883a 	mov	r2,r8
1000795c:	dc801415 	stw	r18,80(sp)
10007960:	000d883a 	mov	r6,zero
10007964:	01d00934 	movhi	r7,16420
10007968:	1009883a 	mov	r4,r2
1000796c:	180b883a 	mov	r5,r3
10007970:	000df680 	call	1000df68 <__muldf3>
10007974:	180b883a 	mov	r5,r3
10007978:	1009883a 	mov	r4,r2
1000797c:	1821883a 	mov	r16,r3
10007980:	1025883a 	mov	r18,r2
10007984:	0003ca80 	call	10003ca8 <__fixdfsi>
10007988:	1009883a 	mov	r4,r2
1000798c:	1023883a 	mov	r17,r2
10007990:	0003d300 	call	10003d30 <__floatsidf>
10007994:	9009883a 	mov	r4,r18
10007998:	800b883a 	mov	r5,r16
1000799c:	100d883a 	mov	r6,r2
100079a0:	180f883a 	mov	r7,r3
100079a4:	8c400c04 	addi	r17,r17,48
100079a8:	00033d80 	call	100033d8 <__subdf3>
100079ac:	ad400044 	addi	r21,r21,1
100079b0:	ac7fffc5 	stb	r17,-1(r21)
100079b4:	ad3fea1e 	bne	r21,r20,10007960 <__alt_data_end+0xf8007960>
100079b8:	1813883a 	mov	r9,r3
100079bc:	d8c01017 	ldw	r3,64(sp)
100079c0:	dc001317 	ldw	r16,76(sp)
100079c4:	dc801417 	ldw	r18,80(sp)
100079c8:	1011883a 	mov	r8,r2
100079cc:	b8ef883a 	add	r23,r23,r3
100079d0:	d9000e17 	ldw	r4,56(sp)
100079d4:	d9401117 	ldw	r5,68(sp)
100079d8:	000d883a 	mov	r6,zero
100079dc:	01cff834 	movhi	r7,16352
100079e0:	da001715 	stw	r8,92(sp)
100079e4:	da401515 	stw	r9,84(sp)
100079e8:	0002b3c0 	call	10002b3c <__adddf3>
100079ec:	da001717 	ldw	r8,92(sp)
100079f0:	da401517 	ldw	r9,84(sp)
100079f4:	1009883a 	mov	r4,r2
100079f8:	400d883a 	mov	r6,r8
100079fc:	480f883a 	mov	r7,r9
10007a00:	180b883a 	mov	r5,r3
10007a04:	000de880 	call	1000de88 <__ledf2>
10007a08:	da001717 	ldw	r8,92(sp)
10007a0c:	da401517 	ldw	r9,84(sp)
10007a10:	10003b0e 	bge	r2,zero,10007b00 <_dtoa_r+0x15dc>
10007a14:	d9001217 	ldw	r4,72(sp)
10007a18:	bd7fffc3 	ldbu	r21,-1(r23)
10007a1c:	d9000515 	stw	r4,20(sp)
10007a20:	003d1c06 	br	10006e94 <__alt_data_end+0xf8006e94>
10007a24:	d8c00817 	ldw	r3,32(sp)
10007a28:	18a9c83a 	sub	r20,r3,r2
10007a2c:	0005883a 	mov	r2,zero
10007a30:	003d3706 	br	10006f10 <__alt_data_end+0xf8006f10>
10007a34:	00800044 	movi	r2,1
10007a38:	003dd006 	br	1000717c <__alt_data_end+0xf800717c>
10007a3c:	d8c00217 	ldw	r3,8(sp)
10007a40:	00800d84 	movi	r2,54
10007a44:	dd400917 	ldw	r21,36(sp)
10007a48:	10c5c83a 	sub	r2,r2,r3
10007a4c:	dd000817 	ldw	r20,32(sp)
10007a50:	003d2f06 	br	10006f10 <__alt_data_end+0xf8006f10>
10007a54:	9029883a 	mov	r20,r18
10007a58:	982b883a 	mov	r21,r19
10007a5c:	04400084 	movi	r17,2
10007a60:	003bc606 	br	1000697c <__alt_data_end+0xf800697c>
10007a64:	d8800617 	ldw	r2,24(sp)
10007a68:	103efc26 	beq	r2,zero,1000765c <__alt_data_end+0xf800765c>
10007a6c:	d8c00d17 	ldw	r3,52(sp)
10007a70:	00fc890e 	bge	zero,r3,10006c98 <__alt_data_end+0xf8006c98>
10007a74:	a80b883a 	mov	r5,r21
10007a78:	a009883a 	mov	r4,r20
10007a7c:	000d883a 	mov	r6,zero
10007a80:	01d00934 	movhi	r7,16420
10007a84:	000df680 	call	1000df68 <__muldf3>
10007a88:	89000044 	addi	r4,r17,1
10007a8c:	1029883a 	mov	r20,r2
10007a90:	182b883a 	mov	r21,r3
10007a94:	0003d300 	call	10003d30 <__floatsidf>
10007a98:	a009883a 	mov	r4,r20
10007a9c:	a80b883a 	mov	r5,r21
10007aa0:	100d883a 	mov	r6,r2
10007aa4:	180f883a 	mov	r7,r3
10007aa8:	000df680 	call	1000df68 <__muldf3>
10007aac:	1009883a 	mov	r4,r2
10007ab0:	180b883a 	mov	r5,r3
10007ab4:	000d883a 	mov	r6,zero
10007ab8:	01d00734 	movhi	r7,16412
10007abc:	0002b3c0 	call	10002b3c <__adddf3>
10007ac0:	d9000517 	ldw	r4,20(sp)
10007ac4:	1023883a 	mov	r17,r2
10007ac8:	00bf3034 	movhi	r2,64704
10007acc:	213fffc4 	addi	r4,r4,-1
10007ad0:	1885883a 	add	r2,r3,r2
10007ad4:	d9001215 	stw	r4,72(sp)
10007ad8:	d8800e15 	stw	r2,56(sp)
10007adc:	da800d17 	ldw	r10,52(sp)
10007ae0:	003bc306 	br	100069f0 <__alt_data_end+0xf80069f0>
10007ae4:	b039883a 	mov	fp,r22
10007ae8:	01000e44 	movi	r4,57
10007aec:	8825883a 	mov	r18,r17
10007af0:	9dc00044 	addi	r23,r19,1
10007af4:	99000005 	stb	r4,0(r19)
10007af8:	a023883a 	mov	r17,r20
10007afc:	003dae06 	br	100071b8 <__alt_data_end+0xf80071b8>
10007b00:	d9800e17 	ldw	r6,56(sp)
10007b04:	d9c01117 	ldw	r7,68(sp)
10007b08:	0009883a 	mov	r4,zero
10007b0c:	014ff834 	movhi	r5,16352
10007b10:	da001715 	stw	r8,92(sp)
10007b14:	da401515 	stw	r9,84(sp)
10007b18:	00033d80 	call	100033d8 <__subdf3>
10007b1c:	da001717 	ldw	r8,92(sp)
10007b20:	da401517 	ldw	r9,84(sp)
10007b24:	1009883a 	mov	r4,r2
10007b28:	180b883a 	mov	r5,r3
10007b2c:	400d883a 	mov	r6,r8
10007b30:	480f883a 	mov	r7,r9
10007b34:	000dda80 	call	1000dda8 <__gedf2>
10007b38:	00bc570e 	bge	zero,r2,10006c98 <__alt_data_end+0xf8006c98>
10007b3c:	01000c04 	movi	r4,48
10007b40:	00000106 	br	10007b48 <_dtoa_r+0x1624>
10007b44:	102f883a 	mov	r23,r2
10007b48:	b8bfffc4 	addi	r2,r23,-1
10007b4c:	10c00007 	ldb	r3,0(r2)
10007b50:	193ffc26 	beq	r3,r4,10007b44 <__alt_data_end+0xf8007b44>
10007b54:	d9801217 	ldw	r6,72(sp)
10007b58:	d9800515 	stw	r6,20(sp)
10007b5c:	003c1f06 	br	10006bdc <__alt_data_end+0xf8006bdc>
10007b60:	d8801217 	ldw	r2,72(sp)
10007b64:	dc001117 	ldw	r16,68(sp)
10007b68:	d8800515 	stw	r2,20(sp)
10007b6c:	003cc906 	br	10006e94 <__alt_data_end+0xf8006e94>
10007b70:	dd801317 	ldw	r22,76(sp)
10007b74:	dc001117 	ldw	r16,68(sp)
10007b78:	dcc01417 	ldw	r19,80(sp)
10007b7c:	dc801017 	ldw	r18,64(sp)
10007b80:	003c4506 	br	10006c98 <__alt_data_end+0xf8006c98>
10007b84:	103e5d1e 	bne	r2,zero,100074fc <__alt_data_end+0xf80074fc>
10007b88:	4080004c 	andi	r2,r8,1
10007b8c:	103e5b26 	beq	r2,zero,100074fc <__alt_data_end+0xf80074fc>
10007b90:	003e5706 	br	100074f0 <__alt_data_end+0xf80074f0>
10007b94:	d8c00317 	ldw	r3,12(sp)
10007b98:	00800084 	movi	r2,2
10007b9c:	10c00a16 	blt	r2,r3,10007bc8 <_dtoa_r+0x16a4>
10007ba0:	d9000d17 	ldw	r4,52(sp)
10007ba4:	003e8306 	br	100075b4 <__alt_data_end+0xf80075b4>
10007ba8:	04400084 	movi	r17,2
10007bac:	003b7306 	br	1000697c <__alt_data_end+0xf800697c>
10007bb0:	d9801217 	ldw	r6,72(sp)
10007bb4:	d9800515 	stw	r6,20(sp)
10007bb8:	003cb606 	br	10006e94 <__alt_data_end+0xf8006e94>
10007bbc:	d9001217 	ldw	r4,72(sp)
10007bc0:	d9000515 	stw	r4,20(sp)
10007bc4:	003c0506 	br	10006bdc <__alt_data_end+0xf8006bdc>
10007bc8:	d9800d17 	ldw	r6,52(sp)
10007bcc:	d9800615 	stw	r6,24(sp)
10007bd0:	003e8306 	br	100075e0 <__alt_data_end+0xf80075e0>
10007bd4:	d9800317 	ldw	r6,12(sp)
10007bd8:	00800084 	movi	r2,2
10007bdc:	11800216 	blt	r2,r6,10007be8 <_dtoa_r+0x16c4>
10007be0:	d8800d17 	ldw	r2,52(sp)
10007be4:	003da606 	br	10007280 <__alt_data_end+0xf8007280>
10007be8:	d8800d17 	ldw	r2,52(sp)
10007bec:	d8800615 	stw	r2,24(sp)
10007bf0:	003e7b06 	br	100075e0 <__alt_data_end+0xf80075e0>
10007bf4:	05000044 	movi	r20,1
10007bf8:	003b0506 	br	10006810 <__alt_data_end+0xf8006810>
10007bfc:	8009883a 	mov	r4,r16
10007c00:	80001115 	stw	zero,68(r16)
10007c04:	000b883a 	mov	r5,zero
10007c08:	0009b600 	call	10009b60 <_Balloc>
10007c0c:	d8800715 	stw	r2,28(sp)
10007c10:	d8c00717 	ldw	r3,28(sp)
10007c14:	00bfffc4 	movi	r2,-1
10007c18:	01000044 	movi	r4,1
10007c1c:	d8800615 	stw	r2,24(sp)
10007c20:	80c01015 	stw	r3,64(r16)
10007c24:	d9000b15 	stw	r4,44(sp)
10007c28:	d8002215 	stw	zero,136(sp)
10007c2c:	d8800d15 	stw	r2,52(sp)
10007c30:	003c1906 	br	10006c98 <__alt_data_end+0xf8006c98>
10007c34:	193d2926 	beq	r3,r4,100070dc <__alt_data_end+0xf80070dc>
10007c38:	00c00f04 	movi	r3,60
10007c3c:	1885c83a 	sub	r2,r3,r2
10007c40:	003d7b06 	br	10007230 <__alt_data_end+0xf8007230>
10007c44:	000b883a 	mov	r5,zero
10007c48:	003b1006 	br	1000688c <__alt_data_end+0xf800688c>

10007c4c <_fflush_r>:
10007c4c:	defffb04 	addi	sp,sp,-20
10007c50:	dcc00315 	stw	r19,12(sp)
10007c54:	dc000015 	stw	r16,0(sp)
10007c58:	dfc00415 	stw	ra,16(sp)
10007c5c:	dc800215 	stw	r18,8(sp)
10007c60:	dc400115 	stw	r17,4(sp)
10007c64:	2027883a 	mov	r19,r4
10007c68:	2821883a 	mov	r16,r5
10007c6c:	20000226 	beq	r4,zero,10007c78 <_fflush_r+0x2c>
10007c70:	20800e17 	ldw	r2,56(r4)
10007c74:	10005326 	beq	r2,zero,10007dc4 <_fflush_r+0x178>
10007c78:	8080030b 	ldhu	r2,12(r16)
10007c7c:	10ffffcc 	andi	r3,r2,65535
10007c80:	18e0001c 	xori	r3,r3,32768
10007c84:	18e00004 	addi	r3,r3,-32768
10007c88:	18002c26 	beq	r3,zero,10007d3c <_fflush_r+0xf0>
10007c8c:	10c0020c 	andi	r3,r2,8
10007c90:	1800321e 	bne	r3,zero,10007d5c <_fflush_r+0x110>
10007c94:	80c00117 	ldw	r3,4(r16)
10007c98:	10820014 	ori	r2,r2,2048
10007c9c:	8080030d 	sth	r2,12(r16)
10007ca0:	00c0570e 	bge	zero,r3,10007e00 <_fflush_r+0x1b4>
10007ca4:	82000a17 	ldw	r8,40(r16)
10007ca8:	40002426 	beq	r8,zero,10007d3c <_fflush_r+0xf0>
10007cac:	9c400017 	ldw	r17,0(r19)
10007cb0:	10c4000c 	andi	r3,r2,4096
10007cb4:	98000015 	stw	zero,0(r19)
10007cb8:	18004626 	beq	r3,zero,10007dd4 <_fflush_r+0x188>
10007cbc:	81801417 	ldw	r6,80(r16)
10007cc0:	10c0010c 	andi	r3,r2,4
10007cc4:	18000626 	beq	r3,zero,10007ce0 <_fflush_r+0x94>
10007cc8:	80c00117 	ldw	r3,4(r16)
10007ccc:	80800c17 	ldw	r2,48(r16)
10007cd0:	30cdc83a 	sub	r6,r6,r3
10007cd4:	10000226 	beq	r2,zero,10007ce0 <_fflush_r+0x94>
10007cd8:	80800f17 	ldw	r2,60(r16)
10007cdc:	308dc83a 	sub	r6,r6,r2
10007ce0:	81400717 	ldw	r5,28(r16)
10007ce4:	9809883a 	mov	r4,r19
10007ce8:	000f883a 	mov	r7,zero
10007cec:	403ee83a 	callr	r8
10007cf0:	00ffffc4 	movi	r3,-1
10007cf4:	10c04526 	beq	r2,r3,10007e0c <_fflush_r+0x1c0>
10007cf8:	80c0030b 	ldhu	r3,12(r16)
10007cfc:	81000417 	ldw	r4,16(r16)
10007d00:	80000115 	stw	zero,4(r16)
10007d04:	197dffcc 	andi	r5,r3,63487
10007d08:	8140030d 	sth	r5,12(r16)
10007d0c:	81000015 	stw	r4,0(r16)
10007d10:	18c4000c 	andi	r3,r3,4096
10007d14:	18000126 	beq	r3,zero,10007d1c <_fflush_r+0xd0>
10007d18:	80801415 	stw	r2,80(r16)
10007d1c:	81400c17 	ldw	r5,48(r16)
10007d20:	9c400015 	stw	r17,0(r19)
10007d24:	28000526 	beq	r5,zero,10007d3c <_fflush_r+0xf0>
10007d28:	80801004 	addi	r2,r16,64
10007d2c:	28800226 	beq	r5,r2,10007d38 <_fflush_r+0xec>
10007d30:	9809883a 	mov	r4,r19
10007d34:	000837c0 	call	1000837c <_free_r>
10007d38:	80000c15 	stw	zero,48(r16)
10007d3c:	0005883a 	mov	r2,zero
10007d40:	dfc00417 	ldw	ra,16(sp)
10007d44:	dcc00317 	ldw	r19,12(sp)
10007d48:	dc800217 	ldw	r18,8(sp)
10007d4c:	dc400117 	ldw	r17,4(sp)
10007d50:	dc000017 	ldw	r16,0(sp)
10007d54:	dec00504 	addi	sp,sp,20
10007d58:	f800283a 	ret
10007d5c:	84800417 	ldw	r18,16(r16)
10007d60:	903ff626 	beq	r18,zero,10007d3c <__alt_data_end+0xf8007d3c>
10007d64:	84400017 	ldw	r17,0(r16)
10007d68:	108000cc 	andi	r2,r2,3
10007d6c:	84800015 	stw	r18,0(r16)
10007d70:	8ca3c83a 	sub	r17,r17,r18
10007d74:	10001526 	beq	r2,zero,10007dcc <_fflush_r+0x180>
10007d78:	0005883a 	mov	r2,zero
10007d7c:	80800215 	stw	r2,8(r16)
10007d80:	04400316 	blt	zero,r17,10007d90 <_fflush_r+0x144>
10007d84:	003fed06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10007d88:	90a5883a 	add	r18,r18,r2
10007d8c:	047feb0e 	bge	zero,r17,10007d3c <__alt_data_end+0xf8007d3c>
10007d90:	80800917 	ldw	r2,36(r16)
10007d94:	81400717 	ldw	r5,28(r16)
10007d98:	880f883a 	mov	r7,r17
10007d9c:	900d883a 	mov	r6,r18
10007da0:	9809883a 	mov	r4,r19
10007da4:	103ee83a 	callr	r2
10007da8:	88a3c83a 	sub	r17,r17,r2
10007dac:	00bff616 	blt	zero,r2,10007d88 <__alt_data_end+0xf8007d88>
10007db0:	80c0030b 	ldhu	r3,12(r16)
10007db4:	00bfffc4 	movi	r2,-1
10007db8:	18c01014 	ori	r3,r3,64
10007dbc:	80c0030d 	sth	r3,12(r16)
10007dc0:	003fdf06 	br	10007d40 <__alt_data_end+0xf8007d40>
10007dc4:	00082080 	call	10008208 <__sinit>
10007dc8:	003fab06 	br	10007c78 <__alt_data_end+0xf8007c78>
10007dcc:	80800517 	ldw	r2,20(r16)
10007dd0:	003fea06 	br	10007d7c <__alt_data_end+0xf8007d7c>
10007dd4:	81400717 	ldw	r5,28(r16)
10007dd8:	000d883a 	mov	r6,zero
10007ddc:	9809883a 	mov	r4,r19
10007de0:	01c00044 	movi	r7,1
10007de4:	403ee83a 	callr	r8
10007de8:	100d883a 	mov	r6,r2
10007dec:	00bfffc4 	movi	r2,-1
10007df0:	30801326 	beq	r6,r2,10007e40 <_fflush_r+0x1f4>
10007df4:	8080030b 	ldhu	r2,12(r16)
10007df8:	82000a17 	ldw	r8,40(r16)
10007dfc:	003fb006 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10007e00:	80c00f17 	ldw	r3,60(r16)
10007e04:	00ffa716 	blt	zero,r3,10007ca4 <__alt_data_end+0xf8007ca4>
10007e08:	003fcc06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10007e0c:	98c00017 	ldw	r3,0(r19)
10007e10:	183fb926 	beq	r3,zero,10007cf8 <__alt_data_end+0xf8007cf8>
10007e14:	01000744 	movi	r4,29
10007e18:	19000226 	beq	r3,r4,10007e24 <_fflush_r+0x1d8>
10007e1c:	01000584 	movi	r4,22
10007e20:	1900101e 	bne	r3,r4,10007e64 <_fflush_r+0x218>
10007e24:	8080030b 	ldhu	r2,12(r16)
10007e28:	80c00417 	ldw	r3,16(r16)
10007e2c:	80000115 	stw	zero,4(r16)
10007e30:	10bdffcc 	andi	r2,r2,63487
10007e34:	8080030d 	sth	r2,12(r16)
10007e38:	80c00015 	stw	r3,0(r16)
10007e3c:	003fb706 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007e40:	98800017 	ldw	r2,0(r19)
10007e44:	103feb26 	beq	r2,zero,10007df4 <__alt_data_end+0xf8007df4>
10007e48:	00c00744 	movi	r3,29
10007e4c:	10c00226 	beq	r2,r3,10007e58 <_fflush_r+0x20c>
10007e50:	00c00584 	movi	r3,22
10007e54:	10ffd61e 	bne	r2,r3,10007db0 <__alt_data_end+0xf8007db0>
10007e58:	9c400015 	stw	r17,0(r19)
10007e5c:	0005883a 	mov	r2,zero
10007e60:	003fb706 	br	10007d40 <__alt_data_end+0xf8007d40>
10007e64:	80c0030b 	ldhu	r3,12(r16)
10007e68:	18c01014 	ori	r3,r3,64
10007e6c:	80c0030d 	sth	r3,12(r16)
10007e70:	003fb306 	br	10007d40 <__alt_data_end+0xf8007d40>

10007e74 <fflush>:
10007e74:	20000526 	beq	r4,zero,10007e8c <fflush+0x18>
10007e78:	00840074 	movhi	r2,4097
10007e7c:	108b9004 	addi	r2,r2,11840
10007e80:	200b883a 	mov	r5,r4
10007e84:	11000017 	ldw	r4,0(r2)
10007e88:	0007c4c1 	jmpi	10007c4c <_fflush_r>
10007e8c:	00840074 	movhi	r2,4097
10007e90:	108b8f04 	addi	r2,r2,11836
10007e94:	11000017 	ldw	r4,0(r2)
10007e98:	01440034 	movhi	r5,4096
10007e9c:	295f1304 	addi	r5,r5,31820
10007ea0:	0008bc81 	jmpi	10008bc8 <_fwalk_reent>

10007ea4 <__fp_lock>:
10007ea4:	0005883a 	mov	r2,zero
10007ea8:	f800283a 	ret

10007eac <__fp_unlock>:
10007eac:	0005883a 	mov	r2,zero
10007eb0:	f800283a 	ret

10007eb4 <_cleanup_r>:
10007eb4:	01440074 	movhi	r5,4097
10007eb8:	2972f504 	addi	r5,r5,-13356
10007ebc:	0008b101 	jmpi	10008b10 <_fwalk>

10007ec0 <__sinit.part.1>:
10007ec0:	defff604 	addi	sp,sp,-40
10007ec4:	00c40034 	movhi	r3,4096
10007ec8:	dfc00915 	stw	ra,36(sp)
10007ecc:	df000815 	stw	fp,32(sp)
10007ed0:	ddc00715 	stw	r23,28(sp)
10007ed4:	dd800615 	stw	r22,24(sp)
10007ed8:	dd400515 	stw	r21,20(sp)
10007edc:	dd000415 	stw	r20,16(sp)
10007ee0:	dcc00315 	stw	r19,12(sp)
10007ee4:	dc800215 	stw	r18,8(sp)
10007ee8:	dc400115 	stw	r17,4(sp)
10007eec:	dc000015 	stw	r16,0(sp)
10007ef0:	18dfad04 	addi	r3,r3,32436
10007ef4:	24000117 	ldw	r16,4(r4)
10007ef8:	20c00f15 	stw	r3,60(r4)
10007efc:	07000044 	movi	fp,1
10007f00:	00c000c4 	movi	r3,3
10007f04:	2080bb04 	addi	r2,r4,748
10007f08:	20c0b915 	stw	r3,740(r4)
10007f0c:	27000e15 	stw	fp,56(r4)
10007f10:	2080ba15 	stw	r2,744(r4)
10007f14:	2000b815 	stw	zero,736(r4)
10007f18:	05c00204 	movi	r23,8
10007f1c:	00800104 	movi	r2,4
10007f20:	2025883a 	mov	r18,r4
10007f24:	b80d883a 	mov	r6,r23
10007f28:	81001704 	addi	r4,r16,92
10007f2c:	000b883a 	mov	r5,zero
10007f30:	80000015 	stw	zero,0(r16)
10007f34:	80000115 	stw	zero,4(r16)
10007f38:	80000215 	stw	zero,8(r16)
10007f3c:	8080030d 	sth	r2,12(r16)
10007f40:	80001915 	stw	zero,100(r16)
10007f44:	8000038d 	sth	zero,14(r16)
10007f48:	80000415 	stw	zero,16(r16)
10007f4c:	80000515 	stw	zero,20(r16)
10007f50:	80000615 	stw	zero,24(r16)
10007f54:	0009a3c0 	call	10009a3c <memset>
10007f58:	05840074 	movhi	r22,4097
10007f5c:	94400217 	ldw	r17,8(r18)
10007f60:	05440074 	movhi	r21,4097
10007f64:	05040074 	movhi	r20,4097
10007f68:	04c40074 	movhi	r19,4097
10007f6c:	b5ac8404 	addi	r22,r22,-19952
10007f70:	ad6c9b04 	addi	r21,r21,-19860
10007f74:	a52cba04 	addi	r20,r20,-19736
10007f78:	9cecd104 	addi	r19,r19,-19644
10007f7c:	85800815 	stw	r22,32(r16)
10007f80:	85400915 	stw	r21,36(r16)
10007f84:	85000a15 	stw	r20,40(r16)
10007f88:	84c00b15 	stw	r19,44(r16)
10007f8c:	84000715 	stw	r16,28(r16)
10007f90:	00800284 	movi	r2,10
10007f94:	89001704 	addi	r4,r17,92
10007f98:	b80d883a 	mov	r6,r23
10007f9c:	000b883a 	mov	r5,zero
10007fa0:	88000015 	stw	zero,0(r17)
10007fa4:	88000115 	stw	zero,4(r17)
10007fa8:	88000215 	stw	zero,8(r17)
10007fac:	8880030d 	sth	r2,12(r17)
10007fb0:	88001915 	stw	zero,100(r17)
10007fb4:	8f00038d 	sth	fp,14(r17)
10007fb8:	88000415 	stw	zero,16(r17)
10007fbc:	88000515 	stw	zero,20(r17)
10007fc0:	88000615 	stw	zero,24(r17)
10007fc4:	0009a3c0 	call	10009a3c <memset>
10007fc8:	94000317 	ldw	r16,12(r18)
10007fcc:	00800484 	movi	r2,18
10007fd0:	8c400715 	stw	r17,28(r17)
10007fd4:	8d800815 	stw	r22,32(r17)
10007fd8:	8d400915 	stw	r21,36(r17)
10007fdc:	8d000a15 	stw	r20,40(r17)
10007fe0:	8cc00b15 	stw	r19,44(r17)
10007fe4:	8080030d 	sth	r2,12(r16)
10007fe8:	00800084 	movi	r2,2
10007fec:	80000015 	stw	zero,0(r16)
10007ff0:	80000115 	stw	zero,4(r16)
10007ff4:	80000215 	stw	zero,8(r16)
10007ff8:	80001915 	stw	zero,100(r16)
10007ffc:	8080038d 	sth	r2,14(r16)
10008000:	80000415 	stw	zero,16(r16)
10008004:	80000515 	stw	zero,20(r16)
10008008:	80000615 	stw	zero,24(r16)
1000800c:	81001704 	addi	r4,r16,92
10008010:	000b883a 	mov	r5,zero
10008014:	b80d883a 	mov	r6,r23
10008018:	0009a3c0 	call	10009a3c <memset>
1000801c:	84000715 	stw	r16,28(r16)
10008020:	85800815 	stw	r22,32(r16)
10008024:	85400915 	stw	r21,36(r16)
10008028:	85000a15 	stw	r20,40(r16)
1000802c:	84c00b15 	stw	r19,44(r16)
10008030:	dfc00917 	ldw	ra,36(sp)
10008034:	df000817 	ldw	fp,32(sp)
10008038:	ddc00717 	ldw	r23,28(sp)
1000803c:	dd800617 	ldw	r22,24(sp)
10008040:	dd400517 	ldw	r21,20(sp)
10008044:	dd000417 	ldw	r20,16(sp)
10008048:	dcc00317 	ldw	r19,12(sp)
1000804c:	dc800217 	ldw	r18,8(sp)
10008050:	dc400117 	ldw	r17,4(sp)
10008054:	dc000017 	ldw	r16,0(sp)
10008058:	dec00a04 	addi	sp,sp,40
1000805c:	f800283a 	ret

10008060 <__sfmoreglue>:
10008060:	defffc04 	addi	sp,sp,-16
10008064:	dc800215 	stw	r18,8(sp)
10008068:	2825883a 	mov	r18,r5
1000806c:	dc000015 	stw	r16,0(sp)
10008070:	01401a04 	movi	r5,104
10008074:	2021883a 	mov	r16,r4
10008078:	9009883a 	mov	r4,r18
1000807c:	dfc00315 	stw	ra,12(sp)
10008080:	dc400115 	stw	r17,4(sp)
10008084:	0002b140 	call	10002b14 <__mulsi3>
10008088:	8009883a 	mov	r4,r16
1000808c:	11400304 	addi	r5,r2,12
10008090:	1023883a 	mov	r17,r2
10008094:	0008f180 	call	10008f18 <_malloc_r>
10008098:	1021883a 	mov	r16,r2
1000809c:	10000726 	beq	r2,zero,100080bc <__sfmoreglue+0x5c>
100080a0:	11000304 	addi	r4,r2,12
100080a4:	10000015 	stw	zero,0(r2)
100080a8:	14800115 	stw	r18,4(r2)
100080ac:	11000215 	stw	r4,8(r2)
100080b0:	000b883a 	mov	r5,zero
100080b4:	880d883a 	mov	r6,r17
100080b8:	0009a3c0 	call	10009a3c <memset>
100080bc:	8005883a 	mov	r2,r16
100080c0:	dfc00317 	ldw	ra,12(sp)
100080c4:	dc800217 	ldw	r18,8(sp)
100080c8:	dc400117 	ldw	r17,4(sp)
100080cc:	dc000017 	ldw	r16,0(sp)
100080d0:	dec00404 	addi	sp,sp,16
100080d4:	f800283a 	ret

100080d8 <__sfp>:
100080d8:	00840074 	movhi	r2,4097
100080dc:	defffb04 	addi	sp,sp,-20
100080e0:	108b8f04 	addi	r2,r2,11836
100080e4:	dc800215 	stw	r18,8(sp)
100080e8:	14800017 	ldw	r18,0(r2)
100080ec:	dcc00315 	stw	r19,12(sp)
100080f0:	dfc00415 	stw	ra,16(sp)
100080f4:	90800e17 	ldw	r2,56(r18)
100080f8:	dc400115 	stw	r17,4(sp)
100080fc:	dc000015 	stw	r16,0(sp)
10008100:	2027883a 	mov	r19,r4
10008104:	1000021e 	bne	r2,zero,10008110 <__sfp+0x38>
10008108:	9009883a 	mov	r4,r18
1000810c:	0007ec00 	call	10007ec0 <__sinit.part.1>
10008110:	9480b804 	addi	r18,r18,736
10008114:	047fffc4 	movi	r17,-1
10008118:	91400117 	ldw	r5,4(r18)
1000811c:	94000217 	ldw	r16,8(r18)
10008120:	297fffc4 	addi	r5,r5,-1
10008124:	28000a16 	blt	r5,zero,10008150 <__sfp+0x78>
10008128:	8080030f 	ldh	r2,12(r16)
1000812c:	10000c26 	beq	r2,zero,10008160 <__sfp+0x88>
10008130:	80c01d04 	addi	r3,r16,116
10008134:	00000206 	br	10008140 <__sfp+0x68>
10008138:	18bfe60f 	ldh	r2,-104(r3)
1000813c:	10000826 	beq	r2,zero,10008160 <__sfp+0x88>
10008140:	297fffc4 	addi	r5,r5,-1
10008144:	1c3ffd04 	addi	r16,r3,-12
10008148:	18c01a04 	addi	r3,r3,104
1000814c:	2c7ffa1e 	bne	r5,r17,10008138 <__alt_data_end+0xf8008138>
10008150:	90800017 	ldw	r2,0(r18)
10008154:	10001d26 	beq	r2,zero,100081cc <__sfp+0xf4>
10008158:	1025883a 	mov	r18,r2
1000815c:	003fee06 	br	10008118 <__alt_data_end+0xf8008118>
10008160:	00bfffc4 	movi	r2,-1
10008164:	8080038d 	sth	r2,14(r16)
10008168:	00800044 	movi	r2,1
1000816c:	8080030d 	sth	r2,12(r16)
10008170:	80001915 	stw	zero,100(r16)
10008174:	80000015 	stw	zero,0(r16)
10008178:	80000215 	stw	zero,8(r16)
1000817c:	80000115 	stw	zero,4(r16)
10008180:	80000415 	stw	zero,16(r16)
10008184:	80000515 	stw	zero,20(r16)
10008188:	80000615 	stw	zero,24(r16)
1000818c:	81001704 	addi	r4,r16,92
10008190:	000b883a 	mov	r5,zero
10008194:	01800204 	movi	r6,8
10008198:	0009a3c0 	call	10009a3c <memset>
1000819c:	8005883a 	mov	r2,r16
100081a0:	80000c15 	stw	zero,48(r16)
100081a4:	80000d15 	stw	zero,52(r16)
100081a8:	80001115 	stw	zero,68(r16)
100081ac:	80001215 	stw	zero,72(r16)
100081b0:	dfc00417 	ldw	ra,16(sp)
100081b4:	dcc00317 	ldw	r19,12(sp)
100081b8:	dc800217 	ldw	r18,8(sp)
100081bc:	dc400117 	ldw	r17,4(sp)
100081c0:	dc000017 	ldw	r16,0(sp)
100081c4:	dec00504 	addi	sp,sp,20
100081c8:	f800283a 	ret
100081cc:	9809883a 	mov	r4,r19
100081d0:	01400104 	movi	r5,4
100081d4:	00080600 	call	10008060 <__sfmoreglue>
100081d8:	90800015 	stw	r2,0(r18)
100081dc:	103fde1e 	bne	r2,zero,10008158 <__alt_data_end+0xf8008158>
100081e0:	00800304 	movi	r2,12
100081e4:	98800015 	stw	r2,0(r19)
100081e8:	0005883a 	mov	r2,zero
100081ec:	003ff006 	br	100081b0 <__alt_data_end+0xf80081b0>

100081f0 <_cleanup>:
100081f0:	00840074 	movhi	r2,4097
100081f4:	108b8f04 	addi	r2,r2,11836
100081f8:	11000017 	ldw	r4,0(r2)
100081fc:	01440074 	movhi	r5,4097
10008200:	2972f504 	addi	r5,r5,-13356
10008204:	0008b101 	jmpi	10008b10 <_fwalk>

10008208 <__sinit>:
10008208:	20800e17 	ldw	r2,56(r4)
1000820c:	10000126 	beq	r2,zero,10008214 <__sinit+0xc>
10008210:	f800283a 	ret
10008214:	0007ec01 	jmpi	10007ec0 <__sinit.part.1>

10008218 <__sfp_lock_acquire>:
10008218:	f800283a 	ret

1000821c <__sfp_lock_release>:
1000821c:	f800283a 	ret

10008220 <__sinit_lock_acquire>:
10008220:	f800283a 	ret

10008224 <__sinit_lock_release>:
10008224:	f800283a 	ret

10008228 <__fp_lock_all>:
10008228:	00840074 	movhi	r2,4097
1000822c:	108b9004 	addi	r2,r2,11840
10008230:	11000017 	ldw	r4,0(r2)
10008234:	01440034 	movhi	r5,4096
10008238:	295fa904 	addi	r5,r5,32420
1000823c:	0008b101 	jmpi	10008b10 <_fwalk>

10008240 <__fp_unlock_all>:
10008240:	00840074 	movhi	r2,4097
10008244:	108b9004 	addi	r2,r2,11840
10008248:	11000017 	ldw	r4,0(r2)
1000824c:	01440034 	movhi	r5,4096
10008250:	295fab04 	addi	r5,r5,32428
10008254:	0008b101 	jmpi	10008b10 <_fwalk>

10008258 <_malloc_trim_r>:
10008258:	defffb04 	addi	sp,sp,-20
1000825c:	dcc00315 	stw	r19,12(sp)
10008260:	04c40074 	movhi	r19,4097
10008264:	dc800215 	stw	r18,8(sp)
10008268:	dc400115 	stw	r17,4(sp)
1000826c:	dc000015 	stw	r16,0(sp)
10008270:	dfc00415 	stw	ra,16(sp)
10008274:	2821883a 	mov	r16,r5
10008278:	9cc60b04 	addi	r19,r19,6188
1000827c:	2025883a 	mov	r18,r4
10008280:	000ee580 	call	1000ee58 <__malloc_lock>
10008284:	98800217 	ldw	r2,8(r19)
10008288:	14400117 	ldw	r17,4(r2)
1000828c:	00bfff04 	movi	r2,-4
10008290:	88a2703a 	and	r17,r17,r2
10008294:	8c21c83a 	sub	r16,r17,r16
10008298:	8403fbc4 	addi	r16,r16,4079
1000829c:	8020d33a 	srli	r16,r16,12
100082a0:	0083ffc4 	movi	r2,4095
100082a4:	843fffc4 	addi	r16,r16,-1
100082a8:	8020933a 	slli	r16,r16,12
100082ac:	1400060e 	bge	r2,r16,100082c8 <_malloc_trim_r+0x70>
100082b0:	9009883a 	mov	r4,r18
100082b4:	000b883a 	mov	r5,zero
100082b8:	000b1bc0 	call	1000b1bc <_sbrk_r>
100082bc:	98c00217 	ldw	r3,8(r19)
100082c0:	1c47883a 	add	r3,r3,r17
100082c4:	10c00a26 	beq	r2,r3,100082f0 <_malloc_trim_r+0x98>
100082c8:	9009883a 	mov	r4,r18
100082cc:	000ee780 	call	1000ee78 <__malloc_unlock>
100082d0:	0005883a 	mov	r2,zero
100082d4:	dfc00417 	ldw	ra,16(sp)
100082d8:	dcc00317 	ldw	r19,12(sp)
100082dc:	dc800217 	ldw	r18,8(sp)
100082e0:	dc400117 	ldw	r17,4(sp)
100082e4:	dc000017 	ldw	r16,0(sp)
100082e8:	dec00504 	addi	sp,sp,20
100082ec:	f800283a 	ret
100082f0:	9009883a 	mov	r4,r18
100082f4:	040bc83a 	sub	r5,zero,r16
100082f8:	000b1bc0 	call	1000b1bc <_sbrk_r>
100082fc:	00ffffc4 	movi	r3,-1
10008300:	10c00d26 	beq	r2,r3,10008338 <_malloc_trim_r+0xe0>
10008304:	00c40074 	movhi	r3,4097
10008308:	18d27704 	addi	r3,r3,18908
1000830c:	18800017 	ldw	r2,0(r3)
10008310:	99000217 	ldw	r4,8(r19)
10008314:	8c23c83a 	sub	r17,r17,r16
10008318:	8c400054 	ori	r17,r17,1
1000831c:	1421c83a 	sub	r16,r2,r16
10008320:	24400115 	stw	r17,4(r4)
10008324:	9009883a 	mov	r4,r18
10008328:	1c000015 	stw	r16,0(r3)
1000832c:	000ee780 	call	1000ee78 <__malloc_unlock>
10008330:	00800044 	movi	r2,1
10008334:	003fe706 	br	100082d4 <__alt_data_end+0xf80082d4>
10008338:	9009883a 	mov	r4,r18
1000833c:	000b883a 	mov	r5,zero
10008340:	000b1bc0 	call	1000b1bc <_sbrk_r>
10008344:	99000217 	ldw	r4,8(r19)
10008348:	014003c4 	movi	r5,15
1000834c:	1107c83a 	sub	r3,r2,r4
10008350:	28ffdd0e 	bge	r5,r3,100082c8 <__alt_data_end+0xf80082c8>
10008354:	01440074 	movhi	r5,4097
10008358:	294b9204 	addi	r5,r5,11848
1000835c:	29400017 	ldw	r5,0(r5)
10008360:	18c00054 	ori	r3,r3,1
10008364:	20c00115 	stw	r3,4(r4)
10008368:	00c40074 	movhi	r3,4097
1000836c:	1145c83a 	sub	r2,r2,r5
10008370:	18d27704 	addi	r3,r3,18908
10008374:	18800015 	stw	r2,0(r3)
10008378:	003fd306 	br	100082c8 <__alt_data_end+0xf80082c8>

1000837c <_free_r>:
1000837c:	28004c26 	beq	r5,zero,100084b0 <_free_r+0x134>
10008380:	defffd04 	addi	sp,sp,-12
10008384:	dc400115 	stw	r17,4(sp)
10008388:	dc000015 	stw	r16,0(sp)
1000838c:	2023883a 	mov	r17,r4
10008390:	2821883a 	mov	r16,r5
10008394:	dfc00215 	stw	ra,8(sp)
10008398:	000ee580 	call	1000ee58 <__malloc_lock>
1000839c:	813fff17 	ldw	r4,-4(r16)
100083a0:	00bfff84 	movi	r2,-2
100083a4:	02440074 	movhi	r9,4097
100083a8:	81bffe04 	addi	r6,r16,-8
100083ac:	2084703a 	and	r2,r4,r2
100083b0:	4a460b04 	addi	r9,r9,6188
100083b4:	308b883a 	add	r5,r6,r2
100083b8:	2a000117 	ldw	r8,4(r5)
100083bc:	49c00217 	ldw	r7,8(r9)
100083c0:	00ffff04 	movi	r3,-4
100083c4:	40c6703a 	and	r3,r8,r3
100083c8:	39405326 	beq	r7,r5,10008518 <_free_r+0x19c>
100083cc:	28c00115 	stw	r3,4(r5)
100083d0:	2100004c 	andi	r4,r4,1
100083d4:	2000091e 	bne	r4,zero,100083fc <_free_r+0x80>
100083d8:	81fffe17 	ldw	r7,-8(r16)
100083dc:	4a000204 	addi	r8,r9,8
100083e0:	31cdc83a 	sub	r6,r6,r7
100083e4:	31000217 	ldw	r4,8(r6)
100083e8:	11c5883a 	add	r2,r2,r7
100083ec:	22006126 	beq	r4,r8,10008574 <_free_r+0x1f8>
100083f0:	31c00317 	ldw	r7,12(r6)
100083f4:	21c00315 	stw	r7,12(r4)
100083f8:	39000215 	stw	r4,8(r7)
100083fc:	28c9883a 	add	r4,r5,r3
10008400:	21c00117 	ldw	r7,4(r4)
10008404:	39c0004c 	andi	r7,r7,1
10008408:	38000d1e 	bne	r7,zero,10008440 <_free_r+0xc4>
1000840c:	29000217 	ldw	r4,8(r5)
10008410:	10c5883a 	add	r2,r2,r3
10008414:	00c40074 	movhi	r3,4097
10008418:	18c60d04 	addi	r3,r3,6196
1000841c:	20c07526 	beq	r4,r3,100085f4 <_free_r+0x278>
10008420:	29c00317 	ldw	r7,12(r5)
10008424:	11400054 	ori	r5,r2,1
10008428:	3087883a 	add	r3,r6,r2
1000842c:	21c00315 	stw	r7,12(r4)
10008430:	39000215 	stw	r4,8(r7)
10008434:	31400115 	stw	r5,4(r6)
10008438:	18800015 	stw	r2,0(r3)
1000843c:	00000406 	br	10008450 <_free_r+0xd4>
10008440:	10c00054 	ori	r3,r2,1
10008444:	30c00115 	stw	r3,4(r6)
10008448:	3087883a 	add	r3,r6,r2
1000844c:	18800015 	stw	r2,0(r3)
10008450:	00c07fc4 	movi	r3,511
10008454:	18801736 	bltu	r3,r2,100084b4 <_free_r+0x138>
10008458:	1004d0fa 	srli	r2,r2,3
1000845c:	01400044 	movi	r5,1
10008460:	49000117 	ldw	r4,4(r9)
10008464:	1087883a 	add	r3,r2,r2
10008468:	18c7883a 	add	r3,r3,r3
1000846c:	1005d0ba 	srai	r2,r2,2
10008470:	18c7883a 	add	r3,r3,r3
10008474:	1a47883a 	add	r3,r3,r9
10008478:	19c00217 	ldw	r7,8(r3)
1000847c:	2884983a 	sll	r2,r5,r2
10008480:	30c00315 	stw	r3,12(r6)
10008484:	31c00215 	stw	r7,8(r6)
10008488:	1104b03a 	or	r2,r2,r4
1000848c:	19800215 	stw	r6,8(r3)
10008490:	48800115 	stw	r2,4(r9)
10008494:	39800315 	stw	r6,12(r7)
10008498:	8809883a 	mov	r4,r17
1000849c:	dfc00217 	ldw	ra,8(sp)
100084a0:	dc400117 	ldw	r17,4(sp)
100084a4:	dc000017 	ldw	r16,0(sp)
100084a8:	dec00304 	addi	sp,sp,12
100084ac:	000ee781 	jmpi	1000ee78 <__malloc_unlock>
100084b0:	f800283a 	ret
100084b4:	1006d27a 	srli	r3,r2,9
100084b8:	01000104 	movi	r4,4
100084bc:	20c04036 	bltu	r4,r3,100085c0 <_free_r+0x244>
100084c0:	1006d1ba 	srli	r3,r2,6
100084c4:	19400e04 	addi	r5,r3,56
100084c8:	2947883a 	add	r3,r5,r5
100084cc:	18c7883a 	add	r3,r3,r3
100084d0:	18c7883a 	add	r3,r3,r3
100084d4:	1a49883a 	add	r4,r3,r9
100084d8:	20c00217 	ldw	r3,8(r4)
100084dc:	01c40074 	movhi	r7,4097
100084e0:	39c60b04 	addi	r7,r7,6188
100084e4:	19003b26 	beq	r3,r4,100085d4 <_free_r+0x258>
100084e8:	01ffff04 	movi	r7,-4
100084ec:	19400117 	ldw	r5,4(r3)
100084f0:	29ca703a 	and	r5,r5,r7
100084f4:	1140022e 	bgeu	r2,r5,10008500 <_free_r+0x184>
100084f8:	18c00217 	ldw	r3,8(r3)
100084fc:	20fffb1e 	bne	r4,r3,100084ec <__alt_data_end+0xf80084ec>
10008500:	18800317 	ldw	r2,12(r3)
10008504:	30800315 	stw	r2,12(r6)
10008508:	30c00215 	stw	r3,8(r6)
1000850c:	11800215 	stw	r6,8(r2)
10008510:	19800315 	stw	r6,12(r3)
10008514:	003fe006 	br	10008498 <__alt_data_end+0xf8008498>
10008518:	2100004c 	andi	r4,r4,1
1000851c:	1885883a 	add	r2,r3,r2
10008520:	2000071e 	bne	r4,zero,10008540 <_free_r+0x1c4>
10008524:	817ffe17 	ldw	r5,-8(r16)
10008528:	314dc83a 	sub	r6,r6,r5
1000852c:	30c00317 	ldw	r3,12(r6)
10008530:	31000217 	ldw	r4,8(r6)
10008534:	1145883a 	add	r2,r2,r5
10008538:	20c00315 	stw	r3,12(r4)
1000853c:	19000215 	stw	r4,8(r3)
10008540:	10c00054 	ori	r3,r2,1
10008544:	30c00115 	stw	r3,4(r6)
10008548:	00c40074 	movhi	r3,4097
1000854c:	18cb9304 	addi	r3,r3,11852
10008550:	18c00017 	ldw	r3,0(r3)
10008554:	49800215 	stw	r6,8(r9)
10008558:	10ffcf36 	bltu	r2,r3,10008498 <__alt_data_end+0xf8008498>
1000855c:	00840074 	movhi	r2,4097
10008560:	10926e04 	addi	r2,r2,18872
10008564:	11400017 	ldw	r5,0(r2)
10008568:	8809883a 	mov	r4,r17
1000856c:	00082580 	call	10008258 <_malloc_trim_r>
10008570:	003fc906 	br	10008498 <__alt_data_end+0xf8008498>
10008574:	28c9883a 	add	r4,r5,r3
10008578:	21000117 	ldw	r4,4(r4)
1000857c:	2100004c 	andi	r4,r4,1
10008580:	20000a1e 	bne	r4,zero,100085ac <_free_r+0x230>
10008584:	29000317 	ldw	r4,12(r5)
10008588:	29400217 	ldw	r5,8(r5)
1000858c:	10c5883a 	add	r2,r2,r3
10008590:	10c00054 	ori	r3,r2,1
10008594:	29000315 	stw	r4,12(r5)
10008598:	21400215 	stw	r5,8(r4)
1000859c:	30c00115 	stw	r3,4(r6)
100085a0:	308d883a 	add	r6,r6,r2
100085a4:	30800015 	stw	r2,0(r6)
100085a8:	003fbb06 	br	10008498 <__alt_data_end+0xf8008498>
100085ac:	10c00054 	ori	r3,r2,1
100085b0:	30c00115 	stw	r3,4(r6)
100085b4:	308d883a 	add	r6,r6,r2
100085b8:	30800015 	stw	r2,0(r6)
100085bc:	003fb606 	br	10008498 <__alt_data_end+0xf8008498>
100085c0:	01000504 	movi	r4,20
100085c4:	20c01436 	bltu	r4,r3,10008618 <_free_r+0x29c>
100085c8:	194016c4 	addi	r5,r3,91
100085cc:	2947883a 	add	r3,r5,r5
100085d0:	003fbe06 	br	100084cc <__alt_data_end+0xf80084cc>
100085d4:	280bd0ba 	srai	r5,r5,2
100085d8:	00800044 	movi	r2,1
100085dc:	39000117 	ldw	r4,4(r7)
100085e0:	114a983a 	sll	r5,r2,r5
100085e4:	1805883a 	mov	r2,r3
100085e8:	2908b03a 	or	r4,r5,r4
100085ec:	39000115 	stw	r4,4(r7)
100085f0:	003fc406 	br	10008504 <__alt_data_end+0xf8008504>
100085f4:	49800515 	stw	r6,20(r9)
100085f8:	49800415 	stw	r6,16(r9)
100085fc:	10c00054 	ori	r3,r2,1
10008600:	31000315 	stw	r4,12(r6)
10008604:	31000215 	stw	r4,8(r6)
10008608:	30c00115 	stw	r3,4(r6)
1000860c:	308d883a 	add	r6,r6,r2
10008610:	30800015 	stw	r2,0(r6)
10008614:	003fa006 	br	10008498 <__alt_data_end+0xf8008498>
10008618:	01001504 	movi	r4,84
1000861c:	20c00436 	bltu	r4,r3,10008630 <_free_r+0x2b4>
10008620:	1006d33a 	srli	r3,r2,12
10008624:	19401b84 	addi	r5,r3,110
10008628:	2947883a 	add	r3,r5,r5
1000862c:	003fa706 	br	100084cc <__alt_data_end+0xf80084cc>
10008630:	01005504 	movi	r4,340
10008634:	20c00436 	bltu	r4,r3,10008648 <_free_r+0x2cc>
10008638:	1006d3fa 	srli	r3,r2,15
1000863c:	19401dc4 	addi	r5,r3,119
10008640:	2947883a 	add	r3,r5,r5
10008644:	003fa106 	br	100084cc <__alt_data_end+0xf80084cc>
10008648:	01015504 	movi	r4,1364
1000864c:	20c00436 	bltu	r4,r3,10008660 <_free_r+0x2e4>
10008650:	1006d4ba 	srli	r3,r2,18
10008654:	19401f04 	addi	r5,r3,124
10008658:	2947883a 	add	r3,r5,r5
1000865c:	003f9b06 	br	100084cc <__alt_data_end+0xf80084cc>
10008660:	00c03f04 	movi	r3,252
10008664:	01401f84 	movi	r5,126
10008668:	003f9806 	br	100084cc <__alt_data_end+0xf80084cc>

1000866c <__sfvwrite_r>:
1000866c:	30800217 	ldw	r2,8(r6)
10008670:	10004526 	beq	r2,zero,10008788 <__sfvwrite_r+0x11c>
10008674:	28c0030b 	ldhu	r3,12(r5)
10008678:	defff404 	addi	sp,sp,-48
1000867c:	dd400715 	stw	r21,28(sp)
10008680:	dcc00515 	stw	r19,20(sp)
10008684:	dc000215 	stw	r16,8(sp)
10008688:	dfc00b15 	stw	ra,44(sp)
1000868c:	df000a15 	stw	fp,40(sp)
10008690:	ddc00915 	stw	r23,36(sp)
10008694:	dd800815 	stw	r22,32(sp)
10008698:	dd000615 	stw	r20,24(sp)
1000869c:	dc800415 	stw	r18,16(sp)
100086a0:	dc400315 	stw	r17,12(sp)
100086a4:	1880020c 	andi	r2,r3,8
100086a8:	2821883a 	mov	r16,r5
100086ac:	202b883a 	mov	r21,r4
100086b0:	3027883a 	mov	r19,r6
100086b4:	10002526 	beq	r2,zero,1000874c <__sfvwrite_r+0xe0>
100086b8:	28800417 	ldw	r2,16(r5)
100086bc:	10002326 	beq	r2,zero,1000874c <__sfvwrite_r+0xe0>
100086c0:	1880008c 	andi	r2,r3,2
100086c4:	9c400017 	ldw	r17,0(r19)
100086c8:	10003126 	beq	r2,zero,10008790 <__sfvwrite_r+0x124>
100086cc:	0029883a 	mov	r20,zero
100086d0:	0025883a 	mov	r18,zero
100086d4:	05810004 	movi	r22,1024
100086d8:	a00d883a 	mov	r6,r20
100086dc:	a809883a 	mov	r4,r21
100086e0:	90002526 	beq	r18,zero,10008778 <__sfvwrite_r+0x10c>
100086e4:	900f883a 	mov	r7,r18
100086e8:	81400717 	ldw	r5,28(r16)
100086ec:	b480012e 	bgeu	r22,r18,100086f4 <__sfvwrite_r+0x88>
100086f0:	01c10004 	movi	r7,1024
100086f4:	80800917 	ldw	r2,36(r16)
100086f8:	103ee83a 	callr	r2
100086fc:	0080510e 	bge	zero,r2,10008844 <__sfvwrite_r+0x1d8>
10008700:	98c00217 	ldw	r3,8(r19)
10008704:	a0a9883a 	add	r20,r20,r2
10008708:	90a5c83a 	sub	r18,r18,r2
1000870c:	1885c83a 	sub	r2,r3,r2
10008710:	98800215 	stw	r2,8(r19)
10008714:	103ff01e 	bne	r2,zero,100086d8 <__alt_data_end+0xf80086d8>
10008718:	0005883a 	mov	r2,zero
1000871c:	dfc00b17 	ldw	ra,44(sp)
10008720:	df000a17 	ldw	fp,40(sp)
10008724:	ddc00917 	ldw	r23,36(sp)
10008728:	dd800817 	ldw	r22,32(sp)
1000872c:	dd400717 	ldw	r21,28(sp)
10008730:	dd000617 	ldw	r20,24(sp)
10008734:	dcc00517 	ldw	r19,20(sp)
10008738:	dc800417 	ldw	r18,16(sp)
1000873c:	dc400317 	ldw	r17,12(sp)
10008740:	dc000217 	ldw	r16,8(sp)
10008744:	dec00c04 	addi	sp,sp,48
10008748:	f800283a 	ret
1000874c:	a809883a 	mov	r4,r21
10008750:	800b883a 	mov	r5,r16
10008754:	00061cc0 	call	100061cc <__swsetup_r>
10008758:	80c0030b 	ldhu	r3,12(r16)
1000875c:	103fd826 	beq	r2,zero,100086c0 <__alt_data_end+0xf80086c0>
10008760:	18c01014 	ori	r3,r3,64
10008764:	80c0030d 	sth	r3,12(r16)
10008768:	00c00244 	movi	r3,9
1000876c:	00bfffc4 	movi	r2,-1
10008770:	a8c00015 	stw	r3,0(r21)
10008774:	003fe906 	br	1000871c <__alt_data_end+0xf800871c>
10008778:	8d000017 	ldw	r20,0(r17)
1000877c:	8c800117 	ldw	r18,4(r17)
10008780:	8c400204 	addi	r17,r17,8
10008784:	003fd406 	br	100086d8 <__alt_data_end+0xf80086d8>
10008788:	0005883a 	mov	r2,zero
1000878c:	f800283a 	ret
10008790:	1880004c 	andi	r2,r3,1
10008794:	1000301e 	bne	r2,zero,10008858 <__sfvwrite_r+0x1ec>
10008798:	002f883a 	mov	r23,zero
1000879c:	0025883a 	mov	r18,zero
100087a0:	90001c26 	beq	r18,zero,10008814 <__sfvwrite_r+0x1a8>
100087a4:	1880800c 	andi	r2,r3,512
100087a8:	85000217 	ldw	r20,8(r16)
100087ac:	10006c26 	beq	r2,zero,10008960 <__sfvwrite_r+0x2f4>
100087b0:	a02d883a 	mov	r22,r20
100087b4:	95008536 	bltu	r18,r20,100089cc <__sfvwrite_r+0x360>
100087b8:	1881200c 	andi	r2,r3,1152
100087bc:	10009d1e 	bne	r2,zero,10008a34 <__sfvwrite_r+0x3c8>
100087c0:	81000017 	ldw	r4,0(r16)
100087c4:	a039883a 	mov	fp,r20
100087c8:	9029883a 	mov	r20,r18
100087cc:	b80b883a 	mov	r5,r23
100087d0:	b00d883a 	mov	r6,r22
100087d4:	00098e00 	call	100098e0 <memmove>
100087d8:	80c00217 	ldw	r3,8(r16)
100087dc:	81000017 	ldw	r4,0(r16)
100087e0:	9005883a 	mov	r2,r18
100087e4:	1f39c83a 	sub	fp,r3,fp
100087e8:	258f883a 	add	r7,r4,r22
100087ec:	87000215 	stw	fp,8(r16)
100087f0:	81c00015 	stw	r7,0(r16)
100087f4:	98c00217 	ldw	r3,8(r19)
100087f8:	b8af883a 	add	r23,r23,r2
100087fc:	90a5c83a 	sub	r18,r18,r2
10008800:	1d05c83a 	sub	r2,r3,r20
10008804:	98800215 	stw	r2,8(r19)
10008808:	103fc326 	beq	r2,zero,10008718 <__alt_data_end+0xf8008718>
1000880c:	80c0030b 	ldhu	r3,12(r16)
10008810:	903fe41e 	bne	r18,zero,100087a4 <__alt_data_end+0xf80087a4>
10008814:	8dc00017 	ldw	r23,0(r17)
10008818:	8c800117 	ldw	r18,4(r17)
1000881c:	8c400204 	addi	r17,r17,8
10008820:	003fdf06 	br	100087a0 <__alt_data_end+0xf80087a0>
10008824:	000aba80 	call	1000aba8 <_realloc_r>
10008828:	102d883a 	mov	r22,r2
1000882c:	1000a01e 	bne	r2,zero,10008ab0 <__sfvwrite_r+0x444>
10008830:	81400417 	ldw	r5,16(r16)
10008834:	a809883a 	mov	r4,r21
10008838:	000837c0 	call	1000837c <_free_r>
1000883c:	00800304 	movi	r2,12
10008840:	a8800015 	stw	r2,0(r21)
10008844:	80c0030b 	ldhu	r3,12(r16)
10008848:	00bfffc4 	movi	r2,-1
1000884c:	18c01014 	ori	r3,r3,64
10008850:	80c0030d 	sth	r3,12(r16)
10008854:	003fb106 	br	1000871c <__alt_data_end+0xf800871c>
10008858:	0029883a 	mov	r20,zero
1000885c:	0011883a 	mov	r8,zero
10008860:	0039883a 	mov	fp,zero
10008864:	0025883a 	mov	r18,zero
10008868:	90001f26 	beq	r18,zero,100088e8 <__sfvwrite_r+0x27c>
1000886c:	40006826 	beq	r8,zero,10008a10 <__sfvwrite_r+0x3a4>
10008870:	a02f883a 	mov	r23,r20
10008874:	9500012e 	bgeu	r18,r20,1000887c <__sfvwrite_r+0x210>
10008878:	902f883a 	mov	r23,r18
1000887c:	81000017 	ldw	r4,0(r16)
10008880:	80800417 	ldw	r2,16(r16)
10008884:	b82d883a 	mov	r22,r23
10008888:	81800217 	ldw	r6,8(r16)
1000888c:	81c00517 	ldw	r7,20(r16)
10008890:	1100022e 	bgeu	r2,r4,1000889c <__sfvwrite_r+0x230>
10008894:	31c7883a 	add	r3,r6,r7
10008898:	1dc01816 	blt	r3,r23,100088fc <__sfvwrite_r+0x290>
1000889c:	b9c03f16 	blt	r23,r7,1000899c <__sfvwrite_r+0x330>
100088a0:	80800917 	ldw	r2,36(r16)
100088a4:	81400717 	ldw	r5,28(r16)
100088a8:	a809883a 	mov	r4,r21
100088ac:	da000115 	stw	r8,4(sp)
100088b0:	e00d883a 	mov	r6,fp
100088b4:	103ee83a 	callr	r2
100088b8:	102d883a 	mov	r22,r2
100088bc:	da000117 	ldw	r8,4(sp)
100088c0:	00bfe00e 	bge	zero,r2,10008844 <__alt_data_end+0xf8008844>
100088c4:	a5a9c83a 	sub	r20,r20,r22
100088c8:	a0001f26 	beq	r20,zero,10008948 <__sfvwrite_r+0x2dc>
100088cc:	98800217 	ldw	r2,8(r19)
100088d0:	e5b9883a 	add	fp,fp,r22
100088d4:	95a5c83a 	sub	r18,r18,r22
100088d8:	15adc83a 	sub	r22,r2,r22
100088dc:	9d800215 	stw	r22,8(r19)
100088e0:	b03f8d26 	beq	r22,zero,10008718 <__alt_data_end+0xf8008718>
100088e4:	903fe11e 	bne	r18,zero,1000886c <__alt_data_end+0xf800886c>
100088e8:	8f000017 	ldw	fp,0(r17)
100088ec:	8c800117 	ldw	r18,4(r17)
100088f0:	0011883a 	mov	r8,zero
100088f4:	8c400204 	addi	r17,r17,8
100088f8:	003fdb06 	br	10008868 <__alt_data_end+0xf8008868>
100088fc:	180d883a 	mov	r6,r3
10008900:	e00b883a 	mov	r5,fp
10008904:	da000115 	stw	r8,4(sp)
10008908:	d8c00015 	stw	r3,0(sp)
1000890c:	00098e00 	call	100098e0 <memmove>
10008910:	d8c00017 	ldw	r3,0(sp)
10008914:	80800017 	ldw	r2,0(r16)
10008918:	a809883a 	mov	r4,r21
1000891c:	800b883a 	mov	r5,r16
10008920:	10c5883a 	add	r2,r2,r3
10008924:	80800015 	stw	r2,0(r16)
10008928:	d8c00015 	stw	r3,0(sp)
1000892c:	0007c4c0 	call	10007c4c <_fflush_r>
10008930:	d8c00017 	ldw	r3,0(sp)
10008934:	da000117 	ldw	r8,4(sp)
10008938:	103fc21e 	bne	r2,zero,10008844 <__alt_data_end+0xf8008844>
1000893c:	182d883a 	mov	r22,r3
10008940:	a5a9c83a 	sub	r20,r20,r22
10008944:	a03fe11e 	bne	r20,zero,100088cc <__alt_data_end+0xf80088cc>
10008948:	a809883a 	mov	r4,r21
1000894c:	800b883a 	mov	r5,r16
10008950:	0007c4c0 	call	10007c4c <_fflush_r>
10008954:	103fbb1e 	bne	r2,zero,10008844 <__alt_data_end+0xf8008844>
10008958:	0011883a 	mov	r8,zero
1000895c:	003fdb06 	br	100088cc <__alt_data_end+0xf80088cc>
10008960:	81000017 	ldw	r4,0(r16)
10008964:	80800417 	ldw	r2,16(r16)
10008968:	1100012e 	bgeu	r2,r4,10008970 <__sfvwrite_r+0x304>
1000896c:	a4805a36 	bltu	r20,r18,10008ad8 <__sfvwrite_r+0x46c>
10008970:	81c00517 	ldw	r7,20(r16)
10008974:	91c01a36 	bltu	r18,r7,100089e0 <__sfvwrite_r+0x374>
10008978:	80800917 	ldw	r2,36(r16)
1000897c:	81400717 	ldw	r5,28(r16)
10008980:	a809883a 	mov	r4,r21
10008984:	b80d883a 	mov	r6,r23
10008988:	103ee83a 	callr	r2
1000898c:	1029883a 	mov	r20,r2
10008990:	00bfac0e 	bge	zero,r2,10008844 <__alt_data_end+0xf8008844>
10008994:	a005883a 	mov	r2,r20
10008998:	003f9606 	br	100087f4 <__alt_data_end+0xf80087f4>
1000899c:	b80d883a 	mov	r6,r23
100089a0:	e00b883a 	mov	r5,fp
100089a4:	da000115 	stw	r8,4(sp)
100089a8:	00098e00 	call	100098e0 <memmove>
100089ac:	80800217 	ldw	r2,8(r16)
100089b0:	80c00017 	ldw	r3,0(r16)
100089b4:	da000117 	ldw	r8,4(sp)
100089b8:	15c5c83a 	sub	r2,r2,r23
100089bc:	1def883a 	add	r23,r3,r23
100089c0:	80800215 	stw	r2,8(r16)
100089c4:	85c00015 	stw	r23,0(r16)
100089c8:	003fbe06 	br	100088c4 <__alt_data_end+0xf80088c4>
100089cc:	81000017 	ldw	r4,0(r16)
100089d0:	9039883a 	mov	fp,r18
100089d4:	9029883a 	mov	r20,r18
100089d8:	902d883a 	mov	r22,r18
100089dc:	003f7b06 	br	100087cc <__alt_data_end+0xf80087cc>
100089e0:	b80b883a 	mov	r5,r23
100089e4:	900d883a 	mov	r6,r18
100089e8:	00098e00 	call	100098e0 <memmove>
100089ec:	80c00217 	ldw	r3,8(r16)
100089f0:	80800017 	ldw	r2,0(r16)
100089f4:	9029883a 	mov	r20,r18
100089f8:	1c87c83a 	sub	r3,r3,r18
100089fc:	1485883a 	add	r2,r2,r18
10008a00:	80800015 	stw	r2,0(r16)
10008a04:	80c00215 	stw	r3,8(r16)
10008a08:	9005883a 	mov	r2,r18
10008a0c:	003f7906 	br	100087f4 <__alt_data_end+0xf80087f4>
10008a10:	e009883a 	mov	r4,fp
10008a14:	01400284 	movi	r5,10
10008a18:	900d883a 	mov	r6,r18
10008a1c:	00096c00 	call	100096c0 <memchr>
10008a20:	10003826 	beq	r2,zero,10008b04 <__sfvwrite_r+0x498>
10008a24:	10800044 	addi	r2,r2,1
10008a28:	1729c83a 	sub	r20,r2,fp
10008a2c:	02000044 	movi	r8,1
10008a30:	003f8f06 	br	10008870 <__alt_data_end+0xf8008870>
10008a34:	80800517 	ldw	r2,20(r16)
10008a38:	81400417 	ldw	r5,16(r16)
10008a3c:	87000017 	ldw	fp,0(r16)
10008a40:	10a9883a 	add	r20,r2,r2
10008a44:	a085883a 	add	r2,r20,r2
10008a48:	1028d7fa 	srli	r20,r2,31
10008a4c:	e179c83a 	sub	fp,fp,r5
10008a50:	e1000044 	addi	r4,fp,1
10008a54:	a085883a 	add	r2,r20,r2
10008a58:	1029d07a 	srai	r20,r2,1
10008a5c:	2485883a 	add	r2,r4,r18
10008a60:	a00d883a 	mov	r6,r20
10008a64:	a080022e 	bgeu	r20,r2,10008a70 <__sfvwrite_r+0x404>
10008a68:	1029883a 	mov	r20,r2
10008a6c:	100d883a 	mov	r6,r2
10008a70:	18c1000c 	andi	r3,r3,1024
10008a74:	a809883a 	mov	r4,r21
10008a78:	183f6a26 	beq	r3,zero,10008824 <__alt_data_end+0xf8008824>
10008a7c:	300b883a 	mov	r5,r6
10008a80:	0008f180 	call	10008f18 <_malloc_r>
10008a84:	102d883a 	mov	r22,r2
10008a88:	103f6c26 	beq	r2,zero,1000883c <__alt_data_end+0xf800883c>
10008a8c:	81400417 	ldw	r5,16(r16)
10008a90:	1009883a 	mov	r4,r2
10008a94:	e00d883a 	mov	r6,fp
10008a98:	00097a80 	call	100097a8 <memcpy>
10008a9c:	8080030b 	ldhu	r2,12(r16)
10008aa0:	00fedfc4 	movi	r3,-1153
10008aa4:	10c4703a 	and	r2,r2,r3
10008aa8:	10802014 	ori	r2,r2,128
10008aac:	8080030d 	sth	r2,12(r16)
10008ab0:	b709883a 	add	r4,r22,fp
10008ab4:	a707c83a 	sub	r3,r20,fp
10008ab8:	85800415 	stw	r22,16(r16)
10008abc:	85000515 	stw	r20,20(r16)
10008ac0:	81000015 	stw	r4,0(r16)
10008ac4:	9039883a 	mov	fp,r18
10008ac8:	80c00215 	stw	r3,8(r16)
10008acc:	9029883a 	mov	r20,r18
10008ad0:	902d883a 	mov	r22,r18
10008ad4:	003f3d06 	br	100087cc <__alt_data_end+0xf80087cc>
10008ad8:	b80b883a 	mov	r5,r23
10008adc:	a00d883a 	mov	r6,r20
10008ae0:	00098e00 	call	100098e0 <memmove>
10008ae4:	80800017 	ldw	r2,0(r16)
10008ae8:	a809883a 	mov	r4,r21
10008aec:	800b883a 	mov	r5,r16
10008af0:	1505883a 	add	r2,r2,r20
10008af4:	80800015 	stw	r2,0(r16)
10008af8:	0007c4c0 	call	10007c4c <_fflush_r>
10008afc:	103fa526 	beq	r2,zero,10008994 <__alt_data_end+0xf8008994>
10008b00:	003f5006 	br	10008844 <__alt_data_end+0xf8008844>
10008b04:	95000044 	addi	r20,r18,1
10008b08:	02000044 	movi	r8,1
10008b0c:	003f5806 	br	10008870 <__alt_data_end+0xf8008870>

10008b10 <_fwalk>:
10008b10:	defff804 	addi	sp,sp,-32
10008b14:	dd400515 	stw	r21,20(sp)
10008b18:	2540b804 	addi	r21,r4,736
10008b1c:	dd800615 	stw	r22,24(sp)
10008b20:	dd000415 	stw	r20,16(sp)
10008b24:	dfc00715 	stw	ra,28(sp)
10008b28:	dcc00315 	stw	r19,12(sp)
10008b2c:	dc800215 	stw	r18,8(sp)
10008b30:	dc400115 	stw	r17,4(sp)
10008b34:	dc000015 	stw	r16,0(sp)
10008b38:	2829883a 	mov	r20,r5
10008b3c:	002d883a 	mov	r22,zero
10008b40:	00082180 	call	10008218 <__sfp_lock_acquire>
10008b44:	a8001426 	beq	r21,zero,10008b98 <_fwalk+0x88>
10008b48:	04ffffc4 	movi	r19,-1
10008b4c:	ac400117 	ldw	r17,4(r21)
10008b50:	ac800217 	ldw	r18,8(r21)
10008b54:	8c7fffc4 	addi	r17,r17,-1
10008b58:	88000d16 	blt	r17,zero,10008b90 <_fwalk+0x80>
10008b5c:	94000304 	addi	r16,r18,12
10008b60:	94800384 	addi	r18,r18,14
10008b64:	80c0000f 	ldh	r3,0(r16)
10008b68:	8c7fffc4 	addi	r17,r17,-1
10008b6c:	813ffd04 	addi	r4,r16,-12
10008b70:	18000426 	beq	r3,zero,10008b84 <_fwalk+0x74>
10008b74:	90c0000f 	ldh	r3,0(r18)
10008b78:	1cc00226 	beq	r3,r19,10008b84 <_fwalk+0x74>
10008b7c:	a03ee83a 	callr	r20
10008b80:	b0acb03a 	or	r22,r22,r2
10008b84:	84001a04 	addi	r16,r16,104
10008b88:	94801a04 	addi	r18,r18,104
10008b8c:	8cfff51e 	bne	r17,r19,10008b64 <__alt_data_end+0xf8008b64>
10008b90:	ad400017 	ldw	r21,0(r21)
10008b94:	a83fed1e 	bne	r21,zero,10008b4c <__alt_data_end+0xf8008b4c>
10008b98:	000821c0 	call	1000821c <__sfp_lock_release>
10008b9c:	b005883a 	mov	r2,r22
10008ba0:	dfc00717 	ldw	ra,28(sp)
10008ba4:	dd800617 	ldw	r22,24(sp)
10008ba8:	dd400517 	ldw	r21,20(sp)
10008bac:	dd000417 	ldw	r20,16(sp)
10008bb0:	dcc00317 	ldw	r19,12(sp)
10008bb4:	dc800217 	ldw	r18,8(sp)
10008bb8:	dc400117 	ldw	r17,4(sp)
10008bbc:	dc000017 	ldw	r16,0(sp)
10008bc0:	dec00804 	addi	sp,sp,32
10008bc4:	f800283a 	ret

10008bc8 <_fwalk_reent>:
10008bc8:	defff804 	addi	sp,sp,-32
10008bcc:	dd400515 	stw	r21,20(sp)
10008bd0:	2540b804 	addi	r21,r4,736
10008bd4:	dd800615 	stw	r22,24(sp)
10008bd8:	dd000415 	stw	r20,16(sp)
10008bdc:	dcc00315 	stw	r19,12(sp)
10008be0:	dfc00715 	stw	ra,28(sp)
10008be4:	dc800215 	stw	r18,8(sp)
10008be8:	dc400115 	stw	r17,4(sp)
10008bec:	dc000015 	stw	r16,0(sp)
10008bf0:	2027883a 	mov	r19,r4
10008bf4:	2829883a 	mov	r20,r5
10008bf8:	002d883a 	mov	r22,zero
10008bfc:	00082180 	call	10008218 <__sfp_lock_acquire>
10008c00:	a8001326 	beq	r21,zero,10008c50 <_fwalk_reent+0x88>
10008c04:	04bfffc4 	movi	r18,-1
10008c08:	ac400117 	ldw	r17,4(r21)
10008c0c:	ac000217 	ldw	r16,8(r21)
10008c10:	8c7fffc4 	addi	r17,r17,-1
10008c14:	88000c16 	blt	r17,zero,10008c48 <_fwalk_reent+0x80>
10008c18:	84000304 	addi	r16,r16,12
10008c1c:	80c0000f 	ldh	r3,0(r16)
10008c20:	8c7fffc4 	addi	r17,r17,-1
10008c24:	817ffd04 	addi	r5,r16,-12
10008c28:	18000526 	beq	r3,zero,10008c40 <_fwalk_reent+0x78>
10008c2c:	80c0008f 	ldh	r3,2(r16)
10008c30:	9809883a 	mov	r4,r19
10008c34:	1c800226 	beq	r3,r18,10008c40 <_fwalk_reent+0x78>
10008c38:	a03ee83a 	callr	r20
10008c3c:	b0acb03a 	or	r22,r22,r2
10008c40:	84001a04 	addi	r16,r16,104
10008c44:	8cbff51e 	bne	r17,r18,10008c1c <__alt_data_end+0xf8008c1c>
10008c48:	ad400017 	ldw	r21,0(r21)
10008c4c:	a83fee1e 	bne	r21,zero,10008c08 <__alt_data_end+0xf8008c08>
10008c50:	000821c0 	call	1000821c <__sfp_lock_release>
10008c54:	b005883a 	mov	r2,r22
10008c58:	dfc00717 	ldw	ra,28(sp)
10008c5c:	dd800617 	ldw	r22,24(sp)
10008c60:	dd400517 	ldw	r21,20(sp)
10008c64:	dd000417 	ldw	r20,16(sp)
10008c68:	dcc00317 	ldw	r19,12(sp)
10008c6c:	dc800217 	ldw	r18,8(sp)
10008c70:	dc400117 	ldw	r17,4(sp)
10008c74:	dc000017 	ldw	r16,0(sp)
10008c78:	dec00804 	addi	sp,sp,32
10008c7c:	f800283a 	ret

10008c80 <_setlocale_r>:
10008c80:	30001b26 	beq	r6,zero,10008cf0 <_setlocale_r+0x70>
10008c84:	01440074 	movhi	r5,4097
10008c88:	defffe04 	addi	sp,sp,-8
10008c8c:	29448304 	addi	r5,r5,4620
10008c90:	3009883a 	mov	r4,r6
10008c94:	dc000015 	stw	r16,0(sp)
10008c98:	dfc00115 	stw	ra,4(sp)
10008c9c:	3021883a 	mov	r16,r6
10008ca0:	000b34c0 	call	1000b34c <strcmp>
10008ca4:	1000061e 	bne	r2,zero,10008cc0 <_setlocale_r+0x40>
10008ca8:	00840074 	movhi	r2,4097
10008cac:	10848204 	addi	r2,r2,4616
10008cb0:	dfc00117 	ldw	ra,4(sp)
10008cb4:	dc000017 	ldw	r16,0(sp)
10008cb8:	dec00204 	addi	sp,sp,8
10008cbc:	f800283a 	ret
10008cc0:	01440074 	movhi	r5,4097
10008cc4:	29448204 	addi	r5,r5,4616
10008cc8:	8009883a 	mov	r4,r16
10008ccc:	000b34c0 	call	1000b34c <strcmp>
10008cd0:	103ff526 	beq	r2,zero,10008ca8 <__alt_data_end+0xf8008ca8>
10008cd4:	01440074 	movhi	r5,4097
10008cd8:	29446d04 	addi	r5,r5,4532
10008cdc:	8009883a 	mov	r4,r16
10008ce0:	000b34c0 	call	1000b34c <strcmp>
10008ce4:	103ff026 	beq	r2,zero,10008ca8 <__alt_data_end+0xf8008ca8>
10008ce8:	0005883a 	mov	r2,zero
10008cec:	003ff006 	br	10008cb0 <__alt_data_end+0xf8008cb0>
10008cf0:	00840074 	movhi	r2,4097
10008cf4:	10848204 	addi	r2,r2,4616
10008cf8:	f800283a 	ret

10008cfc <__locale_charset>:
10008cfc:	00840074 	movhi	r2,4097
10008d00:	1085f504 	addi	r2,r2,6100
10008d04:	f800283a 	ret

10008d08 <__locale_mb_cur_max>:
10008d08:	00840074 	movhi	r2,4097
10008d0c:	108b9104 	addi	r2,r2,11844
10008d10:	10800017 	ldw	r2,0(r2)
10008d14:	f800283a 	ret

10008d18 <__locale_msgcharset>:
10008d18:	00840074 	movhi	r2,4097
10008d1c:	1085ed04 	addi	r2,r2,6068
10008d20:	f800283a 	ret

10008d24 <__locale_cjk_lang>:
10008d24:	0005883a 	mov	r2,zero
10008d28:	f800283a 	ret

10008d2c <_localeconv_r>:
10008d2c:	00840074 	movhi	r2,4097
10008d30:	1085fd04 	addi	r2,r2,6132
10008d34:	f800283a 	ret

10008d38 <setlocale>:
10008d38:	00c40074 	movhi	r3,4097
10008d3c:	18cb9004 	addi	r3,r3,11840
10008d40:	2005883a 	mov	r2,r4
10008d44:	19000017 	ldw	r4,0(r3)
10008d48:	280d883a 	mov	r6,r5
10008d4c:	100b883a 	mov	r5,r2
10008d50:	0008c801 	jmpi	10008c80 <_setlocale_r>

10008d54 <localeconv>:
10008d54:	00840074 	movhi	r2,4097
10008d58:	1085fd04 	addi	r2,r2,6132
10008d5c:	f800283a 	ret

10008d60 <__smakebuf_r>:
10008d60:	2880030b 	ldhu	r2,12(r5)
10008d64:	10c0008c 	andi	r3,r2,2
10008d68:	1800401e 	bne	r3,zero,10008e6c <__smakebuf_r+0x10c>
10008d6c:	deffec04 	addi	sp,sp,-80
10008d70:	dc000f15 	stw	r16,60(sp)
10008d74:	2821883a 	mov	r16,r5
10008d78:	2940038f 	ldh	r5,14(r5)
10008d7c:	dc401015 	stw	r17,64(sp)
10008d80:	dfc01315 	stw	ra,76(sp)
10008d84:	dcc01215 	stw	r19,72(sp)
10008d88:	dc801115 	stw	r18,68(sp)
10008d8c:	2023883a 	mov	r17,r4
10008d90:	28001b16 	blt	r5,zero,10008e00 <__smakebuf_r+0xa0>
10008d94:	d80d883a 	mov	r6,sp
10008d98:	000cdc40 	call	1000cdc4 <_fstat_r>
10008d9c:	10001716 	blt	r2,zero,10008dfc <__smakebuf_r+0x9c>
10008da0:	d8800117 	ldw	r2,4(sp)
10008da4:	00e00014 	movui	r3,32768
10008da8:	10bc000c 	andi	r2,r2,61440
10008dac:	10c03726 	beq	r2,r3,10008e8c <__smakebuf_r+0x12c>
10008db0:	80c0030b 	ldhu	r3,12(r16)
10008db4:	18c20014 	ori	r3,r3,2048
10008db8:	80c0030d 	sth	r3,12(r16)
10008dbc:	00c80004 	movi	r3,8192
10008dc0:	10c03c1e 	bne	r2,r3,10008eb4 <__smakebuf_r+0x154>
10008dc4:	8140038f 	ldh	r5,14(r16)
10008dc8:	8809883a 	mov	r4,r17
10008dcc:	000ce1c0 	call	1000ce1c <_isatty_r>
10008dd0:	10004e26 	beq	r2,zero,10008f0c <__smakebuf_r+0x1ac>
10008dd4:	8080030b 	ldhu	r2,12(r16)
10008dd8:	04c00044 	movi	r19,1
10008ddc:	80c010c4 	addi	r3,r16,67
10008de0:	14c4b03a 	or	r2,r2,r19
10008de4:	8080030d 	sth	r2,12(r16)
10008de8:	80c00015 	stw	r3,0(r16)
10008dec:	80c00415 	stw	r3,16(r16)
10008df0:	84c00515 	stw	r19,20(r16)
10008df4:	04810004 	movi	r18,1024
10008df8:	00000706 	br	10008e18 <__smakebuf_r+0xb8>
10008dfc:	8080030b 	ldhu	r2,12(r16)
10008e00:	10c0200c 	andi	r3,r2,128
10008e04:	18001f1e 	bne	r3,zero,10008e84 <__smakebuf_r+0x124>
10008e08:	04810004 	movi	r18,1024
10008e0c:	10820014 	ori	r2,r2,2048
10008e10:	8080030d 	sth	r2,12(r16)
10008e14:	0027883a 	mov	r19,zero
10008e18:	8809883a 	mov	r4,r17
10008e1c:	900b883a 	mov	r5,r18
10008e20:	0008f180 	call	10008f18 <_malloc_r>
10008e24:	10002e26 	beq	r2,zero,10008ee0 <__smakebuf_r+0x180>
10008e28:	80c0030b 	ldhu	r3,12(r16)
10008e2c:	01040034 	movhi	r4,4096
10008e30:	211fad04 	addi	r4,r4,32436
10008e34:	89000f15 	stw	r4,60(r17)
10008e38:	18c02014 	ori	r3,r3,128
10008e3c:	80c0030d 	sth	r3,12(r16)
10008e40:	80800015 	stw	r2,0(r16)
10008e44:	80800415 	stw	r2,16(r16)
10008e48:	84800515 	stw	r18,20(r16)
10008e4c:	98001c1e 	bne	r19,zero,10008ec0 <__smakebuf_r+0x160>
10008e50:	dfc01317 	ldw	ra,76(sp)
10008e54:	dcc01217 	ldw	r19,72(sp)
10008e58:	dc801117 	ldw	r18,68(sp)
10008e5c:	dc401017 	ldw	r17,64(sp)
10008e60:	dc000f17 	ldw	r16,60(sp)
10008e64:	dec01404 	addi	sp,sp,80
10008e68:	f800283a 	ret
10008e6c:	288010c4 	addi	r2,r5,67
10008e70:	28800015 	stw	r2,0(r5)
10008e74:	28800415 	stw	r2,16(r5)
10008e78:	00800044 	movi	r2,1
10008e7c:	28800515 	stw	r2,20(r5)
10008e80:	f800283a 	ret
10008e84:	04801004 	movi	r18,64
10008e88:	003fe006 	br	10008e0c <__alt_data_end+0xf8008e0c>
10008e8c:	81000a17 	ldw	r4,40(r16)
10008e90:	00c40074 	movhi	r3,4097
10008e94:	18ecba04 	addi	r3,r3,-19736
10008e98:	20ffc51e 	bne	r4,r3,10008db0 <__alt_data_end+0xf8008db0>
10008e9c:	80c0030b 	ldhu	r3,12(r16)
10008ea0:	01010004 	movi	r4,1024
10008ea4:	81001315 	stw	r4,76(r16)
10008ea8:	1906b03a 	or	r3,r3,r4
10008eac:	80c0030d 	sth	r3,12(r16)
10008eb0:	003fc206 	br	10008dbc <__alt_data_end+0xf8008dbc>
10008eb4:	0027883a 	mov	r19,zero
10008eb8:	04810004 	movi	r18,1024
10008ebc:	003fd606 	br	10008e18 <__alt_data_end+0xf8008e18>
10008ec0:	8140038f 	ldh	r5,14(r16)
10008ec4:	8809883a 	mov	r4,r17
10008ec8:	000ce1c0 	call	1000ce1c <_isatty_r>
10008ecc:	103fe026 	beq	r2,zero,10008e50 <__alt_data_end+0xf8008e50>
10008ed0:	8080030b 	ldhu	r2,12(r16)
10008ed4:	10800054 	ori	r2,r2,1
10008ed8:	8080030d 	sth	r2,12(r16)
10008edc:	003fdc06 	br	10008e50 <__alt_data_end+0xf8008e50>
10008ee0:	8080030b 	ldhu	r2,12(r16)
10008ee4:	10c0800c 	andi	r3,r2,512
10008ee8:	183fd91e 	bne	r3,zero,10008e50 <__alt_data_end+0xf8008e50>
10008eec:	10800094 	ori	r2,r2,2
10008ef0:	80c010c4 	addi	r3,r16,67
10008ef4:	8080030d 	sth	r2,12(r16)
10008ef8:	00800044 	movi	r2,1
10008efc:	80c00015 	stw	r3,0(r16)
10008f00:	80c00415 	stw	r3,16(r16)
10008f04:	80800515 	stw	r2,20(r16)
10008f08:	003fd106 	br	10008e50 <__alt_data_end+0xf8008e50>
10008f0c:	04c00044 	movi	r19,1
10008f10:	04810004 	movi	r18,1024
10008f14:	003fc006 	br	10008e18 <__alt_data_end+0xf8008e18>

10008f18 <_malloc_r>:
10008f18:	defff504 	addi	sp,sp,-44
10008f1c:	dc800315 	stw	r18,12(sp)
10008f20:	dfc00a15 	stw	ra,40(sp)
10008f24:	df000915 	stw	fp,36(sp)
10008f28:	ddc00815 	stw	r23,32(sp)
10008f2c:	dd800715 	stw	r22,28(sp)
10008f30:	dd400615 	stw	r21,24(sp)
10008f34:	dd000515 	stw	r20,20(sp)
10008f38:	dcc00415 	stw	r19,16(sp)
10008f3c:	dc400215 	stw	r17,8(sp)
10008f40:	dc000115 	stw	r16,4(sp)
10008f44:	288002c4 	addi	r2,r5,11
10008f48:	00c00584 	movi	r3,22
10008f4c:	2025883a 	mov	r18,r4
10008f50:	18802a2e 	bgeu	r3,r2,10008ffc <_malloc_r+0xe4>
10008f54:	047ffe04 	movi	r17,-8
10008f58:	1462703a 	and	r17,r2,r17
10008f5c:	88009e16 	blt	r17,zero,100091d8 <_malloc_r+0x2c0>
10008f60:	89409d36 	bltu	r17,r5,100091d8 <_malloc_r+0x2c0>
10008f64:	000ee580 	call	1000ee58 <__malloc_lock>
10008f68:	00807dc4 	movi	r2,503
10008f6c:	14402736 	bltu	r2,r17,1000900c <_malloc_r+0xf4>
10008f70:	8806d0fa 	srli	r3,r17,3
10008f74:	04c40074 	movhi	r19,4097
10008f78:	9cc60b04 	addi	r19,r19,6188
10008f7c:	18c5883a 	add	r2,r3,r3
10008f80:	1085883a 	add	r2,r2,r2
10008f84:	1085883a 	add	r2,r2,r2
10008f88:	9885883a 	add	r2,r19,r2
10008f8c:	14000317 	ldw	r16,12(r2)
10008f90:	80814a26 	beq	r16,r2,100094bc <_malloc_r+0x5a4>
10008f94:	80c00117 	ldw	r3,4(r16)
10008f98:	81000317 	ldw	r4,12(r16)
10008f9c:	00bfff04 	movi	r2,-4
10008fa0:	1884703a 	and	r2,r3,r2
10008fa4:	81400217 	ldw	r5,8(r16)
10008fa8:	8085883a 	add	r2,r16,r2
10008fac:	10c00117 	ldw	r3,4(r2)
10008fb0:	29000315 	stw	r4,12(r5)
10008fb4:	21400215 	stw	r5,8(r4)
10008fb8:	18c00054 	ori	r3,r3,1
10008fbc:	10c00115 	stw	r3,4(r2)
10008fc0:	9009883a 	mov	r4,r18
10008fc4:	000ee780 	call	1000ee78 <__malloc_unlock>
10008fc8:	80800204 	addi	r2,r16,8
10008fcc:	dfc00a17 	ldw	ra,40(sp)
10008fd0:	df000917 	ldw	fp,36(sp)
10008fd4:	ddc00817 	ldw	r23,32(sp)
10008fd8:	dd800717 	ldw	r22,28(sp)
10008fdc:	dd400617 	ldw	r21,24(sp)
10008fe0:	dd000517 	ldw	r20,20(sp)
10008fe4:	dcc00417 	ldw	r19,16(sp)
10008fe8:	dc800317 	ldw	r18,12(sp)
10008fec:	dc400217 	ldw	r17,8(sp)
10008ff0:	dc000117 	ldw	r16,4(sp)
10008ff4:	dec00b04 	addi	sp,sp,44
10008ff8:	f800283a 	ret
10008ffc:	04400404 	movi	r17,16
10009000:	89407536 	bltu	r17,r5,100091d8 <_malloc_r+0x2c0>
10009004:	000ee580 	call	1000ee58 <__malloc_lock>
10009008:	003fd906 	br	10008f70 <__alt_data_end+0xf8008f70>
1000900c:	8806d27a 	srli	r3,r17,9
10009010:	18007526 	beq	r3,zero,100091e8 <_malloc_r+0x2d0>
10009014:	00800104 	movi	r2,4
10009018:	10c0ef36 	bltu	r2,r3,100093d8 <_malloc_r+0x4c0>
1000901c:	8806d1ba 	srli	r3,r17,6
10009020:	19c00e04 	addi	r7,r3,56
10009024:	39cb883a 	add	r5,r7,r7
10009028:	04c40074 	movhi	r19,4097
1000902c:	294b883a 	add	r5,r5,r5
10009030:	9cc60b04 	addi	r19,r19,6188
10009034:	294b883a 	add	r5,r5,r5
10009038:	994b883a 	add	r5,r19,r5
1000903c:	2c000317 	ldw	r16,12(r5)
10009040:	2c000e26 	beq	r5,r16,1000907c <_malloc_r+0x164>
10009044:	80800117 	ldw	r2,4(r16)
10009048:	01bfff04 	movi	r6,-4
1000904c:	010003c4 	movi	r4,15
10009050:	1184703a 	and	r2,r2,r6
10009054:	1447c83a 	sub	r3,r2,r17
10009058:	20c00716 	blt	r4,r3,10009078 <_malloc_r+0x160>
1000905c:	1800650e 	bge	r3,zero,100091f4 <_malloc_r+0x2dc>
10009060:	84000317 	ldw	r16,12(r16)
10009064:	2c000526 	beq	r5,r16,1000907c <_malloc_r+0x164>
10009068:	80800117 	ldw	r2,4(r16)
1000906c:	1184703a 	and	r2,r2,r6
10009070:	1447c83a 	sub	r3,r2,r17
10009074:	20fff90e 	bge	r4,r3,1000905c <__alt_data_end+0xf800905c>
10009078:	39ffffc4 	addi	r7,r7,-1
1000907c:	38c00044 	addi	r3,r7,1
10009080:	01840074 	movhi	r6,4097
10009084:	9c000417 	ldw	r16,16(r19)
10009088:	31860b04 	addi	r6,r6,6188
1000908c:	32400204 	addi	r9,r6,8
10009090:	82410326 	beq	r16,r9,100094a0 <_malloc_r+0x588>
10009094:	81000117 	ldw	r4,4(r16)
10009098:	00bfff04 	movi	r2,-4
1000909c:	208e703a 	and	r7,r4,r2
100090a0:	3c45c83a 	sub	r2,r7,r17
100090a4:	010003c4 	movi	r4,15
100090a8:	2080ee16 	blt	r4,r2,10009464 <_malloc_r+0x54c>
100090ac:	32400515 	stw	r9,20(r6)
100090b0:	32400415 	stw	r9,16(r6)
100090b4:	1000510e 	bge	r2,zero,100091fc <_malloc_r+0x2e4>
100090b8:	00807fc4 	movi	r2,511
100090bc:	11c0ce36 	bltu	r2,r7,100093f8 <_malloc_r+0x4e0>
100090c0:	3808d0fa 	srli	r4,r7,3
100090c4:	01c00044 	movi	r7,1
100090c8:	30800117 	ldw	r2,4(r6)
100090cc:	210b883a 	add	r5,r4,r4
100090d0:	294b883a 	add	r5,r5,r5
100090d4:	2009d0ba 	srai	r4,r4,2
100090d8:	294b883a 	add	r5,r5,r5
100090dc:	298b883a 	add	r5,r5,r6
100090e0:	2a000217 	ldw	r8,8(r5)
100090e4:	3908983a 	sll	r4,r7,r4
100090e8:	81400315 	stw	r5,12(r16)
100090ec:	82000215 	stw	r8,8(r16)
100090f0:	2088b03a 	or	r4,r4,r2
100090f4:	2c000215 	stw	r16,8(r5)
100090f8:	31000115 	stw	r4,4(r6)
100090fc:	44000315 	stw	r16,12(r8)
10009100:	1805d0ba 	srai	r2,r3,2
10009104:	01400044 	movi	r5,1
10009108:	288a983a 	sll	r5,r5,r2
1000910c:	21404336 	bltu	r4,r5,1000921c <_malloc_r+0x304>
10009110:	2144703a 	and	r2,r4,r5
10009114:	10000a1e 	bne	r2,zero,10009140 <_malloc_r+0x228>
10009118:	00bfff04 	movi	r2,-4
1000911c:	294b883a 	add	r5,r5,r5
10009120:	1886703a 	and	r3,r3,r2
10009124:	2144703a 	and	r2,r4,r5
10009128:	18c00104 	addi	r3,r3,4
1000912c:	1000041e 	bne	r2,zero,10009140 <_malloc_r+0x228>
10009130:	294b883a 	add	r5,r5,r5
10009134:	2144703a 	and	r2,r4,r5
10009138:	18c00104 	addi	r3,r3,4
1000913c:	103ffc26 	beq	r2,zero,10009130 <__alt_data_end+0xf8009130>
10009140:	023fff04 	movi	r8,-4
10009144:	01c003c4 	movi	r7,15
10009148:	18c5883a 	add	r2,r3,r3
1000914c:	1085883a 	add	r2,r2,r2
10009150:	1085883a 	add	r2,r2,r2
10009154:	9895883a 	add	r10,r19,r2
10009158:	52c00304 	addi	r11,r10,12
1000915c:	1819883a 	mov	r12,r3
10009160:	5c000017 	ldw	r16,0(r11)
10009164:	59bffd04 	addi	r6,r11,-12
10009168:	8180041e 	bne	r16,r6,1000917c <_malloc_r+0x264>
1000916c:	0000ce06 	br	100094a8 <_malloc_r+0x590>
10009170:	2000d70e 	bge	r4,zero,100094d0 <_malloc_r+0x5b8>
10009174:	84000317 	ldw	r16,12(r16)
10009178:	8180cb26 	beq	r16,r6,100094a8 <_malloc_r+0x590>
1000917c:	80800117 	ldw	r2,4(r16)
10009180:	1204703a 	and	r2,r2,r8
10009184:	1449c83a 	sub	r4,r2,r17
10009188:	393ff90e 	bge	r7,r4,10009170 <__alt_data_end+0xf8009170>
1000918c:	80800317 	ldw	r2,12(r16)
10009190:	80c00217 	ldw	r3,8(r16)
10009194:	89400054 	ori	r5,r17,1
10009198:	81400115 	stw	r5,4(r16)
1000919c:	18800315 	stw	r2,12(r3)
100091a0:	10c00215 	stw	r3,8(r2)
100091a4:	8463883a 	add	r17,r16,r17
100091a8:	9c400515 	stw	r17,20(r19)
100091ac:	9c400415 	stw	r17,16(r19)
100091b0:	20800054 	ori	r2,r4,1
100091b4:	88800115 	stw	r2,4(r17)
100091b8:	8a400315 	stw	r9,12(r17)
100091bc:	8a400215 	stw	r9,8(r17)
100091c0:	8923883a 	add	r17,r17,r4
100091c4:	89000015 	stw	r4,0(r17)
100091c8:	9009883a 	mov	r4,r18
100091cc:	000ee780 	call	1000ee78 <__malloc_unlock>
100091d0:	80800204 	addi	r2,r16,8
100091d4:	003f7d06 	br	10008fcc <__alt_data_end+0xf8008fcc>
100091d8:	00800304 	movi	r2,12
100091dc:	90800015 	stw	r2,0(r18)
100091e0:	0005883a 	mov	r2,zero
100091e4:	003f7906 	br	10008fcc <__alt_data_end+0xf8008fcc>
100091e8:	01401f84 	movi	r5,126
100091ec:	01c00fc4 	movi	r7,63
100091f0:	003f8d06 	br	10009028 <__alt_data_end+0xf8009028>
100091f4:	81000317 	ldw	r4,12(r16)
100091f8:	003f6a06 	br	10008fa4 <__alt_data_end+0xf8008fa4>
100091fc:	81c5883a 	add	r2,r16,r7
10009200:	10c00117 	ldw	r3,4(r2)
10009204:	9009883a 	mov	r4,r18
10009208:	18c00054 	ori	r3,r3,1
1000920c:	10c00115 	stw	r3,4(r2)
10009210:	000ee780 	call	1000ee78 <__malloc_unlock>
10009214:	80800204 	addi	r2,r16,8
10009218:	003f6c06 	br	10008fcc <__alt_data_end+0xf8008fcc>
1000921c:	9c000217 	ldw	r16,8(r19)
10009220:	00bfff04 	movi	r2,-4
10009224:	85800117 	ldw	r22,4(r16)
10009228:	b0ac703a 	and	r22,r22,r2
1000922c:	b4400336 	bltu	r22,r17,1000923c <_malloc_r+0x324>
10009230:	b445c83a 	sub	r2,r22,r17
10009234:	00c003c4 	movi	r3,15
10009238:	18805d16 	blt	r3,r2,100093b0 <_malloc_r+0x498>
1000923c:	05c40074 	movhi	r23,4097
10009240:	00840074 	movhi	r2,4097
10009244:	bdcb9204 	addi	r23,r23,11848
10009248:	10926e04 	addi	r2,r2,18872
1000924c:	15400017 	ldw	r21,0(r2)
10009250:	b9000017 	ldw	r4,0(r23)
10009254:	00ffffc4 	movi	r3,-1
10009258:	858d883a 	add	r6,r16,r22
1000925c:	8d6b883a 	add	r21,r17,r21
10009260:	20c0e426 	beq	r4,r3,100095f4 <_malloc_r+0x6dc>
10009264:	ad4403c4 	addi	r21,r21,4111
10009268:	00fc0004 	movi	r3,-4096
1000926c:	a8ea703a 	and	r21,r21,r3
10009270:	9009883a 	mov	r4,r18
10009274:	a80b883a 	mov	r5,r21
10009278:	d9800015 	stw	r6,0(sp)
1000927c:	000b1bc0 	call	1000b1bc <_sbrk_r>
10009280:	00ffffc4 	movi	r3,-1
10009284:	1029883a 	mov	r20,r2
10009288:	d9800017 	ldw	r6,0(sp)
1000928c:	10c0a426 	beq	r2,r3,10009520 <_malloc_r+0x608>
10009290:	1180a236 	bltu	r2,r6,1000951c <_malloc_r+0x604>
10009294:	07040074 	movhi	fp,4097
10009298:	e7127704 	addi	fp,fp,18908
1000929c:	e0c00017 	ldw	r3,0(fp)
100092a0:	a8c7883a 	add	r3,r21,r3
100092a4:	e0c00015 	stw	r3,0(fp)
100092a8:	3500da26 	beq	r6,r20,10009614 <_malloc_r+0x6fc>
100092ac:	b9000017 	ldw	r4,0(r23)
100092b0:	00bfffc4 	movi	r2,-1
100092b4:	2080e426 	beq	r4,r2,10009648 <_malloc_r+0x730>
100092b8:	a185c83a 	sub	r2,r20,r6
100092bc:	1885883a 	add	r2,r3,r2
100092c0:	e0800015 	stw	r2,0(fp)
100092c4:	a0c001cc 	andi	r3,r20,7
100092c8:	1800b526 	beq	r3,zero,100095a0 <_malloc_r+0x688>
100092cc:	a0e9c83a 	sub	r20,r20,r3
100092d0:	00840204 	movi	r2,4104
100092d4:	a5000204 	addi	r20,r20,8
100092d8:	10c7c83a 	sub	r3,r2,r3
100092dc:	a545883a 	add	r2,r20,r21
100092e0:	1083ffcc 	andi	r2,r2,4095
100092e4:	18abc83a 	sub	r21,r3,r2
100092e8:	9009883a 	mov	r4,r18
100092ec:	a80b883a 	mov	r5,r21
100092f0:	000b1bc0 	call	1000b1bc <_sbrk_r>
100092f4:	00ffffc4 	movi	r3,-1
100092f8:	10c0d026 	beq	r2,r3,1000963c <_malloc_r+0x724>
100092fc:	1507c83a 	sub	r3,r2,r20
10009300:	a8c7883a 	add	r3,r21,r3
10009304:	18c00054 	ori	r3,r3,1
10009308:	e0800017 	ldw	r2,0(fp)
1000930c:	9d000215 	stw	r20,8(r19)
10009310:	a0c00115 	stw	r3,4(r20)
10009314:	a887883a 	add	r3,r21,r2
10009318:	e0c00015 	stw	r3,0(fp)
1000931c:	84c00e26 	beq	r16,r19,10009358 <_malloc_r+0x440>
10009320:	018003c4 	movi	r6,15
10009324:	3580a02e 	bgeu	r6,r22,100095a8 <_malloc_r+0x690>
10009328:	81400117 	ldw	r5,4(r16)
1000932c:	013ffe04 	movi	r4,-8
10009330:	b0bffd04 	addi	r2,r22,-12
10009334:	1104703a 	and	r2,r2,r4
10009338:	2900004c 	andi	r4,r5,1
1000933c:	1108b03a 	or	r4,r2,r4
10009340:	81000115 	stw	r4,4(r16)
10009344:	01400144 	movi	r5,5
10009348:	8089883a 	add	r4,r16,r2
1000934c:	21400115 	stw	r5,4(r4)
10009350:	21400215 	stw	r5,8(r4)
10009354:	3080c036 	bltu	r6,r2,10009658 <_malloc_r+0x740>
10009358:	00840074 	movhi	r2,4097
1000935c:	10926d04 	addi	r2,r2,18868
10009360:	11000017 	ldw	r4,0(r2)
10009364:	20c0012e 	bgeu	r4,r3,1000936c <_malloc_r+0x454>
10009368:	10c00015 	stw	r3,0(r2)
1000936c:	00840074 	movhi	r2,4097
10009370:	10926c04 	addi	r2,r2,18864
10009374:	11000017 	ldw	r4,0(r2)
10009378:	9c000217 	ldw	r16,8(r19)
1000937c:	20c0012e 	bgeu	r4,r3,10009384 <_malloc_r+0x46c>
10009380:	10c00015 	stw	r3,0(r2)
10009384:	80c00117 	ldw	r3,4(r16)
10009388:	00bfff04 	movi	r2,-4
1000938c:	1886703a 	and	r3,r3,r2
10009390:	1c45c83a 	sub	r2,r3,r17
10009394:	1c400236 	bltu	r3,r17,100093a0 <_malloc_r+0x488>
10009398:	00c003c4 	movi	r3,15
1000939c:	18800416 	blt	r3,r2,100093b0 <_malloc_r+0x498>
100093a0:	9009883a 	mov	r4,r18
100093a4:	000ee780 	call	1000ee78 <__malloc_unlock>
100093a8:	0005883a 	mov	r2,zero
100093ac:	003f0706 	br	10008fcc <__alt_data_end+0xf8008fcc>
100093b0:	88c00054 	ori	r3,r17,1
100093b4:	80c00115 	stw	r3,4(r16)
100093b8:	8463883a 	add	r17,r16,r17
100093bc:	10800054 	ori	r2,r2,1
100093c0:	9c400215 	stw	r17,8(r19)
100093c4:	88800115 	stw	r2,4(r17)
100093c8:	9009883a 	mov	r4,r18
100093cc:	000ee780 	call	1000ee78 <__malloc_unlock>
100093d0:	80800204 	addi	r2,r16,8
100093d4:	003efd06 	br	10008fcc <__alt_data_end+0xf8008fcc>
100093d8:	00800504 	movi	r2,20
100093dc:	10c0482e 	bgeu	r2,r3,10009500 <_malloc_r+0x5e8>
100093e0:	00801504 	movi	r2,84
100093e4:	10c06836 	bltu	r2,r3,10009588 <_malloc_r+0x670>
100093e8:	8806d33a 	srli	r3,r17,12
100093ec:	19c01b84 	addi	r7,r3,110
100093f0:	39cb883a 	add	r5,r7,r7
100093f4:	003f0c06 	br	10009028 <__alt_data_end+0xf8009028>
100093f8:	3804d27a 	srli	r2,r7,9
100093fc:	01000104 	movi	r4,4
10009400:	2080422e 	bgeu	r4,r2,1000950c <_malloc_r+0x5f4>
10009404:	01000504 	movi	r4,20
10009408:	20807c36 	bltu	r4,r2,100095fc <_malloc_r+0x6e4>
1000940c:	110016c4 	addi	r4,r2,91
10009410:	210b883a 	add	r5,r4,r4
10009414:	294b883a 	add	r5,r5,r5
10009418:	294b883a 	add	r5,r5,r5
1000941c:	994b883a 	add	r5,r19,r5
10009420:	28800217 	ldw	r2,8(r5)
10009424:	02040074 	movhi	r8,4097
10009428:	42060b04 	addi	r8,r8,6188
1000942c:	11406326 	beq	r2,r5,100095bc <_malloc_r+0x6a4>
10009430:	01bfff04 	movi	r6,-4
10009434:	11000117 	ldw	r4,4(r2)
10009438:	2188703a 	and	r4,r4,r6
1000943c:	3900022e 	bgeu	r7,r4,10009448 <_malloc_r+0x530>
10009440:	10800217 	ldw	r2,8(r2)
10009444:	28bffb1e 	bne	r5,r2,10009434 <__alt_data_end+0xf8009434>
10009448:	11800317 	ldw	r6,12(r2)
1000944c:	99000117 	ldw	r4,4(r19)
10009450:	81800315 	stw	r6,12(r16)
10009454:	80800215 	stw	r2,8(r16)
10009458:	34000215 	stw	r16,8(r6)
1000945c:	14000315 	stw	r16,12(r2)
10009460:	003f2706 	br	10009100 <__alt_data_end+0xf8009100>
10009464:	88c00054 	ori	r3,r17,1
10009468:	80c00115 	stw	r3,4(r16)
1000946c:	8463883a 	add	r17,r16,r17
10009470:	34400515 	stw	r17,20(r6)
10009474:	34400415 	stw	r17,16(r6)
10009478:	10c00054 	ori	r3,r2,1
1000947c:	8a400315 	stw	r9,12(r17)
10009480:	8a400215 	stw	r9,8(r17)
10009484:	88c00115 	stw	r3,4(r17)
10009488:	88a3883a 	add	r17,r17,r2
1000948c:	88800015 	stw	r2,0(r17)
10009490:	9009883a 	mov	r4,r18
10009494:	000ee780 	call	1000ee78 <__malloc_unlock>
10009498:	80800204 	addi	r2,r16,8
1000949c:	003ecb06 	br	10008fcc <__alt_data_end+0xf8008fcc>
100094a0:	31000117 	ldw	r4,4(r6)
100094a4:	003f1606 	br	10009100 <__alt_data_end+0xf8009100>
100094a8:	63000044 	addi	r12,r12,1
100094ac:	608000cc 	andi	r2,r12,3
100094b0:	5ac00204 	addi	r11,r11,8
100094b4:	103f2a1e 	bne	r2,zero,10009160 <__alt_data_end+0xf8009160>
100094b8:	00002106 	br	10009540 <_malloc_r+0x628>
100094bc:	80800204 	addi	r2,r16,8
100094c0:	84000517 	ldw	r16,20(r16)
100094c4:	143eb31e 	bne	r2,r16,10008f94 <__alt_data_end+0xf8008f94>
100094c8:	18c00084 	addi	r3,r3,2
100094cc:	003eec06 	br	10009080 <__alt_data_end+0xf8009080>
100094d0:	8085883a 	add	r2,r16,r2
100094d4:	10c00117 	ldw	r3,4(r2)
100094d8:	81000317 	ldw	r4,12(r16)
100094dc:	81400217 	ldw	r5,8(r16)
100094e0:	18c00054 	ori	r3,r3,1
100094e4:	10c00115 	stw	r3,4(r2)
100094e8:	29000315 	stw	r4,12(r5)
100094ec:	21400215 	stw	r5,8(r4)
100094f0:	9009883a 	mov	r4,r18
100094f4:	000ee780 	call	1000ee78 <__malloc_unlock>
100094f8:	80800204 	addi	r2,r16,8
100094fc:	003eb306 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009500:	19c016c4 	addi	r7,r3,91
10009504:	39cb883a 	add	r5,r7,r7
10009508:	003ec706 	br	10009028 <__alt_data_end+0xf8009028>
1000950c:	3804d1ba 	srli	r2,r7,6
10009510:	11000e04 	addi	r4,r2,56
10009514:	210b883a 	add	r5,r4,r4
10009518:	003fbe06 	br	10009414 <__alt_data_end+0xf8009414>
1000951c:	84ff5d26 	beq	r16,r19,10009294 <__alt_data_end+0xf8009294>
10009520:	9c000217 	ldw	r16,8(r19)
10009524:	00bfff04 	movi	r2,-4
10009528:	80c00117 	ldw	r3,4(r16)
1000952c:	1886703a 	and	r3,r3,r2
10009530:	003f9706 	br	10009390 <__alt_data_end+0xf8009390>
10009534:	52800017 	ldw	r10,0(r10)
10009538:	18ffffc4 	addi	r3,r3,-1
1000953c:	50805c1e 	bne	r10,r2,100096b0 <_malloc_r+0x798>
10009540:	190000cc 	andi	r4,r3,3
10009544:	50bffe04 	addi	r2,r10,-8
10009548:	203ffa1e 	bne	r4,zero,10009534 <__alt_data_end+0xf8009534>
1000954c:	98800117 	ldw	r2,4(r19)
10009550:	0146303a 	nor	r3,zero,r5
10009554:	1884703a 	and	r2,r3,r2
10009558:	98800115 	stw	r2,4(r19)
1000955c:	294b883a 	add	r5,r5,r5
10009560:	117f2e36 	bltu	r2,r5,1000921c <__alt_data_end+0xf800921c>
10009564:	283f2d26 	beq	r5,zero,1000921c <__alt_data_end+0xf800921c>
10009568:	1146703a 	and	r3,r2,r5
1000956c:	1800521e 	bne	r3,zero,100096b8 <_malloc_r+0x7a0>
10009570:	6007883a 	mov	r3,r12
10009574:	294b883a 	add	r5,r5,r5
10009578:	1148703a 	and	r4,r2,r5
1000957c:	18c00104 	addi	r3,r3,4
10009580:	203ffc26 	beq	r4,zero,10009574 <__alt_data_end+0xf8009574>
10009584:	003ef006 	br	10009148 <__alt_data_end+0xf8009148>
10009588:	00805504 	movi	r2,340
1000958c:	10c01336 	bltu	r2,r3,100095dc <_malloc_r+0x6c4>
10009590:	8806d3fa 	srli	r3,r17,15
10009594:	19c01dc4 	addi	r7,r3,119
10009598:	39cb883a 	add	r5,r7,r7
1000959c:	003ea206 	br	10009028 <__alt_data_end+0xf8009028>
100095a0:	00c40004 	movi	r3,4096
100095a4:	003f4d06 	br	100092dc <__alt_data_end+0xf80092dc>
100095a8:	00800044 	movi	r2,1
100095ac:	a0800115 	stw	r2,4(r20)
100095b0:	a021883a 	mov	r16,r20
100095b4:	0007883a 	mov	r3,zero
100095b8:	003f7506 	br	10009390 <__alt_data_end+0xf8009390>
100095bc:	200bd0ba 	srai	r5,r4,2
100095c0:	01800044 	movi	r6,1
100095c4:	41000117 	ldw	r4,4(r8)
100095c8:	314a983a 	sll	r5,r6,r5
100095cc:	100d883a 	mov	r6,r2
100095d0:	2908b03a 	or	r4,r5,r4
100095d4:	41000115 	stw	r4,4(r8)
100095d8:	003f9d06 	br	10009450 <__alt_data_end+0xf8009450>
100095dc:	00815504 	movi	r2,1364
100095e0:	10c01336 	bltu	r2,r3,10009630 <_malloc_r+0x718>
100095e4:	8806d4ba 	srli	r3,r17,18
100095e8:	19c01f04 	addi	r7,r3,124
100095ec:	39cb883a 	add	r5,r7,r7
100095f0:	003e8d06 	br	10009028 <__alt_data_end+0xf8009028>
100095f4:	ad400404 	addi	r21,r21,16
100095f8:	003f1d06 	br	10009270 <__alt_data_end+0xf8009270>
100095fc:	01001504 	movi	r4,84
10009600:	20801c36 	bltu	r4,r2,10009674 <_malloc_r+0x75c>
10009604:	3804d33a 	srli	r2,r7,12
10009608:	11001b84 	addi	r4,r2,110
1000960c:	210b883a 	add	r5,r4,r4
10009610:	003f8006 	br	10009414 <__alt_data_end+0xf8009414>
10009614:	3083ffcc 	andi	r2,r6,4095
10009618:	103f241e 	bne	r2,zero,100092ac <__alt_data_end+0xf80092ac>
1000961c:	99000217 	ldw	r4,8(r19)
10009620:	ad85883a 	add	r2,r21,r22
10009624:	10800054 	ori	r2,r2,1
10009628:	20800115 	stw	r2,4(r4)
1000962c:	003f4a06 	br	10009358 <__alt_data_end+0xf8009358>
10009630:	01403f04 	movi	r5,252
10009634:	01c01f84 	movi	r7,126
10009638:	003e7b06 	br	10009028 <__alt_data_end+0xf8009028>
1000963c:	00c00044 	movi	r3,1
10009640:	002b883a 	mov	r21,zero
10009644:	003f3006 	br	10009308 <__alt_data_end+0xf8009308>
10009648:	00840074 	movhi	r2,4097
1000964c:	108b9204 	addi	r2,r2,11848
10009650:	15000015 	stw	r20,0(r2)
10009654:	003f1b06 	br	100092c4 <__alt_data_end+0xf80092c4>
10009658:	9009883a 	mov	r4,r18
1000965c:	81400204 	addi	r5,r16,8
10009660:	000837c0 	call	1000837c <_free_r>
10009664:	00840074 	movhi	r2,4097
10009668:	10927704 	addi	r2,r2,18908
1000966c:	10c00017 	ldw	r3,0(r2)
10009670:	003f3906 	br	10009358 <__alt_data_end+0xf8009358>
10009674:	01005504 	movi	r4,340
10009678:	20800436 	bltu	r4,r2,1000968c <_malloc_r+0x774>
1000967c:	3804d3fa 	srli	r2,r7,15
10009680:	11001dc4 	addi	r4,r2,119
10009684:	210b883a 	add	r5,r4,r4
10009688:	003f6206 	br	10009414 <__alt_data_end+0xf8009414>
1000968c:	01015504 	movi	r4,1364
10009690:	20800436 	bltu	r4,r2,100096a4 <_malloc_r+0x78c>
10009694:	3804d4ba 	srli	r2,r7,18
10009698:	11001f04 	addi	r4,r2,124
1000969c:	210b883a 	add	r5,r4,r4
100096a0:	003f5c06 	br	10009414 <__alt_data_end+0xf8009414>
100096a4:	01403f04 	movi	r5,252
100096a8:	01001f84 	movi	r4,126
100096ac:	003f5906 	br	10009414 <__alt_data_end+0xf8009414>
100096b0:	98800117 	ldw	r2,4(r19)
100096b4:	003fa906 	br	1000955c <__alt_data_end+0xf800955c>
100096b8:	6007883a 	mov	r3,r12
100096bc:	003ea206 	br	10009148 <__alt_data_end+0xf8009148>

100096c0 <memchr>:
100096c0:	208000cc 	andi	r2,r4,3
100096c4:	280f883a 	mov	r7,r5
100096c8:	10003526 	beq	r2,zero,100097a0 <memchr+0xe0>
100096cc:	30bfffc4 	addi	r2,r6,-1
100096d0:	30001b26 	beq	r6,zero,10009740 <memchr+0x80>
100096d4:	21800003 	ldbu	r6,0(r4)
100096d8:	28c03fcc 	andi	r3,r5,255
100096dc:	30c01a26 	beq	r6,r3,10009748 <memchr+0x88>
100096e0:	180d883a 	mov	r6,r3
100096e4:	00000406 	br	100096f8 <memchr+0x38>
100096e8:	10001526 	beq	r2,zero,10009740 <memchr+0x80>
100096ec:	20c00003 	ldbu	r3,0(r4)
100096f0:	10bfffc4 	addi	r2,r2,-1
100096f4:	19801426 	beq	r3,r6,10009748 <memchr+0x88>
100096f8:	21000044 	addi	r4,r4,1
100096fc:	20c000cc 	andi	r3,r4,3
10009700:	183ff91e 	bne	r3,zero,100096e8 <__alt_data_end+0xf80096e8>
10009704:	024000c4 	movi	r9,3
10009708:	48801136 	bltu	r9,r2,10009750 <memchr+0x90>
1000970c:	10000c26 	beq	r2,zero,10009740 <memchr+0x80>
10009710:	20c00003 	ldbu	r3,0(r4)
10009714:	29403fcc 	andi	r5,r5,255
10009718:	19400b26 	beq	r3,r5,10009748 <memchr+0x88>
1000971c:	20c00044 	addi	r3,r4,1
10009720:	2085883a 	add	r2,r4,r2
10009724:	39803fcc 	andi	r6,r7,255
10009728:	00000306 	br	10009738 <memchr+0x78>
1000972c:	18c00044 	addi	r3,r3,1
10009730:	197fffc3 	ldbu	r5,-1(r3)
10009734:	29800426 	beq	r5,r6,10009748 <memchr+0x88>
10009738:	1809883a 	mov	r4,r3
1000973c:	18bffb1e 	bne	r3,r2,1000972c <__alt_data_end+0xf800972c>
10009740:	0005883a 	mov	r2,zero
10009744:	f800283a 	ret
10009748:	2005883a 	mov	r2,r4
1000974c:	f800283a 	ret
10009750:	28c03fcc 	andi	r3,r5,255
10009754:	1810923a 	slli	r8,r3,8
10009758:	02ffbff4 	movhi	r11,65279
1000975c:	02a02074 	movhi	r10,32897
10009760:	40c6b03a 	or	r3,r8,r3
10009764:	1810943a 	slli	r8,r3,16
10009768:	5affbfc4 	addi	r11,r11,-257
1000976c:	52a02004 	addi	r10,r10,-32640
10009770:	40d0b03a 	or	r8,r8,r3
10009774:	20c00017 	ldw	r3,0(r4)
10009778:	40c6f03a 	xor	r3,r8,r3
1000977c:	1acd883a 	add	r6,r3,r11
10009780:	00c6303a 	nor	r3,zero,r3
10009784:	30c6703a 	and	r3,r6,r3
10009788:	1a86703a 	and	r3,r3,r10
1000978c:	183fdf1e 	bne	r3,zero,1000970c <__alt_data_end+0xf800970c>
10009790:	10bfff04 	addi	r2,r2,-4
10009794:	21000104 	addi	r4,r4,4
10009798:	48bff636 	bltu	r9,r2,10009774 <__alt_data_end+0xf8009774>
1000979c:	003fdb06 	br	1000970c <__alt_data_end+0xf800970c>
100097a0:	3005883a 	mov	r2,r6
100097a4:	003fd706 	br	10009704 <__alt_data_end+0xf8009704>

100097a8 <memcpy>:
100097a8:	deffff04 	addi	sp,sp,-4
100097ac:	dc000015 	stw	r16,0(sp)
100097b0:	00c003c4 	movi	r3,15
100097b4:	2005883a 	mov	r2,r4
100097b8:	1980432e 	bgeu	r3,r6,100098c8 <memcpy+0x120>
100097bc:	2146b03a 	or	r3,r4,r5
100097c0:	18c000cc 	andi	r3,r3,3
100097c4:	1800421e 	bne	r3,zero,100098d0 <memcpy+0x128>
100097c8:	343ffc04 	addi	r16,r6,-16
100097cc:	8020d13a 	srli	r16,r16,4
100097d0:	28c00104 	addi	r3,r5,4
100097d4:	23400104 	addi	r13,r4,4
100097d8:	801e913a 	slli	r15,r16,4
100097dc:	2b000204 	addi	r12,r5,8
100097e0:	22c00204 	addi	r11,r4,8
100097e4:	7bc00504 	addi	r15,r15,20
100097e8:	2a800304 	addi	r10,r5,12
100097ec:	22400304 	addi	r9,r4,12
100097f0:	2bdf883a 	add	r15,r5,r15
100097f4:	2811883a 	mov	r8,r5
100097f8:	200f883a 	mov	r7,r4
100097fc:	41000017 	ldw	r4,0(r8)
10009800:	39c00404 	addi	r7,r7,16
10009804:	18c00404 	addi	r3,r3,16
10009808:	393ffc15 	stw	r4,-16(r7)
1000980c:	1bbffc17 	ldw	r14,-16(r3)
10009810:	6b400404 	addi	r13,r13,16
10009814:	5ac00404 	addi	r11,r11,16
10009818:	6bbffc15 	stw	r14,-16(r13)
1000981c:	63800017 	ldw	r14,0(r12)
10009820:	4a400404 	addi	r9,r9,16
10009824:	42000404 	addi	r8,r8,16
10009828:	5bbffc15 	stw	r14,-16(r11)
1000982c:	53800017 	ldw	r14,0(r10)
10009830:	63000404 	addi	r12,r12,16
10009834:	52800404 	addi	r10,r10,16
10009838:	4bbffc15 	stw	r14,-16(r9)
1000983c:	1bffef1e 	bne	r3,r15,100097fc <__alt_data_end+0xf80097fc>
10009840:	81c00044 	addi	r7,r16,1
10009844:	380e913a 	slli	r7,r7,4
10009848:	310003cc 	andi	r4,r6,15
1000984c:	02c000c4 	movi	r11,3
10009850:	11c7883a 	add	r3,r2,r7
10009854:	29cb883a 	add	r5,r5,r7
10009858:	59001f2e 	bgeu	r11,r4,100098d8 <memcpy+0x130>
1000985c:	1813883a 	mov	r9,r3
10009860:	2811883a 	mov	r8,r5
10009864:	200f883a 	mov	r7,r4
10009868:	42800017 	ldw	r10,0(r8)
1000986c:	4a400104 	addi	r9,r9,4
10009870:	39ffff04 	addi	r7,r7,-4
10009874:	4abfff15 	stw	r10,-4(r9)
10009878:	42000104 	addi	r8,r8,4
1000987c:	59fffa36 	bltu	r11,r7,10009868 <__alt_data_end+0xf8009868>
10009880:	213fff04 	addi	r4,r4,-4
10009884:	2008d0ba 	srli	r4,r4,2
10009888:	318000cc 	andi	r6,r6,3
1000988c:	21000044 	addi	r4,r4,1
10009890:	2109883a 	add	r4,r4,r4
10009894:	2109883a 	add	r4,r4,r4
10009898:	1907883a 	add	r3,r3,r4
1000989c:	290b883a 	add	r5,r5,r4
100098a0:	30000626 	beq	r6,zero,100098bc <memcpy+0x114>
100098a4:	198d883a 	add	r6,r3,r6
100098a8:	29c00003 	ldbu	r7,0(r5)
100098ac:	18c00044 	addi	r3,r3,1
100098b0:	29400044 	addi	r5,r5,1
100098b4:	19ffffc5 	stb	r7,-1(r3)
100098b8:	19bffb1e 	bne	r3,r6,100098a8 <__alt_data_end+0xf80098a8>
100098bc:	dc000017 	ldw	r16,0(sp)
100098c0:	dec00104 	addi	sp,sp,4
100098c4:	f800283a 	ret
100098c8:	2007883a 	mov	r3,r4
100098cc:	003ff406 	br	100098a0 <__alt_data_end+0xf80098a0>
100098d0:	2007883a 	mov	r3,r4
100098d4:	003ff306 	br	100098a4 <__alt_data_end+0xf80098a4>
100098d8:	200d883a 	mov	r6,r4
100098dc:	003ff006 	br	100098a0 <__alt_data_end+0xf80098a0>

100098e0 <memmove>:
100098e0:	2005883a 	mov	r2,r4
100098e4:	29000b2e 	bgeu	r5,r4,10009914 <memmove+0x34>
100098e8:	298f883a 	add	r7,r5,r6
100098ec:	21c0092e 	bgeu	r4,r7,10009914 <memmove+0x34>
100098f0:	2187883a 	add	r3,r4,r6
100098f4:	198bc83a 	sub	r5,r3,r6
100098f8:	30004b26 	beq	r6,zero,10009a28 <memmove+0x148>
100098fc:	39ffffc4 	addi	r7,r7,-1
10009900:	39000003 	ldbu	r4,0(r7)
10009904:	18ffffc4 	addi	r3,r3,-1
10009908:	19000005 	stb	r4,0(r3)
1000990c:	197ffb1e 	bne	r3,r5,100098fc <__alt_data_end+0xf80098fc>
10009910:	f800283a 	ret
10009914:	00c003c4 	movi	r3,15
10009918:	1980412e 	bgeu	r3,r6,10009a20 <memmove+0x140>
1000991c:	1146b03a 	or	r3,r2,r5
10009920:	18c000cc 	andi	r3,r3,3
10009924:	1800411e 	bne	r3,zero,10009a2c <memmove+0x14c>
10009928:	33fffc04 	addi	r15,r6,-16
1000992c:	781ed13a 	srli	r15,r15,4
10009930:	28c00104 	addi	r3,r5,4
10009934:	13400104 	addi	r13,r2,4
10009938:	781c913a 	slli	r14,r15,4
1000993c:	2b000204 	addi	r12,r5,8
10009940:	12c00204 	addi	r11,r2,8
10009944:	73800504 	addi	r14,r14,20
10009948:	2a800304 	addi	r10,r5,12
1000994c:	12400304 	addi	r9,r2,12
10009950:	2b9d883a 	add	r14,r5,r14
10009954:	2811883a 	mov	r8,r5
10009958:	100f883a 	mov	r7,r2
1000995c:	41000017 	ldw	r4,0(r8)
10009960:	39c00404 	addi	r7,r7,16
10009964:	18c00404 	addi	r3,r3,16
10009968:	393ffc15 	stw	r4,-16(r7)
1000996c:	193ffc17 	ldw	r4,-16(r3)
10009970:	6b400404 	addi	r13,r13,16
10009974:	5ac00404 	addi	r11,r11,16
10009978:	693ffc15 	stw	r4,-16(r13)
1000997c:	61000017 	ldw	r4,0(r12)
10009980:	4a400404 	addi	r9,r9,16
10009984:	42000404 	addi	r8,r8,16
10009988:	593ffc15 	stw	r4,-16(r11)
1000998c:	51000017 	ldw	r4,0(r10)
10009990:	63000404 	addi	r12,r12,16
10009994:	52800404 	addi	r10,r10,16
10009998:	493ffc15 	stw	r4,-16(r9)
1000999c:	1bbfef1e 	bne	r3,r14,1000995c <__alt_data_end+0xf800995c>
100099a0:	79000044 	addi	r4,r15,1
100099a4:	2008913a 	slli	r4,r4,4
100099a8:	328003cc 	andi	r10,r6,15
100099ac:	02c000c4 	movi	r11,3
100099b0:	1107883a 	add	r3,r2,r4
100099b4:	290b883a 	add	r5,r5,r4
100099b8:	5a801e2e 	bgeu	r11,r10,10009a34 <memmove+0x154>
100099bc:	1813883a 	mov	r9,r3
100099c0:	2811883a 	mov	r8,r5
100099c4:	500f883a 	mov	r7,r10
100099c8:	41000017 	ldw	r4,0(r8)
100099cc:	4a400104 	addi	r9,r9,4
100099d0:	39ffff04 	addi	r7,r7,-4
100099d4:	493fff15 	stw	r4,-4(r9)
100099d8:	42000104 	addi	r8,r8,4
100099dc:	59fffa36 	bltu	r11,r7,100099c8 <__alt_data_end+0xf80099c8>
100099e0:	513fff04 	addi	r4,r10,-4
100099e4:	2008d0ba 	srli	r4,r4,2
100099e8:	318000cc 	andi	r6,r6,3
100099ec:	21000044 	addi	r4,r4,1
100099f0:	2109883a 	add	r4,r4,r4
100099f4:	2109883a 	add	r4,r4,r4
100099f8:	1907883a 	add	r3,r3,r4
100099fc:	290b883a 	add	r5,r5,r4
10009a00:	30000926 	beq	r6,zero,10009a28 <memmove+0x148>
10009a04:	198d883a 	add	r6,r3,r6
10009a08:	29c00003 	ldbu	r7,0(r5)
10009a0c:	18c00044 	addi	r3,r3,1
10009a10:	29400044 	addi	r5,r5,1
10009a14:	19ffffc5 	stb	r7,-1(r3)
10009a18:	19bffb1e 	bne	r3,r6,10009a08 <__alt_data_end+0xf8009a08>
10009a1c:	f800283a 	ret
10009a20:	1007883a 	mov	r3,r2
10009a24:	003ff606 	br	10009a00 <__alt_data_end+0xf8009a00>
10009a28:	f800283a 	ret
10009a2c:	1007883a 	mov	r3,r2
10009a30:	003ff406 	br	10009a04 <__alt_data_end+0xf8009a04>
10009a34:	500d883a 	mov	r6,r10
10009a38:	003ff106 	br	10009a00 <__alt_data_end+0xf8009a00>

10009a3c <memset>:
10009a3c:	20c000cc 	andi	r3,r4,3
10009a40:	2005883a 	mov	r2,r4
10009a44:	18004326 	beq	r3,zero,10009b54 <memset+0x118>
10009a48:	31ffffc4 	addi	r7,r6,-1
10009a4c:	30004026 	beq	r6,zero,10009b50 <memset+0x114>
10009a50:	2813883a 	mov	r9,r5
10009a54:	200d883a 	mov	r6,r4
10009a58:	2007883a 	mov	r3,r4
10009a5c:	00000406 	br	10009a70 <memset+0x34>
10009a60:	3a3fffc4 	addi	r8,r7,-1
10009a64:	31800044 	addi	r6,r6,1
10009a68:	38003926 	beq	r7,zero,10009b50 <memset+0x114>
10009a6c:	400f883a 	mov	r7,r8
10009a70:	18c00044 	addi	r3,r3,1
10009a74:	32400005 	stb	r9,0(r6)
10009a78:	1a0000cc 	andi	r8,r3,3
10009a7c:	403ff81e 	bne	r8,zero,10009a60 <__alt_data_end+0xf8009a60>
10009a80:	010000c4 	movi	r4,3
10009a84:	21c02d2e 	bgeu	r4,r7,10009b3c <memset+0x100>
10009a88:	29803fcc 	andi	r6,r5,255
10009a8c:	3008923a 	slli	r4,r6,8
10009a90:	218cb03a 	or	r6,r4,r6
10009a94:	3008943a 	slli	r4,r6,16
10009a98:	218cb03a 	or	r6,r4,r6
10009a9c:	010003c4 	movi	r4,15
10009aa0:	21c0182e 	bgeu	r4,r7,10009b04 <memset+0xc8>
10009aa4:	3b3ffc04 	addi	r12,r7,-16
10009aa8:	6018d13a 	srli	r12,r12,4
10009aac:	1a000104 	addi	r8,r3,4
10009ab0:	1ac00204 	addi	r11,r3,8
10009ab4:	6008913a 	slli	r4,r12,4
10009ab8:	1a800304 	addi	r10,r3,12
10009abc:	1813883a 	mov	r9,r3
10009ac0:	21000504 	addi	r4,r4,20
10009ac4:	1909883a 	add	r4,r3,r4
10009ac8:	49800015 	stw	r6,0(r9)
10009acc:	41800015 	stw	r6,0(r8)
10009ad0:	59800015 	stw	r6,0(r11)
10009ad4:	51800015 	stw	r6,0(r10)
10009ad8:	42000404 	addi	r8,r8,16
10009adc:	4a400404 	addi	r9,r9,16
10009ae0:	5ac00404 	addi	r11,r11,16
10009ae4:	52800404 	addi	r10,r10,16
10009ae8:	413ff71e 	bne	r8,r4,10009ac8 <__alt_data_end+0xf8009ac8>
10009aec:	63000044 	addi	r12,r12,1
10009af0:	6018913a 	slli	r12,r12,4
10009af4:	39c003cc 	andi	r7,r7,15
10009af8:	010000c4 	movi	r4,3
10009afc:	1b07883a 	add	r3,r3,r12
10009b00:	21c00e2e 	bgeu	r4,r7,10009b3c <memset+0x100>
10009b04:	1813883a 	mov	r9,r3
10009b08:	3811883a 	mov	r8,r7
10009b0c:	010000c4 	movi	r4,3
10009b10:	49800015 	stw	r6,0(r9)
10009b14:	423fff04 	addi	r8,r8,-4
10009b18:	4a400104 	addi	r9,r9,4
10009b1c:	223ffc36 	bltu	r4,r8,10009b10 <__alt_data_end+0xf8009b10>
10009b20:	393fff04 	addi	r4,r7,-4
10009b24:	2008d0ba 	srli	r4,r4,2
10009b28:	39c000cc 	andi	r7,r7,3
10009b2c:	21000044 	addi	r4,r4,1
10009b30:	2109883a 	add	r4,r4,r4
10009b34:	2109883a 	add	r4,r4,r4
10009b38:	1907883a 	add	r3,r3,r4
10009b3c:	38000426 	beq	r7,zero,10009b50 <memset+0x114>
10009b40:	19cf883a 	add	r7,r3,r7
10009b44:	19400005 	stb	r5,0(r3)
10009b48:	18c00044 	addi	r3,r3,1
10009b4c:	19fffd1e 	bne	r3,r7,10009b44 <__alt_data_end+0xf8009b44>
10009b50:	f800283a 	ret
10009b54:	2007883a 	mov	r3,r4
10009b58:	300f883a 	mov	r7,r6
10009b5c:	003fc806 	br	10009a80 <__alt_data_end+0xf8009a80>

10009b60 <_Balloc>:
10009b60:	20801317 	ldw	r2,76(r4)
10009b64:	defffc04 	addi	sp,sp,-16
10009b68:	dc400115 	stw	r17,4(sp)
10009b6c:	dc000015 	stw	r16,0(sp)
10009b70:	dfc00315 	stw	ra,12(sp)
10009b74:	dc800215 	stw	r18,8(sp)
10009b78:	2023883a 	mov	r17,r4
10009b7c:	2821883a 	mov	r16,r5
10009b80:	10000f26 	beq	r2,zero,10009bc0 <_Balloc+0x60>
10009b84:	8407883a 	add	r3,r16,r16
10009b88:	18c7883a 	add	r3,r3,r3
10009b8c:	10c7883a 	add	r3,r2,r3
10009b90:	18800017 	ldw	r2,0(r3)
10009b94:	10001126 	beq	r2,zero,10009bdc <_Balloc+0x7c>
10009b98:	11000017 	ldw	r4,0(r2)
10009b9c:	19000015 	stw	r4,0(r3)
10009ba0:	10000415 	stw	zero,16(r2)
10009ba4:	10000315 	stw	zero,12(r2)
10009ba8:	dfc00317 	ldw	ra,12(sp)
10009bac:	dc800217 	ldw	r18,8(sp)
10009bb0:	dc400117 	ldw	r17,4(sp)
10009bb4:	dc000017 	ldw	r16,0(sp)
10009bb8:	dec00404 	addi	sp,sp,16
10009bbc:	f800283a 	ret
10009bc0:	01400104 	movi	r5,4
10009bc4:	01800844 	movi	r6,33
10009bc8:	000c9fc0 	call	1000c9fc <_calloc_r>
10009bcc:	88801315 	stw	r2,76(r17)
10009bd0:	103fec1e 	bne	r2,zero,10009b84 <__alt_data_end+0xf8009b84>
10009bd4:	0005883a 	mov	r2,zero
10009bd8:	003ff306 	br	10009ba8 <__alt_data_end+0xf8009ba8>
10009bdc:	01400044 	movi	r5,1
10009be0:	2c24983a 	sll	r18,r5,r16
10009be4:	8809883a 	mov	r4,r17
10009be8:	91800144 	addi	r6,r18,5
10009bec:	318d883a 	add	r6,r6,r6
10009bf0:	318d883a 	add	r6,r6,r6
10009bf4:	000c9fc0 	call	1000c9fc <_calloc_r>
10009bf8:	103ff626 	beq	r2,zero,10009bd4 <__alt_data_end+0xf8009bd4>
10009bfc:	14000115 	stw	r16,4(r2)
10009c00:	14800215 	stw	r18,8(r2)
10009c04:	003fe606 	br	10009ba0 <__alt_data_end+0xf8009ba0>

10009c08 <_Bfree>:
10009c08:	28000826 	beq	r5,zero,10009c2c <_Bfree+0x24>
10009c0c:	28c00117 	ldw	r3,4(r5)
10009c10:	20801317 	ldw	r2,76(r4)
10009c14:	18c7883a 	add	r3,r3,r3
10009c18:	18c7883a 	add	r3,r3,r3
10009c1c:	10c5883a 	add	r2,r2,r3
10009c20:	10c00017 	ldw	r3,0(r2)
10009c24:	28c00015 	stw	r3,0(r5)
10009c28:	11400015 	stw	r5,0(r2)
10009c2c:	f800283a 	ret

10009c30 <__multadd>:
10009c30:	defff704 	addi	sp,sp,-36
10009c34:	dc800215 	stw	r18,8(sp)
10009c38:	2c800417 	ldw	r18,16(r5)
10009c3c:	ddc00715 	stw	r23,28(sp)
10009c40:	dd800615 	stw	r22,24(sp)
10009c44:	dd000415 	stw	r20,16(sp)
10009c48:	dcc00315 	stw	r19,12(sp)
10009c4c:	dc400115 	stw	r17,4(sp)
10009c50:	dc000015 	stw	r16,0(sp)
10009c54:	dfc00815 	stw	ra,32(sp)
10009c58:	dd400515 	stw	r21,20(sp)
10009c5c:	2827883a 	mov	r19,r5
10009c60:	2029883a 	mov	r20,r4
10009c64:	3023883a 	mov	r17,r6
10009c68:	3821883a 	mov	r16,r7
10009c6c:	2d800504 	addi	r22,r5,20
10009c70:	002f883a 	mov	r23,zero
10009c74:	b5400017 	ldw	r21,0(r22)
10009c78:	880b883a 	mov	r5,r17
10009c7c:	bdc00044 	addi	r23,r23,1
10009c80:	a93fffcc 	andi	r4,r21,65535
10009c84:	0002b140 	call	10002b14 <__mulsi3>
10009c88:	1421883a 	add	r16,r2,r16
10009c8c:	a808d43a 	srli	r4,r21,16
10009c90:	802ad43a 	srli	r21,r16,16
10009c94:	880b883a 	mov	r5,r17
10009c98:	0002b140 	call	10002b14 <__mulsi3>
10009c9c:	a88f883a 	add	r7,r21,r2
10009ca0:	3804943a 	slli	r2,r7,16
10009ca4:	80ffffcc 	andi	r3,r16,65535
10009ca8:	b5800104 	addi	r22,r22,4
10009cac:	10c7883a 	add	r3,r2,r3
10009cb0:	b0ffff15 	stw	r3,-4(r22)
10009cb4:	3820d43a 	srli	r16,r7,16
10009cb8:	bcbfee16 	blt	r23,r18,10009c74 <__alt_data_end+0xf8009c74>
10009cbc:	80000926 	beq	r16,zero,10009ce4 <__multadd+0xb4>
10009cc0:	98800217 	ldw	r2,8(r19)
10009cc4:	9080130e 	bge	r18,r2,10009d14 <__multadd+0xe4>
10009cc8:	90800144 	addi	r2,r18,5
10009ccc:	1085883a 	add	r2,r2,r2
10009cd0:	1085883a 	add	r2,r2,r2
10009cd4:	9885883a 	add	r2,r19,r2
10009cd8:	14000015 	stw	r16,0(r2)
10009cdc:	94800044 	addi	r18,r18,1
10009ce0:	9c800415 	stw	r18,16(r19)
10009ce4:	9805883a 	mov	r2,r19
10009ce8:	dfc00817 	ldw	ra,32(sp)
10009cec:	ddc00717 	ldw	r23,28(sp)
10009cf0:	dd800617 	ldw	r22,24(sp)
10009cf4:	dd400517 	ldw	r21,20(sp)
10009cf8:	dd000417 	ldw	r20,16(sp)
10009cfc:	dcc00317 	ldw	r19,12(sp)
10009d00:	dc800217 	ldw	r18,8(sp)
10009d04:	dc400117 	ldw	r17,4(sp)
10009d08:	dc000017 	ldw	r16,0(sp)
10009d0c:	dec00904 	addi	sp,sp,36
10009d10:	f800283a 	ret
10009d14:	99400117 	ldw	r5,4(r19)
10009d18:	a009883a 	mov	r4,r20
10009d1c:	29400044 	addi	r5,r5,1
10009d20:	0009b600 	call	10009b60 <_Balloc>
10009d24:	99800417 	ldw	r6,16(r19)
10009d28:	99400304 	addi	r5,r19,12
10009d2c:	11000304 	addi	r4,r2,12
10009d30:	31800084 	addi	r6,r6,2
10009d34:	318d883a 	add	r6,r6,r6
10009d38:	318d883a 	add	r6,r6,r6
10009d3c:	1023883a 	mov	r17,r2
10009d40:	00097a80 	call	100097a8 <memcpy>
10009d44:	99000117 	ldw	r4,4(r19)
10009d48:	a0c01317 	ldw	r3,76(r20)
10009d4c:	2109883a 	add	r4,r4,r4
10009d50:	2109883a 	add	r4,r4,r4
10009d54:	1907883a 	add	r3,r3,r4
10009d58:	18800017 	ldw	r2,0(r3)
10009d5c:	98800015 	stw	r2,0(r19)
10009d60:	1cc00015 	stw	r19,0(r3)
10009d64:	8827883a 	mov	r19,r17
10009d68:	003fd706 	br	10009cc8 <__alt_data_end+0xf8009cc8>

10009d6c <__s2b>:
10009d6c:	defff904 	addi	sp,sp,-28
10009d70:	dc400115 	stw	r17,4(sp)
10009d74:	dc000015 	stw	r16,0(sp)
10009d78:	2023883a 	mov	r17,r4
10009d7c:	2821883a 	mov	r16,r5
10009d80:	39000204 	addi	r4,r7,8
10009d84:	01400244 	movi	r5,9
10009d88:	dcc00315 	stw	r19,12(sp)
10009d8c:	dc800215 	stw	r18,8(sp)
10009d90:	dfc00615 	stw	ra,24(sp)
10009d94:	dd400515 	stw	r21,20(sp)
10009d98:	dd000415 	stw	r20,16(sp)
10009d9c:	3825883a 	mov	r18,r7
10009da0:	3027883a 	mov	r19,r6
10009da4:	0002a540 	call	10002a54 <__divsi3>
10009da8:	00c00044 	movi	r3,1
10009dac:	000b883a 	mov	r5,zero
10009db0:	1880030e 	bge	r3,r2,10009dc0 <__s2b+0x54>
10009db4:	18c7883a 	add	r3,r3,r3
10009db8:	29400044 	addi	r5,r5,1
10009dbc:	18bffd16 	blt	r3,r2,10009db4 <__alt_data_end+0xf8009db4>
10009dc0:	8809883a 	mov	r4,r17
10009dc4:	0009b600 	call	10009b60 <_Balloc>
10009dc8:	d8c00717 	ldw	r3,28(sp)
10009dcc:	10c00515 	stw	r3,20(r2)
10009dd0:	00c00044 	movi	r3,1
10009dd4:	10c00415 	stw	r3,16(r2)
10009dd8:	00c00244 	movi	r3,9
10009ddc:	1cc0210e 	bge	r3,r19,10009e64 <__s2b+0xf8>
10009de0:	80eb883a 	add	r21,r16,r3
10009de4:	a829883a 	mov	r20,r21
10009de8:	84e1883a 	add	r16,r16,r19
10009dec:	a1c00007 	ldb	r7,0(r20)
10009df0:	8809883a 	mov	r4,r17
10009df4:	a5000044 	addi	r20,r20,1
10009df8:	100b883a 	mov	r5,r2
10009dfc:	01800284 	movi	r6,10
10009e00:	39fff404 	addi	r7,r7,-48
10009e04:	0009c300 	call	10009c30 <__multadd>
10009e08:	a43ff81e 	bne	r20,r16,10009dec <__alt_data_end+0xf8009dec>
10009e0c:	ace1883a 	add	r16,r21,r19
10009e10:	843ffe04 	addi	r16,r16,-8
10009e14:	9c800a0e 	bge	r19,r18,10009e40 <__s2b+0xd4>
10009e18:	94e5c83a 	sub	r18,r18,r19
10009e1c:	84a5883a 	add	r18,r16,r18
10009e20:	81c00007 	ldb	r7,0(r16)
10009e24:	8809883a 	mov	r4,r17
10009e28:	84000044 	addi	r16,r16,1
10009e2c:	100b883a 	mov	r5,r2
10009e30:	01800284 	movi	r6,10
10009e34:	39fff404 	addi	r7,r7,-48
10009e38:	0009c300 	call	10009c30 <__multadd>
10009e3c:	84bff81e 	bne	r16,r18,10009e20 <__alt_data_end+0xf8009e20>
10009e40:	dfc00617 	ldw	ra,24(sp)
10009e44:	dd400517 	ldw	r21,20(sp)
10009e48:	dd000417 	ldw	r20,16(sp)
10009e4c:	dcc00317 	ldw	r19,12(sp)
10009e50:	dc800217 	ldw	r18,8(sp)
10009e54:	dc400117 	ldw	r17,4(sp)
10009e58:	dc000017 	ldw	r16,0(sp)
10009e5c:	dec00704 	addi	sp,sp,28
10009e60:	f800283a 	ret
10009e64:	84000284 	addi	r16,r16,10
10009e68:	1827883a 	mov	r19,r3
10009e6c:	003fe906 	br	10009e14 <__alt_data_end+0xf8009e14>

10009e70 <__hi0bits>:
10009e70:	20bfffec 	andhi	r2,r4,65535
10009e74:	1000141e 	bne	r2,zero,10009ec8 <__hi0bits+0x58>
10009e78:	2008943a 	slli	r4,r4,16
10009e7c:	00800404 	movi	r2,16
10009e80:	20ffc02c 	andhi	r3,r4,65280
10009e84:	1800021e 	bne	r3,zero,10009e90 <__hi0bits+0x20>
10009e88:	2008923a 	slli	r4,r4,8
10009e8c:	10800204 	addi	r2,r2,8
10009e90:	20fc002c 	andhi	r3,r4,61440
10009e94:	1800021e 	bne	r3,zero,10009ea0 <__hi0bits+0x30>
10009e98:	2008913a 	slli	r4,r4,4
10009e9c:	10800104 	addi	r2,r2,4
10009ea0:	20f0002c 	andhi	r3,r4,49152
10009ea4:	1800031e 	bne	r3,zero,10009eb4 <__hi0bits+0x44>
10009ea8:	2109883a 	add	r4,r4,r4
10009eac:	10800084 	addi	r2,r2,2
10009eb0:	2109883a 	add	r4,r4,r4
10009eb4:	20000316 	blt	r4,zero,10009ec4 <__hi0bits+0x54>
10009eb8:	2110002c 	andhi	r4,r4,16384
10009ebc:	2000041e 	bne	r4,zero,10009ed0 <__hi0bits+0x60>
10009ec0:	00800804 	movi	r2,32
10009ec4:	f800283a 	ret
10009ec8:	0005883a 	mov	r2,zero
10009ecc:	003fec06 	br	10009e80 <__alt_data_end+0xf8009e80>
10009ed0:	10800044 	addi	r2,r2,1
10009ed4:	f800283a 	ret

10009ed8 <__lo0bits>:
10009ed8:	20c00017 	ldw	r3,0(r4)
10009edc:	188001cc 	andi	r2,r3,7
10009ee0:	10000826 	beq	r2,zero,10009f04 <__lo0bits+0x2c>
10009ee4:	1880004c 	andi	r2,r3,1
10009ee8:	1000211e 	bne	r2,zero,10009f70 <__lo0bits+0x98>
10009eec:	1880008c 	andi	r2,r3,2
10009ef0:	1000211e 	bne	r2,zero,10009f78 <__lo0bits+0xa0>
10009ef4:	1806d0ba 	srli	r3,r3,2
10009ef8:	00800084 	movi	r2,2
10009efc:	20c00015 	stw	r3,0(r4)
10009f00:	f800283a 	ret
10009f04:	18bfffcc 	andi	r2,r3,65535
10009f08:	10001326 	beq	r2,zero,10009f58 <__lo0bits+0x80>
10009f0c:	0005883a 	mov	r2,zero
10009f10:	19403fcc 	andi	r5,r3,255
10009f14:	2800021e 	bne	r5,zero,10009f20 <__lo0bits+0x48>
10009f18:	1806d23a 	srli	r3,r3,8
10009f1c:	10800204 	addi	r2,r2,8
10009f20:	194003cc 	andi	r5,r3,15
10009f24:	2800021e 	bne	r5,zero,10009f30 <__lo0bits+0x58>
10009f28:	1806d13a 	srli	r3,r3,4
10009f2c:	10800104 	addi	r2,r2,4
10009f30:	194000cc 	andi	r5,r3,3
10009f34:	2800021e 	bne	r5,zero,10009f40 <__lo0bits+0x68>
10009f38:	1806d0ba 	srli	r3,r3,2
10009f3c:	10800084 	addi	r2,r2,2
10009f40:	1940004c 	andi	r5,r3,1
10009f44:	2800081e 	bne	r5,zero,10009f68 <__lo0bits+0x90>
10009f48:	1806d07a 	srli	r3,r3,1
10009f4c:	1800051e 	bne	r3,zero,10009f64 <__lo0bits+0x8c>
10009f50:	00800804 	movi	r2,32
10009f54:	f800283a 	ret
10009f58:	1806d43a 	srli	r3,r3,16
10009f5c:	00800404 	movi	r2,16
10009f60:	003feb06 	br	10009f10 <__alt_data_end+0xf8009f10>
10009f64:	10800044 	addi	r2,r2,1
10009f68:	20c00015 	stw	r3,0(r4)
10009f6c:	f800283a 	ret
10009f70:	0005883a 	mov	r2,zero
10009f74:	f800283a 	ret
10009f78:	1806d07a 	srli	r3,r3,1
10009f7c:	00800044 	movi	r2,1
10009f80:	20c00015 	stw	r3,0(r4)
10009f84:	f800283a 	ret

10009f88 <__i2b>:
10009f88:	defffd04 	addi	sp,sp,-12
10009f8c:	dc000015 	stw	r16,0(sp)
10009f90:	04000044 	movi	r16,1
10009f94:	dc400115 	stw	r17,4(sp)
10009f98:	2823883a 	mov	r17,r5
10009f9c:	800b883a 	mov	r5,r16
10009fa0:	dfc00215 	stw	ra,8(sp)
10009fa4:	0009b600 	call	10009b60 <_Balloc>
10009fa8:	14400515 	stw	r17,20(r2)
10009fac:	14000415 	stw	r16,16(r2)
10009fb0:	dfc00217 	ldw	ra,8(sp)
10009fb4:	dc400117 	ldw	r17,4(sp)
10009fb8:	dc000017 	ldw	r16,0(sp)
10009fbc:	dec00304 	addi	sp,sp,12
10009fc0:	f800283a 	ret

10009fc4 <__multiply>:
10009fc4:	deffef04 	addi	sp,sp,-68
10009fc8:	dc400815 	stw	r17,32(sp)
10009fcc:	dc000715 	stw	r16,28(sp)
10009fd0:	2c400417 	ldw	r17,16(r5)
10009fd4:	34000417 	ldw	r16,16(r6)
10009fd8:	dd800d15 	stw	r22,52(sp)
10009fdc:	dc800915 	stw	r18,36(sp)
10009fe0:	dfc01015 	stw	ra,64(sp)
10009fe4:	df000f15 	stw	fp,60(sp)
10009fe8:	ddc00e15 	stw	r23,56(sp)
10009fec:	dd400c15 	stw	r21,48(sp)
10009ff0:	dd000b15 	stw	r20,44(sp)
10009ff4:	dcc00a15 	stw	r19,40(sp)
10009ff8:	2825883a 	mov	r18,r5
10009ffc:	302d883a 	mov	r22,r6
1000a000:	8c009116 	blt	r17,r16,1000a248 <__multiply+0x284>
1000a004:	8005883a 	mov	r2,r16
1000a008:	8821883a 	mov	r16,r17
1000a00c:	1023883a 	mov	r17,r2
1000a010:	90800217 	ldw	r2,8(r18)
1000a014:	8447883a 	add	r3,r16,r17
1000a018:	d8c00215 	stw	r3,8(sp)
1000a01c:	91400117 	ldw	r5,4(r18)
1000a020:	10c0010e 	bge	r2,r3,1000a028 <__multiply+0x64>
1000a024:	29400044 	addi	r5,r5,1
1000a028:	0009b600 	call	10009b60 <_Balloc>
1000a02c:	d8c00217 	ldw	r3,8(sp)
1000a030:	d8800615 	stw	r2,24(sp)
1000a034:	18eb883a 	add	r21,r3,r3
1000a038:	ad6b883a 	add	r21,r21,r21
1000a03c:	10c00504 	addi	r3,r2,20
1000a040:	1d6b883a 	add	r21,r3,r21
1000a044:	d8c00115 	stw	r3,4(sp)
1000a048:	dd400315 	stw	r21,12(sp)
1000a04c:	1805883a 	mov	r2,r3
1000a050:	1d40042e 	bgeu	r3,r21,1000a064 <__multiply+0xa0>
1000a054:	d8c00317 	ldw	r3,12(sp)
1000a058:	10000015 	stw	zero,0(r2)
1000a05c:	10800104 	addi	r2,r2,4
1000a060:	10fffc36 	bltu	r2,r3,1000a054 <__alt_data_end+0xf800a054>
1000a064:	8c63883a 	add	r17,r17,r17
1000a068:	b5800504 	addi	r22,r22,20
1000a06c:	8c63883a 	add	r17,r17,r17
1000a070:	94800504 	addi	r18,r18,20
1000a074:	8421883a 	add	r16,r16,r16
1000a078:	b463883a 	add	r17,r22,r17
1000a07c:	8421883a 	add	r16,r16,r16
1000a080:	dd800015 	stw	r22,0(sp)
1000a084:	dc800415 	stw	r18,16(sp)
1000a088:	dc400515 	stw	r17,20(sp)
1000a08c:	9429883a 	add	r20,r18,r16
1000a090:	b4404f2e 	bgeu	r22,r17,1000a1d0 <__multiply+0x20c>
1000a094:	d8c00017 	ldw	r3,0(sp)
1000a098:	1c800017 	ldw	r18,0(r3)
1000a09c:	943fffcc 	andi	r16,r18,65535
1000a0a0:	80001e26 	beq	r16,zero,1000a11c <__multiply+0x158>
1000a0a4:	dd800117 	ldw	r22,4(sp)
1000a0a8:	dd400417 	ldw	r21,16(sp)
1000a0ac:	0025883a 	mov	r18,zero
1000a0b0:	adc00017 	ldw	r23,0(r21)
1000a0b4:	b4c00017 	ldw	r19,0(r22)
1000a0b8:	800b883a 	mov	r5,r16
1000a0bc:	b93fffcc 	andi	r4,r23,65535
1000a0c0:	0002b140 	call	10002b14 <__mulsi3>
1000a0c4:	9c7fffcc 	andi	r17,r19,65535
1000a0c8:	8885883a 	add	r2,r17,r2
1000a0cc:	b808d43a 	srli	r4,r23,16
1000a0d0:	14a3883a 	add	r17,r2,r18
1000a0d4:	9826d43a 	srli	r19,r19,16
1000a0d8:	8824d43a 	srli	r18,r17,16
1000a0dc:	800b883a 	mov	r5,r16
1000a0e0:	0002b140 	call	10002b14 <__mulsi3>
1000a0e4:	9885883a 	add	r2,r19,r2
1000a0e8:	14a7883a 	add	r19,r2,r18
1000a0ec:	88ffffcc 	andi	r3,r17,65535
1000a0f0:	9822943a 	slli	r17,r19,16
1000a0f4:	ad400104 	addi	r21,r21,4
1000a0f8:	b005883a 	mov	r2,r22
1000a0fc:	88c6b03a 	or	r3,r17,r3
1000a100:	b0c00015 	stw	r3,0(r22)
1000a104:	9824d43a 	srli	r18,r19,16
1000a108:	b5800104 	addi	r22,r22,4
1000a10c:	ad3fe836 	bltu	r21,r20,1000a0b0 <__alt_data_end+0xf800a0b0>
1000a110:	d8c00017 	ldw	r3,0(sp)
1000a114:	14800115 	stw	r18,4(r2)
1000a118:	1c800017 	ldw	r18,0(r3)
1000a11c:	9024d43a 	srli	r18,r18,16
1000a120:	90002226 	beq	r18,zero,1000a1ac <__multiply+0x1e8>
1000a124:	d8c00117 	ldw	r3,4(sp)
1000a128:	dd800417 	ldw	r22,16(sp)
1000a12c:	002f883a 	mov	r23,zero
1000a130:	1f000017 	ldw	fp,0(r3)
1000a134:	1823883a 	mov	r17,r3
1000a138:	182b883a 	mov	r21,r3
1000a13c:	e021883a 	mov	r16,fp
1000a140:	00000106 	br	1000a148 <__multiply+0x184>
1000a144:	982b883a 	mov	r21,r19
1000a148:	b100000b 	ldhu	r4,0(r22)
1000a14c:	8020d43a 	srli	r16,r16,16
1000a150:	900b883a 	mov	r5,r18
1000a154:	0002b140 	call	10002b14 <__mulsi3>
1000a158:	1405883a 	add	r2,r2,r16
1000a15c:	15ef883a 	add	r23,r2,r23
1000a160:	b804943a 	slli	r2,r23,16
1000a164:	e0ffffcc 	andi	r3,fp,65535
1000a168:	8c400104 	addi	r17,r17,4
1000a16c:	10c6b03a 	or	r3,r2,r3
1000a170:	88ffff15 	stw	r3,-4(r17)
1000a174:	b5800104 	addi	r22,r22,4
1000a178:	b13fff17 	ldw	r4,-4(r22)
1000a17c:	acc00104 	addi	r19,r21,4
1000a180:	900b883a 	mov	r5,r18
1000a184:	2008d43a 	srli	r4,r4,16
1000a188:	9c000017 	ldw	r16,0(r19)
1000a18c:	0002b140 	call	10002b14 <__mulsi3>
1000a190:	b806d43a 	srli	r3,r23,16
1000a194:	813fffcc 	andi	r4,r16,65535
1000a198:	1105883a 	add	r2,r2,r4
1000a19c:	10f9883a 	add	fp,r2,r3
1000a1a0:	e02ed43a 	srli	r23,fp,16
1000a1a4:	b53fe736 	bltu	r22,r20,1000a144 <__alt_data_end+0xf800a144>
1000a1a8:	af000115 	stw	fp,4(r21)
1000a1ac:	d8c00017 	ldw	r3,0(sp)
1000a1b0:	d9000517 	ldw	r4,20(sp)
1000a1b4:	18c00104 	addi	r3,r3,4
1000a1b8:	d8c00015 	stw	r3,0(sp)
1000a1bc:	d8c00117 	ldw	r3,4(sp)
1000a1c0:	18c00104 	addi	r3,r3,4
1000a1c4:	d8c00115 	stw	r3,4(sp)
1000a1c8:	d8c00017 	ldw	r3,0(sp)
1000a1cc:	193fb136 	bltu	r3,r4,1000a094 <__alt_data_end+0xf800a094>
1000a1d0:	d8c00217 	ldw	r3,8(sp)
1000a1d4:	00c00c0e 	bge	zero,r3,1000a208 <__multiply+0x244>
1000a1d8:	d8c00317 	ldw	r3,12(sp)
1000a1dc:	18bfff17 	ldw	r2,-4(r3)
1000a1e0:	1d7fff04 	addi	r21,r3,-4
1000a1e4:	10000326 	beq	r2,zero,1000a1f4 <__multiply+0x230>
1000a1e8:	00000706 	br	1000a208 <__multiply+0x244>
1000a1ec:	a8800017 	ldw	r2,0(r21)
1000a1f0:	1000051e 	bne	r2,zero,1000a208 <__multiply+0x244>
1000a1f4:	d8c00217 	ldw	r3,8(sp)
1000a1f8:	ad7fff04 	addi	r21,r21,-4
1000a1fc:	18ffffc4 	addi	r3,r3,-1
1000a200:	d8c00215 	stw	r3,8(sp)
1000a204:	183ff91e 	bne	r3,zero,1000a1ec <__alt_data_end+0xf800a1ec>
1000a208:	d8c00617 	ldw	r3,24(sp)
1000a20c:	d9000217 	ldw	r4,8(sp)
1000a210:	1805883a 	mov	r2,r3
1000a214:	19000415 	stw	r4,16(r3)
1000a218:	dfc01017 	ldw	ra,64(sp)
1000a21c:	df000f17 	ldw	fp,60(sp)
1000a220:	ddc00e17 	ldw	r23,56(sp)
1000a224:	dd800d17 	ldw	r22,52(sp)
1000a228:	dd400c17 	ldw	r21,48(sp)
1000a22c:	dd000b17 	ldw	r20,44(sp)
1000a230:	dcc00a17 	ldw	r19,40(sp)
1000a234:	dc800917 	ldw	r18,36(sp)
1000a238:	dc400817 	ldw	r17,32(sp)
1000a23c:	dc000717 	ldw	r16,28(sp)
1000a240:	dec01104 	addi	sp,sp,68
1000a244:	f800283a 	ret
1000a248:	3025883a 	mov	r18,r6
1000a24c:	282d883a 	mov	r22,r5
1000a250:	003f6f06 	br	1000a010 <__alt_data_end+0xf800a010>

1000a254 <__pow5mult>:
1000a254:	defffa04 	addi	sp,sp,-24
1000a258:	dcc00315 	stw	r19,12(sp)
1000a25c:	dc800215 	stw	r18,8(sp)
1000a260:	dc000015 	stw	r16,0(sp)
1000a264:	dfc00515 	stw	ra,20(sp)
1000a268:	dd000415 	stw	r20,16(sp)
1000a26c:	dc400115 	stw	r17,4(sp)
1000a270:	308000cc 	andi	r2,r6,3
1000a274:	3021883a 	mov	r16,r6
1000a278:	2027883a 	mov	r19,r4
1000a27c:	2825883a 	mov	r18,r5
1000a280:	10002e1e 	bne	r2,zero,1000a33c <__pow5mult+0xe8>
1000a284:	8021d0ba 	srai	r16,r16,2
1000a288:	80001a26 	beq	r16,zero,1000a2f4 <__pow5mult+0xa0>
1000a28c:	9c401217 	ldw	r17,72(r19)
1000a290:	8800061e 	bne	r17,zero,1000a2ac <__pow5mult+0x58>
1000a294:	00003406 	br	1000a368 <__pow5mult+0x114>
1000a298:	8021d07a 	srai	r16,r16,1
1000a29c:	80001526 	beq	r16,zero,1000a2f4 <__pow5mult+0xa0>
1000a2a0:	88800017 	ldw	r2,0(r17)
1000a2a4:	10001c26 	beq	r2,zero,1000a318 <__pow5mult+0xc4>
1000a2a8:	1023883a 	mov	r17,r2
1000a2ac:	80c0004c 	andi	r3,r16,1
1000a2b0:	183ff926 	beq	r3,zero,1000a298 <__alt_data_end+0xf800a298>
1000a2b4:	900b883a 	mov	r5,r18
1000a2b8:	880d883a 	mov	r6,r17
1000a2bc:	9809883a 	mov	r4,r19
1000a2c0:	0009fc40 	call	10009fc4 <__multiply>
1000a2c4:	90001b26 	beq	r18,zero,1000a334 <__pow5mult+0xe0>
1000a2c8:	91c00117 	ldw	r7,4(r18)
1000a2cc:	98c01317 	ldw	r3,76(r19)
1000a2d0:	8021d07a 	srai	r16,r16,1
1000a2d4:	39cf883a 	add	r7,r7,r7
1000a2d8:	39cf883a 	add	r7,r7,r7
1000a2dc:	19c7883a 	add	r3,r3,r7
1000a2e0:	19000017 	ldw	r4,0(r3)
1000a2e4:	91000015 	stw	r4,0(r18)
1000a2e8:	1c800015 	stw	r18,0(r3)
1000a2ec:	1025883a 	mov	r18,r2
1000a2f0:	803feb1e 	bne	r16,zero,1000a2a0 <__alt_data_end+0xf800a2a0>
1000a2f4:	9005883a 	mov	r2,r18
1000a2f8:	dfc00517 	ldw	ra,20(sp)
1000a2fc:	dd000417 	ldw	r20,16(sp)
1000a300:	dcc00317 	ldw	r19,12(sp)
1000a304:	dc800217 	ldw	r18,8(sp)
1000a308:	dc400117 	ldw	r17,4(sp)
1000a30c:	dc000017 	ldw	r16,0(sp)
1000a310:	dec00604 	addi	sp,sp,24
1000a314:	f800283a 	ret
1000a318:	9809883a 	mov	r4,r19
1000a31c:	880b883a 	mov	r5,r17
1000a320:	880d883a 	mov	r6,r17
1000a324:	0009fc40 	call	10009fc4 <__multiply>
1000a328:	88800015 	stw	r2,0(r17)
1000a32c:	10000015 	stw	zero,0(r2)
1000a330:	003fdd06 	br	1000a2a8 <__alt_data_end+0xf800a2a8>
1000a334:	1025883a 	mov	r18,r2
1000a338:	003fd706 	br	1000a298 <__alt_data_end+0xf800a298>
1000a33c:	10bfffc4 	addi	r2,r2,-1
1000a340:	1085883a 	add	r2,r2,r2
1000a344:	00c40074 	movhi	r3,4097
1000a348:	18c48604 	addi	r3,r3,4632
1000a34c:	1085883a 	add	r2,r2,r2
1000a350:	1885883a 	add	r2,r3,r2
1000a354:	11800017 	ldw	r6,0(r2)
1000a358:	000f883a 	mov	r7,zero
1000a35c:	0009c300 	call	10009c30 <__multadd>
1000a360:	1025883a 	mov	r18,r2
1000a364:	003fc706 	br	1000a284 <__alt_data_end+0xf800a284>
1000a368:	05000044 	movi	r20,1
1000a36c:	9809883a 	mov	r4,r19
1000a370:	a00b883a 	mov	r5,r20
1000a374:	0009b600 	call	10009b60 <_Balloc>
1000a378:	1023883a 	mov	r17,r2
1000a37c:	00809c44 	movi	r2,625
1000a380:	88800515 	stw	r2,20(r17)
1000a384:	8d000415 	stw	r20,16(r17)
1000a388:	9c401215 	stw	r17,72(r19)
1000a38c:	88000015 	stw	zero,0(r17)
1000a390:	003fc606 	br	1000a2ac <__alt_data_end+0xf800a2ac>

1000a394 <__lshift>:
1000a394:	defff904 	addi	sp,sp,-28
1000a398:	dd000415 	stw	r20,16(sp)
1000a39c:	dcc00315 	stw	r19,12(sp)
1000a3a0:	3029d17a 	srai	r20,r6,5
1000a3a4:	2cc00417 	ldw	r19,16(r5)
1000a3a8:	28800217 	ldw	r2,8(r5)
1000a3ac:	dd400515 	stw	r21,20(sp)
1000a3b0:	a4e7883a 	add	r19,r20,r19
1000a3b4:	dc800215 	stw	r18,8(sp)
1000a3b8:	dc400115 	stw	r17,4(sp)
1000a3bc:	dc000015 	stw	r16,0(sp)
1000a3c0:	dfc00615 	stw	ra,24(sp)
1000a3c4:	9c000044 	addi	r16,r19,1
1000a3c8:	2823883a 	mov	r17,r5
1000a3cc:	302b883a 	mov	r21,r6
1000a3d0:	2025883a 	mov	r18,r4
1000a3d4:	29400117 	ldw	r5,4(r5)
1000a3d8:	1400030e 	bge	r2,r16,1000a3e8 <__lshift+0x54>
1000a3dc:	1085883a 	add	r2,r2,r2
1000a3e0:	29400044 	addi	r5,r5,1
1000a3e4:	143ffd16 	blt	r2,r16,1000a3dc <__alt_data_end+0xf800a3dc>
1000a3e8:	9009883a 	mov	r4,r18
1000a3ec:	0009b600 	call	10009b60 <_Balloc>
1000a3f0:	11c00504 	addi	r7,r2,20
1000a3f4:	0500090e 	bge	zero,r20,1000a41c <__lshift+0x88>
1000a3f8:	3811883a 	mov	r8,r7
1000a3fc:	0007883a 	mov	r3,zero
1000a400:	40000015 	stw	zero,0(r8)
1000a404:	18c00044 	addi	r3,r3,1
1000a408:	42000104 	addi	r8,r8,4
1000a40c:	1d3ffc1e 	bne	r3,r20,1000a400 <__alt_data_end+0xf800a400>
1000a410:	18c7883a 	add	r3,r3,r3
1000a414:	18c7883a 	add	r3,r3,r3
1000a418:	38cf883a 	add	r7,r7,r3
1000a41c:	89000417 	ldw	r4,16(r17)
1000a420:	88c00504 	addi	r3,r17,20
1000a424:	a98007cc 	andi	r6,r21,31
1000a428:	2109883a 	add	r4,r4,r4
1000a42c:	2109883a 	add	r4,r4,r4
1000a430:	1909883a 	add	r4,r3,r4
1000a434:	30002326 	beq	r6,zero,1000a4c4 <__lshift+0x130>
1000a438:	01400804 	movi	r5,32
1000a43c:	298bc83a 	sub	r5,r5,r6
1000a440:	0013883a 	mov	r9,zero
1000a444:	1a000017 	ldw	r8,0(r3)
1000a448:	3815883a 	mov	r10,r7
1000a44c:	39c00104 	addi	r7,r7,4
1000a450:	4190983a 	sll	r8,r8,r6
1000a454:	18c00104 	addi	r3,r3,4
1000a458:	4a10b03a 	or	r8,r9,r8
1000a45c:	3a3fff15 	stw	r8,-4(r7)
1000a460:	1a3fff17 	ldw	r8,-4(r3)
1000a464:	4152d83a 	srl	r9,r8,r5
1000a468:	193ff636 	bltu	r3,r4,1000a444 <__alt_data_end+0xf800a444>
1000a46c:	52400115 	stw	r9,4(r10)
1000a470:	48000126 	beq	r9,zero,1000a478 <__lshift+0xe4>
1000a474:	9c000084 	addi	r16,r19,2
1000a478:	89000117 	ldw	r4,4(r17)
1000a47c:	90c01317 	ldw	r3,76(r18)
1000a480:	843fffc4 	addi	r16,r16,-1
1000a484:	2109883a 	add	r4,r4,r4
1000a488:	2109883a 	add	r4,r4,r4
1000a48c:	1907883a 	add	r3,r3,r4
1000a490:	19000017 	ldw	r4,0(r3)
1000a494:	14000415 	stw	r16,16(r2)
1000a498:	89000015 	stw	r4,0(r17)
1000a49c:	1c400015 	stw	r17,0(r3)
1000a4a0:	dfc00617 	ldw	ra,24(sp)
1000a4a4:	dd400517 	ldw	r21,20(sp)
1000a4a8:	dd000417 	ldw	r20,16(sp)
1000a4ac:	dcc00317 	ldw	r19,12(sp)
1000a4b0:	dc800217 	ldw	r18,8(sp)
1000a4b4:	dc400117 	ldw	r17,4(sp)
1000a4b8:	dc000017 	ldw	r16,0(sp)
1000a4bc:	dec00704 	addi	sp,sp,28
1000a4c0:	f800283a 	ret
1000a4c4:	19400017 	ldw	r5,0(r3)
1000a4c8:	39c00104 	addi	r7,r7,4
1000a4cc:	18c00104 	addi	r3,r3,4
1000a4d0:	397fff15 	stw	r5,-4(r7)
1000a4d4:	193ffb36 	bltu	r3,r4,1000a4c4 <__alt_data_end+0xf800a4c4>
1000a4d8:	003fe706 	br	1000a478 <__alt_data_end+0xf800a478>

1000a4dc <__mcmp>:
1000a4dc:	20800417 	ldw	r2,16(r4)
1000a4e0:	28c00417 	ldw	r3,16(r5)
1000a4e4:	10c5c83a 	sub	r2,r2,r3
1000a4e8:	1000111e 	bne	r2,zero,1000a530 <__mcmp+0x54>
1000a4ec:	18c7883a 	add	r3,r3,r3
1000a4f0:	18c7883a 	add	r3,r3,r3
1000a4f4:	21000504 	addi	r4,r4,20
1000a4f8:	29400504 	addi	r5,r5,20
1000a4fc:	20c5883a 	add	r2,r4,r3
1000a500:	28cb883a 	add	r5,r5,r3
1000a504:	00000106 	br	1000a50c <__mcmp+0x30>
1000a508:	20800a2e 	bgeu	r4,r2,1000a534 <__mcmp+0x58>
1000a50c:	10bfff04 	addi	r2,r2,-4
1000a510:	297fff04 	addi	r5,r5,-4
1000a514:	11800017 	ldw	r6,0(r2)
1000a518:	28c00017 	ldw	r3,0(r5)
1000a51c:	30fffa26 	beq	r6,r3,1000a508 <__alt_data_end+0xf800a508>
1000a520:	30c00236 	bltu	r6,r3,1000a52c <__mcmp+0x50>
1000a524:	00800044 	movi	r2,1
1000a528:	f800283a 	ret
1000a52c:	00bfffc4 	movi	r2,-1
1000a530:	f800283a 	ret
1000a534:	0005883a 	mov	r2,zero
1000a538:	f800283a 	ret

1000a53c <__mdiff>:
1000a53c:	defffb04 	addi	sp,sp,-20
1000a540:	dc000015 	stw	r16,0(sp)
1000a544:	2821883a 	mov	r16,r5
1000a548:	dcc00315 	stw	r19,12(sp)
1000a54c:	300b883a 	mov	r5,r6
1000a550:	2027883a 	mov	r19,r4
1000a554:	8009883a 	mov	r4,r16
1000a558:	dc800215 	stw	r18,8(sp)
1000a55c:	dfc00415 	stw	ra,16(sp)
1000a560:	dc400115 	stw	r17,4(sp)
1000a564:	3025883a 	mov	r18,r6
1000a568:	000a4dc0 	call	1000a4dc <__mcmp>
1000a56c:	10005226 	beq	r2,zero,1000a6b8 <__mdiff+0x17c>
1000a570:	10004c16 	blt	r2,zero,1000a6a4 <__mdiff+0x168>
1000a574:	0023883a 	mov	r17,zero
1000a578:	81400117 	ldw	r5,4(r16)
1000a57c:	9809883a 	mov	r4,r19
1000a580:	0009b600 	call	10009b60 <_Balloc>
1000a584:	83400417 	ldw	r13,16(r16)
1000a588:	93800417 	ldw	r14,16(r18)
1000a58c:	81000504 	addi	r4,r16,20
1000a590:	6b59883a 	add	r12,r13,r13
1000a594:	739d883a 	add	r14,r14,r14
1000a598:	6319883a 	add	r12,r12,r12
1000a59c:	91800504 	addi	r6,r18,20
1000a5a0:	739d883a 	add	r14,r14,r14
1000a5a4:	14400315 	stw	r17,12(r2)
1000a5a8:	2319883a 	add	r12,r4,r12
1000a5ac:	339d883a 	add	r14,r6,r14
1000a5b0:	12400504 	addi	r9,r2,20
1000a5b4:	0007883a 	mov	r3,zero
1000a5b8:	22000017 	ldw	r8,0(r4)
1000a5bc:	32800017 	ldw	r10,0(r6)
1000a5c0:	4ac00104 	addi	r11,r9,4
1000a5c4:	41ffffcc 	andi	r7,r8,65535
1000a5c8:	38c7883a 	add	r3,r7,r3
1000a5cc:	51ffffcc 	andi	r7,r10,65535
1000a5d0:	19cfc83a 	sub	r7,r3,r7
1000a5d4:	4010d43a 	srli	r8,r8,16
1000a5d8:	5014d43a 	srli	r10,r10,16
1000a5dc:	3807d43a 	srai	r3,r7,16
1000a5e0:	39ffffcc 	andi	r7,r7,65535
1000a5e4:	4291c83a 	sub	r8,r8,r10
1000a5e8:	40c7883a 	add	r3,r8,r3
1000a5ec:	1810943a 	slli	r8,r3,16
1000a5f0:	31800104 	addi	r6,r6,4
1000a5f4:	21000104 	addi	r4,r4,4
1000a5f8:	41ceb03a 	or	r7,r8,r7
1000a5fc:	49c00015 	stw	r7,0(r9)
1000a600:	1807d43a 	srai	r3,r3,16
1000a604:	580b883a 	mov	r5,r11
1000a608:	5813883a 	mov	r9,r11
1000a60c:	33bfea36 	bltu	r6,r14,1000a5b8 <__alt_data_end+0xf800a5b8>
1000a610:	2011883a 	mov	r8,r4
1000a614:	2300152e 	bgeu	r4,r12,1000a66c <__mdiff+0x130>
1000a618:	21400017 	ldw	r5,0(r4)
1000a61c:	4a400104 	addi	r9,r9,4
1000a620:	21000104 	addi	r4,r4,4
1000a624:	29ffffcc 	andi	r7,r5,65535
1000a628:	38c7883a 	add	r3,r7,r3
1000a62c:	280ad43a 	srli	r5,r5,16
1000a630:	180dd43a 	srai	r6,r3,16
1000a634:	19ffffcc 	andi	r7,r3,65535
1000a638:	3147883a 	add	r3,r6,r5
1000a63c:	180a943a 	slli	r5,r3,16
1000a640:	1807d43a 	srai	r3,r3,16
1000a644:	29ceb03a 	or	r7,r5,r7
1000a648:	49ffff15 	stw	r7,-4(r9)
1000a64c:	233ff236 	bltu	r4,r12,1000a618 <__alt_data_end+0xf800a618>
1000a650:	0206303a 	nor	r3,zero,r8
1000a654:	1b07883a 	add	r3,r3,r12
1000a658:	1806d0ba 	srli	r3,r3,2
1000a65c:	18c00044 	addi	r3,r3,1
1000a660:	18c7883a 	add	r3,r3,r3
1000a664:	18c7883a 	add	r3,r3,r3
1000a668:	58cb883a 	add	r5,r11,r3
1000a66c:	28ffff04 	addi	r3,r5,-4
1000a670:	3800041e 	bne	r7,zero,1000a684 <__mdiff+0x148>
1000a674:	18ffff04 	addi	r3,r3,-4
1000a678:	19000017 	ldw	r4,0(r3)
1000a67c:	6b7fffc4 	addi	r13,r13,-1
1000a680:	203ffc26 	beq	r4,zero,1000a674 <__alt_data_end+0xf800a674>
1000a684:	13400415 	stw	r13,16(r2)
1000a688:	dfc00417 	ldw	ra,16(sp)
1000a68c:	dcc00317 	ldw	r19,12(sp)
1000a690:	dc800217 	ldw	r18,8(sp)
1000a694:	dc400117 	ldw	r17,4(sp)
1000a698:	dc000017 	ldw	r16,0(sp)
1000a69c:	dec00504 	addi	sp,sp,20
1000a6a0:	f800283a 	ret
1000a6a4:	8005883a 	mov	r2,r16
1000a6a8:	04400044 	movi	r17,1
1000a6ac:	9021883a 	mov	r16,r18
1000a6b0:	1025883a 	mov	r18,r2
1000a6b4:	003fb006 	br	1000a578 <__alt_data_end+0xf800a578>
1000a6b8:	9809883a 	mov	r4,r19
1000a6bc:	000b883a 	mov	r5,zero
1000a6c0:	0009b600 	call	10009b60 <_Balloc>
1000a6c4:	00c00044 	movi	r3,1
1000a6c8:	10c00415 	stw	r3,16(r2)
1000a6cc:	10000515 	stw	zero,20(r2)
1000a6d0:	003fed06 	br	1000a688 <__alt_data_end+0xf800a688>

1000a6d4 <__ulp>:
1000a6d4:	295ffc2c 	andhi	r5,r5,32752
1000a6d8:	00bf3034 	movhi	r2,64704
1000a6dc:	2887883a 	add	r3,r5,r2
1000a6e0:	00c0020e 	bge	zero,r3,1000a6ec <__ulp+0x18>
1000a6e4:	0005883a 	mov	r2,zero
1000a6e8:	f800283a 	ret
1000a6ec:	00c7c83a 	sub	r3,zero,r3
1000a6f0:	180bd53a 	srai	r5,r3,20
1000a6f4:	008004c4 	movi	r2,19
1000a6f8:	11400a0e 	bge	r2,r5,1000a724 <__ulp+0x50>
1000a6fc:	00800c84 	movi	r2,50
1000a700:	0007883a 	mov	r3,zero
1000a704:	11400516 	blt	r2,r5,1000a71c <__ulp+0x48>
1000a708:	00800cc4 	movi	r2,51
1000a70c:	114bc83a 	sub	r5,r2,r5
1000a710:	00800044 	movi	r2,1
1000a714:	1144983a 	sll	r2,r2,r5
1000a718:	f800283a 	ret
1000a71c:	00800044 	movi	r2,1
1000a720:	f800283a 	ret
1000a724:	00800234 	movhi	r2,8
1000a728:	1147d83a 	sra	r3,r2,r5
1000a72c:	0005883a 	mov	r2,zero
1000a730:	f800283a 	ret

1000a734 <__b2d>:
1000a734:	defffa04 	addi	sp,sp,-24
1000a738:	dc000015 	stw	r16,0(sp)
1000a73c:	24000417 	ldw	r16,16(r4)
1000a740:	dc400115 	stw	r17,4(sp)
1000a744:	24400504 	addi	r17,r4,20
1000a748:	8421883a 	add	r16,r16,r16
1000a74c:	8421883a 	add	r16,r16,r16
1000a750:	8c21883a 	add	r16,r17,r16
1000a754:	dc800215 	stw	r18,8(sp)
1000a758:	84bfff17 	ldw	r18,-4(r16)
1000a75c:	dd000415 	stw	r20,16(sp)
1000a760:	dcc00315 	stw	r19,12(sp)
1000a764:	9009883a 	mov	r4,r18
1000a768:	2829883a 	mov	r20,r5
1000a76c:	dfc00515 	stw	ra,20(sp)
1000a770:	0009e700 	call	10009e70 <__hi0bits>
1000a774:	00c00804 	movi	r3,32
1000a778:	1887c83a 	sub	r3,r3,r2
1000a77c:	a0c00015 	stw	r3,0(r20)
1000a780:	00c00284 	movi	r3,10
1000a784:	84ffff04 	addi	r19,r16,-4
1000a788:	18801216 	blt	r3,r2,1000a7d4 <__b2d+0xa0>
1000a78c:	014002c4 	movi	r5,11
1000a790:	2889c83a 	sub	r4,r5,r2
1000a794:	9106d83a 	srl	r3,r18,r4
1000a798:	18cffc34 	orhi	r3,r3,16368
1000a79c:	8cc0282e 	bgeu	r17,r19,1000a840 <__b2d+0x10c>
1000a7a0:	817ffe17 	ldw	r5,-8(r16)
1000a7a4:	290ad83a 	srl	r5,r5,r4
1000a7a8:	10800544 	addi	r2,r2,21
1000a7ac:	9084983a 	sll	r2,r18,r2
1000a7b0:	2884b03a 	or	r2,r5,r2
1000a7b4:	dfc00517 	ldw	ra,20(sp)
1000a7b8:	dd000417 	ldw	r20,16(sp)
1000a7bc:	dcc00317 	ldw	r19,12(sp)
1000a7c0:	dc800217 	ldw	r18,8(sp)
1000a7c4:	dc400117 	ldw	r17,4(sp)
1000a7c8:	dc000017 	ldw	r16,0(sp)
1000a7cc:	dec00604 	addi	sp,sp,24
1000a7d0:	f800283a 	ret
1000a7d4:	113ffd44 	addi	r4,r2,-11
1000a7d8:	8cc00f2e 	bgeu	r17,r19,1000a818 <__b2d+0xe4>
1000a7dc:	81bffe04 	addi	r6,r16,-8
1000a7e0:	817ffe17 	ldw	r5,-8(r16)
1000a7e4:	20001326 	beq	r4,zero,1000a834 <__b2d+0x100>
1000a7e8:	00c00ac4 	movi	r3,43
1000a7ec:	1885c83a 	sub	r2,r3,r2
1000a7f0:	2886d83a 	srl	r3,r5,r2
1000a7f4:	9124983a 	sll	r18,r18,r4
1000a7f8:	90e4b03a 	or	r18,r18,r3
1000a7fc:	90cffc34 	orhi	r3,r18,16368
1000a800:	8980112e 	bgeu	r17,r6,1000a848 <__b2d+0x114>
1000a804:	81bffd17 	ldw	r6,-12(r16)
1000a808:	308cd83a 	srl	r6,r6,r2
1000a80c:	2904983a 	sll	r2,r5,r4
1000a810:	1184b03a 	or	r2,r2,r6
1000a814:	003fe706 	br	1000a7b4 <__alt_data_end+0xf800a7b4>
1000a818:	20000526 	beq	r4,zero,1000a830 <__b2d+0xfc>
1000a81c:	9124983a 	sll	r18,r18,r4
1000a820:	000d883a 	mov	r6,zero
1000a824:	000b883a 	mov	r5,zero
1000a828:	90cffc34 	orhi	r3,r18,16368
1000a82c:	003ff706 	br	1000a80c <__alt_data_end+0xf800a80c>
1000a830:	000b883a 	mov	r5,zero
1000a834:	90cffc34 	orhi	r3,r18,16368
1000a838:	2805883a 	mov	r2,r5
1000a83c:	003fdd06 	br	1000a7b4 <__alt_data_end+0xf800a7b4>
1000a840:	000b883a 	mov	r5,zero
1000a844:	003fd806 	br	1000a7a8 <__alt_data_end+0xf800a7a8>
1000a848:	000d883a 	mov	r6,zero
1000a84c:	003fef06 	br	1000a80c <__alt_data_end+0xf800a80c>

1000a850 <__d2b>:
1000a850:	defff704 	addi	sp,sp,-36
1000a854:	dc000215 	stw	r16,8(sp)
1000a858:	3021883a 	mov	r16,r6
1000a85c:	dc400315 	stw	r17,12(sp)
1000a860:	8022907a 	slli	r17,r16,1
1000a864:	dd400715 	stw	r21,28(sp)
1000a868:	282b883a 	mov	r21,r5
1000a86c:	01400044 	movi	r5,1
1000a870:	dd000615 	stw	r20,24(sp)
1000a874:	dcc00515 	stw	r19,20(sp)
1000a878:	dc800415 	stw	r18,16(sp)
1000a87c:	dfc00815 	stw	ra,32(sp)
1000a880:	3829883a 	mov	r20,r7
1000a884:	dc800917 	ldw	r18,36(sp)
1000a888:	8822d57a 	srli	r17,r17,21
1000a88c:	0009b600 	call	10009b60 <_Balloc>
1000a890:	1027883a 	mov	r19,r2
1000a894:	00800434 	movhi	r2,16
1000a898:	10bfffc4 	addi	r2,r2,-1
1000a89c:	808c703a 	and	r6,r16,r2
1000a8a0:	88000126 	beq	r17,zero,1000a8a8 <__d2b+0x58>
1000a8a4:	31800434 	orhi	r6,r6,16
1000a8a8:	d9800015 	stw	r6,0(sp)
1000a8ac:	a8001f26 	beq	r21,zero,1000a92c <__d2b+0xdc>
1000a8b0:	d9000104 	addi	r4,sp,4
1000a8b4:	dd400115 	stw	r21,4(sp)
1000a8b8:	0009ed80 	call	10009ed8 <__lo0bits>
1000a8bc:	d8c00017 	ldw	r3,0(sp)
1000a8c0:	1000291e 	bne	r2,zero,1000a968 <__d2b+0x118>
1000a8c4:	d9000117 	ldw	r4,4(sp)
1000a8c8:	99000515 	stw	r4,20(r19)
1000a8cc:	1820c03a 	cmpne	r16,r3,zero
1000a8d0:	84000044 	addi	r16,r16,1
1000a8d4:	98c00615 	stw	r3,24(r19)
1000a8d8:	9c000415 	stw	r16,16(r19)
1000a8dc:	88001b1e 	bne	r17,zero,1000a94c <__d2b+0xfc>
1000a8e0:	800690ba 	slli	r3,r16,2
1000a8e4:	10bef384 	addi	r2,r2,-1074
1000a8e8:	a0800015 	stw	r2,0(r20)
1000a8ec:	98c5883a 	add	r2,r19,r3
1000a8f0:	11000417 	ldw	r4,16(r2)
1000a8f4:	8020917a 	slli	r16,r16,5
1000a8f8:	0009e700 	call	10009e70 <__hi0bits>
1000a8fc:	8085c83a 	sub	r2,r16,r2
1000a900:	90800015 	stw	r2,0(r18)
1000a904:	9805883a 	mov	r2,r19
1000a908:	dfc00817 	ldw	ra,32(sp)
1000a90c:	dd400717 	ldw	r21,28(sp)
1000a910:	dd000617 	ldw	r20,24(sp)
1000a914:	dcc00517 	ldw	r19,20(sp)
1000a918:	dc800417 	ldw	r18,16(sp)
1000a91c:	dc400317 	ldw	r17,12(sp)
1000a920:	dc000217 	ldw	r16,8(sp)
1000a924:	dec00904 	addi	sp,sp,36
1000a928:	f800283a 	ret
1000a92c:	d809883a 	mov	r4,sp
1000a930:	0009ed80 	call	10009ed8 <__lo0bits>
1000a934:	d8c00017 	ldw	r3,0(sp)
1000a938:	04000044 	movi	r16,1
1000a93c:	9c000415 	stw	r16,16(r19)
1000a940:	98c00515 	stw	r3,20(r19)
1000a944:	10800804 	addi	r2,r2,32
1000a948:	883fe526 	beq	r17,zero,1000a8e0 <__alt_data_end+0xf800a8e0>
1000a94c:	8c7ef344 	addi	r17,r17,-1075
1000a950:	88a3883a 	add	r17,r17,r2
1000a954:	00c00d44 	movi	r3,53
1000a958:	a4400015 	stw	r17,0(r20)
1000a95c:	1885c83a 	sub	r2,r3,r2
1000a960:	90800015 	stw	r2,0(r18)
1000a964:	003fe706 	br	1000a904 <__alt_data_end+0xf800a904>
1000a968:	01000804 	movi	r4,32
1000a96c:	2089c83a 	sub	r4,r4,r2
1000a970:	1908983a 	sll	r4,r3,r4
1000a974:	d9400117 	ldw	r5,4(sp)
1000a978:	1886d83a 	srl	r3,r3,r2
1000a97c:	2148b03a 	or	r4,r4,r5
1000a980:	99000515 	stw	r4,20(r19)
1000a984:	d8c00015 	stw	r3,0(sp)
1000a988:	003fd006 	br	1000a8cc <__alt_data_end+0xf800a8cc>

1000a98c <__ratio>:
1000a98c:	defff904 	addi	sp,sp,-28
1000a990:	dc400315 	stw	r17,12(sp)
1000a994:	2823883a 	mov	r17,r5
1000a998:	d9400104 	addi	r5,sp,4
1000a99c:	dfc00615 	stw	ra,24(sp)
1000a9a0:	dcc00515 	stw	r19,20(sp)
1000a9a4:	dc800415 	stw	r18,16(sp)
1000a9a8:	2027883a 	mov	r19,r4
1000a9ac:	dc000215 	stw	r16,8(sp)
1000a9b0:	000a7340 	call	1000a734 <__b2d>
1000a9b4:	8809883a 	mov	r4,r17
1000a9b8:	d80b883a 	mov	r5,sp
1000a9bc:	1025883a 	mov	r18,r2
1000a9c0:	1821883a 	mov	r16,r3
1000a9c4:	000a7340 	call	1000a734 <__b2d>
1000a9c8:	8a400417 	ldw	r9,16(r17)
1000a9cc:	9a000417 	ldw	r8,16(r19)
1000a9d0:	100d883a 	mov	r6,r2
1000a9d4:	d8800017 	ldw	r2,0(sp)
1000a9d8:	4251c83a 	sub	r8,r8,r9
1000a9dc:	4012917a 	slli	r9,r8,5
1000a9e0:	da000117 	ldw	r8,4(sp)
1000a9e4:	4091c83a 	sub	r8,r8,r2
1000a9e8:	4251883a 	add	r8,r8,r9
1000a9ec:	02000d0e 	bge	zero,r8,1000aa24 <__ratio+0x98>
1000a9f0:	4010953a 	slli	r8,r8,20
1000a9f4:	4421883a 	add	r16,r8,r16
1000a9f8:	9009883a 	mov	r4,r18
1000a9fc:	800b883a 	mov	r5,r16
1000aa00:	180f883a 	mov	r7,r3
1000aa04:	000d3a40 	call	1000d3a4 <__divdf3>
1000aa08:	dfc00617 	ldw	ra,24(sp)
1000aa0c:	dcc00517 	ldw	r19,20(sp)
1000aa10:	dc800417 	ldw	r18,16(sp)
1000aa14:	dc400317 	ldw	r17,12(sp)
1000aa18:	dc000217 	ldw	r16,8(sp)
1000aa1c:	dec00704 	addi	sp,sp,28
1000aa20:	f800283a 	ret
1000aa24:	4010953a 	slli	r8,r8,20
1000aa28:	1a07c83a 	sub	r3,r3,r8
1000aa2c:	003ff206 	br	1000a9f8 <__alt_data_end+0xf800a9f8>

1000aa30 <_mprec_log10>:
1000aa30:	defffe04 	addi	sp,sp,-8
1000aa34:	dc000015 	stw	r16,0(sp)
1000aa38:	dfc00115 	stw	ra,4(sp)
1000aa3c:	008005c4 	movi	r2,23
1000aa40:	2021883a 	mov	r16,r4
1000aa44:	11000d0e 	bge	r2,r4,1000aa7c <_mprec_log10+0x4c>
1000aa48:	0005883a 	mov	r2,zero
1000aa4c:	00cffc34 	movhi	r3,16368
1000aa50:	843fffc4 	addi	r16,r16,-1
1000aa54:	1009883a 	mov	r4,r2
1000aa58:	180b883a 	mov	r5,r3
1000aa5c:	000d883a 	mov	r6,zero
1000aa60:	01d00934 	movhi	r7,16420
1000aa64:	000df680 	call	1000df68 <__muldf3>
1000aa68:	803ff91e 	bne	r16,zero,1000aa50 <__alt_data_end+0xf800aa50>
1000aa6c:	dfc00117 	ldw	ra,4(sp)
1000aa70:	dc000017 	ldw	r16,0(sp)
1000aa74:	dec00204 	addi	sp,sp,8
1000aa78:	f800283a 	ret
1000aa7c:	202090fa 	slli	r16,r4,3
1000aa80:	00840074 	movhi	r2,4097
1000aa84:	10849d04 	addi	r2,r2,4724
1000aa88:	1421883a 	add	r16,r2,r16
1000aa8c:	80800017 	ldw	r2,0(r16)
1000aa90:	80c00117 	ldw	r3,4(r16)
1000aa94:	dfc00117 	ldw	ra,4(sp)
1000aa98:	dc000017 	ldw	r16,0(sp)
1000aa9c:	dec00204 	addi	sp,sp,8
1000aaa0:	f800283a 	ret

1000aaa4 <__copybits>:
1000aaa4:	297fffc4 	addi	r5,r5,-1
1000aaa8:	280fd17a 	srai	r7,r5,5
1000aaac:	30c00417 	ldw	r3,16(r6)
1000aab0:	30800504 	addi	r2,r6,20
1000aab4:	39c00044 	addi	r7,r7,1
1000aab8:	18c7883a 	add	r3,r3,r3
1000aabc:	39cf883a 	add	r7,r7,r7
1000aac0:	18c7883a 	add	r3,r3,r3
1000aac4:	39cf883a 	add	r7,r7,r7
1000aac8:	10c7883a 	add	r3,r2,r3
1000aacc:	21cf883a 	add	r7,r4,r7
1000aad0:	10c00d2e 	bgeu	r2,r3,1000ab08 <__copybits+0x64>
1000aad4:	200b883a 	mov	r5,r4
1000aad8:	12000017 	ldw	r8,0(r2)
1000aadc:	29400104 	addi	r5,r5,4
1000aae0:	10800104 	addi	r2,r2,4
1000aae4:	2a3fff15 	stw	r8,-4(r5)
1000aae8:	10fffb36 	bltu	r2,r3,1000aad8 <__alt_data_end+0xf800aad8>
1000aaec:	1985c83a 	sub	r2,r3,r6
1000aaf0:	10bffac4 	addi	r2,r2,-21
1000aaf4:	1004d0ba 	srli	r2,r2,2
1000aaf8:	10800044 	addi	r2,r2,1
1000aafc:	1085883a 	add	r2,r2,r2
1000ab00:	1085883a 	add	r2,r2,r2
1000ab04:	2089883a 	add	r4,r4,r2
1000ab08:	21c0032e 	bgeu	r4,r7,1000ab18 <__copybits+0x74>
1000ab0c:	20000015 	stw	zero,0(r4)
1000ab10:	21000104 	addi	r4,r4,4
1000ab14:	21fffd36 	bltu	r4,r7,1000ab0c <__alt_data_end+0xf800ab0c>
1000ab18:	f800283a 	ret

1000ab1c <__any_on>:
1000ab1c:	20c00417 	ldw	r3,16(r4)
1000ab20:	2805d17a 	srai	r2,r5,5
1000ab24:	21000504 	addi	r4,r4,20
1000ab28:	18800d0e 	bge	r3,r2,1000ab60 <__any_on+0x44>
1000ab2c:	18c7883a 	add	r3,r3,r3
1000ab30:	18c7883a 	add	r3,r3,r3
1000ab34:	20c7883a 	add	r3,r4,r3
1000ab38:	20c0192e 	bgeu	r4,r3,1000aba0 <__any_on+0x84>
1000ab3c:	18bfff17 	ldw	r2,-4(r3)
1000ab40:	18ffff04 	addi	r3,r3,-4
1000ab44:	1000041e 	bne	r2,zero,1000ab58 <__any_on+0x3c>
1000ab48:	20c0142e 	bgeu	r4,r3,1000ab9c <__any_on+0x80>
1000ab4c:	18ffff04 	addi	r3,r3,-4
1000ab50:	19400017 	ldw	r5,0(r3)
1000ab54:	283ffc26 	beq	r5,zero,1000ab48 <__alt_data_end+0xf800ab48>
1000ab58:	00800044 	movi	r2,1
1000ab5c:	f800283a 	ret
1000ab60:	10c00a0e 	bge	r2,r3,1000ab8c <__any_on+0x70>
1000ab64:	1085883a 	add	r2,r2,r2
1000ab68:	1085883a 	add	r2,r2,r2
1000ab6c:	294007cc 	andi	r5,r5,31
1000ab70:	2087883a 	add	r3,r4,r2
1000ab74:	283ff026 	beq	r5,zero,1000ab38 <__alt_data_end+0xf800ab38>
1000ab78:	19800017 	ldw	r6,0(r3)
1000ab7c:	3144d83a 	srl	r2,r6,r5
1000ab80:	114a983a 	sll	r5,r2,r5
1000ab84:	29bff41e 	bne	r5,r6,1000ab58 <__alt_data_end+0xf800ab58>
1000ab88:	003feb06 	br	1000ab38 <__alt_data_end+0xf800ab38>
1000ab8c:	1085883a 	add	r2,r2,r2
1000ab90:	1085883a 	add	r2,r2,r2
1000ab94:	2087883a 	add	r3,r4,r2
1000ab98:	003fe706 	br	1000ab38 <__alt_data_end+0xf800ab38>
1000ab9c:	f800283a 	ret
1000aba0:	0005883a 	mov	r2,zero
1000aba4:	f800283a 	ret

1000aba8 <_realloc_r>:
1000aba8:	defff604 	addi	sp,sp,-40
1000abac:	dcc00315 	stw	r19,12(sp)
1000abb0:	dc400115 	stw	r17,4(sp)
1000abb4:	dfc00915 	stw	ra,36(sp)
1000abb8:	df000815 	stw	fp,32(sp)
1000abbc:	ddc00715 	stw	r23,28(sp)
1000abc0:	dd800615 	stw	r22,24(sp)
1000abc4:	dd400515 	stw	r21,20(sp)
1000abc8:	dd000415 	stw	r20,16(sp)
1000abcc:	dc800215 	stw	r18,8(sp)
1000abd0:	dc000015 	stw	r16,0(sp)
1000abd4:	2827883a 	mov	r19,r5
1000abd8:	3023883a 	mov	r17,r6
1000abdc:	2800bf26 	beq	r5,zero,1000aedc <_realloc_r+0x334>
1000abe0:	2025883a 	mov	r18,r4
1000abe4:	000ee580 	call	1000ee58 <__malloc_lock>
1000abe8:	98ffff17 	ldw	r3,-4(r19)
1000abec:	01bfff04 	movi	r6,-4
1000abf0:	890002c4 	addi	r4,r17,11
1000abf4:	01c00584 	movi	r7,22
1000abf8:	9d7ffe04 	addi	r21,r19,-8
1000abfc:	19a0703a 	and	r16,r3,r6
1000ac00:	39003f2e 	bgeu	r7,r4,1000ad00 <_realloc_r+0x158>
1000ac04:	053ffe04 	movi	r20,-8
1000ac08:	2528703a 	and	r20,r4,r20
1000ac0c:	a00f883a 	mov	r7,r20
1000ac10:	a0008216 	blt	r20,zero,1000ae1c <_realloc_r+0x274>
1000ac14:	a4408136 	bltu	r20,r17,1000ae1c <_realloc_r+0x274>
1000ac18:	81c03c0e 	bge	r16,r7,1000ad0c <_realloc_r+0x164>
1000ac1c:	07040074 	movhi	fp,4097
1000ac20:	e7060b04 	addi	fp,fp,6188
1000ac24:	e1000217 	ldw	r4,8(fp)
1000ac28:	ac05883a 	add	r2,r21,r16
1000ac2c:	2080bf26 	beq	r4,r2,1000af2c <_realloc_r+0x384>
1000ac30:	11000117 	ldw	r4,4(r2)
1000ac34:	023fff84 	movi	r8,-2
1000ac38:	2210703a 	and	r8,r4,r8
1000ac3c:	1211883a 	add	r8,r2,r8
1000ac40:	41400117 	ldw	r5,4(r8)
1000ac44:	2940004c 	andi	r5,r5,1
1000ac48:	28004a1e 	bne	r5,zero,1000ad74 <_realloc_r+0x1cc>
1000ac4c:	017fff04 	movi	r5,-4
1000ac50:	2148703a 	and	r4,r4,r5
1000ac54:	2409883a 	add	r4,r4,r16
1000ac58:	21c0ad0e 	bge	r4,r7,1000af10 <_realloc_r+0x368>
1000ac5c:	18c0004c 	andi	r3,r3,1
1000ac60:	18007f1e 	bne	r3,zero,1000ae60 <_realloc_r+0x2b8>
1000ac64:	9dfffe17 	ldw	r23,-8(r19)
1000ac68:	adefc83a 	sub	r23,r21,r23
1000ac6c:	bd800117 	ldw	r22,4(r23)
1000ac70:	b14a703a 	and	r5,r22,r5
1000ac74:	216d883a 	add	r22,r4,r5
1000ac78:	b1c04516 	blt	r22,r7,1000ad90 <_realloc_r+0x1e8>
1000ac7c:	10c00317 	ldw	r3,12(r2)
1000ac80:	10800217 	ldw	r2,8(r2)
1000ac84:	81bfff04 	addi	r6,r16,-4
1000ac88:	bc400204 	addi	r17,r23,8
1000ac8c:	10c00315 	stw	r3,12(r2)
1000ac90:	18800215 	stw	r2,8(r3)
1000ac94:	b9400217 	ldw	r5,8(r23)
1000ac98:	b8c00317 	ldw	r3,12(r23)
1000ac9c:	00800904 	movi	r2,36
1000aca0:	28c00315 	stw	r3,12(r5)
1000aca4:	19400215 	stw	r5,8(r3)
1000aca8:	1180ef36 	bltu	r2,r6,1000b068 <_realloc_r+0x4c0>
1000acac:	008004c4 	movi	r2,19
1000acb0:	1180da2e 	bgeu	r2,r6,1000b01c <_realloc_r+0x474>
1000acb4:	98800017 	ldw	r2,0(r19)
1000acb8:	b8800215 	stw	r2,8(r23)
1000acbc:	98800117 	ldw	r2,4(r19)
1000acc0:	b8800315 	stw	r2,12(r23)
1000acc4:	008006c4 	movi	r2,27
1000acc8:	1180fc2e 	bgeu	r2,r6,1000b0bc <_realloc_r+0x514>
1000accc:	98800217 	ldw	r2,8(r19)
1000acd0:	b8800415 	stw	r2,16(r23)
1000acd4:	98800317 	ldw	r2,12(r19)
1000acd8:	b8800515 	stw	r2,20(r23)
1000acdc:	00800904 	movi	r2,36
1000ace0:	3080421e 	bne	r6,r2,1000adec <_realloc_r+0x244>
1000ace4:	98800417 	ldw	r2,16(r19)
1000ace8:	9cc00604 	addi	r19,r19,24
1000acec:	b8c00804 	addi	r3,r23,32
1000acf0:	b8800615 	stw	r2,24(r23)
1000acf4:	98bfff17 	ldw	r2,-4(r19)
1000acf8:	b8800715 	stw	r2,28(r23)
1000acfc:	00003d06 	br	1000adf4 <_realloc_r+0x24c>
1000ad00:	01c00404 	movi	r7,16
1000ad04:	3829883a 	mov	r20,r7
1000ad08:	003fc206 	br	1000ac14 <__alt_data_end+0xf800ac14>
1000ad0c:	9823883a 	mov	r17,r19
1000ad10:	850fc83a 	sub	r7,r16,r20
1000ad14:	008003c4 	movi	r2,15
1000ad18:	18c0004c 	andi	r3,r3,1
1000ad1c:	11c04336 	bltu	r2,r7,1000ae2c <_realloc_r+0x284>
1000ad20:	1c06b03a 	or	r3,r3,r16
1000ad24:	a8c00115 	stw	r3,4(r21)
1000ad28:	ac21883a 	add	r16,r21,r16
1000ad2c:	80c00117 	ldw	r3,4(r16)
1000ad30:	18c00054 	ori	r3,r3,1
1000ad34:	80c00115 	stw	r3,4(r16)
1000ad38:	9009883a 	mov	r4,r18
1000ad3c:	000ee780 	call	1000ee78 <__malloc_unlock>
1000ad40:	8805883a 	mov	r2,r17
1000ad44:	dfc00917 	ldw	ra,36(sp)
1000ad48:	df000817 	ldw	fp,32(sp)
1000ad4c:	ddc00717 	ldw	r23,28(sp)
1000ad50:	dd800617 	ldw	r22,24(sp)
1000ad54:	dd400517 	ldw	r21,20(sp)
1000ad58:	dd000417 	ldw	r20,16(sp)
1000ad5c:	dcc00317 	ldw	r19,12(sp)
1000ad60:	dc800217 	ldw	r18,8(sp)
1000ad64:	dc400117 	ldw	r17,4(sp)
1000ad68:	dc000017 	ldw	r16,0(sp)
1000ad6c:	dec00a04 	addi	sp,sp,40
1000ad70:	f800283a 	ret
1000ad74:	18c0004c 	andi	r3,r3,1
1000ad78:	1800391e 	bne	r3,zero,1000ae60 <_realloc_r+0x2b8>
1000ad7c:	9dfffe17 	ldw	r23,-8(r19)
1000ad80:	00bfff04 	movi	r2,-4
1000ad84:	adefc83a 	sub	r23,r21,r23
1000ad88:	b9400117 	ldw	r5,4(r23)
1000ad8c:	288a703a 	and	r5,r5,r2
1000ad90:	2c2d883a 	add	r22,r5,r16
1000ad94:	b1c03216 	blt	r22,r7,1000ae60 <_realloc_r+0x2b8>
1000ad98:	b8800317 	ldw	r2,12(r23)
1000ad9c:	b8c00217 	ldw	r3,8(r23)
1000ada0:	81bfff04 	addi	r6,r16,-4
1000ada4:	01000904 	movi	r4,36
1000ada8:	18800315 	stw	r2,12(r3)
1000adac:	10c00215 	stw	r3,8(r2)
1000adb0:	bc400204 	addi	r17,r23,8
1000adb4:	2180ac36 	bltu	r4,r6,1000b068 <_realloc_r+0x4c0>
1000adb8:	008004c4 	movi	r2,19
1000adbc:	1180972e 	bgeu	r2,r6,1000b01c <_realloc_r+0x474>
1000adc0:	98800017 	ldw	r2,0(r19)
1000adc4:	b8800215 	stw	r2,8(r23)
1000adc8:	98800117 	ldw	r2,4(r19)
1000adcc:	b8800315 	stw	r2,12(r23)
1000add0:	008006c4 	movi	r2,27
1000add4:	1180b92e 	bgeu	r2,r6,1000b0bc <_realloc_r+0x514>
1000add8:	98800217 	ldw	r2,8(r19)
1000addc:	b8800415 	stw	r2,16(r23)
1000ade0:	98800317 	ldw	r2,12(r19)
1000ade4:	b8800515 	stw	r2,20(r23)
1000ade8:	313fbe26 	beq	r6,r4,1000ace4 <__alt_data_end+0xf800ace4>
1000adec:	b8c00604 	addi	r3,r23,24
1000adf0:	9cc00404 	addi	r19,r19,16
1000adf4:	98800017 	ldw	r2,0(r19)
1000adf8:	b021883a 	mov	r16,r22
1000adfc:	b82b883a 	mov	r21,r23
1000ae00:	18800015 	stw	r2,0(r3)
1000ae04:	98800117 	ldw	r2,4(r19)
1000ae08:	18800115 	stw	r2,4(r3)
1000ae0c:	98800217 	ldw	r2,8(r19)
1000ae10:	18800215 	stw	r2,8(r3)
1000ae14:	b8c00117 	ldw	r3,4(r23)
1000ae18:	003fbd06 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000ae1c:	00800304 	movi	r2,12
1000ae20:	90800015 	stw	r2,0(r18)
1000ae24:	0005883a 	mov	r2,zero
1000ae28:	003fc606 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000ae2c:	1d06b03a 	or	r3,r3,r20
1000ae30:	ad0b883a 	add	r5,r21,r20
1000ae34:	a8c00115 	stw	r3,4(r21)
1000ae38:	38800054 	ori	r2,r7,1
1000ae3c:	28800115 	stw	r2,4(r5)
1000ae40:	29cf883a 	add	r7,r5,r7
1000ae44:	38800117 	ldw	r2,4(r7)
1000ae48:	9009883a 	mov	r4,r18
1000ae4c:	29400204 	addi	r5,r5,8
1000ae50:	10800054 	ori	r2,r2,1
1000ae54:	38800115 	stw	r2,4(r7)
1000ae58:	000837c0 	call	1000837c <_free_r>
1000ae5c:	003fb606 	br	1000ad38 <__alt_data_end+0xf800ad38>
1000ae60:	880b883a 	mov	r5,r17
1000ae64:	9009883a 	mov	r4,r18
1000ae68:	0008f180 	call	10008f18 <_malloc_r>
1000ae6c:	1023883a 	mov	r17,r2
1000ae70:	1000aa26 	beq	r2,zero,1000b11c <_realloc_r+0x574>
1000ae74:	98ffff17 	ldw	r3,-4(r19)
1000ae78:	113ffe04 	addi	r4,r2,-8
1000ae7c:	00bfff84 	movi	r2,-2
1000ae80:	1884703a 	and	r2,r3,r2
1000ae84:	a885883a 	add	r2,r21,r2
1000ae88:	20808626 	beq	r4,r2,1000b0a4 <_realloc_r+0x4fc>
1000ae8c:	81bfff04 	addi	r6,r16,-4
1000ae90:	00800904 	movi	r2,36
1000ae94:	11807036 	bltu	r2,r6,1000b058 <_realloc_r+0x4b0>
1000ae98:	00c004c4 	movi	r3,19
1000ae9c:	19805636 	bltu	r3,r6,1000aff8 <_realloc_r+0x450>
1000aea0:	8805883a 	mov	r2,r17
1000aea4:	9807883a 	mov	r3,r19
1000aea8:	19000017 	ldw	r4,0(r3)
1000aeac:	11000015 	stw	r4,0(r2)
1000aeb0:	19000117 	ldw	r4,4(r3)
1000aeb4:	11000115 	stw	r4,4(r2)
1000aeb8:	18c00217 	ldw	r3,8(r3)
1000aebc:	10c00215 	stw	r3,8(r2)
1000aec0:	980b883a 	mov	r5,r19
1000aec4:	9009883a 	mov	r4,r18
1000aec8:	000837c0 	call	1000837c <_free_r>
1000aecc:	9009883a 	mov	r4,r18
1000aed0:	000ee780 	call	1000ee78 <__malloc_unlock>
1000aed4:	8805883a 	mov	r2,r17
1000aed8:	003f9a06 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000aedc:	300b883a 	mov	r5,r6
1000aee0:	dfc00917 	ldw	ra,36(sp)
1000aee4:	df000817 	ldw	fp,32(sp)
1000aee8:	ddc00717 	ldw	r23,28(sp)
1000aeec:	dd800617 	ldw	r22,24(sp)
1000aef0:	dd400517 	ldw	r21,20(sp)
1000aef4:	dd000417 	ldw	r20,16(sp)
1000aef8:	dcc00317 	ldw	r19,12(sp)
1000aefc:	dc800217 	ldw	r18,8(sp)
1000af00:	dc400117 	ldw	r17,4(sp)
1000af04:	dc000017 	ldw	r16,0(sp)
1000af08:	dec00a04 	addi	sp,sp,40
1000af0c:	0008f181 	jmpi	10008f18 <_malloc_r>
1000af10:	11400317 	ldw	r5,12(r2)
1000af14:	10800217 	ldw	r2,8(r2)
1000af18:	9823883a 	mov	r17,r19
1000af1c:	2021883a 	mov	r16,r4
1000af20:	11400315 	stw	r5,12(r2)
1000af24:	28800215 	stw	r2,8(r5)
1000af28:	003f7906 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000af2c:	21000117 	ldw	r4,4(r4)
1000af30:	00bfff04 	movi	r2,-4
1000af34:	a1800404 	addi	r6,r20,16
1000af38:	2088703a 	and	r4,r4,r2
1000af3c:	2409883a 	add	r4,r4,r16
1000af40:	2180380e 	bge	r4,r6,1000b024 <_realloc_r+0x47c>
1000af44:	18c0004c 	andi	r3,r3,1
1000af48:	183fc51e 	bne	r3,zero,1000ae60 <__alt_data_end+0xf800ae60>
1000af4c:	9dfffe17 	ldw	r23,-8(r19)
1000af50:	adefc83a 	sub	r23,r21,r23
1000af54:	b9400117 	ldw	r5,4(r23)
1000af58:	288a703a 	and	r5,r5,r2
1000af5c:	216d883a 	add	r22,r4,r5
1000af60:	b1bf8b16 	blt	r22,r6,1000ad90 <__alt_data_end+0xf800ad90>
1000af64:	b8800317 	ldw	r2,12(r23)
1000af68:	b8c00217 	ldw	r3,8(r23)
1000af6c:	81bfff04 	addi	r6,r16,-4
1000af70:	01000904 	movi	r4,36
1000af74:	18800315 	stw	r2,12(r3)
1000af78:	10c00215 	stw	r3,8(r2)
1000af7c:	bc400204 	addi	r17,r23,8
1000af80:	21805a36 	bltu	r4,r6,1000b0ec <_realloc_r+0x544>
1000af84:	008004c4 	movi	r2,19
1000af88:	1180562e 	bgeu	r2,r6,1000b0e4 <_realloc_r+0x53c>
1000af8c:	98800017 	ldw	r2,0(r19)
1000af90:	b8800215 	stw	r2,8(r23)
1000af94:	98800117 	ldw	r2,4(r19)
1000af98:	b8800315 	stw	r2,12(r23)
1000af9c:	008006c4 	movi	r2,27
1000afa0:	11805636 	bltu	r2,r6,1000b0fc <_realloc_r+0x554>
1000afa4:	b8800404 	addi	r2,r23,16
1000afa8:	9cc00204 	addi	r19,r19,8
1000afac:	98c00017 	ldw	r3,0(r19)
1000afb0:	10c00015 	stw	r3,0(r2)
1000afb4:	98c00117 	ldw	r3,4(r19)
1000afb8:	10c00115 	stw	r3,4(r2)
1000afbc:	98c00217 	ldw	r3,8(r19)
1000afc0:	10c00215 	stw	r3,8(r2)
1000afc4:	bd07883a 	add	r3,r23,r20
1000afc8:	b505c83a 	sub	r2,r22,r20
1000afcc:	e0c00215 	stw	r3,8(fp)
1000afd0:	10800054 	ori	r2,r2,1
1000afd4:	18800115 	stw	r2,4(r3)
1000afd8:	b8800117 	ldw	r2,4(r23)
1000afdc:	9009883a 	mov	r4,r18
1000afe0:	1080004c 	andi	r2,r2,1
1000afe4:	a0a8b03a 	or	r20,r20,r2
1000afe8:	bd000115 	stw	r20,4(r23)
1000afec:	000ee780 	call	1000ee78 <__malloc_unlock>
1000aff0:	8805883a 	mov	r2,r17
1000aff4:	003f5306 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000aff8:	98c00017 	ldw	r3,0(r19)
1000affc:	88c00015 	stw	r3,0(r17)
1000b000:	98c00117 	ldw	r3,4(r19)
1000b004:	88c00115 	stw	r3,4(r17)
1000b008:	00c006c4 	movi	r3,27
1000b00c:	19801d36 	bltu	r3,r6,1000b084 <_realloc_r+0x4dc>
1000b010:	88800204 	addi	r2,r17,8
1000b014:	98c00204 	addi	r3,r19,8
1000b018:	003fa306 	br	1000aea8 <__alt_data_end+0xf800aea8>
1000b01c:	8807883a 	mov	r3,r17
1000b020:	003f7406 	br	1000adf4 <__alt_data_end+0xf800adf4>
1000b024:	ad2b883a 	add	r21,r21,r20
1000b028:	2505c83a 	sub	r2,r4,r20
1000b02c:	e5400215 	stw	r21,8(fp)
1000b030:	10800054 	ori	r2,r2,1
1000b034:	a8800115 	stw	r2,4(r21)
1000b038:	98bfff17 	ldw	r2,-4(r19)
1000b03c:	9009883a 	mov	r4,r18
1000b040:	1080004c 	andi	r2,r2,1
1000b044:	a0a8b03a 	or	r20,r20,r2
1000b048:	9d3fff15 	stw	r20,-4(r19)
1000b04c:	000ee780 	call	1000ee78 <__malloc_unlock>
1000b050:	9805883a 	mov	r2,r19
1000b054:	003f3b06 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000b058:	8809883a 	mov	r4,r17
1000b05c:	980b883a 	mov	r5,r19
1000b060:	00098e00 	call	100098e0 <memmove>
1000b064:	003f9606 	br	1000aec0 <__alt_data_end+0xf800aec0>
1000b068:	8809883a 	mov	r4,r17
1000b06c:	980b883a 	mov	r5,r19
1000b070:	00098e00 	call	100098e0 <memmove>
1000b074:	b8c00117 	ldw	r3,4(r23)
1000b078:	b021883a 	mov	r16,r22
1000b07c:	b82b883a 	mov	r21,r23
1000b080:	003f2306 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000b084:	98c00217 	ldw	r3,8(r19)
1000b088:	88c00215 	stw	r3,8(r17)
1000b08c:	98c00317 	ldw	r3,12(r19)
1000b090:	88c00315 	stw	r3,12(r17)
1000b094:	30800c26 	beq	r6,r2,1000b0c8 <_realloc_r+0x520>
1000b098:	88800404 	addi	r2,r17,16
1000b09c:	98c00404 	addi	r3,r19,16
1000b0a0:	003f8106 	br	1000aea8 <__alt_data_end+0xf800aea8>
1000b0a4:	893fff17 	ldw	r4,-4(r17)
1000b0a8:	00bfff04 	movi	r2,-4
1000b0ac:	9823883a 	mov	r17,r19
1000b0b0:	2084703a 	and	r2,r4,r2
1000b0b4:	80a1883a 	add	r16,r16,r2
1000b0b8:	003f1506 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000b0bc:	b8c00404 	addi	r3,r23,16
1000b0c0:	9cc00204 	addi	r19,r19,8
1000b0c4:	003f4b06 	br	1000adf4 <__alt_data_end+0xf800adf4>
1000b0c8:	99000417 	ldw	r4,16(r19)
1000b0cc:	88800604 	addi	r2,r17,24
1000b0d0:	98c00604 	addi	r3,r19,24
1000b0d4:	89000415 	stw	r4,16(r17)
1000b0d8:	99000517 	ldw	r4,20(r19)
1000b0dc:	89000515 	stw	r4,20(r17)
1000b0e0:	003f7106 	br	1000aea8 <__alt_data_end+0xf800aea8>
1000b0e4:	8805883a 	mov	r2,r17
1000b0e8:	003fb006 	br	1000afac <__alt_data_end+0xf800afac>
1000b0ec:	8809883a 	mov	r4,r17
1000b0f0:	980b883a 	mov	r5,r19
1000b0f4:	00098e00 	call	100098e0 <memmove>
1000b0f8:	003fb206 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b0fc:	98800217 	ldw	r2,8(r19)
1000b100:	b8800415 	stw	r2,16(r23)
1000b104:	98800317 	ldw	r2,12(r19)
1000b108:	b8800515 	stw	r2,20(r23)
1000b10c:	31000726 	beq	r6,r4,1000b12c <_realloc_r+0x584>
1000b110:	b8800604 	addi	r2,r23,24
1000b114:	9cc00404 	addi	r19,r19,16
1000b118:	003fa406 	br	1000afac <__alt_data_end+0xf800afac>
1000b11c:	9009883a 	mov	r4,r18
1000b120:	000ee780 	call	1000ee78 <__malloc_unlock>
1000b124:	0005883a 	mov	r2,zero
1000b128:	003f0606 	br	1000ad44 <__alt_data_end+0xf800ad44>
1000b12c:	98c00417 	ldw	r3,16(r19)
1000b130:	9cc00604 	addi	r19,r19,24
1000b134:	b8800804 	addi	r2,r23,32
1000b138:	b8c00615 	stw	r3,24(r23)
1000b13c:	98ffff17 	ldw	r3,-4(r19)
1000b140:	b8c00715 	stw	r3,28(r23)
1000b144:	003f9906 	br	1000afac <__alt_data_end+0xf800afac>

1000b148 <__fpclassifyd>:
1000b148:	00a00034 	movhi	r2,32768
1000b14c:	10bfffc4 	addi	r2,r2,-1
1000b150:	2884703a 	and	r2,r5,r2
1000b154:	10000726 	beq	r2,zero,1000b174 <__fpclassifyd+0x2c>
1000b158:	00fffc34 	movhi	r3,65520
1000b15c:	019ff834 	movhi	r6,32736
1000b160:	28c7883a 	add	r3,r5,r3
1000b164:	31bfffc4 	addi	r6,r6,-1
1000b168:	30c00536 	bltu	r6,r3,1000b180 <__fpclassifyd+0x38>
1000b16c:	00800104 	movi	r2,4
1000b170:	f800283a 	ret
1000b174:	2000021e 	bne	r4,zero,1000b180 <__fpclassifyd+0x38>
1000b178:	00800084 	movi	r2,2
1000b17c:	f800283a 	ret
1000b180:	00dffc34 	movhi	r3,32752
1000b184:	019ff834 	movhi	r6,32736
1000b188:	28cb883a 	add	r5,r5,r3
1000b18c:	31bfffc4 	addi	r6,r6,-1
1000b190:	317ff62e 	bgeu	r6,r5,1000b16c <__alt_data_end+0xf800b16c>
1000b194:	01400434 	movhi	r5,16
1000b198:	297fffc4 	addi	r5,r5,-1
1000b19c:	28800236 	bltu	r5,r2,1000b1a8 <__fpclassifyd+0x60>
1000b1a0:	008000c4 	movi	r2,3
1000b1a4:	f800283a 	ret
1000b1a8:	10c00226 	beq	r2,r3,1000b1b4 <__fpclassifyd+0x6c>
1000b1ac:	0005883a 	mov	r2,zero
1000b1b0:	f800283a 	ret
1000b1b4:	2005003a 	cmpeq	r2,r4,zero
1000b1b8:	f800283a 	ret

1000b1bc <_sbrk_r>:
1000b1bc:	defffd04 	addi	sp,sp,-12
1000b1c0:	dc000015 	stw	r16,0(sp)
1000b1c4:	04040074 	movhi	r16,4097
1000b1c8:	dc400115 	stw	r17,4(sp)
1000b1cc:	84126f04 	addi	r16,r16,18876
1000b1d0:	2023883a 	mov	r17,r4
1000b1d4:	2809883a 	mov	r4,r5
1000b1d8:	dfc00215 	stw	ra,8(sp)
1000b1dc:	80000015 	stw	zero,0(r16)
1000b1e0:	000f06c0 	call	1000f06c <sbrk>
1000b1e4:	00ffffc4 	movi	r3,-1
1000b1e8:	10c00526 	beq	r2,r3,1000b200 <_sbrk_r+0x44>
1000b1ec:	dfc00217 	ldw	ra,8(sp)
1000b1f0:	dc400117 	ldw	r17,4(sp)
1000b1f4:	dc000017 	ldw	r16,0(sp)
1000b1f8:	dec00304 	addi	sp,sp,12
1000b1fc:	f800283a 	ret
1000b200:	80c00017 	ldw	r3,0(r16)
1000b204:	183ff926 	beq	r3,zero,1000b1ec <__alt_data_end+0xf800b1ec>
1000b208:	88c00015 	stw	r3,0(r17)
1000b20c:	003ff706 	br	1000b1ec <__alt_data_end+0xf800b1ec>

1000b210 <__sread>:
1000b210:	defffe04 	addi	sp,sp,-8
1000b214:	dc000015 	stw	r16,0(sp)
1000b218:	2821883a 	mov	r16,r5
1000b21c:	2940038f 	ldh	r5,14(r5)
1000b220:	dfc00115 	stw	ra,4(sp)
1000b224:	000cecc0 	call	1000cecc <_read_r>
1000b228:	10000716 	blt	r2,zero,1000b248 <__sread+0x38>
1000b22c:	80c01417 	ldw	r3,80(r16)
1000b230:	1887883a 	add	r3,r3,r2
1000b234:	80c01415 	stw	r3,80(r16)
1000b238:	dfc00117 	ldw	ra,4(sp)
1000b23c:	dc000017 	ldw	r16,0(sp)
1000b240:	dec00204 	addi	sp,sp,8
1000b244:	f800283a 	ret
1000b248:	80c0030b 	ldhu	r3,12(r16)
1000b24c:	18fbffcc 	andi	r3,r3,61439
1000b250:	80c0030d 	sth	r3,12(r16)
1000b254:	dfc00117 	ldw	ra,4(sp)
1000b258:	dc000017 	ldw	r16,0(sp)
1000b25c:	dec00204 	addi	sp,sp,8
1000b260:	f800283a 	ret

1000b264 <__seofread>:
1000b264:	0005883a 	mov	r2,zero
1000b268:	f800283a 	ret

1000b26c <__swrite>:
1000b26c:	2880030b 	ldhu	r2,12(r5)
1000b270:	defffb04 	addi	sp,sp,-20
1000b274:	dcc00315 	stw	r19,12(sp)
1000b278:	dc800215 	stw	r18,8(sp)
1000b27c:	dc400115 	stw	r17,4(sp)
1000b280:	dc000015 	stw	r16,0(sp)
1000b284:	dfc00415 	stw	ra,16(sp)
1000b288:	10c0400c 	andi	r3,r2,256
1000b28c:	2821883a 	mov	r16,r5
1000b290:	2027883a 	mov	r19,r4
1000b294:	3025883a 	mov	r18,r6
1000b298:	3823883a 	mov	r17,r7
1000b29c:	18000526 	beq	r3,zero,1000b2b4 <__swrite+0x48>
1000b2a0:	2940038f 	ldh	r5,14(r5)
1000b2a4:	000d883a 	mov	r6,zero
1000b2a8:	01c00084 	movi	r7,2
1000b2ac:	000ce700 	call	1000ce70 <_lseek_r>
1000b2b0:	8080030b 	ldhu	r2,12(r16)
1000b2b4:	8140038f 	ldh	r5,14(r16)
1000b2b8:	10bbffcc 	andi	r2,r2,61439
1000b2bc:	9809883a 	mov	r4,r19
1000b2c0:	900d883a 	mov	r6,r18
1000b2c4:	880f883a 	mov	r7,r17
1000b2c8:	8080030d 	sth	r2,12(r16)
1000b2cc:	dfc00417 	ldw	ra,16(sp)
1000b2d0:	dcc00317 	ldw	r19,12(sp)
1000b2d4:	dc800217 	ldw	r18,8(sp)
1000b2d8:	dc400117 	ldw	r17,4(sp)
1000b2dc:	dc000017 	ldw	r16,0(sp)
1000b2e0:	dec00504 	addi	sp,sp,20
1000b2e4:	000c94c1 	jmpi	1000c94c <_write_r>

1000b2e8 <__sseek>:
1000b2e8:	defffe04 	addi	sp,sp,-8
1000b2ec:	dc000015 	stw	r16,0(sp)
1000b2f0:	2821883a 	mov	r16,r5
1000b2f4:	2940038f 	ldh	r5,14(r5)
1000b2f8:	dfc00115 	stw	ra,4(sp)
1000b2fc:	000ce700 	call	1000ce70 <_lseek_r>
1000b300:	00ffffc4 	movi	r3,-1
1000b304:	10c00826 	beq	r2,r3,1000b328 <__sseek+0x40>
1000b308:	80c0030b 	ldhu	r3,12(r16)
1000b30c:	80801415 	stw	r2,80(r16)
1000b310:	18c40014 	ori	r3,r3,4096
1000b314:	80c0030d 	sth	r3,12(r16)
1000b318:	dfc00117 	ldw	ra,4(sp)
1000b31c:	dc000017 	ldw	r16,0(sp)
1000b320:	dec00204 	addi	sp,sp,8
1000b324:	f800283a 	ret
1000b328:	80c0030b 	ldhu	r3,12(r16)
1000b32c:	18fbffcc 	andi	r3,r3,61439
1000b330:	80c0030d 	sth	r3,12(r16)
1000b334:	dfc00117 	ldw	ra,4(sp)
1000b338:	dc000017 	ldw	r16,0(sp)
1000b33c:	dec00204 	addi	sp,sp,8
1000b340:	f800283a 	ret

1000b344 <__sclose>:
1000b344:	2940038f 	ldh	r5,14(r5)
1000b348:	000c9a81 	jmpi	1000c9a8 <_close_r>

1000b34c <strcmp>:
1000b34c:	2144b03a 	or	r2,r4,r5
1000b350:	108000cc 	andi	r2,r2,3
1000b354:	1000171e 	bne	r2,zero,1000b3b4 <strcmp+0x68>
1000b358:	20800017 	ldw	r2,0(r4)
1000b35c:	28c00017 	ldw	r3,0(r5)
1000b360:	10c0141e 	bne	r2,r3,1000b3b4 <strcmp+0x68>
1000b364:	027fbff4 	movhi	r9,65279
1000b368:	4a7fbfc4 	addi	r9,r9,-257
1000b36c:	0086303a 	nor	r3,zero,r2
1000b370:	02202074 	movhi	r8,32897
1000b374:	1245883a 	add	r2,r2,r9
1000b378:	42202004 	addi	r8,r8,-32640
1000b37c:	10c4703a 	and	r2,r2,r3
1000b380:	1204703a 	and	r2,r2,r8
1000b384:	10000226 	beq	r2,zero,1000b390 <strcmp+0x44>
1000b388:	00001706 	br	1000b3e8 <strcmp+0x9c>
1000b38c:	1000161e 	bne	r2,zero,1000b3e8 <strcmp+0x9c>
1000b390:	21000104 	addi	r4,r4,4
1000b394:	20c00017 	ldw	r3,0(r4)
1000b398:	29400104 	addi	r5,r5,4
1000b39c:	29800017 	ldw	r6,0(r5)
1000b3a0:	1a4f883a 	add	r7,r3,r9
1000b3a4:	00c4303a 	nor	r2,zero,r3
1000b3a8:	3884703a 	and	r2,r7,r2
1000b3ac:	1204703a 	and	r2,r2,r8
1000b3b0:	19bff626 	beq	r3,r6,1000b38c <__alt_data_end+0xf800b38c>
1000b3b4:	20800007 	ldb	r2,0(r4)
1000b3b8:	1000051e 	bne	r2,zero,1000b3d0 <strcmp+0x84>
1000b3bc:	00000606 	br	1000b3d8 <strcmp+0x8c>
1000b3c0:	21000044 	addi	r4,r4,1
1000b3c4:	20800007 	ldb	r2,0(r4)
1000b3c8:	29400044 	addi	r5,r5,1
1000b3cc:	10000226 	beq	r2,zero,1000b3d8 <strcmp+0x8c>
1000b3d0:	28c00007 	ldb	r3,0(r5)
1000b3d4:	10fffa26 	beq	r2,r3,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b3d8:	20800003 	ldbu	r2,0(r4)
1000b3dc:	28c00003 	ldbu	r3,0(r5)
1000b3e0:	10c5c83a 	sub	r2,r2,r3
1000b3e4:	f800283a 	ret
1000b3e8:	0005883a 	mov	r2,zero
1000b3ec:	f800283a 	ret

1000b3f0 <__sprint_r.part.0>:
1000b3f0:	28801917 	ldw	r2,100(r5)
1000b3f4:	defff604 	addi	sp,sp,-40
1000b3f8:	dd400515 	stw	r21,20(sp)
1000b3fc:	dcc00315 	stw	r19,12(sp)
1000b400:	dfc00915 	stw	ra,36(sp)
1000b404:	df000815 	stw	fp,32(sp)
1000b408:	ddc00715 	stw	r23,28(sp)
1000b40c:	dd800615 	stw	r22,24(sp)
1000b410:	dd000415 	stw	r20,16(sp)
1000b414:	dc800215 	stw	r18,8(sp)
1000b418:	dc400115 	stw	r17,4(sp)
1000b41c:	dc000015 	stw	r16,0(sp)
1000b420:	1088000c 	andi	r2,r2,8192
1000b424:	2827883a 	mov	r19,r5
1000b428:	302b883a 	mov	r21,r6
1000b42c:	10002d26 	beq	r2,zero,1000b4e4 <__sprint_r.part.0+0xf4>
1000b430:	30800217 	ldw	r2,8(r6)
1000b434:	35800017 	ldw	r22,0(r6)
1000b438:	10002826 	beq	r2,zero,1000b4dc <__sprint_r.part.0+0xec>
1000b43c:	2029883a 	mov	r20,r4
1000b440:	b5c00104 	addi	r23,r22,4
1000b444:	04bfffc4 	movi	r18,-1
1000b448:	bc400017 	ldw	r17,0(r23)
1000b44c:	b4000017 	ldw	r16,0(r22)
1000b450:	0039883a 	mov	fp,zero
1000b454:	8822d0ba 	srli	r17,r17,2
1000b458:	04400316 	blt	zero,r17,1000b468 <__sprint_r.part.0+0x78>
1000b45c:	00001706 	br	1000b4bc <__sprint_r.part.0+0xcc>
1000b460:	84000104 	addi	r16,r16,4
1000b464:	8f001526 	beq	r17,fp,1000b4bc <__sprint_r.part.0+0xcc>
1000b468:	81400017 	ldw	r5,0(r16)
1000b46c:	a009883a 	mov	r4,r20
1000b470:	980d883a 	mov	r6,r19
1000b474:	000cbe80 	call	1000cbe8 <_fputwc_r>
1000b478:	e7000044 	addi	fp,fp,1
1000b47c:	14bff81e 	bne	r2,r18,1000b460 <__alt_data_end+0xf800b460>
1000b480:	9005883a 	mov	r2,r18
1000b484:	a8000215 	stw	zero,8(r21)
1000b488:	a8000115 	stw	zero,4(r21)
1000b48c:	dfc00917 	ldw	ra,36(sp)
1000b490:	df000817 	ldw	fp,32(sp)
1000b494:	ddc00717 	ldw	r23,28(sp)
1000b498:	dd800617 	ldw	r22,24(sp)
1000b49c:	dd400517 	ldw	r21,20(sp)
1000b4a0:	dd000417 	ldw	r20,16(sp)
1000b4a4:	dcc00317 	ldw	r19,12(sp)
1000b4a8:	dc800217 	ldw	r18,8(sp)
1000b4ac:	dc400117 	ldw	r17,4(sp)
1000b4b0:	dc000017 	ldw	r16,0(sp)
1000b4b4:	dec00a04 	addi	sp,sp,40
1000b4b8:	f800283a 	ret
1000b4bc:	a8c00217 	ldw	r3,8(r21)
1000b4c0:	8c63883a 	add	r17,r17,r17
1000b4c4:	8c63883a 	add	r17,r17,r17
1000b4c8:	1c45c83a 	sub	r2,r3,r17
1000b4cc:	a8800215 	stw	r2,8(r21)
1000b4d0:	b5800204 	addi	r22,r22,8
1000b4d4:	bdc00204 	addi	r23,r23,8
1000b4d8:	103fdb1e 	bne	r2,zero,1000b448 <__alt_data_end+0xf800b448>
1000b4dc:	0005883a 	mov	r2,zero
1000b4e0:	003fe806 	br	1000b484 <__alt_data_end+0xf800b484>
1000b4e4:	000866c0 	call	1000866c <__sfvwrite_r>
1000b4e8:	003fe606 	br	1000b484 <__alt_data_end+0xf800b484>

1000b4ec <__sprint_r>:
1000b4ec:	30c00217 	ldw	r3,8(r6)
1000b4f0:	18000126 	beq	r3,zero,1000b4f8 <__sprint_r+0xc>
1000b4f4:	000b3f01 	jmpi	1000b3f0 <__sprint_r.part.0>
1000b4f8:	30000115 	stw	zero,4(r6)
1000b4fc:	0005883a 	mov	r2,zero
1000b500:	f800283a 	ret

1000b504 <___vfiprintf_internal_r>:
1000b504:	defeca04 	addi	sp,sp,-1240
1000b508:	dcc12f15 	stw	r19,1212(sp)
1000b50c:	dfc13515 	stw	ra,1236(sp)
1000b510:	df013415 	stw	fp,1232(sp)
1000b514:	ddc13315 	stw	r23,1228(sp)
1000b518:	dd813215 	stw	r22,1224(sp)
1000b51c:	dd413115 	stw	r21,1220(sp)
1000b520:	dd013015 	stw	r20,1216(sp)
1000b524:	dc812e15 	stw	r18,1208(sp)
1000b528:	dc412d15 	stw	r17,1204(sp)
1000b52c:	dc012c15 	stw	r16,1200(sp)
1000b530:	d9012115 	stw	r4,1156(sp)
1000b534:	d9412015 	stw	r5,1152(sp)
1000b538:	d9c12315 	stw	r7,1164(sp)
1000b53c:	3027883a 	mov	r19,r6
1000b540:	20000226 	beq	r4,zero,1000b54c <___vfiprintf_internal_r+0x48>
1000b544:	20800e17 	ldw	r2,56(r4)
1000b548:	1000f726 	beq	r2,zero,1000b928 <___vfiprintf_internal_r+0x424>
1000b54c:	d8812017 	ldw	r2,1152(sp)
1000b550:	10c0030b 	ldhu	r3,12(r2)
1000b554:	1908000c 	andi	r4,r3,8192
1000b558:	1805883a 	mov	r2,r3
1000b55c:	2000081e 	bne	r4,zero,1000b580 <___vfiprintf_internal_r+0x7c>
1000b560:	d9412017 	ldw	r5,1152(sp)
1000b564:	18880014 	ori	r2,r3,8192
1000b568:	00f7ffc4 	movi	r3,-8193
1000b56c:	29001917 	ldw	r4,100(r5)
1000b570:	2880030d 	sth	r2,12(r5)
1000b574:	20c8703a 	and	r4,r4,r3
1000b578:	29001915 	stw	r4,100(r5)
1000b57c:	1007883a 	mov	r3,r2
1000b580:	1100020c 	andi	r4,r2,8
1000b584:	2000a726 	beq	r4,zero,1000b824 <___vfiprintf_internal_r+0x320>
1000b588:	d9412017 	ldw	r5,1152(sp)
1000b58c:	29000417 	ldw	r4,16(r5)
1000b590:	2000a426 	beq	r4,zero,1000b824 <___vfiprintf_internal_r+0x320>
1000b594:	1080068c 	andi	r2,r2,26
1000b598:	01000284 	movi	r4,10
1000b59c:	1100ab26 	beq	r2,r4,1000b84c <___vfiprintf_internal_r+0x348>
1000b5a0:	d9010a04 	addi	r4,sp,1064
1000b5a4:	d94109c4 	addi	r5,sp,1063
1000b5a8:	07040074 	movhi	fp,4097
1000b5ac:	04440074 	movhi	r17,4097
1000b5b0:	2145c83a 	sub	r2,r4,r5
1000b5b4:	e704d304 	addi	fp,fp,4940
1000b5b8:	8c44cf04 	addi	r17,r17,4924
1000b5bc:	d9011e15 	stw	r4,1144(sp)
1000b5c0:	d9411f15 	stw	r5,1148(sp)
1000b5c4:	dec11a15 	stw	sp,1128(sp)
1000b5c8:	d8011c15 	stw	zero,1136(sp)
1000b5cc:	d8011b15 	stw	zero,1132(sp)
1000b5d0:	d8012715 	stw	zero,1180(sp)
1000b5d4:	d8012515 	stw	zero,1172(sp)
1000b5d8:	d811883a 	mov	r8,sp
1000b5dc:	d8812815 	stw	r2,1184(sp)
1000b5e0:	982f883a 	mov	r23,r19
1000b5e4:	b8800007 	ldb	r2,0(r23)
1000b5e8:	1003b026 	beq	r2,zero,1000c4ac <___vfiprintf_internal_r+0xfa8>
1000b5ec:	01000944 	movi	r4,37
1000b5f0:	1103ae26 	beq	r2,r4,1000c4ac <___vfiprintf_internal_r+0xfa8>
1000b5f4:	b805883a 	mov	r2,r23
1000b5f8:	00000106 	br	1000b600 <___vfiprintf_internal_r+0xfc>
1000b5fc:	19000326 	beq	r3,r4,1000b60c <___vfiprintf_internal_r+0x108>
1000b600:	10800044 	addi	r2,r2,1
1000b604:	10c00007 	ldb	r3,0(r2)
1000b608:	183ffc1e 	bne	r3,zero,1000b5fc <__alt_data_end+0xf800b5fc>
1000b60c:	15e1c83a 	sub	r16,r2,r23
1000b610:	1029883a 	mov	r20,r2
1000b614:	80001026 	beq	r16,zero,1000b658 <___vfiprintf_internal_r+0x154>
1000b618:	d8c11c17 	ldw	r3,1136(sp)
1000b61c:	d8811b17 	ldw	r2,1132(sp)
1000b620:	45c00015 	stw	r23,0(r8)
1000b624:	80c7883a 	add	r3,r16,r3
1000b628:	10800044 	addi	r2,r2,1
1000b62c:	44000115 	stw	r16,4(r8)
1000b630:	d8c11c15 	stw	r3,1136(sp)
1000b634:	d8811b15 	stw	r2,1132(sp)
1000b638:	010001c4 	movi	r4,7
1000b63c:	2080740e 	bge	r4,r2,1000b810 <___vfiprintf_internal_r+0x30c>
1000b640:	1803a71e 	bne	r3,zero,1000c4e0 <___vfiprintf_internal_r+0xfdc>
1000b644:	d8c12517 	ldw	r3,1172(sp)
1000b648:	d8011b15 	stw	zero,1132(sp)
1000b64c:	d811883a 	mov	r8,sp
1000b650:	1c07883a 	add	r3,r3,r16
1000b654:	d8c12515 	stw	r3,1172(sp)
1000b658:	a0800007 	ldb	r2,0(r20)
1000b65c:	1002bf26 	beq	r2,zero,1000c15c <___vfiprintf_internal_r+0xc58>
1000b660:	a5c00044 	addi	r23,r20,1
1000b664:	a1800047 	ldb	r6,1(r20)
1000b668:	d8011d85 	stb	zero,1142(sp)
1000b66c:	d8012205 	stb	zero,1160(sp)
1000b670:	043fffc4 	movi	r16,-1
1000b674:	d8012415 	stw	zero,1168(sp)
1000b678:	0025883a 	mov	r18,zero
1000b67c:	05001604 	movi	r20,88
1000b680:	05400244 	movi	r21,9
1000b684:	4027883a 	mov	r19,r8
1000b688:	bdc00044 	addi	r23,r23,1
1000b68c:	30bff804 	addi	r2,r6,-32
1000b690:	a0825636 	bltu	r20,r2,1000bfec <___vfiprintf_internal_r+0xae8>
1000b694:	100490ba 	slli	r2,r2,2
1000b698:	01040074 	movhi	r4,4097
1000b69c:	212dab04 	addi	r4,r4,-18772
1000b6a0:	1105883a 	add	r2,r2,r4
1000b6a4:	10800017 	ldw	r2,0(r2)
1000b6a8:	1000683a 	jmp	r2
1000b6ac:	1000bf7c 	xorhi	zero,r2,765
1000b6b0:	1000bfec 	andhi	zero,r2,767
1000b6b4:	1000bfec 	andhi	zero,r2,767
1000b6b8:	1000bfe0 	cmpeqi	zero,r2,767
1000b6bc:	1000bfec 	andhi	zero,r2,767
1000b6c0:	1000bfec 	andhi	zero,r2,767
1000b6c4:	1000bfec 	andhi	zero,r2,767
1000b6c8:	1000bfec 	andhi	zero,r2,767
1000b6cc:	1000bfec 	andhi	zero,r2,767
1000b6d0:	1000bfec 	andhi	zero,r2,767
1000b6d4:	1000bd6c 	andhi	zero,r2,757
1000b6d8:	1000bf94 	ori	zero,r2,766
1000b6dc:	1000bfec 	andhi	zero,r2,767
1000b6e0:	1000b940 	call	11000b94 <_gp+0xfe5d58>
1000b6e4:	1000bd90 	cmplti	zero,r2,758
1000b6e8:	1000bfec 	andhi	zero,r2,767
1000b6ec:	1000b94c 	andi	zero,r2,741
1000b6f0:	1000b958 	cmpnei	zero,r2,741
1000b6f4:	1000b958 	cmpnei	zero,r2,741
1000b6f8:	1000b958 	cmpnei	zero,r2,741
1000b6fc:	1000b958 	cmpnei	zero,r2,741
1000b700:	1000b958 	cmpnei	zero,r2,741
1000b704:	1000b958 	cmpnei	zero,r2,741
1000b708:	1000b958 	cmpnei	zero,r2,741
1000b70c:	1000b958 	cmpnei	zero,r2,741
1000b710:	1000b958 	cmpnei	zero,r2,741
1000b714:	1000bfec 	andhi	zero,r2,767
1000b718:	1000bfec 	andhi	zero,r2,767
1000b71c:	1000bfec 	andhi	zero,r2,767
1000b720:	1000bfec 	andhi	zero,r2,767
1000b724:	1000bfec 	andhi	zero,r2,767
1000b728:	1000bfec 	andhi	zero,r2,767
1000b72c:	1000bfec 	andhi	zero,r2,767
1000b730:	1000bfec 	andhi	zero,r2,767
1000b734:	1000bfec 	andhi	zero,r2,767
1000b738:	1000bfec 	andhi	zero,r2,767
1000b73c:	1000b998 	cmpnei	zero,r2,742
1000b740:	1000bfec 	andhi	zero,r2,767
1000b744:	1000bfec 	andhi	zero,r2,767
1000b748:	1000bfec 	andhi	zero,r2,767
1000b74c:	1000bfec 	andhi	zero,r2,767
1000b750:	1000bfec 	andhi	zero,r2,767
1000b754:	1000bfec 	andhi	zero,r2,767
1000b758:	1000bfec 	andhi	zero,r2,767
1000b75c:	1000bfec 	andhi	zero,r2,767
1000b760:	1000bfec 	andhi	zero,r2,767
1000b764:	1000bfec 	andhi	zero,r2,767
1000b768:	1000bc88 	cmpgei	zero,r2,754
1000b76c:	1000bfec 	andhi	zero,r2,767
1000b770:	1000bfec 	andhi	zero,r2,767
1000b774:	1000bfec 	andhi	zero,r2,767
1000b778:	1000bfec 	andhi	zero,r2,767
1000b77c:	1000bfec 	andhi	zero,r2,767
1000b780:	1000bcc8 	cmpgei	zero,r2,755
1000b784:	1000bfec 	andhi	zero,r2,767
1000b788:	1000bfec 	andhi	zero,r2,767
1000b78c:	1000bd0c 	andi	zero,r2,756
1000b790:	1000bfec 	andhi	zero,r2,767
1000b794:	1000bfec 	andhi	zero,r2,767
1000b798:	1000bfec 	andhi	zero,r2,767
1000b79c:	1000bfec 	andhi	zero,r2,767
1000b7a0:	1000bfec 	andhi	zero,r2,767
1000b7a4:	1000bfec 	andhi	zero,r2,767
1000b7a8:	1000bfec 	andhi	zero,r2,767
1000b7ac:	1000bfec 	andhi	zero,r2,767
1000b7b0:	1000bfec 	andhi	zero,r2,767
1000b7b4:	1000bfec 	andhi	zero,r2,767
1000b7b8:	1000bc54 	ori	zero,r2,753
1000b7bc:	1000bfa4 	muli	zero,r2,766
1000b7c0:	1000bfec 	andhi	zero,r2,767
1000b7c4:	1000bfec 	andhi	zero,r2,767
1000b7c8:	1000bfec 	andhi	zero,r2,767
1000b7cc:	1000bde0 	cmpeqi	zero,r2,759
1000b7d0:	1000bfa4 	muli	zero,r2,766
1000b7d4:	1000bfec 	andhi	zero,r2,767
1000b7d8:	1000bfec 	andhi	zero,r2,767
1000b7dc:	1000bcf8 	rdprs	zero,r2,755
1000b7e0:	1000bfec 	andhi	zero,r2,767
1000b7e4:	1000bf44 	addi	zero,r2,765
1000b7e8:	1000becc 	andi	zero,r2,763
1000b7ec:	1000bf00 	call	11000bf0 <_gp+0xfe5db4>
1000b7f0:	1000bdec 	andhi	zero,r2,759
1000b7f4:	1000bfec 	andhi	zero,r2,767
1000b7f8:	1000bdf8 	rdprs	zero,r2,759
1000b7fc:	1000bfec 	andhi	zero,r2,767
1000b800:	1000be54 	ori	zero,r2,761
1000b804:	1000bfec 	andhi	zero,r2,767
1000b808:	1000bfec 	andhi	zero,r2,767
1000b80c:	1000be88 	cmpgei	zero,r2,762
1000b810:	42000204 	addi	r8,r8,8
1000b814:	d8c12517 	ldw	r3,1172(sp)
1000b818:	1c07883a 	add	r3,r3,r16
1000b81c:	d8c12515 	stw	r3,1172(sp)
1000b820:	003f8d06 	br	1000b658 <__alt_data_end+0xf800b658>
1000b824:	d9012117 	ldw	r4,1156(sp)
1000b828:	d9412017 	ldw	r5,1152(sp)
1000b82c:	00061cc0 	call	100061cc <__swsetup_r>
1000b830:	1000301e 	bne	r2,zero,1000b8f4 <___vfiprintf_internal_r+0x3f0>
1000b834:	d8812017 	ldw	r2,1152(sp)
1000b838:	01000284 	movi	r4,10
1000b83c:	10c0030b 	ldhu	r3,12(r2)
1000b840:	1805883a 	mov	r2,r3
1000b844:	1080068c 	andi	r2,r2,26
1000b848:	113f551e 	bne	r2,r4,1000b5a0 <__alt_data_end+0xf800b5a0>
1000b84c:	d9012017 	ldw	r4,1152(sp)
1000b850:	2080038b 	ldhu	r2,14(r4)
1000b854:	113fffcc 	andi	r4,r2,65535
1000b858:	2120001c 	xori	r4,r4,32768
1000b85c:	21200004 	addi	r4,r4,-32768
1000b860:	203f4f16 	blt	r4,zero,1000b5a0 <__alt_data_end+0xf800b5a0>
1000b864:	d9412017 	ldw	r5,1152(sp)
1000b868:	d9012117 	ldw	r4,1156(sp)
1000b86c:	d9c12317 	ldw	r7,1164(sp)
1000b870:	2b001917 	ldw	r12,100(r5)
1000b874:	2ac00717 	ldw	r11,28(r5)
1000b878:	2a800917 	ldw	r10,36(r5)
1000b87c:	02010004 	movi	r8,1024
1000b880:	18ffff4c 	andi	r3,r3,65533
1000b884:	da0b883a 	add	r5,sp,r8
1000b888:	980d883a 	mov	r6,r19
1000b88c:	d8c1030d 	sth	r3,1036(sp)
1000b890:	db011915 	stw	r12,1124(sp)
1000b894:	d881038d 	sth	r2,1038(sp)
1000b898:	dac10715 	stw	r11,1052(sp)
1000b89c:	da810915 	stw	r10,1060(sp)
1000b8a0:	dec10015 	stw	sp,1024(sp)
1000b8a4:	dec10415 	stw	sp,1040(sp)
1000b8a8:	da010215 	stw	r8,1032(sp)
1000b8ac:	da010515 	stw	r8,1044(sp)
1000b8b0:	d8010615 	stw	zero,1048(sp)
1000b8b4:	000b5040 	call	1000b504 <___vfiprintf_internal_r>
1000b8b8:	1021883a 	mov	r16,r2
1000b8bc:	10000416 	blt	r2,zero,1000b8d0 <___vfiprintf_internal_r+0x3cc>
1000b8c0:	d9012117 	ldw	r4,1156(sp)
1000b8c4:	d9410004 	addi	r5,sp,1024
1000b8c8:	0007c4c0 	call	10007c4c <_fflush_r>
1000b8cc:	10040f1e 	bne	r2,zero,1000c90c <___vfiprintf_internal_r+0x1408>
1000b8d0:	d881030b 	ldhu	r2,1036(sp)
1000b8d4:	1080100c 	andi	r2,r2,64
1000b8d8:	10000426 	beq	r2,zero,1000b8ec <___vfiprintf_internal_r+0x3e8>
1000b8dc:	d8c12017 	ldw	r3,1152(sp)
1000b8e0:	1880030b 	ldhu	r2,12(r3)
1000b8e4:	10801014 	ori	r2,r2,64
1000b8e8:	1880030d 	sth	r2,12(r3)
1000b8ec:	8005883a 	mov	r2,r16
1000b8f0:	00000106 	br	1000b8f8 <___vfiprintf_internal_r+0x3f4>
1000b8f4:	00bfffc4 	movi	r2,-1
1000b8f8:	dfc13517 	ldw	ra,1236(sp)
1000b8fc:	df013417 	ldw	fp,1232(sp)
1000b900:	ddc13317 	ldw	r23,1228(sp)
1000b904:	dd813217 	ldw	r22,1224(sp)
1000b908:	dd413117 	ldw	r21,1220(sp)
1000b90c:	dd013017 	ldw	r20,1216(sp)
1000b910:	dcc12f17 	ldw	r19,1212(sp)
1000b914:	dc812e17 	ldw	r18,1208(sp)
1000b918:	dc412d17 	ldw	r17,1204(sp)
1000b91c:	dc012c17 	ldw	r16,1200(sp)
1000b920:	dec13604 	addi	sp,sp,1240
1000b924:	f800283a 	ret
1000b928:	00082080 	call	10008208 <__sinit>
1000b92c:	003f0706 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b930:	d8c12417 	ldw	r3,1168(sp)
1000b934:	d8812315 	stw	r2,1164(sp)
1000b938:	00c7c83a 	sub	r3,zero,r3
1000b93c:	d8c12415 	stw	r3,1168(sp)
1000b940:	94800114 	ori	r18,r18,4
1000b944:	b9800007 	ldb	r6,0(r23)
1000b948:	003f4f06 	br	1000b688 <__alt_data_end+0xf800b688>
1000b94c:	94802014 	ori	r18,r18,128
1000b950:	b9800007 	ldb	r6,0(r23)
1000b954:	003f4c06 	br	1000b688 <__alt_data_end+0xf800b688>
1000b958:	dc012615 	stw	r16,1176(sp)
1000b95c:	d8012415 	stw	zero,1168(sp)
1000b960:	35bff404 	addi	r22,r6,-48
1000b964:	0009883a 	mov	r4,zero
1000b968:	b821883a 	mov	r16,r23
1000b96c:	01400284 	movi	r5,10
1000b970:	0002b140 	call	10002b14 <__mulsi3>
1000b974:	81800007 	ldb	r6,0(r16)
1000b978:	1589883a 	add	r4,r2,r22
1000b97c:	bdc00044 	addi	r23,r23,1
1000b980:	35bff404 	addi	r22,r6,-48
1000b984:	b821883a 	mov	r16,r23
1000b988:	adbff82e 	bgeu	r21,r22,1000b96c <__alt_data_end+0xf800b96c>
1000b98c:	d9012415 	stw	r4,1168(sp)
1000b990:	dc012617 	ldw	r16,1176(sp)
1000b994:	003f3d06 	br	1000b68c <__alt_data_end+0xf800b68c>
1000b998:	d8c12203 	ldbu	r3,1160(sp)
1000b99c:	94800414 	ori	r18,r18,16
1000b9a0:	9080080c 	andi	r2,r18,32
1000b9a4:	d8c11d85 	stb	r3,1142(sp)
1000b9a8:	9811883a 	mov	r8,r19
1000b9ac:	d8c12317 	ldw	r3,1164(sp)
1000b9b0:	10018226 	beq	r2,zero,1000bfbc <___vfiprintf_internal_r+0xab8>
1000b9b4:	d9012317 	ldw	r4,1164(sp)
1000b9b8:	18800117 	ldw	r2,4(r3)
1000b9bc:	1cc00017 	ldw	r19,0(r3)
1000b9c0:	21000204 	addi	r4,r4,8
1000b9c4:	d9012315 	stw	r4,1164(sp)
1000b9c8:	102b883a 	mov	r21,r2
1000b9cc:	10030016 	blt	r2,zero,1000c5d0 <___vfiprintf_internal_r+0x10cc>
1000b9d0:	dd811d83 	ldbu	r22,1142(sp)
1000b9d4:	8029883a 	mov	r20,r16
1000b9d8:	00800044 	movi	r2,1
1000b9dc:	9d46b03a 	or	r3,r19,r21
1000b9e0:	80000216 	blt	r16,zero,1000b9ec <___vfiprintf_internal_r+0x4e8>
1000b9e4:	013fdfc4 	movi	r4,-129
1000b9e8:	9124703a 	and	r18,r18,r4
1000b9ec:	1801b41e 	bne	r3,zero,1000c0c0 <___vfiprintf_internal_r+0xbbc>
1000b9f0:	80028126 	beq	r16,zero,1000c3f8 <___vfiprintf_internal_r+0xef4>
1000b9f4:	10803fcc 	andi	r2,r2,255
1000b9f8:	00c00044 	movi	r3,1
1000b9fc:	10c1d126 	beq	r2,r3,1000c144 <___vfiprintf_internal_r+0xc40>
1000ba00:	00c00084 	movi	r3,2
1000ba04:	10c28626 	beq	r2,r3,1000c420 <___vfiprintf_internal_r+0xf1c>
1000ba08:	d8c10a04 	addi	r3,sp,1064
1000ba0c:	9808d0fa 	srli	r4,r19,3
1000ba10:	a80a977a 	slli	r5,r21,29
1000ba14:	a82ad0fa 	srli	r21,r21,3
1000ba18:	9cc001cc 	andi	r19,r19,7
1000ba1c:	98800c04 	addi	r2,r19,48
1000ba20:	18ffffc4 	addi	r3,r3,-1
1000ba24:	2926b03a 	or	r19,r5,r4
1000ba28:	18800005 	stb	r2,0(r3)
1000ba2c:	9d48b03a 	or	r4,r19,r21
1000ba30:	203ff61e 	bne	r4,zero,1000ba0c <__alt_data_end+0xf800ba0c>
1000ba34:	9100004c 	andi	r4,r18,1
1000ba38:	d8c12215 	stw	r3,1160(sp)
1000ba3c:	2002b31e 	bne	r4,zero,1000c50c <___vfiprintf_internal_r+0x1008>
1000ba40:	d9411e17 	ldw	r5,1144(sp)
1000ba44:	28e9c83a 	sub	r20,r5,r3
1000ba48:	a02b883a 	mov	r21,r20
1000ba4c:	a400010e 	bge	r20,r16,1000ba54 <___vfiprintf_internal_r+0x550>
1000ba50:	802b883a 	mov	r21,r16
1000ba54:	b5803fcc 	andi	r22,r22,255
1000ba58:	b580201c 	xori	r22,r22,128
1000ba5c:	b5bfe004 	addi	r22,r22,-128
1000ba60:	b0000126 	beq	r22,zero,1000ba68 <___vfiprintf_internal_r+0x564>
1000ba64:	ad400044 	addi	r21,r21,1
1000ba68:	9280008c 	andi	r10,r18,2
1000ba6c:	50000126 	beq	r10,zero,1000ba74 <___vfiprintf_internal_r+0x570>
1000ba70:	ad400084 	addi	r21,r21,2
1000ba74:	9580210c 	andi	r22,r18,132
1000ba78:	b001751e 	bne	r22,zero,1000c050 <___vfiprintf_internal_r+0xb4c>
1000ba7c:	d9012417 	ldw	r4,1168(sp)
1000ba80:	2567c83a 	sub	r19,r4,r21
1000ba84:	04c1720e 	bge	zero,r19,1000c050 <___vfiprintf_internal_r+0xb4c>
1000ba88:	01c00404 	movi	r7,16
1000ba8c:	d8c11c17 	ldw	r3,1136(sp)
1000ba90:	3cc36b0e 	bge	r7,r19,1000c840 <___vfiprintf_internal_r+0x133c>
1000ba94:	00840074 	movhi	r2,4097
1000ba98:	1084d304 	addi	r2,r2,4940
1000ba9c:	dc012915 	stw	r16,1188(sp)
1000baa0:	d9011b17 	ldw	r4,1132(sp)
1000baa4:	9821883a 	mov	r16,r19
1000baa8:	d8812615 	stw	r2,1176(sp)
1000baac:	030001c4 	movi	r12,7
1000bab0:	5027883a 	mov	r19,r10
1000bab4:	00000506 	br	1000bacc <___vfiprintf_internal_r+0x5c8>
1000bab8:	21400084 	addi	r5,r4,2
1000babc:	42000204 	addi	r8,r8,8
1000bac0:	1009883a 	mov	r4,r2
1000bac4:	843ffc04 	addi	r16,r16,-16
1000bac8:	3c000d0e 	bge	r7,r16,1000bb00 <___vfiprintf_internal_r+0x5fc>
1000bacc:	18c00404 	addi	r3,r3,16
1000bad0:	20800044 	addi	r2,r4,1
1000bad4:	47000015 	stw	fp,0(r8)
1000bad8:	41c00115 	stw	r7,4(r8)
1000badc:	d8c11c15 	stw	r3,1136(sp)
1000bae0:	d8811b15 	stw	r2,1132(sp)
1000bae4:	60bff40e 	bge	r12,r2,1000bab8 <__alt_data_end+0xf800bab8>
1000bae8:	18014b1e 	bne	r3,zero,1000c018 <___vfiprintf_internal_r+0xb14>
1000baec:	843ffc04 	addi	r16,r16,-16
1000baf0:	0009883a 	mov	r4,zero
1000baf4:	01400044 	movi	r5,1
1000baf8:	d811883a 	mov	r8,sp
1000bafc:	3c3ff316 	blt	r7,r16,1000bacc <__alt_data_end+0xf800bacc>
1000bb00:	9815883a 	mov	r10,r19
1000bb04:	8027883a 	mov	r19,r16
1000bb08:	dc012917 	ldw	r16,1188(sp)
1000bb0c:	d9012617 	ldw	r4,1176(sp)
1000bb10:	98c7883a 	add	r3,r19,r3
1000bb14:	44c00115 	stw	r19,4(r8)
1000bb18:	41000015 	stw	r4,0(r8)
1000bb1c:	d8c11c15 	stw	r3,1136(sp)
1000bb20:	d9411b15 	stw	r5,1132(sp)
1000bb24:	008001c4 	movi	r2,7
1000bb28:	11425116 	blt	r2,r5,1000c470 <___vfiprintf_internal_r+0xf6c>
1000bb2c:	d9011d87 	ldb	r4,1142(sp)
1000bb30:	42000204 	addi	r8,r8,8
1000bb34:	28800044 	addi	r2,r5,1
1000bb38:	20014a1e 	bne	r4,zero,1000c064 <___vfiprintf_internal_r+0xb60>
1000bb3c:	50000c26 	beq	r10,zero,1000bb70 <___vfiprintf_internal_r+0x66c>
1000bb40:	d9011d04 	addi	r4,sp,1140
1000bb44:	18c00084 	addi	r3,r3,2
1000bb48:	41000015 	stw	r4,0(r8)
1000bb4c:	01000084 	movi	r4,2
1000bb50:	41000115 	stw	r4,4(r8)
1000bb54:	d8c11c15 	stw	r3,1136(sp)
1000bb58:	d8811b15 	stw	r2,1132(sp)
1000bb5c:	010001c4 	movi	r4,7
1000bb60:	20822016 	blt	r4,r2,1000c3e4 <___vfiprintf_internal_r+0xee0>
1000bb64:	100b883a 	mov	r5,r2
1000bb68:	42000204 	addi	r8,r8,8
1000bb6c:	10800044 	addi	r2,r2,1
1000bb70:	01002004 	movi	r4,128
1000bb74:	b101de26 	beq	r22,r4,1000c2f0 <___vfiprintf_internal_r+0xdec>
1000bb78:	8521c83a 	sub	r16,r16,r20
1000bb7c:	0400230e 	bge	zero,r16,1000bc0c <___vfiprintf_internal_r+0x708>
1000bb80:	04c00404 	movi	r19,16
1000bb84:	9c030d0e 	bge	r19,r16,1000c7bc <___vfiprintf_internal_r+0x12b8>
1000bb88:	00840074 	movhi	r2,4097
1000bb8c:	1084cf04 	addi	r2,r2,4924
1000bb90:	d8812615 	stw	r2,1176(sp)
1000bb94:	058001c4 	movi	r22,7
1000bb98:	00000506 	br	1000bbb0 <___vfiprintf_internal_r+0x6ac>
1000bb9c:	28800084 	addi	r2,r5,2
1000bba0:	42000204 	addi	r8,r8,8
1000bba4:	200b883a 	mov	r5,r4
1000bba8:	843ffc04 	addi	r16,r16,-16
1000bbac:	9c000d0e 	bge	r19,r16,1000bbe4 <___vfiprintf_internal_r+0x6e0>
1000bbb0:	18c00404 	addi	r3,r3,16
1000bbb4:	29000044 	addi	r4,r5,1
1000bbb8:	44400015 	stw	r17,0(r8)
1000bbbc:	44c00115 	stw	r19,4(r8)
1000bbc0:	d8c11c15 	stw	r3,1136(sp)
1000bbc4:	d9011b15 	stw	r4,1132(sp)
1000bbc8:	b13ff40e 	bge	r22,r4,1000bb9c <__alt_data_end+0xf800bb9c>
1000bbcc:	1801321e 	bne	r3,zero,1000c098 <___vfiprintf_internal_r+0xb94>
1000bbd0:	843ffc04 	addi	r16,r16,-16
1000bbd4:	000b883a 	mov	r5,zero
1000bbd8:	00800044 	movi	r2,1
1000bbdc:	d811883a 	mov	r8,sp
1000bbe0:	9c3ff316 	blt	r19,r16,1000bbb0 <__alt_data_end+0xf800bbb0>
1000bbe4:	d9012617 	ldw	r4,1176(sp)
1000bbe8:	1c07883a 	add	r3,r3,r16
1000bbec:	44000115 	stw	r16,4(r8)
1000bbf0:	41000015 	stw	r4,0(r8)
1000bbf4:	d8c11c15 	stw	r3,1136(sp)
1000bbf8:	d8811b15 	stw	r2,1132(sp)
1000bbfc:	010001c4 	movi	r4,7
1000bc00:	20816216 	blt	r4,r2,1000c18c <___vfiprintf_internal_r+0xc88>
1000bc04:	42000204 	addi	r8,r8,8
1000bc08:	10800044 	addi	r2,r2,1
1000bc0c:	d9012217 	ldw	r4,1160(sp)
1000bc10:	1d07883a 	add	r3,r3,r20
1000bc14:	45000115 	stw	r20,4(r8)
1000bc18:	41000015 	stw	r4,0(r8)
1000bc1c:	d8c11c15 	stw	r3,1136(sp)
1000bc20:	d8811b15 	stw	r2,1132(sp)
1000bc24:	010001c4 	movi	r4,7
1000bc28:	2081610e 	bge	r4,r2,1000c1b0 <___vfiprintf_internal_r+0xcac>
1000bc2c:	1802211e 	bne	r3,zero,1000c4b4 <___vfiprintf_internal_r+0xfb0>
1000bc30:	d8011b15 	stw	zero,1132(sp)
1000bc34:	9480010c 	andi	r18,r18,4
1000bc38:	9002171e 	bne	r18,zero,1000c498 <___vfiprintf_internal_r+0xf94>
1000bc3c:	d9412417 	ldw	r5,1168(sp)
1000bc40:	a9433716 	blt	r21,r5,1000c920 <___vfiprintf_internal_r+0x141c>
1000bc44:	d8812517 	ldw	r2,1172(sp)
1000bc48:	1545883a 	add	r2,r2,r21
1000bc4c:	d8812515 	stw	r2,1172(sp)
1000bc50:	00019a06 	br	1000c2bc <___vfiprintf_internal_r+0xdb8>
1000bc54:	d8c12317 	ldw	r3,1164(sp)
1000bc58:	05400044 	movi	r21,1
1000bc5c:	9811883a 	mov	r8,r19
1000bc60:	18800017 	ldw	r2,0(r3)
1000bc64:	18c00104 	addi	r3,r3,4
1000bc68:	d8c12315 	stw	r3,1164(sp)
1000bc6c:	d8c10004 	addi	r3,sp,1024
1000bc70:	d8011d85 	stb	zero,1142(sp)
1000bc74:	d8810005 	stb	r2,1024(sp)
1000bc78:	a829883a 	mov	r20,r21
1000bc7c:	d8c12215 	stw	r3,1160(sp)
1000bc80:	0021883a 	mov	r16,zero
1000bc84:	003f7806 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bc88:	94800414 	ori	r18,r18,16
1000bc8c:	9080080c 	andi	r2,r18,32
1000bc90:	9811883a 	mov	r8,r19
1000bc94:	10009026 	beq	r2,zero,1000bed8 <___vfiprintf_internal_r+0x9d4>
1000bc98:	d8812317 	ldw	r2,1164(sp)
1000bc9c:	d8c12317 	ldw	r3,1164(sp)
1000bca0:	14c00017 	ldw	r19,0(r2)
1000bca4:	15400117 	ldw	r21,4(r2)
1000bca8:	18c00204 	addi	r3,r3,8
1000bcac:	d8c12315 	stw	r3,1164(sp)
1000bcb0:	0005883a 	mov	r2,zero
1000bcb4:	9d46b03a 	or	r3,r19,r21
1000bcb8:	d8011d85 	stb	zero,1142(sp)
1000bcbc:	8029883a 	mov	r20,r16
1000bcc0:	002d883a 	mov	r22,zero
1000bcc4:	003f4606 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000bcc8:	94800414 	ori	r18,r18,16
1000bccc:	9080080c 	andi	r2,r18,32
1000bcd0:	9811883a 	mov	r8,r19
1000bcd4:	10006226 	beq	r2,zero,1000be60 <___vfiprintf_internal_r+0x95c>
1000bcd8:	d9012317 	ldw	r4,1164(sp)
1000bcdc:	00800044 	movi	r2,1
1000bce0:	24c00017 	ldw	r19,0(r4)
1000bce4:	25400117 	ldw	r21,4(r4)
1000bce8:	21000204 	addi	r4,r4,8
1000bcec:	d9012315 	stw	r4,1164(sp)
1000bcf0:	9d46b03a 	or	r3,r19,r21
1000bcf4:	003ff006 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000bcf8:	b9800007 	ldb	r6,0(r23)
1000bcfc:	00801b04 	movi	r2,108
1000bd00:	3082b226 	beq	r6,r2,1000c7cc <___vfiprintf_internal_r+0x12c8>
1000bd04:	94800414 	ori	r18,r18,16
1000bd08:	003e5f06 	br	1000b688 <__alt_data_end+0xf800b688>
1000bd0c:	d8c12203 	ldbu	r3,1160(sp)
1000bd10:	01040074 	movhi	r4,4097
1000bd14:	21046904 	addi	r4,r4,4516
1000bd18:	d8c11d85 	stb	r3,1142(sp)
1000bd1c:	d9012715 	stw	r4,1180(sp)
1000bd20:	90c0080c 	andi	r3,r18,32
1000bd24:	9811883a 	mov	r8,r19
1000bd28:	d8812317 	ldw	r2,1164(sp)
1000bd2c:	18005f26 	beq	r3,zero,1000beac <___vfiprintf_internal_r+0x9a8>
1000bd30:	d9012317 	ldw	r4,1164(sp)
1000bd34:	14c00017 	ldw	r19,0(r2)
1000bd38:	15400117 	ldw	r21,4(r2)
1000bd3c:	21000204 	addi	r4,r4,8
1000bd40:	d9012315 	stw	r4,1164(sp)
1000bd44:	9080004c 	andi	r2,r18,1
1000bd48:	1001e226 	beq	r2,zero,1000c4d4 <___vfiprintf_internal_r+0xfd0>
1000bd4c:	9d46b03a 	or	r3,r19,r21
1000bd50:	18024e26 	beq	r3,zero,1000c68c <___vfiprintf_internal_r+0x1188>
1000bd54:	00800c04 	movi	r2,48
1000bd58:	d8811d05 	stb	r2,1140(sp)
1000bd5c:	d9811d45 	stb	r6,1141(sp)
1000bd60:	94800094 	ori	r18,r18,2
1000bd64:	00800084 	movi	r2,2
1000bd68:	003fd306 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000bd6c:	d9012317 	ldw	r4,1164(sp)
1000bd70:	d9412317 	ldw	r5,1164(sp)
1000bd74:	21000017 	ldw	r4,0(r4)
1000bd78:	28800104 	addi	r2,r5,4
1000bd7c:	d9012415 	stw	r4,1168(sp)
1000bd80:	203eeb16 	blt	r4,zero,1000b930 <__alt_data_end+0xf800b930>
1000bd84:	d8812315 	stw	r2,1164(sp)
1000bd88:	b9800007 	ldb	r6,0(r23)
1000bd8c:	003e3e06 	br	1000b688 <__alt_data_end+0xf800b688>
1000bd90:	b9800007 	ldb	r6,0(r23)
1000bd94:	01000a84 	movi	r4,42
1000bd98:	b8800044 	addi	r2,r23,1
1000bd9c:	3102d226 	beq	r6,r4,1000c8e8 <___vfiprintf_internal_r+0x13e4>
1000bda0:	35bff404 	addi	r22,r6,-48
1000bda4:	102f883a 	mov	r23,r2
1000bda8:	0021883a 	mov	r16,zero
1000bdac:	adbe3736 	bltu	r21,r22,1000b68c <__alt_data_end+0xf800b68c>
1000bdb0:	0009883a 	mov	r4,zero
1000bdb4:	01400284 	movi	r5,10
1000bdb8:	0002b140 	call	10002b14 <__mulsi3>
1000bdbc:	b9800007 	ldb	r6,0(r23)
1000bdc0:	b089883a 	add	r4,r22,r2
1000bdc4:	bdc00044 	addi	r23,r23,1
1000bdc8:	35bff404 	addi	r22,r6,-48
1000bdcc:	adbff92e 	bgeu	r21,r22,1000bdb4 <__alt_data_end+0xf800bdb4>
1000bdd0:	2021883a 	mov	r16,r4
1000bdd4:	203e2d0e 	bge	r4,zero,1000b68c <__alt_data_end+0xf800b68c>
1000bdd8:	043fffc4 	movi	r16,-1
1000bddc:	003e2b06 	br	1000b68c <__alt_data_end+0xf800b68c>
1000bde0:	94801014 	ori	r18,r18,64
1000bde4:	b9800007 	ldb	r6,0(r23)
1000bde8:	003e2706 	br	1000b688 <__alt_data_end+0xf800b688>
1000bdec:	94800814 	ori	r18,r18,32
1000bdf0:	b9800007 	ldb	r6,0(r23)
1000bdf4:	003e2406 	br	1000b688 <__alt_data_end+0xf800b688>
1000bdf8:	d9412317 	ldw	r5,1164(sp)
1000bdfc:	d8812317 	ldw	r2,1164(sp)
1000be00:	d8011d85 	stb	zero,1142(sp)
1000be04:	29400017 	ldw	r5,0(r5)
1000be08:	9811883a 	mov	r8,r19
1000be0c:	14c00104 	addi	r19,r2,4
1000be10:	d9412215 	stw	r5,1160(sp)
1000be14:	28029026 	beq	r5,zero,1000c858 <___vfiprintf_internal_r+0x1354>
1000be18:	d9012217 	ldw	r4,1160(sp)
1000be1c:	80027616 	blt	r16,zero,1000c7f8 <___vfiprintf_internal_r+0x12f4>
1000be20:	000b883a 	mov	r5,zero
1000be24:	800d883a 	mov	r6,r16
1000be28:	da012a15 	stw	r8,1192(sp)
1000be2c:	00096c00 	call	100096c0 <memchr>
1000be30:	da012a17 	ldw	r8,1192(sp)
1000be34:	1002a026 	beq	r2,zero,1000c8b8 <___vfiprintf_internal_r+0x13b4>
1000be38:	d8c12217 	ldw	r3,1160(sp)
1000be3c:	10e9c83a 	sub	r20,r2,r3
1000be40:	85023816 	blt	r16,r20,1000c724 <___vfiprintf_internal_r+0x1220>
1000be44:	dd811d83 	ldbu	r22,1142(sp)
1000be48:	dcc12315 	stw	r19,1164(sp)
1000be4c:	0021883a 	mov	r16,zero
1000be50:	003efd06 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000be54:	9080080c 	andi	r2,r18,32
1000be58:	9811883a 	mov	r8,r19
1000be5c:	103f9e1e 	bne	r2,zero,1000bcd8 <__alt_data_end+0xf800bcd8>
1000be60:	9080040c 	andi	r2,r18,16
1000be64:	10021726 	beq	r2,zero,1000c6c4 <___vfiprintf_internal_r+0x11c0>
1000be68:	d9412317 	ldw	r5,1164(sp)
1000be6c:	002b883a 	mov	r21,zero
1000be70:	00800044 	movi	r2,1
1000be74:	2cc00017 	ldw	r19,0(r5)
1000be78:	29400104 	addi	r5,r5,4
1000be7c:	d9412315 	stw	r5,1164(sp)
1000be80:	9807883a 	mov	r3,r19
1000be84:	003f8c06 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000be88:	d8c12203 	ldbu	r3,1160(sp)
1000be8c:	01040074 	movhi	r4,4097
1000be90:	21046e04 	addi	r4,r4,4536
1000be94:	d8c11d85 	stb	r3,1142(sp)
1000be98:	d9012715 	stw	r4,1180(sp)
1000be9c:	90c0080c 	andi	r3,r18,32
1000bea0:	9811883a 	mov	r8,r19
1000bea4:	d8812317 	ldw	r2,1164(sp)
1000bea8:	183fa11e 	bne	r3,zero,1000bd30 <__alt_data_end+0xf800bd30>
1000beac:	90c0040c 	andi	r3,r18,16
1000beb0:	1801e526 	beq	r3,zero,1000c648 <___vfiprintf_internal_r+0x1144>
1000beb4:	d9412317 	ldw	r5,1164(sp)
1000beb8:	14c00017 	ldw	r19,0(r2)
1000bebc:	002b883a 	mov	r21,zero
1000bec0:	29400104 	addi	r5,r5,4
1000bec4:	d9412315 	stw	r5,1164(sp)
1000bec8:	003f9e06 	br	1000bd44 <__alt_data_end+0xf800bd44>
1000becc:	9080080c 	andi	r2,r18,32
1000bed0:	9811883a 	mov	r8,r19
1000bed4:	103f701e 	bne	r2,zero,1000bc98 <__alt_data_end+0xf800bc98>
1000bed8:	9080040c 	andi	r2,r18,16
1000bedc:	1001ef26 	beq	r2,zero,1000c69c <___vfiprintf_internal_r+0x1198>
1000bee0:	d9012317 	ldw	r4,1164(sp)
1000bee4:	002b883a 	mov	r21,zero
1000bee8:	0005883a 	mov	r2,zero
1000beec:	24c00017 	ldw	r19,0(r4)
1000bef0:	21000104 	addi	r4,r4,4
1000bef4:	d9012315 	stw	r4,1164(sp)
1000bef8:	9807883a 	mov	r3,r19
1000befc:	003f6e06 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000bf00:	d8c12317 	ldw	r3,1164(sp)
1000bf04:	9811883a 	mov	r8,r19
1000bf08:	00800c04 	movi	r2,48
1000bf0c:	1cc00017 	ldw	r19,0(r3)
1000bf10:	01040074 	movhi	r4,4097
1000bf14:	18c00104 	addi	r3,r3,4
1000bf18:	d8811d05 	stb	r2,1140(sp)
1000bf1c:	21046e04 	addi	r4,r4,4536
1000bf20:	00801e04 	movi	r2,120
1000bf24:	d8811d45 	stb	r2,1141(sp)
1000bf28:	d8c12315 	stw	r3,1164(sp)
1000bf2c:	002b883a 	mov	r21,zero
1000bf30:	94800094 	ori	r18,r18,2
1000bf34:	d9012715 	stw	r4,1180(sp)
1000bf38:	00800084 	movi	r2,2
1000bf3c:	9807883a 	mov	r3,r19
1000bf40:	003f5d06 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000bf44:	d8c12203 	ldbu	r3,1160(sp)
1000bf48:	9080080c 	andi	r2,r18,32
1000bf4c:	9811883a 	mov	r8,r19
1000bf50:	d8c11d85 	stb	r3,1142(sp)
1000bf54:	1001b126 	beq	r2,zero,1000c61c <___vfiprintf_internal_r+0x1118>
1000bf58:	d9012317 	ldw	r4,1164(sp)
1000bf5c:	d9412517 	ldw	r5,1172(sp)
1000bf60:	20800017 	ldw	r2,0(r4)
1000bf64:	2807d7fa 	srai	r3,r5,31
1000bf68:	21000104 	addi	r4,r4,4
1000bf6c:	d9012315 	stw	r4,1164(sp)
1000bf70:	11400015 	stw	r5,0(r2)
1000bf74:	10c00115 	stw	r3,4(r2)
1000bf78:	003d9a06 	br	1000b5e4 <__alt_data_end+0xf800b5e4>
1000bf7c:	d8812207 	ldb	r2,1160(sp)
1000bf80:	1001c41e 	bne	r2,zero,1000c694 <___vfiprintf_internal_r+0x1190>
1000bf84:	00c00804 	movi	r3,32
1000bf88:	d8c12205 	stb	r3,1160(sp)
1000bf8c:	b9800007 	ldb	r6,0(r23)
1000bf90:	003dbd06 	br	1000b688 <__alt_data_end+0xf800b688>
1000bf94:	00c00ac4 	movi	r3,43
1000bf98:	d8c12205 	stb	r3,1160(sp)
1000bf9c:	b9800007 	ldb	r6,0(r23)
1000bfa0:	003db906 	br	1000b688 <__alt_data_end+0xf800b688>
1000bfa4:	d8c12203 	ldbu	r3,1160(sp)
1000bfa8:	9080080c 	andi	r2,r18,32
1000bfac:	9811883a 	mov	r8,r19
1000bfb0:	d8c11d85 	stb	r3,1142(sp)
1000bfb4:	d8c12317 	ldw	r3,1164(sp)
1000bfb8:	103e7e1e 	bne	r2,zero,1000b9b4 <__alt_data_end+0xf800b9b4>
1000bfbc:	9080040c 	andi	r2,r18,16
1000bfc0:	1001a926 	beq	r2,zero,1000c668 <___vfiprintf_internal_r+0x1164>
1000bfc4:	1cc00017 	ldw	r19,0(r3)
1000bfc8:	d9412317 	ldw	r5,1164(sp)
1000bfcc:	982bd7fa 	srai	r21,r19,31
1000bfd0:	29400104 	addi	r5,r5,4
1000bfd4:	d9412315 	stw	r5,1164(sp)
1000bfd8:	a805883a 	mov	r2,r21
1000bfdc:	003e7b06 	br	1000b9cc <__alt_data_end+0xf800b9cc>
1000bfe0:	94800054 	ori	r18,r18,1
1000bfe4:	b9800007 	ldb	r6,0(r23)
1000bfe8:	003da706 	br	1000b688 <__alt_data_end+0xf800b688>
1000bfec:	d8c12203 	ldbu	r3,1160(sp)
1000bff0:	9811883a 	mov	r8,r19
1000bff4:	d8c11d85 	stb	r3,1142(sp)
1000bff8:	30005826 	beq	r6,zero,1000c15c <___vfiprintf_internal_r+0xc58>
1000bffc:	05400044 	movi	r21,1
1000c000:	d8c10004 	addi	r3,sp,1024
1000c004:	d9810005 	stb	r6,1024(sp)
1000c008:	d8011d85 	stb	zero,1142(sp)
1000c00c:	a829883a 	mov	r20,r21
1000c010:	d8c12215 	stw	r3,1160(sp)
1000c014:	003f1a06 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000c018:	d9012117 	ldw	r4,1156(sp)
1000c01c:	d9412017 	ldw	r5,1152(sp)
1000c020:	d9811a04 	addi	r6,sp,1128
1000c024:	d9c12a15 	stw	r7,1192(sp)
1000c028:	db012b15 	stw	r12,1196(sp)
1000c02c:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c030:	d9c12a17 	ldw	r7,1192(sp)
1000c034:	db012b17 	ldw	r12,1196(sp)
1000c038:	10004e1e 	bne	r2,zero,1000c174 <___vfiprintf_internal_r+0xc70>
1000c03c:	d9011b17 	ldw	r4,1132(sp)
1000c040:	d8c11c17 	ldw	r3,1136(sp)
1000c044:	d811883a 	mov	r8,sp
1000c048:	21400044 	addi	r5,r4,1
1000c04c:	003e9d06 	br	1000bac4 <__alt_data_end+0xf800bac4>
1000c050:	d9411b17 	ldw	r5,1132(sp)
1000c054:	d8c11c17 	ldw	r3,1136(sp)
1000c058:	28800044 	addi	r2,r5,1
1000c05c:	d9011d87 	ldb	r4,1142(sp)
1000c060:	203eb626 	beq	r4,zero,1000bb3c <__alt_data_end+0xf800bb3c>
1000c064:	01000044 	movi	r4,1
1000c068:	d9411d84 	addi	r5,sp,1142
1000c06c:	1907883a 	add	r3,r3,r4
1000c070:	41400015 	stw	r5,0(r8)
1000c074:	41000115 	stw	r4,4(r8)
1000c078:	d8c11c15 	stw	r3,1136(sp)
1000c07c:	d8811b15 	stw	r2,1132(sp)
1000c080:	014001c4 	movi	r5,7
1000c084:	2880ce16 	blt	r5,r2,1000c3c0 <___vfiprintf_internal_r+0xebc>
1000c088:	100b883a 	mov	r5,r2
1000c08c:	42000204 	addi	r8,r8,8
1000c090:	10800044 	addi	r2,r2,1
1000c094:	003ea906 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c098:	d9012117 	ldw	r4,1156(sp)
1000c09c:	d9412017 	ldw	r5,1152(sp)
1000c0a0:	d9811a04 	addi	r6,sp,1128
1000c0a4:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c0a8:	1000321e 	bne	r2,zero,1000c174 <___vfiprintf_internal_r+0xc70>
1000c0ac:	d9411b17 	ldw	r5,1132(sp)
1000c0b0:	d8c11c17 	ldw	r3,1136(sp)
1000c0b4:	d811883a 	mov	r8,sp
1000c0b8:	28800044 	addi	r2,r5,1
1000c0bc:	003eba06 	br	1000bba8 <__alt_data_end+0xf800bba8>
1000c0c0:	10803fcc 	andi	r2,r2,255
1000c0c4:	00c00044 	movi	r3,1
1000c0c8:	10fe4d1e 	bne	r2,r3,1000ba00 <__alt_data_end+0xf800ba00>
1000c0cc:	a800021e 	bne	r21,zero,1000c0d8 <___vfiprintf_internal_r+0xbd4>
1000c0d0:	00800244 	movi	r2,9
1000c0d4:	14c01b2e 	bgeu	r2,r19,1000c144 <___vfiprintf_internal_r+0xc40>
1000c0d8:	dc012215 	stw	r16,1160(sp)
1000c0dc:	dd010a04 	addi	r20,sp,1064
1000c0e0:	a821883a 	mov	r16,r21
1000c0e4:	402b883a 	mov	r21,r8
1000c0e8:	9809883a 	mov	r4,r19
1000c0ec:	800b883a 	mov	r5,r16
1000c0f0:	01800284 	movi	r6,10
1000c0f4:	000f883a 	mov	r7,zero
1000c0f8:	00023cc0 	call	100023cc <__umoddi3>
1000c0fc:	10800c04 	addi	r2,r2,48
1000c100:	a53fffc4 	addi	r20,r20,-1
1000c104:	9809883a 	mov	r4,r19
1000c108:	800b883a 	mov	r5,r16
1000c10c:	01800284 	movi	r6,10
1000c110:	000f883a 	mov	r7,zero
1000c114:	a0800005 	stb	r2,0(r20)
1000c118:	0001d8c0 	call	10001d8c <__udivdi3>
1000c11c:	1027883a 	mov	r19,r2
1000c120:	10c4b03a 	or	r2,r2,r3
1000c124:	1821883a 	mov	r16,r3
1000c128:	103fef1e 	bne	r2,zero,1000c0e8 <__alt_data_end+0xf800c0e8>
1000c12c:	d9011e17 	ldw	r4,1144(sp)
1000c130:	dc012217 	ldw	r16,1160(sp)
1000c134:	a811883a 	mov	r8,r21
1000c138:	dd012215 	stw	r20,1160(sp)
1000c13c:	2529c83a 	sub	r20,r4,r20
1000c140:	003e4106 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c144:	9cc00c04 	addi	r19,r19,48
1000c148:	d8c109c4 	addi	r3,sp,1063
1000c14c:	dcc109c5 	stb	r19,1063(sp)
1000c150:	dd012817 	ldw	r20,1184(sp)
1000c154:	d8c12215 	stw	r3,1160(sp)
1000c158:	003e3b06 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c15c:	d8811c17 	ldw	r2,1136(sp)
1000c160:	10000426 	beq	r2,zero,1000c174 <___vfiprintf_internal_r+0xc70>
1000c164:	d9012117 	ldw	r4,1156(sp)
1000c168:	d9412017 	ldw	r5,1152(sp)
1000c16c:	d9811a04 	addi	r6,sp,1128
1000c170:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c174:	d9412017 	ldw	r5,1152(sp)
1000c178:	2880030b 	ldhu	r2,12(r5)
1000c17c:	1080100c 	andi	r2,r2,64
1000c180:	103ddc1e 	bne	r2,zero,1000b8f4 <__alt_data_end+0xf800b8f4>
1000c184:	d8812517 	ldw	r2,1172(sp)
1000c188:	003ddb06 	br	1000b8f8 <__alt_data_end+0xf800b8f8>
1000c18c:	1801061e 	bne	r3,zero,1000c5a8 <___vfiprintf_internal_r+0x10a4>
1000c190:	d8c12217 	ldw	r3,1160(sp)
1000c194:	00800044 	movi	r2,1
1000c198:	dd000115 	stw	r20,4(sp)
1000c19c:	d8c00015 	stw	r3,0(sp)
1000c1a0:	dd011c15 	stw	r20,1136(sp)
1000c1a4:	d8811b15 	stw	r2,1132(sp)
1000c1a8:	a007883a 	mov	r3,r20
1000c1ac:	d811883a 	mov	r8,sp
1000c1b0:	42000204 	addi	r8,r8,8
1000c1b4:	9480010c 	andi	r18,r18,4
1000c1b8:	90003426 	beq	r18,zero,1000c28c <___vfiprintf_internal_r+0xd88>
1000c1bc:	d9412417 	ldw	r5,1168(sp)
1000c1c0:	2d65c83a 	sub	r18,r5,r21
1000c1c4:	0480310e 	bge	zero,r18,1000c28c <___vfiprintf_internal_r+0xd88>
1000c1c8:	04000404 	movi	r16,16
1000c1cc:	8481ad0e 	bge	r16,r18,1000c884 <___vfiprintf_internal_r+0x1380>
1000c1d0:	01440074 	movhi	r5,4097
1000c1d4:	2944d304 	addi	r5,r5,4940
1000c1d8:	d9011b17 	ldw	r4,1132(sp)
1000c1dc:	d9412615 	stw	r5,1176(sp)
1000c1e0:	04c001c4 	movi	r19,7
1000c1e4:	dd012117 	ldw	r20,1156(sp)
1000c1e8:	dd812017 	ldw	r22,1152(sp)
1000c1ec:	00000506 	br	1000c204 <___vfiprintf_internal_r+0xd00>
1000c1f0:	21400084 	addi	r5,r4,2
1000c1f4:	42000204 	addi	r8,r8,8
1000c1f8:	1009883a 	mov	r4,r2
1000c1fc:	94bffc04 	addi	r18,r18,-16
1000c200:	84800d0e 	bge	r16,r18,1000c238 <___vfiprintf_internal_r+0xd34>
1000c204:	18c00404 	addi	r3,r3,16
1000c208:	20800044 	addi	r2,r4,1
1000c20c:	47000015 	stw	fp,0(r8)
1000c210:	44000115 	stw	r16,4(r8)
1000c214:	d8c11c15 	stw	r3,1136(sp)
1000c218:	d8811b15 	stw	r2,1132(sp)
1000c21c:	98bff40e 	bge	r19,r2,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c220:	1800291e 	bne	r3,zero,1000c2c8 <___vfiprintf_internal_r+0xdc4>
1000c224:	94bffc04 	addi	r18,r18,-16
1000c228:	0009883a 	mov	r4,zero
1000c22c:	01400044 	movi	r5,1
1000c230:	d811883a 	mov	r8,sp
1000c234:	84bff316 	blt	r16,r18,1000c204 <__alt_data_end+0xf800c204>
1000c238:	d8812617 	ldw	r2,1176(sp)
1000c23c:	1c87883a 	add	r3,r3,r18
1000c240:	44800115 	stw	r18,4(r8)
1000c244:	40800015 	stw	r2,0(r8)
1000c248:	d8c11c15 	stw	r3,1136(sp)
1000c24c:	d9411b15 	stw	r5,1132(sp)
1000c250:	008001c4 	movi	r2,7
1000c254:	11400d0e 	bge	r2,r5,1000c28c <___vfiprintf_internal_r+0xd88>
1000c258:	1800061e 	bne	r3,zero,1000c274 <___vfiprintf_internal_r+0xd70>
1000c25c:	d8c12417 	ldw	r3,1168(sp)
1000c260:	a8c12e16 	blt	r21,r3,1000c71c <___vfiprintf_internal_r+0x1218>
1000c264:	d9012517 	ldw	r4,1172(sp)
1000c268:	2549883a 	add	r4,r4,r21
1000c26c:	d9012515 	stw	r4,1172(sp)
1000c270:	00001206 	br	1000c2bc <___vfiprintf_internal_r+0xdb8>
1000c274:	d9012117 	ldw	r4,1156(sp)
1000c278:	d9412017 	ldw	r5,1152(sp)
1000c27c:	d9811a04 	addi	r6,sp,1128
1000c280:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c284:	103fbb1e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c288:	d8c11c17 	ldw	r3,1136(sp)
1000c28c:	d8812417 	ldw	r2,1168(sp)
1000c290:	a880010e 	bge	r21,r2,1000c298 <___vfiprintf_internal_r+0xd94>
1000c294:	102b883a 	mov	r21,r2
1000c298:	d9012517 	ldw	r4,1172(sp)
1000c29c:	2549883a 	add	r4,r4,r21
1000c2a0:	d9012515 	stw	r4,1172(sp)
1000c2a4:	18000526 	beq	r3,zero,1000c2bc <___vfiprintf_internal_r+0xdb8>
1000c2a8:	d9012117 	ldw	r4,1156(sp)
1000c2ac:	d9412017 	ldw	r5,1152(sp)
1000c2b0:	d9811a04 	addi	r6,sp,1128
1000c2b4:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c2b8:	103fae1e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c2bc:	d8011b15 	stw	zero,1132(sp)
1000c2c0:	d811883a 	mov	r8,sp
1000c2c4:	003cc706 	br	1000b5e4 <__alt_data_end+0xf800b5e4>
1000c2c8:	a009883a 	mov	r4,r20
1000c2cc:	b00b883a 	mov	r5,r22
1000c2d0:	d9811a04 	addi	r6,sp,1128
1000c2d4:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c2d8:	103fa61e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c2dc:	d9011b17 	ldw	r4,1132(sp)
1000c2e0:	d8c11c17 	ldw	r3,1136(sp)
1000c2e4:	d811883a 	mov	r8,sp
1000c2e8:	21400044 	addi	r5,r4,1
1000c2ec:	003fc306 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c2f0:	d9012417 	ldw	r4,1168(sp)
1000c2f4:	256dc83a 	sub	r22,r4,r21
1000c2f8:	05be1f0e 	bge	zero,r22,1000bb78 <__alt_data_end+0xf800bb78>
1000c2fc:	04c00404 	movi	r19,16
1000c300:	9d81720e 	bge	r19,r22,1000c8cc <___vfiprintf_internal_r+0x13c8>
1000c304:	00840074 	movhi	r2,4097
1000c308:	1084cf04 	addi	r2,r2,4924
1000c30c:	d8812615 	stw	r2,1176(sp)
1000c310:	028001c4 	movi	r10,7
1000c314:	00000506 	br	1000c32c <___vfiprintf_internal_r+0xe28>
1000c318:	29000084 	addi	r4,r5,2
1000c31c:	42000204 	addi	r8,r8,8
1000c320:	100b883a 	mov	r5,r2
1000c324:	b5bffc04 	addi	r22,r22,-16
1000c328:	9d800d0e 	bge	r19,r22,1000c360 <___vfiprintf_internal_r+0xe5c>
1000c32c:	18c00404 	addi	r3,r3,16
1000c330:	28800044 	addi	r2,r5,1
1000c334:	44400015 	stw	r17,0(r8)
1000c338:	44c00115 	stw	r19,4(r8)
1000c33c:	d8c11c15 	stw	r3,1136(sp)
1000c340:	d8811b15 	stw	r2,1132(sp)
1000c344:	50bff40e 	bge	r10,r2,1000c318 <__alt_data_end+0xf800c318>
1000c348:	1800111e 	bne	r3,zero,1000c390 <___vfiprintf_internal_r+0xe8c>
1000c34c:	b5bffc04 	addi	r22,r22,-16
1000c350:	000b883a 	mov	r5,zero
1000c354:	01000044 	movi	r4,1
1000c358:	d811883a 	mov	r8,sp
1000c35c:	9dbff316 	blt	r19,r22,1000c32c <__alt_data_end+0xf800c32c>
1000c360:	d9412617 	ldw	r5,1176(sp)
1000c364:	1d87883a 	add	r3,r3,r22
1000c368:	45800115 	stw	r22,4(r8)
1000c36c:	41400015 	stw	r5,0(r8)
1000c370:	d8c11c15 	stw	r3,1136(sp)
1000c374:	d9011b15 	stw	r4,1132(sp)
1000c378:	008001c4 	movi	r2,7
1000c37c:	11008516 	blt	r2,r4,1000c594 <___vfiprintf_internal_r+0x1090>
1000c380:	42000204 	addi	r8,r8,8
1000c384:	20800044 	addi	r2,r4,1
1000c388:	200b883a 	mov	r5,r4
1000c38c:	003dfa06 	br	1000bb78 <__alt_data_end+0xf800bb78>
1000c390:	d9012117 	ldw	r4,1156(sp)
1000c394:	d9412017 	ldw	r5,1152(sp)
1000c398:	d9811a04 	addi	r6,sp,1128
1000c39c:	da812a15 	stw	r10,1192(sp)
1000c3a0:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c3a4:	da812a17 	ldw	r10,1192(sp)
1000c3a8:	103f721e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c3ac:	d9411b17 	ldw	r5,1132(sp)
1000c3b0:	d8c11c17 	ldw	r3,1136(sp)
1000c3b4:	d811883a 	mov	r8,sp
1000c3b8:	29000044 	addi	r4,r5,1
1000c3bc:	003fd906 	br	1000c324 <__alt_data_end+0xf800c324>
1000c3c0:	1800681e 	bne	r3,zero,1000c564 <___vfiprintf_internal_r+0x1060>
1000c3c4:	50004d26 	beq	r10,zero,1000c4fc <___vfiprintf_internal_r+0xff8>
1000c3c8:	d8811d04 	addi	r2,sp,1140
1000c3cc:	00c00084 	movi	r3,2
1000c3d0:	d8800015 	stw	r2,0(sp)
1000c3d4:	d8c00115 	stw	r3,4(sp)
1000c3d8:	2005883a 	mov	r2,r4
1000c3dc:	d811883a 	mov	r8,sp
1000c3e0:	003de006 	br	1000bb64 <__alt_data_end+0xf800bb64>
1000c3e4:	1800551e 	bne	r3,zero,1000c53c <___vfiprintf_internal_r+0x1038>
1000c3e8:	000b883a 	mov	r5,zero
1000c3ec:	00800044 	movi	r2,1
1000c3f0:	d811883a 	mov	r8,sp
1000c3f4:	003dde06 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000c3f8:	10803fcc 	andi	r2,r2,255
1000c3fc:	1000191e 	bne	r2,zero,1000c464 <___vfiprintf_internal_r+0xf60>
1000c400:	9080004c 	andi	r2,r18,1
1000c404:	10001726 	beq	r2,zero,1000c464 <___vfiprintf_internal_r+0xf60>
1000c408:	00800c04 	movi	r2,48
1000c40c:	d8c109c4 	addi	r3,sp,1063
1000c410:	d88109c5 	stb	r2,1063(sp)
1000c414:	dd012817 	ldw	r20,1184(sp)
1000c418:	d8c12215 	stw	r3,1160(sp)
1000c41c:	003d8a06 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c420:	d9012717 	ldw	r4,1180(sp)
1000c424:	dd010a04 	addi	r20,sp,1064
1000c428:	988003cc 	andi	r2,r19,15
1000c42c:	a806973a 	slli	r3,r21,28
1000c430:	2085883a 	add	r2,r4,r2
1000c434:	9826d13a 	srli	r19,r19,4
1000c438:	10800003 	ldbu	r2,0(r2)
1000c43c:	a82ad13a 	srli	r21,r21,4
1000c440:	a53fffc4 	addi	r20,r20,-1
1000c444:	1ce6b03a 	or	r19,r3,r19
1000c448:	a0800005 	stb	r2,0(r20)
1000c44c:	9d44b03a 	or	r2,r19,r21
1000c450:	103ff51e 	bne	r2,zero,1000c428 <__alt_data_end+0xf800c428>
1000c454:	d9411e17 	ldw	r5,1144(sp)
1000c458:	dd012215 	stw	r20,1160(sp)
1000c45c:	2d29c83a 	sub	r20,r5,r20
1000c460:	003d7906 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c464:	d8c10a04 	addi	r3,sp,1064
1000c468:	d8c12215 	stw	r3,1160(sp)
1000c46c:	003d7606 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c470:	18009e1e 	bne	r3,zero,1000c6ec <___vfiprintf_internal_r+0x11e8>
1000c474:	d8811d87 	ldb	r2,1142(sp)
1000c478:	10005f26 	beq	r2,zero,1000c5f8 <___vfiprintf_internal_r+0x10f4>
1000c47c:	00c00044 	movi	r3,1
1000c480:	d9011d84 	addi	r4,sp,1142
1000c484:	1805883a 	mov	r2,r3
1000c488:	d9000015 	stw	r4,0(sp)
1000c48c:	d8c00115 	stw	r3,4(sp)
1000c490:	d811883a 	mov	r8,sp
1000c494:	003efc06 	br	1000c088 <__alt_data_end+0xf800c088>
1000c498:	d9412417 	ldw	r5,1168(sp)
1000c49c:	d811883a 	mov	r8,sp
1000c4a0:	2d65c83a 	sub	r18,r5,r21
1000c4a4:	04bf4816 	blt	zero,r18,1000c1c8 <__alt_data_end+0xf800c1c8>
1000c4a8:	003f6c06 	br	1000c25c <__alt_data_end+0xf800c25c>
1000c4ac:	b829883a 	mov	r20,r23
1000c4b0:	003c6906 	br	1000b658 <__alt_data_end+0xf800b658>
1000c4b4:	d9012117 	ldw	r4,1156(sp)
1000c4b8:	d9412017 	ldw	r5,1152(sp)
1000c4bc:	d9811a04 	addi	r6,sp,1128
1000c4c0:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c4c4:	103f2b1e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c4c8:	d8c11c17 	ldw	r3,1136(sp)
1000c4cc:	d811883a 	mov	r8,sp
1000c4d0:	003f3806 	br	1000c1b4 <__alt_data_end+0xf800c1b4>
1000c4d4:	00800084 	movi	r2,2
1000c4d8:	9d46b03a 	or	r3,r19,r21
1000c4dc:	003df606 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000c4e0:	d9012117 	ldw	r4,1156(sp)
1000c4e4:	d9412017 	ldw	r5,1152(sp)
1000c4e8:	d9811a04 	addi	r6,sp,1128
1000c4ec:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c4f0:	103f201e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c4f4:	d811883a 	mov	r8,sp
1000c4f8:	003cc606 	br	1000b814 <__alt_data_end+0xf800b814>
1000c4fc:	000b883a 	mov	r5,zero
1000c500:	2005883a 	mov	r2,r4
1000c504:	d811883a 	mov	r8,sp
1000c508:	003d9906 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000c50c:	10803fcc 	andi	r2,r2,255
1000c510:	1080201c 	xori	r2,r2,128
1000c514:	10bfe004 	addi	r2,r2,-128
1000c518:	01000c04 	movi	r4,48
1000c51c:	1100b226 	beq	r2,r4,1000c7e8 <___vfiprintf_internal_r+0x12e4>
1000c520:	d9412217 	ldw	r5,1160(sp)
1000c524:	d8811e17 	ldw	r2,1144(sp)
1000c528:	193fffc5 	stb	r4,-1(r3)
1000c52c:	297fffc4 	addi	r5,r5,-1
1000c530:	d9412215 	stw	r5,1160(sp)
1000c534:	1169c83a 	sub	r20,r2,r5
1000c538:	003d4306 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c53c:	d9012117 	ldw	r4,1156(sp)
1000c540:	d9412017 	ldw	r5,1152(sp)
1000c544:	d9811a04 	addi	r6,sp,1128
1000c548:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c54c:	103f091e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c550:	d9411b17 	ldw	r5,1132(sp)
1000c554:	d8c11c17 	ldw	r3,1136(sp)
1000c558:	d811883a 	mov	r8,sp
1000c55c:	28800044 	addi	r2,r5,1
1000c560:	003d8306 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000c564:	d9012117 	ldw	r4,1156(sp)
1000c568:	d9412017 	ldw	r5,1152(sp)
1000c56c:	d9811a04 	addi	r6,sp,1128
1000c570:	da812a15 	stw	r10,1192(sp)
1000c574:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c578:	da812a17 	ldw	r10,1192(sp)
1000c57c:	103efd1e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c580:	d9411b17 	ldw	r5,1132(sp)
1000c584:	d8c11c17 	ldw	r3,1136(sp)
1000c588:	d811883a 	mov	r8,sp
1000c58c:	28800044 	addi	r2,r5,1
1000c590:	003d6a06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c594:	1800a01e 	bne	r3,zero,1000c818 <___vfiprintf_internal_r+0x1314>
1000c598:	000b883a 	mov	r5,zero
1000c59c:	00800044 	movi	r2,1
1000c5a0:	d811883a 	mov	r8,sp
1000c5a4:	003d7406 	br	1000bb78 <__alt_data_end+0xf800bb78>
1000c5a8:	d9012117 	ldw	r4,1156(sp)
1000c5ac:	d9412017 	ldw	r5,1152(sp)
1000c5b0:	d9811a04 	addi	r6,sp,1128
1000c5b4:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c5b8:	103eee1e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c5bc:	d8811b17 	ldw	r2,1132(sp)
1000c5c0:	d8c11c17 	ldw	r3,1136(sp)
1000c5c4:	d811883a 	mov	r8,sp
1000c5c8:	10800044 	addi	r2,r2,1
1000c5cc:	003d8f06 	br	1000bc0c <__alt_data_end+0xf800bc0c>
1000c5d0:	04e7c83a 	sub	r19,zero,r19
1000c5d4:	9804c03a 	cmpne	r2,r19,zero
1000c5d8:	056bc83a 	sub	r21,zero,r21
1000c5dc:	a8abc83a 	sub	r21,r21,r2
1000c5e0:	05800b44 	movi	r22,45
1000c5e4:	dd811d85 	stb	r22,1142(sp)
1000c5e8:	8029883a 	mov	r20,r16
1000c5ec:	00800044 	movi	r2,1
1000c5f0:	9d46b03a 	or	r3,r19,r21
1000c5f4:	003cfa06 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000c5f8:	000b883a 	mov	r5,zero
1000c5fc:	00800044 	movi	r2,1
1000c600:	d811883a 	mov	r8,sp
1000c604:	503d5a26 	beq	r10,zero,1000bb70 <__alt_data_end+0xf800bb70>
1000c608:	00c00084 	movi	r3,2
1000c60c:	d9011d04 	addi	r4,sp,1140
1000c610:	d9000015 	stw	r4,0(sp)
1000c614:	d8c00115 	stw	r3,4(sp)
1000c618:	003d5206 	br	1000bb64 <__alt_data_end+0xf800bb64>
1000c61c:	9080040c 	andi	r2,r18,16
1000c620:	1000421e 	bne	r2,zero,1000c72c <___vfiprintf_internal_r+0x1228>
1000c624:	9480100c 	andi	r18,r18,64
1000c628:	90009c26 	beq	r18,zero,1000c89c <___vfiprintf_internal_r+0x1398>
1000c62c:	d9412317 	ldw	r5,1164(sp)
1000c630:	d8c12517 	ldw	r3,1172(sp)
1000c634:	28800017 	ldw	r2,0(r5)
1000c638:	29400104 	addi	r5,r5,4
1000c63c:	d9412315 	stw	r5,1164(sp)
1000c640:	10c0000d 	sth	r3,0(r2)
1000c644:	003be706 	br	1000b5e4 <__alt_data_end+0xf800b5e4>
1000c648:	90c0100c 	andi	r3,r18,64
1000c64c:	18003e26 	beq	r3,zero,1000c748 <___vfiprintf_internal_r+0x1244>
1000c650:	d8c12317 	ldw	r3,1164(sp)
1000c654:	14c0000b 	ldhu	r19,0(r2)
1000c658:	002b883a 	mov	r21,zero
1000c65c:	18c00104 	addi	r3,r3,4
1000c660:	d8c12315 	stw	r3,1164(sp)
1000c664:	003db706 	br	1000bd44 <__alt_data_end+0xf800bd44>
1000c668:	9080100c 	andi	r2,r18,64
1000c66c:	10004c26 	beq	r2,zero,1000c7a0 <___vfiprintf_internal_r+0x129c>
1000c670:	1cc0000f 	ldh	r19,0(r3)
1000c674:	d8812317 	ldw	r2,1164(sp)
1000c678:	982bd7fa 	srai	r21,r19,31
1000c67c:	10800104 	addi	r2,r2,4
1000c680:	d8812315 	stw	r2,1164(sp)
1000c684:	a805883a 	mov	r2,r21
1000c688:	003cd006 	br	1000b9cc <__alt_data_end+0xf800b9cc>
1000c68c:	00800084 	movi	r2,2
1000c690:	003d8906 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000c694:	b9800007 	ldb	r6,0(r23)
1000c698:	003bfb06 	br	1000b688 <__alt_data_end+0xf800b688>
1000c69c:	9080100c 	andi	r2,r18,64
1000c6a0:	10003726 	beq	r2,zero,1000c780 <___vfiprintf_internal_r+0x127c>
1000c6a4:	d9412317 	ldw	r5,1164(sp)
1000c6a8:	002b883a 	mov	r21,zero
1000c6ac:	0005883a 	mov	r2,zero
1000c6b0:	2cc0000b 	ldhu	r19,0(r5)
1000c6b4:	29400104 	addi	r5,r5,4
1000c6b8:	d9412315 	stw	r5,1164(sp)
1000c6bc:	9807883a 	mov	r3,r19
1000c6c0:	003d7d06 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000c6c4:	9080100c 	andi	r2,r18,64
1000c6c8:	10002526 	beq	r2,zero,1000c760 <___vfiprintf_internal_r+0x125c>
1000c6cc:	d8812317 	ldw	r2,1164(sp)
1000c6d0:	002b883a 	mov	r21,zero
1000c6d4:	14c0000b 	ldhu	r19,0(r2)
1000c6d8:	10800104 	addi	r2,r2,4
1000c6dc:	d8812315 	stw	r2,1164(sp)
1000c6e0:	9807883a 	mov	r3,r19
1000c6e4:	00800044 	movi	r2,1
1000c6e8:	003d7306 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000c6ec:	d9012117 	ldw	r4,1156(sp)
1000c6f0:	d9412017 	ldw	r5,1152(sp)
1000c6f4:	d9811a04 	addi	r6,sp,1128
1000c6f8:	da812a15 	stw	r10,1192(sp)
1000c6fc:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c700:	da812a17 	ldw	r10,1192(sp)
1000c704:	103e9b1e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c708:	d9411b17 	ldw	r5,1132(sp)
1000c70c:	d8c11c17 	ldw	r3,1136(sp)
1000c710:	d811883a 	mov	r8,sp
1000c714:	28800044 	addi	r2,r5,1
1000c718:	003e5006 	br	1000c05c <__alt_data_end+0xf800c05c>
1000c71c:	182b883a 	mov	r21,r3
1000c720:	003ed006 	br	1000c264 <__alt_data_end+0xf800c264>
1000c724:	8029883a 	mov	r20,r16
1000c728:	003dc606 	br	1000be44 <__alt_data_end+0xf800be44>
1000c72c:	d8c12317 	ldw	r3,1164(sp)
1000c730:	d9012517 	ldw	r4,1172(sp)
1000c734:	18800017 	ldw	r2,0(r3)
1000c738:	18c00104 	addi	r3,r3,4
1000c73c:	d8c12315 	stw	r3,1164(sp)
1000c740:	11000015 	stw	r4,0(r2)
1000c744:	003ba706 	br	1000b5e4 <__alt_data_end+0xf800b5e4>
1000c748:	d9012317 	ldw	r4,1164(sp)
1000c74c:	14c00017 	ldw	r19,0(r2)
1000c750:	002b883a 	mov	r21,zero
1000c754:	21000104 	addi	r4,r4,4
1000c758:	d9012315 	stw	r4,1164(sp)
1000c75c:	003d7906 	br	1000bd44 <__alt_data_end+0xf800bd44>
1000c760:	d8c12317 	ldw	r3,1164(sp)
1000c764:	002b883a 	mov	r21,zero
1000c768:	00800044 	movi	r2,1
1000c76c:	1cc00017 	ldw	r19,0(r3)
1000c770:	18c00104 	addi	r3,r3,4
1000c774:	d8c12315 	stw	r3,1164(sp)
1000c778:	9807883a 	mov	r3,r19
1000c77c:	003d4e06 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000c780:	d8812317 	ldw	r2,1164(sp)
1000c784:	002b883a 	mov	r21,zero
1000c788:	14c00017 	ldw	r19,0(r2)
1000c78c:	10800104 	addi	r2,r2,4
1000c790:	d8812315 	stw	r2,1164(sp)
1000c794:	9807883a 	mov	r3,r19
1000c798:	0005883a 	mov	r2,zero
1000c79c:	003d4606 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000c7a0:	1cc00017 	ldw	r19,0(r3)
1000c7a4:	d8c12317 	ldw	r3,1164(sp)
1000c7a8:	982bd7fa 	srai	r21,r19,31
1000c7ac:	18c00104 	addi	r3,r3,4
1000c7b0:	d8c12315 	stw	r3,1164(sp)
1000c7b4:	a805883a 	mov	r2,r21
1000c7b8:	003c8406 	br	1000b9cc <__alt_data_end+0xf800b9cc>
1000c7bc:	01040074 	movhi	r4,4097
1000c7c0:	2104cf04 	addi	r4,r4,4924
1000c7c4:	d9012615 	stw	r4,1176(sp)
1000c7c8:	003d0606 	br	1000bbe4 <__alt_data_end+0xf800bbe4>
1000c7cc:	b9800043 	ldbu	r6,1(r23)
1000c7d0:	94800814 	ori	r18,r18,32
1000c7d4:	bdc00044 	addi	r23,r23,1
1000c7d8:	31803fcc 	andi	r6,r6,255
1000c7dc:	3180201c 	xori	r6,r6,128
1000c7e0:	31bfe004 	addi	r6,r6,-128
1000c7e4:	003ba806 	br	1000b688 <__alt_data_end+0xf800b688>
1000c7e8:	d8811e17 	ldw	r2,1144(sp)
1000c7ec:	d8c12217 	ldw	r3,1160(sp)
1000c7f0:	10e9c83a 	sub	r20,r2,r3
1000c7f4:	003c9406 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c7f8:	da012a15 	stw	r8,1192(sp)
1000c7fc:	00040140 	call	10004014 <strlen>
1000c800:	1029883a 	mov	r20,r2
1000c804:	dd811d83 	ldbu	r22,1142(sp)
1000c808:	dcc12315 	stw	r19,1164(sp)
1000c80c:	0021883a 	mov	r16,zero
1000c810:	da012a17 	ldw	r8,1192(sp)
1000c814:	003c8c06 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c818:	d9012117 	ldw	r4,1156(sp)
1000c81c:	d9412017 	ldw	r5,1152(sp)
1000c820:	d9811a04 	addi	r6,sp,1128
1000c824:	000b3f00 	call	1000b3f0 <__sprint_r.part.0>
1000c828:	103e521e 	bne	r2,zero,1000c174 <__alt_data_end+0xf800c174>
1000c82c:	d9411b17 	ldw	r5,1132(sp)
1000c830:	d8c11c17 	ldw	r3,1136(sp)
1000c834:	d811883a 	mov	r8,sp
1000c838:	28800044 	addi	r2,r5,1
1000c83c:	003cce06 	br	1000bb78 <__alt_data_end+0xf800bb78>
1000c840:	01440074 	movhi	r5,4097
1000c844:	2944d304 	addi	r5,r5,4940
1000c848:	d9412615 	stw	r5,1176(sp)
1000c84c:	d9411b17 	ldw	r5,1132(sp)
1000c850:	29400044 	addi	r5,r5,1
1000c854:	003cad06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000c858:	00800184 	movi	r2,6
1000c85c:	1400012e 	bgeu	r2,r16,1000c864 <___vfiprintf_internal_r+0x1360>
1000c860:	1021883a 	mov	r16,r2
1000c864:	8029883a 	mov	r20,r16
1000c868:	802b883a 	mov	r21,r16
1000c86c:	80001c16 	blt	r16,zero,1000c8e0 <___vfiprintf_internal_r+0x13dc>
1000c870:	00c40074 	movhi	r3,4097
1000c874:	18c47304 	addi	r3,r3,4556
1000c878:	dcc12315 	stw	r19,1164(sp)
1000c87c:	d8c12215 	stw	r3,1160(sp)
1000c880:	003cff06 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000c884:	d9411b17 	ldw	r5,1132(sp)
1000c888:	00840074 	movhi	r2,4097
1000c88c:	1084d304 	addi	r2,r2,4940
1000c890:	d8812615 	stw	r2,1176(sp)
1000c894:	29400044 	addi	r5,r5,1
1000c898:	003e6706 	br	1000c238 <__alt_data_end+0xf800c238>
1000c89c:	d9012317 	ldw	r4,1164(sp)
1000c8a0:	d9412517 	ldw	r5,1172(sp)
1000c8a4:	20800017 	ldw	r2,0(r4)
1000c8a8:	21000104 	addi	r4,r4,4
1000c8ac:	d9012315 	stw	r4,1164(sp)
1000c8b0:	11400015 	stw	r5,0(r2)
1000c8b4:	003b4b06 	br	1000b5e4 <__alt_data_end+0xf800b5e4>
1000c8b8:	8029883a 	mov	r20,r16
1000c8bc:	dd811d83 	ldbu	r22,1142(sp)
1000c8c0:	dcc12315 	stw	r19,1164(sp)
1000c8c4:	0021883a 	mov	r16,zero
1000c8c8:	003c5f06 	br	1000ba48 <__alt_data_end+0xf800ba48>
1000c8cc:	01040074 	movhi	r4,4097
1000c8d0:	2104cf04 	addi	r4,r4,4924
1000c8d4:	d9012615 	stw	r4,1176(sp)
1000c8d8:	1009883a 	mov	r4,r2
1000c8dc:	003ea006 	br	1000c360 <__alt_data_end+0xf800c360>
1000c8e0:	002b883a 	mov	r21,zero
1000c8e4:	003fe206 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8e8:	d9412317 	ldw	r5,1164(sp)
1000c8ec:	b807883a 	mov	r3,r23
1000c8f0:	102f883a 	mov	r23,r2
1000c8f4:	2c000017 	ldw	r16,0(r5)
1000c8f8:	29000104 	addi	r4,r5,4
1000c8fc:	d9012315 	stw	r4,1164(sp)
1000c900:	80000416 	blt	r16,zero,1000c914 <___vfiprintf_internal_r+0x1410>
1000c904:	19800047 	ldb	r6,1(r3)
1000c908:	003b5f06 	br	1000b688 <__alt_data_end+0xf800b688>
1000c90c:	043fffc4 	movi	r16,-1
1000c910:	003bef06 	br	1000b8d0 <__alt_data_end+0xf800b8d0>
1000c914:	043fffc4 	movi	r16,-1
1000c918:	19800047 	ldb	r6,1(r3)
1000c91c:	003b5a06 	br	1000b688 <__alt_data_end+0xf800b688>
1000c920:	282b883a 	mov	r21,r5
1000c924:	003cc706 	br	1000bc44 <__alt_data_end+0xf800bc44>

1000c928 <__vfiprintf_internal>:
1000c928:	2007883a 	mov	r3,r4
1000c92c:	01040074 	movhi	r4,4097
1000c930:	210b9004 	addi	r4,r4,11840
1000c934:	21000017 	ldw	r4,0(r4)
1000c938:	2805883a 	mov	r2,r5
1000c93c:	300f883a 	mov	r7,r6
1000c940:	180b883a 	mov	r5,r3
1000c944:	100d883a 	mov	r6,r2
1000c948:	000b5041 	jmpi	1000b504 <___vfiprintf_internal_r>

1000c94c <_write_r>:
1000c94c:	defffd04 	addi	sp,sp,-12
1000c950:	dc000015 	stw	r16,0(sp)
1000c954:	04040074 	movhi	r16,4097
1000c958:	dc400115 	stw	r17,4(sp)
1000c95c:	84126f04 	addi	r16,r16,18876
1000c960:	2023883a 	mov	r17,r4
1000c964:	2809883a 	mov	r4,r5
1000c968:	300b883a 	mov	r5,r6
1000c96c:	380d883a 	mov	r6,r7
1000c970:	dfc00215 	stw	ra,8(sp)
1000c974:	80000015 	stw	zero,0(r16)
1000c978:	000f16c0 	call	1000f16c <write>
1000c97c:	00ffffc4 	movi	r3,-1
1000c980:	10c00526 	beq	r2,r3,1000c998 <_write_r+0x4c>
1000c984:	dfc00217 	ldw	ra,8(sp)
1000c988:	dc400117 	ldw	r17,4(sp)
1000c98c:	dc000017 	ldw	r16,0(sp)
1000c990:	dec00304 	addi	sp,sp,12
1000c994:	f800283a 	ret
1000c998:	80c00017 	ldw	r3,0(r16)
1000c99c:	183ff926 	beq	r3,zero,1000c984 <__alt_data_end+0xf800c984>
1000c9a0:	88c00015 	stw	r3,0(r17)
1000c9a4:	003ff706 	br	1000c984 <__alt_data_end+0xf800c984>

1000c9a8 <_close_r>:
1000c9a8:	defffd04 	addi	sp,sp,-12
1000c9ac:	dc000015 	stw	r16,0(sp)
1000c9b0:	04040074 	movhi	r16,4097
1000c9b4:	dc400115 	stw	r17,4(sp)
1000c9b8:	84126f04 	addi	r16,r16,18876
1000c9bc:	2023883a 	mov	r17,r4
1000c9c0:	2809883a 	mov	r4,r5
1000c9c4:	dfc00215 	stw	ra,8(sp)
1000c9c8:	80000015 	stw	zero,0(r16)
1000c9cc:	000e8c80 	call	1000e8c8 <close>
1000c9d0:	00ffffc4 	movi	r3,-1
1000c9d4:	10c00526 	beq	r2,r3,1000c9ec <_close_r+0x44>
1000c9d8:	dfc00217 	ldw	ra,8(sp)
1000c9dc:	dc400117 	ldw	r17,4(sp)
1000c9e0:	dc000017 	ldw	r16,0(sp)
1000c9e4:	dec00304 	addi	sp,sp,12
1000c9e8:	f800283a 	ret
1000c9ec:	80c00017 	ldw	r3,0(r16)
1000c9f0:	183ff926 	beq	r3,zero,1000c9d8 <__alt_data_end+0xf800c9d8>
1000c9f4:	88c00015 	stw	r3,0(r17)
1000c9f8:	003ff706 	br	1000c9d8 <__alt_data_end+0xf800c9d8>

1000c9fc <_calloc_r>:
1000c9fc:	defffe04 	addi	sp,sp,-8
1000ca00:	dc000015 	stw	r16,0(sp)
1000ca04:	2021883a 	mov	r16,r4
1000ca08:	2809883a 	mov	r4,r5
1000ca0c:	300b883a 	mov	r5,r6
1000ca10:	dfc00115 	stw	ra,4(sp)
1000ca14:	0002b140 	call	10002b14 <__mulsi3>
1000ca18:	8009883a 	mov	r4,r16
1000ca1c:	100b883a 	mov	r5,r2
1000ca20:	0008f180 	call	10008f18 <_malloc_r>
1000ca24:	1021883a 	mov	r16,r2
1000ca28:	10002826 	beq	r2,zero,1000cacc <_calloc_r+0xd0>
1000ca2c:	11bfff17 	ldw	r6,-4(r2)
1000ca30:	00bfff04 	movi	r2,-4
1000ca34:	00c00904 	movi	r3,36
1000ca38:	308c703a 	and	r6,r6,r2
1000ca3c:	308d883a 	add	r6,r6,r2
1000ca40:	19801436 	bltu	r3,r6,1000ca94 <_calloc_r+0x98>
1000ca44:	008004c4 	movi	r2,19
1000ca48:	11800936 	bltu	r2,r6,1000ca70 <_calloc_r+0x74>
1000ca4c:	8005883a 	mov	r2,r16
1000ca50:	10000015 	stw	zero,0(r2)
1000ca54:	10000115 	stw	zero,4(r2)
1000ca58:	10000215 	stw	zero,8(r2)
1000ca5c:	8005883a 	mov	r2,r16
1000ca60:	dfc00117 	ldw	ra,4(sp)
1000ca64:	dc000017 	ldw	r16,0(sp)
1000ca68:	dec00204 	addi	sp,sp,8
1000ca6c:	f800283a 	ret
1000ca70:	80000015 	stw	zero,0(r16)
1000ca74:	80000115 	stw	zero,4(r16)
1000ca78:	008006c4 	movi	r2,27
1000ca7c:	11800d2e 	bgeu	r2,r6,1000cab4 <_calloc_r+0xb8>
1000ca80:	80000215 	stw	zero,8(r16)
1000ca84:	80000315 	stw	zero,12(r16)
1000ca88:	30c00c26 	beq	r6,r3,1000cabc <_calloc_r+0xc0>
1000ca8c:	80800404 	addi	r2,r16,16
1000ca90:	003fef06 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000ca94:	8009883a 	mov	r4,r16
1000ca98:	000b883a 	mov	r5,zero
1000ca9c:	0009a3c0 	call	10009a3c <memset>
1000caa0:	8005883a 	mov	r2,r16
1000caa4:	dfc00117 	ldw	ra,4(sp)
1000caa8:	dc000017 	ldw	r16,0(sp)
1000caac:	dec00204 	addi	sp,sp,8
1000cab0:	f800283a 	ret
1000cab4:	80800204 	addi	r2,r16,8
1000cab8:	003fe506 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000cabc:	80000415 	stw	zero,16(r16)
1000cac0:	80800604 	addi	r2,r16,24
1000cac4:	80000515 	stw	zero,20(r16)
1000cac8:	003fe106 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000cacc:	0005883a 	mov	r2,zero
1000cad0:	003fe306 	br	1000ca60 <__alt_data_end+0xf800ca60>

1000cad4 <_fclose_r>:
1000cad4:	28003226 	beq	r5,zero,1000cba0 <_fclose_r+0xcc>
1000cad8:	defffc04 	addi	sp,sp,-16
1000cadc:	dc400115 	stw	r17,4(sp)
1000cae0:	2023883a 	mov	r17,r4
1000cae4:	dc000015 	stw	r16,0(sp)
1000cae8:	dfc00315 	stw	ra,12(sp)
1000caec:	dc800215 	stw	r18,8(sp)
1000caf0:	2821883a 	mov	r16,r5
1000caf4:	00082180 	call	10008218 <__sfp_lock_acquire>
1000caf8:	88000226 	beq	r17,zero,1000cb04 <_fclose_r+0x30>
1000cafc:	88800e17 	ldw	r2,56(r17)
1000cb00:	10002926 	beq	r2,zero,1000cba8 <_fclose_r+0xd4>
1000cb04:	8080030f 	ldh	r2,12(r16)
1000cb08:	10002226 	beq	r2,zero,1000cb94 <_fclose_r+0xc0>
1000cb0c:	8809883a 	mov	r4,r17
1000cb10:	800b883a 	mov	r5,r16
1000cb14:	0007c4c0 	call	10007c4c <_fflush_r>
1000cb18:	1025883a 	mov	r18,r2
1000cb1c:	80800b17 	ldw	r2,44(r16)
1000cb20:	10000426 	beq	r2,zero,1000cb34 <_fclose_r+0x60>
1000cb24:	81400717 	ldw	r5,28(r16)
1000cb28:	8809883a 	mov	r4,r17
1000cb2c:	103ee83a 	callr	r2
1000cb30:	10002616 	blt	r2,zero,1000cbcc <_fclose_r+0xf8>
1000cb34:	8080030b 	ldhu	r2,12(r16)
1000cb38:	1080200c 	andi	r2,r2,128
1000cb3c:	10001f1e 	bne	r2,zero,1000cbbc <_fclose_r+0xe8>
1000cb40:	81400c17 	ldw	r5,48(r16)
1000cb44:	28000526 	beq	r5,zero,1000cb5c <_fclose_r+0x88>
1000cb48:	80801004 	addi	r2,r16,64
1000cb4c:	28800226 	beq	r5,r2,1000cb58 <_fclose_r+0x84>
1000cb50:	8809883a 	mov	r4,r17
1000cb54:	000837c0 	call	1000837c <_free_r>
1000cb58:	80000c15 	stw	zero,48(r16)
1000cb5c:	81401117 	ldw	r5,68(r16)
1000cb60:	28000326 	beq	r5,zero,1000cb70 <_fclose_r+0x9c>
1000cb64:	8809883a 	mov	r4,r17
1000cb68:	000837c0 	call	1000837c <_free_r>
1000cb6c:	80001115 	stw	zero,68(r16)
1000cb70:	8000030d 	sth	zero,12(r16)
1000cb74:	000821c0 	call	1000821c <__sfp_lock_release>
1000cb78:	9005883a 	mov	r2,r18
1000cb7c:	dfc00317 	ldw	ra,12(sp)
1000cb80:	dc800217 	ldw	r18,8(sp)
1000cb84:	dc400117 	ldw	r17,4(sp)
1000cb88:	dc000017 	ldw	r16,0(sp)
1000cb8c:	dec00404 	addi	sp,sp,16
1000cb90:	f800283a 	ret
1000cb94:	000821c0 	call	1000821c <__sfp_lock_release>
1000cb98:	0005883a 	mov	r2,zero
1000cb9c:	003ff706 	br	1000cb7c <__alt_data_end+0xf800cb7c>
1000cba0:	0005883a 	mov	r2,zero
1000cba4:	f800283a 	ret
1000cba8:	8809883a 	mov	r4,r17
1000cbac:	00082080 	call	10008208 <__sinit>
1000cbb0:	8080030f 	ldh	r2,12(r16)
1000cbb4:	103fd51e 	bne	r2,zero,1000cb0c <__alt_data_end+0xf800cb0c>
1000cbb8:	003ff606 	br	1000cb94 <__alt_data_end+0xf800cb94>
1000cbbc:	81400417 	ldw	r5,16(r16)
1000cbc0:	8809883a 	mov	r4,r17
1000cbc4:	000837c0 	call	1000837c <_free_r>
1000cbc8:	003fdd06 	br	1000cb40 <__alt_data_end+0xf800cb40>
1000cbcc:	04bfffc4 	movi	r18,-1
1000cbd0:	003fd806 	br	1000cb34 <__alt_data_end+0xf800cb34>

1000cbd4 <fclose>:
1000cbd4:	00840074 	movhi	r2,4097
1000cbd8:	108b9004 	addi	r2,r2,11840
1000cbdc:	200b883a 	mov	r5,r4
1000cbe0:	11000017 	ldw	r4,0(r2)
1000cbe4:	000cad41 	jmpi	1000cad4 <_fclose_r>

1000cbe8 <_fputwc_r>:
1000cbe8:	3080030b 	ldhu	r2,12(r6)
1000cbec:	defff804 	addi	sp,sp,-32
1000cbf0:	dcc00415 	stw	r19,16(sp)
1000cbf4:	dc800315 	stw	r18,12(sp)
1000cbf8:	dc000115 	stw	r16,4(sp)
1000cbfc:	dfc00715 	stw	ra,28(sp)
1000cc00:	dd400615 	stw	r21,24(sp)
1000cc04:	dd000515 	stw	r20,20(sp)
1000cc08:	dc400215 	stw	r17,8(sp)
1000cc0c:	10c8000c 	andi	r3,r2,8192
1000cc10:	3021883a 	mov	r16,r6
1000cc14:	2027883a 	mov	r19,r4
1000cc18:	2825883a 	mov	r18,r5
1000cc1c:	1800051e 	bne	r3,zero,1000cc34 <_fputwc_r+0x4c>
1000cc20:	30c01917 	ldw	r3,100(r6)
1000cc24:	10880014 	ori	r2,r2,8192
1000cc28:	3080030d 	sth	r2,12(r6)
1000cc2c:	18880014 	ori	r2,r3,8192
1000cc30:	30801915 	stw	r2,100(r6)
1000cc34:	0008d080 	call	10008d08 <__locale_mb_cur_max>
1000cc38:	00c00044 	movi	r3,1
1000cc3c:	10c03e26 	beq	r2,r3,1000cd38 <_fputwc_r+0x150>
1000cc40:	9809883a 	mov	r4,r19
1000cc44:	d80b883a 	mov	r5,sp
1000cc48:	900d883a 	mov	r6,r18
1000cc4c:	81c01704 	addi	r7,r16,92
1000cc50:	000d0980 	call	1000d098 <_wcrtomb_r>
1000cc54:	1029883a 	mov	r20,r2
1000cc58:	00bfffc4 	movi	r2,-1
1000cc5c:	a0802026 	beq	r20,r2,1000cce0 <_fputwc_r+0xf8>
1000cc60:	d9400003 	ldbu	r5,0(sp)
1000cc64:	a0001c26 	beq	r20,zero,1000ccd8 <_fputwc_r+0xf0>
1000cc68:	0023883a 	mov	r17,zero
1000cc6c:	05400284 	movi	r21,10
1000cc70:	00000906 	br	1000cc98 <_fputwc_r+0xb0>
1000cc74:	80800017 	ldw	r2,0(r16)
1000cc78:	11400005 	stb	r5,0(r2)
1000cc7c:	80c00017 	ldw	r3,0(r16)
1000cc80:	18c00044 	addi	r3,r3,1
1000cc84:	80c00015 	stw	r3,0(r16)
1000cc88:	8c400044 	addi	r17,r17,1
1000cc8c:	dc45883a 	add	r2,sp,r17
1000cc90:	8d00112e 	bgeu	r17,r20,1000ccd8 <_fputwc_r+0xf0>
1000cc94:	11400003 	ldbu	r5,0(r2)
1000cc98:	80c00217 	ldw	r3,8(r16)
1000cc9c:	18ffffc4 	addi	r3,r3,-1
1000cca0:	80c00215 	stw	r3,8(r16)
1000cca4:	183ff30e 	bge	r3,zero,1000cc74 <__alt_data_end+0xf800cc74>
1000cca8:	80800617 	ldw	r2,24(r16)
1000ccac:	18801916 	blt	r3,r2,1000cd14 <_fputwc_r+0x12c>
1000ccb0:	80800017 	ldw	r2,0(r16)
1000ccb4:	11400005 	stb	r5,0(r2)
1000ccb8:	80800017 	ldw	r2,0(r16)
1000ccbc:	10c00003 	ldbu	r3,0(r2)
1000ccc0:	10800044 	addi	r2,r2,1
1000ccc4:	1d402326 	beq	r3,r21,1000cd54 <_fputwc_r+0x16c>
1000ccc8:	80800015 	stw	r2,0(r16)
1000cccc:	8c400044 	addi	r17,r17,1
1000ccd0:	dc45883a 	add	r2,sp,r17
1000ccd4:	8d3fef36 	bltu	r17,r20,1000cc94 <__alt_data_end+0xf800cc94>
1000ccd8:	9005883a 	mov	r2,r18
1000ccdc:	00000406 	br	1000ccf0 <_fputwc_r+0x108>
1000cce0:	80c0030b 	ldhu	r3,12(r16)
1000cce4:	a005883a 	mov	r2,r20
1000cce8:	18c01014 	ori	r3,r3,64
1000ccec:	80c0030d 	sth	r3,12(r16)
1000ccf0:	dfc00717 	ldw	ra,28(sp)
1000ccf4:	dd400617 	ldw	r21,24(sp)
1000ccf8:	dd000517 	ldw	r20,20(sp)
1000ccfc:	dcc00417 	ldw	r19,16(sp)
1000cd00:	dc800317 	ldw	r18,12(sp)
1000cd04:	dc400217 	ldw	r17,8(sp)
1000cd08:	dc000117 	ldw	r16,4(sp)
1000cd0c:	dec00804 	addi	sp,sp,32
1000cd10:	f800283a 	ret
1000cd14:	9809883a 	mov	r4,r19
1000cd18:	29403fcc 	andi	r5,r5,255
1000cd1c:	800d883a 	mov	r6,r16
1000cd20:	000cf280 	call	1000cf28 <__swbuf_r>
1000cd24:	10bfffe0 	cmpeqi	r2,r2,-1
1000cd28:	10803fcc 	andi	r2,r2,255
1000cd2c:	103fd626 	beq	r2,zero,1000cc88 <__alt_data_end+0xf800cc88>
1000cd30:	00bfffc4 	movi	r2,-1
1000cd34:	003fee06 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000cd38:	90ffffc4 	addi	r3,r18,-1
1000cd3c:	01003f84 	movi	r4,254
1000cd40:	20ffbf36 	bltu	r4,r3,1000cc40 <__alt_data_end+0xf800cc40>
1000cd44:	900b883a 	mov	r5,r18
1000cd48:	dc800005 	stb	r18,0(sp)
1000cd4c:	1029883a 	mov	r20,r2
1000cd50:	003fc506 	br	1000cc68 <__alt_data_end+0xf800cc68>
1000cd54:	9809883a 	mov	r4,r19
1000cd58:	a80b883a 	mov	r5,r21
1000cd5c:	800d883a 	mov	r6,r16
1000cd60:	000cf280 	call	1000cf28 <__swbuf_r>
1000cd64:	10bfffe0 	cmpeqi	r2,r2,-1
1000cd68:	003fef06 	br	1000cd28 <__alt_data_end+0xf800cd28>

1000cd6c <fputwc>:
1000cd6c:	defffc04 	addi	sp,sp,-16
1000cd70:	dc000115 	stw	r16,4(sp)
1000cd74:	04040074 	movhi	r16,4097
1000cd78:	840b9004 	addi	r16,r16,11840
1000cd7c:	dc400215 	stw	r17,8(sp)
1000cd80:	2023883a 	mov	r17,r4
1000cd84:	81000017 	ldw	r4,0(r16)
1000cd88:	dfc00315 	stw	ra,12(sp)
1000cd8c:	280d883a 	mov	r6,r5
1000cd90:	20000626 	beq	r4,zero,1000cdac <fputwc+0x40>
1000cd94:	20800e17 	ldw	r2,56(r4)
1000cd98:	1000041e 	bne	r2,zero,1000cdac <fputwc+0x40>
1000cd9c:	d9400015 	stw	r5,0(sp)
1000cda0:	00082080 	call	10008208 <__sinit>
1000cda4:	81000017 	ldw	r4,0(r16)
1000cda8:	d9800017 	ldw	r6,0(sp)
1000cdac:	880b883a 	mov	r5,r17
1000cdb0:	dfc00317 	ldw	ra,12(sp)
1000cdb4:	dc400217 	ldw	r17,8(sp)
1000cdb8:	dc000117 	ldw	r16,4(sp)
1000cdbc:	dec00404 	addi	sp,sp,16
1000cdc0:	000cbe81 	jmpi	1000cbe8 <_fputwc_r>

1000cdc4 <_fstat_r>:
1000cdc4:	defffd04 	addi	sp,sp,-12
1000cdc8:	dc000015 	stw	r16,0(sp)
1000cdcc:	04040074 	movhi	r16,4097
1000cdd0:	dc400115 	stw	r17,4(sp)
1000cdd4:	84126f04 	addi	r16,r16,18876
1000cdd8:	2023883a 	mov	r17,r4
1000cddc:	2809883a 	mov	r4,r5
1000cde0:	300b883a 	mov	r5,r6
1000cde4:	dfc00215 	stw	ra,8(sp)
1000cde8:	80000015 	stw	zero,0(r16)
1000cdec:	000ea1c0 	call	1000ea1c <fstat>
1000cdf0:	00ffffc4 	movi	r3,-1
1000cdf4:	10c00526 	beq	r2,r3,1000ce0c <_fstat_r+0x48>
1000cdf8:	dfc00217 	ldw	ra,8(sp)
1000cdfc:	dc400117 	ldw	r17,4(sp)
1000ce00:	dc000017 	ldw	r16,0(sp)
1000ce04:	dec00304 	addi	sp,sp,12
1000ce08:	f800283a 	ret
1000ce0c:	80c00017 	ldw	r3,0(r16)
1000ce10:	183ff926 	beq	r3,zero,1000cdf8 <__alt_data_end+0xf800cdf8>
1000ce14:	88c00015 	stw	r3,0(r17)
1000ce18:	003ff706 	br	1000cdf8 <__alt_data_end+0xf800cdf8>

1000ce1c <_isatty_r>:
1000ce1c:	defffd04 	addi	sp,sp,-12
1000ce20:	dc000015 	stw	r16,0(sp)
1000ce24:	04040074 	movhi	r16,4097
1000ce28:	dc400115 	stw	r17,4(sp)
1000ce2c:	84126f04 	addi	r16,r16,18876
1000ce30:	2023883a 	mov	r17,r4
1000ce34:	2809883a 	mov	r4,r5
1000ce38:	dfc00215 	stw	ra,8(sp)
1000ce3c:	80000015 	stw	zero,0(r16)
1000ce40:	000eb240 	call	1000eb24 <isatty>
1000ce44:	00ffffc4 	movi	r3,-1
1000ce48:	10c00526 	beq	r2,r3,1000ce60 <_isatty_r+0x44>
1000ce4c:	dfc00217 	ldw	ra,8(sp)
1000ce50:	dc400117 	ldw	r17,4(sp)
1000ce54:	dc000017 	ldw	r16,0(sp)
1000ce58:	dec00304 	addi	sp,sp,12
1000ce5c:	f800283a 	ret
1000ce60:	80c00017 	ldw	r3,0(r16)
1000ce64:	183ff926 	beq	r3,zero,1000ce4c <__alt_data_end+0xf800ce4c>
1000ce68:	88c00015 	stw	r3,0(r17)
1000ce6c:	003ff706 	br	1000ce4c <__alt_data_end+0xf800ce4c>

1000ce70 <_lseek_r>:
1000ce70:	defffd04 	addi	sp,sp,-12
1000ce74:	dc000015 	stw	r16,0(sp)
1000ce78:	04040074 	movhi	r16,4097
1000ce7c:	dc400115 	stw	r17,4(sp)
1000ce80:	84126f04 	addi	r16,r16,18876
1000ce84:	2023883a 	mov	r17,r4
1000ce88:	2809883a 	mov	r4,r5
1000ce8c:	300b883a 	mov	r5,r6
1000ce90:	380d883a 	mov	r6,r7
1000ce94:	dfc00215 	stw	ra,8(sp)
1000ce98:	80000015 	stw	zero,0(r16)
1000ce9c:	000ed040 	call	1000ed04 <lseek>
1000cea0:	00ffffc4 	movi	r3,-1
1000cea4:	10c00526 	beq	r2,r3,1000cebc <_lseek_r+0x4c>
1000cea8:	dfc00217 	ldw	ra,8(sp)
1000ceac:	dc400117 	ldw	r17,4(sp)
1000ceb0:	dc000017 	ldw	r16,0(sp)
1000ceb4:	dec00304 	addi	sp,sp,12
1000ceb8:	f800283a 	ret
1000cebc:	80c00017 	ldw	r3,0(r16)
1000cec0:	183ff926 	beq	r3,zero,1000cea8 <__alt_data_end+0xf800cea8>
1000cec4:	88c00015 	stw	r3,0(r17)
1000cec8:	003ff706 	br	1000cea8 <__alt_data_end+0xf800cea8>

1000cecc <_read_r>:
1000cecc:	defffd04 	addi	sp,sp,-12
1000ced0:	dc000015 	stw	r16,0(sp)
1000ced4:	04040074 	movhi	r16,4097
1000ced8:	dc400115 	stw	r17,4(sp)
1000cedc:	84126f04 	addi	r16,r16,18876
1000cee0:	2023883a 	mov	r17,r4
1000cee4:	2809883a 	mov	r4,r5
1000cee8:	300b883a 	mov	r5,r6
1000ceec:	380d883a 	mov	r6,r7
1000cef0:	dfc00215 	stw	ra,8(sp)
1000cef4:	80000015 	stw	zero,0(r16)
1000cef8:	000eee80 	call	1000eee8 <read>
1000cefc:	00ffffc4 	movi	r3,-1
1000cf00:	10c00526 	beq	r2,r3,1000cf18 <_read_r+0x4c>
1000cf04:	dfc00217 	ldw	ra,8(sp)
1000cf08:	dc400117 	ldw	r17,4(sp)
1000cf0c:	dc000017 	ldw	r16,0(sp)
1000cf10:	dec00304 	addi	sp,sp,12
1000cf14:	f800283a 	ret
1000cf18:	80c00017 	ldw	r3,0(r16)
1000cf1c:	183ff926 	beq	r3,zero,1000cf04 <__alt_data_end+0xf800cf04>
1000cf20:	88c00015 	stw	r3,0(r17)
1000cf24:	003ff706 	br	1000cf04 <__alt_data_end+0xf800cf04>

1000cf28 <__swbuf_r>:
1000cf28:	defffc04 	addi	sp,sp,-16
1000cf2c:	dc800215 	stw	r18,8(sp)
1000cf30:	dc400115 	stw	r17,4(sp)
1000cf34:	dc000015 	stw	r16,0(sp)
1000cf38:	dfc00315 	stw	ra,12(sp)
1000cf3c:	2025883a 	mov	r18,r4
1000cf40:	2823883a 	mov	r17,r5
1000cf44:	3021883a 	mov	r16,r6
1000cf48:	20000226 	beq	r4,zero,1000cf54 <__swbuf_r+0x2c>
1000cf4c:	20800e17 	ldw	r2,56(r4)
1000cf50:	10004126 	beq	r2,zero,1000d058 <__swbuf_r+0x130>
1000cf54:	80c00617 	ldw	r3,24(r16)
1000cf58:	8180030b 	ldhu	r6,12(r16)
1000cf5c:	80c00215 	stw	r3,8(r16)
1000cf60:	30c0020c 	andi	r3,r6,8
1000cf64:	18003526 	beq	r3,zero,1000d03c <__swbuf_r+0x114>
1000cf68:	80c00417 	ldw	r3,16(r16)
1000cf6c:	18003326 	beq	r3,zero,1000d03c <__swbuf_r+0x114>
1000cf70:	3088000c 	andi	r2,r6,8192
1000cf74:	8c403fcc 	andi	r17,r17,255
1000cf78:	10001726 	beq	r2,zero,1000cfd8 <__swbuf_r+0xb0>
1000cf7c:	80800017 	ldw	r2,0(r16)
1000cf80:	81000517 	ldw	r4,20(r16)
1000cf84:	10c7c83a 	sub	r3,r2,r3
1000cf88:	19001d0e 	bge	r3,r4,1000d000 <__swbuf_r+0xd8>
1000cf8c:	18c00044 	addi	r3,r3,1
1000cf90:	81400217 	ldw	r5,8(r16)
1000cf94:	11000044 	addi	r4,r2,1
1000cf98:	81000015 	stw	r4,0(r16)
1000cf9c:	297fffc4 	addi	r5,r5,-1
1000cfa0:	81400215 	stw	r5,8(r16)
1000cfa4:	14400005 	stb	r17,0(r2)
1000cfa8:	80800517 	ldw	r2,20(r16)
1000cfac:	10c01d26 	beq	r2,r3,1000d024 <__swbuf_r+0xfc>
1000cfb0:	8080030b 	ldhu	r2,12(r16)
1000cfb4:	1080004c 	andi	r2,r2,1
1000cfb8:	1000181e 	bne	r2,zero,1000d01c <__swbuf_r+0xf4>
1000cfbc:	8805883a 	mov	r2,r17
1000cfc0:	dfc00317 	ldw	ra,12(sp)
1000cfc4:	dc800217 	ldw	r18,8(sp)
1000cfc8:	dc400117 	ldw	r17,4(sp)
1000cfcc:	dc000017 	ldw	r16,0(sp)
1000cfd0:	dec00404 	addi	sp,sp,16
1000cfd4:	f800283a 	ret
1000cfd8:	81001917 	ldw	r4,100(r16)
1000cfdc:	00b7ffc4 	movi	r2,-8193
1000cfe0:	31880014 	ori	r6,r6,8192
1000cfe4:	2084703a 	and	r2,r4,r2
1000cfe8:	80801915 	stw	r2,100(r16)
1000cfec:	80800017 	ldw	r2,0(r16)
1000cff0:	81000517 	ldw	r4,20(r16)
1000cff4:	8180030d 	sth	r6,12(r16)
1000cff8:	10c7c83a 	sub	r3,r2,r3
1000cffc:	193fe316 	blt	r3,r4,1000cf8c <__alt_data_end+0xf800cf8c>
1000d000:	9009883a 	mov	r4,r18
1000d004:	800b883a 	mov	r5,r16
1000d008:	0007c4c0 	call	10007c4c <_fflush_r>
1000d00c:	1000091e 	bne	r2,zero,1000d034 <__swbuf_r+0x10c>
1000d010:	80800017 	ldw	r2,0(r16)
1000d014:	00c00044 	movi	r3,1
1000d018:	003fdd06 	br	1000cf90 <__alt_data_end+0xf800cf90>
1000d01c:	00800284 	movi	r2,10
1000d020:	88bfe61e 	bne	r17,r2,1000cfbc <__alt_data_end+0xf800cfbc>
1000d024:	9009883a 	mov	r4,r18
1000d028:	800b883a 	mov	r5,r16
1000d02c:	0007c4c0 	call	10007c4c <_fflush_r>
1000d030:	103fe226 	beq	r2,zero,1000cfbc <__alt_data_end+0xf800cfbc>
1000d034:	00bfffc4 	movi	r2,-1
1000d038:	003fe106 	br	1000cfc0 <__alt_data_end+0xf800cfc0>
1000d03c:	9009883a 	mov	r4,r18
1000d040:	800b883a 	mov	r5,r16
1000d044:	00061cc0 	call	100061cc <__swsetup_r>
1000d048:	1000051e 	bne	r2,zero,1000d060 <__swbuf_r+0x138>
1000d04c:	8180030b 	ldhu	r6,12(r16)
1000d050:	80c00417 	ldw	r3,16(r16)
1000d054:	003fc606 	br	1000cf70 <__alt_data_end+0xf800cf70>
1000d058:	00082080 	call	10008208 <__sinit>
1000d05c:	003fbd06 	br	1000cf54 <__alt_data_end+0xf800cf54>
1000d060:	80c0030b 	ldhu	r3,12(r16)
1000d064:	00bfffc4 	movi	r2,-1
1000d068:	18c01014 	ori	r3,r3,64
1000d06c:	80c0030d 	sth	r3,12(r16)
1000d070:	00c00244 	movi	r3,9
1000d074:	90c00015 	stw	r3,0(r18)
1000d078:	003fd106 	br	1000cfc0 <__alt_data_end+0xf800cfc0>

1000d07c <__swbuf>:
1000d07c:	00c40074 	movhi	r3,4097
1000d080:	18cb9004 	addi	r3,r3,11840
1000d084:	2005883a 	mov	r2,r4
1000d088:	19000017 	ldw	r4,0(r3)
1000d08c:	280d883a 	mov	r6,r5
1000d090:	100b883a 	mov	r5,r2
1000d094:	000cf281 	jmpi	1000cf28 <__swbuf_r>

1000d098 <_wcrtomb_r>:
1000d098:	defff604 	addi	sp,sp,-40
1000d09c:	00840074 	movhi	r2,4097
1000d0a0:	dc800815 	stw	r18,32(sp)
1000d0a4:	dc400715 	stw	r17,28(sp)
1000d0a8:	dc000615 	stw	r16,24(sp)
1000d0ac:	108b9404 	addi	r2,r2,11856
1000d0b0:	dfc00915 	stw	ra,36(sp)
1000d0b4:	2021883a 	mov	r16,r4
1000d0b8:	3823883a 	mov	r17,r7
1000d0bc:	14800017 	ldw	r18,0(r2)
1000d0c0:	28001426 	beq	r5,zero,1000d114 <_wcrtomb_r+0x7c>
1000d0c4:	d9400415 	stw	r5,16(sp)
1000d0c8:	d9800515 	stw	r6,20(sp)
1000d0cc:	0008cfc0 	call	10008cfc <__locale_charset>
1000d0d0:	d9400417 	ldw	r5,16(sp)
1000d0d4:	d9800517 	ldw	r6,20(sp)
1000d0d8:	8009883a 	mov	r4,r16
1000d0dc:	dc400015 	stw	r17,0(sp)
1000d0e0:	100f883a 	mov	r7,r2
1000d0e4:	903ee83a 	callr	r18
1000d0e8:	00ffffc4 	movi	r3,-1
1000d0ec:	10c0031e 	bne	r2,r3,1000d0fc <_wcrtomb_r+0x64>
1000d0f0:	88000015 	stw	zero,0(r17)
1000d0f4:	00c02284 	movi	r3,138
1000d0f8:	80c00015 	stw	r3,0(r16)
1000d0fc:	dfc00917 	ldw	ra,36(sp)
1000d100:	dc800817 	ldw	r18,32(sp)
1000d104:	dc400717 	ldw	r17,28(sp)
1000d108:	dc000617 	ldw	r16,24(sp)
1000d10c:	dec00a04 	addi	sp,sp,40
1000d110:	f800283a 	ret
1000d114:	0008cfc0 	call	10008cfc <__locale_charset>
1000d118:	8009883a 	mov	r4,r16
1000d11c:	dc400015 	stw	r17,0(sp)
1000d120:	d9400104 	addi	r5,sp,4
1000d124:	000d883a 	mov	r6,zero
1000d128:	100f883a 	mov	r7,r2
1000d12c:	903ee83a 	callr	r18
1000d130:	003fed06 	br	1000d0e8 <__alt_data_end+0xf800d0e8>

1000d134 <wcrtomb>:
1000d134:	defff504 	addi	sp,sp,-44
1000d138:	dc400515 	stw	r17,20(sp)
1000d13c:	dc000415 	stw	r16,16(sp)
1000d140:	dfc00a15 	stw	ra,40(sp)
1000d144:	dd400915 	stw	r21,36(sp)
1000d148:	dd000815 	stw	r20,32(sp)
1000d14c:	dcc00715 	stw	r19,28(sp)
1000d150:	dc800615 	stw	r18,24(sp)
1000d154:	2021883a 	mov	r16,r4
1000d158:	3023883a 	mov	r17,r6
1000d15c:	20001d26 	beq	r4,zero,1000d1d4 <wcrtomb+0xa0>
1000d160:	04840074 	movhi	r18,4097
1000d164:	948b9004 	addi	r18,r18,11840
1000d168:	00840074 	movhi	r2,4097
1000d16c:	95400017 	ldw	r21,0(r18)
1000d170:	108b9404 	addi	r2,r2,11856
1000d174:	15000017 	ldw	r20,0(r2)
1000d178:	2827883a 	mov	r19,r5
1000d17c:	0008cfc0 	call	10008cfc <__locale_charset>
1000d180:	a809883a 	mov	r4,r21
1000d184:	dc400015 	stw	r17,0(sp)
1000d188:	800b883a 	mov	r5,r16
1000d18c:	980d883a 	mov	r6,r19
1000d190:	100f883a 	mov	r7,r2
1000d194:	a03ee83a 	callr	r20
1000d198:	00ffffc4 	movi	r3,-1
1000d19c:	10c0041e 	bne	r2,r3,1000d1b0 <wcrtomb+0x7c>
1000d1a0:	90c00017 	ldw	r3,0(r18)
1000d1a4:	01002284 	movi	r4,138
1000d1a8:	88000015 	stw	zero,0(r17)
1000d1ac:	19000015 	stw	r4,0(r3)
1000d1b0:	dfc00a17 	ldw	ra,40(sp)
1000d1b4:	dd400917 	ldw	r21,36(sp)
1000d1b8:	dd000817 	ldw	r20,32(sp)
1000d1bc:	dcc00717 	ldw	r19,28(sp)
1000d1c0:	dc800617 	ldw	r18,24(sp)
1000d1c4:	dc400517 	ldw	r17,20(sp)
1000d1c8:	dc000417 	ldw	r16,16(sp)
1000d1cc:	dec00b04 	addi	sp,sp,44
1000d1d0:	f800283a 	ret
1000d1d4:	04840074 	movhi	r18,4097
1000d1d8:	948b9004 	addi	r18,r18,11840
1000d1dc:	00840074 	movhi	r2,4097
1000d1e0:	94c00017 	ldw	r19,0(r18)
1000d1e4:	108b9404 	addi	r2,r2,11856
1000d1e8:	14000017 	ldw	r16,0(r2)
1000d1ec:	0008cfc0 	call	10008cfc <__locale_charset>
1000d1f0:	9809883a 	mov	r4,r19
1000d1f4:	dc400015 	stw	r17,0(sp)
1000d1f8:	d9400104 	addi	r5,sp,4
1000d1fc:	000d883a 	mov	r6,zero
1000d200:	100f883a 	mov	r7,r2
1000d204:	803ee83a 	callr	r16
1000d208:	003fe306 	br	1000d198 <__alt_data_end+0xf800d198>

1000d20c <__ascii_wctomb>:
1000d20c:	28000526 	beq	r5,zero,1000d224 <__ascii_wctomb+0x18>
1000d210:	00803fc4 	movi	r2,255
1000d214:	11800536 	bltu	r2,r6,1000d22c <__ascii_wctomb+0x20>
1000d218:	29800005 	stb	r6,0(r5)
1000d21c:	00800044 	movi	r2,1
1000d220:	f800283a 	ret
1000d224:	0005883a 	mov	r2,zero
1000d228:	f800283a 	ret
1000d22c:	00802284 	movi	r2,138
1000d230:	20800015 	stw	r2,0(r4)
1000d234:	00bfffc4 	movi	r2,-1
1000d238:	f800283a 	ret

1000d23c <_wctomb_r>:
1000d23c:	00840074 	movhi	r2,4097
1000d240:	defff904 	addi	sp,sp,-28
1000d244:	108b9404 	addi	r2,r2,11856
1000d248:	dfc00615 	stw	ra,24(sp)
1000d24c:	dc400515 	stw	r17,20(sp)
1000d250:	dc000415 	stw	r16,16(sp)
1000d254:	3823883a 	mov	r17,r7
1000d258:	14000017 	ldw	r16,0(r2)
1000d25c:	d9000115 	stw	r4,4(sp)
1000d260:	d9400215 	stw	r5,8(sp)
1000d264:	d9800315 	stw	r6,12(sp)
1000d268:	0008cfc0 	call	10008cfc <__locale_charset>
1000d26c:	d9000117 	ldw	r4,4(sp)
1000d270:	d9400217 	ldw	r5,8(sp)
1000d274:	d9800317 	ldw	r6,12(sp)
1000d278:	dc400015 	stw	r17,0(sp)
1000d27c:	100f883a 	mov	r7,r2
1000d280:	803ee83a 	callr	r16
1000d284:	dfc00617 	ldw	ra,24(sp)
1000d288:	dc400517 	ldw	r17,20(sp)
1000d28c:	dc000417 	ldw	r16,16(sp)
1000d290:	dec00704 	addi	sp,sp,28
1000d294:	f800283a 	ret

1000d298 <__muldi3>:
1000d298:	defff604 	addi	sp,sp,-40
1000d29c:	dd800615 	stw	r22,24(sp)
1000d2a0:	dd400515 	stw	r21,20(sp)
1000d2a4:	25bfffcc 	andi	r22,r4,65535
1000d2a8:	357fffcc 	andi	r21,r6,65535
1000d2ac:	dc400115 	stw	r17,4(sp)
1000d2b0:	2022d43a 	srli	r17,r4,16
1000d2b4:	dcc00315 	stw	r19,12(sp)
1000d2b8:	dc800215 	stw	r18,8(sp)
1000d2bc:	2027883a 	mov	r19,r4
1000d2c0:	2825883a 	mov	r18,r5
1000d2c4:	a809883a 	mov	r4,r21
1000d2c8:	b00b883a 	mov	r5,r22
1000d2cc:	dfc00915 	stw	ra,36(sp)
1000d2d0:	df000815 	stw	fp,32(sp)
1000d2d4:	ddc00715 	stw	r23,28(sp)
1000d2d8:	3839883a 	mov	fp,r7
1000d2dc:	302ed43a 	srli	r23,r6,16
1000d2e0:	dd000415 	stw	r20,16(sp)
1000d2e4:	dc000015 	stw	r16,0(sp)
1000d2e8:	3029883a 	mov	r20,r6
1000d2ec:	0002b140 	call	10002b14 <__mulsi3>
1000d2f0:	a809883a 	mov	r4,r21
1000d2f4:	880b883a 	mov	r5,r17
1000d2f8:	1021883a 	mov	r16,r2
1000d2fc:	0002b140 	call	10002b14 <__mulsi3>
1000d300:	880b883a 	mov	r5,r17
1000d304:	b809883a 	mov	r4,r23
1000d308:	102b883a 	mov	r21,r2
1000d30c:	0002b140 	call	10002b14 <__mulsi3>
1000d310:	b809883a 	mov	r4,r23
1000d314:	b00b883a 	mov	r5,r22
1000d318:	1023883a 	mov	r17,r2
1000d31c:	0002b140 	call	10002b14 <__mulsi3>
1000d320:	8012d43a 	srli	r9,r16,16
1000d324:	a885883a 	add	r2,r21,r2
1000d328:	1251883a 	add	r8,r2,r9
1000d32c:	4540022e 	bgeu	r8,r21,1000d338 <__muldi3+0xa0>
1000d330:	00800074 	movhi	r2,1
1000d334:	88a3883a 	add	r17,r17,r2
1000d338:	4006d43a 	srli	r3,r8,16
1000d33c:	4010943a 	slli	r8,r8,16
1000d340:	9809883a 	mov	r4,r19
1000d344:	e00b883a 	mov	r5,fp
1000d348:	843fffcc 	andi	r16,r16,65535
1000d34c:	88e3883a 	add	r17,r17,r3
1000d350:	4421883a 	add	r16,r8,r16
1000d354:	0002b140 	call	10002b14 <__mulsi3>
1000d358:	a009883a 	mov	r4,r20
1000d35c:	900b883a 	mov	r5,r18
1000d360:	1027883a 	mov	r19,r2
1000d364:	0002b140 	call	10002b14 <__mulsi3>
1000d368:	9885883a 	add	r2,r19,r2
1000d36c:	1447883a 	add	r3,r2,r17
1000d370:	8005883a 	mov	r2,r16
1000d374:	dfc00917 	ldw	ra,36(sp)
1000d378:	df000817 	ldw	fp,32(sp)
1000d37c:	ddc00717 	ldw	r23,28(sp)
1000d380:	dd800617 	ldw	r22,24(sp)
1000d384:	dd400517 	ldw	r21,20(sp)
1000d388:	dd000417 	ldw	r20,16(sp)
1000d38c:	dcc00317 	ldw	r19,12(sp)
1000d390:	dc800217 	ldw	r18,8(sp)
1000d394:	dc400117 	ldw	r17,4(sp)
1000d398:	dc000017 	ldw	r16,0(sp)
1000d39c:	dec00a04 	addi	sp,sp,40
1000d3a0:	f800283a 	ret

1000d3a4 <__divdf3>:
1000d3a4:	defff004 	addi	sp,sp,-64
1000d3a8:	dc800815 	stw	r18,32(sp)
1000d3ac:	2824d53a 	srli	r18,r5,20
1000d3b0:	dd800c15 	stw	r22,48(sp)
1000d3b4:	282cd7fa 	srli	r22,r5,31
1000d3b8:	dc000615 	stw	r16,24(sp)
1000d3bc:	04000434 	movhi	r16,16
1000d3c0:	df000e15 	stw	fp,56(sp)
1000d3c4:	dd000a15 	stw	r20,40(sp)
1000d3c8:	dcc00915 	stw	r19,36(sp)
1000d3cc:	dc400715 	stw	r17,28(sp)
1000d3d0:	843fffc4 	addi	r16,r16,-1
1000d3d4:	dfc00f15 	stw	ra,60(sp)
1000d3d8:	ddc00d15 	stw	r23,52(sp)
1000d3dc:	dd400b15 	stw	r21,44(sp)
1000d3e0:	9481ffcc 	andi	r18,r18,2047
1000d3e4:	2029883a 	mov	r20,r4
1000d3e8:	2027883a 	mov	r19,r4
1000d3ec:	2c22703a 	and	r17,r5,r16
1000d3f0:	b7003fcc 	andi	fp,r22,255
1000d3f4:	90005e26 	beq	r18,zero,1000d570 <__divdf3+0x1cc>
1000d3f8:	0081ffc4 	movi	r2,2047
1000d3fc:	90803526 	beq	r18,r2,1000d4d4 <__divdf3+0x130>
1000d400:	8c000434 	orhi	r16,r17,16
1000d404:	2004d77a 	srli	r2,r4,29
1000d408:	802090fa 	slli	r16,r16,3
1000d40c:	202690fa 	slli	r19,r4,3
1000d410:	94bf0044 	addi	r18,r18,-1023
1000d414:	80a2b03a 	or	r17,r16,r2
1000d418:	0029883a 	mov	r20,zero
1000d41c:	0011883a 	mov	r8,zero
1000d420:	380ad53a 	srli	r5,r7,20
1000d424:	382ed7fa 	srli	r23,r7,31
1000d428:	04000434 	movhi	r16,16
1000d42c:	843fffc4 	addi	r16,r16,-1
1000d430:	2941ffcc 	andi	r5,r5,2047
1000d434:	302b883a 	mov	r21,r6
1000d438:	3c20703a 	and	r16,r7,r16
1000d43c:	ba403fcc 	andi	r9,r23,255
1000d440:	28006726 	beq	r5,zero,1000d5e0 <__divdf3+0x23c>
1000d444:	0081ffc4 	movi	r2,2047
1000d448:	28805f26 	beq	r5,r2,1000d5c8 <__divdf3+0x224>
1000d44c:	84000434 	orhi	r16,r16,16
1000d450:	3004d77a 	srli	r2,r6,29
1000d454:	802090fa 	slli	r16,r16,3
1000d458:	302a90fa 	slli	r21,r6,3
1000d45c:	297f0044 	addi	r5,r5,-1023
1000d460:	80a0b03a 	or	r16,r16,r2
1000d464:	000f883a 	mov	r7,zero
1000d468:	3d06b03a 	or	r3,r7,r20
1000d46c:	180690ba 	slli	r3,r3,2
1000d470:	00840074 	movhi	r2,4097
1000d474:	10b52504 	addi	r2,r2,-11116
1000d478:	1885883a 	add	r2,r3,r2
1000d47c:	10800017 	ldw	r2,0(r2)
1000d480:	b5c8f03a 	xor	r4,r22,r23
1000d484:	200d883a 	mov	r6,r4
1000d488:	25003fcc 	andi	r20,r4,255
1000d48c:	9165c83a 	sub	r18,r18,r5
1000d490:	1000683a 	jmp	r2
1000d494:	1000d6dc 	xori	zero,r2,859
1000d498:	1000d50c 	andi	zero,r2,852
1000d49c:	1000d6a0 	cmpeqi	zero,r2,858
1000d4a0:	1000d4f0 	cmpltui	zero,r2,851
1000d4a4:	1000d6a0 	cmpeqi	zero,r2,858
1000d4a8:	1000d674 	orhi	zero,r2,857
1000d4ac:	1000d6a0 	cmpeqi	zero,r2,858
1000d4b0:	1000d4f0 	cmpltui	zero,r2,851
1000d4b4:	1000d50c 	andi	zero,r2,852
1000d4b8:	1000d50c 	andi	zero,r2,852
1000d4bc:	1000d674 	orhi	zero,r2,857
1000d4c0:	1000d4f0 	cmpltui	zero,r2,851
1000d4c4:	1000d500 	call	11000d50 <_gp+0xfe5f14>
1000d4c8:	1000d500 	call	11000d50 <_gp+0xfe5f14>
1000d4cc:	1000d500 	call	11000d50 <_gp+0xfe5f14>
1000d4d0:	1000d6b0 	cmpltui	zero,r2,858
1000d4d4:	8904b03a 	or	r2,r17,r4
1000d4d8:	1000631e 	bne	r2,zero,1000d668 <__divdf3+0x2c4>
1000d4dc:	05000204 	movi	r20,8
1000d4e0:	0023883a 	mov	r17,zero
1000d4e4:	0027883a 	mov	r19,zero
1000d4e8:	02000084 	movi	r8,2
1000d4ec:	003fcc06 	br	1000d420 <__alt_data_end+0xf800d420>
1000d4f0:	8023883a 	mov	r17,r16
1000d4f4:	a827883a 	mov	r19,r21
1000d4f8:	4839883a 	mov	fp,r9
1000d4fc:	3811883a 	mov	r8,r7
1000d500:	00800084 	movi	r2,2
1000d504:	4081531e 	bne	r8,r2,1000da54 <__divdf3+0x6b0>
1000d508:	e029883a 	mov	r20,fp
1000d50c:	a180004c 	andi	r6,r20,1
1000d510:	0201ffc4 	movi	r8,2047
1000d514:	000b883a 	mov	r5,zero
1000d518:	0027883a 	mov	r19,zero
1000d51c:	4010953a 	slli	r8,r8,20
1000d520:	30c03fcc 	andi	r3,r6,255
1000d524:	04000434 	movhi	r16,16
1000d528:	180697fa 	slli	r3,r3,31
1000d52c:	843fffc4 	addi	r16,r16,-1
1000d530:	2c20703a 	and	r16,r5,r16
1000d534:	8220b03a 	or	r16,r16,r8
1000d538:	80c6b03a 	or	r3,r16,r3
1000d53c:	9805883a 	mov	r2,r19
1000d540:	dfc00f17 	ldw	ra,60(sp)
1000d544:	df000e17 	ldw	fp,56(sp)
1000d548:	ddc00d17 	ldw	r23,52(sp)
1000d54c:	dd800c17 	ldw	r22,48(sp)
1000d550:	dd400b17 	ldw	r21,44(sp)
1000d554:	dd000a17 	ldw	r20,40(sp)
1000d558:	dcc00917 	ldw	r19,36(sp)
1000d55c:	dc800817 	ldw	r18,32(sp)
1000d560:	dc400717 	ldw	r17,28(sp)
1000d564:	dc000617 	ldw	r16,24(sp)
1000d568:	dec01004 	addi	sp,sp,64
1000d56c:	f800283a 	ret
1000d570:	8904b03a 	or	r2,r17,r4
1000d574:	10003726 	beq	r2,zero,1000d654 <__divdf3+0x2b0>
1000d578:	88014d26 	beq	r17,zero,1000dab0 <__divdf3+0x70c>
1000d57c:	8809883a 	mov	r4,r17
1000d580:	d9800215 	stw	r6,8(sp)
1000d584:	d9c00515 	stw	r7,20(sp)
1000d588:	0003e000 	call	10003e00 <__clzsi2>
1000d58c:	d9800217 	ldw	r6,8(sp)
1000d590:	d9c00517 	ldw	r7,20(sp)
1000d594:	1007883a 	mov	r3,r2
1000d598:	01000a04 	movi	r4,40
1000d59c:	1cfffe04 	addi	r19,r3,-8
1000d5a0:	20c9c83a 	sub	r4,r4,r3
1000d5a4:	8cca983a 	sll	r5,r17,r19
1000d5a8:	a108d83a 	srl	r4,r20,r4
1000d5ac:	a4e6983a 	sll	r19,r20,r19
1000d5b0:	2162b03a 	or	r17,r4,r5
1000d5b4:	04bf0344 	movi	r18,-1011
1000d5b8:	90e5c83a 	sub	r18,r18,r3
1000d5bc:	0029883a 	mov	r20,zero
1000d5c0:	0011883a 	mov	r8,zero
1000d5c4:	003f9606 	br	1000d420 <__alt_data_end+0xf800d420>
1000d5c8:	8184b03a 	or	r2,r16,r6
1000d5cc:	10001f1e 	bne	r2,zero,1000d64c <__divdf3+0x2a8>
1000d5d0:	0021883a 	mov	r16,zero
1000d5d4:	002b883a 	mov	r21,zero
1000d5d8:	01c00084 	movi	r7,2
1000d5dc:	003fa206 	br	1000d468 <__alt_data_end+0xf800d468>
1000d5e0:	8184b03a 	or	r2,r16,r6
1000d5e4:	10001526 	beq	r2,zero,1000d63c <__divdf3+0x298>
1000d5e8:	80013d26 	beq	r16,zero,1000dae0 <__divdf3+0x73c>
1000d5ec:	8009883a 	mov	r4,r16
1000d5f0:	d9800215 	stw	r6,8(sp)
1000d5f4:	da000315 	stw	r8,12(sp)
1000d5f8:	da400415 	stw	r9,16(sp)
1000d5fc:	0003e000 	call	10003e00 <__clzsi2>
1000d600:	d9800217 	ldw	r6,8(sp)
1000d604:	da000317 	ldw	r8,12(sp)
1000d608:	da400417 	ldw	r9,16(sp)
1000d60c:	1007883a 	mov	r3,r2
1000d610:	01000a04 	movi	r4,40
1000d614:	1d7ffe04 	addi	r21,r3,-8
1000d618:	20c9c83a 	sub	r4,r4,r3
1000d61c:	8560983a 	sll	r16,r16,r21
1000d620:	3108d83a 	srl	r4,r6,r4
1000d624:	356a983a 	sll	r21,r6,r21
1000d628:	2420b03a 	or	r16,r4,r16
1000d62c:	017f0344 	movi	r5,-1011
1000d630:	28cbc83a 	sub	r5,r5,r3
1000d634:	000f883a 	mov	r7,zero
1000d638:	003f8b06 	br	1000d468 <__alt_data_end+0xf800d468>
1000d63c:	0021883a 	mov	r16,zero
1000d640:	002b883a 	mov	r21,zero
1000d644:	01c00044 	movi	r7,1
1000d648:	003f8706 	br	1000d468 <__alt_data_end+0xf800d468>
1000d64c:	01c000c4 	movi	r7,3
1000d650:	003f8506 	br	1000d468 <__alt_data_end+0xf800d468>
1000d654:	05000104 	movi	r20,4
1000d658:	0023883a 	mov	r17,zero
1000d65c:	0027883a 	mov	r19,zero
1000d660:	02000044 	movi	r8,1
1000d664:	003f6e06 	br	1000d420 <__alt_data_end+0xf800d420>
1000d668:	05000304 	movi	r20,12
1000d66c:	020000c4 	movi	r8,3
1000d670:	003f6b06 	br	1000d420 <__alt_data_end+0xf800d420>
1000d674:	01400434 	movhi	r5,16
1000d678:	000d883a 	mov	r6,zero
1000d67c:	297fffc4 	addi	r5,r5,-1
1000d680:	04ffffc4 	movi	r19,-1
1000d684:	0201ffc4 	movi	r8,2047
1000d688:	003fa406 	br	1000d51c <__alt_data_end+0xf800d51c>
1000d68c:	043f0084 	movi	r16,-1022
1000d690:	84a1c83a 	sub	r16,r16,r18
1000d694:	00800e04 	movi	r2,56
1000d698:	14014d0e 	bge	r2,r16,1000dbd0 <__divdf3+0x82c>
1000d69c:	a180004c 	andi	r6,r20,1
1000d6a0:	0011883a 	mov	r8,zero
1000d6a4:	000b883a 	mov	r5,zero
1000d6a8:	0027883a 	mov	r19,zero
1000d6ac:	003f9b06 	br	1000d51c <__alt_data_end+0xf800d51c>
1000d6b0:	8880022c 	andhi	r2,r17,8
1000d6b4:	1000f026 	beq	r2,zero,1000da78 <__divdf3+0x6d4>
1000d6b8:	8080022c 	andhi	r2,r16,8
1000d6bc:	1000ee1e 	bne	r2,zero,1000da78 <__divdf3+0x6d4>
1000d6c0:	00800434 	movhi	r2,16
1000d6c4:	81400234 	orhi	r5,r16,8
1000d6c8:	10bfffc4 	addi	r2,r2,-1
1000d6cc:	b80d883a 	mov	r6,r23
1000d6d0:	288a703a 	and	r5,r5,r2
1000d6d4:	a827883a 	mov	r19,r21
1000d6d8:	003fea06 	br	1000d684 <__alt_data_end+0xf800d684>
1000d6dc:	84411c36 	bltu	r16,r17,1000db50 <__divdf3+0x7ac>
1000d6e0:	8c011a26 	beq	r17,r16,1000db4c <__divdf3+0x7a8>
1000d6e4:	94bfffc4 	addi	r18,r18,-1
1000d6e8:	dcc00015 	stw	r19,0(sp)
1000d6ec:	8811883a 	mov	r8,r17
1000d6f0:	002d883a 	mov	r22,zero
1000d6f4:	a80cd63a 	srli	r6,r21,24
1000d6f8:	8020923a 	slli	r16,r16,8
1000d6fc:	a82a923a 	slli	r21,r21,8
1000d700:	4009883a 	mov	r4,r8
1000d704:	342eb03a 	or	r23,r6,r16
1000d708:	dd400115 	stw	r21,4(sp)
1000d70c:	b82ad43a 	srli	r21,r23,16
1000d710:	da000315 	stw	r8,12(sp)
1000d714:	bcffffcc 	andi	r19,r23,65535
1000d718:	a80b883a 	mov	r5,r21
1000d71c:	0002b040 	call	10002b04 <__udivsi3>
1000d720:	1009883a 	mov	r4,r2
1000d724:	980b883a 	mov	r5,r19
1000d728:	1023883a 	mov	r17,r2
1000d72c:	0002b140 	call	10002b14 <__mulsi3>
1000d730:	da000317 	ldw	r8,12(sp)
1000d734:	a80b883a 	mov	r5,r21
1000d738:	1039883a 	mov	fp,r2
1000d73c:	4009883a 	mov	r4,r8
1000d740:	0002b0c0 	call	10002b0c <__umodsi3>
1000d744:	d8c00017 	ldw	r3,0(sp)
1000d748:	1004943a 	slli	r2,r2,16
1000d74c:	1810d43a 	srli	r8,r3,16
1000d750:	120eb03a 	or	r7,r2,r8
1000d754:	3f00062e 	bgeu	r7,fp,1000d770 <__divdf3+0x3cc>
1000d758:	3dcf883a 	add	r7,r7,r23
1000d75c:	88bfffc4 	addi	r2,r17,-1
1000d760:	3dc10a36 	bltu	r7,r23,1000db8c <__divdf3+0x7e8>
1000d764:	3f01092e 	bgeu	r7,fp,1000db8c <__divdf3+0x7e8>
1000d768:	8c7fff84 	addi	r17,r17,-2
1000d76c:	3dcf883a 	add	r7,r7,r23
1000d770:	3f39c83a 	sub	fp,r7,fp
1000d774:	e009883a 	mov	r4,fp
1000d778:	a80b883a 	mov	r5,r21
1000d77c:	0002b040 	call	10002b04 <__udivsi3>
1000d780:	1009883a 	mov	r4,r2
1000d784:	980b883a 	mov	r5,r19
1000d788:	1021883a 	mov	r16,r2
1000d78c:	0002b140 	call	10002b14 <__mulsi3>
1000d790:	e009883a 	mov	r4,fp
1000d794:	a80b883a 	mov	r5,r21
1000d798:	d8800315 	stw	r2,12(sp)
1000d79c:	0002b0c0 	call	10002b0c <__umodsi3>
1000d7a0:	d9000017 	ldw	r4,0(sp)
1000d7a4:	1004943a 	slli	r2,r2,16
1000d7a8:	da000317 	ldw	r8,12(sp)
1000d7ac:	20ffffcc 	andi	r3,r4,65535
1000d7b0:	10ceb03a 	or	r7,r2,r3
1000d7b4:	3a00062e 	bgeu	r7,r8,1000d7d0 <__divdf3+0x42c>
1000d7b8:	3dcf883a 	add	r7,r7,r23
1000d7bc:	80bfffc4 	addi	r2,r16,-1
1000d7c0:	3dc0f036 	bltu	r7,r23,1000db84 <__divdf3+0x7e0>
1000d7c4:	3a00ef2e 	bgeu	r7,r8,1000db84 <__divdf3+0x7e0>
1000d7c8:	843fff84 	addi	r16,r16,-2
1000d7cc:	3dcf883a 	add	r7,r7,r23
1000d7d0:	d8c00117 	ldw	r3,4(sp)
1000d7d4:	8822943a 	slli	r17,r17,16
1000d7d8:	3a0fc83a 	sub	r7,r7,r8
1000d7dc:	1806d43a 	srli	r3,r3,16
1000d7e0:	8462b03a 	or	r17,r16,r17
1000d7e4:	8affffcc 	andi	r11,r17,65535
1000d7e8:	d8c00015 	stw	r3,0(sp)
1000d7ec:	d8c00117 	ldw	r3,4(sp)
1000d7f0:	8820d43a 	srli	r16,r17,16
1000d7f4:	5809883a 	mov	r4,r11
1000d7f8:	1f3fffcc 	andi	fp,r3,65535
1000d7fc:	e00b883a 	mov	r5,fp
1000d800:	d9c00515 	stw	r7,20(sp)
1000d804:	dac00215 	stw	r11,8(sp)
1000d808:	0002b140 	call	10002b14 <__mulsi3>
1000d80c:	8009883a 	mov	r4,r16
1000d810:	e00b883a 	mov	r5,fp
1000d814:	d8800415 	stw	r2,16(sp)
1000d818:	0002b140 	call	10002b14 <__mulsi3>
1000d81c:	d9400017 	ldw	r5,0(sp)
1000d820:	8009883a 	mov	r4,r16
1000d824:	d8800315 	stw	r2,12(sp)
1000d828:	0002b140 	call	10002b14 <__mulsi3>
1000d82c:	dac00217 	ldw	r11,8(sp)
1000d830:	d9400017 	ldw	r5,0(sp)
1000d834:	d8800215 	stw	r2,8(sp)
1000d838:	5809883a 	mov	r4,r11
1000d83c:	0002b140 	call	10002b14 <__mulsi3>
1000d840:	da400417 	ldw	r9,16(sp)
1000d844:	da800317 	ldw	r10,12(sp)
1000d848:	d9c00517 	ldw	r7,20(sp)
1000d84c:	480ad43a 	srli	r5,r9,16
1000d850:	5085883a 	add	r2,r10,r2
1000d854:	db000217 	ldw	r12,8(sp)
1000d858:	1151883a 	add	r8,r2,r5
1000d85c:	4280022e 	bgeu	r8,r10,1000d868 <__divdf3+0x4c4>
1000d860:	00800074 	movhi	r2,1
1000d864:	6099883a 	add	r12,r12,r2
1000d868:	400ad43a 	srli	r5,r8,16
1000d86c:	4010943a 	slli	r8,r8,16
1000d870:	4c3fffcc 	andi	r16,r9,65535
1000d874:	6149883a 	add	r4,r12,r5
1000d878:	4411883a 	add	r8,r8,r16
1000d87c:	3900a736 	bltu	r7,r4,1000db1c <__divdf3+0x778>
1000d880:	3900c426 	beq	r7,r4,1000db94 <__divdf3+0x7f0>
1000d884:	3909c83a 	sub	r4,r7,r4
1000d888:	b221c83a 	sub	r16,r22,r8
1000d88c:	b42d803a 	cmpltu	r22,r22,r16
1000d890:	25adc83a 	sub	r22,r4,r22
1000d894:	b5c0c626 	beq	r22,r23,1000dbb0 <__divdf3+0x80c>
1000d898:	b009883a 	mov	r4,r22
1000d89c:	a80b883a 	mov	r5,r21
1000d8a0:	0002b040 	call	10002b04 <__udivsi3>
1000d8a4:	1009883a 	mov	r4,r2
1000d8a8:	980b883a 	mov	r5,r19
1000d8ac:	d8800315 	stw	r2,12(sp)
1000d8b0:	0002b140 	call	10002b14 <__mulsi3>
1000d8b4:	a80b883a 	mov	r5,r21
1000d8b8:	b009883a 	mov	r4,r22
1000d8bc:	d8800415 	stw	r2,16(sp)
1000d8c0:	0002b0c0 	call	10002b0c <__umodsi3>
1000d8c4:	1004943a 	slli	r2,r2,16
1000d8c8:	800ed43a 	srli	r7,r16,16
1000d8cc:	da400417 	ldw	r9,16(sp)
1000d8d0:	da000317 	ldw	r8,12(sp)
1000d8d4:	11cab03a 	or	r5,r2,r7
1000d8d8:	2a40062e 	bgeu	r5,r9,1000d8f4 <__divdf3+0x550>
1000d8dc:	2dcb883a 	add	r5,r5,r23
1000d8e0:	40bfffc4 	addi	r2,r8,-1
1000d8e4:	2dc0b436 	bltu	r5,r23,1000dbb8 <__divdf3+0x814>
1000d8e8:	2a40b32e 	bgeu	r5,r9,1000dbb8 <__divdf3+0x814>
1000d8ec:	423fff84 	addi	r8,r8,-2
1000d8f0:	2dcb883a 	add	r5,r5,r23
1000d8f4:	2a6dc83a 	sub	r22,r5,r9
1000d8f8:	b009883a 	mov	r4,r22
1000d8fc:	a80b883a 	mov	r5,r21
1000d900:	da000315 	stw	r8,12(sp)
1000d904:	0002b040 	call	10002b04 <__udivsi3>
1000d908:	980b883a 	mov	r5,r19
1000d90c:	1009883a 	mov	r4,r2
1000d910:	d8800415 	stw	r2,16(sp)
1000d914:	0002b140 	call	10002b14 <__mulsi3>
1000d918:	b009883a 	mov	r4,r22
1000d91c:	a80b883a 	mov	r5,r21
1000d920:	1027883a 	mov	r19,r2
1000d924:	0002b0c0 	call	10002b0c <__umodsi3>
1000d928:	1004943a 	slli	r2,r2,16
1000d92c:	843fffcc 	andi	r16,r16,65535
1000d930:	da000317 	ldw	r8,12(sp)
1000d934:	140eb03a 	or	r7,r2,r16
1000d938:	da400417 	ldw	r9,16(sp)
1000d93c:	3cc0062e 	bgeu	r7,r19,1000d958 <__divdf3+0x5b4>
1000d940:	3dcf883a 	add	r7,r7,r23
1000d944:	48bfffc4 	addi	r2,r9,-1
1000d948:	3dc09d36 	bltu	r7,r23,1000dbc0 <__divdf3+0x81c>
1000d94c:	3cc09c2e 	bgeu	r7,r19,1000dbc0 <__divdf3+0x81c>
1000d950:	4a7fff84 	addi	r9,r9,-2
1000d954:	3dcf883a 	add	r7,r7,r23
1000d958:	4010943a 	slli	r8,r8,16
1000d95c:	3cebc83a 	sub	r21,r7,r19
1000d960:	e00b883a 	mov	r5,fp
1000d964:	4a26b03a 	or	r19,r9,r8
1000d968:	99ffffcc 	andi	r7,r19,65535
1000d96c:	9820d43a 	srli	r16,r19,16
1000d970:	3809883a 	mov	r4,r7
1000d974:	d9c00515 	stw	r7,20(sp)
1000d978:	0002b140 	call	10002b14 <__mulsi3>
1000d97c:	8009883a 	mov	r4,r16
1000d980:	e00b883a 	mov	r5,fp
1000d984:	102d883a 	mov	r22,r2
1000d988:	0002b140 	call	10002b14 <__mulsi3>
1000d98c:	d9400017 	ldw	r5,0(sp)
1000d990:	8009883a 	mov	r4,r16
1000d994:	1039883a 	mov	fp,r2
1000d998:	0002b140 	call	10002b14 <__mulsi3>
1000d99c:	d9c00517 	ldw	r7,20(sp)
1000d9a0:	d9400017 	ldw	r5,0(sp)
1000d9a4:	1021883a 	mov	r16,r2
1000d9a8:	3809883a 	mov	r4,r7
1000d9ac:	0002b140 	call	10002b14 <__mulsi3>
1000d9b0:	b008d43a 	srli	r4,r22,16
1000d9b4:	e085883a 	add	r2,fp,r2
1000d9b8:	1109883a 	add	r4,r2,r4
1000d9bc:	2700022e 	bgeu	r4,fp,1000d9c8 <__divdf3+0x624>
1000d9c0:	00800074 	movhi	r2,1
1000d9c4:	80a1883a 	add	r16,r16,r2
1000d9c8:	200ad43a 	srli	r5,r4,16
1000d9cc:	2008943a 	slli	r4,r4,16
1000d9d0:	b5bfffcc 	andi	r22,r22,65535
1000d9d4:	8145883a 	add	r2,r16,r5
1000d9d8:	2589883a 	add	r4,r4,r22
1000d9dc:	a8802c36 	bltu	r21,r2,1000da90 <__divdf3+0x6ec>
1000d9e0:	a880a426 	beq	r21,r2,1000dc74 <__divdf3+0x8d0>
1000d9e4:	9cc00054 	ori	r19,r19,1
1000d9e8:	9200ffc4 	addi	r8,r18,1023
1000d9ec:	023f270e 	bge	zero,r8,1000d68c <__alt_data_end+0xf800d68c>
1000d9f0:	988001cc 	andi	r2,r19,7
1000d9f4:	10000726 	beq	r2,zero,1000da14 <__divdf3+0x670>
1000d9f8:	990003cc 	andi	r4,r19,15
1000d9fc:	00800104 	movi	r2,4
1000da00:	20800426 	beq	r4,r2,1000da14 <__divdf3+0x670>
1000da04:	9885883a 	add	r2,r19,r2
1000da08:	14e7803a 	cmpltu	r19,r2,r19
1000da0c:	8ce3883a 	add	r17,r17,r19
1000da10:	1027883a 	mov	r19,r2
1000da14:	8880402c 	andhi	r2,r17,256
1000da18:	10000426 	beq	r2,zero,1000da2c <__divdf3+0x688>
1000da1c:	00bfc034 	movhi	r2,65280
1000da20:	10bfffc4 	addi	r2,r2,-1
1000da24:	92010004 	addi	r8,r18,1024
1000da28:	88a2703a 	and	r17,r17,r2
1000da2c:	0081ff84 	movi	r2,2046
1000da30:	123eb616 	blt	r2,r8,1000d50c <__alt_data_end+0xf800d50c>
1000da34:	9826d0fa 	srli	r19,r19,3
1000da38:	8804977a 	slli	r2,r17,29
1000da3c:	8820927a 	slli	r16,r17,9
1000da40:	4201ffcc 	andi	r8,r8,2047
1000da44:	14e6b03a 	or	r19,r2,r19
1000da48:	800ad33a 	srli	r5,r16,12
1000da4c:	a180004c 	andi	r6,r20,1
1000da50:	003eb206 	br	1000d51c <__alt_data_end+0xf800d51c>
1000da54:	008000c4 	movi	r2,3
1000da58:	4080ac26 	beq	r8,r2,1000dd0c <__divdf3+0x968>
1000da5c:	00800044 	movi	r2,1
1000da60:	4080591e 	bne	r8,r2,1000dbc8 <__divdf3+0x824>
1000da64:	e00d883a 	mov	r6,fp
1000da68:	0011883a 	mov	r8,zero
1000da6c:	000b883a 	mov	r5,zero
1000da70:	0027883a 	mov	r19,zero
1000da74:	003ea906 	br	1000d51c <__alt_data_end+0xf800d51c>
1000da78:	00800434 	movhi	r2,16
1000da7c:	89400234 	orhi	r5,r17,8
1000da80:	10bfffc4 	addi	r2,r2,-1
1000da84:	b00d883a 	mov	r6,r22
1000da88:	288a703a 	and	r5,r5,r2
1000da8c:	003efd06 	br	1000d684 <__alt_data_end+0xf800d684>
1000da90:	adcf883a 	add	r7,r21,r23
1000da94:	997fffc4 	addi	r5,r19,-1
1000da98:	3dc0412e 	bgeu	r7,r23,1000dba0 <__divdf3+0x7fc>
1000da9c:	2827883a 	mov	r19,r5
1000daa0:	38bfd01e 	bne	r7,r2,1000d9e4 <__alt_data_end+0xf800d9e4>
1000daa4:	d8c00117 	ldw	r3,4(sp)
1000daa8:	193fce1e 	bne	r3,r4,1000d9e4 <__alt_data_end+0xf800d9e4>
1000daac:	003fce06 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000dab0:	d9800215 	stw	r6,8(sp)
1000dab4:	d9c00515 	stw	r7,20(sp)
1000dab8:	0003e000 	call	10003e00 <__clzsi2>
1000dabc:	10c00804 	addi	r3,r2,32
1000dac0:	010009c4 	movi	r4,39
1000dac4:	d9800217 	ldw	r6,8(sp)
1000dac8:	d9c00517 	ldw	r7,20(sp)
1000dacc:	20feb20e 	bge	r4,r3,1000d598 <__alt_data_end+0xf800d598>
1000dad0:	117ffe04 	addi	r5,r2,-8
1000dad4:	a162983a 	sll	r17,r20,r5
1000dad8:	0027883a 	mov	r19,zero
1000dadc:	003eb506 	br	1000d5b4 <__alt_data_end+0xf800d5b4>
1000dae0:	3009883a 	mov	r4,r6
1000dae4:	d9800215 	stw	r6,8(sp)
1000dae8:	da000315 	stw	r8,12(sp)
1000daec:	da400415 	stw	r9,16(sp)
1000daf0:	0003e000 	call	10003e00 <__clzsi2>
1000daf4:	10c00804 	addi	r3,r2,32
1000daf8:	010009c4 	movi	r4,39
1000dafc:	d9800217 	ldw	r6,8(sp)
1000db00:	da000317 	ldw	r8,12(sp)
1000db04:	da400417 	ldw	r9,16(sp)
1000db08:	20fec10e 	bge	r4,r3,1000d610 <__alt_data_end+0xf800d610>
1000db0c:	10bffe04 	addi	r2,r2,-8
1000db10:	a8a0983a 	sll	r16,r21,r2
1000db14:	002b883a 	mov	r21,zero
1000db18:	003ec406 	br	1000d62c <__alt_data_end+0xf800d62c>
1000db1c:	d8c00117 	ldw	r3,4(sp)
1000db20:	b0ed883a 	add	r22,r22,r3
1000db24:	b0c5803a 	cmpltu	r2,r22,r3
1000db28:	15c5883a 	add	r2,r2,r23
1000db2c:	11cf883a 	add	r7,r2,r7
1000db30:	88bfffc4 	addi	r2,r17,-1
1000db34:	b9c00d2e 	bgeu	r23,r7,1000db6c <__divdf3+0x7c8>
1000db38:	39003f36 	bltu	r7,r4,1000dc38 <__divdf3+0x894>
1000db3c:	21c06a26 	beq	r4,r7,1000dce8 <__divdf3+0x944>
1000db40:	3909c83a 	sub	r4,r7,r4
1000db44:	1023883a 	mov	r17,r2
1000db48:	003f4f06 	br	1000d888 <__alt_data_end+0xf800d888>
1000db4c:	9d7ee536 	bltu	r19,r21,1000d6e4 <__alt_data_end+0xf800d6e4>
1000db50:	982ed07a 	srli	r23,r19,1
1000db54:	880497fa 	slli	r2,r17,31
1000db58:	8810d07a 	srli	r8,r17,1
1000db5c:	982c97fa 	slli	r22,r19,31
1000db60:	b884b03a 	or	r2,r23,r2
1000db64:	d8800015 	stw	r2,0(sp)
1000db68:	003ee206 	br	1000d6f4 <__alt_data_end+0xf800d6f4>
1000db6c:	3dfff41e 	bne	r7,r23,1000db40 <__alt_data_end+0xf800db40>
1000db70:	d8c00117 	ldw	r3,4(sp)
1000db74:	b0fff02e 	bgeu	r22,r3,1000db38 <__alt_data_end+0xf800db38>
1000db78:	b909c83a 	sub	r4,r23,r4
1000db7c:	1023883a 	mov	r17,r2
1000db80:	003f4106 	br	1000d888 <__alt_data_end+0xf800d888>
1000db84:	1021883a 	mov	r16,r2
1000db88:	003f1106 	br	1000d7d0 <__alt_data_end+0xf800d7d0>
1000db8c:	1023883a 	mov	r17,r2
1000db90:	003ef706 	br	1000d770 <__alt_data_end+0xf800d770>
1000db94:	b23fe136 	bltu	r22,r8,1000db1c <__alt_data_end+0xf800db1c>
1000db98:	0009883a 	mov	r4,zero
1000db9c:	003f3a06 	br	1000d888 <__alt_data_end+0xf800d888>
1000dba0:	38802c36 	bltu	r7,r2,1000dc54 <__divdf3+0x8b0>
1000dba4:	11c05326 	beq	r2,r7,1000dcf4 <__divdf3+0x950>
1000dba8:	2827883a 	mov	r19,r5
1000dbac:	003f8d06 	br	1000d9e4 <__alt_data_end+0xf800d9e4>
1000dbb0:	04ffffc4 	movi	r19,-1
1000dbb4:	003f8c06 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000dbb8:	1011883a 	mov	r8,r2
1000dbbc:	003f4d06 	br	1000d8f4 <__alt_data_end+0xf800d8f4>
1000dbc0:	1013883a 	mov	r9,r2
1000dbc4:	003f6406 	br	1000d958 <__alt_data_end+0xf800d958>
1000dbc8:	e029883a 	mov	r20,fp
1000dbcc:	003f8606 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000dbd0:	008007c4 	movi	r2,31
1000dbd4:	14002a16 	blt	r2,r16,1000dc80 <__divdf3+0x8dc>
1000dbd8:	91410784 	addi	r5,r18,1054
1000dbdc:	9c0cd83a 	srl	r6,r19,r16
1000dbe0:	8948983a 	sll	r4,r17,r5
1000dbe4:	9944983a 	sll	r2,r19,r5
1000dbe8:	8c20d83a 	srl	r16,r17,r16
1000dbec:	3108b03a 	or	r4,r6,r4
1000dbf0:	1004c03a 	cmpne	r2,r2,zero
1000dbf4:	2084b03a 	or	r2,r4,r2
1000dbf8:	110001cc 	andi	r4,r2,7
1000dbfc:	20000726 	beq	r4,zero,1000dc1c <__divdf3+0x878>
1000dc00:	114003cc 	andi	r5,r2,15
1000dc04:	01000104 	movi	r4,4
1000dc08:	29000426 	beq	r5,r4,1000dc1c <__divdf3+0x878>
1000dc0c:	11000104 	addi	r4,r2,4
1000dc10:	2085803a 	cmpltu	r2,r4,r2
1000dc14:	80a1883a 	add	r16,r16,r2
1000dc18:	2005883a 	mov	r2,r4
1000dc1c:	8100202c 	andhi	r4,r16,128
1000dc20:	20002d26 	beq	r4,zero,1000dcd8 <__divdf3+0x934>
1000dc24:	a180004c 	andi	r6,r20,1
1000dc28:	02000044 	movi	r8,1
1000dc2c:	000b883a 	mov	r5,zero
1000dc30:	0027883a 	mov	r19,zero
1000dc34:	003e3906 	br	1000d51c <__alt_data_end+0xf800d51c>
1000dc38:	d8c00117 	ldw	r3,4(sp)
1000dc3c:	8c7fff84 	addi	r17,r17,-2
1000dc40:	b0ed883a 	add	r22,r22,r3
1000dc44:	b0c5803a 	cmpltu	r2,r22,r3
1000dc48:	15c5883a 	add	r2,r2,r23
1000dc4c:	11cf883a 	add	r7,r2,r7
1000dc50:	003f0c06 	br	1000d884 <__alt_data_end+0xf800d884>
1000dc54:	d8c00117 	ldw	r3,4(sp)
1000dc58:	997fff84 	addi	r5,r19,-2
1000dc5c:	18d1883a 	add	r8,r3,r3
1000dc60:	40c7803a 	cmpltu	r3,r8,r3
1000dc64:	1dcd883a 	add	r6,r3,r23
1000dc68:	398f883a 	add	r7,r7,r6
1000dc6c:	da000115 	stw	r8,4(sp)
1000dc70:	003f8a06 	br	1000da9c <__alt_data_end+0xf800da9c>
1000dc74:	203f861e 	bne	r4,zero,1000da90 <__alt_data_end+0xf800da90>
1000dc78:	d8000115 	stw	zero,4(sp)
1000dc7c:	003f8906 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dc80:	00bef884 	movi	r2,-1054
1000dc84:	1485c83a 	sub	r2,r2,r18
1000dc88:	01000804 	movi	r4,32
1000dc8c:	8884d83a 	srl	r2,r17,r2
1000dc90:	81001c26 	beq	r16,r4,1000dd04 <__divdf3+0x960>
1000dc94:	91010f84 	addi	r4,r18,1086
1000dc98:	8908983a 	sll	r4,r17,r4
1000dc9c:	24c8b03a 	or	r4,r4,r19
1000dca0:	2008c03a 	cmpne	r4,r4,zero
1000dca4:	2084b03a 	or	r2,r4,r2
1000dca8:	140001cc 	andi	r16,r2,7
1000dcac:	8000061e 	bne	r16,zero,1000dcc8 <__divdf3+0x924>
1000dcb0:	000b883a 	mov	r5,zero
1000dcb4:	1004d0fa 	srli	r2,r2,3
1000dcb8:	a180004c 	andi	r6,r20,1
1000dcbc:	0011883a 	mov	r8,zero
1000dcc0:	1426b03a 	or	r19,r2,r16
1000dcc4:	003e1506 	br	1000d51c <__alt_data_end+0xf800d51c>
1000dcc8:	114003cc 	andi	r5,r2,15
1000dccc:	01000104 	movi	r4,4
1000dcd0:	0021883a 	mov	r16,zero
1000dcd4:	293fcd1e 	bne	r5,r4,1000dc0c <__alt_data_end+0xf800dc0c>
1000dcd8:	800a927a 	slli	r5,r16,9
1000dcdc:	8020977a 	slli	r16,r16,29
1000dce0:	280ad33a 	srli	r5,r5,12
1000dce4:	003ff306 	br	1000dcb4 <__alt_data_end+0xf800dcb4>
1000dce8:	b23fd336 	bltu	r22,r8,1000dc38 <__alt_data_end+0xf800dc38>
1000dcec:	1023883a 	mov	r17,r2
1000dcf0:	003fa906 	br	1000db98 <__alt_data_end+0xf800db98>
1000dcf4:	d8c00117 	ldw	r3,4(sp)
1000dcf8:	193fd636 	bltu	r3,r4,1000dc54 <__alt_data_end+0xf800dc54>
1000dcfc:	2827883a 	mov	r19,r5
1000dd00:	003f6806 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dd04:	0009883a 	mov	r4,zero
1000dd08:	003fe406 	br	1000dc9c <__alt_data_end+0xf800dc9c>
1000dd0c:	00800434 	movhi	r2,16
1000dd10:	89400234 	orhi	r5,r17,8
1000dd14:	10bfffc4 	addi	r2,r2,-1
1000dd18:	e00d883a 	mov	r6,fp
1000dd1c:	288a703a 	and	r5,r5,r2
1000dd20:	003e5806 	br	1000d684 <__alt_data_end+0xf800d684>

1000dd24 <__eqdf2>:
1000dd24:	2804d53a 	srli	r2,r5,20
1000dd28:	3806d53a 	srli	r3,r7,20
1000dd2c:	02000434 	movhi	r8,16
1000dd30:	423fffc4 	addi	r8,r8,-1
1000dd34:	1081ffcc 	andi	r2,r2,2047
1000dd38:	0241ffc4 	movi	r9,2047
1000dd3c:	2a14703a 	and	r10,r5,r8
1000dd40:	18c1ffcc 	andi	r3,r3,2047
1000dd44:	3a10703a 	and	r8,r7,r8
1000dd48:	280ad7fa 	srli	r5,r5,31
1000dd4c:	380ed7fa 	srli	r7,r7,31
1000dd50:	12400f26 	beq	r2,r9,1000dd90 <__eqdf2+0x6c>
1000dd54:	0241ffc4 	movi	r9,2047
1000dd58:	1a400326 	beq	r3,r9,1000dd68 <__eqdf2+0x44>
1000dd5c:	10c00526 	beq	r2,r3,1000dd74 <__eqdf2+0x50>
1000dd60:	00800044 	movi	r2,1
1000dd64:	f800283a 	ret
1000dd68:	4192b03a 	or	r9,r8,r6
1000dd6c:	483ffc1e 	bne	r9,zero,1000dd60 <__alt_data_end+0xf800dd60>
1000dd70:	10fffb1e 	bne	r2,r3,1000dd60 <__alt_data_end+0xf800dd60>
1000dd74:	523ffa1e 	bne	r10,r8,1000dd60 <__alt_data_end+0xf800dd60>
1000dd78:	21bff91e 	bne	r4,r6,1000dd60 <__alt_data_end+0xf800dd60>
1000dd7c:	29c00826 	beq	r5,r7,1000dda0 <__eqdf2+0x7c>
1000dd80:	103ff71e 	bne	r2,zero,1000dd60 <__alt_data_end+0xf800dd60>
1000dd84:	5104b03a 	or	r2,r10,r4
1000dd88:	1004c03a 	cmpne	r2,r2,zero
1000dd8c:	f800283a 	ret
1000dd90:	5112b03a 	or	r9,r10,r4
1000dd94:	483fef26 	beq	r9,zero,1000dd54 <__alt_data_end+0xf800dd54>
1000dd98:	00800044 	movi	r2,1
1000dd9c:	f800283a 	ret
1000dda0:	0005883a 	mov	r2,zero
1000dda4:	f800283a 	ret

1000dda8 <__gedf2>:
1000dda8:	2804d53a 	srli	r2,r5,20
1000ddac:	3806d53a 	srli	r3,r7,20
1000ddb0:	02000434 	movhi	r8,16
1000ddb4:	423fffc4 	addi	r8,r8,-1
1000ddb8:	0241ffc4 	movi	r9,2047
1000ddbc:	1081ffcc 	andi	r2,r2,2047
1000ddc0:	2a14703a 	and	r10,r5,r8
1000ddc4:	1a46703a 	and	r3,r3,r9
1000ddc8:	3a10703a 	and	r8,r7,r8
1000ddcc:	280ad7fa 	srli	r5,r5,31
1000ddd0:	380ed7fa 	srli	r7,r7,31
1000ddd4:	12400b26 	beq	r2,r9,1000de04 <__gedf2+0x5c>
1000ddd8:	1a401626 	beq	r3,r9,1000de34 <__gedf2+0x8c>
1000dddc:	10000c1e 	bne	r2,zero,1000de10 <__gedf2+0x68>
1000dde0:	5112b03a 	or	r9,r10,r4
1000dde4:	4813003a 	cmpeq	r9,r9,zero
1000dde8:	4817883a 	mov	r11,r9
1000ddec:	18000c1e 	bne	r3,zero,1000de20 <__gedf2+0x78>
1000ddf0:	4198b03a 	or	r12,r8,r6
1000ddf4:	60000a1e 	bne	r12,zero,1000de20 <__gedf2+0x78>
1000ddf8:	48001326 	beq	r9,zero,1000de48 <__gedf2+0xa0>
1000ddfc:	0005883a 	mov	r2,zero
1000de00:	f800283a 	ret
1000de04:	5112b03a 	or	r9,r10,r4
1000de08:	4800191e 	bne	r9,zero,1000de70 <__gedf2+0xc8>
1000de0c:	18800926 	beq	r3,r2,1000de34 <__gedf2+0x8c>
1000de10:	18000b1e 	bne	r3,zero,1000de40 <__gedf2+0x98>
1000de14:	4192b03a 	or	r9,r8,r6
1000de18:	0017883a 	mov	r11,zero
1000de1c:	48000a26 	beq	r9,zero,1000de48 <__gedf2+0xa0>
1000de20:	39c03fcc 	andi	r7,r7,255
1000de24:	58000726 	beq	r11,zero,1000de44 <__gedf2+0x9c>
1000de28:	3800081e 	bne	r7,zero,1000de4c <__gedf2+0xa4>
1000de2c:	00bfffc4 	movi	r2,-1
1000de30:	f800283a 	ret
1000de34:	4192b03a 	or	r9,r8,r6
1000de38:	48000d1e 	bne	r9,zero,1000de70 <__gedf2+0xc8>
1000de3c:	103fe826 	beq	r2,zero,1000dde0 <__alt_data_end+0xf800dde0>
1000de40:	39c03fcc 	andi	r7,r7,255
1000de44:	29c00326 	beq	r5,r7,1000de54 <__gedf2+0xac>
1000de48:	283ff81e 	bne	r5,zero,1000de2c <__alt_data_end+0xf800de2c>
1000de4c:	00800044 	movi	r2,1
1000de50:	f800283a 	ret
1000de54:	18bffc16 	blt	r3,r2,1000de48 <__alt_data_end+0xf800de48>
1000de58:	10c00316 	blt	r2,r3,1000de68 <__gedf2+0xc0>
1000de5c:	42bffa36 	bltu	r8,r10,1000de48 <__alt_data_end+0xf800de48>
1000de60:	52000526 	beq	r10,r8,1000de78 <__gedf2+0xd0>
1000de64:	523fe52e 	bgeu	r10,r8,1000ddfc <__alt_data_end+0xf800ddfc>
1000de68:	283ff026 	beq	r5,zero,1000de2c <__alt_data_end+0xf800de2c>
1000de6c:	003ff706 	br	1000de4c <__alt_data_end+0xf800de4c>
1000de70:	00bfff84 	movi	r2,-2
1000de74:	f800283a 	ret
1000de78:	313ff336 	bltu	r6,r4,1000de48 <__alt_data_end+0xf800de48>
1000de7c:	21bfdf2e 	bgeu	r4,r6,1000ddfc <__alt_data_end+0xf800ddfc>
1000de80:	283fea26 	beq	r5,zero,1000de2c <__alt_data_end+0xf800de2c>
1000de84:	003ff106 	br	1000de4c <__alt_data_end+0xf800de4c>

1000de88 <__ledf2>:
1000de88:	2804d53a 	srli	r2,r5,20
1000de8c:	3810d53a 	srli	r8,r7,20
1000de90:	00c00434 	movhi	r3,16
1000de94:	18ffffc4 	addi	r3,r3,-1
1000de98:	0241ffc4 	movi	r9,2047
1000de9c:	1081ffcc 	andi	r2,r2,2047
1000dea0:	28d4703a 	and	r10,r5,r3
1000dea4:	4250703a 	and	r8,r8,r9
1000dea8:	38c6703a 	and	r3,r7,r3
1000deac:	280ad7fa 	srli	r5,r5,31
1000deb0:	380ed7fa 	srli	r7,r7,31
1000deb4:	12400b26 	beq	r2,r9,1000dee4 <__ledf2+0x5c>
1000deb8:	42401926 	beq	r8,r9,1000df20 <__ledf2+0x98>
1000debc:	10000c1e 	bne	r2,zero,1000def0 <__ledf2+0x68>
1000dec0:	5112b03a 	or	r9,r10,r4
1000dec4:	4813003a 	cmpeq	r9,r9,zero
1000dec8:	4817883a 	mov	r11,r9
1000decc:	40000f26 	beq	r8,zero,1000df0c <__ledf2+0x84>
1000ded0:	39c03fcc 	andi	r7,r7,255
1000ded4:	58001826 	beq	r11,zero,1000df38 <__ledf2+0xb0>
1000ded8:	38000a1e 	bne	r7,zero,1000df04 <__ledf2+0x7c>
1000dedc:	00bfffc4 	movi	r2,-1
1000dee0:	f800283a 	ret
1000dee4:	5112b03a 	or	r9,r10,r4
1000dee8:	48000f1e 	bne	r9,zero,1000df28 <__ledf2+0xa0>
1000deec:	40800c26 	beq	r8,r2,1000df20 <__ledf2+0x98>
1000def0:	4000101e 	bne	r8,zero,1000df34 <__ledf2+0xac>
1000def4:	1992b03a 	or	r9,r3,r6
1000def8:	0017883a 	mov	r11,zero
1000defc:	483ff41e 	bne	r9,zero,1000ded0 <__alt_data_end+0xf800ded0>
1000df00:	283ff61e 	bne	r5,zero,1000dedc <__alt_data_end+0xf800dedc>
1000df04:	00800044 	movi	r2,1
1000df08:	f800283a 	ret
1000df0c:	1998b03a 	or	r12,r3,r6
1000df10:	603fef1e 	bne	r12,zero,1000ded0 <__alt_data_end+0xf800ded0>
1000df14:	483ffa26 	beq	r9,zero,1000df00 <__alt_data_end+0xf800df00>
1000df18:	0005883a 	mov	r2,zero
1000df1c:	f800283a 	ret
1000df20:	1992b03a 	or	r9,r3,r6
1000df24:	48000226 	beq	r9,zero,1000df30 <__ledf2+0xa8>
1000df28:	00800084 	movi	r2,2
1000df2c:	f800283a 	ret
1000df30:	103fe326 	beq	r2,zero,1000dec0 <__alt_data_end+0xf800dec0>
1000df34:	39c03fcc 	andi	r7,r7,255
1000df38:	29fff11e 	bne	r5,r7,1000df00 <__alt_data_end+0xf800df00>
1000df3c:	40bff016 	blt	r8,r2,1000df00 <__alt_data_end+0xf800df00>
1000df40:	12000316 	blt	r2,r8,1000df50 <__ledf2+0xc8>
1000df44:	1abfee36 	bltu	r3,r10,1000df00 <__alt_data_end+0xf800df00>
1000df48:	50c00326 	beq	r10,r3,1000df58 <__ledf2+0xd0>
1000df4c:	50fff22e 	bgeu	r10,r3,1000df18 <__alt_data_end+0xf800df18>
1000df50:	283fe226 	beq	r5,zero,1000dedc <__alt_data_end+0xf800dedc>
1000df54:	003feb06 	br	1000df04 <__alt_data_end+0xf800df04>
1000df58:	313fe936 	bltu	r6,r4,1000df00 <__alt_data_end+0xf800df00>
1000df5c:	21bfee2e 	bgeu	r4,r6,1000df18 <__alt_data_end+0xf800df18>
1000df60:	283fde26 	beq	r5,zero,1000dedc <__alt_data_end+0xf800dedc>
1000df64:	003fe706 	br	1000df04 <__alt_data_end+0xf800df04>

1000df68 <__muldf3>:
1000df68:	deffee04 	addi	sp,sp,-72
1000df6c:	dd000c15 	stw	r20,48(sp)
1000df70:	2828d53a 	srli	r20,r5,20
1000df74:	dd400d15 	stw	r21,52(sp)
1000df78:	282ad7fa 	srli	r21,r5,31
1000df7c:	dc000815 	stw	r16,32(sp)
1000df80:	04000434 	movhi	r16,16
1000df84:	ddc00f15 	stw	r23,60(sp)
1000df88:	dcc00b15 	stw	r19,44(sp)
1000df8c:	dc800a15 	stw	r18,40(sp)
1000df90:	843fffc4 	addi	r16,r16,-1
1000df94:	dfc01115 	stw	ra,68(sp)
1000df98:	df001015 	stw	fp,64(sp)
1000df9c:	dd800e15 	stw	r22,56(sp)
1000dfa0:	dc400915 	stw	r17,36(sp)
1000dfa4:	a501ffcc 	andi	r20,r20,2047
1000dfa8:	2025883a 	mov	r18,r4
1000dfac:	202f883a 	mov	r23,r4
1000dfb0:	2c20703a 	and	r16,r5,r16
1000dfb4:	a827883a 	mov	r19,r21
1000dfb8:	aa403fcc 	andi	r9,r21,255
1000dfbc:	a0005926 	beq	r20,zero,1000e124 <__muldf3+0x1bc>
1000dfc0:	0081ffc4 	movi	r2,2047
1000dfc4:	a0803426 	beq	r20,r2,1000e098 <__muldf3+0x130>
1000dfc8:	84000434 	orhi	r16,r16,16
1000dfcc:	2004d77a 	srli	r2,r4,29
1000dfd0:	802090fa 	slli	r16,r16,3
1000dfd4:	202e90fa 	slli	r23,r4,3
1000dfd8:	a53f0044 	addi	r20,r20,-1023
1000dfdc:	80a0b03a 	or	r16,r16,r2
1000dfe0:	000b883a 	mov	r5,zero
1000dfe4:	0039883a 	mov	fp,zero
1000dfe8:	3806d53a 	srli	r3,r7,20
1000dfec:	382cd7fa 	srli	r22,r7,31
1000dff0:	00800434 	movhi	r2,16
1000dff4:	10bfffc4 	addi	r2,r2,-1
1000dff8:	18c1ffcc 	andi	r3,r3,2047
1000dffc:	3025883a 	mov	r18,r6
1000e000:	38a2703a 	and	r17,r7,r2
1000e004:	b2803fcc 	andi	r10,r22,255
1000e008:	18006426 	beq	r3,zero,1000e19c <__muldf3+0x234>
1000e00c:	0081ffc4 	movi	r2,2047
1000e010:	18805c26 	beq	r3,r2,1000e184 <__muldf3+0x21c>
1000e014:	8c400434 	orhi	r17,r17,16
1000e018:	3004d77a 	srli	r2,r6,29
1000e01c:	882290fa 	slli	r17,r17,3
1000e020:	302490fa 	slli	r18,r6,3
1000e024:	18ff0044 	addi	r3,r3,-1023
1000e028:	88a2b03a 	or	r17,r17,r2
1000e02c:	000f883a 	mov	r7,zero
1000e030:	394ab03a 	or	r5,r7,r5
1000e034:	280a90ba 	slli	r5,r5,2
1000e038:	00840074 	movhi	r2,4097
1000e03c:	10b81604 	addi	r2,r2,-8104
1000e040:	288b883a 	add	r5,r5,r2
1000e044:	28800017 	ldw	r2,0(r5)
1000e048:	a0c7883a 	add	r3,r20,r3
1000e04c:	b54cf03a 	xor	r6,r22,r21
1000e050:	1a000044 	addi	r8,r3,1
1000e054:	1000683a 	jmp	r2
1000e058:	1000e29c 	xori	zero,r2,906
1000e05c:	1000e288 	cmpgei	zero,r2,906
1000e060:	1000e288 	cmpgei	zero,r2,906
1000e064:	1000e274 	orhi	zero,r2,905
1000e068:	1000e0b4 	orhi	zero,r2,898
1000e06c:	1000e0b4 	orhi	zero,r2,898
1000e070:	1000e25c 	xori	zero,r2,905
1000e074:	1000e274 	orhi	zero,r2,905
1000e078:	1000e0b4 	orhi	zero,r2,898
1000e07c:	1000e25c 	xori	zero,r2,905
1000e080:	1000e0b4 	orhi	zero,r2,898
1000e084:	1000e274 	orhi	zero,r2,905
1000e088:	1000e0b8 	rdprs	zero,r2,898
1000e08c:	1000e0b8 	rdprs	zero,r2,898
1000e090:	1000e0b8 	rdprs	zero,r2,898
1000e094:	1000e5d8 	cmpnei	zero,r2,919
1000e098:	8104b03a 	or	r2,r16,r4
1000e09c:	10006c1e 	bne	r2,zero,1000e250 <__muldf3+0x2e8>
1000e0a0:	01400204 	movi	r5,8
1000e0a4:	0021883a 	mov	r16,zero
1000e0a8:	002f883a 	mov	r23,zero
1000e0ac:	07000084 	movi	fp,2
1000e0b0:	003fcd06 	br	1000dfe8 <__alt_data_end+0xf800dfe8>
1000e0b4:	3013883a 	mov	r9,r6
1000e0b8:	00800084 	movi	r2,2
1000e0bc:	e080501e 	bne	fp,r2,1000e200 <__muldf3+0x298>
1000e0c0:	4cc0004c 	andi	r19,r9,1
1000e0c4:	0101ffc4 	movi	r4,2047
1000e0c8:	0021883a 	mov	r16,zero
1000e0cc:	002f883a 	mov	r23,zero
1000e0d0:	2008953a 	slli	r4,r4,20
1000e0d4:	98c03fcc 	andi	r3,r19,255
1000e0d8:	04400434 	movhi	r17,16
1000e0dc:	8c7fffc4 	addi	r17,r17,-1
1000e0e0:	180697fa 	slli	r3,r3,31
1000e0e4:	8460703a 	and	r16,r16,r17
1000e0e8:	8120b03a 	or	r16,r16,r4
1000e0ec:	80c6b03a 	or	r3,r16,r3
1000e0f0:	b805883a 	mov	r2,r23
1000e0f4:	dfc01117 	ldw	ra,68(sp)
1000e0f8:	df001017 	ldw	fp,64(sp)
1000e0fc:	ddc00f17 	ldw	r23,60(sp)
1000e100:	dd800e17 	ldw	r22,56(sp)
1000e104:	dd400d17 	ldw	r21,52(sp)
1000e108:	dd000c17 	ldw	r20,48(sp)
1000e10c:	dcc00b17 	ldw	r19,44(sp)
1000e110:	dc800a17 	ldw	r18,40(sp)
1000e114:	dc400917 	ldw	r17,36(sp)
1000e118:	dc000817 	ldw	r16,32(sp)
1000e11c:	dec01204 	addi	sp,sp,72
1000e120:	f800283a 	ret
1000e124:	8104b03a 	or	r2,r16,r4
1000e128:	10004426 	beq	r2,zero,1000e23c <__muldf3+0x2d4>
1000e12c:	80014b26 	beq	r16,zero,1000e65c <__muldf3+0x6f4>
1000e130:	8009883a 	mov	r4,r16
1000e134:	d9800715 	stw	r6,28(sp)
1000e138:	d9c00215 	stw	r7,8(sp)
1000e13c:	da400415 	stw	r9,16(sp)
1000e140:	0003e000 	call	10003e00 <__clzsi2>
1000e144:	d9800717 	ldw	r6,28(sp)
1000e148:	d9c00217 	ldw	r7,8(sp)
1000e14c:	da400417 	ldw	r9,16(sp)
1000e150:	1007883a 	mov	r3,r2
1000e154:	01000a04 	movi	r4,40
1000e158:	1dfffe04 	addi	r23,r3,-8
1000e15c:	20c9c83a 	sub	r4,r4,r3
1000e160:	85e0983a 	sll	r16,r16,r23
1000e164:	9108d83a 	srl	r4,r18,r4
1000e168:	95ee983a 	sll	r23,r18,r23
1000e16c:	2420b03a 	or	r16,r4,r16
1000e170:	053f0344 	movi	r20,-1011
1000e174:	a0e9c83a 	sub	r20,r20,r3
1000e178:	000b883a 	mov	r5,zero
1000e17c:	0039883a 	mov	fp,zero
1000e180:	003f9906 	br	1000dfe8 <__alt_data_end+0xf800dfe8>
1000e184:	8984b03a 	or	r2,r17,r6
1000e188:	10002a1e 	bne	r2,zero,1000e234 <__muldf3+0x2cc>
1000e18c:	0023883a 	mov	r17,zero
1000e190:	0025883a 	mov	r18,zero
1000e194:	01c00084 	movi	r7,2
1000e198:	003fa506 	br	1000e030 <__alt_data_end+0xf800e030>
1000e19c:	8984b03a 	or	r2,r17,r6
1000e1a0:	10002026 	beq	r2,zero,1000e224 <__muldf3+0x2bc>
1000e1a4:	88011c26 	beq	r17,zero,1000e618 <__muldf3+0x6b0>
1000e1a8:	8809883a 	mov	r4,r17
1000e1ac:	d9400215 	stw	r5,8(sp)
1000e1b0:	d9800715 	stw	r6,28(sp)
1000e1b4:	da400415 	stw	r9,16(sp)
1000e1b8:	da800315 	stw	r10,12(sp)
1000e1bc:	0003e000 	call	10003e00 <__clzsi2>
1000e1c0:	d9400217 	ldw	r5,8(sp)
1000e1c4:	d9800717 	ldw	r6,28(sp)
1000e1c8:	da400417 	ldw	r9,16(sp)
1000e1cc:	da800317 	ldw	r10,12(sp)
1000e1d0:	1007883a 	mov	r3,r2
1000e1d4:	01000a04 	movi	r4,40
1000e1d8:	1cbffe04 	addi	r18,r3,-8
1000e1dc:	20c9c83a 	sub	r4,r4,r3
1000e1e0:	8ca2983a 	sll	r17,r17,r18
1000e1e4:	3108d83a 	srl	r4,r6,r4
1000e1e8:	34a4983a 	sll	r18,r6,r18
1000e1ec:	2462b03a 	or	r17,r4,r17
1000e1f0:	00bf0344 	movi	r2,-1011
1000e1f4:	10c7c83a 	sub	r3,r2,r3
1000e1f8:	000f883a 	mov	r7,zero
1000e1fc:	003f8c06 	br	1000e030 <__alt_data_end+0xf800e030>
1000e200:	008000c4 	movi	r2,3
1000e204:	e0816d26 	beq	fp,r2,1000e7bc <__muldf3+0x854>
1000e208:	00800044 	movi	r2,1
1000e20c:	e081321e 	bne	fp,r2,1000e6d8 <__muldf3+0x770>
1000e210:	48a6703a 	and	r19,r9,r2
1000e214:	0009883a 	mov	r4,zero
1000e218:	0021883a 	mov	r16,zero
1000e21c:	002f883a 	mov	r23,zero
1000e220:	003fab06 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e224:	0023883a 	mov	r17,zero
1000e228:	0025883a 	mov	r18,zero
1000e22c:	01c00044 	movi	r7,1
1000e230:	003f7f06 	br	1000e030 <__alt_data_end+0xf800e030>
1000e234:	01c000c4 	movi	r7,3
1000e238:	003f7d06 	br	1000e030 <__alt_data_end+0xf800e030>
1000e23c:	01400104 	movi	r5,4
1000e240:	0021883a 	mov	r16,zero
1000e244:	002f883a 	mov	r23,zero
1000e248:	07000044 	movi	fp,1
1000e24c:	003f6606 	br	1000dfe8 <__alt_data_end+0xf800dfe8>
1000e250:	01400304 	movi	r5,12
1000e254:	070000c4 	movi	fp,3
1000e258:	003f6306 	br	1000dfe8 <__alt_data_end+0xf800dfe8>
1000e25c:	04000434 	movhi	r16,16
1000e260:	0027883a 	mov	r19,zero
1000e264:	843fffc4 	addi	r16,r16,-1
1000e268:	05ffffc4 	movi	r23,-1
1000e26c:	0101ffc4 	movi	r4,2047
1000e270:	003f9706 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e274:	8821883a 	mov	r16,r17
1000e278:	902f883a 	mov	r23,r18
1000e27c:	5013883a 	mov	r9,r10
1000e280:	3839883a 	mov	fp,r7
1000e284:	003f8c06 	br	1000e0b8 <__alt_data_end+0xf800e0b8>
1000e288:	8821883a 	mov	r16,r17
1000e28c:	902f883a 	mov	r23,r18
1000e290:	3013883a 	mov	r9,r6
1000e294:	3839883a 	mov	fp,r7
1000e298:	003f8706 	br	1000e0b8 <__alt_data_end+0xf800e0b8>
1000e29c:	b82ad43a 	srli	r21,r23,16
1000e2a0:	9038d43a 	srli	fp,r18,16
1000e2a4:	bdffffcc 	andi	r23,r23,65535
1000e2a8:	94bfffcc 	andi	r18,r18,65535
1000e2ac:	9009883a 	mov	r4,r18
1000e2b0:	b80b883a 	mov	r5,r23
1000e2b4:	d8c00515 	stw	r3,20(sp)
1000e2b8:	d9800715 	stw	r6,28(sp)
1000e2bc:	da000615 	stw	r8,24(sp)
1000e2c0:	0002b140 	call	10002b14 <__mulsi3>
1000e2c4:	9009883a 	mov	r4,r18
1000e2c8:	a80b883a 	mov	r5,r21
1000e2cc:	1029883a 	mov	r20,r2
1000e2d0:	0002b140 	call	10002b14 <__mulsi3>
1000e2d4:	e009883a 	mov	r4,fp
1000e2d8:	a80b883a 	mov	r5,r21
1000e2dc:	102d883a 	mov	r22,r2
1000e2e0:	0002b140 	call	10002b14 <__mulsi3>
1000e2e4:	e009883a 	mov	r4,fp
1000e2e8:	b80b883a 	mov	r5,r23
1000e2ec:	1027883a 	mov	r19,r2
1000e2f0:	0002b140 	call	10002b14 <__mulsi3>
1000e2f4:	a008d43a 	srli	r4,r20,16
1000e2f8:	b085883a 	add	r2,r22,r2
1000e2fc:	d8c00517 	ldw	r3,20(sp)
1000e300:	110f883a 	add	r7,r2,r4
1000e304:	d9800717 	ldw	r6,28(sp)
1000e308:	da000617 	ldw	r8,24(sp)
1000e30c:	3d80022e 	bgeu	r7,r22,1000e318 <__muldf3+0x3b0>
1000e310:	00800074 	movhi	r2,1
1000e314:	98a7883a 	add	r19,r19,r2
1000e318:	3804943a 	slli	r2,r7,16
1000e31c:	380ed43a 	srli	r7,r7,16
1000e320:	882cd43a 	srli	r22,r17,16
1000e324:	a53fffcc 	andi	r20,r20,65535
1000e328:	8c7fffcc 	andi	r17,r17,65535
1000e32c:	1529883a 	add	r20,r2,r20
1000e330:	8809883a 	mov	r4,r17
1000e334:	b80b883a 	mov	r5,r23
1000e338:	d8c00515 	stw	r3,20(sp)
1000e33c:	d9800715 	stw	r6,28(sp)
1000e340:	da000615 	stw	r8,24(sp)
1000e344:	d9c00015 	stw	r7,0(sp)
1000e348:	dd000115 	stw	r20,4(sp)
1000e34c:	0002b140 	call	10002b14 <__mulsi3>
1000e350:	a80b883a 	mov	r5,r21
1000e354:	8809883a 	mov	r4,r17
1000e358:	d8800415 	stw	r2,16(sp)
1000e35c:	0002b140 	call	10002b14 <__mulsi3>
1000e360:	a80b883a 	mov	r5,r21
1000e364:	b009883a 	mov	r4,r22
1000e368:	1029883a 	mov	r20,r2
1000e36c:	0002b140 	call	10002b14 <__mulsi3>
1000e370:	b009883a 	mov	r4,r22
1000e374:	b80b883a 	mov	r5,r23
1000e378:	102b883a 	mov	r21,r2
1000e37c:	0002b140 	call	10002b14 <__mulsi3>
1000e380:	da400417 	ldw	r9,16(sp)
1000e384:	a085883a 	add	r2,r20,r2
1000e388:	d8c00517 	ldw	r3,20(sp)
1000e38c:	4808d43a 	srli	r4,r9,16
1000e390:	d9800717 	ldw	r6,28(sp)
1000e394:	da000617 	ldw	r8,24(sp)
1000e398:	1109883a 	add	r4,r2,r4
1000e39c:	2500022e 	bgeu	r4,r20,1000e3a8 <__muldf3+0x440>
1000e3a0:	00800074 	movhi	r2,1
1000e3a4:	a8ab883a 	add	r21,r21,r2
1000e3a8:	200e943a 	slli	r7,r4,16
1000e3ac:	2004d43a 	srli	r2,r4,16
1000e3b0:	802ed43a 	srli	r23,r16,16
1000e3b4:	843fffcc 	andi	r16,r16,65535
1000e3b8:	4d3fffcc 	andi	r20,r9,65535
1000e3bc:	9009883a 	mov	r4,r18
1000e3c0:	800b883a 	mov	r5,r16
1000e3c4:	3d29883a 	add	r20,r7,r20
1000e3c8:	d8c00515 	stw	r3,20(sp)
1000e3cc:	d9800715 	stw	r6,28(sp)
1000e3d0:	da000615 	stw	r8,24(sp)
1000e3d4:	a8ab883a 	add	r21,r21,r2
1000e3d8:	0002b140 	call	10002b14 <__mulsi3>
1000e3dc:	9009883a 	mov	r4,r18
1000e3e0:	b80b883a 	mov	r5,r23
1000e3e4:	d8800315 	stw	r2,12(sp)
1000e3e8:	0002b140 	call	10002b14 <__mulsi3>
1000e3ec:	e009883a 	mov	r4,fp
1000e3f0:	b80b883a 	mov	r5,r23
1000e3f4:	1025883a 	mov	r18,r2
1000e3f8:	0002b140 	call	10002b14 <__mulsi3>
1000e3fc:	e009883a 	mov	r4,fp
1000e400:	800b883a 	mov	r5,r16
1000e404:	d8800215 	stw	r2,8(sp)
1000e408:	0002b140 	call	10002b14 <__mulsi3>
1000e40c:	da800317 	ldw	r10,12(sp)
1000e410:	d9400017 	ldw	r5,0(sp)
1000e414:	9085883a 	add	r2,r18,r2
1000e418:	5008d43a 	srli	r4,r10,16
1000e41c:	a153883a 	add	r9,r20,r5
1000e420:	d8c00517 	ldw	r3,20(sp)
1000e424:	1109883a 	add	r4,r2,r4
1000e428:	d9800717 	ldw	r6,28(sp)
1000e42c:	da000617 	ldw	r8,24(sp)
1000e430:	dac00217 	ldw	r11,8(sp)
1000e434:	2480022e 	bgeu	r4,r18,1000e440 <__muldf3+0x4d8>
1000e438:	00800074 	movhi	r2,1
1000e43c:	5897883a 	add	r11,r11,r2
1000e440:	200e943a 	slli	r7,r4,16
1000e444:	2038d43a 	srli	fp,r4,16
1000e448:	52bfffcc 	andi	r10,r10,65535
1000e44c:	3a8f883a 	add	r7,r7,r10
1000e450:	8809883a 	mov	r4,r17
1000e454:	800b883a 	mov	r5,r16
1000e458:	d8c00515 	stw	r3,20(sp)
1000e45c:	d9800715 	stw	r6,28(sp)
1000e460:	d9c00215 	stw	r7,8(sp)
1000e464:	da000615 	stw	r8,24(sp)
1000e468:	da400415 	stw	r9,16(sp)
1000e46c:	5f39883a 	add	fp,r11,fp
1000e470:	0002b140 	call	10002b14 <__mulsi3>
1000e474:	8809883a 	mov	r4,r17
1000e478:	b80b883a 	mov	r5,r23
1000e47c:	1025883a 	mov	r18,r2
1000e480:	0002b140 	call	10002b14 <__mulsi3>
1000e484:	b009883a 	mov	r4,r22
1000e488:	b80b883a 	mov	r5,r23
1000e48c:	d8800315 	stw	r2,12(sp)
1000e490:	0002b140 	call	10002b14 <__mulsi3>
1000e494:	b009883a 	mov	r4,r22
1000e498:	800b883a 	mov	r5,r16
1000e49c:	1023883a 	mov	r17,r2
1000e4a0:	0002b140 	call	10002b14 <__mulsi3>
1000e4a4:	da800317 	ldw	r10,12(sp)
1000e4a8:	9008d43a 	srli	r4,r18,16
1000e4ac:	d8c00517 	ldw	r3,20(sp)
1000e4b0:	5085883a 	add	r2,r10,r2
1000e4b4:	1109883a 	add	r4,r2,r4
1000e4b8:	d9800717 	ldw	r6,28(sp)
1000e4bc:	d9c00217 	ldw	r7,8(sp)
1000e4c0:	da000617 	ldw	r8,24(sp)
1000e4c4:	da400417 	ldw	r9,16(sp)
1000e4c8:	2280022e 	bgeu	r4,r10,1000e4d4 <__muldf3+0x56c>
1000e4cc:	00800074 	movhi	r2,1
1000e4d0:	88a3883a 	add	r17,r17,r2
1000e4d4:	2004943a 	slli	r2,r4,16
1000e4d8:	94bfffcc 	andi	r18,r18,65535
1000e4dc:	4ce7883a 	add	r19,r9,r19
1000e4e0:	14a5883a 	add	r18,r2,r18
1000e4e4:	9d29803a 	cmpltu	r20,r19,r20
1000e4e8:	9565883a 	add	r18,r18,r21
1000e4ec:	9505883a 	add	r2,r18,r20
1000e4f0:	99e7883a 	add	r19,r19,r7
1000e4f4:	99cf803a 	cmpltu	r7,r19,r7
1000e4f8:	e08b883a 	add	r5,fp,r2
1000e4fc:	2008d43a 	srli	r4,r4,16
1000e500:	29ef883a 	add	r23,r5,r7
1000e504:	1529803a 	cmpltu	r20,r2,r20
1000e508:	956b803a 	cmpltu	r21,r18,r21
1000e50c:	b9cf803a 	cmpltu	r7,r23,r7
1000e510:	a564b03a 	or	r18,r20,r21
1000e514:	2f39803a 	cmpltu	fp,r5,fp
1000e518:	9125883a 	add	r18,r18,r4
1000e51c:	3f38b03a 	or	fp,r7,fp
1000e520:	9725883a 	add	r18,r18,fp
1000e524:	9804927a 	slli	r2,r19,9
1000e528:	9463883a 	add	r17,r18,r17
1000e52c:	d9000117 	ldw	r4,4(sp)
1000e530:	b820d5fa 	srli	r16,r23,23
1000e534:	8822927a 	slli	r17,r17,9
1000e538:	9826d5fa 	srli	r19,r19,23
1000e53c:	1104b03a 	or	r2,r2,r4
1000e540:	b82e927a 	slli	r23,r23,9
1000e544:	1004c03a 	cmpne	r2,r2,zero
1000e548:	8c20b03a 	or	r16,r17,r16
1000e54c:	14e6b03a 	or	r19,r2,r19
1000e550:	8080402c 	andhi	r2,r16,256
1000e554:	9deeb03a 	or	r23,r19,r23
1000e558:	10000726 	beq	r2,zero,1000e578 <__muldf3+0x610>
1000e55c:	b804d07a 	srli	r2,r23,1
1000e560:	800697fa 	slli	r3,r16,31
1000e564:	bdc0004c 	andi	r23,r23,1
1000e568:	8020d07a 	srli	r16,r16,1
1000e56c:	b8aeb03a 	or	r23,r23,r2
1000e570:	b8eeb03a 	or	r23,r23,r3
1000e574:	4007883a 	mov	r3,r8
1000e578:	1900ffc4 	addi	r4,r3,1023
1000e57c:	01004d0e 	bge	zero,r4,1000e6b4 <__muldf3+0x74c>
1000e580:	b88001cc 	andi	r2,r23,7
1000e584:	10000726 	beq	r2,zero,1000e5a4 <__muldf3+0x63c>
1000e588:	b94003cc 	andi	r5,r23,15
1000e58c:	00800104 	movi	r2,4
1000e590:	28800426 	beq	r5,r2,1000e5a4 <__muldf3+0x63c>
1000e594:	b885883a 	add	r2,r23,r2
1000e598:	15ef803a 	cmpltu	r23,r2,r23
1000e59c:	85e1883a 	add	r16,r16,r23
1000e5a0:	102f883a 	mov	r23,r2
1000e5a4:	8080402c 	andhi	r2,r16,256
1000e5a8:	10000426 	beq	r2,zero,1000e5bc <__muldf3+0x654>
1000e5ac:	00bfc034 	movhi	r2,65280
1000e5b0:	10bfffc4 	addi	r2,r2,-1
1000e5b4:	19010004 	addi	r4,r3,1024
1000e5b8:	80a0703a 	and	r16,r16,r2
1000e5bc:	0081ff84 	movi	r2,2046
1000e5c0:	1100340e 	bge	r2,r4,1000e694 <__muldf3+0x72c>
1000e5c4:	34c0004c 	andi	r19,r6,1
1000e5c8:	0101ffc4 	movi	r4,2047
1000e5cc:	0021883a 	mov	r16,zero
1000e5d0:	002f883a 	mov	r23,zero
1000e5d4:	003ebe06 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e5d8:	8080022c 	andhi	r2,r16,8
1000e5dc:	10000926 	beq	r2,zero,1000e604 <__muldf3+0x69c>
1000e5e0:	8880022c 	andhi	r2,r17,8
1000e5e4:	1000071e 	bne	r2,zero,1000e604 <__muldf3+0x69c>
1000e5e8:	00800434 	movhi	r2,16
1000e5ec:	8c000234 	orhi	r16,r17,8
1000e5f0:	10bfffc4 	addi	r2,r2,-1
1000e5f4:	b027883a 	mov	r19,r22
1000e5f8:	80a0703a 	and	r16,r16,r2
1000e5fc:	902f883a 	mov	r23,r18
1000e600:	003f1a06 	br	1000e26c <__alt_data_end+0xf800e26c>
1000e604:	00800434 	movhi	r2,16
1000e608:	84000234 	orhi	r16,r16,8
1000e60c:	10bfffc4 	addi	r2,r2,-1
1000e610:	80a0703a 	and	r16,r16,r2
1000e614:	003f1506 	br	1000e26c <__alt_data_end+0xf800e26c>
1000e618:	3009883a 	mov	r4,r6
1000e61c:	d9400215 	stw	r5,8(sp)
1000e620:	d9800715 	stw	r6,28(sp)
1000e624:	da400415 	stw	r9,16(sp)
1000e628:	da800315 	stw	r10,12(sp)
1000e62c:	0003e000 	call	10003e00 <__clzsi2>
1000e630:	10c00804 	addi	r3,r2,32
1000e634:	010009c4 	movi	r4,39
1000e638:	d9400217 	ldw	r5,8(sp)
1000e63c:	d9800717 	ldw	r6,28(sp)
1000e640:	da400417 	ldw	r9,16(sp)
1000e644:	da800317 	ldw	r10,12(sp)
1000e648:	20fee20e 	bge	r4,r3,1000e1d4 <__alt_data_end+0xf800e1d4>
1000e64c:	147ffe04 	addi	r17,r2,-8
1000e650:	9462983a 	sll	r17,r18,r17
1000e654:	0025883a 	mov	r18,zero
1000e658:	003ee506 	br	1000e1f0 <__alt_data_end+0xf800e1f0>
1000e65c:	d9800715 	stw	r6,28(sp)
1000e660:	d9c00215 	stw	r7,8(sp)
1000e664:	da400415 	stw	r9,16(sp)
1000e668:	0003e000 	call	10003e00 <__clzsi2>
1000e66c:	10c00804 	addi	r3,r2,32
1000e670:	010009c4 	movi	r4,39
1000e674:	d9800717 	ldw	r6,28(sp)
1000e678:	d9c00217 	ldw	r7,8(sp)
1000e67c:	da400417 	ldw	r9,16(sp)
1000e680:	20feb40e 	bge	r4,r3,1000e154 <__alt_data_end+0xf800e154>
1000e684:	143ffe04 	addi	r16,r2,-8
1000e688:	9420983a 	sll	r16,r18,r16
1000e68c:	002f883a 	mov	r23,zero
1000e690:	003eb706 	br	1000e170 <__alt_data_end+0xf800e170>
1000e694:	8004977a 	slli	r2,r16,29
1000e698:	b82ed0fa 	srli	r23,r23,3
1000e69c:	8020927a 	slli	r16,r16,9
1000e6a0:	2101ffcc 	andi	r4,r4,2047
1000e6a4:	15eeb03a 	or	r23,r2,r23
1000e6a8:	8020d33a 	srli	r16,r16,12
1000e6ac:	34c0004c 	andi	r19,r6,1
1000e6b0:	003e8706 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e6b4:	00bf0084 	movi	r2,-1022
1000e6b8:	10c5c83a 	sub	r2,r2,r3
1000e6bc:	01000e04 	movi	r4,56
1000e6c0:	2080080e 	bge	r4,r2,1000e6e4 <__muldf3+0x77c>
1000e6c4:	34c0004c 	andi	r19,r6,1
1000e6c8:	0009883a 	mov	r4,zero
1000e6cc:	0021883a 	mov	r16,zero
1000e6d0:	002f883a 	mov	r23,zero
1000e6d4:	003e7e06 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e6d8:	4007883a 	mov	r3,r8
1000e6dc:	480d883a 	mov	r6,r9
1000e6e0:	003fa506 	br	1000e578 <__alt_data_end+0xf800e578>
1000e6e4:	010007c4 	movi	r4,31
1000e6e8:	20801816 	blt	r4,r2,1000e74c <__muldf3+0x7e4>
1000e6ec:	18c10784 	addi	r3,r3,1054
1000e6f0:	80c8983a 	sll	r4,r16,r3
1000e6f4:	b88ad83a 	srl	r5,r23,r2
1000e6f8:	b8c6983a 	sll	r3,r23,r3
1000e6fc:	80a0d83a 	srl	r16,r16,r2
1000e700:	2908b03a 	or	r4,r5,r4
1000e704:	1804c03a 	cmpne	r2,r3,zero
1000e708:	2088b03a 	or	r4,r4,r2
1000e70c:	208001cc 	andi	r2,r4,7
1000e710:	10000726 	beq	r2,zero,1000e730 <__muldf3+0x7c8>
1000e714:	20c003cc 	andi	r3,r4,15
1000e718:	00800104 	movi	r2,4
1000e71c:	18800426 	beq	r3,r2,1000e730 <__muldf3+0x7c8>
1000e720:	20c00104 	addi	r3,r4,4
1000e724:	1905803a 	cmpltu	r2,r3,r4
1000e728:	80a1883a 	add	r16,r16,r2
1000e72c:	1809883a 	mov	r4,r3
1000e730:	8080202c 	andhi	r2,r16,128
1000e734:	10001b26 	beq	r2,zero,1000e7a4 <__muldf3+0x83c>
1000e738:	34c0004c 	andi	r19,r6,1
1000e73c:	01000044 	movi	r4,1
1000e740:	0021883a 	mov	r16,zero
1000e744:	002f883a 	mov	r23,zero
1000e748:	003e6106 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e74c:	013ef884 	movi	r4,-1054
1000e750:	20c9c83a 	sub	r4,r4,r3
1000e754:	01400804 	movi	r5,32
1000e758:	8108d83a 	srl	r4,r16,r4
1000e75c:	11401526 	beq	r2,r5,1000e7b4 <__muldf3+0x84c>
1000e760:	18c10f84 	addi	r3,r3,1086
1000e764:	80e0983a 	sll	r16,r16,r3
1000e768:	85eeb03a 	or	r23,r16,r23
1000e76c:	b804c03a 	cmpne	r2,r23,zero
1000e770:	1108b03a 	or	r4,r2,r4
1000e774:	20c001cc 	andi	r3,r4,7
1000e778:	1800061e 	bne	r3,zero,1000e794 <__muldf3+0x82c>
1000e77c:	0021883a 	mov	r16,zero
1000e780:	202ed0fa 	srli	r23,r4,3
1000e784:	34c0004c 	andi	r19,r6,1
1000e788:	0009883a 	mov	r4,zero
1000e78c:	b8eeb03a 	or	r23,r23,r3
1000e790:	003e4f06 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e794:	20c003cc 	andi	r3,r4,15
1000e798:	00800104 	movi	r2,4
1000e79c:	0021883a 	mov	r16,zero
1000e7a0:	18bfdf1e 	bne	r3,r2,1000e720 <__alt_data_end+0xf800e720>
1000e7a4:	8004927a 	slli	r2,r16,9
1000e7a8:	8006977a 	slli	r3,r16,29
1000e7ac:	1020d33a 	srli	r16,r2,12
1000e7b0:	003ff306 	br	1000e780 <__alt_data_end+0xf800e780>
1000e7b4:	0021883a 	mov	r16,zero
1000e7b8:	003feb06 	br	1000e768 <__alt_data_end+0xf800e768>
1000e7bc:	00800434 	movhi	r2,16
1000e7c0:	84000234 	orhi	r16,r16,8
1000e7c4:	10bfffc4 	addi	r2,r2,-1
1000e7c8:	4cc0004c 	andi	r19,r9,1
1000e7cc:	80a0703a 	and	r16,r16,r2
1000e7d0:	003ea606 	br	1000e26c <__alt_data_end+0xf800e26c>

1000e7d4 <__floatunsidf>:
1000e7d4:	defffe04 	addi	sp,sp,-8
1000e7d8:	dc000015 	stw	r16,0(sp)
1000e7dc:	dfc00115 	stw	ra,4(sp)
1000e7e0:	2021883a 	mov	r16,r4
1000e7e4:	20001026 	beq	r4,zero,1000e828 <__floatunsidf+0x54>
1000e7e8:	0003e000 	call	10003e00 <__clzsi2>
1000e7ec:	01410784 	movi	r5,1054
1000e7f0:	100d883a 	mov	r6,r2
1000e7f4:	288bc83a 	sub	r5,r5,r2
1000e7f8:	00800284 	movi	r2,10
1000e7fc:	11801616 	blt	r2,r6,1000e858 <__floatunsidf+0x84>
1000e800:	008002c4 	movi	r2,11
1000e804:	1185c83a 	sub	r2,r2,r6
1000e808:	8084d83a 	srl	r2,r16,r2
1000e80c:	00c00434 	movhi	r3,16
1000e810:	31c00544 	addi	r7,r6,21
1000e814:	18ffffc4 	addi	r3,r3,-1
1000e818:	81e0983a 	sll	r16,r16,r7
1000e81c:	10cc703a 	and	r6,r2,r3
1000e820:	2941ffcc 	andi	r5,r5,2047
1000e824:	00000206 	br	1000e830 <__floatunsidf+0x5c>
1000e828:	000b883a 	mov	r5,zero
1000e82c:	000d883a 	mov	r6,zero
1000e830:	280a953a 	slli	r5,r5,20
1000e834:	00c00434 	movhi	r3,16
1000e838:	18ffffc4 	addi	r3,r3,-1
1000e83c:	30c6703a 	and	r3,r6,r3
1000e840:	8005883a 	mov	r2,r16
1000e844:	1946b03a 	or	r3,r3,r5
1000e848:	dfc00117 	ldw	ra,4(sp)
1000e84c:	dc000017 	ldw	r16,0(sp)
1000e850:	dec00204 	addi	sp,sp,8
1000e854:	f800283a 	ret
1000e858:	31bffd44 	addi	r6,r6,-11
1000e85c:	818c983a 	sll	r6,r16,r6
1000e860:	00800434 	movhi	r2,16
1000e864:	10bfffc4 	addi	r2,r2,-1
1000e868:	2941ffcc 	andi	r5,r5,2047
1000e86c:	0021883a 	mov	r16,zero
1000e870:	308c703a 	and	r6,r6,r2
1000e874:	003fee06 	br	1000e830 <__alt_data_end+0xf800e830>

1000e878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e878:	defffe04 	addi	sp,sp,-8
1000e87c:	dfc00115 	stw	ra,4(sp)
1000e880:	df000015 	stw	fp,0(sp)
1000e884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e888:	00840074 	movhi	r2,4097
1000e88c:	108b9a04 	addi	r2,r2,11880
1000e890:	10800017 	ldw	r2,0(r2)
1000e894:	10000526 	beq	r2,zero,1000e8ac <alt_get_errno+0x34>
1000e898:	00840074 	movhi	r2,4097
1000e89c:	108b9a04 	addi	r2,r2,11880
1000e8a0:	10800017 	ldw	r2,0(r2)
1000e8a4:	103ee83a 	callr	r2
1000e8a8:	00000206 	br	1000e8b4 <alt_get_errno+0x3c>
1000e8ac:	00840074 	movhi	r2,4097
1000e8b0:	10926f04 	addi	r2,r2,18876
}
1000e8b4:	e037883a 	mov	sp,fp
1000e8b8:	dfc00117 	ldw	ra,4(sp)
1000e8bc:	df000017 	ldw	fp,0(sp)
1000e8c0:	dec00204 	addi	sp,sp,8
1000e8c4:	f800283a 	ret

1000e8c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e8c8:	defffb04 	addi	sp,sp,-20
1000e8cc:	dfc00415 	stw	ra,16(sp)
1000e8d0:	df000315 	stw	fp,12(sp)
1000e8d4:	df000304 	addi	fp,sp,12
1000e8d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e8dc:	e0bfff17 	ldw	r2,-4(fp)
1000e8e0:	10000816 	blt	r2,zero,1000e904 <close+0x3c>
1000e8e4:	e13fff17 	ldw	r4,-4(fp)
1000e8e8:	01400304 	movi	r5,12
1000e8ec:	0002b140 	call	10002b14 <__mulsi3>
1000e8f0:	1007883a 	mov	r3,r2
1000e8f4:	00840074 	movhi	r2,4097
1000e8f8:	10871704 	addi	r2,r2,7260
1000e8fc:	1885883a 	add	r2,r3,r2
1000e900:	00000106 	br	1000e908 <close+0x40>
1000e904:	0005883a 	mov	r2,zero
1000e908:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000e90c:	e0bffd17 	ldw	r2,-12(fp)
1000e910:	10001926 	beq	r2,zero,1000e978 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000e914:	e0bffd17 	ldw	r2,-12(fp)
1000e918:	10800017 	ldw	r2,0(r2)
1000e91c:	10800417 	ldw	r2,16(r2)
1000e920:	10000626 	beq	r2,zero,1000e93c <close+0x74>
1000e924:	e0bffd17 	ldw	r2,-12(fp)
1000e928:	10800017 	ldw	r2,0(r2)
1000e92c:	10800417 	ldw	r2,16(r2)
1000e930:	e13ffd17 	ldw	r4,-12(fp)
1000e934:	103ee83a 	callr	r2
1000e938:	00000106 	br	1000e940 <close+0x78>
1000e93c:	0005883a 	mov	r2,zero
1000e940:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000e944:	e13fff17 	ldw	r4,-4(fp)
1000e948:	000efec0 	call	1000efec <alt_release_fd>
    if (rval < 0)
1000e94c:	e0bffe17 	ldw	r2,-8(fp)
1000e950:	1000070e 	bge	r2,zero,1000e970 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000e954:	000e8780 	call	1000e878 <alt_get_errno>
1000e958:	1007883a 	mov	r3,r2
1000e95c:	e0bffe17 	ldw	r2,-8(fp)
1000e960:	0085c83a 	sub	r2,zero,r2
1000e964:	18800015 	stw	r2,0(r3)
      return -1;
1000e968:	00bfffc4 	movi	r2,-1
1000e96c:	00000706 	br	1000e98c <close+0xc4>
    }
    return 0;
1000e970:	0005883a 	mov	r2,zero
1000e974:	00000506 	br	1000e98c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e978:	000e8780 	call	1000e878 <alt_get_errno>
1000e97c:	1007883a 	mov	r3,r2
1000e980:	00801444 	movi	r2,81
1000e984:	18800015 	stw	r2,0(r3)
    return -1;
1000e988:	00bfffc4 	movi	r2,-1
  }
}
1000e98c:	e037883a 	mov	sp,fp
1000e990:	dfc00117 	ldw	ra,4(sp)
1000e994:	df000017 	ldw	fp,0(sp)
1000e998:	dec00204 	addi	sp,sp,8
1000e99c:	f800283a 	ret

1000e9a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000e9a0:	defffc04 	addi	sp,sp,-16
1000e9a4:	df000315 	stw	fp,12(sp)
1000e9a8:	df000304 	addi	fp,sp,12
1000e9ac:	e13ffd15 	stw	r4,-12(fp)
1000e9b0:	e17ffe15 	stw	r5,-8(fp)
1000e9b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000e9b8:	e0bfff17 	ldw	r2,-4(fp)
}
1000e9bc:	e037883a 	mov	sp,fp
1000e9c0:	df000017 	ldw	fp,0(sp)
1000e9c4:	dec00104 	addi	sp,sp,4
1000e9c8:	f800283a 	ret

1000e9cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e9cc:	defffe04 	addi	sp,sp,-8
1000e9d0:	dfc00115 	stw	ra,4(sp)
1000e9d4:	df000015 	stw	fp,0(sp)
1000e9d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e9dc:	00840074 	movhi	r2,4097
1000e9e0:	108b9a04 	addi	r2,r2,11880
1000e9e4:	10800017 	ldw	r2,0(r2)
1000e9e8:	10000526 	beq	r2,zero,1000ea00 <alt_get_errno+0x34>
1000e9ec:	00840074 	movhi	r2,4097
1000e9f0:	108b9a04 	addi	r2,r2,11880
1000e9f4:	10800017 	ldw	r2,0(r2)
1000e9f8:	103ee83a 	callr	r2
1000e9fc:	00000206 	br	1000ea08 <alt_get_errno+0x3c>
1000ea00:	00840074 	movhi	r2,4097
1000ea04:	10926f04 	addi	r2,r2,18876
}
1000ea08:	e037883a 	mov	sp,fp
1000ea0c:	dfc00117 	ldw	ra,4(sp)
1000ea10:	df000017 	ldw	fp,0(sp)
1000ea14:	dec00204 	addi	sp,sp,8
1000ea18:	f800283a 	ret

1000ea1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000ea1c:	defffb04 	addi	sp,sp,-20
1000ea20:	dfc00415 	stw	ra,16(sp)
1000ea24:	df000315 	stw	fp,12(sp)
1000ea28:	df000304 	addi	fp,sp,12
1000ea2c:	e13ffe15 	stw	r4,-8(fp)
1000ea30:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ea34:	e0bffe17 	ldw	r2,-8(fp)
1000ea38:	10000816 	blt	r2,zero,1000ea5c <fstat+0x40>
1000ea3c:	e13ffe17 	ldw	r4,-8(fp)
1000ea40:	01400304 	movi	r5,12
1000ea44:	0002b140 	call	10002b14 <__mulsi3>
1000ea48:	1007883a 	mov	r3,r2
1000ea4c:	00840074 	movhi	r2,4097
1000ea50:	10871704 	addi	r2,r2,7260
1000ea54:	1885883a 	add	r2,r3,r2
1000ea58:	00000106 	br	1000ea60 <fstat+0x44>
1000ea5c:	0005883a 	mov	r2,zero
1000ea60:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000ea64:	e0bffd17 	ldw	r2,-12(fp)
1000ea68:	10001026 	beq	r2,zero,1000eaac <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000ea6c:	e0bffd17 	ldw	r2,-12(fp)
1000ea70:	10800017 	ldw	r2,0(r2)
1000ea74:	10800817 	ldw	r2,32(r2)
1000ea78:	10000726 	beq	r2,zero,1000ea98 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000ea7c:	e0bffd17 	ldw	r2,-12(fp)
1000ea80:	10800017 	ldw	r2,0(r2)
1000ea84:	10800817 	ldw	r2,32(r2)
1000ea88:	e13ffd17 	ldw	r4,-12(fp)
1000ea8c:	e17fff17 	ldw	r5,-4(fp)
1000ea90:	103ee83a 	callr	r2
1000ea94:	00000a06 	br	1000eac0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000ea98:	e0bfff17 	ldw	r2,-4(fp)
1000ea9c:	00c80004 	movi	r3,8192
1000eaa0:	10c00115 	stw	r3,4(r2)
      return 0;
1000eaa4:	0005883a 	mov	r2,zero
1000eaa8:	00000506 	br	1000eac0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000eaac:	000e9cc0 	call	1000e9cc <alt_get_errno>
1000eab0:	1007883a 	mov	r3,r2
1000eab4:	00801444 	movi	r2,81
1000eab8:	18800015 	stw	r2,0(r3)
    return -1;
1000eabc:	00bfffc4 	movi	r2,-1
  }
}
1000eac0:	e037883a 	mov	sp,fp
1000eac4:	dfc00117 	ldw	ra,4(sp)
1000eac8:	df000017 	ldw	fp,0(sp)
1000eacc:	dec00204 	addi	sp,sp,8
1000ead0:	f800283a 	ret

1000ead4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ead4:	defffe04 	addi	sp,sp,-8
1000ead8:	dfc00115 	stw	ra,4(sp)
1000eadc:	df000015 	stw	fp,0(sp)
1000eae0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eae4:	00840074 	movhi	r2,4097
1000eae8:	108b9a04 	addi	r2,r2,11880
1000eaec:	10800017 	ldw	r2,0(r2)
1000eaf0:	10000526 	beq	r2,zero,1000eb08 <alt_get_errno+0x34>
1000eaf4:	00840074 	movhi	r2,4097
1000eaf8:	108b9a04 	addi	r2,r2,11880
1000eafc:	10800017 	ldw	r2,0(r2)
1000eb00:	103ee83a 	callr	r2
1000eb04:	00000206 	br	1000eb10 <alt_get_errno+0x3c>
1000eb08:	00840074 	movhi	r2,4097
1000eb0c:	10926f04 	addi	r2,r2,18876
}
1000eb10:	e037883a 	mov	sp,fp
1000eb14:	dfc00117 	ldw	ra,4(sp)
1000eb18:	df000017 	ldw	fp,0(sp)
1000eb1c:	dec00204 	addi	sp,sp,8
1000eb20:	f800283a 	ret

1000eb24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000eb24:	deffed04 	addi	sp,sp,-76
1000eb28:	dfc01215 	stw	ra,72(sp)
1000eb2c:	df001115 	stw	fp,68(sp)
1000eb30:	df001104 	addi	fp,sp,68
1000eb34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eb38:	e0bfff17 	ldw	r2,-4(fp)
1000eb3c:	10000816 	blt	r2,zero,1000eb60 <isatty+0x3c>
1000eb40:	e13fff17 	ldw	r4,-4(fp)
1000eb44:	01400304 	movi	r5,12
1000eb48:	0002b140 	call	10002b14 <__mulsi3>
1000eb4c:	1007883a 	mov	r3,r2
1000eb50:	00840074 	movhi	r2,4097
1000eb54:	10871704 	addi	r2,r2,7260
1000eb58:	1885883a 	add	r2,r3,r2
1000eb5c:	00000106 	br	1000eb64 <isatty+0x40>
1000eb60:	0005883a 	mov	r2,zero
1000eb64:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000eb68:	e0bfef17 	ldw	r2,-68(fp)
1000eb6c:	10000e26 	beq	r2,zero,1000eba8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000eb70:	e0bfef17 	ldw	r2,-68(fp)
1000eb74:	10800017 	ldw	r2,0(r2)
1000eb78:	10800817 	ldw	r2,32(r2)
1000eb7c:	1000021e 	bne	r2,zero,1000eb88 <isatty+0x64>
    {
      return 1;
1000eb80:	00800044 	movi	r2,1
1000eb84:	00000d06 	br	1000ebbc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000eb88:	e0bff004 	addi	r2,fp,-64
1000eb8c:	e13fff17 	ldw	r4,-4(fp)
1000eb90:	100b883a 	mov	r5,r2
1000eb94:	000ea1c0 	call	1000ea1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000eb98:	e0bff117 	ldw	r2,-60(fp)
1000eb9c:	10880020 	cmpeqi	r2,r2,8192
1000eba0:	10803fcc 	andi	r2,r2,255
1000eba4:	00000506 	br	1000ebbc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000eba8:	000ead40 	call	1000ead4 <alt_get_errno>
1000ebac:	1007883a 	mov	r3,r2
1000ebb0:	00801444 	movi	r2,81
1000ebb4:	18800015 	stw	r2,0(r3)
    return 0;
1000ebb8:	0005883a 	mov	r2,zero
  }
}
1000ebbc:	e037883a 	mov	sp,fp
1000ebc0:	dfc00117 	ldw	ra,4(sp)
1000ebc4:	df000017 	ldw	fp,0(sp)
1000ebc8:	dec00204 	addi	sp,sp,8
1000ebcc:	f800283a 	ret

1000ebd0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ebd0:	defffc04 	addi	sp,sp,-16
1000ebd4:	df000315 	stw	fp,12(sp)
1000ebd8:	df000304 	addi	fp,sp,12
1000ebdc:	e13ffd15 	stw	r4,-12(fp)
1000ebe0:	e17ffe15 	stw	r5,-8(fp)
1000ebe4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ebe8:	e0fffe17 	ldw	r3,-8(fp)
1000ebec:	e0bffd17 	ldw	r2,-12(fp)
1000ebf0:	18800c26 	beq	r3,r2,1000ec24 <alt_load_section+0x54>
  {
    while( to != end )
1000ebf4:	00000806 	br	1000ec18 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ebf8:	e0bffe17 	ldw	r2,-8(fp)
1000ebfc:	10c00104 	addi	r3,r2,4
1000ec00:	e0fffe15 	stw	r3,-8(fp)
1000ec04:	e0fffd17 	ldw	r3,-12(fp)
1000ec08:	19000104 	addi	r4,r3,4
1000ec0c:	e13ffd15 	stw	r4,-12(fp)
1000ec10:	18c00017 	ldw	r3,0(r3)
1000ec14:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ec18:	e0fffe17 	ldw	r3,-8(fp)
1000ec1c:	e0bfff17 	ldw	r2,-4(fp)
1000ec20:	18bff51e 	bne	r3,r2,1000ebf8 <__alt_data_end+0xf800ebf8>
    {
      *to++ = *from++;
    }
  }
}
1000ec24:	e037883a 	mov	sp,fp
1000ec28:	df000017 	ldw	fp,0(sp)
1000ec2c:	dec00104 	addi	sp,sp,4
1000ec30:	f800283a 	ret

1000ec34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ec34:	defffe04 	addi	sp,sp,-8
1000ec38:	dfc00115 	stw	ra,4(sp)
1000ec3c:	df000015 	stw	fp,0(sp)
1000ec40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ec44:	01040074 	movhi	r4,4097
1000ec48:	210b9f04 	addi	r4,r4,11900
1000ec4c:	01440074 	movhi	r5,4097
1000ec50:	2944e404 	addi	r5,r5,5008
1000ec54:	01840074 	movhi	r6,4097
1000ec58:	318b9f04 	addi	r6,r6,11900
1000ec5c:	000ebd00 	call	1000ebd0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ec60:	01040034 	movhi	r4,4096
1000ec64:	21000804 	addi	r4,r4,32
1000ec68:	01440034 	movhi	r5,4096
1000ec6c:	29400804 	addi	r5,r5,32
1000ec70:	01840034 	movhi	r6,4096
1000ec74:	31808b04 	addi	r6,r6,556
1000ec78:	000ebd00 	call	1000ebd0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ec7c:	01040074 	movhi	r4,4097
1000ec80:	2103f404 	addi	r4,r4,4048
1000ec84:	01440074 	movhi	r5,4097
1000ec88:	2943f404 	addi	r5,r5,4048
1000ec8c:	01840074 	movhi	r6,4097
1000ec90:	3184e404 	addi	r6,r6,5008
1000ec94:	000ebd00 	call	1000ebd0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ec98:	000feac0 	call	1000feac <alt_dcache_flush_all>
  alt_icache_flush_all();
1000ec9c:	00100740 	call	10010074 <alt_icache_flush_all>
}
1000eca0:	e037883a 	mov	sp,fp
1000eca4:	dfc00117 	ldw	ra,4(sp)
1000eca8:	df000017 	ldw	fp,0(sp)
1000ecac:	dec00204 	addi	sp,sp,8
1000ecb0:	f800283a 	ret

1000ecb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ecb4:	defffe04 	addi	sp,sp,-8
1000ecb8:	dfc00115 	stw	ra,4(sp)
1000ecbc:	df000015 	stw	fp,0(sp)
1000ecc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ecc4:	00840074 	movhi	r2,4097
1000ecc8:	108b9a04 	addi	r2,r2,11880
1000eccc:	10800017 	ldw	r2,0(r2)
1000ecd0:	10000526 	beq	r2,zero,1000ece8 <alt_get_errno+0x34>
1000ecd4:	00840074 	movhi	r2,4097
1000ecd8:	108b9a04 	addi	r2,r2,11880
1000ecdc:	10800017 	ldw	r2,0(r2)
1000ece0:	103ee83a 	callr	r2
1000ece4:	00000206 	br	1000ecf0 <alt_get_errno+0x3c>
1000ece8:	00840074 	movhi	r2,4097
1000ecec:	10926f04 	addi	r2,r2,18876
}
1000ecf0:	e037883a 	mov	sp,fp
1000ecf4:	dfc00117 	ldw	ra,4(sp)
1000ecf8:	df000017 	ldw	fp,0(sp)
1000ecfc:	dec00204 	addi	sp,sp,8
1000ed00:	f800283a 	ret

1000ed04 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000ed04:	defff904 	addi	sp,sp,-28
1000ed08:	dfc00615 	stw	ra,24(sp)
1000ed0c:	df000515 	stw	fp,20(sp)
1000ed10:	df000504 	addi	fp,sp,20
1000ed14:	e13ffd15 	stw	r4,-12(fp)
1000ed18:	e17ffe15 	stw	r5,-8(fp)
1000ed1c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000ed20:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ed24:	e0bffd17 	ldw	r2,-12(fp)
1000ed28:	10000816 	blt	r2,zero,1000ed4c <lseek+0x48>
1000ed2c:	e13ffd17 	ldw	r4,-12(fp)
1000ed30:	01400304 	movi	r5,12
1000ed34:	0002b140 	call	10002b14 <__mulsi3>
1000ed38:	1007883a 	mov	r3,r2
1000ed3c:	00840074 	movhi	r2,4097
1000ed40:	10871704 	addi	r2,r2,7260
1000ed44:	1885883a 	add	r2,r3,r2
1000ed48:	00000106 	br	1000ed50 <lseek+0x4c>
1000ed4c:	0005883a 	mov	r2,zero
1000ed50:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000ed54:	e0bffc17 	ldw	r2,-16(fp)
1000ed58:	10001026 	beq	r2,zero,1000ed9c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000ed5c:	e0bffc17 	ldw	r2,-16(fp)
1000ed60:	10800017 	ldw	r2,0(r2)
1000ed64:	10800717 	ldw	r2,28(r2)
1000ed68:	10000926 	beq	r2,zero,1000ed90 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000ed6c:	e0bffc17 	ldw	r2,-16(fp)
1000ed70:	10800017 	ldw	r2,0(r2)
1000ed74:	10800717 	ldw	r2,28(r2)
1000ed78:	e13ffc17 	ldw	r4,-16(fp)
1000ed7c:	e17ffe17 	ldw	r5,-8(fp)
1000ed80:	e1bfff17 	ldw	r6,-4(fp)
1000ed84:	103ee83a 	callr	r2
1000ed88:	e0bffb15 	stw	r2,-20(fp)
1000ed8c:	00000506 	br	1000eda4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000ed90:	00bfde84 	movi	r2,-134
1000ed94:	e0bffb15 	stw	r2,-20(fp)
1000ed98:	00000206 	br	1000eda4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000ed9c:	00bfebc4 	movi	r2,-81
1000eda0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000eda4:	e0bffb17 	ldw	r2,-20(fp)
1000eda8:	1000070e 	bge	r2,zero,1000edc8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000edac:	000ecb40 	call	1000ecb4 <alt_get_errno>
1000edb0:	1007883a 	mov	r3,r2
1000edb4:	e0bffb17 	ldw	r2,-20(fp)
1000edb8:	0085c83a 	sub	r2,zero,r2
1000edbc:	18800015 	stw	r2,0(r3)
    rc = -1;
1000edc0:	00bfffc4 	movi	r2,-1
1000edc4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000edc8:	e0bffb17 	ldw	r2,-20(fp)
}
1000edcc:	e037883a 	mov	sp,fp
1000edd0:	dfc00117 	ldw	ra,4(sp)
1000edd4:	df000017 	ldw	fp,0(sp)
1000edd8:	dec00204 	addi	sp,sp,8
1000eddc:	f800283a 	ret

1000ede0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000ede0:	defffd04 	addi	sp,sp,-12
1000ede4:	dfc00215 	stw	ra,8(sp)
1000ede8:	df000115 	stw	fp,4(sp)
1000edec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000edf0:	0009883a 	mov	r4,zero
1000edf4:	000f2a40 	call	1000f2a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000edf8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000edfc:	000f2d80 	call	1000f2d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000ee00:	01040074 	movhi	r4,4097
1000ee04:	2104da04 	addi	r4,r4,4968
1000ee08:	01440074 	movhi	r5,4097
1000ee0c:	2944da04 	addi	r5,r5,4968
1000ee10:	01840074 	movhi	r6,4097
1000ee14:	3184da04 	addi	r6,r6,4968
1000ee18:	00104400 	call	10010440 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000ee1c:	000ffbc0 	call	1000ffbc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000ee20:	01040074 	movhi	r4,4097
1000ee24:	21000604 	addi	r4,r4,24
1000ee28:	0010c2c0 	call	10010c2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000ee2c:	d126e117 	ldw	r4,-25724(gp)
1000ee30:	d0e6e217 	ldw	r3,-25720(gp)
1000ee34:	d0a6e317 	ldw	r2,-25716(gp)
1000ee38:	180b883a 	mov	r5,r3
1000ee3c:	100d883a 	mov	r6,r2
1000ee40:	00002680 	call	10000268 <main>
1000ee44:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000ee48:	01000044 	movi	r4,1
1000ee4c:	000e8c80 	call	1000e8c8 <close>
  exit (result);
1000ee50:	e13fff17 	ldw	r4,-4(fp)
1000ee54:	0010c400 	call	10010c40 <exit>

1000ee58 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ee58:	defffe04 	addi	sp,sp,-8
1000ee5c:	df000115 	stw	fp,4(sp)
1000ee60:	df000104 	addi	fp,sp,4
1000ee64:	e13fff15 	stw	r4,-4(fp)
}
1000ee68:	e037883a 	mov	sp,fp
1000ee6c:	df000017 	ldw	fp,0(sp)
1000ee70:	dec00104 	addi	sp,sp,4
1000ee74:	f800283a 	ret

1000ee78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000ee78:	defffe04 	addi	sp,sp,-8
1000ee7c:	df000115 	stw	fp,4(sp)
1000ee80:	df000104 	addi	fp,sp,4
1000ee84:	e13fff15 	stw	r4,-4(fp)
}
1000ee88:	e037883a 	mov	sp,fp
1000ee8c:	df000017 	ldw	fp,0(sp)
1000ee90:	dec00104 	addi	sp,sp,4
1000ee94:	f800283a 	ret

1000ee98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ee98:	defffe04 	addi	sp,sp,-8
1000ee9c:	dfc00115 	stw	ra,4(sp)
1000eea0:	df000015 	stw	fp,0(sp)
1000eea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eea8:	00840074 	movhi	r2,4097
1000eeac:	108b9a04 	addi	r2,r2,11880
1000eeb0:	10800017 	ldw	r2,0(r2)
1000eeb4:	10000526 	beq	r2,zero,1000eecc <alt_get_errno+0x34>
1000eeb8:	00840074 	movhi	r2,4097
1000eebc:	108b9a04 	addi	r2,r2,11880
1000eec0:	10800017 	ldw	r2,0(r2)
1000eec4:	103ee83a 	callr	r2
1000eec8:	00000206 	br	1000eed4 <alt_get_errno+0x3c>
1000eecc:	00840074 	movhi	r2,4097
1000eed0:	10926f04 	addi	r2,r2,18876
}
1000eed4:	e037883a 	mov	sp,fp
1000eed8:	dfc00117 	ldw	ra,4(sp)
1000eedc:	df000017 	ldw	fp,0(sp)
1000eee0:	dec00204 	addi	sp,sp,8
1000eee4:	f800283a 	ret

1000eee8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000eee8:	defff904 	addi	sp,sp,-28
1000eeec:	dfc00615 	stw	ra,24(sp)
1000eef0:	df000515 	stw	fp,20(sp)
1000eef4:	df000504 	addi	fp,sp,20
1000eef8:	e13ffd15 	stw	r4,-12(fp)
1000eefc:	e17ffe15 	stw	r5,-8(fp)
1000ef00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ef04:	e0bffd17 	ldw	r2,-12(fp)
1000ef08:	10000816 	blt	r2,zero,1000ef2c <read+0x44>
1000ef0c:	e13ffd17 	ldw	r4,-12(fp)
1000ef10:	01400304 	movi	r5,12
1000ef14:	0002b140 	call	10002b14 <__mulsi3>
1000ef18:	1007883a 	mov	r3,r2
1000ef1c:	00840074 	movhi	r2,4097
1000ef20:	10871704 	addi	r2,r2,7260
1000ef24:	1885883a 	add	r2,r3,r2
1000ef28:	00000106 	br	1000ef30 <read+0x48>
1000ef2c:	0005883a 	mov	r2,zero
1000ef30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000ef34:	e0bffb17 	ldw	r2,-20(fp)
1000ef38:	10002226 	beq	r2,zero,1000efc4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000ef3c:	e0bffb17 	ldw	r2,-20(fp)
1000ef40:	10800217 	ldw	r2,8(r2)
1000ef44:	108000cc 	andi	r2,r2,3
1000ef48:	10800060 	cmpeqi	r2,r2,1
1000ef4c:	1000181e 	bne	r2,zero,1000efb0 <read+0xc8>
        (fd->dev->read))
1000ef50:	e0bffb17 	ldw	r2,-20(fp)
1000ef54:	10800017 	ldw	r2,0(r2)
1000ef58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000ef5c:	10001426 	beq	r2,zero,1000efb0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000ef60:	e0bffb17 	ldw	r2,-20(fp)
1000ef64:	10800017 	ldw	r2,0(r2)
1000ef68:	10800517 	ldw	r2,20(r2)
1000ef6c:	e0ffff17 	ldw	r3,-4(fp)
1000ef70:	e13ffb17 	ldw	r4,-20(fp)
1000ef74:	e17ffe17 	ldw	r5,-8(fp)
1000ef78:	180d883a 	mov	r6,r3
1000ef7c:	103ee83a 	callr	r2
1000ef80:	e0bffc15 	stw	r2,-16(fp)
1000ef84:	e0bffc17 	ldw	r2,-16(fp)
1000ef88:	1000070e 	bge	r2,zero,1000efa8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000ef8c:	000ee980 	call	1000ee98 <alt_get_errno>
1000ef90:	1007883a 	mov	r3,r2
1000ef94:	e0bffc17 	ldw	r2,-16(fp)
1000ef98:	0085c83a 	sub	r2,zero,r2
1000ef9c:	18800015 	stw	r2,0(r3)
          return -1;
1000efa0:	00bfffc4 	movi	r2,-1
1000efa4:	00000c06 	br	1000efd8 <read+0xf0>
        }
        return rval;
1000efa8:	e0bffc17 	ldw	r2,-16(fp)
1000efac:	00000a06 	br	1000efd8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000efb0:	000ee980 	call	1000ee98 <alt_get_errno>
1000efb4:	1007883a 	mov	r3,r2
1000efb8:	00800344 	movi	r2,13
1000efbc:	18800015 	stw	r2,0(r3)
1000efc0:	00000406 	br	1000efd4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000efc4:	000ee980 	call	1000ee98 <alt_get_errno>
1000efc8:	1007883a 	mov	r3,r2
1000efcc:	00801444 	movi	r2,81
1000efd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000efd4:	00bfffc4 	movi	r2,-1
}
1000efd8:	e037883a 	mov	sp,fp
1000efdc:	dfc00117 	ldw	ra,4(sp)
1000efe0:	df000017 	ldw	fp,0(sp)
1000efe4:	dec00204 	addi	sp,sp,8
1000efe8:	f800283a 	ret

1000efec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000efec:	defffc04 	addi	sp,sp,-16
1000eff0:	dfc00315 	stw	ra,12(sp)
1000eff4:	df000215 	stw	fp,8(sp)
1000eff8:	dc000115 	stw	r16,4(sp)
1000effc:	df000204 	addi	fp,sp,8
1000f000:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f004:	e0bffe17 	ldw	r2,-8(fp)
1000f008:	108000d0 	cmplti	r2,r2,3
1000f00c:	1000111e 	bne	r2,zero,1000f054 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f010:	04040074 	movhi	r16,4097
1000f014:	84071704 	addi	r16,r16,7260
1000f018:	e0bffe17 	ldw	r2,-8(fp)
1000f01c:	1009883a 	mov	r4,r2
1000f020:	01400304 	movi	r5,12
1000f024:	0002b140 	call	10002b14 <__mulsi3>
1000f028:	8085883a 	add	r2,r16,r2
1000f02c:	10800204 	addi	r2,r2,8
1000f030:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f034:	04040074 	movhi	r16,4097
1000f038:	84071704 	addi	r16,r16,7260
1000f03c:	e0bffe17 	ldw	r2,-8(fp)
1000f040:	1009883a 	mov	r4,r2
1000f044:	01400304 	movi	r5,12
1000f048:	0002b140 	call	10002b14 <__mulsi3>
1000f04c:	8085883a 	add	r2,r16,r2
1000f050:	10000015 	stw	zero,0(r2)
  }
}
1000f054:	e6ffff04 	addi	sp,fp,-4
1000f058:	dfc00217 	ldw	ra,8(sp)
1000f05c:	df000117 	ldw	fp,4(sp)
1000f060:	dc000017 	ldw	r16,0(sp)
1000f064:	dec00304 	addi	sp,sp,12
1000f068:	f800283a 	ret

1000f06c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f06c:	defff904 	addi	sp,sp,-28
1000f070:	df000615 	stw	fp,24(sp)
1000f074:	df000604 	addi	fp,sp,24
1000f078:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f07c:	0005303a 	rdctl	r2,status
1000f080:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f084:	e0fffc17 	ldw	r3,-16(fp)
1000f088:	00bfff84 	movi	r2,-2
1000f08c:	1884703a 	and	r2,r3,r2
1000f090:	1001703a 	wrctl	status,r2
  
  return context;
1000f094:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f098:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f09c:	d0a00c17 	ldw	r2,-32720(gp)
1000f0a0:	10c000c4 	addi	r3,r2,3
1000f0a4:	00bfff04 	movi	r2,-4
1000f0a8:	1884703a 	and	r2,r3,r2
1000f0ac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f0b0:	d0e00c17 	ldw	r3,-32720(gp)
1000f0b4:	e0bfff17 	ldw	r2,-4(fp)
1000f0b8:	1887883a 	add	r3,r3,r2
1000f0bc:	00860034 	movhi	r2,6144
1000f0c0:	10800004 	addi	r2,r2,0
1000f0c4:	10c0062e 	bgeu	r2,r3,1000f0e0 <sbrk+0x74>
1000f0c8:	e0bffa17 	ldw	r2,-24(fp)
1000f0cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f0d0:	e0bffd17 	ldw	r2,-12(fp)
1000f0d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f0d8:	00bfffc4 	movi	r2,-1
1000f0dc:	00000b06 	br	1000f10c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f0e0:	d0a00c17 	ldw	r2,-32720(gp)
1000f0e4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f0e8:	d0e00c17 	ldw	r3,-32720(gp)
1000f0ec:	e0bfff17 	ldw	r2,-4(fp)
1000f0f0:	1885883a 	add	r2,r3,r2
1000f0f4:	d0a00c15 	stw	r2,-32720(gp)
1000f0f8:	e0bffa17 	ldw	r2,-24(fp)
1000f0fc:	e0bffe15 	stw	r2,-8(fp)
1000f100:	e0bffe17 	ldw	r2,-8(fp)
1000f104:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f108:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f10c:	e037883a 	mov	sp,fp
1000f110:	df000017 	ldw	fp,0(sp)
1000f114:	dec00104 	addi	sp,sp,4
1000f118:	f800283a 	ret

1000f11c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f11c:	defffe04 	addi	sp,sp,-8
1000f120:	dfc00115 	stw	ra,4(sp)
1000f124:	df000015 	stw	fp,0(sp)
1000f128:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f12c:	00840074 	movhi	r2,4097
1000f130:	108b9a04 	addi	r2,r2,11880
1000f134:	10800017 	ldw	r2,0(r2)
1000f138:	10000526 	beq	r2,zero,1000f150 <alt_get_errno+0x34>
1000f13c:	00840074 	movhi	r2,4097
1000f140:	108b9a04 	addi	r2,r2,11880
1000f144:	10800017 	ldw	r2,0(r2)
1000f148:	103ee83a 	callr	r2
1000f14c:	00000206 	br	1000f158 <alt_get_errno+0x3c>
1000f150:	00840074 	movhi	r2,4097
1000f154:	10926f04 	addi	r2,r2,18876
}
1000f158:	e037883a 	mov	sp,fp
1000f15c:	dfc00117 	ldw	ra,4(sp)
1000f160:	df000017 	ldw	fp,0(sp)
1000f164:	dec00204 	addi	sp,sp,8
1000f168:	f800283a 	ret

1000f16c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f16c:	defff904 	addi	sp,sp,-28
1000f170:	dfc00615 	stw	ra,24(sp)
1000f174:	df000515 	stw	fp,20(sp)
1000f178:	df000504 	addi	fp,sp,20
1000f17c:	e13ffd15 	stw	r4,-12(fp)
1000f180:	e17ffe15 	stw	r5,-8(fp)
1000f184:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f188:	e0bffd17 	ldw	r2,-12(fp)
1000f18c:	10000816 	blt	r2,zero,1000f1b0 <write+0x44>
1000f190:	e13ffd17 	ldw	r4,-12(fp)
1000f194:	01400304 	movi	r5,12
1000f198:	0002b140 	call	10002b14 <__mulsi3>
1000f19c:	1007883a 	mov	r3,r2
1000f1a0:	00840074 	movhi	r2,4097
1000f1a4:	10871704 	addi	r2,r2,7260
1000f1a8:	1885883a 	add	r2,r3,r2
1000f1ac:	00000106 	br	1000f1b4 <write+0x48>
1000f1b0:	0005883a 	mov	r2,zero
1000f1b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f1b8:	e0bffb17 	ldw	r2,-20(fp)
1000f1bc:	10002126 	beq	r2,zero,1000f244 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f1c0:	e0bffb17 	ldw	r2,-20(fp)
1000f1c4:	10800217 	ldw	r2,8(r2)
1000f1c8:	108000cc 	andi	r2,r2,3
1000f1cc:	10001826 	beq	r2,zero,1000f230 <write+0xc4>
1000f1d0:	e0bffb17 	ldw	r2,-20(fp)
1000f1d4:	10800017 	ldw	r2,0(r2)
1000f1d8:	10800617 	ldw	r2,24(r2)
1000f1dc:	10001426 	beq	r2,zero,1000f230 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f1e0:	e0bffb17 	ldw	r2,-20(fp)
1000f1e4:	10800017 	ldw	r2,0(r2)
1000f1e8:	10800617 	ldw	r2,24(r2)
1000f1ec:	e0ffff17 	ldw	r3,-4(fp)
1000f1f0:	e13ffb17 	ldw	r4,-20(fp)
1000f1f4:	e17ffe17 	ldw	r5,-8(fp)
1000f1f8:	180d883a 	mov	r6,r3
1000f1fc:	103ee83a 	callr	r2
1000f200:	e0bffc15 	stw	r2,-16(fp)
1000f204:	e0bffc17 	ldw	r2,-16(fp)
1000f208:	1000070e 	bge	r2,zero,1000f228 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f20c:	000f11c0 	call	1000f11c <alt_get_errno>
1000f210:	1007883a 	mov	r3,r2
1000f214:	e0bffc17 	ldw	r2,-16(fp)
1000f218:	0085c83a 	sub	r2,zero,r2
1000f21c:	18800015 	stw	r2,0(r3)
        return -1;
1000f220:	00bfffc4 	movi	r2,-1
1000f224:	00000c06 	br	1000f258 <write+0xec>
      }
      return rval;
1000f228:	e0bffc17 	ldw	r2,-16(fp)
1000f22c:	00000a06 	br	1000f258 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f230:	000f11c0 	call	1000f11c <alt_get_errno>
1000f234:	1007883a 	mov	r3,r2
1000f238:	00800344 	movi	r2,13
1000f23c:	18800015 	stw	r2,0(r3)
1000f240:	00000406 	br	1000f254 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f244:	000f11c0 	call	1000f11c <alt_get_errno>
1000f248:	1007883a 	mov	r3,r2
1000f24c:	00801444 	movi	r2,81
1000f250:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f254:	00bfffc4 	movi	r2,-1
}
1000f258:	e037883a 	mov	sp,fp
1000f25c:	dfc00117 	ldw	ra,4(sp)
1000f260:	df000017 	ldw	fp,0(sp)
1000f264:	dec00204 	addi	sp,sp,8
1000f268:	f800283a 	ret

1000f26c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f26c:	defffd04 	addi	sp,sp,-12
1000f270:	dfc00215 	stw	ra,8(sp)
1000f274:	df000115 	stw	fp,4(sp)
1000f278:	df000104 	addi	fp,sp,4
1000f27c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f280:	e13fff17 	ldw	r4,-4(fp)
1000f284:	01440074 	movhi	r5,4097
1000f288:	294b9704 	addi	r5,r5,11868
1000f28c:	000ff180 	call	1000ff18 <alt_dev_llist_insert>
}
1000f290:	e037883a 	mov	sp,fp
1000f294:	dfc00117 	ldw	ra,4(sp)
1000f298:	df000017 	ldw	fp,0(sp)
1000f29c:	dec00204 	addi	sp,sp,8
1000f2a0:	f800283a 	ret

1000f2a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f2a4:	defffd04 	addi	sp,sp,-12
1000f2a8:	dfc00215 	stw	ra,8(sp)
1000f2ac:	df000115 	stw	fp,4(sp)
1000f2b0:	df000104 	addi	fp,sp,4
1000f2b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f2b8:	00108f80 	call	100108f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f2bc:	00800044 	movi	r2,1
1000f2c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f2c4:	e037883a 	mov	sp,fp
1000f2c8:	dfc00117 	ldw	ra,4(sp)
1000f2cc:	df000017 	ldw	fp,0(sp)
1000f2d0:	dec00204 	addi	sp,sp,8
1000f2d4:	f800283a 	ret

1000f2d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f2d8:	defffe04 	addi	sp,sp,-8
1000f2dc:	dfc00115 	stw	ra,4(sp)
1000f2e0:	df000015 	stw	fp,0(sp)
1000f2e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f2e8:	01040074 	movhi	r4,4097
1000f2ec:	21078104 	addi	r4,r4,7684
1000f2f0:	000b883a 	mov	r5,zero
1000f2f4:	01800144 	movi	r6,5
1000f2f8:	000f4840 	call	1000f484 <altera_avalon_jtag_uart_init>
1000f2fc:	01040074 	movhi	r4,4097
1000f300:	21077704 	addi	r4,r4,7644
1000f304:	000f26c0 	call	1000f26c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f308:	0001883a 	nop
}
1000f30c:	e037883a 	mov	sp,fp
1000f310:	dfc00117 	ldw	ra,4(sp)
1000f314:	df000017 	ldw	fp,0(sp)
1000f318:	dec00204 	addi	sp,sp,8
1000f31c:	f800283a 	ret

1000f320 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f320:	defffa04 	addi	sp,sp,-24
1000f324:	dfc00515 	stw	ra,20(sp)
1000f328:	df000415 	stw	fp,16(sp)
1000f32c:	df000404 	addi	fp,sp,16
1000f330:	e13ffd15 	stw	r4,-12(fp)
1000f334:	e17ffe15 	stw	r5,-8(fp)
1000f338:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f33c:	e0bffd17 	ldw	r2,-12(fp)
1000f340:	10800017 	ldw	r2,0(r2)
1000f344:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f348:	e0bffc17 	ldw	r2,-16(fp)
1000f34c:	10c00a04 	addi	r3,r2,40
1000f350:	e0bffd17 	ldw	r2,-12(fp)
1000f354:	10800217 	ldw	r2,8(r2)
1000f358:	1809883a 	mov	r4,r3
1000f35c:	e17ffe17 	ldw	r5,-8(fp)
1000f360:	e1bfff17 	ldw	r6,-4(fp)
1000f364:	100f883a 	mov	r7,r2
1000f368:	000f9480 	call	1000f948 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f36c:	e037883a 	mov	sp,fp
1000f370:	dfc00117 	ldw	ra,4(sp)
1000f374:	df000017 	ldw	fp,0(sp)
1000f378:	dec00204 	addi	sp,sp,8
1000f37c:	f800283a 	ret

1000f380 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f380:	defffa04 	addi	sp,sp,-24
1000f384:	dfc00515 	stw	ra,20(sp)
1000f388:	df000415 	stw	fp,16(sp)
1000f38c:	df000404 	addi	fp,sp,16
1000f390:	e13ffd15 	stw	r4,-12(fp)
1000f394:	e17ffe15 	stw	r5,-8(fp)
1000f398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f39c:	e0bffd17 	ldw	r2,-12(fp)
1000f3a0:	10800017 	ldw	r2,0(r2)
1000f3a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f3a8:	e0bffc17 	ldw	r2,-16(fp)
1000f3ac:	10c00a04 	addi	r3,r2,40
1000f3b0:	e0bffd17 	ldw	r2,-12(fp)
1000f3b4:	10800217 	ldw	r2,8(r2)
1000f3b8:	1809883a 	mov	r4,r3
1000f3bc:	e17ffe17 	ldw	r5,-8(fp)
1000f3c0:	e1bfff17 	ldw	r6,-4(fp)
1000f3c4:	100f883a 	mov	r7,r2
1000f3c8:	000fb540 	call	1000fb54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f3cc:	e037883a 	mov	sp,fp
1000f3d0:	dfc00117 	ldw	ra,4(sp)
1000f3d4:	df000017 	ldw	fp,0(sp)
1000f3d8:	dec00204 	addi	sp,sp,8
1000f3dc:	f800283a 	ret

1000f3e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f3e0:	defffc04 	addi	sp,sp,-16
1000f3e4:	dfc00315 	stw	ra,12(sp)
1000f3e8:	df000215 	stw	fp,8(sp)
1000f3ec:	df000204 	addi	fp,sp,8
1000f3f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f3f4:	e0bfff17 	ldw	r2,-4(fp)
1000f3f8:	10800017 	ldw	r2,0(r2)
1000f3fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f400:	e0bffe17 	ldw	r2,-8(fp)
1000f404:	10c00a04 	addi	r3,r2,40
1000f408:	e0bfff17 	ldw	r2,-4(fp)
1000f40c:	10800217 	ldw	r2,8(r2)
1000f410:	1809883a 	mov	r4,r3
1000f414:	100b883a 	mov	r5,r2
1000f418:	000f7f40 	call	1000f7f4 <altera_avalon_jtag_uart_close>
}
1000f41c:	e037883a 	mov	sp,fp
1000f420:	dfc00117 	ldw	ra,4(sp)
1000f424:	df000017 	ldw	fp,0(sp)
1000f428:	dec00204 	addi	sp,sp,8
1000f42c:	f800283a 	ret

1000f430 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f430:	defffa04 	addi	sp,sp,-24
1000f434:	dfc00515 	stw	ra,20(sp)
1000f438:	df000415 	stw	fp,16(sp)
1000f43c:	df000404 	addi	fp,sp,16
1000f440:	e13ffd15 	stw	r4,-12(fp)
1000f444:	e17ffe15 	stw	r5,-8(fp)
1000f448:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f44c:	e0bffd17 	ldw	r2,-12(fp)
1000f450:	10800017 	ldw	r2,0(r2)
1000f454:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f458:	e0bffc17 	ldw	r2,-16(fp)
1000f45c:	10800a04 	addi	r2,r2,40
1000f460:	1009883a 	mov	r4,r2
1000f464:	e17ffe17 	ldw	r5,-8(fp)
1000f468:	e1bfff17 	ldw	r6,-4(fp)
1000f46c:	000f85c0 	call	1000f85c <altera_avalon_jtag_uart_ioctl>
}
1000f470:	e037883a 	mov	sp,fp
1000f474:	dfc00117 	ldw	ra,4(sp)
1000f478:	df000017 	ldw	fp,0(sp)
1000f47c:	dec00204 	addi	sp,sp,8
1000f480:	f800283a 	ret

1000f484 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f484:	defffa04 	addi	sp,sp,-24
1000f488:	dfc00515 	stw	ra,20(sp)
1000f48c:	df000415 	stw	fp,16(sp)
1000f490:	df000404 	addi	fp,sp,16
1000f494:	e13ffd15 	stw	r4,-12(fp)
1000f498:	e17ffe15 	stw	r5,-8(fp)
1000f49c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f4a0:	e0bffd17 	ldw	r2,-12(fp)
1000f4a4:	00c00044 	movi	r3,1
1000f4a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f4ac:	e0bffd17 	ldw	r2,-12(fp)
1000f4b0:	10800017 	ldw	r2,0(r2)
1000f4b4:	10800104 	addi	r2,r2,4
1000f4b8:	1007883a 	mov	r3,r2
1000f4bc:	e0bffd17 	ldw	r2,-12(fp)
1000f4c0:	10800817 	ldw	r2,32(r2)
1000f4c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f4c8:	e0fffe17 	ldw	r3,-8(fp)
1000f4cc:	e0bfff17 	ldw	r2,-4(fp)
1000f4d0:	d8000015 	stw	zero,0(sp)
1000f4d4:	1809883a 	mov	r4,r3
1000f4d8:	100b883a 	mov	r5,r2
1000f4dc:	01840074 	movhi	r6,4097
1000f4e0:	31bd5204 	addi	r6,r6,-2744
1000f4e4:	e1fffd17 	ldw	r7,-12(fp)
1000f4e8:	00100900 	call	10010090 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f4ec:	e0bffd17 	ldw	r2,-12(fp)
1000f4f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f4f4:	e0bffd17 	ldw	r2,-12(fp)
1000f4f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f4fc:	00840074 	movhi	r2,4097
1000f500:	10927404 	addi	r2,r2,18896
1000f504:	10800017 	ldw	r2,0(r2)
1000f508:	1809883a 	mov	r4,r3
1000f50c:	100b883a 	mov	r5,r2
1000f510:	01840074 	movhi	r6,4097
1000f514:	31bdd304 	addi	r6,r6,-2228
1000f518:	e1fffd17 	ldw	r7,-12(fp)
1000f51c:	000fd6c0 	call	1000fd6c <alt_alarm_start>
1000f520:	1000040e 	bge	r2,zero,1000f534 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f524:	e0fffd17 	ldw	r3,-12(fp)
1000f528:	00a00034 	movhi	r2,32768
1000f52c:	10bfffc4 	addi	r2,r2,-1
1000f530:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f534:	e037883a 	mov	sp,fp
1000f538:	dfc00117 	ldw	ra,4(sp)
1000f53c:	df000017 	ldw	fp,0(sp)
1000f540:	dec00204 	addi	sp,sp,8
1000f544:	f800283a 	ret

1000f548 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f548:	defff804 	addi	sp,sp,-32
1000f54c:	df000715 	stw	fp,28(sp)
1000f550:	df000704 	addi	fp,sp,28
1000f554:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f558:	e0bfff17 	ldw	r2,-4(fp)
1000f55c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f560:	e0bffb17 	ldw	r2,-20(fp)
1000f564:	10800017 	ldw	r2,0(r2)
1000f568:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f56c:	e0bffc17 	ldw	r2,-16(fp)
1000f570:	10800104 	addi	r2,r2,4
1000f574:	10800037 	ldwio	r2,0(r2)
1000f578:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f57c:	e0bffd17 	ldw	r2,-12(fp)
1000f580:	1080c00c 	andi	r2,r2,768
1000f584:	1000011e 	bne	r2,zero,1000f58c <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f588:	00006c06 	br	1000f73c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f58c:	e0bffd17 	ldw	r2,-12(fp)
1000f590:	1080400c 	andi	r2,r2,256
1000f594:	10003426 	beq	r2,zero,1000f668 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f598:	00800074 	movhi	r2,1
1000f59c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f5a0:	e0bffb17 	ldw	r2,-20(fp)
1000f5a4:	10800a17 	ldw	r2,40(r2)
1000f5a8:	10800044 	addi	r2,r2,1
1000f5ac:	1081ffcc 	andi	r2,r2,2047
1000f5b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f5b4:	e0bffb17 	ldw	r2,-20(fp)
1000f5b8:	10c00b17 	ldw	r3,44(r2)
1000f5bc:	e0bffe17 	ldw	r2,-8(fp)
1000f5c0:	1880011e 	bne	r3,r2,1000f5c8 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f5c4:	00001606 	br	1000f620 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f5c8:	e0bffc17 	ldw	r2,-16(fp)
1000f5cc:	10800037 	ldwio	r2,0(r2)
1000f5d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f5d4:	e0bff917 	ldw	r2,-28(fp)
1000f5d8:	10a0000c 	andi	r2,r2,32768
1000f5dc:	1000011e 	bne	r2,zero,1000f5e4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f5e0:	00000f06 	br	1000f620 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f5e4:	e0bffb17 	ldw	r2,-20(fp)
1000f5e8:	10800a17 	ldw	r2,40(r2)
1000f5ec:	e0fff917 	ldw	r3,-28(fp)
1000f5f0:	1809883a 	mov	r4,r3
1000f5f4:	e0fffb17 	ldw	r3,-20(fp)
1000f5f8:	1885883a 	add	r2,r3,r2
1000f5fc:	10800e04 	addi	r2,r2,56
1000f600:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f604:	e0bffb17 	ldw	r2,-20(fp)
1000f608:	10800a17 	ldw	r2,40(r2)
1000f60c:	10800044 	addi	r2,r2,1
1000f610:	10c1ffcc 	andi	r3,r2,2047
1000f614:	e0bffb17 	ldw	r2,-20(fp)
1000f618:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f61c:	003fe006 	br	1000f5a0 <__alt_data_end+0xf800f5a0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f620:	e0bff917 	ldw	r2,-28(fp)
1000f624:	10bfffec 	andhi	r2,r2,65535
1000f628:	10000f26 	beq	r2,zero,1000f668 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f62c:	e0bffb17 	ldw	r2,-20(fp)
1000f630:	10c00817 	ldw	r3,32(r2)
1000f634:	00bfff84 	movi	r2,-2
1000f638:	1886703a 	and	r3,r3,r2
1000f63c:	e0bffb17 	ldw	r2,-20(fp)
1000f640:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f644:	e0bffc17 	ldw	r2,-16(fp)
1000f648:	10800104 	addi	r2,r2,4
1000f64c:	1007883a 	mov	r3,r2
1000f650:	e0bffb17 	ldw	r2,-20(fp)
1000f654:	10800817 	ldw	r2,32(r2)
1000f658:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f65c:	e0bffc17 	ldw	r2,-16(fp)
1000f660:	10800104 	addi	r2,r2,4
1000f664:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f668:	e0bffd17 	ldw	r2,-12(fp)
1000f66c:	1080800c 	andi	r2,r2,512
1000f670:	10003126 	beq	r2,zero,1000f738 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f674:	e0bffd17 	ldw	r2,-12(fp)
1000f678:	1004d43a 	srli	r2,r2,16
1000f67c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f680:	00001406 	br	1000f6d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f684:	e0bffc17 	ldw	r2,-16(fp)
1000f688:	e0fffb17 	ldw	r3,-20(fp)
1000f68c:	18c00d17 	ldw	r3,52(r3)
1000f690:	e13ffb17 	ldw	r4,-20(fp)
1000f694:	20c7883a 	add	r3,r4,r3
1000f698:	18c20e04 	addi	r3,r3,2104
1000f69c:	18c00003 	ldbu	r3,0(r3)
1000f6a0:	18c03fcc 	andi	r3,r3,255
1000f6a4:	18c0201c 	xori	r3,r3,128
1000f6a8:	18ffe004 	addi	r3,r3,-128
1000f6ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f6b0:	e0bffb17 	ldw	r2,-20(fp)
1000f6b4:	10800d17 	ldw	r2,52(r2)
1000f6b8:	10800044 	addi	r2,r2,1
1000f6bc:	10c1ffcc 	andi	r3,r2,2047
1000f6c0:	e0bffb17 	ldw	r2,-20(fp)
1000f6c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f6c8:	e0bffa17 	ldw	r2,-24(fp)
1000f6cc:	10bfffc4 	addi	r2,r2,-1
1000f6d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f6d4:	e0bffa17 	ldw	r2,-24(fp)
1000f6d8:	10000526 	beq	r2,zero,1000f6f0 <altera_avalon_jtag_uart_irq+0x1a8>
1000f6dc:	e0bffb17 	ldw	r2,-20(fp)
1000f6e0:	10c00d17 	ldw	r3,52(r2)
1000f6e4:	e0bffb17 	ldw	r2,-20(fp)
1000f6e8:	10800c17 	ldw	r2,48(r2)
1000f6ec:	18bfe51e 	bne	r3,r2,1000f684 <__alt_data_end+0xf800f684>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f6f0:	e0bffa17 	ldw	r2,-24(fp)
1000f6f4:	10001026 	beq	r2,zero,1000f738 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f6f8:	e0bffb17 	ldw	r2,-20(fp)
1000f6fc:	10c00817 	ldw	r3,32(r2)
1000f700:	00bfff44 	movi	r2,-3
1000f704:	1886703a 	and	r3,r3,r2
1000f708:	e0bffb17 	ldw	r2,-20(fp)
1000f70c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f710:	e0bffb17 	ldw	r2,-20(fp)
1000f714:	10800017 	ldw	r2,0(r2)
1000f718:	10800104 	addi	r2,r2,4
1000f71c:	1007883a 	mov	r3,r2
1000f720:	e0bffb17 	ldw	r2,-20(fp)
1000f724:	10800817 	ldw	r2,32(r2)
1000f728:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f72c:	e0bffc17 	ldw	r2,-16(fp)
1000f730:	10800104 	addi	r2,r2,4
1000f734:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f738:	003f8c06 	br	1000f56c <__alt_data_end+0xf800f56c>
}
1000f73c:	e037883a 	mov	sp,fp
1000f740:	df000017 	ldw	fp,0(sp)
1000f744:	dec00104 	addi	sp,sp,4
1000f748:	f800283a 	ret

1000f74c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f74c:	defff804 	addi	sp,sp,-32
1000f750:	df000715 	stw	fp,28(sp)
1000f754:	df000704 	addi	fp,sp,28
1000f758:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f75c:	e0bffb17 	ldw	r2,-20(fp)
1000f760:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f764:	e0bff917 	ldw	r2,-28(fp)
1000f768:	10800017 	ldw	r2,0(r2)
1000f76c:	10800104 	addi	r2,r2,4
1000f770:	10800037 	ldwio	r2,0(r2)
1000f774:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f778:	e0bffa17 	ldw	r2,-24(fp)
1000f77c:	1081000c 	andi	r2,r2,1024
1000f780:	10000b26 	beq	r2,zero,1000f7b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f784:	e0bff917 	ldw	r2,-28(fp)
1000f788:	10800017 	ldw	r2,0(r2)
1000f78c:	10800104 	addi	r2,r2,4
1000f790:	1007883a 	mov	r3,r2
1000f794:	e0bff917 	ldw	r2,-28(fp)
1000f798:	10800817 	ldw	r2,32(r2)
1000f79c:	10810014 	ori	r2,r2,1024
1000f7a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f7a4:	e0bff917 	ldw	r2,-28(fp)
1000f7a8:	10000915 	stw	zero,36(r2)
1000f7ac:	00000a06 	br	1000f7d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f7b0:	e0bff917 	ldw	r2,-28(fp)
1000f7b4:	10c00917 	ldw	r3,36(r2)
1000f7b8:	00a00034 	movhi	r2,32768
1000f7bc:	10bfff04 	addi	r2,r2,-4
1000f7c0:	10c00536 	bltu	r2,r3,1000f7d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f7c4:	e0bff917 	ldw	r2,-28(fp)
1000f7c8:	10800917 	ldw	r2,36(r2)
1000f7cc:	10c00044 	addi	r3,r2,1
1000f7d0:	e0bff917 	ldw	r2,-28(fp)
1000f7d4:	10c00915 	stw	r3,36(r2)
1000f7d8:	00840074 	movhi	r2,4097
1000f7dc:	10927404 	addi	r2,r2,18896
1000f7e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f7e4:	e037883a 	mov	sp,fp
1000f7e8:	df000017 	ldw	fp,0(sp)
1000f7ec:	dec00104 	addi	sp,sp,4
1000f7f0:	f800283a 	ret

1000f7f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f7f4:	defffd04 	addi	sp,sp,-12
1000f7f8:	df000215 	stw	fp,8(sp)
1000f7fc:	df000204 	addi	fp,sp,8
1000f800:	e13ffe15 	stw	r4,-8(fp)
1000f804:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f808:	00000506 	br	1000f820 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f80c:	e0bfff17 	ldw	r2,-4(fp)
1000f810:	1090000c 	andi	r2,r2,16384
1000f814:	10000226 	beq	r2,zero,1000f820 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f818:	00bffd44 	movi	r2,-11
1000f81c:	00000b06 	br	1000f84c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f820:	e0bffe17 	ldw	r2,-8(fp)
1000f824:	10c00d17 	ldw	r3,52(r2)
1000f828:	e0bffe17 	ldw	r2,-8(fp)
1000f82c:	10800c17 	ldw	r2,48(r2)
1000f830:	18800526 	beq	r3,r2,1000f848 <altera_avalon_jtag_uart_close+0x54>
1000f834:	e0bffe17 	ldw	r2,-8(fp)
1000f838:	10c00917 	ldw	r3,36(r2)
1000f83c:	e0bffe17 	ldw	r2,-8(fp)
1000f840:	10800117 	ldw	r2,4(r2)
1000f844:	18bff136 	bltu	r3,r2,1000f80c <__alt_data_end+0xf800f80c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f848:	0005883a 	mov	r2,zero
}
1000f84c:	e037883a 	mov	sp,fp
1000f850:	df000017 	ldw	fp,0(sp)
1000f854:	dec00104 	addi	sp,sp,4
1000f858:	f800283a 	ret

1000f85c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f85c:	defffa04 	addi	sp,sp,-24
1000f860:	df000515 	stw	fp,20(sp)
1000f864:	df000504 	addi	fp,sp,20
1000f868:	e13ffd15 	stw	r4,-12(fp)
1000f86c:	e17ffe15 	stw	r5,-8(fp)
1000f870:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f874:	00bff9c4 	movi	r2,-25
1000f878:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f87c:	e0bffe17 	ldw	r2,-8(fp)
1000f880:	10da8060 	cmpeqi	r3,r2,27137
1000f884:	1800031e 	bne	r3,zero,1000f894 <altera_avalon_jtag_uart_ioctl+0x38>
1000f888:	109a80a0 	cmpeqi	r2,r2,27138
1000f88c:	1000191e 	bne	r2,zero,1000f8f4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000f890:	00002806 	br	1000f934 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f894:	e0bffd17 	ldw	r2,-12(fp)
1000f898:	10c00117 	ldw	r3,4(r2)
1000f89c:	00a00034 	movhi	r2,32768
1000f8a0:	10bfffc4 	addi	r2,r2,-1
1000f8a4:	18801226 	beq	r3,r2,1000f8f0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000f8a8:	e0bfff17 	ldw	r2,-4(fp)
1000f8ac:	10800017 	ldw	r2,0(r2)
1000f8b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f8b4:	e0bffc17 	ldw	r2,-16(fp)
1000f8b8:	10800090 	cmplti	r2,r2,2
1000f8bc:	1000061e 	bne	r2,zero,1000f8d8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f8c0:	e0fffc17 	ldw	r3,-16(fp)
1000f8c4:	00a00034 	movhi	r2,32768
1000f8c8:	10bfffc4 	addi	r2,r2,-1
1000f8cc:	18800226 	beq	r3,r2,1000f8d8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f8d0:	e0bffc17 	ldw	r2,-16(fp)
1000f8d4:	00000206 	br	1000f8e0 <altera_avalon_jtag_uart_ioctl+0x84>
1000f8d8:	00a00034 	movhi	r2,32768
1000f8dc:	10bfff84 	addi	r2,r2,-2
1000f8e0:	e0fffd17 	ldw	r3,-12(fp)
1000f8e4:	18800115 	stw	r2,4(r3)
      rc = 0;
1000f8e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f8ec:	00001106 	br	1000f934 <altera_avalon_jtag_uart_ioctl+0xd8>
1000f8f0:	00001006 	br	1000f934 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000f8f4:	e0bffd17 	ldw	r2,-12(fp)
1000f8f8:	10c00117 	ldw	r3,4(r2)
1000f8fc:	00a00034 	movhi	r2,32768
1000f900:	10bfffc4 	addi	r2,r2,-1
1000f904:	18800a26 	beq	r3,r2,1000f930 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000f908:	e0bffd17 	ldw	r2,-12(fp)
1000f90c:	10c00917 	ldw	r3,36(r2)
1000f910:	e0bffd17 	ldw	r2,-12(fp)
1000f914:	10800117 	ldw	r2,4(r2)
1000f918:	1885803a 	cmpltu	r2,r3,r2
1000f91c:	10c03fcc 	andi	r3,r2,255
1000f920:	e0bfff17 	ldw	r2,-4(fp)
1000f924:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000f928:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f92c:	00000006 	br	1000f930 <altera_avalon_jtag_uart_ioctl+0xd4>
1000f930:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000f934:	e0bffb17 	ldw	r2,-20(fp)
}
1000f938:	e037883a 	mov	sp,fp
1000f93c:	df000017 	ldw	fp,0(sp)
1000f940:	dec00104 	addi	sp,sp,4
1000f944:	f800283a 	ret

1000f948 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000f948:	defff304 	addi	sp,sp,-52
1000f94c:	dfc00c15 	stw	ra,48(sp)
1000f950:	df000b15 	stw	fp,44(sp)
1000f954:	df000b04 	addi	fp,sp,44
1000f958:	e13ffc15 	stw	r4,-16(fp)
1000f95c:	e17ffd15 	stw	r5,-12(fp)
1000f960:	e1bffe15 	stw	r6,-8(fp)
1000f964:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000f968:	e0bffd17 	ldw	r2,-12(fp)
1000f96c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000f970:	00004906 	br	1000fa98 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000f974:	e0bffc17 	ldw	r2,-16(fp)
1000f978:	10800a17 	ldw	r2,40(r2)
1000f97c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000f980:	e0bffc17 	ldw	r2,-16(fp)
1000f984:	10800b17 	ldw	r2,44(r2)
1000f988:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000f98c:	e0fff717 	ldw	r3,-36(fp)
1000f990:	e0bff817 	ldw	r2,-32(fp)
1000f994:	18800536 	bltu	r3,r2,1000f9ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000f998:	e0fff717 	ldw	r3,-36(fp)
1000f99c:	e0bff817 	ldw	r2,-32(fp)
1000f9a0:	1885c83a 	sub	r2,r3,r2
1000f9a4:	e0bff615 	stw	r2,-40(fp)
1000f9a8:	00000406 	br	1000f9bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000f9ac:	00c20004 	movi	r3,2048
1000f9b0:	e0bff817 	ldw	r2,-32(fp)
1000f9b4:	1885c83a 	sub	r2,r3,r2
1000f9b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000f9bc:	e0bff617 	ldw	r2,-40(fp)
1000f9c0:	1000011e 	bne	r2,zero,1000f9c8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000f9c4:	00001d06 	br	1000fa3c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000f9c8:	e0fffe17 	ldw	r3,-8(fp)
1000f9cc:	e0bff617 	ldw	r2,-40(fp)
1000f9d0:	1880022e 	bgeu	r3,r2,1000f9dc <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000f9d4:	e0bffe17 	ldw	r2,-8(fp)
1000f9d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000f9dc:	e0bff817 	ldw	r2,-32(fp)
1000f9e0:	10800e04 	addi	r2,r2,56
1000f9e4:	e0fffc17 	ldw	r3,-16(fp)
1000f9e8:	1885883a 	add	r2,r3,r2
1000f9ec:	e13ff517 	ldw	r4,-44(fp)
1000f9f0:	100b883a 	mov	r5,r2
1000f9f4:	e1bff617 	ldw	r6,-40(fp)
1000f9f8:	00097a80 	call	100097a8 <memcpy>
      ptr   += n;
1000f9fc:	e0fff517 	ldw	r3,-44(fp)
1000fa00:	e0bff617 	ldw	r2,-40(fp)
1000fa04:	1885883a 	add	r2,r3,r2
1000fa08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fa0c:	e0fffe17 	ldw	r3,-8(fp)
1000fa10:	e0bff617 	ldw	r2,-40(fp)
1000fa14:	1885c83a 	sub	r2,r3,r2
1000fa18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fa1c:	e0fff817 	ldw	r3,-32(fp)
1000fa20:	e0bff617 	ldw	r2,-40(fp)
1000fa24:	1885883a 	add	r2,r3,r2
1000fa28:	10c1ffcc 	andi	r3,r2,2047
1000fa2c:	e0bffc17 	ldw	r2,-16(fp)
1000fa30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fa34:	e0bffe17 	ldw	r2,-8(fp)
1000fa38:	00bfce16 	blt	zero,r2,1000f974 <__alt_data_end+0xf800f974>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fa3c:	e0fff517 	ldw	r3,-44(fp)
1000fa40:	e0bffd17 	ldw	r2,-12(fp)
1000fa44:	18800126 	beq	r3,r2,1000fa4c <altera_avalon_jtag_uart_read+0x104>
      break;
1000fa48:	00001506 	br	1000faa0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fa4c:	e0bfff17 	ldw	r2,-4(fp)
1000fa50:	1090000c 	andi	r2,r2,16384
1000fa54:	10000126 	beq	r2,zero,1000fa5c <altera_avalon_jtag_uart_read+0x114>
      break;
1000fa58:	00001106 	br	1000faa0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fa5c:	0001883a 	nop
1000fa60:	e0bffc17 	ldw	r2,-16(fp)
1000fa64:	10c00a17 	ldw	r3,40(r2)
1000fa68:	e0bff717 	ldw	r2,-36(fp)
1000fa6c:	1880051e 	bne	r3,r2,1000fa84 <altera_avalon_jtag_uart_read+0x13c>
1000fa70:	e0bffc17 	ldw	r2,-16(fp)
1000fa74:	10c00917 	ldw	r3,36(r2)
1000fa78:	e0bffc17 	ldw	r2,-16(fp)
1000fa7c:	10800117 	ldw	r2,4(r2)
1000fa80:	18bff736 	bltu	r3,r2,1000fa60 <__alt_data_end+0xf800fa60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fa84:	e0bffc17 	ldw	r2,-16(fp)
1000fa88:	10c00a17 	ldw	r3,40(r2)
1000fa8c:	e0bff717 	ldw	r2,-36(fp)
1000fa90:	1880011e 	bne	r3,r2,1000fa98 <altera_avalon_jtag_uart_read+0x150>
      break;
1000fa94:	00000206 	br	1000faa0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fa98:	e0bffe17 	ldw	r2,-8(fp)
1000fa9c:	00bfb516 	blt	zero,r2,1000f974 <__alt_data_end+0xf800f974>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000faa0:	e0fff517 	ldw	r3,-44(fp)
1000faa4:	e0bffd17 	ldw	r2,-12(fp)
1000faa8:	18801826 	beq	r3,r2,1000fb0c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000faac:	0005303a 	rdctl	r2,status
1000fab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fab4:	e0fffa17 	ldw	r3,-24(fp)
1000fab8:	00bfff84 	movi	r2,-2
1000fabc:	1884703a 	and	r2,r3,r2
1000fac0:	1001703a 	wrctl	status,r2
  
  return context;
1000fac4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fac8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000facc:	e0bffc17 	ldw	r2,-16(fp)
1000fad0:	10800817 	ldw	r2,32(r2)
1000fad4:	10c00054 	ori	r3,r2,1
1000fad8:	e0bffc17 	ldw	r2,-16(fp)
1000fadc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fae0:	e0bffc17 	ldw	r2,-16(fp)
1000fae4:	10800017 	ldw	r2,0(r2)
1000fae8:	10800104 	addi	r2,r2,4
1000faec:	1007883a 	mov	r3,r2
1000faf0:	e0bffc17 	ldw	r2,-16(fp)
1000faf4:	10800817 	ldw	r2,32(r2)
1000faf8:	18800035 	stwio	r2,0(r3)
1000fafc:	e0bff917 	ldw	r2,-28(fp)
1000fb00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fb04:	e0bffb17 	ldw	r2,-20(fp)
1000fb08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fb0c:	e0fff517 	ldw	r3,-44(fp)
1000fb10:	e0bffd17 	ldw	r2,-12(fp)
1000fb14:	18800426 	beq	r3,r2,1000fb28 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000fb18:	e0fff517 	ldw	r3,-44(fp)
1000fb1c:	e0bffd17 	ldw	r2,-12(fp)
1000fb20:	1885c83a 	sub	r2,r3,r2
1000fb24:	00000606 	br	1000fb40 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000fb28:	e0bfff17 	ldw	r2,-4(fp)
1000fb2c:	1090000c 	andi	r2,r2,16384
1000fb30:	10000226 	beq	r2,zero,1000fb3c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000fb34:	00bffd44 	movi	r2,-11
1000fb38:	00000106 	br	1000fb40 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000fb3c:	00bffec4 	movi	r2,-5
}
1000fb40:	e037883a 	mov	sp,fp
1000fb44:	dfc00117 	ldw	ra,4(sp)
1000fb48:	df000017 	ldw	fp,0(sp)
1000fb4c:	dec00204 	addi	sp,sp,8
1000fb50:	f800283a 	ret

1000fb54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fb54:	defff304 	addi	sp,sp,-52
1000fb58:	dfc00c15 	stw	ra,48(sp)
1000fb5c:	df000b15 	stw	fp,44(sp)
1000fb60:	df000b04 	addi	fp,sp,44
1000fb64:	e13ffc15 	stw	r4,-16(fp)
1000fb68:	e17ffd15 	stw	r5,-12(fp)
1000fb6c:	e1bffe15 	stw	r6,-8(fp)
1000fb70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fb74:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fb78:	e0bffd17 	ldw	r2,-12(fp)
1000fb7c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fb80:	00003806 	br	1000fc64 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fb84:	e0bffc17 	ldw	r2,-16(fp)
1000fb88:	10800c17 	ldw	r2,48(r2)
1000fb8c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fb90:	e0bffc17 	ldw	r2,-16(fp)
1000fb94:	10800d17 	ldw	r2,52(r2)
1000fb98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fb9c:	e0fff817 	ldw	r3,-32(fp)
1000fba0:	e0bff517 	ldw	r2,-44(fp)
1000fba4:	1880062e 	bgeu	r3,r2,1000fbc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fba8:	e0fff517 	ldw	r3,-44(fp)
1000fbac:	e0bff817 	ldw	r2,-32(fp)
1000fbb0:	1885c83a 	sub	r2,r3,r2
1000fbb4:	10bfffc4 	addi	r2,r2,-1
1000fbb8:	e0bff615 	stw	r2,-40(fp)
1000fbbc:	00000b06 	br	1000fbec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000fbc0:	e0bff517 	ldw	r2,-44(fp)
1000fbc4:	10000526 	beq	r2,zero,1000fbdc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fbc8:	00c20004 	movi	r3,2048
1000fbcc:	e0bff817 	ldw	r2,-32(fp)
1000fbd0:	1885c83a 	sub	r2,r3,r2
1000fbd4:	e0bff615 	stw	r2,-40(fp)
1000fbd8:	00000406 	br	1000fbec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fbdc:	00c1ffc4 	movi	r3,2047
1000fbe0:	e0bff817 	ldw	r2,-32(fp)
1000fbe4:	1885c83a 	sub	r2,r3,r2
1000fbe8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fbec:	e0bff617 	ldw	r2,-40(fp)
1000fbf0:	1000011e 	bne	r2,zero,1000fbf8 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000fbf4:	00001d06 	br	1000fc6c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000fbf8:	e0fffe17 	ldw	r3,-8(fp)
1000fbfc:	e0bff617 	ldw	r2,-40(fp)
1000fc00:	1880022e 	bgeu	r3,r2,1000fc0c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000fc04:	e0bffe17 	ldw	r2,-8(fp)
1000fc08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fc0c:	e0bff817 	ldw	r2,-32(fp)
1000fc10:	10820e04 	addi	r2,r2,2104
1000fc14:	e0fffc17 	ldw	r3,-16(fp)
1000fc18:	1885883a 	add	r2,r3,r2
1000fc1c:	1009883a 	mov	r4,r2
1000fc20:	e17ffd17 	ldw	r5,-12(fp)
1000fc24:	e1bff617 	ldw	r6,-40(fp)
1000fc28:	00097a80 	call	100097a8 <memcpy>
      ptr   += n;
1000fc2c:	e0fffd17 	ldw	r3,-12(fp)
1000fc30:	e0bff617 	ldw	r2,-40(fp)
1000fc34:	1885883a 	add	r2,r3,r2
1000fc38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000fc3c:	e0fffe17 	ldw	r3,-8(fp)
1000fc40:	e0bff617 	ldw	r2,-40(fp)
1000fc44:	1885c83a 	sub	r2,r3,r2
1000fc48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fc4c:	e0fff817 	ldw	r3,-32(fp)
1000fc50:	e0bff617 	ldw	r2,-40(fp)
1000fc54:	1885883a 	add	r2,r3,r2
1000fc58:	10c1ffcc 	andi	r3,r2,2047
1000fc5c:	e0bffc17 	ldw	r2,-16(fp)
1000fc60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fc64:	e0bffe17 	ldw	r2,-8(fp)
1000fc68:	00bfc616 	blt	zero,r2,1000fb84 <__alt_data_end+0xf800fb84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fc6c:	0005303a 	rdctl	r2,status
1000fc70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fc74:	e0fffa17 	ldw	r3,-24(fp)
1000fc78:	00bfff84 	movi	r2,-2
1000fc7c:	1884703a 	and	r2,r3,r2
1000fc80:	1001703a 	wrctl	status,r2
  
  return context;
1000fc84:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000fc88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fc8c:	e0bffc17 	ldw	r2,-16(fp)
1000fc90:	10800817 	ldw	r2,32(r2)
1000fc94:	10c00094 	ori	r3,r2,2
1000fc98:	e0bffc17 	ldw	r2,-16(fp)
1000fc9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fca0:	e0bffc17 	ldw	r2,-16(fp)
1000fca4:	10800017 	ldw	r2,0(r2)
1000fca8:	10800104 	addi	r2,r2,4
1000fcac:	1007883a 	mov	r3,r2
1000fcb0:	e0bffc17 	ldw	r2,-16(fp)
1000fcb4:	10800817 	ldw	r2,32(r2)
1000fcb8:	18800035 	stwio	r2,0(r3)
1000fcbc:	e0bff917 	ldw	r2,-28(fp)
1000fcc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fcc4:	e0bffb17 	ldw	r2,-20(fp)
1000fcc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000fccc:	e0bffe17 	ldw	r2,-8(fp)
1000fcd0:	0080120e 	bge	zero,r2,1000fd1c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000fcd4:	e0bfff17 	ldw	r2,-4(fp)
1000fcd8:	1090000c 	andi	r2,r2,16384
1000fcdc:	10000126 	beq	r2,zero,1000fce4 <altera_avalon_jtag_uart_write+0x190>
        break;
1000fce0:	00001006 	br	1000fd24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000fce4:	0001883a 	nop
1000fce8:	e0bffc17 	ldw	r2,-16(fp)
1000fcec:	10c00d17 	ldw	r3,52(r2)
1000fcf0:	e0bff517 	ldw	r2,-44(fp)
1000fcf4:	1880051e 	bne	r3,r2,1000fd0c <altera_avalon_jtag_uart_write+0x1b8>
1000fcf8:	e0bffc17 	ldw	r2,-16(fp)
1000fcfc:	10c00917 	ldw	r3,36(r2)
1000fd00:	e0bffc17 	ldw	r2,-16(fp)
1000fd04:	10800117 	ldw	r2,4(r2)
1000fd08:	18bff736 	bltu	r3,r2,1000fce8 <__alt_data_end+0xf800fce8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000fd0c:	e0bffc17 	ldw	r2,-16(fp)
1000fd10:	10800917 	ldw	r2,36(r2)
1000fd14:	10000126 	beq	r2,zero,1000fd1c <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000fd18:	00000206 	br	1000fd24 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000fd1c:	e0bffe17 	ldw	r2,-8(fp)
1000fd20:	00bf9716 	blt	zero,r2,1000fb80 <__alt_data_end+0xf800fb80>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000fd24:	e0fffd17 	ldw	r3,-12(fp)
1000fd28:	e0bff717 	ldw	r2,-36(fp)
1000fd2c:	18800426 	beq	r3,r2,1000fd40 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000fd30:	e0fffd17 	ldw	r3,-12(fp)
1000fd34:	e0bff717 	ldw	r2,-36(fp)
1000fd38:	1885c83a 	sub	r2,r3,r2
1000fd3c:	00000606 	br	1000fd58 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000fd40:	e0bfff17 	ldw	r2,-4(fp)
1000fd44:	1090000c 	andi	r2,r2,16384
1000fd48:	10000226 	beq	r2,zero,1000fd54 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000fd4c:	00bffd44 	movi	r2,-11
1000fd50:	00000106 	br	1000fd58 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000fd54:	00bffec4 	movi	r2,-5
}
1000fd58:	e037883a 	mov	sp,fp
1000fd5c:	dfc00117 	ldw	ra,4(sp)
1000fd60:	df000017 	ldw	fp,0(sp)
1000fd64:	dec00204 	addi	sp,sp,8
1000fd68:	f800283a 	ret

1000fd6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000fd6c:	defff504 	addi	sp,sp,-44
1000fd70:	df000a15 	stw	fp,40(sp)
1000fd74:	df000a04 	addi	fp,sp,40
1000fd78:	e13ffc15 	stw	r4,-16(fp)
1000fd7c:	e17ffd15 	stw	r5,-12(fp)
1000fd80:	e1bffe15 	stw	r6,-8(fp)
1000fd84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000fd88:	e03ff615 	stw	zero,-40(fp)
1000fd8c:	00840074 	movhi	r2,4097
1000fd90:	10927404 	addi	r2,r2,18896
1000fd94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000fd98:	10003f26 	beq	r2,zero,1000fe98 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000fd9c:	e0bffc17 	ldw	r2,-16(fp)
1000fda0:	10003b26 	beq	r2,zero,1000fe90 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000fda4:	e0bffc17 	ldw	r2,-16(fp)
1000fda8:	e0fffe17 	ldw	r3,-8(fp)
1000fdac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000fdb0:	e0bffc17 	ldw	r2,-16(fp)
1000fdb4:	e0ffff17 	ldw	r3,-4(fp)
1000fdb8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fdbc:	0005303a 	rdctl	r2,status
1000fdc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fdc4:	e0fff817 	ldw	r3,-32(fp)
1000fdc8:	00bfff84 	movi	r2,-2
1000fdcc:	1884703a 	and	r2,r3,r2
1000fdd0:	1001703a 	wrctl	status,r2
  
  return context;
1000fdd4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000fdd8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000fddc:	00840074 	movhi	r2,4097
1000fde0:	10927504 	addi	r2,r2,18900
1000fde4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000fde8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000fdec:	e0fffd17 	ldw	r3,-12(fp)
1000fdf0:	e0bff617 	ldw	r2,-40(fp)
1000fdf4:	1885883a 	add	r2,r3,r2
1000fdf8:	10c00044 	addi	r3,r2,1
1000fdfc:	e0bffc17 	ldw	r2,-16(fp)
1000fe00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000fe04:	e0bffc17 	ldw	r2,-16(fp)
1000fe08:	10c00217 	ldw	r3,8(r2)
1000fe0c:	e0bff617 	ldw	r2,-40(fp)
1000fe10:	1880042e 	bgeu	r3,r2,1000fe24 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000fe14:	e0bffc17 	ldw	r2,-16(fp)
1000fe18:	00c00044 	movi	r3,1
1000fe1c:	10c00405 	stb	r3,16(r2)
1000fe20:	00000206 	br	1000fe2c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000fe24:	e0bffc17 	ldw	r2,-16(fp)
1000fe28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000fe2c:	e0fffc17 	ldw	r3,-16(fp)
1000fe30:	00840074 	movhi	r2,4097
1000fe34:	108b9d04 	addi	r2,r2,11892
1000fe38:	e0bff915 	stw	r2,-28(fp)
1000fe3c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000fe40:	e0bffa17 	ldw	r2,-24(fp)
1000fe44:	e0fff917 	ldw	r3,-28(fp)
1000fe48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000fe4c:	e0bff917 	ldw	r2,-28(fp)
1000fe50:	10c00017 	ldw	r3,0(r2)
1000fe54:	e0bffa17 	ldw	r2,-24(fp)
1000fe58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000fe5c:	e0bff917 	ldw	r2,-28(fp)
1000fe60:	10800017 	ldw	r2,0(r2)
1000fe64:	e0fffa17 	ldw	r3,-24(fp)
1000fe68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000fe6c:	e0bff917 	ldw	r2,-28(fp)
1000fe70:	e0fffa17 	ldw	r3,-24(fp)
1000fe74:	10c00015 	stw	r3,0(r2)
1000fe78:	e0bff717 	ldw	r2,-36(fp)
1000fe7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fe80:	e0bffb17 	ldw	r2,-20(fp)
1000fe84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000fe88:	0005883a 	mov	r2,zero
1000fe8c:	00000306 	br	1000fe9c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000fe90:	00bffa84 	movi	r2,-22
1000fe94:	00000106 	br	1000fe9c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000fe98:	00bfde84 	movi	r2,-134
  }
}
1000fe9c:	e037883a 	mov	sp,fp
1000fea0:	df000017 	ldw	fp,0(sp)
1000fea4:	dec00104 	addi	sp,sp,4
1000fea8:	f800283a 	ret

1000feac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000feac:	deffff04 	addi	sp,sp,-4
1000feb0:	df000015 	stw	fp,0(sp)
1000feb4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000feb8:	e037883a 	mov	sp,fp
1000febc:	df000017 	ldw	fp,0(sp)
1000fec0:	dec00104 	addi	sp,sp,4
1000fec4:	f800283a 	ret

1000fec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fec8:	defffe04 	addi	sp,sp,-8
1000fecc:	dfc00115 	stw	ra,4(sp)
1000fed0:	df000015 	stw	fp,0(sp)
1000fed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fed8:	00840074 	movhi	r2,4097
1000fedc:	108b9a04 	addi	r2,r2,11880
1000fee0:	10800017 	ldw	r2,0(r2)
1000fee4:	10000526 	beq	r2,zero,1000fefc <alt_get_errno+0x34>
1000fee8:	00840074 	movhi	r2,4097
1000feec:	108b9a04 	addi	r2,r2,11880
1000fef0:	10800017 	ldw	r2,0(r2)
1000fef4:	103ee83a 	callr	r2
1000fef8:	00000206 	br	1000ff04 <alt_get_errno+0x3c>
1000fefc:	00840074 	movhi	r2,4097
1000ff00:	10926f04 	addi	r2,r2,18876
}
1000ff04:	e037883a 	mov	sp,fp
1000ff08:	dfc00117 	ldw	ra,4(sp)
1000ff0c:	df000017 	ldw	fp,0(sp)
1000ff10:	dec00204 	addi	sp,sp,8
1000ff14:	f800283a 	ret

1000ff18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000ff18:	defffa04 	addi	sp,sp,-24
1000ff1c:	dfc00515 	stw	ra,20(sp)
1000ff20:	df000415 	stw	fp,16(sp)
1000ff24:	df000404 	addi	fp,sp,16
1000ff28:	e13ffe15 	stw	r4,-8(fp)
1000ff2c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000ff30:	e0bffe17 	ldw	r2,-8(fp)
1000ff34:	10000326 	beq	r2,zero,1000ff44 <alt_dev_llist_insert+0x2c>
1000ff38:	e0bffe17 	ldw	r2,-8(fp)
1000ff3c:	10800217 	ldw	r2,8(r2)
1000ff40:	1000061e 	bne	r2,zero,1000ff5c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000ff44:	000fec80 	call	1000fec8 <alt_get_errno>
1000ff48:	1007883a 	mov	r3,r2
1000ff4c:	00800584 	movi	r2,22
1000ff50:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000ff54:	00bffa84 	movi	r2,-22
1000ff58:	00001306 	br	1000ffa8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000ff5c:	e0bffe17 	ldw	r2,-8(fp)
1000ff60:	e0ffff17 	ldw	r3,-4(fp)
1000ff64:	e0fffc15 	stw	r3,-16(fp)
1000ff68:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ff6c:	e0bffd17 	ldw	r2,-12(fp)
1000ff70:	e0fffc17 	ldw	r3,-16(fp)
1000ff74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ff78:	e0bffc17 	ldw	r2,-16(fp)
1000ff7c:	10c00017 	ldw	r3,0(r2)
1000ff80:	e0bffd17 	ldw	r2,-12(fp)
1000ff84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ff88:	e0bffc17 	ldw	r2,-16(fp)
1000ff8c:	10800017 	ldw	r2,0(r2)
1000ff90:	e0fffd17 	ldw	r3,-12(fp)
1000ff94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ff98:	e0bffc17 	ldw	r2,-16(fp)
1000ff9c:	e0fffd17 	ldw	r3,-12(fp)
1000ffa0:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ffa4:	0005883a 	mov	r2,zero
}
1000ffa8:	e037883a 	mov	sp,fp
1000ffac:	dfc00117 	ldw	ra,4(sp)
1000ffb0:	df000017 	ldw	fp,0(sp)
1000ffb4:	dec00204 	addi	sp,sp,8
1000ffb8:	f800283a 	ret

1000ffbc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ffbc:	defffd04 	addi	sp,sp,-12
1000ffc0:	dfc00215 	stw	ra,8(sp)
1000ffc4:	df000115 	stw	fp,4(sp)
1000ffc8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ffcc:	00840074 	movhi	r2,4097
1000ffd0:	1083f304 	addi	r2,r2,4044
1000ffd4:	e0bfff15 	stw	r2,-4(fp)
1000ffd8:	00000606 	br	1000fff4 <_do_ctors+0x38>
        (*ctor) (); 
1000ffdc:	e0bfff17 	ldw	r2,-4(fp)
1000ffe0:	10800017 	ldw	r2,0(r2)
1000ffe4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ffe8:	e0bfff17 	ldw	r2,-4(fp)
1000ffec:	10bfff04 	addi	r2,r2,-4
1000fff0:	e0bfff15 	stw	r2,-4(fp)
1000fff4:	e0ffff17 	ldw	r3,-4(fp)
1000fff8:	00840074 	movhi	r2,4097
1000fffc:	1083f404 	addi	r2,r2,4048
10010000:	18bff62e 	bgeu	r3,r2,1000ffdc <__alt_data_end+0xf800ffdc>
        (*ctor) (); 
}
10010004:	e037883a 	mov	sp,fp
10010008:	dfc00117 	ldw	ra,4(sp)
1001000c:	df000017 	ldw	fp,0(sp)
10010010:	dec00204 	addi	sp,sp,8
10010014:	f800283a 	ret

10010018 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010018:	defffd04 	addi	sp,sp,-12
1001001c:	dfc00215 	stw	ra,8(sp)
10010020:	df000115 	stw	fp,4(sp)
10010024:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010028:	00840074 	movhi	r2,4097
1001002c:	1083f304 	addi	r2,r2,4044
10010030:	e0bfff15 	stw	r2,-4(fp)
10010034:	00000606 	br	10010050 <_do_dtors+0x38>
        (*dtor) (); 
10010038:	e0bfff17 	ldw	r2,-4(fp)
1001003c:	10800017 	ldw	r2,0(r2)
10010040:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010044:	e0bfff17 	ldw	r2,-4(fp)
10010048:	10bfff04 	addi	r2,r2,-4
1001004c:	e0bfff15 	stw	r2,-4(fp)
10010050:	e0ffff17 	ldw	r3,-4(fp)
10010054:	00840074 	movhi	r2,4097
10010058:	1083f404 	addi	r2,r2,4048
1001005c:	18bff62e 	bgeu	r3,r2,10010038 <__alt_data_end+0xf8010038>
        (*dtor) (); 
}
10010060:	e037883a 	mov	sp,fp
10010064:	dfc00117 	ldw	ra,4(sp)
10010068:	df000017 	ldw	fp,0(sp)
1001006c:	dec00204 	addi	sp,sp,8
10010070:	f800283a 	ret

10010074 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010074:	deffff04 	addi	sp,sp,-4
10010078:	df000015 	stw	fp,0(sp)
1001007c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010080:	e037883a 	mov	sp,fp
10010084:	df000017 	ldw	fp,0(sp)
10010088:	dec00104 	addi	sp,sp,4
1001008c:	f800283a 	ret

10010090 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010090:	defff904 	addi	sp,sp,-28
10010094:	dfc00615 	stw	ra,24(sp)
10010098:	df000515 	stw	fp,20(sp)
1001009c:	df000504 	addi	fp,sp,20
100100a0:	e13ffc15 	stw	r4,-16(fp)
100100a4:	e17ffd15 	stw	r5,-12(fp)
100100a8:	e1bffe15 	stw	r6,-8(fp)
100100ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100100b0:	e0800217 	ldw	r2,8(fp)
100100b4:	d8800015 	stw	r2,0(sp)
100100b8:	e13ffc17 	ldw	r4,-16(fp)
100100bc:	e17ffd17 	ldw	r5,-12(fp)
100100c0:	e1bffe17 	ldw	r6,-8(fp)
100100c4:	e1ffff17 	ldw	r7,-4(fp)
100100c8:	00102700 	call	10010270 <alt_iic_isr_register>
}  
100100cc:	e037883a 	mov	sp,fp
100100d0:	dfc00117 	ldw	ra,4(sp)
100100d4:	df000017 	ldw	fp,0(sp)
100100d8:	dec00204 	addi	sp,sp,8
100100dc:	f800283a 	ret

100100e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100100e0:	defff904 	addi	sp,sp,-28
100100e4:	df000615 	stw	fp,24(sp)
100100e8:	df000604 	addi	fp,sp,24
100100ec:	e13ffe15 	stw	r4,-8(fp)
100100f0:	e17fff15 	stw	r5,-4(fp)
100100f4:	e0bfff17 	ldw	r2,-4(fp)
100100f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100100fc:	0005303a 	rdctl	r2,status
10010100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010104:	e0fffb17 	ldw	r3,-20(fp)
10010108:	00bfff84 	movi	r2,-2
1001010c:	1884703a 	and	r2,r3,r2
10010110:	1001703a 	wrctl	status,r2
  
  return context;
10010114:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010118:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001011c:	e0bffa17 	ldw	r2,-24(fp)
10010120:	00c00044 	movi	r3,1
10010124:	1884983a 	sll	r2,r3,r2
10010128:	1007883a 	mov	r3,r2
1001012c:	00840074 	movhi	r2,4097
10010130:	10927304 	addi	r2,r2,18892
10010134:	10800017 	ldw	r2,0(r2)
10010138:	1886b03a 	or	r3,r3,r2
1001013c:	00840074 	movhi	r2,4097
10010140:	10927304 	addi	r2,r2,18892
10010144:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010148:	00840074 	movhi	r2,4097
1001014c:	10927304 	addi	r2,r2,18892
10010150:	10800017 	ldw	r2,0(r2)
10010154:	100170fa 	wrctl	ienable,r2
10010158:	e0bffc17 	ldw	r2,-16(fp)
1001015c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010160:	e0bffd17 	ldw	r2,-12(fp)
10010164:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010168:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001016c:	0001883a 	nop
}
10010170:	e037883a 	mov	sp,fp
10010174:	df000017 	ldw	fp,0(sp)
10010178:	dec00104 	addi	sp,sp,4
1001017c:	f800283a 	ret

10010180 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010180:	defff904 	addi	sp,sp,-28
10010184:	df000615 	stw	fp,24(sp)
10010188:	df000604 	addi	fp,sp,24
1001018c:	e13ffe15 	stw	r4,-8(fp)
10010190:	e17fff15 	stw	r5,-4(fp)
10010194:	e0bfff17 	ldw	r2,-4(fp)
10010198:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001019c:	0005303a 	rdctl	r2,status
100101a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100101a4:	e0fffb17 	ldw	r3,-20(fp)
100101a8:	00bfff84 	movi	r2,-2
100101ac:	1884703a 	and	r2,r3,r2
100101b0:	1001703a 	wrctl	status,r2
  
  return context;
100101b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100101b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100101bc:	e0bffa17 	ldw	r2,-24(fp)
100101c0:	00c00044 	movi	r3,1
100101c4:	1884983a 	sll	r2,r3,r2
100101c8:	0084303a 	nor	r2,zero,r2
100101cc:	1007883a 	mov	r3,r2
100101d0:	00840074 	movhi	r2,4097
100101d4:	10927304 	addi	r2,r2,18892
100101d8:	10800017 	ldw	r2,0(r2)
100101dc:	1886703a 	and	r3,r3,r2
100101e0:	00840074 	movhi	r2,4097
100101e4:	10927304 	addi	r2,r2,18892
100101e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100101ec:	00840074 	movhi	r2,4097
100101f0:	10927304 	addi	r2,r2,18892
100101f4:	10800017 	ldw	r2,0(r2)
100101f8:	100170fa 	wrctl	ienable,r2
100101fc:	e0bffc17 	ldw	r2,-16(fp)
10010200:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010204:	e0bffd17 	ldw	r2,-12(fp)
10010208:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001020c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010210:	0001883a 	nop
}
10010214:	e037883a 	mov	sp,fp
10010218:	df000017 	ldw	fp,0(sp)
1001021c:	dec00104 	addi	sp,sp,4
10010220:	f800283a 	ret

10010224 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010224:	defffc04 	addi	sp,sp,-16
10010228:	df000315 	stw	fp,12(sp)
1001022c:	df000304 	addi	fp,sp,12
10010230:	e13ffe15 	stw	r4,-8(fp)
10010234:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010238:	000530fa 	rdctl	r2,ienable
1001023c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010240:	e0bfff17 	ldw	r2,-4(fp)
10010244:	00c00044 	movi	r3,1
10010248:	1884983a 	sll	r2,r3,r2
1001024c:	1007883a 	mov	r3,r2
10010250:	e0bffd17 	ldw	r2,-12(fp)
10010254:	1884703a 	and	r2,r3,r2
10010258:	1004c03a 	cmpne	r2,r2,zero
1001025c:	10803fcc 	andi	r2,r2,255
}
10010260:	e037883a 	mov	sp,fp
10010264:	df000017 	ldw	fp,0(sp)
10010268:	dec00104 	addi	sp,sp,4
1001026c:	f800283a 	ret

10010270 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010270:	defff504 	addi	sp,sp,-44
10010274:	dfc00a15 	stw	ra,40(sp)
10010278:	df000915 	stw	fp,36(sp)
1001027c:	df000904 	addi	fp,sp,36
10010280:	e13ffc15 	stw	r4,-16(fp)
10010284:	e17ffd15 	stw	r5,-12(fp)
10010288:	e1bffe15 	stw	r6,-8(fp)
1001028c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010290:	00bffa84 	movi	r2,-22
10010294:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010298:	e0bffd17 	ldw	r2,-12(fp)
1001029c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100102a0:	e0bff817 	ldw	r2,-32(fp)
100102a4:	10800808 	cmpgei	r2,r2,32
100102a8:	1000271e 	bne	r2,zero,10010348 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100102ac:	0005303a 	rdctl	r2,status
100102b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102b4:	e0fffa17 	ldw	r3,-24(fp)
100102b8:	00bfff84 	movi	r2,-2
100102bc:	1884703a 	and	r2,r3,r2
100102c0:	1001703a 	wrctl	status,r2
  
  return context;
100102c4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100102c8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100102cc:	00840074 	movhi	r2,4097
100102d0:	10930104 	addi	r2,r2,19460
100102d4:	e0fff817 	ldw	r3,-32(fp)
100102d8:	180690fa 	slli	r3,r3,3
100102dc:	10c5883a 	add	r2,r2,r3
100102e0:	e0fffe17 	ldw	r3,-8(fp)
100102e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100102e8:	00840074 	movhi	r2,4097
100102ec:	10930104 	addi	r2,r2,19460
100102f0:	e0fff817 	ldw	r3,-32(fp)
100102f4:	180690fa 	slli	r3,r3,3
100102f8:	10c5883a 	add	r2,r2,r3
100102fc:	10800104 	addi	r2,r2,4
10010300:	e0ffff17 	ldw	r3,-4(fp)
10010304:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010308:	e0bffe17 	ldw	r2,-8(fp)
1001030c:	10000526 	beq	r2,zero,10010324 <alt_iic_isr_register+0xb4>
10010310:	e0bff817 	ldw	r2,-32(fp)
10010314:	e13ffc17 	ldw	r4,-16(fp)
10010318:	100b883a 	mov	r5,r2
1001031c:	00100e00 	call	100100e0 <alt_ic_irq_enable>
10010320:	00000406 	br	10010334 <alt_iic_isr_register+0xc4>
10010324:	e0bff817 	ldw	r2,-32(fp)
10010328:	e13ffc17 	ldw	r4,-16(fp)
1001032c:	100b883a 	mov	r5,r2
10010330:	00101800 	call	10010180 <alt_ic_irq_disable>
10010334:	e0bff715 	stw	r2,-36(fp)
10010338:	e0bff917 	ldw	r2,-28(fp)
1001033c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010340:	e0bffb17 	ldw	r2,-20(fp)
10010344:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010348:	e0bff717 	ldw	r2,-36(fp)
}
1001034c:	e037883a 	mov	sp,fp
10010350:	dfc00117 	ldw	ra,4(sp)
10010354:	df000017 	ldw	fp,0(sp)
10010358:	dec00204 	addi	sp,sp,8
1001035c:	f800283a 	ret

10010360 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010360:	defff804 	addi	sp,sp,-32
10010364:	dfc00715 	stw	ra,28(sp)
10010368:	df000615 	stw	fp,24(sp)
1001036c:	dc000515 	stw	r16,20(sp)
10010370:	df000604 	addi	fp,sp,24
10010374:	e13ffb15 	stw	r4,-20(fp)
10010378:	e17ffc15 	stw	r5,-16(fp)
1001037c:	e1bffd15 	stw	r6,-12(fp)
10010380:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010384:	e13ffc17 	ldw	r4,-16(fp)
10010388:	e17ffd17 	ldw	r5,-12(fp)
1001038c:	e1bffe17 	ldw	r6,-8(fp)
10010390:	00105fc0 	call	100105fc <open>
10010394:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010398:	e0bffa17 	ldw	r2,-24(fp)
1001039c:	10002216 	blt	r2,zero,10010428 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100103a0:	04040074 	movhi	r16,4097
100103a4:	84071704 	addi	r16,r16,7260
100103a8:	e0bffa17 	ldw	r2,-24(fp)
100103ac:	1009883a 	mov	r4,r2
100103b0:	01400304 	movi	r5,12
100103b4:	0002b140 	call	10002b14 <__mulsi3>
100103b8:	8085883a 	add	r2,r16,r2
100103bc:	10c00017 	ldw	r3,0(r2)
100103c0:	e0bffb17 	ldw	r2,-20(fp)
100103c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100103c8:	04040074 	movhi	r16,4097
100103cc:	84071704 	addi	r16,r16,7260
100103d0:	e0bffa17 	ldw	r2,-24(fp)
100103d4:	1009883a 	mov	r4,r2
100103d8:	01400304 	movi	r5,12
100103dc:	0002b140 	call	10002b14 <__mulsi3>
100103e0:	8085883a 	add	r2,r16,r2
100103e4:	10800104 	addi	r2,r2,4
100103e8:	10c00017 	ldw	r3,0(r2)
100103ec:	e0bffb17 	ldw	r2,-20(fp)
100103f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100103f4:	04040074 	movhi	r16,4097
100103f8:	84071704 	addi	r16,r16,7260
100103fc:	e0bffa17 	ldw	r2,-24(fp)
10010400:	1009883a 	mov	r4,r2
10010404:	01400304 	movi	r5,12
10010408:	0002b140 	call	10002b14 <__mulsi3>
1001040c:	8085883a 	add	r2,r16,r2
10010410:	10800204 	addi	r2,r2,8
10010414:	10c00017 	ldw	r3,0(r2)
10010418:	e0bffb17 	ldw	r2,-20(fp)
1001041c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010420:	e13ffa17 	ldw	r4,-24(fp)
10010424:	000efec0 	call	1000efec <alt_release_fd>
  }
} 
10010428:	e6ffff04 	addi	sp,fp,-4
1001042c:	dfc00217 	ldw	ra,8(sp)
10010430:	df000117 	ldw	fp,4(sp)
10010434:	dc000017 	ldw	r16,0(sp)
10010438:	dec00304 	addi	sp,sp,12
1001043c:	f800283a 	ret

10010440 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010440:	defffb04 	addi	sp,sp,-20
10010444:	dfc00415 	stw	ra,16(sp)
10010448:	df000315 	stw	fp,12(sp)
1001044c:	df000304 	addi	fp,sp,12
10010450:	e13ffd15 	stw	r4,-12(fp)
10010454:	e17ffe15 	stw	r5,-8(fp)
10010458:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1001045c:	01040074 	movhi	r4,4097
10010460:	21071a04 	addi	r4,r4,7272
10010464:	e17ffd17 	ldw	r5,-12(fp)
10010468:	01800044 	movi	r6,1
1001046c:	01c07fc4 	movi	r7,511
10010470:	00103600 	call	10010360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010474:	01040074 	movhi	r4,4097
10010478:	21071704 	addi	r4,r4,7260
1001047c:	e17ffe17 	ldw	r5,-8(fp)
10010480:	000d883a 	mov	r6,zero
10010484:	01c07fc4 	movi	r7,511
10010488:	00103600 	call	10010360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1001048c:	01040074 	movhi	r4,4097
10010490:	21071d04 	addi	r4,r4,7284
10010494:	e17fff17 	ldw	r5,-4(fp)
10010498:	01800044 	movi	r6,1
1001049c:	01c07fc4 	movi	r7,511
100104a0:	00103600 	call	10010360 <alt_open_fd>
}  
100104a4:	e037883a 	mov	sp,fp
100104a8:	dfc00117 	ldw	ra,4(sp)
100104ac:	df000017 	ldw	fp,0(sp)
100104b0:	dec00204 	addi	sp,sp,8
100104b4:	f800283a 	ret

100104b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100104b8:	defffe04 	addi	sp,sp,-8
100104bc:	dfc00115 	stw	ra,4(sp)
100104c0:	df000015 	stw	fp,0(sp)
100104c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100104c8:	00840074 	movhi	r2,4097
100104cc:	108b9a04 	addi	r2,r2,11880
100104d0:	10800017 	ldw	r2,0(r2)
100104d4:	10000526 	beq	r2,zero,100104ec <alt_get_errno+0x34>
100104d8:	00840074 	movhi	r2,4097
100104dc:	108b9a04 	addi	r2,r2,11880
100104e0:	10800017 	ldw	r2,0(r2)
100104e4:	103ee83a 	callr	r2
100104e8:	00000206 	br	100104f4 <alt_get_errno+0x3c>
100104ec:	00840074 	movhi	r2,4097
100104f0:	10926f04 	addi	r2,r2,18876
}
100104f4:	e037883a 	mov	sp,fp
100104f8:	dfc00117 	ldw	ra,4(sp)
100104fc:	df000017 	ldw	fp,0(sp)
10010500:	dec00204 	addi	sp,sp,8
10010504:	f800283a 	ret

10010508 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010508:	defffb04 	addi	sp,sp,-20
1001050c:	dfc00415 	stw	ra,16(sp)
10010510:	df000315 	stw	fp,12(sp)
10010514:	dc000215 	stw	r16,8(sp)
10010518:	df000304 	addi	fp,sp,12
1001051c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010520:	e0bffe17 	ldw	r2,-8(fp)
10010524:	10800217 	ldw	r2,8(r2)
10010528:	10d00034 	orhi	r3,r2,16384
1001052c:	e0bffe17 	ldw	r2,-8(fp)
10010530:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010534:	e03ffd15 	stw	zero,-12(fp)
10010538:	00002306 	br	100105c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001053c:	04040074 	movhi	r16,4097
10010540:	84071704 	addi	r16,r16,7260
10010544:	e0bffd17 	ldw	r2,-12(fp)
10010548:	1009883a 	mov	r4,r2
1001054c:	01400304 	movi	r5,12
10010550:	0002b140 	call	10002b14 <__mulsi3>
10010554:	8085883a 	add	r2,r16,r2
10010558:	10c00017 	ldw	r3,0(r2)
1001055c:	e0bffe17 	ldw	r2,-8(fp)
10010560:	10800017 	ldw	r2,0(r2)
10010564:	1880151e 	bne	r3,r2,100105bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010568:	04040074 	movhi	r16,4097
1001056c:	84071704 	addi	r16,r16,7260
10010570:	e0bffd17 	ldw	r2,-12(fp)
10010574:	1009883a 	mov	r4,r2
10010578:	01400304 	movi	r5,12
1001057c:	0002b140 	call	10002b14 <__mulsi3>
10010580:	8085883a 	add	r2,r16,r2
10010584:	10800204 	addi	r2,r2,8
10010588:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001058c:	10000b0e 	bge	r2,zero,100105bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010590:	e13ffd17 	ldw	r4,-12(fp)
10010594:	01400304 	movi	r5,12
10010598:	0002b140 	call	10002b14 <__mulsi3>
1001059c:	1007883a 	mov	r3,r2
100105a0:	00840074 	movhi	r2,4097
100105a4:	10871704 	addi	r2,r2,7260
100105a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100105ac:	e0bffe17 	ldw	r2,-8(fp)
100105b0:	18800226 	beq	r3,r2,100105bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100105b4:	00bffcc4 	movi	r2,-13
100105b8:	00000a06 	br	100105e4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100105bc:	e0bffd17 	ldw	r2,-12(fp)
100105c0:	10800044 	addi	r2,r2,1
100105c4:	e0bffd15 	stw	r2,-12(fp)
100105c8:	00840074 	movhi	r2,4097
100105cc:	108b9904 	addi	r2,r2,11876
100105d0:	10800017 	ldw	r2,0(r2)
100105d4:	1007883a 	mov	r3,r2
100105d8:	e0bffd17 	ldw	r2,-12(fp)
100105dc:	18bfd72e 	bgeu	r3,r2,1001053c <__alt_data_end+0xf801053c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100105e0:	0005883a 	mov	r2,zero
}
100105e4:	e6ffff04 	addi	sp,fp,-4
100105e8:	dfc00217 	ldw	ra,8(sp)
100105ec:	df000117 	ldw	fp,4(sp)
100105f0:	dc000017 	ldw	r16,0(sp)
100105f4:	dec00304 	addi	sp,sp,12
100105f8:	f800283a 	ret

100105fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100105fc:	defff604 	addi	sp,sp,-40
10010600:	dfc00915 	stw	ra,36(sp)
10010604:	df000815 	stw	fp,32(sp)
10010608:	df000804 	addi	fp,sp,32
1001060c:	e13ffd15 	stw	r4,-12(fp)
10010610:	e17ffe15 	stw	r5,-8(fp)
10010614:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010618:	00bfffc4 	movi	r2,-1
1001061c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010620:	00bffb44 	movi	r2,-19
10010624:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010628:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1001062c:	e13ffd17 	ldw	r4,-12(fp)
10010630:	01440074 	movhi	r5,4097
10010634:	294b9704 	addi	r5,r5,11868
10010638:	00109180 	call	10010918 <alt_find_dev>
1001063c:	e0bff815 	stw	r2,-32(fp)
10010640:	e0bff817 	ldw	r2,-32(fp)
10010644:	1000051e 	bne	r2,zero,1001065c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010648:	e13ffd17 	ldw	r4,-12(fp)
1001064c:	00109a80 	call	100109a8 <alt_find_file>
10010650:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010654:	00800044 	movi	r2,1
10010658:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1001065c:	e0bff817 	ldw	r2,-32(fp)
10010660:	10002b26 	beq	r2,zero,10010710 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010664:	e13ff817 	ldw	r4,-32(fp)
10010668:	0010abc0 	call	10010abc <alt_get_fd>
1001066c:	e0bff915 	stw	r2,-28(fp)
10010670:	e0bff917 	ldw	r2,-28(fp)
10010674:	1000030e 	bge	r2,zero,10010684 <open+0x88>
    {
      status = index;
10010678:	e0bff917 	ldw	r2,-28(fp)
1001067c:	e0bffa15 	stw	r2,-24(fp)
10010680:	00002506 	br	10010718 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010684:	e13ff917 	ldw	r4,-28(fp)
10010688:	01400304 	movi	r5,12
1001068c:	0002b140 	call	10002b14 <__mulsi3>
10010690:	1007883a 	mov	r3,r2
10010694:	00840074 	movhi	r2,4097
10010698:	10871704 	addi	r2,r2,7260
1001069c:	1885883a 	add	r2,r3,r2
100106a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100106a4:	e0fffe17 	ldw	r3,-8(fp)
100106a8:	00900034 	movhi	r2,16384
100106ac:	10bfffc4 	addi	r2,r2,-1
100106b0:	1886703a 	and	r3,r3,r2
100106b4:	e0bffc17 	ldw	r2,-16(fp)
100106b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100106bc:	e0bffb17 	ldw	r2,-20(fp)
100106c0:	1000051e 	bne	r2,zero,100106d8 <open+0xdc>
100106c4:	e13ffc17 	ldw	r4,-16(fp)
100106c8:	00105080 	call	10010508 <alt_file_locked>
100106cc:	e0bffa15 	stw	r2,-24(fp)
100106d0:	e0bffa17 	ldw	r2,-24(fp)
100106d4:	10001016 	blt	r2,zero,10010718 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100106d8:	e0bff817 	ldw	r2,-32(fp)
100106dc:	10800317 	ldw	r2,12(r2)
100106e0:	10000826 	beq	r2,zero,10010704 <open+0x108>
100106e4:	e0bff817 	ldw	r2,-32(fp)
100106e8:	10800317 	ldw	r2,12(r2)
100106ec:	e13ffc17 	ldw	r4,-16(fp)
100106f0:	e17ffd17 	ldw	r5,-12(fp)
100106f4:	e1bffe17 	ldw	r6,-8(fp)
100106f8:	e1ffff17 	ldw	r7,-4(fp)
100106fc:	103ee83a 	callr	r2
10010700:	00000106 	br	10010708 <open+0x10c>
10010704:	0005883a 	mov	r2,zero
10010708:	e0bffa15 	stw	r2,-24(fp)
1001070c:	00000206 	br	10010718 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010710:	00bffb44 	movi	r2,-19
10010714:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010718:	e0bffa17 	ldw	r2,-24(fp)
1001071c:	1000090e 	bge	r2,zero,10010744 <open+0x148>
  {
    alt_release_fd (index);  
10010720:	e13ff917 	ldw	r4,-28(fp)
10010724:	000efec0 	call	1000efec <alt_release_fd>
    ALT_ERRNO = -status;
10010728:	00104b80 	call	100104b8 <alt_get_errno>
1001072c:	1007883a 	mov	r3,r2
10010730:	e0bffa17 	ldw	r2,-24(fp)
10010734:	0085c83a 	sub	r2,zero,r2
10010738:	18800015 	stw	r2,0(r3)
    return -1;
1001073c:	00bfffc4 	movi	r2,-1
10010740:	00000106 	br	10010748 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010744:	e0bff917 	ldw	r2,-28(fp)
}
10010748:	e037883a 	mov	sp,fp
1001074c:	dfc00117 	ldw	ra,4(sp)
10010750:	df000017 	ldw	fp,0(sp)
10010754:	dec00204 	addi	sp,sp,8
10010758:	f800283a 	ret

1001075c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001075c:	defffa04 	addi	sp,sp,-24
10010760:	df000515 	stw	fp,20(sp)
10010764:	df000504 	addi	fp,sp,20
10010768:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001076c:	0005303a 	rdctl	r2,status
10010770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010774:	e0fffc17 	ldw	r3,-16(fp)
10010778:	00bfff84 	movi	r2,-2
1001077c:	1884703a 	and	r2,r3,r2
10010780:	1001703a 	wrctl	status,r2
  
  return context;
10010784:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010788:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001078c:	e0bfff17 	ldw	r2,-4(fp)
10010790:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010794:	e0bffd17 	ldw	r2,-12(fp)
10010798:	10800017 	ldw	r2,0(r2)
1001079c:	e0fffd17 	ldw	r3,-12(fp)
100107a0:	18c00117 	ldw	r3,4(r3)
100107a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100107a8:	e0bffd17 	ldw	r2,-12(fp)
100107ac:	10800117 	ldw	r2,4(r2)
100107b0:	e0fffd17 	ldw	r3,-12(fp)
100107b4:	18c00017 	ldw	r3,0(r3)
100107b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100107bc:	e0bffd17 	ldw	r2,-12(fp)
100107c0:	e0fffd17 	ldw	r3,-12(fp)
100107c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100107c8:	e0bffd17 	ldw	r2,-12(fp)
100107cc:	e0fffd17 	ldw	r3,-12(fp)
100107d0:	10c00015 	stw	r3,0(r2)
100107d4:	e0bffb17 	ldw	r2,-20(fp)
100107d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100107dc:	e0bffe17 	ldw	r2,-8(fp)
100107e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100107e4:	e037883a 	mov	sp,fp
100107e8:	df000017 	ldw	fp,0(sp)
100107ec:	dec00104 	addi	sp,sp,4
100107f0:	f800283a 	ret

100107f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100107f4:	defffb04 	addi	sp,sp,-20
100107f8:	dfc00415 	stw	ra,16(sp)
100107fc:	df000315 	stw	fp,12(sp)
10010800:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010804:	d0a00e17 	ldw	r2,-32712(gp)
10010808:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1001080c:	d0a6e617 	ldw	r2,-25704(gp)
10010810:	10800044 	addi	r2,r2,1
10010814:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010818:	00002e06 	br	100108d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1001081c:	e0bffd17 	ldw	r2,-12(fp)
10010820:	10800017 	ldw	r2,0(r2)
10010824:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010828:	e0bffd17 	ldw	r2,-12(fp)
1001082c:	10800403 	ldbu	r2,16(r2)
10010830:	10803fcc 	andi	r2,r2,255
10010834:	10000426 	beq	r2,zero,10010848 <alt_tick+0x54>
10010838:	d0a6e617 	ldw	r2,-25704(gp)
1001083c:	1000021e 	bne	r2,zero,10010848 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010840:	e0bffd17 	ldw	r2,-12(fp)
10010844:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010848:	e0bffd17 	ldw	r2,-12(fp)
1001084c:	10800217 	ldw	r2,8(r2)
10010850:	d0e6e617 	ldw	r3,-25704(gp)
10010854:	18801d36 	bltu	r3,r2,100108cc <alt_tick+0xd8>
10010858:	e0bffd17 	ldw	r2,-12(fp)
1001085c:	10800403 	ldbu	r2,16(r2)
10010860:	10803fcc 	andi	r2,r2,255
10010864:	1000191e 	bne	r2,zero,100108cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010868:	e0bffd17 	ldw	r2,-12(fp)
1001086c:	10800317 	ldw	r2,12(r2)
10010870:	e0fffd17 	ldw	r3,-12(fp)
10010874:	18c00517 	ldw	r3,20(r3)
10010878:	1809883a 	mov	r4,r3
1001087c:	103ee83a 	callr	r2
10010880:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010884:	e0bfff17 	ldw	r2,-4(fp)
10010888:	1000031e 	bne	r2,zero,10010898 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1001088c:	e13ffd17 	ldw	r4,-12(fp)
10010890:	001075c0 	call	1001075c <alt_alarm_stop>
10010894:	00000d06 	br	100108cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010898:	e0bffd17 	ldw	r2,-12(fp)
1001089c:	10c00217 	ldw	r3,8(r2)
100108a0:	e0bfff17 	ldw	r2,-4(fp)
100108a4:	1887883a 	add	r3,r3,r2
100108a8:	e0bffd17 	ldw	r2,-12(fp)
100108ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100108b0:	e0bffd17 	ldw	r2,-12(fp)
100108b4:	10c00217 	ldw	r3,8(r2)
100108b8:	d0a6e617 	ldw	r2,-25704(gp)
100108bc:	1880032e 	bgeu	r3,r2,100108cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100108c0:	e0bffd17 	ldw	r2,-12(fp)
100108c4:	00c00044 	movi	r3,1
100108c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100108cc:	e0bffe17 	ldw	r2,-8(fp)
100108d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100108d4:	e0fffd17 	ldw	r3,-12(fp)
100108d8:	d0a00e04 	addi	r2,gp,-32712
100108dc:	18bfcf1e 	bne	r3,r2,1001081c <__alt_data_end+0xf801081c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100108e0:	0001883a 	nop
}
100108e4:	e037883a 	mov	sp,fp
100108e8:	dfc00117 	ldw	ra,4(sp)
100108ec:	df000017 	ldw	fp,0(sp)
100108f0:	dec00204 	addi	sp,sp,8
100108f4:	f800283a 	ret

100108f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100108f8:	deffff04 	addi	sp,sp,-4
100108fc:	df000015 	stw	fp,0(sp)
10010900:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010904:	000170fa 	wrctl	ienable,zero
}
10010908:	e037883a 	mov	sp,fp
1001090c:	df000017 	ldw	fp,0(sp)
10010910:	dec00104 	addi	sp,sp,4
10010914:	f800283a 	ret

10010918 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010918:	defffa04 	addi	sp,sp,-24
1001091c:	dfc00515 	stw	ra,20(sp)
10010920:	df000415 	stw	fp,16(sp)
10010924:	df000404 	addi	fp,sp,16
10010928:	e13ffe15 	stw	r4,-8(fp)
1001092c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010930:	e0bfff17 	ldw	r2,-4(fp)
10010934:	10800017 	ldw	r2,0(r2)
10010938:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1001093c:	e13ffe17 	ldw	r4,-8(fp)
10010940:	00040140 	call	10004014 <strlen>
10010944:	10800044 	addi	r2,r2,1
10010948:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001094c:	00000d06 	br	10010984 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010950:	e0bffc17 	ldw	r2,-16(fp)
10010954:	10c00217 	ldw	r3,8(r2)
10010958:	e0bffd17 	ldw	r2,-12(fp)
1001095c:	1809883a 	mov	r4,r3
10010960:	e17ffe17 	ldw	r5,-8(fp)
10010964:	100d883a 	mov	r6,r2
10010968:	0010c780 	call	10010c78 <memcmp>
1001096c:	1000021e 	bne	r2,zero,10010978 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010970:	e0bffc17 	ldw	r2,-16(fp)
10010974:	00000706 	br	10010994 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010978:	e0bffc17 	ldw	r2,-16(fp)
1001097c:	10800017 	ldw	r2,0(r2)
10010980:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010984:	e0fffc17 	ldw	r3,-16(fp)
10010988:	e0bfff17 	ldw	r2,-4(fp)
1001098c:	18bff01e 	bne	r3,r2,10010950 <__alt_data_end+0xf8010950>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010990:	0005883a 	mov	r2,zero
}
10010994:	e037883a 	mov	sp,fp
10010998:	dfc00117 	ldw	ra,4(sp)
1001099c:	df000017 	ldw	fp,0(sp)
100109a0:	dec00204 	addi	sp,sp,8
100109a4:	f800283a 	ret

100109a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100109a8:	defffb04 	addi	sp,sp,-20
100109ac:	dfc00415 	stw	ra,16(sp)
100109b0:	df000315 	stw	fp,12(sp)
100109b4:	df000304 	addi	fp,sp,12
100109b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100109bc:	00840074 	movhi	r2,4097
100109c0:	108b9504 	addi	r2,r2,11860
100109c4:	10800017 	ldw	r2,0(r2)
100109c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100109cc:	00003106 	br	10010a94 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100109d0:	e0bffd17 	ldw	r2,-12(fp)
100109d4:	10800217 	ldw	r2,8(r2)
100109d8:	1009883a 	mov	r4,r2
100109dc:	00040140 	call	10004014 <strlen>
100109e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100109e4:	e0bffd17 	ldw	r2,-12(fp)
100109e8:	10c00217 	ldw	r3,8(r2)
100109ec:	e0bffe17 	ldw	r2,-8(fp)
100109f0:	10bfffc4 	addi	r2,r2,-1
100109f4:	1885883a 	add	r2,r3,r2
100109f8:	10800003 	ldbu	r2,0(r2)
100109fc:	10803fcc 	andi	r2,r2,255
10010a00:	1080201c 	xori	r2,r2,128
10010a04:	10bfe004 	addi	r2,r2,-128
10010a08:	10800bd8 	cmpnei	r2,r2,47
10010a0c:	1000031e 	bne	r2,zero,10010a1c <alt_find_file+0x74>
    {
      len -= 1;
10010a10:	e0bffe17 	ldw	r2,-8(fp)
10010a14:	10bfffc4 	addi	r2,r2,-1
10010a18:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010a1c:	e0bffe17 	ldw	r2,-8(fp)
10010a20:	e0ffff17 	ldw	r3,-4(fp)
10010a24:	1885883a 	add	r2,r3,r2
10010a28:	10800003 	ldbu	r2,0(r2)
10010a2c:	10803fcc 	andi	r2,r2,255
10010a30:	1080201c 	xori	r2,r2,128
10010a34:	10bfe004 	addi	r2,r2,-128
10010a38:	10800be0 	cmpeqi	r2,r2,47
10010a3c:	1000081e 	bne	r2,zero,10010a60 <alt_find_file+0xb8>
10010a40:	e0bffe17 	ldw	r2,-8(fp)
10010a44:	e0ffff17 	ldw	r3,-4(fp)
10010a48:	1885883a 	add	r2,r3,r2
10010a4c:	10800003 	ldbu	r2,0(r2)
10010a50:	10803fcc 	andi	r2,r2,255
10010a54:	1080201c 	xori	r2,r2,128
10010a58:	10bfe004 	addi	r2,r2,-128
10010a5c:	10000a1e 	bne	r2,zero,10010a88 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010a60:	e0bffd17 	ldw	r2,-12(fp)
10010a64:	10c00217 	ldw	r3,8(r2)
10010a68:	e0bffe17 	ldw	r2,-8(fp)
10010a6c:	1809883a 	mov	r4,r3
10010a70:	e17fff17 	ldw	r5,-4(fp)
10010a74:	100d883a 	mov	r6,r2
10010a78:	0010c780 	call	10010c78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010a7c:	1000021e 	bne	r2,zero,10010a88 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010a80:	e0bffd17 	ldw	r2,-12(fp)
10010a84:	00000806 	br	10010aa8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010a88:	e0bffd17 	ldw	r2,-12(fp)
10010a8c:	10800017 	ldw	r2,0(r2)
10010a90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010a94:	e0fffd17 	ldw	r3,-12(fp)
10010a98:	00840074 	movhi	r2,4097
10010a9c:	108b9504 	addi	r2,r2,11860
10010aa0:	18bfcb1e 	bne	r3,r2,100109d0 <__alt_data_end+0xf80109d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010aa4:	0005883a 	mov	r2,zero
}
10010aa8:	e037883a 	mov	sp,fp
10010aac:	dfc00117 	ldw	ra,4(sp)
10010ab0:	df000017 	ldw	fp,0(sp)
10010ab4:	dec00204 	addi	sp,sp,8
10010ab8:	f800283a 	ret

10010abc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010abc:	defffa04 	addi	sp,sp,-24
10010ac0:	dfc00515 	stw	ra,20(sp)
10010ac4:	df000415 	stw	fp,16(sp)
10010ac8:	dc000315 	stw	r16,12(sp)
10010acc:	df000404 	addi	fp,sp,16
10010ad0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010ad4:	00bffa04 	movi	r2,-24
10010ad8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010adc:	e03ffc15 	stw	zero,-16(fp)
10010ae0:	00002106 	br	10010b68 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010ae4:	04040074 	movhi	r16,4097
10010ae8:	84071704 	addi	r16,r16,7260
10010aec:	e0bffc17 	ldw	r2,-16(fp)
10010af0:	1009883a 	mov	r4,r2
10010af4:	01400304 	movi	r5,12
10010af8:	0002b140 	call	10002b14 <__mulsi3>
10010afc:	8085883a 	add	r2,r16,r2
10010b00:	10800017 	ldw	r2,0(r2)
10010b04:	1000151e 	bne	r2,zero,10010b5c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010b08:	04040074 	movhi	r16,4097
10010b0c:	84071704 	addi	r16,r16,7260
10010b10:	e0bffc17 	ldw	r2,-16(fp)
10010b14:	1009883a 	mov	r4,r2
10010b18:	01400304 	movi	r5,12
10010b1c:	0002b140 	call	10002b14 <__mulsi3>
10010b20:	8085883a 	add	r2,r16,r2
10010b24:	e0fffe17 	ldw	r3,-8(fp)
10010b28:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010b2c:	00840074 	movhi	r2,4097
10010b30:	108b9904 	addi	r2,r2,11876
10010b34:	10c00017 	ldw	r3,0(r2)
10010b38:	e0bffc17 	ldw	r2,-16(fp)
10010b3c:	1880040e 	bge	r3,r2,10010b50 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010b40:	00840074 	movhi	r2,4097
10010b44:	108b9904 	addi	r2,r2,11876
10010b48:	e0fffc17 	ldw	r3,-16(fp)
10010b4c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010b50:	e0bffc17 	ldw	r2,-16(fp)
10010b54:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010b58:	00000606 	br	10010b74 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010b5c:	e0bffc17 	ldw	r2,-16(fp)
10010b60:	10800044 	addi	r2,r2,1
10010b64:	e0bffc15 	stw	r2,-16(fp)
10010b68:	e0bffc17 	ldw	r2,-16(fp)
10010b6c:	10800810 	cmplti	r2,r2,32
10010b70:	103fdc1e 	bne	r2,zero,10010ae4 <__alt_data_end+0xf8010ae4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010b74:	e0bffd17 	ldw	r2,-12(fp)
}
10010b78:	e6ffff04 	addi	sp,fp,-4
10010b7c:	dfc00217 	ldw	ra,8(sp)
10010b80:	df000117 	ldw	fp,4(sp)
10010b84:	dc000017 	ldw	r16,0(sp)
10010b88:	dec00304 	addi	sp,sp,12
10010b8c:	f800283a 	ret

10010b90 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10010b90:	defffe04 	addi	sp,sp,-8
10010b94:	df000115 	stw	fp,4(sp)
10010b98:	df000104 	addi	fp,sp,4
10010b9c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10010ba0:	e0bfff17 	ldw	r2,-4(fp)
10010ba4:	10bffe84 	addi	r2,r2,-6
10010ba8:	10c00428 	cmpgeui	r3,r2,16
10010bac:	18001a1e 	bne	r3,zero,10010c18 <alt_exception_cause_generated_bad_addr+0x88>
10010bb0:	100690ba 	slli	r3,r2,2
10010bb4:	00840074 	movhi	r2,4097
10010bb8:	1082f204 	addi	r2,r2,3016
10010bbc:	1885883a 	add	r2,r3,r2
10010bc0:	10800017 	ldw	r2,0(r2)
10010bc4:	1000683a 	jmp	r2
10010bc8:	10010c08 	cmpgei	zero,r2,1072
10010bcc:	10010c08 	cmpgei	zero,r2,1072
10010bd0:	10010c18 	cmpnei	zero,r2,1072
10010bd4:	10010c18 	cmpnei	zero,r2,1072
10010bd8:	10010c18 	cmpnei	zero,r2,1072
10010bdc:	10010c08 	cmpgei	zero,r2,1072
10010be0:	10010c10 	cmplti	zero,r2,1072
10010be4:	10010c18 	cmpnei	zero,r2,1072
10010be8:	10010c08 	cmpgei	zero,r2,1072
10010bec:	10010c08 	cmpgei	zero,r2,1072
10010bf0:	10010c18 	cmpnei	zero,r2,1072
10010bf4:	10010c08 	cmpgei	zero,r2,1072
10010bf8:	10010c10 	cmplti	zero,r2,1072
10010bfc:	10010c18 	cmpnei	zero,r2,1072
10010c00:	10010c18 	cmpnei	zero,r2,1072
10010c04:	10010c08 	cmpgei	zero,r2,1072
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010c08:	00800044 	movi	r2,1
10010c0c:	00000306 	br	10010c1c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010c10:	0005883a 	mov	r2,zero
10010c14:	00000106 	br	10010c1c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010c18:	0005883a 	mov	r2,zero
  }
}
10010c1c:	e037883a 	mov	sp,fp
10010c20:	df000017 	ldw	fp,0(sp)
10010c24:	dec00104 	addi	sp,sp,4
10010c28:	f800283a 	ret

10010c2c <atexit>:
10010c2c:	200b883a 	mov	r5,r4
10010c30:	000d883a 	mov	r6,zero
10010c34:	0009883a 	mov	r4,zero
10010c38:	000f883a 	mov	r7,zero
10010c3c:	0010cf41 	jmpi	10010cf4 <__register_exitproc>

10010c40 <exit>:
10010c40:	defffe04 	addi	sp,sp,-8
10010c44:	000b883a 	mov	r5,zero
10010c48:	dc000015 	stw	r16,0(sp)
10010c4c:	dfc00115 	stw	ra,4(sp)
10010c50:	2021883a 	mov	r16,r4
10010c54:	0010e080 	call	10010e08 <__call_exitprocs>
10010c58:	00840074 	movhi	r2,4097
10010c5c:	108b8f04 	addi	r2,r2,11836
10010c60:	11000017 	ldw	r4,0(r2)
10010c64:	20800f17 	ldw	r2,60(r4)
10010c68:	10000126 	beq	r2,zero,10010c70 <exit+0x30>
10010c6c:	103ee83a 	callr	r2
10010c70:	8009883a 	mov	r4,r16
10010c74:	0010f9c0 	call	10010f9c <_exit>

10010c78 <memcmp>:
10010c78:	01c000c4 	movi	r7,3
10010c7c:	3980192e 	bgeu	r7,r6,10010ce4 <memcmp+0x6c>
10010c80:	2144b03a 	or	r2,r4,r5
10010c84:	11c4703a 	and	r2,r2,r7
10010c88:	10000f26 	beq	r2,zero,10010cc8 <memcmp+0x50>
10010c8c:	20800003 	ldbu	r2,0(r4)
10010c90:	28c00003 	ldbu	r3,0(r5)
10010c94:	10c0151e 	bne	r2,r3,10010cec <memcmp+0x74>
10010c98:	31bfff84 	addi	r6,r6,-2
10010c9c:	01ffffc4 	movi	r7,-1
10010ca0:	00000406 	br	10010cb4 <memcmp+0x3c>
10010ca4:	20800003 	ldbu	r2,0(r4)
10010ca8:	28c00003 	ldbu	r3,0(r5)
10010cac:	31bfffc4 	addi	r6,r6,-1
10010cb0:	10c00e1e 	bne	r2,r3,10010cec <memcmp+0x74>
10010cb4:	21000044 	addi	r4,r4,1
10010cb8:	29400044 	addi	r5,r5,1
10010cbc:	31fff91e 	bne	r6,r7,10010ca4 <__alt_data_end+0xf8010ca4>
10010cc0:	0005883a 	mov	r2,zero
10010cc4:	f800283a 	ret
10010cc8:	20c00017 	ldw	r3,0(r4)
10010ccc:	28800017 	ldw	r2,0(r5)
10010cd0:	1880041e 	bne	r3,r2,10010ce4 <memcmp+0x6c>
10010cd4:	31bfff04 	addi	r6,r6,-4
10010cd8:	21000104 	addi	r4,r4,4
10010cdc:	29400104 	addi	r5,r5,4
10010ce0:	39bff936 	bltu	r7,r6,10010cc8 <__alt_data_end+0xf8010cc8>
10010ce4:	303fe91e 	bne	r6,zero,10010c8c <__alt_data_end+0xf8010c8c>
10010ce8:	003ff506 	br	10010cc0 <__alt_data_end+0xf8010cc0>
10010cec:	10c5c83a 	sub	r2,r2,r3
10010cf0:	f800283a 	ret

10010cf4 <__register_exitproc>:
10010cf4:	00840074 	movhi	r2,4097
10010cf8:	defffa04 	addi	sp,sp,-24
10010cfc:	108b8f04 	addi	r2,r2,11836
10010d00:	dc000315 	stw	r16,12(sp)
10010d04:	14000017 	ldw	r16,0(r2)
10010d08:	dc400415 	stw	r17,16(sp)
10010d0c:	dfc00515 	stw	ra,20(sp)
10010d10:	80805217 	ldw	r2,328(r16)
10010d14:	2023883a 	mov	r17,r4
10010d18:	10003626 	beq	r2,zero,10010df4 <__register_exitproc+0x100>
10010d1c:	10c00117 	ldw	r3,4(r2)
10010d20:	010007c4 	movi	r4,31
10010d24:	20c00e16 	blt	r4,r3,10010d60 <__register_exitproc+0x6c>
10010d28:	1a400044 	addi	r9,r3,1
10010d2c:	8800211e 	bne	r17,zero,10010db4 <__register_exitproc+0xc0>
10010d30:	18c00084 	addi	r3,r3,2
10010d34:	18c7883a 	add	r3,r3,r3
10010d38:	18c7883a 	add	r3,r3,r3
10010d3c:	12400115 	stw	r9,4(r2)
10010d40:	10c7883a 	add	r3,r2,r3
10010d44:	19400015 	stw	r5,0(r3)
10010d48:	0005883a 	mov	r2,zero
10010d4c:	dfc00517 	ldw	ra,20(sp)
10010d50:	dc400417 	ldw	r17,16(sp)
10010d54:	dc000317 	ldw	r16,12(sp)
10010d58:	dec00604 	addi	sp,sp,24
10010d5c:	f800283a 	ret
10010d60:	00800034 	movhi	r2,0
10010d64:	10800004 	addi	r2,r2,0
10010d68:	10002526 	beq	r2,zero,10010e00 <__register_exitproc+0x10c>
10010d6c:	01006404 	movi	r4,400
10010d70:	d9400015 	stw	r5,0(sp)
10010d74:	d9800115 	stw	r6,4(sp)
10010d78:	d9c00215 	stw	r7,8(sp)
10010d7c:	00000000 	call	10000000 <__alt_mem_sdram>
10010d80:	d9400017 	ldw	r5,0(sp)
10010d84:	d9800117 	ldw	r6,4(sp)
10010d88:	d9c00217 	ldw	r7,8(sp)
10010d8c:	10001c26 	beq	r2,zero,10010e00 <__register_exitproc+0x10c>
10010d90:	80c05217 	ldw	r3,328(r16)
10010d94:	10000115 	stw	zero,4(r2)
10010d98:	02400044 	movi	r9,1
10010d9c:	10c00015 	stw	r3,0(r2)
10010da0:	80805215 	stw	r2,328(r16)
10010da4:	10006215 	stw	zero,392(r2)
10010da8:	10006315 	stw	zero,396(r2)
10010dac:	0007883a 	mov	r3,zero
10010db0:	883fdf26 	beq	r17,zero,10010d30 <__alt_data_end+0xf8010d30>
10010db4:	18d1883a 	add	r8,r3,r3
10010db8:	4211883a 	add	r8,r8,r8
10010dbc:	1211883a 	add	r8,r2,r8
10010dc0:	41802215 	stw	r6,136(r8)
10010dc4:	01000044 	movi	r4,1
10010dc8:	11806217 	ldw	r6,392(r2)
10010dcc:	20c8983a 	sll	r4,r4,r3
10010dd0:	310cb03a 	or	r6,r6,r4
10010dd4:	11806215 	stw	r6,392(r2)
10010dd8:	41c04215 	stw	r7,264(r8)
10010ddc:	01800084 	movi	r6,2
10010de0:	89bfd31e 	bne	r17,r6,10010d30 <__alt_data_end+0xf8010d30>
10010de4:	11806317 	ldw	r6,396(r2)
10010de8:	3108b03a 	or	r4,r6,r4
10010dec:	11006315 	stw	r4,396(r2)
10010df0:	003fcf06 	br	10010d30 <__alt_data_end+0xf8010d30>
10010df4:	80805304 	addi	r2,r16,332
10010df8:	80805215 	stw	r2,328(r16)
10010dfc:	003fc706 	br	10010d1c <__alt_data_end+0xf8010d1c>
10010e00:	00bfffc4 	movi	r2,-1
10010e04:	003fd106 	br	10010d4c <__alt_data_end+0xf8010d4c>

10010e08 <__call_exitprocs>:
10010e08:	00840074 	movhi	r2,4097
10010e0c:	108b8f04 	addi	r2,r2,11836
10010e10:	10800017 	ldw	r2,0(r2)
10010e14:	defff404 	addi	sp,sp,-48
10010e18:	dd800815 	stw	r22,32(sp)
10010e1c:	d8800015 	stw	r2,0(sp)
10010e20:	10805204 	addi	r2,r2,328
10010e24:	dd000615 	stw	r20,24(sp)
10010e28:	dc800415 	stw	r18,16(sp)
10010e2c:	dfc00b15 	stw	ra,44(sp)
10010e30:	df000a15 	stw	fp,40(sp)
10010e34:	ddc00915 	stw	r23,36(sp)
10010e38:	dd400715 	stw	r21,28(sp)
10010e3c:	dcc00515 	stw	r19,20(sp)
10010e40:	dc400315 	stw	r17,12(sp)
10010e44:	dc000215 	stw	r16,8(sp)
10010e48:	2025883a 	mov	r18,r4
10010e4c:	2829883a 	mov	r20,r5
10010e50:	d8800115 	stw	r2,4(sp)
10010e54:	05bfffc4 	movi	r22,-1
10010e58:	d8800017 	ldw	r2,0(sp)
10010e5c:	14c05217 	ldw	r19,328(r2)
10010e60:	98001d26 	beq	r19,zero,10010ed8 <__call_exitprocs+0xd0>
10010e64:	dd400117 	ldw	r21,4(sp)
10010e68:	98800117 	ldw	r2,4(r19)
10010e6c:	173fffc4 	addi	fp,r2,-1
10010e70:	e0000d16 	blt	fp,zero,10010ea8 <__call_exitprocs+0xa0>
10010e74:	14000044 	addi	r16,r2,1
10010e78:	8421883a 	add	r16,r16,r16
10010e7c:	8421883a 	add	r16,r16,r16
10010e80:	84402004 	addi	r17,r16,128
10010e84:	9c63883a 	add	r17,r19,r17
10010e88:	9c21883a 	add	r16,r19,r16
10010e8c:	a0001e26 	beq	r20,zero,10010f08 <__call_exitprocs+0x100>
10010e90:	80804017 	ldw	r2,256(r16)
10010e94:	15001c26 	beq	r2,r20,10010f08 <__call_exitprocs+0x100>
10010e98:	e73fffc4 	addi	fp,fp,-1
10010e9c:	843fff04 	addi	r16,r16,-4
10010ea0:	8c7fff04 	addi	r17,r17,-4
10010ea4:	e5bff91e 	bne	fp,r22,10010e8c <__alt_data_end+0xf8010e8c>
10010ea8:	00800034 	movhi	r2,0
10010eac:	10800004 	addi	r2,r2,0
10010eb0:	10000926 	beq	r2,zero,10010ed8 <__call_exitprocs+0xd0>
10010eb4:	98800117 	ldw	r2,4(r19)
10010eb8:	1000311e 	bne	r2,zero,10010f80 <__call_exitprocs+0x178>
10010ebc:	98800017 	ldw	r2,0(r19)
10010ec0:	10003426 	beq	r2,zero,10010f94 <__call_exitprocs+0x18c>
10010ec4:	9809883a 	mov	r4,r19
10010ec8:	a8800015 	stw	r2,0(r21)
10010ecc:	00000000 	call	10000000 <__alt_mem_sdram>
10010ed0:	acc00017 	ldw	r19,0(r21)
10010ed4:	983fe41e 	bne	r19,zero,10010e68 <__alt_data_end+0xf8010e68>
10010ed8:	dfc00b17 	ldw	ra,44(sp)
10010edc:	df000a17 	ldw	fp,40(sp)
10010ee0:	ddc00917 	ldw	r23,36(sp)
10010ee4:	dd800817 	ldw	r22,32(sp)
10010ee8:	dd400717 	ldw	r21,28(sp)
10010eec:	dd000617 	ldw	r20,24(sp)
10010ef0:	dcc00517 	ldw	r19,20(sp)
10010ef4:	dc800417 	ldw	r18,16(sp)
10010ef8:	dc400317 	ldw	r17,12(sp)
10010efc:	dc000217 	ldw	r16,8(sp)
10010f00:	dec00c04 	addi	sp,sp,48
10010f04:	f800283a 	ret
10010f08:	98800117 	ldw	r2,4(r19)
10010f0c:	80c00017 	ldw	r3,0(r16)
10010f10:	10bfffc4 	addi	r2,r2,-1
10010f14:	17001526 	beq	r2,fp,10010f6c <__call_exitprocs+0x164>
10010f18:	80000015 	stw	zero,0(r16)
10010f1c:	183fde26 	beq	r3,zero,10010e98 <__alt_data_end+0xf8010e98>
10010f20:	00800044 	movi	r2,1
10010f24:	1708983a 	sll	r4,r2,fp
10010f28:	98806217 	ldw	r2,392(r19)
10010f2c:	9dc00117 	ldw	r23,4(r19)
10010f30:	2084703a 	and	r2,r4,r2
10010f34:	1000061e 	bne	r2,zero,10010f50 <__call_exitprocs+0x148>
10010f38:	183ee83a 	callr	r3
10010f3c:	98800117 	ldw	r2,4(r19)
10010f40:	15ffc51e 	bne	r2,r23,10010e58 <__alt_data_end+0xf8010e58>
10010f44:	a8800017 	ldw	r2,0(r21)
10010f48:	14ffd326 	beq	r2,r19,10010e98 <__alt_data_end+0xf8010e98>
10010f4c:	003fc206 	br	10010e58 <__alt_data_end+0xf8010e58>
10010f50:	98806317 	ldw	r2,396(r19)
10010f54:	2084703a 	and	r2,r4,r2
10010f58:	1000061e 	bne	r2,zero,10010f74 <__call_exitprocs+0x16c>
10010f5c:	89400017 	ldw	r5,0(r17)
10010f60:	9009883a 	mov	r4,r18
10010f64:	183ee83a 	callr	r3
10010f68:	003ff406 	br	10010f3c <__alt_data_end+0xf8010f3c>
10010f6c:	9f000115 	stw	fp,4(r19)
10010f70:	003fea06 	br	10010f1c <__alt_data_end+0xf8010f1c>
10010f74:	89000017 	ldw	r4,0(r17)
10010f78:	183ee83a 	callr	r3
10010f7c:	003fef06 	br	10010f3c <__alt_data_end+0xf8010f3c>
10010f80:	98800017 	ldw	r2,0(r19)
10010f84:	982b883a 	mov	r21,r19
10010f88:	1027883a 	mov	r19,r2
10010f8c:	983fb61e 	bne	r19,zero,10010e68 <__alt_data_end+0xf8010e68>
10010f90:	003fd106 	br	10010ed8 <__alt_data_end+0xf8010ed8>
10010f94:	0005883a 	mov	r2,zero
10010f98:	003ffa06 	br	10010f84 <__alt_data_end+0xf8010f84>

10010f9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10010f9c:	defffd04 	addi	sp,sp,-12
10010fa0:	df000215 	stw	fp,8(sp)
10010fa4:	df000204 	addi	fp,sp,8
10010fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10010fac:	0001883a 	nop
10010fb0:	e0bfff17 	ldw	r2,-4(fp)
10010fb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10010fb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10010fbc:	10000226 	beq	r2,zero,10010fc8 <_exit+0x2c>
    ALT_SIM_FAIL();
10010fc0:	002af070 	cmpltui	zero,zero,43969
10010fc4:	00000106 	br	10010fcc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10010fc8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10010fcc:	003fff06 	br	10010fcc <__alt_data_end+0xf8010fcc>
