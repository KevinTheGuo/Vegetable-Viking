
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000579c memsz 0x0000579c flags r-x
    LOAD off    0x000067bc vaddr 0x100057bc paddr 0x10007228 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c94 vaddr 0x10008c94 paddr 0x10008c94 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054e0  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  1000570c  1000570c  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  100057bc  10007228  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10008c94  10008c94  00008c94  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00008228  2**0
                  CONTENTS
  7 .sdram        00000000  10008de8  10008de8  00008228  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000958  00000000  00000000  00008250  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016000  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005def  00000000  00000000  0001eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000662b  00000000  00000000  00024997  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000014e8  00000000  00000000  0002afc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002649  00000000  00000000  0002c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000044ae  00000000  00000000  0002eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00032fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000328  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003585f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00035862  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003586e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003586f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00035870  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00035874  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00035878  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003587c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00035887  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00035892  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0003589d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  000358a8  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  000358c2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008ff29  00000000  00000000  00039d09  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1000570c l    d  .rodata	00000000 .rodata
100057bc l    d  .rwdata	00000000 .rwdata
10008c94 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10008de8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
100057bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10001f3c l     F .text	00000008 __fp_lock
10001f44 l     F .text	00000008 __fp_unlock
10001f58 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
10002fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100030dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10003108 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10003210 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000330c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100033f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100035d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10007218 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10003858 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100039a8 l     F .text	00000038 alt_dev_reg
10006190 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003c84 l     F .text	00000204 altera_avalon_jtag_uart_irq
10003e88 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10004604 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10004a9c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10004bf4 l     F .text	00000050 alt_get_errno
10004c44 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008cbc g     O .bss	00000004 alt_instruction_exception_handler
10002ea8 g     F .text	00000054 _isatty_r
1000351c g     F .text	00000078 alt_main
10000494 g     F .text	000000b8 _puts_r
10008ce8 g     O .bss	00000100 alt_irq
10002efc g     F .text	0000005c _lseek_r
10007228 g       *ABS*	00000000 __flash_rwdata_start
10008de8 g       *ABS*	00000000 __alt_heap_start
10002c28 g     F .text	0000005c __sseek
100022a0 g     F .text	00000010 __sinit
100020f8 g     F .text	00000078 __sfmoreglue
100035b4 g     F .text	00000020 __malloc_unlock
10001464 g     F .text	0000015c memmove
10002288 g     F .text	00000018 _cleanup
10005034 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002e50 g     F .text	00000058 _fstat_r
10008ca0 g     O .bss	00000004 errno
10002ba4 g     F .text	00000008 __seofread
10008ca8 g     O .bss	00000004 alt_argv
1000f1f0 g       *ABS*	00000000 _gp
10006010 g     O .rwdata	00000180 alt_fd_list
10005054 g     F .text	00000090 alt_find_dev
1000132c g     F .text	00000138 memcpy
10001f4c g     F .text	0000000c _cleanup_r
10004b7c g     F .text	00000078 alt_io_redirect
1000570c g       *ABS*	00000000 __DTOR_END__
1000054c g     F .text	00000014 puts
100052cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
10004084 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003260 g     F .text	000000ac isatty
10008c9c g     O .bss	00000004 __malloc_top_pad
100005f8 g     F .text	000004a4 __sfvwrite_r
10001b60 g     F .text	00000054 _sbrk_r
10002f58 g     F .text	0000005c _read_r
10007210 g     O .rwdata	00000004 alt_max_fd
10002d3c g     F .text	00000100 _fclose_r
10001f0c g     F .text	00000030 fflush
10008c98 g     O .bss	00000004 __malloc_max_sbrked_mem
10003440 g     F .text	000000dc lseek
100071f0 g     O .rwdata	00000004 _global_impure_ptr
100015c0 g     F .text	000005a0 _realloc_r
10008de8 g       *ABS*	00000000 __bss_end
100049ac g     F .text	000000f0 alt_iic_isr_register
10004f30 g     F .text	00000104 alt_tick
100022c0 g     F .text	00000018 __fp_lock_all
10004960 g     F .text	0000004c alt_ic_irq_enabled
10004e98 g     F .text	00000098 alt_alarm_stop
10008cb0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10005fe8 g     O .rwdata	00000028 alt_dev_null
100045e8 g     F .text	0000001c alt_dcache_flush_all
10007228 g       *ABS*	00000000 __ram_rwdata_end
10007208 g     O .rwdata	00000008 alt_dev_list
100038a8 g     F .text	00000100 write
100057bc g       *ABS*	00000000 __ram_rodata_end
10003158 g     F .text	000000b8 fstat
10008de8 g       *ABS*	00000000 end
10003bc0 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1000570c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004290 g     F .text	00000218 altera_avalon_jtag_uart_write
100022b0 g     F .text	00000004 __sfp_lock_acquire
10001244 g     F .text	000000e8 memchr
10002414 g     F .text	000002f0 _free_r
10005544 g     F .text	00000194 __call_exitprocs
100071f8 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10008cb4 g     O .bss	00000004 _alt_tick_rate
10008cb8 g     O .bss	00000004 _alt_nticks
10003624 g     F .text	00000104 read
10003a14 g     F .text	00000048 alt_sys_init
10005430 g     F .text	00000114 __register_exitproc
10003f30 g     F .text	00000068 altera_avalon_jtag_uart_close
1000046c g     F .text	00000028 .hidden __mulsi3
100057bc g       *ABS*	00000000 __ram_rwdata_start
1000570c g       *ABS*	00000000 __ram_rodata_start
10008cc0 g     O .bss	00000028 __malloc_current_mallinfo
10003a5c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100051f8 g     F .text	000000d4 alt_get_fd
10002ce8 g     F .text	00000054 _close_r
100053b4 g     F .text	0000007c memcmp
10003b1c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10008de8 g       *ABS*	00000000 __alt_stack_base
10003b6c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10001bb4 g     F .text	00000130 __swsetup_r
10002170 g     F .text	00000118 __sfp
10005be0 g     O .rwdata	00000408 __malloc_av_
100022bc g     F .text	00000004 __sinit_lock_release
10002b50 g     F .text	00000054 __sread
100050e4 g     F .text	00000114 alt_find_file
10004654 g     F .text	000000a4 alt_dev_llist_insert
10003594 g     F .text	00000020 __malloc_lock
100037a8 g     F .text	000000b0 sbrk
10001ce4 g     F .text	00000228 _fflush_r
10008c94 g       *ABS*	00000000 __bss_start
10002a2c g     F .text	00000124 memset
100003d4 g     F .text	00000098 main
10008cac g     O .bss	00000004 alt_envp
10008c94 g     O .bss	00000004 __malloc_max_total_mem
10003abc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002c84 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10002e3c g     F .text	00000014 fclose
10000a9c g     F .text	000007a8 _malloc_r
10007214 g     O .rwdata	00000004 alt_errno
10002704 g     F .text	000000b8 _fwalk
100022f0 g     F .text	00000124 _malloc_trim_r
1000570c g       *ABS*	00000000 __CTOR_END__
1000570c g       *ABS*	00000000 __flash_rodata_start
1000570c g       *ABS*	00000000 __DTOR_LIST__
100039e0 g     F .text	00000034 alt_irq_init
10003728 g     F .text	00000080 alt_release_fd
10005368 g     F .text	00000014 atexit
10002c8c g     F .text	0000005c _write_r
100071f4 g     O .rwdata	00000004 _impure_ptr
10008ca4 g     O .bss	00000004 alt_argc
10004754 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100022d8 g     F .text	00000018 __fp_unlock_all
10007200 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100047cc g     F .text	00000050 alt_ic_isr_register
10007228 g       *ABS*	00000000 _edata
10008de8 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10003f98 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100048bc g     F .text	000000a4 alt_ic_irq_disable
10002bac g     F .text	0000007c __swrite
100071fc g     O .rwdata	00000004 __malloc_trim_threshold
1000537c g     F .text	00000038 exit
100027bc g     F .text	000000b8 _fwalk_reent
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100022b4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100056d8 g     F .text	00000034 _exit
100044a8 g     F .text	00000140 alt_alarm_start
10002874 g     F .text	000001b8 __smakebuf_r
10000560 g     F .text	00000098 strlen
10004d38 g     F .text	00000160 open
100047b0 g     F .text	0000001c alt_icache_flush_all
10000268 g     F .text	0000016c FPGAcommunicator
1000721c g     O .rwdata	00000004 alt_priority_mask
1000481c g     F .text	000000a0 alt_ic_irq_enable
10007220 g     O .rwdata	00000008 alt_alarm_list
100046f8 g     F .text	0000005c _do_ctors
10003004 g     F .text	000000d8 close
10003370 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
100022b8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a33a04 	addi	r2,r2,-29464
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a33a04 	addi	r2,r2,-29464
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6b317 	ldw	r2,-25908(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6b317 	ldw	r2,-25908(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
10000238:	d6bc7c14 	ori	gp,gp,61936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10a32514 	ori	r2,r2,35988

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18e37a14 	ori	r3,r3,36328

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	00033700 	call	10003370 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000351c0 	call	1000351c <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <FPGAcommunicator>:
#define to_sw_sig (char*) 0x00000030 // actual address here
//#define to_sw_port (char*) 0x00000030 // actual address here

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator(unsigned long* FPGAmessage)
{
10000268:	defffd04 	addi	sp,sp,-12
1000026c:	dfc00215 	stw	ra,8(sp)
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
10000278:	e13fff15 	stw	r4,-4(fp)
	*to_hw_sig = 2;	// 2 means we're starting communication
1000027c:	00801404 	movi	r2,80
10000280:	00c00084 	movi	r3,2
10000284:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000288:	00800804 	movi	r2,32
1000028c:	e0ffff17 	ldw	r3,-4(fp)
10000290:	18c00017 	ldw	r3,0(r3)
10000294:	10c00005 	stb	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
10000298:	00803404 	movi	r2,208
1000029c:	e0ffff17 	ldw	r3,-4(fp)
100002a0:	18c00104 	addi	r3,r3,4
100002a4:	18c00017 	ldw	r3,0(r3)
100002a8:	10c00005 	stb	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
100002ac:	00803004 	movi	r2,192
100002b0:	e0ffff17 	ldw	r3,-4(fp)
100002b4:	18c00204 	addi	r3,r3,8
100002b8:	18c00017 	ldw	r3,0(r3)
100002bc:	10c00005 	stb	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
100002c0:	00802c04 	movi	r2,176
100002c4:	e0ffff17 	ldw	r3,-4(fp)
100002c8:	18c00304 	addi	r3,r3,12
100002cc:	18c00017 	ldw	r3,0(r3)
100002d0:	10c00005 	stb	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
100002d4:	00802804 	movi	r2,160
100002d8:	e0ffff17 	ldw	r3,-4(fp)
100002dc:	18c00404 	addi	r3,r3,16
100002e0:	18c00017 	ldw	r3,0(r3)
100002e4:	10c00005 	stb	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
100002e8:	00802404 	movi	r2,144
100002ec:	e0ffff17 	ldw	r3,-4(fp)
100002f0:	18c00504 	addi	r3,r3,20
100002f4:	18c00017 	ldw	r3,0(r3)
100002f8:	10c00005 	stb	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
100002fc:	00802004 	movi	r2,128
10000300:	e0ffff17 	ldw	r3,-4(fp)
10000304:	18c00604 	addi	r3,r3,24
10000308:	18c00017 	ldw	r3,0(r3)
1000030c:	10c00005 	stb	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10000310:	00801004 	movi	r2,64
10000314:	e0ffff17 	ldw	r3,-4(fp)
10000318:	18c00704 	addi	r3,r3,28
1000031c:	18c00017 	ldw	r3,0(r3)
10000320:	10c00005 	stb	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10000324:	00801c04 	movi	r2,112
10000328:	e0ffff17 	ldw	r3,-4(fp)
1000032c:	18c00804 	addi	r3,r3,32
10000330:	18c00017 	ldw	r3,0(r3)
10000334:	10c00005 	stb	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10000338:	00801804 	movi	r2,96
1000033c:	e0ffff17 	ldw	r3,-4(fp)
10000340:	18c00904 	addi	r3,r3,36
10000344:	18c00017 	ldw	r3,0(r3)
10000348:	10c00005 	stb	r3,0(r2)

	printf("got past putting it in\n");
1000034c:	01040034 	movhi	r4,4096
10000350:	2115c304 	addi	r4,r4,22284
10000354:	000054c0 	call	1000054c <puts>

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000358:	0001883a 	nop
1000035c:	00800c04 	movi	r2,48
10000360:	10800003 	ldbu	r2,0(r2)
10000364:	10803fcc 	andi	r2,r2,255
10000368:	1080201c 	xori	r2,r2,128
1000036c:	10bfe004 	addi	r2,r2,-128
10000370:	10800098 	cmpnei	r2,r2,2
10000374:	103ff91e 	bne	r2,zero,1000035c <__alt_data_end+0xf800035c>

	*to_hw_sig = 1;		// now we are done putting in messages
10000378:	00801404 	movi	r2,80
1000037c:	00c00044 	movi	r3,1
10000380:	10c00005 	stb	r3,0(r2)

	printf("almost done\n");
10000384:	01040034 	movhi	r4,4096
10000388:	2115c904 	addi	r4,r4,22308
1000038c:	000054c0 	call	1000054c <puts>

	while(*to_sw_sig != 0); // wait for response from hardware
10000390:	0001883a 	nop
10000394:	00800c04 	movi	r2,48
10000398:	10800003 	ldbu	r2,0(r2)
1000039c:	10803fcc 	andi	r2,r2,255
100003a0:	1080201c 	xori	r2,r2,128
100003a4:	10bfe004 	addi	r2,r2,-128
100003a8:	103ffa1e 	bne	r2,zero,10000394 <__alt_data_end+0xf8000394>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
100003ac:	00801404 	movi	r2,80
100003b0:	10000005 	stb	zero,0(r2)

	printf("message stuff done\n");
100003b4:	01040034 	movhi	r4,4096
100003b8:	2115cc04 	addi	r4,r4,22320
100003bc:	000054c0 	call	1000054c <puts>
}
100003c0:	e037883a 	mov	sp,fp
100003c4:	dfc00117 	ldw	ra,4(sp)
100003c8:	df000017 	ldw	fp,0(sp)
100003cc:	dec00204 	addi	sp,sp,8
100003d0:	f800283a 	ret

100003d4 <main>:

int main()
{
100003d4:	deffed04 	addi	sp,sp,-76
100003d8:	dfc01215 	stw	ra,72(sp)
100003dc:	df001115 	stw	fp,68(sp)
100003e0:	df001104 	addi	fp,sp,68
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<16; i++)
100003e4:	e03fef15 	stw	zero,-68(fp)
100003e8:	00001106 	br	10000430 <main+0x5c>
	{
		printf("Puttin in our message yo\n");
100003ec:	01040034 	movhi	r4,4096
100003f0:	2115d104 	addi	r4,r4,22340
100003f4:	000054c0 	call	1000054c <puts>
		FPGAmessage[i] = i*9;
100003f8:	e13fef17 	ldw	r4,-68(fp)
100003fc:	01400244 	movi	r5,9
10000400:	000046c0 	call	1000046c <__mulsi3>
10000404:	1007883a 	mov	r3,r2
10000408:	e0bfef17 	ldw	r2,-68(fp)
1000040c:	1085883a 	add	r2,r2,r2
10000410:	1085883a 	add	r2,r2,r2
10000414:	e13fef04 	addi	r4,fp,-68
10000418:	2085883a 	add	r2,r4,r2
1000041c:	10800104 	addi	r2,r2,4
10000420:	10c00015 	stw	r3,0(r2)
{
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long FPGAmessage[16];

	int i;
	for (i=0; i<16; i++)
10000424:	e0bfef17 	ldw	r2,-68(fp)
10000428:	10800044 	addi	r2,r2,1
1000042c:	e0bfef15 	stw	r2,-68(fp)
10000430:	e0bfef17 	ldw	r2,-68(fp)
10000434:	10800410 	cmplti	r2,r2,16
10000438:	103fec1e 	bne	r2,zero,100003ec <__alt_data_end+0xf80003ec>
	{
		printf("Puttin in our message yo\n");
		FPGAmessage[i] = i*9;
	}

	printf("Now we doing our communicatin\n");
1000043c:	01040034 	movhi	r4,4096
10000440:	2115d804 	addi	r4,r4,22368
10000444:	000054c0 	call	1000054c <puts>
	FPGAcommunicator(FPGAmessage);
10000448:	e0bff004 	addi	r2,fp,-64
1000044c:	1009883a 	mov	r4,r2
10000450:	00002680 	call	10000268 <FPGAcommunicator>

	return 0;
10000454:	0005883a 	mov	r2,zero
}
10000458:	e037883a 	mov	sp,fp
1000045c:	dfc00117 	ldw	ra,4(sp)
10000460:	df000017 	ldw	fp,0(sp)
10000464:	dec00204 	addi	sp,sp,8
10000468:	f800283a 	ret

1000046c <__mulsi3>:
1000046c:	0005883a 	mov	r2,zero
10000470:	20000726 	beq	r4,zero,10000490 <__mulsi3+0x24>
10000474:	20c0004c 	andi	r3,r4,1
10000478:	2008d07a 	srli	r4,r4,1
1000047c:	18000126 	beq	r3,zero,10000484 <__mulsi3+0x18>
10000480:	1145883a 	add	r2,r2,r5
10000484:	294b883a 	add	r5,r5,r5
10000488:	203ffa1e 	bne	r4,zero,10000474 <__alt_data_end+0xf8000474>
1000048c:	f800283a 	ret
10000490:	f800283a 	ret

10000494 <_puts_r>:
10000494:	defff604 	addi	sp,sp,-40
10000498:	dc000715 	stw	r16,28(sp)
1000049c:	2021883a 	mov	r16,r4
100004a0:	2809883a 	mov	r4,r5
100004a4:	dc400815 	stw	r17,32(sp)
100004a8:	dfc00915 	stw	ra,36(sp)
100004ac:	2823883a 	mov	r17,r5
100004b0:	00005600 	call	10000560 <strlen>
100004b4:	00c40034 	movhi	r3,4096
100004b8:	18dc7d04 	addi	r3,r3,29172
100004bc:	18c00017 	ldw	r3,0(r3)
100004c0:	11000044 	addi	r4,r2,1
100004c4:	d8800115 	stw	r2,4(sp)
100004c8:	18c00217 	ldw	r3,8(r3)
100004cc:	01440034 	movhi	r5,4096
100004d0:	2955e004 	addi	r5,r5,22400
100004d4:	1880030b 	ldhu	r2,12(r3)
100004d8:	d9400215 	stw	r5,8(sp)
100004dc:	d9000615 	stw	r4,24(sp)
100004e0:	01400044 	movi	r5,1
100004e4:	01000084 	movi	r4,2
100004e8:	d9000515 	stw	r4,20(sp)
100004ec:	dc400015 	stw	r17,0(sp)
100004f0:	d9400315 	stw	r5,12(sp)
100004f4:	dec00415 	stw	sp,16(sp)
100004f8:	1108000c 	andi	r4,r2,8192
100004fc:	2000061e 	bne	r4,zero,10000518 <_puts_r+0x84>
10000500:	19401917 	ldw	r5,100(r3)
10000504:	0137ffc4 	movi	r4,-8193
10000508:	10880014 	ori	r2,r2,8192
1000050c:	2908703a 	and	r4,r5,r4
10000510:	1880030d 	sth	r2,12(r3)
10000514:	19001915 	stw	r4,100(r3)
10000518:	81400217 	ldw	r5,8(r16)
1000051c:	8009883a 	mov	r4,r16
10000520:	d9800404 	addi	r6,sp,16
10000524:	00005f80 	call	100005f8 <__sfvwrite_r>
10000528:	1000061e 	bne	r2,zero,10000544 <_puts_r+0xb0>
1000052c:	00800284 	movi	r2,10
10000530:	dfc00917 	ldw	ra,36(sp)
10000534:	dc400817 	ldw	r17,32(sp)
10000538:	dc000717 	ldw	r16,28(sp)
1000053c:	dec00a04 	addi	sp,sp,40
10000540:	f800283a 	ret
10000544:	00bfffc4 	movi	r2,-1
10000548:	003ff906 	br	10000530 <__alt_data_end+0xf8000530>

1000054c <puts>:
1000054c:	00840034 	movhi	r2,4096
10000550:	109c7d04 	addi	r2,r2,29172
10000554:	200b883a 	mov	r5,r4
10000558:	11000017 	ldw	r4,0(r2)
1000055c:	00004941 	jmpi	10000494 <_puts_r>

10000560 <strlen>:
10000560:	208000cc 	andi	r2,r4,3
10000564:	10002026 	beq	r2,zero,100005e8 <strlen+0x88>
10000568:	20800007 	ldb	r2,0(r4)
1000056c:	10002026 	beq	r2,zero,100005f0 <strlen+0x90>
10000570:	2005883a 	mov	r2,r4
10000574:	00000206 	br	10000580 <strlen+0x20>
10000578:	10c00007 	ldb	r3,0(r2)
1000057c:	18001826 	beq	r3,zero,100005e0 <strlen+0x80>
10000580:	10800044 	addi	r2,r2,1
10000584:	10c000cc 	andi	r3,r2,3
10000588:	183ffb1e 	bne	r3,zero,10000578 <__alt_data_end+0xf8000578>
1000058c:	10c00017 	ldw	r3,0(r2)
10000590:	01ffbff4 	movhi	r7,65279
10000594:	39ffbfc4 	addi	r7,r7,-257
10000598:	00ca303a 	nor	r5,zero,r3
1000059c:	01a02074 	movhi	r6,32897
100005a0:	19c7883a 	add	r3,r3,r7
100005a4:	31a02004 	addi	r6,r6,-32640
100005a8:	1946703a 	and	r3,r3,r5
100005ac:	1986703a 	and	r3,r3,r6
100005b0:	1800091e 	bne	r3,zero,100005d8 <strlen+0x78>
100005b4:	10800104 	addi	r2,r2,4
100005b8:	10c00017 	ldw	r3,0(r2)
100005bc:	19cb883a 	add	r5,r3,r7
100005c0:	00c6303a 	nor	r3,zero,r3
100005c4:	28c6703a 	and	r3,r5,r3
100005c8:	1986703a 	and	r3,r3,r6
100005cc:	183ff926 	beq	r3,zero,100005b4 <__alt_data_end+0xf80005b4>
100005d0:	00000106 	br	100005d8 <strlen+0x78>
100005d4:	10800044 	addi	r2,r2,1
100005d8:	10c00007 	ldb	r3,0(r2)
100005dc:	183ffd1e 	bne	r3,zero,100005d4 <__alt_data_end+0xf80005d4>
100005e0:	1105c83a 	sub	r2,r2,r4
100005e4:	f800283a 	ret
100005e8:	2005883a 	mov	r2,r4
100005ec:	003fe706 	br	1000058c <__alt_data_end+0xf800058c>
100005f0:	0005883a 	mov	r2,zero
100005f4:	f800283a 	ret

100005f8 <__sfvwrite_r>:
100005f8:	30800217 	ldw	r2,8(r6)
100005fc:	10004526 	beq	r2,zero,10000714 <__sfvwrite_r+0x11c>
10000600:	28c0030b 	ldhu	r3,12(r5)
10000604:	defff404 	addi	sp,sp,-48
10000608:	dd400715 	stw	r21,28(sp)
1000060c:	dcc00515 	stw	r19,20(sp)
10000610:	dc000215 	stw	r16,8(sp)
10000614:	dfc00b15 	stw	ra,44(sp)
10000618:	df000a15 	stw	fp,40(sp)
1000061c:	ddc00915 	stw	r23,36(sp)
10000620:	dd800815 	stw	r22,32(sp)
10000624:	dd000615 	stw	r20,24(sp)
10000628:	dc800415 	stw	r18,16(sp)
1000062c:	dc400315 	stw	r17,12(sp)
10000630:	1880020c 	andi	r2,r3,8
10000634:	2821883a 	mov	r16,r5
10000638:	202b883a 	mov	r21,r4
1000063c:	3027883a 	mov	r19,r6
10000640:	10002526 	beq	r2,zero,100006d8 <__sfvwrite_r+0xe0>
10000644:	28800417 	ldw	r2,16(r5)
10000648:	10002326 	beq	r2,zero,100006d8 <__sfvwrite_r+0xe0>
1000064c:	1880008c 	andi	r2,r3,2
10000650:	9c400017 	ldw	r17,0(r19)
10000654:	10003126 	beq	r2,zero,1000071c <__sfvwrite_r+0x124>
10000658:	0029883a 	mov	r20,zero
1000065c:	0025883a 	mov	r18,zero
10000660:	05810004 	movi	r22,1024
10000664:	a00d883a 	mov	r6,r20
10000668:	a809883a 	mov	r4,r21
1000066c:	90002526 	beq	r18,zero,10000704 <__sfvwrite_r+0x10c>
10000670:	900f883a 	mov	r7,r18
10000674:	81400717 	ldw	r5,28(r16)
10000678:	b480012e 	bgeu	r22,r18,10000680 <__sfvwrite_r+0x88>
1000067c:	01c10004 	movi	r7,1024
10000680:	80800917 	ldw	r2,36(r16)
10000684:	103ee83a 	callr	r2
10000688:	0080510e 	bge	zero,r2,100007d0 <__sfvwrite_r+0x1d8>
1000068c:	98c00217 	ldw	r3,8(r19)
10000690:	a0a9883a 	add	r20,r20,r2
10000694:	90a5c83a 	sub	r18,r18,r2
10000698:	1885c83a 	sub	r2,r3,r2
1000069c:	98800215 	stw	r2,8(r19)
100006a0:	103ff01e 	bne	r2,zero,10000664 <__alt_data_end+0xf8000664>
100006a4:	0005883a 	mov	r2,zero
100006a8:	dfc00b17 	ldw	ra,44(sp)
100006ac:	df000a17 	ldw	fp,40(sp)
100006b0:	ddc00917 	ldw	r23,36(sp)
100006b4:	dd800817 	ldw	r22,32(sp)
100006b8:	dd400717 	ldw	r21,28(sp)
100006bc:	dd000617 	ldw	r20,24(sp)
100006c0:	dcc00517 	ldw	r19,20(sp)
100006c4:	dc800417 	ldw	r18,16(sp)
100006c8:	dc400317 	ldw	r17,12(sp)
100006cc:	dc000217 	ldw	r16,8(sp)
100006d0:	dec00c04 	addi	sp,sp,48
100006d4:	f800283a 	ret
100006d8:	a809883a 	mov	r4,r21
100006dc:	800b883a 	mov	r5,r16
100006e0:	0001bb40 	call	10001bb4 <__swsetup_r>
100006e4:	80c0030b 	ldhu	r3,12(r16)
100006e8:	103fd826 	beq	r2,zero,1000064c <__alt_data_end+0xf800064c>
100006ec:	18c01014 	ori	r3,r3,64
100006f0:	80c0030d 	sth	r3,12(r16)
100006f4:	00c00244 	movi	r3,9
100006f8:	00bfffc4 	movi	r2,-1
100006fc:	a8c00015 	stw	r3,0(r21)
10000700:	003fe906 	br	100006a8 <__alt_data_end+0xf80006a8>
10000704:	8d000017 	ldw	r20,0(r17)
10000708:	8c800117 	ldw	r18,4(r17)
1000070c:	8c400204 	addi	r17,r17,8
10000710:	003fd406 	br	10000664 <__alt_data_end+0xf8000664>
10000714:	0005883a 	mov	r2,zero
10000718:	f800283a 	ret
1000071c:	1880004c 	andi	r2,r3,1
10000720:	1000301e 	bne	r2,zero,100007e4 <__sfvwrite_r+0x1ec>
10000724:	002f883a 	mov	r23,zero
10000728:	0025883a 	mov	r18,zero
1000072c:	90001c26 	beq	r18,zero,100007a0 <__sfvwrite_r+0x1a8>
10000730:	1880800c 	andi	r2,r3,512
10000734:	85000217 	ldw	r20,8(r16)
10000738:	10006c26 	beq	r2,zero,100008ec <__sfvwrite_r+0x2f4>
1000073c:	a02d883a 	mov	r22,r20
10000740:	95008536 	bltu	r18,r20,10000958 <__sfvwrite_r+0x360>
10000744:	1881200c 	andi	r2,r3,1152
10000748:	10009d1e 	bne	r2,zero,100009c0 <__sfvwrite_r+0x3c8>
1000074c:	81000017 	ldw	r4,0(r16)
10000750:	a039883a 	mov	fp,r20
10000754:	9029883a 	mov	r20,r18
10000758:	b80b883a 	mov	r5,r23
1000075c:	b00d883a 	mov	r6,r22
10000760:	00014640 	call	10001464 <memmove>
10000764:	80c00217 	ldw	r3,8(r16)
10000768:	81000017 	ldw	r4,0(r16)
1000076c:	9005883a 	mov	r2,r18
10000770:	1f39c83a 	sub	fp,r3,fp
10000774:	258f883a 	add	r7,r4,r22
10000778:	87000215 	stw	fp,8(r16)
1000077c:	81c00015 	stw	r7,0(r16)
10000780:	98c00217 	ldw	r3,8(r19)
10000784:	b8af883a 	add	r23,r23,r2
10000788:	90a5c83a 	sub	r18,r18,r2
1000078c:	1d05c83a 	sub	r2,r3,r20
10000790:	98800215 	stw	r2,8(r19)
10000794:	103fc326 	beq	r2,zero,100006a4 <__alt_data_end+0xf80006a4>
10000798:	80c0030b 	ldhu	r3,12(r16)
1000079c:	903fe41e 	bne	r18,zero,10000730 <__alt_data_end+0xf8000730>
100007a0:	8dc00017 	ldw	r23,0(r17)
100007a4:	8c800117 	ldw	r18,4(r17)
100007a8:	8c400204 	addi	r17,r17,8
100007ac:	003fdf06 	br	1000072c <__alt_data_end+0xf800072c>
100007b0:	00015c00 	call	100015c0 <_realloc_r>
100007b4:	102d883a 	mov	r22,r2
100007b8:	1000a01e 	bne	r2,zero,10000a3c <__sfvwrite_r+0x444>
100007bc:	81400417 	ldw	r5,16(r16)
100007c0:	a809883a 	mov	r4,r21
100007c4:	00024140 	call	10002414 <_free_r>
100007c8:	00800304 	movi	r2,12
100007cc:	a8800015 	stw	r2,0(r21)
100007d0:	80c0030b 	ldhu	r3,12(r16)
100007d4:	00bfffc4 	movi	r2,-1
100007d8:	18c01014 	ori	r3,r3,64
100007dc:	80c0030d 	sth	r3,12(r16)
100007e0:	003fb106 	br	100006a8 <__alt_data_end+0xf80006a8>
100007e4:	0029883a 	mov	r20,zero
100007e8:	0011883a 	mov	r8,zero
100007ec:	0039883a 	mov	fp,zero
100007f0:	0025883a 	mov	r18,zero
100007f4:	90001f26 	beq	r18,zero,10000874 <__sfvwrite_r+0x27c>
100007f8:	40006826 	beq	r8,zero,1000099c <__sfvwrite_r+0x3a4>
100007fc:	a02f883a 	mov	r23,r20
10000800:	9500012e 	bgeu	r18,r20,10000808 <__sfvwrite_r+0x210>
10000804:	902f883a 	mov	r23,r18
10000808:	81000017 	ldw	r4,0(r16)
1000080c:	80800417 	ldw	r2,16(r16)
10000810:	b82d883a 	mov	r22,r23
10000814:	81800217 	ldw	r6,8(r16)
10000818:	81c00517 	ldw	r7,20(r16)
1000081c:	1100022e 	bgeu	r2,r4,10000828 <__sfvwrite_r+0x230>
10000820:	31c7883a 	add	r3,r6,r7
10000824:	1dc01816 	blt	r3,r23,10000888 <__sfvwrite_r+0x290>
10000828:	b9c03f16 	blt	r23,r7,10000928 <__sfvwrite_r+0x330>
1000082c:	80800917 	ldw	r2,36(r16)
10000830:	81400717 	ldw	r5,28(r16)
10000834:	a809883a 	mov	r4,r21
10000838:	da000115 	stw	r8,4(sp)
1000083c:	e00d883a 	mov	r6,fp
10000840:	103ee83a 	callr	r2
10000844:	102d883a 	mov	r22,r2
10000848:	da000117 	ldw	r8,4(sp)
1000084c:	00bfe00e 	bge	zero,r2,100007d0 <__alt_data_end+0xf80007d0>
10000850:	a5a9c83a 	sub	r20,r20,r22
10000854:	a0001f26 	beq	r20,zero,100008d4 <__sfvwrite_r+0x2dc>
10000858:	98800217 	ldw	r2,8(r19)
1000085c:	e5b9883a 	add	fp,fp,r22
10000860:	95a5c83a 	sub	r18,r18,r22
10000864:	15adc83a 	sub	r22,r2,r22
10000868:	9d800215 	stw	r22,8(r19)
1000086c:	b03f8d26 	beq	r22,zero,100006a4 <__alt_data_end+0xf80006a4>
10000870:	903fe11e 	bne	r18,zero,100007f8 <__alt_data_end+0xf80007f8>
10000874:	8f000017 	ldw	fp,0(r17)
10000878:	8c800117 	ldw	r18,4(r17)
1000087c:	0011883a 	mov	r8,zero
10000880:	8c400204 	addi	r17,r17,8
10000884:	003fdb06 	br	100007f4 <__alt_data_end+0xf80007f4>
10000888:	180d883a 	mov	r6,r3
1000088c:	e00b883a 	mov	r5,fp
10000890:	da000115 	stw	r8,4(sp)
10000894:	d8c00015 	stw	r3,0(sp)
10000898:	00014640 	call	10001464 <memmove>
1000089c:	d8c00017 	ldw	r3,0(sp)
100008a0:	80800017 	ldw	r2,0(r16)
100008a4:	a809883a 	mov	r4,r21
100008a8:	800b883a 	mov	r5,r16
100008ac:	10c5883a 	add	r2,r2,r3
100008b0:	80800015 	stw	r2,0(r16)
100008b4:	d8c00015 	stw	r3,0(sp)
100008b8:	0001ce40 	call	10001ce4 <_fflush_r>
100008bc:	d8c00017 	ldw	r3,0(sp)
100008c0:	da000117 	ldw	r8,4(sp)
100008c4:	103fc21e 	bne	r2,zero,100007d0 <__alt_data_end+0xf80007d0>
100008c8:	182d883a 	mov	r22,r3
100008cc:	a5a9c83a 	sub	r20,r20,r22
100008d0:	a03fe11e 	bne	r20,zero,10000858 <__alt_data_end+0xf8000858>
100008d4:	a809883a 	mov	r4,r21
100008d8:	800b883a 	mov	r5,r16
100008dc:	0001ce40 	call	10001ce4 <_fflush_r>
100008e0:	103fbb1e 	bne	r2,zero,100007d0 <__alt_data_end+0xf80007d0>
100008e4:	0011883a 	mov	r8,zero
100008e8:	003fdb06 	br	10000858 <__alt_data_end+0xf8000858>
100008ec:	81000017 	ldw	r4,0(r16)
100008f0:	80800417 	ldw	r2,16(r16)
100008f4:	1100012e 	bgeu	r2,r4,100008fc <__sfvwrite_r+0x304>
100008f8:	a4805a36 	bltu	r20,r18,10000a64 <__sfvwrite_r+0x46c>
100008fc:	81c00517 	ldw	r7,20(r16)
10000900:	91c01a36 	bltu	r18,r7,1000096c <__sfvwrite_r+0x374>
10000904:	80800917 	ldw	r2,36(r16)
10000908:	81400717 	ldw	r5,28(r16)
1000090c:	a809883a 	mov	r4,r21
10000910:	b80d883a 	mov	r6,r23
10000914:	103ee83a 	callr	r2
10000918:	1029883a 	mov	r20,r2
1000091c:	00bfac0e 	bge	zero,r2,100007d0 <__alt_data_end+0xf80007d0>
10000920:	a005883a 	mov	r2,r20
10000924:	003f9606 	br	10000780 <__alt_data_end+0xf8000780>
10000928:	b80d883a 	mov	r6,r23
1000092c:	e00b883a 	mov	r5,fp
10000930:	da000115 	stw	r8,4(sp)
10000934:	00014640 	call	10001464 <memmove>
10000938:	80800217 	ldw	r2,8(r16)
1000093c:	80c00017 	ldw	r3,0(r16)
10000940:	da000117 	ldw	r8,4(sp)
10000944:	15c5c83a 	sub	r2,r2,r23
10000948:	1def883a 	add	r23,r3,r23
1000094c:	80800215 	stw	r2,8(r16)
10000950:	85c00015 	stw	r23,0(r16)
10000954:	003fbe06 	br	10000850 <__alt_data_end+0xf8000850>
10000958:	81000017 	ldw	r4,0(r16)
1000095c:	9039883a 	mov	fp,r18
10000960:	9029883a 	mov	r20,r18
10000964:	902d883a 	mov	r22,r18
10000968:	003f7b06 	br	10000758 <__alt_data_end+0xf8000758>
1000096c:	b80b883a 	mov	r5,r23
10000970:	900d883a 	mov	r6,r18
10000974:	00014640 	call	10001464 <memmove>
10000978:	80c00217 	ldw	r3,8(r16)
1000097c:	80800017 	ldw	r2,0(r16)
10000980:	9029883a 	mov	r20,r18
10000984:	1c87c83a 	sub	r3,r3,r18
10000988:	1485883a 	add	r2,r2,r18
1000098c:	80800015 	stw	r2,0(r16)
10000990:	80c00215 	stw	r3,8(r16)
10000994:	9005883a 	mov	r2,r18
10000998:	003f7906 	br	10000780 <__alt_data_end+0xf8000780>
1000099c:	e009883a 	mov	r4,fp
100009a0:	01400284 	movi	r5,10
100009a4:	900d883a 	mov	r6,r18
100009a8:	00012440 	call	10001244 <memchr>
100009ac:	10003826 	beq	r2,zero,10000a90 <__sfvwrite_r+0x498>
100009b0:	10800044 	addi	r2,r2,1
100009b4:	1729c83a 	sub	r20,r2,fp
100009b8:	02000044 	movi	r8,1
100009bc:	003f8f06 	br	100007fc <__alt_data_end+0xf80007fc>
100009c0:	80800517 	ldw	r2,20(r16)
100009c4:	81400417 	ldw	r5,16(r16)
100009c8:	87000017 	ldw	fp,0(r16)
100009cc:	10a9883a 	add	r20,r2,r2
100009d0:	a085883a 	add	r2,r20,r2
100009d4:	1028d7fa 	srli	r20,r2,31
100009d8:	e179c83a 	sub	fp,fp,r5
100009dc:	e1000044 	addi	r4,fp,1
100009e0:	a085883a 	add	r2,r20,r2
100009e4:	1029d07a 	srai	r20,r2,1
100009e8:	2485883a 	add	r2,r4,r18
100009ec:	a00d883a 	mov	r6,r20
100009f0:	a080022e 	bgeu	r20,r2,100009fc <__sfvwrite_r+0x404>
100009f4:	1029883a 	mov	r20,r2
100009f8:	100d883a 	mov	r6,r2
100009fc:	18c1000c 	andi	r3,r3,1024
10000a00:	a809883a 	mov	r4,r21
10000a04:	183f6a26 	beq	r3,zero,100007b0 <__alt_data_end+0xf80007b0>
10000a08:	300b883a 	mov	r5,r6
10000a0c:	0000a9c0 	call	10000a9c <_malloc_r>
10000a10:	102d883a 	mov	r22,r2
10000a14:	103f6c26 	beq	r2,zero,100007c8 <__alt_data_end+0xf80007c8>
10000a18:	81400417 	ldw	r5,16(r16)
10000a1c:	1009883a 	mov	r4,r2
10000a20:	e00d883a 	mov	r6,fp
10000a24:	000132c0 	call	1000132c <memcpy>
10000a28:	8080030b 	ldhu	r2,12(r16)
10000a2c:	00fedfc4 	movi	r3,-1153
10000a30:	10c4703a 	and	r2,r2,r3
10000a34:	10802014 	ori	r2,r2,128
10000a38:	8080030d 	sth	r2,12(r16)
10000a3c:	b709883a 	add	r4,r22,fp
10000a40:	a707c83a 	sub	r3,r20,fp
10000a44:	85800415 	stw	r22,16(r16)
10000a48:	85000515 	stw	r20,20(r16)
10000a4c:	81000015 	stw	r4,0(r16)
10000a50:	9039883a 	mov	fp,r18
10000a54:	80c00215 	stw	r3,8(r16)
10000a58:	9029883a 	mov	r20,r18
10000a5c:	902d883a 	mov	r22,r18
10000a60:	003f3d06 	br	10000758 <__alt_data_end+0xf8000758>
10000a64:	b80b883a 	mov	r5,r23
10000a68:	a00d883a 	mov	r6,r20
10000a6c:	00014640 	call	10001464 <memmove>
10000a70:	80800017 	ldw	r2,0(r16)
10000a74:	a809883a 	mov	r4,r21
10000a78:	800b883a 	mov	r5,r16
10000a7c:	1505883a 	add	r2,r2,r20
10000a80:	80800015 	stw	r2,0(r16)
10000a84:	0001ce40 	call	10001ce4 <_fflush_r>
10000a88:	103fa526 	beq	r2,zero,10000920 <__alt_data_end+0xf8000920>
10000a8c:	003f5006 	br	100007d0 <__alt_data_end+0xf80007d0>
10000a90:	95000044 	addi	r20,r18,1
10000a94:	02000044 	movi	r8,1
10000a98:	003f5806 	br	100007fc <__alt_data_end+0xf80007fc>

10000a9c <_malloc_r>:
10000a9c:	defff504 	addi	sp,sp,-44
10000aa0:	dc800315 	stw	r18,12(sp)
10000aa4:	dfc00a15 	stw	ra,40(sp)
10000aa8:	df000915 	stw	fp,36(sp)
10000aac:	ddc00815 	stw	r23,32(sp)
10000ab0:	dd800715 	stw	r22,28(sp)
10000ab4:	dd400615 	stw	r21,24(sp)
10000ab8:	dd000515 	stw	r20,20(sp)
10000abc:	dcc00415 	stw	r19,16(sp)
10000ac0:	dc400215 	stw	r17,8(sp)
10000ac4:	dc000115 	stw	r16,4(sp)
10000ac8:	288002c4 	addi	r2,r5,11
10000acc:	00c00584 	movi	r3,22
10000ad0:	2025883a 	mov	r18,r4
10000ad4:	18802a2e 	bgeu	r3,r2,10000b80 <_malloc_r+0xe4>
10000ad8:	047ffe04 	movi	r17,-8
10000adc:	1462703a 	and	r17,r2,r17
10000ae0:	88009e16 	blt	r17,zero,10000d5c <_malloc_r+0x2c0>
10000ae4:	89409d36 	bltu	r17,r5,10000d5c <_malloc_r+0x2c0>
10000ae8:	00035940 	call	10003594 <__malloc_lock>
10000aec:	00807dc4 	movi	r2,503
10000af0:	14402736 	bltu	r2,r17,10000b90 <_malloc_r+0xf4>
10000af4:	8806d0fa 	srli	r3,r17,3
10000af8:	04c40034 	movhi	r19,4096
10000afc:	9cd6f804 	addi	r19,r19,23520
10000b00:	18c5883a 	add	r2,r3,r3
10000b04:	1085883a 	add	r2,r2,r2
10000b08:	1085883a 	add	r2,r2,r2
10000b0c:	9885883a 	add	r2,r19,r2
10000b10:	14000317 	ldw	r16,12(r2)
10000b14:	80814a26 	beq	r16,r2,10001040 <_malloc_r+0x5a4>
10000b18:	80c00117 	ldw	r3,4(r16)
10000b1c:	81000317 	ldw	r4,12(r16)
10000b20:	00bfff04 	movi	r2,-4
10000b24:	1884703a 	and	r2,r3,r2
10000b28:	81400217 	ldw	r5,8(r16)
10000b2c:	8085883a 	add	r2,r16,r2
10000b30:	10c00117 	ldw	r3,4(r2)
10000b34:	29000315 	stw	r4,12(r5)
10000b38:	21400215 	stw	r5,8(r4)
10000b3c:	18c00054 	ori	r3,r3,1
10000b40:	10c00115 	stw	r3,4(r2)
10000b44:	9009883a 	mov	r4,r18
10000b48:	00035b40 	call	100035b4 <__malloc_unlock>
10000b4c:	80800204 	addi	r2,r16,8
10000b50:	dfc00a17 	ldw	ra,40(sp)
10000b54:	df000917 	ldw	fp,36(sp)
10000b58:	ddc00817 	ldw	r23,32(sp)
10000b5c:	dd800717 	ldw	r22,28(sp)
10000b60:	dd400617 	ldw	r21,24(sp)
10000b64:	dd000517 	ldw	r20,20(sp)
10000b68:	dcc00417 	ldw	r19,16(sp)
10000b6c:	dc800317 	ldw	r18,12(sp)
10000b70:	dc400217 	ldw	r17,8(sp)
10000b74:	dc000117 	ldw	r16,4(sp)
10000b78:	dec00b04 	addi	sp,sp,44
10000b7c:	f800283a 	ret
10000b80:	04400404 	movi	r17,16
10000b84:	89407536 	bltu	r17,r5,10000d5c <_malloc_r+0x2c0>
10000b88:	00035940 	call	10003594 <__malloc_lock>
10000b8c:	003fd906 	br	10000af4 <__alt_data_end+0xf8000af4>
10000b90:	8806d27a 	srli	r3,r17,9
10000b94:	18007526 	beq	r3,zero,10000d6c <_malloc_r+0x2d0>
10000b98:	00800104 	movi	r2,4
10000b9c:	10c0ef36 	bltu	r2,r3,10000f5c <_malloc_r+0x4c0>
10000ba0:	8806d1ba 	srli	r3,r17,6
10000ba4:	19c00e04 	addi	r7,r3,56
10000ba8:	39cb883a 	add	r5,r7,r7
10000bac:	04c40034 	movhi	r19,4096
10000bb0:	294b883a 	add	r5,r5,r5
10000bb4:	9cd6f804 	addi	r19,r19,23520
10000bb8:	294b883a 	add	r5,r5,r5
10000bbc:	994b883a 	add	r5,r19,r5
10000bc0:	2c000317 	ldw	r16,12(r5)
10000bc4:	2c000e26 	beq	r5,r16,10000c00 <_malloc_r+0x164>
10000bc8:	80800117 	ldw	r2,4(r16)
10000bcc:	01bfff04 	movi	r6,-4
10000bd0:	010003c4 	movi	r4,15
10000bd4:	1184703a 	and	r2,r2,r6
10000bd8:	1447c83a 	sub	r3,r2,r17
10000bdc:	20c00716 	blt	r4,r3,10000bfc <_malloc_r+0x160>
10000be0:	1800650e 	bge	r3,zero,10000d78 <_malloc_r+0x2dc>
10000be4:	84000317 	ldw	r16,12(r16)
10000be8:	2c000526 	beq	r5,r16,10000c00 <_malloc_r+0x164>
10000bec:	80800117 	ldw	r2,4(r16)
10000bf0:	1184703a 	and	r2,r2,r6
10000bf4:	1447c83a 	sub	r3,r2,r17
10000bf8:	20fff90e 	bge	r4,r3,10000be0 <__alt_data_end+0xf8000be0>
10000bfc:	39ffffc4 	addi	r7,r7,-1
10000c00:	38c00044 	addi	r3,r7,1
10000c04:	01840034 	movhi	r6,4096
10000c08:	9c000417 	ldw	r16,16(r19)
10000c0c:	3196f804 	addi	r6,r6,23520
10000c10:	32400204 	addi	r9,r6,8
10000c14:	82410326 	beq	r16,r9,10001024 <_malloc_r+0x588>
10000c18:	81000117 	ldw	r4,4(r16)
10000c1c:	00bfff04 	movi	r2,-4
10000c20:	208e703a 	and	r7,r4,r2
10000c24:	3c45c83a 	sub	r2,r7,r17
10000c28:	010003c4 	movi	r4,15
10000c2c:	2080ee16 	blt	r4,r2,10000fe8 <_malloc_r+0x54c>
10000c30:	32400515 	stw	r9,20(r6)
10000c34:	32400415 	stw	r9,16(r6)
10000c38:	1000510e 	bge	r2,zero,10000d80 <_malloc_r+0x2e4>
10000c3c:	00807fc4 	movi	r2,511
10000c40:	11c0ce36 	bltu	r2,r7,10000f7c <_malloc_r+0x4e0>
10000c44:	3808d0fa 	srli	r4,r7,3
10000c48:	01c00044 	movi	r7,1
10000c4c:	30800117 	ldw	r2,4(r6)
10000c50:	210b883a 	add	r5,r4,r4
10000c54:	294b883a 	add	r5,r5,r5
10000c58:	2009d0ba 	srai	r4,r4,2
10000c5c:	294b883a 	add	r5,r5,r5
10000c60:	298b883a 	add	r5,r5,r6
10000c64:	2a000217 	ldw	r8,8(r5)
10000c68:	3908983a 	sll	r4,r7,r4
10000c6c:	81400315 	stw	r5,12(r16)
10000c70:	82000215 	stw	r8,8(r16)
10000c74:	2088b03a 	or	r4,r4,r2
10000c78:	2c000215 	stw	r16,8(r5)
10000c7c:	31000115 	stw	r4,4(r6)
10000c80:	44000315 	stw	r16,12(r8)
10000c84:	1805d0ba 	srai	r2,r3,2
10000c88:	01400044 	movi	r5,1
10000c8c:	288a983a 	sll	r5,r5,r2
10000c90:	21404336 	bltu	r4,r5,10000da0 <_malloc_r+0x304>
10000c94:	2144703a 	and	r2,r4,r5
10000c98:	10000a1e 	bne	r2,zero,10000cc4 <_malloc_r+0x228>
10000c9c:	00bfff04 	movi	r2,-4
10000ca0:	294b883a 	add	r5,r5,r5
10000ca4:	1886703a 	and	r3,r3,r2
10000ca8:	2144703a 	and	r2,r4,r5
10000cac:	18c00104 	addi	r3,r3,4
10000cb0:	1000041e 	bne	r2,zero,10000cc4 <_malloc_r+0x228>
10000cb4:	294b883a 	add	r5,r5,r5
10000cb8:	2144703a 	and	r2,r4,r5
10000cbc:	18c00104 	addi	r3,r3,4
10000cc0:	103ffc26 	beq	r2,zero,10000cb4 <__alt_data_end+0xf8000cb4>
10000cc4:	023fff04 	movi	r8,-4
10000cc8:	01c003c4 	movi	r7,15
10000ccc:	18c5883a 	add	r2,r3,r3
10000cd0:	1085883a 	add	r2,r2,r2
10000cd4:	1085883a 	add	r2,r2,r2
10000cd8:	9895883a 	add	r10,r19,r2
10000cdc:	52c00304 	addi	r11,r10,12
10000ce0:	1819883a 	mov	r12,r3
10000ce4:	5c000017 	ldw	r16,0(r11)
10000ce8:	59bffd04 	addi	r6,r11,-12
10000cec:	8180041e 	bne	r16,r6,10000d00 <_malloc_r+0x264>
10000cf0:	0000ce06 	br	1000102c <_malloc_r+0x590>
10000cf4:	2000d70e 	bge	r4,zero,10001054 <_malloc_r+0x5b8>
10000cf8:	84000317 	ldw	r16,12(r16)
10000cfc:	8180cb26 	beq	r16,r6,1000102c <_malloc_r+0x590>
10000d00:	80800117 	ldw	r2,4(r16)
10000d04:	1204703a 	and	r2,r2,r8
10000d08:	1449c83a 	sub	r4,r2,r17
10000d0c:	393ff90e 	bge	r7,r4,10000cf4 <__alt_data_end+0xf8000cf4>
10000d10:	80800317 	ldw	r2,12(r16)
10000d14:	80c00217 	ldw	r3,8(r16)
10000d18:	89400054 	ori	r5,r17,1
10000d1c:	81400115 	stw	r5,4(r16)
10000d20:	18800315 	stw	r2,12(r3)
10000d24:	10c00215 	stw	r3,8(r2)
10000d28:	8463883a 	add	r17,r16,r17
10000d2c:	9c400515 	stw	r17,20(r19)
10000d30:	9c400415 	stw	r17,16(r19)
10000d34:	20800054 	ori	r2,r4,1
10000d38:	88800115 	stw	r2,4(r17)
10000d3c:	8a400315 	stw	r9,12(r17)
10000d40:	8a400215 	stw	r9,8(r17)
10000d44:	8923883a 	add	r17,r17,r4
10000d48:	89000015 	stw	r4,0(r17)
10000d4c:	9009883a 	mov	r4,r18
10000d50:	00035b40 	call	100035b4 <__malloc_unlock>
10000d54:	80800204 	addi	r2,r16,8
10000d58:	003f7d06 	br	10000b50 <__alt_data_end+0xf8000b50>
10000d5c:	00800304 	movi	r2,12
10000d60:	90800015 	stw	r2,0(r18)
10000d64:	0005883a 	mov	r2,zero
10000d68:	003f7906 	br	10000b50 <__alt_data_end+0xf8000b50>
10000d6c:	01401f84 	movi	r5,126
10000d70:	01c00fc4 	movi	r7,63
10000d74:	003f8d06 	br	10000bac <__alt_data_end+0xf8000bac>
10000d78:	81000317 	ldw	r4,12(r16)
10000d7c:	003f6a06 	br	10000b28 <__alt_data_end+0xf8000b28>
10000d80:	81c5883a 	add	r2,r16,r7
10000d84:	10c00117 	ldw	r3,4(r2)
10000d88:	9009883a 	mov	r4,r18
10000d8c:	18c00054 	ori	r3,r3,1
10000d90:	10c00115 	stw	r3,4(r2)
10000d94:	00035b40 	call	100035b4 <__malloc_unlock>
10000d98:	80800204 	addi	r2,r16,8
10000d9c:	003f6c06 	br	10000b50 <__alt_data_end+0xf8000b50>
10000da0:	9c000217 	ldw	r16,8(r19)
10000da4:	00bfff04 	movi	r2,-4
10000da8:	85800117 	ldw	r22,4(r16)
10000dac:	b0ac703a 	and	r22,r22,r2
10000db0:	b4400336 	bltu	r22,r17,10000dc0 <_malloc_r+0x324>
10000db4:	b445c83a 	sub	r2,r22,r17
10000db8:	00c003c4 	movi	r3,15
10000dbc:	18805d16 	blt	r3,r2,10000f34 <_malloc_r+0x498>
10000dc0:	05c40034 	movhi	r23,4096
10000dc4:	00840074 	movhi	r2,4097
10000dc8:	bddc7e04 	addi	r23,r23,29176
10000dcc:	10a32704 	addi	r2,r2,-29540
10000dd0:	15400017 	ldw	r21,0(r2)
10000dd4:	b9000017 	ldw	r4,0(r23)
10000dd8:	00ffffc4 	movi	r3,-1
10000ddc:	858d883a 	add	r6,r16,r22
10000de0:	8d6b883a 	add	r21,r17,r21
10000de4:	20c0e426 	beq	r4,r3,10001178 <_malloc_r+0x6dc>
10000de8:	ad4403c4 	addi	r21,r21,4111
10000dec:	00fc0004 	movi	r3,-4096
10000df0:	a8ea703a 	and	r21,r21,r3
10000df4:	9009883a 	mov	r4,r18
10000df8:	a80b883a 	mov	r5,r21
10000dfc:	d9800015 	stw	r6,0(sp)
10000e00:	0001b600 	call	10001b60 <_sbrk_r>
10000e04:	00ffffc4 	movi	r3,-1
10000e08:	1029883a 	mov	r20,r2
10000e0c:	d9800017 	ldw	r6,0(sp)
10000e10:	10c0a426 	beq	r2,r3,100010a4 <_malloc_r+0x608>
10000e14:	1180a236 	bltu	r2,r6,100010a0 <_malloc_r+0x604>
10000e18:	07040074 	movhi	fp,4097
10000e1c:	e7233004 	addi	fp,fp,-29504
10000e20:	e0c00017 	ldw	r3,0(fp)
10000e24:	a8c7883a 	add	r3,r21,r3
10000e28:	e0c00015 	stw	r3,0(fp)
10000e2c:	3500da26 	beq	r6,r20,10001198 <_malloc_r+0x6fc>
10000e30:	b9000017 	ldw	r4,0(r23)
10000e34:	00bfffc4 	movi	r2,-1
10000e38:	2080e426 	beq	r4,r2,100011cc <_malloc_r+0x730>
10000e3c:	a185c83a 	sub	r2,r20,r6
10000e40:	1885883a 	add	r2,r3,r2
10000e44:	e0800015 	stw	r2,0(fp)
10000e48:	a0c001cc 	andi	r3,r20,7
10000e4c:	1800b526 	beq	r3,zero,10001124 <_malloc_r+0x688>
10000e50:	a0e9c83a 	sub	r20,r20,r3
10000e54:	00840204 	movi	r2,4104
10000e58:	a5000204 	addi	r20,r20,8
10000e5c:	10c7c83a 	sub	r3,r2,r3
10000e60:	a545883a 	add	r2,r20,r21
10000e64:	1083ffcc 	andi	r2,r2,4095
10000e68:	18abc83a 	sub	r21,r3,r2
10000e6c:	9009883a 	mov	r4,r18
10000e70:	a80b883a 	mov	r5,r21
10000e74:	0001b600 	call	10001b60 <_sbrk_r>
10000e78:	00ffffc4 	movi	r3,-1
10000e7c:	10c0d026 	beq	r2,r3,100011c0 <_malloc_r+0x724>
10000e80:	1507c83a 	sub	r3,r2,r20
10000e84:	a8c7883a 	add	r3,r21,r3
10000e88:	18c00054 	ori	r3,r3,1
10000e8c:	e0800017 	ldw	r2,0(fp)
10000e90:	9d000215 	stw	r20,8(r19)
10000e94:	a0c00115 	stw	r3,4(r20)
10000e98:	a887883a 	add	r3,r21,r2
10000e9c:	e0c00015 	stw	r3,0(fp)
10000ea0:	84c00e26 	beq	r16,r19,10000edc <_malloc_r+0x440>
10000ea4:	018003c4 	movi	r6,15
10000ea8:	3580a02e 	bgeu	r6,r22,1000112c <_malloc_r+0x690>
10000eac:	81400117 	ldw	r5,4(r16)
10000eb0:	013ffe04 	movi	r4,-8
10000eb4:	b0bffd04 	addi	r2,r22,-12
10000eb8:	1104703a 	and	r2,r2,r4
10000ebc:	2900004c 	andi	r4,r5,1
10000ec0:	1108b03a 	or	r4,r2,r4
10000ec4:	81000115 	stw	r4,4(r16)
10000ec8:	01400144 	movi	r5,5
10000ecc:	8089883a 	add	r4,r16,r2
10000ed0:	21400115 	stw	r5,4(r4)
10000ed4:	21400215 	stw	r5,8(r4)
10000ed8:	3080c036 	bltu	r6,r2,100011dc <_malloc_r+0x740>
10000edc:	00840074 	movhi	r2,4097
10000ee0:	10a32604 	addi	r2,r2,-29544
10000ee4:	11000017 	ldw	r4,0(r2)
10000ee8:	20c0012e 	bgeu	r4,r3,10000ef0 <_malloc_r+0x454>
10000eec:	10c00015 	stw	r3,0(r2)
10000ef0:	00840074 	movhi	r2,4097
10000ef4:	10a32504 	addi	r2,r2,-29548
10000ef8:	11000017 	ldw	r4,0(r2)
10000efc:	9c000217 	ldw	r16,8(r19)
10000f00:	20c0012e 	bgeu	r4,r3,10000f08 <_malloc_r+0x46c>
10000f04:	10c00015 	stw	r3,0(r2)
10000f08:	80c00117 	ldw	r3,4(r16)
10000f0c:	00bfff04 	movi	r2,-4
10000f10:	1886703a 	and	r3,r3,r2
10000f14:	1c45c83a 	sub	r2,r3,r17
10000f18:	1c400236 	bltu	r3,r17,10000f24 <_malloc_r+0x488>
10000f1c:	00c003c4 	movi	r3,15
10000f20:	18800416 	blt	r3,r2,10000f34 <_malloc_r+0x498>
10000f24:	9009883a 	mov	r4,r18
10000f28:	00035b40 	call	100035b4 <__malloc_unlock>
10000f2c:	0005883a 	mov	r2,zero
10000f30:	003f0706 	br	10000b50 <__alt_data_end+0xf8000b50>
10000f34:	88c00054 	ori	r3,r17,1
10000f38:	80c00115 	stw	r3,4(r16)
10000f3c:	8463883a 	add	r17,r16,r17
10000f40:	10800054 	ori	r2,r2,1
10000f44:	9c400215 	stw	r17,8(r19)
10000f48:	88800115 	stw	r2,4(r17)
10000f4c:	9009883a 	mov	r4,r18
10000f50:	00035b40 	call	100035b4 <__malloc_unlock>
10000f54:	80800204 	addi	r2,r16,8
10000f58:	003efd06 	br	10000b50 <__alt_data_end+0xf8000b50>
10000f5c:	00800504 	movi	r2,20
10000f60:	10c0482e 	bgeu	r2,r3,10001084 <_malloc_r+0x5e8>
10000f64:	00801504 	movi	r2,84
10000f68:	10c06836 	bltu	r2,r3,1000110c <_malloc_r+0x670>
10000f6c:	8806d33a 	srli	r3,r17,12
10000f70:	19c01b84 	addi	r7,r3,110
10000f74:	39cb883a 	add	r5,r7,r7
10000f78:	003f0c06 	br	10000bac <__alt_data_end+0xf8000bac>
10000f7c:	3804d27a 	srli	r2,r7,9
10000f80:	01000104 	movi	r4,4
10000f84:	2080422e 	bgeu	r4,r2,10001090 <_malloc_r+0x5f4>
10000f88:	01000504 	movi	r4,20
10000f8c:	20807c36 	bltu	r4,r2,10001180 <_malloc_r+0x6e4>
10000f90:	110016c4 	addi	r4,r2,91
10000f94:	210b883a 	add	r5,r4,r4
10000f98:	294b883a 	add	r5,r5,r5
10000f9c:	294b883a 	add	r5,r5,r5
10000fa0:	994b883a 	add	r5,r19,r5
10000fa4:	28800217 	ldw	r2,8(r5)
10000fa8:	02040034 	movhi	r8,4096
10000fac:	4216f804 	addi	r8,r8,23520
10000fb0:	11406326 	beq	r2,r5,10001140 <_malloc_r+0x6a4>
10000fb4:	01bfff04 	movi	r6,-4
10000fb8:	11000117 	ldw	r4,4(r2)
10000fbc:	2188703a 	and	r4,r4,r6
10000fc0:	3900022e 	bgeu	r7,r4,10000fcc <_malloc_r+0x530>
10000fc4:	10800217 	ldw	r2,8(r2)
10000fc8:	28bffb1e 	bne	r5,r2,10000fb8 <__alt_data_end+0xf8000fb8>
10000fcc:	11800317 	ldw	r6,12(r2)
10000fd0:	99000117 	ldw	r4,4(r19)
10000fd4:	81800315 	stw	r6,12(r16)
10000fd8:	80800215 	stw	r2,8(r16)
10000fdc:	34000215 	stw	r16,8(r6)
10000fe0:	14000315 	stw	r16,12(r2)
10000fe4:	003f2706 	br	10000c84 <__alt_data_end+0xf8000c84>
10000fe8:	88c00054 	ori	r3,r17,1
10000fec:	80c00115 	stw	r3,4(r16)
10000ff0:	8463883a 	add	r17,r16,r17
10000ff4:	34400515 	stw	r17,20(r6)
10000ff8:	34400415 	stw	r17,16(r6)
10000ffc:	10c00054 	ori	r3,r2,1
10001000:	8a400315 	stw	r9,12(r17)
10001004:	8a400215 	stw	r9,8(r17)
10001008:	88c00115 	stw	r3,4(r17)
1000100c:	88a3883a 	add	r17,r17,r2
10001010:	88800015 	stw	r2,0(r17)
10001014:	9009883a 	mov	r4,r18
10001018:	00035b40 	call	100035b4 <__malloc_unlock>
1000101c:	80800204 	addi	r2,r16,8
10001020:	003ecb06 	br	10000b50 <__alt_data_end+0xf8000b50>
10001024:	31000117 	ldw	r4,4(r6)
10001028:	003f1606 	br	10000c84 <__alt_data_end+0xf8000c84>
1000102c:	63000044 	addi	r12,r12,1
10001030:	608000cc 	andi	r2,r12,3
10001034:	5ac00204 	addi	r11,r11,8
10001038:	103f2a1e 	bne	r2,zero,10000ce4 <__alt_data_end+0xf8000ce4>
1000103c:	00002106 	br	100010c4 <_malloc_r+0x628>
10001040:	80800204 	addi	r2,r16,8
10001044:	84000517 	ldw	r16,20(r16)
10001048:	143eb31e 	bne	r2,r16,10000b18 <__alt_data_end+0xf8000b18>
1000104c:	18c00084 	addi	r3,r3,2
10001050:	003eec06 	br	10000c04 <__alt_data_end+0xf8000c04>
10001054:	8085883a 	add	r2,r16,r2
10001058:	10c00117 	ldw	r3,4(r2)
1000105c:	81000317 	ldw	r4,12(r16)
10001060:	81400217 	ldw	r5,8(r16)
10001064:	18c00054 	ori	r3,r3,1
10001068:	10c00115 	stw	r3,4(r2)
1000106c:	29000315 	stw	r4,12(r5)
10001070:	21400215 	stw	r5,8(r4)
10001074:	9009883a 	mov	r4,r18
10001078:	00035b40 	call	100035b4 <__malloc_unlock>
1000107c:	80800204 	addi	r2,r16,8
10001080:	003eb306 	br	10000b50 <__alt_data_end+0xf8000b50>
10001084:	19c016c4 	addi	r7,r3,91
10001088:	39cb883a 	add	r5,r7,r7
1000108c:	003ec706 	br	10000bac <__alt_data_end+0xf8000bac>
10001090:	3804d1ba 	srli	r2,r7,6
10001094:	11000e04 	addi	r4,r2,56
10001098:	210b883a 	add	r5,r4,r4
1000109c:	003fbe06 	br	10000f98 <__alt_data_end+0xf8000f98>
100010a0:	84ff5d26 	beq	r16,r19,10000e18 <__alt_data_end+0xf8000e18>
100010a4:	9c000217 	ldw	r16,8(r19)
100010a8:	00bfff04 	movi	r2,-4
100010ac:	80c00117 	ldw	r3,4(r16)
100010b0:	1886703a 	and	r3,r3,r2
100010b4:	003f9706 	br	10000f14 <__alt_data_end+0xf8000f14>
100010b8:	52800017 	ldw	r10,0(r10)
100010bc:	18ffffc4 	addi	r3,r3,-1
100010c0:	50805c1e 	bne	r10,r2,10001234 <_malloc_r+0x798>
100010c4:	190000cc 	andi	r4,r3,3
100010c8:	50bffe04 	addi	r2,r10,-8
100010cc:	203ffa1e 	bne	r4,zero,100010b8 <__alt_data_end+0xf80010b8>
100010d0:	98800117 	ldw	r2,4(r19)
100010d4:	0146303a 	nor	r3,zero,r5
100010d8:	1884703a 	and	r2,r3,r2
100010dc:	98800115 	stw	r2,4(r19)
100010e0:	294b883a 	add	r5,r5,r5
100010e4:	117f2e36 	bltu	r2,r5,10000da0 <__alt_data_end+0xf8000da0>
100010e8:	283f2d26 	beq	r5,zero,10000da0 <__alt_data_end+0xf8000da0>
100010ec:	1146703a 	and	r3,r2,r5
100010f0:	1800521e 	bne	r3,zero,1000123c <_malloc_r+0x7a0>
100010f4:	6007883a 	mov	r3,r12
100010f8:	294b883a 	add	r5,r5,r5
100010fc:	1148703a 	and	r4,r2,r5
10001100:	18c00104 	addi	r3,r3,4
10001104:	203ffc26 	beq	r4,zero,100010f8 <__alt_data_end+0xf80010f8>
10001108:	003ef006 	br	10000ccc <__alt_data_end+0xf8000ccc>
1000110c:	00805504 	movi	r2,340
10001110:	10c01336 	bltu	r2,r3,10001160 <_malloc_r+0x6c4>
10001114:	8806d3fa 	srli	r3,r17,15
10001118:	19c01dc4 	addi	r7,r3,119
1000111c:	39cb883a 	add	r5,r7,r7
10001120:	003ea206 	br	10000bac <__alt_data_end+0xf8000bac>
10001124:	00c40004 	movi	r3,4096
10001128:	003f4d06 	br	10000e60 <__alt_data_end+0xf8000e60>
1000112c:	00800044 	movi	r2,1
10001130:	a0800115 	stw	r2,4(r20)
10001134:	a021883a 	mov	r16,r20
10001138:	0007883a 	mov	r3,zero
1000113c:	003f7506 	br	10000f14 <__alt_data_end+0xf8000f14>
10001140:	200bd0ba 	srai	r5,r4,2
10001144:	01800044 	movi	r6,1
10001148:	41000117 	ldw	r4,4(r8)
1000114c:	314a983a 	sll	r5,r6,r5
10001150:	100d883a 	mov	r6,r2
10001154:	2908b03a 	or	r4,r5,r4
10001158:	41000115 	stw	r4,4(r8)
1000115c:	003f9d06 	br	10000fd4 <__alt_data_end+0xf8000fd4>
10001160:	00815504 	movi	r2,1364
10001164:	10c01336 	bltu	r2,r3,100011b4 <_malloc_r+0x718>
10001168:	8806d4ba 	srli	r3,r17,18
1000116c:	19c01f04 	addi	r7,r3,124
10001170:	39cb883a 	add	r5,r7,r7
10001174:	003e8d06 	br	10000bac <__alt_data_end+0xf8000bac>
10001178:	ad400404 	addi	r21,r21,16
1000117c:	003f1d06 	br	10000df4 <__alt_data_end+0xf8000df4>
10001180:	01001504 	movi	r4,84
10001184:	20801c36 	bltu	r4,r2,100011f8 <_malloc_r+0x75c>
10001188:	3804d33a 	srli	r2,r7,12
1000118c:	11001b84 	addi	r4,r2,110
10001190:	210b883a 	add	r5,r4,r4
10001194:	003f8006 	br	10000f98 <__alt_data_end+0xf8000f98>
10001198:	3083ffcc 	andi	r2,r6,4095
1000119c:	103f241e 	bne	r2,zero,10000e30 <__alt_data_end+0xf8000e30>
100011a0:	99000217 	ldw	r4,8(r19)
100011a4:	ad85883a 	add	r2,r21,r22
100011a8:	10800054 	ori	r2,r2,1
100011ac:	20800115 	stw	r2,4(r4)
100011b0:	003f4a06 	br	10000edc <__alt_data_end+0xf8000edc>
100011b4:	01403f04 	movi	r5,252
100011b8:	01c01f84 	movi	r7,126
100011bc:	003e7b06 	br	10000bac <__alt_data_end+0xf8000bac>
100011c0:	00c00044 	movi	r3,1
100011c4:	002b883a 	mov	r21,zero
100011c8:	003f3006 	br	10000e8c <__alt_data_end+0xf8000e8c>
100011cc:	00840034 	movhi	r2,4096
100011d0:	109c7e04 	addi	r2,r2,29176
100011d4:	15000015 	stw	r20,0(r2)
100011d8:	003f1b06 	br	10000e48 <__alt_data_end+0xf8000e48>
100011dc:	9009883a 	mov	r4,r18
100011e0:	81400204 	addi	r5,r16,8
100011e4:	00024140 	call	10002414 <_free_r>
100011e8:	00840074 	movhi	r2,4097
100011ec:	10a33004 	addi	r2,r2,-29504
100011f0:	10c00017 	ldw	r3,0(r2)
100011f4:	003f3906 	br	10000edc <__alt_data_end+0xf8000edc>
100011f8:	01005504 	movi	r4,340
100011fc:	20800436 	bltu	r4,r2,10001210 <_malloc_r+0x774>
10001200:	3804d3fa 	srli	r2,r7,15
10001204:	11001dc4 	addi	r4,r2,119
10001208:	210b883a 	add	r5,r4,r4
1000120c:	003f6206 	br	10000f98 <__alt_data_end+0xf8000f98>
10001210:	01015504 	movi	r4,1364
10001214:	20800436 	bltu	r4,r2,10001228 <_malloc_r+0x78c>
10001218:	3804d4ba 	srli	r2,r7,18
1000121c:	11001f04 	addi	r4,r2,124
10001220:	210b883a 	add	r5,r4,r4
10001224:	003f5c06 	br	10000f98 <__alt_data_end+0xf8000f98>
10001228:	01403f04 	movi	r5,252
1000122c:	01001f84 	movi	r4,126
10001230:	003f5906 	br	10000f98 <__alt_data_end+0xf8000f98>
10001234:	98800117 	ldw	r2,4(r19)
10001238:	003fa906 	br	100010e0 <__alt_data_end+0xf80010e0>
1000123c:	6007883a 	mov	r3,r12
10001240:	003ea206 	br	10000ccc <__alt_data_end+0xf8000ccc>

10001244 <memchr>:
10001244:	208000cc 	andi	r2,r4,3
10001248:	280f883a 	mov	r7,r5
1000124c:	10003526 	beq	r2,zero,10001324 <memchr+0xe0>
10001250:	30bfffc4 	addi	r2,r6,-1
10001254:	30001b26 	beq	r6,zero,100012c4 <memchr+0x80>
10001258:	21800003 	ldbu	r6,0(r4)
1000125c:	28c03fcc 	andi	r3,r5,255
10001260:	30c01a26 	beq	r6,r3,100012cc <memchr+0x88>
10001264:	180d883a 	mov	r6,r3
10001268:	00000406 	br	1000127c <memchr+0x38>
1000126c:	10001526 	beq	r2,zero,100012c4 <memchr+0x80>
10001270:	20c00003 	ldbu	r3,0(r4)
10001274:	10bfffc4 	addi	r2,r2,-1
10001278:	19801426 	beq	r3,r6,100012cc <memchr+0x88>
1000127c:	21000044 	addi	r4,r4,1
10001280:	20c000cc 	andi	r3,r4,3
10001284:	183ff91e 	bne	r3,zero,1000126c <__alt_data_end+0xf800126c>
10001288:	024000c4 	movi	r9,3
1000128c:	48801136 	bltu	r9,r2,100012d4 <memchr+0x90>
10001290:	10000c26 	beq	r2,zero,100012c4 <memchr+0x80>
10001294:	20c00003 	ldbu	r3,0(r4)
10001298:	29403fcc 	andi	r5,r5,255
1000129c:	19400b26 	beq	r3,r5,100012cc <memchr+0x88>
100012a0:	20c00044 	addi	r3,r4,1
100012a4:	2085883a 	add	r2,r4,r2
100012a8:	39803fcc 	andi	r6,r7,255
100012ac:	00000306 	br	100012bc <memchr+0x78>
100012b0:	18c00044 	addi	r3,r3,1
100012b4:	197fffc3 	ldbu	r5,-1(r3)
100012b8:	29800426 	beq	r5,r6,100012cc <memchr+0x88>
100012bc:	1809883a 	mov	r4,r3
100012c0:	18bffb1e 	bne	r3,r2,100012b0 <__alt_data_end+0xf80012b0>
100012c4:	0005883a 	mov	r2,zero
100012c8:	f800283a 	ret
100012cc:	2005883a 	mov	r2,r4
100012d0:	f800283a 	ret
100012d4:	28c03fcc 	andi	r3,r5,255
100012d8:	1810923a 	slli	r8,r3,8
100012dc:	02ffbff4 	movhi	r11,65279
100012e0:	02a02074 	movhi	r10,32897
100012e4:	40c6b03a 	or	r3,r8,r3
100012e8:	1810943a 	slli	r8,r3,16
100012ec:	5affbfc4 	addi	r11,r11,-257
100012f0:	52a02004 	addi	r10,r10,-32640
100012f4:	40d0b03a 	or	r8,r8,r3
100012f8:	20c00017 	ldw	r3,0(r4)
100012fc:	40c6f03a 	xor	r3,r8,r3
10001300:	1acd883a 	add	r6,r3,r11
10001304:	00c6303a 	nor	r3,zero,r3
10001308:	30c6703a 	and	r3,r6,r3
1000130c:	1a86703a 	and	r3,r3,r10
10001310:	183fdf1e 	bne	r3,zero,10001290 <__alt_data_end+0xf8001290>
10001314:	10bfff04 	addi	r2,r2,-4
10001318:	21000104 	addi	r4,r4,4
1000131c:	48bff636 	bltu	r9,r2,100012f8 <__alt_data_end+0xf80012f8>
10001320:	003fdb06 	br	10001290 <__alt_data_end+0xf8001290>
10001324:	3005883a 	mov	r2,r6
10001328:	003fd706 	br	10001288 <__alt_data_end+0xf8001288>

1000132c <memcpy>:
1000132c:	deffff04 	addi	sp,sp,-4
10001330:	dc000015 	stw	r16,0(sp)
10001334:	00c003c4 	movi	r3,15
10001338:	2005883a 	mov	r2,r4
1000133c:	1980432e 	bgeu	r3,r6,1000144c <memcpy+0x120>
10001340:	2146b03a 	or	r3,r4,r5
10001344:	18c000cc 	andi	r3,r3,3
10001348:	1800421e 	bne	r3,zero,10001454 <memcpy+0x128>
1000134c:	343ffc04 	addi	r16,r6,-16
10001350:	8020d13a 	srli	r16,r16,4
10001354:	28c00104 	addi	r3,r5,4
10001358:	23400104 	addi	r13,r4,4
1000135c:	801e913a 	slli	r15,r16,4
10001360:	2b000204 	addi	r12,r5,8
10001364:	22c00204 	addi	r11,r4,8
10001368:	7bc00504 	addi	r15,r15,20
1000136c:	2a800304 	addi	r10,r5,12
10001370:	22400304 	addi	r9,r4,12
10001374:	2bdf883a 	add	r15,r5,r15
10001378:	2811883a 	mov	r8,r5
1000137c:	200f883a 	mov	r7,r4
10001380:	41000017 	ldw	r4,0(r8)
10001384:	39c00404 	addi	r7,r7,16
10001388:	18c00404 	addi	r3,r3,16
1000138c:	393ffc15 	stw	r4,-16(r7)
10001390:	1bbffc17 	ldw	r14,-16(r3)
10001394:	6b400404 	addi	r13,r13,16
10001398:	5ac00404 	addi	r11,r11,16
1000139c:	6bbffc15 	stw	r14,-16(r13)
100013a0:	63800017 	ldw	r14,0(r12)
100013a4:	4a400404 	addi	r9,r9,16
100013a8:	42000404 	addi	r8,r8,16
100013ac:	5bbffc15 	stw	r14,-16(r11)
100013b0:	53800017 	ldw	r14,0(r10)
100013b4:	63000404 	addi	r12,r12,16
100013b8:	52800404 	addi	r10,r10,16
100013bc:	4bbffc15 	stw	r14,-16(r9)
100013c0:	1bffef1e 	bne	r3,r15,10001380 <__alt_data_end+0xf8001380>
100013c4:	81c00044 	addi	r7,r16,1
100013c8:	380e913a 	slli	r7,r7,4
100013cc:	310003cc 	andi	r4,r6,15
100013d0:	02c000c4 	movi	r11,3
100013d4:	11c7883a 	add	r3,r2,r7
100013d8:	29cb883a 	add	r5,r5,r7
100013dc:	59001f2e 	bgeu	r11,r4,1000145c <memcpy+0x130>
100013e0:	1813883a 	mov	r9,r3
100013e4:	2811883a 	mov	r8,r5
100013e8:	200f883a 	mov	r7,r4
100013ec:	42800017 	ldw	r10,0(r8)
100013f0:	4a400104 	addi	r9,r9,4
100013f4:	39ffff04 	addi	r7,r7,-4
100013f8:	4abfff15 	stw	r10,-4(r9)
100013fc:	42000104 	addi	r8,r8,4
10001400:	59fffa36 	bltu	r11,r7,100013ec <__alt_data_end+0xf80013ec>
10001404:	213fff04 	addi	r4,r4,-4
10001408:	2008d0ba 	srli	r4,r4,2
1000140c:	318000cc 	andi	r6,r6,3
10001410:	21000044 	addi	r4,r4,1
10001414:	2109883a 	add	r4,r4,r4
10001418:	2109883a 	add	r4,r4,r4
1000141c:	1907883a 	add	r3,r3,r4
10001420:	290b883a 	add	r5,r5,r4
10001424:	30000626 	beq	r6,zero,10001440 <memcpy+0x114>
10001428:	198d883a 	add	r6,r3,r6
1000142c:	29c00003 	ldbu	r7,0(r5)
10001430:	18c00044 	addi	r3,r3,1
10001434:	29400044 	addi	r5,r5,1
10001438:	19ffffc5 	stb	r7,-1(r3)
1000143c:	19bffb1e 	bne	r3,r6,1000142c <__alt_data_end+0xf800142c>
10001440:	dc000017 	ldw	r16,0(sp)
10001444:	dec00104 	addi	sp,sp,4
10001448:	f800283a 	ret
1000144c:	2007883a 	mov	r3,r4
10001450:	003ff406 	br	10001424 <__alt_data_end+0xf8001424>
10001454:	2007883a 	mov	r3,r4
10001458:	003ff306 	br	10001428 <__alt_data_end+0xf8001428>
1000145c:	200d883a 	mov	r6,r4
10001460:	003ff006 	br	10001424 <__alt_data_end+0xf8001424>

10001464 <memmove>:
10001464:	2005883a 	mov	r2,r4
10001468:	29000b2e 	bgeu	r5,r4,10001498 <memmove+0x34>
1000146c:	298f883a 	add	r7,r5,r6
10001470:	21c0092e 	bgeu	r4,r7,10001498 <memmove+0x34>
10001474:	2187883a 	add	r3,r4,r6
10001478:	198bc83a 	sub	r5,r3,r6
1000147c:	30004b26 	beq	r6,zero,100015ac <memmove+0x148>
10001480:	39ffffc4 	addi	r7,r7,-1
10001484:	39000003 	ldbu	r4,0(r7)
10001488:	18ffffc4 	addi	r3,r3,-1
1000148c:	19000005 	stb	r4,0(r3)
10001490:	197ffb1e 	bne	r3,r5,10001480 <__alt_data_end+0xf8001480>
10001494:	f800283a 	ret
10001498:	00c003c4 	movi	r3,15
1000149c:	1980412e 	bgeu	r3,r6,100015a4 <memmove+0x140>
100014a0:	1146b03a 	or	r3,r2,r5
100014a4:	18c000cc 	andi	r3,r3,3
100014a8:	1800411e 	bne	r3,zero,100015b0 <memmove+0x14c>
100014ac:	33fffc04 	addi	r15,r6,-16
100014b0:	781ed13a 	srli	r15,r15,4
100014b4:	28c00104 	addi	r3,r5,4
100014b8:	13400104 	addi	r13,r2,4
100014bc:	781c913a 	slli	r14,r15,4
100014c0:	2b000204 	addi	r12,r5,8
100014c4:	12c00204 	addi	r11,r2,8
100014c8:	73800504 	addi	r14,r14,20
100014cc:	2a800304 	addi	r10,r5,12
100014d0:	12400304 	addi	r9,r2,12
100014d4:	2b9d883a 	add	r14,r5,r14
100014d8:	2811883a 	mov	r8,r5
100014dc:	100f883a 	mov	r7,r2
100014e0:	41000017 	ldw	r4,0(r8)
100014e4:	39c00404 	addi	r7,r7,16
100014e8:	18c00404 	addi	r3,r3,16
100014ec:	393ffc15 	stw	r4,-16(r7)
100014f0:	193ffc17 	ldw	r4,-16(r3)
100014f4:	6b400404 	addi	r13,r13,16
100014f8:	5ac00404 	addi	r11,r11,16
100014fc:	693ffc15 	stw	r4,-16(r13)
10001500:	61000017 	ldw	r4,0(r12)
10001504:	4a400404 	addi	r9,r9,16
10001508:	42000404 	addi	r8,r8,16
1000150c:	593ffc15 	stw	r4,-16(r11)
10001510:	51000017 	ldw	r4,0(r10)
10001514:	63000404 	addi	r12,r12,16
10001518:	52800404 	addi	r10,r10,16
1000151c:	493ffc15 	stw	r4,-16(r9)
10001520:	1bbfef1e 	bne	r3,r14,100014e0 <__alt_data_end+0xf80014e0>
10001524:	79000044 	addi	r4,r15,1
10001528:	2008913a 	slli	r4,r4,4
1000152c:	328003cc 	andi	r10,r6,15
10001530:	02c000c4 	movi	r11,3
10001534:	1107883a 	add	r3,r2,r4
10001538:	290b883a 	add	r5,r5,r4
1000153c:	5a801e2e 	bgeu	r11,r10,100015b8 <memmove+0x154>
10001540:	1813883a 	mov	r9,r3
10001544:	2811883a 	mov	r8,r5
10001548:	500f883a 	mov	r7,r10
1000154c:	41000017 	ldw	r4,0(r8)
10001550:	4a400104 	addi	r9,r9,4
10001554:	39ffff04 	addi	r7,r7,-4
10001558:	493fff15 	stw	r4,-4(r9)
1000155c:	42000104 	addi	r8,r8,4
10001560:	59fffa36 	bltu	r11,r7,1000154c <__alt_data_end+0xf800154c>
10001564:	513fff04 	addi	r4,r10,-4
10001568:	2008d0ba 	srli	r4,r4,2
1000156c:	318000cc 	andi	r6,r6,3
10001570:	21000044 	addi	r4,r4,1
10001574:	2109883a 	add	r4,r4,r4
10001578:	2109883a 	add	r4,r4,r4
1000157c:	1907883a 	add	r3,r3,r4
10001580:	290b883a 	add	r5,r5,r4
10001584:	30000926 	beq	r6,zero,100015ac <memmove+0x148>
10001588:	198d883a 	add	r6,r3,r6
1000158c:	29c00003 	ldbu	r7,0(r5)
10001590:	18c00044 	addi	r3,r3,1
10001594:	29400044 	addi	r5,r5,1
10001598:	19ffffc5 	stb	r7,-1(r3)
1000159c:	19bffb1e 	bne	r3,r6,1000158c <__alt_data_end+0xf800158c>
100015a0:	f800283a 	ret
100015a4:	1007883a 	mov	r3,r2
100015a8:	003ff606 	br	10001584 <__alt_data_end+0xf8001584>
100015ac:	f800283a 	ret
100015b0:	1007883a 	mov	r3,r2
100015b4:	003ff406 	br	10001588 <__alt_data_end+0xf8001588>
100015b8:	500d883a 	mov	r6,r10
100015bc:	003ff106 	br	10001584 <__alt_data_end+0xf8001584>

100015c0 <_realloc_r>:
100015c0:	defff604 	addi	sp,sp,-40
100015c4:	dcc00315 	stw	r19,12(sp)
100015c8:	dc400115 	stw	r17,4(sp)
100015cc:	dfc00915 	stw	ra,36(sp)
100015d0:	df000815 	stw	fp,32(sp)
100015d4:	ddc00715 	stw	r23,28(sp)
100015d8:	dd800615 	stw	r22,24(sp)
100015dc:	dd400515 	stw	r21,20(sp)
100015e0:	dd000415 	stw	r20,16(sp)
100015e4:	dc800215 	stw	r18,8(sp)
100015e8:	dc000015 	stw	r16,0(sp)
100015ec:	2827883a 	mov	r19,r5
100015f0:	3023883a 	mov	r17,r6
100015f4:	2800bf26 	beq	r5,zero,100018f4 <_realloc_r+0x334>
100015f8:	2025883a 	mov	r18,r4
100015fc:	00035940 	call	10003594 <__malloc_lock>
10001600:	98ffff17 	ldw	r3,-4(r19)
10001604:	01bfff04 	movi	r6,-4
10001608:	890002c4 	addi	r4,r17,11
1000160c:	01c00584 	movi	r7,22
10001610:	9d7ffe04 	addi	r21,r19,-8
10001614:	19a0703a 	and	r16,r3,r6
10001618:	39003f2e 	bgeu	r7,r4,10001718 <_realloc_r+0x158>
1000161c:	053ffe04 	movi	r20,-8
10001620:	2528703a 	and	r20,r4,r20
10001624:	a00f883a 	mov	r7,r20
10001628:	a0008216 	blt	r20,zero,10001834 <_realloc_r+0x274>
1000162c:	a4408136 	bltu	r20,r17,10001834 <_realloc_r+0x274>
10001630:	81c03c0e 	bge	r16,r7,10001724 <_realloc_r+0x164>
10001634:	07040034 	movhi	fp,4096
10001638:	e716f804 	addi	fp,fp,23520
1000163c:	e1000217 	ldw	r4,8(fp)
10001640:	ac05883a 	add	r2,r21,r16
10001644:	2080bf26 	beq	r4,r2,10001944 <_realloc_r+0x384>
10001648:	11000117 	ldw	r4,4(r2)
1000164c:	023fff84 	movi	r8,-2
10001650:	2210703a 	and	r8,r4,r8
10001654:	1211883a 	add	r8,r2,r8
10001658:	41400117 	ldw	r5,4(r8)
1000165c:	2940004c 	andi	r5,r5,1
10001660:	28004a1e 	bne	r5,zero,1000178c <_realloc_r+0x1cc>
10001664:	017fff04 	movi	r5,-4
10001668:	2148703a 	and	r4,r4,r5
1000166c:	2409883a 	add	r4,r4,r16
10001670:	21c0ad0e 	bge	r4,r7,10001928 <_realloc_r+0x368>
10001674:	18c0004c 	andi	r3,r3,1
10001678:	18007f1e 	bne	r3,zero,10001878 <_realloc_r+0x2b8>
1000167c:	9dfffe17 	ldw	r23,-8(r19)
10001680:	adefc83a 	sub	r23,r21,r23
10001684:	bd800117 	ldw	r22,4(r23)
10001688:	b14a703a 	and	r5,r22,r5
1000168c:	216d883a 	add	r22,r4,r5
10001690:	b1c04516 	blt	r22,r7,100017a8 <_realloc_r+0x1e8>
10001694:	10c00317 	ldw	r3,12(r2)
10001698:	10800217 	ldw	r2,8(r2)
1000169c:	81bfff04 	addi	r6,r16,-4
100016a0:	bc400204 	addi	r17,r23,8
100016a4:	10c00315 	stw	r3,12(r2)
100016a8:	18800215 	stw	r2,8(r3)
100016ac:	b9400217 	ldw	r5,8(r23)
100016b0:	b8c00317 	ldw	r3,12(r23)
100016b4:	00800904 	movi	r2,36
100016b8:	28c00315 	stw	r3,12(r5)
100016bc:	19400215 	stw	r5,8(r3)
100016c0:	1180ef36 	bltu	r2,r6,10001a80 <_realloc_r+0x4c0>
100016c4:	008004c4 	movi	r2,19
100016c8:	1180da2e 	bgeu	r2,r6,10001a34 <_realloc_r+0x474>
100016cc:	98800017 	ldw	r2,0(r19)
100016d0:	b8800215 	stw	r2,8(r23)
100016d4:	98800117 	ldw	r2,4(r19)
100016d8:	b8800315 	stw	r2,12(r23)
100016dc:	008006c4 	movi	r2,27
100016e0:	1180fc2e 	bgeu	r2,r6,10001ad4 <_realloc_r+0x514>
100016e4:	98800217 	ldw	r2,8(r19)
100016e8:	b8800415 	stw	r2,16(r23)
100016ec:	98800317 	ldw	r2,12(r19)
100016f0:	b8800515 	stw	r2,20(r23)
100016f4:	00800904 	movi	r2,36
100016f8:	3080421e 	bne	r6,r2,10001804 <_realloc_r+0x244>
100016fc:	98800417 	ldw	r2,16(r19)
10001700:	9cc00604 	addi	r19,r19,24
10001704:	b8c00804 	addi	r3,r23,32
10001708:	b8800615 	stw	r2,24(r23)
1000170c:	98bfff17 	ldw	r2,-4(r19)
10001710:	b8800715 	stw	r2,28(r23)
10001714:	00003d06 	br	1000180c <_realloc_r+0x24c>
10001718:	01c00404 	movi	r7,16
1000171c:	3829883a 	mov	r20,r7
10001720:	003fc206 	br	1000162c <__alt_data_end+0xf800162c>
10001724:	9823883a 	mov	r17,r19
10001728:	850fc83a 	sub	r7,r16,r20
1000172c:	008003c4 	movi	r2,15
10001730:	18c0004c 	andi	r3,r3,1
10001734:	11c04336 	bltu	r2,r7,10001844 <_realloc_r+0x284>
10001738:	1c06b03a 	or	r3,r3,r16
1000173c:	a8c00115 	stw	r3,4(r21)
10001740:	ac21883a 	add	r16,r21,r16
10001744:	80c00117 	ldw	r3,4(r16)
10001748:	18c00054 	ori	r3,r3,1
1000174c:	80c00115 	stw	r3,4(r16)
10001750:	9009883a 	mov	r4,r18
10001754:	00035b40 	call	100035b4 <__malloc_unlock>
10001758:	8805883a 	mov	r2,r17
1000175c:	dfc00917 	ldw	ra,36(sp)
10001760:	df000817 	ldw	fp,32(sp)
10001764:	ddc00717 	ldw	r23,28(sp)
10001768:	dd800617 	ldw	r22,24(sp)
1000176c:	dd400517 	ldw	r21,20(sp)
10001770:	dd000417 	ldw	r20,16(sp)
10001774:	dcc00317 	ldw	r19,12(sp)
10001778:	dc800217 	ldw	r18,8(sp)
1000177c:	dc400117 	ldw	r17,4(sp)
10001780:	dc000017 	ldw	r16,0(sp)
10001784:	dec00a04 	addi	sp,sp,40
10001788:	f800283a 	ret
1000178c:	18c0004c 	andi	r3,r3,1
10001790:	1800391e 	bne	r3,zero,10001878 <_realloc_r+0x2b8>
10001794:	9dfffe17 	ldw	r23,-8(r19)
10001798:	00bfff04 	movi	r2,-4
1000179c:	adefc83a 	sub	r23,r21,r23
100017a0:	b9400117 	ldw	r5,4(r23)
100017a4:	288a703a 	and	r5,r5,r2
100017a8:	2c2d883a 	add	r22,r5,r16
100017ac:	b1c03216 	blt	r22,r7,10001878 <_realloc_r+0x2b8>
100017b0:	b8800317 	ldw	r2,12(r23)
100017b4:	b8c00217 	ldw	r3,8(r23)
100017b8:	81bfff04 	addi	r6,r16,-4
100017bc:	01000904 	movi	r4,36
100017c0:	18800315 	stw	r2,12(r3)
100017c4:	10c00215 	stw	r3,8(r2)
100017c8:	bc400204 	addi	r17,r23,8
100017cc:	2180ac36 	bltu	r4,r6,10001a80 <_realloc_r+0x4c0>
100017d0:	008004c4 	movi	r2,19
100017d4:	1180972e 	bgeu	r2,r6,10001a34 <_realloc_r+0x474>
100017d8:	98800017 	ldw	r2,0(r19)
100017dc:	b8800215 	stw	r2,8(r23)
100017e0:	98800117 	ldw	r2,4(r19)
100017e4:	b8800315 	stw	r2,12(r23)
100017e8:	008006c4 	movi	r2,27
100017ec:	1180b92e 	bgeu	r2,r6,10001ad4 <_realloc_r+0x514>
100017f0:	98800217 	ldw	r2,8(r19)
100017f4:	b8800415 	stw	r2,16(r23)
100017f8:	98800317 	ldw	r2,12(r19)
100017fc:	b8800515 	stw	r2,20(r23)
10001800:	313fbe26 	beq	r6,r4,100016fc <__alt_data_end+0xf80016fc>
10001804:	b8c00604 	addi	r3,r23,24
10001808:	9cc00404 	addi	r19,r19,16
1000180c:	98800017 	ldw	r2,0(r19)
10001810:	b021883a 	mov	r16,r22
10001814:	b82b883a 	mov	r21,r23
10001818:	18800015 	stw	r2,0(r3)
1000181c:	98800117 	ldw	r2,4(r19)
10001820:	18800115 	stw	r2,4(r3)
10001824:	98800217 	ldw	r2,8(r19)
10001828:	18800215 	stw	r2,8(r3)
1000182c:	b8c00117 	ldw	r3,4(r23)
10001830:	003fbd06 	br	10001728 <__alt_data_end+0xf8001728>
10001834:	00800304 	movi	r2,12
10001838:	90800015 	stw	r2,0(r18)
1000183c:	0005883a 	mov	r2,zero
10001840:	003fc606 	br	1000175c <__alt_data_end+0xf800175c>
10001844:	1d06b03a 	or	r3,r3,r20
10001848:	ad0b883a 	add	r5,r21,r20
1000184c:	a8c00115 	stw	r3,4(r21)
10001850:	38800054 	ori	r2,r7,1
10001854:	28800115 	stw	r2,4(r5)
10001858:	29cf883a 	add	r7,r5,r7
1000185c:	38800117 	ldw	r2,4(r7)
10001860:	9009883a 	mov	r4,r18
10001864:	29400204 	addi	r5,r5,8
10001868:	10800054 	ori	r2,r2,1
1000186c:	38800115 	stw	r2,4(r7)
10001870:	00024140 	call	10002414 <_free_r>
10001874:	003fb606 	br	10001750 <__alt_data_end+0xf8001750>
10001878:	880b883a 	mov	r5,r17
1000187c:	9009883a 	mov	r4,r18
10001880:	0000a9c0 	call	10000a9c <_malloc_r>
10001884:	1023883a 	mov	r17,r2
10001888:	1000aa26 	beq	r2,zero,10001b34 <_realloc_r+0x574>
1000188c:	98ffff17 	ldw	r3,-4(r19)
10001890:	113ffe04 	addi	r4,r2,-8
10001894:	00bfff84 	movi	r2,-2
10001898:	1884703a 	and	r2,r3,r2
1000189c:	a885883a 	add	r2,r21,r2
100018a0:	20808626 	beq	r4,r2,10001abc <_realloc_r+0x4fc>
100018a4:	81bfff04 	addi	r6,r16,-4
100018a8:	00800904 	movi	r2,36
100018ac:	11807036 	bltu	r2,r6,10001a70 <_realloc_r+0x4b0>
100018b0:	00c004c4 	movi	r3,19
100018b4:	19805636 	bltu	r3,r6,10001a10 <_realloc_r+0x450>
100018b8:	8805883a 	mov	r2,r17
100018bc:	9807883a 	mov	r3,r19
100018c0:	19000017 	ldw	r4,0(r3)
100018c4:	11000015 	stw	r4,0(r2)
100018c8:	19000117 	ldw	r4,4(r3)
100018cc:	11000115 	stw	r4,4(r2)
100018d0:	18c00217 	ldw	r3,8(r3)
100018d4:	10c00215 	stw	r3,8(r2)
100018d8:	980b883a 	mov	r5,r19
100018dc:	9009883a 	mov	r4,r18
100018e0:	00024140 	call	10002414 <_free_r>
100018e4:	9009883a 	mov	r4,r18
100018e8:	00035b40 	call	100035b4 <__malloc_unlock>
100018ec:	8805883a 	mov	r2,r17
100018f0:	003f9a06 	br	1000175c <__alt_data_end+0xf800175c>
100018f4:	300b883a 	mov	r5,r6
100018f8:	dfc00917 	ldw	ra,36(sp)
100018fc:	df000817 	ldw	fp,32(sp)
10001900:	ddc00717 	ldw	r23,28(sp)
10001904:	dd800617 	ldw	r22,24(sp)
10001908:	dd400517 	ldw	r21,20(sp)
1000190c:	dd000417 	ldw	r20,16(sp)
10001910:	dcc00317 	ldw	r19,12(sp)
10001914:	dc800217 	ldw	r18,8(sp)
10001918:	dc400117 	ldw	r17,4(sp)
1000191c:	dc000017 	ldw	r16,0(sp)
10001920:	dec00a04 	addi	sp,sp,40
10001924:	0000a9c1 	jmpi	10000a9c <_malloc_r>
10001928:	11400317 	ldw	r5,12(r2)
1000192c:	10800217 	ldw	r2,8(r2)
10001930:	9823883a 	mov	r17,r19
10001934:	2021883a 	mov	r16,r4
10001938:	11400315 	stw	r5,12(r2)
1000193c:	28800215 	stw	r2,8(r5)
10001940:	003f7906 	br	10001728 <__alt_data_end+0xf8001728>
10001944:	21000117 	ldw	r4,4(r4)
10001948:	00bfff04 	movi	r2,-4
1000194c:	a1800404 	addi	r6,r20,16
10001950:	2088703a 	and	r4,r4,r2
10001954:	2409883a 	add	r4,r4,r16
10001958:	2180380e 	bge	r4,r6,10001a3c <_realloc_r+0x47c>
1000195c:	18c0004c 	andi	r3,r3,1
10001960:	183fc51e 	bne	r3,zero,10001878 <__alt_data_end+0xf8001878>
10001964:	9dfffe17 	ldw	r23,-8(r19)
10001968:	adefc83a 	sub	r23,r21,r23
1000196c:	b9400117 	ldw	r5,4(r23)
10001970:	288a703a 	and	r5,r5,r2
10001974:	216d883a 	add	r22,r4,r5
10001978:	b1bf8b16 	blt	r22,r6,100017a8 <__alt_data_end+0xf80017a8>
1000197c:	b8800317 	ldw	r2,12(r23)
10001980:	b8c00217 	ldw	r3,8(r23)
10001984:	81bfff04 	addi	r6,r16,-4
10001988:	01000904 	movi	r4,36
1000198c:	18800315 	stw	r2,12(r3)
10001990:	10c00215 	stw	r3,8(r2)
10001994:	bc400204 	addi	r17,r23,8
10001998:	21805a36 	bltu	r4,r6,10001b04 <_realloc_r+0x544>
1000199c:	008004c4 	movi	r2,19
100019a0:	1180562e 	bgeu	r2,r6,10001afc <_realloc_r+0x53c>
100019a4:	98800017 	ldw	r2,0(r19)
100019a8:	b8800215 	stw	r2,8(r23)
100019ac:	98800117 	ldw	r2,4(r19)
100019b0:	b8800315 	stw	r2,12(r23)
100019b4:	008006c4 	movi	r2,27
100019b8:	11805636 	bltu	r2,r6,10001b14 <_realloc_r+0x554>
100019bc:	b8800404 	addi	r2,r23,16
100019c0:	9cc00204 	addi	r19,r19,8
100019c4:	98c00017 	ldw	r3,0(r19)
100019c8:	10c00015 	stw	r3,0(r2)
100019cc:	98c00117 	ldw	r3,4(r19)
100019d0:	10c00115 	stw	r3,4(r2)
100019d4:	98c00217 	ldw	r3,8(r19)
100019d8:	10c00215 	stw	r3,8(r2)
100019dc:	bd07883a 	add	r3,r23,r20
100019e0:	b505c83a 	sub	r2,r22,r20
100019e4:	e0c00215 	stw	r3,8(fp)
100019e8:	10800054 	ori	r2,r2,1
100019ec:	18800115 	stw	r2,4(r3)
100019f0:	b8800117 	ldw	r2,4(r23)
100019f4:	9009883a 	mov	r4,r18
100019f8:	1080004c 	andi	r2,r2,1
100019fc:	a0a8b03a 	or	r20,r20,r2
10001a00:	bd000115 	stw	r20,4(r23)
10001a04:	00035b40 	call	100035b4 <__malloc_unlock>
10001a08:	8805883a 	mov	r2,r17
10001a0c:	003f5306 	br	1000175c <__alt_data_end+0xf800175c>
10001a10:	98c00017 	ldw	r3,0(r19)
10001a14:	88c00015 	stw	r3,0(r17)
10001a18:	98c00117 	ldw	r3,4(r19)
10001a1c:	88c00115 	stw	r3,4(r17)
10001a20:	00c006c4 	movi	r3,27
10001a24:	19801d36 	bltu	r3,r6,10001a9c <_realloc_r+0x4dc>
10001a28:	88800204 	addi	r2,r17,8
10001a2c:	98c00204 	addi	r3,r19,8
10001a30:	003fa306 	br	100018c0 <__alt_data_end+0xf80018c0>
10001a34:	8807883a 	mov	r3,r17
10001a38:	003f7406 	br	1000180c <__alt_data_end+0xf800180c>
10001a3c:	ad2b883a 	add	r21,r21,r20
10001a40:	2505c83a 	sub	r2,r4,r20
10001a44:	e5400215 	stw	r21,8(fp)
10001a48:	10800054 	ori	r2,r2,1
10001a4c:	a8800115 	stw	r2,4(r21)
10001a50:	98bfff17 	ldw	r2,-4(r19)
10001a54:	9009883a 	mov	r4,r18
10001a58:	1080004c 	andi	r2,r2,1
10001a5c:	a0a8b03a 	or	r20,r20,r2
10001a60:	9d3fff15 	stw	r20,-4(r19)
10001a64:	00035b40 	call	100035b4 <__malloc_unlock>
10001a68:	9805883a 	mov	r2,r19
10001a6c:	003f3b06 	br	1000175c <__alt_data_end+0xf800175c>
10001a70:	8809883a 	mov	r4,r17
10001a74:	980b883a 	mov	r5,r19
10001a78:	00014640 	call	10001464 <memmove>
10001a7c:	003f9606 	br	100018d8 <__alt_data_end+0xf80018d8>
10001a80:	8809883a 	mov	r4,r17
10001a84:	980b883a 	mov	r5,r19
10001a88:	00014640 	call	10001464 <memmove>
10001a8c:	b8c00117 	ldw	r3,4(r23)
10001a90:	b021883a 	mov	r16,r22
10001a94:	b82b883a 	mov	r21,r23
10001a98:	003f2306 	br	10001728 <__alt_data_end+0xf8001728>
10001a9c:	98c00217 	ldw	r3,8(r19)
10001aa0:	88c00215 	stw	r3,8(r17)
10001aa4:	98c00317 	ldw	r3,12(r19)
10001aa8:	88c00315 	stw	r3,12(r17)
10001aac:	30800c26 	beq	r6,r2,10001ae0 <_realloc_r+0x520>
10001ab0:	88800404 	addi	r2,r17,16
10001ab4:	98c00404 	addi	r3,r19,16
10001ab8:	003f8106 	br	100018c0 <__alt_data_end+0xf80018c0>
10001abc:	893fff17 	ldw	r4,-4(r17)
10001ac0:	00bfff04 	movi	r2,-4
10001ac4:	9823883a 	mov	r17,r19
10001ac8:	2084703a 	and	r2,r4,r2
10001acc:	80a1883a 	add	r16,r16,r2
10001ad0:	003f1506 	br	10001728 <__alt_data_end+0xf8001728>
10001ad4:	b8c00404 	addi	r3,r23,16
10001ad8:	9cc00204 	addi	r19,r19,8
10001adc:	003f4b06 	br	1000180c <__alt_data_end+0xf800180c>
10001ae0:	99000417 	ldw	r4,16(r19)
10001ae4:	88800604 	addi	r2,r17,24
10001ae8:	98c00604 	addi	r3,r19,24
10001aec:	89000415 	stw	r4,16(r17)
10001af0:	99000517 	ldw	r4,20(r19)
10001af4:	89000515 	stw	r4,20(r17)
10001af8:	003f7106 	br	100018c0 <__alt_data_end+0xf80018c0>
10001afc:	8805883a 	mov	r2,r17
10001b00:	003fb006 	br	100019c4 <__alt_data_end+0xf80019c4>
10001b04:	8809883a 	mov	r4,r17
10001b08:	980b883a 	mov	r5,r19
10001b0c:	00014640 	call	10001464 <memmove>
10001b10:	003fb206 	br	100019dc <__alt_data_end+0xf80019dc>
10001b14:	98800217 	ldw	r2,8(r19)
10001b18:	b8800415 	stw	r2,16(r23)
10001b1c:	98800317 	ldw	r2,12(r19)
10001b20:	b8800515 	stw	r2,20(r23)
10001b24:	31000726 	beq	r6,r4,10001b44 <_realloc_r+0x584>
10001b28:	b8800604 	addi	r2,r23,24
10001b2c:	9cc00404 	addi	r19,r19,16
10001b30:	003fa406 	br	100019c4 <__alt_data_end+0xf80019c4>
10001b34:	9009883a 	mov	r4,r18
10001b38:	00035b40 	call	100035b4 <__malloc_unlock>
10001b3c:	0005883a 	mov	r2,zero
10001b40:	003f0606 	br	1000175c <__alt_data_end+0xf800175c>
10001b44:	98c00417 	ldw	r3,16(r19)
10001b48:	9cc00604 	addi	r19,r19,24
10001b4c:	b8800804 	addi	r2,r23,32
10001b50:	b8c00615 	stw	r3,24(r23)
10001b54:	98ffff17 	ldw	r3,-4(r19)
10001b58:	b8c00715 	stw	r3,28(r23)
10001b5c:	003f9906 	br	100019c4 <__alt_data_end+0xf80019c4>

10001b60 <_sbrk_r>:
10001b60:	defffd04 	addi	sp,sp,-12
10001b64:	dc000015 	stw	r16,0(sp)
10001b68:	04040074 	movhi	r16,4097
10001b6c:	dc400115 	stw	r17,4(sp)
10001b70:	84232804 	addi	r16,r16,-29536
10001b74:	2023883a 	mov	r17,r4
10001b78:	2809883a 	mov	r4,r5
10001b7c:	dfc00215 	stw	ra,8(sp)
10001b80:	80000015 	stw	zero,0(r16)
10001b84:	00037a80 	call	100037a8 <sbrk>
10001b88:	00ffffc4 	movi	r3,-1
10001b8c:	10c00526 	beq	r2,r3,10001ba4 <_sbrk_r+0x44>
10001b90:	dfc00217 	ldw	ra,8(sp)
10001b94:	dc400117 	ldw	r17,4(sp)
10001b98:	dc000017 	ldw	r16,0(sp)
10001b9c:	dec00304 	addi	sp,sp,12
10001ba0:	f800283a 	ret
10001ba4:	80c00017 	ldw	r3,0(r16)
10001ba8:	183ff926 	beq	r3,zero,10001b90 <__alt_data_end+0xf8001b90>
10001bac:	88c00015 	stw	r3,0(r17)
10001bb0:	003ff706 	br	10001b90 <__alt_data_end+0xf8001b90>

10001bb4 <__swsetup_r>:
10001bb4:	00840034 	movhi	r2,4096
10001bb8:	defffd04 	addi	sp,sp,-12
10001bbc:	109c7d04 	addi	r2,r2,29172
10001bc0:	dc400115 	stw	r17,4(sp)
10001bc4:	2023883a 	mov	r17,r4
10001bc8:	11000017 	ldw	r4,0(r2)
10001bcc:	dc000015 	stw	r16,0(sp)
10001bd0:	dfc00215 	stw	ra,8(sp)
10001bd4:	2821883a 	mov	r16,r5
10001bd8:	20000226 	beq	r4,zero,10001be4 <__swsetup_r+0x30>
10001bdc:	20c00e17 	ldw	r3,56(r4)
10001be0:	18002e26 	beq	r3,zero,10001c9c <__swsetup_r+0xe8>
10001be4:	8080030b 	ldhu	r2,12(r16)
10001be8:	10c0020c 	andi	r3,r2,8
10001bec:	100d883a 	mov	r6,r2
10001bf0:	18000f26 	beq	r3,zero,10001c30 <__swsetup_r+0x7c>
10001bf4:	80c00417 	ldw	r3,16(r16)
10001bf8:	18001526 	beq	r3,zero,10001c50 <__swsetup_r+0x9c>
10001bfc:	1100004c 	andi	r4,r2,1
10001c00:	20001c1e 	bne	r4,zero,10001c74 <__swsetup_r+0xc0>
10001c04:	1080008c 	andi	r2,r2,2
10001c08:	1000261e 	bne	r2,zero,10001ca4 <__swsetup_r+0xf0>
10001c0c:	80800517 	ldw	r2,20(r16)
10001c10:	80800215 	stw	r2,8(r16)
10001c14:	18001c26 	beq	r3,zero,10001c88 <__swsetup_r+0xd4>
10001c18:	0005883a 	mov	r2,zero
10001c1c:	dfc00217 	ldw	ra,8(sp)
10001c20:	dc400117 	ldw	r17,4(sp)
10001c24:	dc000017 	ldw	r16,0(sp)
10001c28:	dec00304 	addi	sp,sp,12
10001c2c:	f800283a 	ret
10001c30:	3080040c 	andi	r2,r6,16
10001c34:	10001726 	beq	r2,zero,10001c94 <__swsetup_r+0xe0>
10001c38:	3080010c 	andi	r2,r6,4
10001c3c:	10001b1e 	bne	r2,zero,10001cac <__swsetup_r+0xf8>
10001c40:	80c00417 	ldw	r3,16(r16)
10001c44:	30800214 	ori	r2,r6,8
10001c48:	8080030d 	sth	r2,12(r16)
10001c4c:	183feb1e 	bne	r3,zero,10001bfc <__alt_data_end+0xf8001bfc>
10001c50:	1140a00c 	andi	r5,r2,640
10001c54:	01008004 	movi	r4,512
10001c58:	293fe826 	beq	r5,r4,10001bfc <__alt_data_end+0xf8001bfc>
10001c5c:	8809883a 	mov	r4,r17
10001c60:	800b883a 	mov	r5,r16
10001c64:	00028740 	call	10002874 <__smakebuf_r>
10001c68:	8080030b 	ldhu	r2,12(r16)
10001c6c:	80c00417 	ldw	r3,16(r16)
10001c70:	003fe206 	br	10001bfc <__alt_data_end+0xf8001bfc>
10001c74:	80800517 	ldw	r2,20(r16)
10001c78:	80000215 	stw	zero,8(r16)
10001c7c:	0085c83a 	sub	r2,zero,r2
10001c80:	80800615 	stw	r2,24(r16)
10001c84:	183fe41e 	bne	r3,zero,10001c18 <__alt_data_end+0xf8001c18>
10001c88:	8080030b 	ldhu	r2,12(r16)
10001c8c:	1080200c 	andi	r2,r2,128
10001c90:	103fe226 	beq	r2,zero,10001c1c <__alt_data_end+0xf8001c1c>
10001c94:	00bfffc4 	movi	r2,-1
10001c98:	003fe006 	br	10001c1c <__alt_data_end+0xf8001c1c>
10001c9c:	00022a00 	call	100022a0 <__sinit>
10001ca0:	003fd006 	br	10001be4 <__alt_data_end+0xf8001be4>
10001ca4:	0005883a 	mov	r2,zero
10001ca8:	003fd906 	br	10001c10 <__alt_data_end+0xf8001c10>
10001cac:	81400c17 	ldw	r5,48(r16)
10001cb0:	28000626 	beq	r5,zero,10001ccc <__swsetup_r+0x118>
10001cb4:	80801004 	addi	r2,r16,64
10001cb8:	28800326 	beq	r5,r2,10001cc8 <__swsetup_r+0x114>
10001cbc:	8809883a 	mov	r4,r17
10001cc0:	00024140 	call	10002414 <_free_r>
10001cc4:	8180030b 	ldhu	r6,12(r16)
10001cc8:	80000c15 	stw	zero,48(r16)
10001ccc:	80c00417 	ldw	r3,16(r16)
10001cd0:	00bff6c4 	movi	r2,-37
10001cd4:	118c703a 	and	r6,r2,r6
10001cd8:	80000115 	stw	zero,4(r16)
10001cdc:	80c00015 	stw	r3,0(r16)
10001ce0:	003fd806 	br	10001c44 <__alt_data_end+0xf8001c44>

10001ce4 <_fflush_r>:
10001ce4:	defffb04 	addi	sp,sp,-20
10001ce8:	dcc00315 	stw	r19,12(sp)
10001cec:	dc000015 	stw	r16,0(sp)
10001cf0:	dfc00415 	stw	ra,16(sp)
10001cf4:	dc800215 	stw	r18,8(sp)
10001cf8:	dc400115 	stw	r17,4(sp)
10001cfc:	2027883a 	mov	r19,r4
10001d00:	2821883a 	mov	r16,r5
10001d04:	20000226 	beq	r4,zero,10001d10 <_fflush_r+0x2c>
10001d08:	20800e17 	ldw	r2,56(r4)
10001d0c:	10005326 	beq	r2,zero,10001e5c <_fflush_r+0x178>
10001d10:	8080030b 	ldhu	r2,12(r16)
10001d14:	10ffffcc 	andi	r3,r2,65535
10001d18:	18e0001c 	xori	r3,r3,32768
10001d1c:	18e00004 	addi	r3,r3,-32768
10001d20:	18002c26 	beq	r3,zero,10001dd4 <_fflush_r+0xf0>
10001d24:	10c0020c 	andi	r3,r2,8
10001d28:	1800321e 	bne	r3,zero,10001df4 <_fflush_r+0x110>
10001d2c:	80c00117 	ldw	r3,4(r16)
10001d30:	10820014 	ori	r2,r2,2048
10001d34:	8080030d 	sth	r2,12(r16)
10001d38:	00c0570e 	bge	zero,r3,10001e98 <_fflush_r+0x1b4>
10001d3c:	82000a17 	ldw	r8,40(r16)
10001d40:	40002426 	beq	r8,zero,10001dd4 <_fflush_r+0xf0>
10001d44:	9c400017 	ldw	r17,0(r19)
10001d48:	10c4000c 	andi	r3,r2,4096
10001d4c:	98000015 	stw	zero,0(r19)
10001d50:	18004626 	beq	r3,zero,10001e6c <_fflush_r+0x188>
10001d54:	81801417 	ldw	r6,80(r16)
10001d58:	10c0010c 	andi	r3,r2,4
10001d5c:	18000626 	beq	r3,zero,10001d78 <_fflush_r+0x94>
10001d60:	80c00117 	ldw	r3,4(r16)
10001d64:	80800c17 	ldw	r2,48(r16)
10001d68:	30cdc83a 	sub	r6,r6,r3
10001d6c:	10000226 	beq	r2,zero,10001d78 <_fflush_r+0x94>
10001d70:	80800f17 	ldw	r2,60(r16)
10001d74:	308dc83a 	sub	r6,r6,r2
10001d78:	81400717 	ldw	r5,28(r16)
10001d7c:	9809883a 	mov	r4,r19
10001d80:	000f883a 	mov	r7,zero
10001d84:	403ee83a 	callr	r8
10001d88:	00ffffc4 	movi	r3,-1
10001d8c:	10c04526 	beq	r2,r3,10001ea4 <_fflush_r+0x1c0>
10001d90:	80c0030b 	ldhu	r3,12(r16)
10001d94:	81000417 	ldw	r4,16(r16)
10001d98:	80000115 	stw	zero,4(r16)
10001d9c:	197dffcc 	andi	r5,r3,63487
10001da0:	8140030d 	sth	r5,12(r16)
10001da4:	81000015 	stw	r4,0(r16)
10001da8:	18c4000c 	andi	r3,r3,4096
10001dac:	18000126 	beq	r3,zero,10001db4 <_fflush_r+0xd0>
10001db0:	80801415 	stw	r2,80(r16)
10001db4:	81400c17 	ldw	r5,48(r16)
10001db8:	9c400015 	stw	r17,0(r19)
10001dbc:	28000526 	beq	r5,zero,10001dd4 <_fflush_r+0xf0>
10001dc0:	80801004 	addi	r2,r16,64
10001dc4:	28800226 	beq	r5,r2,10001dd0 <_fflush_r+0xec>
10001dc8:	9809883a 	mov	r4,r19
10001dcc:	00024140 	call	10002414 <_free_r>
10001dd0:	80000c15 	stw	zero,48(r16)
10001dd4:	0005883a 	mov	r2,zero
10001dd8:	dfc00417 	ldw	ra,16(sp)
10001ddc:	dcc00317 	ldw	r19,12(sp)
10001de0:	dc800217 	ldw	r18,8(sp)
10001de4:	dc400117 	ldw	r17,4(sp)
10001de8:	dc000017 	ldw	r16,0(sp)
10001dec:	dec00504 	addi	sp,sp,20
10001df0:	f800283a 	ret
10001df4:	84800417 	ldw	r18,16(r16)
10001df8:	903ff626 	beq	r18,zero,10001dd4 <__alt_data_end+0xf8001dd4>
10001dfc:	84400017 	ldw	r17,0(r16)
10001e00:	108000cc 	andi	r2,r2,3
10001e04:	84800015 	stw	r18,0(r16)
10001e08:	8ca3c83a 	sub	r17,r17,r18
10001e0c:	10001526 	beq	r2,zero,10001e64 <_fflush_r+0x180>
10001e10:	0005883a 	mov	r2,zero
10001e14:	80800215 	stw	r2,8(r16)
10001e18:	04400316 	blt	zero,r17,10001e28 <_fflush_r+0x144>
10001e1c:	003fed06 	br	10001dd4 <__alt_data_end+0xf8001dd4>
10001e20:	90a5883a 	add	r18,r18,r2
10001e24:	047feb0e 	bge	zero,r17,10001dd4 <__alt_data_end+0xf8001dd4>
10001e28:	80800917 	ldw	r2,36(r16)
10001e2c:	81400717 	ldw	r5,28(r16)
10001e30:	880f883a 	mov	r7,r17
10001e34:	900d883a 	mov	r6,r18
10001e38:	9809883a 	mov	r4,r19
10001e3c:	103ee83a 	callr	r2
10001e40:	88a3c83a 	sub	r17,r17,r2
10001e44:	00bff616 	blt	zero,r2,10001e20 <__alt_data_end+0xf8001e20>
10001e48:	80c0030b 	ldhu	r3,12(r16)
10001e4c:	00bfffc4 	movi	r2,-1
10001e50:	18c01014 	ori	r3,r3,64
10001e54:	80c0030d 	sth	r3,12(r16)
10001e58:	003fdf06 	br	10001dd8 <__alt_data_end+0xf8001dd8>
10001e5c:	00022a00 	call	100022a0 <__sinit>
10001e60:	003fab06 	br	10001d10 <__alt_data_end+0xf8001d10>
10001e64:	80800517 	ldw	r2,20(r16)
10001e68:	003fea06 	br	10001e14 <__alt_data_end+0xf8001e14>
10001e6c:	81400717 	ldw	r5,28(r16)
10001e70:	000d883a 	mov	r6,zero
10001e74:	9809883a 	mov	r4,r19
10001e78:	01c00044 	movi	r7,1
10001e7c:	403ee83a 	callr	r8
10001e80:	100d883a 	mov	r6,r2
10001e84:	00bfffc4 	movi	r2,-1
10001e88:	30801326 	beq	r6,r2,10001ed8 <_fflush_r+0x1f4>
10001e8c:	8080030b 	ldhu	r2,12(r16)
10001e90:	82000a17 	ldw	r8,40(r16)
10001e94:	003fb006 	br	10001d58 <__alt_data_end+0xf8001d58>
10001e98:	80c00f17 	ldw	r3,60(r16)
10001e9c:	00ffa716 	blt	zero,r3,10001d3c <__alt_data_end+0xf8001d3c>
10001ea0:	003fcc06 	br	10001dd4 <__alt_data_end+0xf8001dd4>
10001ea4:	98c00017 	ldw	r3,0(r19)
10001ea8:	183fb926 	beq	r3,zero,10001d90 <__alt_data_end+0xf8001d90>
10001eac:	01000744 	movi	r4,29
10001eb0:	19000226 	beq	r3,r4,10001ebc <_fflush_r+0x1d8>
10001eb4:	01000584 	movi	r4,22
10001eb8:	1900101e 	bne	r3,r4,10001efc <_fflush_r+0x218>
10001ebc:	8080030b 	ldhu	r2,12(r16)
10001ec0:	80c00417 	ldw	r3,16(r16)
10001ec4:	80000115 	stw	zero,4(r16)
10001ec8:	10bdffcc 	andi	r2,r2,63487
10001ecc:	8080030d 	sth	r2,12(r16)
10001ed0:	80c00015 	stw	r3,0(r16)
10001ed4:	003fb706 	br	10001db4 <__alt_data_end+0xf8001db4>
10001ed8:	98800017 	ldw	r2,0(r19)
10001edc:	103feb26 	beq	r2,zero,10001e8c <__alt_data_end+0xf8001e8c>
10001ee0:	00c00744 	movi	r3,29
10001ee4:	10c00226 	beq	r2,r3,10001ef0 <_fflush_r+0x20c>
10001ee8:	00c00584 	movi	r3,22
10001eec:	10ffd61e 	bne	r2,r3,10001e48 <__alt_data_end+0xf8001e48>
10001ef0:	9c400015 	stw	r17,0(r19)
10001ef4:	0005883a 	mov	r2,zero
10001ef8:	003fb706 	br	10001dd8 <__alt_data_end+0xf8001dd8>
10001efc:	80c0030b 	ldhu	r3,12(r16)
10001f00:	18c01014 	ori	r3,r3,64
10001f04:	80c0030d 	sth	r3,12(r16)
10001f08:	003fb306 	br	10001dd8 <__alt_data_end+0xf8001dd8>

10001f0c <fflush>:
10001f0c:	20000526 	beq	r4,zero,10001f24 <fflush+0x18>
10001f10:	00840034 	movhi	r2,4096
10001f14:	109c7d04 	addi	r2,r2,29172
10001f18:	200b883a 	mov	r5,r4
10001f1c:	11000017 	ldw	r4,0(r2)
10001f20:	0001ce41 	jmpi	10001ce4 <_fflush_r>
10001f24:	00840034 	movhi	r2,4096
10001f28:	109c7c04 	addi	r2,r2,29168
10001f2c:	11000017 	ldw	r4,0(r2)
10001f30:	01440034 	movhi	r5,4096
10001f34:	29473904 	addi	r5,r5,7396
10001f38:	00027bc1 	jmpi	100027bc <_fwalk_reent>

10001f3c <__fp_lock>:
10001f3c:	0005883a 	mov	r2,zero
10001f40:	f800283a 	ret

10001f44 <__fp_unlock>:
10001f44:	0005883a 	mov	r2,zero
10001f48:	f800283a 	ret

10001f4c <_cleanup_r>:
10001f4c:	01440034 	movhi	r5,4096
10001f50:	294b8f04 	addi	r5,r5,11836
10001f54:	00027041 	jmpi	10002704 <_fwalk>

10001f58 <__sinit.part.1>:
10001f58:	defff604 	addi	sp,sp,-40
10001f5c:	00c40034 	movhi	r3,4096
10001f60:	dfc00915 	stw	ra,36(sp)
10001f64:	df000815 	stw	fp,32(sp)
10001f68:	ddc00715 	stw	r23,28(sp)
10001f6c:	dd800615 	stw	r22,24(sp)
10001f70:	dd400515 	stw	r21,20(sp)
10001f74:	dd000415 	stw	r20,16(sp)
10001f78:	dcc00315 	stw	r19,12(sp)
10001f7c:	dc800215 	stw	r18,8(sp)
10001f80:	dc400115 	stw	r17,4(sp)
10001f84:	dc000015 	stw	r16,0(sp)
10001f88:	18c7d304 	addi	r3,r3,8012
10001f8c:	24000117 	ldw	r16,4(r4)
10001f90:	20c00f15 	stw	r3,60(r4)
10001f94:	07000044 	movi	fp,1
10001f98:	00c000c4 	movi	r3,3
10001f9c:	2080bb04 	addi	r2,r4,748
10001fa0:	20c0b915 	stw	r3,740(r4)
10001fa4:	27000e15 	stw	fp,56(r4)
10001fa8:	2080ba15 	stw	r2,744(r4)
10001fac:	2000b815 	stw	zero,736(r4)
10001fb0:	05c00204 	movi	r23,8
10001fb4:	00800104 	movi	r2,4
10001fb8:	2025883a 	mov	r18,r4
10001fbc:	b80d883a 	mov	r6,r23
10001fc0:	81001704 	addi	r4,r16,92
10001fc4:	000b883a 	mov	r5,zero
10001fc8:	80000015 	stw	zero,0(r16)
10001fcc:	80000115 	stw	zero,4(r16)
10001fd0:	80000215 	stw	zero,8(r16)
10001fd4:	8080030d 	sth	r2,12(r16)
10001fd8:	80001915 	stw	zero,100(r16)
10001fdc:	8000038d 	sth	zero,14(r16)
10001fe0:	80000415 	stw	zero,16(r16)
10001fe4:	80000515 	stw	zero,20(r16)
10001fe8:	80000615 	stw	zero,24(r16)
10001fec:	0002a2c0 	call	10002a2c <memset>
10001ff0:	05840034 	movhi	r22,4096
10001ff4:	94400217 	ldw	r17,8(r18)
10001ff8:	05440034 	movhi	r21,4096
10001ffc:	05040034 	movhi	r20,4096
10002000:	04c40034 	movhi	r19,4096
10002004:	b58ad404 	addi	r22,r22,11088
10002008:	ad4aeb04 	addi	r21,r21,11180
1000200c:	a50b0a04 	addi	r20,r20,11304
10002010:	9ccb2104 	addi	r19,r19,11396
10002014:	85800815 	stw	r22,32(r16)
10002018:	85400915 	stw	r21,36(r16)
1000201c:	85000a15 	stw	r20,40(r16)
10002020:	84c00b15 	stw	r19,44(r16)
10002024:	84000715 	stw	r16,28(r16)
10002028:	00800284 	movi	r2,10
1000202c:	89001704 	addi	r4,r17,92
10002030:	b80d883a 	mov	r6,r23
10002034:	000b883a 	mov	r5,zero
10002038:	88000015 	stw	zero,0(r17)
1000203c:	88000115 	stw	zero,4(r17)
10002040:	88000215 	stw	zero,8(r17)
10002044:	8880030d 	sth	r2,12(r17)
10002048:	88001915 	stw	zero,100(r17)
1000204c:	8f00038d 	sth	fp,14(r17)
10002050:	88000415 	stw	zero,16(r17)
10002054:	88000515 	stw	zero,20(r17)
10002058:	88000615 	stw	zero,24(r17)
1000205c:	0002a2c0 	call	10002a2c <memset>
10002060:	94000317 	ldw	r16,12(r18)
10002064:	00800484 	movi	r2,18
10002068:	8c400715 	stw	r17,28(r17)
1000206c:	8d800815 	stw	r22,32(r17)
10002070:	8d400915 	stw	r21,36(r17)
10002074:	8d000a15 	stw	r20,40(r17)
10002078:	8cc00b15 	stw	r19,44(r17)
1000207c:	8080030d 	sth	r2,12(r16)
10002080:	00800084 	movi	r2,2
10002084:	80000015 	stw	zero,0(r16)
10002088:	80000115 	stw	zero,4(r16)
1000208c:	80000215 	stw	zero,8(r16)
10002090:	80001915 	stw	zero,100(r16)
10002094:	8080038d 	sth	r2,14(r16)
10002098:	80000415 	stw	zero,16(r16)
1000209c:	80000515 	stw	zero,20(r16)
100020a0:	80000615 	stw	zero,24(r16)
100020a4:	81001704 	addi	r4,r16,92
100020a8:	000b883a 	mov	r5,zero
100020ac:	b80d883a 	mov	r6,r23
100020b0:	0002a2c0 	call	10002a2c <memset>
100020b4:	84000715 	stw	r16,28(r16)
100020b8:	85800815 	stw	r22,32(r16)
100020bc:	85400915 	stw	r21,36(r16)
100020c0:	85000a15 	stw	r20,40(r16)
100020c4:	84c00b15 	stw	r19,44(r16)
100020c8:	dfc00917 	ldw	ra,36(sp)
100020cc:	df000817 	ldw	fp,32(sp)
100020d0:	ddc00717 	ldw	r23,28(sp)
100020d4:	dd800617 	ldw	r22,24(sp)
100020d8:	dd400517 	ldw	r21,20(sp)
100020dc:	dd000417 	ldw	r20,16(sp)
100020e0:	dcc00317 	ldw	r19,12(sp)
100020e4:	dc800217 	ldw	r18,8(sp)
100020e8:	dc400117 	ldw	r17,4(sp)
100020ec:	dc000017 	ldw	r16,0(sp)
100020f0:	dec00a04 	addi	sp,sp,40
100020f4:	f800283a 	ret

100020f8 <__sfmoreglue>:
100020f8:	defffc04 	addi	sp,sp,-16
100020fc:	dc800215 	stw	r18,8(sp)
10002100:	2825883a 	mov	r18,r5
10002104:	dc000015 	stw	r16,0(sp)
10002108:	01401a04 	movi	r5,104
1000210c:	2021883a 	mov	r16,r4
10002110:	9009883a 	mov	r4,r18
10002114:	dfc00315 	stw	ra,12(sp)
10002118:	dc400115 	stw	r17,4(sp)
1000211c:	000046c0 	call	1000046c <__mulsi3>
10002120:	8009883a 	mov	r4,r16
10002124:	11400304 	addi	r5,r2,12
10002128:	1023883a 	mov	r17,r2
1000212c:	0000a9c0 	call	10000a9c <_malloc_r>
10002130:	1021883a 	mov	r16,r2
10002134:	10000726 	beq	r2,zero,10002154 <__sfmoreglue+0x5c>
10002138:	11000304 	addi	r4,r2,12
1000213c:	10000015 	stw	zero,0(r2)
10002140:	14800115 	stw	r18,4(r2)
10002144:	11000215 	stw	r4,8(r2)
10002148:	000b883a 	mov	r5,zero
1000214c:	880d883a 	mov	r6,r17
10002150:	0002a2c0 	call	10002a2c <memset>
10002154:	8005883a 	mov	r2,r16
10002158:	dfc00317 	ldw	ra,12(sp)
1000215c:	dc800217 	ldw	r18,8(sp)
10002160:	dc400117 	ldw	r17,4(sp)
10002164:	dc000017 	ldw	r16,0(sp)
10002168:	dec00404 	addi	sp,sp,16
1000216c:	f800283a 	ret

10002170 <__sfp>:
10002170:	00840034 	movhi	r2,4096
10002174:	defffb04 	addi	sp,sp,-20
10002178:	109c7c04 	addi	r2,r2,29168
1000217c:	dc800215 	stw	r18,8(sp)
10002180:	14800017 	ldw	r18,0(r2)
10002184:	dcc00315 	stw	r19,12(sp)
10002188:	dfc00415 	stw	ra,16(sp)
1000218c:	90800e17 	ldw	r2,56(r18)
10002190:	dc400115 	stw	r17,4(sp)
10002194:	dc000015 	stw	r16,0(sp)
10002198:	2027883a 	mov	r19,r4
1000219c:	1000021e 	bne	r2,zero,100021a8 <__sfp+0x38>
100021a0:	9009883a 	mov	r4,r18
100021a4:	0001f580 	call	10001f58 <__sinit.part.1>
100021a8:	9480b804 	addi	r18,r18,736
100021ac:	047fffc4 	movi	r17,-1
100021b0:	91400117 	ldw	r5,4(r18)
100021b4:	94000217 	ldw	r16,8(r18)
100021b8:	297fffc4 	addi	r5,r5,-1
100021bc:	28000a16 	blt	r5,zero,100021e8 <__sfp+0x78>
100021c0:	8080030f 	ldh	r2,12(r16)
100021c4:	10000c26 	beq	r2,zero,100021f8 <__sfp+0x88>
100021c8:	80c01d04 	addi	r3,r16,116
100021cc:	00000206 	br	100021d8 <__sfp+0x68>
100021d0:	18bfe60f 	ldh	r2,-104(r3)
100021d4:	10000826 	beq	r2,zero,100021f8 <__sfp+0x88>
100021d8:	297fffc4 	addi	r5,r5,-1
100021dc:	1c3ffd04 	addi	r16,r3,-12
100021e0:	18c01a04 	addi	r3,r3,104
100021e4:	2c7ffa1e 	bne	r5,r17,100021d0 <__alt_data_end+0xf80021d0>
100021e8:	90800017 	ldw	r2,0(r18)
100021ec:	10001d26 	beq	r2,zero,10002264 <__sfp+0xf4>
100021f0:	1025883a 	mov	r18,r2
100021f4:	003fee06 	br	100021b0 <__alt_data_end+0xf80021b0>
100021f8:	00bfffc4 	movi	r2,-1
100021fc:	8080038d 	sth	r2,14(r16)
10002200:	00800044 	movi	r2,1
10002204:	8080030d 	sth	r2,12(r16)
10002208:	80001915 	stw	zero,100(r16)
1000220c:	80000015 	stw	zero,0(r16)
10002210:	80000215 	stw	zero,8(r16)
10002214:	80000115 	stw	zero,4(r16)
10002218:	80000415 	stw	zero,16(r16)
1000221c:	80000515 	stw	zero,20(r16)
10002220:	80000615 	stw	zero,24(r16)
10002224:	81001704 	addi	r4,r16,92
10002228:	000b883a 	mov	r5,zero
1000222c:	01800204 	movi	r6,8
10002230:	0002a2c0 	call	10002a2c <memset>
10002234:	8005883a 	mov	r2,r16
10002238:	80000c15 	stw	zero,48(r16)
1000223c:	80000d15 	stw	zero,52(r16)
10002240:	80001115 	stw	zero,68(r16)
10002244:	80001215 	stw	zero,72(r16)
10002248:	dfc00417 	ldw	ra,16(sp)
1000224c:	dcc00317 	ldw	r19,12(sp)
10002250:	dc800217 	ldw	r18,8(sp)
10002254:	dc400117 	ldw	r17,4(sp)
10002258:	dc000017 	ldw	r16,0(sp)
1000225c:	dec00504 	addi	sp,sp,20
10002260:	f800283a 	ret
10002264:	9809883a 	mov	r4,r19
10002268:	01400104 	movi	r5,4
1000226c:	00020f80 	call	100020f8 <__sfmoreglue>
10002270:	90800015 	stw	r2,0(r18)
10002274:	103fde1e 	bne	r2,zero,100021f0 <__alt_data_end+0xf80021f0>
10002278:	00800304 	movi	r2,12
1000227c:	98800015 	stw	r2,0(r19)
10002280:	0005883a 	mov	r2,zero
10002284:	003ff006 	br	10002248 <__alt_data_end+0xf8002248>

10002288 <_cleanup>:
10002288:	00840034 	movhi	r2,4096
1000228c:	109c7c04 	addi	r2,r2,29168
10002290:	11000017 	ldw	r4,0(r2)
10002294:	01440034 	movhi	r5,4096
10002298:	294b8f04 	addi	r5,r5,11836
1000229c:	00027041 	jmpi	10002704 <_fwalk>

100022a0 <__sinit>:
100022a0:	20800e17 	ldw	r2,56(r4)
100022a4:	10000126 	beq	r2,zero,100022ac <__sinit+0xc>
100022a8:	f800283a 	ret
100022ac:	0001f581 	jmpi	10001f58 <__sinit.part.1>

100022b0 <__sfp_lock_acquire>:
100022b0:	f800283a 	ret

100022b4 <__sfp_lock_release>:
100022b4:	f800283a 	ret

100022b8 <__sinit_lock_acquire>:
100022b8:	f800283a 	ret

100022bc <__sinit_lock_release>:
100022bc:	f800283a 	ret

100022c0 <__fp_lock_all>:
100022c0:	00840034 	movhi	r2,4096
100022c4:	109c7d04 	addi	r2,r2,29172
100022c8:	11000017 	ldw	r4,0(r2)
100022cc:	01440034 	movhi	r5,4096
100022d0:	2947cf04 	addi	r5,r5,7996
100022d4:	00027041 	jmpi	10002704 <_fwalk>

100022d8 <__fp_unlock_all>:
100022d8:	00840034 	movhi	r2,4096
100022dc:	109c7d04 	addi	r2,r2,29172
100022e0:	11000017 	ldw	r4,0(r2)
100022e4:	01440034 	movhi	r5,4096
100022e8:	2947d104 	addi	r5,r5,8004
100022ec:	00027041 	jmpi	10002704 <_fwalk>

100022f0 <_malloc_trim_r>:
100022f0:	defffb04 	addi	sp,sp,-20
100022f4:	dcc00315 	stw	r19,12(sp)
100022f8:	04c40034 	movhi	r19,4096
100022fc:	dc800215 	stw	r18,8(sp)
10002300:	dc400115 	stw	r17,4(sp)
10002304:	dc000015 	stw	r16,0(sp)
10002308:	dfc00415 	stw	ra,16(sp)
1000230c:	2821883a 	mov	r16,r5
10002310:	9cd6f804 	addi	r19,r19,23520
10002314:	2025883a 	mov	r18,r4
10002318:	00035940 	call	10003594 <__malloc_lock>
1000231c:	98800217 	ldw	r2,8(r19)
10002320:	14400117 	ldw	r17,4(r2)
10002324:	00bfff04 	movi	r2,-4
10002328:	88a2703a 	and	r17,r17,r2
1000232c:	8c21c83a 	sub	r16,r17,r16
10002330:	8403fbc4 	addi	r16,r16,4079
10002334:	8020d33a 	srli	r16,r16,12
10002338:	0083ffc4 	movi	r2,4095
1000233c:	843fffc4 	addi	r16,r16,-1
10002340:	8020933a 	slli	r16,r16,12
10002344:	1400060e 	bge	r2,r16,10002360 <_malloc_trim_r+0x70>
10002348:	9009883a 	mov	r4,r18
1000234c:	000b883a 	mov	r5,zero
10002350:	0001b600 	call	10001b60 <_sbrk_r>
10002354:	98c00217 	ldw	r3,8(r19)
10002358:	1c47883a 	add	r3,r3,r17
1000235c:	10c00a26 	beq	r2,r3,10002388 <_malloc_trim_r+0x98>
10002360:	9009883a 	mov	r4,r18
10002364:	00035b40 	call	100035b4 <__malloc_unlock>
10002368:	0005883a 	mov	r2,zero
1000236c:	dfc00417 	ldw	ra,16(sp)
10002370:	dcc00317 	ldw	r19,12(sp)
10002374:	dc800217 	ldw	r18,8(sp)
10002378:	dc400117 	ldw	r17,4(sp)
1000237c:	dc000017 	ldw	r16,0(sp)
10002380:	dec00504 	addi	sp,sp,20
10002384:	f800283a 	ret
10002388:	9009883a 	mov	r4,r18
1000238c:	040bc83a 	sub	r5,zero,r16
10002390:	0001b600 	call	10001b60 <_sbrk_r>
10002394:	00ffffc4 	movi	r3,-1
10002398:	10c00d26 	beq	r2,r3,100023d0 <_malloc_trim_r+0xe0>
1000239c:	00c40074 	movhi	r3,4097
100023a0:	18e33004 	addi	r3,r3,-29504
100023a4:	18800017 	ldw	r2,0(r3)
100023a8:	99000217 	ldw	r4,8(r19)
100023ac:	8c23c83a 	sub	r17,r17,r16
100023b0:	8c400054 	ori	r17,r17,1
100023b4:	1421c83a 	sub	r16,r2,r16
100023b8:	24400115 	stw	r17,4(r4)
100023bc:	9009883a 	mov	r4,r18
100023c0:	1c000015 	stw	r16,0(r3)
100023c4:	00035b40 	call	100035b4 <__malloc_unlock>
100023c8:	00800044 	movi	r2,1
100023cc:	003fe706 	br	1000236c <__alt_data_end+0xf800236c>
100023d0:	9009883a 	mov	r4,r18
100023d4:	000b883a 	mov	r5,zero
100023d8:	0001b600 	call	10001b60 <_sbrk_r>
100023dc:	99000217 	ldw	r4,8(r19)
100023e0:	014003c4 	movi	r5,15
100023e4:	1107c83a 	sub	r3,r2,r4
100023e8:	28ffdd0e 	bge	r5,r3,10002360 <__alt_data_end+0xf8002360>
100023ec:	01440034 	movhi	r5,4096
100023f0:	295c7e04 	addi	r5,r5,29176
100023f4:	29400017 	ldw	r5,0(r5)
100023f8:	18c00054 	ori	r3,r3,1
100023fc:	20c00115 	stw	r3,4(r4)
10002400:	00c40074 	movhi	r3,4097
10002404:	1145c83a 	sub	r2,r2,r5
10002408:	18e33004 	addi	r3,r3,-29504
1000240c:	18800015 	stw	r2,0(r3)
10002410:	003fd306 	br	10002360 <__alt_data_end+0xf8002360>

10002414 <_free_r>:
10002414:	28004c26 	beq	r5,zero,10002548 <_free_r+0x134>
10002418:	defffd04 	addi	sp,sp,-12
1000241c:	dc400115 	stw	r17,4(sp)
10002420:	dc000015 	stw	r16,0(sp)
10002424:	2023883a 	mov	r17,r4
10002428:	2821883a 	mov	r16,r5
1000242c:	dfc00215 	stw	ra,8(sp)
10002430:	00035940 	call	10003594 <__malloc_lock>
10002434:	813fff17 	ldw	r4,-4(r16)
10002438:	00bfff84 	movi	r2,-2
1000243c:	02440034 	movhi	r9,4096
10002440:	81bffe04 	addi	r6,r16,-8
10002444:	2084703a 	and	r2,r4,r2
10002448:	4a56f804 	addi	r9,r9,23520
1000244c:	308b883a 	add	r5,r6,r2
10002450:	2a000117 	ldw	r8,4(r5)
10002454:	49c00217 	ldw	r7,8(r9)
10002458:	00ffff04 	movi	r3,-4
1000245c:	40c6703a 	and	r3,r8,r3
10002460:	39405326 	beq	r7,r5,100025b0 <_free_r+0x19c>
10002464:	28c00115 	stw	r3,4(r5)
10002468:	2100004c 	andi	r4,r4,1
1000246c:	2000091e 	bne	r4,zero,10002494 <_free_r+0x80>
10002470:	81fffe17 	ldw	r7,-8(r16)
10002474:	4a000204 	addi	r8,r9,8
10002478:	31cdc83a 	sub	r6,r6,r7
1000247c:	31000217 	ldw	r4,8(r6)
10002480:	11c5883a 	add	r2,r2,r7
10002484:	22006126 	beq	r4,r8,1000260c <_free_r+0x1f8>
10002488:	31c00317 	ldw	r7,12(r6)
1000248c:	21c00315 	stw	r7,12(r4)
10002490:	39000215 	stw	r4,8(r7)
10002494:	28c9883a 	add	r4,r5,r3
10002498:	21c00117 	ldw	r7,4(r4)
1000249c:	39c0004c 	andi	r7,r7,1
100024a0:	38000d1e 	bne	r7,zero,100024d8 <_free_r+0xc4>
100024a4:	29000217 	ldw	r4,8(r5)
100024a8:	10c5883a 	add	r2,r2,r3
100024ac:	00c40034 	movhi	r3,4096
100024b0:	18d6fa04 	addi	r3,r3,23528
100024b4:	20c07526 	beq	r4,r3,1000268c <_free_r+0x278>
100024b8:	29c00317 	ldw	r7,12(r5)
100024bc:	11400054 	ori	r5,r2,1
100024c0:	3087883a 	add	r3,r6,r2
100024c4:	21c00315 	stw	r7,12(r4)
100024c8:	39000215 	stw	r4,8(r7)
100024cc:	31400115 	stw	r5,4(r6)
100024d0:	18800015 	stw	r2,0(r3)
100024d4:	00000406 	br	100024e8 <_free_r+0xd4>
100024d8:	10c00054 	ori	r3,r2,1
100024dc:	30c00115 	stw	r3,4(r6)
100024e0:	3087883a 	add	r3,r6,r2
100024e4:	18800015 	stw	r2,0(r3)
100024e8:	00c07fc4 	movi	r3,511
100024ec:	18801736 	bltu	r3,r2,1000254c <_free_r+0x138>
100024f0:	1004d0fa 	srli	r2,r2,3
100024f4:	01400044 	movi	r5,1
100024f8:	49000117 	ldw	r4,4(r9)
100024fc:	1087883a 	add	r3,r2,r2
10002500:	18c7883a 	add	r3,r3,r3
10002504:	1005d0ba 	srai	r2,r2,2
10002508:	18c7883a 	add	r3,r3,r3
1000250c:	1a47883a 	add	r3,r3,r9
10002510:	19c00217 	ldw	r7,8(r3)
10002514:	2884983a 	sll	r2,r5,r2
10002518:	30c00315 	stw	r3,12(r6)
1000251c:	31c00215 	stw	r7,8(r6)
10002520:	1104b03a 	or	r2,r2,r4
10002524:	19800215 	stw	r6,8(r3)
10002528:	48800115 	stw	r2,4(r9)
1000252c:	39800315 	stw	r6,12(r7)
10002530:	8809883a 	mov	r4,r17
10002534:	dfc00217 	ldw	ra,8(sp)
10002538:	dc400117 	ldw	r17,4(sp)
1000253c:	dc000017 	ldw	r16,0(sp)
10002540:	dec00304 	addi	sp,sp,12
10002544:	00035b41 	jmpi	100035b4 <__malloc_unlock>
10002548:	f800283a 	ret
1000254c:	1006d27a 	srli	r3,r2,9
10002550:	01000104 	movi	r4,4
10002554:	20c04036 	bltu	r4,r3,10002658 <_free_r+0x244>
10002558:	1006d1ba 	srli	r3,r2,6
1000255c:	19400e04 	addi	r5,r3,56
10002560:	2947883a 	add	r3,r5,r5
10002564:	18c7883a 	add	r3,r3,r3
10002568:	18c7883a 	add	r3,r3,r3
1000256c:	1a49883a 	add	r4,r3,r9
10002570:	20c00217 	ldw	r3,8(r4)
10002574:	01c40034 	movhi	r7,4096
10002578:	39d6f804 	addi	r7,r7,23520
1000257c:	19003b26 	beq	r3,r4,1000266c <_free_r+0x258>
10002580:	01ffff04 	movi	r7,-4
10002584:	19400117 	ldw	r5,4(r3)
10002588:	29ca703a 	and	r5,r5,r7
1000258c:	1140022e 	bgeu	r2,r5,10002598 <_free_r+0x184>
10002590:	18c00217 	ldw	r3,8(r3)
10002594:	20fffb1e 	bne	r4,r3,10002584 <__alt_data_end+0xf8002584>
10002598:	18800317 	ldw	r2,12(r3)
1000259c:	30800315 	stw	r2,12(r6)
100025a0:	30c00215 	stw	r3,8(r6)
100025a4:	11800215 	stw	r6,8(r2)
100025a8:	19800315 	stw	r6,12(r3)
100025ac:	003fe006 	br	10002530 <__alt_data_end+0xf8002530>
100025b0:	2100004c 	andi	r4,r4,1
100025b4:	1885883a 	add	r2,r3,r2
100025b8:	2000071e 	bne	r4,zero,100025d8 <_free_r+0x1c4>
100025bc:	817ffe17 	ldw	r5,-8(r16)
100025c0:	314dc83a 	sub	r6,r6,r5
100025c4:	30c00317 	ldw	r3,12(r6)
100025c8:	31000217 	ldw	r4,8(r6)
100025cc:	1145883a 	add	r2,r2,r5
100025d0:	20c00315 	stw	r3,12(r4)
100025d4:	19000215 	stw	r4,8(r3)
100025d8:	10c00054 	ori	r3,r2,1
100025dc:	30c00115 	stw	r3,4(r6)
100025e0:	00c40034 	movhi	r3,4096
100025e4:	18dc7f04 	addi	r3,r3,29180
100025e8:	18c00017 	ldw	r3,0(r3)
100025ec:	49800215 	stw	r6,8(r9)
100025f0:	10ffcf36 	bltu	r2,r3,10002530 <__alt_data_end+0xf8002530>
100025f4:	00840074 	movhi	r2,4097
100025f8:	10a32704 	addi	r2,r2,-29540
100025fc:	11400017 	ldw	r5,0(r2)
10002600:	8809883a 	mov	r4,r17
10002604:	00022f00 	call	100022f0 <_malloc_trim_r>
10002608:	003fc906 	br	10002530 <__alt_data_end+0xf8002530>
1000260c:	28c9883a 	add	r4,r5,r3
10002610:	21000117 	ldw	r4,4(r4)
10002614:	2100004c 	andi	r4,r4,1
10002618:	20000a1e 	bne	r4,zero,10002644 <_free_r+0x230>
1000261c:	29000317 	ldw	r4,12(r5)
10002620:	29400217 	ldw	r5,8(r5)
10002624:	10c5883a 	add	r2,r2,r3
10002628:	10c00054 	ori	r3,r2,1
1000262c:	29000315 	stw	r4,12(r5)
10002630:	21400215 	stw	r5,8(r4)
10002634:	30c00115 	stw	r3,4(r6)
10002638:	308d883a 	add	r6,r6,r2
1000263c:	30800015 	stw	r2,0(r6)
10002640:	003fbb06 	br	10002530 <__alt_data_end+0xf8002530>
10002644:	10c00054 	ori	r3,r2,1
10002648:	30c00115 	stw	r3,4(r6)
1000264c:	308d883a 	add	r6,r6,r2
10002650:	30800015 	stw	r2,0(r6)
10002654:	003fb606 	br	10002530 <__alt_data_end+0xf8002530>
10002658:	01000504 	movi	r4,20
1000265c:	20c01436 	bltu	r4,r3,100026b0 <_free_r+0x29c>
10002660:	194016c4 	addi	r5,r3,91
10002664:	2947883a 	add	r3,r5,r5
10002668:	003fbe06 	br	10002564 <__alt_data_end+0xf8002564>
1000266c:	280bd0ba 	srai	r5,r5,2
10002670:	00800044 	movi	r2,1
10002674:	39000117 	ldw	r4,4(r7)
10002678:	114a983a 	sll	r5,r2,r5
1000267c:	1805883a 	mov	r2,r3
10002680:	2908b03a 	or	r4,r5,r4
10002684:	39000115 	stw	r4,4(r7)
10002688:	003fc406 	br	1000259c <__alt_data_end+0xf800259c>
1000268c:	49800515 	stw	r6,20(r9)
10002690:	49800415 	stw	r6,16(r9)
10002694:	10c00054 	ori	r3,r2,1
10002698:	31000315 	stw	r4,12(r6)
1000269c:	31000215 	stw	r4,8(r6)
100026a0:	30c00115 	stw	r3,4(r6)
100026a4:	308d883a 	add	r6,r6,r2
100026a8:	30800015 	stw	r2,0(r6)
100026ac:	003fa006 	br	10002530 <__alt_data_end+0xf8002530>
100026b0:	01001504 	movi	r4,84
100026b4:	20c00436 	bltu	r4,r3,100026c8 <_free_r+0x2b4>
100026b8:	1006d33a 	srli	r3,r2,12
100026bc:	19401b84 	addi	r5,r3,110
100026c0:	2947883a 	add	r3,r5,r5
100026c4:	003fa706 	br	10002564 <__alt_data_end+0xf8002564>
100026c8:	01005504 	movi	r4,340
100026cc:	20c00436 	bltu	r4,r3,100026e0 <_free_r+0x2cc>
100026d0:	1006d3fa 	srli	r3,r2,15
100026d4:	19401dc4 	addi	r5,r3,119
100026d8:	2947883a 	add	r3,r5,r5
100026dc:	003fa106 	br	10002564 <__alt_data_end+0xf8002564>
100026e0:	01015504 	movi	r4,1364
100026e4:	20c00436 	bltu	r4,r3,100026f8 <_free_r+0x2e4>
100026e8:	1006d4ba 	srli	r3,r2,18
100026ec:	19401f04 	addi	r5,r3,124
100026f0:	2947883a 	add	r3,r5,r5
100026f4:	003f9b06 	br	10002564 <__alt_data_end+0xf8002564>
100026f8:	00c03f04 	movi	r3,252
100026fc:	01401f84 	movi	r5,126
10002700:	003f9806 	br	10002564 <__alt_data_end+0xf8002564>

10002704 <_fwalk>:
10002704:	defff804 	addi	sp,sp,-32
10002708:	dd400515 	stw	r21,20(sp)
1000270c:	2540b804 	addi	r21,r4,736
10002710:	dd800615 	stw	r22,24(sp)
10002714:	dd000415 	stw	r20,16(sp)
10002718:	dfc00715 	stw	ra,28(sp)
1000271c:	dcc00315 	stw	r19,12(sp)
10002720:	dc800215 	stw	r18,8(sp)
10002724:	dc400115 	stw	r17,4(sp)
10002728:	dc000015 	stw	r16,0(sp)
1000272c:	2829883a 	mov	r20,r5
10002730:	002d883a 	mov	r22,zero
10002734:	00022b00 	call	100022b0 <__sfp_lock_acquire>
10002738:	a8001426 	beq	r21,zero,1000278c <_fwalk+0x88>
1000273c:	04ffffc4 	movi	r19,-1
10002740:	ac400117 	ldw	r17,4(r21)
10002744:	ac800217 	ldw	r18,8(r21)
10002748:	8c7fffc4 	addi	r17,r17,-1
1000274c:	88000d16 	blt	r17,zero,10002784 <_fwalk+0x80>
10002750:	94000304 	addi	r16,r18,12
10002754:	94800384 	addi	r18,r18,14
10002758:	80c0000f 	ldh	r3,0(r16)
1000275c:	8c7fffc4 	addi	r17,r17,-1
10002760:	813ffd04 	addi	r4,r16,-12
10002764:	18000426 	beq	r3,zero,10002778 <_fwalk+0x74>
10002768:	90c0000f 	ldh	r3,0(r18)
1000276c:	1cc00226 	beq	r3,r19,10002778 <_fwalk+0x74>
10002770:	a03ee83a 	callr	r20
10002774:	b0acb03a 	or	r22,r22,r2
10002778:	84001a04 	addi	r16,r16,104
1000277c:	94801a04 	addi	r18,r18,104
10002780:	8cfff51e 	bne	r17,r19,10002758 <__alt_data_end+0xf8002758>
10002784:	ad400017 	ldw	r21,0(r21)
10002788:	a83fed1e 	bne	r21,zero,10002740 <__alt_data_end+0xf8002740>
1000278c:	00022b40 	call	100022b4 <__sfp_lock_release>
10002790:	b005883a 	mov	r2,r22
10002794:	dfc00717 	ldw	ra,28(sp)
10002798:	dd800617 	ldw	r22,24(sp)
1000279c:	dd400517 	ldw	r21,20(sp)
100027a0:	dd000417 	ldw	r20,16(sp)
100027a4:	dcc00317 	ldw	r19,12(sp)
100027a8:	dc800217 	ldw	r18,8(sp)
100027ac:	dc400117 	ldw	r17,4(sp)
100027b0:	dc000017 	ldw	r16,0(sp)
100027b4:	dec00804 	addi	sp,sp,32
100027b8:	f800283a 	ret

100027bc <_fwalk_reent>:
100027bc:	defff804 	addi	sp,sp,-32
100027c0:	dd400515 	stw	r21,20(sp)
100027c4:	2540b804 	addi	r21,r4,736
100027c8:	dd800615 	stw	r22,24(sp)
100027cc:	dd000415 	stw	r20,16(sp)
100027d0:	dcc00315 	stw	r19,12(sp)
100027d4:	dfc00715 	stw	ra,28(sp)
100027d8:	dc800215 	stw	r18,8(sp)
100027dc:	dc400115 	stw	r17,4(sp)
100027e0:	dc000015 	stw	r16,0(sp)
100027e4:	2027883a 	mov	r19,r4
100027e8:	2829883a 	mov	r20,r5
100027ec:	002d883a 	mov	r22,zero
100027f0:	00022b00 	call	100022b0 <__sfp_lock_acquire>
100027f4:	a8001326 	beq	r21,zero,10002844 <_fwalk_reent+0x88>
100027f8:	04bfffc4 	movi	r18,-1
100027fc:	ac400117 	ldw	r17,4(r21)
10002800:	ac000217 	ldw	r16,8(r21)
10002804:	8c7fffc4 	addi	r17,r17,-1
10002808:	88000c16 	blt	r17,zero,1000283c <_fwalk_reent+0x80>
1000280c:	84000304 	addi	r16,r16,12
10002810:	80c0000f 	ldh	r3,0(r16)
10002814:	8c7fffc4 	addi	r17,r17,-1
10002818:	817ffd04 	addi	r5,r16,-12
1000281c:	18000526 	beq	r3,zero,10002834 <_fwalk_reent+0x78>
10002820:	80c0008f 	ldh	r3,2(r16)
10002824:	9809883a 	mov	r4,r19
10002828:	1c800226 	beq	r3,r18,10002834 <_fwalk_reent+0x78>
1000282c:	a03ee83a 	callr	r20
10002830:	b0acb03a 	or	r22,r22,r2
10002834:	84001a04 	addi	r16,r16,104
10002838:	8cbff51e 	bne	r17,r18,10002810 <__alt_data_end+0xf8002810>
1000283c:	ad400017 	ldw	r21,0(r21)
10002840:	a83fee1e 	bne	r21,zero,100027fc <__alt_data_end+0xf80027fc>
10002844:	00022b40 	call	100022b4 <__sfp_lock_release>
10002848:	b005883a 	mov	r2,r22
1000284c:	dfc00717 	ldw	ra,28(sp)
10002850:	dd800617 	ldw	r22,24(sp)
10002854:	dd400517 	ldw	r21,20(sp)
10002858:	dd000417 	ldw	r20,16(sp)
1000285c:	dcc00317 	ldw	r19,12(sp)
10002860:	dc800217 	ldw	r18,8(sp)
10002864:	dc400117 	ldw	r17,4(sp)
10002868:	dc000017 	ldw	r16,0(sp)
1000286c:	dec00804 	addi	sp,sp,32
10002870:	f800283a 	ret

10002874 <__smakebuf_r>:
10002874:	2880030b 	ldhu	r2,12(r5)
10002878:	10c0008c 	andi	r3,r2,2
1000287c:	1800401e 	bne	r3,zero,10002980 <__smakebuf_r+0x10c>
10002880:	deffec04 	addi	sp,sp,-80
10002884:	dc000f15 	stw	r16,60(sp)
10002888:	2821883a 	mov	r16,r5
1000288c:	2940038f 	ldh	r5,14(r5)
10002890:	dc401015 	stw	r17,64(sp)
10002894:	dfc01315 	stw	ra,76(sp)
10002898:	dcc01215 	stw	r19,72(sp)
1000289c:	dc801115 	stw	r18,68(sp)
100028a0:	2023883a 	mov	r17,r4
100028a4:	28001b16 	blt	r5,zero,10002914 <__smakebuf_r+0xa0>
100028a8:	d80d883a 	mov	r6,sp
100028ac:	0002e500 	call	10002e50 <_fstat_r>
100028b0:	10001716 	blt	r2,zero,10002910 <__smakebuf_r+0x9c>
100028b4:	d8800117 	ldw	r2,4(sp)
100028b8:	00e00014 	movui	r3,32768
100028bc:	10bc000c 	andi	r2,r2,61440
100028c0:	10c03726 	beq	r2,r3,100029a0 <__smakebuf_r+0x12c>
100028c4:	80c0030b 	ldhu	r3,12(r16)
100028c8:	18c20014 	ori	r3,r3,2048
100028cc:	80c0030d 	sth	r3,12(r16)
100028d0:	00c80004 	movi	r3,8192
100028d4:	10c03c1e 	bne	r2,r3,100029c8 <__smakebuf_r+0x154>
100028d8:	8140038f 	ldh	r5,14(r16)
100028dc:	8809883a 	mov	r4,r17
100028e0:	0002ea80 	call	10002ea8 <_isatty_r>
100028e4:	10004e26 	beq	r2,zero,10002a20 <__smakebuf_r+0x1ac>
100028e8:	8080030b 	ldhu	r2,12(r16)
100028ec:	04c00044 	movi	r19,1
100028f0:	80c010c4 	addi	r3,r16,67
100028f4:	14c4b03a 	or	r2,r2,r19
100028f8:	8080030d 	sth	r2,12(r16)
100028fc:	80c00015 	stw	r3,0(r16)
10002900:	80c00415 	stw	r3,16(r16)
10002904:	84c00515 	stw	r19,20(r16)
10002908:	04810004 	movi	r18,1024
1000290c:	00000706 	br	1000292c <__smakebuf_r+0xb8>
10002910:	8080030b 	ldhu	r2,12(r16)
10002914:	10c0200c 	andi	r3,r2,128
10002918:	18001f1e 	bne	r3,zero,10002998 <__smakebuf_r+0x124>
1000291c:	04810004 	movi	r18,1024
10002920:	10820014 	ori	r2,r2,2048
10002924:	8080030d 	sth	r2,12(r16)
10002928:	0027883a 	mov	r19,zero
1000292c:	8809883a 	mov	r4,r17
10002930:	900b883a 	mov	r5,r18
10002934:	0000a9c0 	call	10000a9c <_malloc_r>
10002938:	10002e26 	beq	r2,zero,100029f4 <__smakebuf_r+0x180>
1000293c:	80c0030b 	ldhu	r3,12(r16)
10002940:	01040034 	movhi	r4,4096
10002944:	2107d304 	addi	r4,r4,8012
10002948:	89000f15 	stw	r4,60(r17)
1000294c:	18c02014 	ori	r3,r3,128
10002950:	80c0030d 	sth	r3,12(r16)
10002954:	80800015 	stw	r2,0(r16)
10002958:	80800415 	stw	r2,16(r16)
1000295c:	84800515 	stw	r18,20(r16)
10002960:	98001c1e 	bne	r19,zero,100029d4 <__smakebuf_r+0x160>
10002964:	dfc01317 	ldw	ra,76(sp)
10002968:	dcc01217 	ldw	r19,72(sp)
1000296c:	dc801117 	ldw	r18,68(sp)
10002970:	dc401017 	ldw	r17,64(sp)
10002974:	dc000f17 	ldw	r16,60(sp)
10002978:	dec01404 	addi	sp,sp,80
1000297c:	f800283a 	ret
10002980:	288010c4 	addi	r2,r5,67
10002984:	28800015 	stw	r2,0(r5)
10002988:	28800415 	stw	r2,16(r5)
1000298c:	00800044 	movi	r2,1
10002990:	28800515 	stw	r2,20(r5)
10002994:	f800283a 	ret
10002998:	04801004 	movi	r18,64
1000299c:	003fe006 	br	10002920 <__alt_data_end+0xf8002920>
100029a0:	81000a17 	ldw	r4,40(r16)
100029a4:	00c40034 	movhi	r3,4096
100029a8:	18cb0a04 	addi	r3,r3,11304
100029ac:	20ffc51e 	bne	r4,r3,100028c4 <__alt_data_end+0xf80028c4>
100029b0:	80c0030b 	ldhu	r3,12(r16)
100029b4:	01010004 	movi	r4,1024
100029b8:	81001315 	stw	r4,76(r16)
100029bc:	1906b03a 	or	r3,r3,r4
100029c0:	80c0030d 	sth	r3,12(r16)
100029c4:	003fc206 	br	100028d0 <__alt_data_end+0xf80028d0>
100029c8:	0027883a 	mov	r19,zero
100029cc:	04810004 	movi	r18,1024
100029d0:	003fd606 	br	1000292c <__alt_data_end+0xf800292c>
100029d4:	8140038f 	ldh	r5,14(r16)
100029d8:	8809883a 	mov	r4,r17
100029dc:	0002ea80 	call	10002ea8 <_isatty_r>
100029e0:	103fe026 	beq	r2,zero,10002964 <__alt_data_end+0xf8002964>
100029e4:	8080030b 	ldhu	r2,12(r16)
100029e8:	10800054 	ori	r2,r2,1
100029ec:	8080030d 	sth	r2,12(r16)
100029f0:	003fdc06 	br	10002964 <__alt_data_end+0xf8002964>
100029f4:	8080030b 	ldhu	r2,12(r16)
100029f8:	10c0800c 	andi	r3,r2,512
100029fc:	183fd91e 	bne	r3,zero,10002964 <__alt_data_end+0xf8002964>
10002a00:	10800094 	ori	r2,r2,2
10002a04:	80c010c4 	addi	r3,r16,67
10002a08:	8080030d 	sth	r2,12(r16)
10002a0c:	00800044 	movi	r2,1
10002a10:	80c00015 	stw	r3,0(r16)
10002a14:	80c00415 	stw	r3,16(r16)
10002a18:	80800515 	stw	r2,20(r16)
10002a1c:	003fd106 	br	10002964 <__alt_data_end+0xf8002964>
10002a20:	04c00044 	movi	r19,1
10002a24:	04810004 	movi	r18,1024
10002a28:	003fc006 	br	1000292c <__alt_data_end+0xf800292c>

10002a2c <memset>:
10002a2c:	20c000cc 	andi	r3,r4,3
10002a30:	2005883a 	mov	r2,r4
10002a34:	18004326 	beq	r3,zero,10002b44 <memset+0x118>
10002a38:	31ffffc4 	addi	r7,r6,-1
10002a3c:	30004026 	beq	r6,zero,10002b40 <memset+0x114>
10002a40:	2813883a 	mov	r9,r5
10002a44:	200d883a 	mov	r6,r4
10002a48:	2007883a 	mov	r3,r4
10002a4c:	00000406 	br	10002a60 <memset+0x34>
10002a50:	3a3fffc4 	addi	r8,r7,-1
10002a54:	31800044 	addi	r6,r6,1
10002a58:	38003926 	beq	r7,zero,10002b40 <memset+0x114>
10002a5c:	400f883a 	mov	r7,r8
10002a60:	18c00044 	addi	r3,r3,1
10002a64:	32400005 	stb	r9,0(r6)
10002a68:	1a0000cc 	andi	r8,r3,3
10002a6c:	403ff81e 	bne	r8,zero,10002a50 <__alt_data_end+0xf8002a50>
10002a70:	010000c4 	movi	r4,3
10002a74:	21c02d2e 	bgeu	r4,r7,10002b2c <memset+0x100>
10002a78:	29803fcc 	andi	r6,r5,255
10002a7c:	3008923a 	slli	r4,r6,8
10002a80:	218cb03a 	or	r6,r4,r6
10002a84:	3008943a 	slli	r4,r6,16
10002a88:	218cb03a 	or	r6,r4,r6
10002a8c:	010003c4 	movi	r4,15
10002a90:	21c0182e 	bgeu	r4,r7,10002af4 <memset+0xc8>
10002a94:	3b3ffc04 	addi	r12,r7,-16
10002a98:	6018d13a 	srli	r12,r12,4
10002a9c:	1a000104 	addi	r8,r3,4
10002aa0:	1ac00204 	addi	r11,r3,8
10002aa4:	6008913a 	slli	r4,r12,4
10002aa8:	1a800304 	addi	r10,r3,12
10002aac:	1813883a 	mov	r9,r3
10002ab0:	21000504 	addi	r4,r4,20
10002ab4:	1909883a 	add	r4,r3,r4
10002ab8:	49800015 	stw	r6,0(r9)
10002abc:	41800015 	stw	r6,0(r8)
10002ac0:	59800015 	stw	r6,0(r11)
10002ac4:	51800015 	stw	r6,0(r10)
10002ac8:	42000404 	addi	r8,r8,16
10002acc:	4a400404 	addi	r9,r9,16
10002ad0:	5ac00404 	addi	r11,r11,16
10002ad4:	52800404 	addi	r10,r10,16
10002ad8:	413ff71e 	bne	r8,r4,10002ab8 <__alt_data_end+0xf8002ab8>
10002adc:	63000044 	addi	r12,r12,1
10002ae0:	6018913a 	slli	r12,r12,4
10002ae4:	39c003cc 	andi	r7,r7,15
10002ae8:	010000c4 	movi	r4,3
10002aec:	1b07883a 	add	r3,r3,r12
10002af0:	21c00e2e 	bgeu	r4,r7,10002b2c <memset+0x100>
10002af4:	1813883a 	mov	r9,r3
10002af8:	3811883a 	mov	r8,r7
10002afc:	010000c4 	movi	r4,3
10002b00:	49800015 	stw	r6,0(r9)
10002b04:	423fff04 	addi	r8,r8,-4
10002b08:	4a400104 	addi	r9,r9,4
10002b0c:	223ffc36 	bltu	r4,r8,10002b00 <__alt_data_end+0xf8002b00>
10002b10:	393fff04 	addi	r4,r7,-4
10002b14:	2008d0ba 	srli	r4,r4,2
10002b18:	39c000cc 	andi	r7,r7,3
10002b1c:	21000044 	addi	r4,r4,1
10002b20:	2109883a 	add	r4,r4,r4
10002b24:	2109883a 	add	r4,r4,r4
10002b28:	1907883a 	add	r3,r3,r4
10002b2c:	38000426 	beq	r7,zero,10002b40 <memset+0x114>
10002b30:	19cf883a 	add	r7,r3,r7
10002b34:	19400005 	stb	r5,0(r3)
10002b38:	18c00044 	addi	r3,r3,1
10002b3c:	19fffd1e 	bne	r3,r7,10002b34 <__alt_data_end+0xf8002b34>
10002b40:	f800283a 	ret
10002b44:	2007883a 	mov	r3,r4
10002b48:	300f883a 	mov	r7,r6
10002b4c:	003fc806 	br	10002a70 <__alt_data_end+0xf8002a70>

10002b50 <__sread>:
10002b50:	defffe04 	addi	sp,sp,-8
10002b54:	dc000015 	stw	r16,0(sp)
10002b58:	2821883a 	mov	r16,r5
10002b5c:	2940038f 	ldh	r5,14(r5)
10002b60:	dfc00115 	stw	ra,4(sp)
10002b64:	0002f580 	call	10002f58 <_read_r>
10002b68:	10000716 	blt	r2,zero,10002b88 <__sread+0x38>
10002b6c:	80c01417 	ldw	r3,80(r16)
10002b70:	1887883a 	add	r3,r3,r2
10002b74:	80c01415 	stw	r3,80(r16)
10002b78:	dfc00117 	ldw	ra,4(sp)
10002b7c:	dc000017 	ldw	r16,0(sp)
10002b80:	dec00204 	addi	sp,sp,8
10002b84:	f800283a 	ret
10002b88:	80c0030b 	ldhu	r3,12(r16)
10002b8c:	18fbffcc 	andi	r3,r3,61439
10002b90:	80c0030d 	sth	r3,12(r16)
10002b94:	dfc00117 	ldw	ra,4(sp)
10002b98:	dc000017 	ldw	r16,0(sp)
10002b9c:	dec00204 	addi	sp,sp,8
10002ba0:	f800283a 	ret

10002ba4 <__seofread>:
10002ba4:	0005883a 	mov	r2,zero
10002ba8:	f800283a 	ret

10002bac <__swrite>:
10002bac:	2880030b 	ldhu	r2,12(r5)
10002bb0:	defffb04 	addi	sp,sp,-20
10002bb4:	dcc00315 	stw	r19,12(sp)
10002bb8:	dc800215 	stw	r18,8(sp)
10002bbc:	dc400115 	stw	r17,4(sp)
10002bc0:	dc000015 	stw	r16,0(sp)
10002bc4:	dfc00415 	stw	ra,16(sp)
10002bc8:	10c0400c 	andi	r3,r2,256
10002bcc:	2821883a 	mov	r16,r5
10002bd0:	2027883a 	mov	r19,r4
10002bd4:	3025883a 	mov	r18,r6
10002bd8:	3823883a 	mov	r17,r7
10002bdc:	18000526 	beq	r3,zero,10002bf4 <__swrite+0x48>
10002be0:	2940038f 	ldh	r5,14(r5)
10002be4:	000d883a 	mov	r6,zero
10002be8:	01c00084 	movi	r7,2
10002bec:	0002efc0 	call	10002efc <_lseek_r>
10002bf0:	8080030b 	ldhu	r2,12(r16)
10002bf4:	8140038f 	ldh	r5,14(r16)
10002bf8:	10bbffcc 	andi	r2,r2,61439
10002bfc:	9809883a 	mov	r4,r19
10002c00:	900d883a 	mov	r6,r18
10002c04:	880f883a 	mov	r7,r17
10002c08:	8080030d 	sth	r2,12(r16)
10002c0c:	dfc00417 	ldw	ra,16(sp)
10002c10:	dcc00317 	ldw	r19,12(sp)
10002c14:	dc800217 	ldw	r18,8(sp)
10002c18:	dc400117 	ldw	r17,4(sp)
10002c1c:	dc000017 	ldw	r16,0(sp)
10002c20:	dec00504 	addi	sp,sp,20
10002c24:	0002c8c1 	jmpi	10002c8c <_write_r>

10002c28 <__sseek>:
10002c28:	defffe04 	addi	sp,sp,-8
10002c2c:	dc000015 	stw	r16,0(sp)
10002c30:	2821883a 	mov	r16,r5
10002c34:	2940038f 	ldh	r5,14(r5)
10002c38:	dfc00115 	stw	ra,4(sp)
10002c3c:	0002efc0 	call	10002efc <_lseek_r>
10002c40:	00ffffc4 	movi	r3,-1
10002c44:	10c00826 	beq	r2,r3,10002c68 <__sseek+0x40>
10002c48:	80c0030b 	ldhu	r3,12(r16)
10002c4c:	80801415 	stw	r2,80(r16)
10002c50:	18c40014 	ori	r3,r3,4096
10002c54:	80c0030d 	sth	r3,12(r16)
10002c58:	dfc00117 	ldw	ra,4(sp)
10002c5c:	dc000017 	ldw	r16,0(sp)
10002c60:	dec00204 	addi	sp,sp,8
10002c64:	f800283a 	ret
10002c68:	80c0030b 	ldhu	r3,12(r16)
10002c6c:	18fbffcc 	andi	r3,r3,61439
10002c70:	80c0030d 	sth	r3,12(r16)
10002c74:	dfc00117 	ldw	ra,4(sp)
10002c78:	dc000017 	ldw	r16,0(sp)
10002c7c:	dec00204 	addi	sp,sp,8
10002c80:	f800283a 	ret

10002c84 <__sclose>:
10002c84:	2940038f 	ldh	r5,14(r5)
10002c88:	0002ce81 	jmpi	10002ce8 <_close_r>

10002c8c <_write_r>:
10002c8c:	defffd04 	addi	sp,sp,-12
10002c90:	dc000015 	stw	r16,0(sp)
10002c94:	04040074 	movhi	r16,4097
10002c98:	dc400115 	stw	r17,4(sp)
10002c9c:	84232804 	addi	r16,r16,-29536
10002ca0:	2023883a 	mov	r17,r4
10002ca4:	2809883a 	mov	r4,r5
10002ca8:	300b883a 	mov	r5,r6
10002cac:	380d883a 	mov	r6,r7
10002cb0:	dfc00215 	stw	ra,8(sp)
10002cb4:	80000015 	stw	zero,0(r16)
10002cb8:	00038a80 	call	100038a8 <write>
10002cbc:	00ffffc4 	movi	r3,-1
10002cc0:	10c00526 	beq	r2,r3,10002cd8 <_write_r+0x4c>
10002cc4:	dfc00217 	ldw	ra,8(sp)
10002cc8:	dc400117 	ldw	r17,4(sp)
10002ccc:	dc000017 	ldw	r16,0(sp)
10002cd0:	dec00304 	addi	sp,sp,12
10002cd4:	f800283a 	ret
10002cd8:	80c00017 	ldw	r3,0(r16)
10002cdc:	183ff926 	beq	r3,zero,10002cc4 <__alt_data_end+0xf8002cc4>
10002ce0:	88c00015 	stw	r3,0(r17)
10002ce4:	003ff706 	br	10002cc4 <__alt_data_end+0xf8002cc4>

10002ce8 <_close_r>:
10002ce8:	defffd04 	addi	sp,sp,-12
10002cec:	dc000015 	stw	r16,0(sp)
10002cf0:	04040074 	movhi	r16,4097
10002cf4:	dc400115 	stw	r17,4(sp)
10002cf8:	84232804 	addi	r16,r16,-29536
10002cfc:	2023883a 	mov	r17,r4
10002d00:	2809883a 	mov	r4,r5
10002d04:	dfc00215 	stw	ra,8(sp)
10002d08:	80000015 	stw	zero,0(r16)
10002d0c:	00030040 	call	10003004 <close>
10002d10:	00ffffc4 	movi	r3,-1
10002d14:	10c00526 	beq	r2,r3,10002d2c <_close_r+0x44>
10002d18:	dfc00217 	ldw	ra,8(sp)
10002d1c:	dc400117 	ldw	r17,4(sp)
10002d20:	dc000017 	ldw	r16,0(sp)
10002d24:	dec00304 	addi	sp,sp,12
10002d28:	f800283a 	ret
10002d2c:	80c00017 	ldw	r3,0(r16)
10002d30:	183ff926 	beq	r3,zero,10002d18 <__alt_data_end+0xf8002d18>
10002d34:	88c00015 	stw	r3,0(r17)
10002d38:	003ff706 	br	10002d18 <__alt_data_end+0xf8002d18>

10002d3c <_fclose_r>:
10002d3c:	28003226 	beq	r5,zero,10002e08 <_fclose_r+0xcc>
10002d40:	defffc04 	addi	sp,sp,-16
10002d44:	dc400115 	stw	r17,4(sp)
10002d48:	2023883a 	mov	r17,r4
10002d4c:	dc000015 	stw	r16,0(sp)
10002d50:	dfc00315 	stw	ra,12(sp)
10002d54:	dc800215 	stw	r18,8(sp)
10002d58:	2821883a 	mov	r16,r5
10002d5c:	00022b00 	call	100022b0 <__sfp_lock_acquire>
10002d60:	88000226 	beq	r17,zero,10002d6c <_fclose_r+0x30>
10002d64:	88800e17 	ldw	r2,56(r17)
10002d68:	10002926 	beq	r2,zero,10002e10 <_fclose_r+0xd4>
10002d6c:	8080030f 	ldh	r2,12(r16)
10002d70:	10002226 	beq	r2,zero,10002dfc <_fclose_r+0xc0>
10002d74:	8809883a 	mov	r4,r17
10002d78:	800b883a 	mov	r5,r16
10002d7c:	0001ce40 	call	10001ce4 <_fflush_r>
10002d80:	1025883a 	mov	r18,r2
10002d84:	80800b17 	ldw	r2,44(r16)
10002d88:	10000426 	beq	r2,zero,10002d9c <_fclose_r+0x60>
10002d8c:	81400717 	ldw	r5,28(r16)
10002d90:	8809883a 	mov	r4,r17
10002d94:	103ee83a 	callr	r2
10002d98:	10002616 	blt	r2,zero,10002e34 <_fclose_r+0xf8>
10002d9c:	8080030b 	ldhu	r2,12(r16)
10002da0:	1080200c 	andi	r2,r2,128
10002da4:	10001f1e 	bne	r2,zero,10002e24 <_fclose_r+0xe8>
10002da8:	81400c17 	ldw	r5,48(r16)
10002dac:	28000526 	beq	r5,zero,10002dc4 <_fclose_r+0x88>
10002db0:	80801004 	addi	r2,r16,64
10002db4:	28800226 	beq	r5,r2,10002dc0 <_fclose_r+0x84>
10002db8:	8809883a 	mov	r4,r17
10002dbc:	00024140 	call	10002414 <_free_r>
10002dc0:	80000c15 	stw	zero,48(r16)
10002dc4:	81401117 	ldw	r5,68(r16)
10002dc8:	28000326 	beq	r5,zero,10002dd8 <_fclose_r+0x9c>
10002dcc:	8809883a 	mov	r4,r17
10002dd0:	00024140 	call	10002414 <_free_r>
10002dd4:	80001115 	stw	zero,68(r16)
10002dd8:	8000030d 	sth	zero,12(r16)
10002ddc:	00022b40 	call	100022b4 <__sfp_lock_release>
10002de0:	9005883a 	mov	r2,r18
10002de4:	dfc00317 	ldw	ra,12(sp)
10002de8:	dc800217 	ldw	r18,8(sp)
10002dec:	dc400117 	ldw	r17,4(sp)
10002df0:	dc000017 	ldw	r16,0(sp)
10002df4:	dec00404 	addi	sp,sp,16
10002df8:	f800283a 	ret
10002dfc:	00022b40 	call	100022b4 <__sfp_lock_release>
10002e00:	0005883a 	mov	r2,zero
10002e04:	003ff706 	br	10002de4 <__alt_data_end+0xf8002de4>
10002e08:	0005883a 	mov	r2,zero
10002e0c:	f800283a 	ret
10002e10:	8809883a 	mov	r4,r17
10002e14:	00022a00 	call	100022a0 <__sinit>
10002e18:	8080030f 	ldh	r2,12(r16)
10002e1c:	103fd51e 	bne	r2,zero,10002d74 <__alt_data_end+0xf8002d74>
10002e20:	003ff606 	br	10002dfc <__alt_data_end+0xf8002dfc>
10002e24:	81400417 	ldw	r5,16(r16)
10002e28:	8809883a 	mov	r4,r17
10002e2c:	00024140 	call	10002414 <_free_r>
10002e30:	003fdd06 	br	10002da8 <__alt_data_end+0xf8002da8>
10002e34:	04bfffc4 	movi	r18,-1
10002e38:	003fd806 	br	10002d9c <__alt_data_end+0xf8002d9c>

10002e3c <fclose>:
10002e3c:	00840034 	movhi	r2,4096
10002e40:	109c7d04 	addi	r2,r2,29172
10002e44:	200b883a 	mov	r5,r4
10002e48:	11000017 	ldw	r4,0(r2)
10002e4c:	0002d3c1 	jmpi	10002d3c <_fclose_r>

10002e50 <_fstat_r>:
10002e50:	defffd04 	addi	sp,sp,-12
10002e54:	dc000015 	stw	r16,0(sp)
10002e58:	04040074 	movhi	r16,4097
10002e5c:	dc400115 	stw	r17,4(sp)
10002e60:	84232804 	addi	r16,r16,-29536
10002e64:	2023883a 	mov	r17,r4
10002e68:	2809883a 	mov	r4,r5
10002e6c:	300b883a 	mov	r5,r6
10002e70:	dfc00215 	stw	ra,8(sp)
10002e74:	80000015 	stw	zero,0(r16)
10002e78:	00031580 	call	10003158 <fstat>
10002e7c:	00ffffc4 	movi	r3,-1
10002e80:	10c00526 	beq	r2,r3,10002e98 <_fstat_r+0x48>
10002e84:	dfc00217 	ldw	ra,8(sp)
10002e88:	dc400117 	ldw	r17,4(sp)
10002e8c:	dc000017 	ldw	r16,0(sp)
10002e90:	dec00304 	addi	sp,sp,12
10002e94:	f800283a 	ret
10002e98:	80c00017 	ldw	r3,0(r16)
10002e9c:	183ff926 	beq	r3,zero,10002e84 <__alt_data_end+0xf8002e84>
10002ea0:	88c00015 	stw	r3,0(r17)
10002ea4:	003ff706 	br	10002e84 <__alt_data_end+0xf8002e84>

10002ea8 <_isatty_r>:
10002ea8:	defffd04 	addi	sp,sp,-12
10002eac:	dc000015 	stw	r16,0(sp)
10002eb0:	04040074 	movhi	r16,4097
10002eb4:	dc400115 	stw	r17,4(sp)
10002eb8:	84232804 	addi	r16,r16,-29536
10002ebc:	2023883a 	mov	r17,r4
10002ec0:	2809883a 	mov	r4,r5
10002ec4:	dfc00215 	stw	ra,8(sp)
10002ec8:	80000015 	stw	zero,0(r16)
10002ecc:	00032600 	call	10003260 <isatty>
10002ed0:	00ffffc4 	movi	r3,-1
10002ed4:	10c00526 	beq	r2,r3,10002eec <_isatty_r+0x44>
10002ed8:	dfc00217 	ldw	ra,8(sp)
10002edc:	dc400117 	ldw	r17,4(sp)
10002ee0:	dc000017 	ldw	r16,0(sp)
10002ee4:	dec00304 	addi	sp,sp,12
10002ee8:	f800283a 	ret
10002eec:	80c00017 	ldw	r3,0(r16)
10002ef0:	183ff926 	beq	r3,zero,10002ed8 <__alt_data_end+0xf8002ed8>
10002ef4:	88c00015 	stw	r3,0(r17)
10002ef8:	003ff706 	br	10002ed8 <__alt_data_end+0xf8002ed8>

10002efc <_lseek_r>:
10002efc:	defffd04 	addi	sp,sp,-12
10002f00:	dc000015 	stw	r16,0(sp)
10002f04:	04040074 	movhi	r16,4097
10002f08:	dc400115 	stw	r17,4(sp)
10002f0c:	84232804 	addi	r16,r16,-29536
10002f10:	2023883a 	mov	r17,r4
10002f14:	2809883a 	mov	r4,r5
10002f18:	300b883a 	mov	r5,r6
10002f1c:	380d883a 	mov	r6,r7
10002f20:	dfc00215 	stw	ra,8(sp)
10002f24:	80000015 	stw	zero,0(r16)
10002f28:	00034400 	call	10003440 <lseek>
10002f2c:	00ffffc4 	movi	r3,-1
10002f30:	10c00526 	beq	r2,r3,10002f48 <_lseek_r+0x4c>
10002f34:	dfc00217 	ldw	ra,8(sp)
10002f38:	dc400117 	ldw	r17,4(sp)
10002f3c:	dc000017 	ldw	r16,0(sp)
10002f40:	dec00304 	addi	sp,sp,12
10002f44:	f800283a 	ret
10002f48:	80c00017 	ldw	r3,0(r16)
10002f4c:	183ff926 	beq	r3,zero,10002f34 <__alt_data_end+0xf8002f34>
10002f50:	88c00015 	stw	r3,0(r17)
10002f54:	003ff706 	br	10002f34 <__alt_data_end+0xf8002f34>

10002f58 <_read_r>:
10002f58:	defffd04 	addi	sp,sp,-12
10002f5c:	dc000015 	stw	r16,0(sp)
10002f60:	04040074 	movhi	r16,4097
10002f64:	dc400115 	stw	r17,4(sp)
10002f68:	84232804 	addi	r16,r16,-29536
10002f6c:	2023883a 	mov	r17,r4
10002f70:	2809883a 	mov	r4,r5
10002f74:	300b883a 	mov	r5,r6
10002f78:	380d883a 	mov	r6,r7
10002f7c:	dfc00215 	stw	ra,8(sp)
10002f80:	80000015 	stw	zero,0(r16)
10002f84:	00036240 	call	10003624 <read>
10002f88:	00ffffc4 	movi	r3,-1
10002f8c:	10c00526 	beq	r2,r3,10002fa4 <_read_r+0x4c>
10002f90:	dfc00217 	ldw	ra,8(sp)
10002f94:	dc400117 	ldw	r17,4(sp)
10002f98:	dc000017 	ldw	r16,0(sp)
10002f9c:	dec00304 	addi	sp,sp,12
10002fa0:	f800283a 	ret
10002fa4:	80c00017 	ldw	r3,0(r16)
10002fa8:	183ff926 	beq	r3,zero,10002f90 <__alt_data_end+0xf8002f90>
10002fac:	88c00015 	stw	r3,0(r17)
10002fb0:	003ff706 	br	10002f90 <__alt_data_end+0xf8002f90>

10002fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002fb4:	defffe04 	addi	sp,sp,-8
10002fb8:	dfc00115 	stw	ra,4(sp)
10002fbc:	df000015 	stw	fp,0(sp)
10002fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002fc4:	00840034 	movhi	r2,4096
10002fc8:	109c8504 	addi	r2,r2,29204
10002fcc:	10800017 	ldw	r2,0(r2)
10002fd0:	10000526 	beq	r2,zero,10002fe8 <alt_get_errno+0x34>
10002fd4:	00840034 	movhi	r2,4096
10002fd8:	109c8504 	addi	r2,r2,29204
10002fdc:	10800017 	ldw	r2,0(r2)
10002fe0:	103ee83a 	callr	r2
10002fe4:	00000206 	br	10002ff0 <alt_get_errno+0x3c>
10002fe8:	00840074 	movhi	r2,4097
10002fec:	10a32804 	addi	r2,r2,-29536
}
10002ff0:	e037883a 	mov	sp,fp
10002ff4:	dfc00117 	ldw	ra,4(sp)
10002ff8:	df000017 	ldw	fp,0(sp)
10002ffc:	dec00204 	addi	sp,sp,8
10003000:	f800283a 	ret

10003004 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10003004:	defffb04 	addi	sp,sp,-20
10003008:	dfc00415 	stw	ra,16(sp)
1000300c:	df000315 	stw	fp,12(sp)
10003010:	df000304 	addi	fp,sp,12
10003014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10003018:	e0bfff17 	ldw	r2,-4(fp)
1000301c:	10000816 	blt	r2,zero,10003040 <close+0x3c>
10003020:	e13fff17 	ldw	r4,-4(fp)
10003024:	01400304 	movi	r5,12
10003028:	000046c0 	call	1000046c <__mulsi3>
1000302c:	1007883a 	mov	r3,r2
10003030:	00840034 	movhi	r2,4096
10003034:	10980404 	addi	r2,r2,24592
10003038:	1885883a 	add	r2,r3,r2
1000303c:	00000106 	br	10003044 <close+0x40>
10003040:	0005883a 	mov	r2,zero
10003044:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10003048:	e0bffd17 	ldw	r2,-12(fp)
1000304c:	10001926 	beq	r2,zero,100030b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10003050:	e0bffd17 	ldw	r2,-12(fp)
10003054:	10800017 	ldw	r2,0(r2)
10003058:	10800417 	ldw	r2,16(r2)
1000305c:	10000626 	beq	r2,zero,10003078 <close+0x74>
10003060:	e0bffd17 	ldw	r2,-12(fp)
10003064:	10800017 	ldw	r2,0(r2)
10003068:	10800417 	ldw	r2,16(r2)
1000306c:	e13ffd17 	ldw	r4,-12(fp)
10003070:	103ee83a 	callr	r2
10003074:	00000106 	br	1000307c <close+0x78>
10003078:	0005883a 	mov	r2,zero
1000307c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10003080:	e13fff17 	ldw	r4,-4(fp)
10003084:	00037280 	call	10003728 <alt_release_fd>
    if (rval < 0)
10003088:	e0bffe17 	ldw	r2,-8(fp)
1000308c:	1000070e 	bge	r2,zero,100030ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
10003090:	0002fb40 	call	10002fb4 <alt_get_errno>
10003094:	1007883a 	mov	r3,r2
10003098:	e0bffe17 	ldw	r2,-8(fp)
1000309c:	0085c83a 	sub	r2,zero,r2
100030a0:	18800015 	stw	r2,0(r3)
      return -1;
100030a4:	00bfffc4 	movi	r2,-1
100030a8:	00000706 	br	100030c8 <close+0xc4>
    }
    return 0;
100030ac:	0005883a 	mov	r2,zero
100030b0:	00000506 	br	100030c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100030b4:	0002fb40 	call	10002fb4 <alt_get_errno>
100030b8:	1007883a 	mov	r3,r2
100030bc:	00801444 	movi	r2,81
100030c0:	18800015 	stw	r2,0(r3)
    return -1;
100030c4:	00bfffc4 	movi	r2,-1
  }
}
100030c8:	e037883a 	mov	sp,fp
100030cc:	dfc00117 	ldw	ra,4(sp)
100030d0:	df000017 	ldw	fp,0(sp)
100030d4:	dec00204 	addi	sp,sp,8
100030d8:	f800283a 	ret

100030dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100030dc:	defffc04 	addi	sp,sp,-16
100030e0:	df000315 	stw	fp,12(sp)
100030e4:	df000304 	addi	fp,sp,12
100030e8:	e13ffd15 	stw	r4,-12(fp)
100030ec:	e17ffe15 	stw	r5,-8(fp)
100030f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
100030f4:	e0bfff17 	ldw	r2,-4(fp)
}
100030f8:	e037883a 	mov	sp,fp
100030fc:	df000017 	ldw	fp,0(sp)
10003100:	dec00104 	addi	sp,sp,4
10003104:	f800283a 	ret

10003108 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003108:	defffe04 	addi	sp,sp,-8
1000310c:	dfc00115 	stw	ra,4(sp)
10003110:	df000015 	stw	fp,0(sp)
10003114:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003118:	00840034 	movhi	r2,4096
1000311c:	109c8504 	addi	r2,r2,29204
10003120:	10800017 	ldw	r2,0(r2)
10003124:	10000526 	beq	r2,zero,1000313c <alt_get_errno+0x34>
10003128:	00840034 	movhi	r2,4096
1000312c:	109c8504 	addi	r2,r2,29204
10003130:	10800017 	ldw	r2,0(r2)
10003134:	103ee83a 	callr	r2
10003138:	00000206 	br	10003144 <alt_get_errno+0x3c>
1000313c:	00840074 	movhi	r2,4097
10003140:	10a32804 	addi	r2,r2,-29536
}
10003144:	e037883a 	mov	sp,fp
10003148:	dfc00117 	ldw	ra,4(sp)
1000314c:	df000017 	ldw	fp,0(sp)
10003150:	dec00204 	addi	sp,sp,8
10003154:	f800283a 	ret

10003158 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10003158:	defffb04 	addi	sp,sp,-20
1000315c:	dfc00415 	stw	ra,16(sp)
10003160:	df000315 	stw	fp,12(sp)
10003164:	df000304 	addi	fp,sp,12
10003168:	e13ffe15 	stw	r4,-8(fp)
1000316c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003170:	e0bffe17 	ldw	r2,-8(fp)
10003174:	10000816 	blt	r2,zero,10003198 <fstat+0x40>
10003178:	e13ffe17 	ldw	r4,-8(fp)
1000317c:	01400304 	movi	r5,12
10003180:	000046c0 	call	1000046c <__mulsi3>
10003184:	1007883a 	mov	r3,r2
10003188:	00840034 	movhi	r2,4096
1000318c:	10980404 	addi	r2,r2,24592
10003190:	1885883a 	add	r2,r3,r2
10003194:	00000106 	br	1000319c <fstat+0x44>
10003198:	0005883a 	mov	r2,zero
1000319c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100031a0:	e0bffd17 	ldw	r2,-12(fp)
100031a4:	10001026 	beq	r2,zero,100031e8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100031a8:	e0bffd17 	ldw	r2,-12(fp)
100031ac:	10800017 	ldw	r2,0(r2)
100031b0:	10800817 	ldw	r2,32(r2)
100031b4:	10000726 	beq	r2,zero,100031d4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100031b8:	e0bffd17 	ldw	r2,-12(fp)
100031bc:	10800017 	ldw	r2,0(r2)
100031c0:	10800817 	ldw	r2,32(r2)
100031c4:	e13ffd17 	ldw	r4,-12(fp)
100031c8:	e17fff17 	ldw	r5,-4(fp)
100031cc:	103ee83a 	callr	r2
100031d0:	00000a06 	br	100031fc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100031d4:	e0bfff17 	ldw	r2,-4(fp)
100031d8:	00c80004 	movi	r3,8192
100031dc:	10c00115 	stw	r3,4(r2)
      return 0;
100031e0:	0005883a 	mov	r2,zero
100031e4:	00000506 	br	100031fc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100031e8:	00031080 	call	10003108 <alt_get_errno>
100031ec:	1007883a 	mov	r3,r2
100031f0:	00801444 	movi	r2,81
100031f4:	18800015 	stw	r2,0(r3)
    return -1;
100031f8:	00bfffc4 	movi	r2,-1
  }
}
100031fc:	e037883a 	mov	sp,fp
10003200:	dfc00117 	ldw	ra,4(sp)
10003204:	df000017 	ldw	fp,0(sp)
10003208:	dec00204 	addi	sp,sp,8
1000320c:	f800283a 	ret

10003210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003210:	defffe04 	addi	sp,sp,-8
10003214:	dfc00115 	stw	ra,4(sp)
10003218:	df000015 	stw	fp,0(sp)
1000321c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003220:	00840034 	movhi	r2,4096
10003224:	109c8504 	addi	r2,r2,29204
10003228:	10800017 	ldw	r2,0(r2)
1000322c:	10000526 	beq	r2,zero,10003244 <alt_get_errno+0x34>
10003230:	00840034 	movhi	r2,4096
10003234:	109c8504 	addi	r2,r2,29204
10003238:	10800017 	ldw	r2,0(r2)
1000323c:	103ee83a 	callr	r2
10003240:	00000206 	br	1000324c <alt_get_errno+0x3c>
10003244:	00840074 	movhi	r2,4097
10003248:	10a32804 	addi	r2,r2,-29536
}
1000324c:	e037883a 	mov	sp,fp
10003250:	dfc00117 	ldw	ra,4(sp)
10003254:	df000017 	ldw	fp,0(sp)
10003258:	dec00204 	addi	sp,sp,8
1000325c:	f800283a 	ret

10003260 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10003260:	deffed04 	addi	sp,sp,-76
10003264:	dfc01215 	stw	ra,72(sp)
10003268:	df001115 	stw	fp,68(sp)
1000326c:	df001104 	addi	fp,sp,68
10003270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003274:	e0bfff17 	ldw	r2,-4(fp)
10003278:	10000816 	blt	r2,zero,1000329c <isatty+0x3c>
1000327c:	e13fff17 	ldw	r4,-4(fp)
10003280:	01400304 	movi	r5,12
10003284:	000046c0 	call	1000046c <__mulsi3>
10003288:	1007883a 	mov	r3,r2
1000328c:	00840034 	movhi	r2,4096
10003290:	10980404 	addi	r2,r2,24592
10003294:	1885883a 	add	r2,r3,r2
10003298:	00000106 	br	100032a0 <isatty+0x40>
1000329c:	0005883a 	mov	r2,zero
100032a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100032a4:	e0bfef17 	ldw	r2,-68(fp)
100032a8:	10000e26 	beq	r2,zero,100032e4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100032ac:	e0bfef17 	ldw	r2,-68(fp)
100032b0:	10800017 	ldw	r2,0(r2)
100032b4:	10800817 	ldw	r2,32(r2)
100032b8:	1000021e 	bne	r2,zero,100032c4 <isatty+0x64>
    {
      return 1;
100032bc:	00800044 	movi	r2,1
100032c0:	00000d06 	br	100032f8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100032c4:	e0bff004 	addi	r2,fp,-64
100032c8:	e13fff17 	ldw	r4,-4(fp)
100032cc:	100b883a 	mov	r5,r2
100032d0:	00031580 	call	10003158 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100032d4:	e0bff117 	ldw	r2,-60(fp)
100032d8:	10880020 	cmpeqi	r2,r2,8192
100032dc:	10803fcc 	andi	r2,r2,255
100032e0:	00000506 	br	100032f8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100032e4:	00032100 	call	10003210 <alt_get_errno>
100032e8:	1007883a 	mov	r3,r2
100032ec:	00801444 	movi	r2,81
100032f0:	18800015 	stw	r2,0(r3)
    return 0;
100032f4:	0005883a 	mov	r2,zero
  }
}
100032f8:	e037883a 	mov	sp,fp
100032fc:	dfc00117 	ldw	ra,4(sp)
10003300:	df000017 	ldw	fp,0(sp)
10003304:	dec00204 	addi	sp,sp,8
10003308:	f800283a 	ret

1000330c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000330c:	defffc04 	addi	sp,sp,-16
10003310:	df000315 	stw	fp,12(sp)
10003314:	df000304 	addi	fp,sp,12
10003318:	e13ffd15 	stw	r4,-12(fp)
1000331c:	e17ffe15 	stw	r5,-8(fp)
10003320:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10003324:	e0fffe17 	ldw	r3,-8(fp)
10003328:	e0bffd17 	ldw	r2,-12(fp)
1000332c:	18800c26 	beq	r3,r2,10003360 <alt_load_section+0x54>
  {
    while( to != end )
10003330:	00000806 	br	10003354 <alt_load_section+0x48>
    {
      *to++ = *from++;
10003334:	e0bffe17 	ldw	r2,-8(fp)
10003338:	10c00104 	addi	r3,r2,4
1000333c:	e0fffe15 	stw	r3,-8(fp)
10003340:	e0fffd17 	ldw	r3,-12(fp)
10003344:	19000104 	addi	r4,r3,4
10003348:	e13ffd15 	stw	r4,-12(fp)
1000334c:	18c00017 	ldw	r3,0(r3)
10003350:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003354:	e0fffe17 	ldw	r3,-8(fp)
10003358:	e0bfff17 	ldw	r2,-4(fp)
1000335c:	18bff51e 	bne	r3,r2,10003334 <__alt_data_end+0xf8003334>
    {
      *to++ = *from++;
    }
  }
}
10003360:	e037883a 	mov	sp,fp
10003364:	df000017 	ldw	fp,0(sp)
10003368:	dec00104 	addi	sp,sp,4
1000336c:	f800283a 	ret

10003370 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003370:	defffe04 	addi	sp,sp,-8
10003374:	dfc00115 	stw	ra,4(sp)
10003378:	df000015 	stw	fp,0(sp)
1000337c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003380:	01040034 	movhi	r4,4096
10003384:	211c8a04 	addi	r4,r4,29224
10003388:	01440034 	movhi	r5,4096
1000338c:	2955ef04 	addi	r5,r5,22460
10003390:	01840034 	movhi	r6,4096
10003394:	319c8a04 	addi	r6,r6,29224
10003398:	000330c0 	call	1000330c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000339c:	01040034 	movhi	r4,4096
100033a0:	21000804 	addi	r4,r4,32
100033a4:	01440034 	movhi	r5,4096
100033a8:	29400804 	addi	r5,r5,32
100033ac:	01840034 	movhi	r6,4096
100033b0:	31808b04 	addi	r6,r6,556
100033b4:	000330c0 	call	1000330c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100033b8:	01040034 	movhi	r4,4096
100033bc:	2115c304 	addi	r4,r4,22284
100033c0:	01440034 	movhi	r5,4096
100033c4:	2955c304 	addi	r5,r5,22284
100033c8:	01840034 	movhi	r6,4096
100033cc:	3195ef04 	addi	r6,r6,22460
100033d0:	000330c0 	call	1000330c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100033d4:	00045e80 	call	100045e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
100033d8:	00047b00 	call	100047b0 <alt_icache_flush_all>
}
100033dc:	e037883a 	mov	sp,fp
100033e0:	dfc00117 	ldw	ra,4(sp)
100033e4:	df000017 	ldw	fp,0(sp)
100033e8:	dec00204 	addi	sp,sp,8
100033ec:	f800283a 	ret

100033f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100033f0:	defffe04 	addi	sp,sp,-8
100033f4:	dfc00115 	stw	ra,4(sp)
100033f8:	df000015 	stw	fp,0(sp)
100033fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003400:	00840034 	movhi	r2,4096
10003404:	109c8504 	addi	r2,r2,29204
10003408:	10800017 	ldw	r2,0(r2)
1000340c:	10000526 	beq	r2,zero,10003424 <alt_get_errno+0x34>
10003410:	00840034 	movhi	r2,4096
10003414:	109c8504 	addi	r2,r2,29204
10003418:	10800017 	ldw	r2,0(r2)
1000341c:	103ee83a 	callr	r2
10003420:	00000206 	br	1000342c <alt_get_errno+0x3c>
10003424:	00840074 	movhi	r2,4097
10003428:	10a32804 	addi	r2,r2,-29536
}
1000342c:	e037883a 	mov	sp,fp
10003430:	dfc00117 	ldw	ra,4(sp)
10003434:	df000017 	ldw	fp,0(sp)
10003438:	dec00204 	addi	sp,sp,8
1000343c:	f800283a 	ret

10003440 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10003440:	defff904 	addi	sp,sp,-28
10003444:	dfc00615 	stw	ra,24(sp)
10003448:	df000515 	stw	fp,20(sp)
1000344c:	df000504 	addi	fp,sp,20
10003450:	e13ffd15 	stw	r4,-12(fp)
10003454:	e17ffe15 	stw	r5,-8(fp)
10003458:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000345c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003460:	e0bffd17 	ldw	r2,-12(fp)
10003464:	10000816 	blt	r2,zero,10003488 <lseek+0x48>
10003468:	e13ffd17 	ldw	r4,-12(fp)
1000346c:	01400304 	movi	r5,12
10003470:	000046c0 	call	1000046c <__mulsi3>
10003474:	1007883a 	mov	r3,r2
10003478:	00840034 	movhi	r2,4096
1000347c:	10980404 	addi	r2,r2,24592
10003480:	1885883a 	add	r2,r3,r2
10003484:	00000106 	br	1000348c <lseek+0x4c>
10003488:	0005883a 	mov	r2,zero
1000348c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10003490:	e0bffc17 	ldw	r2,-16(fp)
10003494:	10001026 	beq	r2,zero,100034d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10003498:	e0bffc17 	ldw	r2,-16(fp)
1000349c:	10800017 	ldw	r2,0(r2)
100034a0:	10800717 	ldw	r2,28(r2)
100034a4:	10000926 	beq	r2,zero,100034cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100034a8:	e0bffc17 	ldw	r2,-16(fp)
100034ac:	10800017 	ldw	r2,0(r2)
100034b0:	10800717 	ldw	r2,28(r2)
100034b4:	e13ffc17 	ldw	r4,-16(fp)
100034b8:	e17ffe17 	ldw	r5,-8(fp)
100034bc:	e1bfff17 	ldw	r6,-4(fp)
100034c0:	103ee83a 	callr	r2
100034c4:	e0bffb15 	stw	r2,-20(fp)
100034c8:	00000506 	br	100034e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100034cc:	00bfde84 	movi	r2,-134
100034d0:	e0bffb15 	stw	r2,-20(fp)
100034d4:	00000206 	br	100034e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100034d8:	00bfebc4 	movi	r2,-81
100034dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100034e0:	e0bffb17 	ldw	r2,-20(fp)
100034e4:	1000070e 	bge	r2,zero,10003504 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100034e8:	00033f00 	call	100033f0 <alt_get_errno>
100034ec:	1007883a 	mov	r3,r2
100034f0:	e0bffb17 	ldw	r2,-20(fp)
100034f4:	0085c83a 	sub	r2,zero,r2
100034f8:	18800015 	stw	r2,0(r3)
    rc = -1;
100034fc:	00bfffc4 	movi	r2,-1
10003500:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10003504:	e0bffb17 	ldw	r2,-20(fp)
}
10003508:	e037883a 	mov	sp,fp
1000350c:	dfc00117 	ldw	ra,4(sp)
10003510:	df000017 	ldw	fp,0(sp)
10003514:	dec00204 	addi	sp,sp,8
10003518:	f800283a 	ret

1000351c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000351c:	defffd04 	addi	sp,sp,-12
10003520:	dfc00215 	stw	ra,8(sp)
10003524:	df000115 	stw	fp,4(sp)
10003528:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000352c:	0009883a 	mov	r4,zero
10003530:	00039e00 	call	100039e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10003534:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10003538:	0003a140 	call	10003a14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000353c:	01040034 	movhi	r4,4096
10003540:	2115e504 	addi	r4,r4,22420
10003544:	01440034 	movhi	r5,4096
10003548:	2955e504 	addi	r5,r5,22420
1000354c:	01840034 	movhi	r6,4096
10003550:	3195e504 	addi	r6,r6,22420
10003554:	0004b7c0 	call	10004b7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10003558:	00046f80 	call	100046f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000355c:	01040034 	movhi	r4,4096
10003560:	2111d504 	addi	r4,r4,18260
10003564:	00053680 	call	10005368 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10003568:	d126ad17 	ldw	r4,-25932(gp)
1000356c:	d0e6ae17 	ldw	r3,-25928(gp)
10003570:	d0a6af17 	ldw	r2,-25924(gp)
10003574:	180b883a 	mov	r5,r3
10003578:	100d883a 	mov	r6,r2
1000357c:	00003d40 	call	100003d4 <main>
10003580:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003584:	01000044 	movi	r4,1
10003588:	00030040 	call	10003004 <close>
  exit (result);
1000358c:	e13fff17 	ldw	r4,-4(fp)
10003590:	000537c0 	call	1000537c <exit>

10003594 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10003594:	defffe04 	addi	sp,sp,-8
10003598:	df000115 	stw	fp,4(sp)
1000359c:	df000104 	addi	fp,sp,4
100035a0:	e13fff15 	stw	r4,-4(fp)
}
100035a4:	e037883a 	mov	sp,fp
100035a8:	df000017 	ldw	fp,0(sp)
100035ac:	dec00104 	addi	sp,sp,4
100035b0:	f800283a 	ret

100035b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100035b4:	defffe04 	addi	sp,sp,-8
100035b8:	df000115 	stw	fp,4(sp)
100035bc:	df000104 	addi	fp,sp,4
100035c0:	e13fff15 	stw	r4,-4(fp)
}
100035c4:	e037883a 	mov	sp,fp
100035c8:	df000017 	ldw	fp,0(sp)
100035cc:	dec00104 	addi	sp,sp,4
100035d0:	f800283a 	ret

100035d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100035d4:	defffe04 	addi	sp,sp,-8
100035d8:	dfc00115 	stw	ra,4(sp)
100035dc:	df000015 	stw	fp,0(sp)
100035e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100035e4:	00840034 	movhi	r2,4096
100035e8:	109c8504 	addi	r2,r2,29204
100035ec:	10800017 	ldw	r2,0(r2)
100035f0:	10000526 	beq	r2,zero,10003608 <alt_get_errno+0x34>
100035f4:	00840034 	movhi	r2,4096
100035f8:	109c8504 	addi	r2,r2,29204
100035fc:	10800017 	ldw	r2,0(r2)
10003600:	103ee83a 	callr	r2
10003604:	00000206 	br	10003610 <alt_get_errno+0x3c>
10003608:	00840074 	movhi	r2,4097
1000360c:	10a32804 	addi	r2,r2,-29536
}
10003610:	e037883a 	mov	sp,fp
10003614:	dfc00117 	ldw	ra,4(sp)
10003618:	df000017 	ldw	fp,0(sp)
1000361c:	dec00204 	addi	sp,sp,8
10003620:	f800283a 	ret

10003624 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10003624:	defff904 	addi	sp,sp,-28
10003628:	dfc00615 	stw	ra,24(sp)
1000362c:	df000515 	stw	fp,20(sp)
10003630:	df000504 	addi	fp,sp,20
10003634:	e13ffd15 	stw	r4,-12(fp)
10003638:	e17ffe15 	stw	r5,-8(fp)
1000363c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003640:	e0bffd17 	ldw	r2,-12(fp)
10003644:	10000816 	blt	r2,zero,10003668 <read+0x44>
10003648:	e13ffd17 	ldw	r4,-12(fp)
1000364c:	01400304 	movi	r5,12
10003650:	000046c0 	call	1000046c <__mulsi3>
10003654:	1007883a 	mov	r3,r2
10003658:	00840034 	movhi	r2,4096
1000365c:	10980404 	addi	r2,r2,24592
10003660:	1885883a 	add	r2,r3,r2
10003664:	00000106 	br	1000366c <read+0x48>
10003668:	0005883a 	mov	r2,zero
1000366c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10003670:	e0bffb17 	ldw	r2,-20(fp)
10003674:	10002226 	beq	r2,zero,10003700 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003678:	e0bffb17 	ldw	r2,-20(fp)
1000367c:	10800217 	ldw	r2,8(r2)
10003680:	108000cc 	andi	r2,r2,3
10003684:	10800060 	cmpeqi	r2,r2,1
10003688:	1000181e 	bne	r2,zero,100036ec <read+0xc8>
        (fd->dev->read))
1000368c:	e0bffb17 	ldw	r2,-20(fp)
10003690:	10800017 	ldw	r2,0(r2)
10003694:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003698:	10001426 	beq	r2,zero,100036ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000369c:	e0bffb17 	ldw	r2,-20(fp)
100036a0:	10800017 	ldw	r2,0(r2)
100036a4:	10800517 	ldw	r2,20(r2)
100036a8:	e0ffff17 	ldw	r3,-4(fp)
100036ac:	e13ffb17 	ldw	r4,-20(fp)
100036b0:	e17ffe17 	ldw	r5,-8(fp)
100036b4:	180d883a 	mov	r6,r3
100036b8:	103ee83a 	callr	r2
100036bc:	e0bffc15 	stw	r2,-16(fp)
100036c0:	e0bffc17 	ldw	r2,-16(fp)
100036c4:	1000070e 	bge	r2,zero,100036e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100036c8:	00035d40 	call	100035d4 <alt_get_errno>
100036cc:	1007883a 	mov	r3,r2
100036d0:	e0bffc17 	ldw	r2,-16(fp)
100036d4:	0085c83a 	sub	r2,zero,r2
100036d8:	18800015 	stw	r2,0(r3)
          return -1;
100036dc:	00bfffc4 	movi	r2,-1
100036e0:	00000c06 	br	10003714 <read+0xf0>
        }
        return rval;
100036e4:	e0bffc17 	ldw	r2,-16(fp)
100036e8:	00000a06 	br	10003714 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100036ec:	00035d40 	call	100035d4 <alt_get_errno>
100036f0:	1007883a 	mov	r3,r2
100036f4:	00800344 	movi	r2,13
100036f8:	18800015 	stw	r2,0(r3)
100036fc:	00000406 	br	10003710 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10003700:	00035d40 	call	100035d4 <alt_get_errno>
10003704:	1007883a 	mov	r3,r2
10003708:	00801444 	movi	r2,81
1000370c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10003710:	00bfffc4 	movi	r2,-1
}
10003714:	e037883a 	mov	sp,fp
10003718:	dfc00117 	ldw	ra,4(sp)
1000371c:	df000017 	ldw	fp,0(sp)
10003720:	dec00204 	addi	sp,sp,8
10003724:	f800283a 	ret

10003728 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10003728:	defffc04 	addi	sp,sp,-16
1000372c:	dfc00315 	stw	ra,12(sp)
10003730:	df000215 	stw	fp,8(sp)
10003734:	dc000115 	stw	r16,4(sp)
10003738:	df000204 	addi	fp,sp,8
1000373c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10003740:	e0bffe17 	ldw	r2,-8(fp)
10003744:	108000d0 	cmplti	r2,r2,3
10003748:	1000111e 	bne	r2,zero,10003790 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000374c:	04040034 	movhi	r16,4096
10003750:	84180404 	addi	r16,r16,24592
10003754:	e0bffe17 	ldw	r2,-8(fp)
10003758:	1009883a 	mov	r4,r2
1000375c:	01400304 	movi	r5,12
10003760:	000046c0 	call	1000046c <__mulsi3>
10003764:	8085883a 	add	r2,r16,r2
10003768:	10800204 	addi	r2,r2,8
1000376c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003770:	04040034 	movhi	r16,4096
10003774:	84180404 	addi	r16,r16,24592
10003778:	e0bffe17 	ldw	r2,-8(fp)
1000377c:	1009883a 	mov	r4,r2
10003780:	01400304 	movi	r5,12
10003784:	000046c0 	call	1000046c <__mulsi3>
10003788:	8085883a 	add	r2,r16,r2
1000378c:	10000015 	stw	zero,0(r2)
  }
}
10003790:	e6ffff04 	addi	sp,fp,-4
10003794:	dfc00217 	ldw	ra,8(sp)
10003798:	df000117 	ldw	fp,4(sp)
1000379c:	dc000017 	ldw	r16,0(sp)
100037a0:	dec00304 	addi	sp,sp,12
100037a4:	f800283a 	ret

100037a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100037a8:	defff904 	addi	sp,sp,-28
100037ac:	df000615 	stw	fp,24(sp)
100037b0:	df000604 	addi	fp,sp,24
100037b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100037b8:	0005303a 	rdctl	r2,status
100037bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100037c0:	e0fffc17 	ldw	r3,-16(fp)
100037c4:	00bfff84 	movi	r2,-2
100037c8:	1884703a 	and	r2,r3,r2
100037cc:	1001703a 	wrctl	status,r2
  
  return context;
100037d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100037d4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100037d8:	d0a00a17 	ldw	r2,-32728(gp)
100037dc:	10c000c4 	addi	r3,r2,3
100037e0:	00bfff04 	movi	r2,-4
100037e4:	1884703a 	and	r2,r3,r2
100037e8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100037ec:	d0e00a17 	ldw	r3,-32728(gp)
100037f0:	e0bfff17 	ldw	r2,-4(fp)
100037f4:	1887883a 	add	r3,r3,r2
100037f8:	00860034 	movhi	r2,6144
100037fc:	10800004 	addi	r2,r2,0
10003800:	10c0062e 	bgeu	r2,r3,1000381c <sbrk+0x74>
10003804:	e0bffa17 	ldw	r2,-24(fp)
10003808:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000380c:	e0bffd17 	ldw	r2,-12(fp)
10003810:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10003814:	00bfffc4 	movi	r2,-1
10003818:	00000b06 	br	10003848 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000381c:	d0a00a17 	ldw	r2,-32728(gp)
10003820:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10003824:	d0e00a17 	ldw	r3,-32728(gp)
10003828:	e0bfff17 	ldw	r2,-4(fp)
1000382c:	1885883a 	add	r2,r3,r2
10003830:	d0a00a15 	stw	r2,-32728(gp)
10003834:	e0bffa17 	ldw	r2,-24(fp)
10003838:	e0bffe15 	stw	r2,-8(fp)
1000383c:	e0bffe17 	ldw	r2,-8(fp)
10003840:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10003844:	e0bffb17 	ldw	r2,-20(fp)
} 
10003848:	e037883a 	mov	sp,fp
1000384c:	df000017 	ldw	fp,0(sp)
10003850:	dec00104 	addi	sp,sp,4
10003854:	f800283a 	ret

10003858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003858:	defffe04 	addi	sp,sp,-8
1000385c:	dfc00115 	stw	ra,4(sp)
10003860:	df000015 	stw	fp,0(sp)
10003864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003868:	00840034 	movhi	r2,4096
1000386c:	109c8504 	addi	r2,r2,29204
10003870:	10800017 	ldw	r2,0(r2)
10003874:	10000526 	beq	r2,zero,1000388c <alt_get_errno+0x34>
10003878:	00840034 	movhi	r2,4096
1000387c:	109c8504 	addi	r2,r2,29204
10003880:	10800017 	ldw	r2,0(r2)
10003884:	103ee83a 	callr	r2
10003888:	00000206 	br	10003894 <alt_get_errno+0x3c>
1000388c:	00840074 	movhi	r2,4097
10003890:	10a32804 	addi	r2,r2,-29536
}
10003894:	e037883a 	mov	sp,fp
10003898:	dfc00117 	ldw	ra,4(sp)
1000389c:	df000017 	ldw	fp,0(sp)
100038a0:	dec00204 	addi	sp,sp,8
100038a4:	f800283a 	ret

100038a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100038a8:	defff904 	addi	sp,sp,-28
100038ac:	dfc00615 	stw	ra,24(sp)
100038b0:	df000515 	stw	fp,20(sp)
100038b4:	df000504 	addi	fp,sp,20
100038b8:	e13ffd15 	stw	r4,-12(fp)
100038bc:	e17ffe15 	stw	r5,-8(fp)
100038c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100038c4:	e0bffd17 	ldw	r2,-12(fp)
100038c8:	10000816 	blt	r2,zero,100038ec <write+0x44>
100038cc:	e13ffd17 	ldw	r4,-12(fp)
100038d0:	01400304 	movi	r5,12
100038d4:	000046c0 	call	1000046c <__mulsi3>
100038d8:	1007883a 	mov	r3,r2
100038dc:	00840034 	movhi	r2,4096
100038e0:	10980404 	addi	r2,r2,24592
100038e4:	1885883a 	add	r2,r3,r2
100038e8:	00000106 	br	100038f0 <write+0x48>
100038ec:	0005883a 	mov	r2,zero
100038f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100038f4:	e0bffb17 	ldw	r2,-20(fp)
100038f8:	10002126 	beq	r2,zero,10003980 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100038fc:	e0bffb17 	ldw	r2,-20(fp)
10003900:	10800217 	ldw	r2,8(r2)
10003904:	108000cc 	andi	r2,r2,3
10003908:	10001826 	beq	r2,zero,1000396c <write+0xc4>
1000390c:	e0bffb17 	ldw	r2,-20(fp)
10003910:	10800017 	ldw	r2,0(r2)
10003914:	10800617 	ldw	r2,24(r2)
10003918:	10001426 	beq	r2,zero,1000396c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000391c:	e0bffb17 	ldw	r2,-20(fp)
10003920:	10800017 	ldw	r2,0(r2)
10003924:	10800617 	ldw	r2,24(r2)
10003928:	e0ffff17 	ldw	r3,-4(fp)
1000392c:	e13ffb17 	ldw	r4,-20(fp)
10003930:	e17ffe17 	ldw	r5,-8(fp)
10003934:	180d883a 	mov	r6,r3
10003938:	103ee83a 	callr	r2
1000393c:	e0bffc15 	stw	r2,-16(fp)
10003940:	e0bffc17 	ldw	r2,-16(fp)
10003944:	1000070e 	bge	r2,zero,10003964 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10003948:	00038580 	call	10003858 <alt_get_errno>
1000394c:	1007883a 	mov	r3,r2
10003950:	e0bffc17 	ldw	r2,-16(fp)
10003954:	0085c83a 	sub	r2,zero,r2
10003958:	18800015 	stw	r2,0(r3)
        return -1;
1000395c:	00bfffc4 	movi	r2,-1
10003960:	00000c06 	br	10003994 <write+0xec>
      }
      return rval;
10003964:	e0bffc17 	ldw	r2,-16(fp)
10003968:	00000a06 	br	10003994 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000396c:	00038580 	call	10003858 <alt_get_errno>
10003970:	1007883a 	mov	r3,r2
10003974:	00800344 	movi	r2,13
10003978:	18800015 	stw	r2,0(r3)
1000397c:	00000406 	br	10003990 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10003980:	00038580 	call	10003858 <alt_get_errno>
10003984:	1007883a 	mov	r3,r2
10003988:	00801444 	movi	r2,81
1000398c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10003990:	00bfffc4 	movi	r2,-1
}
10003994:	e037883a 	mov	sp,fp
10003998:	dfc00117 	ldw	ra,4(sp)
1000399c:	df000017 	ldw	fp,0(sp)
100039a0:	dec00204 	addi	sp,sp,8
100039a4:	f800283a 	ret

100039a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100039a8:	defffd04 	addi	sp,sp,-12
100039ac:	dfc00215 	stw	ra,8(sp)
100039b0:	df000115 	stw	fp,4(sp)
100039b4:	df000104 	addi	fp,sp,4
100039b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100039bc:	e13fff17 	ldw	r4,-4(fp)
100039c0:	01440034 	movhi	r5,4096
100039c4:	295c8204 	addi	r5,r5,29192
100039c8:	00046540 	call	10004654 <alt_dev_llist_insert>
}
100039cc:	e037883a 	mov	sp,fp
100039d0:	dfc00117 	ldw	ra,4(sp)
100039d4:	df000017 	ldw	fp,0(sp)
100039d8:	dec00204 	addi	sp,sp,8
100039dc:	f800283a 	ret

100039e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100039e0:	defffd04 	addi	sp,sp,-12
100039e4:	dfc00215 	stw	ra,8(sp)
100039e8:	df000115 	stw	fp,4(sp)
100039ec:	df000104 	addi	fp,sp,4
100039f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
100039f4:	00050340 	call	10005034 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100039f8:	00800044 	movi	r2,1
100039fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10003a00:	e037883a 	mov	sp,fp
10003a04:	dfc00117 	ldw	ra,4(sp)
10003a08:	df000017 	ldw	fp,0(sp)
10003a0c:	dec00204 	addi	sp,sp,8
10003a10:	f800283a 	ret

10003a14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10003a14:	defffe04 	addi	sp,sp,-8
10003a18:	dfc00115 	stw	ra,4(sp)
10003a1c:	df000015 	stw	fp,0(sp)
10003a20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10003a24:	01040034 	movhi	r4,4096
10003a28:	21186e04 	addi	r4,r4,25016
10003a2c:	000b883a 	mov	r5,zero
10003a30:	01800144 	movi	r6,5
10003a34:	0003bc00 	call	10003bc0 <altera_avalon_jtag_uart_init>
10003a38:	01040034 	movhi	r4,4096
10003a3c:	21186404 	addi	r4,r4,24976
10003a40:	00039a80 	call	100039a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10003a44:	0001883a 	nop
}
10003a48:	e037883a 	mov	sp,fp
10003a4c:	dfc00117 	ldw	ra,4(sp)
10003a50:	df000017 	ldw	fp,0(sp)
10003a54:	dec00204 	addi	sp,sp,8
10003a58:	f800283a 	ret

10003a5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10003a5c:	defffa04 	addi	sp,sp,-24
10003a60:	dfc00515 	stw	ra,20(sp)
10003a64:	df000415 	stw	fp,16(sp)
10003a68:	df000404 	addi	fp,sp,16
10003a6c:	e13ffd15 	stw	r4,-12(fp)
10003a70:	e17ffe15 	stw	r5,-8(fp)
10003a74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003a78:	e0bffd17 	ldw	r2,-12(fp)
10003a7c:	10800017 	ldw	r2,0(r2)
10003a80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10003a84:	e0bffc17 	ldw	r2,-16(fp)
10003a88:	10c00a04 	addi	r3,r2,40
10003a8c:	e0bffd17 	ldw	r2,-12(fp)
10003a90:	10800217 	ldw	r2,8(r2)
10003a94:	1809883a 	mov	r4,r3
10003a98:	e17ffe17 	ldw	r5,-8(fp)
10003a9c:	e1bfff17 	ldw	r6,-4(fp)
10003aa0:	100f883a 	mov	r7,r2
10003aa4:	00040840 	call	10004084 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10003aa8:	e037883a 	mov	sp,fp
10003aac:	dfc00117 	ldw	ra,4(sp)
10003ab0:	df000017 	ldw	fp,0(sp)
10003ab4:	dec00204 	addi	sp,sp,8
10003ab8:	f800283a 	ret

10003abc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10003abc:	defffa04 	addi	sp,sp,-24
10003ac0:	dfc00515 	stw	ra,20(sp)
10003ac4:	df000415 	stw	fp,16(sp)
10003ac8:	df000404 	addi	fp,sp,16
10003acc:	e13ffd15 	stw	r4,-12(fp)
10003ad0:	e17ffe15 	stw	r5,-8(fp)
10003ad4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003ad8:	e0bffd17 	ldw	r2,-12(fp)
10003adc:	10800017 	ldw	r2,0(r2)
10003ae0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10003ae4:	e0bffc17 	ldw	r2,-16(fp)
10003ae8:	10c00a04 	addi	r3,r2,40
10003aec:	e0bffd17 	ldw	r2,-12(fp)
10003af0:	10800217 	ldw	r2,8(r2)
10003af4:	1809883a 	mov	r4,r3
10003af8:	e17ffe17 	ldw	r5,-8(fp)
10003afc:	e1bfff17 	ldw	r6,-4(fp)
10003b00:	100f883a 	mov	r7,r2
10003b04:	00042900 	call	10004290 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10003b08:	e037883a 	mov	sp,fp
10003b0c:	dfc00117 	ldw	ra,4(sp)
10003b10:	df000017 	ldw	fp,0(sp)
10003b14:	dec00204 	addi	sp,sp,8
10003b18:	f800283a 	ret

10003b1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10003b1c:	defffc04 	addi	sp,sp,-16
10003b20:	dfc00315 	stw	ra,12(sp)
10003b24:	df000215 	stw	fp,8(sp)
10003b28:	df000204 	addi	fp,sp,8
10003b2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003b30:	e0bfff17 	ldw	r2,-4(fp)
10003b34:	10800017 	ldw	r2,0(r2)
10003b38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10003b3c:	e0bffe17 	ldw	r2,-8(fp)
10003b40:	10c00a04 	addi	r3,r2,40
10003b44:	e0bfff17 	ldw	r2,-4(fp)
10003b48:	10800217 	ldw	r2,8(r2)
10003b4c:	1809883a 	mov	r4,r3
10003b50:	100b883a 	mov	r5,r2
10003b54:	0003f300 	call	10003f30 <altera_avalon_jtag_uart_close>
}
10003b58:	e037883a 	mov	sp,fp
10003b5c:	dfc00117 	ldw	ra,4(sp)
10003b60:	df000017 	ldw	fp,0(sp)
10003b64:	dec00204 	addi	sp,sp,8
10003b68:	f800283a 	ret

10003b6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10003b6c:	defffa04 	addi	sp,sp,-24
10003b70:	dfc00515 	stw	ra,20(sp)
10003b74:	df000415 	stw	fp,16(sp)
10003b78:	df000404 	addi	fp,sp,16
10003b7c:	e13ffd15 	stw	r4,-12(fp)
10003b80:	e17ffe15 	stw	r5,-8(fp)
10003b84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10003b88:	e0bffd17 	ldw	r2,-12(fp)
10003b8c:	10800017 	ldw	r2,0(r2)
10003b90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10003b94:	e0bffc17 	ldw	r2,-16(fp)
10003b98:	10800a04 	addi	r2,r2,40
10003b9c:	1009883a 	mov	r4,r2
10003ba0:	e17ffe17 	ldw	r5,-8(fp)
10003ba4:	e1bfff17 	ldw	r6,-4(fp)
10003ba8:	0003f980 	call	10003f98 <altera_avalon_jtag_uart_ioctl>
}
10003bac:	e037883a 	mov	sp,fp
10003bb0:	dfc00117 	ldw	ra,4(sp)
10003bb4:	df000017 	ldw	fp,0(sp)
10003bb8:	dec00204 	addi	sp,sp,8
10003bbc:	f800283a 	ret

10003bc0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10003bc0:	defffa04 	addi	sp,sp,-24
10003bc4:	dfc00515 	stw	ra,20(sp)
10003bc8:	df000415 	stw	fp,16(sp)
10003bcc:	df000404 	addi	fp,sp,16
10003bd0:	e13ffd15 	stw	r4,-12(fp)
10003bd4:	e17ffe15 	stw	r5,-8(fp)
10003bd8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003bdc:	e0bffd17 	ldw	r2,-12(fp)
10003be0:	00c00044 	movi	r3,1
10003be4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10003be8:	e0bffd17 	ldw	r2,-12(fp)
10003bec:	10800017 	ldw	r2,0(r2)
10003bf0:	10800104 	addi	r2,r2,4
10003bf4:	1007883a 	mov	r3,r2
10003bf8:	e0bffd17 	ldw	r2,-12(fp)
10003bfc:	10800817 	ldw	r2,32(r2)
10003c00:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10003c04:	e0fffe17 	ldw	r3,-8(fp)
10003c08:	e0bfff17 	ldw	r2,-4(fp)
10003c0c:	d8000015 	stw	zero,0(sp)
10003c10:	1809883a 	mov	r4,r3
10003c14:	100b883a 	mov	r5,r2
10003c18:	01840034 	movhi	r6,4096
10003c1c:	318f2104 	addi	r6,r6,15492
10003c20:	e1fffd17 	ldw	r7,-12(fp)
10003c24:	00047cc0 	call	100047cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10003c28:	e0bffd17 	ldw	r2,-12(fp)
10003c2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10003c30:	e0bffd17 	ldw	r2,-12(fp)
10003c34:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10003c38:	00840074 	movhi	r2,4097
10003c3c:	10a32d04 	addi	r2,r2,-29516
10003c40:	10800017 	ldw	r2,0(r2)
10003c44:	1809883a 	mov	r4,r3
10003c48:	100b883a 	mov	r5,r2
10003c4c:	01840034 	movhi	r6,4096
10003c50:	318fa204 	addi	r6,r6,16008
10003c54:	e1fffd17 	ldw	r7,-12(fp)
10003c58:	00044a80 	call	100044a8 <alt_alarm_start>
10003c5c:	1000040e 	bge	r2,zero,10003c70 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003c60:	e0fffd17 	ldw	r3,-12(fp)
10003c64:	00a00034 	movhi	r2,32768
10003c68:	10bfffc4 	addi	r2,r2,-1
10003c6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003c70:	e037883a 	mov	sp,fp
10003c74:	dfc00117 	ldw	ra,4(sp)
10003c78:	df000017 	ldw	fp,0(sp)
10003c7c:	dec00204 	addi	sp,sp,8
10003c80:	f800283a 	ret

10003c84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003c84:	defff804 	addi	sp,sp,-32
10003c88:	df000715 	stw	fp,28(sp)
10003c8c:	df000704 	addi	fp,sp,28
10003c90:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10003c94:	e0bfff17 	ldw	r2,-4(fp)
10003c98:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10003c9c:	e0bffb17 	ldw	r2,-20(fp)
10003ca0:	10800017 	ldw	r2,0(r2)
10003ca4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003ca8:	e0bffc17 	ldw	r2,-16(fp)
10003cac:	10800104 	addi	r2,r2,4
10003cb0:	10800037 	ldwio	r2,0(r2)
10003cb4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10003cb8:	e0bffd17 	ldw	r2,-12(fp)
10003cbc:	1080c00c 	andi	r2,r2,768
10003cc0:	1000011e 	bne	r2,zero,10003cc8 <altera_avalon_jtag_uart_irq+0x44>
      break;
10003cc4:	00006c06 	br	10003e78 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10003cc8:	e0bffd17 	ldw	r2,-12(fp)
10003ccc:	1080400c 	andi	r2,r2,256
10003cd0:	10003426 	beq	r2,zero,10003da4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10003cd4:	00800074 	movhi	r2,1
10003cd8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003cdc:	e0bffb17 	ldw	r2,-20(fp)
10003ce0:	10800a17 	ldw	r2,40(r2)
10003ce4:	10800044 	addi	r2,r2,1
10003ce8:	1081ffcc 	andi	r2,r2,2047
10003cec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10003cf0:	e0bffb17 	ldw	r2,-20(fp)
10003cf4:	10c00b17 	ldw	r3,44(r2)
10003cf8:	e0bffe17 	ldw	r2,-8(fp)
10003cfc:	1880011e 	bne	r3,r2,10003d04 <altera_avalon_jtag_uart_irq+0x80>
          break;
10003d00:	00001606 	br	10003d5c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003d04:	e0bffc17 	ldw	r2,-16(fp)
10003d08:	10800037 	ldwio	r2,0(r2)
10003d0c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003d10:	e0bff917 	ldw	r2,-28(fp)
10003d14:	10a0000c 	andi	r2,r2,32768
10003d18:	1000011e 	bne	r2,zero,10003d20 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10003d1c:	00000f06 	br	10003d5c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003d20:	e0bffb17 	ldw	r2,-20(fp)
10003d24:	10800a17 	ldw	r2,40(r2)
10003d28:	e0fff917 	ldw	r3,-28(fp)
10003d2c:	1809883a 	mov	r4,r3
10003d30:	e0fffb17 	ldw	r3,-20(fp)
10003d34:	1885883a 	add	r2,r3,r2
10003d38:	10800e04 	addi	r2,r2,56
10003d3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003d40:	e0bffb17 	ldw	r2,-20(fp)
10003d44:	10800a17 	ldw	r2,40(r2)
10003d48:	10800044 	addi	r2,r2,1
10003d4c:	10c1ffcc 	andi	r3,r2,2047
10003d50:	e0bffb17 	ldw	r2,-20(fp)
10003d54:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003d58:	003fe006 	br	10003cdc <__alt_data_end+0xf8003cdc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003d5c:	e0bff917 	ldw	r2,-28(fp)
10003d60:	10bfffec 	andhi	r2,r2,65535
10003d64:	10000f26 	beq	r2,zero,10003da4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003d68:	e0bffb17 	ldw	r2,-20(fp)
10003d6c:	10c00817 	ldw	r3,32(r2)
10003d70:	00bfff84 	movi	r2,-2
10003d74:	1886703a 	and	r3,r3,r2
10003d78:	e0bffb17 	ldw	r2,-20(fp)
10003d7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10003d80:	e0bffc17 	ldw	r2,-16(fp)
10003d84:	10800104 	addi	r2,r2,4
10003d88:	1007883a 	mov	r3,r2
10003d8c:	e0bffb17 	ldw	r2,-20(fp)
10003d90:	10800817 	ldw	r2,32(r2)
10003d94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003d98:	e0bffc17 	ldw	r2,-16(fp)
10003d9c:	10800104 	addi	r2,r2,4
10003da0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10003da4:	e0bffd17 	ldw	r2,-12(fp)
10003da8:	1080800c 	andi	r2,r2,512
10003dac:	10003126 	beq	r2,zero,10003e74 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10003db0:	e0bffd17 	ldw	r2,-12(fp)
10003db4:	1004d43a 	srli	r2,r2,16
10003db8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10003dbc:	00001406 	br	10003e10 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10003dc0:	e0bffc17 	ldw	r2,-16(fp)
10003dc4:	e0fffb17 	ldw	r3,-20(fp)
10003dc8:	18c00d17 	ldw	r3,52(r3)
10003dcc:	e13ffb17 	ldw	r4,-20(fp)
10003dd0:	20c7883a 	add	r3,r4,r3
10003dd4:	18c20e04 	addi	r3,r3,2104
10003dd8:	18c00003 	ldbu	r3,0(r3)
10003ddc:	18c03fcc 	andi	r3,r3,255
10003de0:	18c0201c 	xori	r3,r3,128
10003de4:	18ffe004 	addi	r3,r3,-128
10003de8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003dec:	e0bffb17 	ldw	r2,-20(fp)
10003df0:	10800d17 	ldw	r2,52(r2)
10003df4:	10800044 	addi	r2,r2,1
10003df8:	10c1ffcc 	andi	r3,r2,2047
10003dfc:	e0bffb17 	ldw	r2,-20(fp)
10003e00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003e04:	e0bffa17 	ldw	r2,-24(fp)
10003e08:	10bfffc4 	addi	r2,r2,-1
10003e0c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10003e10:	e0bffa17 	ldw	r2,-24(fp)
10003e14:	10000526 	beq	r2,zero,10003e2c <altera_avalon_jtag_uart_irq+0x1a8>
10003e18:	e0bffb17 	ldw	r2,-20(fp)
10003e1c:	10c00d17 	ldw	r3,52(r2)
10003e20:	e0bffb17 	ldw	r2,-20(fp)
10003e24:	10800c17 	ldw	r2,48(r2)
10003e28:	18bfe51e 	bne	r3,r2,10003dc0 <__alt_data_end+0xf8003dc0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003e2c:	e0bffa17 	ldw	r2,-24(fp)
10003e30:	10001026 	beq	r2,zero,10003e74 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003e34:	e0bffb17 	ldw	r2,-20(fp)
10003e38:	10c00817 	ldw	r3,32(r2)
10003e3c:	00bfff44 	movi	r2,-3
10003e40:	1886703a 	and	r3,r3,r2
10003e44:	e0bffb17 	ldw	r2,-20(fp)
10003e48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003e4c:	e0bffb17 	ldw	r2,-20(fp)
10003e50:	10800017 	ldw	r2,0(r2)
10003e54:	10800104 	addi	r2,r2,4
10003e58:	1007883a 	mov	r3,r2
10003e5c:	e0bffb17 	ldw	r2,-20(fp)
10003e60:	10800817 	ldw	r2,32(r2)
10003e64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003e68:	e0bffc17 	ldw	r2,-16(fp)
10003e6c:	10800104 	addi	r2,r2,4
10003e70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003e74:	003f8c06 	br	10003ca8 <__alt_data_end+0xf8003ca8>
}
10003e78:	e037883a 	mov	sp,fp
10003e7c:	df000017 	ldw	fp,0(sp)
10003e80:	dec00104 	addi	sp,sp,4
10003e84:	f800283a 	ret

10003e88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10003e88:	defff804 	addi	sp,sp,-32
10003e8c:	df000715 	stw	fp,28(sp)
10003e90:	df000704 	addi	fp,sp,28
10003e94:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10003e98:	e0bffb17 	ldw	r2,-20(fp)
10003e9c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10003ea0:	e0bff917 	ldw	r2,-28(fp)
10003ea4:	10800017 	ldw	r2,0(r2)
10003ea8:	10800104 	addi	r2,r2,4
10003eac:	10800037 	ldwio	r2,0(r2)
10003eb0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10003eb4:	e0bffa17 	ldw	r2,-24(fp)
10003eb8:	1081000c 	andi	r2,r2,1024
10003ebc:	10000b26 	beq	r2,zero,10003eec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10003ec0:	e0bff917 	ldw	r2,-28(fp)
10003ec4:	10800017 	ldw	r2,0(r2)
10003ec8:	10800104 	addi	r2,r2,4
10003ecc:	1007883a 	mov	r3,r2
10003ed0:	e0bff917 	ldw	r2,-28(fp)
10003ed4:	10800817 	ldw	r2,32(r2)
10003ed8:	10810014 	ori	r2,r2,1024
10003edc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10003ee0:	e0bff917 	ldw	r2,-28(fp)
10003ee4:	10000915 	stw	zero,36(r2)
10003ee8:	00000a06 	br	10003f14 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003eec:	e0bff917 	ldw	r2,-28(fp)
10003ef0:	10c00917 	ldw	r3,36(r2)
10003ef4:	00a00034 	movhi	r2,32768
10003ef8:	10bfff04 	addi	r2,r2,-4
10003efc:	10c00536 	bltu	r2,r3,10003f14 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10003f00:	e0bff917 	ldw	r2,-28(fp)
10003f04:	10800917 	ldw	r2,36(r2)
10003f08:	10c00044 	addi	r3,r2,1
10003f0c:	e0bff917 	ldw	r2,-28(fp)
10003f10:	10c00915 	stw	r3,36(r2)
10003f14:	00840074 	movhi	r2,4097
10003f18:	10a32d04 	addi	r2,r2,-29516
10003f1c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10003f20:	e037883a 	mov	sp,fp
10003f24:	df000017 	ldw	fp,0(sp)
10003f28:	dec00104 	addi	sp,sp,4
10003f2c:	f800283a 	ret

10003f30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10003f30:	defffd04 	addi	sp,sp,-12
10003f34:	df000215 	stw	fp,8(sp)
10003f38:	df000204 	addi	fp,sp,8
10003f3c:	e13ffe15 	stw	r4,-8(fp)
10003f40:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003f44:	00000506 	br	10003f5c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003f48:	e0bfff17 	ldw	r2,-4(fp)
10003f4c:	1090000c 	andi	r2,r2,16384
10003f50:	10000226 	beq	r2,zero,10003f5c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003f54:	00bffd44 	movi	r2,-11
10003f58:	00000b06 	br	10003f88 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003f5c:	e0bffe17 	ldw	r2,-8(fp)
10003f60:	10c00d17 	ldw	r3,52(r2)
10003f64:	e0bffe17 	ldw	r2,-8(fp)
10003f68:	10800c17 	ldw	r2,48(r2)
10003f6c:	18800526 	beq	r3,r2,10003f84 <altera_avalon_jtag_uart_close+0x54>
10003f70:	e0bffe17 	ldw	r2,-8(fp)
10003f74:	10c00917 	ldw	r3,36(r2)
10003f78:	e0bffe17 	ldw	r2,-8(fp)
10003f7c:	10800117 	ldw	r2,4(r2)
10003f80:	18bff136 	bltu	r3,r2,10003f48 <__alt_data_end+0xf8003f48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10003f84:	0005883a 	mov	r2,zero
}
10003f88:	e037883a 	mov	sp,fp
10003f8c:	df000017 	ldw	fp,0(sp)
10003f90:	dec00104 	addi	sp,sp,4
10003f94:	f800283a 	ret

10003f98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10003f98:	defffa04 	addi	sp,sp,-24
10003f9c:	df000515 	stw	fp,20(sp)
10003fa0:	df000504 	addi	fp,sp,20
10003fa4:	e13ffd15 	stw	r4,-12(fp)
10003fa8:	e17ffe15 	stw	r5,-8(fp)
10003fac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10003fb0:	00bff9c4 	movi	r2,-25
10003fb4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10003fb8:	e0bffe17 	ldw	r2,-8(fp)
10003fbc:	10da8060 	cmpeqi	r3,r2,27137
10003fc0:	1800031e 	bne	r3,zero,10003fd0 <altera_avalon_jtag_uart_ioctl+0x38>
10003fc4:	109a80a0 	cmpeqi	r2,r2,27138
10003fc8:	1000191e 	bne	r2,zero,10004030 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10003fcc:	00002806 	br	10004070 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10003fd0:	e0bffd17 	ldw	r2,-12(fp)
10003fd4:	10c00117 	ldw	r3,4(r2)
10003fd8:	00a00034 	movhi	r2,32768
10003fdc:	10bfffc4 	addi	r2,r2,-1
10003fe0:	18801226 	beq	r3,r2,1000402c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10003fe4:	e0bfff17 	ldw	r2,-4(fp)
10003fe8:	10800017 	ldw	r2,0(r2)
10003fec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10003ff0:	e0bffc17 	ldw	r2,-16(fp)
10003ff4:	10800090 	cmplti	r2,r2,2
10003ff8:	1000061e 	bne	r2,zero,10004014 <altera_avalon_jtag_uart_ioctl+0x7c>
10003ffc:	e0fffc17 	ldw	r3,-16(fp)
10004000:	00a00034 	movhi	r2,32768
10004004:	10bfffc4 	addi	r2,r2,-1
10004008:	18800226 	beq	r3,r2,10004014 <altera_avalon_jtag_uart_ioctl+0x7c>
1000400c:	e0bffc17 	ldw	r2,-16(fp)
10004010:	00000206 	br	1000401c <altera_avalon_jtag_uart_ioctl+0x84>
10004014:	00a00034 	movhi	r2,32768
10004018:	10bfff84 	addi	r2,r2,-2
1000401c:	e0fffd17 	ldw	r3,-12(fp)
10004020:	18800115 	stw	r2,4(r3)
      rc = 0;
10004024:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10004028:	00001106 	br	10004070 <altera_avalon_jtag_uart_ioctl+0xd8>
1000402c:	00001006 	br	10004070 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10004030:	e0bffd17 	ldw	r2,-12(fp)
10004034:	10c00117 	ldw	r3,4(r2)
10004038:	00a00034 	movhi	r2,32768
1000403c:	10bfffc4 	addi	r2,r2,-1
10004040:	18800a26 	beq	r3,r2,1000406c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10004044:	e0bffd17 	ldw	r2,-12(fp)
10004048:	10c00917 	ldw	r3,36(r2)
1000404c:	e0bffd17 	ldw	r2,-12(fp)
10004050:	10800117 	ldw	r2,4(r2)
10004054:	1885803a 	cmpltu	r2,r3,r2
10004058:	10c03fcc 	andi	r3,r2,255
1000405c:	e0bfff17 	ldw	r2,-4(fp)
10004060:	10c00015 	stw	r3,0(r2)
      rc = 0;
10004064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10004068:	00000006 	br	1000406c <altera_avalon_jtag_uart_ioctl+0xd4>
1000406c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10004070:	e0bffb17 	ldw	r2,-20(fp)
}
10004074:	e037883a 	mov	sp,fp
10004078:	df000017 	ldw	fp,0(sp)
1000407c:	dec00104 	addi	sp,sp,4
10004080:	f800283a 	ret

10004084 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10004084:	defff304 	addi	sp,sp,-52
10004088:	dfc00c15 	stw	ra,48(sp)
1000408c:	df000b15 	stw	fp,44(sp)
10004090:	df000b04 	addi	fp,sp,44
10004094:	e13ffc15 	stw	r4,-16(fp)
10004098:	e17ffd15 	stw	r5,-12(fp)
1000409c:	e1bffe15 	stw	r6,-8(fp)
100040a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100040a4:	e0bffd17 	ldw	r2,-12(fp)
100040a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100040ac:	00004906 	br	100041d4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100040b0:	e0bffc17 	ldw	r2,-16(fp)
100040b4:	10800a17 	ldw	r2,40(r2)
100040b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100040bc:	e0bffc17 	ldw	r2,-16(fp)
100040c0:	10800b17 	ldw	r2,44(r2)
100040c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100040c8:	e0fff717 	ldw	r3,-36(fp)
100040cc:	e0bff817 	ldw	r2,-32(fp)
100040d0:	18800536 	bltu	r3,r2,100040e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100040d4:	e0fff717 	ldw	r3,-36(fp)
100040d8:	e0bff817 	ldw	r2,-32(fp)
100040dc:	1885c83a 	sub	r2,r3,r2
100040e0:	e0bff615 	stw	r2,-40(fp)
100040e4:	00000406 	br	100040f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100040e8:	00c20004 	movi	r3,2048
100040ec:	e0bff817 	ldw	r2,-32(fp)
100040f0:	1885c83a 	sub	r2,r3,r2
100040f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100040f8:	e0bff617 	ldw	r2,-40(fp)
100040fc:	1000011e 	bne	r2,zero,10004104 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10004100:	00001d06 	br	10004178 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10004104:	e0fffe17 	ldw	r3,-8(fp)
10004108:	e0bff617 	ldw	r2,-40(fp)
1000410c:	1880022e 	bgeu	r3,r2,10004118 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10004110:	e0bffe17 	ldw	r2,-8(fp)
10004114:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10004118:	e0bff817 	ldw	r2,-32(fp)
1000411c:	10800e04 	addi	r2,r2,56
10004120:	e0fffc17 	ldw	r3,-16(fp)
10004124:	1885883a 	add	r2,r3,r2
10004128:	e13ff517 	ldw	r4,-44(fp)
1000412c:	100b883a 	mov	r5,r2
10004130:	e1bff617 	ldw	r6,-40(fp)
10004134:	000132c0 	call	1000132c <memcpy>
      ptr   += n;
10004138:	e0fff517 	ldw	r3,-44(fp)
1000413c:	e0bff617 	ldw	r2,-40(fp)
10004140:	1885883a 	add	r2,r3,r2
10004144:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10004148:	e0fffe17 	ldw	r3,-8(fp)
1000414c:	e0bff617 	ldw	r2,-40(fp)
10004150:	1885c83a 	sub	r2,r3,r2
10004154:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004158:	e0fff817 	ldw	r3,-32(fp)
1000415c:	e0bff617 	ldw	r2,-40(fp)
10004160:	1885883a 	add	r2,r3,r2
10004164:	10c1ffcc 	andi	r3,r2,2047
10004168:	e0bffc17 	ldw	r2,-16(fp)
1000416c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10004170:	e0bffe17 	ldw	r2,-8(fp)
10004174:	00bfce16 	blt	zero,r2,100040b0 <__alt_data_end+0xf80040b0>

    /* If we read any data then return it */
    if (ptr != buffer)
10004178:	e0fff517 	ldw	r3,-44(fp)
1000417c:	e0bffd17 	ldw	r2,-12(fp)
10004180:	18800126 	beq	r3,r2,10004188 <altera_avalon_jtag_uart_read+0x104>
      break;
10004184:	00001506 	br	100041dc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10004188:	e0bfff17 	ldw	r2,-4(fp)
1000418c:	1090000c 	andi	r2,r2,16384
10004190:	10000126 	beq	r2,zero,10004198 <altera_avalon_jtag_uart_read+0x114>
      break;
10004194:	00001106 	br	100041dc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10004198:	0001883a 	nop
1000419c:	e0bffc17 	ldw	r2,-16(fp)
100041a0:	10c00a17 	ldw	r3,40(r2)
100041a4:	e0bff717 	ldw	r2,-36(fp)
100041a8:	1880051e 	bne	r3,r2,100041c0 <altera_avalon_jtag_uart_read+0x13c>
100041ac:	e0bffc17 	ldw	r2,-16(fp)
100041b0:	10c00917 	ldw	r3,36(r2)
100041b4:	e0bffc17 	ldw	r2,-16(fp)
100041b8:	10800117 	ldw	r2,4(r2)
100041bc:	18bff736 	bltu	r3,r2,1000419c <__alt_data_end+0xf800419c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100041c0:	e0bffc17 	ldw	r2,-16(fp)
100041c4:	10c00a17 	ldw	r3,40(r2)
100041c8:	e0bff717 	ldw	r2,-36(fp)
100041cc:	1880011e 	bne	r3,r2,100041d4 <altera_avalon_jtag_uart_read+0x150>
      break;
100041d0:	00000206 	br	100041dc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100041d4:	e0bffe17 	ldw	r2,-8(fp)
100041d8:	00bfb516 	blt	zero,r2,100040b0 <__alt_data_end+0xf80040b0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100041dc:	e0fff517 	ldw	r3,-44(fp)
100041e0:	e0bffd17 	ldw	r2,-12(fp)
100041e4:	18801826 	beq	r3,r2,10004248 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100041e8:	0005303a 	rdctl	r2,status
100041ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100041f0:	e0fffa17 	ldw	r3,-24(fp)
100041f4:	00bfff84 	movi	r2,-2
100041f8:	1884703a 	and	r2,r3,r2
100041fc:	1001703a 	wrctl	status,r2
  
  return context;
10004200:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10004204:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004208:	e0bffc17 	ldw	r2,-16(fp)
1000420c:	10800817 	ldw	r2,32(r2)
10004210:	10c00054 	ori	r3,r2,1
10004214:	e0bffc17 	ldw	r2,-16(fp)
10004218:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000421c:	e0bffc17 	ldw	r2,-16(fp)
10004220:	10800017 	ldw	r2,0(r2)
10004224:	10800104 	addi	r2,r2,4
10004228:	1007883a 	mov	r3,r2
1000422c:	e0bffc17 	ldw	r2,-16(fp)
10004230:	10800817 	ldw	r2,32(r2)
10004234:	18800035 	stwio	r2,0(r3)
10004238:	e0bff917 	ldw	r2,-28(fp)
1000423c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004240:	e0bffb17 	ldw	r2,-20(fp)
10004244:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10004248:	e0fff517 	ldw	r3,-44(fp)
1000424c:	e0bffd17 	ldw	r2,-12(fp)
10004250:	18800426 	beq	r3,r2,10004264 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10004254:	e0fff517 	ldw	r3,-44(fp)
10004258:	e0bffd17 	ldw	r2,-12(fp)
1000425c:	1885c83a 	sub	r2,r3,r2
10004260:	00000606 	br	1000427c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10004264:	e0bfff17 	ldw	r2,-4(fp)
10004268:	1090000c 	andi	r2,r2,16384
1000426c:	10000226 	beq	r2,zero,10004278 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10004270:	00bffd44 	movi	r2,-11
10004274:	00000106 	br	1000427c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10004278:	00bffec4 	movi	r2,-5
}
1000427c:	e037883a 	mov	sp,fp
10004280:	dfc00117 	ldw	ra,4(sp)
10004284:	df000017 	ldw	fp,0(sp)
10004288:	dec00204 	addi	sp,sp,8
1000428c:	f800283a 	ret

10004290 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10004290:	defff304 	addi	sp,sp,-52
10004294:	dfc00c15 	stw	ra,48(sp)
10004298:	df000b15 	stw	fp,44(sp)
1000429c:	df000b04 	addi	fp,sp,44
100042a0:	e13ffc15 	stw	r4,-16(fp)
100042a4:	e17ffd15 	stw	r5,-12(fp)
100042a8:	e1bffe15 	stw	r6,-8(fp)
100042ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100042b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100042b4:	e0bffd17 	ldw	r2,-12(fp)
100042b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100042bc:	00003806 	br	100043a0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100042c0:	e0bffc17 	ldw	r2,-16(fp)
100042c4:	10800c17 	ldw	r2,48(r2)
100042c8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100042cc:	e0bffc17 	ldw	r2,-16(fp)
100042d0:	10800d17 	ldw	r2,52(r2)
100042d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100042d8:	e0fff817 	ldw	r3,-32(fp)
100042dc:	e0bff517 	ldw	r2,-44(fp)
100042e0:	1880062e 	bgeu	r3,r2,100042fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100042e4:	e0fff517 	ldw	r3,-44(fp)
100042e8:	e0bff817 	ldw	r2,-32(fp)
100042ec:	1885c83a 	sub	r2,r3,r2
100042f0:	10bfffc4 	addi	r2,r2,-1
100042f4:	e0bff615 	stw	r2,-40(fp)
100042f8:	00000b06 	br	10004328 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100042fc:	e0bff517 	ldw	r2,-44(fp)
10004300:	10000526 	beq	r2,zero,10004318 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10004304:	00c20004 	movi	r3,2048
10004308:	e0bff817 	ldw	r2,-32(fp)
1000430c:	1885c83a 	sub	r2,r3,r2
10004310:	e0bff615 	stw	r2,-40(fp)
10004314:	00000406 	br	10004328 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10004318:	00c1ffc4 	movi	r3,2047
1000431c:	e0bff817 	ldw	r2,-32(fp)
10004320:	1885c83a 	sub	r2,r3,r2
10004324:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004328:	e0bff617 	ldw	r2,-40(fp)
1000432c:	1000011e 	bne	r2,zero,10004334 <altera_avalon_jtag_uart_write+0xa4>
        break;
10004330:	00001d06 	br	100043a8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10004334:	e0fffe17 	ldw	r3,-8(fp)
10004338:	e0bff617 	ldw	r2,-40(fp)
1000433c:	1880022e 	bgeu	r3,r2,10004348 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10004340:	e0bffe17 	ldw	r2,-8(fp)
10004344:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10004348:	e0bff817 	ldw	r2,-32(fp)
1000434c:	10820e04 	addi	r2,r2,2104
10004350:	e0fffc17 	ldw	r3,-16(fp)
10004354:	1885883a 	add	r2,r3,r2
10004358:	1009883a 	mov	r4,r2
1000435c:	e17ffd17 	ldw	r5,-12(fp)
10004360:	e1bff617 	ldw	r6,-40(fp)
10004364:	000132c0 	call	1000132c <memcpy>
      ptr   += n;
10004368:	e0fffd17 	ldw	r3,-12(fp)
1000436c:	e0bff617 	ldw	r2,-40(fp)
10004370:	1885883a 	add	r2,r3,r2
10004374:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004378:	e0fffe17 	ldw	r3,-8(fp)
1000437c:	e0bff617 	ldw	r2,-40(fp)
10004380:	1885c83a 	sub	r2,r3,r2
10004384:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004388:	e0fff817 	ldw	r3,-32(fp)
1000438c:	e0bff617 	ldw	r2,-40(fp)
10004390:	1885883a 	add	r2,r3,r2
10004394:	10c1ffcc 	andi	r3,r2,2047
10004398:	e0bffc17 	ldw	r2,-16(fp)
1000439c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100043a0:	e0bffe17 	ldw	r2,-8(fp)
100043a4:	00bfc616 	blt	zero,r2,100042c0 <__alt_data_end+0xf80042c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100043a8:	0005303a 	rdctl	r2,status
100043ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100043b0:	e0fffa17 	ldw	r3,-24(fp)
100043b4:	00bfff84 	movi	r2,-2
100043b8:	1884703a 	and	r2,r3,r2
100043bc:	1001703a 	wrctl	status,r2
  
  return context;
100043c0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100043c4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100043c8:	e0bffc17 	ldw	r2,-16(fp)
100043cc:	10800817 	ldw	r2,32(r2)
100043d0:	10c00094 	ori	r3,r2,2
100043d4:	e0bffc17 	ldw	r2,-16(fp)
100043d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100043dc:	e0bffc17 	ldw	r2,-16(fp)
100043e0:	10800017 	ldw	r2,0(r2)
100043e4:	10800104 	addi	r2,r2,4
100043e8:	1007883a 	mov	r3,r2
100043ec:	e0bffc17 	ldw	r2,-16(fp)
100043f0:	10800817 	ldw	r2,32(r2)
100043f4:	18800035 	stwio	r2,0(r3)
100043f8:	e0bff917 	ldw	r2,-28(fp)
100043fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004400:	e0bffb17 	ldw	r2,-20(fp)
10004404:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10004408:	e0bffe17 	ldw	r2,-8(fp)
1000440c:	0080120e 	bge	zero,r2,10004458 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10004410:	e0bfff17 	ldw	r2,-4(fp)
10004414:	1090000c 	andi	r2,r2,16384
10004418:	10000126 	beq	r2,zero,10004420 <altera_avalon_jtag_uart_write+0x190>
        break;
1000441c:	00001006 	br	10004460 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10004420:	0001883a 	nop
10004424:	e0bffc17 	ldw	r2,-16(fp)
10004428:	10c00d17 	ldw	r3,52(r2)
1000442c:	e0bff517 	ldw	r2,-44(fp)
10004430:	1880051e 	bne	r3,r2,10004448 <altera_avalon_jtag_uart_write+0x1b8>
10004434:	e0bffc17 	ldw	r2,-16(fp)
10004438:	10c00917 	ldw	r3,36(r2)
1000443c:	e0bffc17 	ldw	r2,-16(fp)
10004440:	10800117 	ldw	r2,4(r2)
10004444:	18bff736 	bltu	r3,r2,10004424 <__alt_data_end+0xf8004424>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10004448:	e0bffc17 	ldw	r2,-16(fp)
1000444c:	10800917 	ldw	r2,36(r2)
10004450:	10000126 	beq	r2,zero,10004458 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10004454:	00000206 	br	10004460 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10004458:	e0bffe17 	ldw	r2,-8(fp)
1000445c:	00bf9716 	blt	zero,r2,100042bc <__alt_data_end+0xf80042bc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004460:	e0fffd17 	ldw	r3,-12(fp)
10004464:	e0bff717 	ldw	r2,-36(fp)
10004468:	18800426 	beq	r3,r2,1000447c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000446c:	e0fffd17 	ldw	r3,-12(fp)
10004470:	e0bff717 	ldw	r2,-36(fp)
10004474:	1885c83a 	sub	r2,r3,r2
10004478:	00000606 	br	10004494 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000447c:	e0bfff17 	ldw	r2,-4(fp)
10004480:	1090000c 	andi	r2,r2,16384
10004484:	10000226 	beq	r2,zero,10004490 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10004488:	00bffd44 	movi	r2,-11
1000448c:	00000106 	br	10004494 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004490:	00bffec4 	movi	r2,-5
}
10004494:	e037883a 	mov	sp,fp
10004498:	dfc00117 	ldw	ra,4(sp)
1000449c:	df000017 	ldw	fp,0(sp)
100044a0:	dec00204 	addi	sp,sp,8
100044a4:	f800283a 	ret

100044a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100044a8:	defff504 	addi	sp,sp,-44
100044ac:	df000a15 	stw	fp,40(sp)
100044b0:	df000a04 	addi	fp,sp,40
100044b4:	e13ffc15 	stw	r4,-16(fp)
100044b8:	e17ffd15 	stw	r5,-12(fp)
100044bc:	e1bffe15 	stw	r6,-8(fp)
100044c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100044c4:	e03ff615 	stw	zero,-40(fp)
100044c8:	00840074 	movhi	r2,4097
100044cc:	10a32d04 	addi	r2,r2,-29516
100044d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100044d4:	10003f26 	beq	r2,zero,100045d4 <alt_alarm_start+0x12c>
  {
    if (alarm)
100044d8:	e0bffc17 	ldw	r2,-16(fp)
100044dc:	10003b26 	beq	r2,zero,100045cc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100044e0:	e0bffc17 	ldw	r2,-16(fp)
100044e4:	e0fffe17 	ldw	r3,-8(fp)
100044e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100044ec:	e0bffc17 	ldw	r2,-16(fp)
100044f0:	e0ffff17 	ldw	r3,-4(fp)
100044f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100044f8:	0005303a 	rdctl	r2,status
100044fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004500:	e0fff817 	ldw	r3,-32(fp)
10004504:	00bfff84 	movi	r2,-2
10004508:	1884703a 	and	r2,r3,r2
1000450c:	1001703a 	wrctl	status,r2
  
  return context;
10004510:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10004514:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10004518:	00840074 	movhi	r2,4097
1000451c:	10a32e04 	addi	r2,r2,-29512
10004520:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10004524:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10004528:	e0fffd17 	ldw	r3,-12(fp)
1000452c:	e0bff617 	ldw	r2,-40(fp)
10004530:	1885883a 	add	r2,r3,r2
10004534:	10c00044 	addi	r3,r2,1
10004538:	e0bffc17 	ldw	r2,-16(fp)
1000453c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10004540:	e0bffc17 	ldw	r2,-16(fp)
10004544:	10c00217 	ldw	r3,8(r2)
10004548:	e0bff617 	ldw	r2,-40(fp)
1000454c:	1880042e 	bgeu	r3,r2,10004560 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10004550:	e0bffc17 	ldw	r2,-16(fp)
10004554:	00c00044 	movi	r3,1
10004558:	10c00405 	stb	r3,16(r2)
1000455c:	00000206 	br	10004568 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10004560:	e0bffc17 	ldw	r2,-16(fp)
10004564:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10004568:	e0fffc17 	ldw	r3,-16(fp)
1000456c:	00840034 	movhi	r2,4096
10004570:	109c8804 	addi	r2,r2,29216
10004574:	e0bff915 	stw	r2,-28(fp)
10004578:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000457c:	e0bffa17 	ldw	r2,-24(fp)
10004580:	e0fff917 	ldw	r3,-28(fp)
10004584:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004588:	e0bff917 	ldw	r2,-28(fp)
1000458c:	10c00017 	ldw	r3,0(r2)
10004590:	e0bffa17 	ldw	r2,-24(fp)
10004594:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004598:	e0bff917 	ldw	r2,-28(fp)
1000459c:	10800017 	ldw	r2,0(r2)
100045a0:	e0fffa17 	ldw	r3,-24(fp)
100045a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100045a8:	e0bff917 	ldw	r2,-28(fp)
100045ac:	e0fffa17 	ldw	r3,-24(fp)
100045b0:	10c00015 	stw	r3,0(r2)
100045b4:	e0bff717 	ldw	r2,-36(fp)
100045b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100045bc:	e0bffb17 	ldw	r2,-20(fp)
100045c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100045c4:	0005883a 	mov	r2,zero
100045c8:	00000306 	br	100045d8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100045cc:	00bffa84 	movi	r2,-22
100045d0:	00000106 	br	100045d8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100045d4:	00bfde84 	movi	r2,-134
  }
}
100045d8:	e037883a 	mov	sp,fp
100045dc:	df000017 	ldw	fp,0(sp)
100045e0:	dec00104 	addi	sp,sp,4
100045e4:	f800283a 	ret

100045e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100045e8:	deffff04 	addi	sp,sp,-4
100045ec:	df000015 	stw	fp,0(sp)
100045f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100045f4:	e037883a 	mov	sp,fp
100045f8:	df000017 	ldw	fp,0(sp)
100045fc:	dec00104 	addi	sp,sp,4
10004600:	f800283a 	ret

10004604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004604:	defffe04 	addi	sp,sp,-8
10004608:	dfc00115 	stw	ra,4(sp)
1000460c:	df000015 	stw	fp,0(sp)
10004610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004614:	00840034 	movhi	r2,4096
10004618:	109c8504 	addi	r2,r2,29204
1000461c:	10800017 	ldw	r2,0(r2)
10004620:	10000526 	beq	r2,zero,10004638 <alt_get_errno+0x34>
10004624:	00840034 	movhi	r2,4096
10004628:	109c8504 	addi	r2,r2,29204
1000462c:	10800017 	ldw	r2,0(r2)
10004630:	103ee83a 	callr	r2
10004634:	00000206 	br	10004640 <alt_get_errno+0x3c>
10004638:	00840074 	movhi	r2,4097
1000463c:	10a32804 	addi	r2,r2,-29536
}
10004640:	e037883a 	mov	sp,fp
10004644:	dfc00117 	ldw	ra,4(sp)
10004648:	df000017 	ldw	fp,0(sp)
1000464c:	dec00204 	addi	sp,sp,8
10004650:	f800283a 	ret

10004654 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10004654:	defffa04 	addi	sp,sp,-24
10004658:	dfc00515 	stw	ra,20(sp)
1000465c:	df000415 	stw	fp,16(sp)
10004660:	df000404 	addi	fp,sp,16
10004664:	e13ffe15 	stw	r4,-8(fp)
10004668:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000466c:	e0bffe17 	ldw	r2,-8(fp)
10004670:	10000326 	beq	r2,zero,10004680 <alt_dev_llist_insert+0x2c>
10004674:	e0bffe17 	ldw	r2,-8(fp)
10004678:	10800217 	ldw	r2,8(r2)
1000467c:	1000061e 	bne	r2,zero,10004698 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10004680:	00046040 	call	10004604 <alt_get_errno>
10004684:	1007883a 	mov	r3,r2
10004688:	00800584 	movi	r2,22
1000468c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10004690:	00bffa84 	movi	r2,-22
10004694:	00001306 	br	100046e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10004698:	e0bffe17 	ldw	r2,-8(fp)
1000469c:	e0ffff17 	ldw	r3,-4(fp)
100046a0:	e0fffc15 	stw	r3,-16(fp)
100046a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100046a8:	e0bffd17 	ldw	r2,-12(fp)
100046ac:	e0fffc17 	ldw	r3,-16(fp)
100046b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100046b4:	e0bffc17 	ldw	r2,-16(fp)
100046b8:	10c00017 	ldw	r3,0(r2)
100046bc:	e0bffd17 	ldw	r2,-12(fp)
100046c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100046c4:	e0bffc17 	ldw	r2,-16(fp)
100046c8:	10800017 	ldw	r2,0(r2)
100046cc:	e0fffd17 	ldw	r3,-12(fp)
100046d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100046d4:	e0bffc17 	ldw	r2,-16(fp)
100046d8:	e0fffd17 	ldw	r3,-12(fp)
100046dc:	10c00015 	stw	r3,0(r2)

  return 0;  
100046e0:	0005883a 	mov	r2,zero
}
100046e4:	e037883a 	mov	sp,fp
100046e8:	dfc00117 	ldw	ra,4(sp)
100046ec:	df000017 	ldw	fp,0(sp)
100046f0:	dec00204 	addi	sp,sp,8
100046f4:	f800283a 	ret

100046f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100046f8:	defffd04 	addi	sp,sp,-12
100046fc:	dfc00215 	stw	ra,8(sp)
10004700:	df000115 	stw	fp,4(sp)
10004704:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004708:	00840034 	movhi	r2,4096
1000470c:	1095c204 	addi	r2,r2,22280
10004710:	e0bfff15 	stw	r2,-4(fp)
10004714:	00000606 	br	10004730 <_do_ctors+0x38>
        (*ctor) (); 
10004718:	e0bfff17 	ldw	r2,-4(fp)
1000471c:	10800017 	ldw	r2,0(r2)
10004720:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004724:	e0bfff17 	ldw	r2,-4(fp)
10004728:	10bfff04 	addi	r2,r2,-4
1000472c:	e0bfff15 	stw	r2,-4(fp)
10004730:	e0ffff17 	ldw	r3,-4(fp)
10004734:	00840034 	movhi	r2,4096
10004738:	1095c304 	addi	r2,r2,22284
1000473c:	18bff62e 	bgeu	r3,r2,10004718 <__alt_data_end+0xf8004718>
        (*ctor) (); 
}
10004740:	e037883a 	mov	sp,fp
10004744:	dfc00117 	ldw	ra,4(sp)
10004748:	df000017 	ldw	fp,0(sp)
1000474c:	dec00204 	addi	sp,sp,8
10004750:	f800283a 	ret

10004754 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10004754:	defffd04 	addi	sp,sp,-12
10004758:	dfc00215 	stw	ra,8(sp)
1000475c:	df000115 	stw	fp,4(sp)
10004760:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004764:	00840034 	movhi	r2,4096
10004768:	1095c204 	addi	r2,r2,22280
1000476c:	e0bfff15 	stw	r2,-4(fp)
10004770:	00000606 	br	1000478c <_do_dtors+0x38>
        (*dtor) (); 
10004774:	e0bfff17 	ldw	r2,-4(fp)
10004778:	10800017 	ldw	r2,0(r2)
1000477c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004780:	e0bfff17 	ldw	r2,-4(fp)
10004784:	10bfff04 	addi	r2,r2,-4
10004788:	e0bfff15 	stw	r2,-4(fp)
1000478c:	e0ffff17 	ldw	r3,-4(fp)
10004790:	00840034 	movhi	r2,4096
10004794:	1095c304 	addi	r2,r2,22284
10004798:	18bff62e 	bgeu	r3,r2,10004774 <__alt_data_end+0xf8004774>
        (*dtor) (); 
}
1000479c:	e037883a 	mov	sp,fp
100047a0:	dfc00117 	ldw	ra,4(sp)
100047a4:	df000017 	ldw	fp,0(sp)
100047a8:	dec00204 	addi	sp,sp,8
100047ac:	f800283a 	ret

100047b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100047b0:	deffff04 	addi	sp,sp,-4
100047b4:	df000015 	stw	fp,0(sp)
100047b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100047bc:	e037883a 	mov	sp,fp
100047c0:	df000017 	ldw	fp,0(sp)
100047c4:	dec00104 	addi	sp,sp,4
100047c8:	f800283a 	ret

100047cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100047cc:	defff904 	addi	sp,sp,-28
100047d0:	dfc00615 	stw	ra,24(sp)
100047d4:	df000515 	stw	fp,20(sp)
100047d8:	df000504 	addi	fp,sp,20
100047dc:	e13ffc15 	stw	r4,-16(fp)
100047e0:	e17ffd15 	stw	r5,-12(fp)
100047e4:	e1bffe15 	stw	r6,-8(fp)
100047e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100047ec:	e0800217 	ldw	r2,8(fp)
100047f0:	d8800015 	stw	r2,0(sp)
100047f4:	e13ffc17 	ldw	r4,-16(fp)
100047f8:	e17ffd17 	ldw	r5,-12(fp)
100047fc:	e1bffe17 	ldw	r6,-8(fp)
10004800:	e1ffff17 	ldw	r7,-4(fp)
10004804:	00049ac0 	call	100049ac <alt_iic_isr_register>
}  
10004808:	e037883a 	mov	sp,fp
1000480c:	dfc00117 	ldw	ra,4(sp)
10004810:	df000017 	ldw	fp,0(sp)
10004814:	dec00204 	addi	sp,sp,8
10004818:	f800283a 	ret

1000481c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000481c:	defff904 	addi	sp,sp,-28
10004820:	df000615 	stw	fp,24(sp)
10004824:	df000604 	addi	fp,sp,24
10004828:	e13ffe15 	stw	r4,-8(fp)
1000482c:	e17fff15 	stw	r5,-4(fp)
10004830:	e0bfff17 	ldw	r2,-4(fp)
10004834:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004838:	0005303a 	rdctl	r2,status
1000483c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004840:	e0fffb17 	ldw	r3,-20(fp)
10004844:	00bfff84 	movi	r2,-2
10004848:	1884703a 	and	r2,r3,r2
1000484c:	1001703a 	wrctl	status,r2
  
  return context;
10004850:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004854:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10004858:	e0bffa17 	ldw	r2,-24(fp)
1000485c:	00c00044 	movi	r3,1
10004860:	1884983a 	sll	r2,r3,r2
10004864:	1007883a 	mov	r3,r2
10004868:	00840074 	movhi	r2,4097
1000486c:	10a32c04 	addi	r2,r2,-29520
10004870:	10800017 	ldw	r2,0(r2)
10004874:	1886b03a 	or	r3,r3,r2
10004878:	00840074 	movhi	r2,4097
1000487c:	10a32c04 	addi	r2,r2,-29520
10004880:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004884:	00840074 	movhi	r2,4097
10004888:	10a32c04 	addi	r2,r2,-29520
1000488c:	10800017 	ldw	r2,0(r2)
10004890:	100170fa 	wrctl	ienable,r2
10004894:	e0bffc17 	ldw	r2,-16(fp)
10004898:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000489c:	e0bffd17 	ldw	r2,-12(fp)
100048a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100048a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100048a8:	0001883a 	nop
}
100048ac:	e037883a 	mov	sp,fp
100048b0:	df000017 	ldw	fp,0(sp)
100048b4:	dec00104 	addi	sp,sp,4
100048b8:	f800283a 	ret

100048bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100048bc:	defff904 	addi	sp,sp,-28
100048c0:	df000615 	stw	fp,24(sp)
100048c4:	df000604 	addi	fp,sp,24
100048c8:	e13ffe15 	stw	r4,-8(fp)
100048cc:	e17fff15 	stw	r5,-4(fp)
100048d0:	e0bfff17 	ldw	r2,-4(fp)
100048d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100048d8:	0005303a 	rdctl	r2,status
100048dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100048e0:	e0fffb17 	ldw	r3,-20(fp)
100048e4:	00bfff84 	movi	r2,-2
100048e8:	1884703a 	and	r2,r3,r2
100048ec:	1001703a 	wrctl	status,r2
  
  return context;
100048f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100048f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100048f8:	e0bffa17 	ldw	r2,-24(fp)
100048fc:	00c00044 	movi	r3,1
10004900:	1884983a 	sll	r2,r3,r2
10004904:	0084303a 	nor	r2,zero,r2
10004908:	1007883a 	mov	r3,r2
1000490c:	00840074 	movhi	r2,4097
10004910:	10a32c04 	addi	r2,r2,-29520
10004914:	10800017 	ldw	r2,0(r2)
10004918:	1886703a 	and	r3,r3,r2
1000491c:	00840074 	movhi	r2,4097
10004920:	10a32c04 	addi	r2,r2,-29520
10004924:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004928:	00840074 	movhi	r2,4097
1000492c:	10a32c04 	addi	r2,r2,-29520
10004930:	10800017 	ldw	r2,0(r2)
10004934:	100170fa 	wrctl	ienable,r2
10004938:	e0bffc17 	ldw	r2,-16(fp)
1000493c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004940:	e0bffd17 	ldw	r2,-12(fp)
10004944:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10004948:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000494c:	0001883a 	nop
}
10004950:	e037883a 	mov	sp,fp
10004954:	df000017 	ldw	fp,0(sp)
10004958:	dec00104 	addi	sp,sp,4
1000495c:	f800283a 	ret

10004960 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10004960:	defffc04 	addi	sp,sp,-16
10004964:	df000315 	stw	fp,12(sp)
10004968:	df000304 	addi	fp,sp,12
1000496c:	e13ffe15 	stw	r4,-8(fp)
10004970:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10004974:	000530fa 	rdctl	r2,ienable
10004978:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000497c:	e0bfff17 	ldw	r2,-4(fp)
10004980:	00c00044 	movi	r3,1
10004984:	1884983a 	sll	r2,r3,r2
10004988:	1007883a 	mov	r3,r2
1000498c:	e0bffd17 	ldw	r2,-12(fp)
10004990:	1884703a 	and	r2,r3,r2
10004994:	1004c03a 	cmpne	r2,r2,zero
10004998:	10803fcc 	andi	r2,r2,255
}
1000499c:	e037883a 	mov	sp,fp
100049a0:	df000017 	ldw	fp,0(sp)
100049a4:	dec00104 	addi	sp,sp,4
100049a8:	f800283a 	ret

100049ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100049ac:	defff504 	addi	sp,sp,-44
100049b0:	dfc00a15 	stw	ra,40(sp)
100049b4:	df000915 	stw	fp,36(sp)
100049b8:	df000904 	addi	fp,sp,36
100049bc:	e13ffc15 	stw	r4,-16(fp)
100049c0:	e17ffd15 	stw	r5,-12(fp)
100049c4:	e1bffe15 	stw	r6,-8(fp)
100049c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100049cc:	00bffa84 	movi	r2,-22
100049d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100049d4:	e0bffd17 	ldw	r2,-12(fp)
100049d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100049dc:	e0bff817 	ldw	r2,-32(fp)
100049e0:	10800808 	cmpgei	r2,r2,32
100049e4:	1000271e 	bne	r2,zero,10004a84 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100049e8:	0005303a 	rdctl	r2,status
100049ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100049f0:	e0fffa17 	ldw	r3,-24(fp)
100049f4:	00bfff84 	movi	r2,-2
100049f8:	1884703a 	and	r2,r3,r2
100049fc:	1001703a 	wrctl	status,r2
  
  return context;
10004a00:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10004a04:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10004a08:	00840074 	movhi	r2,4097
10004a0c:	10a33a04 	addi	r2,r2,-29464
10004a10:	e0fff817 	ldw	r3,-32(fp)
10004a14:	180690fa 	slli	r3,r3,3
10004a18:	10c5883a 	add	r2,r2,r3
10004a1c:	e0fffe17 	ldw	r3,-8(fp)
10004a20:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10004a24:	00840074 	movhi	r2,4097
10004a28:	10a33a04 	addi	r2,r2,-29464
10004a2c:	e0fff817 	ldw	r3,-32(fp)
10004a30:	180690fa 	slli	r3,r3,3
10004a34:	10c5883a 	add	r2,r2,r3
10004a38:	10800104 	addi	r2,r2,4
10004a3c:	e0ffff17 	ldw	r3,-4(fp)
10004a40:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10004a44:	e0bffe17 	ldw	r2,-8(fp)
10004a48:	10000526 	beq	r2,zero,10004a60 <alt_iic_isr_register+0xb4>
10004a4c:	e0bff817 	ldw	r2,-32(fp)
10004a50:	e13ffc17 	ldw	r4,-16(fp)
10004a54:	100b883a 	mov	r5,r2
10004a58:	000481c0 	call	1000481c <alt_ic_irq_enable>
10004a5c:	00000406 	br	10004a70 <alt_iic_isr_register+0xc4>
10004a60:	e0bff817 	ldw	r2,-32(fp)
10004a64:	e13ffc17 	ldw	r4,-16(fp)
10004a68:	100b883a 	mov	r5,r2
10004a6c:	00048bc0 	call	100048bc <alt_ic_irq_disable>
10004a70:	e0bff715 	stw	r2,-36(fp)
10004a74:	e0bff917 	ldw	r2,-28(fp)
10004a78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004a7c:	e0bffb17 	ldw	r2,-20(fp)
10004a80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10004a84:	e0bff717 	ldw	r2,-36(fp)
}
10004a88:	e037883a 	mov	sp,fp
10004a8c:	dfc00117 	ldw	ra,4(sp)
10004a90:	df000017 	ldw	fp,0(sp)
10004a94:	dec00204 	addi	sp,sp,8
10004a98:	f800283a 	ret

10004a9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10004a9c:	defff804 	addi	sp,sp,-32
10004aa0:	dfc00715 	stw	ra,28(sp)
10004aa4:	df000615 	stw	fp,24(sp)
10004aa8:	dc000515 	stw	r16,20(sp)
10004aac:	df000604 	addi	fp,sp,24
10004ab0:	e13ffb15 	stw	r4,-20(fp)
10004ab4:	e17ffc15 	stw	r5,-16(fp)
10004ab8:	e1bffd15 	stw	r6,-12(fp)
10004abc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10004ac0:	e13ffc17 	ldw	r4,-16(fp)
10004ac4:	e17ffd17 	ldw	r5,-12(fp)
10004ac8:	e1bffe17 	ldw	r6,-8(fp)
10004acc:	0004d380 	call	10004d38 <open>
10004ad0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10004ad4:	e0bffa17 	ldw	r2,-24(fp)
10004ad8:	10002216 	blt	r2,zero,10004b64 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10004adc:	04040034 	movhi	r16,4096
10004ae0:	84180404 	addi	r16,r16,24592
10004ae4:	e0bffa17 	ldw	r2,-24(fp)
10004ae8:	1009883a 	mov	r4,r2
10004aec:	01400304 	movi	r5,12
10004af0:	000046c0 	call	1000046c <__mulsi3>
10004af4:	8085883a 	add	r2,r16,r2
10004af8:	10c00017 	ldw	r3,0(r2)
10004afc:	e0bffb17 	ldw	r2,-20(fp)
10004b00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10004b04:	04040034 	movhi	r16,4096
10004b08:	84180404 	addi	r16,r16,24592
10004b0c:	e0bffa17 	ldw	r2,-24(fp)
10004b10:	1009883a 	mov	r4,r2
10004b14:	01400304 	movi	r5,12
10004b18:	000046c0 	call	1000046c <__mulsi3>
10004b1c:	8085883a 	add	r2,r16,r2
10004b20:	10800104 	addi	r2,r2,4
10004b24:	10c00017 	ldw	r3,0(r2)
10004b28:	e0bffb17 	ldw	r2,-20(fp)
10004b2c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10004b30:	04040034 	movhi	r16,4096
10004b34:	84180404 	addi	r16,r16,24592
10004b38:	e0bffa17 	ldw	r2,-24(fp)
10004b3c:	1009883a 	mov	r4,r2
10004b40:	01400304 	movi	r5,12
10004b44:	000046c0 	call	1000046c <__mulsi3>
10004b48:	8085883a 	add	r2,r16,r2
10004b4c:	10800204 	addi	r2,r2,8
10004b50:	10c00017 	ldw	r3,0(r2)
10004b54:	e0bffb17 	ldw	r2,-20(fp)
10004b58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10004b5c:	e13ffa17 	ldw	r4,-24(fp)
10004b60:	00037280 	call	10003728 <alt_release_fd>
  }
} 
10004b64:	e6ffff04 	addi	sp,fp,-4
10004b68:	dfc00217 	ldw	ra,8(sp)
10004b6c:	df000117 	ldw	fp,4(sp)
10004b70:	dc000017 	ldw	r16,0(sp)
10004b74:	dec00304 	addi	sp,sp,12
10004b78:	f800283a 	ret

10004b7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10004b7c:	defffb04 	addi	sp,sp,-20
10004b80:	dfc00415 	stw	ra,16(sp)
10004b84:	df000315 	stw	fp,12(sp)
10004b88:	df000304 	addi	fp,sp,12
10004b8c:	e13ffd15 	stw	r4,-12(fp)
10004b90:	e17ffe15 	stw	r5,-8(fp)
10004b94:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10004b98:	01040034 	movhi	r4,4096
10004b9c:	21180704 	addi	r4,r4,24604
10004ba0:	e17ffd17 	ldw	r5,-12(fp)
10004ba4:	01800044 	movi	r6,1
10004ba8:	01c07fc4 	movi	r7,511
10004bac:	0004a9c0 	call	10004a9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004bb0:	01040034 	movhi	r4,4096
10004bb4:	21180404 	addi	r4,r4,24592
10004bb8:	e17ffe17 	ldw	r5,-8(fp)
10004bbc:	000d883a 	mov	r6,zero
10004bc0:	01c07fc4 	movi	r7,511
10004bc4:	0004a9c0 	call	10004a9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10004bc8:	01040034 	movhi	r4,4096
10004bcc:	21180a04 	addi	r4,r4,24616
10004bd0:	e17fff17 	ldw	r5,-4(fp)
10004bd4:	01800044 	movi	r6,1
10004bd8:	01c07fc4 	movi	r7,511
10004bdc:	0004a9c0 	call	10004a9c <alt_open_fd>
}  
10004be0:	e037883a 	mov	sp,fp
10004be4:	dfc00117 	ldw	ra,4(sp)
10004be8:	df000017 	ldw	fp,0(sp)
10004bec:	dec00204 	addi	sp,sp,8
10004bf0:	f800283a 	ret

10004bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004bf4:	defffe04 	addi	sp,sp,-8
10004bf8:	dfc00115 	stw	ra,4(sp)
10004bfc:	df000015 	stw	fp,0(sp)
10004c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004c04:	00840034 	movhi	r2,4096
10004c08:	109c8504 	addi	r2,r2,29204
10004c0c:	10800017 	ldw	r2,0(r2)
10004c10:	10000526 	beq	r2,zero,10004c28 <alt_get_errno+0x34>
10004c14:	00840034 	movhi	r2,4096
10004c18:	109c8504 	addi	r2,r2,29204
10004c1c:	10800017 	ldw	r2,0(r2)
10004c20:	103ee83a 	callr	r2
10004c24:	00000206 	br	10004c30 <alt_get_errno+0x3c>
10004c28:	00840074 	movhi	r2,4097
10004c2c:	10a32804 	addi	r2,r2,-29536
}
10004c30:	e037883a 	mov	sp,fp
10004c34:	dfc00117 	ldw	ra,4(sp)
10004c38:	df000017 	ldw	fp,0(sp)
10004c3c:	dec00204 	addi	sp,sp,8
10004c40:	f800283a 	ret

10004c44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10004c44:	defffb04 	addi	sp,sp,-20
10004c48:	dfc00415 	stw	ra,16(sp)
10004c4c:	df000315 	stw	fp,12(sp)
10004c50:	dc000215 	stw	r16,8(sp)
10004c54:	df000304 	addi	fp,sp,12
10004c58:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10004c5c:	e0bffe17 	ldw	r2,-8(fp)
10004c60:	10800217 	ldw	r2,8(r2)
10004c64:	10d00034 	orhi	r3,r2,16384
10004c68:	e0bffe17 	ldw	r2,-8(fp)
10004c6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004c70:	e03ffd15 	stw	zero,-12(fp)
10004c74:	00002306 	br	10004d04 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004c78:	04040034 	movhi	r16,4096
10004c7c:	84180404 	addi	r16,r16,24592
10004c80:	e0bffd17 	ldw	r2,-12(fp)
10004c84:	1009883a 	mov	r4,r2
10004c88:	01400304 	movi	r5,12
10004c8c:	000046c0 	call	1000046c <__mulsi3>
10004c90:	8085883a 	add	r2,r16,r2
10004c94:	10c00017 	ldw	r3,0(r2)
10004c98:	e0bffe17 	ldw	r2,-8(fp)
10004c9c:	10800017 	ldw	r2,0(r2)
10004ca0:	1880151e 	bne	r3,r2,10004cf8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004ca4:	04040034 	movhi	r16,4096
10004ca8:	84180404 	addi	r16,r16,24592
10004cac:	e0bffd17 	ldw	r2,-12(fp)
10004cb0:	1009883a 	mov	r4,r2
10004cb4:	01400304 	movi	r5,12
10004cb8:	000046c0 	call	1000046c <__mulsi3>
10004cbc:	8085883a 	add	r2,r16,r2
10004cc0:	10800204 	addi	r2,r2,8
10004cc4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004cc8:	10000b0e 	bge	r2,zero,10004cf8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10004ccc:	e13ffd17 	ldw	r4,-12(fp)
10004cd0:	01400304 	movi	r5,12
10004cd4:	000046c0 	call	1000046c <__mulsi3>
10004cd8:	1007883a 	mov	r3,r2
10004cdc:	00840034 	movhi	r2,4096
10004ce0:	10980404 	addi	r2,r2,24592
10004ce4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004ce8:	e0bffe17 	ldw	r2,-8(fp)
10004cec:	18800226 	beq	r3,r2,10004cf8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004cf0:	00bffcc4 	movi	r2,-13
10004cf4:	00000a06 	br	10004d20 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004cf8:	e0bffd17 	ldw	r2,-12(fp)
10004cfc:	10800044 	addi	r2,r2,1
10004d00:	e0bffd15 	stw	r2,-12(fp)
10004d04:	00840034 	movhi	r2,4096
10004d08:	109c8404 	addi	r2,r2,29200
10004d0c:	10800017 	ldw	r2,0(r2)
10004d10:	1007883a 	mov	r3,r2
10004d14:	e0bffd17 	ldw	r2,-12(fp)
10004d18:	18bfd72e 	bgeu	r3,r2,10004c78 <__alt_data_end+0xf8004c78>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004d1c:	0005883a 	mov	r2,zero
}
10004d20:	e6ffff04 	addi	sp,fp,-4
10004d24:	dfc00217 	ldw	ra,8(sp)
10004d28:	df000117 	ldw	fp,4(sp)
10004d2c:	dc000017 	ldw	r16,0(sp)
10004d30:	dec00304 	addi	sp,sp,12
10004d34:	f800283a 	ret

10004d38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10004d38:	defff604 	addi	sp,sp,-40
10004d3c:	dfc00915 	stw	ra,36(sp)
10004d40:	df000815 	stw	fp,32(sp)
10004d44:	df000804 	addi	fp,sp,32
10004d48:	e13ffd15 	stw	r4,-12(fp)
10004d4c:	e17ffe15 	stw	r5,-8(fp)
10004d50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004d54:	00bfffc4 	movi	r2,-1
10004d58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004d5c:	00bffb44 	movi	r2,-19
10004d60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004d64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10004d68:	e13ffd17 	ldw	r4,-12(fp)
10004d6c:	01440034 	movhi	r5,4096
10004d70:	295c8204 	addi	r5,r5,29192
10004d74:	00050540 	call	10005054 <alt_find_dev>
10004d78:	e0bff815 	stw	r2,-32(fp)
10004d7c:	e0bff817 	ldw	r2,-32(fp)
10004d80:	1000051e 	bne	r2,zero,10004d98 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004d84:	e13ffd17 	ldw	r4,-12(fp)
10004d88:	00050e40 	call	100050e4 <alt_find_file>
10004d8c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004d90:	00800044 	movi	r2,1
10004d94:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004d98:	e0bff817 	ldw	r2,-32(fp)
10004d9c:	10002b26 	beq	r2,zero,10004e4c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004da0:	e13ff817 	ldw	r4,-32(fp)
10004da4:	00051f80 	call	100051f8 <alt_get_fd>
10004da8:	e0bff915 	stw	r2,-28(fp)
10004dac:	e0bff917 	ldw	r2,-28(fp)
10004db0:	1000030e 	bge	r2,zero,10004dc0 <open+0x88>
    {
      status = index;
10004db4:	e0bff917 	ldw	r2,-28(fp)
10004db8:	e0bffa15 	stw	r2,-24(fp)
10004dbc:	00002506 	br	10004e54 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10004dc0:	e13ff917 	ldw	r4,-28(fp)
10004dc4:	01400304 	movi	r5,12
10004dc8:	000046c0 	call	1000046c <__mulsi3>
10004dcc:	1007883a 	mov	r3,r2
10004dd0:	00840034 	movhi	r2,4096
10004dd4:	10980404 	addi	r2,r2,24592
10004dd8:	1885883a 	add	r2,r3,r2
10004ddc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004de0:	e0fffe17 	ldw	r3,-8(fp)
10004de4:	00900034 	movhi	r2,16384
10004de8:	10bfffc4 	addi	r2,r2,-1
10004dec:	1886703a 	and	r3,r3,r2
10004df0:	e0bffc17 	ldw	r2,-16(fp)
10004df4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10004df8:	e0bffb17 	ldw	r2,-20(fp)
10004dfc:	1000051e 	bne	r2,zero,10004e14 <open+0xdc>
10004e00:	e13ffc17 	ldw	r4,-16(fp)
10004e04:	0004c440 	call	10004c44 <alt_file_locked>
10004e08:	e0bffa15 	stw	r2,-24(fp)
10004e0c:	e0bffa17 	ldw	r2,-24(fp)
10004e10:	10001016 	blt	r2,zero,10004e54 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004e14:	e0bff817 	ldw	r2,-32(fp)
10004e18:	10800317 	ldw	r2,12(r2)
10004e1c:	10000826 	beq	r2,zero,10004e40 <open+0x108>
10004e20:	e0bff817 	ldw	r2,-32(fp)
10004e24:	10800317 	ldw	r2,12(r2)
10004e28:	e13ffc17 	ldw	r4,-16(fp)
10004e2c:	e17ffd17 	ldw	r5,-12(fp)
10004e30:	e1bffe17 	ldw	r6,-8(fp)
10004e34:	e1ffff17 	ldw	r7,-4(fp)
10004e38:	103ee83a 	callr	r2
10004e3c:	00000106 	br	10004e44 <open+0x10c>
10004e40:	0005883a 	mov	r2,zero
10004e44:	e0bffa15 	stw	r2,-24(fp)
10004e48:	00000206 	br	10004e54 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004e4c:	00bffb44 	movi	r2,-19
10004e50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10004e54:	e0bffa17 	ldw	r2,-24(fp)
10004e58:	1000090e 	bge	r2,zero,10004e80 <open+0x148>
  {
    alt_release_fd (index);  
10004e5c:	e13ff917 	ldw	r4,-28(fp)
10004e60:	00037280 	call	10003728 <alt_release_fd>
    ALT_ERRNO = -status;
10004e64:	0004bf40 	call	10004bf4 <alt_get_errno>
10004e68:	1007883a 	mov	r3,r2
10004e6c:	e0bffa17 	ldw	r2,-24(fp)
10004e70:	0085c83a 	sub	r2,zero,r2
10004e74:	18800015 	stw	r2,0(r3)
    return -1;
10004e78:	00bfffc4 	movi	r2,-1
10004e7c:	00000106 	br	10004e84 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10004e80:	e0bff917 	ldw	r2,-28(fp)
}
10004e84:	e037883a 	mov	sp,fp
10004e88:	dfc00117 	ldw	ra,4(sp)
10004e8c:	df000017 	ldw	fp,0(sp)
10004e90:	dec00204 	addi	sp,sp,8
10004e94:	f800283a 	ret

10004e98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004e98:	defffa04 	addi	sp,sp,-24
10004e9c:	df000515 	stw	fp,20(sp)
10004ea0:	df000504 	addi	fp,sp,20
10004ea4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004ea8:	0005303a 	rdctl	r2,status
10004eac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004eb0:	e0fffc17 	ldw	r3,-16(fp)
10004eb4:	00bfff84 	movi	r2,-2
10004eb8:	1884703a 	and	r2,r3,r2
10004ebc:	1001703a 	wrctl	status,r2
  
  return context;
10004ec0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004ec4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004ec8:	e0bfff17 	ldw	r2,-4(fp)
10004ecc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10004ed0:	e0bffd17 	ldw	r2,-12(fp)
10004ed4:	10800017 	ldw	r2,0(r2)
10004ed8:	e0fffd17 	ldw	r3,-12(fp)
10004edc:	18c00117 	ldw	r3,4(r3)
10004ee0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004ee4:	e0bffd17 	ldw	r2,-12(fp)
10004ee8:	10800117 	ldw	r2,4(r2)
10004eec:	e0fffd17 	ldw	r3,-12(fp)
10004ef0:	18c00017 	ldw	r3,0(r3)
10004ef4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004ef8:	e0bffd17 	ldw	r2,-12(fp)
10004efc:	e0fffd17 	ldw	r3,-12(fp)
10004f00:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004f04:	e0bffd17 	ldw	r2,-12(fp)
10004f08:	e0fffd17 	ldw	r3,-12(fp)
10004f0c:	10c00015 	stw	r3,0(r2)
10004f10:	e0bffb17 	ldw	r2,-20(fp)
10004f14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004f18:	e0bffe17 	ldw	r2,-8(fp)
10004f1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004f20:	e037883a 	mov	sp,fp
10004f24:	df000017 	ldw	fp,0(sp)
10004f28:	dec00104 	addi	sp,sp,4
10004f2c:	f800283a 	ret

10004f30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004f30:	defffb04 	addi	sp,sp,-20
10004f34:	dfc00415 	stw	ra,16(sp)
10004f38:	df000315 	stw	fp,12(sp)
10004f3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10004f40:	d0a00c17 	ldw	r2,-32720(gp)
10004f44:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004f48:	d0a6b217 	ldw	r2,-25912(gp)
10004f4c:	10800044 	addi	r2,r2,1
10004f50:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004f54:	00002e06 	br	10005010 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004f58:	e0bffd17 	ldw	r2,-12(fp)
10004f5c:	10800017 	ldw	r2,0(r2)
10004f60:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004f64:	e0bffd17 	ldw	r2,-12(fp)
10004f68:	10800403 	ldbu	r2,16(r2)
10004f6c:	10803fcc 	andi	r2,r2,255
10004f70:	10000426 	beq	r2,zero,10004f84 <alt_tick+0x54>
10004f74:	d0a6b217 	ldw	r2,-25912(gp)
10004f78:	1000021e 	bne	r2,zero,10004f84 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004f7c:	e0bffd17 	ldw	r2,-12(fp)
10004f80:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004f84:	e0bffd17 	ldw	r2,-12(fp)
10004f88:	10800217 	ldw	r2,8(r2)
10004f8c:	d0e6b217 	ldw	r3,-25912(gp)
10004f90:	18801d36 	bltu	r3,r2,10005008 <alt_tick+0xd8>
10004f94:	e0bffd17 	ldw	r2,-12(fp)
10004f98:	10800403 	ldbu	r2,16(r2)
10004f9c:	10803fcc 	andi	r2,r2,255
10004fa0:	1000191e 	bne	r2,zero,10005008 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004fa4:	e0bffd17 	ldw	r2,-12(fp)
10004fa8:	10800317 	ldw	r2,12(r2)
10004fac:	e0fffd17 	ldw	r3,-12(fp)
10004fb0:	18c00517 	ldw	r3,20(r3)
10004fb4:	1809883a 	mov	r4,r3
10004fb8:	103ee83a 	callr	r2
10004fbc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10004fc0:	e0bfff17 	ldw	r2,-4(fp)
10004fc4:	1000031e 	bne	r2,zero,10004fd4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10004fc8:	e13ffd17 	ldw	r4,-12(fp)
10004fcc:	0004e980 	call	10004e98 <alt_alarm_stop>
10004fd0:	00000d06 	br	10005008 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10004fd4:	e0bffd17 	ldw	r2,-12(fp)
10004fd8:	10c00217 	ldw	r3,8(r2)
10004fdc:	e0bfff17 	ldw	r2,-4(fp)
10004fe0:	1887883a 	add	r3,r3,r2
10004fe4:	e0bffd17 	ldw	r2,-12(fp)
10004fe8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10004fec:	e0bffd17 	ldw	r2,-12(fp)
10004ff0:	10c00217 	ldw	r3,8(r2)
10004ff4:	d0a6b217 	ldw	r2,-25912(gp)
10004ff8:	1880032e 	bgeu	r3,r2,10005008 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10004ffc:	e0bffd17 	ldw	r2,-12(fp)
10005000:	00c00044 	movi	r3,1
10005004:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10005008:	e0bffe17 	ldw	r2,-8(fp)
1000500c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005010:	e0fffd17 	ldw	r3,-12(fp)
10005014:	d0a00c04 	addi	r2,gp,-32720
10005018:	18bfcf1e 	bne	r3,r2,10004f58 <__alt_data_end+0xf8004f58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000501c:	0001883a 	nop
}
10005020:	e037883a 	mov	sp,fp
10005024:	dfc00117 	ldw	ra,4(sp)
10005028:	df000017 	ldw	fp,0(sp)
1000502c:	dec00204 	addi	sp,sp,8
10005030:	f800283a 	ret

10005034 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10005034:	deffff04 	addi	sp,sp,-4
10005038:	df000015 	stw	fp,0(sp)
1000503c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10005040:	000170fa 	wrctl	ienable,zero
}
10005044:	e037883a 	mov	sp,fp
10005048:	df000017 	ldw	fp,0(sp)
1000504c:	dec00104 	addi	sp,sp,4
10005050:	f800283a 	ret

10005054 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10005054:	defffa04 	addi	sp,sp,-24
10005058:	dfc00515 	stw	ra,20(sp)
1000505c:	df000415 	stw	fp,16(sp)
10005060:	df000404 	addi	fp,sp,16
10005064:	e13ffe15 	stw	r4,-8(fp)
10005068:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000506c:	e0bfff17 	ldw	r2,-4(fp)
10005070:	10800017 	ldw	r2,0(r2)
10005074:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10005078:	e13ffe17 	ldw	r4,-8(fp)
1000507c:	00005600 	call	10000560 <strlen>
10005080:	10800044 	addi	r2,r2,1
10005084:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005088:	00000d06 	br	100050c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000508c:	e0bffc17 	ldw	r2,-16(fp)
10005090:	10c00217 	ldw	r3,8(r2)
10005094:	e0bffd17 	ldw	r2,-12(fp)
10005098:	1809883a 	mov	r4,r3
1000509c:	e17ffe17 	ldw	r5,-8(fp)
100050a0:	100d883a 	mov	r6,r2
100050a4:	00053b40 	call	100053b4 <memcmp>
100050a8:	1000021e 	bne	r2,zero,100050b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100050ac:	e0bffc17 	ldw	r2,-16(fp)
100050b0:	00000706 	br	100050d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100050b4:	e0bffc17 	ldw	r2,-16(fp)
100050b8:	10800017 	ldw	r2,0(r2)
100050bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100050c0:	e0fffc17 	ldw	r3,-16(fp)
100050c4:	e0bfff17 	ldw	r2,-4(fp)
100050c8:	18bff01e 	bne	r3,r2,1000508c <__alt_data_end+0xf800508c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100050cc:	0005883a 	mov	r2,zero
}
100050d0:	e037883a 	mov	sp,fp
100050d4:	dfc00117 	ldw	ra,4(sp)
100050d8:	df000017 	ldw	fp,0(sp)
100050dc:	dec00204 	addi	sp,sp,8
100050e0:	f800283a 	ret

100050e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100050e4:	defffb04 	addi	sp,sp,-20
100050e8:	dfc00415 	stw	ra,16(sp)
100050ec:	df000315 	stw	fp,12(sp)
100050f0:	df000304 	addi	fp,sp,12
100050f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100050f8:	00840034 	movhi	r2,4096
100050fc:	109c8004 	addi	r2,r2,29184
10005100:	10800017 	ldw	r2,0(r2)
10005104:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005108:	00003106 	br	100051d0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000510c:	e0bffd17 	ldw	r2,-12(fp)
10005110:	10800217 	ldw	r2,8(r2)
10005114:	1009883a 	mov	r4,r2
10005118:	00005600 	call	10000560 <strlen>
1000511c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10005120:	e0bffd17 	ldw	r2,-12(fp)
10005124:	10c00217 	ldw	r3,8(r2)
10005128:	e0bffe17 	ldw	r2,-8(fp)
1000512c:	10bfffc4 	addi	r2,r2,-1
10005130:	1885883a 	add	r2,r3,r2
10005134:	10800003 	ldbu	r2,0(r2)
10005138:	10803fcc 	andi	r2,r2,255
1000513c:	1080201c 	xori	r2,r2,128
10005140:	10bfe004 	addi	r2,r2,-128
10005144:	10800bd8 	cmpnei	r2,r2,47
10005148:	1000031e 	bne	r2,zero,10005158 <alt_find_file+0x74>
    {
      len -= 1;
1000514c:	e0bffe17 	ldw	r2,-8(fp)
10005150:	10bfffc4 	addi	r2,r2,-1
10005154:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005158:	e0bffe17 	ldw	r2,-8(fp)
1000515c:	e0ffff17 	ldw	r3,-4(fp)
10005160:	1885883a 	add	r2,r3,r2
10005164:	10800003 	ldbu	r2,0(r2)
10005168:	10803fcc 	andi	r2,r2,255
1000516c:	1080201c 	xori	r2,r2,128
10005170:	10bfe004 	addi	r2,r2,-128
10005174:	10800be0 	cmpeqi	r2,r2,47
10005178:	1000081e 	bne	r2,zero,1000519c <alt_find_file+0xb8>
1000517c:	e0bffe17 	ldw	r2,-8(fp)
10005180:	e0ffff17 	ldw	r3,-4(fp)
10005184:	1885883a 	add	r2,r3,r2
10005188:	10800003 	ldbu	r2,0(r2)
1000518c:	10803fcc 	andi	r2,r2,255
10005190:	1080201c 	xori	r2,r2,128
10005194:	10bfe004 	addi	r2,r2,-128
10005198:	10000a1e 	bne	r2,zero,100051c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000519c:	e0bffd17 	ldw	r2,-12(fp)
100051a0:	10c00217 	ldw	r3,8(r2)
100051a4:	e0bffe17 	ldw	r2,-8(fp)
100051a8:	1809883a 	mov	r4,r3
100051ac:	e17fff17 	ldw	r5,-4(fp)
100051b0:	100d883a 	mov	r6,r2
100051b4:	00053b40 	call	100053b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100051b8:	1000021e 	bne	r2,zero,100051c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100051bc:	e0bffd17 	ldw	r2,-12(fp)
100051c0:	00000806 	br	100051e4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100051c4:	e0bffd17 	ldw	r2,-12(fp)
100051c8:	10800017 	ldw	r2,0(r2)
100051cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100051d0:	e0fffd17 	ldw	r3,-12(fp)
100051d4:	00840034 	movhi	r2,4096
100051d8:	109c8004 	addi	r2,r2,29184
100051dc:	18bfcb1e 	bne	r3,r2,1000510c <__alt_data_end+0xf800510c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100051e0:	0005883a 	mov	r2,zero
}
100051e4:	e037883a 	mov	sp,fp
100051e8:	dfc00117 	ldw	ra,4(sp)
100051ec:	df000017 	ldw	fp,0(sp)
100051f0:	dec00204 	addi	sp,sp,8
100051f4:	f800283a 	ret

100051f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100051f8:	defffa04 	addi	sp,sp,-24
100051fc:	dfc00515 	stw	ra,20(sp)
10005200:	df000415 	stw	fp,16(sp)
10005204:	dc000315 	stw	r16,12(sp)
10005208:	df000404 	addi	fp,sp,16
1000520c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10005210:	00bffa04 	movi	r2,-24
10005214:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005218:	e03ffc15 	stw	zero,-16(fp)
1000521c:	00002106 	br	100052a4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10005220:	04040034 	movhi	r16,4096
10005224:	84180404 	addi	r16,r16,24592
10005228:	e0bffc17 	ldw	r2,-16(fp)
1000522c:	1009883a 	mov	r4,r2
10005230:	01400304 	movi	r5,12
10005234:	000046c0 	call	1000046c <__mulsi3>
10005238:	8085883a 	add	r2,r16,r2
1000523c:	10800017 	ldw	r2,0(r2)
10005240:	1000151e 	bne	r2,zero,10005298 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10005244:	04040034 	movhi	r16,4096
10005248:	84180404 	addi	r16,r16,24592
1000524c:	e0bffc17 	ldw	r2,-16(fp)
10005250:	1009883a 	mov	r4,r2
10005254:	01400304 	movi	r5,12
10005258:	000046c0 	call	1000046c <__mulsi3>
1000525c:	8085883a 	add	r2,r16,r2
10005260:	e0fffe17 	ldw	r3,-8(fp)
10005264:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10005268:	00840034 	movhi	r2,4096
1000526c:	109c8404 	addi	r2,r2,29200
10005270:	10c00017 	ldw	r3,0(r2)
10005274:	e0bffc17 	ldw	r2,-16(fp)
10005278:	1880040e 	bge	r3,r2,1000528c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000527c:	00840034 	movhi	r2,4096
10005280:	109c8404 	addi	r2,r2,29200
10005284:	e0fffc17 	ldw	r3,-16(fp)
10005288:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000528c:	e0bffc17 	ldw	r2,-16(fp)
10005290:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005294:	00000606 	br	100052b0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005298:	e0bffc17 	ldw	r2,-16(fp)
1000529c:	10800044 	addi	r2,r2,1
100052a0:	e0bffc15 	stw	r2,-16(fp)
100052a4:	e0bffc17 	ldw	r2,-16(fp)
100052a8:	10800810 	cmplti	r2,r2,32
100052ac:	103fdc1e 	bne	r2,zero,10005220 <__alt_data_end+0xf8005220>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100052b0:	e0bffd17 	ldw	r2,-12(fp)
}
100052b4:	e6ffff04 	addi	sp,fp,-4
100052b8:	dfc00217 	ldw	ra,8(sp)
100052bc:	df000117 	ldw	fp,4(sp)
100052c0:	dc000017 	ldw	r16,0(sp)
100052c4:	dec00304 	addi	sp,sp,12
100052c8:	f800283a 	ret

100052cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100052cc:	defffe04 	addi	sp,sp,-8
100052d0:	df000115 	stw	fp,4(sp)
100052d4:	df000104 	addi	fp,sp,4
100052d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100052dc:	e0bfff17 	ldw	r2,-4(fp)
100052e0:	10bffe84 	addi	r2,r2,-6
100052e4:	10c00428 	cmpgeui	r3,r2,16
100052e8:	18001a1e 	bne	r3,zero,10005354 <alt_exception_cause_generated_bad_addr+0x88>
100052ec:	100690ba 	slli	r3,r2,2
100052f0:	00840034 	movhi	r2,4096
100052f4:	1094c104 	addi	r2,r2,21252
100052f8:	1885883a 	add	r2,r3,r2
100052fc:	10800017 	ldw	r2,0(r2)
10005300:	1000683a 	jmp	r2
10005304:	10005344 	addi	zero,r2,333
10005308:	10005344 	addi	zero,r2,333
1000530c:	10005354 	ori	zero,r2,333
10005310:	10005354 	ori	zero,r2,333
10005314:	10005354 	ori	zero,r2,333
10005318:	10005344 	addi	zero,r2,333
1000531c:	1000534c 	andi	zero,r2,333
10005320:	10005354 	ori	zero,r2,333
10005324:	10005344 	addi	zero,r2,333
10005328:	10005344 	addi	zero,r2,333
1000532c:	10005354 	ori	zero,r2,333
10005330:	10005344 	addi	zero,r2,333
10005334:	1000534c 	andi	zero,r2,333
10005338:	10005354 	ori	zero,r2,333
1000533c:	10005354 	ori	zero,r2,333
10005340:	10005344 	addi	zero,r2,333
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10005344:	00800044 	movi	r2,1
10005348:	00000306 	br	10005358 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000534c:	0005883a 	mov	r2,zero
10005350:	00000106 	br	10005358 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10005354:	0005883a 	mov	r2,zero
  }
}
10005358:	e037883a 	mov	sp,fp
1000535c:	df000017 	ldw	fp,0(sp)
10005360:	dec00104 	addi	sp,sp,4
10005364:	f800283a 	ret

10005368 <atexit>:
10005368:	200b883a 	mov	r5,r4
1000536c:	000d883a 	mov	r6,zero
10005370:	0009883a 	mov	r4,zero
10005374:	000f883a 	mov	r7,zero
10005378:	00054301 	jmpi	10005430 <__register_exitproc>

1000537c <exit>:
1000537c:	defffe04 	addi	sp,sp,-8
10005380:	000b883a 	mov	r5,zero
10005384:	dc000015 	stw	r16,0(sp)
10005388:	dfc00115 	stw	ra,4(sp)
1000538c:	2021883a 	mov	r16,r4
10005390:	00055440 	call	10005544 <__call_exitprocs>
10005394:	00840034 	movhi	r2,4096
10005398:	109c7c04 	addi	r2,r2,29168
1000539c:	11000017 	ldw	r4,0(r2)
100053a0:	20800f17 	ldw	r2,60(r4)
100053a4:	10000126 	beq	r2,zero,100053ac <exit+0x30>
100053a8:	103ee83a 	callr	r2
100053ac:	8009883a 	mov	r4,r16
100053b0:	00056d80 	call	100056d8 <_exit>

100053b4 <memcmp>:
100053b4:	01c000c4 	movi	r7,3
100053b8:	3980192e 	bgeu	r7,r6,10005420 <memcmp+0x6c>
100053bc:	2144b03a 	or	r2,r4,r5
100053c0:	11c4703a 	and	r2,r2,r7
100053c4:	10000f26 	beq	r2,zero,10005404 <memcmp+0x50>
100053c8:	20800003 	ldbu	r2,0(r4)
100053cc:	28c00003 	ldbu	r3,0(r5)
100053d0:	10c0151e 	bne	r2,r3,10005428 <memcmp+0x74>
100053d4:	31bfff84 	addi	r6,r6,-2
100053d8:	01ffffc4 	movi	r7,-1
100053dc:	00000406 	br	100053f0 <memcmp+0x3c>
100053e0:	20800003 	ldbu	r2,0(r4)
100053e4:	28c00003 	ldbu	r3,0(r5)
100053e8:	31bfffc4 	addi	r6,r6,-1
100053ec:	10c00e1e 	bne	r2,r3,10005428 <memcmp+0x74>
100053f0:	21000044 	addi	r4,r4,1
100053f4:	29400044 	addi	r5,r5,1
100053f8:	31fff91e 	bne	r6,r7,100053e0 <__alt_data_end+0xf80053e0>
100053fc:	0005883a 	mov	r2,zero
10005400:	f800283a 	ret
10005404:	20c00017 	ldw	r3,0(r4)
10005408:	28800017 	ldw	r2,0(r5)
1000540c:	1880041e 	bne	r3,r2,10005420 <memcmp+0x6c>
10005410:	31bfff04 	addi	r6,r6,-4
10005414:	21000104 	addi	r4,r4,4
10005418:	29400104 	addi	r5,r5,4
1000541c:	39bff936 	bltu	r7,r6,10005404 <__alt_data_end+0xf8005404>
10005420:	303fe91e 	bne	r6,zero,100053c8 <__alt_data_end+0xf80053c8>
10005424:	003ff506 	br	100053fc <__alt_data_end+0xf80053fc>
10005428:	10c5c83a 	sub	r2,r2,r3
1000542c:	f800283a 	ret

10005430 <__register_exitproc>:
10005430:	00840034 	movhi	r2,4096
10005434:	defffa04 	addi	sp,sp,-24
10005438:	109c7c04 	addi	r2,r2,29168
1000543c:	dc000315 	stw	r16,12(sp)
10005440:	14000017 	ldw	r16,0(r2)
10005444:	dc400415 	stw	r17,16(sp)
10005448:	dfc00515 	stw	ra,20(sp)
1000544c:	80805217 	ldw	r2,328(r16)
10005450:	2023883a 	mov	r17,r4
10005454:	10003626 	beq	r2,zero,10005530 <__register_exitproc+0x100>
10005458:	10c00117 	ldw	r3,4(r2)
1000545c:	010007c4 	movi	r4,31
10005460:	20c00e16 	blt	r4,r3,1000549c <__register_exitproc+0x6c>
10005464:	1a400044 	addi	r9,r3,1
10005468:	8800211e 	bne	r17,zero,100054f0 <__register_exitproc+0xc0>
1000546c:	18c00084 	addi	r3,r3,2
10005470:	18c7883a 	add	r3,r3,r3
10005474:	18c7883a 	add	r3,r3,r3
10005478:	12400115 	stw	r9,4(r2)
1000547c:	10c7883a 	add	r3,r2,r3
10005480:	19400015 	stw	r5,0(r3)
10005484:	0005883a 	mov	r2,zero
10005488:	dfc00517 	ldw	ra,20(sp)
1000548c:	dc400417 	ldw	r17,16(sp)
10005490:	dc000317 	ldw	r16,12(sp)
10005494:	dec00604 	addi	sp,sp,24
10005498:	f800283a 	ret
1000549c:	00800034 	movhi	r2,0
100054a0:	10800004 	addi	r2,r2,0
100054a4:	10002526 	beq	r2,zero,1000553c <__register_exitproc+0x10c>
100054a8:	01006404 	movi	r4,400
100054ac:	d9400015 	stw	r5,0(sp)
100054b0:	d9800115 	stw	r6,4(sp)
100054b4:	d9c00215 	stw	r7,8(sp)
100054b8:	00000000 	call	10000000 <__reset>
100054bc:	d9400017 	ldw	r5,0(sp)
100054c0:	d9800117 	ldw	r6,4(sp)
100054c4:	d9c00217 	ldw	r7,8(sp)
100054c8:	10001c26 	beq	r2,zero,1000553c <__register_exitproc+0x10c>
100054cc:	80c05217 	ldw	r3,328(r16)
100054d0:	10000115 	stw	zero,4(r2)
100054d4:	02400044 	movi	r9,1
100054d8:	10c00015 	stw	r3,0(r2)
100054dc:	80805215 	stw	r2,328(r16)
100054e0:	10006215 	stw	zero,392(r2)
100054e4:	10006315 	stw	zero,396(r2)
100054e8:	0007883a 	mov	r3,zero
100054ec:	883fdf26 	beq	r17,zero,1000546c <__alt_data_end+0xf800546c>
100054f0:	18d1883a 	add	r8,r3,r3
100054f4:	4211883a 	add	r8,r8,r8
100054f8:	1211883a 	add	r8,r2,r8
100054fc:	41802215 	stw	r6,136(r8)
10005500:	01000044 	movi	r4,1
10005504:	11806217 	ldw	r6,392(r2)
10005508:	20c8983a 	sll	r4,r4,r3
1000550c:	310cb03a 	or	r6,r6,r4
10005510:	11806215 	stw	r6,392(r2)
10005514:	41c04215 	stw	r7,264(r8)
10005518:	01800084 	movi	r6,2
1000551c:	89bfd31e 	bne	r17,r6,1000546c <__alt_data_end+0xf800546c>
10005520:	11806317 	ldw	r6,396(r2)
10005524:	3108b03a 	or	r4,r6,r4
10005528:	11006315 	stw	r4,396(r2)
1000552c:	003fcf06 	br	1000546c <__alt_data_end+0xf800546c>
10005530:	80805304 	addi	r2,r16,332
10005534:	80805215 	stw	r2,328(r16)
10005538:	003fc706 	br	10005458 <__alt_data_end+0xf8005458>
1000553c:	00bfffc4 	movi	r2,-1
10005540:	003fd106 	br	10005488 <__alt_data_end+0xf8005488>

10005544 <__call_exitprocs>:
10005544:	00840034 	movhi	r2,4096
10005548:	109c7c04 	addi	r2,r2,29168
1000554c:	10800017 	ldw	r2,0(r2)
10005550:	defff404 	addi	sp,sp,-48
10005554:	dd800815 	stw	r22,32(sp)
10005558:	d8800015 	stw	r2,0(sp)
1000555c:	10805204 	addi	r2,r2,328
10005560:	dd000615 	stw	r20,24(sp)
10005564:	dc800415 	stw	r18,16(sp)
10005568:	dfc00b15 	stw	ra,44(sp)
1000556c:	df000a15 	stw	fp,40(sp)
10005570:	ddc00915 	stw	r23,36(sp)
10005574:	dd400715 	stw	r21,28(sp)
10005578:	dcc00515 	stw	r19,20(sp)
1000557c:	dc400315 	stw	r17,12(sp)
10005580:	dc000215 	stw	r16,8(sp)
10005584:	2025883a 	mov	r18,r4
10005588:	2829883a 	mov	r20,r5
1000558c:	d8800115 	stw	r2,4(sp)
10005590:	05bfffc4 	movi	r22,-1
10005594:	d8800017 	ldw	r2,0(sp)
10005598:	14c05217 	ldw	r19,328(r2)
1000559c:	98001d26 	beq	r19,zero,10005614 <__call_exitprocs+0xd0>
100055a0:	dd400117 	ldw	r21,4(sp)
100055a4:	98800117 	ldw	r2,4(r19)
100055a8:	173fffc4 	addi	fp,r2,-1
100055ac:	e0000d16 	blt	fp,zero,100055e4 <__call_exitprocs+0xa0>
100055b0:	14000044 	addi	r16,r2,1
100055b4:	8421883a 	add	r16,r16,r16
100055b8:	8421883a 	add	r16,r16,r16
100055bc:	84402004 	addi	r17,r16,128
100055c0:	9c63883a 	add	r17,r19,r17
100055c4:	9c21883a 	add	r16,r19,r16
100055c8:	a0001e26 	beq	r20,zero,10005644 <__call_exitprocs+0x100>
100055cc:	80804017 	ldw	r2,256(r16)
100055d0:	15001c26 	beq	r2,r20,10005644 <__call_exitprocs+0x100>
100055d4:	e73fffc4 	addi	fp,fp,-1
100055d8:	843fff04 	addi	r16,r16,-4
100055dc:	8c7fff04 	addi	r17,r17,-4
100055e0:	e5bff91e 	bne	fp,r22,100055c8 <__alt_data_end+0xf80055c8>
100055e4:	00800034 	movhi	r2,0
100055e8:	10800004 	addi	r2,r2,0
100055ec:	10000926 	beq	r2,zero,10005614 <__call_exitprocs+0xd0>
100055f0:	98800117 	ldw	r2,4(r19)
100055f4:	1000311e 	bne	r2,zero,100056bc <__call_exitprocs+0x178>
100055f8:	98800017 	ldw	r2,0(r19)
100055fc:	10003426 	beq	r2,zero,100056d0 <__call_exitprocs+0x18c>
10005600:	9809883a 	mov	r4,r19
10005604:	a8800015 	stw	r2,0(r21)
10005608:	00000000 	call	10000000 <__reset>
1000560c:	acc00017 	ldw	r19,0(r21)
10005610:	983fe41e 	bne	r19,zero,100055a4 <__alt_data_end+0xf80055a4>
10005614:	dfc00b17 	ldw	ra,44(sp)
10005618:	df000a17 	ldw	fp,40(sp)
1000561c:	ddc00917 	ldw	r23,36(sp)
10005620:	dd800817 	ldw	r22,32(sp)
10005624:	dd400717 	ldw	r21,28(sp)
10005628:	dd000617 	ldw	r20,24(sp)
1000562c:	dcc00517 	ldw	r19,20(sp)
10005630:	dc800417 	ldw	r18,16(sp)
10005634:	dc400317 	ldw	r17,12(sp)
10005638:	dc000217 	ldw	r16,8(sp)
1000563c:	dec00c04 	addi	sp,sp,48
10005640:	f800283a 	ret
10005644:	98800117 	ldw	r2,4(r19)
10005648:	80c00017 	ldw	r3,0(r16)
1000564c:	10bfffc4 	addi	r2,r2,-1
10005650:	17001526 	beq	r2,fp,100056a8 <__call_exitprocs+0x164>
10005654:	80000015 	stw	zero,0(r16)
10005658:	183fde26 	beq	r3,zero,100055d4 <__alt_data_end+0xf80055d4>
1000565c:	00800044 	movi	r2,1
10005660:	1708983a 	sll	r4,r2,fp
10005664:	98806217 	ldw	r2,392(r19)
10005668:	9dc00117 	ldw	r23,4(r19)
1000566c:	2084703a 	and	r2,r4,r2
10005670:	1000061e 	bne	r2,zero,1000568c <__call_exitprocs+0x148>
10005674:	183ee83a 	callr	r3
10005678:	98800117 	ldw	r2,4(r19)
1000567c:	15ffc51e 	bne	r2,r23,10005594 <__alt_data_end+0xf8005594>
10005680:	a8800017 	ldw	r2,0(r21)
10005684:	14ffd326 	beq	r2,r19,100055d4 <__alt_data_end+0xf80055d4>
10005688:	003fc206 	br	10005594 <__alt_data_end+0xf8005594>
1000568c:	98806317 	ldw	r2,396(r19)
10005690:	2084703a 	and	r2,r4,r2
10005694:	1000061e 	bne	r2,zero,100056b0 <__call_exitprocs+0x16c>
10005698:	89400017 	ldw	r5,0(r17)
1000569c:	9009883a 	mov	r4,r18
100056a0:	183ee83a 	callr	r3
100056a4:	003ff406 	br	10005678 <__alt_data_end+0xf8005678>
100056a8:	9f000115 	stw	fp,4(r19)
100056ac:	003fea06 	br	10005658 <__alt_data_end+0xf8005658>
100056b0:	89000017 	ldw	r4,0(r17)
100056b4:	183ee83a 	callr	r3
100056b8:	003fef06 	br	10005678 <__alt_data_end+0xf8005678>
100056bc:	98800017 	ldw	r2,0(r19)
100056c0:	982b883a 	mov	r21,r19
100056c4:	1027883a 	mov	r19,r2
100056c8:	983fb61e 	bne	r19,zero,100055a4 <__alt_data_end+0xf80055a4>
100056cc:	003fd106 	br	10005614 <__alt_data_end+0xf8005614>
100056d0:	0005883a 	mov	r2,zero
100056d4:	003ffa06 	br	100056c0 <__alt_data_end+0xf80056c0>

100056d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100056d8:	defffd04 	addi	sp,sp,-12
100056dc:	df000215 	stw	fp,8(sp)
100056e0:	df000204 	addi	fp,sp,8
100056e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100056e8:	0001883a 	nop
100056ec:	e0bfff17 	ldw	r2,-4(fp)
100056f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100056f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100056f8:	10000226 	beq	r2,zero,10005704 <_exit+0x2c>
    ALT_SIM_FAIL();
100056fc:	002af070 	cmpltui	zero,zero,43969
10005700:	00000106 	br	10005708 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10005704:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10005708:	003fff06 	br	10005708 <__alt_data_end+0xf8005708>
